	.file	"reload.c"
# GNU C (Ubuntu/Linaro 4.8.1-10ubuntu9) version 4.8.1 (x86_64-linux-gnu)
#	compiled by GNU C version 4.8.1, GMP version 5.1.2, MPFR version 3.1.1-p2, MPC version 1.0.1
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed:  -I . -imultiarch x86_64-linux-gnu -D SPEC_CPU -D NDEBUG
# -D SPEC_CPU_LP64 reload.c -mtune=generic -march=x86-64 -g -fverbose-asm
# -fno-strict-aliasing -fstack-protector -Wformat -Wformat-security
# options enabled:  -faggressive-loop-optimizations
# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg -fcommon
# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
# -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fgnu-runtime
# -fident -finline-atomics -fira-hoist-pressure -fira-share-save-slots
# -fira-share-spill-slots -fivopts -fkeep-static-consts
# -fleading-underscore -fmath-errno -fmerge-debug-strings
# -fmove-loop-invariants -fpeephole -fprefetch-loop-arrays
# -freg-struct-return -fsched-critical-path-heuristic
# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fshow-column
# -fsigned-zeros -fsplit-ivs-in-unroller -fstack-protector
# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
# -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
# -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
# -ftree-parallelize-loops= -ftree-phiprop -ftree-pta -ftree-reassoc
# -ftree-scev-cprop -ftree-slp-vectorize -ftree-vect-loop-version
# -funit-at-a-time -funwind-tables -fverbose-asm -fzero-initialized-in-bss
# -m128bit-long-double -m64 -m80387 -maccumulate-outgoing-args
# -malign-stringops -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc
# -mieee-fp -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse
# -msse2 -mtls-direct-seg-refs

	.text
.Ltext0:
	.comm	n_reloads,4,4
	.comm	rld,18720,32
	.comm	n_earlyclobbers,4,4
	.comm	reload_earlyclobbers,240,32
	.comm	reload_n_operands,4,4
	.local	replace_reloads
	.comm	replace_reloads,4,4
	.local	replacements
	.comm	replacements,3600,32
	.local	n_replacements
	.comm	n_replacements,4,4
	.local	secondary_memlocs
	.comm	secondary_memlocs,472,32
	.local	secondary_memlocs_elim
	.comm	secondary_memlocs_elim,14160,32
	.local	this_insn
	.comm	this_insn,8,8
	.local	this_insn_is_asm
	.comm	this_insn_is_asm,4,4
	.local	hard_regs_live_known
	.comm	hard_regs_live_known,4,4
	.local	static_reload_reg_p
	.comm	static_reload_reg_p,8,8
	.local	subst_reg_equivs_changed
	.comm	subst_reg_equivs_changed,4,4
	.local	output_reloadnum
	.comm	output_reloadnum,4,4
	.section	.rodata
.LC0:
	.string	"reload.c"
	.text
	.type	push_secondary_reload, @function
push_secondary_reload:
.LFB2:
	.file 1 "reload.c"
	.loc 1 297 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movl	%edi, -52(%rbp)	# in_p, in_p
	movq	%rsi, -64(%rbp)	# x, x
	movl	%edx, -56(%rbp)	# opnum, opnum
	movl	%ecx, -68(%rbp)	# optional, optional
	movl	%r8d, -72(%rbp)	# reload_class, reload_class
	movl	%r9d, -76(%rbp)	# reload_mode, reload_mode
	.loc 1 298 0
	movl	$0, -40(%rbp)	#, class
	.loc 1 299 0
	movl	-76(%rbp), %eax	# reload_mode, tmp316
	movl	%eax, -36(%rbp)	# tmp316, mode
	.loc 1 300 0
	movl	$1317, -32(%rbp)	#, icode
	.loc 1 301 0
	movl	$0, -28(%rbp)	#, t_class
	.loc 1 302 0
	movl	$0, -24(%rbp)	#, t_mode
	.loc 1 303 0
	movl	$1317, -20(%rbp)	#, t_icode
	.loc 1 305 0
	movl	$-1, -8(%rbp)	#, t_reload
	.loc 1 307 0
	cmpl	$3, 16(%rbp)	#, type
	je	.L2	#,
	.loc 1 308 0
	cmpl	$5, 16(%rbp)	#, type
	je	.L2	#,
	.loc 1 309 0
	cmpl	$4, 16(%rbp)	#, type
	je	.L2	#,
	.loc 1 310 0
	cmpl	$6, 16(%rbp)	#, type
	jne	.L3	#,
.L2:
	.loc 1 311 0
	movl	16(%rbp), %eax	# type, tmp317
	movl	%eax, -16(%rbp)	# tmp317, secondary_type
	jmp	.L4	#
.L3:
	.loc 1 313 0
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L5	#,
	.loc 1 313 0 is_stmt 0 discriminator 1
	movl	$3, %eax	#, iftmp.0
	jmp	.L6	#
.L5:
	.loc 1 313 0 discriminator 2
	movl	$5, %eax	#, iftmp.0
.L6:
	.loc 1 313 0 discriminator 3
	movl	%eax, -16(%rbp)	# iftmp.0, secondary_type
.L4:
	.loc 1 315 0 is_stmt 1
	movq	24(%rbp), %rax	# picode, tmp318
	movl	$1317, (%rax)	#, *picode_98(D)
	.loc 1 319 0
	movq	-64(%rbp), %rax	# x, tmp319
	movzwl	(%rax), %eax	# x_99(D)->code, D.23503
	cmpw	$63, %ax	#, D.23503
	jne	.L7	#,
	.loc 1 320 0
	movq	-64(%rbp), %rax	# x, tmp320
	movzbl	2(%rax), %eax	# x_99(D)->mode, D.23504
	movzbl	%al, %eax	# D.23504, D.23502
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23504
	.loc 1 321 0
	movq	-64(%rbp), %rax	# x, tmp322
	movq	8(%rax), %rax	# x_99(D)->fld[0].rtx, D.23505
	movzbl	2(%rax), %eax	# _104->mode, D.23504
	movzbl	%al, %eax	# D.23504, D.23502
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23504
	.loc 1 320 0
	cmpb	%al, %dl	# D.23504, D.23504
	jbe	.L7	#,
	.loc 1 323 0
	movq	-64(%rbp), %rax	# x, tmp324
	movq	8(%rax), %rax	# x_99(D)->fld[0].rtx, tmp325
	movq	%rax, -64(%rbp)	# tmp325, x
	.loc 1 324 0
	movq	-64(%rbp), %rax	# x, tmp326
	movzbl	2(%rax), %eax	# x_108->mode, D.23504
	movzbl	%al, %eax	# D.23504, tmp327
	movl	%eax, -76(%rbp)	# tmp327, reload_mode
.L7:
	.loc 1 333 0
	movq	-64(%rbp), %rax	# x, tmp328
	movzwl	(%rax), %eax	# x_1->code, D.23503
	cmpw	$61, %ax	#, D.23503
	jne	.L8	#,
	.loc 1 333 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# x, tmp329
	movl	8(%rax), %eax	# x_1->fld[0].rtuint, D.23506
	cmpl	$52, %eax	#, D.23506
	jbe	.L8	#,
	.loc 1 334 0 is_stmt 1
	movq	reg_equiv_mem(%rip), %rdx	# reg_equiv_mem, reg_equiv_mem.1
	movq	-64(%rbp), %rax	# x, tmp330
	movl	8(%rax), %eax	# x_1->fld[0].rtuint, D.23506
	movl	%eax, %eax	# D.23506, D.23507
	salq	$3, %rax	#, D.23507
	addq	%rdx, %rax	# reg_equiv_mem.1, D.23508
	movq	(%rax), %rax	# *_117, D.23505
	testq	%rax, %rax	# D.23505
	je	.L8	#,
	.loc 1 335 0
	movq	reg_equiv_mem(%rip), %rdx	# reg_equiv_mem, reg_equiv_mem.2
	movq	-64(%rbp), %rax	# x, tmp331
	movl	8(%rax), %eax	# x_1->fld[0].rtuint, D.23506
	movl	%eax, %eax	# D.23506, D.23507
	salq	$3, %rax	#, D.23507
	addq	%rdx, %rax	# reg_equiv_mem.2, D.23508
	movq	(%rax), %rax	# *_123, tmp332
	movq	%rax, -64(%rbp)	# tmp332, x
.L8:
	.loc 1 343 0
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L9	#,
	.loc 1 344 0
	cmpl	$12, -72(%rbp)	#, reload_class
	je	.L10	#,
	.loc 1 344 0 is_stmt 0 discriminator 2
	cmpl	$11, -72(%rbp)	#, reload_class
	je	.L10	#,
	.loc 1 344 0 discriminator 1
	cmpl	$10, -72(%rbp)	#, reload_class
	jne	.L11	#,
.L10:
	movl	target_flags(%rip), %eax	# target_flags, target_flags.4
	andl	$33554432, %eax	#, D.23502
	testl	%eax, %eax	# D.23502
	jne	.L11	#,
	cmpl	$2, -76(%rbp)	#, reload_mode
	jne	.L11	#,
	movl	$8, %eax	#, iftmp.3
	jmp	.L12	#
.L11:
	movl	$0, %eax	#, iftmp.3
.L12:
	.loc 1 344 0 discriminator 3
	movl	%eax, -40(%rbp)	# iftmp.3, class
.L9:
	.loc 1 348 0 is_stmt 1
	cmpl	$0, -40(%rbp)	#, class
	jne	.L13	#,
	.loc 1 349 0
	movl	$-1, %eax	#, D.23502
	jmp	.L14	#
.L13:
	.loc 1 354 0
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L15	#,
	.loc 1 354 0 is_stmt 0 discriminator 1
	movl	-76(%rbp), %eax	# reload_mode, reload_mode.6
	cltq
	movl	reload_in_optab(,%rax,4), %eax	# reload_in_optab, iftmp.5
	jmp	.L16	#
.L15:
	.loc 1 355 0 is_stmt 1 discriminator 2
	movl	-76(%rbp), %eax	# reload_mode, reload_mode.7
	.loc 1 354 0 discriminator 2
	cltq
	movl	reload_out_optab(,%rax,4), %eax	# reload_out_optab, iftmp.5
.L16:
	.loc 1 354 0 is_stmt 0 discriminator 3
	movl	%eax, -32(%rbp)	# iftmp.5, icode
	.loc 1 357 0 is_stmt 1 discriminator 3
	cmpl	$1317, -32(%rbp)	#, icode
	je	.L17	#,
	.loc 1 358 0
	movl	-32(%rbp), %eax	# icode, icode.8
	movslq	%eax, %rdx	# icode.8, tmp335
	movq	%rdx, %rax	# tmp335, tmp336
	salq	$2, %rax	#, tmp336
	addq	%rdx, %rax	# tmp335, tmp336
	salq	$3, %rax	#, tmp337
	addq	$insn_data+24, %rax	#, tmp338
	movq	(%rax), %rcx	# insn_data[icode.8_137].operand, D.23509
	movl	-52(%rbp), %eax	# in_p, tmp339
	movslq	%eax, %rdx	# tmp339, D.23507
	movq	%rdx, %rax	# D.23507, tmp340
	addq	%rax, %rax	# tmp340
	addq	%rdx, %rax	# D.23507, tmp340
	salq	$3, %rax	#, tmp341
	addq	%rcx, %rax	# D.23509, D.23509
	movq	(%rax), %rax	# _141->predicate, D.23510
	testq	%rax, %rax	# D.23510
	je	.L17	#,
	.loc 1 359 0
	movl	-32(%rbp), %eax	# icode, icode.9
	movslq	%eax, %rdx	# icode.9, tmp342
	movq	%rdx, %rax	# tmp342, tmp343
	salq	$2, %rax	#, tmp343
	addq	%rdx, %rax	# tmp342, tmp343
	salq	$3, %rax	#, tmp344
	addq	$insn_data+24, %rax	#, tmp345
	movq	(%rax), %rcx	# insn_data[icode.9_143].operand, D.23509
	movl	-52(%rbp), %eax	# in_p, tmp346
	movslq	%eax, %rdx	# tmp346, D.23507
	movq	%rdx, %rax	# D.23507, tmp347
	addq	%rax, %rax	# tmp347
	addq	%rdx, %rax	# D.23507, tmp347
	salq	$3, %rax	#, tmp348
	addq	%rcx, %rax	# D.23509, D.23509
	movq	(%rax), %rax	# _147->predicate, D.23510
	movl	-76(%rbp), %ecx	# reload_mode, tmp349
	movq	-64(%rbp), %rdx	# x, tmp350
	movl	%ecx, %esi	# tmp349,
	movq	%rdx, %rdi	# tmp350,
	call	*%rax	# D.23510
	testl	%eax, %eax	# D.23502
	jne	.L17	#,
	.loc 1 360 0
	movl	$1317, -32(%rbp)	#, icode
.L17:
	.loc 1 368 0
	cmpl	$1317, -32(%rbp)	#, icode
	je	.L18	#,
.LBB2:
	.loc 1 377 0
	movl	-32(%rbp), %eax	# icode, icode.10
	movslq	%eax, %rdx	# icode.10, tmp351
	movq	%rdx, %rax	# tmp351, tmp352
	salq	$2, %rax	#, tmp352
	addq	%rdx, %rax	# tmp351, tmp352
	salq	$3, %rax	#, tmp353
	addq	$insn_data+24, %rax	#, tmp354
	movq	(%rax), %rdx	# insn_data[icode.10_151].operand, D.23509
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L19	#,
	.loc 1 377 0 is_stmt 0 discriminator 1
	movl	$24, %eax	#, iftmp.11
	jmp	.L20	#
.L19:
	.loc 1 377 0 discriminator 2
	movl	$0, %eax	#, iftmp.11
.L20:
	.loc 1 377 0 discriminator 3
	addq	%rdx, %rax	# D.23509, D.23509
	movq	8(%rax), %rax	# _155->constraint, D.23511
	movzbl	(%rax), %eax	# *_156, D.23512
	testb	%al, %al	# D.23512
	jne	.L21	#,
	.loc 1 378 0 is_stmt 1
	movl	$24, -4(%rbp)	#, insn_class
	jmp	.L22	#
.L21:
.LBB3:
	.loc 1 382 0
	movl	-32(%rbp), %eax	# icode, icode.12
	movslq	%eax, %rdx	# icode.12, tmp355
	movq	%rdx, %rax	# tmp355, tmp356
	salq	$2, %rax	#, tmp356
	addq	%rdx, %rax	# tmp355, tmp356
	salq	$3, %rax	#, tmp357
	addq	$insn_data+24, %rax	#, tmp358
	movq	(%rax), %rdx	# insn_data[icode.12_159].operand, D.23509
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L23	#,
	.loc 1 382 0 is_stmt 0 discriminator 1
	movl	$24, %eax	#, iftmp.13
	jmp	.L24	#
.L23:
	.loc 1 382 0 discriminator 2
	movl	$0, %eax	#, iftmp.13
.L24:
	.loc 1 382 0 discriminator 3
	addq	%rdx, %rax	# D.23509, D.23509
	movq	8(%rax), %rdx	# _163->constraint, D.23511
	movl	-52(%rbp), %eax	# in_p, tmp359
	cltq
	addq	%rdx, %rax	# D.23511, D.23511
	.loc 1 381 0 is_stmt 1 discriminator 3
	movzbl	(%rax), %eax	# *_166, tmp360
	movb	%al, -42(%rbp)	# tmp360, insn_letter
	.loc 1 384 0 discriminator 3
	cmpb	$114, -42(%rbp)	#, insn_letter
	je	.L25	#,
	.loc 1 384 0 is_stmt 0 discriminator 1
	cmpb	$114, -42(%rbp)	#, insn_letter
	je	.L26	#,
	.loc 1 384 0 discriminator 3
	cmpb	$82, -42(%rbp)	#, insn_letter
	je	.L27	#,
	.loc 1 384 0 discriminator 5
	cmpb	$113, -42(%rbp)	#, insn_letter
	jne	.L28	#,
	.loc 1 385 0 is_stmt 1 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.19
	andl	$33554432, %eax	#, D.23502
	.loc 1 384 0 discriminator 7
	testl	%eax, %eax	# D.23502
	je	.L29	#,
	.loc 1 384 0 is_stmt 0 discriminator 9
	movl	$12, %eax	#, iftmp.18
	jmp	.L77	#
.L29:
	.loc 1 384 0 discriminator 10
	movl	$8, %eax	#, iftmp.18
	jmp	.L77	#
.L28:
	.loc 1 384 0 discriminator 8
	cmpb	$81, -42(%rbp)	#, insn_letter
	je	.L32	#,
	.loc 1 384 0 discriminator 11
	cmpb	$102, -42(%rbp)	#, insn_letter
	jne	.L33	#,
	.loc 1 385 0 is_stmt 1 discriminator 13
	movl	target_flags(%rip), %eax	# target_flags, target_flags.23
	andl	$1, %eax	#, D.23502
	.loc 1 384 0 discriminator 13
	testl	%eax, %eax	# D.23502
	jne	.L34	#,
	.loc 1 385 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.24
	andl	$32, %eax	#, D.23502
	testl	%eax, %eax	# D.23502
	je	.L35	#,
.L34:
	.loc 1 384 0 discriminator 15
	movl	$15, %eax	#, iftmp.22
	jmp	.L36	#
.L35:
	.loc 1 384 0 is_stmt 0
	movl	$0, %eax	#, iftmp.22
.L36:
	jmp	.L77	#
.L33:
	.loc 1 384 0 discriminator 14
	cmpb	$116, -42(%rbp)	#, insn_letter
	jne	.L38	#,
	.loc 1 385 0 is_stmt 1 discriminator 17
	movl	target_flags(%rip), %eax	# target_flags, target_flags.27
	andl	$1, %eax	#, D.23502
	.loc 1 384 0 discriminator 17
	testl	%eax, %eax	# D.23502
	jne	.L39	#,
	.loc 1 385 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.28
	andl	$32, %eax	#, D.23502
	testl	%eax, %eax	# D.23502
	je	.L40	#,
.L39:
	.loc 1 384 0 discriminator 19
	movl	$13, %eax	#, iftmp.26
	jmp	.L41	#
.L40:
	.loc 1 384 0 is_stmt 0
	movl	$0, %eax	#, iftmp.26
.L41:
	jmp	.L77	#
.L38:
	.loc 1 384 0 discriminator 18
	cmpb	$117, -42(%rbp)	#, insn_letter
	jne	.L43	#,
	.loc 1 385 0 is_stmt 1 discriminator 21
	movl	target_flags(%rip), %eax	# target_flags, target_flags.31
	andl	$1, %eax	#, D.23502
	.loc 1 384 0 discriminator 21
	testl	%eax, %eax	# D.23502
	jne	.L44	#,
	.loc 1 385 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.32
	andl	$32, %eax	#, D.23502
	testl	%eax, %eax	# D.23502
	je	.L45	#,
.L44:
	.loc 1 384 0 discriminator 23
	movl	$14, %eax	#, iftmp.30
	jmp	.L46	#
.L45:
	.loc 1 384 0 is_stmt 0
	movl	$0, %eax	#, iftmp.30
.L46:
	jmp	.L77	#
.L43:
	.loc 1 384 0 discriminator 22
	cmpb	$97, -42(%rbp)	#, insn_letter
	je	.L48	#,
	.loc 1 384 0 discriminator 25
	cmpb	$98, -42(%rbp)	#, insn_letter
	je	.L49	#,
	.loc 1 384 0 discriminator 27
	cmpb	$99, -42(%rbp)	#, insn_letter
	je	.L50	#,
	.loc 1 384 0 discriminator 29
	cmpb	$100, -42(%rbp)	#, insn_letter
	je	.L51	#,
	.loc 1 384 0 discriminator 31
	cmpb	$120, -42(%rbp)	#, insn_letter
	jne	.L52	#,
	.loc 1 385 0 is_stmt 1 discriminator 33
	movl	target_flags(%rip), %eax	# target_flags, target_flags.39
	andl	$327680, %eax	#, D.23502
	.loc 1 384 0 discriminator 33
	testl	%eax, %eax	# D.23502
	je	.L53	#,
	.loc 1 384 0 is_stmt 0 discriminator 35
	movl	$16, %eax	#, iftmp.38
	jmp	.L77	#
.L53:
	.loc 1 384 0 discriminator 36
	movl	$0, %eax	#, iftmp.38
	jmp	.L77	#
.L52:
	.loc 1 384 0 discriminator 34
	cmpb	$89, -42(%rbp)	#, insn_letter
	jne	.L56	#,
	.loc 1 385 0 is_stmt 1 discriminator 37
	movl	target_flags(%rip), %eax	# target_flags, target_flags.42
	andl	$262144, %eax	#, D.23502
	.loc 1 384 0 discriminator 37
	testl	%eax, %eax	# D.23502
	je	.L57	#,
	.loc 1 384 0 is_stmt 0 discriminator 39
	movl	$16, %eax	#, iftmp.41
	jmp	.L77	#
.L57:
	.loc 1 384 0 discriminator 40
	movl	$0, %eax	#, iftmp.41
	jmp	.L77	#
.L56:
	.loc 1 384 0 discriminator 38
	cmpb	$121, -42(%rbp)	#, insn_letter
	jne	.L60	#,
	.loc 1 385 0 is_stmt 1 discriminator 41
	movl	target_flags(%rip), %eax	# target_flags, target_flags.45
	andl	$16384, %eax	#, D.23502
	.loc 1 384 0 discriminator 41
	testl	%eax, %eax	# D.23502
	je	.L61	#,
	.loc 1 384 0 is_stmt 0 discriminator 43
	movl	$17, %eax	#, iftmp.44
	jmp	.L77	#
.L61:
	.loc 1 384 0 discriminator 44
	movl	$0, %eax	#, iftmp.44
	jmp	.L77	#
.L60:
	.loc 1 384 0 discriminator 42
	cmpb	$65, -42(%rbp)	#, insn_letter
	je	.L64	#,
	.loc 1 384 0 discriminator 45
	cmpb	$68, -42(%rbp)	#, insn_letter
	je	.L65	#,
	.loc 1 384 0 discriminator 47
	cmpb	$83, -42(%rbp)	#, insn_letter
	jne	.L66	#,
	.loc 1 384 0 discriminator 49
	movl	$5, %eax	#, iftmp.48
	jmp	.L77	#
.L66:
	.loc 1 384 0 discriminator 50
	movl	$0, %eax	#, iftmp.48
	jmp	.L77	#
.L65:
	.loc 1 384 0 discriminator 48
	movl	$6, %eax	#, iftmp.47
	jmp	.L77	#
.L64:
	.loc 1 384 0 discriminator 46
	movl	$7, %eax	#, iftmp.46
	jmp	.L77	#
.L51:
	.loc 1 384 0 discriminator 32
	movl	$2, %eax	#, iftmp.36
	jmp	.L77	#
.L50:
	.loc 1 384 0 discriminator 30
	movl	$3, %eax	#, iftmp.35
	jmp	.L77	#
.L49:
	.loc 1 384 0 discriminator 28
	movl	$4, %eax	#, iftmp.34
	jmp	.L77	#
.L48:
	.loc 1 384 0 discriminator 26
	movl	$1, %eax	#, iftmp.33
	jmp	.L77	#
.L32:
	.loc 1 384 0 discriminator 12
	movl	$8, %eax	#, iftmp.20
	jmp	.L77	#
.L27:
	.loc 1 384 0 discriminator 6
	movl	$11, %eax	#, iftmp.16
	jmp	.L77	#
.L26:
	.loc 1 384 0 discriminator 4
	movl	$12, %eax	#, iftmp.15
	jmp	.L77	#
.L25:
	.loc 1 384 0 discriminator 2
	movl	$12, %eax	#, iftmp.14
.L77:
	.loc 1 384 0 discriminator 58
	movl	%eax, -4(%rbp)	# iftmp.14, insn_class
	.loc 1 387 0 is_stmt 1 discriminator 58
	cmpl	$0, -4(%rbp)	#, insn_class
	jne	.L78	#,
	.loc 1 388 0
	movl	$__FUNCTION__.11576, %edx	#,
	movl	$388, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L78:
	.loc 1 389 0
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L22	#,
	.loc 1 390 0
	movl	-32(%rbp), %eax	# icode, icode.49
	movslq	%eax, %rdx	# icode.49, tmp361
	movq	%rdx, %rax	# tmp361, tmp362
	salq	$2, %rax	#, tmp362
	addq	%rdx, %rax	# tmp361, tmp362
	salq	$3, %rax	#, tmp363
	addq	$insn_data+24, %rax	#, tmp364
	movq	(%rax), %rdx	# insn_data[icode.49_239].operand, D.23509
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L79	#,
	.loc 1 390 0 is_stmt 0 discriminator 1
	movl	$24, %eax	#, iftmp.50
	jmp	.L80	#
.L79:
	.loc 1 390 0 discriminator 2
	movl	$0, %eax	#, iftmp.50
.L80:
	.loc 1 390 0 discriminator 3
	addq	%rdx, %rax	# D.23509, D.23509
	movq	8(%rax), %rax	# _243->constraint, D.23511
	movzbl	(%rax), %eax	# *_244, D.23512
	cmpb	$61, %al	#, D.23512
	je	.L22	#,
	.loc 1 391 0 is_stmt 1
	movl	$__FUNCTION__.11576, %edx	#,
	movl	$391, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L22:
.LBE3:
	.loc 1 395 0
	movl	-32(%rbp), %eax	# icode, icode.51
	movslq	%eax, %rdx	# icode.51, tmp365
	movq	%rdx, %rax	# tmp365, tmp366
	salq	$2, %rax	#, tmp366
	addq	%rdx, %rax	# tmp365, tmp366
	salq	$3, %rax	#, tmp367
	addq	$insn_data+24, %rax	#, tmp368
	movq	(%rax), %rax	# insn_data[icode.51_246].operand, D.23509
	addq	$48, %rax	#, D.23509
	movq	8(%rax), %rax	# _248->constraint, D.23511
	movzbl	(%rax), %eax	# *_249, D.23512
	cmpb	$61, %al	#, D.23512
	jne	.L81	#,
	.loc 1 396 0
	movl	-32(%rbp), %eax	# icode, icode.52
	movslq	%eax, %rdx	# icode.52, tmp369
	movq	%rdx, %rax	# tmp369, tmp370
	salq	$2, %rax	#, tmp370
	addq	%rdx, %rax	# tmp369, tmp370
	salq	$3, %rax	#, tmp371
	addq	$insn_data+24, %rax	#, tmp372
	movq	(%rax), %rax	# insn_data[icode.52_251].operand, D.23509
	addq	$48, %rax	#, D.23509
	movq	8(%rax), %rax	# _253->constraint, D.23511
	addq	$1, %rax	#, D.23511
	movzbl	(%rax), %eax	# *_255, D.23512
	cmpb	$38, %al	#, D.23512
	je	.L82	#,
.L81:
	.loc 1 397 0
	movl	$__FUNCTION__.11576, %edx	#,
	movl	$397, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L82:
	.loc 1 399 0
	movl	-4(%rbp), %edx	# insn_class, tmp373
	movl	-72(%rbp), %eax	# reload_class, tmp374
	movl	%edx, %esi	# tmp373,
	movl	%eax, %edi	# tmp374,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23502
	je	.L83	#,
	.loc 1 400 0
	movl	-32(%rbp), %eax	# icode, icode.53
	movslq	%eax, %rdx	# icode.53, tmp375
	movq	%rdx, %rax	# tmp375, tmp376
	salq	$2, %rax	#, tmp376
	addq	%rdx, %rax	# tmp375, tmp376
	salq	$3, %rax	#, tmp377
	addq	$insn_data+24, %rax	#, tmp378
	movq	(%rax), %rax	# insn_data[icode.53_258].operand, D.23509
	addq	$48, %rax	#, D.23509
	movzwl	16(%rax), %eax	# _260->mode, D.23503
	movzwl	%ax, %eax	# D.23503, tmp379
	movl	%eax, -36(%rbp)	# tmp379, mode
	jmp	.L18	#
.L83:
.LBB4:
	.loc 1 403 0
	movl	-32(%rbp), %eax	# icode, icode.54
	movslq	%eax, %rdx	# icode.54, tmp380
	movq	%rdx, %rax	# tmp380, tmp381
	salq	$2, %rax	#, tmp381
	addq	%rdx, %rax	# tmp380, tmp381
	salq	$3, %rax	#, tmp382
	addq	$insn_data+24, %rax	#, tmp383
	movq	(%rax), %rax	# insn_data[icode.54_263].operand, D.23509
	addq	$48, %rax	#, D.23509
	movq	8(%rax), %rax	# _265->constraint, D.23511
	movzbl	2(%rax), %eax	# MEM[(const char *)_266 + 2B], tmp384
	movb	%al, -41(%rbp)	# tmp384, t_letter
	.loc 1 404 0
	movl	-4(%rbp), %eax	# insn_class, tmp385
	movl	%eax, -40(%rbp)	# tmp385, class
	.loc 1 405 0
	movl	-32(%rbp), %eax	# icode, icode.55
	movslq	%eax, %rdx	# icode.55, tmp386
	movq	%rdx, %rax	# tmp386, tmp387
	salq	$2, %rax	#, tmp387
	addq	%rdx, %rax	# tmp386, tmp387
	salq	$3, %rax	#, tmp388
	addq	$insn_data+24, %rax	#, tmp389
	movq	(%rax), %rax	# insn_data[icode.55_269].operand, D.23509
	addq	$48, %rax	#, D.23509
	movzwl	16(%rax), %eax	# _271->mode, D.23503
	movzwl	%ax, %eax	# D.23503, tmp390
	movl	%eax, -24(%rbp)	# tmp390, t_mode
	.loc 1 406 0
	cmpb	$114, -41(%rbp)	#, t_letter
	je	.L84	#,
	.loc 1 406 0 is_stmt 0 discriminator 1
	cmpb	$114, -41(%rbp)	#, t_letter
	je	.L85	#,
	.loc 1 406 0 discriminator 3
	cmpb	$82, -41(%rbp)	#, t_letter
	je	.L86	#,
	.loc 1 406 0 discriminator 5
	cmpb	$113, -41(%rbp)	#, t_letter
	jne	.L87	#,
	.loc 1 407 0 is_stmt 1 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.61
	andl	$33554432, %eax	#, D.23502
	.loc 1 406 0 discriminator 7
	testl	%eax, %eax	# D.23502
	je	.L88	#,
	.loc 1 406 0 is_stmt 0 discriminator 9
	movl	$12, %eax	#, iftmp.60
	jmp	.L136	#
.L88:
	.loc 1 406 0 discriminator 10
	movl	$8, %eax	#, iftmp.60
	jmp	.L136	#
.L87:
	.loc 1 406 0 discriminator 8
	cmpb	$81, -41(%rbp)	#, t_letter
	je	.L91	#,
	.loc 1 406 0 discriminator 11
	cmpb	$102, -41(%rbp)	#, t_letter
	jne	.L92	#,
	.loc 1 407 0 is_stmt 1 discriminator 13
	movl	target_flags(%rip), %eax	# target_flags, target_flags.65
	andl	$1, %eax	#, D.23502
	.loc 1 406 0 discriminator 13
	testl	%eax, %eax	# D.23502
	jne	.L93	#,
	.loc 1 407 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.66
	andl	$32, %eax	#, D.23502
	testl	%eax, %eax	# D.23502
	je	.L94	#,
.L93:
	.loc 1 406 0 discriminator 15
	movl	$15, %eax	#, iftmp.64
	jmp	.L95	#
.L94:
	.loc 1 406 0 is_stmt 0
	movl	$0, %eax	#, iftmp.64
.L95:
	jmp	.L136	#
.L92:
	.loc 1 406 0 discriminator 14
	cmpb	$116, -41(%rbp)	#, t_letter
	jne	.L97	#,
	.loc 1 407 0 is_stmt 1 discriminator 17
	movl	target_flags(%rip), %eax	# target_flags, target_flags.69
	andl	$1, %eax	#, D.23502
	.loc 1 406 0 discriminator 17
	testl	%eax, %eax	# D.23502
	jne	.L98	#,
	.loc 1 407 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.70
	andl	$32, %eax	#, D.23502
	testl	%eax, %eax	# D.23502
	je	.L99	#,
.L98:
	.loc 1 406 0 discriminator 19
	movl	$13, %eax	#, iftmp.68
	jmp	.L100	#
.L99:
	.loc 1 406 0 is_stmt 0
	movl	$0, %eax	#, iftmp.68
.L100:
	jmp	.L136	#
.L97:
	.loc 1 406 0 discriminator 18
	cmpb	$117, -41(%rbp)	#, t_letter
	jne	.L102	#,
	.loc 1 407 0 is_stmt 1 discriminator 21
	movl	target_flags(%rip), %eax	# target_flags, target_flags.73
	andl	$1, %eax	#, D.23502
	.loc 1 406 0 discriminator 21
	testl	%eax, %eax	# D.23502
	jne	.L103	#,
	.loc 1 407 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.74
	andl	$32, %eax	#, D.23502
	testl	%eax, %eax	# D.23502
	je	.L104	#,
.L103:
	.loc 1 406 0 discriminator 23
	movl	$14, %eax	#, iftmp.72
	jmp	.L105	#
.L104:
	.loc 1 406 0 is_stmt 0
	movl	$0, %eax	#, iftmp.72
.L105:
	jmp	.L136	#
.L102:
	.loc 1 406 0 discriminator 22
	cmpb	$97, -41(%rbp)	#, t_letter
	je	.L107	#,
	.loc 1 406 0 discriminator 25
	cmpb	$98, -41(%rbp)	#, t_letter
	je	.L108	#,
	.loc 1 406 0 discriminator 27
	cmpb	$99, -41(%rbp)	#, t_letter
	je	.L109	#,
	.loc 1 406 0 discriminator 29
	cmpb	$100, -41(%rbp)	#, t_letter
	je	.L110	#,
	.loc 1 406 0 discriminator 31
	cmpb	$120, -41(%rbp)	#, t_letter
	jne	.L111	#,
	.loc 1 407 0 is_stmt 1 discriminator 33
	movl	target_flags(%rip), %eax	# target_flags, target_flags.81
	andl	$327680, %eax	#, D.23502
	.loc 1 406 0 discriminator 33
	testl	%eax, %eax	# D.23502
	je	.L112	#,
	.loc 1 406 0 is_stmt 0 discriminator 35
	movl	$16, %eax	#, iftmp.80
	jmp	.L136	#
.L112:
	.loc 1 406 0 discriminator 36
	movl	$0, %eax	#, iftmp.80
	jmp	.L136	#
.L111:
	.loc 1 406 0 discriminator 34
	cmpb	$89, -41(%rbp)	#, t_letter
	jne	.L115	#,
	.loc 1 407 0 is_stmt 1 discriminator 37
	movl	target_flags(%rip), %eax	# target_flags, target_flags.84
	andl	$262144, %eax	#, D.23502
	.loc 1 406 0 discriminator 37
	testl	%eax, %eax	# D.23502
	je	.L116	#,
	.loc 1 406 0 is_stmt 0 discriminator 39
	movl	$16, %eax	#, iftmp.83
	jmp	.L136	#
.L116:
	.loc 1 406 0 discriminator 40
	movl	$0, %eax	#, iftmp.83
	jmp	.L136	#
.L115:
	.loc 1 406 0 discriminator 38
	cmpb	$121, -41(%rbp)	#, t_letter
	jne	.L119	#,
	.loc 1 407 0 is_stmt 1 discriminator 41
	movl	target_flags(%rip), %eax	# target_flags, target_flags.87
	andl	$16384, %eax	#, D.23502
	.loc 1 406 0 discriminator 41
	testl	%eax, %eax	# D.23502
	je	.L120	#,
	.loc 1 406 0 is_stmt 0 discriminator 43
	movl	$17, %eax	#, iftmp.86
	jmp	.L136	#
.L120:
	.loc 1 406 0 discriminator 44
	movl	$0, %eax	#, iftmp.86
	jmp	.L136	#
.L119:
	.loc 1 406 0 discriminator 42
	cmpb	$65, -41(%rbp)	#, t_letter
	je	.L123	#,
	.loc 1 406 0 discriminator 45
	cmpb	$68, -41(%rbp)	#, t_letter
	je	.L124	#,
	.loc 1 406 0 discriminator 47
	cmpb	$83, -41(%rbp)	#, t_letter
	jne	.L125	#,
	.loc 1 406 0 discriminator 49
	movl	$5, %eax	#, iftmp.90
	jmp	.L136	#
.L125:
	.loc 1 406 0 discriminator 50
	movl	$0, %eax	#, iftmp.90
	jmp	.L136	#
.L124:
	.loc 1 406 0 discriminator 48
	movl	$6, %eax	#, iftmp.89
	jmp	.L136	#
.L123:
	.loc 1 406 0 discriminator 46
	movl	$7, %eax	#, iftmp.88
	jmp	.L136	#
.L110:
	.loc 1 406 0 discriminator 32
	movl	$2, %eax	#, iftmp.78
	jmp	.L136	#
.L109:
	.loc 1 406 0 discriminator 30
	movl	$3, %eax	#, iftmp.77
	jmp	.L136	#
.L108:
	.loc 1 406 0 discriminator 28
	movl	$4, %eax	#, iftmp.76
	jmp	.L136	#
.L107:
	.loc 1 406 0 discriminator 26
	movl	$1, %eax	#, iftmp.75
	jmp	.L136	#
.L91:
	.loc 1 406 0 discriminator 12
	movl	$8, %eax	#, iftmp.62
	jmp	.L136	#
.L86:
	.loc 1 406 0 discriminator 6
	movl	$11, %eax	#, iftmp.58
	jmp	.L136	#
.L85:
	.loc 1 406 0 discriminator 4
	movl	$12, %eax	#, iftmp.57
	jmp	.L136	#
.L84:
	.loc 1 406 0 discriminator 2
	movl	$12, %eax	#, iftmp.56
.L136:
	.loc 1 406 0 discriminator 58
	movl	%eax, -28(%rbp)	# iftmp.56, t_class
	.loc 1 408 0 is_stmt 1 discriminator 58
	movl	-32(%rbp), %eax	# icode, tmp391
	movl	%eax, -20(%rbp)	# tmp391, t_icode
	.loc 1 409 0 discriminator 58
	movl	$1317, -32(%rbp)	#, icode
.L18:
.LBE4:
.LBE2:
	.loc 1 427 0
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L137	#,
	.loc 1 427 0 is_stmt 0 discriminator 1
	movl	-40(%rbp), %eax	# class, tmp392
	cmpl	-72(%rbp), %eax	# reload_class, tmp392
	jne	.L137	#,
	cmpl	$1317, -32(%rbp)	#, icode
	jne	.L137	#,
	.loc 1 428 0 is_stmt 1
	cmpl	$1317, -20(%rbp)	#, t_icode
	jne	.L137	#,
	.loc 1 429 0
	movl	$__FUNCTION__.11576, %edx	#,
	movl	$429, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L137:
	.loc 1 434 0
	cmpl	$0, -28(%rbp)	#, t_class
	je	.L138	#,
	.loc 1 436 0
	movl	$0, -8(%rbp)	#, t_reload
	jmp	.L139	#
.L154:
	.loc 1 437 0
	movl	-8(%rbp), %eax	# t_reload, tmp394
	movslq	%eax, %rdx	# tmp394, tmp393
	movq	%rdx, %rax	# tmp393, tmp395
	addq	%rax, %rax	# tmp395
	addq	%rdx, %rax	# tmp393, tmp395
	salq	$2, %rax	#, tmp395
	addq	%rdx, %rax	# tmp393, tmp395
	salq	$3, %rax	#, tmp396
	addq	$rld+96, %rax	#, tmp397
	movzbl	(%rax), %eax	#, tmp400
	shrb	$2, %al	#, D.23514
	andl	$1, %eax	#, D.23514
	testb	%al, %al	# D.23514
	je	.L140	#,
	.loc 1 438 0
	movl	-8(%rbp), %eax	# t_reload, tmp402
	movslq	%eax, %rdx	# tmp402, tmp401
	movq	%rdx, %rax	# tmp401, tmp403
	addq	%rax, %rax	# tmp403
	addq	%rdx, %rax	# tmp401, tmp403
	salq	$2, %rax	#, tmp403
	addq	%rdx, %rax	# tmp401, tmp403
	salq	$3, %rax	#, tmp404
	addq	$rld+16, %rax	#, tmp405
	movl	(%rax), %edx	# rld[t_reload_16].class, D.23515
	movl	-28(%rbp), %eax	# t_class, tmp406
	movl	%edx, %esi	# D.23515,
	movl	%eax, %edi	# tmp406,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23502
	jne	.L141	#,
	.loc 1 439 0
	movl	-8(%rbp), %eax	# t_reload, tmp408
	movslq	%eax, %rdx	# tmp408, tmp407
	movq	%rdx, %rax	# tmp407, tmp409
	addq	%rax, %rax	# tmp409
	addq	%rdx, %rax	# tmp407, tmp409
	salq	$2, %rax	#, tmp409
	addq	%rdx, %rax	# tmp407, tmp409
	salq	$3, %rax	#, tmp410
	addq	$rld+16, %rax	#, tmp411
	movl	(%rax), %eax	# rld[t_reload_16].class, D.23515
	movl	-28(%rbp), %edx	# t_class, tmp412
	movl	%edx, %esi	# tmp412,
	movl	%eax, %edi	# D.23515,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23502
	je	.L140	#,
.L141:
	.loc 1 440 0
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L142	#,
	.loc 1 440 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %eax	# t_reload, tmp414
	movslq	%eax, %rdx	# tmp414, tmp413
	movq	%rdx, %rax	# tmp413, tmp415
	addq	%rax, %rax	# tmp415
	addq	%rdx, %rax	# tmp413, tmp415
	salq	$2, %rax	#, tmp415
	addq	%rdx, %rax	# tmp413, tmp415
	salq	$3, %rax	#, tmp416
	addq	$rld+16, %rax	#, tmp417
	movl	4(%rax), %eax	# rld[t_reload_16].inmode, D.23516
	cmpl	-24(%rbp), %eax	# t_mode, D.23516
	je	.L143	#,
.L142:
	.loc 1 441 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L140	#,
	.loc 1 441 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %eax	# t_reload, tmp419
	movslq	%eax, %rdx	# tmp419, tmp418
	movq	%rdx, %rax	# tmp418, tmp420
	addq	%rax, %rax	# tmp420
	addq	%rdx, %rax	# tmp418, tmp420
	salq	$2, %rax	#, tmp420
	addq	%rdx, %rax	# tmp418, tmp420
	salq	$3, %rax	#, tmp421
	addq	$rld+16, %rax	#, tmp422
	movl	8(%rax), %eax	# rld[t_reload_16].outmode, D.23516
	cmpl	-24(%rbp), %eax	# t_mode, D.23516
	jne	.L140	#,
.L143:
	.loc 1 442 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L144	#,
	.loc 1 442 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %eax	# t_reload, tmp424
	movslq	%eax, %rdx	# tmp424, tmp423
	movq	%rdx, %rax	# tmp423, tmp425
	addq	%rax, %rax	# tmp425
	addq	%rdx, %rax	# tmp423, tmp425
	salq	$2, %rax	#, tmp425
	addq	%rdx, %rax	# tmp423, tmp425
	salq	$3, %rax	#, tmp426
	addq	$rld+80, %rax	#, tmp427
	movl	4(%rax), %eax	# rld[t_reload_16].secondary_in_icode, D.23517
	cmpl	$1317, %eax	#, D.23517
	je	.L145	#,
.L144:
	.loc 1 444 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L140	#,
	.loc 1 444 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %eax	# t_reload, tmp429
	movslq	%eax, %rdx	# tmp429, tmp428
	movq	%rdx, %rax	# tmp428, tmp430
	addq	%rax, %rax	# tmp430
	addq	%rdx, %rax	# tmp428, tmp430
	salq	$2, %rax	#, tmp430
	addq	%rdx, %rax	# tmp428, tmp430
	salq	$3, %rax	#, tmp431
	addq	$rld+80, %rax	#, tmp432
	movl	8(%rax), %eax	# rld[t_reload_16].secondary_out_icode, D.23517
	cmpl	$1317, %eax	#, D.23517
	jne	.L140	#,
.L145:
	.loc 1 447 0 is_stmt 1
	cmpl	$9, -16(%rbp)	#, secondary_type
	je	.L146	#,
	.loc 1 447 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %eax	# t_reload, tmp434
	movslq	%eax, %rdx	# tmp434, tmp433
	movq	%rdx, %rax	# tmp433, tmp435
	addq	%rax, %rax	# tmp435
	addq	%rdx, %rax	# tmp433, tmp435
	salq	$2, %rax	#, tmp435
	addq	%rdx, %rax	# tmp433, tmp435
	salq	$3, %rax	#, tmp436
	addq	$rld+80, %rax	#, tmp437
	movl	12(%rax), %eax	# rld[t_reload_16].when_needed, D.23518
	cmpl	$9, %eax	#, D.23518
	je	.L146	#,
	movl	-8(%rbp), %eax	# t_reload, tmp439
	movslq	%eax, %rdx	# tmp439, tmp438
	movq	%rdx, %rax	# tmp438, tmp440
	addq	%rax, %rax	# tmp440
	addq	%rdx, %rax	# tmp438, tmp440
	salq	$2, %rax	#, tmp440
	addq	%rdx, %rax	# tmp438, tmp440
	salq	$3, %rax	#, tmp441
	addq	$rld+80, %rax	#, tmp442
	movl	12(%rax), %eax	# rld[t_reload_16].when_needed, D.23518
	cmpl	-16(%rbp), %eax	# secondary_type, D.23518
	jne	.L147	#,
	movl	-8(%rbp), %eax	# t_reload, tmp444
	movslq	%eax, %rdx	# tmp444, tmp443
	movq	%rdx, %rax	# tmp443, tmp445
	addq	%rax, %rax	# tmp445
	addq	%rdx, %rax	# tmp443, tmp445
	salq	$2, %rax	#, tmp445
	addq	%rdx, %rax	# tmp443, tmp445
	salq	$3, %rax	#, tmp446
	addq	$rld+64, %rax	#, tmp447
	movl	8(%rax), %eax	# rld[t_reload_16].opnum, D.23502
	cmpl	-56(%rbp), %eax	# opnum, D.23502
	je	.L146	#,
.L147:
	.loc 1 447 0 discriminator 2
	cmpl	$0, -16(%rbp)	#, secondary_type
	jne	.L148	#,
	.loc 1 447 0 discriminator 1
	movl	-8(%rbp), %eax	# t_reload, tmp449
	movslq	%eax, %rdx	# tmp449, tmp448
	movq	%rdx, %rax	# tmp448, tmp450
	addq	%rax, %rax	# tmp450
	addq	%rdx, %rax	# tmp448, tmp450
	salq	$2, %rax	#, tmp450
	addq	%rdx, %rax	# tmp448, tmp450
	salq	$3, %rax	#, tmp451
	addq	$rld+80, %rax	#, tmp452
	movl	12(%rax), %eax	# rld[t_reload_16].when_needed, D.23518
	testl	%eax, %eax	# D.23518
	je	.L146	#,
.L148:
	.loc 1 447 0 discriminator 2
	cmpl	$7, -16(%rbp)	#, secondary_type
	jne	.L149	#,
	.loc 1 447 0 discriminator 1
	movl	-8(%rbp), %eax	# t_reload, tmp454
	movslq	%eax, %rdx	# tmp454, tmp453
	movq	%rdx, %rax	# tmp453, tmp455
	addq	%rax, %rax	# tmp455
	addq	%rdx, %rax	# tmp453, tmp455
	salq	$2, %rax	#, tmp455
	addq	%rdx, %rax	# tmp453, tmp455
	salq	$3, %rax	#, tmp456
	addq	$rld+80, %rax	#, tmp457
	movl	12(%rax), %eax	# rld[t_reload_16].when_needed, D.23518
	cmpl	$7, %eax	#, D.23518
	je	.L146	#,
.L149:
	.loc 1 447 0 discriminator 2
	cmpl	$10, -16(%rbp)	#, secondary_type
	jne	.L140	#,
	.loc 1 447 0 discriminator 1
	movl	-8(%rbp), %eax	# t_reload, tmp459
	movslq	%eax, %rdx	# tmp459, tmp458
	movq	%rdx, %rax	# tmp458, tmp460
	addq	%rax, %rax	# tmp460
	addq	%rdx, %rax	# tmp458, tmp460
	salq	$2, %rax	#, tmp460
	addq	%rdx, %rax	# tmp458, tmp460
	salq	$3, %rax	#, tmp461
	addq	$rld+80, %rax	#, tmp462
	movl	12(%rax), %eax	# rld[t_reload_16].when_needed, D.23518
	cmpl	$10, %eax	#, D.23518
	jne	.L140	#,
.L146:
	.loc 1 451 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L150	#,
	.loc 1 452 0
	movl	-8(%rbp), %eax	# t_reload, tmp464
	movslq	%eax, %rdx	# tmp464, tmp463
	movq	%rdx, %rax	# tmp463, tmp465
	addq	%rax, %rax	# tmp465
	addq	%rdx, %rax	# tmp463, tmp465
	salq	$2, %rax	#, tmp465
	addq	%rdx, %rax	# tmp463, tmp465
	salq	$3, %rax	#, tmp466
	leaq	rld+16(%rax), %rdx	#, tmp467
	movl	-24(%rbp), %eax	# t_mode, tmp468
	movl	%eax, 4(%rdx)	# tmp468, rld[t_reload_16].inmode
.L150:
	.loc 1 453 0
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L151	#,
	.loc 1 454 0
	movl	-8(%rbp), %eax	# t_reload, tmp470
	movslq	%eax, %rdx	# tmp470, tmp469
	movq	%rdx, %rax	# tmp469, tmp471
	addq	%rax, %rax	# tmp471
	addq	%rdx, %rax	# tmp469, tmp471
	salq	$2, %rax	#, tmp471
	addq	%rdx, %rax	# tmp469, tmp471
	salq	$3, %rax	#, tmp472
	leaq	rld+16(%rax), %rdx	#, tmp473
	movl	-24(%rbp), %eax	# t_mode, tmp474
	movl	%eax, 8(%rdx)	# tmp474, rld[t_reload_16].outmode
.L151:
	.loc 1 456 0
	movl	-8(%rbp), %eax	# t_reload, tmp476
	movslq	%eax, %rdx	# tmp476, tmp475
	movq	%rdx, %rax	# tmp475, tmp477
	addq	%rax, %rax	# tmp477
	addq	%rdx, %rax	# tmp475, tmp477
	salq	$2, %rax	#, tmp477
	addq	%rdx, %rax	# tmp475, tmp477
	salq	$3, %rax	#, tmp478
	addq	$rld+16, %rax	#, tmp479
	movl	(%rax), %edx	# rld[t_reload_16].class, D.23515
	movl	-28(%rbp), %eax	# t_class, tmp480
	movl	%edx, %esi	# D.23515,
	movl	%eax, %edi	# tmp480,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23502
	je	.L152	#,
	.loc 1 457 0
	movl	-8(%rbp), %eax	# t_reload, tmp482
	movslq	%eax, %rdx	# tmp482, tmp481
	movq	%rdx, %rax	# tmp481, tmp483
	addq	%rax, %rax	# tmp483
	addq	%rdx, %rax	# tmp481, tmp483
	salq	$2, %rax	#, tmp483
	addq	%rdx, %rax	# tmp481, tmp483
	salq	$3, %rax	#, tmp484
	leaq	rld+16(%rax), %rdx	#, tmp485
	movl	-28(%rbp), %eax	# t_class, tmp486
	movl	%eax, (%rdx)	# tmp486, rld[t_reload_16].class
.L152:
	.loc 1 459 0
	movl	-8(%rbp), %eax	# t_reload, tmp488
	movslq	%eax, %rdx	# tmp488, tmp487
	movq	%rdx, %rax	# tmp487, tmp489
	addq	%rax, %rax	# tmp489
	addq	%rdx, %rax	# tmp487, tmp489
	salq	$2, %rax	#, tmp489
	addq	%rdx, %rax	# tmp487, tmp489
	salq	$3, %rax	#, tmp490
	addq	$rld+64, %rax	#, tmp491
	movl	8(%rax), %edx	# rld[t_reload_16].opnum, D.23502
	movl	-56(%rbp), %eax	# opnum, tmp492
	cmpl	%eax, %edx	# tmp492, D.23502
	cmovle	%edx, %eax	# D.23502,, D.23502
	movl	%eax, %ecx	# D.23502, D.23502
	movl	-8(%rbp), %eax	# t_reload, tmp494
	movslq	%eax, %rdx	# tmp494, tmp493
	movq	%rdx, %rax	# tmp493, tmp495
	addq	%rax, %rax	# tmp495
	addq	%rdx, %rax	# tmp493, tmp495
	salq	$2, %rax	#, tmp495
	addq	%rdx, %rax	# tmp493, tmp495
	salq	$3, %rax	#, tmp496
	addq	$rld+64, %rax	#, tmp497
	movl	%ecx, 8(%rax)	# D.23502, rld[t_reload_16].opnum
	.loc 1 460 0
	movl	-8(%rbp), %eax	# t_reload, tmp499
	movslq	%eax, %rdx	# tmp499, tmp498
	movq	%rdx, %rax	# tmp498, tmp500
	addq	%rax, %rax	# tmp500
	addq	%rdx, %rax	# tmp498, tmp500
	salq	$2, %rax	#, tmp500
	addq	%rdx, %rax	# tmp498, tmp500
	salq	$3, %rax	#, tmp501
	addq	$rld+96, %rax	#, tmp502
	movzbl	(%rax), %eax	#, tmp505
	andl	$1, %eax	#, D.23514
	movl	%eax, %edx	# D.23514, D.23519
	movl	-68(%rbp), %eax	# optional, tmp506
	andl	%edx, %eax	# D.23519, D.23519
	andl	$1, %eax	#, D.23514
	movl	%eax, %ecx	# D.23514, D.23514
	movl	-8(%rbp), %eax	# t_reload, tmp508
	movslq	%eax, %rdx	# tmp508, tmp507
	movq	%rdx, %rax	# tmp507, tmp509
	addq	%rax, %rax	# tmp509
	addq	%rdx, %rax	# tmp507, tmp509
	salq	$2, %rax	#, tmp509
	addq	%rdx, %rax	# tmp507, tmp509
	salq	$3, %rax	#, tmp510
	addq	$rld+96, %rax	#, tmp511
	andl	$1, %ecx	#, tmp513
	movzbl	(%rax), %edx	# rld[t_reload_16].optional, tmp514
	andl	$-2, %edx	#, tmp515
	orl	%ecx, %edx	# tmp513, tmp516
	movb	%dl, (%rax)	# tmp516, rld[t_reload_16].optional
	.loc 1 461 0
	movl	-8(%rbp), %eax	# t_reload, tmp518
	movslq	%eax, %rdx	# tmp518, tmp517
	movq	%rdx, %rax	# tmp517, tmp519
	addq	%rax, %rax	# tmp519
	addq	%rdx, %rax	# tmp517, tmp519
	salq	$2, %rax	#, tmp519
	addq	%rdx, %rax	# tmp517, tmp519
	salq	$3, %rax	#, tmp520
	addq	$rld+96, %rax	#, tmp521
	movzbl	(%rax), %edx	# rld[t_reload_16].secondary_p, tmp524
	orl	$4, %edx	#, tmp525
	movb	%dl, (%rax)	# tmp525, rld[t_reload_16].secondary_p
	.loc 1 462 0
	movl	-8(%rbp), %eax	# t_reload, tmp527
	movslq	%eax, %rdx	# tmp527, tmp526
	movq	%rdx, %rax	# tmp526, tmp528
	addq	%rax, %rax	# tmp528
	addq	%rdx, %rax	# tmp526, tmp528
	salq	$2, %rax	#, tmp528
	addq	%rdx, %rax	# tmp526, tmp528
	salq	$3, %rax	#, tmp529
	addq	$rld+80, %rax	#, tmp530
	movl	12(%rax), %eax	# rld[t_reload_16].when_needed, D.23518
	cmpl	-16(%rbp), %eax	# secondary_type, D.23518
	jne	.L153	#,
	.loc 1 462 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %eax	# t_reload, tmp532
	movslq	%eax, %rdx	# tmp532, tmp531
	movq	%rdx, %rax	# tmp531, tmp533
	addq	%rax, %rax	# tmp533
	addq	%rdx, %rax	# tmp531, tmp533
	salq	$2, %rax	#, tmp533
	addq	%rdx, %rax	# tmp531, tmp533
	salq	$3, %rax	#, tmp534
	addq	$rld+64, %rax	#, tmp535
	movl	8(%rax), %eax	# rld[t_reload_16].opnum, D.23502
	cmpl	-56(%rbp), %eax	# opnum, D.23502
	je	.L140	#,
	cmpl	$0, -16(%rbp)	#, secondary_type
	je	.L140	#,
	cmpl	$7, -16(%rbp)	#, secondary_type
	je	.L140	#,
	cmpl	$10, -16(%rbp)	#, secondary_type
	je	.L140	#,
.L153:
	.loc 1 464 0 is_stmt 1
	movl	-8(%rbp), %eax	# t_reload, tmp537
	movslq	%eax, %rdx	# tmp537, tmp536
	movq	%rdx, %rax	# tmp536, tmp538
	addq	%rax, %rax	# tmp538
	addq	%rdx, %rax	# tmp536, tmp538
	salq	$2, %rax	#, tmp538
	addq	%rdx, %rax	# tmp536, tmp538
	salq	$3, %rax	#, tmp539
	addq	$rld+80, %rax	#, tmp540
	movl	$9, 12(%rax)	#, rld[t_reload_16].when_needed
.L140:
	.loc 1 436 0
	addl	$1, -8(%rbp)	#, t_reload
.L139:
	.loc 1 436 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.91
	cmpl	%eax, -8(%rbp)	# n_reloads.91, t_reload
	jl	.L154	#,
	.loc 1 467 0 is_stmt 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.92
	cmpl	%eax, -8(%rbp)	# n_reloads.92, t_reload
	jne	.L138	#,
	.loc 1 470 0
	movl	-8(%rbp), %eax	# t_reload, tmp542
	movslq	%eax, %rdx	# tmp542, tmp541
	movq	%rdx, %rax	# tmp541, tmp543
	addq	%rax, %rax	# tmp543
	addq	%rdx, %rax	# tmp541, tmp543
	salq	$2, %rax	#, tmp543
	addq	%rdx, %rax	# tmp541, tmp543
	salq	$3, %rax	#, tmp544
	addq	$rld, %rax	#, tmp545
	movq	$0, 8(%rax)	#, rld[t_reload_16].out
	movl	-8(%rbp), %eax	# t_reload, tmp547
	movslq	%eax, %rdx	# tmp547, tmp546
	movq	%rdx, %rax	# tmp546, tmp548
	addq	%rax, %rax	# tmp548
	addq	%rdx, %rax	# tmp546, tmp548
	salq	$2, %rax	#, tmp548
	addq	%rdx, %rax	# tmp546, tmp548
	salq	$3, %rax	#, tmp549
	addq	$rld, %rax	#, tmp550
	movq	8(%rax), %rcx	# rld[t_reload_16].out, D.23505
	movl	-8(%rbp), %eax	# t_reload, tmp552
	movslq	%eax, %rdx	# tmp552, tmp551
	movq	%rdx, %rax	# tmp551, tmp553
	addq	%rax, %rax	# tmp553
	addq	%rdx, %rax	# tmp551, tmp553
	salq	$2, %rax	#, tmp553
	addq	%rdx, %rax	# tmp551, tmp553
	salq	$3, %rax	#, tmp554
	addq	$rld, %rax	#, tmp555
	movq	%rcx, (%rax)	# D.23505, rld[t_reload_16].in
	.loc 1 471 0
	movl	-8(%rbp), %eax	# t_reload, tmp557
	movslq	%eax, %rdx	# tmp557, tmp556
	movq	%rdx, %rax	# tmp556, tmp558
	addq	%rax, %rax	# tmp558
	addq	%rdx, %rax	# tmp556, tmp558
	salq	$2, %rax	#, tmp558
	addq	%rdx, %rax	# tmp556, tmp558
	salq	$3, %rax	#, tmp559
	leaq	rld+16(%rax), %rdx	#, tmp560
	movl	-28(%rbp), %eax	# t_class, tmp561
	movl	%eax, (%rdx)	# tmp561, rld[t_reload_16].class
	.loc 1 472 0
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L155	#,
	.loc 1 472 0 is_stmt 0 discriminator 1
	movl	-24(%rbp), %ecx	# t_mode, iftmp.93
	jmp	.L156	#
.L155:
	.loc 1 472 0 discriminator 2
	movl	$0, %ecx	#, iftmp.93
.L156:
	.loc 1 472 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp563
	movslq	%eax, %rdx	# tmp563, tmp562
	movq	%rdx, %rax	# tmp562, tmp564
	addq	%rax, %rax	# tmp564
	addq	%rdx, %rax	# tmp562, tmp564
	salq	$2, %rax	#, tmp564
	addq	%rdx, %rax	# tmp562, tmp564
	salq	$3, %rax	#, tmp565
	addq	$rld+16, %rax	#, tmp566
	movl	%ecx, 4(%rax)	# iftmp.93, rld[t_reload_16].inmode
	.loc 1 473 0 is_stmt 1 discriminator 3
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L157	#,
	.loc 1 473 0 is_stmt 0 discriminator 1
	movl	-24(%rbp), %ecx	# t_mode, iftmp.94
	jmp	.L158	#
.L157:
	.loc 1 473 0 discriminator 2
	movl	$0, %ecx	#, iftmp.94
.L158:
	.loc 1 473 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp568
	movslq	%eax, %rdx	# tmp568, tmp567
	movq	%rdx, %rax	# tmp567, tmp569
	addq	%rax, %rax	# tmp569
	addq	%rdx, %rax	# tmp567, tmp569
	salq	$2, %rax	#, tmp569
	addq	%rdx, %rax	# tmp567, tmp569
	salq	$3, %rax	#, tmp570
	addq	$rld+16, %rax	#, tmp571
	movl	%ecx, 8(%rax)	# iftmp.94, rld[t_reload_16].outmode
	.loc 1 474 0 is_stmt 1 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp573
	movslq	%eax, %rdx	# tmp573, tmp572
	movq	%rdx, %rax	# tmp572, tmp574
	addq	%rax, %rax	# tmp574
	addq	%rdx, %rax	# tmp572, tmp574
	salq	$2, %rax	#, tmp574
	addq	%rdx, %rax	# tmp572, tmp574
	salq	$3, %rax	#, tmp575
	addq	$rld+64, %rax	#, tmp576
	movq	$0, (%rax)	#, rld[t_reload_16].reg_rtx
	.loc 1 475 0 discriminator 3
	movl	-68(%rbp), %eax	# optional, tmp577
	andl	$1, %eax	#, D.23514
	movl	%eax, %ecx	# D.23514, D.23514
	movl	-8(%rbp), %eax	# t_reload, tmp579
	movslq	%eax, %rdx	# tmp579, tmp578
	movq	%rdx, %rax	# tmp578, tmp580
	addq	%rax, %rax	# tmp580
	addq	%rdx, %rax	# tmp578, tmp580
	salq	$2, %rax	#, tmp580
	addq	%rdx, %rax	# tmp578, tmp580
	salq	$3, %rax	#, tmp581
	addq	$rld+96, %rax	#, tmp582
	andl	$1, %ecx	#, tmp584
	movzbl	(%rax), %edx	# rld[t_reload_16].optional, tmp585
	andl	$-2, %edx	#, tmp586
	orl	%ecx, %edx	# tmp584, tmp587
	movb	%dl, (%rax)	# tmp587, rld[t_reload_16].optional
	.loc 1 476 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp589
	movslq	%eax, %rdx	# tmp589, tmp588
	movq	%rdx, %rax	# tmp588, tmp590
	addq	%rax, %rax	# tmp590
	addq	%rdx, %rax	# tmp588, tmp590
	salq	$2, %rax	#, tmp590
	addq	%rdx, %rax	# tmp588, tmp590
	salq	$3, %rax	#, tmp591
	addq	$rld+32, %rax	#, tmp592
	movl	$0, 4(%rax)	#, rld[t_reload_16].inc
	.loc 1 478 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp594
	movslq	%eax, %rdx	# tmp594, tmp593
	movq	%rdx, %rax	# tmp593, tmp595
	addq	%rax, %rax	# tmp595
	addq	%rdx, %rax	# tmp593, tmp595
	salq	$2, %rax	#, tmp595
	addq	%rdx, %rax	# tmp593, tmp595
	salq	$3, %rax	#, tmp596
	addq	$rld+96, %rax	#, tmp597
	movzbl	(%rax), %edx	# rld[t_reload_16].nocombine, tmp600
	orl	$2, %edx	#, tmp601
	movb	%dl, (%rax)	# tmp601, rld[t_reload_16].nocombine
	.loc 1 479 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp603
	movslq	%eax, %rdx	# tmp603, tmp602
	movq	%rdx, %rax	# tmp602, tmp604
	addq	%rax, %rax	# tmp604
	addq	%rdx, %rax	# tmp602, tmp604
	salq	$2, %rax	#, tmp604
	addq	%rdx, %rax	# tmp602, tmp604
	salq	$3, %rax	#, tmp605
	addq	$rld+32, %rax	#, tmp606
	movq	$0, 8(%rax)	#, rld[t_reload_16].in_reg
	.loc 1 480 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp608
	movslq	%eax, %rdx	# tmp608, tmp607
	movq	%rdx, %rax	# tmp607, tmp609
	addq	%rax, %rax	# tmp609
	addq	%rdx, %rax	# tmp607, tmp609
	salq	$2, %rax	#, tmp609
	addq	%rdx, %rax	# tmp607, tmp609
	salq	$3, %rax	#, tmp610
	addq	$rld+48, %rax	#, tmp611
	movq	$0, (%rax)	#, rld[t_reload_16].out_reg
	.loc 1 481 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp613
	movslq	%eax, %rdx	# tmp613, tmp612
	movq	%rdx, %rax	# tmp612, tmp614
	addq	%rax, %rax	# tmp614
	addq	%rdx, %rax	# tmp612, tmp614
	salq	$2, %rax	#, tmp614
	addq	%rdx, %rax	# tmp612, tmp614
	salq	$3, %rax	#, tmp615
	leaq	rld+64(%rax), %rdx	#, tmp616
	movl	-56(%rbp), %eax	# opnum, tmp617
	movl	%eax, 8(%rdx)	# tmp617, rld[t_reload_16].opnum
	.loc 1 482 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp619
	movslq	%eax, %rdx	# tmp619, tmp618
	movq	%rdx, %rax	# tmp618, tmp620
	addq	%rax, %rax	# tmp620
	addq	%rdx, %rax	# tmp618, tmp620
	salq	$2, %rax	#, tmp620
	addq	%rdx, %rax	# tmp618, tmp620
	salq	$3, %rax	#, tmp621
	leaq	rld+80(%rax), %rdx	#, tmp622
	movl	-16(%rbp), %eax	# secondary_type, tmp623
	movl	%eax, 12(%rdx)	# tmp623, rld[t_reload_16].when_needed
	.loc 1 483 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp625
	movslq	%eax, %rdx	# tmp625, tmp624
	movq	%rdx, %rax	# tmp624, tmp626
	addq	%rax, %rax	# tmp626
	addq	%rdx, %rax	# tmp624, tmp626
	salq	$2, %rax	#, tmp626
	addq	%rdx, %rax	# tmp624, tmp626
	salq	$3, %rax	#, tmp627
	addq	$rld+64, %rax	#, tmp628
	movl	$-1, 12(%rax)	#, rld[t_reload_16].secondary_in_reload
	.loc 1 484 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp630
	movslq	%eax, %rdx	# tmp630, tmp629
	movq	%rdx, %rax	# tmp629, tmp631
	addq	%rax, %rax	# tmp631
	addq	%rdx, %rax	# tmp629, tmp631
	salq	$2, %rax	#, tmp631
	addq	%rdx, %rax	# tmp629, tmp631
	salq	$3, %rax	#, tmp632
	addq	$rld+80, %rax	#, tmp633
	movl	$-1, (%rax)	#, rld[t_reload_16].secondary_out_reload
	.loc 1 485 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp635
	movslq	%eax, %rdx	# tmp635, tmp634
	movq	%rdx, %rax	# tmp634, tmp636
	addq	%rax, %rax	# tmp636
	addq	%rdx, %rax	# tmp634, tmp636
	salq	$2, %rax	#, tmp636
	addq	%rdx, %rax	# tmp634, tmp636
	salq	$3, %rax	#, tmp637
	addq	$rld+80, %rax	#, tmp638
	movl	$1317, 4(%rax)	#, rld[t_reload_16].secondary_in_icode
	.loc 1 486 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp640
	movslq	%eax, %rdx	# tmp640, tmp639
	movq	%rdx, %rax	# tmp639, tmp641
	addq	%rax, %rax	# tmp641
	addq	%rdx, %rax	# tmp639, tmp641
	salq	$2, %rax	#, tmp641
	addq	%rdx, %rax	# tmp639, tmp641
	salq	$3, %rax	#, tmp642
	addq	$rld+80, %rax	#, tmp643
	movl	$1317, 8(%rax)	#, rld[t_reload_16].secondary_out_icode
	.loc 1 487 0 discriminator 3
	movl	-8(%rbp), %eax	# t_reload, tmp645
	movslq	%eax, %rdx	# tmp645, tmp644
	movq	%rdx, %rax	# tmp644, tmp646
	addq	%rax, %rax	# tmp646
	addq	%rdx, %rax	# tmp644, tmp646
	salq	$2, %rax	#, tmp646
	addq	%rdx, %rax	# tmp644, tmp646
	salq	$3, %rax	#, tmp647
	addq	$rld+96, %rax	#, tmp648
	movzbl	(%rax), %edx	# rld[t_reload_16].secondary_p, tmp651
	orl	$4, %edx	#, tmp652
	movb	%dl, (%rax)	# tmp652, rld[t_reload_16].secondary_p
	.loc 1 489 0 discriminator 3
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.95
	addl	$1, %eax	#, n_reloads.96
	movl	%eax, n_reloads(%rip)	# n_reloads.96, n_reloads
.L138:
	.loc 1 494 0
	movl	$0, -12(%rbp)	#, s_reload
	jmp	.L159	#
.L176:
	.loc 1 495 0
	movl	-12(%rbp), %eax	# s_reload, tmp654
	movslq	%eax, %rdx	# tmp654, tmp653
	movq	%rdx, %rax	# tmp653, tmp655
	addq	%rax, %rax	# tmp655
	addq	%rdx, %rax	# tmp653, tmp655
	salq	$2, %rax	#, tmp655
	addq	%rdx, %rax	# tmp653, tmp655
	salq	$3, %rax	#, tmp656
	addq	$rld+96, %rax	#, tmp657
	movzbl	(%rax), %eax	#, tmp660
	shrb	$2, %al	#, D.23514
	andl	$1, %eax	#, D.23514
	testb	%al, %al	# D.23514
	je	.L160	#,
	.loc 1 496 0
	movl	-12(%rbp), %eax	# s_reload, tmp662
	movslq	%eax, %rdx	# tmp662, tmp661
	movq	%rdx, %rax	# tmp661, tmp663
	addq	%rax, %rax	# tmp663
	addq	%rdx, %rax	# tmp661, tmp663
	salq	$2, %rax	#, tmp663
	addq	%rdx, %rax	# tmp661, tmp663
	salq	$3, %rax	#, tmp664
	addq	$rld+16, %rax	#, tmp665
	movl	(%rax), %edx	# rld[s_reload_13].class, D.23515
	movl	-40(%rbp), %eax	# class, tmp666
	movl	%edx, %esi	# D.23515,
	movl	%eax, %edi	# tmp666,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23502
	jne	.L161	#,
	.loc 1 497 0
	movl	-12(%rbp), %eax	# s_reload, tmp668
	movslq	%eax, %rdx	# tmp668, tmp667
	movq	%rdx, %rax	# tmp667, tmp669
	addq	%rax, %rax	# tmp669
	addq	%rdx, %rax	# tmp667, tmp669
	salq	$2, %rax	#, tmp669
	addq	%rdx, %rax	# tmp667, tmp669
	salq	$3, %rax	#, tmp670
	addq	$rld+16, %rax	#, tmp671
	movl	(%rax), %eax	# rld[s_reload_13].class, D.23515
	movl	-40(%rbp), %edx	# class, tmp672
	movl	%edx, %esi	# tmp672,
	movl	%eax, %edi	# D.23515,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23502
	je	.L160	#,
.L161:
	.loc 1 498 0
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L162	#,
	.loc 1 498 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp674
	movslq	%eax, %rdx	# tmp674, tmp673
	movq	%rdx, %rax	# tmp673, tmp675
	addq	%rax, %rax	# tmp675
	addq	%rdx, %rax	# tmp673, tmp675
	salq	$2, %rax	#, tmp675
	addq	%rdx, %rax	# tmp673, tmp675
	salq	$3, %rax	#, tmp676
	addq	$rld+16, %rax	#, tmp677
	movl	4(%rax), %eax	# rld[s_reload_13].inmode, D.23516
	cmpl	-36(%rbp), %eax	# mode, D.23516
	je	.L163	#,
.L162:
	.loc 1 499 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L160	#,
	.loc 1 499 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp679
	movslq	%eax, %rdx	# tmp679, tmp678
	movq	%rdx, %rax	# tmp678, tmp680
	addq	%rax, %rax	# tmp680
	addq	%rdx, %rax	# tmp678, tmp680
	salq	$2, %rax	#, tmp680
	addq	%rdx, %rax	# tmp678, tmp680
	salq	$3, %rax	#, tmp681
	addq	$rld+16, %rax	#, tmp682
	movl	8(%rax), %eax	# rld[s_reload_13].outmode, D.23516
	cmpl	-36(%rbp), %eax	# mode, D.23516
	jne	.L160	#,
.L163:
	.loc 1 500 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L164	#,
	.loc 1 500 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp684
	movslq	%eax, %rdx	# tmp684, tmp683
	movq	%rdx, %rax	# tmp683, tmp685
	addq	%rax, %rax	# tmp685
	addq	%rdx, %rax	# tmp683, tmp685
	salq	$2, %rax	#, tmp685
	addq	%rdx, %rax	# tmp683, tmp685
	salq	$3, %rax	#, tmp686
	addq	$rld+64, %rax	#, tmp687
	movl	12(%rax), %eax	# rld[s_reload_13].secondary_in_reload, D.23502
	cmpl	-8(%rbp), %eax	# t_reload, D.23502
	je	.L165	#,
.L164:
	.loc 1 501 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L160	#,
	.loc 1 501 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp689
	movslq	%eax, %rdx	# tmp689, tmp688
	movq	%rdx, %rax	# tmp688, tmp690
	addq	%rax, %rax	# tmp690
	addq	%rdx, %rax	# tmp688, tmp690
	salq	$2, %rax	#, tmp690
	addq	%rdx, %rax	# tmp688, tmp690
	salq	$3, %rax	#, tmp691
	addq	$rld+80, %rax	#, tmp692
	movl	(%rax), %eax	# rld[s_reload_13].secondary_out_reload, D.23502
	cmpl	-8(%rbp), %eax	# t_reload, D.23502
	jne	.L160	#,
.L165:
	.loc 1 502 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L166	#,
	.loc 1 502 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp694
	movslq	%eax, %rdx	# tmp694, tmp693
	movq	%rdx, %rax	# tmp693, tmp695
	addq	%rax, %rax	# tmp695
	addq	%rdx, %rax	# tmp693, tmp695
	salq	$2, %rax	#, tmp695
	addq	%rdx, %rax	# tmp693, tmp695
	salq	$3, %rax	#, tmp696
	addq	$rld+80, %rax	#, tmp697
	movl	4(%rax), %eax	# rld[s_reload_13].secondary_in_icode, D.23517
	cmpl	-20(%rbp), %eax	# t_icode, D.23517
	je	.L167	#,
.L166:
	.loc 1 503 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L160	#,
	.loc 1 503 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp699
	movslq	%eax, %rdx	# tmp699, tmp698
	movq	%rdx, %rax	# tmp698, tmp700
	addq	%rax, %rax	# tmp700
	addq	%rdx, %rax	# tmp698, tmp700
	salq	$2, %rax	#, tmp700
	addq	%rdx, %rax	# tmp698, tmp700
	salq	$3, %rax	#, tmp701
	addq	$rld+80, %rax	#, tmp702
	movl	8(%rax), %eax	# rld[s_reload_13].secondary_out_icode, D.23517
	cmpl	-20(%rbp), %eax	# t_icode, D.23517
	jne	.L160	#,
.L167:
	.loc 1 505 0 is_stmt 1
	cmpl	$9, -16(%rbp)	#, secondary_type
	je	.L168	#,
	.loc 1 505 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp704
	movslq	%eax, %rdx	# tmp704, tmp703
	movq	%rdx, %rax	# tmp703, tmp705
	addq	%rax, %rax	# tmp705
	addq	%rdx, %rax	# tmp703, tmp705
	salq	$2, %rax	#, tmp705
	addq	%rdx, %rax	# tmp703, tmp705
	salq	$3, %rax	#, tmp706
	addq	$rld+80, %rax	#, tmp707
	movl	12(%rax), %eax	# rld[s_reload_13].when_needed, D.23518
	cmpl	$9, %eax	#, D.23518
	je	.L168	#,
	movl	-12(%rbp), %eax	# s_reload, tmp709
	movslq	%eax, %rdx	# tmp709, tmp708
	movq	%rdx, %rax	# tmp708, tmp710
	addq	%rax, %rax	# tmp710
	addq	%rdx, %rax	# tmp708, tmp710
	salq	$2, %rax	#, tmp710
	addq	%rdx, %rax	# tmp708, tmp710
	salq	$3, %rax	#, tmp711
	addq	$rld+80, %rax	#, tmp712
	movl	12(%rax), %eax	# rld[s_reload_13].when_needed, D.23518
	cmpl	-16(%rbp), %eax	# secondary_type, D.23518
	jne	.L169	#,
	movl	-12(%rbp), %eax	# s_reload, tmp714
	movslq	%eax, %rdx	# tmp714, tmp713
	movq	%rdx, %rax	# tmp713, tmp715
	addq	%rax, %rax	# tmp715
	addq	%rdx, %rax	# tmp713, tmp715
	salq	$2, %rax	#, tmp715
	addq	%rdx, %rax	# tmp713, tmp715
	salq	$3, %rax	#, tmp716
	addq	$rld+64, %rax	#, tmp717
	movl	8(%rax), %eax	# rld[s_reload_13].opnum, D.23502
	cmpl	-56(%rbp), %eax	# opnum, D.23502
	je	.L168	#,
.L169:
	.loc 1 505 0 discriminator 2
	cmpl	$0, -16(%rbp)	#, secondary_type
	jne	.L170	#,
	.loc 1 505 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp719
	movslq	%eax, %rdx	# tmp719, tmp718
	movq	%rdx, %rax	# tmp718, tmp720
	addq	%rax, %rax	# tmp720
	addq	%rdx, %rax	# tmp718, tmp720
	salq	$2, %rax	#, tmp720
	addq	%rdx, %rax	# tmp718, tmp720
	salq	$3, %rax	#, tmp721
	addq	$rld+80, %rax	#, tmp722
	movl	12(%rax), %eax	# rld[s_reload_13].when_needed, D.23518
	testl	%eax, %eax	# D.23518
	je	.L168	#,
.L170:
	.loc 1 505 0 discriminator 2
	cmpl	$7, -16(%rbp)	#, secondary_type
	jne	.L171	#,
	.loc 1 505 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp724
	movslq	%eax, %rdx	# tmp724, tmp723
	movq	%rdx, %rax	# tmp723, tmp725
	addq	%rax, %rax	# tmp725
	addq	%rdx, %rax	# tmp723, tmp725
	salq	$2, %rax	#, tmp725
	addq	%rdx, %rax	# tmp723, tmp725
	salq	$3, %rax	#, tmp726
	addq	$rld+80, %rax	#, tmp727
	movl	12(%rax), %eax	# rld[s_reload_13].when_needed, D.23518
	cmpl	$7, %eax	#, D.23518
	je	.L168	#,
.L171:
	.loc 1 505 0 discriminator 2
	cmpl	$10, -16(%rbp)	#, secondary_type
	jne	.L160	#,
	.loc 1 505 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp729
	movslq	%eax, %rdx	# tmp729, tmp728
	movq	%rdx, %rax	# tmp728, tmp730
	addq	%rax, %rax	# tmp730
	addq	%rdx, %rax	# tmp728, tmp730
	salq	$2, %rax	#, tmp730
	addq	%rdx, %rax	# tmp728, tmp730
	salq	$3, %rax	#, tmp731
	addq	$rld+80, %rax	#, tmp732
	movl	12(%rax), %eax	# rld[s_reload_13].when_needed, D.23518
	cmpl	$10, %eax	#, D.23518
	jne	.L160	#,
.L168:
	.loc 1 508 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L172	#,
	.loc 1 509 0
	movl	-12(%rbp), %eax	# s_reload, tmp734
	movslq	%eax, %rdx	# tmp734, tmp733
	movq	%rdx, %rax	# tmp733, tmp735
	addq	%rax, %rax	# tmp735
	addq	%rdx, %rax	# tmp733, tmp735
	salq	$2, %rax	#, tmp735
	addq	%rdx, %rax	# tmp733, tmp735
	salq	$3, %rax	#, tmp736
	leaq	rld+16(%rax), %rdx	#, tmp737
	movl	-36(%rbp), %eax	# mode, tmp738
	movl	%eax, 4(%rdx)	# tmp738, rld[s_reload_13].inmode
.L172:
	.loc 1 510 0
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L173	#,
	.loc 1 511 0
	movl	-12(%rbp), %eax	# s_reload, tmp740
	movslq	%eax, %rdx	# tmp740, tmp739
	movq	%rdx, %rax	# tmp739, tmp741
	addq	%rax, %rax	# tmp741
	addq	%rdx, %rax	# tmp739, tmp741
	salq	$2, %rax	#, tmp741
	addq	%rdx, %rax	# tmp739, tmp741
	salq	$3, %rax	#, tmp742
	leaq	rld+16(%rax), %rdx	#, tmp743
	movl	-36(%rbp), %eax	# mode, tmp744
	movl	%eax, 8(%rdx)	# tmp744, rld[s_reload_13].outmode
.L173:
	.loc 1 513 0
	movl	-12(%rbp), %eax	# s_reload, tmp746
	movslq	%eax, %rdx	# tmp746, tmp745
	movq	%rdx, %rax	# tmp745, tmp747
	addq	%rax, %rax	# tmp747
	addq	%rdx, %rax	# tmp745, tmp747
	salq	$2, %rax	#, tmp747
	addq	%rdx, %rax	# tmp745, tmp747
	salq	$3, %rax	#, tmp748
	addq	$rld+16, %rax	#, tmp749
	movl	(%rax), %edx	# rld[s_reload_13].class, D.23515
	movl	-40(%rbp), %eax	# class, tmp750
	movl	%edx, %esi	# D.23515,
	movl	%eax, %edi	# tmp750,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23502
	je	.L174	#,
	.loc 1 514 0
	movl	-12(%rbp), %eax	# s_reload, tmp752
	movslq	%eax, %rdx	# tmp752, tmp751
	movq	%rdx, %rax	# tmp751, tmp753
	addq	%rax, %rax	# tmp753
	addq	%rdx, %rax	# tmp751, tmp753
	salq	$2, %rax	#, tmp753
	addq	%rdx, %rax	# tmp751, tmp753
	salq	$3, %rax	#, tmp754
	leaq	rld+16(%rax), %rdx	#, tmp755
	movl	-40(%rbp), %eax	# class, tmp756
	movl	%eax, (%rdx)	# tmp756, rld[s_reload_13].class
.L174:
	.loc 1 516 0
	movl	-12(%rbp), %eax	# s_reload, tmp758
	movslq	%eax, %rdx	# tmp758, tmp757
	movq	%rdx, %rax	# tmp757, tmp759
	addq	%rax, %rax	# tmp759
	addq	%rdx, %rax	# tmp757, tmp759
	salq	$2, %rax	#, tmp759
	addq	%rdx, %rax	# tmp757, tmp759
	salq	$3, %rax	#, tmp760
	addq	$rld+64, %rax	#, tmp761
	movl	8(%rax), %edx	# rld[s_reload_13].opnum, D.23502
	movl	-56(%rbp), %eax	# opnum, tmp762
	cmpl	%eax, %edx	# tmp762, D.23502
	cmovle	%edx, %eax	# D.23502,, D.23502
	movl	%eax, %ecx	# D.23502, D.23502
	movl	-12(%rbp), %eax	# s_reload, tmp764
	movslq	%eax, %rdx	# tmp764, tmp763
	movq	%rdx, %rax	# tmp763, tmp765
	addq	%rax, %rax	# tmp765
	addq	%rdx, %rax	# tmp763, tmp765
	salq	$2, %rax	#, tmp765
	addq	%rdx, %rax	# tmp763, tmp765
	salq	$3, %rax	#, tmp766
	addq	$rld+64, %rax	#, tmp767
	movl	%ecx, 8(%rax)	# D.23502, rld[s_reload_13].opnum
	.loc 1 517 0
	movl	-12(%rbp), %eax	# s_reload, tmp769
	movslq	%eax, %rdx	# tmp769, tmp768
	movq	%rdx, %rax	# tmp768, tmp770
	addq	%rax, %rax	# tmp770
	addq	%rdx, %rax	# tmp768, tmp770
	salq	$2, %rax	#, tmp770
	addq	%rdx, %rax	# tmp768, tmp770
	salq	$3, %rax	#, tmp771
	addq	$rld+96, %rax	#, tmp772
	movzbl	(%rax), %eax	#, tmp775
	andl	$1, %eax	#, D.23514
	movl	%eax, %edx	# D.23514, D.23519
	movl	-68(%rbp), %eax	# optional, tmp776
	andl	%edx, %eax	# D.23519, D.23519
	andl	$1, %eax	#, D.23514
	movl	%eax, %ecx	# D.23514, D.23514
	movl	-12(%rbp), %eax	# s_reload, tmp778
	movslq	%eax, %rdx	# tmp778, tmp777
	movq	%rdx, %rax	# tmp777, tmp779
	addq	%rax, %rax	# tmp779
	addq	%rdx, %rax	# tmp777, tmp779
	salq	$2, %rax	#, tmp779
	addq	%rdx, %rax	# tmp777, tmp779
	salq	$3, %rax	#, tmp780
	addq	$rld+96, %rax	#, tmp781
	andl	$1, %ecx	#, tmp783
	movzbl	(%rax), %edx	# rld[s_reload_13].optional, tmp784
	andl	$-2, %edx	#, tmp785
	orl	%ecx, %edx	# tmp783, tmp786
	movb	%dl, (%rax)	# tmp786, rld[s_reload_13].optional
	.loc 1 518 0
	movl	-12(%rbp), %eax	# s_reload, tmp788
	movslq	%eax, %rdx	# tmp788, tmp787
	movq	%rdx, %rax	# tmp787, tmp789
	addq	%rax, %rax	# tmp789
	addq	%rdx, %rax	# tmp787, tmp789
	salq	$2, %rax	#, tmp789
	addq	%rdx, %rax	# tmp787, tmp789
	salq	$3, %rax	#, tmp790
	addq	$rld+96, %rax	#, tmp791
	movzbl	(%rax), %edx	# rld[s_reload_13].secondary_p, tmp794
	orl	$4, %edx	#, tmp795
	movb	%dl, (%rax)	# tmp795, rld[s_reload_13].secondary_p
	.loc 1 519 0
	movl	-12(%rbp), %eax	# s_reload, tmp797
	movslq	%eax, %rdx	# tmp797, tmp796
	movq	%rdx, %rax	# tmp796, tmp798
	addq	%rax, %rax	# tmp798
	addq	%rdx, %rax	# tmp796, tmp798
	salq	$2, %rax	#, tmp798
	addq	%rdx, %rax	# tmp796, tmp798
	salq	$3, %rax	#, tmp799
	addq	$rld+80, %rax	#, tmp800
	movl	12(%rax), %eax	# rld[s_reload_13].when_needed, D.23518
	cmpl	-16(%rbp), %eax	# secondary_type, D.23518
	jne	.L175	#,
	.loc 1 519 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# s_reload, tmp802
	movslq	%eax, %rdx	# tmp802, tmp801
	movq	%rdx, %rax	# tmp801, tmp803
	addq	%rax, %rax	# tmp803
	addq	%rdx, %rax	# tmp801, tmp803
	salq	$2, %rax	#, tmp803
	addq	%rdx, %rax	# tmp801, tmp803
	salq	$3, %rax	#, tmp804
	addq	$rld+64, %rax	#, tmp805
	movl	8(%rax), %eax	# rld[s_reload_13].opnum, D.23502
	cmpl	-56(%rbp), %eax	# opnum, D.23502
	je	.L160	#,
	cmpl	$0, -16(%rbp)	#, secondary_type
	je	.L160	#,
	cmpl	$7, -16(%rbp)	#, secondary_type
	je	.L160	#,
	cmpl	$10, -16(%rbp)	#, secondary_type
	je	.L160	#,
.L175:
	.loc 1 521 0 is_stmt 1
	movl	-12(%rbp), %eax	# s_reload, tmp807
	movslq	%eax, %rdx	# tmp807, tmp806
	movq	%rdx, %rax	# tmp806, tmp808
	addq	%rax, %rax	# tmp808
	addq	%rdx, %rax	# tmp806, tmp808
	salq	$2, %rax	#, tmp808
	addq	%rdx, %rax	# tmp806, tmp808
	salq	$3, %rax	#, tmp809
	addq	$rld+80, %rax	#, tmp810
	movl	$9, 12(%rax)	#, rld[s_reload_13].when_needed
.L160:
	.loc 1 494 0
	addl	$1, -12(%rbp)	#, s_reload
.L159:
	.loc 1 494 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.97
	cmpl	%eax, -12(%rbp)	# n_reloads.97, s_reload
	jl	.L176	#,
	.loc 1 524 0 is_stmt 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.98
	cmpl	%eax, -12(%rbp)	# n_reloads.98, s_reload
	jne	.L177	#,
	.loc 1 532 0
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L178	#,
	.loc 1 532 0 is_stmt 0 discriminator 1
	cmpl	$1317, -32(%rbp)	#, icode
	jne	.L178	#,
	.loc 1 533 0 is_stmt 1
	movl	-36(%rbp), %edx	# mode, tmp811
	movl	-72(%rbp), %esi	# reload_class, tmp812
	movl	-40(%rbp), %eax	# class, tmp813
	movl	$1, %ecx	#,
	movl	%eax, %edi	# tmp813,
	call	ix86_secondary_memory_needed	#
	testl	%eax, %eax	# D.23502
	je	.L178	#,
	.loc 1 535 0
	movl	-56(%rbp), %edx	# opnum, tmp814
	movl	-76(%rbp), %esi	# reload_mode, tmp815
	movq	-64(%rbp), %rax	# x, tmp816
	movl	16(%rbp), %ecx	# type,
	movq	%rax, %rdi	# tmp816,
	call	get_secondary_mem	#
	.loc 1 539 0
	movl	n_reloads(%rip), %eax	# n_reloads, tmp817
	movl	%eax, -12(%rbp)	# tmp817, s_reload
.L178:
	.loc 1 544 0
	movl	-12(%rbp), %eax	# s_reload, tmp819
	movslq	%eax, %rdx	# tmp819, tmp818
	movq	%rdx, %rax	# tmp818, tmp820
	addq	%rax, %rax	# tmp820
	addq	%rdx, %rax	# tmp818, tmp820
	salq	$2, %rax	#, tmp820
	addq	%rdx, %rax	# tmp818, tmp820
	salq	$3, %rax	#, tmp821
	addq	$rld, %rax	#, tmp822
	movq	$0, 8(%rax)	#, rld[s_reload_14].out
	movl	-12(%rbp), %eax	# s_reload, tmp824
	movslq	%eax, %rdx	# tmp824, tmp823
	movq	%rdx, %rax	# tmp823, tmp825
	addq	%rax, %rax	# tmp825
	addq	%rdx, %rax	# tmp823, tmp825
	salq	$2, %rax	#, tmp825
	addq	%rdx, %rax	# tmp823, tmp825
	salq	$3, %rax	#, tmp826
	addq	$rld, %rax	#, tmp827
	movq	8(%rax), %rcx	# rld[s_reload_14].out, D.23505
	movl	-12(%rbp), %eax	# s_reload, tmp829
	movslq	%eax, %rdx	# tmp829, tmp828
	movq	%rdx, %rax	# tmp828, tmp830
	addq	%rax, %rax	# tmp830
	addq	%rdx, %rax	# tmp828, tmp830
	salq	$2, %rax	#, tmp830
	addq	%rdx, %rax	# tmp828, tmp830
	salq	$3, %rax	#, tmp831
	addq	$rld, %rax	#, tmp832
	movq	%rcx, (%rax)	# D.23505, rld[s_reload_14].in
	.loc 1 545 0
	movl	-12(%rbp), %eax	# s_reload, tmp834
	movslq	%eax, %rdx	# tmp834, tmp833
	movq	%rdx, %rax	# tmp833, tmp835
	addq	%rax, %rax	# tmp835
	addq	%rdx, %rax	# tmp833, tmp835
	salq	$2, %rax	#, tmp835
	addq	%rdx, %rax	# tmp833, tmp835
	salq	$3, %rax	#, tmp836
	leaq	rld+16(%rax), %rdx	#, tmp837
	movl	-40(%rbp), %eax	# class, tmp838
	movl	%eax, (%rdx)	# tmp838, rld[s_reload_14].class
	.loc 1 547 0
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L179	#,
	.loc 1 547 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %ecx	# mode, iftmp.99
	jmp	.L180	#
.L179:
	.loc 1 547 0 discriminator 2
	movl	$0, %ecx	#, iftmp.99
.L180:
	.loc 1 547 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp840
	movslq	%eax, %rdx	# tmp840, tmp839
	movq	%rdx, %rax	# tmp839, tmp841
	addq	%rax, %rax	# tmp841
	addq	%rdx, %rax	# tmp839, tmp841
	salq	$2, %rax	#, tmp841
	addq	%rdx, %rax	# tmp839, tmp841
	salq	$3, %rax	#, tmp842
	addq	$rld+16, %rax	#, tmp843
	movl	%ecx, 4(%rax)	# iftmp.99, rld[s_reload_14].inmode
	.loc 1 548 0 is_stmt 1 discriminator 3
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L181	#,
	.loc 1 548 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %ecx	# mode, iftmp.100
	jmp	.L182	#
.L181:
	.loc 1 548 0 discriminator 2
	movl	$0, %ecx	#, iftmp.100
.L182:
	.loc 1 548 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp845
	movslq	%eax, %rdx	# tmp845, tmp844
	movq	%rdx, %rax	# tmp844, tmp846
	addq	%rax, %rax	# tmp846
	addq	%rdx, %rax	# tmp844, tmp846
	salq	$2, %rax	#, tmp846
	addq	%rdx, %rax	# tmp844, tmp846
	salq	$3, %rax	#, tmp847
	addq	$rld+16, %rax	#, tmp848
	movl	%ecx, 8(%rax)	# iftmp.100, rld[s_reload_14].outmode
	.loc 1 549 0 is_stmt 1 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp850
	movslq	%eax, %rdx	# tmp850, tmp849
	movq	%rdx, %rax	# tmp849, tmp851
	addq	%rax, %rax	# tmp851
	addq	%rdx, %rax	# tmp849, tmp851
	salq	$2, %rax	#, tmp851
	addq	%rdx, %rax	# tmp849, tmp851
	salq	$3, %rax	#, tmp852
	addq	$rld+64, %rax	#, tmp853
	movq	$0, (%rax)	#, rld[s_reload_14].reg_rtx
	.loc 1 550 0 discriminator 3
	movl	-68(%rbp), %eax	# optional, tmp854
	andl	$1, %eax	#, D.23514
	movl	%eax, %ecx	# D.23514, D.23514
	movl	-12(%rbp), %eax	# s_reload, tmp856
	movslq	%eax, %rdx	# tmp856, tmp855
	movq	%rdx, %rax	# tmp855, tmp857
	addq	%rax, %rax	# tmp857
	addq	%rdx, %rax	# tmp855, tmp857
	salq	$2, %rax	#, tmp857
	addq	%rdx, %rax	# tmp855, tmp857
	salq	$3, %rax	#, tmp858
	addq	$rld+96, %rax	#, tmp859
	andl	$1, %ecx	#, tmp861
	movzbl	(%rax), %edx	# rld[s_reload_14].optional, tmp862
	andl	$-2, %edx	#, tmp863
	orl	%ecx, %edx	# tmp861, tmp864
	movb	%dl, (%rax)	# tmp864, rld[s_reload_14].optional
	.loc 1 551 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp866
	movslq	%eax, %rdx	# tmp866, tmp865
	movq	%rdx, %rax	# tmp865, tmp867
	addq	%rax, %rax	# tmp867
	addq	%rdx, %rax	# tmp865, tmp867
	salq	$2, %rax	#, tmp867
	addq	%rdx, %rax	# tmp865, tmp867
	salq	$3, %rax	#, tmp868
	addq	$rld+32, %rax	#, tmp869
	movl	$0, 4(%rax)	#, rld[s_reload_14].inc
	.loc 1 553 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp871
	movslq	%eax, %rdx	# tmp871, tmp870
	movq	%rdx, %rax	# tmp870, tmp872
	addq	%rax, %rax	# tmp872
	addq	%rdx, %rax	# tmp870, tmp872
	salq	$2, %rax	#, tmp872
	addq	%rdx, %rax	# tmp870, tmp872
	salq	$3, %rax	#, tmp873
	addq	$rld+96, %rax	#, tmp874
	movzbl	(%rax), %edx	# rld[s_reload_14].nocombine, tmp877
	orl	$2, %edx	#, tmp878
	movb	%dl, (%rax)	# tmp878, rld[s_reload_14].nocombine
	.loc 1 554 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp880
	movslq	%eax, %rdx	# tmp880, tmp879
	movq	%rdx, %rax	# tmp879, tmp881
	addq	%rax, %rax	# tmp881
	addq	%rdx, %rax	# tmp879, tmp881
	salq	$2, %rax	#, tmp881
	addq	%rdx, %rax	# tmp879, tmp881
	salq	$3, %rax	#, tmp882
	addq	$rld+32, %rax	#, tmp883
	movq	$0, 8(%rax)	#, rld[s_reload_14].in_reg
	.loc 1 555 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp885
	movslq	%eax, %rdx	# tmp885, tmp884
	movq	%rdx, %rax	# tmp884, tmp886
	addq	%rax, %rax	# tmp886
	addq	%rdx, %rax	# tmp884, tmp886
	salq	$2, %rax	#, tmp886
	addq	%rdx, %rax	# tmp884, tmp886
	salq	$3, %rax	#, tmp887
	addq	$rld+48, %rax	#, tmp888
	movq	$0, (%rax)	#, rld[s_reload_14].out_reg
	.loc 1 556 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp890
	movslq	%eax, %rdx	# tmp890, tmp889
	movq	%rdx, %rax	# tmp889, tmp891
	addq	%rax, %rax	# tmp891
	addq	%rdx, %rax	# tmp889, tmp891
	salq	$2, %rax	#, tmp891
	addq	%rdx, %rax	# tmp889, tmp891
	salq	$3, %rax	#, tmp892
	leaq	rld+64(%rax), %rdx	#, tmp893
	movl	-56(%rbp), %eax	# opnum, tmp894
	movl	%eax, 8(%rdx)	# tmp894, rld[s_reload_14].opnum
	.loc 1 557 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp896
	movslq	%eax, %rdx	# tmp896, tmp895
	movq	%rdx, %rax	# tmp895, tmp897
	addq	%rax, %rax	# tmp897
	addq	%rdx, %rax	# tmp895, tmp897
	salq	$2, %rax	#, tmp897
	addq	%rdx, %rax	# tmp895, tmp897
	salq	$3, %rax	#, tmp898
	leaq	rld+80(%rax), %rdx	#, tmp899
	movl	-16(%rbp), %eax	# secondary_type, tmp900
	movl	%eax, 12(%rdx)	# tmp900, rld[s_reload_14].when_needed
	.loc 1 558 0 discriminator 3
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L183	#,
	.loc 1 558 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %ecx	# t_reload, iftmp.101
	jmp	.L184	#
.L183:
	.loc 1 558 0 discriminator 2
	movl	$-1, %ecx	#, iftmp.101
.L184:
	.loc 1 558 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp902
	movslq	%eax, %rdx	# tmp902, tmp901
	movq	%rdx, %rax	# tmp901, tmp903
	addq	%rax, %rax	# tmp903
	addq	%rdx, %rax	# tmp901, tmp903
	salq	$2, %rax	#, tmp903
	addq	%rdx, %rax	# tmp901, tmp903
	salq	$3, %rax	#, tmp904
	addq	$rld+64, %rax	#, tmp905
	movl	%ecx, 12(%rax)	# iftmp.101, rld[s_reload_14].secondary_in_reload
	.loc 1 559 0 is_stmt 1 discriminator 3
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L185	#,
	.loc 1 559 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %ecx	# t_reload, iftmp.102
	jmp	.L186	#
.L185:
	.loc 1 559 0 discriminator 2
	movl	$-1, %ecx	#, iftmp.102
.L186:
	.loc 1 559 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp907
	movslq	%eax, %rdx	# tmp907, tmp906
	movq	%rdx, %rax	# tmp906, tmp908
	addq	%rax, %rax	# tmp908
	addq	%rdx, %rax	# tmp906, tmp908
	salq	$2, %rax	#, tmp908
	addq	%rdx, %rax	# tmp906, tmp908
	salq	$3, %rax	#, tmp909
	addq	$rld+80, %rax	#, tmp910
	movl	%ecx, (%rax)	# iftmp.102, rld[s_reload_14].secondary_out_reload
	.loc 1 560 0 is_stmt 1 discriminator 3
	cmpl	$0, -52(%rbp)	#, in_p
	je	.L187	#,
	.loc 1 560 0 is_stmt 0 discriminator 1
	movl	-20(%rbp), %ecx	# t_icode, iftmp.103
	jmp	.L188	#
.L187:
	.loc 1 560 0 discriminator 2
	movl	$1317, %ecx	#, iftmp.103
.L188:
	.loc 1 560 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp912
	movslq	%eax, %rdx	# tmp912, tmp911
	movq	%rdx, %rax	# tmp911, tmp913
	addq	%rax, %rax	# tmp913
	addq	%rdx, %rax	# tmp911, tmp913
	salq	$2, %rax	#, tmp913
	addq	%rdx, %rax	# tmp911, tmp913
	salq	$3, %rax	#, tmp914
	addq	$rld+80, %rax	#, tmp915
	movl	%ecx, 4(%rax)	# iftmp.103, rld[s_reload_14].secondary_in_icode
	.loc 1 562 0 is_stmt 1 discriminator 3
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L189	#,
	.loc 1 562 0 is_stmt 0 discriminator 1
	movl	-20(%rbp), %ecx	# t_icode, iftmp.104
	jmp	.L190	#
.L189:
	.loc 1 562 0 discriminator 2
	movl	$1317, %ecx	#, iftmp.104
.L190:
	.loc 1 562 0 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp917
	movslq	%eax, %rdx	# tmp917, tmp916
	movq	%rdx, %rax	# tmp916, tmp918
	addq	%rax, %rax	# tmp918
	addq	%rdx, %rax	# tmp916, tmp918
	salq	$2, %rax	#, tmp918
	addq	%rdx, %rax	# tmp916, tmp918
	salq	$3, %rax	#, tmp919
	addq	$rld+80, %rax	#, tmp920
	movl	%ecx, 8(%rax)	# iftmp.104, rld[s_reload_14].secondary_out_icode
	.loc 1 563 0 is_stmt 1 discriminator 3
	movl	-12(%rbp), %eax	# s_reload, tmp922
	movslq	%eax, %rdx	# tmp922, tmp921
	movq	%rdx, %rax	# tmp921, tmp923
	addq	%rax, %rax	# tmp923
	addq	%rdx, %rax	# tmp921, tmp923
	salq	$2, %rax	#, tmp923
	addq	%rdx, %rax	# tmp921, tmp923
	salq	$3, %rax	#, tmp924
	addq	$rld+96, %rax	#, tmp925
	movzbl	(%rax), %edx	# rld[s_reload_14].secondary_p, tmp928
	orl	$4, %edx	#, tmp929
	movb	%dl, (%rax)	# tmp929, rld[s_reload_14].secondary_p
	.loc 1 565 0 discriminator 3
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.105
	addl	$1, %eax	#, n_reloads.106
	movl	%eax, n_reloads(%rip)	# n_reloads.106, n_reloads
	.loc 1 568 0 discriminator 3
	cmpl	$0, -52(%rbp)	#, in_p
	jne	.L177	#,
	.loc 1 568 0 is_stmt 0 discriminator 1
	cmpl	$1317, -32(%rbp)	#, icode
	jne	.L177	#,
	.loc 1 569 0 is_stmt 1
	movl	-36(%rbp), %edx	# mode, tmp930
	movl	-40(%rbp), %esi	# class, tmp931
	movl	-72(%rbp), %eax	# reload_class, tmp932
	movl	$1, %ecx	#,
	movl	%eax, %edi	# tmp932,
	call	ix86_secondary_memory_needed	#
	testl	%eax, %eax	# D.23502
	je	.L177	#,
	.loc 1 570 0
	movl	-56(%rbp), %edx	# opnum, tmp933
	movl	-36(%rbp), %esi	# mode, tmp934
	movq	-64(%rbp), %rax	# x, tmp935
	movl	16(%rbp), %ecx	# type,
	movq	%rax, %rdi	# tmp935,
	call	get_secondary_mem	#
.L177:
	.loc 1 574 0
	movq	24(%rbp), %rax	# picode, tmp936
	movl	-32(%rbp), %edx	# icode, tmp937
	movl	%edx, (%rax)	# tmp937, *picode_98(D)
	.loc 1 575 0
	movl	-12(%rbp), %eax	# s_reload, D.23502
.L14:
	.loc 1 576 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	push_secondary_reload, .-push_secondary_reload
	.globl	get_secondary_mem
	.type	get_secondary_mem, @function
get_secondary_mem:
.LFB3:
	.loc 1 591 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# x, x
	movl	%esi, -44(%rbp)	# mode, mode
	movl	%edx, -48(%rbp)	# opnum, opnum
	movl	%ecx, -52(%rbp)	# type, type
	.loc 1 603 0
	movl	-44(%rbp), %eax	# mode, mode.107
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.23522
	movzwl	%ax, %edx	# D.23522, D.23523
	movl	target_flags(%rip), %eax	# target_flags, target_flags.109
	andl	$33554432, %eax	#, D.23523
	testl	%eax, %eax	# D.23523
	je	.L192	#,
	.loc 1 603 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.108
	jmp	.L193	#
.L192:
	.loc 1 603 0 discriminator 2
	movl	$32, %eax	#, iftmp.108
.L193:
	.loc 1 603 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.108, D.23523
	jge	.L194	#,
	.loc 1 603 0 discriminator 1
	movl	-44(%rbp), %eax	# mode, mode.110
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23524
	cmpl	$1, %eax	#, D.23524
	je	.L195	#,
	movl	-44(%rbp), %eax	# mode, mode.111
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23524
	cmpl	$3, %eax	#, D.23524
	je	.L195	#,
	movl	-44(%rbp), %eax	# mode, mode.112
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23524
	cmpl	$5, %eax	#, D.23524
	je	.L195	#,
	movl	-44(%rbp), %eax	# mode, mode.113
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23524
	cmpl	$7, %eax	#, D.23524
	jne	.L194	#,
.L195:
	.loc 1 604 0 is_stmt 1
	movl	-44(%rbp), %eax	# mode, mode.114
	cltq
	movl	mode_class(,%rax,4), %ecx	# mode_class, D.23524
	movl	target_flags(%rip), %eax	# target_flags, target_flags.116
	andl	$33554432, %eax	#, D.23523
	testl	%eax, %eax	# D.23523
	je	.L196	#,
	.loc 1 604 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.115
	jmp	.L197	#
.L196:
	.loc 1 604 0 discriminator 2
	movl	$32, %eax	#, iftmp.115
.L197:
	.loc 1 604 0 discriminator 3
	movl	$0, %edx	#,
	movl	%ecx, %esi	# D.23524,
	movl	%eax, %edi	# iftmp.115,
	call	mode_for_size	#
	movl	%eax, -44(%rbp)	# tmp106, mode
.L194:
	.loc 1 608 0 is_stmt 1
	movl	-44(%rbp), %eax	# mode, mode.117
	movl	-48(%rbp), %edx	# opnum, tmp108
	movslq	%edx, %rcx	# tmp108, tmp107
	cltq
	addq	%rax, %rax	# tmp111
	movq	%rax, %rdx	# tmp110, tmp112
	salq	$4, %rdx	#, tmp112
	subq	%rax, %rdx	# tmp110, tmp112
	leaq	(%rdx,%rcx), %rax	#, tmp113
	movq	secondary_memlocs_elim(,%rax,8), %rax	# secondary_memlocs_elim, D.23525
	testq	%rax, %rax	# D.23525
	je	.L198	#,
	.loc 1 609 0
	movl	-44(%rbp), %eax	# mode, mode.118
	movl	-48(%rbp), %edx	# opnum, tmp115
	movslq	%edx, %rcx	# tmp115, tmp114
	cltq
	addq	%rax, %rax	# tmp118
	movq	%rax, %rdx	# tmp117, tmp119
	salq	$4, %rdx	#, tmp119
	subq	%rax, %rdx	# tmp117, tmp119
	leaq	(%rdx,%rcx), %rax	#, tmp120
	movq	secondary_memlocs_elim(,%rax,8), %rax	# secondary_memlocs_elim, D.23521
	jmp	.L199	#
.L198:
	.loc 1 615 0
	movl	-44(%rbp), %eax	# mode, mode.119
	cltq
	movq	secondary_memlocs(,%rax,8), %rax	# secondary_memlocs, D.23525
	testq	%rax, %rax	# D.23525
	jne	.L200	#,
	.loc 1 620 0
	movl	-44(%rbp), %ebx	# mode, mode.120
	.loc 1 621 0
	movl	-44(%rbp), %eax	# mode, mode.121
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23526
	movzbl	%al, %ecx	# D.23526, D.23527
	movl	-44(%rbp), %eax	# mode, tmp123
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.23527,
	movl	%eax, %edi	# tmp123,
	call	assign_stack_local	#
	movslq	%ebx, %rdx	# mode.120, tmp124
	movq	%rax, secondary_memlocs(,%rdx,8)	# D.23525, secondary_memlocs
.L200:
	.loc 1 628 0
	movl	-44(%rbp), %eax	# mode, mode.122
	cltq
	movq	secondary_memlocs(,%rax,8), %rax	# secondary_memlocs, D.23525
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23525,
	call	eliminate_regs	#
	movq	%rax, -24(%rbp)	# tmp126, loc
	.loc 1 629 0
	movq	-24(%rbp), %rax	# loc, tmp127
	movq	8(%rax), %rdx	# loc_45->fld[0].rtx, D.23525
	movl	-44(%rbp), %eax	# mode, tmp128
	movq	%rdx, %rsi	# D.23525,
	movl	%eax, %edi	# tmp128,
	call	strict_memory_address_p	#
	movl	%eax, -28(%rbp)	# tmp129, mem_valid
	.loc 1 631 0
	cmpl	$0, -28(%rbp)	#, mem_valid
	jne	.L201	#,
	.loc 1 631 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# mode, mode.123
	cltq
	movq	secondary_memlocs(,%rax,8), %rax	# secondary_memlocs, D.23525
	cmpq	-24(%rbp), %rax	# loc, D.23525
	jne	.L201	#,
	.loc 1 632 0 is_stmt 1
	movq	-24(%rbp), %rax	# loc, tmp131
	movq	%rax, %rdi	# tmp131,
	call	copy_rtx	#
	movq	%rax, -24(%rbp)	# tmp132, loc
.L201:
	.loc 1 641 0
	cmpl	$0, -28(%rbp)	#, mem_valid
	jne	.L202	#,
	.loc 1 643 0
	cmpl	$0, -52(%rbp)	#, type
	je	.L203	#,
	.loc 1 643 0 is_stmt 0 discriminator 1
	cmpl	$1, -52(%rbp)	#, type
	jne	.L204	#,
	.loc 1 643 0 discriminator 3
	movl	$5, %eax	#, iftmp.125
	jmp	.L206	#
.L204:
	.loc 1 643 0 discriminator 4
	movl	$9, %eax	#, iftmp.125
	jmp	.L206	#
.L203:
	.loc 1 643 0 discriminator 2
	movl	$3, %eax	#, iftmp.124
.L206:
	.loc 1 643 0 discriminator 5
	movl	%eax, -52(%rbp)	# iftmp.124, type
	.loc 1 647 0 is_stmt 1 discriminator 5
	movq	-24(%rbp), %rax	# loc, tmp133
	leaq	8(%rax), %rcx	#, D.23528
	movq	-24(%rbp), %rax	# loc, tmp134
	movq	8(%rax), %rdx	# loc_2->fld[0].rtx, D.23525
	movl	-52(%rbp), %edi	# type, tmp135
	movl	-48(%rbp), %esi	# opnum, tmp136
	movl	-44(%rbp), %eax	# mode, tmp137
	movq	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%edi, %r9d	# tmp135,
	movl	%esi, %r8d	# tmp136,
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp137,
	call	find_reloads_address	#
.L202:
	.loc 1 651 0
	movl	-44(%rbp), %eax	# mode, mode.126
	movl	-48(%rbp), %edx	# opnum, tmp139
	movslq	%edx, %rcx	# tmp139, tmp138
	cltq
	addq	%rax, %rax	# tmp142
	movq	%rax, %rdx	# tmp141, tmp143
	salq	$4, %rdx	#, tmp143
	subq	%rax, %rdx	# tmp141, tmp143
	addq	%rcx, %rdx	# tmp138, tmp144
	movq	-24(%rbp), %rax	# loc, tmp145
	movq	%rax, secondary_memlocs_elim(,%rdx,8)	# tmp145, secondary_memlocs_elim
	.loc 1 652 0
	movq	-24(%rbp), %rax	# loc, D.23521
.L199:
	.loc 1 653 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	get_secondary_mem, .-get_secondary_mem
	.globl	clear_secondary_mem
	.type	clear_secondary_mem, @function
clear_secondary_mem:
.LFB4:
	.loc 1 659 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 660 0
	movl	$472, %edx	#,
	movl	$0, %esi	#,
	movl	$secondary_memlocs, %edi	#,
	call	memset	#
	.loc 1 661 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	clear_secondary_mem, .-clear_secondary_mem
	.type	find_valid_class, @function
find_valid_class:
.LFB5:
	.loc 1 673 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movl	%edi, -36(%rbp)	# m1, m1
	movl	%esi, -40(%rbp)	# n, n
	movl	%edx, -44(%rbp)	# dest_regno, dest_regno
	.loc 1 674 0
	movl	$-1, -32(%rbp)	#, best_cost
	.loc 1 677 0
	movl	$0, -20(%rbp)	#, best_class
	.loc 1 678 0
	movl	-44(%rbp), %eax	# dest_regno, tmp73
	movl	regclass_map(,%rax,4), %eax	# regclass_map, tmp74
	movl	%eax, -8(%rbp)	# tmp74, dest_class
	.loc 1 679 0
	movl	$0, -16(%rbp)	#, best_size
	.loc 1 682 0
	movl	$1, -28(%rbp)	#, class
	jmp	.L209	#
.L218:
.LBB5:
	.loc 1 684 0
	movl	$0, -12(%rbp)	#, bad
	.loc 1 685 0
	movl	$0, -24(%rbp)	#, regno
	jmp	.L210	#
.L213:
	.loc 1 686 0
	movl	-28(%rbp), %eax	# class, tmp76
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23529
	movl	-24(%rbp), %eax	# regno, tmp77
	movl	%eax, %ecx	# tmp77, tmp101
	shrq	%cl, %rdx	# tmp101, D.23529
	movq	%rdx, %rax	# D.23529, D.23529
	andl	$1, %eax	#, D.23529
	testq	%rax, %rax	# D.23529
	je	.L211	#,
	.loc 1 687 0
	movl	-28(%rbp), %eax	# class, tmp79
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23529
	movl	-40(%rbp), %eax	# n, tmp80
	movl	-24(%rbp), %ecx	# regno, tmp81
	addl	%ecx, %eax	# tmp81, D.23530
	movl	%eax, %ecx	# D.23530, tmp103
	shrq	%cl, %rdx	# tmp103, D.23529
	movq	%rdx, %rax	# D.23529, D.23529
	andl	$1, %eax	#, D.23529
	testq	%rax, %rax	# D.23529
	je	.L211	#,
	.loc 1 688 0
	movl	-40(%rbp), %eax	# n, tmp82
	movl	-24(%rbp), %edx	# regno, tmp83
	addl	%eax, %edx	# tmp82, D.23530
	movl	-36(%rbp), %eax	# m1, tmp84
	movl	%eax, %esi	# tmp84,
	movl	%edx, %edi	# D.23530,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23530
	jne	.L211	#,
	.loc 1 689 0
	movl	$1, -12(%rbp)	#, bad
.L211:
	.loc 1 685 0
	addl	$1, -24(%rbp)	#, regno
.L210:
	.loc 1 685 0 is_stmt 0 discriminator 1
	cmpl	$52, -24(%rbp)	#, regno
	jg	.L212	#,
	.loc 1 685 0 discriminator 2
	cmpl	$0, -12(%rbp)	#, bad
	je	.L213	#,
.L212:
	.loc 1 691 0 is_stmt 1
	cmpl	$0, -12(%rbp)	#, bad
	je	.L214	#,
	.loc 1 692 0
	jmp	.L215	#
.L214:
	.loc 1 693 0
	movl	-28(%rbp), %ecx	# class, class.127
	movl	-8(%rbp), %edx	# dest_class, tmp85
	movl	-36(%rbp), %eax	# m1, tmp86
	movl	%ecx, %esi	# class.127,
	movl	%eax, %edi	# tmp86,
	call	ix86_register_move_cost	#
	movl	%eax, -4(%rbp)	# tmp87, cost
	.loc 1 695 0
	movl	-28(%rbp), %eax	# class, tmp89
	cltq
	movl	reg_class_size(,%rax,4), %eax	# reg_class_size, D.23531
	cmpl	-16(%rbp), %eax	# best_size, D.23531
	jbe	.L216	#,
	.loc 1 696 0
	cmpl	$0, -32(%rbp)	#, best_cost
	js	.L217	#,
	.loc 1 696 0 is_stmt 0 discriminator 1
	movl	-32(%rbp), %eax	# best_cost, tmp90
	cmpl	-4(%rbp), %eax	# cost, tmp90
	jge	.L217	#,
.L216:
	.loc 1 697 0 is_stmt 1
	movl	-32(%rbp), %eax	# best_cost, tmp91
	cmpl	-4(%rbp), %eax	# cost, tmp91
	jle	.L215	#,
.L217:
	.loc 1 699 0
	movl	-28(%rbp), %eax	# class, tmp92
	movl	%eax, -20(%rbp)	# tmp92, best_class
	.loc 1 700 0
	movl	-28(%rbp), %eax	# class, tmp94
	cltq
	movl	reg_class_size(,%rax,4), %eax	# reg_class_size, tmp95
	movl	%eax, -16(%rbp)	# tmp95, best_size
	.loc 1 701 0
	movl	-28(%rbp), %ecx	# class, class.128
	movl	-8(%rbp), %edx	# dest_class, tmp96
	movl	-36(%rbp), %eax	# m1, tmp97
	movl	%ecx, %esi	# class.128,
	movl	%eax, %edi	# tmp97,
	call	ix86_register_move_cost	#
	movl	%eax, -32(%rbp)	# tmp98, best_cost
.L215:
.LBE5:
	.loc 1 682 0
	addl	$1, -28(%rbp)	#, class
.L209:
	.loc 1 682 0 is_stmt 0 discriminator 1
	cmpl	$24, -28(%rbp)	#, class
	jle	.L218	#,
	.loc 1 705 0 is_stmt 1
	cmpl	$0, -16(%rbp)	#, best_size
	jne	.L219	#,
	.loc 1 706 0
	movl	$__FUNCTION__.11614, %edx	#,
	movl	$706, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L219:
	.loc 1 708 0
	movl	-20(%rbp), %eax	# best_class, D.23532
	.loc 1 709 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	find_valid_class, .-find_valid_class
	.type	find_reusable_reload, @function
find_reusable_reload:
.LFB6:
	.loc 1 725 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# p_in, p_in
	movq	%rsi, -48(%rbp)	# out, out
	movl	%edx, -52(%rbp)	# class, class
	movl	%ecx, -56(%rbp)	# type, type
	movl	%r8d, -60(%rbp)	# opnum, opnum
	movl	%r9d, -64(%rbp)	# dont_share, dont_share
	.loc 1 726 0
	movq	-40(%rbp), %rax	# p_in, tmp226
	movq	(%rax), %rax	# *p_in_16(D), tmp227
	movq	%rax, -24(%rbp)	# tmp227, in
	.loc 1 731 0
	movq	-48(%rbp), %rax	# out, tmp228
	movq	%rax, %rdi	# tmp228,
	call	earlyclobber_operand_p	#
	testl	%eax, %eax	# D.23533
	je	.L222	#,
	.loc 1 732 0
	movl	n_reloads(%rip), %eax	# n_reloads, D.23533
	jmp	.L223	#
.L222:
	.loc 1 743 0
	movl	$0, -28(%rbp)	#, i
	jmp	.L224	#
.L257:
	.loc 1 744 0
	movl	-28(%rbp), %eax	# i, tmp230
	movslq	%eax, %rdx	# tmp230, tmp229
	movq	%rdx, %rax	# tmp229, tmp231
	addq	%rax, %rax	# tmp231
	addq	%rdx, %rax	# tmp229, tmp231
	salq	$2, %rax	#, tmp231
	addq	%rdx, %rax	# tmp229, tmp231
	salq	$3, %rax	#, tmp232
	addq	$rld+16, %rax	#, tmp233
	movl	(%rax), %edx	# rld[i_1].class, D.23534
	movl	-52(%rbp), %eax	# class, tmp234
	movl	%edx, %esi	# D.23534,
	movl	%eax, %edi	# tmp234,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23533
	jne	.L225	#,
	.loc 1 745 0
	movl	-28(%rbp), %eax	# i, tmp236
	movslq	%eax, %rdx	# tmp236, tmp235
	movq	%rdx, %rax	# tmp235, tmp237
	addq	%rax, %rax	# tmp237
	addq	%rdx, %rax	# tmp235, tmp237
	salq	$2, %rax	#, tmp237
	addq	%rdx, %rax	# tmp235, tmp237
	salq	$3, %rax	#, tmp238
	addq	$rld+16, %rax	#, tmp239
	movl	(%rax), %eax	# rld[i_1].class, D.23534
	movl	-52(%rbp), %edx	# class, tmp240
	movl	%edx, %esi	# tmp240,
	movl	%eax, %edi	# D.23534,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23533
	je	.L226	#,
.L225:
	.loc 1 747 0
	movl	-28(%rbp), %eax	# i, tmp242
	movslq	%eax, %rdx	# tmp242, tmp241
	movq	%rdx, %rax	# tmp241, tmp243
	addq	%rax, %rax	# tmp243
	addq	%rdx, %rax	# tmp241, tmp243
	salq	$2, %rax	#, tmp243
	addq	%rdx, %rax	# tmp241, tmp243
	salq	$3, %rax	#, tmp244
	addq	$rld+64, %rax	#, tmp245
	movq	(%rax), %rax	# rld[i_1].reg_rtx, D.23535
	testq	%rax, %rax	# D.23535
	je	.L227	#,
	.loc 1 748 0
	movl	-52(%rbp), %eax	# class, class.129
	cltq
	movq	reg_class_contents(,%rax,8), %rbx	# reg_class_contents, D.23536
	movl	-28(%rbp), %eax	# i, tmp248
	movslq	%eax, %rdx	# tmp248, tmp247
	movq	%rdx, %rax	# tmp247, tmp249
	addq	%rax, %rax	# tmp249
	addq	%rdx, %rax	# tmp247, tmp249
	salq	$2, %rax	#, tmp249
	addq	%rdx, %rax	# tmp247, tmp249
	salq	$3, %rax	#, tmp250
	addq	$rld+64, %rax	#, tmp251
	movq	(%rax), %rax	# rld[i_1].reg_rtx, D.23535
	movq	%rax, %rdi	# D.23535,
	call	true_regnum	#
	movl	%eax, %ecx	# D.23533, tmp589
	shrq	%cl, %rbx	# tmp589, D.23536
	movq	%rbx, %rax	# D.23536, D.23536
	andl	$1, %eax	#, D.23536
	testq	%rax, %rax	# D.23536
	je	.L226	#,
.L227:
	.loc 1 750 0
	cmpq	$0, -24(%rbp)	#, in
	je	.L228	#,
	.loc 1 750 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp253
	movslq	%eax, %rdx	# tmp253, tmp252
	movq	%rdx, %rax	# tmp252, tmp254
	addq	%rax, %rax	# tmp254
	addq	%rdx, %rax	# tmp252, tmp254
	salq	$2, %rax	#, tmp254
	addq	%rdx, %rax	# tmp252, tmp254
	salq	$3, %rax	#, tmp255
	addq	$rld, %rax	#, tmp256
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	cmpq	-24(%rbp), %rax	# in, D.23535
	je	.L229	#,
	.loc 1 750 0 discriminator 2
	movl	-28(%rbp), %eax	# i, tmp258
	movslq	%eax, %rdx	# tmp258, tmp257
	movq	%rdx, %rax	# tmp257, tmp259
	addq	%rax, %rax	# tmp259
	addq	%rdx, %rax	# tmp257, tmp259
	salq	$2, %rax	#, tmp259
	addq	%rdx, %rax	# tmp257, tmp259
	salq	$3, %rax	#, tmp260
	addq	$rld, %rax	#, tmp261
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	testq	%rax, %rax	# D.23535
	je	.L228	#,
	.loc 1 750 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp263
	movslq	%eax, %rdx	# tmp263, tmp262
	movq	%rdx, %rax	# tmp262, tmp264
	addq	%rax, %rax	# tmp264
	addq	%rdx, %rax	# tmp262, tmp264
	salq	$2, %rax	#, tmp264
	addq	%rdx, %rax	# tmp262, tmp264
	salq	$3, %rax	#, tmp265
	addq	$rld, %rax	#, tmp266
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	movzwl	(%rax), %eax	# _37->code, D.23537
	.loc 1 744 0 is_stmt 1 discriminator 1
	cmpw	$61, %ax	#, D.23537
	jne	.L230	#,
	.loc 1 750 0
	movq	-24(%rbp), %rax	# in, tmp267
	movzwl	(%rax), %eax	# in_17->code, D.23537
	cmpw	$61, %ax	#, D.23537
	jne	.L231	#,
	.loc 1 750 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp269
	movslq	%eax, %rdx	# tmp269, tmp268
	movq	%rdx, %rax	# tmp268, tmp270
	addq	%rax, %rax	# tmp270
	addq	%rdx, %rax	# tmp268, tmp270
	salq	$2, %rax	#, tmp270
	addq	%rdx, %rax	# tmp268, tmp270
	salq	$3, %rax	#, tmp271
	addq	$rld, %rax	#, tmp272
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	movl	8(%rax), %edx	# _40->fld[0].rtuint, D.23538
	movq	-24(%rbp), %rax	# in, tmp273
	movl	8(%rax), %eax	# in_17->fld[0].rtuint, D.23538
	cmpl	%eax, %edx	# D.23538, D.23538
	jne	.L231	#,
	.loc 1 750 0 discriminator 3
	movl	$1, %eax	#, iftmp.130
	jmp	.L232	#
.L231:
	.loc 1 750 0 discriminator 2
	movl	$0, %eax	#, iftmp.130
.L232:
	.loc 1 750 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	jne	.L229	#,
	jmp	.L228	#
.L230:
	.loc 1 750 0
	movl	-28(%rbp), %eax	# i, tmp275
	movslq	%eax, %rdx	# tmp275, tmp274
	movq	%rdx, %rax	# tmp274, tmp276
	addq	%rax, %rax	# tmp276
	addq	%rdx, %rax	# tmp274, tmp276
	salq	$2, %rax	#, tmp276
	addq	%rdx, %rax	# tmp274, tmp276
	salq	$3, %rax	#, tmp277
	addq	$rld, %rax	#, tmp278
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	movq	-24(%rbp), %rdx	# in, tmp279
	movq	%rdx, %rsi	# tmp279,
	movq	%rax, %rdi	# D.23535,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23533
	je	.L233	#,
	.loc 1 750 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp281
	movslq	%eax, %rdx	# tmp281, tmp280
	movq	%rdx, %rax	# tmp280, tmp282
	addq	%rax, %rax	# tmp282
	addq	%rdx, %rax	# tmp280, tmp282
	salq	$2, %rax	#, tmp282
	addq	%rdx, %rax	# tmp280, tmp282
	salq	$3, %rax	#, tmp283
	addq	$rld, %rax	#, tmp284
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	movq	%rax, %rdi	# D.23535,
	call	side_effects_p	#
	testl	%eax, %eax	# D.23533
	jne	.L233	#,
	.loc 1 750 0 discriminator 3
	movl	$1, %eax	#, iftmp.131
	jmp	.L234	#
.L233:
	.loc 1 750 0 discriminator 2
	movl	$0, %eax	#, iftmp.131
.L234:
	.loc 1 750 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	je	.L228	#,
.L229:
	.loc 1 750 0 discriminator 1
	cmpl	$0, -64(%rbp)	#, dont_share
	jne	.L228	#,
	.loc 1 751 0 is_stmt 1
	cmpq	$0, -48(%rbp)	#, out
	je	.L235	#,
	.loc 1 751 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp286
	movslq	%eax, %rdx	# tmp286, tmp285
	movq	%rdx, %rax	# tmp285, tmp287
	addq	%rax, %rax	# tmp287
	addq	%rdx, %rax	# tmp285, tmp287
	salq	$2, %rax	#, tmp287
	addq	%rdx, %rax	# tmp285, tmp287
	salq	$3, %rax	#, tmp288
	addq	$rld, %rax	#, tmp289
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	testq	%rax, %rax	# D.23535
	je	.L235	#,
	movl	-28(%rbp), %eax	# i, tmp291
	movslq	%eax, %rdx	# tmp291, tmp290
	movq	%rdx, %rax	# tmp290, tmp292
	addq	%rax, %rax	# tmp292
	addq	%rdx, %rax	# tmp290, tmp292
	salq	$2, %rax	#, tmp292
	addq	%rdx, %rax	# tmp290, tmp292
	salq	$3, %rax	#, tmp293
	addq	$rld, %rax	#, tmp294
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	cmpq	-48(%rbp), %rax	# out, D.23535
	je	.L235	#,
	movl	-28(%rbp), %eax	# i, tmp296
	movslq	%eax, %rdx	# tmp296, tmp295
	movq	%rdx, %rax	# tmp295, tmp297
	addq	%rax, %rax	# tmp297
	addq	%rdx, %rax	# tmp295, tmp297
	salq	$2, %rax	#, tmp297
	addq	%rdx, %rax	# tmp295, tmp297
	salq	$3, %rax	#, tmp298
	addq	$rld, %rax	#, tmp299
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	testq	%rax, %rax	# D.23535
	je	.L228	#,
	movl	-28(%rbp), %eax	# i, tmp301
	movslq	%eax, %rdx	# tmp301, tmp300
	movq	%rdx, %rax	# tmp300, tmp302
	addq	%rax, %rax	# tmp302
	addq	%rdx, %rax	# tmp300, tmp302
	salq	$2, %rax	#, tmp302
	addq	%rdx, %rax	# tmp300, tmp302
	salq	$3, %rax	#, tmp303
	addq	$rld, %rax	#, tmp304
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	movzwl	(%rax), %eax	# _57->code, D.23537
	.loc 1 744 0 is_stmt 1 discriminator 1
	cmpw	$61, %ax	#, D.23537
	jne	.L236	#,
	.loc 1 751 0
	movq	-48(%rbp), %rax	# out, tmp305
	movzwl	(%rax), %eax	# out_18(D)->code, D.23537
	cmpw	$61, %ax	#, D.23537
	jne	.L237	#,
	.loc 1 751 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp307
	movslq	%eax, %rdx	# tmp307, tmp306
	movq	%rdx, %rax	# tmp306, tmp308
	addq	%rax, %rax	# tmp308
	addq	%rdx, %rax	# tmp306, tmp308
	salq	$2, %rax	#, tmp308
	addq	%rdx, %rax	# tmp306, tmp308
	salq	$3, %rax	#, tmp309
	addq	$rld, %rax	#, tmp310
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	movl	8(%rax), %edx	# _60->fld[0].rtuint, D.23538
	movq	-48(%rbp), %rax	# out, tmp311
	movl	8(%rax), %eax	# out_18(D)->fld[0].rtuint, D.23538
	cmpl	%eax, %edx	# D.23538, D.23538
	jne	.L237	#,
	.loc 1 751 0 discriminator 3
	movl	$1, %eax	#, iftmp.132
	jmp	.L238	#
.L237:
	.loc 1 751 0 discriminator 2
	movl	$0, %eax	#, iftmp.132
.L238:
	.loc 1 751 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	jne	.L235	#,
	jmp	.L228	#
.L236:
	.loc 1 751 0
	movl	-28(%rbp), %eax	# i, tmp313
	movslq	%eax, %rdx	# tmp313, tmp312
	movq	%rdx, %rax	# tmp312, tmp314
	addq	%rax, %rax	# tmp314
	addq	%rdx, %rax	# tmp312, tmp314
	salq	$2, %rax	#, tmp314
	addq	%rdx, %rax	# tmp312, tmp314
	salq	$3, %rax	#, tmp315
	addq	$rld, %rax	#, tmp316
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	movq	-48(%rbp), %rdx	# out, tmp317
	movq	%rdx, %rsi	# tmp317,
	movq	%rax, %rdi	# D.23535,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23533
	je	.L239	#,
	.loc 1 751 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp319
	movslq	%eax, %rdx	# tmp319, tmp318
	movq	%rdx, %rax	# tmp318, tmp320
	addq	%rax, %rax	# tmp320
	addq	%rdx, %rax	# tmp318, tmp320
	salq	$2, %rax	#, tmp320
	addq	%rdx, %rax	# tmp318, tmp320
	salq	$3, %rax	#, tmp321
	addq	$rld, %rax	#, tmp322
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	movq	%rax, %rdi	# D.23535,
	call	side_effects_p	#
	testl	%eax, %eax	# D.23533
	jne	.L239	#,
	.loc 1 751 0 discriminator 3
	movl	$1, %eax	#, iftmp.133
	jmp	.L240	#
.L239:
	.loc 1 751 0 discriminator 2
	movl	$0, %eax	#, iftmp.133
.L240:
	.loc 1 751 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	jne	.L235	#,
.L228:
	.loc 1 752 0 is_stmt 1
	cmpq	$0, -48(%rbp)	#, out
	je	.L226	#,
	.loc 1 752 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp324
	movslq	%eax, %rdx	# tmp324, tmp323
	movq	%rdx, %rax	# tmp323, tmp325
	addq	%rax, %rax	# tmp325
	addq	%rdx, %rax	# tmp323, tmp325
	salq	$2, %rax	#, tmp325
	addq	%rdx, %rax	# tmp323, tmp325
	salq	$3, %rax	#, tmp326
	addq	$rld, %rax	#, tmp327
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	cmpq	-48(%rbp), %rax	# out, D.23535
	je	.L241	#,
	movl	-28(%rbp), %eax	# i, tmp329
	movslq	%eax, %rdx	# tmp329, tmp328
	movq	%rdx, %rax	# tmp328, tmp330
	addq	%rax, %rax	# tmp330
	addq	%rdx, %rax	# tmp328, tmp330
	salq	$2, %rax	#, tmp330
	addq	%rdx, %rax	# tmp328, tmp330
	salq	$3, %rax	#, tmp331
	addq	$rld, %rax	#, tmp332
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	testq	%rax, %rax	# D.23535
	je	.L226	#,
	movl	-28(%rbp), %eax	# i, tmp334
	movslq	%eax, %rdx	# tmp334, tmp333
	movq	%rdx, %rax	# tmp333, tmp335
	addq	%rax, %rax	# tmp335
	addq	%rdx, %rax	# tmp333, tmp335
	salq	$2, %rax	#, tmp335
	addq	%rdx, %rax	# tmp333, tmp335
	salq	$3, %rax	#, tmp336
	addq	$rld, %rax	#, tmp337
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	movzwl	(%rax), %eax	# _75->code, D.23537
	.loc 1 744 0 is_stmt 1 discriminator 1
	cmpw	$61, %ax	#, D.23537
	jne	.L242	#,
	.loc 1 752 0
	movq	-48(%rbp), %rax	# out, tmp338
	movzwl	(%rax), %eax	# out_18(D)->code, D.23537
	cmpw	$61, %ax	#, D.23537
	jne	.L243	#,
	.loc 1 752 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp340
	movslq	%eax, %rdx	# tmp340, tmp339
	movq	%rdx, %rax	# tmp339, tmp341
	addq	%rax, %rax	# tmp341
	addq	%rdx, %rax	# tmp339, tmp341
	salq	$2, %rax	#, tmp341
	addq	%rdx, %rax	# tmp339, tmp341
	salq	$3, %rax	#, tmp342
	addq	$rld, %rax	#, tmp343
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	movl	8(%rax), %edx	# _78->fld[0].rtuint, D.23538
	movq	-48(%rbp), %rax	# out, tmp344
	movl	8(%rax), %eax	# out_18(D)->fld[0].rtuint, D.23538
	cmpl	%eax, %edx	# D.23538, D.23538
	jne	.L243	#,
	.loc 1 752 0 discriminator 3
	movl	$1, %eax	#, iftmp.134
	jmp	.L244	#
.L243:
	.loc 1 752 0 discriminator 2
	movl	$0, %eax	#, iftmp.134
.L244:
	.loc 1 752 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	jne	.L241	#,
	jmp	.L226	#
.L242:
	.loc 1 752 0
	movl	-28(%rbp), %eax	# i, tmp346
	movslq	%eax, %rdx	# tmp346, tmp345
	movq	%rdx, %rax	# tmp345, tmp347
	addq	%rax, %rax	# tmp347
	addq	%rdx, %rax	# tmp345, tmp347
	salq	$2, %rax	#, tmp347
	addq	%rdx, %rax	# tmp345, tmp347
	salq	$3, %rax	#, tmp348
	addq	$rld, %rax	#, tmp349
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	movq	-48(%rbp), %rdx	# out, tmp350
	movq	%rdx, %rsi	# tmp350,
	movq	%rax, %rdi	# D.23535,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23533
	je	.L245	#,
	.loc 1 752 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp352
	movslq	%eax, %rdx	# tmp352, tmp351
	movq	%rdx, %rax	# tmp351, tmp353
	addq	%rax, %rax	# tmp353
	addq	%rdx, %rax	# tmp351, tmp353
	salq	$2, %rax	#, tmp353
	addq	%rdx, %rax	# tmp351, tmp353
	salq	$3, %rax	#, tmp354
	addq	$rld, %rax	#, tmp355
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	movq	%rax, %rdi	# D.23535,
	call	side_effects_p	#
	testl	%eax, %eax	# D.23533
	jne	.L245	#,
	.loc 1 752 0 discriminator 3
	movl	$1, %eax	#, iftmp.135
	jmp	.L246	#
.L245:
	.loc 1 752 0 discriminator 2
	movl	$0, %eax	#, iftmp.135
.L246:
	.loc 1 752 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	je	.L226	#,
.L241:
	.loc 1 753 0 is_stmt 1
	cmpq	$0, -24(%rbp)	#, in
	je	.L235	#,
	.loc 1 753 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp357
	movslq	%eax, %rdx	# tmp357, tmp356
	movq	%rdx, %rax	# tmp356, tmp358
	addq	%rax, %rax	# tmp358
	addq	%rdx, %rax	# tmp356, tmp358
	salq	$2, %rax	#, tmp358
	addq	%rdx, %rax	# tmp356, tmp358
	salq	$3, %rax	#, tmp359
	addq	$rld, %rax	#, tmp360
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	testq	%rax, %rax	# D.23535
	je	.L235	#,
	movl	-28(%rbp), %eax	# i, tmp362
	movslq	%eax, %rdx	# tmp362, tmp361
	movq	%rdx, %rax	# tmp361, tmp363
	addq	%rax, %rax	# tmp363
	addq	%rdx, %rax	# tmp361, tmp363
	salq	$2, %rax	#, tmp363
	addq	%rdx, %rax	# tmp361, tmp363
	salq	$3, %rax	#, tmp364
	addq	$rld, %rax	#, tmp365
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	cmpq	-24(%rbp), %rax	# in, D.23535
	je	.L235	#,
	movl	-28(%rbp), %eax	# i, tmp367
	movslq	%eax, %rdx	# tmp367, tmp366
	movq	%rdx, %rax	# tmp366, tmp368
	addq	%rax, %rax	# tmp368
	addq	%rdx, %rax	# tmp366, tmp368
	salq	$2, %rax	#, tmp368
	addq	%rdx, %rax	# tmp366, tmp368
	salq	$3, %rax	#, tmp369
	addq	$rld, %rax	#, tmp370
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	testq	%rax, %rax	# D.23535
	je	.L226	#,
	movl	-28(%rbp), %eax	# i, tmp372
	movslq	%eax, %rdx	# tmp372, tmp371
	movq	%rdx, %rax	# tmp371, tmp373
	addq	%rax, %rax	# tmp373
	addq	%rdx, %rax	# tmp371, tmp373
	salq	$2, %rax	#, tmp373
	addq	%rdx, %rax	# tmp371, tmp373
	salq	$3, %rax	#, tmp374
	addq	$rld, %rax	#, tmp375
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	movzwl	(%rax), %eax	# _94->code, D.23537
	.loc 1 744 0 is_stmt 1 discriminator 1
	cmpw	$61, %ax	#, D.23537
	jne	.L247	#,
	.loc 1 753 0
	movq	-24(%rbp), %rax	# in, tmp376
	movzwl	(%rax), %eax	# in_17->code, D.23537
	cmpw	$61, %ax	#, D.23537
	jne	.L248	#,
	.loc 1 753 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp378
	movslq	%eax, %rdx	# tmp378, tmp377
	movq	%rdx, %rax	# tmp377, tmp379
	addq	%rax, %rax	# tmp379
	addq	%rdx, %rax	# tmp377, tmp379
	salq	$2, %rax	#, tmp379
	addq	%rdx, %rax	# tmp377, tmp379
	salq	$3, %rax	#, tmp380
	addq	$rld, %rax	#, tmp381
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	movl	8(%rax), %edx	# _97->fld[0].rtuint, D.23538
	movq	-24(%rbp), %rax	# in, tmp382
	movl	8(%rax), %eax	# in_17->fld[0].rtuint, D.23538
	cmpl	%eax, %edx	# D.23538, D.23538
	jne	.L248	#,
	.loc 1 753 0 discriminator 3
	movl	$1, %eax	#, iftmp.136
	jmp	.L249	#
.L248:
	.loc 1 753 0 discriminator 2
	movl	$0, %eax	#, iftmp.136
.L249:
	.loc 1 753 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	jne	.L235	#,
	jmp	.L226	#
.L247:
	.loc 1 753 0
	movl	-28(%rbp), %eax	# i, tmp384
	movslq	%eax, %rdx	# tmp384, tmp383
	movq	%rdx, %rax	# tmp383, tmp385
	addq	%rax, %rax	# tmp385
	addq	%rdx, %rax	# tmp383, tmp385
	salq	$2, %rax	#, tmp385
	addq	%rdx, %rax	# tmp383, tmp385
	salq	$3, %rax	#, tmp386
	addq	$rld, %rax	#, tmp387
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	movq	-24(%rbp), %rdx	# in, tmp388
	movq	%rdx, %rsi	# tmp388,
	movq	%rax, %rdi	# D.23535,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23533
	je	.L250	#,
	.loc 1 753 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp390
	movslq	%eax, %rdx	# tmp390, tmp389
	movq	%rdx, %rax	# tmp389, tmp391
	addq	%rax, %rax	# tmp391
	addq	%rdx, %rax	# tmp389, tmp391
	salq	$2, %rax	#, tmp391
	addq	%rdx, %rax	# tmp389, tmp391
	salq	$3, %rax	#, tmp392
	addq	$rld, %rax	#, tmp393
	movq	(%rax), %rax	# rld[i_1].in, D.23535
	movq	%rax, %rdi	# D.23535,
	call	side_effects_p	#
	testl	%eax, %eax	# D.23533
	jne	.L250	#,
	.loc 1 753 0 discriminator 3
	movl	$1, %eax	#, iftmp.137
	jmp	.L251	#
.L250:
	.loc 1 753 0 discriminator 2
	movl	$0, %eax	#, iftmp.137
.L251:
	.loc 1 753 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	je	.L226	#,
.L235:
	.loc 1 754 0 is_stmt 1
	movl	-28(%rbp), %eax	# i, tmp395
	movslq	%eax, %rdx	# tmp395, tmp394
	movq	%rdx, %rax	# tmp394, tmp396
	addq	%rax, %rax	# tmp396
	addq	%rdx, %rax	# tmp394, tmp396
	salq	$2, %rax	#, tmp396
	addq	%rdx, %rax	# tmp394, tmp396
	salq	$3, %rax	#, tmp397
	addq	$rld, %rax	#, tmp398
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	testq	%rax, %rax	# D.23535
	je	.L252	#,
	.loc 1 754 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp400
	movslq	%eax, %rdx	# tmp400, tmp399
	movq	%rdx, %rax	# tmp399, tmp401
	addq	%rax, %rax	# tmp401
	addq	%rdx, %rax	# tmp399, tmp401
	salq	$2, %rax	#, tmp401
	addq	%rdx, %rax	# tmp399, tmp401
	salq	$3, %rax	#, tmp402
	addq	$rld, %rax	#, tmp403
	movq	8(%rax), %rax	# rld[i_1].out, D.23535
	movq	%rax, %rdi	# D.23535,
	call	earlyclobber_operand_p	#
	testl	%eax, %eax	# D.23533
	jne	.L226	#,
.L252:
	.loc 1 756 0 is_stmt 1
	cmpl	$9, -56(%rbp)	#, type
	je	.L253	#,
	.loc 1 756 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp405
	movslq	%eax, %rdx	# tmp405, tmp404
	movq	%rdx, %rax	# tmp404, tmp406
	addq	%rax, %rax	# tmp406
	addq	%rdx, %rax	# tmp404, tmp406
	salq	$2, %rax	#, tmp406
	addq	%rdx, %rax	# tmp404, tmp406
	salq	$3, %rax	#, tmp407
	addq	$rld+80, %rax	#, tmp408
	movl	12(%rax), %eax	# rld[i_1].when_needed, D.23540
	cmpl	$9, %eax	#, D.23540
	je	.L253	#,
	movl	-28(%rbp), %eax	# i, tmp410
	movslq	%eax, %rdx	# tmp410, tmp409
	movq	%rdx, %rax	# tmp409, tmp411
	addq	%rax, %rax	# tmp411
	addq	%rdx, %rax	# tmp409, tmp411
	salq	$2, %rax	#, tmp411
	addq	%rdx, %rax	# tmp409, tmp411
	salq	$3, %rax	#, tmp412
	addq	$rld+80, %rax	#, tmp413
	movl	12(%rax), %eax	# rld[i_1].when_needed, D.23540
	cmpl	-56(%rbp), %eax	# type, D.23540
	jne	.L254	#,
	movl	-28(%rbp), %eax	# i, tmp415
	movslq	%eax, %rdx	# tmp415, tmp414
	movq	%rdx, %rax	# tmp414, tmp416
	addq	%rax, %rax	# tmp416
	addq	%rdx, %rax	# tmp414, tmp416
	salq	$2, %rax	#, tmp416
	addq	%rdx, %rax	# tmp414, tmp416
	salq	$3, %rax	#, tmp417
	addq	$rld+64, %rax	#, tmp418
	movl	8(%rax), %eax	# rld[i_1].opnum, D.23533
	cmpl	-60(%rbp), %eax	# opnum, D.23533
	je	.L253	#,
.L254:
	.loc 1 756 0 discriminator 2
	cmpl	$0, -56(%rbp)	#, type
	jne	.L255	#,
	.loc 1 756 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp420
	movslq	%eax, %rdx	# tmp420, tmp419
	movq	%rdx, %rax	# tmp419, tmp421
	addq	%rax, %rax	# tmp421
	addq	%rdx, %rax	# tmp419, tmp421
	salq	$2, %rax	#, tmp421
	addq	%rdx, %rax	# tmp419, tmp421
	salq	$3, %rax	#, tmp422
	addq	$rld+80, %rax	#, tmp423
	movl	12(%rax), %eax	# rld[i_1].when_needed, D.23540
	testl	%eax, %eax	# D.23540
	je	.L253	#,
.L255:
	.loc 1 756 0 discriminator 2
	cmpl	$7, -56(%rbp)	#, type
	jne	.L256	#,
	.loc 1 756 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp425
	movslq	%eax, %rdx	# tmp425, tmp424
	movq	%rdx, %rax	# tmp424, tmp426
	addq	%rax, %rax	# tmp426
	addq	%rdx, %rax	# tmp424, tmp426
	salq	$2, %rax	#, tmp426
	addq	%rdx, %rax	# tmp424, tmp426
	salq	$3, %rax	#, tmp427
	addq	$rld+80, %rax	#, tmp428
	movl	12(%rax), %eax	# rld[i_1].when_needed, D.23540
	cmpl	$7, %eax	#, D.23540
	je	.L253	#,
.L256:
	.loc 1 756 0 discriminator 2
	cmpl	$10, -56(%rbp)	#, type
	jne	.L226	#,
	.loc 1 756 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp430
	movslq	%eax, %rdx	# tmp430, tmp429
	movq	%rdx, %rax	# tmp429, tmp431
	addq	%rax, %rax	# tmp431
	addq	%rdx, %rax	# tmp429, tmp431
	salq	$2, %rax	#, tmp431
	addq	%rdx, %rax	# tmp429, tmp431
	salq	$3, %rax	#, tmp432
	addq	$rld+80, %rax	#, tmp433
	movl	12(%rax), %eax	# rld[i_1].when_needed, D.23540
	cmpl	$10, %eax	#, D.23540
	jne	.L226	#,
.L253:
	.loc 1 757 0 is_stmt 1
	movl	-28(%rbp), %eax	# i, D.23533
	jmp	.L223	#
.L226:
	.loc 1 743 0
	addl	$1, -28(%rbp)	#, i
.L224:
	.loc 1 743 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.138
	cmpl	%eax, -28(%rbp)	# n_reloads.138, i
	jl	.L257	#,
	.loc 1 764 0 is_stmt 1
	movl	$0, -28(%rbp)	#, i
	jmp	.L258	#
.L280:
	.loc 1 765 0
	movl	-28(%rbp), %eax	# i, tmp435
	movslq	%eax, %rdx	# tmp435, tmp434
	movq	%rdx, %rax	# tmp434, tmp436
	addq	%rax, %rax	# tmp436
	addq	%rdx, %rax	# tmp434, tmp436
	salq	$2, %rax	#, tmp436
	addq	%rdx, %rax	# tmp434, tmp436
	salq	$3, %rax	#, tmp437
	addq	$rld+16, %rax	#, tmp438
	movl	(%rax), %edx	# rld[i_2].class, D.23534
	movl	-52(%rbp), %eax	# class, tmp439
	movl	%edx, %esi	# D.23534,
	movl	%eax, %edi	# tmp439,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23533
	jne	.L259	#,
	.loc 1 766 0
	movl	-28(%rbp), %eax	# i, tmp441
	movslq	%eax, %rdx	# tmp441, tmp440
	movq	%rdx, %rax	# tmp440, tmp442
	addq	%rax, %rax	# tmp442
	addq	%rdx, %rax	# tmp440, tmp442
	salq	$2, %rax	#, tmp442
	addq	%rdx, %rax	# tmp440, tmp442
	salq	$3, %rax	#, tmp443
	addq	$rld+16, %rax	#, tmp444
	movl	(%rax), %eax	# rld[i_2].class, D.23534
	movl	-52(%rbp), %edx	# class, tmp445
	movl	%edx, %esi	# tmp445,
	movl	%eax, %edi	# D.23534,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23533
	je	.L260	#,
.L259:
	.loc 1 769 0
	movl	-28(%rbp), %eax	# i, tmp447
	movslq	%eax, %rdx	# tmp447, tmp446
	movq	%rdx, %rax	# tmp446, tmp448
	addq	%rax, %rax	# tmp448
	addq	%rdx, %rax	# tmp446, tmp448
	salq	$2, %rax	#, tmp448
	addq	%rdx, %rax	# tmp446, tmp448
	salq	$3, %rax	#, tmp449
	addq	$rld+64, %rax	#, tmp450
	movq	(%rax), %rax	# rld[i_2].reg_rtx, D.23535
	testq	%rax, %rax	# D.23535
	je	.L261	#,
	.loc 1 770 0
	movl	-52(%rbp), %eax	# class, class.139
	cltq
	movq	reg_class_contents(,%rax,8), %rbx	# reg_class_contents, D.23536
	movl	-28(%rbp), %eax	# i, tmp453
	movslq	%eax, %rdx	# tmp453, tmp452
	movq	%rdx, %rax	# tmp452, tmp454
	addq	%rax, %rax	# tmp454
	addq	%rdx, %rax	# tmp452, tmp454
	salq	$2, %rax	#, tmp454
	addq	%rdx, %rax	# tmp452, tmp454
	salq	$3, %rax	#, tmp455
	addq	$rld+64, %rax	#, tmp456
	movq	(%rax), %rax	# rld[i_2].reg_rtx, D.23535
	movq	%rax, %rdi	# D.23535,
	call	true_regnum	#
	movl	%eax, %ecx	# D.23533, tmp591
	shrq	%cl, %rbx	# tmp591, D.23536
	movq	%rbx, %rax	# D.23536, D.23536
	andl	$1, %eax	#, D.23536
	testq	%rax, %rax	# D.23536
	je	.L260	#,
.L261:
	.loc 1 772 0
	cmpq	$0, -48(%rbp)	#, out
	jne	.L260	#,
	.loc 1 772 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp458
	movslq	%eax, %rdx	# tmp458, tmp457
	movq	%rdx, %rax	# tmp457, tmp459
	addq	%rax, %rax	# tmp459
	addq	%rdx, %rax	# tmp457, tmp459
	salq	$2, %rax	#, tmp459
	addq	%rdx, %rax	# tmp457, tmp459
	salq	$3, %rax	#, tmp460
	addq	$rld, %rax	#, tmp461
	movq	8(%rax), %rax	# rld[i_2].out, D.23535
	testq	%rax, %rax	# D.23535
	jne	.L260	#,
	movl	-28(%rbp), %eax	# i, tmp463
	movslq	%eax, %rdx	# tmp463, tmp462
	movq	%rdx, %rax	# tmp462, tmp464
	addq	%rax, %rax	# tmp464
	addq	%rdx, %rax	# tmp462, tmp464
	salq	$2, %rax	#, tmp464
	addq	%rdx, %rax	# tmp462, tmp464
	salq	$3, %rax	#, tmp465
	addq	$rld, %rax	#, tmp466
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	testq	%rax, %rax	# D.23535
	je	.L260	#,
	.loc 1 773 0 is_stmt 1
	movq	-24(%rbp), %rax	# in, tmp467
	movzwl	(%rax), %eax	# in_17->code, D.23537
	cmpw	$61, %ax	#, D.23537
	jne	.L262	#,
	.loc 1 774 0
	movl	-28(%rbp), %eax	# i, tmp469
	movslq	%eax, %rdx	# tmp469, tmp468
	movq	%rdx, %rax	# tmp468, tmp470
	addq	%rax, %rax	# tmp470
	addq	%rdx, %rax	# tmp468, tmp470
	salq	$2, %rax	#, tmp470
	addq	%rdx, %rax	# tmp468, tmp470
	salq	$3, %rax	#, tmp471
	addq	$rld, %rax	#, tmp472
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	movzwl	(%rax), %eax	# _139->code, D.23537
	movzwl	%ax, %eax	# D.23537, D.23533
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.23541
	cmpb	$97, %al	#, D.23541
	jne	.L262	#,
	.loc 1 775 0
	movl	-28(%rbp), %eax	# i, tmp475
	movslq	%eax, %rdx	# tmp475, tmp474
	movq	%rdx, %rax	# tmp474, tmp476
	addq	%rax, %rax	# tmp476
	addq	%rdx, %rax	# tmp474, tmp476
	salq	$2, %rax	#, tmp476
	addq	%rdx, %rax	# tmp474, tmp476
	salq	$3, %rax	#, tmp477
	addq	$rld, %rax	#, tmp478
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	movq	8(%rax), %rax	# _143->fld[0].rtx, D.23535
	cmpq	-24(%rbp), %rax	# in, D.23535
	je	.L263	#,
	.loc 1 775 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp480
	movslq	%eax, %rdx	# tmp480, tmp479
	movq	%rdx, %rax	# tmp479, tmp481
	addq	%rax, %rax	# tmp481
	addq	%rdx, %rax	# tmp479, tmp481
	salq	$2, %rax	#, tmp481
	addq	%rdx, %rax	# tmp479, tmp481
	salq	$3, %rax	#, tmp482
	addq	$rld, %rax	#, tmp483
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	movq	8(%rax), %rax	# _145->fld[0].rtx, D.23535
	testq	%rax, %rax	# D.23535
	je	.L262	#,
	movl	-28(%rbp), %eax	# i, tmp485
	movslq	%eax, %rdx	# tmp485, tmp484
	movq	%rdx, %rax	# tmp484, tmp486
	addq	%rax, %rax	# tmp486
	addq	%rdx, %rax	# tmp484, tmp486
	salq	$2, %rax	#, tmp486
	addq	%rdx, %rax	# tmp484, tmp486
	salq	$3, %rax	#, tmp487
	addq	$rld, %rax	#, tmp488
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	movq	8(%rax), %rax	# _147->fld[0].rtx, D.23535
	movzwl	(%rax), %eax	# _148->code, D.23537
	.loc 1 772 0 is_stmt 1 discriminator 1
	cmpw	$61, %ax	#, D.23537
	jne	.L264	#,
	.loc 1 775 0
	movq	-24(%rbp), %rax	# in, tmp489
	movzwl	(%rax), %eax	# in_17->code, D.23537
	cmpw	$61, %ax	#, D.23537
	jne	.L265	#,
	.loc 1 775 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp491
	movslq	%eax, %rdx	# tmp491, tmp490
	movq	%rdx, %rax	# tmp490, tmp492
	addq	%rax, %rax	# tmp492
	addq	%rdx, %rax	# tmp490, tmp492
	salq	$2, %rax	#, tmp492
	addq	%rdx, %rax	# tmp490, tmp492
	salq	$3, %rax	#, tmp493
	addq	$rld, %rax	#, tmp494
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	movq	8(%rax), %rax	# _151->fld[0].rtx, D.23535
	movl	8(%rax), %edx	# _152->fld[0].rtuint, D.23538
	movq	-24(%rbp), %rax	# in, tmp495
	movl	8(%rax), %eax	# in_17->fld[0].rtuint, D.23538
	cmpl	%eax, %edx	# D.23538, D.23538
	jne	.L265	#,
	.loc 1 775 0 discriminator 3
	movl	$1, %eax	#, iftmp.140
	jmp	.L266	#
.L265:
	.loc 1 775 0 discriminator 2
	movl	$0, %eax	#, iftmp.140
.L266:
	.loc 1 775 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	jne	.L263	#,
	jmp	.L262	#
.L264:
	.loc 1 775 0
	movl	-28(%rbp), %eax	# i, tmp497
	movslq	%eax, %rdx	# tmp497, tmp496
	movq	%rdx, %rax	# tmp496, tmp498
	addq	%rax, %rax	# tmp498
	addq	%rdx, %rax	# tmp496, tmp498
	salq	$2, %rax	#, tmp498
	addq	%rdx, %rax	# tmp496, tmp498
	salq	$3, %rax	#, tmp499
	addq	$rld, %rax	#, tmp500
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	movq	8(%rax), %rax	# _158->fld[0].rtx, D.23535
	movq	-24(%rbp), %rdx	# in, tmp501
	movq	%rdx, %rsi	# tmp501,
	movq	%rax, %rdi	# D.23535,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23533
	je	.L267	#,
	.loc 1 775 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp503
	movslq	%eax, %rdx	# tmp503, tmp502
	movq	%rdx, %rax	# tmp502, tmp504
	addq	%rax, %rax	# tmp504
	addq	%rdx, %rax	# tmp502, tmp504
	salq	$2, %rax	#, tmp504
	addq	%rdx, %rax	# tmp502, tmp504
	salq	$3, %rax	#, tmp505
	addq	$rld, %rax	#, tmp506
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	movq	8(%rax), %rax	# _161->fld[0].rtx, D.23535
	movq	%rax, %rdi	# D.23535,
	call	side_effects_p	#
	testl	%eax, %eax	# D.23533
	jne	.L267	#,
	.loc 1 775 0 discriminator 3
	movl	$1, %eax	#, iftmp.141
	jmp	.L268	#
.L267:
	.loc 1 775 0 discriminator 2
	movl	$0, %eax	#, iftmp.141
.L268:
	.loc 1 775 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	jne	.L263	#,
.L262:
	.loc 1 776 0 is_stmt 1
	movl	-28(%rbp), %eax	# i, tmp508
	movslq	%eax, %rdx	# tmp508, tmp507
	movq	%rdx, %rax	# tmp507, tmp509
	addq	%rax, %rax	# tmp509
	addq	%rdx, %rax	# tmp507, tmp509
	salq	$2, %rax	#, tmp509
	addq	%rdx, %rax	# tmp507, tmp509
	salq	$3, %rax	#, tmp510
	addq	$rld, %rax	#, tmp511
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	movzwl	(%rax), %eax	# _167->code, D.23537
	cmpw	$61, %ax	#, D.23537
	jne	.L260	#,
	.loc 1 777 0
	movq	-24(%rbp), %rax	# in, tmp512
	movzwl	(%rax), %eax	# in_17->code, D.23537
	movzwl	%ax, %eax	# D.23537, D.23533
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.23541
	cmpb	$97, %al	#, D.23541
	jne	.L260	#,
	.loc 1 778 0
	movq	-24(%rbp), %rax	# in, tmp514
	movq	8(%rax), %rcx	# in_17->fld[0].rtx, D.23535
	movl	-28(%rbp), %eax	# i, tmp516
	movslq	%eax, %rdx	# tmp516, tmp515
	movq	%rdx, %rax	# tmp515, tmp517
	addq	%rax, %rax	# tmp517
	addq	%rdx, %rax	# tmp515, tmp517
	salq	$2, %rax	#, tmp517
	addq	%rdx, %rax	# tmp515, tmp517
	salq	$3, %rax	#, tmp518
	addq	$rld, %rax	#, tmp519
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	cmpq	%rax, %rcx	# D.23535, D.23535
	je	.L263	#,
	.loc 1 778 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# in, tmp520
	movq	8(%rax), %rax	# in_17->fld[0].rtx, D.23535
	testq	%rax, %rax	# D.23535
	je	.L260	#,
	movq	-24(%rbp), %rax	# in, tmp521
	movq	8(%rax), %rax	# in_17->fld[0].rtx, D.23535
	movzwl	(%rax), %eax	# _175->code, D.23537
	.loc 1 772 0 is_stmt 1 discriminator 1
	cmpw	$61, %ax	#, D.23537
	jne	.L269	#,
	.loc 1 778 0
	movl	-28(%rbp), %eax	# i, tmp523
	movslq	%eax, %rdx	# tmp523, tmp522
	movq	%rdx, %rax	# tmp522, tmp524
	addq	%rax, %rax	# tmp524
	addq	%rdx, %rax	# tmp522, tmp524
	salq	$2, %rax	#, tmp524
	addq	%rdx, %rax	# tmp522, tmp524
	salq	$3, %rax	#, tmp525
	addq	$rld, %rax	#, tmp526
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	movzwl	(%rax), %eax	# _177->code, D.23537
	cmpw	$61, %ax	#, D.23537
	jne	.L270	#,
	.loc 1 778 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# in, tmp527
	movq	8(%rax), %rax	# in_17->fld[0].rtx, D.23535
	movl	8(%rax), %ecx	# _179->fld[0].rtuint, D.23538
	movl	-28(%rbp), %eax	# i, tmp529
	movslq	%eax, %rdx	# tmp529, tmp528
	movq	%rdx, %rax	# tmp528, tmp530
	addq	%rax, %rax	# tmp530
	addq	%rdx, %rax	# tmp528, tmp530
	salq	$2, %rax	#, tmp530
	addq	%rdx, %rax	# tmp528, tmp530
	salq	$3, %rax	#, tmp531
	addq	$rld, %rax	#, tmp532
	movq	(%rax), %rax	# rld[i_2].in, D.23535
	movl	8(%rax), %eax	# _181->fld[0].rtuint, D.23538
	cmpl	%eax, %ecx	# D.23538, D.23538
	jne	.L270	#,
	.loc 1 778 0 discriminator 3
	movl	$1, %eax	#, iftmp.142
	jmp	.L271	#
.L270:
	.loc 1 778 0 discriminator 2
	movl	$0, %eax	#, iftmp.142
.L271:
	.loc 1 778 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	jne	.L263	#,
	jmp	.L260	#
.L269:
	.loc 1 778 0
	movl	-28(%rbp), %eax	# i, tmp534
	movslq	%eax, %rdx	# tmp534, tmp533
	movq	%rdx, %rax	# tmp533, tmp535
	addq	%rax, %rax	# tmp535
	addq	%rdx, %rax	# tmp533, tmp535
	salq	$2, %rax	#, tmp535
	addq	%rdx, %rax	# tmp533, tmp535
	salq	$3, %rax	#, tmp536
	addq	$rld, %rax	#, tmp537
	movq	(%rax), %rdx	# rld[i_2].in, D.23535
	movq	-24(%rbp), %rax	# in, tmp538
	movq	8(%rax), %rax	# in_17->fld[0].rtx, D.23535
	movq	%rdx, %rsi	# D.23535,
	movq	%rax, %rdi	# D.23535,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23533
	je	.L272	#,
	.loc 1 778 0 discriminator 1
	movq	-24(%rbp), %rax	# in, tmp539
	movq	8(%rax), %rax	# in_17->fld[0].rtx, D.23535
	movq	%rax, %rdi	# D.23535,
	call	side_effects_p	#
	testl	%eax, %eax	# D.23533
	jne	.L272	#,
	.loc 1 778 0 discriminator 3
	movl	$1, %eax	#, iftmp.143
	jmp	.L273	#
.L272:
	.loc 1 778 0 discriminator 2
	movl	$0, %eax	#, iftmp.143
.L273:
	.loc 1 778 0 discriminator 4
	andl	$1, %eax	#, D.23539
	testb	%al, %al	# D.23539
	je	.L260	#,
.L263:
	.loc 1 779 0 is_stmt 1
	movl	-28(%rbp), %eax	# i, tmp541
	movslq	%eax, %rdx	# tmp541, tmp540
	movq	%rdx, %rax	# tmp540, tmp542
	addq	%rax, %rax	# tmp542
	addq	%rdx, %rax	# tmp540, tmp542
	salq	$2, %rax	#, tmp542
	addq	%rdx, %rax	# tmp540, tmp542
	salq	$3, %rax	#, tmp543
	addq	$rld, %rax	#, tmp544
	movq	8(%rax), %rax	# rld[i_2].out, D.23535
	testq	%rax, %rax	# D.23535
	je	.L274	#,
	.loc 1 779 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp546
	movslq	%eax, %rdx	# tmp546, tmp545
	movq	%rdx, %rax	# tmp545, tmp547
	addq	%rax, %rax	# tmp547
	addq	%rdx, %rax	# tmp545, tmp547
	salq	$2, %rax	#, tmp547
	addq	%rdx, %rax	# tmp545, tmp547
	salq	$3, %rax	#, tmp548
	addq	$rld, %rax	#, tmp549
	movq	8(%rax), %rax	# rld[i_2].out, D.23535
	movq	%rax, %rdi	# D.23535,
	call	earlyclobber_operand_p	#
	testl	%eax, %eax	# D.23533
	jne	.L260	#,
.L274:
	.loc 1 781 0 is_stmt 1
	cmpl	$9, -56(%rbp)	#, type
	je	.L275	#,
	.loc 1 781 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp551
	movslq	%eax, %rdx	# tmp551, tmp550
	movq	%rdx, %rax	# tmp550, tmp552
	addq	%rax, %rax	# tmp552
	addq	%rdx, %rax	# tmp550, tmp552
	salq	$2, %rax	#, tmp552
	addq	%rdx, %rax	# tmp550, tmp552
	salq	$3, %rax	#, tmp553
	addq	$rld+80, %rax	#, tmp554
	movl	12(%rax), %eax	# rld[i_2].when_needed, D.23540
	cmpl	$9, %eax	#, D.23540
	je	.L275	#,
	movl	-28(%rbp), %eax	# i, tmp556
	movslq	%eax, %rdx	# tmp556, tmp555
	movq	%rdx, %rax	# tmp555, tmp557
	addq	%rax, %rax	# tmp557
	addq	%rdx, %rax	# tmp555, tmp557
	salq	$2, %rax	#, tmp557
	addq	%rdx, %rax	# tmp555, tmp557
	salq	$3, %rax	#, tmp558
	addq	$rld+80, %rax	#, tmp559
	movl	12(%rax), %eax	# rld[i_2].when_needed, D.23540
	cmpl	-56(%rbp), %eax	# type, D.23540
	jne	.L276	#,
	movl	-28(%rbp), %eax	# i, tmp561
	movslq	%eax, %rdx	# tmp561, tmp560
	movq	%rdx, %rax	# tmp560, tmp562
	addq	%rax, %rax	# tmp562
	addq	%rdx, %rax	# tmp560, tmp562
	salq	$2, %rax	#, tmp562
	addq	%rdx, %rax	# tmp560, tmp562
	salq	$3, %rax	#, tmp563
	addq	$rld+64, %rax	#, tmp564
	movl	8(%rax), %eax	# rld[i_2].opnum, D.23533
	cmpl	-60(%rbp), %eax	# opnum, D.23533
	je	.L275	#,
.L276:
	.loc 1 781 0 discriminator 2
	cmpl	$0, -56(%rbp)	#, type
	jne	.L277	#,
	.loc 1 781 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp566
	movslq	%eax, %rdx	# tmp566, tmp565
	movq	%rdx, %rax	# tmp565, tmp567
	addq	%rax, %rax	# tmp567
	addq	%rdx, %rax	# tmp565, tmp567
	salq	$2, %rax	#, tmp567
	addq	%rdx, %rax	# tmp565, tmp567
	salq	$3, %rax	#, tmp568
	addq	$rld+80, %rax	#, tmp569
	movl	12(%rax), %eax	# rld[i_2].when_needed, D.23540
	testl	%eax, %eax	# D.23540
	je	.L275	#,
.L277:
	.loc 1 781 0 discriminator 2
	cmpl	$7, -56(%rbp)	#, type
	jne	.L278	#,
	.loc 1 781 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp571
	movslq	%eax, %rdx	# tmp571, tmp570
	movq	%rdx, %rax	# tmp570, tmp572
	addq	%rax, %rax	# tmp572
	addq	%rdx, %rax	# tmp570, tmp572
	salq	$2, %rax	#, tmp572
	addq	%rdx, %rax	# tmp570, tmp572
	salq	$3, %rax	#, tmp573
	addq	$rld+80, %rax	#, tmp574
	movl	12(%rax), %eax	# rld[i_2].when_needed, D.23540
	cmpl	$7, %eax	#, D.23540
	je	.L275	#,
.L278:
	.loc 1 781 0 discriminator 2
	cmpl	$10, -56(%rbp)	#, type
	jne	.L260	#,
	.loc 1 781 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp576
	movslq	%eax, %rdx	# tmp576, tmp575
	movq	%rdx, %rax	# tmp575, tmp577
	addq	%rax, %rax	# tmp577
	addq	%rdx, %rax	# tmp575, tmp577
	salq	$2, %rax	#, tmp577
	addq	%rdx, %rax	# tmp575, tmp577
	salq	$3, %rax	#, tmp578
	addq	$rld+80, %rax	#, tmp579
	movl	12(%rax), %eax	# rld[i_2].when_needed, D.23540
	cmpl	$10, %eax	#, D.23540
	jne	.L260	#,
.L275:
	.loc 1 786 0 is_stmt 1
	movq	-24(%rbp), %rax	# in, tmp580
	movzwl	(%rax), %eax	# in_17->code, D.23537
	cmpw	$61, %ax	#, D.23537
	jne	.L279	#,
	.loc 1 787 0
	movl	-28(%rbp), %eax	# i, tmp582
	movslq	%eax, %rdx	# tmp582, tmp581
	movq	%rdx, %rax	# tmp581, tmp583
	addq	%rax, %rax	# tmp583
	addq	%rdx, %rax	# tmp581, tmp583
	salq	$2, %rax	#, tmp583
	addq	%rdx, %rax	# tmp581, tmp583
	salq	$3, %rax	#, tmp584
	addq	$rld, %rax	#, tmp585
	movq	(%rax), %rdx	# rld[i_2].in, D.23535
	movq	-40(%rbp), %rax	# p_in, tmp586
	movq	%rdx, (%rax)	# D.23535, *p_in_16(D)
.L279:
	.loc 1 788 0
	movl	-28(%rbp), %eax	# i, D.23533
	jmp	.L223	#
.L260:
	.loc 1 764 0
	addl	$1, -28(%rbp)	#, i
.L258:
	.loc 1 764 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.144
	cmpl	%eax, -28(%rbp)	# n_reloads.144, i
	jl	.L280	#,
	.loc 1 790 0 is_stmt 1
	movl	n_reloads(%rip), %eax	# n_reloads, D.23533
.L223:
	.loc 1 791 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	find_reusable_reload, .-find_reusable_reload
	.type	reload_inner_reg_of_subreg, @function
reload_inner_reg_of_subreg:
.LFB7:
	.loc 1 800 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# x, x
	movl	%esi, -44(%rbp)	# mode, mode
	.loc 1 804 0
	movq	-40(%rbp), %rax	# x, tmp136
	movzwl	(%rax), %eax	# x_14(D)->code, D.23543
	cmpw	$63, %ax	#, D.23543
	je	.L282	#,
	.loc 1 805 0
	movl	$0, %eax	#, D.23542
	jmp	.L283	#
.L282:
	.loc 1 807 0
	movq	-40(%rbp), %rax	# x, tmp137
	movq	8(%rax), %rax	# x_14(D)->fld[0].rtx, tmp138
	movq	%rax, -24(%rbp)	# tmp138, inner
	.loc 1 810 0
	movq	-24(%rbp), %rax	# inner, tmp139
	movzwl	(%rax), %eax	# inner_17->code, D.23543
	cmpw	$67, %ax	#, D.23543
	je	.L284	#,
	.loc 1 810 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# inner, tmp140
	movzwl	(%rax), %eax	# inner_17->code, D.23543
	cmpw	$68, %ax	#, D.23543
	je	.L284	#,
	movq	-24(%rbp), %rax	# inner, tmp141
	movzwl	(%rax), %eax	# inner_17->code, D.23543
	cmpw	$54, %ax	#, D.23543
	je	.L284	#,
	movq	-24(%rbp), %rax	# inner, tmp142
	movzwl	(%rax), %eax	# inner_17->code, D.23543
	cmpw	$55, %ax	#, D.23543
	je	.L284	#,
	movq	-24(%rbp), %rax	# inner, tmp143
	movzwl	(%rax), %eax	# inner_17->code, D.23543
	cmpw	$58, %ax	#, D.23543
	je	.L284	#,
	movq	-24(%rbp), %rax	# inner, tmp144
	movzwl	(%rax), %eax	# inner_17->code, D.23543
	cmpw	$134, %ax	#, D.23543
	je	.L284	#,
	movq	-24(%rbp), %rax	# inner, tmp145
	movzwl	(%rax), %eax	# inner_17->code, D.23543
	cmpw	$56, %ax	#, D.23543
	je	.L284	#,
	movq	-24(%rbp), %rax	# inner, tmp146
	movzwl	(%rax), %eax	# inner_17->code, D.23543
	cmpw	$140, %ax	#, D.23543
	je	.L284	#,
	movq	-24(%rbp), %rax	# inner, tmp147
	movzwl	(%rax), %eax	# inner_17->code, D.23543
	cmpw	$75, %ax	#, D.23543
	jne	.L285	#,
.L284:
	.loc 1 811 0 is_stmt 1
	movl	$1, %eax	#, D.23542
	jmp	.L283	#
.L285:
	.loc 1 815 0
	movq	-24(%rbp), %rax	# inner, tmp148
	movzwl	(%rax), %eax	# inner_17->code, D.23543
	cmpw	$61, %ax	#, D.23543
	jne	.L286	#,
	.loc 1 816 0
	movq	-24(%rbp), %rax	# inner, tmp149
	movl	8(%rax), %eax	# inner_17->fld[0].rtuint, D.23544
	cmpl	$52, %eax	#, D.23544
	jbe	.L287	#,
.L286:
	.loc 1 817 0
	movl	$0, %eax	#, D.23542
	jmp	.L283	#
.L287:
	.loc 1 820 0
	movq	-40(%rbp), %rax	# x, tmp150
	movq	%rax, %rdi	# tmp150,
	call	subreg_regno	#
	movl	-44(%rbp), %edx	# mode, tmp151
	movl	%edx, %esi	# tmp151,
	movl	%eax, %edi	# D.23542,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23542
	jne	.L288	#,
	.loc 1 821 0
	movl	$1, %eax	#, D.23542
	jmp	.L283	#
.L288:
	.loc 1 826 0
	movl	-44(%rbp), %eax	# mode, mode.146
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23545
	movzbl	%al, %edx	# D.23545, D.23542
	movl	target_flags(%rip), %eax	# target_flags, target_flags.148
	andl	$33554432, %eax	#, D.23542
	testl	%eax, %eax	# D.23542
	je	.L289	#,
	.loc 1 826 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.147
	jmp	.L290	#
.L289:
	.loc 1 826 0 discriminator 2
	movl	$4, %eax	#, iftmp.147
.L290:
	.loc 1 828 0 is_stmt 1
	cmpl	%eax, %edx	# iftmp.147, D.23542
	jg	.L291	#,
	.loc 1 827 0
	movq	-24(%rbp), %rax	# inner, tmp153
	movzbl	2(%rax), %eax	# inner_17->mode, D.23545
	movzbl	%al, %eax	# D.23545, D.23542
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23545
	movzbl	%al, %edx	# D.23545, D.23542
	movl	target_flags(%rip), %eax	# target_flags, target_flags.150
	andl	$33554432, %eax	#, D.23542
	testl	%eax, %eax	# D.23542
	je	.L292	#,
	.loc 1 827 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.149
	jmp	.L293	#
.L292:
	.loc 1 827 0 discriminator 2
	movl	$4, %eax	#, iftmp.149
.L293:
	.loc 1 827 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.149, D.23542
	jle	.L291	#,
	.loc 1 828 0 is_stmt 1
	movq	-24(%rbp), %rax	# inner, tmp155
	movzbl	2(%rax), %eax	# inner_17->mode, D.23545
	movzbl	%al, %eax	# D.23545, D.23542
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23545
	movzbl	%al, %eax	# D.23545, D.23542
	movl	target_flags(%rip), %edx	# target_flags, target_flags.152
	andl	$33554432, %edx	#, D.23542
	testl	%edx, %edx	# D.23542
	je	.L294	#,
	.loc 1 828 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.151
	jmp	.L295	#
.L294:
	.loc 1 828 0 discriminator 2
	movl	$4, %ebx	#, iftmp.151
.L295:
	.loc 1 828 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.151
	movl	%eax, %ecx	# tmp157, D.23542
	.loc 1 829 0 is_stmt 1 discriminator 3
	movq	-24(%rbp), %rax	# inner, tmp159
	movl	8(%rax), %eax	# inner_17->fld[0].rtuint, D.23544
	cmpl	$7, %eax	#, D.23544
	jbe	.L296	#,
	.loc 1 829 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# inner, tmp160
	movl	8(%rax), %eax	# inner_17->fld[0].rtuint, D.23544
	cmpl	$15, %eax	#, D.23544
	jbe	.L297	#,
.L296:
	.loc 1 829 0 discriminator 2
	movq	-24(%rbp), %rax	# inner, tmp161
	movl	8(%rax), %eax	# inner_17->fld[0].rtuint, D.23544
	cmpl	$20, %eax	#, D.23544
	jbe	.L298	#,
	.loc 1 829 0 discriminator 1
	movq	-24(%rbp), %rax	# inner, tmp162
	movl	8(%rax), %eax	# inner_17->fld[0].rtuint, D.23544
	cmpl	$28, %eax	#, D.23544
	jbe	.L297	#,
.L298:
	.loc 1 829 0 discriminator 2
	movq	-24(%rbp), %rax	# inner, tmp163
	movl	8(%rax), %eax	# inner_17->fld[0].rtuint, D.23544
	cmpl	$44, %eax	#, D.23544
	jbe	.L299	#,
	.loc 1 829 0 discriminator 1
	movq	-24(%rbp), %rax	# inner, tmp164
	movl	8(%rax), %eax	# inner_17->fld[0].rtuint, D.23544
	cmpl	$52, %eax	#, D.23544
	jbe	.L297	#,
.L299:
	.loc 1 829 0 discriminator 2
	movq	-24(%rbp), %rax	# inner, tmp165
	movl	8(%rax), %eax	# inner_17->fld[0].rtuint, D.23544
	cmpl	$28, %eax	#, D.23544
	jbe	.L300	#,
	.loc 1 829 0 discriminator 1
	movq	-24(%rbp), %rax	# inner, tmp166
	movl	8(%rax), %eax	# inner_17->fld[0].rtuint, D.23544
	cmpl	$36, %eax	#, D.23544
	ja	.L300	#,
.L297:
	movq	-24(%rbp), %rax	# inner, tmp167
	movzbl	2(%rax), %eax	# inner_17->mode, D.23545
	movzbl	%al, %eax	# D.23545, D.23542
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23546
	cmpl	$5, %eax	#, D.23546
	je	.L301	#,
	.loc 1 829 0 discriminator 2
	movq	-24(%rbp), %rax	# inner, tmp169
	movzbl	2(%rax), %eax	# inner_17->mode, D.23545
	movzbl	%al, %eax	# D.23545, D.23542
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23546
	cmpl	$6, %eax	#, D.23546
	jne	.L302	#,
.L301:
	.loc 1 829 0 discriminator 1
	movl	$2, %eax	#, iftmp.154
	jmp	.L303	#
.L302:
	movl	$1, %eax	#, iftmp.154
.L303:
	.loc 1 829 0 discriminator 3
	jmp	.L304	#
.L300:
	.loc 1 829 0 discriminator 2
	movq	-24(%rbp), %rax	# inner, tmp171
	movzbl	2(%rax), %eax	# inner_17->mode, D.23545
	cmpb	$18, %al	#, D.23545
	jne	.L305	#,
	.loc 1 829 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.157
	andl	$33554432, %eax	#, D.23542
	testl	%eax, %eax	# D.23542
	je	.L306	#,
	movl	$2, %eax	#, iftmp.156
	jmp	.L304	#
.L306:
	.loc 1 829 0 discriminator 2
	movl	$3, %eax	#, iftmp.156
	jmp	.L304	#
.L305:
	movq	-24(%rbp), %rax	# inner, tmp172
	movzbl	2(%rax), %eax	# inner_17->mode, D.23545
	cmpb	$24, %al	#, D.23545
	jne	.L309	#,
	.loc 1 829 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.160
	andl	$33554432, %eax	#, D.23542
	testl	%eax, %eax	# D.23542
	je	.L310	#,
	movl	$4, %eax	#, iftmp.159
	jmp	.L304	#
.L310:
	.loc 1 829 0 discriminator 2
	movl	$6, %eax	#, iftmp.159
	jmp	.L304	#
.L309:
	movq	-24(%rbp), %rax	# inner, tmp173
	movzbl	2(%rax), %eax	# inner_17->mode, D.23545
	movzbl	%al, %eax	# D.23545, D.23542
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23545
	movzbl	%al, %edx	# D.23545, D.23542
	movl	target_flags(%rip), %eax	# target_flags, target_flags.162
	andl	$33554432, %eax	#, D.23542
	testl	%eax, %eax	# D.23542
	je	.L313	#,
	.loc 1 829 0 discriminator 1
	movl	$8, %eax	#, iftmp.161
	jmp	.L314	#
.L313:
	.loc 1 829 0 discriminator 2
	movl	$4, %eax	#, iftmp.161
.L314:
	.loc 1 829 0 discriminator 3
	addl	%edx, %eax	# D.23542, D.23542
	subl	$1, %eax	#, D.23542
	movl	target_flags(%rip), %edx	# target_flags, target_flags.164
	andl	$33554432, %edx	#, D.23542
	testl	%edx, %edx	# D.23542
	je	.L315	#,
	.loc 1 829 0 discriminator 1
	movl	$8, %esi	#, iftmp.163
	jmp	.L316	#
.L315:
	.loc 1 829 0 discriminator 2
	movl	$4, %esi	#, iftmp.163
.L316:
	.loc 1 829 0 discriminator 3
	cltd
	idivl	%esi	# iftmp.163
.L304:
	.loc 1 828 0 is_stmt 1
	cmpl	%eax, %ecx	# iftmp.153, D.23542
	je	.L291	#,
	.loc 1 828 0 is_stmt 0 discriminator 2
	movl	$1, %eax	#, iftmp.145
	jmp	.L317	#
.L291:
	.loc 1 828 0 discriminator 1
	movl	$0, %eax	#, iftmp.145
.L317:
.L283:
	.loc 1 830 0 is_stmt 1
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	reload_inner_reg_of_subreg, .-reload_inner_reg_of_subreg
	.section	.rodata
	.align 8
.LC1:
	.string	"cannot reload integer constant operand in `asm'"
	.align 8
.LC2:
	.string	"impossible register constraint in `asm'"
	.text
	.globl	push_reload
	.type	push_reload, @function
push_reload:
.LFB8:
	.loc 1 876 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$216, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -152(%rbp)	# in, in
	movq	%rsi, -160(%rbp)	# out, out
	movq	%rdx, -168(%rbp)	# inloc, inloc
	movq	%rcx, -176(%rbp)	# outloc, outloc
	movl	%r8d, -180(%rbp)	# class, class
	movl	%r9d, -184(%rbp)	# inmode, inmode
	.loc 1 878 0
	movl	$0, -124(%rbp)	#, dont_share
	.loc 1 879 0
	movl	$0, -120(%rbp)	#, dont_remove_subreg
	.loc 1 880 0
	movq	$0, -64(%rbp)	#, in_subreg_loc
	movq	$0, -56(%rbp)	#, out_subreg_loc
	.loc 1 881 0
	movl	$-1, -92(%rbp)	#, secondary_in_reload
	movl	$-1, -116(%rbp)	#, secondary_out_reload
	.loc 1 882 0
	movl	$1317, -88(%rbp)	#, secondary_in_icode
	.loc 1 883 0
	movl	$1317, -132(%rbp)	#, secondary_out_icode
	.loc 1 888 0
	cmpl	$0, -184(%rbp)	#, inmode
	jne	.L319	#,
	.loc 1 888 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.165
	testq	%rax, %rax	# in.165
	je	.L319	#,
	.loc 1 889 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.166
	movzbl	2(%rax), %eax	# in.166_120->mode, D.23547
	movzbl	%al, %eax	# D.23547, tmp828
	movl	%eax, -184(%rbp)	# tmp828, inmode
.L319:
	.loc 1 890 0
	cmpl	$0, 16(%rbp)	#, outmode
	jne	.L320	#,
	.loc 1 890 0 is_stmt 0 discriminator 1
	cmpq	$0, -160(%rbp)	#, out
	je	.L320	#,
	.loc 1 891 0 is_stmt 1
	movq	-160(%rbp), %rax	# out, tmp829
	movzbl	2(%rax), %eax	# out_124(D)->mode, D.23547
	movzbl	%al, %eax	# D.23547, tmp830
	movl	%eax, 16(%rbp)	# tmp830, outmode
.L320:
	.loc 1 897 0
	movq	-152(%rbp), %rax	# in, in.167
	testq	%rax, %rax	# in.167
	je	.L321	#,
	.loc 1 897 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.168
	movzwl	(%rax), %eax	# in.168_128->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L321	#,
.LBB6:
	.loc 1 899 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.169
	movl	8(%rax), %eax	# in.169_130->fld[0].rtuint, D.23549
	movl	%eax, -84(%rbp)	# D.23549, regno
	.loc 1 901 0
	cmpl	$52, -84(%rbp)	#, regno
	jle	.L321	#,
	.loc 1 901 0 is_stmt 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.170
	movl	-84(%rbp), %edx	# regno, tmp831
	movslq	%edx, %rdx	# tmp831, D.23550
	addq	%rdx, %rdx	# D.23550
	addq	%rdx, %rax	# D.23550, D.23551
	movzwl	(%rax), %eax	# *_136, D.23552
	testw	%ax, %ax	# D.23552
	jns	.L321	#,
	.loc 1 902 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.171
	movl	-84(%rbp), %edx	# regno, tmp832
	movslq	%edx, %rdx	# tmp832, D.23550
	salq	$3, %rdx	#, D.23550
	addq	%rdx, %rax	# D.23550, D.23553
	movq	(%rax), %rax	# *_141, D.23554
	testq	%rax, %rax	# D.23554
	je	.L321	#,
	.loc 1 903 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.172
	movl	-84(%rbp), %edx	# regno, tmp833
	movslq	%edx, %rdx	# tmp833, D.23550
	salq	$3, %rdx	#, D.23550
	addq	%rdx, %rax	# D.23550, D.23553
	movq	(%rax), %rax	# *_146, in.173
	movq	%rax, -152(%rbp)	# in.173, in
.L321:
.LBE6:
	.loc 1 909 0
	cmpq	$0, -160(%rbp)	#, out
	je	.L322	#,
	.loc 1 909 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp834
	movzwl	(%rax), %eax	# out_124(D)->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L322	#,
.LBB7:
	.loc 1 911 0 is_stmt 1
	movq	-160(%rbp), %rax	# out, tmp835
	movl	8(%rax), %eax	# out_124(D)->fld[0].rtuint, D.23549
	movl	%eax, -80(%rbp)	# D.23549, regno
	.loc 1 913 0
	cmpl	$52, -80(%rbp)	#, regno
	jle	.L322	#,
	.loc 1 913 0 is_stmt 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.174
	movl	-80(%rbp), %edx	# regno, tmp836
	movslq	%edx, %rdx	# tmp836, D.23550
	addq	%rdx, %rdx	# D.23550
	addq	%rdx, %rax	# D.23550, D.23551
	movzwl	(%rax), %eax	# *_154, D.23552
	testw	%ax, %ax	# D.23552
	jns	.L322	#,
	.loc 1 914 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.175
	movl	-80(%rbp), %edx	# regno, tmp837
	movslq	%edx, %rdx	# tmp837, D.23550
	salq	$3, %rdx	#, D.23550
	addq	%rdx, %rax	# D.23550, D.23553
	movq	(%rax), %rax	# *_159, D.23554
	testq	%rax, %rax	# D.23554
	je	.L322	#,
	.loc 1 915 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.176
	movl	-80(%rbp), %edx	# regno, tmp838
	movslq	%edx, %rdx	# tmp838, D.23550
	salq	$3, %rdx	#, D.23550
	addq	%rdx, %rax	# D.23550, D.23553
	movq	(%rax), %rax	# *_164, tmp839
	movq	%rax, -160(%rbp)	# tmp839, out
.L322:
.LBE7:
	.loc 1 920 0
	movq	-152(%rbp), %rax	# in, in.177
	testq	%rax, %rax	# in.177
	je	.L323	#,
	.loc 1 920 0 is_stmt 0 discriminator 1
	cmpq	$0, -160(%rbp)	#, out
	je	.L323	#,
	movq	-152(%rbp), %rax	# in, in.178
	movzwl	(%rax), %eax	# in.178_167->code, D.23548
	cmpw	$66, %ax	#, D.23548
	jne	.L323	#,
	movq	-152(%rbp), %rax	# in, in.179
	movq	-160(%rbp), %rdx	# out, tmp840
	movq	%rdx, %rsi	# tmp840,
	movq	%rax, %rdi	# in.179,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23555
	je	.L323	#,
	.loc 1 921 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.180
	movq	8(%rax), %rax	# in.180_171->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _172->code, D.23548
	movzwl	%ax, %eax	# D.23548, D.23549
	subl	$96, %eax	#, tmp841
	cmpl	$5, %eax	#, tmp841
	ja	.L594	#,
	movl	%eax, %eax	# tmp841, tmp842
	movq	.L326(,%rax,8), %rax	#, tmp843
	jmp	*%rax	# tmp843
	.section	.rodata
	.align 8
	.align 4
.L326:
	.quad	.L325
	.quad	.L325
	.quad	.L327
	.quad	.L327
	.quad	.L325
	.quad	.L327
	.text
.L327:
	.loc 1 924 0
	movq	-152(%rbp), %rax	# in, in.181
	movq	8(%rax), %rax	# in.181_175->fld[0].rtx, D.23554
	movq	8(%rax), %rdx	# _176->fld[0].rtx, D.23554
	movq	-152(%rbp), %rax	# in, in.182
	movq	%rdx, %rsi	# D.23554,
	movq	%rax, %rdi	# in.182,
	call	replace_equiv_address_nv	#
	movq	%rax, -152(%rbp)	# in.183, in
	.loc 1 925 0
	jmp	.L323	#
.L325:
	.loc 1 928 0
	movq	-160(%rbp), %rax	# out, tmp844
	movq	8(%rax), %rax	# out_1->fld[0].rtx, D.23554
	movq	8(%rax), %rdx	# _180->fld[0].rtx, D.23554
	movq	-160(%rbp), %rax	# out, tmp845
	movq	%rdx, %rsi	# D.23554,
	movq	%rax, %rdi	# tmp845,
	call	replace_equiv_address_nv	#
	movq	%rax, -160(%rbp)	# tmp846, out
	.loc 1 929 0
	jmp	.L323	#
.L594:
	.loc 1 932 0
	nop
.L323:
	.loc 1 965 0
	movq	-152(%rbp), %rax	# in, in.184
	testq	%rax, %rax	# in.184
	je	.L328	#,
	.loc 1 965 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.185
	movzwl	(%rax), %eax	# in.185_185->code, D.23548
	cmpw	$63, %ax	#, D.23548
	jne	.L328	#,
	.loc 1 966 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.186
	movq	%rax, %rdi	# in.186,
	call	subreg_lowpart_p	#
	testl	%eax, %eax	# D.23555
	jne	.L329	#,
	.loc 1 966 0 is_stmt 0 discriminator 1
	cmpl	$0, 24(%rbp)	#, strict_low
	je	.L328	#,
.L329:
	.loc 1 971 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.187
	movq	8(%rax), %rax	# in.187_190->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _191->code, D.23548
	cmpw	$67, %ax	#, D.23548
	je	.L330	#,
	.loc 1 971 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.188
	movq	8(%rax), %rax	# in.188_193->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _194->code, D.23548
	cmpw	$68, %ax	#, D.23548
	je	.L330	#,
	movq	-152(%rbp), %rax	# in, in.189
	movq	8(%rax), %rax	# in.189_196->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _197->code, D.23548
	cmpw	$54, %ax	#, D.23548
	je	.L330	#,
	movq	-152(%rbp), %rax	# in, in.190
	movq	8(%rax), %rax	# in.190_199->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _200->code, D.23548
	cmpw	$55, %ax	#, D.23548
	je	.L330	#,
	movq	-152(%rbp), %rax	# in, in.191
	movq	8(%rax), %rax	# in.191_202->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _203->code, D.23548
	cmpw	$58, %ax	#, D.23548
	je	.L330	#,
	movq	-152(%rbp), %rax	# in, in.192
	movq	8(%rax), %rax	# in.192_205->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _206->code, D.23548
	cmpw	$134, %ax	#, D.23548
	je	.L330	#,
	movq	-152(%rbp), %rax	# in, in.193
	movq	8(%rax), %rax	# in.193_208->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _209->code, D.23548
	cmpw	$56, %ax	#, D.23548
	je	.L330	#,
	movq	-152(%rbp), %rax	# in, in.194
	movq	8(%rax), %rax	# in.194_211->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _212->code, D.23548
	cmpw	$140, %ax	#, D.23548
	je	.L330	#,
	.loc 1 972 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.195
	movq	8(%rax), %rax	# in.195_214->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _215->code, D.23548
	cmpw	$75, %ax	#, D.23548
	je	.L330	#,
	.loc 1 973 0
	cmpl	$0, 24(%rbp)	#, strict_low
	jne	.L330	#,
	.loc 1 974 0
	movq	-152(%rbp), %rax	# in, in.196
	movq	8(%rax), %rax	# in.196_217->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _218->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L331	#,
	.loc 1 975 0
	movq	-152(%rbp), %rax	# in, in.197
	movq	8(%rax), %rax	# in.197_220->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _221->fld[0].rtuint, D.23549
	cmpl	$52, %eax	#, D.23549
	ja	.L332	#,
.L331:
	.loc 1 976 0
	movq	-152(%rbp), %rax	# in, in.198
	movq	8(%rax), %rax	# in.198_223->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _224->code, D.23548
	cmpw	$66, %ax	#, D.23548
	jne	.L333	#,
.L332:
	.loc 1 977 0
	movl	-184(%rbp), %eax	# inmode, inmode.199
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23547
	.loc 1 978 0
	movq	-152(%rbp), %rax	# in, in.200
	movq	8(%rax), %rax	# in.200_228->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _229->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	.loc 1 977 0
	cmpb	%al, %dl	# D.23547, D.23547
	ja	.L330	#,
.L333:
	.loc 1 996 0
	movq	-152(%rbp), %rax	# in, in.201
	movq	8(%rax), %rax	# in.201_233->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _234->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L328	#,
	.loc 1 997 0
	movq	-152(%rbp), %rax	# in, in.202
	movq	8(%rax), %rax	# in.202_236->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _237->fld[0].rtuint, D.23549
	cmpl	$52, %eax	#, D.23549
	ja	.L328	#,
	.loc 1 1000 0
	cmpq	$0, -160(%rbp)	#, out
	je	.L334	#,
	.loc 1 1000 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.203
	movq	%rax, %rdi	# in.203,
	call	subreg_lowpart_p	#
	testl	%eax, %eax	# D.23555
	je	.L328	#,
.L334:
	.loc 1 1001 0 is_stmt 1
	movl	-184(%rbp), %eax	# inmode, inmode.204
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.206
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L335	#,
	.loc 1 1001 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.205
	jmp	.L336	#
.L335:
	.loc 1 1001 0 discriminator 2
	movl	$4, %eax	#, iftmp.205
.L336:
	.loc 1 1001 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.205, D.23555
	jg	.L337	#,
	.loc 1 1002 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.207
	movq	8(%rax), %rax	# in.207_248->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _249->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	.loc 1 1003 0
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.209
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L338	#,
	.loc 1 1003 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.208
	jmp	.L339	#
.L338:
	.loc 1 1003 0 discriminator 2
	movl	$4, %eax	#, iftmp.208
.L339:
	.loc 1 1002 0 is_stmt 1
	cmpl	%eax, %edx	# iftmp.208, D.23555
	jle	.L337	#,
	.loc 1 1004 0
	movq	-152(%rbp), %rax	# in, in.210
	movq	8(%rax), %rax	# in.210_258->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _259->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	.loc 1 1005 0
	movzbl	%al, %eax	# D.23547, D.23555
	movl	target_flags(%rip), %edx	# target_flags, target_flags.212
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L340	#,
	.loc 1 1005 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.211
	jmp	.L341	#
.L340:
	.loc 1 1005 0 discriminator 2
	movl	$4, %ebx	#, iftmp.211
.L341:
	.loc 1 1005 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.211
	movl	%eax, %ecx	# tmp852, D.23555
	.loc 1 1006 0 is_stmt 1 discriminator 3
	movq	-152(%rbp), %rax	# in, in.214
	movq	8(%rax), %rax	# in.214_269->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _270->fld[0].rtuint, D.23549
	cmpl	$7, %eax	#, D.23549
	jbe	.L342	#,
	.loc 1 1006 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.215
	movq	8(%rax), %rax	# in.215_272->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _273->fld[0].rtuint, D.23549
	cmpl	$15, %eax	#, D.23549
	jbe	.L343	#,
.L342:
	.loc 1 1006 0 discriminator 2
	movq	-152(%rbp), %rax	# in, in.216
	movq	8(%rax), %rax	# in.216_275->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _276->fld[0].rtuint, D.23549
	cmpl	$20, %eax	#, D.23549
	jbe	.L344	#,
	.loc 1 1006 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.217
	movq	8(%rax), %rax	# in.217_278->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _279->fld[0].rtuint, D.23549
	cmpl	$28, %eax	#, D.23549
	jbe	.L343	#,
.L344:
	.loc 1 1006 0 discriminator 2
	movq	-152(%rbp), %rax	# in, in.218
	movq	8(%rax), %rax	# in.218_281->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _282->fld[0].rtuint, D.23549
	cmpl	$44, %eax	#, D.23549
	jbe	.L345	#,
	.loc 1 1006 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.219
	movq	8(%rax), %rax	# in.219_284->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _285->fld[0].rtuint, D.23549
	cmpl	$52, %eax	#, D.23549
	jbe	.L343	#,
.L345:
	.loc 1 1006 0 discriminator 2
	movq	-152(%rbp), %rax	# in, in.220
	movq	8(%rax), %rax	# in.220_287->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _288->fld[0].rtuint, D.23549
	cmpl	$28, %eax	#, D.23549
	jbe	.L346	#,
	.loc 1 1006 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.221
	movq	8(%rax), %rax	# in.221_290->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _291->fld[0].rtuint, D.23549
	cmpl	$36, %eax	#, D.23549
	ja	.L346	#,
.L343:
	movq	-152(%rbp), %rax	# in, in.223
	movq	8(%rax), %rax	# in.223_328->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _329->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$5, %eax	#, D.23556
	je	.L347	#,
	.loc 1 1006 0 discriminator 2
	movq	-152(%rbp), %rax	# in, in.224
	movq	8(%rax), %rax	# in.224_333->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _334->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$6, %eax	#, D.23556
	jne	.L348	#,
.L347:
	.loc 1 1006 0 discriminator 1
	movl	$2, %eax	#, iftmp.222
	jmp	.L349	#
.L348:
	movl	$1, %eax	#, iftmp.222
.L349:
	.loc 1 1006 0 discriminator 3
	jmp	.L350	#
.L346:
	.loc 1 1006 0 discriminator 2
	movq	-152(%rbp), %rax	# in, in.226
	movq	8(%rax), %rax	# in.226_293->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _294->mode, D.23547
	cmpb	$18, %al	#, D.23547
	jne	.L351	#,
	.loc 1 1006 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.228
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L352	#,
	movl	$2, %eax	#, iftmp.227
	jmp	.L350	#
.L352:
	.loc 1 1006 0 discriminator 2
	movl	$3, %eax	#, iftmp.227
	jmp	.L350	#
.L351:
	movq	-152(%rbp), %rax	# in, in.230
	movq	8(%rax), %rax	# in.230_301->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _302->mode, D.23547
	cmpb	$24, %al	#, D.23547
	jne	.L355	#,
	.loc 1 1006 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.232
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L356	#,
	movl	$4, %eax	#, iftmp.231
	jmp	.L350	#
.L356:
	.loc 1 1006 0 discriminator 2
	movl	$6, %eax	#, iftmp.231
	jmp	.L350	#
.L355:
	movq	-152(%rbp), %rax	# in, in.233
	movq	8(%rax), %rax	# in.233_309->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _310->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.235
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L359	#,
	.loc 1 1006 0 discriminator 1
	movl	$8, %eax	#, iftmp.234
	jmp	.L360	#
.L359:
	.loc 1 1006 0 discriminator 2
	movl	$4, %eax	#, iftmp.234
.L360:
	.loc 1 1006 0 discriminator 3
	addl	%edx, %eax	# D.23555, D.23555
	subl	$1, %eax	#, D.23555
	movl	target_flags(%rip), %edx	# target_flags, target_flags.237
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L361	#,
	.loc 1 1006 0 discriminator 1
	movl	$8, %ebx	#, iftmp.236
	jmp	.L362	#
.L361:
	.loc 1 1006 0 discriminator 2
	movl	$4, %ebx	#, iftmp.236
.L362:
	.loc 1 1006 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.236
.L350:
	.loc 1 1004 0 is_stmt 1
	cmpl	%eax, %ecx	# iftmp.213, D.23555
	jne	.L330	#,
.L337:
	.loc 1 1008 0
	movq	-152(%rbp), %rax	# in, in.238
	movq	%rax, %rdi	# in.238,
	call	subreg_regno	#
	movl	-184(%rbp), %edx	# inmode, tmp859
	movl	%edx, %esi	# tmp859,
	movl	%eax, %edi	# D.23555,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23555
	jne	.L328	#,
.L330:
	.loc 1 1027 0
	movq	-168(%rbp), %rax	# inloc, tmp860
	movq	%rax, -64(%rbp)	# tmp860, in_subreg_loc
	.loc 1 1028 0
	movq	-152(%rbp), %rax	# in, in.239
	addq	$8, %rax	#, tmp861
	movq	%rax, -168(%rbp)	# tmp861, inloc
	.loc 1 1029 0
	movq	-168(%rbp), %rax	# inloc, tmp862
	movq	(%rax), %rax	# *inloc_347, in.240
	movq	%rax, -152(%rbp)	# in.240, in
	.loc 1 1031 0
	movq	-152(%rbp), %rax	# in, in.241
	movzwl	(%rax), %eax	# in.241_349->code, D.23548
	cmpw	$66, %ax	#, D.23548
	jne	.L363	#,
	.loc 1 1034 0
	movq	-152(%rbp), %rax	# in, in.242
	movzbl	2(%rax), %eax	# in.242_351->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23547
	movl	-184(%rbp), %eax	# inmode, inmode.243
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	cmpb	%al, %dl	# D.23547, D.23547
	jbe	.L363	#,
	.loc 1 1035 0
	movl	$__FUNCTION__.11668, %edx	#,
	movl	$1035, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L363:
	.loc 1 1037 0
	movq	-152(%rbp), %rax	# in, in.244
	movzbl	2(%rax), %eax	# in.244_357->mode, D.23547
	movzbl	%al, %eax	# D.23547, tmp865
	movl	%eax, -184(%rbp)	# tmp865, inmode
.L328:
	.loc 1 1050 0
	movq	-152(%rbp), %rax	# in, in.245
	testq	%rax, %rax	# in.245
	je	.L364	#,
	.loc 1 1050 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.246
	movl	-184(%rbp), %edx	# inmode, tmp866
	movl	%edx, %esi	# tmp866,
	movq	%rax, %rdi	# in.246,
	call	reload_inner_reg_of_subreg	#
	testl	%eax, %eax	# D.23555
	je	.L364	#,
.LBB8:
	.loc 1 1052 0 is_stmt 1
	movl	-180(%rbp), %eax	# class, tmp867
	movl	%eax, -112(%rbp)	# tmp867, in_class
	.loc 1 1054 0
	movq	-152(%rbp), %rax	# in, in.247
	movq	8(%rax), %rax	# in.247_365->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _366->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L365	#,
	.loc 1 1061 0
	movq	-152(%rbp), %rax	# in, in.248
	movq	8(%rax), %rax	# in.248_368->fld[0].rtx, D.23554
	.loc 1 1056 0
	movl	8(%rax), %ebx	# _369->fld[0].rtuint, D.23549
	.loc 1 1060 0
	movq	-152(%rbp), %rax	# in, in.249
	movzbl	2(%rax), %eax	# in.249_371->mode, D.23547
	.loc 1 1057 0
	movzbl	%al, %ecx	# D.23547, D.23557
	.loc 1 1059 0
	movq	-152(%rbp), %rax	# in, in.250
	.loc 1 1057 0
	movl	16(%rax), %edx	# in.250_374->fld[1].rtuint, D.23549
	.loc 1 1058 0
	movq	-152(%rbp), %rax	# in, in.251
	movq	8(%rax), %rax	# in.251_376->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _377->mode, D.23547
	.loc 1 1057 0
	movzbl	%al, %esi	# D.23547, D.23557
	movq	-152(%rbp), %rax	# in, in.252
	movq	8(%rax), %rax	# in.252_380->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _381->fld[0].rtuint, D.23549
	movl	%eax, %edi	# D.23549,
	call	subreg_regno_offset	#
	.loc 1 1056 0
	movl	%eax, %ecx	# D.23549, D.23555
	movl	-184(%rbp), %eax	# inmode, tmp868
	movl	%ebx, %edx	# D.23549,
	movl	%ecx, %esi	# D.23555,
	movl	%eax, %edi	# tmp868,
	call	find_valid_class	#
	movl	%eax, -112(%rbp)	# tmp869, in_class
.L365:
	.loc 1 1068 0
	movq	-152(%rbp), %rax	# in, in.253
	leaq	8(%rax), %rsi	#, D.23553
	movq	-152(%rbp), %rax	# in, in.254
	movq	8(%rax), %rax	# in.254_388->fld[0].rtx, D.23554
	movl	-112(%rbp), %ecx	# in_class, tmp870
	movl	48(%rbp), %edx	# type, tmp871
	movl	%edx, 32(%rsp)	# tmp871,
	movl	40(%rbp), %edx	# opnum, tmp872
	movl	%edx, 24(%rsp)	# tmp872,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	%ecx, %r8d	# tmp870,
	movl	$0, %ecx	#,
	movq	%rsi, %rdx	# D.23553,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23554,
	call	push_reload	#
	.loc 1 1070 0
	movl	$1, -120(%rbp)	#, dont_remove_subreg
.L364:
.LBE8:
	.loc 1 1079 0
	cmpq	$0, -160(%rbp)	#, out
	je	.L366	#,
	.loc 1 1079 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp873
	movzwl	(%rax), %eax	# out_2->code, D.23548
	cmpw	$63, %ax	#, D.23548
	jne	.L366	#,
	.loc 1 1080 0 is_stmt 1
	movq	-160(%rbp), %rax	# out, tmp874
	movq	%rax, %rdi	# tmp874,
	call	subreg_lowpart_p	#
	testl	%eax, %eax	# D.23555
	jne	.L367	#,
	.loc 1 1080 0 is_stmt 0 discriminator 1
	cmpl	$0, 24(%rbp)	#, strict_low
	je	.L366	#,
.L367:
	.loc 1 1086 0 is_stmt 1
	movq	-160(%rbp), %rax	# out, tmp875
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _396->code, D.23548
	cmpw	$67, %ax	#, D.23548
	je	.L368	#,
	.loc 1 1086 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp876
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _398->code, D.23548
	cmpw	$68, %ax	#, D.23548
	je	.L368	#,
	movq	-160(%rbp), %rax	# out, tmp877
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _400->code, D.23548
	cmpw	$54, %ax	#, D.23548
	je	.L368	#,
	movq	-160(%rbp), %rax	# out, tmp878
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _402->code, D.23548
	cmpw	$55, %ax	#, D.23548
	je	.L368	#,
	movq	-160(%rbp), %rax	# out, tmp879
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _404->code, D.23548
	cmpw	$58, %ax	#, D.23548
	je	.L368	#,
	movq	-160(%rbp), %rax	# out, tmp880
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _406->code, D.23548
	cmpw	$134, %ax	#, D.23548
	je	.L368	#,
	movq	-160(%rbp), %rax	# out, tmp881
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _408->code, D.23548
	cmpw	$56, %ax	#, D.23548
	je	.L368	#,
	movq	-160(%rbp), %rax	# out, tmp882
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _410->code, D.23548
	cmpw	$140, %ax	#, D.23548
	je	.L368	#,
	.loc 1 1087 0 is_stmt 1
	cmpl	$0, 24(%rbp)	#, strict_low
	jne	.L368	#,
	.loc 1 1088 0
	movq	-160(%rbp), %rax	# out, tmp883
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _412->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L369	#,
	.loc 1 1089 0
	movq	-160(%rbp), %rax	# out, tmp884
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _414->fld[0].rtuint, D.23549
	cmpl	$52, %eax	#, D.23549
	ja	.L370	#,
.L369:
	.loc 1 1090 0
	movq	-160(%rbp), %rax	# out, tmp885
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _416->code, D.23548
	cmpw	$66, %ax	#, D.23548
	jne	.L371	#,
.L370:
	.loc 1 1091 0
	movl	16(%rbp), %eax	# outmode, outmode.255
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23547
	.loc 1 1092 0
	movq	-160(%rbp), %rax	# out, tmp887
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _420->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	.loc 1 1091 0
	cmpb	%al, %dl	# D.23547, D.23547
	ja	.L368	#,
.L371:
	.loc 1 1101 0
	movq	-160(%rbp), %rax	# out, tmp889
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _424->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L372	#,
	.loc 1 1102 0
	movq	-160(%rbp), %rax	# out, tmp890
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _426->fld[0].rtuint, D.23549
	cmpl	$52, %eax	#, D.23549
	ja	.L372	#,
	.loc 1 1103 0
	movl	16(%rbp), %eax	# outmode, outmode.256
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.258
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L373	#,
	.loc 1 1103 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.257
	jmp	.L374	#
.L373:
	.loc 1 1103 0 discriminator 2
	movl	$4, %eax	#, iftmp.257
.L374:
	.loc 1 1103 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.257, D.23555
	jg	.L375	#,
	.loc 1 1104 0 is_stmt 1
	movq	-160(%rbp), %rax	# out, tmp892
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _435->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	.loc 1 1105 0
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.260
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L376	#,
	.loc 1 1105 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.259
	jmp	.L377	#
.L376:
	.loc 1 1105 0 discriminator 2
	movl	$4, %eax	#, iftmp.259
.L377:
	.loc 1 1104 0 is_stmt 1
	cmpl	%eax, %edx	# iftmp.259, D.23555
	jle	.L375	#,
	.loc 1 1106 0
	movq	-160(%rbp), %rax	# out, tmp894
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _444->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	.loc 1 1107 0
	movzbl	%al, %eax	# D.23547, D.23555
	movl	target_flags(%rip), %edx	# target_flags, target_flags.262
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L378	#,
	.loc 1 1107 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.261
	jmp	.L379	#
.L378:
	.loc 1 1107 0 discriminator 2
	movl	$4, %ebx	#, iftmp.261
.L379:
	.loc 1 1107 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.261
	movl	%eax, %ecx	# tmp896, D.23555
	.loc 1 1108 0 is_stmt 1 discriminator 3
	movq	-160(%rbp), %rax	# out, tmp898
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _454->fld[0].rtuint, D.23549
	cmpl	$7, %eax	#, D.23549
	jbe	.L380	#,
	.loc 1 1108 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp899
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _456->fld[0].rtuint, D.23549
	cmpl	$15, %eax	#, D.23549
	jbe	.L381	#,
.L380:
	.loc 1 1108 0 discriminator 2
	movq	-160(%rbp), %rax	# out, tmp900
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _458->fld[0].rtuint, D.23549
	cmpl	$20, %eax	#, D.23549
	jbe	.L382	#,
	.loc 1 1108 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp901
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _460->fld[0].rtuint, D.23549
	cmpl	$28, %eax	#, D.23549
	jbe	.L381	#,
.L382:
	.loc 1 1108 0 discriminator 2
	movq	-160(%rbp), %rax	# out, tmp902
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _462->fld[0].rtuint, D.23549
	cmpl	$44, %eax	#, D.23549
	jbe	.L383	#,
	.loc 1 1108 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp903
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _464->fld[0].rtuint, D.23549
	cmpl	$52, %eax	#, D.23549
	jbe	.L381	#,
.L383:
	.loc 1 1108 0 discriminator 2
	movq	-160(%rbp), %rax	# out, tmp904
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _466->fld[0].rtuint, D.23549
	cmpl	$28, %eax	#, D.23549
	jbe	.L384	#,
	.loc 1 1108 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp905
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _468->fld[0].rtuint, D.23549
	cmpl	$36, %eax	#, D.23549
	ja	.L384	#,
.L381:
	movq	-160(%rbp), %rax	# out, tmp906
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _502->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$5, %eax	#, D.23556
	je	.L385	#,
	.loc 1 1108 0 discriminator 2
	movq	-160(%rbp), %rax	# out, tmp908
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _506->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$6, %eax	#, D.23556
	jne	.L386	#,
.L385:
	.loc 1 1108 0 discriminator 1
	movl	$2, %eax	#, iftmp.264
	jmp	.L387	#
.L386:
	movl	$1, %eax	#, iftmp.264
.L387:
	.loc 1 1108 0 discriminator 3
	jmp	.L388	#
.L384:
	.loc 1 1108 0 discriminator 2
	movq	-160(%rbp), %rax	# out, tmp910
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _470->mode, D.23547
	cmpb	$18, %al	#, D.23547
	jne	.L389	#,
	.loc 1 1108 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.267
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L390	#,
	movl	$2, %eax	#, iftmp.266
	jmp	.L388	#
.L390:
	.loc 1 1108 0 discriminator 2
	movl	$3, %eax	#, iftmp.266
	jmp	.L388	#
.L389:
	movq	-160(%rbp), %rax	# out, tmp911
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _477->mode, D.23547
	cmpb	$24, %al	#, D.23547
	jne	.L393	#,
	.loc 1 1108 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.270
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L394	#,
	movl	$4, %eax	#, iftmp.269
	jmp	.L388	#
.L394:
	.loc 1 1108 0 discriminator 2
	movl	$6, %eax	#, iftmp.269
	jmp	.L388	#
.L393:
	movq	-160(%rbp), %rax	# out, tmp912
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _484->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.272
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L397	#,
	.loc 1 1108 0 discriminator 1
	movl	$8, %eax	#, iftmp.271
	jmp	.L398	#
.L397:
	.loc 1 1108 0 discriminator 2
	movl	$4, %eax	#, iftmp.271
.L398:
	.loc 1 1108 0 discriminator 3
	addl	%edx, %eax	# D.23555, D.23555
	subl	$1, %eax	#, D.23555
	movl	target_flags(%rip), %edx	# target_flags, target_flags.274
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L399	#,
	.loc 1 1108 0 discriminator 1
	movl	$8, %ebx	#, iftmp.273
	jmp	.L400	#
.L399:
	.loc 1 1108 0 discriminator 2
	movl	$4, %ebx	#, iftmp.273
.L400:
	.loc 1 1108 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.273
.L388:
	.loc 1 1106 0 is_stmt 1
	cmpl	%eax, %ecx	# iftmp.263, D.23555
	jne	.L368	#,
.L375:
	.loc 1 1110 0
	movq	-160(%rbp), %rax	# out, tmp916
	movq	%rax, %rdi	# tmp916,
	call	subreg_regno	#
	movl	16(%rbp), %esi	# outmode,
	movl	%eax, %edi	# D.23555,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23555
	je	.L368	#,
.L372:
	.loc 1 1112 0
	cmpl	$12, -180(%rbp)	#, class
	je	.L401	#,
	.loc 1 1112 0 is_stmt 0 discriminator 2
	cmpl	$11, -180(%rbp)	#, class
	je	.L401	#,
	.loc 1 1112 0 discriminator 1
	cmpl	$10, -180(%rbp)	#, class
	jne	.L366	#,
.L401:
	movl	target_flags(%rip), %eax	# target_flags, target_flags.275
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	jne	.L366	#,
	cmpl	$2, 16(%rbp)	#, outmode
	jne	.L366	#,
	.loc 1 1113 0 is_stmt 1
	cmpl	$12, -180(%rbp)	#, class
	je	.L402	#,
	.loc 1 1113 0 is_stmt 0 discriminator 1
	cmpl	$11, -180(%rbp)	#, class
	je	.L402	#,
	cmpl	$10, -180(%rbp)	#, class
	jne	.L368	#,
.L402:
	.loc 1 1113 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.276
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	jne	.L368	#,
	.loc 1 1113 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp917
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _520->mode, D.23547
	.loc 1 1116 0 is_stmt 1 discriminator 1
	cmpb	$2, %al	#, D.23547
	je	.L366	#,
.L368:
	.loc 1 1129 0
	movq	-176(%rbp), %rax	# outloc, tmp918
	movq	%rax, -56(%rbp)	# tmp918, out_subreg_loc
	.loc 1 1130 0
	movq	-160(%rbp), %rax	# out, tmp922
	addq	$8, %rax	#, tmp921
	movq	%rax, -176(%rbp)	# tmp921, outloc
	.loc 1 1131 0
	movq	-176(%rbp), %rax	# outloc, tmp923
	movq	(%rax), %rax	# *outloc_523, tmp924
	movq	%rax, -160(%rbp)	# tmp924, out
	.loc 1 1133 0
	movq	-160(%rbp), %rax	# out, tmp925
	movzwl	(%rax), %eax	# out_524->code, D.23548
	cmpw	$66, %ax	#, D.23548
	jne	.L403	#,
	.loc 1 1134 0
	movq	-160(%rbp), %rax	# out, tmp926
	movzbl	2(%rax), %eax	# out_524->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23547
	movl	16(%rbp), %eax	# outmode, outmode.277
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	cmpb	%al, %dl	# D.23547, D.23547
	jbe	.L403	#,
	.loc 1 1135 0
	movl	$__FUNCTION__.11668, %edx	#,
	movl	$1135, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L403:
	.loc 1 1137 0
	movq	-160(%rbp), %rax	# out, tmp929
	movzbl	2(%rax), %eax	# out_524->mode, D.23547
	movzbl	%al, %eax	# D.23547, tmp930
	movl	%eax, 16(%rbp)	# tmp930, outmode
.L366:
	.loc 1 1147 0
	cmpq	$0, -160(%rbp)	#, out
	je	.L404	#,
	.loc 1 1147 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp931
	movl	16(%rbp), %esi	# outmode,
	movq	%rax, %rdi	# tmp931,
	call	reload_inner_reg_of_subreg	#
	testl	%eax, %eax	# D.23555
	je	.L404	#,
	.loc 1 1154 0 is_stmt 1
	movl	$1, -120(%rbp)	#, dont_remove_subreg
	.loc 1 1162 0
	movq	-160(%rbp), %rax	# out, tmp932
	movq	8(%rax), %rax	# out_3->fld[0].rtx, D.23554
	.loc 1 1155 0
	movl	8(%rax), %ebx	# _535->fld[0].rtuint, D.23549
	.loc 1 1161 0
	movq	-160(%rbp), %rax	# out, tmp933
	movzbl	2(%rax), %eax	# out_3->mode, D.23547
	.loc 1 1158 0
	movzbl	%al, %ecx	# D.23547, D.23557
	movq	-160(%rbp), %rax	# out, tmp934
	movl	16(%rax), %edx	# out_3->fld[1].rtuint, D.23549
	.loc 1 1159 0
	movq	-160(%rbp), %rax	# out, tmp935
	movq	8(%rax), %rax	# out_3->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _540->mode, D.23547
	.loc 1 1158 0
	movzbl	%al, %esi	# D.23547, D.23557
	movq	-160(%rbp), %rax	# out, tmp936
	movq	8(%rax), %rax	# out_3->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _543->fld[0].rtuint, D.23549
	movl	%eax, %edi	# D.23549,
	call	subreg_regno_offset	#
	.loc 1 1155 0
	movl	%ebx, %edx	# D.23549,
	movl	%eax, %esi	# D.23555,
	movl	16(%rbp), %edi	# outmode,
	call	find_valid_class	#
	movl	%eax, %edx	#, D.23558
	movq	-160(%rbp), %rax	# out, tmp937
	leaq	8(%rax), %r10	#, D.23553
	movq	-160(%rbp), %rax	# out, tmp938
	leaq	8(%rax), %rdi	#, D.23553
	movq	-160(%rbp), %rax	# out, tmp939
	movq	8(%rax), %rsi	# out_3->fld[0].rtx, D.23554
	movq	-160(%rbp), %rax	# out, tmp940
	movq	8(%rax), %rax	# out_3->fld[0].rtx, D.23554
	movl	$9, 32(%rsp)	#,
	movl	40(%rbp), %ecx	# opnum, tmp941
	movl	%ecx, 24(%rsp)	# tmp941,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	%edx, %r8d	# D.23558,
	movq	%r10, %rcx	# D.23553,
	movq	%rdi, %rdx	# D.23553,
	movq	%rax, %rdi	# D.23554,
	call	push_reload	#
.L404:
	.loc 1 1168 0
	movq	-152(%rbp), %rax	# in, in.278
	testq	%rax, %rax	# in.278
	je	.L405	#,
	.loc 1 1168 0 is_stmt 0 discriminator 1
	cmpq	$0, -160(%rbp)	#, out
	je	.L405	#,
	movq	-160(%rbp), %rax	# out, tmp942
	movzwl	(%rax), %eax	# out_3->code, D.23548
	cmpw	$66, %ax	#, D.23548
	jne	.L405	#,
	.loc 1 1169 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.279
	movzwl	(%rax), %eax	# in.279_554->code, D.23548
	cmpw	$61, %ax	#, D.23548
	je	.L406	#,
	.loc 1 1169 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.280
	movzwl	(%rax), %eax	# in.280_556->code, D.23548
	cmpw	$66, %ax	#, D.23548
	jne	.L405	#,
.L406:
	.loc 1 1170 0 is_stmt 1
	movq	-160(%rbp), %rax	# out, tmp943
	movq	8(%rax), %rdx	# out_3->fld[0].rtx, D.23554
	movq	-152(%rbp), %rax	# in, in.281
	movq	%rdx, %rsi	# D.23554,
	movq	%rax, %rdi	# in.281,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.23555
	je	.L405	#,
	.loc 1 1171 0
	movl	$1, -124(%rbp)	#, dont_share
.L405:
	.loc 1 1176 0
	movq	-152(%rbp), %rax	# in, in.282
	testq	%rax, %rax	# in.282
	je	.L407	#,
	.loc 1 1176 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.283
	movzwl	(%rax), %eax	# in.283_563->code, D.23548
	cmpw	$63, %ax	#, D.23548
	jne	.L407	#,
	movq	-152(%rbp), %rax	# in, in.284
	movq	8(%rax), %rax	# in.284_565->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _566->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L407	#,
	.loc 1 1177 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.285
	movq	8(%rax), %rax	# in.285_568->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _569->fld[0].rtuint, D.23549
	cmpl	$52, %eax	#, D.23549
	ja	.L407	#,
	.loc 1 1178 0
	cmpl	$0, -120(%rbp)	#, dont_remove_subreg
	jne	.L407	#,
	.loc 1 1179 0
	movq	-152(%rbp), %rax	# in, in.286
	movq	%rax, %rdi	# in.286,
	call	subreg_regno	#
	movl	%eax, %edx	# D.23549, D.23555
	movq	-152(%rbp), %rax	# in, in.287
	movzbl	2(%rax), %eax	# in.287_574->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23557
	movl	%edx, %esi	# D.23555,
	movl	%eax, %edi	# D.23557,
	call	gen_rtx_REG	#
	movq	%rax, -152(%rbp)	# in.288, in
.L407:
	.loc 1 1182 0
	cmpq	$0, -160(%rbp)	#, out
	je	.L408	#,
	.loc 1 1182 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp944
	movzwl	(%rax), %eax	# out_3->code, D.23548
	cmpw	$63, %ax	#, D.23548
	jne	.L408	#,
	.loc 1 1183 0 is_stmt 1
	movq	-160(%rbp), %rax	# out, tmp945
	movq	8(%rax), %rax	# out_3->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _579->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L408	#,
	.loc 1 1184 0
	movq	-160(%rbp), %rax	# out, tmp946
	movq	8(%rax), %rax	# out_3->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _581->fld[0].rtuint, D.23549
	cmpl	$52, %eax	#, D.23549
	ja	.L408	#,
	.loc 1 1185 0
	cmpl	$0, -120(%rbp)	#, dont_remove_subreg
	jne	.L408	#,
	.loc 1 1186 0
	movq	-160(%rbp), %rax	# out, tmp947
	movq	%rax, %rdi	# tmp947,
	call	subreg_regno	#
	movl	%eax, %edx	# D.23549, D.23555
	movq	-160(%rbp), %rax	# out, tmp948
	movzbl	2(%rax), %eax	# out_3->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23557
	movl	%edx, %esi	# D.23555,
	movl	%eax, %edi	# D.23557,
	call	gen_rtx_REG	#
	movq	%rax, -160(%rbp)	# tmp949, out
.L408:
	.loc 1 1190 0
	movq	-152(%rbp), %rax	# in, in.289
	testq	%rax, %rax	# in.289
	je	.L409	#,
	.loc 1 1191 0
	movq	-152(%rbp), %rax	# in, in.290
	movl	-180(%rbp), %edx	# class, tmp950
	movl	%edx, %esi	# tmp950,
	movq	%rax, %rdi	# in.290,
	call	ix86_preferred_reload_class	#
	movl	%eax, -180(%rbp)	# tmp951, class
.L409:
	.loc 1 1204 0
	cmpq	$0, -64(%rbp)	#, in_subreg_loc
	je	.L410	#,
	.loc 1 1205 0
	cmpl	$2, -184(%rbp)	#, inmode
	jne	.L411	#,
	.loc 1 1205 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.292
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	jne	.L411	#,
	.loc 1 1205 0 discriminator 1
	cmpl	$24, -180(%rbp)	#, class
	je	.L412	#,
	cmpl	$12, -180(%rbp)	#, class
	je	.L412	#,
	cmpl	$11, -180(%rbp)	#, class
	je	.L412	#,
	cmpl	$10, -180(%rbp)	#, class
	je	.L412	#,
.L411:
	movl	-180(%rbp), %eax	# class, iftmp.291
	jmp	.L413	#
.L412:
	.loc 1 1205 0 discriminator 2
	movl	$8, %eax	#, iftmp.291
.L413:
	.loc 1 1205 0 discriminator 3
	movl	%eax, -180(%rbp)	# iftmp.291, class
	jmp	.L414	#
.L410:
	.loc 1 1206 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.293
	testq	%rax, %rax	# in.293
	je	.L414	#,
	.loc 1 1206 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.294
	movzwl	(%rax), %eax	# in.294_597->code, D.23548
	cmpw	$63, %ax	#, D.23548
	jne	.L414	#,
	.loc 1 1207 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.296
	movq	8(%rax), %rax	# in.296_599->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _600->mode, D.23547
	cmpb	$2, %al	#, D.23547
	jne	.L415	#,
	.loc 1 1207 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.297
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	jne	.L415	#,
	.loc 1 1207 0 discriminator 1
	cmpl	$24, -180(%rbp)	#, class
	je	.L416	#,
	cmpl	$12, -180(%rbp)	#, class
	je	.L416	#,
	cmpl	$11, -180(%rbp)	#, class
	je	.L416	#,
	cmpl	$10, -180(%rbp)	#, class
	je	.L416	#,
.L415:
	movl	-180(%rbp), %eax	# class, iftmp.295
	jmp	.L417	#
.L416:
	.loc 1 1207 0 discriminator 2
	movl	$8, %eax	#, iftmp.295
.L417:
	.loc 1 1207 0 discriminator 3
	movl	%eax, -180(%rbp)	# iftmp.295, class
.L414:
	.loc 1 1209 0 is_stmt 1
	cmpq	$0, -56(%rbp)	#, out_subreg_loc
	je	.L418	#,
	.loc 1 1210 0
	cmpl	$2, 16(%rbp)	#, outmode
	jne	.L419	#,
	.loc 1 1210 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.299
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	jne	.L419	#,
	.loc 1 1210 0 discriminator 1
	cmpl	$24, -180(%rbp)	#, class
	je	.L420	#,
	cmpl	$12, -180(%rbp)	#, class
	je	.L420	#,
	cmpl	$11, -180(%rbp)	#, class
	je	.L420	#,
	cmpl	$10, -180(%rbp)	#, class
	je	.L420	#,
.L419:
	movl	-180(%rbp), %eax	# class, iftmp.298
	jmp	.L421	#
.L420:
	.loc 1 1210 0 discriminator 2
	movl	$8, %eax	#, iftmp.298
.L421:
	.loc 1 1210 0 discriminator 3
	movl	%eax, -180(%rbp)	# iftmp.298, class
.L418:
	.loc 1 1211 0 is_stmt 1
	cmpq	$0, -160(%rbp)	#, out
	je	.L422	#,
	.loc 1 1211 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp952
	movzwl	(%rax), %eax	# out_4->code, D.23548
	cmpw	$63, %ax	#, D.23548
	jne	.L422	#,
	.loc 1 1212 0 is_stmt 1
	movq	-160(%rbp), %rax	# out, tmp953
	movq	8(%rax), %rax	# out_4->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _613->mode, D.23547
	cmpb	$2, %al	#, D.23547
	jne	.L423	#,
	.loc 1 1212 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.301
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	jne	.L423	#,
	.loc 1 1212 0 discriminator 1
	cmpl	$24, -180(%rbp)	#, class
	je	.L424	#,
	cmpl	$12, -180(%rbp)	#, class
	je	.L424	#,
	cmpl	$11, -180(%rbp)	#, class
	je	.L424	#,
	cmpl	$10, -180(%rbp)	#, class
	je	.L424	#,
.L423:
	movl	-180(%rbp), %eax	# class, iftmp.300
	jmp	.L425	#
.L424:
	.loc 1 1212 0 discriminator 2
	movl	$8, %eax	#, iftmp.300
.L425:
	.loc 1 1212 0 discriminator 3
	movl	%eax, -180(%rbp)	# iftmp.300, class
.L422:
	.loc 1 1217 0 is_stmt 1
	movl	this_insn_is_asm(%rip), %eax	# this_insn_is_asm, this_insn_is_asm.302
	testl	%eax, %eax	# this_insn_is_asm.302
	je	.L426	#,
.LBB9:
	.loc 1 1220 0
	movl	-184(%rbp), %eax	# inmode, inmode.303
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23547
	movl	16(%rbp), %eax	# outmode, outmode.304
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	cmpb	%al, %dl	# D.23547, D.23547
	jbe	.L427	#,
	.loc 1 1221 0
	movl	-184(%rbp), %eax	# inmode, tmp956
	movl	%eax, -108(%rbp)	# tmp956, mode
	jmp	.L428	#
.L427:
	.loc 1 1223 0
	movl	16(%rbp), %eax	# outmode, tmp957
	movl	%eax, -108(%rbp)	# tmp957, mode
.L428:
	.loc 1 1224 0
	cmpl	$0, -108(%rbp)	#, mode
	jne	.L429	#,
	.loc 1 1226 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.305
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# this_insn.305,
	movl	$0, %eax	#,
	call	error_for_asm	#
	.loc 1 1227 0
	movl	word_mode(%rip), %eax	# word_mode, tmp958
	movl	%eax, -108(%rbp)	# tmp958, mode
	.loc 1 1228 0
	movq	-152(%rbp), %rax	# in, in.306
	testq	%rax, %rax	# in.306
	je	.L430	#,
	.loc 1 1229 0
	movl	word_mode(%rip), %eax	# word_mode, tmp959
	movl	%eax, -184(%rbp)	# tmp959, inmode
.L430:
	.loc 1 1230 0
	cmpq	$0, -160(%rbp)	#, out
	je	.L429	#,
	.loc 1 1231 0
	movl	word_mode(%rip), %eax	# word_mode, tmp960
	movl	%eax, 16(%rbp)	# tmp960, outmode
.L429:
	.loc 1 1233 0
	movl	$0, -128(%rbp)	#, i
	jmp	.L431	#
.L459:
	.loc 1 1234 0
	movl	-108(%rbp), %edx	# mode, tmp961
	movl	-128(%rbp), %eax	# i, tmp962
	movl	%edx, %esi	# tmp961,
	movl	%eax, %edi	# tmp962,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23555
	je	.L432	#,
	.loc 1 1235 0
	movl	-180(%rbp), %eax	# class, class.307
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23550
	movl	-128(%rbp), %eax	# i, tmp964
	movl	%eax, %ecx	# tmp964, tmp1407
	shrq	%cl, %rdx	# tmp1407, D.23550
	movq	%rdx, %rax	# D.23550, D.23550
	andl	$1, %eax	#, D.23550
	testq	%rax, %rax	# D.23550
	je	.L432	#,
.LBB10:
	.loc 1 1237 0
	cmpl	$7, -128(%rbp)	#, i
	jle	.L433	#,
	.loc 1 1237 0 is_stmt 0 discriminator 1
	cmpl	$15, -128(%rbp)	#, i
	jle	.L434	#,
.L433:
	.loc 1 1237 0 discriminator 2
	cmpl	$20, -128(%rbp)	#, i
	jle	.L435	#,
	.loc 1 1237 0 discriminator 1
	cmpl	$28, -128(%rbp)	#, i
	jle	.L434	#,
.L435:
	.loc 1 1237 0 discriminator 2
	cmpl	$44, -128(%rbp)	#, i
	jle	.L436	#,
	.loc 1 1237 0 discriminator 1
	cmpl	$52, -128(%rbp)	#, i
	jle	.L434	#,
.L436:
	.loc 1 1237 0 discriminator 2
	cmpl	$28, -128(%rbp)	#, i
	jle	.L437	#,
	.loc 1 1237 0 discriminator 1
	cmpl	$36, -128(%rbp)	#, i
	jg	.L437	#,
.L434:
	movl	-108(%rbp), %eax	# mode, mode.310
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$5, %eax	#, D.23556
	je	.L438	#,
	.loc 1 1237 0 discriminator 2
	movl	-108(%rbp), %eax	# mode, mode.311
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$6, %eax	#, D.23556
	jne	.L439	#,
.L438:
	.loc 1 1237 0 discriminator 1
	movl	$2, %eax	#, iftmp.309
	jmp	.L440	#
.L439:
	movl	$1, %eax	#, iftmp.309
.L440:
	.loc 1 1237 0 discriminator 3
	jmp	.L441	#
.L437:
	.loc 1 1237 0 discriminator 2
	cmpl	$18, -108(%rbp)	#, mode
	jne	.L442	#,
	.loc 1 1237 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.314
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L443	#,
	movl	$2, %eax	#, iftmp.313
	jmp	.L441	#
.L443:
	.loc 1 1237 0 discriminator 2
	movl	$3, %eax	#, iftmp.313
	jmp	.L441	#
.L442:
	cmpl	$24, -108(%rbp)	#, mode
	jne	.L446	#,
	.loc 1 1237 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.317
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L447	#,
	movl	$4, %eax	#, iftmp.316
	jmp	.L441	#
.L447:
	.loc 1 1237 0 discriminator 2
	movl	$6, %eax	#, iftmp.316
	jmp	.L441	#
.L446:
	movl	-108(%rbp), %eax	# mode, mode.318
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.320
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L450	#,
	.loc 1 1237 0 discriminator 1
	movl	$8, %eax	#, iftmp.319
	jmp	.L451	#
.L450:
	.loc 1 1237 0 discriminator 2
	movl	$4, %eax	#, iftmp.319
.L451:
	.loc 1 1237 0 discriminator 3
	addl	%edx, %eax	# D.23555, D.23555
	subl	$1, %eax	#, D.23555
	movl	target_flags(%rip), %edx	# target_flags, target_flags.322
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L452	#,
	.loc 1 1237 0 discriminator 1
	movl	$8, %ebx	#, iftmp.321
	jmp	.L453	#
.L452:
	.loc 1 1237 0 discriminator 2
	movl	$4, %ebx	#, iftmp.321
.L453:
	.loc 1 1237 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.321
.L441:
	movl	%eax, -76(%rbp)	# iftmp.308, nregs
	.loc 1 1240 0 is_stmt 1 discriminator 3
	movl	$1, -104(%rbp)	#, j
	jmp	.L454	#
.L457:
	.loc 1 1241 0
	movl	-180(%rbp), %eax	# class, class.323
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23550
	movl	-104(%rbp), %eax	# j, tmp971
	movl	-128(%rbp), %ecx	# i, tmp972
	addl	%ecx, %eax	# tmp972, D.23555
	movl	%eax, %ecx	# D.23555, tmp1410
	shrq	%cl, %rdx	# tmp1410, D.23550
	movq	%rdx, %rax	# D.23550, D.23550
	andl	$1, %eax	#, D.23550
	testq	%rax, %rax	# D.23550
	jne	.L455	#,
	.loc 1 1242 0
	jmp	.L456	#
.L455:
	.loc 1 1240 0
	addl	$1, -104(%rbp)	#, j
.L454:
	.loc 1 1240 0 is_stmt 0 discriminator 1
	movl	-104(%rbp), %eax	# j, tmp973
	cmpl	-76(%rbp), %eax	# nregs, tmp973
	jl	.L457	#,
.L456:
	.loc 1 1243 0 is_stmt 1
	movl	-104(%rbp), %eax	# j, tmp974
	cmpl	-76(%rbp), %eax	# nregs, tmp974
	jne	.L432	#,
	.loc 1 1244 0
	jmp	.L458	#
.L432:
.LBE10:
	.loc 1 1233 0
	addl	$1, -128(%rbp)	#, i
.L431:
	.loc 1 1233 0 is_stmt 0 discriminator 1
	cmpl	$52, -128(%rbp)	#, i
	jle	.L459	#,
.L458:
	.loc 1 1246 0 is_stmt 1
	cmpl	$53, -128(%rbp)	#, i
	jne	.L426	#,
	.loc 1 1248 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.324
	movl	$.LC2, %esi	#,
	movq	%rax, %rdi	# this_insn.324,
	movl	$0, %eax	#,
	call	error_for_asm	#
	.loc 1 1249 0
	movl	$24, -180(%rbp)	#, class
.L426:
.LBE9:
	.loc 1 1256 0
	cmpl	$0, -180(%rbp)	#, class
	jne	.L460	#,
	.loc 1 1257 0
	cmpl	$0, 32(%rbp)	#, optional
	je	.L461	#,
	.loc 1 1257 0 is_stmt 0 discriminator 1
	cmpl	$1, 48(%rbp)	#, type
	je	.L460	#,
.L461:
	.loc 1 1258 0 is_stmt 1
	movl	$__FUNCTION__.11668, %edx	#,
	movl	$1258, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L460:
	.loc 1 1260 0
	movl	-124(%rbp), %r8d	# dont_share, tmp975
	movl	40(%rbp), %edi	# opnum, tmp976
	movl	48(%rbp), %ecx	# type, tmp977
	movl	-180(%rbp), %edx	# class, tmp978
	movq	-160(%rbp), %rsi	# out, tmp979
	leaq	-152(%rbp), %rax	#, tmp980
	movl	%r8d, %r9d	# tmp975,
	movl	%edi, %r8d	# tmp976,
	movq	%rax, %rdi	# tmp980,
	call	find_reusable_reload	#
	movl	%eax, -128(%rbp)	# tmp981, i
	.loc 1 1262 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.325
	cmpl	%eax, -128(%rbp)	# n_reloads.325, i
	jne	.L462	#,
	.loc 1 1276 0
	cmpq	$0, -160(%rbp)	#, out
	je	.L463	#,
	.loc 1 1276 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp982
	movzwl	(%rax), %eax	# out_4->code, D.23548
	cmpw	$62, %ax	#, D.23548
	je	.L463	#,
	.loc 1 1278 0 is_stmt 1
	movl	-180(%rbp), %edi	# class, tmp983
	movl	32(%rbp), %ecx	# optional, tmp984
	movl	40(%rbp), %edx	# opnum, tmp985
	movq	-160(%rbp), %rax	# out, tmp986
	leaq	-132(%rbp), %rsi	#, tmp987
	movq	%rsi, 8(%rsp)	# tmp987,
	movl	48(%rbp), %esi	# type, tmp988
	movl	%esi, (%rsp)	# tmp988,
	movl	16(%rbp), %r9d	# outmode,
	movl	%edi, %r8d	# tmp983,
	movq	%rax, %rsi	# tmp986,
	movl	$0, %edi	#,
	call	push_secondary_reload	#
	movl	%eax, -116(%rbp)	# tmp989, secondary_out_reload
.L463:
	.loc 1 1287 0
	movq	-152(%rbp), %rax	# in, in.326
	testq	%rax, %rax	# in.326
	je	.L464	#,
	.loc 1 1287 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.327
	movzwl	(%rax), %eax	# in.327_688->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L464	#,
	.loc 1 1288 0 is_stmt 1
	movq	-152(%rbp), %rax	# in, in.328
	movl	8(%rax), %eax	# in.328_690->fld[0].rtuint, D.23549
	cmpl	$52, %eax	#, D.23549
	ja	.L464	#,
	.loc 1 1289 0
	movq	-152(%rbp), %rax	# in, in.329
	movl	8(%rax), %eax	# in.329_692->fld[0].rtuint, D.23549
	movl	%eax, %eax	# D.23549, tmp990
	movl	regclass_map(,%rax,4), %eax	# regclass_map, D.23558
	movl	-184(%rbp), %edx	# inmode, tmp991
	movl	-180(%rbp), %esi	# class, tmp992
	movl	$1, %ecx	#,
	movl	%eax, %edi	# D.23558,
	call	ix86_secondary_memory_needed	#
	testl	%eax, %eax	# D.23555
	je	.L464	#,
	.loc 1 1291 0
	movq	-152(%rbp), %rax	# in, in.330
	movl	48(%rbp), %ecx	# type, tmp993
	movl	40(%rbp), %edx	# opnum, tmp994
	movl	-184(%rbp), %esi	# inmode, tmp995
	movq	%rax, %rdi	# in.330,
	call	get_secondary_mem	#
.L464:
	.loc 1 1294 0
	movl	n_reloads(%rip), %eax	# n_reloads, tmp996
	movl	%eax, -128(%rbp)	# tmp996, i
	.loc 1 1295 0
	movq	-152(%rbp), %rcx	# in, in.331
	movl	-128(%rbp), %eax	# i, tmp998
	movslq	%eax, %rdx	# tmp998, tmp997
	movq	%rdx, %rax	# tmp997, tmp999
	addq	%rax, %rax	# tmp999
	addq	%rdx, %rax	# tmp997, tmp999
	salq	$2, %rax	#, tmp999
	addq	%rdx, %rax	# tmp997, tmp999
	salq	$3, %rax	#, tmp1000
	addq	$rld, %rax	#, tmp1001
	movq	%rcx, (%rax)	# in.331, rld[i_697].in
	.loc 1 1296 0
	movl	-128(%rbp), %eax	# i, tmp1003
	movslq	%eax, %rdx	# tmp1003, tmp1002
	movq	%rdx, %rax	# tmp1002, tmp1004
	addq	%rax, %rax	# tmp1004
	addq	%rdx, %rax	# tmp1002, tmp1004
	salq	$2, %rax	#, tmp1004
	addq	%rdx, %rax	# tmp1002, tmp1004
	salq	$3, %rax	#, tmp1005
	leaq	rld(%rax), %rdx	#, tmp1006
	movq	-160(%rbp), %rax	# out, tmp1007
	movq	%rax, 8(%rdx)	# tmp1007, rld[i_697].out
	.loc 1 1297 0
	movl	-128(%rbp), %eax	# i, tmp1009
	movslq	%eax, %rdx	# tmp1009, tmp1008
	movq	%rdx, %rax	# tmp1008, tmp1010
	addq	%rax, %rax	# tmp1010
	addq	%rdx, %rax	# tmp1008, tmp1010
	salq	$2, %rax	#, tmp1010
	addq	%rdx, %rax	# tmp1008, tmp1010
	salq	$3, %rax	#, tmp1011
	leaq	rld+16(%rax), %rdx	#, tmp1012
	movl	-180(%rbp), %eax	# class, tmp1013
	movl	%eax, (%rdx)	# tmp1013, rld[i_697].class
	.loc 1 1298 0
	movl	-128(%rbp), %eax	# i, tmp1015
	movslq	%eax, %rdx	# tmp1015, tmp1014
	movq	%rdx, %rax	# tmp1014, tmp1016
	addq	%rax, %rax	# tmp1016
	addq	%rdx, %rax	# tmp1014, tmp1016
	salq	$2, %rax	#, tmp1016
	addq	%rdx, %rax	# tmp1014, tmp1016
	salq	$3, %rax	#, tmp1017
	leaq	rld+16(%rax), %rdx	#, tmp1018
	movl	-184(%rbp), %eax	# inmode, tmp1019
	movl	%eax, 4(%rdx)	# tmp1019, rld[i_697].inmode
	.loc 1 1299 0
	movl	-128(%rbp), %eax	# i, tmp1021
	movslq	%eax, %rdx	# tmp1021, tmp1020
	movq	%rdx, %rax	# tmp1020, tmp1022
	addq	%rax, %rax	# tmp1022
	addq	%rdx, %rax	# tmp1020, tmp1022
	salq	$2, %rax	#, tmp1022
	addq	%rdx, %rax	# tmp1020, tmp1022
	salq	$3, %rax	#, tmp1023
	leaq	rld+16(%rax), %rdx	#, tmp1024
	movl	16(%rbp), %eax	# outmode, tmp1025
	movl	%eax, 8(%rdx)	# tmp1025, rld[i_697].outmode
	.loc 1 1300 0
	movl	-128(%rbp), %eax	# i, tmp1027
	movslq	%eax, %rdx	# tmp1027, tmp1026
	movq	%rdx, %rax	# tmp1026, tmp1028
	addq	%rax, %rax	# tmp1028
	addq	%rdx, %rax	# tmp1026, tmp1028
	salq	$2, %rax	#, tmp1028
	addq	%rdx, %rax	# tmp1026, tmp1028
	salq	$3, %rax	#, tmp1029
	addq	$rld+64, %rax	#, tmp1030
	movq	$0, (%rax)	#, rld[i_697].reg_rtx
	.loc 1 1301 0
	movl	32(%rbp), %eax	# optional, tmp1031
	andl	$1, %eax	#, D.23559
	movl	%eax, %ecx	# D.23559, D.23559
	movl	-128(%rbp), %eax	# i, tmp1033
	movslq	%eax, %rdx	# tmp1033, tmp1032
	movq	%rdx, %rax	# tmp1032, tmp1034
	addq	%rax, %rax	# tmp1034
	addq	%rdx, %rax	# tmp1032, tmp1034
	salq	$2, %rax	#, tmp1034
	addq	%rdx, %rax	# tmp1032, tmp1034
	salq	$3, %rax	#, tmp1035
	addq	$rld+96, %rax	#, tmp1036
	andl	$1, %ecx	#, tmp1038
	movzbl	(%rax), %edx	# rld[i_697].optional, tmp1039
	andl	$-2, %edx	#, tmp1040
	orl	%ecx, %edx	# tmp1038, tmp1041
	movb	%dl, (%rax)	# tmp1041, rld[i_697].optional
	.loc 1 1302 0
	movl	-128(%rbp), %eax	# i, tmp1043
	movslq	%eax, %rdx	# tmp1043, tmp1042
	movq	%rdx, %rax	# tmp1042, tmp1044
	addq	%rax, %rax	# tmp1044
	addq	%rdx, %rax	# tmp1042, tmp1044
	salq	$2, %rax	#, tmp1044
	addq	%rdx, %rax	# tmp1042, tmp1044
	salq	$3, %rax	#, tmp1045
	addq	$rld+32, %rax	#, tmp1046
	movl	$0, 4(%rax)	#, rld[i_697].inc
	.loc 1 1303 0
	movl	-128(%rbp), %eax	# i, tmp1048
	movslq	%eax, %rdx	# tmp1048, tmp1047
	movq	%rdx, %rax	# tmp1047, tmp1049
	addq	%rax, %rax	# tmp1049
	addq	%rdx, %rax	# tmp1047, tmp1049
	salq	$2, %rax	#, tmp1049
	addq	%rdx, %rax	# tmp1047, tmp1049
	salq	$3, %rax	#, tmp1050
	addq	$rld+96, %rax	#, tmp1051
	movzbl	(%rax), %edx	# rld[i_697].nocombine, tmp1054
	andl	$-3, %edx	#, tmp1055
	movb	%dl, (%rax)	# tmp1055, rld[i_697].nocombine
	.loc 1 1304 0
	cmpq	$0, -168(%rbp)	#, inloc
	je	.L465	#,
	.loc 1 1304 0 is_stmt 0 discriminator 1
	movq	-168(%rbp), %rax	# inloc, tmp1056
	movq	(%rax), %rcx	# *inloc_5, iftmp.332
	jmp	.L466	#
.L465:
	.loc 1 1304 0 discriminator 2
	movl	$0, %ecx	#, iftmp.332
.L466:
	.loc 1 1304 0 discriminator 3
	movl	-128(%rbp), %eax	# i, tmp1058
	movslq	%eax, %rdx	# tmp1058, tmp1057
	movq	%rdx, %rax	# tmp1057, tmp1059
	addq	%rax, %rax	# tmp1059
	addq	%rdx, %rax	# tmp1057, tmp1059
	salq	$2, %rax	#, tmp1059
	addq	%rdx, %rax	# tmp1057, tmp1059
	salq	$3, %rax	#, tmp1060
	addq	$rld+32, %rax	#, tmp1061
	movq	%rcx, 8(%rax)	# iftmp.332, rld[i_697].in_reg
	.loc 1 1305 0 is_stmt 1 discriminator 3
	cmpq	$0, -176(%rbp)	#, outloc
	je	.L467	#,
	.loc 1 1305 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# outloc, tmp1062
	movq	(%rax), %rcx	# *outloc_6, iftmp.333
	jmp	.L468	#
.L467:
	.loc 1 1305 0 discriminator 2
	movl	$0, %ecx	#, iftmp.333
.L468:
	.loc 1 1305 0 discriminator 3
	movl	-128(%rbp), %eax	# i, tmp1064
	movslq	%eax, %rdx	# tmp1064, tmp1063
	movq	%rdx, %rax	# tmp1063, tmp1065
	addq	%rax, %rax	# tmp1065
	addq	%rdx, %rax	# tmp1063, tmp1065
	salq	$2, %rax	#, tmp1065
	addq	%rdx, %rax	# tmp1063, tmp1065
	salq	$3, %rax	#, tmp1066
	addq	$rld+48, %rax	#, tmp1067
	movq	%rcx, (%rax)	# iftmp.333, rld[i_697].out_reg
	.loc 1 1306 0 is_stmt 1 discriminator 3
	movl	-128(%rbp), %eax	# i, tmp1069
	movslq	%eax, %rdx	# tmp1069, tmp1068
	movq	%rdx, %rax	# tmp1068, tmp1070
	addq	%rax, %rax	# tmp1070
	addq	%rdx, %rax	# tmp1068, tmp1070
	salq	$2, %rax	#, tmp1070
	addq	%rdx, %rax	# tmp1068, tmp1070
	salq	$3, %rax	#, tmp1071
	leaq	rld+64(%rax), %rdx	#, tmp1072
	movl	40(%rbp), %eax	# opnum, tmp1073
	movl	%eax, 8(%rdx)	# tmp1073, rld[i_697].opnum
	.loc 1 1307 0 discriminator 3
	movl	-128(%rbp), %eax	# i, tmp1075
	movslq	%eax, %rdx	# tmp1075, tmp1074
	movq	%rdx, %rax	# tmp1074, tmp1076
	addq	%rax, %rax	# tmp1076
	addq	%rdx, %rax	# tmp1074, tmp1076
	salq	$2, %rax	#, tmp1076
	addq	%rdx, %rax	# tmp1074, tmp1076
	salq	$3, %rax	#, tmp1077
	leaq	rld+80(%rax), %rdx	#, tmp1078
	movl	48(%rbp), %eax	# type, tmp1079
	movl	%eax, 12(%rdx)	# tmp1079, rld[i_697].when_needed
	.loc 1 1308 0 discriminator 3
	movl	-128(%rbp), %eax	# i, tmp1081
	movslq	%eax, %rdx	# tmp1081, tmp1080
	movq	%rdx, %rax	# tmp1080, tmp1082
	addq	%rax, %rax	# tmp1082
	addq	%rdx, %rax	# tmp1080, tmp1082
	salq	$2, %rax	#, tmp1082
	addq	%rdx, %rax	# tmp1080, tmp1082
	salq	$3, %rax	#, tmp1083
	leaq	rld+64(%rax), %rdx	#, tmp1084
	movl	-92(%rbp), %eax	# secondary_in_reload, tmp1085
	movl	%eax, 12(%rdx)	# tmp1085, rld[i_697].secondary_in_reload
	.loc 1 1309 0 discriminator 3
	movl	-128(%rbp), %eax	# i, tmp1087
	movslq	%eax, %rdx	# tmp1087, tmp1086
	movq	%rdx, %rax	# tmp1086, tmp1088
	addq	%rax, %rax	# tmp1088
	addq	%rdx, %rax	# tmp1086, tmp1088
	salq	$2, %rax	#, tmp1088
	addq	%rdx, %rax	# tmp1086, tmp1088
	salq	$3, %rax	#, tmp1089
	leaq	rld+80(%rax), %rdx	#, tmp1090
	movl	-116(%rbp), %eax	# secondary_out_reload, tmp1091
	movl	%eax, (%rdx)	# tmp1091, rld[i_697].secondary_out_reload
	.loc 1 1310 0 discriminator 3
	movl	-128(%rbp), %eax	# i, tmp1093
	movslq	%eax, %rdx	# tmp1093, tmp1092
	movq	%rdx, %rax	# tmp1092, tmp1094
	addq	%rax, %rax	# tmp1094
	addq	%rdx, %rax	# tmp1092, tmp1094
	salq	$2, %rax	#, tmp1094
	addq	%rdx, %rax	# tmp1092, tmp1094
	salq	$3, %rax	#, tmp1095
	leaq	rld+80(%rax), %rdx	#, tmp1096
	movl	-88(%rbp), %eax	# secondary_in_icode, tmp1097
	movl	%eax, 4(%rdx)	# tmp1097, rld[i_697].secondary_in_icode
	.loc 1 1311 0 discriminator 3
	movl	-132(%rbp), %ecx	# secondary_out_icode, secondary_out_icode.334
	movl	-128(%rbp), %eax	# i, tmp1099
	movslq	%eax, %rdx	# tmp1099, tmp1098
	movq	%rdx, %rax	# tmp1098, tmp1100
	addq	%rax, %rax	# tmp1100
	addq	%rdx, %rax	# tmp1098, tmp1100
	salq	$2, %rax	#, tmp1100
	addq	%rdx, %rax	# tmp1098, tmp1100
	salq	$3, %rax	#, tmp1101
	addq	$rld+80, %rax	#, tmp1102
	movl	%ecx, 8(%rax)	# secondary_out_icode.334, rld[i_697].secondary_out_icode
	.loc 1 1312 0 discriminator 3
	movl	-128(%rbp), %eax	# i, tmp1104
	movslq	%eax, %rdx	# tmp1104, tmp1103
	movq	%rdx, %rax	# tmp1103, tmp1105
	addq	%rax, %rax	# tmp1105
	addq	%rdx, %rax	# tmp1103, tmp1105
	salq	$2, %rax	#, tmp1105
	addq	%rdx, %rax	# tmp1103, tmp1105
	salq	$3, %rax	#, tmp1106
	addq	$rld+96, %rax	#, tmp1107
	movzbl	(%rax), %edx	# rld[i_697].secondary_p, tmp1110
	andl	$-5, %edx	#, tmp1111
	movb	%dl, (%rax)	# tmp1111, rld[i_697].secondary_p
	.loc 1 1314 0 discriminator 3
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.335
	addl	$1, %eax	#, n_reloads.336
	movl	%eax, n_reloads(%rip)	# n_reloads.336, n_reloads
	.loc 1 1317 0 discriminator 3
	cmpq	$0, -160(%rbp)	#, out
	je	.L470	#,
	.loc 1 1317 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# out, tmp1112
	movzwl	(%rax), %eax	# out_4->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L470	#,
	.loc 1 1318 0 is_stmt 1
	movq	-160(%rbp), %rax	# out, tmp1113
	movl	8(%rax), %eax	# out_4->fld[0].rtuint, D.23549
	cmpl	$52, %eax	#, D.23549
	ja	.L470	#,
	.loc 1 1319 0
	movq	-160(%rbp), %rax	# out, tmp1114
	movl	8(%rax), %eax	# out_4->fld[0].rtuint, D.23549
	movl	%eax, %eax	# D.23549, tmp1115
	movl	regclass_map(,%rax,4), %esi	# regclass_map, D.23558
	movl	-180(%rbp), %eax	# class, tmp1116
	movl	$1, %ecx	#,
	movl	16(%rbp), %edx	# outmode,
	movl	%eax, %edi	# tmp1116,
	call	ix86_secondary_memory_needed	#
	testl	%eax, %eax	# D.23555
	je	.L470	#,
	.loc 1 1321 0
	movl	48(%rbp), %ecx	# type, tmp1117
	movl	40(%rbp), %edx	# opnum, tmp1118
	movq	-160(%rbp), %rax	# out, tmp1119
	movl	16(%rbp), %esi	# outmode,
	movq	%rax, %rdi	# tmp1119,
	call	get_secondary_mem	#
	jmp	.L470	#
.L462:
	.loc 1 1333 0
	cmpl	$0, -184(%rbp)	#, inmode
	je	.L471	#,
	.loc 1 1334 0
	movl	-184(%rbp), %eax	# inmode, inmode.337
	cltq
	movzbl	mode_size(%rax), %ecx	# mode_size, D.23547
	movl	-128(%rbp), %eax	# i, tmp1122
	movslq	%eax, %rdx	# tmp1122, tmp1121
	movq	%rdx, %rax	# tmp1121, tmp1123
	addq	%rax, %rax	# tmp1123
	addq	%rdx, %rax	# tmp1121, tmp1123
	salq	$2, %rax	#, tmp1123
	addq	%rdx, %rax	# tmp1121, tmp1123
	salq	$3, %rax	#, tmp1124
	addq	$rld+16, %rax	#, tmp1125
	movl	4(%rax), %eax	# rld[i_683].inmode, D.23557
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	cmpb	%al, %cl	# D.23547, D.23547
	jbe	.L471	#,
	.loc 1 1335 0
	movl	-128(%rbp), %eax	# i, tmp1128
	movslq	%eax, %rdx	# tmp1128, tmp1127
	movq	%rdx, %rax	# tmp1127, tmp1129
	addq	%rax, %rax	# tmp1129
	addq	%rdx, %rax	# tmp1127, tmp1129
	salq	$2, %rax	#, tmp1129
	addq	%rdx, %rax	# tmp1127, tmp1129
	salq	$3, %rax	#, tmp1130
	leaq	rld+16(%rax), %rdx	#, tmp1131
	movl	-184(%rbp), %eax	# inmode, tmp1132
	movl	%eax, 4(%rdx)	# tmp1132, rld[i_683].inmode
.L471:
	.loc 1 1336 0
	cmpl	$0, 16(%rbp)	#, outmode
	je	.L472	#,
	.loc 1 1337 0
	movl	16(%rbp), %eax	# outmode, outmode.338
	cltq
	movzbl	mode_size(%rax), %ecx	# mode_size, D.23547
	movl	-128(%rbp), %eax	# i, tmp1135
	movslq	%eax, %rdx	# tmp1135, tmp1134
	movq	%rdx, %rax	# tmp1134, tmp1136
	addq	%rax, %rax	# tmp1136
	addq	%rdx, %rax	# tmp1134, tmp1136
	salq	$2, %rax	#, tmp1136
	addq	%rdx, %rax	# tmp1134, tmp1136
	salq	$3, %rax	#, tmp1137
	addq	$rld+16, %rax	#, tmp1138
	movl	8(%rax), %eax	# rld[i_683].outmode, D.23557
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	cmpb	%al, %cl	# D.23547, D.23547
	jbe	.L472	#,
	.loc 1 1338 0
	movl	-128(%rbp), %eax	# i, tmp1141
	movslq	%eax, %rdx	# tmp1141, tmp1140
	movq	%rdx, %rax	# tmp1140, tmp1142
	addq	%rax, %rax	# tmp1142
	addq	%rdx, %rax	# tmp1140, tmp1142
	salq	$2, %rax	#, tmp1142
	addq	%rdx, %rax	# tmp1140, tmp1142
	salq	$3, %rax	#, tmp1143
	leaq	rld+16(%rax), %rdx	#, tmp1144
	movl	16(%rbp), %eax	# outmode, tmp1145
	movl	%eax, 8(%rdx)	# tmp1145, rld[i_683].outmode
.L472:
	.loc 1 1339 0
	movq	-152(%rbp), %rax	# in, in.339
	testq	%rax, %rax	# in.339
	je	.L473	#,
.LBB11:
	.loc 1 1341 0
	cmpq	$0, -168(%rbp)	#, inloc
	je	.L474	#,
	.loc 1 1341 0 is_stmt 0 discriminator 1
	movq	-168(%rbp), %rax	# inloc, tmp1146
	movq	(%rax), %rax	# *inloc_5, iftmp.340
	jmp	.L475	#
.L474:
	.loc 1 1341 0 discriminator 2
	movl	$0, %eax	#, iftmp.340
.L475:
	.loc 1 1341 0 discriminator 3
	movq	%rax, -48(%rbp)	# iftmp.340, in_reg
	.loc 1 1356 0 is_stmt 1 discriminator 3
	movl	-128(%rbp), %eax	# i, tmp1148
	movslq	%eax, %rdx	# tmp1148, tmp1147
	movq	%rdx, %rax	# tmp1147, tmp1149
	addq	%rax, %rax	# tmp1149
	addq	%rdx, %rax	# tmp1147, tmp1149
	salq	$2, %rax	#, tmp1149
	addq	%rdx, %rax	# tmp1147, tmp1149
	salq	$3, %rax	#, tmp1150
	addq	$rld, %rax	#, tmp1151
	movq	(%rax), %rdx	# rld[i_683].in, D.23554
	movq	-152(%rbp), %rax	# in, in.341
	cmpq	%rax, %rdx	# in.341, D.23554
	je	.L476	#,
	.loc 1 1356 0 is_stmt 0 discriminator 1
	movl	-128(%rbp), %eax	# i, tmp1153
	movslq	%eax, %rdx	# tmp1153, tmp1152
	movq	%rdx, %rax	# tmp1152, tmp1154
	addq	%rax, %rax	# tmp1154
	addq	%rdx, %rax	# tmp1152, tmp1154
	salq	$2, %rax	#, tmp1154
	addq	%rdx, %rax	# tmp1152, tmp1154
	salq	$3, %rax	#, tmp1155
	addq	$rld, %rax	#, tmp1156
	movq	(%rax), %rdx	# rld[i_683].in, D.23554
	movq	-152(%rbp), %rax	# in, in.342
	movq	%rdx, %rsi	# D.23554,
	movq	%rax, %rdi	# in.342,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23555
	je	.L476	#,
	.loc 1 1357 0 is_stmt 1
	movl	-128(%rbp), %eax	# i, tmp1158
	movslq	%eax, %rdx	# tmp1158, tmp1157
	movq	%rdx, %rax	# tmp1157, tmp1159
	addq	%rax, %rax	# tmp1159
	addq	%rdx, %rax	# tmp1157, tmp1159
	salq	$2, %rax	#, tmp1159
	addq	%rdx, %rax	# tmp1157, tmp1159
	salq	$3, %rax	#, tmp1160
	addq	$rld+96, %rax	#, tmp1161
	movzbl	(%rax), %eax	#, tmp1164
	andl	$1, %eax	#, D.23559
	testb	%al, %al	# D.23559
	je	.L477	#,
	.loc 1 1357 0 is_stmt 0 discriminator 1
	cmpl	$0, 32(%rbp)	#, optional
	jne	.L476	#,
.L477:
	.loc 1 1361 0 is_stmt 1
	movl	-128(%rbp), %eax	# i, tmp1166
	movslq	%eax, %rdx	# tmp1166, tmp1165
	movq	%rdx, %rax	# tmp1165, tmp1167
	addq	%rax, %rax	# tmp1167
	addq	%rdx, %rax	# tmp1165, tmp1167
	salq	$2, %rax	#, tmp1167
	addq	%rdx, %rax	# tmp1165, tmp1167
	salq	$3, %rax	#, tmp1168
	addq	$rld+64, %rax	#, tmp1169
	movl	8(%rax), %eax	# rld[i_683].opnum, D.23555
	cmpl	40(%rbp), %eax	# opnum, D.23555
	jge	.L478	#,
	.loc 1 1363 0
	movq	-152(%rbp), %rax	# in, in.343
	movq	%rax, %rdi	# in.343,
	call	remove_address_replacements	#
	.loc 1 1364 0
	movl	-128(%rbp), %eax	# i, tmp1171
	movslq	%eax, %rdx	# tmp1171, tmp1170
	movq	%rdx, %rax	# tmp1170, tmp1172
	addq	%rax, %rax	# tmp1172
	addq	%rdx, %rax	# tmp1170, tmp1172
	salq	$2, %rax	#, tmp1172
	addq	%rdx, %rax	# tmp1170, tmp1172
	salq	$3, %rax	#, tmp1173
	addq	$rld, %rax	#, tmp1174
	movq	(%rax), %rax	# rld[i_683].in, in.344
	movq	%rax, -152(%rbp)	# in.344, in
	.loc 1 1365 0
	movl	-128(%rbp), %eax	# i, tmp1176
	movslq	%eax, %rdx	# tmp1176, tmp1175
	movq	%rdx, %rax	# tmp1175, tmp1177
	addq	%rax, %rax	# tmp1177
	addq	%rdx, %rax	# tmp1175, tmp1177
	salq	$2, %rax	#, tmp1177
	addq	%rdx, %rax	# tmp1175, tmp1177
	salq	$3, %rax	#, tmp1178
	addq	$rld+32, %rax	#, tmp1179
	movq	8(%rax), %rax	# rld[i_683].in_reg, tmp1180
	movq	%rax, -48(%rbp)	# tmp1180, in_reg
	jmp	.L476	#
.L478:
	.loc 1 1368 0
	movl	-128(%rbp), %eax	# i, tmp1182
	movslq	%eax, %rdx	# tmp1182, tmp1181
	movq	%rdx, %rax	# tmp1181, tmp1183
	addq	%rax, %rax	# tmp1183
	addq	%rdx, %rax	# tmp1181, tmp1183
	salq	$2, %rax	#, tmp1183
	addq	%rdx, %rax	# tmp1181, tmp1183
	salq	$3, %rax	#, tmp1184
	addq	$rld, %rax	#, tmp1185
	movq	(%rax), %rax	# rld[i_683].in, D.23554
	movq	%rax, %rdi	# D.23554,
	call	remove_address_replacements	#
.L476:
	.loc 1 1370 0
	movq	-152(%rbp), %rcx	# in, in.345
	movl	-128(%rbp), %eax	# i, tmp1187
	movslq	%eax, %rdx	# tmp1187, tmp1186
	movq	%rdx, %rax	# tmp1186, tmp1188
	addq	%rax, %rax	# tmp1188
	addq	%rdx, %rax	# tmp1186, tmp1188
	salq	$2, %rax	#, tmp1188
	addq	%rdx, %rax	# tmp1186, tmp1188
	salq	$3, %rax	#, tmp1189
	addq	$rld, %rax	#, tmp1190
	movq	%rcx, (%rax)	# in.345, rld[i_683].in
	.loc 1 1371 0
	movl	-128(%rbp), %eax	# i, tmp1192
	movslq	%eax, %rdx	# tmp1192, tmp1191
	movq	%rdx, %rax	# tmp1191, tmp1193
	addq	%rax, %rax	# tmp1193
	addq	%rdx, %rax	# tmp1191, tmp1193
	salq	$2, %rax	#, tmp1193
	addq	%rdx, %rax	# tmp1191, tmp1193
	salq	$3, %rax	#, tmp1194
	leaq	rld+32(%rax), %rdx	#, tmp1195
	movq	-48(%rbp), %rax	# in_reg, tmp1196
	movq	%rax, 8(%rdx)	# tmp1196, rld[i_683].in_reg
.L473:
.LBE11:
	.loc 1 1373 0
	cmpq	$0, -160(%rbp)	#, out
	je	.L479	#,
	.loc 1 1375 0
	movl	-128(%rbp), %eax	# i, tmp1198
	movslq	%eax, %rdx	# tmp1198, tmp1197
	movq	%rdx, %rax	# tmp1197, tmp1199
	addq	%rax, %rax	# tmp1199
	addq	%rdx, %rax	# tmp1197, tmp1199
	salq	$2, %rax	#, tmp1199
	addq	%rdx, %rax	# tmp1197, tmp1199
	salq	$3, %rax	#, tmp1200
	leaq	rld(%rax), %rdx	#, tmp1201
	movq	-160(%rbp), %rax	# out, tmp1202
	movq	%rax, 8(%rdx)	# tmp1202, rld[i_683].out
	.loc 1 1376 0
	cmpq	$0, -176(%rbp)	#, outloc
	je	.L480	#,
	.loc 1 1376 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# outloc, tmp1203
	movq	(%rax), %rcx	# *outloc_6, iftmp.346
	jmp	.L481	#
.L480:
	.loc 1 1376 0 discriminator 2
	movl	$0, %ecx	#, iftmp.346
.L481:
	.loc 1 1376 0 discriminator 3
	movl	-128(%rbp), %eax	# i, tmp1205
	movslq	%eax, %rdx	# tmp1205, tmp1204
	movq	%rdx, %rax	# tmp1204, tmp1206
	addq	%rax, %rax	# tmp1206
	addq	%rdx, %rax	# tmp1204, tmp1206
	salq	$2, %rax	#, tmp1206
	addq	%rdx, %rax	# tmp1204, tmp1206
	salq	$3, %rax	#, tmp1207
	addq	$rld+48, %rax	#, tmp1208
	movq	%rcx, (%rax)	# iftmp.346, rld[i_683].out_reg
.L479:
	.loc 1 1378 0 is_stmt 1
	movl	-128(%rbp), %eax	# i, tmp1210
	movslq	%eax, %rdx	# tmp1210, tmp1209
	movq	%rdx, %rax	# tmp1209, tmp1211
	addq	%rax, %rax	# tmp1211
	addq	%rdx, %rax	# tmp1209, tmp1211
	salq	$2, %rax	#, tmp1211
	addq	%rdx, %rax	# tmp1209, tmp1211
	salq	$3, %rax	#, tmp1212
	addq	$rld+16, %rax	#, tmp1213
	movl	(%rax), %edx	# rld[i_683].class, D.23558
	movl	-180(%rbp), %eax	# class, tmp1214
	movl	%edx, %esi	# D.23558,
	movl	%eax, %edi	# tmp1214,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23555
	je	.L482	#,
	.loc 1 1379 0
	movl	-128(%rbp), %eax	# i, tmp1216
	movslq	%eax, %rdx	# tmp1216, tmp1215
	movq	%rdx, %rax	# tmp1215, tmp1217
	addq	%rax, %rax	# tmp1217
	addq	%rdx, %rax	# tmp1215, tmp1217
	salq	$2, %rax	#, tmp1217
	addq	%rdx, %rax	# tmp1215, tmp1217
	salq	$3, %rax	#, tmp1218
	leaq	rld+16(%rax), %rdx	#, tmp1219
	movl	-180(%rbp), %eax	# class, tmp1220
	movl	%eax, (%rdx)	# tmp1220, rld[i_683].class
.L482:
	.loc 1 1380 0
	movl	-128(%rbp), %eax	# i, tmp1222
	movslq	%eax, %rdx	# tmp1222, tmp1221
	movq	%rdx, %rax	# tmp1221, tmp1223
	addq	%rax, %rax	# tmp1223
	addq	%rdx, %rax	# tmp1221, tmp1223
	salq	$2, %rax	#, tmp1223
	addq	%rdx, %rax	# tmp1221, tmp1223
	salq	$3, %rax	#, tmp1224
	addq	$rld+96, %rax	#, tmp1225
	movzbl	(%rax), %eax	#, tmp1228
	andl	$1, %eax	#, D.23559
	movl	%eax, %edx	# D.23559, D.23560
	movl	32(%rbp), %eax	# optional, tmp1229
	andl	%edx, %eax	# D.23560, D.23560
	andl	$1, %eax	#, D.23559
	movl	%eax, %ecx	# D.23559, D.23559
	movl	-128(%rbp), %eax	# i, tmp1231
	movslq	%eax, %rdx	# tmp1231, tmp1230
	movq	%rdx, %rax	# tmp1230, tmp1232
	addq	%rax, %rax	# tmp1232
	addq	%rdx, %rax	# tmp1230, tmp1232
	salq	$2, %rax	#, tmp1232
	addq	%rdx, %rax	# tmp1230, tmp1232
	salq	$3, %rax	#, tmp1233
	addq	$rld+96, %rax	#, tmp1234
	andl	$1, %ecx	#, tmp1236
	movzbl	(%rax), %edx	# rld[i_683].optional, tmp1237
	andl	$-2, %edx	#, tmp1238
	orl	%ecx, %edx	# tmp1236, tmp1239
	movb	%dl, (%rax)	# tmp1239, rld[i_683].optional
	.loc 1 1381 0
	movl	-128(%rbp), %eax	# i, tmp1241
	movslq	%eax, %rdx	# tmp1241, tmp1240
	movq	%rdx, %rax	# tmp1240, tmp1242
	addq	%rax, %rax	# tmp1242
	addq	%rdx, %rax	# tmp1240, tmp1242
	salq	$2, %rax	#, tmp1242
	addq	%rdx, %rax	# tmp1240, tmp1242
	salq	$3, %rax	#, tmp1243
	addq	$rld+80, %rax	#, tmp1244
	movl	12(%rax), %eax	# rld[i_683].when_needed, D.23561
	cmpl	48(%rbp), %eax	# type, D.23561
	jne	.L483	#,
	.loc 1 1381 0 is_stmt 0 discriminator 1
	movl	-128(%rbp), %eax	# i, tmp1246
	movslq	%eax, %rdx	# tmp1246, tmp1245
	movq	%rdx, %rax	# tmp1245, tmp1247
	addq	%rax, %rax	# tmp1247
	addq	%rdx, %rax	# tmp1245, tmp1247
	salq	$2, %rax	#, tmp1247
	addq	%rdx, %rax	# tmp1245, tmp1247
	salq	$3, %rax	#, tmp1248
	addq	$rld+64, %rax	#, tmp1249
	movl	8(%rax), %eax	# rld[i_683].opnum, D.23555
	cmpl	40(%rbp), %eax	# opnum, D.23555
	je	.L484	#,
	cmpl	$0, 48(%rbp)	#, type
	je	.L484	#,
	cmpl	$7, 48(%rbp)	#, type
	je	.L484	#,
	cmpl	$10, 48(%rbp)	#, type
	je	.L484	#,
.L483:
	.loc 1 1383 0 is_stmt 1
	movl	-128(%rbp), %eax	# i, tmp1251
	movslq	%eax, %rdx	# tmp1251, tmp1250
	movq	%rdx, %rax	# tmp1250, tmp1252
	addq	%rax, %rax	# tmp1252
	addq	%rdx, %rax	# tmp1250, tmp1252
	salq	$2, %rax	#, tmp1252
	addq	%rdx, %rax	# tmp1250, tmp1252
	salq	$3, %rax	#, tmp1253
	addq	$rld+80, %rax	#, tmp1254
	movl	$9, 12(%rax)	#, rld[i_683].when_needed
.L484:
	.loc 1 1384 0
	movl	-128(%rbp), %eax	# i, tmp1256
	movslq	%eax, %rdx	# tmp1256, tmp1255
	movq	%rdx, %rax	# tmp1255, tmp1257
	addq	%rax, %rax	# tmp1257
	addq	%rdx, %rax	# tmp1255, tmp1257
	salq	$2, %rax	#, tmp1257
	addq	%rdx, %rax	# tmp1255, tmp1257
	salq	$3, %rax	#, tmp1258
	addq	$rld+64, %rax	#, tmp1259
	movl	8(%rax), %edx	# rld[i_683].opnum, D.23555
	movl	40(%rbp), %eax	# opnum, tmp1260
	cmpl	%eax, %edx	# tmp1260, D.23555
	cmovle	%edx, %eax	# D.23555,, D.23555
	movl	%eax, %ecx	# D.23555, D.23555
	movl	-128(%rbp), %eax	# i, tmp1262
	movslq	%eax, %rdx	# tmp1262, tmp1261
	movq	%rdx, %rax	# tmp1261, tmp1263
	addq	%rax, %rax	# tmp1263
	addq	%rdx, %rax	# tmp1261, tmp1263
	salq	$2, %rax	#, tmp1263
	addq	%rdx, %rax	# tmp1261, tmp1263
	salq	$3, %rax	#, tmp1264
	addq	$rld+64, %rax	#, tmp1265
	movl	%ecx, 8(%rax)	# D.23555, rld[i_683].opnum
.L470:
	.loc 1 1391 0
	movq	-152(%rbp), %rax	# in, in.347
	testq	%rax, %rax	# in.347
	je	.L485	#,
	.loc 1 1391 0 is_stmt 0 discriminator 1
	movq	-168(%rbp), %rax	# inloc, tmp1266
	movq	(%rax), %rdx	# *inloc_5, D.23554
	movq	-152(%rbp), %rax	# in, in.348
	cmpq	%rax, %rdx	# in.348, D.23554
	je	.L485	#,
	.loc 1 1392 0 is_stmt 1
	movl	-128(%rbp), %eax	# i, tmp1268
	movslq	%eax, %rdx	# tmp1268, tmp1267
	movq	%rdx, %rax	# tmp1267, tmp1269
	addq	%rax, %rax	# tmp1269
	addq	%rdx, %rax	# tmp1267, tmp1269
	salq	$2, %rax	#, tmp1269
	addq	%rdx, %rax	# tmp1267, tmp1269
	salq	$3, %rax	#, tmp1270
	addq	$rld+96, %rax	#, tmp1271
	movzbl	(%rax), %edx	# rld[i_22].nocombine, tmp1274
	orl	$2, %edx	#, tmp1275
	movb	%dl, (%rax)	# tmp1275, rld[i_22].nocombine
.L485:
	.loc 1 1420 0
	movl	replace_reloads(%rip), %eax	# replace_reloads, replace_reloads.349
	testl	%eax, %eax	# replace_reloads.349
	je	.L486	#,
	.loc 1 1422 0
	cmpq	$0, -168(%rbp)	#, inloc
	je	.L487	#,
.LBB12:
	.loc 1 1424 0
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.350
	leal	1(%rax), %edx	#, n_replacements.352
	movl	%edx, n_replacements(%rip)	# n_replacements.352, n_replacements
	movslq	%eax, %rdx	# n_replacements.351, tmp1276
	movq	%rdx, %rax	# tmp1276, tmp1277
	addq	%rax, %rax	# tmp1277
	addq	%rdx, %rax	# tmp1276, tmp1277
	salq	$3, %rax	#, tmp1278
	addq	$replacements, %rax	#, tmp1279
	movq	%rax, -32(%rbp)	# tmp1279, r
	.loc 1 1425 0
	movq	-32(%rbp), %rax	# r, tmp1280
	movl	-128(%rbp), %edx	# i, tmp1281
	movl	%edx, 16(%rax)	# tmp1281, r_760->what
	.loc 1 1426 0
	movq	-32(%rbp), %rax	# r, tmp1282
	movq	-64(%rbp), %rdx	# in_subreg_loc, tmp1283
	movq	%rdx, 8(%rax)	# tmp1283, r_760->subreg_loc
	.loc 1 1427 0
	movq	-32(%rbp), %rax	# r, tmp1284
	movq	-168(%rbp), %rdx	# inloc, tmp1285
	movq	%rdx, (%rax)	# tmp1285, r_760->where
	.loc 1 1428 0
	movq	-32(%rbp), %rax	# r, tmp1286
	movl	-184(%rbp), %edx	# inmode, tmp1287
	movl	%edx, 20(%rax)	# tmp1287, r_760->mode
.L487:
.LBE12:
	.loc 1 1430 0
	cmpq	$0, -176(%rbp)	#, outloc
	je	.L486	#,
	.loc 1 1430 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# outloc, tmp1288
	cmpq	-168(%rbp), %rax	# inloc, tmp1288
	je	.L486	#,
.LBB13:
	.loc 1 1432 0 is_stmt 1
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.353
	leal	1(%rax), %edx	#, n_replacements.355
	movl	%edx, n_replacements(%rip)	# n_replacements.355, n_replacements
	movslq	%eax, %rdx	# n_replacements.354, tmp1289
	movq	%rdx, %rax	# tmp1289, tmp1290
	addq	%rax, %rax	# tmp1290
	addq	%rdx, %rax	# tmp1289, tmp1290
	salq	$3, %rax	#, tmp1291
	addq	$replacements, %rax	#, tmp1292
	movq	%rax, -24(%rbp)	# tmp1292, r
	.loc 1 1433 0
	movq	-24(%rbp), %rax	# r, tmp1293
	movl	-128(%rbp), %edx	# i, tmp1294
	movl	%edx, 16(%rax)	# tmp1294, r_764->what
	.loc 1 1434 0
	movq	-24(%rbp), %rax	# r, tmp1295
	movq	-176(%rbp), %rdx	# outloc, tmp1296
	movq	%rdx, (%rax)	# tmp1296, r_764->where
	.loc 1 1435 0
	movq	-24(%rbp), %rax	# r, tmp1297
	movq	-56(%rbp), %rdx	# out_subreg_loc, tmp1298
	movq	%rdx, 8(%rax)	# tmp1298, r_764->subreg_loc
	.loc 1 1436 0
	movq	-24(%rbp), %rax	# r, tmp1299
	movl	16(%rbp), %edx	# outmode, tmp1300
	movl	%edx, 20(%rax)	# tmp1300, r_764->mode
.L486:
.LBE13:
	.loc 1 1448 0
	movq	-152(%rbp), %rax	# in, in.356
	testq	%rax, %rax	# in.356
	je	.L488	#,
	.loc 1 1448 0 is_stmt 0 discriminator 1
	cmpq	$0, -160(%rbp)	#, out
	je	.L488	#,
	movq	-152(%rbp), %rax	# in, in.357
	cmpq	-160(%rbp), %rax	# out, in.357
	je	.L488	#,
	movl	-128(%rbp), %eax	# i, tmp1302
	movslq	%eax, %rdx	# tmp1302, tmp1301
	movq	%rdx, %rax	# tmp1301, tmp1303
	addq	%rax, %rax	# tmp1303
	addq	%rdx, %rax	# tmp1301, tmp1303
	salq	$2, %rax	#, tmp1303
	addq	%rdx, %rax	# tmp1301, tmp1303
	salq	$3, %rax	#, tmp1304
	addq	$rld+64, %rax	#, tmp1305
	movq	(%rax), %rax	# rld[i_22].reg_rtx, D.23554
	testq	%rax, %rax	# D.23554
	jne	.L488	#,
	.loc 1 1450 0 is_stmt 1
	movq	-160(%rbp), %rax	# out, tmp1306
	movq	%rax, %rdi	# tmp1306,
	call	earlyclobber_operand_p	#
	movl	%eax, %ecx	#, D.23555
	movl	-128(%rbp), %eax	# i, tmp1308
	movslq	%eax, %rdx	# tmp1308, tmp1307
	movq	%rdx, %rax	# tmp1307, tmp1309
	addq	%rax, %rax	# tmp1309
	addq	%rdx, %rax	# tmp1307, tmp1309
	salq	$2, %rax	#, tmp1309
	addq	%rdx, %rax	# tmp1307, tmp1309
	salq	$3, %rax	#, tmp1310
	addq	$rld+16, %rax	#, tmp1311
	movl	(%rax), %r8d	# rld[i_22].class, D.23558
	movq	-152(%rbp), %rax	# in, in.358
	movl	-184(%rbp), %r10d	# inmode, tmp1312
	movq	-176(%rbp), %rdi	# outloc, tmp1313
	movq	-168(%rbp), %rdx	# inloc, tmp1314
	movq	-160(%rbp), %rsi	# out, tmp1315
	movl	%ecx, 16(%rsp)	# D.23555,
	movl	-128(%rbp), %ecx	# i, tmp1316
	movl	%ecx, 8(%rsp)	# tmp1316,
	movl	%r8d, (%rsp)	# D.23558,
	movl	16(%rbp), %r9d	# outmode,
	movl	%r10d, %r8d	# tmp1312,
	movq	%rdi, %rcx	# tmp1313,
	movq	%rax, %rdi	# in.358,
	call	find_dummy_reload	#
	movq	%rax, %rcx	#, D.23554
	movl	-128(%rbp), %eax	# i, tmp1318
	movslq	%eax, %rdx	# tmp1318, tmp1317
	movq	%rdx, %rax	# tmp1317, tmp1319
	addq	%rax, %rax	# tmp1319
	addq	%rdx, %rax	# tmp1317, tmp1319
	salq	$2, %rax	#, tmp1319
	addq	%rdx, %rax	# tmp1317, tmp1319
	salq	$3, %rax	#, tmp1320
	addq	$rld+64, %rax	#, tmp1321
	movq	%rcx, (%rax)	# D.23554, rld[i_22].reg_rtx
	.loc 1 1459 0
	movl	-128(%rbp), %eax	# i, tmp1323
	movslq	%eax, %rdx	# tmp1323, tmp1322
	movq	%rdx, %rax	# tmp1322, tmp1324
	addq	%rax, %rax	# tmp1324
	addq	%rdx, %rax	# tmp1322, tmp1324
	salq	$2, %rax	#, tmp1324
	addq	%rdx, %rax	# tmp1322, tmp1324
	salq	$3, %rax	#, tmp1325
	addq	$rld+64, %rax	#, tmp1326
	movq	(%rax), %rax	# rld[i_22].reg_rtx, D.23554
	cmpq	-160(%rbp), %rax	# out, D.23554
	jne	.L488	#,
	.loc 1 1460 0
	movq	-152(%rbp), %rax	# in, in.359
	movzwl	(%rax), %eax	# in.359_773->code, D.23548
	cmpw	$61, %ax	#, D.23548
	je	.L489	#,
	.loc 1 1460 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.360
	movzwl	(%rax), %eax	# in.360_775->code, D.23548
	cmpw	$67, %ax	#, D.23548
	je	.L489	#,
	movq	-152(%rbp), %rax	# in, in.361
	movzwl	(%rax), %eax	# in.361_777->code, D.23548
	cmpw	$68, %ax	#, D.23548
	je	.L489	#,
	movq	-152(%rbp), %rax	# in, in.362
	movzwl	(%rax), %eax	# in.362_779->code, D.23548
	cmpw	$54, %ax	#, D.23548
	je	.L489	#,
	movq	-152(%rbp), %rax	# in, in.363
	movzwl	(%rax), %eax	# in.363_781->code, D.23548
	cmpw	$55, %ax	#, D.23548
	je	.L489	#,
	movq	-152(%rbp), %rax	# in, in.364
	movzwl	(%rax), %eax	# in.364_783->code, D.23548
	cmpw	$58, %ax	#, D.23548
	je	.L489	#,
	movq	-152(%rbp), %rax	# in, in.365
	movzwl	(%rax), %eax	# in.365_785->code, D.23548
	cmpw	$134, %ax	#, D.23548
	je	.L489	#,
	movq	-152(%rbp), %rax	# in, in.366
	movzwl	(%rax), %eax	# in.366_787->code, D.23548
	cmpw	$56, %ax	#, D.23548
	je	.L489	#,
	movq	-152(%rbp), %rax	# in, in.367
	movzwl	(%rax), %eax	# in.367_789->code, D.23548
	cmpw	$140, %ax	#, D.23548
	jne	.L488	#,
.L489:
	.loc 1 1461 0 is_stmt 1
	movq	static_reload_reg_p(%rip), %rdi	# static_reload_reg_p, static_reload_reg_p.368
	movq	-160(%rbp), %rax	# out, tmp1327
	movl	8(%rax), %eax	# out_4->fld[0].rtuint, D.23549
	movl	%eax, %edx	# D.23549, D.23555
	movq	this_insn(%rip), %rsi	# this_insn, this_insn.369
	movq	-152(%rbp), %rax	# in, in.370
	movl	-128(%rbp), %r8d	# i, tmp1328
	movl	-184(%rbp), %ecx	# inmode, tmp1329
	movl	%ecx, (%rsp)	# tmp1329,
	movl	%r8d, %r9d	# tmp1328,
	movq	%rdi, %r8	# static_reload_reg_p.368,
	movl	%edx, %ecx	# D.23555,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# in.370,
	call	find_equiv_reg	#
	testq	%rax, %rax	# D.23554
	je	.L488	#,
	.loc 1 1463 0
	movl	-128(%rbp), %eax	# i, tmp1331
	movslq	%eax, %rdx	# tmp1331, tmp1330
	movq	%rdx, %rax	# tmp1330, tmp1332
	addq	%rax, %rax	# tmp1332
	addq	%rdx, %rax	# tmp1330, tmp1332
	salq	$2, %rax	#, tmp1332
	addq	%rdx, %rax	# tmp1330, tmp1332
	salq	$3, %rax	#, tmp1333
	leaq	rld(%rax), %rdx	#, tmp1334
	movq	-160(%rbp), %rax	# out, tmp1335
	movq	%rax, (%rdx)	# tmp1335, rld[i_22].in
.L488:
	.loc 1 1478 0
	movl	-128(%rbp), %eax	# i, tmp1337
	movslq	%eax, %rdx	# tmp1337, tmp1336
	movq	%rdx, %rax	# tmp1336, tmp1338
	addq	%rax, %rax	# tmp1338
	addq	%rdx, %rax	# tmp1336, tmp1338
	salq	$2, %rax	#, tmp1338
	addq	%rdx, %rax	# tmp1336, tmp1338
	salq	$3, %rax	#, tmp1339
	addq	$rld+64, %rax	#, tmp1340
	movq	(%rax), %rax	# rld[i_22].reg_rtx, D.23554
	testq	%rax, %rax	# D.23554
	jne	.L490	#,
	.loc 1 1478 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.371
	testq	%rax, %rax	# in.371
	je	.L490	#,
.LBB14:
	.loc 1 1482 0 is_stmt 1
	movl	-184(%rbp), %eax	# inmode, tmp1341
	movl	%eax, -100(%rbp)	# tmp1341, rel_mode
	.loc 1 1484 0
	cmpq	$0, -160(%rbp)	#, out
	je	.L491	#,
	.loc 1 1484 0 is_stmt 0 discriminator 1
	movl	16(%rbp), %eax	# outmode, outmode.372
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23547
	movl	-184(%rbp), %eax	# inmode, inmode.373
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	cmpb	%al, %dl	# D.23547, D.23547
	jbe	.L491	#,
	.loc 1 1485 0 is_stmt 1
	movl	16(%rbp), %eax	# outmode, tmp1344
	movl	%eax, -100(%rbp)	# tmp1344, rel_mode
.L491:
	.loc 1 1487 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.374
	movq	56(%rax), %rax	# this_insn.374_805->fld[6].rtx, tmp1345
	movq	%rax, -40(%rbp)	# tmp1345, note
	jmp	.L492	#
.L591:
	.loc 1 1488 0
	movq	-40(%rbp), %rax	# note, tmp1346
	movzbl	2(%rax), %eax	# note_34->mode, D.23547
	cmpb	$1, %al	#, D.23547
	jne	.L493	#,
	.loc 1 1489 0
	movq	-40(%rbp), %rax	# note, tmp1347
	movq	8(%rax), %rax	# note_34->fld[0].rtx, D.23554
	movzwl	(%rax), %eax	# _808->code, D.23548
	cmpw	$61, %ax	#, D.23548
	jne	.L493	#,
	.loc 1 1490 0
	movq	-40(%rbp), %rax	# note, tmp1348
	movq	8(%rax), %rax	# note_34->fld[0].rtx, D.23554
	movl	8(%rax), %eax	# _810->fld[0].rtuint, D.23549
	movl	%eax, -72(%rbp)	# D.23549, regno
	cmpl	$52, -72(%rbp)	#, regno
	jg	.L493	#,
	.loc 1 1491 0
	movq	-152(%rbp), %rdx	# in, in.375
	movq	-40(%rbp), %rax	# note, tmp1349
	movq	8(%rax), %rax	# note_34->fld[0].rtx, D.23554
	movq	%rdx, %rsi	# in.375,
	movq	%rax, %rdi	# D.23554,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.23555
	je	.L493	#,
	.loc 1 1496 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.376
	.loc 1 1492 0
	movq	32(%rax), %rdi	# this_insn.376_816->fld[3].rtx, D.23554
	.loc 1 1494 0
	cmpl	$7, -72(%rbp)	#, regno
	jle	.L494	#,
	.loc 1 1494 0 is_stmt 0 discriminator 1
	cmpl	$15, -72(%rbp)	#, regno
	jle	.L495	#,
.L494:
	.loc 1 1494 0 discriminator 2
	cmpl	$20, -72(%rbp)	#, regno
	jle	.L496	#,
	.loc 1 1494 0 discriminator 1
	cmpl	$28, -72(%rbp)	#, regno
	jle	.L495	#,
.L496:
	.loc 1 1494 0 discriminator 2
	cmpl	$44, -72(%rbp)	#, regno
	jle	.L497	#,
	.loc 1 1494 0 discriminator 1
	cmpl	$52, -72(%rbp)	#, regno
	jle	.L495	#,
.L497:
	.loc 1 1494 0 discriminator 2
	cmpl	$28, -72(%rbp)	#, regno
	jle	.L498	#,
	.loc 1 1494 0 discriminator 1
	cmpl	$36, -72(%rbp)	#, regno
	jg	.L498	#,
.L495:
	movl	-100(%rbp), %eax	# rel_mode, rel_mode.379
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$5, %eax	#, D.23556
	je	.L499	#,
	.loc 1 1494 0 discriminator 2
	movl	-100(%rbp), %eax	# rel_mode, rel_mode.380
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$6, %eax	#, D.23556
	jne	.L500	#,
.L499:
	.loc 1 1494 0 discriminator 1
	movl	$2, %eax	#, iftmp.378
	jmp	.L501	#
.L500:
	movl	$1, %eax	#, iftmp.378
.L501:
	.loc 1 1494 0 discriminator 3
	jmp	.L502	#
.L498:
	.loc 1 1494 0 discriminator 2
	cmpl	$18, -100(%rbp)	#, rel_mode
	jne	.L503	#,
	.loc 1 1494 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.383
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L504	#,
	movl	$2, %eax	#, iftmp.382
	jmp	.L502	#
.L504:
	.loc 1 1494 0 discriminator 2
	movl	$3, %eax	#, iftmp.382
	jmp	.L502	#
.L503:
	cmpl	$24, -100(%rbp)	#, rel_mode
	jne	.L507	#,
	.loc 1 1494 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.386
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L508	#,
	movl	$4, %eax	#, iftmp.385
	jmp	.L502	#
.L508:
	.loc 1 1494 0 discriminator 2
	movl	$6, %eax	#, iftmp.385
	jmp	.L502	#
.L507:
	movl	-100(%rbp), %eax	# rel_mode, rel_mode.387
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.389
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L511	#,
	.loc 1 1494 0 discriminator 1
	movl	$8, %eax	#, iftmp.388
	jmp	.L512	#
.L511:
	.loc 1 1494 0 discriminator 2
	movl	$4, %eax	#, iftmp.388
.L512:
	.loc 1 1494 0 discriminator 3
	addl	%edx, %eax	# D.23555, D.23555
	subl	$1, %eax	#, D.23555
	movl	target_flags(%rip), %edx	# target_flags, target_flags.391
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L513	#,
	.loc 1 1494 0 discriminator 1
	movl	$8, %ebx	#, iftmp.390
	jmp	.L514	#
.L513:
	.loc 1 1494 0 discriminator 2
	movl	$4, %ebx	#, iftmp.390
.L514:
	.loc 1 1494 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.390
.L502:
	movl	-72(%rbp), %edx	# regno, tmp1355
	addl	%edx, %eax	# tmp1355, D.23555
	.loc 1 1492 0 is_stmt 1 discriminator 3
	movl	%eax, %esi	# D.23555, D.23549
	movl	-72(%rbp), %eax	# regno, regno.392
	movq	-168(%rbp), %rdx	# inloc, tmp1356
	movq	%rdx, %rcx	# tmp1356,
	movq	%rdi, %rdx	# D.23554,
	movl	%eax, %edi	# regno.392,
	call	refers_to_regno_for_reload_p	#
	testl	%eax, %eax	# D.23555
	jne	.L493	#,
	.loc 1 1500 0
	cmpq	$0, -160(%rbp)	#, out
	je	.L515	#,
	.loc 1 1500 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# in, in.393
	cmpq	-160(%rbp), %rax	# out, in.393
	je	.L515	#,
	.loc 1 1505 0 is_stmt 1
	movq	this_insn(%rip), %rax	# this_insn, this_insn.394
	.loc 1 1501 0
	movq	32(%rax), %rsi	# this_insn.394_856->fld[3].rtx, D.23554
	.loc 1 1503 0
	cmpl	$7, -72(%rbp)	#, regno
	jle	.L516	#,
	.loc 1 1503 0 is_stmt 0 discriminator 1
	cmpl	$15, -72(%rbp)	#, regno
	jle	.L517	#,
.L516:
	.loc 1 1503 0 discriminator 2
	cmpl	$20, -72(%rbp)	#, regno
	jle	.L518	#,
	.loc 1 1503 0 discriminator 1
	cmpl	$28, -72(%rbp)	#, regno
	jle	.L517	#,
.L518:
	.loc 1 1503 0 discriminator 2
	cmpl	$44, -72(%rbp)	#, regno
	jle	.L519	#,
	.loc 1 1503 0 discriminator 1
	cmpl	$52, -72(%rbp)	#, regno
	jle	.L517	#,
.L519:
	.loc 1 1503 0 discriminator 2
	cmpl	$28, -72(%rbp)	#, regno
	jle	.L520	#,
	.loc 1 1503 0 discriminator 1
	cmpl	$36, -72(%rbp)	#, regno
	jg	.L520	#,
.L517:
	movl	-100(%rbp), %eax	# rel_mode, rel_mode.397
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$5, %eax	#, D.23556
	je	.L521	#,
	.loc 1 1503 0 discriminator 2
	movl	-100(%rbp), %eax	# rel_mode, rel_mode.398
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$6, %eax	#, D.23556
	jne	.L522	#,
.L521:
	.loc 1 1503 0 discriminator 1
	movl	$2, %eax	#, iftmp.396
	jmp	.L523	#
.L522:
	movl	$1, %eax	#, iftmp.396
.L523:
	.loc 1 1503 0 discriminator 3
	jmp	.L524	#
.L520:
	.loc 1 1503 0 discriminator 2
	cmpl	$18, -100(%rbp)	#, rel_mode
	jne	.L525	#,
	.loc 1 1503 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.401
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L526	#,
	movl	$2, %eax	#, iftmp.400
	jmp	.L524	#
.L526:
	.loc 1 1503 0 discriminator 2
	movl	$3, %eax	#, iftmp.400
	jmp	.L524	#
.L525:
	cmpl	$24, -100(%rbp)	#, rel_mode
	jne	.L529	#,
	.loc 1 1503 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.404
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L530	#,
	movl	$4, %eax	#, iftmp.403
	jmp	.L524	#
.L530:
	.loc 1 1503 0 discriminator 2
	movl	$6, %eax	#, iftmp.403
	jmp	.L524	#
.L529:
	movl	-100(%rbp), %eax	# rel_mode, rel_mode.405
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.407
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L533	#,
	.loc 1 1503 0 discriminator 1
	movl	$8, %eax	#, iftmp.406
	jmp	.L534	#
.L533:
	.loc 1 1503 0 discriminator 2
	movl	$4, %eax	#, iftmp.406
.L534:
	.loc 1 1503 0 discriminator 3
	addl	%edx, %eax	# D.23555, D.23555
	subl	$1, %eax	#, D.23555
	movl	target_flags(%rip), %edx	# target_flags, target_flags.409
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L535	#,
	.loc 1 1503 0 discriminator 1
	movl	$8, %ebx	#, iftmp.408
	jmp	.L536	#
.L535:
	.loc 1 1503 0 discriminator 2
	movl	$4, %ebx	#, iftmp.408
.L536:
	.loc 1 1503 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.408
.L524:
	movl	-72(%rbp), %edx	# regno, tmp1362
	addl	%edx, %eax	# tmp1362, D.23555
	.loc 1 1501 0 is_stmt 1 discriminator 3
	movl	%eax, %ecx	# D.23555, D.23549
	movl	-72(%rbp), %eax	# regno, regno.410
	movq	%rsi, %rdx	# D.23554,
	movl	%ecx, %esi	# D.23549,
	movl	%eax, %edi	# regno.410,
	call	hard_reg_set_here_p	#
	testl	%eax, %eax	# D.23555
	jne	.L493	#,
.L515:
	.loc 1 1509 0
	movq	-152(%rbp), %rax	# in, in.411
	cmpq	-160(%rbp), %rax	# out, in.411
	jne	.L537	#,
	.loc 1 1510 0
	movq	-152(%rbp), %rax	# in, in.412
	movzwl	(%rax), %eax	# in.412_896->code, D.23548
	cmpw	$63, %ax	#, D.23548
	jne	.L493	#,
	.loc 1 1511 0
	movq	-152(%rbp), %rax	# in, in.413
	movzbl	2(%rax), %eax	# in.413_898->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.415
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L538	#,
	.loc 1 1511 0 is_stmt 0 discriminator 1
	movl	$7, %eax	#, iftmp.414
	jmp	.L539	#
.L538:
	.loc 1 1511 0 discriminator 2
	movl	$3, %eax	#, iftmp.414
.L539:
	.loc 1 1511 0 discriminator 3
	addl	%edx, %eax	# D.23555, D.23555
	.loc 1 1512 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %edx	# target_flags, target_flags.417
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L540	#,
	.loc 1 1512 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.416
	jmp	.L541	#
.L540:
	.loc 1 1512 0 discriminator 2
	movl	$4, %ebx	#, iftmp.416
.L541:
	.loc 1 1512 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.416
	movl	%eax, %ecx	# tmp1364, D.23555
	.loc 1 1513 0 is_stmt 1 discriminator 3
	movq	-152(%rbp), %rax	# in, in.418
	movq	8(%rax), %rax	# in.418_913->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _914->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	.loc 1 1514 0 discriminator 3
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.420
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L542	#,
	.loc 1 1514 0 is_stmt 0 discriminator 1
	movl	$7, %eax	#, iftmp.419
	jmp	.L543	#
.L542:
	.loc 1 1514 0 discriminator 2
	movl	$3, %eax	#, iftmp.419
.L543:
	.loc 1 1514 0 discriminator 3
	addl	%edx, %eax	# D.23555, D.23555
	movl	target_flags(%rip), %edx	# target_flags, target_flags.422
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L544	#,
	.loc 1 1514 0 discriminator 1
	movl	$8, %ebx	#, iftmp.421
	jmp	.L545	#
.L544:
	.loc 1 1514 0 discriminator 2
	movl	$4, %ebx	#, iftmp.421
.L545:
	.loc 1 1514 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.421
	.loc 1 1511 0 is_stmt 1 discriminator 3
	cmpl	%eax, %ecx	# D.23555, D.23555
	jne	.L493	#,
.L537:
	.loc 1 1516 0
	movl	-100(%rbp), %eax	# rel_mode, rel_mode.423
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23547
	.loc 1 1517 0
	movq	-40(%rbp), %rax	# note, tmp1370
	movq	8(%rax), %rax	# note_34->fld[0].rtx, D.23554
	movzbl	2(%rax), %eax	# _931->mode, D.23547
	movzbl	%al, %eax	# D.23547, D.23555
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	.loc 1 1516 0
	cmpb	%al, %dl	# D.23547, D.23547
	ja	.L493	#,
	.loc 1 1518 0
	movl	-184(%rbp), %edx	# inmode, tmp1372
	movl	-72(%rbp), %eax	# regno, tmp1373
	movl	%edx, %esi	# tmp1372,
	movl	%eax, %edi	# tmp1373,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23555
	je	.L493	#,
	.loc 1 1519 0
	movl	-72(%rbp), %eax	# regno, tmp1374
	movl	16(%rbp), %esi	# outmode,
	movl	%eax, %edi	# tmp1374,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23555
	je	.L493	#,
.LBB15:
	.loc 1 1522 0
	cmpl	$7, -72(%rbp)	#, regno
	jle	.L546	#,
	.loc 1 1522 0 is_stmt 0 discriminator 1
	cmpl	$15, -72(%rbp)	#, regno
	jle	.L547	#,
.L546:
	.loc 1 1522 0 discriminator 2
	cmpl	$20, -72(%rbp)	#, regno
	jle	.L548	#,
	.loc 1 1522 0 discriminator 1
	cmpl	$28, -72(%rbp)	#, regno
	jle	.L547	#,
.L548:
	.loc 1 1522 0 discriminator 2
	cmpl	$44, -72(%rbp)	#, regno
	jle	.L549	#,
	.loc 1 1522 0 discriminator 1
	cmpl	$52, -72(%rbp)	#, regno
	jle	.L547	#,
.L549:
	.loc 1 1522 0 discriminator 2
	cmpl	$28, -72(%rbp)	#, regno
	jle	.L550	#,
	.loc 1 1522 0 discriminator 1
	cmpl	$36, -72(%rbp)	#, regno
	jg	.L550	#,
.L547:
	movl	16(%rbp), %eax	# outmode, outmode.426
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$5, %eax	#, D.23556
	je	.L551	#,
	.loc 1 1522 0 discriminator 2
	movl	16(%rbp), %eax	# outmode, outmode.427
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$6, %eax	#, D.23556
	jne	.L552	#,
.L551:
	.loc 1 1522 0 discriminator 1
	movl	$2, %eax	#, iftmp.425
	jmp	.L553	#
.L552:
	movl	$1, %eax	#, iftmp.425
.L553:
	.loc 1 1522 0 discriminator 3
	movl	%eax, %ecx	# iftmp.425, iftmp.424
	jmp	.L554	#
.L550:
	.loc 1 1522 0 discriminator 2
	cmpl	$18, 16(%rbp)	#, outmode
	jne	.L555	#,
	.loc 1 1522 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.430
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L556	#,
	movl	$2, %eax	#, iftmp.429
	jmp	.L558	#
.L556:
	.loc 1 1522 0 discriminator 2
	movl	$3, %eax	#, iftmp.429
	jmp	.L558	#
.L555:
	cmpl	$24, 16(%rbp)	#, outmode
	jne	.L559	#,
	.loc 1 1522 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.433
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L560	#,
	movl	$4, %eax	#, iftmp.432
	jmp	.L558	#
.L560:
	.loc 1 1522 0 discriminator 2
	movl	$6, %eax	#, iftmp.432
	jmp	.L558	#
.L559:
	movl	16(%rbp), %eax	# outmode, outmode.434
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.436
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L563	#,
	.loc 1 1522 0 discriminator 1
	movl	$8, %eax	#, iftmp.435
	jmp	.L564	#
.L563:
	.loc 1 1522 0 discriminator 2
	movl	$4, %eax	#, iftmp.435
.L564:
	.loc 1 1522 0 discriminator 3
	addl	%edx, %eax	# D.23555, D.23555
	subl	$1, %eax	#, D.23555
	movl	target_flags(%rip), %edx	# target_flags, target_flags.438
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L565	#,
	.loc 1 1522 0 discriminator 1
	movl	$8, %ebx	#, iftmp.437
	jmp	.L566	#
.L565:
	.loc 1 1522 0 discriminator 2
	movl	$4, %ebx	#, iftmp.437
.L566:
	.loc 1 1522 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.437
.L558:
	movl	%eax, %ecx	# iftmp.428, iftmp.424
.L554:
	cmpl	$7, -72(%rbp)	#, regno
	jle	.L567	#,
	.loc 1 1522 0 discriminator 1
	cmpl	$15, -72(%rbp)	#, regno
	jle	.L568	#,
.L567:
	.loc 1 1522 0 discriminator 2
	cmpl	$20, -72(%rbp)	#, regno
	jle	.L569	#,
	.loc 1 1522 0 discriminator 1
	cmpl	$28, -72(%rbp)	#, regno
	jle	.L568	#,
.L569:
	.loc 1 1522 0 discriminator 2
	cmpl	$44, -72(%rbp)	#, regno
	jle	.L570	#,
	.loc 1 1522 0 discriminator 1
	cmpl	$52, -72(%rbp)	#, regno
	jle	.L568	#,
.L570:
	.loc 1 1522 0 discriminator 2
	cmpl	$28, -72(%rbp)	#, regno
	jle	.L571	#,
	.loc 1 1522 0 discriminator 1
	cmpl	$36, -72(%rbp)	#, regno
	jg	.L571	#,
.L568:
	movl	-184(%rbp), %eax	# inmode, inmode.441
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$5, %eax	#, D.23556
	je	.L572	#,
	.loc 1 1522 0 discriminator 2
	movl	-184(%rbp), %eax	# inmode, inmode.442
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23556
	cmpl	$6, %eax	#, D.23556
	jne	.L573	#,
.L572:
	.loc 1 1522 0 discriminator 1
	movl	$2, %eax	#, iftmp.440
	jmp	.L574	#
.L573:
	movl	$1, %eax	#, iftmp.440
.L574:
	.loc 1 1522 0 discriminator 3
	jmp	.L575	#
.L571:
	.loc 1 1522 0 discriminator 2
	cmpl	$18, -184(%rbp)	#, inmode
	jne	.L576	#,
	.loc 1 1522 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.445
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L577	#,
	movl	$2, %eax	#, iftmp.444
	jmp	.L575	#
.L577:
	.loc 1 1522 0 discriminator 2
	movl	$3, %eax	#, iftmp.444
	jmp	.L575	#
.L576:
	cmpl	$24, -184(%rbp)	#, inmode
	jne	.L580	#,
	.loc 1 1522 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.448
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L581	#,
	movl	$4, %eax	#, iftmp.447
	jmp	.L575	#
.L581:
	.loc 1 1522 0 discriminator 2
	movl	$6, %eax	#, iftmp.447
	jmp	.L575	#
.L580:
	movl	-184(%rbp), %eax	# inmode, inmode.449
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23547
	movzbl	%al, %edx	# D.23547, D.23555
	movl	target_flags(%rip), %eax	# target_flags, target_flags.451
	andl	$33554432, %eax	#, D.23555
	testl	%eax, %eax	# D.23555
	je	.L584	#,
	.loc 1 1522 0 discriminator 1
	movl	$8, %eax	#, iftmp.450
	jmp	.L585	#
.L584:
	.loc 1 1522 0 discriminator 2
	movl	$4, %eax	#, iftmp.450
.L585:
	.loc 1 1522 0 discriminator 3
	addl	%edx, %eax	# D.23555, D.23555
	subl	$1, %eax	#, D.23555
	movl	target_flags(%rip), %edx	# target_flags, target_flags.453
	andl	$33554432, %edx	#, D.23555
	testl	%edx, %edx	# D.23555
	je	.L586	#,
	.loc 1 1522 0 discriminator 1
	movl	$8, %ebx	#, iftmp.452
	jmp	.L587	#
.L586:
	.loc 1 1522 0 discriminator 2
	movl	$4, %ebx	#, iftmp.452
.L587:
	.loc 1 1522 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.452
.L575:
	cmpl	%eax, %ecx	# iftmp.439, iftmp.424
	cmovge	%ecx, %eax	# iftmp.424,, D.23555
	movl	%eax, -68(%rbp)	# D.23555, nregs
	.loc 1 1525 0 is_stmt 1 discriminator 3
	movl	$0, -96(%rbp)	#, offs
	jmp	.L588	#
.L590:
	.loc 1 1526 0
	movl	-72(%rbp), %edx	# regno, regno.454
	movl	-96(%rbp), %eax	# offs, tmp1385
	addl	%edx, %eax	# regno.454, D.23549
	movl	%eax, %eax	# D.23549, tmp1386
	movzbl	fixed_regs(%rax), %eax	# fixed_regs, D.23562
	testb	%al, %al	# D.23562
	jne	.L589	#,
	.loc 1 1527 0
	movl	-180(%rbp), %eax	# class, class.455
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23550
	movl	-72(%rbp), %ecx	# regno, regno.456
	movl	-96(%rbp), %eax	# offs, tmp1388
	addl	%ecx, %eax	# regno.456, D.23549
	movl	%eax, %ecx	# D.23555, tmp1421
	shrq	%cl, %rdx	# tmp1421, D.23550
	movq	%rdx, %rax	# D.23550, D.23550
	andl	$1, %eax	#, D.23550
	testq	%rax, %rax	# D.23550
	je	.L589	#,
	.loc 1 1525 0
	addl	$1, -96(%rbp)	#, offs
.L588:
	.loc 1 1525 0 is_stmt 0 discriminator 1
	movl	-96(%rbp), %eax	# offs, tmp1389
	cmpl	-68(%rbp), %eax	# nregs, tmp1389
	jb	.L590	#,
.L589:
	.loc 1 1531 0 is_stmt 1
	movl	-96(%rbp), %eax	# offs, tmp1390
	cmpl	-68(%rbp), %eax	# nregs, tmp1390
	jne	.L493	#,
	.loc 1 1533 0
	movl	-72(%rbp), %edx	# regno, tmp1391
	movl	-100(%rbp), %eax	# rel_mode, tmp1392
	movl	%edx, %esi	# tmp1391,
	movl	%eax, %edi	# tmp1392,
	call	gen_rtx_REG	#
	movq	%rax, %rcx	#, D.23554
	movl	-128(%rbp), %eax	# i, tmp1394
	movslq	%eax, %rdx	# tmp1394, tmp1393
	movq	%rdx, %rax	# tmp1393, tmp1395
	addq	%rax, %rax	# tmp1395
	addq	%rdx, %rax	# tmp1393, tmp1395
	salq	$2, %rax	#, tmp1395
	addq	%rdx, %rax	# tmp1393, tmp1395
	salq	$3, %rax	#, tmp1396
	addq	$rld+64, %rax	#, tmp1397
	movq	%rcx, (%rax)	# D.23554, rld[i_22].reg_rtx
	.loc 1 1534 0
	jmp	.L490	#
.L493:
.LBE15:
	.loc 1 1487 0
	movq	-40(%rbp), %rax	# note, tmp1398
	movq	16(%rax), %rax	# note_34->fld[1].rtx, tmp1399
	movq	%rax, -40(%rbp)	# tmp1399, note
.L492:
	.loc 1 1487 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, note
	jne	.L591	#,
.L490:
.LBE14:
	.loc 1 1539 0 is_stmt 1
	cmpq	$0, -160(%rbp)	#, out
	je	.L592	#,
	.loc 1 1540 0
	movl	-128(%rbp), %eax	# i, tmp1400
	movl	%eax, output_reloadnum(%rip)	# tmp1400, output_reloadnum
.L592:
	.loc 1 1542 0
	movl	-128(%rbp), %eax	# i, D.23555
	.loc 1 1543 0
	addq	$216, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	push_reload, .-push_reload
	.type	push_replacement, @function
push_replacement:
.LFB9:
	.loc 1 1556 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# loc, loc
	movl	%esi, -28(%rbp)	# reloadnum, reloadnum
	movl	%edx, -32(%rbp)	# mode, mode
	.loc 1 1557 0
	movl	replace_reloads(%rip), %eax	# replace_reloads, replace_reloads.457
	testl	%eax, %eax	# replace_reloads.457
	je	.L595	#,
.LBB16:
	.loc 1 1559 0
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.458
	leal	1(%rax), %edx	#, n_replacements.460
	movl	%edx, n_replacements(%rip)	# n_replacements.460, n_replacements
	movslq	%eax, %rdx	# n_replacements.459, tmp63
	movq	%rdx, %rax	# tmp63, tmp64
	addq	%rax, %rax	# tmp64
	addq	%rdx, %rax	# tmp63, tmp64
	salq	$3, %rax	#, tmp65
	addq	$replacements, %rax	#, tmp66
	movq	%rax, -8(%rbp)	# tmp66, r
	.loc 1 1560 0
	movq	-8(%rbp), %rax	# r, tmp67
	movl	-28(%rbp), %edx	# reloadnum, tmp68
	movl	%edx, 16(%rax)	# tmp68, r_5->what
	.loc 1 1561 0
	movq	-8(%rbp), %rax	# r, tmp69
	movq	-24(%rbp), %rdx	# loc, tmp70
	movq	%rdx, (%rax)	# tmp70, r_5->where
	.loc 1 1562 0
	movq	-8(%rbp), %rax	# r, tmp71
	movq	$0, 8(%rax)	#, r_5->subreg_loc
	.loc 1 1563 0
	movq	-8(%rbp), %rax	# r, tmp72
	movl	-32(%rbp), %edx	# mode, tmp73
	movl	%edx, 20(%rax)	# tmp73, r_5->mode
.L595:
.LBE16:
	.loc 1 1565 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	push_replacement, .-push_replacement
	.globl	transfer_replacements
	.type	transfer_replacements, @function
transfer_replacements:
.LFB10:
	.loc 1 1573 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -20(%rbp)	# to, to
	movl	%esi, -24(%rbp)	# from, from
	.loc 1 1576 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L598	#
.L600:
	.loc 1 1577 0
	movl	-4(%rbp), %eax	# i, tmp62
	movslq	%eax, %rdx	# tmp62, tmp61
	movq	%rdx, %rax	# tmp61, tmp63
	addq	%rax, %rax	# tmp63
	addq	%rdx, %rax	# tmp61, tmp63
	salq	$3, %rax	#, tmp64
	addq	$replacements+16, %rax	#, tmp65
	movl	(%rax), %eax	# replacements[i_1].what, D.23565
	cmpl	-24(%rbp), %eax	# from, D.23565
	jne	.L599	#,
	.loc 1 1578 0
	movl	-4(%rbp), %eax	# i, tmp67
	movslq	%eax, %rdx	# tmp67, tmp66
	movq	%rdx, %rax	# tmp66, tmp68
	addq	%rax, %rax	# tmp68
	addq	%rdx, %rax	# tmp66, tmp68
	salq	$3, %rax	#, tmp69
	leaq	replacements+16(%rax), %rdx	#, tmp70
	movl	-20(%rbp), %eax	# to, tmp71
	movl	%eax, (%rdx)	# tmp71, replacements[i_1].what
.L599:
	.loc 1 1576 0
	addl	$1, -4(%rbp)	#, i
.L598:
	.loc 1 1576 0 is_stmt 0 discriminator 1
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.461
	cmpl	%eax, -4(%rbp)	# n_replacements.461, i
	jl	.L600	#,
	.loc 1 1579 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	transfer_replacements, .-transfer_replacements
	.globl	remove_address_replacements
	.type	remove_address_replacements, @function
remove_address_replacements:
.LFB11:
	.loc 1 1588 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$232, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -232(%rbp)	# in_rtx, in_rtx
	.loc 1 1588 0
	movq	%fs:40, %rax	#, tmp136
	movq	%rax, -24(%rbp)	# tmp136, D.23571
	xorl	%eax, %eax	# tmp136
	.loc 1 1591 0
	movl	$0, -212(%rbp)	#, something_changed
	.loc 1 1593 0
	leaq	-208(%rbp), %rax	#, tmp76
	movl	$180, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp76,
	call	memset	#
	.loc 1 1594 0
	movl	$0, -220(%rbp)	#, i
	movl	$0, -216(%rbp)	#, j
	jmp	.L602	#
.L605:
	.loc 1 1596 0
	movl	-220(%rbp), %eax	# i, tmp78
	movslq	%eax, %rdx	# tmp78, tmp77
	movq	%rdx, %rax	# tmp77, tmp79
	addq	%rax, %rax	# tmp79
	addq	%rdx, %rax	# tmp77, tmp79
	salq	$3, %rax	#, tmp80
	addq	$replacements, %rax	#, tmp81
	movq	(%rax), %rax	# replacements[i_1].where, D.23566
	movq	-232(%rbp), %rdx	# in_rtx, tmp82
	movq	%rdx, %rsi	# tmp82,
	movq	%rax, %rdi	# D.23566,
	call	loc_mentioned_in_p	#
	testl	%eax, %eax	# D.23567
	je	.L603	#,
	.loc 1 1597 0
	movl	-220(%rbp), %eax	# i, tmp84
	movslq	%eax, %rdx	# tmp84, tmp83
	movq	%rdx, %rax	# tmp83, tmp85
	addq	%rax, %rax	# tmp85
	addq	%rdx, %rax	# tmp83, tmp85
	salq	$3, %rax	#, tmp86
	addq	$replacements+16, %rax	#, tmp87
	movl	(%rax), %ecx	# replacements[i_1].what, D.23567
	movl	-220(%rbp), %eax	# i, tmp89
	movslq	%eax, %rdx	# tmp89, tmp88
	movq	%rdx, %rax	# tmp88, tmp90
	addq	%rax, %rax	# tmp90
	addq	%rdx, %rax	# tmp88, tmp90
	salq	$3, %rax	#, tmp91
	addq	$replacements+16, %rax	#, tmp92
	movl	(%rax), %eax	# replacements[i_1].what, D.23567
	cltq
	movzbl	-208(%rbp,%rax), %eax	# reload_flags, D.23568
	orl	$1, %eax	#, D.23569
	movl	%eax, %edx	# D.23569, D.23569
	movslq	%ecx, %rax	# D.23567, tmp94
	movb	%dl, -208(%rbp,%rax)	# D.23569, reload_flags
	jmp	.L604	#
.L603:
	.loc 1 1600 0
	movl	-216(%rbp), %eax	# j, j.462
	leal	1(%rax), %edx	#, tmp95
	movl	%edx, -216(%rbp)	# tmp95, j
	movslq	%eax, %rdx	# j.462, tmp96
	movq	%rdx, %rax	# tmp96, tmp97
	addq	%rax, %rax	# tmp97
	addq	%rdx, %rax	# tmp96, tmp97
	salq	$3, %rax	#, tmp98
	leaq	replacements(%rax), %rdx	#, tmp99
	movl	-220(%rbp), %eax	# i, tmp101
	movslq	%eax, %rcx	# tmp101, tmp100
	movq	%rcx, %rax	# tmp100, tmp102
	addq	%rax, %rax	# tmp102
	addq	%rcx, %rax	# tmp100, tmp102
	salq	$3, %rax	#, tmp103
	addq	$replacements, %rax	#, tmp104
	movq	(%rax), %rcx	# replacements, tmp105
	movq	%rcx, (%rdx)	# tmp105, replacements
	movq	8(%rax), %rcx	# replacements, tmp106
	movq	%rcx, 8(%rdx)	# tmp106, replacements
	movq	16(%rax), %rax	# replacements, tmp107
	movq	%rax, 16(%rdx)	# tmp107, replacements
	.loc 1 1601 0
	movl	-220(%rbp), %eax	# i, tmp109
	movslq	%eax, %rdx	# tmp109, tmp108
	movq	%rdx, %rax	# tmp108, tmp110
	addq	%rax, %rax	# tmp110
	addq	%rdx, %rax	# tmp108, tmp110
	salq	$3, %rax	#, tmp111
	addq	$replacements+16, %rax	#, tmp112
	movl	(%rax), %ecx	# replacements[i_1].what, D.23567
	movl	-220(%rbp), %eax	# i, tmp114
	movslq	%eax, %rdx	# tmp114, tmp113
	movq	%rdx, %rax	# tmp113, tmp115
	addq	%rax, %rax	# tmp115
	addq	%rdx, %rax	# tmp113, tmp115
	salq	$3, %rax	#, tmp116
	addq	$replacements+16, %rax	#, tmp117
	movl	(%rax), %eax	# replacements[i_1].what, D.23567
	cltq
	movzbl	-208(%rbp,%rax), %eax	# reload_flags, D.23568
	orl	$2, %eax	#, D.23569
	movl	%eax, %edx	# D.23569, D.23569
	movslq	%ecx, %rax	# D.23567, tmp119
	movb	%dl, -208(%rbp,%rax)	# D.23569, reload_flags
.L604:
	.loc 1 1594 0
	addl	$1, -220(%rbp)	#, i
.L602:
	.loc 1 1594 0 is_stmt 0 discriminator 1
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.463
	cmpl	%eax, -220(%rbp)	# n_replacements.463, i
	jl	.L605	#,
	.loc 1 1605 0 is_stmt 1
	movl	-216(%rbp), %eax	# j, tmp120
	movl	%eax, n_replacements(%rip)	# tmp120, n_replacements
	.loc 1 1607 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.464
	subl	$1, %eax	#, tmp121
	movl	%eax, -220(%rbp)	# tmp121, i
	jmp	.L606	#
.L608:
	.loc 1 1609 0
	movl	-220(%rbp), %eax	# i, tmp123
	cltq
	movzbl	-208(%rbp,%rax), %eax	# reload_flags, D.23568
	cmpb	$1, %al	#, D.23568
	jne	.L607	#,
	.loc 1 1611 0
	movl	-220(%rbp), %eax	# i, tmp124
	movl	%eax, %edi	# tmp124,
	call	deallocate_reload_reg	#
	.loc 1 1612 0
	movl	-220(%rbp), %eax	# i, tmp126
	movslq	%eax, %rdx	# tmp126, tmp125
	movq	%rdx, %rax	# tmp125, tmp127
	addq	%rax, %rax	# tmp127
	addq	%rdx, %rax	# tmp125, tmp127
	salq	$2, %rax	#, tmp127
	addq	%rdx, %rax	# tmp125, tmp127
	salq	$3, %rax	#, tmp128
	addq	$rld, %rax	#, tmp129
	movq	(%rax), %rax	# rld[i_2].in, D.23570
	movq	%rax, %rdi	# D.23570,
	call	remove_address_replacements	#
	.loc 1 1613 0
	movl	-220(%rbp), %eax	# i, tmp131
	movslq	%eax, %rdx	# tmp131, tmp130
	movq	%rdx, %rax	# tmp130, tmp132
	addq	%rax, %rax	# tmp132
	addq	%rdx, %rax	# tmp130, tmp132
	salq	$2, %rax	#, tmp132
	addq	%rdx, %rax	# tmp130, tmp132
	salq	$3, %rax	#, tmp133
	addq	$rld, %rax	#, tmp134
	movq	$0, (%rax)	#, rld[i_2].in
	.loc 1 1614 0
	movl	$1, -212(%rbp)	#, something_changed
.L607:
	.loc 1 1607 0
	subl	$1, -220(%rbp)	#, i
.L606:
	.loc 1 1607 0 is_stmt 0 discriminator 1
	cmpl	$0, -220(%rbp)	#, i
	jns	.L608	#,
	.loc 1 1617 0 is_stmt 1
	movl	-212(%rbp), %eax	# something_changed, D.23567
	.loc 1 1618 0
	movq	-24(%rbp), %rbx	# D.23571, tmp137
	xorq	%fs:40, %rbx	#, tmp137
	je	.L610	#,
	call	__stack_chk_fail	#
.L610:
	addq	$232, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	remove_address_replacements, .-remove_address_replacements
	.type	combine_reloads, @function
combine_reloads:
.LFB12:
	.loc 1 1634 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	.loc 1 1636 0
	movl	$-1, -36(%rbp)	#, output_reload
	.loc 1 1637 0
	movl	$-1, -28(%rbp)	#, secondary_out
	.loc 1 1643 0
	movl	$0, -40(%rbp)	#, i
	jmp	.L612	#
.L616:
	.loc 1 1644 0
	movl	-40(%rbp), %eax	# i, tmp366
	movslq	%eax, %rdx	# tmp366, tmp365
	movq	%rdx, %rax	# tmp365, tmp367
	addq	%rax, %rax	# tmp367
	addq	%rdx, %rax	# tmp365, tmp367
	salq	$2, %rax	#, tmp367
	addq	%rdx, %rax	# tmp365, tmp367
	salq	$3, %rax	#, tmp368
	addq	$rld, %rax	#, tmp369
	movq	8(%rax), %rax	# rld[i_1].out, D.23574
	testq	%rax, %rax	# D.23574
	je	.L613	#,
	.loc 1 1646 0
	cmpl	$0, -36(%rbp)	#, output_reload
	js	.L614	#,
	.loc 1 1647 0
	jmp	.L611	#
.L614:
	.loc 1 1648 0
	movl	-40(%rbp), %eax	# i, tmp370
	movl	%eax, -36(%rbp)	# tmp370, output_reload
.L613:
	.loc 1 1643 0
	addl	$1, -40(%rbp)	#, i
.L612:
	.loc 1 1643 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.465
	cmpl	%eax, -40(%rbp)	# n_reloads.465, i
	jl	.L616	#,
	.loc 1 1651 0 is_stmt 1
	cmpl	$0, -36(%rbp)	#, output_reload
	js	.L617	#,
	.loc 1 1651 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %eax	# output_reload, tmp372
	movslq	%eax, %rdx	# tmp372, tmp371
	movq	%rdx, %rax	# tmp371, tmp373
	addq	%rax, %rax	# tmp373
	addq	%rdx, %rax	# tmp371, tmp373
	salq	$2, %rax	#, tmp373
	addq	%rdx, %rax	# tmp371, tmp373
	salq	$3, %rax	#, tmp374
	addq	$rld+96, %rax	#, tmp375
	movzbl	(%rax), %eax	#, tmp378
	andl	$1, %eax	#, D.23575
	testb	%al, %al	# D.23575
	je	.L618	#,
.L617:
	.loc 1 1652 0 is_stmt 1
	jmp	.L611	#
.L618:
	.loc 1 1656 0
	movl	-36(%rbp), %eax	# output_reload, tmp380
	movslq	%eax, %rdx	# tmp380, tmp379
	movq	%rdx, %rax	# tmp379, tmp381
	addq	%rax, %rax	# tmp381
	addq	%rdx, %rax	# tmp379, tmp381
	salq	$2, %rax	#, tmp381
	addq	%rdx, %rax	# tmp379, tmp381
	salq	$3, %rax	#, tmp382
	addq	$rld, %rax	#, tmp383
	movq	(%rax), %rax	# rld[output_reload_6].in, D.23574
	testq	%rax, %rax	# D.23574
	je	.L619	#,
	.loc 1 1657 0
	jmp	.L611	#
.L619:
	.loc 1 1660 0
	movl	-36(%rbp), %eax	# output_reload, tmp385
	movslq	%eax, %rdx	# tmp385, tmp384
	movq	%rdx, %rax	# tmp384, tmp386
	addq	%rax, %rax	# tmp386
	addq	%rdx, %rax	# tmp384, tmp386
	salq	$2, %rax	#, tmp386
	addq	%rdx, %rax	# tmp384, tmp386
	salq	$3, %rax	#, tmp387
	addq	$rld, %rax	#, tmp388
	movq	8(%rax), %rax	# rld[output_reload_6].out, D.23574
	movq	%rax, %rdi	# D.23574,
	call	earlyclobber_operand_p	#
	testl	%eax, %eax	# D.23576
	je	.L620	#,
	.loc 1 1661 0
	jmp	.L611	#
.L620:
	.loc 1 1667 0
	movl	$0, -40(%rbp)	#, i
	jmp	.L621	#
.L624:
	.loc 1 1668 0
	movl	-40(%rbp), %eax	# i, tmp390
	movslq	%eax, %rdx	# tmp390, tmp389
	movq	%rdx, %rax	# tmp389, tmp391
	addq	%rax, %rax	# tmp391
	addq	%rdx, %rax	# tmp389, tmp391
	salq	$2, %rax	#, tmp391
	addq	%rdx, %rax	# tmp389, tmp391
	salq	$3, %rax	#, tmp392
	addq	$rld+80, %rax	#, tmp393
	movl	12(%rax), %eax	# rld[i_2].when_needed, D.23577
	cmpl	$5, %eax	#, D.23577
	je	.L622	#,
	.loc 1 1669 0
	movl	-40(%rbp), %eax	# i, tmp395
	movslq	%eax, %rdx	# tmp395, tmp394
	movq	%rdx, %rax	# tmp394, tmp396
	addq	%rax, %rax	# tmp396
	addq	%rdx, %rax	# tmp394, tmp396
	salq	$2, %rax	#, tmp396
	addq	%rdx, %rax	# tmp394, tmp396
	salq	$3, %rax	#, tmp397
	addq	$rld+80, %rax	#, tmp398
	movl	12(%rax), %eax	# rld[i_2].when_needed, D.23577
	cmpl	$6, %eax	#, D.23577
	jne	.L623	#,
.L622:
	.loc 1 1670 0
	movl	-40(%rbp), %eax	# i, tmp400
	movslq	%eax, %rdx	# tmp400, tmp399
	movq	%rdx, %rax	# tmp399, tmp401
	addq	%rax, %rax	# tmp401
	addq	%rdx, %rax	# tmp399, tmp401
	salq	$2, %rax	#, tmp401
	addq	%rdx, %rax	# tmp399, tmp401
	salq	$3, %rax	#, tmp402
	addq	$rld+64, %rax	#, tmp403
	movl	8(%rax), %ecx	# rld[i_2].opnum, D.23576
	movl	-36(%rbp), %eax	# output_reload, tmp405
	movslq	%eax, %rdx	# tmp405, tmp404
	movq	%rdx, %rax	# tmp404, tmp406
	addq	%rax, %rax	# tmp406
	addq	%rdx, %rax	# tmp404, tmp406
	salq	$2, %rax	#, tmp406
	addq	%rdx, %rax	# tmp404, tmp406
	salq	$3, %rax	#, tmp407
	addq	$rld+64, %rax	#, tmp408
	movl	8(%rax), %eax	# rld[output_reload_6].opnum, D.23576
	cmpl	%eax, %ecx	# D.23576, D.23576
	jne	.L623	#,
	.loc 1 1671 0
	jmp	.L611	#
.L623:
	.loc 1 1667 0
	addl	$1, -40(%rbp)	#, i
.L621:
	.loc 1 1667 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.466
	cmpl	%eax, -40(%rbp)	# n_reloads.466, i
	jl	.L624	#,
	.loc 1 1675 0 is_stmt 1
	movl	$0, -40(%rbp)	#, i
	jmp	.L625	#
.L664:
	.loc 1 1676 0
	movl	-40(%rbp), %eax	# i, tmp410
	movslq	%eax, %rdx	# tmp410, tmp409
	movq	%rdx, %rax	# tmp409, tmp411
	addq	%rax, %rax	# tmp411
	addq	%rdx, %rax	# tmp409, tmp411
	salq	$2, %rax	#, tmp411
	addq	%rdx, %rax	# tmp409, tmp411
	salq	$3, %rax	#, tmp412
	addq	$rld, %rax	#, tmp413
	movq	(%rax), %rax	# rld[i_3].in, D.23574
	testq	%rax, %rax	# D.23574
	je	.L626	#,
	.loc 1 1676 0 is_stmt 0 discriminator 1
	movl	-40(%rbp), %eax	# i, tmp415
	movslq	%eax, %rdx	# tmp415, tmp414
	movq	%rdx, %rax	# tmp414, tmp416
	addq	%rax, %rax	# tmp416
	addq	%rdx, %rax	# tmp414, tmp416
	salq	$2, %rax	#, tmp416
	addq	%rdx, %rax	# tmp414, tmp416
	salq	$3, %rax	#, tmp417
	addq	$rld+96, %rax	#, tmp418
	movzbl	(%rax), %eax	#, tmp421
	andl	$1, %eax	#, D.23575
	testb	%al, %al	# D.23575
	jne	.L626	#,
	movl	-40(%rbp), %eax	# i, tmp423
	movslq	%eax, %rdx	# tmp423, tmp422
	movq	%rdx, %rax	# tmp422, tmp424
	addq	%rax, %rax	# tmp424
	addq	%rdx, %rax	# tmp422, tmp424
	salq	$2, %rax	#, tmp424
	addq	%rdx, %rax	# tmp422, tmp424
	salq	$3, %rax	#, tmp425
	addq	$rld+96, %rax	#, tmp426
	movzbl	(%rax), %eax	#, tmp429
	shrb	%al	# D.23575
	andl	$1, %eax	#, D.23575
	testb	%al, %al	# D.23575
	jne	.L626	#,
	.loc 1 1678 0 is_stmt 1
	movl	-40(%rbp), %eax	# i, tmp431
	movslq	%eax, %rdx	# tmp431, tmp430
	movq	%rdx, %rax	# tmp430, tmp432
	addq	%rax, %rax	# tmp432
	addq	%rdx, %rax	# tmp430, tmp432
	salq	$2, %rax	#, tmp432
	addq	%rdx, %rax	# tmp430, tmp432
	salq	$3, %rax	#, tmp433
	addq	$rld+80, %rax	#, tmp434
	movl	12(%rax), %eax	# rld[i_3].when_needed, D.23577
	cmpl	$5, %eax	#, D.23577
	je	.L626	#,
	.loc 1 1679 0
	movl	-40(%rbp), %eax	# i, tmp436
	movslq	%eax, %rdx	# tmp436, tmp435
	movq	%rdx, %rax	# tmp435, tmp437
	addq	%rax, %rax	# tmp437
	addq	%rdx, %rax	# tmp435, tmp437
	salq	$2, %rax	#, tmp437
	addq	%rdx, %rax	# tmp435, tmp437
	salq	$3, %rax	#, tmp438
	addq	$rld+80, %rax	#, tmp439
	movl	12(%rax), %eax	# rld[i_3].when_needed, D.23577
	cmpl	$6, %eax	#, D.23577
	je	.L626	#,
	.loc 1 1680 0
	movl	-40(%rbp), %eax	# i, tmp441
	movslq	%eax, %rdx	# tmp441, tmp440
	movq	%rdx, %rax	# tmp440, tmp442
	addq	%rax, %rax	# tmp442
	addq	%rdx, %rax	# tmp440, tmp442
	salq	$2, %rax	#, tmp442
	addq	%rdx, %rax	# tmp440, tmp442
	salq	$3, %rax	#, tmp443
	addq	$rld+80, %rax	#, tmp444
	movl	12(%rax), %eax	# rld[i_3].when_needed, D.23577
	cmpl	$9, %eax	#, D.23577
	je	.L626	#,
	.loc 1 1681 0
	movl	-40(%rbp), %eax	# i, tmp446
	movslq	%eax, %rdx	# tmp446, tmp445
	movq	%rdx, %rax	# tmp445, tmp447
	addq	%rax, %rax	# tmp447
	addq	%rdx, %rax	# tmp445, tmp447
	salq	$2, %rax	#, tmp447
	addq	%rdx, %rax	# tmp445, tmp447
	salq	$3, %rax	#, tmp448
	addq	$rld+16, %rax	#, tmp449
	movl	(%rax), %eax	# rld[i_3].class, D.23578
	movl	$12, %esi	#,
	movl	%eax, %edi	# D.23578,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.23576
	jne	.L627	#,
	.loc 1 1681 0 is_stmt 0 discriminator 1
	movl	-40(%rbp), %eax	# i, tmp451
	movslq	%eax, %rdx	# tmp451, tmp450
	movq	%rdx, %rax	# tmp450, tmp452
	addq	%rax, %rax	# tmp452
	addq	%rdx, %rax	# tmp450, tmp452
	salq	$2, %rax	#, tmp452
	addq	%rdx, %rax	# tmp450, tmp452
	salq	$3, %rax	#, tmp453
	addq	$rld+16, %rax	#, tmp454
	movl	4(%rax), %eax	# rld[i_3].inmode, D.23579
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23580
	cmpl	$5, %eax	#, D.23580
	je	.L628	#,
	.loc 1 1681 0 discriminator 2
	movl	-40(%rbp), %eax	# i, tmp457
	movslq	%eax, %rdx	# tmp457, tmp456
	movq	%rdx, %rax	# tmp456, tmp458
	addq	%rax, %rax	# tmp458
	addq	%rdx, %rax	# tmp456, tmp458
	salq	$2, %rax	#, tmp458
	addq	%rdx, %rax	# tmp456, tmp458
	salq	$3, %rax	#, tmp459
	addq	$rld+16, %rax	#, tmp460
	movl	4(%rax), %eax	# rld[i_3].inmode, D.23579
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23580
	cmpl	$6, %eax	#, D.23580
	jne	.L629	#,
.L628:
	.loc 1 1681 0 discriminator 1
	movl	$2, %eax	#, iftmp.468
	jmp	.L630	#
.L629:
	movl	$1, %eax	#, iftmp.468
.L630:
	.loc 1 1681 0 discriminator 3
	movl	%eax, %ebx	# iftmp.468, iftmp.467
	jmp	.L631	#
.L627:
	.loc 1 1681 0 discriminator 2
	movl	-40(%rbp), %eax	# i, tmp463
	movslq	%eax, %rdx	# tmp463, tmp462
	movq	%rdx, %rax	# tmp462, tmp464
	addq	%rax, %rax	# tmp464
	addq	%rdx, %rax	# tmp462, tmp464
	salq	$2, %rax	#, tmp464
	addq	%rdx, %rax	# tmp462, tmp464
	salq	$3, %rax	#, tmp465
	addq	$rld+16, %rax	#, tmp466
	movl	4(%rax), %eax	# rld[i_3].inmode, D.23579
	cmpl	$18, %eax	#, D.23579
	je	.L632	#,
	.loc 1 1681 0 discriminator 1
	movl	-40(%rbp), %eax	# i, tmp468
	movslq	%eax, %rdx	# tmp468, tmp467
	movq	%rdx, %rax	# tmp467, tmp469
	addq	%rax, %rax	# tmp469
	addq	%rdx, %rax	# tmp467, tmp469
	salq	$2, %rax	#, tmp469
	addq	%rdx, %rax	# tmp467, tmp469
	salq	$3, %rax	#, tmp470
	addq	$rld+16, %rax	#, tmp471
	movl	4(%rax), %eax	# rld[i_3].inmode, D.23579
	jmp	.L633	#
.L632:
	.loc 1 1681 0 discriminator 2
	movl	$17, %eax	#, iftmp.469
.L633:
	.loc 1 1681 0 discriminator 3
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23581
	movzbl	%al, %edx	# D.23581, D.23576
	movl	target_flags(%rip), %eax	# target_flags, target_flags.471
	andl	$33554432, %eax	#, D.23576
	testl	%eax, %eax	# D.23576
	je	.L634	#,
	.loc 1 1681 0 discriminator 1
	movl	$8, %eax	#, iftmp.470
	jmp	.L635	#
.L634:
	.loc 1 1681 0 discriminator 2
	movl	$4, %eax	#, iftmp.470
.L635:
	.loc 1 1681 0 discriminator 3
	addl	%edx, %eax	# D.23576, D.23576
	subl	$1, %eax	#, D.23576
	movl	target_flags(%rip), %edx	# target_flags, target_flags.473
	andl	$33554432, %edx	#, D.23576
	testl	%edx, %edx	# D.23576
	je	.L636	#,
	.loc 1 1681 0 discriminator 1
	movl	$8, %ebx	#, iftmp.472
	jmp	.L637	#
.L636:
	.loc 1 1681 0 discriminator 2
	movl	$4, %ebx	#, iftmp.472
.L637:
	.loc 1 1681 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.472
	movl	%eax, %ebx	# tmp473, iftmp.467
.L631:
	.loc 1 1682 0 is_stmt 1
	movl	-36(%rbp), %eax	# output_reload, tmp476
	movslq	%eax, %rdx	# tmp476, tmp475
	movq	%rdx, %rax	# tmp475, tmp477
	addq	%rax, %rax	# tmp477
	addq	%rdx, %rax	# tmp475, tmp477
	salq	$2, %rax	#, tmp477
	addq	%rdx, %rax	# tmp475, tmp477
	salq	$3, %rax	#, tmp478
	addq	$rld+16, %rax	#, tmp479
	movl	(%rax), %eax	# rld[output_reload_6].class, D.23578
	movl	$12, %esi	#,
	movl	%eax, %edi	# D.23578,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.23576
	jne	.L638	#,
	.loc 1 1682 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %eax	# output_reload, tmp481
	movslq	%eax, %rdx	# tmp481, tmp480
	movq	%rdx, %rax	# tmp480, tmp482
	addq	%rax, %rax	# tmp482
	addq	%rdx, %rax	# tmp480, tmp482
	salq	$2, %rax	#, tmp482
	addq	%rdx, %rax	# tmp480, tmp482
	salq	$3, %rax	#, tmp483
	addq	$rld+16, %rax	#, tmp484
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23580
	cmpl	$5, %eax	#, D.23580
	je	.L639	#,
	.loc 1 1682 0 discriminator 2
	movl	-36(%rbp), %eax	# output_reload, tmp487
	movslq	%eax, %rdx	# tmp487, tmp486
	movq	%rdx, %rax	# tmp486, tmp488
	addq	%rax, %rax	# tmp488
	addq	%rdx, %rax	# tmp486, tmp488
	salq	$2, %rax	#, tmp488
	addq	%rdx, %rax	# tmp486, tmp488
	salq	$3, %rax	#, tmp489
	addq	$rld+16, %rax	#, tmp490
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23580
	cmpl	$6, %eax	#, D.23580
	jne	.L640	#,
.L639:
	.loc 1 1682 0 discriminator 1
	movl	$2, %eax	#, iftmp.475
	jmp	.L641	#
.L640:
	movl	$1, %eax	#, iftmp.475
.L641:
	jmp	.L642	#
.L638:
	.loc 1 1682 0 discriminator 2
	movl	-36(%rbp), %eax	# output_reload, tmp493
	movslq	%eax, %rdx	# tmp493, tmp492
	movq	%rdx, %rax	# tmp492, tmp494
	addq	%rax, %rax	# tmp494
	addq	%rdx, %rax	# tmp492, tmp494
	salq	$2, %rax	#, tmp494
	addq	%rdx, %rax	# tmp492, tmp494
	salq	$3, %rax	#, tmp495
	addq	$rld+16, %rax	#, tmp496
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	cmpl	$18, %eax	#, D.23579
	je	.L643	#,
	.loc 1 1682 0 discriminator 1
	movl	-36(%rbp), %eax	# output_reload, tmp498
	movslq	%eax, %rdx	# tmp498, tmp497
	movq	%rdx, %rax	# tmp497, tmp499
	addq	%rax, %rax	# tmp499
	addq	%rdx, %rax	# tmp497, tmp499
	salq	$2, %rax	#, tmp499
	addq	%rdx, %rax	# tmp497, tmp499
	salq	$3, %rax	#, tmp500
	addq	$rld+16, %rax	#, tmp501
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	jmp	.L644	#
.L643:
	.loc 1 1682 0 discriminator 2
	movl	$17, %eax	#, iftmp.476
.L644:
	.loc 1 1682 0 discriminator 3
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23581
	movzbl	%al, %edx	# D.23581, D.23576
	movl	target_flags(%rip), %eax	# target_flags, target_flags.478
	andl	$33554432, %eax	#, D.23576
	testl	%eax, %eax	# D.23576
	je	.L645	#,
	.loc 1 1682 0 discriminator 1
	movl	$8, %eax	#, iftmp.477
	jmp	.L646	#
.L645:
	.loc 1 1682 0 discriminator 2
	movl	$4, %eax	#, iftmp.477
.L646:
	.loc 1 1682 0 discriminator 3
	addl	%edx, %eax	# D.23576, D.23576
	subl	$1, %eax	#, D.23576
	movl	target_flags(%rip), %edx	# target_flags, target_flags.480
	andl	$33554432, %edx	#, D.23576
	testl	%edx, %edx	# D.23576
	je	.L647	#,
	.loc 1 1682 0 discriminator 1
	movl	$8, %edi	#, iftmp.479
	jmp	.L648	#
.L647:
	.loc 1 1682 0 discriminator 2
	movl	$4, %edi	#, iftmp.479
.L648:
	.loc 1 1682 0 discriminator 3
	cltd
	idivl	%edi	# iftmp.479
.L642:
	.loc 1 1681 0 is_stmt 1
	cmpl	%eax, %ebx	# iftmp.474, iftmp.467
	jne	.L626	#,
	.loc 1 1684 0
	movl	-40(%rbp), %eax	# i, tmp506
	movslq	%eax, %rdx	# tmp506, tmp505
	movq	%rdx, %rax	# tmp505, tmp507
	addq	%rax, %rax	# tmp507
	addq	%rdx, %rax	# tmp505, tmp507
	salq	$2, %rax	#, tmp507
	addq	%rdx, %rax	# tmp505, tmp507
	salq	$3, %rax	#, tmp508
	addq	$rld+32, %rax	#, tmp509
	movl	4(%rax), %eax	# rld[i_3].inc, D.23576
	testl	%eax, %eax	# D.23576
	jne	.L626	#,
	.loc 1 1685 0
	movl	-40(%rbp), %eax	# i, tmp511
	movslq	%eax, %rdx	# tmp511, tmp510
	movq	%rdx, %rax	# tmp510, tmp512
	addq	%rax, %rax	# tmp512
	addq	%rdx, %rax	# tmp510, tmp512
	salq	$2, %rax	#, tmp512
	addq	%rdx, %rax	# tmp510, tmp512
	salq	$3, %rax	#, tmp513
	addq	$rld+64, %rax	#, tmp514
	movq	(%rax), %rax	# rld[i_3].reg_rtx, D.23574
	testq	%rax, %rax	# D.23574
	jne	.L626	#,
	.loc 1 1689 0
	movl	-36(%rbp), %eax	# output_reload, tmp516
	movslq	%eax, %rdx	# tmp516, tmp515
	movq	%rdx, %rax	# tmp515, tmp517
	addq	%rax, %rax	# tmp517
	addq	%rdx, %rax	# tmp515, tmp517
	salq	$2, %rax	#, tmp517
	addq	%rdx, %rax	# tmp515, tmp517
	salq	$3, %rax	#, tmp518
	addq	$rld+16, %rax	#, tmp519
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	movl	%eax, %esi	# D.23579, D.23576
	movl	-40(%rbp), %eax	# i, tmp521
	movslq	%eax, %rdx	# tmp521, tmp520
	movq	%rdx, %rax	# tmp520, tmp522
	addq	%rax, %rax	# tmp522
	addq	%rdx, %rax	# tmp520, tmp522
	salq	$2, %rax	#, tmp522
	addq	%rdx, %rax	# tmp520, tmp522
	salq	$3, %rax	#, tmp523
	addq	$rld+64, %rax	#, tmp524
	movl	8(%rax), %eax	# rld[i_3].opnum, D.23576
	movslq	%eax, %rcx	# D.23576, tmp525
	movslq	%esi, %rax	# D.23576, tmp526
	addq	%rax, %rax	# tmp528
	movq	%rax, %rdx	# tmp527, tmp529
	salq	$4, %rdx	#, tmp529
	subq	%rax, %rdx	# tmp527, tmp529
	leaq	(%rdx,%rcx), %rax	#, tmp530
	movq	secondary_memlocs_elim(,%rax,8), %rax	# secondary_memlocs_elim, D.23574
	testq	%rax, %rax	# D.23574
	je	.L649	#,
	.loc 1 1690 0
	movl	-36(%rbp), %eax	# output_reload, tmp532
	movslq	%eax, %rdx	# tmp532, tmp531
	movq	%rdx, %rax	# tmp531, tmp533
	addq	%rax, %rax	# tmp533
	addq	%rdx, %rax	# tmp531, tmp533
	salq	$2, %rax	#, tmp533
	addq	%rdx, %rax	# tmp531, tmp533
	salq	$3, %rax	#, tmp534
	addq	$rld+16, %rax	#, tmp535
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	movl	%eax, %esi	# D.23579, D.23576
	movl	-36(%rbp), %eax	# output_reload, tmp537
	movslq	%eax, %rdx	# tmp537, tmp536
	movq	%rdx, %rax	# tmp536, tmp538
	addq	%rax, %rax	# tmp538
	addq	%rdx, %rax	# tmp536, tmp538
	salq	$2, %rax	#, tmp538
	addq	%rdx, %rax	# tmp536, tmp538
	salq	$3, %rax	#, tmp539
	addq	$rld+64, %rax	#, tmp540
	movl	8(%rax), %eax	# rld[output_reload_6].opnum, D.23576
	movslq	%eax, %rcx	# D.23576, tmp541
	movslq	%esi, %rax	# D.23576, tmp542
	addq	%rax, %rax	# tmp544
	movq	%rax, %rdx	# tmp543, tmp545
	salq	$4, %rdx	#, tmp545
	subq	%rax, %rdx	# tmp543, tmp545
	leaq	(%rdx,%rcx), %rax	#, tmp546
	movq	secondary_memlocs_elim(,%rax,8), %rax	# secondary_memlocs_elim, D.23574
	testq	%rax, %rax	# D.23574
	je	.L649	#,
	.loc 1 1692 0
	movl	-36(%rbp), %eax	# output_reload, tmp548
	movslq	%eax, %rdx	# tmp548, tmp547
	movq	%rdx, %rax	# tmp547, tmp549
	addq	%rax, %rax	# tmp549
	addq	%rdx, %rax	# tmp547, tmp549
	salq	$2, %rax	#, tmp549
	addq	%rdx, %rax	# tmp547, tmp549
	salq	$3, %rax	#, tmp550
	addq	$rld+16, %rax	#, tmp551
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	movl	%eax, %esi	# D.23579, D.23576
	movl	-36(%rbp), %eax	# output_reload, tmp553
	movslq	%eax, %rdx	# tmp553, tmp552
	movq	%rdx, %rax	# tmp552, tmp554
	addq	%rax, %rax	# tmp554
	addq	%rdx, %rax	# tmp552, tmp554
	salq	$2, %rax	#, tmp554
	addq	%rdx, %rax	# tmp552, tmp554
	salq	$3, %rax	#, tmp555
	addq	$rld+64, %rax	#, tmp556
	movl	8(%rax), %eax	# rld[output_reload_6].opnum, D.23576
	.loc 1 1691 0
	movslq	%eax, %rcx	# D.23576, tmp557
	movslq	%esi, %rax	# D.23576, tmp558
	addq	%rax, %rax	# tmp560
	movq	%rax, %rdx	# tmp559, tmp561
	salq	$4, %rdx	#, tmp561
	subq	%rax, %rdx	# tmp559, tmp561
	leaq	(%rdx,%rcx), %rax	#, tmp562
	movq	secondary_memlocs_elim(,%rax,8), %rcx	# secondary_memlocs_elim, D.23574
	movl	-36(%rbp), %eax	# output_reload, tmp564
	movslq	%eax, %rdx	# tmp564, tmp563
	movq	%rdx, %rax	# tmp563, tmp565
	addq	%rax, %rax	# tmp565
	addq	%rdx, %rax	# tmp563, tmp565
	salq	$2, %rax	#, tmp565
	addq	%rdx, %rax	# tmp563, tmp565
	salq	$3, %rax	#, tmp566
	addq	$rld+16, %rax	#, tmp567
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	movl	%eax, %edi	# D.23579, D.23576
	movl	-40(%rbp), %eax	# i, tmp569
	movslq	%eax, %rdx	# tmp569, tmp568
	movq	%rdx, %rax	# tmp568, tmp570
	addq	%rax, %rax	# tmp570
	addq	%rdx, %rax	# tmp568, tmp570
	salq	$2, %rax	#, tmp570
	addq	%rdx, %rax	# tmp568, tmp570
	salq	$3, %rax	#, tmp571
	addq	$rld+64, %rax	#, tmp572
	movl	8(%rax), %eax	# rld[i_3].opnum, D.23576
	movslq	%eax, %rsi	# D.23576, tmp573
	movslq	%edi, %rax	# D.23576, tmp574
	addq	%rax, %rax	# tmp576
	movq	%rax, %rdx	# tmp575, tmp577
	salq	$4, %rdx	#, tmp577
	subq	%rax, %rdx	# tmp575, tmp577
	leaq	(%rdx,%rsi), %rax	#, tmp578
	movq	secondary_memlocs_elim(,%rax,8), %rax	# secondary_memlocs_elim, D.23574
	movq	%rcx, %rsi	# D.23574,
	movq	%rax, %rdi	# D.23574,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23576
	je	.L626	#,
.L649:
	.loc 1 1695 0
	movl	-40(%rbp), %eax	# i, tmp580
	movslq	%eax, %rdx	# tmp580, tmp579
	movq	%rdx, %rax	# tmp579, tmp581
	addq	%rax, %rax	# tmp581
	addq	%rdx, %rax	# tmp579, tmp581
	salq	$2, %rax	#, tmp581
	addq	%rdx, %rax	# tmp579, tmp581
	salq	$3, %rax	#, tmp582
	addq	$rld+16, %rax	#, tmp583
	movl	(%rax), %ecx	# rld[i_3].class, D.23578
	movl	-36(%rbp), %eax	# output_reload, tmp585
	movslq	%eax, %rdx	# tmp585, tmp584
	movq	%rdx, %rax	# tmp584, tmp586
	addq	%rax, %rax	# tmp586
	addq	%rdx, %rax	# tmp584, tmp586
	salq	$2, %rax	#, tmp586
	addq	%rdx, %rax	# tmp584, tmp586
	salq	$3, %rax	#, tmp587
	addq	$rld+16, %rax	#, tmp588
	movl	(%rax), %eax	# rld[output_reload_6].class, D.23578
	.loc 1 1694 0
	cmpl	%eax, %ecx	# D.23578, D.23578
	jne	.L626	#,
	.loc 1 1700 0
	movl	-40(%rbp), %eax	# i, tmp590
	movslq	%eax, %rdx	# tmp590, tmp589
	movq	%rdx, %rax	# tmp589, tmp591
	addq	%rax, %rax	# tmp591
	addq	%rdx, %rax	# tmp589, tmp591
	salq	$2, %rax	#, tmp591
	addq	%rdx, %rax	# tmp589, tmp591
	salq	$3, %rax	#, tmp592
	addq	$rld, %rax	#, tmp593
	movq	(%rax), %rcx	# rld[i_3].in, D.23574
	movl	-36(%rbp), %eax	# output_reload, tmp595
	movslq	%eax, %rdx	# tmp595, tmp594
	movq	%rdx, %rax	# tmp594, tmp596
	addq	%rax, %rax	# tmp596
	addq	%rdx, %rax	# tmp594, tmp596
	salq	$2, %rax	#, tmp596
	addq	%rdx, %rax	# tmp594, tmp596
	salq	$3, %rax	#, tmp597
	addq	$rld, %rax	#, tmp598
	movq	8(%rax), %rax	# rld[output_reload_6].out, D.23574
	cmpq	%rax, %rcx	# D.23574, D.23574
	je	.L650	#,
	.loc 1 1700 0 is_stmt 0 discriminator 1
	movl	-40(%rbp), %eax	# i, tmp600
	movslq	%eax, %rdx	# tmp600, tmp599
	movq	%rdx, %rax	# tmp599, tmp601
	addq	%rax, %rax	# tmp601
	addq	%rdx, %rax	# tmp599, tmp601
	salq	$2, %rax	#, tmp601
	addq	%rdx, %rax	# tmp599, tmp601
	salq	$3, %rax	#, tmp602
	addq	$rld, %rax	#, tmp603
	movq	(%rax), %rax	# rld[i_3].in, D.23574
	testq	%rax, %rax	# D.23574
	je	.L651	#,
	movl	-40(%rbp), %eax	# i, tmp605
	movslq	%eax, %rdx	# tmp605, tmp604
	movq	%rdx, %rax	# tmp604, tmp606
	addq	%rax, %rax	# tmp606
	addq	%rdx, %rax	# tmp604, tmp606
	salq	$2, %rax	#, tmp606
	addq	%rdx, %rax	# tmp604, tmp606
	salq	$3, %rax	#, tmp607
	addq	$rld, %rax	#, tmp608
	movq	(%rax), %rax	# rld[i_3].in, D.23574
	movzwl	(%rax), %eax	# _143->code, D.23582
	.loc 1 1694 0 is_stmt 1 discriminator 1
	cmpw	$61, %ax	#, D.23582
	jne	.L652	#,
	.loc 1 1700 0
	movl	-36(%rbp), %eax	# output_reload, tmp610
	movslq	%eax, %rdx	# tmp610, tmp609
	movq	%rdx, %rax	# tmp609, tmp611
	addq	%rax, %rax	# tmp611
	addq	%rdx, %rax	# tmp609, tmp611
	salq	$2, %rax	#, tmp611
	addq	%rdx, %rax	# tmp609, tmp611
	salq	$3, %rax	#, tmp612
	addq	$rld, %rax	#, tmp613
	movq	8(%rax), %rax	# rld[output_reload_6].out, D.23574
	movzwl	(%rax), %eax	# _145->code, D.23582
	cmpw	$61, %ax	#, D.23582
	jne	.L653	#,
	.loc 1 1700 0 is_stmt 0 discriminator 1
	movl	-40(%rbp), %eax	# i, tmp615
	movslq	%eax, %rdx	# tmp615, tmp614
	movq	%rdx, %rax	# tmp614, tmp616
	addq	%rax, %rax	# tmp616
	addq	%rdx, %rax	# tmp614, tmp616
	salq	$2, %rax	#, tmp616
	addq	%rdx, %rax	# tmp614, tmp616
	salq	$3, %rax	#, tmp617
	addq	$rld, %rax	#, tmp618
	movq	(%rax), %rax	# rld[i_3].in, D.23574
	movl	8(%rax), %ecx	# _147->fld[0].rtuint, D.23583
	movl	-36(%rbp), %eax	# output_reload, tmp620
	movslq	%eax, %rdx	# tmp620, tmp619
	movq	%rdx, %rax	# tmp619, tmp621
	addq	%rax, %rax	# tmp621
	addq	%rdx, %rax	# tmp619, tmp621
	salq	$2, %rax	#, tmp621
	addq	%rdx, %rax	# tmp619, tmp621
	salq	$3, %rax	#, tmp622
	addq	$rld, %rax	#, tmp623
	movq	8(%rax), %rax	# rld[output_reload_6].out, D.23574
	movl	8(%rax), %eax	# _149->fld[0].rtuint, D.23583
	cmpl	%eax, %ecx	# D.23583, D.23583
	jne	.L653	#,
	.loc 1 1700 0 discriminator 3
	movl	$1, %eax	#, iftmp.481
	jmp	.L654	#
.L653:
	.loc 1 1700 0 discriminator 2
	movl	$0, %eax	#, iftmp.481
.L654:
	.loc 1 1700 0 discriminator 4
	andl	$1, %eax	#, D.23584
	testb	%al, %al	# D.23584
	jne	.L650	#,
	jmp	.L651	#
.L652:
	.loc 1 1700 0
	movl	-36(%rbp), %eax	# output_reload, tmp625
	movslq	%eax, %rdx	# tmp625, tmp624
	movq	%rdx, %rax	# tmp624, tmp626
	addq	%rax, %rax	# tmp626
	addq	%rdx, %rax	# tmp624, tmp626
	salq	$2, %rax	#, tmp626
	addq	%rdx, %rax	# tmp624, tmp626
	salq	$3, %rax	#, tmp627
	addq	$rld, %rax	#, tmp628
	movq	8(%rax), %rcx	# rld[output_reload_6].out, D.23574
	movl	-40(%rbp), %eax	# i, tmp630
	movslq	%eax, %rdx	# tmp630, tmp629
	movq	%rdx, %rax	# tmp629, tmp631
	addq	%rax, %rax	# tmp631
	addq	%rdx, %rax	# tmp629, tmp631
	salq	$2, %rax	#, tmp631
	addq	%rdx, %rax	# tmp629, tmp631
	salq	$3, %rax	#, tmp632
	addq	$rld, %rax	#, tmp633
	movq	(%rax), %rax	# rld[i_3].in, D.23574
	movq	%rcx, %rsi	# D.23574,
	movq	%rax, %rdi	# D.23574,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23576
	je	.L655	#,
	.loc 1 1700 0 discriminator 1
	movl	-40(%rbp), %eax	# i, tmp635
	movslq	%eax, %rdx	# tmp635, tmp634
	movq	%rdx, %rax	# tmp634, tmp636
	addq	%rax, %rax	# tmp636
	addq	%rdx, %rax	# tmp634, tmp636
	salq	$2, %rax	#, tmp636
	addq	%rdx, %rax	# tmp634, tmp636
	salq	$3, %rax	#, tmp637
	addq	$rld, %rax	#, tmp638
	movq	(%rax), %rax	# rld[i_3].in, D.23574
	movq	%rax, %rdi	# D.23574,
	call	side_effects_p	#
	testl	%eax, %eax	# D.23576
	jne	.L655	#,
	.loc 1 1700 0 discriminator 3
	movl	$1, %eax	#, iftmp.482
	jmp	.L656	#
.L655:
	.loc 1 1700 0 discriminator 2
	movl	$0, %eax	#, iftmp.482
.L656:
	.loc 1 1700 0 discriminator 4
	andl	$1, %eax	#, D.23584
	testb	%al, %al	# D.23584
	jne	.L650	#,
.L651:
	.loc 1 1704 0 is_stmt 1
	movl	-40(%rbp), %eax	# i, tmp640
	movslq	%eax, %rdx	# tmp640, tmp639
	movq	%rdx, %rax	# tmp639, tmp641
	addq	%rax, %rax	# tmp641
	addq	%rdx, %rax	# tmp639, tmp641
	salq	$2, %rax	#, tmp641
	addq	%rdx, %rax	# tmp639, tmp641
	salq	$3, %rax	#, tmp642
	addq	$rld, %rax	#, tmp643
	movq	(%rax), %rcx	# rld[i_3].in, D.23574
	movl	-36(%rbp), %eax	# output_reload, tmp645
	movslq	%eax, %rdx	# tmp645, tmp644
	movq	%rdx, %rax	# tmp644, tmp646
	addq	%rax, %rax	# tmp646
	addq	%rdx, %rax	# tmp644, tmp646
	salq	$2, %rax	#, tmp646
	addq	%rdx, %rax	# tmp644, tmp646
	salq	$3, %rax	#, tmp647
	addq	$rld, %rax	#, tmp648
	movq	8(%rax), %rax	# rld[output_reload_6].out, D.23574
	movq	%rcx, %rsi	# D.23574,
	movq	%rax, %rdi	# D.23574,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.23576
	jne	.L626	#,
	.loc 1 1712 0
	movl	-40(%rbp), %eax	# i, tmp650
	movslq	%eax, %rdx	# tmp650, tmp649
	movq	%rdx, %rax	# tmp649, tmp651
	addq	%rax, %rax	# tmp651
	addq	%rdx, %rax	# tmp649, tmp651
	salq	$2, %rax	#, tmp651
	addq	%rdx, %rax	# tmp649, tmp651
	salq	$3, %rax	#, tmp652
	addq	$rld, %rax	#, tmp653
	movq	(%rax), %rax	# rld[i_3].in, D.23574
	movzwl	(%rax), %eax	# _165->code, D.23582
	cmpw	$61, %ax	#, D.23582
	jne	.L650	#,
	.loc 1 1713 0 discriminator 1
	movl	-36(%rbp), %eax	# output_reload, tmp655
	movslq	%eax, %rdx	# tmp655, tmp654
	movq	%rdx, %rax	# tmp654, tmp656
	addq	%rax, %rax	# tmp656
	addq	%rdx, %rax	# tmp654, tmp656
	salq	$2, %rax	#, tmp656
	addq	%rdx, %rax	# tmp654, tmp656
	salq	$3, %rax	#, tmp657
	addq	$rld, %rax	#, tmp658
	movq	8(%rax), %rcx	# rld[output_reload_6].out, D.23574
	movl	-40(%rbp), %eax	# i, tmp660
	movslq	%eax, %rdx	# tmp660, tmp659
	movq	%rdx, %rax	# tmp659, tmp661
	addq	%rax, %rax	# tmp661
	addq	%rdx, %rax	# tmp659, tmp661
	salq	$2, %rax	#, tmp661
	addq	%rdx, %rax	# tmp659, tmp661
	salq	$3, %rax	#, tmp662
	addq	$rld, %rax	#, tmp663
	movq	(%rax), %rax	# rld[i_3].in, D.23574
	movq	%rcx, %rsi	# D.23574,
	movq	%rax, %rdi	# D.23574,
	call	reg_overlap_mentioned_for_reload_p	#
	.loc 1 1712 0 discriminator 1
	testl	%eax, %eax	# D.23576
	jne	.L626	#,
.L650:
	.loc 1 1715 0
	movl	-40(%rbp), %eax	# i, tmp665
	movslq	%eax, %rdx	# tmp665, tmp664
	movq	%rdx, %rax	# tmp664, tmp666
	addq	%rax, %rax	# tmp666
	addq	%rdx, %rax	# tmp664, tmp666
	salq	$2, %rax	#, tmp666
	addq	%rdx, %rax	# tmp664, tmp666
	salq	$3, %rax	#, tmp667
	addq	$rld+16, %rax	#, tmp668
	movl	4(%rax), %ecx	# rld[i_3].inmode, D.23579
	movl	-40(%rbp), %eax	# i, tmp670
	movslq	%eax, %rdx	# tmp670, tmp669
	movq	%rdx, %rax	# tmp669, tmp671
	addq	%rax, %rax	# tmp671
	addq	%rdx, %rax	# tmp669, tmp671
	salq	$2, %rax	#, tmp671
	addq	%rdx, %rax	# tmp669, tmp671
	salq	$3, %rax	#, tmp672
	addq	$rld, %rax	#, tmp673
	movq	(%rax), %rax	# rld[i_3].in, D.23574
	movl	%ecx, %esi	# D.23579,
	movq	%rax, %rdi	# D.23574,
	call	reload_inner_reg_of_subreg	#
	testl	%eax, %eax	# D.23576
	jne	.L626	#,
	.loc 1 1720 0
	movl	-40(%rbp), %eax	# i, tmp675
	movslq	%eax, %rdx	# tmp675, tmp674
	movq	%rdx, %rax	# tmp674, tmp676
	addq	%rax, %rax	# tmp676
	addq	%rdx, %rax	# tmp674, tmp676
	salq	$2, %rax	#, tmp676
	addq	%rdx, %rax	# tmp674, tmp676
	salq	$3, %rax	#, tmp677
	addq	$rld+80, %rax	#, tmp678
	movl	12(%rax), %eax	# rld[i_3].when_needed, D.23577
	testl	%eax, %eax	# D.23577
	je	.L657	#,
	.loc 1 1721 0
	movl	-40(%rbp), %eax	# i, tmp680
	movslq	%eax, %rdx	# tmp680, tmp679
	movq	%rdx, %rax	# tmp679, tmp681
	addq	%rax, %rax	# tmp681
	addq	%rdx, %rax	# tmp679, tmp681
	salq	$2, %rax	#, tmp681
	addq	%rdx, %rax	# tmp679, tmp681
	salq	$3, %rax	#, tmp682
	addq	$rld+80, %rax	#, tmp683
	movl	12(%rax), %eax	# rld[i_3].when_needed, D.23577
	cmpl	$1, %eax	#, D.23577
	jne	.L626	#,
.L657:
.LBB17:
	.loc 1 1726 0
	movl	-36(%rbp), %eax	# output_reload, tmp685
	movslq	%eax, %rdx	# tmp685, tmp684
	movq	%rdx, %rax	# tmp684, tmp686
	addq	%rax, %rax	# tmp686
	addq	%rdx, %rax	# tmp684, tmp686
	salq	$2, %rax	#, tmp686
	addq	%rdx, %rax	# tmp684, tmp686
	salq	$3, %rax	#, tmp687
	addq	$rld, %rax	#, tmp688
	movq	8(%rax), %rcx	# rld[output_reload_6].out, D.23574
	movl	-40(%rbp), %eax	# i, tmp690
	movslq	%eax, %rdx	# tmp690, tmp689
	movq	%rdx, %rax	# tmp689, tmp691
	addq	%rax, %rax	# tmp691
	addq	%rdx, %rax	# tmp689, tmp691
	salq	$2, %rax	#, tmp691
	addq	%rdx, %rax	# tmp689, tmp691
	salq	$3, %rax	#, tmp692
	addq	$rld, %rax	#, tmp693
	movq	%rcx, 8(%rax)	# D.23574, rld[i_3].out
	.loc 1 1727 0
	movl	-36(%rbp), %eax	# output_reload, tmp695
	movslq	%eax, %rdx	# tmp695, tmp694
	movq	%rdx, %rax	# tmp694, tmp696
	addq	%rax, %rax	# tmp696
	addq	%rdx, %rax	# tmp694, tmp696
	salq	$2, %rax	#, tmp696
	addq	%rdx, %rax	# tmp694, tmp696
	salq	$3, %rax	#, tmp697
	addq	$rld+48, %rax	#, tmp698
	movq	(%rax), %rcx	# rld[output_reload_6].out_reg, D.23574
	movl	-40(%rbp), %eax	# i, tmp700
	movslq	%eax, %rdx	# tmp700, tmp699
	movq	%rdx, %rax	# tmp699, tmp701
	addq	%rax, %rax	# tmp701
	addq	%rdx, %rax	# tmp699, tmp701
	salq	$2, %rax	#, tmp701
	addq	%rdx, %rax	# tmp699, tmp701
	salq	$3, %rax	#, tmp702
	addq	$rld+48, %rax	#, tmp703
	movq	%rcx, (%rax)	# D.23574, rld[i_3].out_reg
	.loc 1 1728 0
	movl	-36(%rbp), %eax	# output_reload, tmp705
	movslq	%eax, %rdx	# tmp705, tmp704
	movq	%rdx, %rax	# tmp704, tmp706
	addq	%rax, %rax	# tmp706
	addq	%rdx, %rax	# tmp704, tmp706
	salq	$2, %rax	#, tmp706
	addq	%rdx, %rax	# tmp704, tmp706
	salq	$3, %rax	#, tmp707
	addq	$rld+16, %rax	#, tmp708
	movl	8(%rax), %ecx	# rld[output_reload_6].outmode, D.23579
	movl	-40(%rbp), %eax	# i, tmp710
	movslq	%eax, %rdx	# tmp710, tmp709
	movq	%rdx, %rax	# tmp709, tmp711
	addq	%rax, %rax	# tmp711
	addq	%rdx, %rax	# tmp709, tmp711
	salq	$2, %rax	#, tmp711
	addq	%rdx, %rax	# tmp709, tmp711
	salq	$3, %rax	#, tmp712
	addq	$rld+16, %rax	#, tmp713
	movl	%ecx, 8(%rax)	# D.23579, rld[i_3].outmode
	.loc 1 1730 0
	movl	-36(%rbp), %eax	# output_reload, tmp715
	movslq	%eax, %rdx	# tmp715, tmp714
	movq	%rdx, %rax	# tmp714, tmp716
	addq	%rax, %rax	# tmp716
	addq	%rdx, %rax	# tmp714, tmp716
	salq	$2, %rax	#, tmp716
	addq	%rdx, %rax	# tmp714, tmp716
	salq	$3, %rax	#, tmp717
	addq	$rld, %rax	#, tmp718
	movq	$0, 8(%rax)	#, rld[output_reload_6].out
	.loc 1 1732 0
	movl	-40(%rbp), %eax	# i, tmp720
	movslq	%eax, %rdx	# tmp720, tmp719
	movq	%rdx, %rax	# tmp719, tmp721
	addq	%rax, %rax	# tmp721
	addq	%rdx, %rax	# tmp719, tmp721
	salq	$2, %rax	#, tmp721
	addq	%rdx, %rax	# tmp719, tmp721
	salq	$3, %rax	#, tmp722
	addq	$rld+80, %rax	#, tmp723
	movl	$9, 12(%rax)	#, rld[i_3].when_needed
	.loc 1 1734 0
	movl	-36(%rbp), %eax	# output_reload, tmp725
	movslq	%eax, %rdx	# tmp725, tmp724
	movq	%rdx, %rax	# tmp724, tmp726
	addq	%rax, %rax	# tmp726
	addq	%rdx, %rax	# tmp724, tmp726
	salq	$2, %rax	#, tmp726
	addq	%rdx, %rax	# tmp724, tmp726
	salq	$3, %rax	#, tmp727
	addq	$rld+80, %rax	#, tmp728
	movl	(%rax), %eax	# rld[output_reload_6].secondary_out_reload, D.23576
	cmpl	$-1, %eax	#, D.23576
	je	.L658	#,
	.loc 1 1737 0
	movl	-36(%rbp), %eax	# output_reload, tmp730
	movslq	%eax, %rdx	# tmp730, tmp729
	movq	%rdx, %rax	# tmp729, tmp731
	addq	%rax, %rax	# tmp731
	addq	%rdx, %rax	# tmp729, tmp731
	salq	$2, %rax	#, tmp731
	addq	%rdx, %rax	# tmp729, tmp731
	salq	$3, %rax	#, tmp732
	addq	$rld+80, %rax	#, tmp733
	movl	(%rax), %ecx	# rld[output_reload_6].secondary_out_reload, D.23576
	movl	-40(%rbp), %eax	# i, tmp735
	movslq	%eax, %rdx	# tmp735, tmp734
	movq	%rdx, %rax	# tmp734, tmp736
	addq	%rax, %rax	# tmp736
	addq	%rdx, %rax	# tmp734, tmp736
	salq	$2, %rax	#, tmp736
	addq	%rdx, %rax	# tmp734, tmp736
	salq	$3, %rax	#, tmp737
	addq	$rld+80, %rax	#, tmp738
	movl	%ecx, (%rax)	# D.23576, rld[i_3].secondary_out_reload
	.loc 1 1739 0
	movl	-36(%rbp), %eax	# output_reload, tmp740
	movslq	%eax, %rdx	# tmp740, tmp739
	movq	%rdx, %rax	# tmp739, tmp741
	addq	%rax, %rax	# tmp741
	addq	%rdx, %rax	# tmp739, tmp741
	salq	$2, %rax	#, tmp741
	addq	%rdx, %rax	# tmp739, tmp741
	salq	$3, %rax	#, tmp742
	addq	$rld+80, %rax	#, tmp743
	movl	8(%rax), %ecx	# rld[output_reload_6].secondary_out_icode, D.23585
	movl	-40(%rbp), %eax	# i, tmp745
	movslq	%eax, %rdx	# tmp745, tmp744
	movq	%rdx, %rax	# tmp744, tmp746
	addq	%rax, %rax	# tmp746
	addq	%rdx, %rax	# tmp744, tmp746
	salq	$2, %rax	#, tmp746
	addq	%rdx, %rax	# tmp744, tmp746
	salq	$3, %rax	#, tmp747
	addq	$rld+80, %rax	#, tmp748
	movl	%ecx, 8(%rax)	# D.23585, rld[i_3].secondary_out_icode
.L658:
	.loc 1 1744 0
	movl	-36(%rbp), %eax	# output_reload, tmp750
	movslq	%eax, %rdx	# tmp750, tmp749
	movq	%rdx, %rax	# tmp749, tmp751
	addq	%rax, %rax	# tmp751
	addq	%rdx, %rax	# tmp749, tmp751
	salq	$2, %rax	#, tmp751
	addq	%rdx, %rax	# tmp749, tmp751
	salq	$3, %rax	#, tmp752
	addq	$rld+16, %rax	#, tmp753
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	movl	%eax, %esi	# D.23579, D.23576
	movl	-36(%rbp), %eax	# output_reload, tmp755
	movslq	%eax, %rdx	# tmp755, tmp754
	movq	%rdx, %rax	# tmp754, tmp756
	addq	%rax, %rax	# tmp756
	addq	%rdx, %rax	# tmp754, tmp756
	salq	$2, %rax	#, tmp756
	addq	%rdx, %rax	# tmp754, tmp756
	salq	$3, %rax	#, tmp757
	addq	$rld+64, %rax	#, tmp758
	movl	8(%rax), %eax	# rld[output_reload_6].opnum, D.23576
	movslq	%eax, %rcx	# D.23576, tmp759
	movslq	%esi, %rax	# D.23576, tmp760
	addq	%rax, %rax	# tmp762
	movq	%rax, %rdx	# tmp761, tmp763
	salq	$4, %rdx	#, tmp763
	subq	%rax, %rdx	# tmp761, tmp763
	leaq	(%rdx,%rcx), %rax	#, tmp764
	movq	secondary_memlocs_elim(,%rax,8), %rax	# secondary_memlocs_elim, D.23574
	testq	%rax, %rax	# D.23574
	je	.L659	#,
	.loc 1 1745 0
	movl	-36(%rbp), %eax	# output_reload, tmp766
	movslq	%eax, %rdx	# tmp766, tmp765
	movq	%rdx, %rax	# tmp765, tmp767
	addq	%rax, %rax	# tmp767
	addq	%rdx, %rax	# tmp765, tmp767
	salq	$2, %rax	#, tmp767
	addq	%rdx, %rax	# tmp765, tmp767
	salq	$3, %rax	#, tmp768
	addq	$rld+16, %rax	#, tmp769
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	movl	%eax, %edi	# D.23579, D.23576
	movl	-40(%rbp), %eax	# i, tmp771
	movslq	%eax, %rdx	# tmp771, tmp770
	movq	%rdx, %rax	# tmp770, tmp772
	addq	%rax, %rax	# tmp772
	addq	%rdx, %rax	# tmp770, tmp772
	salq	$2, %rax	#, tmp772
	addq	%rdx, %rax	# tmp770, tmp772
	salq	$3, %rax	#, tmp773
	addq	$rld+64, %rax	#, tmp774
	movl	8(%rax), %esi	# rld[i_3].opnum, D.23576
	.loc 1 1746 0
	movl	-36(%rbp), %eax	# output_reload, tmp776
	movslq	%eax, %rdx	# tmp776, tmp775
	movq	%rdx, %rax	# tmp775, tmp777
	addq	%rax, %rax	# tmp777
	addq	%rdx, %rax	# tmp775, tmp777
	salq	$2, %rax	#, tmp777
	addq	%rdx, %rax	# tmp775, tmp777
	salq	$3, %rax	#, tmp778
	addq	$rld+16, %rax	#, tmp779
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	movl	%eax, %r8d	# D.23579, D.23576
	movl	-36(%rbp), %eax	# output_reload, tmp781
	movslq	%eax, %rdx	# tmp781, tmp780
	movq	%rdx, %rax	# tmp780, tmp782
	addq	%rax, %rax	# tmp782
	addq	%rdx, %rax	# tmp780, tmp782
	salq	$2, %rax	#, tmp782
	addq	%rdx, %rax	# tmp780, tmp782
	salq	$3, %rax	#, tmp783
	addq	$rld+64, %rax	#, tmp784
	movl	8(%rax), %eax	# rld[output_reload_6].opnum, D.23576
	movslq	%eax, %rcx	# D.23576, tmp785
	movslq	%r8d, %rax	# D.23576, tmp786
	addq	%rax, %rax	# tmp788
	movq	%rax, %rdx	# tmp787, tmp789
	salq	$4, %rdx	#, tmp789
	subq	%rax, %rdx	# tmp787, tmp789
	leaq	(%rdx,%rcx), %rax	#, tmp790
	movq	secondary_memlocs_elim(,%rax,8), %rcx	# secondary_memlocs_elim, D.23574
	movslq	%esi, %rsi	# D.23576, tmp791
	movslq	%edi, %rax	# D.23576, tmp792
	addq	%rax, %rax	# tmp794
	movq	%rax, %rdx	# tmp793, tmp795
	salq	$4, %rdx	#, tmp795
	subq	%rax, %rdx	# tmp793, tmp795
	leaq	(%rdx,%rsi), %rax	#, tmp796
	movq	%rcx, secondary_memlocs_elim(,%rax,8)	# D.23574, secondary_memlocs_elim
.L659:
	.loc 1 1749 0
	movl	-40(%rbp), %eax	# i, tmp798
	movslq	%eax, %rdx	# tmp798, tmp797
	movq	%rdx, %rax	# tmp797, tmp799
	addq	%rax, %rax	# tmp799
	addq	%rdx, %rax	# tmp797, tmp799
	salq	$2, %rax	#, tmp799
	addq	%rdx, %rax	# tmp797, tmp799
	salq	$3, %rax	#, tmp800
	addq	$rld+16, %rax	#, tmp801
	movl	(%rax), %ecx	# rld[i_3].class, D.23578
	movl	-36(%rbp), %eax	# output_reload, tmp803
	movslq	%eax, %rdx	# tmp803, tmp802
	movq	%rdx, %rax	# tmp802, tmp804
	addq	%rax, %rax	# tmp804
	addq	%rdx, %rax	# tmp802, tmp804
	salq	$2, %rax	#, tmp804
	addq	%rdx, %rax	# tmp802, tmp804
	salq	$3, %rax	#, tmp805
	addq	$rld+16, %rax	#, tmp806
	movl	(%rax), %eax	# rld[output_reload_6].class, D.23578
	movl	%ecx, %esi	# D.23578,
	movl	%eax, %edi	# D.23578,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23576
	je	.L660	#,
	.loc 1 1751 0
	movl	-36(%rbp), %eax	# output_reload, tmp808
	movslq	%eax, %rdx	# tmp808, tmp807
	movq	%rdx, %rax	# tmp807, tmp809
	addq	%rax, %rax	# tmp809
	addq	%rdx, %rax	# tmp807, tmp809
	salq	$2, %rax	#, tmp809
	addq	%rdx, %rax	# tmp807, tmp809
	salq	$3, %rax	#, tmp810
	addq	$rld+16, %rax	#, tmp811
	movl	(%rax), %ecx	# rld[output_reload_6].class, D.23578
	movl	-40(%rbp), %eax	# i, tmp813
	movslq	%eax, %rdx	# tmp813, tmp812
	movq	%rdx, %rax	# tmp812, tmp814
	addq	%rax, %rax	# tmp814
	addq	%rdx, %rax	# tmp812, tmp814
	salq	$2, %rax	#, tmp814
	addq	%rdx, %rax	# tmp812, tmp814
	salq	$3, %rax	#, tmp815
	addq	$rld+16, %rax	#, tmp816
	movl	%ecx, (%rax)	# D.23578, rld[i_3].class
.L660:
	.loc 1 1754 0
	movl	$0, -32(%rbp)	#, j
	jmp	.L661	#
.L663:
	.loc 1 1755 0
	movl	-32(%rbp), %eax	# j, tmp818
	movslq	%eax, %rdx	# tmp818, tmp817
	movq	%rdx, %rax	# tmp817, tmp819
	addq	%rax, %rax	# tmp819
	addq	%rdx, %rax	# tmp817, tmp819
	salq	$3, %rax	#, tmp820
	addq	$replacements+16, %rax	#, tmp821
	movl	(%rax), %eax	# replacements[j_8].what, D.23576
	cmpl	-36(%rbp), %eax	# output_reload, D.23576
	jne	.L662	#,
	.loc 1 1756 0
	movl	-32(%rbp), %eax	# j, tmp823
	movslq	%eax, %rdx	# tmp823, tmp822
	movq	%rdx, %rax	# tmp822, tmp824
	addq	%rax, %rax	# tmp824
	addq	%rdx, %rax	# tmp822, tmp824
	salq	$3, %rax	#, tmp825
	leaq	replacements+16(%rax), %rdx	#, tmp826
	movl	-40(%rbp), %eax	# i, tmp827
	movl	%eax, (%rdx)	# tmp827, replacements[j_8].what
.L662:
	.loc 1 1754 0
	addl	$1, -32(%rbp)	#, j
.L661:
	.loc 1 1754 0 is_stmt 0 discriminator 1
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.483
	cmpl	%eax, -32(%rbp)	# n_replacements.483, j
	jl	.L663	#,
	.loc 1 1758 0 is_stmt 1
	jmp	.L611	#
.L626:
.LBE17:
	.loc 1 1675 0
	addl	$1, -40(%rbp)	#, i
.L625:
	.loc 1 1675 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.484
	cmpl	%eax, -40(%rbp)	# n_reloads.484, i
	jl	.L664	#,
	.loc 1 1767 0 is_stmt 1
	movq	this_insn(%rip), %rax	# this_insn, this_insn.485
	movl	40(%rax), %eax	# this_insn.485_201->fld[4].rtint, D.23576
	cmpl	$-1, %eax	#, D.23576
	jne	.L665	#,
	.loc 1 1768 0
	jmp	.L611	#
.L665:
	.loc 1 1770 0
	movl	$1, -40(%rbp)	#, i
	jmp	.L666	#
.L669:
	.loc 1 1771 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.486
	movl	40(%rax), %eax	# this_insn.486_208->fld[4].rtint, D.23576
	movslq	%eax, %rdx	# D.23576, tmp828
	movq	%rdx, %rax	# tmp828, tmp829
	salq	$2, %rax	#, tmp829
	addq	%rdx, %rax	# tmp828, tmp829
	salq	$3, %rax	#, tmp830
	addq	$insn_data+24, %rax	#, tmp831
	movq	(%rax), %rcx	# insn_data[_209].operand, D.23587
	movl	-40(%rbp), %eax	# i, tmp832
	movslq	%eax, %rdx	# tmp832, D.23588
	movq	%rdx, %rax	# D.23588, tmp833
	addq	%rax, %rax	# tmp833
	addq	%rdx, %rax	# D.23588, tmp833
	salq	$3, %rax	#, tmp834
	addq	%rcx, %rax	# D.23587, D.23587
	movq	8(%rax), %rax	# _213->constraint, D.23589
	movzbl	(%rax), %eax	# *_214, D.23586
	cmpb	$61, %al	#, D.23586
	je	.L667	#,
	.loc 1 1772 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.487
	movl	40(%rax), %eax	# this_insn.487_216->fld[4].rtint, D.23576
	movslq	%eax, %rdx	# D.23576, tmp835
	movq	%rdx, %rax	# tmp835, tmp836
	salq	$2, %rax	#, tmp836
	addq	%rdx, %rax	# tmp835, tmp836
	salq	$3, %rax	#, tmp837
	addq	$insn_data+24, %rax	#, tmp838
	movq	(%rax), %rcx	# insn_data[_217].operand, D.23587
	movl	-40(%rbp), %eax	# i, tmp839
	movslq	%eax, %rdx	# tmp839, D.23588
	movq	%rdx, %rax	# D.23588, tmp840
	addq	%rax, %rax	# tmp840
	addq	%rdx, %rax	# D.23588, tmp840
	salq	$3, %rax	#, tmp841
	addq	%rcx, %rax	# D.23587, D.23587
	movq	8(%rax), %rax	# _221->constraint, D.23589
	movzbl	(%rax), %eax	# *_222, D.23586
	cmpb	$43, %al	#, D.23586
	jne	.L668	#,
.L667:
	.loc 1 1773 0
	jmp	.L611	#
.L668:
	.loc 1 1770 0
	addl	$1, -40(%rbp)	#, i
.L666:
	.loc 1 1770 0 is_stmt 0 discriminator 1
	movq	this_insn(%rip), %rax	# this_insn, this_insn.488
	movl	40(%rax), %eax	# this_insn.488_204->fld[4].rtint, D.23576
	movslq	%eax, %rdx	# D.23576, tmp842
	movq	%rdx, %rax	# tmp842, tmp843
	salq	$2, %rax	#, tmp843
	addq	%rdx, %rax	# tmp842, tmp843
	salq	$3, %rax	#, tmp844
	addq	$insn_data+32, %rax	#, tmp845
	movzbl	(%rax), %eax	# insn_data[_205].n_operands, D.23586
	movsbl	%al, %eax	# D.23586, D.23576
	cmpl	-40(%rbp), %eax	# i, D.23576
	jg	.L669	#,
	.loc 1 1778 0 is_stmt 1
	movq	this_insn(%rip), %rax	# this_insn, this_insn.489
	movq	56(%rax), %rax	# this_insn.489_225->fld[6].rtx, tmp846
	movq	%rax, -24(%rbp)	# tmp846, note
	jmp	.L670	#
.L715:
	.loc 1 1779 0
	movq	-24(%rbp), %rax	# note, tmp847
	movzbl	2(%rax), %eax	# note_7->mode, D.23581
	cmpb	$1, %al	#, D.23581
	jne	.L671	#,
	.loc 1 1780 0
	movq	-24(%rbp), %rax	# note, tmp848
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movzwl	(%rax), %eax	# _228->code, D.23582
	cmpw	$61, %ax	#, D.23582
	jne	.L671	#,
	.loc 1 1781 0
	movl	-36(%rbp), %eax	# output_reload, tmp850
	movslq	%eax, %rdx	# tmp850, tmp849
	movq	%rdx, %rax	# tmp849, tmp851
	addq	%rax, %rax	# tmp851
	addq	%rdx, %rax	# tmp849, tmp851
	salq	$2, %rax	#, tmp851
	addq	%rdx, %rax	# tmp849, tmp851
	salq	$3, %rax	#, tmp852
	addq	$rld, %rax	#, tmp853
	movq	8(%rax), %rdx	# rld[output_reload_6].out, D.23574
	movq	-24(%rbp), %rax	# note, tmp854
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movq	%rdx, %rsi	# D.23574,
	movq	%rax, %rdi	# D.23574,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.23576
	jne	.L671	#,
	.loc 1 1783 0
	movq	-24(%rbp), %rax	# note, tmp855
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _233->fld[0].rtuint, D.23583
	cmpl	$52, %eax	#, D.23583
	ja	.L671	#,
	.loc 1 1784 0
	movl	-36(%rbp), %eax	# output_reload, tmp857
	movslq	%eax, %rdx	# tmp857, tmp856
	movq	%rdx, %rax	# tmp856, tmp858
	addq	%rax, %rax	# tmp858
	addq	%rdx, %rax	# tmp856, tmp858
	salq	$2, %rax	#, tmp858
	addq	%rdx, %rax	# tmp856, tmp858
	salq	$3, %rax	#, tmp859
	addq	$rld+16, %rax	#, tmp860
	movl	8(%rax), %edx	# rld[output_reload_6].outmode, D.23579
	movq	-24(%rbp), %rax	# note, tmp861
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _236->fld[0].rtuint, D.23583
	movl	%edx, %esi	# D.23579,
	movl	%eax, %edi	# D.23576,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23576
	je	.L671	#,
	.loc 1 1785 0
	movl	-36(%rbp), %eax	# output_reload, tmp863
	movslq	%eax, %rdx	# tmp863, tmp862
	movq	%rdx, %rax	# tmp862, tmp864
	addq	%rax, %rax	# tmp864
	addq	%rdx, %rax	# tmp862, tmp864
	salq	$2, %rax	#, tmp864
	addq	%rdx, %rax	# tmp862, tmp864
	salq	$3, %rax	#, tmp865
	addq	$rld+16, %rax	#, tmp866
	movl	(%rax), %eax	# rld[output_reload_6].class, D.23578
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23588
	movq	-24(%rbp), %rax	# note, tmp868
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _243->fld[0].rtuint, D.23583
	movl	%eax, %ecx	# D.23576, tmp976
	shrq	%cl, %rdx	# tmp976, D.23588
	movq	%rdx, %rax	# D.23588, D.23588
	andl	$1, %eax	#, D.23588
	testq	%rax, %rax	# D.23588
	je	.L671	#,
	.loc 1 1787 0
	movq	-24(%rbp), %rax	# note, tmp869
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _248->fld[0].rtuint, D.23583
	cmpl	$7, %eax	#, D.23583
	jbe	.L672	#,
	.loc 1 1787 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# note, tmp870
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _250->fld[0].rtuint, D.23583
	cmpl	$15, %eax	#, D.23583
	jbe	.L673	#,
.L672:
	.loc 1 1787 0 discriminator 2
	movq	-24(%rbp), %rax	# note, tmp871
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _252->fld[0].rtuint, D.23583
	cmpl	$20, %eax	#, D.23583
	jbe	.L674	#,
	.loc 1 1787 0 discriminator 1
	movq	-24(%rbp), %rax	# note, tmp872
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _254->fld[0].rtuint, D.23583
	cmpl	$28, %eax	#, D.23583
	jbe	.L673	#,
.L674:
	.loc 1 1787 0 discriminator 2
	movq	-24(%rbp), %rax	# note, tmp873
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _256->fld[0].rtuint, D.23583
	cmpl	$44, %eax	#, D.23583
	jbe	.L675	#,
	.loc 1 1787 0 discriminator 1
	movq	-24(%rbp), %rax	# note, tmp874
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _258->fld[0].rtuint, D.23583
	cmpl	$52, %eax	#, D.23583
	jbe	.L673	#,
.L675:
	.loc 1 1787 0 discriminator 2
	movq	-24(%rbp), %rax	# note, tmp875
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _260->fld[0].rtuint, D.23583
	cmpl	$28, %eax	#, D.23583
	jbe	.L676	#,
	.loc 1 1787 0 discriminator 1
	movq	-24(%rbp), %rax	# note, tmp876
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _262->fld[0].rtuint, D.23583
	cmpl	$36, %eax	#, D.23583
	ja	.L676	#,
.L673:
	movl	-36(%rbp), %eax	# output_reload, tmp878
	movslq	%eax, %rdx	# tmp878, tmp877
	movq	%rdx, %rax	# tmp877, tmp879
	addq	%rax, %rax	# tmp879
	addq	%rdx, %rax	# tmp877, tmp879
	salq	$2, %rax	#, tmp879
	addq	%rdx, %rax	# tmp877, tmp879
	salq	$3, %rax	#, tmp880
	addq	$rld+16, %rax	#, tmp881
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23580
	cmpl	$5, %eax	#, D.23580
	je	.L677	#,
	.loc 1 1787 0 discriminator 2
	movl	-36(%rbp), %eax	# output_reload, tmp884
	movslq	%eax, %rdx	# tmp884, tmp883
	movq	%rdx, %rax	# tmp883, tmp885
	addq	%rax, %rax	# tmp885
	addq	%rdx, %rax	# tmp883, tmp885
	salq	$2, %rax	#, tmp885
	addq	%rdx, %rax	# tmp883, tmp885
	salq	$3, %rax	#, tmp886
	addq	$rld+16, %rax	#, tmp887
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23580
	cmpl	$6, %eax	#, D.23580
	jne	.L678	#,
.L677:
	.loc 1 1787 0 discriminator 1
	movl	$2, %eax	#, iftmp.491
	jmp	.L679	#
.L678:
	movl	$1, %eax	#, iftmp.491
.L679:
	.loc 1 1787 0 discriminator 3
	movl	%eax, %ecx	# iftmp.491, iftmp.490
	jmp	.L680	#
.L676:
	.loc 1 1787 0 discriminator 2
	movl	-36(%rbp), %eax	# output_reload, tmp890
	movslq	%eax, %rdx	# tmp890, tmp889
	movq	%rdx, %rax	# tmp889, tmp891
	addq	%rax, %rax	# tmp891
	addq	%rdx, %rax	# tmp889, tmp891
	salq	$2, %rax	#, tmp891
	addq	%rdx, %rax	# tmp889, tmp891
	salq	$3, %rax	#, tmp892
	addq	$rld+16, %rax	#, tmp893
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	cmpl	$18, %eax	#, D.23579
	jne	.L681	#,
	.loc 1 1787 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.494
	andl	$33554432, %eax	#, D.23576
	testl	%eax, %eax	# D.23576
	je	.L682	#,
	movl	$2, %eax	#, iftmp.493
	jmp	.L684	#
.L682:
	.loc 1 1787 0 discriminator 2
	movl	$3, %eax	#, iftmp.493
	jmp	.L684	#
.L681:
	movl	-36(%rbp), %eax	# output_reload, tmp895
	movslq	%eax, %rdx	# tmp895, tmp894
	movq	%rdx, %rax	# tmp894, tmp896
	addq	%rax, %rax	# tmp896
	addq	%rdx, %rax	# tmp894, tmp896
	salq	$2, %rax	#, tmp896
	addq	%rdx, %rax	# tmp894, tmp896
	salq	$3, %rax	#, tmp897
	addq	$rld+16, %rax	#, tmp898
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	cmpl	$24, %eax	#, D.23579
	jne	.L685	#,
	.loc 1 1787 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.497
	andl	$33554432, %eax	#, D.23576
	testl	%eax, %eax	# D.23576
	je	.L686	#,
	movl	$4, %eax	#, iftmp.496
	jmp	.L684	#
.L686:
	.loc 1 1787 0 discriminator 2
	movl	$6, %eax	#, iftmp.496
	jmp	.L684	#
.L685:
	movl	-36(%rbp), %eax	# output_reload, tmp900
	movslq	%eax, %rdx	# tmp900, tmp899
	movq	%rdx, %rax	# tmp899, tmp901
	addq	%rax, %rax	# tmp901
	addq	%rdx, %rax	# tmp899, tmp901
	salq	$2, %rax	#, tmp901
	addq	%rdx, %rax	# tmp899, tmp901
	salq	$3, %rax	#, tmp902
	addq	$rld+16, %rax	#, tmp903
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23581
	movzbl	%al, %edx	# D.23581, D.23576
	movl	target_flags(%rip), %eax	# target_flags, target_flags.499
	andl	$33554432, %eax	#, D.23576
	testl	%eax, %eax	# D.23576
	je	.L689	#,
	.loc 1 1787 0 discriminator 1
	movl	$8, %eax	#, iftmp.498
	jmp	.L690	#
.L689:
	.loc 1 1787 0 discriminator 2
	movl	$4, %eax	#, iftmp.498
.L690:
	.loc 1 1787 0 discriminator 3
	addl	%edx, %eax	# D.23576, D.23576
	subl	$1, %eax	#, D.23576
	movl	target_flags(%rip), %edx	# target_flags, target_flags.501
	andl	$33554432, %edx	#, D.23576
	testl	%edx, %edx	# D.23576
	je	.L691	#,
	.loc 1 1787 0 discriminator 1
	movl	$8, %ebx	#, iftmp.500
	jmp	.L692	#
.L691:
	.loc 1 1787 0 discriminator 2
	movl	$4, %ebx	#, iftmp.500
.L692:
	.loc 1 1787 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.500
.L684:
	movl	%eax, %ecx	# iftmp.492, iftmp.490
.L680:
	.loc 1 1788 0 is_stmt 1
	movq	-24(%rbp), %rax	# note, tmp907
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _302->fld[0].rtuint, D.23583
	cmpl	$7, %eax	#, D.23583
	jbe	.L693	#,
	.loc 1 1788 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# note, tmp908
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _304->fld[0].rtuint, D.23583
	cmpl	$15, %eax	#, D.23583
	jbe	.L694	#,
.L693:
	.loc 1 1788 0 discriminator 2
	movq	-24(%rbp), %rax	# note, tmp909
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _306->fld[0].rtuint, D.23583
	cmpl	$20, %eax	#, D.23583
	jbe	.L695	#,
	.loc 1 1788 0 discriminator 1
	movq	-24(%rbp), %rax	# note, tmp910
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _308->fld[0].rtuint, D.23583
	cmpl	$28, %eax	#, D.23583
	jbe	.L694	#,
.L695:
	.loc 1 1788 0 discriminator 2
	movq	-24(%rbp), %rax	# note, tmp911
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _310->fld[0].rtuint, D.23583
	cmpl	$44, %eax	#, D.23583
	jbe	.L696	#,
	.loc 1 1788 0 discriminator 1
	movq	-24(%rbp), %rax	# note, tmp912
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _312->fld[0].rtuint, D.23583
	cmpl	$52, %eax	#, D.23583
	jbe	.L694	#,
.L696:
	.loc 1 1788 0 discriminator 2
	movq	-24(%rbp), %rax	# note, tmp913
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _314->fld[0].rtuint, D.23583
	cmpl	$28, %eax	#, D.23583
	jbe	.L697	#,
	.loc 1 1788 0 discriminator 1
	movq	-24(%rbp), %rax	# note, tmp914
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _316->fld[0].rtuint, D.23583
	cmpl	$36, %eax	#, D.23583
	ja	.L697	#,
.L694:
	movq	-24(%rbp), %rax	# note, tmp915
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movzbl	2(%rax), %eax	# _350->mode, D.23581
	movzbl	%al, %eax	# D.23581, D.23576
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23580
	cmpl	$5, %eax	#, D.23580
	je	.L698	#,
	.loc 1 1788 0 discriminator 2
	movq	-24(%rbp), %rax	# note, tmp917
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movzbl	2(%rax), %eax	# _354->mode, D.23581
	movzbl	%al, %eax	# D.23581, D.23576
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23580
	cmpl	$6, %eax	#, D.23580
	jne	.L699	#,
.L698:
	.loc 1 1788 0 discriminator 1
	movl	$2, %eax	#, iftmp.503
	jmp	.L700	#
.L699:
	movl	$1, %eax	#, iftmp.503
.L700:
	.loc 1 1788 0 discriminator 3
	jmp	.L701	#
.L697:
	.loc 1 1788 0 discriminator 2
	movq	-24(%rbp), %rax	# note, tmp919
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movzbl	2(%rax), %eax	# _318->mode, D.23581
	cmpb	$18, %al	#, D.23581
	jne	.L702	#,
	.loc 1 1788 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.506
	andl	$33554432, %eax	#, D.23576
	testl	%eax, %eax	# D.23576
	je	.L703	#,
	movl	$2, %eax	#, iftmp.505
	jmp	.L701	#
.L703:
	.loc 1 1788 0 discriminator 2
	movl	$3, %eax	#, iftmp.505
	jmp	.L701	#
.L702:
	movq	-24(%rbp), %rax	# note, tmp920
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movzbl	2(%rax), %eax	# _325->mode, D.23581
	cmpb	$24, %al	#, D.23581
	jne	.L706	#,
	.loc 1 1788 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.509
	andl	$33554432, %eax	#, D.23576
	testl	%eax, %eax	# D.23576
	je	.L707	#,
	movl	$4, %eax	#, iftmp.508
	jmp	.L701	#
.L707:
	.loc 1 1788 0 discriminator 2
	movl	$6, %eax	#, iftmp.508
	jmp	.L701	#
.L706:
	movq	-24(%rbp), %rax	# note, tmp921
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movzbl	2(%rax), %eax	# _332->mode, D.23581
	movzbl	%al, %eax	# D.23581, D.23576
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23581
	movzbl	%al, %edx	# D.23581, D.23576
	movl	target_flags(%rip), %eax	# target_flags, target_flags.511
	andl	$33554432, %eax	#, D.23576
	testl	%eax, %eax	# D.23576
	je	.L710	#,
	.loc 1 1788 0 discriminator 1
	movl	$8, %eax	#, iftmp.510
	jmp	.L711	#
.L710:
	.loc 1 1788 0 discriminator 2
	movl	$4, %eax	#, iftmp.510
.L711:
	.loc 1 1788 0 discriminator 3
	addl	%edx, %eax	# D.23576, D.23576
	subl	$1, %eax	#, D.23576
	movl	target_flags(%rip), %edx	# target_flags, target_flags.513
	andl	$33554432, %edx	#, D.23576
	testl	%edx, %edx	# D.23576
	je	.L712	#,
	.loc 1 1788 0 discriminator 1
	movl	$8, %ebx	#, iftmp.512
	jmp	.L713	#
.L712:
	.loc 1 1788 0 discriminator 2
	movl	$4, %ebx	#, iftmp.512
.L713:
	.loc 1 1788 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.512
.L701:
	.loc 1 1787 0 is_stmt 1
	cmpl	%eax, %ecx	# iftmp.502, iftmp.490
	jg	.L671	#,
	.loc 1 1791 0
	movl	-36(%rbp), %eax	# output_reload, tmp926
	movslq	%eax, %rdx	# tmp926, tmp925
	movq	%rdx, %rax	# tmp925, tmp927
	addq	%rax, %rax	# tmp927
	addq	%rdx, %rax	# tmp925, tmp927
	salq	$2, %rax	#, tmp927
	addq	%rdx, %rax	# tmp925, tmp927
	salq	$3, %rax	#, tmp928
	addq	$rld+80, %rax	#, tmp929
	movl	(%rax), %eax	# rld[output_reload_6].secondary_out_reload, tmp930
	movl	%eax, -28(%rbp)	# tmp930, secondary_out
	cmpl	$-1, -28(%rbp)	#, secondary_out
	je	.L714	#,
	.loc 1 1792 0
	movl	-28(%rbp), %eax	# secondary_out, tmp932
	movslq	%eax, %rdx	# tmp932, tmp931
	movq	%rdx, %rax	# tmp931, tmp933
	addq	%rax, %rax	# tmp933
	addq	%rdx, %rax	# tmp931, tmp933
	salq	$2, %rax	#, tmp933
	addq	%rdx, %rax	# tmp931, tmp933
	salq	$3, %rax	#, tmp934
	addq	$rld+16, %rax	#, tmp935
	movl	(%rax), %eax	# rld[secondary_out_361].class, D.23578
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23588
	movq	-24(%rbp), %rax	# note, tmp937
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _365->fld[0].rtuint, D.23583
	movl	%eax, %ecx	# D.23576, tmp980
	shrq	%cl, %rdx	# tmp980, D.23588
	movq	%rdx, %rax	# D.23588, D.23588
	andl	$1, %eax	#, D.23588
	testq	%rax, %rax	# D.23588
	jne	.L671	#,
	.loc 1 1795 0
	movl	-28(%rbp), %eax	# secondary_out, tmp939
	movslq	%eax, %rdx	# tmp939, tmp938
	movq	%rdx, %rax	# tmp938, tmp940
	addq	%rax, %rax	# tmp940
	addq	%rdx, %rax	# tmp938, tmp940
	salq	$2, %rax	#, tmp940
	addq	%rdx, %rax	# tmp938, tmp940
	salq	$3, %rax	#, tmp941
	addq	$rld+80, %rax	#, tmp942
	movl	(%rax), %eax	# rld[secondary_out_361].secondary_out_reload, tmp943
	movl	%eax, -28(%rbp)	# tmp943, secondary_out
	cmpl	$-1, -28(%rbp)	#, secondary_out
	je	.L714	#,
	.loc 1 1796 0
	movl	-28(%rbp), %eax	# secondary_out, tmp945
	movslq	%eax, %rdx	# tmp945, tmp944
	movq	%rdx, %rax	# tmp944, tmp946
	addq	%rax, %rax	# tmp946
	addq	%rdx, %rax	# tmp944, tmp946
	salq	$2, %rax	#, tmp946
	addq	%rdx, %rax	# tmp944, tmp946
	salq	$3, %rax	#, tmp947
	addq	$rld+16, %rax	#, tmp948
	movl	(%rax), %eax	# rld[secondary_out_370].class, D.23578
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23588
	movq	-24(%rbp), %rax	# note, tmp950
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _374->fld[0].rtuint, D.23583
	movl	%eax, %ecx	# D.23576, tmp982
	shrq	%cl, %rdx	# tmp982, D.23588
	movq	%rdx, %rax	# D.23588, D.23588
	andl	$1, %eax	#, D.23588
	testq	%rax, %rax	# D.23588
	jne	.L671	#,
.L714:
	.loc 1 1799 0
	movq	-24(%rbp), %rax	# note, tmp951
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _379->fld[0].rtuint, D.23583
	movl	%eax, %eax	# D.23583, tmp952
	movzbl	fixed_regs(%rax), %eax	# fixed_regs, D.23586
	testb	%al, %al	# D.23586
	jne	.L671	#,
	.loc 1 1803 0
	movq	-24(%rbp), %rax	# note, tmp953
	movq	8(%rax), %rax	# note_7->fld[0].rtx, D.23574
	movl	8(%rax), %eax	# _382->fld[0].rtuint, D.23583
	.loc 1 1802 0
	movl	%eax, %ecx	# D.23583, D.23576
	movl	-36(%rbp), %eax	# output_reload, tmp955
	movslq	%eax, %rdx	# tmp955, tmp954
	movq	%rdx, %rax	# tmp954, tmp956
	addq	%rax, %rax	# tmp956
	addq	%rdx, %rax	# tmp954, tmp956
	salq	$2, %rax	#, tmp956
	addq	%rdx, %rax	# tmp954, tmp956
	salq	$3, %rax	#, tmp957
	addq	$rld+16, %rax	#, tmp958
	movl	8(%rax), %eax	# rld[output_reload_6].outmode, D.23579
	movl	%ecx, %esi	# D.23576,
	movl	%eax, %edi	# D.23579,
	call	gen_rtx_REG	#
	movq	%rax, %rcx	#, D.23574
	movl	-36(%rbp), %eax	# output_reload, tmp960
	movslq	%eax, %rdx	# tmp960, tmp959
	movq	%rdx, %rax	# tmp959, tmp961
	addq	%rax, %rax	# tmp961
	addq	%rdx, %rax	# tmp959, tmp961
	salq	$2, %rax	#, tmp961
	addq	%rdx, %rax	# tmp959, tmp961
	salq	$3, %rax	#, tmp962
	addq	$rld+64, %rax	#, tmp963
	movq	%rcx, (%rax)	# D.23574, rld[output_reload_6].reg_rtx
	.loc 1 1804 0
	jmp	.L611	#
.L671:
	.loc 1 1778 0
	movq	-24(%rbp), %rax	# note, tmp964
	movq	16(%rax), %rax	# note_7->fld[1].rtx, tmp965
	movq	%rax, -24(%rbp)	# tmp965, note
.L670:
	.loc 1 1778 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, note
	jne	.L715	#,
.L611:
	.loc 1 1806 0 is_stmt 1
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE12:
	.size	combine_reloads, .-combine_reloads
	.type	find_dummy_reload, @function
find_dummy_reload:
.LFB13:
	.loc 1 1837 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# real_in, real_in
	movq	%rsi, -96(%rbp)	# real_out, real_out
	movq	%rdx, -104(%rbp)	# inloc, inloc
	movq	%rcx, -112(%rbp)	# outloc, outloc
	movl	%r8d, -116(%rbp)	# inmode, inmode
	movl	%r9d, -120(%rbp)	# outmode, outmode
	.loc 1 1838 0
	movq	-88(%rbp), %rax	# real_in, tmp215
	movq	%rax, -48(%rbp)	# tmp215, in
	.loc 1 1839 0
	movq	-96(%rbp), %rax	# real_out, tmp216
	movq	%rax, -40(%rbp)	# tmp216, out
	.loc 1 1840 0
	movl	$0, -80(%rbp)	#, in_offset
	.loc 1 1841 0
	movl	$0, -76(%rbp)	#, out_offset
	.loc 1 1842 0
	movq	$0, -32(%rbp)	#, value
	.loc 1 1846 0
	movl	-120(%rbp), %eax	# outmode, outmode.514
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23591
	movl	-116(%rbp), %eax	# inmode, inmode.515
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23591
	cmpb	%al, %dl	# D.23591, D.23591
	je	.L717	#,
	.loc 1 1847 0
	movl	-120(%rbp), %eax	# outmode, outmode.516
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23591
	movzbl	%al, %edx	# D.23591, D.23592
	movl	target_flags(%rip), %eax	# target_flags, target_flags.518
	andl	$33554432, %eax	#, D.23592
	testl	%eax, %eax	# D.23592
	je	.L718	#,
	.loc 1 1847 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.517
	jmp	.L719	#
.L718:
	.loc 1 1847 0 discriminator 2
	movl	$4, %eax	#, iftmp.517
.L719:
	.loc 1 1847 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.517, D.23592
	jg	.L720	#,
	.loc 1 1848 0 is_stmt 1
	movl	-116(%rbp), %eax	# inmode, inmode.519
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23591
	movzbl	%al, %edx	# D.23591, D.23592
	movl	target_flags(%rip), %eax	# target_flags, target_flags.521
	andl	$33554432, %eax	#, D.23592
	testl	%eax, %eax	# D.23592
	je	.L721	#,
	.loc 1 1848 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.520
	jmp	.L722	#
.L721:
	.loc 1 1848 0 discriminator 2
	movl	$4, %eax	#, iftmp.520
.L722:
	.loc 1 1848 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.520, D.23592
	jle	.L717	#,
.L720:
	.loc 1 1849 0 is_stmt 1
	movl	$0, %eax	#, D.23590
	jmp	.L723	#
.L717:
	.loc 1 1855 0
	jmp	.L724	#
.L726:
	.loc 1 1857 0
	movq	-40(%rbp), %rax	# out, tmp221
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23594
	movzwl	(%rax), %eax	# _61->code, D.23593
	cmpw	$61, %ax	#, D.23593
	jne	.L725	#,
	.loc 1 1858 0
	movq	-40(%rbp), %rax	# out, tmp222
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23594
	movl	8(%rax), %eax	# _63->fld[0].rtuint, D.23595
	cmpl	$52, %eax	#, D.23595
	ja	.L725	#,
	.loc 1 1862 0
	movq	-40(%rbp), %rax	# out, tmp223
	movzbl	2(%rax), %eax	# out_2->mode, D.23591
	.loc 1 1859 0
	movzbl	%al, %ecx	# D.23591, D.23596
	movq	-40(%rbp), %rax	# out, tmp224
	movl	16(%rax), %edx	# out_2->fld[1].rtuint, D.23595
	.loc 1 1860 0
	movq	-40(%rbp), %rax	# out, tmp225
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23594
	movzbl	2(%rax), %eax	# _68->mode, D.23591
	.loc 1 1859 0
	movzbl	%al, %esi	# D.23591, D.23596
	movq	-40(%rbp), %rax	# out, tmp226
	movq	8(%rax), %rax	# out_2->fld[0].rtx, D.23594
	movl	8(%rax), %eax	# _71->fld[0].rtuint, D.23595
	movl	%eax, %edi	# D.23595,
	call	subreg_regno_offset	#
	movl	-76(%rbp), %edx	# out_offset, out_offset.522
	addl	%edx, %eax	# out_offset.522, D.23595
	movl	%eax, -76(%rbp)	# D.23595, out_offset
.L725:
	.loc 1 1863 0
	movq	-40(%rbp), %rax	# out, tmp227
	movq	8(%rax), %rax	# out_2->fld[0].rtx, tmp228
	movq	%rax, -40(%rbp)	# tmp228, out
.L724:
	.loc 1 1855 0 discriminator 1
	movq	-40(%rbp), %rax	# out, tmp229
	movzwl	(%rax), %eax	# out_2->code, D.23593
	cmpw	$63, %ax	#, D.23593
	je	.L726	#,
	.loc 1 1865 0
	jmp	.L727	#
.L729:
	.loc 1 1867 0
	movq	-48(%rbp), %rax	# in, tmp230
	movq	8(%rax), %rax	# in_1->fld[0].rtx, D.23594
	movzwl	(%rax), %eax	# _79->code, D.23593
	cmpw	$61, %ax	#, D.23593
	jne	.L728	#,
	.loc 1 1868 0
	movq	-48(%rbp), %rax	# in, tmp231
	movq	8(%rax), %rax	# in_1->fld[0].rtx, D.23594
	movl	8(%rax), %eax	# _81->fld[0].rtuint, D.23595
	cmpl	$52, %eax	#, D.23595
	ja	.L728	#,
	.loc 1 1872 0
	movq	-48(%rbp), %rax	# in, tmp232
	movzbl	2(%rax), %eax	# in_1->mode, D.23591
	.loc 1 1869 0
	movzbl	%al, %ecx	# D.23591, D.23596
	movq	-48(%rbp), %rax	# in, tmp233
	movl	16(%rax), %edx	# in_1->fld[1].rtuint, D.23595
	.loc 1 1870 0
	movq	-48(%rbp), %rax	# in, tmp234
	movq	8(%rax), %rax	# in_1->fld[0].rtx, D.23594
	movzbl	2(%rax), %eax	# _86->mode, D.23591
	.loc 1 1869 0
	movzbl	%al, %esi	# D.23591, D.23596
	movq	-48(%rbp), %rax	# in, tmp235
	movq	8(%rax), %rax	# in_1->fld[0].rtx, D.23594
	movl	8(%rax), %eax	# _89->fld[0].rtuint, D.23595
	movl	%eax, %edi	# D.23595,
	call	subreg_regno_offset	#
	movl	-80(%rbp), %edx	# in_offset, in_offset.523
	addl	%edx, %eax	# in_offset.523, D.23595
	movl	%eax, -80(%rbp)	# D.23595, in_offset
.L728:
	.loc 1 1873 0
	movq	-48(%rbp), %rax	# in, tmp236
	movq	8(%rax), %rax	# in_1->fld[0].rtx, tmp237
	movq	%rax, -48(%rbp)	# tmp237, in
.L727:
	.loc 1 1865 0 discriminator 1
	movq	-48(%rbp), %rax	# in, tmp238
	movzwl	(%rax), %eax	# in_1->code, D.23593
	cmpw	$63, %ax	#, D.23593
	je	.L729	#,
	.loc 1 1878 0
	movq	-48(%rbp), %rax	# in, tmp239
	movl	16(%rbp), %esi	# class,
	movq	%rax, %rdi	# tmp239,
	call	ix86_preferred_reload_class	#
	movl	%eax, 16(%rbp)	# tmp240, class
	.loc 1 1881 0
	movq	-40(%rbp), %rax	# out, tmp241
	movzwl	(%rax), %eax	# out_2->code, D.23593
	cmpw	$61, %ax	#, D.23593
	jne	.L730	#,
	.loc 1 1882 0
	movq	-40(%rbp), %rax	# out, tmp242
	movl	8(%rax), %eax	# out_2->fld[0].rtuint, D.23595
	cmpl	$52, %eax	#, D.23595
	ja	.L730	#,
.LBB18:
	.loc 1 1884 0
	movq	-40(%rbp), %rax	# out, tmp243
	movl	8(%rax), %edx	# out_2->fld[0].rtuint, D.23595
	movl	-76(%rbp), %eax	# out_offset, out_offset.524
	addl	%edx, %eax	# D.23595, tmp244
	movl	%eax, -64(%rbp)	# tmp244, regno
	.loc 1 1885 0
	cmpl	$7, -64(%rbp)	#, regno
	jbe	.L731	#,
	.loc 1 1885 0 is_stmt 0 discriminator 1
	cmpl	$15, -64(%rbp)	#, regno
	jbe	.L732	#,
.L731:
	.loc 1 1885 0 discriminator 2
	cmpl	$20, -64(%rbp)	#, regno
	jbe	.L733	#,
	.loc 1 1885 0 discriminator 1
	cmpl	$28, -64(%rbp)	#, regno
	jbe	.L732	#,
.L733:
	.loc 1 1885 0 discriminator 2
	cmpl	$44, -64(%rbp)	#, regno
	jbe	.L734	#,
	.loc 1 1885 0 discriminator 1
	cmpl	$52, -64(%rbp)	#, regno
	jbe	.L732	#,
.L734:
	.loc 1 1885 0 discriminator 2
	cmpl	$28, -64(%rbp)	#, regno
	jbe	.L735	#,
	.loc 1 1885 0 discriminator 1
	cmpl	$36, -64(%rbp)	#, regno
	ja	.L735	#,
.L732:
	movl	-120(%rbp), %eax	# outmode, outmode.527
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23597
	cmpl	$5, %eax	#, D.23597
	je	.L736	#,
	.loc 1 1885 0 discriminator 4
	movl	-120(%rbp), %eax	# outmode, outmode.528
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23597
	cmpl	$6, %eax	#, D.23597
	jne	.L737	#,
.L736:
	.loc 1 1885 0 discriminator 3
	movl	$2, %eax	#, iftmp.526
	jmp	.L739	#
.L737:
	.loc 1 1885 0 discriminator 1
	movl	$1, %eax	#, iftmp.526
	jmp	.L739	#
.L735:
	.loc 1 1885 0 discriminator 2
	cmpl	$18, -120(%rbp)	#, outmode
	jne	.L740	#,
	.loc 1 1885 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.531
	andl	$33554432, %eax	#, D.23592
	testl	%eax, %eax	# D.23592
	je	.L741	#,
	.loc 1 1885 0 discriminator 9
	movl	$2, %eax	#, iftmp.530
	jmp	.L739	#
.L741:
	.loc 1 1885 0 discriminator 10
	movl	$3, %eax	#, iftmp.530
	jmp	.L739	#
.L740:
	.loc 1 1885 0 discriminator 8
	cmpl	$24, -120(%rbp)	#, outmode
	jne	.L744	#,
	.loc 1 1885 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.534
	andl	$33554432, %eax	#, D.23592
	testl	%eax, %eax	# D.23592
	je	.L745	#,
	.loc 1 1885 0 discriminator 13
	movl	$4, %eax	#, iftmp.533
	jmp	.L739	#
.L745:
	.loc 1 1885 0 discriminator 14
	movl	$6, %eax	#, iftmp.533
	jmp	.L739	#
.L744:
	.loc 1 1885 0 discriminator 12
	movl	-120(%rbp), %eax	# outmode, outmode.535
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23591
	movzbl	%al, %edx	# D.23591, D.23592
	movl	target_flags(%rip), %eax	# target_flags, target_flags.537
	andl	$33554432, %eax	#, D.23592
	testl	%eax, %eax	# D.23592
	je	.L748	#,
	.loc 1 1885 0 discriminator 1
	movl	$8, %eax	#, iftmp.536
	jmp	.L749	#
.L748:
	.loc 1 1885 0 discriminator 2
	movl	$4, %eax	#, iftmp.536
.L749:
	.loc 1 1885 0 discriminator 3
	addl	%edx, %eax	# D.23592, D.23592
	subl	$1, %eax	#, D.23592
	movl	target_flags(%rip), %edx	# target_flags, target_flags.539
	andl	$33554432, %edx	#, D.23592
	testl	%edx, %edx	# D.23592
	je	.L750	#,
	.loc 1 1885 0 discriminator 1
	movl	$8, %ebx	#, iftmp.538
	jmp	.L751	#
.L750:
	.loc 1 1885 0 discriminator 2
	movl	$4, %ebx	#, iftmp.538
.L751:
	.loc 1 1885 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.538
.L739:
	.loc 1 1885 0 discriminator 6
	movl	%eax, -60(%rbp)	# iftmp.525, nwords
	.loc 1 1897 0 is_stmt 1 discriminator 6
	movq	-104(%rbp), %rax	# inloc, tmp250
	movq	(%rax), %rax	# *inloc_138(D), tmp251
	movq	%rax, -24(%rbp)	# tmp251, saved_rtx
	.loc 1 1898 0 discriminator 6
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.23594
	movq	-104(%rbp), %rax	# inloc, tmp252
	movq	%rdx, (%rax)	# D.23594, *inloc_138(D)
	.loc 1 1900 0 discriminator 6
	cmpl	$52, -64(%rbp)	#, regno
	ja	.L752	#,
	.loc 1 1901 0
	movl	-64(%rbp), %eax	# regno, regno.540
	movl	-120(%rbp), %edx	# outmode, tmp253
	movl	%edx, %esi	# tmp253,
	movl	%eax, %edi	# regno.540,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23592
	je	.L752	#,
	.loc 1 1903 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.541
	.loc 1 1902 0
	movq	32(%rax), %rdx	# this_insn.541_143->fld[3].rtx, D.23594
	movl	-60(%rbp), %eax	# nwords, tmp254
	movl	-64(%rbp), %ecx	# regno, tmp255
	leal	(%rcx,%rax), %esi	#, D.23595
	movq	-112(%rbp), %rcx	# outloc, tmp256
	movl	-64(%rbp), %eax	# regno, tmp257
	movl	%eax, %edi	# tmp257,
	call	refers_to_regno_for_reload_p	#
	testl	%eax, %eax	# D.23592
	jne	.L752	#,
.LBB19:
	.loc 1 1907 0
	movl	$0, -72(%rbp)	#, i
	jmp	.L753	#
.L756:
	.loc 1 1908 0
	movl	16(%rbp), %eax	# class, class.542
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23598
	movl	-72(%rbp), %eax	# i, tmp259
	movl	-64(%rbp), %ecx	# regno, tmp260
	addl	%ecx, %eax	# tmp260, D.23595
	movl	%eax, %ecx	# D.23592, tmp314
	shrq	%cl, %rdx	# tmp314, D.23598
	movq	%rdx, %rax	# D.23598, D.23598
	andl	$1, %eax	#, D.23598
	testq	%rax, %rax	# D.23598
	jne	.L754	#,
	.loc 1 1910 0
	jmp	.L755	#
.L754:
	.loc 1 1907 0
	addl	$1, -72(%rbp)	#, i
.L753:
	.loc 1 1907 0 is_stmt 0 discriminator 1
	movl	-72(%rbp), %eax	# i, tmp261
	cmpl	-60(%rbp), %eax	# nwords, tmp261
	jb	.L756	#,
.L755:
	.loc 1 1912 0 is_stmt 1
	movl	-72(%rbp), %eax	# i, tmp262
	cmpl	-60(%rbp), %eax	# nwords, tmp262
	jne	.L752	#,
	.loc 1 1914 0
	movq	-96(%rbp), %rax	# real_out, tmp263
	movzwl	(%rax), %eax	# real_out_34(D)->code, D.23593
	cmpw	$61, %ax	#, D.23593
	jne	.L757	#,
	.loc 1 1915 0
	movq	-96(%rbp), %rax	# real_out, tmp264
	movq	%rax, -32(%rbp)	# tmp264, value
	jmp	.L752	#
.L757:
	.loc 1 1917 0
	movl	-64(%rbp), %edx	# regno, regno.543
	movl	-120(%rbp), %eax	# outmode, tmp265
	movl	%edx, %esi	# regno.543,
	movl	%eax, %edi	# tmp265,
	call	gen_rtx_REG	#
	movq	%rax, -32(%rbp)	# tmp266, value
.L752:
.LBE19:
	.loc 1 1921 0
	movq	-104(%rbp), %rax	# inloc, tmp267
	movq	-24(%rbp), %rdx	# saved_rtx, tmp268
	movq	%rdx, (%rax)	# tmp268, *inloc_138(D)
.L730:
.LBE18:
	.loc 1 1930 0
	movl	hard_regs_live_known(%rip), %eax	# hard_regs_live_known, hard_regs_live_known.544
	testl	%eax, %eax	# hard_regs_live_known.544
	je	.L758	#,
	.loc 1 1931 0
	movq	-48(%rbp), %rax	# in, tmp269
	movzwl	(%rax), %eax	# in_1->code, D.23593
	cmpw	$61, %ax	#, D.23593
	jne	.L758	#,
	.loc 1 1932 0
	movq	-48(%rbp), %rax	# in, tmp270
	movl	8(%rax), %eax	# in_1->fld[0].rtuint, D.23595
	cmpl	$52, %eax	#, D.23595
	ja	.L758	#,
	.loc 1 1933 0
	cmpq	$0, -32(%rbp)	#, value
	je	.L759	#,
	.loc 1 1934 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.545
	movq	-96(%rbp), %rdx	# real_out, tmp271
	movl	$10, %esi	#,
	movq	%rax, %rdi	# this_insn.545,
	call	find_reg_note	#
	testq	%rax, %rax	# D.23594
	je	.L758	#,
.L759:
	.loc 1 1935 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.546
	movq	-88(%rbp), %rdx	# real_in, tmp272
	movl	$1, %esi	#,
	movq	%rax, %rdi	# this_insn.546,
	call	find_reg_note	#
	testq	%rax, %rax	# D.23594
	je	.L758	#,
	.loc 1 1936 0
	movq	-48(%rbp), %rax	# in, tmp273
	movl	8(%rax), %eax	# in_1->fld[0].rtuint, D.23595
	movl	%eax, %eax	# D.23595, tmp274
	movzbl	fixed_regs(%rax), %eax	# fixed_regs, D.23599
	testb	%al, %al	# D.23599
	jne	.L758	#,
	.loc 1 1937 0
	movq	-40(%rbp), %rax	# out, tmp275
	movzbl	2(%rax), %eax	# out_2->mode, D.23591
	testb	%al, %al	# D.23591
	je	.L760	#,
	.loc 1 1937 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# out, tmp276
	movzbl	2(%rax), %eax	# out_2->mode, D.23591
	movzbl	%al, %eax	# D.23591, iftmp.547
	jmp	.L761	#
.L760:
	.loc 1 1937 0 discriminator 2
	movl	-120(%rbp), %eax	# outmode, iftmp.547
.L761:
	.loc 1 1937 0 discriminator 3
	movq	-48(%rbp), %rdx	# in, tmp277
	movl	8(%rdx), %edx	# in_1->fld[0].rtuint, D.23595
	movl	%eax, %esi	# iftmp.547,
	movl	%edx, %edi	# D.23592,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23592
	je	.L758	#,
.LBB20:
	.loc 1 1945 0 is_stmt 1
	movq	-48(%rbp), %rax	# in, tmp278
	movl	8(%rax), %edx	# in_1->fld[0].rtuint, D.23595
	movl	-80(%rbp), %eax	# in_offset, in_offset.548
	addl	%edx, %eax	# D.23595, tmp279
	movl	%eax, -56(%rbp)	# tmp279, regno
	.loc 1 1946 0
	cmpl	$7, -56(%rbp)	#, regno
	jbe	.L762	#,
	.loc 1 1946 0 is_stmt 0 discriminator 1
	cmpl	$15, -56(%rbp)	#, regno
	jbe	.L763	#,
.L762:
	.loc 1 1946 0 discriminator 2
	cmpl	$20, -56(%rbp)	#, regno
	jbe	.L764	#,
	.loc 1 1946 0 discriminator 1
	cmpl	$28, -56(%rbp)	#, regno
	jbe	.L763	#,
.L764:
	.loc 1 1946 0 discriminator 2
	cmpl	$44, -56(%rbp)	#, regno
	jbe	.L765	#,
	.loc 1 1946 0 discriminator 1
	cmpl	$52, -56(%rbp)	#, regno
	jbe	.L763	#,
.L765:
	.loc 1 1946 0 discriminator 2
	cmpl	$28, -56(%rbp)	#, regno
	jbe	.L766	#,
	.loc 1 1946 0 discriminator 1
	cmpl	$36, -56(%rbp)	#, regno
	ja	.L766	#,
.L763:
	movl	-116(%rbp), %eax	# inmode, inmode.551
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23597
	cmpl	$5, %eax	#, D.23597
	je	.L767	#,
	.loc 1 1946 0 discriminator 4
	movl	-116(%rbp), %eax	# inmode, inmode.552
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23597
	cmpl	$6, %eax	#, D.23597
	jne	.L768	#,
.L767:
	.loc 1 1946 0 discriminator 3
	movl	$2, %eax	#, iftmp.550
	jmp	.L770	#
.L768:
	.loc 1 1946 0 discriminator 1
	movl	$1, %eax	#, iftmp.550
	jmp	.L770	#
.L766:
	.loc 1 1946 0 discriminator 2
	cmpl	$18, -116(%rbp)	#, inmode
	jne	.L771	#,
	.loc 1 1946 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.555
	andl	$33554432, %eax	#, D.23592
	testl	%eax, %eax	# D.23592
	je	.L772	#,
	.loc 1 1946 0 discriminator 9
	movl	$2, %eax	#, iftmp.554
	jmp	.L770	#
.L772:
	.loc 1 1946 0 discriminator 10
	movl	$3, %eax	#, iftmp.554
	jmp	.L770	#
.L771:
	.loc 1 1946 0 discriminator 8
	cmpl	$24, -116(%rbp)	#, inmode
	jne	.L775	#,
	.loc 1 1946 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.558
	andl	$33554432, %eax	#, D.23592
	testl	%eax, %eax	# D.23592
	je	.L776	#,
	.loc 1 1946 0 discriminator 13
	movl	$4, %eax	#, iftmp.557
	jmp	.L770	#
.L776:
	.loc 1 1946 0 discriminator 14
	movl	$6, %eax	#, iftmp.557
	jmp	.L770	#
.L775:
	.loc 1 1946 0 discriminator 12
	movl	-116(%rbp), %eax	# inmode, inmode.559
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23591
	movzbl	%al, %edx	# D.23591, D.23592
	movl	target_flags(%rip), %eax	# target_flags, target_flags.561
	andl	$33554432, %eax	#, D.23592
	testl	%eax, %eax	# D.23592
	je	.L779	#,
	.loc 1 1946 0 discriminator 1
	movl	$8, %eax	#, iftmp.560
	jmp	.L780	#
.L779:
	.loc 1 1946 0 discriminator 2
	movl	$4, %eax	#, iftmp.560
.L780:
	.loc 1 1946 0 discriminator 3
	addl	%edx, %eax	# D.23592, D.23592
	subl	$1, %eax	#, D.23592
	movl	target_flags(%rip), %edx	# target_flags, target_flags.563
	andl	$33554432, %edx	#, D.23592
	testl	%edx, %edx	# D.23592
	je	.L781	#,
	.loc 1 1946 0 discriminator 1
	movl	$8, %ebx	#, iftmp.562
	jmp	.L782	#
.L781:
	.loc 1 1946 0 discriminator 2
	movl	$4, %ebx	#, iftmp.562
.L782:
	.loc 1 1946 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.562
.L770:
	.loc 1 1946 0 discriminator 6
	movl	%eax, -52(%rbp)	# iftmp.549, nwords
	.loc 1 1948 0 is_stmt 1 discriminator 6
	movl	-52(%rbp), %eax	# nwords, tmp285
	movl	-56(%rbp), %edx	# regno, tmp286
	leal	(%rdx,%rax), %esi	#, D.23595
	movq	-40(%rbp), %rdx	# out, tmp287
	movl	-56(%rbp), %eax	# regno, tmp288
	movl	$0, %ecx	#,
	movl	%eax, %edi	# tmp288,
	call	refers_to_regno_for_reload_p	#
	testl	%eax, %eax	# D.23592
	jne	.L758	#,
	.loc 1 1950 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.564
	.loc 1 1949 0
	movq	32(%rax), %rdx	# this_insn.564_216->fld[3].rtx, D.23594
	movl	-52(%rbp), %eax	# nwords, tmp289
	movl	-56(%rbp), %ecx	# regno, tmp290
	addl	%eax, %ecx	# tmp289, D.23595
	movl	-56(%rbp), %eax	# regno, tmp291
	movl	%ecx, %esi	# D.23595,
	movl	%eax, %edi	# tmp291,
	call	hard_reg_set_here_p	#
	testl	%eax, %eax	# D.23592
	jne	.L758	#,
	.loc 1 1951 0
	cmpl	$0, 32(%rbp)	#, earlyclobber
	je	.L783	#,
	.loc 1 1953 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.565
	.loc 1 1952 0
	movq	32(%rax), %rdx	# this_insn.565_221->fld[3].rtx, D.23594
	movl	-52(%rbp), %eax	# nwords, tmp292
	movl	-56(%rbp), %ecx	# regno, tmp293
	leal	(%rcx,%rax), %esi	#, D.23595
	movq	-104(%rbp), %rcx	# inloc, tmp294
	movl	-56(%rbp), %eax	# regno, tmp295
	movl	%eax, %edi	# tmp295,
	call	refers_to_regno_for_reload_p	#
	testl	%eax, %eax	# D.23592
	jne	.L758	#,
.L783:
.LBB21:
	.loc 1 1957 0
	movl	$0, -68(%rbp)	#, i
	jmp	.L784	#
.L787:
	.loc 1 1958 0
	movl	16(%rbp), %eax	# class, class.566
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23598
	movl	-68(%rbp), %eax	# i, tmp297
	movl	-56(%rbp), %ecx	# regno, tmp298
	addl	%ecx, %eax	# tmp298, D.23595
	movl	%eax, %ecx	# D.23592, tmp317
	shrq	%cl, %rdx	# tmp317, D.23598
	movq	%rdx, %rax	# D.23598, D.23598
	andl	$1, %eax	#, D.23598
	testq	%rax, %rax	# D.23598
	jne	.L785	#,
	.loc 1 1960 0
	jmp	.L786	#
.L785:
	.loc 1 1957 0
	addl	$1, -68(%rbp)	#, i
.L784:
	.loc 1 1957 0 is_stmt 0 discriminator 1
	movl	-68(%rbp), %eax	# i, tmp299
	cmpl	-52(%rbp), %eax	# nwords, tmp299
	jb	.L787	#,
.L786:
	.loc 1 1962 0 is_stmt 1
	movl	-68(%rbp), %eax	# i, tmp300
	cmpl	-52(%rbp), %eax	# nwords, tmp300
	jne	.L758	#,
	.loc 1 1967 0
	cmpl	$0, 24(%rbp)	#, for_real
	js	.L788	#,
	.loc 1 1967 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# value, tmp301
	cmpq	-96(%rbp), %rax	# real_out, tmp301
	jne	.L788	#,
	.loc 1 1968 0 is_stmt 1
	movl	24(%rbp), %eax	# for_real, tmp303
	movslq	%eax, %rdx	# tmp303, tmp302
	movq	%rdx, %rax	# tmp302, tmp304
	addq	%rax, %rax	# tmp304
	addq	%rdx, %rax	# tmp302, tmp304
	salq	$2, %rax	#, tmp304
	addq	%rdx, %rax	# tmp302, tmp304
	salq	$3, %rax	#, tmp305
	addq	$rld, %rax	#, tmp306
	movq	$0, 8(%rax)	#, rld[for_real_233(D)].out
.L788:
	.loc 1 1969 0
	movq	-88(%rbp), %rax	# real_in, tmp307
	movzwl	(%rax), %eax	# real_in_32(D)->code, D.23593
	cmpw	$61, %ax	#, D.23593
	jne	.L789	#,
	.loc 1 1970 0
	movq	-88(%rbp), %rax	# real_in, tmp308
	movq	%rax, -32(%rbp)	# tmp308, value
	jmp	.L758	#
.L789:
	.loc 1 1972 0
	movl	-56(%rbp), %edx	# regno, regno.567
	movl	-116(%rbp), %eax	# inmode, tmp309
	movl	%edx, %esi	# regno.567,
	movl	%eax, %edi	# tmp309,
	call	gen_rtx_REG	#
	movq	%rax, -32(%rbp)	# tmp310, value
.L758:
.LBE21:
.LBE20:
	.loc 1 1977 0
	movq	-32(%rbp), %rax	# value, D.23590
.L723:
	.loc 1 1978 0
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE13:
	.size	find_dummy_reload, .-find_dummy_reload
	.globl	earlyclobber_operand_p
	.type	earlyclobber_operand_p, @function
earlyclobber_operand_p:
.LFB14:
	.loc 1 1989 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# x, x
	.loc 1 1992 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L791	#
.L794:
	.loc 1 1993 0
	movl	-4(%rbp), %eax	# i, tmp64
	cltq
	movq	reload_earlyclobbers(,%rax,8), %rax	# reload_earlyclobbers, D.23601
	cmpq	-24(%rbp), %rax	# x, D.23601
	jne	.L792	#,
	.loc 1 1994 0
	movl	$1, %eax	#, D.23600
	jmp	.L793	#
.L792:
	.loc 1 1992 0
	addl	$1, -4(%rbp)	#, i
.L791:
	.loc 1 1992 0 is_stmt 0 discriminator 1
	movl	n_earlyclobbers(%rip), %eax	# n_earlyclobbers, n_earlyclobbers.568
	cmpl	%eax, -4(%rbp)	# n_earlyclobbers.568, i
	jl	.L794	#,
	.loc 1 1996 0 is_stmt 1
	movl	$0, %eax	#, D.23600
.L793:
	.loc 1 1997 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE14:
	.size	earlyclobber_operand_p, .-earlyclobber_operand_p
	.type	hard_reg_set_here_p, @function
hard_reg_set_here_p:
.LFB15:
	.loc 1 2008 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# beg_regno, beg_regno
	movl	%esi, -40(%rbp)	# end_regno, end_regno
	movq	%rdx, -48(%rbp)	# x, x
	.loc 1 2009 0
	movq	-48(%rbp), %rax	# x, tmp103
	movzwl	(%rax), %eax	# x_12(D)->code, D.23603
	cmpw	$47, %ax	#, D.23603
	je	.L796	#,
	.loc 1 2009 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# x, tmp104
	movzwl	(%rax), %eax	# x_12(D)->code, D.23603
	cmpw	$49, %ax	#, D.23603
	jne	.L797	#,
.L796:
.LBB22:
	.loc 1 2011 0 is_stmt 1
	movq	-48(%rbp), %rax	# x, tmp105
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtx, tmp106
	movq	%rax, -24(%rbp)	# tmp106, op0
	.loc 1 2013 0
	jmp	.L798	#
.L799:
	.loc 1 2014 0
	movq	-24(%rbp), %rax	# op0, tmp107
	movq	8(%rax), %rax	# op0_1->fld[0].rtx, tmp108
	movq	%rax, -24(%rbp)	# tmp108, op0
.L798:
	.loc 1 2013 0 discriminator 1
	movq	-24(%rbp), %rax	# op0, tmp109
	movzwl	(%rax), %eax	# op0_1->code, D.23603
	cmpw	$63, %ax	#, D.23603
	je	.L799	#,
	.loc 1 2015 0
	movq	-24(%rbp), %rax	# op0, tmp110
	movzwl	(%rax), %eax	# op0_1->code, D.23603
	cmpw	$61, %ax	#, D.23603
	jne	.L800	#,
.LBB23:
	.loc 1 2017 0
	movq	-24(%rbp), %rax	# op0, tmp111
	movl	8(%rax), %eax	# op0_1->fld[0].rtuint, tmp112
	movl	%eax, -28(%rbp)	# tmp112, r
	.loc 1 2020 0
	movl	-28(%rbp), %eax	# r, tmp113
	cmpl	-40(%rbp), %eax	# end_regno, tmp113
	jae	.L800	#,
	.loc 1 2021 0
	cmpl	$7, -28(%rbp)	#, r
	jbe	.L801	#,
	.loc 1 2021 0 is_stmt 0 discriminator 1
	cmpl	$15, -28(%rbp)	#, r
	jbe	.L802	#,
.L801:
	.loc 1 2021 0 discriminator 2
	cmpl	$20, -28(%rbp)	#, r
	jbe	.L803	#,
	.loc 1 2021 0 discriminator 1
	cmpl	$28, -28(%rbp)	#, r
	jbe	.L802	#,
.L803:
	.loc 1 2021 0 discriminator 2
	cmpl	$44, -28(%rbp)	#, r
	jbe	.L804	#,
	.loc 1 2021 0 discriminator 1
	cmpl	$52, -28(%rbp)	#, r
	jbe	.L802	#,
.L804:
	.loc 1 2021 0 discriminator 2
	cmpl	$28, -28(%rbp)	#, r
	jbe	.L805	#,
	.loc 1 2021 0 discriminator 1
	cmpl	$36, -28(%rbp)	#, r
	ja	.L805	#,
.L802:
	movq	-24(%rbp), %rax	# op0, tmp114
	movzbl	2(%rax), %eax	# op0_1->mode, D.23606
	movzbl	%al, %eax	# D.23606, D.23602
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23607
	cmpl	$5, %eax	#, D.23607
	je	.L806	#,
	.loc 1 2021 0 discriminator 4
	movq	-24(%rbp), %rax	# op0, tmp116
	movzbl	2(%rax), %eax	# op0_1->mode, D.23606
	movzbl	%al, %eax	# D.23606, D.23602
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23607
	cmpl	$6, %eax	#, D.23607
	jne	.L807	#,
.L806:
	.loc 1 2021 0 discriminator 3
	movl	$2, %eax	#, iftmp.570
	jmp	.L809	#
.L807:
	.loc 1 2021 0 discriminator 1
	movl	$1, %eax	#, iftmp.570
	jmp	.L809	#
.L805:
	.loc 1 2021 0 discriminator 2
	movq	-24(%rbp), %rax	# op0, tmp118
	movzbl	2(%rax), %eax	# op0_1->mode, D.23606
	cmpb	$18, %al	#, D.23606
	jne	.L810	#,
	.loc 1 2021 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.573
	andl	$33554432, %eax	#, D.23602
	testl	%eax, %eax	# D.23602
	je	.L811	#,
	.loc 1 2021 0 discriminator 9
	movl	$2, %eax	#, iftmp.572
	jmp	.L809	#
.L811:
	.loc 1 2021 0 discriminator 10
	movl	$3, %eax	#, iftmp.572
	jmp	.L809	#
.L810:
	.loc 1 2021 0 discriminator 8
	movq	-24(%rbp), %rax	# op0, tmp119
	movzbl	2(%rax), %eax	# op0_1->mode, D.23606
	cmpb	$24, %al	#, D.23606
	jne	.L814	#,
	.loc 1 2021 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.576
	andl	$33554432, %eax	#, D.23602
	testl	%eax, %eax	# D.23602
	je	.L815	#,
	.loc 1 2021 0 discriminator 13
	movl	$4, %eax	#, iftmp.575
	jmp	.L809	#
.L815:
	.loc 1 2021 0 discriminator 14
	movl	$6, %eax	#, iftmp.575
	jmp	.L809	#
.L814:
	.loc 1 2021 0 discriminator 12
	movq	-24(%rbp), %rax	# op0, tmp120
	movzbl	2(%rax), %eax	# op0_1->mode, D.23606
	movzbl	%al, %eax	# D.23606, D.23602
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23606
	movzbl	%al, %edx	# D.23606, D.23602
	movl	target_flags(%rip), %eax	# target_flags, target_flags.578
	andl	$33554432, %eax	#, D.23602
	testl	%eax, %eax	# D.23602
	je	.L818	#,
	.loc 1 2021 0 discriminator 1
	movl	$8, %eax	#, iftmp.577
	jmp	.L819	#
.L818:
	.loc 1 2021 0 discriminator 2
	movl	$4, %eax	#, iftmp.577
.L819:
	.loc 1 2021 0 discriminator 3
	addl	%edx, %eax	# D.23602, D.23602
	subl	$1, %eax	#, D.23602
	movl	target_flags(%rip), %edx	# target_flags, target_flags.580
	andl	$33554432, %edx	#, D.23602
	testl	%edx, %edx	# D.23602
	je	.L820	#,
	.loc 1 2021 0 discriminator 1
	movl	$8, %ebx	#, iftmp.579
	jmp	.L821	#
.L820:
	.loc 1 2021 0 discriminator 2
	movl	$4, %ebx	#, iftmp.579
.L821:
	.loc 1 2021 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.579
.L809:
	.loc 1 2021 0 discriminator 6
	movl	-28(%rbp), %edx	# r, tmp124
	addl	%edx, %eax	# tmp124, D.23608
	cmpl	-36(%rbp), %eax	# beg_regno, D.23608
	jbe	.L800	#,
	.loc 1 2022 0 is_stmt 1
	movl	$1, %eax	#, D.23602
	jmp	.L822	#
.L800:
.LBE23:
.LBE22:
	.loc 1 2010 0
	jmp	.L823	#
.L797:
	.loc 1 2025 0
	movq	-48(%rbp), %rax	# x, tmp125
	movzwl	(%rax), %eax	# x_12(D)->code, D.23603
	cmpw	$39, %ax	#, D.23603
	jne	.L823	#,
.LBB24:
	.loc 1 2027 0
	movq	-48(%rbp), %rax	# x, tmp126
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtvec, D.23604
	movl	(%rax), %eax	# _16->num_elem, D.23602
	subl	$1, %eax	#, tmp127
	movl	%eax, -32(%rbp)	# tmp127, i
	.loc 1 2029 0
	jmp	.L824	#
.L826:
	.loc 1 2030 0
	movq	-48(%rbp), %rax	# x, tmp128
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtvec, D.23604
	movl	-32(%rbp), %edx	# i, tmp130
	movslq	%edx, %rdx	# tmp130, tmp129
	movq	8(%rax,%rdx,8), %rdx	# _19->elem, D.23605
	movl	-40(%rbp), %ecx	# end_regno, tmp131
	movl	-36(%rbp), %eax	# beg_regno, tmp132
	movl	%ecx, %esi	# tmp131,
	movl	%eax, %edi	# tmp132,
	call	hard_reg_set_here_p	#
	testl	%eax, %eax	# D.23602
	je	.L825	#,
	.loc 1 2031 0
	movl	$1, %eax	#, D.23602
	jmp	.L822	#
.L825:
	.loc 1 2029 0
	subl	$1, -32(%rbp)	#, i
.L824:
	.loc 1 2029 0 is_stmt 0 discriminator 1
	cmpl	$0, -32(%rbp)	#, i
	jns	.L826	#,
.L823:
.LBE24:
	.loc 1 2034 0 is_stmt 1
	movl	$0, %eax	#, D.23602
.L822:
	.loc 1 2035 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE15:
	.size	hard_reg_set_here_p, .-hard_reg_set_here_p
	.globl	strict_memory_address_p
	.type	strict_memory_address_p, @function
strict_memory_address_p:
.LFB16:
	.loc 1 2045 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# mode, mode
	movq	%rsi, -16(%rbp)	# addr, addr
	.loc 1 2046 0
	movq	-16(%rbp), %rcx	# addr, tmp62
	movl	-4(%rbp), %eax	# mode, tmp63
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp62,
	movl	%eax, %edi	# tmp63,
	call	legitimate_address_p	#
	testl	%eax, %eax	# D.23609
	je	.L828	#,
	.loc 1 2046 0 is_stmt 0 discriminator 1
	nop
.L829:
	.loc 1 2050 0 is_stmt 1 discriminator 1
	movl	$1, %eax	#, D.23609
	jmp	.L830	#
.L828:
	.loc 1 2047 0
	movl	$0, %eax	#, D.23609
.L830:
	.loc 1 2051 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE16:
	.size	strict_memory_address_p, .-strict_memory_address_p
	.globl	operands_match_p
	.type	operands_match_p, @function
operands_match_p:
.LFB17:
	.loc 1 2071 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# y, y
	.loc 1 2073 0
	movq	-40(%rbp), %rax	# x, tmp139
	movzwl	(%rax), %eax	# x_12(D)->code, D.23611
	movzwl	%ax, %eax	# D.23611, tmp140
	movl	%eax, -16(%rbp)	# tmp140, code
	.loc 1 2077 0
	movq	-40(%rbp), %rax	# x, tmp141
	cmpq	-48(%rbp), %rax	# y, tmp141
	jne	.L832	#,
	.loc 1 2078 0
	movl	$1, %eax	#, D.23610
	jmp	.L833	#
.L832:
	.loc 1 2079 0
	cmpl	$61, -16(%rbp)	#, code
	je	.L834	#,
	.loc 1 2079 0 is_stmt 0 discriminator 1
	cmpl	$63, -16(%rbp)	#, code
	jne	.L835	#,
	movq	-40(%rbp), %rax	# x, tmp142
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtx, D.23612
	movzwl	(%rax), %eax	# _17->code, D.23611
	cmpw	$61, %ax	#, D.23611
	jne	.L835	#,
.L834:
	.loc 1 2080 0 is_stmt 1
	movq	-48(%rbp), %rax	# y, tmp143
	movzwl	(%rax), %eax	# y_15(D)->code, D.23611
	cmpw	$61, %ax	#, D.23611
	je	.L836	#,
	.loc 1 2080 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# y, tmp144
	movzwl	(%rax), %eax	# y_15(D)->code, D.23611
	cmpw	$63, %ax	#, D.23611
	jne	.L835	#,
	.loc 1 2081 0 is_stmt 1
	movq	-48(%rbp), %rax	# y, tmp145
	movq	8(%rax), %rax	# y_15(D)->fld[0].rtx, D.23612
	movzwl	(%rax), %eax	# _21->code, D.23611
	cmpw	$61, %ax	#, D.23611
	jne	.L835	#,
.L836:
.LBB25:
	.loc 1 2085 0
	cmpl	$63, -16(%rbp)	#, code
	jne	.L837	#,
	.loc 1 2087 0
	movq	-40(%rbp), %rax	# x, tmp146
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtx, D.23612
	movl	8(%rax), %eax	# _23->fld[0].rtuint, D.23613
	movl	%eax, -32(%rbp)	# D.23613, i
	.loc 1 2088 0
	cmpl	$52, -32(%rbp)	#, i
	jle	.L838	#,
	.loc 1 2089 0
	jmp	.L839	#
.L838:
	.loc 1 2093 0
	movq	-40(%rbp), %rax	# x, tmp147
	movzbl	2(%rax), %eax	# x_12(D)->mode, D.23614
	.loc 1 2090 0
	movzbl	%al, %ecx	# D.23614, D.23615
	movq	-40(%rbp), %rax	# x, tmp148
	movl	16(%rax), %edx	# x_12(D)->fld[1].rtuint, D.23613
	.loc 1 2091 0
	movq	-40(%rbp), %rax	# x, tmp149
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtx, D.23612
	movzbl	2(%rax), %eax	# _29->mode, D.23614
	.loc 1 2090 0
	movzbl	%al, %esi	# D.23614, D.23615
	movq	-40(%rbp), %rax	# x, tmp150
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtx, D.23612
	movl	8(%rax), %eax	# _32->fld[0].rtuint, D.23613
	movl	%eax, %edi	# D.23613,
	call	subreg_regno_offset	#
	movl	-32(%rbp), %edx	# i, i.581
	addl	%edx, %eax	# i.581, D.23613
	movl	%eax, -32(%rbp)	# D.23613, i
	jmp	.L840	#
.L837:
	.loc 1 2096 0
	movq	-40(%rbp), %rax	# x, tmp151
	movl	8(%rax), %eax	# x_12(D)->fld[0].rtuint, D.23613
	movl	%eax, -32(%rbp)	# D.23613, i
.L840:
	.loc 1 2098 0
	movq	-48(%rbp), %rax	# y, tmp152
	movzwl	(%rax), %eax	# y_15(D)->code, D.23611
	cmpw	$63, %ax	#, D.23611
	jne	.L841	#,
	.loc 1 2100 0
	movq	-48(%rbp), %rax	# y, tmp153
	movq	8(%rax), %rax	# y_15(D)->fld[0].rtx, D.23612
	movl	8(%rax), %eax	# _41->fld[0].rtuint, D.23613
	movl	%eax, -24(%rbp)	# D.23613, j
	.loc 1 2101 0
	cmpl	$52, -24(%rbp)	#, j
	jle	.L842	#,
	.loc 1 2102 0
	jmp	.L839	#
.L842:
	.loc 1 2106 0
	movq	-48(%rbp), %rax	# y, tmp154
	movzbl	2(%rax), %eax	# y_15(D)->mode, D.23614
	.loc 1 2103 0
	movzbl	%al, %ecx	# D.23614, D.23615
	movq	-48(%rbp), %rax	# y, tmp155
	movl	16(%rax), %edx	# y_15(D)->fld[1].rtuint, D.23613
	.loc 1 2104 0
	movq	-48(%rbp), %rax	# y, tmp156
	movq	8(%rax), %rax	# y_15(D)->fld[0].rtx, D.23612
	movzbl	2(%rax), %eax	# _47->mode, D.23614
	.loc 1 2103 0
	movzbl	%al, %esi	# D.23614, D.23615
	movq	-48(%rbp), %rax	# y, tmp157
	movq	8(%rax), %rax	# y_15(D)->fld[0].rtx, D.23612
	movl	8(%rax), %eax	# _50->fld[0].rtuint, D.23613
	movl	%eax, %edi	# D.23613,
	call	subreg_regno_offset	#
	movl	-24(%rbp), %edx	# j, j.582
	addl	%edx, %eax	# j.582, D.23613
	movl	%eax, -24(%rbp)	# D.23613, j
	jmp	.L872	#
.L841:
	.loc 1 2109 0
	movq	-48(%rbp), %rax	# y, tmp158
	movl	8(%rax), %eax	# y_15(D)->fld[0].rtuint, D.23613
	movl	%eax, -24(%rbp)	# D.23613, j
.L872:
	.loc 1 2121 0
	movl	-32(%rbp), %eax	# i, tmp159
	cmpl	-24(%rbp), %eax	# j, tmp159
	sete	%al	#, D.23616
	movzbl	%al, %eax	# D.23616, D.23610
	jmp	.L833	#
.L835:
.LBE25:
	.loc 1 2128 0
	cmpl	$98, -16(%rbp)	#, code
	je	.L844	#,
	.loc 1 2128 0 is_stmt 0 discriminator 1
	cmpl	$99, -16(%rbp)	#, code
	je	.L844	#,
	cmpl	$101, -16(%rbp)	#, code
	jne	.L845	#,
.L844:
	.loc 1 2129 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp160
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtx, D.23612
	movq	-48(%rbp), %rdx	# y, tmp161
	movq	%rdx, %rsi	# tmp161,
	movq	%rax, %rdi	# D.23612,
	call	operands_match_p	#
	jmp	.L833	#
.L845:
	.loc 1 2136 0
	movq	-48(%rbp), %rax	# y, tmp162
	movzwl	(%rax), %eax	# y_15(D)->code, D.23611
	cmpw	$96, %ax	#, D.23611
	je	.L846	#,
	.loc 1 2136 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# y, tmp163
	movzwl	(%rax), %eax	# y_15(D)->code, D.23611
	cmpw	$97, %ax	#, D.23611
	je	.L846	#,
	.loc 1 2137 0 is_stmt 1
	movq	-48(%rbp), %rax	# y, tmp164
	movzwl	(%rax), %eax	# y_15(D)->code, D.23611
	cmpw	$100, %ax	#, D.23611
	jne	.L839	#,
.L846:
	.loc 1 2138 0
	movq	-48(%rbp), %rax	# y, tmp165
	movq	8(%rax), %rdx	# y_15(D)->fld[0].rtx, D.23612
	movq	-40(%rbp), %rax	# x, tmp166
	movq	%rdx, %rsi	# D.23612,
	movq	%rax, %rdi	# tmp166,
	call	operands_match_p	#
	testl	%eax, %eax	# D.23610
	je	.L847	#,
	.loc 1 2138 0 is_stmt 0 discriminator 1
	movl	$2, %eax	#, iftmp.587
	jmp	.L848	#
.L847:
	.loc 1 2138 0 discriminator 2
	movl	$0, %eax	#, iftmp.587
.L848:
	.loc 1 2138 0 discriminator 3
	jmp	.L833	#
.L839:
	.loc 1 2144 0 is_stmt 1
	movq	-48(%rbp), %rax	# y, tmp167
	movzwl	(%rax), %eax	# y_15(D)->code, D.23611
	movzwl	%ax, %eax	# D.23611, D.23613
	cmpl	-16(%rbp), %eax	# code, D.23613
	je	.L849	#,
	.loc 1 2145 0
	movl	$0, %eax	#, D.23610
	jmp	.L833	#
.L849:
	.loc 1 2146 0
	cmpl	$67, -16(%rbp)	#, code
	jne	.L850	#,
	.loc 1 2147 0
	movq	-40(%rbp), %rax	# x, tmp168
	movq	8(%rax), %rdx	# x_12(D)->fld[0].rtx, D.23612
	movq	-48(%rbp), %rax	# y, tmp169
	movq	8(%rax), %rax	# y_15(D)->fld[0].rtx, D.23612
	cmpq	%rax, %rdx	# D.23612, D.23612
	sete	%al	#, D.23616
	movzbl	%al, %eax	# D.23616, D.23610
	jmp	.L833	#
.L850:
	.loc 1 2148 0
	cmpl	$68, -16(%rbp)	#, code
	jne	.L851	#,
	.loc 1 2149 0
	movq	-40(%rbp), %rax	# x, tmp170
	movq	8(%rax), %rdx	# x_12(D)->fld[0].rtstr, D.23617
	movq	-48(%rbp), %rax	# y, tmp171
	movq	8(%rax), %rax	# y_15(D)->fld[0].rtstr, D.23617
	cmpq	%rax, %rdx	# D.23617, D.23617
	sete	%al	#, D.23616
	movzbl	%al, %eax	# D.23616, D.23610
	jmp	.L833	#
.L851:
	.loc 1 2153 0
	movq	-40(%rbp), %rax	# x, tmp172
	movzbl	2(%rax), %edx	# x_12(D)->mode, D.23614
	movq	-48(%rbp), %rax	# y, tmp173
	movzbl	2(%rax), %eax	# y_15(D)->mode, D.23614
	cmpb	%al, %dl	# D.23614, D.23614
	je	.L852	#,
	.loc 1 2154 0
	movl	$0, %eax	#, D.23610
	jmp	.L833	#
.L852:
	.loc 1 2159 0
	movl	$0, -28(%rbp)	#, success_2
	.loc 1 2160 0
	movl	-16(%rbp), %eax	# code, code.588
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp175
	movq	%rax, -8(%rbp)	# tmp175, fmt
	.loc 1 2161 0
	movl	-16(%rbp), %eax	# code, code.589
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.23614
	movzbl	%al, %eax	# D.23614, D.23610
	subl	$1, %eax	#, tmp177
	movl	%eax, -32(%rbp)	# tmp177, i
	jmp	.L853	#
.L871:
.LBB26:
	.loc 1 2164 0
	movl	-32(%rbp), %eax	# i, tmp178
	movslq	%eax, %rdx	# tmp178, D.23618
	movq	-8(%rbp), %rax	# fmt, tmp179
	addq	%rdx, %rax	# D.23618, D.23617
	movzbl	(%rax), %eax	# *_92, D.23619
	movsbl	%al, %eax	# D.23619, D.23610
	cmpl	$101, %eax	#, D.23610
	je	.L855	#,
	cmpl	$101, %eax	#, D.23610
	jg	.L856	#,
	cmpl	$48, %eax	#, D.23610
	je	.L873	#,
	cmpl	$69, %eax	#, D.23610
	je	.L858	#,
	jmp	.L854	#
.L856:
	cmpl	$105, %eax	#, D.23610
	je	.L859	#,
	cmpl	$119, %eax	#, D.23610
	jne	.L854	#,
	.loc 1 2167 0
	movq	-40(%rbp), %rax	# x, tmp180
	movl	-32(%rbp), %edx	# i, tmp182
	movslq	%edx, %rdx	# tmp182, tmp181
	movq	8(%rax,%rdx,8), %rcx	# x_12(D)->fld[i_2].rtwint, D.23620
	movq	-48(%rbp), %rax	# y, tmp183
	movl	-32(%rbp), %edx	# i, tmp185
	movslq	%edx, %rdx	# tmp185, tmp184
	movq	8(%rax,%rdx,8), %rax	# y_15(D)->fld[i_2].rtwint, D.23620
	cmpq	%rax, %rcx	# D.23620, D.23620
	je	.L861	#,
	.loc 1 2168 0
	movl	$0, %eax	#, D.23610
	jmp	.L833	#
.L861:
	.loc 1 2169 0
	jmp	.L862	#
.L859:
	.loc 1 2172 0
	movq	-40(%rbp), %rax	# x, tmp186
	movl	-32(%rbp), %edx	# i, tmp188
	movslq	%edx, %rdx	# tmp188, tmp187
	movl	8(%rax,%rdx,8), %ecx	# x_12(D)->fld[i_2].rtint, D.23610
	movq	-48(%rbp), %rax	# y, tmp189
	movl	-32(%rbp), %edx	# i, tmp191
	movslq	%edx, %rdx	# tmp191, tmp190
	movl	8(%rax,%rdx,8), %eax	# y_15(D)->fld[i_2].rtint, D.23610
	cmpl	%eax, %ecx	# D.23610, D.23610
	je	.L863	#,
	.loc 1 2173 0
	movl	$0, %eax	#, D.23610
	jmp	.L833	#
.L863:
	.loc 1 2174 0
	jmp	.L862	#
.L855:
	.loc 1 2177 0
	movq	-48(%rbp), %rax	# y, tmp192
	movl	-32(%rbp), %edx	# i, tmp194
	movslq	%edx, %rdx	# tmp194, tmp193
	movq	8(%rax,%rdx,8), %rdx	# y_15(D)->fld[i_2].rtx, D.23612
	movq	-40(%rbp), %rax	# x, tmp195
	movl	-32(%rbp), %ecx	# i, tmp197
	movslq	%ecx, %rcx	# tmp197, tmp196
	movq	8(%rax,%rcx,8), %rax	# x_12(D)->fld[i_2].rtx, D.23612
	movq	%rdx, %rsi	# D.23612,
	movq	%rax, %rdi	# D.23612,
	call	operands_match_p	#
	movl	%eax, -12(%rbp)	# tmp198, val
	.loc 1 2178 0
	cmpl	$0, -12(%rbp)	#, val
	jne	.L864	#,
	.loc 1 2179 0
	movl	$0, %eax	#, D.23610
	jmp	.L833	#
.L864:
	.loc 1 2182 0
	cmpl	$2, -12(%rbp)	#, val
	jne	.L865	#,
	.loc 1 2183 0
	movl	$1, -28(%rbp)	#, success_2
	.loc 1 2184 0
	jmp	.L862	#
.L865:
	jmp	.L862	#
.L858:
	.loc 1 2190 0
	movq	-40(%rbp), %rax	# x, tmp199
	movl	-32(%rbp), %edx	# i, tmp201
	movslq	%edx, %rdx	# tmp201, tmp200
	movq	8(%rax,%rdx,8), %rax	# x_12(D)->fld[i_2].rtvec, D.23621
	movl	(%rax), %ecx	# _106->num_elem, D.23610
	movq	-48(%rbp), %rax	# y, tmp202
	movl	-32(%rbp), %edx	# i, tmp204
	movslq	%edx, %rdx	# tmp204, tmp203
	movq	8(%rax,%rdx,8), %rax	# y_15(D)->fld[i_2].rtvec, D.23621
	movl	(%rax), %eax	# _108->num_elem, D.23610
	cmpl	%eax, %ecx	# D.23610, D.23610
	je	.L866	#,
	.loc 1 2191 0
	movl	$0, %eax	#, D.23610
	jmp	.L833	#
.L866:
	.loc 1 2192 0
	movq	-40(%rbp), %rax	# x, tmp205
	movl	-32(%rbp), %edx	# i, tmp207
	movslq	%edx, %rdx	# tmp207, tmp206
	movq	8(%rax,%rdx,8), %rax	# x_12(D)->fld[i_2].rtvec, D.23621
	movl	(%rax), %eax	# _111->num_elem, D.23610
	subl	$1, %eax	#, tmp208
	movl	%eax, -20(%rbp)	# tmp208, j
	jmp	.L867	#
.L870:
	.loc 1 2194 0
	movq	-48(%rbp), %rax	# y, tmp209
	movl	-32(%rbp), %edx	# i, tmp211
	movslq	%edx, %rdx	# tmp211, tmp210
	movq	8(%rax,%rdx,8), %rax	# y_15(D)->fld[i_2].rtvec, D.23621
	movl	-20(%rbp), %edx	# j, tmp213
	movslq	%edx, %rdx	# tmp213, tmp212
	movq	8(%rax,%rdx,8), %rdx	# _114->elem, D.23612
	movq	-40(%rbp), %rax	# x, tmp214
	movl	-32(%rbp), %ecx	# i, tmp216
	movslq	%ecx, %rcx	# tmp216, tmp215
	movq	8(%rax,%rcx,8), %rax	# x_12(D)->fld[i_2].rtvec, D.23621
	movl	-20(%rbp), %ecx	# j, tmp218
	movslq	%ecx, %rcx	# tmp218, tmp217
	movq	8(%rax,%rcx,8), %rax	# _116->elem, D.23612
	movq	%rdx, %rsi	# D.23612,
	movq	%rax, %rdi	# D.23612,
	call	operands_match_p	#
	movl	%eax, -12(%rbp)	# tmp219, val
	.loc 1 2195 0
	cmpl	$0, -12(%rbp)	#, val
	jne	.L868	#,
	.loc 1 2196 0
	movl	$0, %eax	#, D.23610
	jmp	.L833	#
.L868:
	.loc 1 2197 0
	cmpl	$2, -12(%rbp)	#, val
	jne	.L869	#,
	.loc 1 2198 0
	movl	$1, -28(%rbp)	#, success_2
.L869:
	.loc 1 2192 0
	subl	$1, -20(%rbp)	#, j
.L867:
	.loc 1 2192 0 is_stmt 0 discriminator 1
	cmpl	$0, -20(%rbp)	#, j
	jns	.L870	#,
	.loc 1 2200 0 is_stmt 1
	jmp	.L862	#
.L854:
	.loc 1 2206 0
	movl	$__FUNCTION__.11828, %edx	#,
	movl	$2206, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L873:
	.loc 1 2187 0
	nop
.L862:
.LBE26:
	.loc 1 2161 0
	subl	$1, -32(%rbp)	#, i
.L853:
	.loc 1 2161 0 is_stmt 0 discriminator 1
	cmpl	$0, -32(%rbp)	#, i
	jns	.L871	#,
	.loc 1 2209 0 is_stmt 1
	movl	-28(%rbp), %eax	# success_2, tmp220
	addl	$1, %eax	#, D.23610
.L833:
	.loc 1 2210 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE17:
	.size	operands_match_p, .-operands_match_p
	.type	decompose, @function
decompose:
.LFB18:
	.loc 1 2223 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# x, x
	.loc 1 2225 0
	movl	$0, -76(%rbp)	#, all_const
	.loc 1 2227 0
	movl	$0, -48(%rbp)	#, val.reg_flag
	.loc 1 2228 0
	movl	$0, -44(%rbp)	#, val.safe
	.loc 1 2229 0
	movq	$0, -40(%rbp)	#, val.base
	.loc 1 2230 0
	movq	$0, -32(%rbp)	#, val.start
	.loc 1 2231 0
	movq	$0, -24(%rbp)	#, val.end
	.loc 1 2232 0
	movq	-96(%rbp), %rax	# x, tmp291
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$66, %ax	#, D.23623
	jne	.L875	#,
.LBB27:
	.loc 1 2234 0
	movq	$0, -72(%rbp)	#, base
	movq	$0, -64(%rbp)	#, offset
	.loc 1 2235 0
	movq	-96(%rbp), %rax	# x, tmp292
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, tmp293
	movq	%rax, -56(%rbp)	# tmp293, addr
	.loc 1 2237 0
	movq	-56(%rbp), %rax	# addr, tmp294
	movzwl	(%rax), %eax	# addr_34->code, D.23623
	cmpw	$96, %ax	#, D.23623
	je	.L876	#,
	.loc 1 2237 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# addr, tmp295
	movzwl	(%rax), %eax	# addr_34->code, D.23623
	cmpw	$97, %ax	#, D.23623
	je	.L876	#,
	.loc 1 2238 0 is_stmt 1
	movq	-56(%rbp), %rax	# addr, tmp296
	movzwl	(%rax), %eax	# addr_34->code, D.23623
	cmpw	$98, %ax	#, D.23623
	je	.L876	#,
	.loc 1 2238 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# addr, tmp297
	movzwl	(%rax), %eax	# addr_34->code, D.23623
	cmpw	$99, %ax	#, D.23623
	jne	.L877	#,
.L876:
	.loc 1 2240 0 is_stmt 1
	movq	-56(%rbp), %rax	# addr, tmp298
	movq	8(%rax), %rax	# addr_34->fld[0].rtx, D.23624
	movq	%rax, -40(%rbp)	# D.23624, val.base
	.loc 1 2241 0
	movq	-96(%rbp), %rax	# x, tmp299
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23628
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23629
	movzbl	%al, %eax	# D.23629, D.23628
	negl	%eax	# D.23628
	cltq
	movq	%rax, -32(%rbp)	# D.23625, val.start
	.loc 1 2242 0
	movq	-96(%rbp), %rax	# x, tmp301
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23628
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23629
	movzbl	%al, %eax	# D.23629, D.23625
	movq	%rax, -24(%rbp)	# D.23625, val.end
	.loc 1 2243 0
	movq	-40(%rbp), %rax	# val.base, D.23624
	movl	8(%rax), %eax	# _173->fld[0].rtuint, D.23626
	cmpl	$7, %eax	#, D.23626
	sete	%al	#, D.23627
	movzbl	%al, %eax	# D.23627, D.23628
	movl	%eax, -44(%rbp)	# D.23628, val.safe
	.loc 1 2244 0
	movq	-88(%rbp), %rax	# .result_ptr, tmp303
	movq	-48(%rbp), %rdx	# val, tmp304
	movq	%rdx, (%rax)	# tmp304, <retval>
	movq	-40(%rbp), %rdx	# val, tmp305
	movq	%rdx, 8(%rax)	# tmp305, <retval>
	movq	-32(%rbp), %rdx	# val, tmp306
	movq	%rdx, 16(%rax)	# tmp306, <retval>
	movq	-24(%rbp), %rdx	# val, tmp307
	movq	%rdx, 24(%rax)	# tmp307, <retval>
	jmp	.L874	#
.L877:
	.loc 1 2247 0
	movq	-56(%rbp), %rax	# addr, tmp308
	movzwl	(%rax), %eax	# addr_34->code, D.23623
	cmpw	$100, %ax	#, D.23623
	je	.L879	#,
	.loc 1 2247 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# addr, tmp309
	movzwl	(%rax), %eax	# addr_34->code, D.23623
	cmpw	$101, %ax	#, D.23623
	jne	.L880	#,
.L879:
	.loc 1 2249 0 is_stmt 1
	movq	-56(%rbp), %rax	# addr, tmp310
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _41->code, D.23623
	cmpw	$75, %ax	#, D.23623
	jne	.L880	#,
	.loc 1 2250 0
	movq	-56(%rbp), %rax	# addr, tmp311
	movq	8(%rax), %rdx	# addr_34->fld[0].rtx, D.23624
	movq	-56(%rbp), %rax	# addr, tmp312
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	8(%rax), %rax	# _44->fld[0].rtx, D.23624
	cmpq	%rax, %rdx	# D.23624, D.23624
	jne	.L880	#,
	.loc 1 2251 0
	movq	-56(%rbp), %rax	# addr, tmp313
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	16(%rax), %rax	# _46->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _47->code, D.23623
	cmpw	$67, %ax	#, D.23623
	je	.L881	#,
	.loc 1 2251 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# addr, tmp314
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	16(%rax), %rax	# _49->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _50->code, D.23623
	cmpw	$68, %ax	#, D.23623
	je	.L881	#,
	movq	-56(%rbp), %rax	# addr, tmp315
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	16(%rax), %rax	# _52->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _53->code, D.23623
	cmpw	$54, %ax	#, D.23623
	je	.L881	#,
	movq	-56(%rbp), %rax	# addr, tmp316
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	16(%rax), %rax	# _55->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _56->code, D.23623
	cmpw	$55, %ax	#, D.23623
	je	.L881	#,
	movq	-56(%rbp), %rax	# addr, tmp317
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	16(%rax), %rax	# _58->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _59->code, D.23623
	cmpw	$58, %ax	#, D.23623
	je	.L881	#,
	movq	-56(%rbp), %rax	# addr, tmp318
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	16(%rax), %rax	# _61->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _62->code, D.23623
	cmpw	$134, %ax	#, D.23623
	je	.L881	#,
	movq	-56(%rbp), %rax	# addr, tmp319
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	16(%rax), %rax	# _64->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _65->code, D.23623
	cmpw	$56, %ax	#, D.23623
	je	.L881	#,
	movq	-56(%rbp), %rax	# addr, tmp320
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	16(%rax), %rax	# _67->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _68->code, D.23623
	cmpw	$140, %ax	#, D.23623
	jne	.L880	#,
.L881:
	.loc 1 2253 0 is_stmt 1
	movq	-56(%rbp), %rax	# addr, tmp321
	movq	8(%rax), %rax	# addr_34->fld[0].rtx, D.23624
	movq	%rax, -40(%rbp)	# D.23624, val.base
	.loc 1 2254 0
	movq	-56(%rbp), %rax	# addr, tmp322
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	16(%rax), %rax	# _71->fld[1].rtx, D.23624
	movq	8(%rax), %rax	# _72->fld[0].rtwint, D.23625
	negq	%rax	# D.23625
	movq	%rax, -32(%rbp)	# D.23625, val.start
	.loc 1 2255 0
	movq	-56(%rbp), %rax	# addr, tmp323
	movq	16(%rax), %rax	# addr_34->fld[1].rtx, D.23624
	movq	16(%rax), %rax	# _75->fld[1].rtx, D.23624
	movq	8(%rax), %rax	# _76->fld[0].rtwint, D.23625
	movq	%rax, -24(%rbp)	# D.23625, val.end
	.loc 1 2256 0
	movq	-40(%rbp), %rax	# val.base, D.23624
	movl	8(%rax), %eax	# _78->fld[0].rtuint, D.23626
	cmpl	$7, %eax	#, D.23626
	sete	%al	#, D.23627
	movzbl	%al, %eax	# D.23627, D.23628
	movl	%eax, -44(%rbp)	# D.23628, val.safe
	.loc 1 2257 0
	movq	-88(%rbp), %rax	# .result_ptr, tmp324
	movq	-48(%rbp), %rdx	# val, tmp325
	movq	%rdx, (%rax)	# tmp325, <retval>
	movq	-40(%rbp), %rdx	# val, tmp326
	movq	%rdx, 8(%rax)	# tmp326, <retval>
	movq	-32(%rbp), %rdx	# val, tmp327
	movq	%rdx, 16(%rax)	# tmp327, <retval>
	movq	-24(%rbp), %rdx	# val, tmp328
	movq	%rdx, 24(%rax)	# tmp328, <retval>
	jmp	.L874	#
.L880:
	.loc 1 2261 0
	movq	-56(%rbp), %rax	# addr, tmp329
	movzwl	(%rax), %eax	# addr_34->code, D.23623
	cmpw	$58, %ax	#, D.23623
	jne	.L882	#,
	.loc 1 2263 0
	movq	-56(%rbp), %rax	# addr, tmp330
	movq	8(%rax), %rax	# addr_34->fld[0].rtx, tmp331
	movq	%rax, -56(%rbp)	# tmp331, addr
	.loc 1 2264 0
	movl	$1, -76(%rbp)	#, all_const
.L882:
	.loc 1 2266 0
	movq	-56(%rbp), %rax	# addr, tmp332
	movzwl	(%rax), %eax	# addr_12->code, D.23623
	cmpw	$75, %ax	#, D.23623
	jne	.L883	#,
	.loc 1 2268 0
	movq	-56(%rbp), %rax	# addr, tmp333
	movq	8(%rax), %rax	# addr_12->fld[0].rtx, D.23624
	movzwl	(%rax), %eax	# _86->code, D.23623
	cmpw	$67, %ax	#, D.23623
	je	.L884	#,
	.loc 1 2268 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# addr, tmp334
	movq	8(%rax), %rax	# addr_12->fld[0].rtx, D.23624
	movzwl	(%rax), %eax	# _88->code, D.23623
	cmpw	$68, %ax	#, D.23623
	je	.L884	#,
	movq	-56(%rbp), %rax	# addr, tmp335
	movq	8(%rax), %rax	# addr_12->fld[0].rtx, D.23624
	movzwl	(%rax), %eax	# _90->code, D.23623
	cmpw	$54, %ax	#, D.23623
	je	.L884	#,
	movq	-56(%rbp), %rax	# addr, tmp336
	movq	8(%rax), %rax	# addr_12->fld[0].rtx, D.23624
	movzwl	(%rax), %eax	# _92->code, D.23623
	cmpw	$55, %ax	#, D.23623
	je	.L884	#,
	movq	-56(%rbp), %rax	# addr, tmp337
	movq	8(%rax), %rax	# addr_12->fld[0].rtx, D.23624
	movzwl	(%rax), %eax	# _94->code, D.23623
	cmpw	$58, %ax	#, D.23623
	je	.L884	#,
	movq	-56(%rbp), %rax	# addr, tmp338
	movq	8(%rax), %rax	# addr_12->fld[0].rtx, D.23624
	movzwl	(%rax), %eax	# _96->code, D.23623
	cmpw	$134, %ax	#, D.23623
	je	.L884	#,
	movq	-56(%rbp), %rax	# addr, tmp339
	movq	8(%rax), %rax	# addr_12->fld[0].rtx, D.23624
	movzwl	(%rax), %eax	# _98->code, D.23623
	cmpw	$56, %ax	#, D.23623
	je	.L884	#,
	movq	-56(%rbp), %rax	# addr, tmp340
	movq	8(%rax), %rax	# addr_12->fld[0].rtx, D.23624
	movzwl	(%rax), %eax	# _100->code, D.23623
	cmpw	$140, %ax	#, D.23623
	jne	.L885	#,
.L884:
	.loc 1 2270 0 is_stmt 1
	movq	-56(%rbp), %rax	# addr, tmp341
	movq	16(%rax), %rax	# addr_12->fld[1].rtx, tmp342
	movq	%rax, -72(%rbp)	# tmp342, base
	.loc 1 2271 0
	movq	-56(%rbp), %rax	# addr, tmp343
	movq	8(%rax), %rax	# addr_12->fld[0].rtx, tmp344
	movq	%rax, -64(%rbp)	# tmp344, offset
	jmp	.L883	#
.L885:
	.loc 1 2273 0
	movq	-56(%rbp), %rax	# addr, tmp345
	movq	16(%rax), %rax	# addr_12->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _102->code, D.23623
	cmpw	$67, %ax	#, D.23623
	je	.L886	#,
	.loc 1 2273 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# addr, tmp346
	movq	16(%rax), %rax	# addr_12->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _104->code, D.23623
	cmpw	$68, %ax	#, D.23623
	je	.L886	#,
	movq	-56(%rbp), %rax	# addr, tmp347
	movq	16(%rax), %rax	# addr_12->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _106->code, D.23623
	cmpw	$54, %ax	#, D.23623
	je	.L886	#,
	movq	-56(%rbp), %rax	# addr, tmp348
	movq	16(%rax), %rax	# addr_12->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _108->code, D.23623
	cmpw	$55, %ax	#, D.23623
	je	.L886	#,
	movq	-56(%rbp), %rax	# addr, tmp349
	movq	16(%rax), %rax	# addr_12->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _110->code, D.23623
	cmpw	$58, %ax	#, D.23623
	je	.L886	#,
	movq	-56(%rbp), %rax	# addr, tmp350
	movq	16(%rax), %rax	# addr_12->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _112->code, D.23623
	cmpw	$134, %ax	#, D.23623
	je	.L886	#,
	movq	-56(%rbp), %rax	# addr, tmp351
	movq	16(%rax), %rax	# addr_12->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _114->code, D.23623
	cmpw	$56, %ax	#, D.23623
	je	.L886	#,
	movq	-56(%rbp), %rax	# addr, tmp352
	movq	16(%rax), %rax	# addr_12->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _116->code, D.23623
	cmpw	$140, %ax	#, D.23623
	jne	.L883	#,
.L886:
	.loc 1 2275 0 is_stmt 1
	movq	-56(%rbp), %rax	# addr, tmp353
	movq	8(%rax), %rax	# addr_12->fld[0].rtx, tmp354
	movq	%rax, -72(%rbp)	# tmp354, base
	.loc 1 2276 0
	movq	-56(%rbp), %rax	# addr, tmp355
	movq	16(%rax), %rax	# addr_12->fld[1].rtx, tmp356
	movq	%rax, -64(%rbp)	# tmp356, offset
.L883:
	.loc 1 2280 0
	cmpq	$0, -64(%rbp)	#, offset
	jne	.L887	#,
	.loc 1 2282 0
	movq	-56(%rbp), %rax	# addr, tmp357
	movq	%rax, -72(%rbp)	# tmp357, base
	.loc 1 2283 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, tmp358
	movq	%rax, -64(%rbp)	# tmp358, offset
.L887:
	.loc 1 2285 0
	movq	-64(%rbp), %rax	# offset, tmp359
	movzwl	(%rax), %eax	# offset_8->code, D.23623
	cmpw	$58, %ax	#, D.23623
	jne	.L888	#,
	.loc 1 2286 0
	movq	-64(%rbp), %rax	# offset, tmp360
	movq	8(%rax), %rax	# offset_8->fld[0].rtx, tmp361
	movq	%rax, -64(%rbp)	# tmp361, offset
.L888:
	.loc 1 2287 0
	movq	-64(%rbp), %rax	# offset, tmp362
	movzwl	(%rax), %eax	# offset_9->code, D.23623
	cmpw	$75, %ax	#, D.23623
	jne	.L889	#,
	.loc 1 2289 0
	movq	-64(%rbp), %rax	# offset, tmp363
	movq	8(%rax), %rax	# offset_9->fld[0].rtx, D.23624
	movzwl	(%rax), %eax	# _127->code, D.23623
	cmpw	$54, %ax	#, D.23623
	jne	.L890	#,
	.loc 1 2291 0
	movq	-64(%rbp), %rax	# offset, tmp364
	movq	16(%rax), %rcx	# offset_9->fld[1].rtx, D.23624
	movq	-72(%rbp), %rax	# base, tmp365
	movzbl	2(%rax), %eax	# base_3->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23630
	movq	-72(%rbp), %rdx	# base, tmp366
	movl	%eax, %esi	# D.23630,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -72(%rbp)	# tmp367, base
	.loc 1 2292 0
	movq	-64(%rbp), %rax	# offset, tmp368
	movq	8(%rax), %rax	# offset_9->fld[0].rtx, tmp369
	movq	%rax, -64(%rbp)	# tmp369, offset
	jmp	.L893	#
.L890:
	.loc 1 2294 0
	movq	-64(%rbp), %rax	# offset, tmp370
	movq	16(%rax), %rax	# offset_9->fld[1].rtx, D.23624
	movzwl	(%rax), %eax	# _134->code, D.23623
	cmpw	$54, %ax	#, D.23623
	jne	.L892	#,
	.loc 1 2296 0
	movq	-64(%rbp), %rax	# offset, tmp371
	movq	8(%rax), %rcx	# offset_9->fld[0].rtx, D.23624
	movq	-72(%rbp), %rax	# base, tmp372
	movzbl	2(%rax), %eax	# base_3->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23630
	movq	-72(%rbp), %rdx	# base, tmp373
	movl	%eax, %esi	# D.23630,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -72(%rbp)	# tmp374, base
	.loc 1 2297 0
	movq	-64(%rbp), %rax	# offset, tmp375
	movq	16(%rax), %rax	# offset_9->fld[1].rtx, tmp376
	movq	%rax, -64(%rbp)	# tmp376, offset
	jmp	.L893	#
.L892:
	.loc 1 2301 0
	movq	-72(%rbp), %rax	# base, tmp377
	movzbl	2(%rax), %eax	# base_3->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23630
	movq	-64(%rbp), %rcx	# offset, tmp378
	movq	-72(%rbp), %rdx	# base, tmp379
	movl	%eax, %esi	# D.23630,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -72(%rbp)	# tmp380, base
	.loc 1 2302 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, tmp381
	movq	%rax, -64(%rbp)	# tmp381, offset
	jmp	.L893	#
.L889:
	.loc 1 2305 0
	movq	-64(%rbp), %rax	# offset, tmp382
	movzwl	(%rax), %eax	# offset_9->code, D.23623
	cmpw	$54, %ax	#, D.23623
	je	.L893	#,
	.loc 1 2307 0
	movq	-72(%rbp), %rax	# base, tmp383
	movzbl	2(%rax), %eax	# base_3->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23630
	movq	-64(%rbp), %rcx	# offset, tmp384
	movq	-72(%rbp), %rdx	# base, tmp385
	movl	%eax, %esi	# D.23630,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -72(%rbp)	# tmp386, base
	.loc 1 2308 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, tmp387
	movq	%rax, -64(%rbp)	# tmp387, offset
.L893:
	.loc 1 2311 0
	cmpl	$0, -76(%rbp)	#, all_const
	je	.L894	#,
	.loc 1 2311 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# base, tmp388
	movzwl	(%rax), %eax	# base_5->code, D.23623
	cmpw	$75, %ax	#, D.23623
	jne	.L894	#,
	.loc 1 2312 0 is_stmt 1
	movq	-72(%rbp), %rax	# base, tmp389
	movzbl	2(%rax), %eax	# base_5->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23630
	movq	-72(%rbp), %rdx	# base, tmp390
	movl	%eax, %esi	# D.23630,
	movl	$58, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -72(%rbp)	# tmp391, base
.L894:
	.loc 1 2314 0
	movq	-64(%rbp), %rax	# offset, tmp392
	movzwl	(%rax), %eax	# offset_11->code, D.23623
	cmpw	$54, %ax	#, D.23623
	je	.L895	#,
	.loc 1 2315 0
	movl	$__FUNCTION__.11840, %edx	#,
	movl	$2315, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L895:
	.loc 1 2317 0
	movq	-64(%rbp), %rax	# offset, tmp393
	movq	8(%rax), %rax	# offset_11->fld[0].rtwint, D.23625
	movq	%rax, -32(%rbp)	# D.23625, val.start
	.loc 1 2318 0
	movq	-32(%rbp), %rdx	# val.start, D.23625
	movq	-96(%rbp), %rax	# x, tmp394
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23628
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23629
	movzbl	%al, %eax	# D.23629, D.23625
	addq	%rdx, %rax	# D.23625, D.23625
	movq	%rax, -24(%rbp)	# D.23625, val.end
	.loc 1 2319 0
	movq	-72(%rbp), %rax	# base, tmp396
	movq	%rax, -40(%rbp)	# tmp396, val.base
	.loc 1 2320 0
	movq	-88(%rbp), %rax	# .result_ptr, tmp397
	movq	-48(%rbp), %rdx	# val, tmp398
	movq	%rdx, (%rax)	# tmp398, <retval>
	movq	-40(%rbp), %rdx	# val, tmp399
	movq	%rdx, 8(%rax)	# tmp399, <retval>
	movq	-32(%rbp), %rdx	# val, tmp400
	movq	%rdx, 16(%rax)	# tmp400, <retval>
	movq	-24(%rbp), %rdx	# val, tmp401
	movq	%rdx, 24(%rax)	# tmp401, <retval>
	jmp	.L874	#
.L875:
.LBE27:
	.loc 1 2322 0
	movq	-96(%rbp), %rax	# x, tmp402
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$61, %ax	#, D.23623
	jne	.L896	#,
	.loc 1 2324 0
	movl	$1, -48(%rbp)	#, val.reg_flag
	.loc 1 2325 0
	movq	-96(%rbp), %rax	# x, tmp403
	movq	%rax, %rdi	# tmp403,
	call	true_regnum	#
	cltq
	movq	%rax, -32(%rbp)	# D.23625, val.start
	.loc 1 2326 0
	movq	-32(%rbp), %rax	# val.start, D.23625
	testq	%rax, %rax	# D.23625
	jns	.L897	#,
	.loc 1 2329 0
	movq	-96(%rbp), %rax	# x, tmp404
	movl	8(%rax), %eax	# x_30(D)->fld[0].rtuint, D.23626
	movl	%eax, %eax	# D.23626, D.23625
	movq	%rax, -32(%rbp)	# D.23625, val.start
	.loc 1 2330 0
	movq	-32(%rbp), %rax	# val.start, D.23625
	addq	$1, %rax	#, D.23625
	movq	%rax, -24(%rbp)	# D.23625, val.end
	jmp	.L920	#
.L897:
	.loc 1 2334 0
	movq	-32(%rbp), %rcx	# val.start, D.23625
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$7, %rax	#, D.23625
	jle	.L899	#,
	.loc 1 2334 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$15, %rax	#, D.23625
	jle	.L900	#,
.L899:
	.loc 1 2334 0 discriminator 2
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$20, %rax	#, D.23625
	jle	.L901	#,
	.loc 1 2334 0 discriminator 1
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$28, %rax	#, D.23625
	jle	.L900	#,
.L901:
	.loc 1 2334 0 discriminator 2
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$44, %rax	#, D.23625
	jle	.L902	#,
	.loc 1 2334 0 discriminator 1
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$52, %rax	#, D.23625
	jle	.L900	#,
.L902:
	.loc 1 2334 0 discriminator 2
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$28, %rax	#, D.23625
	jle	.L903	#,
	.loc 1 2334 0 discriminator 1
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$36, %rax	#, D.23625
	jg	.L903	#,
.L900:
	movq	-96(%rbp), %rax	# x, tmp405
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23628
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23631
	cmpl	$5, %eax	#, D.23631
	je	.L904	#,
	.loc 1 2334 0 discriminator 4
	movq	-96(%rbp), %rax	# x, tmp407
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23628
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23631
	cmpl	$6, %eax	#, D.23631
	jne	.L905	#,
.L904:
	.loc 1 2334 0 discriminator 3
	movl	$2, %eax	#, iftmp.591
	jmp	.L907	#
.L905:
	.loc 1 2334 0 discriminator 1
	movl	$1, %eax	#, iftmp.591
	jmp	.L907	#
.L903:
	.loc 1 2334 0 discriminator 2
	movq	-96(%rbp), %rax	# x, tmp409
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	cmpb	$18, %al	#, D.23629
	jne	.L908	#,
	.loc 1 2334 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.594
	andl	$33554432, %eax	#, D.23628
	testl	%eax, %eax	# D.23628
	je	.L909	#,
	.loc 1 2334 0 discriminator 9
	movl	$2, %eax	#, iftmp.593
	jmp	.L907	#
.L909:
	.loc 1 2334 0 discriminator 10
	movl	$3, %eax	#, iftmp.593
	jmp	.L907	#
.L908:
	.loc 1 2334 0 discriminator 8
	movq	-96(%rbp), %rax	# x, tmp410
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	cmpb	$24, %al	#, D.23629
	jne	.L912	#,
	.loc 1 2334 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.597
	andl	$33554432, %eax	#, D.23628
	testl	%eax, %eax	# D.23628
	je	.L913	#,
	.loc 1 2334 0 discriminator 13
	movl	$4, %eax	#, iftmp.596
	jmp	.L907	#
.L913:
	.loc 1 2334 0 discriminator 14
	movl	$6, %eax	#, iftmp.596
	jmp	.L907	#
.L912:
	.loc 1 2334 0 discriminator 12
	movq	-96(%rbp), %rax	# x, tmp411
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23628
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23629
	movzbl	%al, %edx	# D.23629, D.23628
	movl	target_flags(%rip), %eax	# target_flags, target_flags.599
	andl	$33554432, %eax	#, D.23628
	testl	%eax, %eax	# D.23628
	je	.L916	#,
	.loc 1 2334 0 discriminator 1
	movl	$8, %eax	#, iftmp.598
	jmp	.L917	#
.L916:
	.loc 1 2334 0 discriminator 2
	movl	$4, %eax	#, iftmp.598
.L917:
	.loc 1 2334 0 discriminator 3
	addl	%edx, %eax	# D.23628, D.23628
	subl	$1, %eax	#, D.23628
	movl	target_flags(%rip), %edx	# target_flags, target_flags.601
	andl	$33554432, %edx	#, D.23628
	testl	%edx, %edx	# D.23628
	je	.L918	#,
	.loc 1 2334 0 discriminator 1
	movl	$8, %ebx	#, iftmp.600
	jmp	.L919	#
.L918:
	.loc 1 2334 0 discriminator 2
	movl	$4, %ebx	#, iftmp.600
.L919:
	.loc 1 2334 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.600
	cltq
.L907:
	.loc 1 2334 0 discriminator 6
	addq	%rcx, %rax	# D.23625, D.23625
	movq	%rax, -24(%rbp)	# D.23625, val.end
	jmp	.L920	#
.L896:
	.loc 1 2336 0 is_stmt 1
	movq	-96(%rbp), %rax	# x, tmp415
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$63, %ax	#, D.23623
	jne	.L921	#,
	.loc 1 2338 0
	movq	-96(%rbp), %rax	# x, tmp416
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.23624
	movzwl	(%rax), %eax	# _235->code, D.23623
	cmpw	$61, %ax	#, D.23623
	je	.L922	#,
	.loc 1 2340 0
	movq	-96(%rbp), %rax	# x, tmp417
	movq	8(%rax), %rdx	# x_30(D)->fld[0].rtx, D.23624
	movq	-88(%rbp), %rax	# .result_ptr, tmp418
	movq	%rdx, %rsi	# D.23624,
	movq	%rax, %rdi	# tmp418,
	call	decompose	#
	jmp	.L874	#
.L922:
	.loc 1 2341 0
	movl	$1, -48(%rbp)	#, val.reg_flag
	.loc 1 2342 0
	movq	-96(%rbp), %rax	# x, tmp419
	movq	%rax, %rdi	# tmp419,
	call	true_regnum	#
	cltq
	movq	%rax, -32(%rbp)	# D.23625, val.start
	.loc 1 2343 0
	movq	-32(%rbp), %rax	# val.start, D.23625
	testq	%rax, %rax	# D.23625
	jns	.L923	#,
	.loc 1 2344 0
	movq	-96(%rbp), %rax	# x, tmp420
	movq	8(%rax), %rdx	# x_30(D)->fld[0].rtx, D.23624
	movq	-88(%rbp), %rax	# .result_ptr, tmp421
	movq	%rdx, %rsi	# D.23624,
	movq	%rax, %rdi	# tmp421,
	call	decompose	#
	jmp	.L874	#
.L923:
	.loc 1 2347 0
	movq	-32(%rbp), %rcx	# val.start, D.23625
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$7, %rax	#, D.23625
	jle	.L924	#,
	.loc 1 2347 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$15, %rax	#, D.23625
	jle	.L925	#,
.L924:
	.loc 1 2347 0 discriminator 2
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$20, %rax	#, D.23625
	jle	.L926	#,
	.loc 1 2347 0 discriminator 1
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$28, %rax	#, D.23625
	jle	.L925	#,
.L926:
	.loc 1 2347 0 discriminator 2
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$44, %rax	#, D.23625
	jle	.L927	#,
	.loc 1 2347 0 discriminator 1
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$52, %rax	#, D.23625
	jle	.L925	#,
.L927:
	.loc 1 2347 0 discriminator 2
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$28, %rax	#, D.23625
	jle	.L928	#,
	.loc 1 2347 0 discriminator 1
	movq	-32(%rbp), %rax	# val.start, D.23625
	cmpq	$36, %rax	#, D.23625
	jg	.L928	#,
.L925:
	movq	-96(%rbp), %rax	# x, tmp422
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23628
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23631
	cmpl	$5, %eax	#, D.23631
	je	.L929	#,
	.loc 1 2347 0 discriminator 4
	movq	-96(%rbp), %rax	# x, tmp424
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23628
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23631
	cmpl	$6, %eax	#, D.23631
	jne	.L930	#,
.L929:
	.loc 1 2347 0 discriminator 3
	movl	$2, %eax	#, iftmp.603
	jmp	.L932	#
.L930:
	.loc 1 2347 0 discriminator 1
	movl	$1, %eax	#, iftmp.603
	jmp	.L932	#
.L928:
	.loc 1 2347 0 discriminator 2
	movq	-96(%rbp), %rax	# x, tmp426
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	cmpb	$18, %al	#, D.23629
	jne	.L933	#,
	.loc 1 2347 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.606
	andl	$33554432, %eax	#, D.23628
	testl	%eax, %eax	# D.23628
	je	.L934	#,
	.loc 1 2347 0 discriminator 9
	movl	$2, %eax	#, iftmp.605
	jmp	.L932	#
.L934:
	.loc 1 2347 0 discriminator 10
	movl	$3, %eax	#, iftmp.605
	jmp	.L932	#
.L933:
	.loc 1 2347 0 discriminator 8
	movq	-96(%rbp), %rax	# x, tmp427
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	cmpb	$24, %al	#, D.23629
	jne	.L937	#,
	.loc 1 2347 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.609
	andl	$33554432, %eax	#, D.23628
	testl	%eax, %eax	# D.23628
	je	.L938	#,
	.loc 1 2347 0 discriminator 13
	movl	$4, %eax	#, iftmp.608
	jmp	.L932	#
.L938:
	.loc 1 2347 0 discriminator 14
	movl	$6, %eax	#, iftmp.608
	jmp	.L932	#
.L937:
	.loc 1 2347 0 discriminator 12
	movq	-96(%rbp), %rax	# x, tmp428
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.23629
	movzbl	%al, %eax	# D.23629, D.23628
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23629
	movzbl	%al, %edx	# D.23629, D.23628
	movl	target_flags(%rip), %eax	# target_flags, target_flags.611
	andl	$33554432, %eax	#, D.23628
	testl	%eax, %eax	# D.23628
	je	.L941	#,
	.loc 1 2347 0 discriminator 1
	movl	$8, %eax	#, iftmp.610
	jmp	.L942	#
.L941:
	.loc 1 2347 0 discriminator 2
	movl	$4, %eax	#, iftmp.610
.L942:
	.loc 1 2347 0 discriminator 3
	addl	%edx, %eax	# D.23628, D.23628
	subl	$1, %eax	#, D.23628
	movl	target_flags(%rip), %edx	# target_flags, target_flags.613
	andl	$33554432, %edx	#, D.23628
	testl	%edx, %edx	# D.23628
	je	.L943	#,
	.loc 1 2347 0 discriminator 1
	movl	$8, %ebx	#, iftmp.612
	jmp	.L944	#
.L943:
	.loc 1 2347 0 discriminator 2
	movl	$4, %ebx	#, iftmp.612
.L944:
	.loc 1 2347 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.612
	cltq
.L932:
	.loc 1 2347 0 discriminator 6
	addq	%rcx, %rax	# D.23625, D.23625
	movq	%rax, -24(%rbp)	# D.23625, val.end
	jmp	.L920	#
.L921:
	.loc 1 2349 0 is_stmt 1
	movq	-96(%rbp), %rax	# x, tmp432
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$67, %ax	#, D.23623
	je	.L945	#,
	.loc 1 2349 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# x, tmp433
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$68, %ax	#, D.23623
	je	.L945	#,
	movq	-96(%rbp), %rax	# x, tmp434
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$54, %ax	#, D.23623
	je	.L945	#,
	movq	-96(%rbp), %rax	# x, tmp435
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$55, %ax	#, D.23623
	je	.L945	#,
	movq	-96(%rbp), %rax	# x, tmp436
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$58, %ax	#, D.23623
	je	.L945	#,
	movq	-96(%rbp), %rax	# x, tmp437
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$134, %ax	#, D.23623
	je	.L945	#,
	movq	-96(%rbp), %rax	# x, tmp438
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$56, %ax	#, D.23623
	je	.L945	#,
	movq	-96(%rbp), %rax	# x, tmp439
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$140, %ax	#, D.23623
	je	.L945	#,
	.loc 1 2351 0 is_stmt 1
	movq	-96(%rbp), %rax	# x, tmp440
	movzwl	(%rax), %eax	# x_30(D)->code, D.23623
	cmpw	$62, %ax	#, D.23623
	jne	.L946	#,
.L945:
	.loc 1 2352 0
	movl	$1, -44(%rbp)	#, val.safe
	jmp	.L920	#
.L946:
	.loc 1 2354 0
	movl	$__FUNCTION__.11840, %edx	#,
	movl	$2354, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L920:
	.loc 1 2355 0
	movq	-88(%rbp), %rax	# .result_ptr, tmp441
	movq	-48(%rbp), %rdx	# val, tmp442
	movq	%rdx, (%rax)	# tmp442, <retval>
	movq	-40(%rbp), %rdx	# val, tmp443
	movq	%rdx, 8(%rax)	# tmp443, <retval>
	movq	-32(%rbp), %rdx	# val, tmp444
	movq	%rdx, 16(%rax)	# tmp444, <retval>
	movq	-24(%rbp), %rdx	# val, tmp445
	movq	%rdx, 24(%rax)	# tmp445, <retval>
.L874:
	.loc 1 2356 0
	movq	-88(%rbp), %rax	# .result_ptr,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE18:
	.size	decompose, .-decompose
	.type	immune_p, @function
immune_p:
.LFB19:
	.loc 1 2365 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# y, y
	.loc 1 2368 0
	movl	16(%rbp), %eax	# ydata.reg_flag, D.23635
	testl	%eax, %eax	# D.23635
	je	.L949	#,
	.loc 1 2369 0
	movq	40(%rbp), %rax	# ydata.end, D.23636
	movl	%eax, %esi	# D.23636, D.23637
	movq	32(%rbp), %rax	# ydata.start, D.23636
	movq	-40(%rbp), %rdx	# x, tmp155
	movl	$0, %ecx	#,
	movl	%eax, %edi	# D.23637,
	call	refers_to_regno_for_reload_p	#
	testl	%eax, %eax	# D.23635
	sete	%al	#, D.23638
	movzbl	%al, %eax	# D.23638, D.23635
	jmp	.L967	#
.L949:
	.loc 1 2370 0
	movl	20(%rbp), %eax	# ydata.safe, D.23635
	testl	%eax, %eax	# D.23635
	je	.L951	#,
	.loc 1 2371 0
	movl	$1, %eax	#, D.23635
	jmp	.L967	#
.L951:
	.loc 1 2373 0
	movq	-48(%rbp), %rax	# y, tmp156
	movzwl	(%rax), %eax	# y_14(D)->code, D.23639
	cmpw	$66, %ax	#, D.23639
	je	.L952	#,
	.loc 1 2374 0
	movl	$__FUNCTION__.11847, %edx	#,
	movl	$2374, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L952:
	.loc 1 2376 0
	movq	-40(%rbp), %rax	# x, tmp157
	movzwl	(%rax), %eax	# x_8(D)->code, D.23639
	cmpw	$66, %ax	#, D.23639
	je	.L953	#,
	.loc 1 2377 0
	movl	$1, %eax	#, D.23635
	jmp	.L967	#
.L953:
	.loc 1 2379 0
	leaq	-32(%rbp), %rax	#, tmp158
	movq	-40(%rbp), %rdx	# x, tmp159
	movq	%rdx, %rsi	# tmp159,
	movq	%rax, %rdi	# tmp158,
	call	decompose	#
	.loc 1 2381 0
	movq	24(%rbp), %rdx	# ydata.base, D.23640
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movq	%rdx, %rsi	# D.23640,
	movq	%rax, %rdi	# D.23640,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23635
	jne	.L954	#,
	.loc 1 2384 0
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _21->code, D.23639
	cmpw	$67, %ax	#, D.23639
	je	.L955	#,
	.loc 1 2384 0 is_stmt 0 discriminator 2
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _23->code, D.23639
	cmpw	$68, %ax	#, D.23639
	je	.L955	#,
	.loc 1 2384 0 discriminator 1
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _25->code, D.23639
	cmpw	$54, %ax	#, D.23639
	je	.L955	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _27->code, D.23639
	cmpw	$55, %ax	#, D.23639
	je	.L955	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _29->code, D.23639
	cmpw	$58, %ax	#, D.23639
	je	.L955	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _31->code, D.23639
	cmpw	$134, %ax	#, D.23639
	je	.L955	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _33->code, D.23639
	cmpw	$56, %ax	#, D.23639
	je	.L955	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _35->code, D.23639
	cmpw	$140, %ax	#, D.23639
	jne	.L956	#,
.L955:
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _37->code, D.23639
	cmpw	$67, %ax	#, D.23639
	je	.L957	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _39->code, D.23639
	cmpw	$68, %ax	#, D.23639
	je	.L957	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _41->code, D.23639
	cmpw	$54, %ax	#, D.23639
	je	.L957	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _43->code, D.23639
	cmpw	$55, %ax	#, D.23639
	je	.L957	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _45->code, D.23639
	cmpw	$58, %ax	#, D.23639
	je	.L957	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _47->code, D.23639
	cmpw	$134, %ax	#, D.23639
	je	.L957	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _49->code, D.23639
	cmpw	$56, %ax	#, D.23639
	je	.L957	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _51->code, D.23639
	cmpw	$140, %ax	#, D.23639
	jne	.L956	#,
.L957:
	.loc 1 2385 0 is_stmt 1
	movl	$1, %eax	#, D.23635
	jmp	.L967	#
.L956:
	.loc 1 2387 0
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _54->code, D.23639
	cmpw	$67, %ax	#, D.23639
	je	.L958	#,
	.loc 1 2387 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _56->code, D.23639
	cmpw	$68, %ax	#, D.23639
	je	.L958	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _58->code, D.23639
	cmpw	$54, %ax	#, D.23639
	je	.L958	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _60->code, D.23639
	cmpw	$55, %ax	#, D.23639
	je	.L958	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _62->code, D.23639
	cmpw	$58, %ax	#, D.23639
	je	.L958	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _64->code, D.23639
	cmpw	$134, %ax	#, D.23639
	je	.L958	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _66->code, D.23639
	cmpw	$56, %ax	#, D.23639
	je	.L958	#,
	movq	-24(%rbp), %rax	# xdata.base, D.23640
	movzwl	(%rax), %eax	# _68->code, D.23639
	cmpw	$140, %ax	#, D.23639
	jne	.L959	#,
.L958:
	.loc 1 2388 0 is_stmt 1
	movq	24(%rbp), %rdx	# ydata.base, D.23640
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.23640
	cmpq	%rax, %rdx	# D.23640, D.23640
	je	.L960	#,
	.loc 1 2389 0
	movq	24(%rbp), %rdx	# ydata.base, D.23640
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.23640
	cmpq	%rax, %rdx	# D.23640, D.23640
	je	.L960	#,
	.loc 1 2390 0
	movq	24(%rbp), %rdx	# ydata.base, D.23640
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23640
	cmpq	%rax, %rdx	# D.23640, D.23640
	jne	.L959	#,
.L960:
	.loc 1 2391 0
	movl	$1, %eax	#, D.23635
	jmp	.L967	#
.L959:
	.loc 1 2392 0
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _77->code, D.23639
	cmpw	$67, %ax	#, D.23639
	je	.L961	#,
	.loc 1 2392 0 is_stmt 0 discriminator 1
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _79->code, D.23639
	cmpw	$68, %ax	#, D.23639
	je	.L961	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _81->code, D.23639
	cmpw	$54, %ax	#, D.23639
	je	.L961	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _83->code, D.23639
	cmpw	$55, %ax	#, D.23639
	je	.L961	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _85->code, D.23639
	cmpw	$58, %ax	#, D.23639
	je	.L961	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _87->code, D.23639
	cmpw	$134, %ax	#, D.23639
	je	.L961	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _89->code, D.23639
	cmpw	$56, %ax	#, D.23639
	je	.L961	#,
	movq	24(%rbp), %rax	# ydata.base, D.23640
	movzwl	(%rax), %eax	# _91->code, D.23639
	cmpw	$140, %ax	#, D.23639
	jne	.L962	#,
.L961:
	.loc 1 2393 0 is_stmt 1
	movq	-24(%rbp), %rdx	# xdata.base, D.23640
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.23640
	cmpq	%rax, %rdx	# D.23640, D.23640
	je	.L963	#,
	.loc 1 2394 0
	movq	-24(%rbp), %rdx	# xdata.base, D.23640
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.23640
	cmpq	%rax, %rdx	# D.23640, D.23640
	je	.L963	#,
	.loc 1 2395 0
	movq	-24(%rbp), %rdx	# xdata.base, D.23640
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23640
	cmpq	%rax, %rdx	# D.23640, D.23640
	jne	.L962	#,
.L963:
	.loc 1 2396 0
	movl	$1, %eax	#, D.23635
	jmp	.L967	#
.L962:
	.loc 1 2398 0
	movl	$0, %eax	#, D.23635
	jmp	.L967	#
.L954:
	.loc 1 2401 0
	movq	-16(%rbp), %rdx	# xdata.start, D.23636
	movq	40(%rbp), %rax	# ydata.end, D.23636
	cmpq	%rax, %rdx	# D.23636, D.23636
	jge	.L964	#,
	.loc 1 2401 0 is_stmt 0 discriminator 2
	movq	32(%rbp), %rdx	# ydata.start, D.23636
	movq	-8(%rbp), %rax	# xdata.end, D.23636
	cmpq	%rax, %rdx	# D.23636, D.23636
	jl	.L965	#,
.L964:
	.loc 1 2401 0 discriminator 1
	movl	$1, %eax	#, iftmp.614
	jmp	.L966	#
.L965:
	.loc 1 2401 0 discriminator 3
	movl	$0, %eax	#, iftmp.614
.L966:
.L967:
	.loc 1 2402 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE19:
	.size	immune_p, .-immune_p
	.globl	safe_from_earlyclobber
	.type	safe_from_earlyclobber, @function
safe_from_earlyclobber:
.LFB20:
	.loc 1 2409 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -40(%rbp)	# op, op
	movq	%rsi, -48(%rbp)	# clobber, clobber
	.loc 1 2412 0
	leaq	-32(%rbp), %rax	#, tmp61
	movq	-48(%rbp), %rdx	# clobber, tmp62
	movq	%rdx, %rsi	# tmp62,
	movq	%rax, %rdi	# tmp61,
	call	decompose	#
	.loc 1 2413 0
	movq	-48(%rbp), %rdx	# clobber, tmp63
	movq	-40(%rbp), %rax	# op, tmp64
	movq	-32(%rbp), %rcx	# early_data, tmp65
	movq	%rcx, (%rsp)	# tmp65,
	movq	-24(%rbp), %rcx	# early_data, tmp66
	movq	%rcx, 8(%rsp)	# tmp66,
	movq	-16(%rbp), %rcx	# early_data, tmp67
	movq	%rcx, 16(%rsp)	# tmp67,
	movq	-8(%rbp), %rcx	# early_data, tmp68
	movq	%rcx, 24(%rsp)	# tmp68,
	movq	%rdx, %rsi	# tmp63,
	movq	%rax, %rdi	# tmp64,
	call	immune_p	#
	.loc 1 2414 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE20:
	.size	safe_from_earlyclobber, .-safe_from_earlyclobber
	.section	.rodata
	.align 8
.LC3:
	.string	"`&' constraint used with no register class"
	.align 8
.LC4:
	.string	"unable to generate reloads for:"
	.align 8
.LC5:
	.string	"inconsistent operand constraints in an `asm'"
	.text
	.globl	find_reloads
	.type	find_reloads, @function
find_reloads:
.LFB21:
	.loc 1 2444 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$3848, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -3784(%rbp)	# insn, insn
	movl	%esi, -3788(%rbp)	# replace, replace
	movl	%edx, -3792(%rbp)	# ind_levels, ind_levels
	movl	%ecx, -3796(%rbp)	# live_known, live_known
	movq	%r8, -3808(%rbp)	# reload_reg_p, reload_reg_p
	.loc 1 2444 0
	movq	%fs:40, %rax	#, tmp3300
	movq	%rax, -24(%rbp)	# tmp3300, D.23669
	xorl	%eax, %eax	# tmp3300
	.loc 1 2463 0
	movl	$0, -3656(%rbp)	#, no_input_reloads
	movl	$0, -3768(%rbp)	#, no_output_reloads
	.loc 1 2474 0
	movl	$0, -3756(%rbp)	#, goal_alternative_number
	.loc 1 2487 0
	movq	-3784(%rbp), %rax	# insn, tmp1227
	movq	32(%rax), %rax	# insn_243(D)->fld[3].rtx, tmp1228
	movq	%rax, -3568(%rbp)	# tmp1228, body
	.loc 1 2488 0
	movq	-3784(%rbp), %rax	# insn, tmp1229
	movzwl	(%rax), %eax	# insn_243(D)->code, D.23646
	movzwl	%ax, %eax	# D.23646, D.23645
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.23647
	cmpb	$105, %al	#, D.23647
	jne	.L971	#,
	.loc 1 2488 0 is_stmt 0 discriminator 1
	movq	-3784(%rbp), %rax	# insn, tmp1231
	movq	32(%rax), %rax	# insn_243(D)->fld[3].rtx, D.23648
	movzwl	(%rax), %eax	# _248->code, D.23646
	cmpw	$47, %ax	#, D.23646
	jne	.L972	#,
	.loc 1 2488 0 discriminator 3
	movq	-3784(%rbp), %rax	# insn, tmp1232
	movq	32(%rax), %rax	# insn_243(D)->fld[3].rtx, iftmp.616
	jmp	.L974	#
.L972:
	.loc 1 2488 0 discriminator 4
	movq	-3784(%rbp), %rax	# insn, tmp1233
	movq	32(%rax), %rdx	# insn_243(D)->fld[3].rtx, D.23648
	movq	-3784(%rbp), %rax	# insn, tmp1234
	movq	%rdx, %rsi	# D.23648,
	movq	%rax, %rdi	# tmp1234,
	call	single_set_2	#
	jmp	.L974	#
.L971:
	.loc 1 2488 0 discriminator 2
	movl	$0, %eax	#, iftmp.615
.L974:
	.loc 1 2488 0 discriminator 5
	movq	%rax, -3560(%rbp)	# iftmp.615, set
	.loc 1 2489 0 is_stmt 1 discriminator 5
	movl	$0, -3740(%rbp)	#, goal_earlyclobber
	.loc 1 2491 0 discriminator 5
	movl	$0, -3732(%rbp)	#, retval
	.loc 1 2493 0 discriminator 5
	movq	-3784(%rbp), %rax	# insn, tmp1235
	movq	%rax, this_insn(%rip)	# tmp1235, this_insn
	.loc 1 2494 0 discriminator 5
	movl	$0, n_reloads(%rip)	#, n_reloads
	.loc 1 2495 0 discriminator 5
	movl	$0, n_replacements(%rip)	#, n_replacements
	.loc 1 2496 0 discriminator 5
	movl	$0, n_earlyclobbers(%rip)	#, n_earlyclobbers
	.loc 1 2497 0 discriminator 5
	movl	-3788(%rbp), %eax	# replace, tmp1236
	movl	%eax, replace_reloads(%rip)	# tmp1236, replace_reloads
	.loc 1 2498 0 discriminator 5
	movl	-3796(%rbp), %eax	# live_known, tmp1237
	movl	%eax, hard_regs_live_known(%rip)	# tmp1237, hard_regs_live_known
	.loc 1 2499 0 discriminator 5
	movq	-3808(%rbp), %rax	# reload_reg_p, tmp1238
	movq	%rax, static_reload_reg_p(%rip)	# tmp1238, static_reload_reg_p
	.loc 1 2504 0 discriminator 5
	movq	-3784(%rbp), %rax	# insn, tmp1239
	movzwl	(%rax), %eax	# insn_243(D)->code, D.23646
	cmpw	$33, %ax	#, D.23646
	je	.L975	#,
	.loc 1 2504 0 is_stmt 0 discriminator 1
	movq	-3784(%rbp), %rax	# insn, tmp1240
	movzwl	(%rax), %eax	# insn_243(D)->code, D.23646
	cmpw	$34, %ax	#, D.23646
	jne	.L976	#,
.L975:
	.loc 1 2505 0 is_stmt 1
	movl	$1, -3768(%rbp)	#, no_output_reloads
.L976:
	.loc 1 2518 0
	movl	$14160, %edx	#,
	movl	$0, %esi	#,
	movl	$secondary_memlocs_elim, %edi	#,
	call	memset	#
	.loc 1 2524 0
	movq	-3568(%rbp), %rax	# body, tmp1241
	movzwl	(%rax), %eax	# body_244->code, D.23646
	cmpw	$47, %ax	#, D.23646
	jne	.L977	#,
	.loc 1 2525 0
	movq	-3568(%rbp), %rax	# body, tmp1242
	movq	8(%rax), %rax	# body_244->fld[0].rtx, D.23648
	movzwl	(%rax), %eax	# _265->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L977	#,
	.loc 1 2526 0
	movq	-3568(%rbp), %rax	# body, tmp1243
	movq	8(%rax), %rax	# body_244->fld[0].rtx, D.23648
	movl	8(%rax), %eax	# _267->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	ja	.L977	#,
	.loc 1 2527 0
	movq	-3568(%rbp), %rax	# body, tmp1244
	movq	16(%rax), %rax	# body_244->fld[1].rtx, D.23648
	movzwl	(%rax), %eax	# _269->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L977	#,
	.loc 1 2528 0
	movq	-3568(%rbp), %rax	# body, tmp1245
	movq	16(%rax), %rax	# body_244->fld[1].rtx, D.23648
	movl	8(%rax), %eax	# _271->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	ja	.L977	#,
	.loc 1 2529 0
	movq	-3568(%rbp), %rax	# body, tmp1246
	movq	8(%rax), %rax	# body_244->fld[0].rtx, D.23648
	movl	8(%rax), %eax	# _273->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, tmp1247
	movl	regclass_map(,%rax,4), %edx	# regclass_map, D.23650
	movq	-3568(%rbp), %rax	# body, tmp1248
	movq	16(%rax), %rax	# body_244->fld[1].rtx, D.23648
	movl	8(%rax), %eax	# _276->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, tmp1249
	movl	regclass_map(,%rax,4), %ecx	# regclass_map, D.23650
	movq	-3568(%rbp), %rax	# body, tmp1250
	movq	16(%rax), %rax	# body_244->fld[1].rtx, D.23648
	movzbl	2(%rax), %eax	# _279->mode, D.23651
	movzbl	%al, %eax	# D.23651, D.23652
	movl	%ecx, %esi	# D.23650,
	movl	%eax, %edi	# D.23652,
	call	ix86_register_move_cost	#
	cmpl	$2, %eax	#, D.23645
	jne	.L977	#,
	.loc 1 2532 0
	movl	$0, %eax	#, D.23645
	jmp	.L1495	#
.L977:
	.loc 1 2534 0
	movq	-3784(%rbp), %rax	# insn, tmp1251
	movq	%rax, %rdi	# tmp1251,
	call	extract_insn	#
	.loc 1 2536 0
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.23647
	movsbl	%al, %eax	# D.23647, reload_n_operands.617
	movl	%eax, reload_n_operands(%rip)	# reload_n_operands.617, reload_n_operands
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, tmp1252
	movl	%eax, -3652(%rbp)	# tmp1252, noperands
	.loc 1 2537 0
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.23647
	movsbl	%al, %eax	# D.23647, tmp1253
	movl	%eax, -3648(%rbp)	# tmp1253, n_alternatives
	.loc 1 2540 0
	cmpl	$0, -3652(%rbp)	#, noperands
	je	.L979	#,
	.loc 1 2540 0 is_stmt 0 discriminator 1
	cmpl	$0, -3648(%rbp)	#, n_alternatives
	jne	.L980	#,
.L979:
	.loc 1 2541 0 is_stmt 1
	movl	$0, %eax	#, D.23645
	jmp	.L1495	#
.L980:
	.loc 1 2543 0
	movq	-3784(%rbp), %rax	# insn, tmp1254
	movl	40(%rax), %eax	# insn_243(D)->fld[4].rtint, tmp1255
	movl	%eax, -3644(%rbp)	# tmp1255, insn_code_number
	.loc 1 2544 0
	movl	-3644(%rbp), %eax	# insn_code_number, tmp1257
	shrl	$31, %eax	#, tmp1256
	movzbl	%al, %eax	# D.23653, this_insn_is_asm.618
	movl	%eax, this_insn_is_asm(%rip)	# this_insn_is_asm.618, this_insn_is_asm
	.loc 1 2546 0
	movl	-3652(%rbp), %eax	# noperands, tmp1258
	cltq
	leaq	0(,%rax,4), %rdx	#, D.23654
	leaq	-2096(%rbp), %rax	#, tmp1259
	movl	$recog_data+720, %esi	#,
	movq	%rax, %rdi	# tmp1259,
	call	memcpy	#
	.loc 1 2548 0
	movl	-3652(%rbp), %eax	# noperands, tmp1260
	cltq
	leaq	0(,%rax,8), %rdx	#, D.23654
	leaq	-1712(%rbp), %rax	#, tmp1261
	movl	$recog_data+480, %esi	#,
	movq	%rax, %rdi	# tmp1261,
	call	memcpy	#
	.loc 1 2550 0
	movl	$-1, -3744(%rbp)	#, commutative
	.loc 1 2557 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L981	#
.L996:
.LBB28:
	.loc 1 2562 0
	movl	-3776(%rbp), %eax	# i, tmp1263
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1265
	cltq
	movq	%rdx, -1472(%rbp,%rax,8)	# D.23648, substed_operand
	.loc 1 2563 0
	movl	-3776(%rbp), %eax	# i, tmp1267
	cltq
	movq	-1712(%rbp,%rax,8), %rax	# constraints, p.619
	movq	%rax, -1840(%rbp)	# p.619, p
	.loc 1 2565 0
	movl	-3776(%rbp), %eax	# i, tmp1269
	cltq
	movl	$0, -2992(%rbp,%rax,4)	#, modified
	.loc 1 2570 0
	jmp	.L982	#
.L995:
	.loc 1 2572 0
	cmpl	$61, -3640(%rbp)	#, c
	jne	.L983	#,
	.loc 1 2573 0
	movl	-3776(%rbp), %eax	# i, tmp1271
	cltq
	movl	$2, -2992(%rbp,%rax,4)	#, modified
	jmp	.L982	#
.L983:
	.loc 1 2574 0
	cmpl	$43, -3640(%rbp)	#, c
	jne	.L984	#,
	.loc 1 2575 0
	movl	-3776(%rbp), %eax	# i, tmp1273
	cltq
	movl	$1, -2992(%rbp,%rax,4)	#, modified
	jmp	.L982	#
.L984:
	.loc 1 2576 0
	cmpl	$37, -3640(%rbp)	#, c
	jne	.L985	#,
	.loc 1 2579 0
	movl	-3652(%rbp), %eax	# noperands, tmp1274
	subl	$1, %eax	#, D.23645
	cmpl	-3776(%rbp), %eax	# i, D.23645
	jne	.L986	#,
	.loc 1 2580 0
	movl	$__FUNCTION__.11908, %edx	#,
	movl	$2580, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L986:
	.loc 1 2582 0
	movl	-3776(%rbp), %eax	# i, tmp1275
	movl	%eax, -3744(%rbp)	# tmp1275, commutative
	jmp	.L982	#
.L985:
	.loc 1 2584 0
	movl	-3640(%rbp), %eax	# c, tmp1276
	movzbl	%al, %eax	# tmp1276, D.23645
	cltq
	movzwl	_sch_istable(%rax,%rax), %eax	# _sch_istable, D.23646
	movzwl	%ax, %eax	# D.23646, D.23645
	andl	$4, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	je	.L982	#,
	.loc 1 2586 0
	movq	-1840(%rbp), %rax	# p, p.620
	leaq	-1(%rax), %rcx	#, D.23655
	leaq	-1840(%rbp), %rax	#, tmp1278
	movl	$10, %edx	#,
	movq	%rax, %rsi	# tmp1278,
	movq	%rcx, %rdi	# D.23655,
	call	strtoul	#
	movl	%eax, -3640(%rbp)	# D.23654, c
	.loc 1 2589 0
	movl	-3776(%rbp), %eax	# i, tmp1280
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3640(%rbp), %eax	# c, tmp1282
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movq	%rdx, %rsi	# D.23648,
	movq	%rax, %rdi	# D.23648,
	call	operands_match_p	#
	movl	%eax, %ecx	# D.23645, D.23647
	movl	-3776(%rbp), %eax	# i, tmp1284
	movslq	%eax, %rsi	# tmp1284, tmp1283
	movl	-3640(%rbp), %eax	# c, tmp1286
	cltq
	addq	%rax, %rax	# tmp1288
	movq	%rax, %rdx	# tmp1287, tmp1289
	salq	$4, %rdx	#, tmp1289
	subq	%rax, %rdx	# tmp1287, tmp1289
	leaq	-16(%rbp), %rax	#, tmp3303
	addq	%rdx, %rax	# tmp1289, tmp1290
	addq	%rsi, %rax	# tmp1283, tmp1291
	subq	$1216, %rax	#, tmp1292
	movb	%cl, (%rax)	# D.23647, operands_match
	.loc 1 2593 0
	movl	-3640(%rbp), %eax	# c, tmp1293
	cmpl	-3776(%rbp), %eax	# i, tmp1293
	jne	.L987	#,
	.loc 1 2594 0
	movl	$__FUNCTION__.11908, %edx	#,
	movl	$2594, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L987:
	.loc 1 2598 0
	cmpl	$0, -3744(%rbp)	#, commutative
	js	.L982	#,
	.loc 1 2600 0
	movl	-3640(%rbp), %eax	# c, tmp1294
	cmpl	-3744(%rbp), %eax	# commutative, tmp1294
	je	.L988	#,
	.loc 1 2600 0 is_stmt 0 discriminator 1
	movl	-3744(%rbp), %eax	# commutative, tmp1295
	addl	$1, %eax	#, D.23645
	cmpl	-3640(%rbp), %eax	# c, D.23645
	jne	.L989	#,
.L988:
.LBB29:
	.loc 1 2602 0 is_stmt 1
	movl	-3640(%rbp), %eax	# c, tmp1296
	cmpl	-3744(%rbp), %eax	# commutative, tmp1296
	jne	.L990	#,
	.loc 1 2602 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.621
	jmp	.L991	#
.L990:
	.loc 1 2602 0 discriminator 2
	movl	$-1, %eax	#, iftmp.621
.L991:
	.loc 1 2602 0 discriminator 3
	movl	-3640(%rbp), %edx	# c, tmp1300
	addl	%edx, %eax	# tmp1300, tmp1299
	movl	%eax, -3636(%rbp)	# tmp1299, other
	.loc 1 2604 0 is_stmt 1 discriminator 3
	movl	-3776(%rbp), %eax	# i, tmp1302
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3636(%rbp), %eax	# other, tmp1304
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movq	%rdx, %rsi	# D.23648,
	movq	%rax, %rdi	# D.23648,
	call	operands_match_p	#
	movl	%eax, %ecx	# D.23645, D.23647
	movl	-3776(%rbp), %eax	# i, tmp1306
	movslq	%eax, %rsi	# tmp1306, tmp1305
	movl	-3636(%rbp), %eax	# other, tmp1308
	cltq
	addq	%rax, %rax	# tmp1310
	movq	%rax, %rdx	# tmp1309, tmp1311
	salq	$4, %rdx	#, tmp1311
	subq	%rax, %rdx	# tmp1309, tmp1311
	leaq	-16(%rbp), %rax	#, tmp3305
	addq	%rdx, %rax	# tmp1311, tmp1312
	addq	%rsi, %rax	# tmp1305, tmp1313
	subq	$1216, %rax	#, tmp1314
	movb	%cl, (%rax)	# D.23647, operands_match
.L989:
.LBE29:
	.loc 1 2607 0
	movl	-3776(%rbp), %eax	# i, tmp1315
	cmpl	-3744(%rbp), %eax	# commutative, tmp1315
	je	.L992	#,
	.loc 1 2607 0 is_stmt 0 discriminator 1
	movl	-3744(%rbp), %eax	# commutative, tmp1316
	addl	$1, %eax	#, D.23645
	cmpl	-3776(%rbp), %eax	# i, D.23645
	jne	.L982	#,
.L992:
.LBB30:
	.loc 1 2609 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp1317
	cmpl	-3744(%rbp), %eax	# commutative, tmp1317
	jne	.L993	#,
	.loc 1 2609 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.622
	jmp	.L994	#
.L993:
	.loc 1 2609 0 discriminator 2
	movl	$-1, %eax	#, iftmp.622
.L994:
	.loc 1 2609 0 discriminator 3
	movl	-3776(%rbp), %edx	# i, tmp1321
	addl	%edx, %eax	# tmp1321, tmp1320
	movl	%eax, -3632(%rbp)	# tmp1320, other
	.loc 1 2611 0 is_stmt 1 discriminator 3
	movl	-3632(%rbp), %eax	# other, tmp1323
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3640(%rbp), %eax	# c, tmp1325
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movq	%rdx, %rsi	# D.23648,
	movq	%rax, %rdi	# D.23648,
	call	operands_match_p	#
	movl	%eax, %ecx	# D.23645, D.23647
	movl	-3632(%rbp), %eax	# other, tmp1327
	movslq	%eax, %rsi	# tmp1327, tmp1326
	movl	-3640(%rbp), %eax	# c, tmp1329
	cltq
	addq	%rax, %rax	# tmp1331
	movq	%rax, %rdx	# tmp1330, tmp1332
	salq	$4, %rdx	#, tmp1332
	subq	%rax, %rdx	# tmp1330, tmp1332
	leaq	-16(%rbp), %rax	#, tmp3307
	addq	%rdx, %rax	# tmp1332, tmp1333
	addq	%rsi, %rax	# tmp1326, tmp1334
	subq	$1216, %rax	#, tmp1335
	movb	%cl, (%rax)	# D.23647, operands_match
.L982:
.LBE30:
	.loc 1 2570 0 discriminator 1
	movq	-1840(%rbp), %rax	# p, p.623
	leaq	1(%rax), %rdx	#, p.625
	movq	%rdx, -1840(%rbp)	# p.625, p
	movzbl	(%rax), %eax	# *p.624_301, D.23647
	movsbl	%al, %eax	# D.23647, tmp1336
	movl	%eax, -3640(%rbp)	# tmp1336, c
	cmpl	$0, -3640(%rbp)	#, c
	jne	.L995	#,
.LBE28:
	.loc 1 2557 0
	addl	$1, -3776(%rbp)	#, i
.L981:
	.loc 1 2557 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1337
	cmpl	-3652(%rbp), %eax	# noperands, tmp1337
	jl	.L996	#,
	.loc 1 2630 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L997	#
.L1026:
.LBB31:
	.loc 1 2632 0
	movl	-3776(%rbp), %eax	# i, tmp1339
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _337->code, D.23646
	movzwl	%ax, %eax	# D.23646, tmp1340
	movl	%eax, -3628(%rbp)	# tmp1340, code
	.loc 1 2634 0
	movl	-3776(%rbp), %eax	# i, tmp1342
	cltq
	movl	$0, -3376(%rbp,%rax,4)	#, address_reloaded
	.loc 1 2635 0
	movl	-3776(%rbp), %eax	# i, tmp1344
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	testl	%eax, %eax	# D.23656
	je	.L998	#,
	.loc 1 2636 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1346
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 2635 0 discriminator 1
	cmpl	$2, %eax	#, D.23656
	jne	.L999	#,
	.loc 1 2635 0 is_stmt 0 discriminator 3
	movl	$1, %eax	#, iftmp.627
	jmp	.L1001	#
.L999:
	.loc 1 2635 0 discriminator 4
	movl	$9, %eax	#, iftmp.627
	jmp	.L1001	#
.L998:
	.loc 1 2635 0 discriminator 2
	movl	$0, %eax	#, iftmp.626
.L1001:
	.loc 1 2635 0 discriminator 5
	movl	-3776(%rbp), %edx	# i, tmp1348
	movslq	%edx, %rdx	# tmp1348, tmp1347
	movl	%eax, -3248(%rbp,%rdx,4)	# iftmp.626, operand_type
	.loc 1 2639 0 is_stmt 1 discriminator 5
	movl	-3776(%rbp), %eax	# i, tmp1350
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	testl	%eax, %eax	# D.23656
	je	.L1002	#,
	.loc 1 2640 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1352
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 2639 0 discriminator 1
	cmpl	$2, %eax	#, D.23656
	jne	.L1003	#,
	.loc 1 2639 0 is_stmt 0 discriminator 3
	movl	$5, %eax	#, iftmp.629
	jmp	.L1005	#
.L1003:
	.loc 1 2639 0 discriminator 4
	movl	$9, %eax	#, iftmp.629
	jmp	.L1005	#
.L1002:
	.loc 1 2639 0 discriminator 2
	movl	$3, %eax	#, iftmp.628
.L1005:
	.loc 1 2639 0 discriminator 5
	movl	-3776(%rbp), %edx	# i, tmp1354
	movslq	%edx, %rdx	# tmp1354, tmp1353
	movl	%eax, -3120(%rbp,%rdx,4)	# iftmp.628, address_type
	.loc 1 2643 0 is_stmt 1 discriminator 5
	movl	-3776(%rbp), %eax	# i, tmp1356
	cltq
	movq	-1712(%rbp,%rax,8), %rax	# constraints, D.23655
	movzbl	(%rax), %eax	# *_352, D.23647
	testb	%al, %al	# D.23647
	je	.L1006	#,
	.loc 1 2646 0
	movl	-3776(%rbp), %eax	# i, tmp1358
	cltq
	movq	-1712(%rbp,%rax,8), %rax	# constraints, D.23655
	movzbl	(%rax), %eax	# *_354, D.23647
	cmpb	$112, %al	#, D.23647
	jne	.L1007	#,
	.loc 1 2648 0
	movl	-3776(%rbp), %eax	# i, tmp1360
	cltq
	movl	-3248(%rbp,%rax,4), %edi	# operand_type, D.23657
	movl	-3776(%rbp), %eax	# i, tmp1362
	cltq
	addq	$30, %rax	#, tmp1363
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand_loc, D.23658
	movl	-3776(%rbp), %eax	# i, tmp1365
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	-3776(%rbp), %esi	# i, tmp1366
	movq	-3784(%rbp), %rcx	# insn, tmp1367
	movq	%rcx, 8(%rsp)	# tmp1367,
	movl	-3792(%rbp), %ecx	# ind_levels, tmp1368
	movl	%ecx, (%rsp)	# tmp1368,
	movl	%edi, %r9d	# D.23657,
	movl	%esi, %r8d	# tmp1366,
	movq	%rdx, %rcx	# D.23658,
	movq	%rax, %rdx	# D.23648,
	movl	$0, %esi	#,
	movl	$0, %edi	#,
	call	find_reloads_address	#
	.loc 1 2655 0
	movl	-3776(%rbp), %eax	# i, tmp1370
	cltq
	addq	$30, %rax	#, tmp1371
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	movq	(%rax), %rax	# *_360, D.23648
	movzwl	(%rax), %eax	# _361->code, D.23646
	movzwl	%ax, %eax	# D.23646, D.23645
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.23647
	cmpb	$111, %al	#, D.23647
	je	.L1008	#,
	.loc 1 2656 0
	movl	-3776(%rbp), %eax	# i, tmp1374
	cltq
	addq	$30, %rax	#, tmp1375
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	movq	(%rax), %rax	# *_365, D.23648
	movzwl	(%rax), %eax	# _366->code, D.23646
	cmpw	$63, %ax	#, D.23646
	jne	.L1009	#,
.L1008:
	.loc 1 2657 0
	movl	-3776(%rbp), %eax	# i, tmp1377
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _368->code, D.23646
	cmpw	$78, %ax	#, D.23646
	je	.L1010	#,
	.loc 1 2658 0
	movl	-3776(%rbp), %eax	# i, tmp1379
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _370->code, D.23646
	cmpw	$75, %ax	#, D.23646
	jne	.L1009	#,
.L1010:
	.loc 1 2660 0
	movq	-3784(%rbp), %rax	# insn, tmp1380
	movl	$-1, 40(%rax)	#, insn_243(D)->fld[4].rtint
	.loc 1 2661 0
	movq	-3808(%rbp), %rdi	# reload_reg_p, tmp1381
	movl	-3796(%rbp), %ecx	# live_known, tmp1382
	movl	-3792(%rbp), %edx	# ind_levels, tmp1383
	movl	-3788(%rbp), %esi	# replace, tmp1384
	movq	-3784(%rbp), %rax	# insn, tmp1385
	movq	%rdi, %r8	# tmp1381,
	movq	%rax, %rdi	# tmp1385,
	call	find_reloads	#
	movl	%eax, -3732(%rbp)	# tmp1386, retval
	.loc 1 2663 0
	movl	-3732(%rbp), %eax	# retval, D.23645
	jmp	.L1495	#
.L1009:
	.loc 1 2666 0
	movl	-3776(%rbp), %eax	# i, tmp1388
	cltq
	addq	$30, %rax	#, tmp1389
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	movq	(%rax), %rdx	# *_374, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1391
	cltq
	movq	%rdx, recog_data(,%rax,8)	# D.23648, recog_data.operand
	.loc 1 2667 0
	movl	-3776(%rbp), %eax	# i, tmp1393
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1395
	cltq
	movq	%rdx, -1472(%rbp,%rax,8)	# D.23648, substed_operand
	jmp	.L1006	#
.L1007:
	.loc 1 2669 0
	cmpl	$66, -3628(%rbp)	#, code
	jne	.L1011	#,
	.loc 1 2672 0
	movl	-3776(%rbp), %eax	# i, tmp1397
	cltq
	movl	-3120(%rbp,%rax,4), %r9d	# address_type, D.23657
	.loc 1 2675 0
	movl	-3776(%rbp), %eax	# i, tmp1399
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	.loc 1 2672 0
	leaq	8(%rax), %rdi	#, D.23658
	.loc 1 2674 0
	movl	-3776(%rbp), %eax	# i, tmp1401
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	.loc 1 2672 0
	movq	8(%rax), %rdx	# _380->fld[0].rtx, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1403
	cltq
	addq	$30, %rax	#, tmp1404
	movq	recog_data(,%rax,8), %rsi	# recog_data.operand_loc, D.23658
	movl	-3776(%rbp), %eax	# i, tmp1406
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzbl	2(%rax), %eax	# _383->mode, D.23651
	movzbl	%al, %eax	# D.23651, D.23652
	movl	-3776(%rbp), %r8d	# i, tmp1407
	movq	-3784(%rbp), %rcx	# insn, tmp1408
	movq	%rcx, 8(%rsp)	# tmp1408,
	movl	-3792(%rbp), %ecx	# ind_levels, tmp1409
	movl	%ecx, (%rsp)	# tmp1409,
	movq	%rdi, %rcx	# D.23658,
	movl	%eax, %edi	# D.23652,
	call	find_reloads_address	#
	movl	-3776(%rbp), %edx	# i, tmp1411
	movslq	%edx, %rdx	# tmp1411, tmp1410
	movl	%eax, -3376(%rbp,%rdx,4)	# D.23645, address_reloaded
	.loc 1 2677 0
	movl	-3776(%rbp), %eax	# i, tmp1413
	cltq
	addq	$30, %rax	#, tmp1414
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	movq	(%rax), %rdx	# *_387, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1416
	cltq
	movq	%rdx, recog_data(,%rax,8)	# D.23648, recog_data.operand
	.loc 1 2678 0
	movl	-3776(%rbp), %eax	# i, tmp1418
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1420
	cltq
	movq	%rdx, -1472(%rbp,%rax,8)	# D.23648, substed_operand
	jmp	.L1006	#
.L1011:
	.loc 1 2680 0
	cmpl	$63, -3628(%rbp)	#, code
	jne	.L1012	#,
.LBB32:
	.loc 1 2682 0
	movl	-3776(%rbp), %eax	# i, tmp1422
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movq	8(%rax), %rax	# _390->fld[0].rtx, tmp1423
	movq	%rax, -3552(%rbp)	# tmp1423, reg
	.loc 1 2684 0
	leaq	-3376(%rbp), %rax	#, tmp1424
	movl	-3776(%rbp), %edx	# i, tmp1426
	movslq	%edx, %rdx	# tmp1426, tmp1425
	salq	$2, %rdx	#, tmp1427
	leaq	(%rax,%rdx), %r9	#, D.23659
	cmpq	$0, -3560(%rbp)	#, set
	je	.L1013	#,
	.loc 1 2687 0 discriminator 1
	movq	-3560(%rbp), %rax	# set, tmp1428
	leaq	8(%rax), %rdx	#, D.23658
	movl	-3776(%rbp), %eax	# i, tmp1430
	cltq
	addq	$30, %rax	#, tmp1431
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	.loc 1 2684 0 discriminator 1
	cmpq	%rax, %rdx	# D.23658, D.23658
	jne	.L1013	#,
	.loc 1 2684 0 is_stmt 0 discriminator 3
	movl	$1, %eax	#, iftmp.630
	jmp	.L1014	#
.L1013:
	.loc 1 2684 0 discriminator 2
	movl	$0, %eax	#, iftmp.630
.L1014:
	.loc 1 2684 0 discriminator 4
	movl	-3776(%rbp), %edx	# i, tmp1433
	movslq	%edx, %rdx	# tmp1433, tmp1432
	movl	-3120(%rbp,%rdx,4), %edx	# address_type, D.23657
	movl	-3776(%rbp), %ecx	# i, tmp1435
	movslq	%ecx, %rcx	# tmp1435, tmp1434
	movq	recog_data(,%rcx,8), %rdi	# recog_data.operand, D.23648
	.loc 1 2683 0 is_stmt 1 discriminator 4
	movq	-3784(%rbp), %r8	# insn, tmp1436
	movl	-3792(%rbp), %ecx	# ind_levels, tmp1437
	movl	-3776(%rbp), %esi	# i, tmp1438
	movq	%r9, (%rsp)	# D.23659,
	movq	%r8, %r9	# tmp1436,
	movl	%eax, %r8d	# iftmp.630,
	call	find_reloads_toplev	#
	movq	%rax, -3544(%rbp)	# tmp1439, op
	.loc 1 2696 0 discriminator 4
	cmpl	$0, -3788(%rbp)	#, replace
	je	.L1015	#,
	.loc 1 2697 0
	movq	-3544(%rbp), %rax	# op, tmp1440
	movzwl	(%rax), %eax	# op_399->code, D.23646
	cmpw	$66, %ax	#, D.23646
	jne	.L1015	#,
	.loc 1 2698 0
	movq	-3552(%rbp), %rax	# reg, tmp1441
	movzwl	(%rax), %eax	# reg_391->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1015	#,
	.loc 1 2699 0
	movq	-3552(%rbp), %rax	# reg, tmp1442
	movzbl	2(%rax), %eax	# reg_391->mode, D.23651
	movzbl	%al, %eax	# D.23651, D.23645
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23651
	.loc 1 2700 0
	movq	-3544(%rbp), %rax	# op, tmp1444
	movzbl	2(%rax), %eax	# op_399->mode, D.23651
	movzbl	%al, %eax	# D.23651, D.23645
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23651
	.loc 1 2699 0
	cmpb	%al, %dl	# D.23651, D.23651
	jb	.L1015	#,
	.loc 1 2703 0
	movq	reg_equiv_memory_loc(%rip), %rdx	# reg_equiv_memory_loc, reg_equiv_memory_loc.631
	movq	-3552(%rbp), %rax	# reg, tmp1446
	movl	8(%rax), %eax	# reg_391->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, D.23654
	salq	$3, %rax	#, D.23654
	addq	%rdx, %rax	# reg_equiv_memory_loc.631, D.23658
	.loc 1 2701 0
	movq	(%rax), %rbx	# *_412, D.23648
	movq	-3552(%rbp), %rax	# reg, tmp1447
	movq	%rax, %rdx	# tmp1447,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-3784(%rbp), %rdx	# insn, tmp1448
	movq	%rdx, %rsi	# tmp1448,
	movq	%rax, %rdi	# D.23648,
	call	emit_insn_before	#
	movq	%rbx, %rdx	# D.23648,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.23648,
	call	set_unique_reg_note	#
.L1015:
	.loc 1 2705 0
	movl	-3776(%rbp), %eax	# i, tmp1450
	cltq
	movq	-3544(%rbp), %rdx	# op, tmp1451
	movq	%rdx, recog_data(,%rax,8)	# tmp1451, recog_data.operand
	movl	-3776(%rbp), %eax	# i, tmp1453
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1455
	cltq
	movq	%rdx, -1472(%rbp,%rax,8)	# D.23648, substed_operand
.LBE32:
	jmp	.L1006	#
.L1012:
	.loc 1 2707 0
	cmpl	$75, -3628(%rbp)	#, code
	je	.L1016	#,
	.loc 1 2707 0 is_stmt 0 discriminator 1
	movl	-3628(%rbp), %eax	# code, code.632
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.23647
	cmpb	$49, %al	#, D.23647
	jne	.L1017	#,
.L1016:
	.loc 1 2712 0 is_stmt 1
	leaq	-3376(%rbp), %rax	#, tmp1457
	movl	-3776(%rbp), %edx	# i, tmp1459
	movslq	%edx, %rdx	# tmp1459, tmp1458
	salq	$2, %rdx	#, tmp1460
	leaq	(%rax,%rdx), %r8	#, D.23659
	movl	-3776(%rbp), %eax	# i, tmp1462
	cltq
	movl	-3120(%rbp,%rax,4), %edx	# address_type, D.23657
	movl	-3776(%rbp), %eax	# i, tmp1464
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movq	-3784(%rbp), %rdi	# insn, tmp1465
	movl	-3792(%rbp), %ecx	# ind_levels, tmp1466
	movl	-3776(%rbp), %esi	# i, tmp1467
	movq	%r8, (%rsp)	# D.23659,
	movq	%rdi, %r9	# tmp1465,
	movl	$0, %r8d	#,
	movq	%rax, %rdi	# D.23648,
	call	find_reloads_toplev	#
	movl	-3776(%rbp), %edx	# i, tmp1469
	movslq	%edx, %rdx	# tmp1469, tmp1468
	movq	%rax, recog_data(,%rdx,8)	# D.23648, recog_data.operand
	.loc 1 2711 0
	movl	-3776(%rbp), %eax	# i, tmp1471
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1473
	cltq
	movq	%rdx, -1472(%rbp,%rax,8)	# D.23648, substed_operand
	jmp	.L1006	#
.L1017:
	.loc 1 2715 0
	cmpl	$61, -3628(%rbp)	#, code
	jne	.L1006	#,
.LBB33:
	.loc 1 2723 0
	movl	-3776(%rbp), %eax	# i, tmp1475
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	8(%rax), %eax	# _419->fld[0].rtuint, D.23649
	movl	%eax, -3624(%rbp)	# D.23649, regno
	.loc 1 2724 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.633
	movl	-3624(%rbp), %edx	# regno, tmp1476
	movslq	%edx, %rdx	# tmp1476, D.23654
	salq	$3, %rdx	#, D.23654
	addq	%rdx, %rax	# D.23654, D.23658
	movq	(%rax), %rax	# *_425, D.23648
	testq	%rax, %rax	# D.23648
	je	.L1018	#,
	.loc 1 2725 0
	cmpq	$0, -3560(%rbp)	#, set
	je	.L1019	#,
	.loc 1 2725 0 is_stmt 0 discriminator 1
	movq	-3560(%rbp), %rax	# set, tmp1477
	leaq	8(%rax), %rdx	#, D.23658
	movl	-3776(%rbp), %eax	# i, tmp1479
	cltq
	addq	$30, %rax	#, tmp1480
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	cmpq	%rax, %rdx	# D.23658, D.23658
	je	.L1018	#,
.L1019:
	.loc 1 2730 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp1482
	cltq
	movl	-2096(%rbp,%rax,4), %eax	# operand_mode, D.23652
	testl	%eax, %eax	# D.23652
	jne	.L1020	#,
	.loc 1 2731 0
	movl	-3776(%rbp), %eax	# i, tmp1484
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzbl	2(%rax), %eax	# _430->mode, D.23651
	movzbl	%al, %edx	# D.23651, D.23652
	movl	-3776(%rbp), %eax	# i, tmp1486
	cltq
	movl	%edx, -2096(%rbp,%rax,4)	# D.23652, operand_mode
.L1020:
	.loc 1 2734 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.634
	movl	-3624(%rbp), %edx	# regno, tmp1487
	movslq	%edx, %rdx	# tmp1487, D.23654
	salq	$3, %rdx	#, D.23654
	addq	%rdx, %rax	# D.23654, D.23658
	movq	(%rax), %rdx	# *_436, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1489
	cltq
	movq	%rdx, recog_data(,%rax,8)	# D.23648, recog_data.operand
	.loc 1 2733 0
	movl	-3776(%rbp), %eax	# i, tmp1491
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1493
	cltq
	movq	%rdx, -1472(%rbp,%rax,8)	# D.23648, substed_operand
.L1018:
	.loc 1 2736 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.635
	movl	-3624(%rbp), %edx	# regno, tmp1494
	movslq	%edx, %rdx	# tmp1494, D.23654
	salq	$3, %rdx	#, D.23654
	addq	%rdx, %rax	# D.23654, D.23658
	movq	(%rax), %rax	# *_442, D.23648
	testq	%rax, %rax	# D.23648
	je	.L1006	#,
	.loc 1 2737 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.636
	movl	-3624(%rbp), %edx	# regno, tmp1495
	movslq	%edx, %rdx	# tmp1495, D.23654
	salq	$3, %rdx	#, D.23654
	addq	%rdx, %rax	# D.23654, D.23658
	movq	(%rax), %rax	# *_447, D.23648
	testq	%rax, %rax	# D.23648
	jne	.L1021	#,
	.loc 1 2737 0 is_stmt 0 discriminator 1
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.637
	testl	%eax, %eax	# num_not_at_initial_offset.637
	je	.L1006	#,
.L1021:
	.loc 1 2741 0 is_stmt 1
	leaq	-3376(%rbp), %rax	#, tmp1496
	movl	-3776(%rbp), %edx	# i, tmp1498
	movslq	%edx, %rdx	# tmp1498, tmp1497
	salq	$2, %rdx	#, tmp1499
	leaq	(%rax,%rdx), %r8	#, D.23659
	movl	-3776(%rbp), %eax	# i, tmp1501
	cltq
	movl	-3120(%rbp,%rax,4), %edx	# address_type, D.23657
	movl	-3776(%rbp), %eax	# i, tmp1503
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movq	-3784(%rbp), %rdi	# insn, tmp1504
	movl	-3792(%rbp), %ecx	# ind_levels, tmp1505
	movl	-3776(%rbp), %esi	# i, tmp1506
	movq	%r8, (%rsp)	# D.23659,
	movq	%rdi, %r9	# tmp1504,
	movl	$0, %r8d	#,
	movq	%rax, %rdi	# D.23648,
	call	find_reloads_toplev	#
	movl	-3776(%rbp), %edx	# i, tmp1508
	movslq	%edx, %rdx	# tmp1508, tmp1507
	movq	%rax, recog_data(,%rdx,8)	# D.23648, recog_data.operand
	.loc 1 2740 0
	movl	-3776(%rbp), %eax	# i, tmp1510
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1512
	cltq
	movq	%rdx, -1472(%rbp,%rax,8)	# D.23648, substed_operand
.L1006:
.LBE33:
	.loc 1 2747 0
	movl	-3776(%rbp), %eax	# i, tmp1514
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _460->code, D.23646
	movzwl	%ax, %eax	# D.23646, tmp1515
	movl	%eax, -3628(%rbp)	# tmp1515, code
	.loc 1 2749 0
	cmpl	$61, -3628(%rbp)	#, code
	jne	.L1022	#,
	.loc 1 2749 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1517
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	8(%rax), %eax	# _463->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	jbe	.L1022	#,
	.loc 1 2751 0 is_stmt 1 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1519
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	8(%rax), %eax	# _465->fld[0].rtuint, D.23649
	.loc 1 2749 0 discriminator 1
	movl	%eax, %edi	# D.23645,
	call	reg_preferred_class	#
	jmp	.L1023	#
.L1022:
	.loc 1 2749 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.638
.L1023:
	.loc 1 2749 0 discriminator 3
	movl	-3776(%rbp), %edx	# i, tmp1521
	movslq	%edx, %rdx	# tmp1521, tmp1520
	movl	%eax, -3504(%rbp,%rdx,4)	# iftmp.638, preferred_class
	.loc 1 2756 0 is_stmt 1 discriminator 3
	cmpl	$61, -3628(%rbp)	#, code
	jne	.L1024	#,
	.loc 1 2755 0
	movl	-3776(%rbp), %eax	# i, tmp1523
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	8(%rax), %eax	# _470->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	jbe	.L1024	#,
	.loc 1 2756 0
	movl	-3776(%rbp), %eax	# i, tmp1525
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	8(%rax), %eax	# _472->fld[0].rtuint, D.23649
	movl	%eax, %edi	# D.23645,
	call	reg_alternate_class	#
	testl	%eax, %eax	# D.23650
	jne	.L1024	#,
	.loc 1 2756 0 is_stmt 0 discriminator 2
	movl	$1, %eax	#, iftmp.639
	jmp	.L1025	#
.L1024:
	.loc 1 2756 0 discriminator 1
	movl	$0, %eax	#, iftmp.639
.L1025:
	.loc 1 2754 0 is_stmt 1
	movl	%eax, %edx	# iftmp.639, D.23647
	movl	-3776(%rbp), %eax	# i, tmp1527
	cltq
	movb	%dl, -320(%rbp,%rax)	# D.23647, pref_or_nothing
.LBE31:
	.loc 1 2630 0
	addl	$1, -3776(%rbp)	#, i
.L997:
	.loc 1 2630 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1528
	cmpl	-3652(%rbp), %eax	# noperands, tmp1528
	jl	.L1026	#,
	.loc 1 2761 0 is_stmt 1
	cmpq	$0, -3560(%rbp)	#, set
	je	.L1027	#,
	.loc 1 2761 0 is_stmt 0 discriminator 1
	cmpl	$1, -3652(%rbp)	#, noperands
	jle	.L1027	#,
	movq	recog_data(%rip), %rdx	# recog_data.operand, D.23648
	movq	-3560(%rbp), %rax	# set, tmp1529
	movq	8(%rax), %rax	# set_255->fld[0].rtx, D.23648
	cmpq	%rax, %rdx	# D.23648, D.23648
	jne	.L1027	#,
	.loc 1 2762 0 is_stmt 1
	movq	recog_data+8(%rip), %rdx	# recog_data.operand, D.23648
	movq	-3560(%rbp), %rax	# set, tmp1530
	movq	16(%rax), %rax	# set_255->fld[1].rtx, D.23648
	cmpq	%rax, %rdx	# D.23648, D.23648
	jne	.L1027	#,
	.loc 1 2765 0
	movl	-3504(%rbp), %eax	# preferred_class, D.23650
	movl	-3500(%rbp), %edx	# preferred_class, D.23650
	movslq	%edx, %rcx	# D.23645, tmp1531
	movslq	%eax, %rdx	# D.23645, tmp1532
	movq	%rdx, %rax	# tmp1532, tmp1533
	salq	$2, %rax	#, tmp1533
	addq	%rdx, %rax	# tmp1532, tmp1533
	leaq	0(,%rax,4), %rdx	#, tmp1534
	addq	%rdx, %rax	# tmp1534, tmp1533
	addq	%rcx, %rax	# tmp1531, tmp1535
	movl	reg_class_subunion(,%rax,4), %eax	# reg_class_subunion, D.23650
	movl	%eax, -3500(%rbp)	# D.23650, preferred_class
	.loc 1 2764 0
	movl	-3500(%rbp), %eax	# preferred_class, D.23650
	movl	%eax, -3504(%rbp)	# D.23650, preferred_class
	.loc 1 2766 0
	movzbl	-320(%rbp), %edx	# pref_or_nothing, D.23647
	movzbl	-319(%rbp), %eax	# pref_or_nothing, D.23647
	orl	%edx, %eax	# D.23647, D.23660
	movb	%al, -320(%rbp)	# D.23660, pref_or_nothing
	.loc 1 2767 0
	movzbl	-319(%rbp), %edx	# pref_or_nothing, D.23647
	movzbl	-320(%rbp), %eax	# pref_or_nothing, D.23647
	orl	%edx, %eax	# D.23647, D.23660
	movb	%al, -319(%rbp)	# D.23660, pref_or_nothing
.L1027:
	.loc 1 2774 0
	movl	$660, -3748(%rbp)	#, best
	.loc 1 2776 0
	movl	$0, -3764(%rbp)	#, swapped
	.loc 1 2777 0
	movl	$0, -3752(%rbp)	#, goal_alternative_swapped
.L1028:
	.loc 1 2787 0
	movl	$0, -3760(%rbp)	#, this_alternative_number
	jmp	.L1029	#
.L1298:
.LBB34:
	.loc 1 2794 0
	movl	$0, -3728(%rbp)	#, losers
	.loc 1 2797 0
	movl	$0, -3724(%rbp)	#, bad
	.loc 1 2804 0
	movl	$0, -3720(%rbp)	#, reject
	.loc 1 2806 0
	movl	$0, -3736(%rbp)	#, this_earlyclobber
	.loc 1 2808 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1030	#
.L1271:
.LBB35:
	.loc 1 2810 0
	movl	-3776(%rbp), %eax	# i, tmp1537
	cltq
	movq	-1712(%rbp,%rax,8), %rax	# constraints, p.640
	movq	%rax, -1840(%rbp)	# p.640, p
	.loc 1 2811 0
	movl	$0, -3716(%rbp)	#, win
	.loc 1 2812 0
	movl	$0, -3712(%rbp)	#, did_match
	.loc 1 2814 0
	movl	$1, -3708(%rbp)	#, badop
	.loc 1 2816 0
	movl	$0, -3704(%rbp)	#, winreg
	.loc 1 2818 0
	movl	-3776(%rbp), %eax	# i, tmp1539
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, tmp1540
	movq	%rax, -3592(%rbp)	# tmp1540, operand
	.loc 1 2819 0
	movl	$0, -3700(%rbp)	#, offset
	.loc 1 2822 0
	movl	$0, -3696(%rbp)	#, force_reload
	.loc 1 2823 0
	movl	$0, -3692(%rbp)	#, offmemok
	.loc 1 2826 0
	movl	$0, -3688(%rbp)	#, constmemok
	.loc 1 2827 0
	movl	$0, -3684(%rbp)	#, earlyclobber
	.loc 1 2832 0
	movq	-3592(%rbp), %rax	# operand, tmp1541
	movzwl	(%rax), %eax	# operand_510->code, D.23646
	movzwl	%ax, %eax	# D.23646, D.23645
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.23647
	cmpb	$49, %al	#, D.23647
	jne	.L1031	#,
	.loc 1 2832 0 is_stmt 0 discriminator 1
	movq	-1840(%rbp), %rax	# p, p.641
	movzbl	(%rax), %eax	# *p.641_519, D.23647
	testb	%al, %al	# D.23647
	je	.L1031	#,
	.loc 1 2833 0 is_stmt 1
	movq	-3592(%rbp), %rax	# operand, tmp1543
	movq	8(%rax), %rax	# operand_510->fld[0].rtx, tmp1544
	movq	%rax, -3592(%rbp)	# tmp1544, operand
	.loc 1 2839 0
	jmp	.L1032	#
.L1031:
	jmp	.L1032	#
.L1036:
	.loc 1 2845 0
	movq	-3592(%rbp), %rax	# operand, tmp1545
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, D.23648
	movzwl	(%rax), %eax	# _523->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1033	#,
	.loc 1 2846 0
	movq	-3592(%rbp), %rax	# operand, tmp1546
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, D.23648
	movl	8(%rax), %eax	# _525->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	ja	.L1033	#,
	.loc 1 2851 0
	movq	-3592(%rbp), %rax	# operand, tmp1547
	movzbl	2(%rax), %eax	# operand_120->mode, D.23651
	.loc 1 2848 0
	movzbl	%al, %ecx	# D.23651, D.23652
	movq	-3592(%rbp), %rax	# operand, tmp1548
	movl	16(%rax), %edx	# operand_120->fld[1].rtuint, D.23649
	.loc 1 2849 0
	movq	-3592(%rbp), %rax	# operand, tmp1549
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, D.23648
	movzbl	2(%rax), %eax	# _530->mode, D.23651
	.loc 1 2848 0
	movzbl	%al, %esi	# D.23651, D.23652
	movq	-3592(%rbp), %rax	# operand, tmp1550
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, D.23648
	movl	8(%rax), %eax	# _533->fld[0].rtuint, D.23649
	movl	%eax, %edi	# D.23649,
	call	subreg_regno_offset	#
	movl	-3700(%rbp), %edx	# offset, offset.642
	addl	%edx, %eax	# offset.642, D.23649
	movl	%eax, -3700(%rbp)	# D.23649, offset
.L1033:
	.loc 1 2853 0
	movq	-3592(%rbp), %rax	# operand, tmp1551
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, tmp1552
	movq	%rax, -3592(%rbp)	# tmp1552, operand
	.loc 1 2856 0
	movq	-3592(%rbp), %rax	# operand, tmp1553
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$67, %ax	#, D.23646
	je	.L1034	#,
	.loc 1 2856 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1554
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$68, %ax	#, D.23646
	je	.L1034	#,
	movq	-3592(%rbp), %rax	# operand, tmp1555
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$54, %ax	#, D.23646
	je	.L1034	#,
	movq	-3592(%rbp), %rax	# operand, tmp1556
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$55, %ax	#, D.23646
	je	.L1034	#,
	movq	-3592(%rbp), %rax	# operand, tmp1557
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$58, %ax	#, D.23646
	je	.L1034	#,
	movq	-3592(%rbp), %rax	# operand, tmp1558
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1034	#,
	movq	-3592(%rbp), %rax	# operand, tmp1559
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$56, %ax	#, D.23646
	je	.L1034	#,
	movq	-3592(%rbp), %rax	# operand, tmp1560
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$140, %ax	#, D.23646
	je	.L1034	#,
	.loc 1 2857 0 is_stmt 1
	movq	-3592(%rbp), %rax	# operand, tmp1561
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$75, %ax	#, D.23646
	je	.L1034	#,
	.loc 1 2882 0
	movq	-3592(%rbp), %rax	# operand, tmp1562
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$66, %ax	#, D.23646
	je	.L1035	#,
	.loc 1 2883 0
	movq	-3592(%rbp), %rax	# operand, tmp1563
	movzwl	(%rax), %eax	# operand_539->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1032	#,
	.loc 1 2884 0
	movq	-3592(%rbp), %rax	# operand, tmp1564
	movl	8(%rax), %eax	# operand_539->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	jbe	.L1032	#,
.L1035:
	.loc 1 2886 0
	movq	-3592(%rbp), %rax	# operand, tmp1565
	movzbl	2(%rax), %eax	# operand_539->mode, D.23651
	movzbl	%al, %eax	# D.23651, D.23645
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.23646
	cmpw	$127, %ax	#, D.23646
	ja	.L1032	#,
	.loc 1 2888 0
	movl	-3776(%rbp), %eax	# i, tmp1568
	cltq
	movl	-2096(%rbp,%rax,4), %eax	# operand_mode, D.23652
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23651
	.loc 1 2889 0
	movq	-3592(%rbp), %rax	# operand, tmp1570
	movzbl	2(%rax), %eax	# operand_539->mode, D.23651
	movzbl	%al, %eax	# D.23651, D.23645
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23651
	.loc 1 2890 0
	cmpb	%al, %dl	# D.23651, D.23651
	jbe	.L1032	#,
.L1034:
	.loc 1 2924 0
	movl	$1, -3696(%rbp)	#, force_reload
.L1032:
	.loc 1 2839 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1572
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$63, %ax	#, D.23646
	je	.L1036	#,
	.loc 1 2927 0
	movl	-3776(%rbp), %eax	# i, tmp1574
	cltq
	movl	$0, -2864(%rbp,%rax,4)	#, this_alternative
	.loc 1 2928 0
	movl	-3776(%rbp), %eax	# i, tmp1576
	cltq
	movb	$0, -256(%rbp,%rax)	#, this_alternative_win
	.loc 1 2929 0
	movl	-3776(%rbp), %eax	# i, tmp1578
	cltq
	movb	$0, -288(%rbp,%rax)	#, this_alternative_match_win
	.loc 1 2930 0
	movl	-3776(%rbp), %eax	# i, tmp1580
	cltq
	movb	$0, -224(%rbp,%rax)	#, this_alternative_offmemok
	.loc 1 2931 0
	movl	-3776(%rbp), %eax	# i, tmp1582
	cltq
	movb	$0, -192(%rbp,%rax)	#, this_alternative_earlyclobber
	.loc 1 2932 0
	movl	-3776(%rbp), %eax	# i, tmp1584
	cltq
	movl	$-1, -2736(%rbp,%rax,4)	#, this_alternative_matches
	.loc 1 2936 0
	movq	-1840(%rbp), %rax	# p, p.643
	movzbl	(%rax), %eax	# *p.643_562, D.23647
	testb	%al, %al	# D.23647
	je	.L1037	#,
	.loc 1 2936 0 is_stmt 0 discriminator 1
	movq	-1840(%rbp), %rax	# p, p.644
	movzbl	(%rax), %eax	# *p.644_564, D.23647
	cmpb	$44, %al	#, D.23647
	jne	.L1038	#,
.L1037:
	.loc 1 2937 0 is_stmt 1
	movl	$1, -3716(%rbp)	#, win
	movl	$0, -3708(%rbp)	#, badop
	.loc 1 2946 0
	jmp	.L1039	#
.L1038:
	jmp	.L1039	#
.L1251:
	.loc 1 2947 0
	movl	-3620(%rbp), %eax	# c, tmp1586
	subl	$33, %eax	#, tmp1585
	cmpl	$82, %eax	#, tmp1585
	ja	.L1040	#,
	movl	%eax, %eax	# tmp1585, tmp1587
	movq	.L1042(,%rax,8), %rax	#, tmp1588
	jmp	*%rax	# tmp1588
	.section	.rodata
	.align 8
	.align 4
.L1042:
	.quad	.L1041
	.quad	.L1040
	.quad	.L1497
	.quad	.L1040
	.quad	.L1044
	.quad	.L1045
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1498
	.quad	.L1498
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1047
	.quad	.L1047
	.quad	.L1047
	.quad	.L1047
	.quad	.L1047
	.quad	.L1047
	.quad	.L1047
	.quad	.L1047
	.quad	.L1047
	.quad	.L1047
	.quad	.L1040
	.quad	.L1040
	.quad	.L1048
	.quad	.L1498
	.quad	.L1049
	.quad	.L1050
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1051
	.quad	.L1052
	.quad	.L1053
	.quad	.L1053
	.quad	.L1054
	.quad	.L1054
	.quad	.L1054
	.quad	.L1054
	.quad	.L1054
	.quad	.L1054
	.quad	.L1054
	.quad	.L1054
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1055
	.quad	.L1040
	.quad	.L1056
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1057
	.quad	.L1040
	.quad	.L1058
	.quad	.L1040
	.quad	.L1040
	.quad	.L1040
	.quad	.L1059
	.quad	.L1060
	.quad	.L1061
	.quad	.L1062
	.quad	.L1040
	.quad	.L1063
	.quad	.L1064
	.text
.L1044:
	.loc 1 2954 0
	movl	-3652(%rbp), %eax	# noperands, tmp1589
	subl	$1, %eax	#, D.23645
	cmpl	-3776(%rbp), %eax	# i, D.23645
	je	.L1065	#,
	.loc 1 2955 0
	movl	-3776(%rbp), %eax	# i, tmp1590
	movl	%eax, -3744(%rbp)	# tmp1590, commutative
	.loc 1 2956 0
	jmp	.L1039	#
.L1065:
	jmp	.L1039	#
.L1050:
	.loc 1 2959 0
	addl	$6, -3720(%rbp)	#, reject
	.loc 1 2960 0
	jmp	.L1039	#
.L1041:
	.loc 1 2963 0
	movl	$600, -3720(%rbp)	#, reject
	.loc 1 2964 0
	jmp	.L1039	#
.L1068:
	.loc 1 2970 0
	movq	-1840(%rbp), %rax	# p, p.645
	addq	$1, %rax	#, p.646
	movq	%rax, -1840(%rbp)	# p.646, p
	jmp	.L1066	#
.L1497:
	.loc 1 2969 0
	nop
.L1066:
	.loc 1 2969 0 is_stmt 0 discriminator 1
	movq	-1840(%rbp), %rax	# p, p.647
	movzbl	(%rax), %eax	# *p.647_579, D.23647
	testb	%al, %al	# D.23647
	je	.L1067	#,
	.loc 1 2969 0 discriminator 2
	movq	-1840(%rbp), %rax	# p, p.648
	movzbl	(%rax), %eax	# *p.648_581, D.23647
	cmpb	$44, %al	#, D.23647
	jne	.L1068	#,
.L1067:
	.loc 1 2971 0 is_stmt 1
	jmp	.L1039	#
.L1047:
	.loc 1 2975 0
	movq	-1840(%rbp), %rax	# p, p.649
	leaq	-1(%rax), %rcx	#, D.23655
	leaq	-1840(%rbp), %rax	#, tmp1591
	movl	$10, %edx	#,
	movq	%rax, %rsi	# tmp1591,
	movq	%rcx, %rdi	# D.23655,
	call	strtoul	#
	movl	%eax, -3620(%rbp)	# D.23654, c
	.loc 1 2977 0
	movl	-3776(%rbp), %eax	# i, tmp1593
	cltq
	movl	-3620(%rbp), %edx	# c, tmp1594
	movl	%edx, -2736(%rbp,%rax,4)	# tmp1594, this_alternative_matches
	.loc 1 2985 0
	cmpl	$0, -3764(%rbp)	#, swapped
	je	.L1069	#,
	.loc 1 2985 0 is_stmt 0 discriminator 1
	movl	-3620(%rbp), %eax	# c, tmp1595
	cmpl	-3744(%rbp), %eax	# commutative, tmp1595
	jne	.L1070	#,
	movl	-3744(%rbp), %eax	# commutative, tmp1596
	addl	$1, %eax	#, D.23645
	cmpl	-3776(%rbp), %eax	# i, D.23645
	je	.L1069	#,
.L1070:
	.loc 1 2994 0 is_stmt 1
	movl	-3620(%rbp), %eax	# c, tmp1597
	cmpl	-3744(%rbp), %eax	# commutative, tmp1597
	je	.L1071	#,
	.loc 1 2993 0
	movl	-3744(%rbp), %eax	# commutative, tmp1598
	addl	$1, %eax	#, D.23645
	cmpl	-3620(%rbp), %eax	# c, D.23645
	jne	.L1072	#,
.L1071:
	.loc 1 2994 0 discriminator 1
	movl	-3744(%rbp), %eax	# commutative, tmp1599
	addl	%eax, %eax	# D.23645
	addl	$1, %eax	#, D.23645
	subl	-3620(%rbp), %eax	# c, iftmp.651
	jmp	.L1073	#
.L1072:
	.loc 1 2994 0 is_stmt 0
	movl	-3620(%rbp), %eax	# c, iftmp.651
.L1073:
	.loc 1 2996 0 is_stmt 1
	movl	-3776(%rbp), %edx	# i, tmp1600
	cmpl	-3744(%rbp), %edx	# commutative, tmp1600
	je	.L1074	#,
	.loc 1 2995 0
	movl	-3744(%rbp), %edx	# commutative, tmp1601
	addl	$1, %edx	#, D.23645
	cmpl	-3776(%rbp), %edx	# i, D.23645
	jne	.L1075	#,
.L1074:
	.loc 1 2996 0 discriminator 1
	movl	-3744(%rbp), %edx	# commutative, tmp1602
	addl	%edx, %edx	# D.23645
	addl	$1, %edx	#, D.23645
	subl	-3776(%rbp), %edx	# i, iftmp.652
	jmp	.L1076	#
.L1075:
	.loc 1 2996 0 is_stmt 0
	movl	-3776(%rbp), %edx	# i, iftmp.652
.L1076:
	.loc 1 2995 0 is_stmt 1
	movslq	%edx, %rcx	# iftmp.652, tmp1603
	cltq
	addq	%rax, %rax	# tmp1606
	movq	%rax, %rdx	# tmp1605, tmp1607
	salq	$4, %rdx	#, tmp1607
	subq	%rax, %rdx	# tmp1605, tmp1607
	leaq	-16(%rbp), %rax	#, tmp3309
	addq	%rdx, %rax	# tmp1607, tmp1608
	addq	%rcx, %rax	# tmp1603, tmp1609
	subq	$1216, %rax	#, tmp1610
	movzbl	(%rax), %eax	# operands_match, D.23647
	.loc 1 2985 0
	testb	%al, %al	# D.23647
	setne	%al	#, iftmp.650
	jmp	.L1077	#
.L1069:
	.loc 1 2997 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp1612
	movslq	%eax, %rcx	# tmp1612, tmp1611
	movl	-3620(%rbp), %eax	# c, tmp1614
	cltq
	addq	%rax, %rax	# tmp1616
	movq	%rax, %rdx	# tmp1615, tmp1617
	salq	$4, %rdx	#, tmp1617
	subq	%rax, %rdx	# tmp1615, tmp1617
	leaq	-16(%rbp), %rax	#, tmp3311
	addq	%rdx, %rax	# tmp1617, tmp1618
	addq	%rcx, %rax	# tmp1611, tmp1619
	subq	$1216, %rax	#, tmp1620
	movzbl	(%rax), %eax	# operands_match, D.23647
	.loc 1 2985 0 discriminator 2
	testb	%al, %al	# D.23647
	setne	%al	#, iftmp.650
.L1077:
	.loc 1 2985 0 is_stmt 0 discriminator 3
	testb	%al, %al	# iftmp.650
	je	.L1078	#,
	.loc 1 3002 0 is_stmt 1
	movl	-3620(%rbp), %eax	# c, tmp1622
	cltq
	movzbl	-224(%rbp,%rax), %eax	# this_alternative_offmemok, D.23647
	testb	%al, %al	# D.23647
	je	.L1079	#,
	.loc 1 3003 0
	movl	-3620(%rbp), %eax	# c, tmp1624
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _605->code, D.23646
	cmpw	$66, %ax	#, D.23646
	jne	.L1079	#,
	.loc 1 3004 0
	movl	-3620(%rbp), %eax	# c, tmp1626
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1079	#,
	.loc 1 3005 0
	movl	-3620(%rbp), %eax	# c, tmp1628
	cltq
	movzbl	-256(%rbp,%rax), %eax	# this_alternative_win, D.23647
	testb	%al, %al	# D.23647
	jne	.L1079	#,
	.loc 1 3006 0
	movl	$1, -3724(%rbp)	#, bad
.L1079:
	.loc 1 3008 0
	movl	-3620(%rbp), %eax	# c, tmp1630
	cltq
	movzbl	-256(%rbp,%rax), %eax	# this_alternative_win, D.23647
	movsbl	%al, %eax	# D.23647, tmp1631
	movl	%eax, -3712(%rbp)	# tmp1631, did_match
	jmp	.L1080	#
.L1078:
.LBB36:
	.loc 1 3016 0
	movl	-3620(%rbp), %eax	# c, tmp1633
	cltq
	movzbl	-256(%rbp,%rax), %eax	# this_alternative_win, D.23647
	testb	%al, %al	# D.23647
	je	.L1081	#,
	.loc 1 3017 0
	addl	$1, -3728(%rbp)	#, losers
.L1081:
	.loc 1 3018 0
	movl	-3620(%rbp), %eax	# c, tmp1635
	cltq
	movb	$0, -256(%rbp,%rax)	#, this_alternative_win
	.loc 1 3019 0
	movl	-3620(%rbp), %eax	# c, tmp1637
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1082	#,
	.loc 1 3020 0
	movl	$1, -3724(%rbp)	#, bad
.L1082:
	.loc 1 3030 0
	movl	-3620(%rbp), %eax	# c, tmp1639
	cltq
	movzbl	-192(%rbp,%rax), %eax	# this_alternative_earlyclobber, D.23647
	.loc 1 3024 0
	movsbl	%al, %r8d	# D.23647, D.23645
	.loc 1 3029 0
	movl	-3620(%rbp), %eax	# c, tmp1641
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	.loc 1 3024 0
	movl	%eax, %edi	# D.23645, D.23650
	movl	-3620(%rbp), %eax	# c, tmp1643
	cltq
	movl	-2096(%rbp,%rax,4), %r9d	# operand_mode, D.23652
	movl	-3776(%rbp), %eax	# i, tmp1645
	cltq
	movl	-2096(%rbp,%rax,4), %r10d	# operand_mode, D.23652
	movl	-3620(%rbp), %eax	# c, tmp1647
	cltq
	addq	$30, %rax	#, tmp1648
	movq	recog_data(,%rax,8), %rcx	# recog_data.operand_loc, D.23658
	movl	-3776(%rbp), %eax	# i, tmp1650
	cltq
	addq	$30, %rax	#, tmp1651
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand_loc, D.23658
	movl	-3620(%rbp), %eax	# c, tmp1653
	cltq
	movq	recog_data(,%rax,8), %rsi	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1655
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	%r8d, 16(%rsp)	# D.23645,
	movl	$-1, 8(%rsp)	#,
	movl	%edi, (%rsp)	# D.23650,
	movl	%r10d, %r8d	# D.23652,
	movq	%rax, %rdi	# D.23648,
	call	find_dummy_reload	#
	movq	%rax, -3536(%rbp)	# tmp1656, value
	.loc 1 3032 0
	cmpq	$0, -3536(%rbp)	#, value
	je	.L1080	#,
	.loc 1 3033 0
	subl	$1, -3728(%rbp)	#, losers
.L1080:
.LBE36:
	.loc 1 3037 0
	movl	$0, -3708(%rbp)	#, badop
	.loc 1 3038 0
	movl	-3620(%rbp), %eax	# c, tmp1658
	cltq
	movl	-2864(%rbp,%rax,4), %edx	# this_alternative, D.23645
	movl	-3776(%rbp), %eax	# i, tmp1660
	cltq
	movl	%edx, -2864(%rbp,%rax,4)	# D.23645, this_alternative
	.loc 1 3044 0
	cmpl	$0, -3712(%rbp)	#, did_match
	je	.L1083	#,
	.loc 1 3044 0 is_stmt 0 discriminator 1
	cmpl	$0, -3696(%rbp)	#, force_reload
	je	.L1084	#,
.L1083:
	.loc 1 3045 0 is_stmt 1
	movl	$0, -3772(%rbp)	#, j
	jmp	.L1085	#
.L1087:
	.loc 1 3046 0
	movl	-3772(%rbp), %eax	# j, tmp1662
	cltq
	movl	-2736(%rbp,%rax,4), %edx	# this_alternative_matches, D.23645
	.loc 1 3047 0
	movl	-3776(%rbp), %eax	# i, tmp1664
	cltq
	movl	-2736(%rbp,%rax,4), %eax	# this_alternative_matches, D.23645
	.loc 1 3046 0
	cmpl	%eax, %edx	# D.23645, D.23645
	jne	.L1086	#,
	.loc 1 3048 0
	movl	$1, -3708(%rbp)	#, badop
.L1086:
	.loc 1 3045 0
	addl	$1, -3772(%rbp)	#, j
.L1085:
	.loc 1 3045 0 is_stmt 0 discriminator 1
	movl	-3772(%rbp), %eax	# j, tmp1665
	cmpl	-3776(%rbp), %eax	# i, tmp1665
	jl	.L1087	#,
.L1084:
	.loc 1 3049 0 is_stmt 1
	jmp	.L1039	#
.L1062:
	.loc 1 3054 0
	movl	-3776(%rbp), %eax	# i, tmp1667
	cltq
	movl	$12, -2864(%rbp,%rax,4)	#, this_alternative
	.loc 1 3055 0
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3056 0
	movl	$0, -3708(%rbp)	#, badop
	.loc 1 3057 0
	jmp	.L1039	#
.L1059:
	.loc 1 3060 0
	cmpl	$0, -3696(%rbp)	#, force_reload
	je	.L1088	#,
	.loc 1 3061 0
	jmp	.L1039	#
.L1088:
	.loc 1 3062 0
	movq	-3592(%rbp), %rax	# operand, tmp1668
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$66, %ax	#, D.23646
	je	.L1089	#,
	.loc 1 3063 0
	movq	-3592(%rbp), %rax	# operand, tmp1669
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1090	#,
	.loc 1 3064 0
	movq	-3592(%rbp), %rax	# operand, tmp1670
	movl	8(%rax), %eax	# operand_120->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	jbe	.L1090	#,
	.loc 1 3065 0
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.653
	movq	-3592(%rbp), %rax	# operand, tmp1671
	movl	8(%rax), %eax	# operand_120->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, D.23654
	addq	%rax, %rax	# D.23654
	addq	%rdx, %rax	# reg_renumber.653, D.23661
	movzwl	(%rax), %eax	# *_644, D.23662
	testw	%ax, %ax	# D.23662
	jns	.L1090	#,
.L1089:
	.loc 1 3066 0
	movl	$1, -3716(%rbp)	#, win
.L1090:
	.loc 1 3067 0
	movq	-3592(%rbp), %rax	# operand, tmp1672
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$67, %ax	#, D.23646
	je	.L1091	#,
	.loc 1 3067 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1673
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$68, %ax	#, D.23646
	je	.L1091	#,
	movq	-3592(%rbp), %rax	# operand, tmp1674
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$54, %ax	#, D.23646
	je	.L1091	#,
	movq	-3592(%rbp), %rax	# operand, tmp1675
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	je	.L1091	#,
	movq	-3592(%rbp), %rax	# operand, tmp1676
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$58, %ax	#, D.23646
	je	.L1091	#,
	movq	-3592(%rbp), %rax	# operand, tmp1677
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1091	#,
	movq	-3592(%rbp), %rax	# operand, tmp1678
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$56, %ax	#, D.23646
	je	.L1091	#,
	movq	-3592(%rbp), %rax	# operand, tmp1679
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$140, %ax	#, D.23646
	jne	.L1092	#,
.L1091:
	.loc 1 3069 0 is_stmt 1
	movq	-3592(%rbp), %rax	# operand, tmp1680
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1092	#,
	.loc 1 3070 0
	movl	$0, -3708(%rbp)	#, badop
.L1092:
	.loc 1 3071 0
	movl	$1, -3688(%rbp)	#, constmemok
	.loc 1 3072 0
	jmp	.L1039	#
.L1048:
	.loc 1 3075 0
	movq	-3592(%rbp), %rax	# operand, tmp1681
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$66, %ax	#, D.23646
	jne	.L1093	#,
	.loc 1 3076 0
	movl	-3776(%rbp), %eax	# i, tmp1683
	cltq
	movl	-3376(%rbp,%rax,4), %eax	# address_reloaded, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1093	#,
	.loc 1 3077 0
	movq	-3592(%rbp), %rax	# operand, tmp1684
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, D.23648
	movzwl	(%rax), %eax	# _660->code, D.23646
	cmpw	$96, %ax	#, D.23646
	je	.L1094	#,
	.loc 1 3078 0
	movq	-3592(%rbp), %rax	# operand, tmp1685
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, D.23648
	movzwl	(%rax), %eax	# _662->code, D.23646
	cmpw	$98, %ax	#, D.23646
	jne	.L1093	#,
.L1094:
	.loc 1 3079 0
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3080 0
	jmp	.L1039	#
.L1093:
	jmp	.L1039	#
.L1049:
	.loc 1 3083 0
	movq	-3592(%rbp), %rax	# operand, tmp1686
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$66, %ax	#, D.23646
	jne	.L1095	#,
	.loc 1 3084 0
	movl	-3776(%rbp), %eax	# i, tmp1688
	cltq
	movl	-3376(%rbp,%rax,4), %eax	# address_reloaded, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1095	#,
	.loc 1 3085 0
	movq	-3592(%rbp), %rax	# operand, tmp1689
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, D.23648
	movzwl	(%rax), %eax	# _667->code, D.23646
	cmpw	$97, %ax	#, D.23646
	je	.L1096	#,
	.loc 1 3086 0
	movq	-3592(%rbp), %rax	# operand, tmp1690
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, D.23648
	movzwl	(%rax), %eax	# _669->code, D.23646
	cmpw	$99, %ax	#, D.23646
	jne	.L1095	#,
.L1096:
	.loc 1 3087 0
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3088 0
	jmp	.L1039	#
.L1095:
	jmp	.L1039	#
.L1055:
	.loc 1 3092 0
	cmpl	$0, -3696(%rbp)	#, force_reload
	je	.L1097	#,
	.loc 1 3093 0
	jmp	.L1039	#
.L1097:
	.loc 1 3094 0
	movq	-3592(%rbp), %rax	# operand, tmp1691
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$66, %ax	#, D.23646
	jne	.L1098	#,
	.loc 1 3095 0
	cmpl	$0, -3792(%rbp)	#, ind_levels
	je	.L1099	#,
	.loc 1 3095 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1692
	movq	%rax, %rdi	# tmp1692,
	call	offsettable_memref_p	#
	testl	%eax, %eax	# D.23645
	sete	%al	#, iftmp.654
	jmp	.L1100	#
.L1099:
	.loc 1 3096 0 is_stmt 1 discriminator 2
	movq	-3592(%rbp), %rax	# operand, tmp1693
	movq	%rax, %rdi	# tmp1693,
	call	offsettable_nonstrict_memref_p	#
	.loc 1 3095 0 discriminator 2
	testl	%eax, %eax	# D.23645
	sete	%al	#, iftmp.654
.L1100:
	.loc 1 3095 0 is_stmt 0 discriminator 3
	testb	%al, %al	# iftmp.654
	je	.L1098	#,
	.loc 1 3101 0 is_stmt 1
	movq	-3592(%rbp), %rax	# operand, tmp1694
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, D.23648
	movzwl	(%rax), %eax	# _677->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1101	#,
	.loc 1 3101 0 is_stmt 0 discriminator 1
	cmpl	$0, -3792(%rbp)	#, ind_levels
	je	.L1098	#,
	.loc 1 3103 0 is_stmt 1
	movq	reg_equiv_address(%rip), %rdx	# reg_equiv_address, reg_equiv_address.655
	movq	-3592(%rbp), %rax	# operand, tmp1695
	movq	8(%rax), %rax	# operand_120->fld[0].rtx, D.23648
	movl	8(%rax), %eax	# _680->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, D.23654
	salq	$3, %rax	#, D.23654
	addq	%rdx, %rax	# reg_equiv_address.655, D.23658
	movq	(%rax), %rax	# *_684, D.23648
	testq	%rax, %rax	# D.23648
	jne	.L1098	#,
.L1101:
	.loc 1 3104 0
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3105 0
	jmp	.L1039	#
.L1098:
	jmp	.L1039	#
.L1061:
	.loc 1 3109 0
	cmpl	$0, -3696(%rbp)	#, force_reload
	je	.L1102	#,
	.loc 1 3110 0
	jmp	.L1039	#
.L1102:
	.loc 1 3111 0
	movq	-3592(%rbp), %rax	# operand, tmp1696
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$66, %ax	#, D.23646
	jne	.L1103	#,
	.loc 1 3111 0 is_stmt 0 discriminator 1
	cmpl	$0, -3792(%rbp)	#, ind_levels
	je	.L1104	#,
	.loc 1 3115 0 is_stmt 1
	movq	-3592(%rbp), %rax	# operand, tmp1697
	movq	%rax, %rdi	# tmp1697,
	call	offsettable_memref_p	#
	testl	%eax, %eax	# D.23645
	jne	.L1105	#,
	jmp	.L1106	#
.L1104:
	.loc 1 3116 0
	movq	-3592(%rbp), %rax	# operand, tmp1698
	movq	%rax, %rdi	# tmp1698,
	call	offsettable_nonstrict_memref_p	#
	.loc 1 3119 0
	testl	%eax, %eax	# D.23645
	jne	.L1105	#,
.L1106:
	.loc 1 3119 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1700
	cltq
	movl	-3376(%rbp,%rax,4), %eax	# address_reloaded, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1105	#,
.L1103:
	.loc 1 3120 0 is_stmt 1
	movq	-3592(%rbp), %rax	# operand, tmp1701
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1107	#,
	.loc 1 3121 0
	movq	-3592(%rbp), %rax	# operand, tmp1702
	movl	8(%rax), %eax	# operand_120->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	jbe	.L1107	#,
	.loc 1 3122 0
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.656
	movq	-3592(%rbp), %rax	# operand, tmp1703
	movl	8(%rax), %eax	# operand_120->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, D.23654
	addq	%rax, %rax	# D.23654
	addq	%rdx, %rax	# reg_renumber.656, D.23661
	movzwl	(%rax), %eax	# *_697, D.23662
	testw	%ax, %ax	# D.23662
	jns	.L1107	#,
	.loc 1 3127 0
	movq	reg_equiv_mem(%rip), %rdx	# reg_equiv_mem, reg_equiv_mem.657
	movq	-3592(%rbp), %rax	# operand, tmp1704
	movl	8(%rax), %eax	# operand_120->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, D.23654
	salq	$3, %rax	#, D.23654
	addq	%rdx, %rax	# reg_equiv_mem.657, D.23658
	movq	(%rax), %rax	# *_703, D.23648
	testq	%rax, %rax	# D.23648
	je	.L1108	#,
	.loc 1 3128 0
	movq	reg_equiv_mem(%rip), %rdx	# reg_equiv_mem, reg_equiv_mem.658
	movq	-3592(%rbp), %rax	# operand, tmp1705
	movl	8(%rax), %eax	# operand_120->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, D.23654
	salq	$3, %rax	#, D.23654
	addq	%rdx, %rax	# reg_equiv_mem.658, D.23658
	movq	(%rax), %rax	# *_709, D.23648
	movq	%rax, %rdi	# D.23648,
	call	offsettable_memref_p	#
	testl	%eax, %eax	# D.23645
	jne	.L1105	#,
.L1108:
	.loc 1 3129 0
	movq	reg_equiv_address(%rip), %rdx	# reg_equiv_address, reg_equiv_address.659
	movq	-3592(%rbp), %rax	# operand, tmp1706
	movl	8(%rax), %eax	# operand_120->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, D.23654
	salq	$3, %rax	#, D.23654
	addq	%rdx, %rax	# reg_equiv_address.659, D.23658
	movq	(%rax), %rax	# *_716, D.23648
	testq	%rax, %rax	# D.23648
	je	.L1107	#,
.L1105:
	.loc 1 3130 0
	movl	$1, -3716(%rbp)	#, win
.L1107:
	.loc 1 3132 0
	movq	-3592(%rbp), %rax	# operand, tmp1707
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$67, %ax	#, D.23646
	je	.L1109	#,
	.loc 1 3132 0 is_stmt 0 discriminator 2
	movq	-3592(%rbp), %rax	# operand, tmp1708
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$68, %ax	#, D.23646
	je	.L1109	#,
	.loc 1 3132 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1709
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$54, %ax	#, D.23646
	je	.L1109	#,
	movq	-3592(%rbp), %rax	# operand, tmp1710
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	je	.L1109	#,
	movq	-3592(%rbp), %rax	# operand, tmp1711
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$58, %ax	#, D.23646
	je	.L1109	#,
	movq	-3592(%rbp), %rax	# operand, tmp1712
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1109	#,
	movq	-3592(%rbp), %rax	# operand, tmp1713
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$56, %ax	#, D.23646
	je	.L1109	#,
	movq	-3592(%rbp), %rax	# operand, tmp1714
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$140, %ax	#, D.23646
	jne	.L1110	#,
.L1109:
	movq	-3592(%rbp), %rax	# operand, tmp1715
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$134, %ax	#, D.23646
	jne	.L1111	#,
.L1110:
	.loc 1 3133 0 is_stmt 1
	movq	-3592(%rbp), %rax	# operand, tmp1716
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$66, %ax	#, D.23646
	jne	.L1112	#,
.L1111:
	.loc 1 3134 0
	movl	$0, -3708(%rbp)	#, badop
.L1112:
	.loc 1 3135 0
	movl	$1, -3688(%rbp)	#, constmemok
	.loc 1 3136 0
	movl	$1, -3692(%rbp)	#, offmemok
	.loc 1 3137 0
	jmp	.L1039	#
.L1045:
	.loc 1 3142 0
	movl	$1, -3684(%rbp)	#, earlyclobber
	movl	$1, -3736(%rbp)	#, this_earlyclobber
	.loc 1 3143 0
	jmp	.L1039	#
.L1051:
	.loc 1 3154 0
	movq	-3592(%rbp), %rax	# operand, tmp1717
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	jne	.L1113	#,
	.loc 1 3155 0
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3156 0
	jmp	.L1039	#
.L1113:
	jmp	.L1039	#
.L1052:
	.loc 1 3159 0
	movq	-3592(%rbp), %rax	# operand, tmp1718
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	jne	.L1114	#,
	.loc 1 3160 0
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3161 0
	jmp	.L1039	#
.L1114:
	jmp	.L1039	#
.L1053:
	.loc 1 3165 0
	movq	-3592(%rbp), %rax	# operand, tmp1719
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	jne	.L1115	#,
	.loc 1 3166 0
	cmpl	$71, -3620(%rbp)	#, c
	jne	.L1116	#,
	.loc 1 3166 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1720
	movq	%rax, %rdi	# tmp1720,
	call	standard_80387_constant_p	#
	testl	%eax, %eax	# D.23645
	setne	%al	#, iftmp.660
	jmp	.L1117	#
.L1116:
	.loc 1 3166 0 discriminator 2
	cmpl	$72, -3620(%rbp)	#, c
	jne	.L1118	#,
	.loc 1 3166 0 discriminator 3
	movq	-3592(%rbp), %rax	# operand, tmp1721
	movq	%rax, %rdi	# tmp1721,
	call	standard_sse_constant_p	#
	testl	%eax, %eax	# D.23645
	je	.L1118	#,
	.loc 1 3166 0 discriminator 5
	movl	$1, %eax	#, iftmp.661
	jmp	.L1119	#
.L1118:
	.loc 1 3166 0 discriminator 4
	movl	$0, %eax	#, iftmp.661
.L1119:
	.loc 1 3166 0 discriminator 6
	andl	$1, %eax	#, iftmp.660
.L1117:
	.loc 1 3166 0 discriminator 7
	testb	%al, %al	# iftmp.660
	je	.L1115	#,
	.loc 1 3167 0 is_stmt 1
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3168 0
	jmp	.L1039	#
.L1115:
	jmp	.L1039	#
.L1064:
	.loc 1 3171 0
	movq	-3592(%rbp), %rax	# operand, tmp1722
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$54, %ax	#, D.23646
	je	.L1039	#,
	.loc 1 3172 0
	movq	-3592(%rbp), %rax	# operand, tmp1723
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	jne	.L1058	#,
	.loc 1 3173 0
	movq	-3592(%rbp), %rax	# operand, tmp1724
	movzbl	2(%rax), %eax	# operand_120->mode, D.23651
	testb	%al, %al	# D.23651
	je	.L1039	#,
.L1058:
	.loc 1 3176 0
	movq	-3592(%rbp), %rax	# operand, tmp1725
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$67, %ax	#, D.23646
	je	.L1120	#,
	.loc 1 3176 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1726
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$68, %ax	#, D.23646
	je	.L1120	#,
	movq	-3592(%rbp), %rax	# operand, tmp1727
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$54, %ax	#, D.23646
	je	.L1120	#,
	movq	-3592(%rbp), %rax	# operand, tmp1728
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	je	.L1120	#,
	movq	-3592(%rbp), %rax	# operand, tmp1729
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$58, %ax	#, D.23646
	je	.L1120	#,
	movq	-3592(%rbp), %rax	# operand, tmp1730
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1120	#,
	movq	-3592(%rbp), %rax	# operand, tmp1731
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$56, %ax	#, D.23646
	je	.L1120	#,
	movq	-3592(%rbp), %rax	# operand, tmp1732
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$140, %ax	#, D.23646
	jne	.L1121	#,
.L1120:
	.loc 1 3178 0 is_stmt 1
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.662
	testl	%eax, %eax	# flag_pic.662
	je	.L1122	#,
	.loc 1 3178 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1733
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$68, %ax	#, D.23646
	je	.L1123	#,
	movq	-3592(%rbp), %rax	# operand, tmp1734
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$67, %ax	#, D.23646
	je	.L1123	#,
	movq	-3592(%rbp), %rax	# operand, tmp1735
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$58, %ax	#, D.23646
	jne	.L1122	#,
	movq	-3592(%rbp), %rax	# operand, tmp1736
	movq	%rax, %rdi	# tmp1736,
	call	symbolic_reference_mentioned_p	#
	testl	%eax, %eax	# D.23645
	je	.L1122	#,
.L1123:
	.loc 1 3178 0 discriminator 2
	movq	-3592(%rbp), %rax	# operand, tmp1737
	movq	%rax, %rdi	# tmp1737,
	call	legitimate_pic_address_disp_p	#
	testl	%eax, %eax	# D.23645
	je	.L1121	#,
.L1122:
	.loc 1 3181 0 is_stmt 1
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3182 0
	jmp	.L1039	#
.L1121:
	jmp	.L1039	#
.L1060:
	.loc 1 3185 0
	movq	-3592(%rbp), %rax	# operand, tmp1738
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$54, %ax	#, D.23646
	je	.L1124	#,
	.loc 1 3186 0
	movq	-3592(%rbp), %rax	# operand, tmp1739
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	jne	.L1125	#,
	.loc 1 3187 0
	movq	-3592(%rbp), %rax	# operand, tmp1740
	movzbl	2(%rax), %eax	# operand_120->mode, D.23651
	testb	%al, %al	# D.23651
	jne	.L1125	#,
.L1124:
	.loc 1 3188 0
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3189 0
	jmp	.L1039	#
.L1125:
	jmp	.L1039	#
.L1054:
	.loc 1 3199 0
	movq	-3592(%rbp), %rax	# operand, tmp1741
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$54, %ax	#, D.23646
	jne	.L1126	#,
	.loc 1 3200 0
	cmpl	$73, -3620(%rbp)	#, c
	jne	.L1127	#,
	.loc 1 3200 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1742
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	testq	%rax, %rax	# D.23663
	js	.L1128	#,
	movq	-3592(%rbp), %rax	# operand, tmp1743
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	cmpq	$31, %rax	#, D.23663
	jg	.L1128	#,
	.loc 1 3200 0 discriminator 3
	movl	$1, %eax	#, iftmp.664
	jmp	.L1129	#
.L1128:
	.loc 1 3200 0 discriminator 2
	movl	$0, %eax	#, iftmp.664
.L1129:
	.loc 1 3200 0 discriminator 4
	andl	$1, %eax	#, iftmp.663
	jmp	.L1130	#
.L1127:
	.loc 1 3200 0 discriminator 2
	cmpl	$74, -3620(%rbp)	#, c
	jne	.L1131	#,
	.loc 1 3200 0 discriminator 3
	movq	-3592(%rbp), %rax	# operand, tmp1744
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	testq	%rax, %rax	# D.23663
	js	.L1132	#,
	.loc 1 3200 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1745
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	cmpq	$63, %rax	#, D.23663
	jg	.L1132	#,
	.loc 1 3200 0 discriminator 3
	movl	$1, %eax	#, iftmp.666
	jmp	.L1133	#
.L1132:
	.loc 1 3200 0 discriminator 2
	movl	$0, %eax	#, iftmp.666
.L1133:
	.loc 1 3200 0 discriminator 4
	andl	$1, %eax	#, iftmp.665
	jmp	.L1130	#
.L1131:
	cmpl	$75, -3620(%rbp)	#, c
	jne	.L1135	#,
	.loc 1 3200 0 discriminator 5
	movq	-3592(%rbp), %rax	# operand, tmp1746
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	cmpq	$-128, %rax	#, D.23663
	jl	.L1136	#,
	.loc 1 3200 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1747
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	cmpq	$127, %rax	#, D.23663
	jg	.L1136	#,
	.loc 1 3200 0 discriminator 3
	movl	$1, %eax	#, iftmp.668
	jmp	.L1137	#
.L1136:
	.loc 1 3200 0 discriminator 2
	movl	$0, %eax	#, iftmp.668
.L1137:
	.loc 1 3200 0 discriminator 4
	andl	$1, %eax	#, iftmp.667
	jmp	.L1130	#
.L1135:
	.loc 1 3200 0 discriminator 6
	cmpl	$76, -3620(%rbp)	#, c
	jne	.L1139	#,
	.loc 1 3200 0 discriminator 7
	movq	-3592(%rbp), %rax	# operand, tmp1748
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	cmpq	$255, %rax	#, D.23663
	je	.L1140	#,
	.loc 1 3200 0 discriminator 2
	movq	-3592(%rbp), %rax	# operand, tmp1749
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	cmpq	$65535, %rax	#, D.23663
	jne	.L1141	#,
.L1140:
	.loc 1 3200 0 discriminator 1
	movl	$1, %eax	#, iftmp.670
	jmp	.L1142	#
.L1141:
	.loc 1 3200 0 discriminator 3
	movl	$0, %eax	#, iftmp.670
.L1142:
	.loc 1 3200 0 discriminator 4
	andl	$1, %eax	#, iftmp.669
	jmp	.L1130	#
.L1139:
	.loc 1 3200 0 discriminator 8
	cmpl	$77, -3620(%rbp)	#, c
	jne	.L1144	#,
	.loc 1 3200 0 discriminator 9
	movq	-3592(%rbp), %rax	# operand, tmp1750
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	testq	%rax, %rax	# D.23663
	js	.L1145	#,
	.loc 1 3200 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1751
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	cmpq	$3, %rax	#, D.23663
	jg	.L1145	#,
	.loc 1 3200 0 discriminator 3
	movl	$1, %eax	#, iftmp.672
	jmp	.L1146	#
.L1145:
	.loc 1 3200 0 discriminator 2
	movl	$0, %eax	#, iftmp.672
.L1146:
	.loc 1 3200 0 discriminator 4
	andl	$1, %eax	#, iftmp.671
	jmp	.L1130	#
.L1144:
	.loc 1 3200 0 discriminator 10
	cmpl	$78, -3620(%rbp)	#, c
	jne	.L1148	#,
	.loc 1 3200 0 discriminator 11
	movq	-3592(%rbp), %rax	# operand, tmp1752
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	testq	%rax, %rax	# D.23663
	js	.L1148	#,
	.loc 1 3200 0 discriminator 13
	movq	-3592(%rbp), %rax	# operand, tmp1753
	movq	8(%rax), %rax	# operand_120->fld[0].rtwint, D.23663
	cmpq	$255, %rax	#, D.23663
	jg	.L1148	#,
	.loc 1 3200 0 discriminator 1
	movl	$1, %eax	#, iftmp.673
	jmp	.L1149	#
.L1148:
	.loc 1 3200 0 discriminator 12
	movl	$0, %eax	#, iftmp.673
.L1149:
	.loc 1 3200 0 discriminator 14
	andl	$1, %eax	#, iftmp.671
.L1130:
	.loc 1 3200 0 discriminator 19
	testb	%al, %al	# iftmp.663
	je	.L1126	#,
	.loc 1 3201 0 is_stmt 1
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3202 0
	jmp	.L1039	#
.L1126:
	jmp	.L1039	#
.L1056:
	.loc 1 3205 0
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3206 0
	jmp	.L1039	#
.L1057:
	.loc 1 3209 0
	cmpl	$0, -3696(%rbp)	#, force_reload
	jne	.L1063	#,
	.loc 1 3212 0
	movq	-3592(%rbp), %rax	# operand, tmp1754
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$75, %ax	#, D.23646
	je	.L1063	#,
	.loc 1 3214 0
	movq	-3592(%rbp), %rax	# operand, tmp1755
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$62, %ax	#, D.23646
	je	.L1063	#,
	.loc 1 3216 0
	movq	-3592(%rbp), %rax	# operand, tmp1756
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$67, %ax	#, D.23646
	je	.L1150	#,
	.loc 1 3216 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1757
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$68, %ax	#, D.23646
	je	.L1150	#,
	movq	-3592(%rbp), %rax	# operand, tmp1758
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$54, %ax	#, D.23646
	je	.L1150	#,
	movq	-3592(%rbp), %rax	# operand, tmp1759
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	je	.L1150	#,
	movq	-3592(%rbp), %rax	# operand, tmp1760
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$58, %ax	#, D.23646
	je	.L1150	#,
	movq	-3592(%rbp), %rax	# operand, tmp1761
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1150	#,
	movq	-3592(%rbp), %rax	# operand, tmp1762
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$56, %ax	#, D.23646
	je	.L1150	#,
	movq	-3592(%rbp), %rax	# operand, tmp1763
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$140, %ax	#, D.23646
	jne	.L1151	#,
.L1150:
	.loc 1 3217 0 is_stmt 1
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.674
	testl	%eax, %eax	# flag_pic.674
	je	.L1151	#,
	.loc 1 3218 0
	movq	-3592(%rbp), %rax	# operand, tmp1764
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$68, %ax	#, D.23646
	je	.L1152	#,
	.loc 1 3218 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1765
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$67, %ax	#, D.23646
	je	.L1152	#,
	movq	-3592(%rbp), %rax	# operand, tmp1766
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$58, %ax	#, D.23646
	jne	.L1151	#,
	movq	-3592(%rbp), %rax	# operand, tmp1767
	movq	%rax, %rdi	# tmp1767,
	call	symbolic_reference_mentioned_p	#
	testl	%eax, %eax	# D.23645
	je	.L1151	#,
.L1152:
	.loc 1 3218 0 discriminator 2
	movq	-3592(%rbp), %rax	# operand, tmp1768
	movq	%rax, %rdi	# tmp1768,
	call	legitimate_pic_address_disp_p	#
	testl	%eax, %eax	# D.23645
	je	.L1063	#,
.L1151:
	.loc 1 3221 0 is_stmt 1
	movq	-3592(%rbp), %rax	# operand, tmp1769
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	.loc 1 3220 0
	cmpw	$61, %ax	#, D.23646
	jne	.L1153	#,
	.loc 1 3222 0
	movq	-3592(%rbp), %rax	# operand, tmp1770
	movl	8(%rax), %eax	# operand_120->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	jbe	.L1063	#,
	.loc 1 3223 0
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.675
	movq	-3592(%rbp), %rax	# operand, tmp1771
	movl	8(%rax), %eax	# operand_120->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, D.23654
	addq	%rax, %rax	# D.23654
	addq	%rdx, %rax	# reg_renumber.675, D.23661
	movzwl	(%rax), %eax	# *_827, D.23662
	testw	%ax, %ax	# D.23662
	jns	.L1063	#,
.L1153:
	.loc 1 3224 0
	movl	$1, -3716(%rbp)	#, win
.L1063:
	.loc 1 3229 0
	movl	-3776(%rbp), %eax	# i, tmp1773
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	movslq	%eax, %rdx	# D.23645, tmp1774
	movq	%rdx, %rax	# tmp1774, tmp1775
	salq	$2, %rax	#, tmp1775
	addq	%rdx, %rax	# tmp1774, tmp1775
	leaq	0(,%rax,4), %rdx	#, tmp1776
	addq	%rdx, %rax	# tmp1776, tmp1775
	salq	$2, %rax	#, tmp1777
	addq	$reg_class_subunion+48, %rax	#, tmp1778
	movl	(%rax), %eax	# reg_class_subunion, D.23650
	movl	%eax, %edx	# D.23650, D.23645
	movl	-3776(%rbp), %eax	# i, tmp1780
	cltq
	movl	%edx, -2864(%rbp,%rax,4)	# D.23645, this_alternative
	.loc 1 3230 0
	jmp	.L1154	#
.L1040:
	.loc 1 3233 0
	cmpl	$114, -3620(%rbp)	#, c
	je	.L1155	#,
	.loc 1 3233 0 is_stmt 0 discriminator 1
	cmpl	$82, -3620(%rbp)	#, c
	je	.L1156	#,
	.loc 1 3233 0 discriminator 3
	cmpl	$113, -3620(%rbp)	#, c
	je	.L1157	#,
	.loc 1 3233 0 discriminator 5
	cmpl	$81, -3620(%rbp)	#, c
	je	.L1158	#,
	.loc 1 3233 0 discriminator 7
	cmpl	$102, -3620(%rbp)	#, c
	jne	.L1159	#,
	.loc 1 3233 0 discriminator 9
	movl	target_flags(%rip), %eax	# target_flags, target_flags.682
	andl	$1, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1160	#,
	.loc 1 3233 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.683
	andl	$32, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1160	#,
	.loc 1 3233 0 discriminator 13
	movl	$1, %eax	#, iftmp.681
	jmp	.L1161	#
.L1160:
	.loc 1 3233 0 discriminator 12
	movl	$0, %eax	#, iftmp.681
.L1161:
	.loc 1 3233 0 discriminator 14
	andl	$1, %eax	#, iftmp.680
	jmp	.L1190	#
.L1159:
	.loc 1 3233 0 discriminator 10
	cmpl	$116, -3620(%rbp)	#, c
	jne	.L1163	#,
	.loc 1 3233 0 discriminator 15
	movl	target_flags(%rip), %eax	# target_flags, target_flags.686
	andl	$1, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1164	#,
	.loc 1 3233 0 discriminator 17
	movl	target_flags(%rip), %eax	# target_flags, target_flags.687
	andl	$32, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1164	#,
	.loc 1 3233 0 discriminator 19
	movl	$1, %eax	#, iftmp.685
	jmp	.L1165	#
.L1164:
	.loc 1 3233 0 discriminator 18
	movl	$0, %eax	#, iftmp.685
.L1165:
	.loc 1 3233 0 discriminator 20
	andl	$1, %eax	#, iftmp.684
	jmp	.L1190	#
.L1163:
	.loc 1 3233 0 discriminator 16
	cmpl	$117, -3620(%rbp)	#, c
	jne	.L1167	#,
	.loc 1 3233 0 discriminator 21
	movl	target_flags(%rip), %eax	# target_flags, target_flags.690
	andl	$1, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1168	#,
	.loc 1 3233 0 discriminator 23
	movl	target_flags(%rip), %eax	# target_flags, target_flags.691
	andl	$32, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1168	#,
	.loc 1 3233 0 discriminator 25
	movl	$1, %eax	#, iftmp.689
	jmp	.L1169	#
.L1168:
	.loc 1 3233 0 discriminator 24
	movl	$0, %eax	#, iftmp.689
.L1169:
	.loc 1 3233 0 discriminator 26
	andl	$1, %eax	#, iftmp.688
	jmp	.L1190	#
.L1167:
	.loc 1 3233 0 discriminator 22
	cmpl	$97, -3620(%rbp)	#, c
	je	.L1171	#,
	.loc 1 3233 0 discriminator 27
	cmpl	$98, -3620(%rbp)	#, c
	je	.L1172	#,
	.loc 1 3233 0 discriminator 29
	cmpl	$99, -3620(%rbp)	#, c
	je	.L1173	#,
	.loc 1 3233 0 discriminator 31
	cmpl	$100, -3620(%rbp)	#, c
	je	.L1174	#,
	.loc 1 3233 0 discriminator 33
	cmpl	$120, -3620(%rbp)	#, c
	jne	.L1175	#,
	.loc 1 3233 0 discriminator 35
	movl	target_flags(%rip), %eax	# target_flags, target_flags.697
	andl	$327680, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	sete	%al	#, iftmp.696
	jmp	.L1190	#
.L1175:
	.loc 1 3233 0 discriminator 36
	cmpl	$89, -3620(%rbp)	#, c
	jne	.L1177	#,
	.loc 1 3233 0 discriminator 37
	movl	target_flags(%rip), %eax	# target_flags, target_flags.699
	andl	$262144, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	sete	%al	#, iftmp.698
	jmp	.L1190	#
.L1177:
	.loc 1 3233 0 discriminator 38
	cmpl	$121, -3620(%rbp)	#, c
	jne	.L1179	#,
	.loc 1 3233 0 discriminator 39
	movl	target_flags(%rip), %eax	# target_flags, target_flags.701
	andl	$16384, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	sete	%al	#, iftmp.700
	jmp	.L1190	#
.L1179:
	.loc 1 3233 0 discriminator 40
	cmpl	$65, -3620(%rbp)	#, c
	je	.L1181	#,
	.loc 1 3233 0 discriminator 41
	cmpl	$68, -3620(%rbp)	#, c
	je	.L1181	#,
	.loc 1 3233 0 discriminator 43
	cmpl	$83, -3620(%rbp)	#, c
	je	.L1181	#,
	.loc 1 3233 0 discriminator 44
	movl	$1, %eax	#, iftmp.702
	jmp	.L1182	#
.L1181:
	.loc 1 3233 0 discriminator 42
	movl	$0, %eax	#, iftmp.702
.L1182:
	.loc 1 3233 0 discriminator 45
	andl	$1, %eax	#, iftmp.700
	jmp	.L1190	#
.L1174:
	.loc 1 3233 0 discriminator 34
	movl	$0, %eax	#, iftmp.695
	jmp	.L1190	#
.L1173:
	.loc 1 3233 0 discriminator 32
	movl	$0, %eax	#, iftmp.694
	jmp	.L1190	#
.L1172:
	.loc 1 3233 0 discriminator 30
	movl	$0, %eax	#, iftmp.693
	jmp	.L1190	#
.L1171:
	.loc 1 3233 0 discriminator 28
	movl	$0, %eax	#, iftmp.692
	jmp	.L1190	#
.L1158:
	.loc 1 3233 0 discriminator 8
	movl	$0, %eax	#, iftmp.679
	jmp	.L1190	#
.L1157:
	.loc 1 3233 0 discriminator 6
	movl	$0, %eax	#, iftmp.678
	jmp	.L1190	#
.L1156:
	.loc 1 3233 0 discriminator 4
	movl	$0, %eax	#, iftmp.677
	jmp	.L1190	#
.L1155:
	.loc 1 3233 0 discriminator 2
	movl	$0, %eax	#, iftmp.676
.L1190:
	.loc 1 3233 0 discriminator 51
	testb	%al, %al	# iftmp.676
	je	.L1191	#,
	.loc 1 3236 0 is_stmt 1
	cmpl	$101, -3620(%rbp)	#, c
	jne	.L1192	#,
	.loc 1 3236 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1781
	movq	%rax, %rdi	# tmp1781,
	call	x86_64_sign_extended_value	#
	testl	%eax, %eax	# D.23645
	setne	%al	#, iftmp.703
	jmp	.L1193	#
.L1192:
	.loc 1 3236 0 discriminator 2
	cmpl	$90, -3620(%rbp)	#, c
	jne	.L1194	#,
	.loc 1 3236 0 discriminator 3
	movq	-3592(%rbp), %rax	# operand, tmp1782
	movq	%rax, %rdi	# tmp1782,
	call	x86_64_zero_extended_value	#
	testl	%eax, %eax	# D.23645
	je	.L1194	#,
	.loc 1 3236 0 discriminator 5
	movl	$1, %eax	#, iftmp.704
	jmp	.L1195	#
.L1194:
	.loc 1 3236 0 discriminator 4
	movl	$0, %eax	#, iftmp.704
.L1195:
	.loc 1 3236 0 discriminator 6
	andl	$1, %eax	#, iftmp.703
.L1193:
	.loc 1 3236 0 discriminator 7
	testb	%al, %al	# iftmp.703
	je	.L1196	#,
	.loc 1 3237 0 is_stmt 1
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3239 0
	jmp	.L1039	#
.L1196:
	jmp	.L1039	#
.L1191:
	.loc 1 3243 0
	movl	-3776(%rbp), %eax	# i, tmp1784
	cltq
	movl	-2864(%rbp,%rax,4), %edx	# this_alternative, D.23645
	cmpl	$114, -3620(%rbp)	#, c
	je	.L1197	#,
	.loc 1 3243 0 is_stmt 0 discriminator 1
	cmpl	$82, -3620(%rbp)	#, c
	je	.L1198	#,
	cmpl	$113, -3620(%rbp)	#, c
	jne	.L1199	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.709
	andl	$33554432, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1200	#,
	movl	$12, %eax	#, iftmp.708
	jmp	.L1247	#
.L1200:
	.loc 1 3243 0 discriminator 2
	movl	$8, %eax	#, iftmp.708
	jmp	.L1247	#
.L1199:
	cmpl	$81, -3620(%rbp)	#, c
	je	.L1203	#,
	.loc 1 3243 0 discriminator 1
	cmpl	$102, -3620(%rbp)	#, c
	jne	.L1204	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.713
	andl	$1, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1205	#,
	.loc 1 3243 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.714
	andl	$32, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1206	#,
.L1205:
	.loc 1 3243 0 discriminator 1
	movl	$15, %eax	#, iftmp.712
	jmp	.L1207	#
.L1206:
	movl	$0, %eax	#, iftmp.712
.L1207:
	jmp	.L1247	#
.L1204:
	.loc 1 3243 0 discriminator 2
	cmpl	$116, -3620(%rbp)	#, c
	jne	.L1209	#,
	.loc 1 3243 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.717
	andl	$1, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1210	#,
	.loc 1 3243 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.718
	andl	$32, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1211	#,
.L1210:
	.loc 1 3243 0 discriminator 1
	movl	$13, %eax	#, iftmp.716
	jmp	.L1212	#
.L1211:
	movl	$0, %eax	#, iftmp.716
.L1212:
	jmp	.L1247	#
.L1209:
	.loc 1 3243 0 discriminator 2
	cmpl	$117, -3620(%rbp)	#, c
	jne	.L1214	#,
	.loc 1 3243 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.721
	andl	$1, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1215	#,
	.loc 1 3243 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.722
	andl	$32, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1216	#,
.L1215:
	.loc 1 3243 0 discriminator 1
	movl	$14, %eax	#, iftmp.720
	jmp	.L1217	#
.L1216:
	movl	$0, %eax	#, iftmp.720
.L1217:
	jmp	.L1247	#
.L1214:
	.loc 1 3243 0 discriminator 2
	cmpl	$97, -3620(%rbp)	#, c
	je	.L1219	#,
	.loc 1 3243 0 discriminator 1
	cmpl	$98, -3620(%rbp)	#, c
	je	.L1220	#,
	cmpl	$99, -3620(%rbp)	#, c
	je	.L1221	#,
	cmpl	$100, -3620(%rbp)	#, c
	je	.L1222	#,
	cmpl	$120, -3620(%rbp)	#, c
	jne	.L1223	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.729
	andl	$327680, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1224	#,
	movl	$16, %eax	#, iftmp.728
	jmp	.L1247	#
.L1224:
	.loc 1 3243 0 discriminator 2
	movl	$0, %eax	#, iftmp.728
	jmp	.L1247	#
.L1223:
	cmpl	$89, -3620(%rbp)	#, c
	jne	.L1227	#,
	.loc 1 3243 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.732
	andl	$262144, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1228	#,
	movl	$16, %eax	#, iftmp.731
	jmp	.L1247	#
.L1228:
	.loc 1 3243 0 discriminator 2
	movl	$0, %eax	#, iftmp.731
	jmp	.L1247	#
.L1227:
	cmpl	$121, -3620(%rbp)	#, c
	jne	.L1231	#,
	.loc 1 3243 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.735
	andl	$16384, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1232	#,
	movl	$17, %eax	#, iftmp.734
	jmp	.L1247	#
.L1232:
	.loc 1 3243 0 discriminator 2
	movl	$0, %eax	#, iftmp.734
	jmp	.L1247	#
.L1231:
	cmpl	$65, -3620(%rbp)	#, c
	je	.L1235	#,
	.loc 1 3243 0 discriminator 1
	cmpl	$68, -3620(%rbp)	#, c
	je	.L1236	#,
	cmpl	$83, -3620(%rbp)	#, c
	jne	.L1237	#,
	movl	$5, %eax	#, iftmp.738
	jmp	.L1247	#
.L1237:
	.loc 1 3243 0 discriminator 2
	movl	$0, %eax	#, iftmp.738
	jmp	.L1247	#
.L1236:
	movl	$6, %eax	#, iftmp.737
	jmp	.L1247	#
.L1235:
	movl	$7, %eax	#, iftmp.736
	jmp	.L1247	#
.L1222:
	movl	$2, %eax	#, iftmp.726
	jmp	.L1247	#
.L1221:
	movl	$3, %eax	#, iftmp.725
	jmp	.L1247	#
.L1220:
	movl	$4, %eax	#, iftmp.724
	jmp	.L1247	#
.L1219:
	movl	$1, %eax	#, iftmp.723
	jmp	.L1247	#
.L1203:
	movl	$8, %eax	#, iftmp.710
	jmp	.L1247	#
.L1198:
	movl	$11, %eax	#, iftmp.706
	jmp	.L1247	#
.L1197:
	movl	$12, %eax	#, iftmp.705
.L1247:
	.loc 1 3243 0 discriminator 3
	movslq	%eax, %rcx	# iftmp.705, tmp1785
	movslq	%edx, %rdx	# D.23645, tmp1786
	movq	%rdx, %rax	# tmp1786, tmp1787
	salq	$2, %rax	#, tmp1787
	addq	%rdx, %rax	# tmp1786, tmp1787
	leaq	0(,%rax,4), %rdx	#, tmp1788
	addq	%rdx, %rax	# tmp1788, tmp1787
	addq	%rcx, %rax	# tmp1785, tmp1789
	movl	reg_class_subunion(,%rax,4), %eax	# reg_class_subunion, D.23650
	movl	%eax, %edx	# D.23650, D.23645
	movl	-3776(%rbp), %eax	# i, tmp1791
	cltq
	movl	%edx, -2864(%rbp,%rax,4)	# D.23645, this_alternative
.L1154:
	.loc 1 3245 0 is_stmt 1
	movq	-3592(%rbp), %rax	# operand, tmp1792
	movzbl	2(%rax), %eax	# operand_120->mode, D.23651
	cmpb	$51, %al	#, D.23651
	jne	.L1248	#,
	.loc 1 3246 0
	jmp	.L1039	#
.L1248:
	.loc 1 3247 0
	movl	$1, -3704(%rbp)	#, winreg
	.loc 1 3248 0
	movq	-3592(%rbp), %rax	# operand, tmp1793
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1249	#,
	.loc 1 3250 0
	movl	-3776(%rbp), %eax	# i, tmp1795
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzbl	2(%rax), %eax	# _968->mode, D.23651
	.loc 1 3249 0
	movzbl	%al, %ecx	# D.23651, D.23652
	movl	-3776(%rbp), %eax	# i, tmp1797
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	movl	%eax, %esi	# D.23645, D.23650
	movl	-3700(%rbp), %edx	# offset, tmp1798
	movq	-3592(%rbp), %rax	# operand, tmp1799
	movq	%rax, %rdi	# tmp1799,
	call	reg_fits_class_p	#
	testl	%eax, %eax	# D.23645
	je	.L1249	#,
	.loc 1 3251 0
	movl	$1, -3716(%rbp)	#, win
	.loc 1 3252 0
	jmp	.L1039	#
.L1249:
	jmp	.L1039	#
.L1498:
	.loc 1 2950 0
	nop
.L1039:
	.loc 1 2946 0 discriminator 1
	movq	-1840(%rbp), %rax	# p, p.739
	movzbl	(%rax), %eax	# *p.739_568, D.23647
	testb	%al, %al	# D.23647
	je	.L1250	#,
	.loc 1 2946 0 is_stmt 0 discriminator 2
	movq	-1840(%rbp), %rax	# p, p.740
	leaq	1(%rax), %rdx	#, p.742
	movq	%rdx, -1840(%rbp)	# p.742, p
	movzbl	(%rax), %eax	# *p.741_571, D.23647
	movsbl	%al, %eax	# D.23647, tmp1800
	movl	%eax, -3620(%rbp)	# tmp1800, c
	cmpl	$44, -3620(%rbp)	#, c
	jne	.L1251	#,
.L1250:
	.loc 1 3255 0 is_stmt 1
	movq	-1840(%rbp), %rdx	# p, p.743
	movl	-3776(%rbp), %eax	# i, tmp1802
	cltq
	movq	%rdx, -1712(%rbp,%rax,8)	# p.743, constraints
	.loc 1 3259 0
	cmpl	$0, -3704(%rbp)	#, winreg
	je	.L1252	#,
	.loc 1 3259 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1804
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1252	#,
	.loc 1 3260 0 is_stmt 1
	movl	$0, -3708(%rbp)	#, badop
.L1252:
	.loc 1 3263 0
	movl	-3684(%rbp), %eax	# earlyclobber, tmp1805
	movl	%eax, %edx	# tmp1805, D.23647
	movl	-3776(%rbp), %eax	# i, tmp1807
	cltq
	movb	%dl, -192(%rbp,%rax)	# D.23647, this_alternative_earlyclobber
	.loc 1 3264 0
	cmpl	$0, -3716(%rbp)	#, win
	je	.L1253	#,
	.loc 1 3264 0 is_stmt 0 discriminator 1
	cmpl	$0, -3696(%rbp)	#, force_reload
	jne	.L1253	#,
	.loc 1 3265 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp1809
	cltq
	movb	$1, -256(%rbp,%rax)	#, this_alternative_win
	jmp	.L1254	#
.L1253:
	.loc 1 3266 0
	cmpl	$0, -3712(%rbp)	#, did_match
	je	.L1255	#,
	.loc 1 3266 0 is_stmt 0 discriminator 1
	cmpl	$0, -3696(%rbp)	#, force_reload
	jne	.L1255	#,
	.loc 1 3267 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp1811
	cltq
	movb	$1, -288(%rbp,%rax)	#, this_alternative_match_win
	jmp	.L1254	#
.L1255:
.LBB37:
	.loc 1 3270 0
	movl	$0, -3680(%rbp)	#, const_to_mem
	.loc 1 3272 0
	movl	-3692(%rbp), %eax	# offmemok, tmp1812
	movl	%eax, %edx	# tmp1812, D.23647
	movl	-3776(%rbp), %eax	# i, tmp1814
	cltq
	movb	%dl, -224(%rbp,%rax)	# D.23647, this_alternative_offmemok
	.loc 1 3273 0
	addl	$1, -3728(%rbp)	#, losers
	.loc 1 3274 0
	cmpl	$0, -3708(%rbp)	#, badop
	je	.L1256	#,
	.loc 1 3275 0
	movl	$1, -3724(%rbp)	#, bad
.L1256:
	.loc 1 3277 0
	movq	-3592(%rbp), %rax	# operand, tmp1815
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1257	#,
	.loc 1 3278 0
	movl	-3776(%rbp), %eax	# i, tmp1817
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1257	#,
	.loc 1 3279 0
	movl	-3776(%rbp), %eax	# i, tmp1819
	cltq
	movl	-2736(%rbp,%rax,4), %eax	# this_alternative_matches, D.23645
	testl	%eax, %eax	# D.23645
	jns	.L1257	#,
	.loc 1 3280 0
	movl	$1, -3724(%rbp)	#, bad
.L1257:
	.loc 1 3290 0
	movq	-3592(%rbp), %rax	# operand, tmp1820
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$67, %ax	#, D.23646
	je	.L1258	#,
	.loc 1 3290 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1821
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$68, %ax	#, D.23646
	je	.L1258	#,
	movq	-3592(%rbp), %rax	# operand, tmp1822
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$54, %ax	#, D.23646
	je	.L1258	#,
	movq	-3592(%rbp), %rax	# operand, tmp1823
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	je	.L1258	#,
	movq	-3592(%rbp), %rax	# operand, tmp1824
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$58, %ax	#, D.23646
	je	.L1258	#,
	movq	-3592(%rbp), %rax	# operand, tmp1825
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1258	#,
	movq	-3592(%rbp), %rax	# operand, tmp1826
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$56, %ax	#, D.23646
	je	.L1258	#,
	movq	-3592(%rbp), %rax	# operand, tmp1827
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$140, %ax	#, D.23646
	jne	.L1259	#,
.L1258:
	.loc 1 3292 0 is_stmt 1
	movq	-3592(%rbp), %rax	# operand, tmp1828
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1259	#,
	.loc 1 3293 0
	movl	-3776(%rbp), %eax	# i, tmp1830
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	movl	%eax, %edx	# D.23645, D.23650
	movq	-3592(%rbp), %rax	# operand, tmp1831
	movl	%edx, %esi	# D.23650,
	movq	%rax, %rdi	# tmp1831,
	call	ix86_preferred_reload_class	#
	testl	%eax, %eax	# D.23650
	je	.L1260	#,
	.loc 1 3296 0
	cmpl	$0, -3656(%rbp)	#, no_input_reloads
	je	.L1259	#,
.L1260:
	.loc 1 3297 0
	movl	-3776(%rbp), %eax	# i, tmp1833
	cltq
	movl	-2096(%rbp,%rax,4), %eax	# operand_mode, D.23652
	testl	%eax, %eax	# D.23652
	je	.L1259	#,
	.loc 1 3299 0
	movl	$1, -3680(%rbp)	#, const_to_mem
	.loc 1 3300 0
	movl	-3776(%rbp), %eax	# i, tmp1835
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1259	#,
	.loc 1 3301 0
	addl	$1, -3728(%rbp)	#, losers
.L1259:
	.loc 1 3309 0
	movq	-3592(%rbp), %rax	# operand, tmp1836
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$67, %ax	#, D.23646
	je	.L1261	#,
	.loc 1 3309 0 is_stmt 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1837
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$68, %ax	#, D.23646
	je	.L1261	#,
	movq	-3592(%rbp), %rax	# operand, tmp1838
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$54, %ax	#, D.23646
	je	.L1261	#,
	movq	-3592(%rbp), %rax	# operand, tmp1839
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$55, %ax	#, D.23646
	je	.L1261	#,
	movq	-3592(%rbp), %rax	# operand, tmp1840
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$58, %ax	#, D.23646
	je	.L1261	#,
	movq	-3592(%rbp), %rax	# operand, tmp1841
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1261	#,
	movq	-3592(%rbp), %rax	# operand, tmp1842
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$56, %ax	#, D.23646
	je	.L1261	#,
	movq	-3592(%rbp), %rax	# operand, tmp1843
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$140, %ax	#, D.23646
	je	.L1261	#,
	.loc 1 3310 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp1845
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1261	#,
	.loc 1 3311 0
	movl	-3776(%rbp), %eax	# i, tmp1847
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	movl	%eax, %edx	# D.23645, D.23650
	movq	-3592(%rbp), %rax	# operand, tmp1848
	movl	%edx, %esi	# D.23650,
	movq	%rax, %rdi	# tmp1848,
	call	ix86_preferred_reload_class	#
	testl	%eax, %eax	# D.23650
	jne	.L1261	#,
	.loc 1 3314 0
	movl	$1, -3724(%rbp)	#, bad
	jmp	.L1262	#
.L1261:
	.loc 1 3319 0
	movq	-3592(%rbp), %rax	# operand, tmp1849
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$62, %ax	#, D.23646
	je	.L1263	#,
	.loc 1 3320 0
	movl	-3776(%rbp), %eax	# i, tmp1851
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	testl	%eax, %eax	# D.23656
	je	.L1263	#,
	.loc 1 3320 0 is_stmt 0 discriminator 1
	cmpl	$0, -3768(%rbp)	#, no_output_reloads
	je	.L1263	#,
	.loc 1 3321 0 is_stmt 1
	movq	-3592(%rbp), %rdx	# operand, tmp1852
	movq	-3784(%rbp), %rax	# insn, tmp1853
	movl	$10, %esi	#,
	movq	%rax, %rdi	# tmp1853,
	call	find_reg_note	#
	testq	%rax, %rax	# D.23648
	jne	.L1263	#,
	.loc 1 3322 0
	movl	$1, -3724(%rbp)	#, bad
	jmp	.L1262	#
.L1263:
	.loc 1 3323 0
	movl	-3776(%rbp), %eax	# i, tmp1855
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	cmpl	$2, %eax	#, D.23656
	je	.L1262	#,
	.loc 1 3323 0 is_stmt 0 discriminator 1
	cmpl	$0, -3656(%rbp)	#, no_input_reloads
	je	.L1262	#,
	.loc 1 3324 0 is_stmt 1
	cmpl	$0, -3680(%rbp)	#, const_to_mem
	jne	.L1262	#,
	.loc 1 3325 0
	movl	$1, -3724(%rbp)	#, bad
.L1262:
	.loc 1 3335 0
	movq	-3592(%rbp), %rax	# operand, tmp1856
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1264	#,
	.loc 1 3336 0 discriminator 1
	movq	-3592(%rbp), %rax	# operand, tmp1857
	movl	8(%rax), %eax	# operand_120->fld[0].rtuint, D.23649
	.loc 1 3335 0 discriminator 1
	cmpl	$52, %eax	#, D.23649
	ja	.L1265	#,
.L1264:
	.loc 1 3337 0
	movq	-3592(%rbp), %rax	# operand, tmp1858
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$62, %ax	#, D.23646
	je	.L1265	#,
	.loc 1 3338 0
	cmpl	$0, -3680(%rbp)	#, const_to_mem
	je	.L1266	#,
	.loc 1 3338 0 is_stmt 0 discriminator 1
	cmpl	$0, -3688(%rbp)	#, constmemok
	jne	.L1265	#,
.L1266:
	.loc 1 3339 0 is_stmt 1
	addl	$2, -3720(%rbp)	#, reject
.L1265:
	.loc 1 3343 0
	movl	-3776(%rbp), %eax	# i, tmp1860
	cltq
	movl	-3248(%rbp,%rax,4), %eax	# operand_type, D.23657
	testl	%eax, %eax	# D.23657
	je	.L1254	#,
	.loc 1 3344 0
	movq	-3592(%rbp), %rax	# operand, tmp1861
	movzwl	(%rax), %eax	# operand_120->code, D.23646
	cmpw	$62, %ax	#, D.23646
	je	.L1254	#,
	.loc 1 3345 0
	addl	$1, -3720(%rbp)	#, reject
.L1254:
.LBE37:
	.loc 1 3369 0
	cmpl	$0, -3716(%rbp)	#, win
	jne	.L1267	#,
	.loc 1 3369 0 is_stmt 0 discriminator 1
	cmpl	$0, -3712(%rbp)	#, did_match
	jne	.L1267	#,
	.loc 1 3370 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp1863
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1267	#,
	.loc 1 3371 0
	movl	-3776(%rbp), %eax	# i, tmp1865
	cltq
	movl	-2096(%rbp,%rax,4), %eax	# operand_mode, D.23652
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23651
	movzbl	%al, %edx	# D.23651, D.23645
	movl	target_flags(%rip), %eax	# target_flags, target_flags.745
	andl	$33554432, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1268	#,
	.loc 1 3371 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.744
	jmp	.L1269	#
.L1268:
	.loc 1 3371 0 discriminator 2
	movl	$4, %eax	#, iftmp.744
.L1269:
	.loc 1 3371 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.744, D.23645
	jg	.L1267	#,
	.loc 1 3372 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp1868
	cltq
	movl	-3504(%rbp,%rax,4), %eax	# preferred_class, D.23650
	cltq
	movl	reg_class_size(,%rax,4), %eax	# reg_class_size, D.23649
	cmpl	$1, %eax	#, D.23649
	jbe	.L1267	#,
	.loc 1 3374 0
	movl	-3776(%rbp), %eax	# i, tmp1871
	cltq
	movl	-3504(%rbp,%rax,4), %edx	# preferred_class, D.23650
	movl	-3776(%rbp), %eax	# i, tmp1873
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	movl	%edx, %esi	# D.23650,
	movl	%eax, %edi	# D.23650,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23645
	jne	.L1267	#,
	.loc 1 3382 0
	movl	-3776(%rbp), %eax	# i, tmp1875
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	.loc 1 3381 0
	movl	%eax, %edx	# D.23645, D.23650
	movl	-3776(%rbp), %eax	# i, tmp1877
	cltq
	movl	-3504(%rbp,%rax,4), %eax	# preferred_class, D.23650
	movl	%edx, %esi	# D.23650,
	movl	%eax, %edi	# D.23650,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.23645
	je	.L1270	#,
	.loc 1 3383 0
	movl	-3776(%rbp), %eax	# i, tmp1879
	cltq
	movl	-3504(%rbp,%rax,4), %eax	# preferred_class, D.23650
	movl	%eax, %edx	# D.23650, D.23645
	movl	-3776(%rbp), %eax	# i, tmp1881
	cltq
	movl	%edx, -2864(%rbp,%rax,4)	# D.23645, this_alternative
	jmp	.L1267	#
.L1270:
	.loc 1 3385 0
	movl	-3776(%rbp), %eax	# i, tmp1883
	cltq
	movzbl	-320(%rbp,%rax), %eax	# pref_or_nothing, D.23647
	movsbl	%al, %eax	# D.23647, D.23645
	addl	$1, %eax	#, D.23645
	addl	%eax, %eax	# D.23645
	addl	%eax, -3720(%rbp)	# D.23645, reject
.L1267:
.LBE35:
	.loc 1 2808 0 discriminator 22
	addl	$1, -3776(%rbp)	#, i
.L1030:
	.loc 1 2808 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1884
	cmpl	-3652(%rbp), %eax	# noperands, tmp1884
	jl	.L1271	#,
	.loc 1 3394 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1272	#
.L1289:
	.loc 1 3395 0
	movl	-3776(%rbp), %eax	# i, tmp1886
	cltq
	movzbl	-192(%rbp,%rax), %eax	# this_alternative_earlyclobber, D.23647
	testb	%al, %al	# D.23647
	je	.L1273	#,
	.loc 1 3396 0
	movl	-3776(%rbp), %eax	# i, tmp1888
	cltq
	movzbl	-256(%rbp,%rax), %eax	# this_alternative_win, D.23647
	testb	%al, %al	# D.23647
	jne	.L1274	#,
	.loc 1 3396 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1890
	cltq
	movzbl	-288(%rbp,%rax), %eax	# this_alternative_match_win, D.23647
	testb	%al, %al	# D.23647
	je	.L1273	#,
.L1274:
.LBB38:
	.loc 1 3400 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp1892
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	leaq	-1840(%rbp), %rax	#, tmp1893
	movq	%rdx, %rsi	# D.23648,
	movq	%rax, %rdi	# tmp1893,
	call	decompose	#
	.loc 1 3402 0
	movl	-3776(%rbp), %eax	# i, tmp1895
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	testl	%eax, %eax	# D.23656
	jne	.L1275	#,
	.loc 1 3403 0
	movl	$__FUNCTION__.11908, %edx	#,
	movl	$3403, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1275:
	.loc 1 3405 0
	movl	-3776(%rbp), %eax	# i, tmp1897
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1276	#,
	.loc 1 3407 0
	movl	-3776(%rbp), %eax	# i, tmp1899
	cltq
	movb	$0, -192(%rbp,%rax)	#, this_alternative_earlyclobber
	.loc 1 3408 0
	movl	this_insn_is_asm(%rip), %eax	# this_insn_is_asm, this_insn_is_asm.746
	testl	%eax, %eax	# this_insn_is_asm.746
	je	.L1277	#,
	.loc 1 3409 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.747
	movl	$.LC3, %esi	#,
	movq	%rax, %rdi	# this_insn.747,
	movl	$0, %eax	#,
	call	error_for_asm	#
	jmp	.L1276	#
.L1277:
	.loc 1 3412 0
	movl	$__FUNCTION__.11908, %edx	#,
	movl	$3412, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1276:
	.loc 1 3415 0
	movl	$0, -3772(%rbp)	#, j
	jmp	.L1278	#
.L1284:
	.loc 1 3417 0
	movl	-3772(%rbp), %eax	# j, tmp1901
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1067->code, D.23646
	cmpw	$66, %ax	#, D.23646
	je	.L1279	#,
	.loc 1 3418 0
	movl	-3772(%rbp), %eax	# j, tmp1903
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	cmpl	$2, %eax	#, D.23656
	je	.L1280	#,
.L1279:
	.loc 1 3419 0
	movl	-3772(%rbp), %eax	# j, tmp1904
	cmpl	-3776(%rbp), %eax	# i, tmp1904
	je	.L1280	#,
	.loc 1 3421 0
	movl	-3772(%rbp), %eax	# j, tmp1906
	cltq
	addq	$60, %rax	#, tmp1907
	movq	recog_data(,%rax,8), %rax	# recog_data.constraints, D.23664
	movzbl	(%rax), %eax	# *_1070, D.23647
	testb	%al, %al	# D.23647
	je	.L1280	#,
	.loc 1 3424 0
	movl	-3772(%rbp), %eax	# j, tmp1909
	cltq
	movl	-2736(%rbp,%rax,4), %eax	# this_alternative_matches, D.23645
	cmpl	-3776(%rbp), %eax	# i, D.23645
	jne	.L1281	#,
	.loc 1 3425 0 discriminator 1
	movl	-3772(%rbp), %eax	# j, tmp1911
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp1913
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movq	%rdx, %rsi	# D.23648,
	movq	%rax, %rdi	# D.23648,
	call	rtx_equal_p	#
	.loc 1 3424 0 discriminator 1
	testl	%eax, %eax	# D.23645
	jne	.L1280	#,
.L1281:
	.loc 1 3428 0
	movl	-3776(%rbp), %eax	# i, tmp1915
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3772(%rbp), %eax	# j, tmp1917
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movq	-1840(%rbp), %rcx	# early_data, tmp1918
	movq	%rcx, (%rsp)	# tmp1918,
	movq	-1832(%rbp), %rcx	# early_data, tmp1919
	movq	%rcx, 8(%rsp)	# tmp1919,
	movq	-1824(%rbp), %rcx	# early_data, tmp1920
	movq	%rcx, 16(%rsp)	# tmp1920,
	movq	-1816(%rbp), %rcx	# early_data, tmp1921
	movq	%rcx, 24(%rsp)	# tmp1921,
	movq	%rdx, %rsi	# D.23648,
	movq	%rax, %rdi	# D.23648,
	call	immune_p	#
	testl	%eax, %eax	# D.23645
	jne	.L1280	#,
	.loc 1 3433 0
	movl	-3776(%rbp), %eax	# i, tmp1923
	cltq
	movl	-2864(%rbp,%rax,4), %eax	# this_alternative, D.23645
	cltq
	movl	reg_class_size(,%rax,4), %eax	# reg_class_size, D.23649
	cmpl	$1, %eax	#, D.23649
	jne	.L1282	#,
	.loc 1 3434 0
	movl	-3772(%rbp), %eax	# j, tmp1926
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1081->code, D.23646
	cmpw	$61, %ax	#, D.23646
	je	.L1283	#,
	.loc 1 3435 0
	movl	-3772(%rbp), %eax	# j, tmp1928
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1083->code, D.23646
	cmpw	$63, %ax	#, D.23646
	jne	.L1282	#,
.L1283:
	.loc 1 3437 0
	addl	$1, -3728(%rbp)	#, losers
	.loc 1 3438 0
	movl	-3772(%rbp), %eax	# j, tmp1930
	cltq
	movb	$0, -256(%rbp,%rax)	#, this_alternative_win
	.loc 1 3439 0
	movl	-3772(%rbp), %eax	# j, tmp1932
	cltq
	movb	$0, -288(%rbp,%rax)	#, this_alternative_match_win
.L1280:
	.loc 1 3415 0
	addl	$1, -3772(%rbp)	#, j
.L1278:
	.loc 1 3415 0 is_stmt 0 discriminator 1
	movl	-3772(%rbp), %eax	# j, tmp1933
	cmpl	-3652(%rbp), %eax	# noperands, tmp1933
	jl	.L1284	#,
.L1282:
	.loc 1 3446 0 is_stmt 1
	movl	-3772(%rbp), %eax	# j, tmp1934
	cmpl	-3652(%rbp), %eax	# noperands, tmp1934
	je	.L1273	#,
	.loc 1 3448 0
	addl	$1, -3728(%rbp)	#, losers
	.loc 1 3449 0
	movl	-3776(%rbp), %eax	# i, tmp1936
	cltq
	movb	$0, -256(%rbp,%rax)	#, this_alternative_win
	.loc 1 3450 0
	movl	-3772(%rbp), %eax	# j, tmp1938
	cltq
	movb	$0, -288(%rbp,%rax)	#, this_alternative_match_win
	.loc 1 3451 0
	movl	$0, -3772(%rbp)	#, j
	jmp	.L1286	#
.L1288:
	.loc 1 3452 0
	movl	-3772(%rbp), %eax	# j, tmp1940
	cltq
	movl	-2736(%rbp,%rax,4), %eax	# this_alternative_matches, D.23645
	cmpl	-3776(%rbp), %eax	# i, D.23645
	jne	.L1287	#,
	.loc 1 3453 0
	movl	-3772(%rbp), %eax	# j, tmp1942
	cltq
	movzbl	-288(%rbp,%rax), %eax	# this_alternative_match_win, D.23647
	testb	%al, %al	# D.23647
	je	.L1287	#,
	.loc 1 3455 0
	movl	-3772(%rbp), %eax	# j, tmp1944
	cltq
	movb	$0, -256(%rbp,%rax)	#, this_alternative_win
	.loc 1 3456 0
	movl	-3772(%rbp), %eax	# j, tmp1946
	cltq
	movb	$0, -288(%rbp,%rax)	#, this_alternative_match_win
	.loc 1 3457 0
	addl	$1, -3728(%rbp)	#, losers
.L1287:
	.loc 1 3451 0
	addl	$1, -3772(%rbp)	#, j
.L1286:
	.loc 1 3451 0 is_stmt 0 discriminator 1
	movl	-3772(%rbp), %eax	# j, tmp1947
	cmpl	-3652(%rbp), %eax	# noperands, tmp1947
	jl	.L1288	#,
.L1273:
.LBE38:
	.loc 1 3394 0 is_stmt 1
	addl	$1, -3776(%rbp)	#, i
.L1272:
	.loc 1 3394 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1948
	cmpl	-3652(%rbp), %eax	# noperands, tmp1948
	jl	.L1289	#,
	.loc 1 3464 0 is_stmt 1
	cmpl	$0, -3728(%rbp)	#, losers
	jne	.L1290	#,
	.loc 1 3467 0
	cmpl	$0, -3744(%rbp)	#, commutative
	js	.L1291	#,
	.loc 1 3469 0
	movl	-3744(%rbp), %eax	# commutative, tmp1950
	cltq
	movq	-1472(%rbp,%rax,8), %rdx	# substed_operand, D.23648
	movl	-3744(%rbp), %eax	# commutative, tmp1952
	cltq
	movq	%rdx, recog_data(,%rax,8)	# D.23648, recog_data.operand
	.loc 1 3470 0
	movl	-3744(%rbp), %eax	# commutative, tmp1953
	leal	1(%rax), %ecx	#, D.23645
	.loc 1 3471 0
	movl	-3744(%rbp), %eax	# commutative, tmp1954
	addl	$1, %eax	#, D.23645
	cltq
	movq	-1472(%rbp,%rax,8), %rdx	# substed_operand, D.23648
	movslq	%ecx, %rax	# D.23645, tmp1956
	movq	%rdx, recog_data(,%rax,8)	# D.23648, recog_data.operand
.L1291:
	.loc 1 3473 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1292	#
.L1293:
	.loc 1 3475 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp1958
	cltq
	movzbl	-256(%rbp,%rax), %edx	# this_alternative_win, D.23647
	movl	-3776(%rbp), %eax	# i, tmp1960
	cltq
	movb	%dl, -128(%rbp,%rax)	# D.23647, goal_alternative_win
	.loc 1 3476 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp1962
	cltq
	movzbl	-288(%rbp,%rax), %edx	# this_alternative_match_win, D.23647
	movl	-3776(%rbp), %eax	# i, tmp1964
	cltq
	movb	%dl, -160(%rbp,%rax)	# D.23647, goal_alternative_match_win
	.loc 1 3477 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp1966
	cltq
	movl	-2864(%rbp,%rax,4), %edx	# this_alternative, D.23645
	movl	-3776(%rbp), %eax	# i, tmp1968
	cltq
	movl	%edx, -2608(%rbp,%rax,4)	# D.23645, goal_alternative
	.loc 1 3478 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp1970
	cltq
	movzbl	-224(%rbp,%rax), %edx	# this_alternative_offmemok, D.23647
	movl	-3776(%rbp), %eax	# i, tmp1972
	cltq
	movb	%dl, -96(%rbp,%rax)	# D.23647, goal_alternative_offmemok
	.loc 1 3479 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp1974
	cltq
	movl	-2736(%rbp,%rax,4), %edx	# this_alternative_matches, D.23645
	movl	-3776(%rbp), %eax	# i, tmp1976
	cltq
	movl	%edx, -2352(%rbp,%rax,4)	# D.23645, goal_alternative_matches
	.loc 1 3481 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp1978
	cltq
	movzbl	-192(%rbp,%rax), %edx	# this_alternative_earlyclobber, D.23647
	movl	-3776(%rbp), %eax	# i, tmp1980
	cltq
	movb	%dl, -64(%rbp,%rax)	# D.23647, goal_alternative_earlyclobber
	.loc 1 3473 0 discriminator 2
	addl	$1, -3776(%rbp)	#, i
.L1292:
	.loc 1 3473 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp1981
	cmpl	-3652(%rbp), %eax	# noperands, tmp1981
	jl	.L1293	#,
	.loc 1 3483 0 is_stmt 1
	movl	-3760(%rbp), %eax	# this_alternative_number, tmp1982
	movl	%eax, -3756(%rbp)	# tmp1982, goal_alternative_number
	.loc 1 3484 0
	movl	-3764(%rbp), %eax	# swapped, tmp1983
	movl	%eax, -3752(%rbp)	# tmp1983, goal_alternative_swapped
	.loc 1 3485 0
	movl	-3736(%rbp), %eax	# this_earlyclobber, tmp1984
	movl	%eax, -3740(%rbp)	# tmp1984, goal_earlyclobber
	.loc 1 3486 0
	jmp	.L1294	#
.L1290:
	.loc 1 3493 0
	movl	-3728(%rbp), %edx	# losers, tmp1985
	movl	%edx, %eax	# tmp1985, tmp1986
	addl	%eax, %eax	# tmp1986
	addl	%edx, %eax	# tmp1985, tmp1986
	addl	%eax, %eax	# tmp1987
	movl	%eax, %edx	# tmp1986, D.23645
	movl	-3720(%rbp), %eax	# reject, tmp1991
	addl	%edx, %eax	# D.23645, tmp1990
	movl	%eax, -3728(%rbp)	# tmp1990, losers
	.loc 1 3498 0
	cmpl	$0, -3724(%rbp)	#, bad
	jne	.L1295	#,
	.loc 1 3498 0 is_stmt 0 discriminator 1
	movl	-3748(%rbp), %eax	# best, tmp1992
	cmpl	-3728(%rbp), %eax	# losers, tmp1992
	jle	.L1295	#,
	.loc 1 3500 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1296	#
.L1297:
	.loc 1 3502 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp1994
	cltq
	movl	-2864(%rbp,%rax,4), %edx	# this_alternative, D.23645
	movl	-3776(%rbp), %eax	# i, tmp1996
	cltq
	movl	%edx, -2608(%rbp,%rax,4)	# D.23645, goal_alternative
	.loc 1 3503 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp1998
	cltq
	movzbl	-256(%rbp,%rax), %edx	# this_alternative_win, D.23647
	movl	-3776(%rbp), %eax	# i, tmp2000
	cltq
	movb	%dl, -128(%rbp,%rax)	# D.23647, goal_alternative_win
	.loc 1 3504 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp2002
	cltq
	movzbl	-288(%rbp,%rax), %edx	# this_alternative_match_win, D.23647
	movl	-3776(%rbp), %eax	# i, tmp2004
	cltq
	movb	%dl, -160(%rbp,%rax)	# D.23647, goal_alternative_match_win
	.loc 1 3505 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp2006
	cltq
	movzbl	-224(%rbp,%rax), %edx	# this_alternative_offmemok, D.23647
	movl	-3776(%rbp), %eax	# i, tmp2008
	cltq
	movb	%dl, -96(%rbp,%rax)	# D.23647, goal_alternative_offmemok
	.loc 1 3506 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp2010
	cltq
	movl	-2736(%rbp,%rax,4), %edx	# this_alternative_matches, D.23645
	movl	-3776(%rbp), %eax	# i, tmp2012
	cltq
	movl	%edx, -2352(%rbp,%rax,4)	# D.23645, goal_alternative_matches
	.loc 1 3508 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp2014
	cltq
	movzbl	-192(%rbp,%rax), %edx	# this_alternative_earlyclobber, D.23647
	movl	-3776(%rbp), %eax	# i, tmp2016
	cltq
	movb	%dl, -64(%rbp,%rax)	# D.23647, goal_alternative_earlyclobber
	.loc 1 3500 0 discriminator 2
	addl	$1, -3776(%rbp)	#, i
.L1296:
	.loc 1 3500 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2017
	cmpl	-3652(%rbp), %eax	# noperands, tmp2017
	jl	.L1297	#,
	.loc 1 3510 0 is_stmt 1
	movl	-3764(%rbp), %eax	# swapped, tmp2018
	movl	%eax, -3752(%rbp)	# tmp2018, goal_alternative_swapped
	.loc 1 3511 0
	movl	-3728(%rbp), %eax	# losers, tmp2019
	movl	%eax, -3748(%rbp)	# tmp2019, best
	.loc 1 3512 0
	movl	-3760(%rbp), %eax	# this_alternative_number, tmp2020
	movl	%eax, -3756(%rbp)	# tmp2020, goal_alternative_number
	.loc 1 3513 0
	movl	-3736(%rbp), %eax	# this_earlyclobber, tmp2021
	movl	%eax, -3740(%rbp)	# tmp2021, goal_earlyclobber
.L1295:
.LBE34:
	.loc 1 2789 0
	addl	$1, -3760(%rbp)	#, this_alternative_number
.L1029:
	.loc 1 2787 0 discriminator 1
	movl	-3760(%rbp), %eax	# this_alternative_number, tmp2022
	cmpl	-3648(%rbp), %eax	# n_alternatives, tmp2022
	jl	.L1298	#,
	.loc 1 3526 0
	cmpl	$0, -3744(%rbp)	#, commutative
	js	.L1299	#,
	.loc 1 3528 0
	cmpl	$0, -3764(%rbp)	#, swapped
	sete	%al	#, D.23653
	movzbl	%al, %eax	# D.23653, tmp2023
	movl	%eax, -3764(%rbp)	# tmp2023, swapped
	.loc 1 3529 0
	cmpl	$0, -3764(%rbp)	#, swapped
	je	.L1300	#,
.LBB39:
	.loc 1 3534 0
	movl	-3744(%rbp), %eax	# commutative, tmp2024
	addl	$1, %eax	#, D.23645
	cltq
	movq	-1472(%rbp,%rax,8), %rdx	# substed_operand, D.23648
	movl	-3744(%rbp), %eax	# commutative, tmp2027
	cltq
	movq	%rdx, recog_data(,%rax,8)	# D.23648, recog_data.operand
	.loc 1 3535 0
	movl	-3744(%rbp), %eax	# commutative, tmp2028
	leal	1(%rax), %ecx	#, D.23645
	movl	-3744(%rbp), %eax	# commutative, tmp2030
	cltq
	movq	-1472(%rbp,%rax,8), %rdx	# substed_operand, D.23648
	movslq	%ecx, %rax	# D.23645, tmp2031
	movq	%rdx, recog_data(,%rax,8)	# D.23648, recog_data.operand
	.loc 1 3537 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1301	#
.L1304:
	.loc 1 3538 0
	movl	-3776(%rbp), %eax	# i, tmp2033
	cltq
	movzbl	recog_data+992(%rax), %eax	# recog_data.dup_num, D.23647
	movsbl	%al, %eax	# D.23647, D.23645
	cmpl	-3744(%rbp), %eax	# commutative, D.23645
	je	.L1302	#,
	.loc 1 3539 0
	movl	-3776(%rbp), %eax	# i, tmp2035
	cltq
	movzbl	recog_data+992(%rax), %eax	# recog_data.dup_num, D.23647
	movsbl	%al, %eax	# D.23647, D.23645
	movl	-3744(%rbp), %edx	# commutative, tmp2036
	addl	$1, %edx	#, D.23645
	cmpl	%edx, %eax	# D.23645, D.23645
	jne	.L1303	#,
.L1302:
	.loc 1 3540 0
	movl	-3776(%rbp), %eax	# i, tmp2038
	cltq
	addq	$120, %rax	#, tmp2039
	movq	recog_data(,%rax,8), %rax	# recog_data.dup_loc, D.23658
	.loc 1 3541 0
	movl	-3776(%rbp), %edx	# i, tmp2041
	movslq	%edx, %rdx	# tmp2041, tmp2040
	movzbl	recog_data+992(%rdx), %edx	# recog_data.dup_num, D.23647
	movsbl	%dl, %edx	# D.23647, D.23645
	movslq	%edx, %rdx	# D.23645, tmp2042
	movq	recog_data(,%rdx,8), %rdx	# recog_data.operand, D.23648
	movq	%rdx, (%rax)	# D.23648, *_1138
.L1303:
	.loc 1 3537 0
	addl	$1, -3776(%rbp)	#, i
.L1301:
	.loc 1 3537 0 is_stmt 0 discriminator 1
	movzbl	recog_data+997(%rip), %eax	# recog_data.n_dups, D.23647
	movsbl	%al, %eax	# D.23647, D.23645
	cmpl	-3776(%rbp), %eax	# i, D.23645
	jg	.L1304	#,
	.loc 1 3543 0 is_stmt 1
	movl	-3744(%rbp), %eax	# commutative, tmp2044
	cltq
	movl	-3504(%rbp,%rax,4), %eax	# preferred_class, tmp2045
	movl	%eax, -3616(%rbp)	# tmp2045, tclass
	.loc 1 3544 0
	movl	-3744(%rbp), %eax	# commutative, tmp2046
	addl	$1, %eax	#, D.23645
	cltq
	movl	-3504(%rbp,%rax,4), %edx	# preferred_class, D.23650
	movl	-3744(%rbp), %eax	# commutative, tmp2049
	cltq
	movl	%edx, -3504(%rbp,%rax,4)	# D.23650, preferred_class
	.loc 1 3545 0
	movl	-3744(%rbp), %eax	# commutative, tmp2050
	addl	$1, %eax	#, D.23645
	cltq
	movl	-3616(%rbp), %edx	# tclass, tmp2052
	movl	%edx, -3504(%rbp,%rax,4)	# tmp2052, preferred_class
	.loc 1 3547 0
	movl	-3744(%rbp), %eax	# commutative, tmp2054
	cltq
	movzbl	-320(%rbp,%rax), %eax	# pref_or_nothing, D.23647
	movsbl	%al, %eax	# D.23647, tmp2055
	movl	%eax, -3612(%rbp)	# tmp2055, t
	.loc 1 3548 0
	movl	-3744(%rbp), %eax	# commutative, tmp2056
	addl	$1, %eax	#, D.23645
	cltq
	movzbl	-320(%rbp,%rax), %edx	# pref_or_nothing, D.23647
	movl	-3744(%rbp), %eax	# commutative, tmp2059
	cltq
	movb	%dl, -320(%rbp,%rax)	# D.23647, pref_or_nothing
	.loc 1 3549 0
	movl	-3744(%rbp), %eax	# commutative, tmp2060
	leal	1(%rax), %ecx	#, D.23645
	movl	-3612(%rbp), %eax	# t, tmp2061
	movl	%eax, %edx	# tmp2061, D.23647
	movslq	%ecx, %rax	# D.23645, tmp2062
	movb	%dl, -320(%rbp,%rax)	# D.23647, pref_or_nothing
	.loc 1 3551 0
	movl	-3652(%rbp), %eax	# noperands, tmp2063
	cltq
	leaq	0(,%rax,8), %rdx	#, D.23654
	leaq	-1712(%rbp), %rax	#, tmp2064
	movl	$recog_data+480, %esi	#,
	movq	%rax, %rdi	# tmp2064,
	call	memcpy	#
	.loc 1 3553 0
	jmp	.L1028	#
.L1300:
.LBE39:
	.loc 1 3557 0
	movl	-3744(%rbp), %eax	# commutative, tmp2066
	cltq
	movq	-1472(%rbp,%rax,8), %rdx	# substed_operand, D.23648
	movl	-3744(%rbp), %eax	# commutative, tmp2068
	cltq
	movq	%rdx, recog_data(,%rax,8)	# D.23648, recog_data.operand
	.loc 1 3558 0
	movl	-3744(%rbp), %eax	# commutative, tmp2069
	leal	1(%rax), %ecx	#, D.23645
	.loc 1 3559 0
	movl	-3744(%rbp), %eax	# commutative, tmp2070
	addl	$1, %eax	#, D.23645
	cltq
	movq	-1472(%rbp,%rax,8), %rdx	# substed_operand, D.23648
	movslq	%ecx, %rax	# D.23645, tmp2072
	movq	%rdx, recog_data(,%rax,8)	# D.23648, recog_data.operand
	.loc 1 3561 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1305	#
.L1308:
	.loc 1 3562 0
	movl	-3776(%rbp), %eax	# i, tmp2074
	cltq
	movzbl	recog_data+992(%rax), %eax	# recog_data.dup_num, D.23647
	movsbl	%al, %eax	# D.23647, D.23645
	cmpl	-3744(%rbp), %eax	# commutative, D.23645
	je	.L1306	#,
	.loc 1 3563 0
	movl	-3776(%rbp), %eax	# i, tmp2076
	cltq
	movzbl	recog_data+992(%rax), %eax	# recog_data.dup_num, D.23647
	movsbl	%al, %eax	# D.23647, D.23645
	movl	-3744(%rbp), %edx	# commutative, tmp2077
	addl	$1, %edx	#, D.23645
	cmpl	%edx, %eax	# D.23645, D.23645
	jne	.L1307	#,
.L1306:
	.loc 1 3564 0
	movl	-3776(%rbp), %eax	# i, tmp2079
	cltq
	addq	$120, %rax	#, tmp2080
	movq	recog_data(,%rax,8), %rax	# recog_data.dup_loc, D.23658
	.loc 1 3565 0
	movl	-3776(%rbp), %edx	# i, tmp2082
	movslq	%edx, %rdx	# tmp2082, tmp2081
	movzbl	recog_data+992(%rdx), %edx	# recog_data.dup_num, D.23647
	movsbl	%dl, %edx	# D.23647, D.23645
	movslq	%edx, %rdx	# D.23645, tmp2083
	movq	recog_data(,%rdx,8), %rdx	# recog_data.operand, D.23648
	movq	%rdx, (%rax)	# D.23648, *_1167
.L1307:
	.loc 1 3561 0
	addl	$1, -3776(%rbp)	#, i
.L1305:
	.loc 1 3561 0 is_stmt 0 discriminator 1
	movzbl	recog_data+997(%rip), %eax	# recog_data.n_dups, D.23647
	movsbl	%al, %eax	# D.23647, D.23645
	cmpl	-3776(%rbp), %eax	# i, D.23645
	jg	.L1308	#,
.L1299:
	.loc 1 3574 0 is_stmt 1
	cmpl	$660, -3748(%rbp)	#, best
	jne	.L1294	#,
	.loc 1 3577 0
	cmpl	$0, -3644(%rbp)	#, insn_code_number
	js	.L1309	#,
	.loc 1 3578 0
	movq	-3784(%rbp), %rax	# insn, tmp2084
	movl	$__FUNCTION__.11908, %r8d	#,
	movl	$3578, %ecx	#,
	movl	$.LC0, %edx	#,
	movq	%rax, %rsi	# tmp2084,
	movl	$.LC4, %edi	#,
	call	_fatal_insn	#
.L1309:
	.loc 1 3579 0
	movq	-3784(%rbp), %rax	# insn, tmp2085
	movl	$.LC5, %esi	#,
	movq	%rax, %rdi	# tmp2085,
	movl	$0, %eax	#,
	call	error_for_asm	#
	.loc 1 3581 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.23648
	movq	%rax, %rdx	# D.23648,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-3784(%rbp), %rdx	# insn, tmp2086
	movq	%rax, 32(%rdx)	# D.23648, insn_243(D)->fld[3].rtx
	.loc 1 3582 0
	movl	$0, n_reloads(%rip)	#, n_reloads
	.loc 1 3583 0
	movl	$0, %eax	#, D.23645
	jmp	.L1495	#
.L1294:
	.loc 1 3596 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1310	#
.L1311:
	.loc 1 3597 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp2088
	cltq
	movl	$-1, -2224(%rbp,%rax,4)	#, goal_alternative_matched
	.loc 1 3596 0 discriminator 2
	addl	$1, -3776(%rbp)	#, i
.L1310:
	.loc 1 3596 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2089
	cmpl	-3652(%rbp), %eax	# noperands, tmp2089
	jl	.L1311	#,
	.loc 1 3599 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1312	#
.L1314:
	.loc 1 3600 0
	movl	-3776(%rbp), %eax	# i, tmp2091
	cltq
	movzbl	-128(%rbp,%rax), %eax	# goal_alternative_win, D.23647
	testb	%al, %al	# D.23647
	jne	.L1313	#,
	.loc 1 3601 0
	movl	-3776(%rbp), %eax	# i, tmp2093
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	testl	%eax, %eax	# D.23645
	js	.L1313	#,
	.loc 1 3602 0
	movl	-3776(%rbp), %eax	# i, tmp2095
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	cltq
	movl	-3776(%rbp), %edx	# i, tmp2097
	movl	%edx, -2224(%rbp,%rax,4)	# tmp2097, goal_alternative_matched
.L1313:
	.loc 1 3599 0
	addl	$1, -3776(%rbp)	#, i
.L1312:
	.loc 1 3599 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2098
	cmpl	-3652(%rbp), %eax	# noperands, tmp2098
	jl	.L1314	#,
	.loc 1 3604 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1315	#
.L1316:
	.loc 1 3605 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp2100
	cltq
	movzbl	-128(%rbp,%rax), %edx	# goal_alternative_win, D.23647
	movl	-3776(%rbp), %eax	# i, tmp2102
	cltq
	movzbl	-160(%rbp,%rax), %eax	# goal_alternative_match_win, D.23647
	orl	%eax, %edx	# D.23647, D.23660
	movl	-3776(%rbp), %eax	# i, tmp2104
	cltq
	movb	%dl, -128(%rbp,%rax)	# D.23660, goal_alternative_win
	.loc 1 3604 0 discriminator 2
	addl	$1, -3776(%rbp)	#, i
.L1315:
	.loc 1 3604 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2105
	cmpl	-3652(%rbp), %eax	# noperands, tmp2105
	jl	.L1316	#,
	.loc 1 3611 0 is_stmt 1
	cmpl	$0, -3752(%rbp)	#, goal_alternative_swapped
	je	.L1317	#,
.LBB40:
	.loc 1 3615 0
	movl	-3744(%rbp), %eax	# commutative, tmp2107
	cltq
	movq	-1472(%rbp,%rax,8), %rax	# substed_operand, tmp2108
	movq	%rax, -3528(%rbp)	# tmp2108, tem
	.loc 1 3616 0
	movl	-3744(%rbp), %eax	# commutative, tmp2109
	addl	$1, %eax	#, D.23645
	cltq
	movq	-1472(%rbp,%rax,8), %rdx	# substed_operand, D.23648
	movl	-3744(%rbp), %eax	# commutative, tmp2112
	cltq
	movq	%rdx, -1472(%rbp,%rax,8)	# D.23648, substed_operand
	.loc 1 3617 0
	movl	-3744(%rbp), %eax	# commutative, tmp2113
	addl	$1, %eax	#, D.23645
	cltq
	movq	-3528(%rbp), %rdx	# tem, tmp2115
	movq	%rdx, -1472(%rbp,%rax,8)	# tmp2115, substed_operand
	.loc 1 3618 0
	movl	-3744(%rbp), %eax	# commutative, tmp2117
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, tmp2118
	movq	%rax, -3528(%rbp)	# tmp2118, tem
	.loc 1 3619 0
	movl	-3744(%rbp), %eax	# commutative, tmp2119
	addl	$1, %eax	#, D.23645
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3744(%rbp), %eax	# commutative, tmp2122
	cltq
	movq	%rdx, recog_data(,%rax,8)	# D.23648, recog_data.operand
	.loc 1 3620 0
	movl	-3744(%rbp), %eax	# commutative, tmp2123
	addl	$1, %eax	#, D.23645
	cltq
	movq	-3528(%rbp), %rdx	# tem, tmp2125
	movq	%rdx, recog_data(,%rax,8)	# tmp2125, recog_data.operand
	.loc 1 3621 0
	movl	-3744(%rbp), %eax	# commutative, tmp2127
	cltq
	addq	$30, %rax	#, tmp2128
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	movq	(%rax), %rax	# *_1195, tmp2129
	movq	%rax, -3528(%rbp)	# tmp2129, tem
	.loc 1 3622 0
	movl	-3744(%rbp), %eax	# commutative, tmp2131
	cltq
	addq	$30, %rax	#, tmp2132
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	.loc 1 3623 0
	movl	-3744(%rbp), %edx	# commutative, tmp2133
	addl	$1, %edx	#, D.23645
	movslq	%edx, %rdx	# D.23645, tmp2134
	addq	$30, %rdx	#, tmp2135
	movq	recog_data(,%rdx,8), %rdx	# recog_data.operand_loc, D.23658
	movq	(%rdx), %rdx	# *_1199, D.23648
	movq	%rdx, (%rax)	# D.23648, *_1197
	.loc 1 3624 0
	movl	-3744(%rbp), %eax	# commutative, tmp2136
	addl	$1, %eax	#, D.23645
	cltq
	addq	$30, %rax	#, tmp2138
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	movq	-3528(%rbp), %rdx	# tem, tmp2139
	movq	%rdx, (%rax)	# tmp2139, *_1202
	.loc 1 3626 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1318	#
.L1321:
	.loc 1 3628 0
	movl	-3776(%rbp), %eax	# i, tmp2141
	movslq	%eax, %rdx	# tmp2141, tmp2140
	movq	%rdx, %rax	# tmp2140, tmp2142
	addq	%rax, %rax	# tmp2142
	addq	%rdx, %rax	# tmp2140, tmp2142
	salq	$2, %rax	#, tmp2142
	addq	%rdx, %rax	# tmp2140, tmp2142
	salq	$3, %rax	#, tmp2143
	addq	$rld+64, %rax	#, tmp2144
	movl	8(%rax), %eax	# rld[i_12].opnum, D.23645
	cmpl	-3744(%rbp), %eax	# commutative, D.23645
	jne	.L1319	#,
	.loc 1 3629 0
	movl	-3744(%rbp), %eax	# commutative, tmp2145
	leal	1(%rax), %ecx	#, D.23645
	movl	-3776(%rbp), %eax	# i, tmp2147
	movslq	%eax, %rdx	# tmp2147, tmp2146
	movq	%rdx, %rax	# tmp2146, tmp2148
	addq	%rax, %rax	# tmp2148
	addq	%rdx, %rax	# tmp2146, tmp2148
	salq	$2, %rax	#, tmp2148
	addq	%rdx, %rax	# tmp2146, tmp2148
	salq	$3, %rax	#, tmp2149
	addq	$rld+64, %rax	#, tmp2150
	movl	%ecx, 8(%rax)	# D.23645, rld[i_12].opnum
	jmp	.L1320	#
.L1319:
	.loc 1 3630 0
	movl	-3776(%rbp), %eax	# i, tmp2152
	movslq	%eax, %rdx	# tmp2152, tmp2151
	movq	%rdx, %rax	# tmp2151, tmp2153
	addq	%rax, %rax	# tmp2153
	addq	%rdx, %rax	# tmp2151, tmp2153
	salq	$2, %rax	#, tmp2153
	addq	%rdx, %rax	# tmp2151, tmp2153
	salq	$3, %rax	#, tmp2154
	addq	$rld+64, %rax	#, tmp2155
	movl	8(%rax), %eax	# rld[i_12].opnum, D.23645
	movl	-3744(%rbp), %edx	# commutative, tmp2156
	addl	$1, %edx	#, D.23645
	cmpl	%edx, %eax	# D.23645, D.23645
	jne	.L1320	#,
	.loc 1 3631 0
	movl	-3776(%rbp), %eax	# i, tmp2158
	movslq	%eax, %rdx	# tmp2158, tmp2157
	movq	%rdx, %rax	# tmp2157, tmp2159
	addq	%rax, %rax	# tmp2159
	addq	%rdx, %rax	# tmp2157, tmp2159
	salq	$2, %rax	#, tmp2159
	addq	%rdx, %rax	# tmp2157, tmp2159
	salq	$3, %rax	#, tmp2160
	leaq	rld+64(%rax), %rdx	#, tmp2161
	movl	-3744(%rbp), %eax	# commutative, tmp2162
	movl	%eax, 8(%rdx)	# tmp2162, rld[i_12].opnum
.L1320:
	.loc 1 3626 0
	addl	$1, -3776(%rbp)	#, i
.L1318:
	.loc 1 3626 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.748
	cmpl	%eax, -3776(%rbp)	# n_reloads.748, i
	jl	.L1321	#,
.L1317:
.LBE40:
	.loc 1 3635 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1322	#
.L1326:
	.loc 1 3637 0
	movl	-3776(%rbp), %eax	# i, tmp2164
	cltq
	movl	$-1, -2480(%rbp,%rax,4)	#, operand_reloadnum
	.loc 1 3656 0
	movl	-3776(%rbp), %eax	# i, tmp2166
	cltq
	movzbl	-64(%rbp,%rax), %eax	# goal_alternative_earlyclobber, D.23647
	testb	%al, %al	# D.23647
	je	.L1323	#,
	.loc 1 3656 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2168
	cltq
	movl	-3248(%rbp,%rax,4), %eax	# operand_type, D.23657
	cmpl	$9, %eax	#, D.23657
	je	.L1323	#,
	.loc 1 3658 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp2170
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movq	-3784(%rbp), %rax	# insn, tmp2171
	movl	$10, %esi	#,
	movq	%rax, %rdi	# tmp2171,
	call	find_reg_note	#
	testq	%rax, %rax	# D.23648
	je	.L1324	#,
	.loc 1 3658 0 is_stmt 0 discriminator 1
	movl	$2, %eax	#, iftmp.749
	jmp	.L1325	#
.L1324:
	.loc 1 3658 0 discriminator 2
	movl	$9, %eax	#, iftmp.749
.L1325:
	.loc 1 3658 0 discriminator 3
	movl	-3776(%rbp), %edx	# i, tmp2173
	movslq	%edx, %rdx	# tmp2173, tmp2172
	movl	%eax, -3248(%rbp,%rdx,4)	# iftmp.749, operand_type
.L1323:
	.loc 1 3635 0 is_stmt 1
	addl	$1, -3776(%rbp)	#, i
.L1322:
	.loc 1 3635 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2174
	cmpl	-3652(%rbp), %eax	# noperands, tmp2174
	jl	.L1326	#,
	.loc 1 3664 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1327	#
.L1331:
	.loc 1 3665 0
	movl	-3776(%rbp), %eax	# i, tmp2176
	cltq
	movzbl	-128(%rbp,%rax), %eax	# goal_alternative_win, D.23647
	testb	%al, %al	# D.23647
	jne	.L1328	#,
	.loc 1 3666 0
	movl	-3776(%rbp), %eax	# i, tmp2178
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1220->code, D.23646
	cmpw	$67, %ax	#, D.23646
	je	.L1329	#,
	.loc 1 3666 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2180
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1222->code, D.23646
	cmpw	$68, %ax	#, D.23646
	je	.L1329	#,
	movl	-3776(%rbp), %eax	# i, tmp2182
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1224->code, D.23646
	cmpw	$54, %ax	#, D.23646
	je	.L1329	#,
	movl	-3776(%rbp), %eax	# i, tmp2184
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1226->code, D.23646
	cmpw	$55, %ax	#, D.23646
	je	.L1329	#,
	movl	-3776(%rbp), %eax	# i, tmp2186
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1228->code, D.23646
	cmpw	$58, %ax	#, D.23646
	je	.L1329	#,
	movl	-3776(%rbp), %eax	# i, tmp2188
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1230->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1329	#,
	movl	-3776(%rbp), %eax	# i, tmp2190
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1232->code, D.23646
	cmpw	$56, %ax	#, D.23646
	je	.L1329	#,
	movl	-3776(%rbp), %eax	# i, tmp2192
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1234->code, D.23646
	cmpw	$140, %ax	#, D.23646
	jne	.L1328	#,
.L1329:
	.loc 1 3668 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp2194
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1236->code, D.23646
	cmpw	$134, %ax	#, D.23646
	je	.L1328	#,
	.loc 1 3669 0
	movl	-3776(%rbp), %eax	# i, tmp2196
	cltq
	movl	-2608(%rbp,%rax,4), %eax	# goal_alternative, D.23645
	movl	%eax, %edx	# D.23645, D.23650
	movl	-3776(%rbp), %eax	# i, tmp2198
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	%edx, %esi	# D.23650,
	movq	%rax, %rdi	# D.23648,
	call	ix86_preferred_reload_class	#
	testl	%eax, %eax	# D.23650
	je	.L1330	#,
	.loc 1 3672 0
	cmpl	$0, -3656(%rbp)	#, no_input_reloads
	je	.L1328	#,
.L1330:
	.loc 1 3673 0
	movl	-3776(%rbp), %eax	# i, tmp2200
	cltq
	movl	-2096(%rbp,%rax,4), %eax	# operand_mode, D.23652
	testl	%eax, %eax	# D.23652
	je	.L1328	#,
	.loc 1 3676 0
	movl	-3776(%rbp), %eax	# i, tmp2202
	cltq
	movl	-3120(%rbp,%rax,4), %ebx	# address_type, D.23657
	movl	-3776(%rbp), %eax	# i, tmp2204
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp2206
	cltq
	movl	-2096(%rbp,%rax,4), %eax	# operand_mode, D.23652
	movq	%rdx, %rsi	# D.23648,
	movl	%eax, %edi	# D.23652,
	call	force_const_mem	#
	movq	-3784(%rbp), %rcx	# insn, tmp2207
	movl	-3792(%rbp), %edx	# ind_levels, tmp2208
	movl	-3776(%rbp), %esi	# i, tmp2209
	movq	$0, (%rsp)	#,
	movq	%rcx, %r9	# tmp2207,
	movl	$0, %r8d	#,
	movl	%edx, %ecx	# tmp2208,
	movl	%ebx, %edx	# D.23657,
	movq	%rax, %rdi	# D.23648,
	call	find_reloads_toplev	#
	movl	-3776(%rbp), %edx	# i, tmp2211
	movslq	%edx, %rdx	# tmp2211, tmp2210
	movq	%rax, recog_data(,%rdx,8)	# D.23648, recog_data.operand
	.loc 1 3675 0
	movl	-3776(%rbp), %eax	# i, tmp2213
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp2215
	cltq
	movq	%rdx, -1472(%rbp,%rax,8)	# D.23648, substed_operand
	.loc 1 3680 0
	movl	-3776(%rbp), %eax	# i, tmp2217
	cltq
	addq	$60, %rax	#, tmp2218
	movq	recog_data(,%rax,8), %rax	# recog_data.constraints, D.23664
	movl	-3756(%rbp), %edx	# goal_alternative_number, tmp2219
	movl	%edx, %esi	# tmp2219,
	movq	%rax, %rdi	# D.23664,
	call	alternative_allows_memconst	#
	testl	%eax, %eax	# D.23645
	je	.L1328	#,
	.loc 1 3682 0
	movl	-3776(%rbp), %eax	# i, tmp2221
	cltq
	movb	$1, -128(%rbp,%rax)	#, goal_alternative_win
.L1328:
	.loc 1 3664 0
	addl	$1, -3776(%rbp)	#, i
.L1327:
	.loc 1 3664 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2222
	cmpl	-3652(%rbp), %eax	# noperands, tmp2222
	jl	.L1331	#,
	.loc 1 3686 0 is_stmt 1
	cmpl	$0, -3740(%rbp)	#, goal_earlyclobber
	je	.L1332	#,
	.loc 1 3687 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1333	#
.L1335:
	.loc 1 3688 0
	movl	-3776(%rbp), %eax	# i, tmp2224
	cltq
	movzbl	-64(%rbp,%rax), %eax	# goal_alternative_earlyclobber, D.23647
	testb	%al, %al	# D.23647
	je	.L1334	#,
	.loc 1 3689 0
	movl	n_earlyclobbers(%rip), %eax	# n_earlyclobbers, n_earlyclobbers.750
	leal	1(%rax), %edx	#, n_earlyclobbers.752
	movl	%edx, n_earlyclobbers(%rip)	# n_earlyclobbers.752, n_earlyclobbers
	movl	-3776(%rbp), %edx	# i, tmp2226
	movslq	%edx, %rdx	# tmp2226, tmp2225
	movq	recog_data(,%rdx,8), %rdx	# recog_data.operand, D.23648
	cltq
	movq	%rdx, reload_earlyclobbers(,%rax,8)	# D.23648, reload_earlyclobbers
.L1334:
	.loc 1 3687 0
	addl	$1, -3776(%rbp)	#, i
.L1333:
	.loc 1 3687 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2228
	cmpl	-3652(%rbp), %eax	# noperands, tmp2228
	jl	.L1335	#,
.L1332:
	.loc 1 3692 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1336	#
.L1393:
	.loc 1 3693 0
	movl	-3776(%rbp), %eax	# i, tmp2230
	cltq
	movzbl	-128(%rbp,%rax), %eax	# goal_alternative_win, D.23647
	testb	%al, %al	# D.23647
	jne	.L1337	#,
	.loc 1 3696 0
	movl	-3776(%rbp), %eax	# i, tmp2232
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	testl	%eax, %eax	# D.23645
	jns	.L1363	#,
	.loc 1 3705 0
	movl	-3776(%rbp), %eax	# i, tmp2234
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	cmpl	$-1, %eax	#, D.23645
	jne	.L1339	#,
	.loc 1 3706 0
	movl	-3776(%rbp), %eax	# i, tmp2236
	cltq
	movzbl	-96(%rbp,%rax), %eax	# goal_alternative_offmemok, D.23647
	testb	%al, %al	# D.23647
	je	.L1339	#,
	.loc 1 3707 0
	movl	-3776(%rbp), %eax	# i, tmp2238
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzwl	(%rax), %eax	# _1264->code, D.23646
	cmpw	$66, %ax	#, D.23646
	jne	.L1339	#,
	.loc 1 3713 0
	movl	-3776(%rbp), %eax	# i, tmp2240
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movq	8(%rax), %rax	# _1266->fld[0].rtx, D.23648
	movzbl	2(%rax), %eax	# _1267->mode, D.23651
	.loc 1 3710 0
	movzbl	%al, %ecx	# D.23651, D.23652
	.loc 1 3711 0
	movl	-3776(%rbp), %eax	# i, tmp2242
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	.loc 1 3710 0
	leaq	8(%rax), %rsi	#, D.23658
	movl	-3776(%rbp), %eax	# i, tmp2244
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movq	8(%rax), %rax	# _1272->fld[0].rtx, D.23648
	movl	$0, 32(%rsp)	#,
	movl	-3776(%rbp), %edx	# i, tmp2245
	movl	%edx, 24(%rsp)	# tmp2245,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%ecx, %r9d	# D.23652,
	movl	$12, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rsi, %rdx	# D.23658,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23648,
	call	push_reload	#
	movl	-3776(%rbp), %edx	# i, tmp2247
	movslq	%edx, %rdx	# tmp2247, tmp2246
	movl	%eax, -2480(%rbp,%rdx,4)	# D.23645, operand_reloadnum
	.loc 1 3715 0
	movl	-3776(%rbp), %eax	# i, tmp2249
	cltq
	movl	-2480(%rbp,%rax,4), %edx	# operand_reloadnum, D.23645
	.loc 1 3716 0
	movl	-3776(%rbp), %eax	# i, tmp2251
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movzbl	2(%rax), %eax	# _1276->mode, D.23651
	movzbl	%al, %eax	# D.23651, D.23645
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23651
	movzbl	%al, %ecx	# D.23651, D.23645
	movslq	%edx, %rdx	# D.23645, tmp2253
	movq	%rdx, %rax	# tmp2253, tmp2254
	addq	%rax, %rax	# tmp2254
	addq	%rdx, %rax	# tmp2253, tmp2254
	salq	$2, %rax	#, tmp2254
	addq	%rdx, %rax	# tmp2253, tmp2254
	salq	$3, %rax	#, tmp2255
	addq	$rld+32, %rax	#, tmp2256
	movl	%ecx, 4(%rax)	# D.23645, rld[_1275].inc
	.loc 1 3723 0
	movl	-3776(%rbp), %eax	# i, tmp2258
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	cmpl	$2, %eax	#, D.23656
	jne	.L1340	#,
	.loc 1 3725 0
	movl	$0, -3772(%rbp)	#, j
	jmp	.L1341	#
.L1344:
	.loc 1 3727 0
	movl	-3772(%rbp), %eax	# j, tmp2260
	movslq	%eax, %rdx	# tmp2260, tmp2259
	movq	%rdx, %rax	# tmp2259, tmp2261
	addq	%rax, %rax	# tmp2261
	addq	%rdx, %rax	# tmp2259, tmp2261
	salq	$2, %rax	#, tmp2261
	addq	%rdx, %rax	# tmp2259, tmp2261
	salq	$3, %rax	#, tmp2262
	addq	$rld+64, %rax	#, tmp2263
	movl	8(%rax), %eax	# rld[j_30].opnum, D.23645
	cmpl	-3776(%rbp), %eax	# i, D.23645
	jne	.L1342	#,
	.loc 1 3729 0
	movl	-3772(%rbp), %eax	# j, tmp2265
	movslq	%eax, %rdx	# tmp2265, tmp2264
	movq	%rdx, %rax	# tmp2264, tmp2266
	addq	%rax, %rax	# tmp2266
	addq	%rdx, %rax	# tmp2264, tmp2266
	salq	$2, %rax	#, tmp2266
	addq	%rdx, %rax	# tmp2264, tmp2266
	salq	$3, %rax	#, tmp2267
	addq	$rld+80, %rax	#, tmp2268
	movl	12(%rax), %eax	# rld[j_30].when_needed, D.23657
	cmpl	$5, %eax	#, D.23657
	jne	.L1343	#,
	.loc 1 3730 0
	movl	-3772(%rbp), %eax	# j, tmp2270
	movslq	%eax, %rdx	# tmp2270, tmp2269
	movq	%rdx, %rax	# tmp2269, tmp2271
	addq	%rax, %rax	# tmp2271
	addq	%rdx, %rax	# tmp2269, tmp2271
	salq	$2, %rax	#, tmp2271
	addq	%rdx, %rax	# tmp2269, tmp2271
	salq	$3, %rax	#, tmp2272
	addq	$rld+80, %rax	#, tmp2273
	movl	$3, 12(%rax)	#, rld[j_30].when_needed
	jmp	.L1342	#
.L1343:
	.loc 1 3731 0
	movl	-3772(%rbp), %eax	# j, tmp2275
	movslq	%eax, %rdx	# tmp2275, tmp2274
	movq	%rdx, %rax	# tmp2274, tmp2276
	addq	%rax, %rax	# tmp2276
	addq	%rdx, %rax	# tmp2274, tmp2276
	salq	$2, %rax	#, tmp2276
	addq	%rdx, %rax	# tmp2274, tmp2276
	salq	$3, %rax	#, tmp2277
	addq	$rld+80, %rax	#, tmp2278
	movl	12(%rax), %eax	# rld[j_30].when_needed, D.23657
	cmpl	$6, %eax	#, D.23657
	jne	.L1342	#,
	.loc 1 3733 0
	movl	-3772(%rbp), %eax	# j, tmp2280
	movslq	%eax, %rdx	# tmp2280, tmp2279
	movq	%rdx, %rax	# tmp2279, tmp2281
	addq	%rax, %rax	# tmp2281
	addq	%rdx, %rax	# tmp2279, tmp2281
	salq	$2, %rax	#, tmp2281
	addq	%rdx, %rax	# tmp2279, tmp2281
	salq	$3, %rax	#, tmp2282
	addq	$rld+80, %rax	#, tmp2283
	movl	$4, 12(%rax)	#, rld[j_30].when_needed
.L1342:
	.loc 1 3725 0
	addl	$1, -3772(%rbp)	#, j
.L1341:
	.loc 1 3725 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.753
	cmpl	%eax, -3772(%rbp)	# n_reloads.753, j
	jl	.L1344	#,
.L1340:
	.loc 1 3723 0 is_stmt 1 discriminator 1
	jmp	.L1338	#
.L1339:
	.loc 1 3738 0
	movl	-3776(%rbp), %eax	# i, tmp2285
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	cmpl	$-1, %eax	#, D.23645
	jne	.L1345	#,
	.loc 1 3741 0
	movl	-3776(%rbp), %eax	# i, tmp2287
	cltq
	movl	-3248(%rbp,%rax,4), %r10d	# operand_type, D.23657
	cmpl	$0, -3644(%rbp)	#, insn_code_number
	js	.L1346	#,
	.loc 1 3755 0
	movl	-3644(%rbp), %eax	# insn_code_number, tmp2289
	movslq	%eax, %rdx	# tmp2289, tmp2288
	movq	%rdx, %rax	# tmp2288, tmp2290
	salq	$2, %rax	#, tmp2290
	addq	%rdx, %rax	# tmp2288, tmp2290
	salq	$3, %rax	#, tmp2291
	addq	$insn_data+24, %rax	#, tmp2292
	movq	(%rax), %rcx	# insn_data[insn_code_number_289].operand, D.23665
	movl	-3776(%rbp), %eax	# i, tmp2293
	movslq	%eax, %rdx	# tmp2293, D.23654
	movq	%rdx, %rax	# D.23654, tmp2294
	addq	%rax, %rax	# tmp2294
	addq	%rdx, %rax	# D.23654, tmp2294
	salq	$3, %rax	#, tmp2295
	addq	%rcx, %rax	# D.23665, D.23665
	movzbl	18(%rax), %eax	# _1293->strict_low, D.23647
	.loc 1 3741 0
	movsbl	%al, %r8d	# D.23647, iftmp.754
	jmp	.L1347	#
.L1346:
	.loc 1 3741 0 is_stmt 0 discriminator 1
	movl	$0, %r8d	#, iftmp.754
.L1347:
	.loc 1 3752 0 is_stmt 1 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp2297
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 3741 0 discriminator 2
	testl	%eax, %eax	# D.23656
	je	.L1348	#,
	.loc 1 3741 0 is_stmt 0 discriminator 3
	movl	-3776(%rbp), %eax	# i, tmp2299
	cltq
	movl	-2096(%rbp,%rax,4), %edi	# operand_mode, iftmp.755
	jmp	.L1349	#
.L1348:
	.loc 1 3741 0 discriminator 4
	movl	$0, %edi	#, iftmp.755
.L1349:
	.loc 1 3750 0 is_stmt 1 discriminator 5
	movl	-3776(%rbp), %eax	# i, tmp2301
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 3741 0 discriminator 5
	cmpl	$2, %eax	#, D.23656
	je	.L1350	#,
	.loc 1 3741 0 is_stmt 0 discriminator 6
	movl	-3776(%rbp), %eax	# i, tmp2303
	cltq
	movl	-2096(%rbp,%rax,4), %r9d	# operand_mode, iftmp.756
	jmp	.L1351	#
.L1350:
	.loc 1 3741 0 discriminator 7
	movl	$0, %r9d	#, iftmp.756
.L1351:
	.loc 1 3749 0 is_stmt 1 discriminator 8
	movl	-3776(%rbp), %eax	# i, tmp2305
	cltq
	movl	-2608(%rbp,%rax,4), %eax	# goal_alternative, D.23645
	.loc 1 3741 0 discriminator 8
	movl	%eax, %r11d	# D.23645, D.23650
	.loc 1 3747 0 discriminator 8
	movl	-3776(%rbp), %eax	# i, tmp2307
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 3741 0 discriminator 8
	testl	%eax, %eax	# D.23656
	je	.L1352	#,
	.loc 1 3741 0 is_stmt 0 discriminator 9
	movl	-3776(%rbp), %eax	# i, tmp2309
	cltq
	addq	$30, %rax	#, tmp2310
	movq	recog_data(,%rax,8), %rcx	# recog_data.operand_loc, iftmp.757
	jmp	.L1353	#
.L1352:
	.loc 1 3741 0 discriminator 10
	movl	$0, %ecx	#, iftmp.757
.L1353:
	.loc 1 3745 0 is_stmt 1 discriminator 11
	movl	-3776(%rbp), %eax	# i, tmp2312
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 3741 0 discriminator 11
	cmpl	$2, %eax	#, D.23656
	je	.L1354	#,
	.loc 1 3741 0 is_stmt 0 discriminator 12
	movl	-3776(%rbp), %eax	# i, tmp2314
	cltq
	addq	$30, %rax	#, tmp2315
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand_loc, iftmp.758
	jmp	.L1355	#
.L1354:
	.loc 1 3741 0 discriminator 13
	movl	$0, %edx	#, iftmp.758
.L1355:
	.loc 1 3743 0 is_stmt 1 discriminator 14
	movl	-3776(%rbp), %eax	# i, tmp2317
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 3741 0 discriminator 14
	testl	%eax, %eax	# D.23656
	je	.L1356	#,
	.loc 1 3741 0 is_stmt 0 discriminator 15
	movl	-3776(%rbp), %eax	# i, tmp2319
	cltq
	movq	recog_data(,%rax,8), %rsi	# recog_data.operand, iftmp.759
	jmp	.L1357	#
.L1356:
	.loc 1 3741 0 discriminator 16
	movl	$0, %esi	#, iftmp.759
.L1357:
	.loc 1 3741 0 discriminator 17
	movl	-3776(%rbp), %eax	# i, tmp2321
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	cmpl	$2, %eax	#, D.23656
	je	.L1358	#,
	.loc 1 3741 0 discriminator 18
	movl	-3776(%rbp), %eax	# i, tmp2323
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, iftmp.760
	jmp	.L1359	#
.L1358:
	.loc 1 3741 0 discriminator 19
	movl	$0, %eax	#, iftmp.760
.L1359:
	.loc 1 3741 0 discriminator 3
	movl	%r10d, 32(%rsp)	# D.23657,
	movl	-3776(%rbp), %r10d	# i, tmp2324
	movl	%r10d, 24(%rsp)	# tmp2324,
	movl	$0, 16(%rsp)	#,
	movl	%r8d, 8(%rsp)	# iftmp.754,
	movl	%edi, (%rsp)	# iftmp.755,
	movl	%r11d, %r8d	# D.23650,
	movq	%rax, %rdi	# iftmp.760,
	call	push_reload	#
	movl	-3776(%rbp), %edx	# i, tmp2326
	movslq	%edx, %rdx	# tmp2326, tmp2325
	movl	%eax, -2480(%rbp,%rdx,4)	# D.23645, operand_reloadnum
	jmp	.L1363	#
.L1345:
	.loc 1 3761 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp2328
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	testl	%eax, %eax	# D.23656
	jne	.L1360	#,
	.loc 1 3762 0
	movl	-3776(%rbp), %eax	# i, tmp2330
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	cmpl	$2, %eax	#, D.23656
	jne	.L1360	#,
	.loc 1 3771 0
	movl	-3776(%rbp), %eax	# i, tmp2333
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	.loc 1 3765 0
	cltq
	movl	-2096(%rbp,%rax,4), %edi	# operand_mode, D.23652
	movl	-3776(%rbp), %eax	# i, tmp2336
	cltq
	movl	-2096(%rbp,%rax,4), %r9d	# operand_mode, D.23652
	.loc 1 3769 0
	movl	-3776(%rbp), %eax	# i, tmp2338
	cltq
	movl	-2608(%rbp,%rax,4), %eax	# goal_alternative, D.23645
	.loc 1 3765 0
	movl	%eax, %r10d	# D.23645, D.23650
	.loc 1 3768 0
	movl	-3776(%rbp), %eax	# i, tmp2340
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	.loc 1 3765 0
	cltq
	addq	$30, %rax	#, tmp2342
	movq	recog_data(,%rax,8), %rcx	# recog_data.operand_loc, D.23658
	movl	-3776(%rbp), %eax	# i, tmp2344
	cltq
	addq	$30, %rax	#, tmp2345
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand_loc, D.23658
	.loc 1 3766 0
	movl	-3776(%rbp), %eax	# i, tmp2347
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	.loc 1 3765 0
	cltq
	movq	recog_data(,%rax,8), %rsi	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp2350
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	$9, 32(%rsp)	#,
	movl	-3776(%rbp), %r8d	# i, tmp2351
	movl	%r8d, 24(%rsp)	# tmp2351,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	%edi, (%rsp)	# D.23652,
	movl	%r10d, %r8d	# D.23650,
	movq	%rax, %rdi	# D.23648,
	call	push_reload	#
	movl	-3776(%rbp), %edx	# i, tmp2353
	movslq	%edx, %rdx	# tmp2353, tmp2352
	movl	%eax, -2480(%rbp,%rdx,4)	# D.23645, operand_reloadnum
	.loc 1 3773 0
	movl	-3776(%rbp), %eax	# i, tmp2355
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	movl	output_reloadnum(%rip), %edx	# output_reloadnum, output_reloadnum.761
	cltq
	movl	%edx, -2480(%rbp,%rax,4)	# output_reloadnum.761, operand_reloadnum
	jmp	.L1338	#
.L1360:
	.loc 1 3775 0
	movl	-3776(%rbp), %eax	# i, tmp2358
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	cmpl	$2, %eax	#, D.23656
	jne	.L1361	#,
	.loc 1 3776 0
	movl	-3776(%rbp), %eax	# i, tmp2360
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	testl	%eax, %eax	# D.23656
	jne	.L1361	#,
	.loc 1 3778 0
	movl	-3776(%rbp), %eax	# i, tmp2363
	cltq
	movl	-2224(%rbp,%rax,4), %ebx	# goal_alternative_matched, D.23645
	.loc 1 3779 0
	movl	-3776(%rbp), %eax	# i, tmp2365
	cltq
	movl	-2096(%rbp,%rax,4), %edi	# operand_mode, D.23652
	.loc 1 3784 0
	movl	-3776(%rbp), %eax	# i, tmp2367
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	.loc 1 3779 0
	cltq
	movl	-2096(%rbp,%rax,4), %r9d	# operand_mode, D.23652
	.loc 1 3783 0
	movl	-3776(%rbp), %eax	# i, tmp2370
	cltq
	movl	-2608(%rbp,%rax,4), %eax	# goal_alternative, D.23645
	.loc 1 3779 0
	movl	%eax, %r10d	# D.23645, D.23650
	movl	-3776(%rbp), %eax	# i, tmp2372
	cltq
	addq	$30, %rax	#, tmp2373
	movq	recog_data(,%rax,8), %rcx	# recog_data.operand_loc, D.23658
	.loc 1 3781 0
	movl	-3776(%rbp), %eax	# i, tmp2375
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	.loc 1 3779 0
	cltq
	addq	$30, %rax	#, tmp2377
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand_loc, D.23658
	movl	-3776(%rbp), %eax	# i, tmp2379
	cltq
	movq	recog_data(,%rax,8), %rsi	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp2381
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	$9, 32(%rsp)	#,
	movl	-3776(%rbp), %r8d	# i, tmp2383
	movl	%r8d, 24(%rsp)	# tmp2383,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	%edi, (%rsp)	# D.23652,
	movl	%r10d, %r8d	# D.23650,
	movq	%rax, %rdi	# D.23648,
	call	push_reload	#
	movslq	%ebx, %rdx	# D.23645, tmp2384
	movl	%eax, -2480(%rbp,%rdx,4)	# D.23645, operand_reloadnum
	.loc 1 3787 0
	movl	output_reloadnum(%rip), %edx	# output_reloadnum, output_reloadnum.762
	movl	-3776(%rbp), %eax	# i, tmp2386
	cltq
	movl	%edx, -2480(%rbp,%rax,4)	# output_reloadnum.762, operand_reloadnum
	jmp	.L1338	#
.L1361:
	.loc 1 3789 0
	cmpl	$0, -3644(%rbp)	#, insn_code_number
	js	.L1362	#,
	.loc 1 3790 0
	movl	$__FUNCTION__.11908, %edx	#,
	movl	$3790, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1362:
	.loc 1 3793 0
	movq	-3784(%rbp), %rax	# insn, tmp2387
	movl	$.LC5, %esi	#,
	movq	%rax, %rdi	# tmp2387,
	movl	$0, %eax	#,
	call	error_for_asm	#
	.loc 1 3795 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.23648
	movq	%rax, %rdx	# D.23648,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-3784(%rbp), %rdx	# insn, tmp2388
	movq	%rax, 32(%rdx)	# D.23648, insn_243(D)->fld[3].rtx
	.loc 1 3796 0
	movl	$0, n_reloads(%rip)	#, n_reloads
	.loc 1 3797 0
	movl	$0, %eax	#, D.23645
	jmp	.L1495	#
.L1338:
	jmp	.L1363	#
.L1337:
	.loc 1 3800 0
	movl	-3776(%rbp), %eax	# i, tmp2390
	cltq
	movl	-2224(%rbp,%rax,4), %eax	# goal_alternative_matched, D.23645
	testl	%eax, %eax	# D.23645
	jns	.L1364	#,
	.loc 1 3801 0
	movl	-3776(%rbp), %eax	# i, tmp2392
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	testl	%eax, %eax	# D.23645
	jns	.L1364	#,
	.loc 1 3802 0
	movl	optimize(%rip), %eax	# optimize, optimize.763
	testl	%eax, %eax	# optimize.763
	je	.L1364	#,
.LBB41:
	.loc 1 3808 0
	movl	-3776(%rbp), %eax	# i, tmp2394
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, tmp2395
	movq	%rax, -3584(%rbp)	# tmp2395, operand
	.loc 1 3810 0
	jmp	.L1365	#
.L1366:
	.loc 1 3811 0
	movq	-3584(%rbp), %rax	# operand, tmp2396
	movq	8(%rax), %rax	# operand_128->fld[0].rtx, tmp2397
	movq	%rax, -3584(%rbp)	# tmp2397, operand
.L1365:
	.loc 1 3810 0 discriminator 1
	movq	-3584(%rbp), %rax	# operand, tmp2398
	movzwl	(%rax), %eax	# operand_128->code, D.23646
	cmpw	$63, %ax	#, D.23646
	je	.L1366	#,
	.loc 1 3812 0
	movq	-3584(%rbp), %rax	# operand, tmp2399
	movzwl	(%rax), %eax	# operand_128->code, D.23646
	cmpw	$66, %ax	#, D.23646
	je	.L1367	#,
	.loc 1 3813 0
	movq	-3584(%rbp), %rax	# operand, tmp2400
	movzwl	(%rax), %eax	# operand_128->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1368	#,
	.loc 1 3814 0
	movq	-3584(%rbp), %rax	# operand, tmp2401
	movl	8(%rax), %eax	# operand_128->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	jbe	.L1368	#,
.L1367:
	.loc 1 3818 0
	movl	-3776(%rbp), %eax	# i, tmp2403
	cltq
	movl	-2608(%rbp,%rax,4), %eax	# goal_alternative, D.23645
	testl	%eax, %eax	# D.23645
	jne	.L1369	#,
	.loc 1 3819 0
	movl	-3776(%rbp), %eax	# i, tmp2405
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	cmpl	$2, %eax	#, D.23656
	jne	.L1368	#,
.L1369:
	.loc 1 3820 0
	cmpl	$0, -3656(%rbp)	#, no_input_reloads
	jne	.L1368	#,
	.loc 1 3828 0
	movl	-3776(%rbp), %eax	# i, tmp2407
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	testl	%eax, %eax	# D.23656
	je	.L1370	#,
	.loc 1 3829 0
	cmpl	$0, -3768(%rbp)	#, no_output_reloads
	jne	.L1368	#,
	.loc 1 3829 0 is_stmt 0 discriminator 1
	movl	this_insn_is_asm(%rip), %eax	# this_insn_is_asm, this_insn_is_asm.764
	testl	%eax, %eax	# this_insn_is_asm.764
	jne	.L1368	#,
.L1370:
	.loc 1 3831 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp2409
	cltq
	movl	-3248(%rbp,%rax,4), %r10d	# operand_type, D.23657
	cmpl	$0, -3644(%rbp)	#, insn_code_number
	js	.L1371	#,
	.loc 1 3845 0
	movl	-3644(%rbp), %eax	# insn_code_number, tmp2411
	movslq	%eax, %rdx	# tmp2411, tmp2410
	movq	%rdx, %rax	# tmp2410, tmp2412
	salq	$2, %rax	#, tmp2412
	addq	%rdx, %rax	# tmp2410, tmp2412
	salq	$3, %rax	#, tmp2413
	addq	$insn_data+24, %rax	#, tmp2414
	movq	(%rax), %rcx	# insn_data[insn_code_number_289].operand, D.23665
	movl	-3776(%rbp), %eax	# i, tmp2415
	movslq	%eax, %rdx	# tmp2415, D.23654
	movq	%rdx, %rax	# D.23654, tmp2416
	addq	%rax, %rax	# tmp2416
	addq	%rdx, %rax	# D.23654, tmp2416
	salq	$3, %rax	#, tmp2417
	addq	%rcx, %rax	# D.23665, D.23665
	movzbl	18(%rax), %eax	# _1372->strict_low, D.23647
	.loc 1 3831 0
	movsbl	%al, %r8d	# D.23647, iftmp.765
	jmp	.L1372	#
.L1371:
	.loc 1 3831 0 is_stmt 0 discriminator 1
	movl	$0, %r8d	#, iftmp.765
.L1372:
	.loc 1 3842 0 is_stmt 1 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp2419
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 3831 0 discriminator 2
	testl	%eax, %eax	# D.23656
	je	.L1373	#,
	.loc 1 3831 0 is_stmt 0 discriminator 3
	movl	-3776(%rbp), %eax	# i, tmp2421
	cltq
	movl	-2096(%rbp,%rax,4), %edi	# operand_mode, iftmp.766
	jmp	.L1374	#
.L1373:
	.loc 1 3831 0 discriminator 4
	movl	$0, %edi	#, iftmp.766
.L1374:
	.loc 1 3840 0 is_stmt 1 discriminator 5
	movl	-3776(%rbp), %eax	# i, tmp2423
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 3831 0 discriminator 5
	cmpl	$2, %eax	#, D.23656
	je	.L1375	#,
	.loc 1 3831 0 is_stmt 0 discriminator 6
	movl	-3776(%rbp), %eax	# i, tmp2425
	cltq
	movl	-2096(%rbp,%rax,4), %r9d	# operand_mode, iftmp.767
	jmp	.L1376	#
.L1375:
	.loc 1 3831 0 discriminator 7
	movl	$0, %r9d	#, iftmp.767
.L1376:
	.loc 1 3839 0 is_stmt 1 discriminator 8
	movl	-3776(%rbp), %eax	# i, tmp2427
	cltq
	movl	-2608(%rbp,%rax,4), %eax	# goal_alternative, D.23645
	.loc 1 3831 0 discriminator 8
	movl	%eax, %r11d	# D.23645, D.23650
	.loc 1 3837 0 discriminator 8
	movl	-3776(%rbp), %eax	# i, tmp2429
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 3831 0 discriminator 8
	testl	%eax, %eax	# D.23656
	je	.L1377	#,
	.loc 1 3831 0 is_stmt 0 discriminator 9
	movl	-3776(%rbp), %eax	# i, tmp2431
	cltq
	addq	$30, %rax	#, tmp2432
	movq	recog_data(,%rax,8), %rcx	# recog_data.operand_loc, iftmp.768
	jmp	.L1378	#
.L1377:
	.loc 1 3831 0 discriminator 10
	movl	$0, %ecx	#, iftmp.768
.L1378:
	.loc 1 3835 0 is_stmt 1 discriminator 11
	movl	-3776(%rbp), %eax	# i, tmp2434
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 3831 0 discriminator 11
	cmpl	$2, %eax	#, D.23656
	je	.L1379	#,
	.loc 1 3831 0 is_stmt 0 discriminator 12
	movl	-3776(%rbp), %eax	# i, tmp2436
	cltq
	addq	$30, %rax	#, tmp2437
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand_loc, iftmp.769
	jmp	.L1380	#
.L1379:
	.loc 1 3831 0 discriminator 13
	movl	$0, %edx	#, iftmp.769
.L1380:
	.loc 1 3833 0 is_stmt 1 discriminator 14
	movl	-3776(%rbp), %eax	# i, tmp2439
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	.loc 1 3831 0 discriminator 14
	testl	%eax, %eax	# D.23656
	je	.L1381	#,
	.loc 1 3831 0 is_stmt 0 discriminator 15
	movl	-3776(%rbp), %eax	# i, tmp2441
	cltq
	movq	recog_data(,%rax,8), %rsi	# recog_data.operand, iftmp.770
	jmp	.L1382	#
.L1381:
	.loc 1 3831 0 discriminator 16
	movl	$0, %esi	#, iftmp.770
.L1382:
	.loc 1 3831 0 discriminator 17
	movl	-3776(%rbp), %eax	# i, tmp2443
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	cmpl	$2, %eax	#, D.23656
	je	.L1383	#,
	.loc 1 3831 0 discriminator 18
	movl	-3776(%rbp), %eax	# i, tmp2445
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, iftmp.771
	jmp	.L1384	#
.L1383:
	.loc 1 3831 0 discriminator 19
	movl	$0, %eax	#, iftmp.771
.L1384:
	.loc 1 3831 0 discriminator 20
	movl	%r10d, 32(%rsp)	# D.23657,
	movl	-3776(%rbp), %r10d	# i, tmp2446
	movl	%r10d, 24(%rsp)	# tmp2446,
	movl	$1, 16(%rsp)	#,
	movl	%r8d, 8(%rsp)	# iftmp.765,
	movl	%edi, (%rsp)	# iftmp.766,
	movl	%r11d, %r8d	# D.23650,
	movq	%rax, %rdi	# iftmp.771,
	call	push_reload	#
	movl	-3776(%rbp), %edx	# i, tmp2448
	movslq	%edx, %rdx	# tmp2448, tmp2447
	movl	%eax, -2480(%rbp,%rdx,4)	# D.23645, operand_reloadnum
	jmp	.L1385	#
.L1368:
	.loc 1 3852 0 is_stmt 1
	cmpl	$0, -3788(%rbp)	#, replace
	je	.L1385	#,
	.loc 1 3853 0
	movq	-3584(%rbp), %rax	# operand, tmp2449
	movzwl	(%rax), %eax	# operand_128->code, D.23646
	cmpw	$66, %ax	#, D.23646
	je	.L1386	#,
	.loc 1 3854 0
	movq	-3584(%rbp), %rax	# operand, tmp2450
	movzwl	(%rax), %eax	# operand_128->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1385	#,
	.loc 1 3855 0
	movq	-3584(%rbp), %rax	# operand, tmp2451
	movl	8(%rax), %eax	# operand_128->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	jbe	.L1385	#,
	.loc 1 3856 0
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.772
	movq	-3584(%rbp), %rax	# operand, tmp2452
	movl	8(%rax), %eax	# operand_128->fld[0].rtuint, D.23649
	movl	%eax, %eax	# D.23649, D.23654
	addq	%rax, %rax	# D.23654
	addq	%rdx, %rax	# reg_renumber.772, D.23661
	movzwl	(%rax), %eax	# *_1404, D.23662
	testw	%ax, %ax	# D.23662
	jns	.L1385	#,
.L1386:
	.loc 1 3858 0
	movl	-3776(%rbp), %eax	# i, tmp2454
	cltq
	addq	$30, %rax	#, tmp2455
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	movq	(%rax), %rax	# *_1406, tmp2456
	movq	%rax, -3584(%rbp)	# tmp2456, operand
	.loc 1 3860 0
	jmp	.L1387	#
.L1388:
	.loc 1 3861 0
	movq	-3584(%rbp), %rax	# operand, tmp2457
	movq	8(%rax), %rax	# operand_129->fld[0].rtx, tmp2458
	movq	%rax, -3584(%rbp)	# tmp2458, operand
.L1387:
	.loc 1 3860 0 discriminator 1
	movq	-3584(%rbp), %rax	# operand, tmp2459
	movzwl	(%rax), %eax	# operand_129->code, D.23646
	cmpw	$63, %ax	#, D.23646
	je	.L1388	#,
	.loc 1 3862 0
	movq	-3584(%rbp), %rax	# operand, tmp2460
	movzwl	(%rax), %eax	# operand_129->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1385	#,
	.loc 1 3864 0
	movl	-3776(%rbp), %eax	# i, tmp2462
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	cmpl	$2, %eax	#, D.23656
	je	.L1389	#,
	.loc 1 3868 0
	movq	-3584(%rbp), %rax	# operand, tmp2463
	movq	%rax, %rdx	# tmp2463,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-3784(%rbp), %rdx	# insn, tmp2464
	movq	%rdx, %rsi	# tmp2464,
	movq	%rax, %rdi	# D.23648,
	call	emit_insn_before	#
	movb	$2, 2(%rax)	#, _1413->mode
.L1389:
	.loc 1 3870 0
	movl	-3776(%rbp), %eax	# i, tmp2466
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	testl	%eax, %eax	# D.23656
	je	.L1385	#,
	.loc 1 3871 0
	movq	-3584(%rbp), %rax	# operand, tmp2467
	movq	%rax, %rdx	# tmp2467,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-3784(%rbp), %rdx	# insn, tmp2468
	movq	%rdx, %rsi	# tmp2468,
	movq	%rax, %rdi	# D.23648,
	call	emit_insn_after	#
.LBE41:
	.loc 1 3803 0
	jmp	.L1363	#
.L1385:
	jmp	.L1363	#
.L1364:
	.loc 1 3875 0
	movl	-3776(%rbp), %eax	# i, tmp2470
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	testl	%eax, %eax	# D.23645
	js	.L1363	#,
	.loc 1 3876 0
	movl	-3776(%rbp), %eax	# i, tmp2472
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	cltq
	movzbl	-128(%rbp,%rax), %eax	# goal_alternative_win, D.23647
	testb	%al, %al	# D.23647
	je	.L1363	#,
	.loc 1 3877 0
	movl	-3776(%rbp), %eax	# i, tmp2475
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	testl	%eax, %eax	# D.23656
	jne	.L1363	#,
	.loc 1 3878 0
	movl	-3776(%rbp), %eax	# i, tmp2477
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	cltq
	movl	-2992(%rbp,%rax,4), %eax	# modified, D.23656
	cmpl	$2, %eax	#, D.23656
	jne	.L1363	#,
	.loc 1 3879 0
	cmpl	$0, -3656(%rbp)	#, no_input_reloads
	jne	.L1363	#,
	.loc 1 3879 0 is_stmt 0 discriminator 1
	cmpl	$0, -3768(%rbp)	#, no_output_reloads
	jne	.L1363	#,
	.loc 1 3880 0 is_stmt 1
	movl	optimize(%rip), %eax	# optimize, optimize.773
	testl	%eax, %eax	# optimize.773
	je	.L1363	#,
.LBB42:
	.loc 1 3885 0
	movl	-3776(%rbp), %eax	# i, tmp2480
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, tmp2481
	movq	%rax, -3576(%rbp)	# tmp2481, operand
	.loc 1 3887 0
	jmp	.L1390	#
.L1391:
	.loc 1 3888 0
	movq	-3576(%rbp), %rax	# operand, tmp2482
	movq	8(%rax), %rax	# operand_130->fld[0].rtx, tmp2483
	movq	%rax, -3576(%rbp)	# tmp2483, operand
.L1390:
	.loc 1 3887 0 discriminator 1
	movq	-3576(%rbp), %rax	# operand, tmp2484
	movzwl	(%rax), %eax	# operand_130->code, D.23646
	cmpw	$63, %ax	#, D.23646
	je	.L1391	#,
	.loc 1 3889 0
	movq	-3576(%rbp), %rax	# operand, tmp2485
	movzwl	(%rax), %eax	# operand_130->code, D.23646
	cmpw	$66, %ax	#, D.23646
	je	.L1392	#,
	.loc 1 3890 0
	movq	-3576(%rbp), %rax	# operand, tmp2486
	movzwl	(%rax), %eax	# operand_130->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1363	#,
	.loc 1 3891 0
	movq	-3576(%rbp), %rax	# operand, tmp2487
	movl	8(%rax), %eax	# operand_130->fld[0].rtuint, D.23649
	cmpl	$52, %eax	#, D.23649
	jbe	.L1363	#,
.L1392:
	.loc 1 3892 0
	movl	-3776(%rbp), %eax	# i, tmp2489
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	cltq
	movl	-2608(%rbp,%rax,4), %eax	# goal_alternative, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1363	#,
	.loc 1 3894 0
	movl	-3776(%rbp), %eax	# i, tmp2492
	cltq
	movl	-2352(%rbp,%rax,4), %ebx	# goal_alternative_matches, D.23645
	.loc 1 3895 0
	movl	-3776(%rbp), %eax	# i, tmp2494
	cltq
	movl	-2352(%rbp,%rax,4), %r8d	# goal_alternative_matches, D.23645
	movl	-3776(%rbp), %eax	# i, tmp2496
	cltq
	movl	-2096(%rbp,%rax,4), %edi	# operand_mode, D.23652
	.loc 1 3900 0
	movl	-3776(%rbp), %eax	# i, tmp2498
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	.loc 1 3895 0
	cltq
	movl	-2096(%rbp,%rax,4), %r9d	# operand_mode, D.23652
	.loc 1 3899 0
	movl	-3776(%rbp), %eax	# i, tmp2501
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	cltq
	movl	-2608(%rbp,%rax,4), %eax	# goal_alternative, D.23645
	.loc 1 3895 0
	movl	%eax, %r10d	# D.23645, D.23650
	movl	-3776(%rbp), %eax	# i, tmp2504
	cltq
	addq	$30, %rax	#, tmp2505
	movq	recog_data(,%rax,8), %rcx	# recog_data.operand_loc, D.23658
	.loc 1 3897 0
	movl	-3776(%rbp), %eax	# i, tmp2507
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	.loc 1 3895 0
	cltq
	addq	$30, %rax	#, tmp2509
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand_loc, D.23658
	movl	-3776(%rbp), %eax	# i, tmp2511
	cltq
	movq	recog_data(,%rax,8), %rsi	# recog_data.operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp2513
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23648
	movl	$9, 32(%rsp)	#,
	movl	%r8d, 24(%rsp)	# D.23645,
	movl	$1, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	%edi, (%rsp)	# D.23652,
	movl	%r10d, %r8d	# D.23650,
	movq	%rax, %rdi	# D.23648,
	call	push_reload	#
	movslq	%ebx, %rdx	# D.23645, tmp2515
	movl	%eax, -2480(%rbp,%rdx,4)	# D.23645, operand_reloadnum
	.loc 1 3894 0
	movslq	%ebx, %rax	# D.23645, tmp2516
	movl	-2480(%rbp,%rax,4), %edx	# operand_reloadnum, D.23645
	movl	-3776(%rbp), %eax	# i, tmp2518
	cltq
	movl	%edx, -2480(%rbp,%rax,4)	# D.23645, operand_reloadnum
.L1363:
.LBE42:
	.loc 1 3692 0
	addl	$1, -3776(%rbp)	#, i
.L1336:
	.loc 1 3692 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2519
	cmpl	-3652(%rbp), %eax	# noperands, tmp2519
	jl	.L1393	#,
	.loc 1 3909 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1394	#
.L1398:
	.loc 1 3916 0
	cmpl	$0, -3788(%rbp)	#, replace
	je	.L1395	#,
.LBB43:
	.loc 1 3918 0
	movl	-3776(%rbp), %eax	# i, tmp2521
	cltq
	movq	-1472(%rbp,%rax,8), %rax	# substed_operand, tmp2522
	movq	%rax, -3520(%rbp)	# tmp2522, substitution
	.loc 1 3920 0
	movl	-3776(%rbp), %eax	# i, tmp2524
	cltq
	addq	$30, %rax	#, tmp2525
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	movq	-3520(%rbp), %rdx	# substitution, tmp2526
	movq	%rdx, (%rax)	# tmp2526, *_1450
	.loc 1 3925 0
	movq	-3784(%rbp), %rax	# insn, tmp2527
	movzwl	(%rax), %eax	# insn_243(D)->code, D.23646
	cmpw	$33, %ax	#, D.23646
	je	.L1396	#,
	.loc 1 3926 0
	movq	-3520(%rbp), %rax	# substitution, tmp2528
	movzwl	(%rax), %eax	# substitution_1449->code, D.23646
	cmpw	$67, %ax	#, D.23646
	jne	.L1396	#,
	.loc 1 3927 0
	movq	-3520(%rbp), %rax	# substitution, tmp2529
	movq	8(%rax), %rdx	# substitution_1449->fld[0].rtx, D.23648
	movq	-3784(%rbp), %rax	# insn, tmp2530
	movl	$13, %esi	#,
	movq	%rax, %rdi	# tmp2530,
	call	find_reg_note	#
	testq	%rax, %rax	# D.23648
	jne	.L1396	#,
	.loc 1 3928 0
	movq	-3784(%rbp), %rax	# insn, tmp2531
	movq	56(%rax), %rdx	# insn_243(D)->fld[6].rtx, D.23648
	movq	-3520(%rbp), %rax	# substitution, tmp2532
	movq	8(%rax), %rax	# substitution_1449->fld[0].rtx, D.23648
	movq	%rdx, %rcx	# D.23648,
	movq	%rax, %rdx	# D.23648,
	movl	$13, %esi	#,
	movl	$4, %edi	#,
	call	gen_rtx_fmt_ue	#
	movq	-3784(%rbp), %rdx	# insn, tmp2533
	movq	%rax, 56(%rdx)	# D.23648, insn_243(D)->fld[6].rtx
.LBE43:
	jmp	.L1397	#
.L1396:
	jmp	.L1397	#
.L1395:
	.loc 1 3933 0
	movl	-3776(%rbp), %eax	# i, tmp2535
	cltq
	movq	-1472(%rbp,%rax,8), %rdx	# substed_operand, D.23648
	movl	-3776(%rbp), %eax	# i, tmp2537
	cltq
	addq	$30, %rax	#, tmp2538
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.23658
	movq	(%rax), %rax	# *_1459, D.23648
	cmpq	%rax, %rdx	# D.23648, D.23648
	setne	%al	#, D.23653
	movzbl	%al, %eax	# D.23653, D.23645
	orl	%eax, -3732(%rbp)	# D.23645, retval
.L1397:
	.loc 1 3909 0
	addl	$1, -3776(%rbp)	#, i
.L1394:
	.loc 1 3909 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2539
	cmpl	-3652(%rbp), %eax	# noperands, tmp2539
	jl	.L1398	#,
	.loc 1 3944 0 is_stmt 1
	cmpl	$0, -3644(%rbp)	#, insn_code_number
	js	.L1399	#,
	.loc 1 3944 0 is_stmt 0 discriminator 1
	cmpl	$0, -3788(%rbp)	#, replace
	je	.L1399	#,
	.loc 1 3945 0 is_stmt 1
	movl	-3644(%rbp), %eax	# insn_code_number, tmp2541
	movslq	%eax, %rdx	# tmp2541, tmp2540
	movq	%rdx, %rax	# tmp2540, tmp2542
	salq	$2, %rax	#, tmp2542
	addq	%rdx, %rax	# tmp2540, tmp2542
	salq	$3, %rax	#, tmp2543
	addq	$insn_data+32, %rax	#, tmp2544
	movzbl	1(%rax), %eax	# insn_data[insn_code_number_289].n_dups, D.23647
	movsbl	%al, %eax	# D.23647, D.23645
	subl	$1, %eax	#, tmp2545
	movl	%eax, -3776(%rbp)	# tmp2545, i
	jmp	.L1400	#
.L1402:
.LBB44:
	.loc 1 3947 0
	movl	-3776(%rbp), %eax	# i, tmp2547
	cltq
	movzbl	recog_data+992(%rax), %eax	# recog_data.dup_num, D.23647
	movsbl	%al, %eax	# D.23647, tmp2548
	movl	%eax, -3608(%rbp)	# tmp2548, opno
	.loc 1 3948 0
	movl	-3776(%rbp), %eax	# i, tmp2550
	cltq
	addq	$120, %rax	#, tmp2551
	movq	recog_data(,%rax,8), %rax	# recog_data.dup_loc, D.23658
	movl	-3608(%rbp), %edx	# opno, tmp2553
	movslq	%edx, %rdx	# tmp2553, tmp2552
	addq	$30, %rdx	#, tmp2554
	movq	recog_data(,%rdx,8), %rdx	# recog_data.operand_loc, D.23658
	movq	(%rdx), %rdx	# *_1471, D.23648
	movq	%rdx, (%rax)	# D.23648, *_1470
	.loc 1 3949 0
	movl	-3608(%rbp), %eax	# opno, tmp2556
	cltq
	movl	-2480(%rbp,%rax,4), %eax	# operand_reloadnum, D.23645
	testl	%eax, %eax	# D.23645
	js	.L1401	#,
	.loc 1 3951 0
	movl	-3644(%rbp), %eax	# insn_code_number, tmp2558
	movslq	%eax, %rdx	# tmp2558, tmp2557
	movq	%rdx, %rax	# tmp2557, tmp2559
	salq	$2, %rax	#, tmp2559
	addq	%rdx, %rax	# tmp2557, tmp2559
	salq	$3, %rax	#, tmp2560
	addq	$insn_data+24, %rax	#, tmp2561
	movq	(%rax), %rcx	# insn_data[insn_code_number_289].operand, D.23665
	movl	-3608(%rbp), %eax	# opno, tmp2562
	movslq	%eax, %rdx	# tmp2562, D.23654
	movq	%rdx, %rax	# D.23654, tmp2563
	addq	%rax, %rax	# tmp2563
	addq	%rdx, %rax	# D.23654, tmp2563
	salq	$3, %rax	#, tmp2564
	addq	%rcx, %rax	# D.23665, D.23665
	movzwl	16(%rax), %eax	# _1477->mode, D.23646
	.loc 1 3950 0
	movzwl	%ax, %edx	# D.23646, D.23652
	movl	-3608(%rbp), %eax	# opno, tmp2566
	cltq
	movl	-2480(%rbp,%rax,4), %ecx	# operand_reloadnum, D.23645
	movl	-3776(%rbp), %eax	# i, tmp2568
	cltq
	addq	$120, %rax	#, tmp2569
	movq	recog_data(,%rax,8), %rax	# recog_data.dup_loc, D.23658
	movl	%ecx, %esi	# D.23645,
	movq	%rax, %rdi	# D.23658,
	call	push_replacement	#
.L1401:
.LBE44:
	.loc 1 3945 0
	subl	$1, -3776(%rbp)	#, i
.L1400:
	.loc 1 3945 0 is_stmt 0 discriminator 1
	cmpl	$0, -3776(%rbp)	#, i
	jns	.L1402	#,
.L1399:
	.loc 1 3982 0 is_stmt 1
	cmpl	$0, -3740(%rbp)	#, goal_earlyclobber
	jne	.L1403	#,
	.loc 1 3983 0
	call	combine_reloads	#
.L1403:
	.loc 1 3990 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1404	#
.L1419:
.LBB45:
	.loc 1 3994 0
	movl	-3776(%rbp), %eax	# i, tmp2573
	addl	$1, %eax	#, tmp2572
	movl	%eax, -3772(%rbp)	# tmp2572, j
	jmp	.L1405	#
.L1418:
	.loc 1 3995 0
	movl	-3776(%rbp), %eax	# i, tmp2575
	movslq	%eax, %rdx	# tmp2575, tmp2574
	movq	%rdx, %rax	# tmp2574, tmp2576
	addq	%rax, %rax	# tmp2576
	addq	%rdx, %rax	# tmp2574, tmp2576
	salq	$2, %rax	#, tmp2576
	addq	%rdx, %rax	# tmp2574, tmp2576
	salq	$3, %rax	#, tmp2577
	addq	$rld+80, %rax	#, tmp2578
	movl	12(%rax), %eax	# rld[i_19].when_needed, D.23657
	cmpl	$3, %eax	#, D.23657
	je	.L1406	#,
	.loc 1 3996 0
	movl	-3776(%rbp), %eax	# i, tmp2580
	movslq	%eax, %rdx	# tmp2580, tmp2579
	movq	%rdx, %rax	# tmp2579, tmp2581
	addq	%rax, %rax	# tmp2581
	addq	%rdx, %rax	# tmp2579, tmp2581
	salq	$2, %rax	#, tmp2581
	addq	%rdx, %rax	# tmp2579, tmp2581
	salq	$3, %rax	#, tmp2582
	addq	$rld+80, %rax	#, tmp2583
	movl	12(%rax), %eax	# rld[i_19].when_needed, D.23657
	cmpl	$5, %eax	#, D.23657
	je	.L1406	#,
	.loc 1 3997 0
	movl	-3776(%rbp), %eax	# i, tmp2585
	movslq	%eax, %rdx	# tmp2585, tmp2584
	movq	%rdx, %rax	# tmp2584, tmp2586
	addq	%rax, %rax	# tmp2586
	addq	%rdx, %rax	# tmp2584, tmp2586
	salq	$2, %rax	#, tmp2586
	addq	%rdx, %rax	# tmp2584, tmp2586
	salq	$3, %rax	#, tmp2587
	addq	$rld+80, %rax	#, tmp2588
	movl	12(%rax), %eax	# rld[i_19].when_needed, D.23657
	cmpl	$4, %eax	#, D.23657
	je	.L1406	#,
	.loc 1 3998 0
	movl	-3776(%rbp), %eax	# i, tmp2590
	movslq	%eax, %rdx	# tmp2590, tmp2589
	movq	%rdx, %rax	# tmp2589, tmp2591
	addq	%rax, %rax	# tmp2591
	addq	%rdx, %rax	# tmp2589, tmp2591
	salq	$2, %rax	#, tmp2591
	addq	%rdx, %rax	# tmp2589, tmp2591
	salq	$3, %rax	#, tmp2592
	addq	$rld+80, %rax	#, tmp2593
	movl	12(%rax), %eax	# rld[i_19].when_needed, D.23657
	cmpl	$6, %eax	#, D.23657
	jne	.L1407	#,
.L1406:
	.loc 1 3999 0
	movl	-3772(%rbp), %eax	# j, tmp2595
	movslq	%eax, %rdx	# tmp2595, tmp2594
	movq	%rdx, %rax	# tmp2594, tmp2596
	addq	%rax, %rax	# tmp2596
	addq	%rdx, %rax	# tmp2594, tmp2596
	salq	$2, %rax	#, tmp2596
	addq	%rdx, %rax	# tmp2594, tmp2596
	salq	$3, %rax	#, tmp2597
	addq	$rld+80, %rax	#, tmp2598
	movl	12(%rax), %eax	# rld[j_31].when_needed, D.23657
	cmpl	$3, %eax	#, D.23657
	je	.L1408	#,
	.loc 1 4000 0
	movl	-3772(%rbp), %eax	# j, tmp2600
	movslq	%eax, %rdx	# tmp2600, tmp2599
	movq	%rdx, %rax	# tmp2599, tmp2601
	addq	%rax, %rax	# tmp2601
	addq	%rdx, %rax	# tmp2599, tmp2601
	salq	$2, %rax	#, tmp2601
	addq	%rdx, %rax	# tmp2599, tmp2601
	salq	$3, %rax	#, tmp2602
	addq	$rld+80, %rax	#, tmp2603
	movl	12(%rax), %eax	# rld[j_31].when_needed, D.23657
	cmpl	$5, %eax	#, D.23657
	je	.L1408	#,
	.loc 1 4001 0
	movl	-3772(%rbp), %eax	# j, tmp2605
	movslq	%eax, %rdx	# tmp2605, tmp2604
	movq	%rdx, %rax	# tmp2604, tmp2606
	addq	%rax, %rax	# tmp2606
	addq	%rdx, %rax	# tmp2604, tmp2606
	salq	$2, %rax	#, tmp2606
	addq	%rdx, %rax	# tmp2604, tmp2606
	salq	$3, %rax	#, tmp2607
	addq	$rld+80, %rax	#, tmp2608
	movl	12(%rax), %eax	# rld[j_31].when_needed, D.23657
	cmpl	$4, %eax	#, D.23657
	je	.L1408	#,
	.loc 1 4002 0
	movl	-3772(%rbp), %eax	# j, tmp2610
	movslq	%eax, %rdx	# tmp2610, tmp2609
	movq	%rdx, %rax	# tmp2609, tmp2611
	addq	%rax, %rax	# tmp2611
	addq	%rdx, %rax	# tmp2609, tmp2611
	salq	$2, %rax	#, tmp2611
	addq	%rdx, %rax	# tmp2609, tmp2611
	salq	$3, %rax	#, tmp2612
	addq	$rld+80, %rax	#, tmp2613
	movl	12(%rax), %eax	# rld[j_31].when_needed, D.23657
	cmpl	$6, %eax	#, D.23657
	jne	.L1407	#,
.L1408:
	.loc 1 4003 0
	movl	-3772(%rbp), %eax	# j, tmp2615
	movslq	%eax, %rdx	# tmp2615, tmp2614
	movq	%rdx, %rax	# tmp2614, tmp2616
	addq	%rax, %rax	# tmp2616
	addq	%rdx, %rax	# tmp2614, tmp2616
	salq	$2, %rax	#, tmp2616
	addq	%rdx, %rax	# tmp2614, tmp2616
	salq	$3, %rax	#, tmp2617
	addq	$rld, %rax	#, tmp2618
	movq	(%rax), %rcx	# rld[j_31].in, D.23648
	movl	-3776(%rbp), %eax	# i, tmp2620
	movslq	%eax, %rdx	# tmp2620, tmp2619
	movq	%rdx, %rax	# tmp2619, tmp2621
	addq	%rax, %rax	# tmp2621
	addq	%rdx, %rax	# tmp2619, tmp2621
	salq	$2, %rax	#, tmp2621
	addq	%rdx, %rax	# tmp2619, tmp2621
	salq	$3, %rax	#, tmp2622
	addq	$rld, %rax	#, tmp2623
	movq	(%rax), %rax	# rld[i_19].in, D.23648
	movq	%rcx, %rsi	# D.23648,
	movq	%rax, %rdi	# D.23648,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23645
	je	.L1407	#,
	.loc 1 4004 0
	movl	-3776(%rbp), %eax	# i, tmp2625
	movslq	%eax, %rdx	# tmp2625, tmp2624
	movq	%rdx, %rax	# tmp2624, tmp2626
	addq	%rax, %rax	# tmp2626
	addq	%rdx, %rax	# tmp2624, tmp2626
	salq	$2, %rax	#, tmp2626
	addq	%rdx, %rax	# tmp2624, tmp2626
	salq	$3, %rax	#, tmp2627
	addq	$rld+64, %rax	#, tmp2628
	movl	8(%rax), %eax	# rld[i_19].opnum, D.23645
	cltq
	movl	-2480(%rbp,%rax,4), %eax	# operand_reloadnum, D.23645
	testl	%eax, %eax	# D.23645
	js	.L1409	#,
	.loc 1 4005 0
	movl	-3776(%rbp), %eax	# i, tmp2631
	movslq	%eax, %rdx	# tmp2631, tmp2630
	movq	%rdx, %rax	# tmp2630, tmp2632
	addq	%rax, %rax	# tmp2632
	addq	%rdx, %rax	# tmp2630, tmp2632
	salq	$2, %rax	#, tmp2632
	addq	%rdx, %rax	# tmp2630, tmp2632
	salq	$3, %rax	#, tmp2633
	addq	$rld+64, %rax	#, tmp2634
	movl	8(%rax), %eax	# rld[i_19].opnum, D.23645
	cltq
	movl	-2480(%rbp,%rax,4), %eax	# operand_reloadnum, D.23645
	movslq	%eax, %rdx	# D.23645, tmp2636
	movq	%rdx, %rax	# tmp2636, tmp2637
	addq	%rax, %rax	# tmp2637
	addq	%rdx, %rax	# tmp2636, tmp2637
	salq	$2, %rax	#, tmp2637
	addq	%rdx, %rax	# tmp2636, tmp2637
	salq	$3, %rax	#, tmp2638
	addq	$rld+96, %rax	#, tmp2639
	movzbl	(%rax), %eax	#, tmp2642
	andl	$1, %eax	#, D.23666
	testb	%al, %al	# D.23666
	je	.L1407	#,
.L1409:
	.loc 1 4006 0
	movl	-3772(%rbp), %eax	# j, tmp2644
	movslq	%eax, %rdx	# tmp2644, tmp2643
	movq	%rdx, %rax	# tmp2643, tmp2645
	addq	%rax, %rax	# tmp2645
	addq	%rdx, %rax	# tmp2643, tmp2645
	salq	$2, %rax	#, tmp2645
	addq	%rdx, %rax	# tmp2643, tmp2645
	salq	$3, %rax	#, tmp2646
	addq	$rld+64, %rax	#, tmp2647
	movl	8(%rax), %eax	# rld[j_31].opnum, D.23645
	cltq
	movl	-2480(%rbp,%rax,4), %eax	# operand_reloadnum, D.23645
	testl	%eax, %eax	# D.23645
	js	.L1410	#,
	.loc 1 4007 0
	movl	-3772(%rbp), %eax	# j, tmp2650
	movslq	%eax, %rdx	# tmp2650, tmp2649
	movq	%rdx, %rax	# tmp2649, tmp2651
	addq	%rax, %rax	# tmp2651
	addq	%rdx, %rax	# tmp2649, tmp2651
	salq	$2, %rax	#, tmp2651
	addq	%rdx, %rax	# tmp2649, tmp2651
	salq	$3, %rax	#, tmp2652
	addq	$rld+64, %rax	#, tmp2653
	movl	8(%rax), %eax	# rld[j_31].opnum, D.23645
	cltq
	movl	-2480(%rbp,%rax,4), %eax	# operand_reloadnum, D.23645
	movslq	%eax, %rdx	# D.23645, tmp2655
	movq	%rdx, %rax	# tmp2655, tmp2656
	addq	%rax, %rax	# tmp2656
	addq	%rdx, %rax	# tmp2655, tmp2656
	salq	$2, %rax	#, tmp2656
	addq	%rdx, %rax	# tmp2655, tmp2656
	salq	$3, %rax	#, tmp2657
	addq	$rld+96, %rax	#, tmp2658
	movzbl	(%rax), %eax	#, tmp2661
	andl	$1, %eax	#, D.23666
	testb	%al, %al	# D.23666
	je	.L1407	#,
.L1410:
	.loc 1 4008 0
	movl	-3776(%rbp), %eax	# i, tmp2663
	movslq	%eax, %rdx	# tmp2663, tmp2662
	movq	%rdx, %rax	# tmp2662, tmp2664
	addq	%rax, %rax	# tmp2664
	addq	%rdx, %rax	# tmp2662, tmp2664
	salq	$2, %rax	#, tmp2664
	addq	%rdx, %rax	# tmp2662, tmp2664
	salq	$3, %rax	#, tmp2665
	addq	$rld+64, %rax	#, tmp2666
	movl	8(%rax), %eax	# rld[i_19].opnum, D.23645
	cltq
	movl	-2352(%rbp,%rax,4), %ecx	# goal_alternative_matches, D.23645
	movl	-3772(%rbp), %eax	# j, tmp2669
	movslq	%eax, %rdx	# tmp2669, tmp2668
	movq	%rdx, %rax	# tmp2668, tmp2670
	addq	%rax, %rax	# tmp2670
	addq	%rdx, %rax	# tmp2668, tmp2670
	salq	$2, %rax	#, tmp2670
	addq	%rdx, %rax	# tmp2668, tmp2670
	salq	$3, %rax	#, tmp2671
	addq	$rld+64, %rax	#, tmp2672
	movl	8(%rax), %eax	# rld[j_31].opnum, D.23645
	cmpl	%eax, %ecx	# D.23645, D.23645
	je	.L1411	#,
	.loc 1 4009 0
	movl	-3772(%rbp), %eax	# j, tmp2674
	movslq	%eax, %rdx	# tmp2674, tmp2673
	movq	%rdx, %rax	# tmp2673, tmp2675
	addq	%rax, %rax	# tmp2675
	addq	%rdx, %rax	# tmp2673, tmp2675
	salq	$2, %rax	#, tmp2675
	addq	%rdx, %rax	# tmp2673, tmp2675
	salq	$3, %rax	#, tmp2676
	addq	$rld+64, %rax	#, tmp2677
	movl	8(%rax), %eax	# rld[j_31].opnum, D.23645
	cltq
	movl	-2352(%rbp,%rax,4), %ecx	# goal_alternative_matches, D.23645
	.loc 1 4010 0
	movl	-3776(%rbp), %eax	# i, tmp2680
	movslq	%eax, %rdx	# tmp2680, tmp2679
	movq	%rdx, %rax	# tmp2679, tmp2681
	addq	%rax, %rax	# tmp2681
	addq	%rdx, %rax	# tmp2679, tmp2681
	salq	$2, %rax	#, tmp2681
	addq	%rdx, %rax	# tmp2679, tmp2681
	salq	$3, %rax	#, tmp2682
	addq	$rld+64, %rax	#, tmp2683
	movl	8(%rax), %eax	# rld[i_19].opnum, D.23645
	.loc 1 4009 0
	cmpl	%eax, %ecx	# D.23645, D.23645
	jne	.L1407	#,
.L1411:
	.loc 1 4012 0
	movl	$0, -3676(%rbp)	#, k
	jmp	.L1412	#
.L1414:
	.loc 1 4013 0
	movl	-3676(%rbp), %eax	# k, tmp2685
	movslq	%eax, %rdx	# tmp2685, tmp2684
	movq	%rdx, %rax	# tmp2684, tmp2686
	addq	%rax, %rax	# tmp2686
	addq	%rdx, %rax	# tmp2684, tmp2686
	salq	$3, %rax	#, tmp2687
	addq	$replacements+16, %rax	#, tmp2688
	movl	(%rax), %eax	# replacements[k_131].what, D.23645
	cmpl	-3772(%rbp), %eax	# j, D.23645
	jne	.L1413	#,
	.loc 1 4014 0
	movl	-3676(%rbp), %eax	# k, tmp2690
	movslq	%eax, %rdx	# tmp2690, tmp2689
	movq	%rdx, %rax	# tmp2689, tmp2691
	addq	%rax, %rax	# tmp2691
	addq	%rdx, %rax	# tmp2689, tmp2691
	salq	$3, %rax	#, tmp2692
	leaq	replacements+16(%rax), %rdx	#, tmp2693
	movl	-3776(%rbp), %eax	# i, tmp2694
	movl	%eax, (%rdx)	# tmp2694, replacements[k_131].what
.L1413:
	.loc 1 4012 0
	addl	$1, -3676(%rbp)	#, k
.L1412:
	.loc 1 4012 0 is_stmt 0 discriminator 1
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.774
	cmpl	%eax, -3676(%rbp)	# n_replacements.774, k
	jl	.L1414	#,
	.loc 1 4016 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp2696
	movslq	%eax, %rdx	# tmp2696, tmp2695
	movq	%rdx, %rax	# tmp2695, tmp2697
	addq	%rax, %rax	# tmp2697
	addq	%rdx, %rax	# tmp2695, tmp2697
	salq	$2, %rax	#, tmp2697
	addq	%rdx, %rax	# tmp2695, tmp2697
	salq	$3, %rax	#, tmp2698
	addq	$rld+80, %rax	#, tmp2699
	movl	12(%rax), %eax	# rld[i_19].when_needed, D.23657
	cmpl	$4, %eax	#, D.23657
	je	.L1415	#,
	.loc 1 4017 0
	movl	-3776(%rbp), %eax	# i, tmp2701
	movslq	%eax, %rdx	# tmp2701, tmp2700
	movq	%rdx, %rax	# tmp2700, tmp2702
	addq	%rax, %rax	# tmp2702
	addq	%rdx, %rax	# tmp2700, tmp2702
	salq	$2, %rax	#, tmp2702
	addq	%rdx, %rax	# tmp2700, tmp2702
	salq	$3, %rax	#, tmp2703
	addq	$rld+80, %rax	#, tmp2704
	movl	12(%rax), %eax	# rld[i_19].when_needed, D.23657
	cmpl	$6, %eax	#, D.23657
	jne	.L1416	#,
.L1415:
	.loc 1 4018 0
	movl	-3776(%rbp), %eax	# i, tmp2706
	movslq	%eax, %rdx	# tmp2706, tmp2705
	movq	%rdx, %rax	# tmp2705, tmp2707
	addq	%rax, %rax	# tmp2707
	addq	%rdx, %rax	# tmp2705, tmp2707
	salq	$2, %rax	#, tmp2707
	addq	%rdx, %rax	# tmp2705, tmp2707
	salq	$3, %rax	#, tmp2708
	addq	$rld+80, %rax	#, tmp2709
	movl	$8, 12(%rax)	#, rld[i_19].when_needed
	jmp	.L1417	#
.L1416:
	.loc 1 4020 0
	movl	-3776(%rbp), %eax	# i, tmp2711
	movslq	%eax, %rdx	# tmp2711, tmp2710
	movq	%rdx, %rax	# tmp2710, tmp2712
	addq	%rax, %rax	# tmp2712
	addq	%rdx, %rax	# tmp2710, tmp2712
	salq	$2, %rax	#, tmp2712
	addq	%rdx, %rax	# tmp2710, tmp2712
	salq	$3, %rax	#, tmp2713
	addq	$rld+80, %rax	#, tmp2714
	movl	$7, 12(%rax)	#, rld[i_19].when_needed
.L1417:
	.loc 1 4021 0
	movl	-3772(%rbp), %eax	# j, tmp2716
	movslq	%eax, %rdx	# tmp2716, tmp2715
	movq	%rdx, %rax	# tmp2715, tmp2717
	addq	%rax, %rax	# tmp2717
	addq	%rdx, %rax	# tmp2715, tmp2717
	salq	$2, %rax	#, tmp2717
	addq	%rdx, %rax	# tmp2715, tmp2717
	salq	$3, %rax	#, tmp2718
	addq	$rld, %rax	#, tmp2719
	movq	$0, (%rax)	#, rld[j_31].in
.L1407:
	.loc 1 3994 0
	addl	$1, -3772(%rbp)	#, j
.L1405:
	.loc 1 3994 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.775
	cmpl	%eax, -3772(%rbp)	# n_reloads.775, j
	jl	.L1418	#,
.LBE45:
	.loc 1 3990 0 is_stmt 1
	addl	$1, -3776(%rbp)	#, i
.L1404:
	.loc 1 3990 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.776
	cmpl	%eax, -3776(%rbp)	# n_reloads.776, i
	jl	.L1419	#,
	.loc 1 4042 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1420	#
.L1434:
	.loc 1 4044 0
	movl	-3776(%rbp), %eax	# i, tmp2721
	movslq	%eax, %rdx	# tmp2721, tmp2720
	movq	%rdx, %rax	# tmp2720, tmp2722
	addq	%rax, %rax	# tmp2722
	addq	%rdx, %rax	# tmp2720, tmp2722
	salq	$2, %rax	#, tmp2722
	addq	%rdx, %rax	# tmp2720, tmp2722
	salq	$3, %rax	#, tmp2723
	addq	$rld+96, %rax	#, tmp2724
	movzbl	(%rax), %eax	#, tmp2727
	shrb	$2, %al	#, D.23666
	andl	$1, %eax	#, D.23666
	testb	%al, %al	# D.23666
	je	.L1421	#,
	.loc 1 4045 0
	movl	-3776(%rbp), %eax	# i, tmp2729
	movslq	%eax, %rdx	# tmp2729, tmp2728
	movq	%rdx, %rax	# tmp2728, tmp2730
	addq	%rax, %rax	# tmp2730
	addq	%rdx, %rax	# tmp2728, tmp2730
	salq	$2, %rax	#, tmp2730
	addq	%rdx, %rax	# tmp2728, tmp2730
	salq	$3, %rax	#, tmp2731
	addq	$rld+80, %rax	#, tmp2732
	movl	12(%rax), %ecx	# rld[i_20].when_needed, D.23657
	movl	-3776(%rbp), %eax	# i, tmp2734
	movslq	%eax, %rdx	# tmp2734, tmp2733
	movq	%rdx, %rax	# tmp2733, tmp2735
	addq	%rax, %rax	# tmp2735
	addq	%rdx, %rax	# tmp2733, tmp2735
	salq	$2, %rax	#, tmp2735
	addq	%rdx, %rax	# tmp2733, tmp2735
	salq	$3, %rax	#, tmp2736
	addq	$rld+64, %rax	#, tmp2737
	movl	8(%rax), %eax	# rld[i_20].opnum, D.23645
	cltq
	movl	-3248(%rbp,%rax,4), %eax	# operand_type, D.23657
	cmpl	%eax, %ecx	# D.23657, D.23657
	jne	.L1421	#,
	.loc 1 4046 0
	movl	-3776(%rbp), %eax	# i, tmp2740
	movslq	%eax, %rdx	# tmp2740, tmp2739
	movq	%rdx, %rax	# tmp2739, tmp2741
	addq	%rax, %rax	# tmp2741
	addq	%rdx, %rax	# tmp2739, tmp2741
	salq	$2, %rax	#, tmp2741
	addq	%rdx, %rax	# tmp2739, tmp2741
	salq	$3, %rax	#, tmp2742
	addq	$rld+64, %rax	#, tmp2743
	movl	8(%rax), %eax	# rld[i_20].opnum, D.23645
	cltq
	movl	-3120(%rbp,%rax,4), %ecx	# address_type, D.23657
	movl	-3776(%rbp), %eax	# i, tmp2746
	movslq	%eax, %rdx	# tmp2746, tmp2745
	movq	%rdx, %rax	# tmp2745, tmp2747
	addq	%rax, %rax	# tmp2747
	addq	%rdx, %rax	# tmp2745, tmp2747
	salq	$2, %rax	#, tmp2747
	addq	%rdx, %rax	# tmp2745, tmp2747
	salq	$3, %rax	#, tmp2748
	addq	$rld+80, %rax	#, tmp2749
	movl	%ecx, 12(%rax)	# D.23657, rld[i_20].when_needed
.L1421:
	.loc 1 4048 0
	movl	-3776(%rbp), %eax	# i, tmp2751
	movslq	%eax, %rdx	# tmp2751, tmp2750
	movq	%rdx, %rax	# tmp2750, tmp2752
	addq	%rax, %rax	# tmp2752
	addq	%rdx, %rax	# tmp2750, tmp2752
	salq	$2, %rax	#, tmp2752
	addq	%rdx, %rax	# tmp2750, tmp2752
	salq	$3, %rax	#, tmp2753
	addq	$rld+80, %rax	#, tmp2754
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$3, %eax	#, D.23657
	je	.L1422	#,
	.loc 1 4049 0
	movl	-3776(%rbp), %eax	# i, tmp2756
	movslq	%eax, %rdx	# tmp2756, tmp2755
	movq	%rdx, %rax	# tmp2755, tmp2757
	addq	%rax, %rax	# tmp2757
	addq	%rdx, %rax	# tmp2755, tmp2757
	salq	$2, %rax	#, tmp2757
	addq	%rdx, %rax	# tmp2755, tmp2757
	salq	$3, %rax	#, tmp2758
	addq	$rld+80, %rax	#, tmp2759
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$5, %eax	#, D.23657
	je	.L1422	#,
	.loc 1 4050 0
	movl	-3776(%rbp), %eax	# i, tmp2761
	movslq	%eax, %rdx	# tmp2761, tmp2760
	movq	%rdx, %rax	# tmp2760, tmp2762
	addq	%rax, %rax	# tmp2762
	addq	%rdx, %rax	# tmp2760, tmp2762
	salq	$2, %rax	#, tmp2762
	addq	%rdx, %rax	# tmp2760, tmp2762
	salq	$3, %rax	#, tmp2763
	addq	$rld+80, %rax	#, tmp2764
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$4, %eax	#, D.23657
	je	.L1422	#,
	.loc 1 4051 0
	movl	-3776(%rbp), %eax	# i, tmp2766
	movslq	%eax, %rdx	# tmp2766, tmp2765
	movq	%rdx, %rax	# tmp2765, tmp2767
	addq	%rax, %rax	# tmp2767
	addq	%rdx, %rax	# tmp2765, tmp2767
	salq	$2, %rax	#, tmp2767
	addq	%rdx, %rax	# tmp2765, tmp2767
	salq	$3, %rax	#, tmp2768
	addq	$rld+80, %rax	#, tmp2769
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$6, %eax	#, D.23657
	jne	.L1423	#,
.L1422:
	.loc 1 4052 0
	movl	-3776(%rbp), %eax	# i, tmp2771
	movslq	%eax, %rdx	# tmp2771, tmp2770
	movq	%rdx, %rax	# tmp2770, tmp2772
	addq	%rax, %rax	# tmp2772
	addq	%rdx, %rax	# tmp2770, tmp2772
	salq	$2, %rax	#, tmp2772
	addq	%rdx, %rax	# tmp2770, tmp2772
	salq	$3, %rax	#, tmp2773
	addq	$rld+64, %rax	#, tmp2774
	movl	8(%rax), %eax	# rld[i_20].opnum, D.23645
	cltq
	movl	-2480(%rbp,%rax,4), %eax	# operand_reloadnum, D.23645
	testl	%eax, %eax	# D.23645
	js	.L1424	#,
	.loc 1 4053 0
	movl	-3776(%rbp), %eax	# i, tmp2777
	movslq	%eax, %rdx	# tmp2777, tmp2776
	movq	%rdx, %rax	# tmp2776, tmp2778
	addq	%rax, %rax	# tmp2778
	addq	%rdx, %rax	# tmp2776, tmp2778
	salq	$2, %rax	#, tmp2778
	addq	%rdx, %rax	# tmp2776, tmp2778
	salq	$3, %rax	#, tmp2779
	addq	$rld+64, %rax	#, tmp2780
	movl	8(%rax), %eax	# rld[i_20].opnum, D.23645
	cltq
	movl	-2480(%rbp,%rax,4), %eax	# operand_reloadnum, D.23645
	movslq	%eax, %rdx	# D.23645, tmp2782
	movq	%rdx, %rax	# tmp2782, tmp2783
	addq	%rax, %rax	# tmp2783
	addq	%rdx, %rax	# tmp2782, tmp2783
	salq	$2, %rax	#, tmp2783
	addq	%rdx, %rax	# tmp2782, tmp2783
	salq	$3, %rax	#, tmp2784
	addq	$rld+96, %rax	#, tmp2785
	movzbl	(%rax), %eax	#, tmp2788
	andl	$1, %eax	#, D.23666
	testb	%al, %al	# D.23666
	je	.L1423	#,
.L1424:
	.loc 1 4058 0
	movl	-3776(%rbp), %eax	# i, tmp2790
	movslq	%eax, %rdx	# tmp2790, tmp2789
	movq	%rdx, %rax	# tmp2789, tmp2791
	addq	%rax, %rax	# tmp2791
	addq	%rdx, %rax	# tmp2789, tmp2791
	salq	$2, %rax	#, tmp2791
	addq	%rdx, %rax	# tmp2789, tmp2791
	salq	$3, %rax	#, tmp2792
	addq	$rld+80, %rax	#, tmp2793
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$3, %eax	#, D.23657
	je	.L1425	#,
	.loc 1 4059 0
	movl	-3776(%rbp), %eax	# i, tmp2795
	movslq	%eax, %rdx	# tmp2795, tmp2794
	movq	%rdx, %rax	# tmp2794, tmp2796
	addq	%rax, %rax	# tmp2796
	addq	%rdx, %rax	# tmp2794, tmp2796
	salq	$2, %rax	#, tmp2796
	addq	%rdx, %rax	# tmp2794, tmp2796
	salq	$3, %rax	#, tmp2797
	addq	$rld+80, %rax	#, tmp2798
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$4, %eax	#, D.23657
	jne	.L1426	#,
.L1425:
	.loc 1 4060 0
	movl	-3776(%rbp), %eax	# i, tmp2800
	movslq	%eax, %rdx	# tmp2800, tmp2799
	movq	%rdx, %rax	# tmp2799, tmp2801
	addq	%rax, %rax	# tmp2801
	addq	%rdx, %rax	# tmp2799, tmp2801
	salq	$2, %rax	#, tmp2801
	addq	%rdx, %rax	# tmp2799, tmp2801
	salq	$3, %rax	#, tmp2802
	addq	$rld+64, %rax	#, tmp2803
	movl	12(%rax), %eax	# rld[i_20].secondary_in_reload, D.23645
	cmpl	$-1, %eax	#, D.23645
	je	.L1426	#,
.LBB46:
	.loc 1 4062 0
	movl	-3776(%rbp), %eax	# i, tmp2805
	movslq	%eax, %rdx	# tmp2805, tmp2804
	movq	%rdx, %rax	# tmp2804, tmp2806
	addq	%rax, %rax	# tmp2806
	addq	%rdx, %rax	# tmp2804, tmp2806
	salq	$2, %rax	#, tmp2806
	addq	%rdx, %rax	# tmp2804, tmp2806
	salq	$3, %rax	#, tmp2807
	addq	$rld+64, %rax	#, tmp2808
	movl	12(%rax), %eax	# rld[i_20].secondary_in_reload, tmp2809
	movl	%eax, -3604(%rbp)	# tmp2809, secondary_in_reload
	.loc 1 4064 0
	movl	-3604(%rbp), %eax	# secondary_in_reload, tmp2811
	movslq	%eax, %rdx	# tmp2811, tmp2810
	movq	%rdx, %rax	# tmp2810, tmp2812
	addq	%rax, %rax	# tmp2812
	addq	%rdx, %rax	# tmp2810, tmp2812
	salq	$2, %rax	#, tmp2812
	addq	%rdx, %rax	# tmp2810, tmp2812
	salq	$3, %rax	#, tmp2813
	addq	$rld+80, %rax	#, tmp2814
	movl	$8, 12(%rax)	#, rld[secondary_in_reload_1542].when_needed
	.loc 1 4067 0
	cmpl	$0, -3604(%rbp)	#, secondary_in_reload
	jle	.L1426	#,
	.loc 1 4068 0
	movl	-3604(%rbp), %eax	# secondary_in_reload, tmp2816
	movslq	%eax, %rdx	# tmp2816, tmp2815
	movq	%rdx, %rax	# tmp2815, tmp2817
	addq	%rax, %rax	# tmp2817
	addq	%rdx, %rax	# tmp2815, tmp2817
	salq	$2, %rax	#, tmp2817
	addq	%rdx, %rax	# tmp2815, tmp2817
	salq	$3, %rax	#, tmp2818
	addq	$rld+64, %rax	#, tmp2819
	movl	12(%rax), %eax	# rld[secondary_in_reload_1542].secondary_in_reload, D.23645
	cmpl	$-1, %eax	#, D.23645
	je	.L1426	#,
	.loc 1 4069 0
	movl	-3604(%rbp), %eax	# secondary_in_reload, tmp2821
	movslq	%eax, %rdx	# tmp2821, tmp2820
	movq	%rdx, %rax	# tmp2820, tmp2822
	addq	%rax, %rax	# tmp2822
	addq	%rdx, %rax	# tmp2820, tmp2822
	salq	$2, %rax	#, tmp2822
	addq	%rdx, %rax	# tmp2820, tmp2822
	salq	$3, %rax	#, tmp2823
	addq	$rld+64, %rax	#, tmp2824
	movl	12(%rax), %eax	# rld[secondary_in_reload_1542].secondary_in_reload, D.23645
	.loc 1 4070 0
	movslq	%eax, %rdx	# D.23645, tmp2825
	movq	%rdx, %rax	# tmp2825, tmp2826
	addq	%rax, %rax	# tmp2826
	addq	%rdx, %rax	# tmp2825, tmp2826
	salq	$2, %rax	#, tmp2826
	addq	%rdx, %rax	# tmp2825, tmp2826
	salq	$3, %rax	#, tmp2827
	addq	$rld+80, %rax	#, tmp2828
	movl	$8, 12(%rax)	#, rld[_1544].when_needed
.L1426:
.LBE46:
	.loc 1 4073 0
	movl	-3776(%rbp), %eax	# i, tmp2830
	movslq	%eax, %rdx	# tmp2830, tmp2829
	movq	%rdx, %rax	# tmp2829, tmp2831
	addq	%rax, %rax	# tmp2831
	addq	%rdx, %rax	# tmp2829, tmp2831
	salq	$2, %rax	#, tmp2831
	addq	%rdx, %rax	# tmp2829, tmp2831
	salq	$3, %rax	#, tmp2832
	addq	$rld+80, %rax	#, tmp2833
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$5, %eax	#, D.23657
	je	.L1427	#,
	.loc 1 4074 0
	movl	-3776(%rbp), %eax	# i, tmp2835
	movslq	%eax, %rdx	# tmp2835, tmp2834
	movq	%rdx, %rax	# tmp2834, tmp2836
	addq	%rax, %rax	# tmp2836
	addq	%rdx, %rax	# tmp2834, tmp2836
	salq	$2, %rax	#, tmp2836
	addq	%rdx, %rax	# tmp2834, tmp2836
	salq	$3, %rax	#, tmp2837
	addq	$rld+80, %rax	#, tmp2838
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$6, %eax	#, D.23657
	jne	.L1428	#,
.L1427:
	.loc 1 4075 0
	movl	-3776(%rbp), %eax	# i, tmp2840
	movslq	%eax, %rdx	# tmp2840, tmp2839
	movq	%rdx, %rax	# tmp2839, tmp2841
	addq	%rax, %rax	# tmp2841
	addq	%rdx, %rax	# tmp2839, tmp2841
	salq	$2, %rax	#, tmp2841
	addq	%rdx, %rax	# tmp2839, tmp2841
	salq	$3, %rax	#, tmp2842
	addq	$rld+80, %rax	#, tmp2843
	movl	(%rax), %eax	# rld[i_20].secondary_out_reload, D.23645
	cmpl	$-1, %eax	#, D.23645
	je	.L1428	#,
.LBB47:
	.loc 1 4077 0
	movl	-3776(%rbp), %eax	# i, tmp2845
	movslq	%eax, %rdx	# tmp2845, tmp2844
	movq	%rdx, %rax	# tmp2844, tmp2846
	addq	%rax, %rax	# tmp2846
	addq	%rdx, %rax	# tmp2844, tmp2846
	salq	$2, %rax	#, tmp2846
	addq	%rdx, %rax	# tmp2844, tmp2846
	salq	$3, %rax	#, tmp2847
	addq	$rld+80, %rax	#, tmp2848
	movl	(%rax), %eax	# rld[i_20].secondary_out_reload, tmp2849
	movl	%eax, -3600(%rbp)	# tmp2849, secondary_out_reload
	.loc 1 4079 0
	movl	-3600(%rbp), %eax	# secondary_out_reload, tmp2851
	movslq	%eax, %rdx	# tmp2851, tmp2850
	movq	%rdx, %rax	# tmp2850, tmp2852
	addq	%rax, %rax	# tmp2852
	addq	%rdx, %rax	# tmp2850, tmp2852
	salq	$2, %rax	#, tmp2852
	addq	%rdx, %rax	# tmp2850, tmp2852
	salq	$3, %rax	#, tmp2853
	addq	$rld+80, %rax	#, tmp2854
	movl	$8, 12(%rax)	#, rld[secondary_out_reload_1548].when_needed
	.loc 1 4082 0
	cmpl	$0, -3600(%rbp)	#, secondary_out_reload
	je	.L1428	#,
	.loc 1 4083 0
	movl	-3600(%rbp), %eax	# secondary_out_reload, tmp2856
	movslq	%eax, %rdx	# tmp2856, tmp2855
	movq	%rdx, %rax	# tmp2855, tmp2857
	addq	%rax, %rax	# tmp2857
	addq	%rdx, %rax	# tmp2855, tmp2857
	salq	$2, %rax	#, tmp2857
	addq	%rdx, %rax	# tmp2855, tmp2857
	salq	$3, %rax	#, tmp2858
	addq	$rld+80, %rax	#, tmp2859
	movl	(%rax), %eax	# rld[secondary_out_reload_1548].secondary_out_reload, D.23645
	cmpl	$-1, %eax	#, D.23645
	je	.L1428	#,
	.loc 1 4084 0
	movl	-3600(%rbp), %eax	# secondary_out_reload, tmp2861
	movslq	%eax, %rdx	# tmp2861, tmp2860
	movq	%rdx, %rax	# tmp2860, tmp2862
	addq	%rax, %rax	# tmp2862
	addq	%rdx, %rax	# tmp2860, tmp2862
	salq	$2, %rax	#, tmp2862
	addq	%rdx, %rax	# tmp2860, tmp2862
	salq	$3, %rax	#, tmp2863
	addq	$rld+80, %rax	#, tmp2864
	movl	(%rax), %eax	# rld[secondary_out_reload_1548].secondary_out_reload, D.23645
	.loc 1 4085 0
	movslq	%eax, %rdx	# D.23645, tmp2865
	movq	%rdx, %rax	# tmp2865, tmp2866
	addq	%rax, %rax	# tmp2866
	addq	%rdx, %rax	# tmp2865, tmp2866
	salq	$2, %rax	#, tmp2866
	addq	%rdx, %rax	# tmp2865, tmp2866
	salq	$3, %rax	#, tmp2867
	addq	$rld+80, %rax	#, tmp2868
	movl	$8, 12(%rax)	#, rld[_1550].when_needed
.L1428:
.LBE47:
	.loc 1 4088 0
	movl	-3776(%rbp), %eax	# i, tmp2870
	movslq	%eax, %rdx	# tmp2870, tmp2869
	movq	%rdx, %rax	# tmp2869, tmp2871
	addq	%rax, %rax	# tmp2871
	addq	%rdx, %rax	# tmp2869, tmp2871
	salq	$2, %rax	#, tmp2871
	addq	%rdx, %rax	# tmp2869, tmp2871
	salq	$3, %rax	#, tmp2872
	addq	$rld+80, %rax	#, tmp2873
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$4, %eax	#, D.23657
	je	.L1429	#,
	.loc 1 4089 0
	movl	-3776(%rbp), %eax	# i, tmp2875
	movslq	%eax, %rdx	# tmp2875, tmp2874
	movq	%rdx, %rax	# tmp2874, tmp2876
	addq	%rax, %rax	# tmp2876
	addq	%rdx, %rax	# tmp2874, tmp2876
	salq	$2, %rax	#, tmp2876
	addq	%rdx, %rax	# tmp2874, tmp2876
	salq	$3, %rax	#, tmp2877
	addq	$rld+80, %rax	#, tmp2878
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$6, %eax	#, D.23657
	jne	.L1430	#,
.L1429:
	.loc 1 4090 0
	movl	-3776(%rbp), %eax	# i, tmp2880
	movslq	%eax, %rdx	# tmp2880, tmp2879
	movq	%rdx, %rax	# tmp2879, tmp2881
	addq	%rax, %rax	# tmp2881
	addq	%rdx, %rax	# tmp2879, tmp2881
	salq	$2, %rax	#, tmp2881
	addq	%rdx, %rax	# tmp2879, tmp2881
	salq	$3, %rax	#, tmp2882
	addq	$rld+80, %rax	#, tmp2883
	movl	$8, 12(%rax)	#, rld[i_20].when_needed
	jmp	.L1423	#
.L1430:
	.loc 1 4092 0
	movl	-3776(%rbp), %eax	# i, tmp2885
	movslq	%eax, %rdx	# tmp2885, tmp2884
	movq	%rdx, %rax	# tmp2884, tmp2886
	addq	%rax, %rax	# tmp2886
	addq	%rdx, %rax	# tmp2884, tmp2886
	salq	$2, %rax	#, tmp2886
	addq	%rdx, %rax	# tmp2884, tmp2886
	salq	$3, %rax	#, tmp2887
	addq	$rld+80, %rax	#, tmp2888
	movl	$7, 12(%rax)	#, rld[i_20].when_needed
.L1423:
	.loc 1 4095 0
	movl	-3776(%rbp), %eax	# i, tmp2890
	movslq	%eax, %rdx	# tmp2890, tmp2889
	movq	%rdx, %rax	# tmp2889, tmp2891
	addq	%rax, %rax	# tmp2891
	addq	%rdx, %rax	# tmp2889, tmp2891
	salq	$2, %rax	#, tmp2891
	addq	%rdx, %rax	# tmp2889, tmp2891
	salq	$3, %rax	#, tmp2892
	addq	$rld+80, %rax	#, tmp2893
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$3, %eax	#, D.23657
	je	.L1431	#,
	.loc 1 4096 0
	movl	-3776(%rbp), %eax	# i, tmp2895
	movslq	%eax, %rdx	# tmp2895, tmp2894
	movq	%rdx, %rax	# tmp2894, tmp2896
	addq	%rax, %rax	# tmp2896
	addq	%rdx, %rax	# tmp2894, tmp2896
	salq	$2, %rax	#, tmp2896
	addq	%rdx, %rax	# tmp2894, tmp2896
	salq	$3, %rax	#, tmp2897
	addq	$rld+80, %rax	#, tmp2898
	movl	12(%rax), %eax	# rld[i_20].when_needed, D.23657
	cmpl	$4, %eax	#, D.23657
	jne	.L1432	#,
.L1431:
	.loc 1 4097 0
	movl	-3776(%rbp), %eax	# i, tmp2900
	movslq	%eax, %rdx	# tmp2900, tmp2899
	movq	%rdx, %rax	# tmp2899, tmp2901
	addq	%rax, %rax	# tmp2901
	addq	%rdx, %rax	# tmp2899, tmp2901
	salq	$2, %rax	#, tmp2901
	addq	%rdx, %rax	# tmp2899, tmp2901
	salq	$3, %rax	#, tmp2902
	addq	$rld+64, %rax	#, tmp2903
	movl	8(%rax), %eax	# rld[i_20].opnum, D.23645
	cltq
	movl	-2480(%rbp,%rax,4), %eax	# operand_reloadnum, D.23645
	testl	%eax, %eax	# D.23645
	js	.L1432	#,
	.loc 1 4098 0
	movl	-3776(%rbp), %eax	# i, tmp2906
	movslq	%eax, %rdx	# tmp2906, tmp2905
	movq	%rdx, %rax	# tmp2905, tmp2907
	addq	%rax, %rax	# tmp2907
	addq	%rdx, %rax	# tmp2905, tmp2907
	salq	$2, %rax	#, tmp2907
	addq	%rdx, %rax	# tmp2905, tmp2907
	salq	$3, %rax	#, tmp2908
	addq	$rld+64, %rax	#, tmp2909
	movl	8(%rax), %eax	# rld[i_20].opnum, D.23645
	cltq
	movl	-2480(%rbp,%rax,4), %eax	# operand_reloadnum, D.23645
	movslq	%eax, %rdx	# D.23645, tmp2911
	movq	%rdx, %rax	# tmp2911, tmp2912
	addq	%rax, %rax	# tmp2912
	addq	%rdx, %rax	# tmp2911, tmp2912
	salq	$2, %rax	#, tmp2912
	addq	%rdx, %rax	# tmp2911, tmp2912
	salq	$3, %rax	#, tmp2913
	addq	$rld+80, %rax	#, tmp2914
	movl	12(%rax), %eax	# rld[_1558].when_needed, D.23657
	cmpl	$9, %eax	#, D.23657
	jne	.L1432	#,
	.loc 1 4100 0
	movl	-3776(%rbp), %eax	# i, tmp2916
	movslq	%eax, %rdx	# tmp2916, tmp2915
	movq	%rdx, %rax	# tmp2915, tmp2917
	addq	%rax, %rax	# tmp2917
	addq	%rdx, %rax	# tmp2915, tmp2917
	salq	$2, %rax	#, tmp2917
	addq	%rdx, %rax	# tmp2915, tmp2917
	salq	$3, %rax	#, tmp2918
	addq	$rld+80, %rax	#, tmp2919
	movl	$10, 12(%rax)	#, rld[i_20].when_needed
.L1432:
	.loc 1 4102 0
	movl	-3776(%rbp), %eax	# i, tmp2921
	movslq	%eax, %rdx	# tmp2921, tmp2920
	movq	%rdx, %rax	# tmp2920, tmp2922
	addq	%rax, %rax	# tmp2922
	addq	%rdx, %rax	# tmp2920, tmp2922
	salq	$2, %rax	#, tmp2922
	addq	%rdx, %rax	# tmp2920, tmp2922
	salq	$3, %rax	#, tmp2923
	addq	$rld+64, %rax	#, tmp2924
	movl	8(%rax), %eax	# rld[i_20].opnum, D.23645
	cltq
	movl	-2352(%rbp,%rax,4), %eax	# goal_alternative_matches, D.23645
	testl	%eax, %eax	# D.23645
	js	.L1433	#,
	.loc 1 4103 0
	movl	-3776(%rbp), %eax	# i, tmp2927
	movslq	%eax, %rdx	# tmp2927, tmp2926
	movq	%rdx, %rax	# tmp2926, tmp2928
	addq	%rax, %rax	# tmp2928
	addq	%rdx, %rax	# tmp2926, tmp2928
	salq	$2, %rax	#, tmp2928
	addq	%rdx, %rax	# tmp2926, tmp2928
	salq	$3, %rax	#, tmp2929
	addq	$rld+64, %rax	#, tmp2930
	movl	8(%rax), %eax	# rld[i_20].opnum, D.23645
	cltq
	movl	-2352(%rbp,%rax,4), %ecx	# goal_alternative_matches, D.23645
	movl	-3776(%rbp), %eax	# i, tmp2933
	movslq	%eax, %rdx	# tmp2933, tmp2932
	movq	%rdx, %rax	# tmp2932, tmp2934
	addq	%rax, %rax	# tmp2934
	addq	%rdx, %rax	# tmp2932, tmp2934
	salq	$2, %rax	#, tmp2934
	addq	%rdx, %rax	# tmp2932, tmp2934
	salq	$3, %rax	#, tmp2935
	addq	$rld+64, %rax	#, tmp2936
	movl	%ecx, 8(%rax)	# D.23645, rld[i_20].opnum
.L1433:
	.loc 1 4042 0
	addl	$1, -3776(%rbp)	#, i
.L1420:
	.loc 1 4042 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.777
	cmpl	%eax, -3776(%rbp)	# n_reloads.777, i
	jl	.L1434	#,
.LBB48:
	.loc 1 4130 0 is_stmt 1
	movl	$-2, -3672(%rbp)	#, first_op_addr_num
	.loc 1 4133 0
	movl	$0, -3668(%rbp)	#, need_change
	.loc 1 4140 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1435	#
.L1436:
	.loc 1 4141 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp2938
	cltq
	movl	$-2, -1840(%rbp,%rax,4)	#, first_outpaddr_num
	movl	-3776(%rbp), %eax	# i, tmp2940
	cltq
	movl	-1840(%rbp,%rax,4), %edx	# first_outpaddr_num, D.23645
	movl	-3776(%rbp), %eax	# i, tmp2942
	cltq
	movl	%edx, -1968(%rbp,%rax,4)	# D.23645, first_inpaddr_num
	.loc 1 4140 0 discriminator 2
	addl	$1, -3776(%rbp)	#, i
.L1435:
	.loc 1 4140 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp2943
	cmpl	-3652(%rbp), %eax	# noperands, tmp2943
	jl	.L1436	#,
	.loc 1 4142 0 is_stmt 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.778
	subl	$1, %eax	#, tmp2944
	movl	%eax, -3776(%rbp)	# tmp2944, i
	jmp	.L1437	#
.L1446:
	.loc 1 4144 0
	movl	-3776(%rbp), %eax	# i, tmp2946
	movslq	%eax, %rdx	# tmp2946, tmp2945
	movq	%rdx, %rax	# tmp2945, tmp2947
	addq	%rax, %rax	# tmp2947
	addq	%rdx, %rax	# tmp2945, tmp2947
	salq	$2, %rax	#, tmp2947
	addq	%rdx, %rax	# tmp2945, tmp2947
	salq	$3, %rax	#, tmp2948
	addq	$rld+80, %rax	#, tmp2949
	movl	12(%rax), %eax	# rld[i_22].when_needed, D.23657
	cmpl	$5, %eax	#, D.23657
	je	.L1439	#,
	cmpl	$7, %eax	#, D.23657
	je	.L1440	#,
	cmpl	$3, %eax	#, D.23657
	je	.L1441	#,
	.loc 1 4168 0
	jmp	.L1443	#
.L1440:
	.loc 1 4147 0
	addl	$1, -3672(%rbp)	#, first_op_addr_num
	cmpl	$0, -3672(%rbp)	#, first_op_addr_num
	js	.L1442	#,
	.loc 1 4149 0
	movl	-3776(%rbp), %eax	# i, tmp2950
	movl	%eax, -3672(%rbp)	# tmp2950, first_op_addr_num
	.loc 1 4150 0
	movl	$1, -3668(%rbp)	#, need_change
	.loc 1 4152 0
	jmp	.L1443	#
.L1442:
	jmp	.L1443	#
.L1441:
	.loc 1 4154 0
	movl	-3776(%rbp), %eax	# i, tmp2952
	movslq	%eax, %rdx	# tmp2952, tmp2951
	movq	%rdx, %rax	# tmp2951, tmp2953
	addq	%rax, %rax	# tmp2953
	addq	%rdx, %rax	# tmp2951, tmp2953
	salq	$2, %rax	#, tmp2953
	addq	%rdx, %rax	# tmp2951, tmp2953
	salq	$3, %rax	#, tmp2954
	addq	$rld+64, %rax	#, tmp2955
	movl	8(%rax), %eax	# rld[i_22].opnum, D.23645
	movslq	%eax, %rdx	# D.23645, tmp2956
	movl	-1968(%rbp,%rdx,4), %edx	# first_inpaddr_num, D.23645
	leal	1(%rdx), %ecx	#, D.23645
	movslq	%eax, %rdx	# D.23645, tmp2957
	movl	%ecx, -1968(%rbp,%rdx,4)	# D.23645, first_inpaddr_num
	cltq
	movl	-1968(%rbp,%rax,4), %eax	# first_inpaddr_num, D.23645
	testl	%eax, %eax	# D.23645
	js	.L1444	#,
	.loc 1 4156 0
	movl	-3776(%rbp), %eax	# i, tmp2960
	movslq	%eax, %rdx	# tmp2960, tmp2959
	movq	%rdx, %rax	# tmp2959, tmp2961
	addq	%rax, %rax	# tmp2961
	addq	%rdx, %rax	# tmp2959, tmp2961
	salq	$2, %rax	#, tmp2961
	addq	%rdx, %rax	# tmp2959, tmp2961
	salq	$3, %rax	#, tmp2962
	addq	$rld+64, %rax	#, tmp2963
	movl	8(%rax), %eax	# rld[i_22].opnum, D.23645
	cltq
	movl	-3776(%rbp), %edx	# i, tmp2965
	movl	%edx, -1968(%rbp,%rax,4)	# tmp2965, first_inpaddr_num
	.loc 1 4157 0
	movl	$1, -3668(%rbp)	#, need_change
	.loc 1 4159 0
	jmp	.L1443	#
.L1444:
	jmp	.L1443	#
.L1439:
	.loc 1 4161 0
	movl	-3776(%rbp), %eax	# i, tmp2967
	movslq	%eax, %rdx	# tmp2967, tmp2966
	movq	%rdx, %rax	# tmp2966, tmp2968
	addq	%rax, %rax	# tmp2968
	addq	%rdx, %rax	# tmp2966, tmp2968
	salq	$2, %rax	#, tmp2968
	addq	%rdx, %rax	# tmp2966, tmp2968
	salq	$3, %rax	#, tmp2969
	addq	$rld+64, %rax	#, tmp2970
	movl	8(%rax), %eax	# rld[i_22].opnum, D.23645
	movslq	%eax, %rdx	# D.23645, tmp2971
	movl	-1840(%rbp,%rdx,4), %edx	# first_outpaddr_num, D.23645
	leal	1(%rdx), %ecx	#, D.23645
	movslq	%eax, %rdx	# D.23645, tmp2972
	movl	%ecx, -1840(%rbp,%rdx,4)	# D.23645, first_outpaddr_num
	cltq
	movl	-1840(%rbp,%rax,4), %eax	# first_outpaddr_num, D.23645
	testl	%eax, %eax	# D.23645
	js	.L1445	#,
	.loc 1 4163 0
	movl	-3776(%rbp), %eax	# i, tmp2975
	movslq	%eax, %rdx	# tmp2975, tmp2974
	movq	%rdx, %rax	# tmp2974, tmp2976
	addq	%rax, %rax	# tmp2976
	addq	%rdx, %rax	# tmp2974, tmp2976
	salq	$2, %rax	#, tmp2976
	addq	%rdx, %rax	# tmp2974, tmp2976
	salq	$3, %rax	#, tmp2977
	addq	$rld+64, %rax	#, tmp2978
	movl	8(%rax), %eax	# rld[i_22].opnum, D.23645
	cltq
	movl	-3776(%rbp), %edx	# i, tmp2980
	movl	%edx, -1840(%rbp,%rax,4)	# tmp2980, first_outpaddr_num
	.loc 1 4164 0
	movl	$1, -3668(%rbp)	#, need_change
	.loc 1 4166 0
	jmp	.L1499	#
.L1445:
.L1499:
	nop
.L1443:
	.loc 1 4142 0
	subl	$1, -3776(%rbp)	#, i
.L1437:
	.loc 1 4142 0 is_stmt 0 discriminator 1
	cmpl	$0, -3776(%rbp)	#, i
	jns	.L1446	#,
	.loc 1 4172 0 is_stmt 1
	cmpl	$0, -3668(%rbp)	#, need_change
	je	.L1447	#,
	.loc 1 4174 0
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1448	#
.L1462:
.LBB49:
	.loc 1 4179 0
	movl	-3776(%rbp), %eax	# i, tmp2982
	movslq	%eax, %rdx	# tmp2982, tmp2981
	movq	%rdx, %rax	# tmp2981, tmp2983
	addq	%rax, %rax	# tmp2983
	addq	%rdx, %rax	# tmp2981, tmp2983
	salq	$2, %rax	#, tmp2983
	addq	%rdx, %rax	# tmp2981, tmp2983
	salq	$3, %rax	#, tmp2984
	addq	$rld+80, %rax	#, tmp2985
	movl	12(%rax), %eax	# rld[i_23].when_needed, D.23657
	cmpl	$6, %eax	#, D.23657
	je	.L1450	#,
	cmpl	$8, %eax	#, D.23657
	je	.L1451	#,
	cmpl	$4, %eax	#, D.23657
	je	.L1452	#,
	.loc 1 4194 0
	jmp	.L1454	#
.L1451:
	.loc 1 4182 0
	movl	-3672(%rbp), %eax	# first_op_addr_num, tmp2986
	movl	%eax, -3664(%rbp)	# tmp2986, first_num
	.loc 1 4183 0
	movl	$7, -3660(%rbp)	#, type
	.loc 1 4184 0
	jmp	.L1453	#
.L1452:
	.loc 1 4186 0
	movl	-3776(%rbp), %eax	# i, tmp2988
	movslq	%eax, %rdx	# tmp2988, tmp2987
	movq	%rdx, %rax	# tmp2987, tmp2989
	addq	%rax, %rax	# tmp2989
	addq	%rdx, %rax	# tmp2987, tmp2989
	salq	$2, %rax	#, tmp2989
	addq	%rdx, %rax	# tmp2987, tmp2989
	salq	$3, %rax	#, tmp2990
	addq	$rld+64, %rax	#, tmp2991
	movl	8(%rax), %eax	# rld[i_23].opnum, D.23645
	cltq
	movl	-1968(%rbp,%rax,4), %eax	# first_inpaddr_num, tmp2993
	movl	%eax, -3664(%rbp)	# tmp2993, first_num
	.loc 1 4187 0
	movl	$3, -3660(%rbp)	#, type
	.loc 1 4188 0
	jmp	.L1453	#
.L1450:
	.loc 1 4190 0
	movl	-3776(%rbp), %eax	# i, tmp2995
	movslq	%eax, %rdx	# tmp2995, tmp2994
	movq	%rdx, %rax	# tmp2994, tmp2996
	addq	%rax, %rax	# tmp2996
	addq	%rdx, %rax	# tmp2994, tmp2996
	salq	$2, %rax	#, tmp2996
	addq	%rdx, %rax	# tmp2994, tmp2996
	salq	$3, %rax	#, tmp2997
	addq	$rld+64, %rax	#, tmp2998
	movl	8(%rax), %eax	# rld[i_23].opnum, D.23645
	cltq
	movl	-1840(%rbp,%rax,4), %eax	# first_outpaddr_num, tmp3000
	movl	%eax, -3664(%rbp)	# tmp3000, first_num
	.loc 1 4191 0
	movl	$5, -3660(%rbp)	#, type
	.loc 1 4192 0
	nop
.L1453:
	.loc 1 4196 0
	cmpl	$0, -3664(%rbp)	#, first_num
	jns	.L1455	#,
	.loc 1 4197 0
	jmp	.L1454	#
.L1455:
	.loc 1 4198 0
	movl	-3776(%rbp), %eax	# i, tmp3001
	cmpl	-3664(%rbp), %eax	# first_num, tmp3001
	jle	.L1456	#,
	.loc 1 4199 0
	movl	-3776(%rbp), %eax	# i, tmp3003
	movslq	%eax, %rdx	# tmp3003, tmp3002
	movq	%rdx, %rax	# tmp3002, tmp3004
	addq	%rax, %rax	# tmp3004
	addq	%rdx, %rax	# tmp3002, tmp3004
	salq	$2, %rax	#, tmp3004
	addq	%rdx, %rax	# tmp3002, tmp3004
	salq	$3, %rax	#, tmp3005
	leaq	rld+80(%rax), %rdx	#, tmp3006
	movl	-3660(%rbp), %eax	# type, tmp3007
	movl	%eax, 12(%rdx)	# tmp3007, rld[i_23].when_needed
	jmp	.L1454	#
.L1456:
	.loc 1 4204 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.779
	subl	$1, %eax	#, tmp3008
	movl	%eax, -3772(%rbp)	# tmp3008, j
	jmp	.L1457	#
.L1461:
	.loc 1 4206 0
	movl	-3772(%rbp), %eax	# j, tmp3010
	movslq	%eax, %rdx	# tmp3010, tmp3009
	movq	%rdx, %rax	# tmp3009, tmp3011
	addq	%rax, %rax	# tmp3011
	addq	%rdx, %rax	# tmp3009, tmp3011
	salq	$2, %rax	#, tmp3011
	addq	%rdx, %rax	# tmp3009, tmp3011
	salq	$3, %rax	#, tmp3012
	addq	$rld+80, %rax	#, tmp3013
	movl	12(%rax), %eax	# rld[j_32].when_needed, D.23657
	cmpl	-3660(%rbp), %eax	# type, D.23657
	jne	.L1458	#,
	.loc 1 4207 0
	movl	-3776(%rbp), %eax	# i, tmp3015
	movslq	%eax, %rdx	# tmp3015, tmp3014
	movq	%rdx, %rax	# tmp3014, tmp3016
	addq	%rax, %rax	# tmp3016
	addq	%rdx, %rax	# tmp3014, tmp3016
	salq	$2, %rax	#, tmp3016
	addq	%rdx, %rax	# tmp3014, tmp3016
	salq	$3, %rax	#, tmp3017
	addq	$rld+96, %rax	#, tmp3018
	movzbl	(%rax), %eax	#, tmp3021
	shrb	$2, %al	#, D.23666
	andl	$1, %eax	#, D.23666
	testb	%al, %al	# D.23666
	je	.L1459	#,
	.loc 1 4208 0
	movl	-3772(%rbp), %eax	# j, tmp3023
	movslq	%eax, %rdx	# tmp3023, tmp3022
	movq	%rdx, %rax	# tmp3022, tmp3024
	addq	%rax, %rax	# tmp3024
	addq	%rdx, %rax	# tmp3022, tmp3024
	salq	$2, %rax	#, tmp3024
	addq	%rdx, %rax	# tmp3022, tmp3024
	salq	$3, %rax	#, tmp3025
	addq	$rld+64, %rax	#, tmp3026
	movl	12(%rax), %eax	# rld[j_32].secondary_in_reload, D.23645
	.loc 1 4207 0
	cmpl	-3776(%rbp), %eax	# i, D.23645
	sete	%al	#, iftmp.780
	jmp	.L1460	#
.L1459:
	.loc 1 4209 0 discriminator 1
	movl	-3772(%rbp), %eax	# j, tmp3028
	movslq	%eax, %rdx	# tmp3028, tmp3027
	movq	%rdx, %rax	# tmp3027, tmp3029
	addq	%rax, %rax	# tmp3029
	addq	%rdx, %rax	# tmp3027, tmp3029
	salq	$2, %rax	#, tmp3029
	addq	%rdx, %rax	# tmp3027, tmp3029
	salq	$3, %rax	#, tmp3030
	addq	$rld, %rax	#, tmp3031
	movq	(%rax), %rcx	# rld[j_32].in, D.23648
	movl	-3776(%rbp), %eax	# i, tmp3033
	movslq	%eax, %rdx	# tmp3033, tmp3032
	movq	%rdx, %rax	# tmp3032, tmp3034
	addq	%rax, %rax	# tmp3034
	addq	%rdx, %rax	# tmp3032, tmp3034
	salq	$2, %rax	#, tmp3034
	addq	%rdx, %rax	# tmp3032, tmp3034
	salq	$3, %rax	#, tmp3035
	addq	$rld, %rax	#, tmp3036
	movq	(%rax), %rax	# rld[i_23].in, D.23648
	movq	%rcx, %rsi	# D.23648,
	movq	%rax, %rdi	# D.23648,
	call	reg_mentioned_p	#
	.loc 1 4207 0 discriminator 1
	testl	%eax, %eax	# D.23645
	setne	%al	#, iftmp.780
.L1460:
	.loc 1 4207 0 is_stmt 0 discriminator 2
	testb	%al, %al	# iftmp.780
	je	.L1458	#,
	.loc 1 4211 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp3038
	movslq	%eax, %rdx	# tmp3038, tmp3037
	movq	%rdx, %rax	# tmp3037, tmp3039
	addq	%rax, %rax	# tmp3039
	addq	%rdx, %rax	# tmp3037, tmp3039
	salq	$2, %rax	#, tmp3039
	addq	%rdx, %rax	# tmp3037, tmp3039
	salq	$3, %rax	#, tmp3040
	leaq	rld+80(%rax), %rdx	#, tmp3041
	movl	-3660(%rbp), %eax	# type, tmp3042
	movl	%eax, 12(%rdx)	# tmp3042, rld[i_23].when_needed
	.loc 1 4212 0
	jmp	.L1454	#
.L1458:
	.loc 1 4204 0
	subl	$1, -3772(%rbp)	#, j
.L1457:
	.loc 1 4204 0 is_stmt 0 discriminator 1
	movl	-3772(%rbp), %eax	# j, tmp3043
	cmpl	-3664(%rbp), %eax	# first_num, tmp3043
	jg	.L1461	#,
.L1454:
.LBE49:
	.loc 1 4174 0 is_stmt 1
	addl	$1, -3776(%rbp)	#, i
.L1448:
	.loc 1 4174 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.781
	cmpl	%eax, -3776(%rbp)	# n_reloads.781, i
	jl	.L1462	#,
.L1447:
.LBE48:
	.loc 1 4225 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1463	#
.L1475:
	.loc 1 4226 0
	movl	-3776(%rbp), %eax	# i, tmp3045
	movslq	%eax, %rdx	# tmp3045, tmp3044
	movq	%rdx, %rax	# tmp3044, tmp3046
	addq	%rax, %rax	# tmp3046
	addq	%rdx, %rax	# tmp3044, tmp3046
	salq	$2, %rax	#, tmp3046
	addq	%rdx, %rax	# tmp3044, tmp3046
	salq	$3, %rax	#, tmp3047
	addq	$rld, %rax	#, tmp3048
	movq	(%rax), %rax	# rld[i_24].in, D.23648
	testq	%rax, %rax	# D.23648
	je	.L1464	#,
	.loc 1 4226 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp3050
	movslq	%eax, %rdx	# tmp3050, tmp3049
	movq	%rdx, %rax	# tmp3049, tmp3051
	addq	%rax, %rax	# tmp3051
	addq	%rdx, %rax	# tmp3049, tmp3051
	salq	$2, %rax	#, tmp3051
	addq	%rdx, %rax	# tmp3049, tmp3051
	salq	$3, %rax	#, tmp3052
	addq	$rld, %rax	#, tmp3053
	movq	8(%rax), %rax	# rld[i_24].out, D.23648
	testq	%rax, %rax	# D.23648
	jne	.L1464	#,
	.loc 1 4227 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp3055
	movslq	%eax, %rdx	# tmp3055, tmp3054
	movq	%rdx, %rax	# tmp3054, tmp3056
	addq	%rax, %rax	# tmp3056
	addq	%rdx, %rax	# tmp3054, tmp3056
	salq	$2, %rax	#, tmp3056
	addq	%rdx, %rax	# tmp3054, tmp3056
	salq	$3, %rax	#, tmp3057
	addq	$rld+80, %rax	#, tmp3058
	movl	12(%rax), %eax	# rld[i_24].when_needed, D.23657
	cmpl	$7, %eax	#, D.23657
	je	.L1465	#,
	.loc 1 4228 0
	movl	-3776(%rbp), %eax	# i, tmp3060
	movslq	%eax, %rdx	# tmp3060, tmp3059
	movq	%rdx, %rax	# tmp3059, tmp3061
	addq	%rax, %rax	# tmp3061
	addq	%rdx, %rax	# tmp3059, tmp3061
	salq	$2, %rax	#, tmp3061
	addq	%rdx, %rax	# tmp3059, tmp3061
	salq	$3, %rax	#, tmp3062
	addq	$rld+80, %rax	#, tmp3063
	movl	12(%rax), %eax	# rld[i_24].when_needed, D.23657
	cmpl	$8, %eax	#, D.23657
	je	.L1465	#,
	.loc 1 4229 0
	movl	-3776(%rbp), %eax	# i, tmp3065
	movslq	%eax, %rdx	# tmp3065, tmp3064
	movq	%rdx, %rax	# tmp3064, tmp3066
	addq	%rax, %rax	# tmp3066
	addq	%rdx, %rax	# tmp3064, tmp3066
	salq	$2, %rax	#, tmp3066
	addq	%rdx, %rax	# tmp3064, tmp3066
	salq	$3, %rax	#, tmp3067
	addq	$rld+80, %rax	#, tmp3068
	movl	12(%rax), %eax	# rld[i_24].when_needed, D.23657
	cmpl	$10, %eax	#, D.23657
	jne	.L1464	#,
.L1465:
	.loc 1 4230 0
	movl	$0, -3772(%rbp)	#, j
	jmp	.L1466	#
.L1474:
	.loc 1 4231 0
	movl	-3776(%rbp), %eax	# i, tmp3069
	cmpl	-3772(%rbp), %eax	# j, tmp3069
	je	.L1467	#,
	.loc 1 4231 0 is_stmt 0 discriminator 1
	movl	-3772(%rbp), %eax	# j, tmp3071
	movslq	%eax, %rdx	# tmp3071, tmp3070
	movq	%rdx, %rax	# tmp3070, tmp3072
	addq	%rax, %rax	# tmp3072
	addq	%rdx, %rax	# tmp3070, tmp3072
	salq	$2, %rax	#, tmp3072
	addq	%rdx, %rax	# tmp3070, tmp3072
	salq	$3, %rax	#, tmp3073
	addq	$rld, %rax	#, tmp3074
	movq	(%rax), %rax	# rld[j_33].in, D.23648
	testq	%rax, %rax	# D.23648
	je	.L1467	#,
	movl	-3772(%rbp), %eax	# j, tmp3076
	movslq	%eax, %rdx	# tmp3076, tmp3075
	movq	%rdx, %rax	# tmp3075, tmp3077
	addq	%rax, %rax	# tmp3077
	addq	%rdx, %rax	# tmp3075, tmp3077
	salq	$2, %rax	#, tmp3077
	addq	%rdx, %rax	# tmp3075, tmp3077
	salq	$3, %rax	#, tmp3078
	addq	$rld, %rax	#, tmp3079
	movq	8(%rax), %rax	# rld[j_33].out, D.23648
	testq	%rax, %rax	# D.23648
	jne	.L1467	#,
	.loc 1 4232 0 is_stmt 1
	movl	-3772(%rbp), %eax	# j, tmp3081
	movslq	%eax, %rdx	# tmp3081, tmp3080
	movq	%rdx, %rax	# tmp3080, tmp3082
	addq	%rax, %rax	# tmp3082
	addq	%rdx, %rax	# tmp3080, tmp3082
	salq	$2, %rax	#, tmp3082
	addq	%rdx, %rax	# tmp3080, tmp3082
	salq	$3, %rax	#, tmp3083
	addq	$rld+80, %rax	#, tmp3084
	movl	12(%rax), %ecx	# rld[j_33].when_needed, D.23657
	movl	-3776(%rbp), %eax	# i, tmp3086
	movslq	%eax, %rdx	# tmp3086, tmp3085
	movq	%rdx, %rax	# tmp3085, tmp3087
	addq	%rax, %rax	# tmp3087
	addq	%rdx, %rax	# tmp3085, tmp3087
	salq	$2, %rax	#, tmp3087
	addq	%rdx, %rax	# tmp3085, tmp3087
	salq	$3, %rax	#, tmp3088
	addq	$rld+80, %rax	#, tmp3089
	movl	12(%rax), %eax	# rld[i_24].when_needed, D.23657
	cmpl	%eax, %ecx	# D.23657, D.23657
	jne	.L1467	#,
	.loc 1 4233 0
	movl	-3776(%rbp), %eax	# i, tmp3091
	movslq	%eax, %rdx	# tmp3091, tmp3090
	movq	%rdx, %rax	# tmp3090, tmp3092
	addq	%rax, %rax	# tmp3092
	addq	%rdx, %rax	# tmp3090, tmp3092
	salq	$2, %rax	#, tmp3092
	addq	%rdx, %rax	# tmp3090, tmp3092
	salq	$3, %rax	#, tmp3093
	addq	$rld, %rax	#, tmp3094
	movq	(%rax), %rcx	# rld[i_24].in, D.23648
	movl	-3772(%rbp), %eax	# j, tmp3096
	movslq	%eax, %rdx	# tmp3096, tmp3095
	movq	%rdx, %rax	# tmp3095, tmp3097
	addq	%rax, %rax	# tmp3097
	addq	%rdx, %rax	# tmp3095, tmp3097
	salq	$2, %rax	#, tmp3097
	addq	%rdx, %rax	# tmp3095, tmp3097
	salq	$3, %rax	#, tmp3098
	addq	$rld, %rax	#, tmp3099
	movq	(%rax), %rax	# rld[j_33].in, D.23648
	cmpq	%rax, %rcx	# D.23648, D.23648
	je	.L1468	#,
	.loc 1 4233 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp3101
	movslq	%eax, %rdx	# tmp3101, tmp3100
	movq	%rdx, %rax	# tmp3100, tmp3102
	addq	%rax, %rax	# tmp3102
	addq	%rdx, %rax	# tmp3100, tmp3102
	salq	$2, %rax	#, tmp3102
	addq	%rdx, %rax	# tmp3100, tmp3102
	salq	$3, %rax	#, tmp3103
	addq	$rld, %rax	#, tmp3104
	movq	(%rax), %rax	# rld[i_24].in, D.23648
	testq	%rax, %rax	# D.23648
	je	.L1467	#,
	movl	-3776(%rbp), %eax	# i, tmp3106
	movslq	%eax, %rdx	# tmp3106, tmp3105
	movq	%rdx, %rax	# tmp3105, tmp3107
	addq	%rax, %rax	# tmp3107
	addq	%rdx, %rax	# tmp3105, tmp3107
	salq	$2, %rax	#, tmp3107
	addq	%rdx, %rax	# tmp3105, tmp3107
	salq	$3, %rax	#, tmp3108
	addq	$rld, %rax	#, tmp3109
	movq	(%rax), %rax	# rld[i_24].in, D.23648
	movzwl	(%rax), %eax	# _1628->code, D.23646
	.loc 1 4232 0 is_stmt 1 discriminator 1
	cmpw	$61, %ax	#, D.23646
	jne	.L1469	#,
	.loc 1 4233 0
	movl	-3772(%rbp), %eax	# j, tmp3111
	movslq	%eax, %rdx	# tmp3111, tmp3110
	movq	%rdx, %rax	# tmp3110, tmp3112
	addq	%rax, %rax	# tmp3112
	addq	%rdx, %rax	# tmp3110, tmp3112
	salq	$2, %rax	#, tmp3112
	addq	%rdx, %rax	# tmp3110, tmp3112
	salq	$3, %rax	#, tmp3113
	addq	$rld, %rax	#, tmp3114
	movq	(%rax), %rax	# rld[j_33].in, D.23648
	movzwl	(%rax), %eax	# _1630->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1470	#,
	.loc 1 4233 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp3116
	movslq	%eax, %rdx	# tmp3116, tmp3115
	movq	%rdx, %rax	# tmp3115, tmp3117
	addq	%rax, %rax	# tmp3117
	addq	%rdx, %rax	# tmp3115, tmp3117
	salq	$2, %rax	#, tmp3117
	addq	%rdx, %rax	# tmp3115, tmp3117
	salq	$3, %rax	#, tmp3118
	addq	$rld, %rax	#, tmp3119
	movq	(%rax), %rax	# rld[i_24].in, D.23648
	movl	8(%rax), %ecx	# _1632->fld[0].rtuint, D.23649
	movl	-3772(%rbp), %eax	# j, tmp3121
	movslq	%eax, %rdx	# tmp3121, tmp3120
	movq	%rdx, %rax	# tmp3120, tmp3122
	addq	%rax, %rax	# tmp3122
	addq	%rdx, %rax	# tmp3120, tmp3122
	salq	$2, %rax	#, tmp3122
	addq	%rdx, %rax	# tmp3120, tmp3122
	salq	$3, %rax	#, tmp3123
	addq	$rld, %rax	#, tmp3124
	movq	(%rax), %rax	# rld[j_33].in, D.23648
	movl	8(%rax), %eax	# _1634->fld[0].rtuint, D.23649
	cmpl	%eax, %ecx	# D.23649, D.23649
	jne	.L1470	#,
	.loc 1 4233 0 discriminator 3
	movl	$1, %eax	#, iftmp.782
	jmp	.L1471	#
.L1470:
	.loc 1 4233 0 discriminator 2
	movl	$0, %eax	#, iftmp.782
.L1471:
	.loc 1 4233 0 discriminator 4
	andl	$1, %eax	#, D.23653
	testb	%al, %al	# D.23653
	jne	.L1468	#,
	jmp	.L1467	#
.L1469:
	.loc 1 4233 0
	movl	-3772(%rbp), %eax	# j, tmp3126
	movslq	%eax, %rdx	# tmp3126, tmp3125
	movq	%rdx, %rax	# tmp3125, tmp3127
	addq	%rax, %rax	# tmp3127
	addq	%rdx, %rax	# tmp3125, tmp3127
	salq	$2, %rax	#, tmp3127
	addq	%rdx, %rax	# tmp3125, tmp3127
	salq	$3, %rax	#, tmp3128
	addq	$rld, %rax	#, tmp3129
	movq	(%rax), %rcx	# rld[j_33].in, D.23648
	movl	-3776(%rbp), %eax	# i, tmp3131
	movslq	%eax, %rdx	# tmp3131, tmp3130
	movq	%rdx, %rax	# tmp3130, tmp3132
	addq	%rax, %rax	# tmp3132
	addq	%rdx, %rax	# tmp3130, tmp3132
	salq	$2, %rax	#, tmp3132
	addq	%rdx, %rax	# tmp3130, tmp3132
	salq	$3, %rax	#, tmp3133
	addq	$rld, %rax	#, tmp3134
	movq	(%rax), %rax	# rld[i_24].in, D.23648
	movq	%rcx, %rsi	# D.23648,
	movq	%rax, %rdi	# D.23648,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23645
	je	.L1472	#,
	.loc 1 4233 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp3136
	movslq	%eax, %rdx	# tmp3136, tmp3135
	movq	%rdx, %rax	# tmp3135, tmp3137
	addq	%rax, %rax	# tmp3137
	addq	%rdx, %rax	# tmp3135, tmp3137
	salq	$2, %rax	#, tmp3137
	addq	%rdx, %rax	# tmp3135, tmp3137
	salq	$3, %rax	#, tmp3138
	addq	$rld, %rax	#, tmp3139
	movq	(%rax), %rax	# rld[i_24].in, D.23648
	movq	%rax, %rdi	# D.23648,
	call	side_effects_p	#
	testl	%eax, %eax	# D.23645
	jne	.L1472	#,
	.loc 1 4233 0 discriminator 3
	movl	$1, %eax	#, iftmp.783
	jmp	.L1473	#
.L1472:
	.loc 1 4233 0 discriminator 2
	movl	$0, %eax	#, iftmp.783
.L1473:
	.loc 1 4233 0 discriminator 4
	andl	$1, %eax	#, D.23653
	testb	%al, %al	# D.23653
	je	.L1467	#,
.L1468:
	.loc 1 4234 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp3141
	movslq	%eax, %rdx	# tmp3141, tmp3140
	movq	%rdx, %rax	# tmp3140, tmp3142
	addq	%rax, %rax	# tmp3142
	addq	%rdx, %rax	# tmp3140, tmp3142
	salq	$2, %rax	#, tmp3142
	addq	%rdx, %rax	# tmp3140, tmp3142
	salq	$3, %rax	#, tmp3143
	addq	$rld+16, %rax	#, tmp3144
	movl	(%rax), %ecx	# rld[i_24].class, D.23650
	movl	-3772(%rbp), %eax	# j, tmp3146
	movslq	%eax, %rdx	# tmp3146, tmp3145
	movq	%rdx, %rax	# tmp3145, tmp3147
	addq	%rax, %rax	# tmp3147
	addq	%rdx, %rax	# tmp3145, tmp3147
	salq	$2, %rax	#, tmp3147
	addq	%rdx, %rax	# tmp3145, tmp3147
	salq	$3, %rax	#, tmp3148
	addq	$rld+16, %rax	#, tmp3149
	movl	(%rax), %eax	# rld[j_33].class, D.23650
	cmpl	%eax, %ecx	# D.23650, D.23650
	jne	.L1467	#,
	.loc 1 4235 0
	movl	-3776(%rbp), %eax	# i, tmp3151
	movslq	%eax, %rdx	# tmp3151, tmp3150
	movq	%rdx, %rax	# tmp3150, tmp3152
	addq	%rax, %rax	# tmp3152
	addq	%rdx, %rax	# tmp3150, tmp3152
	salq	$2, %rax	#, tmp3152
	addq	%rdx, %rax	# tmp3150, tmp3152
	salq	$3, %rax	#, tmp3153
	addq	$rld+96, %rax	#, tmp3154
	movzbl	(%rax), %eax	#, tmp3157
	shrb	%al	# D.23666
	andl	$1, %eax	#, D.23666
	testb	%al, %al	# D.23666
	jne	.L1467	#,
	.loc 1 4235 0 is_stmt 0 discriminator 1
	movl	-3772(%rbp), %eax	# j, tmp3159
	movslq	%eax, %rdx	# tmp3159, tmp3158
	movq	%rdx, %rax	# tmp3158, tmp3160
	addq	%rax, %rax	# tmp3160
	addq	%rdx, %rax	# tmp3158, tmp3160
	salq	$2, %rax	#, tmp3160
	addq	%rdx, %rax	# tmp3158, tmp3160
	salq	$3, %rax	#, tmp3161
	addq	$rld+96, %rax	#, tmp3162
	movzbl	(%rax), %eax	#, tmp3165
	shrb	%al	# D.23666
	andl	$1, %eax	#, D.23666
	testb	%al, %al	# D.23666
	jne	.L1467	#,
	.loc 1 4236 0 is_stmt 1
	movl	-3776(%rbp), %eax	# i, tmp3167
	movslq	%eax, %rdx	# tmp3167, tmp3166
	movq	%rdx, %rax	# tmp3166, tmp3168
	addq	%rax, %rax	# tmp3168
	addq	%rdx, %rax	# tmp3166, tmp3168
	salq	$2, %rax	#, tmp3168
	addq	%rdx, %rax	# tmp3166, tmp3168
	salq	$3, %rax	#, tmp3169
	addq	$rld+64, %rax	#, tmp3170
	movq	(%rax), %rcx	# rld[i_24].reg_rtx, D.23648
	movl	-3772(%rbp), %eax	# j, tmp3172
	movslq	%eax, %rdx	# tmp3172, tmp3171
	movq	%rdx, %rax	# tmp3171, tmp3173
	addq	%rax, %rax	# tmp3173
	addq	%rdx, %rax	# tmp3171, tmp3173
	salq	$2, %rax	#, tmp3173
	addq	%rdx, %rax	# tmp3171, tmp3173
	salq	$3, %rax	#, tmp3174
	addq	$rld+64, %rax	#, tmp3175
	movq	(%rax), %rax	# rld[j_33].reg_rtx, D.23648
	cmpq	%rax, %rcx	# D.23648, D.23648
	jne	.L1467	#,
	.loc 1 4238 0
	movl	-3772(%rbp), %eax	# j, tmp3177
	movslq	%eax, %rdx	# tmp3177, tmp3176
	movq	%rdx, %rax	# tmp3176, tmp3178
	addq	%rax, %rax	# tmp3178
	addq	%rdx, %rax	# tmp3176, tmp3178
	salq	$2, %rax	#, tmp3178
	addq	%rdx, %rax	# tmp3176, tmp3178
	salq	$3, %rax	#, tmp3179
	addq	$rld+64, %rax	#, tmp3180
	movl	8(%rax), %ecx	# rld[j_33].opnum, D.23645
	movl	-3776(%rbp), %eax	# i, tmp3182
	movslq	%eax, %rdx	# tmp3182, tmp3181
	movq	%rdx, %rax	# tmp3181, tmp3183
	addq	%rax, %rax	# tmp3183
	addq	%rdx, %rax	# tmp3181, tmp3183
	salq	$2, %rax	#, tmp3183
	addq	%rdx, %rax	# tmp3181, tmp3183
	salq	$3, %rax	#, tmp3184
	addq	$rld+64, %rax	#, tmp3185
	movl	8(%rax), %eax	# rld[i_24].opnum, D.23645
	cmpl	%eax, %ecx	# D.23645, D.23645
	cmovg	%eax, %ecx	# D.23645,, D.23645, D.23645
	movl	-3776(%rbp), %eax	# i, tmp3187
	movslq	%eax, %rdx	# tmp3187, tmp3186
	movq	%rdx, %rax	# tmp3186, tmp3188
	addq	%rax, %rax	# tmp3188
	addq	%rdx, %rax	# tmp3186, tmp3188
	salq	$2, %rax	#, tmp3188
	addq	%rdx, %rax	# tmp3186, tmp3188
	salq	$3, %rax	#, tmp3189
	addq	$rld+64, %rax	#, tmp3190
	movl	%ecx, 8(%rax)	# D.23645, rld[i_24].opnum
	.loc 1 4239 0
	movl	-3772(%rbp), %edx	# j, tmp3191
	movl	-3776(%rbp), %eax	# i, tmp3192
	movl	%edx, %esi	# tmp3191,
	movl	%eax, %edi	# tmp3192,
	call	transfer_replacements	#
	.loc 1 4240 0
	movl	-3772(%rbp), %eax	# j, tmp3194
	movslq	%eax, %rdx	# tmp3194, tmp3193
	movq	%rdx, %rax	# tmp3193, tmp3195
	addq	%rax, %rax	# tmp3195
	addq	%rdx, %rax	# tmp3193, tmp3195
	salq	$2, %rax	#, tmp3195
	addq	%rdx, %rax	# tmp3193, tmp3195
	salq	$3, %rax	#, tmp3196
	addq	$rld, %rax	#, tmp3197
	movq	$0, (%rax)	#, rld[j_33].in
.L1467:
	.loc 1 4230 0
	addl	$1, -3772(%rbp)	#, j
.L1466:
	.loc 1 4230 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.784
	cmpl	%eax, -3772(%rbp)	# n_reloads.784, j
	jl	.L1474	#,
.L1464:
	.loc 1 4225 0 is_stmt 1
	addl	$1, -3776(%rbp)	#, i
.L1463:
	.loc 1 4225 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.785
	cmpl	%eax, -3776(%rbp)	# n_reloads.785, i
	jl	.L1475	#,
	.loc 1 4256 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1476	#
.L1491:
	.loc 1 4259 0
	movl	-3776(%rbp), %eax	# i, tmp3199
	movslq	%eax, %rdx	# tmp3199, tmp3198
	movq	%rdx, %rax	# tmp3198, tmp3200
	addq	%rax, %rax	# tmp3200
	addq	%rdx, %rax	# tmp3198, tmp3200
	salq	$2, %rax	#, tmp3200
	addq	%rdx, %rax	# tmp3198, tmp3200
	salq	$3, %rax	#, tmp3201
	addq	$rld+16, %rax	#, tmp3202
	movl	4(%rax), %eax	# rld[i_25].inmode, D.23652
	testl	%eax, %eax	# D.23652
	je	.L1477	#,
	.loc 1 4260 0
	movl	-3776(%rbp), %eax	# i, tmp3204
	movslq	%eax, %rdx	# tmp3204, tmp3203
	movq	%rdx, %rax	# tmp3203, tmp3205
	addq	%rax, %rax	# tmp3205
	addq	%rdx, %rax	# tmp3203, tmp3205
	salq	$2, %rax	#, tmp3205
	addq	%rdx, %rax	# tmp3203, tmp3205
	salq	$3, %rax	#, tmp3206
	addq	$rld+16, %rax	#, tmp3207
	movl	8(%rax), %eax	# rld[i_25].outmode, D.23652
	cltq
	movzbl	mode_size(%rax), %ecx	# mode_size, D.23651
	.loc 1 4261 0
	movl	-3776(%rbp), %eax	# i, tmp3210
	movslq	%eax, %rdx	# tmp3210, tmp3209
	movq	%rdx, %rax	# tmp3209, tmp3211
	addq	%rax, %rax	# tmp3211
	addq	%rdx, %rax	# tmp3209, tmp3211
	salq	$2, %rax	#, tmp3211
	addq	%rdx, %rax	# tmp3209, tmp3211
	salq	$3, %rax	#, tmp3212
	addq	$rld+16, %rax	#, tmp3213
	movl	4(%rax), %eax	# rld[i_25].inmode, D.23652
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23651
	.loc 1 4260 0
	cmpb	%al, %cl	# D.23651, D.23651
	jbe	.L1478	#,
.L1477:
	.loc 1 4259 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp3216
	movslq	%eax, %rdx	# tmp3216, tmp3215
	movq	%rdx, %rax	# tmp3215, tmp3217
	addq	%rax, %rax	# tmp3217
	addq	%rdx, %rax	# tmp3215, tmp3217
	salq	$2, %rax	#, tmp3217
	addq	%rdx, %rax	# tmp3215, tmp3217
	salq	$3, %rax	#, tmp3218
	addq	$rld+16, %rax	#, tmp3219
	movl	8(%rax), %ecx	# rld[i_25].outmode, iftmp.786
	jmp	.L1479	#
.L1478:
	.loc 1 4259 0 is_stmt 0
	movl	-3776(%rbp), %eax	# i, tmp3221
	movslq	%eax, %rdx	# tmp3221, tmp3220
	movq	%rdx, %rax	# tmp3220, tmp3222
	addq	%rax, %rax	# tmp3222
	addq	%rdx, %rax	# tmp3220, tmp3222
	salq	$2, %rax	#, tmp3222
	addq	%rdx, %rax	# tmp3220, tmp3222
	salq	$3, %rax	#, tmp3223
	addq	$rld+16, %rax	#, tmp3224
	movl	4(%rax), %ecx	# rld[i_25].inmode, iftmp.786
.L1479:
	.loc 1 4259 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp3226
	movslq	%eax, %rdx	# tmp3226, tmp3225
	movq	%rdx, %rax	# tmp3225, tmp3227
	addq	%rax, %rax	# tmp3227
	addq	%rdx, %rax	# tmp3225, tmp3227
	salq	$2, %rax	#, tmp3227
	addq	%rdx, %rax	# tmp3225, tmp3227
	salq	$3, %rax	#, tmp3228
	addq	$rld+16, %rax	#, tmp3229
	movl	%ecx, 12(%rax)	# iftmp.786, rld[i_25].mode
	.loc 1 4264 0 is_stmt 1 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp3231
	movslq	%eax, %rdx	# tmp3231, tmp3230
	movq	%rdx, %rax	# tmp3230, tmp3232
	addq	%rax, %rax	# tmp3232
	addq	%rdx, %rax	# tmp3230, tmp3232
	salq	$2, %rax	#, tmp3232
	addq	%rdx, %rax	# tmp3230, tmp3232
	salq	$3, %rax	#, tmp3233
	addq	$rld+16, %rax	#, tmp3234
	movl	(%rax), %eax	# rld[i_25].class, D.23650
	movl	$12, %esi	#,
	movl	%eax, %edi	# D.23650,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.23645
	jne	.L1480	#,
	.loc 1 4264 0 is_stmt 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp3236
	movslq	%eax, %rdx	# tmp3236, tmp3235
	movq	%rdx, %rax	# tmp3235, tmp3237
	addq	%rax, %rax	# tmp3237
	addq	%rdx, %rax	# tmp3235, tmp3237
	salq	$2, %rax	#, tmp3237
	addq	%rdx, %rax	# tmp3235, tmp3237
	salq	$3, %rax	#, tmp3238
	addq	$rld+16, %rax	#, tmp3239
	movl	12(%rax), %eax	# rld[i_25].mode, D.23652
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23667
	cmpl	$5, %eax	#, D.23667
	je	.L1481	#,
	.loc 1 4264 0 discriminator 4
	movl	-3776(%rbp), %eax	# i, tmp3242
	movslq	%eax, %rdx	# tmp3242, tmp3241
	movq	%rdx, %rax	# tmp3241, tmp3243
	addq	%rax, %rax	# tmp3243
	addq	%rdx, %rax	# tmp3241, tmp3243
	salq	$2, %rax	#, tmp3243
	addq	%rdx, %rax	# tmp3241, tmp3243
	salq	$3, %rax	#, tmp3244
	addq	$rld+16, %rax	#, tmp3245
	movl	12(%rax), %eax	# rld[i_25].mode, D.23652
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23667
	cmpl	$6, %eax	#, D.23667
	jne	.L1482	#,
.L1481:
	.loc 1 4264 0 discriminator 3
	movl	$2, %eax	#, iftmp.788
	jmp	.L1483	#
.L1482:
	.loc 1 4264 0 discriminator 1
	movl	$1, %eax	#, iftmp.788
.L1483:
	.loc 1 4264 0 discriminator 5
	movl	%eax, %ecx	# iftmp.788, iftmp.787
	jmp	.L1484	#
.L1480:
	.loc 1 4264 0 discriminator 2
	movl	-3776(%rbp), %eax	# i, tmp3248
	movslq	%eax, %rdx	# tmp3248, tmp3247
	movq	%rdx, %rax	# tmp3247, tmp3249
	addq	%rax, %rax	# tmp3249
	addq	%rdx, %rax	# tmp3247, tmp3249
	salq	$2, %rax	#, tmp3249
	addq	%rdx, %rax	# tmp3247, tmp3249
	salq	$3, %rax	#, tmp3250
	addq	$rld+16, %rax	#, tmp3251
	movl	12(%rax), %eax	# rld[i_25].mode, D.23652
	cmpl	$18, %eax	#, D.23652
	je	.L1485	#,
	.loc 1 4264 0 discriminator 1
	movl	-3776(%rbp), %eax	# i, tmp3253
	movslq	%eax, %rdx	# tmp3253, tmp3252
	movq	%rdx, %rax	# tmp3252, tmp3254
	addq	%rax, %rax	# tmp3254
	addq	%rdx, %rax	# tmp3252, tmp3254
	salq	$2, %rax	#, tmp3254
	addq	%rdx, %rax	# tmp3252, tmp3254
	salq	$3, %rax	#, tmp3255
	addq	$rld+16, %rax	#, tmp3256
	movl	12(%rax), %eax	# rld[i_25].mode, D.23652
	jmp	.L1486	#
.L1485:
	.loc 1 4264 0 discriminator 2
	movl	$17, %eax	#, iftmp.789
.L1486:
	.loc 1 4264 0 discriminator 3
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23651
	movzbl	%al, %edx	# D.23651, D.23645
	movl	target_flags(%rip), %eax	# target_flags, target_flags.791
	andl	$33554432, %eax	#, D.23645
	testl	%eax, %eax	# D.23645
	je	.L1487	#,
	.loc 1 4264 0 discriminator 1
	movl	$8, %eax	#, iftmp.790
	jmp	.L1488	#
.L1487:
	.loc 1 4264 0 discriminator 2
	movl	$4, %eax	#, iftmp.790
.L1488:
	.loc 1 4264 0 discriminator 3
	addl	%edx, %eax	# D.23645, D.23645
	subl	$1, %eax	#, D.23645
	movl	target_flags(%rip), %edx	# target_flags, target_flags.793
	andl	$33554432, %edx	#, D.23645
	testl	%edx, %edx	# D.23645
	je	.L1489	#,
	.loc 1 4264 0 discriminator 1
	movl	$8, %ebx	#, iftmp.792
	jmp	.L1490	#
.L1489:
	.loc 1 4264 0 discriminator 2
	movl	$4, %ebx	#, iftmp.792
.L1490:
	.loc 1 4264 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.792
	movl	%eax, %ecx	# D.23645, iftmp.787
.L1484:
	.loc 1 4264 0 discriminator 6
	movl	-3776(%rbp), %eax	# i, tmp3261
	movslq	%eax, %rdx	# tmp3261, tmp3260
	movq	%rdx, %rax	# tmp3260, tmp3262
	addq	%rax, %rax	# tmp3262
	addq	%rdx, %rax	# tmp3260, tmp3262
	salq	$2, %rax	#, tmp3262
	addq	%rdx, %rax	# tmp3260, tmp3262
	salq	$3, %rax	#, tmp3263
	addq	$rld+32, %rax	#, tmp3264
	movl	%ecx, (%rax)	# iftmp.787, rld[i_25].nregs
	.loc 1 4256 0 is_stmt 1 discriminator 6
	addl	$1, -3776(%rbp)	#, i
.L1476:
	.loc 1 4256 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.794
	cmpl	%eax, -3776(%rbp)	# n_reloads.794, i
	jl	.L1491	#,
	.loc 1 4269 0 is_stmt 1
	movl	$0, -3776(%rbp)	#, i
	jmp	.L1492	#
.L1494:
	.loc 1 4270 0
	movl	-3776(%rbp), %eax	# i, tmp3266
	movslq	%eax, %rdx	# tmp3266, tmp3265
	movq	%rdx, %rax	# tmp3265, tmp3267
	addq	%rax, %rax	# tmp3267
	addq	%rdx, %rax	# tmp3265, tmp3267
	salq	$2, %rax	#, tmp3267
	addq	%rdx, %rax	# tmp3265, tmp3267
	salq	$3, %rax	#, tmp3268
	addq	$rld+80, %rax	#, tmp3269
	movl	12(%rax), %eax	# rld[i_26].when_needed, D.23657
	testl	%eax, %eax	# D.23657
	jne	.L1493	#,
	.loc 1 4271 0
	movq	-3784(%rbp), %rax	# insn, tmp3270
	movq	32(%rax), %rax	# insn_243(D)->fld[3].rtx, D.23648
	movzwl	(%rax), %eax	# _1702->code, D.23646
	cmpw	$47, %ax	#, D.23646
	jne	.L1493	#,
	.loc 1 4272 0
	movq	-3784(%rbp), %rax	# insn, tmp3271
	movq	32(%rax), %rax	# insn_243(D)->fld[3].rtx, D.23648
	movq	8(%rax), %rax	# _1704->fld[0].rtx, D.23648
	movzwl	(%rax), %eax	# _1705->code, D.23646
	cmpw	$61, %ax	#, D.23646
	jne	.L1493	#,
	.loc 1 4273 0
	movq	-3784(%rbp), %rax	# insn, tmp3272
	movq	32(%rax), %rax	# insn_243(D)->fld[3].rtx, D.23648
	movq	16(%rax), %rcx	# _1707->fld[1].rtx, D.23648
	movl	-3776(%rbp), %eax	# i, tmp3274
	movslq	%eax, %rdx	# tmp3274, tmp3273
	movq	%rdx, %rax	# tmp3273, tmp3275
	addq	%rax, %rax	# tmp3275
	addq	%rdx, %rax	# tmp3273, tmp3275
	salq	$2, %rax	#, tmp3275
	addq	%rdx, %rax	# tmp3273, tmp3275
	salq	$3, %rax	#, tmp3276
	addq	$rld, %rax	#, tmp3277
	movq	(%rax), %rax	# rld[i_26].in, D.23648
	cmpq	%rax, %rcx	# D.23648, D.23648
	jne	.L1493	#,
.LBB50:
	.loc 1 4275 0
	movq	-3784(%rbp), %rax	# insn, tmp3278
	movq	32(%rax), %rax	# insn_243(D)->fld[3].rtx, D.23648
	movq	8(%rax), %rax	# _1710->fld[0].rtx, tmp3279
	movq	%rax, -3512(%rbp)	# tmp3279, dest
	.loc 1 4276 0
	movq	-3512(%rbp), %rax	# dest, tmp3280
	movl	8(%rax), %eax	# dest_1711->fld[0].rtuint, tmp3281
	movl	%eax, -3596(%rbp)	# tmp3281, regno
	.loc 1 4278 0
	cmpl	$52, -3596(%rbp)	#, regno
	ja	.L1493	#,
	.loc 1 4279 0
	movl	-3776(%rbp), %eax	# i, tmp3283
	movslq	%eax, %rdx	# tmp3283, tmp3282
	movq	%rdx, %rax	# tmp3282, tmp3284
	addq	%rax, %rax	# tmp3284
	addq	%rdx, %rax	# tmp3282, tmp3284
	salq	$2, %rax	#, tmp3284
	addq	%rdx, %rax	# tmp3282, tmp3284
	salq	$3, %rax	#, tmp3285
	addq	$rld+16, %rax	#, tmp3286
	movl	(%rax), %eax	# rld[i_26].class, D.23650
	movl	%eax, %eax	# D.23650, tmp3287
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23654
	movl	-3596(%rbp), %eax	# regno, regno.795
	movl	%eax, %ecx	# regno.795, tmp3314
	shrq	%cl, %rdx	# tmp3314, D.23654
	movq	%rdx, %rax	# D.23654, D.23654
	andl	$1, %eax	#, D.23654
	testq	%rax, %rax	# D.23654
	je	.L1493	#,
	.loc 1 4280 0
	movl	-3776(%rbp), %eax	# i, tmp3289
	movslq	%eax, %rdx	# tmp3289, tmp3288
	movq	%rdx, %rax	# tmp3288, tmp3290
	addq	%rax, %rax	# tmp3290
	addq	%rdx, %rax	# tmp3288, tmp3290
	salq	$2, %rax	#, tmp3290
	addq	%rdx, %rax	# tmp3288, tmp3290
	salq	$3, %rax	#, tmp3291
	addq	$rld+16, %rax	#, tmp3292
	movl	12(%rax), %edx	# rld[i_26].mode, D.23652
	movl	-3596(%rbp), %eax	# regno, regno.796
	movl	%edx, %esi	# D.23652,
	movl	%eax, %edi	# regno.796,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.23645
	je	.L1493	#,
	.loc 1 4281 0
	movl	-3776(%rbp), %eax	# i, tmp3294
	movslq	%eax, %rdx	# tmp3294, tmp3293
	movq	%rdx, %rax	# tmp3293, tmp3295
	addq	%rax, %rax	# tmp3295
	addq	%rdx, %rax	# tmp3293, tmp3295
	salq	$2, %rax	#, tmp3295
	addq	%rdx, %rax	# tmp3293, tmp3295
	salq	$3, %rax	#, tmp3296
	leaq	rld+64(%rax), %rdx	#, tmp3297
	movq	-3512(%rbp), %rax	# dest, tmp3298
	movq	%rax, (%rdx)	# tmp3298, rld[i_26].reg_rtx
.L1493:
.LBE50:
	.loc 1 4269 0
	addl	$1, -3776(%rbp)	#, i
.L1492:
	.loc 1 4269 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.797
	cmpl	%eax, -3776(%rbp)	# n_reloads.797, i
	jl	.L1494	#,
	.loc 1 4284 0 is_stmt 1
	movl	-3732(%rbp), %eax	# retval, D.23645
.L1495:
	.loc 1 4285 0
	movq	-24(%rbp), %rbx	# D.23669, tmp3301
	xorq	%fs:40, %rbx	#, tmp3301
	je	.L1496	#,
	call	__stack_chk_fail	#
.L1496:
	addq	$3848, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE21:
	.size	find_reloads, .-find_reloads
	.type	alternative_allows_memconst, @function
alternative_allows_memconst:
.LFB22:
	.loc 1 4294 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# constraint, constraint
	movl	%esi, -28(%rbp)	# altnum, altnum
	.loc 1 4297 0
	jmp	.L1501	#
.L1503:
	.loc 1 4299 0
	nop
.L1502:
	.loc 1 4299 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# constraint, constraint.798
	leaq	1(%rax), %rdx	#, tmp65
	movq	%rdx, -24(%rbp)	# tmp65, constraint
	movzbl	(%rax), %eax	# *constraint.798_8, D.23675
	cmpb	$44, %al	#, D.23675
	jne	.L1502	#,
	.loc 1 4300 0 is_stmt 1
	subl	$1, -28(%rbp)	#, altnum
.L1501:
	.loc 1 4297 0 discriminator 1
	cmpl	$0, -28(%rbp)	#, altnum
	jg	.L1503	#,
	.loc 1 4304 0
	jmp	.L1504	#
.L1508:
	.loc 1 4305 0
	cmpl	$109, -4(%rbp)	#, c
	je	.L1505	#,
	.loc 1 4305 0 is_stmt 0 discriminator 1
	cmpl	$111, -4(%rbp)	#, c
	jne	.L1504	#,
.L1505:
	.loc 1 4306 0 is_stmt 1
	movl	$1, %eax	#, D.23674
	jmp	.L1506	#
.L1504:
	.loc 1 4304 0 discriminator 1
	movq	-24(%rbp), %rax	# constraint, constraint.799
	leaq	1(%rax), %rdx	#, tmp66
	movq	%rdx, -24(%rbp)	# tmp66, constraint
	movzbl	(%rax), %eax	# *constraint.799_12, D.23675
	movsbl	%al, %eax	# D.23675, tmp67
	movl	%eax, -4(%rbp)	# tmp67, c
	cmpl	$0, -4(%rbp)	#, c
	je	.L1507	#,
	.loc 1 4304 0 is_stmt 0 discriminator 2
	cmpl	$44, -4(%rbp)	#, c
	je	.L1507	#,
	.loc 1 4304 0 discriminator 1
	cmpl	$35, -4(%rbp)	#, c
	jne	.L1508	#,
.L1507:
	.loc 1 4307 0 is_stmt 1
	movl	$0, %eax	#, D.23674
.L1506:
	.loc 1 4308 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE22:
	.size	alternative_allows_memconst, .-alternative_allows_memconst
	.type	find_reloads_toplev, @function
find_reloads_toplev:
.LFB23:
	.loc 1 4342 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# x, x
	movl	%esi, -92(%rbp)	# opnum, opnum
	movl	%edx, -96(%rbp)	# type, type
	movl	%ecx, -100(%rbp)	# ind_levels, ind_levels
	movl	%r8d, -104(%rbp)	# is_set_dest, is_set_dest
	movq	%r9, -112(%rbp)	# insn, insn
	.loc 1 4343 0
	movq	-88(%rbp), %rax	# x, x.800
	movzwl	(%rax), %eax	# x.800_9->code, D.23677
	movzwl	%ax, %eax	# D.23677, tmp283
	movl	%eax, -68(%rbp)	# tmp283, code
	.loc 1 4345 0
	movl	-68(%rbp), %eax	# code, code.801
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp285
	movq	%rax, -48(%rbp)	# tmp285, fmt
	.loc 1 4349 0
	cmpl	$61, -68(%rbp)	#, code
	jne	.L1510	#,
.LBB51:
	.loc 1 4352 0
	movq	-88(%rbp), %rax	# x, x.802
	movl	8(%rax), %eax	# x.802_14->fld[0].rtuint, D.23678
	movl	%eax, -64(%rbp)	# D.23678, regno
	.loc 1 4353 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.803
	movl	-64(%rbp), %edx	# regno, tmp286
	movslq	%edx, %rdx	# tmp286, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_20, D.23681
	testq	%rax, %rax	# D.23681
	je	.L1511	#,
	.loc 1 4353 0 is_stmt 0 discriminator 1
	cmpl	$0, -104(%rbp)	#, is_set_dest
	jne	.L1511	#,
	.loc 1 4354 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.804
	movl	-64(%rbp), %edx	# regno, tmp287
	movslq	%edx, %rdx	# tmp287, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_26, x.805
	movq	%rax, -88(%rbp)	# x.805, x
	jmp	.L1512	#
.L1511:
	.loc 1 4361 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.806
	movl	-64(%rbp), %edx	# regno, tmp288
	movslq	%edx, %rdx	# tmp288, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_31, D.23681
	testq	%rax, %rax	# D.23681
	je	.L1512	#,
	.loc 1 4362 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.807
	movl	-64(%rbp), %edx	# regno, tmp289
	movslq	%edx, %rdx	# tmp289, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_36, D.23681
	testq	%rax, %rax	# D.23681
	jne	.L1513	#,
	.loc 1 4362 0 is_stmt 0 discriminator 1
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.808
	testl	%eax, %eax	# num_not_at_initial_offset.808
	je	.L1512	#,
.L1513:
.LBB52:
	.loc 1 4364 0 is_stmt 1
	movq	-88(%rbp), %rax	# x, x.809
	movl	-64(%rbp), %edx	# regno, tmp290
	movl	%edx, %esi	# tmp290,
	movq	%rax, %rdi	# x.809,
	call	make_memloc	#
	movq	%rax, -40(%rbp)	# tmp291, mem
	.loc 1 4365 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.810
	movl	-64(%rbp), %edx	# regno, tmp292
	movslq	%edx, %rdx	# tmp292, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_44, D.23681
	testq	%rax, %rax	# D.23681
	jne	.L1514	#,
	.loc 1 4366 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.811
	movl	-64(%rbp), %edx	# regno, tmp293
	movslq	%edx, %rdx	# tmp293, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rdx	# *_49, D.23681
	movq	-40(%rbp), %rax	# mem, tmp294
	movq	%rdx, %rsi	# D.23681,
	movq	%rax, %rdi	# tmp294,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23682
	jne	.L1512	#,
.L1514:
	.loc 1 4371 0
	movl	replace_reloads(%rip), %eax	# replace_reloads, replace_reloads.812
	testl	%eax, %eax	# replace_reloads.812
	je	.L1515	#,
	.loc 1 4371 0 is_stmt 0 discriminator 1
	movl	-92(%rbp), %eax	# opnum, tmp296
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.23681
	movq	-88(%rbp), %rax	# x, x.813
	cmpq	%rax, %rdx	# x.813, D.23681
	je	.L1515	#,
	.loc 1 4375 0 is_stmt 1
	movq	-88(%rbp), %rax	# x, x.814
	movq	%rax, %rdx	# x.814,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-112(%rbp), %rdx	# insn, tmp297
	movq	%rdx, %rsi	# tmp297,
	movq	%rax, %rdi	# D.23681,
	call	emit_insn_before	#
	movb	$2, 2(%rax)	#, _59->mode
.L1515:
	.loc 1 4377 0
	movq	-40(%rbp), %rax	# mem, tmp298
	movq	%rax, -88(%rbp)	# tmp298, x
	.loc 1 4378 0
	movq	-88(%rbp), %rax	# x, x.815
	leaq	8(%rax), %rdi	#, D.23680
	movq	-88(%rbp), %rax	# x, x.816
	movq	8(%rax), %rdx	# x.816_62->fld[0].rtx, D.23681
	movq	-88(%rbp), %rax	# x, x.817
	movzbl	2(%rax), %eax	# x.817_64->mode, D.23683
	movzbl	%al, %eax	# D.23683, D.23684
	movl	-96(%rbp), %r9d	# type, tmp299
	movl	-92(%rbp), %r8d	# opnum, tmp300
	leaq	-88(%rbp), %rsi	#, tmp301
	movq	-112(%rbp), %rcx	# insn, tmp302
	movq	%rcx, 8(%rsp)	# tmp302,
	movl	-100(%rbp), %ecx	# ind_levels, tmp303
	movl	%ecx, (%rsp)	# tmp303,
	movq	%rdi, %rcx	# D.23680,
	movl	%eax, %edi	# D.23684,
	call	find_reloads_address	#
	movl	%eax, -80(%rbp)	# tmp304, i
	.loc 1 4380 0
	cmpq	$0, 16(%rbp)	#, address_reloaded
	je	.L1512	#,
	.loc 1 4381 0
	movq	16(%rbp), %rax	# address_reloaded, tmp305
	movl	-80(%rbp), %edx	# i, tmp306
	movl	%edx, (%rax)	# tmp306, *address_reloaded_70(D)
.L1512:
.LBE52:
	.loc 1 4384 0
	movq	-88(%rbp), %rax	# x, D.23676
	jmp	.L1516	#
.L1510:
.LBE51:
	.loc 1 4386 0
	cmpl	$66, -68(%rbp)	#, code
	jne	.L1517	#,
.LBB53:
	.loc 1 4388 0
	movq	-88(%rbp), %rax	# x, x.818
	movq	%rax, -56(%rbp)	# x.818, tem
	.loc 1 4390 0
	movq	-88(%rbp), %rax	# x, x.819
	leaq	8(%rax), %rdi	#, D.23680
	movq	-88(%rbp), %rax	# x, x.820
	movq	8(%rax), %rdx	# x.820_75->fld[0].rtx, D.23681
	movq	-88(%rbp), %rax	# x, x.821
	movzbl	2(%rax), %eax	# x.821_77->mode, D.23683
	movzbl	%al, %eax	# D.23683, D.23684
	movl	-96(%rbp), %r9d	# type, tmp307
	movl	-92(%rbp), %r8d	# opnum, tmp308
	leaq	-56(%rbp), %rsi	#, tmp309
	movq	-112(%rbp), %rcx	# insn, tmp310
	movq	%rcx, 8(%rsp)	# tmp310,
	movl	-100(%rbp), %ecx	# ind_levels, tmp311
	movl	%ecx, (%rsp)	# tmp311,
	movq	%rdi, %rcx	# D.23680,
	movl	%eax, %edi	# D.23684,
	call	find_reloads_address	#
	movl	%eax, -80(%rbp)	# tmp312, i
	.loc 1 4392 0
	cmpq	$0, 16(%rbp)	#, address_reloaded
	je	.L1518	#,
	.loc 1 4393 0
	movq	16(%rbp), %rax	# address_reloaded, tmp313
	movl	-80(%rbp), %edx	# i, tmp314
	movl	%edx, (%rax)	# tmp314, *address_reloaded_70(D)
.L1518:
	.loc 1 4395 0
	movq	-56(%rbp), %rax	# tem, D.23676
	jmp	.L1516	#
.L1517:
.LBE53:
	.loc 1 4398 0
	cmpl	$63, -68(%rbp)	#, code
	jne	.L1519	#,
	.loc 1 4398 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# x, x.822
	movq	8(%rax), %rax	# x.822_82->fld[0].rtx, D.23681
	movzwl	(%rax), %eax	# _83->code, D.23677
	cmpw	$61, %ax	#, D.23677
	jne	.L1519	#,
.LBB54:
	.loc 1 4409 0 is_stmt 1
	movq	-88(%rbp), %rax	# x, x.823
	movq	8(%rax), %rax	# x.823_85->fld[0].rtx, D.23681
	movl	8(%rax), %eax	# _86->fld[0].rtuint, D.23678
	movl	%eax, -60(%rbp)	# D.23678, regno
	.loc 1 4412 0
	movq	-88(%rbp), %rax	# x, x.824
	movq	%rax, %rdi	# x.824,
	call	subreg_lowpart_p	#
	testl	%eax, %eax	# D.23682
	je	.L1520	#,
	.loc 1 4413 0
	cmpl	$52, -60(%rbp)	#, regno
	jle	.L1520	#,
	.loc 1 4413 0 is_stmt 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.825
	movl	-60(%rbp), %edx	# regno, tmp315
	movslq	%edx, %rdx	# tmp315, D.23679
	addq	%rdx, %rdx	# D.23679
	addq	%rdx, %rax	# D.23679, D.23685
	movzwl	(%rax), %eax	# *_94, D.23686
	testw	%ax, %ax	# D.23686
	jns	.L1520	#,
	.loc 1 4414 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.826
	movl	-60(%rbp), %edx	# regno, tmp316
	movslq	%edx, %rdx	# tmp316, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_99, D.23681
	testq	%rax, %rax	# D.23681
	je	.L1520	#,
	.loc 1 4416 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.827
	movl	-60(%rbp), %edx	# regno, tmp317
	movslq	%edx, %rdx	# tmp317, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	.loc 1 4415 0
	movq	(%rax), %rdx	# *_104, D.23681
	movq	-88(%rbp), %rax	# x, x.828
	movzbl	2(%rax), %eax	# x.828_106->mode, D.23683
	movzbl	%al, %eax	# D.23683, D.23684
	movq	%rdx, %rsi	# D.23681,
	movl	%eax, %edi	# D.23684,
	call	gen_lowpart_common	#
	movq	%rax, -32(%rbp)	# tmp318, tem
	cmpq	$0, -32(%rbp)	#, tem
	je	.L1520	#,
	.loc 1 4417 0
	movq	-32(%rbp), %rax	# tem, D.23676
	jmp	.L1516	#
.L1520:
	.loc 1 4419 0
	movq	-88(%rbp), %rax	# x, x.829
	movzbl	2(%rax), %eax	# x.829_111->mode, D.23683
	movzbl	%al, %eax	# D.23683, D.23682
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.23677
	movzwl	%ax, %edx	# D.23677, D.23682
	movl	target_flags(%rip), %eax	# target_flags, target_flags.831
	andl	$33554432, %eax	#, D.23682
	testl	%eax, %eax	# D.23682
	je	.L1521	#,
	.loc 1 4419 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.830
	jmp	.L1522	#
.L1521:
	.loc 1 4419 0 discriminator 2
	movl	$32, %eax	#, iftmp.830
.L1522:
	.loc 1 4419 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.830, D.23682
	jne	.L1523	#,
	.loc 1 4420 0 is_stmt 1
	cmpl	$52, -60(%rbp)	#, regno
	jle	.L1523	#,
	.loc 1 4420 0 is_stmt 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.832
	movl	-60(%rbp), %edx	# regno, tmp320
	movslq	%edx, %rdx	# tmp320, D.23679
	addq	%rdx, %rdx	# D.23679
	addq	%rdx, %rax	# D.23679, D.23685
	movzwl	(%rax), %eax	# *_123, D.23686
	testw	%ax, %ax	# D.23686
	jns	.L1523	#,
	.loc 1 4421 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.833
	movl	-60(%rbp), %edx	# regno, tmp321
	movslq	%edx, %rdx	# tmp321, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_128, D.23681
	testq	%rax, %rax	# D.23681
	je	.L1523	#,
	.loc 1 4424 0
	movq	-88(%rbp), %rax	# x, x.834
	movq	8(%rax), %rax	# x.834_130->fld[0].rtx, D.23681
	movzbl	2(%rax), %eax	# _131->mode, D.23683
	.loc 1 4422 0
	movzbl	%al, %ecx	# D.23683, D.23684
	.loc 1 4423 0
	movq	-88(%rbp), %rax	# x, x.835
	movl	16(%rax), %eax	# x.835_134->fld[1].rtuint, D.23678
	movl	target_flags(%rip), %edx	# target_flags, target_flags.837
	andl	$33554432, %edx	#, D.23682
	.loc 1 4422 0
	testl	%edx, %edx	# D.23682
	je	.L1524	#,
	.loc 1 4422 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.836
	jmp	.L1525	#
.L1524:
	.loc 1 4422 0 discriminator 2
	movl	$4, %ebx	#, iftmp.836
.L1525:
	.loc 1 4422 0 discriminator 3
	movl	$0, %edx	#, tmp323
	divl	%ebx	# iftmp.836
	movl	%eax, %esi	# tmp322, D.23678
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.838
	movl	-60(%rbp), %edx	# regno, tmp324
	movslq	%edx, %rdx	# tmp324, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_144, D.23681
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.23681,
	call	operand_subword	#
	movq	%rax, -32(%rbp)	# tmp325, tem
	cmpq	$0, -32(%rbp)	#, tem
	je	.L1523	#,
	.loc 1 4432 0 is_stmt 1
	movq	-88(%rbp), %rax	# x, x.839
	movzbl	2(%rax), %eax	# x.839_147->mode, D.23683
	movzbl	%al, %eax	# D.23683, D.23684
	movq	-32(%rbp), %rdx	# tem, tmp326
	movq	%rdx, %rsi	# tmp326,
	movl	%eax, %edi	# D.23684,
	call	gen_lowpart_common	#
	movq	%rax, -32(%rbp)	# tmp327, tem
	.loc 1 4433 0
	cmpq	$0, -32(%rbp)	#, tem
	jne	.L1526	#,
	.loc 1 4434 0
	movl	$__FUNCTION__.12167, %edx	#,
	movl	$4434, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1526:
	.loc 1 4435 0
	movq	-32(%rbp), %rax	# tem, D.23676
	jmp	.L1516	#
.L1523:
	.loc 1 4443 0
	cmpl	$52, -60(%rbp)	#, regno
	jle	.L1527	#,
	.loc 1 4443 0 is_stmt 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.840
	movl	-60(%rbp), %edx	# regno, tmp328
	movslq	%edx, %rdx	# tmp328, D.23679
	addq	%rdx, %rdx	# D.23679
	addq	%rdx, %rax	# D.23679, D.23685
	movzwl	(%rax), %eax	# *_155, D.23686
	testw	%ax, %ax	# D.23686
	jns	.L1527	#,
	.loc 1 4444 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.841
	movl	-60(%rbp), %edx	# regno, tmp329
	movslq	%edx, %rdx	# tmp329, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_160, D.23681
	testq	%rax, %rax	# D.23681
	je	.L1527	#,
	.loc 1 4445 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.842
	movl	-60(%rbp), %edx	# regno, tmp330
	movslq	%edx, %rdx	# tmp330, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_165, D.23681
	movzwl	(%rax), %eax	# _166->code, D.23677
	cmpw	$54, %ax	#, D.23677
	jne	.L1527	#,
	.loc 1 4446 0
	movq	-88(%rbp), %rax	# x, x.843
	movzbl	2(%rax), %eax	# x.843_168->mode, D.23683
	movzbl	%al, %eax	# D.23683, D.23682
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.23683
	.loc 1 4447 0
	movq	-88(%rbp), %rax	# x, x.844
	movq	8(%rax), %rax	# x.844_172->fld[0].rtx, D.23681
	movzbl	2(%rax), %eax	# _173->mode, D.23683
	movzbl	%al, %eax	# D.23683, D.23682
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23683
	.loc 1 4446 0
	cmpb	%al, %dl	# D.23683, D.23683
	jae	.L1527	#,
.LBB55:
	.loc 1 4449 0
	movq	-88(%rbp), %rax	# x, x.845
	movl	16(%rax), %eax	# x.845_177->fld[1].rtuint, D.23678
	sall	$3, %eax	#, D.23678
	movl	%eax, -72(%rbp)	# D.23678, shift
	.loc 1 4456 0
	cmpl	$63, -72(%rbp)	#, shift
	jle	.L1528	#,
	.loc 1 4457 0
	movl	$63, -72(%rbp)	#, shift
.L1528:
	.loc 1 4458 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.848
	movl	-60(%rbp), %edx	# regno, tmp333
	movslq	%edx, %rdx	# tmp333, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_185, D.23681
	movq	8(%rax), %rdx	# _186->fld[0].rtwint, D.23687
	movl	-72(%rbp), %eax	# shift, tmp334
	movl	%eax, %ecx	# tmp334, tmp375
	sarq	%cl, %rdx	# tmp375, D.23687
	movq	%rdx, %rax	# D.23687, D.23687
	movq	%rax, %rsi	# D.23687,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	jmp	.L1516	#
.L1527:
.LBE55:
	.loc 1 4461 0
	cmpl	$52, -60(%rbp)	#, regno
	jle	.L1529	#,
	.loc 1 4461 0 is_stmt 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.849
	movl	-60(%rbp), %edx	# regno, tmp335
	movslq	%edx, %rdx	# tmp335, D.23679
	addq	%rdx, %rdx	# D.23679
	addq	%rdx, %rax	# D.23679, D.23685
	movzwl	(%rax), %eax	# *_193, D.23686
	testw	%ax, %ax	# D.23686
	jns	.L1529	#,
	.loc 1 4462 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.850
	movl	-60(%rbp), %edx	# regno, tmp336
	movslq	%edx, %rdx	# tmp336, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_198, D.23681
	testq	%rax, %rax	# D.23681
	je	.L1529	#,
	.loc 1 4463 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.851
	movl	-60(%rbp), %edx	# regno, tmp337
	movslq	%edx, %rdx	# tmp337, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_203, D.23681
	movzbl	2(%rax), %eax	# _204->mode, D.23683
	testb	%al, %al	# D.23683
	jne	.L1529	#,
	.loc 1 4464 0
	movl	$__FUNCTION__.12167, %edx	#,
	movl	$4464, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1529:
	.loc 1 4479 0
	cmpl	$52, -60(%rbp)	#, regno
	jle	.L1519	#,
	.loc 1 4484 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.852
	movl	-60(%rbp), %edx	# regno, tmp338
	movslq	%edx, %rdx	# tmp338, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_209, D.23681
	testq	%rax, %rax	# D.23681
	jne	.L1530	#,
	.loc 1 4485 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.853
	movl	-60(%rbp), %edx	# regno, tmp339
	movslq	%edx, %rdx	# tmp339, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_214, D.23681
	testq	%rax, %rax	# D.23681
	je	.L1519	#,
	.loc 1 4487 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.854
	movl	-60(%rbp), %edx	# regno, tmp340
	movslq	%edx, %rdx	# tmp340, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_219, D.23681
	.loc 1 4486 0
	movq	8(%rax), %rdx	# _220->fld[0].rtx, D.23681
	movq	-88(%rbp), %rax	# x, x.855
	movzbl	2(%rax), %eax	# x.855_222->mode, D.23683
	movzbl	%al, %eax	# D.23683, D.23684
	movq	%rdx, %rsi	# D.23681,
	movl	%eax, %edi	# D.23684,
	call	strict_memory_address_p	#
	testl	%eax, %eax	# D.23682
	je	.L1530	#,
	.loc 1 4488 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.856
	movl	-60(%rbp), %edx	# regno, tmp341
	movslq	%edx, %rdx	# tmp341, D.23679
	salq	$3, %rdx	#, D.23679
	addq	%rdx, %rax	# D.23679, D.23680
	movq	(%rax), %rax	# *_229, D.23681
	movq	%rax, %rdi	# D.23681,
	call	offsettable_memref_p	#
	testl	%eax, %eax	# D.23682
	je	.L1530	#,
	.loc 1 4489 0
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.857
	testl	%eax, %eax	# num_not_at_initial_offset.857
	je	.L1519	#,
.L1530:
	.loc 1 4490 0
	movq	-88(%rbp), %rax	# x, x.858
	movq	-112(%rbp), %rdi	# insn, tmp342
	movl	-100(%rbp), %esi	# ind_levels, tmp343
	movl	-96(%rbp), %ecx	# type, tmp344
	movl	-92(%rbp), %edx	# opnum, tmp345
	movq	%rdi, %r9	# tmp342,
	movl	%esi, %r8d	# tmp343,
	movl	$1, %esi	#,
	movq	%rax, %rdi	# x.858,
	call	find_reloads_subreg_address	#
	movq	%rax, -88(%rbp)	# x.859, x
.L1519:
.LBE54:
	.loc 1 4494 0
	movl	$0, -76(%rbp)	#, copied
	movl	-68(%rbp), %eax	# code, code.860
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.23683
	movzbl	%al, %eax	# D.23683, D.23682
	subl	$1, %eax	#, tmp347
	movl	%eax, -80(%rbp)	# tmp347, i
	jmp	.L1531	#
.L1534:
	.loc 1 4496 0
	movl	-80(%rbp), %eax	# i, tmp348
	movslq	%eax, %rdx	# tmp348, D.23688
	movq	-48(%rbp), %rax	# fmt, tmp349
	addq	%rdx, %rax	# D.23688, D.23689
	movzbl	(%rax), %eax	# *_241, D.23690
	cmpb	$101, %al	#, D.23690
	jne	.L1532	#,
.LBB56:
	.loc 1 4498 0
	movq	-88(%rbp), %rax	# x, x.861
	movl	-80(%rbp), %edx	# i, tmp351
	movslq	%edx, %rdx	# tmp351, tmp350
	movq	8(%rax,%rdx,8), %rax	# x.861_243->fld[i_1].rtx, D.23681
	movq	-112(%rbp), %r9	# insn, tmp352
	movl	-104(%rbp), %r8d	# is_set_dest, tmp353
	movl	-100(%rbp), %ecx	# ind_levels, tmp354
	movl	-96(%rbp), %edx	# type, tmp355
	movl	-92(%rbp), %esi	# opnum, tmp356
	movq	16(%rbp), %rdi	# address_reloaded, tmp357
	movq	%rdi, (%rsp)	# tmp357,
	movq	%rax, %rdi	# D.23681,
	call	find_reloads_toplev	#
	movq	%rax, -24(%rbp)	# tmp358, new_part
	.loc 1 4506 0
	movq	-88(%rbp), %rax	# x, x.862
	movl	-80(%rbp), %edx	# i, tmp360
	movslq	%edx, %rdx	# tmp360, tmp359
	movq	8(%rax,%rdx,8), %rax	# x.862_246->fld[i_1].rtx, D.23681
	cmpq	-24(%rbp), %rax	# new_part, D.23681
	je	.L1533	#,
	.loc 1 4506 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# new_part, tmp361
	movzwl	(%rax), %eax	# new_part_245->code, D.23677
	cmpw	$67, %ax	#, D.23677
	je	.L1533	#,
	movq	-24(%rbp), %rax	# new_part, tmp362
	movzwl	(%rax), %eax	# new_part_245->code, D.23677
	cmpw	$68, %ax	#, D.23677
	je	.L1533	#,
	movq	-24(%rbp), %rax	# new_part, tmp363
	movzwl	(%rax), %eax	# new_part_245->code, D.23677
	cmpw	$54, %ax	#, D.23677
	je	.L1533	#,
	movq	-24(%rbp), %rax	# new_part, tmp364
	movzwl	(%rax), %eax	# new_part_245->code, D.23677
	cmpw	$55, %ax	#, D.23677
	je	.L1533	#,
	movq	-24(%rbp), %rax	# new_part, tmp365
	movzwl	(%rax), %eax	# new_part_245->code, D.23677
	cmpw	$58, %ax	#, D.23677
	je	.L1533	#,
	movq	-24(%rbp), %rax	# new_part, tmp366
	movzwl	(%rax), %eax	# new_part_245->code, D.23677
	cmpw	$134, %ax	#, D.23677
	je	.L1533	#,
	movq	-24(%rbp), %rax	# new_part, tmp367
	movzwl	(%rax), %eax	# new_part_245->code, D.23677
	cmpw	$56, %ax	#, D.23677
	je	.L1533	#,
	movq	-24(%rbp), %rax	# new_part, tmp368
	movzwl	(%rax), %eax	# new_part_245->code, D.23677
	cmpw	$140, %ax	#, D.23677
	je	.L1533	#,
	cmpl	$0, -76(%rbp)	#, copied
	jne	.L1533	#,
	.loc 1 4508 0 is_stmt 1
	movq	-88(%rbp), %rax	# x, x.863
	movq	%rax, %rdi	# x.863,
	call	shallow_copy_rtx	#
	movq	%rax, -88(%rbp)	# x.864, x
	.loc 1 4509 0
	movl	$1, -76(%rbp)	#, copied
.L1533:
	.loc 1 4511 0
	movq	-88(%rbp), %rax	# x, x.865
	movl	-80(%rbp), %edx	# i, tmp370
	movslq	%edx, %rdx	# tmp370, tmp369
	movq	-24(%rbp), %rcx	# new_part, tmp371
	movq	%rcx, 8(%rax,%rdx,8)	# tmp371, x.865_259->fld[i_1].rtx
.L1532:
.LBE56:
	.loc 1 4494 0
	subl	$1, -80(%rbp)	#, i
.L1531:
	.loc 1 4494 0 is_stmt 0 discriminator 1
	cmpl	$0, -80(%rbp)	#, i
	jns	.L1534	#,
	.loc 1 4514 0 is_stmt 1
	movq	-88(%rbp), %rax	# x, D.23676
.L1516:
	.loc 1 4515 0
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE23:
	.size	find_reloads_toplev, .-find_reloads_toplev
	.type	make_memloc, @function
make_memloc:
.LFB24:
	.loc 1 4524 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# ad, ad
	movl	%esi, -28(%rbp)	# regno, regno
	.loc 1 4528 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.866
	movl	-28(%rbp), %edx	# regno, tmp80
	movslq	%edx, %rdx	# tmp80, D.23691
	salq	$3, %rdx	#, D.23691
	addq	%rdx, %rax	# D.23691, D.23692
	movq	(%rax), %rax	# *_7, D.23693
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23693,
	call	eliminate_regs	#
	.loc 1 4527 0
	movq	8(%rax), %rax	# _9->fld[0].rtx, tmp81
	movq	%rax, -8(%rbp)	# tmp81, tem
	.loc 1 4532 0
	movq	-8(%rbp), %rax	# tem, tmp82
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp82,
	call	rtx_varies_p	#
	testl	%eax, %eax	# D.23694
	je	.L1536	#,
	.loc 1 4533 0
	movq	-8(%rbp), %rax	# tem, tmp83
	movq	%rax, %rdi	# tmp83,
	call	copy_rtx	#
	movq	%rax, -8(%rbp)	# tmp84, tem
.L1536:
	.loc 1 4535 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.867
	movl	-28(%rbp), %edx	# regno, tmp85
	movslq	%edx, %rdx	# tmp85, D.23691
	salq	$3, %rdx	#, D.23691
	addq	%rdx, %rax	# D.23691, D.23692
	movq	(%rax), %rax	# *_16, D.23693
	movq	-8(%rbp), %rdx	# tem, tmp86
	movq	%rdx, %rsi	# tmp86,
	movq	%rax, %rdi	# D.23693,
	call	replace_equiv_address_nv	#
	movq	%rax, -8(%rbp)	# tmp87, tem
	.loc 1 4536 0
	movq	-24(%rbp), %rax	# ad, tmp88
	movzbl	2(%rax), %eax	# ad_19(D)->mode, D.23695
	movzbl	%al, %esi	# D.23695, D.23696
	movq	-8(%rbp), %rax	# tem, tmp89
	movl	$1, %r8d	#,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp89,
	call	adjust_address_1	#
	movq	%rax, -8(%rbp)	# tmp90, tem
	.loc 1 4540 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.868
	movl	-28(%rbp), %edx	# regno, tmp91
	movslq	%edx, %rdx	# tmp91, D.23691
	salq	$3, %rdx	#, D.23691
	addq	%rdx, %rax	# D.23691, D.23692
	movq	(%rax), %rax	# *_26, D.23693
	cmpq	-8(%rbp), %rax	# tem, D.23693
	jne	.L1537	#,
	.loc 1 4541 0
	movq	-8(%rbp), %rax	# tem, tmp92
	movq	%rax, %rdi	# tmp92,
	call	copy_rtx	#
	movq	%rax, -8(%rbp)	# tmp93, tem
.L1537:
	.loc 1 4542 0
	movq	-8(%rbp), %rax	# tem, D.23697
	.loc 1 4543 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE24:
	.size	make_memloc, .-make_memloc
	.type	find_reloads_address, @function
find_reloads_address:
.LFB25:
	.loc 1 4579 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# mode, mode
	movq	%rsi, -48(%rbp)	# memrefloc, memrefloc
	movq	%rdx, -56(%rbp)	# ad, ad
	movq	%rcx, -64(%rbp)	# loc, loc
	movl	%r8d, -40(%rbp)	# opnum, opnum
	movl	%r9d, -68(%rbp)	# type, type
	.loc 1 4581 0
	movl	$0, -32(%rbp)	#, removed_and
	.loc 1 4588 0
	movq	-56(%rbp), %rax	# ad, tmp391
	movzwl	(%rax), %eax	# ad_18(D)->code, D.23699
	cmpw	$61, %ax	#, D.23699
	jne	.L1540	#,
	.loc 1 4590 0
	movq	-56(%rbp), %rax	# ad, tmp392
	movl	8(%rax), %eax	# ad_18(D)->fld[0].rtuint, D.23700
	movl	%eax, -28(%rbp)	# D.23700, regno
	.loc 1 4594 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.869
	movl	-28(%rbp), %edx	# regno, tmp393
	movslq	%edx, %rdx	# tmp393, D.23701
	salq	$3, %rdx	#, D.23701
	addq	%rdx, %rax	# D.23701, D.23702
	movq	(%rax), %rax	# *_25, tem.870
	movq	%rax, -24(%rbp)	# tem.870, tem
	.loc 1 4595 0
	movq	-24(%rbp), %rax	# tem, tem.871
	testq	%rax, %rax	# tem.871
	je	.L1541	#,
	.loc 1 4596 0
	movq	-24(%rbp), %rax	# tem, tem.872
	movq	24(%rbp), %rdx	# insn, tmp394
	movl	-36(%rbp), %ecx	# mode, tmp395
	movl	%ecx, %esi	# tmp395,
	movq	%rax, %rdi	# tem.872,
	call	eliminate_regs	#
	movq	%rax, -24(%rbp)	# tem.873, tem
	movq	-24(%rbp), %rax	# tem, tem.874
	testq	%rax, %rax	# tem.874
	je	.L1541	#,
	.loc 1 4597 0
	movq	-24(%rbp), %rdx	# tem, tem.875
	movl	-36(%rbp), %eax	# mode, tmp396
	movq	%rdx, %rsi	# tem.875,
	movl	%eax, %edi	# tmp396,
	call	strict_memory_address_p	#
	testl	%eax, %eax	# D.23698
	je	.L1541	#,
	.loc 1 4599 0
	movq	-24(%rbp), %rax	# tem, tmp397
	movq	%rax, -56(%rbp)	# tmp397, ad
	movq	-64(%rbp), %rax	# loc, tmp398
	movq	-56(%rbp), %rdx	# ad, tmp399
	movq	%rdx, (%rax)	# tmp399, *loc_36(D)
	.loc 1 4600 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1541:
	.loc 1 4603 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.876
	movl	-28(%rbp), %edx	# regno, tmp400
	movslq	%edx, %rdx	# tmp400, D.23701
	salq	$3, %rdx	#, D.23701
	addq	%rdx, %rax	# D.23701, D.23702
	movq	(%rax), %rax	# *_41, tem.877
	movq	%rax, -24(%rbp)	# tem.877, tem
	.loc 1 4604 0
	movq	-24(%rbp), %rax	# tem, tem.878
	testq	%rax, %rax	# tem.878
	je	.L1543	#,
	.loc 1 4606 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.879
	movl	-28(%rbp), %edx	# regno, tmp401
	movslq	%edx, %rdx	# tmp401, D.23701
	salq	$3, %rdx	#, D.23701
	addq	%rdx, %rax	# D.23701, D.23702
	movq	(%rax), %rax	# *_47, D.23703
	testq	%rax, %rax	# D.23703
	jne	.L1544	#,
	.loc 1 4606 0 is_stmt 0 discriminator 1
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.880
	testl	%eax, %eax	# num_not_at_initial_offset.880
	je	.L1554	#,
.L1544:
	.loc 1 4608 0 is_stmt 1
	movl	-28(%rbp), %edx	# regno, tmp402
	movq	-56(%rbp), %rax	# ad, tmp403
	movl	%edx, %esi	# tmp402,
	movq	%rax, %rdi	# tmp403,
	call	make_memloc	#
	movq	%rax, -24(%rbp)	# tem.881, tem
	.loc 1 4609 0
	movq	-24(%rbp), %rax	# tem, tem.882
	movq	8(%rax), %rdx	# tem.882_51->fld[0].rtx, D.23703
	movq	-24(%rbp), %rax	# tem, tem.883
	movzbl	2(%rax), %eax	# tem.883_53->mode, D.23704
	movzbl	%al, %eax	# D.23704, D.23705
	movq	%rdx, %rsi	# D.23703,
	movl	%eax, %edi	# D.23705,
	call	strict_memory_address_p	#
	testl	%eax, %eax	# D.23698
	jne	.L1546	#,
	.loc 1 4611 0
	cmpl	$3, -68(%rbp)	#, type
	je	.L1547	#,
	.loc 1 4611 0 is_stmt 0 discriminator 1
	cmpl	$5, -68(%rbp)	#, type
	je	.L1548	#,
	.loc 1 4611 0 discriminator 3
	movl	-68(%rbp), %eax	# type, iftmp.885
	jmp	.L1550	#
.L1548:
	.loc 1 4611 0 discriminator 4
	movl	$6, %eax	#, iftmp.885
	jmp	.L1550	#
.L1547:
	.loc 1 4611 0 discriminator 2
	movl	$4, %eax	#, iftmp.884
.L1550:
	.loc 1 4612 0 is_stmt 1 discriminator 5
	movq	-24(%rbp), %rdx	# tem, tem.886
	.loc 1 4611 0 discriminator 5
	leaq	8(%rdx), %rsi	#, D.23702
	movq	-24(%rbp), %rdx	# tem, tem.887
	movq	8(%rdx), %rdx	# tem.887_64->fld[0].rtx, D.23703
	movq	-24(%rbp), %rcx	# tem, tem.888
	movzbl	2(%rcx), %ecx	# tem.888_66->mode, D.23704
	movzbl	%cl, %edi	# D.23704, D.23705
	movl	-40(%rbp), %r8d	# opnum, tmp404
	movq	24(%rbp), %rcx	# insn, tmp405
	movq	%rcx, 8(%rsp)	# tmp405,
	movl	16(%rbp), %ecx	# ind_levels, tmp406
	movl	%ecx, (%rsp)	# tmp406,
	movl	%eax, %r9d	# iftmp.884,
	movq	%rsi, %rcx	# D.23702,
	movl	$0, %esi	#,
	call	find_reloads_address	#
.L1546:
	.loc 1 4620 0
	cmpl	$0, 16(%rbp)	#, ind_levels
	jle	.L1551	#,
	.loc 1 4621 0
	movq	-24(%rbp), %rdx	# tem, tem.889
	movl	-36(%rbp), %eax	# mode, tmp407
	movq	%rdx, %rsi	# tem.889,
	movl	%eax, %edi	# tmp407,
	call	strict_memory_address_p	#
	testl	%eax, %eax	# D.23698
	je	.L1551	#,
	.loc 1 4622 0
	movq	-24(%rbp), %rax	# tem, tem.890
	movq	8(%rax), %rax	# tem.890_73->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _74->code, D.23699
	cmpw	$61, %ax	#, D.23699
	je	.L1552	#,
	.loc 1 4623 0
	movq	-24(%rbp), %rax	# tem, tem.891
	movq	8(%rax), %rax	# tem.891_76->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _77->code, D.23699
	cmpw	$75, %ax	#, D.23699
	jne	.L1551	#,
	.loc 1 4624 0
	movq	-24(%rbp), %rax	# tem, tem.892
	movq	8(%rax), %rax	# tem.892_79->fld[0].rtx, D.23703
	movq	8(%rax), %rax	# _80->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _81->code, D.23699
	cmpw	$61, %ax	#, D.23699
	jne	.L1551	#,
	.loc 1 4625 0
	movq	-24(%rbp), %rax	# tem, tem.893
	movq	8(%rax), %rax	# tem.893_83->fld[0].rtx, D.23703
	movq	16(%rax), %rax	# _84->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _85->code, D.23699
	cmpw	$67, %ax	#, D.23699
	je	.L1552	#,
	.loc 1 4625 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# tem, tem.894
	movq	8(%rax), %rax	# tem.894_87->fld[0].rtx, D.23703
	movq	16(%rax), %rax	# _88->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _89->code, D.23699
	cmpw	$68, %ax	#, D.23699
	je	.L1552	#,
	movq	-24(%rbp), %rax	# tem, tem.895
	movq	8(%rax), %rax	# tem.895_91->fld[0].rtx, D.23703
	movq	16(%rax), %rax	# _92->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _93->code, D.23699
	cmpw	$54, %ax	#, D.23699
	je	.L1552	#,
	movq	-24(%rbp), %rax	# tem, tem.896
	movq	8(%rax), %rax	# tem.896_95->fld[0].rtx, D.23703
	movq	16(%rax), %rax	# _96->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _97->code, D.23699
	cmpw	$55, %ax	#, D.23699
	je	.L1552	#,
	movq	-24(%rbp), %rax	# tem, tem.897
	movq	8(%rax), %rax	# tem.897_99->fld[0].rtx, D.23703
	movq	16(%rax), %rax	# _100->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _101->code, D.23699
	cmpw	$58, %ax	#, D.23699
	je	.L1552	#,
	movq	-24(%rbp), %rax	# tem, tem.898
	movq	8(%rax), %rax	# tem.898_103->fld[0].rtx, D.23703
	movq	16(%rax), %rax	# _104->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _105->code, D.23699
	cmpw	$134, %ax	#, D.23699
	je	.L1552	#,
	movq	-24(%rbp), %rax	# tem, tem.899
	movq	8(%rax), %rax	# tem.899_107->fld[0].rtx, D.23703
	movq	16(%rax), %rax	# _108->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _109->code, D.23699
	cmpw	$56, %ax	#, D.23699
	je	.L1552	#,
	movq	-24(%rbp), %rax	# tem, tem.900
	movq	8(%rax), %rax	# tem.900_111->fld[0].rtx, D.23703
	movq	16(%rax), %rax	# _112->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _113->code, D.23699
	cmpw	$140, %ax	#, D.23699
	jne	.L1551	#,
.L1552:
	.loc 1 4630 0 is_stmt 1
	movl	replace_reloads(%rip), %eax	# replace_reloads, replace_reloads.901
	testl	%eax, %eax	# replace_reloads.901
	je	.L1553	#,
	.loc 1 4631 0
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.902
	testl	%eax, %eax	# num_not_at_initial_offset.902
	je	.L1553	#,
	.loc 1 4632 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.903
	movl	-28(%rbp), %edx	# regno, tmp408
	movslq	%edx, %rdx	# tmp408, D.23701
	salq	$3, %rdx	#, D.23701
	addq	%rdx, %rax	# D.23701, D.23702
	movq	(%rax), %rdx	# *_120, D.23703
	movq	-24(%rbp), %rax	# tem, tem.904
	movq	%rdx, %rsi	# D.23703,
	movq	%rax, %rdi	# tem.904,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23698
	jne	.L1553	#,
	.loc 1 4634 0
	movq	-24(%rbp), %rdx	# tem, tem.905
	movq	-64(%rbp), %rax	# loc, tmp409
	movq	%rdx, (%rax)	# tem.905, *loc_36(D)
	.loc 1 4638 0
	movq	-56(%rbp), %rax	# ad, tmp410
	movq	%rax, %rdx	# tmp410,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	24(%rbp), %rdx	# insn, tmp411
	movq	%rdx, %rsi	# tmp411,
	movq	%rax, %rdi	# D.23703,
	call	emit_insn_before	#
	movb	$2, 2(%rax)	#, _126->mode
.L1553:
	.loc 1 4644 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1551:
	.loc 1 4646 0
	movq	-24(%rbp), %rax	# tem, tmp412
	movq	%rax, -56(%rbp)	# tmp412, ad
	jmp	.L1554	#
.L1543:
	.loc 1 4654 0
	cmpl	$52, -28(%rbp)	#, regno
	jg	.L1554	#,
	.loc 1 4655 0
	cmpl	$7, -28(%rbp)	#, regno
	jle	.L1555	#,
	.loc 1 4655 0 is_stmt 0 discriminator 1
	cmpl	$16, -28(%rbp)	#, regno
	je	.L1555	#,
	cmpl	$20, -28(%rbp)	#, regno
	je	.L1555	#,
	cmpl	$36, -28(%rbp)	#, regno
	jle	.L1556	#,
	cmpl	$44, -28(%rbp)	#, regno
	jle	.L1555	#,
.L1556:
	.loc 1 4655 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.906
	movl	-28(%rbp), %edx	# regno, tmp413
	movslq	%edx, %rdx	# tmp413, D.23701
	addq	%rdx, %rdx	# D.23701
	addq	%rdx, %rax	# D.23701, D.23706
	movzwl	(%rax), %eax	# *_132, D.23707
	cmpw	$36, %ax	#, D.23699
	jbe	.L1557	#,
	.loc 1 4655 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.907
	movl	-28(%rbp), %edx	# regno, tmp414
	movslq	%edx, %rdx	# tmp414, D.23701
	addq	%rdx, %rdx	# D.23701
	addq	%rdx, %rax	# D.23701, D.23706
	movzwl	(%rax), %eax	# *_138, D.23707
	cmpw	$44, %ax	#, D.23699
	jbe	.L1555	#,
.L1557:
	.loc 1 4655 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.908
	movl	-28(%rbp), %edx	# regno, tmp415
	movslq	%edx, %rdx	# tmp415, D.23701
	addq	%rdx, %rdx	# D.23701
	addq	%rdx, %rax	# D.23701, D.23706
	movzwl	(%rax), %eax	# *_144, D.23707
	cmpw	$7, %ax	#, D.23699
	ja	.L1554	#,
.L1555:
	.loc 1 4656 0 is_stmt 1
	movq	this_insn(%rip), %rsi	# this_insn, this_insn.909
	movl	-28(%rbp), %eax	# regno, regno.910
	movl	-36(%rbp), %edx	# mode, tmp416
	movl	$0, %ecx	#,
	movl	%eax, %edi	# regno.910,
	call	regno_clobbered_p	#
	testl	%eax, %eax	# D.23698
	jne	.L1554	#,
	.loc 1 4657 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1554:
	.loc 1 4661 0
	movq	-56(%rbp), %rax	# ad, tmp417
	movzbl	2(%rax), %eax	# ad_2->mode, D.23704
	.loc 1 4660 0
	movzbl	%al, %esi	# D.23704, D.23705
	movq	-64(%rbp), %rdx	# loc, tmp418
	movq	-56(%rbp), %rax	# ad, tmp419
	movl	-68(%rbp), %ecx	# type, tmp420
	movl	%ecx, 32(%rsp)	# tmp420,
	movl	-40(%rbp), %ecx	# opnum, tmp421
	movl	%ecx, 24(%rsp)	# tmp421,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%esi, %r9d	# D.23705,
	movl	$12, %r8d	#,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp419,
	call	push_reload	#
	.loc 1 4662 0
	movl	$1, %eax	#, D.23698
	jmp	.L1593	#
.L1540:
	.loc 1 4665 0
	movq	-56(%rbp), %rdx	# ad, tmp422
	movl	-36(%rbp), %eax	# mode, tmp423
	movq	%rdx, %rsi	# tmp422,
	movl	%eax, %edi	# tmp423,
	call	strict_memory_address_p	#
	testl	%eax, %eax	# D.23698
	je	.L1558	#,
	.loc 1 4675 0
	movq	-56(%rbp), %rax	# ad, tmp424
	movzwl	(%rax), %eax	# ad_18(D)->code, D.23699
	cmpw	$75, %ax	#, D.23699
	jne	.L1559	#,
	.loc 1 4676 0
	movq	-56(%rbp), %rax	# ad, tmp425
	movq	16(%rax), %rax	# ad_18(D)->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _156->code, D.23699
	cmpw	$54, %ax	#, D.23699
	jne	.L1559	#,
	.loc 1 4677 0
	movq	-56(%rbp), %rax	# ad, tmp426
	movq	8(%rax), %rax	# ad_18(D)->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _158->code, D.23699
	cmpw	$61, %ax	#, D.23699
	jne	.L1559	#,
	.loc 1 4678 0
	movq	reg_equiv_constant(%rip), %rdx	# reg_equiv_constant, reg_equiv_constant.911
	movq	-56(%rbp), %rax	# ad, tmp427
	movq	8(%rax), %rax	# ad_18(D)->fld[0].rtx, D.23703
	movl	8(%rax), %eax	# _161->fld[0].rtuint, D.23700
	movl	%eax, %eax	# D.23700, D.23701
	salq	$3, %rax	#, D.23701
	addq	%rdx, %rax	# reg_equiv_constant.911, D.23702
	movq	(%rax), %rax	# *_165, D.23703
	testq	%rax, %rax	# D.23703
	jne	.L1559	#,
	.loc 1 4679 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1559:
	.loc 1 4681 0
	movl	$0, subst_reg_equivs_changed(%rip)	#, subst_reg_equivs_changed
	.loc 1 4682 0
	movq	24(%rbp), %rdx	# insn, tmp428
	movq	-56(%rbp), %rax	# ad, tmp429
	movq	%rdx, %rsi	# tmp428,
	movq	%rax, %rdi	# tmp429,
	call	subst_reg_equivs	#
	movq	-64(%rbp), %rdx	# loc, tmp430
	movq	%rax, (%rdx)	# D.23703, *loc_36(D)
	.loc 1 4684 0
	movl	subst_reg_equivs_changed(%rip), %eax	# subst_reg_equivs_changed, subst_reg_equivs_changed.912
	testl	%eax, %eax	# subst_reg_equivs_changed.912
	jne	.L1560	#,
	.loc 1 4685 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1560:
	.loc 1 4688 0
	movq	-56(%rbp), %rdx	# ad, tmp431
	movl	-36(%rbp), %eax	# mode, tmp432
	movq	%rdx, %rsi	# tmp431,
	movl	%eax, %edi	# tmp432,
	call	strict_memory_address_p	#
	testl	%eax, %eax	# D.23698
	je	.L1558	#,
	.loc 1 4689 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1558:
	.loc 1 4713 0
	movq	-56(%rbp), %rax	# ad, tmp433
	movzwl	(%rax), %eax	# ad_18(D)->code, D.23699
	cmpw	$83, %ax	#, D.23699
	jne	.L1561	#,
	.loc 1 4715 0
	movl	$1, -32(%rbp)	#, removed_and
	.loc 1 4716 0
	movq	-56(%rbp), %rax	# ad, tmp437
	addq	$8, %rax	#, tmp436
	movq	%rax, -64(%rbp)	# tmp436, loc
	.loc 1 4717 0
	movq	-64(%rbp), %rax	# loc, tmp438
	movq	(%rax), %rax	# *loc_175, tmp439
	movq	%rax, -56(%rbp)	# tmp439, ad
.L1561:
	.loc 1 4726 0
	movq	-56(%rbp), %rax	# ad, tmp440
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$66, %ax	#, D.23699
	jne	.L1562	#,
	.loc 1 4730 0
	movq	-56(%rbp), %rax	# ad, tmp441
	movq	%rax, -24(%rbp)	# tmp441, tem
	.loc 1 4731 0
	cmpl	$0, 16(%rbp)	#, ind_levels
	je	.L1563	#,
	.loc 1 4731 0 is_stmt 0 discriminator 1
	movl	16(%rbp), %eax	# ind_levels, tmp442
	leal	-1(%rax), %edx	#, iftmp.913
	jmp	.L1564	#
.L1563:
	.loc 1 4731 0 discriminator 2
	movl	$0, %edx	#, iftmp.913
.L1564:
	.loc 1 4731 0 discriminator 3
	cmpl	$3, -68(%rbp)	#, type
	je	.L1565	#,
	.loc 1 4731 0 discriminator 4
	cmpl	$5, -68(%rbp)	#, type
	je	.L1566	#,
	.loc 1 4731 0 discriminator 6
	movl	-68(%rbp), %eax	# type, iftmp.915
	jmp	.L1568	#
.L1566:
	.loc 1 4731 0 discriminator 7
	movl	$6, %eax	#, iftmp.915
	jmp	.L1568	#
.L1565:
	.loc 1 4731 0 discriminator 5
	movl	$4, %eax	#, iftmp.914
.L1568:
	.loc 1 4731 0 discriminator 8
	movq	-56(%rbp), %rcx	# ad, tmp443
	leaq	8(%rcx), %r11	#, D.23702
	movq	-56(%rbp), %rcx	# ad, tmp444
	movq	8(%rcx), %r10	# ad_3->fld[0].rtx, D.23703
	movq	-56(%rbp), %rcx	# ad, tmp445
	movzbl	2(%rcx), %ecx	# ad_3->mode, D.23704
	movzbl	%cl, %edi	# D.23704, D.23705
	movl	-40(%rbp), %r8d	# opnum, tmp446
	leaq	-24(%rbp), %rsi	#, tmp447
	movq	24(%rbp), %rcx	# insn, tmp448
	movq	%rcx, 8(%rsp)	# tmp448,
	movl	%edx, (%rsp)	# iftmp.913,
	movl	%eax, %r9d	# iftmp.914,
	movq	%r11, %rcx	# D.23702,
	movq	%r10, %rdx	# D.23703,
	call	find_reloads_address	#
	.loc 1 4737 0 is_stmt 1 discriminator 8
	movq	-24(%rbp), %rax	# tem, tem.916
	cmpq	-56(%rbp), %rax	# ad, tem.916
	je	.L1569	#,
	.loc 1 4737 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, memrefloc
	je	.L1569	#,
	.loc 1 4739 0 is_stmt 1
	movq	-48(%rbp), %rax	# memrefloc, tmp449
	movq	(%rax), %rax	# *memrefloc_189(D), D.23703
	movq	%rax, %rdi	# D.23703,
	call	copy_rtx	#
	movq	-48(%rbp), %rdx	# memrefloc, tmp450
	movq	%rax, (%rdx)	# D.23703, *memrefloc_189(D)
	.loc 1 4740 0
	movq	-48(%rbp), %rax	# memrefloc, tmp451
	movq	(%rax), %rax	# *memrefloc_189(D), D.23703
	movq	8(%rax), %rdx	# _192->fld[0].rtx, D.23703
	movq	-24(%rbp), %rax	# tem, tem.917
	movq	%rdx, %rsi	# D.23703,
	movq	%rax, %rdi	# tem.917,
	call	copy_replacements	#
	.loc 1 4741 0
	movq	-48(%rbp), %rax	# memrefloc, tmp452
	movq	(%rax), %rax	# *memrefloc_189(D), D.23703
	addq	$8, %rax	#, tmp453
	movq	%rax, -64(%rbp)	# tmp453, loc
	.loc 1 4742 0
	cmpl	$0, -32(%rbp)	#, removed_and
	je	.L1569	#,
	.loc 1 4743 0
	movq	-64(%rbp), %rax	# loc, tmp454
	movq	(%rax), %rax	# *loc_196, D.23703
	addq	$8, %rax	#, tmp455
	movq	%rax, -64(%rbp)	# tmp455, loc
.L1569:
	.loc 1 4750 0
	cmpl	$0, 16(%rbp)	#, ind_levels
	je	.L1570	#,
	.loc 1 4751 0
	movq	-24(%rbp), %rax	# tem, tem.918
	movq	8(%rax), %rax	# tem.918_199->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _200->code, D.23699
	cmpw	$68, %ax	#, D.23699
	jne	.L1571	#,
	.loc 1 4751 0 is_stmt 0 discriminator 1
	movzbl	indirect_symref_ok(%rip), %eax	# indirect_symref_ok, indirect_symref_ok.919
	testb	%al, %al	# indirect_symref_ok.919
	je	.L1570	#,
.L1571:
	.loc 1 4752 0 is_stmt 1
	movq	-24(%rbp), %rax	# tem, tem.920
	movq	8(%rax), %rax	# tem.920_203->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _204->code, D.23699
	cmpw	$66, %ax	#, D.23699
	je	.L1570	#,
	.loc 1 4753 0
	movq	-24(%rbp), %rax	# tem, tem.921
	movq	8(%rax), %rax	# tem.921_206->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _207->code, D.23699
	cmpw	$61, %ax	#, D.23699
	je	.L1572	#,
	.loc 1 4754 0 discriminator 1
	movq	-24(%rbp), %rax	# tem, tem.922
	movq	8(%rax), %rax	# tem.922_209->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _210->code, D.23699
	.loc 1 4753 0 discriminator 1
	cmpw	$75, %ax	#, D.23699
	jne	.L1570	#,
	.loc 1 4755 0
	movq	-24(%rbp), %rax	# tem, tem.923
	movq	8(%rax), %rax	# tem.923_212->fld[0].rtx, D.23703
	movq	8(%rax), %rax	# _213->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _214->code, D.23699
	cmpw	$61, %ax	#, D.23699
	jne	.L1570	#,
	.loc 1 4756 0
	movq	-24(%rbp), %rax	# tem, tem.924
	movq	8(%rax), %rax	# tem.924_216->fld[0].rtx, D.23703
	movq	16(%rax), %rax	# _217->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _218->code, D.23699
	cmpw	$54, %ax	#, D.23699
	je	.L1572	#,
.L1570:
	.loc 1 4761 0
	movq	-24(%rbp), %rax	# tem, tem.925
	movzbl	2(%rax), %eax	# tem.925_221->mode, D.23704
	.loc 1 4760 0
	movzbl	%al, %esi	# D.23704, D.23705
	movq	-24(%rbp), %rax	# tem, tem.926
	movq	-64(%rbp), %rdx	# loc, tmp456
	movl	-68(%rbp), %ecx	# type, tmp457
	movl	%ecx, 32(%rsp)	# tmp457,
	movl	-40(%rbp), %ecx	# opnum, tmp458
	movl	%ecx, 24(%rsp)	# tmp458,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%esi, %r9d	# D.23705,
	movl	$12, %r8d	#,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tem.926,
	call	push_reload	#
	.loc 1 4764 0
	cmpl	$0, -32(%rbp)	#, removed_and
	sete	%al	#, D.23708
	movzbl	%al, %eax	# D.23708, D.23698
	jmp	.L1593	#
.L1572:
	.loc 1 4767 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1562:
	.loc 1 4775 0
	movq	-56(%rbp), %rax	# ad, tmp459
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$75, %ax	#, D.23699
	jne	.L1573	#,
	.loc 1 4776 0
	movq	-56(%rbp), %rax	# ad, tmp460
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _228->code, D.23699
	cmpw	$61, %ax	#, D.23699
	jne	.L1573	#,
	.loc 1 4777 0
	movq	-56(%rbp), %rax	# ad, tmp461
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movl	8(%rax), %eax	# _230->fld[0].rtuint, D.23700
	cmpl	$52, %eax	#, D.23700
	ja	.L1573	#,
	.loc 1 4778 0
	movq	-56(%rbp), %rax	# ad, tmp462
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movl	8(%rax), %eax	# _232->fld[0].rtuint, D.23700
	cmpl	$7, %eax	#, D.23700
	jbe	.L1574	#,
	.loc 1 4778 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# ad, tmp463
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movl	8(%rax), %eax	# _234->fld[0].rtuint, D.23700
	cmpl	$16, %eax	#, D.23700
	je	.L1574	#,
	movq	-56(%rbp), %rax	# ad, tmp464
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movl	8(%rax), %eax	# _236->fld[0].rtuint, D.23700
	cmpl	$20, %eax	#, D.23700
	je	.L1574	#,
	movq	-56(%rbp), %rax	# ad, tmp465
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movl	8(%rax), %eax	# _238->fld[0].rtuint, D.23700
	cmpl	$36, %eax	#, D.23700
	jbe	.L1575	#,
	movq	-56(%rbp), %rax	# ad, tmp466
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movl	8(%rax), %eax	# _240->fld[0].rtuint, D.23700
	cmpl	$44, %eax	#, D.23700
	jbe	.L1574	#,
.L1575:
	.loc 1 4778 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.927
	movq	-56(%rbp), %rax	# ad, tmp467
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movl	8(%rax), %eax	# _243->fld[0].rtuint, D.23700
	movl	%eax, %eax	# D.23700, D.23701
	addq	%rax, %rax	# D.23701
	addq	%rdx, %rax	# reg_renumber.927, D.23706
	movzwl	(%rax), %eax	# *_247, D.23707
	cmpw	$36, %ax	#, D.23699
	jbe	.L1576	#,
	.loc 1 4778 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.928
	movq	-56(%rbp), %rax	# ad, tmp468
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movl	8(%rax), %eax	# _251->fld[0].rtuint, D.23700
	movl	%eax, %eax	# D.23700, D.23701
	addq	%rax, %rax	# D.23701
	addq	%rdx, %rax	# reg_renumber.928, D.23706
	movzwl	(%rax), %eax	# *_255, D.23707
	cmpw	$44, %ax	#, D.23699
	jbe	.L1574	#,
.L1576:
	.loc 1 4778 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.929
	movq	-56(%rbp), %rax	# ad, tmp469
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movl	8(%rax), %eax	# _259->fld[0].rtuint, D.23700
	movl	%eax, %eax	# D.23700, D.23701
	addq	%rax, %rax	# D.23701
	addq	%rdx, %rax	# reg_renumber.929, D.23706
	movzwl	(%rax), %eax	# *_263, D.23707
	cmpw	$7, %ax	#, D.23699
	ja	.L1573	#,
.L1574:
	.loc 1 4779 0 is_stmt 1
	movq	-56(%rbp), %rax	# ad, tmp470
	movq	16(%rax), %rax	# ad_3->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _266->code, D.23699
	cmpw	$54, %ax	#, D.23699
	jne	.L1573	#,
	.loc 1 4782 0
	cmpq	$0, -48(%rbp)	#, memrefloc
	je	.L1577	#,
	.loc 1 4784 0
	movq	-48(%rbp), %rax	# memrefloc, tmp471
	movq	(%rax), %rax	# *memrefloc_189(D), D.23703
	movq	%rax, %rdi	# D.23703,
	call	copy_rtx	#
	movq	-48(%rbp), %rdx	# memrefloc, tmp472
	movq	%rax, (%rdx)	# D.23703, *memrefloc_189(D)
	.loc 1 4785 0
	movq	-48(%rbp), %rax	# memrefloc, tmp473
	movq	(%rax), %rax	# *memrefloc_189(D), D.23703
	addq	$8, %rax	#, tmp474
	movq	%rax, -64(%rbp)	# tmp474, loc
	.loc 1 4786 0
	cmpl	$0, -32(%rbp)	#, removed_and
	je	.L1577	#,
	.loc 1 4787 0
	movq	-64(%rbp), %rax	# loc, tmp475
	movq	(%rax), %rax	# *loc_271, D.23703
	addq	$8, %rax	#, tmp476
	movq	%rax, -64(%rbp)	# tmp476, loc
.L1577:
	.loc 1 4790 0
	movzbl	double_reg_address_ok(%rip), %eax	# double_reg_address_ok, double_reg_address_ok.930
	testb	%al, %al	# double_reg_address_ok.930
	je	.L1578	#,
	.loc 1 4793 0
	movq	-56(%rbp), %rax	# ad, tmp477
	movq	%rax, %rdi	# tmp477,
	call	copy_rtx	#
	movq	%rax, -56(%rbp)	# tmp478, ad
	movq	-64(%rbp), %rax	# loc, tmp479
	movq	-56(%rbp), %rdx	# ad, tmp480
	movq	%rdx, (%rax)	# tmp480, *loc_6
	.loc 1 4798 0
	movq	-56(%rbp), %rax	# ad, tmp481
	movzbl	2(%rax), %eax	# ad_275->mode, D.23704
	.loc 1 4797 0
	movzbl	%al, %edx	# D.23704, D.23705
	movq	-56(%rbp), %rax	# ad, tmp482
	leaq	16(%rax), %rsi	#, D.23702
	movq	-56(%rbp), %rax	# ad, tmp483
	movq	16(%rax), %rax	# ad_275->fld[1].rtx, D.23703
	movl	-68(%rbp), %r8d	# type, tmp484
	movl	-40(%rbp), %edi	# opnum, tmp485
	movl	16(%rbp), %ecx	# ind_levels, tmp486
	movl	%ecx, (%rsp)	# tmp486,
	movl	%r8d, %r9d	# tmp484,
	movl	%edi, %r8d	# tmp485,
	movl	%edx, %ecx	# D.23705,
	movl	$10, %edx	#,
	movq	%rax, %rdi	# D.23703,
	call	find_reloads_address_part	#
	.loc 1 4800 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1578:
	.loc 1 4808 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.932
	andl	$33554432, %eax	#, D.23698
	.loc 1 4807 0
	testl	%eax, %eax	# D.23698
	je	.L1579	#,
	.loc 1 4807 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.931
	jmp	.L1580	#
.L1579:
	.loc 1 4807 0 discriminator 2
	movl	$4, %eax	#, iftmp.931
.L1580:
	.loc 1 4807 0 discriminator 3
	movl	-68(%rbp), %r8d	# type, tmp487
	movl	-40(%rbp), %ecx	# opnum, tmp488
	movq	-64(%rbp), %rsi	# loc, tmp489
	movq	-56(%rbp), %rdi	# ad, tmp490
	movl	16(%rbp), %edx	# ind_levels, tmp491
	movl	%edx, (%rsp)	# tmp491,
	movl	%r8d, %r9d	# tmp487,
	movl	%ecx, %r8d	# tmp488,
	movl	%eax, %ecx	# iftmp.931,
	movl	$12, %edx	#,
	call	find_reloads_address_part	#
	.loc 1 4810 0 is_stmt 1 discriminator 3
	cmpl	$0, -32(%rbp)	#, removed_and
	sete	%al	#, D.23708
	movzbl	%al, %eax	# D.23708, D.23698
	jmp	.L1593	#
.L1573:
	.loc 1 4834 0
	movq	-56(%rbp), %rax	# ad, tmp492
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$75, %ax	#, D.23699
	jne	.L1581	#,
	.loc 1 4834 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# ad, tmp493
	movq	16(%rax), %rax	# ad_3->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _288->code, D.23699
	cmpw	$54, %ax	#, D.23699
	jne	.L1581	#,
	.loc 1 4835 0 is_stmt 1
	movq	-56(%rbp), %rax	# ad, tmp494
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _290->code, D.23699
	cmpw	$75, %ax	#, D.23699
	jne	.L1581	#,
	.loc 1 4836 0
	movq	-56(%rbp), %rax	# ad, tmp495
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	8(%rax), %rdx	# _292->fld[0].rtx, D.23703
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.23703
	cmpq	%rax, %rdx	# D.23703, D.23703
	je	.L1582	#,
	.loc 1 4838 0
	movq	-56(%rbp), %rax	# ad, tmp496
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	8(%rax), %rdx	# _295->fld[0].rtx, D.23703
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.23703
	cmpq	%rax, %rdx	# D.23703, D.23703
	je	.L1582	#,
	.loc 1 4841 0
	movq	-56(%rbp), %rax	# ad, tmp497
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	8(%rax), %rdx	# _298->fld[0].rtx, D.23703
	movq	global_rtl+40(%rip), %rax	# global_rtl, D.23703
	cmpq	%rax, %rdx	# D.23703, D.23703
	je	.L1582	#,
	.loc 1 4843 0
	movq	-56(%rbp), %rax	# ad, tmp498
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	8(%rax), %rdx	# _301->fld[0].rtx, D.23703
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23703
	cmpq	%rax, %rdx	# D.23703, D.23703
	jne	.L1581	#,
.L1582:
	.loc 1 4844 0
	movq	-56(%rbp), %rdx	# ad, tmp499
	movl	-36(%rbp), %eax	# mode, tmp500
	movq	%rdx, %rsi	# tmp499,
	movl	%eax, %edi	# tmp500,
	call	memory_address_p	#
	testl	%eax, %eax	# D.23698
	jne	.L1581	#,
	.loc 1 4846 0
	movq	-56(%rbp), %rax	# ad, tmp501
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	16(%rax), %rbx	# _305->fld[1].rtx, D.23703
	movq	-56(%rbp), %rax	# ad, tmp502
	movq	16(%rax), %rax	# ad_3->fld[1].rtx, D.23703
	movq	8(%rax), %rdx	# _307->fld[0].rtwint, D.23709
	movq	-56(%rbp), %rax	# ad, tmp503
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	8(%rax), %rax	# _309->fld[0].rtx, D.23703
	movq	%rdx, %rsi	# D.23709,
	movq	%rax, %rdi	# D.23703,
	call	plus_constant_wide	#
	movq	%rax, %rdx	#, D.23703
	movq	-56(%rbp), %rax	# ad, tmp504
	movzbl	2(%rax), %eax	# ad_3->mode, D.23704
	movzbl	%al, %eax	# D.23704, D.23705
	movq	%rbx, %rcx	# D.23703,
	movl	%eax, %esi	# D.23705,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -56(%rbp)	# tmp505, ad
	movq	-64(%rbp), %rax	# loc, tmp506
	movq	-56(%rbp), %rdx	# ad, tmp507
	movq	%rdx, (%rax)	# tmp507, *loc_4
	.loc 1 4852 0
	movq	-56(%rbp), %rax	# ad, tmp508
	movzbl	2(%rax), %eax	# ad_314->mode, D.23704
	.loc 1 4850 0
	movzbl	%al, %edx	# D.23704, D.23705
	movq	-56(%rbp), %rax	# ad, tmp509
	leaq	8(%rax), %rsi	#, D.23702
	movq	-56(%rbp), %rax	# ad, tmp510
	movq	8(%rax), %rax	# ad_314->fld[0].rtx, D.23703
	movl	-68(%rbp), %r8d	# type, tmp511
	movl	-40(%rbp), %edi	# opnum, tmp512
	movl	16(%rbp), %ecx	# ind_levels, tmp513
	movl	%ecx, (%rsp)	# tmp513,
	movl	%r8d, %r9d	# tmp511,
	movl	%edi, %r8d	# tmp512,
	movl	%edx, %ecx	# D.23705,
	movl	$12, %edx	#,
	movq	%rax, %rdi	# D.23703,
	call	find_reloads_address_part	#
	.loc 1 4853 0
	movq	-56(%rbp), %rax	# ad, tmp514
	leaq	16(%rax), %rcx	#, D.23702
	movq	-56(%rbp), %rax	# ad, tmp515
	movq	16(%rax), %rsi	# ad_314->fld[1].rtx, D.23703
	movl	-68(%rbp), %r8d	# type, tmp516
	movl	-40(%rbp), %edi	# opnum, tmp517
	movl	-36(%rbp), %eax	# mode, tmp518
	movq	24(%rbp), %rdx	# insn, tmp519
	movq	%rdx, 8(%rsp)	# tmp519,
	movl	$0, (%rsp)	#,
	movl	%r8d, %r9d	# tmp516,
	movl	%edi, %r8d	# tmp517,
	movl	$1, %edx	#,
	movl	%eax, %edi	# tmp518,
	call	find_reloads_address_1	#
	.loc 1 4856 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1581:
	.loc 1 4859 0
	movq	-56(%rbp), %rax	# ad, tmp520
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$75, %ax	#, D.23699
	jne	.L1583	#,
	.loc 1 4859 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# ad, tmp521
	movq	16(%rax), %rax	# ad_3->fld[1].rtx, D.23703
	movzwl	(%rax), %eax	# _323->code, D.23699
	cmpw	$54, %ax	#, D.23699
	jne	.L1583	#,
	.loc 1 4860 0 is_stmt 1
	movq	-56(%rbp), %rax	# ad, tmp522
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movzwl	(%rax), %eax	# _325->code, D.23699
	cmpw	$75, %ax	#, D.23699
	jne	.L1583	#,
	.loc 1 4861 0
	movq	-56(%rbp), %rax	# ad, tmp523
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	16(%rax), %rdx	# _327->fld[1].rtx, D.23703
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.23703
	cmpq	%rax, %rdx	# D.23703, D.23703
	je	.L1584	#,
	.loc 1 4863 0
	movq	-56(%rbp), %rax	# ad, tmp524
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	16(%rax), %rdx	# _330->fld[1].rtx, D.23703
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.23703
	cmpq	%rax, %rdx	# D.23703, D.23703
	je	.L1584	#,
	.loc 1 4866 0
	movq	-56(%rbp), %rax	# ad, tmp525
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	16(%rax), %rdx	# _333->fld[1].rtx, D.23703
	movq	global_rtl+40(%rip), %rax	# global_rtl, D.23703
	cmpq	%rax, %rdx	# D.23703, D.23703
	je	.L1584	#,
	.loc 1 4868 0
	movq	-56(%rbp), %rax	# ad, tmp526
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	16(%rax), %rdx	# _336->fld[1].rtx, D.23703
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23703
	cmpq	%rax, %rdx	# D.23703, D.23703
	jne	.L1583	#,
.L1584:
	.loc 1 4869 0
	movq	-56(%rbp), %rdx	# ad, tmp527
	movl	-36(%rbp), %eax	# mode, tmp528
	movq	%rdx, %rsi	# tmp527,
	movl	%eax, %edi	# tmp528,
	call	memory_address_p	#
	testl	%eax, %eax	# D.23698
	jne	.L1583	#,
	.loc 1 4871 0
	movq	-56(%rbp), %rax	# ad, tmp529
	movq	16(%rax), %rax	# ad_3->fld[1].rtx, D.23703
	movq	8(%rax), %rdx	# _340->fld[0].rtwint, D.23709
	movq	-56(%rbp), %rax	# ad, tmp530
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	16(%rax), %rax	# _342->fld[1].rtx, D.23703
	movq	%rdx, %rsi	# D.23709,
	movq	%rax, %rdi	# D.23703,
	call	plus_constant_wide	#
	movq	%rax, %rcx	#, D.23703
	movq	-56(%rbp), %rax	# ad, tmp531
	movq	8(%rax), %rax	# ad_3->fld[0].rtx, D.23703
	movq	8(%rax), %rdx	# _345->fld[0].rtx, D.23703
	movq	-56(%rbp), %rax	# ad, tmp532
	movzbl	2(%rax), %eax	# ad_3->mode, D.23704
	movzbl	%al, %eax	# D.23704, D.23705
	movl	%eax, %esi	# D.23705,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -56(%rbp)	# tmp533, ad
	movq	-64(%rbp), %rax	# loc, tmp534
	movq	-56(%rbp), %rdx	# ad, tmp535
	movq	%rdx, (%rax)	# tmp535, *loc_4
	.loc 1 4877 0
	movq	-56(%rbp), %rax	# ad, tmp536
	movzbl	2(%rax), %eax	# ad_349->mode, D.23704
	.loc 1 4875 0
	movzbl	%al, %edx	# D.23704, D.23705
	movq	-56(%rbp), %rax	# ad, tmp537
	leaq	16(%rax), %rsi	#, D.23702
	movq	-56(%rbp), %rax	# ad, tmp538
	movq	16(%rax), %rax	# ad_349->fld[1].rtx, D.23703
	movl	-68(%rbp), %r8d	# type, tmp539
	movl	-40(%rbp), %edi	# opnum, tmp540
	movl	16(%rbp), %ecx	# ind_levels, tmp541
	movl	%ecx, (%rsp)	# tmp541,
	movl	%r8d, %r9d	# tmp539,
	movl	%edi, %r8d	# tmp540,
	movl	%edx, %ecx	# D.23705,
	movl	$12, %edx	#,
	movq	%rax, %rdi	# D.23703,
	call	find_reloads_address_part	#
	.loc 1 4878 0
	movq	-56(%rbp), %rax	# ad, tmp542
	leaq	8(%rax), %rcx	#, D.23702
	movq	-56(%rbp), %rax	# ad, tmp543
	movq	8(%rax), %rsi	# ad_349->fld[0].rtx, D.23703
	movl	-68(%rbp), %r8d	# type, tmp544
	movl	-40(%rbp), %edi	# opnum, tmp545
	movl	-36(%rbp), %eax	# mode, tmp546
	movq	24(%rbp), %rdx	# insn, tmp547
	movq	%rdx, 8(%rsp)	# tmp547,
	movl	$0, (%rsp)	#,
	movl	%r8d, %r9d	# tmp544,
	movl	%edi, %r8d	# tmp545,
	movl	$1, %edx	#,
	movl	%eax, %edi	# tmp546,
	call	find_reloads_address_1	#
	.loc 1 4881 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1583:
	.loc 1 4887 0
	movq	-56(%rbp), %rax	# ad, tmp548
	movq	%rax, -24(%rbp)	# tmp548, tem
	.loc 1 4888 0
	movq	-56(%rbp), %rax	# ad, tmp549
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$75, %ax	#, D.23699
	jne	.L1585	#,
	.loc 1 4889 0
	movq	-56(%rbp), %rax	# ad, tmp550
	movq	%rax, %rdi	# tmp550,
	call	subst_indexed_address	#
	movq	%rax, -24(%rbp)	# tem.933, tem
.L1585:
	.loc 1 4890 0
	movq	-24(%rbp), %rax	# tem, tem.934
	cmpq	-56(%rbp), %rax	# ad, tem.934
	je	.L1586	#,
	.loc 1 4890 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rdx	# tem, tem.935
	movl	-36(%rbp), %eax	# mode, tmp551
	movq	%rdx, %rsi	# tem.935,
	movl	%eax, %edi	# tmp551,
	call	strict_memory_address_p	#
	testl	%eax, %eax	# D.23698
	je	.L1586	#,
	.loc 1 4895 0 is_stmt 1
	movl	$0, subst_reg_equivs_changed(%rip)	#, subst_reg_equivs_changed
	.loc 1 4896 0
	movq	-24(%rbp), %rax	# tem, tem.936
	movq	24(%rbp), %rdx	# insn, tmp552
	movq	%rdx, %rsi	# tmp552,
	movq	%rax, %rdi	# tem.936,
	call	subst_reg_equivs	#
	movq	%rax, -24(%rbp)	# tem.937, tem
	.loc 1 4900 0
	movl	subst_reg_equivs_changed(%rip), %eax	# subst_reg_equivs_changed, subst_reg_equivs_changed.938
	testl	%eax, %eax	# subst_reg_equivs_changed.938
	je	.L1587	#,
	.loc 1 4900 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rdx	# tem, tem.939
	movl	-36(%rbp), %eax	# mode, tmp553
	movq	%rdx, %rsi	# tem.939,
	movl	%eax, %edi	# tmp553,
	call	strict_memory_address_p	#
	testl	%eax, %eax	# D.23698
	je	.L1586	#,
.L1587:
	.loc 1 4902 0 is_stmt 1
	movq	-24(%rbp), %rdx	# tem, tem.940
	movq	-64(%rbp), %rax	# loc, tmp554
	movq	%rdx, (%rax)	# tem.940, *loc_4
	.loc 1 4903 0
	movl	$0, %eax	#, D.23698
	jmp	.L1593	#
.L1586:
	.loc 1 4909 0
	movq	-56(%rbp), %rax	# ad, tmp555
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$67, %ax	#, D.23699
	je	.L1588	#,
	.loc 1 4909 0 is_stmt 0 discriminator 2
	movq	-56(%rbp), %rax	# ad, tmp556
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$68, %ax	#, D.23699
	je	.L1588	#,
	.loc 1 4909 0 discriminator 1
	movq	-56(%rbp), %rax	# ad, tmp557
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$54, %ax	#, D.23699
	je	.L1588	#,
	movq	-56(%rbp), %rax	# ad, tmp558
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$55, %ax	#, D.23699
	je	.L1588	#,
	movq	-56(%rbp), %rax	# ad, tmp559
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$58, %ax	#, D.23699
	je	.L1588	#,
	movq	-56(%rbp), %rax	# ad, tmp560
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$134, %ax	#, D.23699
	je	.L1588	#,
	movq	-56(%rbp), %rax	# ad, tmp561
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$56, %ax	#, D.23699
	je	.L1588	#,
	movq	-56(%rbp), %rax	# ad, tmp562
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$140, %ax	#, D.23699
	jne	.L1589	#,
.L1588:
	movq	-56(%rbp), %rdx	# ad, tmp563
	movl	-36(%rbp), %eax	# mode, tmp564
	movq	%rdx, %rsi	# tmp563,
	movl	%eax, %edi	# tmp564,
	call	strict_memory_address_p	#
	testl	%eax, %eax	# D.23698
	jne	.L1589	#,
	.loc 1 4913 0 is_stmt 1
	cmpq	$0, -48(%rbp)	#, memrefloc
	je	.L1590	#,
	.loc 1 4913 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# ad, tmp565
	movzwl	(%rax), %eax	# ad_3->code, D.23699
	cmpw	$68, %ax	#, D.23699
	jne	.L1590	#,
	.loc 1 4914 0 is_stmt 1
	movq	-56(%rbp), %rax	# ad, tmp566
	movzbl	3(%rax), %eax	# *ad_3, D.23704
	andl	$4, %eax	#, D.23704
	testb	%al, %al	# D.23704
	je	.L1590	#,
	.loc 1 4916 0
	movq	-48(%rbp), %rax	# memrefloc, tmp567
	movq	(%rax), %rax	# *memrefloc_189(D), D.23703
	movq	%rax, %rdi	# D.23703,
	call	copy_rtx	#
	movq	-48(%rbp), %rdx	# memrefloc, tmp568
	movq	%rax, (%rdx)	# D.23703, *memrefloc_189(D)
	.loc 1 4917 0
	movq	-48(%rbp), %rax	# memrefloc, tmp569
	movq	(%rax), %rax	# *memrefloc_189(D), D.23703
	addq	$8, %rax	#, tmp570
	movq	%rax, -64(%rbp)	# tmp570, loc
	.loc 1 4918 0
	cmpl	$0, -32(%rbp)	#, removed_and
	je	.L1590	#,
	.loc 1 4919 0
	movq	-64(%rbp), %rax	# loc, tmp571
	movq	(%rax), %rax	# *loc_384, D.23703
	addq	$8, %rax	#, tmp572
	movq	%rax, -64(%rbp)	# tmp572, loc
.L1590:
	.loc 1 4923 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.942
	andl	$33554432, %eax	#, D.23698
	.loc 1 4922 0
	testl	%eax, %eax	# D.23698
	je	.L1591	#,
	.loc 1 4922 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.941
	jmp	.L1592	#
.L1591:
	.loc 1 4922 0 discriminator 2
	movl	$4, %eax	#, iftmp.941
.L1592:
	.loc 1 4922 0 discriminator 3
	movl	-68(%rbp), %r8d	# type, tmp573
	movl	-40(%rbp), %ecx	# opnum, tmp574
	movq	-64(%rbp), %rsi	# loc, tmp575
	movq	-56(%rbp), %rdi	# ad, tmp576
	movl	16(%rbp), %edx	# ind_levels, tmp577
	movl	%edx, (%rsp)	# tmp577,
	movl	%r8d, %r9d	# tmp573,
	movl	%ecx, %r8d	# tmp574,
	movl	%eax, %ecx	# iftmp.941,
	movl	$12, %edx	#,
	call	find_reloads_address_part	#
	.loc 1 4924 0 is_stmt 1 discriminator 3
	cmpl	$0, -32(%rbp)	#, removed_and
	sete	%al	#, D.23708
	movzbl	%al, %eax	# D.23708, D.23698
	jmp	.L1593	#
.L1589:
	.loc 1 4927 0
	movl	-68(%rbp), %r8d	# type, tmp578
	movl	-40(%rbp), %edi	# opnum, tmp579
	movq	-64(%rbp), %rdx	# loc, tmp580
	movq	-56(%rbp), %rsi	# ad, tmp581
	movl	-36(%rbp), %eax	# mode, tmp582
	movq	24(%rbp), %rcx	# insn, tmp583
	movq	%rcx, 8(%rsp)	# tmp583,
	movl	16(%rbp), %ecx	# ind_levels, tmp584
	movl	%ecx, (%rsp)	# tmp584,
	movl	%r8d, %r9d	# tmp578,
	movl	%edi, %r8d	# tmp579,
	movq	%rdx, %rcx	# tmp580,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp582,
	call	find_reloads_address_1	#
.L1593:
	.loc 1 4929 0
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE25:
	.size	find_reloads_address, .-find_reloads_address
	.type	subst_reg_equivs, @function
subst_reg_equivs:
.LFB26:
	.loc 1 4941 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# ad, ad
	movq	%rsi, -48(%rbp)	# insn, insn
	.loc 1 4942 0
	movq	-40(%rbp), %rax	# ad, tmp99
	movzwl	(%rax), %eax	# ad_3(D)->code, D.23711
	movzwl	%ax, %eax	# D.23711, tmp100
	movl	%eax, -24(%rbp)	# tmp100, code
	.loc 1 4946 0
	movl	-24(%rbp), %eax	# code, tmp102
	subl	$54, %eax	#, tmp101
	cmpl	$80, %eax	#, tmp101
	ja	.L1608	#,
	movl	%eax, %eax	# tmp101, tmp103
	movq	.L1597(,%rax,8), %rax	#, tmp104
	jmp	*%rax	# tmp104
	.section	.rodata
	.align 8
	.align 4
.L1597:
	.quad	.L1596
	.quad	.L1596
	.quad	.L1596
	.quad	.L1608
	.quad	.L1596
	.quad	.L1596
	.quad	.L1608
	.quad	.L1598
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1596
	.quad	.L1596
	.quad	.L1596
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1599
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1608
	.quad	.L1596
	.text
.L1596:
	.loc 1 4957 0
	movq	-40(%rbp), %rax	# ad, D.23710
	jmp	.L1600	#
.L1598:
.LBB57:
	.loc 1 4961 0
	movq	-40(%rbp), %rax	# ad, tmp105
	movl	8(%rax), %eax	# ad_3(D)->fld[0].rtuint, D.23712
	movl	%eax, -20(%rbp)	# D.23712, regno
	.loc 1 4963 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.943
	movl	-20(%rbp), %edx	# regno, tmp106
	movslq	%edx, %rdx	# tmp106, D.23713
	salq	$3, %rdx	#, D.23713
	addq	%rdx, %rax	# D.23713, D.23714
	movq	(%rax), %rax	# *_12, D.23715
	testq	%rax, %rax	# D.23715
	je	.L1601	#,
	.loc 1 4965 0
	movl	$1, subst_reg_equivs_changed(%rip)	#, subst_reg_equivs_changed
	.loc 1 4966 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.944
	movl	-20(%rbp), %edx	# regno, tmp107
	movslq	%edx, %rdx	# tmp107, D.23713
	salq	$3, %rdx	#, D.23713
	addq	%rdx, %rax	# D.23713, D.23714
	movq	(%rax), %rax	# *_17, D.23710
	jmp	.L1600	#
.L1601:
	.loc 1 4968 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.945
	movl	-20(%rbp), %edx	# regno, tmp108
	movslq	%edx, %rdx	# tmp108, D.23713
	salq	$3, %rdx	#, D.23713
	addq	%rdx, %rax	# D.23713, D.23714
	movq	(%rax), %rax	# *_22, D.23715
	testq	%rax, %rax	# D.23715
	je	.L1602	#,
	.loc 1 4968 0 is_stmt 0 discriminator 1
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.946
	testl	%eax, %eax	# num_not_at_initial_offset.946
	je	.L1602	#,
.LBB58:
	.loc 1 4970 0 is_stmt 1
	movl	-20(%rbp), %edx	# regno, tmp109
	movq	-40(%rbp), %rax	# ad, tmp110
	movl	%edx, %esi	# tmp109,
	movq	%rax, %rdi	# tmp110,
	call	make_memloc	#
	movq	%rax, -16(%rbp)	# tmp111, mem
	.loc 1 4971 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.947
	movl	-20(%rbp), %edx	# regno, tmp112
	movslq	%edx, %rdx	# tmp112, D.23713
	salq	$3, %rdx	#, D.23713
	addq	%rdx, %rax	# D.23713, D.23714
	movq	(%rax), %rdx	# *_29, D.23715
	movq	-16(%rbp), %rax	# mem, tmp113
	movq	%rdx, %rsi	# D.23715,
	movq	%rax, %rdi	# tmp113,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23716
	jne	.L1602	#,
	.loc 1 4973 0
	movl	$1, subst_reg_equivs_changed(%rip)	#, subst_reg_equivs_changed
	.loc 1 4977 0
	movq	-40(%rbp), %rax	# ad, tmp114
	movq	%rax, %rdx	# tmp114,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-48(%rbp), %rdx	# insn, tmp115
	movq	%rdx, %rsi	# tmp115,
	movq	%rax, %rdi	# D.23715,
	call	emit_insn_before	#
	movb	$2, 2(%rax)	#, _34->mode
	.loc 1 4979 0
	movq	-16(%rbp), %rax	# mem, D.23710
	jmp	.L1600	#
.L1602:
.LBE58:
.LBE57:
	.loc 1 4983 0
	movq	-40(%rbp), %rax	# ad, D.23710
	jmp	.L1600	#
.L1599:
	.loc 1 4987 0
	movq	-40(%rbp), %rax	# ad, tmp116
	movq	8(%rax), %rdx	# ad_3(D)->fld[0].rtx, D.23715
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.23715
	cmpq	%rax, %rdx	# D.23715, D.23715
	jne	.L1603	#,
	.loc 1 4988 0
	movq	-40(%rbp), %rax	# ad, tmp117
	movq	16(%rax), %rax	# ad_3(D)->fld[1].rtx, D.23715
	movzwl	(%rax), %eax	# _39->code, D.23711
	cmpw	$54, %ax	#, D.23711
	jne	.L1603	#,
	.loc 1 4989 0
	movq	-40(%rbp), %rax	# ad, D.23710
	jmp	.L1600	#
.L1603:
	.loc 1 4990 0
	jmp	.L1604	#
.L1608:
	.loc 1 4993 0
	nop
.L1604:
	.loc 1 4996 0
	movl	-24(%rbp), %eax	# code, code.948
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp119
	movq	%rax, -8(%rbp)	# tmp119, fmt
	.loc 1 4997 0
	movl	-24(%rbp), %eax	# code, code.949
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.23717
	movzbl	%al, %eax	# D.23717, D.23716
	subl	$1, %eax	#, tmp121
	movl	%eax, -28(%rbp)	# tmp121, i
	jmp	.L1605	#
.L1607:
	.loc 1 4998 0
	movl	-28(%rbp), %eax	# i, tmp122
	movslq	%eax, %rdx	# tmp122, D.23718
	movq	-8(%rbp), %rax	# fmt, tmp123
	addq	%rdx, %rax	# D.23718, D.23719
	movzbl	(%rax), %eax	# *_49, D.23720
	cmpb	$101, %al	#, D.23720
	jne	.L1606	#,
	.loc 1 4999 0
	movq	-40(%rbp), %rax	# ad, tmp124
	movl	-28(%rbp), %edx	# i, tmp126
	movslq	%edx, %rdx	# tmp126, tmp125
	movq	8(%rax,%rdx,8), %rax	# ad_3(D)->fld[i_1].rtx, D.23715
	movq	-48(%rbp), %rdx	# insn, tmp127
	movq	%rdx, %rsi	# tmp127,
	movq	%rax, %rdi	# D.23715,
	call	subst_reg_equivs	#
	movq	-40(%rbp), %rdx	# ad, tmp128
	movl	-28(%rbp), %ecx	# i, tmp130
	movslq	%ecx, %rcx	# tmp130, tmp129
	movq	%rax, 8(%rdx,%rcx,8)	# D.23715, ad_3(D)->fld[i_1].rtx
.L1606:
	.loc 1 4997 0
	subl	$1, -28(%rbp)	#, i
.L1605:
	.loc 1 4997 0 is_stmt 0 discriminator 1
	cmpl	$0, -28(%rbp)	#, i
	jns	.L1607	#,
	.loc 1 5000 0 is_stmt 1
	movq	-40(%rbp), %rax	# ad, D.23710
.L1600:
	.loc 1 5001 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE26:
	.size	subst_reg_equivs, .-subst_reg_equivs
	.globl	form_sum
	.type	form_sum, @function
form_sum:
.LFB27:
	.loc 1 5013 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# y, y
	.loc 1 5015 0
	movq	-40(%rbp), %rax	# x, tmp137
	movzbl	2(%rax), %eax	# x_9(D)->mode, D.23722
	movzbl	%al, %eax	# D.23722, tmp138
	movl	%eax, -28(%rbp)	# tmp138, mode
	.loc 1 5017 0
	cmpl	$0, -28(%rbp)	#, mode
	jne	.L1610	#,
	.loc 1 5018 0
	movq	-48(%rbp), %rax	# y, tmp139
	movzbl	2(%rax), %eax	# y_12(D)->mode, D.23722
	movzbl	%al, %eax	# D.23722, tmp140
	movl	%eax, -28(%rbp)	# tmp140, mode
.L1610:
	.loc 1 5020 0
	cmpl	$0, -28(%rbp)	#, mode
	jne	.L1611	#,
	.loc 1 5021 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.951
	andl	$33554432, %eax	#, D.23723
	testl	%eax, %eax	# D.23723
	je	.L1612	#,
	.loc 1 5021 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.950
	jmp	.L1613	#
.L1612:
	.loc 1 5021 0 discriminator 2
	movl	$4, %eax	#, iftmp.950
.L1613:
	.loc 1 5021 0 discriminator 3
	movl	%eax, -28(%rbp)	# iftmp.950, mode
.L1611:
	.loc 1 5023 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp141
	movzwl	(%rax), %eax	# x_9(D)->code, D.23724
	cmpw	$54, %ax	#, D.23724
	jne	.L1614	#,
	.loc 1 5024 0
	movq	-40(%rbp), %rax	# x, tmp142
	movq	8(%rax), %rdx	# x_9(D)->fld[0].rtwint, D.23725
	movq	-48(%rbp), %rax	# y, tmp143
	movq	%rdx, %rsi	# D.23725,
	movq	%rax, %rdi	# tmp143,
	call	plus_constant_wide	#
	jmp	.L1615	#
.L1614:
	.loc 1 5025 0
	movq	-48(%rbp), %rax	# y, tmp144
	movzwl	(%rax), %eax	# y_12(D)->code, D.23724
	cmpw	$54, %ax	#, D.23724
	jne	.L1616	#,
	.loc 1 5026 0
	movq	-48(%rbp), %rax	# y, tmp145
	movq	8(%rax), %rdx	# y_12(D)->fld[0].rtwint, D.23725
	movq	-40(%rbp), %rax	# x, tmp146
	movq	%rdx, %rsi	# D.23725,
	movq	%rax, %rdi	# tmp146,
	call	plus_constant_wide	#
	jmp	.L1615	#
.L1616:
	.loc 1 5027 0
	movq	-40(%rbp), %rax	# x, tmp147
	movzwl	(%rax), %eax	# x_9(D)->code, D.23724
	cmpw	$67, %ax	#, D.23724
	je	.L1617	#,
	.loc 1 5027 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp148
	movzwl	(%rax), %eax	# x_9(D)->code, D.23724
	cmpw	$68, %ax	#, D.23724
	je	.L1617	#,
	movq	-40(%rbp), %rax	# x, tmp149
	movzwl	(%rax), %eax	# x_9(D)->code, D.23724
	cmpw	$54, %ax	#, D.23724
	je	.L1617	#,
	movq	-40(%rbp), %rax	# x, tmp150
	movzwl	(%rax), %eax	# x_9(D)->code, D.23724
	cmpw	$55, %ax	#, D.23724
	je	.L1617	#,
	movq	-40(%rbp), %rax	# x, tmp151
	movzwl	(%rax), %eax	# x_9(D)->code, D.23724
	cmpw	$58, %ax	#, D.23724
	je	.L1617	#,
	movq	-40(%rbp), %rax	# x, tmp152
	movzwl	(%rax), %eax	# x_9(D)->code, D.23724
	cmpw	$134, %ax	#, D.23724
	je	.L1617	#,
	movq	-40(%rbp), %rax	# x, tmp153
	movzwl	(%rax), %eax	# x_9(D)->code, D.23724
	cmpw	$56, %ax	#, D.23724
	je	.L1617	#,
	movq	-40(%rbp), %rax	# x, tmp154
	movzwl	(%rax), %eax	# x_9(D)->code, D.23724
	cmpw	$140, %ax	#, D.23724
	jne	.L1618	#,
.L1617:
	.loc 1 5028 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp155
	movq	%rax, -24(%rbp)	# tmp155, tem
	movq	-48(%rbp), %rax	# y, tmp156
	movq	%rax, -40(%rbp)	# tmp156, x
	movq	-24(%rbp), %rax	# tem, tmp157
	movq	%rax, -48(%rbp)	# tmp157, y
.L1618:
	.loc 1 5030 0
	movq	-40(%rbp), %rax	# x, tmp158
	movzwl	(%rax), %eax	# x_1->code, D.23724
	cmpw	$75, %ax	#, D.23724
	jne	.L1619	#,
	.loc 1 5030 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp159
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _38->code, D.23724
	cmpw	$67, %ax	#, D.23724
	je	.L1620	#,
	movq	-40(%rbp), %rax	# x, tmp160
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _40->code, D.23724
	cmpw	$68, %ax	#, D.23724
	je	.L1620	#,
	movq	-40(%rbp), %rax	# x, tmp161
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _42->code, D.23724
	cmpw	$54, %ax	#, D.23724
	je	.L1620	#,
	movq	-40(%rbp), %rax	# x, tmp162
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _44->code, D.23724
	cmpw	$55, %ax	#, D.23724
	je	.L1620	#,
	movq	-40(%rbp), %rax	# x, tmp163
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _46->code, D.23724
	cmpw	$58, %ax	#, D.23724
	je	.L1620	#,
	movq	-40(%rbp), %rax	# x, tmp164
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _48->code, D.23724
	cmpw	$134, %ax	#, D.23724
	je	.L1620	#,
	movq	-40(%rbp), %rax	# x, tmp165
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _50->code, D.23724
	cmpw	$56, %ax	#, D.23724
	je	.L1620	#,
	movq	-40(%rbp), %rax	# x, tmp166
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _52->code, D.23724
	cmpw	$140, %ax	#, D.23724
	jne	.L1619	#,
.L1620:
	.loc 1 5031 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp167
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.23726
	movq	-48(%rbp), %rdx	# y, tmp168
	movq	%rdx, %rsi	# tmp168,
	movq	%rax, %rdi	# D.23726,
	call	form_sum	#
	movq	%rax, %rdx	#, D.23726
	movq	-40(%rbp), %rax	# x, tmp169
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23726
	movq	%rdx, %rsi	# D.23726,
	movq	%rax, %rdi	# D.23726,
	call	form_sum	#
	jmp	.L1615	#
.L1619:
	.loc 1 5035 0
	movq	-48(%rbp), %rax	# y, tmp170
	movzwl	(%rax), %eax	# y_3->code, D.23724
	cmpw	$75, %ax	#, D.23724
	jne	.L1621	#,
	.loc 1 5035 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# y, tmp171
	movq	16(%rax), %rax	# y_3->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _59->code, D.23724
	cmpw	$67, %ax	#, D.23724
	je	.L1622	#,
	movq	-48(%rbp), %rax	# y, tmp172
	movq	16(%rax), %rax	# y_3->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _61->code, D.23724
	cmpw	$68, %ax	#, D.23724
	je	.L1622	#,
	movq	-48(%rbp), %rax	# y, tmp173
	movq	16(%rax), %rax	# y_3->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _63->code, D.23724
	cmpw	$54, %ax	#, D.23724
	je	.L1622	#,
	movq	-48(%rbp), %rax	# y, tmp174
	movq	16(%rax), %rax	# y_3->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _65->code, D.23724
	cmpw	$55, %ax	#, D.23724
	je	.L1622	#,
	movq	-48(%rbp), %rax	# y, tmp175
	movq	16(%rax), %rax	# y_3->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _67->code, D.23724
	cmpw	$58, %ax	#, D.23724
	je	.L1622	#,
	movq	-48(%rbp), %rax	# y, tmp176
	movq	16(%rax), %rax	# y_3->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _69->code, D.23724
	cmpw	$134, %ax	#, D.23724
	je	.L1622	#,
	movq	-48(%rbp), %rax	# y, tmp177
	movq	16(%rax), %rax	# y_3->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _71->code, D.23724
	cmpw	$56, %ax	#, D.23724
	je	.L1622	#,
	movq	-48(%rbp), %rax	# y, tmp178
	movq	16(%rax), %rax	# y_3->fld[1].rtx, D.23726
	movzwl	(%rax), %eax	# _73->code, D.23724
	cmpw	$140, %ax	#, D.23724
	jne	.L1621	#,
.L1622:
	.loc 1 5036 0 is_stmt 1
	movq	-48(%rbp), %rax	# y, tmp179
	movq	16(%rax), %rbx	# y_3->fld[1].rtx, D.23726
	movq	-48(%rbp), %rax	# y, tmp180
	movq	8(%rax), %rdx	# y_3->fld[0].rtx, D.23726
	movq	-40(%rbp), %rax	# x, tmp181
	movq	%rdx, %rsi	# D.23726,
	movq	%rax, %rdi	# tmp181,
	call	form_sum	#
	movq	%rbx, %rsi	# D.23726,
	movq	%rax, %rdi	# D.23726,
	call	form_sum	#
	jmp	.L1615	#
.L1621:
	.loc 1 5040 0
	movq	-40(%rbp), %rax	# x, tmp182
	movzwl	(%rax), %eax	# x_1->code, D.23724
	cmpw	$67, %ax	#, D.23724
	je	.L1623	#,
	.loc 1 5040 0 is_stmt 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp183
	movzwl	(%rax), %eax	# x_1->code, D.23724
	cmpw	$68, %ax	#, D.23724
	je	.L1623	#,
	.loc 1 5040 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp184
	movzwl	(%rax), %eax	# x_1->code, D.23724
	cmpw	$54, %ax	#, D.23724
	je	.L1623	#,
	movq	-40(%rbp), %rax	# x, tmp185
	movzwl	(%rax), %eax	# x_1->code, D.23724
	cmpw	$55, %ax	#, D.23724
	je	.L1623	#,
	movq	-40(%rbp), %rax	# x, tmp186
	movzwl	(%rax), %eax	# x_1->code, D.23724
	cmpw	$58, %ax	#, D.23724
	je	.L1623	#,
	movq	-40(%rbp), %rax	# x, tmp187
	movzwl	(%rax), %eax	# x_1->code, D.23724
	cmpw	$134, %ax	#, D.23724
	je	.L1623	#,
	movq	-40(%rbp), %rax	# x, tmp188
	movzwl	(%rax), %eax	# x_1->code, D.23724
	cmpw	$56, %ax	#, D.23724
	je	.L1623	#,
	movq	-40(%rbp), %rax	# x, tmp189
	movzwl	(%rax), %eax	# x_1->code, D.23724
	cmpw	$140, %ax	#, D.23724
	jne	.L1624	#,
.L1623:
	movq	-48(%rbp), %rax	# y, tmp190
	movzwl	(%rax), %eax	# y_3->code, D.23724
	cmpw	$67, %ax	#, D.23724
	je	.L1625	#,
	movq	-48(%rbp), %rax	# y, tmp191
	movzwl	(%rax), %eax	# y_3->code, D.23724
	cmpw	$68, %ax	#, D.23724
	je	.L1625	#,
	movq	-48(%rbp), %rax	# y, tmp192
	movzwl	(%rax), %eax	# y_3->code, D.23724
	cmpw	$54, %ax	#, D.23724
	je	.L1625	#,
	movq	-48(%rbp), %rax	# y, tmp193
	movzwl	(%rax), %eax	# y_3->code, D.23724
	cmpw	$55, %ax	#, D.23724
	je	.L1625	#,
	movq	-48(%rbp), %rax	# y, tmp194
	movzwl	(%rax), %eax	# y_3->code, D.23724
	cmpw	$58, %ax	#, D.23724
	je	.L1625	#,
	movq	-48(%rbp), %rax	# y, tmp195
	movzwl	(%rax), %eax	# y_3->code, D.23724
	cmpw	$134, %ax	#, D.23724
	je	.L1625	#,
	movq	-48(%rbp), %rax	# y, tmp196
	movzwl	(%rax), %eax	# y_3->code, D.23724
	cmpw	$56, %ax	#, D.23724
	je	.L1625	#,
	movq	-48(%rbp), %rax	# y, tmp197
	movzwl	(%rax), %eax	# y_3->code, D.23724
	cmpw	$140, %ax	#, D.23724
	jne	.L1624	#,
.L1625:
	.loc 1 5042 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp198
	movzwl	(%rax), %eax	# x_1->code, D.23724
	cmpw	$58, %ax	#, D.23724
	jne	.L1626	#,
	.loc 1 5043 0
	movq	-40(%rbp), %rax	# x, tmp199
	movq	8(%rax), %rax	# x_1->fld[0].rtx, tmp200
	movq	%rax, -40(%rbp)	# tmp200, x
.L1626:
	.loc 1 5044 0
	movq	-48(%rbp), %rax	# y, tmp201
	movzwl	(%rax), %eax	# y_3->code, D.23724
	cmpw	$58, %ax	#, D.23724
	jne	.L1627	#,
	.loc 1 5045 0
	movq	-48(%rbp), %rax	# y, tmp202
	movq	8(%rax), %rax	# y_3->fld[0].rtx, tmp203
	movq	%rax, -48(%rbp)	# tmp203, y
.L1627:
	.loc 1 5047 0
	movq	-48(%rbp), %rcx	# y, tmp204
	movq	-40(%rbp), %rdx	# x, tmp205
	movl	-28(%rbp), %eax	# mode, tmp206
	movl	%eax, %esi	# tmp206,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	# D.23726,
	movl	$0, %esi	#,
	movl	$58, %edi	#,
	call	gen_rtx_fmt_e	#
	jmp	.L1615	#
.L1624:
	.loc 1 5050 0
	movq	-48(%rbp), %rcx	# y, tmp207
	movq	-40(%rbp), %rdx	# x, tmp208
	movl	-28(%rbp), %eax	# mode, tmp209
	movl	%eax, %esi	# tmp209,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
.L1615:
	.loc 1 5051 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE27:
	.size	form_sum, .-form_sum
	.type	subst_indexed_address, @function
subst_indexed_address:
.LFB28:
	.loc 1 5068 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# addr, addr
	.loc 1 5069 0
	movq	$0, -32(%rbp)	#, op0
	movq	$0, -24(%rbp)	#, op1
	movq	$0, -16(%rbp)	#, op2
	.loc 1 5073 0
	movq	-56(%rbp), %rax	# addr, tmp98
	movzwl	(%rax), %eax	# addr_12(D)->code, D.23728
	cmpw	$75, %ax	#, D.23728
	jne	.L1629	#,
	.loc 1 5076 0
	movq	-56(%rbp), %rax	# addr, tmp99
	movq	8(%rax), %rax	# addr_12(D)->fld[0].rtx, tmp100
	movq	%rax, -32(%rbp)	# tmp100, op0
	movq	-56(%rbp), %rax	# addr, tmp101
	movq	16(%rax), %rax	# addr_12(D)->fld[1].rtx, tmp102
	movq	%rax, -24(%rbp)	# tmp102, op1
	movq	$0, -16(%rbp)	#, op2
	.loc 1 5077 0
	movq	-32(%rbp), %rax	# op0, tmp103
	movzwl	(%rax), %eax	# op0_14->code, D.23728
	cmpw	$61, %ax	#, D.23728
	jne	.L1630	#,
	.loc 1 5078 0
	movq	-32(%rbp), %rax	# op0, tmp104
	movl	8(%rax), %eax	# op0_14->fld[0].rtuint, D.23729
	movl	%eax, -36(%rbp)	# D.23729, regno
	cmpl	$52, -36(%rbp)	#, regno
	jle	.L1630	#,
	.loc 1 5079 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.952
	movl	-36(%rbp), %edx	# regno, tmp105
	movslq	%edx, %rdx	# tmp105, D.23730
	addq	%rdx, %rdx	# D.23730
	addq	%rdx, %rax	# D.23730, D.23731
	movzwl	(%rax), %eax	# *_23, D.23732
	testw	%ax, %ax	# D.23732
	jns	.L1630	#,
	.loc 1 5080 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.953
	movl	-36(%rbp), %edx	# regno, tmp106
	movslq	%edx, %rdx	# tmp106, D.23730
	salq	$3, %rdx	#, D.23730
	addq	%rdx, %rax	# D.23730, D.23733
	movq	(%rax), %rax	# *_28, D.23734
	testq	%rax, %rax	# D.23734
	je	.L1630	#,
	.loc 1 5081 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.954
	movl	-36(%rbp), %edx	# regno, tmp107
	movslq	%edx, %rdx	# tmp107, D.23730
	salq	$3, %rdx	#, D.23730
	addq	%rdx, %rax	# D.23730, D.23733
	movq	(%rax), %rax	# *_33, tmp108
	movq	%rax, -32(%rbp)	# tmp108, op0
	jmp	.L1631	#
.L1630:
	.loc 1 5082 0
	movq	-24(%rbp), %rax	# op1, tmp109
	movzwl	(%rax), %eax	# op1_15->code, D.23728
	cmpw	$61, %ax	#, D.23728
	jne	.L1632	#,
	.loc 1 5083 0
	movq	-24(%rbp), %rax	# op1, tmp110
	movl	8(%rax), %eax	# op1_15->fld[0].rtuint, D.23729
	movl	%eax, -36(%rbp)	# D.23729, regno
	cmpl	$52, -36(%rbp)	#, regno
	jle	.L1632	#,
	.loc 1 5084 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.955
	movl	-36(%rbp), %edx	# regno, tmp111
	movslq	%edx, %rdx	# tmp111, D.23730
	addq	%rdx, %rdx	# D.23730
	addq	%rdx, %rax	# D.23730, D.23731
	movzwl	(%rax), %eax	# *_41, D.23732
	testw	%ax, %ax	# D.23732
	jns	.L1632	#,
	.loc 1 5085 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.956
	movl	-36(%rbp), %edx	# regno, tmp112
	movslq	%edx, %rdx	# tmp112, D.23730
	salq	$3, %rdx	#, D.23730
	addq	%rdx, %rax	# D.23730, D.23733
	movq	(%rax), %rax	# *_46, D.23734
	testq	%rax, %rax	# D.23734
	je	.L1632	#,
	.loc 1 5086 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.957
	movl	-36(%rbp), %edx	# regno, tmp113
	movslq	%edx, %rdx	# tmp113, D.23730
	salq	$3, %rdx	#, D.23730
	addq	%rdx, %rax	# D.23730, D.23733
	movq	(%rax), %rax	# *_51, tmp114
	movq	%rax, -24(%rbp)	# tmp114, op1
	jmp	.L1631	#
.L1632:
	.loc 1 5087 0
	movq	-32(%rbp), %rax	# op0, tmp115
	movzwl	(%rax), %eax	# op0_14->code, D.23728
	cmpw	$75, %ax	#, D.23728
	jne	.L1633	#,
	.loc 1 5088 0
	movq	-32(%rbp), %rax	# op0, tmp116
	movq	%rax, %rdi	# tmp116,
	call	subst_indexed_address	#
	movq	%rax, -8(%rbp)	# tmp117, tem
	movq	-8(%rbp), %rax	# tem, tmp118
	cmpq	-32(%rbp), %rax	# op0, tmp118
	je	.L1633	#,
	.loc 1 5089 0
	movq	-8(%rbp), %rax	# tem, tmp119
	movq	%rax, -32(%rbp)	# tmp119, op0
	jmp	.L1631	#
.L1633:
	.loc 1 5090 0
	movq	-24(%rbp), %rax	# op1, tmp120
	movzwl	(%rax), %eax	# op1_15->code, D.23728
	cmpw	$75, %ax	#, D.23728
	jne	.L1634	#,
	.loc 1 5091 0
	movq	-24(%rbp), %rax	# op1, tmp121
	movq	%rax, %rdi	# tmp121,
	call	subst_indexed_address	#
	movq	%rax, -8(%rbp)	# tmp122, tem
	movq	-8(%rbp), %rax	# tem, tmp123
	cmpq	-24(%rbp), %rax	# op1, tmp123
	je	.L1634	#,
	.loc 1 5092 0
	movq	-8(%rbp), %rax	# tem, tmp124
	movq	%rax, -24(%rbp)	# tmp124, op1
	jmp	.L1631	#
.L1634:
	.loc 1 5094 0
	movq	-56(%rbp), %rax	# addr, D.23727
	jmp	.L1635	#
.L1631:
	.loc 1 5097 0
	movq	-24(%rbp), %rax	# op1, tmp125
	movzwl	(%rax), %eax	# op1_4->code, D.23728
	cmpw	$75, %ax	#, D.23728
	jne	.L1636	#,
	.loc 1 5098 0
	movq	-24(%rbp), %rax	# op1, tmp126
	movq	16(%rax), %rax	# op1_4->fld[1].rtx, tmp127
	movq	%rax, -16(%rbp)	# tmp127, op2
	movq	-24(%rbp), %rax	# op1, tmp128
	movq	8(%rax), %rax	# op1_4->fld[0].rtx, tmp129
	movq	%rax, -24(%rbp)	# tmp129, op1
	jmp	.L1637	#
.L1636:
	.loc 1 5099 0
	movq	-32(%rbp), %rax	# op0, tmp130
	movzwl	(%rax), %eax	# op0_1->code, D.23728
	cmpw	$75, %ax	#, D.23728
	jne	.L1637	#,
	.loc 1 5100 0
	movq	-24(%rbp), %rax	# op1, tmp131
	movq	%rax, -16(%rbp)	# tmp131, op2
	movq	-32(%rbp), %rax	# op0, tmp132
	movq	16(%rax), %rax	# op0_1->fld[1].rtx, tmp133
	movq	%rax, -24(%rbp)	# tmp133, op1
	movq	-32(%rbp), %rax	# op0, tmp134
	movq	8(%rax), %rax	# op0_1->fld[0].rtx, tmp135
	movq	%rax, -32(%rbp)	# tmp135, op0
.L1637:
	.loc 1 5103 0
	cmpq	$0, -16(%rbp)	#, op2
	je	.L1638	#,
	.loc 1 5104 0
	movq	-16(%rbp), %rdx	# op2, tmp136
	movq	-24(%rbp), %rax	# op1, tmp137
	movq	%rdx, %rsi	# tmp136,
	movq	%rax, %rdi	# tmp137,
	call	form_sum	#
	movq	%rax, -24(%rbp)	# tmp138, op1
.L1638:
	.loc 1 5105 0
	cmpq	$0, -24(%rbp)	#, op1
	je	.L1639	#,
	.loc 1 5106 0
	movq	-24(%rbp), %rdx	# op1, tmp139
	movq	-32(%rbp), %rax	# op0, tmp140
	movq	%rdx, %rsi	# tmp139,
	movq	%rax, %rdi	# tmp140,
	call	form_sum	#
	movq	%rax, -32(%rbp)	# tmp141, op0
.L1639:
	.loc 1 5108 0
	movq	-32(%rbp), %rax	# op0, D.23727
	jmp	.L1635	#
.L1629:
	.loc 1 5110 0
	movq	-56(%rbp), %rax	# addr, D.23727
.L1635:
	.loc 1 5111 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE28:
	.size	subst_indexed_address, .-subst_indexed_address
	.type	update_auto_inc_notes, @function
update_auto_inc_notes:
.LFB29:
	.loc 1 5128 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# insn, insn
	movl	%esi, -12(%rbp)	# regno, regno
	movl	%edx, -16(%rbp)	# reloadnum, reloadnum
	.loc 1 5137 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE29:
	.size	update_auto_inc_notes, .-update_auto_inc_notes
	.type	find_reloads_address_1, @function
find_reloads_address_1:
.LFB30:
	.loc 1 5173 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$264, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -196(%rbp)	# mode, mode
	movq	%rsi, -208(%rbp)	# x, x
	movl	%edx, -200(%rbp)	# context, context
	movq	%rcx, -216(%rbp)	# loc, loc
	movl	%r8d, -220(%rbp)	# opnum, opnum
	movl	%r9d, -224(%rbp)	# type, type
	.loc 1 5174 0
	movq	-208(%rbp), %rax	# x, x.958
	movzwl	(%rax), %eax	# x.958_42->code, D.23736
	movzwl	%ax, %eax	# D.23736, tmp875
	movl	%eax, -152(%rbp)	# tmp875, code
	.loc 1 5176 0
	movl	-152(%rbp), %eax	# code, tmp877
	subl	$61, %eax	#, tmp876
	cmpl	$40, %eax	#, tmp876
	ja	.L1812	#,
	movl	%eax, %eax	# tmp876, tmp878
	movq	.L1644(,%rax,8), %rax	#, tmp879
	jmp	*%rax	# tmp879
	.section	.rodata
	.align 8
	.align 4
.L1644:
	.quad	.L1643
	.quad	.L1812
	.quad	.L1645
	.quad	.L1812
	.quad	.L1812
	.quad	.L1646
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1647
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1812
	.quad	.L1648
	.quad	.L1648
	.quad	.L1648
	.quad	.L1648
	.quad	.L1649
	.quad	.L1649
	.text
.L1647:
.LBB59:
	.loc 1 5180 0
	movq	-208(%rbp), %rax	# x, x.959
	movq	8(%rax), %rax	# x.959_45->fld[0].rtx, tmp880
	movq	%rax, -104(%rbp)	# tmp880, orig_op0
	.loc 1 5181 0
	movq	-208(%rbp), %rax	# x, x.960
	movq	16(%rax), %rax	# x.960_47->fld[1].rtx, tmp881
	movq	%rax, -96(%rbp)	# tmp881, orig_op1
	.loc 1 5182 0
	movq	-104(%rbp), %rax	# orig_op0, tmp882
	movzwl	(%rax), %eax	# orig_op0_46->code, D.23736
	movzwl	%ax, %eax	# D.23736, tmp883
	movl	%eax, -184(%rbp)	# tmp883, code0
	.loc 1 5183 0
	movq	-96(%rbp), %rax	# orig_op1, tmp884
	movzwl	(%rax), %eax	# orig_op1_48->code, D.23736
	movzwl	%ax, %eax	# D.23736, tmp885
	movl	%eax, -180(%rbp)	# tmp885, code1
	.loc 1 5184 0
	movq	-104(%rbp), %rax	# orig_op0, tmp886
	movq	%rax, -120(%rbp)	# tmp886, op0
	.loc 1 5185 0
	movq	-96(%rbp), %rax	# orig_op1, tmp887
	movq	%rax, -112(%rbp)	# tmp887, op1
	.loc 1 5187 0
	movq	-120(%rbp), %rax	# op0, tmp888
	movzwl	(%rax), %eax	# op0_53->code, D.23736
	cmpw	$63, %ax	#, D.23736
	jne	.L1650	#,
	.loc 1 5189 0
	movq	-120(%rbp), %rax	# op0, tmp889
	movq	8(%rax), %rax	# op0_53->fld[0].rtx, tmp890
	movq	%rax, -120(%rbp)	# tmp890, op0
	.loc 1 5190 0
	movq	-120(%rbp), %rax	# op0, tmp891
	movzwl	(%rax), %eax	# op0_56->code, D.23736
	movzwl	%ax, %eax	# D.23736, tmp892
	movl	%eax, -184(%rbp)	# tmp892, code0
	.loc 1 5191 0
	cmpl	$61, -184(%rbp)	#, code0
	jne	.L1650	#,
	.loc 1 5191 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# op0, tmp893
	movl	8(%rax), %eax	# op0_56->fld[0].rtuint, D.23737
	cmpl	$52, %eax	#, D.23737
	ja	.L1650	#,
	.loc 1 5193 0 is_stmt 1
	movq	-120(%rbp), %rax	# op0, tmp894
	movl	8(%rax), %ebx	# op0_56->fld[0].rtuint, D.23737
	.loc 1 5197 0
	movq	-104(%rbp), %rax	# orig_op0, tmp895
	movzbl	2(%rax), %eax	# orig_op0_46->mode, D.23738
	.loc 1 5194 0
	movzbl	%al, %ecx	# D.23738, D.23739
	movq	-104(%rbp), %rax	# orig_op0, tmp896
	movl	16(%rax), %edx	# orig_op0_46->fld[1].rtuint, D.23737
	.loc 1 5195 0
	movq	-104(%rbp), %rax	# orig_op0, tmp897
	movq	8(%rax), %rax	# orig_op0_46->fld[0].rtx, D.23740
	movzbl	2(%rax), %eax	# _64->mode, D.23738
	.loc 1 5194 0
	movzbl	%al, %esi	# D.23738, D.23739
	movq	-104(%rbp), %rax	# orig_op0, tmp898
	movq	8(%rax), %rax	# orig_op0_46->fld[0].rtx, D.23740
	movl	8(%rax), %eax	# _67->fld[0].rtuint, D.23737
	movl	%eax, %edi	# D.23737,
	call	subreg_regno_offset	#
	.loc 1 5193 0
	addl	%ebx, %eax	# D.23737, D.23737
	.loc 1 5192 0
	movl	%eax, %edx	# D.23737, D.23735
	movl	word_mode(%rip), %eax	# word_mode, word_mode.961
	movl	%edx, %esi	# D.23735,
	movl	%eax, %edi	# word_mode.961,
	call	gen_rtx_REG	#
	movq	%rax, -120(%rbp)	# tmp899, op0
.L1650:
	.loc 1 5200 0
	movq	-112(%rbp), %rax	# op1, tmp900
	movzwl	(%rax), %eax	# op1_54->code, D.23736
	cmpw	$63, %ax	#, D.23736
	jne	.L1651	#,
	.loc 1 5202 0
	movq	-112(%rbp), %rax	# op1, tmp901
	movq	8(%rax), %rax	# op1_54->fld[0].rtx, tmp902
	movq	%rax, -112(%rbp)	# tmp902, op1
	.loc 1 5203 0
	movq	-112(%rbp), %rax	# op1, tmp903
	movzwl	(%rax), %eax	# op1_75->code, D.23736
	movzwl	%ax, %eax	# D.23736, tmp904
	movl	%eax, -180(%rbp)	# tmp904, code1
	.loc 1 5204 0
	cmpl	$61, -180(%rbp)	#, code1
	jne	.L1651	#,
	.loc 1 5204 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# op1, tmp905
	movl	8(%rax), %eax	# op1_75->fld[0].rtuint, D.23737
	cmpl	$52, %eax	#, D.23737
	ja	.L1651	#,
	.loc 1 5208 0 is_stmt 1
	movq	-112(%rbp), %rax	# op1, tmp906
	movl	8(%rax), %ebx	# op1_75->fld[0].rtuint, D.23737
	.loc 1 5212 0
	movq	-96(%rbp), %rax	# orig_op1, tmp907
	movzbl	2(%rax), %eax	# orig_op1_48->mode, D.23738
	.loc 1 5209 0
	movzbl	%al, %ecx	# D.23738, D.23739
	movq	-96(%rbp), %rax	# orig_op1, tmp908
	movl	16(%rax), %edx	# orig_op1_48->fld[1].rtuint, D.23737
	.loc 1 5210 0
	movq	-96(%rbp), %rax	# orig_op1, tmp909
	movq	8(%rax), %rax	# orig_op1_48->fld[0].rtx, D.23740
	movzbl	2(%rax), %eax	# _83->mode, D.23738
	.loc 1 5209 0
	movzbl	%al, %esi	# D.23738, D.23739
	movq	-96(%rbp), %rax	# orig_op1, tmp910
	movq	8(%rax), %rax	# orig_op1_48->fld[0].rtx, D.23740
	movl	8(%rax), %eax	# _86->fld[0].rtuint, D.23737
	movl	%eax, %edi	# D.23737,
	call	subreg_regno_offset	#
	.loc 1 5208 0
	addl	%ebx, %eax	# D.23737, D.23737
	.loc 1 5207 0
	movl	%eax, %edx	# D.23737, D.23735
	movq	-112(%rbp), %rax	# op1, tmp911
	movzbl	2(%rax), %eax	# op1_75->mode, D.23738
	movzbl	%al, %eax	# D.23738, D.23739
	movl	%edx, %esi	# D.23735,
	movl	%eax, %edi	# D.23739,
	call	gen_rtx_REG	#
	movq	%rax, -112(%rbp)	# tmp912, op1
.L1651:
	.loc 1 5215 0
	cmpl	$78, -184(%rbp)	#, code0
	je	.L1652	#,
	.loc 1 5215 0 is_stmt 0 discriminator 1
	cmpl	$120, -184(%rbp)	#, code0
	je	.L1652	#,
	cmpl	$122, -184(%rbp)	#, code0
	je	.L1652	#,
	.loc 1 5216 0 is_stmt 1
	cmpl	$121, -184(%rbp)	#, code0
	je	.L1652	#,
	.loc 1 5216 0 is_stmt 0 discriminator 1
	cmpl	$66, -180(%rbp)	#, code1
	jne	.L1653	#,
.L1652:
	.loc 1 5218 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.962
	leaq	8(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp913
	movl	-220(%rbp), %edi	# opnum, tmp914
	movq	-104(%rbp), %rsi	# orig_op0, tmp915
	movl	-196(%rbp), %eax	# mode, tmp916
	movq	24(%rbp), %rdx	# insn, tmp917
	movq	%rdx, 8(%rsp)	# tmp917,
	movl	16(%rbp), %edx	# ind_levels, tmp918
	movl	%edx, (%rsp)	# tmp918,
	movl	%r8d, %r9d	# tmp913,
	movl	%edi, %r8d	# tmp914,
	movl	$1, %edx	#,
	movl	%eax, %edi	# tmp916,
	call	find_reloads_address_1	#
	.loc 1 5220 0
	movq	-208(%rbp), %rax	# x, x.963
	leaq	16(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp919
	movl	-220(%rbp), %edi	# opnum, tmp920
	movq	-96(%rbp), %rsi	# orig_op1, tmp921
	movl	-196(%rbp), %eax	# mode, tmp922
	movq	24(%rbp), %rdx	# insn, tmp923
	movq	%rdx, 8(%rsp)	# tmp923,
	movl	16(%rbp), %edx	# ind_levels, tmp924
	movl	%edx, (%rsp)	# tmp924,
	movl	%r8d, %r9d	# tmp919,
	movl	%edi, %r8d	# tmp920,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp922,
	call	find_reloads_address_1	#
	jmp	.L1654	#
.L1653:
	.loc 1 5224 0
	cmpl	$78, -180(%rbp)	#, code1
	je	.L1655	#,
	.loc 1 5224 0 is_stmt 0 discriminator 1
	cmpl	$120, -180(%rbp)	#, code1
	je	.L1655	#,
	cmpl	$122, -180(%rbp)	#, code1
	je	.L1655	#,
	.loc 1 5225 0 is_stmt 1
	cmpl	$121, -180(%rbp)	#, code1
	je	.L1655	#,
	.loc 1 5225 0 is_stmt 0 discriminator 1
	cmpl	$66, -184(%rbp)	#, code0
	jne	.L1656	#,
.L1655:
	.loc 1 5227 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.964
	leaq	8(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp925
	movl	-220(%rbp), %edi	# opnum, tmp926
	movq	-104(%rbp), %rsi	# orig_op0, tmp927
	movl	-196(%rbp), %eax	# mode, tmp928
	movq	24(%rbp), %rdx	# insn, tmp929
	movq	%rdx, 8(%rsp)	# tmp929,
	movl	16(%rbp), %edx	# ind_levels, tmp930
	movl	%edx, (%rsp)	# tmp930,
	movl	%r8d, %r9d	# tmp925,
	movl	%edi, %r8d	# tmp926,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp928,
	call	find_reloads_address_1	#
	.loc 1 5229 0
	movq	-208(%rbp), %rax	# x, x.965
	leaq	16(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp931
	movl	-220(%rbp), %edi	# opnum, tmp932
	movq	-96(%rbp), %rsi	# orig_op1, tmp933
	movl	-196(%rbp), %eax	# mode, tmp934
	movq	24(%rbp), %rdx	# insn, tmp935
	movq	%rdx, 8(%rsp)	# tmp935,
	movl	16(%rbp), %edx	# ind_levels, tmp936
	movl	%edx, (%rsp)	# tmp936,
	movl	%r8d, %r9d	# tmp931,
	movl	%edi, %r8d	# tmp932,
	movl	$1, %edx	#,
	movl	%eax, %edi	# tmp934,
	call	find_reloads_address_1	#
	jmp	.L1654	#
.L1656:
	.loc 1 5233 0
	cmpl	$54, -184(%rbp)	#, code0
	je	.L1657	#,
	.loc 1 5233 0 is_stmt 0 discriminator 1
	cmpl	$58, -184(%rbp)	#, code0
	je	.L1657	#,
	.loc 1 5234 0 is_stmt 1
	cmpl	$68, -184(%rbp)	#, code0
	je	.L1657	#,
	.loc 1 5234 0 is_stmt 0 discriminator 1
	cmpl	$67, -184(%rbp)	#, code0
	jne	.L1658	#,
.L1657:
	.loc 1 5235 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.966
	leaq	16(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp937
	movl	-220(%rbp), %edi	# opnum, tmp938
	movq	-96(%rbp), %rsi	# orig_op1, tmp939
	movl	-196(%rbp), %eax	# mode, tmp940
	movq	24(%rbp), %rdx	# insn, tmp941
	movq	%rdx, 8(%rsp)	# tmp941,
	movl	16(%rbp), %edx	# ind_levels, tmp942
	movl	%edx, (%rsp)	# tmp942,
	movl	%r8d, %r9d	# tmp937,
	movl	%edi, %r8d	# tmp938,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp940,
	call	find_reloads_address_1	#
	jmp	.L1654	#
.L1658:
	.loc 1 5238 0
	cmpl	$54, -180(%rbp)	#, code1
	je	.L1659	#,
	.loc 1 5238 0 is_stmt 0 discriminator 1
	cmpl	$58, -180(%rbp)	#, code1
	je	.L1659	#,
	.loc 1 5239 0 is_stmt 1
	cmpl	$68, -180(%rbp)	#, code1
	je	.L1659	#,
	.loc 1 5239 0 is_stmt 0 discriminator 1
	cmpl	$67, -180(%rbp)	#, code1
	jne	.L1660	#,
.L1659:
	.loc 1 5240 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.967
	leaq	8(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp943
	movl	-220(%rbp), %edi	# opnum, tmp944
	movq	-104(%rbp), %rsi	# orig_op0, tmp945
	movl	-196(%rbp), %eax	# mode, tmp946
	movq	24(%rbp), %rdx	# insn, tmp947
	movq	%rdx, 8(%rsp)	# tmp947,
	movl	16(%rbp), %edx	# ind_levels, tmp948
	movl	%edx, (%rsp)	# tmp948,
	movl	%r8d, %r9d	# tmp943,
	movl	%edi, %r8d	# tmp944,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp946,
	call	find_reloads_address_1	#
	jmp	.L1654	#
.L1660:
	.loc 1 5243 0
	cmpl	$61, -184(%rbp)	#, code0
	jne	.L1661	#,
	.loc 1 5243 0 is_stmt 0 discriminator 1
	cmpl	$61, -180(%rbp)	#, code1
	jne	.L1661	#,
	.loc 1 5245 0 is_stmt 1
	movq	-120(%rbp), %rax	# op0, tmp949
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$6, %eax	#, D.23737
	jbe	.L1662	#,
	.loc 1 5245 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# op0, tmp950
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$36, %eax	#, D.23737
	jbe	.L1663	#,
	movq	-120(%rbp), %rax	# op0, tmp951
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$44, %eax	#, D.23737
	jbe	.L1662	#,
.L1663:
	.loc 1 5245 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.968
	movq	-120(%rbp), %rax	# op0, tmp952
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.968, D.23742
	movzwl	(%rax), %eax	# *_101, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1664	#,
	.loc 1 5245 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.969
	movq	-120(%rbp), %rax	# op0, tmp953
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.969, D.23742
	movzwl	(%rax), %eax	# *_108, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1662	#,
.L1664:
	.loc 1 5245 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.970
	movq	-120(%rbp), %rax	# op0, tmp954
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.970, D.23742
	movzwl	(%rax), %eax	# *_115, D.23743
	cmpw	$6, %ax	#, D.23736
	ja	.L1665	#,
.L1662:
	.loc 1 5246 0 is_stmt 1
	movq	-112(%rbp), %rax	# op1, tmp955
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$7, %eax	#, D.23737
	jbe	.L1666	#,
	.loc 1 5246 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# op1, tmp956
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$16, %eax	#, D.23737
	je	.L1666	#,
	movq	-112(%rbp), %rax	# op1, tmp957
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$20, %eax	#, D.23737
	je	.L1666	#,
	movq	-112(%rbp), %rax	# op1, tmp958
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$36, %eax	#, D.23737
	jbe	.L1667	#,
	movq	-112(%rbp), %rax	# op1, tmp959
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$44, %eax	#, D.23737
	jbe	.L1666	#,
.L1667:
	.loc 1 5246 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.971
	movq	-112(%rbp), %rax	# op1, tmp960
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.971, D.23742
	movzwl	(%rax), %eax	# *_127, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1668	#,
	.loc 1 5246 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.972
	movq	-112(%rbp), %rax	# op1, tmp961
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.972, D.23742
	movzwl	(%rax), %eax	# *_134, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1666	#,
.L1668:
	.loc 1 5246 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.973
	movq	-112(%rbp), %rax	# op1, tmp962
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.973, D.23742
	movzwl	(%rax), %eax	# *_141, D.23743
	cmpw	$7, %ax	#, D.23736
	ja	.L1665	#,
.L1666:
	.loc 1 5247 0 is_stmt 1
	movl	$0, %eax	#, D.23735
	jmp	.L1669	#
.L1665:
	.loc 1 5248 0
	movq	-112(%rbp), %rax	# op1, tmp963
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$6, %eax	#, D.23737
	jbe	.L1670	#,
	.loc 1 5248 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# op1, tmp964
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$36, %eax	#, D.23737
	jbe	.L1671	#,
	movq	-112(%rbp), %rax	# op1, tmp965
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$44, %eax	#, D.23737
	jbe	.L1670	#,
.L1671:
	.loc 1 5248 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.974
	movq	-112(%rbp), %rax	# op1, tmp966
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.974, D.23742
	movzwl	(%rax), %eax	# *_152, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1672	#,
	.loc 1 5248 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.975
	movq	-112(%rbp), %rax	# op1, tmp967
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.975, D.23742
	movzwl	(%rax), %eax	# *_159, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1670	#,
.L1672:
	.loc 1 5248 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.976
	movq	-112(%rbp), %rax	# op1, tmp968
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.976, D.23742
	movzwl	(%rax), %eax	# *_166, D.23743
	cmpw	$6, %ax	#, D.23736
	ja	.L1673	#,
.L1670:
	.loc 1 5249 0 is_stmt 1
	movq	-120(%rbp), %rax	# op0, tmp969
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$7, %eax	#, D.23737
	jbe	.L1674	#,
	.loc 1 5249 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# op0, tmp970
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$16, %eax	#, D.23737
	je	.L1674	#,
	movq	-120(%rbp), %rax	# op0, tmp971
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$20, %eax	#, D.23737
	je	.L1674	#,
	movq	-120(%rbp), %rax	# op0, tmp972
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$36, %eax	#, D.23737
	jbe	.L1675	#,
	movq	-120(%rbp), %rax	# op0, tmp973
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$44, %eax	#, D.23737
	jbe	.L1674	#,
.L1675:
	.loc 1 5249 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.977
	movq	-120(%rbp), %rax	# op0, tmp974
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.977, D.23742
	movzwl	(%rax), %eax	# *_178, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1676	#,
	.loc 1 5249 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.978
	movq	-120(%rbp), %rax	# op0, tmp975
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.978, D.23742
	movzwl	(%rax), %eax	# *_185, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1674	#,
.L1676:
	.loc 1 5249 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.979
	movq	-120(%rbp), %rax	# op0, tmp976
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.979, D.23742
	movzwl	(%rax), %eax	# *_192, D.23743
	cmpw	$7, %ax	#, D.23736
	ja	.L1673	#,
.L1674:
	.loc 1 5250 0 is_stmt 1
	movl	$0, %eax	#, D.23735
	jmp	.L1669	#
.L1673:
	.loc 1 5251 0
	movq	-112(%rbp), %rax	# op1, tmp977
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$7, %eax	#, D.23737
	jbe	.L1677	#,
	.loc 1 5251 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# op1, tmp978
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$16, %eax	#, D.23737
	je	.L1677	#,
	movq	-112(%rbp), %rax	# op1, tmp979
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$20, %eax	#, D.23737
	je	.L1677	#,
	movq	-112(%rbp), %rax	# op1, tmp980
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$36, %eax	#, D.23737
	jbe	.L1678	#,
	movq	-112(%rbp), %rax	# op1, tmp981
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$44, %eax	#, D.23737
	jbe	.L1677	#,
.L1678:
	.loc 1 5251 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.980
	movq	-112(%rbp), %rax	# op1, tmp982
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.980, D.23742
	movzwl	(%rax), %eax	# *_205, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1679	#,
	.loc 1 5251 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.981
	movq	-112(%rbp), %rax	# op1, tmp983
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.981, D.23742
	movzwl	(%rax), %eax	# *_212, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1677	#,
.L1679:
	.loc 1 5251 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.982
	movq	-112(%rbp), %rax	# op1, tmp984
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.982, D.23742
	movzwl	(%rax), %eax	# *_219, D.23743
	cmpw	$7, %ax	#, D.23736
	ja	.L1680	#,
.L1677:
	.loc 1 5252 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.983
	leaq	8(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp985
	movl	-220(%rbp), %edi	# opnum, tmp986
	movq	-104(%rbp), %rsi	# orig_op0, tmp987
	movl	-196(%rbp), %eax	# mode, tmp988
	movq	24(%rbp), %rdx	# insn, tmp989
	movq	%rdx, 8(%rsp)	# tmp989,
	movl	16(%rbp), %edx	# ind_levels, tmp990
	movl	%edx, (%rsp)	# tmp990,
	movl	%r8d, %r9d	# tmp985,
	movl	%edi, %r8d	# tmp986,
	movl	$1, %edx	#,
	movl	%eax, %edi	# tmp988,
	call	find_reloads_address_1	#
	jmp	.L1681	#
.L1680:
	.loc 1 5254 0
	movq	-120(%rbp), %rax	# op0, tmp991
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$7, %eax	#, D.23737
	jbe	.L1682	#,
	.loc 1 5254 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# op0, tmp992
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$16, %eax	#, D.23737
	je	.L1682	#,
	movq	-120(%rbp), %rax	# op0, tmp993
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$20, %eax	#, D.23737
	je	.L1682	#,
	movq	-120(%rbp), %rax	# op0, tmp994
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$36, %eax	#, D.23737
	jbe	.L1683	#,
	movq	-120(%rbp), %rax	# op0, tmp995
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$44, %eax	#, D.23737
	jbe	.L1682	#,
.L1683:
	.loc 1 5254 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.984
	movq	-120(%rbp), %rax	# op0, tmp996
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.984, D.23742
	movzwl	(%rax), %eax	# *_231, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1684	#,
	.loc 1 5254 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.985
	movq	-120(%rbp), %rax	# op0, tmp997
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.985, D.23742
	movzwl	(%rax), %eax	# *_238, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1682	#,
.L1684:
	.loc 1 5254 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.986
	movq	-120(%rbp), %rax	# op0, tmp998
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.986, D.23742
	movzwl	(%rax), %eax	# *_245, D.23743
	cmpw	$7, %ax	#, D.23736
	ja	.L1685	#,
.L1682:
	.loc 1 5255 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.987
	leaq	16(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp999
	movl	-220(%rbp), %edi	# opnum, tmp1000
	movq	-96(%rbp), %rsi	# orig_op1, tmp1001
	movl	-196(%rbp), %eax	# mode, tmp1002
	movq	24(%rbp), %rdx	# insn, tmp1003
	movq	%rdx, 8(%rsp)	# tmp1003,
	movl	16(%rbp), %edx	# ind_levels, tmp1004
	movl	%edx, (%rsp)	# tmp1004,
	movl	%r8d, %r9d	# tmp999,
	movl	%edi, %r8d	# tmp1000,
	movl	$1, %edx	#,
	movl	%eax, %edi	# tmp1002,
	call	find_reloads_address_1	#
	jmp	.L1681	#
.L1685:
	.loc 1 5257 0
	movq	-112(%rbp), %rax	# op1, tmp1005
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$6, %eax	#, D.23737
	jbe	.L1686	#,
	.loc 1 5257 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# op1, tmp1006
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$36, %eax	#, D.23737
	jbe	.L1687	#,
	movq	-112(%rbp), %rax	# op1, tmp1007
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	cmpl	$44, %eax	#, D.23737
	jbe	.L1686	#,
.L1687:
	.loc 1 5257 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.988
	movq	-112(%rbp), %rax	# op1, tmp1008
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.988, D.23742
	movzwl	(%rax), %eax	# *_255, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1688	#,
	.loc 1 5257 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.989
	movq	-112(%rbp), %rax	# op1, tmp1009
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.989, D.23742
	movzwl	(%rax), %eax	# *_262, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1686	#,
.L1688:
	.loc 1 5257 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.990
	movq	-112(%rbp), %rax	# op1, tmp1010
	movl	8(%rax), %eax	# op1_4->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.990, D.23742
	movzwl	(%rax), %eax	# *_269, D.23743
	cmpw	$6, %ax	#, D.23736
	ja	.L1689	#,
.L1686:
	.loc 1 5258 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.991
	leaq	8(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp1011
	movl	-220(%rbp), %edi	# opnum, tmp1012
	movq	-104(%rbp), %rsi	# orig_op0, tmp1013
	movl	-196(%rbp), %eax	# mode, tmp1014
	movq	24(%rbp), %rdx	# insn, tmp1015
	movq	%rdx, 8(%rsp)	# tmp1015,
	movl	16(%rbp), %edx	# ind_levels, tmp1016
	movl	%edx, (%rsp)	# tmp1016,
	movl	%r8d, %r9d	# tmp1011,
	movl	%edi, %r8d	# tmp1012,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp1014,
	call	find_reloads_address_1	#
	jmp	.L1681	#
.L1689:
	.loc 1 5260 0
	movq	-120(%rbp), %rax	# op0, tmp1017
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$6, %eax	#, D.23737
	jbe	.L1690	#,
	.loc 1 5260 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# op0, tmp1018
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$36, %eax	#, D.23737
	jbe	.L1691	#,
	movq	-120(%rbp), %rax	# op0, tmp1019
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	cmpl	$44, %eax	#, D.23737
	jbe	.L1690	#,
.L1691:
	.loc 1 5260 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.992
	movq	-120(%rbp), %rax	# op0, tmp1020
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.992, D.23742
	movzwl	(%rax), %eax	# *_279, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1692	#,
	.loc 1 5260 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.993
	movq	-120(%rbp), %rax	# op0, tmp1021
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.993, D.23742
	movzwl	(%rax), %eax	# *_286, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1690	#,
.L1692:
	.loc 1 5260 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.994
	movq	-120(%rbp), %rax	# op0, tmp1022
	movl	8(%rax), %eax	# op0_3->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.994, D.23742
	movzwl	(%rax), %eax	# *_293, D.23743
	cmpw	$6, %ax	#, D.23736
	ja	.L1693	#,
.L1690:
	.loc 1 5261 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.995
	leaq	16(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp1023
	movl	-220(%rbp), %edi	# opnum, tmp1024
	movq	-96(%rbp), %rsi	# orig_op1, tmp1025
	movl	-196(%rbp), %eax	# mode, tmp1026
	movq	24(%rbp), %rdx	# insn, tmp1027
	movq	%rdx, 8(%rsp)	# tmp1027,
	movl	16(%rbp), %edx	# ind_levels, tmp1028
	movl	%edx, (%rsp)	# tmp1028,
	movl	%r8d, %r9d	# tmp1023,
	movl	%edi, %r8d	# tmp1024,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp1026,
	call	find_reloads_address_1	#
	jmp	.L1681	#
.L1693:
	.loc 1 5265 0
	movq	-208(%rbp), %rax	# x, x.996
	leaq	8(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp1029
	movl	-220(%rbp), %edi	# opnum, tmp1030
	movq	-104(%rbp), %rsi	# orig_op0, tmp1031
	movl	-196(%rbp), %eax	# mode, tmp1032
	movq	24(%rbp), %rdx	# insn, tmp1033
	movq	%rdx, 8(%rsp)	# tmp1033,
	movl	16(%rbp), %edx	# ind_levels, tmp1034
	movl	%edx, (%rsp)	# tmp1034,
	movl	%r8d, %r9d	# tmp1029,
	movl	%edi, %r8d	# tmp1030,
	movl	$1, %edx	#,
	movl	%eax, %edi	# tmp1032,
	call	find_reloads_address_1	#
	.loc 1 5267 0
	movq	-208(%rbp), %rax	# x, x.997
	leaq	16(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp1035
	movl	-220(%rbp), %edi	# opnum, tmp1036
	movq	-96(%rbp), %rsi	# orig_op1, tmp1037
	movl	-196(%rbp), %eax	# mode, tmp1038
	movq	24(%rbp), %rdx	# insn, tmp1039
	movq	%rdx, 8(%rsp)	# tmp1039,
	movl	16(%rbp), %edx	# ind_levels, tmp1040
	movl	%edx, (%rsp)	# tmp1040,
	movl	%r8d, %r9d	# tmp1035,
	movl	%edi, %r8d	# tmp1036,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp1038,
	call	find_reloads_address_1	#
	.loc 1 5245 0
	jmp	.L1654	#
.L1681:
	jmp	.L1654	#
.L1661:
	.loc 1 5272 0
	cmpl	$61, -184(%rbp)	#, code0
	jne	.L1694	#,
	.loc 1 5274 0
	movq	-208(%rbp), %rax	# x, x.998
	leaq	8(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp1041
	movl	-220(%rbp), %edi	# opnum, tmp1042
	movq	-104(%rbp), %rsi	# orig_op0, tmp1043
	movl	-196(%rbp), %eax	# mode, tmp1044
	movq	24(%rbp), %rdx	# insn, tmp1045
	movq	%rdx, 8(%rsp)	# tmp1045,
	movl	16(%rbp), %edx	# ind_levels, tmp1046
	movl	%edx, (%rsp)	# tmp1046,
	movl	%r8d, %r9d	# tmp1041,
	movl	%edi, %r8d	# tmp1042,
	movl	$1, %edx	#,
	movl	%eax, %edi	# tmp1044,
	call	find_reloads_address_1	#
	.loc 1 5276 0
	movq	-208(%rbp), %rax	# x, x.999
	leaq	16(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp1047
	movl	-220(%rbp), %edi	# opnum, tmp1048
	movq	-96(%rbp), %rsi	# orig_op1, tmp1049
	movl	-196(%rbp), %eax	# mode, tmp1050
	movq	24(%rbp), %rdx	# insn, tmp1051
	movq	%rdx, 8(%rsp)	# tmp1051,
	movl	16(%rbp), %edx	# ind_levels, tmp1052
	movl	%edx, (%rsp)	# tmp1052,
	movl	%r8d, %r9d	# tmp1047,
	movl	%edi, %r8d	# tmp1048,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp1050,
	call	find_reloads_address_1	#
	jmp	.L1654	#
.L1694:
	.loc 1 5280 0
	cmpl	$61, -180(%rbp)	#, code1
	jne	.L1654	#,
	.loc 1 5282 0
	movq	-208(%rbp), %rax	# x, x.1000
	leaq	16(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp1053
	movl	-220(%rbp), %edi	# opnum, tmp1054
	movq	-96(%rbp), %rsi	# orig_op1, tmp1055
	movl	-196(%rbp), %eax	# mode, tmp1056
	movq	24(%rbp), %rdx	# insn, tmp1057
	movq	%rdx, 8(%rsp)	# tmp1057,
	movl	16(%rbp), %edx	# ind_levels, tmp1058
	movl	%edx, (%rsp)	# tmp1058,
	movl	%r8d, %r9d	# tmp1053,
	movl	%edi, %r8d	# tmp1054,
	movl	$1, %edx	#,
	movl	%eax, %edi	# tmp1056,
	call	find_reloads_address_1	#
	.loc 1 5284 0
	movq	-208(%rbp), %rax	# x, x.1001
	leaq	8(%rax), %rcx	#, D.23744
	movl	-224(%rbp), %r8d	# type, tmp1059
	movl	-220(%rbp), %edi	# opnum, tmp1060
	movq	-104(%rbp), %rsi	# orig_op0, tmp1061
	movl	-196(%rbp), %eax	# mode, tmp1062
	movq	24(%rbp), %rdx	# insn, tmp1063
	movq	%rdx, 8(%rsp)	# tmp1063,
	movl	16(%rbp), %edx	# ind_levels, tmp1064
	movl	%edx, (%rsp)	# tmp1064,
	movl	%r8d, %r9d	# tmp1059,
	movl	%edi, %r8d	# tmp1060,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp1062,
	call	find_reloads_address_1	#
.L1654:
.LBE59:
	.loc 1 5289 0
	movl	$0, %eax	#, D.23735
	jmp	.L1669	#
.L1649:
.LBB60:
	.loc 1 5294 0
	movq	-208(%rbp), %rax	# x, x.1002
	movq	8(%rax), %rax	# x.1002_334->fld[0].rtx, tmp1065
	movq	%rax, -88(%rbp)	# tmp1065, op0
	.loc 1 5295 0
	movq	-208(%rbp), %rax	# x, x.1003
	movq	16(%rax), %rax	# x.1003_336->fld[1].rtx, tmp1066
	movq	%rax, -80(%rbp)	# tmp1066, op1
	.loc 1 5297 0
	movq	-80(%rbp), %rax	# op1, tmp1067
	movzwl	(%rax), %eax	# op1_337->code, D.23736
	cmpw	$75, %ax	#, D.23736
	je	.L1695	#,
	.loc 1 5297 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# op1, tmp1068
	movzwl	(%rax), %eax	# op1_337->code, D.23736
	cmpw	$76, %ax	#, D.23736
	je	.L1695	#,
	.loc 1 5298 0 is_stmt 1
	movl	$0, %eax	#, D.23735
	jmp	.L1669	#
.L1695:
	.loc 1 5304 0
	movq	-80(%rbp), %rax	# op1, tmp1069
	movq	8(%rax), %rax	# op1_337->fld[0].rtx, D.23740
	cmpq	-88(%rbp), %rax	# op0, D.23740
	je	.L1696	#,
	.loc 1 5305 0
	movl	$__FUNCTION__.12257, %edx	#,
	movl	$5305, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1696:
	.loc 1 5311 0
	movq	-80(%rbp), %rax	# op1, tmp1070
	movq	16(%rax), %rax	# op1_337->fld[1].rtx, D.23740
	movzwl	(%rax), %eax	# _342->code, D.23736
	cmpw	$61, %ax	#, D.23736
	jne	.L1697	#,
	.loc 1 5312 0
	movq	-80(%rbp), %rax	# op1, tmp1071
	movq	16(%rax), %rax	# op1_337->fld[1].rtx, D.23740
	movl	8(%rax), %eax	# _344->fld[0].rtuint, D.23737
	cmpl	$6, %eax	#, D.23737
	jbe	.L1697	#,
	.loc 1 5312 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# op1, tmp1072
	movq	16(%rax), %rax	# op1_337->fld[1].rtx, D.23740
	movl	8(%rax), %eax	# _346->fld[0].rtuint, D.23737
	cmpl	$36, %eax	#, D.23737
	jbe	.L1698	#,
	.loc 1 5312 0 discriminator 2
	movq	-80(%rbp), %rax	# op1, tmp1073
	movq	16(%rax), %rax	# op1_337->fld[1].rtx, D.23740
	movl	8(%rax), %eax	# _348->fld[0].rtuint, D.23737
	cmpl	$44, %eax	#, D.23737
	jbe	.L1697	#,
.L1698:
	.loc 1 5312 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.1004
	movq	-80(%rbp), %rax	# op1, tmp1074
	movq	16(%rax), %rax	# op1_337->fld[1].rtx, D.23740
	movl	8(%rax), %eax	# _351->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.1004, D.23742
	movzwl	(%rax), %eax	# *_355, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1699	#,
	.loc 1 5312 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.1005
	movq	-80(%rbp), %rax	# op1, tmp1075
	movq	16(%rax), %rax	# op1_337->fld[1].rtx, D.23740
	movl	8(%rax), %eax	# _359->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.1005, D.23742
	movzwl	(%rax), %eax	# *_363, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1697	#,
.L1699:
	.loc 1 5312 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.1006
	movq	-80(%rbp), %rax	# op1, tmp1076
	movq	16(%rax), %rax	# op1_337->fld[1].rtx, D.23740
	movl	8(%rax), %eax	# _367->fld[0].rtuint, D.23737
	movl	%eax, %eax	# D.23737, D.23741
	addq	%rax, %rax	# D.23741
	addq	%rdx, %rax	# reg_renumber.1006, D.23742
	movzwl	(%rax), %eax	# *_371, D.23743
	cmpw	$6, %ax	#, D.23736
	jbe	.L1697	#,
	.loc 1 5313 0 is_stmt 1
	movq	-80(%rbp), %rax	# op1, tmp1077
	leaq	16(%rax), %rcx	#, D.23744
	movq	-80(%rbp), %rax	# op1, tmp1078
	movq	16(%rax), %rsi	# op1_337->fld[1].rtx, D.23740
	movl	-224(%rbp), %r8d	# type, tmp1079
	movl	-220(%rbp), %edi	# opnum, tmp1080
	movl	-196(%rbp), %eax	# mode, tmp1081
	movq	24(%rbp), %rdx	# insn, tmp1082
	movq	%rdx, 8(%rsp)	# tmp1082,
	movl	16(%rbp), %edx	# ind_levels, tmp1083
	movl	%edx, (%rsp)	# tmp1083,
	movl	%r8d, %r9d	# tmp1079,
	movl	%edi, %r8d	# tmp1080,
	movl	$1, %edx	#,
	movl	%eax, %edi	# tmp1081,
	call	find_reloads_address_1	#
.L1697:
	.loc 1 5316 0
	movq	-80(%rbp), %rax	# op1, tmp1084
	movq	8(%rax), %rax	# op1_337->fld[0].rtx, D.23740
	movzwl	(%rax), %eax	# _376->code, D.23736
	cmpw	$61, %ax	#, D.23736
	jne	.L1700	#,
.LBB61:
	.loc 1 5318 0
	movq	-80(%rbp), %rax	# op1, tmp1085
	movq	8(%rax), %rax	# op1_337->fld[0].rtx, D.23740
	movl	8(%rax), %eax	# _378->fld[0].rtuint, D.23737
	movl	%eax, -176(%rbp)	# D.23737, regno
	.loc 1 5322 0
	cmpl	$52, -176(%rbp)	#, regno
	jle	.L1701	#,
	.loc 1 5323 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.1007
	movl	-176(%rbp), %edx	# regno, tmp1086
	movslq	%edx, %rdx	# tmp1086, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_384, D.23740
	testq	%rax, %rax	# D.23740
	je	.L1701	#,
	.loc 1 5324 0
	movl	$__FUNCTION__.12257, %edx	#,
	movl	$5324, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1701:
	.loc 1 5328 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.1008
	movl	-176(%rbp), %edx	# regno, tmp1087
	movslq	%edx, %rdx	# tmp1087, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_389, D.23740
	testq	%rax, %rax	# D.23740
	je	.L1702	#,
	.loc 1 5329 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.1009
	movl	-176(%rbp), %edx	# regno, tmp1088
	movslq	%edx, %rdx	# tmp1088, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_394, D.23740
	testq	%rax, %rax	# D.23740
	jne	.L1703	#,
	.loc 1 5330 0
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.1010
	testl	%eax, %eax	# num_not_at_initial_offset.1010
	je	.L1702	#,
.L1703:
.LBB62:
	.loc 1 5332 0
	movq	-208(%rbp), %rax	# x, x.1011
	movq	8(%rax), %rax	# x.1011_397->fld[0].rtx, D.23740
	movl	-176(%rbp), %edx	# regno, tmp1089
	movl	%edx, %esi	# tmp1089,
	movq	%rax, %rdi	# D.23740,
	call	make_memloc	#
	movq	%rax, -72(%rbp)	# tmp1090, tem
	.loc 1 5334 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.1012
	movl	-176(%rbp), %edx	# regno, tmp1091
	movslq	%edx, %rdx	# tmp1091, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_403, D.23740
	testq	%rax, %rax	# D.23740
	jne	.L1704	#,
	.loc 1 5335 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.1013
	movl	-176(%rbp), %edx	# regno, tmp1092
	movslq	%edx, %rdx	# tmp1092, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rdx	# *_408, D.23740
	movq	-72(%rbp), %rax	# tem, tmp1093
	movq	%rdx, %rsi	# D.23740,
	movq	%rax, %rdi	# tmp1093,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23735
	jne	.L1702	#,
.L1704:
	.loc 1 5341 0
	movq	-72(%rbp), %rax	# tem, tmp1094
	leaq	8(%rax), %rsi	#, D.23744
	movq	-72(%rbp), %rax	# tem, tmp1095
	movq	8(%rax), %rdx	# tem_399->fld[0].rtx, D.23740
	movq	-72(%rbp), %rax	# tem, tmp1096
	movzbl	2(%rax), %eax	# tem_399->mode, D.23738
	movzbl	%al, %eax	# D.23738, D.23739
	movl	-220(%rbp), %edi	# opnum, tmp1097
	movq	24(%rbp), %rcx	# insn, tmp1098
	movq	%rcx, 8(%rsp)	# tmp1098,
	movl	16(%rbp), %ecx	# ind_levels, tmp1099
	movl	%ecx, (%rsp)	# tmp1099,
	movl	$9, %r9d	#,
	movl	%edi, %r8d	# tmp1097,
	movq	%rsi, %rcx	# D.23744,
	movl	$0, %esi	#,
	movl	%eax, %edi	# D.23739,
	call	find_reloads_address	#
	.loc 1 5351 0
	movq	-208(%rbp), %rax	# x, x.1014
	movzbl	2(%rax), %eax	# x.1014_415->mode, D.23738
	.loc 1 5348 0
	movzbl	%al, %edx	# D.23738, D.23739
	.loc 1 5351 0
	movq	-208(%rbp), %rax	# x, x.1015
	movzbl	2(%rax), %eax	# x.1015_418->mode, D.23738
	.loc 1 5348 0
	movzbl	%al, %r8d	# D.23738, D.23739
	movq	-80(%rbp), %rax	# op1, tmp1100
	leaq	8(%rax), %r10	#, D.23744
	movq	-208(%rbp), %rax	# x, x.1016
	leaq	8(%rax), %rdi	#, D.23744
	movq	-72(%rbp), %rsi	# tem, tmp1101
	movq	-72(%rbp), %rax	# tem, tmp1102
	movl	$9, 32(%rsp)	#,
	movl	-220(%rbp), %ecx	# opnum, tmp1103
	movl	%ecx, 24(%rsp)	# tmp1103,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	%edx, (%rsp)	# D.23739,
	movl	%r8d, %r9d	# D.23739,
	movl	$12, %r8d	#,
	movq	%r10, %rcx	# D.23744,
	movq	%rdi, %rdx	# D.23744,
	movq	%rax, %rdi	# tmp1102,
	call	push_reload	#
	movl	%eax, -148(%rbp)	# tmp1104, reloadnum
	.loc 1 5354 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.1017
	movl	-148(%rbp), %edx	# reloadnum, tmp1105
	movl	-176(%rbp), %ecx	# regno, tmp1106
	movl	%ecx, %esi	# tmp1106,
	movq	%rax, %rdi	# this_insn.1017,
	call	update_auto_inc_notes	#
	.loc 1 5355 0
	movl	$0, %eax	#, D.23735
	jmp	.L1669	#
.L1702:
.LBE62:
	.loc 1 5359 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1018
	movl	-176(%rbp), %edx	# regno, tmp1107
	movslq	%edx, %rdx	# tmp1107, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_430, D.23743
	testw	%ax, %ax	# D.23743
	js	.L1705	#,
	.loc 1 5360 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1019
	movl	-176(%rbp), %edx	# regno, tmp1108
	movslq	%edx, %rdx	# tmp1108, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_435, D.23743
	cwtl
	movl	%eax, -176(%rbp)	# tmp1109, regno
.L1705:
	.loc 1 5363 0
	cmpl	$7, -176(%rbp)	#, regno
	jle	.L1706	#,
	.loc 1 5363 0 is_stmt 0 discriminator 1
	cmpl	$16, -176(%rbp)	#, regno
	je	.L1706	#,
	cmpl	$20, -176(%rbp)	#, regno
	je	.L1706	#,
	cmpl	$36, -176(%rbp)	#, regno
	jle	.L1707	#,
	.loc 1 5363 0 discriminator 2
	cmpl	$44, -176(%rbp)	#, regno
	jle	.L1706	#,
.L1707:
	.loc 1 5363 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1020
	movl	-176(%rbp), %edx	# regno, tmp1110
	movslq	%edx, %rdx	# tmp1110, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_441, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1708	#,
	.loc 1 5363 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1021
	movl	-176(%rbp), %edx	# regno, tmp1111
	movslq	%edx, %rdx	# tmp1111, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_447, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1706	#,
.L1708:
	.loc 1 5363 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1022
	movl	-176(%rbp), %edx	# regno, tmp1112
	movslq	%edx, %rdx	# tmp1112, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_453, D.23743
	cmpw	$7, %ax	#, D.23736
	jbe	.L1706	#,
	.loc 1 5368 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.1023
	movzbl	2(%rax), %eax	# x.1023_456->mode, D.23738
	.loc 1 5365 0
	movzbl	%al, %edx	# D.23738, D.23739
	.loc 1 5368 0
	movq	-208(%rbp), %rax	# x, x.1024
	movzbl	2(%rax), %eax	# x.1024_459->mode, D.23738
	.loc 1 5365 0
	movzbl	%al, %r8d	# D.23738, D.23739
	.loc 1 5366 0
	movq	-208(%rbp), %rax	# x, x.1025
	.loc 1 5365 0
	leaq	8(%rax), %r10	#, D.23744
	movq	-80(%rbp), %rax	# op1, tmp1113
	leaq	8(%rax), %rdi	#, D.23744
	movq	-208(%rbp), %rax	# x, x.1026
	movq	8(%rax), %rsi	# x.1026_465->fld[0].rtx, D.23740
	movq	-80(%rbp), %rax	# op1, tmp1114
	movq	8(%rax), %rax	# op1_337->fld[0].rtx, D.23740
	movl	$9, 32(%rsp)	#,
	movl	-220(%rbp), %ecx	# opnum, tmp1115
	movl	%ecx, 24(%rsp)	# tmp1115,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	%edx, (%rsp)	# D.23739,
	movl	%r8d, %r9d	# D.23739,
	movl	$12, %r8d	#,
	movq	%r10, %rcx	# D.23744,
	movq	%rdi, %rdx	# D.23744,
	movq	%rax, %rdi	# D.23740,
	call	push_reload	#
	movl	%eax, -148(%rbp)	# tmp1116, reloadnum
	.loc 1 5371 0
	movq	this_insn(%rip), %rax	# this_insn, this_insn.1027
	movl	-148(%rbp), %edx	# reloadnum, tmp1117
	movl	-176(%rbp), %ecx	# regno, tmp1118
	movl	%ecx, %esi	# tmp1118,
	movq	%rax, %rdi	# this_insn.1027,
	call	update_auto_inc_notes	#
	.loc 1 5372 0
	movl	$0, %eax	#, D.23735
	jmp	.L1669	#
.L1706:
.LBE61:
.LBE60:
	.loc 1 5378 0
	movl	$0, %eax	#, D.23735
	jmp	.L1669	#
.L1700:
.LBB63:
	.loc 1 5376 0
	movl	$__FUNCTION__.12257, %edx	#,
	movl	$5376, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1648:
.LBE63:
	.loc 1 5384 0
	movq	-208(%rbp), %rax	# x, x.1028
	movq	8(%rax), %rax	# x.1028_472->fld[0].rtx, D.23740
	movzwl	(%rax), %eax	# _473->code, D.23736
	cmpw	$61, %ax	#, D.23736
	jne	.L1710	#,
.LBB64:
	.loc 1 5386 0
	movq	-208(%rbp), %rax	# x, x.1029
	movq	8(%rax), %rax	# x.1029_475->fld[0].rtx, D.23740
	movl	8(%rax), %eax	# _476->fld[0].rtuint, D.23737
	movl	%eax, -172(%rbp)	# D.23737, regno
	.loc 1 5387 0
	movl	$0, -168(%rbp)	#, value
	.loc 1 5388 0
	movq	-208(%rbp), %rax	# x, tmp1119
	movq	%rax, -64(%rbp)	# tmp1119, x_orig
	.loc 1 5391 0
	cmpl	$52, -172(%rbp)	#, regno
	jle	.L1711	#,
	.loc 1 5392 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.1030
	movl	-172(%rbp), %edx	# regno, tmp1120
	movslq	%edx, %rdx	# tmp1120, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_484, D.23740
	testq	%rax, %rax	# D.23740
	je	.L1711	#,
	.loc 1 5393 0
	movl	$__FUNCTION__.12257, %edx	#,
	movl	$5393, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1711:
	.loc 1 5397 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.1031
	movl	-172(%rbp), %edx	# regno, tmp1121
	movslq	%edx, %rdx	# tmp1121, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_489, D.23740
	testq	%rax, %rax	# D.23740
	je	.L1712	#,
	.loc 1 5398 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.1032
	movl	-172(%rbp), %edx	# regno, tmp1122
	movslq	%edx, %rdx	# tmp1122, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_494, D.23740
	testq	%rax, %rax	# D.23740
	jne	.L1713	#,
	.loc 1 5398 0 is_stmt 0 discriminator 1
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.1033
	testl	%eax, %eax	# num_not_at_initial_offset.1033
	je	.L1712	#,
.L1713:
.LBB65:
	.loc 1 5400 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.1034
	movq	8(%rax), %rax	# x.1034_497->fld[0].rtx, D.23740
	movl	-172(%rbp), %edx	# regno, tmp1123
	movl	%edx, %esi	# tmp1123,
	movq	%rax, %rdi	# D.23740,
	call	make_memloc	#
	movq	%rax, -128(%rbp)	# tem.1035, tem
	.loc 1 5401 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.1036
	movl	-172(%rbp), %edx	# regno, tmp1124
	movslq	%edx, %rdx	# tmp1124, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_503, D.23740
	testq	%rax, %rax	# D.23740
	jne	.L1714	#,
	.loc 1 5402 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.1037
	movl	-172(%rbp), %edx	# regno, tmp1125
	movslq	%edx, %rdx	# tmp1125, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rdx	# *_508, D.23740
	movq	-128(%rbp), %rax	# tem, tem.1038
	movq	%rdx, %rsi	# D.23740,
	movq	%rax, %rdi	# tem.1038,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23735
	jne	.L1712	#,
.L1714:
	.loc 1 5409 0
	movq	-128(%rbp), %rax	# tem, tem.1039
	.loc 1 5408 0
	leaq	8(%rax), %rdi	#, D.23744
	movq	-128(%rbp), %rax	# tem, tem.1040
	movq	8(%rax), %rdx	# tem.1040_514->fld[0].rtx, D.23740
	movq	-128(%rbp), %rax	# tem, tem.1041
	movzbl	2(%rax), %eax	# tem.1041_516->mode, D.23738
	movzbl	%al, %eax	# D.23738, D.23739
	movl	-224(%rbp), %r9d	# type, tmp1126
	movl	-220(%rbp), %r8d	# opnum, tmp1127
	leaq	-128(%rbp), %rsi	#, tmp1128
	movq	24(%rbp), %rcx	# insn, tmp1129
	movq	%rcx, 8(%rsp)	# tmp1129,
	movl	16(%rbp), %ecx	# ind_levels, tmp1130
	movl	%ecx, (%rsp)	# tmp1130,
	movq	%rdi, %rcx	# D.23744,
	movl	%eax, %edi	# D.23739,
	call	find_reloads_address	#
	.loc 1 5412 0
	movq	-128(%rbp), %rdx	# tem, tem.1042
	movq	-208(%rbp), %rax	# x, x.1043
	movzbl	2(%rax), %eax	# x.1043_520->mode, D.23738
	movzbl	%al, %ecx	# D.23738, D.23739
	movq	-208(%rbp), %rax	# x, x.1044
	movzwl	(%rax), %eax	# x.1044_523->code, D.23736
	movzwl	%ax, %eax	# D.23736, D.23745
	movl	%ecx, %esi	# D.23739,
	movl	%eax, %edi	# D.23745,
	call	gen_rtx_fmt_e	#
	movq	%rax, -208(%rbp)	# x.1045, x
.L1712:
.LBE65:
	.loc 1 5428 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1046
	movl	-172(%rbp), %edx	# regno, tmp1131
	movslq	%edx, %rdx	# tmp1131, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_530, D.23743
	testw	%ax, %ax	# D.23743
	js	.L1716	#,
	.loc 1 5429 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1047
	movl	-172(%rbp), %edx	# regno, tmp1132
	movslq	%edx, %rdx	# tmp1132, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_535, D.23743
	cwtl
	movl	%eax, -172(%rbp)	# tmp1133, regno
.L1716:
	.loc 1 5430 0
	cmpl	$52, -172(%rbp)	#, regno
	jg	.L1717	#,
	.loc 1 5430 0 is_stmt 0 discriminator 1
	cmpl	$0, -200(%rbp)	#, context
	je	.L1718	#,
	.loc 1 5431 0 is_stmt 1
	cmpl	$6, -172(%rbp)	#, regno
	jle	.L1719	#,
	.loc 1 5431 0 is_stmt 0 discriminator 1
	cmpl	$36, -172(%rbp)	#, regno
	jle	.L1720	#,
	.loc 1 5431 0 discriminator 2
	cmpl	$44, -172(%rbp)	#, regno
	jle	.L1719	#,
.L1720:
	.loc 1 5431 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1049
	movl	-172(%rbp), %edx	# regno, tmp1134
	movslq	%edx, %rdx	# tmp1134, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_542, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1721	#,
	.loc 1 5431 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1050
	movl	-172(%rbp), %edx	# regno, tmp1135
	movslq	%edx, %rdx	# tmp1135, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_548, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1719	#,
.L1721:
	.loc 1 5431 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1051
	movl	-172(%rbp), %edx	# regno, tmp1136
	movslq	%edx, %rdx	# tmp1136, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_554, D.23743
	cmpw	$6, %ax	#, D.23736
	jbe	.L1719	#,
	.loc 1 5431 0 discriminator 3
	movl	$1, %eax	#, iftmp.1048
	jmp	.L1722	#
.L1719:
	.loc 1 5431 0 discriminator 2
	movl	$0, %eax	#, iftmp.1048
.L1722:
	.loc 1 5431 0 discriminator 4
	andl	$1, %eax	#, D.23746
	testb	%al, %al	# D.23746
	jne	.L1717	#,
	jmp	.L1723	#
.L1718:
	.loc 1 5432 0 is_stmt 1
	cmpl	$7, -172(%rbp)	#, regno
	jle	.L1724	#,
	.loc 1 5432 0 is_stmt 0 discriminator 1
	cmpl	$16, -172(%rbp)	#, regno
	je	.L1724	#,
	cmpl	$20, -172(%rbp)	#, regno
	je	.L1724	#,
	cmpl	$36, -172(%rbp)	#, regno
	jle	.L1725	#,
	.loc 1 5432 0 discriminator 2
	cmpl	$44, -172(%rbp)	#, regno
	jle	.L1724	#,
.L1725:
	.loc 1 5432 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1053
	movl	-172(%rbp), %edx	# regno, tmp1137
	movslq	%edx, %rdx	# tmp1137, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_563, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1726	#,
	.loc 1 5432 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1054
	movl	-172(%rbp), %edx	# regno, tmp1138
	movslq	%edx, %rdx	# tmp1138, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_569, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1724	#,
.L1726:
	.loc 1 5432 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1055
	movl	-172(%rbp), %edx	# regno, tmp1139
	movslq	%edx, %rdx	# tmp1139, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_575, D.23743
	cmpw	$7, %ax	#, D.23736
	jbe	.L1724	#,
	.loc 1 5432 0 discriminator 3
	movl	$1, %eax	#, iftmp.1052
	jmp	.L1727	#
.L1724:
	.loc 1 5432 0 discriminator 2
	movl	$0, %eax	#, iftmp.1052
.L1727:
	.loc 1 5431 0 is_stmt 1
	andl	$1, %eax	#, D.23746
	testb	%al, %al	# D.23746
	je	.L1723	#,
.L1717:
.LBB66:
	.loc 1 5444 0
	movq	-208(%rbp), %rax	# x, x.1057
	movq	8(%rax), %rax	# x.1057_581->fld[0].rtx, D.23740
	movzwl	(%rax), %eax	# _582->code, D.23736
	.loc 1 5446 0
	cmpw	$66, %ax	#, D.23736
	jne	.L1728	#,
	.loc 1 5445 0
	movq	-208(%rbp), %rax	# x, x.1058
	.loc 1 5446 0
	movq	8(%rax), %rax	# x.1058_584->fld[0].rtx, iftmp.1056
	jmp	.L1729	#
.L1728:
	.loc 1 5446 0 is_stmt 0 discriminator 1
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.1059
	movl	-172(%rbp), %edx	# regno, tmp1140
	movslq	%edx, %rdx	# tmp1140, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_589, iftmp.1056
.L1729:
	.loc 1 5444 0 is_stmt 1
	movq	%rax, -56(%rbp)	# iftmp.1056, equiv
	.loc 1 5447 0
	movq	optab_table(%rip), %rdx	# optab_table, D.23747
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1061
	andl	$33554432, %eax	#, D.23735
	testl	%eax, %eax	# D.23735
	je	.L1730	#,
	.loc 1 5447 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1060
	jmp	.L1731	#
.L1730:
	.loc 1 5447 0 discriminator 2
	movl	$4, %eax	#, iftmp.1060
.L1731:
	.loc 1 5447 0 discriminator 3
	cltq
	salq	$4, %rax	#, tmp1142
	addq	%rdx, %rax	# D.23747, tmp1143
	movl	8(%rax), %eax	# _592->handlers[iftmp.1060_16].insn_code, D.23748
	movl	%eax, -144(%rbp)	# D.23748, icode
	.loc 1 5448 0 is_stmt 1 discriminator 3
	cmpq	$0, 24(%rbp)	#, insn
	je	.L1732	#,
	.loc 1 5448 0 is_stmt 0 discriminator 1
	movq	24(%rbp), %rax	# insn, tmp1144
	movzwl	(%rax), %eax	# insn_302(D)->code, D.23736
	cmpw	$32, %ax	#, D.23736
	jne	.L1732	#,
	cmpq	$0, -56(%rbp)	#, equiv
	je	.L1732	#,
	.loc 1 5449 0 is_stmt 1
	movq	-56(%rbp), %rax	# equiv, tmp1145
	movzbl	2(%rax), %eax	# equiv_591->mode, D.23738
	movzbl	%al, %edx	# D.23738, D.23739
	movq	-56(%rbp), %rax	# equiv, tmp1146
	movl	%edx, %esi	# D.23739,
	movq	%rax, %rdi	# tmp1146,
	call	memory_operand	#
	testl	%eax, %eax	# D.23735
	je	.L1732	#,
	.loc 1 5453 0
	cmpl	$1317, -144(%rbp)	#, icode
	je	.L1733	#,
	.loc 1 5454 0
	movl	-144(%rbp), %eax	# icode, tmp1148
	movslq	%eax, %rdx	# tmp1148, tmp1147
	movq	%rdx, %rax	# tmp1147, tmp1149
	salq	$2, %rax	#, tmp1149
	addq	%rdx, %rax	# tmp1147, tmp1149
	salq	$3, %rax	#, tmp1150
	addq	$insn_data+24, %rax	#, tmp1151
	movq	(%rax), %rax	# insn_data[icode_598].operand, D.23749
	.loc 1 5455 0
	movq	(%rax), %rdx	# _603->predicate, D.23750
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1063
	andl	$33554432, %eax	#, D.23735
	testl	%eax, %eax	# D.23735
	je	.L1734	#,
	.loc 1 5455 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1062
	jmp	.L1735	#
.L1734:
	.loc 1 5455 0 discriminator 2
	movl	$4, %eax	#, iftmp.1062
.L1735:
	.loc 1 5455 0 discriminator 3
	movq	-56(%rbp), %rcx	# equiv, tmp1152
	movl	%eax, %esi	# iftmp.1062,
	movq	%rcx, %rdi	# tmp1152,
	call	*%rdx	# D.23750
	.loc 1 5454 0 is_stmt 1 discriminator 3
	testl	%eax, %eax	# D.23735
	je	.L1733	#,
	.loc 1 5456 0
	movl	-144(%rbp), %eax	# icode, tmp1154
	movslq	%eax, %rdx	# tmp1154, tmp1153
	movq	%rdx, %rax	# tmp1153, tmp1155
	salq	$2, %rax	#, tmp1155
	addq	%rdx, %rax	# tmp1153, tmp1155
	salq	$3, %rax	#, tmp1156
	addq	$insn_data+24, %rax	#, tmp1157
	movq	(%rax), %rax	# insn_data[icode_598].operand, D.23749
	addq	$24, %rax	#, D.23749
	.loc 1 5457 0
	movq	(%rax), %rdx	# _611->predicate, D.23750
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1065
	andl	$33554432, %eax	#, D.23735
	testl	%eax, %eax	# D.23735
	je	.L1736	#,
	.loc 1 5457 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1064
	jmp	.L1737	#
.L1736:
	.loc 1 5457 0 discriminator 2
	movl	$4, %eax	#, iftmp.1064
.L1737:
	.loc 1 5457 0 discriminator 3
	movq	-56(%rbp), %rcx	# equiv, tmp1158
	movl	%eax, %esi	# iftmp.1064,
	movq	%rcx, %rdi	# tmp1158,
	call	*%rdx	# D.23750
	.loc 1 5453 0 is_stmt 1 discriminator 3
	testl	%eax, %eax	# D.23735
	jne	.L1732	#,
.L1733:
	.loc 1 5464 0
	movq	-64(%rbp), %rax	# x_orig, tmp1162
	addq	$8, %rax	#, tmp1161
	movq	%rax, -216(%rbp)	# tmp1161, loc
	.loc 1 5465 0
	movq	-208(%rbp), %rax	# x, x.1066
	movq	8(%rax), %rax	# x.1066_619->fld[0].rtx, x.1067
	movq	%rax, -208(%rbp)	# x.1067, x
	.loc 1 5470 0
	movq	-208(%rbp), %rax	# x, x.1068
	movzbl	2(%rax), %eax	# x.1068_621->mode, D.23738
	.loc 1 5467 0
	movzbl	%al, %r8d	# D.23738, D.23739
	.loc 1 5470 0
	movq	-208(%rbp), %rax	# x, x.1069
	movzbl	2(%rax), %eax	# x.1069_624->mode, D.23738
	.loc 1 5467 0
	movzbl	%al, %r10d	# D.23738, D.23739
	cmpl	$0, -200(%rbp)	#, context
	je	.L1738	#,
	.loc 1 5467 0 is_stmt 0 discriminator 1
	movl	$10, %eax	#, iftmp.1070
	jmp	.L1739	#
.L1738:
	.loc 1 5467 0 discriminator 2
	movl	$12, %eax	#, iftmp.1070
.L1739:
	.loc 1 5467 0 discriminator 3
	movq	-208(%rbp), %rsi	# x, x.1071
	movq	-208(%rbp), %rdi	# x, x.1072
	movq	-216(%rbp), %rcx	# loc, tmp1163
	movq	-216(%rbp), %rdx	# loc, tmp1164
	movl	$9, 32(%rsp)	#,
	movl	-220(%rbp), %r9d	# opnum, tmp1165
	movl	%r9d, 24(%rsp)	# tmp1165,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	%r8d, (%rsp)	# D.23739,
	movl	%r10d, %r9d	# D.23739,
	movl	%eax, %r8d	# iftmp.1070,
	call	push_reload	#
	movl	%eax, -164(%rbp)	# tmp1166, reloadnum
	jmp	.L1740	#
.L1732:
	.loc 1 5479 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.1073
	movzbl	2(%rax), %eax	# x.1073_632->mode, D.23738
	.loc 1 5476 0
	movzbl	%al, %ecx	# D.23738, D.23739
	.loc 1 5479 0
	movq	-208(%rbp), %rax	# x, x.1074
	movzbl	2(%rax), %eax	# x.1074_635->mode, D.23738
	.loc 1 5476 0
	movzbl	%al, %r8d	# D.23738, D.23739
	cmpl	$0, -200(%rbp)	#, context
	je	.L1741	#,
	.loc 1 5476 0 is_stmt 0 discriminator 1
	movl	$10, %eax	#, iftmp.1075
	jmp	.L1742	#
.L1741:
	.loc 1 5476 0 discriminator 2
	movl	$12, %eax	#, iftmp.1075
.L1742:
	.loc 1 5476 0 discriminator 3
	movq	-208(%rbp), %rdi	# x, x.1076
	movq	-216(%rbp), %rdx	# loc, tmp1167
	movl	-224(%rbp), %esi	# type, tmp1168
	movl	%esi, 32(%rsp)	# tmp1168,
	movl	-220(%rbp), %esi	# opnum, tmp1169
	movl	%esi, 24(%rsp)	# tmp1169,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	%ecx, (%rsp)	# D.23739,
	movl	%r8d, %r9d	# D.23739,
	movl	%eax, %r8d	# iftmp.1075,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	call	push_reload	#
	movl	%eax, -164(%rbp)	# tmp1170, reloadnum
	.loc 1 5482 0 is_stmt 1 discriminator 3
	movq	-64(%rbp), %rax	# x_orig, tmp1171
	movq	8(%rax), %rdx	# x_orig_480->fld[0].rtx, D.23740
	movq	this_insn(%rip), %rax	# this_insn, this_insn.1077
	movq	32(%rax), %rax	# this_insn.1077_644->fld[3].rtx, D.23740
	movq	%rdx, %rsi	# D.23740,
	movq	%rax, %rdi	# D.23740,
	call	find_inc_amount	#
	movl	%eax, %ecx	#, D.23735
	movl	-164(%rbp), %eax	# reloadnum, tmp1173
	movslq	%eax, %rdx	# tmp1173, tmp1172
	movq	%rdx, %rax	# tmp1172, tmp1174
	addq	%rax, %rax	# tmp1174
	addq	%rdx, %rax	# tmp1172, tmp1174
	salq	$2, %rax	#, tmp1174
	addq	%rdx, %rax	# tmp1172, tmp1174
	salq	$3, %rax	#, tmp1175
	addq	$rld+32, %rax	#, tmp1176
	movl	%ecx, 4(%rax)	# D.23735, rld[reloadnum_642].inc
	.loc 1 5484 0 discriminator 3
	movl	$1, -168(%rbp)	#, value
.L1740:
	.loc 1 5487 0
	movq	-64(%rbp), %rax	# x_orig, tmp1177
	movq	8(%rax), %rax	# x_orig_480->fld[0].rtx, D.23740
	movl	8(%rax), %eax	# _648->fld[0].rtuint, D.23737
	movl	%eax, %ecx	# D.23737, D.23735
	movq	this_insn(%rip), %rax	# this_insn, this_insn.1078
	movl	-164(%rbp), %edx	# reloadnum, tmp1178
	movl	%ecx, %esi	# D.23735,
	movq	%rax, %rdi	# this_insn.1078,
	call	update_auto_inc_notes	#
.L1723:
.LBE66:
	.loc 1 5490 0
	movl	-168(%rbp), %eax	# value, D.23735
	jmp	.L1669	#
.L1710:
.LBE64:
	.loc 1 5493 0
	movq	-208(%rbp), %rax	# x, x.1079
	movq	8(%rax), %rax	# x.1079_653->fld[0].rtx, D.23740
	movzwl	(%rax), %eax	# _654->code, D.23736
	cmpw	$66, %ax	#, D.23736
	jne	.L1743	#,
.LBB67:
	.loc 1 5500 0
	movq	-208(%rbp), %rax	# x, x.1080
	movq	8(%rax), %rax	# x.1080_656->fld[0].rtx, tmp1179
	movq	%rax, -48(%rbp)	# tmp1179, tem
	.loc 1 5514 0
	movq	-208(%rbp), %rax	# x, x.1081
	movq	8(%rax), %rax	# x.1081_658->fld[0].rtx, D.23740
	.loc 1 5513 0
	leaq	8(%rax), %rdi	#, D.23744
	.loc 1 5514 0
	movq	-208(%rbp), %rax	# x, x.1082
	movq	8(%rax), %rax	# x.1082_661->fld[0].rtx, D.23740
	.loc 1 5513 0
	movq	8(%rax), %rdx	# _662->fld[0].rtx, D.23740
	movq	-208(%rbp), %rax	# x, x.1083
	leaq	8(%rax), %rsi	#, D.23744
	movq	-208(%rbp), %rax	# x, x.1084
	movzbl	2(%rax), %eax	# x.1084_666->mode, D.23738
	movzbl	%al, %eax	# D.23738, D.23739
	movl	-224(%rbp), %r9d	# type, tmp1180
	movl	-220(%rbp), %r8d	# opnum, tmp1181
	movq	24(%rbp), %rcx	# insn, tmp1182
	movq	%rcx, 8(%rsp)	# tmp1182,
	movl	16(%rbp), %ecx	# ind_levels, tmp1183
	movl	%ecx, (%rsp)	# tmp1183,
	movq	%rdi, %rcx	# D.23744,
	movl	%eax, %edi	# D.23739,
	call	find_reloads_address	#
	.loc 1 5520 0
	movq	-208(%rbp), %rax	# x, x.1085
	movzbl	2(%rax), %eax	# x.1085_669->mode, D.23738
	.loc 1 5517 0
	movzbl	%al, %esi	# D.23738, D.23739
	cmpl	$0, -200(%rbp)	#, context
	je	.L1744	#,
	.loc 1 5517 0 is_stmt 0 discriminator 1
	movl	$10, %eax	#, iftmp.1086
	jmp	.L1745	#
.L1744:
	.loc 1 5517 0 discriminator 2
	movl	$12, %eax	#, iftmp.1086
.L1745:
	.loc 1 5517 0 discriminator 3
	movq	-208(%rbp), %rdi	# x, x.1087
	movq	-216(%rbp), %rdx	# loc, tmp1184
	movl	-224(%rbp), %ecx	# type, tmp1185
	movl	%ecx, 32(%rsp)	# tmp1185,
	movl	-220(%rbp), %ecx	# opnum, tmp1186
	movl	%ecx, 24(%rsp)	# tmp1186,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%esi, %r9d	# D.23739,
	movl	%eax, %r8d	# iftmp.1086,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	call	push_reload	#
	movl	%eax, -140(%rbp)	# tmp1187, reloadnum
	.loc 1 5522 0 is_stmt 1 discriminator 3
	movq	-208(%rbp), %rax	# x, x.1088
	movq	8(%rax), %rdx	# x.1088_676->fld[0].rtx, D.23740
	movq	this_insn(%rip), %rax	# this_insn, this_insn.1089
	movq	32(%rax), %rax	# this_insn.1089_678->fld[3].rtx, D.23740
	movq	%rdx, %rsi	# D.23740,
	movq	%rax, %rdi	# D.23740,
	call	find_inc_amount	#
	movl	%eax, %ecx	#, D.23735
	movl	-140(%rbp), %eax	# reloadnum, tmp1189
	movslq	%eax, %rdx	# tmp1189, tmp1188
	movq	%rdx, %rax	# tmp1188, tmp1190
	addq	%rax, %rax	# tmp1190
	addq	%rdx, %rax	# tmp1188, tmp1190
	salq	$2, %rax	#, tmp1190
	addq	%rdx, %rax	# tmp1188, tmp1190
	salq	$3, %rax	#, tmp1191
	addq	$rld+32, %rax	#, tmp1192
	movl	%ecx, 4(%rax)	# D.23735, rld[reloadnum_675].inc
	.loc 1 5524 0 discriminator 3
	movq	$0, -40(%rbp)	#, link
	.loc 1 5525 0 discriminator 3
	cmpq	$0, -40(%rbp)	#, link
	je	.L1746	#,
	.loc 1 5526 0
	movq	-40(%rbp), %rax	# link, tmp1193
	leaq	8(%rax), %rcx	#, D.23744
	movl	-140(%rbp), %eax	# reloadnum, tmp1194
	movl	$0, %edx	#,
	movl	%eax, %esi	# tmp1194,
	movq	%rcx, %rdi	# D.23744,
	call	push_replacement	#
.L1746:
	.loc 1 5528 0
	movl	$1, %eax	#, D.23735
	jmp	.L1669	#
.L1743:
.LBE67:
	.loc 1 5530 0
	movl	$0, %eax	#, D.23735
	jmp	.L1669	#
.L1646:
	.loc 1 5545 0
	cmpl	$3, -224(%rbp)	#, type
	je	.L1747	#,
	.loc 1 5545 0 is_stmt 0 discriminator 1
	cmpl	$5, -224(%rbp)	#, type
	je	.L1748	#,
	.loc 1 5545 0 discriminator 3
	movl	-224(%rbp), %eax	# type, iftmp.1091
	jmp	.L1750	#
.L1748:
	.loc 1 5545 0 discriminator 4
	movl	$6, %eax	#, iftmp.1091
	jmp	.L1750	#
.L1747:
	.loc 1 5545 0 discriminator 2
	movl	$4, %eax	#, iftmp.1090
.L1750:
	.loc 1 5545 0 discriminator 5
	movq	-208(%rbp), %rdx	# x, x.1092
	leaq	8(%rdx), %r10	#, D.23744
	movq	-208(%rbp), %rdx	# x, x.1093
	movq	8(%rdx), %rdx	# x.1093_691->fld[0].rtx, D.23740
	movq	-208(%rbp), %rcx	# x, x.1094
	movzbl	2(%rcx), %ecx	# x.1094_693->mode, D.23738
	movzbl	%cl, %edi	# D.23738, D.23739
	movl	-220(%rbp), %r8d	# opnum, tmp1195
	movq	-216(%rbp), %rsi	# loc, tmp1196
	movq	24(%rbp), %rcx	# insn, tmp1197
	movq	%rcx, 8(%rsp)	# tmp1197,
	movl	16(%rbp), %ecx	# ind_levels, tmp1198
	movl	%ecx, (%rsp)	# tmp1198,
	movl	%eax, %r9d	# iftmp.1090,
	movq	%r10, %rcx	# D.23744,
	call	find_reloads_address	#
	.loc 1 5549 0 is_stmt 1 discriminator 5
	movq	-208(%rbp), %rax	# x, x.1095
	movzbl	2(%rax), %eax	# x.1095_696->mode, D.23738
	.loc 1 5547 0 discriminator 5
	movzbl	%al, %esi	# D.23738, D.23739
	cmpl	$0, -200(%rbp)	#, context
	je	.L1751	#,
	.loc 1 5547 0 is_stmt 0 discriminator 1
	movl	$10, %eax	#, iftmp.1096
	jmp	.L1752	#
.L1751:
	.loc 1 5547 0 discriminator 2
	movl	$12, %eax	#, iftmp.1096
.L1752:
	.loc 1 5547 0 discriminator 3
	movq	-216(%rbp), %rdx	# loc, tmp1199
	movq	(%rdx), %rdi	# *loc_641(D), D.23740
	movq	-216(%rbp), %rdx	# loc, tmp1200
	movl	-224(%rbp), %ecx	# type, tmp1201
	movl	%ecx, 32(%rsp)	# tmp1201,
	movl	-220(%rbp), %ecx	# opnum, tmp1202
	movl	%ecx, 24(%rsp)	# tmp1202,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%esi, %r9d	# D.23739,
	movl	%eax, %r8d	# iftmp.1096,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	call	push_reload	#
	.loc 1 5550 0 is_stmt 1 discriminator 3
	movl	$1, %eax	#, D.23735
	jmp	.L1669	#
.L1643:
.LBB68:
	.loc 1 5554 0
	movq	-208(%rbp), %rax	# x, x.1097
	movl	8(%rax), %eax	# x.1097_703->fld[0].rtuint, D.23737
	movl	%eax, -160(%rbp)	# D.23737, regno
	.loc 1 5556 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.1098
	movl	-160(%rbp), %edx	# regno, tmp1203
	movslq	%edx, %rdx	# tmp1203, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_709, D.23740
	testq	%rax, %rax	# D.23740
	je	.L1753	#,
	.loc 1 5561 0
	movq	-208(%rbp), %rax	# x, x.1099
	movzbl	2(%rax), %eax	# x.1099_711->mode, D.23738
	.loc 1 5558 0
	movzbl	%al, %edx	# D.23738, D.23739
	cmpl	$0, -200(%rbp)	#, context
	je	.L1754	#,
	.loc 1 5558 0 is_stmt 0 discriminator 1
	movl	$10, %eax	#, iftmp.1100
	jmp	.L1755	#
.L1754:
	.loc 1 5558 0 discriminator 2
	movl	$12, %eax	#, iftmp.1100
.L1755:
	.loc 1 5558 0 discriminator 3
	movq	reg_equiv_constant(%rip), %rcx	# reg_equiv_constant, reg_equiv_constant.1101
	movl	-160(%rbp), %esi	# regno, tmp1204
	movslq	%esi, %rsi	# tmp1204, D.23741
	salq	$3, %rsi	#, D.23741
	addq	%rsi, %rcx	# D.23741, D.23744
	movq	(%rcx), %rdi	# *_719, D.23740
	movl	-224(%rbp), %r9d	# type, tmp1205
	movl	-220(%rbp), %r8d	# opnum, tmp1206
	movq	-216(%rbp), %rsi	# loc, tmp1207
	movl	16(%rbp), %ecx	# ind_levels, tmp1208
	movl	%ecx, (%rsp)	# tmp1208,
	movl	%edx, %ecx	# D.23739,
	movl	%eax, %edx	# iftmp.1100,
	call	find_reloads_address_part	#
	.loc 1 5562 0 is_stmt 1 discriminator 3
	movl	$1, %eax	#, D.23735
	jmp	.L1669	#
.L1753:
	.loc 1 5577 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.1102
	movl	-160(%rbp), %edx	# regno, tmp1209
	movslq	%edx, %rdx	# tmp1209, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_725, D.23740
	testq	%rax, %rax	# D.23740
	je	.L1756	#,
	.loc 1 5578 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.1103
	movl	-160(%rbp), %edx	# regno, tmp1210
	movslq	%edx, %rdx	# tmp1210, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_730, D.23740
	testq	%rax, %rax	# D.23740
	jne	.L1757	#,
	.loc 1 5578 0 is_stmt 0 discriminator 1
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.1104
	testl	%eax, %eax	# num_not_at_initial_offset.1104
	je	.L1756	#,
.L1757:
.LBB69:
	.loc 1 5580 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.1105
	movl	-160(%rbp), %edx	# regno, tmp1211
	movl	%edx, %esi	# tmp1211,
	movq	%rax, %rdi	# x.1105,
	call	make_memloc	#
	movq	%rax, -32(%rbp)	# tmp1212, tem
	.loc 1 5581 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.1106
	movl	-160(%rbp), %edx	# regno, tmp1213
	movslq	%edx, %rdx	# tmp1213, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rax	# *_738, D.23740
	testq	%rax, %rax	# D.23740
	jne	.L1758	#,
	.loc 1 5582 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.1107
	movl	-160(%rbp), %edx	# regno, tmp1214
	movslq	%edx, %rdx	# tmp1214, D.23741
	salq	$3, %rdx	#, D.23741
	addq	%rdx, %rax	# D.23741, D.23744
	movq	(%rax), %rdx	# *_743, D.23740
	movq	-32(%rbp), %rax	# tem, tmp1215
	movq	%rdx, %rsi	# D.23740,
	movq	%rax, %rdi	# tmp1215,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23735
	jne	.L1756	#,
.L1758:
	.loc 1 5584 0
	movq	-32(%rbp), %rax	# tem, tmp1216
	movq	%rax, -208(%rbp)	# tmp1216, x
	.loc 1 5585 0
	cmpl	$3, -224(%rbp)	#, type
	je	.L1759	#,
	.loc 1 5585 0 is_stmt 0 discriminator 1
	cmpl	$5, -224(%rbp)	#, type
	je	.L1760	#,
	.loc 1 5585 0 discriminator 3
	movl	-224(%rbp), %eax	# type, iftmp.1109
	jmp	.L1762	#
.L1760:
	.loc 1 5585 0 discriminator 4
	movl	$6, %eax	#, iftmp.1109
	jmp	.L1762	#
.L1759:
	.loc 1 5585 0 discriminator 2
	movl	$4, %eax	#, iftmp.1108
.L1762:
	.loc 1 5586 0 is_stmt 1 discriminator 5
	movq	-208(%rbp), %rdx	# x, x.1110
	.loc 1 5585 0 discriminator 5
	leaq	8(%rdx), %r10	#, D.23744
	movq	-208(%rbp), %rdx	# x, x.1111
	movq	8(%rdx), %rdx	# x.1111_752->fld[0].rtx, D.23740
	movq	-208(%rbp), %rcx	# x, x.1112
	movzbl	2(%rcx), %ecx	# x.1112_754->mode, D.23738
	movzbl	%cl, %edi	# D.23738, D.23739
	movl	-220(%rbp), %r8d	# opnum, tmp1217
	leaq	-208(%rbp), %rsi	#, tmp1218
	movq	24(%rbp), %rcx	# insn, tmp1219
	movq	%rcx, 8(%rsp)	# tmp1219,
	movl	16(%rbp), %ecx	# ind_levels, tmp1220
	movl	%ecx, (%rsp)	# tmp1220,
	movl	%eax, %r9d	# iftmp.1108,
	movq	%r10, %rcx	# D.23744,
	call	find_reloads_address	#
.L1756:
.LBE69:
	.loc 1 5591 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1113
	movl	-160(%rbp), %edx	# regno, tmp1221
	movslq	%edx, %rdx	# tmp1221, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_760, D.23743
	testw	%ax, %ax	# D.23743
	js	.L1763	#,
	.loc 1 5592 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1114
	movl	-160(%rbp), %edx	# regno, tmp1222
	movslq	%edx, %rdx	# tmp1222, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_765, D.23743
	cwtl
	movl	%eax, -160(%rbp)	# tmp1223, regno
.L1763:
	.loc 1 5594 0
	cmpl	$52, -160(%rbp)	#, regno
	jg	.L1764	#,
	.loc 1 5594 0 is_stmt 0 discriminator 1
	cmpl	$0, -200(%rbp)	#, context
	je	.L1765	#,
	.loc 1 5595 0 is_stmt 1
	cmpl	$6, -160(%rbp)	#, regno
	jle	.L1766	#,
	.loc 1 5595 0 is_stmt 0 discriminator 1
	cmpl	$36, -160(%rbp)	#, regno
	jle	.L1767	#,
	.loc 1 5595 0 discriminator 2
	cmpl	$44, -160(%rbp)	#, regno
	jle	.L1766	#,
.L1767:
	.loc 1 5595 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1116
	movl	-160(%rbp), %edx	# regno, tmp1224
	movslq	%edx, %rdx	# tmp1224, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_771, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1768	#,
	.loc 1 5595 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1117
	movl	-160(%rbp), %edx	# regno, tmp1225
	movslq	%edx, %rdx	# tmp1225, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_777, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1766	#,
.L1768:
	.loc 1 5595 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1118
	movl	-160(%rbp), %edx	# regno, tmp1226
	movslq	%edx, %rdx	# tmp1226, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_783, D.23743
	cmpw	$6, %ax	#, D.23736
	jbe	.L1766	#,
	.loc 1 5595 0 discriminator 3
	movl	$1, %eax	#, iftmp.1115
	jmp	.L1769	#
.L1766:
	.loc 1 5595 0 discriminator 2
	movl	$0, %eax	#, iftmp.1115
.L1769:
	.loc 1 5595 0 discriminator 4
	andl	$1, %eax	#, D.23746
	testb	%al, %al	# D.23746
	jne	.L1764	#,
	jmp	.L1770	#
.L1765:
	.loc 1 5596 0 is_stmt 1
	cmpl	$7, -160(%rbp)	#, regno
	jle	.L1771	#,
	.loc 1 5596 0 is_stmt 0 discriminator 1
	cmpl	$16, -160(%rbp)	#, regno
	je	.L1771	#,
	cmpl	$20, -160(%rbp)	#, regno
	je	.L1771	#,
	cmpl	$36, -160(%rbp)	#, regno
	jle	.L1772	#,
	.loc 1 5596 0 discriminator 2
	cmpl	$44, -160(%rbp)	#, regno
	jle	.L1771	#,
.L1772:
	.loc 1 5596 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1120
	movl	-160(%rbp), %edx	# regno, tmp1227
	movslq	%edx, %rdx	# tmp1227, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_792, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1773	#,
	.loc 1 5596 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1121
	movl	-160(%rbp), %edx	# regno, tmp1228
	movslq	%edx, %rdx	# tmp1228, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_798, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1771	#,
.L1773:
	.loc 1 5596 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1122
	movl	-160(%rbp), %edx	# regno, tmp1229
	movslq	%edx, %rdx	# tmp1229, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_804, D.23743
	cmpw	$7, %ax	#, D.23736
	jbe	.L1771	#,
	.loc 1 5596 0 discriminator 3
	movl	$1, %eax	#, iftmp.1119
	jmp	.L1774	#
.L1771:
	.loc 1 5596 0 discriminator 2
	movl	$0, %eax	#, iftmp.1119
.L1774:
	.loc 1 5595 0 is_stmt 1
	andl	$1, %eax	#, D.23746
	testb	%al, %al	# D.23746
	je	.L1770	#,
.L1764:
	.loc 1 5600 0
	movq	-208(%rbp), %rax	# x, x.1123
	movzbl	2(%rax), %eax	# x.1123_824->mode, D.23738
	.loc 1 5598 0
	movzbl	%al, %esi	# D.23738, D.23739
	cmpl	$0, -200(%rbp)	#, context
	je	.L1775	#,
	.loc 1 5598 0 is_stmt 0 discriminator 1
	movl	$10, %eax	#, iftmp.1124
	jmp	.L1776	#
.L1775:
	.loc 1 5598 0 discriminator 2
	movl	$12, %eax	#, iftmp.1124
.L1776:
	.loc 1 5598 0 discriminator 3
	movq	-208(%rbp), %rdi	# x, x.1125
	movq	-216(%rbp), %rdx	# loc, tmp1230
	movl	-224(%rbp), %ecx	# type, tmp1231
	movl	%ecx, 32(%rsp)	# tmp1231,
	movl	-220(%rbp), %ecx	# opnum, tmp1232
	movl	%ecx, 24(%rsp)	# tmp1232,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%esi, %r9d	# D.23739,
	movl	%eax, %r8d	# iftmp.1124,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	call	push_reload	#
	.loc 1 5601 0 is_stmt 1 discriminator 3
	movl	$1, %eax	#, D.23735
	jmp	.L1669	#
.L1770:
	.loc 1 5608 0
	movq	-208(%rbp), %rax	# x, x.1126
	movzbl	2(%rax), %eax	# x.1126_810->mode, D.23738
	movzbl	%al, %edx	# D.23738, D.23739
	movq	this_insn(%rip), %rsi	# this_insn, this_insn.1127
	movl	-160(%rbp), %eax	# regno, regno.1128
	movl	$0, %ecx	#,
	movl	%eax, %edi	# regno.1128,
	call	regno_clobbered_p	#
	testl	%eax, %eax	# D.23735
	je	.L1777	#,
	.loc 1 5612 0
	movq	-208(%rbp), %rax	# x, x.1129
	movzbl	2(%rax), %eax	# x.1129_816->mode, D.23738
	.loc 1 5610 0
	movzbl	%al, %esi	# D.23738, D.23739
	cmpl	$0, -200(%rbp)	#, context
	je	.L1778	#,
	.loc 1 5610 0 is_stmt 0 discriminator 1
	movl	$10, %eax	#, iftmp.1130
	jmp	.L1779	#
.L1778:
	.loc 1 5610 0 discriminator 2
	movl	$12, %eax	#, iftmp.1130
.L1779:
	.loc 1 5610 0 discriminator 3
	movq	-208(%rbp), %rdi	# x, x.1131
	movq	-216(%rbp), %rdx	# loc, tmp1233
	movl	-224(%rbp), %ecx	# type, tmp1234
	movl	%ecx, 32(%rsp)	# tmp1234,
	movl	-220(%rbp), %ecx	# opnum, tmp1235
	movl	%ecx, 24(%rsp)	# tmp1235,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%esi, %r9d	# D.23739,
	movl	%eax, %r8d	# iftmp.1130,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	call	push_reload	#
	.loc 1 5613 0 is_stmt 1 discriminator 3
	movl	$1, %eax	#, D.23735
	jmp	.L1669	#
.L1777:
.LBE68:
	.loc 1 5616 0
	movl	$0, %eax	#, D.23735
	jmp	.L1669	#
.L1645:
	.loc 1 5619 0
	movq	-208(%rbp), %rax	# x, x.1132
	movq	8(%rax), %rax	# x.1132_831->fld[0].rtx, D.23740
	movzwl	(%rax), %eax	# _832->code, D.23736
	cmpw	$61, %ax	#, D.23736
	jne	.L1780	#,
	.loc 1 5624 0
	movq	-208(%rbp), %rax	# x, x.1133
	movq	8(%rax), %rax	# x.1133_834->fld[0].rtx, D.23740
	movl	8(%rax), %eax	# _835->fld[0].rtuint, D.23737
	cmpl	$52, %eax	#, D.23737
	ja	.L1781	#,
.LBB70:
	.loc 1 5626 0
	movq	-208(%rbp), %rax	# x, x.1134
	movq	%rax, %rdi	# x.1134,
	call	subreg_regno	#
	movl	%eax, -136(%rbp)	# D.23737, regno
	.loc 1 5628 0
	cmpl	$0, -200(%rbp)	#, context
	je	.L1782	#,
	.loc 1 5628 0 is_stmt 0 discriminator 1
	cmpl	$6, -136(%rbp)	#, regno
	jle	.L1783	#,
	cmpl	$36, -136(%rbp)	#, regno
	jle	.L1784	#,
	.loc 1 5628 0 discriminator 2
	cmpl	$44, -136(%rbp)	#, regno
	jle	.L1783	#,
.L1784:
	.loc 1 5628 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1137
	movl	-136(%rbp), %edx	# regno, tmp1236
	movslq	%edx, %rdx	# tmp1236, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_843, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1785	#,
	.loc 1 5628 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1138
	movl	-136(%rbp), %edx	# regno, tmp1237
	movslq	%edx, %rdx	# tmp1237, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_849, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1783	#,
.L1785:
	.loc 1 5628 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1139
	movl	-136(%rbp), %edx	# regno, tmp1238
	movslq	%edx, %rdx	# tmp1238, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_855, D.23743
	cmpw	$6, %ax	#, D.23736
	jbe	.L1783	#,
	.loc 1 5628 0 discriminator 3
	movl	$1, %eax	#, iftmp.1136
	jmp	.L1786	#
.L1783:
	.loc 1 5628 0 discriminator 2
	movl	$0, %eax	#, iftmp.1136
.L1786:
	.loc 1 5628 0 discriminator 4
	andl	$1, %eax	#, iftmp.1135
	jmp	.L1787	#
.L1782:
	.loc 1 5629 0 is_stmt 1
	cmpl	$7, -136(%rbp)	#, regno
	jle	.L1788	#,
	.loc 1 5629 0 is_stmt 0 discriminator 1
	cmpl	$16, -136(%rbp)	#, regno
	je	.L1788	#,
	cmpl	$20, -136(%rbp)	#, regno
	je	.L1788	#,
	cmpl	$36, -136(%rbp)	#, regno
	jle	.L1789	#,
	.loc 1 5629 0 discriminator 2
	cmpl	$44, -136(%rbp)	#, regno
	jle	.L1788	#,
.L1789:
	.loc 1 5629 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1141
	movl	-136(%rbp), %edx	# regno, tmp1239
	movslq	%edx, %rdx	# tmp1239, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_864, D.23743
	cmpw	$36, %ax	#, D.23736
	jbe	.L1790	#,
	.loc 1 5629 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1142
	movl	-136(%rbp), %edx	# regno, tmp1240
	movslq	%edx, %rdx	# tmp1240, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_870, D.23743
	cmpw	$44, %ax	#, D.23736
	jbe	.L1788	#,
.L1790:
	.loc 1 5629 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.1143
	movl	-136(%rbp), %edx	# regno, tmp1241
	movslq	%edx, %rdx	# tmp1241, D.23741
	addq	%rdx, %rdx	# D.23741
	addq	%rdx, %rax	# D.23741, D.23742
	movzwl	(%rax), %eax	# *_876, D.23743
	cmpw	$7, %ax	#, D.23736
	jbe	.L1788	#,
	.loc 1 5629 0 discriminator 3
	movl	$1, %eax	#, iftmp.1140
	jmp	.L1791	#
.L1788:
	.loc 1 5629 0 discriminator 2
	movl	$0, %eax	#, iftmp.1140
.L1791:
	.loc 1 5628 0 is_stmt 1
	andl	$1, %eax	#, iftmp.1135
.L1787:
	.loc 1 5628 0 is_stmt 0 discriminator 2
	testb	%al, %al	# iftmp.1135
	je	.L1792	#,
	.loc 1 5634 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.1144
	movzbl	2(%rax), %eax	# x.1144_882->mode, D.23738
	.loc 1 5631 0
	movzbl	%al, %esi	# D.23738, D.23739
	cmpl	$0, -200(%rbp)	#, context
	je	.L1793	#,
	.loc 1 5631 0 is_stmt 0 discriminator 1
	movl	$10, %eax	#, iftmp.1145
	jmp	.L1794	#
.L1793:
	.loc 1 5631 0 discriminator 2
	movl	$12, %eax	#, iftmp.1145
.L1794:
	.loc 1 5631 0 discriminator 3
	movq	-208(%rbp), %rdi	# x, x.1146
	movq	-216(%rbp), %rdx	# loc, tmp1242
	movl	-224(%rbp), %ecx	# type, tmp1243
	movl	%ecx, 32(%rsp)	# tmp1243,
	movl	-220(%rbp), %ecx	# opnum, tmp1244
	movl	%ecx, 24(%rsp)	# tmp1244,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%esi, %r9d	# D.23739,
	movl	%eax, %r8d	# iftmp.1145,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	call	push_reload	#
	.loc 1 5635 0 is_stmt 1 discriminator 3
	movl	$1, %eax	#, D.23735
	jmp	.L1669	#
.L1792:
.LBE70:
	jmp	.L1780	#
.L1781:
.LBB71:
	.loc 1 5642 0
	cmpl	$0, -200(%rbp)	#, context
	je	.L1795	#,
	.loc 1 5642 0 is_stmt 0 discriminator 1
	movl	$10, %eax	#, iftmp.1147
	jmp	.L1796	#
.L1795:
	.loc 1 5642 0 discriminator 2
	movl	$12, %eax	#, iftmp.1147
.L1796:
	.loc 1 5642 0 discriminator 3
	movl	%eax, -132(%rbp)	# iftmp.1147, class
	.loc 1 5644 0 is_stmt 1 discriminator 3
	movl	-132(%rbp), %eax	# class, tmp1245
	movl	$12, %esi	#,
	movl	%eax, %edi	# tmp1245,
	call	reg_classes_intersect_p	#
	.loc 1 5645 0 discriminator 3
	testl	%eax, %eax	# D.23735
	jne	.L1797	#,
	.loc 1 5644 0 discriminator 1
	movq	-208(%rbp), %rax	# x, x.1150
	movq	8(%rax), %rax	# x.1150_893->fld[0].rtx, D.23740
	movzbl	2(%rax), %eax	# _894->mode, D.23738
	movzbl	%al, %eax	# D.23738, D.23735
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23751
	.loc 1 5645 0 discriminator 1
	cmpl	$5, %eax	#, D.23751
	je	.L1798	#,
	.loc 1 5644 0
	movq	-208(%rbp), %rax	# x, x.1151
	movq	8(%rax), %rax	# x.1151_898->fld[0].rtx, D.23740
	movzbl	2(%rax), %eax	# _899->mode, D.23738
	movzbl	%al, %eax	# D.23738, D.23735
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23751
	cmpl	$6, %eax	#, D.23751
	jne	.L1799	#,
.L1798:
	.loc 1 5645 0 discriminator 2
	movl	$2, %eax	#, iftmp.1149
	jmp	.L1800	#
.L1799:
	.loc 1 5645 0 is_stmt 0
	movl	$1, %eax	#, iftmp.1149
.L1800:
	jmp	.L1801	#
.L1797:
	.loc 1 5644 0 is_stmt 1
	movq	-208(%rbp), %rax	# x, x.1153
	movq	8(%rax), %rax	# x.1153_906->fld[0].rtx, D.23740
	movzbl	2(%rax), %eax	# _907->mode, D.23738
	cmpb	$18, %al	#, D.23738
	je	.L1802	#,
	.loc 1 5644 0 is_stmt 0 discriminator 1
	movq	-208(%rbp), %rax	# x, x.1154
	movq	8(%rax), %rax	# x.1154_909->fld[0].rtx, D.23740
	movzbl	2(%rax), %eax	# _910->mode, D.23738
	movzbl	%al, %eax	# D.23738, iftmp.1152
	jmp	.L1803	#
.L1802:
	.loc 1 5644 0 discriminator 2
	movl	$17, %eax	#, iftmp.1152
.L1803:
	.loc 1 5644 0 discriminator 3
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23738
	movzbl	%al, %edx	# D.23738, D.23735
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1156
	andl	$33554432, %eax	#, D.23735
	testl	%eax, %eax	# D.23735
	je	.L1804	#,
	.loc 1 5644 0 discriminator 1
	movl	$8, %eax	#, iftmp.1155
	jmp	.L1805	#
.L1804:
	.loc 1 5644 0 discriminator 2
	movl	$4, %eax	#, iftmp.1155
.L1805:
	.loc 1 5644 0 discriminator 3
	addl	%edx, %eax	# D.23735, D.23735
	subl	$1, %eax	#, D.23735
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1158
	andl	$33554432, %edx	#, D.23735
	testl	%edx, %edx	# D.23735
	je	.L1806	#,
	.loc 1 5644 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1157
	jmp	.L1807	#
.L1806:
	.loc 1 5644 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1157
.L1807:
	.loc 1 5644 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1157
.L1801:
	.loc 1 5645 0 is_stmt 1 discriminator 4
	movl	-132(%rbp), %edx	# class, tmp1251
	movl	reg_class_size(,%rdx,4), %edx	# reg_class_size, D.23737
	.loc 1 5644 0 discriminator 4
	cmpl	%edx, %eax	# D.23737, iftmp.1148
	jbe	.L1780	#,
	.loc 1 5647 0
	movq	-208(%rbp), %rax	# x, x.1159
	movq	24(%rbp), %rsi	# insn, tmp1252
	movl	-224(%rbp), %ecx	# type, tmp1253
	movl	-220(%rbp), %edx	# opnum, tmp1254
	movq	%rsi, %r9	# tmp1252,
	movl	16(%rbp), %r8d	# ind_levels,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# x.1159,
	call	find_reloads_subreg_address	#
	movq	%rax, -208(%rbp)	# x.1160, x
	.loc 1 5650 0
	movq	-208(%rbp), %rax	# x, x.1161
	movzbl	2(%rax), %eax	# x.1161_931->mode, D.23738
	.loc 1 5649 0
	movzbl	%al, %edi	# D.23738, D.23739
	movq	-208(%rbp), %rax	# x, x.1162
	movl	-132(%rbp), %esi	# class, tmp1255
	movq	-216(%rbp), %rdx	# loc, tmp1256
	movl	-224(%rbp), %ecx	# type, tmp1257
	movl	%ecx, 32(%rsp)	# tmp1257,
	movl	-220(%rbp), %ecx	# opnum, tmp1258
	movl	%ecx, 24(%rsp)	# tmp1258,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%edi, %r9d	# D.23739,
	movl	%esi, %r8d	# tmp1255,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# x.1162,
	call	push_reload	#
	.loc 1 5651 0
	movl	$1, %eax	#, D.23735
	jmp	.L1669	#
.L1780:
.LBE71:
	.loc 1 5655 0
	jmp	.L1808	#
.L1812:
	.loc 1 5658 0
	nop
.L1808:
.LBB72:
	.loc 1 5662 0
	movl	-152(%rbp), %eax	# code, code.1163
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp1260
	movq	%rax, -24(%rbp)	# tmp1260, fmt
	.loc 1 5665 0
	movl	-152(%rbp), %eax	# code, code.1164
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.23738
	movzbl	%al, %eax	# D.23738, D.23735
	subl	$1, %eax	#, tmp1262
	movl	%eax, -156(%rbp)	# tmp1262, i
	jmp	.L1809	#
.L1811:
	.loc 1 5667 0
	movl	-156(%rbp), %eax	# i, tmp1263
	movslq	%eax, %rdx	# tmp1263, D.23752
	movq	-24(%rbp), %rax	# fmt, tmp1264
	addq	%rdx, %rax	# D.23752, D.23753
	movzbl	(%rax), %eax	# *_943, D.23754
	cmpb	$101, %al	#, D.23754
	jne	.L1810	#,
	.loc 1 5668 0
	movq	-208(%rbp), %rax	# x, x.1165
	movl	-156(%rbp), %edx	# i, tmp1266
	movslq	%edx, %rdx	# tmp1266, tmp1265
	salq	$3, %rdx	#, tmp1267
	addq	%rdx, %rax	# tmp1267, tmp1268
	leaq	8(%rax), %rdi	#, D.23744
	movq	-208(%rbp), %rax	# x, x.1166
	movl	-156(%rbp), %edx	# i, tmp1270
	movslq	%edx, %rdx	# tmp1270, tmp1269
	movq	8(%rax,%rdx,8), %rsi	# x.1166_947->fld[i_11].rtx, D.23740
	movl	-224(%rbp), %r9d	# type, tmp1271
	movl	-220(%rbp), %r8d	# opnum, tmp1272
	movl	-200(%rbp), %edx	# context, tmp1273
	movl	-196(%rbp), %eax	# mode, tmp1274
	movq	24(%rbp), %rcx	# insn, tmp1275
	movq	%rcx, 8(%rsp)	# tmp1275,
	movl	16(%rbp), %ecx	# ind_levels, tmp1276
	movl	%ecx, (%rsp)	# tmp1276,
	movq	%rdi, %rcx	# D.23744,
	movl	%eax, %edi	# tmp1274,
	call	find_reloads_address_1	#
.L1810:
	.loc 1 5665 0
	subl	$1, -156(%rbp)	#, i
.L1809:
	.loc 1 5665 0 is_stmt 0 discriminator 1
	cmpl	$0, -156(%rbp)	#, i
	jns	.L1811	#,
.LBE72:
	.loc 1 5673 0 is_stmt 1
	movl	$0, %eax	#, D.23735
.L1669:
	.loc 1 5674 0
	addq	$264, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE30:
	.size	find_reloads_address_1, .-find_reloads_address_1
	.type	find_reloads_address_part, @function
find_reloads_address_part:
.LFB31:
	.loc 1 5700 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -24(%rbp)	# x, x
	movq	%rsi, -32(%rbp)	# loc, loc
	movl	%edx, -36(%rbp)	# class, class
	movl	%ecx, -40(%rbp)	# mode, mode
	movl	%r8d, -44(%rbp)	# opnum, opnum
	movl	%r9d, -48(%rbp)	# type, type
	.loc 1 5701 0
	movq	-24(%rbp), %rax	# x, tmp103
	movzwl	(%rax), %eax	# x_2(D)->code, D.23755
	cmpw	$67, %ax	#, D.23755
	je	.L1814	#,
	.loc 1 5701 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# x, tmp104
	movzwl	(%rax), %eax	# x_2(D)->code, D.23755
	cmpw	$68, %ax	#, D.23755
	je	.L1814	#,
	movq	-24(%rbp), %rax	# x, tmp105
	movzwl	(%rax), %eax	# x_2(D)->code, D.23755
	cmpw	$54, %ax	#, D.23755
	je	.L1814	#,
	movq	-24(%rbp), %rax	# x, tmp106
	movzwl	(%rax), %eax	# x_2(D)->code, D.23755
	cmpw	$55, %ax	#, D.23755
	je	.L1814	#,
	movq	-24(%rbp), %rax	# x, tmp107
	movzwl	(%rax), %eax	# x_2(D)->code, D.23755
	cmpw	$58, %ax	#, D.23755
	je	.L1814	#,
	movq	-24(%rbp), %rax	# x, tmp108
	movzwl	(%rax), %eax	# x_2(D)->code, D.23755
	cmpw	$134, %ax	#, D.23755
	je	.L1814	#,
	movq	-24(%rbp), %rax	# x, tmp109
	movzwl	(%rax), %eax	# x_2(D)->code, D.23755
	cmpw	$56, %ax	#, D.23755
	je	.L1814	#,
	movq	-24(%rbp), %rax	# x, tmp110
	movzwl	(%rax), %eax	# x_2(D)->code, D.23755
	cmpw	$140, %ax	#, D.23755
	jne	.L1815	#,
.L1814:
	.loc 1 5703 0 is_stmt 1
	movl	-36(%rbp), %edx	# class, tmp111
	movq	-24(%rbp), %rax	# x, tmp112
	movl	%edx, %esi	# tmp111,
	movq	%rax, %rdi	# tmp112,
	call	ix86_preferred_reload_class	#
	.loc 1 5702 0
	testl	%eax, %eax	# D.23756
	jne	.L1815	#,
.LBB73:
	.loc 1 5707 0
	movq	-24(%rbp), %rdx	# x, tmp113
	movl	-40(%rbp), %eax	# mode, tmp114
	movq	%rdx, %rsi	# tmp113,
	movl	%eax, %edi	# tmp114,
	call	force_const_mem	#
	movq	%rax, -24(%rbp)	# tmp115, x
	movq	-24(%rbp), %rax	# x, tmp116
	movq	%rax, -8(%rbp)	# tmp116, tem
	.loc 1 5708 0
	movq	-8(%rbp), %rax	# tem, tem.1167
	leaq	8(%rax), %rdi	#, D.23757
	movq	-8(%rbp), %rax	# tem, tem.1168
	movq	8(%rax), %rdx	# tem.1168_17->fld[0].rtx, D.23758
	movl	-48(%rbp), %r9d	# type, tmp117
	movl	-44(%rbp), %r8d	# opnum, tmp118
	leaq	-8(%rbp), %rsi	#, tmp119
	movl	-40(%rbp), %eax	# mode, tmp120
	movq	$0, 8(%rsp)	#,
	movl	16(%rbp), %ecx	# ind_levels, tmp121
	movl	%ecx, (%rsp)	# tmp121,
	movq	%rdi, %rcx	# D.23757,
	movl	%eax, %edi	# tmp120,
	call	find_reloads_address	#
.LBE73:
	.loc 1 5704 0
	jmp	.L1816	#
.L1815:
	.loc 1 5712 0
	movq	-24(%rbp), %rax	# x, tmp122
	movzwl	(%rax), %eax	# x_2(D)->code, D.23755
	cmpw	$75, %ax	#, D.23755
	jne	.L1816	#,
	.loc 1 5713 0
	movq	-24(%rbp), %rax	# x, tmp123
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.23758
	movzwl	(%rax), %eax	# _23->code, D.23755
	cmpw	$67, %ax	#, D.23755
	je	.L1817	#,
	.loc 1 5713 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# x, tmp124
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.23758
	movzwl	(%rax), %eax	# _25->code, D.23755
	cmpw	$68, %ax	#, D.23755
	je	.L1817	#,
	movq	-24(%rbp), %rax	# x, tmp125
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.23758
	movzwl	(%rax), %eax	# _27->code, D.23755
	cmpw	$54, %ax	#, D.23755
	je	.L1817	#,
	movq	-24(%rbp), %rax	# x, tmp126
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.23758
	movzwl	(%rax), %eax	# _29->code, D.23755
	cmpw	$55, %ax	#, D.23755
	je	.L1817	#,
	movq	-24(%rbp), %rax	# x, tmp127
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.23758
	movzwl	(%rax), %eax	# _31->code, D.23755
	cmpw	$58, %ax	#, D.23755
	je	.L1817	#,
	movq	-24(%rbp), %rax	# x, tmp128
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.23758
	movzwl	(%rax), %eax	# _33->code, D.23755
	cmpw	$134, %ax	#, D.23755
	je	.L1817	#,
	movq	-24(%rbp), %rax	# x, tmp129
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.23758
	movzwl	(%rax), %eax	# _35->code, D.23755
	cmpw	$56, %ax	#, D.23755
	je	.L1817	#,
	movq	-24(%rbp), %rax	# x, tmp130
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.23758
	movzwl	(%rax), %eax	# _37->code, D.23755
	cmpw	$140, %ax	#, D.23755
	jne	.L1816	#,
.L1817:
	.loc 1 5715 0 is_stmt 1
	movq	-24(%rbp), %rax	# x, tmp131
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.23758
	movl	-36(%rbp), %edx	# class, tmp132
	movl	%edx, %esi	# tmp132,
	movq	%rax, %rdi	# D.23758,
	call	ix86_preferred_reload_class	#
	.loc 1 5714 0
	testl	%eax, %eax	# D.23756
	jne	.L1816	#,
.LBB74:
	.loc 1 5719 0
	movq	-24(%rbp), %rax	# x, tmp133
	movq	16(%rax), %rdx	# x_2(D)->fld[1].rtx, D.23758
	movq	-24(%rbp), %rax	# x, tmp134
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.23759
	movzbl	%al, %eax	# D.23759, D.23760
	movq	%rdx, %rsi	# D.23758,
	movl	%eax, %edi	# D.23760,
	call	force_const_mem	#
	movq	%rax, -8(%rbp)	# tem.1169, tem
	.loc 1 5720 0
	movq	-8(%rbp), %rcx	# tem, tem.1170
	movq	-24(%rbp), %rax	# x, tmp135
	movq	8(%rax), %rdx	# x_2(D)->fld[0].rtx, D.23758
	movq	-24(%rbp), %rax	# x, tmp136
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.23759
	movzbl	%al, %eax	# D.23759, D.23760
	movl	%eax, %esi	# D.23760,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -24(%rbp)	# tmp137, x
	.loc 1 5721 0
	movq	-8(%rbp), %rax	# tem, tem.1171
	leaq	8(%rax), %rdi	#, D.23757
	movq	-8(%rbp), %rax	# tem, tem.1172
	movq	8(%rax), %rdx	# tem.1172_52->fld[0].rtx, D.23758
	movl	-48(%rbp), %r9d	# type, tmp138
	movl	-44(%rbp), %r8d	# opnum, tmp139
	leaq	-8(%rbp), %rsi	#, tmp140
	movl	-40(%rbp), %eax	# mode, tmp141
	movq	$0, 8(%rsp)	#,
	movl	16(%rbp), %ecx	# ind_levels, tmp142
	movl	%ecx, (%rsp)	# tmp142,
	movq	%rdi, %rcx	# D.23757,
	movl	%eax, %edi	# tmp141,
	call	find_reloads_address	#
.L1816:
.LBE74:
	.loc 1 5725 0
	movl	-40(%rbp), %edi	# mode, tmp143
	movl	-36(%rbp), %esi	# class, tmp144
	movq	-32(%rbp), %rdx	# loc, tmp145
	movq	-24(%rbp), %rax	# x, tmp146
	movl	-48(%rbp), %ecx	# type, tmp147
	movl	%ecx, 32(%rsp)	# tmp147,
	movl	-44(%rbp), %ecx	# opnum, tmp148
	movl	%ecx, 24(%rsp)	# tmp148,
	movl	$0, 16(%rsp)	#,
	movl	$0, 8(%rsp)	#,
	movl	$0, (%rsp)	#,
	movl	%edi, %r9d	# tmp143,
	movl	%esi, %r8d	# tmp144,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp146,
	call	push_reload	#
	.loc 1 5727 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE31:
	.size	find_reloads_address_part, .-find_reloads_address_part
	.type	find_reloads_subreg_address, @function
find_reloads_subreg_address:
.LFB32:
	.loc 1 5760 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# x, x
	movl	%esi, -60(%rbp)	# force_replace, force_replace
	movl	%edx, -64(%rbp)	# opnum, opnum
	movl	%ecx, -68(%rbp)	# type, type
	movl	%r8d, -72(%rbp)	# ind_levels, ind_levels
	movq	%r9, -80(%rbp)	# insn, insn
	.loc 1 5761 0
	movq	-56(%rbp), %rax	# x, tmp118
	movq	8(%rax), %rax	# x_6(D)->fld[0].rtx, D.23762
	movl	8(%rax), %eax	# _7->fld[0].rtuint, D.23763
	movl	%eax, -40(%rbp)	# D.23763, regno
	.loc 1 5763 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.1173
	movl	-40(%rbp), %edx	# regno, tmp119
	movslq	%edx, %rdx	# tmp119, D.23764
	salq	$3, %rdx	#, D.23764
	addq	%rdx, %rax	# D.23764, D.23765
	movq	(%rax), %rax	# *_13, D.23762
	testq	%rax, %rax	# D.23762
	je	.L1819	#,
	.loc 1 5767 0
	cmpl	$0, -60(%rbp)	#, force_replace
	jne	.L1820	#,
	.loc 1 5768 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.1174
	movl	-40(%rbp), %edx	# regno, tmp120
	movslq	%edx, %rdx	# tmp120, D.23764
	salq	$3, %rdx	#, D.23764
	addq	%rdx, %rax	# D.23764, D.23765
	movq	(%rax), %rax	# *_19, D.23762
	testq	%rax, %rax	# D.23762
	jne	.L1821	#,
	.loc 1 5769 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.1175
	movl	-40(%rbp), %edx	# regno, tmp121
	movslq	%edx, %rdx	# tmp121, D.23764
	salq	$3, %rdx	#, D.23764
	addq	%rdx, %rax	# D.23764, D.23765
	movq	(%rax), %rax	# *_24, D.23762
	movq	%rax, %rdi	# D.23762,
	call	offsettable_memref_p	#
	testl	%eax, %eax	# D.23766
	jne	.L1820	#,
.L1821:
	.loc 1 5770 0
	movl	$1, -60(%rbp)	#, force_replace
.L1820:
	.loc 1 5772 0
	cmpl	$0, -60(%rbp)	#, force_replace
	jne	.L1822	#,
	.loc 1 5772 0 is_stmt 0 discriminator 1
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.1176
	testl	%eax, %eax	# num_not_at_initial_offset.1176
	je	.L1819	#,
.L1822:
.LBB75:
	.loc 1 5774 0 is_stmt 1
	movq	-56(%rbp), %rax	# x, tmp122
	movq	8(%rax), %rax	# x_6(D)->fld[0].rtx, D.23762
	movl	-40(%rbp), %edx	# regno, tmp123
	movl	%edx, %esi	# tmp123,
	movq	%rax, %rdi	# D.23762,
	call	make_memloc	#
	movq	%rax, -24(%rbp)	# tem.1177, tem
	.loc 1 5778 0
	cmpl	$0, -60(%rbp)	#, force_replace
	jne	.L1823	#,
	.loc 1 5779 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.1178
	movl	-40(%rbp), %edx	# regno, tmp124
	movslq	%edx, %rdx	# tmp124, D.23764
	salq	$3, %rdx	#, D.23764
	addq	%rdx, %rax	# D.23764, D.23765
	movq	(%rax), %rdx	# *_34, D.23762
	movq	-24(%rbp), %rax	# tem, tem.1179
	movq	%rdx, %rsi	# D.23762,
	movq	%rax, %rdi	# tem.1179,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23766
	jne	.L1819	#,
.L1823:
.LBB76:
	.loc 1 5781 0
	movq	-56(%rbp), %rax	# x, tmp125
	movl	16(%rax), %eax	# x_6(D)->fld[1].rtuint, D.23763
	movl	%eax, -36(%rbp)	# D.23763, offset
	.loc 1 5782 0
	movq	-56(%rbp), %rax	# x, tmp126
	movzbl	2(%rax), %eax	# x_6(D)->mode, D.23767
	movzbl	%al, %eax	# D.23767, D.23766
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23767
	movzbl	%al, %eax	# D.23767, tmp128
	movl	%eax, -32(%rbp)	# tmp128, outer_size
	.loc 1 5783 0
	movq	-56(%rbp), %rax	# x, tmp129
	movq	8(%rax), %rax	# x_6(D)->fld[0].rtx, D.23762
	movzbl	2(%rax), %eax	# _44->mode, D.23767
	movzbl	%al, %eax	# D.23767, D.23766
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23767
	movzbl	%al, %eax	# D.23767, tmp131
	movl	%eax, -28(%rbp)	# tmp131, inner_size
	.loc 1 5785 0
	movq	-24(%rbp), %rbx	# tem, tem.1180
	movl	-36(%rbp), %eax	# offset, tmp132
	movslq	%eax, %rdx	# tmp132, D.23768
	movq	-24(%rbp), %rax	# tem, tem.1181
	movq	8(%rax), %rax	# tem.1181_51->fld[0].rtx, D.23762
	movq	%rdx, %rsi	# D.23768,
	movq	%rax, %rdi	# D.23762,
	call	plus_constant_wide	#
	movq	%rax, 8(%rbx)	# D.23762, tem.1180_49->fld[0].rtx
	.loc 1 5786 0
	movq	-24(%rbp), %rax	# tem, tem.1182
	movq	-56(%rbp), %rdx	# x, tmp133
	movzbl	2(%rdx), %edx	# x_6(D)->mode, D.23767
	movb	%dl, 2(%rax)	# D.23767, tem.1182_54->mode
	.loc 1 5809 0
	cmpl	$3, -68(%rbp)	#, type
	je	.L1825	#,
	.loc 1 5809 0 is_stmt 0 discriminator 1
	cmpl	$5, -68(%rbp)	#, type
	je	.L1826	#,
	.loc 1 5809 0 discriminator 3
	movl	-68(%rbp), %eax	# type, iftmp.1186
	jmp	.L1828	#
.L1826:
	.loc 1 5809 0 discriminator 4
	movl	$6, %eax	#, iftmp.1186
	jmp	.L1828	#
.L1825:
	.loc 1 5809 0 discriminator 2
	movl	$4, %eax	#, iftmp.1185
.L1828:
	.loc 1 5810 0 is_stmt 1
	movq	-24(%rbp), %rdx	# tem, tem.1187
	.loc 1 5809 0
	leaq	8(%rdx), %r10	#, D.23765
	movq	-24(%rbp), %rdx	# tem, tem.1188
	movq	8(%rdx), %rdx	# tem.1188_63->fld[0].rtx, D.23762
	movq	-24(%rbp), %rcx	# tem, tem.1189
	movzbl	2(%rcx), %ecx	# tem.1189_65->mode, D.23767
	movzbl	%cl, %edi	# D.23767, D.23769
	movl	-64(%rbp), %r8d	# opnum, tmp134
	leaq	-24(%rbp), %rsi	#, tmp135
	movq	-80(%rbp), %rcx	# insn, tmp136
	movq	%rcx, 8(%rsp)	# tmp136,
	movl	-72(%rbp), %ecx	# ind_levels, tmp137
	movl	%ecx, (%rsp)	# tmp137,
	movl	%eax, %r9d	# iftmp.1185,
	movq	%r10, %rcx	# D.23765,
	call	find_reloads_address	#
	.loc 1 5816 0
	movl	replace_reloads(%rip), %eax	# replace_reloads, replace_reloads.1190
	testl	%eax, %eax	# replace_reloads.1190
	je	.L1829	#,
	.loc 1 5816 0 is_stmt 0 discriminator 1
	movl	-64(%rbp), %eax	# opnum, tmp139
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.23762
	cmpq	-56(%rbp), %rax	# x, D.23762
	je	.L1829	#,
	.loc 1 5820 0 is_stmt 1
	movq	-56(%rbp), %rax	# x, tmp140
	movq	8(%rax), %rax	# x_6(D)->fld[0].rtx, D.23762
	movq	%rax, %rdx	# D.23762,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-80(%rbp), %rdx	# insn, tmp141
	movq	%rdx, %rsi	# tmp141,
	movq	%rax, %rdi	# D.23762,
	call	emit_insn_before	#
	movb	$2, 2(%rax)	#, _75->mode
.L1829:
	.loc 1 5823 0
	movq	-24(%rbp), %rax	# tem, tmp142
	movq	%rax, -56(%rbp)	# tmp142, x
.L1819:
.LBE76:
.LBE75:
	.loc 1 5827 0
	movq	-56(%rbp), %rax	# x, D.23770
	.loc 1 5828 0
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE32:
	.size	find_reloads_subreg_address, .-find_reloads_subreg_address
	.globl	subst_reloads
	.type	subst_reloads, @function
subst_reloads:
.LFB33:
	.loc 1 5840 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# insn, insn
	.loc 1 5843 0
	movl	$0, -40(%rbp)	#, i
	jmp	.L1832	#
.L1841:
.LBB77:
	.loc 1 5845 0
	movl	-40(%rbp), %eax	# i, tmp112
	movslq	%eax, %rdx	# tmp112, tmp111
	movq	%rdx, %rax	# tmp111, tmp113
	addq	%rax, %rax	# tmp113
	addq	%rdx, %rax	# tmp111, tmp113
	salq	$3, %rax	#, tmp114
	addq	$replacements, %rax	#, tmp115
	movq	%rax, -24(%rbp)	# tmp115, r
	.loc 1 5846 0
	movq	-24(%rbp), %rax	# r, tmp116
	movl	16(%rax), %eax	# r_5->what, D.23771
	movslq	%eax, %rdx	# D.23771, tmp117
	movq	%rdx, %rax	# tmp117, tmp118
	addq	%rax, %rax	# tmp118
	addq	%rdx, %rax	# tmp117, tmp118
	salq	$2, %rax	#, tmp118
	addq	%rdx, %rax	# tmp117, tmp118
	salq	$3, %rax	#, tmp119
	addq	$rld+64, %rax	#, tmp120
	movq	(%rax), %rax	# rld[_6].reg_rtx, tmp121
	movq	%rax, -32(%rbp)	# tmp121, reloadreg
	.loc 1 5847 0
	cmpq	$0, -32(%rbp)	#, reloadreg
	je	.L1833	#,
	.loc 1 5878 0
	movq	-24(%rbp), %rax	# r, tmp122
	movq	(%rax), %rax	# r_5->where, D.23772
	movq	(%rax), %rax	# *_8, D.23773
	movzwl	(%rax), %eax	# _9->code, D.23774
	cmpw	$67, %ax	#, D.23774
	jne	.L1834	#,
	.loc 1 5879 0
	movq	-56(%rbp), %rax	# insn, tmp123
	movzwl	(%rax), %eax	# insn_11(D)->code, D.23774
	cmpw	$33, %ax	#, D.23774
	jne	.L1834	#,
	.loc 1 5880 0
	movq	-56(%rbp), %rax	# insn, tmp124
	movq	56(%rax), %rdx	# insn_11(D)->fld[6].rtx, D.23773
	movq	-24(%rbp), %rax	# r, tmp125
	movq	(%rax), %rax	# r_5->where, D.23772
	movq	(%rax), %rax	# *_14, D.23773
	movq	8(%rax), %rax	# _15->fld[0].rtx, D.23773
	movq	%rdx, %rcx	# D.23773,
	movq	%rax, %rdx	# D.23773,
	movl	$13, %esi	#,
	movl	$4, %edi	#,
	call	gen_rtx_fmt_ue	#
	movq	-56(%rbp), %rdx	# insn, tmp126
	movq	%rax, 56(%rdx)	# D.23773, insn_11(D)->fld[6].rtx
.L1834:
	.loc 1 5888 0
	movq	-32(%rbp), %rax	# reloadreg, tmp127
	movzbl	2(%rax), %eax	# reloadreg_7->mode, D.23775
	movzbl	%al, %edx	# D.23775, D.23776
	movq	-24(%rbp), %rax	# r, tmp128
	movl	20(%rax), %eax	# r_5->mode, D.23777
	cmpl	%eax, %edx	# D.23777, D.23776
	je	.L1835	#,
	.loc 1 5888 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# r, tmp129
	movl	20(%rax), %eax	# r_5->mode, D.23777
	testl	%eax, %eax	# D.23777
	je	.L1835	#,
	.loc 1 5889 0 is_stmt 1
	movq	-32(%rbp), %rax	# reloadreg, tmp130
	movl	8(%rax), %eax	# reloadreg_7->fld[0].rtuint, D.23776
	movl	%eax, %edx	# D.23776, D.23771
	movq	-24(%rbp), %rax	# r, tmp131
	movl	20(%rax), %eax	# r_5->mode, D.23777
	movl	%edx, %esi	# D.23771,
	movl	%eax, %edi	# D.23777,
	call	gen_rtx_REG	#
	movq	%rax, -32(%rbp)	# tmp132, reloadreg
.L1835:
	.loc 1 5895 0
	movq	-24(%rbp), %rax	# r, tmp133
	movq	8(%rax), %rax	# r_5->subreg_loc, D.23772
	testq	%rax, %rax	# D.23772
	je	.L1836	#,
	.loc 1 5895 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# reloadreg, tmp134
	movzwl	(%rax), %eax	# reloadreg_2->code, D.23774
	cmpw	$63, %ax	#, D.23774
	jne	.L1836	#,
	.loc 1 5897 0 is_stmt 1
	movq	-24(%rbp), %rax	# r, tmp135
	movq	8(%rax), %rax	# r_5->subreg_loc, D.23772
	movq	(%rax), %rax	# *_28, D.23773
	movzbl	2(%rax), %edx	# _29->mode, D.23775
	.loc 1 5898 0
	movq	-32(%rbp), %rax	# reloadreg, tmp136
	movq	8(%rax), %rax	# reloadreg_2->fld[0].rtx, D.23773
	movzbl	2(%rax), %eax	# _31->mode, D.23775
	.loc 1 5897 0
	cmpb	%al, %dl	# D.23775, D.23775
	jne	.L1837	#,
	.loc 1 5899 0
	movq	-24(%rbp), %rax	# r, tmp137
	movq	8(%rax), %rax	# r_5->subreg_loc, D.23772
	movq	-32(%rbp), %rdx	# reloadreg, tmp138
	movq	8(%rdx), %rdx	# reloadreg_2->fld[0].rtx, D.23773
	movq	%rdx, (%rax)	# D.23773, *_33
	.loc 1 5897 0
	jmp	.L1839	#
.L1837:
.LBB78:
	.loc 1 5903 0
	movq	-24(%rbp), %rax	# r, tmp139
	movq	8(%rax), %rax	# r_5->subreg_loc, D.23772
	movq	(%rax), %rax	# *_35, D.23773
	movl	16(%rax), %edx	# _36->fld[1].rtuint, D.23776
	movq	-32(%rbp), %rax	# reloadreg, tmp140
	movl	16(%rax), %eax	# reloadreg_2->fld[1].rtuint, D.23776
	addl	%edx, %eax	# D.23776, D.23776
	.loc 1 5902 0
	movl	%eax, -36(%rbp)	# D.23776, final_offset
	.loc 1 5908 0
	movq	-24(%rbp), %rax	# r, tmp141
	movq	8(%rax), %rax	# r_5->subreg_loc, D.23772
	movq	(%rax), %rax	# *_41, D.23773
	movzbl	2(%rax), %eax	# _42->mode, D.23775
	movzbl	%al, %eax	# D.23775, D.23771
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23775
	.loc 1 5907 0
	movzbl	%al, %ebx	# D.23775, D.23771
	movl	-36(%rbp), %eax	# final_offset, tmp145
	cltd
	idivl	%ebx	# D.23771
	movl	%eax, -36(%rbp)	# tmp143, final_offset
	.loc 1 5910 0
	movq	-24(%rbp), %rax	# r, tmp146
	movq	8(%rax), %rax	# r_5->subreg_loc, D.23772
	movq	(%rax), %rax	# *_48, D.23773
	movzbl	2(%rax), %eax	# _49->mode, D.23775
	movzbl	%al, %eax	# D.23775, D.23771
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23775
	.loc 1 5909 0
	movzbl	%al, %eax	# D.23775, D.23771
	movl	-36(%rbp), %edx	# final_offset, tmp149
	imull	%edx, %eax	# tmp149, tmp148
	movl	%eax, -36(%rbp)	# tmp148, final_offset
	.loc 1 5912 0
	movq	-24(%rbp), %rax	# r, tmp150
	movq	(%rax), %rax	# r_5->where, D.23772
	movq	-32(%rbp), %rdx	# reloadreg, tmp151
	movq	8(%rdx), %rdx	# reloadreg_2->fld[0].rtx, D.23773
	movq	%rdx, (%rax)	# D.23773, *_55
	.loc 1 5913 0
	movq	-24(%rbp), %rax	# r, tmp152
	movq	8(%rax), %rax	# r_5->subreg_loc, D.23772
	movq	(%rax), %rax	# *_57, D.23773
	movl	-36(%rbp), %edx	# final_offset, final_offset.1191
	movl	%edx, 16(%rax)	# final_offset.1191, _58->fld[1].rtuint
.LBE78:
	.loc 1 5897 0
	jmp	.L1839	#
.L1836:
	.loc 1 5917 0
	movq	-24(%rbp), %rax	# r, tmp153
	movq	(%rax), %rax	# r_5->where, D.23772
	movq	-32(%rbp), %rdx	# reloadreg, tmp154
	movq	%rdx, (%rax)	# tmp154, *_60
	jmp	.L1840	#
.L1839:
	jmp	.L1840	#
.L1833:
	.loc 1 5920 0
	movq	-24(%rbp), %rax	# r, tmp155
	movl	16(%rax), %eax	# r_5->what, D.23771
	movslq	%eax, %rdx	# D.23771, tmp156
	movq	%rdx, %rax	# tmp156, tmp157
	addq	%rax, %rax	# tmp157
	addq	%rdx, %rax	# tmp156, tmp157
	salq	$2, %rax	#, tmp157
	addq	%rdx, %rax	# tmp156, tmp157
	salq	$3, %rax	#, tmp158
	addq	$rld+96, %rax	#, tmp159
	movzbl	(%rax), %eax	#, tmp162
	andl	$1, %eax	#, D.23778
	testb	%al, %al	# D.23778
	jne	.L1840	#,
	.loc 1 5921 0
	movl	$__FUNCTION__.12321, %edx	#,
	movl	$5921, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1840:
.LBE77:
	.loc 1 5843 0
	addl	$1, -40(%rbp)	#, i
.L1832:
	.loc 1 5843 0 is_stmt 0 discriminator 1
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.1192
	cmpl	%eax, -40(%rbp)	# n_replacements.1192, i
	jl	.L1841	#,
	.loc 1 5923 0 is_stmt 1
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE33:
	.size	subst_reloads, .-subst_reloads
	.globl	copy_replacements
	.type	copy_replacements, @function
copy_replacements:
.LFB34:
	.loc 1 5931 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# x, x
	movq	%rsi, -16(%rbp)	# y, y
	.loc 1 5934 0
	movq	-8(%rbp), %rax	# x, x.1193
	movzwl	(%rax), %eax	# x.1193_1->code, D.23779
	cmpw	$63, %ax	#, D.23779
	jne	.L1843	#,
	.loc 1 5935 0
	movl	$__FUNCTION__.12329, %edx	#,
	movl	$5935, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1843:
	.loc 1 5937 0
	movl	n_replacements(%rip), %edx	# n_replacements, n_replacements.1194
	leaq	-16(%rbp), %rcx	#, tmp62
	leaq	-8(%rbp), %rax	#, tmp63
	movq	%rcx, %rsi	# tmp62,
	movq	%rax, %rdi	# tmp63,
	call	copy_replacements_1	#
	.loc 1 5938 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE34:
	.size	copy_replacements, .-copy_replacements
	.type	copy_replacements_1, @function
copy_replacements_1:
.LFB35:
	.loc 1 5945 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -56(%rbp)	# px, px
	movq	%rsi, -64(%rbp)	# py, py
	movl	%edx, -68(%rbp)	# orig_replacements, orig_replacements
	.loc 1 5952 0
	movl	$0, -40(%rbp)	#, j
	jmp	.L1845	#
.L1848:
	.loc 1 5954 0
	movl	-40(%rbp), %eax	# j, tmp91
	movslq	%eax, %rdx	# tmp91, tmp90
	movq	%rdx, %rax	# tmp90, tmp92
	addq	%rax, %rax	# tmp92
	addq	%rdx, %rax	# tmp90, tmp92
	salq	$3, %rax	#, tmp93
	addq	$replacements, %rax	#, tmp94
	movq	8(%rax), %rax	# replacements[j_2].subreg_loc, D.23780
	cmpq	-56(%rbp), %rax	# px, D.23780
	jne	.L1846	#,
	.loc 1 5956 0
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.1195
	leal	1(%rax), %edx	#, n_replacements.1197
	movl	%edx, n_replacements(%rip)	# n_replacements.1197, n_replacements
	movslq	%eax, %rdx	# n_replacements.1196, tmp95
	movq	%rdx, %rax	# tmp95, tmp96
	addq	%rax, %rax	# tmp96
	addq	%rdx, %rax	# tmp95, tmp96
	salq	$3, %rax	#, tmp97
	addq	$replacements, %rax	#, tmp98
	movq	%rax, -32(%rbp)	# tmp98, r
	.loc 1 5957 0
	movl	-40(%rbp), %eax	# j, tmp100
	movslq	%eax, %rdx	# tmp100, tmp99
	movq	%rdx, %rax	# tmp99, tmp101
	addq	%rax, %rax	# tmp101
	addq	%rdx, %rax	# tmp99, tmp101
	salq	$3, %rax	#, tmp102
	addq	$replacements, %rax	#, tmp103
	movq	(%rax), %rdx	# replacements[j_2].where, D.23780
	movq	-32(%rbp), %rax	# r, tmp104
	movq	%rdx, (%rax)	# D.23780, r_11->where
	.loc 1 5958 0
	movq	-32(%rbp), %rax	# r, tmp105
	movq	-64(%rbp), %rdx	# py, tmp106
	movq	%rdx, 8(%rax)	# tmp106, r_11->subreg_loc
	.loc 1 5959 0
	movl	-40(%rbp), %eax	# j, tmp108
	movslq	%eax, %rdx	# tmp108, tmp107
	movq	%rdx, %rax	# tmp107, tmp109
	addq	%rax, %rax	# tmp109
	addq	%rdx, %rax	# tmp107, tmp109
	salq	$3, %rax	#, tmp110
	addq	$replacements+16, %rax	#, tmp111
	movl	(%rax), %edx	# replacements[j_2].what, D.23781
	movq	-32(%rbp), %rax	# r, tmp112
	movl	%edx, 16(%rax)	# D.23781, r_11->what
	.loc 1 5960 0
	movl	-40(%rbp), %eax	# j, tmp114
	movslq	%eax, %rdx	# tmp114, tmp113
	movq	%rdx, %rax	# tmp113, tmp115
	addq	%rax, %rax	# tmp115
	addq	%rdx, %rax	# tmp113, tmp115
	salq	$3, %rax	#, tmp116
	addq	$replacements+16, %rax	#, tmp117
	movl	4(%rax), %edx	# replacements[j_2].mode, D.23782
	movq	-32(%rbp), %rax	# r, tmp118
	movl	%edx, 20(%rax)	# D.23782, r_11->mode
	jmp	.L1847	#
.L1846:
	.loc 1 5962 0
	movl	-40(%rbp), %eax	# j, tmp120
	movslq	%eax, %rdx	# tmp120, tmp119
	movq	%rdx, %rax	# tmp119, tmp121
	addq	%rax, %rax	# tmp121
	addq	%rdx, %rax	# tmp119, tmp121
	salq	$3, %rax	#, tmp122
	addq	$replacements, %rax	#, tmp123
	movq	(%rax), %rax	# replacements[j_2].where, D.23780
	cmpq	-56(%rbp), %rax	# px, D.23780
	jne	.L1847	#,
	.loc 1 5964 0
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.1198
	leal	1(%rax), %edx	#, n_replacements.1200
	movl	%edx, n_replacements(%rip)	# n_replacements.1200, n_replacements
	movslq	%eax, %rdx	# n_replacements.1199, tmp124
	movq	%rdx, %rax	# tmp124, tmp125
	addq	%rax, %rax	# tmp125
	addq	%rdx, %rax	# tmp124, tmp125
	salq	$3, %rax	#, tmp126
	addq	$replacements, %rax	#, tmp127
	movq	%rax, -32(%rbp)	# tmp127, r
	.loc 1 5965 0
	movq	-32(%rbp), %rax	# r, tmp128
	movq	-64(%rbp), %rdx	# py, tmp129
	movq	%rdx, (%rax)	# tmp129, r_20->where
	.loc 1 5966 0
	movq	-32(%rbp), %rax	# r, tmp130
	movq	$0, 8(%rax)	#, r_20->subreg_loc
	.loc 1 5967 0
	movl	-40(%rbp), %eax	# j, tmp132
	movslq	%eax, %rdx	# tmp132, tmp131
	movq	%rdx, %rax	# tmp131, tmp133
	addq	%rax, %rax	# tmp133
	addq	%rdx, %rax	# tmp131, tmp133
	salq	$3, %rax	#, tmp134
	addq	$replacements+16, %rax	#, tmp135
	movl	(%rax), %edx	# replacements[j_2].what, D.23781
	movq	-32(%rbp), %rax	# r, tmp136
	movl	%edx, 16(%rax)	# D.23781, r_20->what
	.loc 1 5968 0
	movl	-40(%rbp), %eax	# j, tmp138
	movslq	%eax, %rdx	# tmp138, tmp137
	movq	%rdx, %rax	# tmp137, tmp139
	addq	%rax, %rax	# tmp139
	addq	%rdx, %rax	# tmp137, tmp139
	salq	$3, %rax	#, tmp140
	addq	$replacements+16, %rax	#, tmp141
	movl	4(%rax), %edx	# replacements[j_2].mode, D.23782
	movq	-32(%rbp), %rax	# r, tmp142
	movl	%edx, 20(%rax)	# D.23782, r_20->mode
.L1847:
	.loc 1 5952 0
	addl	$1, -40(%rbp)	#, j
.L1845:
	.loc 1 5952 0 is_stmt 0 discriminator 1
	movl	-40(%rbp), %eax	# j, tmp143
	cmpl	-68(%rbp), %eax	# orig_replacements, tmp143
	jl	.L1848	#,
	.loc 1 5972 0 is_stmt 1
	movq	-56(%rbp), %rax	# px, tmp144
	movq	(%rax), %rax	# *px_7(D), tmp145
	movq	%rax, -24(%rbp)	# tmp145, x
	.loc 1 5973 0
	movq	-64(%rbp), %rax	# py, tmp146
	movq	(%rax), %rax	# *py_13(D), tmp147
	movq	%rax, -16(%rbp)	# tmp147, y
	.loc 1 5974 0
	movq	-24(%rbp), %rax	# x, tmp148
	movzwl	(%rax), %eax	# x_24->code, D.23783
	movzwl	%ax, %eax	# D.23783, tmp149
	movl	%eax, -36(%rbp)	# tmp149, code
	.loc 1 5975 0
	movl	-36(%rbp), %eax	# code, code.1201
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp151
	movq	%rax, -8(%rbp)	# tmp151, fmt
	.loc 1 5977 0
	movl	-36(%rbp), %eax	# code, code.1202
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.23784
	movzbl	%al, %eax	# D.23784, D.23781
	subl	$1, %eax	#, tmp153
	movl	%eax, -44(%rbp)	# tmp153, i
	jmp	.L1849	#
.L1854:
	.loc 1 5979 0
	movl	-44(%rbp), %eax	# i, tmp154
	movslq	%eax, %rdx	# tmp154, D.23785
	movq	-8(%rbp), %rax	# fmt, tmp155
	addq	%rdx, %rax	# D.23785, D.23786
	movzbl	(%rax), %eax	# *_35, D.23787
	cmpb	$101, %al	#, D.23787
	jne	.L1850	#,
	.loc 1 5980 0
	movl	-44(%rbp), %eax	# i, tmp157
	cltq
	leaq	0(,%rax,8), %rdx	#, tmp158
	movq	-16(%rbp), %rax	# y, tmp160
	addq	%rdx, %rax	# tmp158, tmp159
	leaq	8(%rax), %rsi	#, D.23780
	movl	-44(%rbp), %eax	# i, tmp162
	cltq
	leaq	0(,%rax,8), %rdx	#, tmp163
	movq	-24(%rbp), %rax	# x, tmp165
	addq	%rdx, %rax	# tmp163, tmp164
	leaq	8(%rax), %rcx	#, D.23780
	movl	-68(%rbp), %eax	# orig_replacements, tmp166
	movl	%eax, %edx	# tmp166,
	movq	%rcx, %rdi	# D.23780,
	call	copy_replacements_1	#
	jmp	.L1851	#
.L1850:
	.loc 1 5981 0
	movl	-44(%rbp), %eax	# i, tmp167
	movslq	%eax, %rdx	# tmp167, D.23785
	movq	-8(%rbp), %rax	# fmt, tmp168
	addq	%rdx, %rax	# D.23785, D.23786
	movzbl	(%rax), %eax	# *_40, D.23787
	cmpb	$69, %al	#, D.23787
	jne	.L1851	#,
	.loc 1 5982 0
	movq	-24(%rbp), %rax	# x, tmp169
	movl	-44(%rbp), %edx	# i, tmp171
	movslq	%edx, %rdx	# tmp171, tmp170
	movq	8(%rax,%rdx,8), %rax	# x_24->fld[i_1].rtvec, D.23788
	movl	(%rax), %eax	# _42->num_elem, tmp172
	movl	%eax, -40(%rbp)	# tmp172, j
	jmp	.L1852	#
.L1853:
	.loc 1 5983 0
	movq	-16(%rbp), %rax	# y, tmp173
	movl	-44(%rbp), %edx	# i, tmp175
	movslq	%edx, %rdx	# tmp175, tmp174
	movq	8(%rax,%rdx,8), %rax	# y_25->fld[i_1].rtvec, D.23788
	movl	-40(%rbp), %edx	# j, tmp177
	movslq	%edx, %rdx	# tmp177, tmp176
	salq	$3, %rdx	#, tmp178
	addq	%rdx, %rax	# tmp178, tmp179
	leaq	8(%rax), %rsi	#, D.23780
	movq	-24(%rbp), %rax	# x, tmp180
	movl	-44(%rbp), %edx	# i, tmp182
	movslq	%edx, %rdx	# tmp182, tmp181
	movq	8(%rax,%rdx,8), %rax	# x_24->fld[i_1].rtvec, D.23788
	movl	-40(%rbp), %edx	# j, tmp184
	movslq	%edx, %rdx	# tmp184, tmp183
	salq	$3, %rdx	#, tmp185
	addq	%rdx, %rax	# tmp185, tmp186
	leaq	8(%rax), %rcx	#, D.23780
	movl	-68(%rbp), %eax	# orig_replacements, tmp187
	movl	%eax, %edx	# tmp187,
	movq	%rcx, %rdi	# D.23780,
	call	copy_replacements_1	#
.L1852:
	.loc 1 5982 0 discriminator 1
	subl	$1, -40(%rbp)	#, j
	cmpl	$0, -40(%rbp)	#, j
	jns	.L1853	#,
.L1851:
	.loc 1 5977 0
	subl	$1, -44(%rbp)	#, i
.L1849:
	.loc 1 5977 0 is_stmt 0 discriminator 1
	cmpl	$0, -44(%rbp)	#, i
	jns	.L1854	#,
	.loc 1 5986 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE35:
	.size	copy_replacements_1, .-copy_replacements_1
	.globl	move_replacements
	.type	move_replacements, @function
move_replacements:
.LFB36:
	.loc 1 5994 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# x, x
	movq	%rsi, -32(%rbp)	# y, y
	.loc 1 5997 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1856	#
.L1859:
	.loc 1 5998 0
	movl	-4(%rbp), %eax	# i, tmp63
	movslq	%eax, %rdx	# tmp63, tmp62
	movq	%rdx, %rax	# tmp62, tmp64
	addq	%rax, %rax	# tmp64
	addq	%rdx, %rax	# tmp62, tmp64
	salq	$3, %rax	#, tmp65
	addq	$replacements, %rax	#, tmp66
	movq	8(%rax), %rax	# replacements[i_1].subreg_loc, D.23789
	cmpq	-24(%rbp), %rax	# x, D.23789
	jne	.L1857	#,
	.loc 1 5999 0
	movl	-4(%rbp), %eax	# i, tmp68
	movslq	%eax, %rdx	# tmp68, tmp67
	movq	%rdx, %rax	# tmp67, tmp69
	addq	%rax, %rax	# tmp69
	addq	%rdx, %rax	# tmp67, tmp69
	salq	$3, %rax	#, tmp70
	leaq	replacements(%rax), %rdx	#, tmp71
	movq	-32(%rbp), %rax	# y, tmp72
	movq	%rax, 8(%rdx)	# tmp72, replacements[i_1].subreg_loc
	jmp	.L1858	#
.L1857:
	.loc 1 6000 0
	movl	-4(%rbp), %eax	# i, tmp74
	movslq	%eax, %rdx	# tmp74, tmp73
	movq	%rdx, %rax	# tmp73, tmp75
	addq	%rax, %rax	# tmp75
	addq	%rdx, %rax	# tmp73, tmp75
	salq	$3, %rax	#, tmp76
	addq	$replacements, %rax	#, tmp77
	movq	(%rax), %rax	# replacements[i_1].where, D.23789
	cmpq	-24(%rbp), %rax	# x, D.23789
	jne	.L1858	#,
	.loc 1 6002 0
	movl	-4(%rbp), %eax	# i, tmp79
	movslq	%eax, %rdx	# tmp79, tmp78
	movq	%rdx, %rax	# tmp78, tmp80
	addq	%rax, %rax	# tmp80
	addq	%rdx, %rax	# tmp78, tmp80
	salq	$3, %rax	#, tmp81
	leaq	replacements(%rax), %rdx	#, tmp82
	movq	-32(%rbp), %rax	# y, tmp83
	movq	%rax, (%rdx)	# tmp83, replacements[i_1].where
	.loc 1 6003 0
	movl	-4(%rbp), %eax	# i, tmp85
	movslq	%eax, %rdx	# tmp85, tmp84
	movq	%rdx, %rax	# tmp84, tmp86
	addq	%rax, %rax	# tmp86
	addq	%rdx, %rax	# tmp84, tmp86
	salq	$3, %rax	#, tmp87
	addq	$replacements, %rax	#, tmp88
	movq	$0, 8(%rax)	#, replacements[i_1].subreg_loc
.L1858:
	.loc 1 5997 0
	addl	$1, -4(%rbp)	#, i
.L1856:
	.loc 1 5997 0 is_stmt 0 discriminator 1
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.1203
	cmpl	%eax, -4(%rbp)	# n_replacements.1203, i
	jl	.L1859	#,
	.loc 1 6005 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE36:
	.size	move_replacements, .-move_replacements
	.globl	find_replacement
	.type	find_replacement, @function
find_replacement:
.LFB37:
	.loc 1 6013 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# loc, loc
	.loc 1 6016 0
	movq	$replacements, -48(%rbp)	#, r
	jmp	.L1861	#
.L1868:
.LBB79:
	.loc 1 6018 0
	movq	-48(%rbp), %rax	# r, tmp134
	movl	16(%rax), %eax	# r_1->what, D.23792
	movslq	%eax, %rdx	# D.23792, tmp135
	movq	%rdx, %rax	# tmp135, tmp136
	addq	%rax, %rax	# tmp136
	addq	%rdx, %rax	# tmp135, tmp136
	salq	$2, %rax	#, tmp136
	addq	%rdx, %rax	# tmp135, tmp136
	salq	$3, %rax	#, tmp137
	addq	$rld+64, %rax	#, tmp138
	movq	(%rax), %rax	# rld[_7].reg_rtx, tmp139
	movq	%rax, -40(%rbp)	# tmp139, reloadreg
	.loc 1 6020 0
	cmpq	$0, -40(%rbp)	#, reloadreg
	je	.L1862	#,
	.loc 1 6020 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# r, tmp140
	movq	(%rax), %rax	# r_1->where, D.23793
	cmpq	-72(%rbp), %rax	# loc, D.23793
	jne	.L1862	#,
	.loc 1 6022 0 is_stmt 1
	movq	-48(%rbp), %rax	# r, tmp141
	movl	20(%rax), %eax	# r_1->mode, D.23794
	testl	%eax, %eax	# D.23794
	je	.L1863	#,
	.loc 1 6022 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# reloadreg, tmp142
	movzbl	2(%rax), %eax	# reloadreg_8->mode, D.23795
	movzbl	%al, %edx	# D.23795, D.23796
	movq	-48(%rbp), %rax	# r, tmp143
	movl	20(%rax), %eax	# r_1->mode, D.23794
	cmpl	%eax, %edx	# D.23794, D.23796
	je	.L1863	#,
	.loc 1 6023 0 is_stmt 1
	movq	-40(%rbp), %rax	# reloadreg, tmp144
	movl	8(%rax), %eax	# reloadreg_8->fld[0].rtuint, D.23796
	movl	%eax, %edx	# D.23796, D.23792
	movq	-48(%rbp), %rax	# r, tmp145
	movl	20(%rax), %eax	# r_1->mode, D.23794
	movl	%edx, %esi	# D.23792,
	movl	%eax, %edi	# D.23794,
	call	gen_rtx_REG	#
	movq	%rax, -40(%rbp)	# tmp146, reloadreg
.L1863:
	.loc 1 6025 0
	movq	-40(%rbp), %rax	# reloadreg, D.23790
	jmp	.L1864	#
.L1862:
	.loc 1 6027 0
	cmpq	$0, -40(%rbp)	#, reloadreg
	je	.L1865	#,
	.loc 1 6027 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# r, tmp147
	movq	8(%rax), %rax	# r_1->subreg_loc, D.23793
	cmpq	-72(%rbp), %rax	# loc, D.23793
	jne	.L1865	#,
	.loc 1 6033 0 is_stmt 1
	movq	-40(%rbp), %rax	# reloadreg, tmp148
	movzwl	(%rax), %eax	# reloadreg_8->code, D.23797
	cmpw	$61, %ax	#, D.23797
	jne	.L1866	#,
	.loc 1 6035 0
	movq	-40(%rbp), %rax	# reloadreg, tmp149
	movl	8(%rax), %ebx	# reloadreg_8->fld[0].rtuint, D.23796
	.loc 1 6039 0
	movq	-72(%rbp), %rax	# loc, tmp150
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzbl	2(%rax), %eax	# _23->mode, D.23795
	.loc 1 6036 0
	movzbl	%al, %ecx	# D.23795, D.23794
	.loc 1 6038 0
	movq	-72(%rbp), %rax	# loc, tmp151
	movq	(%rax), %rax	# *loc_10(D), D.23798
	.loc 1 6036 0
	movl	16(%rax), %edx	# _26->fld[1].rtuint, D.23796
	.loc 1 6037 0
	movq	-72(%rbp), %rax	# loc, tmp152
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movq	8(%rax), %rax	# _28->fld[0].rtx, D.23798
	movzbl	2(%rax), %eax	# _29->mode, D.23795
	.loc 1 6036 0
	movzbl	%al, %esi	# D.23795, D.23794
	movq	-72(%rbp), %rax	# loc, tmp153
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movq	8(%rax), %rax	# _32->fld[0].rtx, D.23798
	movl	8(%rax), %eax	# _33->fld[0].rtuint, D.23796
	movl	%eax, %edi	# D.23796,
	call	subreg_regno_offset	#
	.loc 1 6035 0
	addl	%ebx, %eax	# D.23796, D.23796
	.loc 1 6034 0
	movl	%eax, %edx	# D.23796, D.23792
	movq	-72(%rbp), %rax	# loc, tmp154
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzbl	2(%rax), %eax	# _38->mode, D.23795
	movzbl	%al, %eax	# D.23795, D.23794
	movl	%edx, %esi	# D.23792,
	movl	%eax, %edi	# D.23794,
	call	gen_rtx_REG	#
	jmp	.L1864	#
.L1866:
	.loc 1 6040 0
	movq	-40(%rbp), %rax	# reloadreg, tmp155
	movzbl	2(%rax), %edx	# reloadreg_8->mode, D.23795
	movq	-72(%rbp), %rax	# loc, tmp156
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzbl	2(%rax), %eax	# _43->mode, D.23795
	cmpb	%al, %dl	# D.23795, D.23795
	jne	.L1867	#,
	.loc 1 6041 0
	movq	-40(%rbp), %rax	# reloadreg, D.23790
	jmp	.L1864	#
.L1867:
.LBB80:
	.loc 1 6044 0
	movq	-40(%rbp), %rax	# reloadreg, tmp157
	movl	16(%rax), %edx	# reloadreg_8->fld[1].rtuint, D.23796
	movq	-72(%rbp), %rax	# loc, tmp158
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movl	16(%rax), %eax	# _47->fld[1].rtuint, D.23796
	addl	%edx, %eax	# D.23796, D.23796
	movl	%eax, -52(%rbp)	# D.23796, final_offset
	.loc 1 6048 0
	movq	-72(%rbp), %rax	# loc, tmp159
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzbl	2(%rax), %eax	# _51->mode, D.23795
	movzbl	%al, %eax	# D.23795, D.23792
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23795
	movzbl	%al, %ebx	# D.23795, D.23792
	movl	-52(%rbp), %eax	# final_offset, tmp163
	cltd
	idivl	%ebx	# D.23792
	movl	%eax, -52(%rbp)	# tmp161, final_offset
	.loc 1 6049 0
	movq	-72(%rbp), %rax	# loc, tmp164
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzbl	2(%rax), %eax	# _57->mode, D.23795
	movzbl	%al, %eax	# D.23795, D.23792
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23795
	movzbl	%al, %eax	# D.23795, D.23792
	movl	-52(%rbp), %edx	# final_offset, tmp167
	imull	%edx, %eax	# tmp167, tmp166
	movl	%eax, -52(%rbp)	# tmp166, final_offset
	.loc 1 6050 0
	movq	-40(%rbp), %rax	# reloadreg, tmp168
	movq	8(%rax), %rcx	# reloadreg_8->fld[0].rtx, D.23798
	movq	-72(%rbp), %rax	# loc, tmp169
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzbl	2(%rax), %eax	# _64->mode, D.23795
	movzbl	%al, %eax	# D.23795, D.23794
	movl	-52(%rbp), %edx	# final_offset, tmp170
	movq	%rcx, %rsi	# D.23798,
	movl	%eax, %edi	# D.23794,
	call	gen_rtx_SUBREG	#
	jmp	.L1864	#
.L1865:
.LBE80:
.LBE79:
	.loc 1 6016 0
	addq	$24, -48(%rbp)	#, r
.L1861:
	.loc 1 6016 0 is_stmt 0 discriminator 1
	movl	n_replacements(%rip), %eax	# n_replacements, n_replacements.1204
	movslq	%eax, %rdx	# n_replacements.1204, tmp171
	movq	%rdx, %rax	# tmp171, tmp172
	addq	%rax, %rax	# tmp172
	addq	%rdx, %rax	# tmp171, tmp172
	salq	$3, %rax	#, tmp173
	addq	$replacements, %rax	#, D.23791
	cmpq	-48(%rbp), %rax	# r, D.23791
	ja	.L1868	#,
	.loc 1 6058 0 is_stmt 1
	movq	-72(%rbp), %rax	# loc, tmp174
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzwl	(%rax), %eax	# _69->code, D.23797
	cmpw	$75, %ax	#, D.23797
	je	.L1869	#,
	.loc 1 6058 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loc, tmp175
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzwl	(%rax), %eax	# _71->code, D.23797
	cmpw	$76, %ax	#, D.23797
	je	.L1869	#,
	.loc 1 6059 0 is_stmt 1
	movq	-72(%rbp), %rax	# loc, tmp176
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzwl	(%rax), %eax	# _73->code, D.23797
	cmpw	$78, %ax	#, D.23797
	jne	.L1870	#,
.L1869:
.LBB81:
	.loc 1 6061 0
	movq	-72(%rbp), %rax	# loc, tmp177
	movq	(%rax), %rax	# *loc_10(D), D.23798
	addq	$8, %rax	#, D.23793
	movq	%rax, %rdi	# D.23793,
	call	find_replacement	#
	movq	%rax, -32(%rbp)	# tmp178, x
	.loc 1 6062 0
	movq	-72(%rbp), %rax	# loc, tmp179
	movq	(%rax), %rax	# *loc_10(D), D.23798
	addq	$16, %rax	#, D.23793
	movq	%rax, %rdi	# D.23793,
	call	find_replacement	#
	movq	%rax, -24(%rbp)	# tmp180, y
	.loc 1 6064 0
	movq	-72(%rbp), %rax	# loc, tmp181
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movq	8(%rax), %rax	# _81->fld[0].rtx, D.23798
	cmpq	-32(%rbp), %rax	# x, D.23798
	jne	.L1871	#,
	.loc 1 6064 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loc, tmp182
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movq	16(%rax), %rax	# _83->fld[1].rtx, D.23798
	cmpq	-24(%rbp), %rax	# y, D.23798
	je	.L1870	#,
.L1871:
	.loc 1 6065 0 is_stmt 1
	movq	-72(%rbp), %rax	# loc, tmp183
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzbl	2(%rax), %eax	# _85->mode, D.23795
	movzbl	%al, %esi	# D.23795, D.23794
	movq	-72(%rbp), %rax	# loc, tmp184
	movq	(%rax), %rax	# *loc_10(D), D.23798
	movzwl	(%rax), %eax	# _88->code, D.23797
	movzwl	%ax, %eax	# D.23797, D.23799
	movq	-24(%rbp), %rcx	# y, tmp185
	movq	-32(%rbp), %rdx	# x, tmp186
	movl	%eax, %edi	# D.23799,
	call	gen_rtx_fmt_ee	#
	jmp	.L1864	#
.L1870:
.LBE81:
	.loc 1 6068 0
	movq	-72(%rbp), %rax	# loc, tmp187
	movq	(%rax), %rax	# *loc_10(D), D.23790
.L1864:
	.loc 1 6069 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE37:
	.size	find_replacement, .-find_replacement
	.globl	refers_to_regno_for_reload_p
	.type	refers_to_regno_for_reload_p, @function
refers_to_regno_for_reload_p:
.LFB38:
	.loc 1 6086 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -52(%rbp)	# regno, regno
	movl	%esi, -56(%rbp)	# endregno, endregno
	movq	%rdx, -64(%rbp)	# x, x
	movq	%rcx, -72(%rbp)	# loc, loc
	.loc 1 6092 0
	cmpq	$0, -64(%rbp)	#, x
	jne	.L1873	#,
	.loc 1 6093 0
	movl	$0, %eax	#, D.23800
	jmp	.L1874	#
.L1873:
	.loc 1 6096 0
	movq	-64(%rbp), %rax	# x, tmp189
	movzwl	(%rax), %eax	# x_1->code, D.23801
	movzwl	%ax, %eax	# D.23801, tmp190
	movl	%eax, -40(%rbp)	# tmp190, code
	.loc 1 6098 0
	movl	-40(%rbp), %eax	# code, code
	cmpl	$49, %eax	#, code
	je	.L1876	#,
	cmpl	$49, %eax	#, code
	ja	.L1877	#,
	cmpl	$47, %eax	#, code
	je	.L1876	#,
	.loc 1 6165 0
	jmp	.L1934	#
.L1877:
	.loc 1 6098 0
	cmpl	$61, %eax	#, code
	je	.L1878	#,
	cmpl	$63, %eax	#, code
	je	.L1879	#,
	.loc 1 6165 0
	jmp	.L1934	#
.L1878:
	.loc 1 6101 0
	movq	-64(%rbp), %rax	# x, tmp192
	movl	8(%rax), %eax	# x_1->fld[0].rtuint, tmp193
	movl	%eax, -36(%rbp)	# tmp193, r
	.loc 1 6105 0
	cmpl	$52, -36(%rbp)	#, r
	jbe	.L1880	#,
	.loc 1 6107 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.1205
	movl	-36(%rbp), %edx	# r, D.23802
	salq	$3, %rdx	#, D.23802
	addq	%rdx, %rax	# D.23802, D.23803
	movq	(%rax), %rax	# *_33, D.23804
	testq	%rax, %rax	# D.23804
	je	.L1881	#,
	.loc 1 6109 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.1206
	movl	-36(%rbp), %edx	# r, D.23802
	salq	$3, %rdx	#, D.23802
	addq	%rdx, %rax	# D.23802, D.23803
	.loc 1 6108 0
	movq	(%rax), %rdx	# *_38, D.23804
	movl	-56(%rbp), %esi	# endregno, tmp194
	movl	-52(%rbp), %eax	# regno, tmp195
	movl	$0, %ecx	#,
	movl	%eax, %edi	# tmp195,
	call	refers_to_regno_for_reload_p	#
	jmp	.L1874	#
.L1881:
	.loc 1 6112 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.1207
	movl	-36(%rbp), %edx	# r, D.23802
	salq	$3, %rdx	#, D.23802
	addq	%rdx, %rax	# D.23802, D.23803
	movq	(%rax), %rax	# *_46, D.23804
	testq	%rax, %rax	# D.23804
	je	.L1882	#,
	.loc 1 6113 0
	movl	$0, %eax	#, D.23800
	jmp	.L1874	#
.L1882:
	.loc 1 6115 0
	movl	$__FUNCTION__.12382, %edx	#,
	movl	$6115, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1880:
	.loc 1 6119 0
	movl	-56(%rbp), %eax	# endregno, tmp196
	cmpl	-36(%rbp), %eax	# r, tmp196
	jbe	.L1883	#,
	.loc 1 6119 0 is_stmt 0 discriminator 1
	cmpl	$52, -36(%rbp)	#, r
	ja	.L1884	#,
	cmpl	$7, -36(%rbp)	#, r
	jbe	.L1885	#,
	.loc 1 6120 0 is_stmt 1
	cmpl	$15, -36(%rbp)	#, r
	jbe	.L1886	#,
.L1885:
	.loc 1 6120 0 is_stmt 0 discriminator 2
	cmpl	$20, -36(%rbp)	#, r
	jbe	.L1887	#,
	.loc 1 6120 0 discriminator 1
	cmpl	$28, -36(%rbp)	#, r
	jbe	.L1886	#,
.L1887:
	.loc 1 6120 0 discriminator 2
	cmpl	$44, -36(%rbp)	#, r
	jbe	.L1888	#,
	.loc 1 6120 0 discriminator 1
	cmpl	$52, -36(%rbp)	#, r
	jbe	.L1886	#,
.L1888:
	.loc 1 6120 0 discriminator 2
	cmpl	$28, -36(%rbp)	#, r
	jbe	.L1889	#,
	.loc 1 6120 0 discriminator 1
	cmpl	$36, -36(%rbp)	#, r
	ja	.L1889	#,
.L1886:
	movq	-64(%rbp), %rax	# x, tmp197
	movzbl	2(%rax), %eax	# x_1->mode, D.23805
	movzbl	%al, %eax	# D.23805, D.23800
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23806
	.loc 1 6119 0 is_stmt 1 discriminator 1
	cmpl	$5, %eax	#, D.23806
	je	.L1890	#,
	.loc 1 6120 0
	movq	-64(%rbp), %rax	# x, tmp199
	movzbl	2(%rax), %eax	# x_1->mode, D.23805
	movzbl	%al, %eax	# D.23805, D.23800
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23806
	cmpl	$6, %eax	#, D.23806
	jne	.L1891	#,
.L1890:
	.loc 1 6119 0 discriminator 3
	movl	$2, %eax	#, iftmp.1211
	jmp	.L1893	#
.L1891:
	.loc 1 6119 0 is_stmt 0
	movl	$1, %eax	#, iftmp.1211
	jmp	.L1893	#
.L1889:
	.loc 1 6120 0 is_stmt 1 discriminator 2
	movq	-64(%rbp), %rax	# x, tmp201
	movzbl	2(%rax), %eax	# x_1->mode, D.23805
	.loc 1 6119 0 discriminator 2
	cmpb	$18, %al	#, D.23805
	jne	.L1894	#,
	.loc 1 6120 0 discriminator 6
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1214
	andl	$33554432, %eax	#, D.23800
	.loc 1 6119 0 discriminator 6
	testl	%eax, %eax	# D.23800
	je	.L1895	#,
	.loc 1 6119 0 is_stmt 0 discriminator 8
	movl	$2, %eax	#, iftmp.1213
	jmp	.L1906	#
.L1895:
	.loc 1 6119 0 discriminator 9
	movl	$3, %eax	#, iftmp.1213
	jmp	.L1906	#
.L1894:
	.loc 1 6120 0 is_stmt 1 discriminator 7
	movq	-64(%rbp), %rax	# x, tmp202
	movzbl	2(%rax), %eax	# x_1->mode, D.23805
	.loc 1 6119 0 discriminator 7
	cmpb	$24, %al	#, D.23805
	jne	.L1898	#,
	.loc 1 6120 0 discriminator 10
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1217
	andl	$33554432, %eax	#, D.23800
	.loc 1 6119 0 discriminator 10
	testl	%eax, %eax	# D.23800
	je	.L1899	#,
	.loc 1 6119 0 is_stmt 0 discriminator 11
	movl	$4, %eax	#, iftmp.1216
	jmp	.L1906	#
.L1899:
	.loc 1 6119 0 discriminator 12
	movl	$6, %eax	#, iftmp.1216
	jmp	.L1906	#
.L1898:
	.loc 1 6120 0 is_stmt 1
	movq	-64(%rbp), %rax	# x, tmp203
	movzbl	2(%rax), %eax	# x_1->mode, D.23805
	movzbl	%al, %eax	# D.23805, D.23800
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23805
	movzbl	%al, %edx	# D.23805, D.23800
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1219
	andl	$33554432, %eax	#, D.23800
	testl	%eax, %eax	# D.23800
	je	.L1902	#,
	.loc 1 6120 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.1218
	jmp	.L1903	#
.L1902:
	.loc 1 6120 0 discriminator 2
	movl	$4, %eax	#, iftmp.1218
.L1903:
	.loc 1 6120 0 discriminator 3
	addl	%edx, %eax	# D.23800, D.23800
	subl	$1, %eax	#, D.23800
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1221
	andl	$33554432, %edx	#, D.23800
	testl	%edx, %edx	# D.23800
	je	.L1904	#,
	.loc 1 6120 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1220
	jmp	.L1905	#
.L1904:
	.loc 1 6120 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1220
.L1905:
	.loc 1 6120 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1220
.L1893:
	jmp	.L1906	#
.L1884:
	.loc 1 6119 0 is_stmt 1 discriminator 2
	movl	$1, %eax	#, iftmp.1209
.L1906:
	.loc 1 6119 0 is_stmt 0 discriminator 15
	movl	-36(%rbp), %edx	# r, tmp207
	addl	%edx, %eax	# tmp207, D.23807
	cmpl	-52(%rbp), %eax	# regno, D.23807
	jbe	.L1883	#,
	.loc 1 6119 0 discriminator 3
	movl	$1, %eax	#, iftmp.1208
	jmp	.L1907	#
.L1883:
	.loc 1 6119 0 discriminator 2
	movl	$0, %eax	#, iftmp.1208
.L1907:
	.loc 1 6118 0 is_stmt 1
	jmp	.L1874	#
.L1879:
	.loc 1 6126 0
	movq	-64(%rbp), %rax	# x, tmp208
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23804
	movzwl	(%rax), %eax	# _94->code, D.23801
	cmpw	$61, %ax	#, D.23801
	jne	.L1908	#,
	.loc 1 6127 0
	movq	-64(%rbp), %rax	# x, tmp209
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23804
	movl	8(%rax), %eax	# _96->fld[0].rtuint, D.23807
	cmpl	$52, %eax	#, D.23807
	ja	.L1908	#,
.LBB82:
	.loc 1 6129 0
	movq	-64(%rbp), %rax	# x, tmp210
	movq	%rax, %rdi	# tmp210,
	call	subreg_regno	#
	movl	%eax, -32(%rbp)	# tmp211, inner_regno
	.loc 1 6131 0
	cmpl	$52, -32(%rbp)	#, inner_regno
	ja	.L1909	#,
	.loc 1 6131 0 is_stmt 0 discriminator 1
	cmpl	$7, -52(%rbp)	#, regno
	jbe	.L1910	#,
	.loc 1 6132 0 is_stmt 1
	cmpl	$15, -52(%rbp)	#, regno
	jbe	.L1911	#,
.L1910:
	.loc 1 6132 0 is_stmt 0 discriminator 2
	cmpl	$20, -52(%rbp)	#, regno
	jbe	.L1912	#,
	.loc 1 6132 0 discriminator 1
	cmpl	$28, -52(%rbp)	#, regno
	jbe	.L1911	#,
.L1912:
	.loc 1 6132 0 discriminator 2
	cmpl	$44, -52(%rbp)	#, regno
	jbe	.L1913	#,
	.loc 1 6132 0 discriminator 1
	cmpl	$52, -52(%rbp)	#, regno
	jbe	.L1911	#,
.L1913:
	.loc 1 6132 0 discriminator 2
	cmpl	$28, -52(%rbp)	#, regno
	jbe	.L1914	#,
	.loc 1 6132 0 discriminator 1
	cmpl	$36, -52(%rbp)	#, regno
	ja	.L1914	#,
.L1911:
	movq	-64(%rbp), %rax	# x, tmp212
	movzbl	2(%rax), %eax	# x_1->mode, D.23805
	movzbl	%al, %eax	# D.23805, D.23800
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23806
	.loc 1 6131 0 is_stmt 1 discriminator 1
	cmpl	$5, %eax	#, D.23806
	je	.L1915	#,
	.loc 1 6132 0
	movq	-64(%rbp), %rax	# x, tmp214
	movzbl	2(%rax), %eax	# x_1->mode, D.23805
	movzbl	%al, %eax	# D.23805, D.23800
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23806
	cmpl	$6, %eax	#, D.23806
	jne	.L1916	#,
.L1915:
	.loc 1 6131 0 discriminator 3
	movl	$2, %eax	#, iftmp.1224
	jmp	.L1918	#
.L1916:
	.loc 1 6131 0 is_stmt 0
	movl	$1, %eax	#, iftmp.1224
	jmp	.L1918	#
.L1914:
	.loc 1 6132 0 is_stmt 1 discriminator 2
	movq	-64(%rbp), %rax	# x, tmp216
	movzbl	2(%rax), %eax	# x_1->mode, D.23805
	.loc 1 6131 0 discriminator 2
	cmpb	$18, %al	#, D.23805
	jne	.L1919	#,
	.loc 1 6132 0 discriminator 6
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1227
	andl	$33554432, %eax	#, D.23800
	.loc 1 6131 0 discriminator 6
	testl	%eax, %eax	# D.23800
	je	.L1920	#,
	.loc 1 6131 0 is_stmt 0 discriminator 8
	movl	$2, %eax	#, iftmp.1226
	jmp	.L1931	#
.L1920:
	.loc 1 6131 0 discriminator 9
	movl	$3, %eax	#, iftmp.1226
	jmp	.L1931	#
.L1919:
	.loc 1 6132 0 is_stmt 1 discriminator 7
	movq	-64(%rbp), %rax	# x, tmp217
	movzbl	2(%rax), %eax	# x_1->mode, D.23805
	.loc 1 6131 0 discriminator 7
	cmpb	$24, %al	#, D.23805
	jne	.L1923	#,
	.loc 1 6132 0 discriminator 10
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1230
	andl	$33554432, %eax	#, D.23800
	.loc 1 6131 0 discriminator 10
	testl	%eax, %eax	# D.23800
	je	.L1924	#,
	.loc 1 6131 0 is_stmt 0 discriminator 11
	movl	$4, %eax	#, iftmp.1229
	jmp	.L1931	#
.L1924:
	.loc 1 6131 0 discriminator 12
	movl	$6, %eax	#, iftmp.1229
	jmp	.L1931	#
.L1923:
	.loc 1 6132 0 is_stmt 1
	movq	-64(%rbp), %rax	# x, tmp218
	movzbl	2(%rax), %eax	# x_1->mode, D.23805
	movzbl	%al, %eax	# D.23805, D.23800
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23805
	movzbl	%al, %edx	# D.23805, D.23800
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1232
	andl	$33554432, %eax	#, D.23800
	testl	%eax, %eax	# D.23800
	je	.L1927	#,
	.loc 1 6132 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.1231
	jmp	.L1928	#
.L1927:
	.loc 1 6132 0 discriminator 2
	movl	$4, %eax	#, iftmp.1231
.L1928:
	.loc 1 6132 0 discriminator 3
	addl	%edx, %eax	# D.23800, D.23800
	subl	$1, %eax	#, D.23800
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1234
	andl	$33554432, %edx	#, D.23800
	testl	%edx, %edx	# D.23800
	je	.L1929	#,
	.loc 1 6132 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1233
	jmp	.L1930	#
.L1929:
	.loc 1 6132 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1233
.L1930:
	.loc 1 6132 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1233
.L1918:
	jmp	.L1931	#
.L1909:
	.loc 1 6131 0 is_stmt 1 discriminator 2
	movl	$1, %eax	#, iftmp.1222
.L1931:
	.loc 1 6130 0
	movl	-32(%rbp), %edx	# inner_regno, tmp225
	addl	%edx, %eax	# tmp225, tmp224
	movl	%eax, -28(%rbp)	# tmp224, inner_endregno
	.loc 1 6134 0
	movl	-56(%rbp), %eax	# endregno, tmp226
	cmpl	-32(%rbp), %eax	# inner_regno, tmp226
	jbe	.L1932	#,
	.loc 1 6134 0 is_stmt 0 discriminator 1
	movl	-52(%rbp), %eax	# regno, tmp227
	cmpl	-28(%rbp), %eax	# inner_endregno, tmp227
	jae	.L1932	#,
	.loc 1 6134 0 discriminator 3
	movl	$1, %eax	#, iftmp.1235
	jmp	.L1933	#
.L1932:
	.loc 1 6134 0 discriminator 2
	movl	$0, %eax	#, iftmp.1235
.L1933:
	.loc 1 6134 0 discriminator 4
	jmp	.L1874	#
.L1908:
.LBE82:
	.loc 1 6136 0 is_stmt 1
	jmp	.L1934	#
.L1876:
	.loc 1 6140 0
	movq	-64(%rbp), %rax	# x, tmp228
	addq	$8, %rax	#, D.23803
	cmpq	-72(%rbp), %rax	# loc, D.23803
	je	.L1935	#,
	.loc 1 6144 0
	movq	-64(%rbp), %rax	# x, tmp229
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23804
	movzwl	(%rax), %eax	# _146->code, D.23801
	cmpw	$63, %ax	#, D.23801
	jne	.L1936	#,
	.loc 1 6145 0
	movq	-64(%rbp), %rax	# x, tmp230
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23804
	addq	$8, %rax	#, D.23803
	cmpq	-72(%rbp), %rax	# loc, D.23803
	je	.L1936	#,
	.loc 1 6146 0
	movq	-64(%rbp), %rax	# x, tmp231
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23804
	movq	8(%rax), %rax	# _150->fld[0].rtx, D.23804
	movzwl	(%rax), %eax	# _151->code, D.23801
	cmpw	$61, %ax	#, D.23801
	jne	.L1936	#,
	.loc 1 6147 0
	movq	-64(%rbp), %rax	# x, tmp232
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23804
	movq	8(%rax), %rax	# _153->fld[0].rtx, D.23804
	movl	8(%rax), %eax	# _154->fld[0].rtuint, D.23807
	cmpl	$52, %eax	#, D.23807
	jbe	.L1936	#,
	.loc 1 6149 0
	movq	-64(%rbp), %rax	# x, tmp233
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23804
	.loc 1 6148 0
	movq	8(%rax), %rdx	# _156->fld[0].rtx, D.23804
	movq	-72(%rbp), %rcx	# loc, tmp234
	movl	-56(%rbp), %esi	# endregno, tmp235
	movl	-52(%rbp), %eax	# regno, tmp236
	movl	%eax, %edi	# tmp236,
	call	refers_to_regno_for_reload_p	#
	testl	%eax, %eax	# D.23800
	jne	.L1937	#,
.L1936:
	.loc 1 6153 0
	movq	-64(%rbp), %rax	# x, tmp237
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23804
	movzwl	(%rax), %eax	# _159->code, D.23801
	cmpw	$61, %ax	#, D.23801
	jne	.L1938	#,
	.loc 1 6154 0
	movq	-64(%rbp), %rax	# x, tmp238
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23804
	movq	%rax, %rdi	# D.23804,
	call	earlyclobber_operand_p	#
	testl	%eax, %eax	# D.23800
	je	.L1935	#,
.L1938:
	.loc 1 6155 0
	movq	-64(%rbp), %rax	# x, tmp239
	movq	8(%rax), %rdx	# x_1->fld[0].rtx, D.23804
	movq	-72(%rbp), %rcx	# loc, tmp240
	movl	-56(%rbp), %esi	# endregno, tmp241
	movl	-52(%rbp), %eax	# regno, tmp242
	movl	%eax, %edi	# tmp242,
	call	refers_to_regno_for_reload_p	#
	testl	%eax, %eax	# D.23800
	je	.L1935	#,
.L1937:
	.loc 1 6157 0
	movl	$1, %eax	#, D.23800
	jmp	.L1874	#
.L1935:
	.loc 1 6159 0
	cmpl	$49, -40(%rbp)	#, code
	je	.L1939	#,
	.loc 1 6159 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# x, tmp243
	addq	$16, %rax	#, D.23803
	cmpq	-72(%rbp), %rax	# loc, D.23803
	jne	.L1940	#,
.L1939:
	.loc 1 6160 0 is_stmt 1
	movl	$0, %eax	#, D.23800
	jmp	.L1874	#
.L1940:
	.loc 1 6161 0
	movq	-64(%rbp), %rax	# x, tmp244
	movq	16(%rax), %rax	# x_1->fld[1].rtx, tmp245
	movq	%rax, -64(%rbp)	# tmp245, x
	.loc 1 6162 0
	jmp	.L1873	#
.L1934:
	.loc 1 6170 0
	movl	-40(%rbp), %eax	# code, code.1236
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp247
	movq	%rax, -24(%rbp)	# tmp247, fmt
	.loc 1 6171 0
	movl	-40(%rbp), %eax	# code, code.1237
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.23805
	movzbl	%al, %eax	# D.23805, D.23800
	subl	$1, %eax	#, tmp249
	movl	%eax, -48(%rbp)	# tmp249, i
	jmp	.L1941	#
.L1949:
	.loc 1 6173 0
	movl	-48(%rbp), %eax	# i, tmp250
	movslq	%eax, %rdx	# tmp250, D.23808
	movq	-24(%rbp), %rax	# fmt, tmp251
	addq	%rdx, %rax	# D.23808, D.23809
	movzbl	(%rax), %eax	# *_176, D.23810
	cmpb	$101, %al	#, D.23810
	jne	.L1942	#,
	.loc 1 6173 0 is_stmt 0 discriminator 1
	movl	-48(%rbp), %eax	# i, tmp253
	cltq
	leaq	0(,%rax,8), %rdx	#, tmp254
	movq	-64(%rbp), %rax	# x, tmp256
	addq	%rdx, %rax	# tmp254, tmp255
	addq	$8, %rax	#, D.23803
	cmpq	-72(%rbp), %rax	# loc, D.23803
	je	.L1942	#,
	.loc 1 6175 0 is_stmt 1
	cmpl	$0, -48(%rbp)	#, i
	jne	.L1943	#,
	.loc 1 6177 0
	movq	-64(%rbp), %rax	# x, tmp257
	movq	8(%rax), %rax	# x_1->fld[0].rtx, tmp258
	movq	%rax, -64(%rbp)	# tmp258, x
	.loc 1 6178 0
	jmp	.L1873	#
.L1943:
	.loc 1 6181 0
	movq	-64(%rbp), %rax	# x, tmp259
	movl	-48(%rbp), %edx	# i, tmp261
	movslq	%edx, %rdx	# tmp261, tmp260
	movq	8(%rax,%rdx,8), %rdx	# x_1->fld[i_2].rtx, D.23804
	movq	-72(%rbp), %rcx	# loc, tmp262
	movl	-56(%rbp), %esi	# endregno, tmp263
	movl	-52(%rbp), %eax	# regno, tmp264
	movl	%eax, %edi	# tmp264,
	call	refers_to_regno_for_reload_p	#
	testl	%eax, %eax	# D.23800
	je	.L1944	#,
	.loc 1 6183 0
	movl	$1, %eax	#, D.23800
	jmp	.L1874	#
.L1944:
	.loc 1 6175 0
	jmp	.L1945	#
.L1942:
	.loc 1 6185 0
	movl	-48(%rbp), %eax	# i, tmp265
	movslq	%eax, %rdx	# tmp265, D.23808
	movq	-24(%rbp), %rax	# fmt, tmp266
	addq	%rdx, %rax	# D.23808, D.23809
	movzbl	(%rax), %eax	# *_184, D.23810
	cmpb	$69, %al	#, D.23810
	jne	.L1945	#,
.LBB83:
	.loc 1 6188 0
	movq	-64(%rbp), %rax	# x, tmp267
	movl	-48(%rbp), %edx	# i, tmp269
	movslq	%edx, %rdx	# tmp269, tmp268
	movq	8(%rax,%rdx,8), %rax	# x_1->fld[i_2].rtvec, D.23811
	movl	(%rax), %eax	# _186->num_elem, D.23800
	subl	$1, %eax	#, tmp270
	movl	%eax, -44(%rbp)	# tmp270, j
	jmp	.L1946	#
.L1948:
	.loc 1 6189 0
	movq	-64(%rbp), %rax	# x, tmp271
	movl	-48(%rbp), %edx	# i, tmp273
	movslq	%edx, %rdx	# tmp273, tmp272
	movq	8(%rax,%rdx,8), %rax	# x_1->fld[i_2].rtvec, D.23811
	movl	-44(%rbp), %edx	# j, tmp275
	movslq	%edx, %rdx	# tmp275, tmp274
	salq	$3, %rdx	#, tmp276
	addq	%rdx, %rax	# tmp276, tmp277
	addq	$8, %rax	#, D.23803
	cmpq	-72(%rbp), %rax	# loc, D.23803
	je	.L1947	#,
	.loc 1 6191 0
	movq	-64(%rbp), %rax	# x, tmp278
	movl	-48(%rbp), %edx	# i, tmp280
	movslq	%edx, %rdx	# tmp280, tmp279
	movq	8(%rax,%rdx,8), %rax	# x_1->fld[i_2].rtvec, D.23811
	.loc 1 6190 0
	movl	-44(%rbp), %edx	# j, tmp282
	movslq	%edx, %rdx	# tmp282, tmp281
	movq	8(%rax,%rdx,8), %rdx	# _191->elem, D.23804
	movq	-72(%rbp), %rcx	# loc, tmp283
	movl	-56(%rbp), %esi	# endregno, tmp284
	movl	-52(%rbp), %eax	# regno, tmp285
	movl	%eax, %edi	# tmp285,
	call	refers_to_regno_for_reload_p	#
	testl	%eax, %eax	# D.23800
	je	.L1947	#,
	.loc 1 6192 0
	movl	$1, %eax	#, D.23800
	jmp	.L1874	#
.L1947:
	.loc 1 6188 0
	subl	$1, -44(%rbp)	#, j
.L1946:
	.loc 1 6188 0 is_stmt 0 discriminator 1
	cmpl	$0, -44(%rbp)	#, j
	jns	.L1948	#,
.L1945:
.LBE83:
	.loc 1 6171 0 is_stmt 1
	subl	$1, -48(%rbp)	#, i
.L1941:
	.loc 1 6171 0 is_stmt 0 discriminator 1
	cmpl	$0, -48(%rbp)	#, i
	jns	.L1949	#,
	.loc 1 6195 0 is_stmt 1
	movl	$0, %eax	#, D.23800
.L1874:
	.loc 1 6196 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE38:
	.size	refers_to_regno_for_reload_p, .-refers_to_regno_for_reload_p
	.globl	reg_overlap_mentioned_for_reload_p
	.type	reg_overlap_mentioned_for_reload_p, @function
reg_overlap_mentioned_for_reload_p:
.LFB39:
	.loc 1 6210 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# in, in
	.loc 1 6214 0
	movq	-40(%rbp), %rax	# x, tmp150
	movzwl	(%rax), %eax	# x_15(D)->code, D.23814
	cmpw	$64, %ax	#, D.23814
	je	.L1951	#,
	.loc 1 6215 0
	movq	-40(%rbp), %rax	# x, tmp151
	movzwl	(%rax), %eax	# x_15(D)->code, D.23814
	movzwl	%ax, %eax	# D.23814, D.23813
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.23815
	cmpb	$97, %al	#, D.23815
	jne	.L1952	#,
.L1951:
	.loc 1 6216 0
	movq	-40(%rbp), %rax	# x, tmp153
	movq	8(%rax), %rax	# x_15(D)->fld[0].rtx, tmp154
	movq	%rax, -40(%rbp)	# tmp154, x
.L1952:
	.loc 1 6219 0
	movq	-40(%rbp), %rax	# x, tmp155
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$67, %ax	#, D.23814
	je	.L1953	#,
	.loc 1 6219 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp156
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$68, %ax	#, D.23814
	je	.L1953	#,
	movq	-40(%rbp), %rax	# x, tmp157
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$54, %ax	#, D.23814
	je	.L1953	#,
	movq	-40(%rbp), %rax	# x, tmp158
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$55, %ax	#, D.23814
	je	.L1953	#,
	movq	-40(%rbp), %rax	# x, tmp159
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$58, %ax	#, D.23814
	je	.L1953	#,
	movq	-40(%rbp), %rax	# x, tmp160
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$134, %ax	#, D.23814
	je	.L1953	#,
	movq	-40(%rbp), %rax	# x, tmp161
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$56, %ax	#, D.23814
	je	.L1953	#,
	movq	-40(%rbp), %rax	# x, tmp162
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$140, %ax	#, D.23814
	je	.L1953	#,
	movq	-48(%rbp), %rax	# in, tmp163
	movzwl	(%rax), %eax	# in_29(D)->code, D.23814
	cmpw	$67, %ax	#, D.23814
	je	.L1953	#,
	movq	-48(%rbp), %rax	# in, tmp164
	movzwl	(%rax), %eax	# in_29(D)->code, D.23814
	cmpw	$68, %ax	#, D.23814
	je	.L1953	#,
	movq	-48(%rbp), %rax	# in, tmp165
	movzwl	(%rax), %eax	# in_29(D)->code, D.23814
	cmpw	$54, %ax	#, D.23814
	je	.L1953	#,
	movq	-48(%rbp), %rax	# in, tmp166
	movzwl	(%rax), %eax	# in_29(D)->code, D.23814
	cmpw	$55, %ax	#, D.23814
	je	.L1953	#,
	movq	-48(%rbp), %rax	# in, tmp167
	movzwl	(%rax), %eax	# in_29(D)->code, D.23814
	cmpw	$58, %ax	#, D.23814
	je	.L1953	#,
	movq	-48(%rbp), %rax	# in, tmp168
	movzwl	(%rax), %eax	# in_29(D)->code, D.23814
	cmpw	$134, %ax	#, D.23814
	je	.L1953	#,
	movq	-48(%rbp), %rax	# in, tmp169
	movzwl	(%rax), %eax	# in_29(D)->code, D.23814
	cmpw	$56, %ax	#, D.23814
	je	.L1953	#,
	movq	-48(%rbp), %rax	# in, tmp170
	movzwl	(%rax), %eax	# in_29(D)->code, D.23814
	cmpw	$140, %ax	#, D.23814
	jne	.L1954	#,
.L1953:
	.loc 1 6220 0 is_stmt 1
	movl	$0, %eax	#, D.23813
	jmp	.L1955	#
.L1954:
	.loc 1 6221 0
	movq	-40(%rbp), %rax	# x, tmp171
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$63, %ax	#, D.23814
	jne	.L1956	#,
	.loc 1 6223 0
	movq	-40(%rbp), %rax	# x, tmp172
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23816
	movl	8(%rax), %eax	# _39->fld[0].rtuint, D.23817
	movl	%eax, -24(%rbp)	# D.23817, regno
	.loc 1 6224 0
	cmpl	$52, -24(%rbp)	#, regno
	jg	.L1958	#,
	.loc 1 6228 0
	movq	-40(%rbp), %rax	# x, tmp173
	movzbl	2(%rax), %eax	# x_1->mode, D.23818
	.loc 1 6225 0
	movzbl	%al, %ecx	# D.23818, D.23819
	movq	-40(%rbp), %rax	# x, tmp174
	movl	16(%rax), %edx	# x_1->fld[1].rtuint, D.23817
	.loc 1 6226 0
	movq	-40(%rbp), %rax	# x, tmp175
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23816
	movzbl	2(%rax), %eax	# _45->mode, D.23818
	.loc 1 6225 0
	movzbl	%al, %esi	# D.23818, D.23819
	movq	-40(%rbp), %rax	# x, tmp176
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23816
	movl	8(%rax), %eax	# _48->fld[0].rtuint, D.23817
	movl	%eax, %edi	# D.23817,
	call	subreg_regno_offset	#
	movl	-24(%rbp), %edx	# regno, regno.1238
	addl	%edx, %eax	# regno.1238, D.23817
	movl	%eax, -24(%rbp)	# D.23817, regno
	jmp	.L1958	#
.L1956:
	.loc 1 6230 0
	movq	-40(%rbp), %rax	# x, tmp177
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$61, %ax	#, D.23814
	jne	.L1959	#,
	.loc 1 6232 0
	movq	-40(%rbp), %rax	# x, tmp178
	movl	8(%rax), %eax	# x_1->fld[0].rtuint, D.23817
	movl	%eax, -24(%rbp)	# D.23817, regno
	.loc 1 6237 0
	cmpl	$52, -24(%rbp)	#, regno
	jle	.L1958	#,
	.loc 1 6239 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.1239
	movl	-24(%rbp), %edx	# regno, tmp179
	movslq	%edx, %rdx	# tmp179, D.23820
	salq	$3, %rdx	#, D.23820
	addq	%rdx, %rax	# D.23820, D.23821
	movq	(%rax), %rax	# *_60, D.23816
	testq	%rax, %rax	# D.23816
	je	.L1960	#,
	.loc 1 6240 0
	movq	-48(%rbp), %rax	# in, tmp180
	movq	%rax, %rdi	# tmp180,
	call	refers_to_mem_for_reload_p	#
	jmp	.L1955	#
.L1960:
	.loc 1 6241 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.1240
	movl	-24(%rbp), %edx	# regno, tmp181
	movslq	%edx, %rdx	# tmp181, D.23820
	salq	$3, %rdx	#, D.23820
	addq	%rdx, %rax	# D.23820, D.23821
	movq	(%rax), %rax	# *_66, D.23816
	testq	%rax, %rax	# D.23816
	je	.L1961	#,
	.loc 1 6242 0
	movl	$0, %eax	#, D.23813
	jmp	.L1955	#
.L1961:
	.loc 1 6243 0
	movl	$__FUNCTION__.12403, %edx	#,
	movl	$6243, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1959:
	.loc 1 6246 0
	movq	-40(%rbp), %rax	# x, tmp182
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$66, %ax	#, D.23814
	jne	.L1962	#,
	.loc 1 6247 0
	movq	-48(%rbp), %rax	# in, tmp183
	movq	%rax, %rdi	# tmp183,
	call	refers_to_mem_for_reload_p	#
	jmp	.L1955	#
.L1962:
	.loc 1 6248 0
	movq	-40(%rbp), %rax	# x, tmp184
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$62, %ax	#, D.23814
	je	.L1963	#,
	.loc 1 6248 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp185
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$59, %ax	#, D.23814
	je	.L1963	#,
	.loc 1 6249 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp186
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$69, %ax	#, D.23814
	jne	.L1964	#,
.L1963:
	.loc 1 6250 0
	movq	-48(%rbp), %rdx	# in, tmp187
	movq	-40(%rbp), %rax	# x, tmp188
	movq	%rdx, %rsi	# tmp187,
	movq	%rax, %rdi	# tmp188,
	call	reg_mentioned_p	#
	jmp	.L1955	#
.L1964:
	.loc 1 6251 0
	movq	-40(%rbp), %rax	# x, tmp189
	movzwl	(%rax), %eax	# x_1->code, D.23814
	cmpw	$75, %ax	#, D.23814
	jne	.L1965	#,
	.loc 1 6252 0
	movq	-40(%rbp), %rax	# x, tmp190
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.23816
	movq	-48(%rbp), %rdx	# in, tmp191
	movq	%rdx, %rsi	# tmp191,
	movq	%rax, %rdi	# D.23816,
	call	reg_overlap_mentioned_for_reload_p	#
	.loc 1 6253 0
	testl	%eax, %eax	# D.23813
	jne	.L1966	#,
	.loc 1 6253 0 is_stmt 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp192
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.23816
	movq	-48(%rbp), %rdx	# in, tmp193
	movq	%rdx, %rsi	# tmp193,
	movq	%rax, %rdi	# D.23816,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.23813
	je	.L1967	#,
.L1966:
	.loc 1 6253 0 discriminator 1
	movl	$1, %eax	#, iftmp.1241
	jmp	.L1968	#
.L1967:
	.loc 1 6253 0 discriminator 3
	movl	$0, %eax	#, iftmp.1241
.L1968:
	.loc 1 6252 0 is_stmt 1
	jmp	.L1955	#
.L1965:
	.loc 1 6255 0
	movl	$__FUNCTION__.12403, %edx	#,
	movl	$6255, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1958:
	.loc 1 6258 0
	cmpl	$52, -24(%rbp)	#, regno
	jg	.L1969	#,
	.loc 1 6258 0 is_stmt 0 discriminator 1
	cmpl	$7, -24(%rbp)	#, regno
	jle	.L1970	#,
	cmpl	$15, -24(%rbp)	#, regno
	jle	.L1971	#,
.L1970:
	.loc 1 6258 0 discriminator 2
	cmpl	$20, -24(%rbp)	#, regno
	jle	.L1972	#,
	.loc 1 6258 0 discriminator 1
	cmpl	$28, -24(%rbp)	#, regno
	jle	.L1971	#,
.L1972:
	.loc 1 6258 0 discriminator 2
	cmpl	$44, -24(%rbp)	#, regno
	jle	.L1973	#,
	.loc 1 6258 0 discriminator 1
	cmpl	$52, -24(%rbp)	#, regno
	jle	.L1971	#,
.L1973:
	.loc 1 6258 0 discriminator 2
	cmpl	$28, -24(%rbp)	#, regno
	jle	.L1974	#,
	.loc 1 6258 0 discriminator 1
	cmpl	$36, -24(%rbp)	#, regno
	jg	.L1974	#,
.L1971:
	movq	-40(%rbp), %rax	# x, tmp194
	movzbl	2(%rax), %eax	# x_1->mode, D.23818
	movzbl	%al, %eax	# D.23818, D.23813
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23822
	cmpl	$5, %eax	#, D.23822
	je	.L1975	#,
	.loc 1 6258 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp196
	movzbl	2(%rax), %eax	# x_1->mode, D.23818
	movzbl	%al, %eax	# D.23818, D.23813
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23822
	cmpl	$6, %eax	#, D.23822
	jne	.L1976	#,
.L1975:
	.loc 1 6258 0 discriminator 1
	movl	$2, %eax	#, iftmp.1244
	jmp	.L1977	#
.L1976:
	movl	$1, %eax	#, iftmp.1244
.L1977:
	.loc 1 6258 0 discriminator 3
	jmp	.L1978	#
.L1974:
	.loc 1 6258 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp198
	movzbl	2(%rax), %eax	# x_1->mode, D.23818
	cmpb	$18, %al	#, D.23818
	jne	.L1979	#,
	.loc 1 6258 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1247
	andl	$33554432, %eax	#, D.23813
	testl	%eax, %eax	# D.23813
	je	.L1980	#,
	movl	$2, %eax	#, iftmp.1246
	jmp	.L1991	#
.L1980:
	.loc 1 6258 0 discriminator 2
	movl	$3, %eax	#, iftmp.1246
	jmp	.L1991	#
.L1979:
	movq	-40(%rbp), %rax	# x, tmp199
	movzbl	2(%rax), %eax	# x_1->mode, D.23818
	cmpb	$24, %al	#, D.23818
	jne	.L1983	#,
	.loc 1 6258 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1250
	andl	$33554432, %eax	#, D.23813
	testl	%eax, %eax	# D.23813
	je	.L1984	#,
	movl	$4, %eax	#, iftmp.1249
	jmp	.L1991	#
.L1984:
	.loc 1 6258 0 discriminator 2
	movl	$6, %eax	#, iftmp.1249
	jmp	.L1991	#
.L1983:
	movq	-40(%rbp), %rax	# x, tmp200
	movzbl	2(%rax), %eax	# x_1->mode, D.23818
	movzbl	%al, %eax	# D.23818, D.23813
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23818
	movzbl	%al, %edx	# D.23818, D.23813
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1252
	andl	$33554432, %eax	#, D.23813
	testl	%eax, %eax	# D.23813
	je	.L1987	#,
	.loc 1 6258 0 discriminator 1
	movl	$8, %eax	#, iftmp.1251
	jmp	.L1988	#
.L1987:
	.loc 1 6258 0 discriminator 2
	movl	$4, %eax	#, iftmp.1251
.L1988:
	.loc 1 6258 0 discriminator 3
	addl	%edx, %eax	# D.23813, D.23813
	subl	$1, %eax	#, D.23813
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1254
	andl	$33554432, %edx	#, D.23813
	testl	%edx, %edx	# D.23813
	je	.L1989	#,
	.loc 1 6258 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1253
	jmp	.L1990	#
.L1989:
	.loc 1 6258 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1253
.L1990:
	.loc 1 6258 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1253
.L1978:
	jmp	.L1991	#
.L1969:
	.loc 1 6258 0 discriminator 2
	movl	$1, %eax	#, iftmp.1242
.L1991:
	.loc 1 6257 0 is_stmt 1
	movl	-24(%rbp), %edx	# regno, tmp207
	addl	%edx, %eax	# tmp207, tmp206
	movl	%eax, -20(%rbp)	# tmp206, endregno
	.loc 1 6260 0
	movl	-20(%rbp), %esi	# endregno, endregno.1255
	movl	-24(%rbp), %eax	# regno, regno.1256
	movq	-48(%rbp), %rdx	# in, tmp208
	movl	$0, %ecx	#,
	movl	%eax, %edi	# regno.1256,
	call	refers_to_regno_for_reload_p	#
.L1955:
	.loc 1 6261 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE39:
	.size	reg_overlap_mentioned_for_reload_p, .-reg_overlap_mentioned_for_reload_p
	.globl	refers_to_mem_for_reload_p
	.type	refers_to_mem_for_reload_p, @function
refers_to_mem_for_reload_p:
.LFB40:
	.loc 1 6269 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# x, x
	.loc 1 6273 0
	movq	-24(%rbp), %rax	# x, tmp84
	movzwl	(%rax), %eax	# x_4(D)->code, D.23824
	cmpw	$66, %ax	#, D.23824
	jne	.L1993	#,
	.loc 1 6274 0
	movl	$1, %eax	#, D.23823
	jmp	.L1994	#
.L1993:
	.loc 1 6276 0
	movq	-24(%rbp), %rax	# x, tmp85
	movzwl	(%rax), %eax	# x_4(D)->code, D.23824
	cmpw	$61, %ax	#, D.23824
	jne	.L1995	#,
	.loc 1 6277 0
	movq	-24(%rbp), %rax	# x, tmp86
	movl	8(%rax), %eax	# x_4(D)->fld[0].rtuint, D.23825
	.loc 1 6278 0
	cmpl	$52, %eax	#, D.23825
	jbe	.L1996	#,
	.loc 1 6278 0 is_stmt 0 discriminator 1
	movq	reg_equiv_memory_loc(%rip), %rdx	# reg_equiv_memory_loc, reg_equiv_memory_loc.1258
	movq	-24(%rbp), %rax	# x, tmp87
	movl	8(%rax), %eax	# x_4(D)->fld[0].rtuint, D.23825
	movl	%eax, %eax	# D.23825, D.23826
	salq	$3, %rax	#, D.23826
	addq	%rdx, %rax	# reg_equiv_memory_loc.1258, D.23827
	movq	(%rax), %rax	# *_13, D.23828
	testq	%rax, %rax	# D.23828
	je	.L1996	#,
	.loc 1 6278 0 discriminator 3
	movl	$1, %eax	#, iftmp.1257
	jmp	.L1997	#
.L1996:
	.loc 1 6278 0 discriminator 2
	movl	$0, %eax	#, iftmp.1257
.L1997:
	.loc 1 6277 0 is_stmt 1
	jmp	.L1994	#
.L1995:
	.loc 1 6280 0
	movq	-24(%rbp), %rax	# x, tmp88
	movzwl	(%rax), %eax	# x_4(D)->code, D.23824
	movzwl	%ax, %eax	# D.23824, D.23823
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp90
	movq	%rax, -8(%rbp)	# tmp90, fmt
	.loc 1 6281 0
	movq	-24(%rbp), %rax	# x, tmp91
	movzwl	(%rax), %eax	# x_4(D)->code, D.23824
	movzwl	%ax, %eax	# D.23824, D.23823
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.23829
	movzbl	%al, %eax	# D.23829, D.23823
	subl	$1, %eax	#, tmp93
	movl	%eax, -12(%rbp)	# tmp93, i
	jmp	.L1998	#
.L2001:
	.loc 1 6282 0
	movl	-12(%rbp), %eax	# i, tmp94
	movslq	%eax, %rdx	# tmp94, D.23830
	movq	-8(%rbp), %rax	# fmt, tmp95
	addq	%rdx, %rax	# D.23830, D.23831
	movzbl	(%rax), %eax	# *_27, D.23832
	cmpb	$101, %al	#, D.23832
	jne	.L1999	#,
	.loc 1 6283 0
	movq	-24(%rbp), %rax	# x, tmp96
	movl	-12(%rbp), %edx	# i, tmp98
	movslq	%edx, %rdx	# tmp98, tmp97
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtx, D.23828
	movzwl	(%rax), %eax	# _29->code, D.23824
	cmpw	$66, %ax	#, D.23824
	je	.L2000	#,
	.loc 1 6284 0
	movq	-24(%rbp), %rax	# x, tmp99
	movl	-12(%rbp), %edx	# i, tmp101
	movslq	%edx, %rdx	# tmp101, tmp100
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtx, D.23828
	movq	%rax, %rdi	# D.23828,
	call	refers_to_mem_for_reload_p	#
	testl	%eax, %eax	# D.23823
	je	.L1999	#,
.L2000:
	.loc 1 6285 0
	movl	$1, %eax	#, D.23823
	jmp	.L1994	#
.L1999:
	.loc 1 6281 0
	subl	$1, -12(%rbp)	#, i
.L1998:
	.loc 1 6281 0 is_stmt 0 discriminator 1
	cmpl	$0, -12(%rbp)	#, i
	jns	.L2001	#,
	.loc 1 6287 0 is_stmt 1
	movl	$0, %eax	#, D.23823
.L1994:
	.loc 1 6288 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE40:
	.size	refers_to_mem_for_reload_p, .-refers_to_mem_for_reload_p
	.globl	find_equiv_reg
	.type	find_equiv_reg, @function
find_equiv_reg:
.LFB41:
	.loc 1 6326 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$248, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -216(%rbp)	# goal, goal
	movq	%rsi, -224(%rbp)	# insn, insn
	movl	%edx, -228(%rbp)	# class, class
	movl	%ecx, -232(%rbp)	# other, other
	movq	%r8, -240(%rbp)	# reload_reg_p, reload_reg_p
	movl	%r9d, -244(%rbp)	# goalreg, goalreg
	.loc 1 6327 0
	movq	-224(%rbp), %rax	# insn, tmp582
	movq	%rax, -112(%rbp)	# tmp582, p
	.loc 1 6330 0
	movl	$-1, -200(%rbp)	#, regno
	.loc 1 6332 0
	movl	$0, -192(%rbp)	#, goal_mem
	.loc 1 6333 0
	movl	$0, -188(%rbp)	#, goal_const
	.loc 1 6334 0
	movl	$0, -184(%rbp)	#, goal_mem_addr_varies
	.loc 1 6335 0
	movl	$0, -180(%rbp)	#, need_stable_sp
	.loc 1 6339 0
	cmpq	$0, -216(%rbp)	#, goal
	jne	.L2003	#,
	.loc 1 6340 0
	movl	-244(%rbp), %eax	# goalreg, tmp583
	movl	%eax, -200(%rbp)	# tmp583, regno
	jmp	.L2004	#
.L2003:
	.loc 1 6341 0
	movq	-216(%rbp), %rax	# goal, tmp584
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$61, %ax	#, D.23834
	jne	.L2005	#,
	.loc 1 6342 0
	movq	-216(%rbp), %rax	# goal, tmp585
	movl	8(%rax), %eax	# goal_117(D)->fld[0].rtuint, D.23835
	movl	%eax, -200(%rbp)	# D.23835, regno
	jmp	.L2004	#
.L2005:
	.loc 1 6343 0
	movq	-216(%rbp), %rax	# goal, tmp586
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$66, %ax	#, D.23834
	jne	.L2006	#,
.LBB84:
	.loc 1 6345 0
	movq	-216(%rbp), %rax	# goal, tmp587
	movq	8(%rax), %rax	# goal_117(D)->fld[0].rtx, D.23836
	movzwl	(%rax), %eax	# _124->code, D.23834
	movzwl	%ax, %eax	# D.23834, tmp588
	movl	%eax, -148(%rbp)	# tmp588, code
	.loc 1 6346 0
	movq	-216(%rbp), %rax	# goal, tmp589
	movzbl	3(%rax), %eax	# *goal_117(D), D.23837
	andl	$8, %eax	#, D.23837
	testb	%al, %al	# D.23837
	je	.L2007	#,
	.loc 1 6347 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2007:
	.loc 1 6348 0
	movl	flag_float_store(%rip), %eax	# flag_float_store, flag_float_store.1259
	testl	%eax, %eax	# flag_float_store.1259
	je	.L2009	#,
	.loc 1 6348 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# goal, tmp590
	movzbl	2(%rax), %eax	# goal_117(D)->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$2, %eax	#, D.23839
	jne	.L2009	#,
	.loc 1 6349 0 is_stmt 1
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2009:
	.loc 1 6351 0
	movl	-148(%rbp), %eax	# code, code
	subl	$96, %eax	#, tmp593
	cmpl	$5, %eax	#, tmp593
	ja	.L2329	#,
	.loc 1 6359 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2329:
	.loc 1 6361 0
	nop
	.loc 1 6363 0
	movl	$1, -192(%rbp)	#, goal_mem
.LBE84:
	jmp	.L2004	#
.L2006:
	.loc 1 6365 0
	movq	-216(%rbp), %rax	# goal, tmp594
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$67, %ax	#, D.23834
	je	.L2012	#,
	.loc 1 6365 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# goal, tmp595
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$68, %ax	#, D.23834
	je	.L2012	#,
	movq	-216(%rbp), %rax	# goal, tmp596
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$54, %ax	#, D.23834
	je	.L2012	#,
	movq	-216(%rbp), %rax	# goal, tmp597
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$55, %ax	#, D.23834
	je	.L2012	#,
	movq	-216(%rbp), %rax	# goal, tmp598
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$58, %ax	#, D.23834
	je	.L2012	#,
	movq	-216(%rbp), %rax	# goal, tmp599
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$134, %ax	#, D.23834
	je	.L2012	#,
	movq	-216(%rbp), %rax	# goal, tmp600
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$56, %ax	#, D.23834
	je	.L2012	#,
	movq	-216(%rbp), %rax	# goal, tmp601
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$140, %ax	#, D.23834
	jne	.L2013	#,
.L2012:
	.loc 1 6366 0 is_stmt 1
	movl	$1, -188(%rbp)	#, goal_const
	jmp	.L2004	#
.L2013:
	.loc 1 6367 0
	movq	-216(%rbp), %rax	# goal, tmp602
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$75, %ax	#, D.23834
	jne	.L2014	#,
	.loc 1 6368 0
	movq	-216(%rbp), %rax	# goal, tmp603
	movq	8(%rax), %rdx	# goal_117(D)->fld[0].rtx, D.23836
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23836
	cmpq	%rax, %rdx	# D.23836, D.23836
	jne	.L2014	#,
	.loc 1 6369 0
	movq	-216(%rbp), %rax	# goal, tmp604
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _148->code, D.23834
	cmpw	$67, %ax	#, D.23834
	je	.L2015	#,
	.loc 1 6369 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# goal, tmp605
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _150->code, D.23834
	cmpw	$68, %ax	#, D.23834
	je	.L2015	#,
	movq	-216(%rbp), %rax	# goal, tmp606
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _152->code, D.23834
	cmpw	$54, %ax	#, D.23834
	je	.L2015	#,
	movq	-216(%rbp), %rax	# goal, tmp607
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _154->code, D.23834
	cmpw	$55, %ax	#, D.23834
	je	.L2015	#,
	movq	-216(%rbp), %rax	# goal, tmp608
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _156->code, D.23834
	cmpw	$58, %ax	#, D.23834
	je	.L2015	#,
	movq	-216(%rbp), %rax	# goal, tmp609
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _158->code, D.23834
	cmpw	$134, %ax	#, D.23834
	je	.L2015	#,
	movq	-216(%rbp), %rax	# goal, tmp610
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _160->code, D.23834
	cmpw	$56, %ax	#, D.23834
	je	.L2015	#,
	movq	-216(%rbp), %rax	# goal, tmp611
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _162->code, D.23834
	cmpw	$140, %ax	#, D.23834
	jne	.L2014	#,
.L2015:
	.loc 1 6370 0 is_stmt 1
	movl	$1, -180(%rbp)	#, need_stable_sp
	movl	-180(%rbp), %eax	# need_stable_sp, tmp612
	movl	%eax, -188(%rbp)	# tmp612, goal_const
	jmp	.L2004	#
.L2014:
	.loc 1 6371 0
	movq	-216(%rbp), %rax	# goal, tmp613
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$75, %ax	#, D.23834
	jne	.L2016	#,
	.loc 1 6372 0
	movq	-216(%rbp), %rax	# goal, tmp614
	movq	8(%rax), %rdx	# goal_117(D)->fld[0].rtx, D.23836
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.23836
	cmpq	%rax, %rdx	# D.23836, D.23836
	jne	.L2016	#,
	.loc 1 6373 0
	movq	-216(%rbp), %rax	# goal, tmp615
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _169->code, D.23834
	cmpw	$67, %ax	#, D.23834
	je	.L2017	#,
	.loc 1 6373 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# goal, tmp616
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _171->code, D.23834
	cmpw	$68, %ax	#, D.23834
	je	.L2017	#,
	movq	-216(%rbp), %rax	# goal, tmp617
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _173->code, D.23834
	cmpw	$54, %ax	#, D.23834
	je	.L2017	#,
	movq	-216(%rbp), %rax	# goal, tmp618
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _175->code, D.23834
	cmpw	$55, %ax	#, D.23834
	je	.L2017	#,
	movq	-216(%rbp), %rax	# goal, tmp619
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _177->code, D.23834
	cmpw	$58, %ax	#, D.23834
	je	.L2017	#,
	movq	-216(%rbp), %rax	# goal, tmp620
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _179->code, D.23834
	cmpw	$134, %ax	#, D.23834
	je	.L2017	#,
	movq	-216(%rbp), %rax	# goal, tmp621
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _181->code, D.23834
	cmpw	$56, %ax	#, D.23834
	je	.L2017	#,
	movq	-216(%rbp), %rax	# goal, tmp622
	movq	16(%rax), %rax	# goal_117(D)->fld[1].rtx, D.23836
	movzwl	(%rax), %eax	# _183->code, D.23834
	cmpw	$140, %ax	#, D.23834
	jne	.L2016	#,
.L2017:
	.loc 1 6374 0 is_stmt 1
	movl	$1, -188(%rbp)	#, goal_const
	jmp	.L2004	#
.L2016:
	.loc 1 6376 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2004:
	.loc 1 6384 0
	movq	-112(%rbp), %rax	# p, tmp623
	movq	16(%rax), %rax	# p_1->fld[1].rtx, tmp624
	movq	%rax, -112(%rbp)	# tmp624, p
	.loc 1 6385 0
	cmpq	$0, -112(%rbp)	#, p
	je	.L2018	#,
	.loc 1 6385 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# p, tmp625
	movzwl	(%rax), %eax	# p_188->code, D.23834
	cmpw	$36, %ax	#, D.23834
	jne	.L2019	#,
.L2018:
	.loc 1 6386 0 is_stmt 1
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2019:
	.loc 1 6388 0
	movq	-112(%rbp), %rax	# p, tmp626
	movzwl	(%rax), %eax	# p_188->code, D.23834
	cmpw	$32, %ax	#, D.23834
	jne	.L2020	#,
	.loc 1 6390 0
	cmpq	$0, -240(%rbp)	#, reload_reg_p
	je	.L2021	#,
	.loc 1 6390 0 is_stmt 0 discriminator 1
	cmpq	$1, -240(%rbp)	#, reload_reg_p
	je	.L2021	#,
	.loc 1 6400 0 is_stmt 1
	movq	-112(%rbp), %rax	# p, tmp627
	movl	8(%rax), %edx	# p_188->fld[0].rtint, D.23838
	movl	reload_first_uid(%rip), %eax	# reload_first_uid, reload_first_uid.1260
	cmpl	%eax, %edx	# reload_first_uid.1260, D.23838
	jge	.L2020	#,
.L2021:
.LBB85:
	.loc 1 6403 0
	movq	-112(%rbp), %rax	# p, tmp628
	movzwl	(%rax), %eax	# p_188->code, D.23834
	movzwl	%ax, %eax	# D.23834, D.23838
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.23840
	cmpb	$105, %al	#, D.23840
	jne	.L2022	#,
	.loc 1 6403 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# p, tmp630
	movq	32(%rax), %rax	# p_188->fld[3].rtx, D.23836
	movzwl	(%rax), %eax	# _197->code, D.23834
	cmpw	$47, %ax	#, D.23834
	jne	.L2023	#,
	.loc 1 6403 0 discriminator 3
	movq	-112(%rbp), %rax	# p, tmp631
	movq	32(%rax), %rax	# p_188->fld[3].rtx, iftmp.1262
	jmp	.L2025	#
.L2023:
	.loc 1 6403 0 discriminator 4
	movq	-112(%rbp), %rax	# p, tmp632
	movq	32(%rax), %rdx	# p_188->fld[3].rtx, D.23836
	movq	-112(%rbp), %rax	# p, tmp633
	movq	%rdx, %rsi	# D.23836,
	movq	%rax, %rdi	# tmp633,
	call	single_set_2	#
	jmp	.L2025	#
.L2022:
	.loc 1 6403 0 discriminator 2
	movl	$0, %eax	#, iftmp.1261
.L2025:
	.loc 1 6403 0 discriminator 5
	movq	%rax, -96(%rbp)	# iftmp.1261, pat
	.loc 1 6406 0 is_stmt 1 discriminator 5
	cmpq	$0, -96(%rbp)	#, pat
	je	.L2020	#,
	.loc 1 6407 0
	cmpl	$0, -200(%rbp)	#, regno
	js	.L2026	#,
	.loc 1 6408 0
	movq	-96(%rbp), %rax	# pat, tmp634
	movq	16(%rax), %rax	# pat_204->fld[1].rtx, D.23836
	movq	%rax, %rdi	# D.23836,
	call	true_regnum	#
	cmpl	-200(%rbp), %eax	# regno, D.23838
	jne	.L2026	#,
	.loc 1 6409 0
	movq	-96(%rbp), %rax	# pat, tmp635
	movq	8(%rax), %rax	# pat_204->fld[0].rtx, tmp636
	movq	%rax, -104(%rbp)	# tmp636, valtry
	movq	-104(%rbp), %rax	# valtry, tmp637
	movq	%rax, %rdi	# tmp637,
	call	true_regnum	#
	movl	%eax, -196(%rbp)	# tmp638, valueno
	cmpl	$0, -196(%rbp)	#, valueno
	jns	.L2027	#,
.L2026:
	.loc 1 6410 0
	cmpl	$0, -200(%rbp)	#, regno
	js	.L2028	#,
	.loc 1 6412 0
	movq	-96(%rbp), %rax	# pat, tmp639
	movq	8(%rax), %rax	# pat_204->fld[0].rtx, D.23836
	movq	%rax, %rdi	# D.23836,
	call	true_regnum	#
	cmpl	-200(%rbp), %eax	# regno, D.23838
	jne	.L2028	#,
	.loc 1 6413 0
	movq	-96(%rbp), %rax	# pat, tmp640
	movq	16(%rax), %rax	# pat_204->fld[1].rtx, tmp641
	movq	%rax, -104(%rbp)	# tmp641, valtry
	movq	-104(%rbp), %rax	# valtry, tmp642
	movq	%rax, %rdi	# tmp642,
	call	true_regnum	#
	movl	%eax, -196(%rbp)	# tmp643, valueno
	cmpl	$0, -196(%rbp)	#, valueno
	jns	.L2027	#,
.L2028:
	.loc 1 6414 0
	cmpl	$0, -188(%rbp)	#, goal_const
	je	.L2029	#,
	.loc 1 6415 0
	movq	-96(%rbp), %rax	# pat, tmp644
	movq	16(%rax), %rax	# pat_204->fld[1].rtx, D.23836
	movq	-216(%rbp), %rdx	# goal, tmp645
	movq	%rdx, %rsi	# tmp645,
	movq	%rax, %rdi	# D.23836,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23838
	je	.L2029	#,
	.loc 1 6418 0
	movq	-96(%rbp), %rax	# pat, tmp646
	movq	8(%rax), %rax	# pat_204->fld[0].rtx, D.23836
	movq	-216(%rbp), %rdx	# goal, tmp647
	movq	%rdx, %rsi	# tmp647,
	movq	%rax, %rdi	# D.23836,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.23838
	jne	.L2029	#,
	.loc 1 6419 0
	movq	-96(%rbp), %rax	# pat, tmp648
	movq	8(%rax), %rax	# pat_204->fld[0].rtx, tmp649
	movq	%rax, -104(%rbp)	# tmp649, valtry
	movq	-104(%rbp), %rax	# valtry, tmp650
	movq	%rax, %rdi	# tmp650,
	call	true_regnum	#
	movl	%eax, -196(%rbp)	# tmp651, valueno
	cmpl	$0, -196(%rbp)	#, valueno
	jns	.L2027	#,
.L2029:
	.loc 1 6420 0
	cmpl	$0, -192(%rbp)	#, goal_mem
	je	.L2030	#,
	.loc 1 6421 0
	movq	-96(%rbp), %rax	# pat, tmp652
	movq	8(%rax), %rax	# pat_204->fld[0].rtx, tmp653
	movq	%rax, -104(%rbp)	# tmp653, valtry
	movq	-104(%rbp), %rax	# valtry, tmp654
	movq	%rax, %rdi	# tmp654,
	call	true_regnum	#
	movl	%eax, -196(%rbp)	# tmp655, valueno
	cmpl	$0, -196(%rbp)	#, valueno
	js	.L2030	#,
	.loc 1 6422 0
	movq	-96(%rbp), %rax	# pat, tmp656
	movq	16(%rax), %rdx	# pat_204->fld[1].rtx, D.23836
	movq	-216(%rbp), %rax	# goal, tmp657
	movq	%rdx, %rsi	# D.23836,
	movq	%rax, %rdi	# tmp657,
	call	rtx_renumbered_equal_p	#
	testl	%eax, %eax	# D.23838
	jne	.L2027	#,
.L2030:
	.loc 1 6423 0
	cmpl	$0, -192(%rbp)	#, goal_mem
	je	.L2031	#,
	.loc 1 6424 0
	movq	-96(%rbp), %rax	# pat, tmp658
	movq	16(%rax), %rax	# pat_204->fld[1].rtx, tmp659
	movq	%rax, -104(%rbp)	# tmp659, valtry
	movq	-104(%rbp), %rax	# valtry, tmp660
	movq	%rax, %rdi	# tmp660,
	call	true_regnum	#
	movl	%eax, -196(%rbp)	# tmp661, valueno
	cmpl	$0, -196(%rbp)	#, valueno
	js	.L2031	#,
	.loc 1 6425 0
	movq	-96(%rbp), %rax	# pat, tmp662
	movq	8(%rax), %rdx	# pat_204->fld[0].rtx, D.23836
	movq	-216(%rbp), %rax	# goal, tmp663
	movq	%rdx, %rsi	# D.23836,
	movq	%rax, %rdi	# tmp663,
	call	rtx_renumbered_equal_p	#
	testl	%eax, %eax	# D.23838
	jne	.L2027	#,
.L2031:
	.loc 1 6429 0
	cmpl	$0, -188(%rbp)	#, goal_const
	je	.L2032	#,
	.loc 1 6429 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# p, tmp664
	movq	56(%rax), %rax	# p_188->fld[6].rtx, D.23836
	testq	%rax, %rax	# D.23836
	je	.L2032	#,
	.loc 1 6430 0 is_stmt 1
	movq	-112(%rbp), %rax	# p, tmp665
	movl	$0, %edx	#,
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp665,
	call	find_reg_note	#
	movq	%rax, -56(%rbp)	# tmp666, tem
	cmpq	$0, -56(%rbp)	#, tem
	je	.L2032	#,
	.loc 1 6431 0
	movq	-56(%rbp), %rax	# tem, tmp667
	movq	8(%rax), %rax	# tem_228->fld[0].rtx, D.23836
	movq	-216(%rbp), %rdx	# goal, tmp668
	movq	%rdx, %rsi	# tmp668,
	movq	%rax, %rdi	# D.23836,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23838
	je	.L2033	#,
	.loc 1 6433 0
	movq	-96(%rbp), %rax	# pat, tmp669
	movq	8(%rax), %rax	# pat_204->fld[0].rtx, tmp670
	movq	%rax, -104(%rbp)	# tmp670, valtry
	.loc 1 6432 0
	movq	-104(%rbp), %rax	# valtry, tmp671
	movq	%rax, %rdi	# tmp671,
	call	true_regnum	#
	movl	%eax, -196(%rbp)	# tmp672, valueno
	cmpl	$0, -196(%rbp)	#, valueno
	jns	.L2027	#,
.L2033:
	.loc 1 6434 0
	movq	-96(%rbp), %rax	# pat, tmp673
	movq	8(%rax), %rax	# pat_204->fld[0].rtx, D.23836
	movzwl	(%rax), %eax	# _233->code, D.23834
	cmpw	$61, %ax	#, D.23834
	jne	.L2032	#,
	.loc 1 6435 0
	movq	-56(%rbp), %rax	# tem, tmp674
	movq	8(%rax), %rax	# tem_228->fld[0].rtx, D.23836
	movzwl	(%rax), %eax	# _235->code, D.23834
	cmpw	$55, %ax	#, D.23834
	jne	.L2032	#,
	.loc 1 6436 0
	movq	-56(%rbp), %rax	# tem, tmp675
	movq	8(%rax), %rax	# tem_228->fld[0].rtx, D.23836
	movzbl	2(%rax), %eax	# _237->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$2, %eax	#, D.23839
	jne	.L2032	#,
	.loc 1 6438 0
	movq	-216(%rbp), %rax	# goal, tmp677
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$54, %ax	#, D.23834
	jne	.L2032	#,
	.loc 1 6440 0
	movq	-56(%rbp), %rax	# tem, tmp678
	movq	8(%rax), %rax	# tem_228->fld[0].rtx, D.23836
	.loc 1 6439 0
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23836,
	call	operand_subword	#
	movq	%rax, -48(%rbp)	# tmp679, goaltry
	cmpq	$0, -48(%rbp)	#, goaltry
	je	.L2032	#,
	.loc 1 6442 0
	movq	-48(%rbp), %rdx	# goaltry, tmp680
	movq	-216(%rbp), %rax	# goal, tmp681
	movq	%rdx, %rsi	# tmp680,
	movq	%rax, %rdi	# tmp681,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23838
	je	.L2032	#,
	.loc 1 6444 0
	movq	-96(%rbp), %rax	# pat, tmp682
	movq	8(%rax), %rax	# pat_204->fld[0].rtx, D.23836
	.loc 1 6443 0
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23836,
	call	operand_subword	#
	movq	%rax, -104(%rbp)	# tmp683, valtry
	cmpq	$0, -104(%rbp)	#, valtry
	je	.L2032	#,
	.loc 1 6446 0
	movq	-104(%rbp), %rax	# valtry, tmp684
	movq	%rax, %rdi	# tmp684,
	call	true_regnum	#
	movl	%eax, -196(%rbp)	# tmp685, valueno
	cmpl	$0, -196(%rbp)	#, valueno
	jns	.L2027	#,
.L2032:
	.loc 1 6447 0
	cmpl	$0, -188(%rbp)	#, goal_const
	je	.L2020	#,
	.loc 1 6447 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# p, tmp686
	movl	$0, %edx	#,
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp686,
	call	find_reg_note	#
	movq	%rax, -56(%rbp)	# tmp687, tem
	cmpq	$0, -56(%rbp)	#, tem
	je	.L2020	#,
	.loc 1 6449 0 is_stmt 1
	movq	-96(%rbp), %rax	# pat, tmp688
	movq	8(%rax), %rax	# pat_204->fld[0].rtx, D.23836
	movzwl	(%rax), %eax	# _249->code, D.23834
	cmpw	$61, %ax	#, D.23834
	jne	.L2020	#,
	.loc 1 6450 0
	movq	-56(%rbp), %rax	# tem, tmp689
	movq	8(%rax), %rax	# tem_248->fld[0].rtx, D.23836
	movzwl	(%rax), %eax	# _251->code, D.23834
	cmpw	$55, %ax	#, D.23834
	jne	.L2020	#,
	.loc 1 6451 0
	movq	-56(%rbp), %rax	# tem, tmp690
	movq	8(%rax), %rax	# tem_248->fld[0].rtx, D.23836
	movzbl	2(%rax), %eax	# _253->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$2, %eax	#, D.23839
	jne	.L2020	#,
	.loc 1 6453 0
	movq	-216(%rbp), %rax	# goal, tmp692
	movzwl	(%rax), %eax	# goal_117(D)->code, D.23834
	cmpw	$54, %ax	#, D.23834
	jne	.L2020	#,
	.loc 1 6454 0
	movq	-56(%rbp), %rax	# tem, tmp693
	movq	8(%rax), %rax	# tem_248->fld[0].rtx, D.23836
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.23836,
	call	operand_subword	#
	movq	%rax, -48(%rbp)	# tmp694, goaltry
	cmpq	$0, -48(%rbp)	#, goaltry
	je	.L2020	#,
	.loc 1 6456 0
	movq	-48(%rbp), %rdx	# goaltry, tmp695
	movq	-216(%rbp), %rax	# goal, tmp696
	movq	%rdx, %rsi	# tmp695,
	movq	%rax, %rdi	# tmp696,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.23838
	je	.L2020	#,
	.loc 1 6458 0
	movq	-96(%rbp), %rax	# pat, tmp697
	movq	8(%rax), %rax	# pat_204->fld[0].rtx, D.23836
	.loc 1 6457 0
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.23836,
	call	operand_subword	#
	movq	%rax, -104(%rbp)	# tmp698, valtry
	cmpq	$0, -104(%rbp)	#, valtry
	je	.L2020	#,
	.loc 1 6459 0
	movq	-104(%rbp), %rax	# valtry, tmp699
	movq	%rax, %rdi	# tmp699,
	call	true_regnum	#
	movl	%eax, -196(%rbp)	# tmp700, valueno
	cmpl	$0, -196(%rbp)	#, valueno
	js	.L2020	#,
.L2027:
	.loc 1 6461 0
	cmpl	$0, -232(%rbp)	#, other
	js	.L2034	#,
	.loc 1 6463 0
	movl	-196(%rbp), %eax	# valueno, tmp701
	cmpl	-232(%rbp), %eax	# other, tmp701
	je	.L2035	#,
	.loc 1 6464 0
	jmp	.L2020	#
.L2034:
	.loc 1 6466 0
	movl	-196(%rbp), %eax	# valueno, valueno.1263
	cmpl	$52, %eax	#, valueno.1263
	jbe	.L2036	#,
	.loc 1 6467 0
	jmp	.L2020	#
.L2036:
.LBB86:
	.loc 1 6472 0
	cmpl	$7, -196(%rbp)	#, valueno
	jle	.L2037	#,
	.loc 1 6472 0 is_stmt 0 discriminator 1
	cmpl	$15, -196(%rbp)	#, valueno
	jle	.L2038	#,
.L2037:
	.loc 1 6472 0 discriminator 2
	cmpl	$20, -196(%rbp)	#, valueno
	jle	.L2039	#,
	.loc 1 6472 0 discriminator 1
	cmpl	$28, -196(%rbp)	#, valueno
	jle	.L2038	#,
.L2039:
	.loc 1 6472 0 discriminator 2
	cmpl	$44, -196(%rbp)	#, valueno
	jle	.L2040	#,
	.loc 1 6472 0 discriminator 1
	cmpl	$52, -196(%rbp)	#, valueno
	jle	.L2038	#,
.L2040:
	.loc 1 6472 0 discriminator 2
	cmpl	$28, -196(%rbp)	#, valueno
	jle	.L2041	#,
	.loc 1 6472 0 discriminator 1
	cmpl	$36, -196(%rbp)	#, valueno
	jg	.L2041	#,
.L2038:
	movl	16(%rbp), %eax	# mode, mode.1266
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$5, %eax	#, D.23839
	je	.L2042	#,
	.loc 1 6472 0 discriminator 2
	movl	16(%rbp), %eax	# mode, mode.1267
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$6, %eax	#, D.23839
	jne	.L2043	#,
.L2042:
	.loc 1 6472 0 discriminator 1
	movl	$1, %eax	#, iftmp.1265
	jmp	.L2044	#
.L2043:
	.loc 1 6472 0 discriminator 3
	movl	$0, %eax	#, iftmp.1265
.L2044:
	.loc 1 6472 0 discriminator 4
	jmp	.L2045	#
.L2041:
	.loc 1 6472 0 discriminator 2
	cmpl	$18, 16(%rbp)	#, mode
	jne	.L2046	#,
	.loc 1 6472 0 discriminator 4
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1270
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2047	#,
	.loc 1 6472 0 discriminator 6
	movl	$1, %eax	#, iftmp.1269
	jmp	.L2045	#
.L2047:
	.loc 1 6472 0 discriminator 7
	movl	$2, %eax	#, iftmp.1269
	jmp	.L2045	#
.L2046:
	.loc 1 6472 0 discriminator 5
	cmpl	$24, 16(%rbp)	#, mode
	jne	.L2050	#,
	.loc 1 6472 0 discriminator 8
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1273
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2051	#,
	.loc 1 6472 0 discriminator 10
	movl	$3, %eax	#, iftmp.1272
	jmp	.L2045	#
.L2051:
	.loc 1 6472 0 discriminator 11
	movl	$5, %eax	#, iftmp.1272
	jmp	.L2045	#
.L2050:
	.loc 1 6472 0 discriminator 9
	movl	16(%rbp), %eax	# mode, mode.1274
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23837
	movzbl	%al, %edx	# D.23837, D.23838
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1276
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2054	#,
	.loc 1 6472 0 discriminator 1
	movl	$8, %eax	#, iftmp.1275
	jmp	.L2055	#
.L2054:
	.loc 1 6472 0 discriminator 2
	movl	$4, %eax	#, iftmp.1275
.L2055:
	.loc 1 6472 0 discriminator 3
	addl	%edx, %eax	# D.23838, D.23838
	subl	$1, %eax	#, D.23838
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1278
	andl	$33554432, %edx	#, D.23838
	testl	%edx, %edx	# D.23838
	je	.L2056	#,
	.loc 1 6472 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1277
	jmp	.L2057	#
.L2056:
	.loc 1 6472 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1277
.L2057:
	.loc 1 6472 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1277
	subl	$1, %eax	#, iftmp.1271
.L2045:
	movl	%eax, -176(%rbp)	# iftmp.1264, i
	jmp	.L2058	#
.L2061:
	.loc 1 6473 0 is_stmt 1
	movl	-228(%rbp), %eax	# class, class.1279
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.23841
	movl	-176(%rbp), %eax	# i, tmp708
	movl	-196(%rbp), %ecx	# valueno, tmp709
	addl	%ecx, %eax	# tmp709, D.23838
	movl	%eax, %ecx	# D.23838, tmp963
	shrq	%cl, %rdx	# tmp963, D.23841
	movq	%rdx, %rax	# D.23841, D.23841
	andl	$1, %eax	#, D.23841
	testq	%rax, %rax	# D.23841
	jne	.L2059	#,
	.loc 1 6475 0
	jmp	.L2060	#
.L2059:
	.loc 1 6472 0
	subl	$1, -176(%rbp)	#, i
.L2058:
	.loc 1 6472 0 is_stmt 0 discriminator 1
	cmpl	$0, -176(%rbp)	#, i
	jns	.L2061	#,
.L2060:
	.loc 1 6476 0 is_stmt 1
	cmpl	$0, -176(%rbp)	#, i
	js	.L2035	#,
	.loc 1 6477 0
	jmp	.L2020	#
.L2035:
.LBE86:
	.loc 1 6479 0
	movq	-104(%rbp), %rax	# valtry, tmp710
	movq	%rax, -40(%rbp)	# tmp710, value
	.loc 1 6480 0
	movq	-112(%rbp), %rax	# p, tmp711
	movq	%rax, -32(%rbp)	# tmp711, where
	.loc 1 6481 0
	nop
.LBE85:
	.loc 1 6494 0
	movq	-32(%rbp), %rax	# where, tmp712
	movq	56(%rax), %rax	# where_310->fld[6].rtx, D.23836
	testq	%rax, %rax	# D.23836
	je	.L2063	#,
	jmp	.L2328	#
.L2020:
	.loc 1 6484 0
	jmp	.L2004	#
.L2328:
	.loc 1 6494 0 discriminator 1
	movq	-40(%rbp), %rdx	# value, tmp713
	movq	-32(%rbp), %rax	# where, tmp714
	movl	$10, %esi	#,
	movq	%rax, %rdi	# tmp714,
	call	find_reg_note	#
	testq	%rax, %rax	# D.23836
	je	.L2063	#,
	.loc 1 6495 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2063:
	.loc 1 6499 0
	cmpl	$7, -196(%rbp)	#, valueno
	je	.L2064	#,
	.loc 1 6499 0 is_stmt 0 discriminator 1
	cmpl	$7, -200(%rbp)	#, regno
	je	.L2064	#,
	.loc 1 6500 0 is_stmt 1
	cmpl	$0, -192(%rbp)	#, goal_mem
	je	.L2065	#,
	.loc 1 6500 0 is_stmt 0 discriminator 1
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23836
	movq	-216(%rbp), %rdx	# goal, tmp715
	movq	%rdx, %rsi	# tmp715,
	movq	%rax, %rdi	# D.23836,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.23838
	je	.L2065	#,
.L2064:
	.loc 1 6502 0 is_stmt 1
	movl	$1, -180(%rbp)	#, need_stable_sp
.L2065:
	.loc 1 6505 0
	movq	-40(%rbp), %rax	# value, tmp716
	movzbl	2(%rax), %eax	# value_309->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23835
	cmpl	16(%rbp), %eax	# mode, D.23835
	je	.L2066	#,
	.loc 1 6506 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2066:
	.loc 1 6511 0
	cmpl	$0, -192(%rbp)	#, goal_mem
	je	.L2067	#,
	.loc 1 6511 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# where, tmp717
	movzwl	(%rax), %eax	# where_310->code, D.23834
	movzwl	%ax, %eax	# D.23834, D.23838
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.23840
	cmpb	$105, %al	#, D.23840
	jne	.L2068	#,
	movq	-32(%rbp), %rax	# where, tmp719
	movq	32(%rax), %rax	# where_310->fld[3].rtx, D.23836
	movzwl	(%rax), %eax	# _323->code, D.23834
	cmpw	$47, %ax	#, D.23834
	jne	.L2069	#,
	.loc 1 6511 0 discriminator 3
	movq	-32(%rbp), %rax	# where, tmp720
	movq	32(%rax), %rax	# where_310->fld[3].rtx, iftmp.1281
	jmp	.L2071	#
.L2069:
	.loc 1 6511 0 discriminator 4
	movq	-32(%rbp), %rax	# where, tmp721
	movq	32(%rax), %rdx	# where_310->fld[3].rtx, D.23836
	movq	-32(%rbp), %rax	# where, tmp722
	movq	%rdx, %rsi	# D.23836,
	movq	%rax, %rdi	# tmp722,
	call	single_set_2	#
	jmp	.L2071	#
.L2068:
	.loc 1 6511 0 discriminator 2
	movl	$0, %eax	#, iftmp.1280
.L2071:
	.loc 1 6511 0 discriminator 5
	movq	8(%rax), %rax	# iftmp.1280_35->fld[0].rtx, D.23836
	cmpq	-40(%rbp), %rax	# value, D.23836
	jne	.L2067	#,
	.loc 1 6514 0 is_stmt 1
	cmpl	$7, -196(%rbp)	#, valueno
	jle	.L2072	#,
	.loc 1 6514 0 is_stmt 0 discriminator 1
	cmpl	$15, -196(%rbp)	#, valueno
	jle	.L2073	#,
.L2072:
	.loc 1 6514 0 discriminator 2
	cmpl	$20, -196(%rbp)	#, valueno
	jle	.L2074	#,
	.loc 1 6514 0 discriminator 1
	cmpl	$28, -196(%rbp)	#, valueno
	jle	.L2073	#,
.L2074:
	.loc 1 6514 0 discriminator 2
	cmpl	$44, -196(%rbp)	#, valueno
	jle	.L2075	#,
	.loc 1 6514 0 discriminator 1
	cmpl	$52, -196(%rbp)	#, valueno
	jle	.L2073	#,
.L2075:
	.loc 1 6514 0 discriminator 2
	cmpl	$28, -196(%rbp)	#, valueno
	jle	.L2076	#,
	.loc 1 6514 0 discriminator 1
	cmpl	$36, -196(%rbp)	#, valueno
	jg	.L2076	#,
.L2073:
	movl	16(%rbp), %eax	# mode, mode.1284
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$5, %eax	#, D.23839
	je	.L2077	#,
	.loc 1 6514 0 discriminator 2
	movl	16(%rbp), %eax	# mode, mode.1285
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$6, %eax	#, D.23839
	jne	.L2078	#,
.L2077:
	.loc 1 6514 0 discriminator 1
	movl	$2, %eax	#, iftmp.1283
	jmp	.L2079	#
.L2078:
	movl	$1, %eax	#, iftmp.1283
.L2079:
	.loc 1 6514 0 discriminator 3
	jmp	.L2080	#
.L2076:
	.loc 1 6514 0 discriminator 2
	cmpl	$18, 16(%rbp)	#, mode
	jne	.L2081	#,
	.loc 1 6514 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1288
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2082	#,
	movl	$2, %eax	#, iftmp.1287
	jmp	.L2080	#
.L2082:
	.loc 1 6514 0 discriminator 2
	movl	$3, %eax	#, iftmp.1287
	jmp	.L2080	#
.L2081:
	cmpl	$24, 16(%rbp)	#, mode
	jne	.L2085	#,
	.loc 1 6514 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1291
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2086	#,
	movl	$4, %eax	#, iftmp.1290
	jmp	.L2080	#
.L2086:
	.loc 1 6514 0 discriminator 2
	movl	$6, %eax	#, iftmp.1290
	jmp	.L2080	#
.L2085:
	movl	16(%rbp), %eax	# mode, mode.1292
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23837
	movzbl	%al, %edx	# D.23837, D.23838
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1294
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2089	#,
	.loc 1 6514 0 discriminator 1
	movl	$8, %eax	#, iftmp.1293
	jmp	.L2090	#
.L2089:
	.loc 1 6514 0 discriminator 2
	movl	$4, %eax	#, iftmp.1293
.L2090:
	.loc 1 6514 0 discriminator 3
	addl	%edx, %eax	# D.23838, D.23838
	subl	$1, %eax	#, D.23838
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1296
	andl	$33554432, %edx	#, D.23838
	testl	%edx, %edx	# D.23838
	je	.L2091	#,
	.loc 1 6514 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1295
	jmp	.L2092	#
.L2091:
	.loc 1 6514 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1295
.L2092:
	.loc 1 6514 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1295
.L2080:
	movl	-196(%rbp), %edx	# valueno, tmp728
	addl	%edx, %eax	# tmp728, D.23838
	.loc 1 6512 0 is_stmt 1 discriminator 3
	movl	%eax, %esi	# D.23838, D.23835
	movl	-196(%rbp), %eax	# valueno, valueno.1297
	movq	-216(%rbp), %rdx	# goal, tmp729
	movl	$0, %ecx	#,
	movl	%eax, %edi	# valueno.1297,
	call	refers_to_regno_for_reload_p	#
	testl	%eax, %eax	# D.23838
	je	.L2067	#,
	.loc 1 6516 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2067:
	.loc 1 6520 0
	cmpl	$0, -192(%rbp)	#, goal_mem
	jne	.L2093	#,
	.loc 1 6520 0 is_stmt 0 discriminator 1
	cmpl	$0, -188(%rbp)	#, goal_const
	jne	.L2093	#,
	.loc 1 6521 0 is_stmt 1
	cmpl	$7, -200(%rbp)	#, regno
	jle	.L2094	#,
	.loc 1 6521 0 is_stmt 0 discriminator 1
	cmpl	$15, -200(%rbp)	#, regno
	jle	.L2095	#,
.L2094:
	.loc 1 6521 0 discriminator 2
	cmpl	$20, -200(%rbp)	#, regno
	jle	.L2096	#,
	.loc 1 6521 0 discriminator 1
	cmpl	$28, -200(%rbp)	#, regno
	jle	.L2095	#,
.L2096:
	.loc 1 6521 0 discriminator 2
	cmpl	$44, -200(%rbp)	#, regno
	jle	.L2097	#,
	.loc 1 6521 0 discriminator 1
	cmpl	$52, -200(%rbp)	#, regno
	jle	.L2095	#,
.L2097:
	.loc 1 6521 0 discriminator 2
	cmpl	$28, -200(%rbp)	#, regno
	jle	.L2098	#,
	.loc 1 6521 0 discriminator 1
	cmpl	$36, -200(%rbp)	#, regno
	jg	.L2098	#,
.L2095:
	movl	16(%rbp), %eax	# mode, mode.1300
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$5, %eax	#, D.23839
	je	.L2099	#,
	.loc 1 6521 0 discriminator 2
	movl	16(%rbp), %eax	# mode, mode.1301
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$6, %eax	#, D.23839
	jne	.L2100	#,
.L2099:
	.loc 1 6521 0 discriminator 1
	movl	$2, %eax	#, iftmp.1299
	jmp	.L2101	#
.L2100:
	movl	$1, %eax	#, iftmp.1299
.L2101:
	.loc 1 6521 0 discriminator 3
	jmp	.L2102	#
.L2098:
	.loc 1 6521 0 discriminator 2
	cmpl	$18, 16(%rbp)	#, mode
	jne	.L2103	#,
	.loc 1 6521 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1304
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2104	#,
	movl	$2, %eax	#, iftmp.1303
	jmp	.L2102	#
.L2104:
	.loc 1 6521 0 discriminator 2
	movl	$3, %eax	#, iftmp.1303
	jmp	.L2102	#
.L2103:
	cmpl	$24, 16(%rbp)	#, mode
	jne	.L2107	#,
	.loc 1 6521 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1307
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2108	#,
	movl	$4, %eax	#, iftmp.1306
	jmp	.L2102	#
.L2108:
	.loc 1 6521 0 discriminator 2
	movl	$6, %eax	#, iftmp.1306
	jmp	.L2102	#
.L2107:
	movl	16(%rbp), %eax	# mode, mode.1308
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23837
	movzbl	%al, %edx	# D.23837, D.23838
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1310
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2111	#,
	.loc 1 6521 0 discriminator 1
	movl	$8, %eax	#, iftmp.1309
	jmp	.L2112	#
.L2111:
	.loc 1 6521 0 discriminator 2
	movl	$4, %eax	#, iftmp.1309
.L2112:
	.loc 1 6521 0 discriminator 3
	addl	%edx, %eax	# D.23838, D.23838
	subl	$1, %eax	#, D.23838
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1312
	andl	$33554432, %edx	#, D.23838
	testl	%edx, %edx	# D.23838
	je	.L2113	#,
	.loc 1 6521 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1311
	jmp	.L2114	#
.L2113:
	.loc 1 6521 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1311
.L2114:
	.loc 1 6521 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1311
.L2102:
	movl	-200(%rbp), %edx	# regno, tmp735
	addl	%edx, %eax	# tmp735, D.23838
	cmpl	-196(%rbp), %eax	# valueno, D.23838
	jle	.L2093	#,
	.loc 1 6522 0 is_stmt 1
	cmpl	$7, -196(%rbp)	#, valueno
	jle	.L2115	#,
	.loc 1 6522 0 is_stmt 0 discriminator 1
	cmpl	$15, -196(%rbp)	#, valueno
	jle	.L2116	#,
.L2115:
	.loc 1 6522 0 discriminator 2
	cmpl	$20, -196(%rbp)	#, valueno
	jle	.L2117	#,
	.loc 1 6522 0 discriminator 1
	cmpl	$28, -196(%rbp)	#, valueno
	jle	.L2116	#,
.L2117:
	.loc 1 6522 0 discriminator 2
	cmpl	$44, -196(%rbp)	#, valueno
	jle	.L2118	#,
	.loc 1 6522 0 discriminator 1
	cmpl	$52, -196(%rbp)	#, valueno
	jle	.L2116	#,
.L2118:
	.loc 1 6522 0 discriminator 2
	cmpl	$28, -196(%rbp)	#, valueno
	jle	.L2119	#,
	.loc 1 6522 0 discriminator 1
	cmpl	$36, -196(%rbp)	#, valueno
	jg	.L2119	#,
.L2116:
	movl	16(%rbp), %eax	# mode, mode.1315
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$5, %eax	#, D.23839
	je	.L2120	#,
	.loc 1 6522 0 discriminator 2
	movl	16(%rbp), %eax	# mode, mode.1316
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$6, %eax	#, D.23839
	jne	.L2121	#,
.L2120:
	.loc 1 6522 0 discriminator 1
	movl	$2, %eax	#, iftmp.1314
	jmp	.L2122	#
.L2121:
	movl	$1, %eax	#, iftmp.1314
.L2122:
	.loc 1 6522 0 discriminator 3
	jmp	.L2123	#
.L2119:
	.loc 1 6522 0 discriminator 2
	cmpl	$18, 16(%rbp)	#, mode
	jne	.L2124	#,
	.loc 1 6522 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1319
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2125	#,
	movl	$2, %eax	#, iftmp.1318
	jmp	.L2123	#
.L2125:
	.loc 1 6522 0 discriminator 2
	movl	$3, %eax	#, iftmp.1318
	jmp	.L2123	#
.L2124:
	cmpl	$24, 16(%rbp)	#, mode
	jne	.L2128	#,
	.loc 1 6522 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1322
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2129	#,
	movl	$4, %eax	#, iftmp.1321
	jmp	.L2123	#
.L2129:
	.loc 1 6522 0 discriminator 2
	movl	$6, %eax	#, iftmp.1321
	jmp	.L2123	#
.L2128:
	movl	16(%rbp), %eax	# mode, mode.1323
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23837
	movzbl	%al, %edx	# D.23837, D.23838
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1325
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2132	#,
	.loc 1 6522 0 discriminator 1
	movl	$8, %eax	#, iftmp.1324
	jmp	.L2133	#
.L2132:
	.loc 1 6522 0 discriminator 2
	movl	$4, %eax	#, iftmp.1324
.L2133:
	.loc 1 6522 0 discriminator 3
	addl	%edx, %eax	# D.23838, D.23838
	subl	$1, %eax	#, D.23838
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1327
	andl	$33554432, %edx	#, D.23838
	testl	%edx, %edx	# D.23838
	je	.L2134	#,
	.loc 1 6522 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1326
	jmp	.L2135	#
.L2134:
	.loc 1 6522 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1326
.L2135:
	.loc 1 6522 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1326
.L2123:
	movl	-196(%rbp), %edx	# valueno, tmp741
	addl	%edx, %eax	# tmp741, D.23838
	cmpl	-200(%rbp), %eax	# regno, D.23838
	jle	.L2093	#,
	.loc 1 6523 0 is_stmt 1
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2093:
	.loc 1 6525 0
	cmpl	$7, -200(%rbp)	#, regno
	jle	.L2136	#,
	.loc 1 6525 0 is_stmt 0 discriminator 1
	cmpl	$15, -200(%rbp)	#, regno
	jle	.L2137	#,
.L2136:
	.loc 1 6525 0 discriminator 2
	cmpl	$20, -200(%rbp)	#, regno
	jle	.L2138	#,
	.loc 1 6525 0 discriminator 1
	cmpl	$28, -200(%rbp)	#, regno
	jle	.L2137	#,
.L2138:
	.loc 1 6525 0 discriminator 2
	cmpl	$44, -200(%rbp)	#, regno
	jle	.L2139	#,
	.loc 1 6525 0 discriminator 1
	cmpl	$52, -200(%rbp)	#, regno
	jle	.L2137	#,
.L2139:
	.loc 1 6525 0 discriminator 2
	cmpl	$28, -200(%rbp)	#, regno
	jle	.L2140	#,
	.loc 1 6525 0 discriminator 1
	cmpl	$36, -200(%rbp)	#, regno
	jg	.L2140	#,
.L2137:
	movl	16(%rbp), %eax	# mode, mode.1330
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$5, %eax	#, D.23839
	je	.L2141	#,
	.loc 1 6525 0 discriminator 2
	movl	16(%rbp), %eax	# mode, mode.1331
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$6, %eax	#, D.23839
	jne	.L2142	#,
.L2141:
	.loc 1 6525 0 discriminator 1
	movl	$2, %eax	#, iftmp.1329
	jmp	.L2143	#
.L2142:
	movl	$1, %eax	#, iftmp.1329
.L2143:
	.loc 1 6525 0 discriminator 3
	jmp	.L2144	#
.L2140:
	.loc 1 6525 0 discriminator 2
	cmpl	$18, 16(%rbp)	#, mode
	jne	.L2145	#,
	.loc 1 6525 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1334
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2146	#,
	movl	$2, %eax	#, iftmp.1333
	jmp	.L2144	#
.L2146:
	.loc 1 6525 0 discriminator 2
	movl	$3, %eax	#, iftmp.1333
	jmp	.L2144	#
.L2145:
	cmpl	$24, 16(%rbp)	#, mode
	jne	.L2149	#,
	.loc 1 6525 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1337
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2150	#,
	movl	$4, %eax	#, iftmp.1336
	jmp	.L2144	#
.L2150:
	.loc 1 6525 0 discriminator 2
	movl	$6, %eax	#, iftmp.1336
	jmp	.L2144	#
.L2149:
	movl	16(%rbp), %eax	# mode, mode.1338
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23837
	movzbl	%al, %edx	# D.23837, D.23838
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1340
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2153	#,
	.loc 1 6525 0 discriminator 1
	movl	$8, %eax	#, iftmp.1339
	jmp	.L2154	#
.L2153:
	.loc 1 6525 0 discriminator 2
	movl	$4, %eax	#, iftmp.1339
.L2154:
	.loc 1 6525 0 discriminator 3
	addl	%edx, %eax	# D.23838, D.23838
	subl	$1, %eax	#, D.23838
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1342
	andl	$33554432, %edx	#, D.23838
	testl	%edx, %edx	# D.23838
	je	.L2155	#,
	.loc 1 6525 0 discriminator 1
	movl	$8, %ecx	#, iftmp.1341
	jmp	.L2156	#
.L2155:
	.loc 1 6525 0 discriminator 2
	movl	$4, %ecx	#, iftmp.1341
.L2156:
	.loc 1 6525 0 discriminator 3
	cltd
	idivl	%ecx	# iftmp.1341
.L2144:
	movl	%eax, -144(%rbp)	# iftmp.1328, nregs
	.loc 1 6526 0 is_stmt 1 discriminator 3
	cmpl	$7, -196(%rbp)	#, valueno
	jle	.L2157	#,
	.loc 1 6526 0 is_stmt 0 discriminator 1
	cmpl	$15, -196(%rbp)	#, valueno
	jle	.L2158	#,
.L2157:
	.loc 1 6526 0 discriminator 2
	cmpl	$20, -196(%rbp)	#, valueno
	jle	.L2159	#,
	.loc 1 6526 0 discriminator 1
	cmpl	$28, -196(%rbp)	#, valueno
	jle	.L2158	#,
.L2159:
	.loc 1 6526 0 discriminator 2
	cmpl	$44, -196(%rbp)	#, valueno
	jle	.L2160	#,
	.loc 1 6526 0 discriminator 1
	cmpl	$52, -196(%rbp)	#, valueno
	jle	.L2158	#,
.L2160:
	.loc 1 6526 0 discriminator 2
	cmpl	$28, -196(%rbp)	#, valueno
	jle	.L2161	#,
	.loc 1 6526 0 discriminator 1
	cmpl	$36, -196(%rbp)	#, valueno
	jg	.L2161	#,
.L2158:
	movl	16(%rbp), %eax	# mode, mode.1345
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$5, %eax	#, D.23839
	je	.L2162	#,
	.loc 1 6526 0 discriminator 2
	movl	16(%rbp), %eax	# mode, mode.1346
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$6, %eax	#, D.23839
	jne	.L2163	#,
.L2162:
	.loc 1 6526 0 discriminator 1
	movl	$2, %eax	#, iftmp.1344
	jmp	.L2164	#
.L2163:
	movl	$1, %eax	#, iftmp.1344
.L2164:
	.loc 1 6526 0 discriminator 3
	jmp	.L2165	#
.L2161:
	.loc 1 6526 0 discriminator 2
	cmpl	$18, 16(%rbp)	#, mode
	jne	.L2166	#,
	.loc 1 6526 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1349
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2167	#,
	movl	$2, %eax	#, iftmp.1348
	jmp	.L2165	#
.L2167:
	.loc 1 6526 0 discriminator 2
	movl	$3, %eax	#, iftmp.1348
	jmp	.L2165	#
.L2166:
	cmpl	$24, 16(%rbp)	#, mode
	jne	.L2170	#,
	.loc 1 6526 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1352
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2171	#,
	movl	$4, %eax	#, iftmp.1351
	jmp	.L2165	#
.L2171:
	.loc 1 6526 0 discriminator 2
	movl	$6, %eax	#, iftmp.1351
	jmp	.L2165	#
.L2170:
	movl	16(%rbp), %eax	# mode, mode.1353
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23837
	movzbl	%al, %edx	# D.23837, D.23838
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1355
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2174	#,
	.loc 1 6526 0 discriminator 1
	movl	$8, %eax	#, iftmp.1354
	jmp	.L2175	#
.L2174:
	.loc 1 6526 0 discriminator 2
	movl	$4, %eax	#, iftmp.1354
.L2175:
	.loc 1 6526 0 discriminator 3
	addl	%edx, %eax	# D.23838, D.23838
	subl	$1, %eax	#, D.23838
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1357
	andl	$33554432, %edx	#, D.23838
	testl	%edx, %edx	# D.23838
	je	.L2176	#,
	.loc 1 6526 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1356
	jmp	.L2177	#
.L2176:
	.loc 1 6526 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1356
.L2177:
	.loc 1 6526 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1356
.L2165:
	movl	%eax, -140(%rbp)	# iftmp.1343, valuenregs
	.loc 1 6534 0 is_stmt 1 discriminator 3
	cmpq	$0, -240(%rbp)	#, reload_reg_p
	je	.L2178	#,
	.loc 1 6534 0 is_stmt 0 discriminator 1
	cmpq	$1, -240(%rbp)	#, reload_reg_p
	je	.L2178	#,
.LBB87:
	.loc 1 6537 0 is_stmt 1
	movl	$0, -172(%rbp)	#, i
	jmp	.L2179	#
.L2181:
	.loc 1 6538 0
	movl	-172(%rbp), %eax	# i, tmp752
	movl	-196(%rbp), %edx	# valueno, tmp753
	addl	%edx, %eax	# tmp753, D.23838
	cltq
	leaq	(%rax,%rax), %rdx	#, D.23841
	movq	-240(%rbp), %rax	# reload_reg_p, tmp754
	addq	%rdx, %rax	# D.23841, D.23842
	movzwl	(%rax), %eax	# *_510, D.23843
	testw	%ax, %ax	# D.23843
	js	.L2180	#,
	.loc 1 6539 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2180:
	.loc 1 6537 0
	addl	$1, -172(%rbp)	#, i
.L2179:
	.loc 1 6537 0 is_stmt 0 discriminator 1
	movl	-172(%rbp), %eax	# i, tmp755
	cmpl	-140(%rbp), %eax	# valuenregs, tmp755
	jl	.L2181	#,
.L2178:
.LBE87:
	.loc 1 6545 0 is_stmt 1
	cmpq	$0, -240(%rbp)	#, reload_reg_p
	je	.L2182	#,
.LBB88:
	.loc 1 6548 0
	movl	$0, -168(%rbp)	#, i
	jmp	.L2183	#
.L2206:
	.loc 1 6549 0
	movl	-168(%rbp), %eax	# i, tmp757
	movslq	%eax, %rdx	# tmp757, tmp756
	movq	%rdx, %rax	# tmp756, tmp758
	addq	%rax, %rax	# tmp758
	addq	%rdx, %rax	# tmp756, tmp758
	salq	$2, %rax	#, tmp758
	addq	%rdx, %rax	# tmp756, tmp758
	salq	$3, %rax	#, tmp759
	addq	$rld+64, %rax	#, tmp760
	movq	(%rax), %rax	# rld[i_14].reg_rtx, D.23836
	testq	%rax, %rax	# D.23836
	je	.L2184	#,
	.loc 1 6549 0 is_stmt 0 discriminator 1
	movl	-168(%rbp), %eax	# i, tmp762
	movslq	%eax, %rdx	# tmp762, tmp761
	movq	%rdx, %rax	# tmp761, tmp763
	addq	%rax, %rax	# tmp763
	addq	%rdx, %rax	# tmp761, tmp763
	salq	$2, %rax	#, tmp763
	addq	%rdx, %rax	# tmp761, tmp763
	salq	$3, %rax	#, tmp764
	addq	$rld, %rax	#, tmp765
	movq	(%rax), %rax	# rld[i_14].in, D.23836
	testq	%rax, %rax	# D.23836
	je	.L2184	#,
.LBB89:
	.loc 1 6551 0 is_stmt 1
	movl	-168(%rbp), %eax	# i, tmp767
	movslq	%eax, %rdx	# tmp767, tmp766
	movq	%rdx, %rax	# tmp766, tmp768
	addq	%rax, %rax	# tmp768
	addq	%rdx, %rax	# tmp766, tmp768
	salq	$2, %rax	#, tmp768
	addq	%rdx, %rax	# tmp766, tmp768
	salq	$3, %rax	#, tmp769
	addq	$rld+64, %rax	#, tmp770
	movq	(%rax), %rax	# rld[i_14].reg_rtx, D.23836
	movl	8(%rax), %eax	# _518->fld[0].rtuint, D.23835
	movl	%eax, -136(%rbp)	# D.23835, regno1
	.loc 1 6552 0
	cmpl	$7, -136(%rbp)	#, regno1
	jle	.L2185	#,
	.loc 1 6552 0 is_stmt 0 discriminator 1
	cmpl	$15, -136(%rbp)	#, regno1
	jle	.L2186	#,
.L2185:
	.loc 1 6552 0 discriminator 2
	cmpl	$20, -136(%rbp)	#, regno1
	jle	.L2187	#,
	.loc 1 6552 0 discriminator 1
	cmpl	$28, -136(%rbp)	#, regno1
	jle	.L2186	#,
.L2187:
	.loc 1 6552 0 discriminator 2
	cmpl	$44, -136(%rbp)	#, regno1
	jle	.L2188	#,
	.loc 1 6552 0 discriminator 1
	cmpl	$52, -136(%rbp)	#, regno1
	jle	.L2186	#,
.L2188:
	.loc 1 6552 0 discriminator 2
	cmpl	$28, -136(%rbp)	#, regno1
	jle	.L2189	#,
	.loc 1 6552 0 discriminator 1
	cmpl	$36, -136(%rbp)	#, regno1
	jg	.L2189	#,
.L2186:
	movl	-168(%rbp), %eax	# i, tmp772
	movslq	%eax, %rdx	# tmp772, tmp771
	movq	%rdx, %rax	# tmp771, tmp773
	addq	%rax, %rax	# tmp773
	addq	%rdx, %rax	# tmp771, tmp773
	salq	$2, %rax	#, tmp773
	addq	%rdx, %rax	# tmp771, tmp773
	salq	$3, %rax	#, tmp774
	addq	$rld+64, %rax	#, tmp775
	movq	(%rax), %rax	# rld[i_14].reg_rtx, D.23836
	movzbl	2(%rax), %eax	# _553->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$5, %eax	#, D.23839
	je	.L2190	#,
	.loc 1 6552 0 discriminator 2
	movl	-168(%rbp), %eax	# i, tmp778
	movslq	%eax, %rdx	# tmp778, tmp777
	movq	%rdx, %rax	# tmp777, tmp779
	addq	%rax, %rax	# tmp779
	addq	%rdx, %rax	# tmp777, tmp779
	salq	$2, %rax	#, tmp779
	addq	%rdx, %rax	# tmp777, tmp779
	salq	$3, %rax	#, tmp780
	addq	$rld+64, %rax	#, tmp781
	movq	(%rax), %rax	# rld[i_14].reg_rtx, D.23836
	movzbl	2(%rax), %eax	# _557->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$6, %eax	#, D.23839
	jne	.L2191	#,
.L2190:
	.loc 1 6552 0 discriminator 1
	movl	$2, %eax	#, iftmp.1359
	jmp	.L2192	#
.L2191:
	movl	$1, %eax	#, iftmp.1359
.L2192:
	.loc 1 6552 0 discriminator 3
	jmp	.L2193	#
.L2189:
	.loc 1 6552 0 discriminator 2
	movl	-168(%rbp), %eax	# i, tmp784
	movslq	%eax, %rdx	# tmp784, tmp783
	movq	%rdx, %rax	# tmp783, tmp785
	addq	%rax, %rax	# tmp785
	addq	%rdx, %rax	# tmp783, tmp785
	salq	$2, %rax	#, tmp785
	addq	%rdx, %rax	# tmp783, tmp785
	salq	$3, %rax	#, tmp786
	addq	$rld+64, %rax	#, tmp787
	movq	(%rax), %rax	# rld[i_14].reg_rtx, D.23836
	movzbl	2(%rax), %eax	# _521->mode, D.23837
	cmpb	$18, %al	#, D.23837
	jne	.L2194	#,
	.loc 1 6552 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1362
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2195	#,
	movl	$2, %eax	#, iftmp.1361
	jmp	.L2193	#
.L2195:
	.loc 1 6552 0 discriminator 2
	movl	$3, %eax	#, iftmp.1361
	jmp	.L2193	#
.L2194:
	movl	-168(%rbp), %eax	# i, tmp789
	movslq	%eax, %rdx	# tmp789, tmp788
	movq	%rdx, %rax	# tmp788, tmp790
	addq	%rax, %rax	# tmp790
	addq	%rdx, %rax	# tmp788, tmp790
	salq	$2, %rax	#, tmp790
	addq	%rdx, %rax	# tmp788, tmp790
	salq	$3, %rax	#, tmp791
	addq	$rld+64, %rax	#, tmp792
	movq	(%rax), %rax	# rld[i_14].reg_rtx, D.23836
	movzbl	2(%rax), %eax	# _528->mode, D.23837
	cmpb	$24, %al	#, D.23837
	jne	.L2198	#,
	.loc 1 6552 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1365
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2199	#,
	movl	$4, %eax	#, iftmp.1364
	jmp	.L2193	#
.L2199:
	.loc 1 6552 0 discriminator 2
	movl	$6, %eax	#, iftmp.1364
	jmp	.L2193	#
.L2198:
	movl	-168(%rbp), %eax	# i, tmp794
	movslq	%eax, %rdx	# tmp794, tmp793
	movq	%rdx, %rax	# tmp793, tmp795
	addq	%rax, %rax	# tmp795
	addq	%rdx, %rax	# tmp793, tmp795
	salq	$2, %rax	#, tmp795
	addq	%rdx, %rax	# tmp793, tmp795
	salq	$3, %rax	#, tmp796
	addq	$rld+64, %rax	#, tmp797
	movq	(%rax), %rax	# rld[i_14].reg_rtx, D.23836
	movzbl	2(%rax), %eax	# _535->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23837
	movzbl	%al, %edx	# D.23837, D.23838
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1367
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2202	#,
	.loc 1 6552 0 discriminator 1
	movl	$8, %eax	#, iftmp.1366
	jmp	.L2203	#
.L2202:
	.loc 1 6552 0 discriminator 2
	movl	$4, %eax	#, iftmp.1366
.L2203:
	.loc 1 6552 0 discriminator 3
	addl	%edx, %eax	# D.23838, D.23838
	subl	$1, %eax	#, D.23838
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1369
	andl	$33554432, %edx	#, D.23838
	testl	%edx, %edx	# D.23838
	je	.L2204	#,
	.loc 1 6552 0 discriminator 1
	movl	$8, %ecx	#, iftmp.1368
	jmp	.L2205	#
.L2204:
	.loc 1 6552 0 discriminator 2
	movl	$4, %ecx	#, iftmp.1368
.L2205:
	.loc 1 6552 0 discriminator 3
	cltd
	idivl	%ecx	# iftmp.1368
.L2193:
	movl	%eax, -132(%rbp)	# iftmp.1358, nregs1
	.loc 1 6554 0 is_stmt 1 discriminator 3
	movl	-140(%rbp), %eax	# valuenregs, tmp801
	movl	-196(%rbp), %edx	# valueno, tmp802
	addl	%edx, %eax	# tmp802, D.23838
	cmpl	-136(%rbp), %eax	# regno1, D.23838
	jle	.L2184	#,
	.loc 1 6555 0
	movl	-132(%rbp), %eax	# nregs1, tmp803
	movl	-136(%rbp), %edx	# regno1, tmp804
	addl	%edx, %eax	# tmp804, D.23838
	cmpl	-196(%rbp), %eax	# valueno, D.23838
	jle	.L2184	#,
	.loc 1 6556 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2184:
.LBE89:
	.loc 1 6548 0
	addl	$1, -168(%rbp)	#, i
.L2183:
	.loc 1 6548 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1370
	cmpl	%eax, -168(%rbp)	# n_reloads.1370, i
	jl	.L2206	#,
.L2182:
.LBE88:
	.loc 1 6560 0 is_stmt 1
	cmpl	$0, -192(%rbp)	#, goal_mem
	je	.L2207	#,
	.loc 1 6563 0
	movq	-216(%rbp), %rax	# goal, tmp805
	movq	8(%rax), %rax	# goal_117(D)->fld[0].rtx, D.23836
	movzwl	(%rax), %eax	# _569->code, D.23834
	cmpw	$67, %ax	#, D.23834
	je	.L2208	#,
	.loc 1 6563 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# goal, tmp806
	movq	8(%rax), %rax	# goal_117(D)->fld[0].rtx, D.23836
	movzwl	(%rax), %eax	# _571->code, D.23834
	cmpw	$68, %ax	#, D.23834
	je	.L2208	#,
	movq	-216(%rbp), %rax	# goal, tmp807
	movq	8(%rax), %rax	# goal_117(D)->fld[0].rtx, D.23836
	movzwl	(%rax), %eax	# _573->code, D.23834
	cmpw	$54, %ax	#, D.23834
	je	.L2208	#,
	movq	-216(%rbp), %rax	# goal, tmp808
	movq	8(%rax), %rax	# goal_117(D)->fld[0].rtx, D.23836
	movzwl	(%rax), %eax	# _575->code, D.23834
	cmpw	$58, %ax	#, D.23834
	je	.L2208	#,
	movq	-216(%rbp), %rax	# goal, tmp809
	movq	8(%rax), %rax	# goal_117(D)->fld[0].rtx, D.23836
	movzwl	(%rax), %eax	# _577->code, D.23834
	cmpw	$55, %ax	#, D.23834
	je	.L2208	#,
	.loc 1 6563 0 discriminator 3
	movl	$1, %eax	#, iftmp.1371
	jmp	.L2209	#
.L2208:
	.loc 1 6563 0 discriminator 2
	movl	$0, %eax	#, iftmp.1371
.L2209:
	.loc 1 6563 0 discriminator 4
	movl	%eax, -184(%rbp)	# iftmp.1371, goal_mem_addr_varies
.L2207:
	.loc 1 6568 0 is_stmt 1
	movq	-224(%rbp), %rax	# insn, tmp810
	movq	%rax, -112(%rbp)	# tmp810, p
.L2326:
	.loc 1 6571 0
	movq	-112(%rbp), %rax	# p, tmp811
	movq	16(%rax), %rax	# p_2->fld[1].rtx, tmp812
	movq	%rax, -112(%rbp)	# tmp812, p
	.loc 1 6572 0
	movq	-112(%rbp), %rax	# p, tmp813
	cmpq	-32(%rbp), %rax	# where, tmp813
	jne	.L2210	#,
	.loc 1 6573 0
	movq	-40(%rbp), %rax	# value, D.23833
	jmp	.L2008	#
.L2210:
	.loc 1 6577 0
	movq	-112(%rbp), %rax	# p, tmp814
	movzwl	(%rax), %eax	# p_583->code, D.23834
	cmpw	$34, %ax	#, D.23834
	jne	.L2211	#,
.LBB90:
	.loc 1 6581 0
	cmpl	$0, -192(%rbp)	#, goal_mem
	jne	.L2212	#,
	.loc 1 6581 0 is_stmt 0 discriminator 1
	cmpl	$0, -180(%rbp)	#, need_stable_sp
	je	.L2213	#,
.L2212:
	.loc 1 6582 0 is_stmt 1
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2213:
	.loc 1 6584 0
	cmpl	$0, -200(%rbp)	#, regno
	js	.L2214	#,
	.loc 1 6584 0 is_stmt 0 discriminator 1
	cmpl	$52, -200(%rbp)	#, regno
	jg	.L2214	#,
	.loc 1 6585 0 is_stmt 1
	movl	$0, -164(%rbp)	#, i
	jmp	.L2215	#
.L2217:
	.loc 1 6586 0
	movl	-164(%rbp), %eax	# i, tmp815
	movl	-200(%rbp), %edx	# regno, tmp816
	addl	%edx, %eax	# tmp816, D.23838
	cltq
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.23840
	testb	%al, %al	# D.23840
	je	.L2216	#,
	.loc 1 6587 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2216:
	.loc 1 6585 0
	addl	$1, -164(%rbp)	#, i
.L2215:
	.loc 1 6585 0 is_stmt 0 discriminator 1
	movl	-164(%rbp), %eax	# i, tmp818
	cmpl	-144(%rbp), %eax	# nregs, tmp818
	jl	.L2217	#,
.L2214:
	.loc 1 6589 0 is_stmt 1
	cmpl	$0, -196(%rbp)	#, valueno
	js	.L2211	#,
	.loc 1 6589 0 is_stmt 0 discriminator 1
	cmpl	$52, -196(%rbp)	#, valueno
	jg	.L2211	#,
	.loc 1 6590 0 is_stmt 1
	movl	$0, -164(%rbp)	#, i
	jmp	.L2218	#
.L2220:
	.loc 1 6591 0
	movl	-164(%rbp), %eax	# i, tmp819
	movl	-196(%rbp), %edx	# valueno, tmp820
	addl	%edx, %eax	# tmp820, D.23838
	cltq
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.23840
	testb	%al, %al	# D.23840
	je	.L2219	#,
	.loc 1 6592 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2219:
	.loc 1 6590 0
	addl	$1, -164(%rbp)	#, i
.L2218:
	.loc 1 6590 0 is_stmt 0 discriminator 1
	movl	-164(%rbp), %eax	# i, tmp822
	cmpl	-140(%rbp), %eax	# valuenregs, tmp822
	jl	.L2220	#,
.L2211:
.LBE90:
	.loc 1 6599 0 is_stmt 1
	movq	-112(%rbp), %rax	# p, tmp823
	movzwl	(%rax), %eax	# p_583->code, D.23834
	movzwl	%ax, %eax	# D.23834, D.23838
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.23840
	cmpb	$105, %al	#, D.23840
	jne	.L2221	#,
	.loc 1 6601 0
	movq	-112(%rbp), %rax	# p, tmp825
	movq	32(%rax), %rax	# p_583->fld[3].rtx, tmp826
	movq	%rax, -96(%rbp)	# tmp826, pat
	.loc 1 6604 0
	movq	-96(%rbp), %rax	# pat, tmp827
	movq	%rax, %rdi	# tmp827,
	call	volatile_insn_p	#
	testl	%eax, %eax	# D.23838
	je	.L2222	#,
	.loc 1 6605 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2222:
	.loc 1 6612 0
	movq	-96(%rbp), %rax	# pat, tmp828
	movzwl	(%rax), %eax	# pat_600->code, D.23834
	cmpw	$38, %ax	#, D.23834
	jne	.L2223	#,
	.loc 1 6613 0
	movq	-96(%rbp), %rax	# pat, tmp829
	movq	16(%rax), %rax	# pat_600->fld[1].rtx, tmp830
	movq	%rax, -96(%rbp)	# tmp830, pat
.L2223:
	.loc 1 6614 0
	movq	-96(%rbp), %rax	# pat, tmp831
	movzwl	(%rax), %eax	# pat_4->code, D.23834
	cmpw	$47, %ax	#, D.23834
	je	.L2224	#,
	.loc 1 6614 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# pat, tmp832
	movzwl	(%rax), %eax	# pat_4->code, D.23834
	cmpw	$49, %ax	#, D.23834
	jne	.L2225	#,
.L2224:
.LBB91:
	.loc 1 6616 0 is_stmt 1
	movq	-96(%rbp), %rax	# pat, tmp833
	movq	8(%rax), %rax	# pat_4->fld[0].rtx, tmp834
	movq	%rax, -88(%rbp)	# tmp834, dest
	.loc 1 6617 0
	jmp	.L2226	#
.L2227:
	.loc 1 6621 0
	movq	-88(%rbp), %rax	# dest, tmp835
	movq	8(%rax), %rax	# dest_17->fld[0].rtx, tmp836
	movq	%rax, -88(%rbp)	# tmp836, dest
.L2226:
	.loc 1 6617 0 discriminator 1
	movq	-88(%rbp), %rax	# dest, tmp837
	movzwl	(%rax), %eax	# dest_17->code, D.23834
	cmpw	$63, %ax	#, D.23834
	je	.L2227	#,
	.loc 1 6618 0
	movq	-88(%rbp), %rax	# dest, tmp838
	movzwl	(%rax), %eax	# dest_17->code, D.23834
	cmpw	$133, %ax	#, D.23834
	je	.L2227	#,
	.loc 1 6619 0
	movq	-88(%rbp), %rax	# dest, tmp839
	movzwl	(%rax), %eax	# dest_17->code, D.23834
	cmpw	$132, %ax	#, D.23834
	je	.L2227	#,
	.loc 1 6620 0
	movq	-88(%rbp), %rax	# dest, tmp840
	movzwl	(%rax), %eax	# dest_17->code, D.23834
	cmpw	$64, %ax	#, D.23834
	je	.L2227	#,
	.loc 1 6622 0
	movq	-88(%rbp), %rax	# dest, tmp841
	movzwl	(%rax), %eax	# dest_17->code, D.23834
	cmpw	$61, %ax	#, D.23834
	jne	.L2228	#,
.LBB92:
	.loc 1 6624 0
	movq	-88(%rbp), %rax	# dest, tmp842
	movl	8(%rax), %eax	# dest_17->fld[0].rtuint, D.23835
	movl	%eax, -124(%rbp)	# D.23835, xregno
	.loc 1 6626 0
	movq	-88(%rbp), %rax	# dest, tmp843
	movl	8(%rax), %eax	# dest_17->fld[0].rtuint, D.23835
	cmpl	$52, %eax	#, D.23835
	ja	.L2229	#,
	.loc 1 6627 0
	cmpl	$7, -124(%rbp)	#, xregno
	jle	.L2230	#,
	.loc 1 6627 0 is_stmt 0 discriminator 1
	cmpl	$15, -124(%rbp)	#, xregno
	jle	.L2231	#,
.L2230:
	.loc 1 6627 0 discriminator 2
	cmpl	$20, -124(%rbp)	#, xregno
	jle	.L2232	#,
	.loc 1 6627 0 discriminator 1
	cmpl	$28, -124(%rbp)	#, xregno
	jle	.L2231	#,
.L2232:
	.loc 1 6627 0 discriminator 2
	cmpl	$44, -124(%rbp)	#, xregno
	jle	.L2233	#,
	.loc 1 6627 0 discriminator 1
	cmpl	$52, -124(%rbp)	#, xregno
	jle	.L2231	#,
.L2233:
	.loc 1 6627 0 discriminator 2
	cmpl	$28, -124(%rbp)	#, xregno
	jle	.L2234	#,
	.loc 1 6627 0 discriminator 1
	cmpl	$36, -124(%rbp)	#, xregno
	jg	.L2234	#,
.L2231:
	movq	-88(%rbp), %rax	# dest, tmp844
	movzbl	2(%rax), %eax	# dest_17->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$5, %eax	#, D.23839
	je	.L2235	#,
	.loc 1 6627 0 discriminator 2
	movq	-88(%rbp), %rax	# dest, tmp846
	movzbl	2(%rax), %eax	# dest_17->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$6, %eax	#, D.23839
	jne	.L2236	#,
.L2235:
	.loc 1 6627 0 discriminator 1
	movl	$2, %eax	#, iftmp.1373
	jmp	.L2237	#
.L2236:
	movl	$1, %eax	#, iftmp.1373
.L2237:
	.loc 1 6627 0 discriminator 3
	jmp	.L2238	#
.L2234:
	.loc 1 6627 0 discriminator 2
	movq	-88(%rbp), %rax	# dest, tmp848
	movzbl	2(%rax), %eax	# dest_17->mode, D.23837
	cmpb	$18, %al	#, D.23837
	jne	.L2239	#,
	.loc 1 6627 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1376
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2240	#,
	movl	$2, %eax	#, iftmp.1375
	jmp	.L2238	#
.L2240:
	.loc 1 6627 0 discriminator 2
	movl	$3, %eax	#, iftmp.1375
	jmp	.L2238	#
.L2239:
	movq	-88(%rbp), %rax	# dest, tmp849
	movzbl	2(%rax), %eax	# dest_17->mode, D.23837
	cmpb	$24, %al	#, D.23837
	jne	.L2243	#,
	.loc 1 6627 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1379
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2244	#,
	movl	$4, %eax	#, iftmp.1378
	jmp	.L2238	#
.L2244:
	.loc 1 6627 0 discriminator 2
	movl	$6, %eax	#, iftmp.1378
	jmp	.L2238	#
.L2243:
	movq	-88(%rbp), %rax	# dest, tmp850
	movzbl	2(%rax), %eax	# dest_17->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23837
	movzbl	%al, %edx	# D.23837, D.23838
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1381
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2247	#,
	.loc 1 6627 0 discriminator 1
	movl	$8, %eax	#, iftmp.1380
	jmp	.L2248	#
.L2247:
	.loc 1 6627 0 discriminator 2
	movl	$4, %eax	#, iftmp.1380
.L2248:
	.loc 1 6627 0 discriminator 3
	addl	%edx, %eax	# D.23838, D.23838
	subl	$1, %eax	#, D.23838
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1383
	andl	$33554432, %edx	#, D.23838
	testl	%edx, %edx	# D.23838
	je	.L2249	#,
	.loc 1 6627 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1382
	jmp	.L2250	#
.L2249:
	.loc 1 6627 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1382
.L2250:
	.loc 1 6627 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1382
.L2238:
	movl	%eax, -160(%rbp)	# iftmp.1372, xnregs
	jmp	.L2251	#
.L2229:
	.loc 1 6629 0 is_stmt 1
	movl	$1, -160(%rbp)	#, xnregs
.L2251:
	.loc 1 6630 0
	movl	-144(%rbp), %eax	# nregs, tmp854
	movl	-200(%rbp), %edx	# regno, tmp855
	addl	%edx, %eax	# tmp855, D.23838
	cmpl	-124(%rbp), %eax	# xregno, D.23838
	jle	.L2252	#,
	.loc 1 6630 0 is_stmt 0 discriminator 1
	movl	-160(%rbp), %eax	# xnregs, tmp856
	movl	-124(%rbp), %edx	# xregno, tmp857
	addl	%edx, %eax	# tmp857, D.23838
	cmpl	-200(%rbp), %eax	# regno, D.23838
	jle	.L2252	#,
	.loc 1 6631 0 is_stmt 1
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2252:
	.loc 1 6632 0
	movl	-140(%rbp), %eax	# valuenregs, tmp858
	movl	-196(%rbp), %edx	# valueno, tmp859
	addl	%edx, %eax	# tmp859, D.23838
	cmpl	-124(%rbp), %eax	# xregno, D.23838
	jle	.L2253	#,
	.loc 1 6633 0
	movl	-160(%rbp), %eax	# xnregs, tmp860
	movl	-124(%rbp), %edx	# xregno, tmp861
	addl	%edx, %eax	# tmp861, D.23838
	cmpl	-196(%rbp), %eax	# valueno, D.23838
	jle	.L2253	#,
	.loc 1 6634 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2253:
	.loc 1 6635 0
	cmpl	$0, -184(%rbp)	#, goal_mem_addr_varies
	je	.L2254	#,
	.loc 1 6636 0
	movq	-216(%rbp), %rdx	# goal, tmp862
	movq	-88(%rbp), %rax	# dest, tmp863
	movq	%rdx, %rsi	# tmp862,
	movq	%rax, %rdi	# tmp863,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.23838
	je	.L2254	#,
	.loc 1 6637 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2254:
	.loc 1 6638 0
	cmpl	$7, -124(%rbp)	#, xregno
	jne	.L2255	#,
	.loc 1 6638 0 is_stmt 0 discriminator 1
	cmpl	$0, -180(%rbp)	#, need_stable_sp
	je	.L2255	#,
	.loc 1 6639 0 is_stmt 1
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2255:
.LBE92:
	jmp	.L2256	#
.L2228:
	.loc 1 6641 0
	cmpl	$0, -192(%rbp)	#, goal_mem
	je	.L2257	#,
	.loc 1 6641 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# dest, tmp864
	movzwl	(%rax), %eax	# dest_17->code, D.23834
	cmpw	$66, %ax	#, D.23834
	jne	.L2257	#,
	.loc 1 6642 0 is_stmt 1
	movq	-88(%rbp), %rax	# dest, tmp865
	movzbl	2(%rax), %eax	# dest_17->mode, D.23837
	movzbl	%al, %edx	# D.23837, D.23845
	movq	-88(%rbp), %rax	# dest, tmp866
	movl	%edx, %esi	# D.23845,
	movq	%rax, %rdi	# tmp866,
	call	push_operand	#
	testl	%eax, %eax	# D.23838
	jne	.L2257	#,
	.loc 1 6643 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2257:
	.loc 1 6644 0
	movq	-88(%rbp), %rax	# dest, tmp867
	movzwl	(%rax), %eax	# dest_17->code, D.23834
	cmpw	$66, %ax	#, D.23834
	jne	.L2258	#,
	.loc 1 6644 0 is_stmt 0 discriminator 1
	cmpl	$52, -200(%rbp)	#, regno
	jle	.L2258	#,
	.loc 1 6645 0 is_stmt 1
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.1384
	movl	-200(%rbp), %edx	# regno, tmp868
	movslq	%edx, %rdx	# tmp868, D.23841
	salq	$3, %rdx	#, D.23841
	addq	%rdx, %rax	# D.23841, D.23846
	movq	(%rax), %rax	# *_760, D.23836
	testq	%rax, %rax	# D.23836
	je	.L2258	#,
	.loc 1 6646 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2258:
	.loc 1 6647 0
	cmpl	$0, -180(%rbp)	#, need_stable_sp
	je	.L2256	#,
	.loc 1 6647 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# dest, tmp869
	movzbl	2(%rax), %eax	# dest_17->mode, D.23837
	movzbl	%al, %edx	# D.23837, D.23845
	movq	-88(%rbp), %rax	# dest, tmp870
	movl	%edx, %esi	# D.23845,
	movq	%rax, %rdi	# tmp870,
	call	push_operand	#
	testl	%eax, %eax	# D.23838
	je	.L2256	#,
	.loc 1 6648 0 is_stmt 1
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2256:
.LBE91:
	.loc 1 6615 0
	jmp	.L2259	#
.L2225:
	.loc 1 6650 0
	movq	-96(%rbp), %rax	# pat, tmp871
	movzwl	(%rax), %eax	# pat_4->code, D.23834
	cmpw	$39, %ax	#, D.23834
	jne	.L2259	#,
.LBB93:
	.loc 1 6653 0
	movq	-96(%rbp), %rax	# pat, tmp872
	movq	8(%rax), %rax	# pat_4->fld[0].rtvec, D.23844
	movl	(%rax), %eax	# _608->num_elem, D.23838
	subl	$1, %eax	#, tmp873
	movl	%eax, -156(%rbp)	# tmp873, i
	jmp	.L2260	#
.L2296:
.LBB94:
	.loc 1 6655 0
	movq	-96(%rbp), %rax	# pat, tmp874
	movq	8(%rax), %rax	# pat_4->fld[0].rtvec, D.23844
	movl	-156(%rbp), %edx	# i, tmp876
	movslq	%edx, %rdx	# tmp876, tmp875
	movq	8(%rax,%rdx,8), %rax	# _611->elem, tmp877
	movq	%rax, -80(%rbp)	# tmp877, v1
	.loc 1 6656 0
	movq	-80(%rbp), %rax	# v1, tmp878
	movzwl	(%rax), %eax	# v1_612->code, D.23834
	cmpw	$38, %ax	#, D.23834
	jne	.L2261	#,
	.loc 1 6657 0
	movq	-80(%rbp), %rax	# v1, tmp879
	movq	16(%rax), %rax	# v1_612->fld[1].rtx, tmp880
	movq	%rax, -80(%rbp)	# tmp880, v1
.L2261:
	.loc 1 6658 0
	movq	-80(%rbp), %rax	# v1, tmp881
	movzwl	(%rax), %eax	# v1_20->code, D.23834
	cmpw	$47, %ax	#, D.23834
	je	.L2262	#,
	.loc 1 6658 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# v1, tmp882
	movzwl	(%rax), %eax	# v1_20->code, D.23834
	cmpw	$49, %ax	#, D.23834
	jne	.L2263	#,
.L2262:
.LBB95:
	.loc 1 6660 0 is_stmt 1
	movq	-80(%rbp), %rax	# v1, tmp883
	movq	8(%rax), %rax	# v1_20->fld[0].rtx, tmp884
	movq	%rax, -72(%rbp)	# tmp884, dest
	.loc 1 6661 0
	jmp	.L2264	#
.L2265:
	.loc 1 6665 0
	movq	-72(%rbp), %rax	# dest, tmp885
	movq	8(%rax), %rax	# dest_21->fld[0].rtx, tmp886
	movq	%rax, -72(%rbp)	# tmp886, dest
.L2264:
	.loc 1 6661 0 discriminator 1
	movq	-72(%rbp), %rax	# dest, tmp887
	movzwl	(%rax), %eax	# dest_21->code, D.23834
	cmpw	$63, %ax	#, D.23834
	je	.L2265	#,
	.loc 1 6662 0
	movq	-72(%rbp), %rax	# dest, tmp888
	movzwl	(%rax), %eax	# dest_21->code, D.23834
	cmpw	$133, %ax	#, D.23834
	je	.L2265	#,
	.loc 1 6663 0
	movq	-72(%rbp), %rax	# dest, tmp889
	movzwl	(%rax), %eax	# dest_21->code, D.23834
	cmpw	$132, %ax	#, D.23834
	je	.L2265	#,
	.loc 1 6664 0
	movq	-72(%rbp), %rax	# dest, tmp890
	movzwl	(%rax), %eax	# dest_21->code, D.23834
	cmpw	$64, %ax	#, D.23834
	je	.L2265	#,
	.loc 1 6666 0
	movq	-72(%rbp), %rax	# dest, tmp891
	movzwl	(%rax), %eax	# dest_21->code, D.23834
	cmpw	$61, %ax	#, D.23834
	jne	.L2266	#,
.LBB96:
	.loc 1 6668 0
	movq	-72(%rbp), %rax	# dest, tmp892
	movl	8(%rax), %eax	# dest_21->fld[0].rtuint, D.23835
	movl	%eax, -128(%rbp)	# D.23835, xregno
	.loc 1 6670 0
	movq	-72(%rbp), %rax	# dest, tmp893
	movl	8(%rax), %eax	# dest_21->fld[0].rtuint, D.23835
	cmpl	$52, %eax	#, D.23835
	ja	.L2267	#,
	.loc 1 6671 0
	cmpl	$7, -128(%rbp)	#, xregno
	jle	.L2268	#,
	.loc 1 6671 0 is_stmt 0 discriminator 1
	cmpl	$15, -128(%rbp)	#, xregno
	jle	.L2269	#,
.L2268:
	.loc 1 6671 0 discriminator 2
	cmpl	$20, -128(%rbp)	#, xregno
	jle	.L2270	#,
	.loc 1 6671 0 discriminator 1
	cmpl	$28, -128(%rbp)	#, xregno
	jle	.L2269	#,
.L2270:
	.loc 1 6671 0 discriminator 2
	cmpl	$44, -128(%rbp)	#, xregno
	jle	.L2271	#,
	.loc 1 6671 0 discriminator 1
	cmpl	$52, -128(%rbp)	#, xregno
	jle	.L2269	#,
.L2271:
	.loc 1 6671 0 discriminator 2
	cmpl	$28, -128(%rbp)	#, xregno
	jle	.L2272	#,
	.loc 1 6671 0 discriminator 1
	cmpl	$36, -128(%rbp)	#, xregno
	jg	.L2272	#,
.L2269:
	movq	-72(%rbp), %rax	# dest, tmp894
	movzbl	2(%rax), %eax	# dest_21->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$5, %eax	#, D.23839
	je	.L2273	#,
	.loc 1 6671 0 discriminator 2
	movq	-72(%rbp), %rax	# dest, tmp896
	movzbl	2(%rax), %eax	# dest_21->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$6, %eax	#, D.23839
	jne	.L2274	#,
.L2273:
	.loc 1 6671 0 discriminator 1
	movl	$2, %eax	#, iftmp.1386
	jmp	.L2275	#
.L2274:
	movl	$1, %eax	#, iftmp.1386
.L2275:
	.loc 1 6671 0 discriminator 3
	jmp	.L2276	#
.L2272:
	.loc 1 6671 0 discriminator 2
	movq	-72(%rbp), %rax	# dest, tmp898
	movzbl	2(%rax), %eax	# dest_21->mode, D.23837
	cmpb	$18, %al	#, D.23837
	jne	.L2277	#,
	.loc 1 6671 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1389
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2278	#,
	movl	$2, %eax	#, iftmp.1388
	jmp	.L2276	#
.L2278:
	.loc 1 6671 0 discriminator 2
	movl	$3, %eax	#, iftmp.1388
	jmp	.L2276	#
.L2277:
	movq	-72(%rbp), %rax	# dest, tmp899
	movzbl	2(%rax), %eax	# dest_21->mode, D.23837
	cmpb	$24, %al	#, D.23837
	jne	.L2281	#,
	.loc 1 6671 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1392
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2282	#,
	movl	$4, %eax	#, iftmp.1391
	jmp	.L2276	#
.L2282:
	.loc 1 6671 0 discriminator 2
	movl	$6, %eax	#, iftmp.1391
	jmp	.L2276	#
.L2281:
	movq	-72(%rbp), %rax	# dest, tmp900
	movzbl	2(%rax), %eax	# dest_21->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23837
	movzbl	%al, %edx	# D.23837, D.23838
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1394
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2285	#,
	.loc 1 6671 0 discriminator 1
	movl	$8, %eax	#, iftmp.1393
	jmp	.L2286	#
.L2285:
	.loc 1 6671 0 discriminator 2
	movl	$4, %eax	#, iftmp.1393
.L2286:
	.loc 1 6671 0 discriminator 3
	addl	%edx, %eax	# D.23838, D.23838
	subl	$1, %eax	#, D.23838
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1396
	andl	$33554432, %edx	#, D.23838
	testl	%edx, %edx	# D.23838
	je	.L2287	#,
	.loc 1 6671 0 discriminator 1
	movl	$8, %ecx	#, iftmp.1395
	jmp	.L2288	#
.L2287:
	.loc 1 6671 0 discriminator 2
	movl	$4, %ecx	#, iftmp.1395
.L2288:
	.loc 1 6671 0 discriminator 3
	cltd
	idivl	%ecx	# iftmp.1395
.L2276:
	movl	%eax, -152(%rbp)	# iftmp.1385, xnregs
	jmp	.L2289	#
.L2267:
	.loc 1 6673 0 is_stmt 1
	movl	$1, -152(%rbp)	#, xnregs
.L2289:
	.loc 1 6674 0
	movl	-144(%rbp), %eax	# nregs, tmp904
	movl	-200(%rbp), %edx	# regno, tmp905
	addl	%edx, %eax	# tmp905, D.23838
	cmpl	-128(%rbp), %eax	# xregno, D.23838
	jle	.L2290	#,
	.loc 1 6675 0
	movl	-152(%rbp), %eax	# xnregs, tmp906
	movl	-128(%rbp), %edx	# xregno, tmp907
	addl	%edx, %eax	# tmp907, D.23838
	cmpl	-200(%rbp), %eax	# regno, D.23838
	jle	.L2290	#,
	.loc 1 6676 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2290:
	.loc 1 6677 0
	movl	-140(%rbp), %eax	# valuenregs, tmp908
	movl	-196(%rbp), %edx	# valueno, tmp909
	addl	%edx, %eax	# tmp909, D.23838
	cmpl	-128(%rbp), %eax	# xregno, D.23838
	jle	.L2291	#,
	.loc 1 6678 0
	movl	-152(%rbp), %eax	# xnregs, tmp910
	movl	-128(%rbp), %edx	# xregno, tmp911
	addl	%edx, %eax	# tmp911, D.23838
	cmpl	-196(%rbp), %eax	# valueno, D.23838
	jle	.L2291	#,
	.loc 1 6679 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2291:
	.loc 1 6680 0
	cmpl	$0, -184(%rbp)	#, goal_mem_addr_varies
	je	.L2292	#,
	.loc 1 6681 0
	movq	-216(%rbp), %rdx	# goal, tmp912
	movq	-72(%rbp), %rax	# dest, tmp913
	movq	%rdx, %rsi	# tmp912,
	movq	%rax, %rdi	# tmp913,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.23838
	je	.L2292	#,
	.loc 1 6683 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2292:
	.loc 1 6684 0
	cmpl	$7, -128(%rbp)	#, xregno
	jne	.L2293	#,
	.loc 1 6684 0 is_stmt 0 discriminator 1
	cmpl	$0, -180(%rbp)	#, need_stable_sp
	je	.L2293	#,
	.loc 1 6685 0 is_stmt 1
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2293:
.LBE96:
	jmp	.L2263	#
.L2266:
	.loc 1 6687 0
	cmpl	$0, -192(%rbp)	#, goal_mem
	je	.L2294	#,
	.loc 1 6687 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# dest, tmp914
	movzwl	(%rax), %eax	# dest_21->code, D.23834
	cmpw	$66, %ax	#, D.23834
	jne	.L2294	#,
	.loc 1 6688 0 is_stmt 1
	movq	-72(%rbp), %rax	# dest, tmp915
	movzbl	2(%rax), %eax	# dest_21->mode, D.23837
	movzbl	%al, %edx	# D.23837, D.23845
	movq	-72(%rbp), %rax	# dest, tmp916
	movl	%edx, %esi	# D.23845,
	movq	%rax, %rdi	# tmp916,
	call	push_operand	#
	testl	%eax, %eax	# D.23838
	jne	.L2294	#,
	.loc 1 6689 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2294:
	.loc 1 6690 0
	movq	-72(%rbp), %rax	# dest, tmp917
	movzwl	(%rax), %eax	# dest_21->code, D.23834
	cmpw	$66, %ax	#, D.23834
	jne	.L2295	#,
	.loc 1 6690 0 is_stmt 0 discriminator 1
	cmpl	$52, -200(%rbp)	#, regno
	jle	.L2295	#,
	.loc 1 6691 0 is_stmt 1
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.1397
	movl	-200(%rbp), %edx	# regno, tmp918
	movslq	%edx, %rdx	# tmp918, D.23841
	salq	$3, %rdx	#, D.23841
	addq	%rdx, %rax	# D.23841, D.23846
	movq	(%rax), %rax	# *_684, D.23836
	testq	%rax, %rax	# D.23836
	je	.L2295	#,
	.loc 1 6692 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2295:
	.loc 1 6693 0
	cmpl	$0, -180(%rbp)	#, need_stable_sp
	je	.L2263	#,
	.loc 1 6694 0
	movq	-72(%rbp), %rax	# dest, tmp919
	movzbl	2(%rax), %eax	# dest_21->mode, D.23837
	movzbl	%al, %edx	# D.23837, D.23845
	movq	-72(%rbp), %rax	# dest, tmp920
	movl	%edx, %esi	# D.23845,
	movq	%rax, %rdi	# tmp920,
	call	push_operand	#
	testl	%eax, %eax	# D.23838
	je	.L2263	#,
	.loc 1 6695 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2263:
.LBE95:
.LBE94:
	.loc 1 6653 0
	subl	$1, -156(%rbp)	#, i
.L2260:
	.loc 1 6653 0 is_stmt 0 discriminator 1
	cmpl	$0, -156(%rbp)	#, i
	jns	.L2296	#,
.L2259:
.LBE93:
	.loc 1 6700 0 is_stmt 1
	movq	-112(%rbp), %rax	# p, tmp921
	movzwl	(%rax), %eax	# p_583->code, D.23834
	cmpw	$34, %ax	#, D.23834
	jne	.L2221	#,
	.loc 1 6700 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# p, tmp922
	movq	64(%rax), %rax	# p_583->fld[7].rtx, D.23836
	testq	%rax, %rax	# D.23836
	je	.L2221	#,
.LBB97:
	.loc 1 6704 0 is_stmt 1
	movq	-112(%rbp), %rax	# p, tmp923
	movq	64(%rax), %rax	# p_583->fld[7].rtx, tmp924
	movq	%rax, -64(%rbp)	# tmp924, link
	jmp	.L2297	#
.L2325:
	.loc 1 6707 0
	movq	-64(%rbp), %rax	# link, tmp925
	movq	8(%rax), %rax	# link_23->fld[0].rtx, tmp926
	movq	%rax, -96(%rbp)	# tmp926, pat
	.loc 1 6708 0
	movq	-96(%rbp), %rax	# pat, tmp927
	movzwl	(%rax), %eax	# pat_772->code, D.23834
	cmpw	$49, %ax	#, D.23834
	jne	.L2298	#,
.LBB98:
	.loc 1 6710 0
	movq	-96(%rbp), %rax	# pat, tmp928
	movq	8(%rax), %rax	# pat_772->fld[0].rtx, tmp929
	movq	%rax, -24(%rbp)	# tmp929, dest
	.loc 1 6712 0
	movq	-24(%rbp), %rax	# dest, tmp930
	movzwl	(%rax), %eax	# dest_774->code, D.23834
	cmpw	$61, %ax	#, D.23834
	jne	.L2299	#,
.LBB99:
	.loc 1 6714 0
	movq	-24(%rbp), %rax	# dest, tmp931
	movl	8(%rax), %eax	# dest_774->fld[0].rtuint, D.23835
	movl	%eax, -120(%rbp)	# D.23835, xregno
	.loc 1 6716 0
	cmpl	$7, -120(%rbp)	#, xregno
	jle	.L2300	#,
	.loc 1 6716 0 is_stmt 0 discriminator 1
	cmpl	$15, -120(%rbp)	#, xregno
	jle	.L2301	#,
.L2300:
	.loc 1 6716 0 discriminator 2
	cmpl	$20, -120(%rbp)	#, xregno
	jle	.L2302	#,
	.loc 1 6716 0 discriminator 1
	cmpl	$28, -120(%rbp)	#, xregno
	jle	.L2301	#,
.L2302:
	.loc 1 6716 0 discriminator 2
	cmpl	$44, -120(%rbp)	#, xregno
	jle	.L2303	#,
	.loc 1 6716 0 discriminator 1
	cmpl	$52, -120(%rbp)	#, xregno
	jle	.L2301	#,
.L2303:
	.loc 1 6716 0 discriminator 2
	cmpl	$28, -120(%rbp)	#, xregno
	jle	.L2304	#,
	.loc 1 6716 0 discriminator 1
	cmpl	$36, -120(%rbp)	#, xregno
	jg	.L2304	#,
.L2301:
	movq	-24(%rbp), %rax	# dest, tmp932
	movzbl	2(%rax), %eax	# dest_774->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$5, %eax	#, D.23839
	je	.L2305	#,
	.loc 1 6716 0 discriminator 2
	movq	-24(%rbp), %rax	# dest, tmp934
	movzbl	2(%rax), %eax	# dest_774->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23839
	cmpl	$6, %eax	#, D.23839
	jne	.L2306	#,
.L2305:
	.loc 1 6716 0 discriminator 1
	movl	$2, %eax	#, iftmp.1399
	jmp	.L2307	#
.L2306:
	movl	$1, %eax	#, iftmp.1399
.L2307:
	.loc 1 6716 0 discriminator 3
	jmp	.L2308	#
.L2304:
	.loc 1 6716 0 discriminator 2
	movq	-24(%rbp), %rax	# dest, tmp936
	movzbl	2(%rax), %eax	# dest_774->mode, D.23837
	cmpb	$18, %al	#, D.23837
	jne	.L2309	#,
	.loc 1 6716 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1402
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2310	#,
	movl	$2, %eax	#, iftmp.1401
	jmp	.L2308	#
.L2310:
	.loc 1 6716 0 discriminator 2
	movl	$3, %eax	#, iftmp.1401
	jmp	.L2308	#
.L2309:
	movq	-24(%rbp), %rax	# dest, tmp937
	movzbl	2(%rax), %eax	# dest_774->mode, D.23837
	cmpb	$24, %al	#, D.23837
	jne	.L2313	#,
	.loc 1 6716 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1405
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2314	#,
	movl	$4, %eax	#, iftmp.1404
	jmp	.L2308	#
.L2314:
	.loc 1 6716 0 discriminator 2
	movl	$6, %eax	#, iftmp.1404
	jmp	.L2308	#
.L2313:
	movq	-24(%rbp), %rax	# dest, tmp938
	movzbl	2(%rax), %eax	# dest_774->mode, D.23837
	movzbl	%al, %eax	# D.23837, D.23838
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23837
	movzbl	%al, %edx	# D.23837, D.23838
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1407
	andl	$33554432, %eax	#, D.23838
	testl	%eax, %eax	# D.23838
	je	.L2317	#,
	.loc 1 6716 0 discriminator 1
	movl	$8, %eax	#, iftmp.1406
	jmp	.L2318	#
.L2317:
	.loc 1 6716 0 discriminator 2
	movl	$4, %eax	#, iftmp.1406
.L2318:
	.loc 1 6716 0 discriminator 3
	addl	%edx, %eax	# D.23838, D.23838
	subl	$1, %eax	#, D.23838
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1409
	andl	$33554432, %edx	#, D.23838
	testl	%edx, %edx	# D.23838
	je	.L2319	#,
	.loc 1 6716 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1408
	jmp	.L2320	#
.L2319:
	.loc 1 6716 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1408
.L2320:
	.loc 1 6716 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1408
.L2308:
	.loc 1 6715 0 is_stmt 1
	movl	%eax, -116(%rbp)	# iftmp.1398, xnregs
	.loc 1 6718 0
	movl	-144(%rbp), %eax	# nregs, tmp942
	movl	-200(%rbp), %edx	# regno, tmp943
	addl	%edx, %eax	# tmp943, D.23838
	cmpl	-120(%rbp), %eax	# xregno, D.23838
	jle	.L2321	#,
	.loc 1 6719 0
	movl	-116(%rbp), %eax	# xnregs, tmp944
	movl	-120(%rbp), %edx	# xregno, tmp945
	addl	%edx, %eax	# tmp945, D.23838
	cmpl	-200(%rbp), %eax	# regno, D.23838
	jle	.L2321	#,
	.loc 1 6720 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2321:
	.loc 1 6721 0
	movl	-140(%rbp), %eax	# valuenregs, tmp946
	movl	-196(%rbp), %edx	# valueno, tmp947
	addl	%edx, %eax	# tmp947, D.23838
	cmpl	-120(%rbp), %eax	# xregno, D.23838
	jle	.L2322	#,
	.loc 1 6722 0
	movl	-116(%rbp), %eax	# xnregs, tmp948
	movl	-120(%rbp), %edx	# xregno, tmp949
	addl	%edx, %eax	# tmp949, D.23838
	cmpl	-196(%rbp), %eax	# valueno, D.23838
	jle	.L2322	#,
	.loc 1 6723 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2322:
	.loc 1 6724 0
	cmpl	$0, -184(%rbp)	#, goal_mem_addr_varies
	je	.L2323	#,
	.loc 1 6725 0
	movq	-216(%rbp), %rdx	# goal, tmp950
	movq	-24(%rbp), %rax	# dest, tmp951
	movq	%rdx, %rsi	# tmp950,
	movq	%rax, %rdi	# tmp951,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.23838
	je	.L2323	#,
	.loc 1 6727 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2323:
.LBE99:
	jmp	.L2298	#
.L2299:
	.loc 1 6730 0
	cmpl	$0, -192(%rbp)	#, goal_mem
	je	.L2324	#,
	.loc 1 6730 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# dest, tmp952
	movzwl	(%rax), %eax	# dest_774->code, D.23834
	cmpw	$66, %ax	#, D.23834
	jne	.L2324	#,
	.loc 1 6731 0 is_stmt 1
	movq	-24(%rbp), %rax	# dest, tmp953
	movzbl	2(%rax), %eax	# dest_774->mode, D.23837
	movzbl	%al, %edx	# D.23837, D.23845
	movq	-24(%rbp), %rax	# dest, tmp954
	movl	%edx, %esi	# D.23845,
	movq	%rax, %rdi	# tmp954,
	call	push_operand	#
	testl	%eax, %eax	# D.23838
	jne	.L2324	#,
	.loc 1 6732 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2324:
	.loc 1 6733 0
	cmpl	$0, -180(%rbp)	#, need_stable_sp
	je	.L2298	#,
	.loc 1 6734 0
	movq	-24(%rbp), %rax	# dest, tmp955
	movzbl	2(%rax), %eax	# dest_774->mode, D.23837
	movzbl	%al, %edx	# D.23837, D.23845
	movq	-24(%rbp), %rax	# dest, tmp956
	movl	%edx, %esi	# D.23845,
	movq	%rax, %rdi	# tmp956,
	call	push_operand	#
	testl	%eax, %eax	# D.23838
	je	.L2298	#,
	.loc 1 6735 0
	movl	$0, %eax	#, D.23833
	jmp	.L2008	#
.L2298:
.LBE98:
	.loc 1 6705 0
	movq	-64(%rbp), %rax	# link, tmp957
	movq	16(%rax), %rax	# link_23->fld[1].rtx, tmp958
	movq	%rax, -64(%rbp)	# tmp958, link
.L2297:
	.loc 1 6704 0 discriminator 1
	movq	-64(%rbp), %rax	# link, tmp959
	movq	16(%rax), %rax	# link_23->fld[1].rtx, D.23836
	testq	%rax, %rax	# D.23836
	jne	.L2325	#,
.L2221:
.LBE97:
	.loc 1 6765 0
	jmp	.L2326	#
.L2008:
	.loc 1 6766 0
	addq	$248, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE41:
	.size	find_equiv_reg, .-find_equiv_reg
	.type	find_inc_amount, @function
find_inc_amount:
.LFB42:
	.loc 1 6775 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# x, x
	movq	%rsi, -64(%rbp)	# inced, inced
	.loc 1 6776 0
	movq	-56(%rbp), %rax	# x, tmp99
	movzwl	(%rax), %eax	# x_4(D)->code, D.23848
	movzwl	%ax, %eax	# D.23848, tmp100
	movl	%eax, -28(%rbp)	# tmp100, code
	.loc 1 6780 0
	cmpl	$66, -28(%rbp)	#, code
	jne	.L2331	#,
.LBB100:
	.loc 1 6782 0
	movq	-56(%rbp), %rax	# x, tmp101
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, tmp102
	movq	%rax, -16(%rbp)	# tmp102, addr
	.loc 1 6783 0
	movq	-16(%rbp), %rax	# addr, tmp103
	movzwl	(%rax), %eax	# addr_7->code, D.23848
	cmpw	$96, %ax	#, D.23848
	je	.L2332	#,
	.loc 1 6784 0
	movq	-16(%rbp), %rax	# addr, tmp104
	movzwl	(%rax), %eax	# addr_7->code, D.23848
	cmpw	$98, %ax	#, D.23848
	je	.L2332	#,
	.loc 1 6785 0
	movq	-16(%rbp), %rax	# addr, tmp105
	movzwl	(%rax), %eax	# addr_7->code, D.23848
	cmpw	$97, %ax	#, D.23848
	je	.L2332	#,
	.loc 1 6786 0
	movq	-16(%rbp), %rax	# addr, tmp106
	movzwl	(%rax), %eax	# addr_7->code, D.23848
	cmpw	$99, %ax	#, D.23848
	jne	.L2333	#,
.L2332:
	.loc 1 6787 0
	movq	-16(%rbp), %rax	# addr, tmp107
	movq	8(%rax), %rax	# addr_7->fld[0].rtx, D.23849
	cmpq	-64(%rbp), %rax	# inced, D.23849
	jne	.L2333	#,
	.loc 1 6788 0
	movq	-56(%rbp), %rax	# x, tmp108
	movzbl	2(%rax), %eax	# x_4(D)->mode, D.23850
	movzbl	%al, %eax	# D.23850, D.23847
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23850
	movzbl	%al, %eax	# D.23850, D.23847
	jmp	.L2334	#
.L2333:
	.loc 1 6789 0
	movq	-16(%rbp), %rax	# addr, tmp110
	movzwl	(%rax), %eax	# addr_7->code, D.23848
	cmpw	$100, %ax	#, D.23848
	je	.L2335	#,
	.loc 1 6790 0
	movq	-16(%rbp), %rax	# addr, tmp111
	movzwl	(%rax), %eax	# addr_7->code, D.23848
	cmpw	$101, %ax	#, D.23848
	jne	.L2331	#,
.L2335:
	.loc 1 6791 0
	movq	-16(%rbp), %rax	# addr, tmp112
	movq	16(%rax), %rax	# addr_7->fld[1].rtx, D.23849
	movzwl	(%rax), %eax	# _20->code, D.23848
	cmpw	$75, %ax	#, D.23848
	jne	.L2331	#,
	.loc 1 6792 0
	movq	-16(%rbp), %rax	# addr, tmp113
	movq	8(%rax), %rdx	# addr_7->fld[0].rtx, D.23849
	movq	-16(%rbp), %rax	# addr, tmp114
	movq	16(%rax), %rax	# addr_7->fld[1].rtx, D.23849
	movq	8(%rax), %rax	# _23->fld[0].rtx, D.23849
	cmpq	%rax, %rdx	# D.23849, D.23849
	jne	.L2331	#,
	.loc 1 6793 0
	movq	-16(%rbp), %rax	# addr, tmp115
	movq	8(%rax), %rax	# addr_7->fld[0].rtx, D.23849
	cmpq	-64(%rbp), %rax	# inced, D.23849
	jne	.L2331	#,
	.loc 1 6794 0
	movq	-16(%rbp), %rax	# addr, tmp116
	movq	16(%rax), %rax	# addr_7->fld[1].rtx, D.23849
	movq	16(%rax), %rax	# _26->fld[1].rtx, D.23849
	movzwl	(%rax), %eax	# _27->code, D.23848
	cmpw	$54, %ax	#, D.23848
	jne	.L2331	#,
	.loc 1 6796 0
	movq	-16(%rbp), %rax	# addr, tmp117
	movq	16(%rax), %rax	# addr_7->fld[1].rtx, D.23849
	movq	16(%rax), %rax	# _29->fld[1].rtx, D.23849
	movq	8(%rax), %rax	# _30->fld[0].rtwint, D.23851
	movl	%eax, -36(%rbp)	# D.23851, i
	.loc 1 6797 0
	movl	-36(%rbp), %eax	# i, tmp119
	cltd
	movl	%edx, %eax	# tmp118, D.23847
	xorl	-36(%rbp), %eax	# i, D.23847
	subl	%edx, %eax	# tmp118, D.23847
	jmp	.L2334	#
.L2331:
.LBE100:
	.loc 1 6801 0
	movl	-28(%rbp), %eax	# code, code.1410
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp121
	movq	%rax, -8(%rbp)	# tmp121, fmt
	.loc 1 6802 0
	movl	-28(%rbp), %eax	# code, code.1411
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.23850
	movzbl	%al, %eax	# D.23850, D.23847
	subl	$1, %eax	#, tmp123
	movl	%eax, -36(%rbp)	# tmp123, i
	jmp	.L2336	#
.L2342:
	.loc 1 6804 0
	movl	-36(%rbp), %eax	# i, tmp124
	movslq	%eax, %rdx	# tmp124, D.23852
	movq	-8(%rbp), %rax	# fmt, tmp125
	addq	%rdx, %rax	# D.23852, D.23853
	movzbl	(%rax), %eax	# *_41, D.23854
	cmpb	$101, %al	#, D.23854
	jne	.L2337	#,
.LBB101:
	.loc 1 6806 0
	movq	-56(%rbp), %rax	# x, tmp126
	movl	-36(%rbp), %edx	# i, tmp128
	movslq	%edx, %rdx	# tmp128, tmp127
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtx, D.23849
	movq	-64(%rbp), %rdx	# inced, tmp129
	movq	%rdx, %rsi	# tmp129,
	movq	%rax, %rdi	# D.23849,
	call	find_inc_amount	#
	movl	%eax, -24(%rbp)	# tmp130, tem
	.loc 1 6807 0
	cmpl	$0, -24(%rbp)	#, tem
	je	.L2337	#,
	.loc 1 6808 0
	movl	-24(%rbp), %eax	# tem, D.23847
	jmp	.L2334	#
.L2337:
.LBE101:
	.loc 1 6810 0
	movl	-36(%rbp), %eax	# i, tmp131
	movslq	%eax, %rdx	# tmp131, D.23852
	movq	-8(%rbp), %rax	# fmt, tmp132
	addq	%rdx, %rax	# D.23852, D.23853
	movzbl	(%rax), %eax	# *_47, D.23854
	cmpb	$69, %al	#, D.23854
	jne	.L2338	#,
.LBB102:
	.loc 1 6813 0
	movq	-56(%rbp), %rax	# x, tmp133
	movl	-36(%rbp), %edx	# i, tmp135
	movslq	%edx, %rdx	# tmp135, tmp134
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtvec, D.23855
	movl	(%rax), %eax	# _49->num_elem, D.23847
	subl	$1, %eax	#, tmp136
	movl	%eax, -32(%rbp)	# tmp136, j
	jmp	.L2339	#
.L2341:
.LBB103:
	.loc 1 6815 0
	movq	-56(%rbp), %rax	# x, tmp137
	movl	-36(%rbp), %edx	# i, tmp139
	movslq	%edx, %rdx	# tmp139, tmp138
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtvec, D.23855
	movl	-32(%rbp), %edx	# j, tmp141
	movslq	%edx, %rdx	# tmp141, tmp140
	movq	8(%rax,%rdx,8), %rax	# _52->elem, D.23849
	movq	-64(%rbp), %rdx	# inced, tmp142
	movq	%rdx, %rsi	# tmp142,
	movq	%rax, %rdi	# D.23849,
	call	find_inc_amount	#
	movl	%eax, -20(%rbp)	# tmp143, tem
	.loc 1 6816 0
	cmpl	$0, -20(%rbp)	#, tem
	je	.L2340	#,
	.loc 1 6817 0
	movl	-20(%rbp), %eax	# tem, D.23847
	jmp	.L2334	#
.L2340:
.LBE103:
	.loc 1 6813 0
	subl	$1, -32(%rbp)	#, j
.L2339:
	.loc 1 6813 0 is_stmt 0 discriminator 1
	cmpl	$0, -32(%rbp)	#, j
	jns	.L2341	#,
.L2338:
.LBE102:
	.loc 1 6802 0 is_stmt 1
	subl	$1, -36(%rbp)	#, i
.L2336:
	.loc 1 6802 0 is_stmt 0 discriminator 1
	cmpl	$0, -36(%rbp)	#, i
	jns	.L2342	#,
	.loc 1 6822 0 is_stmt 1
	movl	$0, %eax	#, D.23847
.L2334:
	.loc 1 6823 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE42:
	.size	find_inc_amount, .-find_inc_amount
	.globl	regno_clobbered_p
	.type	regno_clobbered_p, @function
regno_clobbered_p:
.LFB43:
	.loc 1 6834 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	.cfi_offset 3, -24
	movl	%edi, -44(%rbp)	# regno, regno
	movq	%rsi, -56(%rbp)	# insn, insn
	movl	%edx, -48(%rbp)	# mode, mode
	movl	%ecx, -60(%rbp)	# sets, sets
	.loc 1 6835 0
	cmpl	$7, -44(%rbp)	#, regno
	jbe	.L2344	#,
	.loc 1 6835 0 is_stmt 0 discriminator 1
	cmpl	$15, -44(%rbp)	#, regno
	jbe	.L2345	#,
.L2344:
	.loc 1 6835 0 discriminator 2
	cmpl	$20, -44(%rbp)	#, regno
	jbe	.L2346	#,
	.loc 1 6835 0 discriminator 1
	cmpl	$28, -44(%rbp)	#, regno
	jbe	.L2345	#,
.L2346:
	.loc 1 6835 0 discriminator 2
	cmpl	$44, -44(%rbp)	#, regno
	jbe	.L2347	#,
	.loc 1 6835 0 discriminator 1
	cmpl	$52, -44(%rbp)	#, regno
	jbe	.L2345	#,
.L2347:
	.loc 1 6835 0 discriminator 2
	cmpl	$28, -44(%rbp)	#, regno
	jbe	.L2348	#,
	.loc 1 6835 0 discriminator 1
	cmpl	$36, -44(%rbp)	#, regno
	ja	.L2348	#,
.L2345:
	movl	-48(%rbp), %eax	# mode, mode.1414
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23858
	cmpl	$5, %eax	#, D.23858
	je	.L2349	#,
	.loc 1 6835 0 discriminator 4
	movl	-48(%rbp), %eax	# mode, mode.1415
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.23858
	cmpl	$6, %eax	#, D.23858
	jne	.L2350	#,
.L2349:
	.loc 1 6835 0 discriminator 3
	movl	$2, %eax	#, iftmp.1413
	jmp	.L2352	#
.L2350:
	.loc 1 6835 0 discriminator 1
	movl	$1, %eax	#, iftmp.1413
	jmp	.L2352	#
.L2348:
	.loc 1 6835 0 discriminator 2
	cmpl	$18, -48(%rbp)	#, mode
	jne	.L2353	#,
	.loc 1 6835 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1418
	andl	$33554432, %eax	#, D.23856
	testl	%eax, %eax	# D.23856
	je	.L2354	#,
	.loc 1 6835 0 discriminator 9
	movl	$2, %eax	#, iftmp.1417
	jmp	.L2352	#
.L2354:
	.loc 1 6835 0 discriminator 10
	movl	$3, %eax	#, iftmp.1417
	jmp	.L2352	#
.L2353:
	.loc 1 6835 0 discriminator 8
	cmpl	$24, -48(%rbp)	#, mode
	jne	.L2357	#,
	.loc 1 6835 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1421
	andl	$33554432, %eax	#, D.23856
	testl	%eax, %eax	# D.23856
	je	.L2358	#,
	.loc 1 6835 0 discriminator 13
	movl	$4, %eax	#, iftmp.1420
	jmp	.L2352	#
.L2358:
	.loc 1 6835 0 discriminator 14
	movl	$6, %eax	#, iftmp.1420
	jmp	.L2352	#
.L2357:
	.loc 1 6835 0 discriminator 12
	movl	-48(%rbp), %eax	# mode, mode.1422
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23857
	movzbl	%al, %edx	# D.23857, D.23856
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1424
	andl	$33554432, %eax	#, D.23856
	testl	%eax, %eax	# D.23856
	je	.L2361	#,
	.loc 1 6835 0 discriminator 1
	movl	$8, %eax	#, iftmp.1423
	jmp	.L2362	#
.L2361:
	.loc 1 6835 0 discriminator 2
	movl	$4, %eax	#, iftmp.1423
.L2362:
	.loc 1 6835 0 discriminator 3
	addl	%edx, %eax	# D.23856, D.23856
	subl	$1, %eax	#, D.23856
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1426
	andl	$33554432, %edx	#, D.23856
	testl	%edx, %edx	# D.23856
	je	.L2363	#,
	.loc 1 6835 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1425
	jmp	.L2364	#
.L2363:
	.loc 1 6835 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1425
.L2364:
	.loc 1 6835 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1425
.L2352:
	.loc 1 6835 0 discriminator 6
	movl	%eax, -32(%rbp)	# iftmp.1412, nregs
	.loc 1 6836 0 is_stmt 1 discriminator 6
	movl	-32(%rbp), %eax	# nregs, tmp119
	movl	-44(%rbp), %edx	# regno, tmp120
	addl	%edx, %eax	# tmp120, tmp118
	movl	%eax, -28(%rbp)	# tmp118, endregno
	.loc 1 6838 0 discriminator 6
	movq	-56(%rbp), %rax	# insn, tmp121
	movq	32(%rax), %rax	# insn_50(D)->fld[3].rtx, D.23859
	movzwl	(%rax), %eax	# _51->code, D.23860
	cmpw	$49, %ax	#, D.23860
	je	.L2365	#,
	.loc 1 6839 0
	cmpl	$0, -60(%rbp)	#, sets
	je	.L2366	#,
	.loc 1 6839 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# insn, tmp122
	movq	32(%rax), %rax	# insn_50(D)->fld[3].rtx, D.23859
	movzwl	(%rax), %eax	# _54->code, D.23860
	cmpw	$47, %ax	#, D.23860
	jne	.L2366	#,
.L2365:
	.loc 1 6840 0 is_stmt 1
	movq	-56(%rbp), %rax	# insn, tmp123
	movq	32(%rax), %rax	# insn_50(D)->fld[3].rtx, D.23859
	movq	8(%rax), %rax	# _56->fld[0].rtx, D.23859
	movzwl	(%rax), %eax	# _57->code, D.23860
	cmpw	$61, %ax	#, D.23860
	jne	.L2366	#,
.LBB104:
	.loc 1 6842 0
	movq	-56(%rbp), %rax	# insn, tmp124
	movq	32(%rax), %rax	# insn_50(D)->fld[3].rtx, D.23859
	movq	8(%rax), %rax	# _59->fld[0].rtx, D.23859
	movl	8(%rax), %eax	# _60->fld[0].rtuint, tmp125
	movl	%eax, -24(%rbp)	# tmp125, test
	.loc 1 6844 0
	movl	-24(%rbp), %eax	# test, tmp126
	cmpl	-44(%rbp), %eax	# regno, tmp126
	jb	.L2367	#,
	.loc 1 6844 0 is_stmt 0 discriminator 1
	movl	-24(%rbp), %eax	# test, tmp127
	cmpl	-28(%rbp), %eax	# endregno, tmp127
	jae	.L2367	#,
	.loc 1 6844 0 discriminator 3
	movl	$1, %eax	#, iftmp.1427
	jmp	.L2368	#
.L2367:
	.loc 1 6844 0 discriminator 2
	movl	$0, %eax	#, iftmp.1427
.L2368:
	.loc 1 6844 0 discriminator 4
	jmp	.L2369	#
.L2366:
.LBE104:
	.loc 1 6847 0 is_stmt 1
	movq	-56(%rbp), %rax	# insn, tmp128
	movq	32(%rax), %rax	# insn_50(D)->fld[3].rtx, D.23859
	movzwl	(%rax), %eax	# _65->code, D.23860
	cmpw	$39, %ax	#, D.23860
	jne	.L2370	#,
.LBB105:
	.loc 1 6849 0
	movq	-56(%rbp), %rax	# insn, tmp129
	movq	32(%rax), %rax	# insn_50(D)->fld[3].rtx, D.23859
	movq	8(%rax), %rax	# _67->fld[0].rtvec, D.23861
	movl	(%rax), %eax	# _68->num_elem, D.23856
	subl	$1, %eax	#, tmp130
	movl	%eax, -36(%rbp)	# tmp130, i
	.loc 1 6851 0
	jmp	.L2371	#
.L2374:
.LBB106:
	.loc 1 6853 0
	movq	-56(%rbp), %rax	# insn, tmp131
	movq	32(%rax), %rax	# insn_50(D)->fld[3].rtx, D.23859
	movq	8(%rax), %rax	# _71->fld[0].rtvec, D.23861
	movl	-36(%rbp), %edx	# i, tmp133
	movslq	%edx, %rdx	# tmp133, tmp132
	movq	8(%rax,%rdx,8), %rax	# _72->elem, tmp134
	movq	%rax, -16(%rbp)	# tmp134, elt
	.loc 1 6854 0
	movq	-16(%rbp), %rax	# elt, tmp135
	movzwl	(%rax), %eax	# elt_73->code, D.23860
	cmpw	$49, %ax	#, D.23860
	je	.L2372	#,
	.loc 1 6855 0
	cmpl	$0, -60(%rbp)	#, sets
	je	.L2373	#,
	.loc 1 6855 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# insn, tmp136
	movq	32(%rax), %rax	# insn_50(D)->fld[3].rtx, D.23859
	movzwl	(%rax), %eax	# _75->code, D.23860
	cmpw	$47, %ax	#, D.23860
	jne	.L2373	#,
.L2372:
	.loc 1 6856 0 is_stmt 1
	movq	-16(%rbp), %rax	# elt, tmp137
	movq	8(%rax), %rax	# elt_73->fld[0].rtx, D.23859
	movzwl	(%rax), %eax	# _77->code, D.23860
	cmpw	$61, %ax	#, D.23860
	jne	.L2373	#,
.LBB107:
	.loc 1 6858 0
	movq	-16(%rbp), %rax	# elt, tmp138
	movq	8(%rax), %rax	# elt_73->fld[0].rtx, D.23859
	movl	8(%rax), %eax	# _79->fld[0].rtuint, tmp139
	movl	%eax, -20(%rbp)	# tmp139, test
	.loc 1 6860 0
	movl	-20(%rbp), %eax	# test, tmp140
	cmpl	-44(%rbp), %eax	# regno, tmp140
	jb	.L2373	#,
	.loc 1 6860 0 is_stmt 0 discriminator 1
	movl	-20(%rbp), %eax	# test, tmp141
	cmpl	-28(%rbp), %eax	# endregno, tmp141
	jae	.L2373	#,
	.loc 1 6861 0 is_stmt 1
	movl	$1, %eax	#, D.23856
	jmp	.L2369	#
.L2373:
.LBE107:
.LBE106:
	.loc 1 6851 0
	subl	$1, -36(%rbp)	#, i
.L2371:
	.loc 1 6851 0 is_stmt 0 discriminator 1
	cmpl	$0, -36(%rbp)	#, i
	jns	.L2374	#,
.L2370:
.LBE105:
	.loc 1 6866 0 is_stmt 1
	movl	$0, %eax	#, D.23856
.L2369:
	.loc 1 6867 0
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE43:
	.size	regno_clobbered_p, .-regno_clobbered_p
	.section	.rodata
.LC6:
	.string	"RELOAD_FOR_INPUT"
.LC7:
	.string	"RELOAD_FOR_OUTPUT"
.LC8:
	.string	"RELOAD_FOR_INSN"
.LC9:
	.string	"RELOAD_FOR_INPUT_ADDRESS"
.LC10:
	.string	"RELOAD_FOR_INPADDR_ADDRESS"
.LC11:
	.string	"RELOAD_FOR_OUTPUT_ADDRESS"
.LC12:
	.string	"RELOAD_FOR_OUTADDR_ADDRESS"
.LC13:
	.string	"RELOAD_FOR_OPERAND_ADDRESS"
.LC14:
	.string	"RELOAD_FOR_OPADDR_ADDR"
.LC15:
	.string	"RELOAD_OTHER"
.LC16:
	.string	"RELOAD_FOR_OTHER_ADDRESS"
	.align 32
	.type	reload_when_needed_name, @object
	.size	reload_when_needed_name, 88
reload_when_needed_name:
	.quad	.LC6
	.quad	.LC7
	.quad	.LC8
	.quad	.LC9
	.quad	.LC10
	.quad	.LC11
	.quad	.LC12
	.quad	.LC13
	.quad	.LC14
	.quad	.LC15
	.quad	.LC16
.LC17:
	.string	"NO_REGS"
.LC18:
	.string	"AREG"
.LC19:
	.string	"DREG"
.LC20:
	.string	"CREG"
.LC21:
	.string	"BREG"
.LC22:
	.string	"SIREG"
.LC23:
	.string	"DIREG"
.LC24:
	.string	"AD_REGS"
.LC25:
	.string	"Q_REGS"
.LC26:
	.string	"NON_Q_REGS"
.LC27:
	.string	"INDEX_REGS"
.LC28:
	.string	"LEGACY_REGS"
.LC29:
	.string	"GENERAL_REGS"
.LC30:
	.string	"FP_TOP_REG"
.LC31:
	.string	"FP_SECOND_REG"
.LC32:
	.string	"FLOAT_REGS"
.LC33:
	.string	"SSE_REGS"
.LC34:
	.string	"MMX_REGS"
.LC35:
	.string	"FP_TOP_SSE_REGS"
.LC36:
	.string	"FP_SECOND_SSE_REGS"
.LC37:
	.string	"FLOAT_SSE_REGS"
.LC38:
	.string	"FLOAT_INT_REGS"
.LC39:
	.string	"INT_SSE_REGS"
.LC40:
	.string	"FLOAT_INT_SSE_REGS"
.LC41:
	.string	"ALL_REGS"
	.align 32
	.type	reg_class_names, @object
	.size	reg_class_names, 200
reg_class_names:
	.quad	.LC17
	.quad	.LC18
	.quad	.LC19
	.quad	.LC20
	.quad	.LC21
	.quad	.LC22
	.quad	.LC23
	.quad	.LC24
	.quad	.LC25
	.quad	.LC26
	.quad	.LC27
	.quad	.LC28
	.quad	.LC29
	.quad	.LC30
	.quad	.LC31
	.quad	.LC32
	.quad	.LC33
	.quad	.LC34
	.quad	.LC35
	.quad	.LC36
	.quad	.LC37
	.quad	.LC38
	.quad	.LC39
	.quad	.LC40
	.quad	.LC41
.LC42:
	.string	"Reload %d: "
.LC43:
	.string	"reload_in (%s) = "
.LC44:
	.string	"\n\t"
.LC45:
	.string	"reload_out (%s) = "
.LC46:
	.string	"%s, "
.LC47:
	.string	"%s (opnum = %d)"
.LC48:
	.string	", optional"
.LC49:
	.string	", nongroup"
.LC50:
	.string	", inc by %d"
.LC51:
	.string	", can't combine"
.LC52:
	.string	", secondary_reload_p"
.LC53:
	.string	"\n\treload_in_reg: "
.LC54:
	.string	"\n\treload_out_reg: "
.LC55:
	.string	"\n\treload_reg_rtx: "
.LC56:
	.string	"%ssecondary_in_reload = %d"
.LC57:
	.string	", "
.LC58:
	.string	"%ssecondary_out_reload = %d\n"
.LC59:
	.string	"%ssecondary_in_icode = %s"
.LC60:
	.string	"%ssecondary_out_icode = %s"
	.text
	.globl	debug_reload_to_stream
	.type	debug_reload_to_stream, @function
debug_reload_to_stream:
.LFB44:
	.loc 1 6891 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# f, f
	.loc 1 6895 0
	cmpq	$0, -24(%rbp)	#, f
	jne	.L2376	#,
	.loc 1 6896 0
	movq	stderr(%rip), %rax	# stderr, tmp99
	movq	%rax, -24(%rbp)	# tmp99, f
.L2376:
	.loc 1 6897 0
	movl	$0, -12(%rbp)	#, r
	jmp	.L2377	#
.L2392:
	.loc 1 6899 0
	movl	-12(%rbp), %edx	# r, tmp100
	movq	-24(%rbp), %rax	# f, tmp101
	movl	$.LC42, %esi	#,
	movq	%rax, %rdi	# tmp101,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 6901 0
	movl	-12(%rbp), %eax	# r, tmp103
	movslq	%eax, %rdx	# tmp103, tmp102
	movq	%rdx, %rax	# tmp102, tmp104
	addq	%rax, %rax	# tmp104
	addq	%rdx, %rax	# tmp102, tmp104
	salq	$2, %rax	#, tmp104
	addq	%rdx, %rax	# tmp102, tmp104
	salq	$3, %rax	#, tmp105
	addq	$rld, %rax	#, tmp106
	movq	(%rax), %rax	# rld[r_2].in, D.23898
	testq	%rax, %rax	# D.23898
	je	.L2378	#,
	.loc 1 6904 0
	movl	-12(%rbp), %eax	# r, tmp108
	movslq	%eax, %rdx	# tmp108, tmp107
	movq	%rdx, %rax	# tmp107, tmp109
	addq	%rax, %rax	# tmp109
	addq	%rdx, %rax	# tmp107, tmp109
	salq	$2, %rax	#, tmp109
	addq	%rdx, %rax	# tmp107, tmp109
	salq	$3, %rax	#, tmp110
	addq	$rld+16, %rax	#, tmp111
	movl	4(%rax), %eax	# rld[r_2].inmode, D.23899
	.loc 1 6903 0
	cltq
	movq	mode_name(,%rax,8), %rdx	# mode_name, D.23901
	movq	-24(%rbp), %rax	# f, tmp113
	movl	$.LC43, %esi	#,
	movq	%rax, %rdi	# tmp113,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 6905 0
	movl	-12(%rbp), %eax	# r, tmp115
	movslq	%eax, %rdx	# tmp115, tmp114
	movq	%rdx, %rax	# tmp114, tmp116
	addq	%rax, %rax	# tmp116
	addq	%rdx, %rax	# tmp114, tmp116
	salq	$2, %rax	#, tmp116
	addq	%rdx, %rax	# tmp114, tmp116
	salq	$3, %rax	#, tmp117
	addq	$rld, %rax	#, tmp118
	movq	(%rax), %rcx	# rld[r_2].in, D.23898
	movq	-24(%rbp), %rax	# f, tmp119
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.23898,
	movq	%rax, %rdi	# tmp119,
	call	print_inline_rtx	#
	.loc 1 6906 0
	movq	-24(%rbp), %rax	# f, tmp120
	movq	%rax, %rcx	# tmp120,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC44, %edi	#,
	call	fwrite	#
.L2378:
	.loc 1 6909 0
	movl	-12(%rbp), %eax	# r, tmp122
	movslq	%eax, %rdx	# tmp122, tmp121
	movq	%rdx, %rax	# tmp121, tmp123
	addq	%rax, %rax	# tmp123
	addq	%rdx, %rax	# tmp121, tmp123
	salq	$2, %rax	#, tmp123
	addq	%rdx, %rax	# tmp121, tmp123
	salq	$3, %rax	#, tmp124
	addq	$rld, %rax	#, tmp125
	movq	8(%rax), %rax	# rld[r_2].out, D.23898
	testq	%rax, %rax	# D.23898
	je	.L2379	#,
	.loc 1 6912 0
	movl	-12(%rbp), %eax	# r, tmp127
	movslq	%eax, %rdx	# tmp127, tmp126
	movq	%rdx, %rax	# tmp126, tmp128
	addq	%rax, %rax	# tmp128
	addq	%rdx, %rax	# tmp126, tmp128
	salq	$2, %rax	#, tmp128
	addq	%rdx, %rax	# tmp126, tmp128
	salq	$3, %rax	#, tmp129
	addq	$rld+16, %rax	#, tmp130
	movl	8(%rax), %eax	# rld[r_2].outmode, D.23899
	.loc 1 6911 0
	cltq
	movq	mode_name(,%rax,8), %rdx	# mode_name, D.23901
	movq	-24(%rbp), %rax	# f, tmp132
	movl	$.LC45, %esi	#,
	movq	%rax, %rdi	# tmp132,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 6913 0
	movl	-12(%rbp), %eax	# r, tmp134
	movslq	%eax, %rdx	# tmp134, tmp133
	movq	%rdx, %rax	# tmp133, tmp135
	addq	%rax, %rax	# tmp135
	addq	%rdx, %rax	# tmp133, tmp135
	salq	$2, %rax	#, tmp135
	addq	%rdx, %rax	# tmp133, tmp135
	salq	$3, %rax	#, tmp136
	addq	$rld, %rax	#, tmp137
	movq	8(%rax), %rcx	# rld[r_2].out, D.23898
	movq	-24(%rbp), %rax	# f, tmp138
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.23898,
	movq	%rax, %rdi	# tmp138,
	call	print_inline_rtx	#
	.loc 1 6914 0
	movq	-24(%rbp), %rax	# f, tmp139
	movq	%rax, %rcx	# tmp139,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC44, %edi	#,
	call	fwrite	#
.L2379:
	.loc 1 6917 0
	movl	-12(%rbp), %eax	# r, tmp141
	movslq	%eax, %rdx	# tmp141, tmp140
	movq	%rdx, %rax	# tmp140, tmp142
	addq	%rax, %rax	# tmp142
	addq	%rdx, %rax	# tmp140, tmp142
	salq	$2, %rax	#, tmp142
	addq	%rdx, %rax	# tmp140, tmp142
	salq	$3, %rax	#, tmp143
	addq	$rld+16, %rax	#, tmp144
	movl	(%rax), %eax	# rld[r_2].class, D.23902
	cltq
	movq	reg_class_names(,%rax,8), %rdx	# reg_class_names, D.23901
	movq	-24(%rbp), %rax	# f, tmp146
	movl	$.LC46, %esi	#,
	movq	%rax, %rdi	# tmp146,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 6919 0
	movl	-12(%rbp), %eax	# r, tmp148
	movslq	%eax, %rdx	# tmp148, tmp147
	movq	%rdx, %rax	# tmp147, tmp149
	addq	%rax, %rax	# tmp149
	addq	%rdx, %rax	# tmp147, tmp149
	salq	$2, %rax	#, tmp149
	addq	%rdx, %rax	# tmp147, tmp149
	salq	$3, %rax	#, tmp150
	addq	$rld+64, %rax	#, tmp151
	movl	8(%rax), %ecx	# rld[r_2].opnum, D.23900
	.loc 1 6920 0
	movl	-12(%rbp), %eax	# r, tmp153
	movslq	%eax, %rdx	# tmp153, tmp152
	movq	%rdx, %rax	# tmp152, tmp154
	addq	%rax, %rax	# tmp154
	addq	%rdx, %rax	# tmp152, tmp154
	salq	$2, %rax	#, tmp154
	addq	%rdx, %rax	# tmp152, tmp154
	salq	$3, %rax	#, tmp155
	addq	$rld+80, %rax	#, tmp156
	movl	12(%rax), %eax	# rld[r_2].when_needed, D.23903
	.loc 1 6919 0
	cltq
	movq	reload_when_needed_name(,%rax,8), %rdx	# reload_when_needed_name, D.23901
	movq	-24(%rbp), %rax	# f, tmp158
	movl	$.LC47, %esi	#,
	movq	%rax, %rdi	# tmp158,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 6923 0
	movl	-12(%rbp), %eax	# r, tmp160
	movslq	%eax, %rdx	# tmp160, tmp159
	movq	%rdx, %rax	# tmp159, tmp161
	addq	%rax, %rax	# tmp161
	addq	%rdx, %rax	# tmp159, tmp161
	salq	$2, %rax	#, tmp161
	addq	%rdx, %rax	# tmp159, tmp161
	salq	$3, %rax	#, tmp162
	addq	$rld+96, %rax	#, tmp163
	movzbl	(%rax), %eax	#, tmp166
	andl	$1, %eax	#, D.23904
	testb	%al, %al	# D.23904
	je	.L2380	#,
	.loc 1 6924 0
	movq	-24(%rbp), %rax	# f, tmp167
	movq	%rax, %rcx	# tmp167,
	movl	$10, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC48, %edi	#,
	call	fwrite	#
.L2380:
	.loc 1 6926 0
	movl	-12(%rbp), %eax	# r, tmp169
	movslq	%eax, %rdx	# tmp169, tmp168
	movq	%rdx, %rax	# tmp168, tmp170
	addq	%rax, %rax	# tmp170
	addq	%rdx, %rax	# tmp168, tmp170
	salq	$2, %rax	#, tmp170
	addq	%rdx, %rax	# tmp168, tmp170
	salq	$3, %rax	#, tmp171
	addq	$rld+96, %rax	#, tmp172
	movzbl	(%rax), %eax	#, tmp175
	shrb	$3, %al	#, D.23904
	andl	$1, %eax	#, D.23904
	testb	%al, %al	# D.23904
	je	.L2381	#,
	.loc 1 6927 0
	movq	-24(%rbp), %rax	# f, tmp176
	movq	%rax, %rcx	# tmp176,
	movl	$10, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC49, %edi	#,
	call	fwrite	#
.L2381:
	.loc 1 6929 0
	movl	-12(%rbp), %eax	# r, tmp178
	movslq	%eax, %rdx	# tmp178, tmp177
	movq	%rdx, %rax	# tmp177, tmp179
	addq	%rax, %rax	# tmp179
	addq	%rdx, %rax	# tmp177, tmp179
	salq	$2, %rax	#, tmp179
	addq	%rdx, %rax	# tmp177, tmp179
	salq	$3, %rax	#, tmp180
	addq	$rld+32, %rax	#, tmp181
	movl	4(%rax), %eax	# rld[r_2].inc, D.23900
	testl	%eax, %eax	# D.23900
	je	.L2382	#,
	.loc 1 6930 0
	movl	-12(%rbp), %eax	# r, tmp183
	movslq	%eax, %rdx	# tmp183, tmp182
	movq	%rdx, %rax	# tmp182, tmp184
	addq	%rax, %rax	# tmp184
	addq	%rdx, %rax	# tmp182, tmp184
	salq	$2, %rax	#, tmp184
	addq	%rdx, %rax	# tmp182, tmp184
	salq	$3, %rax	#, tmp185
	addq	$rld+32, %rax	#, tmp186
	movl	4(%rax), %edx	# rld[r_2].inc, D.23900
	movq	-24(%rbp), %rax	# f, tmp187
	movl	$.LC50, %esi	#,
	movq	%rax, %rdi	# tmp187,
	movl	$0, %eax	#,
	call	fprintf	#
.L2382:
	.loc 1 6932 0
	movl	-12(%rbp), %eax	# r, tmp189
	movslq	%eax, %rdx	# tmp189, tmp188
	movq	%rdx, %rax	# tmp188, tmp190
	addq	%rax, %rax	# tmp190
	addq	%rdx, %rax	# tmp188, tmp190
	salq	$2, %rax	#, tmp190
	addq	%rdx, %rax	# tmp188, tmp190
	salq	$3, %rax	#, tmp191
	addq	$rld+96, %rax	#, tmp192
	movzbl	(%rax), %eax	#, tmp195
	shrb	%al	# D.23904
	andl	$1, %eax	#, D.23904
	testb	%al, %al	# D.23904
	je	.L2383	#,
	.loc 1 6933 0
	movq	-24(%rbp), %rax	# f, tmp196
	movq	%rax, %rcx	# tmp196,
	movl	$15, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC51, %edi	#,
	call	fwrite	#
.L2383:
	.loc 1 6935 0
	movl	-12(%rbp), %eax	# r, tmp198
	movslq	%eax, %rdx	# tmp198, tmp197
	movq	%rdx, %rax	# tmp197, tmp199
	addq	%rax, %rax	# tmp199
	addq	%rdx, %rax	# tmp197, tmp199
	salq	$2, %rax	#, tmp199
	addq	%rdx, %rax	# tmp197, tmp199
	salq	$3, %rax	#, tmp200
	addq	$rld+96, %rax	#, tmp201
	movzbl	(%rax), %eax	#, tmp204
	shrb	$2, %al	#, D.23904
	andl	$1, %eax	#, D.23904
	testb	%al, %al	# D.23904
	je	.L2384	#,
	.loc 1 6936 0
	movq	-24(%rbp), %rax	# f, tmp205
	movq	%rax, %rcx	# tmp205,
	movl	$20, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC52, %edi	#,
	call	fwrite	#
.L2384:
	.loc 1 6938 0
	movl	-12(%rbp), %eax	# r, tmp207
	movslq	%eax, %rdx	# tmp207, tmp206
	movq	%rdx, %rax	# tmp206, tmp208
	addq	%rax, %rax	# tmp208
	addq	%rdx, %rax	# tmp206, tmp208
	salq	$2, %rax	#, tmp208
	addq	%rdx, %rax	# tmp206, tmp208
	salq	$3, %rax	#, tmp209
	addq	$rld+32, %rax	#, tmp210
	movq	8(%rax), %rax	# rld[r_2].in_reg, D.23898
	testq	%rax, %rax	# D.23898
	je	.L2385	#,
	.loc 1 6940 0
	movq	-24(%rbp), %rax	# f, tmp211
	movq	%rax, %rcx	# tmp211,
	movl	$17, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC53, %edi	#,
	call	fwrite	#
	.loc 1 6941 0
	movl	-12(%rbp), %eax	# r, tmp213
	movslq	%eax, %rdx	# tmp213, tmp212
	movq	%rdx, %rax	# tmp212, tmp214
	addq	%rax, %rax	# tmp214
	addq	%rdx, %rax	# tmp212, tmp214
	salq	$2, %rax	#, tmp214
	addq	%rdx, %rax	# tmp212, tmp214
	salq	$3, %rax	#, tmp215
	addq	$rld+32, %rax	#, tmp216
	movq	8(%rax), %rcx	# rld[r_2].in_reg, D.23898
	movq	-24(%rbp), %rax	# f, tmp217
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.23898,
	movq	%rax, %rdi	# tmp217,
	call	print_inline_rtx	#
.L2385:
	.loc 1 6944 0
	movl	-12(%rbp), %eax	# r, tmp219
	movslq	%eax, %rdx	# tmp219, tmp218
	movq	%rdx, %rax	# tmp218, tmp220
	addq	%rax, %rax	# tmp220
	addq	%rdx, %rax	# tmp218, tmp220
	salq	$2, %rax	#, tmp220
	addq	%rdx, %rax	# tmp218, tmp220
	salq	$3, %rax	#, tmp221
	addq	$rld+48, %rax	#, tmp222
	movq	(%rax), %rax	# rld[r_2].out_reg, D.23898
	testq	%rax, %rax	# D.23898
	je	.L2386	#,
	.loc 1 6946 0
	movq	-24(%rbp), %rax	# f, tmp223
	movq	%rax, %rcx	# tmp223,
	movl	$18, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC54, %edi	#,
	call	fwrite	#
	.loc 1 6947 0
	movl	-12(%rbp), %eax	# r, tmp225
	movslq	%eax, %rdx	# tmp225, tmp224
	movq	%rdx, %rax	# tmp224, tmp226
	addq	%rax, %rax	# tmp226
	addq	%rdx, %rax	# tmp224, tmp226
	salq	$2, %rax	#, tmp226
	addq	%rdx, %rax	# tmp224, tmp226
	salq	$3, %rax	#, tmp227
	addq	$rld+48, %rax	#, tmp228
	movq	(%rax), %rcx	# rld[r_2].out_reg, D.23898
	movq	-24(%rbp), %rax	# f, tmp229
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.23898,
	movq	%rax, %rdi	# tmp229,
	call	print_inline_rtx	#
.L2386:
	.loc 1 6950 0
	movl	-12(%rbp), %eax	# r, tmp231
	movslq	%eax, %rdx	# tmp231, tmp230
	movq	%rdx, %rax	# tmp230, tmp232
	addq	%rax, %rax	# tmp232
	addq	%rdx, %rax	# tmp230, tmp232
	salq	$2, %rax	#, tmp232
	addq	%rdx, %rax	# tmp230, tmp232
	salq	$3, %rax	#, tmp233
	addq	$rld+64, %rax	#, tmp234
	movq	(%rax), %rax	# rld[r_2].reg_rtx, D.23898
	testq	%rax, %rax	# D.23898
	je	.L2387	#,
	.loc 1 6952 0
	movq	-24(%rbp), %rax	# f, tmp235
	movq	%rax, %rcx	# tmp235,
	movl	$18, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC55, %edi	#,
	call	fwrite	#
	.loc 1 6953 0
	movl	-12(%rbp), %eax	# r, tmp237
	movslq	%eax, %rdx	# tmp237, tmp236
	movq	%rdx, %rax	# tmp236, tmp238
	addq	%rax, %rax	# tmp238
	addq	%rdx, %rax	# tmp236, tmp238
	salq	$2, %rax	#, tmp238
	addq	%rdx, %rax	# tmp236, tmp238
	salq	$3, %rax	#, tmp239
	addq	$rld+64, %rax	#, tmp240
	movq	(%rax), %rcx	# rld[r_2].reg_rtx, D.23898
	movq	-24(%rbp), %rax	# f, tmp241
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.23898,
	movq	%rax, %rdi	# tmp241,
	call	print_inline_rtx	#
.L2387:
	.loc 1 6956 0
	movq	$.LC44, -8(%rbp)	#, prefix
	.loc 1 6957 0
	movl	-12(%rbp), %eax	# r, tmp243
	movslq	%eax, %rdx	# tmp243, tmp242
	movq	%rdx, %rax	# tmp242, tmp244
	addq	%rax, %rax	# tmp244
	addq	%rdx, %rax	# tmp242, tmp244
	salq	$2, %rax	#, tmp244
	addq	%rdx, %rax	# tmp242, tmp244
	salq	$3, %rax	#, tmp245
	addq	$rld+64, %rax	#, tmp246
	movl	12(%rax), %eax	# rld[r_2].secondary_in_reload, D.23900
	cmpl	$-1, %eax	#, D.23900
	je	.L2388	#,
	.loc 1 6959 0
	movl	-12(%rbp), %eax	# r, tmp248
	movslq	%eax, %rdx	# tmp248, tmp247
	movq	%rdx, %rax	# tmp247, tmp249
	addq	%rax, %rax	# tmp249
	addq	%rdx, %rax	# tmp247, tmp249
	salq	$2, %rax	#, tmp249
	addq	%rdx, %rax	# tmp247, tmp249
	salq	$3, %rax	#, tmp250
	addq	$rld+64, %rax	#, tmp251
	movl	12(%rax), %ecx	# rld[r_2].secondary_in_reload, D.23900
	movq	-8(%rbp), %rdx	# prefix, tmp252
	movq	-24(%rbp), %rax	# f, tmp253
	movl	$.LC56, %esi	#,
	movq	%rax, %rdi	# tmp253,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 6961 0
	movq	$.LC57, -8(%rbp)	#, prefix
.L2388:
	.loc 1 6964 0
	movl	-12(%rbp), %eax	# r, tmp255
	movslq	%eax, %rdx	# tmp255, tmp254
	movq	%rdx, %rax	# tmp254, tmp256
	addq	%rax, %rax	# tmp256
	addq	%rdx, %rax	# tmp254, tmp256
	salq	$2, %rax	#, tmp256
	addq	%rdx, %rax	# tmp254, tmp256
	salq	$3, %rax	#, tmp257
	addq	$rld+80, %rax	#, tmp258
	movl	(%rax), %eax	# rld[r_2].secondary_out_reload, D.23900
	cmpl	$-1, %eax	#, D.23900
	je	.L2389	#,
	.loc 1 6965 0
	movl	-12(%rbp), %eax	# r, tmp260
	movslq	%eax, %rdx	# tmp260, tmp259
	movq	%rdx, %rax	# tmp259, tmp261
	addq	%rax, %rax	# tmp261
	addq	%rdx, %rax	# tmp259, tmp261
	salq	$2, %rax	#, tmp261
	addq	%rdx, %rax	# tmp259, tmp261
	salq	$3, %rax	#, tmp262
	addq	$rld+80, %rax	#, tmp263
	movl	(%rax), %ecx	# rld[r_2].secondary_out_reload, D.23900
	movq	-8(%rbp), %rdx	# prefix, tmp264
	movq	-24(%rbp), %rax	# f, tmp265
	movl	$.LC58, %esi	#,
	movq	%rax, %rdi	# tmp265,
	movl	$0, %eax	#,
	call	fprintf	#
.L2389:
	.loc 1 6968 0
	movq	$.LC44, -8(%rbp)	#, prefix
	.loc 1 6969 0
	movl	-12(%rbp), %eax	# r, tmp267
	movslq	%eax, %rdx	# tmp267, tmp266
	movq	%rdx, %rax	# tmp266, tmp268
	addq	%rax, %rax	# tmp268
	addq	%rdx, %rax	# tmp266, tmp268
	salq	$2, %rax	#, tmp268
	addq	%rdx, %rax	# tmp266, tmp268
	salq	$3, %rax	#, tmp269
	addq	$rld+80, %rax	#, tmp270
	movl	4(%rax), %eax	# rld[r_2].secondary_in_icode, D.23905
	cmpl	$1317, %eax	#, D.23905
	je	.L2390	#,
	.loc 1 6972 0
	movl	-12(%rbp), %eax	# r, tmp272
	movslq	%eax, %rdx	# tmp272, tmp271
	movq	%rdx, %rax	# tmp271, tmp273
	addq	%rax, %rax	# tmp273
	addq	%rdx, %rax	# tmp271, tmp273
	salq	$2, %rax	#, tmp273
	addq	%rdx, %rax	# tmp271, tmp273
	salq	$3, %rax	#, tmp274
	addq	$rld+80, %rax	#, tmp275
	movl	4(%rax), %eax	# rld[r_2].secondary_in_icode, D.23905
	.loc 1 6971 0
	movl	%eax, %edx	# D.23905, tmp276
	movq	%rdx, %rax	# tmp276, tmp277
	salq	$2, %rax	#, tmp277
	addq	%rdx, %rax	# tmp276, tmp277
	salq	$3, %rax	#, tmp278
	addq	$insn_data, %rax	#, tmp279
	movq	(%rax), %rcx	# insn_data[_46].name, D.23901
	movq	-8(%rbp), %rdx	# prefix, tmp280
	movq	-24(%rbp), %rax	# f, tmp281
	movl	$.LC59, %esi	#,
	movq	%rax, %rdi	# tmp281,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 6973 0
	movq	$.LC57, -8(%rbp)	#, prefix
.L2390:
	.loc 1 6976 0
	movl	-12(%rbp), %eax	# r, tmp283
	movslq	%eax, %rdx	# tmp283, tmp282
	movq	%rdx, %rax	# tmp282, tmp284
	addq	%rax, %rax	# tmp284
	addq	%rdx, %rax	# tmp282, tmp284
	salq	$2, %rax	#, tmp284
	addq	%rdx, %rax	# tmp282, tmp284
	salq	$3, %rax	#, tmp285
	addq	$rld+80, %rax	#, tmp286
	movl	8(%rax), %eax	# rld[r_2].secondary_out_icode, D.23905
	cmpl	$1317, %eax	#, D.23905
	je	.L2391	#,
	.loc 1 6978 0
	movl	-12(%rbp), %eax	# r, tmp288
	movslq	%eax, %rdx	# tmp288, tmp287
	movq	%rdx, %rax	# tmp287, tmp289
	addq	%rax, %rax	# tmp289
	addq	%rdx, %rax	# tmp287, tmp289
	salq	$2, %rax	#, tmp289
	addq	%rdx, %rax	# tmp287, tmp289
	salq	$3, %rax	#, tmp290
	addq	$rld+80, %rax	#, tmp291
	movl	8(%rax), %eax	# rld[r_2].secondary_out_icode, D.23905
	.loc 1 6977 0
	movl	%eax, %edx	# D.23905, tmp292
	movq	%rdx, %rax	# tmp292, tmp293
	salq	$2, %rax	#, tmp293
	addq	%rdx, %rax	# tmp292, tmp293
	salq	$3, %rax	#, tmp294
	addq	$insn_data, %rax	#, tmp295
	movq	(%rax), %rcx	# insn_data[_50].name, D.23901
	movq	-8(%rbp), %rdx	# prefix, tmp296
	movq	-24(%rbp), %rax	# f, tmp297
	movl	$.LC60, %esi	#,
	movq	%rax, %rdi	# tmp297,
	movl	$0, %eax	#,
	call	fprintf	#
.L2391:
	.loc 1 6980 0
	movq	-24(%rbp), %rax	# f, tmp298
	movq	%rax, %rsi	# tmp298,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 6897 0
	addl	$1, -12(%rbp)	#, r
.L2377:
	.loc 1 6897 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1428
	cmpl	%eax, -12(%rbp)	# n_reloads.1428, r
	jl	.L2392	#,
	.loc 1 6982 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE44:
	.size	debug_reload_to_stream, .-debug_reload_to_stream
	.globl	debug_reload
	.type	debug_reload, @function
debug_reload:
.LFB45:
	.loc 1 6986 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 6987 0
	movq	stderr(%rip), %rax	# stderr, stderr.1429
	movq	%rax, %rdi	# stderr.1429,
	call	debug_reload_to_stream	#
	.loc 1 6988 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE45:
	.size	debug_reload, .-debug_reload
	.section	.rodata
	.align 16
	.type	__FUNCTION__.11576, @object
	.size	__FUNCTION__.11576, 22
__FUNCTION__.11576:
	.string	"push_secondary_reload"
	.align 16
	.type	__FUNCTION__.11614, @object
	.size	__FUNCTION__.11614, 17
__FUNCTION__.11614:
	.string	"find_valid_class"
	.type	__FUNCTION__.11668, @object
	.size	__FUNCTION__.11668, 12
__FUNCTION__.11668:
	.string	"push_reload"
	.align 16
	.type	__FUNCTION__.11828, @object
	.size	__FUNCTION__.11828, 17
__FUNCTION__.11828:
	.string	"operands_match_p"
	.type	__FUNCTION__.11840, @object
	.size	__FUNCTION__.11840, 10
__FUNCTION__.11840:
	.string	"decompose"
	.type	__FUNCTION__.11847, @object
	.size	__FUNCTION__.11847, 9
__FUNCTION__.11847:
	.string	"immune_p"
	.type	__FUNCTION__.11908, @object
	.size	__FUNCTION__.11908, 13
__FUNCTION__.11908:
	.string	"find_reloads"
	.align 16
	.type	__FUNCTION__.12167, @object
	.size	__FUNCTION__.12167, 20
__FUNCTION__.12167:
	.string	"find_reloads_toplev"
	.align 16
	.type	__FUNCTION__.12257, @object
	.size	__FUNCTION__.12257, 23
__FUNCTION__.12257:
	.string	"find_reloads_address_1"
	.type	__FUNCTION__.12321, @object
	.size	__FUNCTION__.12321, 14
__FUNCTION__.12321:
	.string	"subst_reloads"
	.align 16
	.type	__FUNCTION__.12329, @object
	.size	__FUNCTION__.12329, 18
__FUNCTION__.12329:
	.string	"copy_replacements"
	.align 16
	.type	__FUNCTION__.12382, @object
	.size	__FUNCTION__.12382, 29
__FUNCTION__.12382:
	.string	"refers_to_regno_for_reload_p"
	.align 32
	.type	__FUNCTION__.12403, @object
	.size	__FUNCTION__.12403, 35
__FUNCTION__.12403:
	.string	"reg_overlap_mentioned_for_reload_p"
	.text
.Letext0:
	.file 2 "rtl.h"
	.file 3 "config.h"
	.file 4 "i386.h"
	.file 5 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
	.file 6 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 7 "/usr/include/stdio.h"
	.file 8 "/usr/include/libio.h"
	.file 9 "machmode.h"
	.file 10 "insn-codes.h"
	.file 11 "optabs.h"
	.file 12 "recog.h"
	.file 13 "reload.h"
	.file 14 "hard-reg-set.h"
	.file 15 "function.h"
	.file 16 "./safe-ctype.h"
	.file 17 "regs.h"
	.file 18 "flags.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x5b2c
	.value	0x4
	.long	.Ldebug_abbrev0
	.byte	0x8
	.uleb128 0x1
	.long	.LASF1458
	.byte	0x1
	.long	.LASF1459
	.long	.LASF1460
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.string	"rtx"
	.byte	0x3
	.byte	0x8
	.long	0x38
	.uleb128 0x3
	.byte	0x8
	.long	0x3e
	.uleb128 0x4
	.long	.LASF11
	.byte	0x10
	.byte	0x2
	.byte	0x7a
	.long	0xed
	.uleb128 0x5
	.long	.LASF0
	.byte	0x2
	.byte	0x7d
	.long	0x266
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0
	.uleb128 0x5
	.long	.LASF1
	.byte	0x2
	.byte	0x80
	.long	0x266
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.uleb128 0x5
	.long	.LASF2
	.byte	0x2
	.byte	0x87
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0
	.uleb128 0x5
	.long	.LASF3
	.byte	0x2
	.byte	0x8a
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0
	.uleb128 0x5
	.long	.LASF4
	.byte	0x2
	.byte	0x95
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0
	.uleb128 0x5
	.long	.LASF5
	.byte	0x2
	.byte	0x9d
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0
	.uleb128 0x5
	.long	.LASF6
	.byte	0x2
	.byte	0xaf
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0
	.uleb128 0x5
	.long	.LASF7
	.byte	0x2
	.byte	0xb6
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0
	.uleb128 0x5
	.long	.LASF8
	.byte	0x2
	.byte	0xbb
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0
	.uleb128 0x5
	.long	.LASF9
	.byte	0x2
	.byte	0xc4
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0
	.uleb128 0x6
	.string	"fld"
	.byte	0x2
	.byte	0xc9
	.long	0xcd7
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF10
	.byte	0x3
	.byte	0xa
	.long	0xf8
	.uleb128 0x3
	.byte	0x8
	.long	0xfe
	.uleb128 0x4
	.long	.LASF12
	.byte	0x10
	.byte	0x2
	.byte	0xde
	.long	0x123
	.uleb128 0x8
	.long	.LASF13
	.byte	0x2
	.byte	0xdf
	.long	0x139
	.byte	0
	.uleb128 0x8
	.long	.LASF14
	.byte	0x2
	.byte	0xe0
	.long	0xce7
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF15
	.byte	0x3
	.byte	0xc
	.long	0x12e
	.uleb128 0x3
	.byte	0x8
	.long	0x134
	.uleb128 0x9
	.long	.LASF1461
	.uleb128 0xa
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0xb
	.byte	0x8
	.byte	0x7
	.long	.LASF16
	.uleb128 0xc
	.long	.LASF118
	.byte	0x4
	.byte	0x4
	.value	0x4b2
	.long	0x1f1
	.uleb128 0xd
	.long	.LASF17
	.sleb128 0
	.uleb128 0xd
	.long	.LASF18
	.sleb128 1
	.uleb128 0xd
	.long	.LASF19
	.sleb128 2
	.uleb128 0xd
	.long	.LASF20
	.sleb128 3
	.uleb128 0xd
	.long	.LASF21
	.sleb128 4
	.uleb128 0xd
	.long	.LASF22
	.sleb128 5
	.uleb128 0xd
	.long	.LASF23
	.sleb128 6
	.uleb128 0xd
	.long	.LASF24
	.sleb128 7
	.uleb128 0xd
	.long	.LASF25
	.sleb128 8
	.uleb128 0xd
	.long	.LASF26
	.sleb128 9
	.uleb128 0xd
	.long	.LASF27
	.sleb128 10
	.uleb128 0xd
	.long	.LASF28
	.sleb128 11
	.uleb128 0xd
	.long	.LASF29
	.sleb128 12
	.uleb128 0xd
	.long	.LASF30
	.sleb128 13
	.uleb128 0xd
	.long	.LASF31
	.sleb128 14
	.uleb128 0xd
	.long	.LASF32
	.sleb128 15
	.uleb128 0xd
	.long	.LASF33
	.sleb128 16
	.uleb128 0xd
	.long	.LASF34
	.sleb128 17
	.uleb128 0xd
	.long	.LASF35
	.sleb128 18
	.uleb128 0xd
	.long	.LASF36
	.sleb128 19
	.uleb128 0xd
	.long	.LASF37
	.sleb128 20
	.uleb128 0xd
	.long	.LASF38
	.sleb128 21
	.uleb128 0xd
	.long	.LASF39
	.sleb128 22
	.uleb128 0xd
	.long	.LASF40
	.sleb128 23
	.uleb128 0xd
	.long	.LASF41
	.sleb128 24
	.uleb128 0xd
	.long	.LASF42
	.sleb128 25
	.byte	0
	.uleb128 0xe
	.long	.LASF43
	.byte	0x1c
	.byte	0x4
	.value	0x683
	.long	0x25a
	.uleb128 0xf
	.long	.LASF44
	.byte	0x4
	.value	0x684
	.long	0x139
	.byte	0
	.uleb128 0xf
	.long	.LASF45
	.byte	0x4
	.value	0x685
	.long	0x139
	.byte	0x4
	.uleb128 0xf
	.long	.LASF46
	.byte	0x4
	.value	0x686
	.long	0x139
	.byte	0x8
	.uleb128 0xf
	.long	.LASF47
	.byte	0x4
	.value	0x687
	.long	0x139
	.byte	0xc
	.uleb128 0xf
	.long	.LASF48
	.byte	0x4
	.value	0x688
	.long	0x139
	.byte	0x10
	.uleb128 0xf
	.long	.LASF49
	.byte	0x4
	.value	0x689
	.long	0x139
	.byte	0x14
	.uleb128 0xf
	.long	.LASF50
	.byte	0x4
	.value	0x68a
	.long	0x139
	.byte	0x18
	.byte	0
	.uleb128 0x10
	.long	.LASF51
	.byte	0x4
	.value	0x68b
	.long	0x1f1
	.uleb128 0xb
	.byte	0x4
	.byte	0x7
	.long	.LASF52
	.uleb128 0x11
	.byte	0x8
	.uleb128 0xb
	.byte	0x8
	.byte	0x5
	.long	.LASF53
	.uleb128 0x7
	.long	.LASF54
	.byte	0x5
	.byte	0xd4
	.long	0x281
	.uleb128 0xb
	.byte	0x8
	.byte	0x7
	.long	.LASF55
	.uleb128 0xb
	.byte	0x1
	.byte	0x8
	.long	.LASF56
	.uleb128 0xb
	.byte	0x2
	.byte	0x7
	.long	.LASF57
	.uleb128 0xb
	.byte	0x1
	.byte	0x6
	.long	.LASF58
	.uleb128 0xb
	.byte	0x2
	.byte	0x5
	.long	.LASF59
	.uleb128 0x7
	.long	.LASF60
	.byte	0x6
	.byte	0x8c
	.long	0x26f
	.uleb128 0x7
	.long	.LASF61
	.byte	0x6
	.byte	0x8d
	.long	0x26f
	.uleb128 0x3
	.byte	0x8
	.long	0x2c0
	.uleb128 0xb
	.byte	0x1
	.byte	0x6
	.long	.LASF62
	.uleb128 0x7
	.long	.LASF63
	.byte	0x7
	.byte	0x30
	.long	0x2d2
	.uleb128 0x4
	.long	.LASF64
	.byte	0xd8
	.byte	0x8
	.byte	0xf6
	.long	0x453
	.uleb128 0x8
	.long	.LASF65
	.byte	0x8
	.byte	0xf7
	.long	0x139
	.byte	0
	.uleb128 0x8
	.long	.LASF66
	.byte	0x8
	.byte	0xfc
	.long	0x2ba
	.byte	0x8
	.uleb128 0x8
	.long	.LASF67
	.byte	0x8
	.byte	0xfd
	.long	0x2ba
	.byte	0x10
	.uleb128 0x8
	.long	.LASF68
	.byte	0x8
	.byte	0xfe
	.long	0x2ba
	.byte	0x18
	.uleb128 0x8
	.long	.LASF69
	.byte	0x8
	.byte	0xff
	.long	0x2ba
	.byte	0x20
	.uleb128 0xf
	.long	.LASF70
	.byte	0x8
	.value	0x100
	.long	0x2ba
	.byte	0x28
	.uleb128 0xf
	.long	.LASF71
	.byte	0x8
	.value	0x101
	.long	0x2ba
	.byte	0x30
	.uleb128 0xf
	.long	.LASF72
	.byte	0x8
	.value	0x102
	.long	0x2ba
	.byte	0x38
	.uleb128 0xf
	.long	.LASF73
	.byte	0x8
	.value	0x103
	.long	0x2ba
	.byte	0x40
	.uleb128 0xf
	.long	.LASF74
	.byte	0x8
	.value	0x105
	.long	0x2ba
	.byte	0x48
	.uleb128 0xf
	.long	.LASF75
	.byte	0x8
	.value	0x106
	.long	0x2ba
	.byte	0x50
	.uleb128 0xf
	.long	.LASF76
	.byte	0x8
	.value	0x107
	.long	0x2ba
	.byte	0x58
	.uleb128 0xf
	.long	.LASF77
	.byte	0x8
	.value	0x109
	.long	0x49b
	.byte	0x60
	.uleb128 0xf
	.long	.LASF78
	.byte	0x8
	.value	0x10b
	.long	0x4a1
	.byte	0x68
	.uleb128 0xf
	.long	.LASF79
	.byte	0x8
	.value	0x10d
	.long	0x139
	.byte	0x70
	.uleb128 0xf
	.long	.LASF80
	.byte	0x8
	.value	0x111
	.long	0x139
	.byte	0x74
	.uleb128 0xf
	.long	.LASF81
	.byte	0x8
	.value	0x113
	.long	0x2a4
	.byte	0x78
	.uleb128 0xf
	.long	.LASF82
	.byte	0x8
	.value	0x117
	.long	0x28f
	.byte	0x80
	.uleb128 0xf
	.long	.LASF83
	.byte	0x8
	.value	0x118
	.long	0x296
	.byte	0x82
	.uleb128 0xf
	.long	.LASF84
	.byte	0x8
	.value	0x119
	.long	0x4a7
	.byte	0x83
	.uleb128 0xf
	.long	.LASF85
	.byte	0x8
	.value	0x11d
	.long	0x4b7
	.byte	0x88
	.uleb128 0xf
	.long	.LASF86
	.byte	0x8
	.value	0x126
	.long	0x2af
	.byte	0x90
	.uleb128 0xf
	.long	.LASF87
	.byte	0x8
	.value	0x12f
	.long	0x26d
	.byte	0x98
	.uleb128 0xf
	.long	.LASF88
	.byte	0x8
	.value	0x130
	.long	0x26d
	.byte	0xa0
	.uleb128 0xf
	.long	.LASF89
	.byte	0x8
	.value	0x131
	.long	0x26d
	.byte	0xa8
	.uleb128 0xf
	.long	.LASF90
	.byte	0x8
	.value	0x132
	.long	0x26d
	.byte	0xb0
	.uleb128 0xf
	.long	.LASF91
	.byte	0x8
	.value	0x133
	.long	0x276
	.byte	0xb8
	.uleb128 0xf
	.long	.LASF92
	.byte	0x8
	.value	0x135
	.long	0x139
	.byte	0xc0
	.uleb128 0xf
	.long	.LASF93
	.byte	0x8
	.value	0x137
	.long	0x4bd
	.byte	0xc4
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x463
	.uleb128 0x13
	.long	0x140
	.byte	0x3
	.byte	0
	.uleb128 0x14
	.long	.LASF1462
	.byte	0x8
	.byte	0x9b
	.uleb128 0x4
	.long	.LASF94
	.byte	0x18
	.byte	0x8
	.byte	0xa1
	.long	0x49b
	.uleb128 0x8
	.long	.LASF95
	.byte	0x8
	.byte	0xa2
	.long	0x49b
	.byte	0
	.uleb128 0x8
	.long	.LASF96
	.byte	0x8
	.byte	0xa3
	.long	0x4a1
	.byte	0x8
	.uleb128 0x8
	.long	.LASF97
	.byte	0x8
	.byte	0xa7
	.long	0x139
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x46a
	.uleb128 0x3
	.byte	0x8
	.long	0x2d2
	.uleb128 0x12
	.long	0x2c0
	.long	0x4b7
	.uleb128 0x13
	.long	0x140
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x463
	.uleb128 0x12
	.long	0x2c0
	.long	0x4cd
	.uleb128 0x13
	.long	0x140
	.byte	0x13
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4d3
	.uleb128 0x15
	.long	0x2c0
	.uleb128 0x16
	.byte	0x4
	.byte	0x10
	.byte	0x2c
	.long	0x559
	.uleb128 0xd
	.long	.LASF98
	.sleb128 1
	.uleb128 0xd
	.long	.LASF99
	.sleb128 2
	.uleb128 0xd
	.long	.LASF100
	.sleb128 4
	.uleb128 0xd
	.long	.LASF101
	.sleb128 8
	.uleb128 0xd
	.long	.LASF102
	.sleb128 16
	.uleb128 0xd
	.long	.LASF103
	.sleb128 32
	.uleb128 0xd
	.long	.LASF104
	.sleb128 64
	.uleb128 0xd
	.long	.LASF105
	.sleb128 128
	.uleb128 0xd
	.long	.LASF106
	.sleb128 256
	.uleb128 0xd
	.long	.LASF107
	.sleb128 512
	.uleb128 0xd
	.long	.LASF108
	.sleb128 1024
	.uleb128 0xd
	.long	.LASF109
	.sleb128 2048
	.uleb128 0xd
	.long	.LASF110
	.sleb128 136
	.uleb128 0xd
	.long	.LASF111
	.sleb128 140
	.uleb128 0xd
	.long	.LASF112
	.sleb128 516
	.uleb128 0xd
	.long	.LASF113
	.sleb128 172
	.uleb128 0xd
	.long	.LASF114
	.sleb128 3072
	.uleb128 0xd
	.long	.LASF115
	.sleb128 3088
	.byte	0
	.uleb128 0xb
	.byte	0x8
	.byte	0x7
	.long	.LASF116
	.uleb128 0xb
	.byte	0x8
	.byte	0x5
	.long	.LASF117
	.uleb128 0x3
	.byte	0x8
	.long	0x139
	.uleb128 0x3
	.byte	0x8
	.long	0x573
	.uleb128 0x17
	.uleb128 0x18
	.long	.LASF119
	.byte	0x4
	.byte	0x9
	.byte	0x1d
	.long	0x6e9
	.uleb128 0xd
	.long	.LASF120
	.sleb128 0
	.uleb128 0xd
	.long	.LASF121
	.sleb128 1
	.uleb128 0xd
	.long	.LASF122
	.sleb128 2
	.uleb128 0xd
	.long	.LASF123
	.sleb128 3
	.uleb128 0xd
	.long	.LASF124
	.sleb128 4
	.uleb128 0xd
	.long	.LASF125
	.sleb128 5
	.uleb128 0xd
	.long	.LASF126
	.sleb128 6
	.uleb128 0xd
	.long	.LASF127
	.sleb128 7
	.uleb128 0xd
	.long	.LASF128
	.sleb128 8
	.uleb128 0xd
	.long	.LASF129
	.sleb128 9
	.uleb128 0xd
	.long	.LASF130
	.sleb128 10
	.uleb128 0xd
	.long	.LASF131
	.sleb128 11
	.uleb128 0xd
	.long	.LASF132
	.sleb128 12
	.uleb128 0xd
	.long	.LASF133
	.sleb128 13
	.uleb128 0xd
	.long	.LASF134
	.sleb128 14
	.uleb128 0xd
	.long	.LASF135
	.sleb128 15
	.uleb128 0xd
	.long	.LASF136
	.sleb128 16
	.uleb128 0xd
	.long	.LASF137
	.sleb128 17
	.uleb128 0xd
	.long	.LASF138
	.sleb128 18
	.uleb128 0xd
	.long	.LASF139
	.sleb128 19
	.uleb128 0xd
	.long	.LASF140
	.sleb128 20
	.uleb128 0xd
	.long	.LASF141
	.sleb128 21
	.uleb128 0xd
	.long	.LASF142
	.sleb128 22
	.uleb128 0xd
	.long	.LASF143
	.sleb128 23
	.uleb128 0xd
	.long	.LASF144
	.sleb128 24
	.uleb128 0xd
	.long	.LASF145
	.sleb128 25
	.uleb128 0xd
	.long	.LASF146
	.sleb128 26
	.uleb128 0xd
	.long	.LASF147
	.sleb128 27
	.uleb128 0xd
	.long	.LASF148
	.sleb128 28
	.uleb128 0xd
	.long	.LASF149
	.sleb128 29
	.uleb128 0xd
	.long	.LASF150
	.sleb128 30
	.uleb128 0xd
	.long	.LASF151
	.sleb128 31
	.uleb128 0xd
	.long	.LASF152
	.sleb128 32
	.uleb128 0xd
	.long	.LASF153
	.sleb128 33
	.uleb128 0xd
	.long	.LASF154
	.sleb128 34
	.uleb128 0xd
	.long	.LASF155
	.sleb128 35
	.uleb128 0xd
	.long	.LASF156
	.sleb128 36
	.uleb128 0xd
	.long	.LASF157
	.sleb128 37
	.uleb128 0xd
	.long	.LASF158
	.sleb128 38
	.uleb128 0xd
	.long	.LASF159
	.sleb128 39
	.uleb128 0xd
	.long	.LASF160
	.sleb128 40
	.uleb128 0xd
	.long	.LASF161
	.sleb128 41
	.uleb128 0xd
	.long	.LASF162
	.sleb128 42
	.uleb128 0xd
	.long	.LASF163
	.sleb128 43
	.uleb128 0xd
	.long	.LASF164
	.sleb128 44
	.uleb128 0xd
	.long	.LASF165
	.sleb128 45
	.uleb128 0xd
	.long	.LASF166
	.sleb128 46
	.uleb128 0xd
	.long	.LASF167
	.sleb128 47
	.uleb128 0xd
	.long	.LASF168
	.sleb128 48
	.uleb128 0xd
	.long	.LASF169
	.sleb128 49
	.uleb128 0xd
	.long	.LASF170
	.sleb128 50
	.uleb128 0xd
	.long	.LASF171
	.sleb128 51
	.uleb128 0xd
	.long	.LASF172
	.sleb128 52
	.uleb128 0xd
	.long	.LASF173
	.sleb128 53
	.uleb128 0xd
	.long	.LASF174
	.sleb128 54
	.uleb128 0xd
	.long	.LASF175
	.sleb128 55
	.uleb128 0xd
	.long	.LASF176
	.sleb128 56
	.uleb128 0xd
	.long	.LASF177
	.sleb128 57
	.uleb128 0xd
	.long	.LASF178
	.sleb128 58
	.uleb128 0xd
	.long	.LASF179
	.sleb128 59
	.byte	0
	.uleb128 0x18
	.long	.LASF180
	.byte	0x4
	.byte	0x9
	.byte	0x2c
	.long	0x732
	.uleb128 0xd
	.long	.LASF181
	.sleb128 0
	.uleb128 0xd
	.long	.LASF182
	.sleb128 1
	.uleb128 0xd
	.long	.LASF183
	.sleb128 2
	.uleb128 0xd
	.long	.LASF184
	.sleb128 3
	.uleb128 0xd
	.long	.LASF185
	.sleb128 4
	.uleb128 0xd
	.long	.LASF186
	.sleb128 5
	.uleb128 0xd
	.long	.LASF187
	.sleb128 6
	.uleb128 0xd
	.long	.LASF188
	.sleb128 7
	.uleb128 0xd
	.long	.LASF189
	.sleb128 8
	.uleb128 0xd
	.long	.LASF190
	.sleb128 9
	.byte	0
	.uleb128 0x18
	.long	.LASF191
	.byte	0x4
	.byte	0x2
	.byte	0x29
	.long	0xb2e
	.uleb128 0xd
	.long	.LASF192
	.sleb128 0
	.uleb128 0x19
	.string	"NIL"
	.sleb128 1
	.uleb128 0xd
	.long	.LASF193
	.sleb128 2
	.uleb128 0xd
	.long	.LASF194
	.sleb128 3
	.uleb128 0xd
	.long	.LASF195
	.sleb128 4
	.uleb128 0xd
	.long	.LASF196
	.sleb128 5
	.uleb128 0xd
	.long	.LASF197
	.sleb128 6
	.uleb128 0xd
	.long	.LASF198
	.sleb128 7
	.uleb128 0xd
	.long	.LASF199
	.sleb128 8
	.uleb128 0xd
	.long	.LASF200
	.sleb128 9
	.uleb128 0xd
	.long	.LASF201
	.sleb128 10
	.uleb128 0xd
	.long	.LASF202
	.sleb128 11
	.uleb128 0xd
	.long	.LASF203
	.sleb128 12
	.uleb128 0xd
	.long	.LASF204
	.sleb128 13
	.uleb128 0xd
	.long	.LASF205
	.sleb128 14
	.uleb128 0xd
	.long	.LASF206
	.sleb128 15
	.uleb128 0xd
	.long	.LASF207
	.sleb128 16
	.uleb128 0xd
	.long	.LASF208
	.sleb128 17
	.uleb128 0xd
	.long	.LASF209
	.sleb128 18
	.uleb128 0xd
	.long	.LASF210
	.sleb128 19
	.uleb128 0xd
	.long	.LASF211
	.sleb128 20
	.uleb128 0xd
	.long	.LASF212
	.sleb128 21
	.uleb128 0xd
	.long	.LASF213
	.sleb128 22
	.uleb128 0xd
	.long	.LASF214
	.sleb128 23
	.uleb128 0xd
	.long	.LASF215
	.sleb128 24
	.uleb128 0xd
	.long	.LASF216
	.sleb128 25
	.uleb128 0xd
	.long	.LASF217
	.sleb128 26
	.uleb128 0xd
	.long	.LASF218
	.sleb128 27
	.uleb128 0xd
	.long	.LASF219
	.sleb128 28
	.uleb128 0xd
	.long	.LASF220
	.sleb128 29
	.uleb128 0xd
	.long	.LASF221
	.sleb128 30
	.uleb128 0xd
	.long	.LASF222
	.sleb128 31
	.uleb128 0xd
	.long	.LASF223
	.sleb128 32
	.uleb128 0xd
	.long	.LASF224
	.sleb128 33
	.uleb128 0xd
	.long	.LASF225
	.sleb128 34
	.uleb128 0xd
	.long	.LASF226
	.sleb128 35
	.uleb128 0xd
	.long	.LASF227
	.sleb128 36
	.uleb128 0xd
	.long	.LASF228
	.sleb128 37
	.uleb128 0xd
	.long	.LASF229
	.sleb128 38
	.uleb128 0xd
	.long	.LASF230
	.sleb128 39
	.uleb128 0xd
	.long	.LASF231
	.sleb128 40
	.uleb128 0xd
	.long	.LASF232
	.sleb128 41
	.uleb128 0xd
	.long	.LASF233
	.sleb128 42
	.uleb128 0xd
	.long	.LASF234
	.sleb128 43
	.uleb128 0xd
	.long	.LASF235
	.sleb128 44
	.uleb128 0xd
	.long	.LASF236
	.sleb128 45
	.uleb128 0xd
	.long	.LASF237
	.sleb128 46
	.uleb128 0x19
	.string	"SET"
	.sleb128 47
	.uleb128 0x19
	.string	"USE"
	.sleb128 48
	.uleb128 0xd
	.long	.LASF238
	.sleb128 49
	.uleb128 0xd
	.long	.LASF239
	.sleb128 50
	.uleb128 0xd
	.long	.LASF240
	.sleb128 51
	.uleb128 0xd
	.long	.LASF241
	.sleb128 52
	.uleb128 0xd
	.long	.LASF242
	.sleb128 53
	.uleb128 0xd
	.long	.LASF243
	.sleb128 54
	.uleb128 0xd
	.long	.LASF244
	.sleb128 55
	.uleb128 0xd
	.long	.LASF245
	.sleb128 56
	.uleb128 0xd
	.long	.LASF246
	.sleb128 57
	.uleb128 0xd
	.long	.LASF247
	.sleb128 58
	.uleb128 0x19
	.string	"PC"
	.sleb128 59
	.uleb128 0xd
	.long	.LASF248
	.sleb128 60
	.uleb128 0x19
	.string	"REG"
	.sleb128 61
	.uleb128 0xd
	.long	.LASF249
	.sleb128 62
	.uleb128 0xd
	.long	.LASF250
	.sleb128 63
	.uleb128 0xd
	.long	.LASF251
	.sleb128 64
	.uleb128 0xd
	.long	.LASF252
	.sleb128 65
	.uleb128 0x19
	.string	"MEM"
	.sleb128 66
	.uleb128 0xd
	.long	.LASF253
	.sleb128 67
	.uleb128 0xd
	.long	.LASF254
	.sleb128 68
	.uleb128 0x19
	.string	"CC0"
	.sleb128 69
	.uleb128 0xd
	.long	.LASF255
	.sleb128 70
	.uleb128 0xd
	.long	.LASF256
	.sleb128 71
	.uleb128 0xd
	.long	.LASF257
	.sleb128 72
	.uleb128 0xd
	.long	.LASF258
	.sleb128 73
	.uleb128 0xd
	.long	.LASF259
	.sleb128 74
	.uleb128 0xd
	.long	.LASF260
	.sleb128 75
	.uleb128 0xd
	.long	.LASF261
	.sleb128 76
	.uleb128 0x19
	.string	"NEG"
	.sleb128 77
	.uleb128 0xd
	.long	.LASF262
	.sleb128 78
	.uleb128 0x19
	.string	"DIV"
	.sleb128 79
	.uleb128 0x19
	.string	"MOD"
	.sleb128 80
	.uleb128 0xd
	.long	.LASF263
	.sleb128 81
	.uleb128 0xd
	.long	.LASF264
	.sleb128 82
	.uleb128 0x19
	.string	"AND"
	.sleb128 83
	.uleb128 0x19
	.string	"IOR"
	.sleb128 84
	.uleb128 0x19
	.string	"XOR"
	.sleb128 85
	.uleb128 0x19
	.string	"NOT"
	.sleb128 86
	.uleb128 0xd
	.long	.LASF265
	.sleb128 87
	.uleb128 0xd
	.long	.LASF266
	.sleb128 88
	.uleb128 0xd
	.long	.LASF267
	.sleb128 89
	.uleb128 0xd
	.long	.LASF268
	.sleb128 90
	.uleb128 0xd
	.long	.LASF269
	.sleb128 91
	.uleb128 0xd
	.long	.LASF270
	.sleb128 92
	.uleb128 0xd
	.long	.LASF271
	.sleb128 93
	.uleb128 0xd
	.long	.LASF272
	.sleb128 94
	.uleb128 0xd
	.long	.LASF273
	.sleb128 95
	.uleb128 0xd
	.long	.LASF274
	.sleb128 96
	.uleb128 0xd
	.long	.LASF275
	.sleb128 97
	.uleb128 0xd
	.long	.LASF276
	.sleb128 98
	.uleb128 0xd
	.long	.LASF277
	.sleb128 99
	.uleb128 0xd
	.long	.LASF278
	.sleb128 100
	.uleb128 0xd
	.long	.LASF279
	.sleb128 101
	.uleb128 0x19
	.string	"NE"
	.sleb128 102
	.uleb128 0x19
	.string	"EQ"
	.sleb128 103
	.uleb128 0x19
	.string	"GE"
	.sleb128 104
	.uleb128 0x19
	.string	"GT"
	.sleb128 105
	.uleb128 0x19
	.string	"LE"
	.sleb128 106
	.uleb128 0x19
	.string	"LT"
	.sleb128 107
	.uleb128 0x19
	.string	"GEU"
	.sleb128 108
	.uleb128 0x19
	.string	"GTU"
	.sleb128 109
	.uleb128 0x19
	.string	"LEU"
	.sleb128 110
	.uleb128 0x19
	.string	"LTU"
	.sleb128 111
	.uleb128 0xd
	.long	.LASF280
	.sleb128 112
	.uleb128 0xd
	.long	.LASF281
	.sleb128 113
	.uleb128 0xd
	.long	.LASF282
	.sleb128 114
	.uleb128 0xd
	.long	.LASF283
	.sleb128 115
	.uleb128 0xd
	.long	.LASF284
	.sleb128 116
	.uleb128 0xd
	.long	.LASF285
	.sleb128 117
	.uleb128 0xd
	.long	.LASF286
	.sleb128 118
	.uleb128 0xd
	.long	.LASF287
	.sleb128 119
	.uleb128 0xd
	.long	.LASF288
	.sleb128 120
	.uleb128 0xd
	.long	.LASF289
	.sleb128 121
	.uleb128 0xd
	.long	.LASF290
	.sleb128 122
	.uleb128 0xd
	.long	.LASF291
	.sleb128 123
	.uleb128 0xd
	.long	.LASF292
	.sleb128 124
	.uleb128 0xd
	.long	.LASF293
	.sleb128 125
	.uleb128 0x19
	.string	"FIX"
	.sleb128 126
	.uleb128 0xd
	.long	.LASF294
	.sleb128 127
	.uleb128 0xd
	.long	.LASF295
	.sleb128 128
	.uleb128 0x19
	.string	"ABS"
	.sleb128 129
	.uleb128 0xd
	.long	.LASF296
	.sleb128 130
	.uleb128 0x19
	.string	"FFS"
	.sleb128 131
	.uleb128 0xd
	.long	.LASF297
	.sleb128 132
	.uleb128 0xd
	.long	.LASF298
	.sleb128 133
	.uleb128 0xd
	.long	.LASF299
	.sleb128 134
	.uleb128 0xd
	.long	.LASF300
	.sleb128 135
	.uleb128 0xd
	.long	.LASF301
	.sleb128 136
	.uleb128 0xd
	.long	.LASF302
	.sleb128 137
	.uleb128 0xd
	.long	.LASF303
	.sleb128 138
	.uleb128 0xd
	.long	.LASF304
	.sleb128 139
	.uleb128 0xd
	.long	.LASF305
	.sleb128 140
	.uleb128 0xd
	.long	.LASF306
	.sleb128 141
	.uleb128 0xd
	.long	.LASF307
	.sleb128 142
	.uleb128 0xd
	.long	.LASF308
	.sleb128 143
	.uleb128 0xd
	.long	.LASF309
	.sleb128 144
	.uleb128 0xd
	.long	.LASF310
	.sleb128 145
	.uleb128 0xd
	.long	.LASF311
	.sleb128 146
	.uleb128 0xd
	.long	.LASF312
	.sleb128 147
	.uleb128 0xd
	.long	.LASF313
	.sleb128 148
	.uleb128 0xd
	.long	.LASF314
	.sleb128 149
	.uleb128 0xd
	.long	.LASF315
	.sleb128 150
	.uleb128 0xd
	.long	.LASF316
	.sleb128 151
	.uleb128 0x19
	.string	"PHI"
	.sleb128 152
	.uleb128 0xd
	.long	.LASF317
	.sleb128 153
	.byte	0
	.uleb128 0x1a
	.byte	0x4
	.byte	0x2
	.byte	0x44
	.long	0xbaf
	.uleb128 0x5
	.long	.LASF318
	.byte	0x2
	.byte	0x47
	.long	0x266
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0
	.uleb128 0x5
	.long	.LASF319
	.byte	0x2
	.byte	0x49
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0
	.uleb128 0x5
	.long	.LASF320
	.byte	0x2
	.byte	0x4a
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0
	.uleb128 0x5
	.long	.LASF321
	.byte	0x2
	.byte	0x4c
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0
	.uleb128 0x5
	.long	.LASF322
	.byte	0x2
	.byte	0x4e
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0
	.uleb128 0x5
	.long	.LASF323
	.byte	0x2
	.byte	0x50
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0
	.uleb128 0x5
	.long	.LASF324
	.byte	0x2
	.byte	0x53
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0
	.uleb128 0x5
	.long	.LASF325
	.byte	0x2
	.byte	0x55
	.long	0x266
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.long	.LASF326
	.byte	0x2
	.byte	0x56
	.long	0xb2e
	.uleb128 0x1a
	.byte	0x28
	.byte	0x2
	.byte	0x5c
	.long	0xbff
	.uleb128 0x8
	.long	.LASF327
	.byte	0x2
	.byte	0x5e
	.long	0x26f
	.byte	0
	.uleb128 0x8
	.long	.LASF328
	.byte	0x2
	.byte	0x5f
	.long	0x123
	.byte	0x8
	.uleb128 0x8
	.long	.LASF329
	.byte	0x2
	.byte	0x60
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF330
	.byte	0x2
	.byte	0x61
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF331
	.byte	0x2
	.byte	0x62
	.long	0x266
	.byte	0x20
	.byte	0
	.uleb128 0x7
	.long	.LASF332
	.byte	0x2
	.byte	0x63
	.long	0xbba
	.uleb128 0x1b
	.long	.LASF1463
	.byte	0x8
	.byte	0x2
	.byte	0x67
	.long	0xca5
	.uleb128 0x1c
	.long	.LASF333
	.byte	0x2
	.byte	0x69
	.long	0x26f
	.uleb128 0x1c
	.long	.LASF334
	.byte	0x2
	.byte	0x6a
	.long	0x139
	.uleb128 0x1c
	.long	.LASF335
	.byte	0x2
	.byte	0x6b
	.long	0x266
	.uleb128 0x1c
	.long	.LASF336
	.byte	0x2
	.byte	0x6c
	.long	0x4cd
	.uleb128 0x1d
	.string	"rtx"
	.byte	0x2
	.byte	0x6d
	.long	0x2d
	.uleb128 0x1c
	.long	.LASF10
	.byte	0x2
	.byte	0x6e
	.long	0xed
	.uleb128 0x1c
	.long	.LASF337
	.byte	0x2
	.byte	0x6f
	.long	0x574
	.uleb128 0x1c
	.long	.LASF338
	.byte	0x2
	.byte	0x70
	.long	0xbaf
	.uleb128 0x1c
	.long	.LASF339
	.byte	0x2
	.byte	0x71
	.long	0xcaa
	.uleb128 0x1c
	.long	.LASF340
	.byte	0x2
	.byte	0x72
	.long	0xcb5
	.uleb128 0x1c
	.long	.LASF341
	.byte	0x2
	.byte	0x73
	.long	0x123
	.uleb128 0x1d
	.string	"bb"
	.byte	0x2
	.byte	0x74
	.long	0xcc0
	.uleb128 0x1c
	.long	.LASF342
	.byte	0x2
	.byte	0x75
	.long	0xcc6
	.byte	0
	.uleb128 0x1e
	.long	.LASF343
	.uleb128 0x3
	.byte	0x8
	.long	0xca5
	.uleb128 0x1e
	.long	.LASF344
	.uleb128 0x3
	.byte	0x8
	.long	0xcb0
	.uleb128 0x1e
	.long	.LASF345
	.uleb128 0x3
	.byte	0x8
	.long	0xcbb
	.uleb128 0x3
	.byte	0x8
	.long	0xbff
	.uleb128 0x7
	.long	.LASF346
	.byte	0x2
	.byte	0x76
	.long	0xc0a
	.uleb128 0x12
	.long	0xccc
	.long	0xce7
	.uleb128 0x13
	.long	0x140
	.byte	0
	.byte	0
	.uleb128 0x12
	.long	0x2d
	.long	0xcf7
	.uleb128 0x13
	.long	0x140
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	.LASF347
	.byte	0x4
	.byte	0x2
	.value	0x1c3
	.long	0xdb9
	.uleb128 0xd
	.long	.LASF348
	.sleb128 1
	.uleb128 0xd
	.long	.LASF349
	.sleb128 2
	.uleb128 0xd
	.long	.LASF350
	.sleb128 3
	.uleb128 0xd
	.long	.LASF351
	.sleb128 4
	.uleb128 0xd
	.long	.LASF352
	.sleb128 5
	.uleb128 0xd
	.long	.LASF353
	.sleb128 6
	.uleb128 0xd
	.long	.LASF354
	.sleb128 7
	.uleb128 0xd
	.long	.LASF355
	.sleb128 8
	.uleb128 0xd
	.long	.LASF356
	.sleb128 9
	.uleb128 0xd
	.long	.LASF357
	.sleb128 10
	.uleb128 0xd
	.long	.LASF358
	.sleb128 11
	.uleb128 0xd
	.long	.LASF359
	.sleb128 12
	.uleb128 0xd
	.long	.LASF360
	.sleb128 13
	.uleb128 0xd
	.long	.LASF361
	.sleb128 14
	.uleb128 0xd
	.long	.LASF362
	.sleb128 15
	.uleb128 0xd
	.long	.LASF363
	.sleb128 16
	.uleb128 0xd
	.long	.LASF364
	.sleb128 17
	.uleb128 0xd
	.long	.LASF365
	.sleb128 18
	.uleb128 0xd
	.long	.LASF366
	.sleb128 19
	.uleb128 0xd
	.long	.LASF367
	.sleb128 20
	.uleb128 0xd
	.long	.LASF368
	.sleb128 21
	.uleb128 0xd
	.long	.LASF369
	.sleb128 22
	.uleb128 0xd
	.long	.LASF370
	.sleb128 23
	.uleb128 0xd
	.long	.LASF371
	.sleb128 24
	.uleb128 0xd
	.long	.LASF372
	.sleb128 25
	.uleb128 0xd
	.long	.LASF373
	.sleb128 26
	.uleb128 0xd
	.long	.LASF374
	.sleb128 27
	.uleb128 0xd
	.long	.LASF375
	.sleb128 28
	.uleb128 0xd
	.long	.LASF376
	.sleb128 29
	.uleb128 0xd
	.long	.LASF377
	.sleb128 30
	.byte	0
	.uleb128 0xc
	.long	.LASF378
	.byte	0x4
	.byte	0x2
	.value	0x297
	.long	0xe68
	.uleb128 0xd
	.long	.LASF379
	.sleb128 -100
	.uleb128 0xd
	.long	.LASF380
	.sleb128 -99
	.uleb128 0xd
	.long	.LASF381
	.sleb128 -98
	.uleb128 0xd
	.long	.LASF382
	.sleb128 -97
	.uleb128 0xd
	.long	.LASF383
	.sleb128 -96
	.uleb128 0xd
	.long	.LASF384
	.sleb128 -95
	.uleb128 0xd
	.long	.LASF385
	.sleb128 -94
	.uleb128 0xd
	.long	.LASF386
	.sleb128 -93
	.uleb128 0xd
	.long	.LASF387
	.sleb128 -92
	.uleb128 0xd
	.long	.LASF388
	.sleb128 -91
	.uleb128 0xd
	.long	.LASF389
	.sleb128 -90
	.uleb128 0xd
	.long	.LASF390
	.sleb128 -89
	.uleb128 0xd
	.long	.LASF391
	.sleb128 -88
	.uleb128 0xd
	.long	.LASF392
	.sleb128 -87
	.uleb128 0xd
	.long	.LASF393
	.sleb128 -86
	.uleb128 0xd
	.long	.LASF394
	.sleb128 -85
	.uleb128 0xd
	.long	.LASF395
	.sleb128 -84
	.uleb128 0xd
	.long	.LASF396
	.sleb128 -83
	.uleb128 0xd
	.long	.LASF397
	.sleb128 -82
	.uleb128 0xd
	.long	.LASF398
	.sleb128 -81
	.uleb128 0xd
	.long	.LASF399
	.sleb128 -80
	.uleb128 0xd
	.long	.LASF400
	.sleb128 -79
	.uleb128 0xd
	.long	.LASF401
	.sleb128 -78
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2d
	.uleb128 0xc
	.long	.LASF402
	.byte	0x4
	.byte	0x2
	.value	0x630
	.long	0xec4
	.uleb128 0xd
	.long	.LASF403
	.sleb128 0
	.uleb128 0xd
	.long	.LASF404
	.sleb128 1
	.uleb128 0xd
	.long	.LASF405
	.sleb128 2
	.uleb128 0xd
	.long	.LASF406
	.sleb128 3
	.uleb128 0xd
	.long	.LASF407
	.sleb128 4
	.uleb128 0xd
	.long	.LASF408
	.sleb128 5
	.uleb128 0xd
	.long	.LASF409
	.sleb128 6
	.uleb128 0xd
	.long	.LASF410
	.sleb128 7
	.uleb128 0xd
	.long	.LASF411
	.sleb128 8
	.uleb128 0xd
	.long	.LASF412
	.sleb128 9
	.uleb128 0xd
	.long	.LASF413
	.sleb128 10
	.uleb128 0xd
	.long	.LASF414
	.sleb128 11
	.byte	0
	.uleb128 0x18
	.long	.LASF415
	.byte	0x4
	.byte	0xa
	.byte	0x7
	.long	0x1db1
	.uleb128 0xd
	.long	.LASF416
	.sleb128 0
	.uleb128 0xd
	.long	.LASF417
	.sleb128 2
	.uleb128 0xd
	.long	.LASF418
	.sleb128 15
	.uleb128 0xd
	.long	.LASF419
	.sleb128 16
	.uleb128 0xd
	.long	.LASF420
	.sleb128 30
	.uleb128 0xd
	.long	.LASF421
	.sleb128 31
	.uleb128 0xd
	.long	.LASF422
	.sleb128 42
	.uleb128 0xd
	.long	.LASF423
	.sleb128 73
	.uleb128 0xd
	.long	.LASF424
	.sleb128 77
	.uleb128 0xd
	.long	.LASF425
	.sleb128 80
	.uleb128 0xd
	.long	.LASF426
	.sleb128 105
	.uleb128 0xd
	.long	.LASF427
	.sleb128 106
	.uleb128 0xd
	.long	.LASF428
	.sleb128 107
	.uleb128 0xd
	.long	.LASF429
	.sleb128 115
	.uleb128 0xd
	.long	.LASF430
	.sleb128 116
	.uleb128 0xd
	.long	.LASF431
	.sleb128 117
	.uleb128 0xd
	.long	.LASF432
	.sleb128 118
	.uleb128 0xd
	.long	.LASF433
	.sleb128 120
	.uleb128 0xd
	.long	.LASF434
	.sleb128 121
	.uleb128 0xd
	.long	.LASF435
	.sleb128 122
	.uleb128 0xd
	.long	.LASF436
	.sleb128 123
	.uleb128 0xd
	.long	.LASF437
	.sleb128 125
	.uleb128 0xd
	.long	.LASF438
	.sleb128 126
	.uleb128 0xd
	.long	.LASF439
	.sleb128 142
	.uleb128 0xd
	.long	.LASF440
	.sleb128 143
	.uleb128 0xd
	.long	.LASF441
	.sleb128 153
	.uleb128 0xd
	.long	.LASF442
	.sleb128 154
	.uleb128 0xd
	.long	.LASF443
	.sleb128 155
	.uleb128 0xd
	.long	.LASF444
	.sleb128 156
	.uleb128 0xd
	.long	.LASF445
	.sleb128 158
	.uleb128 0xd
	.long	.LASF446
	.sleb128 159
	.uleb128 0xd
	.long	.LASF447
	.sleb128 160
	.uleb128 0xd
	.long	.LASF448
	.sleb128 161
	.uleb128 0xd
	.long	.LASF449
	.sleb128 163
	.uleb128 0xd
	.long	.LASF450
	.sleb128 164
	.uleb128 0xd
	.long	.LASF451
	.sleb128 165
	.uleb128 0xd
	.long	.LASF452
	.sleb128 166
	.uleb128 0xd
	.long	.LASF453
	.sleb128 167
	.uleb128 0xd
	.long	.LASF454
	.sleb128 173
	.uleb128 0xd
	.long	.LASF455
	.sleb128 179
	.uleb128 0xd
	.long	.LASF456
	.sleb128 180
	.uleb128 0xd
	.long	.LASF457
	.sleb128 181
	.uleb128 0xd
	.long	.LASF458
	.sleb128 182
	.uleb128 0xd
	.long	.LASF459
	.sleb128 183
	.uleb128 0xd
	.long	.LASF460
	.sleb128 184
	.uleb128 0xd
	.long	.LASF461
	.sleb128 191
	.uleb128 0xd
	.long	.LASF462
	.sleb128 208
	.uleb128 0xd
	.long	.LASF463
	.sleb128 227
	.uleb128 0xd
	.long	.LASF464
	.sleb128 231
	.uleb128 0xd
	.long	.LASF465
	.sleb128 235
	.uleb128 0xd
	.long	.LASF466
	.sleb128 236
	.uleb128 0xd
	.long	.LASF467
	.sleb128 266
	.uleb128 0xd
	.long	.LASF468
	.sleb128 267
	.uleb128 0xd
	.long	.LASF469
	.sleb128 274
	.uleb128 0xd
	.long	.LASF470
	.sleb128 275
	.uleb128 0xd
	.long	.LASF471
	.sleb128 277
	.uleb128 0xd
	.long	.LASF472
	.sleb128 281
	.uleb128 0xd
	.long	.LASF473
	.sleb128 302
	.uleb128 0xd
	.long	.LASF474
	.sleb128 355
	.uleb128 0xd
	.long	.LASF475
	.sleb128 356
	.uleb128 0xd
	.long	.LASF476
	.sleb128 358
	.uleb128 0xd
	.long	.LASF477
	.sleb128 359
	.uleb128 0xd
	.long	.LASF478
	.sleb128 374
	.uleb128 0xd
	.long	.LASF479
	.sleb128 375
	.uleb128 0xd
	.long	.LASF480
	.sleb128 377
	.uleb128 0xd
	.long	.LASF481
	.sleb128 378
	.uleb128 0xd
	.long	.LASF482
	.sleb128 405
	.uleb128 0xd
	.long	.LASF483
	.sleb128 407
	.uleb128 0xd
	.long	.LASF484
	.sleb128 418
	.uleb128 0xd
	.long	.LASF485
	.sleb128 423
	.uleb128 0xd
	.long	.LASF486
	.sleb128 425
	.uleb128 0xd
	.long	.LASF487
	.sleb128 426
	.uleb128 0xd
	.long	.LASF488
	.sleb128 448
	.uleb128 0xd
	.long	.LASF489
	.sleb128 487
	.uleb128 0xd
	.long	.LASF490
	.sleb128 502
	.uleb128 0xd
	.long	.LASF491
	.sleb128 507
	.uleb128 0xd
	.long	.LASF492
	.sleb128 513
	.uleb128 0xd
	.long	.LASF493
	.sleb128 514
	.uleb128 0xd
	.long	.LASF494
	.sleb128 515
	.uleb128 0xd
	.long	.LASF495
	.sleb128 516
	.uleb128 0xd
	.long	.LASF496
	.sleb128 517
	.uleb128 0xd
	.long	.LASF497
	.sleb128 518
	.uleb128 0xd
	.long	.LASF498
	.sleb128 519
	.uleb128 0xd
	.long	.LASF499
	.sleb128 520
	.uleb128 0xd
	.long	.LASF500
	.sleb128 521
	.uleb128 0xd
	.long	.LASF501
	.sleb128 522
	.uleb128 0xd
	.long	.LASF502
	.sleb128 523
	.uleb128 0xd
	.long	.LASF503
	.sleb128 524
	.uleb128 0xd
	.long	.LASF504
	.sleb128 559
	.uleb128 0xd
	.long	.LASF505
	.sleb128 560
	.uleb128 0xd
	.long	.LASF506
	.sleb128 561
	.uleb128 0xd
	.long	.LASF507
	.sleb128 562
	.uleb128 0xd
	.long	.LASF508
	.sleb128 563
	.uleb128 0xd
	.long	.LASF509
	.sleb128 564
	.uleb128 0xd
	.long	.LASF510
	.sleb128 566
	.uleb128 0xd
	.long	.LASF511
	.sleb128 567
	.uleb128 0xd
	.long	.LASF512
	.sleb128 572
	.uleb128 0xd
	.long	.LASF513
	.sleb128 573
	.uleb128 0xd
	.long	.LASF514
	.sleb128 575
	.uleb128 0xd
	.long	.LASF515
	.sleb128 576
	.uleb128 0xd
	.long	.LASF516
	.sleb128 577
	.uleb128 0xd
	.long	.LASF517
	.sleb128 578
	.uleb128 0xd
	.long	.LASF518
	.sleb128 580
	.uleb128 0xd
	.long	.LASF519
	.sleb128 581
	.uleb128 0xd
	.long	.LASF520
	.sleb128 582
	.uleb128 0xd
	.long	.LASF521
	.sleb128 583
	.uleb128 0xd
	.long	.LASF522
	.sleb128 584
	.uleb128 0xd
	.long	.LASF523
	.sleb128 585
	.uleb128 0xd
	.long	.LASF524
	.sleb128 586
	.uleb128 0xd
	.long	.LASF525
	.sleb128 587
	.uleb128 0xd
	.long	.LASF526
	.sleb128 588
	.uleb128 0xd
	.long	.LASF527
	.sleb128 589
	.uleb128 0xd
	.long	.LASF528
	.sleb128 590
	.uleb128 0xd
	.long	.LASF529
	.sleb128 591
	.uleb128 0xd
	.long	.LASF530
	.sleb128 592
	.uleb128 0xd
	.long	.LASF531
	.sleb128 593
	.uleb128 0xd
	.long	.LASF532
	.sleb128 594
	.uleb128 0xd
	.long	.LASF533
	.sleb128 595
	.uleb128 0xd
	.long	.LASF534
	.sleb128 596
	.uleb128 0xd
	.long	.LASF535
	.sleb128 597
	.uleb128 0xd
	.long	.LASF536
	.sleb128 598
	.uleb128 0xd
	.long	.LASF537
	.sleb128 599
	.uleb128 0xd
	.long	.LASF538
	.sleb128 600
	.uleb128 0xd
	.long	.LASF539
	.sleb128 601
	.uleb128 0xd
	.long	.LASF540
	.sleb128 602
	.uleb128 0xd
	.long	.LASF541
	.sleb128 603
	.uleb128 0xd
	.long	.LASF542
	.sleb128 604
	.uleb128 0xd
	.long	.LASF543
	.sleb128 605
	.uleb128 0xd
	.long	.LASF544
	.sleb128 606
	.uleb128 0xd
	.long	.LASF545
	.sleb128 607
	.uleb128 0xd
	.long	.LASF546
	.sleb128 608
	.uleb128 0xd
	.long	.LASF547
	.sleb128 609
	.uleb128 0xd
	.long	.LASF548
	.sleb128 610
	.uleb128 0xd
	.long	.LASF549
	.sleb128 611
	.uleb128 0xd
	.long	.LASF550
	.sleb128 612
	.uleb128 0xd
	.long	.LASF551
	.sleb128 613
	.uleb128 0xd
	.long	.LASF552
	.sleb128 615
	.uleb128 0xd
	.long	.LASF553
	.sleb128 636
	.uleb128 0xd
	.long	.LASF554
	.sleb128 637
	.uleb128 0xd
	.long	.LASF555
	.sleb128 638
	.uleb128 0xd
	.long	.LASF556
	.sleb128 639
	.uleb128 0xd
	.long	.LASF557
	.sleb128 640
	.uleb128 0xd
	.long	.LASF558
	.sleb128 649
	.uleb128 0xd
	.long	.LASF559
	.sleb128 650
	.uleb128 0xd
	.long	.LASF560
	.sleb128 657
	.uleb128 0xd
	.long	.LASF561
	.sleb128 659
	.uleb128 0xd
	.long	.LASF562
	.sleb128 660
	.uleb128 0xd
	.long	.LASF563
	.sleb128 661
	.uleb128 0xd
	.long	.LASF564
	.sleb128 662
	.uleb128 0xd
	.long	.LASF565
	.sleb128 663
	.uleb128 0xd
	.long	.LASF566
	.sleb128 664
	.uleb128 0xd
	.long	.LASF567
	.sleb128 672
	.uleb128 0xd
	.long	.LASF568
	.sleb128 674
	.uleb128 0xd
	.long	.LASF569
	.sleb128 675
	.uleb128 0xd
	.long	.LASF570
	.sleb128 676
	.uleb128 0xd
	.long	.LASF571
	.sleb128 677
	.uleb128 0xd
	.long	.LASF572
	.sleb128 678
	.uleb128 0xd
	.long	.LASF573
	.sleb128 679
	.uleb128 0xd
	.long	.LASF574
	.sleb128 680
	.uleb128 0xd
	.long	.LASF575
	.sleb128 681
	.uleb128 0xd
	.long	.LASF576
	.sleb128 682
	.uleb128 0xd
	.long	.LASF577
	.sleb128 683
	.uleb128 0xd
	.long	.LASF578
	.sleb128 684
	.uleb128 0xd
	.long	.LASF579
	.sleb128 685
	.uleb128 0xd
	.long	.LASF580
	.sleb128 686
	.uleb128 0xd
	.long	.LASF581
	.sleb128 687
	.uleb128 0xd
	.long	.LASF582
	.sleb128 688
	.uleb128 0xd
	.long	.LASF583
	.sleb128 689
	.uleb128 0xd
	.long	.LASF584
	.sleb128 690
	.uleb128 0xd
	.long	.LASF585
	.sleb128 691
	.uleb128 0xd
	.long	.LASF586
	.sleb128 692
	.uleb128 0xd
	.long	.LASF587
	.sleb128 693
	.uleb128 0xd
	.long	.LASF588
	.sleb128 694
	.uleb128 0xd
	.long	.LASF589
	.sleb128 695
	.uleb128 0xd
	.long	.LASF590
	.sleb128 696
	.uleb128 0xd
	.long	.LASF591
	.sleb128 697
	.uleb128 0xd
	.long	.LASF592
	.sleb128 698
	.uleb128 0xd
	.long	.LASF593
	.sleb128 699
	.uleb128 0xd
	.long	.LASF594
	.sleb128 700
	.uleb128 0xd
	.long	.LASF595
	.sleb128 701
	.uleb128 0xd
	.long	.LASF596
	.sleb128 702
	.uleb128 0xd
	.long	.LASF597
	.sleb128 703
	.uleb128 0xd
	.long	.LASF598
	.sleb128 708
	.uleb128 0xd
	.long	.LASF599
	.sleb128 712
	.uleb128 0xd
	.long	.LASF600
	.sleb128 718
	.uleb128 0xd
	.long	.LASF601
	.sleb128 724
	.uleb128 0xd
	.long	.LASF602
	.sleb128 726
	.uleb128 0xd
	.long	.LASF603
	.sleb128 727
	.uleb128 0xd
	.long	.LASF604
	.sleb128 728
	.uleb128 0xd
	.long	.LASF605
	.sleb128 729
	.uleb128 0xd
	.long	.LASF606
	.sleb128 730
	.uleb128 0xd
	.long	.LASF607
	.sleb128 731
	.uleb128 0xd
	.long	.LASF608
	.sleb128 732
	.uleb128 0xd
	.long	.LASF609
	.sleb128 733
	.uleb128 0xd
	.long	.LASF610
	.sleb128 734
	.uleb128 0xd
	.long	.LASF611
	.sleb128 735
	.uleb128 0xd
	.long	.LASF612
	.sleb128 736
	.uleb128 0xd
	.long	.LASF613
	.sleb128 737
	.uleb128 0xd
	.long	.LASF614
	.sleb128 738
	.uleb128 0xd
	.long	.LASF615
	.sleb128 739
	.uleb128 0xd
	.long	.LASF616
	.sleb128 740
	.uleb128 0xd
	.long	.LASF617
	.sleb128 741
	.uleb128 0xd
	.long	.LASF618
	.sleb128 742
	.uleb128 0xd
	.long	.LASF619
	.sleb128 743
	.uleb128 0xd
	.long	.LASF620
	.sleb128 744
	.uleb128 0xd
	.long	.LASF621
	.sleb128 745
	.uleb128 0xd
	.long	.LASF622
	.sleb128 746
	.uleb128 0xd
	.long	.LASF623
	.sleb128 747
	.uleb128 0xd
	.long	.LASF624
	.sleb128 748
	.uleb128 0xd
	.long	.LASF625
	.sleb128 749
	.uleb128 0xd
	.long	.LASF626
	.sleb128 750
	.uleb128 0xd
	.long	.LASF627
	.sleb128 751
	.uleb128 0xd
	.long	.LASF628
	.sleb128 752
	.uleb128 0xd
	.long	.LASF629
	.sleb128 753
	.uleb128 0xd
	.long	.LASF630
	.sleb128 754
	.uleb128 0xd
	.long	.LASF631
	.sleb128 755
	.uleb128 0xd
	.long	.LASF632
	.sleb128 756
	.uleb128 0xd
	.long	.LASF633
	.sleb128 757
	.uleb128 0xd
	.long	.LASF634
	.sleb128 758
	.uleb128 0xd
	.long	.LASF635
	.sleb128 759
	.uleb128 0xd
	.long	.LASF636
	.sleb128 760
	.uleb128 0xd
	.long	.LASF637
	.sleb128 761
	.uleb128 0xd
	.long	.LASF638
	.sleb128 762
	.uleb128 0xd
	.long	.LASF639
	.sleb128 763
	.uleb128 0xd
	.long	.LASF640
	.sleb128 764
	.uleb128 0xd
	.long	.LASF641
	.sleb128 765
	.uleb128 0xd
	.long	.LASF642
	.sleb128 766
	.uleb128 0xd
	.long	.LASF643
	.sleb128 767
	.uleb128 0xd
	.long	.LASF644
	.sleb128 768
	.uleb128 0xd
	.long	.LASF645
	.sleb128 769
	.uleb128 0xd
	.long	.LASF646
	.sleb128 770
	.uleb128 0xd
	.long	.LASF647
	.sleb128 771
	.uleb128 0xd
	.long	.LASF648
	.sleb128 772
	.uleb128 0xd
	.long	.LASF649
	.sleb128 773
	.uleb128 0xd
	.long	.LASF650
	.sleb128 774
	.uleb128 0xd
	.long	.LASF651
	.sleb128 775
	.uleb128 0xd
	.long	.LASF652
	.sleb128 776
	.uleb128 0xd
	.long	.LASF653
	.sleb128 777
	.uleb128 0xd
	.long	.LASF654
	.sleb128 778
	.uleb128 0xd
	.long	.LASF655
	.sleb128 779
	.uleb128 0xd
	.long	.LASF656
	.sleb128 780
	.uleb128 0xd
	.long	.LASF657
	.sleb128 781
	.uleb128 0xd
	.long	.LASF658
	.sleb128 782
	.uleb128 0xd
	.long	.LASF659
	.sleb128 783
	.uleb128 0xd
	.long	.LASF660
	.sleb128 784
	.uleb128 0xd
	.long	.LASF661
	.sleb128 785
	.uleb128 0xd
	.long	.LASF662
	.sleb128 786
	.uleb128 0xd
	.long	.LASF663
	.sleb128 787
	.uleb128 0xd
	.long	.LASF664
	.sleb128 788
	.uleb128 0xd
	.long	.LASF665
	.sleb128 789
	.uleb128 0xd
	.long	.LASF666
	.sleb128 790
	.uleb128 0xd
	.long	.LASF667
	.sleb128 791
	.uleb128 0xd
	.long	.LASF668
	.sleb128 792
	.uleb128 0xd
	.long	.LASF669
	.sleb128 793
	.uleb128 0xd
	.long	.LASF670
	.sleb128 794
	.uleb128 0xd
	.long	.LASF671
	.sleb128 795
	.uleb128 0xd
	.long	.LASF672
	.sleb128 796
	.uleb128 0xd
	.long	.LASF673
	.sleb128 797
	.uleb128 0xd
	.long	.LASF674
	.sleb128 798
	.uleb128 0xd
	.long	.LASF675
	.sleb128 799
	.uleb128 0xd
	.long	.LASF676
	.sleb128 800
	.uleb128 0xd
	.long	.LASF677
	.sleb128 801
	.uleb128 0xd
	.long	.LASF678
	.sleb128 802
	.uleb128 0xd
	.long	.LASF679
	.sleb128 803
	.uleb128 0xd
	.long	.LASF680
	.sleb128 806
	.uleb128 0xd
	.long	.LASF681
	.sleb128 807
	.uleb128 0xd
	.long	.LASF682
	.sleb128 808
	.uleb128 0xd
	.long	.LASF683
	.sleb128 809
	.uleb128 0xd
	.long	.LASF684
	.sleb128 810
	.uleb128 0xd
	.long	.LASF685
	.sleb128 811
	.uleb128 0xd
	.long	.LASF686
	.sleb128 812
	.uleb128 0xd
	.long	.LASF687
	.sleb128 813
	.uleb128 0xd
	.long	.LASF688
	.sleb128 814
	.uleb128 0xd
	.long	.LASF689
	.sleb128 815
	.uleb128 0xd
	.long	.LASF690
	.sleb128 816
	.uleb128 0xd
	.long	.LASF691
	.sleb128 817
	.uleb128 0xd
	.long	.LASF692
	.sleb128 818
	.uleb128 0xd
	.long	.LASF693
	.sleb128 819
	.uleb128 0xd
	.long	.LASF694
	.sleb128 820
	.uleb128 0xd
	.long	.LASF695
	.sleb128 821
	.uleb128 0xd
	.long	.LASF696
	.sleb128 822
	.uleb128 0xd
	.long	.LASF697
	.sleb128 823
	.uleb128 0xd
	.long	.LASF698
	.sleb128 824
	.uleb128 0xd
	.long	.LASF699
	.sleb128 825
	.uleb128 0xd
	.long	.LASF700
	.sleb128 826
	.uleb128 0xd
	.long	.LASF701
	.sleb128 827
	.uleb128 0xd
	.long	.LASF702
	.sleb128 828
	.uleb128 0xd
	.long	.LASF703
	.sleb128 829
	.uleb128 0xd
	.long	.LASF704
	.sleb128 830
	.uleb128 0xd
	.long	.LASF705
	.sleb128 831
	.uleb128 0xd
	.long	.LASF706
	.sleb128 834
	.uleb128 0xd
	.long	.LASF707
	.sleb128 835
	.uleb128 0xd
	.long	.LASF708
	.sleb128 836
	.uleb128 0xd
	.long	.LASF709
	.sleb128 837
	.uleb128 0xd
	.long	.LASF710
	.sleb128 838
	.uleb128 0xd
	.long	.LASF711
	.sleb128 839
	.uleb128 0xd
	.long	.LASF712
	.sleb128 840
	.uleb128 0xd
	.long	.LASF713
	.sleb128 841
	.uleb128 0xd
	.long	.LASF714
	.sleb128 842
	.uleb128 0xd
	.long	.LASF715
	.sleb128 843
	.uleb128 0xd
	.long	.LASF716
	.sleb128 844
	.uleb128 0xd
	.long	.LASF717
	.sleb128 846
	.uleb128 0xd
	.long	.LASF718
	.sleb128 847
	.uleb128 0xd
	.long	.LASF719
	.sleb128 848
	.uleb128 0xd
	.long	.LASF720
	.sleb128 849
	.uleb128 0xd
	.long	.LASF721
	.sleb128 850
	.uleb128 0xd
	.long	.LASF722
	.sleb128 851
	.uleb128 0xd
	.long	.LASF723
	.sleb128 852
	.uleb128 0xd
	.long	.LASF724
	.sleb128 861
	.uleb128 0xd
	.long	.LASF725
	.sleb128 865
	.uleb128 0xd
	.long	.LASF726
	.sleb128 870
	.uleb128 0xd
	.long	.LASF727
	.sleb128 871
	.uleb128 0xd
	.long	.LASF728
	.sleb128 878
	.uleb128 0xd
	.long	.LASF729
	.sleb128 880
	.uleb128 0xd
	.long	.LASF730
	.sleb128 884
	.uleb128 0xd
	.long	.LASF731
	.sleb128 888
	.uleb128 0xd
	.long	.LASF732
	.sleb128 892
	.uleb128 0xd
	.long	.LASF733
	.sleb128 904
	.uleb128 0xd
	.long	.LASF734
	.sleb128 905
	.uleb128 0xd
	.long	.LASF735
	.sleb128 906
	.uleb128 0xd
	.long	.LASF736
	.sleb128 907
	.uleb128 0xd
	.long	.LASF737
	.sleb128 908
	.uleb128 0xd
	.long	.LASF738
	.sleb128 909
	.uleb128 0xd
	.long	.LASF739
	.sleb128 913
	.uleb128 0xd
	.long	.LASF740
	.sleb128 916
	.uleb128 0xd
	.long	.LASF741
	.sleb128 919
	.uleb128 0xd
	.long	.LASF742
	.sleb128 922
	.uleb128 0xd
	.long	.LASF743
	.sleb128 925
	.uleb128 0xd
	.long	.LASF744
	.sleb128 926
	.uleb128 0xd
	.long	.LASF745
	.sleb128 927
	.uleb128 0xd
	.long	.LASF746
	.sleb128 928
	.uleb128 0xd
	.long	.LASF747
	.sleb128 932
	.uleb128 0xd
	.long	.LASF748
	.sleb128 933
	.uleb128 0xd
	.long	.LASF749
	.sleb128 934
	.uleb128 0xd
	.long	.LASF750
	.sleb128 935
	.uleb128 0xd
	.long	.LASF751
	.sleb128 939
	.uleb128 0xd
	.long	.LASF752
	.sleb128 940
	.uleb128 0xd
	.long	.LASF753
	.sleb128 941
	.uleb128 0xd
	.long	.LASF754
	.sleb128 942
	.uleb128 0xd
	.long	.LASF755
	.sleb128 946
	.uleb128 0xd
	.long	.LASF756
	.sleb128 947
	.uleb128 0xd
	.long	.LASF757
	.sleb128 948
	.uleb128 0xd
	.long	.LASF758
	.sleb128 949
	.uleb128 0xd
	.long	.LASF759
	.sleb128 951
	.uleb128 0xd
	.long	.LASF760
	.sleb128 953
	.uleb128 0xd
	.long	.LASF761
	.sleb128 963
	.uleb128 0xd
	.long	.LASF762
	.sleb128 964
	.uleb128 0xd
	.long	.LASF763
	.sleb128 965
	.uleb128 0xd
	.long	.LASF764
	.sleb128 966
	.uleb128 0xd
	.long	.LASF765
	.sleb128 967
	.uleb128 0xd
	.long	.LASF766
	.sleb128 968
	.uleb128 0xd
	.long	.LASF767
	.sleb128 969
	.uleb128 0xd
	.long	.LASF768
	.sleb128 971
	.uleb128 0xd
	.long	.LASF769
	.sleb128 972
	.uleb128 0xd
	.long	.LASF770
	.sleb128 973
	.uleb128 0xd
	.long	.LASF771
	.sleb128 974
	.uleb128 0xd
	.long	.LASF772
	.sleb128 975
	.uleb128 0xd
	.long	.LASF773
	.sleb128 976
	.uleb128 0xd
	.long	.LASF774
	.sleb128 977
	.uleb128 0xd
	.long	.LASF775
	.sleb128 978
	.uleb128 0xd
	.long	.LASF776
	.sleb128 979
	.uleb128 0xd
	.long	.LASF777
	.sleb128 980
	.uleb128 0xd
	.long	.LASF778
	.sleb128 981
	.uleb128 0xd
	.long	.LASF779
	.sleb128 982
	.uleb128 0xd
	.long	.LASF780
	.sleb128 983
	.uleb128 0xd
	.long	.LASF781
	.sleb128 984
	.uleb128 0xd
	.long	.LASF782
	.sleb128 985
	.uleb128 0xd
	.long	.LASF783
	.sleb128 986
	.uleb128 0xd
	.long	.LASF784
	.sleb128 987
	.uleb128 0xd
	.long	.LASF785
	.sleb128 988
	.uleb128 0xd
	.long	.LASF786
	.sleb128 989
	.uleb128 0xd
	.long	.LASF787
	.sleb128 990
	.uleb128 0xd
	.long	.LASF788
	.sleb128 991
	.uleb128 0xd
	.long	.LASF789
	.sleb128 992
	.uleb128 0xd
	.long	.LASF790
	.sleb128 993
	.uleb128 0xd
	.long	.LASF791
	.sleb128 994
	.uleb128 0xd
	.long	.LASF792
	.sleb128 995
	.uleb128 0xd
	.long	.LASF793
	.sleb128 996
	.uleb128 0xd
	.long	.LASF794
	.sleb128 997
	.uleb128 0xd
	.long	.LASF795
	.sleb128 998
	.uleb128 0xd
	.long	.LASF796
	.sleb128 999
	.uleb128 0xd
	.long	.LASF797
	.sleb128 1000
	.uleb128 0xd
	.long	.LASF798
	.sleb128 1002
	.uleb128 0xd
	.long	.LASF799
	.sleb128 1006
	.uleb128 0xd
	.long	.LASF800
	.sleb128 1007
	.uleb128 0xd
	.long	.LASF801
	.sleb128 1008
	.uleb128 0xd
	.long	.LASF802
	.sleb128 1009
	.uleb128 0xd
	.long	.LASF803
	.sleb128 1011
	.uleb128 0xd
	.long	.LASF804
	.sleb128 1012
	.uleb128 0xd
	.long	.LASF805
	.sleb128 1016
	.uleb128 0xd
	.long	.LASF806
	.sleb128 1017
	.uleb128 0xd
	.long	.LASF807
	.sleb128 1018
	.uleb128 0xd
	.long	.LASF808
	.sleb128 1019
	.uleb128 0xd
	.long	.LASF809
	.sleb128 1020
	.uleb128 0xd
	.long	.LASF810
	.sleb128 1021
	.uleb128 0xd
	.long	.LASF811
	.sleb128 1022
	.uleb128 0xd
	.long	.LASF812
	.sleb128 1023
	.uleb128 0xd
	.long	.LASF813
	.sleb128 1024
	.uleb128 0xd
	.long	.LASF814
	.sleb128 1025
	.uleb128 0xd
	.long	.LASF815
	.sleb128 1026
	.uleb128 0xd
	.long	.LASF816
	.sleb128 1027
	.uleb128 0xd
	.long	.LASF817
	.sleb128 1029
	.uleb128 0xd
	.long	.LASF818
	.sleb128 1030
	.uleb128 0xd
	.long	.LASF819
	.sleb128 1031
	.uleb128 0xd
	.long	.LASF820
	.sleb128 1032
	.uleb128 0xd
	.long	.LASF821
	.sleb128 1039
	.uleb128 0xd
	.long	.LASF822
	.sleb128 1046
	.uleb128 0xd
	.long	.LASF823
	.sleb128 1047
	.uleb128 0xd
	.long	.LASF824
	.sleb128 1052
	.uleb128 0xd
	.long	.LASF825
	.sleb128 1059
	.uleb128 0xd
	.long	.LASF826
	.sleb128 1065
	.uleb128 0xd
	.long	.LASF827
	.sleb128 1066
	.uleb128 0xd
	.long	.LASF828
	.sleb128 1071
	.uleb128 0xd
	.long	.LASF829
	.sleb128 1073
	.uleb128 0xd
	.long	.LASF830
	.sleb128 1076
	.uleb128 0xd
	.long	.LASF831
	.sleb128 1078
	.uleb128 0xd
	.long	.LASF832
	.sleb128 1080
	.uleb128 0xd
	.long	.LASF833
	.sleb128 1084
	.uleb128 0xd
	.long	.LASF834
	.sleb128 1085
	.uleb128 0xd
	.long	.LASF835
	.sleb128 1086
	.uleb128 0xd
	.long	.LASF836
	.sleb128 1089
	.uleb128 0xd
	.long	.LASF837
	.sleb128 1090
	.uleb128 0xd
	.long	.LASF838
	.sleb128 1091
	.uleb128 0xd
	.long	.LASF839
	.sleb128 1094
	.uleb128 0xd
	.long	.LASF840
	.sleb128 1095
	.uleb128 0xd
	.long	.LASF841
	.sleb128 1096
	.uleb128 0xd
	.long	.LASF842
	.sleb128 1097
	.uleb128 0xd
	.long	.LASF843
	.sleb128 1098
	.uleb128 0xd
	.long	.LASF844
	.sleb128 1101
	.uleb128 0xd
	.long	.LASF845
	.sleb128 1102
	.uleb128 0xd
	.long	.LASF846
	.sleb128 1103
	.uleb128 0xd
	.long	.LASF847
	.sleb128 1104
	.uleb128 0xd
	.long	.LASF848
	.sleb128 1105
	.uleb128 0xd
	.long	.LASF849
	.sleb128 1106
	.uleb128 0xd
	.long	.LASF850
	.sleb128 1107
	.uleb128 0xd
	.long	.LASF851
	.sleb128 1108
	.uleb128 0xd
	.long	.LASF852
	.sleb128 1109
	.uleb128 0xd
	.long	.LASF853
	.sleb128 1110
	.uleb128 0xd
	.long	.LASF854
	.sleb128 1111
	.uleb128 0xd
	.long	.LASF855
	.sleb128 1112
	.uleb128 0xd
	.long	.LASF856
	.sleb128 1113
	.uleb128 0xd
	.long	.LASF857
	.sleb128 1114
	.uleb128 0xd
	.long	.LASF858
	.sleb128 1115
	.uleb128 0xd
	.long	.LASF859
	.sleb128 1116
	.uleb128 0xd
	.long	.LASF860
	.sleb128 1117
	.uleb128 0xd
	.long	.LASF861
	.sleb128 1118
	.uleb128 0xd
	.long	.LASF862
	.sleb128 1119
	.uleb128 0xd
	.long	.LASF863
	.sleb128 1120
	.uleb128 0xd
	.long	.LASF864
	.sleb128 1121
	.uleb128 0xd
	.long	.LASF865
	.sleb128 1122
	.uleb128 0xd
	.long	.LASF866
	.sleb128 1123
	.uleb128 0xd
	.long	.LASF867
	.sleb128 1124
	.uleb128 0xd
	.long	.LASF868
	.sleb128 1125
	.uleb128 0xd
	.long	.LASF869
	.sleb128 1126
	.uleb128 0xd
	.long	.LASF870
	.sleb128 1127
	.uleb128 0xd
	.long	.LASF871
	.sleb128 1128
	.uleb128 0xd
	.long	.LASF872
	.sleb128 1129
	.uleb128 0xd
	.long	.LASF873
	.sleb128 1130
	.uleb128 0xd
	.long	.LASF874
	.sleb128 1131
	.uleb128 0xd
	.long	.LASF875
	.sleb128 1132
	.uleb128 0xd
	.long	.LASF876
	.sleb128 1137
	.uleb128 0xd
	.long	.LASF877
	.sleb128 1138
	.uleb128 0xd
	.long	.LASF878
	.sleb128 1139
	.uleb128 0xd
	.long	.LASF879
	.sleb128 1140
	.uleb128 0xd
	.long	.LASF880
	.sleb128 1141
	.uleb128 0xd
	.long	.LASF881
	.sleb128 1142
	.uleb128 0xd
	.long	.LASF882
	.sleb128 1143
	.uleb128 0xd
	.long	.LASF883
	.sleb128 1144
	.uleb128 0xd
	.long	.LASF884
	.sleb128 1145
	.uleb128 0xd
	.long	.LASF885
	.sleb128 1146
	.uleb128 0xd
	.long	.LASF886
	.sleb128 1147
	.uleb128 0xd
	.long	.LASF887
	.sleb128 1148
	.uleb128 0xd
	.long	.LASF888
	.sleb128 1149
	.uleb128 0xd
	.long	.LASF889
	.sleb128 1150
	.uleb128 0xd
	.long	.LASF890
	.sleb128 1151
	.uleb128 0xd
	.long	.LASF891
	.sleb128 1152
	.uleb128 0xd
	.long	.LASF892
	.sleb128 1153
	.uleb128 0xd
	.long	.LASF893
	.sleb128 1154
	.uleb128 0xd
	.long	.LASF894
	.sleb128 1159
	.uleb128 0xd
	.long	.LASF895
	.sleb128 1160
	.uleb128 0xd
	.long	.LASF896
	.sleb128 1161
	.uleb128 0xd
	.long	.LASF897
	.sleb128 1166
	.uleb128 0xd
	.long	.LASF898
	.sleb128 1167
	.uleb128 0xd
	.long	.LASF899
	.sleb128 1168
	.uleb128 0xd
	.long	.LASF900
	.sleb128 1169
	.uleb128 0xd
	.long	.LASF901
	.sleb128 1170
	.uleb128 0xd
	.long	.LASF902
	.sleb128 1171
	.uleb128 0xd
	.long	.LASF903
	.sleb128 1172
	.uleb128 0xd
	.long	.LASF904
	.sleb128 1173
	.uleb128 0xd
	.long	.LASF905
	.sleb128 1174
	.uleb128 0xd
	.long	.LASF906
	.sleb128 1175
	.uleb128 0xd
	.long	.LASF907
	.sleb128 1176
	.uleb128 0xd
	.long	.LASF908
	.sleb128 1177
	.uleb128 0xd
	.long	.LASF909
	.sleb128 1180
	.uleb128 0xd
	.long	.LASF910
	.sleb128 1183
	.uleb128 0xd
	.long	.LASF911
	.sleb128 1184
	.uleb128 0xd
	.long	.LASF912
	.sleb128 1185
	.uleb128 0xd
	.long	.LASF913
	.sleb128 1186
	.uleb128 0xd
	.long	.LASF914
	.sleb128 1187
	.uleb128 0xd
	.long	.LASF915
	.sleb128 1188
	.uleb128 0xd
	.long	.LASF916
	.sleb128 1189
	.uleb128 0xd
	.long	.LASF917
	.sleb128 1190
	.uleb128 0xd
	.long	.LASF918
	.sleb128 1191
	.uleb128 0xd
	.long	.LASF919
	.sleb128 1192
	.uleb128 0xd
	.long	.LASF920
	.sleb128 1193
	.uleb128 0xd
	.long	.LASF921
	.sleb128 1194
	.uleb128 0xd
	.long	.LASF922
	.sleb128 1195
	.uleb128 0xd
	.long	.LASF923
	.sleb128 1196
	.uleb128 0xd
	.long	.LASF924
	.sleb128 1197
	.uleb128 0xd
	.long	.LASF925
	.sleb128 1198
	.uleb128 0xd
	.long	.LASF926
	.sleb128 1199
	.uleb128 0xd
	.long	.LASF927
	.sleb128 1200
	.uleb128 0xd
	.long	.LASF928
	.sleb128 1201
	.uleb128 0xd
	.long	.LASF929
	.sleb128 1202
	.uleb128 0xd
	.long	.LASF930
	.sleb128 1203
	.uleb128 0xd
	.long	.LASF931
	.sleb128 1204
	.uleb128 0xd
	.long	.LASF932
	.sleb128 1205
	.uleb128 0xd
	.long	.LASF933
	.sleb128 1206
	.uleb128 0xd
	.long	.LASF934
	.sleb128 1209
	.uleb128 0xd
	.long	.LASF935
	.sleb128 1210
	.uleb128 0xd
	.long	.LASF936
	.sleb128 1211
	.uleb128 0xd
	.long	.LASF937
	.sleb128 1212
	.uleb128 0xd
	.long	.LASF938
	.sleb128 1213
	.uleb128 0xd
	.long	.LASF939
	.sleb128 1215
	.uleb128 0xd
	.long	.LASF940
	.sleb128 1216
	.uleb128 0xd
	.long	.LASF941
	.sleb128 1217
	.uleb128 0xd
	.long	.LASF942
	.sleb128 1220
	.uleb128 0xd
	.long	.LASF943
	.sleb128 1223
	.uleb128 0xd
	.long	.LASF944
	.sleb128 1226
	.uleb128 0xd
	.long	.LASF945
	.sleb128 1229
	.uleb128 0xd
	.long	.LASF946
	.sleb128 1233
	.uleb128 0xd
	.long	.LASF947
	.sleb128 1234
	.uleb128 0xd
	.long	.LASF948
	.sleb128 1235
	.uleb128 0xd
	.long	.LASF949
	.sleb128 1298
	.uleb128 0xd
	.long	.LASF950
	.sleb128 1299
	.uleb128 0xd
	.long	.LASF951
	.sleb128 1300
	.uleb128 0xd
	.long	.LASF952
	.sleb128 1301
	.uleb128 0xd
	.long	.LASF953
	.sleb128 1302
	.uleb128 0xd
	.long	.LASF954
	.sleb128 1303
	.uleb128 0xd
	.long	.LASF955
	.sleb128 1304
	.uleb128 0xd
	.long	.LASF956
	.sleb128 1305
	.uleb128 0xd
	.long	.LASF957
	.sleb128 1314
	.uleb128 0xd
	.long	.LASF958
	.sleb128 1315
	.uleb128 0xd
	.long	.LASF959
	.sleb128 1316
	.uleb128 0xd
	.long	.LASF960
	.sleb128 1317
	.byte	0
	.uleb128 0x1a
	.byte	0x10
	.byte	0xb
	.byte	0x2c
	.long	0x1dd2
	.uleb128 0x8
	.long	.LASF415
	.byte	0xb
	.byte	0x2d
	.long	0xec4
	.byte	0
	.uleb128 0x8
	.long	.LASF961
	.byte	0xb
	.byte	0x2e
	.long	0x2d
	.byte	0x8
	.byte	0
	.uleb128 0x1f
	.long	.LASF962
	.value	0x3b8
	.byte	0xb
	.byte	0x29
	.long	0x1df8
	.uleb128 0x8
	.long	.LASF0
	.byte	0xb
	.byte	0x2b
	.long	0x732
	.byte	0
	.uleb128 0x8
	.long	.LASF963
	.byte	0xb
	.byte	0x2f
	.long	0x1df8
	.byte	0x8
	.byte	0
	.uleb128 0x12
	.long	0x1db1
	.long	0x1e08
	.uleb128 0x13
	.long	0x140
	.byte	0x3a
	.byte	0
	.uleb128 0x7
	.long	.LASF962
	.byte	0xb
	.byte	0x30
	.long	0x1e13
	.uleb128 0x3
	.byte	0x8
	.long	0x1dd2
	.uleb128 0x18
	.long	.LASF964
	.byte	0x4
	.byte	0xb
	.byte	0x37
	.long	0x1f52
	.uleb128 0xd
	.long	.LASF965
	.sleb128 0
	.uleb128 0xd
	.long	.LASF966
	.sleb128 1
	.uleb128 0xd
	.long	.LASF967
	.sleb128 2
	.uleb128 0xd
	.long	.LASF968
	.sleb128 3
	.uleb128 0xd
	.long	.LASF969
	.sleb128 4
	.uleb128 0xd
	.long	.LASF970
	.sleb128 5
	.uleb128 0xd
	.long	.LASF971
	.sleb128 6
	.uleb128 0xd
	.long	.LASF972
	.sleb128 7
	.uleb128 0xd
	.long	.LASF973
	.sleb128 8
	.uleb128 0xd
	.long	.LASF974
	.sleb128 9
	.uleb128 0xd
	.long	.LASF975
	.sleb128 10
	.uleb128 0xd
	.long	.LASF976
	.sleb128 11
	.uleb128 0xd
	.long	.LASF977
	.sleb128 12
	.uleb128 0xd
	.long	.LASF978
	.sleb128 13
	.uleb128 0xd
	.long	.LASF979
	.sleb128 14
	.uleb128 0xd
	.long	.LASF980
	.sleb128 15
	.uleb128 0xd
	.long	.LASF981
	.sleb128 16
	.uleb128 0xd
	.long	.LASF982
	.sleb128 17
	.uleb128 0xd
	.long	.LASF983
	.sleb128 18
	.uleb128 0xd
	.long	.LASF984
	.sleb128 19
	.uleb128 0xd
	.long	.LASF985
	.sleb128 20
	.uleb128 0xd
	.long	.LASF986
	.sleb128 21
	.uleb128 0xd
	.long	.LASF987
	.sleb128 22
	.uleb128 0xd
	.long	.LASF988
	.sleb128 23
	.uleb128 0xd
	.long	.LASF989
	.sleb128 24
	.uleb128 0xd
	.long	.LASF990
	.sleb128 25
	.uleb128 0xd
	.long	.LASF991
	.sleb128 26
	.uleb128 0xd
	.long	.LASF992
	.sleb128 27
	.uleb128 0xd
	.long	.LASF993
	.sleb128 28
	.uleb128 0xd
	.long	.LASF994
	.sleb128 29
	.uleb128 0xd
	.long	.LASF995
	.sleb128 30
	.uleb128 0xd
	.long	.LASF996
	.sleb128 31
	.uleb128 0xd
	.long	.LASF997
	.sleb128 32
	.uleb128 0xd
	.long	.LASF998
	.sleb128 33
	.uleb128 0xd
	.long	.LASF999
	.sleb128 34
	.uleb128 0xd
	.long	.LASF1000
	.sleb128 35
	.uleb128 0xd
	.long	.LASF1001
	.sleb128 36
	.uleb128 0xd
	.long	.LASF1002
	.sleb128 37
	.uleb128 0xd
	.long	.LASF1003
	.sleb128 38
	.uleb128 0xd
	.long	.LASF1004
	.sleb128 39
	.uleb128 0xd
	.long	.LASF1005
	.sleb128 40
	.uleb128 0xd
	.long	.LASF1006
	.sleb128 41
	.uleb128 0xd
	.long	.LASF1007
	.sleb128 42
	.uleb128 0xd
	.long	.LASF1008
	.sleb128 43
	.uleb128 0xd
	.long	.LASF1009
	.sleb128 44
	.uleb128 0xd
	.long	.LASF1010
	.sleb128 45
	.uleb128 0xd
	.long	.LASF1011
	.sleb128 46
	.uleb128 0xd
	.long	.LASF1012
	.sleb128 47
	.uleb128 0xd
	.long	.LASF1013
	.sleb128 48
	.uleb128 0xd
	.long	.LASF1014
	.sleb128 49
	.byte	0
	.uleb128 0x18
	.long	.LASF1015
	.byte	0x4
	.byte	0xc
	.byte	0x1c
	.long	0x1f71
	.uleb128 0xd
	.long	.LASF1016
	.sleb128 0
	.uleb128 0xd
	.long	.LASF1017
	.sleb128 1
	.uleb128 0xd
	.long	.LASF1018
	.sleb128 2
	.byte	0
	.uleb128 0x1f
	.long	.LASF1019
	.value	0x3f0
	.byte	0xc
	.byte	0x95
	.long	0x200c
	.uleb128 0x8
	.long	.LASF1020
	.byte	0xc
	.byte	0x9e
	.long	0x200c
	.byte	0
	.uleb128 0x8
	.long	.LASF1021
	.byte	0xc
	.byte	0xa1
	.long	0x201c
	.byte	0xf0
	.uleb128 0x20
	.long	.LASF1022
	.byte	0xc
	.byte	0xa4
	.long	0x202c
	.value	0x1e0
	.uleb128 0x20
	.long	.LASF1023
	.byte	0xc
	.byte	0xa7
	.long	0x203c
	.value	0x2d0
	.uleb128 0x20
	.long	.LASF1024
	.byte	0xc
	.byte	0xaa
	.long	0x204c
	.value	0x348
	.uleb128 0x20
	.long	.LASF1025
	.byte	0xc
	.byte	0xae
	.long	0x205c
	.value	0x3c0
	.uleb128 0x20
	.long	.LASF1026
	.byte	0xc
	.byte	0xb2
	.long	0x453
	.value	0x3e0
	.uleb128 0x20
	.long	.LASF1027
	.byte	0xc
	.byte	0xbf
	.long	0x2c0
	.value	0x3e4
	.uleb128 0x20
	.long	.LASF1028
	.byte	0xc
	.byte	0xc2
	.long	0x2c0
	.value	0x3e5
	.uleb128 0x20
	.long	.LASF1029
	.byte	0xc
	.byte	0xc5
	.long	0x2c0
	.value	0x3e6
	.uleb128 0x20
	.long	.LASF1030
	.byte	0xc
	.byte	0xc8
	.long	0x2d
	.value	0x3e8
	.byte	0
	.uleb128 0x12
	.long	0x2d
	.long	0x201c
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0xe68
	.long	0x202c
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0x4cd
	.long	0x203c
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0x574
	.long	0x204c
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0x1f52
	.long	0x205c
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0xe68
	.long	0x206c
	.uleb128 0x13
	.long	0x140
	.byte	0x3
	.byte	0
	.uleb128 0x7
	.long	.LASF1031
	.byte	0xc
	.byte	0xd4
	.long	0x2077
	.uleb128 0x3
	.byte	0x8
	.long	0x207d
	.uleb128 0x21
	.long	0x139
	.long	0x2091
	.uleb128 0x22
	.long	0x2d
	.uleb128 0x22
	.long	0x574
	.byte	0
	.uleb128 0x7
	.long	.LASF1032
	.byte	0xc
	.byte	0xd6
	.long	0x209c
	.uleb128 0x3
	.byte	0x8
	.long	0x20a2
	.uleb128 0x21
	.long	0x2d
	.long	0x20b2
	.uleb128 0x22
	.long	0x2d
	.uleb128 0x23
	.byte	0
	.uleb128 0x4
	.long	.LASF1033
	.byte	0x18
	.byte	0xc
	.byte	0xd8
	.long	0x20fe
	.uleb128 0x8
	.long	.LASF1034
	.byte	0xc
	.byte	0xda
	.long	0x20fe
	.byte	0
	.uleb128 0x8
	.long	.LASF1035
	.byte	0xc
	.byte	0xdc
	.long	0x2103
	.byte	0x8
	.uleb128 0x5
	.long	.LASF1
	.byte	0xc
	.byte	0xde
	.long	0x2108
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1036
	.byte	0xc
	.byte	0xe0
	.long	0x4d3
	.byte	0x12
	.uleb128 0x8
	.long	.LASF1037
	.byte	0xc
	.byte	0xe2
	.long	0x4d3
	.byte	0x13
	.byte	0
	.uleb128 0x15
	.long	0x206c
	.uleb128 0x15
	.long	0x4cd
	.uleb128 0x15
	.long	0x266
	.uleb128 0x4
	.long	.LASF1038
	.byte	0x28
	.byte	0xc
	.byte	0xec
	.long	0x217a
	.uleb128 0x8
	.long	.LASF1039
	.byte	0xc
	.byte	0xee
	.long	0x2103
	.byte	0
	.uleb128 0x8
	.long	.LASF1040
	.byte	0xc
	.byte	0xef
	.long	0x56d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1041
	.byte	0xc
	.byte	0xf0
	.long	0x217a
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1020
	.byte	0xc
	.byte	0xf1
	.long	0x217f
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1027
	.byte	0xc
	.byte	0xf3
	.long	0x4d3
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1028
	.byte	0xc
	.byte	0xf4
	.long	0x4d3
	.byte	0x21
	.uleb128 0x8
	.long	.LASF1029
	.byte	0xc
	.byte	0xf5
	.long	0x4d3
	.byte	0x22
	.uleb128 0x8
	.long	.LASF1042
	.byte	0xc
	.byte	0xf6
	.long	0x4d3
	.byte	0x23
	.byte	0
	.uleb128 0x15
	.long	0x2091
	.uleb128 0x15
	.long	0x2184
	.uleb128 0x3
	.byte	0x8
	.long	0x218a
	.uleb128 0x15
	.long	0x20b2
	.uleb128 0x18
	.long	.LASF1043
	.byte	0x4
	.byte	0xd
	.byte	0x4c
	.long	0x21de
	.uleb128 0xd
	.long	.LASF1044
	.sleb128 0
	.uleb128 0xd
	.long	.LASF1045
	.sleb128 1
	.uleb128 0xd
	.long	.LASF1046
	.sleb128 2
	.uleb128 0xd
	.long	.LASF1047
	.sleb128 3
	.uleb128 0xd
	.long	.LASF1048
	.sleb128 4
	.uleb128 0xd
	.long	.LASF1049
	.sleb128 5
	.uleb128 0xd
	.long	.LASF1050
	.sleb128 6
	.uleb128 0xd
	.long	.LASF1051
	.sleb128 7
	.uleb128 0xd
	.long	.LASF1052
	.sleb128 8
	.uleb128 0xd
	.long	.LASF1053
	.sleb128 9
	.uleb128 0xd
	.long	.LASF1054
	.sleb128 10
	.byte	0
	.uleb128 0x4
	.long	.LASF1055
	.byte	0x68
	.byte	0xd
	.byte	0x57
	.long	0x22fe
	.uleb128 0x6
	.string	"in"
	.byte	0xd
	.byte	0x5a
	.long	0x2d
	.byte	0
	.uleb128 0x6
	.string	"out"
	.byte	0xd
	.byte	0x5d
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1056
	.byte	0xd
	.byte	0x60
	.long	0x147
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1057
	.byte	0xd
	.byte	0x63
	.long	0x574
	.byte	0x14
	.uleb128 0x8
	.long	.LASF1058
	.byte	0xd
	.byte	0x65
	.long	0x574
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1
	.byte	0xd
	.byte	0x68
	.long	0x574
	.byte	0x1c
	.uleb128 0x8
	.long	.LASF45
	.byte	0xd
	.byte	0x6b
	.long	0x266
	.byte	0x20
	.uleb128 0x6
	.string	"inc"
	.byte	0xd
	.byte	0x70
	.long	0x139
	.byte	0x24
	.uleb128 0x8
	.long	.LASF1059
	.byte	0xd
	.byte	0x75
	.long	0x2d
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1060
	.byte	0xd
	.byte	0x76
	.long	0x2d
	.byte	0x30
	.uleb128 0x8
	.long	.LASF46
	.byte	0xd
	.byte	0x79
	.long	0x139
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1061
	.byte	0xd
	.byte	0x7e
	.long	0x2d
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1062
	.byte	0xd
	.byte	0x83
	.long	0x139
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1063
	.byte	0xd
	.byte	0x87
	.long	0x139
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF1064
	.byte	0xd
	.byte	0x8a
	.long	0x139
	.byte	0x50
	.uleb128 0x8
	.long	.LASF1065
	.byte	0xd
	.byte	0x8e
	.long	0xec4
	.byte	0x54
	.uleb128 0x8
	.long	.LASF1066
	.byte	0xd
	.byte	0x90
	.long	0xec4
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1067
	.byte	0xd
	.byte	0x95
	.long	0x218f
	.byte	0x5c
	.uleb128 0x5
	.long	.LASF1068
	.byte	0xd
	.byte	0x99
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x60
	.uleb128 0x5
	.long	.LASF1069
	.byte	0xd
	.byte	0x9b
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x60
	.uleb128 0x5
	.long	.LASF1070
	.byte	0xd
	.byte	0x9d
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x60
	.uleb128 0x5
	.long	.LASF1071
	.byte	0xd
	.byte	0xa0
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x60
	.byte	0
	.uleb128 0x7
	.long	.LASF1072
	.byte	0xe
	.byte	0x29
	.long	0x281
	.uleb128 0x4
	.long	.LASF1073
	.byte	0x18
	.byte	0xf
	.byte	0x16
	.long	0x2346
	.uleb128 0x8
	.long	.LASF1074
	.byte	0xf
	.byte	0x18
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF1075
	.byte	0xf
	.byte	0x19
	.long	0x574
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1076
	.byte	0xf
	.byte	0x1a
	.long	0x139
	.byte	0xc
	.uleb128 0x8
	.long	.LASF1077
	.byte	0xf
	.byte	0x1b
	.long	0x2346
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2309
	.uleb128 0x4
	.long	.LASF1078
	.byte	0x20
	.byte	0xf
	.byte	0x23
	.long	0x2389
	.uleb128 0x8
	.long	.LASF1079
	.byte	0xf
	.byte	0x26
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF1080
	.byte	0xf
	.byte	0x26
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1081
	.byte	0xf
	.byte	0x27
	.long	0x123
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1077
	.byte	0xf
	.byte	0x28
	.long	0x2389
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x234c
	.uleb128 0x4
	.long	.LASF1082
	.byte	0x58
	.byte	0xf
	.byte	0x35
	.long	0x2438
	.uleb128 0x8
	.long	.LASF1083
	.byte	0xf
	.byte	0x39
	.long	0x139
	.byte	0
	.uleb128 0x8
	.long	.LASF1084
	.byte	0xf
	.byte	0x3c
	.long	0x139
	.byte	0x4
	.uleb128 0x8
	.long	.LASF1085
	.byte	0xf
	.byte	0x43
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1086
	.byte	0xf
	.byte	0x44
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1081
	.byte	0xf
	.byte	0x49
	.long	0x123
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1078
	.byte	0xf
	.byte	0x4f
	.long	0x2389
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1087
	.byte	0xf
	.byte	0x53
	.long	0x139
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1088
	.byte	0xf
	.byte	0x57
	.long	0x139
	.byte	0x2c
	.uleb128 0x8
	.long	.LASF1089
	.byte	0xf
	.byte	0x58
	.long	0x4cd
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1090
	.byte	0xf
	.byte	0x5e
	.long	0x139
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1091
	.byte	0xf
	.byte	0x63
	.long	0x2438
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1092
	.byte	0xf
	.byte	0x67
	.long	0x243e
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1093
	.byte	0xf
	.byte	0x6b
	.long	0xe68
	.byte	0x50
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x288
	.uleb128 0x3
	.byte	0x8
	.long	0x123
	.uleb128 0x4
	.long	.LASF1094
	.byte	0x30
	.byte	0xf
	.byte	0x77
	.long	0x24a5
	.uleb128 0x8
	.long	.LASF1095
	.byte	0xf
	.byte	0x7b
	.long	0x139
	.byte	0
	.uleb128 0x8
	.long	.LASF1096
	.byte	0xf
	.byte	0x8c
	.long	0x139
	.byte	0x4
	.uleb128 0x8
	.long	.LASF1097
	.byte	0xf
	.byte	0x92
	.long	0x139
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1098
	.byte	0xf
	.byte	0x97
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1099
	.byte	0xf
	.byte	0x9a
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1100
	.byte	0xf
	.byte	0x9d
	.long	0x2d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1101
	.byte	0xf
	.byte	0xa0
	.long	0x2d
	.byte	0x28
	.byte	0
	.uleb128 0x1f
	.long	.LASF1102
	.value	0x1b0
	.byte	0xf
	.byte	0xae
	.long	0x2925
	.uleb128 0x6
	.string	"eh"
	.byte	0xf
	.byte	0xb0
	.long	0x292a
	.byte	0
	.uleb128 0x8
	.long	.LASF1103
	.byte	0xf
	.byte	0xb1
	.long	0x2935
	.byte	0x8
	.uleb128 0x8
	.long	.LASF328
	.byte	0xf
	.byte	0xb2
	.long	0x293b
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1104
	.byte	0xf
	.byte	0xb3
	.long	0x2941
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1105
	.byte	0xf
	.byte	0xb4
	.long	0x294c
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1039
	.byte	0xf
	.byte	0xb9
	.long	0x4cd
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1106
	.byte	0xf
	.byte	0xbc
	.long	0x123
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1107
	.byte	0xf
	.byte	0xbf
	.long	0x2952
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1108
	.byte	0xf
	.byte	0xc4
	.long	0x139
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1109
	.byte	0xf
	.byte	0xc9
	.long	0x139
	.byte	0x44
	.uleb128 0x8
	.long	.LASF1110
	.byte	0xf
	.byte	0xce
	.long	0x139
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1111
	.byte	0xf
	.byte	0xd2
	.long	0x139
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF1112
	.byte	0xf
	.byte	0xd6
	.long	0x2d
	.byte	0x50
	.uleb128 0x8
	.long	.LASF1113
	.byte	0xf
	.byte	0xda
	.long	0x25a
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1114
	.byte	0xf
	.byte	0xe0
	.long	0x2d
	.byte	0x78
	.uleb128 0x8
	.long	.LASF1115
	.byte	0xf
	.byte	0xe3
	.long	0x2d
	.byte	0x80
	.uleb128 0x8
	.long	.LASF1116
	.byte	0xf
	.byte	0xe7
	.long	0x4cd
	.byte	0x88
	.uleb128 0x8
	.long	.LASF1117
	.byte	0xf
	.byte	0xeb
	.long	0x295d
	.byte	0x90
	.uleb128 0x8
	.long	.LASF1118
	.byte	0xf
	.byte	0xee
	.long	0x139
	.byte	0x98
	.uleb128 0x8
	.long	.LASF1119
	.byte	0xf
	.byte	0xf3
	.long	0x123
	.byte	0xa0
	.uleb128 0x8
	.long	.LASF1120
	.byte	0xf
	.byte	0xf9
	.long	0x2d
	.byte	0xa8
	.uleb128 0x8
	.long	.LASF1121
	.byte	0xf
	.byte	0xfd
	.long	0x2d
	.byte	0xb0
	.uleb128 0xf
	.long	.LASF1122
	.byte	0xf
	.value	0x102
	.long	0x2d
	.byte	0xb8
	.uleb128 0xf
	.long	.LASF1123
	.byte	0xf
	.value	0x108
	.long	0x2d
	.byte	0xc0
	.uleb128 0xf
	.long	.LASF1124
	.byte	0xf
	.value	0x10d
	.long	0x2d
	.byte	0xc8
	.uleb128 0xf
	.long	.LASF1125
	.byte	0xf
	.value	0x111
	.long	0x2d
	.byte	0xd0
	.uleb128 0xf
	.long	.LASF1126
	.byte	0xf
	.value	0x115
	.long	0x2d
	.byte	0xd8
	.uleb128 0xf
	.long	.LASF1127
	.byte	0xf
	.value	0x118
	.long	0x123
	.byte	0xe0
	.uleb128 0xf
	.long	.LASF1128
	.byte	0xf
	.value	0x11c
	.long	0x2d
	.byte	0xe8
	.uleb128 0xf
	.long	.LASF1129
	.byte	0xf
	.value	0x11f
	.long	0x2d
	.byte	0xf0
	.uleb128 0xf
	.long	.LASF1130
	.byte	0xf
	.value	0x125
	.long	0x2d
	.byte	0xf8
	.uleb128 0x24
	.long	.LASF1131
	.byte	0xf
	.value	0x12a
	.long	0x2d
	.value	0x100
	.uleb128 0x24
	.long	.LASF1132
	.byte	0xf
	.value	0x12f
	.long	0x26f
	.value	0x108
	.uleb128 0x24
	.long	.LASF1133
	.byte	0xf
	.value	0x134
	.long	0x123
	.value	0x110
	.uleb128 0x24
	.long	.LASF1134
	.byte	0xf
	.value	0x13d
	.long	0x123
	.value	0x118
	.uleb128 0x24
	.long	.LASF1135
	.byte	0xf
	.value	0x140
	.long	0x2d
	.value	0x120
	.uleb128 0x24
	.long	.LASF1136
	.byte	0xf
	.value	0x144
	.long	0x2d
	.value	0x128
	.uleb128 0x24
	.long	.LASF1137
	.byte	0xf
	.value	0x148
	.long	0x266
	.value	0x130
	.uleb128 0x24
	.long	.LASF1138
	.byte	0xf
	.value	0x14e
	.long	0xe68
	.value	0x138
	.uleb128 0x24
	.long	.LASF1139
	.byte	0xf
	.value	0x151
	.long	0x2968
	.value	0x140
	.uleb128 0x24
	.long	.LASF1140
	.byte	0xf
	.value	0x154
	.long	0x139
	.value	0x148
	.uleb128 0x24
	.long	.LASF1141
	.byte	0xf
	.value	0x157
	.long	0x139
	.value	0x14c
	.uleb128 0x24
	.long	.LASF1142
	.byte	0xf
	.value	0x15d
	.long	0x139
	.value	0x150
	.uleb128 0x24
	.long	.LASF1143
	.byte	0xf
	.value	0x161
	.long	0x2346
	.value	0x158
	.uleb128 0x24
	.long	.LASF1144
	.byte	0xf
	.value	0x164
	.long	0x139
	.value	0x160
	.uleb128 0x24
	.long	.LASF1145
	.byte	0xf
	.value	0x165
	.long	0x139
	.value	0x164
	.uleb128 0x24
	.long	.LASF1146
	.byte	0xf
	.value	0x167
	.long	0x26d
	.value	0x168
	.uleb128 0x24
	.long	.LASF1147
	.byte	0xf
	.value	0x168
	.long	0x123
	.value	0x170
	.uleb128 0x24
	.long	.LASF1148
	.byte	0xf
	.value	0x16b
	.long	0x2d
	.value	0x178
	.uleb128 0x24
	.long	.LASF1149
	.byte	0xf
	.value	0x16d
	.long	0x139
	.value	0x180
	.uleb128 0x24
	.long	.LASF1150
	.byte	0xf
	.value	0x170
	.long	0x139
	.value	0x184
	.uleb128 0x24
	.long	.LASF1151
	.byte	0xf
	.value	0x175
	.long	0x2973
	.value	0x188
	.uleb128 0x24
	.long	.LASF1152
	.byte	0xf
	.value	0x177
	.long	0x139
	.value	0x190
	.uleb128 0x24
	.long	.LASF1153
	.byte	0xf
	.value	0x179
	.long	0x139
	.value	0x194
	.uleb128 0x24
	.long	.LASF1154
	.byte	0xf
	.value	0x17c
	.long	0x297e
	.value	0x198
	.uleb128 0x24
	.long	.LASF1155
	.byte	0xf
	.value	0x182
	.long	0x2d
	.value	0x1a0
	.uleb128 0x25
	.long	.LASF1156
	.byte	0xf
	.value	0x188
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1157
	.byte	0xf
	.value	0x18c
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1158
	.byte	0xf
	.value	0x18f
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1159
	.byte	0xf
	.value	0x192
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1160
	.byte	0xf
	.value	0x195
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1161
	.byte	0xf
	.value	0x198
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1162
	.byte	0xf
	.value	0x19c
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1163
	.byte	0xf
	.value	0x19f
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1164
	.byte	0xf
	.value	0x1a3
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1165
	.byte	0xf
	.value	0x1a7
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1166
	.byte	0xf
	.value	0x1aa
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1167
	.byte	0xf
	.value	0x1ad
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1168
	.byte	0xf
	.value	0x1b2
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1169
	.byte	0xf
	.value	0x1b6
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1170
	.byte	0xf
	.value	0x1b9
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1171
	.byte	0xf
	.value	0x1bd
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1172
	.byte	0xf
	.value	0x1c1
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1173
	.byte	0xf
	.value	0x1c5
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1174
	.byte	0xf
	.value	0x1cb
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1175
	.byte	0xf
	.value	0x1d4
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1176
	.byte	0xf
	.value	0x1d7
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1177
	.byte	0xf
	.value	0x1da
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1178
	.byte	0xf
	.value	0x1dd
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.value	0x1a8
	.uleb128 0x25
	.long	.LASF1179
	.byte	0xf
	.value	0x1e0
	.long	0x266
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.value	0x1a8
	.byte	0
	.uleb128 0x1e
	.long	.LASF1180
	.uleb128 0x3
	.byte	0x8
	.long	0x2925
	.uleb128 0x1e
	.long	.LASF1181
	.uleb128 0x3
	.byte	0x8
	.long	0x2930
	.uleb128 0x3
	.byte	0x8
	.long	0x2444
	.uleb128 0x3
	.byte	0x8
	.long	0x238f
	.uleb128 0x1e
	.long	.LASF1182
	.uleb128 0x3
	.byte	0x8
	.long	0x2947
	.uleb128 0x3
	.byte	0x8
	.long	0x24a5
	.uleb128 0x1e
	.long	.LASF1183
	.uleb128 0x3
	.byte	0x8
	.long	0x2958
	.uleb128 0x1e
	.long	.LASF1184
	.uleb128 0x3
	.byte	0x8
	.long	0x2963
	.uleb128 0x1e
	.long	.LASF1185
	.uleb128 0x3
	.byte	0x8
	.long	0x296e
	.uleb128 0x1e
	.long	.LASF1186
	.uleb128 0x3
	.byte	0x8
	.long	0x2979
	.uleb128 0x4
	.long	.LASF1187
	.byte	0x18
	.byte	0x1
	.byte	0x8d
	.long	0x29c1
	.uleb128 0x8
	.long	.LASF1188
	.byte	0x1
	.byte	0x8f
	.long	0xe68
	.byte	0
	.uleb128 0x8
	.long	.LASF1189
	.byte	0x1
	.byte	0x90
	.long	0xe68
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1190
	.byte	0x1
	.byte	0x92
	.long	0x139
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1
	.byte	0x1
	.byte	0x93
	.long	0x574
	.byte	0x14
	.byte	0
	.uleb128 0x4
	.long	.LASF1191
	.byte	0x20
	.byte	0x1
	.byte	0x9c
	.long	0x2a0a
	.uleb128 0x8
	.long	.LASF1192
	.byte	0x1
	.byte	0x9e
	.long	0x139
	.byte	0
	.uleb128 0x8
	.long	.LASF1193
	.byte	0x1
	.byte	0x9f
	.long	0x139
	.byte	0x4
	.uleb128 0x8
	.long	.LASF1194
	.byte	0x1
	.byte	0xa0
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1195
	.byte	0x1
	.byte	0xa1
	.long	0x26f
	.byte	0x10
	.uleb128 0x6
	.string	"end"
	.byte	0x1
	.byte	0xa2
	.long	0x26f
	.byte	0x18
	.byte	0
	.uleb128 0x26
	.long	.LASF1212
	.byte	0x1
	.value	0x11f
	.long	0x139
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.uleb128 0x1
	.byte	0x9c
	.long	0x2baa
	.uleb128 0x27
	.long	.LASF1196
	.byte	0x1
	.value	0x121
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x122
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x27
	.long	.LASF1062
	.byte	0x1
	.value	0x123
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x27
	.long	.LASF1068
	.byte	0x1
	.value	0x124
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x27
	.long	.LASF1197
	.byte	0x1
	.value	0x125
	.long	0x147
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x27
	.long	.LASF1198
	.byte	0x1
	.value	0x126
	.long	0x574
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x27
	.long	.LASF1199
	.byte	0x1
	.value	0x127
	.long	0x218f
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x27
	.long	.LASF1200
	.byte	0x1
	.value	0x128
	.long	0x2baa
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x29
	.long	.LASF1056
	.byte	0x1
	.value	0x12a
	.long	0x147
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x12b
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x29
	.long	.LASF1201
	.byte	0x1
	.value	0x12c
	.long	0xec4
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x29
	.long	.LASF1202
	.byte	0x1
	.value	0x12d
	.long	0x147
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x29
	.long	.LASF1203
	.byte	0x1
	.value	0x12e
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x29
	.long	.LASF1204
	.byte	0x1
	.value	0x12f
	.long	0xec4
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x29
	.long	.LASF1205
	.byte	0x1
	.value	0x130
	.long	0x218f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF1206
	.byte	0x1
	.value	0x131
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x29
	.long	.LASF1207
	.byte	0x1
	.value	0x131
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x2bc0
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.11576
	.uleb128 0x2b
	.quad	.LBB2
	.quad	.LBE2-.LBB2
	.uleb128 0x29
	.long	.LASF1208
	.byte	0x1
	.value	0x177
	.long	0x147
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2c
	.quad	.LBB3
	.quad	.LBE3-.LBB3
	.long	0x2b87
	.uleb128 0x29
	.long	.LASF1209
	.byte	0x1
	.value	0x17d
	.long	0x2c0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -58
	.byte	0
	.uleb128 0x2b
	.quad	.LBB4
	.quad	.LBE4-.LBB4
	.uleb128 0x29
	.long	.LASF1210
	.byte	0x1
	.value	0x193
	.long	0x2c0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -57
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xec4
	.uleb128 0x12
	.long	0x2c0
	.long	0x2bc0
	.uleb128 0x13
	.long	0x140
	.byte	0x15
	.byte	0
	.uleb128 0x15
	.long	0x2bb0
	.uleb128 0x2d
	.long	.LASF1226
	.byte	0x1
	.value	0x24a
	.long	0x2d
	.quad	.LFB3
	.quad	.LFE3-.LFB3
	.uleb128 0x1
	.byte	0x9c
	.long	0x2c41
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x24b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x27
	.long	.LASF1
	.byte	0x1
	.value	0x24c
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x27
	.long	.LASF1062
	.byte	0x1
	.value	0x24d
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x27
	.long	.LASF1199
	.byte	0x1
	.value	0x24e
	.long	0x218f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2e
	.string	"loc"
	.byte	0x1
	.value	0x250
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x29
	.long	.LASF1211
	.byte	0x1
	.value	0x251
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.uleb128 0x2f
	.long	.LASF1405
	.byte	0x1
	.value	0x292
	.quad	.LFB4
	.quad	.LFE4-.LFB4
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x26
	.long	.LASF1213
	.byte	0x1
	.value	0x29d
	.long	0x147
	.quad	.LFB5
	.quad	.LFE5-.LFB5
	.uleb128 0x1
	.byte	0x9c
	.long	0x2d45
	.uleb128 0x28
	.string	"m1"
	.byte	0x1
	.value	0x29e
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x28
	.string	"n"
	.byte	0x1
	.value	0x29f
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x27
	.long	.LASF1214
	.byte	0x1
	.value	0x2a0
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x29
	.long	.LASF1215
	.byte	0x1
	.value	0x2a2
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x29
	.long	.LASF1056
	.byte	0x1
	.value	0x2a3
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x2a4
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x29
	.long	.LASF1216
	.byte	0x1
	.value	0x2a5
	.long	0x147
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x29
	.long	.LASF1217
	.byte	0x1
	.value	0x2a6
	.long	0x147
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x29
	.long	.LASF1218
	.byte	0x1
	.value	0x2a7
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF1219
	.byte	0x1
	.value	0x2a8
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x2d55
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.11614
	.uleb128 0x2b
	.quad	.LBB5
	.quad	.LBE5-.LBB5
	.uleb128 0x2e
	.string	"bad"
	.byte	0x1
	.value	0x2ac
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x2d55
	.uleb128 0x13
	.long	0x140
	.byte	0x10
	.byte	0
	.uleb128 0x15
	.long	0x2d45
	.uleb128 0x26
	.long	.LASF1221
	.byte	0x1
	.value	0x2d0
	.long	0x139
	.quad	.LFB6
	.quad	.LFE6-.LFB6
	.uleb128 0x1
	.byte	0x9c
	.long	0x2df6
	.uleb128 0x27
	.long	.LASF1222
	.byte	0x1
	.value	0x2d1
	.long	0xe68
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x28
	.string	"out"
	.byte	0x1
	.value	0x2d1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x27
	.long	.LASF1056
	.byte	0x1
	.value	0x2d2
	.long	0x147
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x27
	.long	.LASF1199
	.byte	0x1
	.value	0x2d3
	.long	0x218f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x27
	.long	.LASF1062
	.byte	0x1
	.value	0x2d4
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x27
	.long	.LASF1223
	.byte	0x1
	.value	0x2d4
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.string	"in"
	.byte	0x1
	.value	0x2d6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x2d7
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.uleb128 0x26
	.long	.LASF1224
	.byte	0x1
	.value	0x31d
	.long	0x139
	.quad	.LFB7
	.quad	.LFE7-.LFB7
	.uleb128 0x1
	.byte	0x9c
	.long	0x2e44
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x31e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x27
	.long	.LASF1
	.byte	0x1
	.value	0x31f
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x29
	.long	.LASF1225
	.byte	0x1
	.value	0x321
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x2d
	.long	.LASF1227
	.byte	0x1
	.value	0x362
	.long	0x139
	.quad	.LFB8
	.quad	.LFE8-.LFB8
	.uleb128 0x1
	.byte	0x9c
	.long	0x3158
	.uleb128 0x28
	.string	"in"
	.byte	0x1
	.value	0x364
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x28
	.string	"out"
	.byte	0x1
	.value	0x364
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x27
	.long	.LASF1228
	.byte	0x1
	.value	0x365
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x27
	.long	.LASF1229
	.byte	0x1
	.value	0x365
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x27
	.long	.LASF1056
	.byte	0x1
	.value	0x366
	.long	0x147
	.uleb128 0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x27
	.long	.LASF1057
	.byte	0x1
	.value	0x367
	.long	0x574
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x27
	.long	.LASF1058
	.byte	0x1
	.value	0x367
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x27
	.long	.LASF1036
	.byte	0x1
	.value	0x368
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x27
	.long	.LASF1068
	.byte	0x1
	.value	0x369
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x27
	.long	.LASF1062
	.byte	0x1
	.value	0x36a
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x27
	.long	.LASF1199
	.byte	0x1
	.value	0x36b
	.long	0x218f
	.uleb128 0x2
	.byte	0x91
	.sleb128 32
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x36d
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x29
	.long	.LASF1223
	.byte	0x1
	.value	0x36e
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x29
	.long	.LASF1230
	.byte	0x1
	.value	0x36f
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x29
	.long	.LASF1231
	.byte	0x1
	.value	0x370
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x29
	.long	.LASF1232
	.byte	0x1
	.value	0x370
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x29
	.long	.LASF1063
	.byte	0x1
	.value	0x371
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x29
	.long	.LASF1064
	.byte	0x1
	.value	0x371
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x29
	.long	.LASF1065
	.byte	0x1
	.value	0x372
	.long	0xec4
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x29
	.long	.LASF1066
	.byte	0x1
	.value	0x373
	.long	0xec4
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x3168
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.11668
	.uleb128 0x2c
	.quad	.LBB6
	.quad	.LBE6-.LBB6
	.long	0x2fd7
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x383
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.byte	0
	.uleb128 0x2c
	.quad	.LBB7
	.quad	.LBE7-.LBB7
	.long	0x2ffd
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x38f
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.uleb128 0x2c
	.quad	.LBB8
	.quad	.LBE8-.LBB8
	.long	0x3023
	.uleb128 0x29
	.long	.LASF1233
	.byte	0x1
	.value	0x41c
	.long	0x147
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.byte	0
	.uleb128 0x2c
	.quad	.LBB9
	.quad	.LBE9-.LBB9
	.long	0x3079
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x4c3
	.long	0x574
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2b
	.quad	.LBB10
	.quad	.LBE10-.LBB10
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x4d5
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x4d7
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB11
	.quad	.LBE11-.LBB11
	.long	0x309e
	.uleb128 0x29
	.long	.LASF1059
	.byte	0x1
	.value	0x53d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x2c
	.quad	.LBB12
	.quad	.LBE12-.LBB12
	.long	0x30c1
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x590
	.long	0x316d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x2c
	.quad	.LBB13
	.quad	.LBE13-.LBB13
	.long	0x30e4
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x598
	.long	0x316d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x2b
	.quad	.LBB14
	.quad	.LBE14-.LBB14
	.uleb128 0x29
	.long	.LASF1234
	.byte	0x1
	.value	0x5c8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x5c9
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x29
	.long	.LASF1235
	.byte	0x1
	.value	0x5ca
	.long	0x574
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2b
	.quad	.LBB15
	.quad	.LBE15-.LBB15
	.uleb128 0x29
	.long	.LASF1236
	.byte	0x1
	.value	0x5f1
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x5f2
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x3168
	.uleb128 0x13
	.long	0x140
	.byte	0xb
	.byte	0
	.uleb128 0x15
	.long	0x3158
	.uleb128 0x3
	.byte	0x8
	.long	0x2984
	.uleb128 0x30
	.long	.LASF1243
	.byte	0x1
	.value	0x610
	.quad	.LFB9
	.quad	.LFE9-.LFB9
	.uleb128 0x1
	.byte	0x9c
	.long	0x31de
	.uleb128 0x28
	.string	"loc"
	.byte	0x1
	.value	0x611
	.long	0xe68
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x27
	.long	.LASF1237
	.byte	0x1
	.value	0x612
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x27
	.long	.LASF1
	.byte	0x1
	.value	0x613
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2b
	.quad	.LBB16
	.quad	.LBE16-.LBB16
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x617
	.long	0x316d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1367
	.byte	0x1
	.value	0x623
	.quad	.LFB10
	.quad	.LFE10-.LFB10
	.uleb128 0x1
	.byte	0x9c
	.long	0x3227
	.uleb128 0x28
	.string	"to"
	.byte	0x1
	.value	0x624
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x27
	.long	.LASF1238
	.byte	0x1
	.value	0x624
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x626
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x2d
	.long	.LASF1239
	.byte	0x1
	.value	0x632
	.long	0x139
	.quad	.LFB11
	.quad	.LFE11-.LFB11
	.uleb128 0x1
	.byte	0x9c
	.long	0x3296
	.uleb128 0x27
	.long	.LASF1240
	.byte	0x1
	.value	0x633
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x635
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -236
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x635
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x29
	.long	.LASF1241
	.byte	0x1
	.value	0x636
	.long	0x3296
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x29
	.long	.LASF1242
	.byte	0x1
	.value	0x637
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -228
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x32a6
	.uleb128 0x13
	.long	0x140
	.byte	0xb3
	.byte	0
	.uleb128 0x32
	.long	.LASF1244
	.byte	0x1
	.value	0x661
	.quad	.LFB12
	.quad	.LFE12-.LFB12
	.uleb128 0x1
	.byte	0x9c
	.long	0x331e
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x663
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x29
	.long	.LASF1245
	.byte	0x1
	.value	0x664
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x29
	.long	.LASF1246
	.byte	0x1
	.value	0x665
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x29
	.long	.LASF1234
	.byte	0x1
	.value	0x666
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2b
	.quad	.LBB17
	.quad	.LBE17-.LBB17
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x6bb
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x26
	.long	.LASF1247
	.byte	0x1
	.value	0x725
	.long	0x2d
	.quad	.LFB13
	.quad	.LFE13-.LFB13
	.uleb128 0x1
	.byte	0x9c
	.long	0x34d1
	.uleb128 0x27
	.long	.LASF1248
	.byte	0x1
	.value	0x727
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x27
	.long	.LASF1249
	.byte	0x1
	.value	0x727
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x27
	.long	.LASF1228
	.byte	0x1
	.value	0x728
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x27
	.long	.LASF1229
	.byte	0x1
	.value	0x728
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x27
	.long	.LASF1057
	.byte	0x1
	.value	0x729
	.long	0x574
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x27
	.long	.LASF1058
	.byte	0x1
	.value	0x729
	.long	0x574
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x27
	.long	.LASF1056
	.byte	0x1
	.value	0x72a
	.long	0x147
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x27
	.long	.LASF1250
	.byte	0x1
	.value	0x72b
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x27
	.long	.LASF1251
	.byte	0x1
	.value	0x72c
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x2e
	.string	"in"
	.byte	0x1
	.value	0x72e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"out"
	.byte	0x1
	.value	0x72f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x29
	.long	.LASF1252
	.byte	0x1
	.value	0x730
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x29
	.long	.LASF1253
	.byte	0x1
	.value	0x731
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x29
	.long	.LASF1254
	.byte	0x1
	.value	0x732
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2c
	.quad	.LBB18
	.quad	.LBE18-.LBB18
	.long	0x347e
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x75c
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x29
	.long	.LASF1255
	.byte	0x1
	.value	0x75d
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x29
	.long	.LASF1256
	.byte	0x1
	.value	0x75e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2b
	.quad	.LBB19
	.quad	.LBE19-.LBB19
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x771
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.uleb128 0x2b
	.quad	.LBB20
	.quad	.LBE20-.LBB20
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x799
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x29
	.long	.LASF1255
	.byte	0x1
	.value	0x79a
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2b
	.quad	.LBB21
	.quad	.LBE21-.LBB21
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x7a3
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.long	.LASF1257
	.byte	0x1
	.value	0x7c3
	.long	0x139
	.quad	.LFB14
	.quad	.LFE14-.LFB14
	.uleb128 0x1
	.byte	0x9c
	.long	0x350e
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x7c4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x7c6
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x26
	.long	.LASF1258
	.byte	0x1
	.value	0x7d5
	.long	0x139
	.quad	.LFB15
	.quad	.LFE15-.LFB15
	.uleb128 0x1
	.byte	0x9c
	.long	0x35bf
	.uleb128 0x27
	.long	.LASF1259
	.byte	0x1
	.value	0x7d6
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x27
	.long	.LASF1260
	.byte	0x1
	.value	0x7d6
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x7d7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2c
	.quad	.LBB22
	.quad	.LBE22-.LBB22
	.long	0x359f
	.uleb128 0x2e
	.string	"op0"
	.byte	0x1
	.value	0x7db
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2b
	.quad	.LBB23
	.quad	.LBE23-.LBB23
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x7e1
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.byte	0
	.uleb128 0x2b
	.quad	.LBB24
	.quad	.LBE24-.LBB24
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x7eb
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x2d
	.long	.LASF1261
	.byte	0x1
	.value	0x7fa
	.long	0x139
	.quad	.LFB16
	.quad	.LFE16-.LFB16
	.uleb128 0x1
	.byte	0x9c
	.long	0x3610
	.uleb128 0x27
	.long	.LASF1
	.byte	0x1
	.value	0x7fb
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x27
	.long	.LASF1262
	.byte	0x1
	.value	0x7fc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x34
	.string	"win"
	.byte	0x1
	.value	0x801
	.quad	.L829
	.byte	0
	.uleb128 0x2d
	.long	.LASF1263
	.byte	0x1
	.value	0x815
	.long	0x139
	.quad	.LFB17
	.quad	.LFE17-.LFB17
	.uleb128 0x1
	.byte	0x9c
	.long	0x36fb
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x816
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x28
	.string	"y"
	.byte	0x1
	.value	0x816
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x818
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x819
	.long	0x732
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x81a
	.long	0x4cd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x29
	.long	.LASF1264
	.byte	0x1
	.value	0x81b
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.long	.LASF1265
	.byte	0x1
	.value	0x85c
	.quad	.L839
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x36fb
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.11828
	.uleb128 0x2c
	.quad	.LBB25
	.quad	.LBE25-.LBB25
	.long	0x36cc
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x823
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x2b
	.quad	.LBB26
	.quad	.LBE26-.LBB26
	.uleb128 0x2e
	.string	"val"
	.byte	0x1
	.value	0x873
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x873
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x2d45
	.uleb128 0x26
	.long	.LASF1266
	.byte	0x1
	.value	0x8ad
	.long	0x29c1
	.quad	.LFB18
	.quad	.LFE18-.LFB18
	.uleb128 0x1
	.byte	0x9c
	.long	0x37a5
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x8ae
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2e
	.string	"val"
	.byte	0x1
	.value	0x8b0
	.long	0x29c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF1267
	.byte	0x1
	.value	0x8b1
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x37b5
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.11840
	.uleb128 0x2b
	.quad	.LBB27
	.quad	.LBE27-.LBB27
	.uleb128 0x29
	.long	.LASF1194
	.byte	0x1
	.value	0x8ba
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x29
	.long	.LASF329
	.byte	0x1
	.value	0x8ba
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x29
	.long	.LASF1262
	.byte	0x1
	.value	0x8bb
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x37b5
	.uleb128 0x13
	.long	0x140
	.byte	0x9
	.byte	0
	.uleb128 0x15
	.long	0x37a5
	.uleb128 0x26
	.long	.LASF1268
	.byte	0x1
	.value	0x93a
	.long	0x139
	.quad	.LFB19
	.quad	.LFE19-.LFB19
	.uleb128 0x1
	.byte	0x9c
	.long	0x3828
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x93b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x28
	.string	"y"
	.byte	0x1
	.value	0x93b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x27
	.long	.LASF1269
	.byte	0x1
	.value	0x93c
	.long	0x29c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF1270
	.byte	0x1
	.value	0x93e
	.long	0x29c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x3838
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.11847
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x3838
	.uleb128 0x13
	.long	0x140
	.byte	0x8
	.byte	0
	.uleb128 0x15
	.long	0x3828
	.uleb128 0x2d
	.long	.LASF1271
	.byte	0x1
	.value	0x967
	.long	0x139
	.quad	.LFB20
	.quad	.LFE20-.LFB20
	.uleb128 0x1
	.byte	0x9c
	.long	0x388c
	.uleb128 0x28
	.string	"op"
	.byte	0x1
	.value	0x968
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x27
	.long	.LASF1272
	.byte	0x1
	.value	0x968
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF1273
	.byte	0x1
	.value	0x96a
	.long	0x29c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x2d
	.long	.LASF1274
	.byte	0x1
	.value	0x987
	.long	0x139
	.quad	.LFB21
	.quad	.LFE21-.LFB21
	.uleb128 0x1
	.byte	0x9c
	.long	0x4093
	.uleb128 0x27
	.long	.LASF1030
	.byte	0x1
	.value	0x988
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3800
	.uleb128 0x27
	.long	.LASF1275
	.byte	0x1
	.value	0x989
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3804
	.uleb128 0x27
	.long	.LASF1276
	.byte	0x1
	.value	0x989
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3808
	.uleb128 0x27
	.long	.LASF1277
	.byte	0x1
	.value	0x98a
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3812
	.uleb128 0x27
	.long	.LASF1278
	.byte	0x1
	.value	0x98b
	.long	0x4093
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3824
	.uleb128 0x29
	.long	.LASF1279
	.byte	0x1
	.value	0x98d
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3660
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x98e
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3792
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x98e
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3788
	.uleb128 0x29
	.long	.LASF1280
	.byte	0x1
	.value	0x98f
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3668
	.uleb128 0x29
	.long	.LASF1022
	.byte	0x1
	.value	0x992
	.long	0x4099
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1728
	.uleb128 0x29
	.long	.LASF1281
	.byte	0x1
	.value	0x995
	.long	0x40a9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3520
	.uleb128 0x29
	.long	.LASF1282
	.byte	0x1
	.value	0x996
	.long	0x40b9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -336
	.uleb128 0x29
	.long	.LASF1283
	.byte	0x1
	.value	0x998
	.long	0x40c9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3392
	.uleb128 0x29
	.long	.LASF1024
	.byte	0x1
	.value	0x99a
	.long	0x40d9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3264
	.uleb128 0x29
	.long	.LASF1284
	.byte	0x1
	.value	0x99c
	.long	0x40d9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3136
	.uleb128 0xc
	.long	.LASF1285
	.byte	0x4
	.byte	0x1
	.value	0x99e
	.long	0x39ba
	.uleb128 0xd
	.long	.LASF1286
	.sleb128 0
	.uleb128 0xd
	.long	.LASF1287
	.sleb128 1
	.uleb128 0xd
	.long	.LASF1288
	.sleb128 2
	.byte	0
	.uleb128 0x29
	.long	.LASF1074
	.byte	0x1
	.value	0x99e
	.long	0x40e9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3008
	.uleb128 0x29
	.long	.LASF1289
	.byte	0x1
	.value	0x99f
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3672
	.uleb128 0x29
	.long	.LASF1290
	.byte	0x1
	.value	0x99f
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3784
	.uleb128 0x29
	.long	.LASF1029
	.byte	0x1
	.value	0x9a0
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3664
	.uleb128 0x29
	.long	.LASF1291
	.byte	0x1
	.value	0x9a1
	.long	0x40c9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -2880
	.uleb128 0x29
	.long	.LASF1292
	.byte	0x1
	.value	0x9a2
	.long	0x40b9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x29
	.long	.LASF1293
	.byte	0x1
	.value	0x9a3
	.long	0x40b9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x29
	.long	.LASF1294
	.byte	0x1
	.value	0x9a4
	.long	0x40b9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x29
	.long	.LASF1295
	.byte	0x1
	.value	0x9a5
	.long	0x40b9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x29
	.long	.LASF1296
	.byte	0x1
	.value	0x9a6
	.long	0x40c9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -2752
	.uleb128 0x29
	.long	.LASF1297
	.byte	0x1
	.value	0x9a7
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3780
	.uleb128 0x29
	.long	.LASF1298
	.byte	0x1
	.value	0x9a8
	.long	0x40c9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -2624
	.uleb128 0x29
	.long	.LASF1299
	.byte	0x1
	.value	0x9a9
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3776
	.uleb128 0x29
	.long	.LASF1300
	.byte	0x1
	.value	0x9aa
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3772
	.uleb128 0x29
	.long	.LASF1301
	.byte	0x1
	.value	0x9ab
	.long	0x40c9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -2496
	.uleb128 0x29
	.long	.LASF1302
	.byte	0x1
	.value	0x9ac
	.long	0x40c9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -2368
	.uleb128 0x29
	.long	.LASF1303
	.byte	0x1
	.value	0x9ad
	.long	0x40c9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -2240
	.uleb128 0x29
	.long	.LASF1304
	.byte	0x1
	.value	0x9ae
	.long	0x40b9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x29
	.long	.LASF1305
	.byte	0x1
	.value	0x9af
	.long	0x40b9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x29
	.long	.LASF1306
	.byte	0x1
	.value	0x9b0
	.long	0x40b9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x29
	.long	.LASF1307
	.byte	0x1
	.value	0x9b1
	.long	0x40b9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x29
	.long	.LASF1308
	.byte	0x1
	.value	0x9b2
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3768
	.uleb128 0x29
	.long	.LASF1309
	.byte	0x1
	.value	0x9b3
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3764
	.uleb128 0x29
	.long	.LASF1310
	.byte	0x1
	.value	0x9b4
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3760
	.uleb128 0x29
	.long	.LASF1311
	.byte	0x1
	.value	0x9b5
	.long	0x40f9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1248
	.uleb128 0x29
	.long	.LASF1312
	.byte	0x1
	.value	0x9b6
	.long	0x200c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1488
	.uleb128 0x29
	.long	.LASF1313
	.byte	0x1
	.value	0x9b7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3584
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x9b8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3576
	.uleb128 0x29
	.long	.LASF1314
	.byte	0x1
	.value	0x9b9
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3756
	.uleb128 0x29
	.long	.LASF1315
	.byte	0x1
	.value	0x9b9
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3752
	.uleb128 0x29
	.long	.LASF1023
	.byte	0x1
	.value	0x9ba
	.long	0x203c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -2112
	.uleb128 0x29
	.long	.LASF1316
	.byte	0x1
	.value	0x9bb
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3748
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x411f
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.11908
	.uleb128 0x35
	.long	.LASF1317
	.byte	0x1
	.value	0xada
	.quad	.L1028
	.uleb128 0x34
	.string	"reg"
	.byte	0x1
	.value	0xcac
	.quad	.L1154
	.uleb128 0x35
	.long	.LASF1318
	.byte	0x1
	.value	0xe04
	.quad	.L1294
	.uleb128 0x2c
	.quad	.LBB28
	.quad	.LBE28-.LBB28
	.long	0x3c77
	.uleb128 0x2e
	.string	"p"
	.byte	0x1
	.value	0x9ff
	.long	0x2ba
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1856
	.uleb128 0x2e
	.string	"c"
	.byte	0x1
	.value	0xa00
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3656
	.uleb128 0x2c
	.quad	.LBB29
	.quad	.LBE29-.LBB29
	.long	0x3c54
	.uleb128 0x29
	.long	.LASF1319
	.byte	0x1
	.value	0xa2a
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3652
	.byte	0
	.uleb128 0x2b
	.quad	.LBB30
	.quad	.LBE30-.LBB30
	.uleb128 0x29
	.long	.LASF1319
	.byte	0x1
	.value	0xa31
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3648
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB31
	.quad	.LBE31-.LBB31
	.long	0x3cf4
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0xa48
	.long	0x732
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3644
	.uleb128 0x2c
	.quad	.LBB32
	.quad	.LBE32-.LBB32
	.long	0x3cd1
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.value	0xa7a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3568
	.uleb128 0x2e
	.string	"op"
	.byte	0x1
	.value	0xa7b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3560
	.byte	0
	.uleb128 0x2b
	.quad	.LBB33
	.quad	.LBE33-.LBB33
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0xaa3
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3640
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB34
	.quad	.LBE34-.LBB34
	.long	0x3e76
	.uleb128 0x29
	.long	.LASF1320
	.byte	0x1
	.value	0xaea
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3744
	.uleb128 0x2e
	.string	"bad"
	.byte	0x1
	.value	0xaed
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3740
	.uleb128 0x29
	.long	.LASF1321
	.byte	0x1
	.value	0xaf4
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3736
	.uleb128 0x2c
	.quad	.LBB35
	.quad	.LBE35-.LBB35
	.long	0x3e53
	.uleb128 0x2e
	.string	"p"
	.byte	0x1
	.value	0xafa
	.long	0x2ba
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1856
	.uleb128 0x2e
	.string	"win"
	.byte	0x1
	.value	0xafb
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3732
	.uleb128 0x29
	.long	.LASF1322
	.byte	0x1
	.value	0xafc
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3728
	.uleb128 0x29
	.long	.LASF1323
	.byte	0x1
	.value	0xafe
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3724
	.uleb128 0x29
	.long	.LASF1324
	.byte	0x1
	.value	0xb00
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3720
	.uleb128 0x2e
	.string	"c"
	.byte	0x1
	.value	0xb01
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3636
	.uleb128 0x29
	.long	.LASF1020
	.byte	0x1
	.value	0xb02
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3608
	.uleb128 0x29
	.long	.LASF329
	.byte	0x1
	.value	0xb03
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3716
	.uleb128 0x29
	.long	.LASF1325
	.byte	0x1
	.value	0xb06
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3712
	.uleb128 0x29
	.long	.LASF1326
	.byte	0x1
	.value	0xb07
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3708
	.uleb128 0x29
	.long	.LASF1327
	.byte	0x1
	.value	0xb0a
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3704
	.uleb128 0x29
	.long	.LASF1251
	.byte	0x1
	.value	0xb0b
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3700
	.uleb128 0x2c
	.quad	.LBB36
	.quad	.LBE36-.LBB36
	.long	0x3e30
	.uleb128 0x29
	.long	.LASF1254
	.byte	0x1
	.value	0xbc5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3552
	.byte	0
	.uleb128 0x2b
	.quad	.LBB37
	.quad	.LBE37-.LBB37
	.uleb128 0x29
	.long	.LASF1328
	.byte	0x1
	.value	0xcc6
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3696
	.byte	0
	.byte	0
	.uleb128 0x2b
	.quad	.LBB38
	.quad	.LBE38-.LBB38
	.uleb128 0x29
	.long	.LASF1273
	.byte	0x1
	.value	0xd46
	.long	0x29c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1856
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB39
	.quad	.LBE39-.LBB39
	.long	0x3eaa
	.uleb128 0x29
	.long	.LASF1329
	.byte	0x1
	.value	0xdcb
	.long	0x147
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3632
	.uleb128 0x2e
	.string	"t"
	.byte	0x1
	.value	0xdcc
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3628
	.byte	0
	.uleb128 0x2c
	.quad	.LBB40
	.quad	.LBE40-.LBB40
	.long	0x3ed0
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0xe1d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3544
	.byte	0
	.uleb128 0x2c
	.quad	.LBB41
	.quad	.LBE41-.LBB41
	.long	0x3ef6
	.uleb128 0x29
	.long	.LASF1020
	.byte	0x1
	.value	0xee0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3600
	.byte	0
	.uleb128 0x2c
	.quad	.LBB42
	.quad	.LBE42-.LBB42
	.long	0x3f1c
	.uleb128 0x29
	.long	.LASF1020
	.byte	0x1
	.value	0xf2d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3592
	.byte	0
	.uleb128 0x2c
	.quad	.LBB43
	.quad	.LBE43-.LBB43
	.long	0x3f42
	.uleb128 0x29
	.long	.LASF1330
	.byte	0x1
	.value	0xf4e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3536
	.byte	0
	.uleb128 0x2c
	.quad	.LBB44
	.quad	.LBE44-.LBB44
	.long	0x3f68
	.uleb128 0x29
	.long	.LASF1331
	.byte	0x1
	.value	0xf6b
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3624
	.byte	0
	.uleb128 0x2c
	.quad	.LBB45
	.quad	.LBE45-.LBB45
	.long	0x3f8c
	.uleb128 0x2e
	.string	"k"
	.byte	0x1
	.value	0xf98
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3692
	.byte	0
	.uleb128 0x2c
	.quad	.LBB46
	.quad	.LBE46-.LBB46
	.long	0x3fb2
	.uleb128 0x29
	.long	.LASF1063
	.byte	0x1
	.value	0xfde
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3620
	.byte	0
	.uleb128 0x2c
	.quad	.LBB47
	.quad	.LBE47-.LBB47
	.long	0x3fd8
	.uleb128 0x29
	.long	.LASF1064
	.byte	0x1
	.value	0xfed
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3616
	.byte	0
	.uleb128 0x2c
	.quad	.LBB48
	.quad	.LBE48-.LBB48
	.long	0x4060
	.uleb128 0x29
	.long	.LASF1332
	.byte	0x1
	.value	0x1022
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3688
	.uleb128 0x29
	.long	.LASF1333
	.byte	0x1
	.value	0x1023
	.long	0x40c9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1984
	.uleb128 0x29
	.long	.LASF1334
	.byte	0x1
	.value	0x1024
	.long	0x40c9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1856
	.uleb128 0x29
	.long	.LASF1335
	.byte	0x1
	.value	0x1025
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3684
	.uleb128 0x2b
	.quad	.LBB49
	.quad	.LBE49-.LBB49
	.uleb128 0x29
	.long	.LASF1336
	.byte	0x1
	.value	0x1050
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3680
	.uleb128 0x29
	.long	.LASF1199
	.byte	0x1
	.value	0x1051
	.long	0x218f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3676
	.byte	0
	.byte	0
	.uleb128 0x2b
	.quad	.LBB50
	.quad	.LBE50-.LBB50
	.uleb128 0x29
	.long	.LASF1337
	.byte	0x1
	.value	0x10b3
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3528
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x10b4
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -3612
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x29d
	.uleb128 0x12
	.long	0x2ba
	.long	0x40a9
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0x147
	.long	0x40b9
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x40c9
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0x139
	.long	0x40d9
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0x218f
	.long	0x40e9
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0x399a
	.long	0x40f9
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x410f
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x411f
	.uleb128 0x13
	.long	0x140
	.byte	0xc
	.byte	0
	.uleb128 0x15
	.long	0x410f
	.uleb128 0x36
	.long	.LASF1338
	.byte	0x1
	.value	0x10c3
	.long	0x139
	.quad	.LFB22
	.quad	.LFE22-.LFB22
	.uleb128 0x1
	.byte	0x9c
	.long	0x4172
	.uleb128 0x27
	.long	.LASF1035
	.byte	0x1
	.value	0x10c4
	.long	0x4cd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x27
	.long	.LASF1339
	.byte	0x1
	.value	0x10c5
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"c"
	.byte	0x1
	.value	0x10c7
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x26
	.long	.LASF1340
	.byte	0x1
	.value	0x10ed
	.long	0x2d
	.quad	.LFB23
	.quad	.LFE23-.LFB23
	.uleb128 0x1
	.byte	0x9c
	.long	0x4337
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x10ef
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x27
	.long	.LASF1062
	.byte	0x1
	.value	0x10f0
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x27
	.long	.LASF1199
	.byte	0x1
	.value	0x10f1
	.long	0x218f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x27
	.long	.LASF1276
	.byte	0x1
	.value	0x10f2
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x27
	.long	.LASF1341
	.byte	0x1
	.value	0x10f3
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x27
	.long	.LASF1030
	.byte	0x1
	.value	0x10f4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x27
	.long	.LASF1283
	.byte	0x1
	.value	0x10f5
	.long	0x567
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x10f7
	.long	0x732
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x10f9
	.long	0x4cd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x10fa
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x29
	.long	.LASF1342
	.byte	0x1
	.value	0x10fb
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x4337
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.12167
	.uleb128 0x2c
	.quad	.LBB51
	.quad	.LBE51-.LBB51
	.long	0x4298
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x1100
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2b
	.quad	.LBB52
	.quad	.LBE52-.LBB52
	.uleb128 0x2e
	.string	"mem"
	.byte	0x1
	.value	0x110c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB53
	.quad	.LBE53-.LBB53
	.long	0x42be
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1124
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x2c
	.quad	.LBB54
	.quad	.LBE54-.LBB54
	.long	0x4315
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x1139
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x113a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2b
	.quad	.LBB55
	.quad	.LBE55-.LBB55
	.uleb128 0x29
	.long	.LASF1343
	.byte	0x1
	.value	0x1161
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.uleb128 0x2b
	.quad	.LBB56
	.quad	.LBE56-.LBB56
	.uleb128 0x29
	.long	.LASF1344
	.byte	0x1
	.value	0x1192
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x4bd
	.uleb128 0x26
	.long	.LASF1345
	.byte	0x1
	.value	0x11a9
	.long	0x2d
	.quad	.LFB24
	.quad	.LFE24-.LFB24
	.uleb128 0x1
	.byte	0x9c
	.long	0x438b
	.uleb128 0x28
	.string	"ad"
	.byte	0x1
	.value	0x11aa
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x27
	.long	.LASF46
	.byte	0x1
	.value	0x11ab
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x11af
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x26
	.long	.LASF1346
	.byte	0x1
	.value	0x11da
	.long	0x139
	.quad	.LFB25
	.quad	.LFE25-.LFB25
	.uleb128 0x1
	.byte	0x9c
	.long	0x4455
	.uleb128 0x27
	.long	.LASF1
	.byte	0x1
	.value	0x11db
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x27
	.long	.LASF1347
	.byte	0x1
	.value	0x11dc
	.long	0xe68
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x28
	.string	"ad"
	.byte	0x1
	.value	0x11dd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x28
	.string	"loc"
	.byte	0x1
	.value	0x11de
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x27
	.long	.LASF1062
	.byte	0x1
	.value	0x11df
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x27
	.long	.LASF1199
	.byte	0x1
	.value	0x11e0
	.long	0x218f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x27
	.long	.LASF1276
	.byte	0x1
	.value	0x11e1
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x27
	.long	.LASF1030
	.byte	0x1
	.value	0x11e2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x11e4
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x29
	.long	.LASF1348
	.byte	0x1
	.value	0x11e5
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x11e6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x26
	.long	.LASF1349
	.byte	0x1
	.value	0x134a
	.long	0x2d
	.quad	.LFB26
	.quad	.LFE26-.LFB26
	.uleb128 0x1
	.byte	0x9c
	.long	0x4502
	.uleb128 0x28
	.string	"ad"
	.byte	0x1
	.value	0x134b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x27
	.long	.LASF1030
	.byte	0x1
	.value	0x134c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x134e
	.long	0x732
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x134f
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x1350
	.long	0x4cd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2b
	.quad	.LBB57
	.quad	.LBE57-.LBB57
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x1361
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2b
	.quad	.LBB58
	.quad	.LBE58-.LBB58
	.uleb128 0x2e
	.string	"mem"
	.byte	0x1
	.value	0x136a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2d
	.long	.LASF1350
	.byte	0x1
	.value	0x1393
	.long	0x2d
	.quad	.LFB27
	.quad	.LFE27-.LFB27
	.uleb128 0x1
	.byte	0x9c
	.long	0x455d
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x1394
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x28
	.string	"y"
	.byte	0x1
	.value	0x1394
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1396
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x1397
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.uleb128 0x26
	.long	.LASF1351
	.byte	0x1
	.value	0x13ca
	.long	0x2d
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.uleb128 0x1
	.byte	0x9c
	.long	0x45db
	.uleb128 0x27
	.long	.LASF1262
	.byte	0x1
	.value	0x13cb
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.string	"op0"
	.byte	0x1
	.value	0x13cd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"op1"
	.byte	0x1
	.value	0x13cd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"op2"
	.byte	0x1
	.value	0x13cd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x13ce
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x13cf
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.uleb128 0x30
	.long	.LASF1352
	.byte	0x1
	.value	0x1404
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.uleb128 0x1
	.byte	0x9c
	.long	0x4627
	.uleb128 0x27
	.long	.LASF1030
	.byte	0x1
	.value	0x1405
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x27
	.long	.LASF46
	.byte	0x1
	.value	0x1406
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x27
	.long	.LASF1237
	.byte	0x1
	.value	0x1407
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x26
	.long	.LASF1353
	.byte	0x1
	.value	0x142c
	.long	0x139
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.uleb128 0x1
	.byte	0x9c
	.long	0x4991
	.uleb128 0x27
	.long	.LASF1
	.byte	0x1
	.value	0x142d
	.long	0x574
	.uleb128 0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x142e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x27
	.long	.LASF1354
	.byte	0x1
	.value	0x142f
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x28
	.string	"loc"
	.byte	0x1
	.value	0x1430
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x27
	.long	.LASF1062
	.byte	0x1
	.value	0x1431
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -236
	.uleb128 0x27
	.long	.LASF1199
	.byte	0x1
	.value	0x1432
	.long	0x218f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x27
	.long	.LASF1276
	.byte	0x1
	.value	0x1433
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x27
	.long	.LASF1030
	.byte	0x1
	.value	0x1434
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x1436
	.long	0x732
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x49a1
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.12257
	.uleb128 0x2c
	.quad	.LBB59
	.quad	.LBE59-.LBB59
	.long	0x475e
	.uleb128 0x29
	.long	.LASF1355
	.byte	0x1
	.value	0x143c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x29
	.long	.LASF1356
	.byte	0x1
	.value	0x143d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x29
	.long	.LASF1357
	.byte	0x1
	.value	0x143e
	.long	0x732
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x29
	.long	.LASF1358
	.byte	0x1
	.value	0x143f
	.long	0x732
	.uleb128 0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x2e
	.string	"op0"
	.byte	0x1
	.value	0x1440
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2e
	.string	"op1"
	.byte	0x1
	.value	0x1441
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.byte	0
	.uleb128 0x37
	.long	.Ldebug_ranges0+0
	.long	0x47dc
	.uleb128 0x2e
	.string	"op0"
	.byte	0x1
	.value	0x14ae
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.string	"op1"
	.byte	0x1
	.value	0x14af
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2b
	.quad	.LBB61
	.quad	.LBE61-.LBB61
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x14c6
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x29
	.long	.LASF1237
	.byte	0x1
	.value	0x14c7
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x2b
	.quad	.LBB62
	.quad	.LBE62-.LBB62
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x14d4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB64
	.quad	.LBE64-.LBB64
	.long	0x488a
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x150a
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -188
	.uleb128 0x29
	.long	.LASF1254
	.byte	0x1
	.value	0x150b
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x29
	.long	.LASF1359
	.byte	0x1
	.value	0x150c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2c
	.quad	.LBB65
	.quad	.LBE65-.LBB65
	.long	0x4847
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1518
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.byte	0
	.uleb128 0x2b
	.quad	.LBB66
	.quad	.LBE66-.LBB66
	.uleb128 0x29
	.long	.LASF1237
	.byte	0x1
	.value	0x153a
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -180
	.uleb128 0x29
	.long	.LASF1360
	.byte	0x1
	.value	0x1544
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x29
	.long	.LASF1201
	.byte	0x1
	.value	0x1547
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB67
	.quad	.LBE67-.LBB67
	.long	0x48ce
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x157c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF1361
	.byte	0x1
	.value	0x157d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x29
	.long	.LASF1237
	.byte	0x1
	.value	0x157e
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.byte	0
	.uleb128 0x2c
	.quad	.LBB68
	.quad	.LBE68-.LBB68
	.long	0x4915
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x15b2
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x2b
	.quad	.LBB69
	.quad	.LBE69-.LBB69
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x15cc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB70
	.quad	.LBE70-.LBB70
	.long	0x493b
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x15fa
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.byte	0
	.uleb128 0x2c
	.quad	.LBB71
	.quad	.LBE71-.LBB71
	.long	0x4961
	.uleb128 0x29
	.long	.LASF1056
	.byte	0x1
	.value	0x160a
	.long	0x147
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.byte	0
	.uleb128 0x2b
	.quad	.LBB72
	.quad	.LBE72-.LBB72
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x161e
	.long	0x4cd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x161f
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -172
	.byte	0
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x49a1
	.uleb128 0x13
	.long	0x140
	.byte	0x16
	.byte	0
	.uleb128 0x15
	.long	0x4991
	.uleb128 0x32
	.long	.LASF1362
	.byte	0x1
	.value	0x163c
	.quad	.LFB31
	.quad	.LFE31-.LFB31
	.uleb128 0x1
	.byte	0x9c
	.long	0x4a72
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x163d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x28
	.string	"loc"
	.byte	0x1
	.value	0x163e
	.long	0xe68
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x27
	.long	.LASF1056
	.byte	0x1
	.value	0x163f
	.long	0x147
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x27
	.long	.LASF1
	.byte	0x1
	.value	0x1640
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x27
	.long	.LASF1062
	.byte	0x1
	.value	0x1641
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x27
	.long	.LASF1199
	.byte	0x1
	.value	0x1642
	.long	0x218f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x27
	.long	.LASF1276
	.byte	0x1
	.value	0x1643
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2c
	.quad	.LBB73
	.quad	.LBE73-.LBB73
	.long	0x4a50
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1649
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x2b
	.quad	.LBB74
	.quad	.LBE74-.LBB74
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1655
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x26
	.long	.LASF1363
	.byte	0x1
	.value	0x1678
	.long	0x2d
	.quad	.LFB32
	.quad	.LFE32-.LFB32
	.uleb128 0x1
	.byte	0x9c
	.long	0x4b62
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x167a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x27
	.long	.LASF1364
	.byte	0x1
	.value	0x167b
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x27
	.long	.LASF1062
	.byte	0x1
	.value	0x167c
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x27
	.long	.LASF1199
	.byte	0x1
	.value	0x167d
	.long	0x218f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x27
	.long	.LASF1276
	.byte	0x1
	.value	0x167e
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x27
	.long	.LASF1030
	.byte	0x1
	.value	0x167f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x1681
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2b
	.quad	.LBB75
	.quad	.LBE75-.LBB75
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x168e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2b
	.quad	.LBB76
	.quad	.LBE76-.LBB76
	.uleb128 0x29
	.long	.LASF329
	.byte	0x1
	.value	0x1695
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x29
	.long	.LASF1365
	.byte	0x1
	.value	0x1696
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x29
	.long	.LASF1366
	.byte	0x1
	.value	0x1697
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF1368
	.byte	0x1
	.value	0x16ce
	.quad	.LFB33
	.quad	.LFE33-.LFB33
	.uleb128 0x1
	.byte	0x9c
	.long	0x4c00
	.uleb128 0x27
	.long	.LASF1030
	.byte	0x1
	.value	0x16cf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x16d1
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x4c10
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.12321
	.uleb128 0x2b
	.quad	.LBB77
	.quad	.LBE77-.LBB77
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x16d5
	.long	0x316d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x29
	.long	.LASF1369
	.byte	0x1
	.value	0x16d6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2b
	.quad	.LBB78
	.quad	.LBE78-.LBB78
	.uleb128 0x29
	.long	.LASF1370
	.byte	0x1
	.value	0x170e
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x4c10
	.uleb128 0x13
	.long	0x140
	.byte	0xd
	.byte	0
	.uleb128 0x15
	.long	0x4c00
	.uleb128 0x38
	.long	.LASF1371
	.byte	0x1
	.value	0x1729
	.quad	.LFB34
	.quad	.LFE34-.LFB34
	.uleb128 0x1
	.byte	0x9c
	.long	0x4c61
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x172a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x28
	.string	"y"
	.byte	0x1
	.value	0x172a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x4c71
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.12329
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x4c71
	.uleb128 0x13
	.long	0x140
	.byte	0x11
	.byte	0
	.uleb128 0x15
	.long	0x4c61
	.uleb128 0x32
	.long	.LASF1372
	.byte	0x1
	.value	0x1735
	.quad	.LFB35
	.quad	.LFE35-.LFB35
	.uleb128 0x1
	.byte	0x9c
	.long	0x4d22
	.uleb128 0x28
	.string	"px"
	.byte	0x1
	.value	0x1736
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x28
	.string	"py"
	.byte	0x1
	.value	0x1737
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x27
	.long	.LASF1373
	.byte	0x1
	.value	0x1738
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x173a
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x173a
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"x"
	.byte	0x1
	.value	0x173b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"y"
	.byte	0x1
	.value	0x173b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x173c
	.long	0x316d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x173d
	.long	0x732
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x173e
	.long	0x4cd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1374
	.byte	0x1
	.value	0x1767
	.quad	.LFB36
	.quad	.LFE36-.LFB36
	.uleb128 0x1
	.byte	0x9c
	.long	0x4d68
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x1768
	.long	0xe68
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x28
	.string	"y"
	.byte	0x1
	.value	0x1769
	.long	0xe68
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x176b
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x2d
	.long	.LASF1375
	.byte	0x1
	.value	0x177b
	.long	0x2d
	.quad	.LFB37
	.quad	.LFE37-.LFB37
	.uleb128 0x1
	.byte	0x9c
	.long	0x4e1b
	.uleb128 0x28
	.string	"loc"
	.byte	0x1
	.value	0x177c
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x177e
	.long	0x316d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2c
	.quad	.LBB79
	.quad	.LBE79-.LBB79
	.long	0x4dee
	.uleb128 0x29
	.long	.LASF1369
	.byte	0x1
	.value	0x1782
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2b
	.quad	.LBB80
	.quad	.LBE80-.LBB80
	.uleb128 0x29
	.long	.LASF1370
	.byte	0x1
	.value	0x179c
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.byte	0
	.byte	0
	.uleb128 0x2b
	.quad	.LBB81
	.quad	.LBE81-.LBB81
	.uleb128 0x2e
	.string	"x"
	.byte	0x1
	.value	0x17ad
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"y"
	.byte	0x1
	.value	0x17ae
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x2d
	.long	.LASF1376
	.byte	0x1
	.value	0x17c2
	.long	0x139
	.quad	.LFB38
	.quad	.LFE38-.LFB38
	.uleb128 0x1
	.byte	0x9c
	.long	0x4f2a
	.uleb128 0x27
	.long	.LASF46
	.byte	0x1
	.value	0x17c3
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x27
	.long	.LASF1377
	.byte	0x1
	.value	0x17c3
	.long	0x266
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x17c4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x28
	.string	"loc"
	.byte	0x1
	.value	0x17c5
	.long	0xe68
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x17c7
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x17c8
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x17c9
	.long	0x732
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x17ca
	.long	0x4cd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF1378
	.byte	0x1
	.value	0x17cf
	.quad	.L1873
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x4f3a
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.12382
	.uleb128 0x2c
	.quad	.LBB82
	.quad	.LBE82-.LBB82
	.long	0x4f0a
	.uleb128 0x29
	.long	.LASF1379
	.byte	0x1
	.value	0x17f1
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x29
	.long	.LASF1380
	.byte	0x1
	.value	0x17f2
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.uleb128 0x2b
	.quad	.LBB83
	.quad	.LBE83-.LBB83
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x182b
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.byte	0
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x4f3a
	.uleb128 0x13
	.long	0x140
	.byte	0x1c
	.byte	0
	.uleb128 0x15
	.long	0x4f2a
	.uleb128 0x2d
	.long	.LASF1381
	.byte	0x1
	.value	0x1840
	.long	0x139
	.quad	.LFB39
	.quad	.LFE39-.LFB39
	.uleb128 0x1
	.byte	0x9c
	.long	0x4fae
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x1841
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x28
	.string	"in"
	.byte	0x1
	.value	0x1841
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x1843
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x29
	.long	.LASF1377
	.byte	0x1
	.value	0x1843
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2a
	.long	.LASF1220
	.long	0x4fbe
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.12403
	.byte	0
	.uleb128 0x12
	.long	0x2c0
	.long	0x4fbe
	.uleb128 0x13
	.long	0x140
	.byte	0x22
	.byte	0
	.uleb128 0x15
	.long	0x4fae
	.uleb128 0x2d
	.long	.LASF1382
	.byte	0x1
	.value	0x187b
	.long	0x139
	.quad	.LFB40
	.quad	.LFE40-.LFB40
	.uleb128 0x1
	.byte	0x9c
	.long	0x500f
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x187c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x187e
	.long	0x4cd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x187f
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x2d
	.long	.LASF1383
	.byte	0x1
	.value	0x18ae
	.long	0x2d
	.quad	.LFB41
	.quad	.LFE41-.LFB41
	.uleb128 0x1
	.byte	0x9c
	.long	0x53ec
	.uleb128 0x27
	.long	.LASF1384
	.byte	0x1
	.value	0x18af
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x27
	.long	.LASF1030
	.byte	0x1
	.value	0x18b0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x27
	.long	.LASF1056
	.byte	0x1
	.value	0x18b1
	.long	0x147
	.uleb128 0x3
	.byte	0x91
	.sleb128 -244
	.uleb128 0x27
	.long	.LASF1319
	.byte	0x1
	.value	0x18b2
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x27
	.long	.LASF1278
	.byte	0x1
	.value	0x18b3
	.long	0x4093
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x27
	.long	.LASF1385
	.byte	0x1
	.value	0x18b4
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -260
	.uleb128 0x27
	.long	.LASF1
	.byte	0x1
	.value	0x18b5
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"p"
	.byte	0x1
	.value	0x18b7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x29
	.long	.LASF1386
	.byte	0x1
	.value	0x18b8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF1387
	.byte	0x1
	.value	0x18b8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x29
	.long	.LASF1254
	.byte	0x1
	.value	0x18b8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x29
	.long	.LASF1188
	.byte	0x1
	.value	0x18b8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"pat"
	.byte	0x1
	.value	0x18b9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x29
	.long	.LASF46
	.byte	0x1
	.value	0x18ba
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x29
	.long	.LASF1388
	.byte	0x1
	.value	0x18bb
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x29
	.long	.LASF1389
	.byte	0x1
	.value	0x18bc
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x29
	.long	.LASF1390
	.byte	0x1
	.value	0x18bd
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -204
	.uleb128 0x29
	.long	.LASF1391
	.byte	0x1
	.value	0x18be
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x29
	.long	.LASF1392
	.byte	0x1
	.value	0x18bf
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x18c0
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x29
	.long	.LASF1393
	.byte	0x1
	.value	0x18c1
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x2c
	.quad	.LBB84
	.quad	.LBE84-.LBB84
	.long	0x51a1
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x18c9
	.long	0x732
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.byte	0
	.uleb128 0x2c
	.quad	.LBB85
	.quad	.LBE85-.LBB85
	.long	0x51e7
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1902
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2b
	.quad	.LBB86
	.quad	.LBE86-.LBB86
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1946
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB87
	.quad	.LBE87-.LBB87
	.long	0x520b
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1988
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -188
	.byte	0
	.uleb128 0x2c
	.quad	.LBB88
	.quad	.LBE88-.LBB88
	.long	0x5261
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1993
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x2b
	.quad	.LBB89
	.quad	.LBE89-.LBB89
	.uleb128 0x29
	.long	.LASF1394
	.byte	0x1
	.value	0x1997
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x29
	.long	.LASF1395
	.byte	0x1
	.value	0x1998
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB90
	.quad	.LBE90-.LBB90
	.long	0x5285
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x19b3
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -180
	.byte	0
	.uleb128 0x2c
	.quad	.LBB91
	.quad	.LBE91-.LBB91
	.long	0x52dd
	.uleb128 0x29
	.long	.LASF1337
	.byte	0x1
	.value	0x19d8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2b
	.quad	.LBB92
	.quad	.LBE92-.LBB92
	.uleb128 0x29
	.long	.LASF1396
	.byte	0x1
	.value	0x19e0
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x29
	.long	.LASF1397
	.byte	0x1
	.value	0x19e1
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.byte	0
	.byte	0
	.uleb128 0x2c
	.quad	.LBB93
	.quad	.LBE93-.LBB93
	.long	0x5376
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x19fc
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x2b
	.quad	.LBB94
	.quad	.LBE94-.LBB94
	.uleb128 0x2e
	.string	"v1"
	.byte	0x1
	.value	0x19ff
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2b
	.quad	.LBB95
	.quad	.LBE95-.LBB95
	.uleb128 0x29
	.long	.LASF1337
	.byte	0x1
	.value	0x1a04
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2b
	.quad	.LBB96
	.quad	.LBE96-.LBB96
	.uleb128 0x29
	.long	.LASF1396
	.byte	0x1
	.value	0x1a0c
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x29
	.long	.LASF1397
	.byte	0x1
	.value	0x1a0d
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2b
	.quad	.LBB97
	.quad	.LBE97-.LBB97
	.uleb128 0x29
	.long	.LASF1361
	.byte	0x1
	.value	0x1a2e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2b
	.quad	.LBB98
	.quad	.LBE98-.LBB98
	.uleb128 0x29
	.long	.LASF1337
	.byte	0x1
	.value	0x1a36
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2b
	.quad	.LBB99
	.quad	.LBE99-.LBB99
	.uleb128 0x29
	.long	.LASF1396
	.byte	0x1
	.value	0x1a3a
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x29
	.long	.LASF1397
	.byte	0x1
	.value	0x1a3b
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x26
	.long	.LASF1398
	.byte	0x1
	.value	0x1a75
	.long	0x139
	.quad	.LFB42
	.quad	.LFE42-.LFB42
	.uleb128 0x1
	.byte	0x9c
	.long	0x54e2
	.uleb128 0x28
	.string	"x"
	.byte	0x1
	.value	0x1a76
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x27
	.long	.LASF1399
	.byte	0x1
	.value	0x1a76
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x1a78
	.long	0x732
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x1a79
	.long	0x4cd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1a7a
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2c
	.quad	.LBB100
	.quad	.LBE100-.LBB100
	.long	0x547c
	.uleb128 0x29
	.long	.LASF1262
	.byte	0x1
	.value	0x1a7e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x2c
	.quad	.LBB101
	.quad	.LBE101-.LBB101
	.long	0x54a1
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1a96
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x2b
	.quad	.LBB102
	.quad	.LBE102-.LBB102
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x1a9c
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2b
	.quad	.LBB103
	.quad	.LBE103-.LBB103
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1a9f
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.long	.LASF1400
	.byte	0x1
	.value	0x1aad
	.long	0x139
	.quad	.LFB43
	.quad	.LFE43-.LFB43
	.uleb128 0x1
	.byte	0x9c
	.long	0x55e7
	.uleb128 0x27
	.long	.LASF46
	.byte	0x1
	.value	0x1aae
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x27
	.long	.LASF1030
	.byte	0x1
	.value	0x1aaf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x27
	.long	.LASF1
	.byte	0x1
	.value	0x1ab0
	.long	0x574
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x27
	.long	.LASF1401
	.byte	0x1
	.value	0x1ab1
	.long	0x139
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x1ab3
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x29
	.long	.LASF1377
	.byte	0x1
	.value	0x1ab4
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2c
	.quad	.LBB104
	.quad	.LBE104-.LBB104
	.long	0x5585
	.uleb128 0x29
	.long	.LASF1402
	.byte	0x1
	.value	0x1aba
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x2b
	.quad	.LBB105
	.quad	.LBE105-.LBB105
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1ac1
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2b
	.quad	.LBB106
	.quad	.LBE106-.LBB106
	.uleb128 0x2e
	.string	"elt"
	.byte	0x1
	.value	0x1ac5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2b
	.quad	.LBB107
	.quad	.LBE107-.LBB107
	.uleb128 0x29
	.long	.LASF1402
	.byte	0x1
	.value	0x1aca
	.long	0x266
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF1403
	.byte	0x1
	.value	0x1ae9
	.quad	.LFB44
	.quad	.LFE44-.LFB44
	.uleb128 0x1
	.byte	0x9c
	.long	0x562f
	.uleb128 0x28
	.string	"f"
	.byte	0x1
	.value	0x1aea
	.long	0x562f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x1aec
	.long	0x139
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x29
	.long	.LASF1404
	.byte	0x1
	.value	0x1aed
	.long	0x4cd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2c7
	.uleb128 0x2f
	.long	.LASF1406
	.byte	0x1
	.value	0x1b49
	.quad	.LFB45
	.quad	.LFE45-.LFB45
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x39
	.long	.LASF1407
	.byte	0x1
	.byte	0x8a
	.long	0x139
	.uleb128 0x9
	.byte	0x3
	.quad	replace_reloads
	.uleb128 0x12
	.long	0x2984
	.long	0x5674
	.uleb128 0x13
	.long	0x140
	.byte	0x95
	.byte	0
	.uleb128 0x39
	.long	.LASF1408
	.byte	0x1
	.byte	0x96
	.long	0x5664
	.uleb128 0x9
	.byte	0x3
	.quad	replacements
	.uleb128 0x39
	.long	.LASF1409
	.byte	0x1
	.byte	0x99
	.long	0x139
	.uleb128 0x9
	.byte	0x3
	.quad	n_replacements
	.uleb128 0x12
	.long	0x2d
	.long	0x56ae
	.uleb128 0x13
	.long	0x140
	.byte	0x3a
	.byte	0
	.uleb128 0x39
	.long	.LASF1410
	.byte	0x1
	.byte	0xaf
	.long	0x569e
	.uleb128 0x9
	.byte	0x3
	.quad	secondary_memlocs
	.uleb128 0x12
	.long	0x2d
	.long	0x56d9
	.uleb128 0x13
	.long	0x140
	.byte	0x3a
	.uleb128 0x13
	.long	0x140
	.byte	0x1d
	.byte	0
	.uleb128 0x39
	.long	.LASF1411
	.byte	0x1
	.byte	0xb0
	.long	0x56c3
	.uleb128 0x9
	.byte	0x3
	.quad	secondary_memlocs_elim
	.uleb128 0x39
	.long	.LASF1412
	.byte	0x1
	.byte	0xb5
	.long	0x2d
	.uleb128 0x9
	.byte	0x3
	.quad	this_insn
	.uleb128 0x39
	.long	.LASF1413
	.byte	0x1
	.byte	0xb8
	.long	0x139
	.uleb128 0x9
	.byte	0x3
	.quad	this_insn_is_asm
	.uleb128 0x39
	.long	.LASF1414
	.byte	0x1
	.byte	0xbd
	.long	0x139
	.uleb128 0x9
	.byte	0x3
	.quad	hard_regs_live_known
	.uleb128 0x39
	.long	.LASF1415
	.byte	0x1
	.byte	0xc3
	.long	0x4093
	.uleb128 0x9
	.byte	0x3
	.quad	static_reload_reg_p
	.uleb128 0x39
	.long	.LASF1416
	.byte	0x1
	.byte	0xc6
	.long	0x139
	.uleb128 0x9
	.byte	0x3
	.quad	subst_reg_equivs_changed
	.uleb128 0x39
	.long	.LASF1417
	.byte	0x1
	.byte	0xca
	.long	0x139
	.uleb128 0x9
	.byte	0x3
	.quad	output_reloadnum
	.uleb128 0x12
	.long	0x4cd
	.long	0x577c
	.uleb128 0x13
	.long	0x140
	.byte	0xa
	.byte	0
	.uleb128 0x29
	.long	.LASF1418
	.byte	0x1
	.value	0x1ad5
	.long	0x5792
	.uleb128 0x9
	.byte	0x3
	.quad	reload_when_needed_name
	.uleb128 0x15
	.long	0x576c
	.uleb128 0x12
	.long	0x4cd
	.long	0x57a7
	.uleb128 0x13
	.long	0x140
	.byte	0x18
	.byte	0
	.uleb128 0x29
	.long	.LASF1419
	.byte	0x1
	.value	0x1ae4
	.long	0x57bd
	.uleb128 0x9
	.byte	0x3
	.quad	reg_class_names
	.uleb128 0x15
	.long	0x5797
	.uleb128 0x3a
	.long	.LASF1420
	.byte	0x4
	.byte	0x62
	.long	0x139
	.uleb128 0x12
	.long	0x147
	.long	0x57dd
	.uleb128 0x13
	.long	0x140
	.byte	0x34
	.byte	0
	.uleb128 0x3b
	.long	.LASF1421
	.byte	0x4
	.value	0xc3a
	.long	0x57e9
	.uleb128 0x15
	.long	0x57cd
	.uleb128 0x3a
	.long	.LASF1422
	.byte	0x7
	.byte	0xaa
	.long	0x4a1
	.uleb128 0x12
	.long	0x28f
	.long	0x5809
	.uleb128 0x13
	.long	0x140
	.byte	0xff
	.byte	0
	.uleb128 0x3a
	.long	.LASF1423
	.byte	0x10
	.byte	0x48
	.long	0x5814
	.uleb128 0x15
	.long	0x57f9
	.uleb128 0x12
	.long	0x4cd
	.long	0x5829
	.uleb128 0x13
	.long	0x140
	.byte	0x3a
	.byte	0
	.uleb128 0x3a
	.long	.LASF1424
	.byte	0x9
	.byte	0x29
	.long	0x5834
	.uleb128 0x15
	.long	0x5819
	.uleb128 0x12
	.long	0x6e9
	.long	0x5849
	.uleb128 0x13
	.long	0x140
	.byte	0x3a
	.byte	0
	.uleb128 0x3a
	.long	.LASF180
	.byte	0x9
	.byte	0x34
	.long	0x5854
	.uleb128 0x15
	.long	0x5839
	.uleb128 0x12
	.long	0x288
	.long	0x5869
	.uleb128 0x13
	.long	0x140
	.byte	0x3a
	.byte	0
	.uleb128 0x3a
	.long	.LASF1425
	.byte	0x9
	.byte	0x50
	.long	0x5874
	.uleb128 0x15
	.long	0x5859
	.uleb128 0x12
	.long	0x28f
	.long	0x5889
	.uleb128 0x13
	.long	0x140
	.byte	0x3a
	.byte	0
	.uleb128 0x3a
	.long	.LASF1426
	.byte	0x9
	.byte	0x60
	.long	0x5894
	.uleb128 0x15
	.long	0x5879
	.uleb128 0x3a
	.long	.LASF1427
	.byte	0x9
	.byte	0xa4
	.long	0x574
	.uleb128 0x12
	.long	0x288
	.long	0x58b4
	.uleb128 0x13
	.long	0x140
	.byte	0x98
	.byte	0
	.uleb128 0x3a
	.long	.LASF1428
	.byte	0x2
	.byte	0x36
	.long	0x58bf
	.uleb128 0x15
	.long	0x58a4
	.uleb128 0x12
	.long	0x4cd
	.long	0x58d4
	.uleb128 0x13
	.long	0x140
	.byte	0x98
	.byte	0
	.uleb128 0x3a
	.long	.LASF1429
	.byte	0x2
	.byte	0x3c
	.long	0x58df
	.uleb128 0x15
	.long	0x58c4
	.uleb128 0x12
	.long	0x2c0
	.long	0x58f4
	.uleb128 0x13
	.long	0x140
	.byte	0x98
	.byte	0
	.uleb128 0x3a
	.long	.LASF1430
	.byte	0x2
	.byte	0x3f
	.long	0x58ff
	.uleb128 0x15
	.long	0x58e4
	.uleb128 0x12
	.long	0x2d
	.long	0x5914
	.uleb128 0x13
	.long	0x140
	.byte	0x80
	.byte	0
	.uleb128 0x3b
	.long	.LASF1431
	.byte	0x2
	.value	0x611
	.long	0x5904
	.uleb128 0x12
	.long	0x2d
	.long	0x5930
	.uleb128 0x13
	.long	0x140
	.byte	0xa
	.byte	0
	.uleb128 0x3b
	.long	.LASF1432
	.byte	0x2
	.value	0x652
	.long	0x5920
	.uleb128 0x12
	.long	0x1e08
	.long	0x594c
	.uleb128 0x13
	.long	0x140
	.byte	0x30
	.byte	0
	.uleb128 0x3a
	.long	.LASF1433
	.byte	0xb
	.byte	0x9b
	.long	0x593c
	.uleb128 0x12
	.long	0xec4
	.long	0x5967
	.uleb128 0x13
	.long	0x140
	.byte	0x3a
	.byte	0
	.uleb128 0x3a
	.long	.LASF1434
	.byte	0xb
	.byte	0xdf
	.long	0x5957
	.uleb128 0x3a
	.long	.LASF1435
	.byte	0xb
	.byte	0xe0
	.long	0x5957
	.uleb128 0x3a
	.long	.LASF1019
	.byte	0xc
	.byte	0xcb
	.long	0x1f71
	.uleb128 0x12
	.long	0x210d
	.long	0x5993
	.uleb128 0x3c
	.byte	0
	.uleb128 0x3a
	.long	.LASF1038
	.byte	0xc
	.byte	0xf9
	.long	0x599e
	.uleb128 0x15
	.long	0x5988
	.uleb128 0x12
	.long	0x21de
	.long	0x59b3
	.uleb128 0x13
	.long	0x140
	.byte	0xb3
	.byte	0
	.uleb128 0x3d
	.string	"rld"
	.byte	0x1
	.byte	0x79
	.long	0x59a3
	.uleb128 0x9
	.byte	0x3
	.quad	rld
	.uleb128 0x3e
	.long	.LASF1436
	.byte	0x1
	.byte	0x78
	.long	0x139
	.uleb128 0x9
	.byte	0x3
	.quad	n_reloads
	.uleb128 0x3a
	.long	.LASF1437
	.byte	0xd
	.byte	0xa7
	.long	0xe68
	.uleb128 0x3a
	.long	.LASF1438
	.byte	0xd
	.byte	0xa8
	.long	0xe68
	.uleb128 0x3a
	.long	.LASF1439
	.byte	0xd
	.byte	0xa9
	.long	0xe68
	.uleb128 0x3a
	.long	.LASF1440
	.byte	0xd
	.byte	0xaa
	.long	0xe68
	.uleb128 0x3e
	.long	.LASF1441
	.byte	0x1
	.byte	0x7d
	.long	0x139
	.uleb128 0x9
	.byte	0x3
	.quad	n_earlyclobbers
	.uleb128 0x3e
	.long	.LASF1442
	.byte	0x1
	.byte	0x7e
	.long	0x200c
	.uleb128 0x9
	.byte	0x3
	.quad	reload_earlyclobbers
	.uleb128 0x3e
	.long	.LASF1443
	.byte	0x1
	.byte	0x80
	.long	0x139
	.uleb128 0x9
	.byte	0x3
	.quad	reload_n_operands
	.uleb128 0x3a
	.long	.LASF1444
	.byte	0xd
	.byte	0xb6
	.long	0x139
	.uleb128 0x3a
	.long	.LASF1445
	.byte	0xd
	.byte	0xbc
	.long	0x2c0
	.uleb128 0x3a
	.long	.LASF1446
	.byte	0xd
	.byte	0xbf
	.long	0x2c0
	.uleb128 0x3a
	.long	.LASF1447
	.byte	0xd
	.byte	0xc1
	.long	0x139
	.uleb128 0x3a
	.long	.LASF1448
	.byte	0x11
	.byte	0x9d
	.long	0x4093
	.uleb128 0x12
	.long	0x2c0
	.long	0x5a8f
	.uleb128 0x13
	.long	0x140
	.byte	0x34
	.byte	0
	.uleb128 0x3b
	.long	.LASF1449
	.byte	0xe
	.value	0x18b
	.long	0x5a7f
	.uleb128 0x3b
	.long	.LASF1450
	.byte	0xe
	.value	0x196
	.long	0x5a7f
	.uleb128 0x12
	.long	0x22fe
	.long	0x5ab7
	.uleb128 0x13
	.long	0x140
	.byte	0x18
	.byte	0
	.uleb128 0x3b
	.long	.LASF1451
	.byte	0xe
	.value	0x1c7
	.long	0x5aa7
	.uleb128 0x12
	.long	0x266
	.long	0x5ad3
	.uleb128 0x13
	.long	0x140
	.byte	0x18
	.byte	0
	.uleb128 0x3b
	.long	.LASF1452
	.byte	0xe
	.value	0x1cb
	.long	0x5ac3
	.uleb128 0x12
	.long	0x147
	.long	0x5af5
	.uleb128 0x13
	.long	0x140
	.byte	0x18
	.uleb128 0x13
	.long	0x140
	.byte	0x18
	.byte	0
	.uleb128 0x3b
	.long	.LASF1453
	.byte	0xe
	.value	0x1d8
	.long	0x5adf
	.uleb128 0x3a
	.long	.LASF1454
	.byte	0x12
	.byte	0x3d
	.long	0x139
	.uleb128 0x3a
	.long	.LASF1455
	.byte	0x12
	.byte	0xfe
	.long	0x139
	.uleb128 0x3b
	.long	.LASF1456
	.byte	0x12
	.value	0x1c8
	.long	0x139
	.uleb128 0x3b
	.long	.LASF1457
	.byte	0xf
	.value	0x1e4
	.long	0x2952
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x17
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x4
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x21
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x22
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x23
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x24
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x25
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x26
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x27
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x28
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x29
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2a
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x34
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2b
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.byte	0
	.byte	0
	.uleb128 0x2c
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2d
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2e
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2f
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x30
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x31
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x32
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x33
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x34
	.uleb128 0xa
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x35
	.uleb128 0xa
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x36
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x37
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x38
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x39
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3a
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x3b
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x3c
	.uleb128 0x21
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3d
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3e
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.LBB60-.Ltext0
	.quad	.LBE60-.Ltext0
	.quad	.LBB63-.Ltext0
	.quad	.LBE63-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF363:
	.string	"REG_BR_PROB"
.LASF864:
	.string	"CODE_FOR_sge"
.LASF393:
	.string	"NOTE_INSN_EH_REGION_BEG"
.LASF780:
	.string	"CODE_FOR_mulqihi3"
.LASF1391:
	.string	"goal_mem_addr_varies"
.LASF336:
	.string	"rtstr"
.LASF860:
	.string	"CODE_FOR_sgt"
.LASF645:
	.string	"CODE_FOR_mmx_uavgv4hi3"
.LASF380:
	.string	"NOTE_INSN_DELETED"
.LASF635:
	.string	"CODE_FOR_mulv4hi3"
.LASF1291:
	.string	"this_alternative"
.LASF93:
	.string	"_unused2"
.LASF264:
	.string	"UMOD"
.LASF318:
	.string	"min_align"
.LASF549:
	.string	"CODE_FOR_strlenqi_1"
.LASF569:
	.string	"CODE_FOR_sse_movups"
.LASF1381:
	.string	"reg_overlap_mentioned_for_reload_p"
.LASF1433:
	.string	"optab_table"
.LASF79:
	.string	"_fileno"
.LASF1346:
	.string	"find_reloads_address"
.LASF209:
	.string	"DEFINE_COMBINE"
.LASF731:
	.string	"CODE_FOR_zero_extendsidi2"
.LASF24:
	.string	"AD_REGS"
.LASF826:
	.string	"CODE_FOR_absxf2"
.LASF632:
	.string	"CODE_FOR_sssubv4hi3"
.LASF944:
	.string	"CODE_FOR_maxdf3"
.LASF728:
	.string	"CODE_FOR_zero_extendhisi2"
.LASF832:
	.string	"CODE_FOR_ashldi3"
.LASF986:
	.string	"OTI_ashl"
.LASF1239:
	.string	"remove_address_replacements"
.LASF1144:
	.string	"inlinable"
.LASF1176:
	.string	"uses_const_pool"
.LASF764:
	.string	"CODE_FOR_addtf3"
.LASF690:
	.string	"CODE_FOR_pf2id"
.LASF588:
	.string	"CODE_FOR_mulv4sf3"
.LASF1408:
	.string	"replacements"
.LASF576:
	.string	"CODE_FOR_sse_movhlps"
.LASF988:
	.string	"OTI_ashr"
.LASF1419:
	.string	"reg_class_names"
.LASF1444:
	.string	"reload_first_uid"
.LASF305:
	.string	"CONSTANT_P_RTX"
.LASF681:
	.string	"CODE_FOR_subv2sf3"
.LASF493:
	.string	"CODE_FOR_return_internal"
.LASF691:
	.string	"CODE_FOR_pf2iw"
.LASF650:
	.string	"CODE_FOR_eqv8qi3"
.LASF861:
	.string	"CODE_FOR_sgtu"
.LASF1077:
	.string	"next"
.LASF989:
	.string	"OTI_rotl"
.LASF990:
	.string	"OTI_rotr"
.LASF335:
	.string	"rtuint"
.LASF455:
	.string	"CODE_FOR_floathixf2"
.LASF1125:
	.string	"x_save_expr_regs"
.LASF339:
	.string	"rt_cselib"
.LASF565:
	.string	"CODE_FOR_movv2si_internal"
.LASF208:
	.string	"DEFINE_PEEPHOLE2"
.LASF12:
	.string	"rtvec_def"
.LASF1149:
	.string	"inl_max_label_num"
.LASF702:
	.string	"CODE_FOR_pfrsqit1v2sf3"
.LASF268:
	.string	"LSHIFTRT"
.LASF536:
	.string	"CODE_FOR_strsethi_1"
.LASF99:
	.string	"_sch_iscntrl"
.LASF1252:
	.string	"in_offset"
.LASF805:
	.string	"CODE_FOR_andhi3"
.LASF877:
	.string	"CODE_FOR_bne"
.LASF202:
	.string	"MATCH_PAR_DUP"
.LASF84:
	.string	"_shortbuf"
.LASF1460:
	.string	"/home/yunqi/SPEC2006/benchspec/CPU2006/403.gcc/build/build_base_amd64-m64-gcc43-nn.0000"
.LASF508:
	.string	"CODE_FOR_sqrtdf2_1_sse_only"
.LASF1311:
	.string	"operands_match"
.LASF263:
	.string	"UDIV"
.LASF10:
	.string	"rtvec"
.LASF105:
	.string	"_sch_isupper"
.LASF622:
	.string	"CODE_FOR_addv4hi3"
.LASF501:
	.string	"CODE_FOR_leave"
.LASF654:
	.string	"CODE_FOR_gtv4hi3"
.LASF196:
	.string	"MATCH_OPERAND"
.LASF793:
	.string	"CODE_FOR_divxf3"
.LASF873:
	.string	"CODE_FOR_sunle"
.LASF1084:
	.string	"x_first_label_num"
.LASF1223:
	.string	"dont_share"
.LASF177:
	.string	"CCFPmode"
.LASF1418:
	.string	"reload_when_needed_name"
.LASF598:
	.string	"CODE_FOR_sse_andti3"
.LASF874:
	.string	"CODE_FOR_sunlt"
.LASF118:
	.string	"reg_class"
.LASF1018:
	.string	"OP_INOUT"
.LASF285:
	.string	"UNLE"
.LASF28:
	.string	"LEGACY_REGS"
.LASF323:
	.string	"max_after_base"
.LASF918:
	.string	"CODE_FOR_strmovhi_rex64"
.LASF518:
	.string	"CODE_FOR_cosxf2"
.LASF286:
	.string	"UNLT"
.LASF584:
	.string	"CODE_FOR_addv4sf3"
.LASF1286:
	.string	"RELOAD_READ"
.LASF1360:
	.string	"equiv"
.LASF429:
	.string	"CODE_FOR_zero_extendsidi2_32"
.LASF1177:
	.string	"uses_pic_offset_table"
.LASF719:
	.string	"CODE_FOR_movstricthi"
.LASF1183:
	.string	"initial_value_struct"
.LASF937:
	.string	"CODE_FOR_movsfcc"
.LASF1394:
	.string	"regno1"
.LASF770:
	.string	"CODE_FOR_subqi3"
.LASF754:
	.string	"CODE_FOR_fix_truncsfhi2"
.LASF885:
	.string	"CODE_FOR_bleu"
.LASF149:
	.string	"CTImode"
.LASF65:
	.string	"_flags"
.LASF1233:
	.string	"in_class"
.LASF961:
	.string	"libfunc"
.LASF1275:
	.string	"replace"
.LASF546:
	.string	"CODE_FOR_cmpstrqi_nz_rex_1"
.LASF1455:
	.string	"flag_float_store"
.LASF1217:
	.string	"dest_class"
.LASF1374:
	.string	"move_replacements"
.LASF568:
	.string	"CODE_FOR_sse_movaps"
.LASF60:
	.string	"__off_t"
.LASF1301:
	.string	"operand_reloadnum"
.LASF1273:
	.string	"early_data"
.LASF825:
	.string	"CODE_FOR_absdf2"
.LASF1059:
	.string	"in_reg"
.LASF866:
	.string	"CODE_FOR_sle"
.LASF697:
	.string	"CODE_FOR_pavgusb"
.LASF147:
	.string	"CSImode"
.LASF30:
	.string	"FP_TOP_REG"
.LASF307:
	.string	"VEC_MERGE"
.LASF1147:
	.string	"original_decl_initial"
.LASF1299:
	.string	"this_alternative_number"
.LASF1215:
	.string	"best_cost"
.LASF862:
	.string	"CODE_FOR_slt"
.LASF539:
	.string	"CODE_FOR_strsetqi_rex_1"
.LASF1080:
	.string	"last"
.LASF85:
	.string	"_lock"
.LASF240:
	.string	"RETURN"
.LASF1228:
	.string	"inloc"
.LASF686:
	.string	"CODE_FOR_pfmaxv2sf3"
.LASF458:
	.string	"CODE_FOR_floatsitf2"
.LASF647:
	.string	"CODE_FOR_mmx_pinsrw"
.LASF574:
	.string	"CODE_FOR_sse_movntv4sf"
.LASF14:
	.string	"elem"
.LASF680:
	.string	"CODE_FOR_addv2sf3"
.LASF183:
	.string	"MODE_FLOAT"
.LASF683:
	.string	"CODE_FOR_gtv2sf3"
.LASF454:
	.string	"CODE_FOR_floathidf2"
.LASF640:
	.string	"CODE_FOR_mmx_xordi3"
.LASF819:
	.string	"CODE_FOR_negqi2"
.LASF993:
	.string	"OTI_umin"
.LASF1238:
	.string	"from"
.LASF550:
	.string	"CODE_FOR_strlenqi_rex_1"
.LASF327:
	.string	"alias"
.LASF324:
	.string	"offset_unsigned"
.LASF804:
	.string	"CODE_FOR_andsi3"
.LASF153:
	.string	"V2SImode"
.LASF1173:
	.string	"stdarg"
.LASF1134:
	.string	"x_trampoline_list"
.LASF1355:
	.string	"orig_op0"
.LASF797:
	.string	"CODE_FOR_divmoddi4"
.LASF1060:
	.string	"out_reg"
.LASF1063:
	.string	"secondary_in_reload"
.LASF962:
	.string	"optab"
.LASF25:
	.string	"Q_REGS"
.LASF227:
	.string	"CODE_LABEL"
.LASF148:
	.string	"CDImode"
.LASF1451:
	.string	"reg_class_contents"
.LASF233:
	.string	"UNSPEC"
.LASF859:
	.string	"CODE_FOR_sne"
.LASF609:
	.string	"CODE_FOR_sse_unpckhps"
.LASF226:
	.string	"BARRIER"
.LASF386:
	.string	"NOTE_INSN_LOOP_VTOP"
.LASF229:
	.string	"COND_EXEC"
.LASF481:
	.string	"CODE_FOR_absdf2_ifs"
.LASF243:
	.string	"CONST_INT"
.LASF239:
	.string	"CALL"
.LASF983:
	.string	"OTI_and"
.LASF1196:
	.string	"in_p"
.LASF830:
	.string	"CODE_FOR_one_cmplhi2"
.LASF934:
	.string	"CODE_FOR_movdicc"
.LASF50:
	.string	"maybe_vaarg"
.LASF1155:
	.string	"epilogue_delay_list"
.LASF1382:
	.string	"refers_to_mem_for_reload_p"
.LASF1326:
	.string	"offmemok"
.LASF155:
	.string	"V4QImode"
.LASF799:
	.string	"CODE_FOR_udivmodhi4"
.LASF218:
	.string	"ATTR"
.LASF337:
	.string	"rttype"
.LASF693:
	.string	"CODE_FOR_pfnacc"
.LASF1429:
	.string	"rtx_format"
.LASF1206:
	.string	"s_reload"
.LASF19:
	.string	"DREG"
.LASF750:
	.string	"CODE_FOR_fix_truncsfsi2"
.LASF596:
	.string	"CODE_FOR_sqrtv4sf2"
.LASF37:
	.string	"FLOAT_SSE_REGS"
.LASF410:
	.string	"GR_VIRTUAL_STACK_ARGS"
.LASF720:
	.string	"CODE_FOR_movqi"
.LASF1359:
	.string	"x_orig"
.LASF1048:
	.string	"RELOAD_FOR_INPADDR_ADDRESS"
.LASF1067:
	.string	"when_needed"
.LASF154:
	.string	"V2DImode"
.LASF1124:
	.string	"x_return_label"
.LASF991:
	.string	"OTI_smin"
.LASF579:
	.string	"CODE_FOR_sse_movlps"
.LASF332:
	.string	"mem_attrs"
.LASF71:
	.string	"_IO_write_end"
.LASF357:
	.string	"REG_UNUSED"
.LASF211:
	.string	"DEFINE_DELAY"
.LASF261:
	.string	"MINUS"
.LASF1131:
	.string	"x_clobber_return_insn"
.LASF623:
	.string	"CODE_FOR_addv2si3"
.LASF22:
	.string	"SIREG"
.LASF727:
	.string	"CODE_FOR_movtf"
.LASF655:
	.string	"CODE_FOR_gtv2si3"
.LASF1261:
	.string	"strict_memory_address_p"
.LASF251:
	.string	"STRICT_LOW_PART"
.LASF949:
	.string	"CODE_FOR_conditional_trap"
.LASF942:
	.string	"CODE_FOR_mindf3"
.LASF1207:
	.string	"t_reload"
.LASF656:
	.string	"CODE_FOR_umaxv8qi3"
.LASF1093:
	.string	"x_regno_reg_rtx"
.LASF193:
	.string	"INCLUDE"
.LASF801:
	.string	"CODE_FOR_testqi_ccz_1"
.LASF406:
	.string	"GR_FRAME_POINTER"
.LASF1035:
	.string	"constraint"
.LASF563:
	.string	"CODE_FOR_movv8qi_internal"
.LASF289:
	.string	"ZERO_EXTEND"
.LASF1038:
	.string	"insn_data"
.LASF292:
	.string	"FLOAT_TRUNCATE"
.LASF1100:
	.string	"x_forced_labels"
.LASF1115:
	.string	"internal_arg_pointer"
.LASF607:
	.string	"CODE_FOR_sse_comi"
.LASF1294:
	.string	"this_alternative_offmemok"
.LASF1071:
	.string	"nongroup"
.LASF403:
	.string	"GR_PC"
.LASF741:
	.string	"CODE_FOR_truncxfdf2"
.LASF1377:
	.string	"endregno"
.LASF714:
	.string	"CODE_FOR_cmptf"
.LASF21:
	.string	"BREG"
.LASF164:
	.string	"V2SFmode"
.LASF789:
	.string	"CODE_FOR_mulxf3"
.LASF1185:
	.string	"machine_function"
.LASF293:
	.string	"FLOAT"
.LASF369:
	.string	"REG_EH_CONTEXT"
.LASF119:
	.string	"machine_mode"
.LASF1192:
	.string	"reg_flag"
.LASF842:
	.string	"CODE_FOR_ashrqi3"
.LASF1262:
	.string	"addr"
.LASF1366:
	.string	"inner_size"
.LASF342:
	.string	"rtmem"
.LASF1143:
	.string	"fixup_var_refs_queue"
.LASF1379:
	.string	"inner_regno"
.LASF302:
	.string	"RANGE_REG"
.LASF340:
	.string	"rtbit"
.LASF572:
	.string	"CODE_FOR_mmx_maskmovq"
.LASF3:
	.string	"call"
.LASF126:
	.string	"TImode"
.LASF278:
	.string	"PRE_MODIFY"
.LASF1395:
	.string	"nregs1"
.LASF701:
	.string	"CODE_FOR_pfrsqrtv2sf2"
.LASF950:
	.string	"CODE_FOR_movti"
.LASF441:
	.string	"CODE_FOR_fix_truncdi_nomemory"
.LASF868:
	.string	"CODE_FOR_sunordered"
.LASF1158:
	.string	"returns_pointer"
.LASF689:
	.string	"CODE_FOR_femms"
.LASF1443:
	.string	"reload_n_operands"
.LASF694:
	.string	"CODE_FOR_pfpnacc"
.LASF107:
	.string	"_sch_isidst"
.LASF291:
	.string	"FLOAT_EXTEND"
.LASF471:
	.string	"CODE_FOR_udivmodsi4"
.LASF1431:
	.string	"const_int_rtx"
.LASF1103:
	.string	"stmt"
.LASF6:
	.string	"in_struct"
.LASF423:
	.string	"CODE_FOR_movsi_insv_1"
.LASF636:
	.string	"CODE_FOR_smulv4hi3_highpart"
.LASF1398:
	.string	"find_inc_amount"
.LASF381:
	.string	"NOTE_INSN_BLOCK_BEG"
.LASF124:
	.string	"SImode"
.LASF783:
	.string	"CODE_FOR_mulditi3"
.LASF235:
	.string	"ADDR_VEC"
.LASF769:
	.string	"CODE_FOR_subhi3"
.LASF1181:
	.string	"stmt_status"
.LASF1421:
	.string	"regclass_map"
.LASF936:
	.string	"CODE_FOR_movhicc"
.LASF540:
	.string	"CODE_FOR_rep_stosdi_rex64"
.LASF165:
	.string	"V2DFmode"
.LASF981:
	.string	"OTI_umod"
.LASF317:
	.string	"LAST_AND_UNUSED_RTX_CODE"
.LASF721:
	.string	"CODE_FOR_reload_outqi"
.LASF505:
	.string	"CODE_FOR_sqrtsf2_1_sse_only"
.LASF1007:
	.string	"OTI_ucmp"
.LASF1216:
	.string	"best_class"
.LASF1309:
	.string	"best"
.LASF331:
	.string	"align"
.LASF430:
	.string	"CODE_FOR_zero_extendsidi2_rex64"
.LASF49:
	.string	"sse_regno"
.LASF1145:
	.string	"no_debugging_symbols"
.LASF1151:
	.string	"machine"
.LASF507:
	.string	"CODE_FOR_sqrtdf2_1"
.LASF485:
	.string	"CODE_FOR_ashrdi3_1"
.LASF670:
	.string	"CODE_FOR_mmx_packuswb"
.LASF1222:
	.string	"p_in"
.LASF254:
	.string	"SYMBOL_REF"
.LASF1442:
	.string	"reload_earlyclobbers"
.LASF379:
	.string	"NOTE_INSN_BIAS"
.LASF1232:
	.string	"out_subreg_loc"
.LASF564:
	.string	"CODE_FOR_movv4hi_internal"
.LASF1305:
	.string	"goal_alternative_win"
.LASF1427:
	.string	"word_mode"
.LASF774:
	.string	"CODE_FOR_subsf3"
.LASF115:
	.string	"_sch_isbasic"
.LASF401:
	.string	"NOTE_INSN_MAX"
.LASF722:
	.string	"CODE_FOR_movstrictqi"
.LASF875:
	.string	"CODE_FOR_sltgt"
.LASF416:
	.string	"CODE_FOR_cmpdi_ccno_1_rex64"
.LASF979:
	.string	"OTI_udivmod"
.LASF440:
	.string	"CODE_FOR_truncdfsf2_sse_only"
.LASF899:
	.string	"CODE_FOR_call_exp"
.LASF547:
	.string	"CODE_FOR_cmpstrqi_1"
.LASF1224:
	.string	"reload_inner_reg_of_subreg"
.LASF207:
	.string	"DEFINE_INSN_AND_SPLIT"
.LASF259:
	.string	"COMPARE"
.LASF287:
	.string	"LTGT"
.LASF1264:
	.string	"success_2"
.LASF472:
	.string	"CODE_FOR_testsi_1"
.LASF896:
	.string	"CODE_FOR_doloop_end"
.LASF594:
	.string	"CODE_FOR_rsqrtv4sf2"
.LASF1076:
	.string	"unsignedp"
.LASF802:
	.string	"CODE_FOR_testqi_ext_ccno_0"
.LASF299:
	.string	"HIGH"
.LASF256:
	.string	"QUEUED"
.LASF26:
	.string	"NON_Q_REGS"
.LASF1:
	.string	"mode"
.LASF125:
	.string	"DImode"
.LASF673:
	.string	"CODE_FOR_mmx_punpckhdq"
.LASF651:
	.string	"CODE_FOR_eqv4hi3"
.LASF1062:
	.string	"opnum"
.LASF1117:
	.string	"hard_reg_initial_vals"
.LASF818:
	.string	"CODE_FOR_neghi2"
.LASF997:
	.string	"OTI_neg"
.LASF1096:
	.string	"x_inhibit_defer_pop"
.LASF78:
	.string	"_chain"
.LASF978:
	.string	"OTI_udiv"
.LASF643:
	.string	"CODE_FOR_mmx_nanddi3"
.LASF1193:
	.string	"safe"
.LASF277:
	.string	"POST_INC"
.LASF488:
	.string	"CODE_FOR_lshrdi3_1"
.LASF1009:
	.string	"OTI_strlen"
.LASF461:
	.string	"CODE_FOR_addqi3_cc"
.LASF710:
	.string	"CODE_FOR_cmpdi_1_rex64"
.LASF435:
	.string	"CODE_FOR_extendqidi2"
.LASF492:
	.string	"CODE_FOR_blockage"
.LASF513:
	.string	"CODE_FOR_sinsf2"
.LASF474:
	.string	"CODE_FOR_negsf2_memory"
.LASF138:
	.string	"TFmode"
.LASF784:
	.string	"CODE_FOR_mulsidi3"
.LASF56:
	.string	"unsigned char"
.LASF1184:
	.string	"temp_slot"
.LASF31:
	.string	"FP_SECOND_REG"
.LASF1101:
	.string	"x_pending_chain"
.LASF715:
	.string	"CODE_FOR_cmpdf"
.LASF706:
	.string	"CODE_FOR_cmpdi"
.LASF1066:
	.string	"secondary_out_icode"
.LASF820:
	.string	"CODE_FOR_negsf2"
.LASF743:
	.string	"CODE_FOR_fix_truncxfdi2"
.LASF752:
	.string	"CODE_FOR_fix_trunctfhi2"
.LASF1116:
	.string	"cannot_inline"
.LASF726:
	.string	"CODE_FOR_movxf"
.LASF821:
	.string	"CODE_FOR_negdf2"
.LASF1426:
	.string	"mode_bitsize"
.LASF1462:
	.string	"_IO_lock_t"
.LASF548:
	.string	"CODE_FOR_cmpstrqi_rex_1"
.LASF1235:
	.string	"rel_mode"
.LASF1387:
	.string	"valtry"
.LASF1413:
	.string	"this_insn_is_asm"
.LASF1435:
	.string	"reload_out_optab"
.LASF1056:
	.string	"class"
.LASF1423:
	.string	"_sch_istable"
.LASF121:
	.string	"BImode"
.LASF275:
	.string	"PRE_INC"
.LASF356:
	.string	"REG_NO_CONFLICT"
.LASF135:
	.string	"SFmode"
.LASF106:
	.string	"_sch_isxdigit"
.LASF552:
	.string	"CODE_FOR_x86_movsicc_0_m1"
.LASF843:
	.string	"CODE_FOR_lshrdi3"
.LASF1104:
	.string	"emit"
.LASF1022:
	.string	"constraints"
.LASF768:
	.string	"CODE_FOR_subsi3"
.LASF1205:
	.string	"secondary_type"
.LASF1040:
	.string	"output"
.LASF560:
	.string	"CODE_FOR_trap"
.LASF1388:
	.string	"valueno"
.LASF224:
	.string	"JUMP_INSN"
.LASF905:
	.string	"CODE_FOR_prologue"
.LASF603:
	.string	"CODE_FOR_maskcmpv4sf3"
.LASF867:
	.string	"CODE_FOR_sleu"
.LASF734:
	.string	"CODE_FOR_extendsfxf2"
.LASF678:
	.string	"CODE_FOR_ldmxcsr"
.LASF1031:
	.string	"insn_operand_predicate_fn"
.LASF187:
	.string	"MODE_COMPLEX_FLOAT"
.LASF671:
	.string	"CODE_FOR_mmx_punpckhbw"
.LASF341:
	.string	"rttree"
.LASF836:
	.string	"CODE_FOR_ashlhi3"
.LASF1272:
	.string	"clobber"
.LASF1352:
	.string	"update_auto_inc_notes"
.LASF1179:
	.string	"arg_pointer_save_area_init"
.LASF378:
	.string	"insn_note"
.LASF1020:
	.string	"operand"
.LASF397:
	.string	"NOTE_INSN_RANGE_END"
.LASF910:
	.string	"CODE_FOR_sqrtsf2"
.LASF206:
	.string	"DEFINE_SPLIT"
.LASF561:
	.string	"CODE_FOR_movv4sf_internal"
.LASF1165:
	.string	"has_nonlocal_goto"
.LASF837:
	.string	"CODE_FOR_ashlqi3"
.LASF589:
	.string	"CODE_FOR_vmmulv4sf3"
.LASF685:
	.string	"CODE_FOR_eqv2sf3"
.LASF1244:
	.string	"combine_reloads"
.LASF1203:
	.string	"t_mode"
.LASF669:
	.string	"CODE_FOR_mmx_packssdw"
.LASF1314:
	.string	"goal_earlyclobber"
.LASF775:
	.string	"CODE_FOR_muldi3"
.LASF1249:
	.string	"real_out"
.LASF245:
	.string	"CONST_VECTOR"
.LASF203:
	.string	"MATCH_INSN"
.LASF1306:
	.string	"goal_alternative_offmemok"
.LASF1384:
	.string	"goal"
.LASF913:
	.string	"CODE_FOR_movstrdi"
.LASF541:
	.string	"CODE_FOR_rep_stossi"
.LASF1061:
	.string	"reg_rtx"
.LASF1253:
	.string	"out_offset"
.LASF136:
	.string	"DFmode"
.LASF33:
	.string	"SSE_REGS"
.LASF425:
	.string	"CODE_FOR_popdi1"
.LASF54:
	.string	"size_t"
.LASF237:
	.string	"PREFETCH"
.LASF42:
	.string	"LIM_REG_CLASSES"
.LASF41:
	.string	"ALL_REGS"
.LASF1108:
	.string	"pops_args"
.LASF130:
	.string	"PSImode"
.LASF1127:
	.string	"x_rtl_expr_chain"
.LASF955:
	.string	"CODE_FOR_movv8qi"
.LASF1227:
	.string	"push_reload"
.LASF301:
	.string	"RANGE_INFO"
.LASF817:
	.string	"CODE_FOR_negsi2"
.LASF1324:
	.string	"winreg"
.LASF556:
	.string	"CODE_FOR_sse_movdfcc"
.LASF646:
	.string	"CODE_FOR_mmx_psadbw"
.LASF1463:
	.string	"rtunion_def"
.LASF904:
	.string	"CODE_FOR_return"
.LASF973:
	.string	"OTI_smul_widen"
.LASF1434:
	.string	"reload_in_optab"
.LASF217:
	.string	"DEFINE_ATTR"
.LASF580:
	.string	"CODE_FOR_sse_loadss"
.LASF841:
	.string	"CODE_FOR_ashrhi3"
.LASF219:
	.string	"SET_ATTR"
.LASF144:
	.string	"TCmode"
.LASF995:
	.string	"OTI_mov"
.LASF500:
	.string	"CODE_FOR_eh_return_di"
.LASF887:
	.string	"CODE_FOR_bordered"
.LASF633:
	.string	"CODE_FOR_ussubv8qi3"
.LASF294:
	.string	"UNSIGNED_FLOAT"
.LASF368:
	.string	"REG_FRAME_RELATED_EXPR"
.LASF1383:
	.string	"find_equiv_reg"
.LASF343:
	.string	"cselib_val_struct"
.LASF427:
	.string	"CODE_FOR_swaptf"
.LASF642:
	.string	"CODE_FOR_mmx_anddi3"
.LASF400:
	.string	"NOTE_INSN_EXPECTED_VALUE"
.LASF772:
	.string	"CODE_FOR_subtf3"
.LASF70:
	.string	"_IO_write_ptr"
.LASF551:
	.string	"CODE_FOR_x86_movdicc_0_m1_rex64"
.LASF708:
	.string	"CODE_FOR_cmphi"
.LASF266:
	.string	"ROTATE"
.LASF923:
	.string	"CODE_FOR_strsetdi_rex64"
.LASF881:
	.string	"CODE_FOR_bltu"
.LASF1254:
	.string	"value"
.LASF290:
	.string	"TRUNCATE"
.LASF361:
	.string	"REG_DEP_ANTI"
.LASF141:
	.string	"SCmode"
.LASF585:
	.string	"CODE_FOR_vmaddv4sf3"
.LASF1319:
	.string	"other"
.LASF1428:
	.string	"rtx_length"
.LASF786:
	.string	"CODE_FOR_umulsi3_highpart"
.LASF1409:
	.string	"n_replacements"
.LASF1402:
	.string	"test"
.LASF411:
	.string	"GR_VIRTUAL_STACK_DYNAMIC"
.LASF131:
	.string	"PDImode"
.LASF1008:
	.string	"OTI_tst"
.LASF382:
	.string	"NOTE_INSN_BLOCK_END"
.LASF477:
	.string	"CODE_FOR_negdf2_ifs"
.LASF1378:
	.string	"repeat"
.LASF946:
	.string	"CODE_FOR_allocate_stack_worker"
.LASF391:
	.string	"NOTE_INSN_DELETED_LABEL"
.LASF595:
	.string	"CODE_FOR_vmrsqrtv4sf2"
.LASF1412:
	.string	"this_insn"
.LASF800:
	.string	"CODE_FOR_testsi_ccno_1"
.LASF473:
	.string	"CODE_FOR_andqi_ext_0"
.LASF987:
	.string	"OTI_lshr"
.LASF1361:
	.string	"link"
.LASF652:
	.string	"CODE_FOR_eqv2si3"
.LASF890:
	.string	"CODE_FOR_bungt"
.LASF194:
	.string	"EXPR_LIST"
.LASF221:
	.string	"EQ_ATTR"
.LASF1082:
	.string	"emit_status"
.LASF1240:
	.string	"in_rtx"
.LASF1086:
	.string	"x_last_insn"
.LASF1343:
	.string	"shift"
.LASF1005:
	.string	"OTI_cos"
.LASF1345:
	.string	"make_memloc"
.LASF969:
	.string	"OTI_smul"
.LASF174:
	.string	"CCGOCmode"
.LASF252:
	.string	"CONCAT"
.LASF1456:
	.string	"flag_pic"
.LASF320:
	.string	"min_after_vec"
.LASF515:
	.string	"CODE_FOR_sintf2"
.LASF109:
	.string	"_sch_isnvsp"
.LASF895:
	.string	"CODE_FOR_tablejump"
.LASF63:
	.string	"FILE"
.LASF834:
	.string	"CODE_FOR_x86_shift_adj_2"
.LASF258:
	.string	"COND"
.LASF184:
	.string	"MODE_PARTIAL_INT"
.LASF1135:
	.string	"x_parm_birth_insn"
.LASF815:
	.string	"CODE_FOR_xorqi_cc_ext_1"
.LASF1248:
	.string	"real_in"
.LASF823:
	.string	"CODE_FOR_negtf2"
.LASF15:
	.string	"tree"
.LASF142:
	.string	"DCmode"
.LASF657:
	.string	"CODE_FOR_smaxv4hi3"
.LASF1414:
	.string	"hard_regs_live_known"
.LASF1287:
	.string	"RELOAD_READ_WRITE"
.LASF1353:
	.string	"find_reloads_address_1"
.LASF113:
	.string	"_sch_isgraph"
.LASF1458:
	.string	"GNU C 4.8.1 -mtune=generic -march=x86-64 -g -fno-strict-aliasing -fstack-protector"
.LASF851:
	.string	"CODE_FOR_rotrdi3"
.LASF415:
	.string	"insn_code"
.LASF1129:
	.string	"x_tail_recursion_reentry"
.LASF267:
	.string	"ASHIFTRT"
.LASF935:
	.string	"CODE_FOR_movsicc"
.LASF630:
	.string	"CODE_FOR_subv2si3"
.LASF1055:
	.string	"reload"
.LASF533:
	.string	"CODE_FOR_strsetdi_rex_1"
.LASF959:
	.string	"CODE_FOR_prefetch"
.LASF1375:
	.string	"find_replacement"
.LASF531:
	.string	"CODE_FOR_rep_movqi"
.LASF878:
	.string	"CODE_FOR_bgt"
.LASF1362:
	.string	"find_reloads_address_part"
.LASF172:
	.string	"CCmode"
.LASF1212:
	.string	"push_secondary_reload"
.LASF32:
	.string	"FLOAT_REGS"
.LASF606:
	.string	"CODE_FOR_vmmaskncmpv4sf3"
.LASF1310:
	.string	"commutative"
.LASF985:
	.string	"OTI_xor"
.LASF384:
	.string	"NOTE_INSN_LOOP_END"
.LASF1242:
	.string	"something_changed"
.LASF170:
	.string	"V16SFmode"
.LASF1351:
	.string	"subst_indexed_address"
.LASF1247:
	.string	"find_dummy_reload"
.LASF1445:
	.string	"indirect_symref_ok"
.LASF1396:
	.string	"xregno"
.LASF527:
	.string	"CODE_FOR_strmovqi_rex_1"
.LASF733:
	.string	"CODE_FOR_extendsfdf2"
.LASF667:
	.string	"CODE_FOR_mmx_ashldi3"
.LASF1204:
	.string	"t_icode"
.LASF466:
	.string	"CODE_FOR_subsi3_carry_zext"
.LASF398:
	.string	"NOTE_INSN_LIVE"
.LASF1438:
	.string	"reg_equiv_memory_loc"
.LASF511:
	.string	"CODE_FOR_sqrttf2"
.LASF214:
	.string	"DEFINE_COND_EXEC"
.LASF1267:
	.string	"all_const"
.LASF74:
	.string	"_IO_save_base"
.LASF1221:
	.string	"find_reusable_reload"
.LASF452:
	.string	"CODE_FOR_x86_fldcw_1"
.LASF1073:
	.string	"var_refs_queue"
.LASF1052:
	.string	"RELOAD_FOR_OPADDR_ADDR"
.LASF1251:
	.string	"earlyclobber"
.LASF1097:
	.string	"x_stack_pointer_delta"
.LASF900:
	.string	"CODE_FOR_call_value_pop"
.LASF751:
	.string	"CODE_FOR_fix_truncxfhi2"
.LASF1043:
	.string	"reload_type"
.LASF538:
	.string	"CODE_FOR_strsetqi_1"
.LASF210:
	.string	"DEFINE_EXPAND"
.LASF1089:
	.string	"x_last_filename"
.LASF1168:
	.string	"is_thunk"
.LASF649:
	.string	"CODE_FOR_mmx_pshufw"
.LASF1446:
	.string	"double_reg_address_ok"
.LASF161:
	.string	"V8SImode"
.LASF1121:
	.string	"x_nonlocal_goto_handler_labels"
.LASF223:
	.string	"INSN"
.LASF334:
	.string	"rtint"
.LASF1231:
	.string	"in_subreg_loc"
.LASF432:
	.string	"CODE_FOR_zero_extendqidi2"
.LASF1338:
	.string	"alternative_allows_memconst"
.LASF253:
	.string	"LABEL_REF"
.LASF1188:
	.string	"where"
.LASF360:
	.string	"REG_LABEL"
.LASF529:
	.string	"CODE_FOR_rep_movsi"
.LASF1320:
	.string	"losers"
.LASF1447:
	.string	"num_not_at_initial_offset"
.LASF460:
	.string	"CODE_FOR_floatditf2"
.LASF1245:
	.string	"output_reload"
.LASF925:
	.string	"CODE_FOR_strsetsi_rex64"
.LASF1347:
	.string	"memrefloc"
.LASF348:
	.string	"REG_DEAD"
.LASF388:
	.string	"NOTE_INSN_FUNCTION_END"
.LASF88:
	.string	"__pad2"
.LASF1425:
	.string	"mode_size"
.LASF351:
	.string	"REG_EQUAL"
.LASF0:
	.string	"code"
.LASF610:
	.string	"CODE_FOR_sse_unpcklps"
.LASF638:
	.string	"CODE_FOR_mmx_pmaddwd"
.LASF495:
	.string	"CODE_FOR_return_indirect_internal"
.LASF1255:
	.string	"nwords"
.LASF1037:
	.string	"eliminable"
.LASF704:
	.string	"CODE_FOR_pswapdv2si2"
.LASF1452:
	.string	"reg_class_size"
.LASF763:
	.string	"CODE_FOR_addxf3"
.LASF1213:
	.string	"find_valid_class"
.LASF173:
	.string	"CCGCmode"
.LASF418:
	.string	"CODE_FOR_cmpqi_ext_3_insn"
.LASF703:
	.string	"CODE_FOR_pmulhrwv4hi3"
.LASF544:
	.string	"CODE_FOR_rep_stosqi_rex64"
.LASF249:
	.string	"SCRATCH"
.LASF159:
	.string	"V8QImode"
.LASF813:
	.string	"CODE_FOR_xorhi3"
.LASF1437:
	.string	"reg_equiv_constant"
.LASF162:
	.string	"V8DImode"
.LASF190:
	.string	"MAX_MODE_CLASS"
.LASF929:
	.string	"CODE_FOR_strsetqi_rex64"
.LASF528:
	.string	"CODE_FOR_rep_movdi_rex64"
.LASF1312:
	.string	"substed_operand"
.LASF482:
	.string	"CODE_FOR_ashldi3_1"
.LASF494:
	.string	"CODE_FOR_return_pop_internal"
.LASF434:
	.string	"CODE_FOR_extendhidi2"
.LASF1270:
	.string	"xdata"
.LASF101:
	.string	"_sch_islower"
.LASF467:
	.string	"CODE_FOR_divqi3"
.LASF909:
	.string	"CODE_FOR_ffssi2"
.LASF288:
	.string	"SIGN_EXTEND"
.LASF695:
	.string	"CODE_FOR_pi2fw"
.LASF1160:
	.string	"calls_setjmp"
.LASF1098:
	.string	"x_saveregs_value"
.LASF1298:
	.string	"goal_alternative"
.LASF310:
	.string	"VEC_DUPLICATE"
.LASF420:
	.string	"CODE_FOR_x86_fnstsw_1"
.LASF1399:
	.string	"inced"
.LASF894:
	.string	"CODE_FOR_indirect_jump"
.LASF95:
	.string	"_next"
.LASF1029:
	.string	"n_alternatives"
.LASF1373:
	.string	"orig_replacements"
.LASF746:
	.string	"CODE_FOR_fix_truncsfdi2"
.LASF328:
	.string	"expr"
.LASF1274:
	.string	"find_reloads"
.LASF795:
	.string	"CODE_FOR_divdf3"
.LASF884:
	.string	"CODE_FOR_ble"
.LASF1257:
	.string	"earlyclobber_operand_p"
.LASF394:
	.string	"NOTE_INSN_EH_REGION_END"
.LASF957:
	.string	"CODE_FOR_sfence"
.LASF1417:
	.string	"output_reloadnum"
.LASF682:
	.string	"CODE_FOR_subrv2sf3"
.LASF1023:
	.string	"operand_mode"
.LASF880:
	.string	"CODE_FOR_blt"
.LASF601:
	.string	"CODE_FOR_sse_xorti3"
.LASF748:
	.string	"CODE_FOR_fix_trunctfsi2"
.LASF1120:
	.string	"x_nonlocal_goto_handler_slots"
.LASF168:
	.string	"V8SFmode"
.LASF785:
	.string	"CODE_FOR_umuldi3_highpart"
.LASF1030:
	.string	"insn"
.LASF592:
	.string	"CODE_FOR_rcpv4sf2"
.LASF23:
	.string	"DIREG"
.LASF537:
	.string	"CODE_FOR_strsethi_rex_1"
.LASF811:
	.string	"CODE_FOR_xordi3"
.LASF359:
	.string	"REG_CC_USER"
.LASF232:
	.string	"ASM_OPERANDS"
.LASF1265:
	.string	"slow"
.LASF1432:
	.string	"global_rtl"
.LASF1140:
	.string	"x_temp_slot_level"
.LASF1331:
	.string	"opno"
.LASF176:
	.string	"CCZmode"
.LASF385:
	.string	"NOTE_INSN_LOOP_CONT"
.LASF27:
	.string	"INDEX_REGS"
.LASF709:
	.string	"CODE_FOR_cmpqi"
.LASF1368:
	.string	"subst_reloads"
.LASF617:
	.string	"CODE_FOR_cvttps2pi"
.LASF847:
	.string	"CODE_FOR_rotldi3"
.LASF696:
	.string	"CODE_FOR_floatv2si2"
.LASF1243:
	.string	"push_replacement"
.LASF1424:
	.string	"mode_name"
.LASF1321:
	.string	"reject"
.LASF1166:
	.string	"contains_functions"
.LASF1189:
	.string	"subreg_loc"
.LASF1210:
	.string	"t_letter"
.LASF1105:
	.string	"varasm"
.LASF374:
	.string	"REG_NON_LOCAL_GOTO"
.LASF927:
	.string	"CODE_FOR_strsethi_rex64"
.LASF1153:
	.string	"preferred_stack_boundary"
.LASF236:
	.string	"ADDR_DIFF_VEC"
.LASF1330:
	.string	"substitution"
.LASF1410:
	.string	"secondary_memlocs"
.LASF692:
	.string	"CODE_FOR_pfacc"
.LASF779:
	.string	"CODE_FOR_umulqihi3"
.LASF835:
	.string	"CODE_FOR_ashlsi3"
.LASF419:
	.string	"CODE_FOR_cmpqi_ext_3_insn_rex64"
.LASF298:
	.string	"ZERO_EXTRACT"
.LASF468:
	.string	"CODE_FOR_udivqi3"
.LASF600:
	.string	"CODE_FOR_sse_iorti3"
.LASF231:
	.string	"ASM_INPUT"
.LASF688:
	.string	"CODE_FOR_mulv2sf3"
.LASF281:
	.string	"ORDERED"
.LASF169:
	.string	"V8DFmode"
.LASF1002:
	.string	"OTI_ffs"
.LASF840:
	.string	"CODE_FOR_ashrsi3"
.LASF939:
	.string	"CODE_FOR_movxfcc"
.LASF1075:
	.string	"promoted_mode"
.LASF807:
	.string	"CODE_FOR_iordi3"
.LASF457:
	.string	"CODE_FOR_floatsixf2"
.LASF1268:
	.string	"immune_p"
.LASF445:
	.string	"CODE_FOR_fix_truncsi_nomemory"
.LASF295:
	.string	"UNSIGNED_FIX"
.LASF953:
	.string	"CODE_FOR_movv2si"
.LASF1157:
	.string	"returns_pcc_struct"
.LASF641:
	.string	"CODE_FOR_mmx_clrdi"
.LASF716:
	.string	"CODE_FOR_cmpsf"
.LASF1386:
	.string	"goaltry"
.LASF707:
	.string	"CODE_FOR_cmpsi"
.LASF1376:
	.string	"refers_to_regno_for_reload_p"
.LASF575:
	.string	"CODE_FOR_sse_movntdi"
.LASF47:
	.string	"sse_words"
.LASF605:
	.string	"CODE_FOR_vmmaskcmpv4sf3"
.LASF740:
	.string	"CODE_FOR_trunctfsf2"
.LASF29:
	.string	"GENERAL_REGS"
.LASF469:
	.string	"CODE_FOR_divmodhi4"
.LASF1422:
	.string	"stderr"
.LASF1385:
	.string	"goalreg"
.LASF712:
	.string	"CODE_FOR_cmpqi_ext_3"
.LASF195:
	.string	"INSN_LIST"
.LASF798:
	.string	"CODE_FOR_divmodsi4"
.LASF96:
	.string	"_sbuf"
.LASF303:
	.string	"RANGE_VAR"
.LASF634:
	.string	"CODE_FOR_ussubv4hi3"
.LASF76:
	.string	"_IO_save_end"
.LASF787:
	.string	"CODE_FOR_smuldi3_highpart"
.LASF182:
	.string	"MODE_INT"
.LASF1335:
	.string	"need_change"
.LASF648:
	.string	"CODE_FOR_mmx_pextrw"
.LASF966:
	.string	"OTI_addv"
.LASF1112:
	.string	"arg_offset_rtx"
.LASF908:
	.string	"CODE_FOR_eh_return"
.LASF2:
	.string	"jump"
.LASF46:
	.string	"regno"
.LASF571:
	.string	"CODE_FOR_mmx_pmovmskb"
.LASF1094:
	.string	"expr_status"
.LASF863:
	.string	"CODE_FOR_sltu"
.LASF498:
	.string	"CODE_FOR_prologue_get_pc"
.LASF1164:
	.string	"has_nonlocal_label"
.LASF846:
	.string	"CODE_FOR_lshrqi3"
.LASF1199:
	.string	"type"
.LASF304:
	.string	"RANGE_LIVE"
.LASF1095:
	.string	"x_pending_stack_adjust"
.LASF152:
	.string	"V2HImode"
.LASF1109:
	.string	"args_size"
.LASF9:
	.string	"frame_related"
.LASF1019:
	.string	"recog_data"
.LASF1011:
	.string	"OTI_cmov"
.LASF759:
	.string	"CODE_FOR_adddi3"
.LASF464:
	.string	"CODE_FOR_subdi3_carry_rex64"
.LASF338:
	.string	"rt_addr_diff_vec_flags"
.LASF828:
	.string	"CODE_FOR_one_cmpldi2"
.LASF1046:
	.string	"RELOAD_FOR_INSN"
.LASF1459:
	.string	"reload.c"
.LASF408:
	.string	"GR_ARG_POINTER"
.LASF756:
	.string	"CODE_FOR_floatdisf2"
.LASF16:
	.string	"sizetype"
.LASF36:
	.string	"FP_SECOND_SSE_REGS"
.LASF516:
	.string	"CODE_FOR_cosdf2"
.LASF313:
	.string	"SS_MINUS"
.LASF912:
	.string	"CODE_FOR_movstrsi"
.LASF554:
	.string	"CODE_FOR_sse_movsfcc"
.LASF914:
	.string	"CODE_FOR_strmovdi_rex64"
.LASF1266:
	.string	"decompose"
.LASF200:
	.string	"MATCH_PARALLEL"
.LASF157:
	.string	"V4SImode"
.LASF5:
	.string	"volatil"
.LASF520:
	.string	"CODE_FOR_cld"
.LASF350:
	.string	"REG_EQUIV"
.LASF57:
	.string	"short unsigned int"
.LASF778:
	.string	"CODE_FOR_mulqi3"
.LASF100:
	.string	"_sch_isdigit"
.LASF58:
	.string	"signed char"
.LASF824:
	.string	"CODE_FOR_abssf2"
.LASF199:
	.string	"MATCH_OPERATOR"
.LASF1195:
	.string	"start"
.LASF757:
	.string	"CODE_FOR_floatsidf2"
.LASF940:
	.string	"CODE_FOR_movtfcc"
.LASF499:
	.string	"CODE_FOR_eh_return_si"
.LASF1087:
	.string	"x_cur_insn_uid"
.LASF1136:
	.string	"x_last_parm_insn"
.LASF453:
	.string	"CODE_FOR_floathisf2"
.LASF1033:
	.string	"insn_operand_data"
.LASF791:
	.string	"CODE_FOR_muldf3"
.LASF315:
	.string	"SS_TRUNCATE"
.LASF1325:
	.string	"force_reload"
.LASF364:
	.string	"REG_EXEC_COUNT"
.LASF1337:
	.string	"dest"
.LASF1289:
	.string	"no_input_reloads"
.LASF524:
	.string	"CODE_FOR_strmovhi_1"
.LASF1058:
	.string	"outmode"
.LASF1064:
	.string	"secondary_out_reload"
.LASF590:
	.string	"CODE_FOR_divv4sf3"
.LASF555:
	.string	"CODE_FOR_sse_movsfcc_eq"
.LASF1000:
	.string	"OTI_absv"
.LASF1449:
	.string	"fixed_regs"
.LASF1339:
	.string	"altnum"
.LASF319:
	.string	"base_after_vec"
.LASF781:
	.string	"CODE_FOR_umulditi3"
.LASF204:
	.string	"DEFINE_INSN"
.LASF61:
	.string	"__off64_t"
.LASF1010:
	.string	"OTI_cbranch"
.LASF932:
	.string	"CODE_FOR_strlensi"
.LASF158:
	.string	"V4DImode"
.LASF439:
	.string	"CODE_FOR_truncdfsf2_3"
.LASF559:
	.string	"CODE_FOR_allocate_stack_worker_rex64"
.LASF838:
	.string	"CODE_FOR_ashrdi3"
.LASF68:
	.string	"_IO_read_base"
.LASF796:
	.string	"CODE_FOR_divsf3"
.LASF39:
	.string	"INT_SSE_REGS"
.LASF926:
	.string	"CODE_FOR_strsethi"
.LASF86:
	.string	"_offset"
.LASF639:
	.string	"CODE_FOR_mmx_iordi3"
.LASF431:
	.string	"CODE_FOR_zero_extendhidi2"
.LASF535:
	.string	"CODE_FOR_strsetsi_rex_1"
.LASF409:
	.string	"GR_VIRTUAL_INCOMING_ARGS"
.LASF713:
	.string	"CODE_FOR_cmpxf"
.LASF1336:
	.string	"first_num"
.LASF362:
	.string	"REG_DEP_OUTPUT"
.LASF73:
	.string	"_IO_buf_end"
.LASF448:
	.string	"CODE_FOR_fix_truncdfsi_sse"
.LASF1054:
	.string	"RELOAD_FOR_OTHER_ADDRESS"
.LASF213:
	.string	"DEFINE_ASM_ATTRIBUTES"
.LASF314:
	.string	"US_MINUS"
.LASF660:
	.string	"CODE_FOR_ashrv4hi3"
.LASF517:
	.string	"CODE_FOR_cossf2"
.LASF974:
	.string	"OTI_umul_widen"
.LASF624:
	.string	"CODE_FOR_ssaddv8qi3"
.LASF1295:
	.string	"this_alternative_earlyclobber"
.LASF1405:
	.string	"clear_secondary_mem"
.LASF1114:
	.string	"return_rtx"
.LASF35:
	.string	"FP_TOP_SSE_REGS"
.LASF297:
	.string	"SIGN_EXTRACT"
.LASF1137:
	.string	"x_max_parm_reg"
.LASF8:
	.string	"integrated"
.LASF532:
	.string	"CODE_FOR_rep_movqi_rex64"
.LASF883:
	.string	"CODE_FOR_bgeu"
.LASF604:
	.string	"CODE_FOR_maskncmpv4sf3"
.LASF1047:
	.string	"RELOAD_FOR_INPUT_ADDRESS"
.LASF238:
	.string	"CLOBBER"
.LASF668:
	.string	"CODE_FOR_mmx_packsswb"
.LASF1315:
	.string	"this_earlyclobber"
.LASF92:
	.string	"_mode"
.LASF1226:
	.string	"get_secondary_mem"
.LASF188:
	.string	"MODE_VECTOR_INT"
.LASF69:
	.string	"_IO_write_base"
.LASF366:
	.string	"REG_SAVE_AREA"
.LASF306:
	.string	"CALL_PLACEHOLDER"
.LASF1102:
	.string	"function"
.LASF699:
	.string	"CODE_FOR_pfrcpit1v2sf3"
.LASF166:
	.string	"V4SFmode"
.LASF1332:
	.string	"first_op_addr_num"
.LASF1057:
	.string	"inmode"
.LASF1016:
	.string	"OP_IN"
.LASF1258:
	.string	"hard_reg_set_here_p"
.LASF1304:
	.string	"goal_alternative_match_win"
.LASF637:
	.string	"CODE_FOR_umulv4hi3_highpart"
.LASF898:
	.string	"CODE_FOR_call"
.LASF1132:
	.string	"x_frame_offset"
.LASF260:
	.string	"PLUS"
.LASF444:
	.string	"CODE_FOR_fix_truncdfdi_sse"
.LASF1450:
	.string	"call_used_regs"
.LASF922:
	.string	"CODE_FOR_clrstrdi"
.LASF276:
	.string	"POST_DEC"
.LASF662:
	.string	"CODE_FOR_lshrv4hi3"
.LASF123:
	.string	"HImode"
.LASF736:
	.string	"CODE_FOR_extenddfxf2"
.LASF346:
	.string	"rtunion"
.LASF387:
	.string	"NOTE_INSN_LOOP_END_TOP_COND"
.LASF664:
	.string	"CODE_FOR_mmx_lshrdi3"
.LASF186:
	.string	"MODE_COMPLEX_INT"
.LASF1180:
	.string	"eh_status"
.LASF672:
	.string	"CODE_FOR_mmx_punpckhwd"
.LASF1401:
	.string	"sets"
.LASF1303:
	.string	"goal_alternative_matched"
.LASF567:
	.string	"CODE_FOR_movti_internal"
.LASF854:
	.string	"CODE_FOR_rotrqi3"
.LASF1407:
	.string	"replace_reloads"
.LASF1078:
	.string	"sequence_stack"
.LASF53:
	.string	"long int"
.LASF413:
	.string	"GR_VIRTUAL_CFA"
.LASF1302:
	.string	"goal_alternative_matches"
.LASF352:
	.string	"REG_WAS_0"
.LASF1197:
	.string	"reload_class"
.LASF1045:
	.string	"RELOAD_FOR_OUTPUT"
.LASF1049:
	.string	"RELOAD_FOR_OUTPUT_ADDRESS"
.LASF739:
	.string	"CODE_FOR_truncxfsf2"
.LASF573:
	.string	"CODE_FOR_mmx_maskmovq_rex"
.LASF373:
	.string	"REG_NORETURN"
.LASF1278:
	.string	"reload_reg_p"
.LASF94:
	.string	"_IO_marker"
.LASF1051:
	.string	"RELOAD_FOR_OPERAND_ADDRESS"
.LASF137:
	.string	"XFmode"
.LASF1159:
	.string	"needs_context"
.LASF372:
	.string	"REG_MAYBE_DEAD"
.LASF167:
	.string	"V4DFmode"
.LASF437:
	.string	"CODE_FOR_extendqihi2"
.LASF1448:
	.string	"reg_renumber"
.LASF602:
	.string	"CODE_FOR_sse_clrv4sf"
.LASF4:
	.string	"unchanging"
.LASF1013:
	.string	"OTI_push"
.LASF502:
	.string	"CODE_FOR_leave_rex64"
.LASF530:
	.string	"CODE_FOR_rep_movsi_rex64"
.LASF687:
	.string	"CODE_FOR_pfminv2sf3"
.LASF347:
	.string	"reg_note"
.LASF462:
	.string	"CODE_FOR_addsi_1_zext"
.LASF1163:
	.string	"calls_eh_return"
.LASF724:
	.string	"CODE_FOR_movsf"
.LASF1142:
	.string	"x_target_temp_slot_level"
.LASF1288:
	.string	"RELOAD_WRITE"
.LASF717:
	.string	"CODE_FOR_movsi"
.LASF1236:
	.string	"offs"
.LASF1110:
	.string	"pretend_args_size"
.LASF1354:
	.string	"context"
.LASF1454:
	.string	"optimize"
.LASF114:
	.string	"_sch_iscppsp"
.LASF191:
	.string	"rtx_code"
.LASF51:
	.string	"CUMULATIVE_ARGS"
.LASF1036:
	.string	"strict_low"
.LASF545:
	.string	"CODE_FOR_cmpstrqi_nz_1"
.LASF1344:
	.string	"new_part"
.LASF1172:
	.string	"varargs"
.LASF1300:
	.string	"goal_alternative_number"
.LASF889:
	.string	"CODE_FOR_bunge"
.LASF845:
	.string	"CODE_FOR_lshrhi3"
.LASF1034:
	.string	"predicate"
.LASF1271:
	.string	"safe_from_earlyclobber"
.LASF1225:
	.string	"inner"
.LASF1329:
	.string	"tclass"
.LASF1079:
	.string	"first"
.LASF456:
	.string	"CODE_FOR_floathitf2"
.LASF487:
	.string	"CODE_FOR_ashrsi3_31"
.LASF857:
	.string	"CODE_FOR_insv"
.LASF20:
	.string	"CREG"
.LASF1364:
	.string	"force_replace"
.LASF496:
	.string	"CODE_FOR_nop"
.LASF1219:
	.string	"cost"
.LASF1174:
	.string	"x_whole_function_mode_p"
.LASF930:
	.string	"CODE_FOR_cmpstrsi"
.LASF803:
	.string	"CODE_FOR_anddi3"
.LASF192:
	.string	"UNKNOWN"
.LASF1293:
	.string	"this_alternative_win"
.LASF234:
	.string	"UNSPEC_VOLATILE"
.LASF674:
	.string	"CODE_FOR_mmx_punpcklbw"
.LASF1256:
	.string	"saved_rtx"
.LASF1004:
	.string	"OTI_sin"
.LASF1186:
	.string	"language_function"
.LASF1025:
	.string	"dup_loc"
.LASF947:
	.string	"CODE_FOR_allocate_stack"
.LASF1263:
	.string	"operands_match_p"
.LASF390:
	.string	"NOTE_INSN_EPILOGUE_BEG"
.LASF55:
	.string	"long unsigned int"
.LASF1119:
	.string	"x_nonlocal_labels"
.LASF11:
	.string	"rtx_def"
.LASF794:
	.string	"CODE_FOR_divtf3"
.LASF103:
	.string	"_sch_ispunct"
.LASF1012:
	.string	"OTI_cstore"
.LASF503:
	.string	"CODE_FOR_ffssi_1"
.LASF133:
	.string	"HFmode"
.LASF1292:
	.string	"this_alternative_match_win"
.LASF1148:
	.string	"inl_last_parm_insn"
.LASF241:
	.string	"TRAP_IF"
.LASF777:
	.string	"CODE_FOR_mulhi3"
.LASF509:
	.string	"CODE_FOR_sqrtdf2_i387"
.LASF1280:
	.string	"noperands"
.LASF583:
	.string	"CODE_FOR_sse_shufps"
.LASF370:
	.string	"REG_EH_REGION"
.LASF1138:
	.string	"x_parm_reg_stack_loc"
.LASF519:
	.string	"CODE_FOR_costf2"
.LASF1027:
	.string	"n_operands"
.LASF1003:
	.string	"OTI_sqrt"
.LASF353:
	.string	"REG_RETVAL"
.LASF661:
	.string	"CODE_FOR_ashrv2si3"
.LASF145:
	.string	"CQImode"
.LASF1068:
	.string	"optional"
.LASF1308:
	.string	"goal_alternative_swapped"
.LASF459:
	.string	"CODE_FOR_floatdixf2"
.LASF62:
	.string	"char"
.LASF1156:
	.string	"returns_struct"
.LASF534:
	.string	"CODE_FOR_strsetsi_1"
.LASF143:
	.string	"XCmode"
.LASF1130:
	.string	"x_arg_pointer_save_area"
.LASF1357:
	.string	"code0"
.LASF587:
	.string	"CODE_FOR_vmsubv4sf3"
.LASF792:
	.string	"CODE_FOR_mulsf3"
.LASF18:
	.string	"AREG"
.LASF1006:
	.string	"OTI_cmp"
.LASF1128:
	.string	"x_tail_recursion_label"
.LASF676:
	.string	"CODE_FOR_mmx_punpckldq"
.LASF1282:
	.string	"pref_or_nothing"
.LASF765:
	.string	"CODE_FOR_adddf3"
.LASF438:
	.string	"CODE_FOR_extendqisi2"
.LASF658:
	.string	"CODE_FOR_uminv8qi3"
.LASF72:
	.string	"_IO_buf_base"
.LASF1154:
	.string	"language"
.LASF269:
	.string	"ROTATERT"
.LASF1028:
	.string	"n_dups"
.LASF1050:
	.string	"RELOAD_FOR_OUTADDR_ADDRESS"
.LASF771:
	.string	"CODE_FOR_subxf3"
.LASF484:
	.string	"CODE_FOR_ashrdi3_63_rex64"
.LASF255:
	.string	"ADDRESSOF"
.LASF375:
	.string	"REG_SETJMP"
.LASF1122:
	.string	"x_nonlocal_goto_stack_level"
.LASF747:
	.string	"CODE_FOR_fix_truncxfsi2"
.LASF1111:
	.string	"outgoing_args_size"
.LASF920:
	.string	"CODE_FOR_strmovqi_rex64"
.LASF151:
	.string	"V2QImode"
.LASF1390:
	.string	"goal_const"
.LASF1083:
	.string	"x_reg_rtx_no"
.LASF129:
	.string	"PHImode"
.LASF67:
	.string	"_IO_read_end"
.LASF1074:
	.string	"modified"
.LASF1092:
	.string	"regno_decl"
.LASF1328:
	.string	"const_to_mem"
.LASF897:
	.string	"CODE_FOR_call_pop"
.LASF150:
	.string	"COImode"
.LASF663:
	.string	"CODE_FOR_lshrv2si3"
.LASF274:
	.string	"PRE_DEC"
.LASF814:
	.string	"CODE_FOR_xorqi3"
.LASF480:
	.string	"CODE_FOR_absdf2_memory"
.LASF108:
	.string	"_sch_isvsp"
.LASF64:
	.string	"_IO_FILE"
.LASF844:
	.string	"CODE_FOR_lshrsi3"
.LASF389:
	.string	"NOTE_INSN_PROLOGUE_END"
.LASF407:
	.string	"GR_HARD_FRAME_POINTER"
.LASF782:
	.string	"CODE_FOR_umulsidi3"
.LASF358:
	.string	"REG_CC_SETTER"
.LASF543:
	.string	"CODE_FOR_rep_stosqi"
.LASF1162:
	.string	"calls_alloca"
.LASF753:
	.string	"CODE_FOR_fix_truncdfhi2"
.LASF679:
	.string	"CODE_FOR_stmxcsr"
.LASF451:
	.string	"CODE_FOR_x86_fnstcw_1"
.LASF619:
	.string	"CODE_FOR_cvtss2si"
.LASF928:
	.string	"CODE_FOR_strsetqi"
.LASF1318:
	.string	"finish"
.LASF1015:
	.string	"op_type"
.LASF850:
	.string	"CODE_FOR_rotlqi3"
.LASF1439:
	.string	"reg_equiv_address"
.LASF181:
	.string	"MODE_RANDOM"
.LASF1281:
	.string	"preferred_class"
.LASF312:
	.string	"US_PLUS"
.LASF504:
	.string	"CODE_FOR_sqrtsf2_1"
.LASF907:
	.string	"CODE_FOR_sibcall_epilogue"
.LASF1141:
	.string	"x_var_temp_slot_level"
.LASF1208:
	.string	"insn_class"
.LASF1021:
	.string	"operand_loc"
.LASF514:
	.string	"CODE_FOR_sinxf2"
.LASF171:
	.string	"BLKmode"
.LASF616:
	.string	"CODE_FOR_cvtps2pi"
.LASF891:
	.string	"CODE_FOR_bunle"
.LASF140:
	.string	"HCmode"
.LASF465:
	.string	"CODE_FOR_subsi3_carry"
.LASF497:
	.string	"CODE_FOR_prologue_set_got"
.LASF566:
	.string	"CODE_FOR_movv2sf_internal"
.LASF933:
	.string	"CODE_FOR_strlendi"
.LASF525:
	.string	"CODE_FOR_strmovhi_rex_1"
.LASF892:
	.string	"CODE_FOR_bunlt"
.LASF822:
	.string	"CODE_FOR_negxf2"
.LASF1283:
	.string	"address_reloaded"
.LASF700:
	.string	"CODE_FOR_pfrcpit2v2sf3"
.LASF705:
	.string	"CODE_FOR_pswapdv2sf2"
.LASF776:
	.string	"CODE_FOR_mulsi3"
.LASF1269:
	.string	"ydata"
.LASF827:
	.string	"CODE_FOR_abstf2"
.LASF1230:
	.string	"dont_remove_subreg"
.LASF810:
	.string	"CODE_FOR_iorqi3"
.LASF246:
	.string	"CONST_STRING"
.LASF309:
	.string	"VEC_CONCAT"
.LASF470:
	.string	"CODE_FOR_udivmoddi4"
.LASF330:
	.string	"size"
.LASF422:
	.string	"CODE_FOR_popsi1"
.LASF853:
	.string	"CODE_FOR_rotrhi3"
.LASF87:
	.string	"__pad1"
.LASF89:
	.string	"__pad3"
.LASF90:
	.string	"__pad4"
.LASF91:
	.string	"__pad5"
.LASF365:
	.string	"REG_NOALIAS"
.LASF222:
	.string	"ATTR_FLAG"
.LASF916:
	.string	"CODE_FOR_strmovsi_rex64"
.LASF956:
	.string	"CODE_FOR_movv2sf"
.LASF1358:
	.string	"code1"
.LASF178:
	.string	"CCFPUmode"
.LASF597:
	.string	"CODE_FOR_vmsqrtv4sf2"
.LASF996:
	.string	"OTI_movstrict"
.LASF608:
	.string	"CODE_FOR_sse_ucomi"
.LASF349:
	.string	"REG_INC"
.LASF212:
	.string	"DEFINE_FUNCTION_UNIT"
.LASF924:
	.string	"CODE_FOR_strsetsi"
.LASF1350:
	.string	"form_sum"
.LASF479:
	.string	"CODE_FOR_abssf2_ifs"
.LASF1440:
	.string	"reg_equiv_mem"
.LASF1133:
	.string	"x_context_display"
.LASF578:
	.string	"CODE_FOR_sse_movhps"
.LASF1053:
	.string	"RELOAD_OTHER"
.LASF77:
	.string	"_markers"
.LASF97:
	.string	"_pos"
.LASF876:
	.string	"CODE_FOR_beq"
.LASF216:
	.string	"ADDRESS"
.LASF1209:
	.string	"insn_letter"
.LASF980:
	.string	"OTI_smod"
.LASF613:
	.string	"CODE_FOR_sminv4sf3"
.LASF1146:
	.string	"original_arg_vector"
.LASF954:
	.string	"CODE_FOR_movv4hi"
.LASF510:
	.string	"CODE_FOR_sqrtxf2"
.LASF442:
	.string	"CODE_FOR_fix_truncdi_memory"
.LASF1190:
	.string	"what"
.LASF1178:
	.string	"uses_eh_lsda"
.LASF614:
	.string	"CODE_FOR_vmsminv4sf3"
.LASF1327:
	.string	"constmemok"
.LASF1349:
	.string	"subst_reg_equivs"
.LASF344:
	.string	"bitmap_head_def"
.LASF1415:
	.string	"static_reload_reg_p"
.LASF433:
	.string	"CODE_FOR_extendsidi2_rex64"
.LASF1041:
	.string	"genfun"
.LASF943:
	.string	"CODE_FOR_maxsf3"
.LASF945:
	.string	"CODE_FOR_pro_epilogue_adjust_stack"
.LASF450:
	.string	"CODE_FOR_fix_trunchi_memory"
.LASF1229:
	.string	"outloc"
.LASF729:
	.string	"CODE_FOR_zero_extendqihi2"
.LASF886:
	.string	"CODE_FOR_bunordered"
.LASF628:
	.string	"CODE_FOR_subv8qi3"
.LASF316:
	.string	"US_TRUNCATE"
.LASF869:
	.string	"CODE_FOR_sordered"
.LASF625:
	.string	"CODE_FOR_ssaddv4hi3"
.LASF1284:
	.string	"address_type"
.LASF790:
	.string	"CODE_FOR_multf3"
.LASF570:
	.string	"CODE_FOR_sse_movmskps"
.LASF762:
	.string	"CODE_FOR_addqi3"
.LASF402:
	.string	"global_rtl_index"
.LASF523:
	.string	"CODE_FOR_strmovsi_rex_1"
.LASF45:
	.string	"nregs"
.LASF1169:
	.string	"instrument_entry_exit"
.LASF865:
	.string	"CODE_FOR_sgeu"
.LASF311:
	.string	"SS_PLUS"
.LASF447:
	.string	"CODE_FOR_fix_truncsfsi_sse"
.LASF273:
	.string	"UMAX"
.LASF34:
	.string	"MMX_REGS"
.LASF325:
	.string	"scale"
.LASF122:
	.string	"QImode"
.LASF665:
	.string	"CODE_FOR_ashlv4hi3"
.LASF977:
	.string	"OTI_sdivmod"
.LASF512:
	.string	"CODE_FOR_sindf2"
.LASF1420:
	.string	"target_flags"
.LASF931:
	.string	"CODE_FOR_cmpintqi"
.LASF971:
	.string	"OTI_smul_highpart"
.LASF405:
	.string	"GR_STACK_POINTER"
.LASF917:
	.string	"CODE_FOR_strmovhi"
.LASF134:
	.string	"TQFmode"
.LASF964:
	.string	"optab_index"
.LASF901:
	.string	"CODE_FOR_call_value"
.LASF968:
	.string	"OTI_subv"
.LASF486:
	.string	"CODE_FOR_x86_shrd_1"
.LASF44:
	.string	"words"
.LASF1044:
	.string	"RELOAD_FOR_INPUT"
.LASF1200:
	.string	"picode"
.LASF446:
	.string	"CODE_FOR_fix_truncsi_memory"
.LASF322:
	.string	"min_after_base"
.LASF852:
	.string	"CODE_FOR_rotrsi3"
.LASF1393:
	.string	"valuenregs"
.LASF972:
	.string	"OTI_umul_highpart"
.LASF644:
	.string	"CODE_FOR_mmx_uavgv8qi3"
.LASF581:
	.string	"CODE_FOR_sse_movss"
.LASF1175:
	.string	"x_dont_save_pending_sizes_p"
.LASF43:
	.string	"ix86_args"
.LASF1069:
	.string	"nocombine"
.LASF417:
	.string	"CODE_FOR_cmpdi_1_insn_rex64"
.LASF767:
	.string	"CODE_FOR_subdi3"
.LASF1194:
	.string	"base"
.LASF17:
	.string	"NO_REGS"
.LASF1457:
	.string	"cfun"
.LASF591:
	.string	"CODE_FOR_vmdivv4sf3"
.LASF627:
	.string	"CODE_FOR_usaddv4hi3"
.LASF882:
	.string	"CODE_FOR_bge"
.LASF788:
	.string	"CODE_FOR_smulsi3_highpart"
.LASF903:
	.string	"CODE_FOR_untyped_call"
.LASF1371:
	.string	"copy_replacements"
.LASF443:
	.string	"CODE_FOR_fix_truncsfdi_sse"
.LASF1392:
	.string	"need_stable_sp"
.LASF127:
	.string	"OImode"
.LASF1065:
	.string	"secondary_in_icode"
.LASF371:
	.string	"REG_SAVE_NOTE"
.LASF958:
	.string	"CODE_FOR_sse_prologue_save"
.LASF562:
	.string	"CODE_FOR_movv4si_internal"
.LASF960:
	.string	"CODE_FOR_nothing"
.LASF271:
	.string	"SMAX"
.LASF773:
	.string	"CODE_FOR_subdf3"
.LASF414:
	.string	"GR_MAX"
.LASF308:
	.string	"VEC_SELECT"
.LASF975:
	.string	"OTI_sdiv"
.LASF355:
	.string	"REG_NONNEG"
.LASF1152:
	.string	"stack_alignment_needed"
.LASF911:
	.string	"CODE_FOR_sqrtdf2"
.LASF521:
	.string	"CODE_FOR_strmovdi_rex_1"
.LASF1070:
	.string	"secondary_p"
.LASF426:
	.string	"CODE_FOR_swapxf"
.LASF879:
	.string	"CODE_FOR_bgtu"
.LASF189:
	.string	"MODE_VECTOR_FLOAT"
.LASF279:
	.string	"POST_MODIFY"
.LASF938:
	.string	"CODE_FOR_movdfcc"
.LASF1259:
	.string	"beg_regno"
.LASF1334:
	.string	"first_outpaddr_num"
.LASF1290:
	.string	"no_output_reloads"
.LASF367:
	.string	"REG_BR_PRED"
.LASF205:
	.string	"DEFINE_PEEPHOLE"
.LASF730:
	.string	"CODE_FOR_zero_extendqisi2"
.LASF116:
	.string	"long long unsigned int"
.LASF396:
	.string	"NOTE_INSN_RANGE_BEG"
.LASF329:
	.string	"offset"
.LASF1260:
	.string	"end_regno"
.LASF1198:
	.string	"reload_mode"
.LASF326:
	.string	"addr_diff_vec_flags"
.LASF82:
	.string	"_cur_column"
.LASF201:
	.string	"MATCH_OP_DUP"
.LASF215:
	.string	"SEQUENCE"
.LASF1150:
	.string	"profile_label_no"
.LASF816:
	.string	"CODE_FOR_negdi2"
.LASF1365:
	.string	"outer_size"
.LASF849:
	.string	"CODE_FOR_rotlhi3"
.LASF621:
	.string	"CODE_FOR_addv8qi3"
.LASF758:
	.string	"CODE_FOR_floatdidf2"
.LASF132:
	.string	"QFmode"
.LASF749:
	.string	"CODE_FOR_fix_truncdfsi2"
.LASF653:
	.string	"CODE_FOR_gtv8qi3"
.LASF1277:
	.string	"live_known"
.LASF921:
	.string	"CODE_FOR_clrstrsi"
.LASF1276:
	.string	"ind_levels"
.LASF919:
	.string	"CODE_FOR_strmovqi"
.LASF1380:
	.string	"inner_endregno"
.LASF976:
	.string	"OTI_sdivv"
.LASF1113:
	.string	"args_info"
.LASF684:
	.string	"CODE_FOR_gev2sf3"
.LASF1171:
	.string	"limit_stack"
.LASF1323:
	.string	"badop"
.LASF242:
	.string	"RESX"
.LASF98:
	.string	"_sch_isblank"
.LASF970:
	.string	"OTI_smulv"
.LASF711:
	.string	"CODE_FOR_cmpsi_1"
.LASF522:
	.string	"CODE_FOR_strmovsi_1"
.LASF230:
	.string	"PARALLEL"
.LASF1340:
	.string	"find_reloads_toplev"
.LASF13:
	.string	"num_elem"
.LASF1042:
	.string	"output_format"
.LASF75:
	.string	"_IO_backup_base"
.LASF732:
	.string	"CODE_FOR_extendsidi2"
.LASF280:
	.string	"UNORDERED"
.LASF809:
	.string	"CODE_FOR_iorhi3"
.LASF179:
	.string	"MAX_MACHINE_MODE"
.LASF66:
	.string	"_IO_read_ptr"
.LASF831:
	.string	"CODE_FOR_one_cmplqi2"
.LASF1370:
	.string	"final_offset"
.LASF1322:
	.string	"did_match"
.LASF436:
	.string	"CODE_FOR_extendhisi2"
.LASF698:
	.string	"CODE_FOR_pfrcpv2sf2"
.LASF1218:
	.string	"best_size"
.LASF951:
	.string	"CODE_FOR_movv4sf"
.LASF40:
	.string	"FLOAT_INT_SSE_REGS"
.LASF197:
	.string	"MATCH_SCRATCH"
.LASF247:
	.string	"CONST"
.LASF1091:
	.string	"regno_pointer_align"
.LASF1363:
	.string	"find_reloads_subreg_address"
.LASF296:
	.string	"SQRT"
.LASF449:
	.string	"CODE_FOR_fix_trunchi_nomemory"
.LASF404:
	.string	"GR_CC0"
.LASF1187:
	.string	"replacement"
.LASF1341:
	.string	"is_set_dest"
.LASF180:
	.string	"mode_class"
.LASF1237:
	.string	"reloadnum"
.LASF1369:
	.string	"reloadreg"
.LASF262:
	.string	"MULT"
.LASF185:
	.string	"MODE_CC"
.LASF506:
	.string	"CODE_FOR_sqrtsf2_i387"
.LASF128:
	.string	"PQImode"
.LASF1081:
	.string	"sequence_rtl_expr"
.LASF915:
	.string	"CODE_FOR_strmovsi"
.LASF1039:
	.string	"name"
.LASF659:
	.string	"CODE_FOR_sminv4hi3"
.LASF1241:
	.string	"reload_flags"
.LASF160:
	.string	"V8HImode"
.LASF1279:
	.string	"insn_code_number"
.LASF666:
	.string	"CODE_FOR_ashlv2si3"
.LASF893:
	.string	"CODE_FOR_bltgt"
.LASF1139:
	.string	"x_temp_slots"
.LASF941:
	.string	"CODE_FOR_minsf3"
.LASF553:
	.string	"CODE_FOR_pro_epilogue_adjust_stack_rex64"
.LASF1126:
	.string	"x_stack_slot_list"
.LASF81:
	.string	"_old_offset"
.LASF1307:
	.string	"goal_alternative_earlyclobber"
.LASF225:
	.string	"CALL_INSN"
.LASF963:
	.string	"handlers"
.LASF618:
	.string	"CODE_FOR_cvtsi2ss"
.LASF1214:
	.string	"dest_regno"
.LASF948:
	.string	"CODE_FOR_builtin_setjmp_receiver"
.LASF250:
	.string	"SUBREG"
.LASF1316:
	.string	"retval"
.LASF526:
	.string	"CODE_FOR_strmovqi_1"
.LASF110:
	.string	"_sch_isalpha"
.LASF1201:
	.string	"icode"
.LASF1161:
	.string	"calls_longjmp"
.LASF163:
	.string	"V16QImode"
.LASF599:
	.string	"CODE_FOR_sse_nandti3"
.LASF1453:
	.string	"reg_class_subunion"
.LASF812:
	.string	"CODE_FOR_xorsi3"
.LASF376:
	.string	"REG_ALWAYS_RETURN"
.LASF424:
	.string	"CODE_FOR_pushdi2_rex64"
.LASF1106:
	.string	"decl"
.LASF489:
	.string	"CODE_FOR_setcc_2"
.LASF117:
	.string	"long long int"
.LASF992:
	.string	"OTI_smax"
.LASF615:
	.string	"CODE_FOR_cvtpi2ps"
.LASF354:
	.string	"REG_LIBCALL"
.LASF483:
	.string	"CODE_FOR_x86_shld_1"
.LASF80:
	.string	"_flags2"
.LASF1296:
	.string	"this_alternative_matches"
.LASF139:
	.string	"QCmode"
.LASF248:
	.string	"VALUE"
.LASF228:
	.string	"NOTE"
.LASF848:
	.string	"CODE_FOR_rotlsi3"
.LASF577:
	.string	"CODE_FOR_sse_movlhps"
.LASF761:
	.string	"CODE_FOR_addhi3"
.LASF1404:
	.string	"prefix"
.LASF1017:
	.string	"OP_OUT"
.LASF582:
	.string	"CODE_FOR_sse_storess"
.LASF888:
	.string	"CODE_FOR_buneq"
.LASF742:
	.string	"CODE_FOR_trunctfdf2"
.LASF48:
	.string	"sse_nregs"
.LASF806:
	.string	"CODE_FOR_andqi3"
.LASF272:
	.string	"UMIN"
.LASF198:
	.string	"MATCH_DUP"
.LASF984:
	.string	"OTI_ior"
.LASF102:
	.string	"_sch_isprint"
.LASF1072:
	.string	"HARD_REG_ELT_TYPE"
.LASF345:
	.string	"basic_block_def"
.LASF1333:
	.string	"first_inpaddr_num"
.LASF735:
	.string	"CODE_FOR_extendsftf2"
.LASF111:
	.string	"_sch_isalnum"
.LASF1250:
	.string	"for_real"
.LASF1430:
	.string	"rtx_class"
.LASF725:
	.string	"CODE_FOR_movdf"
.LASF855:
	.string	"CODE_FOR_extv"
.LASF723:
	.string	"CODE_FOR_movdi"
.LASF998:
	.string	"OTI_negv"
.LASF982:
	.string	"OTI_ftrunc"
.LASF1182:
	.string	"varasm_status"
.LASF7:
	.string	"used"
.LASF557:
	.string	"CODE_FOR_sse_movdfcc_eq"
.LASF1416:
	.string	"subst_reg_equivs_changed"
.LASF1313:
	.string	"body"
.LASF766:
	.string	"CODE_FOR_addsf3"
.LASF856:
	.string	"CODE_FOR_extzv"
.LASF490:
	.string	"CODE_FOR_jump"
.LASF491:
	.string	"CODE_FOR_doloop_end_internal"
.LASF999:
	.string	"OTI_abs"
.LASF1441:
	.string	"n_earlyclobbers"
.LASF383:
	.string	"NOTE_INSN_LOOP_BEG"
.LASF906:
	.string	"CODE_FOR_epilogue"
.LASF1118:
	.string	"x_function_call_count"
.LASF808:
	.string	"CODE_FOR_iorsi3"
.LASF146:
	.string	"CHImode"
.LASF104:
	.string	"_sch_isspace"
.LASF399:
	.string	"NOTE_INSN_BASIC_BLOCK"
.LASF220:
	.string	"SET_ATTR_ALTERNATIVE"
.LASF1356:
	.string	"orig_op1"
.LASF1342:
	.string	"copied"
.LASF593:
	.string	"CODE_FOR_vmrcpv4sf2"
.LASF1090:
	.string	"regno_pointer_align_length"
.LASF1085:
	.string	"x_first_insn"
.LASF1191:
	.string	"decomposition"
.LASF1099:
	.string	"x_apply_args_value"
.LASF626:
	.string	"CODE_FOR_usaddv8qi3"
.LASF38:
	.string	"FLOAT_INT_REGS"
.LASF952:
	.string	"CODE_FOR_movv4si"
.LASF244:
	.string	"CONST_DOUBLE"
.LASF870:
	.string	"CODE_FOR_suneq"
.LASF1411:
	.string	"secondary_memlocs_elim"
.LASF833:
	.string	"CODE_FOR_x86_shift_adj_1"
.LASF175:
	.string	"CCNOmode"
.LASF839:
	.string	"CODE_FOR_x86_shift_adj_3"
.LASF156:
	.string	"V4HImode"
.LASF631:
	.string	"CODE_FOR_sssubv8qi3"
.LASF282:
	.string	"UNEQ"
.LASF265:
	.string	"ASHIFT"
.LASF270:
	.string	"SMIN"
.LASF1220:
	.string	"__FUNCTION__"
.LASF1400:
	.string	"regno_clobbered_p"
.LASF257:
	.string	"IF_THEN_ELSE"
.LASF1026:
	.string	"dup_num"
.LASF475:
	.string	"CODE_FOR_negsf2_ifs"
.LASF1372:
	.string	"copy_replacements_1"
.LASF965:
	.string	"OTI_add"
.LASF1285:
	.string	"reload_usage"
.LASF395:
	.string	"NOTE_INSN_REPEATED_LINE_NUMBER"
.LASF112:
	.string	"_sch_isidnum"
.LASF1107:
	.string	"outer"
.LASF738:
	.string	"CODE_FOR_truncdfsf2"
.LASF1246:
	.string	"secondary_out"
.LASF1348:
	.string	"removed_and"
.LASF1436:
	.string	"n_reloads"
.LASF428:
	.string	"CODE_FOR_zero_extendhisi2_and"
.LASF463:
	.string	"CODE_FOR_addqi_ext_1"
.LASF392:
	.string	"NOTE_INSN_FUNCTION_BEG"
.LASF1014:
	.string	"OTI_MAX"
.LASF1088:
	.string	"x_last_linenum"
.LASF1202:
	.string	"t_class"
.LASF52:
	.string	"unsigned int"
.LASF1403:
	.string	"debug_reload_to_stream"
.LASF1461:
	.string	"tree_node"
.LASF871:
	.string	"CODE_FOR_sunge"
.LASF1234:
	.string	"note"
.LASF1123:
	.string	"x_cleanup_label"
.LASF478:
	.string	"CODE_FOR_abssf2_memory"
.LASF858:
	.string	"CODE_FOR_seq"
.LASF542:
	.string	"CODE_FOR_rep_stossi_rex64"
.LASF872:
	.string	"CODE_FOR_sungt"
.LASF611:
	.string	"CODE_FOR_smaxv4sf3"
.LASF321:
	.string	"max_after_vec"
.LASF994:
	.string	"OTI_umax"
.LASF760:
	.string	"CODE_FOR_addsi3"
.LASF283:
	.string	"UNGE"
.LASF629:
	.string	"CODE_FOR_subv4hi3"
.LASF967:
	.string	"OTI_sub"
.LASF612:
	.string	"CODE_FOR_vmsmaxv4sf3"
.LASF476:
	.string	"CODE_FOR_negdf2_memory"
.LASF829:
	.string	"CODE_FOR_one_cmplsi2"
.LASF421:
	.string	"CODE_FOR_x86_sahf_1"
.LASF620:
	.string	"CODE_FOR_cvttss2si"
.LASF59:
	.string	"short int"
.LASF1211:
	.string	"mem_valid"
.LASF284:
	.string	"UNGT"
.LASF1167:
	.string	"has_computed_jump"
.LASF1024:
	.string	"operand_type"
.LASF1001:
	.string	"OTI_one_cmpl"
.LASF745:
	.string	"CODE_FOR_fix_truncdfdi2"
.LASF558:
	.string	"CODE_FOR_allocate_stack_worker_1"
.LASF1170:
	.string	"profile"
.LASF83:
	.string	"_vtable_offset"
.LASF1389:
	.string	"goal_mem"
.LASF677:
	.string	"CODE_FOR_emms"
.LASF1406:
	.string	"debug_reload"
.LASF1367:
	.string	"transfer_replacements"
.LASF1032:
	.string	"insn_gen_fn"
.LASF718:
	.string	"CODE_FOR_movhi"
.LASF1297:
	.string	"swapped"
.LASF1317:
	.string	"try_swapped"
.LASF902:
	.string	"CODE_FOR_call_value_exp"
.LASF120:
	.string	"VOIDmode"
.LASF377:
	.string	"REG_VTABLE_REF"
.LASF586:
	.string	"CODE_FOR_subv4sf3"
.LASF737:
	.string	"CODE_FOR_extenddftf2"
.LASF1397:
	.string	"xnregs"
.LASF412:
	.string	"GR_VIRTUAL_OUTGOING_ARGS"
.LASF300:
	.string	"LO_SUM"
.LASF744:
	.string	"CODE_FOR_fix_trunctfdi2"
.LASF675:
	.string	"CODE_FOR_mmx_punpcklwd"
.LASF755:
	.string	"CODE_FOR_floatsisf2"
.LASF333:
	.string	"rtwint"
	.ident	"GCC: (Ubuntu/Linaro 4.8.1-10ubuntu9) 4.8.1"
	.section	.note.GNU-stack,"",@progbits
