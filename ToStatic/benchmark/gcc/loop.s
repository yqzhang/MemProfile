	.file	"loop.c"
# GNU C (Ubuntu/Linaro 4.8.1-10ubuntu9) version 4.8.1 (x86_64-linux-gnu)
#	compiled by GNU C version 4.8.1, GMP version 5.1.2, MPFR version 3.1.1-p2, MPC version 1.0.1
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed:  -I . -imultiarch x86_64-linux-gnu -D SPEC_CPU -D NDEBUG
# -D SPEC_CPU_LP64 loop.c -mtune=generic -march=x86-64 -g -fverbose-asm
# -fno-strict-aliasing -fstack-protector -Wformat -Wformat-security
# options enabled:  -faggressive-loop-optimizations
# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg -fcommon
# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
# -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fgnu-runtime
# -fident -finline-atomics -fira-hoist-pressure -fira-share-save-slots
# -fira-share-spill-slots -fivopts -fkeep-static-consts
# -fleading-underscore -fmath-errno -fmerge-debug-strings
# -fmove-loop-invariants -fpeephole -fprefetch-loop-arrays
# -freg-struct-return -fsched-critical-path-heuristic
# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fshow-column
# -fsigned-zeros -fsplit-ivs-in-unroller -fstack-protector
# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
# -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
# -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
# -ftree-parallelize-loops= -ftree-phiprop -ftree-pta -ftree-reassoc
# -ftree-scev-cprop -ftree-slp-vectorize -ftree-vect-loop-version
# -funit-at-a-time -funwind-tables -fverbose-asm -fzero-initialized-in-bss
# -m128bit-long-double -m64 -m80387 -maccumulate-outgoing-args
# -malign-stringops -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc
# -mieee-fp -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse
# -msse2 -mtls-direct-seg-refs

	.text
.Ltext0:
	.comm	uid_luid,8,8
	.comm	uid_loop,8,8
	.comm	max_uid_for_loop,4,4
	.local	max_luid
	.comm	max_luid,4,4
	.local	max_loop_num
	.comm	max_loop_num,4,4
	.comm	max_reg_before_loop,4,4
	.local	loop_max_reg
	.comm	loop_max_reg,4,4
	.comm	loop_dump_stream,8,8
	.local	indirect_jump_in_function
	.comm	indirect_jump_in_function,4,4
	.local	copy_cost
	.comm	copy_cost,4,4
	.local	reg_address_cost
	.comm	reg_address_cost,4,4
	.globl	init_loop
	.type	init_loop, @function
init_loop:
.LFB2:
	.file 1 "loop.c"
	.loc 1 402 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 403 0
	movl	word_mode(%rip), %eax	# word_mode, word_mode.0
	movl	$58, %esi	#,
	movl	%eax, %edi	# word_mode.0,
	call	gen_rtx_REG	#
	movq	%rax, -8(%rbp)	# tmp61, reg
	.loc 1 405 0
	movq	-8(%rbp), %rax	# reg, tmp62
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp62,
	call	address_cost	#
	movl	%eax, reg_address_cost(%rip)	# reg_address_cost.1, reg_address_cost
	.loc 1 407 0
	movl	$4, copy_cost(%rip)	#, copy_cost
	.loc 1 408 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	init_loop, .-init_loop
	.type	compute_luids, @function
compute_luids:
.LFB3:
	.loc 1 419 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# start, start
	movq	%rsi, -32(%rbp)	# end, end
	movl	%edx, -36(%rbp)	# prev_luid, prev_luid
	.loc 1 423 0
	movq	-24(%rbp), %rax	# start, tmp75
	movq	%rax, -8(%rbp)	# tmp75, insn
	movl	-36(%rbp), %eax	# prev_luid, tmp76
	movl	%eax, -12(%rbp)	# tmp76, i
	jmp	.L3	#
.L8:
	.loc 1 425 0
	movq	-8(%rbp), %rax	# insn, tmp77
	movl	8(%rax), %edx	# insn_3->fld[0].rtint, D.24244
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.2
	cmpl	%eax, %edx	# max_uid_for_loop.2, D.24244
	jl	.L4	#,
	.loc 1 426 0
	jmp	.L5	#
.L4:
	.loc 1 429 0
	movq	-8(%rbp), %rax	# insn, tmp78
	movzwl	(%rax), %eax	# insn_3->code, D.24245
	cmpw	$37, %ax	#, D.24245
	jne	.L6	#,
	.loc 1 430 0
	movq	-8(%rbp), %rax	# insn, tmp79
	movl	40(%rax), %eax	# insn_3->fld[4].rtint, D.24244
	testl	%eax, %eax	# D.24244
	jg	.L7	#,
.L6:
	.loc 1 431 0
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.3
	movq	-8(%rbp), %rax	# insn, tmp80
	movl	8(%rax), %eax	# insn_3->fld[0].rtint, D.24244
	cltq
	salq	$2, %rax	#, D.24246
	addq	%rax, %rdx	# D.24246, D.24247
	addl	$1, -12(%rbp)	#, i
	movl	-12(%rbp), %eax	# i, tmp81
	movl	%eax, (%rdx)	# tmp81, *_22
	jmp	.L5	#
.L7:
	.loc 1 434 0
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.4
	movq	-8(%rbp), %rax	# insn, tmp82
	movl	8(%rax), %eax	# insn_3->fld[0].rtint, D.24244
	cltq
	salq	$2, %rax	#, D.24246
	addq	%rax, %rdx	# D.24246, D.24247
	movl	-12(%rbp), %eax	# i, tmp83
	movl	%eax, (%rdx)	# tmp83, *_17
.L5:
	.loc 1 423 0
	movq	-8(%rbp), %rax	# insn, tmp84
	movq	24(%rax), %rax	# insn_3->fld[2].rtx, tmp85
	movq	%rax, -8(%rbp)	# tmp85, insn
.L3:
	.loc 1 423 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# insn, tmp86
	cmpq	-32(%rbp), %rax	# end, tmp86
	jne	.L8	#,
	.loc 1 436 0 is_stmt 1
	movl	-12(%rbp), %eax	# i, tmp87
	addl	$1, %eax	#, D.24244
	.loc 1 437 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	compute_luids, .-compute_luids
	.section	.rodata
.LC0:
	.string	"loop.c"
	.text
	.globl	loop_optimize
	.type	loop_optimize, @function
loop_optimize:
.LFB4:
	.loc 1 450 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$144, %rsp	#,
	movq	%rdi, -120(%rbp)	# f, f
	movq	%rsi, -128(%rbp)	# dumpfile, dumpfile
	movl	%edx, -132(%rbp)	# flags, flags
	.loc 1 454 0
	leaq	-64(%rbp), %rax	#, tmp134
	movq	%rax, -88(%rbp)	# tmp134, loops
	.loc 1 457 0
	movq	-128(%rbp), %rax	# dumpfile, tmp135
	movq	%rax, loop_dump_stream(%rip)	# tmp135, loop_dump_stream
	.loc 1 459 0
	call	init_recog_no_volatile	#
	.loc 1 461 0
	call	max_reg_num	#
	movl	%eax, max_reg_before_loop(%rip)	# max_reg_before_loop.5, max_reg_before_loop
	.loc 1 462 0
	movl	max_reg_before_loop(%rip), %eax	# max_reg_before_loop, max_reg_before_loop.6
	movl	%eax, loop_max_reg(%rip)	# max_reg_before_loop.7, loop_max_reg
	.loc 1 464 0
	movq	$0, regs_may_share(%rip)	#, regs_may_share
	.loc 1 468 0
	movl	$0, max_loop_num(%rip)	#, max_loop_num
	.loc 1 469 0
	movq	-120(%rbp), %rax	# f, tmp136
	movq	%rax, -96(%rbp)	# tmp136, insn
	jmp	.L11	#
.L13:
	.loc 1 471 0
	movq	-96(%rbp), %rax	# insn, tmp137
	movzwl	(%rax), %eax	# insn_1->code, D.24249
	cmpw	$37, %ax	#, D.24249
	jne	.L12	#,
	.loc 1 472 0
	movq	-96(%rbp), %rax	# insn, tmp138
	movl	40(%rax), %eax	# insn_1->fld[4].rtint, D.24248
	cmpl	$-96, %eax	#, D.24248
	jne	.L12	#,
	.loc 1 473 0
	movl	max_loop_num(%rip), %eax	# max_loop_num, max_loop_num.8
	addl	$1, %eax	#, max_loop_num.9
	movl	%eax, max_loop_num(%rip)	# max_loop_num.9, max_loop_num
.L12:
	.loc 1 469 0
	movq	-96(%rbp), %rax	# insn, tmp139
	movq	24(%rax), %rax	# insn_1->fld[2].rtx, tmp140
	movq	%rax, -96(%rbp)	# tmp140, insn
.L11:
	.loc 1 469 0 is_stmt 0 discriminator 1
	cmpq	$0, -96(%rbp)	#, insn
	jne	.L13	#,
	.loc 1 477 0 is_stmt 1
	movl	max_loop_num(%rip), %eax	# max_loop_num, max_loop_num.10
	testl	%eax, %eax	# max_loop_num.10
	je	.L10	#,
	.loc 1 480 0
	movl	max_loop_num(%rip), %edx	# max_loop_num, max_loop_num.11
	movq	-88(%rbp), %rax	# loops, tmp141
	movl	%edx, (%rax)	# max_loop_num.11, loops_6->num
	.loc 1 484 0
	call	get_max_uid	#
	leal	1(%rax), %edx	#, D.24248
	movl	max_loop_num(%rip), %eax	# max_loop_num, max_loop_num.12
	sall	$5, %eax	#, D.24248
	addl	%edx, %eax	# D.24248, max_uid_for_loop.13
	movl	%eax, max_uid_for_loop(%rip)	# max_uid_for_loop.13, max_uid_for_loop
	.loc 1 486 0
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.14
	cltq
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.24250,
	call	xcalloc	#
	movq	%rax, uid_luid(%rip)	# uid_luid.15, uid_luid
	.loc 1 487 0
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.16
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.24250,
	call	xcalloc	#
	movq	%rax, uid_loop(%rip)	# uid_loop.17, uid_loop
	.loc 1 492 0
	movq	-88(%rbp), %rax	# loops, tmp144
	movl	(%rax), %eax	# loops_6->num, D.24248
	cltq
	movl	$248, %esi	#,
	movq	%rax, %rdi	# D.24250,
	call	xcalloc	#
	movq	%rax, %rdx	# tmp145, D.24251
	.loc 1 491 0
	movq	-88(%rbp), %rax	# loops, tmp146
	movq	%rdx, 8(%rax)	# D.24251, loops_6->array
	.loc 1 496 0
	movq	-88(%rbp), %rdx	# loops, tmp147
	movq	-120(%rbp), %rax	# f, tmp148
	movq	%rdx, %rsi	# tmp147,
	movq	%rax, %rdi	# tmp148,
	call	find_and_verify_loops	#
	.loc 1 499 0
	movq	-88(%rbp), %rax	# loops, tmp149
	movl	(%rax), %eax	# loops_6->num, D.24248
	cltq
	movl	$240, %esi	#,
	movq	%rax, %rdi	# D.24250,
	call	xcalloc	#
	movq	%rax, -80(%rbp)	# tmp150, loops_info
	.loc 1 500 0
	movl	$0, -100(%rbp)	#, i
	jmp	.L16	#
.L17:
	.loc 1 501 0 discriminator 2
	movq	-88(%rbp), %rax	# loops, tmp151
	movq	8(%rax), %rdx	# loops_6->array, D.24252
	movl	-100(%rbp), %eax	# i, tmp152
	cltq
	salq	$3, %rax	#, tmp154
	movq	%rax, %rcx	# tmp153, tmp155
	salq	$5, %rcx	#, tmp155
	subq	%rax, %rcx	# tmp153, D.24250
	movq	%rcx, %rax	# D.24250, D.24250
	addq	%rax, %rdx	# D.24250, D.24252
	movl	-100(%rbp), %eax	# i, tmp156
	cltq
	salq	$4, %rax	#, tmp158
	movq	%rax, %rcx	# tmp157, tmp159
	salq	$4, %rcx	#, tmp159
	subq	%rax, %rcx	# tmp157, D.24250
	movq	-80(%rbp), %rax	# loops_info, tmp160
	addq	%rcx, %rax	# D.24250, D.24251
	movq	%rax, 160(%rdx)	# D.24251, _43->aux
	.loc 1 500 0 discriminator 2
	addl	$1, -100(%rbp)	#, i
.L16:
	.loc 1 500 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# loops, tmp161
	movl	(%rax), %eax	# loops_6->num, D.24248
	cmpl	-100(%rbp), %eax	# i, D.24248
	jg	.L17	#,
	.loc 1 506 0 is_stmt 1
	movl	max_reg_before_loop(%rip), %ecx	# max_reg_before_loop, max_reg_before_loop.18
	movq	-120(%rbp), %rax	# f, tmp162
	movl	$1, %edx	#,
	movl	%ecx, %esi	# max_reg_before_loop.18,
	movq	%rax, %rdi	# tmp162,
	call	reg_scan	#
	.loc 1 513 0
	call	init_alias_analysis	#
	.loc 1 517 0
	call	get_max_uid	#
	movl	max_uid_for_loop(%rip), %edx	# max_uid_for_loop, max_uid_for_loop.19
	cmpl	%edx, %eax	# max_uid_for_loop.19, D.24248
	jle	.L18	#,
	.loc 1 518 0
	movl	$__FUNCTION__.12570, %edx	#,
	movl	$518, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L18:
	.loc 1 520 0
	call	get_max_uid	#
	movl	%eax, max_uid_for_loop(%rip)	# max_uid_for_loop.20, max_uid_for_loop
	.loc 1 525 0
	movq	-120(%rbp), %rax	# f, tmp163
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp163,
	call	compute_luids	#
	movl	%eax, max_luid(%rip)	# max_luid.21, max_luid
	.loc 1 532 0
	movl	$0, -100(%rbp)	#, i
	jmp	.L19	#
.L22:
	.loc 1 534 0
	movq	uid_luid(%rip), %rax	# uid_luid, uid_luid.22
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.23
	movl	-100(%rbp), %ecx	# i, tmp164
	movslq	%ecx, %rcx	# tmp164, D.24250
	salq	$2, %rcx	#, D.24250
	addq	%rcx, %rdx	# D.24250, D.24253
	movl	(%rdx), %edx	# *_59, D.24248
	movl	%edx, (%rax)	# D.24248, *uid_luid.22_55
	.loc 1 535 0
	movq	uid_luid(%rip), %rax	# uid_luid, uid_luid.24
	movl	(%rax), %eax	# *uid_luid.24_61, D.24248
	testl	%eax, %eax	# D.24248
	je	.L20	#,
	.loc 1 536 0
	jmp	.L21	#
.L20:
	.loc 1 532 0
	addl	$1, -100(%rbp)	#, i
.L19:
	.loc 1 532 0 is_stmt 0 discriminator 1
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.25
	cmpl	%eax, -100(%rbp)	# max_uid_for_loop.25, i
	jl	.L22	#,
.L21:
	.loc 1 538 0 is_stmt 1
	movl	$0, -100(%rbp)	#, i
	jmp	.L23	#
.L25:
	.loc 1 539 0
	movq	uid_luid(%rip), %rax	# uid_luid, uid_luid.26
	movl	-100(%rbp), %edx	# i, tmp165
	movslq	%edx, %rdx	# tmp165, D.24250
	salq	$2, %rdx	#, D.24250
	addq	%rdx, %rax	# D.24250, D.24253
	movl	(%rax), %eax	# *_69, D.24248
	testl	%eax, %eax	# D.24248
	jne	.L24	#,
	.loc 1 540 0
	movq	uid_luid(%rip), %rax	# uid_luid, uid_luid.27
	movl	-100(%rbp), %edx	# i, tmp166
	movslq	%edx, %rdx	# tmp166, D.24250
	salq	$2, %rdx	#, D.24250
	addq	%rax, %rdx	# uid_luid.27, D.24253
	movq	uid_luid(%rip), %rax	# uid_luid, uid_luid.28
	movl	-100(%rbp), %ecx	# i, tmp167
	movslq	%ecx, %rcx	# tmp167, D.24250
	salq	$2, %rcx	#, D.24250
	subq	$4, %rcx	#, D.24254
	addq	%rcx, %rax	# D.24254, D.24253
	movl	(%rax), %eax	# *_79, D.24248
	movl	%eax, (%rdx)	# D.24248, *_74
.L24:
	.loc 1 538 0
	addl	$1, -100(%rbp)	#, i
.L23:
	.loc 1 538 0 is_stmt 0 discriminator 1
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.29
	cmpl	%eax, -100(%rbp)	# max_uid_for_loop.29, i
	jl	.L25	#,
	.loc 1 544 0 is_stmt 1
	movq	-120(%rbp), %rax	# f, tmp168
	movq	%rax, %rdi	# tmp168,
	call	indirect_jump_in_function_p	#
	movl	%eax, indirect_jump_in_function(%rip)	# indirect_jump_in_function.30, indirect_jump_in_function
	.loc 1 548 0
	movl	max_loop_num(%rip), %eax	# max_loop_num, max_loop_num.31
	subl	$1, %eax	#, tmp169
	movl	%eax, -100(%rbp)	# tmp169, i
	jmp	.L26	#
.L28:
.LBB2:
	.loc 1 550 0
	movq	-88(%rbp), %rax	# loops, tmp170
	movq	8(%rax), %rdx	# loops_6->array, D.24252
	movl	-100(%rbp), %eax	# i, tmp171
	cltq
	salq	$3, %rax	#, tmp173
	movq	%rax, %rcx	# tmp172, tmp174
	salq	$5, %rcx	#, tmp174
	subq	%rax, %rcx	# tmp172, D.24250
	movq	%rcx, %rax	# D.24250, D.24250
	addq	%rdx, %rax	# D.24252, tmp175
	movq	%rax, -72(%rbp)	# tmp175, loop
	.loc 1 552 0
	movq	-72(%rbp), %rax	# loop, tmp176
	movl	156(%rax), %eax	# loop_88->invalid, D.24248
	testl	%eax, %eax	# D.24248
	jne	.L27	#,
	.loc 1 552 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loop, tmp177
	movq	200(%rax), %rax	# loop_88->end, D.24255
	testq	%rax, %rax	# D.24255
	je	.L27	#,
	.loc 1 553 0 is_stmt 1
	movl	-132(%rbp), %edx	# flags, tmp178
	movq	-72(%rbp), %rax	# loop, tmp179
	movl	%edx, %esi	# tmp178,
	movq	%rax, %rdi	# tmp179,
	call	scan_loop	#
.L27:
.LBE2:
	.loc 1 548 0
	subl	$1, -100(%rbp)	#, i
.L26:
	.loc 1 548 0 is_stmt 0 discriminator 1
	cmpl	$0, -100(%rbp)	#, i
	jns	.L28	#,
	.loc 1 560 0 is_stmt 1
	movl	write_symbols(%rip), %eax	# write_symbols, write_symbols.32
	testl	%eax, %eax	# write_symbols.32
	je	.L29	#,
	.loc 1 561 0
	call	reorder_blocks	#
.L29:
	.loc 1 563 0
	call	end_alias_analysis	#
	.loc 1 566 0
	movq	uid_luid(%rip), %rax	# uid_luid, uid_luid.33
	movq	%rax, %rdi	# uid_luid.33,
	call	free	#
	.loc 1 567 0
	movq	uid_loop(%rip), %rax	# uid_loop, uid_loop.34
	movq	%rax, %rdi	# uid_loop.34,
	call	free	#
	.loc 1 568 0
	movq	-80(%rbp), %rax	# loops_info, tmp180
	movq	%rax, %rdi	# tmp180,
	call	free	#
	.loc 1 569 0
	movq	-88(%rbp), %rax	# loops, tmp181
	movq	8(%rax), %rax	# loops_6->array, D.24252
	movq	%rax, %rdi	# D.24252,
	call	free	#
.L10:
	.loc 1 570 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	loop_optimize, .-loop_optimize
	.type	next_insn_in_loop, @function
next_insn_in_loop:
.LFB5:
	.loc 1 582 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# loop, loop
	movq	%rsi, -16(%rbp)	# insn, insn
	.loc 1 583 0
	movq	-16(%rbp), %rax	# insn, tmp64
	movq	24(%rax), %rax	# insn_3(D)->fld[2].rtx, tmp65
	movq	%rax, -16(%rbp)	# tmp65, insn
	.loc 1 585 0
	movq	-8(%rbp), %rax	# loop, tmp66
	movq	200(%rax), %rax	# loop_5(D)->end, D.24257
	cmpq	-16(%rbp), %rax	# insn, D.24257
	jne	.L31	#,
	.loc 1 587 0
	movq	-8(%rbp), %rax	# loop, tmp67
	movq	208(%rax), %rax	# loop_5(D)->top, D.24257
	testq	%rax, %rax	# D.24257
	je	.L32	#,
	.loc 1 589 0
	movq	-8(%rbp), %rax	# loop, tmp68
	movq	208(%rax), %rax	# loop_5(D)->top, tmp69
	movq	%rax, -16(%rbp)	# tmp69, insn
	jmp	.L31	#
.L32:
	.loc 1 592 0
	movq	$0, -16(%rbp)	#, insn
.L31:
	.loc 1 595 0
	movq	-8(%rbp), %rax	# loop, tmp70
	movq	216(%rax), %rax	# loop_5(D)->scan_start, D.24257
	cmpq	-16(%rbp), %rax	# insn, D.24257
	jne	.L33	#,
	.loc 1 597 0
	movq	$0, -16(%rbp)	#, insn
.L33:
	.loc 1 599 0
	movq	-16(%rbp), %rax	# insn, D.24258
	.loc 1 600 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	next_insn_in_loop, .-next_insn_in_loop
	.section	.rodata
	.align 8
.LC1:
	.string	"\nLoop from %d to %d is phony.\n\n"
	.align 8
.LC2:
	.string	"\nLoop from %d to %d: %d real insns.\n"
.LC3:
	.string	"Continue at insn %d.\n"
	.text
	.type	scan_loop, @function
scan_loop:
.LFB6:
	.loc 1 614 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$216, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -216(%rbp)	# loop, loop
	movl	%esi, -220(%rbp)	# flags, flags
	.loc 1 615 0
	movq	-216(%rbp), %rax	# loop, tmp695
	movq	160(%rax), %rax	# loop_64(D)->aux, tmp696
	movq	%rax, -120(%rbp)	# tmp696, loop_info
	.loc 1 616 0
	movq	-216(%rbp), %rax	# loop, tmp697
	movq	160(%rax), %rax	# loop_64(D)->aux, D.24259
	addq	$184, %rax	#, tmp698
	movq	%rax, -112(%rbp)	# tmp698, regs
	.loc 1 618 0
	movq	-216(%rbp), %rax	# loop, tmp699
	movq	192(%rax), %rax	# loop_64(D)->start, tmp700
	movq	%rax, -104(%rbp)	# tmp700, loop_start
	.loc 1 619 0
	movq	-216(%rbp), %rax	# loop, tmp701
	movq	200(%rax), %rax	# loop_64(D)->end, tmp702
	movq	%rax, -96(%rbp)	# tmp702, loop_end
	.loc 1 622 0
	movl	$0, -196(%rbp)	#, maybe_never
	.loc 1 625 0
	movl	$0, -192(%rbp)	#, call_passed
	.loc 1 627 0
	movq	$0, -88(%rbp)	#, loop_entry_jump
	.loc 1 635 0
	movq	-216(%rbp), %rax	# loop, tmp703
	movq	160(%rax), %rax	# loop_64(D)->aux, D.24259
	addq	$168, %rax	#, tmp704
	movq	%rax, -80(%rbp)	# tmp704, movables
	.loc 1 642 0
	movl	$0, -188(%rbp)	#, loop_depth
	.loc 1 644 0
	movq	-216(%rbp), %rax	# loop, tmp705
	movq	$0, 208(%rax)	#, loop_64(D)->top
	.loc 1 646 0
	movq	-80(%rbp), %rax	# movables, tmp706
	movq	$0, (%rax)	#, movables_74->head
	.loc 1 647 0
	movq	-80(%rbp), %rax	# movables, tmp707
	movq	$0, 8(%rax)	#, movables_74->last
	.loc 1 665 0
	movq	-104(%rbp), %rax	# loop_start, tmp708
	movq	24(%rax), %rax	# loop_start_68->fld[2].rtx, tmp709
	movq	%rax, -152(%rbp)	# tmp709, p
	jmp	.L36	#
.L38:
	.loc 1 671 0
	movq	-152(%rbp), %rax	# p, tmp710
	movq	24(%rax), %rax	# p_6->fld[2].rtx, tmp711
	movq	%rax, -152(%rbp)	# tmp711, p
.L36:
	.loc 1 665 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp712
	cmpq	-96(%rbp), %rax	# loop_end, tmp712
	je	.L37	#,
	.loc 1 667 0
	movq	-152(%rbp), %rax	# p, tmp713
	movzwl	(%rax), %eax	# p_6->code, D.24260
	cmpw	$36, %ax	#, D.24260
	je	.L37	#,
	.loc 1 667 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp714
	movzwl	(%rax), %eax	# p_6->code, D.24260
	movzwl	%ax, %eax	# D.24260, D.24261
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24262
	cmpb	$105, %al	#, D.24262
	je	.L37	#,
	.loc 1 668 0 is_stmt 1
	movq	-152(%rbp), %rax	# p, tmp716
	movzwl	(%rax), %eax	# p_6->code, D.24260
	cmpw	$37, %ax	#, D.24260
	jne	.L38	#,
	.loc 1 669 0
	movq	-152(%rbp), %rax	# p, tmp717
	movl	40(%rax), %eax	# p_6->fld[4].rtint, D.24261
	cmpl	$-96, %eax	#, D.24261
	je	.L37	#,
	.loc 1 670 0
	movq	-152(%rbp), %rax	# p, tmp718
	movl	40(%rax), %eax	# p_6->fld[4].rtint, D.24261
	cmpl	$-95, %eax	#, D.24261
	jne	.L38	#,
.L37:
	.loc 1 674 0
	movq	-216(%rbp), %rax	# loop, tmp719
	movq	-152(%rbp), %rdx	# p, tmp720
	movq	%rdx, 216(%rax)	# tmp720, loop_64(D)->scan_start
	.loc 1 680 0
	movq	-216(%rbp), %rax	# loop, tmp721
	movq	200(%rax), %rax	# loop_64(D)->end, D.24263
	movq	24(%rax), %rax	# _85->fld[2].rtx, D.24263
	testq	%rax, %rax	# D.24263
	je	.L39	#,
	.loc 1 681 0
	movq	-216(%rbp), %rax	# loop, tmp722
	movq	200(%rax), %rax	# loop_64(D)->end, D.24263
	movq	24(%rax), %rdx	# _87->fld[2].rtx, D.24263
	movq	-216(%rbp), %rax	# loop, tmp723
	movq	%rdx, 224(%rax)	# D.24263, loop_64(D)->sink
	jmp	.L40	#
.L39:
	.loc 1 683 0
	movq	-216(%rbp), %rax	# loop, tmp724
	movq	200(%rax), %rax	# loop_64(D)->end, D.24263
	movq	%rax, %rsi	# D.24263,
	movl	$-99, %edi	#,
	call	emit_note_after	#
	movq	-216(%rbp), %rdx	# loop, tmp725
	movq	%rax, 224(%rdx)	# D.24263, loop_64(D)->sink
.L40:
	.loc 1 686 0
	movq	-216(%rbp), %rax	# loop, tmp726
	movq	%rax, %rdi	# tmp726,
	call	prescan_loop	#
	.loc 1 687 0
	movq	-120(%rbp), %rax	# loop_info, tmp727
	movl	(%rax), %eax	# loop_info_65->has_call, D.24261
	testl	%eax, %eax	# D.24261
	je	.L41	#,
	.loc 1 687 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.35
	jmp	.L42	#
.L41:
	.loc 1 687 0 discriminator 2
	movl	$2, %eax	#, iftmp.35
.L42:
	.loc 1 687 0 discriminator 3
	movl	n_non_fixed_regs(%rip), %edx	# n_non_fixed_regs, n_non_fixed_regs.36
	addl	$1, %edx	#, D.24261
	imull	%edx, %eax	# D.24261, tmp728
	movl	%eax, -172(%rbp)	# tmp728, threshold
	.loc 1 694 0 is_stmt 1 discriminator 3
	movq	-152(%rbp), %rax	# p, tmp729
	movzwl	(%rax), %eax	# p_6->code, D.24260
	cmpw	$33, %ax	#, D.24260
	jne	.L43	#,
	.loc 1 696 0
	movq	-152(%rbp), %rax	# p, tmp730
	movq	%rax, -88(%rbp)	# tmp730, loop_entry_jump
	.loc 1 699 0
	movq	-152(%rbp), %rax	# p, tmp731
	movq	%rax, %rdi	# tmp731,
	call	any_uncondjump_p	#
	testl	%eax, %eax	# D.24261
	je	.L43	#,
	.loc 1 700 0
	movq	-152(%rbp), %rax	# p, tmp732
	movq	64(%rax), %rax	# p_6->fld[7].rtx, D.24263
	testq	%rax, %rax	# D.24263
	je	.L43	#,
	.loc 1 707 0
	movq	-152(%rbp), %rax	# p, tmp733
	movq	64(%rax), %rax	# p_6->fld[7].rtx, D.24263
	movl	8(%rax), %edx	# _101->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.37
	cmpl	%eax, %edx	# max_uid_for_loop.37, D.24261
	jge	.L43	#,
	.loc 1 707 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp734
	movq	64(%rax), %rax	# p_6->fld[7].rtx, D.24263
	movl	8(%rax), %edx	# _104->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.39
	cmpl	%eax, %edx	# max_uid_for_loop.39, D.24261
	jge	.L44	#,
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.40
	movq	-152(%rbp), %rax	# p, tmp735
	movq	64(%rax), %rax	# p_6->fld[7].rtx, D.24263
	movl	8(%rax), %eax	# _108->fld[0].rtint, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rdx, %rax	# uid_luid.40, D.24265
	movl	(%rax), %edx	# *_112, iftmp.38
	movq	-104(%rbp), %rax	# loop_start, tmp736
	movl	8(%rax), %ecx	# loop_start_68->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.42
	cmpl	%eax, %ecx	# max_uid_for_loop.42, D.24261
	jge	.L46	#,
	jmp	.L205	#
.L44:
	.loc 1 707 0 discriminator 2
	movl	$__FUNCTION__.12611, %edx	#,
	movl	$707, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L205:
	.loc 1 707 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.43
	movq	-104(%rbp), %rax	# loop_start, tmp737
	movl	8(%rax), %eax	# loop_start_68->fld[0].rtint, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rcx, %rax	# uid_luid.43, D.24265
	movl	(%rax), %eax	# *_120, iftmp.41
	cmpl	%eax, %edx	# iftmp.41, iftmp.38
	jl	.L43	#,
	jmp	.L206	#
.L46:
	.loc 1 707 0 discriminator 2
	movl	$__FUNCTION__.12611, %edx	#,
	movl	$707, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L206:
	.loc 1 707 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp738
	movq	64(%rax), %rax	# p_6->fld[7].rtx, D.24263
	movl	8(%rax), %edx	# _122->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.45
	cmpl	%eax, %edx	# max_uid_for_loop.45, D.24261
	jge	.L48	#,
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.46
	movq	-152(%rbp), %rax	# p, tmp739
	movq	64(%rax), %rax	# p_6->fld[7].rtx, D.24263
	movl	8(%rax), %eax	# _126->fld[0].rtint, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rdx, %rax	# uid_luid.46, D.24265
	movl	(%rax), %edx	# *_130, iftmp.44
	movq	-96(%rbp), %rax	# loop_end, tmp740
	movl	8(%rax), %ecx	# loop_end_69->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.48
	cmpl	%eax, %ecx	# max_uid_for_loop.48, D.24261
	jge	.L50	#,
	jmp	.L207	#
.L48:
	.loc 1 707 0 discriminator 2
	movl	$__FUNCTION__.12611, %edx	#,
	movl	$707, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L207:
	.loc 1 707 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.49
	movq	-96(%rbp), %rax	# loop_end, tmp741
	movl	8(%rax), %eax	# loop_end_69->fld[0].rtint, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rcx, %rax	# uid_luid.49, D.24265
	movl	(%rax), %eax	# *_138, iftmp.47
	cmpl	%eax, %edx	# iftmp.47, iftmp.44
	jg	.L43	#,
	jmp	.L208	#
.L50:
	.loc 1 707 0 discriminator 2
	movl	$__FUNCTION__.12611, %edx	#,
	movl	$707, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L208:
	.loc 1 709 0 is_stmt 1
	movq	-216(%rbp), %rax	# loop, tmp742
	movq	216(%rax), %rax	# loop_64(D)->scan_start, D.24263
	movq	%rax, %rdi	# D.24263,
	call	next_label	#
	movq	-216(%rbp), %rdx	# loop, tmp743
	movq	%rax, 208(%rdx)	# D.24263, loop_64(D)->top
	.loc 1 710 0
	movq	-152(%rbp), %rax	# p, tmp744
	movq	64(%rax), %rdx	# p_6->fld[7].rtx, D.24263
	movq	-216(%rbp), %rax	# loop, tmp745
	movq	%rdx, 216(%rax)	# D.24263, loop_64(D)->scan_start
.L43:
	.loc 1 722 0
	movq	-216(%rbp), %rax	# loop, tmp746
	movq	216(%rax), %rax	# loop_64(D)->scan_start, D.24263
	movl	8(%rax), %edx	# _143->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.50
	cmpl	%eax, %edx	# max_uid_for_loop.50, D.24261
	jge	.L52	#,
	.loc 1 723 0
	movq	-216(%rbp), %rax	# loop, tmp747
	movq	216(%rax), %rax	# loop_64(D)->scan_start, D.24263
	movzwl	(%rax), %eax	# _146->code, D.24260
	cmpw	$36, %ax	#, D.24260
	je	.L53	#,
.L52:
	.loc 1 725 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.51
	testq	%rax, %rax	# loop_dump_stream.51
	je	.L54	#,
	.loc 1 726 0
	movq	-96(%rbp), %rax	# loop_end, tmp748
	movl	8(%rax), %ecx	# loop_end_69->fld[0].rtint, D.24261
	movq	-104(%rbp), %rax	# loop_start, tmp749
	movl	8(%rax), %edx	# loop_start_68->fld[0].rtint, D.24261
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.52
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.52,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 728 0
	jmp	.L35	#
.L54:
	jmp	.L35	#
.L53:
	.loc 1 734 0
	movq	-120(%rbp), %rax	# loop_info, tmp750
	movl	136(%rax), %eax	# loop_info_65->mems_idx, D.24261
	leal	16(%rax), %edx	#, D.24261
	movq	-216(%rbp), %rax	# loop, tmp751
	movl	%edx, %esi	# D.24261,
	movq	%rax, %rdi	# tmp751,
	call	loop_regs_scan	#
	.loc 1 735 0
	movq	-216(%rbp), %rax	# loop, tmp752
	movq	%rax, %rdi	# tmp752,
	call	count_insns_in_loop	#
	movl	%eax, -168(%rbp)	# tmp753, insn_count
	.loc 1 737 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.53
	testq	%rax, %rax	# loop_dump_stream.53
	je	.L56	#,
	.loc 1 739 0
	movq	-96(%rbp), %rax	# loop_end, tmp754
	movl	8(%rax), %ecx	# loop_end_69->fld[0].rtint, D.24261
	movq	-104(%rbp), %rax	# loop_start, tmp755
	movl	8(%rax), %edx	# loop_start_68->fld[0].rtint, D.24261
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.54
	movl	-168(%rbp), %esi	# insn_count, tmp756
	movl	%esi, %r8d	# tmp756,
	movl	$.LC2, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.54,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 741 0
	movq	-216(%rbp), %rax	# loop, tmp757
	movq	176(%rax), %rax	# loop_64(D)->cont, D.24263
	testq	%rax, %rax	# D.24263
	je	.L56	#,
	.loc 1 743 0
	movq	-216(%rbp), %rax	# loop, tmp758
	movq	176(%rax), %rax	# loop_64(D)->cont, D.24263
	.loc 1 742 0
	movl	8(%rax), %edx	# _156->fld[0].rtint, D.24261
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.55
	movl	$.LC3, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.55,
	movl	$0, %eax	#,
	call	fprintf	#
.L56:
	.loc 1 759 0
	movq	-216(%rbp), %rax	# loop, tmp759
	movq	216(%rax), %rdx	# loop_64(D)->scan_start, D.24263
	movq	-216(%rbp), %rax	# loop, tmp760
	movq	%rdx, %rsi	# D.24263,
	movq	%rax, %rdi	# tmp760,
	call	next_insn_in_loop	#
	movq	%rax, -152(%rbp)	# tmp761, p
	jmp	.L57	#
.L191:
	.loc 1 763 0
	movq	-152(%rbp), %rax	# p, tmp762
	movzwl	(%rax), %eax	# p_10->code, D.24260
	cmpw	$32, %ax	#, D.24260
	jne	.L58	#,
	.loc 1 764 0
	movq	-152(%rbp), %rax	# p, tmp763
	movzwl	(%rax), %eax	# p_10->code, D.24260
	movzwl	%ax, %eax	# D.24260, D.24261
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24262
	cmpb	$105, %al	#, D.24262
	jne	.L59	#,
	.loc 1 764 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp765
	movq	32(%rax), %rax	# p_10->fld[3].rtx, D.24263
	movzwl	(%rax), %eax	# _165->code, D.24260
	cmpw	$47, %ax	#, D.24260
	jne	.L60	#,
	.loc 1 764 0 discriminator 3
	movq	-152(%rbp), %rax	# p, tmp766
	movq	32(%rax), %rax	# p_10->fld[3].rtx, iftmp.57
	jmp	.L62	#
.L60:
	.loc 1 764 0 discriminator 4
	movq	-152(%rbp), %rax	# p, tmp767
	movq	32(%rax), %rdx	# p_10->fld[3].rtx, D.24263
	movq	-152(%rbp), %rax	# p, tmp768
	movq	%rdx, %rsi	# D.24263,
	movq	%rax, %rdi	# tmp768,
	call	single_set_2	#
	jmp	.L62	#
.L59:
	.loc 1 764 0 discriminator 2
	movl	$0, %eax	#, iftmp.56
.L62:
	.loc 1 764 0 discriminator 5
	movq	%rax, -72(%rbp)	# iftmp.56, set
	cmpq	$0, -72(%rbp)	#, set
	je	.L58	#,
	.loc 1 765 0 is_stmt 1
	movq	-72(%rbp), %rax	# set, tmp769
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _173->code, D.24260
	cmpw	$61, %ax	#, D.24260
	jne	.L58	#,
	.loc 1 769 0
	movq	-112(%rbp), %rax	# regs, tmp770
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movq	-72(%rbp), %rax	# set, tmp771
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movl	8(%rax), %eax	# _176->fld[0].rtuint, D.24267
	movl	%eax, %edx	# D.24267, D.24264
	movq	%rdx, %rax	# D.24264, tmp772
	addq	%rax, %rax	# tmp772
	addq	%rdx, %rax	# D.24264, tmp772
	salq	$3, %rax	#, tmp773
	addq	%rcx, %rax	# D.24266, D.24266
	movzbl	16(%rax), %eax	# _180->may_not_optimize, D.24262
	testb	%al, %al	# D.24262
	jne	.L58	#,
.LBB3:
	.loc 1 771 0
	movl	$0, -184(%rbp)	#, tem1
	.loc 1 772 0
	movl	$0, -180(%rbp)	#, tem2
	.loc 1 773 0
	movl	$0, -176(%rbp)	#, move_insn
	.loc 1 774 0
	movq	-72(%rbp), %rax	# set, tmp774
	movq	16(%rax), %rax	# set_172->fld[1].rtx, tmp775
	movq	%rax, -136(%rbp)	# tmp775, src
	.loc 1 775 0
	movq	$0, -128(%rbp)	#, dependencies
	.loc 1 785 0
	movq	-152(%rbp), %rax	# p, tmp776
	movl	$0, %edx	#,
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp776,
	call	find_reg_note	#
	movq	%rax, -64(%rbp)	# tmp777, temp
	.loc 1 786 0
	cmpq	$0, -64(%rbp)	#, temp
	je	.L63	#,
	.loc 1 787 0
	movq	-64(%rbp), %rax	# temp, tmp778
	movq	8(%rax), %rax	# temp_187->fld[0].rtx, tmp779
	movq	%rax, -136(%rbp)	# tmp779, src
	movl	$1, -176(%rbp)	#, move_insn
	jmp	.L64	#
.L63:
	.loc 1 790 0
	movq	-152(%rbp), %rax	# p, tmp780
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp780,
	call	find_reg_note	#
	movq	%rax, -64(%rbp)	# tmp781, temp
	.loc 1 791 0
	cmpq	$0, -64(%rbp)	#, temp
	je	.L65	#,
	.loc 1 791 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# temp, tmp782
	movq	8(%rax), %rax	# temp_190->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _191->code, D.24260
	cmpw	$67, %ax	#, D.24260
	je	.L66	#,
	movq	-64(%rbp), %rax	# temp, tmp783
	movq	8(%rax), %rax	# temp_190->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _193->code, D.24260
	cmpw	$68, %ax	#, D.24260
	je	.L66	#,
	movq	-64(%rbp), %rax	# temp, tmp784
	movq	8(%rax), %rax	# temp_190->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _195->code, D.24260
	cmpw	$54, %ax	#, D.24260
	je	.L66	#,
	movq	-64(%rbp), %rax	# temp, tmp785
	movq	8(%rax), %rax	# temp_190->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _197->code, D.24260
	cmpw	$55, %ax	#, D.24260
	je	.L66	#,
	movq	-64(%rbp), %rax	# temp, tmp786
	movq	8(%rax), %rax	# temp_190->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _199->code, D.24260
	cmpw	$58, %ax	#, D.24260
	je	.L66	#,
	movq	-64(%rbp), %rax	# temp, tmp787
	movq	8(%rax), %rax	# temp_190->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _201->code, D.24260
	cmpw	$134, %ax	#, D.24260
	je	.L66	#,
	movq	-64(%rbp), %rax	# temp, tmp788
	movq	8(%rax), %rax	# temp_190->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _203->code, D.24260
	cmpw	$56, %ax	#, D.24260
	je	.L66	#,
	movq	-64(%rbp), %rax	# temp, tmp789
	movq	8(%rax), %rax	# temp_190->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _205->code, D.24260
	cmpw	$140, %ax	#, D.24260
	jne	.L65	#,
.L66:
	.loc 1 792 0 is_stmt 1
	movq	-64(%rbp), %rax	# temp, tmp790
	movq	8(%rax), %rax	# temp_190->fld[0].rtx, tmp791
	movq	%rax, -136(%rbp)	# tmp791, src
	movl	$1, -176(%rbp)	#, move_insn
.L65:
	.loc 1 793 0
	cmpq	$0, -64(%rbp)	#, temp
	je	.L64	#,
	.loc 1 793 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp792
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp792,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24263
	je	.L64	#,
	.loc 1 795 0 is_stmt 1
	movq	-64(%rbp), %rax	# temp, tmp793
	movq	8(%rax), %rax	# temp_190->fld[0].rtx, tmp794
	movq	%rax, -136(%rbp)	# tmp794, src
	.loc 1 799 0
	movq	-136(%rbp), %rdx	# src, tmp795
	movq	-152(%rbp), %rax	# p, tmp796
	movq	%rdx, %rsi	# tmp795,
	movq	%rax, %rdi	# tmp796,
	call	libcall_other_reg	#
	movq	%rax, -128(%rbp)	# tmp797, dependencies
.L64:
	.loc 1 805 0
	movq	-152(%rbp), %rax	# p, tmp798
	movq	32(%rax), %rax	# p_10->fld[3].rtx, D.24263
	movzwl	(%rax), %eax	# _212->code, D.24260
	cmpw	$39, %ax	#, D.24260
	jne	.L67	#,
	.loc 1 807 0
	movl	$0, -200(%rbp)	#, i
	jmp	.L68	#
.L70:
.LBB4:
	.loc 1 809 0
	movq	-152(%rbp), %rax	# p, tmp799
	movq	32(%rax), %rax	# p_10->fld[3].rtx, D.24263
	movq	8(%rax), %rax	# _218->fld[0].rtvec, D.24268
	movl	-200(%rbp), %edx	# i, tmp801
	movslq	%edx, %rdx	# tmp801, tmp800
	movq	8(%rax,%rdx,8), %rax	# _219->elem, tmp802
	movq	%rax, -56(%rbp)	# tmp802, x
	.loc 1 810 0
	movq	-56(%rbp), %rax	# x, tmp803
	movzwl	(%rax), %eax	# x_220->code, D.24260
	cmpw	$48, %ax	#, D.24260
	jne	.L69	#,
	.loc 1 811 0
	movq	-56(%rbp), %rax	# x, tmp804
	movq	8(%rax), %rax	# x_220->fld[0].rtx, D.24263
	movq	-128(%rbp), %rdx	# dependencies, tmp805
	movq	%rdx, %rcx	# tmp805,
	movq	%rax, %rdx	# D.24263,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -128(%rbp)	# tmp806, dependencies
.L69:
.LBE4:
	.loc 1 807 0
	addl	$1, -200(%rbp)	#, i
.L68:
	.loc 1 807 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp807
	movq	32(%rax), %rax	# p_10->fld[3].rtx, D.24263
	movq	8(%rax), %rax	# _215->fld[0].rtvec, D.24268
	movl	(%rax), %eax	# _216->num_elem, D.24261
	cmpl	-200(%rbp), %eax	# i, D.24261
	jg	.L70	#,
.L67:
	.loc 1 818 0 is_stmt 1
	movq	-72(%rbp), %rax	# set, tmp808
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movl	8(%rax), %edx	# _225->fld[0].rtuint, D.24267
	movl	max_reg_before_loop(%rip), %eax	# max_reg_before_loop, max_reg_before_loop.58
	cmpl	%eax, %edx	# max_reg_before_loop.58, D.24267
	jae	.L71	#,
	.loc 1 824 0
	movq	-72(%rbp), %rax	# set, tmp809
	movq	8(%rax), %rdx	# set_172->fld[0].rtx, D.24263
	movq	-152(%rbp), %rax	# p, tmp810
	movq	%rdx, %rsi	# D.24263,
	movq	%rax, %rdi	# tmp810,
	call	reg_in_basic_block_p	#
	.loc 1 820 0
	testl	%eax, %eax	# D.24261
	jne	.L72	#,
	.loc 1 834 0
	cmpl	$0, -196(%rbp)	#, maybe_never
	jne	.L73	#,
	.loc 1 835 0
	movq	-152(%rbp), %rdx	# p, tmp811
	movq	-72(%rbp), %rcx	# set, tmp812
	movq	-216(%rbp), %rax	# loop, tmp813
	movq	%rcx, %rsi	# tmp812,
	movq	%rax, %rdi	# tmp813,
	call	loop_reg_used_before_p	#
	testl	%eax, %eax	# D.24261
	je	.L72	#,
.L73:
	.loc 1 820 0
	jmp	.L71	#
.L72:
	.loc 1 842 0
	movq	-136(%rbp), %rdx	# src, tmp814
	movq	-216(%rbp), %rax	# loop, tmp815
	movq	%rdx, %rsi	# tmp814,
	movq	%rax, %rdi	# tmp815,
	call	loop_invariant_p	#
	movl	%eax, -164(%rbp)	# tmp816, tem
	cmpl	$0, -164(%rbp)	#, tem
	je	.L74	#,
	.loc 1 843 0
	cmpq	$0, -128(%rbp)	#, dependencies
	je	.L75	#,
	.loc 1 844 0
	movq	-128(%rbp), %rdx	# dependencies, tmp817
	movq	-216(%rbp), %rax	# loop, tmp818
	movq	%rdx, %rsi	# tmp817,
	movq	%rax, %rdi	# tmp818,
	call	loop_invariant_p	#
	movl	%eax, -180(%rbp)	# tmp819, tem2
	cmpl	$0, -180(%rbp)	#, tem2
	je	.L74	#,
.L75:
	.loc 1 845 0
	movq	-112(%rbp), %rax	# regs, tmp820
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movq	-72(%rbp), %rax	# set, tmp821
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movl	8(%rax), %eax	# _234->fld[0].rtuint, D.24267
	movl	%eax, %edx	# D.24267, D.24264
	movq	%rdx, %rax	# D.24264, tmp822
	addq	%rax, %rax	# tmp822
	addq	%rdx, %rax	# D.24264, tmp822
	salq	$3, %rax	#, tmp823
	addq	%rcx, %rax	# D.24266, D.24266
	movl	(%rax), %eax	# _238->set_in_loop, D.24261
	cmpl	$1, %eax	#, D.24261
	je	.L76	#,
	.loc 1 849 0
	movq	-112(%rbp), %rax	# regs, tmp824
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movq	-72(%rbp), %rax	# set, tmp825
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movl	8(%rax), %eax	# _241->fld[0].rtuint, D.24267
	movl	%eax, %edx	# D.24267, D.24264
	movq	%rdx, %rax	# D.24264, tmp826
	addq	%rax, %rax	# tmp826
	addq	%rdx, %rax	# D.24264, tmp826
	salq	$3, %rax	#, tmp827
	addq	%rcx, %rax	# D.24266, D.24266
	.loc 1 848 0
	movl	(%rax), %edx	# _245->set_in_loop, D.24261
	movq	-72(%rbp), %rax	# set, tmp828
	movq	8(%rax), %rsi	# set_172->fld[0].rtx, D.24263
	.loc 1 846 0
	movq	-152(%rbp), %rcx	# p, tmp829
	movq	-216(%rbp), %rax	# loop, tmp830
	movq	%rax, %rdi	# tmp830,
	call	consec_sets_invariant_p	#
	movl	%eax, -184(%rbp)	# tmp831, tem1
	cmpl	$0, -184(%rbp)	#, tem1
	je	.L74	#,
.L76:
	.loc 1 856 0
	cmpl	$0, -196(%rbp)	#, maybe_never
	jne	.L77	#,
	.loc 1 856 0 is_stmt 0 discriminator 1
	cmpl	$0, -192(%rbp)	#, call_passed
	je	.L78	#,
.L77:
	.loc 1 857 0 is_stmt 1 discriminator 2
	movq	-136(%rbp), %rax	# src, tmp832
	movq	%rax, %rdi	# tmp832,
	call	may_trap_p	#
	.loc 1 856 0 discriminator 2
	testl	%eax, %eax	# D.24261
	jne	.L74	#,
.L78:
.LBB5:
	.loc 1 860 0
	movq	-72(%rbp), %rax	# set, tmp833
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movl	8(%rax), %eax	# _250->fld[0].rtuint, D.24267
	movl	%eax, -160(%rbp)	# D.24267, regno
	.loc 1 876 0
	movq	-120(%rbp), %rax	# loop_info, tmp834
	movl	(%rax), %eax	# loop_info_65->has_call, D.24261
	testl	%eax, %eax	# D.24261
	je	.L79	#,
	.loc 1 877 0
	movq	-112(%rbp), %rax	# regs, tmp835
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-160(%rbp), %eax	# regno, tmp836
	movslq	%eax, %rdx	# tmp836, D.24264
	movq	%rdx, %rax	# D.24264, tmp837
	addq	%rax, %rax	# tmp837
	addq	%rdx, %rax	# D.24264, tmp837
	salq	$3, %rax	#, tmp838
	addq	%rcx, %rax	# D.24266, D.24266
	movq	8(%rax), %rax	# _257->single_usage, D.24263
	testq	%rax, %rax	# D.24263
	je	.L79	#,
	.loc 1 878 0
	movq	-112(%rbp), %rax	# regs, tmp839
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-160(%rbp), %eax	# regno, tmp840
	movslq	%eax, %rdx	# tmp840, D.24264
	movq	%rdx, %rax	# D.24264, tmp841
	addq	%rax, %rax	# tmp841
	addq	%rdx, %rax	# D.24264, tmp841
	salq	$3, %rax	#, tmp842
	addq	%rcx, %rax	# D.24266, D.24266
	movq	8(%rax), %rdx	# _262->single_usage, D.24263
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24263
	cmpq	%rax, %rdx	# D.24263, D.24263
	je	.L79	#,
	.loc 1 879 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.59
	movl	-160(%rbp), %edx	# regno, tmp844
	movslq	%edx, %rdx	# tmp844, tmp843
	addq	$4, %rdx	#, tmp845
	movq	(%rax,%rdx,8), %rax	# reg_n_info.59_265->data.reg, D.24269
	movl	(%rax), %edx	# _266->first_uid, D.24261
	movq	-152(%rbp), %rax	# p, tmp846
	movl	8(%rax), %eax	# p_10->fld[0].rtint, D.24261
	cmpl	%eax, %edx	# D.24261, D.24261
	jne	.L79	#,
	.loc 1 880 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.60
	movl	-160(%rbp), %edx	# regno, tmp848
	movslq	%edx, %rdx	# tmp848, tmp847
	addq	$4, %rdx	#, tmp849
	movq	(%rax,%rdx,8), %rax	# reg_n_info.60_269->data.reg, D.24269
	movl	4(%rax), %ecx	# _270->last_uid, D.24261
	.loc 1 881 0
	movq	-112(%rbp), %rax	# regs, tmp850
	movq	8(%rax), %rsi	# regs_67->array, D.24266
	movl	-160(%rbp), %eax	# regno, tmp851
	movslq	%eax, %rdx	# tmp851, D.24264
	movq	%rdx, %rax	# D.24264, tmp852
	addq	%rax, %rax	# tmp852
	addq	%rdx, %rax	# D.24264, tmp852
	salq	$3, %rax	#, tmp853
	addq	%rsi, %rax	# D.24266, D.24266
	movq	8(%rax), %rax	# _275->single_usage, D.24263
	movl	8(%rax), %eax	# _276->fld[0].rtint, D.24261
	.loc 1 880 0
	cmpl	%eax, %ecx	# D.24261, D.24261
	jne	.L79	#,
	.loc 1 882 0
	movq	-112(%rbp), %rax	# regs, tmp854
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-160(%rbp), %eax	# regno, tmp855
	movslq	%eax, %rdx	# tmp855, D.24264
	movq	%rdx, %rax	# D.24264, tmp856
	addq	%rax, %rax	# tmp856
	addq	%rdx, %rax	# D.24264, tmp856
	salq	$3, %rax	#, tmp857
	addq	%rcx, %rax	# D.24266, D.24266
	movl	(%rax), %eax	# _281->set_in_loop, D.24261
	cmpl	$1, %eax	#, D.24261
	jne	.L79	#,
	.loc 1 883 0
	movq	-72(%rbp), %rax	# set, tmp858
	movq	16(%rax), %rax	# set_172->fld[1].rtx, D.24263
	movzwl	(%rax), %eax	# _283->code, D.24260
	cmpw	$41, %ax	#, D.24260
	je	.L79	#,
	.loc 1 884 0
	movq	-72(%rbp), %rax	# set, tmp859
	movq	16(%rax), %rax	# set_172->fld[1].rtx, D.24263
	movq	%rax, %rdi	# D.24263,
	call	side_effects_p	#
	testl	%eax, %eax	# D.24261
	jne	.L79	#,
	.loc 1 885 0
	movq	-152(%rbp), %rax	# p, tmp860
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp860,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24263
	jne	.L79	#,
	.loc 1 887 0
	movq	-72(%rbp), %rax	# set, tmp861
	movq	16(%rax), %rax	# set_172->fld[1].rtx, D.24263
	movzwl	(%rax), %eax	# _288->code, D.24260
	.loc 1 886 0
	cmpw	$61, %ax	#, D.24260
	jne	.L80	#,
	.loc 1 888 0
	movq	-72(%rbp), %rax	# set, tmp862
	movq	16(%rax), %rax	# set_172->fld[1].rtx, D.24263
	movl	8(%rax), %eax	# _290->fld[0].rtuint, D.24267
	.loc 1 887 0
	cmpl	$52, %eax	#, D.24267
	jbe	.L79	#,
.L80:
	.loc 1 893 0
	movq	-112(%rbp), %rax	# regs, tmp863
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-160(%rbp), %eax	# regno, tmp864
	movslq	%eax, %rdx	# tmp864, D.24264
	movq	%rdx, %rax	# D.24264, tmp865
	addq	%rax, %rax	# tmp865
	addq	%rdx, %rax	# D.24264, tmp865
	salq	$3, %rax	#, tmp866
	addq	%rcx, %rax	# D.24266, D.24266
	.loc 1 892 0
	movq	8(%rax), %rdx	# _295->single_usage, D.24263
	movq	-72(%rbp), %rax	# set, tmp867
	movq	16(%rax), %rax	# set_172->fld[1].rtx, D.24263
	movq	-152(%rbp), %rcx	# p, tmp868
	movq	%rcx, %rsi	# tmp868,
	movq	%rax, %rdi	# D.24263,
	call	modified_between_p	#
	testl	%eax, %eax	# D.24261
	jne	.L79	#,
	.loc 1 894 0
	movq	-112(%rbp), %rax	# regs, tmp869
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-160(%rbp), %eax	# regno, tmp870
	movslq	%eax, %rdx	# tmp870, D.24264
	movq	%rdx, %rax	# D.24264, tmp871
	addq	%rax, %rax	# tmp871
	addq	%rdx, %rax	# D.24264, tmp871
	salq	$3, %rax	#, tmp872
	addq	%rcx, %rax	# D.24266, D.24266
	movq	8(%rax), %rdx	# _302->single_usage, D.24263
	movq	-152(%rbp), %rax	# p, tmp873
	movq	%rdx, %rsi	# D.24263,
	movq	%rax, %rdi	# tmp873,
	call	no_labels_between_p	#
	testl	%eax, %eax	# D.24261
	je	.L79	#,
	.loc 1 896 0
	movq	-112(%rbp), %rax	# regs, tmp874
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-160(%rbp), %eax	# regno, tmp875
	movslq	%eax, %rdx	# tmp875, D.24264
	movq	%rdx, %rax	# D.24264, tmp876
	addq	%rax, %rax	# tmp876
	addq	%rdx, %rax	# D.24264, tmp876
	salq	$3, %rax	#, tmp877
	addq	%rcx, %rax	# D.24266, D.24266
	.loc 1 895 0
	movq	8(%rax), %rdx	# _308->single_usage, D.24263
	movq	-72(%rbp), %rax	# set, tmp878
	movq	16(%rax), %rcx	# set_172->fld[1].rtx, D.24263
	movq	-72(%rbp), %rax	# set, tmp879
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movq	%rcx, %rsi	# D.24263,
	movq	%rax, %rdi	# D.24263,
	call	validate_replace_rtx	#
	testl	%eax, %eax	# D.24261
	je	.L79	#,
	.loc 1 901 0
	movq	-112(%rbp), %rax	# regs, tmp880
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-160(%rbp), %eax	# regno, tmp881
	movslq	%eax, %rdx	# tmp881, D.24264
	movq	%rdx, %rax	# D.24264, tmp882
	addq	%rax, %rax	# tmp882
	addq	%rdx, %rax	# D.24264, tmp882
	salq	$3, %rax	#, tmp883
	addq	%rcx, %rax	# D.24266, D.24266
	movq	8(%rax), %rbx	# _316->single_usage, D.24263
	.loc 1 902 0
	movq	-72(%rbp), %rax	# set, tmp884
	movq	16(%rax), %rax	# set_172->fld[1].rtx, D.24263
	movq	%rax, %rdi	# D.24263,
	call	copy_rtx	#
	movq	%rax, %rsi	#, D.24263
	movq	-72(%rbp), %rax	# set, tmp885
	movq	8(%rax), %rcx	# set_172->fld[0].rtx, D.24263
	movq	-112(%rbp), %rax	# regs, tmp886
	movq	8(%rax), %rdi	# regs_67->array, D.24266
	movl	-160(%rbp), %eax	# regno, tmp887
	movslq	%eax, %rdx	# tmp887, D.24264
	movq	%rdx, %rax	# D.24264, tmp888
	addq	%rax, %rax	# tmp888
	addq	%rdx, %rax	# D.24264, tmp888
	salq	$3, %rax	#, tmp889
	addq	%rdi, %rax	# D.24266, D.24266
	movq	8(%rax), %rax	# _324->single_usage, D.24263
	movq	56(%rax), %rax	# _325->fld[6].rtx, D.24263
	movq	%rsi, %rdx	# D.24263,
	movq	%rcx, %rsi	# D.24263,
	movq	%rax, %rdi	# D.24263,
	call	replace_rtx	#
	movq	%rax, 56(%rbx)	# D.24263, _317->fld[6].rtx
	.loc 1 905 0
	movq	-152(%rbp), %rax	# p, tmp890
	movq	%rax, %rdi	# tmp890,
	call	delete_insn	#
	.loc 1 906 0
	movl	$0, -200(%rbp)	#, i
	jmp	.L81	#
.L105:
	.loc 1 907 0 discriminator 2
	movq	-112(%rbp), %rax	# regs, tmp891
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-200(%rbp), %eax	# i, tmp892
	movl	-160(%rbp), %edx	# regno, tmp893
	addl	%edx, %eax	# tmp893, D.24261
	movslq	%eax, %rdx	# D.24261, D.24264
	movq	%rdx, %rax	# D.24264, tmp894
	addq	%rax, %rax	# tmp894
	addq	%rdx, %rax	# D.24264, tmp894
	salq	$3, %rax	#, tmp895
	addq	%rcx, %rax	# D.24266, D.24266
	movl	$0, (%rax)	#, _378->set_in_loop
	.loc 1 906 0 discriminator 2
	addl	$1, -200(%rbp)	#, i
.L81:
	.loc 1 906 0 is_stmt 0 discriminator 1
	cmpl	$52, -160(%rbp)	#, regno
	jg	.L82	#,
	cmpl	$7, -160(%rbp)	#, regno
	jle	.L83	#,
	cmpl	$15, -160(%rbp)	#, regno
	jle	.L84	#,
.L83:
	.loc 1 906 0 discriminator 2
	cmpl	$20, -160(%rbp)	#, regno
	jle	.L85	#,
	.loc 1 906 0 discriminator 1
	cmpl	$28, -160(%rbp)	#, regno
	jle	.L84	#,
.L85:
	.loc 1 906 0 discriminator 2
	cmpl	$44, -160(%rbp)	#, regno
	jle	.L86	#,
	.loc 1 906 0 discriminator 1
	cmpl	$52, -160(%rbp)	#, regno
	jle	.L84	#,
.L86:
	.loc 1 906 0 discriminator 2
	cmpl	$28, -160(%rbp)	#, regno
	jle	.L87	#,
	.loc 1 906 0 discriminator 1
	cmpl	$36, -160(%rbp)	#, regno
	jg	.L87	#,
.L84:
	movq	-72(%rbp), %rax	# set, tmp896
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _361->mode, D.24270
	movzbl	%al, %eax	# D.24270, D.24261
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24271
	cmpl	$5, %eax	#, D.24271
	je	.L88	#,
	.loc 1 906 0 discriminator 2
	movq	-72(%rbp), %rax	# set, tmp898
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _365->mode, D.24270
	movzbl	%al, %eax	# D.24270, D.24261
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24271
	cmpl	$6, %eax	#, D.24271
	jne	.L89	#,
.L88:
	.loc 1 906 0 discriminator 1
	movl	$2, %eax	#, iftmp.63
	jmp	.L90	#
.L89:
	movl	$1, %eax	#, iftmp.63
.L90:
	.loc 1 906 0 discriminator 3
	jmp	.L91	#
.L87:
	.loc 1 906 0 discriminator 2
	movq	-72(%rbp), %rax	# set, tmp900
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _329->mode, D.24270
	cmpb	$18, %al	#, D.24270
	jne	.L92	#,
	.loc 1 906 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.66
	andl	$33554432, %eax	#, D.24261
	testl	%eax, %eax	# D.24261
	je	.L93	#,
	movl	$2, %eax	#, iftmp.65
	jmp	.L104	#
.L93:
	.loc 1 906 0 discriminator 2
	movl	$3, %eax	#, iftmp.65
	jmp	.L104	#
.L92:
	movq	-72(%rbp), %rax	# set, tmp901
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _336->mode, D.24270
	cmpb	$24, %al	#, D.24270
	jne	.L96	#,
	.loc 1 906 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.69
	andl	$33554432, %eax	#, D.24261
	testl	%eax, %eax	# D.24261
	je	.L97	#,
	movl	$4, %eax	#, iftmp.68
	jmp	.L104	#
.L97:
	.loc 1 906 0 discriminator 2
	movl	$6, %eax	#, iftmp.68
	jmp	.L104	#
.L96:
	movq	-72(%rbp), %rax	# set, tmp902
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _343->mode, D.24270
	movzbl	%al, %eax	# D.24270, D.24261
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24270
	movzbl	%al, %edx	# D.24270, D.24261
	movl	target_flags(%rip), %eax	# target_flags, target_flags.71
	andl	$33554432, %eax	#, D.24261
	testl	%eax, %eax	# D.24261
	je	.L100	#,
	.loc 1 906 0 discriminator 1
	movl	$8, %eax	#, iftmp.70
	jmp	.L101	#
.L100:
	.loc 1 906 0 discriminator 2
	movl	$4, %eax	#, iftmp.70
.L101:
	.loc 1 906 0 discriminator 3
	addl	%edx, %eax	# D.24261, D.24261
	subl	$1, %eax	#, D.24261
	movl	target_flags(%rip), %edx	# target_flags, target_flags.73
	andl	$33554432, %edx	#, D.24261
	testl	%edx, %edx	# D.24261
	je	.L102	#,
	.loc 1 906 0 discriminator 1
	movl	$8, %ebx	#, iftmp.72
	jmp	.L103	#
.L102:
	.loc 1 906 0 discriminator 2
	movl	$4, %ebx	#, iftmp.72
.L103:
	.loc 1 906 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.72
.L91:
	jmp	.L104	#
.L82:
	.loc 1 906 0 discriminator 2
	movl	$1, %eax	#, iftmp.61
.L104:
	.loc 1 906 0 discriminator 3
	cmpl	-200(%rbp), %eax	# i, iftmp.61
	jg	.L105	#,
	.loc 1 908 0 is_stmt 1
	jmp	.L106	#
.L79:
	.loc 1 911 0
	movl	$80, %edi	#,
	call	xmalloc	#
	movq	%rax, -48(%rbp)	# tmp906, m
	.loc 1 912 0
	movq	-48(%rbp), %rax	# m, tmp907
	movq	$0, 72(%rax)	#, m_380->next
	.loc 1 913 0
	movq	-48(%rbp), %rax	# m, tmp908
	movq	-152(%rbp), %rdx	# p, tmp909
	movq	%rdx, (%rax)	# tmp909, m_380->insn
	.loc 1 914 0
	movq	-48(%rbp), %rax	# m, tmp910
	movq	-136(%rbp), %rdx	# src, tmp911
	movq	%rdx, 8(%rax)	# tmp911, m_380->set_src
	.loc 1 915 0
	movq	-48(%rbp), %rax	# m, tmp912
	movq	-128(%rbp), %rdx	# dependencies, tmp913
	movq	%rdx, 24(%rax)	# tmp913, m_380->dependencies
	.loc 1 916 0
	movq	-72(%rbp), %rax	# set, tmp914
	movq	8(%rax), %rdx	# set_172->fld[0].rtx, D.24263
	movq	-48(%rbp), %rax	# m, tmp915
	movq	%rdx, 16(%rax)	# D.24263, m_380->set_dest
	.loc 1 917 0
	movq	-48(%rbp), %rax	# m, tmp916
	movzbl	44(%rax), %edx	# m_380->force, tmp919
	andl	$-3, %edx	#, tmp920
	movb	%dl, 44(%rax)	# tmp920, m_380->force
	.loc 1 918 0
	movq	-112(%rbp), %rax	# regs, tmp921
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movq	-72(%rbp), %rax	# set, tmp922
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movl	8(%rax), %eax	# _383->fld[0].rtuint, D.24267
	movl	%eax, %edx	# D.24267, D.24264
	movq	%rdx, %rax	# D.24264, tmp923
	addq	%rax, %rax	# tmp923
	addq	%rdx, %rax	# D.24264, tmp923
	salq	$3, %rax	#, tmp924
	addq	%rcx, %rax	# D.24266, D.24266
	movl	(%rax), %eax	# _387->set_in_loop, D.24261
	leal	-1(%rax), %edx	#, D.24261
	movq	-48(%rbp), %rax	# m, tmp925
	movl	%edx, 32(%rax)	# D.24261, m_380->consec
	.loc 1 919 0
	movq	-48(%rbp), %rax	# m, tmp926
	movzbl	44(%rax), %edx	# m_380->done, tmp929
	andl	$-9, %edx	#, tmp930
	movb	%dl, 44(%rax)	# tmp930, m_380->done
	.loc 1 920 0
	movq	-48(%rbp), %rax	# m, tmp931
	movq	$0, 64(%rax)	#, m_380->forces
	.loc 1 921 0
	movq	-48(%rbp), %rax	# m, tmp932
	movzbl	44(%rax), %edx	# m_380->partial, tmp935
	andl	$-17, %edx	#, tmp936
	movb	%dl, 44(%rax)	# tmp936, m_380->partial
	.loc 1 922 0
	movl	-176(%rbp), %eax	# move_insn, tmp937
	andl	$1, %eax	#, D.24272
	movl	%eax, %edx	# D.24272, D.24272
	movq	-48(%rbp), %rax	# m, tmp938
	andl	$1, %edx	#, tmp940
	movl	%edx, %ecx	# tmp940, tmp941
	sall	$5, %ecx	#, tmp941
	movzbl	44(%rax), %edx	# m_380->move_insn, tmp942
	andl	$-33, %edx	#, tmp943
	orl	%ecx, %edx	# tmp941, tmp944
	movb	%dl, 44(%rax)	# tmp944, m_380->move_insn
	.loc 1 923 0
	movq	-48(%rbp), %rax	# m, tmp945
	movzbl	44(%rax), %edx	# m_380->move_insn_first, tmp948
	andl	$-65, %edx	#, tmp949
	movb	%dl, 44(%rax)	# tmp949, m_380->move_insn_first
	.loc 1 924 0
	movq	-152(%rbp), %rax	# p, tmp950
	movl	$0, %edx	#,
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp950,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24263
	setne	%dl	#, D.24273
	movq	-48(%rbp), %rax	# m, tmp951
	movl	%edx, %ecx	# D.24273, tmp953
	sall	$7, %ecx	#, tmp953
	movzbl	44(%rax), %edx	# m_380->is_equiv, tmp954
	andl	$127, %edx	#, tmp955
	orl	%ecx, %edx	# tmp953, tmp956
	movb	%dl, 44(%rax)	# tmp956, m_380->is_equiv
	.loc 1 925 0
	movq	-48(%rbp), %rax	# m, tmp957
	movl	$0, 48(%rax)	#, m_380->savemode
	.loc 1 926 0
	movl	-160(%rbp), %edx	# regno, regno.74
	movq	-48(%rbp), %rax	# m, tmp958
	movl	%edx, 36(%rax)	# regno.74, m_380->regno
	.loc 1 930 0
	movl	-184(%rbp), %eax	# tem1, tmp959
	movl	-164(%rbp), %edx	# tem, tmp960
	orl	%edx, %eax	# tmp960, D.24261
	orl	-180(%rbp), %eax	# tem2, D.24261
	cmpl	$1, %eax	#, D.24261
	setg	%dl	#, D.24273
	movq	-48(%rbp), %rax	# m, tmp961
	movl	%edx, %ecx	# D.24273, tmp963
	andl	$1, %ecx	#, tmp963
	movzbl	44(%rax), %edx	# m_380->cond, tmp964
	andl	$-2, %edx	#, tmp965
	orl	%ecx, %edx	# tmp963, tmp966
	movb	%dl, 44(%rax)	# tmp966, m_380->cond
	.loc 1 931 0
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.76
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.77
	movl	-160(%rbp), %ecx	# regno, tmp968
	movslq	%ecx, %rcx	# tmp968, tmp967
	addq	$4, %rcx	#, tmp969
	movq	(%rax,%rcx,8), %rax	# reg_n_info.77_399->data.reg, D.24269
	movl	4(%rax), %eax	# _400->last_uid, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rdx, %rax	# uid_luid.76, D.24265
	movl	(%rax), %edx	# *_404, D.24261
	movq	-216(%rbp), %rax	# loop, tmp970
	movq	200(%rax), %rax	# loop_64(D)->end, D.24263
	movl	8(%rax), %ecx	# _406->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.79
	cmpl	%eax, %ecx	# max_uid_for_loop.79, D.24261
	jge	.L107	#,
	.loc 1 931 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.80
	movq	-216(%rbp), %rax	# loop, tmp971
	movq	200(%rax), %rax	# loop_64(D)->end, D.24263
	movl	8(%rax), %eax	# _410->fld[0].rtint, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rcx, %rax	# uid_luid.80, D.24265
	movl	(%rax), %eax	# *_414, iftmp.78
	cmpl	%eax, %edx	# iftmp.78, D.24261
	jg	.L109	#,
	jmp	.L209	#
.L107:
	.loc 1 931 0 discriminator 2
	movl	$__FUNCTION__.12611, %edx	#,
	movl	$931, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L209:
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.81
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.82
	movl	-160(%rbp), %ecx	# regno, tmp973
	movslq	%ecx, %rcx	# tmp973, tmp972
	addq	$4, %rcx	#, tmp974
	movq	(%rax,%rcx,8), %rax	# reg_n_info.82_417->data.reg, D.24269
	movl	(%rax), %eax	# _418->first_uid, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rdx, %rax	# uid_luid.81, D.24265
	movl	(%rax), %edx	# *_422, D.24261
	movq	-216(%rbp), %rax	# loop, tmp975
	movq	192(%rax), %rax	# loop_64(D)->start, D.24263
	movl	8(%rax), %ecx	# _424->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.84
	cmpl	%eax, %ecx	# max_uid_for_loop.84, D.24261
	jge	.L110	#,
	.loc 1 931 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.85
	movq	-216(%rbp), %rax	# loop, tmp976
	movq	192(%rax), %rax	# loop_64(D)->start, D.24263
	movl	8(%rax), %eax	# _428->fld[0].rtint, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rcx, %rax	# uid_luid.85, D.24265
	movl	(%rax), %eax	# *_432, iftmp.83
	cmpl	%eax, %edx	# iftmp.83, D.24261
	jge	.L112	#,
	jmp	.L109	#
.L110:
	.loc 1 931 0 discriminator 2
	movl	$__FUNCTION__.12611, %edx	#,
	movl	$931, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L109:
	.loc 1 931 0 discriminator 1
	movl	$1, %eax	#, iftmp.75
	jmp	.L113	#
.L112:
	.loc 1 931 0 discriminator 3
	movl	$0, %eax	#, iftmp.75
.L113:
	.loc 1 931 0 discriminator 4
	andl	$1, %eax	#, D.24272
	movl	%eax, %edx	# D.24272, D.24272
	movq	-48(%rbp), %rax	# m, tmp977
	andl	$1, %edx	#, tmp979
	leal	0(,%rdx,4), %ecx	#, tmp980
	movzbl	44(%rax), %edx	# m_380->global, tmp981
	andl	$-5, %edx	#, tmp982
	orl	%ecx, %edx	# tmp980, tmp983
	movb	%dl, 44(%rax)	# tmp983, m_380->global
	.loc 1 932 0 is_stmt 1 discriminator 4
	movq	-48(%rbp), %rax	# m, tmp984
	movq	$0, 56(%rax)	#, m_380->match
	.loc 1 933 0 discriminator 4
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.86
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.87
	movl	-160(%rbp), %ecx	# regno, tmp986
	movslq	%ecx, %rcx	# tmp986, tmp985
	addq	$4, %rcx	#, tmp987
	movq	(%rax,%rcx,8), %rax	# reg_n_info.87_439->data.reg, D.24269
	movl	4(%rax), %eax	# _440->last_uid, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rdx, %rax	# uid_luid.86, D.24265
	movl	(%rax), %eax	# *_444, D.24261
	movl	%eax, %edx	# D.24261, D.24274
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.88
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.89
	movl	-160(%rbp), %esi	# regno, tmp989
	movslq	%esi, %rsi	# tmp989, tmp988
	addq	$4, %rsi	#, tmp990
	movq	(%rax,%rsi,8), %rax	# reg_n_info.89_448->data.reg, D.24269
	movl	(%rax), %eax	# _449->first_uid, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rcx, %rax	# uid_luid.88, D.24265
	movl	(%rax), %eax	# *_453, D.24261
	subl	%eax, %edx	# D.24274, D.24274
	movl	%edx, %eax	# D.24274, D.24274
	movl	%eax, %edx	# D.24274, D.24275
	movq	-48(%rbp), %rax	# m, tmp991
	movw	%dx, 40(%rax)	# D.24275, m_380->lifetime
	.loc 1 934 0 discriminator 4
	movq	-112(%rbp), %rax	# regs, tmp992
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-160(%rbp), %eax	# regno, tmp993
	movslq	%eax, %rdx	# tmp993, D.24264
	movq	%rdx, %rax	# D.24264, tmp994
	addq	%rax, %rax	# tmp994
	addq	%rdx, %rax	# D.24264, tmp994
	salq	$3, %rax	#, tmp995
	addq	%rcx, %rax	# D.24266, D.24266
	movl	4(%rax), %eax	# _461->n_times_set, D.24261
	movl	%eax, %edx	# D.24261, D.24275
	movq	-48(%rbp), %rax	# m, tmp996
	movw	%dx, 42(%rax)	# D.24275, m_380->savings
	.loc 1 935 0 discriminator 4
	movq	-152(%rbp), %rax	# p, tmp997
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp997,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24263
	je	.L114	#,
	.loc 1 936 0
	movq	-48(%rbp), %rax	# m, tmp998
	movzwl	42(%rax), %eax	# m_380->savings, D.24275
	movl	%eax, %ebx	# D.24275, D.24274
	movq	-152(%rbp), %rax	# p, tmp999
	movq	%rax, %rdi	# tmp999,
	call	libcall_benefit	#
	addl	%ebx, %eax	# D.24274, D.24274
	movl	%eax, %edx	# D.24274, D.24275
	movq	-48(%rbp), %rax	# m, tmp1000
	movw	%dx, 42(%rax)	# D.24275, m_380->savings
.L114:
	.loc 1 937 0
	movl	$0, -200(%rbp)	#, i
	jmp	.L115	#
.L141:
	.loc 1 938 0
	movq	-112(%rbp), %rax	# regs, tmp1001
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-200(%rbp), %eax	# i, tmp1002
	movl	-160(%rbp), %edx	# regno, tmp1003
	addl	%edx, %eax	# tmp1003, D.24261
	movslq	%eax, %rdx	# D.24261, D.24264
	movq	%rdx, %rax	# D.24264, tmp1004
	addq	%rax, %rax	# tmp1004
	addq	%rdx, %rax	# D.24264, tmp1004
	salq	$3, %rax	#, tmp1005
	leaq	(%rcx,%rax), %rdx	#, D.24266
	cmpl	$0, -176(%rbp)	#, move_insn
	je	.L116	#,
	.loc 1 938 0 is_stmt 0 discriminator 1
	movl	$-2, %eax	#, iftmp.90
	jmp	.L117	#
.L116:
	.loc 1 938 0 discriminator 2
	movl	$-1, %eax	#, iftmp.90
.L117:
	.loc 1 938 0 discriminator 3
	movl	%eax, (%rdx)	# iftmp.90, _521->set_in_loop
	.loc 1 937 0 is_stmt 1 discriminator 3
	addl	$1, -200(%rbp)	#, i
.L115:
	.loc 1 937 0 is_stmt 0 discriminator 1
	cmpl	$52, -160(%rbp)	#, regno
	jg	.L118	#,
	cmpl	$7, -160(%rbp)	#, regno
	jle	.L119	#,
	cmpl	$15, -160(%rbp)	#, regno
	jle	.L120	#,
.L119:
	.loc 1 937 0 discriminator 2
	cmpl	$20, -160(%rbp)	#, regno
	jle	.L121	#,
	.loc 1 937 0 discriminator 1
	cmpl	$28, -160(%rbp)	#, regno
	jle	.L120	#,
.L121:
	.loc 1 937 0 discriminator 2
	cmpl	$44, -160(%rbp)	#, regno
	jle	.L122	#,
	.loc 1 937 0 discriminator 1
	cmpl	$52, -160(%rbp)	#, regno
	jle	.L120	#,
.L122:
	.loc 1 937 0 discriminator 2
	cmpl	$28, -160(%rbp)	#, regno
	jle	.L123	#,
	.loc 1 937 0 discriminator 1
	cmpl	$36, -160(%rbp)	#, regno
	jg	.L123	#,
.L120:
	movq	-72(%rbp), %rax	# set, tmp1006
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _504->mode, D.24270
	movzbl	%al, %eax	# D.24270, D.24261
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24271
	cmpl	$5, %eax	#, D.24271
	je	.L124	#,
	.loc 1 937 0 discriminator 2
	movq	-72(%rbp), %rax	# set, tmp1008
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _508->mode, D.24270
	movzbl	%al, %eax	# D.24270, D.24261
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24271
	cmpl	$6, %eax	#, D.24271
	jne	.L125	#,
.L124:
	.loc 1 937 0 discriminator 1
	movl	$2, %eax	#, iftmp.93
	jmp	.L126	#
.L125:
	movl	$1, %eax	#, iftmp.93
.L126:
	.loc 1 937 0 discriminator 3
	jmp	.L127	#
.L123:
	.loc 1 937 0 discriminator 2
	movq	-72(%rbp), %rax	# set, tmp1010
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _472->mode, D.24270
	cmpb	$18, %al	#, D.24270
	jne	.L128	#,
	.loc 1 937 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.96
	andl	$33554432, %eax	#, D.24261
	testl	%eax, %eax	# D.24261
	je	.L129	#,
	movl	$2, %eax	#, iftmp.95
	jmp	.L140	#
.L129:
	.loc 1 937 0 discriminator 2
	movl	$3, %eax	#, iftmp.95
	jmp	.L140	#
.L128:
	movq	-72(%rbp), %rax	# set, tmp1011
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _479->mode, D.24270
	cmpb	$24, %al	#, D.24270
	jne	.L132	#,
	.loc 1 937 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.99
	andl	$33554432, %eax	#, D.24261
	testl	%eax, %eax	# D.24261
	je	.L133	#,
	movl	$4, %eax	#, iftmp.98
	jmp	.L140	#
.L133:
	.loc 1 937 0 discriminator 2
	movl	$6, %eax	#, iftmp.98
	jmp	.L140	#
.L132:
	movq	-72(%rbp), %rax	# set, tmp1012
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _486->mode, D.24270
	movzbl	%al, %eax	# D.24270, D.24261
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24270
	movzbl	%al, %edx	# D.24270, D.24261
	movl	target_flags(%rip), %eax	# target_flags, target_flags.101
	andl	$33554432, %eax	#, D.24261
	testl	%eax, %eax	# D.24261
	je	.L136	#,
	.loc 1 937 0 discriminator 1
	movl	$8, %eax	#, iftmp.100
	jmp	.L137	#
.L136:
	.loc 1 937 0 discriminator 2
	movl	$4, %eax	#, iftmp.100
.L137:
	.loc 1 937 0 discriminator 3
	addl	%edx, %eax	# D.24261, D.24261
	subl	$1, %eax	#, D.24261
	movl	target_flags(%rip), %edx	# target_flags, target_flags.103
	andl	$33554432, %edx	#, D.24261
	testl	%edx, %edx	# D.24261
	je	.L138	#,
	.loc 1 937 0 discriminator 1
	movl	$8, %ebx	#, iftmp.102
	jmp	.L139	#
.L138:
	.loc 1 937 0 discriminator 2
	movl	$4, %ebx	#, iftmp.102
.L139:
	.loc 1 937 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.102
.L127:
	jmp	.L140	#
.L118:
	.loc 1 937 0 discriminator 2
	movl	$1, %eax	#, iftmp.91
.L140:
	.loc 1 937 0 discriminator 3
	cmpl	-200(%rbp), %eax	# i, iftmp.91
	jg	.L141	#,
	.loc 1 940 0 is_stmt 1
	movq	-48(%rbp), %rdx	# m, tmp1016
	movq	-80(%rbp), %rax	# movables, tmp1017
	movq	%rdx, %rsi	# tmp1016,
	movq	%rax, %rdi	# tmp1017,
	call	loop_movables_add	#
	.loc 1 942 0
	movq	-48(%rbp), %rax	# m, tmp1018
	movl	32(%rax), %eax	# m_380->consec, D.24261
	testl	%eax, %eax	# D.24261
	jle	.L142	#,
	.loc 1 948 0
	movq	-48(%rbp), %rax	# m, tmp1019
	movzbl	44(%rax), %eax	# *m_380, tmp1022
	shrb	$5, %al	#, D.24272
	andl	$1, %eax	#, D.24272
	movq	-48(%rbp), %rdx	# m, tmp1023
	andl	$1, %eax	#, tmp1025
	sall	$6, %eax	#, tmp1026
	movl	%eax, %ecx	# tmp1026, tmp1026
	movzbl	44(%rdx), %eax	# m_380->move_insn_first, tmp1027
	andl	$-65, %eax	#, tmp1028
	orl	%ecx, %eax	# tmp1026, tmp1029
	movb	%al, 44(%rdx)	# tmp1029, m_380->move_insn_first
	.loc 1 951 0
	movq	-152(%rbp), %rax	# p, tmp1030
	movq	%rax, %rdi	# tmp1030,
	call	next_nonnote_insn	#
	movq	%rax, -152(%rbp)	# tmp1031, p
	.loc 1 953 0
	movq	-48(%rbp), %rax	# m, tmp1032
	movl	32(%rax), %edx	# m_380->consec, D.24261
	movq	-152(%rbp), %rax	# p, tmp1033
	movl	%edx, %esi	# D.24261,
	movq	%rax, %rdi	# tmp1033,
	call	skip_consec_insns	#
	movq	%rax, -152(%rbp)	# tmp1034, p
	.loc 1 955 0
	movq	-152(%rbp), %rax	# p, tmp1035
	movq	%rax, %rdi	# tmp1035,
	call	prev_nonnote_insn	#
	movq	%rax, -152(%rbp)	# tmp1036, p
	.loc 1 960 0
	movq	-152(%rbp), %rax	# p, tmp1037
	movl	$0, %edx	#,
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp1037,
	call	find_reg_note	#
	movq	%rax, -64(%rbp)	# tmp1038, temp
	.loc 1 961 0
	cmpq	$0, -64(%rbp)	#, temp
	je	.L143	#,
	.loc 1 962 0
	movq	-64(%rbp), %rax	# temp, tmp1039
	movq	8(%rax), %rdx	# temp_531->fld[0].rtx, D.24263
	movq	-48(%rbp), %rax	# m, tmp1040
	movq	%rdx, 8(%rax)	# D.24263, m_380->set_src
	movq	-48(%rbp), %rax	# m, tmp1041
	movzbl	44(%rax), %edx	# m_380->move_insn, tmp1044
	orl	$32, %edx	#, tmp1045
	movb	%dl, 44(%rax)	# tmp1045, m_380->move_insn
	jmp	.L144	#
.L143:
	.loc 1 965 0
	movq	-152(%rbp), %rax	# p, tmp1046
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp1046,
	call	find_reg_note	#
	movq	%rax, -64(%rbp)	# tmp1047, temp
	.loc 1 966 0
	cmpq	$0, -64(%rbp)	#, temp
	je	.L145	#,
	.loc 1 966 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# temp, tmp1048
	movq	8(%rax), %rax	# temp_533->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _534->code, D.24260
	cmpw	$67, %ax	#, D.24260
	je	.L146	#,
	movq	-64(%rbp), %rax	# temp, tmp1049
	movq	8(%rax), %rax	# temp_533->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _536->code, D.24260
	cmpw	$68, %ax	#, D.24260
	je	.L146	#,
	movq	-64(%rbp), %rax	# temp, tmp1050
	movq	8(%rax), %rax	# temp_533->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _538->code, D.24260
	cmpw	$54, %ax	#, D.24260
	je	.L146	#,
	movq	-64(%rbp), %rax	# temp, tmp1051
	movq	8(%rax), %rax	# temp_533->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _540->code, D.24260
	cmpw	$55, %ax	#, D.24260
	je	.L146	#,
	movq	-64(%rbp), %rax	# temp, tmp1052
	movq	8(%rax), %rax	# temp_533->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _542->code, D.24260
	cmpw	$58, %ax	#, D.24260
	je	.L146	#,
	movq	-64(%rbp), %rax	# temp, tmp1053
	movq	8(%rax), %rax	# temp_533->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _544->code, D.24260
	cmpw	$134, %ax	#, D.24260
	je	.L146	#,
	movq	-64(%rbp), %rax	# temp, tmp1054
	movq	8(%rax), %rax	# temp_533->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _546->code, D.24260
	cmpw	$56, %ax	#, D.24260
	je	.L146	#,
	movq	-64(%rbp), %rax	# temp, tmp1055
	movq	8(%rax), %rax	# temp_533->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _548->code, D.24260
	cmpw	$140, %ax	#, D.24260
	jne	.L145	#,
.L146:
	.loc 1 967 0 is_stmt 1
	movq	-64(%rbp), %rax	# temp, tmp1056
	movq	8(%rax), %rdx	# temp_533->fld[0].rtx, D.24263
	movq	-48(%rbp), %rax	# m, tmp1057
	movq	%rdx, 8(%rax)	# D.24263, m_380->set_src
	movq	-48(%rbp), %rax	# m, tmp1058
	movzbl	44(%rax), %edx	# m_380->move_insn, tmp1061
	orl	$32, %edx	#, tmp1062
	movb	%dl, 44(%rax)	# tmp1062, m_380->move_insn
	jmp	.L144	#
.L145:
	.loc 1 969 0
	movq	-48(%rbp), %rax	# m, tmp1063
	movzbl	44(%rax), %edx	# m_380->move_insn, tmp1066
	andl	$-33, %edx	#, tmp1067
	movb	%dl, 44(%rax)	# tmp1067, m_380->move_insn
.L144:
	.loc 1 972 0
	movq	-152(%rbp), %rax	# p, tmp1068
	movl	$0, %edx	#,
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp1068,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24263
	setne	%dl	#, D.24273
	movq	-48(%rbp), %rax	# m, tmp1069
	movl	%edx, %ecx	# D.24273, tmp1071
	sall	$7, %ecx	#, tmp1071
	movzbl	44(%rax), %edx	# m_380->is_equiv, tmp1072
	andl	$127, %edx	#, tmp1073
	orl	%ecx, %edx	# tmp1071, tmp1074
	movb	%dl, 44(%rax)	# tmp1074, m_380->is_equiv
.LBE5:
	.loc 1 858 0
	jmp	.L71	#
.L142:
	jmp	.L71	#
.L74:
	.loc 1 982 0
	movq	-72(%rbp), %rax	# set, tmp1075
	movq	16(%rax), %rdx	# set_172->fld[1].rtx, D.24263
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24263
	cmpq	%rax, %rdx	# D.24263, D.24263
	jne	.L71	#,
	.loc 1 983 0
	movq	-152(%rbp), %rax	# p, tmp1076
	movq	24(%rax), %rax	# p_10->fld[2].rtx, D.24263
	movzwl	(%rax), %eax	# _555->code, D.24260
	cmpw	$32, %ax	#, D.24260
	jne	.L71	#,
	.loc 1 984 0
	movq	-152(%rbp), %rax	# p, tmp1077
	movq	24(%rax), %rax	# p_10->fld[2].rtx, D.24263
	movzwl	(%rax), %eax	# _557->code, D.24260
	movzwl	%ax, %eax	# D.24260, D.24261
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24262
	cmpb	$105, %al	#, D.24262
	jne	.L147	#,
	.loc 1 984 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp1079
	movq	24(%rax), %rax	# p_10->fld[2].rtx, D.24263
	movq	32(%rax), %rax	# _561->fld[3].rtx, D.24263
	movzwl	(%rax), %eax	# _562->code, D.24260
	cmpw	$47, %ax	#, D.24260
	jne	.L148	#,
	.loc 1 984 0 discriminator 3
	movq	-152(%rbp), %rax	# p, tmp1080
	movq	24(%rax), %rax	# p_10->fld[2].rtx, D.24263
	movq	32(%rax), %rax	# _564->fld[3].rtx, iftmp.105
	jmp	.L150	#
.L148:
	.loc 1 984 0 discriminator 4
	movq	-152(%rbp), %rax	# p, tmp1081
	movq	24(%rax), %rax	# p_10->fld[2].rtx, D.24263
	movq	32(%rax), %rdx	# _566->fld[3].rtx, D.24263
	movq	-152(%rbp), %rax	# p, tmp1082
	movq	24(%rax), %rax	# p_10->fld[2].rtx, D.24263
	movq	%rdx, %rsi	# D.24263,
	movq	%rax, %rdi	# D.24263,
	call	single_set_2	#
	jmp	.L150	#
.L147:
	.loc 1 984 0 discriminator 2
	movl	$0, %eax	#, iftmp.104
.L150:
	.loc 1 984 0 discriminator 5
	movq	%rax, -40(%rbp)	# iftmp.104, set1
	cmpq	$0, -40(%rbp)	#, set1
	je	.L71	#,
	.loc 1 985 0 is_stmt 1
	movq	-40(%rbp), %rax	# set1, tmp1083
	movzwl	(%rax), %eax	# set1_572->code, D.24260
	cmpw	$47, %ax	#, D.24260
	jne	.L71	#,
	.loc 1 986 0
	movq	-40(%rbp), %rax	# set1, tmp1084
	movq	8(%rax), %rax	# set1_572->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _574->code, D.24260
	cmpw	$64, %ax	#, D.24260
	jne	.L71	#,
	.loc 1 987 0
	movq	-40(%rbp), %rax	# set1, tmp1085
	movq	8(%rax), %rax	# set1_572->fld[0].rtx, D.24263
	movq	8(%rax), %rax	# _576->fld[0].rtx, D.24263
	movzwl	(%rax), %eax	# _577->code, D.24260
	cmpw	$63, %ax	#, D.24260
	jne	.L71	#,
	.loc 1 988 0
	movq	-40(%rbp), %rax	# set1, tmp1086
	movq	8(%rax), %rax	# set1_572->fld[0].rtx, D.24263
	movq	8(%rax), %rax	# _579->fld[0].rtx, D.24263
	movq	8(%rax), %rdx	# _580->fld[0].rtx, D.24263
	.loc 1 989 0
	movq	-72(%rbp), %rax	# set, tmp1087
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	.loc 1 988 0
	cmpq	%rax, %rdx	# D.24263, D.24263
	jne	.L71	#,
	.loc 1 990 0
	movq	-40(%rbp), %rax	# set1, tmp1088
	movq	16(%rax), %rdx	# set1_572->fld[1].rtx, D.24263
	movq	-72(%rbp), %rax	# set, tmp1089
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movq	%rdx, %rsi	# D.24263,
	movq	%rax, %rdi	# D.24263,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24261
	jne	.L71	#,
.LBB6:
	.loc 1 992 0
	movq	-72(%rbp), %rax	# set, tmp1090
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movl	8(%rax), %eax	# _586->fld[0].rtuint, D.24267
	movl	%eax, -156(%rbp)	# D.24267, regno
	.loc 1 993 0
	movq	-112(%rbp), %rax	# regs, tmp1091
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-156(%rbp), %eax	# regno, tmp1092
	movslq	%eax, %rdx	# tmp1092, D.24264
	movq	%rdx, %rax	# D.24264, tmp1093
	addq	%rax, %rax	# tmp1093
	addq	%rdx, %rax	# D.24264, tmp1093
	salq	$3, %rax	#, tmp1094
	addq	%rcx, %rax	# D.24266, D.24266
	movl	(%rax), %eax	# _592->set_in_loop, D.24261
	cmpl	$2, %eax	#, D.24261
	jne	.L71	#,
.LBB7:
	.loc 1 996 0
	movl	$80, %edi	#,
	call	xmalloc	#
	movq	%rax, -32(%rbp)	# tmp1095, m
	.loc 1 997 0
	movq	-32(%rbp), %rax	# m, tmp1096
	movq	$0, 72(%rax)	#, m_594->next
	.loc 1 998 0
	movq	-32(%rbp), %rax	# m, tmp1097
	movq	-152(%rbp), %rdx	# p, tmp1098
	movq	%rdx, (%rax)	# tmp1098, m_594->insn
	.loc 1 999 0
	movq	-72(%rbp), %rax	# set, tmp1099
	movq	8(%rax), %rdx	# set_172->fld[0].rtx, D.24263
	movq	-32(%rbp), %rax	# m, tmp1100
	movq	%rdx, 16(%rax)	# D.24263, m_594->set_dest
	.loc 1 1000 0
	movq	-32(%rbp), %rax	# m, tmp1101
	movq	$0, 24(%rax)	#, m_594->dependencies
	.loc 1 1001 0
	movq	-32(%rbp), %rax	# m, tmp1102
	movzbl	44(%rax), %edx	# m_594->force, tmp1105
	andl	$-3, %edx	#, tmp1106
	movb	%dl, 44(%rax)	# tmp1106, m_594->force
	.loc 1 1002 0
	movq	-32(%rbp), %rax	# m, tmp1107
	movl	$0, 32(%rax)	#, m_594->consec
	.loc 1 1003 0
	movq	-32(%rbp), %rax	# m, tmp1108
	movzbl	44(%rax), %edx	# m_594->done, tmp1111
	andl	$-9, %edx	#, tmp1112
	movb	%dl, 44(%rax)	# tmp1112, m_594->done
	.loc 1 1004 0
	movq	-32(%rbp), %rax	# m, tmp1113
	movq	$0, 64(%rax)	#, m_594->forces
	.loc 1 1005 0
	movq	-32(%rbp), %rax	# m, tmp1114
	movzbl	44(%rax), %edx	# m_594->move_insn, tmp1117
	andl	$-33, %edx	#, tmp1118
	movb	%dl, 44(%rax)	# tmp1118, m_594->move_insn
	.loc 1 1006 0
	movq	-32(%rbp), %rax	# m, tmp1119
	movzbl	44(%rax), %edx	# m_594->move_insn_first, tmp1122
	andl	$-65, %edx	#, tmp1123
	movb	%dl, 44(%rax)	# tmp1123, m_594->move_insn_first
	.loc 1 1007 0
	movq	-32(%rbp), %rax	# m, tmp1124
	movzbl	44(%rax), %edx	# m_594->partial, tmp1127
	orl	$16, %edx	#, tmp1128
	movb	%dl, 44(%rax)	# tmp1128, m_594->partial
	.loc 1 1026 0
	movq	-152(%rbp), %rax	# p, tmp1129
	movl	8(%rax), %edx	# p_10->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.107
	.loc 1 1028 0
	cmpl	%eax, %edx	# max_uid_for_loop.107, D.24261
	jge	.L151	#,
	.loc 1 1027 0
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.108
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.109
	movl	-156(%rbp), %ecx	# regno, tmp1131
	movslq	%ecx, %rcx	# tmp1131, tmp1130
	addq	$4, %rcx	#, tmp1132
	movq	(%rax,%rcx,8), %rax	# reg_n_info.109_599->data.reg, D.24269
	movl	4(%rax), %eax	# _600->last_uid, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rdx, %rax	# uid_luid.108, D.24265
	movl	(%rax), %edx	# *_604, D.24261
	movq	-216(%rbp), %rax	# loop, tmp1133
	movq	200(%rax), %rax	# loop_64(D)->end, D.24263
	movl	8(%rax), %ecx	# _606->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.111
	cmpl	%eax, %ecx	# max_uid_for_loop.111, D.24261
	jge	.L152	#,
	.loc 1 1027 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.112
	movq	-216(%rbp), %rax	# loop, tmp1134
	movq	200(%rax), %rax	# loop_64(D)->end, D.24263
	movl	8(%rax), %eax	# _610->fld[0].rtint, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rcx, %rax	# uid_luid.112, D.24265
	movl	(%rax), %eax	# *_614, iftmp.110
	cmpl	%eax, %edx	# iftmp.110, D.24261
	jg	.L151	#,
	jmp	.L210	#
.L152:
	.loc 1 1027 0 discriminator 2
	movl	$__FUNCTION__.12611, %edx	#,
	movl	$1027, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L210:
	.loc 1 1027 0 discriminator 1
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.113
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.114
	movl	-156(%rbp), %ecx	# regno, tmp1136
	movslq	%ecx, %rcx	# tmp1136, tmp1135
	addq	$4, %rcx	#, tmp1137
	movq	(%rax,%rcx,8), %rax	# reg_n_info.114_617->data.reg, D.24269
	movl	(%rax), %eax	# _618->first_uid, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rdx, %rax	# uid_luid.113, D.24265
	movl	(%rax), %edx	# *_622, D.24261
	movq	-216(%rbp), %rax	# loop, tmp1138
	movq	192(%rax), %rax	# loop_64(D)->start, D.24263
	movl	8(%rax), %ecx	# _624->fld[0].rtint, D.24261
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.116
	cmpl	%eax, %ecx	# max_uid_for_loop.116, D.24261
	jge	.L154	#,
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.117
	movq	-216(%rbp), %rax	# loop, tmp1139
	movq	192(%rax), %rax	# loop_64(D)->start, D.24263
	movl	8(%rax), %eax	# _628->fld[0].rtint, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rcx, %rax	# uid_luid.117, D.24265
	movl	(%rax), %eax	# *_632, iftmp.115
	cmpl	%eax, %edx	# iftmp.115, D.24261
	jl	.L151	#,
	jmp	.L211	#
.L154:
	.loc 1 1027 0 discriminator 2
	movl	$__FUNCTION__.12611, %edx	#,
	movl	$1027, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L211:
	.loc 1 1029 0 is_stmt 1
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.118
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.119
	movl	-156(%rbp), %ecx	# regno, tmp1141
	movslq	%ecx, %rcx	# tmp1141, tmp1140
	addq	$4, %rcx	#, tmp1142
	movq	(%rax,%rcx,8), %rax	# reg_n_info.119_635->data.reg, D.24269
	movl	(%rax), %eax	# _636->first_uid, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rdx, %rax	# uid_luid.118, D.24265
	movl	(%rax), %edx	# *_640, D.24261
	movq	-152(%rbp), %rax	# p, tmp1143
	movl	%edx, %esi	# D.24261,
	movq	%rax, %rdi	# tmp1143,
	call	labels_in_range_p	#
	.loc 1 1028 0
	testl	%eax, %eax	# D.24261
	je	.L156	#,
.L151:
	.loc 1 1028 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.106
	jmp	.L157	#
.L156:
	.loc 1 1028 0 discriminator 2
	movl	$0, %eax	#, iftmp.106
.L157:
	.loc 1 1026 0 is_stmt 1
	andl	$1, %eax	#, D.24272
	movl	%eax, %edx	# D.24272, D.24272
	movq	-32(%rbp), %rax	# m, tmp1144
	andl	$1, %edx	#, tmp1146
	leal	0(,%rdx,4), %ecx	#, tmp1147
	movzbl	44(%rax), %edx	# m_594->global, tmp1148
	andl	$-5, %edx	#, tmp1149
	orl	%ecx, %edx	# tmp1147, tmp1150
	movb	%dl, 44(%rax)	# tmp1150, m_594->global
	.loc 1 1030 0
	cmpl	$0, -196(%rbp)	#, maybe_never
	je	.L158	#,
	.loc 1 1030 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# m, tmp1151
	movzbl	44(%rax), %eax	# *m_594, D.24270
	andl	$4, %eax	#, D.24270
	testb	%al, %al	# D.24270
	je	.L158	#,
	.loc 1 1031 0 is_stmt 1
	movq	-40(%rbp), %rax	# set1, tmp1152
	movq	16(%rax), %rax	# set1_572->fld[1].rtx, D.24263
	movzbl	2(%rax), %eax	# _649->mode, D.24270
	movzbl	%al, %edx	# D.24270, D.24276
	movq	-32(%rbp), %rax	# m, tmp1153
	movl	%edx, 48(%rax)	# D.24276, m_594->savemode
	jmp	.L159	#
.L158:
	.loc 1 1033 0
	movq	-32(%rbp), %rax	# m, tmp1154
	movl	$0, 48(%rax)	#, m_594->savemode
.L159:
	.loc 1 1034 0
	movl	-156(%rbp), %edx	# regno, regno.120
	movq	-32(%rbp), %rax	# m, tmp1155
	movl	%edx, 36(%rax)	# regno.120, m_594->regno
	.loc 1 1035 0
	movq	-32(%rbp), %rax	# m, tmp1156
	movzbl	44(%rax), %edx	# m_594->cond, tmp1159
	andl	$-2, %edx	#, tmp1160
	movb	%dl, 44(%rax)	# tmp1160, m_594->cond
	.loc 1 1036 0
	movq	-32(%rbp), %rax	# m, tmp1161
	movq	$0, 56(%rax)	#, m_594->match
	.loc 1 1037 0
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.121
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.122
	movl	-156(%rbp), %ecx	# regno, tmp1163
	movslq	%ecx, %rcx	# tmp1163, tmp1162
	addq	$4, %rcx	#, tmp1164
	movq	(%rax,%rcx,8), %rax	# reg_n_info.122_654->data.reg, D.24269
	movl	4(%rax), %eax	# _655->last_uid, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rdx, %rax	# uid_luid.121, D.24265
	movl	(%rax), %eax	# *_659, D.24261
	movl	%eax, %edx	# D.24261, D.24274
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.123
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.124
	movl	-156(%rbp), %esi	# regno, tmp1166
	movslq	%esi, %rsi	# tmp1166, tmp1165
	addq	$4, %rsi	#, tmp1167
	movq	(%rax,%rsi,8), %rax	# reg_n_info.124_663->data.reg, D.24269
	movl	(%rax), %eax	# _664->first_uid, D.24261
	cltq
	salq	$2, %rax	#, D.24264
	addq	%rcx, %rax	# uid_luid.123, D.24265
	movl	(%rax), %eax	# *_668, D.24261
	subl	%eax, %edx	# D.24274, D.24274
	movl	%edx, %eax	# D.24274, D.24274
	movl	%eax, %edx	# D.24274, D.24275
	movq	-32(%rbp), %rax	# m, tmp1168
	movw	%dx, 40(%rax)	# D.24275, m_594->lifetime
	.loc 1 1038 0
	movq	-32(%rbp), %rax	# m, tmp1169
	movw	$1, 42(%rax)	#, m_594->savings
	.loc 1 1039 0
	movl	$0, -200(%rbp)	#, i
	jmp	.L160	#
.L184:
	.loc 1 1040 0 discriminator 2
	movq	-112(%rbp), %rax	# regs, tmp1170
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-200(%rbp), %eax	# i, tmp1171
	movl	-156(%rbp), %edx	# regno, tmp1172
	addl	%edx, %eax	# tmp1172, D.24261
	movslq	%eax, %rdx	# D.24261, D.24264
	movq	%rdx, %rax	# D.24264, tmp1173
	addq	%rax, %rax	# tmp1173
	addq	%rdx, %rax	# D.24264, tmp1173
	salq	$3, %rax	#, tmp1174
	addq	%rcx, %rax	# D.24266, D.24266
	movl	$-1, (%rax)	#, _723->set_in_loop
	.loc 1 1039 0 discriminator 2
	addl	$1, -200(%rbp)	#, i
.L160:
	.loc 1 1039 0 is_stmt 0 discriminator 1
	cmpl	$52, -156(%rbp)	#, regno
	jg	.L161	#,
	cmpl	$7, -156(%rbp)	#, regno
	jle	.L162	#,
	cmpl	$15, -156(%rbp)	#, regno
	jle	.L163	#,
.L162:
	.loc 1 1039 0 discriminator 2
	cmpl	$20, -156(%rbp)	#, regno
	jle	.L164	#,
	.loc 1 1039 0 discriminator 1
	cmpl	$28, -156(%rbp)	#, regno
	jle	.L163	#,
.L164:
	.loc 1 1039 0 discriminator 2
	cmpl	$44, -156(%rbp)	#, regno
	jle	.L165	#,
	.loc 1 1039 0 discriminator 1
	cmpl	$52, -156(%rbp)	#, regno
	jle	.L163	#,
.L165:
	.loc 1 1039 0 discriminator 2
	cmpl	$28, -156(%rbp)	#, regno
	jle	.L166	#,
	.loc 1 1039 0 discriminator 1
	cmpl	$36, -156(%rbp)	#, regno
	jg	.L166	#,
.L163:
	movq	-72(%rbp), %rax	# set, tmp1175
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _706->mode, D.24270
	movzbl	%al, %eax	# D.24270, D.24261
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24271
	cmpl	$5, %eax	#, D.24271
	je	.L167	#,
	.loc 1 1039 0 discriminator 2
	movq	-72(%rbp), %rax	# set, tmp1177
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _710->mode, D.24270
	movzbl	%al, %eax	# D.24270, D.24261
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24271
	cmpl	$6, %eax	#, D.24271
	jne	.L168	#,
.L167:
	.loc 1 1039 0 discriminator 1
	movl	$2, %eax	#, iftmp.127
	jmp	.L169	#
.L168:
	movl	$1, %eax	#, iftmp.127
.L169:
	.loc 1 1039 0 discriminator 3
	jmp	.L170	#
.L166:
	.loc 1 1039 0 discriminator 2
	movq	-72(%rbp), %rax	# set, tmp1179
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _674->mode, D.24270
	cmpb	$18, %al	#, D.24270
	jne	.L171	#,
	.loc 1 1039 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.130
	andl	$33554432, %eax	#, D.24261
	testl	%eax, %eax	# D.24261
	je	.L172	#,
	movl	$2, %eax	#, iftmp.129
	jmp	.L183	#
.L172:
	.loc 1 1039 0 discriminator 2
	movl	$3, %eax	#, iftmp.129
	jmp	.L183	#
.L171:
	movq	-72(%rbp), %rax	# set, tmp1180
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _681->mode, D.24270
	cmpb	$24, %al	#, D.24270
	jne	.L175	#,
	.loc 1 1039 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.133
	andl	$33554432, %eax	#, D.24261
	testl	%eax, %eax	# D.24261
	je	.L176	#,
	movl	$4, %eax	#, iftmp.132
	jmp	.L183	#
.L176:
	.loc 1 1039 0 discriminator 2
	movl	$6, %eax	#, iftmp.132
	jmp	.L183	#
.L175:
	movq	-72(%rbp), %rax	# set, tmp1181
	movq	8(%rax), %rax	# set_172->fld[0].rtx, D.24263
	movzbl	2(%rax), %eax	# _688->mode, D.24270
	movzbl	%al, %eax	# D.24270, D.24261
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24270
	movzbl	%al, %edx	# D.24270, D.24261
	movl	target_flags(%rip), %eax	# target_flags, target_flags.135
	andl	$33554432, %eax	#, D.24261
	testl	%eax, %eax	# D.24261
	je	.L179	#,
	.loc 1 1039 0 discriminator 1
	movl	$8, %eax	#, iftmp.134
	jmp	.L180	#
.L179:
	.loc 1 1039 0 discriminator 2
	movl	$4, %eax	#, iftmp.134
.L180:
	.loc 1 1039 0 discriminator 3
	addl	%edx, %eax	# D.24261, D.24261
	subl	$1, %eax	#, D.24261
	movl	target_flags(%rip), %edx	# target_flags, target_flags.137
	andl	$33554432, %edx	#, D.24261
	testl	%edx, %edx	# D.24261
	je	.L181	#,
	.loc 1 1039 0 discriminator 1
	movl	$8, %ebx	#, iftmp.136
	jmp	.L182	#
.L181:
	.loc 1 1039 0 discriminator 2
	movl	$4, %ebx	#, iftmp.136
.L182:
	.loc 1 1039 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.136
.L170:
	jmp	.L183	#
.L161:
	.loc 1 1039 0 discriminator 2
	movl	$1, %eax	#, iftmp.125
.L183:
	.loc 1 1039 0 discriminator 3
	cmpl	-200(%rbp), %eax	# i, iftmp.125
	jg	.L184	#,
	.loc 1 1042 0 is_stmt 1
	movq	-32(%rbp), %rdx	# m, tmp1185
	movq	-80(%rbp), %rax	# movables, tmp1186
	movq	%rdx, %rsi	# tmp1185,
	movq	%rax, %rdi	# tmp1186,
	call	loop_movables_add	#
.LBE7:
.LBE6:
.LBE3:
	.loc 1 770 0
	jmp	.L106	#
.L71:
	jmp	.L106	#
.L58:
	.loc 1 1049 0
	movq	-152(%rbp), %rax	# p, tmp1187
	movzwl	(%rax), %eax	# p_10->code, D.24260
	cmpw	$34, %ax	#, D.24260
	jne	.L185	#,
	.loc 1 1049 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp1188
	movzbl	3(%rax), %eax	# *p_10, D.24270
	andl	$4, %eax	#, D.24270
	testb	%al, %al	# D.24270
	jne	.L185	#,
	.loc 1 1050 0 is_stmt 1
	movl	$1, -192(%rbp)	#, call_passed
	jmp	.L106	#
.L185:
	.loc 1 1057 0
	movq	-152(%rbp), %rax	# p, tmp1189
	movzwl	(%rax), %eax	# p_10->code, D.24260
	cmpw	$36, %ax	#, D.24260
	je	.L186	#,
	.loc 1 1057 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp1190
	movzwl	(%rax), %eax	# p_10->code, D.24260
	cmpw	$33, %ax	#, D.24260
	jne	.L187	#,
.L186:
	.loc 1 1063 0 is_stmt 1
	movq	-152(%rbp), %rax	# p, tmp1191
	movzwl	(%rax), %eax	# p_10->code, D.24260
	cmpw	$33, %ax	#, D.24260
	jne	.L188	#,
	.loc 1 1063 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# p, tmp1192
	movq	64(%rax), %rdx	# p_10->fld[7].rtx, D.24263
	movq	-216(%rbp), %rax	# loop, tmp1193
	movq	208(%rax), %rax	# loop_64(D)->top, D.24263
	cmpq	%rax, %rdx	# D.24263, D.24263
	jne	.L188	#,
	.loc 1 1064 0 is_stmt 1
	movq	-152(%rbp), %rax	# p, tmp1194
	movq	24(%rax), %rax	# p_10->fld[2].rtx, D.24263
	movq	24(%rax), %rax	# _734->fld[2].rtx, D.24263
	cmpq	-96(%rbp), %rax	# loop_end, D.24263
	jne	.L188	#,
	.loc 1 1065 0
	movq	-152(%rbp), %rax	# p, tmp1195
	movq	%rax, %rdi	# tmp1195,
	call	any_uncondjump_p	#
	.loc 1 1063 0
	testl	%eax, %eax	# D.24261
	jne	.L187	#,
.L188:
	.loc 1 1066 0
	movl	$1, -196(%rbp)	#, maybe_never
	jmp	.L106	#
.L187:
	.loc 1 1067 0
	movq	-152(%rbp), %rax	# p, tmp1196
	movzwl	(%rax), %eax	# p_10->code, D.24260
	cmpw	$37, %ax	#, D.24260
	jne	.L106	#,
	.loc 1 1072 0
	movq	-152(%rbp), %rax	# p, tmp1197
	movl	40(%rax), %eax	# p_10->fld[4].rtint, D.24261
	cmpl	$-93, %eax	#, D.24261
	jne	.L189	#,
	.loc 1 1072 0 is_stmt 0 discriminator 1
	cmpl	$0, -188(%rbp)	#, loop_depth
	jne	.L189	#,
	.loc 1 1073 0 is_stmt 1
	movl	$0, -192(%rbp)	#, call_passed
	movl	-192(%rbp), %eax	# call_passed, tmp1198
	movl	%eax, -196(%rbp)	# tmp1198, maybe_never
	jmp	.L106	#
.L189:
	.loc 1 1074 0
	movq	-152(%rbp), %rax	# p, tmp1199
	movl	40(%rax), %eax	# p_10->fld[4].rtint, D.24261
	cmpl	$-96, %eax	#, D.24261
	jne	.L190	#,
	.loc 1 1075 0
	addl	$1, -188(%rbp)	#, loop_depth
	jmp	.L106	#
.L190:
	.loc 1 1076 0
	movq	-152(%rbp), %rax	# p, tmp1200
	movl	40(%rax), %eax	# p_10->fld[4].rtint, D.24261
	cmpl	$-95, %eax	#, D.24261
	jne	.L106	#,
	.loc 1 1077 0
	subl	$1, -188(%rbp)	#, loop_depth
.L106:
	.loc 1 761 0
	movq	-152(%rbp), %rdx	# p, tmp1201
	movq	-216(%rbp), %rax	# loop, tmp1202
	movq	%rdx, %rsi	# tmp1201,
	movq	%rax, %rdi	# tmp1202,
	call	next_insn_in_loop	#
	movq	%rax, -152(%rbp)	# tmp1203, p
.L57:
	.loc 1 759 0 discriminator 1
	cmpq	$0, -152(%rbp)	#, p
	jne	.L191	#,
	.loc 1 1083 0
	movq	-80(%rbp), %rax	# movables, tmp1204
	movq	%rax, %rdi	# tmp1204,
	call	ignore_some_movables	#
	.loc 1 1090 0
	movq	-80(%rbp), %rax	# movables, tmp1205
	movq	%rax, %rdi	# tmp1205,
	call	force_movables	#
	.loc 1 1097 0
	movq	-112(%rbp), %rdx	# regs, tmp1206
	movq	-80(%rbp), %rax	# movables, tmp1207
	movq	%rdx, %rsi	# tmp1206,
	movq	%rax, %rdi	# tmp1207,
	call	combine_movables	#
	.loc 1 1105 0
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.138
	testl	%eax, %eax	# optimize_size.138
	jne	.L192	#,
	.loc 1 1107 0
	movl	-168(%rbp), %ecx	# insn_count, tmp1208
	movl	-172(%rbp), %edx	# threshold, tmp1209
	movq	-80(%rbp), %rsi	# movables, tmp1210
	movq	-216(%rbp), %rax	# loop, tmp1211
	movq	%rax, %rdi	# tmp1211,
	call	move_movables	#
	.loc 1 1111 0
	call	max_reg_num	#
	movq	-112(%rbp), %rdx	# regs, tmp1212
	movl	(%rdx), %edx	# regs_67->num, D.24261
	cmpl	%edx, %eax	# D.24261, D.24261
	jle	.L192	#,
	.loc 1 1113 0
	movq	-216(%rbp), %rax	# loop, tmp1213
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1213,
	call	loop_regs_scan	#
	.loc 1 1114 0
	movq	-104(%rbp), %rax	# loop_start, tmp1214
	movq	%rax, -144(%rbp)	# tmp1214, update_start
	jmp	.L193	#
.L195:
	.loc 1 1117 0
	movq	-144(%rbp), %rax	# update_start, tmp1215
	movq	16(%rax), %rax	# update_start_15->fld[1].rtx, tmp1216
	movq	%rax, -144(%rbp)	# tmp1216, update_start
.L193:
	.loc 1 1115 0 discriminator 1
	movq	-144(%rbp), %rax	# update_start, tmp1217
	movq	16(%rax), %rax	# update_start_15->fld[1].rtx, D.24263
	.loc 1 1114 0 discriminator 1
	testq	%rax, %rax	# D.24263
	je	.L194	#,
	.loc 1 1116 0
	movq	-144(%rbp), %rax	# update_start, tmp1218
	movq	16(%rax), %rax	# update_start_15->fld[1].rtx, D.24263
	movzwl	(%rax), %eax	# _752->code, D.24260
	cmpw	$36, %ax	#, D.24260
	jne	.L195	#,
.L194:
	.loc 1 1119 0
	movq	-96(%rbp), %rax	# loop_end, tmp1219
	movq	24(%rax), %rax	# loop_end_69->fld[2].rtx, tmp1220
	movq	%rax, -24(%rbp)	# tmp1220, update_end
	.loc 1 1121 0
	movl	loop_max_reg(%rip), %eax	# loop_max_reg, loop_max_reg.139
	movl	%eax, %edx	# loop_max_reg.139, loop_max_reg.140
	movq	-24(%rbp), %rcx	# update_end, tmp1221
	movq	-144(%rbp), %rax	# update_start, tmp1222
	movq	%rcx, %rsi	# tmp1221,
	movq	%rax, %rdi	# tmp1222,
	call	reg_scan_update	#
	.loc 1 1122 0
	call	max_reg_num	#
	movl	%eax, loop_max_reg(%rip)	# loop_max_reg.141, loop_max_reg
.L192:
	.loc 1 1129 0
	movl	$0, -200(%rbp)	#, i
	jmp	.L196	#
.L198:
	.loc 1 1130 0
	movq	-112(%rbp), %rax	# regs, tmp1223
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-200(%rbp), %eax	# i, tmp1224
	movslq	%eax, %rdx	# tmp1224, D.24264
	movq	%rdx, %rax	# D.24264, tmp1225
	addq	%rax, %rax	# tmp1225
	addq	%rdx, %rax	# D.24264, tmp1225
	salq	$3, %rax	#, tmp1226
	addq	%rcx, %rax	# D.24266, D.24266
	movl	(%rax), %eax	# _764->set_in_loop, D.24261
	testl	%eax, %eax	# D.24261
	jns	.L197	#,
	.loc 1 1131 0
	movq	-112(%rbp), %rax	# regs, tmp1227
	movq	8(%rax), %rcx	# regs_67->array, D.24266
	movl	-200(%rbp), %eax	# i, tmp1228
	movslq	%eax, %rdx	# tmp1228, D.24264
	movq	%rdx, %rax	# D.24264, tmp1229
	addq	%rax, %rax	# tmp1229
	addq	%rdx, %rax	# D.24264, tmp1229
	salq	$3, %rax	#, tmp1230
	addq	%rax, %rcx	# D.24264, D.24266
	movq	-112(%rbp), %rax	# regs, tmp1231
	movq	8(%rax), %rsi	# regs_67->array, D.24266
	movl	-200(%rbp), %eax	# i, tmp1232
	movslq	%eax, %rdx	# tmp1232, D.24264
	movq	%rdx, %rax	# D.24264, tmp1233
	addq	%rax, %rax	# tmp1233
	addq	%rdx, %rax	# D.24264, tmp1233
	salq	$3, %rax	#, tmp1234
	addq	%rsi, %rax	# D.24266, D.24266
	movl	4(%rax), %eax	# _773->n_times_set, D.24261
	movl	%eax, (%rcx)	# D.24261, _769->set_in_loop
.L197:
	.loc 1 1129 0
	addl	$1, -200(%rbp)	#, i
.L196:
	.loc 1 1129 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# regs, tmp1235
	movl	(%rax), %eax	# regs_67->num, D.24261
	cmpl	-200(%rbp), %eax	# i, D.24261
	jg	.L198	#,
	.loc 1 1135 0 is_stmt 1
	movq	-216(%rbp), %rax	# loop, tmp1236
	movq	%rax, %rdi	# tmp1236,
	call	load_mems	#
	.loc 1 1138 0
	call	max_reg_num	#
	movq	-112(%rbp), %rdx	# regs, tmp1237
	movl	(%rdx), %edx	# regs_67->num, D.24261
	cmpl	%edx, %eax	# D.24261, D.24261
	jle	.L199	#,
	.loc 1 1139 0
	movq	-216(%rbp), %rax	# loop, tmp1238
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1238,
	call	loop_regs_scan	#
.L199:
	.loc 1 1141 0
	movq	-104(%rbp), %rax	# loop_start, tmp1239
	movq	%rax, -144(%rbp)	# tmp1239, update_start
	jmp	.L200	#
.L202:
	.loc 1 1144 0
	movq	-144(%rbp), %rax	# update_start, tmp1240
	movq	16(%rax), %rax	# update_start_16->fld[1].rtx, tmp1241
	movq	%rax, -144(%rbp)	# tmp1241, update_start
.L200:
	.loc 1 1142 0 discriminator 1
	movq	-144(%rbp), %rax	# update_start, tmp1242
	movq	16(%rax), %rax	# update_start_16->fld[1].rtx, D.24263
	.loc 1 1141 0 discriminator 1
	testq	%rax, %rax	# D.24263
	je	.L201	#,
	.loc 1 1143 0
	movq	-144(%rbp), %rax	# update_start, tmp1243
	movq	16(%rax), %rax	# update_start_16->fld[1].rtx, D.24263
	movzwl	(%rax), %eax	# _780->code, D.24260
	cmpw	$36, %ax	#, D.24260
	jne	.L202	#,
.L201:
	.loc 1 1146 0
	movq	-96(%rbp), %rax	# loop_end, tmp1244
	movq	24(%rax), %rax	# loop_end_69->fld[2].rtx, tmp1245
	movq	%rax, -24(%rbp)	# tmp1245, update_end
	.loc 1 1148 0
	movl	loop_max_reg(%rip), %eax	# loop_max_reg, loop_max_reg.142
	movl	%eax, %edx	# loop_max_reg.142, loop_max_reg.143
	movq	-24(%rbp), %rcx	# update_end, tmp1246
	movq	-144(%rbp), %rax	# update_start, tmp1247
	movq	%rcx, %rsi	# tmp1246,
	movq	%rax, %rdi	# tmp1247,
	call	reg_scan_update	#
	.loc 1 1149 0
	call	max_reg_num	#
	movl	%eax, loop_max_reg(%rip)	# loop_max_reg.144, loop_max_reg
	.loc 1 1151 0
	movl	flag_strength_reduce(%rip), %eax	# flag_strength_reduce, flag_strength_reduce.145
	testl	%eax, %eax	# flag_strength_reduce.145
	je	.L203	#,
	.loc 1 1153 0
	cmpq	$0, -24(%rbp)	#, update_end
	je	.L204	#,
	.loc 1 1153 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# update_end, tmp1248
	movzwl	(%rax), %eax	# update_end_783->code, D.24260
	cmpw	$36, %ax	#, D.24260
	jne	.L204	#,
	.loc 1 1155 0 is_stmt 1
	movq	-24(%rbp), %rax	# update_end, tmp1249
	movl	32(%rax), %eax	# update_end_783->fld[3].rtint, D.24261
	leal	1(%rax), %edx	#, D.24261
	movq	-24(%rbp), %rax	# update_end, tmp1250
	movl	%edx, 32(%rax)	# D.24261, update_end_783->fld[3].rtint
.L204:
	.loc 1 1157 0
	movl	-220(%rbp), %edx	# flags, tmp1251
	movq	-216(%rbp), %rax	# loop, tmp1252
	movl	%edx, %esi	# tmp1251,
	movq	%rax, %rdi	# tmp1252,
	call	strength_reduce	#
	.loc 1 1159 0
	movl	loop_max_reg(%rip), %eax	# loop_max_reg, loop_max_reg.146
	movl	%eax, %edx	# loop_max_reg.146, loop_max_reg.147
	movq	-24(%rbp), %rcx	# update_end, tmp1253
	movq	-144(%rbp), %rax	# update_start, tmp1254
	movq	%rcx, %rsi	# tmp1253,
	movq	%rax, %rdi	# tmp1254,
	call	reg_scan_update	#
	.loc 1 1160 0
	call	max_reg_num	#
	movl	%eax, loop_max_reg(%rip)	# loop_max_reg.148, loop_max_reg
	.loc 1 1162 0
	cmpq	$0, -24(%rbp)	#, update_end
	je	.L203	#,
	.loc 1 1162 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# update_end, tmp1255
	movzwl	(%rax), %eax	# update_end_783->code, D.24260
	cmpw	$36, %ax	#, D.24260
	jne	.L203	#,
	.loc 1 1163 0 is_stmt 1
	movq	-24(%rbp), %rax	# update_end, tmp1256
	movl	32(%rax), %eax	# update_end_783->fld[3].rtint, D.24261
	leal	-1(%rax), %edx	#, D.24261
	movq	-24(%rbp), %rax	# update_end, tmp1257
	movl	%edx, 32(%rax)	# D.24261, update_end_783->fld[3].rtint
	movq	-24(%rbp), %rax	# update_end, tmp1258
	movl	32(%rax), %eax	# update_end_783->fld[3].rtint, D.24261
	testl	%eax, %eax	# D.24261
	jne	.L203	#,
	.loc 1 1164 0
	movq	-24(%rbp), %rax	# update_end, tmp1259
	movq	%rax, %rdi	# tmp1259,
	call	delete_related_insns	#
.L203:
	.loc 1 1169 0
	movq	-80(%rbp), %rax	# movables, tmp1260
	movq	%rax, %rdi	# tmp1260,
	call	loop_movables_free	#
	.loc 1 1171 0
	movq	-112(%rbp), %rax	# regs, tmp1261
	movq	8(%rax), %rax	# regs_67->array, D.24266
	movq	%rax, %rdi	# D.24266,
	call	free	#
	.loc 1 1172 0
	movq	-112(%rbp), %rax	# regs, tmp1262
	movq	$0, 8(%rax)	#, regs_67->array
	.loc 1 1173 0
	movq	-112(%rbp), %rax	# regs, tmp1263
	movl	$0, (%rax)	#, regs_67->num
.L35:
	.loc 1 1174 0
	addq	$216, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	scan_loop, .-scan_loop
	.globl	record_excess_regs
	.type	record_excess_regs, @function
record_excess_regs:
.LFB7:
	.loc 1 1183 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# in_this, in_this
	movq	%rsi, -48(%rbp)	# not_in_this, not_in_this
	movq	%rdx, -56(%rbp)	# output, output
	.loc 1 1188 0
	movq	-40(%rbp), %rax	# in_this, tmp77
	movzwl	(%rax), %eax	# in_this_3(D)->code, D.24280
	movzwl	%ax, %eax	# D.24280, tmp78
	movl	%eax, -12(%rbp)	# tmp78, code
	.loc 1 1190 0
	movl	-12(%rbp), %eax	# code, tmp80
	subl	$54, %eax	#, tmp79
	cmpl	$15, %eax	#, tmp79
	ja	.L227	#,
	movl	%eax, %eax	# tmp79, tmp81
	movq	.L215(,%rax,8), %rax	#, tmp82
	jmp	*%rax	# tmp82
	.section	.rodata
	.align 8
	.align 4
.L215:
	.quad	.L228
	.quad	.L228
	.quad	.L227
	.quad	.L227
	.quad	.L228
	.quad	.L228
	.quad	.L227
	.quad	.L216
	.quad	.L227
	.quad	.L227
	.quad	.L227
	.quad	.L227
	.quad	.L227
	.quad	.L228
	.quad	.L228
	.quad	.L228
	.text
.L216:
	.loc 1 1202 0
	movq	-40(%rbp), %rax	# in_this, tmp83
	movl	8(%rax), %eax	# in_this_3(D)->fld[0].rtuint, D.24281
	cmpl	$52, %eax	#, D.24281
	jbe	.L218	#,
	.loc 1 1203 0
	movq	-48(%rbp), %rdx	# not_in_this, tmp84
	movq	-40(%rbp), %rax	# in_this, tmp85
	movq	%rdx, %rsi	# tmp84,
	movq	%rax, %rdi	# tmp85,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24282
	jne	.L218	#,
	.loc 1 1204 0
	movq	-56(%rbp), %rax	# output, tmp86
	movq	(%rax), %rdx	# *output_9(D), D.24283
	movq	-40(%rbp), %rax	# in_this, tmp87
	movq	%rdx, %rcx	# D.24283,
	movq	%rax, %rdx	# tmp87,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-56(%rbp), %rdx	# output, tmp88
	movq	%rax, (%rdx)	# D.24283, *output_9(D)
	.loc 1 1205 0
	jmp	.L212	#
.L218:
	jmp	.L212	#
.L227:
	.loc 1 1208 0
	nop
	.loc 1 1211 0
	movl	-12(%rbp), %eax	# code, code.149
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp90
	movq	%rax, -8(%rbp)	# tmp90, fmt
	.loc 1 1212 0
	movl	-12(%rbp), %eax	# code, code.150
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.24284
	movzbl	%al, %eax	# D.24284, D.24282
	subl	$1, %eax	#, tmp92
	movl	%eax, -20(%rbp)	# tmp92, i
	jmp	.L219	#
.L225:
.LBB8:
	.loc 1 1216 0
	movl	-20(%rbp), %eax	# i, tmp93
	movslq	%eax, %rdx	# tmp93, D.24285
	movq	-8(%rbp), %rax	# fmt, tmp94
	addq	%rdx, %rax	# D.24285, D.24286
	movzbl	(%rax), %eax	# *_19, D.24287
	movsbl	%al, %eax	# D.24287, D.24282
	cmpl	$69, %eax	#, D.24282
	je	.L221	#,
	cmpl	$101, %eax	#, D.24282
	je	.L222	#,
	jmp	.L220	#
.L221:
	.loc 1 1219 0
	movl	$0, -16(%rbp)	#, j
	jmp	.L223	#
.L224:
	.loc 1 1220 0 discriminator 2
	movq	-40(%rbp), %rax	# in_this, tmp95
	movl	-20(%rbp), %edx	# i, tmp97
	movslq	%edx, %rdx	# tmp97, tmp96
	movq	8(%rax,%rdx,8), %rax	# in_this_3(D)->fld[i_1].rtvec, D.24288
	movl	-16(%rbp), %edx	# j, tmp99
	movslq	%edx, %rdx	# tmp99, tmp98
	movq	8(%rax,%rdx,8), %rax	# _25->elem, D.24283
	movq	-56(%rbp), %rdx	# output, tmp100
	movq	-48(%rbp), %rcx	# not_in_this, tmp101
	movq	%rcx, %rsi	# tmp101,
	movq	%rax, %rdi	# D.24283,
	call	record_excess_regs	#
	.loc 1 1219 0 discriminator 2
	addl	$1, -16(%rbp)	#, j
.L223:
	.loc 1 1219 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# in_this, tmp102
	movl	-20(%rbp), %edx	# i, tmp104
	movslq	%edx, %rdx	# tmp104, tmp103
	movq	8(%rax,%rdx,8), %rax	# in_this_3(D)->fld[i_1].rtvec, D.24288
	movl	(%rax), %eax	# _23->num_elem, D.24282
	cmpl	-16(%rbp), %eax	# j, D.24282
	jg	.L224	#,
	.loc 1 1221 0 is_stmt 1
	jmp	.L220	#
.L222:
	.loc 1 1224 0
	movq	-40(%rbp), %rax	# in_this, tmp105
	movl	-20(%rbp), %edx	# i, tmp107
	movslq	%edx, %rdx	# tmp107, tmp106
	movq	8(%rax,%rdx,8), %rax	# in_this_3(D)->fld[i_1].rtx, D.24283
	movq	-56(%rbp), %rdx	# output, tmp108
	movq	-48(%rbp), %rcx	# not_in_this, tmp109
	movq	%rcx, %rsi	# tmp109,
	movq	%rax, %rdi	# D.24283,
	call	record_excess_regs	#
	.loc 1 1225 0
	nop
.L220:
.LBE8:
	.loc 1 1212 0
	subl	$1, -20(%rbp)	#, i
.L219:
	.loc 1 1212 0 is_stmt 0 discriminator 1
	cmpl	$0, -20(%rbp)	#, i
	jns	.L225	#,
	jmp	.L212	#
.L228:
	.loc 1 1199 0 is_stmt 1
	nop
.L212:
	.loc 1 1228 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	record_excess_regs, .-record_excess_regs
	.globl	libcall_other_reg
	.type	libcall_other_reg, @function
libcall_other_reg:
.LFB8:
	.loc 1 1238 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# insn, insn
	movq	%rsi, -48(%rbp)	# equiv, equiv
	.loc 1 1239 0
	movq	-40(%rbp), %rax	# insn, tmp65
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp65,
	call	find_reg_note	#
	movq	%rax, -8(%rbp)	# tmp66, note
	.loc 1 1240 0
	movq	-8(%rbp), %rax	# note, tmp67
	movq	8(%rax), %rax	# note_3->fld[0].rtx, tmp68
	movq	%rax, -16(%rbp)	# tmp68, p
	.loc 1 1241 0
	movq	$0, -24(%rbp)	#, output
	.loc 1 1246 0
	jmp	.L230	#
.L233:
	.loc 1 1248 0
	movq	-16(%rbp), %rax	# p, tmp69
	movzwl	(%rax), %eax	# p_1->code, D.24289
	cmpw	$32, %ax	#, D.24289
	je	.L231	#,
	.loc 1 1248 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# p, tmp70
	movzwl	(%rax), %eax	# p_1->code, D.24289
	cmpw	$33, %ax	#, D.24289
	je	.L231	#,
	.loc 1 1249 0 is_stmt 1
	movq	-16(%rbp), %rax	# p, tmp71
	movzwl	(%rax), %eax	# p_1->code, D.24289
	cmpw	$34, %ax	#, D.24289
	jne	.L232	#,
.L231:
	.loc 1 1250 0
	movq	-16(%rbp), %rax	# p, tmp72
	movq	32(%rax), %rax	# p_1->fld[3].rtx, D.24290
	leaq	-24(%rbp), %rdx	#, tmp73
	movq	-48(%rbp), %rcx	# equiv, tmp74
	movq	%rcx, %rsi	# tmp74,
	movq	%rax, %rdi	# D.24290,
	call	record_excess_regs	#
.L232:
	.loc 1 1251 0
	movq	-16(%rbp), %rax	# p, tmp75
	movq	24(%rax), %rax	# p_1->fld[2].rtx, tmp76
	movq	%rax, -16(%rbp)	# tmp76, p
.L230:
	.loc 1 1246 0 discriminator 1
	movq	-16(%rbp), %rax	# p, tmp77
	cmpq	-40(%rbp), %rax	# insn, tmp77
	jne	.L233	#,
	.loc 1 1254 0
	movq	-24(%rbp), %rax	# output, D.24291
	.loc 1 1255 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	libcall_other_reg, .-libcall_other_reg
	.type	reg_in_basic_block_p, @function
reg_in_basic_block_p:
.LFB9:
	.loc 1 1263 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# insn, insn
	movq	%rsi, -32(%rbp)	# reg, reg
	.loc 1 1264 0
	movq	-32(%rbp), %rax	# reg, tmp76
	movl	8(%rax), %eax	# reg_3(D)->fld[0].rtuint, D.24293
	movl	%eax, -12(%rbp)	# D.24293, regno
	.loc 1 1267 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.151
	movl	-12(%rbp), %edx	# regno, tmp78
	movslq	%edx, %rdx	# tmp78, tmp77
	addq	$4, %rdx	#, tmp79
	movq	(%rax,%rdx,8), %rax	# reg_n_info.151_6->data.reg, D.24294
	movl	(%rax), %edx	# _7->first_uid, D.24292
	movq	-24(%rbp), %rax	# insn, tmp80
	movl	8(%rax), %eax	# insn_9(D)->fld[0].rtint, D.24292
	cmpl	%eax, %edx	# D.24292, D.24292
	je	.L236	#,
	.loc 1 1268 0
	movl	$0, %eax	#, D.24292
	jmp	.L237	#
.L236:
	.loc 1 1271 0
	movq	-24(%rbp), %rax	# insn, tmp81
	movq	%rax, -8(%rbp)	# tmp81, p
	jmp	.L238	#
.L248:
	.loc 1 1273 0
	movq	-8(%rbp), %rax	# p, tmp82
	movzwl	(%rax), %eax	# p_1->code, D.24295
	movzwl	%ax, %eax	# D.24295, D.24293
	subl	$32, %eax	#, tmp83
	cmpl	$5, %eax	#, tmp83
	ja	.L249	#,
	movl	%eax, %eax	# tmp83, tmp84
	movq	.L241(,%rax,8), %rax	#, tmp85
	jmp	*%rax	# tmp85
	.section	.rodata
	.align 8
	.align 4
.L241:
	.quad	.L240
	.quad	.L242
	.quad	.L240
	.quad	.L243
	.quad	.L243
	.quad	.L250
	.text
.L240:
	.loc 1 1281 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.152
	movl	-12(%rbp), %edx	# regno, tmp87
	movslq	%edx, %rdx	# tmp87, tmp86
	addq	$4, %rdx	#, tmp88
	movq	(%rax,%rdx,8), %rax	# reg_n_info.152_15->data.reg, D.24294
	movl	4(%rax), %edx	# _16->last_uid, D.24292
	movq	-8(%rbp), %rax	# p, tmp89
	movl	8(%rax), %eax	# p_1->fld[0].rtint, D.24292
	cmpl	%eax, %edx	# D.24292, D.24292
	jne	.L246	#,
	.loc 1 1282 0
	movl	$1, %eax	#, D.24292
	jmp	.L237	#
.L246:
	.loc 1 1283 0
	jmp	.L245	#
.L242:
	.loc 1 1287 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.153
	movl	-12(%rbp), %edx	# regno, tmp91
	movslq	%edx, %rdx	# tmp91, tmp90
	addq	$4, %rdx	#, tmp92
	movq	(%rax,%rdx,8), %rax	# reg_n_info.153_20->data.reg, D.24294
	movl	4(%rax), %edx	# _21->last_uid, D.24292
	movq	-8(%rbp), %rax	# p, tmp93
	movl	8(%rax), %eax	# p_1->fld[0].rtint, D.24292
	cmpl	%eax, %edx	# D.24292, D.24292
	jne	.L247	#,
	.loc 1 1288 0
	movl	$1, %eax	#, D.24292
	jmp	.L237	#
.L247:
	.loc 1 1290 0
	movl	$0, %eax	#, D.24292
	jmp	.L237	#
.L243:
	.loc 1 1295 0
	movl	$0, %eax	#, D.24292
	jmp	.L237	#
.L249:
	.loc 1 1298 0
	nop
	jmp	.L245	#
.L250:
	.loc 1 1276 0
	nop
.L245:
	.loc 1 1271 0
	movq	-8(%rbp), %rax	# p, tmp94
	movq	24(%rax), %rax	# p_1->fld[2].rtx, tmp95
	movq	%rax, -8(%rbp)	# tmp95, p
.L238:
	.loc 1 1271 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, p
	jne	.L248	#,
	.loc 1 1307 0 is_stmt 1
	movl	$1, %eax	#, D.24292
.L237:
	.loc 1 1308 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	reg_in_basic_block_p, .-reg_in_basic_block_p
	.type	libcall_benefit, @function
libcall_benefit:
.LFB10:
	.loc 1 1317 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# last, last
	.loc 1 1319 0
	movl	$0, -12(%rbp)	#, benefit
	.loc 1 1321 0
	movq	-24(%rbp), %rax	# last, tmp68
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp68,
	call	find_reg_note	#
	movq	8(%rax), %rax	# _6->fld[0].rtx, tmp69
	movq	%rax, -8(%rbp)	# tmp69, insn
	jmp	.L252	#
.L255:
	.loc 1 1324 0
	movq	-8(%rbp), %rax	# insn, tmp70
	movzwl	(%rax), %eax	# insn_1->code, D.24297
	cmpw	$34, %ax	#, D.24297
	jne	.L253	#,
	.loc 1 1325 0
	addl	$10, -12(%rbp)	#, benefit
	jmp	.L254	#
.L253:
	.loc 1 1327 0
	movq	-8(%rbp), %rax	# insn, tmp71
	movzwl	(%rax), %eax	# insn_1->code, D.24297
	cmpw	$32, %ax	#, D.24297
	jne	.L254	#,
	.loc 1 1328 0
	movq	-8(%rbp), %rax	# insn, tmp72
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.24296
	movzwl	(%rax), %eax	# _11->code, D.24297
	cmpw	$48, %ax	#, D.24297
	je	.L254	#,
	.loc 1 1329 0
	movq	-8(%rbp), %rax	# insn, tmp73
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.24296
	movzwl	(%rax), %eax	# _13->code, D.24297
	cmpw	$49, %ax	#, D.24297
	je	.L254	#,
	.loc 1 1330 0
	addl	$1, -12(%rbp)	#, benefit
.L254:
	.loc 1 1322 0
	movq	-8(%rbp), %rax	# insn, tmp74
	movq	24(%rax), %rax	# insn_1->fld[2].rtx, tmp75
	movq	%rax, -8(%rbp)	# tmp75, insn
.L252:
	.loc 1 1321 0 discriminator 1
	movq	-8(%rbp), %rax	# insn, tmp76
	cmpq	-24(%rbp), %rax	# last, tmp76
	jne	.L255	#,
	.loc 1 1333 0
	movl	-12(%rbp), %eax	# benefit, D.24298
	.loc 1 1334 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	libcall_benefit, .-libcall_benefit
	.type	skip_consec_insns, @function
skip_consec_insns:
.LFB11:
	.loc 1 1342 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	movl	%esi, -28(%rbp)	# count, count
	.loc 1 1343 0
	jmp	.L258	#
.L260:
.LBB9:
	.loc 1 1350 0
	movq	-24(%rbp), %rax	# insn, tmp63
	movzwl	(%rax), %eax	# insn_2->code, D.24299
	cmpw	$37, %ax	#, D.24299
	je	.L259	#,
	.loc 1 1351 0
	movq	-24(%rbp), %rax	# insn, tmp64
	movl	$0, %edx	#,
	movl	$7, %esi	#,
	movq	%rax, %rdi	# tmp64,
	call	find_reg_note	#
	movq	%rax, -8(%rbp)	# tmp65, temp
	cmpq	$0, -8(%rbp)	#, temp
	je	.L259	#,
	.loc 1 1352 0
	movq	-8(%rbp), %rax	# temp, tmp66
	movq	8(%rax), %rax	# temp_7->fld[0].rtx, tmp67
	movq	%rax, -24(%rbp)	# tmp67, insn
.L259:
	.loc 1 1355 0 discriminator 1
	movq	-24(%rbp), %rax	# insn, tmp68
	movq	24(%rax), %rax	# insn_1->fld[2].rtx, tmp69
	movq	%rax, -24(%rbp)	# tmp69, insn
	.loc 1 1356 0 discriminator 1
	movq	-24(%rbp), %rax	# insn, tmp70
	movzwl	(%rax), %eax	# insn_9->code, D.24299
	cmpw	$37, %ax	#, D.24299
	je	.L259	#,
.LBE9:
	.loc 1 1343 0
	subl	$1, -28(%rbp)	#, count
.L258:
	.loc 1 1343 0 is_stmt 0 discriminator 1
	cmpl	$0, -28(%rbp)	#, count
	jg	.L260	#,
	.loc 1 1359 0 is_stmt 1
	movq	-24(%rbp), %rax	# insn, D.24300
	.loc 1 1360 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	skip_consec_insns, .-skip_consec_insns
	.type	ignore_some_movables, @function
ignore_some_movables:
.LFB12:
	.loc 1 1370 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# movables, movables
	.loc 1 1373 0
	movq	-40(%rbp), %rax	# movables, tmp62
	movq	(%rax), %rax	# movables_4(D)->head, tmp63
	movq	%rax, -32(%rbp)	# tmp63, m
	jmp	.L263	#
.L270:
.LBB10:
	.loc 1 1376 0
	movq	-32(%rbp), %rax	# m, tmp64
	movq	(%rax), %rax	# m_1->insn, D.24301
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# D.24301,
	call	find_reg_note	#
	movq	%rax, -8(%rbp)	# tmp65, note
	.loc 1 1377 0
	cmpq	$0, -8(%rbp)	#, note
	je	.L264	#,
.LBB11:
	.loc 1 1386 0
	movq	-8(%rbp), %rax	# note, tmp66
	movq	8(%rax), %rax	# note_7->fld[0].rtx, tmp67
	movq	%rax, -16(%rbp)	# tmp67, insn
	jmp	.L265	#
.L269:
	.loc 1 1387 0
	movq	-40(%rbp), %rax	# movables, tmp68
	movq	(%rax), %rax	# movables_4(D)->head, tmp69
	movq	%rax, -24(%rbp)	# tmp69, m1
	jmp	.L266	#
.L268:
	.loc 1 1388 0
	movq	-24(%rbp), %rax	# m1, tmp70
	movq	(%rax), %rax	# m1_2->insn, D.24301
	cmpq	-16(%rbp), %rax	# insn, D.24301
	jne	.L267	#,
	.loc 1 1389 0
	movq	-24(%rbp), %rax	# m1, tmp71
	movzbl	44(%rax), %edx	# m1_2->done, tmp74
	orl	$8, %edx	#, tmp75
	movb	%dl, 44(%rax)	# tmp75, m1_2->done
.L267:
	.loc 1 1387 0
	movq	-24(%rbp), %rax	# m1, tmp76
	movq	72(%rax), %rax	# m1_2->next, tmp77
	movq	%rax, -24(%rbp)	# tmp77, m1
.L266:
	.loc 1 1387 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# m1, tmp78
	cmpq	-32(%rbp), %rax	# m, tmp78
	jne	.L268	#,
	.loc 1 1386 0 is_stmt 1
	movq	-16(%rbp), %rax	# insn, tmp79
	movq	24(%rax), %rax	# insn_3->fld[2].rtx, tmp80
	movq	%rax, -16(%rbp)	# tmp80, insn
.L265:
	.loc 1 1386 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# m, tmp81
	movq	(%rax), %rax	# m_1->insn, D.24301
	cmpq	-16(%rbp), %rax	# insn, D.24301
	jne	.L269	#,
.L264:
.LBE11:
.LBE10:
	.loc 1 1373 0 is_stmt 1
	movq	-32(%rbp), %rax	# m, tmp82
	movq	72(%rax), %rax	# m_1->next, tmp83
	movq	%rax, -32(%rbp)	# tmp83, m
.L263:
	.loc 1 1373 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, m
	jne	.L270	#,
	.loc 1 1392 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE12:
	.size	ignore_some_movables, .-ignore_some_movables
	.type	force_movables, @function
force_movables:
.LFB13:
	.loc 1 1402 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)	# movables, movables
	.loc 1 1405 0
	movq	-40(%rbp), %rax	# movables, tmp86
	movq	(%rax), %rax	# movables_4(D)->head, tmp87
	movq	%rax, -8(%rbp)	# tmp87, m1
	jmp	.L272	#
.L279:
	.loc 1 1407 0
	movq	-8(%rbp), %rax	# m1, tmp88
	movzbl	44(%rax), %eax	# *m1_3, D.24302
	andl	$16, %eax	#, D.24302
	testb	%al, %al	# D.24302
	jne	.L273	#,
	.loc 1 1407 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# m1, tmp89
	movzbl	44(%rax), %eax	# *m1_3, D.24302
	andl	$8, %eax	#, D.24302
	testb	%al, %al	# D.24302
	jne	.L273	#,
.LBB12:
	.loc 1 1409 0 is_stmt 1
	movq	-8(%rbp), %rax	# m1, tmp90
	movl	36(%rax), %eax	# m1_3->regno, D.24303
	movl	%eax, -20(%rbp)	# D.24303, regno
	.loc 1 1410 0
	movq	-8(%rbp), %rax	# m1, tmp91
	movq	72(%rax), %rax	# m1_3->next, tmp92
	movq	%rax, -16(%rbp)	# tmp92, m
	jmp	.L274	#
.L277:
	.loc 1 1417 0
	movq	-16(%rbp), %rax	# m, tmp93
	movq	(%rax), %rax	# m_1->insn, D.24304
	movl	8(%rax), %edx	# _13->fld[0].rtint, D.24305
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.154
	movl	-20(%rbp), %ecx	# regno, tmp95
	movslq	%ecx, %rcx	# tmp95, tmp94
	addq	$4, %rcx	#, tmp96
	movq	(%rax,%rcx,8), %rax	# reg_n_info.154_15->data.reg, D.24306
	movl	4(%rax), %eax	# _16->last_uid, D.24305
	cmpl	%eax, %edx	# D.24305, D.24305
	jne	.L275	#,
	.loc 1 1418 0
	movq	-16(%rbp), %rax	# m, tmp97
	movzbl	44(%rax), %eax	# *m_1, D.24302
	andl	$8, %eax	#, D.24302
	testb	%al, %al	# D.24302
	jne	.L275	#,
	.loc 1 1419 0
	jmp	.L276	#
.L275:
	.loc 1 1410 0
	movq	-16(%rbp), %rax	# m, tmp98
	movq	72(%rax), %rax	# m_1->next, tmp99
	movq	%rax, -16(%rbp)	# tmp99, m
.L274:
	.loc 1 1410 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, m
	jne	.L277	#,
.L276:
	.loc 1 1420 0 is_stmt 1
	cmpq	$0, -16(%rbp)	#, m
	je	.L278	#,
	.loc 1 1420 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# m, tmp100
	movq	8(%rax), %rdx	# m_1->set_src, D.24304
	movq	-8(%rbp), %rax	# m1, tmp101
	movq	16(%rax), %rax	# m1_3->set_dest, D.24304
	cmpq	%rax, %rdx	# D.24304, D.24304
	jne	.L278	#,
	.loc 1 1422 0 is_stmt 1
	movq	-16(%rbp), %rax	# m, tmp102
	movl	32(%rax), %eax	# m_1->consec, D.24305
	testl	%eax, %eax	# D.24305
	jne	.L278	#,
	.loc 1 1423 0
	movq	$0, -16(%rbp)	#, m
.L278:
	.loc 1 1427 0
	cmpq	$0, -16(%rbp)	#, m
	je	.L273	#,
	.loc 1 1429 0
	movq	-16(%rbp), %rax	# m, tmp103
	movq	-8(%rbp), %rdx	# m1, tmp104
	movq	%rdx, 64(%rax)	# tmp104, m_2->forces
	.loc 1 1430 0
	movq	-8(%rbp), %rax	# m1, tmp105
	movzwl	40(%rax), %eax	# m1_3->lifetime, D.24307
	movl	%eax, %edx	# D.24307, D.24308
	movq	-16(%rbp), %rax	# m, tmp106
	movzwl	40(%rax), %eax	# m_2->lifetime, D.24307
	addl	%edx, %eax	# D.24308, D.24308
	movl	%eax, %edx	# D.24308, D.24307
	movq	-8(%rbp), %rax	# m1, tmp107
	movw	%dx, 40(%rax)	# D.24307, m1_3->lifetime
	.loc 1 1431 0
	movq	-8(%rbp), %rax	# m1, tmp108
	movzwl	42(%rax), %eax	# m1_3->savings, D.24307
	movl	%eax, %edx	# D.24307, D.24308
	movq	-16(%rbp), %rax	# m, tmp109
	movzwl	42(%rax), %eax	# m_2->savings, D.24307
	addl	%edx, %eax	# D.24308, D.24308
	movl	%eax, %edx	# D.24308, D.24307
	movq	-8(%rbp), %rax	# m1, tmp110
	movw	%dx, 42(%rax)	# D.24307, m1_3->savings
.L273:
.LBE12:
	.loc 1 1405 0
	movq	-8(%rbp), %rax	# m1, tmp111
	movq	72(%rax), %rax	# m1_3->next, tmp112
	movq	%rax, -8(%rbp)	# tmp112, m1
.L272:
	.loc 1 1405 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, m1
	jne	.L279	#,
	.loc 1 1434 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE13:
	.size	force_movables, .-force_movables
	.type	combine_movables, @function
combine_movables:
.LFB14:
	.loc 1 1443 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# movables, movables
	movq	%rsi, -80(%rbp)	# regs, regs
	.loc 1 1445 0
	movq	-80(%rbp), %rax	# regs, tmp140
	movl	(%rax), %eax	# regs_8(D)->num, D.24309
	cltq
	movq	%rax, %rdi	# D.24310,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp141, matched_regs
	.loc 1 1452 0
	movq	-72(%rbp), %rax	# movables, tmp142
	movq	(%rax), %rax	# movables_12(D)->head, tmp143
	movq	%rax, -40(%rbp)	# tmp143, m
	jmp	.L281	#
.L285:
	.loc 1 1453 0
	movq	-40(%rbp), %rax	# m, tmp144
	movq	56(%rax), %rax	# m_1->match, D.24311
	testq	%rax, %rax	# D.24311
	jne	.L282	#,
	.loc 1 1453 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# regs, tmp145
	movq	8(%rax), %rcx	# regs_8(D)->array, D.24312
	movq	-40(%rbp), %rax	# m, tmp146
	movl	36(%rax), %eax	# m_1->regno, D.24313
	movl	%eax, %edx	# D.24313, D.24310
	movq	%rdx, %rax	# D.24310, tmp147
	addq	%rax, %rax	# tmp147
	addq	%rdx, %rax	# D.24310, tmp147
	salq	$3, %rax	#, tmp148
	addq	%rcx, %rax	# D.24312, D.24312
	movl	4(%rax), %eax	# _19->n_times_set, D.24309
	cmpl	$1, %eax	#, D.24309
	jne	.L282	#,
	.loc 1 1454 0 is_stmt 1
	movq	-40(%rbp), %rax	# m, tmp149
	movzbl	44(%rax), %eax	# *m_1, D.24314
	andl	$16, %eax	#, D.24314
	testb	%al, %al	# D.24314
	jne	.L282	#,
.LBB13:
	.loc 1 1457 0
	movq	-40(%rbp), %rax	# m, tmp150
	movl	36(%rax), %eax	# m_1->regno, D.24313
	movl	%eax, -52(%rbp)	# D.24313, regno
	.loc 1 1459 0
	movq	-80(%rbp), %rax	# regs, tmp151
	movl	(%rax), %eax	# regs_8(D)->num, D.24309
	movslq	%eax, %rdx	# D.24309, D.24310
	movq	-8(%rbp), %rax	# matched_regs, tmp152
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp152,
	call	memset	#
	.loc 1 1460 0
	movl	-52(%rbp), %eax	# regno, tmp153
	movslq	%eax, %rdx	# tmp153, D.24315
	movq	-8(%rbp), %rax	# matched_regs, tmp154
	addq	%rdx, %rax	# D.24315, D.24316
	movb	$1, (%rax)	#, *_28
	.loc 1 1464 0
	movq	-40(%rbp), %rax	# m, tmp155
	movq	72(%rax), %rax	# m_1->next, tmp156
	movq	%rax, -32(%rbp)	# tmp156, m1
	jmp	.L283	#
.L284:
	movq	-32(%rbp), %rax	# m1, tmp157
	movq	72(%rax), %rax	# m1_4->next, tmp158
	movq	%rax, -32(%rbp)	# tmp158, m1
.L283:
	.loc 1 1464 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, m1
	jne	.L284	#,
.L282:
.LBE13:
	.loc 1 1452 0 is_stmt 1
	movq	-40(%rbp), %rax	# m, tmp159
	movq	72(%rax), %rax	# m_1->next, tmp160
	movq	%rax, -40(%rbp)	# tmp160, m
.L281:
	.loc 1 1452 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, m
	jne	.L285	#,
	.loc 1 1509 0 is_stmt 1
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, tmp161
	movl	%eax, -56(%rbp)	# tmp161, mode
	jmp	.L286	#
.L296:
.LBB14:
	.loc 1 1512 0
	movq	$0, -24(%rbp)	#, m0
	.loc 1 1516 0
	movq	-72(%rbp), %rax	# movables, tmp162
	movq	(%rax), %rax	# movables_12(D)->head, tmp163
	movq	%rax, -40(%rbp)	# tmp163, m
	jmp	.L287	#
.L295:
	.loc 1 1517 0
	movq	-40(%rbp), %rax	# m, tmp164
	movzbl	44(%rax), %eax	# *m_2, D.24314
	andl	$16, %eax	#, D.24314
	testb	%al, %al	# D.24314
	je	.L288	#,
	.loc 1 1517 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# m, tmp165
	movzbl	44(%rax), %eax	# *m_2, D.24314
	andl	$4, %eax	#, D.24314
	testb	%al, %al	# D.24314
	jne	.L288	#,
	.loc 1 1518 0 is_stmt 1
	movq	-40(%rbp), %rax	# m, tmp166
	movq	(%rax), %rax	# m_2->insn, D.24317
	movq	24(%rax), %rax	# _39->fld[2].rtx, D.24317
	movq	32(%rax), %rax	# _40->fld[3].rtx, D.24317
	movq	16(%rax), %rax	# _41->fld[1].rtx, D.24317
	movzbl	2(%rax), %eax	# _42->mode, D.24314
	movzbl	%al, %eax	# D.24314, D.24313
	cmpl	-56(%rbp), %eax	# mode, D.24313
	jne	.L288	#,
.LBB15:
	.loc 1 1522 0
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.155
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.156
	movq	-40(%rbp), %rdx	# m, tmp167
	movl	36(%rdx), %edx	# m_2->regno, D.24313
	movl	%edx, %edx	# D.24313, tmp168
	addq	$4, %rdx	#, tmp169
	movq	(%rax,%rdx,8), %rax	# reg_n_info.156_46->data.reg, D.24318
	movl	(%rax), %eax	# _48->first_uid, D.24309
	cltq
	salq	$2, %rax	#, D.24310
	addq	%rcx, %rax	# uid_luid.155, D.24319
	movl	(%rax), %eax	# *_52, tmp170
	movl	%eax, -48(%rbp)	# tmp170, first
	.loc 1 1523 0
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.157
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.158
	movq	-40(%rbp), %rdx	# m, tmp171
	movl	36(%rdx), %edx	# m_2->regno, D.24313
	movl	%edx, %edx	# D.24313, tmp172
	addq	$4, %rdx	#, tmp173
	movq	(%rax,%rdx,8), %rax	# reg_n_info.158_55->data.reg, D.24318
	movl	4(%rax), %eax	# _57->last_uid, D.24309
	cltq
	salq	$2, %rax	#, D.24310
	addq	%rcx, %rax	# uid_luid.157, D.24319
	movl	(%rax), %eax	# *_61, tmp174
	movl	%eax, -44(%rbp)	# tmp174, last
	.loc 1 1525 0
	cmpq	$0, -24(%rbp)	#, m0
	jne	.L289	#,
	.loc 1 1528 0
	movq	-40(%rbp), %rax	# m, tmp175
	movq	%rax, -24(%rbp)	# tmp175, m0
	.loc 1 1529 0
	jmp	.L288	#
.L289:
	.loc 1 1534 0
	movq	-40(%rbp), %rax	# m, tmp176
	movq	16(%rax), %rax	# m_2->set_dest, D.24317
	movzbl	2(%rax), %edx	# _64->mode, D.24314
	movq	-24(%rbp), %rax	# m0, tmp177
	movq	16(%rax), %rax	# m0_6->set_dest, D.24317
	movzbl	2(%rax), %eax	# _66->mode, D.24314
	cmpb	%al, %dl	# D.24314, D.24314
	je	.L290	#,
	.loc 1 1535 0
	jmp	.L288	#
.L290:
	.loc 1 1539 0
	movq	-72(%rbp), %rax	# movables, tmp178
	movq	(%rax), %rax	# movables_12(D)->head, tmp179
	movq	%rax, -16(%rbp)	# tmp179, m1
	jmp	.L291	#
.L294:
	.loc 1 1540 0
	movq	-16(%rbp), %rax	# m1, tmp180
	cmpq	-24(%rbp), %rax	# m0, tmp180
	je	.L292	#,
	.loc 1 1540 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# m1, tmp181
	movzbl	44(%rax), %eax	# *m1_7, D.24314
	andl	$16, %eax	#, D.24314
	testb	%al, %al	# D.24314
	je	.L293	#,
	movq	-16(%rbp), %rax	# m1, tmp182
	movq	56(%rax), %rax	# m1_7->match, D.24311
	cmpq	-24(%rbp), %rax	# m0, D.24311
	jne	.L293	#,
.L292:
	.loc 1 1541 0 is_stmt 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.159
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.160
	movq	-16(%rbp), %rdx	# m1, tmp183
	movl	36(%rdx), %edx	# m1_7->regno, D.24313
	movl	%edx, %edx	# D.24313, tmp184
	addq	$4, %rdx	#, tmp185
	movq	(%rax,%rdx,8), %rax	# reg_n_info.160_73->data.reg, D.24318
	movl	(%rax), %eax	# _75->first_uid, D.24309
	cltq
	salq	$2, %rax	#, D.24310
	addq	%rcx, %rax	# uid_luid.159, D.24319
	movl	(%rax), %eax	# *_79, D.24309
	cmpl	-44(%rbp), %eax	# last, D.24309
	jg	.L293	#,
	.loc 1 1542 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.161
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.162
	movq	-16(%rbp), %rdx	# m1, tmp186
	movl	36(%rdx), %edx	# m1_7->regno, D.24313
	movl	%edx, %edx	# D.24313, tmp187
	addq	$4, %rdx	#, tmp188
	movq	(%rax,%rdx,8), %rax	# reg_n_info.162_82->data.reg, D.24318
	movl	4(%rax), %eax	# _84->last_uid, D.24309
	cltq
	salq	$2, %rax	#, D.24310
	addq	%rcx, %rax	# uid_luid.161, D.24319
	movl	(%rax), %eax	# *_88, D.24309
	.loc 1 1541 0 discriminator 1
	cmpl	-48(%rbp), %eax	# first, D.24309
	jl	.L293	#,
	.loc 1 1543 0
	jmp	.L288	#
.L293:
	.loc 1 1539 0
	movq	-16(%rbp), %rax	# m1, tmp189
	movq	72(%rax), %rax	# m1_7->next, tmp190
	movq	%rax, -16(%rbp)	# tmp190, m1
.L291:
	.loc 1 1539 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# m1, tmp191
	cmpq	-40(%rbp), %rax	# m, tmp191
	jne	.L294	#,
	.loc 1 1546 0 is_stmt 1
	movq	-24(%rbp), %rax	# m0, tmp192
	movzwl	40(%rax), %eax	# m0_6->lifetime, D.24320
	movl	%eax, %edx	# D.24320, D.24321
	movq	-40(%rbp), %rax	# m, tmp193
	movzwl	40(%rax), %eax	# m_2->lifetime, D.24320
	addl	%edx, %eax	# D.24321, D.24321
	movl	%eax, %edx	# D.24321, D.24320
	movq	-24(%rbp), %rax	# m0, tmp194
	movw	%dx, 40(%rax)	# D.24320, m0_6->lifetime
	.loc 1 1547 0
	movq	-24(%rbp), %rax	# m0, tmp195
	movzwl	42(%rax), %eax	# m0_6->savings, D.24320
	movl	%eax, %edx	# D.24320, D.24321
	movq	-40(%rbp), %rax	# m, tmp196
	movzwl	42(%rax), %eax	# m_2->savings, D.24320
	addl	%edx, %eax	# D.24321, D.24321
	movl	%eax, %edx	# D.24321, D.24320
	movq	-24(%rbp), %rax	# m0, tmp197
	movw	%dx, 42(%rax)	# D.24320, m0_6->savings
	.loc 1 1548 0
	movq	-40(%rbp), %rax	# m, tmp198
	movzbl	44(%rax), %edx	# m_2->done, tmp201
	orl	$8, %edx	#, tmp202
	movb	%dl, 44(%rax)	# tmp202, m_2->done
	.loc 1 1549 0
	movq	-40(%rbp), %rax	# m, tmp203
	movq	-24(%rbp), %rdx	# m0, tmp204
	movq	%rdx, 56(%rax)	# tmp204, m_2->match
.L288:
.LBE15:
	.loc 1 1516 0
	movq	-40(%rbp), %rax	# m, tmp205
	movq	72(%rax), %rax	# m_2->next, tmp206
	movq	%rax, -40(%rbp)	# tmp206, m
.L287:
	.loc 1 1516 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, m
	jne	.L295	#,
.LBE14:
	.loc 1 1510 0 is_stmt 1
	movl	-56(%rbp), %eax	# mode, mode.163
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.24314
	movzbl	%al, %eax	# D.24314, tmp208
	movl	%eax, -56(%rbp)	# tmp208, mode
.L286:
	.loc 1 1509 0 discriminator 1
	cmpl	$0, -56(%rbp)	#, mode
	jne	.L296	#,
	.loc 1 1557 0
	movq	-8(%rbp), %rax	# matched_regs, tmp209
	movq	%rax, %rdi	# tmp209,
	call	free	#
	.loc 1 1558 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE14:
	.size	combine_movables, .-combine_movables
	.type	num_unmoved_movables, @function
num_unmoved_movables:
.LFB15:
	.loc 1 1566 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# loop, loop
	.loc 1 1567 0
	movl	$0, -12(%rbp)	#, num
	.loc 1 1570 0
	movq	-24(%rbp), %rax	# loop, tmp64
	movq	160(%rax), %rax	# loop_5(D)->aux, D.24322
	movq	168(%rax), %rax	# MEM[(struct loop_info *)_6].movables.head, tmp65
	movq	%rax, -8(%rbp)	# tmp65, m
	jmp	.L298	#
.L300:
	.loc 1 1571 0
	movq	-8(%rbp), %rax	# m, tmp66
	movzbl	44(%rax), %eax	# *m_3, D.24323
	andl	$8, %eax	#, D.24323
	testb	%al, %al	# D.24323
	jne	.L299	#,
	.loc 1 1572 0
	addl	$1, -12(%rbp)	#, num
.L299:
	.loc 1 1570 0
	movq	-8(%rbp), %rax	# m, tmp67
	movq	72(%rax), %rax	# m_3->next, tmp68
	movq	%rax, -8(%rbp)	# tmp68, m
.L298:
	.loc 1 1570 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, m
	jne	.L300	#,
	.loc 1 1574 0 is_stmt 1
	movl	-12(%rbp), %eax	# num, D.24324
	.loc 1 1575 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE15:
	.size	num_unmoved_movables, .-num_unmoved_movables
	.type	regs_match_p, @function
regs_match_p:
.LFB16:
	.loc 1 1584 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# y, y
	movq	%rdx, -56(%rbp)	# movables, movables
	.loc 1 1585 0
	movq	-40(%rbp), %rax	# x, tmp69
	movl	8(%rax), %eax	# x_4(D)->fld[0].rtuint, tmp70
	movl	%eax, -24(%rbp)	# tmp70, xn
	.loc 1 1586 0
	movq	-48(%rbp), %rax	# y, tmp71
	movl	8(%rax), %eax	# y_6(D)->fld[0].rtuint, tmp72
	movl	%eax, -20(%rbp)	# tmp72, yn
	.loc 1 1589 0
	movq	-56(%rbp), %rax	# movables, tmp73
	movq	(%rax), %rax	# movables_8(D)->head, tmp74
	movq	%rax, -16(%rbp)	# tmp74, mx
	jmp	.L303	#
.L306:
	.loc 1 1590 0
	movq	-16(%rbp), %rax	# mx, tmp75
	movl	36(%rax), %eax	# mx_1->regno, D.24325
	cmpl	-24(%rbp), %eax	# xn, D.24325
	jne	.L304	#,
	.loc 1 1591 0
	jmp	.L305	#
.L304:
	.loc 1 1589 0
	movq	-16(%rbp), %rax	# mx, tmp76
	movq	72(%rax), %rax	# mx_1->next, tmp77
	movq	%rax, -16(%rbp)	# tmp77, mx
.L303:
	.loc 1 1589 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, mx
	jne	.L306	#,
.L305:
	.loc 1 1593 0 is_stmt 1
	movq	-56(%rbp), %rax	# movables, tmp78
	movq	(%rax), %rax	# movables_8(D)->head, tmp79
	movq	%rax, -8(%rbp)	# tmp79, my
	jmp	.L307	#
.L310:
	.loc 1 1594 0
	movq	-8(%rbp), %rax	# my, tmp80
	movl	36(%rax), %eax	# my_2->regno, D.24325
	cmpl	-20(%rbp), %eax	# yn, D.24325
	jne	.L308	#,
	.loc 1 1595 0
	jmp	.L309	#
.L308:
	.loc 1 1593 0
	movq	-8(%rbp), %rax	# my, tmp81
	movq	72(%rax), %rax	# my_2->next, tmp82
	movq	%rax, -8(%rbp)	# tmp82, my
.L307:
	.loc 1 1593 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, my
	jne	.L310	#,
.L309:
	.loc 1 1598 0 is_stmt 1
	cmpq	$0, -16(%rbp)	#, mx
	je	.L311	#,
	.loc 1 1597 0
	cmpq	$0, -8(%rbp)	#, my
	je	.L311	#,
	.loc 1 1598 0
	movq	-16(%rbp), %rax	# mx, tmp83
	movq	56(%rax), %rdx	# mx_1->match, D.24326
	movq	-8(%rbp), %rax	# my, tmp84
	movq	56(%rax), %rax	# my_2->match, D.24326
	cmpq	%rax, %rdx	# D.24326, D.24326
	jne	.L312	#,
	.loc 1 1598 0 is_stmt 0 discriminator 2
	movq	-16(%rbp), %rax	# mx, tmp85
	movq	56(%rax), %rax	# mx_1->match, D.24326
	testq	%rax, %rax	# D.24326
	jne	.L313	#,
.L312:
	.loc 1 1599 0 is_stmt 1
	movq	-16(%rbp), %rax	# mx, tmp86
	movq	56(%rax), %rax	# mx_1->match, D.24326
	cmpq	-8(%rbp), %rax	# my, D.24326
	je	.L313	#,
	.loc 1 1600 0
	movq	-8(%rbp), %rax	# my, tmp87
	movq	56(%rax), %rax	# my_2->match, D.24326
	cmpq	-16(%rbp), %rax	# mx, D.24326
	jne	.L311	#,
.L313:
	.loc 1 1598 0 discriminator 1
	movl	$1, %eax	#, iftmp.164
	jmp	.L314	#
.L311:
	movl	$0, %eax	#, iftmp.164
.L314:
	.loc 1 1601 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE16:
	.size	regs_match_p, .-regs_match_p
	.type	rtx_equal_for_loop_p, @function
rtx_equal_for_loop_p:
.LFB17:
	.loc 1 1614 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# y, y
	movq	%rdx, -56(%rbp)	# movables, movables
	movq	%rcx, -64(%rbp)	# regs, regs
	.loc 1 1621 0
	movq	-40(%rbp), %rax	# x, tmp147
	cmpq	-48(%rbp), %rax	# y, tmp147
	jne	.L317	#,
	.loc 1 1622 0
	movl	$1, %eax	#, D.24328
	jmp	.L318	#
.L317:
	.loc 1 1623 0
	cmpq	$0, -40(%rbp)	#, x
	je	.L319	#,
	.loc 1 1623 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, y
	jne	.L320	#,
.L319:
	.loc 1 1624 0 is_stmt 1
	movl	$0, %eax	#, D.24328
	jmp	.L318	#
.L320:
	.loc 1 1626 0
	movq	-40(%rbp), %rax	# x, tmp148
	movzwl	(%rax), %eax	# x_7(D)->code, D.24329
	movzwl	%ax, %eax	# D.24329, tmp149
	movl	%eax, -20(%rbp)	# tmp149, code
	.loc 1 1630 0
	movq	-40(%rbp), %rax	# x, tmp150
	movzwl	(%rax), %eax	# x_7(D)->code, D.24329
	cmpw	$61, %ax	#, D.24329
	jne	.L321	#,
	.loc 1 1630 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# regs, tmp151
	movq	8(%rax), %rcx	# regs_13(D)->array, D.24330
	movq	-40(%rbp), %rax	# x, tmp152
	movl	8(%rax), %eax	# x_7(D)->fld[0].rtuint, D.24331
	movl	%eax, %edx	# D.24331, D.24332
	movq	%rdx, %rax	# D.24332, tmp153
	addq	%rax, %rax	# tmp153
	addq	%rdx, %rax	# D.24332, tmp153
	salq	$3, %rax	#, tmp154
	addq	%rcx, %rax	# D.24330, D.24330
	movl	(%rax), %eax	# _18->set_in_loop, D.24328
	cmpl	$-2, %eax	#, D.24328
	jne	.L321	#,
	.loc 1 1631 0 is_stmt 1
	movq	-48(%rbp), %rax	# y, tmp155
	movzwl	(%rax), %eax	# y_8(D)->code, D.24329
	cmpw	$67, %ax	#, D.24329
	je	.L322	#,
	.loc 1 1631 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# y, tmp156
	movzwl	(%rax), %eax	# y_8(D)->code, D.24329
	cmpw	$68, %ax	#, D.24329
	je	.L322	#,
	movq	-48(%rbp), %rax	# y, tmp157
	movzwl	(%rax), %eax	# y_8(D)->code, D.24329
	cmpw	$54, %ax	#, D.24329
	je	.L322	#,
	movq	-48(%rbp), %rax	# y, tmp158
	movzwl	(%rax), %eax	# y_8(D)->code, D.24329
	cmpw	$55, %ax	#, D.24329
	je	.L322	#,
	movq	-48(%rbp), %rax	# y, tmp159
	movzwl	(%rax), %eax	# y_8(D)->code, D.24329
	cmpw	$58, %ax	#, D.24329
	je	.L322	#,
	movq	-48(%rbp), %rax	# y, tmp160
	movzwl	(%rax), %eax	# y_8(D)->code, D.24329
	cmpw	$134, %ax	#, D.24329
	je	.L322	#,
	movq	-48(%rbp), %rax	# y, tmp161
	movzwl	(%rax), %eax	# y_8(D)->code, D.24329
	cmpw	$56, %ax	#, D.24329
	je	.L322	#,
	movq	-48(%rbp), %rax	# y, tmp162
	movzwl	(%rax), %eax	# y_8(D)->code, D.24329
	cmpw	$140, %ax	#, D.24329
	jne	.L321	#,
.L322:
	.loc 1 1633 0 is_stmt 1
	movq	-56(%rbp), %rax	# movables, tmp163
	movq	(%rax), %rax	# movables_28(D)->head, tmp164
	movq	%rax, -16(%rbp)	# tmp164, m
	jmp	.L323	#
.L325:
	.loc 1 1634 0
	movq	-16(%rbp), %rax	# m, tmp165
	movzbl	44(%rax), %eax	# *m_3, D.24333
	andl	$32, %eax	#, D.24333
	testb	%al, %al	# D.24333
	je	.L324	#,
	.loc 1 1634 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# m, tmp166
	movl	36(%rax), %edx	# m_3->regno, D.24331
	movq	-40(%rbp), %rax	# x, tmp167
	movl	8(%rax), %eax	# x_7(D)->fld[0].rtuint, D.24331
	cmpl	%eax, %edx	# D.24331, D.24331
	jne	.L324	#,
	.loc 1 1635 0 is_stmt 1
	movq	-16(%rbp), %rax	# m, tmp168
	movq	8(%rax), %rax	# m_3->set_src, D.24334
	movq	-48(%rbp), %rdx	# y, tmp169
	movq	%rdx, %rsi	# tmp169,
	movq	%rax, %rdi	# D.24334,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24328
	je	.L324	#,
	.loc 1 1636 0
	movl	$1, %eax	#, D.24328
	jmp	.L318	#
.L324:
	.loc 1 1633 0
	movq	-16(%rbp), %rax	# m, tmp170
	movq	72(%rax), %rax	# m_3->next, tmp171
	movq	%rax, -16(%rbp)	# tmp171, m
.L323:
	.loc 1 1633 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, m
	jne	.L325	#,
	.loc 1 1630 0 is_stmt 1
	jmp	.L326	#
.L321:
	.loc 1 1638 0
	movq	-48(%rbp), %rax	# y, tmp172
	movzwl	(%rax), %eax	# y_8(D)->code, D.24329
	cmpw	$61, %ax	#, D.24329
	jne	.L326	#,
	.loc 1 1638 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# regs, tmp173
	movq	8(%rax), %rcx	# regs_13(D)->array, D.24330
	movq	-48(%rbp), %rax	# y, tmp174
	movl	8(%rax), %eax	# y_8(D)->fld[0].rtuint, D.24331
	movl	%eax, %edx	# D.24331, D.24332
	movq	%rdx, %rax	# D.24332, tmp175
	addq	%rax, %rax	# tmp175
	addq	%rdx, %rax	# D.24332, tmp175
	salq	$3, %rax	#, tmp176
	addq	%rcx, %rax	# D.24330, D.24330
	movl	(%rax), %eax	# _43->set_in_loop, D.24328
	cmpl	$-2, %eax	#, D.24328
	jne	.L326	#,
	.loc 1 1639 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp177
	movzwl	(%rax), %eax	# x_7(D)->code, D.24329
	cmpw	$67, %ax	#, D.24329
	je	.L327	#,
	.loc 1 1639 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp178
	movzwl	(%rax), %eax	# x_7(D)->code, D.24329
	cmpw	$68, %ax	#, D.24329
	je	.L327	#,
	movq	-40(%rbp), %rax	# x, tmp179
	movzwl	(%rax), %eax	# x_7(D)->code, D.24329
	cmpw	$54, %ax	#, D.24329
	je	.L327	#,
	movq	-40(%rbp), %rax	# x, tmp180
	movzwl	(%rax), %eax	# x_7(D)->code, D.24329
	cmpw	$55, %ax	#, D.24329
	je	.L327	#,
	movq	-40(%rbp), %rax	# x, tmp181
	movzwl	(%rax), %eax	# x_7(D)->code, D.24329
	cmpw	$58, %ax	#, D.24329
	je	.L327	#,
	movq	-40(%rbp), %rax	# x, tmp182
	movzwl	(%rax), %eax	# x_7(D)->code, D.24329
	cmpw	$134, %ax	#, D.24329
	je	.L327	#,
	movq	-40(%rbp), %rax	# x, tmp183
	movzwl	(%rax), %eax	# x_7(D)->code, D.24329
	cmpw	$56, %ax	#, D.24329
	je	.L327	#,
	movq	-40(%rbp), %rax	# x, tmp184
	movzwl	(%rax), %eax	# x_7(D)->code, D.24329
	cmpw	$140, %ax	#, D.24329
	jne	.L326	#,
.L327:
	.loc 1 1641 0 is_stmt 1
	movq	-56(%rbp), %rax	# movables, tmp185
	movq	(%rax), %rax	# movables_28(D)->head, tmp186
	movq	%rax, -16(%rbp)	# tmp186, m
	jmp	.L328	#
.L330:
	.loc 1 1642 0
	movq	-16(%rbp), %rax	# m, tmp187
	movzbl	44(%rax), %eax	# *m_4, D.24333
	andl	$32, %eax	#, D.24333
	testb	%al, %al	# D.24333
	je	.L329	#,
	.loc 1 1642 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# m, tmp188
	movl	36(%rax), %edx	# m_4->regno, D.24331
	movq	-48(%rbp), %rax	# y, tmp189
	movl	8(%rax), %eax	# y_8(D)->fld[0].rtuint, D.24331
	cmpl	%eax, %edx	# D.24331, D.24331
	jne	.L329	#,
	.loc 1 1643 0 is_stmt 1
	movq	-16(%rbp), %rax	# m, tmp190
	movq	8(%rax), %rax	# m_4->set_src, D.24334
	movq	-40(%rbp), %rdx	# x, tmp191
	movq	%rdx, %rsi	# tmp191,
	movq	%rax, %rdi	# D.24334,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24328
	je	.L329	#,
	.loc 1 1644 0
	movl	$1, %eax	#, D.24328
	jmp	.L318	#
.L329:
	.loc 1 1641 0
	movq	-16(%rbp), %rax	# m, tmp192
	movq	72(%rax), %rax	# m_4->next, tmp193
	movq	%rax, -16(%rbp)	# tmp193, m
.L328:
	.loc 1 1641 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, m
	jne	.L330	#,
.L326:
	.loc 1 1648 0 is_stmt 1
	movq	-48(%rbp), %rax	# y, tmp194
	movzwl	(%rax), %eax	# y_8(D)->code, D.24329
	movzwl	%ax, %eax	# D.24329, D.24331
	cmpl	-20(%rbp), %eax	# code, D.24331
	je	.L331	#,
	.loc 1 1649 0
	movl	$0, %eax	#, D.24328
	jmp	.L318	#
.L331:
	.loc 1 1654 0
	movq	-40(%rbp), %rax	# x, tmp195
	movzbl	2(%rax), %edx	# x_7(D)->mode, D.24333
	movq	-48(%rbp), %rax	# y, tmp196
	movzbl	2(%rax), %eax	# y_8(D)->mode, D.24333
	cmpb	%al, %dl	# D.24333, D.24333
	je	.L332	#,
	.loc 1 1655 0
	movl	$0, %eax	#, D.24328
	jmp	.L318	#
.L332:
	.loc 1 1658 0
	cmpl	$61, -20(%rbp)	#, code
	jne	.L333	#,
	.loc 1 1659 0
	movq	-40(%rbp), %rax	# x, tmp197
	movl	8(%rax), %edx	# x_7(D)->fld[0].rtuint, D.24331
	movq	-48(%rbp), %rax	# y, tmp198
	movl	8(%rax), %eax	# y_8(D)->fld[0].rtuint, D.24331
	cmpl	%eax, %edx	# D.24331, D.24331
	je	.L334	#,
	.loc 1 1659 0 is_stmt 0 discriminator 2
	movq	-56(%rbp), %rdx	# movables, tmp199
	movq	-48(%rbp), %rcx	# y, tmp200
	movq	-40(%rbp), %rax	# x, tmp201
	movq	%rcx, %rsi	# tmp200,
	movq	%rax, %rdi	# tmp201,
	call	regs_match_p	#
	testl	%eax, %eax	# D.24328
	je	.L335	#,
.L334:
	.loc 1 1659 0 discriminator 1
	movl	$1, %eax	#, iftmp.165
	jmp	.L336	#
.L335:
	.loc 1 1659 0 discriminator 3
	movl	$0, %eax	#, iftmp.165
.L336:
	.loc 1 1659 0 discriminator 4
	jmp	.L318	#
.L333:
	.loc 1 1661 0 is_stmt 1
	cmpl	$67, -20(%rbp)	#, code
	jne	.L337	#,
	.loc 1 1662 0
	movq	-40(%rbp), %rax	# x, tmp202
	movq	8(%rax), %rdx	# x_7(D)->fld[0].rtx, D.24334
	movq	-48(%rbp), %rax	# y, tmp203
	movq	8(%rax), %rax	# y_8(D)->fld[0].rtx, D.24334
	cmpq	%rax, %rdx	# D.24334, D.24334
	sete	%al	#, D.24335
	movzbl	%al, %eax	# D.24335, D.24328
	jmp	.L318	#
.L337:
	.loc 1 1663 0
	cmpl	$68, -20(%rbp)	#, code
	jne	.L338	#,
	.loc 1 1664 0
	movq	-40(%rbp), %rax	# x, tmp204
	movq	8(%rax), %rdx	# x_7(D)->fld[0].rtstr, D.24336
	movq	-48(%rbp), %rax	# y, tmp205
	movq	8(%rax), %rax	# y_8(D)->fld[0].rtstr, D.24336
	cmpq	%rax, %rdx	# D.24336, D.24336
	sete	%al	#, D.24335
	movzbl	%al, %eax	# D.24335, D.24328
	jmp	.L318	#
.L338:
	.loc 1 1669 0
	movl	-20(%rbp), %eax	# code, code.166
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp207
	movq	%rax, -8(%rbp)	# tmp207, fmt
	.loc 1 1670 0
	movl	-20(%rbp), %eax	# code, code.167
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.24333
	movzbl	%al, %eax	# D.24333, D.24328
	subl	$1, %eax	#, tmp209
	movl	%eax, -28(%rbp)	# tmp209, i
	jmp	.L339	#
.L358:
	.loc 1 1672 0
	movl	-28(%rbp), %eax	# i, tmp210
	movslq	%eax, %rdx	# tmp210, D.24337
	movq	-8(%rbp), %rax	# fmt, tmp211
	addq	%rdx, %rax	# D.24337, D.24336
	movzbl	(%rax), %eax	# *_89, D.24338
	movsbl	%al, %eax	# D.24338, D.24328
	cmpl	$105, %eax	#, D.24328
	je	.L341	#,
	cmpl	$105, %eax	#, D.24328
	jg	.L342	#,
	cmpl	$69, %eax	#, D.24328
	je	.L343	#,
	cmpl	$101, %eax	#, D.24328
	je	.L344	#,
	cmpl	$48, %eax	#, D.24328
	je	.L359	#,
	jmp	.L340	#
.L342:
	cmpl	$117, %eax	#, D.24328
	je	.L360	#,
	cmpl	$119, %eax	#, D.24328
	je	.L347	#,
	cmpl	$115, %eax	#, D.24328
	je	.L348	#,
	jmp	.L340	#
.L347:
	.loc 1 1675 0
	movq	-40(%rbp), %rax	# x, tmp212
	movl	-28(%rbp), %edx	# i, tmp214
	movslq	%edx, %rdx	# tmp214, tmp213
	movq	8(%rax,%rdx,8), %rcx	# x_7(D)->fld[i_1].rtwint, D.24339
	movq	-48(%rbp), %rax	# y, tmp215
	movl	-28(%rbp), %edx	# i, tmp217
	movslq	%edx, %rdx	# tmp217, tmp216
	movq	8(%rax,%rdx,8), %rax	# y_8(D)->fld[i_1].rtwint, D.24339
	cmpq	%rax, %rcx	# D.24339, D.24339
	je	.L349	#,
	.loc 1 1676 0
	movl	$0, %eax	#, D.24328
	jmp	.L318	#
.L349:
	.loc 1 1677 0
	jmp	.L350	#
.L341:
	.loc 1 1680 0
	movq	-40(%rbp), %rax	# x, tmp218
	movl	-28(%rbp), %edx	# i, tmp220
	movslq	%edx, %rdx	# tmp220, tmp219
	movl	8(%rax,%rdx,8), %ecx	# x_7(D)->fld[i_1].rtint, D.24328
	movq	-48(%rbp), %rax	# y, tmp221
	movl	-28(%rbp), %edx	# i, tmp223
	movslq	%edx, %rdx	# tmp223, tmp222
	movl	8(%rax,%rdx,8), %eax	# y_8(D)->fld[i_1].rtint, D.24328
	cmpl	%eax, %ecx	# D.24328, D.24328
	je	.L351	#,
	.loc 1 1681 0
	movl	$0, %eax	#, D.24328
	jmp	.L318	#
.L351:
	.loc 1 1682 0
	jmp	.L350	#
.L343:
	.loc 1 1686 0
	movq	-40(%rbp), %rax	# x, tmp224
	movl	-28(%rbp), %edx	# i, tmp226
	movslq	%edx, %rdx	# tmp226, tmp225
	movq	8(%rax,%rdx,8), %rax	# x_7(D)->fld[i_1].rtvec, D.24340
	movl	(%rax), %ecx	# _98->num_elem, D.24328
	movq	-48(%rbp), %rax	# y, tmp227
	movl	-28(%rbp), %edx	# i, tmp229
	movslq	%edx, %rdx	# tmp229, tmp228
	movq	8(%rax,%rdx,8), %rax	# y_8(D)->fld[i_1].rtvec, D.24340
	movl	(%rax), %eax	# _100->num_elem, D.24328
	cmpl	%eax, %ecx	# D.24328, D.24328
	je	.L352	#,
	.loc 1 1687 0
	movl	$0, %eax	#, D.24328
	jmp	.L318	#
.L352:
	.loc 1 1690 0
	movl	$0, -24(%rbp)	#, j
	jmp	.L353	#
.L355:
	.loc 1 1691 0
	movq	-48(%rbp), %rax	# y, tmp230
	movl	-28(%rbp), %edx	# i, tmp232
	movslq	%edx, %rdx	# tmp232, tmp231
	movq	8(%rax,%rdx,8), %rax	# y_8(D)->fld[i_1].rtvec, D.24340
	movl	-24(%rbp), %edx	# j, tmp234
	movslq	%edx, %rdx	# tmp234, tmp233
	movq	8(%rax,%rdx,8), %rsi	# _106->elem, D.24334
	movq	-40(%rbp), %rax	# x, tmp235
	movl	-28(%rbp), %edx	# i, tmp237
	movslq	%edx, %rdx	# tmp237, tmp236
	movq	8(%rax,%rdx,8), %rax	# x_7(D)->fld[i_1].rtvec, D.24340
	movl	-24(%rbp), %edx	# j, tmp239
	movslq	%edx, %rdx	# tmp239, tmp238
	movq	8(%rax,%rdx,8), %rax	# _108->elem, D.24334
	movq	-64(%rbp), %rcx	# regs, tmp240
	movq	-56(%rbp), %rdx	# movables, tmp241
	movq	%rax, %rdi	# D.24334,
	call	rtx_equal_for_loop_p	#
	testl	%eax, %eax	# D.24328
	jne	.L354	#,
	.loc 1 1693 0
	movl	$0, %eax	#, D.24328
	jmp	.L318	#
.L354:
	.loc 1 1690 0
	addl	$1, -24(%rbp)	#, j
.L353:
	.loc 1 1690 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp242
	movl	-28(%rbp), %edx	# i, tmp244
	movslq	%edx, %rdx	# tmp244, tmp243
	movq	8(%rax,%rdx,8), %rax	# x_7(D)->fld[i_1].rtvec, D.24340
	movl	(%rax), %eax	# _104->num_elem, D.24328
	cmpl	-24(%rbp), %eax	# j, D.24328
	jg	.L355	#,
	.loc 1 1694 0 is_stmt 1
	jmp	.L350	#
.L344:
	.loc 1 1697 0
	movq	-48(%rbp), %rax	# y, tmp245
	movl	-28(%rbp), %edx	# i, tmp247
	movslq	%edx, %rdx	# tmp247, tmp246
	movq	8(%rax,%rdx,8), %rsi	# y_8(D)->fld[i_1].rtx, D.24334
	movq	-40(%rbp), %rax	# x, tmp248
	movl	-28(%rbp), %edx	# i, tmp250
	movslq	%edx, %rdx	# tmp250, tmp249
	movq	8(%rax,%rdx,8), %rax	# x_7(D)->fld[i_1].rtx, D.24334
	movq	-64(%rbp), %rcx	# regs, tmp251
	movq	-56(%rbp), %rdx	# movables, tmp252
	movq	%rax, %rdi	# D.24334,
	call	rtx_equal_for_loop_p	#
	testl	%eax, %eax	# D.24328
	jne	.L356	#,
	.loc 1 1699 0
	movl	$0, %eax	#, D.24328
	jmp	.L318	#
.L356:
	.loc 1 1700 0
	jmp	.L350	#
.L348:
	.loc 1 1703 0
	movq	-48(%rbp), %rax	# y, tmp253
	movl	-28(%rbp), %edx	# i, tmp255
	movslq	%edx, %rdx	# tmp255, tmp254
	movq	8(%rax,%rdx,8), %rdx	# y_8(D)->fld[i_1].rtstr, D.24336
	movq	-40(%rbp), %rax	# x, tmp256
	movl	-28(%rbp), %ecx	# i, tmp258
	movslq	%ecx, %rcx	# tmp258, tmp257
	movq	8(%rax,%rcx,8), %rax	# x_7(D)->fld[i_1].rtstr, D.24336
	movq	%rdx, %rsi	# D.24336,
	movq	%rax, %rdi	# D.24336,
	call	strcmp	#
	testl	%eax, %eax	# D.24328
	je	.L357	#,
	.loc 1 1704 0
	movl	$0, %eax	#, D.24328
	jmp	.L318	#
.L357:
	.loc 1 1705 0
	jmp	.L350	#
.L340:
	.loc 1 1718 0
	movl	$__FUNCTION__.12830, %edx	#,
	movl	$1718, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L359:
	.loc 1 1712 0
	nop
	jmp	.L350	#
.L360:
	.loc 1 1709 0
	nop
.L350:
	.loc 1 1670 0
	subl	$1, -28(%rbp)	#, i
.L339:
	.loc 1 1670 0 is_stmt 0 discriminator 1
	cmpl	$0, -28(%rbp)	#, i
	jns	.L358	#,
	.loc 1 1721 0 is_stmt 1
	movl	$1, %eax	#, D.24328
.L318:
	.loc 1 1722 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE17:
	.size	rtx_equal_for_loop_p, .-rtx_equal_for_loop_p
	.type	add_label_notes, @function
add_label_notes:
.LFB18:
	.loc 1 1732 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# insns, insns
	.loc 1 1733 0
	movq	-40(%rbp), %rax	# x, tmp87
	movzwl	(%rax), %eax	# x_4(D)->code, D.24342
	movzwl	%ax, %eax	# D.24342, tmp88
	movl	%eax, -20(%rbp)	# tmp88, code
	.loc 1 1738 0
	cmpl	$67, -20(%rbp)	#, code
	jne	.L362	#,
	.loc 1 1738 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp89
	movzbl	3(%rax), %eax	# *x_4(D), D.24343
	andl	$8, %eax	#, D.24343
	testb	%al, %al	# D.24343
	jne	.L362	#,
	.loc 1 1745 0 is_stmt 1
	movq	-48(%rbp), %rax	# insns, tmp90
	movq	%rax, -16(%rbp)	# tmp90, insn
	jmp	.L363	#
.L365:
	.loc 1 1746 0
	movq	-40(%rbp), %rax	# x, tmp91
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.24344
	movq	-16(%rbp), %rdx	# insn, tmp92
	movq	%rdx, %rsi	# tmp92,
	movq	%rax, %rdi	# D.24344,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24345
	je	.L364	#,
	.loc 1 1748 0
	movq	-16(%rbp), %rax	# insn, tmp93
	movq	56(%rax), %rdx	# insn_3->fld[6].rtx, D.24344
	movq	-40(%rbp), %rax	# x, tmp94
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.24344
	movq	%rdx, %rcx	# D.24344,
	movq	%rax, %rdx	# D.24344,
	movl	$13, %esi	#,
	movl	$4, %edi	#,
	call	gen_rtx_fmt_ue	#
	movq	-16(%rbp), %rdx	# insn, tmp95
	movq	%rax, 56(%rdx)	# D.24344, insn_3->fld[6].rtx
	.loc 1 1750 0
	movq	-40(%rbp), %rax	# x, tmp96
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.24344
	movzwl	(%rax), %eax	# _16->code, D.24342
	cmpw	$36, %ax	#, D.24342
	jne	.L364	#,
	.loc 1 1751 0
	movq	-40(%rbp), %rax	# x, tmp97
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.24344
	movl	32(%rax), %edx	# _18->fld[3].rtint, D.24345
	addl	$1, %edx	#, D.24345
	movl	%edx, 32(%rax)	# D.24345, _18->fld[3].rtint
.L364:
	.loc 1 1745 0
	movq	-16(%rbp), %rax	# insn, tmp98
	movq	24(%rax), %rax	# insn_3->fld[2].rtx, tmp99
	movq	%rax, -16(%rbp)	# tmp99, insn
.L363:
	.loc 1 1745 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, insn
	jne	.L365	#,
.L362:
	.loc 1 1755 0 is_stmt 1
	movl	-20(%rbp), %eax	# code, code.168
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp101
	movq	%rax, -8(%rbp)	# tmp101, fmt
	.loc 1 1756 0
	movl	-20(%rbp), %eax	# code, code.169
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.24343
	movzbl	%al, %eax	# D.24343, D.24345
	subl	$1, %eax	#, tmp103
	movl	%eax, -28(%rbp)	# tmp103, i
	jmp	.L366	#
.L371:
	.loc 1 1758 0
	movl	-28(%rbp), %eax	# i, tmp104
	movslq	%eax, %rdx	# tmp104, D.24346
	movq	-8(%rbp), %rax	# fmt, tmp105
	addq	%rdx, %rax	# D.24346, D.24347
	movzbl	(%rax), %eax	# *_29, D.24348
	cmpb	$101, %al	#, D.24348
	jne	.L367	#,
	.loc 1 1759 0
	movq	-40(%rbp), %rax	# x, tmp106
	movl	-28(%rbp), %edx	# i, tmp108
	movslq	%edx, %rdx	# tmp108, tmp107
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtx, D.24344
	movq	-48(%rbp), %rdx	# insns, tmp109
	movq	%rdx, %rsi	# tmp109,
	movq	%rax, %rdi	# D.24344,
	call	add_label_notes	#
	jmp	.L368	#
.L367:
	.loc 1 1760 0
	movl	-28(%rbp), %eax	# i, tmp110
	movslq	%eax, %rdx	# tmp110, D.24346
	movq	-8(%rbp), %rax	# fmt, tmp111
	addq	%rdx, %rax	# D.24346, D.24347
	movzbl	(%rax), %eax	# *_33, D.24348
	cmpb	$69, %al	#, D.24348
	jne	.L368	#,
	.loc 1 1761 0
	movq	-40(%rbp), %rax	# x, tmp112
	movl	-28(%rbp), %edx	# i, tmp114
	movslq	%edx, %rdx	# tmp114, tmp113
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtvec, D.24349
	movl	(%rax), %eax	# _35->num_elem, D.24345
	subl	$1, %eax	#, tmp115
	movl	%eax, -24(%rbp)	# tmp115, j
	jmp	.L369	#
.L370:
	.loc 1 1762 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp116
	movl	-28(%rbp), %edx	# i, tmp118
	movslq	%edx, %rdx	# tmp118, tmp117
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtvec, D.24349
	movl	-24(%rbp), %edx	# j, tmp120
	movslq	%edx, %rdx	# tmp120, tmp119
	movq	8(%rax,%rdx,8), %rax	# _38->elem, D.24344
	movq	-48(%rbp), %rdx	# insns, tmp121
	movq	%rdx, %rsi	# tmp121,
	movq	%rax, %rdi	# D.24344,
	call	add_label_notes	#
	.loc 1 1761 0 discriminator 2
	subl	$1, -24(%rbp)	#, j
.L369:
	.loc 1 1761 0 is_stmt 0 discriminator 1
	cmpl	$0, -24(%rbp)	#, j
	jns	.L370	#,
.L368:
	.loc 1 1756 0 is_stmt 1
	subl	$1, -28(%rbp)	#, i
.L366:
	.loc 1 1756 0 is_stmt 0 discriminator 1
	cmpl	$0, -28(%rbp)	#, i
	jns	.L371	#,
	.loc 1 1764 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE18:
	.size	add_label_notes, .-add_label_notes
	.section	.rodata
.LC4:
	.string	"Insn %d: regno %d (life %d), "
.LC5:
	.string	"consec %d, "
.LC6:
	.string	"cond "
.LC7:
	.string	"force "
.LC8:
	.string	"global "
.LC9:
	.string	"done "
.LC10:
	.string	"move-insn "
.LC11:
	.string	"matches %d "
.LC12:
	.string	"forces %d "
.LC13:
	.string	"savings %d "
.LC14:
	.string	"halved since already moved "
.LC15:
	.string	" moved to %d"
.LC16:
	.string	"not desirable"
.LC17:
	.string	"not safe"
	.text
	.type	move_movables, @function
move_movables:
.LFB19:
	.loc 1 1776 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$312, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -296(%rbp)	# loop, loop
	movq	%rsi, -304(%rbp)	# movables, movables
	movl	%edx, -308(%rbp)	# threshold, threshold
	movl	%ecx, -312(%rbp)	# insn_count, insn_count
	.loc 1 1777 0
	movq	-296(%rbp), %rax	# loop, tmp422
	movq	160(%rax), %rax	# loop_70(D)->aux, D.24350
	addq	$184, %rax	#, tmp423
	movq	%rax, -160(%rbp)	# tmp423, regs
	.loc 1 1778 0
	movq	-160(%rbp), %rax	# regs, tmp424
	movl	(%rax), %eax	# regs_72->num, tmp425
	movl	%eax, -276(%rbp)	# tmp425, nregs
	.loc 1 1779 0
	movq	$0, -264(%rbp)	#, new_start
	.loc 1 1782 0
	movq	-296(%rbp), %rax	# loop, tmp426
	movq	192(%rax), %rax	# loop_70(D)->start, tmp427
	movq	%rax, -152(%rbp)	# tmp427, loop_start
	.loc 1 1783 0
	movq	-296(%rbp), %rax	# loop, tmp428
	movq	200(%rax), %rax	# loop_70(D)->end, tmp429
	movq	%rax, -144(%rbp)	# tmp429, loop_end
	.loc 1 1787 0
	movl	-276(%rbp), %eax	# nregs, tmp430
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.24351,
	call	xcalloc	#
	movq	%rax, -136(%rbp)	# tmp431, reg_map
	.loc 1 1788 0
	movl	-276(%rbp), %eax	# nregs, tmp432
	cltq
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.24351,
	call	xcalloc	#
	movq	%rax, -128(%rbp)	# tmp433, already_moved
	.loc 1 1790 0
	movq	-304(%rbp), %rax	# movables, tmp434
	movq	(%rax), %rax	# movables_81(D)->head, tmp435
	movq	%rax, -256(%rbp)	# tmp435, m
	jmp	.L373	#
.L518:
	.loc 1 1794 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.170
	testq	%rax, %rax	# loop_dump_stream.170
	je	.L374	#,
	.loc 1 1797 0
	movq	-256(%rbp), %rax	# m, tmp436
	movzwl	40(%rax), %eax	# m_14->lifetime, D.24352
	.loc 1 1796 0
	movswl	%ax, %esi	# D.24352, D.24353
	movq	-256(%rbp), %rax	# m, tmp437
	movl	36(%rax), %ecx	# m_14->regno, D.24354
	.loc 1 1797 0
	movq	-256(%rbp), %rax	# m, tmp438
	movq	(%rax), %rax	# m_14->insn, D.24355
	.loc 1 1796 0
	movl	8(%rax), %edx	# _88->fld[0].rtint, D.24353
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.171
	movl	%esi, %r8d	# D.24353,
	movl	$.LC4, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.171,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 1798 0
	movq	-256(%rbp), %rax	# m, tmp439
	movl	32(%rax), %eax	# m_14->consec, D.24353
	testl	%eax, %eax	# D.24353
	jle	.L375	#,
	.loc 1 1799 0
	movq	-256(%rbp), %rax	# m, tmp440
	movl	32(%rax), %edx	# m_14->consec, D.24353
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.172
	movl	$.LC5, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.172,
	movl	$0, %eax	#,
	call	fprintf	#
.L375:
	.loc 1 1800 0
	movq	-256(%rbp), %rax	# m, tmp441
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$1, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L376	#,
	.loc 1 1801 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.173
	movq	%rax, %rcx	# loop_dump_stream.173,
	movl	$5, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC6, %edi	#,
	call	fwrite	#
.L376:
	.loc 1 1802 0
	movq	-256(%rbp), %rax	# m, tmp442
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$2, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L377	#,
	.loc 1 1803 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.174
	movq	%rax, %rcx	# loop_dump_stream.174,
	movl	$6, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC7, %edi	#,
	call	fwrite	#
.L377:
	.loc 1 1804 0
	movq	-256(%rbp), %rax	# m, tmp443
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$4, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L378	#,
	.loc 1 1805 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.175
	movq	%rax, %rcx	# loop_dump_stream.175,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC8, %edi	#,
	call	fwrite	#
.L378:
	.loc 1 1806 0
	movq	-256(%rbp), %rax	# m, tmp444
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$8, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L379	#,
	.loc 1 1807 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.176
	movq	%rax, %rcx	# loop_dump_stream.176,
	movl	$5, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC9, %edi	#,
	call	fwrite	#
.L379:
	.loc 1 1808 0
	movq	-256(%rbp), %rax	# m, tmp445
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$32, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L380	#,
	.loc 1 1809 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.177
	movq	%rax, %rcx	# loop_dump_stream.177,
	movl	$10, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC10, %edi	#,
	call	fwrite	#
.L380:
	.loc 1 1810 0
	movq	-256(%rbp), %rax	# m, tmp446
	movq	56(%rax), %rax	# m_14->match, D.24357
	testq	%rax, %rax	# D.24357
	je	.L381	#,
	.loc 1 1812 0
	movq	-256(%rbp), %rax	# m, tmp447
	movq	56(%rax), %rax	# m_14->match, D.24357
	movq	(%rax), %rax	# _110->insn, D.24355
	.loc 1 1811 0
	movl	8(%rax), %edx	# _111->fld[0].rtint, D.24353
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.178
	movl	$.LC11, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.178,
	movl	$0, %eax	#,
	call	fprintf	#
.L381:
	.loc 1 1813 0
	movq	-256(%rbp), %rax	# m, tmp448
	movq	64(%rax), %rax	# m_14->forces, D.24357
	testq	%rax, %rax	# D.24357
	je	.L374	#,
	.loc 1 1815 0
	movq	-256(%rbp), %rax	# m, tmp449
	movq	64(%rax), %rax	# m_14->forces, D.24357
	movq	(%rax), %rax	# _115->insn, D.24355
	.loc 1 1814 0
	movl	8(%rax), %edx	# _116->fld[0].rtint, D.24353
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.179
	movl	$.LC12, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.179,
	movl	$0, %eax	#,
	call	fprintf	#
.L374:
	.loc 1 1821 0
	movq	-256(%rbp), %rax	# m, tmp450
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$8, %eax	#, D.24356
	testb	%al, %al	# D.24356
	jne	.L382	#,
	.loc 1 1822 0
	movq	-256(%rbp), %rax	# m, tmp451
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$1, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L383	#,
	.loc 1 1823 0
	movq	-256(%rbp), %rax	# m, tmp452
	movq	8(%rax), %rdx	# m_14->set_src, D.24355
	movq	-296(%rbp), %rax	# loop, tmp453
	movq	%rdx, %rsi	# D.24355,
	movq	%rax, %rdi	# tmp453,
	call	loop_invariant_p	#
	cmpl	$1, %eax	#, D.24353
	jne	.L382	#,
	.loc 1 1824 0
	movq	-256(%rbp), %rax	# m, tmp454
	movq	24(%rax), %rax	# m_14->dependencies, D.24355
	testq	%rax, %rax	# D.24355
	je	.L384	#,
	.loc 1 1825 0
	movq	-256(%rbp), %rax	# m, tmp455
	movq	24(%rax), %rdx	# m_14->dependencies, D.24355
	movq	-296(%rbp), %rax	# loop, tmp456
	movq	%rdx, %rsi	# D.24355,
	movq	%rax, %rdi	# tmp456,
	call	loop_invariant_p	#
	cmpl	$1, %eax	#, D.24353
	jne	.L382	#,
.L384:
	.loc 1 1826 0
	movq	-256(%rbp), %rax	# m, tmp457
	movl	32(%rax), %eax	# m_14->consec, D.24353
	testl	%eax, %eax	# D.24353
	je	.L383	#,
	.loc 1 1827 0
	movq	-256(%rbp), %rax	# m, tmp458
	movq	(%rax), %rdx	# m_14->insn, D.24355
	.loc 1 1828 0
	movq	-256(%rbp), %rax	# m, tmp459
	movl	32(%rax), %eax	# m_14->consec, D.24353
	.loc 1 1827 0
	leal	1(%rax), %edi	#, D.24353
	movq	-256(%rbp), %rax	# m, tmp460
	movq	16(%rax), %rsi	# m_14->set_dest, D.24355
	movq	-296(%rbp), %rax	# loop, tmp461
	movq	%rdx, %rcx	# D.24355,
	movl	%edi, %edx	# D.24353,
	movq	%rax, %rdi	# tmp461,
	call	consec_sets_invariant_p	#
	cmpl	$1, %eax	#, D.24353
	jne	.L382	#,
.L383:
	.loc 1 1830 0
	movq	-256(%rbp), %rax	# m, tmp462
	movq	64(%rax), %rax	# m_14->forces, D.24357
	testq	%rax, %rax	# D.24357
	je	.L385	#,
	.loc 1 1830 0 is_stmt 0 discriminator 1
	movq	-256(%rbp), %rax	# m, tmp463
	movq	64(%rax), %rax	# m_14->forces, D.24357
	movzbl	44(%rax), %eax	# *_135, D.24356
	andl	$8, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L382	#,
.L385:
.LBB16:
	.loc 1 1834 0 is_stmt 1
	movq	-256(%rbp), %rax	# m, tmp464
	movzwl	42(%rax), %eax	# m_14->savings, D.24352
	cwtl
	movl	%eax, -272(%rbp)	# tmp465, savings
	.loc 1 1839 0
	movq	-256(%rbp), %rax	# m, tmp466
	movq	(%rax), %rax	# m_14->insn, tmp467
	movq	%rax, -240(%rbp)	# tmp467, p
	.loc 1 1840 0
	movq	-256(%rbp), %rax	# m, tmp468
	movl	36(%rax), %eax	# m_14->regno, D.24354
	movl	%eax, -268(%rbp)	# D.24354, regno
	.loc 1 1842 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.180
	testq	%rax, %rax	# loop_dump_stream.180
	je	.L386	#,
	.loc 1 1843 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.181
	movl	-272(%rbp), %edx	# savings, tmp469
	movl	$.LC13, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.181,
	movl	$0, %eax	#,
	call	fprintf	#
.L386:
	.loc 1 1845 0
	movq	-160(%rbp), %rax	# regs, tmp470
	movq	8(%rax), %rcx	# regs_72->array, D.24358
	movl	-268(%rbp), %eax	# regno, tmp471
	movslq	%eax, %rdx	# tmp471, D.24351
	movq	%rdx, %rax	# D.24351, tmp472
	addq	%rax, %rax	# tmp472
	addq	%rdx, %rax	# D.24351, tmp472
	salq	$3, %rax	#, tmp473
	addq	%rcx, %rax	# D.24358, D.24358
	movzbl	17(%rax), %eax	# _148->moved_once, D.24359
	testb	%al, %al	# D.24359
	je	.L387	#,
	.loc 1 1845 0 is_stmt 0 discriminator 1
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.182
	testq	%rax, %rax	# loop_dump_stream.182
	je	.L387	#,
	.loc 1 1846 0 is_stmt 1
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.183
	movq	%rax, %rcx	# loop_dump_stream.183,
	movl	$27, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC14, %edi	#,
	call	fwrite	#
.L387:
	.loc 1 1861 0
	movl	-268(%rbp), %eax	# regno, tmp474
	movslq	%eax, %rdx	# tmp474, D.24360
	movq	-128(%rbp), %rax	# already_moved, tmp475
	addq	%rdx, %rax	# D.24360, D.24361
	movzbl	(%rax), %eax	# *_153, D.24359
	testb	%al, %al	# D.24359
	jne	.L388	#,
	.loc 1 1862 0
	movl	flag_move_all_movables(%rip), %eax	# flag_move_all_movables, flag_move_all_movables.184
	testl	%eax, %eax	# flag_move_all_movables.184
	jne	.L388	#,
	.loc 1 1863 0
	movl	-308(%rbp), %eax	# threshold, tmp476
	imull	-272(%rbp), %eax	# savings, D.24353
	movl	%eax, %edx	# D.24353, D.24353
	movq	-256(%rbp), %rax	# m, tmp477
	movzwl	40(%rax), %eax	# m_14->lifetime, D.24352
	cwtl
	movl	%edx, %ecx	# D.24353, D.24353
	imull	%eax, %ecx	# D.24353, D.24353
	.loc 1 1864 0
	movq	-160(%rbp), %rax	# regs, tmp478
	movq	8(%rax), %rsi	# regs_72->array, D.24358
	movl	-268(%rbp), %eax	# regno, tmp479
	movslq	%eax, %rdx	# tmp479, D.24351
	movq	%rdx, %rax	# D.24351, tmp480
	addq	%rax, %rax	# tmp480
	addq	%rdx, %rax	# D.24351, tmp480
	salq	$3, %rax	#, tmp481
	addq	%rsi, %rax	# D.24358, D.24358
	movzbl	17(%rax), %eax	# _163->moved_once, D.24359
	testb	%al, %al	# D.24359
	je	.L389	#,
	.loc 1 1864 0 is_stmt 0 discriminator 1
	movl	-312(%rbp), %eax	# insn_count, tmp482
	addl	%eax, %eax	# iftmp.185
	jmp	.L390	#
.L389:
	.loc 1 1864 0 discriminator 2
	movl	-312(%rbp), %eax	# insn_count, iftmp.185
.L390:
	.loc 1 1863 0 is_stmt 1
	cmpl	%eax, %ecx	# iftmp.185, D.24353
	jge	.L388	#,
	.loc 1 1865 0
	movq	-256(%rbp), %rax	# m, tmp483
	movq	64(%rax), %rax	# m_14->forces, D.24357
	testq	%rax, %rax	# D.24357
	je	.L391	#,
	.loc 1 1865 0 is_stmt 0 discriminator 1
	movq	-256(%rbp), %rax	# m, tmp484
	movq	64(%rax), %rax	# m_14->forces, D.24357
	movzbl	44(%rax), %eax	# *_169, D.24356
	andl	$8, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L391	#,
	.loc 1 1866 0 is_stmt 1
	movq	-160(%rbp), %rax	# regs, tmp485
	movq	8(%rax), %rcx	# regs_72->array, D.24358
	movq	-256(%rbp), %rax	# m, tmp486
	movq	64(%rax), %rax	# m_14->forces, D.24357
	movl	36(%rax), %eax	# _173->regno, D.24354
	movl	%eax, %edx	# D.24354, D.24351
	movq	%rdx, %rax	# D.24351, tmp487
	addq	%rax, %rax	# tmp487
	addq	%rdx, %rax	# D.24351, tmp487
	salq	$3, %rax	#, tmp488
	addq	%rcx, %rax	# D.24358, D.24358
	movl	4(%rax), %eax	# _177->n_times_set, D.24353
	cmpl	$1, %eax	#, D.24353
	jne	.L391	#,
.L388:
.LBB17:
	.loc 1 1870 0
	movq	$0, -224(%rbp)	#, first
	.loc 1 1874 0
	movq	-256(%rbp), %rax	# m, tmp489
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$16, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L392	#,
	.loc 1 1874 0 is_stmt 0 discriminator 1
	movq	-256(%rbp), %rax	# m, tmp490
	movq	56(%rax), %rax	# m_14->match, D.24357
	testq	%rax, %rax	# D.24357
	je	.L392	#,
.LBB18:
	.loc 1 1882 0 is_stmt 1
	movq	-256(%rbp), %rax	# m, tmp491
	movq	%rax, -232(%rbp)	# tmp491, m1
	jmp	.L393	#
.L394:
	.loc 1 1882 0 is_stmt 0 discriminator 2
	movq	-232(%rbp), %rax	# m1, tmp492
	movq	56(%rax), %rax	# m1_24->match, tmp493
	movq	%rax, -232(%rbp)	# tmp493, m1
.L393:
	.loc 1 1882 0 discriminator 1
	movq	-232(%rbp), %rax	# m1, tmp494
	movq	56(%rax), %rax	# m1_24->match, D.24357
	testq	%rax, %rax	# D.24357
	jne	.L394	#,
	.loc 1 1884 0 is_stmt 1
	movq	-232(%rbp), %rax	# m1, tmp495
	movq	(%rax), %rax	# m1_24->insn, D.24355
	movq	32(%rax), %rax	# _188->fld[3].rtx, D.24355
	.loc 1 1883 0
	movq	8(%rax), %rdx	# _189->fld[0].rtx, D.24355
	movq	-256(%rbp), %rax	# m, tmp496
	movq	(%rax), %rax	# m_14->insn, D.24355
	movq	32(%rax), %rax	# _191->fld[3].rtx, D.24355
	movq	8(%rax), %rax	# _192->fld[0].rtx, D.24355
	movq	%rdx, %rsi	# D.24355,
	movq	%rax, %rdi	# D.24355,
	call	gen_move_insn	#
	movq	%rax, -120(%rbp)	# tmp497, newpat
	.loc 1 1885 0
	movq	-120(%rbp), %rdx	# newpat, tmp498
	movq	-296(%rbp), %rax	# loop, tmp499
	movq	%rdx, %rsi	# tmp498,
	movq	%rax, %rdi	# tmp499,
	call	loop_insn_hoist	#
	movq	%rax, -112(%rbp)	# tmp500, i1
	.loc 1 1889 0
	movq	-256(%rbp), %rax	# m, tmp501
	movq	(%rax), %rax	# m_14->insn, D.24355
	movq	56(%rax), %rdx	# _196->fld[6].rtx, D.24355
	movq	-112(%rbp), %rax	# i1, tmp502
	movq	%rdx, 56(%rax)	# D.24355, i1_195->fld[6].rtx
	.loc 1 1890 0
	movq	-256(%rbp), %rax	# m, tmp503
	movq	(%rax), %rax	# m_14->insn, D.24355
	movq	32(%rax), %rax	# _198->fld[3].rtx, D.24355
	movq	8(%rax), %rax	# _199->fld[0].rtx, tmp504
	movq	%rax, -104(%rbp)	# tmp504, r1
	.loc 1 1891 0
	movq	-232(%rbp), %rax	# m1, tmp505
	movq	(%rax), %rax	# m1_24->insn, D.24355
	movq	32(%rax), %rax	# _201->fld[3].rtx, D.24355
	movq	8(%rax), %rax	# _202->fld[0].rtx, tmp506
	movq	%rax, -96(%rbp)	# tmp506, r2
	.loc 1 1893 0
	movq	regs_may_share(%rip), %rdx	# regs_may_share, regs_may_share.186
	movq	-96(%rbp), %rax	# r2, tmp507
	movq	%rdx, %rcx	# regs_may_share.186,
	movq	%rax, %rdx	# tmp507,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.24355
	movq	-104(%rbp), %rax	# r1, tmp508
	movq	%rdx, %rcx	# D.24355,
	movq	%rax, %rdx	# tmp508,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, regs_may_share(%rip)	# regs_may_share.187, regs_may_share
	.loc 1 1896 0
	movq	-256(%rbp), %rax	# m, tmp509
	movq	(%rax), %rax	# m_14->insn, D.24355
	movq	%rax, %rdi	# D.24355,
	call	delete_insn	#
	.loc 1 1898 0
	cmpq	$0, -264(%rbp)	#, new_start
	jne	.L395	#,
	.loc 1 1899 0
	movq	-112(%rbp), %rax	# i1, tmp510
	movq	%rax, -264(%rbp)	# tmp510, new_start
.L395:
	.loc 1 1901 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.188
	testq	%rax, %rax	# loop_dump_stream.188
	je	.L396	#,
	.loc 1 1902 0
	movq	-112(%rbp), %rax	# i1, tmp511
	movl	8(%rax), %edx	# i1_195->fld[0].rtint, D.24353
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.189
	movl	$.LC15, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.189,
	movl	$0, %eax	#,
	call	fprintf	#
.LBE18:
	.loc 1 1875 0
	jmp	.L397	#
.L396:
	jmp	.L397	#
.L392:
	.loc 1 1907 0
	movq	-256(%rbp), %rax	# m, tmp512
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$32, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L398	#,
.LBB19:
	.loc 1 1911 0
	movq	-256(%rbp), %rax	# m, tmp513
	movl	32(%rax), %eax	# m_14->consec, tmp514
	movl	%eax, -288(%rbp)	# tmp514, count
	jmp	.L399	#
.L407:
	.loc 1 1915 0
	movq	-240(%rbp), %rax	# p, tmp515
	movzwl	(%rax), %eax	# p_18->code, D.24362
	cmpw	$37, %ax	#, D.24362
	je	.L400	#,
	.loc 1 1916 0
	movq	-240(%rbp), %rax	# p, tmp516
	movl	$0, %edx	#,
	movl	$7, %esi	#,
	movq	%rax, %rdi	# tmp516,
	call	find_reg_note	#
	movq	%rax, -216(%rbp)	# tmp517, temp
	cmpq	$0, -216(%rbp)	#, temp
	je	.L400	#,
	.loc 1 1917 0
	movq	-216(%rbp), %rax	# temp, tmp518
	movq	8(%rax), %rax	# temp_216->fld[0].rtx, tmp519
	movq	%rax, -240(%rbp)	# tmp519, p
.L400:
	.loc 1 1922 0
	movq	-240(%rbp), %rax	# p, tmp520
	movzwl	(%rax), %eax	# p_16->code, D.24362
	cmpw	$37, %ax	#, D.24362
	je	.L401	#,
	.loc 1 1923 0
	movq	-240(%rbp), %rax	# p, tmp521
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp521,
	call	find_reg_note	#
	movq	%rax, -216(%rbp)	# tmp522, temp
	cmpq	$0, -216(%rbp)	#, temp
	je	.L401	#,
	.loc 1 1925 0
	movq	-216(%rbp), %rax	# temp, tmp523
	movq	8(%rax), %rax	# temp_219->fld[0].rtx, tmp524
	movq	%rax, -216(%rbp)	# tmp524, temp
	.loc 1 1926 0
	jmp	.L402	#
.L403:
	.loc 1 1927 0
	movq	-216(%rbp), %rax	# temp, tmp525
	movq	%rax, %rdi	# tmp525,
	call	delete_insn	#
	movq	%rax, -216(%rbp)	# tmp526, temp
.L402:
	.loc 1 1926 0 discriminator 1
	movq	-216(%rbp), %rax	# temp, tmp527
	cmpq	-240(%rbp), %rax	# p, tmp527
	jne	.L403	#,
.L401:
	.loc 1 1930 0
	movq	-240(%rbp), %rax	# p, tmp528
	movq	%rax, -216(%rbp)	# tmp528, temp
	.loc 1 1931 0
	movq	-240(%rbp), %rax	# p, tmp529
	movq	%rax, %rdi	# tmp529,
	call	delete_insn	#
	movq	%rax, -240(%rbp)	# tmp530, p
	.loc 1 1939 0
	jmp	.L404	#
.L406:
	.loc 1 1940 0
	movq	-240(%rbp), %rax	# p, tmp531
	movq	24(%rax), %rdx	# p_17->fld[2].rtx, D.24355
	movq	-216(%rbp), %rax	# temp, tmp532
	movq	%rdx, 24(%rax)	# D.24355, temp_222->fld[2].rtx
	movq	-216(%rbp), %rax	# temp, tmp533
	movq	24(%rax), %rax	# temp_222->fld[2].rtx, tmp534
	movq	%rax, -240(%rbp)	# tmp534, p
.L404:
	.loc 1 1939 0 discriminator 1
	cmpq	$0, -240(%rbp)	#, p
	je	.L405	#,
	.loc 1 1939 0 is_stmt 0 discriminator 2
	movq	-240(%rbp), %rax	# p, tmp535
	movzwl	(%rax), %eax	# p_17->code, D.24362
	cmpw	$37, %ax	#, D.24362
	je	.L406	#,
.L405:
	.loc 1 1911 0 is_stmt 1
	subl	$1, -288(%rbp)	#, count
.L399:
	.loc 1 1911 0 is_stmt 0 discriminator 1
	cmpl	$0, -288(%rbp)	#, count
	jns	.L407	#,
	.loc 1 1943 0 is_stmt 1
	call	start_sequence	#
	.loc 1 1944 0
	movq	-256(%rbp), %rax	# m, tmp536
	movq	8(%rax), %rdx	# m_14->set_src, D.24355
	movq	-256(%rbp), %rax	# m, tmp537
	movq	16(%rax), %rax	# m_14->set_dest, D.24355
	movq	%rdx, %rsi	# D.24355,
	movq	%rax, %rdi	# D.24355,
	call	emit_move_insn	#
	.loc 1 1945 0
	call	get_insns	#
	movq	%rax, -216(%rbp)	# tmp538, temp
	.loc 1 1946 0
	call	gen_sequence	#
	movq	%rax, -88(%rbp)	# tmp539, seq
	.loc 1 1947 0
	call	end_sequence	#
	.loc 1 1949 0
	movq	-256(%rbp), %rax	# m, tmp540
	movq	8(%rax), %rax	# m_14->set_src, D.24355
	movq	-216(%rbp), %rdx	# temp, tmp541
	movq	%rdx, %rsi	# tmp541,
	movq	%rax, %rdi	# D.24355,
	call	add_label_notes	#
	.loc 1 1951 0
	movq	-88(%rbp), %rdx	# seq, tmp542
	movq	-296(%rbp), %rax	# loop, tmp543
	movq	%rdx, %rsi	# tmp542,
	movq	%rax, %rdi	# tmp543,
	call	loop_insn_hoist	#
	movq	%rax, -80(%rbp)	# tmp544, i1
	.loc 1 1952 0
	movq	-80(%rbp), %rax	# i1, tmp545
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp545,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24355
	jne	.L408	#,
	.loc 1 1953 0
	movq	-256(%rbp), %rax	# m, tmp546
	movq	8(%rax), %rdx	# m_14->set_src, D.24355
	.loc 1 1954 0
	movq	-256(%rbp), %rax	# m, tmp547
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$-128, %eax	#, D.24356
	.loc 1 1953 0
	testb	%al, %al	# D.24356
	je	.L409	#,
	.loc 1 1953 0 is_stmt 0 discriminator 1
	movl	$3, %eax	#, iftmp.190
	jmp	.L410	#
.L409:
	.loc 1 1953 0 discriminator 2
	movl	$4, %eax	#, iftmp.190
.L410:
	.loc 1 1953 0 discriminator 3
	movq	-80(%rbp), %rcx	# i1, tmp548
	movl	%eax, %esi	# iftmp.190,
	movq	%rcx, %rdi	# tmp548,
	call	set_unique_reg_note	#
.L408:
	.loc 1 1957 0 is_stmt 1
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.191
	testq	%rax, %rax	# loop_dump_stream.191
	je	.L411	#,
	.loc 1 1958 0
	movq	-80(%rbp), %rax	# i1, tmp549
	movl	8(%rax), %edx	# i1_233->fld[0].rtint, D.24353
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.192
	movl	$.LC15, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.192,
	movl	$0, %eax	#,
	call	fprintf	#
.L411:
	.loc 1 1961 0
	subl	$3, -308(%rbp)	#, threshold
.LBE19:
	jmp	.L397	#
.L398:
	.loc 1 1965 0
	movq	-256(%rbp), %rax	# m, tmp550
	movl	32(%rax), %eax	# m_14->consec, tmp551
	movl	%eax, -288(%rbp)	# tmp551, count
	jmp	.L412	#
.L449:
.LBB20:
	.loc 1 1972 0
	movq	-240(%rbp), %rax	# p, tmp552
	movzwl	(%rax), %eax	# p_21->code, D.24362
	cmpw	$37, %ax	#, D.24362
	je	.L413	#,
	.loc 1 1973 0
	movq	-240(%rbp), %rax	# p, tmp553
	movl	$0, %edx	#,
	movl	$7, %esi	#,
	movq	%rax, %rdi	# tmp553,
	call	find_reg_note	#
	movq	%rax, -200(%rbp)	# tmp554, temp
	cmpq	$0, -200(%rbp)	#, temp
	je	.L413	#,
	.loc 1 1974 0
	movq	-200(%rbp), %rax	# temp, tmp555
	movq	8(%rax), %rax	# temp_246->fld[0].rtx, tmp556
	movq	%rax, -240(%rbp)	# tmp556, p
.L413:
	.loc 1 1979 0
	movq	-240(%rbp), %rax	# p, tmp557
	movzwl	(%rax), %eax	# p_19->code, D.24362
	cmpw	$37, %ax	#, D.24362
	je	.L414	#,
	.loc 1 1980 0
	movq	-240(%rbp), %rax	# p, tmp558
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp558,
	call	find_reg_note	#
	movq	%rax, -200(%rbp)	# tmp559, temp
	cmpq	$0, -200(%rbp)	#, temp
	je	.L414	#,
.LBB21:
	.loc 1 1982 0
	movq	$0, -192(%rbp)	#, fn_address
	.loc 1 1983 0
	movq	$0, -184(%rbp)	#, fn_reg
	.loc 1 1984 0
	movq	$0, -176(%rbp)	#, fn_address_insn
	.loc 1 1986 0
	movq	$0, -224(%rbp)	#, first
	.loc 1 1987 0
	movq	-200(%rbp), %rax	# temp, tmp560
	movq	8(%rax), %rax	# temp_249->fld[0].rtx, tmp561
	movq	%rax, -200(%rbp)	# tmp561, temp
	jmp	.L415	#
.L431:
.LBB22:
	.loc 1 1994 0
	movq	-200(%rbp), %rax	# temp, tmp562
	movzwl	(%rax), %eax	# temp_34->code, D.24362
	cmpw	$37, %ax	#, D.24362
	jne	.L416	#,
	.loc 1 1995 0
	jmp	.L417	#
.L416:
	.loc 1 1997 0
	movq	-200(%rbp), %rax	# temp, tmp563
	movq	32(%rax), %rax	# temp_34->fld[3].rtx, tmp564
	movq	%rax, -72(%rbp)	# tmp564, body
	.loc 1 2001 0
	movq	-200(%rbp), %rax	# temp, tmp565
	movq	24(%rax), %rax	# temp_34->fld[2].rtx, tmp566
	movq	%rax, -168(%rbp)	# tmp566, next
	jmp	.L418	#
.L422:
	.loc 1 2003 0
	movq	-168(%rbp), %rax	# next, tmp567
	movzwl	(%rax), %eax	# next_46->code, D.24362
	cmpw	$32, %ax	#, D.24362
	jne	.L419	#,
	.loc 1 2004 0 discriminator 1
	movq	-168(%rbp), %rax	# next, tmp568
	movq	32(%rax), %rax	# next_46->fld[3].rtx, D.24355
	movzwl	(%rax), %eax	# _259->code, D.24362
	.loc 1 2003 0 discriminator 1
	cmpw	$48, %ax	#, D.24362
	je	.L420	#,
.L419:
	.loc 1 2005 0
	movq	-168(%rbp), %rax	# next, tmp569
	movzwl	(%rax), %eax	# next_46->code, D.24362
	cmpw	$37, %ax	#, D.24362
	je	.L420	#,
	.loc 1 2006 0
	jmp	.L421	#
.L420:
	.loc 1 2002 0
	movq	-168(%rbp), %rax	# next, tmp570
	movq	24(%rax), %rax	# next_46->fld[2].rtx, tmp571
	movq	%rax, -168(%rbp)	# tmp571, next
.L418:
	.loc 1 2001 0 discriminator 1
	movq	-168(%rbp), %rax	# next, tmp572
	cmpq	-240(%rbp), %rax	# p, tmp572
	jne	.L422	#,
.L421:
	.loc 1 2019 0
	movq	-168(%rbp), %rax	# next, tmp573
	movzwl	(%rax), %eax	# next_46->code, D.24362
	cmpw	$34, %ax	#, D.24362
	jne	.L423	#,
	.loc 1 2020 0
	movq	-72(%rbp), %rax	# body, tmp574
	movzwl	(%rax), %eax	# body_256->code, D.24362
	cmpw	$47, %ax	#, D.24362
	jne	.L423	#,
	.loc 1 2021 0
	movq	-72(%rbp), %rax	# body, tmp575
	movq	8(%rax), %rax	# body_256->fld[0].rtx, D.24355
	movzwl	(%rax), %eax	# _265->code, D.24362
	cmpw	$61, %ax	#, D.24362
	jne	.L423	#,
	.loc 1 2022 0
	movq	-200(%rbp), %rax	# temp, tmp576
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp576,
	call	find_reg_note	#
	movq	%rax, -64(%rbp)	# tmp577, n
	cmpq	$0, -64(%rbp)	#, n
	je	.L423	#,
	.loc 1 2025 0
	movq	-72(%rbp), %rax	# body, tmp578
	movq	16(%rax), %rax	# body_256->fld[1].rtx, tmp579
	movq	%rax, -184(%rbp)	# tmp579, fn_reg
	.loc 1 2026 0
	movq	-184(%rbp), %rax	# fn_reg, tmp580
	movzwl	(%rax), %eax	# fn_reg_268->code, D.24362
	cmpw	$61, %ax	#, D.24362
	je	.L424	#,
	.loc 1 2027 0
	movq	-72(%rbp), %rax	# body, tmp581
	movq	8(%rax), %rax	# body_256->fld[0].rtx, tmp582
	movq	%rax, -184(%rbp)	# tmp582, fn_reg
.L424:
	.loc 1 2028 0
	movq	-64(%rbp), %rax	# n, tmp583
	movq	8(%rax), %rax	# n_267->fld[0].rtx, tmp584
	movq	%rax, -192(%rbp)	# tmp584, fn_address
	.loc 1 2029 0
	movq	-200(%rbp), %rax	# temp, tmp585
	movq	%rax, -176(%rbp)	# tmp585, fn_address_insn
.L423:
	.loc 1 2034 0
	movq	-200(%rbp), %rax	# temp, tmp586
	movzwl	(%rax), %eax	# temp_34->code, D.24362
	cmpw	$34, %ax	#, D.24362
	jne	.L425	#,
	.loc 1 2035 0
	cmpq	$0, -192(%rbp)	#, fn_address
	je	.L425	#,
	.loc 1 2036 0
	movq	-72(%rbp), %rdx	# body, tmp587
	movq	-184(%rbp), %rax	# fn_reg, tmp588
	movq	%rdx, %rsi	# tmp587,
	movq	%rax, %rdi	# tmp588,
	call	reg_referenced_p	#
	testl	%eax, %eax	# D.24353
	je	.L425	#,
	.loc 1 2037 0
	movq	-192(%rbp), %rdx	# fn_address, tmp589
	movq	-184(%rbp), %rax	# fn_reg, tmp590
	movq	%rdx, %rsi	# tmp589,
	movq	%rax, %rdi	# tmp590,
	call	gen_move_insn	#
	movq	%rax, %rcx	#, D.24355
	movq	-176(%rbp), %rdx	# fn_address_insn, tmp591
	movq	-296(%rbp), %rax	# loop, tmp592
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp592,
	call	loop_insn_emit_after	#
.L425:
	.loc 1 2041 0
	movq	-200(%rbp), %rax	# temp, tmp593
	movzwl	(%rax), %eax	# temp_34->code, D.24362
	cmpw	$34, %ax	#, D.24362
	jne	.L426	#,
	.loc 1 2043 0
	movq	-72(%rbp), %rdx	# body, tmp594
	movq	-296(%rbp), %rax	# loop, tmp595
	movq	%rdx, %rsi	# tmp594,
	movq	%rax, %rdi	# tmp595,
	call	loop_call_insn_hoist	#
	movq	%rax, -208(%rbp)	# tmp596, i1
	.loc 1 2047 0
	movq	-200(%rbp), %rax	# temp, tmp597
	movq	64(%rax), %rax	# temp_34->fld[7].rtx, D.24355
	testq	%rax, %rax	# D.24355
	je	.L428	#,
	.loc 1 2049 0
	movq	-200(%rbp), %rax	# temp, tmp598
	movq	64(%rax), %rax	# temp_34->fld[7].rtx, D.24355
	movq	%rax, %rdi	# D.24355,
	call	copy_rtx	#
	movq	-208(%rbp), %rdx	# i1, tmp599
	movq	%rax, 64(%rdx)	# D.24355, i1_277->fld[7].rtx
	jmp	.L428	#
.L426:
	.loc 1 2052 0
	movq	-72(%rbp), %rdx	# body, tmp600
	movq	-296(%rbp), %rax	# loop, tmp601
	movq	%rdx, %rsi	# tmp600,
	movq	%rax, %rdi	# tmp601,
	call	loop_insn_hoist	#
	movq	%rax, -208(%rbp)	# tmp602, i1
.L428:
	.loc 1 2053 0
	cmpq	$0, -224(%rbp)	#, first
	jne	.L429	#,
	.loc 1 2054 0
	movq	-208(%rbp), %rax	# i1, tmp603
	movq	%rax, -224(%rbp)	# tmp603, first
.L429:
	.loc 1 2055 0
	movq	-200(%rbp), %rax	# temp, tmp604
	cmpq	-176(%rbp), %rax	# fn_address_insn, tmp604
	jne	.L430	#,
	.loc 1 2056 0
	movq	-208(%rbp), %rax	# i1, tmp605
	movq	%rax, -176(%rbp)	# tmp605, fn_address_insn
.L430:
	.loc 1 2057 0
	movq	-200(%rbp), %rax	# temp, tmp606
	movq	56(%rax), %rdx	# temp_34->fld[6].rtx, D.24355
	movq	-208(%rbp), %rax	# i1, tmp607
	movq	%rdx, 56(%rax)	# D.24355, i1_32->fld[6].rtx
	.loc 1 2058 0
	movq	-200(%rbp), %rax	# temp, tmp608
	movq	$0, 56(%rax)	#, temp_34->fld[6].rtx
	.loc 1 2059 0
	movq	-200(%rbp), %rax	# temp, tmp609
	movq	%rax, %rdi	# tmp609,
	call	delete_insn	#
.L417:
.LBE22:
	.loc 1 1988 0
	movq	-200(%rbp), %rax	# temp, tmp610
	movq	24(%rax), %rax	# temp_34->fld[2].rtx, tmp611
	movq	%rax, -200(%rbp)	# tmp611, temp
.L415:
	.loc 1 1987 0 discriminator 1
	movq	-200(%rbp), %rax	# temp, tmp612
	cmpq	-240(%rbp), %rax	# p, tmp612
	jne	.L431	#,
	.loc 1 2061 0
	cmpq	$0, -264(%rbp)	#, new_start
	jne	.L414	#,
	.loc 1 2062 0
	movq	-224(%rbp), %rax	# first, tmp613
	movq	%rax, -264(%rbp)	# tmp613, new_start
.L414:
.LBE21:
	.loc 1 2064 0
	movq	-256(%rbp), %rax	# m, tmp614
	movl	48(%rax), %eax	# m_14->savemode, D.24363
	testl	%eax, %eax	# D.24363
	je	.L432	#,
.LBB23:
	.loc 1 2069 0
	movq	-256(%rbp), %rax	# m, tmp615
	movq	16(%rax), %rax	# m_14->set_dest, tmp616
	movq	%rax, -56(%rbp)	# tmp616, reg
	.loc 1 2073 0
	call	start_sequence	#
	.loc 1 2076 0
	movq	-256(%rbp), %rax	# m, tmp617
	movl	48(%rax), %eax	# m_14->savemode, D.24363
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24362
	movzwl	%ax, %eax	# D.24362, D.24353
	movl	$1, %edx	#, tmp619
	movl	%eax, %ecx	# D.24353, tmp793
	salq	%cl, %rdx	# tmp793, D.24364
	movq	%rdx, %rax	# D.24364, D.24364
	.loc 1 2075 0
	subq	$1, %rax	#, D.24364
	movq	%rax, %rsi	# D.24364,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.24355
	movq	-56(%rbp), %rax	# reg, tmp620
	movzbl	2(%rax), %eax	# reg_288->mode, D.24356
	movzbl	%al, %eax	# D.24356, D.24363
	.loc 1 2074 0
	movq	-56(%rbp), %rsi	# reg, tmp621
	movq	-56(%rbp), %rdx	# reg, tmp622
	movl	$3, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rsi, %r8	# tmp621,
	movl	$83, %esi	#,
	movl	%eax, %edi	# D.24363,
	call	expand_simple_binop	#
	movq	%rax, -48(%rbp)	# tmp623, tem
	.loc 1 2080 0
	cmpq	$0, -48(%rbp)	#, tem
	jne	.L433	#,
	.loc 1 2081 0
	movl	$__FUNCTION__.12910, %edx	#,
	movl	$2081, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L433:
	.loc 1 2082 0
	movq	-48(%rbp), %rax	# tem, tmp624
	cmpq	-56(%rbp), %rax	# reg, tmp624
	je	.L434	#,
	.loc 1 2083 0
	movq	-48(%rbp), %rdx	# tem, tmp625
	movq	-56(%rbp), %rax	# reg, tmp626
	movq	%rdx, %rsi	# tmp625,
	movq	%rax, %rdi	# tmp626,
	call	emit_move_insn	#
.L434:
	.loc 1 2084 0
	call	gen_sequence	#
	movq	%rax, -40(%rbp)	# tmp627, sequence
	.loc 1 2085 0
	call	end_sequence	#
	.loc 1 2086 0
	movq	-40(%rbp), %rdx	# sequence, tmp628
	movq	-296(%rbp), %rax	# loop, tmp629
	movq	%rdx, %rsi	# tmp628,
	movq	%rax, %rdi	# tmp629,
	call	loop_insn_hoist	#
	movq	%rax, -208(%rbp)	# tmp630, i1
.LBE23:
	jmp	.L435	#
.L432:
	.loc 1 2088 0
	movq	-240(%rbp), %rax	# p, tmp631
	movzwl	(%rax), %eax	# p_19->code, D.24362
	cmpw	$34, %ax	#, D.24362
	jne	.L436	#,
	.loc 1 2090 0
	movq	-240(%rbp), %rax	# p, tmp632
	movq	32(%rax), %rdx	# p_19->fld[3].rtx, D.24355
	movq	-296(%rbp), %rax	# loop, tmp633
	movq	%rdx, %rsi	# D.24355,
	movq	%rax, %rdi	# tmp633,
	call	loop_call_insn_hoist	#
	movq	%rax, -208(%rbp)	# tmp634, i1
	.loc 1 2094 0
	movq	-240(%rbp), %rax	# p, tmp635
	movq	64(%rax), %rax	# p_19->fld[7].rtx, D.24355
	testq	%rax, %rax	# D.24355
	je	.L435	#,
	.loc 1 2096 0
	movq	-240(%rbp), %rax	# p, tmp636
	movq	64(%rax), %rax	# p_19->fld[7].rtx, D.24355
	movq	%rax, %rdi	# D.24355,
	call	copy_rtx	#
	movq	-208(%rbp), %rdx	# i1, tmp637
	movq	%rax, 64(%rdx)	# D.24355, i1_303->fld[7].rtx
	jmp	.L435	#
.L436:
	.loc 1 2098 0
	movq	-256(%rbp), %rax	# m, tmp638
	movl	32(%rax), %eax	# m_14->consec, D.24353
	cmpl	-288(%rbp), %eax	# count, D.24353
	jne	.L438	#,
	.loc 1 2098 0 is_stmt 0 discriminator 1
	movq	-256(%rbp), %rax	# m, tmp639
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$64, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L438	#,
.LBB24:
	.loc 1 2103 0 is_stmt 1
	call	start_sequence	#
	.loc 1 2104 0
	movq	-256(%rbp), %rax	# m, tmp640
	movq	8(%rax), %rdx	# m_14->set_src, D.24355
	movq	-256(%rbp), %rax	# m, tmp641
	movq	16(%rax), %rax	# m_14->set_dest, D.24355
	movq	%rdx, %rsi	# D.24355,
	movq	%rax, %rdi	# D.24355,
	call	emit_move_insn	#
	.loc 1 2105 0
	call	get_insns	#
	movq	%rax, -200(%rbp)	# tmp642, temp
	.loc 1 2106 0
	call	gen_sequence	#
	movq	%rax, -32(%rbp)	# tmp643, seq
	.loc 1 2107 0
	call	end_sequence	#
	.loc 1 2109 0
	movq	-256(%rbp), %rax	# m, tmp644
	movq	8(%rax), %rax	# m_14->set_src, D.24355
	movq	-200(%rbp), %rdx	# temp, tmp645
	movq	%rdx, %rsi	# tmp645,
	movq	%rax, %rdi	# D.24355,
	call	add_label_notes	#
	.loc 1 2111 0
	movq	-32(%rbp), %rdx	# seq, tmp646
	movq	-296(%rbp), %rax	# loop, tmp647
	movq	%rdx, %rsi	# tmp646,
	movq	%rax, %rdi	# tmp647,
	call	loop_insn_hoist	#
	movq	%rax, -208(%rbp)	# tmp648, i1
	.loc 1 2112 0
	movq	-208(%rbp), %rax	# i1, tmp649
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp649,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24355
	jne	.L439	#,
	.loc 1 2113 0
	movq	-256(%rbp), %rax	# m, tmp650
	movq	8(%rax), %rdx	# m_14->set_src, D.24355
	movq	-256(%rbp), %rax	# m, tmp651
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$-128, %eax	#, D.24356
	testb	%al, %al	# D.24356
	je	.L440	#,
	.loc 1 2113 0 is_stmt 0 discriminator 1
	movl	$3, %eax	#, iftmp.193
	jmp	.L441	#
.L440:
	.loc 1 2113 0 discriminator 2
	movl	$4, %eax	#, iftmp.193
.L441:
	.loc 1 2113 0 discriminator 3
	movq	-208(%rbp), %rcx	# i1, tmp652
	movl	%eax, %esi	# iftmp.193,
	movq	%rcx, %rdi	# tmp652,
	call	set_unique_reg_note	#
.LBE24:
	.loc 1 2099 0 is_stmt 1 discriminator 3
	jmp	.L435	#
.L439:
	.loc 1 2099 0 is_stmt 0
	jmp	.L435	#
.L438:
	.loc 1 2117 0 is_stmt 1
	movq	-240(%rbp), %rax	# p, tmp653
	movq	32(%rax), %rdx	# p_19->fld[3].rtx, D.24355
	movq	-296(%rbp), %rax	# loop, tmp654
	movq	%rdx, %rsi	# D.24355,
	movq	%rax, %rdi	# tmp654,
	call	loop_insn_hoist	#
	movq	%rax, -208(%rbp)	# tmp655, i1
.L435:
	.loc 1 2119 0
	movq	-208(%rbp), %rax	# i1, tmp656
	movq	56(%rax), %rax	# i1_33->fld[6].rtx, D.24355
	testq	%rax, %rax	# D.24355
	jne	.L442	#,
	.loc 1 2121 0
	movq	-240(%rbp), %rax	# p, tmp657
	movq	56(%rax), %rdx	# p_19->fld[6].rtx, D.24355
	movq	-208(%rbp), %rax	# i1, tmp658
	movq	%rdx, 56(%rax)	# D.24355, i1_33->fld[6].rtx
	.loc 1 2122 0
	movq	-240(%rbp), %rax	# p, tmp659
	movq	$0, 56(%rax)	#, p_19->fld[6].rtx
	.loc 1 2130 0
	movq	-208(%rbp), %rax	# i1, tmp660
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp660,
	call	find_reg_note	#
	movq	%rax, -200(%rbp)	# tmp661, temp
	cmpq	$0, -200(%rbp)	#, temp
	je	.L442	#,
	.loc 1 2131 0
	movq	-200(%rbp), %rax	# temp, tmp662
	movq	8(%rax), %rdx	# temp_326->fld[0].rtx, D.24355
	movq	-296(%rbp), %rax	# loop, tmp663
	movq	%rdx, %rsi	# D.24355,
	movq	%rax, %rdi	# tmp663,
	call	loop_invariant_p	#
	testl	%eax, %eax	# D.24353
	jne	.L442	#,
	.loc 1 2132 0
	movq	-200(%rbp), %rdx	# temp, tmp664
	movq	-208(%rbp), %rax	# i1, tmp665
	movq	%rdx, %rsi	# tmp664,
	movq	%rax, %rdi	# tmp665,
	call	remove_note	#
.L442:
	.loc 1 2135 0
	cmpq	$0, -264(%rbp)	#, new_start
	jne	.L443	#,
	.loc 1 2136 0
	movq	-208(%rbp), %rax	# i1, tmp666
	movq	%rax, -264(%rbp)	# tmp666, new_start
.L443:
	.loc 1 2138 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.194
	testq	%rax, %rax	# loop_dump_stream.194
	je	.L444	#,
	.loc 1 2139 0
	movq	-208(%rbp), %rax	# i1, tmp667
	movl	8(%rax), %edx	# i1_33->fld[0].rtint, D.24353
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.195
	movl	$.LC15, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.195,
	movl	$0, %eax	#,
	call	fprintf	#
.L444:
	.loc 1 2145 0
	movq	-208(%rbp), %rax	# i1, tmp668
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp668,
	call	find_reg_note	#
	movq	%rax, -200(%rbp)	# tmp669, temp
	cmpq	$0, -200(%rbp)	#, temp
	je	.L445	#,
	.loc 1 2147 0
	movq	-200(%rbp), %rax	# temp, tmp670
	movq	-224(%rbp), %rdx	# first, tmp671
	movq	%rdx, 8(%rax)	# tmp671, temp_333->fld[0].rtx
	.loc 1 2148 0
	movq	-224(%rbp), %rax	# first, tmp672
	movl	$0, %edx	#,
	movl	$7, %esi	#,
	movq	%rax, %rdi	# tmp672,
	call	find_reg_note	#
	movq	%rax, -200(%rbp)	# tmp673, temp
	.loc 1 2149 0
	movq	-200(%rbp), %rax	# temp, tmp674
	movq	-208(%rbp), %rdx	# i1, tmp675
	movq	%rdx, 8(%rax)	# tmp675, temp_334->fld[0].rtx
.L445:
	.loc 1 2152 0
	movq	-240(%rbp), %rax	# p, tmp676
	movq	%rax, -200(%rbp)	# tmp676, temp
	.loc 1 2153 0
	movq	-240(%rbp), %rax	# p, tmp677
	movq	%rax, %rdi	# tmp677,
	call	delete_insn	#
	.loc 1 2154 0
	movq	-240(%rbp), %rax	# p, tmp678
	movq	24(%rax), %rax	# p_19->fld[2].rtx, tmp679
	movq	%rax, -240(%rbp)	# tmp679, p
	.loc 1 2162 0
	jmp	.L446	#
.L448:
	.loc 1 2163 0
	movq	-240(%rbp), %rax	# p, tmp680
	movq	24(%rax), %rdx	# p_20->fld[2].rtx, D.24355
	movq	-200(%rbp), %rax	# temp, tmp681
	movq	%rdx, 24(%rax)	# D.24355, temp_335->fld[2].rtx
	movq	-200(%rbp), %rax	# temp, tmp682
	movq	24(%rax), %rax	# temp_335->fld[2].rtx, tmp683
	movq	%rax, -240(%rbp)	# tmp683, p
.L446:
	.loc 1 2162 0 discriminator 1
	cmpq	$0, -240(%rbp)	#, p
	je	.L447	#,
	.loc 1 2162 0 is_stmt 0 discriminator 2
	movq	-240(%rbp), %rax	# p, tmp684
	movzwl	(%rax), %eax	# p_20->code, D.24362
	cmpw	$37, %ax	#, D.24362
	je	.L448	#,
.L447:
.LBE20:
	.loc 1 1965 0 is_stmt 1
	subl	$1, -288(%rbp)	#, count
.L412:
	.loc 1 1965 0 is_stmt 0 discriminator 1
	cmpl	$0, -288(%rbp)	#, count
	jns	.L449	#,
	.loc 1 2167 0 is_stmt 1
	subl	$3, -308(%rbp)	#, threshold
.L397:
	.loc 1 2172 0
	movl	-268(%rbp), %eax	# regno, tmp685
	movslq	%eax, %rdx	# tmp685, D.24360
	movq	-128(%rbp), %rax	# already_moved, tmp686
	addq	%rdx, %rax	# D.24360, D.24361
	movb	$1, (%rax)	#, *_343
	.loc 1 2175 0
	movq	-160(%rbp), %rax	# regs, tmp687
	movq	8(%rax), %rcx	# regs_72->array, D.24358
	movl	-268(%rbp), %eax	# regno, tmp688
	movslq	%eax, %rdx	# tmp688, D.24351
	movq	%rdx, %rax	# D.24351, tmp689
	addq	%rax, %rax	# tmp689
	addq	%rdx, %rax	# D.24351, tmp689
	salq	$3, %rax	#, tmp690
	addq	%rcx, %rax	# D.24358, D.24358
	movb	$1, 17(%rax)	#, _347->moved_once
	.loc 1 2178 0
	movq	-256(%rbp), %rax	# m, tmp691
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$16, %eax	#, D.24356
	testb	%al, %al	# D.24356
	jne	.L450	#,
.LBB25:
	.loc 1 2181 0
	movl	$0, -284(%rbp)	#, i
	jmp	.L451	#
.L475:
	.loc 1 2182 0 discriminator 2
	movq	-160(%rbp), %rax	# regs, tmp692
	movq	8(%rax), %rcx	# regs_72->array, D.24358
	movl	-284(%rbp), %eax	# i, tmp693
	movl	-268(%rbp), %edx	# regno, tmp694
	addl	%edx, %eax	# tmp694, D.24353
	movslq	%eax, %rdx	# D.24353, D.24351
	movq	%rdx, %rax	# D.24351, tmp695
	addq	%rax, %rax	# tmp695
	addq	%rdx, %rax	# D.24351, tmp695
	salq	$3, %rax	#, tmp696
	addq	%rcx, %rax	# D.24358, D.24358
	movl	$0, (%rax)	#, _400->set_in_loop
	.loc 1 2181 0 discriminator 2
	addl	$1, -284(%rbp)	#, i
.L451:
	.loc 1 2181 0 is_stmt 0 discriminator 1
	cmpl	$52, -268(%rbp)	#, regno
	jg	.L452	#,
	cmpl	$7, -268(%rbp)	#, regno
	jle	.L453	#,
	cmpl	$15, -268(%rbp)	#, regno
	jle	.L454	#,
.L453:
	.loc 1 2181 0 discriminator 2
	cmpl	$20, -268(%rbp)	#, regno
	jle	.L455	#,
	.loc 1 2181 0 discriminator 1
	cmpl	$28, -268(%rbp)	#, regno
	jle	.L454	#,
.L455:
	.loc 1 2181 0 discriminator 2
	cmpl	$44, -268(%rbp)	#, regno
	jle	.L456	#,
	.loc 1 2181 0 discriminator 1
	cmpl	$52, -268(%rbp)	#, regno
	jle	.L454	#,
.L456:
	.loc 1 2181 0 discriminator 2
	cmpl	$28, -268(%rbp)	#, regno
	jle	.L457	#,
	.loc 1 2181 0 discriminator 1
	cmpl	$36, -268(%rbp)	#, regno
	jg	.L457	#,
.L454:
	movq	-256(%rbp), %rax	# m, tmp697
	movq	16(%rax), %rax	# m_14->set_dest, D.24355
	movzbl	2(%rax), %eax	# _383->mode, D.24356
	movzbl	%al, %eax	# D.24356, D.24353
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24365
	cmpl	$5, %eax	#, D.24365
	je	.L458	#,
	.loc 1 2181 0 discriminator 2
	movq	-256(%rbp), %rax	# m, tmp699
	movq	16(%rax), %rax	# m_14->set_dest, D.24355
	movzbl	2(%rax), %eax	# _387->mode, D.24356
	movzbl	%al, %eax	# D.24356, D.24353
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24365
	cmpl	$6, %eax	#, D.24365
	jne	.L459	#,
.L458:
	.loc 1 2181 0 discriminator 1
	movl	$2, %eax	#, iftmp.198
	jmp	.L460	#
.L459:
	movl	$1, %eax	#, iftmp.198
.L460:
	.loc 1 2181 0 discriminator 3
	jmp	.L461	#
.L457:
	.loc 1 2181 0 discriminator 2
	movq	-256(%rbp), %rax	# m, tmp701
	movq	16(%rax), %rax	# m_14->set_dest, D.24355
	movzbl	2(%rax), %eax	# _351->mode, D.24356
	cmpb	$18, %al	#, D.24356
	jne	.L462	#,
	.loc 1 2181 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.201
	andl	$33554432, %eax	#, D.24353
	testl	%eax, %eax	# D.24353
	je	.L463	#,
	movl	$2, %eax	#, iftmp.200
	jmp	.L474	#
.L463:
	.loc 1 2181 0 discriminator 2
	movl	$3, %eax	#, iftmp.200
	jmp	.L474	#
.L462:
	movq	-256(%rbp), %rax	# m, tmp702
	movq	16(%rax), %rax	# m_14->set_dest, D.24355
	movzbl	2(%rax), %eax	# _358->mode, D.24356
	cmpb	$24, %al	#, D.24356
	jne	.L466	#,
	.loc 1 2181 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.204
	andl	$33554432, %eax	#, D.24353
	testl	%eax, %eax	# D.24353
	je	.L467	#,
	movl	$4, %eax	#, iftmp.203
	jmp	.L474	#
.L467:
	.loc 1 2181 0 discriminator 2
	movl	$6, %eax	#, iftmp.203
	jmp	.L474	#
.L466:
	movq	-256(%rbp), %rax	# m, tmp703
	movq	16(%rax), %rax	# m_14->set_dest, D.24355
	movzbl	2(%rax), %eax	# _365->mode, D.24356
	movzbl	%al, %eax	# D.24356, D.24353
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24356
	movzbl	%al, %edx	# D.24356, D.24353
	movl	target_flags(%rip), %eax	# target_flags, target_flags.206
	andl	$33554432, %eax	#, D.24353
	testl	%eax, %eax	# D.24353
	je	.L470	#,
	.loc 1 2181 0 discriminator 1
	movl	$8, %eax	#, iftmp.205
	jmp	.L471	#
.L470:
	.loc 1 2181 0 discriminator 2
	movl	$4, %eax	#, iftmp.205
.L471:
	.loc 1 2181 0 discriminator 3
	addl	%edx, %eax	# D.24353, D.24353
	subl	$1, %eax	#, D.24353
	movl	target_flags(%rip), %edx	# target_flags, target_flags.208
	andl	$33554432, %edx	#, D.24353
	testl	%edx, %edx	# D.24353
	je	.L472	#,
	.loc 1 2181 0 discriminator 1
	movl	$8, %ebx	#, iftmp.207
	jmp	.L473	#
.L472:
	.loc 1 2181 0 discriminator 2
	movl	$4, %ebx	#, iftmp.207
.L473:
	.loc 1 2181 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.207
.L461:
	jmp	.L474	#
.L452:
	.loc 1 2181 0 discriminator 2
	movl	$1, %eax	#, iftmp.196
.L474:
	.loc 1 2181 0 discriminator 3
	cmpl	-284(%rbp), %eax	# i, iftmp.196
	jg	.L475	#,
.L450:
.LBE25:
	.loc 1 2185 0 is_stmt 1
	movq	-256(%rbp), %rax	# m, tmp707
	movzbl	44(%rax), %edx	# m_14->done, tmp710
	orl	$8, %edx	#, tmp711
	movb	%dl, 44(%rax)	# tmp711, m_14->done
	.loc 1 2191 0
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.209
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.210
	movl	-268(%rbp), %ecx	# regno, tmp713
	movslq	%ecx, %rcx	# tmp713, tmp712
	addq	$4, %rcx	#, tmp714
	movq	(%rax,%rcx,8), %rax	# reg_n_info.210_403->data.reg, D.24366
	movl	(%rax), %eax	# _404->first_uid, D.24353
	cltq
	salq	$2, %rax	#, D.24351
	addq	%rdx, %rax	# uid_luid.209, D.24367
	movl	(%rax), %edx	# *_408, D.24353
	movq	-152(%rbp), %rax	# loop_start, tmp715
	movl	8(%rax), %ecx	# loop_start_75->fld[0].rtint, D.24353
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.212
	cmpl	%eax, %ecx	# max_uid_for_loop.212, D.24353
	jge	.L476	#,
	.loc 1 2191 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.213
	movq	-152(%rbp), %rax	# loop_start, tmp716
	movl	8(%rax), %eax	# loop_start_75->fld[0].rtint, D.24353
	cltq
	salq	$2, %rax	#, D.24351
	addq	%rcx, %rax	# uid_luid.213, D.24367
	movl	(%rax), %eax	# *_416, iftmp.211
	cmpl	%eax, %edx	# iftmp.211, D.24353
	jle	.L478	#,
	jmp	.L524	#
.L476:
	.loc 1 2191 0 discriminator 2
	movl	$__FUNCTION__.12910, %edx	#,
	movl	$2191, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L524:
	.loc 1 2195 0 is_stmt 1
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.214
	movl	-268(%rbp), %edx	# regno, tmp718
	movslq	%edx, %rdx	# tmp718, tmp717
	addq	$4, %rdx	#, tmp719
	movq	(%rax,%rdx,8), %rax	# reg_n_info.214_418->data.reg, D.24366
	movq	-152(%rbp), %rdx	# loop_start, tmp720
	movl	8(%rdx), %edx	# loop_start_75->fld[0].rtint, D.24353
	movl	%edx, (%rax)	# D.24353, _419->first_uid
.L478:
	.loc 1 2196 0
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.215
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.216
	movl	-268(%rbp), %ecx	# regno, tmp722
	movslq	%ecx, %rcx	# tmp722, tmp721
	addq	$4, %rcx	#, tmp723
	movq	(%rax,%rcx,8), %rax	# reg_n_info.216_422->data.reg, D.24366
	movl	4(%rax), %eax	# _423->last_uid, D.24353
	cltq
	salq	$2, %rax	#, D.24351
	addq	%rdx, %rax	# uid_luid.215, D.24367
	movl	(%rax), %edx	# *_427, D.24353
	movq	-144(%rbp), %rax	# loop_end, tmp724
	movl	8(%rax), %ecx	# loop_end_76->fld[0].rtint, D.24353
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.218
	cmpl	%eax, %ecx	# max_uid_for_loop.218, D.24353
	jge	.L479	#,
	.loc 1 2196 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.219
	movq	-144(%rbp), %rax	# loop_end, tmp725
	movl	8(%rax), %eax	# loop_end_76->fld[0].rtint, D.24353
	cltq
	salq	$2, %rax	#, D.24351
	addq	%rcx, %rax	# uid_luid.219, D.24367
	movl	(%rax), %eax	# *_435, iftmp.217
	cmpl	%eax, %edx	# iftmp.217, D.24353
	jge	.L481	#,
	jmp	.L525	#
.L479:
	.loc 1 2196 0 discriminator 2
	movl	$__FUNCTION__.12910, %edx	#,
	movl	$2196, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L525:
	.loc 1 2197 0 is_stmt 1
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.220
	movl	-268(%rbp), %edx	# regno, tmp727
	movslq	%edx, %rdx	# tmp727, tmp726
	addq	$4, %rdx	#, tmp728
	movq	(%rax,%rdx,8), %rax	# reg_n_info.220_437->data.reg, D.24366
	movq	-144(%rbp), %rdx	# loop_end, tmp729
	movl	8(%rdx), %edx	# loop_end_76->fld[0].rtint, D.24353
	movl	%edx, 4(%rax)	# D.24353, _438->last_uid
.L481:
	.loc 1 2201 0
	movq	-256(%rbp), %rax	# m, tmp730
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$16, %eax	#, D.24356
	testb	%al, %al	# D.24356
	jne	.L482	#,
	.loc 1 2202 0
	movq	-304(%rbp), %rax	# movables, tmp731
	movq	(%rax), %rax	# movables_81(D)->head, tmp732
	movq	%rax, -232(%rbp)	# tmp732, m1
	jmp	.L483	#
.L514:
	.loc 1 2203 0
	movq	-232(%rbp), %rax	# m1, tmp733
	movq	56(%rax), %rax	# m1_25->match, D.24357
	cmpq	-256(%rbp), %rax	# m, D.24357
	jne	.L484	#,
.LBB26:
	.loc 1 2218 0
	movq	-256(%rbp), %rax	# m, tmp734
	movq	16(%rax), %rax	# m_14->set_dest, D.24355
	movzbl	2(%rax), %edx	# _444->mode, D.24356
	movq	-232(%rbp), %rax	# m1, tmp735
	movq	16(%rax), %rax	# m1_25->set_dest, D.24355
	movzbl	2(%rax), %eax	# _446->mode, D.24356
	cmpb	%al, %dl	# D.24356, D.24356
	jne	.L485	#,
	.loc 1 2219 0
	movq	-232(%rbp), %rax	# m1, tmp736
	movl	36(%rax), %eax	# m1_25->regno, D.24354
	movl	%eax, %eax	# D.24354, D.24351
	leaq	0(,%rax,8), %rdx	#, D.24351
	movq	-136(%rbp), %rax	# reg_map, tmp737
	addq	%rax, %rdx	# tmp737, D.24368
	movq	-256(%rbp), %rax	# m, tmp738
	movq	16(%rax), %rax	# m_14->set_dest, D.24355
	movq	%rax, (%rdx)	# D.24355, *_451
	jmp	.L486	#
.L485:
	.loc 1 2221 0
	movq	-232(%rbp), %rax	# m1, tmp739
	movl	36(%rax), %eax	# m1_25->regno, D.24354
	movl	%eax, %eax	# D.24354, D.24351
	leaq	0(,%rax,8), %rdx	#, D.24351
	movq	-136(%rbp), %rax	# reg_map, tmp740
	leaq	(%rdx,%rax), %rbx	#, D.24368
	.loc 1 2222 0
	movq	-256(%rbp), %rax	# m, tmp741
	movq	16(%rax), %rdx	# m_14->set_dest, D.24355
	movq	-232(%rbp), %rax	# m1, tmp742
	movq	16(%rax), %rax	# m1_25->set_dest, D.24355
	movzbl	2(%rax), %eax	# _458->mode, D.24356
	movzbl	%al, %eax	# D.24356, D.24363
	movq	%rdx, %rsi	# D.24355,
	movl	%eax, %edi	# D.24363,
	call	gen_lowpart_common	#
	movq	%rax, (%rbx)	# D.24355, *_456
.L486:
	.loc 1 2227 0
	movq	-232(%rbp), %rax	# m1, tmp743
	movzbl	44(%rax), %edx	# m1_25->done, tmp746
	orl	$8, %edx	#, tmp747
	movb	%dl, 44(%rax)	# tmp747, m1_25->done
	.loc 1 2230 0
	movq	-232(%rbp), %rax	# m1, tmp748
	movq	(%rax), %rax	# m1_25->insn, D.24355
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# D.24355,
	call	find_reg_note	#
	movq	%rax, -24(%rbp)	# tmp749, temp
	cmpq	$0, -24(%rbp)	#, temp
	je	.L487	#,
	.loc 1 2232 0
	movq	-232(%rbp), %rax	# m1, tmp750
	movq	(%rax), %rdx	# m1_25->insn, D.24355
	movq	-24(%rbp), %rax	# temp, tmp751
	movq	8(%rax), %rax	# temp_463->fld[0].rtx, D.24355
	movq	%rdx, %rsi	# D.24355,
	movq	%rax, %rdi	# D.24355,
	call	delete_insn_chain	#
	jmp	.L488	#
.L487:
	.loc 1 2234 0
	movq	-232(%rbp), %rax	# m1, tmp752
	movq	(%rax), %rax	# m1_25->insn, D.24355
	movq	%rax, %rdi	# D.24355,
	call	delete_insn	#
.L488:
	.loc 1 2238 0
	movq	-232(%rbp), %rax	# m1, tmp753
	movl	36(%rax), %eax	# m1_25->regno, D.24354
	movl	%eax, %edx	# D.24354, D.24360
	movq	-128(%rbp), %rax	# already_moved, tmp754
	addq	%rdx, %rax	# D.24360, D.24361
	movb	$1, (%rax)	#, *_469
	.loc 1 2242 0
	movq	-256(%rbp), %rax	# m, tmp755
	movzbl	44(%rax), %eax	# *m_14, D.24356
	andl	$16, %eax	#, D.24356
	testb	%al, %al	# D.24356
	jne	.L484	#,
.LBB27:
	.loc 1 2245 0
	movl	$0, -280(%rbp)	#, i
	jmp	.L489	#
.L513:
	.loc 1 2248 0
	movq	-160(%rbp), %rax	# regs, tmp756
	movq	8(%rax), %rcx	# regs_72->array, D.24358
	movq	-232(%rbp), %rax	# m1, tmp757
	movl	36(%rax), %edx	# m1_25->regno, D.24354
	movl	-280(%rbp), %eax	# i, i.221
	addl	%edx, %eax	# D.24354, D.24354
	movl	%eax, %edx	# D.24354, D.24351
	movq	%rdx, %rax	# D.24351, tmp758
	addq	%rax, %rax	# tmp758
	addq	%rdx, %rax	# D.24351, tmp758
	salq	$3, %rax	#, tmp759
	addq	%rcx, %rax	# D.24358, D.24358
	movl	$0, (%rax)	#, _524->set_in_loop
	.loc 1 2247 0
	addl	$1, -280(%rbp)	#, i
.L489:
	.loc 1 2246 0
	cmpl	$52, -268(%rbp)	#, regno
	jg	.L490	#,
	.loc 1 2246 0 is_stmt 0 discriminator 1
	cmpl	$7, -268(%rbp)	#, regno
	jle	.L491	#,
	cmpl	$15, -268(%rbp)	#, regno
	jle	.L492	#,
.L491:
	.loc 1 2246 0 discriminator 2
	cmpl	$20, -268(%rbp)	#, regno
	jle	.L493	#,
	.loc 1 2246 0 discriminator 1
	cmpl	$28, -268(%rbp)	#, regno
	jle	.L492	#,
.L493:
	.loc 1 2246 0 discriminator 2
	cmpl	$44, -268(%rbp)	#, regno
	jle	.L494	#,
	.loc 1 2246 0 discriminator 1
	cmpl	$52, -268(%rbp)	#, regno
	jle	.L492	#,
.L494:
	.loc 1 2246 0 discriminator 2
	cmpl	$28, -268(%rbp)	#, regno
	jle	.L495	#,
	.loc 1 2246 0 discriminator 1
	cmpl	$36, -268(%rbp)	#, regno
	jg	.L495	#,
.L492:
	movq	-232(%rbp), %rax	# m1, tmp760
	movq	16(%rax), %rax	# m1_25->set_dest, D.24355
	movzbl	2(%rax), %eax	# _505->mode, D.24356
	movzbl	%al, %eax	# D.24356, D.24353
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24365
	cmpl	$5, %eax	#, D.24365
	je	.L496	#,
	.loc 1 2246 0 discriminator 2
	movq	-232(%rbp), %rax	# m1, tmp762
	movq	16(%rax), %rax	# m1_25->set_dest, D.24355
	movzbl	2(%rax), %eax	# _509->mode, D.24356
	movzbl	%al, %eax	# D.24356, D.24353
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24365
	cmpl	$6, %eax	#, D.24365
	jne	.L497	#,
.L496:
	.loc 1 2246 0 discriminator 1
	movl	$2, %eax	#, iftmp.224
	jmp	.L498	#
.L497:
	movl	$1, %eax	#, iftmp.224
.L498:
	.loc 1 2246 0 discriminator 3
	jmp	.L499	#
.L495:
	.loc 1 2246 0 discriminator 2
	movq	-232(%rbp), %rax	# m1, tmp764
	movq	16(%rax), %rax	# m1_25->set_dest, D.24355
	movzbl	2(%rax), %eax	# _473->mode, D.24356
	cmpb	$18, %al	#, D.24356
	jne	.L500	#,
	.loc 1 2246 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.227
	andl	$33554432, %eax	#, D.24353
	testl	%eax, %eax	# D.24353
	je	.L501	#,
	movl	$2, %eax	#, iftmp.226
	jmp	.L512	#
.L501:
	.loc 1 2246 0 discriminator 2
	movl	$3, %eax	#, iftmp.226
	jmp	.L512	#
.L500:
	movq	-232(%rbp), %rax	# m1, tmp765
	movq	16(%rax), %rax	# m1_25->set_dest, D.24355
	movzbl	2(%rax), %eax	# _480->mode, D.24356
	cmpb	$24, %al	#, D.24356
	jne	.L504	#,
	.loc 1 2246 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.230
	andl	$33554432, %eax	#, D.24353
	testl	%eax, %eax	# D.24353
	je	.L505	#,
	movl	$4, %eax	#, iftmp.229
	jmp	.L512	#
.L505:
	.loc 1 2246 0 discriminator 2
	movl	$6, %eax	#, iftmp.229
	jmp	.L512	#
.L504:
	movq	-232(%rbp), %rax	# m1, tmp766
	movq	16(%rax), %rax	# m1_25->set_dest, D.24355
	movzbl	2(%rax), %eax	# _487->mode, D.24356
	movzbl	%al, %eax	# D.24356, D.24353
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24356
	movzbl	%al, %edx	# D.24356, D.24353
	movl	target_flags(%rip), %eax	# target_flags, target_flags.232
	andl	$33554432, %eax	#, D.24353
	testl	%eax, %eax	# D.24353
	je	.L508	#,
	.loc 1 2246 0 discriminator 1
	movl	$8, %eax	#, iftmp.231
	jmp	.L509	#
.L508:
	.loc 1 2246 0 discriminator 2
	movl	$4, %eax	#, iftmp.231
.L509:
	.loc 1 2246 0 discriminator 3
	addl	%edx, %eax	# D.24353, D.24353
	subl	$1, %eax	#, D.24353
	movl	target_flags(%rip), %edx	# target_flags, target_flags.234
	andl	$33554432, %edx	#, D.24353
	testl	%edx, %edx	# D.24353
	je	.L510	#,
	.loc 1 2246 0 discriminator 1
	movl	$8, %ebx	#, iftmp.233
	jmp	.L511	#
.L510:
	.loc 1 2246 0 discriminator 2
	movl	$4, %ebx	#, iftmp.233
.L511:
	.loc 1 2246 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.233
.L499:
	jmp	.L512	#
.L490:
	.loc 1 2246 0 discriminator 2
	movl	$1, %eax	#, iftmp.222
.L512:
	.loc 1 2245 0 is_stmt 1
	cmpl	-280(%rbp), %eax	# i, iftmp.222
	jg	.L513	#,
.L484:
.LBE27:
.LBE26:
	.loc 1 2202 0
	movq	-232(%rbp), %rax	# m1, tmp770
	movq	72(%rax), %rax	# m1_25->next, tmp771
	movq	%rax, -232(%rbp)	# tmp771, m1
.L483:
	.loc 1 2202 0 is_stmt 0 discriminator 1
	cmpq	$0, -232(%rbp)	#, m1
	jne	.L514	#,
.L482:
.LBE17:
	.loc 1 1867 0 is_stmt 1
	jmp	.L515	#
.L391:
	.loc 1 2252 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.235
	testq	%rax, %rax	# loop_dump_stream.235
	je	.L515	#,
	.loc 1 2253 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.236
	movq	%rax, %rcx	# loop_dump_stream.236,
	movl	$13, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC16, %edi	#,
	call	fwrite	#
.LBE16:
	.loc 1 1831 0
	jmp	.L516	#
.L515:
	jmp	.L516	#
.L382:
	.loc 1 2255 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.237
	testq	%rax, %rax	# loop_dump_stream.237
	je	.L516	#,
	.loc 1 2255 0 is_stmt 0 discriminator 1
	movq	-256(%rbp), %rax	# m, tmp772
	movq	56(%rax), %rax	# m_14->match, D.24357
	testq	%rax, %rax	# D.24357
	jne	.L516	#,
	.loc 1 2256 0 is_stmt 1
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.238
	movq	%rax, %rcx	# loop_dump_stream.238,
	movl	$8, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC17, %edi	#,
	call	fwrite	#
.L516:
	.loc 1 2258 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.239
	testq	%rax, %rax	# loop_dump_stream.239
	je	.L517	#,
	.loc 1 2259 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.240
	movq	%rax, %rsi	# loop_dump_stream.240,
	movl	$10, %edi	#,
	call	fputc	#
.L517:
	.loc 1 1790 0
	movq	-256(%rbp), %rax	# m, tmp773
	movq	72(%rax), %rax	# m_14->next, tmp774
	movq	%rax, -256(%rbp)	# tmp774, m
.L373:
	.loc 1 1790 0 is_stmt 0 discriminator 1
	cmpq	$0, -256(%rbp)	#, m
	jne	.L518	#,
	.loc 1 2262 0 is_stmt 1
	cmpq	$0, -264(%rbp)	#, new_start
	jne	.L519	#,
	.loc 1 2263 0
	movq	-152(%rbp), %rax	# loop_start, tmp775
	movq	%rax, -264(%rbp)	# tmp775, new_start
.L519:
	.loc 1 2267 0
	movq	-264(%rbp), %rax	# new_start, tmp776
	movq	%rax, -248(%rbp)	# tmp776, p
	jmp	.L520	#
.L523:
	.loc 1 2268 0
	movq	-248(%rbp), %rax	# p, tmp777
	movzwl	(%rax), %eax	# p_15->code, D.24362
	cmpw	$32, %ax	#, D.24362
	je	.L521	#,
	.loc 1 2268 0 is_stmt 0 discriminator 1
	movq	-248(%rbp), %rax	# p, tmp778
	movzwl	(%rax), %eax	# p_15->code, D.24362
	cmpw	$33, %ax	#, D.24362
	je	.L521	#,
	.loc 1 2269 0 is_stmt 1
	movq	-248(%rbp), %rax	# p, tmp779
	movzwl	(%rax), %eax	# p_15->code, D.24362
	cmpw	$34, %ax	#, D.24362
	jne	.L522	#,
.L521:
	.loc 1 2271 0
	movl	-276(%rbp), %edx	# nregs, nregs.241
	movq	-248(%rbp), %rax	# p, tmp780
	movq	32(%rax), %rax	# p_15->fld[3].rtx, D.24355
	movq	-136(%rbp), %rsi	# reg_map, tmp781
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# D.24355,
	call	replace_regs	#
	.loc 1 2272 0
	movl	-276(%rbp), %edx	# nregs, nregs.242
	movq	-248(%rbp), %rax	# p, tmp782
	movq	56(%rax), %rax	# p_15->fld[6].rtx, D.24355
	movq	-136(%rbp), %rsi	# reg_map, tmp783
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# D.24355,
	call	replace_regs	#
	.loc 1 2273 0
	movq	-248(%rbp), %rax	# p, tmp784
	movl	$-1, 40(%rax)	#, p_15->fld[4].rtint
.L522:
	.loc 1 2267 0
	movq	-248(%rbp), %rax	# p, tmp785
	movq	24(%rax), %rax	# p_15->fld[2].rtx, tmp786
	movq	%rax, -248(%rbp)	# tmp786, p
.L520:
	.loc 1 2267 0 is_stmt 0 discriminator 1
	movq	-248(%rbp), %rax	# p, tmp787
	cmpq	-144(%rbp), %rax	# loop_end, tmp787
	jne	.L523	#,
	.loc 1 2277 0 is_stmt 1
	movq	-136(%rbp), %rax	# reg_map, tmp788
	movq	%rax, %rdi	# tmp788,
	call	free	#
	.loc 1 2278 0
	movq	-128(%rbp), %rax	# already_moved, tmp789
	movq	%rax, %rdi	# tmp789,
	call	free	#
	.loc 1 2279 0
	addq	$312, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE19:
	.size	move_movables, .-move_movables
	.type	loop_movables_add, @function
loop_movables_add:
.LFB20:
	.loc 1 2286 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# movables, movables
	movq	%rsi, -16(%rbp)	# m, m
	.loc 1 2287 0
	movq	-8(%rbp), %rax	# movables, tmp61
	movq	(%rax), %rax	# movables_1(D)->head, D.24383
	testq	%rax, %rax	# D.24383
	jne	.L527	#,
	.loc 1 2288 0
	movq	-8(%rbp), %rax	# movables, tmp62
	movq	-16(%rbp), %rdx	# m, tmp63
	movq	%rdx, (%rax)	# tmp63, movables_1(D)->head
	jmp	.L528	#
.L527:
	.loc 1 2290 0
	movq	-8(%rbp), %rax	# movables, tmp64
	movq	8(%rax), %rax	# movables_1(D)->last, D.24383
	movq	-16(%rbp), %rdx	# m, tmp65
	movq	%rdx, 72(%rax)	# tmp65, _4->next
.L528:
	.loc 1 2291 0
	movq	-8(%rbp), %rax	# movables, tmp66
	movq	-16(%rbp), %rdx	# m, tmp67
	movq	%rdx, 8(%rax)	# tmp67, movables_1(D)->last
	.loc 1 2292 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE20:
	.size	loop_movables_add, .-loop_movables_add
	.type	loop_movables_free, @function
loop_movables_free:
.LFB21:
	.loc 1 2298 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# movables, movables
	.loc 1 2302 0
	movq	-24(%rbp), %rax	# movables, tmp59
	movq	(%rax), %rax	# movables_2(D)->head, tmp60
	movq	%rax, -16(%rbp)	# tmp60, m
	jmp	.L530	#
.L531:
	.loc 1 2304 0 discriminator 2
	movq	-16(%rbp), %rax	# m, tmp61
	movq	72(%rax), %rax	# m_1->next, tmp62
	movq	%rax, -8(%rbp)	# tmp62, m_next
	.loc 1 2305 0 discriminator 2
	movq	-16(%rbp), %rax	# m, tmp63
	movq	%rax, %rdi	# tmp63,
	call	free	#
	.loc 1 2302 0 discriminator 2
	movq	-8(%rbp), %rax	# m_next, tmp64
	movq	%rax, -16(%rbp)	# tmp64, m
.L530:
	.loc 1 2302 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, m
	jne	.L531	#,
	.loc 1 2307 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE21:
	.size	loop_movables_free, .-loop_movables_free
	.type	count_nonfixed_reads, @function
count_nonfixed_reads:
.LFB22:
	.loc 1 2380 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# loop, loop
	movq	%rsi, -64(%rbp)	# x, x
	.loc 1 2386 0
	cmpq	$0, -64(%rbp)	#, x
	jne	.L533	#,
	.loc 1 2387 0
	movl	$0, %eax	#, D.24384
	jmp	.L534	#
.L533:
	.loc 1 2389 0
	movq	-64(%rbp), %rax	# x, tmp85
	movzwl	(%rax), %eax	# x_8(D)->code, D.24385
	movzwl	%ax, %eax	# D.24385, tmp86
	movl	%eax, -28(%rbp)	# tmp86, code
	.loc 1 2390 0
	movl	-28(%rbp), %eax	# code, tmp88
	subl	$54, %eax	#, tmp87
	cmpl	$15, %eax	#, tmp87
	ja	.L546	#,
	movl	%eax, %eax	# tmp87, tmp89
	movq	.L537(,%rax,8), %rax	#, tmp90
	jmp	*%rax	# tmp90
	.section	.rodata
	.align 8
	.align 4
.L537:
	.quad	.L536
	.quad	.L536
	.quad	.L546
	.quad	.L546
	.quad	.L536
	.quad	.L536
	.quad	.L546
	.quad	.L536
	.quad	.L546
	.quad	.L546
	.quad	.L546
	.quad	.L546
	.quad	.L538
	.quad	.L536
	.quad	.L536
	.quad	.L536
	.text
.L536:
	.loc 1 2400 0
	movl	$0, %eax	#, D.24384
	jmp	.L534	#
.L538:
	.loc 1 2403 0
	movq	-64(%rbp), %rax	# x, tmp91
	movq	8(%rax), %rdx	# x_8(D)->fld[0].rtx, D.24386
	movq	-56(%rbp), %rax	# loop, tmp92
	movq	%rdx, %rsi	# D.24386,
	movq	%rax, %rdi	# tmp92,
	call	loop_invariant_p	#
	cmpl	$1, %eax	#, D.24384
	setne	%al	#, D.24387
	movzbl	%al, %ebx	# D.24387, D.24384
	.loc 1 2404 0
	movq	-64(%rbp), %rax	# x, tmp93
	movq	8(%rax), %rdx	# x_8(D)->fld[0].rtx, D.24386
	movq	-56(%rbp), %rax	# loop, tmp94
	movq	%rdx, %rsi	# D.24386,
	movq	%rax, %rdi	# tmp94,
	call	count_nonfixed_reads	#
	.loc 1 2403 0
	addl	%ebx, %eax	# D.24384, D.24384
	jmp	.L534	#
.L546:
	.loc 1 2407 0
	nop
	.loc 1 2410 0
	movl	$0, -36(%rbp)	#, value
	.loc 1 2411 0
	movl	-28(%rbp), %eax	# code, code.243
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp96
	movq	%rax, -24(%rbp)	# tmp96, fmt
	.loc 1 2412 0
	movl	-28(%rbp), %eax	# code, code.244
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.24388
	movzbl	%al, %eax	# D.24388, D.24384
	subl	$1, %eax	#, tmp98
	movl	%eax, -40(%rbp)	# tmp98, i
	jmp	.L539	#
.L544:
	.loc 1 2414 0
	movl	-40(%rbp), %eax	# i, tmp99
	movslq	%eax, %rdx	# tmp99, D.24389
	movq	-24(%rbp), %rax	# fmt, tmp100
	addq	%rdx, %rax	# D.24389, D.24390
	movzbl	(%rax), %eax	# *_29, D.24391
	cmpb	$101, %al	#, D.24391
	jne	.L540	#,
	.loc 1 2415 0
	movq	-64(%rbp), %rax	# x, tmp101
	movl	-40(%rbp), %edx	# i, tmp103
	movslq	%edx, %rdx	# tmp103, tmp102
	movq	8(%rax,%rdx,8), %rdx	# x_8(D)->fld[i_1].rtx, D.24386
	movq	-56(%rbp), %rax	# loop, tmp104
	movq	%rdx, %rsi	# D.24386,
	movq	%rax, %rdi	# tmp104,
	call	count_nonfixed_reads	#
	addl	%eax, -36(%rbp)	# D.24384, value
.L540:
	.loc 1 2416 0
	movl	-40(%rbp), %eax	# i, tmp105
	movslq	%eax, %rdx	# tmp105, D.24389
	movq	-24(%rbp), %rax	# fmt, tmp106
	addq	%rdx, %rax	# D.24389, D.24390
	movzbl	(%rax), %eax	# *_35, D.24391
	cmpb	$69, %al	#, D.24391
	jne	.L541	#,
.LBB28:
	.loc 1 2419 0
	movl	$0, -32(%rbp)	#, j
	jmp	.L542	#
.L543:
	.loc 1 2420 0 discriminator 2
	movq	-64(%rbp), %rax	# x, tmp107
	movl	-40(%rbp), %edx	# i, tmp109
	movslq	%edx, %rdx	# tmp109, tmp108
	movq	8(%rax,%rdx,8), %rax	# x_8(D)->fld[i_1].rtvec, D.24392
	movl	-32(%rbp), %edx	# j, tmp111
	movslq	%edx, %rdx	# tmp111, tmp110
	movq	8(%rax,%rdx,8), %rdx	# _40->elem, D.24386
	movq	-56(%rbp), %rax	# loop, tmp112
	movq	%rdx, %rsi	# D.24386,
	movq	%rax, %rdi	# tmp112,
	call	count_nonfixed_reads	#
	addl	%eax, -36(%rbp)	# D.24384, value
	.loc 1 2419 0 discriminator 2
	addl	$1, -32(%rbp)	#, j
.L542:
	.loc 1 2419 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# x, tmp113
	movl	-40(%rbp), %edx	# i, tmp115
	movslq	%edx, %rdx	# tmp115, tmp114
	movq	8(%rax,%rdx,8), %rax	# x_8(D)->fld[i_1].rtvec, D.24392
	movl	(%rax), %eax	# _38->num_elem, D.24384
	cmpl	-32(%rbp), %eax	# j, D.24384
	jg	.L543	#,
.L541:
.LBE28:
	.loc 1 2412 0 is_stmt 1
	subl	$1, -40(%rbp)	#, i
.L539:
	.loc 1 2412 0 is_stmt 0 discriminator 1
	cmpl	$0, -40(%rbp)	#, i
	jns	.L544	#,
	.loc 1 2423 0 is_stmt 1
	movl	-36(%rbp), %eax	# value, D.24384
.L534:
	.loc 1 2424 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE22:
	.size	count_nonfixed_reads, .-count_nonfixed_reads
	.type	prescan_loop, @function
prescan_loop:
.LFB23:
	.loc 1 2435 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$112, %rsp	#,
	movq	%rdi, -104(%rbp)	# loop, loop
	.loc 1 2436 0
	movl	$1, -92(%rbp)	#, level
	.loc 1 2438 0
	movq	-104(%rbp), %rax	# loop, tmp133
	movq	160(%rax), %rax	# loop_7(D)->aux, tmp134
	movq	%rax, -64(%rbp)	# tmp134, loop_info
	.loc 1 2439 0
	movq	-104(%rbp), %rax	# loop, tmp135
	movq	192(%rax), %rax	# loop_7(D)->start, tmp136
	movq	%rax, -56(%rbp)	# tmp136, start
	.loc 1 2440 0
	movq	-104(%rbp), %rax	# loop, tmp137
	movq	200(%rax), %rax	# loop_7(D)->end, tmp138
	movq	%rax, -48(%rbp)	# tmp138, end
	.loc 1 2445 0
	movq	-48(%rbp), %rax	# end, tmp139
	movq	%rax, %rdi	# tmp139,
	call	next_nonnote_insn	#
	movq	%rax, -40(%rbp)	# tmp140, exit_target
	.loc 1 2447 0
	movl	indirect_jump_in_function(%rip), %edx	# indirect_jump_in_function, indirect_jump_in_function.245
	movq	-64(%rbp), %rax	# loop_info, tmp141
	movl	%edx, 24(%rax)	# indirect_jump_in_function.245, loop_info_8->has_indirect_jump
	.loc 1 2448 0
	movq	-64(%rbp), %rax	# loop_info, tmp142
	movl	$0, 232(%rax)	#, loop_info_8->pre_header_has_call
	.loc 1 2449 0
	movq	-64(%rbp), %rax	# loop_info, tmp143
	movl	$0, (%rax)	#, loop_info_8->has_call
	.loc 1 2450 0
	movq	-64(%rbp), %rax	# loop_info, tmp144
	movl	$0, 8(%rax)	#, loop_info_8->has_nonconst_call
	.loc 1 2451 0
	movq	-64(%rbp), %rax	# loop_info, tmp145
	movl	$0, 12(%rax)	#, loop_info_8->has_volatile
	.loc 1 2452 0
	movq	-64(%rbp), %rax	# loop_info, tmp146
	movl	$0, 16(%rax)	#, loop_info_8->has_tablejump
	.loc 1 2453 0
	movq	-64(%rbp), %rax	# loop_info, tmp147
	movl	$0, 20(%rax)	#, loop_info_8->has_multiple_exit_targets
	.loc 1 2454 0
	movq	-104(%rbp), %rax	# loop, tmp148
	movl	$1, 124(%rax)	#, loop_7(D)->level
	.loc 1 2456 0
	movq	-64(%rbp), %rax	# loop_info, tmp149
	movl	$0, 144(%rax)	#, loop_info_8->unknown_address_altered
	.loc 1 2457 0
	movq	-64(%rbp), %rax	# loop_info, tmp150
	movl	$0, 148(%rax)	#, loop_info_8->unknown_constant_address_altered
	.loc 1 2458 0
	movq	-64(%rbp), %rax	# loop_info, tmp151
	movq	$0, 120(%rax)	#, loop_info_8->store_mems
	.loc 1 2459 0
	movq	-64(%rbp), %rax	# loop_info, tmp152
	movq	$0, 160(%rax)	#, loop_info_8->first_loop_store_insn
	.loc 1 2460 0
	movq	-64(%rbp), %rax	# loop_info, tmp153
	movl	$0, 136(%rax)	#, loop_info_8->mems_idx
	.loc 1 2461 0
	movq	-64(%rbp), %rax	# loop_info, tmp154
	movl	$0, 152(%rax)	#, loop_info_8->num_mem_sets
	.loc 1 2464 0
	movq	-56(%rbp), %rax	# start, tmp155
	movq	%rax, -88(%rbp)	# tmp155, insn
	jmp	.L548	#
.L551:
	.loc 1 2467 0
	movq	-88(%rbp), %rax	# insn, insn.246
	movzwl	(%rax), %eax	# insn.246_16->code, D.24393
	cmpw	$34, %ax	#, D.24393
	jne	.L549	#,
	.loc 1 2469 0
	movq	-64(%rbp), %rax	# loop_info, tmp156
	movl	$1, 232(%rax)	#, loop_info_8->pre_header_has_call
	.loc 1 2470 0
	jmp	.L550	#
.L549:
	.loc 1 2465 0
	movq	-88(%rbp), %rax	# insn, insn.247
	movq	16(%rax), %rax	# insn.247_18->fld[1].rtx, insn.248
	movq	%rax, -88(%rbp)	# insn.248, insn
.L548:
	.loc 1 2464 0 discriminator 1
	movq	-88(%rbp), %rax	# insn, insn.249
	testq	%rax, %rax	# insn.249
	je	.L550	#,
	.loc 1 2464 0 is_stmt 0 discriminator 2
	movq	-88(%rbp), %rax	# insn, insn.250
	movzwl	(%rax), %eax	# insn.250_14->code, D.24393
	cmpw	$36, %ax	#, D.24393
	jne	.L551	#,
.L550:
	.loc 1 2474 0 is_stmt 1
	movq	-56(%rbp), %rax	# start, tmp157
	movq	24(%rax), %rax	# start_9->fld[2].rtx, insn.251
	movq	%rax, -88(%rbp)	# insn.251, insn
	jmp	.L552	#
.L576:
	.loc 1 2477 0
	movq	-88(%rbp), %rax	# insn, insn.252
	movzwl	(%rax), %eax	# insn.252_23->code, D.24393
	movzwl	%ax, %eax	# D.24393, D.24395
	cmpl	$33, %eax	#, D.24395
	je	.L554	#,
	cmpl	$33, %eax	#, D.24395
	ja	.L555	#,
	cmpl	$32, %eax	#, D.24395
	je	.L556	#,
	.loc 1 2574 0
	jmp	.L561	#
.L555:
	.loc 1 2477 0
	cmpl	$34, %eax	#, D.24395
	je	.L557	#,
	cmpl	$37, %eax	#, D.24395
	je	.L558	#,
	.loc 1 2574 0
	jmp	.L561	#
.L558:
	.loc 1 2480 0
	movq	-88(%rbp), %rax	# insn, insn.253
	movl	40(%rax), %eax	# insn.253_26->fld[4].rtint, D.24396
	cmpl	$-96, %eax	#, D.24396
	jne	.L559	#,
	.loc 1 2482 0
	addl	$1, -92(%rbp)	#, level
	.loc 1 2484 0
	movq	-104(%rbp), %rax	# loop, tmp158
	movl	124(%rax), %eax	# loop_7(D)->level, D.24396
	leal	1(%rax), %edx	#, D.24396
	movq	-104(%rbp), %rax	# loop, tmp159
	movl	%edx, 124(%rax)	# D.24396, loop_7(D)->level
	jmp	.L560	#
.L559:
	.loc 1 2486 0
	movq	-88(%rbp), %rax	# insn, insn.254
	movl	40(%rax), %eax	# insn.254_31->fld[4].rtint, D.24396
	cmpl	$-95, %eax	#, D.24396
	jne	.L560	#,
	.loc 1 2487 0
	subl	$1, -92(%rbp)	#, level
	.loc 1 2488 0
	jmp	.L561	#
.L560:
	jmp	.L561	#
.L557:
	.loc 1 2491 0
	movq	-88(%rbp), %rax	# insn, insn.255
	movzbl	3(%rax), %eax	# *insn.255_34, D.24397
	andl	$4, %eax	#, D.24397
	testb	%al, %al	# D.24397
	jne	.L562	#,
	.loc 1 2493 0
	movq	-64(%rbp), %rax	# loop_info, tmp160
	movl	$1, 144(%rax)	#, loop_info_8->unknown_address_altered
	.loc 1 2494 0
	movq	-64(%rbp), %rax	# loop_info, tmp161
	movl	$1, 8(%rax)	#, loop_info_8->has_nonconst_call
	jmp	.L563	#
.L562:
	.loc 1 2496 0
	movq	-88(%rbp), %rax	# insn, insn.256
	movq	%rax, %rdi	# insn.256,
	call	pure_call_p	#
	testl	%eax, %eax	# D.24396
	je	.L563	#,
	.loc 1 2497 0
	movq	-64(%rbp), %rax	# loop_info, tmp162
	movl	$1, 8(%rax)	#, loop_info_8->has_nonconst_call
.L563:
	.loc 1 2498 0
	movq	-64(%rbp), %rax	# loop_info, tmp163
	movl	$1, (%rax)	#, loop_info_8->has_call
	.loc 1 2499 0
	movq	-88(%rbp), %rax	# insn, insn.257
	movq	%rax, %rdi	# insn.257,
	call	can_throw_internal	#
	testb	%al, %al	# D.24398
	je	.L564	#,
	.loc 1 2500 0
	movq	-64(%rbp), %rax	# loop_info, tmp164
	movl	$1, 20(%rax)	#, loop_info_8->has_multiple_exit_targets
	.loc 1 2501 0
	jmp	.L561	#
.L564:
	jmp	.L561	#
.L554:
	.loc 1 2504 0
	movq	-64(%rbp), %rax	# loop_info, tmp165
	movl	20(%rax), %eax	# loop_info_8->has_multiple_exit_targets, D.24396
	testl	%eax, %eax	# D.24396
	jne	.L556	#,
.LBB29:
	.loc 1 2506 0
	movq	-88(%rbp), %rax	# insn, insn.258
	movq	%rax, %rdi	# insn.258,
	call	pc_set	#
	movq	%rax, -32(%rbp)	# tmp166, set
	.loc 1 2508 0
	cmpq	$0, -32(%rbp)	#, set
	je	.L565	#,
.LBB30:
	.loc 1 2510 0
	movq	-32(%rbp), %rax	# set, tmp167
	movq	16(%rax), %rax	# set_43->fld[1].rtx, tmp168
	movq	%rax, -24(%rbp)	# tmp168, src
	.loc 1 2513 0
	movq	-24(%rbp), %rax	# src, tmp169
	movzwl	(%rax), %eax	# src_44->code, D.24393
	cmpw	$72, %ax	#, D.24393
	jne	.L566	#,
	.loc 1 2515 0
	movq	-24(%rbp), %rax	# src, tmp170
	movq	16(%rax), %rax	# src_44->fld[1].rtx, tmp171
	movq	%rax, -80(%rbp)	# tmp171, label1
	.loc 1 2516 0
	movq	-24(%rbp), %rax	# src, tmp172
	movq	24(%rax), %rax	# src_44->fld[2].rtx, tmp173
	movq	%rax, -72(%rbp)	# tmp173, label2
	jmp	.L567	#
.L566:
	.loc 1 2520 0
	movq	-24(%rbp), %rax	# src, tmp174
	movq	%rax, -80(%rbp)	# tmp174, label1
	.loc 1 2521 0
	movq	$0, -72(%rbp)	#, label2
.L567:
	.loc 1 2526 0
	cmpq	$0, -80(%rbp)	#, label1
	je	.L568	#,
	.loc 1 2526 0 is_stmt 0 discriminator 1
	movq	global_rtl(%rip), %rax	# global_rtl, D.24394
	cmpq	-80(%rbp), %rax	# label1, D.24394
	je	.L568	#,
	.loc 1 2528 0 is_stmt 1
	movq	-80(%rbp), %rax	# label1, tmp175
	movzwl	(%rax), %eax	# label1_4->code, D.24393
	cmpw	$67, %ax	#, D.24393
	je	.L569	#,
	.loc 1 2531 0
	movq	-64(%rbp), %rax	# loop_info, tmp176
	movl	$1, 20(%rax)	#, loop_info_8->has_multiple_exit_targets
	.loc 1 2532 0
	jmp	.L570	#
.L569:
	.loc 1 2534 0
	movq	-80(%rbp), %rax	# label1, tmp177
	movq	8(%rax), %rax	# label1_4->fld[0].rtx, D.24394
	cmpq	-40(%rbp), %rax	# exit_target, D.24394
	je	.L568	#,
	.loc 1 2535 0
	movq	-80(%rbp), %rax	# label1, tmp178
	movzbl	3(%rax), %eax	# *label1_4, D.24397
	andl	$16, %eax	#, D.24397
	testb	%al, %al	# D.24397
	je	.L568	#,
	.loc 1 2538 0
	movq	-64(%rbp), %rax	# loop_info, tmp179
	movl	$1, 20(%rax)	#, loop_info_8->has_multiple_exit_targets
	.loc 1 2539 0
	jmp	.L570	#
.L568:
	.loc 1 2543 0
	movq	-72(%rbp), %rax	# label2, tmp180
	movq	%rax, -80(%rbp)	# tmp180, label1
	.loc 1 2544 0
	movq	$0, -72(%rbp)	#, label2
	.loc 1 2546 0
	cmpq	$0, -80(%rbp)	#, label1
	jne	.L567	#,
.L570:
.LBE30:
	jmp	.L556	#
.L565:
	.loc 1 2551 0
	movq	-64(%rbp), %rax	# loop_info, tmp181
	movl	$1, 20(%rax)	#, loop_info_8->has_multiple_exit_targets
.L556:
.LBE29:
	.loc 1 2557 0
	movq	-88(%rbp), %rax	# insn, insn.259
	movq	32(%rax), %rax	# insn.259_57->fld[3].rtx, D.24394
	movq	%rax, %rdi	# D.24394,
	call	volatile_refs_p	#
	testl	%eax, %eax	# D.24396
	je	.L571	#,
	.loc 1 2558 0
	movq	-64(%rbp), %rax	# loop_info, tmp182
	movl	$1, 12(%rax)	#, loop_info_8->has_volatile
.L571:
	.loc 1 2560 0
	movq	-88(%rbp), %rax	# insn, insn.260
	movzwl	(%rax), %eax	# insn.260_60->code, D.24393
	cmpw	$33, %ax	#, D.24393
	jne	.L572	#,
	.loc 1 2561 0
	movq	-88(%rbp), %rax	# insn, insn.261
	movq	32(%rax), %rax	# insn.261_62->fld[3].rtx, D.24394
	movzwl	(%rax), %eax	# _63->code, D.24393
	cmpw	$45, %ax	#, D.24393
	je	.L573	#,
	.loc 1 2562 0
	movq	-88(%rbp), %rax	# insn, insn.262
	movq	32(%rax), %rax	# insn.262_65->fld[3].rtx, D.24394
	movzwl	(%rax), %eax	# _66->code, D.24393
	cmpw	$44, %ax	#, D.24393
	jne	.L572	#,
.L573:
	.loc 1 2563 0
	movq	-64(%rbp), %rax	# loop_info, tmp183
	movl	$1, 16(%rax)	#, loop_info_8->has_tablejump
.L572:
	.loc 1 2565 0
	movq	-88(%rbp), %rax	# insn, insn.263
	movq	32(%rax), %rax	# insn.263_68->fld[3].rtx, D.24394
	movq	-64(%rbp), %rdx	# loop_info, tmp184
	movl	$note_addr_stored, %esi	#,
	movq	%rax, %rdi	# D.24394,
	call	note_stores	#
	.loc 1 2566 0
	movq	-64(%rbp), %rax	# loop_info, tmp185
	movq	160(%rax), %rax	# loop_info_8->first_loop_store_insn, D.24394
	testq	%rax, %rax	# D.24394
	jne	.L574	#,
	.loc 1 2566 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# loop_info, tmp186
	movq	120(%rax), %rax	# loop_info_8->store_mems, D.24394
	testq	%rax, %rax	# D.24394
	je	.L574	#,
	.loc 1 2567 0 is_stmt 1
	movq	-88(%rbp), %rdx	# insn, insn.264
	movq	-64(%rbp), %rax	# loop_info, tmp187
	movq	%rdx, 160(%rax)	# insn.264, loop_info_8->first_loop_store_insn
.L574:
	.loc 1 2569 0
	movl	flag_non_call_exceptions(%rip), %eax	# flag_non_call_exceptions, flag_non_call_exceptions.265
	testl	%eax, %eax	# flag_non_call_exceptions.265
	je	.L575	#,
	.loc 1 2569 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# insn, insn.266
	movq	%rax, %rdi	# insn.266,
	call	can_throw_internal	#
	testb	%al, %al	# D.24398
	je	.L575	#,
	.loc 1 2570 0 is_stmt 1
	movq	-64(%rbp), %rax	# loop_info, tmp188
	movl	$1, 20(%rax)	#, loop_info_8->has_multiple_exit_targets
	.loc 1 2571 0
	jmp	.L582	#
.L575:
.L582:
	nop
.L561:
	.loc 1 2475 0
	movq	-88(%rbp), %rax	# insn, insn.267
	movq	24(%rax), %rax	# insn.267_76->fld[2].rtx, insn.268
	movq	%rax, -88(%rbp)	# insn.268, insn
.L552:
	.loc 1 2474 0 discriminator 1
	movq	-48(%rbp), %rax	# end, tmp189
	movq	24(%rax), %rdx	# end_10->fld[2].rtx, D.24394
	movq	-88(%rbp), %rax	# insn, insn.269
	cmpq	%rax, %rdx	# insn.269, D.24394
	jne	.L576	#,
	.loc 1 2581 0
	movq	-64(%rbp), %rax	# loop_info, tmp190
	movl	8(%rax), %eax	# loop_info_8->has_nonconst_call, D.24396
	.loc 1 2579 0
	testl	%eax, %eax	# D.24396
	jne	.L577	#,
	.loc 1 2586 0
	movq	cfun(%rip), %rax	# cfun, cfun.270
	movzbl	424(%rax), %eax	# *cfun.270_79, D.24397
	andl	$64, %eax	#, D.24397
	testb	%al, %al	# D.24397
	jne	.L577	#,
	.loc 1 2589 0
	movq	-64(%rbp), %rax	# loop_info, tmp191
	movl	20(%rax), %eax	# loop_info_8->has_multiple_exit_targets, D.24396
	testl	%eax, %eax	# D.24396
	jne	.L577	#,
	.loc 1 2590 0
	movq	-56(%rbp), %rax	# start, tmp192
	movq	24(%rax), %rax	# start_9->fld[2].rtx, insn.271
	movq	%rax, -88(%rbp)	# insn.271, insn
	jmp	.L578	#
.L579:
	.loc 1 2592 0
	movq	-64(%rbp), %rdx	# loop_info, tmp193
	leaq	-88(%rbp), %rax	#, tmp194
	movl	$insert_loop_mem, %esi	#,
	movq	%rax, %rdi	# tmp194,
	call	for_each_rtx	#
	.loc 1 2591 0
	movq	-88(%rbp), %rax	# insn, insn.272
	movq	24(%rax), %rax	# insn.272_86->fld[2].rtx, insn.273
	movq	%rax, -88(%rbp)	# insn.273, insn
.L578:
	.loc 1 2590 0 discriminator 1
	movq	-48(%rbp), %rax	# end, tmp195
	movq	24(%rax), %rdx	# end_10->fld[2].rtx, D.24394
	movq	-88(%rbp), %rax	# insn, insn.274
	cmpq	%rax, %rdx	# insn.274, D.24394
	jne	.L579	#,
.L577:
	.loc 1 2597 0
	movq	-64(%rbp), %rax	# loop_info, tmp196
	movl	144(%rax), %eax	# loop_info_8->unknown_address_altered, D.24396
	testl	%eax, %eax	# D.24396
	je	.L580	#,
.LBB31:
	.loc 1 2599 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24394
	movq	%rax, %rsi	# D.24394,
	movl	$51, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -16(%rbp)	# tmp197, mem
	.loc 1 2602 0
	movq	-64(%rbp), %rax	# loop_info, tmp198
	movq	120(%rax), %rdx	# loop_info_8->store_mems, D.24394
	movq	-16(%rbp), %rax	# mem, tmp199
	movq	%rdx, %rcx	# D.24394,
	movq	%rax, %rdx	# tmp199,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-64(%rbp), %rdx	# loop_info, tmp200
	movq	%rax, 120(%rdx)	# D.24394, loop_info_8->store_mems
.L580:
.LBE31:
	.loc 1 2604 0
	movq	-64(%rbp), %rax	# loop_info, tmp201
	movl	148(%rax), %eax	# loop_info_8->unknown_constant_address_altered, D.24396
	testl	%eax, %eax	# D.24396
	je	.L547	#,
.LBB32:
	.loc 1 2606 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24394
	movq	%rax, %rsi	# D.24394,
	movl	$51, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -8(%rbp)	# tmp202, mem
	.loc 1 2608 0
	movq	-8(%rbp), %rax	# mem, tmp203
	movzbl	3(%rax), %edx	# mem_95->unchanging, tmp206
	orl	$4, %edx	#, tmp207
	movb	%dl, 3(%rax)	# tmp207, mem_95->unchanging
	.loc 1 2610 0
	movq	-64(%rbp), %rax	# loop_info, tmp208
	movq	120(%rax), %rdx	# loop_info_8->store_mems, D.24394
	movq	-8(%rbp), %rax	# mem, tmp209
	movq	%rdx, %rcx	# D.24394,
	movq	%rax, %rdx	# tmp209,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-64(%rbp), %rdx	# loop_info, tmp210
	movq	%rax, 120(%rdx)	# D.24394, loop_info_8->store_mems
.L547:
.LBE32:
	.loc 1 2612 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE23:
	.size	prescan_loop, .-prescan_loop
	.type	invalidate_loops_containing_label, @function
invalidate_loops_containing_label:
.LFB24:
	.loc 1 2619 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# label, label
	.loc 1 2621 0
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.275
	movq	-24(%rbp), %rax	# label, tmp64
	movl	8(%rax), %eax	# label_3(D)->fld[0].rtint, D.24400
	cltq
	salq	$3, %rax	#, D.24401
	addq	%rdx, %rax	# uid_loop.275, D.24402
	movq	(%rax), %rax	# *_7, tmp65
	movq	%rax, -8(%rbp)	# tmp65, loop
	jmp	.L584	#
.L585:
	.loc 1 2622 0 discriminator 2
	movq	-8(%rbp), %rax	# loop, tmp66
	movl	$1, 156(%rax)	#, loop_1->invalid
	.loc 1 2621 0 discriminator 2
	movq	-8(%rbp), %rax	# loop, tmp67
	movq	128(%rax), %rax	# loop_1->outer, tmp68
	movq	%rax, -8(%rbp)	# tmp68, loop
.L584:
	.loc 1 2621 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, loop
	jne	.L585	#,
	.loc 1 2623 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE24:
	.size	invalidate_loops_containing_label, .-invalidate_loops_containing_label
	.section	.rodata
	.align 8
.LC18:
	.string	"\nLoop at %d ignored due to setjmp.\n"
	.text
	.type	find_and_verify_loops, @function
find_and_verify_loops:
.LFB25:
	.loc 1 2633 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$216, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -216(%rbp)	# f, f
	movq	%rsi, -224(%rbp)	# loops, loops
	.loc 1 2641 0
	movq	-224(%rbp), %rax	# loops, tmp206
	movl	(%rax), %eax	# loops_25(D)->num, tmp207
	movl	%eax, -196(%rbp)	# tmp207, num_loops
	.loc 1 2643 0
	movq	-216(%rbp), %rax	# f, tmp208
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp208,
	call	compute_luids	#
	.loc 1 2648 0
	movq	uid_loop(%rip), %rax	# uid_loop, uid_loop.276
	movq	$0, (%rax)	#, *uid_loop.276_28
	.loc 1 2653 0
	movl	$0, -196(%rbp)	#, num_loops
	.loc 1 2654 0
	movq	$0, -160(%rbp)	#, current_loop
	.loc 1 2655 0
	movq	-216(%rbp), %rax	# f, tmp209
	movq	%rax, -176(%rbp)	# tmp209, insn
	jmp	.L587	#
.L600:
	.loc 1 2657 0
	movq	-176(%rbp), %rax	# insn, tmp210
	movzwl	(%rax), %eax	# insn_1->code, D.24403
	cmpw	$37, %ax	#, D.24403
	jne	.L588	#,
	.loc 1 2658 0
	movq	-176(%rbp), %rax	# insn, tmp211
	movl	40(%rax), %eax	# insn_1->fld[4].rtint, D.24404
	cmpl	$-95, %eax	#, D.24404
	je	.L590	#,
	cmpl	$-95, %eax	#, D.24404
	jg	.L591	#,
	cmpl	$-96, %eax	#, D.24404
	je	.L592	#,
	.loc 1 2686 0
	jmp	.L588	#
.L591:
	.loc 1 2658 0
	cmpl	$-94, %eax	#, D.24404
	je	.L593	#,
	cmpl	$-93, %eax	#, D.24404
	je	.L594	#,
	.loc 1 2686 0
	jmp	.L588	#
.L592:
	.loc 1 2661 0
	movq	-224(%rbp), %rax	# loops, tmp212
	movq	8(%rax), %rdx	# loops_25(D)->array, D.24405
	movl	-196(%rbp), %eax	# num_loops, tmp213
	cltq
	salq	$3, %rax	#, tmp215
	movq	%rax, %rcx	# tmp214, tmp216
	salq	$5, %rcx	#, tmp216
	subq	%rax, %rcx	# tmp214, D.24406
	movq	%rcx, %rax	# D.24406, D.24406
	addq	%rdx, %rax	# D.24405, tmp217
	movq	%rax, -96(%rbp)	# tmp217, next_loop
	.loc 1 2662 0
	movq	-96(%rbp), %rax	# next_loop, tmp218
	movl	-196(%rbp), %edx	# num_loops, tmp219
	movl	%edx, (%rax)	# tmp219, next_loop_37->num
	.loc 1 2663 0
	addl	$1, -196(%rbp)	#, num_loops
	.loc 1 2664 0
	movq	-96(%rbp), %rax	# next_loop, tmp220
	movq	-176(%rbp), %rdx	# insn, tmp221
	movq	%rdx, 192(%rax)	# tmp221, next_loop_37->start
	.loc 1 2665 0
	movq	-96(%rbp), %rax	# next_loop, tmp222
	movq	-160(%rbp), %rdx	# current_loop, tmp223
	movq	%rdx, 128(%rax)	# tmp223, next_loop_37->outer
	.loc 1 2666 0
	movq	-96(%rbp), %rax	# next_loop, tmp224
	movq	%rax, -160(%rbp)	# tmp224, current_loop
	.loc 1 2667 0
	jmp	.L588	#
.L593:
	.loc 1 2670 0
	movq	-160(%rbp), %rax	# current_loop, tmp225
	movq	-176(%rbp), %rdx	# insn, tmp226
	movq	%rdx, 176(%rax)	# tmp226, current_loop_9->cont
	.loc 1 2671 0
	jmp	.L588	#
.L594:
	.loc 1 2674 0
	movq	-160(%rbp), %rax	# current_loop, tmp227
	movq	-176(%rbp), %rdx	# insn, tmp228
	movq	%rdx, 168(%rax)	# tmp228, current_loop_9->vtop
	.loc 1 2675 0
	jmp	.L588	#
.L590:
	.loc 1 2678 0
	cmpq	$0, -160(%rbp)	#, current_loop
	jne	.L595	#,
	.loc 1 2679 0
	movl	$__FUNCTION__.13028, %edx	#,
	movl	$2679, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L595:
	.loc 1 2681 0
	movq	-160(%rbp), %rax	# current_loop, tmp229
	movq	-176(%rbp), %rdx	# insn, tmp230
	movq	%rdx, 200(%rax)	# tmp230, current_loop_9->end
	.loc 1 2682 0
	movq	-160(%rbp), %rax	# current_loop, tmp231
	movq	128(%rax), %rax	# current_loop_9->outer, tmp232
	movq	%rax, -160(%rbp)	# tmp232, current_loop
	.loc 1 2683 0
	nop
.L588:
	.loc 1 2689 0
	movq	-176(%rbp), %rax	# insn, tmp233
	movzwl	(%rax), %eax	# insn_1->code, D.24403
	cmpw	$34, %ax	#, D.24403
	jne	.L596	#,
	.loc 1 2690 0
	movq	-176(%rbp), %rax	# insn, tmp234
	movl	$0, %edx	#,
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp234,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24407
	je	.L596	#,
	.loc 1 2694 0
	movq	-160(%rbp), %rax	# current_loop, tmp235
	movq	%rax, -152(%rbp)	# tmp235, loop
	jmp	.L597	#
.L599:
	.loc 1 2696 0
	movq	-152(%rbp), %rax	# loop, tmp236
	movl	$1, 156(%rax)	#, loop_10->invalid
	.loc 1 2697 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.277
	testq	%rax, %rax	# loop_dump_stream.277
	je	.L598	#,
	.loc 1 2700 0
	movq	-152(%rbp), %rax	# loop, tmp237
	movq	192(%rax), %rax	# loop_10->start, D.24407
	.loc 1 2698 0
	movl	8(%rax), %edx	# _45->fld[0].rtint, D.24404
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.278
	movl	$.LC18, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.278,
	movl	$0, %eax	#,
	call	fprintf	#
.L598:
	.loc 1 2694 0
	movq	-152(%rbp), %rax	# loop, tmp238
	movq	128(%rax), %rax	# loop_10->outer, tmp239
	movq	%rax, -152(%rbp)	# tmp239, loop
.L597:
	.loc 1 2694 0 is_stmt 0 discriminator 1
	cmpq	$0, -152(%rbp)	#, loop
	jne	.L599	#,
.L596:
	.loc 1 2706 0 is_stmt 1
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.279
	movq	-176(%rbp), %rax	# insn, tmp240
	movl	8(%rax), %eax	# insn_1->fld[0].rtint, D.24404
	cltq
	salq	$3, %rax	#, D.24406
	addq	%rax, %rdx	# D.24406, D.24408
	movq	-160(%rbp), %rax	# current_loop, tmp241
	movq	%rax, (%rdx)	# tmp241, *_53
	.loc 1 2655 0
	movq	-176(%rbp), %rax	# insn, tmp242
	movq	24(%rax), %rax	# insn_1->fld[2].rtx, tmp243
	movq	%rax, -176(%rbp)	# tmp243, insn
.L587:
	.loc 1 2655 0 is_stmt 0 discriminator 1
	cmpq	$0, -176(%rbp)	#, insn
	jne	.L600	#,
	.loc 1 2711 0 is_stmt 1
	movq	cfun(%rip), %rax	# cfun, cfun.280
	movq	16(%rax), %rax	# cfun.280_55->expr, D.24409
	movq	32(%rax), %rax	# _56->x_forced_labels, tmp244
	movq	%rax, -168(%rbp)	# tmp244, label
	jmp	.L601	#
.L602:
	.loc 1 2712 0 discriminator 2
	movq	-168(%rbp), %rax	# label, tmp245
	movq	8(%rax), %rax	# label_5->fld[0].rtx, D.24407
	movq	%rax, %rdi	# D.24407,
	call	invalidate_loops_containing_label	#
	.loc 1 2711 0 discriminator 2
	movq	-168(%rbp), %rax	# label, tmp246
	movq	16(%rax), %rax	# label_5->fld[1].rtx, tmp247
	movq	%rax, -168(%rbp)	# tmp247, label
.L601:
	.loc 1 2711 0 is_stmt 0 discriminator 1
	cmpq	$0, -168(%rbp)	#, label
	jne	.L602	#,
	.loc 1 2716 0 is_stmt 1
	movl	$invalidate_loops_containing_label, %edi	#,
	call	for_each_eh_label	#
	.loc 1 2731 0
	movq	-216(%rbp), %rax	# f, tmp248
	movq	%rax, -176(%rbp)	# tmp248, insn
	jmp	.L603	#
.L651:
	.loc 1 2732 0
	movq	-176(%rbp), %rax	# insn, tmp249
	movzwl	(%rax), %eax	# insn_4->code, D.24403
	movzwl	%ax, %eax	# D.24403, D.24404
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24410
	cmpb	$105, %al	#, D.24410
	jne	.L604	#,
.LBB33:
	.loc 1 2734 0
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.281
	movq	-176(%rbp), %rax	# insn, tmp251
	movl	8(%rax), %eax	# insn_4->fld[0].rtint, D.24404
	cltq
	salq	$3, %rax	#, D.24406
	addq	%rdx, %rax	# uid_loop.281, D.24408
	movq	(%rax), %rax	# *_68, tmp252
	movq	%rax, -88(%rbp)	# tmp252, this_loop
	.loc 1 2736 0
	movq	-176(%rbp), %rax	# insn, tmp253
	movzwl	(%rax), %eax	# insn_4->code, D.24403
	cmpw	$32, %ax	#, D.24403
	je	.L605	#,
	.loc 1 2736 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# insn, tmp254
	movzwl	(%rax), %eax	# insn_4->code, D.24403
	cmpw	$34, %ax	#, D.24403
	jne	.L606	#,
.L605:
.LBB34:
	.loc 1 2738 0 is_stmt 1
	movq	-176(%rbp), %rax	# insn, tmp255
	movl	$0, %edx	#,
	movl	$13, %esi	#,
	movq	%rax, %rdi	# tmp255,
	call	find_reg_note	#
	movq	%rax, -80(%rbp)	# tmp256, note
	.loc 1 2739 0
	cmpq	$0, -80(%rbp)	#, note
	je	.L606	#,
	.loc 1 2740 0
	movq	-80(%rbp), %rax	# note, tmp257
	movq	8(%rax), %rax	# note_72->fld[0].rtx, D.24407
	movq	%rax, %rdi	# D.24407,
	call	invalidate_loops_containing_label	#
.L606:
.LBE34:
	.loc 1 2743 0
	movq	-176(%rbp), %rax	# insn, tmp258
	movzwl	(%rax), %eax	# insn_4->code, D.24403
	cmpw	$33, %ax	#, D.24403
	je	.L607	#,
	.loc 1 2744 0
	jmp	.L604	#
.L607:
	.loc 1 2746 0
	movq	-176(%rbp), %rax	# insn, tmp259
	movq	32(%rax), %rax	# insn_4->fld[3].rtx, D.24407
	movq	-88(%rbp), %rdx	# this_loop, tmp260
	movq	%rdx, %rsi	# tmp260,
	movq	%rax, %rdi	# D.24407,
	call	mark_loop_jump	#
	.loc 1 2749 0
	cmpq	$0, -88(%rbp)	#, this_loop
	je	.L604	#,
	.loc 1 2750 0
	movq	-176(%rbp), %rax	# insn, tmp261
	movq	32(%rax), %rax	# insn_4->fld[3].rtx, D.24407
	movzwl	(%rax), %eax	# _76->code, D.24403
	cmpw	$51, %ax	#, D.24403
	je	.L608	#,
	.loc 1 2751 0
	movq	-176(%rbp), %rax	# insn, tmp262
	movq	%rax, %rdi	# tmp262,
	call	any_uncondjump_p	#
	testl	%eax, %eax	# D.24404
	je	.L604	#,
	.loc 1 2752 0
	movq	-176(%rbp), %rax	# insn, tmp263
	movq	%rax, %rdi	# tmp263,
	call	onlyjump_p	#
	testl	%eax, %eax	# D.24404
	je	.L604	#,
	.loc 1 2753 0
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.282
	movq	-176(%rbp), %rax	# insn, tmp264
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, D.24407
	movl	8(%rax), %eax	# _81->fld[0].rtint, D.24404
	cltq
	salq	$3, %rax	#, D.24406
	addq	%rdx, %rax	# uid_loop.282, D.24408
	movq	(%rax), %rax	# *_85, D.24405
	cmpq	-88(%rbp), %rax	# this_loop, D.24405
	je	.L604	#,
.L608:
	.loc 1 2755 0
	call	get_max_uid	#
	movl	max_uid_for_loop(%rip), %edx	# max_uid_for_loop, max_uid_for_loop.283
	cmpl	%edx, %eax	# max_uid_for_loop.283, D.24404
	jge	.L604	#,
.LBB35:
	.loc 1 2758 0
	movq	-176(%rbp), %rax	# insn, tmp265
	movq	%rax, %rdi	# tmp265,
	call	next_real_insn	#
	movq	%rax, -72(%rbp)	# tmp266, our_next
	.loc 1 2759 0
	movq	-176(%rbp), %rax	# insn, tmp267
	movq	24(%rax), %rax	# insn_4->fld[2].rtx, last_insn_to_move.284
	movq	%rax, -192(%rbp)	# last_insn_to_move.284, last_insn_to_move
	.loc 1 2761 0
	movq	$0, -136(%rbp)	#, outer_loop
	.loc 1 2765 0
	movq	-176(%rbp), %rax	# insn, tmp268
	movq	16(%rax), %rax	# insn_4->fld[1].rtx, tmp269
	movq	%rax, -144(%rbp)	# tmp269, p
	jmp	.L609	#
.L612:
	.loc 1 2770 0
	movq	-144(%rbp), %rax	# p, tmp270
	movq	16(%rax), %rax	# p_12->fld[1].rtx, tmp271
	movq	%rax, -144(%rbp)	# tmp271, p
.L609:
	.loc 1 2766 0 discriminator 1
	movq	-144(%rbp), %rax	# p, tmp272
	movzwl	(%rax), %eax	# p_12->code, D.24403
	.loc 1 2765 0 discriminator 1
	cmpw	$36, %ax	#, D.24403
	je	.L610	#,
	.loc 1 2767 0
	movq	-144(%rbp), %rax	# p, tmp273
	movzwl	(%rax), %eax	# p_12->code, D.24403
	cmpw	$37, %ax	#, D.24403
	jne	.L611	#,
	.loc 1 2768 0 discriminator 1
	movq	-144(%rbp), %rax	# p, tmp274
	movl	40(%rax), %eax	# p_12->fld[4].rtint, D.24404
	.loc 1 2767 0 discriminator 1
	cmpl	$-96, %eax	#, D.24404
	je	.L610	#,
.L611:
	.loc 1 2769 0
	movq	-144(%rbp), %rax	# p, tmp275
	movzwl	(%rax), %eax	# p_12->code, D.24403
	cmpw	$33, %ax	#, D.24403
	jne	.L612	#,
.L610:
	.loc 1 2776 0
	movq	-176(%rbp), %rax	# insn, tmp276
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, D.24407
	testq	%rax, %rax	# D.24407
	je	.L613	#,
	.loc 1 2778 0
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.285
	movq	-176(%rbp), %rax	# insn, tmp277
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, D.24407
	movl	8(%rax), %eax	# _100->fld[0].rtint, D.24404
	cltq
	salq	$3, %rax	#, D.24406
	addq	%rdx, %rax	# uid_loop.285, D.24408
	movq	(%rax), %rax	# *_104, tmp278
	movq	%rax, -64(%rbp)	# tmp278, dest_loop
	.loc 1 2779 0
	cmpq	$0, -64(%rbp)	#, dest_loop
	je	.L613	#,
	.loc 1 2781 0
	movq	-64(%rbp), %rax	# dest_loop, tmp279
	movq	%rax, -136(%rbp)	# tmp279, outer_loop
	jmp	.L614	#
.L616:
	.loc 1 2783 0
	movq	-136(%rbp), %rax	# outer_loop, tmp280
	cmpq	-88(%rbp), %rax	# this_loop, tmp280
	jne	.L615	#,
	.loc 1 2784 0
	jmp	.L613	#
.L615:
	.loc 1 2782 0
	movq	-136(%rbp), %rax	# outer_loop, tmp281
	movq	128(%rax), %rax	# outer_loop_13->outer, tmp282
	movq	%rax, -136(%rbp)	# tmp282, outer_loop
.L614:
	.loc 1 2781 0 discriminator 1
	cmpq	$0, -136(%rbp)	#, outer_loop
	jne	.L616	#,
.L613:
	.loc 1 2790 0
	movq	-144(%rbp), %rax	# p, tmp283
	movzwl	(%rax), %eax	# p_12->code, D.24403
	cmpw	$33, %ax	#, D.24403
	jne	.L617	#,
	.loc 1 2790 0 is_stmt 0 discriminator 1
	movq	-144(%rbp), %rax	# p, tmp284
	movq	64(%rax), %rax	# p_12->fld[7].rtx, D.24407
	testq	%rax, %rax	# D.24407
	je	.L617	#,
	.loc 1 2791 0 is_stmt 1
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.286
	movq	-144(%rbp), %rax	# p, tmp285
	movq	64(%rax), %rax	# p_12->fld[7].rtx, D.24407
	movl	8(%rax), %eax	# _111->fld[0].rtint, D.24404
	cltq
	salq	$3, %rax	#, D.24406
	addq	%rdx, %rax	# uid_loop.286, D.24408
	movq	(%rax), %rax	# *_115, D.24405
	cmpq	-88(%rbp), %rax	# this_loop, D.24405
	je	.L617	#,
	.loc 1 2792 0
	movq	-88(%rbp), %rax	# this_loop, tmp286
	movq	%rax, -136(%rbp)	# tmp286, outer_loop
.L617:
	.loc 1 2803 0
	cmpq	$0, -136(%rbp)	#, outer_loop
	jne	.L604	#,
	.loc 1 2804 0
	movq	-144(%rbp), %rax	# p, tmp287
	movzwl	(%rax), %eax	# p_12->code, D.24403
	cmpw	$33, %ax	#, D.24403
	jne	.L604	#,
	.loc 1 2805 0
	movq	-144(%rbp), %rax	# p, tmp288
	movq	64(%rax), %rax	# p_12->fld[7].rtx, D.24407
	testq	%rax, %rax	# D.24407
	je	.L604	#,
	.loc 1 2808 0
	movq	-144(%rbp), %rax	# p, tmp289
	movq	64(%rax), %rax	# p_12->fld[7].rtx, D.24407
	movl	8(%rax), %eax	# _120->fld[0].rtint, D.24404
	testl	%eax, %eax	# D.24404
	je	.L604	#,
	.loc 1 2809 0
	movq	-144(%rbp), %rax	# p, tmp290
	movq	%rax, %rdi	# tmp290,
	call	any_condjump_p	#
	testl	%eax, %eax	# D.24404
	je	.L604	#,
	.loc 1 2809 0 is_stmt 0 discriminator 1
	movq	-144(%rbp), %rax	# p, tmp291
	movq	%rax, %rdi	# tmp291,
	call	onlyjump_p	#
	testl	%eax, %eax	# D.24404
	je	.L604	#,
	.loc 1 2810 0 is_stmt 1
	movq	-144(%rbp), %rax	# p, tmp292
	movq	64(%rax), %rax	# p_12->fld[7].rtx, D.24407
	movq	%rax, %rdi	# D.24407,
	call	next_real_insn	#
	cmpq	-72(%rbp), %rax	# our_next, D.24407
	jne	.L604	#,
	.loc 1 2813 0
	movq	-176(%rbp), %rax	# insn, tmp293
	movq	24(%rax), %rcx	# insn_4->fld[2].rtx, D.24407
	leaq	-192(%rbp), %rdx	#, tmp294
	movq	-144(%rbp), %rax	# p, tmp295
	movq	%rcx, %rsi	# D.24407,
	movq	%rax, %rdi	# tmp295,
	call	insns_safe_to_move_p	#
	testl	%eax, %eax	# D.24404
	je	.L604	#,
.LBB36:
	.loc 1 2817 0
	movq	-176(%rbp), %rax	# insn, tmp296
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, D.24407
	testq	%rax, %rax	# D.24407
	je	.L619	#,
	.loc 1 2817 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# insn, tmp297
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, iftmp.287
	jmp	.L620	#
.L619:
	.loc 1 2817 0 discriminator 2
	call	get_last_insn	#
.L620:
	.loc 1 2816 0 is_stmt 1
	movq	%rax, -56(%rbp)	# iftmp.287, target
	.loc 1 2818 0
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.288
	movq	-56(%rbp), %rax	# target, tmp298
	movl	8(%rax), %eax	# target_131->fld[0].rtint, D.24404
	cltq
	salq	$3, %rax	#, D.24406
	addq	%rdx, %rax	# uid_loop.288, D.24408
	movq	(%rax), %rax	# *_136, tmp299
	movq	%rax, -48(%rbp)	# tmp299, target_loop
	.loc 1 2824 0
	movq	-192(%rbp), %rax	# last_insn_to_move, tmp300
	movq	%rax, -120(%rbp)	# tmp300, tmp
	jmp	.L621	#
.L624:
	.loc 1 2826 0
	movq	-120(%rbp), %rax	# tmp, tmp301
	movzwl	(%rax), %eax	# tmp_20->code, D.24403
	cmpw	$35, %ax	#, D.24403
	jne	.L622	#,
	.loc 1 2827 0
	movq	-120(%rbp), %rax	# tmp, tmp302
	movq	%rax, -192(%rbp)	# tmp302, last_insn_to_move
.L622:
	.loc 1 2825 0
	movq	-120(%rbp), %rax	# tmp, tmp303
	movq	24(%rax), %rax	# tmp_20->fld[2].rtx, tmp304
	movq	%rax, -120(%rbp)	# tmp304, tmp
.L621:
	.loc 1 2824 0 discriminator 1
	cmpq	$0, -120(%rbp)	#, tmp
	je	.L623	#,
	.loc 1 2825 0
	movq	-120(%rbp), %rax	# tmp, tmp305
	movzwl	(%rax), %eax	# tmp_20->code, D.24403
	cmpw	$36, %ax	#, D.24403
	jne	.L624	#,
.L623:
	.loc 1 2829 0
	movq	-56(%rbp), %rax	# target, tmp306
	movq	%rax, -128(%rbp)	# tmp306, loc
	jmp	.L625	#
.L629:
	.loc 1 2830 0
	movq	-128(%rbp), %rax	# loc, tmp307
	movzwl	(%rax), %eax	# loc_16->code, D.24403
	cmpw	$35, %ax	#, D.24403
	jne	.L626	#,
	.loc 1 2832 0
	movq	-128(%rbp), %rax	# loc, tmp308
	movq	%rax, %rdi	# tmp308,
	call	next_nonnote_insn	#
	movq	%rax, -40(%rbp)	# tmp309, loc2
	cmpq	$0, -40(%rbp)	#, loc2
	je	.L627	#,
	.loc 1 2833 0
	movq	-40(%rbp), %rax	# loc2, tmp310
	movzwl	(%rax), %eax	# loc2_144->code, D.24403
	cmpw	$36, %ax	#, D.24403
	jne	.L627	#,
	.loc 1 2834 0
	movq	-40(%rbp), %rax	# loc2, tmp311
	movq	%rax, %rdi	# tmp311,
	call	next_nonnote_insn	#
	movq	%rax, -40(%rbp)	# tmp312, loc2
	cmpq	$0, -40(%rbp)	#, loc2
	je	.L627	#,
	.loc 1 2835 0
	movq	-40(%rbp), %rax	# loc2, tmp313
	movzwl	(%rax), %eax	# loc2_146->code, D.24403
	cmpw	$33, %ax	#, D.24403
	jne	.L627	#,
	.loc 1 2836 0
	movq	-40(%rbp), %rax	# loc2, tmp314
	movq	32(%rax), %rax	# loc2_146->fld[3].rtx, D.24407
	movzwl	(%rax), %eax	# _148->code, D.24403
	cmpw	$44, %ax	#, D.24403
	je	.L626	#,
	.loc 1 2837 0
	movq	-40(%rbp), %rax	# loc2, tmp315
	movq	32(%rax), %rax	# loc2_146->fld[3].rtx, D.24407
	movzwl	(%rax), %eax	# _150->code, D.24403
	cmpw	$45, %ax	#, D.24403
	je	.L626	#,
.L627:
	.loc 1 2838 0
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.289
	movq	-128(%rbp), %rax	# loc, tmp316
	movl	8(%rax), %eax	# loc_16->fld[0].rtint, D.24404
	cltq
	salq	$3, %rax	#, D.24406
	addq	%rdx, %rax	# uid_loop.289, D.24408
	movq	(%rax), %rax	# *_156, D.24405
	cmpq	-48(%rbp), %rax	# target_loop, D.24405
	jne	.L626	#,
	.loc 1 2839 0
	jmp	.L628	#
.L626:
	.loc 1 2829 0
	movq	-128(%rbp), %rax	# loc, tmp317
	movq	16(%rax), %rax	# loc_16->fld[1].rtx, tmp318
	movq	%rax, -128(%rbp)	# tmp318, loc
.L625:
	.loc 1 2829 0 is_stmt 0 discriminator 1
	cmpq	$0, -128(%rbp)	#, loc
	jne	.L629	#,
.L628:
	.loc 1 2841 0 is_stmt 1
	cmpq	$0, -128(%rbp)	#, loc
	jne	.L630	#,
	.loc 1 2842 0
	movq	-56(%rbp), %rax	# target, tmp319
	movq	%rax, -128(%rbp)	# tmp319, loc
	jmp	.L631	#
.L634:
	.loc 1 2843 0
	movq	-128(%rbp), %rax	# loc, tmp320
	movzwl	(%rax), %eax	# loc_17->code, D.24403
	cmpw	$35, %ax	#, D.24403
	jne	.L632	#,
	.loc 1 2845 0
	movq	-128(%rbp), %rax	# loc, tmp321
	movq	%rax, %rdi	# tmp321,
	call	next_nonnote_insn	#
	movq	%rax, -40(%rbp)	# tmp322, loc2
	cmpq	$0, -40(%rbp)	#, loc2
	je	.L633	#,
	.loc 1 2846 0
	movq	-40(%rbp), %rax	# loc2, tmp323
	movzwl	(%rax), %eax	# loc2_161->code, D.24403
	cmpw	$36, %ax	#, D.24403
	jne	.L633	#,
	.loc 1 2847 0
	movq	-40(%rbp), %rax	# loc2, tmp324
	movq	%rax, %rdi	# tmp324,
	call	next_nonnote_insn	#
	movq	%rax, -40(%rbp)	# tmp325, loc2
	cmpq	$0, -40(%rbp)	#, loc2
	je	.L633	#,
	.loc 1 2848 0
	movq	-40(%rbp), %rax	# loc2, tmp326
	movzwl	(%rax), %eax	# loc2_163->code, D.24403
	cmpw	$33, %ax	#, D.24403
	jne	.L633	#,
	.loc 1 2849 0
	movq	-40(%rbp), %rax	# loc2, tmp327
	movq	32(%rax), %rax	# loc2_163->fld[3].rtx, D.24407
	movzwl	(%rax), %eax	# _165->code, D.24403
	cmpw	$44, %ax	#, D.24403
	je	.L632	#,
	.loc 1 2850 0
	movq	-40(%rbp), %rax	# loc2, tmp328
	movq	32(%rax), %rax	# loc2_163->fld[3].rtx, D.24407
	movzwl	(%rax), %eax	# _167->code, D.24403
	cmpw	$45, %ax	#, D.24403
	je	.L632	#,
.L633:
	.loc 1 2851 0
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.290
	movq	-128(%rbp), %rax	# loc, tmp329
	movl	8(%rax), %eax	# loc_17->fld[0].rtint, D.24404
	cltq
	salq	$3, %rax	#, D.24406
	addq	%rdx, %rax	# uid_loop.290, D.24408
	movq	(%rax), %rax	# *_173, D.24405
	cmpq	-48(%rbp), %rax	# target_loop, D.24405
	jne	.L632	#,
	.loc 1 2852 0
	jmp	.L630	#
.L632:
	.loc 1 2842 0
	movq	-128(%rbp), %rax	# loc, tmp330
	movq	24(%rax), %rax	# loc_17->fld[2].rtx, tmp331
	movq	%rax, -128(%rbp)	# tmp331, loc
.L631:
	.loc 1 2842 0 is_stmt 0 discriminator 1
	cmpq	$0, -128(%rbp)	#, loc
	jne	.L634	#,
.L630:
	.loc 1 2854 0 is_stmt 1
	cmpq	$0, -128(%rbp)	#, loc
	je	.L604	#,
.LBB37:
	.loc 1 2856 0
	movq	-144(%rbp), %rax	# p, tmp332
	movq	64(%rax), %rax	# p_12->fld[7].rtx, tmp333
	movq	%rax, -32(%rbp)	# tmp333, cond_label
	.loc 1 2857 0
	movq	-144(%rbp), %rax	# p, tmp334
	movq	%rax, %rdi	# tmp334,
	call	get_label_after	#
	movq	%rax, -184(%rbp)	# new_label.291, new_label
	.loc 1 2860 0
	movq	-32(%rbp), %rax	# cond_label, tmp335
	movl	32(%rax), %eax	# cond_label_176->fld[3].rtint, D.24404
	leal	1(%rax), %edx	#, D.24404
	movq	-32(%rbp), %rax	# cond_label, tmp336
	movl	%edx, 32(%rax)	# D.24404, cond_label_176->fld[3].rtint
	.loc 1 2864 0
	movq	-184(%rbp), %rcx	# new_label, new_label.292
	movq	-144(%rbp), %rax	# p, tmp337
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# new_label.292,
	movq	%rax, %rdi	# tmp337,
	call	invert_jump	#
	testl	%eax, %eax	# D.24404
	je	.L635	#,
.LBB38:
	.loc 1 2878 0
	cmpq	$0, -128(%rbp)	#, loc
	jne	.L636	#,
.LBB39:
	.loc 1 2882 0
	movq	-176(%rbp), %rax	# insn, tmp338
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, D.24407
	movq	%rax, %rdi	# D.24407,
	call	gen_jump	#
	movq	%rax, -24(%rbp)	# tmp339, temp
	.loc 1 2883 0
	movq	-56(%rbp), %rdx	# target, tmp340
	movq	-24(%rbp), %rax	# temp, tmp341
	movq	%rdx, %rsi	# tmp340,
	movq	%rax, %rdi	# tmp341,
	call	emit_jump_insn_before	#
	movq	%rax, -24(%rbp)	# tmp342, temp
	.loc 1 2884 0
	movq	-176(%rbp), %rax	# insn, tmp343
	movq	64(%rax), %rdx	# insn_4->fld[7].rtx, D.24407
	movq	-24(%rbp), %rax	# temp, tmp344
	movq	%rdx, 64(%rax)	# D.24407, temp_184->fld[7].rtx
	.loc 1 2885 0
	movq	-176(%rbp), %rax	# insn, tmp345
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, D.24407
	movl	32(%rax), %edx	# _186->fld[3].rtint, D.24404
	addl	$1, %edx	#, D.24404
	movl	%edx, 32(%rax)	# D.24404, _186->fld[3].rtint
	.loc 1 2886 0
	movq	-56(%rbp), %rax	# target, tmp346
	movq	%rax, %rdi	# tmp346,
	call	emit_barrier_before	#
	movq	%rax, -128(%rbp)	# tmp347, loc
.L636:
.LBE39:
	.loc 1 2891 0
	leaq	-192(%rbp), %rdx	#, tmp348
	leaq	-184(%rbp), %rax	#, tmp349
	movq	%rdx, %rsi	# tmp348,
	movq	%rax, %rdi	# tmp349,
	call	squeeze_notes	#
	testb	%al, %al	# D.24411
	je	.L637	#,
	.loc 1 2892 0
	movl	$__FUNCTION__.13028, %edx	#,
	movl	$2892, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L637:
	.loc 1 2893 0
	movq	-192(%rbp), %rcx	# last_insn_to_move, last_insn_to_move.293
	movq	-184(%rbp), %rax	# new_label, new_label.294
	movq	-128(%rbp), %rdx	# loc, tmp350
	movq	%rcx, %rsi	# last_insn_to_move.293,
	movq	%rax, %rdi	# new_label.294,
	call	reorder_insns	#
	.loc 1 2896 0
	movq	-184(%rbp), %rax	# new_label, tmp351
	movq	%rax, -112(%rbp)	# tmp351, q
	jmp	.L638	#
.L639:
	.loc 1 2899 0
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.295
	movq	-112(%rbp), %rax	# q, tmp352
	movl	8(%rax), %eax	# q_21->fld[0].rtint, D.24404
	cltq
	salq	$3, %rax	#, D.24406
	addq	%rax, %rdx	# D.24406, D.24408
	movq	-48(%rbp), %rax	# target_loop, tmp353
	movq	%rax, (%rdx)	# tmp353, *_200
	.loc 1 2898 0
	movq	-112(%rbp), %rax	# q, tmp354
	movq	24(%rax), %rax	# q_21->fld[2].rtx, tmp355
	movq	%rax, -112(%rbp)	# tmp355, q
.L638:
	.loc 1 2897 0 discriminator 1
	movq	-192(%rbp), %rax	# last_insn_to_move, last_insn_to_move.296
	movq	24(%rax), %rax	# last_insn_to_move.296_194->fld[2].rtx, D.24407
	.loc 1 2896 0 discriminator 1
	cmpq	-112(%rbp), %rax	# q, D.24407
	jne	.L639	#,
	.loc 1 2906 0
	movq	-176(%rbp), %rax	# insn, tmp356
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, D.24407
	testq	%rax, %rax	# D.24407
	je	.L640	#,
	.loc 1 2908 0
	movq	$0, -112(%rbp)	#, q
	movq	-88(%rbp), %rax	# this_loop, tmp357
	movq	232(%rax), %rax	# this_loop_69->exit_labels, tmp358
	movq	%rax, -104(%rbp)	# tmp358, r
	jmp	.L641	#
.L646:
	.loc 1 2911 0
	movq	-104(%rbp), %rax	# r, tmp359
	movq	8(%rax), %rdx	# r_23->fld[0].rtx, D.24407
	movq	-176(%rbp), %rax	# insn, tmp360
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, D.24407
	cmpq	%rax, %rdx	# D.24407, D.24407
	jne	.L642	#,
	.loc 1 2913 0
	movq	-104(%rbp), %rax	# r, tmp361
	movzbl	3(%rax), %edx	# r_23->in_struct, tmp364
	andl	$-17, %edx	#, tmp365
	movb	%dl, 3(%rax)	# tmp365, r_23->in_struct
	.loc 1 2914 0
	cmpq	$0, -112(%rbp)	#, q
	je	.L643	#,
	.loc 1 2915 0
	movq	-104(%rbp), %rax	# r, tmp366
	movq	16(%rax), %rdx	# r_23->fld[1].rtx, D.24407
	movq	-112(%rbp), %rax	# q, tmp367
	movq	%rdx, 16(%rax)	# D.24407, q_22->fld[1].rtx
	.loc 1 2918 0
	jmp	.L645	#
.L643:
	.loc 1 2917 0
	movq	-104(%rbp), %rax	# r, tmp368
	movq	16(%rax), %rdx	# r_23->fld[1].rtx, D.24407
	movq	-88(%rbp), %rax	# this_loop, tmp369
	movq	%rdx, 232(%rax)	# D.24407, this_loop_69->exit_labels
	.loc 1 2918 0
	jmp	.L645	#
.L642:
	.loc 1 2910 0
	movq	-104(%rbp), %rax	# r, tmp370
	movq	%rax, -112(%rbp)	# tmp370, q
	movq	-104(%rbp), %rax	# r, tmp371
	movq	16(%rax), %rax	# r_23->fld[1].rtx, tmp372
	movq	%rax, -104(%rbp)	# tmp372, r
.L641:
	.loc 1 2908 0 discriminator 1
	cmpq	$0, -104(%rbp)	#, r
	jne	.L646	#,
.L645:
	.loc 1 2921 0
	movq	-88(%rbp), %rax	# this_loop, tmp373
	movq	%rax, -152(%rbp)	# tmp373, loop
	jmp	.L647	#
.L649:
	.loc 1 2923 0
	movq	-152(%rbp), %rax	# loop, tmp374
	movl	240(%rax), %eax	# loop_11->exit_count, D.24404
	leal	-1(%rax), %edx	#, D.24404
	movq	-152(%rbp), %rax	# loop, tmp375
	movl	%edx, 240(%rax)	# D.24404, loop_11->exit_count
	.loc 1 2922 0
	movq	-152(%rbp), %rax	# loop, tmp376
	movq	128(%rax), %rax	# loop_11->outer, tmp377
	movq	%rax, -152(%rbp)	# tmp377, loop
.L647:
	.loc 1 2921 0 discriminator 1
	cmpq	$0, -152(%rbp)	#, loop
	je	.L648	#,
	.loc 1 2921 0 is_stmt 0 discriminator 2
	movq	-152(%rbp), %rax	# loop, tmp378
	cmpq	-48(%rbp), %rax	# target_loop, tmp378
	jne	.L649	#,
.L648:
	.loc 1 2927 0 is_stmt 1
	cmpq	$0, -104(%rbp)	#, r
	jne	.L640	#,
	.loc 1 2928 0
	movl	$__FUNCTION__.13028, %edx	#,
	movl	$2928, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L640:
	.loc 1 2935 0
	movq	-144(%rbp), %rax	# p, tmp379
	movq	32(%rax), %rax	# p_12->fld[3].rtx, D.24407
	movq	-88(%rbp), %rdx	# this_loop, tmp380
	movq	%rdx, %rsi	# tmp380,
	movq	%rax, %rdi	# D.24407,
	call	mark_loop_jump	#
	.loc 1 2939 0
	movq	-176(%rbp), %rax	# insn, tmp381
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, D.24407
	testq	%rax, %rax	# D.24407
	je	.L635	#,
	.loc 1 2940 0
	movq	-176(%rbp), %rax	# insn, tmp382
	movq	64(%rax), %rax	# insn_4->fld[7].rtx, D.24407
	movq	%rax, %rdi	# D.24407,
	call	next_real_insn	#
	movq	%rax, %rbx	#, D.24407
	.loc 1 2941 0
	movq	-176(%rbp), %rax	# insn, tmp383
	movq	%rax, %rdi	# tmp383,
	call	next_real_insn	#
	.loc 1 2940 0
	cmpq	%rax, %rbx	# D.24407, D.24407
	jne	.L635	#,
	.loc 1 2942 0
	movq	-176(%rbp), %rax	# insn, tmp384
	movq	%rax, %rdi	# tmp384,
	call	delete_related_insns	#
.L635:
.LBE38:
	.loc 1 2949 0
	movq	-32(%rbp), %rax	# cond_label, tmp385
	movq	24(%rax), %rax	# cond_label_176->fld[2].rtx, tmp386
	movq	%rax, -176(%rbp)	# tmp386, insn
	.loc 1 2951 0
	movq	-32(%rbp), %rax	# cond_label, tmp387
	movl	32(%rax), %eax	# cond_label_176->fld[3].rtint, D.24404
	leal	-1(%rax), %edx	#, D.24404
	movq	-32(%rbp), %rax	# cond_label, tmp388
	movl	%edx, 32(%rax)	# D.24404, cond_label_176->fld[3].rtint
	movq	-32(%rbp), %rax	# cond_label, tmp389
	movl	32(%rax), %eax	# cond_label_176->fld[3].rtint, D.24404
	testl	%eax, %eax	# D.24404
	jne	.L650	#,
	.loc 1 2952 0
	movq	-32(%rbp), %rax	# cond_label, tmp390
	movq	%rax, %rdi	# tmp390,
	call	delete_related_insns	#
.L650:
	.loc 1 2955 0
	movq	-176(%rbp), %rax	# insn, tmp391
	movq	16(%rax), %rax	# insn_220->fld[1].rtx, tmp392
	movq	%rax, -176(%rbp)	# tmp392, insn
.L604:
.LBE37:
.LBE36:
.LBE35:
.LBE33:
	.loc 1 2731 0
	movq	-176(%rbp), %rax	# insn, tmp393
	movq	24(%rax), %rax	# insn_3->fld[2].rtx, tmp394
	movq	%rax, -176(%rbp)	# tmp394, insn
.L603:
	.loc 1 2731 0 is_stmt 0 discriminator 1
	cmpq	$0, -176(%rbp)	#, insn
	jne	.L651	#,
	.loc 1 2960 0 is_stmt 1
	addq	$216, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE25:
	.size	find_and_verify_loops, .-find_and_verify_loops
	.section	.rodata
	.align 8
.LC19:
	.string	"\nLoop at %d ignored due to multiple entry points.\n"
	.align 8
.LC20:
	.string	"\nLoop at %d ignored due to unknown exit jump.\n"
	.text
	.type	mark_loop_jump, @function
mark_loop_jump:
.LFB26:
	.loc 1 2971 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# loop, loop
	.loc 1 2976 0
	movq	-40(%rbp), %rax	# x, tmp98
	movzwl	(%rax), %eax	# x_9(D)->code, D.24414
	movzwl	%ax, %eax	# D.24414, D.24415
	subl	$39, %eax	#, tmp99
	cmpl	$96, %eax	#, tmp99
	ja	.L653	#,
	movl	%eax, %eax	# tmp99, tmp100
	movq	.L655(,%rax,8), %rax	#, tmp101
	jmp	*%rax	# tmp101
	.section	.rodata
	.align 8
	.align 4
.L655:
	.quad	.L654
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L654
	.quad	.L656
	.quad	.L653
	.quad	.L657
	.quad	.L691
	.quad	.L691
	.quad	.L653
	.quad	.L691
	.quad	.L653
	.quad	.L653
	.quad	.L691
	.quad	.L691
	.quad	.L653
	.quad	.L653
	.quad	.L659
	.quad	.L691
	.quad	.L653
	.quad	.L691
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L691
	.quad	.L660
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L661
	.quad	.L653
	.quad	.L653
	.quad	.L662
	.quad	.L662
	.quad	.L653
	.quad	.L662
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L663
	.quad	.L663
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L653
	.quad	.L664
	.text
.L659:
	.loc 1 2990 0
	movq	-40(%rbp), %rax	# x, tmp102
	movq	8(%rax), %rax	# x_9(D)->fld[0].rtx, D.24416
	movq	-48(%rbp), %rdx	# loop, tmp103
	movq	%rdx, %rsi	# tmp103,
	movq	%rax, %rdi	# D.24416,
	call	mark_loop_jump	#
	.loc 1 2991 0
	jmp	.L652	#
.L662:
	.loc 1 2996 0
	movq	-40(%rbp), %rax	# x, tmp104
	movq	8(%rax), %rax	# x_9(D)->fld[0].rtx, D.24416
	movq	-48(%rbp), %rdx	# loop, tmp105
	movq	%rdx, %rsi	# tmp105,
	movq	%rax, %rdi	# D.24416,
	call	mark_loop_jump	#
	.loc 1 2997 0
	movq	-40(%rbp), %rax	# x, tmp106
	movq	16(%rax), %rax	# x_9(D)->fld[1].rtx, D.24416
	movq	-48(%rbp), %rdx	# loop, tmp107
	movq	%rdx, %rsi	# tmp107,
	movq	%rax, %rdi	# D.24416,
	call	mark_loop_jump	#
	.loc 1 2998 0
	jmp	.L652	#
.L664:
	.loc 1 3002 0
	movq	-40(%rbp), %rax	# x, tmp108
	movq	16(%rax), %rax	# x_9(D)->fld[1].rtx, D.24416
	movq	-48(%rbp), %rdx	# loop, tmp109
	movq	%rdx, %rsi	# tmp109,
	movq	%rax, %rdi	# D.24416,
	call	mark_loop_jump	#
	.loc 1 3003 0
	jmp	.L652	#
.L663:
	.loc 1 3007 0
	movq	-40(%rbp), %rax	# x, tmp110
	movq	8(%rax), %rax	# x_9(D)->fld[0].rtx, D.24416
	movq	-48(%rbp), %rdx	# loop, tmp111
	movq	%rdx, %rsi	# tmp111,
	movq	%rax, %rdi	# D.24416,
	call	mark_loop_jump	#
	.loc 1 3008 0
	jmp	.L652	#
.L660:
	.loc 1 3011 0
	movq	uid_loop(%rip), %rdx	# uid_loop, uid_loop.297
	movq	-40(%rbp), %rax	# x, tmp112
	movq	8(%rax), %rax	# x_9(D)->fld[0].rtx, D.24416
	movl	8(%rax), %eax	# _19->fld[0].rtint, D.24417
	cltq
	salq	$3, %rax	#, D.24418
	addq	%rdx, %rax	# uid_loop.297, D.24419
	movq	(%rax), %rax	# *_23, tmp113
	movq	%rax, -16(%rbp)	# tmp113, dest_loop
	.loc 1 3020 0
	cmpq	$0, -16(%rbp)	#, dest_loop
	je	.L666	#,
	.loc 1 3022 0
	movq	-16(%rbp), %rax	# dest_loop, tmp114
	movq	%rax, -8(%rbp)	# tmp114, outer_loop
	jmp	.L667	#
.L670:
	.loc 1 3024 0
	movq	-8(%rbp), %rax	# outer_loop, tmp115
	cmpq	-48(%rbp), %rax	# loop, tmp115
	jne	.L668	#,
	.loc 1 3025 0
	nop
	jmp	.L671	#
.L668:
	.loc 1 3023 0
	movq	-8(%rbp), %rax	# outer_loop, tmp116
	movq	128(%rax), %rax	# outer_loop_2->outer, tmp117
	movq	%rax, -8(%rbp)	# tmp117, outer_loop
.L667:
	.loc 1 3022 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, outer_loop
	jne	.L670	#,
	jmp	.L671	#
.L666:
	.loc 1 3028 0
	movq	$0, -8(%rbp)	#, outer_loop
.L671:
	.loc 1 3030 0
	cmpq	$0, -48(%rbp)	#, loop
	je	.L672	#,
	.loc 1 3030 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, outer_loop
	jne	.L672	#,
	.loc 1 3032 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp118
	movzbl	3(%rax), %edx	# x_9(D)->in_struct, tmp121
	orl	$16, %edx	#, tmp122
	movb	%dl, 3(%rax)	# tmp122, x_9(D)->in_struct
	.loc 1 3033 0
	movq	-48(%rbp), %rax	# loop, tmp123
	movq	232(%rax), %rdx	# loop_13(D)->exit_labels, D.24416
	movq	-40(%rbp), %rax	# x, tmp124
	movq	%rdx, 16(%rax)	# D.24416, x_9(D)->fld[1].rtx
	.loc 1 3034 0
	movq	-48(%rbp), %rax	# loop, tmp125
	movq	-40(%rbp), %rdx	# x, tmp126
	movq	%rdx, 232(%rax)	# tmp126, loop_13(D)->exit_labels
	.loc 1 3036 0
	movq	-48(%rbp), %rax	# loop, tmp127
	movq	%rax, -8(%rbp)	# tmp127, outer_loop
	jmp	.L673	#
.L674:
	.loc 1 3039 0
	movq	-8(%rbp), %rax	# outer_loop, tmp128
	movl	240(%rax), %eax	# outer_loop_4->exit_count, D.24417
	leal	1(%rax), %edx	#, D.24417
	movq	-8(%rbp), %rax	# outer_loop, tmp129
	movl	%edx, 240(%rax)	# D.24417, outer_loop_4->exit_count
	.loc 1 3038 0
	movq	-8(%rbp), %rax	# outer_loop, tmp130
	movq	128(%rax), %rax	# outer_loop_4->outer, tmp131
	movq	%rax, -8(%rbp)	# tmp131, outer_loop
.L673:
	.loc 1 3036 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, outer_loop
	je	.L672	#,
	.loc 1 3037 0
	movq	-8(%rbp), %rax	# outer_loop, tmp132
	cmpq	-16(%rbp), %rax	# dest_loop, tmp132
	jne	.L674	#,
.L672:
	.loc 1 3045 0
	cmpq	$0, -16(%rbp)	#, dest_loop
	jne	.L675	#,
	.loc 1 3046 0
	jmp	.L652	#
.L675:
	.loc 1 3051 0
	jmp	.L676	#
.L681:
	.loc 1 3054 0
	movq	-48(%rbp), %rax	# loop, tmp133
	movq	%rax, -8(%rbp)	# tmp133, outer_loop
	jmp	.L677	#
.L679:
	.loc 1 3055 0
	movq	-16(%rbp), %rax	# dest_loop, tmp134
	cmpq	-8(%rbp), %rax	# outer_loop, tmp134
	jne	.L678	#,
	.loc 1 3056 0
	jmp	.L652	#
.L678:
	.loc 1 3054 0
	movq	-8(%rbp), %rax	# outer_loop, tmp135
	movq	128(%rax), %rax	# outer_loop_5->outer, tmp136
	movq	%rax, -8(%rbp)	# tmp136, outer_loop
.L677:
	.loc 1 3054 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, outer_loop
	jne	.L679	#,
	.loc 1 3059 0 is_stmt 1
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.298
	testq	%rax, %rax	# loop_dump_stream.298
	je	.L680	#,
	.loc 1 3059 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# dest_loop, tmp137
	movl	156(%rax), %eax	# dest_loop_1->invalid, D.24417
	testl	%eax, %eax	# D.24417
	jne	.L680	#,
	.loc 1 3062 0 is_stmt 1
	movq	-16(%rbp), %rax	# dest_loop, tmp138
	movq	192(%rax), %rax	# dest_loop_1->start, D.24416
	.loc 1 3060 0
	movl	8(%rax), %edx	# _37->fld[0].rtint, D.24417
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.299
	movl	$.LC19, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.299,
	movl	$0, %eax	#,
	call	fprintf	#
.L680:
	.loc 1 3064 0
	movq	-16(%rbp), %rax	# dest_loop, tmp139
	movl	$1, 156(%rax)	#, dest_loop_1->invalid
	.loc 1 3051 0
	movq	-16(%rbp), %rax	# dest_loop, tmp140
	movq	128(%rax), %rax	# dest_loop_1->outer, tmp141
	movq	%rax, -16(%rbp)	# tmp141, dest_loop
.L676:
	.loc 1 3051 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, dest_loop
	jne	.L681	#,
	.loc 1 3066 0 is_stmt 1
	jmp	.L652	#
.L657:
	.loc 1 3070 0
	movq	-40(%rbp), %rax	# x, tmp142
	movq	8(%rax), %rdx	# x_9(D)->fld[0].rtx, D.24416
	movq	global_rtl(%rip), %rax	# global_rtl, D.24416
	cmpq	%rax, %rdx	# D.24416, D.24416
	jne	.L682	#,
	.loc 1 3071 0
	movq	-40(%rbp), %rax	# x, tmp143
	movq	16(%rax), %rax	# x_9(D)->fld[1].rtx, D.24416
	movq	-48(%rbp), %rdx	# loop, tmp144
	movq	%rdx, %rsi	# tmp144,
	movq	%rax, %rdi	# D.24416,
	call	mark_loop_jump	#
	.loc 1 3072 0
	jmp	.L652	#
.L682:
	jmp	.L652	#
.L661:
	.loc 1 3075 0
	movq	-40(%rbp), %rax	# x, tmp145
	movq	16(%rax), %rax	# x_9(D)->fld[1].rtx, D.24416
	movq	-48(%rbp), %rdx	# loop, tmp146
	movq	%rdx, %rsi	# tmp146,
	movq	%rax, %rdi	# D.24416,
	call	mark_loop_jump	#
	.loc 1 3076 0
	movq	-40(%rbp), %rax	# x, tmp147
	movq	24(%rax), %rax	# x_9(D)->fld[2].rtx, D.24416
	movq	-48(%rbp), %rdx	# loop, tmp148
	movq	%rdx, %rsi	# tmp148,
	movq	%rax, %rdi	# D.24416,
	call	mark_loop_jump	#
	.loc 1 3077 0
	jmp	.L652	#
.L654:
	.loc 1 3081 0
	movl	$0, -20(%rbp)	#, i
	jmp	.L683	#
.L684:
	.loc 1 3082 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp149
	movq	8(%rax), %rax	# x_9(D)->fld[0].rtvec, D.24420
	movl	-20(%rbp), %edx	# i, tmp151
	movslq	%edx, %rdx	# tmp151, tmp150
	movq	8(%rax,%rdx,8), %rax	# _49->elem, D.24416
	movq	-48(%rbp), %rdx	# loop, tmp152
	movq	%rdx, %rsi	# tmp152,
	movq	%rax, %rdi	# D.24416,
	call	mark_loop_jump	#
	.loc 1 3081 0 discriminator 2
	addl	$1, -20(%rbp)	#, i
.L683:
	.loc 1 3081 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp153
	movq	8(%rax), %rax	# x_9(D)->fld[0].rtvec, D.24420
	movl	(%rax), %eax	# _47->num_elem, D.24417
	cmpl	-20(%rbp), %eax	# i, D.24417
	jg	.L684	#,
	.loc 1 3083 0 is_stmt 1
	jmp	.L652	#
.L656:
	.loc 1 3086 0
	movl	$0, -20(%rbp)	#, i
	jmp	.L685	#
.L686:
	.loc 1 3087 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp154
	movq	16(%rax), %rax	# x_9(D)->fld[1].rtvec, D.24420
	movl	-20(%rbp), %edx	# i, tmp156
	movslq	%edx, %rdx	# tmp156, tmp155
	movq	8(%rax,%rdx,8), %rax	# _55->elem, D.24416
	movq	-48(%rbp), %rdx	# loop, tmp157
	movq	%rdx, %rsi	# tmp157,
	movq	%rax, %rdi	# D.24416,
	call	mark_loop_jump	#
	.loc 1 3086 0 discriminator 2
	addl	$1, -20(%rbp)	#, i
.L685:
	.loc 1 3086 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp158
	movq	16(%rax), %rax	# x_9(D)->fld[1].rtvec, D.24420
	movl	(%rax), %eax	# _53->num_elem, D.24417
	cmpl	-20(%rbp), %eax	# i, D.24417
	jg	.L686	#,
	.loc 1 3088 0 is_stmt 1
	jmp	.L652	#
.L653:
	.loc 1 3095 0
	cmpq	$0, -48(%rbp)	#, loop
	je	.L687	#,
	.loc 1 3097 0
	movq	-48(%rbp), %rax	# loop, tmp159
	movq	%rax, -8(%rbp)	# tmp159, outer_loop
	jmp	.L688	#
.L690:
	.loc 1 3099 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.300
	testq	%rax, %rax	# loop_dump_stream.300
	je	.L689	#,
	.loc 1 3099 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# outer_loop, tmp160
	movl	156(%rax), %eax	# outer_loop_6->invalid, D.24417
	testl	%eax, %eax	# D.24417
	jne	.L689	#,
	.loc 1 3102 0 is_stmt 1
	movq	-8(%rbp), %rax	# outer_loop, tmp161
	movq	192(%rax), %rax	# outer_loop_6->start, D.24416
	.loc 1 3100 0
	movl	8(%rax), %edx	# _61->fld[0].rtint, D.24417
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.301
	movl	$.LC20, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.301,
	movl	$0, %eax	#,
	call	fprintf	#
.L689:
	.loc 1 3103 0
	movq	-8(%rbp), %rax	# outer_loop, tmp162
	movl	$1, 156(%rax)	#, outer_loop_6->invalid
	.loc 1 3097 0
	movq	-8(%rbp), %rax	# outer_loop, tmp163
	movq	128(%rax), %rax	# outer_loop_6->outer, tmp164
	movq	%rax, -8(%rbp)	# tmp164, outer_loop
.L688:
	.loc 1 3097 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, outer_loop
	jne	.L690	#,
.L687:
	.loc 1 3106 0 is_stmt 1
	nop
	jmp	.L652	#
.L691:
	.loc 1 2986 0
	nop
.L652:
	.loc 1 3108 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE26:
	.size	mark_loop_jump, .-mark_loop_jump
	.type	labels_in_range_p, @function
labels_in_range_p:
.LFB27:
	.loc 1 3119 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# insn, insn
	movl	%esi, -12(%rbp)	# end, end
	.loc 1 3120 0
	jmp	.L693	#
.L699:
	.loc 1 3122 0
	movq	-8(%rbp), %rax	# insn, tmp70
	movzwl	(%rax), %eax	# insn_1->code, D.24426
	cmpw	$36, %ax	#, D.24426
	jne	.L694	#,
	.loc 1 3123 0
	movl	$1, %eax	#, D.24423
	jmp	.L695	#
.L694:
	.loc 1 3124 0
	movq	-8(%rbp), %rax	# insn, tmp71
	movq	24(%rax), %rax	# insn_1->fld[2].rtx, tmp72
	movq	%rax, -8(%rbp)	# tmp72, insn
.L693:
	.loc 1 3120 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, insn
	je	.L696	#,
	.loc 1 3120 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# insn, tmp73
	movl	8(%rax), %edx	# insn_1->fld[0].rtint, D.24423
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.303
	cmpl	%eax, %edx	# max_uid_for_loop.303, D.24423
	jge	.L697	#,
	.loc 1 3120 0 discriminator 1
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.304
	movq	-8(%rbp), %rax	# insn, tmp74
	movl	8(%rax), %eax	# insn_1->fld[0].rtint, D.24423
	cltq
	salq	$2, %rax	#, D.24424
	addq	%rdx, %rax	# uid_luid.304, D.24425
	movl	(%rax), %eax	# *_10, iftmp.302
	cmpl	-12(%rbp), %eax	# end, iftmp.302
	jle	.L699	#,
	jmp	.L696	#
.L697:
	.loc 1 3120 0 discriminator 2
	movl	$__FUNCTION__.13138, %edx	#,
	movl	$3120, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L696:
	.loc 1 3127 0 is_stmt 1
	movl	$0, %eax	#, D.24423
.L695:
	.loc 1 3128 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE27:
	.size	labels_in_range_p, .-labels_in_range_p
	.type	note_addr_stored, @function
note_addr_stored:
.LFB28:
	.loc 1 3137 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# x, x
	movq	%rsi, -32(%rbp)	# y, y
	movq	%rdx, -40(%rbp)	# data, data
	.loc 1 3138 0
	movq	-40(%rbp), %rax	# data, tmp67
	movq	%rax, -8(%rbp)	# tmp67, loop_info
	.loc 1 3140 0
	cmpq	$0, -24(%rbp)	#, x
	je	.L701	#,
	.loc 1 3140 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# x, tmp68
	movzwl	(%rax), %eax	# x_3(D)->code, D.24427
	cmpw	$66, %ax	#, D.24427
	je	.L702	#,
.L701:
	.loc 1 3141 0 is_stmt 1
	jmp	.L700	#
.L702:
	.loc 1 3145 0
	movq	-8(%rbp), %rax	# loop_info, tmp69
	movl	152(%rax), %eax	# loop_info_2->num_mem_sets, D.24428
	leal	1(%rax), %edx	#, D.24428
	movq	-8(%rbp), %rax	# loop_info, tmp70
	movl	%edx, 152(%rax)	# D.24428, loop_info_2->num_mem_sets
	.loc 1 3148 0
	movq	-24(%rbp), %rax	# x, tmp71
	movzbl	2(%rax), %eax	# x_3(D)->mode, D.24429
	cmpb	$51, %al	#, D.24429
	jne	.L704	#,
	.loc 1 3150 0
	movq	-24(%rbp), %rax	# x, tmp72
	movzbl	3(%rax), %eax	# *x_3(D), D.24429
	andl	$4, %eax	#, D.24429
	testb	%al, %al	# D.24429
	je	.L705	#,
	.loc 1 3151 0
	movq	-8(%rbp), %rax	# loop_info, tmp73
	movl	$1, 148(%rax)	#, loop_info_2->unknown_constant_address_altered
	.loc 1 3155 0
	jmp	.L700	#
.L705:
	.loc 1 3153 0
	movq	-8(%rbp), %rax	# loop_info, tmp74
	movl	$1, 144(%rax)	#, loop_info_2->unknown_address_altered
	.loc 1 3155 0
	jmp	.L700	#
.L704:
	.loc 1 3158 0
	movq	-8(%rbp), %rax	# loop_info, tmp75
	movq	120(%rax), %rdx	# loop_info_2->store_mems, D.24430
	movq	-24(%rbp), %rax	# x, tmp76
	movq	%rdx, %rcx	# D.24430,
	movq	%rax, %rdx	# tmp76,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-8(%rbp), %rdx	# loop_info, tmp77
	movq	%rax, 120(%rdx)	# D.24430, loop_info_2->store_mems
.L700:
	.loc 1 3160 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE28:
	.size	note_addr_stored, .-note_addr_stored
	.type	note_set_pseudo_multiple_uses, @function
note_set_pseudo_multiple_uses:
.LFB29:
	.loc 1 3172 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# x, x
	movq	%rsi, -32(%rbp)	# y, y
	movq	%rdx, -40(%rbp)	# data, data
	.loc 1 3173 0
	movq	-40(%rbp), %rax	# data, tmp80
	movq	%rax, -8(%rbp)	# tmp80, regs
	.loc 1 3175 0
	cmpq	$0, -24(%rbp)	#, x
	jne	.L708	#,
	.loc 1 3176 0
	jmp	.L707	#
.L708:
	.loc 1 3178 0
	jmp	.L710	#
.L711:
	.loc 1 3182 0
	movq	-24(%rbp), %rax	# x, tmp81
	movq	8(%rax), %rax	# x_1->fld[0].rtx, tmp82
	movq	%rax, -24(%rbp)	# tmp82, x
.L710:
	.loc 1 3178 0 discriminator 1
	movq	-24(%rbp), %rax	# x, tmp83
	movzwl	(%rax), %eax	# x_1->code, D.24431
	cmpw	$64, %ax	#, D.24431
	je	.L711	#,
	.loc 1 3179 0
	movq	-24(%rbp), %rax	# x, tmp84
	movzwl	(%rax), %eax	# x_1->code, D.24431
	cmpw	$132, %ax	#, D.24431
	je	.L711	#,
	.loc 1 3180 0
	movq	-24(%rbp), %rax	# x, tmp85
	movzwl	(%rax), %eax	# x_1->code, D.24431
	cmpw	$133, %ax	#, D.24431
	je	.L711	#,
	.loc 1 3181 0
	movq	-24(%rbp), %rax	# x, tmp86
	movzwl	(%rax), %eax	# x_1->code, D.24431
	cmpw	$63, %ax	#, D.24431
	je	.L711	#,
	.loc 1 3184 0
	movq	-24(%rbp), %rax	# x, tmp87
	movzwl	(%rax), %eax	# x_1->code, D.24431
	cmpw	$61, %ax	#, D.24431
	jne	.L712	#,
	.loc 1 3184 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# x, tmp88
	movl	8(%rax), %eax	# x_1->fld[0].rtuint, D.24432
	cmpl	$52, %eax	#, D.24432
	ja	.L713	#,
.L712:
	.loc 1 3185 0 is_stmt 1
	jmp	.L707	#
.L713:
	.loc 1 3189 0
	movq	-24(%rbp), %rax	# x, tmp89
	movl	8(%rax), %edx	# x_1->fld[0].rtuint, D.24432
	movl	max_reg_before_loop(%rip), %eax	# max_reg_before_loop, max_reg_before_loop.305
	cmpl	%eax, %edx	# max_reg_before_loop.305, D.24432
	jae	.L714	#,
	.loc 1 3190 0
	movq	-8(%rbp), %rax	# regs, tmp90
	movq	8(%rax), %rcx	# regs_3->array, D.24433
	movq	-24(%rbp), %rax	# x, tmp91
	movl	8(%rax), %eax	# x_1->fld[0].rtuint, D.24432
	movl	%eax, %edx	# D.24432, D.24434
	movq	%rdx, %rax	# D.24434, tmp92
	addq	%rax, %rax	# tmp92
	addq	%rdx, %rax	# D.24434, tmp92
	salq	$3, %rax	#, tmp93
	addq	%rcx, %rax	# D.24433, D.24433
	movq	8(%rax), %rax	# _17->single_usage, D.24435
	testq	%rax, %rax	# D.24435
	je	.L714	#,
	.loc 1 3191 0
	movq	-8(%rbp), %rax	# regs, tmp94
	movq	8(%rax), %rcx	# regs_3->array, D.24433
	movq	-24(%rbp), %rax	# x, tmp95
	movl	8(%rax), %eax	# x_1->fld[0].rtuint, D.24432
	movl	%eax, %edx	# D.24432, D.24434
	movq	%rdx, %rax	# D.24434, tmp96
	addq	%rax, %rax	# tmp96
	addq	%rdx, %rax	# D.24434, tmp96
	salq	$3, %rax	#, tmp97
	addq	%rcx, %rax	# D.24433, D.24433
	movq	8(%rax), %rdx	# _23->single_usage, D.24435
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24435
	cmpq	%rax, %rdx	# D.24435, D.24435
	jne	.L707	#,
.L714:
	.loc 1 3192 0
	movq	-8(%rbp), %rax	# regs, tmp98
	movl	$1, 16(%rax)	#, regs_3->multiple_uses
.L707:
	.loc 1 3193 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE29:
	.size	note_set_pseudo_multiple_uses, .-note_set_pseudo_multiple_uses
	.globl	loop_invariant_p
	.type	loop_invariant_p, @function
loop_invariant_p:
.LFB30:
	.loc 1 3206 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# loop, loop
	movq	%rsi, -80(%rbp)	# x, x
	.loc 1 3207 0
	movq	-72(%rbp), %rax	# loop, tmp110
	movq	160(%rax), %rax	# loop_10(D)->aux, tmp111
	movq	%rax, -24(%rbp)	# tmp111, loop_info
	.loc 1 3208 0
	movq	-72(%rbp), %rax	# loop, tmp112
	movq	160(%rax), %rax	# loop_10(D)->aux, D.24437
	addq	$184, %rax	#, tmp113
	movq	%rax, -16(%rbp)	# tmp113, regs
	.loc 1 3212 0
	movl	$0, -52(%rbp)	#, conditional
	.loc 1 3215 0
	cmpq	$0, -80(%rbp)	#, x
	jne	.L716	#,
	.loc 1 3216 0
	movl	$1, %eax	#, D.24436
	jmp	.L717	#
.L716:
	.loc 1 3217 0
	movq	-80(%rbp), %rax	# x, tmp114
	movzwl	(%rax), %eax	# x_15(D)->code, D.24438
	movzwl	%ax, %eax	# D.24438, tmp115
	movl	%eax, -44(%rbp)	# tmp115, code
	.loc 1 3218 0
	movl	-44(%rbp), %eax	# code, tmp117
	subl	$41, %eax	#, tmp116
	cmpl	$28, %eax	#, tmp116
	ja	.L747	#,
	movl	%eax, %eax	# tmp116, tmp118
	movq	.L720(,%rax,8), %rax	#, tmp119
	jmp	*%rax	# tmp119
	.section	.rodata
	.align 8
	.align 4
.L720:
	.quad	.L719
	.quad	.L747
	.quad	.L721
	.quad	.L747
	.quad	.L747
	.quad	.L747
	.quad	.L747
	.quad	.L747
	.quad	.L747
	.quad	.L747
	.quad	.L747
	.quad	.L747
	.quad	.L747
	.quad	.L722
	.quad	.L722
	.quad	.L747
	.quad	.L747
	.quad	.L722
	.quad	.L721
	.quad	.L747
	.quad	.L723
	.quad	.L747
	.quad	.L747
	.quad	.L747
	.quad	.L747
	.quad	.L724
	.quad	.L725
	.quad	.L722
	.quad	.L721
	.text
.L722:
	.loc 1 3224 0
	movl	$1, %eax	#, D.24436
	jmp	.L717	#
.L725:
	.loc 1 3236 0
	movl	flag_unroll_loops(%rip), %eax	# flag_unroll_loops, flag_unroll_loops.306
	testl	%eax, %eax	# flag_unroll_loops.306
	je	.L726	#,
	.loc 1 3237 0
	movl	$0, %eax	#, D.24436
	jmp	.L717	#
.L726:
	.loc 1 3239 0
	movl	$1, %eax	#, D.24436
	jmp	.L717	#
.L721:
	.loc 1 3244 0
	movl	$0, %eax	#, D.24436
	jmp	.L717	#
.L723:
	.loc 1 3250 0
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.24439
	cmpq	-80(%rbp), %rax	# x, D.24439
	je	.L727	#,
	.loc 1 3250 0 is_stmt 0 discriminator 1
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.24439
	cmpq	-80(%rbp), %rax	# x, D.24439
	je	.L727	#,
	.loc 1 3251 0 is_stmt 1
	movq	global_rtl+40(%rip), %rax	# global_rtl, D.24439
	cmpq	-80(%rbp), %rax	# x, D.24439
	je	.L727	#,
	.loc 1 3251 0 is_stmt 0 discriminator 1
	movq	pic_offset_table_rtx(%rip), %rax	# pic_offset_table_rtx, pic_offset_table_rtx.307
	cmpq	%rax, -80(%rbp)	# pic_offset_table_rtx.307, x
	jne	.L728	#,
.L727:
	.loc 1 3252 0 is_stmt 1
	movq	cfun(%rip), %rax	# cfun, cfun.308
	movzbl	425(%rax), %eax	# *cfun.308_28, D.24440
	andl	$2, %eax	#, D.24440
	testb	%al, %al	# D.24440
	jne	.L728	#,
	.loc 1 3253 0
	movl	$1, %eax	#, D.24436
	jmp	.L717	#
.L728:
	.loc 1 3255 0
	movq	-72(%rbp), %rax	# loop, tmp120
	movq	160(%rax), %rax	# loop_10(D)->aux, D.24437
	movl	(%rax), %eax	# MEM[(struct loop_info *)_32].has_call, D.24436
	testl	%eax, %eax	# D.24436
	je	.L729	#,
	.loc 1 3256 0
	movq	-80(%rbp), %rax	# x, tmp121
	movl	8(%rax), %eax	# x_15(D)->fld[0].rtuint, D.24441
	cmpl	$52, %eax	#, D.24441
	ja	.L729	#,
	.loc 1 3256 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# x, tmp122
	movl	8(%rax), %eax	# x_15(D)->fld[0].rtuint, D.24441
	movl	%eax, %eax	# D.24441, tmp123
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.24442
	testb	%al, %al	# D.24442
	je	.L729	#,
	.loc 1 3257 0 is_stmt 1
	movl	$0, %eax	#, D.24436
	jmp	.L717	#
.L729:
	.loc 1 3259 0
	movq	-16(%rbp), %rax	# regs, tmp124
	movq	8(%rax), %rcx	# regs_13->array, D.24443
	movq	-80(%rbp), %rax	# x, tmp125
	movl	8(%rax), %eax	# x_15(D)->fld[0].rtuint, D.24441
	movl	%eax, %edx	# D.24441, D.24444
	movq	%rdx, %rax	# D.24444, tmp126
	addq	%rax, %rax	# tmp126
	addq	%rdx, %rax	# D.24444, tmp126
	salq	$3, %rax	#, tmp127
	addq	%rcx, %rax	# D.24443, D.24443
	movl	(%rax), %eax	# _42->set_in_loop, D.24436
	testl	%eax, %eax	# D.24436
	jns	.L730	#,
	.loc 1 3260 0
	movl	$2, %eax	#, D.24436
	jmp	.L717	#
.L730:
	.loc 1 3262 0
	movq	-16(%rbp), %rax	# regs, tmp128
	movq	8(%rax), %rcx	# regs_13->array, D.24443
	movq	-80(%rbp), %rax	# x, tmp129
	movl	8(%rax), %eax	# x_15(D)->fld[0].rtuint, D.24441
	movl	%eax, %edx	# D.24441, D.24444
	movq	%rdx, %rax	# D.24444, tmp130
	addq	%rax, %rax	# tmp130
	addq	%rdx, %rax	# D.24444, tmp130
	salq	$3, %rax	#, tmp131
	addq	%rcx, %rax	# D.24443, D.24443
	movl	(%rax), %eax	# _49->set_in_loop, D.24436
	testl	%eax, %eax	# D.24436
	sete	%al	#, D.24445
	movzbl	%al, %eax	# D.24445, D.24436
	jmp	.L717	#
.L724:
	.loc 1 3268 0
	movq	-80(%rbp), %rax	# x, tmp132
	movzbl	3(%rax), %eax	# *x_15(D), D.24440
	andl	$8, %eax	#, D.24440
	testb	%al, %al	# D.24440
	je	.L731	#,
	.loc 1 3269 0
	movl	$0, %eax	#, D.24436
	jmp	.L717	#
.L731:
	.loc 1 3272 0
	movq	-24(%rbp), %rax	# loop_info, tmp133
	movq	120(%rax), %rax	# loop_info_11->store_mems, tmp134
	movq	%rax, -32(%rbp)	# tmp134, mem_list_entry
	.loc 1 3273 0
	jmp	.L732	#
.L734:
	.loc 1 3275 0
	movq	-32(%rbp), %rax	# mem_list_entry, tmp135
	movq	8(%rax), %rax	# mem_list_entry_7->fld[0].rtx, D.24439
	movq	-80(%rbp), %rdx	# x, tmp136
	movl	$rtx_varies_p, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24439,
	call	true_dependence	#
	testl	%eax, %eax	# D.24436
	je	.L733	#,
	.loc 1 3277 0
	movl	$0, %eax	#, D.24436
	jmp	.L717	#
.L733:
	.loc 1 3279 0
	movq	-32(%rbp), %rax	# mem_list_entry, tmp137
	movq	16(%rax), %rax	# mem_list_entry_7->fld[1].rtx, tmp138
	movq	%rax, -32(%rbp)	# tmp138, mem_list_entry
.L732:
	.loc 1 3273 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, mem_list_entry
	jne	.L734	#,
	.loc 1 3284 0
	jmp	.L735	#
.L719:
	.loc 1 3288 0
	movq	-80(%rbp), %rax	# x, tmp139
	movzbl	3(%rax), %eax	# *x_15(D), D.24440
	andl	$8, %eax	#, D.24440
	testb	%al, %al	# D.24440
	je	.L736	#,
	.loc 1 3289 0
	movl	$0, %eax	#, D.24436
	jmp	.L717	#
.L736:
	.loc 1 3290 0
	jmp	.L735	#
.L747:
	.loc 1 3293 0
	nop
.L735:
	.loc 1 3296 0
	movl	-44(%rbp), %eax	# code, code.309
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp141
	movq	%rax, -8(%rbp)	# tmp141, fmt
	.loc 1 3297 0
	movl	-44(%rbp), %eax	# code, code.310
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.24440
	movzbl	%al, %eax	# D.24440, D.24436
	subl	$1, %eax	#, tmp143
	movl	%eax, -56(%rbp)	# tmp143, i
	jmp	.L737	#
.L746:
	.loc 1 3299 0
	movl	-56(%rbp), %eax	# i, tmp144
	movslq	%eax, %rdx	# tmp144, D.24446
	movq	-8(%rbp), %rax	# fmt, tmp145
	addq	%rdx, %rax	# D.24446, D.24447
	movzbl	(%rax), %eax	# *_71, D.24442
	cmpb	$101, %al	#, D.24442
	jne	.L738	#,
.LBB40:
	.loc 1 3301 0
	movq	-80(%rbp), %rax	# x, tmp146
	movl	-56(%rbp), %edx	# i, tmp148
	movslq	%edx, %rdx	# tmp148, tmp147
	movq	8(%rax,%rdx,8), %rdx	# x_15(D)->fld[i_1].rtx, D.24439
	movq	-72(%rbp), %rax	# loop, tmp149
	movq	%rdx, %rsi	# D.24439,
	movq	%rax, %rdi	# tmp149,
	call	loop_invariant_p	#
	movl	%eax, -40(%rbp)	# tmp150, tem
	.loc 1 3302 0
	cmpl	$0, -40(%rbp)	#, tem
	jne	.L739	#,
	.loc 1 3303 0
	movl	$0, %eax	#, D.24436
	jmp	.L717	#
.L739:
	.loc 1 3304 0
	cmpl	$2, -40(%rbp)	#, tem
	jne	.L740	#,
	.loc 1 3305 0
	movl	$1, -52(%rbp)	#, conditional
.LBE40:
	jmp	.L741	#
.L740:
	jmp	.L741	#
.L738:
	.loc 1 3307 0
	movl	-56(%rbp), %eax	# i, tmp151
	movslq	%eax, %rdx	# tmp151, D.24446
	movq	-8(%rbp), %rax	# fmt, tmp152
	addq	%rdx, %rax	# D.24446, D.24447
	movzbl	(%rax), %eax	# *_78, D.24442
	cmpb	$69, %al	#, D.24442
	jne	.L741	#,
.LBB41:
	.loc 1 3310 0
	movl	$0, -48(%rbp)	#, j
	jmp	.L742	#
.L745:
.LBB42:
	.loc 1 3312 0
	movq	-80(%rbp), %rax	# x, tmp153
	movl	-56(%rbp), %edx	# i, tmp155
	movslq	%edx, %rdx	# tmp155, tmp154
	movq	8(%rax,%rdx,8), %rax	# x_15(D)->fld[i_1].rtvec, D.24448
	movl	-48(%rbp), %edx	# j, tmp157
	movslq	%edx, %rdx	# tmp157, tmp156
	movq	8(%rax,%rdx,8), %rdx	# _83->elem, D.24439
	movq	-72(%rbp), %rax	# loop, tmp158
	movq	%rdx, %rsi	# D.24439,
	movq	%rax, %rdi	# tmp158,
	call	loop_invariant_p	#
	movl	%eax, -36(%rbp)	# tmp159, tem
	.loc 1 3313 0
	cmpl	$0, -36(%rbp)	#, tem
	jne	.L743	#,
	.loc 1 3314 0
	movl	$0, %eax	#, D.24436
	jmp	.L717	#
.L743:
	.loc 1 3315 0
	cmpl	$2, -36(%rbp)	#, tem
	jne	.L744	#,
	.loc 1 3316 0
	movl	$1, -52(%rbp)	#, conditional
.L744:
.LBE42:
	.loc 1 3310 0
	addl	$1, -48(%rbp)	#, j
.L742:
	.loc 1 3310 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# x, tmp160
	movl	-56(%rbp), %edx	# i, tmp162
	movslq	%edx, %rdx	# tmp162, tmp161
	movq	8(%rax,%rdx,8), %rax	# x_15(D)->fld[i_1].rtvec, D.24448
	movl	(%rax), %eax	# _81->num_elem, D.24436
	cmpl	-48(%rbp), %eax	# j, D.24436
	jg	.L745	#,
.L741:
.LBE41:
	.loc 1 3297 0 is_stmt 1
	subl	$1, -56(%rbp)	#, i
.L737:
	.loc 1 3297 0 is_stmt 0 discriminator 1
	cmpl	$0, -56(%rbp)	#, i
	jns	.L746	#,
	.loc 1 3322 0 is_stmt 1
	movl	-52(%rbp), %eax	# conditional, tmp163
	addl	$1, %eax	#, D.24436
.L717:
	.loc 1 3323 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE30:
	.size	loop_invariant_p, .-loop_invariant_p
	.type	consec_sets_invariant_p, @function
consec_sets_invariant_p:
.LFB31:
	.loc 1 3340 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -72(%rbp)	# loop, loop
	movq	%rsi, -80(%rbp)	# reg, reg
	movl	%edx, -84(%rbp)	# n_sets, n_sets
	movq	%rcx, -96(%rbp)	# insn, insn
	.loc 1 3341 0
	movq	-72(%rbp), %rax	# loop, tmp113
	movq	160(%rax), %rax	# loop_11(D)->aux, D.24450
	addq	$184, %rax	#, tmp114
	movq	%rax, -24(%rbp)	# tmp114, regs
	.loc 1 3342 0
	movq	-96(%rbp), %rax	# insn, tmp115
	movq	%rax, -32(%rbp)	# tmp115, p
	.loc 1 3343 0
	movq	-80(%rbp), %rax	# reg, tmp116
	movl	8(%rax), %eax	# reg_16(D)->fld[0].rtuint, tmp117
	movl	%eax, -44(%rbp)	# tmp117, regno
	.loc 1 3346 0
	movl	-84(%rbp), %eax	# n_sets, tmp121
	subl	$1, %eax	#, tmp120
	movl	%eax, -56(%rbp)	# tmp120, count
	.loc 1 3347 0
	movq	-24(%rbp), %rax	# regs, tmp122
	movq	8(%rax), %rcx	# regs_13->array, D.24451
	movl	-44(%rbp), %edx	# regno, D.24452
	movq	%rdx, %rax	# D.24452, tmp123
	addq	%rax, %rax	# tmp123
	addq	%rdx, %rax	# D.24452, tmp123
	salq	$3, %rax	#, tmp124
	addq	%rcx, %rax	# D.24451, D.24451
	movl	(%rax), %eax	# _23->set_in_loop, tmp125
	movl	%eax, -40(%rbp)	# tmp125, old
	.loc 1 3348 0
	movl	$0, -52(%rbp)	#, value
	.loc 1 3352 0
	cmpl	$127, -84(%rbp)	#, n_sets
	jne	.L749	#,
	.loc 1 3353 0
	movl	$0, %eax	#, D.24449
	jmp	.L750	#
.L749:
	.loc 1 3355 0
	movq	-24(%rbp), %rax	# regs, tmp126
	movq	8(%rax), %rcx	# regs_13->array, D.24451
	movl	-44(%rbp), %edx	# regno, D.24452
	movq	%rdx, %rax	# D.24452, tmp127
	addq	%rax, %rax	# tmp127
	addq	%rdx, %rax	# D.24452, tmp127
	salq	$3, %rax	#, tmp128
	addq	%rcx, %rax	# D.24451, D.24451
	movl	$0, (%rax)	#, _30->set_in_loop
	.loc 1 3357 0
	jmp	.L751	#
.L763:
.LBB43:
	.loc 1 3362 0
	movq	-32(%rbp), %rax	# p, tmp129
	movq	24(%rax), %rax	# p_2->fld[2].rtx, tmp130
	movq	%rax, -32(%rbp)	# tmp130, p
	.loc 1 3363 0
	movq	-32(%rbp), %rax	# p, tmp131
	movzwl	(%rax), %eax	# p_31->code, D.24453
	movzwl	%ax, %eax	# D.24453, tmp132
	movl	%eax, -36(%rbp)	# tmp132, code
	.loc 1 3366 0
	cmpl	$32, -36(%rbp)	#, code
	jne	.L752	#,
	.loc 1 3366 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# p, tmp133
	movl	$0, %edx	#,
	movl	$7, %esi	#,
	movq	%rax, %rdi	# tmp133,
	call	find_reg_note	#
	movq	%rax, -16(%rbp)	# tmp134, temp
	cmpq	$0, -16(%rbp)	#, temp
	je	.L752	#,
	.loc 1 3367 0 is_stmt 1
	movq	-16(%rbp), %rax	# temp, tmp135
	movq	8(%rax), %rax	# temp_34->fld[0].rtx, tmp136
	movq	%rax, -32(%rbp)	# tmp136, p
.L752:
	.loc 1 3369 0
	movl	$0, -48(%rbp)	#, this
	.loc 1 3370 0
	cmpl	$32, -36(%rbp)	#, code
	jne	.L753	#,
	.loc 1 3371 0
	movq	-32(%rbp), %rax	# p, tmp137
	movzwl	(%rax), %eax	# p_1->code, D.24453
	movzwl	%ax, %eax	# D.24453, D.24449
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24454
	cmpb	$105, %al	#, D.24454
	jne	.L754	#,
	.loc 1 3371 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# p, tmp139
	movq	32(%rax), %rax	# p_1->fld[3].rtx, D.24455
	movzwl	(%rax), %eax	# _40->code, D.24453
	cmpw	$47, %ax	#, D.24453
	jne	.L755	#,
	.loc 1 3371 0 discriminator 3
	movq	-32(%rbp), %rax	# p, tmp140
	movq	32(%rax), %rax	# p_1->fld[3].rtx, iftmp.312
	jmp	.L757	#
.L755:
	.loc 1 3371 0 discriminator 4
	movq	-32(%rbp), %rax	# p, tmp141
	movq	32(%rax), %rdx	# p_1->fld[3].rtx, D.24455
	movq	-32(%rbp), %rax	# p, tmp142
	movq	%rdx, %rsi	# D.24455,
	movq	%rax, %rdi	# tmp142,
	call	single_set_2	#
	jmp	.L757	#
.L754:
	.loc 1 3371 0 discriminator 2
	movl	$0, %eax	#, iftmp.311
.L757:
	.loc 1 3371 0 discriminator 5
	movq	%rax, -8(%rbp)	# iftmp.311, set
	cmpq	$0, -8(%rbp)	#, set
	je	.L753	#,
	.loc 1 3372 0 is_stmt 1
	movq	-8(%rbp), %rax	# set, tmp143
	movq	8(%rax), %rax	# set_47->fld[0].rtx, D.24455
	movzwl	(%rax), %eax	# _48->code, D.24453
	cmpw	$61, %ax	#, D.24453
	jne	.L753	#,
	.loc 1 3373 0
	movq	-8(%rbp), %rax	# set, tmp144
	movq	8(%rax), %rax	# set_47->fld[0].rtx, D.24455
	movl	8(%rax), %eax	# _50->fld[0].rtuint, D.24456
	cmpl	-44(%rbp), %eax	# regno, D.24456
	jne	.L753	#,
	.loc 1 3375 0
	movq	-8(%rbp), %rax	# set, tmp145
	movq	16(%rax), %rdx	# set_47->fld[1].rtx, D.24455
	movq	-72(%rbp), %rax	# loop, tmp146
	movq	%rdx, %rsi	# D.24455,
	movq	%rax, %rdi	# tmp146,
	call	loop_invariant_p	#
	movl	%eax, -48(%rbp)	# tmp147, this
	.loc 1 3376 0
	cmpl	$0, -48(%rbp)	#, this
	je	.L758	#,
	.loc 1 3377 0
	movl	-48(%rbp), %eax	# this, tmp148
	orl	%eax, -52(%rbp)	# tmp148, value
	jmp	.L753	#
.L758:
	.loc 1 3378 0
	movq	-32(%rbp), %rax	# p, tmp149
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp149,
	call	find_reg_note	#
	movq	%rax, -16(%rbp)	# tmp150, temp
	cmpq	$0, -16(%rbp)	#, temp
	je	.L753	#,
	.loc 1 3383 0
	movq	-16(%rbp), %rax	# temp, tmp151
	movq	8(%rax), %rax	# temp_55->fld[0].rtx, D.24455
	movzwl	(%rax), %eax	# _56->code, D.24453
	.loc 1 3384 0
	cmpw	$67, %ax	#, D.24453
	je	.L759	#,
	.loc 1 3383 0
	movq	-16(%rbp), %rax	# temp, tmp152
	movq	8(%rax), %rax	# temp_55->fld[0].rtx, D.24455
	movzwl	(%rax), %eax	# _58->code, D.24453
	cmpw	$68, %ax	#, D.24453
	je	.L759	#,
	.loc 1 3383 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# temp, tmp153
	movq	8(%rax), %rax	# temp_55->fld[0].rtx, D.24455
	movzwl	(%rax), %eax	# _60->code, D.24453
	cmpw	$54, %ax	#, D.24453
	je	.L759	#,
	movq	-16(%rbp), %rax	# temp, tmp154
	movq	8(%rax), %rax	# temp_55->fld[0].rtx, D.24455
	movzwl	(%rax), %eax	# _62->code, D.24453
	cmpw	$55, %ax	#, D.24453
	je	.L759	#,
	movq	-16(%rbp), %rax	# temp, tmp155
	movq	8(%rax), %rax	# temp_55->fld[0].rtx, D.24455
	movzwl	(%rax), %eax	# _64->code, D.24453
	cmpw	$58, %ax	#, D.24453
	je	.L759	#,
	movq	-16(%rbp), %rax	# temp, tmp156
	movq	8(%rax), %rax	# temp_55->fld[0].rtx, D.24455
	movzwl	(%rax), %eax	# _66->code, D.24453
	cmpw	$134, %ax	#, D.24453
	je	.L759	#,
	movq	-16(%rbp), %rax	# temp, tmp157
	movq	8(%rax), %rax	# temp_55->fld[0].rtx, D.24455
	movzwl	(%rax), %eax	# _68->code, D.24453
	cmpw	$56, %ax	#, D.24453
	je	.L759	#,
	movq	-16(%rbp), %rax	# temp, tmp158
	movq	8(%rax), %rax	# temp_55->fld[0].rtx, D.24455
	movzwl	(%rax), %eax	# _70->code, D.24453
	cmpw	$140, %ax	#, D.24453
	je	.L759	#,
	.loc 1 3384 0 is_stmt 1
	movq	-32(%rbp), %rax	# p, tmp159
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp159,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24455
	je	.L760	#,
	.loc 1 3385 0
	movq	-16(%rbp), %rax	# temp, tmp160
	movq	8(%rax), %rdx	# temp_55->fld[0].rtx, D.24455
	movq	-72(%rbp), %rax	# loop, tmp161
	movq	%rdx, %rsi	# D.24455,
	movq	%rax, %rdi	# tmp161,
	call	loop_invariant_p	#
	testl	%eax, %eax	# D.24449
	je	.L760	#,
.L759:
	.loc 1 3384 0 discriminator 1
	movl	$1, %eax	#, iftmp.313
	jmp	.L761	#
.L760:
	.loc 1 3384 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.313
.L761:
	.loc 1 3383 0 is_stmt 1
	movl	%eax, -48(%rbp)	# iftmp.313, this
	.loc 1 3386 0
	cmpl	$0, -48(%rbp)	#, this
	je	.L753	#,
	.loc 1 3387 0
	movl	-48(%rbp), %eax	# this, tmp162
	orl	%eax, -52(%rbp)	# tmp162, value
.L753:
	.loc 1 3390 0
	cmpl	$0, -48(%rbp)	#, this
	je	.L762	#,
	.loc 1 3391 0
	subl	$1, -56(%rbp)	#, count
	jmp	.L751	#
.L762:
	.loc 1 3392 0
	cmpl	$37, -36(%rbp)	#, code
	je	.L751	#,
	.loc 1 3394 0
	movq	-24(%rbp), %rax	# regs, tmp163
	movq	8(%rax), %rcx	# regs_13->array, D.24451
	movl	-44(%rbp), %edx	# regno, D.24452
	movq	%rdx, %rax	# D.24452, tmp164
	addq	%rax, %rax	# tmp164
	addq	%rdx, %rax	# D.24452, tmp164
	salq	$3, %rax	#, tmp165
	leaq	(%rcx,%rax), %rdx	#, D.24451
	movl	-40(%rbp), %eax	# old, tmp166
	movl	%eax, (%rdx)	# tmp166, _83->set_in_loop
	.loc 1 3395 0
	movl	$0, %eax	#, D.24449
	jmp	.L750	#
.L751:
.LBE43:
	.loc 1 3357 0 discriminator 1
	cmpl	$0, -56(%rbp)	#, count
	jg	.L763	#,
	.loc 1 3399 0
	movq	-24(%rbp), %rax	# regs, tmp167
	movq	8(%rax), %rcx	# regs_13->array, D.24451
	movl	-44(%rbp), %edx	# regno, D.24452
	movq	%rdx, %rax	# D.24452, tmp168
	addq	%rax, %rax	# tmp168
	addq	%rdx, %rax	# D.24452, tmp168
	salq	$3, %rax	#, tmp169
	leaq	(%rcx,%rax), %rdx	#, D.24451
	movl	-40(%rbp), %eax	# old, tmp170
	movl	%eax, (%rdx)	# tmp170, _88->set_in_loop
	.loc 1 3401 0
	movl	-52(%rbp), %eax	# value, tmp171
	andl	$2, %eax	#, D.24449
	addl	$1, %eax	#, D.24449
.L750:
	.loc 1 3402 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE31:
	.size	consec_sets_invariant_p, .-consec_sets_invariant_p
	.type	find_single_use_in_loop, @function
find_single_use_in_loop:
.LFB32:
	.loc 1 3446 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# regs, regs
	movq	%rsi, -48(%rbp)	# insn, insn
	movq	%rdx, -56(%rbp)	# x, x
	.loc 1 3447 0
	movq	-56(%rbp), %rax	# x, tmp98
	movzwl	(%rax), %eax	# x_4(D)->code, D.24457
	movzwl	%ax, %eax	# D.24457, tmp99
	movl	%eax, -12(%rbp)	# tmp99, code
	.loc 1 3448 0
	movl	-12(%rbp), %eax	# code, code.314
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp101
	movq	%rax, -8(%rbp)	# tmp101, fmt
	.loc 1 3451 0
	cmpl	$61, -12(%rbp)	#, code
	jne	.L765	#,
	.loc 1 3452 0
	movq	-40(%rbp), %rax	# regs, tmp102
	movq	8(%rax), %rcx	# regs_9(D)->array, D.24458
	movq	-56(%rbp), %rax	# x, tmp103
	movl	8(%rax), %eax	# x_4(D)->fld[0].rtuint, D.24459
	movl	%eax, %edx	# D.24459, D.24460
	movq	%rdx, %rax	# D.24460, tmp104
	addq	%rax, %rax	# tmp104
	addq	%rdx, %rax	# D.24460, tmp104
	salq	$3, %rax	#, tmp105
	addq	%rax, %rcx	# D.24460, D.24458
	.loc 1 3453 0
	movq	-40(%rbp), %rax	# regs, tmp106
	movq	8(%rax), %rsi	# regs_9(D)->array, D.24458
	movq	-56(%rbp), %rax	# x, tmp107
	movl	8(%rax), %eax	# x_4(D)->fld[0].rtuint, D.24459
	movl	%eax, %edx	# D.24459, D.24460
	movq	%rdx, %rax	# D.24460, tmp108
	addq	%rax, %rax	# tmp108
	addq	%rdx, %rax	# D.24460, tmp108
	salq	$3, %rax	#, tmp109
	addq	%rsi, %rax	# D.24458, D.24458
	movq	8(%rax), %rax	# _19->single_usage, D.24461
	.loc 1 3455 0
	testq	%rax, %rax	# D.24461
	je	.L766	#,
	.loc 1 3454 0
	movq	-40(%rbp), %rax	# regs, tmp110
	movq	8(%rax), %rsi	# regs_9(D)->array, D.24458
	movq	-56(%rbp), %rax	# x, tmp111
	movl	8(%rax), %eax	# x_4(D)->fld[0].rtuint, D.24459
	movl	%eax, %edx	# D.24459, D.24460
	movq	%rdx, %rax	# D.24460, tmp112
	addq	%rax, %rax	# tmp112
	addq	%rdx, %rax	# D.24460, tmp112
	salq	$3, %rax	#, tmp113
	addq	%rsi, %rax	# D.24458, D.24458
	movq	8(%rax), %rax	# _25->single_usage, D.24461
	cmpq	-48(%rbp), %rax	# insn, D.24461
	je	.L766	#,
	.loc 1 3455 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.315
	jmp	.L767	#
.L766:
	.loc 1 3455 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# insn, iftmp.315
.L767:
	.loc 1 3453 0 is_stmt 1
	movq	%rax, 8(%rcx)	# iftmp.315, _14->single_usage
	jmp	.L764	#
.L765:
	.loc 1 3457 0
	cmpl	$47, -12(%rbp)	#, code
	jne	.L769	#,
	.loc 1 3463 0
	movq	-56(%rbp), %rax	# x, tmp114
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.24461
	movzwl	(%rax), %eax	# _30->code, D.24457
	cmpw	$61, %ax	#, D.24457
	je	.L770	#,
	.loc 1 3464 0
	movq	-56(%rbp), %rax	# x, tmp115
	movq	8(%rax), %rdx	# x_4(D)->fld[0].rtx, D.24461
	movq	-48(%rbp), %rcx	# insn, tmp116
	movq	-40(%rbp), %rax	# regs, tmp117
	movq	%rcx, %rsi	# tmp116,
	movq	%rax, %rdi	# tmp117,
	call	find_single_use_in_loop	#
.L770:
	.loc 1 3465 0
	movq	-56(%rbp), %rax	# x, tmp118
	movq	16(%rax), %rdx	# x_4(D)->fld[1].rtx, D.24461
	movq	-48(%rbp), %rcx	# insn, tmp119
	movq	-40(%rbp), %rax	# regs, tmp120
	movq	%rcx, %rsi	# tmp119,
	movq	%rax, %rdi	# tmp120,
	call	find_single_use_in_loop	#
	jmp	.L764	#
.L769:
	.loc 1 3468 0
	movl	-12(%rbp), %eax	# code, code.316
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.24462
	movzbl	%al, %eax	# D.24462, D.24463
	subl	$1, %eax	#, tmp122
	movl	%eax, -20(%rbp)	# tmp122, i
	jmp	.L771	#
.L776:
	.loc 1 3470 0
	movl	-20(%rbp), %eax	# i, tmp123
	movslq	%eax, %rdx	# tmp123, D.24464
	movq	-8(%rbp), %rax	# fmt, tmp124
	addq	%rdx, %rax	# D.24464, D.24465
	movzbl	(%rax), %eax	# *_39, D.24466
	cmpb	$101, %al	#, D.24466
	jne	.L772	#,
	.loc 1 3470 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# x, tmp125
	movl	-20(%rbp), %edx	# i, tmp127
	movslq	%edx, %rdx	# tmp127, tmp126
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtx, D.24461
	testq	%rax, %rax	# D.24461
	je	.L772	#,
	.loc 1 3471 0 is_stmt 1
	movq	-56(%rbp), %rax	# x, tmp128
	movl	-20(%rbp), %edx	# i, tmp130
	movslq	%edx, %rdx	# tmp130, tmp129
	movq	8(%rax,%rdx,8), %rdx	# x_4(D)->fld[i_1].rtx, D.24461
	movq	-48(%rbp), %rcx	# insn, tmp131
	movq	-40(%rbp), %rax	# regs, tmp132
	movq	%rcx, %rsi	# tmp131,
	movq	%rax, %rdi	# tmp132,
	call	find_single_use_in_loop	#
	jmp	.L773	#
.L772:
	.loc 1 3472 0
	movl	-20(%rbp), %eax	# i, tmp133
	movslq	%eax, %rdx	# tmp133, D.24464
	movq	-8(%rbp), %rax	# fmt, tmp134
	addq	%rdx, %rax	# D.24464, D.24465
	movzbl	(%rax), %eax	# *_44, D.24466
	cmpb	$69, %al	#, D.24466
	jne	.L773	#,
	.loc 1 3473 0
	movq	-56(%rbp), %rax	# x, tmp135
	movl	-20(%rbp), %edx	# i, tmp137
	movslq	%edx, %rdx	# tmp137, tmp136
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtvec, D.24467
	movl	(%rax), %eax	# _46->num_elem, D.24463
	subl	$1, %eax	#, tmp138
	movl	%eax, -16(%rbp)	# tmp138, j
	jmp	.L774	#
.L775:
	.loc 1 3474 0 discriminator 2
	movq	-56(%rbp), %rax	# x, tmp139
	movl	-20(%rbp), %edx	# i, tmp141
	movslq	%edx, %rdx	# tmp141, tmp140
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_1].rtvec, D.24467
	movl	-16(%rbp), %edx	# j, tmp143
	movslq	%edx, %rdx	# tmp143, tmp142
	movq	8(%rax,%rdx,8), %rdx	# _49->elem, D.24461
	movq	-48(%rbp), %rcx	# insn, tmp144
	movq	-40(%rbp), %rax	# regs, tmp145
	movq	%rcx, %rsi	# tmp144,
	movq	%rax, %rdi	# tmp145,
	call	find_single_use_in_loop	#
	.loc 1 3473 0 discriminator 2
	subl	$1, -16(%rbp)	#, j
.L774:
	.loc 1 3473 0 is_stmt 0 discriminator 1
	cmpl	$0, -16(%rbp)	#, j
	jns	.L775	#,
.L773:
	.loc 1 3468 0 is_stmt 1
	subl	$1, -20(%rbp)	#, i
.L771:
	.loc 1 3468 0 is_stmt 0 discriminator 1
	cmpl	$0, -20(%rbp)	#, i
	jns	.L776	#,
.L764:
	.loc 1 3476 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE32:
	.size	find_single_use_in_loop, .-find_single_use_in_loop
	.type	count_one_set, @function
count_one_set:
.LFB33:
	.loc 1 3487 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# regs, regs
	movq	%rsi, -48(%rbp)	# insn, insn
	movq	%rdx, -56(%rbp)	# x, x
	movq	%rcx, -64(%rbp)	# last_set, last_set
	.loc 1 3488 0
	movq	-56(%rbp), %rax	# x, tmp148
	movzwl	(%rax), %eax	# x_12(D)->code, D.24468
	cmpw	$49, %ax	#, D.24468
	jne	.L778	#,
	.loc 1 3488 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# x, tmp149
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtx, D.24469
	movzwl	(%rax), %eax	# _14->code, D.24468
	cmpw	$61, %ax	#, D.24468
	jne	.L778	#,
	.loc 1 3491 0 is_stmt 1
	movq	-40(%rbp), %rax	# regs, tmp150
	movq	8(%rax), %rcx	# regs_16(D)->array, D.24470
	movq	-56(%rbp), %rax	# x, tmp151
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtx, D.24469
	movl	8(%rax), %eax	# _18->fld[0].rtuint, D.24471
	movl	%eax, %edx	# D.24471, D.24472
	movq	%rdx, %rax	# D.24472, tmp152
	addq	%rax, %rax	# tmp152
	addq	%rdx, %rax	# D.24472, tmp152
	salq	$3, %rax	#, tmp153
	addq	%rcx, %rax	# D.24470, D.24470
	movb	$1, 16(%rax)	#, _22->may_not_optimize
.L778:
	.loc 1 3493 0
	movq	-56(%rbp), %rax	# x, tmp154
	movzwl	(%rax), %eax	# x_12(D)->code, D.24468
	cmpw	$47, %ax	#, D.24468
	je	.L779	#,
	.loc 1 3493 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# x, tmp155
	movzwl	(%rax), %eax	# x_12(D)->code, D.24468
	cmpw	$49, %ax	#, D.24468
	jne	.L777	#,
.L779:
.LBB44:
	.loc 1 3495 0 is_stmt 1
	movq	-56(%rbp), %rax	# x, tmp156
	movq	8(%rax), %rax	# x_12(D)->fld[0].rtx, tmp157
	movq	%rax, -24(%rbp)	# tmp157, dest
	.loc 1 3496 0
	jmp	.L781	#
.L782:
	.loc 1 3500 0
	movq	-24(%rbp), %rax	# dest, tmp158
	movq	8(%rax), %rax	# dest_1->fld[0].rtx, tmp159
	movq	%rax, -24(%rbp)	# tmp159, dest
.L781:
	.loc 1 3496 0 discriminator 1
	movq	-24(%rbp), %rax	# dest, tmp160
	movzwl	(%rax), %eax	# dest_1->code, D.24468
	cmpw	$63, %ax	#, D.24468
	je	.L782	#,
	.loc 1 3497 0
	movq	-24(%rbp), %rax	# dest, tmp161
	movzwl	(%rax), %eax	# dest_1->code, D.24468
	cmpw	$133, %ax	#, D.24468
	je	.L782	#,
	.loc 1 3498 0
	movq	-24(%rbp), %rax	# dest, tmp162
	movzwl	(%rax), %eax	# dest_1->code, D.24468
	cmpw	$132, %ax	#, D.24468
	je	.L782	#,
	.loc 1 3499 0
	movq	-24(%rbp), %rax	# dest, tmp163
	movzwl	(%rax), %eax	# dest_1->code, D.24468
	cmpw	$64, %ax	#, D.24468
	je	.L782	#,
	.loc 1 3501 0
	movq	-24(%rbp), %rax	# dest, tmp164
	movzwl	(%rax), %eax	# dest_1->code, D.24468
	cmpw	$61, %ax	#, D.24468
	jne	.L777	#,
.LBB45:
	.loc 1 3504 0
	movq	-24(%rbp), %rax	# dest, tmp165
	movl	8(%rax), %eax	# dest_1->fld[0].rtuint, D.24471
	movl	%eax, -28(%rbp)	# D.24471, regno
	.loc 1 3505 0
	movl	$0, -32(%rbp)	#, i
	jmp	.L783	#
.L810:
	.loc 1 3511 0
	movq	-40(%rbp), %rax	# regs, tmp166
	movq	8(%rax), %rcx	# regs_16(D)->array, D.24470
	movl	-28(%rbp), %eax	# regno, tmp167
	movslq	%eax, %rdx	# tmp167, D.24472
	movq	%rdx, %rax	# D.24472, tmp168
	addq	%rax, %rax	# tmp168
	addq	%rdx, %rax	# D.24472, tmp168
	salq	$3, %rax	#, tmp169
	addq	%rcx, %rax	# D.24470, D.24470
	movl	(%rax), %eax	# _77->set_in_loop, D.24474
	testl	%eax, %eax	# D.24474
	jle	.L784	#,
	.loc 1 3512 0
	cmpq	$0, -64(%rbp)	#, last_set
	jne	.L784	#,
	.loc 1 3513 0
	movq	-40(%rbp), %rax	# regs, tmp170
	movq	8(%rax), %rcx	# regs_16(D)->array, D.24470
	movl	-32(%rbp), %eax	# i, tmp171
	movl	-28(%rbp), %edx	# regno, tmp172
	addl	%edx, %eax	# tmp172, D.24474
	movslq	%eax, %rdx	# D.24474, D.24472
	movq	%rdx, %rax	# D.24472, tmp173
	addq	%rax, %rax	# tmp173
	addq	%rdx, %rax	# D.24472, tmp173
	salq	$3, %rax	#, tmp174
	addq	%rcx, %rax	# D.24470, D.24470
	movb	$1, 16(%rax)	#, _84->may_not_optimize
.L784:
	.loc 1 3517 0
	movl	-28(%rbp), %eax	# regno, tmp175
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24472
	movq	-64(%rbp), %rax	# last_set, tmp176
	addq	%rdx, %rax	# D.24472, D.24476
	movq	(%rax), %rax	# *_87, D.24469
	testq	%rax, %rax	# D.24469
	je	.L785	#,
	.loc 1 3518 0
	movl	-28(%rbp), %eax	# regno, tmp177
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24472
	movq	-64(%rbp), %rax	# last_set, tmp178
	addq	%rdx, %rax	# D.24472, D.24476
	movq	(%rax), %rcx	# *_91, D.24469
	movq	-48(%rbp), %rdx	# insn, tmp179
	movq	-24(%rbp), %rax	# dest, tmp180
	movq	%rcx, %rsi	# D.24469,
	movq	%rax, %rdi	# tmp180,
	call	reg_used_between_p	#
	testl	%eax, %eax	# D.24474
	je	.L785	#,
	.loc 1 3519 0
	movq	-40(%rbp), %rax	# regs, tmp181
	movq	8(%rax), %rcx	# regs_16(D)->array, D.24470
	movl	-32(%rbp), %eax	# i, tmp182
	movl	-28(%rbp), %edx	# regno, tmp183
	addl	%edx, %eax	# tmp183, D.24474
	movslq	%eax, %rdx	# D.24474, D.24472
	movq	%rdx, %rax	# D.24472, tmp184
	addq	%rax, %rax	# tmp184
	addq	%rdx, %rax	# D.24472, tmp184
	salq	$3, %rax	#, tmp185
	addq	%rcx, %rax	# D.24470, D.24470
	movb	$1, 16(%rax)	#, _99->may_not_optimize
.L785:
	.loc 1 3520 0
	movq	-40(%rbp), %rax	# regs, tmp186
	movq	8(%rax), %rcx	# regs_16(D)->array, D.24470
	movl	-32(%rbp), %eax	# i, tmp187
	movl	-28(%rbp), %edx	# regno, tmp188
	addl	%edx, %eax	# tmp188, D.24474
	movslq	%eax, %rdx	# D.24474, D.24472
	movq	%rdx, %rax	# D.24472, tmp189
	addq	%rax, %rax	# tmp189
	addq	%rdx, %rax	# D.24472, tmp189
	salq	$3, %rax	#, tmp190
	addq	%rcx, %rax	# D.24470, D.24470
	movl	(%rax), %eax	# _104->set_in_loop, D.24474
	cmpl	$126, %eax	#, D.24474
	jg	.L786	#,
	.loc 1 3521 0
	movq	-40(%rbp), %rax	# regs, tmp191
	movq	8(%rax), %rcx	# regs_16(D)->array, D.24470
	movl	-32(%rbp), %eax	# i, tmp192
	movl	-28(%rbp), %edx	# regno, tmp193
	addl	%edx, %eax	# tmp193, D.24474
	movslq	%eax, %rdx	# D.24474, D.24472
	movq	%rdx, %rax	# D.24472, tmp194
	addq	%rax, %rax	# tmp194
	addq	%rdx, %rax	# D.24472, tmp194
	salq	$3, %rax	#, tmp195
	addq	%rcx, %rax	# D.24470, D.24470
	movl	(%rax), %edx	# _110->set_in_loop, D.24474
	addl	$1, %edx	#, D.24474
	movl	%edx, (%rax)	# D.24474, _110->set_in_loop
.L786:
	.loc 1 3522 0
	movl	-32(%rbp), %eax	# i, tmp196
	movl	-28(%rbp), %edx	# regno, tmp197
	addl	%edx, %eax	# tmp197, D.24474
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24472
	movq	-64(%rbp), %rax	# last_set, tmp198
	addq	%rax, %rdx	# tmp198, D.24476
	movq	-48(%rbp), %rax	# insn, tmp199
	movq	%rax, (%rdx)	# tmp199, *_116
	.loc 1 3505 0
	addl	$1, -32(%rbp)	#, i
.L783:
	.loc 1 3505 0 is_stmt 0 discriminator 1
	cmpl	$52, -28(%rbp)	#, regno
	jg	.L787	#,
	cmpl	$7, -28(%rbp)	#, regno
	jle	.L788	#,
	cmpl	$15, -28(%rbp)	#, regno
	jle	.L789	#,
.L788:
	.loc 1 3505 0 discriminator 2
	cmpl	$20, -28(%rbp)	#, regno
	jle	.L790	#,
	.loc 1 3505 0 discriminator 1
	cmpl	$28, -28(%rbp)	#, regno
	jle	.L789	#,
.L790:
	.loc 1 3505 0 discriminator 2
	cmpl	$44, -28(%rbp)	#, regno
	jle	.L791	#,
	.loc 1 3505 0 discriminator 1
	cmpl	$52, -28(%rbp)	#, regno
	jle	.L789	#,
.L791:
	.loc 1 3505 0 discriminator 2
	cmpl	$28, -28(%rbp)	#, regno
	jle	.L792	#,
	.loc 1 3505 0 discriminator 1
	cmpl	$36, -28(%rbp)	#, regno
	jg	.L792	#,
.L789:
	movq	-24(%rbp), %rax	# dest, tmp200
	movzbl	2(%rax), %eax	# dest_1->mode, D.24473
	movzbl	%al, %eax	# D.24473, D.24474
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24475
	cmpl	$5, %eax	#, D.24475
	je	.L793	#,
	.loc 1 3505 0 discriminator 2
	movq	-24(%rbp), %rax	# dest, tmp202
	movzbl	2(%rax), %eax	# dest_1->mode, D.24473
	movzbl	%al, %eax	# D.24473, D.24474
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24475
	cmpl	$6, %eax	#, D.24475
	jne	.L794	#,
.L793:
	.loc 1 3505 0 discriminator 1
	movl	$2, %eax	#, iftmp.319
	jmp	.L795	#
.L794:
	movl	$1, %eax	#, iftmp.319
.L795:
	.loc 1 3505 0 discriminator 3
	jmp	.L796	#
.L792:
	.loc 1 3505 0 discriminator 2
	movq	-24(%rbp), %rax	# dest, tmp204
	movzbl	2(%rax), %eax	# dest_1->mode, D.24473
	cmpb	$18, %al	#, D.24473
	jne	.L797	#,
	.loc 1 3505 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.322
	andl	$33554432, %eax	#, D.24474
	testl	%eax, %eax	# D.24474
	je	.L798	#,
	movl	$2, %eax	#, iftmp.321
	jmp	.L809	#
.L798:
	.loc 1 3505 0 discriminator 2
	movl	$3, %eax	#, iftmp.321
	jmp	.L809	#
.L797:
	movq	-24(%rbp), %rax	# dest, tmp205
	movzbl	2(%rax), %eax	# dest_1->mode, D.24473
	cmpb	$24, %al	#, D.24473
	jne	.L801	#,
	.loc 1 3505 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.325
	andl	$33554432, %eax	#, D.24474
	testl	%eax, %eax	# D.24474
	je	.L802	#,
	movl	$4, %eax	#, iftmp.324
	jmp	.L809	#
.L802:
	.loc 1 3505 0 discriminator 2
	movl	$6, %eax	#, iftmp.324
	jmp	.L809	#
.L801:
	movq	-24(%rbp), %rax	# dest, tmp206
	movzbl	2(%rax), %eax	# dest_1->mode, D.24473
	movzbl	%al, %eax	# D.24473, D.24474
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24473
	movzbl	%al, %edx	# D.24473, D.24474
	movl	target_flags(%rip), %eax	# target_flags, target_flags.327
	andl	$33554432, %eax	#, D.24474
	testl	%eax, %eax	# D.24474
	je	.L805	#,
	.loc 1 3505 0 discriminator 1
	movl	$8, %eax	#, iftmp.326
	jmp	.L806	#
.L805:
	.loc 1 3505 0 discriminator 2
	movl	$4, %eax	#, iftmp.326
.L806:
	.loc 1 3505 0 discriminator 3
	addl	%edx, %eax	# D.24474, D.24474
	subl	$1, %eax	#, D.24474
	movl	target_flags(%rip), %edx	# target_flags, target_flags.329
	andl	$33554432, %edx	#, D.24474
	testl	%edx, %edx	# D.24474
	je	.L807	#,
	.loc 1 3505 0 discriminator 1
	movl	$8, %ebx	#, iftmp.328
	jmp	.L808	#
.L807:
	.loc 1 3505 0 discriminator 2
	movl	$4, %ebx	#, iftmp.328
.L808:
	.loc 1 3505 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.328
.L796:
	jmp	.L809	#
.L787:
	.loc 1 3505 0 discriminator 2
	movl	$1, %eax	#, iftmp.317
.L809:
	.loc 1 3505 0 discriminator 3
	cmpl	-32(%rbp), %eax	# i, iftmp.317
	jg	.L810	#,
.L777:
.LBE45:
.LBE44:
	.loc 1 3526 0 is_stmt 1
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE33:
	.size	count_one_set, .-count_one_set
	.type	loop_reg_used_before_p, @function
loop_reg_used_before_p:
.LFB34:
	.loc 1 3541 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# loop, loop
	movq	%rsi, -32(%rbp)	# set, set
	movq	%rdx, -40(%rbp)	# insn, insn
	.loc 1 3542 0
	movq	-32(%rbp), %rax	# set, tmp67
	movq	8(%rax), %rax	# set_4(D)->fld[0].rtx, tmp68
	movq	%rax, -8(%rbp)	# tmp68, reg
	.loc 1 3547 0
	movq	-24(%rbp), %rax	# loop, tmp69
	movq	216(%rax), %rax	# loop_6(D)->scan_start, tmp70
	movq	%rax, -16(%rbp)	# tmp70, p
	jmp	.L812	#
.L816:
	.loc 1 3549 0
	movq	-16(%rbp), %rax	# p, tmp71
	movzwl	(%rax), %eax	# p_2->code, D.24478
	movzwl	%ax, %eax	# D.24478, D.24477
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24479
	cmpb	$105, %al	#, D.24479
	jne	.L813	#,
	.loc 1 3549 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# p, tmp73
	movq	32(%rax), %rdx	# p_2->fld[3].rtx, D.24480
	movq	-8(%rbp), %rax	# reg, tmp74
	movq	%rdx, %rsi	# D.24480,
	movq	%rax, %rdi	# tmp74,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.24477
	je	.L813	#,
	.loc 1 3550 0 is_stmt 1
	movl	$1, %eax	#, D.24477
	jmp	.L814	#
.L813:
	.loc 1 3552 0
	movq	-24(%rbp), %rax	# loop, tmp75
	movq	200(%rax), %rax	# loop_6(D)->end, D.24480
	cmpq	-16(%rbp), %rax	# p, D.24480
	jne	.L815	#,
	.loc 1 3553 0
	movq	-24(%rbp), %rax	# loop, tmp76
	movq	192(%rax), %rax	# loop_6(D)->start, tmp77
	movq	%rax, -16(%rbp)	# tmp77, p
.L815:
	.loc 1 3547 0
	movq	-16(%rbp), %rax	# p, tmp78
	movq	24(%rax), %rax	# p_1->fld[2].rtx, tmp79
	movq	%rax, -16(%rbp)	# tmp79, p
.L812:
	.loc 1 3547 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# p, tmp80
	cmpq	-40(%rbp), %rax	# insn, tmp80
	jne	.L816	#,
	.loc 1 3556 0 is_stmt 1
	movl	$0, %eax	#, D.24477
.L814:
	.loc 1 3557 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE34:
	.size	loop_reg_used_before_p, .-loop_reg_used_before_p
	.type	check_store, @function
check_store:
.LFB35:
	.loc 1 3600 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# x, x
	movq	%rsi, -32(%rbp)	# pat, pat
	movq	%rdx, -40(%rbp)	# data, data
	.loc 1 3601 0
	movq	-40(%rbp), %rax	# data, tmp63
	movq	%rax, -8(%rbp)	# tmp63, d
	.loc 1 3603 0
	movq	-24(%rbp), %rax	# x, tmp64
	movzwl	(%rax), %eax	# x_3(D)->code, D.24481
	cmpw	$66, %ax	#, D.24481
	jne	.L817	#,
	.loc 1 3603 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# x, tmp65
	movq	8(%rax), %rdx	# x_3(D)->fld[0].rtx, D.24482
	movq	-8(%rbp), %rax	# d, tmp66
	movq	(%rax), %rax	# d_2->mem_address, D.24482
	movq	%rdx, %rsi	# D.24482,
	movq	%rax, %rdi	# D.24482,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24483
	je	.L817	#,
	.loc 1 3604 0 is_stmt 1
	movq	-8(%rbp), %rax	# d, tmp67
	movl	$1, 8(%rax)	#, d_2->mem_write
.L817:
	.loc 1 3605 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE35:
	.size	check_store, .-check_store
	.type	rtx_equal_for_prefetch_p, @function
rtx_equal_for_prefetch_p:
.LFB36:
	.loc 1 3617 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# y, y
	.loc 1 3620 0
	movq	-40(%rbp), %rax	# x, tmp109
	movzwl	(%rax), %eax	# x_5(D)->code, D.24485
	movzwl	%ax, %eax	# D.24485, tmp110
	movl	%eax, -12(%rbp)	# tmp110, code
	.loc 1 3623 0
	movq	-40(%rbp), %rax	# x, tmp111
	cmpq	-48(%rbp), %rax	# y, tmp111
	jne	.L820	#,
	.loc 1 3624 0
	movl	$1, %eax	#, D.24484
	jmp	.L821	#
.L820:
	.loc 1 3625 0
	movq	-48(%rbp), %rax	# y, tmp112
	movzwl	(%rax), %eax	# y_8(D)->code, D.24485
	movzwl	%ax, %eax	# D.24485, D.24486
	cmpl	-12(%rbp), %eax	# code, D.24486
	je	.L822	#,
	.loc 1 3626 0
	movl	$0, %eax	#, D.24484
	jmp	.L821	#
.L822:
	.loc 1 3628 0
	movq	-40(%rbp), %rax	# x, tmp113
	movzwl	(%rax), %eax	# x_5(D)->code, D.24485
	movzwl	%ax, %eax	# D.24485, tmp114
	movl	%eax, -12(%rbp)	# tmp114, code
	.loc 1 3630 0
	movl	-12(%rbp), %eax	# code, code.330
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24487
	cmpb	$99, %al	#, D.24487
	jne	.L823	#,
	.loc 1 3632 0
	movq	-48(%rbp), %rax	# y, tmp116
	movq	8(%rax), %rdx	# y_8(D)->fld[0].rtx, D.24488
	movq	-40(%rbp), %rax	# x, tmp117
	movq	8(%rax), %rax	# x_5(D)->fld[0].rtx, D.24488
	movq	%rdx, %rsi	# D.24488,
	movq	%rax, %rdi	# D.24488,
	call	rtx_equal_for_prefetch_p	#
	.loc 1 3634 0
	testl	%eax, %eax	# D.24484
	je	.L824	#,
	.loc 1 3633 0
	movq	-48(%rbp), %rax	# y, tmp118
	movq	16(%rax), %rdx	# y_8(D)->fld[1].rtx, D.24488
	movq	-40(%rbp), %rax	# x, tmp119
	movq	16(%rax), %rax	# x_5(D)->fld[1].rtx, D.24488
	movq	%rdx, %rsi	# D.24488,
	movq	%rax, %rdi	# D.24488,
	call	rtx_equal_for_prefetch_p	#
	testl	%eax, %eax	# D.24484
	jne	.L825	#,
.L824:
	.loc 1 3634 0 discriminator 1
	movq	-48(%rbp), %rax	# y, tmp120
	movq	16(%rax), %rdx	# y_8(D)->fld[1].rtx, D.24488
	movq	-40(%rbp), %rax	# x, tmp121
	movq	8(%rax), %rax	# x_5(D)->fld[0].rtx, D.24488
	movq	%rdx, %rsi	# D.24488,
	movq	%rax, %rdi	# D.24488,
	call	rtx_equal_for_prefetch_p	#
	testl	%eax, %eax	# D.24484
	je	.L826	#,
	.loc 1 3635 0
	movq	-48(%rbp), %rax	# y, tmp122
	movq	8(%rax), %rdx	# y_8(D)->fld[0].rtx, D.24488
	movq	-40(%rbp), %rax	# x, tmp123
	movq	16(%rax), %rax	# x_5(D)->fld[1].rtx, D.24488
	movq	%rdx, %rsi	# D.24488,
	movq	%rax, %rdi	# D.24488,
	call	rtx_equal_for_prefetch_p	#
	testl	%eax, %eax	# D.24484
	je	.L826	#,
.L825:
	.loc 1 3634 0
	movl	$1, %eax	#, iftmp.331
	jmp	.L827	#
.L826:
	.loc 1 3634 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.331
.L827:
	.loc 1 3632 0 is_stmt 1
	jmp	.L821	#
.L823:
	.loc 1 3640 0
	movl	-12(%rbp), %eax	# code, code.332
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp125
	movq	%rax, -8(%rbp)	# tmp125, fmt
	.loc 1 3641 0
	movl	-12(%rbp), %eax	# code, code.333
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.24489
	movzbl	%al, %eax	# D.24489, D.24484
	subl	$1, %eax	#, tmp127
	movl	%eax, -20(%rbp)	# tmp127, i
	jmp	.L828	#
.L847:
	.loc 1 3643 0
	movl	-20(%rbp), %eax	# i, tmp128
	movslq	%eax, %rdx	# tmp128, D.24490
	movq	-8(%rbp), %rax	# fmt, tmp129
	addq	%rdx, %rax	# D.24490, D.24491
	movzbl	(%rax), %eax	# *_39, D.24487
	movsbl	%al, %eax	# D.24487, D.24484
	cmpl	$105, %eax	#, D.24484
	je	.L830	#,
	cmpl	$105, %eax	#, D.24484
	jg	.L831	#,
	cmpl	$69, %eax	#, D.24484
	je	.L832	#,
	cmpl	$101, %eax	#, D.24484
	je	.L833	#,
	cmpl	$48, %eax	#, D.24484
	je	.L848	#,
	jmp	.L829	#
.L831:
	cmpl	$117, %eax	#, D.24484
	je	.L849	#,
	cmpl	$119, %eax	#, D.24484
	je	.L836	#,
	cmpl	$115, %eax	#, D.24484
	je	.L837	#,
	jmp	.L829	#
.L836:
	.loc 1 3646 0
	movq	-40(%rbp), %rax	# x, tmp130
	movl	-20(%rbp), %edx	# i, tmp132
	movslq	%edx, %rdx	# tmp132, tmp131
	movq	8(%rax,%rdx,8), %rcx	# x_5(D)->fld[i_1].rtwint, D.24492
	movq	-48(%rbp), %rax	# y, tmp133
	movl	-20(%rbp), %edx	# i, tmp135
	movslq	%edx, %rdx	# tmp135, tmp134
	movq	8(%rax,%rdx,8), %rax	# y_8(D)->fld[i_1].rtwint, D.24492
	cmpq	%rax, %rcx	# D.24492, D.24492
	je	.L838	#,
	.loc 1 3647 0
	movl	$0, %eax	#, D.24484
	jmp	.L821	#
.L838:
	.loc 1 3648 0
	jmp	.L839	#
.L830:
	.loc 1 3651 0
	movq	-40(%rbp), %rax	# x, tmp136
	movl	-20(%rbp), %edx	# i, tmp138
	movslq	%edx, %rdx	# tmp138, tmp137
	movl	8(%rax,%rdx,8), %ecx	# x_5(D)->fld[i_1].rtint, D.24484
	movq	-48(%rbp), %rax	# y, tmp139
	movl	-20(%rbp), %edx	# i, tmp141
	movslq	%edx, %rdx	# tmp141, tmp140
	movl	8(%rax,%rdx,8), %eax	# y_8(D)->fld[i_1].rtint, D.24484
	cmpl	%eax, %ecx	# D.24484, D.24484
	je	.L840	#,
	.loc 1 3652 0
	movl	$0, %eax	#, D.24484
	jmp	.L821	#
.L840:
	.loc 1 3653 0
	jmp	.L839	#
.L832:
	.loc 1 3657 0
	movq	-40(%rbp), %rax	# x, tmp142
	movl	-20(%rbp), %edx	# i, tmp144
	movslq	%edx, %rdx	# tmp144, tmp143
	movq	8(%rax,%rdx,8), %rax	# x_5(D)->fld[i_1].rtvec, D.24493
	movl	(%rax), %ecx	# _48->num_elem, D.24484
	movq	-48(%rbp), %rax	# y, tmp145
	movl	-20(%rbp), %edx	# i, tmp147
	movslq	%edx, %rdx	# tmp147, tmp146
	movq	8(%rax,%rdx,8), %rax	# y_8(D)->fld[i_1].rtvec, D.24493
	movl	(%rax), %eax	# _50->num_elem, D.24484
	cmpl	%eax, %ecx	# D.24484, D.24484
	je	.L841	#,
	.loc 1 3658 0
	movl	$0, %eax	#, D.24484
	jmp	.L821	#
.L841:
	.loc 1 3661 0
	movl	$0, -16(%rbp)	#, j
	jmp	.L842	#
.L844:
	.loc 1 3663 0
	movq	-48(%rbp), %rax	# y, tmp148
	movl	-20(%rbp), %edx	# i, tmp150
	movslq	%edx, %rdx	# tmp150, tmp149
	movq	8(%rax,%rdx,8), %rax	# y_8(D)->fld[i_1].rtvec, D.24493
	.loc 1 3662 0
	movl	-16(%rbp), %edx	# j, tmp152
	movslq	%edx, %rdx	# tmp152, tmp151
	movq	8(%rax,%rdx,8), %rdx	# _56->elem, D.24488
	movq	-40(%rbp), %rax	# x, tmp153
	movl	-20(%rbp), %ecx	# i, tmp155
	movslq	%ecx, %rcx	# tmp155, tmp154
	movq	8(%rax,%rcx,8), %rax	# x_5(D)->fld[i_1].rtvec, D.24493
	movl	-16(%rbp), %ecx	# j, tmp157
	movslq	%ecx, %rcx	# tmp157, tmp156
	movq	8(%rax,%rcx,8), %rax	# _58->elem, D.24488
	movq	%rdx, %rsi	# D.24488,
	movq	%rax, %rdi	# D.24488,
	call	rtx_equal_for_prefetch_p	#
	testl	%eax, %eax	# D.24484
	jne	.L843	#,
	.loc 1 3664 0
	movl	$0, %eax	#, D.24484
	jmp	.L821	#
.L843:
	.loc 1 3661 0
	addl	$1, -16(%rbp)	#, j
.L842:
	.loc 1 3661 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp158
	movl	-20(%rbp), %edx	# i, tmp160
	movslq	%edx, %rdx	# tmp160, tmp159
	movq	8(%rax,%rdx,8), %rax	# x_5(D)->fld[i_1].rtvec, D.24493
	movl	(%rax), %eax	# _54->num_elem, D.24484
	cmpl	-16(%rbp), %eax	# j, D.24484
	jg	.L844	#,
	.loc 1 3665 0 is_stmt 1
	jmp	.L839	#
.L833:
	.loc 1 3668 0
	movq	-48(%rbp), %rax	# y, tmp161
	movl	-20(%rbp), %edx	# i, tmp163
	movslq	%edx, %rdx	# tmp163, tmp162
	movq	8(%rax,%rdx,8), %rdx	# y_8(D)->fld[i_1].rtx, D.24488
	movq	-40(%rbp), %rax	# x, tmp164
	movl	-20(%rbp), %ecx	# i, tmp166
	movslq	%ecx, %rcx	# tmp166, tmp165
	movq	8(%rax,%rcx,8), %rax	# x_5(D)->fld[i_1].rtx, D.24488
	movq	%rdx, %rsi	# D.24488,
	movq	%rax, %rdi	# D.24488,
	call	rtx_equal_for_prefetch_p	#
	testl	%eax, %eax	# D.24484
	jne	.L845	#,
	.loc 1 3669 0
	movl	$0, %eax	#, D.24484
	jmp	.L821	#
.L845:
	.loc 1 3670 0
	jmp	.L839	#
.L837:
	.loc 1 3673 0
	movq	-48(%rbp), %rax	# y, tmp167
	movl	-20(%rbp), %edx	# i, tmp169
	movslq	%edx, %rdx	# tmp169, tmp168
	movq	8(%rax,%rdx,8), %rdx	# y_8(D)->fld[i_1].rtstr, D.24491
	movq	-40(%rbp), %rax	# x, tmp170
	movl	-20(%rbp), %ecx	# i, tmp172
	movslq	%ecx, %rcx	# tmp172, tmp171
	movq	8(%rax,%rcx,8), %rax	# x_5(D)->fld[i_1].rtstr, D.24491
	movq	%rdx, %rsi	# D.24491,
	movq	%rax, %rdi	# D.24491,
	call	strcmp	#
	testl	%eax, %eax	# D.24484
	je	.L846	#,
	.loc 1 3674 0
	movl	$0, %eax	#, D.24484
	jmp	.L821	#
.L846:
	.loc 1 3675 0
	jmp	.L839	#
.L829:
	.loc 1 3688 0
	movl	$__FUNCTION__.13302, %edx	#,
	movl	$3688, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L848:
	.loc 1 3682 0
	nop
	jmp	.L839	#
.L849:
	.loc 1 3679 0
	nop
.L839:
	.loc 1 3641 0
	subl	$1, -20(%rbp)	#, i
.L828:
	.loc 1 3641 0 is_stmt 0 discriminator 1
	cmpl	$0, -20(%rbp)	#, i
	jns	.L847	#,
	.loc 1 3691 0 is_stmt 1
	movl	$1, %eax	#, D.24484
.L821:
	.loc 1 3692 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE36:
	.size	rtx_equal_for_prefetch_p, .-rtx_equal_for_prefetch_p
	.type	remove_constant_addition, @function
remove_constant_addition:
.LFB37:
	.loc 1 3700 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# x, x
	.loc 1 3701 0
	movq	$0, -16(%rbp)	#, addval
	.loc 1 3702 0
	movq	-24(%rbp), %rax	# x, tmp87
	movq	(%rax), %rax	# *x_4(D), tmp88
	movq	%rax, -8(%rbp)	# tmp88, exp
	.loc 1 3705 0
	movq	-8(%rbp), %rax	# exp, tmp89
	movzwl	(%rax), %eax	# exp_5->code, D.24496
	cmpw	$58, %ax	#, D.24496
	jne	.L851	#,
	.loc 1 3707 0
	movq	-8(%rbp), %rax	# exp, tmp90
	movq	8(%rax), %rax	# exp_5->fld[0].rtx, D.24497
	movzwl	(%rax), %eax	# _7->code, D.24496
	cmpw	$75, %ax	#, D.24496
	jne	.L852	#,
	.loc 1 3708 0
	movq	-8(%rbp), %rax	# exp, tmp91
	movq	8(%rax), %rax	# exp_5->fld[0].rtx, D.24497
	movq	8(%rax), %rax	# _9->fld[0].rtx, D.24497
	movzwl	(%rax), %eax	# _10->code, D.24496
	cmpw	$68, %ax	#, D.24496
	jne	.L852	#,
	.loc 1 3709 0
	movq	-8(%rbp), %rax	# exp, tmp92
	movq	8(%rax), %rax	# exp_5->fld[0].rtx, D.24497
	movq	16(%rax), %rax	# _12->fld[1].rtx, D.24497
	movzwl	(%rax), %eax	# _13->code, D.24496
	cmpw	$54, %ax	#, D.24496
	jne	.L852	#,
	.loc 1 3711 0
	movq	-8(%rbp), %rax	# exp, tmp93
	movq	8(%rax), %rax	# exp_5->fld[0].rtx, D.24497
	movq	8(%rax), %rdx	# _15->fld[0].rtx, D.24497
	movq	-24(%rbp), %rax	# x, tmp94
	movq	%rdx, (%rax)	# D.24497, *x_4(D)
	.loc 1 3712 0
	movq	-8(%rbp), %rax	# exp, tmp95
	movq	8(%rax), %rax	# exp_5->fld[0].rtx, D.24497
	movq	16(%rax), %rax	# _17->fld[1].rtx, D.24497
	movq	8(%rax), %rax	# _18->fld[0].rtwint, D.24495
	jmp	.L853	#
.L852:
	.loc 1 3714 0
	movl	$0, %eax	#, D.24495
	jmp	.L853	#
.L851:
	.loc 1 3717 0
	movq	-8(%rbp), %rax	# exp, tmp96
	movzwl	(%rax), %eax	# exp_5->code, D.24496
	cmpw	$54, %ax	#, D.24496
	jne	.L854	#,
	.loc 1 3719 0
	movq	-8(%rbp), %rax	# exp, tmp97
	movq	8(%rax), %rax	# exp_5->fld[0].rtwint, tmp98
	movq	%rax, -16(%rbp)	# tmp98, addval
	.loc 1 3720 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.24497
	movq	-24(%rbp), %rax	# x, tmp99
	movq	%rdx, (%rax)	# D.24497, *x_4(D)
	jmp	.L855	#
.L854:
	.loc 1 3724 0
	movq	-8(%rbp), %rax	# exp, tmp100
	movzwl	(%rax), %eax	# exp_5->code, D.24496
	cmpw	$75, %ax	#, D.24496
	jne	.L855	#,
	.loc 1 3726 0
	movq	-8(%rbp), %rax	# exp, tmp101
	addq	$8, %rax	#, D.24498
	movq	%rax, %rdi	# D.24498,
	call	remove_constant_addition	#
	addq	%rax, -16(%rbp)	# D.24495, addval
	.loc 1 3727 0
	movq	-8(%rbp), %rax	# exp, tmp102
	addq	$16, %rax	#, D.24498
	movq	%rax, %rdi	# D.24498,
	call	remove_constant_addition	#
	addq	%rax, -16(%rbp)	# D.24495, addval
	.loc 1 3731 0
	movq	-8(%rbp), %rax	# exp, tmp103
	movq	8(%rax), %rdx	# exp_5->fld[0].rtx, D.24497
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24497
	cmpq	%rax, %rdx	# D.24497, D.24497
	jne	.L856	#,
	.loc 1 3732 0
	movq	-8(%rbp), %rax	# exp, tmp104
	movq	16(%rax), %rdx	# exp_5->fld[1].rtx, D.24497
	movq	-24(%rbp), %rax	# x, tmp105
	movq	%rdx, (%rax)	# D.24497, *x_4(D)
	jmp	.L855	#
.L856:
	.loc 1 3733 0
	movq	-8(%rbp), %rax	# exp, tmp106
	movq	16(%rax), %rdx	# exp_5->fld[1].rtx, D.24497
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24497
	cmpq	%rax, %rdx	# D.24497, D.24497
	jne	.L855	#,
	.loc 1 3734 0
	movq	-8(%rbp), %rax	# exp, tmp107
	movq	8(%rax), %rdx	# exp_5->fld[0].rtx, D.24497
	movq	-24(%rbp), %rax	# x, tmp108
	movq	%rdx, (%rax)	# D.24497, *x_4(D)
.L855:
	.loc 1 3737 0
	movq	-16(%rbp), %rax	# addval, D.24495
.L853:
	.loc 1 3738 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE37:
	.size	remove_constant_addition, .-remove_constant_addition
	.section	.rodata
	.align 8
.LC21:
	.string	"Prefetch: ignoring loop - has call.\n"
	.align 8
.LC22:
	.string	"Prefetch: ignoring loop - not enought iterations.\n"
	.align 8
.LC23:
	.string	"Prefetch: biv %i ignored: non-constant addition at insn %i:"
	.align 8
.LC24:
	.string	"Prefetch: biv %i ignored: maybe_multiple at insn %i:"
.LC25:
	.string	"Prefetch: Ignoring giv at %i\n"
	.align 8
.LC26:
	.string	"Maximal number of prefetches exceeded.\n"
.LC27:
	.string	"Prefetch insn %i address: "
.LC28:
	.string	" Index: "
.LC29:
	.string	"%ld"
.LC30:
	.string	" stride: "
.LC31:
	.string	"yes"
.LC32:
	.string	"no"
.LC33:
	.string	" read/write "
.LC34:
	.string	" read only "
	.align 8
.LC35:
	.string	" density: %i%% total_bytes: %u%sin loop: %s before: %s\n"
	.align 8
.LC36:
	.string	"Real prefetches needed: %i (write: %i)\n"
	.text
	.type	emit_prefetch_instructions, @function
emit_prefetch_instructions:
.LFB38:
	.loc 1 3763 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$5832, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -5832(%rbp)	# loop, loop
	.loc 1 3764 0
	movl	$0, -5820(%rbp)	#, num_prefetches
	.loc 1 3765 0
	movl	$0, -5816(%rbp)	#, num_real_prefetches
	.loc 1 3766 0
	movl	$0, -5812(%rbp)	#, num_real_write_prefetches
	.loc 1 3772 0
	movq	-5832(%rbp), %rax	# loop, tmp335
	movq	160(%rax), %rax	# loop_35(D)->aux, D.24499
	addq	$208, %rax	#, tmp336
	movq	%rax, -5728(%rbp)	# tmp336, ivs
	.loc 1 3774 0
	movl	x86_prefetch_sse(%rip), %eax	# x86_prefetch_sse, x86_prefetch_sse.334
	testl	%eax, %eax	# x86_prefetch_sse.334
	jne	.L858	#,
	.loc 1 3774 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.335
	andl	$1048576, %eax	#, D.24500
	testl	%eax, %eax	# D.24500
	jne	.L858	#,
	.loc 1 3775 0 is_stmt 1
	jmp	.L857	#
.L858:
	.loc 1 3779 0
	movq	-5832(%rbp), %rax	# loop, tmp337
	movq	160(%rax), %rax	# loop_35(D)->aux, D.24499
	movl	(%rax), %eax	# MEM[(struct loop_info *)_41].has_call, D.24500
	testl	%eax, %eax	# D.24500
	je	.L860	#,
	.loc 1 3781 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.336
	testq	%rax, %rax	# loop_dump_stream.336
	je	.L861	#,
	.loc 1 3782 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.337
	movq	%rax, %rcx	# loop_dump_stream.337,
	movl	$36, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC21, %edi	#,
	call	fwrite	#
	.loc 1 3784 0
	jmp	.L857	#
.L861:
	jmp	.L857	#
.L860:
	.loc 1 3788 0
	movq	-5832(%rbp), %rax	# loop, tmp338
	movq	160(%rax), %rax	# loop_35(D)->aux, D.24499
	movq	96(%rax), %rax	# MEM[(struct loop_info *)_45].n_iterations, D.24501
	.loc 1 3787 0
	testq	%rax, %rax	# D.24501
	je	.L862	#,
	.loc 1 3789 0
	movq	-5832(%rbp), %rax	# loop, tmp339
	movq	160(%rax), %rax	# loop_35(D)->aux, D.24499
	movq	96(%rax), %rax	# MEM[(struct loop_info *)_47].n_iterations, D.24501
	cmpq	$32, %rax	#, D.24501
	ja	.L862	#,
	.loc 1 3791 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.338
	testq	%rax, %rax	# loop_dump_stream.338
	je	.L863	#,
	.loc 1 3792 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.339
	movq	%rax, %rcx	# loop_dump_stream.339,
	movl	$50, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC22, %edi	#,
	call	fwrite	#
	.loc 1 3794 0
	jmp	.L857	#
.L863:
	jmp	.L857	#
.L862:
	.loc 1 3799 0
	movq	-5728(%rbp), %rax	# ivs, tmp340
	movq	16(%rax), %rax	# ivs_37->list, tmp341
	movq	%rax, -5768(%rbp)	# tmp341, bl
	jmp	.L864	#
.L891:
.LBB46:
	.loc 1 3801 0
	movq	-5768(%rbp), %rax	# bl, tmp342
	movq	8(%rax), %rax	# bl_14->biv, tmp343
	movq	%rax, -5720(%rbp)	# tmp343, biv
	.loc 1 3802 0
	movl	$0, -5804(%rbp)	#, basestride
	.loc 1 3804 0
	movq	-5720(%rbp), %rax	# biv, tmp344
	movq	%rax, -5752(%rbp)	# tmp344, biv1
	.loc 1 3808 0
	jmp	.L865	#
.L871:
	.loc 1 3816 0
	movq	-5720(%rbp), %rax	# biv, tmp345
	movq	72(%rax), %rax	# biv_52->add_val, D.24502
	movzwl	(%rax), %eax	# _55->code, D.24503
	cmpw	$54, %ax	#, D.24503
	je	.L866	#,
	.loc 1 3818 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.340
	testq	%rax, %rax	# loop_dump_stream.340
	je	.L867	#,
	.loc 1 3822 0
	movq	-5720(%rbp), %rax	# biv, tmp346
	movq	(%rax), %rax	# biv_52->insn, D.24502
	.loc 1 3820 0
	movl	8(%rax), %ecx	# _58->fld[0].rtint, D.24500
	.loc 1 3822 0
	movq	-5720(%rbp), %rax	# biv, tmp347
	movq	16(%rax), %rax	# biv_52->src_reg, D.24502
	.loc 1 3820 0
	movl	8(%rax), %edx	# _60->fld[0].rtuint, D.24504
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.341
	movl	$.LC23, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.341,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 3823 0
	movq	-5720(%rbp), %rax	# biv, tmp348
	movq	72(%rax), %rdx	# biv_52->add_val, D.24502
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.342
	movq	%rdx, %rsi	# D.24502,
	movq	%rax, %rdi	# loop_dump_stream.342,
	call	print_rtl	#
	.loc 1 3824 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.343
	movq	%rax, %rsi	# loop_dump_stream.343,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 3826 0
	jmp	.L868	#
.L867:
	jmp	.L868	#
.L866:
	.loc 1 3829 0
	movq	-5720(%rbp), %rax	# biv, tmp349
	movzbl	100(%rax), %eax	# *biv_52, D.24505
	andl	$32, %eax	#, D.24505
	testb	%al, %al	# D.24505
	je	.L869	#,
	.loc 1 3831 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.344
	testq	%rax, %rax	# loop_dump_stream.344
	je	.L870	#,
	.loc 1 3835 0
	movq	-5720(%rbp), %rax	# biv, tmp350
	movq	(%rax), %rax	# biv_52->insn, D.24502
	.loc 1 3833 0
	movl	8(%rax), %ecx	# _69->fld[0].rtint, D.24500
	.loc 1 3835 0
	movq	-5720(%rbp), %rax	# biv, tmp351
	movq	16(%rax), %rax	# biv_52->src_reg, D.24502
	.loc 1 3833 0
	movl	8(%rax), %edx	# _71->fld[0].rtuint, D.24504
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.345
	movl	$.LC24, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.345,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 3836 0
	movq	-5720(%rbp), %rax	# biv, tmp352
	movq	72(%rax), %rdx	# biv_52->add_val, D.24502
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.346
	movq	%rdx, %rsi	# D.24502,
	movq	%rax, %rdi	# loop_dump_stream.346,
	call	print_rtl	#
	.loc 1 3837 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.347
	movq	%rax, %rsi	# loop_dump_stream.347,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 3839 0
	jmp	.L868	#
.L870:
	jmp	.L868	#
.L869:
	.loc 1 3842 0
	movq	-5752(%rbp), %rax	# biv1, tmp353
	movq	72(%rax), %rax	# biv1_16->add_val, D.24502
	movq	8(%rax), %rax	# _77->fld[0].rtwint, D.24506
	movl	%eax, %edx	# D.24506, D.24507
	movl	-5804(%rbp), %eax	# basestride, basestride.348
	addl	%edx, %eax	# D.24507, D.24507
	movl	%eax, -5804(%rbp)	# D.24507, basestride
	.loc 1 3843 0
	movq	-5752(%rbp), %rax	# biv1, tmp354
	movq	128(%rax), %rax	# biv1_16->next_iv, tmp355
	movq	%rax, -5752(%rbp)	# tmp355, biv1
.L865:
	.loc 1 3808 0 discriminator 1
	cmpq	$0, -5752(%rbp)	#, biv1
	jne	.L871	#,
.L868:
	.loc 1 3846 0
	cmpq	$0, -5752(%rbp)	#, biv1
	jne	.L872	#,
	.loc 1 3846 0 is_stmt 0 discriminator 1
	cmpl	$0, -5804(%rbp)	#, basestride
	jne	.L873	#,
.L872:
	.loc 1 3847 0 is_stmt 1
	jmp	.L874	#
.L873:
	.loc 1 3849 0
	movq	-5768(%rbp), %rax	# bl, tmp356
	movq	24(%rax), %rax	# bl_14->giv, tmp357
	movq	%rax, -5760(%rbp)	# tmp357, iv
	jmp	.L875	#
.L890:
.LBB47:
	.loc 1 3853 0
	movq	$0, -5712(%rbp)	#, index
	.loc 1 3854 0
	movl	$1, -5800(%rbp)	#, add
	.loc 1 3857 0
	movq	-5760(%rbp), %rax	# iv, tmp358
	movl	48(%rax), %eax	# iv_15->mode, D.24508
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24505
	movzbl	%al, %eax	# D.24505, tmp360
	movl	%eax, -5788(%rbp)	# tmp360, size
	.loc 1 3861 0
	movq	-5760(%rbp), %rax	# iv, tmp361
	movl	24(%rax), %eax	# iv_15->giv_type, D.24509
	testl	%eax, %eax	# D.24509
	jne	.L876	#,
	.loc 1 3864 0
	movq	-5760(%rbp), %rax	# iv, tmp362
	movq	64(%rax), %rax	# iv_15->mult_val, D.24502
	movzwl	(%rax), %eax	# _92->code, D.24503
	cmpw	$54, %ax	#, D.24503
	jne	.L876	#,
	.loc 1 3868 0
	movq	-5760(%rbp), %rax	# iv, tmp363
	movq	64(%rax), %rax	# iv_15->mult_val, D.24502
	movq	8(%rax), %rdx	# _94->fld[0].rtwint, D.24506
	movl	-5804(%rbp), %eax	# basestride, tmp364
	cltq
	imulq	%rdx, %rax	# D.24506, tmp365
	movq	%rax, -5704(%rbp)	# tmp365, stride
	.loc 1 3867 0
	cmpq	$0, -5704(%rbp)	#, stride
	js	.L876	#,
	.loc 1 3871 0
	cmpq	$4096, -5704(%rbp)	#, stride
	jg	.L876	#,
	.loc 1 3875 0
	movq	-5760(%rbp), %rax	# iv, tmp366
	movq	72(%rax), %rdx	# iv_15->add_val, D.24502
	movq	-5832(%rbp), %rax	# loop, tmp367
	movq	%rdx, %rsi	# D.24502,
	movq	%rax, %rdi	# tmp367,
	call	loop_invariant_p	#
	testl	%eax, %eax	# D.24500
	je	.L876	#,
	.loc 1 3878 0
	movq	-5760(%rbp), %rax	# iv, tmp368
	movzbl	100(%rax), %eax	# *iv_15, D.24505
	andl	$32, %eax	#, D.24505
	testb	%al, %al	# D.24505
	je	.L877	#,
.L876:
	.loc 1 3880 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.349
	testq	%rax, %rax	# loop_dump_stream.349
	je	.L879	#,
	.loc 1 3882 0
	movq	-5760(%rbp), %rax	# iv, tmp369
	movq	(%rax), %rax	# iv_15->insn, D.24502
	.loc 1 3881 0
	movl	8(%rax), %edx	# _166->fld[0].rtint, D.24500
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.350
	movl	$.LC25, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.350,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 3883 0
	jmp	.L879	#
.L877:
	.loc 1 3888 0
	movq	$0, -5712(%rbp)	#, index
	.loc 1 3890 0
	movq	-5760(%rbp), %rax	# iv, tmp370
	movq	72(%rax), %rax	# iv_15->add_val, D.24502
	movq	%rax, %rdi	# D.24502,
	call	copy_rtx	#
	movq	%rax, -5776(%rbp)	# address.351, address
	.loc 1 3891 0
	movq	-5768(%rbp), %rax	# bl, tmp371
	movq	40(%rax), %rax	# bl_14->initial_value, D.24502
	movq	%rax, %rdi	# D.24502,
	call	copy_rtx	#
	movq	%rax, -5696(%rbp)	# tmp372, temp
	.loc 1 3893 0
	movq	-5776(%rbp), %rcx	# address, address.352
	movl	target_flags(%rip), %eax	# target_flags, target_flags.354
	andl	$33554432, %eax	#, D.24500
	testl	%eax, %eax	# D.24500
	je	.L880	#,
	.loc 1 3893 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.353
	jmp	.L881	#
.L880:
	.loc 1 3893 0 discriminator 2
	movl	$4, %eax	#, iftmp.353
.L881:
	.loc 1 3893 0 discriminator 3
	movq	-5696(%rbp), %rdx	# temp, tmp373
	movl	%eax, %esi	# iftmp.353,
	movl	$75, %edi	#,
	call	simplify_gen_binary	#
	movq	%rax, -5776(%rbp)	# address.355, address
	.loc 1 3894 0 is_stmt 1 discriminator 3
	leaq	-5776(%rbp), %rax	#, tmp374
	movq	%rax, %rdi	# tmp374,
	call	remove_constant_addition	#
	movq	%rax, -5712(%rbp)	# tmp375, index
	.loc 1 3896 0 discriminator 3
	movl	-5788(%rbp), %eax	# size, tmp376
	cltq
	addq	%rax, -5712(%rbp)	# D.24506, index
	.loc 1 3897 0 discriminator 3
	movl	$0, -5624(%rbp)	#, d.mem_write
	.loc 1 3898 0 discriminator 3
	movq	-5760(%rbp), %rax	# iv, tmp377
	movq	40(%rax), %rax	# iv_15->location, D.24510
	movq	(%rax), %rax	# *_116, D.24502
	movq	%rax, -5632(%rbp)	# D.24502, d.mem_address
	.loc 1 3902 0 discriminator 3
	movq	-5760(%rbp), %rax	# iv, tmp378
	movzbl	100(%rax), %eax	# *iv_15, D.24505
	andl	$16, %eax	#, D.24505
	testb	%al, %al	# D.24505
	je	.L882	#,
	.loc 1 3903 0
	movq	-5760(%rbp), %rax	# iv, tmp379
	movq	(%rax), %rax	# iv_15->insn, D.24502
	movq	32(%rax), %rax	# _120->fld[3].rtx, D.24502
	leaq	-5632(%rbp), %rdx	#, tmp380
	movl	$check_store, %esi	#,
	movq	%rax, %rdi	# D.24502,
	call	note_stores	#
.L882:
	.loc 1 3907 0
	movl	$0, -5808(%rbp)	#, i
	jmp	.L883	#
.L887:
	.loc 1 3908 0
	movl	-5808(%rbp), %eax	# i, tmp382
	cltq
	salq	$3, %rax	#, tmp384
	leaq	0(,%rax,8), %rdx	#, tmp385
	subq	%rax, %rdx	# tmp383, tmp385
	leaq	-16(%rbp), %rax	#, tmp1003
	addq	%rdx, %rax	# tmp385, tmp386
	subq	$5584, %rax	#, tmp387
	movq	(%rax), %rdx	# info[i_10].base_address, D.24502
	movq	-5776(%rbp), %rax	# address, address.356
	movq	%rdx, %rsi	# D.24502,
	movq	%rax, %rdi	# address.356,
	call	rtx_equal_for_prefetch_p	#
	testl	%eax, %eax	# D.24500
	je	.L884	#,
	.loc 1 3909 0
	movl	-5808(%rbp), %eax	# i, tmp389
	cltq
	salq	$3, %rax	#, tmp391
	leaq	0(,%rax,8), %rdx	#, tmp392
	subq	%rax, %rdx	# tmp390, tmp392
	leaq	-16(%rbp), %rax	#, tmp1004
	addq	%rdx, %rax	# tmp392, tmp393
	subq	$5568, %rax	#, tmp394
	movq	(%rax), %rax	# info[i_10].stride, D.24506
	cmpq	-5704(%rbp), %rax	# stride, D.24506
	jne	.L884	#,
	.loc 1 3918 0
	movl	-5808(%rbp), %eax	# i, tmp396
	cltq
	salq	$3, %rax	#, tmp398
	leaq	0(,%rax,8), %rdx	#, tmp399
	subq	%rax, %rdx	# tmp397, tmp399
	leaq	-16(%rbp), %rax	#, tmp1005
	addq	%rdx, %rax	# tmp399, tmp400
	subq	$5576, %rax	#, tmp401
	movq	(%rax), %rax	# info[i_10].index, D.24506
	cmpq	-5712(%rbp), %rax	# index, D.24506
	jg	.L885	#,
	.loc 1 3918 0 is_stmt 0 discriminator 1
	movl	-5808(%rbp), %eax	# i, tmp403
	cltq
	salq	$3, %rax	#, tmp405
	leaq	0(,%rax,8), %rdx	#, tmp406
	subq	%rax, %rdx	# tmp404, tmp406
	leaq	-16(%rbp), %rax	#, tmp1006
	addq	%rdx, %rax	# tmp406, tmp407
	subq	$5576, %rax	#, tmp408
	movq	(%rax), %rax	# info[i_10].index, D.24506
	movq	-5712(%rbp), %rdx	# index, tmp409
	subq	%rax, %rdx	# D.24506, D.24506
	movq	%rdx, %rax	# D.24506, D.24506
	cmpq	$4095, %rax	#, D.24506
	jg	.L885	#,
	.loc 1 3920 0 is_stmt 1
	movl	-5808(%rbp), %eax	# i, tmp411
	cltq
	salq	$3, %rax	#, tmp413
	leaq	0(,%rax,8), %rdx	#, tmp414
	subq	%rax, %rdx	# tmp412, tmp414
	leaq	-16(%rbp), %rax	#, tmp1008
	addq	%rdx, %rax	# tmp414, tmp415
	subq	$5552, %rax	#, tmp416
	movzbl	(%rax), %eax	#, tmp419
	andl	$1, %eax	#, D.24511
	movl	%eax, %edx	# D.24511, D.24512
	movl	-5624(%rbp), %eax	# d.mem_write, D.24500
	orl	%edx, %eax	# D.24512, D.24512
	andl	$1, %eax	#, D.24511
	movl	%eax, %ecx	# D.24511, D.24511
	movl	-5808(%rbp), %eax	# i, tmp421
	cltq
	salq	$3, %rax	#, tmp423
	leaq	0(,%rax,8), %rdx	#, tmp424
	subq	%rax, %rdx	# tmp422, tmp424
	leaq	-16(%rbp), %rax	#, tmp1010
	addq	%rdx, %rax	# tmp424, tmp425
	subq	$5552, %rax	#, tmp426
	andl	$1, %ecx	#, tmp428
	movzbl	(%rax), %edx	# info[i_10].write, tmp429
	andl	$-2, %edx	#, tmp430
	orl	%ecx, %edx	# tmp428, tmp431
	movb	%dl, (%rax)	# tmp431, info[i_10].write
	.loc 1 3921 0
	movl	-5808(%rbp), %eax	# i, tmp433
	cltq
	salq	$3, %rax	#, tmp435
	leaq	0(,%rax,8), %rdx	#, tmp436
	subq	%rax, %rdx	# tmp434, tmp436
	leaq	-16(%rbp), %rax	#, tmp1011
	addq	%rdx, %rax	# tmp436, tmp437
	subq	$5568, %rax	#, tmp438
	movl	8(%rax), %edx	# info[i_10].bytes_accesed, D.24504
	movl	-5788(%rbp), %eax	# size, size.357
	leal	(%rdx,%rax), %ecx	#, D.24504
	movl	-5808(%rbp), %eax	# i, tmp440
	cltq
	salq	$3, %rax	#, tmp442
	leaq	0(,%rax,8), %rdx	#, tmp443
	subq	%rax, %rdx	# tmp441, tmp443
	leaq	-16(%rbp), %rax	#, tmp1012
	addq	%rdx, %rax	# tmp443, tmp444
	subq	$5568, %rax	#, tmp445
	movl	%ecx, 8(%rax)	# D.24504, info[i_10].bytes_accesed
	.loc 1 3922 0
	movl	-5808(%rbp), %eax	# i, tmp447
	cltq
	salq	$3, %rax	#, tmp449
	leaq	0(,%rax,8), %rdx	#, tmp450
	subq	%rax, %rdx	# tmp448, tmp450
	leaq	-16(%rbp), %rax	#, tmp1013
	addq	%rdx, %rax	# tmp450, tmp451
	leaq	-5576(%rax), %rdx	#, tmp452
	movq	-5712(%rbp), %rax	# index, tmp453
	movq	%rax, (%rdx)	# tmp453, info[i_10].index
	.loc 1 3923 0
	movl	-5808(%rbp), %eax	# i, tmp455
	cltq
	salq	$3, %rax	#, tmp457
	leaq	0(,%rax,8), %rdx	#, tmp458
	subq	%rax, %rdx	# tmp456, tmp458
	leaq	-16(%rbp), %rax	#, tmp1014
	addq	%rdx, %rax	# tmp458, tmp459
	leaq	-5592(%rax), %rdx	#, tmp460
	movq	-5760(%rbp), %rax	# iv, tmp461
	movq	%rax, (%rdx)	# tmp461, info[i_10].giv
	.loc 1 3924 0
	movl	-5808(%rbp), %eax	# i, tmp463
	cltq
	salq	$3, %rax	#, tmp465
	leaq	0(,%rax,8), %rdx	#, tmp466
	subq	%rax, %rdx	# tmp464, tmp466
	leaq	-16(%rbp), %rax	#, tmp1015
	addq	%rdx, %rax	# tmp466, tmp467
	leaq	-5600(%rax), %rdx	#, tmp468
	movq	-5768(%rbp), %rax	# bl, tmp469
	movq	%rax, (%rdx)	# tmp469, info[i_10].class
	.loc 1 3925 0
	movq	-5776(%rbp), %rcx	# address, address.358
	movl	-5820(%rbp), %eax	# num_prefetches, tmp471
	cltq
	salq	$3, %rax	#, tmp473
	leaq	0(,%rax,8), %rdx	#, tmp474
	subq	%rax, %rdx	# tmp472, tmp474
	leaq	-16(%rbp), %rax	#, tmp1016
	addq	%rdx, %rax	# tmp474, tmp475
	subq	$5584, %rax	#, tmp476
	movq	%rcx, (%rax)	# address.358, info[num_prefetches_3].base_address
	.loc 1 3926 0
	movl	$0, -5800(%rbp)	#, add
	.loc 1 3927 0
	jmp	.L886	#
.L885:
	.loc 1 3930 0
	movl	-5808(%rbp), %eax	# i, tmp478
	cltq
	salq	$3, %rax	#, tmp480
	leaq	0(,%rax,8), %rdx	#, tmp481
	subq	%rax, %rdx	# tmp479, tmp481
	leaq	-16(%rbp), %rax	#, tmp1017
	addq	%rdx, %rax	# tmp481, tmp482
	subq	$5576, %rax	#, tmp483
	movq	(%rax), %rax	# info[i_10].index, D.24506
	cmpq	-5712(%rbp), %rax	# index, D.24506
	jle	.L884	#,
	.loc 1 3930 0 is_stmt 0 discriminator 1
	movl	-5808(%rbp), %eax	# i, tmp485
	cltq
	salq	$3, %rax	#, tmp487
	leaq	0(,%rax,8), %rdx	#, tmp488
	subq	%rax, %rdx	# tmp486, tmp488
	leaq	-16(%rbp), %rax	#, tmp1018
	addq	%rdx, %rax	# tmp488, tmp489
	subq	$5576, %rax	#, tmp490
	movq	(%rax), %rax	# info[i_10].index, D.24506
	subq	-5712(%rbp), %rax	# index, D.24506
	cmpq	$4095, %rax	#, D.24506
	jg	.L884	#,
	.loc 1 3932 0 is_stmt 1
	movl	-5808(%rbp), %eax	# i, tmp492
	cltq
	salq	$3, %rax	#, tmp494
	leaq	0(,%rax,8), %rdx	#, tmp495
	subq	%rax, %rdx	# tmp493, tmp495
	leaq	-16(%rbp), %rax	#, tmp1019
	addq	%rdx, %rax	# tmp495, tmp496
	subq	$5552, %rax	#, tmp497
	movzbl	(%rax), %eax	#, tmp500
	andl	$1, %eax	#, D.24511
	movl	%eax, %edx	# D.24511, D.24512
	movl	-5624(%rbp), %eax	# d.mem_write, D.24500
	orl	%edx, %eax	# D.24512, D.24512
	andl	$1, %eax	#, D.24511
	movl	%eax, %ecx	# D.24511, D.24511
	movl	-5808(%rbp), %eax	# i, tmp502
	cltq
	salq	$3, %rax	#, tmp504
	leaq	0(,%rax,8), %rdx	#, tmp505
	subq	%rax, %rdx	# tmp503, tmp505
	leaq	-16(%rbp), %rax	#, tmp1021
	addq	%rdx, %rax	# tmp505, tmp506
	subq	$5552, %rax	#, tmp507
	andl	$1, %ecx	#, tmp509
	movzbl	(%rax), %edx	# info[i_10].write, tmp510
	andl	$-2, %edx	#, tmp511
	orl	%ecx, %edx	# tmp509, tmp512
	movb	%dl, (%rax)	# tmp512, info[i_10].write
	.loc 1 3933 0
	movl	-5808(%rbp), %eax	# i, tmp514
	cltq
	salq	$3, %rax	#, tmp516
	leaq	0(,%rax,8), %rdx	#, tmp517
	subq	%rax, %rdx	# tmp515, tmp517
	leaq	-16(%rbp), %rax	#, tmp1022
	addq	%rdx, %rax	# tmp517, tmp518
	subq	$5568, %rax	#, tmp519
	movl	8(%rax), %edx	# info[i_10].bytes_accesed, D.24504
	movl	-5788(%rbp), %eax	# size, size.359
	leal	(%rdx,%rax), %ecx	#, D.24504
	movl	-5808(%rbp), %eax	# i, tmp521
	cltq
	salq	$3, %rax	#, tmp523
	leaq	0(,%rax,8), %rdx	#, tmp524
	subq	%rax, %rdx	# tmp522, tmp524
	leaq	-16(%rbp), %rax	#, tmp1023
	addq	%rdx, %rax	# tmp524, tmp525
	subq	$5568, %rax	#, tmp526
	movl	%ecx, 8(%rax)	# D.24504, info[i_10].bytes_accesed
	.loc 1 3934 0
	movl	$0, -5800(%rbp)	#, add
	.loc 1 3935 0
	jmp	.L886	#
.L884:
	.loc 1 3907 0
	addl	$1, -5808(%rbp)	#, i
.L883:
	.loc 1 3907 0 is_stmt 0 discriminator 1
	movl	-5808(%rbp), %eax	# i, tmp527
	cmpl	-5820(%rbp), %eax	# num_prefetches, tmp527
	jl	.L887	#,
.L886:
	.loc 1 3940 0 is_stmt 1
	cmpl	$0, -5800(%rbp)	#, add
	je	.L879	#,
	.loc 1 3942 0
	movl	-5820(%rbp), %eax	# num_prefetches, tmp529
	cltq
	salq	$3, %rax	#, tmp531
	leaq	0(,%rax,8), %rdx	#, tmp532
	subq	%rax, %rdx	# tmp530, tmp532
	leaq	-16(%rbp), %rax	#, tmp1024
	addq	%rdx, %rax	# tmp532, tmp533
	leaq	-5592(%rax), %rdx	#, tmp534
	movq	-5760(%rbp), %rax	# iv, tmp535
	movq	%rax, (%rdx)	# tmp535, info[num_prefetches_3].giv
	.loc 1 3943 0
	movl	-5820(%rbp), %eax	# num_prefetches, tmp537
	cltq
	salq	$3, %rax	#, tmp539
	leaq	0(,%rax,8), %rdx	#, tmp540
	subq	%rax, %rdx	# tmp538, tmp540
	leaq	-16(%rbp), %rax	#, tmp1025
	addq	%rdx, %rax	# tmp540, tmp541
	leaq	-5600(%rax), %rdx	#, tmp542
	movq	-5768(%rbp), %rax	# bl, tmp543
	movq	%rax, (%rdx)	# tmp543, info[num_prefetches_3].class
	.loc 1 3944 0
	movl	-5820(%rbp), %eax	# num_prefetches, tmp545
	cltq
	salq	$3, %rax	#, tmp547
	leaq	0(,%rax,8), %rdx	#, tmp548
	subq	%rax, %rdx	# tmp546, tmp548
	leaq	-16(%rbp), %rax	#, tmp1026
	addq	%rdx, %rax	# tmp548, tmp549
	leaq	-5576(%rax), %rdx	#, tmp550
	movq	-5712(%rbp), %rax	# index, tmp551
	movq	%rax, (%rdx)	# tmp551, info[num_prefetches_3].index
	.loc 1 3945 0
	movl	-5820(%rbp), %eax	# num_prefetches, tmp553
	cltq
	salq	$3, %rax	#, tmp555
	leaq	0(,%rax,8), %rdx	#, tmp556
	subq	%rax, %rdx	# tmp554, tmp556
	leaq	-16(%rbp), %rax	#, tmp1027
	addq	%rdx, %rax	# tmp556, tmp557
	leaq	-5568(%rax), %rdx	#, tmp558
	movq	-5704(%rbp), %rax	# stride, tmp559
	movq	%rax, (%rdx)	# tmp559, info[num_prefetches_3].stride
	.loc 1 3946 0
	movq	-5776(%rbp), %rcx	# address, address.360
	movl	-5820(%rbp), %eax	# num_prefetches, tmp561
	cltq
	salq	$3, %rax	#, tmp563
	leaq	0(,%rax,8), %rdx	#, tmp564
	subq	%rax, %rdx	# tmp562, tmp564
	leaq	-16(%rbp), %rax	#, tmp1028
	addq	%rdx, %rax	# tmp564, tmp565
	subq	$5584, %rax	#, tmp566
	movq	%rcx, (%rax)	# address.360, info[num_prefetches_3].base_address
	.loc 1 3947 0
	movl	-5624(%rbp), %eax	# d.mem_write, D.24500
	andl	$1, %eax	#, D.24511
	movl	%eax, %ecx	# D.24511, D.24511
	movl	-5820(%rbp), %eax	# num_prefetches, tmp568
	cltq
	salq	$3, %rax	#, tmp570
	leaq	0(,%rax,8), %rdx	#, tmp571
	subq	%rax, %rdx	# tmp569, tmp571
	leaq	-16(%rbp), %rax	#, tmp1030
	addq	%rdx, %rax	# tmp571, tmp572
	subq	$5552, %rax	#, tmp573
	andl	$1, %ecx	#, tmp575
	movzbl	(%rax), %edx	# info[num_prefetches_3].write, tmp576
	andl	$-2, %edx	#, tmp577
	orl	%ecx, %edx	# tmp575, tmp578
	movb	%dl, (%rax)	# tmp578, info[num_prefetches_3].write
	.loc 1 3948 0
	movl	-5788(%rbp), %ecx	# size, size.361
	movl	-5820(%rbp), %eax	# num_prefetches, tmp580
	cltq
	salq	$3, %rax	#, tmp582
	leaq	0(,%rax,8), %rdx	#, tmp583
	subq	%rax, %rdx	# tmp581, tmp583
	leaq	-16(%rbp), %rax	#, tmp1031
	addq	%rdx, %rax	# tmp583, tmp584
	subq	$5568, %rax	#, tmp585
	movl	%ecx, 8(%rax)	# size.361, info[num_prefetches_3].bytes_accesed
	.loc 1 3949 0
	addl	$1, -5820(%rbp)	#, num_prefetches
	.loc 1 3950 0
	cmpl	$99, -5820(%rbp)	#, num_prefetches
	jle	.L879	#,
	.loc 1 3952 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.362
	testq	%rax, %rax	# loop_dump_stream.362
	je	.L857	#,
	.loc 1 3953 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.363
	movq	%rax, %rcx	# loop_dump_stream.363,
	movl	$39, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC26, %edi	#,
	call	fwrite	#
	.loc 1 3955 0
	jmp	.L857	#
.L879:
.LBE47:
	.loc 1 3849 0
	movq	-5760(%rbp), %rax	# iv, tmp586
	movq	128(%rax), %rax	# iv_15->next_iv, tmp587
	movq	%rax, -5760(%rbp)	# tmp587, iv
.L875:
	.loc 1 3849 0 is_stmt 0 discriminator 1
	cmpq	$0, -5760(%rbp)	#, iv
	jne	.L890	#,
.L874:
.LBE46:
	.loc 1 3799 0 is_stmt 1
	movq	-5768(%rbp), %rax	# bl, tmp588
	movq	64(%rax), %rax	# bl_14->next, tmp589
	movq	%rax, -5768(%rbp)	# tmp589, bl
.L864:
	.loc 1 3799 0 is_stmt 0 discriminator 1
	cmpq	$0, -5768(%rbp)	#, bl
	jne	.L891	#,
	.loc 1 3961 0 is_stmt 1
	movl	$0, -5808(%rbp)	#, i
	jmp	.L892	#
.L898:
	.loc 1 3965 0
	movq	-5832(%rbp), %rax	# loop, tmp590
	movq	160(%rax), %rax	# loop_35(D)->aux, D.24499
	movq	96(%rax), %rax	# MEM[(struct loop_info *)_172].n_iterations, D.24501
	testq	%rax, %rax	# D.24501
	je	.L893	#,
	.loc 1 3966 0
	movl	-5808(%rbp), %eax	# i, tmp592
	cltq
	salq	$3, %rax	#, tmp594
	leaq	0(,%rax,8), %rdx	#, tmp595
	subq	%rax, %rdx	# tmp593, tmp595
	leaq	-16(%rbp), %rax	#, tmp1032
	addq	%rdx, %rax	# tmp595, tmp596
	subq	$5568, %rax	#, tmp597
	movq	(%rax), %rbx	# info[i_11].stride, D.24506
	movl	$4294967295, %eax	#, tmp600
	cqto
	idivq	%rbx	# D.24506
	movq	%rax, %rdx	# D.24506, D.24501
	.loc 1 3967 0
	movq	-5832(%rbp), %rax	# loop, tmp601
	movq	160(%rax), %rax	# loop_35(D)->aux, D.24499
	movq	96(%rax), %rax	# MEM[(struct loop_info *)_177].n_iterations, D.24501
	.loc 1 3966 0
	cmpq	%rax, %rdx	# D.24501, D.24501
	jb	.L893	#,
	.loc 1 3968 0
	movl	-5808(%rbp), %eax	# i, tmp603
	cltq
	salq	$3, %rax	#, tmp605
	leaq	0(,%rax,8), %rdx	#, tmp606
	subq	%rax, %rdx	# tmp604, tmp606
	leaq	-16(%rbp), %rax	#, tmp1034
	addq	%rdx, %rax	# tmp606, tmp607
	subq	$5568, %rax	#, tmp608
	movq	(%rax), %rax	# info[i_11].stride, D.24506
	movl	%eax, %edx	# D.24506, D.24504
	movq	-5832(%rbp), %rax	# loop, tmp609
	movq	160(%rax), %rax	# loop_35(D)->aux, D.24499
	movq	96(%rax), %rax	# MEM[(struct loop_info *)_181].n_iterations, D.24501
	movl	%edx, %ecx	# D.24504, D.24504
	imull	%eax, %ecx	# D.24504, D.24504
	movl	-5808(%rbp), %eax	# i, tmp611
	cltq
	salq	$3, %rax	#, tmp613
	leaq	0(,%rax,8), %rdx	#, tmp614
	subq	%rax, %rdx	# tmp612, tmp614
	leaq	-16(%rbp), %rax	#, tmp1036
	addq	%rdx, %rax	# tmp614, tmp615
	subq	$5568, %rax	#, tmp616
	movl	%ecx, 12(%rax)	# D.24504, info[i_11].total_bytes
	jmp	.L894	#
.L893:
	.loc 1 3970 0
	movl	-5808(%rbp), %eax	# i, tmp618
	cltq
	salq	$3, %rax	#, tmp620
	leaq	0(,%rax,8), %rdx	#, tmp621
	subq	%rax, %rdx	# tmp619, tmp621
	leaq	-16(%rbp), %rax	#, tmp1037
	addq	%rdx, %rax	# tmp621, tmp622
	subq	$5568, %rax	#, tmp623
	movl	$-1, 12(%rax)	#, info[i_11].total_bytes
.L894:
	.loc 1 3974 0
	movl	-5808(%rbp), %eax	# i, tmp625
	cltq
	salq	$3, %rax	#, tmp627
	leaq	0(,%rax,8), %rdx	#, tmp628
	subq	%rax, %rdx	# tmp626, tmp628
	leaq	-16(%rbp), %rax	#, tmp1038
	addq	%rdx, %rax	# tmp628, tmp629
	subq	$5568, %rax	#, tmp630
	movl	8(%rax), %eax	# info[i_11].bytes_accesed, D.24504
	sall	$8, %eax	#, D.24504
	movl	%eax, %ecx	# D.24504, D.24506
	movl	-5808(%rbp), %eax	# i, tmp632
	cltq
	salq	$3, %rax	#, tmp634
	leaq	0(,%rax,8), %rdx	#, tmp635
	subq	%rax, %rdx	# tmp633, tmp635
	leaq	-16(%rbp), %rax	#, tmp1039
	addq	%rdx, %rax	# tmp635, tmp636
	subq	$5568, %rax	#, tmp637
	movq	(%rax), %rbx	# info[i_11].stride, D.24506
	movq	%rcx, %rax	# D.24506, tmp638
	cqto
	idivq	%rbx	# D.24506
	.loc 1 3973 0
	cmpq	$220, %rax	#, D.24506
	jle	.L895	#,
	.loc 1 3975 0
	movl	-5808(%rbp), %eax	# i, tmp641
	cltq
	salq	$3, %rax	#, tmp643
	leaq	0(,%rax,8), %rdx	#, tmp644
	subq	%rax, %rdx	# tmp642, tmp644
	leaq	-16(%rbp), %rax	#, tmp1042
	addq	%rdx, %rax	# tmp644, tmp645
	subq	$5568, %rax	#, tmp646
	movl	12(%rax), %eax	# info[i_11].total_bytes, D.24504
	movq	ix86_cost(%rip), %rdx	# ix86_cost, ix86_cost.364
	movl	152(%rdx), %edx	# ix86_cost.364_191->prefetch_block, D.24500
	movl	%edx, %ebx	# D.24500, D.24504
	movl	$0, %edx	#, tmp648
	divl	%ebx	# D.24504
	cmpl	$1, %eax	#, D.24504
	jbe	.L895	#,
	.loc 1 3978 0
	movl	-5808(%rbp), %eax	# i, tmp650
	cltq
	salq	$3, %rax	#, tmp652
	leaq	0(,%rax,8), %rdx	#, tmp653
	subq	%rax, %rdx	# tmp651, tmp653
	leaq	-16(%rbp), %rax	#, tmp1044
	addq	%rdx, %rax	# tmp653, tmp654
	subq	$5552, %rax	#, tmp655
	movzbl	(%rax), %edx	# info[i_11].prefetch_before_loop, tmp658
	orl	$4, %edx	#, tmp659
	movb	%dl, (%rax)	# tmp659, info[i_11].prefetch_before_loop
	.loc 1 3980 0
	movl	-5808(%rbp), %eax	# i, tmp661
	cltq
	salq	$3, %rax	#, tmp663
	leaq	0(,%rax,8), %rdx	#, tmp664
	subq	%rax, %rdx	# tmp662, tmp664
	leaq	-16(%rbp), %rax	#, tmp1045
	addq	%rdx, %rax	# tmp664, tmp665
	subq	$5568, %rax	#, tmp666
	movl	12(%rax), %eax	# info[i_11].total_bytes, D.24504
	movq	ix86_cost(%rip), %rdx	# ix86_cost, ix86_cost.365
	movl	152(%rdx), %edx	# ix86_cost.365_196->prefetch_block, D.24500
	movl	%edx, %ebx	# D.24500, D.24504
	movl	$0, %edx	#, tmp668
	divl	%ebx	# D.24504
	.loc 1 3981 0
	cmpl	$6, %eax	#, D.24504
	seta	%cl	#, D.24513
	.loc 1 3980 0
	movl	-5808(%rbp), %eax	# i, tmp670
	cltq
	salq	$3, %rax	#, tmp672
	leaq	0(,%rax,8), %rdx	#, tmp673
	subq	%rax, %rdx	# tmp671, tmp673
	leaq	-16(%rbp), %rax	#, tmp1047
	addq	%rdx, %rax	# tmp673, tmp674
	subq	$5552, %rax	#, tmp675
	andl	$1, %ecx	#, tmp677
	movl	%ecx, %edx	# tmp677, tmp677
	leal	(%rdx,%rdx), %ecx	#, tmp678
	movzbl	(%rax), %edx	# info[i_11].prefetch_in_loop, tmp679
	andl	$-3, %edx	#, tmp680
	orl	%ecx, %edx	# tmp678, tmp681
	movb	%dl, (%rax)	# tmp681, info[i_11].prefetch_in_loop
	jmp	.L896	#
.L895:
	.loc 1 3984 0
	movl	-5808(%rbp), %eax	# i, tmp683
	cltq
	salq	$3, %rax	#, tmp685
	leaq	0(,%rax,8), %rdx	#, tmp686
	subq	%rax, %rdx	# tmp684, tmp686
	leaq	-16(%rbp), %rax	#, tmp1049
	addq	%rdx, %rax	# tmp686, tmp687
	subq	$5552, %rax	#, tmp688
	movzbl	(%rax), %edx	# info[i_11].prefetch_in_loop, tmp691
	andl	$-3, %edx	#, tmp692
	movb	%dl, (%rax)	# tmp692, info[i_11].prefetch_in_loop
	movl	-5808(%rbp), %eax	# i, tmp694
	cltq
	salq	$3, %rax	#, tmp696
	leaq	0(,%rax,8), %rdx	#, tmp697
	subq	%rax, %rdx	# tmp695, tmp697
	leaq	-16(%rbp), %rax	#, tmp1050
	addq	%rdx, %rax	# tmp697, tmp698
	subq	$5552, %rax	#, tmp699
	movzbl	(%rax), %edx	# info[i_11].prefetch_before_loop, tmp702
	andl	$-5, %edx	#, tmp703
	movb	%dl, (%rax)	# tmp703, info[i_11].prefetch_before_loop
.L896:
	.loc 1 3986 0
	movl	-5808(%rbp), %eax	# i, tmp705
	cltq
	salq	$3, %rax	#, tmp707
	leaq	0(,%rax,8), %rdx	#, tmp708
	subq	%rax, %rdx	# tmp706, tmp708
	leaq	-16(%rbp), %rax	#, tmp1051
	addq	%rdx, %rax	# tmp708, tmp709
	subq	$5552, %rax	#, tmp710
	movzbl	(%rax), %eax	#, tmp713
	shrb	%al	# D.24511
	andl	$1, %eax	#, D.24511
	testb	%al, %al	# D.24511
	je	.L897	#,
	.loc 1 3988 0
	movl	-5808(%rbp), %eax	# i, tmp715
	cltq
	salq	$3, %rax	#, tmp717
	leaq	0(,%rax,8), %rdx	#, tmp718
	subq	%rax, %rdx	# tmp716, tmp718
	leaq	-16(%rbp), %rax	#, tmp1052
	addq	%rdx, %rax	# tmp718, tmp719
	subq	$5568, %rax	#, tmp720
	movq	(%rax), %rdx	# info[i_11].stride, D.24506
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.366
	movl	152(%rax), %eax	# ix86_cost.366_203->prefetch_block, D.24500
	cltq
	addq	%rdx, %rax	# D.24506, D.24506
	leaq	-1(%rax), %rcx	#, D.24506
	.loc 1 3989 0
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.367
	movl	152(%rax), %eax	# ix86_cost.367_208->prefetch_block, D.24500
	movslq	%eax, %rbx	# D.24500, D.24506
	movq	%rcx, %rax	# D.24506, tmp721
	cqto
	idivq	%rbx	# D.24506
	.loc 1 3988 0
	movl	%eax, %edx	# D.24506, D.24507
	movl	-5816(%rbp), %eax	# num_real_prefetches, num_real_prefetches.368
	addl	%edx, %eax	# D.24507, D.24507
	movl	%eax, -5816(%rbp)	# D.24507, num_real_prefetches
	.loc 1 3990 0
	movl	-5808(%rbp), %eax	# i, tmp724
	cltq
	salq	$3, %rax	#, tmp726
	leaq	0(,%rax,8), %rdx	#, tmp727
	subq	%rax, %rdx	# tmp725, tmp727
	leaq	-16(%rbp), %rax	#, tmp1055
	addq	%rdx, %rax	# tmp727, tmp728
	subq	$5552, %rax	#, tmp729
	movzbl	(%rax), %eax	#, tmp732
	andl	$1, %eax	#, D.24511
	testb	%al, %al	# D.24511
	je	.L897	#,
	.loc 1 3992 0
	movl	-5808(%rbp), %eax	# i, tmp734
	cltq
	salq	$3, %rax	#, tmp736
	leaq	0(,%rax,8), %rdx	#, tmp737
	subq	%rax, %rdx	# tmp735, tmp737
	leaq	-16(%rbp), %rax	#, tmp1056
	addq	%rdx, %rax	# tmp737, tmp738
	subq	$5568, %rax	#, tmp739
	movq	(%rax), %rdx	# info[i_11].stride, D.24506
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.369
	movl	152(%rax), %eax	# ix86_cost.369_218->prefetch_block, D.24500
	cltq
	addq	%rdx, %rax	# D.24506, D.24506
	leaq	-1(%rax), %rcx	#, D.24506
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.370
	movl	152(%rax), %eax	# ix86_cost.370_223->prefetch_block, D.24500
	movslq	%eax, %rbx	# D.24500, D.24506
	movq	%rcx, %rax	# D.24506, tmp740
	cqto
	idivq	%rbx	# D.24506
	movl	%eax, %edx	# D.24506, D.24507
	movl	-5812(%rbp), %eax	# num_real_write_prefetches, num_real_write_prefetches.371
	addl	%edx, %eax	# D.24507, D.24507
	movl	%eax, -5812(%rbp)	# D.24507, num_real_write_prefetches
.L897:
	.loc 1 3961 0
	addl	$1, -5808(%rbp)	#, i
.L892:
	.loc 1 3961 0 is_stmt 0 discriminator 1
	movl	-5808(%rbp), %eax	# i, tmp742
	cmpl	-5820(%rbp), %eax	# num_prefetches, tmp742
	jl	.L898	#,
	.loc 1 3996 0 is_stmt 1
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.372
	testq	%rax, %rax	# loop_dump_stream.372
	je	.L899	#,
	.loc 1 3998 0
	movl	$0, -5808(%rbp)	#, i
	jmp	.L900	#
.L907:
	.loc 1 4001 0
	movl	-5808(%rbp), %eax	# i, tmp744
	cltq
	salq	$3, %rax	#, tmp746
	leaq	0(,%rax,8), %rdx	#, tmp747
	subq	%rax, %rdx	# tmp745, tmp747
	leaq	-16(%rbp), %rax	#, tmp1059
	addq	%rdx, %rax	# tmp747, tmp748
	subq	$5592, %rax	#, tmp749
	movq	(%rax), %rax	# info[i_12].giv, D.24514
	movq	(%rax), %rax	# _234->insn, D.24502
	.loc 1 4000 0
	movl	8(%rax), %edx	# _235->fld[0].rtint, D.24500
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.373
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.373,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 4002 0
	movl	-5808(%rbp), %eax	# i, tmp751
	cltq
	salq	$3, %rax	#, tmp753
	leaq	0(,%rax,8), %rdx	#, tmp754
	subq	%rax, %rdx	# tmp752, tmp754
	leaq	-16(%rbp), %rax	#, tmp1060
	addq	%rdx, %rax	# tmp754, tmp755
	subq	$5584, %rax	#, tmp756
	movq	(%rax), %rdx	# info[i_12].base_address, D.24502
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.374
	movq	%rdx, %rsi	# D.24502,
	movq	%rax, %rdi	# loop_dump_stream.374,
	call	print_rtl	#
	.loc 1 4003 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.375
	movq	%rax, %rcx	# loop_dump_stream.375,
	movl	$8, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC28, %edi	#,
	call	fwrite	#
	.loc 1 4004 0
	movl	-5808(%rbp), %eax	# i, tmp758
	cltq
	salq	$3, %rax	#, tmp760
	leaq	0(,%rax,8), %rdx	#, tmp761
	subq	%rax, %rdx	# tmp759, tmp761
	leaq	-16(%rbp), %rax	#, tmp1061
	addq	%rdx, %rax	# tmp761, tmp762
	subq	$5576, %rax	#, tmp763
	movq	(%rax), %rdx	# info[i_12].index, D.24506
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.376
	movl	$.LC29, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.376,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 4005 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.377
	movq	%rax, %rcx	# loop_dump_stream.377,
	movl	$9, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC30, %edi	#,
	call	fwrite	#
	.loc 1 4006 0
	movl	-5808(%rbp), %eax	# i, tmp765
	cltq
	salq	$3, %rax	#, tmp767
	leaq	0(,%rax,8), %rdx	#, tmp768
	subq	%rax, %rdx	# tmp766, tmp768
	leaq	-16(%rbp), %rax	#, tmp1062
	addq	%rdx, %rax	# tmp768, tmp769
	subq	$5568, %rax	#, tmp770
	movq	(%rax), %rdx	# info[i_12].stride, D.24506
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.378
	movl	$.LC29, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.378,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 4013 0
	movl	-5808(%rbp), %eax	# i, tmp772
	cltq
	salq	$3, %rax	#, tmp774
	leaq	0(,%rax,8), %rdx	#, tmp775
	subq	%rax, %rdx	# tmp773, tmp775
	leaq	-16(%rbp), %rax	#, tmp1063
	addq	%rdx, %rax	# tmp775, tmp776
	subq	$5552, %rax	#, tmp777
	movzbl	(%rax), %eax	#, tmp780
	shrb	$2, %al	#, D.24511
	andl	$1, %eax	#, D.24511
	.loc 1 4007 0
	testb	%al, %al	# D.24511
	je	.L901	#,
	.loc 1 4007 0 is_stmt 0 discriminator 1
	movl	$.LC31, %ecx	#, iftmp.379
	jmp	.L902	#
.L901:
	.loc 1 4007 0 discriminator 2
	movl	$.LC32, %ecx	#, iftmp.379
.L902:
	.loc 1 4012 0 is_stmt 1 discriminator 3
	movl	-5808(%rbp), %eax	# i, tmp782
	cltq
	salq	$3, %rax	#, tmp784
	leaq	0(,%rax,8), %rdx	#, tmp785
	subq	%rax, %rdx	# tmp783, tmp785
	leaq	-16(%rbp), %rax	#, tmp1064
	addq	%rdx, %rax	# tmp785, tmp786
	subq	$5552, %rax	#, tmp787
	movzbl	(%rax), %eax	#, tmp790
	shrb	%al	# D.24511
	andl	$1, %eax	#, D.24511
	.loc 1 4007 0 discriminator 3
	testb	%al, %al	# D.24511
	je	.L903	#,
	.loc 1 4007 0 is_stmt 0 discriminator 4
	movl	$.LC31, %edi	#, iftmp.380
	jmp	.L904	#
.L903:
	.loc 1 4007 0 discriminator 5
	movl	$.LC32, %edi	#, iftmp.380
.L904:
	.loc 1 4011 0 is_stmt 1 discriminator 6
	movl	-5808(%rbp), %eax	# i, tmp792
	cltq
	salq	$3, %rax	#, tmp794
	leaq	0(,%rax,8), %rdx	#, tmp795
	subq	%rax, %rdx	# tmp793, tmp795
	leaq	-16(%rbp), %rax	#, tmp1065
	addq	%rdx, %rax	# tmp795, tmp796
	subq	$5552, %rax	#, tmp797
	movzbl	(%rax), %eax	#, tmp800
	andl	$1, %eax	#, D.24511
	.loc 1 4007 0 discriminator 6
	testb	%al, %al	# D.24511
	je	.L905	#,
	.loc 1 4007 0 is_stmt 0 discriminator 7
	movl	$.LC33, %esi	#, iftmp.381
	jmp	.L906	#
.L905:
	.loc 1 4007 0 discriminator 8
	movl	$.LC34, %esi	#, iftmp.381
.L906:
	.loc 1 4007 0 discriminator 9
	movl	-5808(%rbp), %eax	# i, tmp802
	cltq
	salq	$3, %rax	#, tmp804
	leaq	0(,%rax,8), %rdx	#, tmp805
	subq	%rax, %rdx	# tmp803, tmp805
	leaq	-16(%rbp), %rax	#, tmp1066
	addq	%rdx, %rax	# tmp805, tmp806
	subq	$5568, %rax	#, tmp807
	movl	12(%rax), %r10d	# info[i_12].total_bytes, D.24504
	.loc 1 4009 0 is_stmt 1 discriminator 9
	movl	-5808(%rbp), %eax	# i, tmp809
	cltq
	salq	$3, %rax	#, tmp811
	leaq	0(,%rax,8), %rdx	#, tmp812
	subq	%rax, %rdx	# tmp810, tmp812
	leaq	-16(%rbp), %rax	#, tmp1067
	addq	%rdx, %rax	# tmp812, tmp813
	subq	$5568, %rax	#, tmp814
	movl	8(%rax), %eax	# info[i_12].bytes_accesed, D.24504
	imull	$100, %eax, %eax	#, D.24504, D.24504
	movl	%eax, %r8d	# D.24504, D.24506
	movl	-5808(%rbp), %eax	# i, tmp816
	cltq
	salq	$3, %rax	#, tmp818
	leaq	0(,%rax,8), %rdx	#, tmp819
	subq	%rax, %rdx	# tmp817, tmp819
	leaq	-16(%rbp), %rax	#, tmp1068
	addq	%rdx, %rax	# tmp819, tmp820
	subq	$5568, %rax	#, tmp821
	movq	(%rax), %rbx	# info[i_12].stride, D.24506
	movq	%r8, %rax	# D.24506, tmp822
	cqto
	idivq	%rbx	# D.24506
	.loc 1 4007 0 discriminator 9
	movl	%eax, %edx	# D.24506, D.24500
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.382
	movq	%rcx, (%rsp)	# iftmp.379,
	movq	%rdi, %r9	# iftmp.380,
	movq	%rsi, %r8	# iftmp.381,
	movl	%r10d, %ecx	# D.24504,
	movl	$.LC35, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.382,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 3998 0 discriminator 9
	addl	$1, -5808(%rbp)	#, i
.L900:
	.loc 1 3998 0 is_stmt 0 discriminator 1
	movl	-5808(%rbp), %eax	# i, tmp824
	cmpl	-5820(%rbp), %eax	# num_prefetches, tmp824
	jl	.L907	#,
	.loc 1 4016 0 is_stmt 1
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.383
	movl	-5812(%rbp), %ecx	# num_real_write_prefetches, tmp825
	movl	-5816(%rbp), %edx	# num_real_prefetches, tmp826
	movl	$.LC36, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.383,
	movl	$0, %eax	#,
	call	fprintf	#
.L899:
	.loc 1 4020 0
	cmpl	$0, -5816(%rbp)	#, num_real_prefetches
	jne	.L908	#,
	.loc 1 4021 0
	jmp	.L857	#
.L908:
	.loc 1 4023 0
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.384
	movl	156(%rax), %eax	# ix86_cost.384_265->simultaneous_prefetches, D.24500
	cltd
	idivl	-5816(%rbp)	# num_real_prefetches
	movl	%eax, -5784(%rbp)	# tmp828, ahead
	.loc 1 4025 0
	cmpl	$0, -5784(%rbp)	#, ahead
	jne	.L909	#,
	.loc 1 4026 0
	jmp	.L857	#
.L909:
	.loc 1 4028 0
	movl	$0, -5808(%rbp)	#, i
	jmp	.L910	#
.L931:
	.loc 1 4030 0
	movl	-5808(%rbp), %eax	# i, tmp831
	cltq
	salq	$3, %rax	#, tmp833
	leaq	0(,%rax,8), %rdx	#, tmp834
	subq	%rax, %rdx	# tmp832, tmp834
	leaq	-16(%rbp), %rax	#, tmp1071
	addq	%rdx, %rax	# tmp834, tmp835
	subq	$5552, %rax	#, tmp836
	movzbl	(%rax), %eax	#, tmp839
	shrb	%al	# D.24511
	andl	$1, %eax	#, D.24511
	testb	%al, %al	# D.24511
	je	.L911	#,
.LBB48:
	.loc 1 4034 0
	movl	$0, -5796(%rbp)	#, y
	jmp	.L912	#
.L922:
.LBB49:
	.loc 1 4037 0
	movl	-5808(%rbp), %eax	# i, tmp841
	cltq
	salq	$3, %rax	#, tmp843
	leaq	0(,%rax,8), %rdx	#, tmp844
	subq	%rax, %rdx	# tmp842, tmp844
	leaq	-16(%rbp), %rax	#, tmp1072
	addq	%rdx, %rax	# tmp844, tmp845
	subq	$5592, %rax	#, tmp846
	movq	(%rax), %rax	# info[i_13].giv, D.24514
	movq	40(%rax), %rax	# _282->location, D.24510
	movq	(%rax), %rax	# *_283, D.24502
	movq	%rax, %rdi	# D.24502,
	call	copy_rtx	#
	movq	%rax, -5744(%rbp)	# tmp847, loc
	.loc 1 4039 0
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.385
	movl	152(%rax), %eax	# ix86_cost.385_286->prefetch_block, D.24500
	movl	-5796(%rbp), %edx	# y, tmp848
	movl	-5784(%rbp), %ecx	# ahead, tmp849
	addl	%ecx, %edx	# tmp849, D.24500
	imull	%edx, %eax	# D.24500, tmp850
	movl	%eax, -5780(%rbp)	# tmp850, bytes_ahead
	.loc 1 4040 0
	movl	-5808(%rbp), %eax	# i, tmp852
	cltq
	salq	$3, %rax	#, tmp854
	leaq	0(,%rax,8), %rdx	#, tmp855
	subq	%rax, %rdx	# tmp853, tmp855
	leaq	-16(%rbp), %rax	#, tmp1073
	addq	%rdx, %rax	# tmp855, tmp856
	subq	$5592, %rax	#, tmp857
	movq	(%rax), %rax	# info[i_13].giv, D.24514
	movq	(%rax), %rax	# _290->insn, tmp858
	movq	%rax, -5688(%rbp)	# tmp858, before_insn
	.loc 1 4041 0
	movl	-5808(%rbp), %eax	# i, tmp860
	cltq
	salq	$3, %rax	#, tmp862
	leaq	0(,%rax,8), %rdx	#, tmp863
	subq	%rax, %rdx	# tmp861, tmp863
	leaq	-16(%rbp), %rax	#, tmp1074
	addq	%rdx, %rax	# tmp863, tmp864
	subq	$5592, %rax	#, tmp865
	movq	(%rax), %rax	# info[i_13].giv, D.24514
	movq	(%rax), %rax	# _292->insn, D.24502
	movq	16(%rax), %rax	# _293->fld[1].rtx, tmp866
	movq	%rax, -5680(%rbp)	# tmp866, prev_insn
	.loc 1 4046 0
	movq	-5744(%rbp), %rax	# loc, tmp867
	movq	%rax, %rdx	# tmp867,
	movl	$0, %esi	#,
	movl	$0, %edi	#,
	call	offsettable_address_p	#
	testl	%eax, %eax	# D.24500
	je	.L913	#,
	.loc 1 4047 0
	movl	-5780(%rbp), %eax	# bytes_ahead, tmp868
	movslq	%eax, %rdx	# tmp868, D.24506
	movq	-5744(%rbp), %rax	# loc, tmp869
	movq	%rdx, %rsi	# D.24506,
	movq	%rax, %rdi	# tmp869,
	call	plus_constant_wide	#
	movq	%rax, -5744(%rbp)	# tmp870, loc
	jmp	.L914	#
.L913:
.LBB50:
	.loc 1 4050 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.387
	andl	$33554432, %eax	#, D.24500
	testl	%eax, %eax	# D.24500
	je	.L915	#,
	.loc 1 4050 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.386
	jmp	.L916	#
.L915:
	.loc 1 4050 0 discriminator 2
	movl	$4, %eax	#, iftmp.386
.L916:
	.loc 1 4050 0 discriminator 3
	movl	%eax, %edi	# iftmp.386,
	call	gen_reg_rtx	#
	movq	%rax, -5672(%rbp)	# tmp871, reg
	.loc 1 4051 0 is_stmt 1 discriminator 3
	movl	-5780(%rbp), %eax	# bytes_ahead, tmp872
	cltq
	movq	%rax, %rsi	# D.24506,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.24502
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.24502
	movq	-5672(%rbp), %r8	# reg, tmp873
	movq	-5744(%rbp), %rsi	# loc, tmp874
	movq	-5832(%rbp), %rax	# loop, tmp875
	movq	-5688(%rbp), %rdi	# before_insn, tmp876
	movq	%rdi, (%rsp)	# tmp876,
	movl	$0, %r9d	#,
	movq	%rax, %rdi	# tmp875,
	call	loop_iv_add_mult_emit_before	#
	.loc 1 4054 0 discriminator 3
	movq	-5672(%rbp), %rax	# reg, tmp877
	movq	%rax, -5744(%rbp)	# tmp877, loc
.L914:
.LBE50:
	.loc 1 4057 0
	call	start_sequence	#
	.loc 1 4059 0
	movq	insn_data+52664(%rip), %rax	# insn_data[1316].operand, D.24515
	.loc 1 4060 0
	movq	(%rax), %rax	# _307->predicate, D.24516
	.loc 1 4061 0
	movq	insn_data+52664(%rip), %rdx	# insn_data[1316].operand, D.24515
	movzwl	16(%rdx), %edx	# _309->mode, D.24503
	.loc 1 4060 0
	movzwl	%dx, %ecx	# D.24503, D.24508
	movq	-5744(%rbp), %rdx	# loc, tmp878
	movl	%ecx, %esi	# D.24508,
	movq	%rdx, %rdi	# tmp878,
	call	*%rax	# D.24516
	.loc 1 4059 0
	testl	%eax, %eax	# D.24500
	jne	.L917	#,
	.loc 1 4062 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.389
	andl	$33554432, %eax	#, D.24500
	testl	%eax, %eax	# D.24500
	je	.L918	#,
	.loc 1 4062 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.388
	jmp	.L919	#
.L918:
	.loc 1 4062 0 discriminator 2
	movl	$4, %eax	#, iftmp.388
.L919:
	.loc 1 4062 0 discriminator 3
	movq	-5744(%rbp), %rdx	# loc, tmp879
	movq	%rdx, %rsi	# tmp879,
	movl	%eax, %edi	# iftmp.388,
	call	force_reg	#
	movq	%rax, -5744(%rbp)	# tmp880, loc
.L917:
	.loc 1 4063 0 is_stmt 1
	movl	$3, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.24502
	movl	-5808(%rbp), %eax	# i, tmp882
	cltq
	salq	$3, %rax	#, tmp884
	leaq	0(,%rax,8), %rdx	#, tmp885
	subq	%rax, %rdx	# tmp883, tmp885
	leaq	-16(%rbp), %rax	#, tmp1075
	addq	%rdx, %rax	# tmp885, tmp886
	subq	$5552, %rax	#, tmp887
	movzbl	(%rax), %eax	#, tmp890
	andl	$1, %eax	#, D.24511
	movzbl	%al, %eax	# D.24511, D.24506
	movq	%rax, %rsi	# D.24506,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.24502
	movq	-5744(%rbp), %rax	# loc, tmp891
	movq	%rbx, %rdx	# D.24502,
	movq	%rcx, %rsi	# D.24502,
	movq	%rax, %rdi	# tmp891,
	call	gen_prefetch	#
	movq	%rax, %rdi	# D.24502,
	call	emit_insn	#
	.loc 1 4065 0
	call	gen_sequence	#
	movq	%rax, -5664(%rbp)	# tmp892, seq
	.loc 1 4066 0
	call	end_sequence	#
	.loc 1 4067 0
	movq	-5688(%rbp), %rdx	# before_insn, tmp893
	movq	-5664(%rbp), %rax	# seq, tmp894
	movq	%rdx, %rsi	# tmp893,
	movq	%rax, %rdi	# tmp894,
	call	emit_insn_before	#
	.loc 1 4071 0
	movq	-5680(%rbp), %rax	# prev_insn, tmp895
	movq	24(%rax), %rax	# prev_insn_294->fld[2].rtx, tmp896
	movq	%rax, -5736(%rbp)	# tmp896, insn
	.loc 1 4072 0
	jmp	.L920	#
.L921:
	.loc 1 4076 0
	movl	-5808(%rbp), %eax	# i, tmp898
	cltq
	salq	$3, %rax	#, tmp900
	leaq	0(,%rax,8), %rdx	#, tmp901
	subq	%rax, %rdx	# tmp899, tmp901
	leaq	-16(%rbp), %rax	#, tmp1076
	addq	%rdx, %rax	# tmp901, tmp902
	subq	$5592, %rax	#, tmp903
	movq	(%rax), %rax	# info[i_13].giv, D.24514
	movzbl	100(%rax), %eax	# *_325, tmp906
	shrb	$5, %al	#, D.24511
	andl	$1, %eax	#, D.24511
	.loc 1 4074 0
	movzbl	%al, %ecx	# D.24511, D.24500
	.loc 1 4075 0
	movl	-5808(%rbp), %eax	# i, tmp908
	cltq
	salq	$3, %rax	#, tmp910
	leaq	0(,%rax,8), %rdx	#, tmp911
	subq	%rax, %rdx	# tmp909, tmp911
	leaq	-16(%rbp), %rax	#, tmp1077
	addq	%rdx, %rax	# tmp911, tmp912
	subq	$5592, %rax	#, tmp913
	movq	(%rax), %rax	# info[i_13].giv, D.24514
	movzbl	100(%rax), %eax	# *_328, tmp916
	shrb	$4, %al	#, D.24511
	andl	$1, %eax	#, D.24511
	.loc 1 4074 0
	movzbl	%al, %edx	# D.24511, D.24500
	movq	-5736(%rbp), %rsi	# insn, tmp917
	movq	-5832(%rbp), %rax	# loop, tmp918
	movq	%rax, %rdi	# tmp918,
	call	check_insn_for_givs	#
	movq	%rax, -5736(%rbp)	# tmp919, insn
	.loc 1 4077 0
	movq	-5736(%rbp), %rax	# insn, tmp920
	movq	24(%rax), %rax	# insn_331->fld[2].rtx, tmp921
	movq	%rax, -5736(%rbp)	# tmp921, insn
.L920:
	.loc 1 4072 0 discriminator 1
	movq	-5736(%rbp), %rax	# insn, tmp922
	cmpq	-5688(%rbp), %rax	# before_insn, tmp922
	jne	.L921	#,
.LBE49:
	.loc 1 4035 0
	addl	$1, -5796(%rbp)	#, y
.L912:
	.loc 1 4034 0 discriminator 1
	movl	-5796(%rbp), %eax	# y, tmp923
	movslq	%eax, %rcx	# tmp923, D.24506
	movl	-5808(%rbp), %eax	# i, tmp925
	cltq
	salq	$3, %rax	#, tmp927
	leaq	0(,%rax,8), %rdx	#, tmp928
	subq	%rax, %rdx	# tmp926, tmp928
	leaq	-16(%rbp), %rax	#, tmp1078
	addq	%rdx, %rax	# tmp928, tmp929
	subq	$5568, %rax	#, tmp930
	movq	(%rax), %rdx	# info[i_13].stride, D.24506
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.390
	movl	152(%rax), %eax	# ix86_cost.390_273->prefetch_block, D.24500
	cltq
	addq	%rdx, %rax	# D.24506, D.24506
	leaq	-1(%rax), %rsi	#, D.24506
	.loc 1 4035 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.391
	movl	152(%rax), %eax	# ix86_cost.391_278->prefetch_block, D.24500
	movslq	%eax, %rbx	# D.24500, D.24506
	movq	%rsi, %rax	# D.24506, tmp931
	cqto
	idivq	%rbx	# D.24506
	.loc 1 4034 0 discriminator 1
	cmpq	%rax, %rcx	# D.24506, D.24506
	jl	.L922	#,
.L911:
.LBE48:
	.loc 1 4082 0
	movl	-5808(%rbp), %eax	# i, tmp934
	cltq
	salq	$3, %rax	#, tmp936
	leaq	0(,%rax,8), %rdx	#, tmp937
	subq	%rax, %rdx	# tmp935, tmp937
	leaq	-16(%rbp), %rax	#, tmp1081
	addq	%rdx, %rax	# tmp937, tmp938
	subq	$5552, %rax	#, tmp939
	movzbl	(%rax), %eax	#, tmp942
	shrb	$2, %al	#, D.24511
	andl	$1, %eax	#, D.24511
	testb	%al, %al	# D.24511
	je	.L923	#,
.LBB51:
	.loc 1 4087 0
	movl	$0, -5792(%rbp)	#, y
	jmp	.L924	#
.L930:
.LBB52:
	.loc 1 4091 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.393
	andl	$33554432, %eax	#, D.24500
	testl	%eax, %eax	# D.24500
	je	.L925	#,
	.loc 1 4091 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.392
	jmp	.L926	#
.L925:
	.loc 1 4091 0 discriminator 2
	movl	$4, %eax	#, iftmp.392
.L926:
	.loc 1 4091 0 discriminator 3
	movl	%eax, %edi	# iftmp.392,
	call	gen_reg_rtx	#
	movq	%rax, -5656(%rbp)	# tmp943, reg
	.loc 1 4092 0 is_stmt 1 discriminator 3
	movq	-5832(%rbp), %rax	# loop, tmp944
	movq	192(%rax), %rax	# loop_35(D)->start, tmp945
	movq	%rax, -5648(%rbp)	# tmp945, loop_start
	.loc 1 4095 0 discriminator 3
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.394
	movl	152(%rax), %eax	# ix86_cost.394_348->prefetch_block, D.24500
	imull	-5792(%rbp), %eax	# y, D.24500
	.loc 1 4093 0 discriminator 3
	cltq
	movq	%rax, %rsi	# D.24506,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.24502
	.loc 1 4094 0 discriminator 3
	movl	-5808(%rbp), %eax	# i, tmp947
	cltq
	salq	$3, %rax	#, tmp949
	leaq	0(,%rax,8), %rdx	#, tmp950
	subq	%rax, %rdx	# tmp948, tmp950
	leaq	-16(%rbp), %rax	#, tmp1082
	addq	%rdx, %rax	# tmp950, tmp951
	subq	$5592, %rax	#, tmp952
	movq	(%rax), %rax	# info[i_13].giv, D.24514
	.loc 1 4093 0 discriminator 3
	movq	72(%rax), %rdx	# _353->add_val, D.24502
	movl	target_flags(%rip), %eax	# target_flags, target_flags.396
	andl	$33554432, %eax	#, D.24500
	testl	%eax, %eax	# D.24500
	je	.L927	#,
	.loc 1 4093 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.395
	jmp	.L928	#
.L927:
	.loc 1 4093 0 discriminator 2
	movl	$4, %eax	#, iftmp.395
.L928:
	.loc 1 4093 0 discriminator 3
	movl	%eax, %esi	# iftmp.395,
	movl	$75, %edi	#,
	call	simplify_gen_binary	#
	movq	%rax, -5640(%rbp)	# tmp953, add_val
	.loc 1 4098 0 is_stmt 1 discriminator 3
	movl	-5808(%rbp), %eax	# i, tmp955
	cltq
	salq	$3, %rax	#, tmp957
	leaq	0(,%rax,8), %rdx	#, tmp958
	subq	%rax, %rdx	# tmp956, tmp958
	leaq	-16(%rbp), %rax	#, tmp1083
	addq	%rdx, %rax	# tmp958, tmp959
	subq	$5592, %rax	#, tmp960
	movq	(%rax), %rax	# info[i_13].giv, D.24514
	.loc 1 4097 0 discriminator 3
	movq	64(%rax), %rdi	# _360->mult_val, D.24502
	movl	-5808(%rbp), %eax	# i, tmp962
	cltq
	salq	$3, %rax	#, tmp964
	leaq	0(,%rax,8), %rdx	#, tmp965
	subq	%rax, %rdx	# tmp963, tmp965
	leaq	-16(%rbp), %rax	#, tmp1084
	addq	%rdx, %rax	# tmp965, tmp966
	subq	$5600, %rax	#, tmp967
	movq	(%rax), %rax	# info[i_13].class, D.24517
	movq	40(%rax), %rsi	# _362->initial_value, D.24502
	movq	-5656(%rbp), %r8	# reg, tmp968
	movq	-5640(%rbp), %rdx	# add_val, tmp969
	movq	-5832(%rbp), %rax	# loop, tmp970
	movq	-5648(%rbp), %rcx	# loop_start, tmp971
	movq	%rcx, (%rsp)	# tmp971,
	movl	$0, %r9d	#,
	movq	%rdx, %rcx	# tmp969,
	movq	%rdi, %rdx	# D.24502,
	movq	%rax, %rdi	# tmp970,
	call	loop_iv_add_mult_emit_before	#
	.loc 1 4100 0 discriminator 3
	movl	$3, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.24502
	movl	-5808(%rbp), %eax	# i, tmp973
	cltq
	salq	$3, %rax	#, tmp975
	leaq	0(,%rax,8), %rdx	#, tmp976
	subq	%rax, %rdx	# tmp974, tmp976
	leaq	-16(%rbp), %rax	#, tmp1085
	addq	%rdx, %rax	# tmp976, tmp977
	subq	$5552, %rax	#, tmp978
	movzbl	(%rax), %eax	#, tmp981
	andl	$1, %eax	#, D.24511
	movzbl	%al, %eax	# D.24511, D.24506
	movq	%rax, %rsi	# D.24506,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.24502
	movq	-5656(%rbp), %rax	# reg, tmp982
	movq	%rbx, %rdx	# D.24502,
	movq	%rcx, %rsi	# D.24502,
	movq	%rax, %rdi	# tmp982,
	call	gen_prefetch	#
	movq	-5648(%rbp), %rdx	# loop_start, tmp983
	movq	%rdx, %rsi	# tmp983,
	movq	%rax, %rdi	# D.24502,
	call	emit_insn_before	#
.LBE52:
	.loc 1 4089 0 discriminator 3
	addl	$1, -5792(%rbp)	#, y
.L924:
	.loc 1 4088 0 discriminator 1
	movl	-5808(%rbp), %eax	# i, tmp985
	cltq
	salq	$3, %rax	#, tmp987
	leaq	0(,%rax,8), %rdx	#, tmp988
	subq	%rax, %rdx	# tmp986, tmp988
	leaq	-16(%rbp), %rax	#, tmp1086
	addq	%rdx, %rax	# tmp988, tmp989
	subq	$5552, %rax	#, tmp990
	movzbl	(%rax), %eax	#, tmp993
	shrb	%al	# D.24511
	andl	$1, %eax	#, D.24511
	.loc 1 4087 0 discriminator 1
	testb	%al, %al	# D.24511
	je	.L929	#,
	.loc 1 4088 0
	movl	-5792(%rbp), %eax	# y, tmp994
	cmpl	-5784(%rbp), %eax	# ahead, tmp994
	jge	.L923	#,
.L929:
	.loc 1 4089 0
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.397
	movl	152(%rax), %eax	# ix86_cost.397_337->prefetch_block, D.24500
	imull	-5792(%rbp), %eax	# y, D.24500
	movl	%eax, %ecx	# D.24500, D.24500
	movl	-5808(%rbp), %eax	# i, tmp996
	cltq
	salq	$3, %rax	#, tmp998
	leaq	0(,%rax,8), %rdx	#, tmp999
	subq	%rax, %rdx	# tmp997, tmp999
	leaq	-16(%rbp), %rax	#, tmp1088
	addq	%rdx, %rax	# tmp999, tmp1000
	subq	$5568, %rax	#, tmp1001
	movl	12(%rax), %eax	# info[i_13].total_bytes, D.24504
	cmpl	%eax, %ecx	# D.24500, D.24500
	jl	.L930	#,
.L923:
.LBE51:
	.loc 1 4028 0
	addl	$1, -5808(%rbp)	#, i
.L910:
	.loc 1 4028 0 is_stmt 0 discriminator 1
	movl	-5808(%rbp), %eax	# i, tmp1002
	cmpl	-5820(%rbp), %eax	# num_prefetches, tmp1002
	jl	.L931	#,
	.loc 1 4107 0 is_stmt 1
	nop
.L857:
	.loc 1 4108 0
	addq	$5832, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE38:
	.size	emit_prefetch_instructions, .-emit_prefetch_instructions
	.local	note_insn
	.comm	note_insn,8,8
	.local	addr_placeholder
	.comm	addr_placeholder,8,8
	.globl	for_each_insn_in_loop
	.type	for_each_insn_in_loop, @function
for_each_insn_in_loop:
.LFB39:
	.loc 1 4167 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# loop, loop
	movq	%rsi, -80(%rbp)	# fncall, fncall
	.loc 1 4170 0
	movl	$0, -56(%rbp)	#, not_every_iteration
	.loc 1 4171 0
	movl	$0, -52(%rbp)	#, maybe_multiple
	.loc 1 4172 0
	movl	$0, -48(%rbp)	#, past_loop_latch
	.loc 1 4173 0
	movl	$0, -44(%rbp)	#, loop_depth
	.loc 1 4178 0
	movq	-72(%rbp), %rax	# loop, tmp105
	movq	216(%rax), %rax	# loop_20(D)->scan_start, D.24535
	movq	%rax, %rdi	# D.24535,
	call	prev_nonnote_insn	#
	movq	%rax, %rbx	#, D.24535
	movq	-72(%rbp), %rax	# loop, tmp106
	movq	192(%rax), %rax	# loop_20(D)->start, D.24535
	movq	%rax, %rdi	# D.24535,
	call	prev_nonnote_insn	#
	cmpq	%rax, %rbx	# D.24535, D.24535
	je	.L934	#,
	.loc 1 4179 0
	movq	-72(%rbp), %rax	# loop, tmp107
	movq	216(%rax), %rdx	# loop_20(D)->scan_start, D.24535
	movq	-72(%rbp), %rax	# loop, tmp108
	movq	%rdx, %rsi	# D.24535,
	movq	%rax, %rdi	# tmp108,
	call	back_branch_in_range_p	#
	movl	%eax, -52(%rbp)	# tmp109, maybe_multiple
.L934:
	.loc 1 4183 0
	movq	-72(%rbp), %rax	# loop, tmp110
	movq	216(%rax), %rdx	# loop_20(D)->scan_start, D.24535
	movq	-72(%rbp), %rax	# loop, tmp111
	movq	%rdx, %rsi	# D.24535,
	movq	%rax, %rdi	# tmp111,
	call	next_insn_in_loop	#
	movq	%rax, -40(%rbp)	# tmp112, p
	jmp	.L935	#
.L958:
	.loc 1 4187 0
	movl	-52(%rbp), %ecx	# maybe_multiple, tmp113
	movl	-56(%rbp), %edx	# not_every_iteration, tmp114
	movq	-40(%rbp), %rsi	# p, tmp115
	movq	-72(%rbp), %rdi	# loop, tmp116
	movq	-80(%rbp), %rax	# fncall, tmp117
	call	*%rax	# tmp117
	movq	%rax, -40(%rbp)	# tmp118, p
	.loc 1 4195 0
	movq	-40(%rbp), %rax	# p, tmp119
	movzwl	(%rax), %eax	# p_30->code, D.24536
	cmpw	$36, %ax	#, D.24536
	jne	.L936	#,
.LBB53:
	.loc 1 4197 0
	movq	-40(%rbp), %rax	# p, tmp120
	movq	%rax, -32(%rbp)	# tmp120, insn
	.loc 1 4199 0
	movl	$0, -52(%rbp)	#, maybe_multiple
.L943:
	.loc 1 4203 0
	movq	-32(%rbp), %rax	# insn, tmp121
	movq	24(%rax), %rax	# insn_13->fld[2].rtx, tmp122
	movq	%rax, -32(%rbp)	# tmp122, insn
	.loc 1 4204 0
	movq	-72(%rbp), %rax	# loop, tmp123
	movq	216(%rax), %rax	# loop_20(D)->scan_start, D.24535
	cmpq	-32(%rbp), %rax	# insn, D.24535
	jne	.L937	#,
	.loc 1 4205 0
	jmp	.L936	#
.L937:
	.loc 1 4206 0
	movq	-72(%rbp), %rax	# loop, tmp124
	movq	200(%rax), %rax	# loop_20(D)->end, D.24535
	cmpq	-32(%rbp), %rax	# insn, D.24535
	jne	.L938	#,
	.loc 1 4208 0
	movq	-72(%rbp), %rax	# loop, tmp125
	movq	208(%rax), %rax	# loop_20(D)->top, D.24535
	testq	%rax, %rax	# D.24535
	je	.L939	#,
	.loc 1 4209 0
	movq	-72(%rbp), %rax	# loop, tmp126
	movq	208(%rax), %rax	# loop_20(D)->top, tmp127
	movq	%rax, -32(%rbp)	# tmp127, insn
	.loc 1 4212 0
	movq	-72(%rbp), %rax	# loop, tmp128
	movq	216(%rax), %rax	# loop_20(D)->scan_start, D.24535
	cmpq	-32(%rbp), %rax	# insn, D.24535
	jne	.L938	#,
	jmp	.L959	#
.L939:
	.loc 1 4211 0
	jmp	.L936	#
.L959:
	.loc 1 4213 0
	jmp	.L936	#
.L938:
	.loc 1 4216 0
	movq	-32(%rbp), %rax	# insn, tmp129
	movzwl	(%rax), %eax	# insn_14->code, D.24536
	cmpw	$33, %ax	#, D.24536
	jne	.L941	#,
	.loc 1 4217 0
	movq	-32(%rbp), %rax	# insn, tmp130
	movq	32(%rax), %rax	# insn_14->fld[3].rtx, D.24535
	movzwl	(%rax), %eax	# _41->code, D.24536
	cmpw	$51, %ax	#, D.24536
	je	.L941	#,
	.loc 1 4218 0
	movq	-32(%rbp), %rax	# insn, tmp131
	movq	%rax, %rdi	# tmp131,
	call	any_condjump_p	#
	testl	%eax, %eax	# D.24537
	je	.L942	#,
	.loc 1 4219 0
	movq	-32(%rbp), %rax	# insn, tmp132
	movq	64(%rax), %rax	# insn_14->fld[7].rtx, D.24535
	testq	%rax, %rax	# D.24535
	je	.L941	#,
	.loc 1 4220 0
	movq	-32(%rbp), %rax	# insn, tmp133
	movq	64(%rax), %rdx	# insn_14->fld[7].rtx, D.24535
	movq	-72(%rbp), %rax	# loop, tmp134
	movq	216(%rax), %rax	# loop_20(D)->scan_start, D.24535
	cmpq	%rax, %rdx	# D.24535, D.24535
	je	.L941	#,
	.loc 1 4221 0
	movq	-32(%rbp), %rax	# insn, tmp135
	movq	64(%rax), %rdx	# insn_14->fld[7].rtx, D.24535
	movq	-40(%rbp), %rax	# p, tmp136
	movq	%rdx, %rsi	# D.24535,
	movq	%rax, %rdi	# tmp136,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24537
	jne	.L941	#,
.L942:
	.loc 1 4223 0
	movl	$1, -52(%rbp)	#, maybe_multiple
	.loc 1 4224 0
	jmp	.L936	#
.L941:
	.loc 1 4226 0
	jmp	.L943	#
.L936:
.LBE53:
	.loc 1 4233 0
	movq	-40(%rbp), %rax	# p, tmp137
	movzwl	(%rax), %eax	# p_30->code, D.24536
	cmpw	$33, %ax	#, D.24536
	jne	.L944	#,
	.loc 1 4238 0
	movq	-40(%rbp), %rax	# p, tmp138
	movq	64(%rax), %rdx	# p_30->fld[7].rtx, D.24535
	movq	-72(%rbp), %rax	# loop, tmp139
	movq	208(%rax), %rax	# loop_20(D)->top, D.24535
	cmpq	%rax, %rdx	# D.24535, D.24535
	jne	.L945	#,
	.loc 1 4239 0 discriminator 1
	movq	-40(%rbp), %rax	# p, tmp140
	movq	24(%rax), %rax	# p_30->fld[2].rtx, D.24535
	movq	24(%rax), %rdx	# _53->fld[2].rtx, D.24535
	movq	-72(%rbp), %rax	# loop, tmp141
	movq	200(%rax), %rax	# loop_20(D)->end, D.24535
	.loc 1 4238 0 discriminator 1
	cmpq	%rax, %rdx	# D.24535, D.24535
	jne	.L946	#,
	.loc 1 4240 0
	movq	-40(%rbp), %rax	# p, tmp142
	movq	%rax, %rdi	# tmp142,
	call	any_uncondjump_p	#
	testl	%eax, %eax	# D.24537
	jne	.L944	#,
.L946:
	.loc 1 4241 0
	movq	-40(%rbp), %rax	# p, tmp143
	movq	24(%rax), %rdx	# p_30->fld[2].rtx, D.24535
	movq	-72(%rbp), %rax	# loop, tmp144
	movq	200(%rax), %rax	# loop_20(D)->end, D.24535
	cmpq	%rax, %rdx	# D.24535, D.24535
	jne	.L945	#,
	.loc 1 4241 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# p, tmp145
	movq	%rax, %rdi	# tmp145,
	call	any_condjump_p	#
	testl	%eax, %eax	# D.24537
	jne	.L944	#,
.L945:
.LBB54:
	.loc 1 4243 0 is_stmt 1
	movq	$0, -24(%rbp)	#, label
	.loc 1 4249 0
	movq	-72(%rbp), %rax	# loop, tmp146
	movq	232(%rax), %rax	# loop_20(D)->exit_labels, tmp147
	movq	%rax, -24(%rbp)	# tmp147, label
	jmp	.L947	#
.L950:
	.loc 1 4250 0
	movq	-24(%rbp), %rax	# label, tmp148
	movq	8(%rax), %rdx	# label_15->fld[0].rtx, D.24535
	movq	-40(%rbp), %rax	# p, tmp149
	movq	64(%rax), %rax	# p_30->fld[7].rtx, D.24535
	cmpq	%rax, %rdx	# D.24535, D.24535
	jne	.L948	#,
	.loc 1 4251 0
	jmp	.L949	#
.L948:
	.loc 1 4249 0
	movq	-24(%rbp), %rax	# label, tmp150
	movq	16(%rax), %rax	# label_15->fld[1].rtx, tmp151
	movq	%rax, -24(%rbp)	# tmp151, label
.L947:
	.loc 1 4249 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, label
	jne	.L950	#,
.L949:
	.loc 1 4253 0 is_stmt 1
	cmpq	$0, -24(%rbp)	#, label
	jne	.L951	#,
	.loc 1 4254 0
	movl	$1, -56(%rbp)	#, not_every_iteration
.LBE54:
	.loc 1 4242 0
	jmp	.L952	#
.L951:
	jmp	.L952	#
.L944:
	.loc 1 4257 0
	movq	-40(%rbp), %rax	# p, tmp152
	movzwl	(%rax), %eax	# p_30->code, D.24536
	cmpw	$37, %ax	#, D.24536
	jne	.L952	#,
	.loc 1 4265 0
	movq	-40(%rbp), %rax	# p, tmp153
	movl	40(%rax), %eax	# p_30->fld[4].rtint, D.24537
	cmpl	$-93, %eax	#, D.24537
	je	.L953	#,
	.loc 1 4266 0
	movq	-40(%rbp), %rax	# p, tmp154
	movl	40(%rax), %eax	# p_30->fld[4].rtint, D.24537
	cmpl	$-94, %eax	#, D.24537
	jne	.L954	#,
.L953:
	.loc 1 4267 0
	cmpl	$0, -44(%rbp)	#, loop_depth
	jne	.L954	#,
	.loc 1 4268 0
	movl	$0, -56(%rbp)	#, not_every_iteration
	jmp	.L952	#
.L954:
	.loc 1 4269 0
	movq	-40(%rbp), %rax	# p, tmp155
	movl	40(%rax), %eax	# p_30->fld[4].rtint, D.24537
	cmpl	$-96, %eax	#, D.24537
	jne	.L955	#,
	.loc 1 4270 0
	addl	$1, -44(%rbp)	#, loop_depth
	jmp	.L952	#
.L955:
	.loc 1 4271 0
	movq	-40(%rbp), %rax	# p, tmp156
	movl	40(%rax), %eax	# p_30->fld[4].rtint, D.24537
	cmpl	$-95, %eax	#, D.24537
	jne	.L952	#,
	.loc 1 4272 0
	subl	$1, -44(%rbp)	#, loop_depth
.L952:
	.loc 1 4283 0
	movq	-40(%rbp), %rax	# p, tmp157
	movzwl	(%rax), %eax	# p_30->code, D.24536
	cmpw	$33, %ax	#, D.24536
	jne	.L956	#,
	.loc 1 4284 0
	movq	-40(%rbp), %rax	# p, tmp158
	movq	64(%rax), %rdx	# p_30->fld[7].rtx, D.24535
	movq	-72(%rbp), %rax	# loop, tmp159
	movq	192(%rax), %rax	# loop_20(D)->start, D.24535
	movq	24(%rax), %rax	# _76->fld[2].rtx, D.24535
	cmpq	%rax, %rdx	# D.24535, D.24535
	jne	.L956	#,
	.loc 1 4285 0
	movl	$1, -48(%rbp)	#, past_loop_latch
.L956:
	.loc 1 4297 0
	cmpl	$0, -56(%rbp)	#, not_every_iteration
	je	.L957	#,
	.loc 1 4298 0
	cmpl	$0, -48(%rbp)	#, past_loop_latch
	jne	.L957	#,
	.loc 1 4299 0
	movq	-40(%rbp), %rax	# p, tmp160
	movzwl	(%rax), %eax	# p_30->code, D.24536
	cmpw	$36, %ax	#, D.24536
	jne	.L957	#,
	.loc 1 4300 0
	movq	-72(%rbp), %rax	# loop, tmp161
	movq	200(%rax), %rdx	# loop_20(D)->end, D.24535
	movq	-40(%rbp), %rax	# p, tmp162
	movq	%rdx, %rsi	# D.24535,
	movq	%rax, %rdi	# tmp162,
	call	no_labels_between_p	#
	testl	%eax, %eax	# D.24537
	je	.L957	#,
	.loc 1 4301 0
	movq	-72(%rbp), %rax	# loop, tmp163
	movq	176(%rax), %rdx	# loop_20(D)->cont, D.24535
	movq	-40(%rbp), %rax	# p, tmp164
	movq	%rdx, %rsi	# D.24535,
	movq	%rax, %rdi	# tmp164,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24537
	je	.L957	#,
	.loc 1 4302 0
	movl	$0, -56(%rbp)	#, not_every_iteration
.L957:
	.loc 1 4185 0
	movq	-40(%rbp), %rdx	# p, tmp165
	movq	-72(%rbp), %rax	# loop, tmp166
	movq	%rdx, %rsi	# tmp165,
	movq	%rax, %rdi	# tmp166,
	call	next_insn_in_loop	#
	movq	%rax, -40(%rbp)	# tmp167, p
.L935:
	.loc 1 4183 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, p
	jne	.L958	#,
	.loc 1 4304 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE39:
	.size	for_each_insn_in_loop, .-for_each_insn_in_loop
	.section	.rodata
.LC37:
	.string	"never incremented"
.LC38:
	.string	"count error"
.LC39:
	.string	"not induction variable"
.LC40:
	.string	"Biv %d: discarded, %s\n"
.LC41:
	.string	"Biv %d: verified\n"
	.text
	.type	loop_bivs_find, @function
loop_bivs_find:
.LFB40:
	.loc 1 4309 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# loop, loop
	.loc 1 4310 0
	movq	-40(%rbp), %rax	# loop, tmp98
	movq	160(%rax), %rax	# loop_6(D)->aux, D.24538
	addq	$184, %rax	#, tmp99
	movq	%rax, -16(%rbp)	# tmp99, regs
	.loc 1 4311 0
	movq	-40(%rbp), %rax	# loop, tmp100
	movq	160(%rax), %rax	# loop_6(D)->aux, D.24538
	addq	$208, %rax	#, tmp101
	movq	%rax, -8(%rbp)	# tmp101, ivs
	.loc 1 4315 0
	movq	-8(%rbp), %rax	# ivs, tmp102
	movq	$0, 16(%rax)	#, ivs_10->list
	.loc 1 4317 0
	movq	-40(%rbp), %rax	# loop, tmp103
	movl	$check_insn_for_bivs, %esi	#,
	movq	%rax, %rdi	# tmp103,
	call	for_each_insn_in_loop	#
	.loc 1 4321 0
	movq	-8(%rbp), %rax	# ivs, tmp107
	addq	$16, %rax	#, tmp106
	movq	%rax, -24(%rbp)	# tmp106, backbl
	movq	-24(%rbp), %rax	# backbl, tmp108
	movq	(%rax), %rax	# *backbl_11, tmp109
	movq	%rax, -32(%rbp)	# tmp109, bl
	jmp	.L961	#
.L970:
	.loc 1 4323 0
	movq	-8(%rbp), %rax	# ivs, tmp110
	movq	(%rax), %rdx	# ivs_10->regs, D.24539
	movq	-32(%rbp), %rax	# bl, tmp111
	movl	(%rax), %eax	# bl_1->regno, D.24540
	movl	%eax, %eax	# D.24540, D.24541
	salq	$4, %rax	#, D.24541
	addq	%rdx, %rax	# D.24539, D.24539
	movl	(%rax), %eax	# _17->type, D.24542
	cmpl	$1, %eax	#, D.24542
	jne	.L962	#,
	.loc 1 4326 0
	movq	-16(%rbp), %rax	# regs, tmp112
	movq	8(%rax), %rcx	# regs_8->array, D.24543
	movq	-32(%rbp), %rax	# bl, tmp113
	movl	(%rax), %eax	# bl_1->regno, D.24540
	movl	%eax, %edx	# D.24540, D.24541
	movq	%rdx, %rax	# D.24541, tmp114
	addq	%rax, %rax	# tmp114
	addq	%rdx, %rax	# D.24541, tmp114
	salq	$3, %rax	#, tmp115
	addq	%rcx, %rax	# D.24543, D.24543
	movl	4(%rax), %edx	# _23->n_times_set, D.24544
	movq	-32(%rbp), %rax	# bl, tmp116
	movl	4(%rax), %eax	# bl_1->biv_count, D.24544
	cmpl	%eax, %edx	# D.24544, D.24544
	jne	.L962	#,
	.loc 1 4329 0
	movq	-32(%rbp), %rax	# bl, tmp117
	movzbl	88(%rax), %eax	# *bl_1, D.24545
	andl	$1, %eax	#, D.24545
	testb	%al, %al	# D.24545
	jne	.L963	#,
.L962:
	.loc 1 4331 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.398
	testq	%rax, %rax	# loop_dump_stream.398
	je	.L964	#,
	.loc 1 4334 0
	movq	-8(%rbp), %rax	# ivs, tmp118
	movq	(%rax), %rdx	# ivs_10->regs, D.24539
	movq	-32(%rbp), %rax	# bl, tmp119
	movl	(%rax), %eax	# bl_1->regno, D.24540
	movl	%eax, %eax	# D.24540, D.24541
	salq	$4, %rax	#, D.24541
	addq	%rdx, %rax	# D.24539, D.24539
	movl	(%rax), %eax	# _37->type, D.24542
	.loc 1 4332 0
	cmpl	$1, %eax	#, D.24542
	jne	.L965	#,
	.loc 1 4336 0
	movq	-32(%rbp), %rax	# bl, tmp120
	movzbl	88(%rax), %eax	# *bl_1, D.24545
	andl	$1, %eax	#, D.24545
	.loc 1 4337 0
	testb	%al, %al	# D.24545
	jne	.L966	#,
	.loc 1 4337 0 is_stmt 0 discriminator 1
	movl	$.LC37, %eax	#, iftmp.400
	jmp	.L968	#
.L966:
	.loc 1 4337 0 discriminator 2
	movl	$.LC38, %eax	#, iftmp.400
	jmp	.L968	#
.L965:
	.loc 1 4332 0 is_stmt 1 discriminator 1
	movl	$.LC39, %eax	#, iftmp.399
.L968:
	.loc 1 4332 0 is_stmt 0 discriminator 2
	movq	-32(%rbp), %rdx	# bl, tmp121
	movl	(%rdx), %edx	# bl_1->regno, D.24540
	movq	loop_dump_stream(%rip), %rdi	# loop_dump_stream, loop_dump_stream.401
	movq	%rax, %rcx	# iftmp.399,
	movl	$.LC40, %esi	#,
	movl	$0, %eax	#,
	call	fprintf	#
.L964:
	.loc 1 4339 0 is_stmt 1
	movq	-8(%rbp), %rax	# ivs, tmp122
	movq	(%rax), %rdx	# ivs_10->regs, D.24539
	movq	-32(%rbp), %rax	# bl, tmp123
	movl	(%rax), %eax	# bl_1->regno, D.24540
	movl	%eax, %eax	# D.24540, D.24541
	salq	$4, %rax	#, D.24541
	addq	%rdx, %rax	# D.24539, D.24539
	movl	$2, (%rax)	#, _51->type
	.loc 1 4340 0
	movq	-32(%rbp), %rax	# bl, tmp124
	movq	64(%rax), %rdx	# bl_1->next, D.24546
	movq	-24(%rbp), %rax	# backbl, tmp125
	movq	%rdx, (%rax)	# D.24546, *backbl_3
	jmp	.L969	#
.L963:
	.loc 1 4344 0
	movq	-32(%rbp), %rax	# bl, tmp129
	addq	$64, %rax	#, tmp128
	movq	%rax, -24(%rbp)	# tmp128, backbl
	.loc 1 4346 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.402
	testq	%rax, %rax	# loop_dump_stream.402
	je	.L969	#,
	.loc 1 4347 0
	movq	-32(%rbp), %rax	# bl, tmp130
	movl	(%rax), %edx	# bl_1->regno, D.24540
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.403
	movl	$.LC41, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.403,
	movl	$0, %eax	#,
	call	fprintf	#
.L969:
	.loc 1 4321 0
	movq	-32(%rbp), %rax	# bl, tmp131
	movq	64(%rax), %rax	# bl_1->next, tmp132
	movq	%rax, -32(%rbp)	# tmp132, bl
.L961:
	.loc 1 4321 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, bl
	jne	.L970	#,
	.loc 1 4350 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE40:
	.size	loop_bivs_find, .-loop_bivs_find
	.type	loop_bivs_init_find, @function
loop_bivs_init_find:
.LFB41:
	.loc 1 4358 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# loop, loop
	.loc 1 4359 0
	movq	-72(%rbp), %rax	# loop, tmp91
	movq	160(%rax), %rax	# loop_4(D)->aux, D.24552
	addq	$208, %rax	#, tmp92
	movq	%rax, -40(%rbp)	# tmp92, ivs
	.loc 1 4368 0
	movl	$0, -52(%rbp)	#, call_seen
	.loc 1 4369 0
	movq	-72(%rbp), %rax	# loop, tmp93
	movq	192(%rax), %rax	# loop_4(D)->start, tmp94
	movq	%rax, -48(%rbp)	# tmp94, p
	jmp	.L972	#
.L978:
.LBB55:
	.loc 1 4373 0
	movq	-48(%rbp), %rax	# p, tmp95
	movq	%rax, note_insn(%rip)	# tmp95, note_insn
	.loc 1 4375 0
	movq	-48(%rbp), %rax	# p, tmp96
	movzwl	(%rax), %eax	# p_3->code, D.24553
	cmpw	$34, %ax	#, D.24553
	jne	.L973	#,
	.loc 1 4376 0
	movl	$1, -52(%rbp)	#, call_seen
.L973:
	.loc 1 4378 0
	movq	-48(%rbp), %rax	# p, tmp97
	movzwl	(%rax), %eax	# p_3->code, D.24553
	movzwl	%ax, %eax	# D.24553, D.24554
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24555
	cmpb	$105, %al	#, D.24555
	jne	.L974	#,
	.loc 1 4379 0
	movq	-48(%rbp), %rax	# p, tmp99
	movq	32(%rax), %rax	# p_3->fld[3].rtx, D.24556
	movq	-40(%rbp), %rdx	# ivs, tmp100
	movl	$record_initial, %esi	#,
	movq	%rax, %rdi	# D.24556,
	call	note_stores	#
.L974:
	.loc 1 4384 0
	movq	-48(%rbp), %rax	# p, tmp101
	movzwl	(%rax), %eax	# p_3->code, D.24553
	cmpw	$33, %ax	#, D.24553
	jne	.L975	#,
	.loc 1 4385 0
	movq	-48(%rbp), %rax	# p, tmp102
	movq	64(%rax), %rax	# p_3->fld[7].rtx, D.24556
	testq	%rax, %rax	# D.24556
	je	.L975	#,
	.loc 1 4386 0
	movq	-48(%rbp), %rax	# p, tmp103
	movq	64(%rax), %rax	# p_3->fld[7].rtx, D.24556
	movq	%rax, %rdi	# D.24556,
	call	next_real_insn	#
	movq	%rax, %rbx	#, D.24556
	movq	-72(%rbp), %rax	# loop, tmp104
	movq	200(%rax), %rax	# loop_4(D)->end, D.24556
	movq	%rax, %rdi	# D.24556,
	call	next_real_insn	#
	cmpq	%rax, %rbx	# D.24556, D.24556
	jne	.L975	#,
	.loc 1 4387 0
	movq	-48(%rbp), %rdx	# p, tmp105
	movq	-72(%rbp), %rax	# loop, tmp106
	movq	%rdx, %rsi	# tmp105,
	movq	%rax, %rdi	# tmp106,
	call	get_condition_for_loop	#
	movq	%rax, -32(%rbp)	# tmp107, test
	cmpq	$0, -32(%rbp)	#, test
	je	.L975	#,
	.loc 1 4388 0
	movq	-32(%rbp), %rax	# test, tmp108
	movq	8(%rax), %rax	# test_22->fld[0].rtx, D.24556
	movzwl	(%rax), %eax	# _23->code, D.24553
	cmpw	$61, %ax	#, D.24553
	jne	.L975	#,
	.loc 1 4389 0
	movq	-32(%rbp), %rax	# test, tmp109
	movq	8(%rax), %rax	# test_22->fld[0].rtx, D.24556
	movl	8(%rax), %edx	# _25->fld[0].rtuint, D.24557
	movl	max_reg_before_loop(%rip), %eax	# max_reg_before_loop, max_reg_before_loop.404
	cmpl	%eax, %edx	# max_reg_before_loop.404, D.24557
	jae	.L975	#,
	.loc 1 4390 0
	movq	-40(%rbp), %rax	# ivs, tmp110
	movq	(%rax), %rdx	# ivs_6->regs, D.24558
	movq	-32(%rbp), %rax	# test, tmp111
	movq	8(%rax), %rax	# test_22->fld[0].rtx, D.24556
	movl	8(%rax), %eax	# _29->fld[0].rtuint, D.24557
	movl	%eax, %eax	# D.24557, D.24559
	salq	$4, %rax	#, D.24559
	addq	%rdx, %rax	# D.24558, D.24558
	movq	8(%rax), %rax	# _33->iv.class, tmp112
	movq	%rax, -24(%rbp)	# tmp112, bl
	cmpq	$0, -24(%rbp)	#, bl
	je	.L975	#,
	.loc 1 4391 0
	movq	-72(%rbp), %rax	# loop, tmp113
	movq	192(%rax), %rcx	# loop_4(D)->start, D.24556
	movq	-32(%rbp), %rax	# test, tmp114
	movq	16(%rax), %rax	# test_22->fld[1].rtx, D.24556
	movl	-52(%rbp), %edx	# call_seen, tmp115
	movq	-48(%rbp), %rsi	# p, tmp116
	movq	%rax, %rdi	# D.24556,
	call	valid_initial_value_p	#
	testl	%eax, %eax	# D.24554
	je	.L975	#,
	.loc 1 4392 0
	movq	-24(%rbp), %rax	# bl, tmp117
	movq	72(%rax), %rax	# bl_34->init_insn, D.24556
	testq	%rax, %rax	# D.24556
	jne	.L975	#,
	.loc 1 4395 0
	movq	-32(%rbp), %rax	# test, tmp118
	movzwl	(%rax), %eax	# test_22->code, D.24553
	cmpw	$102, %ax	#, D.24553
	jne	.L976	#,
	.loc 1 4397 0
	movq	-24(%rbp), %rax	# bl, tmp119
	movq	-48(%rbp), %rdx	# p, tmp120
	movq	%rdx, 72(%rax)	# tmp120, bl_34->init_insn
	.loc 1 4398 0
	movq	-32(%rbp), %rax	# test, tmp121
	movq	16(%rax), %rdx	# test_22->fld[1].rtx, D.24556
	movq	-32(%rbp), %rax	# test, tmp122
	movq	8(%rax), %rax	# test_22->fld[0].rtx, D.24556
	movq	%rdx, %rcx	# D.24556,
	movq	%rax, %rdx	# D.24556,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-24(%rbp), %rdx	# bl, tmp123
	movq	%rax, 80(%rdx)	# D.24556, bl_34->init_set
	jmp	.L975	#
.L976:
	.loc 1 4402 0
	movq	-24(%rbp), %rax	# bl, tmp124
	movq	-32(%rbp), %rdx	# test, tmp125
	movq	%rdx, 48(%rax)	# tmp125, bl_34->initial_test
.L975:
.LBE55:
	.loc 1 4369 0
	movq	-48(%rbp), %rax	# p, tmp126
	movq	16(%rax), %rax	# p_3->fld[1].rtx, tmp127
	movq	%rax, -48(%rbp)	# tmp127, p
.L972:
	.loc 1 4369 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, p
	je	.L971	#,
	.loc 1 4369 0 discriminator 2
	movq	-48(%rbp), %rax	# p, tmp128
	movzwl	(%rax), %eax	# p_3->code, D.24553
	cmpw	$36, %ax	#, D.24553
	jne	.L978	#,
.L971:
	.loc 1 4405 0 is_stmt 1
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE41:
	.size	loop_bivs_init_find, .-loop_bivs_init_find
	.section	.rodata
	.align 8
.LC42:
	.string	"Biv %d: initialized at insn %d: initial value "
.LC43:
	.string	"is complex\n"
	.text
	.type	loop_bivs_check, @function
loop_bivs_check:
.LFB42:
	.loc 1 4414 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# loop, loop
	.loc 1 4415 0
	movq	-56(%rbp), %rax	# loop, tmp122
	movq	160(%rax), %rax	# loop_4(D)->aux, D.24560
	addq	$208, %rax	#, tmp123
	movq	%rax, -16(%rbp)	# tmp123, ivs
	.loc 1 4420 0
	movq	-16(%rbp), %rax	# ivs, tmp127
	addq	$16, %rax	#, tmp126
	movq	%rax, -40(%rbp)	# tmp126, backbl
	jmp	.L980	#
.L991:
.LBB56:
	.loc 1 4425 0
	movq	-8(%rbp), %rax	# bl, tmp128
	movq	72(%rax), %rax	# bl_8->init_insn, D.24561
	testq	%rax, %rax	# D.24561
	jne	.L981	#,
	.loc 1 4426 0
	jmp	.L982	#
.L981:
	.loc 1 4430 0
	movq	-8(%rbp), %rax	# bl, tmp129
	movq	72(%rax), %rax	# bl_8->init_insn, D.24561
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.24561,
	call	find_reg_note	#
	movq	%rax, -24(%rbp)	# tmp130, note
	cmpq	$0, -24(%rbp)	#, note
	je	.L983	#,
	.loc 1 4431 0
	movq	-24(%rbp), %rax	# note, tmp131
	movq	8(%rax), %rax	# note_11->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _12->code, D.24562
	cmpw	$67, %ax	#, D.24562
	je	.L984	#,
	.loc 1 4431 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# note, tmp132
	movq	8(%rax), %rax	# note_11->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _14->code, D.24562
	cmpw	$68, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp133
	movq	8(%rax), %rax	# note_11->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _16->code, D.24562
	cmpw	$54, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp134
	movq	8(%rax), %rax	# note_11->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _18->code, D.24562
	cmpw	$55, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp135
	movq	8(%rax), %rax	# note_11->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _20->code, D.24562
	cmpw	$58, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp136
	movq	8(%rax), %rax	# note_11->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _22->code, D.24562
	cmpw	$134, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp137
	movq	8(%rax), %rax	# note_11->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _24->code, D.24562
	cmpw	$56, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp138
	movq	8(%rax), %rax	# note_11->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _26->code, D.24562
	cmpw	$140, %ax	#, D.24562
	je	.L984	#,
.L983:
	.loc 1 4432 0 is_stmt 1
	movq	-8(%rbp), %rax	# bl, tmp139
	movq	72(%rax), %rax	# bl_8->init_insn, D.24561
	movl	$0, %edx	#,
	movl	$3, %esi	#,
	movq	%rax, %rdi	# D.24561,
	call	find_reg_note	#
	movq	%rax, -24(%rbp)	# tmp140, note
	cmpq	$0, -24(%rbp)	#, note
	je	.L985	#,
	.loc 1 4433 0
	movq	-24(%rbp), %rax	# note, tmp141
	movq	8(%rax), %rax	# note_29->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _30->code, D.24562
	cmpw	$67, %ax	#, D.24562
	je	.L984	#,
	.loc 1 4433 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# note, tmp142
	movq	8(%rax), %rax	# note_29->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _32->code, D.24562
	cmpw	$68, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp143
	movq	8(%rax), %rax	# note_29->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _34->code, D.24562
	cmpw	$54, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp144
	movq	8(%rax), %rax	# note_29->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _36->code, D.24562
	cmpw	$55, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp145
	movq	8(%rax), %rax	# note_29->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _38->code, D.24562
	cmpw	$58, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp146
	movq	8(%rax), %rax	# note_29->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _40->code, D.24562
	cmpw	$134, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp147
	movq	8(%rax), %rax	# note_29->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _42->code, D.24562
	cmpw	$56, %ax	#, D.24562
	je	.L984	#,
	movq	-24(%rbp), %rax	# note, tmp148
	movq	8(%rax), %rax	# note_29->fld[0].rtx, D.24561
	movzwl	(%rax), %eax	# _44->code, D.24562
	cmpw	$140, %ax	#, D.24562
	jne	.L985	#,
.L984:
	.loc 1 4434 0 is_stmt 1
	movq	-24(%rbp), %rax	# note, tmp149
	movq	8(%rax), %rax	# note_3->fld[0].rtx, tmp150
	movq	%rax, -32(%rbp)	# tmp150, src
	jmp	.L986	#
.L985:
	.loc 1 4436 0
	movq	-8(%rbp), %rax	# bl, tmp151
	movq	80(%rax), %rax	# bl_8->init_set, D.24561
	movq	16(%rax), %rax	# _46->fld[1].rtx, tmp152
	movq	%rax, -32(%rbp)	# tmp152, src
.L986:
	.loc 1 4438 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.405
	testq	%rax, %rax	# loop_dump_stream.405
	je	.L987	#,
	.loc 1 4441 0
	movq	-8(%rbp), %rax	# bl, tmp153
	movq	72(%rax), %rax	# bl_8->init_insn, D.24561
	.loc 1 4439 0
	movl	8(%rax), %ecx	# _50->fld[0].rtint, D.24563
	movq	-8(%rbp), %rax	# bl, tmp154
	movl	(%rax), %edx	# bl_8->regno, D.24564
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.406
	movl	$.LC42, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.406,
	movl	$0, %eax	#,
	call	fprintf	#
.L987:
	.loc 1 4443 0
	movq	-32(%rbp), %rax	# src, tmp155
	movzbl	2(%rax), %edx	# src_2->mode, D.24565
	movq	cfun(%rip), %rax	# cfun, cfun.407
	movq	24(%rax), %rax	# cfun.407_55->emit, D.24566
	movq	80(%rax), %rcx	# _56->x_regno_reg_rtx, D.24567
	movq	-8(%rbp), %rax	# bl, tmp156
	movl	(%rax), %eax	# bl_8->regno, D.24564
	movl	%eax, %eax	# D.24564, D.24568
	salq	$3, %rax	#, D.24568
	addq	%rcx, %rax	# D.24567, D.24567
	movq	(%rax), %rax	# *_61, D.24561
	movzbl	2(%rax), %eax	# _62->mode, D.24565
	cmpb	%al, %dl	# D.24565, D.24565
	je	.L988	#,
	.loc 1 4444 0
	movq	-32(%rbp), %rax	# src, tmp157
	movzbl	2(%rax), %eax	# src_2->mode, D.24565
	testb	%al, %al	# D.24565
	jne	.L989	#,
.L988:
	.loc 1 4445 0
	movq	-56(%rbp), %rax	# loop, tmp158
	movq	192(%rax), %rcx	# loop_4(D)->start, D.24561
	.loc 1 4446 0
	movq	-56(%rbp), %rax	# loop, tmp159
	movq	160(%rax), %rax	# loop_4(D)->aux, D.24560
	.loc 1 4445 0
	movl	232(%rax), %edx	# MEM[(struct loop_info *)_66].pre_header_has_call, D.24563
	movq	-8(%rbp), %rax	# bl, tmp160
	movq	72(%rax), %rsi	# bl_8->init_insn, D.24561
	movq	-32(%rbp), %rax	# src, tmp161
	movq	%rax, %rdi	# tmp161,
	call	valid_initial_value_p	#
	testl	%eax, %eax	# D.24563
	je	.L989	#,
	.loc 1 4449 0
	movq	-8(%rbp), %rax	# bl, tmp162
	movq	-32(%rbp), %rdx	# src, tmp163
	movq	%rdx, 40(%rax)	# tmp163, bl_8->initial_value
	.loc 1 4451 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.408
	testq	%rax, %rax	# loop_dump_stream.408
	je	.L990	#,
	.loc 1 4453 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.409
	movq	-32(%rbp), %rdx	# src, tmp164
	movq	%rdx, %rsi	# tmp164,
	movq	%rax, %rdi	# loop_dump_stream.409,
	call	print_simple_rtl	#
	.loc 1 4454 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.410
	movq	%rax, %rsi	# loop_dump_stream.410,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 4451 0
	jmp	.L982	#
.L990:
	.loc 1 4451 0 is_stmt 0 discriminator 1
	jmp	.L982	#
.L989:
	.loc 1 4459 0 is_stmt 1
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.411
	testq	%rax, %rax	# loop_dump_stream.411
	je	.L982	#,
	.loc 1 4460 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.412
	movq	%rax, %rcx	# loop_dump_stream.412,
	movl	$11, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC43, %edi	#,
	call	fwrite	#
.L982:
.LBE56:
	.loc 1 4420 0
	movq	-8(%rbp), %rax	# bl, tmp168
	addq	$64, %rax	#, tmp167
	movq	%rax, -40(%rbp)	# tmp167, backbl
.L980:
	.loc 1 4420 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# backbl, tmp169
	movq	(%rax), %rax	# *backbl_1, tmp170
	movq	%rax, -8(%rbp)	# tmp170, bl
	cmpq	$0, -8(%rbp)	#, bl
	jne	.L991	#,
	.loc 1 4462 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE42:
	.size	loop_bivs_check, .-loop_bivs_check
	.type	loop_givs_find, @function
loop_givs_find:
.LFB43:
	.loc 1 4470 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	.loc 1 4471 0
	movq	-8(%rbp), %rax	# loop, tmp59
	movl	$check_insn_for_givs, %esi	#,
	movq	%rax, %rdi	# tmp59,
	call	for_each_insn_in_loop	#
	.loc 1 4472 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE43:
	.size	loop_givs_find, .-loop_givs_find
	.type	loop_givs_check, @function
loop_givs_check:
.LFB44:
	.loc 1 4482 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# loop, loop
	.loc 1 4483 0
	movq	-40(%rbp), %rax	# loop, tmp64
	movq	160(%rax), %rax	# loop_3(D)->aux, D.24571
	addq	$208, %rax	#, tmp65
	movq	%rax, -8(%rbp)	# tmp65, ivs
	.loc 1 4486 0
	movq	-8(%rbp), %rax	# ivs, tmp66
	movq	16(%rax), %rax	# ivs_5->list, tmp67
	movq	%rax, -24(%rbp)	# tmp67, bl
	jmp	.L994	#
.L998:
.LBB57:
	.loc 1 4490 0
	movq	-24(%rbp), %rax	# bl, tmp68
	movq	24(%rax), %rax	# bl_1->giv, tmp69
	movq	%rax, -16(%rbp)	# tmp69, v
	jmp	.L995	#
.L997:
	.loc 1 4491 0
	movq	-16(%rbp), %rax	# v, tmp70
	movzbl	100(%rax), %eax	# *v_2, D.24572
	andl	$1, %eax	#, D.24572
	testb	%al, %al	# D.24572
	jne	.L996	#,
	.loc 1 4491 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v, tmp71
	movzbl	100(%rax), %eax	# *v_2, D.24572
	andl	$2, %eax	#, D.24572
	testb	%al, %al	# D.24572
	jne	.L996	#,
	.loc 1 4492 0 is_stmt 1
	movq	-16(%rbp), %rdx	# v, tmp72
	movq	-40(%rbp), %rax	# loop, tmp73
	movq	%rdx, %rsi	# tmp72,
	movq	%rax, %rdi	# tmp73,
	call	check_final_value	#
.L996:
	.loc 1 4490 0
	movq	-16(%rbp), %rax	# v, tmp74
	movq	128(%rax), %rax	# v_2->next_iv, tmp75
	movq	%rax, -16(%rbp)	# tmp75, v
.L995:
	.loc 1 4490 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, v
	jne	.L997	#,
.LBE57:
	.loc 1 4486 0 is_stmt 1
	movq	-24(%rbp), %rax	# bl, tmp76
	movq	64(%rax), %rax	# bl_1->next, tmp77
	movq	%rax, -24(%rbp)	# tmp77, bl
.L994:
	.loc 1 4486 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, bl
	jne	.L998	#,
	.loc 1 4494 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE44:
	.size	loop_givs_check, .-loop_givs_check
	.section	.rodata
.LC44:
	.string	"Cannot eliminate biv %d.\n"
	.align 8
.LC45:
	.string	"First use: insn %d, last use: insn %d.\n"
	.text
	.type	loop_biv_eliminable_p, @function
loop_biv_eliminable_p:
.LFB45:
	.loc 1 4508 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	movq	%rsi, -16(%rbp)	# bl, bl
	movl	%edx, -20(%rbp)	# threshold, threshold
	movl	%ecx, -24(%rbp)	# insn_count, insn_count
	.loc 1 4530 0
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.413
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.414
	movq	-16(%rbp), %rdx	# bl, tmp122
	movl	(%rdx), %edx	# bl_4(D)->regno, D.24574
	movl	%edx, %edx	# D.24574, tmp123
	addq	$4, %rdx	#, tmp124
	movq	(%rax,%rdx,8), %rax	# reg_n_info.414_3->data.reg, D.24575
	movl	4(%rax), %eax	# _6->last_uid, D.24573
	cltq
	salq	$2, %rax	#, D.24576
	addq	%rcx, %rax	# uid_luid.413, D.24577
	movl	(%rax), %edx	# *_10, D.24573
	movq	-8(%rbp), %rax	# loop, tmp125
	movq	200(%rax), %rax	# loop_12(D)->end, D.24578
	movl	8(%rax), %ecx	# _13->fld[0].rtint, D.24573
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.416
	cmpl	%eax, %ecx	# max_uid_for_loop.416, D.24573
	jge	.L1000	#,
	.loc 1 4530 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.417
	movq	-8(%rbp), %rax	# loop, tmp126
	movq	200(%rax), %rax	# loop_12(D)->end, D.24578
	movl	8(%rax), %eax	# _17->fld[0].rtint, D.24573
	cltq
	salq	$2, %rax	#, D.24576
	addq	%rcx, %rax	# uid_luid.417, D.24577
	movl	(%rax), %eax	# *_21, iftmp.415
	cmpl	%eax, %edx	# iftmp.415, D.24573
	jge	.L1002	#,
	jmp	.L1009	#
.L1000:
	.loc 1 4530 0 discriminator 2
	movl	$__FUNCTION__.13452, %edx	#,
	movl	$4530, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1009:
	.loc 1 4531 0 is_stmt 1
	movq	-16(%rbp), %rax	# bl, tmp127
	movq	72(%rax), %rax	# bl_4(D)->init_insn, D.24578
	testq	%rax, %rax	# D.24578
	je	.L1002	#,
	.loc 1 4532 0
	movq	-16(%rbp), %rax	# bl, tmp128
	movq	72(%rax), %rax	# bl_4(D)->init_insn, D.24578
	movl	8(%rax), %edx	# _24->fld[0].rtint, D.24573
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.418
	cmpl	%eax, %edx	# max_uid_for_loop.418, D.24573
	jge	.L1002	#,
	.loc 1 4533 0
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.419
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.420
	movq	-16(%rbp), %rdx	# bl, tmp129
	movl	(%rdx), %edx	# bl_4(D)->regno, D.24574
	movl	%edx, %edx	# D.24574, tmp130
	addq	$4, %rdx	#, tmp131
	movq	(%rax,%rdx,8), %rax	# reg_n_info.420_28->data.reg, D.24575
	movl	(%rax), %eax	# _30->first_uid, D.24573
	cltq
	salq	$2, %rax	#, D.24576
	addq	%rcx, %rax	# uid_luid.419, D.24577
	movl	(%rax), %edx	# *_34, D.24573
	movq	-16(%rbp), %rax	# bl, tmp132
	movq	72(%rax), %rax	# bl_4(D)->init_insn, D.24578
	movl	8(%rax), %ecx	# _36->fld[0].rtint, D.24573
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.422
	cmpl	%eax, %ecx	# max_uid_for_loop.422, D.24573
	jge	.L1003	#,
	.loc 1 4533 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.423
	movq	-16(%rbp), %rax	# bl, tmp133
	movq	72(%rax), %rax	# bl_4(D)->init_insn, D.24578
	movl	8(%rax), %eax	# _40->fld[0].rtint, D.24573
	cltq
	salq	$2, %rax	#, D.24576
	addq	%rcx, %rax	# uid_luid.423, D.24577
	movl	(%rax), %eax	# *_44, iftmp.421
	cmpl	%eax, %edx	# iftmp.421, D.24573
	jl	.L1002	#,
	jmp	.L1010	#
.L1003:
	.loc 1 4533 0 discriminator 2
	movl	$__FUNCTION__.13452, %edx	#,
	movl	$4533, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1010:
	.loc 1 4534 0 is_stmt 1
	movq	-16(%rbp), %rax	# bl, tmp134
	movq	80(%rax), %rax	# bl_4(D)->init_set, D.24578
	movq	16(%rax), %rdx	# _46->fld[1].rtx, D.24578
	movq	-16(%rbp), %rax	# bl, tmp135
	movq	8(%rax), %rax	# bl_4(D)->biv, D.24579
	movq	32(%rax), %rax	# _48->dest_reg, D.24578
	movq	%rdx, %rsi	# D.24578,
	movq	%rax, %rdi	# D.24578,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24573
	je	.L1005	#,
.L1002:
	.loc 1 4535 0
	movq	-16(%rbp), %rdx	# bl, tmp136
	movq	-8(%rbp), %rax	# loop, tmp137
	movq	%rdx, %rsi	# tmp136,
	movq	%rax, %rdi	# tmp137,
	call	final_biv_value	#
	movq	-16(%rbp), %rdx	# bl, tmp138
	movq	%rax, 56(%rdx)	# D.24578, bl_4(D)->final_value
	movq	-16(%rbp), %rax	# bl, tmp139
	movq	56(%rax), %rax	# bl_4(D)->final_value, D.24578
	testq	%rax, %rax	# D.24578
	je	.L1006	#,
.L1005:
	.loc 1 4536 0
	movl	-24(%rbp), %ecx	# insn_count, tmp140
	movl	-20(%rbp), %edx	# threshold, tmp141
	movq	-16(%rbp), %rsi	# bl, tmp142
	movq	-8(%rbp), %rax	# loop, tmp143
	movl	%ecx, %r8d	# tmp140,
	movl	%edx, %ecx	# tmp141,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp143,
	call	maybe_eliminate_biv	#
	jmp	.L1007	#
.L1006:
	.loc 1 4538 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.424
	testq	%rax, %rax	# loop_dump_stream.424
	je	.L1008	#,
	.loc 1 4540 0
	movq	-16(%rbp), %rax	# bl, tmp144
	movl	(%rax), %edx	# bl_4(D)->regno, D.24574
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.425
	movl	$.LC44, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.425,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 4546 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.426
	movq	-16(%rbp), %rdx	# bl, tmp145
	movl	(%rdx), %edx	# bl_4(D)->regno, D.24574
	movl	%edx, %edx	# D.24574, tmp146
	addq	$4, %rdx	#, tmp147
	movq	(%rax,%rdx,8), %rax	# reg_n_info.426_56->data.reg, D.24575
	.loc 1 4543 0
	movl	4(%rax), %ecx	# _58->last_uid, D.24573
	.loc 1 4545 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.427
	movq	-16(%rbp), %rdx	# bl, tmp148
	movl	(%rdx), %edx	# bl_4(D)->regno, D.24574
	movl	%edx, %edx	# D.24574, tmp149
	addq	$4, %rdx	#, tmp150
	movq	(%rax,%rdx,8), %rax	# reg_n_info.427_60->data.reg, D.24575
	.loc 1 4543 0
	movl	(%rax), %edx	# _62->first_uid, D.24573
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.428
	movl	$.LC45, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.428,
	movl	$0, %eax	#,
	call	fprintf	#
.L1008:
	.loc 1 4548 0
	movl	$0, %eax	#, D.24573
.L1007:
	.loc 1 4549 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE45:
	.size	loop_biv_eliminable_p, .-loop_biv_eliminable_p
	.type	loop_givs_reduce, @function
loop_givs_reduce:
.LFB46:
	.loc 1 4558 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -72(%rbp)	# loop, loop
	movq	%rsi, -80(%rbp)	# bl, bl
	.loc 1 4561 0
	movq	-80(%rbp), %rax	# bl, tmp81
	movq	24(%rax), %rax	# bl_4(D)->giv, tmp82
	movq	%rax, -56(%rbp)	# tmp82, v
	jmp	.L1012	#
.L1022:
.LBB58:
	.loc 1 4564 0
	movq	-56(%rbp), %rax	# v, tmp83
	movzbl	100(%rax), %eax	# *v_1, D.24582
	andl	$4, %eax	#, D.24582
	testb	%al, %al	# D.24582
	jne	.L1013	#,
	.loc 1 4564 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# v, tmp84
	movq	136(%rax), %rax	# v_1->same, D.24583
	testq	%rax, %rax	# D.24583
	jne	.L1013	#,
.LBB59:
	.loc 1 4566 0 is_stmt 1
	movl	$0, -60(%rbp)	#, auto_inc_opt
	.loc 1 4570 0
	movq	-56(%rbp), %rax	# v, tmp85
	movq	8(%rax), %rax	# v_1->new_reg, D.24584
	testq	%rax, %rax	# D.24584
	jne	.L1014	#,
	.loc 1 4571 0
	movq	-56(%rbp), %rax	# v, tmp86
	movl	48(%rax), %eax	# v_1->mode, D.24585
	movl	%eax, %edi	# D.24585,
	call	gen_reg_rtx	#
	movq	-56(%rbp), %rdx	# v, tmp87
	movq	%rax, 8(%rdx)	# D.24584, v_1->new_reg
.L1014:
	.loc 1 4652 0
	movq	-80(%rbp), %rax	# bl, tmp88
	movq	8(%rax), %rax	# bl_4(D)->biv, tmp89
	movq	%rax, -48(%rbp)	# tmp89, tv
	jmp	.L1015	#
.L1021:
.LBB60:
	.loc 1 4656 0
	cmpl	$0, -60(%rbp)	#, auto_inc_opt
	jne	.L1016	#,
	.loc 1 4657 0
	movq	-48(%rbp), %rax	# tv, tmp90
	movq	(%rax), %rax	# tv_2->insn, tmp91
	movq	%rax, -40(%rbp)	# tmp91, insert_before
	jmp	.L1017	#
.L1016:
	.loc 1 4658 0
	cmpl	$1, -60(%rbp)	#, auto_inc_opt
	jne	.L1018	#,
	.loc 1 4659 0
	movq	-56(%rbp), %rax	# v, tmp92
	movq	(%rax), %rax	# v_1->insn, D.24584
	movq	24(%rax), %rax	# _15->fld[2].rtx, tmp93
	movq	%rax, -40(%rbp)	# tmp93, insert_before
	jmp	.L1017	#
.L1018:
	.loc 1 4661 0
	movq	-56(%rbp), %rax	# v, tmp94
	movq	(%rax), %rax	# v_1->insn, tmp95
	movq	%rax, -40(%rbp)	# tmp95, insert_before
.L1017:
	.loc 1 4663 0
	movq	-48(%rbp), %rax	# tv, tmp96
	movq	64(%rax), %rdx	# tv_2->mult_val, D.24584
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, D.24584
	cmpq	%rax, %rdx	# D.24584, D.24584
	jne	.L1019	#,
	.loc 1 4664 0
	movq	-56(%rbp), %rax	# v, tmp97
	movq	8(%rax), %r8	# v_1->new_reg, D.24584
	movq	-56(%rbp), %rax	# v, tmp98
	movq	8(%rax), %rcx	# v_1->new_reg, D.24584
	movq	-56(%rbp), %rax	# v, tmp99
	movq	64(%rax), %rdx	# v_1->mult_val, D.24584
	movq	-48(%rbp), %rax	# tv, tmp100
	movq	72(%rax), %rsi	# tv_2->add_val, D.24584
	movq	-72(%rbp), %rax	# loop, tmp101
	movq	-40(%rbp), %rdi	# insert_before, tmp102
	movq	%rdi, (%rsp)	# tmp102,
	movl	$0, %r9d	#,
	movq	%rax, %rdi	# tmp101,
	call	loop_iv_add_mult_emit_before	#
	jmp	.L1020	#
.L1019:
	.loc 1 4670 0
	movq	-56(%rbp), %rax	# v, tmp103
	movq	8(%rax), %r8	# v_1->new_reg, D.24584
	movq	-56(%rbp), %rax	# v, tmp104
	movq	72(%rax), %rcx	# v_1->add_val, D.24584
	movq	-56(%rbp), %rax	# v, tmp105
	movq	64(%rax), %rdx	# v_1->mult_val, D.24584
	movq	-48(%rbp), %rax	# tv, tmp106
	movq	72(%rax), %rsi	# tv_2->add_val, D.24584
	movq	-72(%rbp), %rax	# loop, tmp107
	movq	-40(%rbp), %rdi	# insert_before, tmp108
	movq	%rdi, (%rsp)	# tmp108,
	movl	$0, %r9d	#,
	movq	%rax, %rdi	# tmp107,
	call	loop_iv_add_mult_emit_before	#
.L1020:
.LBE60:
	.loc 1 4652 0
	movq	-48(%rbp), %rax	# tv, tmp109
	movq	128(%rax), %rax	# tv_2->next_iv, tmp110
	movq	%rax, -48(%rbp)	# tmp110, tv
.L1015:
	.loc 1 4652 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, tv
	jne	.L1021	#,
	.loc 1 4677 0 is_stmt 1
	movq	-56(%rbp), %rax	# v, tmp111
	movq	8(%rax), %r13	# v_1->new_reg, D.24584
	movq	-56(%rbp), %rax	# v, tmp112
	movq	72(%rax), %r12	# v_1->add_val, D.24584
	movq	-56(%rbp), %rax	# v, tmp113
	movq	64(%rax), %rbx	# v_1->mult_val, D.24584
	movq	-80(%rbp), %rax	# bl, tmp114
	movq	40(%rax), %rdx	# bl_4(D)->initial_value, D.24584
	movq	-56(%rbp), %rax	# v, tmp115
	movq	%rdx, %rsi	# D.24584,
	movq	%rax, %rdi	# tmp115,
	call	extend_value_for_giv	#
	movq	%rax, %rsi	#, D.24584
	movq	-72(%rbp), %rax	# loop, tmp116
	movq	%r13, %r8	# D.24584,
	movq	%r12, %rcx	# D.24584,
	movq	%rbx, %rdx	# D.24584,
	movq	%rax, %rdi	# tmp116,
	call	loop_iv_add_mult_hoist	#
.L1013:
.LBE59:
.LBE58:
	.loc 1 4561 0
	movq	-56(%rbp), %rax	# v, tmp117
	movq	128(%rax), %rax	# v_1->next_iv, tmp118
	movq	%rax, -56(%rbp)	# tmp118, v
.L1012:
	.loc 1 4561 0 is_stmt 0 discriminator 1
	cmpq	$0, -56(%rbp)	#, v
	jne	.L1022	#,
	.loc 1 4682 0 is_stmt 1
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE46:
	.size	loop_givs_reduce, .-loop_givs_reduce
	.type	loop_givs_dead_check, @function
loop_givs_dead_check:
.LFB47:
	.loc 1 4694 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# loop, loop
	movq	%rsi, -32(%rbp)	# bl, bl
	.loc 1 4697 0
	movq	-32(%rbp), %rax	# bl, tmp80
	movq	24(%rax), %rax	# bl_3(D)->giv, tmp81
	movq	%rax, -16(%rbp)	# tmp81, v
	jmp	.L1024	#
.L1031:
	.loc 1 4699 0
	movq	-16(%rbp), %rax	# v, tmp82
	movzbl	100(%rax), %eax	# *v_1, D.24586
	andl	$4, %eax	#, D.24586
	testb	%al, %al	# D.24586
	jne	.L1025	#,
	.loc 1 4700 0
	movq	-16(%rbp), %rax	# v, tmp83
	movq	136(%rax), %rax	# v_1->same, D.24587
	testq	%rax, %rax	# D.24587
	je	.L1026	#,
	.loc 1 4700 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v, tmp84
	movq	136(%rax), %rax	# v_1->same, D.24587
	movzbl	100(%rax), %eax	# *_8, D.24586
	andl	$4, %eax	#, D.24586
	testb	%al, %al	# D.24586
	je	.L1026	#,
.L1025:
	.loc 1 4701 0 is_stmt 1
	jmp	.L1027	#
.L1026:
	.loc 1 4703 0
	movq	-16(%rbp), %rax	# v, tmp85
	movl	24(%rax), %eax	# v_1->giv_type, D.24588
	cmpl	$1, %eax	#, D.24588
	jne	.L1027	#,
	.loc 1 4704 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.429
	movq	-16(%rbp), %rdx	# v, tmp86
	movq	32(%rdx), %rdx	# v_1->dest_reg, D.24589
	movl	8(%rdx), %edx	# _13->fld[0].rtuint, D.24590
	movl	%edx, %edx	# D.24590, tmp87
	addq	$4, %rdx	#, tmp88
	movq	(%rax,%rdx,8), %rax	# reg_n_info.429_12->data.reg, D.24591
	movl	(%rax), %edx	# _15->first_uid, D.24592
	movq	-16(%rbp), %rax	# v, tmp89
	movq	(%rax), %rax	# v_1->insn, D.24589
	movl	8(%rax), %eax	# _17->fld[0].rtint, D.24592
	cmpl	%eax, %edx	# D.24592, D.24592
	jne	.L1027	#,
.LBB61:
	.loc 1 4708 0
	movq	-32(%rbp), %rax	# bl, tmp90
	movq	24(%rax), %rax	# bl_3(D)->giv, tmp91
	movq	%rax, -8(%rbp)	# tmp91, v1
	jmp	.L1028	#
.L1030:
	.loc 1 4709 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.430
	movq	-16(%rbp), %rdx	# v, tmp92
	movq	32(%rdx), %rdx	# v_1->dest_reg, D.24589
	movl	8(%rdx), %edx	# _21->fld[0].rtuint, D.24590
	movl	%edx, %edx	# D.24590, tmp93
	addq	$4, %rdx	#, tmp94
	movq	(%rax,%rdx,8), %rax	# reg_n_info.430_20->data.reg, D.24591
	movl	4(%rax), %edx	# _23->last_uid, D.24592
	movq	-8(%rbp), %rax	# v1, tmp95
	movq	(%rax), %rax	# v1_2->insn, D.24589
	movl	8(%rax), %eax	# _25->fld[0].rtint, D.24592
	cmpl	%eax, %edx	# D.24592, D.24592
	jne	.L1029	#,
	.loc 1 4710 0
	movq	-16(%rbp), %rax	# v, tmp96
	movzbl	100(%rax), %edx	# v_1->maybe_dead, tmp99
	orl	$-128, %edx	#, tmp100
	movb	%dl, 100(%rax)	# tmp100, v_1->maybe_dead
.L1029:
	.loc 1 4708 0
	movq	-8(%rbp), %rax	# v1, tmp101
	movq	128(%rax), %rax	# v1_2->next_iv, tmp102
	movq	%rax, -8(%rbp)	# tmp102, v1
.L1028:
	.loc 1 4708 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, v1
	jne	.L1030	#,
.L1027:
.LBE61:
	.loc 1 4697 0 is_stmt 1
	movq	-16(%rbp), %rax	# v, tmp103
	movq	128(%rax), %rax	# v_1->next_iv, tmp104
	movq	%rax, -16(%rbp)	# tmp104, v
.L1024:
	.loc 1 4697 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, v
	jne	.L1031	#,
	.loc 1 4713 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE47:
	.size	loop_givs_dead_check, .-loop_givs_dead_check
	.section	.rodata
.LC46:
	.string	"giv at %d reduced to "
	.text
	.type	loop_givs_rescan, @function
loop_givs_rescan:
.LFB48:
	.loc 1 4721 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -56(%rbp)	# loop, loop
	movq	%rsi, -64(%rbp)	# bl, bl
	movq	%rdx, -72(%rbp)	# reg_map, reg_map
	.loc 1 4724 0
	movq	-64(%rbp), %rax	# bl, tmp174
	movq	24(%rax), %rax	# bl_4(D)->giv, tmp175
	movq	%rax, -40(%rbp)	# tmp175, v
	jmp	.L1033	#
.L1051:
	.loc 1 4726 0
	movq	-40(%rbp), %rax	# v, tmp176
	movq	136(%rax), %rax	# v_1->same, D.24593
	testq	%rax, %rax	# D.24593
	je	.L1034	#,
	.loc 1 4726 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# v, tmp177
	movq	136(%rax), %rax	# v_1->same, D.24593
	movzbl	100(%rax), %eax	# *_7, D.24594
	andl	$4, %eax	#, D.24594
	testb	%al, %al	# D.24594
	je	.L1034	#,
	.loc 1 4727 0 is_stmt 1
	movq	-40(%rbp), %rax	# v, tmp178
	movzbl	100(%rax), %edx	# v_1->ignore, tmp181
	orl	$4, %edx	#, tmp182
	movb	%dl, 100(%rax)	# tmp182, v_1->ignore
.L1034:
	.loc 1 4729 0
	movq	-40(%rbp), %rax	# v, tmp183
	movzbl	100(%rax), %eax	# *v_1, D.24594
	andl	$4, %eax	#, D.24594
	testb	%al, %al	# D.24594
	je	.L1035	#,
	.loc 1 4730 0
	jmp	.L1036	#
.L1035:
	.loc 1 4734 0
	movq	-40(%rbp), %rax	# v, tmp184
	movq	136(%rax), %rax	# v_1->same, D.24593
	testq	%rax, %rax	# D.24593
	je	.L1037	#,
	.loc 1 4736 0
	movq	-40(%rbp), %rax	# v, tmp185
	movq	136(%rax), %rax	# v_1->same, D.24593
	.loc 1 4735 0
	movq	8(%rax), %rdx	# _13->new_reg, D.24595
	.loc 1 4736 0
	movq	-40(%rbp), %rax	# v, tmp186
	movq	136(%rax), %rax	# v_1->same, D.24593
	.loc 1 4735 0
	movq	32(%rax), %rcx	# _15->dest_reg, D.24595
	movq	-40(%rbp), %rax	# v, tmp187
	movq	8(%rax), %rax	# v_1->new_reg, D.24595
	movq	%rcx, %rsi	# D.24595,
	movq	%rax, %rdi	# D.24595,
	call	replace_rtx	#
	movq	-40(%rbp), %rdx	# v, tmp188
	movq	%rax, 8(%rdx)	# D.24595, v_1->new_reg
.L1037:
	.loc 1 4745 0
	movq	-40(%rbp), %rax	# v, tmp189
	movq	8(%rax), %rax	# v_1->new_reg, D.24595
	movzwl	(%rax), %eax	# _19->code, D.24596
	cmpw	$61, %ax	#, D.24596
	jne	.L1038	#,
	.loc 1 4746 0
	movq	-40(%rbp), %rax	# v, tmp190
	movl	24(%rax), %eax	# v_1->giv_type, D.24597
	cmpl	$1, %eax	#, D.24597
	jne	.L1038	#,
	.loc 1 4747 0
	movq	-40(%rbp), %rax	# v, tmp191
	movq	32(%rax), %rax	# v_1->dest_reg, D.24595
	movzbl	3(%rax), %eax	# *_22, D.24594
	andl	$-128, %eax	#, D.24594
	testb	%al, %al	# D.24594
	je	.L1038	#,
	.loc 1 4749 0
	movq	cfun(%rip), %rax	# cfun, cfun.431
	movq	24(%rax), %rax	# cfun.431_25->emit, D.24598
	movq	64(%rax), %rdx	# _26->regno_pointer_align, D.24599
	movq	-40(%rbp), %rax	# v, tmp192
	movq	32(%rax), %rax	# v_1->dest_reg, D.24595
	movl	8(%rax), %eax	# _28->fld[0].rtuint, D.24600
	movl	%eax, %eax	# D.24600, D.24601
	addq	%rdx, %rax	# D.24599, D.24599
	movzbl	(%rax), %eax	# *_31, D.24594
	.loc 1 4748 0
	movzbl	%al, %edx	# D.24594, D.24602
	movq	-40(%rbp), %rax	# v, tmp193
	movq	8(%rax), %rax	# v_1->new_reg, D.24595
	movl	%edx, %esi	# D.24602,
	movq	%rax, %rdi	# D.24595,
	call	mark_reg_pointer	#
	jmp	.L1039	#
.L1038:
	.loc 1 4750 0
	movq	-40(%rbp), %rax	# v, tmp194
	movq	8(%rax), %rax	# v_1->new_reg, D.24595
	movzwl	(%rax), %eax	# _35->code, D.24596
	cmpw	$61, %ax	#, D.24596
	jne	.L1040	#,
	.loc 1 4751 0
	movq	-40(%rbp), %rax	# v, tmp195
	movq	16(%rax), %rax	# v_1->src_reg, D.24595
	movzbl	3(%rax), %eax	# *_37, D.24594
	andl	$-128, %eax	#, D.24594
	testb	%al, %al	# D.24594
	je	.L1040	#,
.LBB62:
	.loc 1 4753 0
	movq	cfun(%rip), %rax	# cfun, cfun.432
	movq	24(%rax), %rax	# cfun.432_40->emit, D.24598
	movq	64(%rax), %rdx	# _41->regno_pointer_align, D.24599
	movq	-40(%rbp), %rax	# v, tmp196
	movq	16(%rax), %rax	# v_1->src_reg, D.24595
	movl	8(%rax), %eax	# _43->fld[0].rtuint, D.24600
	movl	%eax, %eax	# D.24600, D.24601
	addq	%rdx, %rax	# D.24599, D.24599
	movzbl	(%rax), %eax	# *_46, D.24594
	movzbl	%al, %eax	# D.24594, tmp197
	movl	%eax, -48(%rbp)	# tmp197, align
	.loc 1 4755 0
	cmpl	$0, -48(%rbp)	#, align
	je	.L1041	#,
	.loc 1 4756 0
	movq	-40(%rbp), %rax	# v, tmp198
	movq	72(%rax), %rax	# v_1->add_val, D.24595
	movzwl	(%rax), %eax	# _49->code, D.24596
	cmpw	$54, %ax	#, D.24596
	jne	.L1041	#,
	.loc 1 4757 0
	movq	-40(%rbp), %rax	# v, tmp199
	movq	72(%rax), %rax	# v_1->add_val, D.24595
	movq	8(%rax), %rax	# _51->fld[0].rtwint, D.24603
	movl	-48(%rbp), %edx	# align, tmp200
	shrl	$3, %edx	#, D.24600
	movl	%edx, %ecx	# D.24600, D.24603
	cqto
	idivq	%rcx	# D.24603
	movq	%rdx, %rax	# tmp201, D.24603
	testq	%rax, %rax	# D.24603
	je	.L1042	#,
.L1041:
	.loc 1 4758 0
	movl	$0, -48(%rbp)	#, align
.L1042:
	.loc 1 4760 0
	movl	-48(%rbp), %edx	# align, align.433
	movq	-40(%rbp), %rax	# v, tmp203
	movq	8(%rax), %rax	# v_1->new_reg, D.24595
	movl	%edx, %esi	# align.433,
	movq	%rax, %rdi	# D.24595,
	call	mark_reg_pointer	#
.LBE62:
	.loc 1 4752 0
	jmp	.L1039	#
.L1040:
	.loc 1 4762 0
	movq	-40(%rbp), %rax	# v, tmp204
	movq	8(%rax), %rax	# v_1->new_reg, D.24595
	movzwl	(%rax), %eax	# _59->code, D.24596
	cmpw	$61, %ax	#, D.24596
	jne	.L1043	#,
	.loc 1 4763 0
	movq	-40(%rbp), %rax	# v, tmp205
	movq	72(%rax), %rax	# v_1->add_val, D.24595
	movzwl	(%rax), %eax	# _61->code, D.24596
	cmpw	$61, %ax	#, D.24596
	jne	.L1043	#,
	.loc 1 4764 0
	movq	-40(%rbp), %rax	# v, tmp206
	movq	72(%rax), %rax	# v_1->add_val, D.24595
	movzbl	3(%rax), %eax	# *_63, D.24594
	andl	$-128, %eax	#, D.24594
	testb	%al, %al	# D.24594
	je	.L1043	#,
.LBB63:
	.loc 1 4766 0
	movq	cfun(%rip), %rax	# cfun, cfun.434
	movq	24(%rax), %rax	# cfun.434_66->emit, D.24598
	movq	64(%rax), %rdx	# _67->regno_pointer_align, D.24599
	movq	-40(%rbp), %rax	# v, tmp207
	movq	72(%rax), %rax	# v_1->add_val, D.24595
	movl	8(%rax), %eax	# _69->fld[0].rtuint, D.24600
	movl	%eax, %eax	# D.24600, D.24601
	addq	%rdx, %rax	# D.24599, D.24599
	movzbl	(%rax), %eax	# *_72, D.24594
	movzbl	%al, %eax	# D.24594, tmp208
	movl	%eax, -44(%rbp)	# tmp208, align
	.loc 1 4768 0
	cmpl	$0, -44(%rbp)	#, align
	je	.L1044	#,
	.loc 1 4768 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# v, tmp209
	movq	64(%rax), %rax	# v_1->mult_val, D.24595
	movzwl	(%rax), %eax	# _75->code, D.24596
	cmpw	$54, %ax	#, D.24596
	jne	.L1044	#,
	.loc 1 4769 0 is_stmt 1
	movq	-40(%rbp), %rax	# v, tmp210
	movq	64(%rax), %rax	# v_1->mult_val, D.24595
	movq	8(%rax), %rax	# _77->fld[0].rtwint, D.24603
	movl	-44(%rbp), %edx	# align, tmp211
	shrl	$3, %edx	#, D.24600
	movl	%edx, %ecx	# D.24600, D.24603
	cqto
	idivq	%rcx	# D.24603
	movq	%rdx, %rax	# tmp212, D.24603
	testq	%rax, %rax	# D.24603
	je	.L1045	#,
.L1044:
	.loc 1 4770 0
	movl	$0, -44(%rbp)	#, align
.L1045:
	.loc 1 4772 0
	movl	-44(%rbp), %edx	# align, align.435
	movq	-40(%rbp), %rax	# v, tmp214
	movq	8(%rax), %rax	# v_1->new_reg, D.24595
	movl	%edx, %esi	# align.435,
	movq	%rax, %rdi	# D.24595,
	call	mark_reg_pointer	#
.LBE63:
	.loc 1 4765 0
	jmp	.L1039	#
.L1043:
	.loc 1 4774 0
	movq	-40(%rbp), %rax	# v, tmp215
	movq	8(%rax), %rax	# v_1->new_reg, D.24595
	movzwl	(%rax), %eax	# _85->code, D.24596
	cmpw	$61, %ax	#, D.24596
	jne	.L1039	#,
	.loc 1 4774 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# v, tmp216
	movl	24(%rax), %eax	# v_1->giv_type, D.24597
	testl	%eax, %eax	# D.24597
	jne	.L1039	#,
	.loc 1 4775 0 is_stmt 1
	movq	-40(%rbp), %rax	# v, tmp217
	movq	8(%rax), %rax	# v_1->new_reg, D.24595
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24595,
	call	mark_reg_pointer	#
.L1039:
	.loc 1 4777 0
	movq	-40(%rbp), %rax	# v, tmp218
	movl	24(%rax), %eax	# v_1->giv_type, D.24597
	testl	%eax, %eax	# D.24597
	jne	.L1046	#,
	.loc 1 4780 0
	movq	-40(%rbp), %rax	# v, tmp219
	movq	8(%rax), %rdx	# v_1->new_reg, D.24595
	movq	-40(%rbp), %rax	# v, tmp220
	movq	40(%rax), %rsi	# v_1->location, D.24604
	movq	-40(%rbp), %rax	# v, tmp221
	movq	(%rax), %rax	# v_1->insn, D.24595
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# D.24595,
	call	validate_change	#
	jmp	.L1047	#
.L1046:
	.loc 1 4781 0
	movq	-40(%rbp), %rax	# v, tmp222
	movzbl	100(%rax), %eax	# *v_1, D.24594
	andl	$1, %eax	#, D.24594
	testb	%al, %al	# D.24594
	je	.L1048	#,
	.loc 1 4783 0
	movq	-40(%rbp), %rax	# v, tmp223
	movq	32(%rax), %rax	# v_1->dest_reg, D.24595
	movl	8(%rax), %eax	# _95->fld[0].rtuint, D.24600
	movl	%eax, %eax	# D.24600, D.24605
	leaq	0(,%rax,8), %rdx	#, D.24605
	movq	-72(%rbp), %rax	# reg_map, tmp224
	addq	%rax, %rdx	# tmp224, D.24604
	movq	-40(%rbp), %rax	# v, tmp225
	movq	8(%rax), %rax	# v_1->new_reg, D.24595
	movq	%rax, (%rdx)	# D.24595, *_100
	jmp	.L1047	#
.L1048:
	.loc 1 4789 0
	movq	-40(%rbp), %rax	# v, tmp226
	movq	8(%rax), %rdx	# v_1->new_reg, D.24595
	movq	-40(%rbp), %rax	# v, tmp227
	movq	32(%rax), %rax	# v_1->dest_reg, D.24595
	movq	%rdx, %rsi	# D.24595,
	movq	%rax, %rdi	# D.24595,
	call	gen_move_insn	#
	movq	%rax, %rcx	#, D.24595
	movq	-40(%rbp), %rax	# v, tmp228
	movq	(%rax), %rdx	# v_1->insn, D.24595
	movq	-56(%rbp), %rax	# loop, tmp229
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp229,
	call	loop_insn_emit_after	#
.L1047:
	.loc 1 4798 0
	movq	-64(%rbp), %rax	# bl, tmp230
	movzbl	88(%rax), %eax	# *bl_4(D), D.24594
	andl	$8, %eax	#, D.24594
	testb	%al, %al	# D.24594
	je	.L1049	#,
	.loc 1 4798 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# v, tmp231
	movzbl	100(%rax), %eax	# *v_1, D.24594
	andl	$1, %eax	#, D.24594
	testb	%al, %al	# D.24594
	jne	.L1049	#,
	.loc 1 4799 0 is_stmt 1
	movq	-40(%rbp), %rax	# v, tmp232
	movq	32(%rax), %r13	# v_1->dest_reg, D.24595
	movq	-40(%rbp), %rax	# v, tmp233
	movq	72(%rax), %r12	# v_1->add_val, D.24595
	movq	-40(%rbp), %rax	# v, tmp234
	movq	64(%rax), %rbx	# v_1->mult_val, D.24595
	movq	-64(%rbp), %rax	# bl, tmp235
	movq	40(%rax), %rdx	# bl_4(D)->initial_value, D.24595
	movq	-40(%rbp), %rax	# v, tmp236
	movq	%rdx, %rsi	# D.24595,
	movq	%rax, %rdi	# tmp236,
	call	extend_value_for_giv	#
	movq	%rax, %rsi	#, D.24595
	movq	-56(%rbp), %rax	# loop, tmp237
	movq	%r13, %r8	# D.24595,
	movq	%r12, %rcx	# D.24595,
	movq	%rbx, %rdx	# D.24595,
	movq	%rax, %rdi	# tmp237,
	call	loop_iv_add_mult_sink	#
	jmp	.L1050	#
.L1049:
	.loc 1 4802 0
	movq	-40(%rbp), %rax	# v, tmp238
	movq	88(%rax), %rax	# v_1->final_value, D.24595
	testq	%rax, %rax	# D.24595
	je	.L1050	#,
	.loc 1 4803 0
	movq	-40(%rbp), %rax	# v, tmp239
	movq	88(%rax), %rdx	# v_1->final_value, D.24595
	movq	-40(%rbp), %rax	# v, tmp240
	movq	32(%rax), %rax	# v_1->dest_reg, D.24595
	movq	%rdx, %rsi	# D.24595,
	movq	%rax, %rdi	# D.24595,
	call	gen_move_insn	#
	movq	%rax, %rdx	#, D.24595
	movq	-56(%rbp), %rax	# loop, tmp241
	movq	%rdx, %rsi	# D.24595,
	movq	%rax, %rdi	# tmp241,
	call	loop_insn_sink_or_swim	#
.L1050:
	.loc 1 4806 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.436
	testq	%rax, %rax	# loop_dump_stream.436
	je	.L1036	#,
	.loc 1 4809 0
	movq	-40(%rbp), %rax	# v, tmp242
	movq	(%rax), %rax	# v_1->insn, D.24595
	.loc 1 4808 0
	movl	8(%rax), %edx	# _121->fld[0].rtint, D.24602
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.437
	movl	$.LC46, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.437,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 4810 0
	movq	-40(%rbp), %rax	# v, tmp243
	movq	8(%rax), %rdx	# v_1->new_reg, D.24595
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.438
	movq	%rdx, %rsi	# D.24595,
	movq	%rax, %rdi	# loop_dump_stream.438,
	call	print_simple_rtl	#
	.loc 1 4811 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.439
	movq	%rax, %rsi	# loop_dump_stream.439,
	movl	$10, %edi	#,
	call	fputc	#
.L1036:
	.loc 1 4724 0
	movq	-40(%rbp), %rax	# v, tmp244
	movq	128(%rax), %rax	# v_1->next_iv, tmp245
	movq	%rax, -40(%rbp)	# tmp245, v
.L1033:
	.loc 1 4724 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, v
	jne	.L1051	#,
	.loc 1 4814 0 is_stmt 1
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE48:
	.size	loop_givs_rescan, .-loop_givs_rescan
	.type	loop_giv_reduce_benefit, @function
loop_giv_reduce_benefit:
.LFB49:
	.loc 1 4823 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# loop, loop
	movq	%rsi, -32(%rbp)	# bl, bl
	movq	%rdx, -40(%rbp)	# v, v
	movq	%rcx, -48(%rbp)	# test_reg, test_reg
	.loc 1 4827 0
	movq	-40(%rbp), %rax	# v, tmp76
	movl	80(%rax), %eax	# v_2(D)->benefit, tmp77
	movl	%eax, -8(%rbp)	# tmp77, benefit
	.loc 1 4828 0
	movq	-40(%rbp), %rax	# v, tmp78
	movl	48(%rax), %eax	# v_2(D)->mode, D.24608
	movl	%eax, %edx	# D.24608, D.24609
	movq	-48(%rbp), %rax	# test_reg, tmp79
	movb	%dl, 2(%rax)	# D.24609, test_reg_6(D)->mode
	.loc 1 4829 0
	movq	-40(%rbp), %rax	# v, tmp80
	movq	64(%rax), %rsi	# v_2(D)->mult_val, D.24610
	movq	-32(%rbp), %rax	# bl, tmp81
	movq	8(%rax), %rax	# bl_8(D)->biv, D.24611
	movq	72(%rax), %rax	# _9->add_val, D.24610
	movq	-48(%rbp), %rcx	# test_reg, tmp82
	movq	-48(%rbp), %rdx	# test_reg, tmp83
	movq	%rax, %rdi	# D.24610,
	call	iv_add_mult_cost	#
	movl	%eax, -4(%rbp)	# tmp84, add_cost
	.loc 1 4842 0
	movq	-40(%rbp), %rax	# v, tmp85
	movzbl	100(%rax), %eax	# *v_2(D), D.24609
	andl	$1, %eax	#, D.24609
	testb	%al, %al	# D.24609
	jne	.L1053	#,
	.loc 1 4842 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# bl, tmp86
	movzbl	88(%rax), %eax	# *bl_8(D), D.24609
	andl	$2, %eax	#, D.24609
	testb	%al, %al	# D.24609
	jne	.L1053	#,
	.loc 1 4843 0 is_stmt 1
	movq	-40(%rbp), %rax	# v, tmp87
	movq	32(%rax), %rax	# v_2(D)->dest_reg, D.24610
	movzbl	3(%rax), %eax	# *_16, D.24609
	andl	$8, %eax	#, D.24609
	testb	%al, %al	# D.24609
	je	.L1053	#,
	.loc 1 4844 0
	movl	copy_cost(%rip), %eax	# copy_cost, copy_cost.440
	subl	%eax, -8(%rbp)	# copy_cost.440, benefit
.L1053:
	.loc 1 4854 0
	movq	-32(%rbp), %rax	# bl, tmp88
	movl	4(%rax), %eax	# bl_8(D)->biv_count, D.24612
	imull	-4(%rbp), %eax	# add_cost, D.24612
	subl	%eax, -8(%rbp)	# D.24612, benefit
	.loc 1 4888 0
	movl	-8(%rbp), %eax	# benefit, D.24612
	.loc 1 4889 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE49:
	.size	loop_giv_reduce_benefit, .-loop_giv_reduce_benefit
	.type	loop_ivs_free, @function
loop_ivs_free:
.LFB50:
	.loc 1 4897 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# loop, loop
	.loc 1 4898 0
	movq	-56(%rbp), %rax	# loop, tmp61
	movq	160(%rax), %rax	# loop_4(D)->aux, D.24613
	addq	$208, %rax	#, tmp62
	movq	%rax, -24(%rbp)	# tmp62, ivs
	.loc 1 4899 0
	movq	-24(%rbp), %rax	# ivs, tmp63
	movq	16(%rax), %rax	# ivs_6->list, tmp64
	movq	%rax, -40(%rbp)	# tmp64, iv
	.loc 1 4901 0
	movq	-24(%rbp), %rax	# ivs, tmp65
	movq	(%rax), %rax	# ivs_6->regs, D.24614
	movq	%rax, %rdi	# D.24614,
	call	free	#
	.loc 1 4903 0
	jmp	.L1056	#
.L1061:
.LBB64:
	.loc 1 4905 0
	movq	-40(%rbp), %rax	# iv, tmp66
	movq	64(%rax), %rax	# iv_1->next, tmp67
	movq	%rax, -16(%rbp)	# tmp67, next
	.loc 1 4909 0
	movq	-40(%rbp), %rax	# iv, tmp68
	movq	8(%rax), %rax	# iv_1->biv, tmp69
	movq	%rax, -32(%rbp)	# tmp69, induction
	jmp	.L1057	#
.L1058:
	.loc 1 4911 0 discriminator 2
	movq	-32(%rbp), %rax	# induction, tmp70
	movq	128(%rax), %rax	# induction_2->next_iv, tmp71
	movq	%rax, -8(%rbp)	# tmp71, next_induction
	.loc 1 4912 0 discriminator 2
	movq	-32(%rbp), %rax	# induction, tmp72
	movq	%rax, %rdi	# tmp72,
	call	free	#
	.loc 1 4909 0 discriminator 2
	movq	-8(%rbp), %rax	# next_induction, tmp73
	movq	%rax, -32(%rbp)	# tmp73, induction
.L1057:
	.loc 1 4909 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, induction
	jne	.L1058	#,
	.loc 1 4914 0 is_stmt 1
	movq	-40(%rbp), %rax	# iv, tmp74
	movq	24(%rax), %rax	# iv_1->giv, tmp75
	movq	%rax, -32(%rbp)	# tmp75, induction
	jmp	.L1059	#
.L1060:
	.loc 1 4916 0 discriminator 2
	movq	-32(%rbp), %rax	# induction, tmp76
	movq	128(%rax), %rax	# induction_3->next_iv, tmp77
	movq	%rax, -8(%rbp)	# tmp77, next_induction
	.loc 1 4917 0 discriminator 2
	movq	-32(%rbp), %rax	# induction, tmp78
	movq	%rax, %rdi	# tmp78,
	call	free	#
	.loc 1 4914 0 discriminator 2
	movq	-8(%rbp), %rax	# next_induction, tmp79
	movq	%rax, -32(%rbp)	# tmp79, induction
.L1059:
	.loc 1 4914 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, induction
	jne	.L1060	#,
	.loc 1 4920 0 is_stmt 1
	movq	-40(%rbp), %rax	# iv, tmp80
	movq	%rax, %rdi	# tmp80,
	call	free	#
	.loc 1 4921 0
	movq	-16(%rbp), %rax	# next, tmp81
	movq	%rax, -40(%rbp)	# tmp81, iv
.L1056:
.LBE64:
	.loc 1 4903 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, iv
	jne	.L1061	#,
	.loc 1 4923 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE50:
	.size	loop_ivs_free, .-loop_ivs_free
	.section	.rodata
	.align 8
.LC47:
	.string	"giv of insn %d not worth while, %d vs %d.\n"
	.align 8
.LC48:
	.string	"giv of insn %d: would need a multiply.\n"
.LC49:
	.string	"Reg %d: biv eliminated\n"
	.text
	.type	strength_reduce, @function
strength_reduce:
.LFB51:
	.loc 1 4939 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -120(%rbp)	# loop, loop
	movl	%esi, -124(%rbp)	# flags, flags
	.loc 1 4940 0
	movq	-120(%rbp), %rax	# loop, tmp174
	movq	160(%rax), %rax	# loop_9(D)->aux, tmp175
	movq	%rax, -56(%rbp)	# tmp175, loop_info
	.loc 1 4941 0
	movq	-120(%rbp), %rax	# loop, tmp176
	movq	160(%rax), %rax	# loop_9(D)->aux, D.24615
	addq	$184, %rax	#, tmp177
	movq	%rax, -48(%rbp)	# tmp177, regs
	.loc 1 4942 0
	movq	-120(%rbp), %rax	# loop, tmp178
	movq	160(%rax), %rax	# loop_9(D)->aux, D.24615
	addq	$208, %rax	#, tmp179
	movq	%rax, -40(%rbp)	# tmp179, ivs
	.loc 1 4951 0
	movq	-56(%rbp), %rax	# loop_info, tmp180
	movl	(%rax), %eax	# loop_info_10->has_call, D.24616
	testl	%eax, %eax	# D.24616
	je	.L1063	#,
	.loc 1 4951 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.441
	jmp	.L1064	#
.L1063:
	.loc 1 4951 0 discriminator 2
	movl	$2, %eax	#, iftmp.441
.L1064:
	.loc 1 4951 0 discriminator 3
	movl	n_non_fixed_regs(%rip), %edx	# n_non_fixed_regs, n_non_fixed_regs.442
	addl	$3, %edx	#, D.24616
	imull	%edx, %eax	# D.24616, tmp181
	movl	%eax, -108(%rbp)	# tmp181, threshold
	.loc 1 4953 0 is_stmt 1 discriminator 3
	movq	$0, -32(%rbp)	#, reg_map
	.loc 1 4955 0 discriminator 3
	movl	$0, -112(%rbp)	#, unrolled_insn_copies
	.loc 1 4956 0 discriminator 3
	movl	word_mode(%rip), %eax	# word_mode, word_mode.443
	movl	$58, %esi	#,
	movl	%eax, %edi	# word_mode.443,
	call	gen_rtx_REG	#
	movq	%rax, -24(%rbp)	# tmp182, test_reg
	.loc 1 4957 0 discriminator 3
	movq	-120(%rbp), %rax	# loop, tmp183
	movq	%rax, %rdi	# tmp183,
	call	count_insns_in_loop	#
	movl	%eax, -104(%rbp)	# tmp184, insn_count
	.loc 1 4959 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.445
	andl	$33554432, %eax	#, D.24616
	testl	%eax, %eax	# D.24616
	je	.L1065	#,
	.loc 1 4959 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.444
	jmp	.L1066	#
.L1065:
	.loc 1 4959 0 discriminator 2
	movl	$4, %eax	#, iftmp.444
.L1066:
	.loc 1 4959 0 discriminator 3
	movl	%eax, %edi	# iftmp.444,
	call	gen_reg_rtx	#
	movq	%rax, addr_placeholder(%rip)	# addr_placeholder.446, addr_placeholder
	.loc 1 4961 0 is_stmt 1 discriminator 3
	movl	max_reg_before_loop(%rip), %edx	# max_reg_before_loop, max_reg_before_loop.447
	movq	-40(%rbp), %rax	# ivs, tmp185
	movl	%edx, 8(%rax)	# max_reg_before_loop.447, ivs_14->n_regs
	.loc 1 4962 0 discriminator 3
	movq	-40(%rbp), %rax	# ivs, tmp186
	movl	8(%rax), %eax	# ivs_14->n_regs, D.24617
	movl	%eax, %eax	# D.24617, D.24618
	movl	$16, %esi	#,
	movq	%rax, %rdi	# D.24618,
	call	xcalloc	#
	movq	%rax, %rdx	# tmp187, D.24615
	movq	-40(%rbp), %rax	# ivs, tmp188
	movq	%rdx, (%rax)	# D.24615, ivs_14->regs
	.loc 1 4965 0 discriminator 3
	movq	-120(%rbp), %rax	# loop, tmp189
	movq	%rax, %rdi	# tmp189,
	call	loop_bivs_find	#
	.loc 1 4968 0 discriminator 3
	movq	-40(%rbp), %rax	# ivs, tmp190
	movq	16(%rax), %rax	# ivs_14->list, D.24619
	testq	%rax, %rax	# D.24619
	jne	.L1067	#,
	.loc 1 4972 0
	movl	-124(%rbp), %eax	# flags, tmp191
	andl	$1, %eax	#, D.24616
	testl	%eax, %eax	# D.24616
	je	.L1068	#,
	.loc 1 4973 0
	movl	-104(%rbp), %ecx	# insn_count, tmp192
	movq	-120(%rbp), %rax	# loop, tmp193
	movl	$0, %edx	#,
	movl	%ecx, %esi	# tmp192,
	movq	%rax, %rdi	# tmp193,
	call	unroll_loop	#
.L1068:
	.loc 1 4975 0
	movq	-120(%rbp), %rax	# loop, tmp194
	movq	%rax, %rdi	# tmp194,
	call	loop_ivs_free	#
	.loc 1 4976 0
	jmp	.L1062	#
.L1067:
	.loc 1 4981 0
	movq	-120(%rbp), %rax	# loop, tmp195
	movq	%rax, %rdi	# tmp195,
	call	loop_bivs_init_find	#
	.loc 1 4985 0
	movq	-120(%rbp), %rax	# loop, tmp196
	movq	%rax, %rdi	# tmp196,
	call	loop_bivs_check	#
	.loc 1 4988 0
	movq	-120(%rbp), %rax	# loop, tmp197
	movq	%rax, %rdi	# tmp197,
	call	loop_givs_find	#
	.loc 1 4994 0
	movq	-120(%rbp), %rax	# loop, tmp198
	movq	%rax, %rdi	# tmp198,
	call	loop_iterations	#
	.loc 1 4997 0
	movl	-124(%rbp), %eax	# flags, tmp199
	andl	$4, %eax	#, D.24616
	testl	%eax, %eax	# D.24616
	je	.L1070	#,
	.loc 1 4998 0
	movq	-120(%rbp), %rax	# loop, tmp200
	movq	%rax, %rdi	# tmp200,
	call	emit_prefetch_instructions	#
.L1070:
	.loc 1 5005 0
	movq	-120(%rbp), %rax	# loop, tmp201
	movq	%rax, %rdi	# tmp201,
	call	loop_givs_check	#
	.loc 1 5010 0
	movl	-104(%rbp), %edx	# insn_count, tmp202
	movq	-120(%rbp), %rax	# loop, tmp203
	movl	%edx, %esi	# tmp202,
	movq	%rax, %rdi	# tmp203,
	call	check_dbra_loop	#
	.loc 1 5015 0
	movq	-40(%rbp), %rax	# ivs, tmp204
	movl	8(%rax), %eax	# ivs_14->n_regs, D.24617
	movl	%eax, -100(%rbp)	# D.24617, reg_map_size
	.loc 1 5016 0
	movl	-100(%rbp), %eax	# reg_map_size, tmp205
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.24618,
	call	xcalloc	#
	movq	%rax, -32(%rbp)	# tmp206, reg_map
	.loc 1 5021 0
	movq	-40(%rbp), %rax	# ivs, tmp207
	movq	16(%rax), %rax	# ivs_14->list, tmp208
	movq	%rax, -80(%rbp)	# tmp208, bl
	jmp	.L1071	#
.L1090:
.LBB65:
	.loc 1 5028 0
	movl	-104(%rbp), %ecx	# insn_count, tmp209
	movl	-108(%rbp), %edx	# threshold, tmp210
	movq	-80(%rbp), %rsi	# bl, tmp211
	movq	-120(%rbp), %rax	# loop, tmp212
	movq	%rax, %rdi	# tmp212,
	call	loop_biv_eliminable_p	#
	andl	$1, %eax	#, D.24621
	movl	%eax, %edx	# D.24621, D.24621
	movq	-80(%rbp), %rax	# bl, tmp213
	andl	$1, %edx	#, tmp215
	leal	(%rdx,%rdx), %ecx	#, tmp216
	movzbl	88(%rax), %edx	# bl_2->eliminable, tmp217
	andl	$-3, %edx	#, tmp218
	orl	%ecx, %edx	# tmp216, tmp219
	movb	%dl, 88(%rax)	# tmp219, bl_2->eliminable
	.loc 1 5033 0
	movq	-80(%rbp), %rax	# bl, tmp220
	movzbl	88(%rax), %edx	# bl_2->all_reduced, tmp223
	orl	$16, %edx	#, tmp224
	movb	%dl, 88(%rax)	# tmp224, bl_2->all_reduced
	.loc 1 5037 0
	movq	-56(%rbp), %rdx	# loop_info, tmp225
	movq	-80(%rbp), %rax	# bl, tmp226
	movq	%rdx, %rsi	# tmp225,
	movq	%rax, %rdi	# tmp226,
	call	check_ext_dependent_givs	#
	.loc 1 5040 0
	movq	-80(%rbp), %rdx	# bl, tmp227
	movq	-48(%rbp), %rax	# regs, tmp228
	movq	%rdx, %rsi	# tmp227,
	movq	%rax, %rdi	# tmp228,
	call	combine_givs	#
	.loc 1 5042 0
	movq	-80(%rbp), %rax	# bl, tmp229
	movq	24(%rax), %rax	# bl_2->giv, tmp230
	movq	%rax, -72(%rbp)	# tmp230, v
	jmp	.L1072	#
.L1082:
.LBB66:
	.loc 1 5046 0
	movq	-72(%rbp), %rax	# v, tmp231
	movzbl	100(%rax), %eax	# *v_4, D.24620
	andl	$4, %eax	#, D.24620
	testb	%al, %al	# D.24620
	jne	.L1073	#,
	.loc 1 5046 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# v, tmp232
	movq	136(%rax), %rax	# v_4->same, D.24622
	testq	%rax, %rax	# D.24622
	je	.L1074	#,
.L1073:
	.loc 1 5047 0 is_stmt 1
	jmp	.L1075	#
.L1074:
	.loc 1 5049 0
	movq	-24(%rbp), %rcx	# test_reg, tmp233
	movq	-72(%rbp), %rdx	# v, tmp234
	movq	-80(%rbp), %rsi	# bl, tmp235
	movq	-120(%rbp), %rax	# loop, tmp236
	movq	%rax, %rdi	# tmp236,
	call	loop_giv_reduce_benefit	#
	movl	%eax, -96(%rbp)	# tmp237, benefit
	.loc 1 5060 0
	movl	flag_reduce_all_givs(%rip), %eax	# flag_reduce_all_givs, flag_reduce_all_givs.448
	testl	%eax, %eax	# flag_reduce_all_givs.448
	jne	.L1076	#,
	.loc 1 5061 0
	movq	-72(%rbp), %rax	# v, tmp238
	movl	104(%rax), %eax	# v_4->lifetime, D.24616
	imull	-108(%rbp), %eax	# threshold, D.24616
	imull	-96(%rbp), %eax	# benefit, D.24616
	cmpl	-104(%rbp), %eax	# insn_count, D.24616
	jge	.L1076	#,
	.loc 1 5062 0
	movq	-80(%rbp), %rax	# bl, tmp239
	movzbl	88(%rax), %eax	# *bl_2, D.24620
	andl	$8, %eax	#, D.24620
	testb	%al, %al	# D.24620
	jne	.L1076	#,
	.loc 1 5064 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.449
	testq	%rax, %rax	# loop_dump_stream.449
	je	.L1077	#,
	.loc 1 5068 0
	movq	-72(%rbp), %rax	# v, tmp240
	movl	104(%rax), %eax	# v_4->lifetime, D.24616
	imull	-108(%rbp), %eax	# threshold, D.24616
	.loc 1 5065 0
	imull	-96(%rbp), %eax	# benefit, D.24616
	movl	%eax, %ecx	# D.24616, D.24616
	.loc 1 5067 0
	movq	-72(%rbp), %rax	# v, tmp241
	movq	(%rax), %rax	# v_4->insn, D.24623
	.loc 1 5065 0
	movl	8(%rax), %edx	# _62->fld[0].rtint, D.24616
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.450
	movl	-104(%rbp), %esi	# insn_count, tmp242
	movl	%esi, %r8d	# tmp242,
	movl	$.LC47, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.450,
	movl	$0, %eax	#,
	call	fprintf	#
.L1077:
	.loc 1 5069 0
	movq	-72(%rbp), %rax	# v, tmp243
	movzbl	100(%rax), %edx	# v_4->ignore, tmp246
	orl	$4, %edx	#, tmp247
	movb	%dl, 100(%rax)	# tmp247, v_4->ignore
	.loc 1 5070 0
	movq	-80(%rbp), %rax	# bl, tmp248
	movzbl	88(%rax), %edx	# bl_2->all_reduced, tmp251
	andl	$-17, %edx	#, tmp252
	movb	%dl, 88(%rax)	# tmp252, bl_2->all_reduced
	jmp	.L1075	#
.L1076:
	.loc 1 5077 0
	movq	-80(%rbp), %rax	# bl, tmp253
	movq	8(%rax), %rax	# bl_2->biv, tmp254
	movq	%rax, -64(%rbp)	# tmp254, tv
	jmp	.L1078	#
.L1081:
	.loc 1 5078 0
	movq	-64(%rbp), %rax	# tv, tmp255
	movq	64(%rax), %rdx	# tv_6->mult_val, D.24623
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, D.24623
	cmpq	%rax, %rdx	# D.24623, D.24623
	jne	.L1079	#,
	.loc 1 5079 0
	movq	-72(%rbp), %rax	# v, tmp256
	movq	64(%rax), %rdx	# v_4->mult_val, D.24623
	movq	-64(%rbp), %rax	# tv, tmp257
	movq	72(%rax), %rax	# tv_6->add_val, D.24623
	movq	%rdx, %rsi	# D.24623,
	movq	%rax, %rdi	# D.24623,
	call	product_cheap_p	#
	testl	%eax, %eax	# D.24616
	jne	.L1079	#,
	.loc 1 5081 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.451
	testq	%rax, %rax	# loop_dump_stream.451
	je	.L1080	#,
	.loc 1 5084 0
	movq	-72(%rbp), %rax	# v, tmp258
	movq	(%rax), %rax	# v_4->insn, D.24623
	.loc 1 5082 0
	movl	8(%rax), %edx	# _72->fld[0].rtint, D.24616
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.452
	movl	$.LC48, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.452,
	movl	$0, %eax	#,
	call	fprintf	#
.L1080:
	.loc 1 5085 0
	movq	-72(%rbp), %rax	# v, tmp259
	movzbl	100(%rax), %edx	# v_4->ignore, tmp262
	orl	$4, %edx	#, tmp263
	movb	%dl, 100(%rax)	# tmp263, v_4->ignore
	.loc 1 5086 0
	movq	-80(%rbp), %rax	# bl, tmp264
	movzbl	88(%rax), %edx	# bl_2->all_reduced, tmp267
	andl	$-17, %edx	#, tmp268
	movb	%dl, 88(%rax)	# tmp268, bl_2->all_reduced
	.loc 1 5087 0
	jmp	.L1075	#
.L1079:
	.loc 1 5077 0
	movq	-64(%rbp), %rax	# tv, tmp269
	movq	128(%rax), %rax	# tv_6->next_iv, tmp270
	movq	%rax, -64(%rbp)	# tmp270, tv
.L1078:
	.loc 1 5077 0 is_stmt 0 discriminator 1
	cmpq	$0, -64(%rbp)	#, tv
	jne	.L1081	#,
.L1075:
.LBE66:
	.loc 1 5042 0 is_stmt 1
	movq	-72(%rbp), %rax	# v, tmp271
	movq	128(%rax), %rax	# v_4->next_iv, tmp272
	movq	%rax, -72(%rbp)	# tmp272, v
.L1072:
	.loc 1 5042 0 is_stmt 0 discriminator 1
	cmpq	$0, -72(%rbp)	#, v
	jne	.L1082	#,
	.loc 1 5096 0 is_stmt 1
	movq	-80(%rbp), %rdx	# bl, tmp273
	movq	-120(%rbp), %rax	# loop, tmp274
	movq	%rdx, %rsi	# tmp273,
	movq	%rax, %rdi	# tmp274,
	call	loop_givs_dead_check	#
	.loc 1 5099 0
	movq	-80(%rbp), %rdx	# bl, tmp275
	movq	-120(%rbp), %rax	# loop, tmp276
	movq	%rdx, %rsi	# tmp275,
	movq	%rax, %rdi	# tmp276,
	call	loop_givs_reduce	#
	.loc 1 5107 0
	movq	-32(%rbp), %rdx	# reg_map, tmp277
	movq	-80(%rbp), %rcx	# bl, tmp278
	movq	-120(%rbp), %rax	# loop, tmp279
	movq	%rcx, %rsi	# tmp278,
	movq	%rax, %rdi	# tmp279,
	call	loop_givs_rescan	#
	.loc 1 5123 0
	movq	-80(%rbp), %rax	# bl, tmp280
	movq	24(%rax), %rax	# bl_2->giv, tmp281
	movq	%rax, -72(%rbp)	# tmp281, v
	jmp	.L1083	#
.L1085:
	.loc 1 5124 0
	movq	-72(%rbp), %rax	# v, tmp282
	movzbl	100(%rax), %eax	# *v_5, D.24620
	andl	$-128, %eax	#, D.24620
	testb	%al, %al	# D.24620
	jne	.L1084	#,
	.loc 1 5124 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# v, tmp283
	movq	136(%rax), %rax	# v_5->same, D.24622
	testq	%rax, %rax	# D.24622
	je	.L1084	#,
	.loc 1 5125 0 is_stmt 1
	movq	-72(%rbp), %rax	# v, tmp284
	movq	136(%rax), %rax	# v_5->same, D.24622
	movzbl	100(%rax), %edx	# _81->maybe_dead, tmp287
	andl	$127, %edx	#, tmp288
	movb	%dl, 100(%rax)	# tmp288, _81->maybe_dead
.L1084:
	.loc 1 5123 0
	movq	-72(%rbp), %rax	# v, tmp289
	movq	128(%rax), %rax	# v_5->next_iv, tmp290
	movq	%rax, -72(%rbp)	# tmp290, v
.L1083:
	.loc 1 5123 0 is_stmt 0 discriminator 1
	cmpq	$0, -72(%rbp)	#, v
	jne	.L1085	#,
	.loc 1 5145 0 is_stmt 1
	movq	-80(%rbp), %rax	# bl, tmp291
	movzbl	88(%rax), %eax	# *bl_2, D.24620
	andl	$16, %eax	#, D.24620
	testb	%al, %al	# D.24620
	je	.L1086	#,
	.loc 1 5145 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# bl, tmp292
	movzbl	88(%rax), %eax	# *bl_2, D.24620
	andl	$2, %eax	#, D.24620
	testb	%al, %al	# D.24620
	je	.L1086	#,
	.loc 1 5146 0 is_stmt 1
	movl	-104(%rbp), %ecx	# insn_count, tmp293
	movl	-108(%rbp), %edx	# threshold, tmp294
	movq	-80(%rbp), %rsi	# bl, tmp295
	movq	-120(%rbp), %rax	# loop, tmp296
	movl	%ecx, %r8d	# tmp293,
	movl	%edx, %ecx	# tmp294,
	movl	$1, %edx	#,
	movq	%rax, %rdi	# tmp296,
	call	maybe_eliminate_biv	#
	testl	%eax, %eax	# D.24616
	je	.L1086	#,
	.loc 1 5160 0
	movq	-80(%rbp), %rax	# bl, tmp297
	movq	56(%rax), %rax	# bl_2->final_value, D.24623
	testq	%rax, %rax	# D.24623
	je	.L1087	#,
	.loc 1 5160 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# bl, tmp298
	movzbl	88(%rax), %eax	# *bl_2, D.24620
	andl	$8, %eax	#, D.24620
	testb	%al, %al	# D.24620
	jne	.L1087	#,
	.loc 1 5161 0 is_stmt 1
	movq	-80(%rbp), %rax	# bl, tmp299
	movq	56(%rax), %rdx	# bl_2->final_value, D.24623
	.loc 1 5162 0
	movq	-80(%rbp), %rax	# bl, tmp300
	movq	8(%rax), %rax	# bl_2->biv, D.24622
	.loc 1 5161 0
	movq	32(%rax), %rax	# _92->dest_reg, D.24623
	movq	%rdx, %rsi	# D.24623,
	movq	%rax, %rdi	# D.24623,
	call	gen_move_insn	#
	movq	%rax, %rdx	#, D.24623
	movq	-120(%rbp), %rax	# loop, tmp301
	movq	%rdx, %rsi	# D.24623,
	movq	%rax, %rdi	# tmp301,
	call	loop_insn_sink_or_swim	#
.L1087:
	.loc 1 5164 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.453
	testq	%rax, %rax	# loop_dump_stream.453
	je	.L1088	#,
	.loc 1 5165 0
	movq	-80(%rbp), %rax	# bl, tmp302
	movl	(%rax), %edx	# bl_2->regno, D.24617
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.454
	movl	$.LC49, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.454,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5164 0
	jmp	.L1089	#
.L1088:
	.loc 1 5164 0 is_stmt 0 discriminator 1
	jmp	.L1089	#
.L1086:
	.loc 1 5170 0 is_stmt 1
	movq	-80(%rbp), %rax	# bl, tmp303
	movq	56(%rax), %rax	# bl_2->final_value, D.24623
	testq	%rax, %rax	# D.24623
	je	.L1089	#,
	.loc 1 5170 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# bl, tmp304
	movzbl	88(%rax), %eax	# *bl_2, D.24620
	andl	$8, %eax	#, D.24620
	testb	%al, %al	# D.24620
	jne	.L1089	#,
	.loc 1 5171 0 is_stmt 1
	movq	-80(%rbp), %rax	# bl, tmp305
	movq	56(%rax), %rdx	# bl_2->final_value, D.24623
	movq	-80(%rbp), %rax	# bl, tmp306
	movq	8(%rax), %rax	# bl_2->biv, D.24622
	movq	32(%rax), %rax	# _102->dest_reg, D.24623
	movq	%rdx, %rsi	# D.24623,
	movq	%rax, %rdi	# D.24623,
	call	gen_move_insn	#
	movq	%rax, %rdx	#, D.24623
	movq	-120(%rbp), %rax	# loop, tmp307
	movq	%rdx, %rsi	# D.24623,
	movq	%rax, %rdi	# tmp307,
	call	loop_insn_sink	#
.L1089:
.LBE65:
	.loc 1 5021 0
	movq	-80(%rbp), %rax	# bl, tmp308
	movq	64(%rax), %rax	# bl_2->next, tmp309
	movq	%rax, -80(%rbp)	# tmp309, bl
.L1071:
	.loc 1 5021 0 is_stmt 0 discriminator 1
	cmpq	$0, -80(%rbp)	#, bl
	jne	.L1090	#,
	.loc 1 5178 0 is_stmt 1
	movq	-120(%rbp), %rax	# loop, tmp310
	movq	192(%rax), %rax	# loop_9(D)->start, tmp311
	movq	%rax, -88(%rbp)	# tmp311, p
	jmp	.L1091	#
.L1094:
	.loc 1 5179 0
	movq	-88(%rbp), %rax	# p, tmp312
	movzwl	(%rax), %eax	# p_1->code, D.24624
	cmpw	$32, %ax	#, D.24624
	je	.L1092	#,
	.loc 1 5179 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# p, tmp313
	movzwl	(%rax), %eax	# p_1->code, D.24624
	cmpw	$33, %ax	#, D.24624
	je	.L1092	#,
	.loc 1 5180 0 is_stmt 1
	movq	-88(%rbp), %rax	# p, tmp314
	movzwl	(%rax), %eax	# p_1->code, D.24624
	cmpw	$34, %ax	#, D.24624
	jne	.L1093	#,
.L1092:
	.loc 1 5182 0
	movl	-100(%rbp), %edx	# reg_map_size, reg_map_size.455
	movq	-88(%rbp), %rax	# p, tmp315
	movq	32(%rax), %rax	# p_1->fld[3].rtx, D.24623
	movq	-32(%rbp), %rsi	# reg_map, tmp316
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# D.24623,
	call	replace_regs	#
	.loc 1 5183 0
	movl	-100(%rbp), %edx	# reg_map_size, reg_map_size.456
	movq	-88(%rbp), %rax	# p, tmp317
	movq	56(%rax), %rax	# p_1->fld[6].rtx, D.24623
	movq	-32(%rbp), %rsi	# reg_map, tmp318
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# D.24623,
	call	replace_regs	#
	.loc 1 5184 0
	movq	-88(%rbp), %rax	# p, tmp319
	movl	$-1, 40(%rax)	#, p_1->fld[4].rtint
.L1093:
	.loc 1 5178 0
	movq	-88(%rbp), %rax	# p, tmp320
	movq	24(%rax), %rax	# p_1->fld[2].rtx, tmp321
	movq	%rax, -88(%rbp)	# tmp321, p
.L1091:
	.loc 1 5178 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# loop, tmp322
	movq	200(%rax), %rax	# loop_9(D)->end, D.24623
	cmpq	-88(%rbp), %rax	# p, D.24623
	jne	.L1094	#,
	.loc 1 5187 0 is_stmt 1
	movq	-56(%rbp), %rax	# loop_info, tmp323
	movq	96(%rax), %rax	# loop_info_10->n_iterations, D.24618
	testq	%rax, %rax	# D.24618
	je	.L1095	#,
	.loc 1 5192 0
	movl	-104(%rbp), %eax	# insn_count, tmp327
	subl	$2, %eax	#, tmp326
	movl	%eax, -112(%rbp)	# tmp326, unrolled_insn_copies
	.loc 1 5202 0
	movl	-112(%rbp), %eax	# unrolled_insn_copies, tmp328
	cltq
	movl	%eax, %edx	# D.24618, D.24625
	movq	-56(%rbp), %rax	# loop_info, tmp329
	movq	96(%rax), %rax	# loop_info_10->n_iterations, D.24618
	imull	%edx, %eax	# D.24625, D.24625
	movl	%eax, -112(%rbp)	# D.24625, unrolled_insn_copies
	.loc 1 5207 0
	subl	$1, -112(%rbp)	#, unrolled_insn_copies
	.loc 1 5210 0
	cmpl	$0, -112(%rbp)	#, unrolled_insn_copies
	jns	.L1095	#,
	.loc 1 5211 0
	movl	$0, -112(%rbp)	#, unrolled_insn_copies
.L1095:
	.loc 1 5218 0
	movl	-124(%rbp), %eax	# flags, tmp330
	andl	$1, %eax	#, D.24616
	testl	%eax, %eax	# D.24616
	jne	.L1096	#,
	.loc 1 5219 0
	movl	-124(%rbp), %eax	# flags, tmp331
	andl	$8, %eax	#, D.24616
	testl	%eax, %eax	# D.24616
	jne	.L1097	#,
	.loc 1 5220 0
	movq	-56(%rbp), %rax	# loop_info, tmp332
	movq	96(%rax), %rax	# loop_info_10->n_iterations, D.24618
	testq	%rax, %rax	# D.24618
	je	.L1097	#,
	.loc 1 5221 0
	movl	-112(%rbp), %eax	# unrolled_insn_copies, tmp333
	cmpl	-104(%rbp), %eax	# insn_count, tmp333
	jg	.L1097	#,
.L1096:
	.loc 1 5222 0
	movl	-104(%rbp), %ecx	# insn_count, tmp334
	movq	-120(%rbp), %rax	# loop, tmp335
	movl	$1, %edx	#,
	movl	%ecx, %esi	# tmp334,
	movq	%rax, %rdi	# tmp335,
	call	unroll_loop	#
.L1097:
	.loc 1 5225 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.457
	andl	$33554432, %eax	#, D.24616
	testl	%eax, %eax	# D.24616
	jne	.L1098	#,
	.loc 1 5225 0 is_stmt 0 discriminator 1
	movl	x86_use_loop(%rip), %edx	# x86_use_loop, x86_use_loop.458
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.459
	movl	%eax, %ecx	# ix86_cpu.460, tmp357
	sarl	%cl, %edx	# tmp357, D.24616
	movl	%edx, %eax	# D.24616, D.24616
	andl	$1, %eax	#, D.24616
	testl	%eax, %eax	# D.24616
	je	.L1098	#,
	movl	-124(%rbp), %eax	# flags, tmp336
	andl	$2, %eax	#, D.24616
	testl	%eax, %eax	# D.24616
	je	.L1098	#,
	movl	flag_branch_on_count_reg(%rip), %eax	# flag_branch_on_count_reg, flag_branch_on_count_reg.461
	testl	%eax, %eax	# flag_branch_on_count_reg.461
	je	.L1098	#,
	.loc 1 5226 0 is_stmt 1
	movq	-120(%rbp), %rax	# loop, tmp337
	movq	%rax, %rdi	# tmp337,
	call	doloop_optimize	#
.L1098:
	.loc 1 5232 0
	movl	-124(%rbp), %eax	# flags, tmp338
	andl	$2, %eax	#, D.24616
	testl	%eax, %eax	# D.24616
	je	.L1099	#,
	.loc 1 5233 0
	movq	-56(%rbp), %rax	# loop_info, tmp339
	movq	96(%rax), %rax	# loop_info_10->n_iterations, D.24618
	movq	-56(%rbp), %rdx	# loop_info, tmp340
	movl	104(%rdx), %edx	# loop_info_10->unroll_number, D.24617
	movl	%edx, %ebx	# D.24617, D.24618
	movl	$0, %edx	#, tmp342
	divq	%rbx	# D.24618
	cmpq	$1, %rax	#, D.24618
	jbe	.L1099	#,
.LBB67:
	.loc 1 5235 0
	movq	-56(%rbp), %rax	# loop_info, tmp343
	movq	96(%rax), %rax	# loop_info_10->n_iterations, D.24618
	movq	-56(%rbp), %rdx	# loop_info, tmp344
	movl	104(%rdx), %edx	# loop_info_10->unroll_number, D.24617
	movl	%edx, %ebx	# D.24617, D.24618
	movl	$0, %edx	#, tmp346
	divq	%rbx	# D.24618
	movl	%eax, -92(%rbp)	# D.24618, n
	.loc 1 5238 0
	movl	$10000, %eax	#, tmp349
	cltd
	idivl	-92(%rbp)	# n
	.loc 1 5236 0
	movl	$10000, %edx	#, tmp350
	subl	%eax, %edx	# D.24616, D.24616
	movq	-120(%rbp), %rax	# loop, tmp351
	movq	200(%rax), %rax	# loop_9(D)->end, D.24623
	movq	16(%rax), %rax	# _150->fld[1].rtx, D.24623
	movl	$5, %esi	#,
	movq	%rax, %rdi	# D.24623,
	call	predict_insn	#
.L1099:
.LBE67:
	.loc 1 5241 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.462
	testq	%rax, %rax	# loop_dump_stream.462
	je	.L1100	#,
	.loc 1 5242 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.463
	movq	%rax, %rsi	# loop_dump_stream.463,
	movl	$10, %edi	#,
	call	fputc	#
.L1100:
	.loc 1 5244 0
	movq	-120(%rbp), %rax	# loop, tmp352
	movq	%rax, %rdi	# tmp352,
	call	loop_ivs_free	#
	.loc 1 5245 0
	cmpq	$0, -32(%rbp)	#, reg_map
	je	.L1062	#,
	.loc 1 5246 0
	movq	-32(%rbp), %rax	# reg_map, tmp353
	movq	%rax, %rdi	# tmp353,
	call	free	#
.L1062:
	.loc 1 5247 0
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE51:
	.size	strength_reduce, .-strength_reduce
	.type	check_insn_for_bivs, @function
check_insn_for_bivs:
.LFB52:
	.loc 1 5256 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$112, %rsp	#,
	movq	%rdi, -72(%rbp)	# loop, loop
	movq	%rsi, -80(%rbp)	# p, p
	movl	%edx, -84(%rbp)	# not_every_iteration, not_every_iteration
	movl	%ecx, -88(%rbp)	# maybe_multiple, maybe_multiple
	.loc 1 5257 0
	movq	-72(%rbp), %rax	# loop, tmp102
	movq	160(%rax), %rax	# loop_3(D)->aux, D.24630
	addq	$208, %rax	#, tmp103
	movq	%rax, -32(%rbp)	# tmp103, ivs
	.loc 1 5264 0
	movq	-80(%rbp), %rax	# p, tmp104
	movzwl	(%rax), %eax	# p_6(D)->code, D.24631
	cmpw	$32, %ax	#, D.24631
	jne	.L1102	#,
	.loc 1 5265 0
	movq	-80(%rbp), %rax	# p, tmp105
	movzwl	(%rax), %eax	# p_6(D)->code, D.24631
	movzwl	%ax, %eax	# D.24631, D.24632
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24633
	cmpb	$105, %al	#, D.24633
	jne	.L1103	#,
	.loc 1 5265 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# p, tmp107
	movq	32(%rax), %rax	# p_6(D)->fld[3].rtx, D.24634
	movzwl	(%rax), %eax	# _11->code, D.24631
	cmpw	$47, %ax	#, D.24631
	jne	.L1104	#,
	.loc 1 5265 0 discriminator 3
	movq	-80(%rbp), %rax	# p, tmp108
	movq	32(%rax), %rax	# p_6(D)->fld[3].rtx, iftmp.465
	jmp	.L1106	#
.L1104:
	.loc 1 5265 0 discriminator 4
	movq	-80(%rbp), %rax	# p, tmp109
	movq	32(%rax), %rdx	# p_6(D)->fld[3].rtx, D.24634
	movq	-80(%rbp), %rax	# p, tmp110
	movq	%rdx, %rsi	# D.24634,
	movq	%rax, %rdi	# tmp110,
	call	single_set_2	#
	jmp	.L1106	#
.L1103:
	.loc 1 5265 0 discriminator 2
	movl	$0, %eax	#, iftmp.464
.L1106:
	.loc 1 5265 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.464, set
	cmpq	$0, -24(%rbp)	#, set
	je	.L1102	#,
	.loc 1 5266 0 is_stmt 1
	movq	-24(%rbp), %rax	# set, tmp111
	movq	8(%rax), %rax	# set_18->fld[0].rtx, D.24634
	movzwl	(%rax), %eax	# _19->code, D.24631
	cmpw	$61, %ax	#, D.24631
	jne	.L1102	#,
	.loc 1 5268 0
	movq	-24(%rbp), %rax	# set, tmp112
	movq	8(%rax), %rax	# set_18->fld[0].rtx, tmp113
	movq	%rax, -16(%rbp)	# tmp113, dest_reg
	.loc 1 5269 0
	movq	-16(%rbp), %rax	# dest_reg, tmp114
	movl	8(%rax), %edx	# dest_reg_21->fld[0].rtuint, D.24635
	movl	max_reg_before_loop(%rip), %eax	# max_reg_before_loop, max_reg_before_loop.466
	cmpl	%eax, %edx	# max_reg_before_loop.466, D.24635
	jae	.L1102	#,
	.loc 1 5270 0
	movq	-16(%rbp), %rax	# dest_reg, tmp115
	movl	8(%rax), %eax	# dest_reg_21->fld[0].rtuint, D.24635
	cmpl	$52, %eax	#, D.24635
	jbe	.L1102	#,
	.loc 1 5271 0
	movq	-32(%rbp), %rax	# ivs, tmp116
	movq	(%rax), %rdx	# ivs_5->regs, D.24636
	movq	-16(%rbp), %rax	# dest_reg, tmp117
	movl	8(%rax), %eax	# dest_reg_21->fld[0].rtuint, D.24635
	movl	%eax, %eax	# D.24635, D.24637
	salq	$4, %rax	#, D.24637
	addq	%rdx, %rax	# D.24636, D.24636
	movl	(%rax), %eax	# _29->type, D.24638
	cmpl	$2, %eax	#, D.24638
	je	.L1102	#,
	.loc 1 5274 0
	movq	-24(%rbp), %rax	# set, tmp118
	movq	16(%rax), %rax	# set_18->fld[1].rtx, D.24634
	movzbl	2(%rax), %eax	# _31->mode, D.24639
	.loc 1 5273 0
	movzbl	%al, %edx	# D.24639, D.24640
	movq	-24(%rbp), %rax	# set, tmp119
	movq	16(%rax), %rsi	# set_18->fld[1].rtx, D.24634
	leaq	-56(%rbp), %r9	#, tmp120
	movq	-80(%rbp), %r8	# p, tmp121
	movq	-16(%rbp), %rcx	# dest_reg, tmp122
	movq	-72(%rbp), %rax	# loop, tmp123
	leaq	-40(%rbp), %rdi	#, tmp124
	movq	%rdi, 8(%rsp)	# tmp124,
	leaq	-48(%rbp), %rdi	#, tmp125
	movq	%rdi, (%rsp)	# tmp125,
	movq	%rax, %rdi	# tmp123,
	call	basic_induction_var	#
	testl	%eax, %eax	# D.24632
	je	.L1107	#,
.LBB68:
	.loc 1 5281 0
	movl	$168, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp126, v
	.loc 1 5284 0
	movq	-40(%rbp), %rdi	# location, location.467
	movq	-48(%rbp), %r9	# mult_val, mult_val.468
	movq	-56(%rbp), %r10	# inc_val, inc_val.469
	movq	-16(%rbp), %rcx	# dest_reg, tmp127
	movq	-80(%rbp), %rdx	# p, tmp128
	movq	-8(%rbp), %rsi	# v, tmp129
	movq	-72(%rbp), %rax	# loop, tmp130
	movl	-88(%rbp), %r8d	# maybe_multiple, tmp131
	movl	%r8d, 16(%rsp)	# tmp131,
	movl	-84(%rbp), %r8d	# not_every_iteration, tmp132
	movl	%r8d, 8(%rsp)	# tmp132,
	movq	%rdi, (%rsp)	# location.467,
	movq	%r10, %r8	# inc_val.469,
	movq	%rax, %rdi	# tmp130,
	call	record_biv	#
	.loc 1 5286 0
	movq	-32(%rbp), %rax	# ivs, tmp133
	movq	(%rax), %rdx	# ivs_5->regs, D.24636
	movq	-16(%rbp), %rax	# dest_reg, tmp134
	movl	8(%rax), %eax	# dest_reg_21->fld[0].rtuint, D.24635
	movl	%eax, %eax	# D.24635, D.24637
	salq	$4, %rax	#, D.24637
	addq	%rdx, %rax	# D.24636, D.24636
	movl	$1, (%rax)	#, _46->type
.LBE68:
	jmp	.L1102	#
.L1107:
	.loc 1 5288 0
	movq	-16(%rbp), %rax	# dest_reg, tmp135
	movl	8(%rax), %edx	# dest_reg_21->fld[0].rtuint, D.24635
	movq	-32(%rbp), %rax	# ivs, tmp136
	movl	8(%rax), %eax	# ivs_5->n_regs, D.24635
	cmpl	%eax, %edx	# D.24635, D.24635
	jae	.L1102	#,
	.loc 1 5289 0
	movq	-32(%rbp), %rax	# ivs, tmp137
	movq	(%rax), %rdx	# ivs_5->regs, D.24636
	movq	-16(%rbp), %rax	# dest_reg, tmp138
	movl	8(%rax), %eax	# dest_reg_21->fld[0].rtuint, D.24635
	movl	%eax, %eax	# D.24635, D.24637
	salq	$4, %rax	#, D.24637
	addq	%rdx, %rax	# D.24636, D.24636
	movl	$2, (%rax)	#, _53->type
.L1102:
	.loc 1 5292 0
	movq	-80(%rbp), %rax	# p, D.24641
	.loc 1 5293 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE52:
	.size	check_insn_for_bivs, .-check_insn_for_bivs
	.type	check_insn_for_givs, @function
check_insn_for_givs:
.LFB53:
	.loc 1 5304 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$184, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -120(%rbp)	# loop, loop
	movq	%rsi, -128(%rbp)	# p, p
	movl	%edx, -132(%rbp)	# not_every_iteration, not_every_iteration
	movl	%ecx, -136(%rbp)	# maybe_multiple, maybe_multiple
	.loc 1 5305 0
	movq	-120(%rbp), %rax	# loop, tmp118
	movq	160(%rax), %rax	# loop_7(D)->aux, D.24643
	addq	$184, %rax	#, tmp119
	movq	%rax, -56(%rbp)	# tmp119, regs
	.loc 1 5309 0
	movq	-128(%rbp), %rax	# p, tmp120
	movzwl	(%rax), %eax	# p_10(D)->code, D.24644
	cmpw	$32, %ax	#, D.24644
	jne	.L1110	#,
	.loc 1 5310 0
	movq	-128(%rbp), %rax	# p, tmp121
	movzwl	(%rax), %eax	# p_10(D)->code, D.24644
	movzwl	%ax, %eax	# D.24644, D.24645
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24646
	cmpb	$105, %al	#, D.24646
	jne	.L1111	#,
	.loc 1 5310 0 is_stmt 0 discriminator 1
	movq	-128(%rbp), %rax	# p, tmp123
	movq	32(%rax), %rax	# p_10(D)->fld[3].rtx, D.24647
	movzwl	(%rax), %eax	# _15->code, D.24644
	cmpw	$47, %ax	#, D.24644
	jne	.L1112	#,
	.loc 1 5310 0 discriminator 3
	movq	-128(%rbp), %rax	# p, tmp124
	movq	32(%rax), %rax	# p_10(D)->fld[3].rtx, iftmp.471
	jmp	.L1114	#
.L1112:
	.loc 1 5310 0 discriminator 4
	movq	-128(%rbp), %rax	# p, tmp125
	movq	32(%rax), %rdx	# p_10(D)->fld[3].rtx, D.24647
	movq	-128(%rbp), %rax	# p, tmp126
	movq	%rdx, %rsi	# D.24647,
	movq	%rax, %rdi	# tmp126,
	call	single_set_2	#
	jmp	.L1114	#
.L1111:
	.loc 1 5310 0 discriminator 2
	movl	$0, %eax	#, iftmp.470
.L1114:
	.loc 1 5310 0 discriminator 5
	movq	%rax, -48(%rbp)	# iftmp.470, set
	cmpq	$0, -48(%rbp)	#, set
	je	.L1110	#,
	.loc 1 5311 0 is_stmt 1
	movq	-48(%rbp), %rax	# set, tmp127
	movq	8(%rax), %rax	# set_22->fld[0].rtx, D.24647
	movzwl	(%rax), %eax	# _23->code, D.24644
	cmpw	$61, %ax	#, D.24644
	jne	.L1110	#,
	.loc 1 5312 0
	movq	-56(%rbp), %rax	# regs, tmp128
	movq	8(%rax), %rcx	# regs_9->array, D.24648
	movq	-48(%rbp), %rax	# set, tmp129
	movq	8(%rax), %rax	# set_22->fld[0].rtx, D.24647
	movl	8(%rax), %eax	# _26->fld[0].rtuint, D.24649
	movl	%eax, %edx	# D.24649, D.24650
	movq	%rdx, %rax	# D.24650, tmp130
	addq	%rax, %rax	# tmp130
	addq	%rdx, %rax	# D.24650, tmp130
	salq	$3, %rax	#, tmp131
	addq	%rcx, %rax	# D.24648, D.24648
	movzbl	16(%rax), %eax	# _30->may_not_optimize, D.24646
	testb	%al, %al	# D.24646
	jne	.L1110	#,
.LBB69:
	.loc 1 5320 0
	movq	$0, -40(%rbp)	#, regnote
	.loc 1 5323 0
	movq	-48(%rbp), %rax	# set, tmp132
	movq	8(%rax), %rax	# set_22->fld[0].rtx, tmp133
	movq	%rax, -32(%rbp)	# tmp133, dest_reg
	.loc 1 5324 0
	movq	-32(%rbp), %rax	# dest_reg, tmp134
	movl	8(%rax), %eax	# dest_reg_33->fld[0].rtuint, D.24649
	cmpl	$52, %eax	#, D.24649
	ja	.L1115	#,
	.loc 1 5325 0
	movq	-128(%rbp), %rax	# p, D.24642
	jmp	.L1116	#
.L1115:
	.loc 1 5328 0
	movq	-48(%rbp), %rax	# set, tmp135
	movq	16(%rax), %rsi	# set_22->fld[1].rtx, D.24647
	leaq	-72(%rbp), %r9	#, tmp136
	leaq	-80(%rbp), %r8	#, tmp137
	leaq	-88(%rbp), %rcx	#, tmp138
	leaq	-96(%rbp), %rdx	#, tmp139
	movq	-120(%rbp), %rax	# loop, tmp140
	movl	$0, 16(%rsp)	#,
	leaq	-100(%rbp), %rdi	#, tmp141
	movq	%rdi, 8(%rsp)	# tmp141,
	movl	$0, (%rsp)	#,
	movq	%rax, %rdi	# tmp140,
	call	general_induction_var	#
	.loc 1 5327 0
	testl	%eax, %eax	# D.24645
	jne	.L1117	#,
	.loc 1 5331 0
	movq	-128(%rbp), %rax	# p, tmp142
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp142,
	call	find_reg_note	#
	movq	%rax, -40(%rbp)	# tmp143, regnote
	cmpq	$0, -40(%rbp)	#, regnote
	je	.L1110	#,
	.loc 1 5332 0
	movq	-40(%rbp), %rax	# regnote, tmp144
	movq	8(%rax), %rsi	# regnote_38->fld[0].rtx, D.24647
	leaq	-72(%rbp), %r9	#, tmp145
	leaq	-80(%rbp), %r8	#, tmp146
	leaq	-88(%rbp), %rcx	#, tmp147
	leaq	-96(%rbp), %rdx	#, tmp148
	movq	-120(%rbp), %rax	# loop, tmp149
	movl	$0, 16(%rsp)	#,
	leaq	-100(%rbp), %rdi	#, tmp150
	movq	%rdi, 8(%rsp)	# tmp150,
	movl	$0, (%rsp)	#,
	movq	%rax, %rdi	# tmp149,
	call	general_induction_var	#
	testl	%eax, %eax	# D.24645
	je	.L1110	#,
.L1117:
	.loc 1 5337 0
	movq	-32(%rbp), %rax	# dest_reg, tmp151
	movl	8(%rax), %edx	# dest_reg_33->fld[0].rtuint, D.24649
	movl	max_reg_before_loop(%rip), %eax	# max_reg_before_loop, max_reg_before_loop.472
	cmpl	%eax, %edx	# max_reg_before_loop.472, D.24649
	jae	.L1110	#,
	.loc 1 5339 0
	movq	-96(%rbp), %rax	# src_reg, src_reg.473
	cmpq	%rax, -32(%rbp)	# src_reg.473, dest_reg
	je	.L1110	#,
	.loc 1 5341 0
	movq	-56(%rbp), %rax	# regs, tmp152
	movq	8(%rax), %rcx	# regs_9->array, D.24648
	movq	-32(%rbp), %rax	# dest_reg, tmp153
	movl	8(%rax), %eax	# dest_reg_33->fld[0].rtuint, D.24649
	movl	%eax, %edx	# D.24649, D.24650
	movq	%rdx, %rax	# D.24650, tmp154
	addq	%rax, %rax	# tmp154
	addq	%rdx, %rax	# D.24650, tmp154
	salq	$3, %rax	#, tmp155
	addq	%rcx, %rax	# D.24648, D.24648
	movl	4(%rax), %eax	# _48->n_times_set, D.24645
	cmpl	$1, %eax	#, D.24645
	je	.L1119	#,
	.loc 1 5343 0
	movq	-96(%rbp), %rcx	# src_reg, src_reg.474
	movl	-100(%rbp), %esi	# benefit, benefit.475
	leaq	-88(%rbp), %r9	#, tmp156
	movq	-32(%rbp), %r8	# dest_reg, tmp157
	movq	-128(%rbp), %rdx	# p, tmp158
	movq	-120(%rbp), %rax	# loop, tmp159
	leaq	-64(%rbp), %rdi	#, tmp160
	movq	%rdi, 16(%rsp)	# tmp160,
	leaq	-72(%rbp), %rdi	#, tmp161
	movq	%rdi, 8(%rsp)	# tmp161,
	leaq	-80(%rbp), %rdi	#, tmp162
	movq	%rdi, (%rsp)	# tmp162,
	movq	%rax, %rdi	# tmp159,
	call	consec_sets_giv	#
	movl	%eax, -100(%rbp)	# benefit.476, benefit
	movl	-100(%rbp), %eax	# benefit, benefit.477
	testl	%eax, %eax	# benefit.477
	je	.L1110	#,
.L1119:
.LBB70:
	.loc 1 5348 0
	movl	$168, %edi	#,
	call	xmalloc	#
	movq	%rax, -24(%rbp)	# tmp163, v
	.loc 1 5352 0
	movq	-128(%rbp), %rax	# p, tmp164
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp164,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24647
	je	.L1120	#,
	.loc 1 5353 0
	movq	-128(%rbp), %rax	# p, tmp165
	movq	%rax, %rdi	# tmp165,
	call	libcall_benefit	#
	movl	-100(%rbp), %edx	# benefit, benefit.478
	addl	%edx, %eax	# benefit.478, benefit.479
	movl	%eax, -100(%rbp)	# benefit.479, benefit
.L1120:
	.loc 1 5356 0
	movq	-56(%rbp), %rax	# regs, tmp166
	movq	8(%rax), %rcx	# regs_9->array, D.24648
	movq	-32(%rbp), %rax	# dest_reg, tmp167
	movl	8(%rax), %eax	# dest_reg_33->fld[0].rtuint, D.24649
	movl	%eax, %edx	# D.24649, D.24650
	movq	%rdx, %rax	# D.24650, tmp168
	addq	%rax, %rax	# tmp168
	addq	%rdx, %rax	# D.24650, tmp168
	salq	$3, %rax	#, tmp169
	addq	%rcx, %rax	# D.24648, D.24648
	movl	4(%rax), %eax	# _63->n_times_set, D.24645
	cmpl	$1, %eax	#, D.24645
	je	.L1121	#,
	.loc 1 5357 0
	movq	-64(%rbp), %rax	# last_consec_insn, tmp170
	movq	%rax, -128(%rbp)	# tmp170, p
.L1121:
	.loc 1 5359 0
	movl	-100(%rbp), %r9d	# benefit, benefit.480
	movq	-72(%rbp), %r8	# ext_val, ext_val.481
	movq	-88(%rbp), %rdi	# add_val, add_val.482
	movq	-80(%rbp), %rbx	# mult_val, mult_val.483
	movq	-96(%rbp), %rcx	# src_reg, src_reg.484
	movq	-32(%rbp), %r11	# dest_reg, tmp171
	movq	-128(%rbp), %rdx	# p, tmp172
	movq	-24(%rbp), %rsi	# v, tmp173
	movq	-120(%rbp), %rax	# loop, tmp174
	movq	$0, 48(%rsp)	#,
	movl	-136(%rbp), %r10d	# maybe_multiple, tmp175
	movl	%r10d, 40(%rsp)	# tmp175,
	movl	-132(%rbp), %r10d	# not_every_iteration, tmp176
	movl	%r10d, 32(%rsp)	# tmp176,
	movl	$1, 24(%rsp)	#,
	movl	%r9d, 16(%rsp)	# benefit.480,
	movq	%r8, 8(%rsp)	# ext_val.481,
	movq	%rdi, (%rsp)	# add_val.482,
	movq	%rbx, %r9	# mult_val.483,
	movq	%r11, %r8	# tmp171,
	movq	%rax, %rdi	# tmp174,
	call	record_giv	#
.L1110:
.LBE70:
.LBE69:
	.loc 1 5370 0
	movq	-128(%rbp), %rax	# p, tmp177
	movzwl	(%rax), %eax	# p_3->code, D.24644
	cmpw	$32, %ax	#, D.24644
	jne	.L1122	#,
	.loc 1 5371 0
	movq	-128(%rbp), %rax	# p, tmp178
	movq	32(%rax), %rsi	# p_3->fld[3].rtx, D.24647
	movl	-136(%rbp), %edi	# maybe_multiple, tmp179
	movl	-132(%rbp), %ecx	# not_every_iteration, tmp180
	movq	-128(%rbp), %rdx	# p, tmp181
	movq	-120(%rbp), %rax	# loop, tmp182
	movl	%edi, %r8d	# tmp179,
	movq	%rax, %rdi	# tmp182,
	call	find_mem_givs	#
.L1122:
	.loc 1 5377 0
	movq	-128(%rbp), %rax	# p, tmp183
	movzwl	(%rax), %eax	# p_3->code, D.24644
	cmpw	$32, %ax	#, D.24644
	je	.L1123	#,
	.loc 1 5377 0 is_stmt 0 discriminator 1
	movq	-128(%rbp), %rax	# p, tmp184
	movzwl	(%rax), %eax	# p_3->code, D.24644
	cmpw	$33, %ax	#, D.24644
	je	.L1123	#,
	.loc 1 5378 0 is_stmt 1
	movq	-128(%rbp), %rax	# p, tmp185
	movzwl	(%rax), %eax	# p_3->code, D.24644
	cmpw	$36, %ax	#, D.24644
	jne	.L1124	#,
.L1123:
	.loc 1 5379 0
	movq	-128(%rbp), %rdx	# p, tmp186
	movq	-120(%rbp), %rax	# loop, tmp187
	movq	%rdx, %rsi	# tmp186,
	movq	%rax, %rdi	# tmp187,
	call	update_giv_derive	#
.L1124:
	.loc 1 5380 0
	movq	-128(%rbp), %rax	# p, D.24642
.L1116:
	.loc 1 5381 0
	addq	$184, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE53:
	.size	check_insn_for_givs, .-check_insn_for_givs
	.type	valid_initial_value_p, @function
valid_initial_value_p:
.LFB54:
	.loc 1 5397 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# x, x
	movq	%rsi, -16(%rbp)	# insn, insn
	movl	%edx, -20(%rbp)	# call_seen, call_seen
	movq	%rcx, -32(%rbp)	# loop_start, loop_start
	.loc 1 5398 0
	movq	-8(%rbp), %rax	# x, tmp74
	movzwl	(%rax), %eax	# x_2(D)->code, D.24652
	cmpw	$67, %ax	#, D.24652
	je	.L1126	#,
	.loc 1 5398 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp75
	movzwl	(%rax), %eax	# x_2(D)->code, D.24652
	cmpw	$68, %ax	#, D.24652
	je	.L1126	#,
	movq	-8(%rbp), %rax	# x, tmp76
	movzwl	(%rax), %eax	# x_2(D)->code, D.24652
	cmpw	$54, %ax	#, D.24652
	je	.L1126	#,
	movq	-8(%rbp), %rax	# x, tmp77
	movzwl	(%rax), %eax	# x_2(D)->code, D.24652
	cmpw	$55, %ax	#, D.24652
	je	.L1126	#,
	movq	-8(%rbp), %rax	# x, tmp78
	movzwl	(%rax), %eax	# x_2(D)->code, D.24652
	cmpw	$58, %ax	#, D.24652
	je	.L1126	#,
	movq	-8(%rbp), %rax	# x, tmp79
	movzwl	(%rax), %eax	# x_2(D)->code, D.24652
	cmpw	$134, %ax	#, D.24652
	je	.L1126	#,
	movq	-8(%rbp), %rax	# x, tmp80
	movzwl	(%rax), %eax	# x_2(D)->code, D.24652
	cmpw	$56, %ax	#, D.24652
	je	.L1126	#,
	movq	-8(%rbp), %rax	# x, tmp81
	movzwl	(%rax), %eax	# x_2(D)->code, D.24652
	cmpw	$140, %ax	#, D.24652
	jne	.L1127	#,
.L1126:
	.loc 1 5399 0 is_stmt 1
	movl	$1, %eax	#, D.24651
	jmp	.L1128	#
.L1127:
	.loc 1 5403 0
	movq	-8(%rbp), %rax	# x, tmp82
	movzwl	(%rax), %eax	# x_2(D)->code, D.24652
	cmpw	$61, %ax	#, D.24652
	jne	.L1129	#,
	.loc 1 5404 0
	movq	-8(%rbp), %rax	# x, tmp83
	movl	8(%rax), %edx	# x_2(D)->fld[0].rtuint, D.24653
	movl	max_reg_before_loop(%rip), %eax	# max_reg_before_loop, max_reg_before_loop.485
	cmpl	%eax, %edx	# max_reg_before_loop.485, D.24653
	jb	.L1130	#,
.L1129:
	.loc 1 5405 0
	movl	$0, %eax	#, D.24651
	jmp	.L1128	#
.L1130:
	.loc 1 5409 0
	movq	-8(%rbp), %rax	# x, tmp84
	movl	8(%rax), %eax	# x_2(D)->fld[0].rtuint, D.24653
	cmpl	$52, %eax	#, D.24653
	ja	.L1131	#,
	.loc 1 5412 0
	movl	$0, %eax	#, D.24651
	jmp	.L1128	#
.L1131:
	.loc 1 5416 0
	movq	-32(%rbp), %rdx	# loop_start, tmp85
	movq	-16(%rbp), %rcx	# insn, tmp86
	movq	-8(%rbp), %rax	# x, tmp87
	movq	%rcx, %rsi	# tmp86,
	movq	%rax, %rdi	# tmp87,
	call	reg_set_between_p	#
	testl	%eax, %eax	# D.24651
	je	.L1132	#,
	.loc 1 5417 0
	movl	$0, %eax	#, D.24651
	jmp	.L1128	#
.L1132:
	.loc 1 5419 0
	movl	$1, %eax	#, D.24651
.L1128:
	.loc 1 5420 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE54:
	.size	valid_initial_value_p, .-valid_initial_value_p
	.type	find_mem_givs, @function
find_mem_givs:
.LFB55:
	.loc 1 5434 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$168, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# loop, loop
	movq	%rsi, -96(%rbp)	# x, x
	movq	%rdx, -104(%rbp)	# insn, insn
	movl	%ecx, -108(%rbp)	# not_every_iteration, not_every_iteration
	movl	%r8d, -112(%rbp)	# maybe_multiple, maybe_multiple
	.loc 1 5439 0
	cmpq	$0, -96(%rbp)	#, x
	jne	.L1134	#,
	.loc 1 5440 0
	jmp	.L1133	#
.L1134:
	.loc 1 5442 0
	movq	-96(%rbp), %rax	# x, tmp86
	movzwl	(%rax), %eax	# x_3(D)->code, D.24654
	movzwl	%ax, %eax	# D.24654, tmp87
	movl	%eax, -68(%rbp)	# tmp87, code
	.loc 1 5443 0
	movl	-68(%rbp), %eax	# code, tmp89
	subl	$44, %eax	#, tmp88
	cmpl	$25, %eax	#, tmp88
	ja	.L1148	#,
	movl	%eax, %eax	# tmp88, tmp90
	movq	.L1138(,%rax,8), %rax	#, tmp91
	jmp	*%rax	# tmp91
	.section	.rodata
	.align 8
	.align 4
.L1138:
	.quad	.L1149
	.quad	.L1149
	.quad	.L1148
	.quad	.L1148
	.quad	.L1149
	.quad	.L1149
	.quad	.L1148
	.quad	.L1148
	.quad	.L1148
	.quad	.L1148
	.quad	.L1149
	.quad	.L1149
	.quad	.L1148
	.quad	.L1148
	.quad	.L1149
	.quad	.L1149
	.quad	.L1148
	.quad	.L1149
	.quad	.L1148
	.quad	.L1148
	.quad	.L1148
	.quad	.L1148
	.quad	.L1139
	.quad	.L1149
	.quad	.L1149
	.quad	.L1149
	.text
.L1139:
.LBB71:
	.loc 1 5474 0
	movq	-96(%rbp), %rax	# x, tmp92
	movzbl	2(%rax), %eax	# x_3(D)->mode, D.24655
	.loc 1 5472 0
	movzbl	%al, %edi	# D.24655, D.24656
	movq	-96(%rbp), %rax	# x, tmp93
	movq	8(%rax), %rsi	# x_3(D)->fld[0].rtx, D.24657
	leaq	-40(%rbp), %r9	#, tmp94
	leaq	-48(%rbp), %r8	#, tmp95
	leaq	-56(%rbp), %rcx	#, tmp96
	leaq	-64(%rbp), %rdx	#, tmp97
	movq	-88(%rbp), %rax	# loop, tmp98
	movl	%edi, 16(%rsp)	# D.24656,
	leaq	-80(%rbp), %rdi	#, tmp99
	movq	%rdi, 8(%rsp)	# tmp99,
	movl	$1, (%rsp)	#,
	movq	%rax, %rdi	# tmp98,
	call	general_induction_var	#
	testl	%eax, %eax	# D.24658
	je	.L1140	#,
.LBB72:
	.loc 1 5477 0
	movl	$168, %edi	#,
	call	xmalloc	#
	movq	%rax, -32(%rbp)	# tmp100, v
	.loc 1 5480 0
	movq	-96(%rbp), %rax	# x, tmp101
	leaq	8(%rax), %r10	#, D.24659
	movl	-80(%rbp), %r9d	# benefit, benefit.486
	movq	-40(%rbp), %r8	# ext_val, ext_val.487
	movq	-56(%rbp), %rdi	# add_val, add_val.488
	movq	-48(%rbp), %rbx	# mult_val, mult_val.489
	movq	addr_placeholder(%rip), %r11	# addr_placeholder, addr_placeholder.490
	movq	-64(%rbp), %rcx	# src_reg, src_reg.491
	movq	-104(%rbp), %rdx	# insn, tmp102
	movq	-32(%rbp), %rsi	# v, tmp103
	movq	-88(%rbp), %rax	# loop, tmp104
	movq	%r10, 48(%rsp)	# D.24659,
	movl	-112(%rbp), %r10d	# maybe_multiple, tmp105
	movl	%r10d, 40(%rsp)	# tmp105,
	movl	-108(%rbp), %r10d	# not_every_iteration, tmp106
	movl	%r10d, 32(%rsp)	# tmp106,
	movl	$0, 24(%rsp)	#,
	movl	%r9d, 16(%rsp)	# benefit.486,
	movq	%r8, 8(%rsp)	# ext_val.487,
	movq	%rdi, (%rsp)	# add_val.488,
	movq	%rbx, %r9	# mult_val.489,
	movq	%r11, %r8	# addr_placeholder.490,
	movq	%rax, %rdi	# tmp104,
	call	record_giv	#
	.loc 1 5484 0
	movq	-32(%rbp), %rax	# v, tmp107
	movq	-96(%rbp), %rdx	# x, tmp108
	movq	%rdx, 56(%rax)	# tmp108, v_11->mem
.LBE72:
.LBE71:
	.loc 1 5487 0
	jmp	.L1133	#
.L1140:
	jmp	.L1133	#
.L1148:
	.loc 1 5490 0
	nop
	.loc 1 5495 0
	movl	-68(%rbp), %eax	# code, code.492
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp110
	movq	%rax, -24(%rbp)	# tmp110, fmt
	.loc 1 5496 0
	movl	-68(%rbp), %eax	# code, code.493
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.24655
	movzbl	%al, %eax	# D.24655, D.24658
	subl	$1, %eax	#, tmp112
	movl	%eax, -76(%rbp)	# tmp112, i
	jmp	.L1141	#
.L1146:
	.loc 1 5497 0
	movl	-76(%rbp), %eax	# i, tmp113
	movslq	%eax, %rdx	# tmp113, D.24660
	movq	-24(%rbp), %rax	# fmt, tmp114
	addq	%rdx, %rax	# D.24660, D.24661
	movzbl	(%rax), %eax	# *_29, D.24662
	cmpb	$101, %al	#, D.24662
	jne	.L1142	#,
	.loc 1 5498 0
	movq	-96(%rbp), %rax	# x, tmp115
	movl	-76(%rbp), %edx	# i, tmp117
	movslq	%edx, %rdx	# tmp117, tmp116
	movq	8(%rax,%rdx,8), %rsi	# x_3(D)->fld[i_1].rtx, D.24657
	movl	-112(%rbp), %edi	# maybe_multiple, tmp118
	movl	-108(%rbp), %ecx	# not_every_iteration, tmp119
	movq	-104(%rbp), %rdx	# insn, tmp120
	movq	-88(%rbp), %rax	# loop, tmp121
	movl	%edi, %r8d	# tmp118,
	movq	%rax, %rdi	# tmp121,
	call	find_mem_givs	#
	jmp	.L1143	#
.L1142:
	.loc 1 5500 0
	movl	-76(%rbp), %eax	# i, tmp122
	movslq	%eax, %rdx	# tmp122, D.24660
	movq	-24(%rbp), %rax	# fmt, tmp123
	addq	%rdx, %rax	# D.24660, D.24661
	movzbl	(%rax), %eax	# *_33, D.24662
	cmpb	$69, %al	#, D.24662
	jne	.L1143	#,
	.loc 1 5501 0
	movl	$0, -72(%rbp)	#, j
	jmp	.L1144	#
.L1145:
	.loc 1 5502 0 discriminator 2
	movq	-96(%rbp), %rax	# x, tmp124
	movl	-76(%rbp), %edx	# i, tmp126
	movslq	%edx, %rdx	# tmp126, tmp125
	movq	8(%rax,%rdx,8), %rax	# x_3(D)->fld[i_1].rtvec, D.24663
	movl	-72(%rbp), %edx	# j, tmp128
	movslq	%edx, %rdx	# tmp128, tmp127
	movq	8(%rax,%rdx,8), %rsi	# _38->elem, D.24657
	movl	-112(%rbp), %edi	# maybe_multiple, tmp129
	movl	-108(%rbp), %ecx	# not_every_iteration, tmp130
	movq	-104(%rbp), %rdx	# insn, tmp131
	movq	-88(%rbp), %rax	# loop, tmp132
	movl	%edi, %r8d	# tmp129,
	movq	%rax, %rdi	# tmp132,
	call	find_mem_givs	#
	.loc 1 5501 0 discriminator 2
	addl	$1, -72(%rbp)	#, j
.L1144:
	.loc 1 5501 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# x, tmp133
	movl	-76(%rbp), %edx	# i, tmp135
	movslq	%edx, %rdx	# tmp135, tmp134
	movq	8(%rax,%rdx,8), %rax	# x_3(D)->fld[i_1].rtvec, D.24663
	movl	(%rax), %eax	# _36->num_elem, D.24658
	cmpl	-72(%rbp), %eax	# j, D.24658
	jg	.L1145	#,
.L1143:
	.loc 1 5496 0 is_stmt 1
	subl	$1, -76(%rbp)	#, i
.L1141:
	.loc 1 5496 0 is_stmt 0 discriminator 1
	cmpl	$0, -76(%rbp)	#, i
	jns	.L1146	#,
	jmp	.L1133	#
.L1149:
	.loc 1 5457 0 is_stmt 1
	nop
.L1133:
	.loc 1 5504 0
	addq	$168, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE55:
	.size	find_mem_givs, .-find_mem_givs
	.type	record_biv, @function
record_biv:
.LFB56:
	.loc 1 5534 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -24(%rbp)	# loop, loop
	movq	%rsi, -32(%rbp)	# v, v
	movq	%rdx, -40(%rbp)	# insn, insn
	movq	%rcx, -48(%rbp)	# dest_reg, dest_reg
	movq	%r8, -56(%rbp)	# inc_val, inc_val
	movq	%r9, -64(%rbp)	# mult_val, mult_val
	.loc 1 5535 0
	movq	-24(%rbp), %rax	# loop, tmp84
	movq	160(%rax), %rax	# loop_2(D)->aux, D.24664
	addq	$208, %rax	#, tmp85
	movq	%rax, -8(%rbp)	# tmp85, ivs
	.loc 1 5538 0
	movq	-32(%rbp), %rax	# v, tmp86
	movq	-40(%rbp), %rdx	# insn, tmp87
	movq	%rdx, (%rax)	# tmp87, v_5(D)->insn
	.loc 1 5539 0
	movq	-32(%rbp), %rax	# v, tmp88
	movq	-48(%rbp), %rdx	# dest_reg, tmp89
	movq	%rdx, 16(%rax)	# tmp89, v_5(D)->src_reg
	.loc 1 5540 0
	movq	-32(%rbp), %rax	# v, tmp90
	movq	-48(%rbp), %rdx	# dest_reg, tmp91
	movq	%rdx, 32(%rax)	# tmp91, v_5(D)->dest_reg
	.loc 1 5541 0
	movq	-32(%rbp), %rax	# v, tmp92
	movq	-64(%rbp), %rdx	# mult_val, tmp93
	movq	%rdx, 64(%rax)	# tmp93, v_5(D)->mult_val
	.loc 1 5542 0
	movq	-32(%rbp), %rax	# v, tmp94
	movq	-56(%rbp), %rdx	# inc_val, tmp95
	movq	%rdx, 72(%rax)	# tmp95, v_5(D)->add_val
	.loc 1 5543 0
	movq	-32(%rbp), %rax	# v, tmp96
	movq	$0, 120(%rax)	#, v_5(D)->ext_dependent
	.loc 1 5544 0
	movq	-32(%rbp), %rax	# v, tmp97
	movq	16(%rbp), %rdx	# location, tmp98
	movq	%rdx, 40(%rax)	# tmp98, v_5(D)->location
	.loc 1 5545 0
	movq	-48(%rbp), %rax	# dest_reg, tmp99
	movzbl	2(%rax), %eax	# dest_reg_7(D)->mode, D.24665
	movzbl	%al, %edx	# D.24665, D.24666
	movq	-32(%rbp), %rax	# v, tmp100
	movl	%edx, 48(%rax)	# D.24666, v_5(D)->mode
	.loc 1 5546 0
	cmpl	$0, 24(%rbp)	#, not_every_iteration
	sete	%dl	#, D.24667
	movq	-32(%rbp), %rax	# v, tmp101
	andl	$1, %edx	#, tmp103
	leal	0(,%rdx,8), %ecx	#, tmp104
	movzbl	100(%rax), %edx	# v_5(D)->always_computable, tmp105
	andl	$-9, %edx	#, tmp106
	orl	%ecx, %edx	# tmp104, tmp107
	movb	%dl, 100(%rax)	# tmp107, v_5(D)->always_computable
	.loc 1 5547 0
	cmpl	$0, 24(%rbp)	#, not_every_iteration
	sete	%dl	#, D.24667
	movq	-32(%rbp), %rax	# v, tmp108
	andl	$1, %edx	#, tmp110
	movl	%edx, %ecx	# tmp110, tmp111
	sall	$4, %ecx	#, tmp111
	movzbl	100(%rax), %edx	# v_5(D)->always_executed, tmp112
	andl	$-17, %edx	#, tmp113
	orl	%ecx, %edx	# tmp111, tmp114
	movb	%dl, 100(%rax)	# tmp114, v_5(D)->always_executed
	.loc 1 5548 0
	movl	32(%rbp), %eax	# maybe_multiple, tmp115
	andl	$1, %eax	#, D.24668
	movl	%eax, %edx	# D.24668, D.24668
	movq	-32(%rbp), %rax	# v, tmp116
	andl	$1, %edx	#, tmp118
	movl	%edx, %ecx	# tmp118, tmp119
	sall	$5, %ecx	#, tmp119
	movzbl	100(%rax), %edx	# v_5(D)->maybe_multiple, tmp120
	andl	$-33, %edx	#, tmp121
	orl	%ecx, %edx	# tmp119, tmp122
	movb	%dl, 100(%rax)	# tmp122, v_5(D)->maybe_multiple
	.loc 1 5553 0
	movq	-8(%rbp), %rax	# ivs, tmp123
	movq	(%rax), %rdx	# ivs_4->regs, D.24669
	movq	-48(%rbp), %rax	# dest_reg, tmp124
	movl	8(%rax), %eax	# dest_reg_7(D)->fld[0].rtuint, D.24670
	movl	%eax, %eax	# D.24670, D.24671
	salq	$4, %rax	#, D.24671
	addq	%rdx, %rax	# D.24669, D.24669
	movq	8(%rax), %rax	# _23->iv.class, tmp125
	movq	%rax, -16(%rbp)	# tmp125, bl
	.loc 1 5554 0
	cmpq	$0, -16(%rbp)	#, bl
	jne	.L1151	#,
	.loc 1 5558 0
	movl	$96, %edi	#,
	call	xmalloc	#
	movq	%rax, -16(%rbp)	# tmp126, bl
	.loc 1 5560 0
	movq	-48(%rbp), %rax	# dest_reg, tmp127
	movl	8(%rax), %edx	# dest_reg_7(D)->fld[0].rtuint, D.24670
	movq	-16(%rbp), %rax	# bl, tmp128
	movl	%edx, (%rax)	# D.24670, bl_25->regno
	.loc 1 5561 0
	movq	-16(%rbp), %rax	# bl, tmp129
	movq	$0, 8(%rax)	#, bl_25->biv
	.loc 1 5562 0
	movq	-16(%rbp), %rax	# bl, tmp130
	movq	$0, 24(%rax)	#, bl_25->giv
	.loc 1 5563 0
	movq	-16(%rbp), %rax	# bl, tmp131
	movl	$0, 4(%rax)	#, bl_25->biv_count
	.loc 1 5564 0
	movq	-16(%rbp), %rax	# bl, tmp132
	movl	$0, 16(%rax)	#, bl_25->giv_count
	.loc 1 5567 0
	movq	-16(%rbp), %rax	# bl, tmp133
	movq	-48(%rbp), %rdx	# dest_reg, tmp134
	movq	%rdx, 40(%rax)	# tmp134, bl_25->initial_value
	.loc 1 5568 0
	movq	-16(%rbp), %rax	# bl, tmp135
	movq	$0, 56(%rax)	#, bl_25->final_value
	.loc 1 5570 0
	movq	-16(%rbp), %rax	# bl, tmp136
	movq	$0, 72(%rax)	#, bl_25->init_insn
	.loc 1 5571 0
	movq	-16(%rbp), %rax	# bl, tmp137
	movq	$0, 80(%rax)	#, bl_25->init_set
	.loc 1 5572 0
	movq	-16(%rbp), %rax	# bl, tmp138
	movq	$0, 48(%rax)	#, bl_25->initial_test
	.loc 1 5573 0
	movq	-16(%rbp), %rax	# bl, tmp139
	movzbl	88(%rax), %edx	# bl_25->incremented, tmp142
	andl	$-2, %edx	#, tmp143
	movb	%dl, 88(%rax)	# tmp143, bl_25->incremented
	.loc 1 5574 0
	movq	-16(%rbp), %rax	# bl, tmp144
	movzbl	88(%rax), %edx	# bl_25->eliminable, tmp147
	andl	$-3, %edx	#, tmp148
	movb	%dl, 88(%rax)	# tmp148, bl_25->eliminable
	.loc 1 5575 0
	movq	-16(%rbp), %rax	# bl, tmp149
	movzbl	88(%rax), %edx	# bl_25->nonneg, tmp152
	andl	$-5, %edx	#, tmp153
	movb	%dl, 88(%rax)	# tmp153, bl_25->nonneg
	.loc 1 5576 0
	movq	-16(%rbp), %rax	# bl, tmp154
	movzbl	88(%rax), %edx	# bl_25->reversed, tmp157
	andl	$-9, %edx	#, tmp158
	movb	%dl, 88(%rax)	# tmp158, bl_25->reversed
	.loc 1 5577 0
	movq	-16(%rbp), %rax	# bl, tmp159
	movl	$0, 32(%rax)	#, bl_25->total_benefit
	.loc 1 5580 0
	movq	-8(%rbp), %rax	# ivs, tmp160
	movq	16(%rax), %rdx	# ivs_4->list, D.24672
	movq	-16(%rbp), %rax	# bl, tmp161
	movq	%rdx, 64(%rax)	# D.24672, bl_25->next
	.loc 1 5581 0
	movq	-8(%rbp), %rax	# ivs, tmp162
	movq	-16(%rbp), %rdx	# bl, tmp163
	movq	%rdx, 16(%rax)	# tmp163, ivs_4->list
	.loc 1 5584 0
	movq	-8(%rbp), %rax	# ivs, tmp164
	movq	(%rax), %rdx	# ivs_4->regs, D.24669
	movq	-48(%rbp), %rax	# dest_reg, tmp165
	movl	8(%rax), %eax	# dest_reg_7(D)->fld[0].rtuint, D.24670
	movl	%eax, %eax	# D.24670, D.24671
	salq	$4, %rax	#, D.24671
	addq	%rax, %rdx	# D.24671, D.24669
	movq	-16(%rbp), %rax	# bl, tmp166
	movq	%rax, 8(%rdx)	# tmp166, _32->iv.class
.L1151:
	.loc 1 5588 0
	movq	-16(%rbp), %rax	# bl, tmp167
	movq	8(%rax), %rdx	# bl_1->biv, D.24673
	movq	-32(%rbp), %rax	# v, tmp168
	movq	%rdx, 128(%rax)	# D.24673, v_5(D)->next_iv
	.loc 1 5589 0
	movq	-16(%rbp), %rax	# bl, tmp169
	movq	-32(%rbp), %rdx	# v, tmp170
	movq	%rdx, 8(%rax)	# tmp170, bl_1->biv
	.loc 1 5590 0
	movq	-16(%rbp), %rax	# bl, tmp171
	movl	4(%rax), %eax	# bl_1->biv_count, D.24674
	leal	1(%rax), %edx	#, D.24674
	movq	-16(%rbp), %rax	# bl, tmp172
	movl	%edx, 4(%rax)	# D.24674, bl_1->biv_count
	.loc 1 5591 0
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, D.24675
	cmpq	-64(%rbp), %rax	# mult_val, D.24675
	jne	.L1152	#,
	.loc 1 5592 0
	movq	-16(%rbp), %rax	# bl, tmp173
	movzbl	88(%rax), %edx	# bl_1->incremented, tmp176
	orl	$1, %edx	#, tmp177
	movb	%dl, 88(%rax)	# tmp177, bl_1->incremented
.L1152:
	.loc 1 5594 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.494
	testq	%rax, %rax	# loop_dump_stream.494
	je	.L1150	#,
	.loc 1 5595 0
	movq	loop_dump_stream(%rip), %rcx	# loop_dump_stream, loop_dump_stream.495
	movq	-32(%rbp), %rax	# v, tmp178
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# loop_dump_stream.495,
	movq	%rax, %rdi	# tmp178,
	call	loop_biv_dump	#
.L1150:
	.loc 1 5596 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE56:
	.size	record_biv, .-record_biv
	.type	record_giv, @function
record_giv:
.LFB57:
	.loc 1 5624 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -56(%rbp)	# loop, loop
	movq	%rsi, -64(%rbp)	# v, v
	movq	%rdx, -72(%rbp)	# insn, insn
	movq	%rcx, -80(%rbp)	# src_reg, src_reg
	movq	%r8, -88(%rbp)	# dest_reg, dest_reg
	movq	%r9, -96(%rbp)	# mult_val, mult_val
	.loc 1 5625 0
	movq	-56(%rbp), %rax	# loop, tmp222
	movq	160(%rax), %rax	# loop_8(D)->aux, D.24676
	addq	$208, %rax	#, tmp223
	movq	%rax, -32(%rbp)	# tmp223, ivs
	.loc 1 5628 0
	movq	-72(%rbp), %rax	# insn, tmp224
	movzwl	(%rax), %eax	# insn_11(D)->code, D.24677
	movzwl	%ax, %eax	# D.24677, D.24678
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24679
	cmpb	$105, %al	#, D.24679
	jne	.L1155	#,
	.loc 1 5628 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# insn, tmp226
	movq	32(%rax), %rax	# insn_11(D)->fld[3].rtx, D.24680
	movzwl	(%rax), %eax	# _15->code, D.24677
	cmpw	$47, %ax	#, D.24677
	jne	.L1156	#,
	.loc 1 5628 0 discriminator 3
	movq	-72(%rbp), %rax	# insn, tmp227
	movq	32(%rax), %rax	# insn_11(D)->fld[3].rtx, iftmp.497
	jmp	.L1158	#
.L1156:
	.loc 1 5628 0 discriminator 4
	movq	-72(%rbp), %rax	# insn, tmp228
	movq	32(%rax), %rdx	# insn_11(D)->fld[3].rtx, D.24680
	movq	-72(%rbp), %rax	# insn, tmp229
	movq	%rdx, %rsi	# D.24680,
	movq	%rax, %rdi	# tmp229,
	call	single_set_2	#
	jmp	.L1158	#
.L1155:
	.loc 1 5628 0 discriminator 2
	movl	$0, %eax	#, iftmp.496
.L1158:
	.loc 1 5628 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.496, set
	.loc 1 5633 0 is_stmt 1 discriminator 5
	movq	16(%rbp), %rdi	# add_val,
	call	simplify_rtx	#
	movq	%rax, -16(%rbp)	# tmp230, temp
	.loc 1 5634 0 discriminator 5
	cmpq	$0, -16(%rbp)	#, temp
	je	.L1159	#,
	.loc 1 5635 0
	movq	16(%rbp), %rax	# add_val, tmp231
	movzwl	(%rax), %eax	# add_val_23(D)->code, D.24677
	cmpw	$78, %ax	#, D.24677
	jne	.L1160	#,
	.loc 1 5636 0 discriminator 1
	movq	-16(%rbp), %rax	# temp, tmp232
	movzwl	(%rax), %eax	# temp_24->code, D.24677
	.loc 1 5635 0 discriminator 1
	cmpw	$87, %ax	#, D.24677
	je	.L1159	#,
.L1160:
	.loc 1 5637 0
	movq	-16(%rbp), %rax	# temp, tmp233
	movq	%rax, 16(%rbp)	# tmp233, add_val
.L1159:
	.loc 1 5639 0
	movq	-64(%rbp), %rax	# v, tmp234
	movq	-72(%rbp), %rdx	# insn, tmp235
	movq	%rdx, (%rax)	# tmp235, v_28(D)->insn
	.loc 1 5640 0
	movq	-64(%rbp), %rax	# v, tmp236
	movq	-80(%rbp), %rdx	# src_reg, tmp237
	movq	%rdx, 16(%rax)	# tmp237, v_28(D)->src_reg
	.loc 1 5641 0
	movq	-64(%rbp), %rax	# v, tmp238
	movl	40(%rbp), %edx	# type, tmp239
	movl	%edx, 24(%rax)	# tmp239, v_28(D)->giv_type
	.loc 1 5642 0
	movq	-64(%rbp), %rax	# v, tmp240
	movq	-88(%rbp), %rdx	# dest_reg, tmp241
	movq	%rdx, 32(%rax)	# tmp241, v_28(D)->dest_reg
	.loc 1 5643 0
	movq	-64(%rbp), %rax	# v, tmp242
	movq	-96(%rbp), %rdx	# mult_val, tmp243
	movq	%rdx, 64(%rax)	# tmp243, v_28(D)->mult_val
	.loc 1 5644 0
	movq	-64(%rbp), %rax	# v, tmp244
	movq	16(%rbp), %rdx	# add_val, tmp245
	movq	%rdx, 72(%rax)	# tmp245, v_28(D)->add_val
	.loc 1 5645 0
	movq	-64(%rbp), %rax	# v, tmp246
	movq	24(%rbp), %rdx	# ext_val, tmp247
	movq	%rdx, 120(%rax)	# tmp247, v_28(D)->ext_dependent
	.loc 1 5646 0
	movq	-64(%rbp), %rax	# v, tmp248
	movl	32(%rbp), %edx	# benefit, tmp249
	movl	%edx, 80(%rax)	# tmp249, v_28(D)->benefit
	.loc 1 5647 0
	movq	-64(%rbp), %rax	# v, tmp250
	movq	64(%rbp), %rdx	# location, tmp251
	movq	%rdx, 40(%rax)	# tmp251, v_28(D)->location
	.loc 1 5648 0
	movq	-64(%rbp), %rax	# v, tmp252
	movzbl	100(%rax), %edx	# v_28(D)->cant_derive, tmp255
	andl	$-65, %edx	#, tmp256
	movb	%dl, 100(%rax)	# tmp256, v_28(D)->cant_derive
	.loc 1 5649 0
	movq	-64(%rbp), %rax	# v, tmp257
	movl	$0, 96(%rax)	#, v_28(D)->combined_with
	.loc 1 5650 0
	movl	56(%rbp), %eax	# maybe_multiple, tmp258
	andl	$1, %eax	#, D.24682
	movl	%eax, %edx	# D.24682, D.24682
	movq	-64(%rbp), %rax	# v, tmp259
	andl	$1, %edx	#, tmp261
	movl	%edx, %ecx	# tmp261, tmp262
	sall	$5, %ecx	#, tmp262
	movzbl	100(%rax), %edx	# v_28(D)->maybe_multiple, tmp263
	andl	$-33, %edx	#, tmp264
	orl	%ecx, %edx	# tmp262, tmp265
	movb	%dl, 100(%rax)	# tmp265, v_28(D)->maybe_multiple
	.loc 1 5651 0
	movq	-64(%rbp), %rax	# v, tmp266
	movzbl	100(%rax), %edx	# v_28(D)->maybe_dead, tmp269
	andl	$127, %edx	#, tmp270
	movb	%dl, 100(%rax)	# tmp270, v_28(D)->maybe_dead
	.loc 1 5652 0
	movq	-64(%rbp), %rax	# v, tmp271
	movq	$0, 112(%rax)	#, v_28(D)->derive_adjustment
	.loc 1 5653 0
	movq	-64(%rbp), %rax	# v, tmp272
	movq	$0, 136(%rax)	#, v_28(D)->same
	.loc 1 5654 0
	movq	-64(%rbp), %rax	# v, tmp273
	movzbl	100(%rax), %edx	# v_28(D)->ignore, tmp276
	andl	$-5, %edx	#, tmp277
	movb	%dl, 100(%rax)	# tmp277, v_28(D)->ignore
	.loc 1 5655 0
	movq	-64(%rbp), %rax	# v, tmp278
	movq	$0, 8(%rax)	#, v_28(D)->new_reg
	.loc 1 5656 0
	movq	-64(%rbp), %rax	# v, tmp279
	movq	$0, 88(%rax)	#, v_28(D)->final_value
	.loc 1 5657 0
	movq	-64(%rbp), %rax	# v, tmp280
	movq	$0, 152(%rax)	#, v_28(D)->same_insn
	.loc 1 5658 0
	movq	-64(%rbp), %rax	# v, tmp281
	movzbl	101(%rax), %edx	#, tmp284
	andl	$-2, %edx	#, tmp285
	movb	%dl, 101(%rax)	# tmp285,
	.loc 1 5659 0
	movq	-64(%rbp), %rax	# v, tmp286
	movzbl	101(%rax), %edx	#, tmp289
	andl	$-3, %edx	#, tmp290
	movb	%dl, 101(%rax)	# tmp290,
	.loc 1 5660 0
	movq	-64(%rbp), %rax	# v, tmp291
	movzbl	101(%rax), %edx	#, tmp294
	andl	$-5, %edx	#, tmp295
	movb	%dl, 101(%rax)	# tmp295,
	.loc 1 5670 0
	cmpl	$0, 40(%rbp)	#, type
	jne	.L1161	#,
	.loc 1 5671 0
	movq	-64(%rbp), %rax	# v, tmp296
	movzbl	100(%rax), %edx	# v_28(D)->always_computable, tmp299
	orl	$8, %edx	#, tmp300
	movb	%dl, 100(%rax)	# tmp300, v_28(D)->always_computable
	jmp	.L1162	#
.L1161:
	.loc 1 5673 0
	cmpl	$0, 48(%rbp)	#, not_every_iteration
	sete	%dl	#, D.24683
	movq	-64(%rbp), %rax	# v, tmp301
	andl	$1, %edx	#, tmp303
	leal	0(,%rdx,8), %ecx	#, tmp304
	movzbl	100(%rax), %edx	# v_28(D)->always_computable, tmp305
	andl	$-9, %edx	#, tmp306
	orl	%ecx, %edx	# tmp304, tmp307
	movb	%dl, 100(%rax)	# tmp307, v_28(D)->always_computable
.L1162:
	.loc 1 5675 0
	cmpl	$0, 48(%rbp)	#, not_every_iteration
	sete	%dl	#, D.24683
	movq	-64(%rbp), %rax	# v, tmp308
	andl	$1, %edx	#, tmp310
	movl	%edx, %ecx	# tmp310, tmp311
	sall	$4, %ecx	#, tmp311
	movzbl	100(%rax), %edx	# v_28(D)->always_executed, tmp312
	andl	$-17, %edx	#, tmp313
	orl	%ecx, %edx	# tmp311, tmp314
	movb	%dl, 100(%rax)	# tmp314, v_28(D)->always_executed
	.loc 1 5677 0
	cmpl	$0, 40(%rbp)	#, type
	jne	.L1163	#,
	.loc 1 5679 0
	movq	64(%rbp), %rax	# location, tmp315
	movq	(%rax), %rax	# *location_35(D), D.24680
	movzbl	2(%rax), %eax	# _42->mode, D.24681
	movzbl	%al, %edx	# D.24681, D.24684
	movq	-64(%rbp), %rax	# v, tmp316
	movl	%edx, 48(%rax)	# D.24684, v_28(D)->mode
	.loc 1 5680 0
	movq	-64(%rbp), %rax	# v, tmp317
	movl	$1, 104(%rax)	#, v_28(D)->lifetime
	jmp	.L1164	#
.L1163:
	.loc 1 5684 0
	movq	-24(%rbp), %rax	# set, tmp318
	movq	8(%rax), %rax	# set_22->fld[0].rtx, D.24680
	movzbl	2(%rax), %eax	# _45->mode, D.24681
	movzbl	%al, %edx	# D.24681, D.24684
	movq	-64(%rbp), %rax	# v, tmp319
	movl	%edx, 48(%rax)	# D.24684, v_28(D)->mode
	.loc 1 5686 0
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.498
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.499
	movq	-88(%rbp), %rdx	# dest_reg, tmp320
	movl	8(%rdx), %edx	# dest_reg_31(D)->fld[0].rtuint, D.24685
	movl	%edx, %edx	# D.24685, tmp321
	addq	$4, %rdx	#, tmp322
	movq	(%rax,%rdx,8), %rax	# reg_n_info.499_49->data.reg, D.24686
	movl	4(%rax), %eax	# _51->last_uid, D.24678
	cltq
	salq	$2, %rax	#, D.24687
	addq	%rcx, %rax	# uid_luid.498, D.24688
	movl	(%rax), %ecx	# *_55, D.24678
	movq	uid_luid(%rip), %rsi	# uid_luid, uid_luid.500
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.501
	movq	-88(%rbp), %rdx	# dest_reg, tmp323
	movl	8(%rdx), %edx	# dest_reg_31(D)->fld[0].rtuint, D.24685
	movl	%edx, %edx	# D.24685, tmp324
	addq	$4, %rdx	#, tmp325
	movq	(%rax,%rdx,8), %rax	# reg_n_info.501_58->data.reg, D.24686
	movl	(%rax), %eax	# _60->first_uid, D.24678
	cltq
	salq	$2, %rax	#, D.24687
	addq	%rsi, %rax	# uid_luid.500, D.24688
	movl	(%rax), %eax	# *_64, D.24678
	subl	%eax, %ecx	# D.24678, D.24678
	movl	%ecx, %edx	# D.24678, D.24678
	movq	-64(%rbp), %rax	# v, tmp326
	movl	%edx, 104(%rax)	# D.24678, v_28(D)->lifetime
	.loc 1 5691 0
	movq	-64(%rbp), %rax	# v, tmp327
	movl	104(%rax), %eax	# v_28(D)->lifetime, D.24678
	testl	%eax, %eax	# D.24678
	jne	.L1165	#,
	.loc 1 5692 0
	movq	-64(%rbp), %rax	# v, tmp328
	movzbl	100(%rax), %edx	# v_28(D)->ignore, tmp331
	orl	$4, %edx	#, tmp332
	movb	%dl, 100(%rax)	# tmp332, v_28(D)->ignore
.L1165:
	.loc 1 5694 0
	movq	-32(%rbp), %rax	# ivs, tmp333
	movq	(%rax), %rdx	# ivs_10->regs, D.24689
	movq	-88(%rbp), %rax	# dest_reg, tmp334
	movl	8(%rax), %eax	# dest_reg_31(D)->fld[0].rtuint, D.24685
	movl	%eax, %eax	# D.24685, D.24687
	salq	$4, %rax	#, D.24687
	addq	%rdx, %rax	# D.24689, D.24689
	movl	$3, (%rax)	#, _72->type
	.loc 1 5695 0
	movq	-32(%rbp), %rax	# ivs, tmp335
	movq	(%rax), %rdx	# ivs_10->regs, D.24689
	movq	-88(%rbp), %rax	# dest_reg, tmp336
	movl	8(%rax), %eax	# dest_reg_31(D)->fld[0].rtuint, D.24685
	movl	%eax, %eax	# D.24685, D.24687
	salq	$4, %rax	#, D.24687
	addq	%rax, %rdx	# D.24687, D.24689
	movq	-64(%rbp), %rax	# v, tmp337
	movq	%rax, 8(%rdx)	# tmp337, _77->iv.info
.L1164:
	.loc 1 5700 0
	movq	-32(%rbp), %rax	# ivs, tmp338
	movq	(%rax), %rdx	# ivs_10->regs, D.24689
	movq	-80(%rbp), %rax	# src_reg, tmp339
	movl	8(%rax), %eax	# src_reg_29(D)->fld[0].rtuint, D.24685
	movl	%eax, %eax	# D.24685, D.24687
	salq	$4, %rax	#, D.24687
	addq	%rdx, %rax	# D.24689, D.24689
	movq	8(%rax), %rax	# _82->iv.class, tmp340
	movq	%rax, -8(%rbp)	# tmp340, bl
	.loc 1 5701 0
	cmpq	$0, -8(%rbp)	#, bl
	je	.L1166	#,
	.loc 1 5703 0
	movq	-8(%rbp), %rax	# bl, tmp341
	movq	24(%rax), %rdx	# bl_83->giv, D.24690
	movq	-64(%rbp), %rax	# v, tmp342
	movq	%rdx, 128(%rax)	# D.24690, v_28(D)->next_iv
	.loc 1 5704 0
	movq	-8(%rbp), %rax	# bl, tmp343
	movq	-64(%rbp), %rdx	# v, tmp344
	movq	%rdx, 24(%rax)	# tmp344, bl_83->giv
	.loc 1 5707 0
	cmpl	$1, 40(%rbp)	#, type
	jne	.L1167	#,
	.loc 1 5708 0
	movq	-8(%rbp), %rax	# bl, tmp345
	movl	16(%rax), %eax	# bl_83->giv_count, D.24678
	leal	1(%rax), %edx	#, D.24678
	movq	-8(%rbp), %rax	# bl, tmp346
	movl	%edx, 16(%rax)	# D.24678, bl_83->giv_count
.L1167:
	.loc 1 5709 0
	movq	-8(%rbp), %rax	# bl, tmp347
	movl	32(%rax), %edx	# bl_83->total_benefit, D.24678
	movl	32(%rbp), %eax	# benefit, tmp348
	addl	%eax, %edx	# tmp348, D.24678
	movq	-8(%rbp), %rax	# bl, tmp349
	movl	%edx, 32(%rax)	# D.24678, bl_83->total_benefit
	.loc 1 5715 0
	cmpl	$0, 40(%rbp)	#, type
	jne	.L1169	#,
	jmp	.L1198	#
.L1166:
	.loc 1 5713 0
	movl	$__FUNCTION__.13659, %edx	#,
	movl	$5713, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1198:
	.loc 1 5716 0
	movq	-64(%rbp), %rax	# v, tmp350
	movzbl	100(%rax), %edx	# v_28(D)->replaceable, tmp353
	orl	$1, %edx	#, tmp354
	movb	%dl, 100(%rax)	# tmp354, v_28(D)->replaceable
	jmp	.L1170	#
.L1169:
	.loc 1 5729 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.502
	movq	-88(%rbp), %rdx	# dest_reg, tmp355
	movl	8(%rdx), %edx	# dest_reg_31(D)->fld[0].rtuint, D.24685
	movl	%edx, %edx	# D.24685, tmp356
	addq	$4, %rdx	#, tmp357
	movq	(%rax,%rdx,8), %rax	# reg_n_info.502_89->data.reg, D.24686
	movl	(%rax), %edx	# _91->first_uid, D.24678
	movq	-72(%rbp), %rax	# insn, tmp358
	movl	8(%rax), %eax	# insn_11(D)->fld[0].rtint, D.24678
	cmpl	%eax, %edx	# D.24678, D.24678
	jne	.L1171	#,
	.loc 1 5731 0
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.503
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.504
	movq	-88(%rbp), %rdx	# dest_reg, tmp359
	movl	8(%rdx), %edx	# dest_reg_31(D)->fld[0].rtuint, D.24685
	movl	%edx, %edx	# D.24685, tmp360
	addq	$4, %rdx	#, tmp361
	movq	(%rax,%rdx,8), %rax	# reg_n_info.504_95->data.reg, D.24686
	movl	4(%rax), %eax	# _97->last_uid, D.24678
	cltq
	salq	$2, %rax	#, D.24687
	addq	%rcx, %rax	# uid_luid.503, D.24688
	movl	(%rax), %edx	# *_101, D.24678
	.loc 1 5732 0
	movq	-56(%rbp), %rax	# loop, tmp362
	movq	200(%rax), %rax	# loop_8(D)->end, D.24680
	movl	8(%rax), %ecx	# _103->fld[0].rtint, D.24678
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.506
	cmpl	%eax, %ecx	# max_uid_for_loop.506, D.24678
	jge	.L1172	#,
	.loc 1 5732 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.507
	movq	-56(%rbp), %rax	# loop, tmp363
	movq	200(%rax), %rax	# loop_8(D)->end, D.24680
	movl	8(%rax), %eax	# _107->fld[0].rtint, D.24678
	cltq
	salq	$2, %rax	#, D.24687
	addq	%rcx, %rax	# uid_luid.507, D.24688
	movl	(%rax), %eax	# *_111, iftmp.505
	.loc 1 5731 0 is_stmt 1 discriminator 1
	cmpl	%eax, %edx	# iftmp.505, D.24678
	jge	.L1171	#,
	jmp	.L1199	#
.L1172:
	.loc 1 5732 0 discriminator 2
	movl	$__FUNCTION__.13659, %edx	#,
	movl	$5732, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1199:
	.loc 1 5733 0
	cmpl	$0, 48(%rbp)	#, not_every_iteration
	je	.L1174	#,
	.loc 1 5734 0
	movq	-72(%rbp), %rdx	# insn, tmp364
	movq	-88(%rbp), %rax	# dest_reg, tmp365
	movq	%rdx, %rsi	# tmp364,
	movq	%rax, %rdi	# tmp365,
	call	last_use_this_basic_block	#
	testl	%eax, %eax	# D.24678
	je	.L1171	#,
.L1174:
	.loc 1 5750 0
	movq	-64(%rbp), %rax	# v, tmp366
	movzbl	100(%rax), %edx	# v_28(D)->replaceable, tmp369
	orl	$1, %edx	#, tmp370
	movb	%dl, 100(%rax)	# tmp370, v_28(D)->replaceable
	.loc 1 5751 0
	movq	-8(%rbp), %rax	# bl, tmp371
	movq	8(%rax), %rax	# bl_83->biv, tmp372
	movq	%rax, -48(%rbp)	# tmp372, b
	jmp	.L1175	#
.L1183:
	.loc 1 5753 0
	movq	-48(%rbp), %rax	# b, tmp373
	movq	(%rax), %rax	# b_2->insn, D.24680
	movl	8(%rax), %edx	# _115->fld[0].rtint, D.24678
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.508
	cmpl	%eax, %edx	# max_uid_for_loop.508, D.24678
	jge	.L1176	#,
	.loc 1 5754 0
	movq	-48(%rbp), %rax	# b, tmp374
	movq	(%rax), %rax	# b_2->insn, D.24680
	movl	8(%rax), %edx	# _118->fld[0].rtint, D.24678
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.510
	cmpl	%eax, %edx	# max_uid_for_loop.510, D.24678
	jge	.L1177	#,
	.loc 1 5754 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.511
	movq	-48(%rbp), %rax	# b, tmp375
	movq	(%rax), %rax	# b_2->insn, D.24680
	movl	8(%rax), %eax	# _122->fld[0].rtint, D.24678
	cltq
	salq	$2, %rax	#, D.24687
	addq	%rdx, %rax	# uid_luid.511, D.24688
	movl	(%rax), %ecx	# *_126, iftmp.509
	.loc 1 5755 0 is_stmt 1 discriminator 1
	movq	uid_luid(%rip), %rsi	# uid_luid, uid_luid.512
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.513
	movq	-88(%rbp), %rdx	# dest_reg, tmp376
	movl	8(%rdx), %edx	# dest_reg_31(D)->fld[0].rtuint, D.24685
	movl	%edx, %edx	# D.24685, tmp377
	addq	$4, %rdx	#, tmp378
	movq	(%rax,%rdx,8), %rax	# reg_n_info.513_129->data.reg, D.24686
	movl	(%rax), %eax	# _131->first_uid, D.24678
	cltq
	salq	$2, %rax	#, D.24687
	addq	%rsi, %rax	# uid_luid.512, D.24688
	movl	(%rax), %eax	# *_135, D.24678
	.loc 1 5754 0 discriminator 1
	cmpl	%eax, %ecx	# D.24678, iftmp.509
	jl	.L1179	#,
	jmp	.L1200	#
.L1177:
	.loc 1 5754 0 is_stmt 0 discriminator 2
	movl	$__FUNCTION__.13659, %edx	#,
	movl	$5754, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1200:
	.loc 1 5756 0 is_stmt 1
	movq	-48(%rbp), %rax	# b, tmp379
	movq	(%rax), %rax	# b_2->insn, D.24680
	movl	8(%rax), %edx	# _137->fld[0].rtint, D.24678
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.515
	cmpl	%eax, %edx	# max_uid_for_loop.515, D.24678
	jge	.L1180	#,
	.loc 1 5756 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.516
	movq	-48(%rbp), %rax	# b, tmp380
	movq	(%rax), %rax	# b_2->insn, D.24680
	movl	8(%rax), %eax	# _141->fld[0].rtint, D.24678
	cltq
	salq	$2, %rax	#, D.24687
	addq	%rdx, %rax	# uid_luid.516, D.24688
	movl	(%rax), %ecx	# *_145, iftmp.514
	.loc 1 5757 0 is_stmt 1 discriminator 1
	movq	uid_luid(%rip), %rsi	# uid_luid, uid_luid.517
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.518
	movq	-88(%rbp), %rdx	# dest_reg, tmp381
	movl	8(%rdx), %edx	# dest_reg_31(D)->fld[0].rtuint, D.24685
	movl	%edx, %edx	# D.24685, tmp382
	addq	$4, %rdx	#, tmp383
	movq	(%rax,%rdx,8), %rax	# reg_n_info.518_148->data.reg, D.24686
	movl	4(%rax), %eax	# _150->last_uid, D.24678
	cltq
	salq	$2, %rax	#, D.24687
	addq	%rsi, %rax	# uid_luid.517, D.24688
	movl	(%rax), %eax	# *_154, D.24678
	.loc 1 5756 0 discriminator 1
	cmpl	%eax, %ecx	# D.24678, iftmp.514
	jg	.L1179	#,
	jmp	.L1176	#
.L1180:
	.loc 1 5756 0 is_stmt 0 discriminator 2
	movl	$__FUNCTION__.13659, %edx	#,
	movl	$5756, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1176:
	.loc 1 5759 0 is_stmt 1
	movq	-64(%rbp), %rax	# v, tmp384
	movzbl	100(%rax), %edx	# v_28(D)->replaceable, tmp387
	andl	$-2, %edx	#, tmp388
	movb	%dl, 100(%rax)	# tmp388, v_28(D)->replaceable
	.loc 1 5760 0
	movq	-64(%rbp), %rax	# v, tmp389
	movzbl	100(%rax), %edx	# v_28(D)->not_replaceable, tmp392
	orl	$2, %edx	#, tmp393
	movb	%dl, 100(%rax)	# tmp393, v_28(D)->not_replaceable
	.loc 1 5761 0
	jmp	.L1182	#
.L1179:
	.loc 1 5751 0
	movq	-48(%rbp), %rax	# b, tmp394
	movq	128(%rax), %rax	# b_2->next_iv, tmp395
	movq	%rax, -48(%rbp)	# tmp395, b
.L1175:
	.loc 1 5751 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, b
	jne	.L1183	#,
.L1182:
	.loc 1 5767 0 is_stmt 1
	movq	-64(%rbp), %rax	# v, tmp396
	movzbl	100(%rax), %eax	# *v_28(D), D.24681
	andl	$1, %eax	#, D.24681
	testb	%al, %al	# D.24681
	je	.L1184	#,
	.loc 1 5768 0
	movq	-8(%rbp), %rax	# bl, tmp397
	movq	8(%rax), %rax	# bl_83->biv, tmp398
	movq	%rax, -48(%rbp)	# tmp398, b
	jmp	.L1185	#
.L1187:
	.loc 1 5769 0
	movq	-48(%rbp), %rax	# b, tmp399
	movq	(%rax), %rdx	# b_3->insn, D.24680
	movq	-56(%rbp), %rax	# loop, tmp400
	movq	%rdx, %rsi	# D.24680,
	movq	%rax, %rdi	# tmp400,
	call	back_branch_in_range_p	#
	testl	%eax, %eax	# D.24678
	je	.L1186	#,
	.loc 1 5771 0
	movq	-64(%rbp), %rax	# v, tmp401
	movzbl	100(%rax), %edx	# v_28(D)->replaceable, tmp404
	andl	$-2, %edx	#, tmp405
	movb	%dl, 100(%rax)	# tmp405, v_28(D)->replaceable
	.loc 1 5772 0
	movq	-64(%rbp), %rax	# v, tmp406
	movzbl	100(%rax), %edx	# v_28(D)->not_replaceable, tmp409
	orl	$2, %edx	#, tmp410
	movb	%dl, 100(%rax)	# tmp410, v_28(D)->not_replaceable
	.loc 1 5773 0
	jmp	.L1184	#
.L1186:
	.loc 1 5768 0
	movq	-48(%rbp), %rax	# b, tmp411
	movq	128(%rax), %rax	# b_3->next_iv, tmp412
	movq	%rax, -48(%rbp)	# tmp412, b
.L1185:
	.loc 1 5768 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, b
	jne	.L1187	#,
.L1184:
	.loc 1 5767 0 is_stmt 1 discriminator 1
	jmp	.L1170	#
.L1171:
	.loc 1 5780 0
	movq	-64(%rbp), %rax	# v, tmp413
	movzbl	100(%rax), %edx	# v_28(D)->replaceable, tmp416
	andl	$-2, %edx	#, tmp417
	movb	%dl, 100(%rax)	# tmp417, v_28(D)->replaceable
	.loc 1 5781 0
	movq	-64(%rbp), %rax	# v, tmp418
	movzbl	100(%rax), %edx	# v_28(D)->not_replaceable, tmp421
	andl	$-3, %edx	#, tmp422
	movb	%dl, 100(%rax)	# tmp422, v_28(D)->not_replaceable
.L1170:
.LBB73:
	.loc 1 5788 0
	movq	16(%rbp), %rax	# add_val, tmp423
	movq	%rax, -40(%rbp)	# tmp423, tem
	.loc 1 5790 0
	movq	-64(%rbp), %rax	# v, tmp424
	movzbl	101(%rax), %edx	#, tmp427
	orl	$8, %edx	#, tmp428
	movb	%dl, 101(%rax)	# tmp428,
	.loc 1 5791 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24680
	cmpq	-40(%rbp), %rax	# tem, D.24680
	je	.L1188	#,
	.loc 1 5793 0
	movq	16(%rbp), %rax	# add_val, tmp429
	movzwl	(%rax), %eax	# add_val_1->code, D.24677
	cmpw	$67, %ax	#, D.24677
	je	.L1189	#,
	.loc 1 5793 0 is_stmt 0 discriminator 1
	movq	16(%rbp), %rax	# add_val, tmp430
	movzwl	(%rax), %eax	# add_val_1->code, D.24677
	cmpw	$68, %ax	#, D.24677
	je	.L1189	#,
	movq	16(%rbp), %rax	# add_val, tmp431
	movzwl	(%rax), %eax	# add_val_1->code, D.24677
	cmpw	$54, %ax	#, D.24677
	je	.L1189	#,
	movq	16(%rbp), %rax	# add_val, tmp432
	movzwl	(%rax), %eax	# add_val_1->code, D.24677
	cmpw	$55, %ax	#, D.24677
	je	.L1189	#,
	movq	16(%rbp), %rax	# add_val, tmp433
	movzwl	(%rax), %eax	# add_val_1->code, D.24677
	cmpw	$58, %ax	#, D.24677
	je	.L1189	#,
	movq	16(%rbp), %rax	# add_val, tmp434
	movzwl	(%rax), %eax	# add_val_1->code, D.24677
	cmpw	$134, %ax	#, D.24677
	je	.L1189	#,
	movq	16(%rbp), %rax	# add_val, tmp435
	movzwl	(%rax), %eax	# add_val_1->code, D.24677
	cmpw	$56, %ax	#, D.24677
	je	.L1189	#,
	movq	16(%rbp), %rax	# add_val, tmp436
	movzwl	(%rax), %eax	# add_val_1->code, D.24677
	cmpw	$140, %ax	#, D.24677
	jne	.L1188	#,
.L1189:
	.loc 1 5794 0 is_stmt 1
	movq	-64(%rbp), %rax	# v, tmp437
	movzbl	101(%rax), %edx	#, tmp440
	andl	$-9, %edx	#, tmp441
	movb	%dl, 101(%rax)	# tmp441,
.L1188:
	.loc 1 5795 0
	movq	-40(%rbp), %rax	# tem, tmp442
	movzwl	(%rax), %eax	# tem_163->code, D.24677
	cmpw	$75, %ax	#, D.24677
	jne	.L1190	#,
.L1195:
	.loc 1 5799 0
	movq	-40(%rbp), %rax	# tem, tmp443
	movq	8(%rax), %rax	# tem_4->fld[0].rtx, D.24680
	movzwl	(%rax), %eax	# _174->code, D.24677
	cmpw	$75, %ax	#, D.24677
	jne	.L1191	#,
	.loc 1 5800 0
	movq	-40(%rbp), %rax	# tem, tmp444
	movq	8(%rax), %rax	# tem_4->fld[0].rtx, tmp445
	movq	%rax, -40(%rbp)	# tmp445, tem
	jmp	.L1192	#
.L1191:
	.loc 1 5801 0
	movq	-40(%rbp), %rax	# tem, tmp446
	movq	16(%rax), %rax	# tem_4->fld[1].rtx, D.24680
	movzwl	(%rax), %eax	# _177->code, D.24677
	cmpw	$75, %ax	#, D.24677
	jne	.L1193	#,
	.loc 1 5802 0
	movq	-40(%rbp), %rax	# tem, tmp447
	movq	16(%rax), %rax	# tem_4->fld[1].rtx, tmp448
	movq	%rax, -40(%rbp)	# tmp448, tem
	jmp	.L1192	#
.L1193:
	.loc 1 5804 0
	nop
	.loc 1 5806 0
	movq	-40(%rbp), %rax	# tem, tmp449
	movq	16(%rax), %rax	# tem_4->fld[1].rtx, D.24680
	movzwl	(%rax), %eax	# _180->code, D.24677
	cmpw	$67, %ax	#, D.24677
	je	.L1196	#,
	jmp	.L1201	#
.L1192:
	.loc 1 5805 0
	jmp	.L1195	#
.L1201:
	.loc 1 5806 0 discriminator 1
	movq	-40(%rbp), %rax	# tem, tmp450
	movq	16(%rax), %rax	# tem_4->fld[1].rtx, D.24680
	movzwl	(%rax), %eax	# _182->code, D.24677
	cmpw	$68, %ax	#, D.24677
	je	.L1196	#,
	movq	-40(%rbp), %rax	# tem, tmp451
	movq	16(%rax), %rax	# tem_4->fld[1].rtx, D.24680
	movzwl	(%rax), %eax	# _184->code, D.24677
	cmpw	$54, %ax	#, D.24677
	je	.L1196	#,
	movq	-40(%rbp), %rax	# tem, tmp452
	movq	16(%rax), %rax	# tem_4->fld[1].rtx, D.24680
	movzwl	(%rax), %eax	# _186->code, D.24677
	cmpw	$55, %ax	#, D.24677
	je	.L1196	#,
	movq	-40(%rbp), %rax	# tem, tmp453
	movq	16(%rax), %rax	# tem_4->fld[1].rtx, D.24680
	movzwl	(%rax), %eax	# _188->code, D.24677
	cmpw	$58, %ax	#, D.24677
	je	.L1196	#,
	movq	-40(%rbp), %rax	# tem, tmp454
	movq	16(%rax), %rax	# tem_4->fld[1].rtx, D.24680
	movzwl	(%rax), %eax	# _190->code, D.24677
	cmpw	$134, %ax	#, D.24677
	je	.L1196	#,
	movq	-40(%rbp), %rax	# tem, tmp455
	movq	16(%rax), %rax	# tem_4->fld[1].rtx, D.24680
	movzwl	(%rax), %eax	# _192->code, D.24677
	cmpw	$56, %ax	#, D.24677
	je	.L1196	#,
	movq	-40(%rbp), %rax	# tem, tmp456
	movq	16(%rax), %rax	# tem_4->fld[1].rtx, D.24680
	movzwl	(%rax), %eax	# _194->code, D.24677
	cmpw	$140, %ax	#, D.24677
	jne	.L1190	#,
.L1196:
	.loc 1 5807 0
	movq	-64(%rbp), %rax	# v, tmp457
	movzbl	101(%rax), %edx	#, tmp460
	andl	$-9, %edx	#, tmp461
	movb	%dl, 101(%rax)	# tmp461,
.L1190:
.LBE73:
	.loc 1 5811 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.519
	testq	%rax, %rax	# loop_dump_stream.519
	je	.L1154	#,
	.loc 1 5812 0
	movq	loop_dump_stream(%rip), %rcx	# loop_dump_stream, loop_dump_stream.520
	movq	-64(%rbp), %rax	# v, tmp462
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# loop_dump_stream.520,
	movq	%rax, %rdi	# tmp462,
	call	loop_giv_dump	#
.L1154:
	.loc 1 5813 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE57:
	.size	record_giv, .-record_giv
	.section	.rodata
	.align 8
.LC50:
	.string	"Found branch outside giv lifetime.\n"
	.align 8
.LC51:
	.string	"Insn %d: giv reg %d final_value replaceable\n"
	.text
	.type	check_final_value, @function
check_final_value:
.LFB58:
	.loc 1 5825 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# loop, loop
	movq	%rsi, -64(%rbp)	# v, v
	.loc 1 5826 0
	movq	-56(%rbp), %rax	# loop, tmp114
	movq	160(%rax), %rax	# loop_12(D)->aux, D.24691
	addq	$208, %rax	#, tmp115
	movq	%rax, -24(%rbp)	# tmp115, ivs
	.loc 1 5828 0
	movq	$0, -16(%rbp)	#, final_value
	.loc 1 5830 0
	movq	-24(%rbp), %rax	# ivs, tmp116
	movq	(%rax), %rdx	# ivs_14->regs, D.24692
	movq	-64(%rbp), %rax	# v, tmp117
	movq	16(%rax), %rax	# v_17(D)->src_reg, D.24693
	movl	8(%rax), %eax	# _18->fld[0].rtuint, D.24694
	movl	%eax, %eax	# D.24694, D.24695
	salq	$4, %rax	#, D.24695
	addq	%rdx, %rax	# D.24692, D.24692
	movq	8(%rax), %rax	# _22->iv.class, tmp118
	movq	%rax, -8(%rbp)	# tmp118, bl
	.loc 1 5853 0
	movq	-64(%rbp), %rdx	# v, tmp119
	movq	-56(%rbp), %rax	# loop, tmp120
	movq	%rdx, %rsi	# tmp119,
	movq	%rax, %rdi	# tmp120,
	call	final_giv_value	#
	movq	%rax, -16(%rbp)	# tmp121, final_value
	cmpq	$0, -16(%rbp)	#, final_value
	je	.L1203	#,
	.loc 1 5854 0
	movq	-64(%rbp), %rax	# v, tmp122
	movzbl	100(%rax), %eax	# *v_17(D), D.24696
	andl	$16, %eax	#, D.24696
	testb	%al, %al	# D.24696
	jne	.L1204	#,
	.loc 1 5854 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# v, tmp123
	movq	(%rax), %rdx	# v_17(D)->insn, D.24693
	movq	-64(%rbp), %rax	# v, tmp124
	movq	32(%rax), %rax	# v_17(D)->dest_reg, D.24693
	movq	%rdx, %rsi	# D.24693,
	movq	%rax, %rdi	# D.24693,
	call	last_use_this_basic_block	#
	testl	%eax, %eax	# D.24697
	je	.L1203	#,
.L1204:
.LBB74:
	.loc 1 5856 0 is_stmt 1
	movl	$0, -48(%rbp)	#, biv_increment_seen
	movl	$0, -44(%rbp)	#, before_giv_insn
	.loc 1 5857 0
	movq	-64(%rbp), %rax	# v, tmp125
	movq	(%rax), %rax	# v_17(D)->insn, tmp126
	movq	%rax, -40(%rbp)	# tmp126, p
	.loc 1 5860 0
	movq	-64(%rbp), %rax	# v, tmp127
	movzbl	100(%rax), %edx	# v_17(D)->replaceable, tmp130
	orl	$1, %edx	#, tmp131
	movb	%dl, 100(%rax)	# tmp131, v_17(D)->replaceable
	.loc 1 5880 0
	movq	-64(%rbp), %rax	# v, tmp132
	movq	(%rax), %rax	# v_17(D)->insn, tmp133
	movq	%rax, -32(%rbp)	# tmp133, last_giv_use
.L1213:
	.loc 1 5884 0
	movq	-40(%rbp), %rax	# p, tmp134
	movq	24(%rax), %rax	# p_6->fld[2].rtx, tmp135
	movq	%rax, -40(%rbp)	# tmp135, p
	.loc 1 5885 0
	movq	-56(%rbp), %rax	# loop, tmp136
	movq	200(%rax), %rax	# loop_12(D)->end, D.24693
	cmpq	-40(%rbp), %rax	# p, D.24693
	jne	.L1205	#,
	.loc 1 5887 0
	movl	$1, -44(%rbp)	#, before_giv_insn
	.loc 1 5888 0
	movq	-56(%rbp), %rax	# loop, tmp137
	movq	192(%rax), %rax	# loop_12(D)->start, D.24693
	movq	24(%rax), %rax	# _37->fld[2].rtx, tmp138
	movq	%rax, -40(%rbp)	# tmp138, p
.L1205:
	.loc 1 5890 0
	movq	-64(%rbp), %rax	# v, tmp139
	movq	(%rax), %rax	# v_17(D)->insn, D.24693
	cmpq	-40(%rbp), %rax	# p, D.24693
	jne	.L1206	#,
	.loc 1 5891 0
	jmp	.L1207	#
.L1206:
	.loc 1 5893 0
	movq	-40(%rbp), %rax	# p, tmp140
	movzwl	(%rax), %eax	# p_7->code, D.24698
	cmpw	$32, %ax	#, D.24698
	je	.L1208	#,
	.loc 1 5893 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# p, tmp141
	movzwl	(%rax), %eax	# p_7->code, D.24698
	cmpw	$33, %ax	#, D.24698
	je	.L1208	#,
	.loc 1 5894 0 is_stmt 1
	movq	-40(%rbp), %rax	# p, tmp142
	movzwl	(%rax), %eax	# p_7->code, D.24698
	cmpw	$34, %ax	#, D.24698
	jne	.L1209	#,
.L1208:
	.loc 1 5901 0
	cmpl	$0, -48(%rbp)	#, biv_increment_seen
	jne	.L1210	#,
	.loc 1 5902 0
	movq	-40(%rbp), %rax	# p, tmp143
	movq	32(%rax), %rdx	# p_7->fld[3].rtx, D.24693
	movq	-64(%rbp), %rax	# v, tmp144
	movq	16(%rax), %rax	# v_17(D)->src_reg, D.24693
	movq	%rdx, %rsi	# D.24693,
	movq	%rax, %rdi	# D.24693,
	call	reg_set_p	#
	testl	%eax, %eax	# D.24697
	je	.L1210	#,
	.loc 1 5903 0
	movl	$1, -48(%rbp)	#, biv_increment_seen
.L1210:
	.loc 1 5905 0
	movq	-40(%rbp), %rax	# p, tmp145
	movq	32(%rax), %rdx	# p_7->fld[3].rtx, D.24693
	movq	-64(%rbp), %rax	# v, tmp146
	movq	32(%rax), %rax	# v_17(D)->dest_reg, D.24693
	movq	%rdx, %rsi	# D.24693,
	movq	%rax, %rdi	# D.24693,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24697
	je	.L1209	#,
	.loc 1 5907 0
	cmpl	$0, -48(%rbp)	#, biv_increment_seen
	jne	.L1211	#,
	.loc 1 5907 0 is_stmt 0 discriminator 1
	cmpl	$0, -44(%rbp)	#, before_giv_insn
	je	.L1212	#,
.L1211:
	.loc 1 5909 0 is_stmt 1
	movq	-64(%rbp), %rax	# v, tmp147
	movzbl	100(%rax), %edx	# v_17(D)->replaceable, tmp150
	andl	$-2, %edx	#, tmp151
	movb	%dl, 100(%rax)	# tmp151, v_17(D)->replaceable
	.loc 1 5910 0
	movq	-64(%rbp), %rax	# v, tmp152
	movzbl	100(%rax), %edx	# v_17(D)->not_replaceable, tmp155
	orl	$2, %edx	#, tmp156
	movb	%dl, 100(%rax)	# tmp156, v_17(D)->not_replaceable
	.loc 1 5911 0
	jmp	.L1207	#
.L1212:
	.loc 1 5913 0
	movq	-40(%rbp), %rax	# p, tmp157
	movq	%rax, -32(%rbp)	# tmp157, last_giv_use
	.loc 1 5916 0
	jmp	.L1213	#
.L1209:
	jmp	.L1213	#
.L1207:
	.loc 1 5922 0
	movq	-64(%rbp), %rax	# v, tmp158
	movzbl	100(%rax), %eax	# *v_17(D), D.24696
	andl	$1, %eax	#, D.24696
	testb	%al, %al	# D.24696
	je	.L1214	#,
	.loc 1 5924 0
	movq	-64(%rbp), %rax	# v, tmp159
	movq	(%rax), %rax	# v_17(D)->insn, tmp160
	movq	%rax, -40(%rbp)	# tmp160, p
.L1221:
	.loc 1 5927 0
	movq	-40(%rbp), %rax	# p, tmp161
	movq	24(%rax), %rax	# p_8->fld[2].rtx, tmp162
	movq	%rax, -40(%rbp)	# tmp162, p
	.loc 1 5928 0
	movq	-56(%rbp), %rax	# loop, tmp163
	movq	200(%rax), %rax	# loop_12(D)->end, D.24693
	cmpq	-40(%rbp), %rax	# p, D.24693
	jne	.L1215	#,
	.loc 1 5929 0
	movq	-56(%rbp), %rax	# loop, tmp164
	movq	192(%rax), %rax	# loop_12(D)->start, D.24693
	movq	24(%rax), %rax	# _56->fld[2].rtx, tmp165
	movq	%rax, -40(%rbp)	# tmp165, p
.L1215:
	.loc 1 5930 0
	movq	-40(%rbp), %rax	# p, tmp166
	cmpq	-32(%rbp), %rax	# last_giv_use, tmp166
	jne	.L1216	#,
	.loc 1 5931 0
	jmp	.L1214	#
.L1216:
	.loc 1 5933 0
	movq	-40(%rbp), %rax	# p, tmp167
	movzwl	(%rax), %eax	# p_9->code, D.24698
	cmpw	$33, %ax	#, D.24698
	jne	.L1217	#,
	.loc 1 5933 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# p, tmp168
	movq	64(%rax), %rax	# p_9->fld[7].rtx, D.24693
	testq	%rax, %rax	# D.24693
	je	.L1217	#,
	.loc 1 5934 0 is_stmt 1
	movq	-40(%rbp), %rax	# p, tmp169
	movq	64(%rax), %rax	# p_9->fld[7].rtx, D.24693
	movq	56(%rax), %rax	# _60->fld[6].rtstr, D.24699
	testq	%rax, %rax	# D.24699
	je	.L1217	#,
	.loc 1 5935 0
	movq	-64(%rbp), %rax	# v, tmp170
	movq	(%rax), %rdx	# v_17(D)->insn, D.24693
	movq	-40(%rbp), %rax	# p, tmp171
	movq	64(%rax), %rax	# p_9->fld[7].rtx, D.24693
	movq	%rdx, %rsi	# D.24693,
	movq	%rax, %rdi	# D.24693,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24697
	je	.L1218	#,
	.loc 1 5936 0
	movq	-40(%rbp), %rax	# p, tmp172
	movq	64(%rax), %rdx	# p_9->fld[7].rtx, D.24693
	movq	-56(%rbp), %rax	# loop, tmp173
	movq	192(%rax), %rax	# loop_12(D)->start, D.24693
	movq	%rdx, %rsi	# D.24693,
	movq	%rax, %rdi	# D.24693,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24697
	jne	.L1219	#,
.L1218:
	.loc 1 5937 0
	movq	-40(%rbp), %rax	# p, tmp174
	movq	64(%rax), %rdx	# p_9->fld[7].rtx, D.24693
	movq	-32(%rbp), %rax	# last_giv_use, tmp175
	movq	%rdx, %rsi	# D.24693,
	movq	%rax, %rdi	# tmp175,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24697
	je	.L1217	#,
	.loc 1 5938 0
	movq	-56(%rbp), %rax	# loop, tmp176
	movq	200(%rax), %rdx	# loop_12(D)->end, D.24693
	movq	-40(%rbp), %rax	# p, tmp177
	movq	64(%rax), %rax	# p_9->fld[7].rtx, D.24693
	movq	%rdx, %rsi	# D.24693,
	movq	%rax, %rdi	# D.24693,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24697
	je	.L1217	#,
.L1219:
	.loc 1 5940 0
	movq	-64(%rbp), %rax	# v, tmp178
	movzbl	100(%rax), %edx	# v_17(D)->replaceable, tmp181
	andl	$-2, %edx	#, tmp182
	movb	%dl, 100(%rax)	# tmp182, v_17(D)->replaceable
	.loc 1 5941 0
	movq	-64(%rbp), %rax	# v, tmp183
	movzbl	100(%rax), %edx	# v_17(D)->not_replaceable, tmp186
	orl	$2, %edx	#, tmp187
	movb	%dl, 100(%rax)	# tmp187, v_17(D)->not_replaceable
	.loc 1 5943 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.521
	testq	%rax, %rax	# loop_dump_stream.521
	je	.L1220	#,
	.loc 1 5944 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.522
	movq	%rax, %rcx	# loop_dump_stream.522,
	movl	$35, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC50, %edi	#,
	call	fwrite	#
	.loc 1 5947 0
	jmp	.L1214	#
.L1220:
	jmp	.L1214	#
.L1217:
	.loc 1 5949 0
	jmp	.L1221	#
.L1214:
	.loc 1 5953 0
	movq	-64(%rbp), %rax	# v, tmp188
	movzbl	100(%rax), %eax	# *v_17(D), D.24696
	andl	$1, %eax	#, D.24696
	testb	%al, %al	# D.24696
	je	.L1203	#,
	.loc 1 5954 0
	movq	-64(%rbp), %rax	# v, tmp189
	movq	-16(%rbp), %rdx	# final_value, tmp190
	movq	%rdx, 88(%rax)	# tmp190, v_17(D)->final_value
.L1203:
.LBE74:
	.loc 1 5957 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.523
	testq	%rax, %rax	# loop_dump_stream.523
	je	.L1202	#,
	.loc 1 5957 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# v, tmp191
	movzbl	100(%rax), %eax	# *v_17(D), D.24696
	andl	$1, %eax	#, D.24696
	testb	%al, %al	# D.24696
	je	.L1202	#,
	.loc 1 5959 0 is_stmt 1
	movq	-64(%rbp), %rax	# v, tmp192
	movq	32(%rax), %rax	# v_17(D)->dest_reg, D.24693
	.loc 1 5958 0
	movl	8(%rax), %ecx	# _80->fld[0].rtuint, D.24694
	.loc 1 5959 0
	movq	-64(%rbp), %rax	# v, tmp193
	movq	(%rax), %rax	# v_17(D)->insn, D.24693
	.loc 1 5958 0
	movl	8(%rax), %edx	# _82->fld[0].rtint, D.24697
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.524
	movl	$.LC51, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.524,
	movl	$0, %eax	#,
	call	fprintf	#
.L1202:
	.loc 1 5960 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE58:
	.size	check_final_value, .-check_final_value
	.type	update_giv_derive, @function
update_giv_derive:
.LFB59:
	.loc 1 5977 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# loop, loop
	movq	%rsi, -80(%rbp)	# p, p
	.loc 1 5978 0
	movq	-72(%rbp), %rax	# loop, tmp89
	movq	160(%rax), %rax	# loop_6(D)->aux, D.24702
	addq	$208, %rax	#, tmp90
	movq	%rax, -8(%rbp)	# tmp90, ivs
	.loc 1 6011 0
	movq	-8(%rbp), %rax	# ivs, tmp91
	movq	16(%rax), %rax	# ivs_8->list, tmp92
	movq	%rax, -40(%rbp)	# tmp92, bl
	jmp	.L1224	#
.L1243:
	.loc 1 6012 0
	movq	-40(%rbp), %rax	# bl, tmp93
	movq	8(%rax), %rax	# bl_1->biv, tmp94
	movq	%rax, -32(%rbp)	# tmp94, biv
	jmp	.L1225	#
.L1242:
	.loc 1 6013 0
	movq	-80(%rbp), %rax	# p, tmp95
	movzwl	(%rax), %eax	# p_11(D)->code, D.24703
	cmpw	$36, %ax	#, D.24703
	je	.L1226	#,
	.loc 1 6013 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# p, tmp96
	movzwl	(%rax), %eax	# p_11(D)->code, D.24703
	cmpw	$33, %ax	#, D.24703
	je	.L1226	#,
	.loc 1 6014 0 is_stmt 1
	movq	-32(%rbp), %rax	# biv, tmp97
	movq	(%rax), %rax	# biv_2->insn, D.24704
	cmpq	-80(%rbp), %rax	# p, D.24704
	jne	.L1227	#,
.L1226:
	.loc 1 6016 0
	movq	-40(%rbp), %rax	# bl, tmp98
	movq	24(%rax), %rax	# bl_1->giv, tmp99
	movq	%rax, -24(%rbp)	# tmp99, giv
	jmp	.L1228	#
.L1241:
	.loc 1 6020 0
	movq	-24(%rbp), %rax	# giv, tmp100
	movzbl	100(%rax), %eax	# *giv_3, D.24705
	andl	$64, %eax	#, D.24705
	testb	%al, %al	# D.24705
	je	.L1229	#,
	.loc 1 6021 0
	jmp	.L1230	#
.L1229:
	.loc 1 6025 0
	movq	-80(%rbp), %rax	# p, tmp101
	movzwl	(%rax), %eax	# p_11(D)->code, D.24703
	cmpw	$36, %ax	#, D.24703
	jne	.L1231	#,
	.loc 1 6025 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# giv, tmp102
	movzbl	100(%rax), %eax	# *giv_3, D.24705
	andl	$8, %eax	#, D.24705
	testb	%al, %al	# D.24705
	jne	.L1231	#,
	.loc 1 6026 0 is_stmt 1
	movq	-24(%rbp), %rax	# giv, tmp103
	movzbl	100(%rax), %edx	# giv_3->cant_derive, tmp106
	orl	$64, %edx	#, tmp107
	movb	%dl, 100(%rax)	# tmp107, giv_3->cant_derive
	jmp	.L1230	#
.L1231:
	.loc 1 6032 0
	movq	-24(%rbp), %rax	# giv, tmp108
	movq	64(%rax), %rdx	# giv_3->mult_val, D.24704
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24704
	cmpq	%rax, %rdx	# D.24704, D.24704
	je	.L1232	#,
	.loc 1 6032 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# giv, tmp109
	movzbl	100(%rax), %eax	# *giv_3, D.24705
	andl	$1, %eax	#, D.24705
	testb	%al, %al	# D.24705
	je	.L1233	#,
.L1232:
	.loc 1 6033 0 is_stmt 1
	jmp	.L1230	#
.L1233:
	.loc 1 6039 0
	movq	-32(%rbp), %rax	# biv, tmp110
	movq	(%rax), %rax	# biv_2->insn, D.24704
	cmpq	-80(%rbp), %rax	# p, D.24704
	jne	.L1234	#,
.LBB75:
	.loc 1 6043 0
	movq	$0, -16(%rbp)	#, tem
	.loc 1 6044 0
	movq	-32(%rbp), %rax	# biv, tmp111
	movq	64(%rax), %rdx	# biv_2->mult_val, D.24704
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, D.24704
	cmpq	%rax, %rdx	# D.24704, D.24704
	jne	.L1235	#,
	.loc 1 6045 0
	movq	-24(%rbp), %rax	# giv, tmp112
	movq	64(%rax), %rcx	# giv_3->mult_val, D.24704
	movq	-32(%rbp), %rax	# biv, tmp113
	movq	72(%rax), %rdx	# biv_2->add_val, D.24704
	movq	-24(%rbp), %rax	# giv, tmp114
	movl	48(%rax), %eax	# giv_3->mode, D.24706
	movl	%eax, %esi	# D.24706,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24704
	leaq	-52(%rbp), %rcx	#, tmp115
	leaq	-48(%rbp), %rdx	#, tmp116
	movq	-72(%rbp), %rax	# loop, tmp117
	movq	%rax, %rdi	# tmp117,
	call	simplify_giv_expr	#
	movq	%rax, -16(%rbp)	# tmp118, tem
.L1235:
	.loc 1 6051 0
	cmpq	$0, -16(%rbp)	#, tem
	je	.L1236	#,
	.loc 1 6051 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# giv, tmp119
	movq	112(%rax), %rax	# giv_3->derive_adjustment, D.24704
	testq	%rax, %rax	# D.24704
	je	.L1236	#,
	.loc 1 6053 0 is_stmt 1
	movq	-24(%rbp), %rax	# giv, tmp120
	movq	112(%rax), %rcx	# giv_3->derive_adjustment, D.24704
	movq	-24(%rbp), %rax	# giv, tmp121
	movl	48(%rax), %eax	# giv_3->mode, D.24706
	movq	-16(%rbp), %rdx	# tem, tmp122
	movl	%eax, %esi	# D.24706,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24704
	.loc 1 6052 0
	leaq	-52(%rbp), %rcx	#, tmp123
	leaq	-48(%rbp), %rdx	#, tmp124
	movq	-72(%rbp), %rax	# loop, tmp125
	movq	%rax, %rdi	# tmp125,
	call	simplify_giv_expr	#
	movq	%rax, -16(%rbp)	# tmp126, tem
.L1236:
	.loc 1 6057 0
	cmpq	$0, -16(%rbp)	#, tem
	je	.L1237	#,
	.loc 1 6058 0
	movq	-24(%rbp), %rax	# giv, tmp127
	movq	-16(%rbp), %rdx	# tem, tmp128
	movq	%rdx, 112(%rax)	# tmp128, giv_3->derive_adjustment
	jmp	.L1230	#
.L1237:
	.loc 1 6060 0
	movq	-24(%rbp), %rax	# giv, tmp129
	movzbl	100(%rax), %edx	# giv_3->cant_derive, tmp132
	orl	$64, %edx	#, tmp133
	movb	%dl, 100(%rax)	# tmp133, giv_3->cant_derive
.LBE75:
	jmp	.L1230	#
.L1234:
	.loc 1 6062 0
	movq	-80(%rbp), %rax	# p, tmp134
	movzwl	(%rax), %eax	# p_11(D)->code, D.24703
	cmpw	$36, %ax	#, D.24703
	jne	.L1239	#,
	.loc 1 6062 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# biv, tmp135
	movzbl	100(%rax), %eax	# *biv_2, D.24705
	andl	$8, %eax	#, D.24705
	testb	%al, %al	# D.24705
	je	.L1240	#,
.L1239:
	.loc 1 6063 0 is_stmt 1
	movq	-80(%rbp), %rax	# p, tmp136
	movzwl	(%rax), %eax	# p_11(D)->code, D.24703
	cmpw	$33, %ax	#, D.24703
	jne	.L1230	#,
	.loc 1 6063 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# biv, tmp137
	movzbl	100(%rax), %eax	# *biv_2, D.24705
	andl	$32, %eax	#, D.24705
	testb	%al, %al	# D.24705
	je	.L1230	#,
.L1240:
	.loc 1 6064 0 is_stmt 1
	movq	-24(%rbp), %rax	# giv, tmp138
	movzbl	100(%rax), %edx	# giv_3->cant_derive, tmp141
	orl	$64, %edx	#, tmp142
	movb	%dl, 100(%rax)	# tmp142, giv_3->cant_derive
.L1230:
	.loc 1 6016 0
	movq	-24(%rbp), %rax	# giv, tmp143
	movq	128(%rax), %rax	# giv_3->next_iv, tmp144
	movq	%rax, -24(%rbp)	# tmp144, giv
.L1228:
	.loc 1 6016 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, giv
	jne	.L1241	#,
.L1227:
	.loc 1 6012 0 is_stmt 1
	movq	-32(%rbp), %rax	# biv, tmp145
	movq	128(%rax), %rax	# biv_2->next_iv, tmp146
	movq	%rax, -32(%rbp)	# tmp146, biv
.L1225:
	.loc 1 6012 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, biv
	jne	.L1242	#,
	.loc 1 6011 0 is_stmt 1
	movq	-40(%rbp), %rax	# bl, tmp147
	movq	64(%rax), %rax	# bl_1->next, tmp148
	movq	%rax, -40(%rbp)	# tmp148, bl
.L1224:
	.loc 1 6011 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, bl
	jne	.L1243	#,
	.loc 1 6067 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE59:
	.size	update_giv_derive, .-update_giv_derive
	.type	basic_induction_var, @function
basic_induction_var:
.LFB60:
	.loc 1 6116 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$112, %rsp	#,
	movq	%rdi, -56(%rbp)	# loop, loop
	movq	%rsi, -64(%rbp)	# x, x
	movl	%edx, -68(%rbp)	# mode, mode
	movq	%rcx, -80(%rbp)	# dest_reg, dest_reg
	movq	%r8, -88(%rbp)	# p, p
	movq	%r9, -96(%rbp)	# inc_val, inc_val
	.loc 1 6119 0
	movq	$0, -24(%rbp)	#, set
	.loc 1 6121 0
	movq	-64(%rbp), %rax	# x, tmp170
	movzwl	(%rax), %eax	# x_14(D)->code, D.24708
	movzwl	%ax, %eax	# D.24708, tmp171
	movl	%eax, -44(%rbp)	# tmp171, code
	.loc 1 6122 0
	movq	24(%rbp), %rax	# location, tmp172
	movq	$0, (%rax)	#, *location_17(D)
	.loc 1 6123 0
	movl	-44(%rbp), %eax	# code, tmp174
	subl	$54, %eax	#, tmp173
	cmpl	$66, %eax	#, tmp173
	ja	.L1245	#,
	movl	%eax, %eax	# tmp173, tmp175
	movq	.L1247(,%rax,8), %rax	#, tmp176
	jmp	*%rax	# tmp176
	.section	.rodata
	.align 8
	.align 4
.L1247:
	.quad	.L1246
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1246
	.quad	.L1245
	.quad	.L1245
	.quad	.L1248
	.quad	.L1245
	.quad	.L1249
	.quad	.L1245
	.quad	.L1245
	.quad	.L1250
	.quad	.L1245
	.quad	.L1246
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1251
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1252
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1253
	.text
.L1251:
	.loc 1 6126 0
	movq	-64(%rbp), %rax	# x, tmp177
	movq	8(%rax), %rax	# x_14(D)->fld[0].rtx, D.24709
	movq	-80(%rbp), %rdx	# dest_reg, tmp178
	movq	%rdx, %rsi	# tmp178,
	movq	%rax, %rdi	# D.24709,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24707
	jne	.L1254	#,
	.loc 1 6127 0
	movq	-64(%rbp), %rax	# x, tmp179
	movq	8(%rax), %rax	# x_14(D)->fld[0].rtx, D.24709
	movzwl	(%rax), %eax	# _21->code, D.24708
	cmpw	$63, %ax	#, D.24708
	jne	.L1255	#,
	.loc 1 6128 0
	movq	-64(%rbp), %rax	# x, tmp180
	movq	8(%rax), %rax	# x_14(D)->fld[0].rtx, D.24709
	movzbl	3(%rax), %eax	# *_23, D.24710
	andl	$16, %eax	#, D.24710
	testb	%al, %al	# D.24710
	je	.L1255	#,
	.loc 1 6129 0
	movq	-64(%rbp), %rax	# x, tmp181
	movq	8(%rax), %rax	# x_14(D)->fld[0].rtx, D.24709
	movq	8(%rax), %rax	# _26->fld[0].rtx, D.24709
	cmpq	-80(%rbp), %rax	# dest_reg, D.24709
	jne	.L1255	#,
.L1254:
	.loc 1 6131 0
	movq	-64(%rbp), %rax	# x, tmp185
	addq	$16, %rax	#, tmp184
	movq	%rax, -40(%rbp)	# tmp184, argp
	jmp	.L1256	#
.L1255:
	.loc 1 6133 0
	movq	-64(%rbp), %rax	# x, tmp186
	movq	16(%rax), %rax	# x_14(D)->fld[1].rtx, D.24709
	movq	-80(%rbp), %rdx	# dest_reg, tmp187
	movq	%rdx, %rsi	# tmp187,
	movq	%rax, %rdi	# D.24709,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24707
	jne	.L1257	#,
	.loc 1 6134 0
	movq	-64(%rbp), %rax	# x, tmp188
	movq	16(%rax), %rax	# x_14(D)->fld[1].rtx, D.24709
	movzwl	(%rax), %eax	# _30->code, D.24708
	cmpw	$63, %ax	#, D.24708
	jne	.L1258	#,
	.loc 1 6135 0
	movq	-64(%rbp), %rax	# x, tmp189
	movq	16(%rax), %rax	# x_14(D)->fld[1].rtx, D.24709
	movzbl	3(%rax), %eax	# *_32, D.24710
	andl	$16, %eax	#, D.24710
	testb	%al, %al	# D.24710
	je	.L1258	#,
	.loc 1 6136 0
	movq	-64(%rbp), %rax	# x, tmp190
	movq	16(%rax), %rax	# x_14(D)->fld[1].rtx, D.24709
	movq	8(%rax), %rax	# _35->fld[0].rtx, D.24709
	cmpq	-80(%rbp), %rax	# dest_reg, D.24709
	jne	.L1258	#,
.L1257:
	.loc 1 6138 0
	movq	-64(%rbp), %rax	# x, tmp194
	addq	$8, %rax	#, tmp193
	movq	%rax, -40(%rbp)	# tmp193, argp
	jmp	.L1256	#
.L1258:
	.loc 1 6141 0
	movl	$0, %eax	#, D.24707
	jmp	.L1259	#
.L1256:
	.loc 1 6143 0
	movq	-40(%rbp), %rax	# argp, tmp195
	movq	(%rax), %rax	# *argp_1, tmp196
	movq	%rax, -8(%rbp)	# tmp196, arg
	.loc 1 6144 0
	movq	-8(%rbp), %rdx	# arg, tmp197
	movq	-56(%rbp), %rax	# loop, tmp198
	movq	%rdx, %rsi	# tmp197,
	movq	%rax, %rdi	# tmp198,
	call	loop_invariant_p	#
	cmpl	$1, %eax	#, D.24707
	je	.L1260	#,
	.loc 1 6145 0
	movl	$0, %eax	#, D.24707
	jmp	.L1259	#
.L1260:
	.loc 1 6147 0
	movq	-64(%rbp), %rax	# x, tmp199
	movzbl	2(%rax), %eax	# x_14(D)->mode, D.24710
	movzbl	%al, %esi	# D.24710, D.24711
	movq	-80(%rbp), %rax	# dest_reg, tmp200
	movzbl	2(%rax), %eax	# dest_reg_19(D)->mode, D.24710
	movzbl	%al, %eax	# D.24710, D.24711
	movq	-8(%rbp), %rdx	# arg, tmp201
	movl	$0, %ecx	#,
	movl	%eax, %edi	# D.24711,
	call	convert_modes	#
	movq	-96(%rbp), %rdx	# inc_val, tmp202
	movq	%rax, (%rdx)	# D.24709, *inc_val_49(D)
	.loc 1 6148 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.24709
	movq	16(%rbp), %rax	# mult_val, tmp203
	movq	%rdx, (%rax)	# D.24709, *mult_val_51(D)
	.loc 1 6149 0
	movq	24(%rbp), %rax	# location, tmp204
	movq	-40(%rbp), %rdx	# argp, tmp205
	movq	%rdx, (%rax)	# tmp205, *location_17(D)
	.loc 1 6150 0
	movl	$1, %eax	#, D.24707
	jmp	.L1259	#
.L1249:
	.loc 1 6158 0
	movq	-64(%rbp), %rax	# x, tmp206
	movq	8(%rax), %rax	# x_14(D)->fld[0].rtx, D.24709
	movzbl	2(%rax), %eax	# _53->mode, D.24710
	.loc 1 6157 0
	movzbl	%al, %edx	# D.24710, D.24711
	movq	-64(%rbp), %rax	# x, tmp207
	movq	8(%rax), %rsi	# x_14(D)->fld[0].rtx, D.24709
	movq	-96(%rbp), %r9	# inc_val, tmp208
	movq	-88(%rbp), %r8	# p, tmp209
	movq	-80(%rbp), %rcx	# dest_reg, tmp210
	movq	-56(%rbp), %rax	# loop, tmp211
	movq	24(%rbp), %rdi	# location, tmp212
	movq	%rdi, 8(%rsp)	# tmp212,
	movq	16(%rbp), %rdi	# mult_val, tmp213
	movq	%rdi, (%rsp)	# tmp213,
	movq	%rax, %rdi	# tmp211,
	call	basic_induction_var	#
	jmp	.L1259	#
.L1248:
	.loc 1 6167 0
	movq	-64(%rbp), %rdx	# x, tmp214
	movq	-80(%rbp), %rax	# dest_reg, tmp215
	movq	%rdx, %rsi	# tmp214,
	movq	%rax, %rdi	# tmp215,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24707
	je	.L1261	#,
	.loc 1 6168 0
	movl	$0, %eax	#, D.24707
	jmp	.L1259	#
.L1261:
	.loc 1 6170 0
	movq	-88(%rbp), %rax	# p, tmp216
	movq	%rax, -32(%rbp)	# tmp216, insn
.L1263:
.LBB76:
	.loc 1 6176 0 discriminator 1
	movq	-32(%rbp), %rax	# insn, tmp217
	movq	16(%rax), %rax	# insn_2->fld[1].rtx, tmp218
	movq	%rax, -32(%rbp)	# tmp218, insn
	.loc 1 6179 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, insn
	je	.L1262	#,
	.loc 1 6178 0
	movq	-32(%rbp), %rax	# insn, tmp219
	movzwl	(%rax), %eax	# insn_62->code, D.24708
	cmpw	$37, %ax	#, D.24708
	jne	.L1262	#,
	.loc 1 6179 0
	movq	-32(%rbp), %rax	# insn, tmp220
	movl	40(%rax), %eax	# insn_62->fld[4].rtint, D.24707
	cmpl	$-96, %eax	#, D.24707
	jne	.L1263	#,
.L1262:
	.loc 1 6181 0
	cmpq	$0, -32(%rbp)	#, insn
	jne	.L1264	#,
	.loc 1 6182 0
	jmp	.L1250	#
.L1264:
	.loc 1 6183 0
	movq	-32(%rbp), %rax	# insn, tmp221
	movzwl	(%rax), %eax	# insn_62->code, D.24708
	movzwl	%ax, %eax	# D.24708, D.24707
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24712
	cmpb	$105, %al	#, D.24712
	jne	.L1265	#,
	.loc 1 6183 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# insn, tmp223
	movq	32(%rax), %rax	# insn_62->fld[3].rtx, D.24709
	movzwl	(%rax), %eax	# _68->code, D.24708
	cmpw	$47, %ax	#, D.24708
	jne	.L1266	#,
	.loc 1 6183 0 discriminator 3
	movq	-32(%rbp), %rax	# insn, tmp224
	movq	32(%rax), %rax	# insn_62->fld[3].rtx, iftmp.526
	jmp	.L1268	#
.L1266:
	.loc 1 6183 0 discriminator 4
	movq	-32(%rbp), %rax	# insn, tmp225
	movq	32(%rax), %rdx	# insn_62->fld[3].rtx, D.24709
	movq	-32(%rbp), %rax	# insn, tmp226
	movq	%rdx, %rsi	# D.24709,
	movq	%rax, %rdi	# tmp226,
	call	single_set_2	#
	jmp	.L1268	#
.L1265:
	.loc 1 6183 0 discriminator 2
	movl	$0, %eax	#, iftmp.525
.L1268:
	.loc 1 6183 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.525, set
	.loc 1 6184 0 is_stmt 1 discriminator 5
	cmpq	$0, -24(%rbp)	#, set
	jne	.L1269	#,
	.loc 1 6185 0
	jmp	.L1250	#
.L1269:
	.loc 1 6186 0
	movq	-24(%rbp), %rax	# set, tmp227
	movq	8(%rax), %rax	# set_75->fld[0].rtx, tmp228
	movq	%rax, -16(%rbp)	# tmp228, dest
	.loc 1 6187 0
	movq	-16(%rbp), %rax	# dest, tmp229
	cmpq	-64(%rbp), %rax	# x, tmp229
	je	.L1270	#,
	.loc 1 6188 0
	movq	-16(%rbp), %rax	# dest, tmp230
	movzwl	(%rax), %eax	# dest_76->code, D.24708
	cmpw	$63, %ax	#, D.24708
	jne	.L1271	#,
	.loc 1 6189 0
	movq	-16(%rbp), %rax	# dest, tmp231
	movzbl	2(%rax), %eax	# dest_76->mode, D.24710
	movzbl	%al, %eax	# D.24710, D.24707
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24710
	movzbl	%al, %edx	# D.24710, D.24707
	movl	target_flags(%rip), %eax	# target_flags, target_flags.528
	andl	$33554432, %eax	#, D.24707
	testl	%eax, %eax	# D.24707
	je	.L1272	#,
	.loc 1 6189 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.527
	jmp	.L1273	#
.L1272:
	.loc 1 6189 0 discriminator 2
	movl	$4, %eax	#, iftmp.527
.L1273:
	.loc 1 6189 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.527, D.24707
	jg	.L1271	#,
	.loc 1 6190 0 is_stmt 1
	movq	-16(%rbp), %rax	# dest, tmp233
	movzbl	2(%rax), %eax	# dest_76->mode, D.24710
	movzbl	%al, %eax	# D.24710, D.24707
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24713
	cmpl	$1, %eax	#, D.24713
	jne	.L1271	#,
	.loc 1 6191 0
	movq	-16(%rbp), %rax	# dest, tmp235
	movq	8(%rax), %rax	# dest_76->fld[0].rtx, D.24709
	cmpq	-64(%rbp), %rax	# x, D.24709
	jne	.L1271	#,
.L1270:
	.loc 1 6193 0
	movq	-24(%rbp), %rax	# set, tmp236
	movq	16(%rax), %rax	# set_75->fld[1].rtx, D.24709
	movzbl	2(%rax), %eax	# _95->mode, D.24710
	.loc 1 6192 0
	testb	%al, %al	# D.24710
	jne	.L1274	#,
	.loc 1 6194 0
	movq	-64(%rbp), %rax	# x, tmp237
	movzbl	2(%rax), %eax	# x_14(D)->mode, D.24710
	.loc 1 6192 0
	movzbl	%al, %eax	# D.24710, iftmp.529
	jmp	.L1275	#
.L1274:
	.loc 1 6195 0 discriminator 1
	movq	-24(%rbp), %rax	# set, tmp238
	movq	16(%rax), %rax	# set_75->fld[1].rtx, D.24709
	movzbl	2(%rax), %eax	# _99->mode, D.24710
	.loc 1 6192 0 discriminator 1
	movzbl	%al, %eax	# D.24710, iftmp.529
.L1275:
	.loc 1 6192 0 is_stmt 0 discriminator 2
	movq	-24(%rbp), %rdx	# set, tmp239
	movq	16(%rdx), %rsi	# set_75->fld[1].rtx, D.24709
	movq	-96(%rbp), %r9	# inc_val, tmp240
	movq	-32(%rbp), %r8	# insn, tmp241
	movq	-80(%rbp), %rdx	# dest_reg, tmp242
	movq	-56(%rbp), %rdi	# loop, tmp243
	movq	24(%rbp), %rcx	# location, tmp244
	movq	%rcx, 8(%rsp)	# tmp244,
	movq	16(%rbp), %rcx	# mult_val, tmp245
	movq	%rcx, (%rsp)	# tmp245,
	movq	%rdx, %rcx	# tmp242,
	movl	%eax, %edx	# iftmp.529,
	call	basic_induction_var	#
	jmp	.L1259	#
.L1271:
	.loc 1 6199 0 is_stmt 1
	jmp	.L1276	#
.L1277:
	.loc 1 6203 0
	movq	-16(%rbp), %rax	# dest, tmp246
	movq	8(%rax), %rax	# dest_5->fld[0].rtx, tmp247
	movq	%rax, -16(%rbp)	# tmp247, dest
.L1276:
	.loc 1 6199 0 discriminator 1
	movq	-16(%rbp), %rax	# dest, tmp248
	movzwl	(%rax), %eax	# dest_5->code, D.24708
	cmpw	$132, %ax	#, D.24708
	je	.L1277	#,
	.loc 1 6200 0
	movq	-16(%rbp), %rax	# dest, tmp249
	movzwl	(%rax), %eax	# dest_5->code, D.24708
	cmpw	$133, %ax	#, D.24708
	je	.L1277	#,
	.loc 1 6201 0
	movq	-16(%rbp), %rax	# dest, tmp250
	movzwl	(%rax), %eax	# dest_5->code, D.24708
	cmpw	$63, %ax	#, D.24708
	je	.L1277	#,
	.loc 1 6202 0
	movq	-16(%rbp), %rax	# dest, tmp251
	movzwl	(%rax), %eax	# dest_5->code, D.24708
	cmpw	$64, %ax	#, D.24708
	je	.L1277	#,
	.loc 1 6204 0
	movq	-16(%rbp), %rax	# dest, tmp252
	cmpq	-64(%rbp), %rax	# x, tmp252
	jne	.L1278	#,
	.loc 1 6205 0
	jmp	.L1250	#
.L1278:
.LBE76:
	.loc 1 6206 0
	jmp	.L1263	#
.L1250:
	.loc 1 6214 0
	movq	-64(%rbp), %rdx	# x, tmp253
	movq	-56(%rbp), %rax	# loop, tmp254
	movq	%rdx, %rsi	# tmp253,
	movq	%rax, %rdi	# tmp254,
	call	loop_invariant_p	#
	cmpl	$1, %eax	#, D.24707
	je	.L1246	#,
	.loc 1 6215 0
	movl	$0, %eax	#, D.24707
	jmp	.L1259	#
.L1246:
	.loc 1 6223 0
	movq	-56(%rbp), %rax	# loop, tmp255
	movl	124(%rax), %eax	# loop_41(D)->level, D.24707
	cmpl	$1, %eax	#, D.24707
	jne	.L1279	#,
	.loc 1 6224 0
	movl	-68(%rbp), %eax	# mode, mode.530
	cltq
	movl	mode_class(,%rax,4), %edx	# mode_class, D.24713
	movq	-80(%rbp), %rax	# dest_reg, tmp257
	movzbl	2(%rax), %eax	# dest_reg_19(D)->mode, D.24710
	movzbl	%al, %eax	# D.24710, D.24707
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24713
	cmpl	%eax, %edx	# D.24713, D.24713
	jne	.L1279	#,
	.loc 1 6225 0
	movl	-68(%rbp), %eax	# mode, mode.531
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24713
	cmpl	$4, %eax	#, D.24713
	je	.L1279	#,
	.loc 1 6228 0
	movq	-80(%rbp), %rax	# dest_reg, tmp260
	movzbl	2(%rax), %eax	# dest_reg_19(D)->mode, D.24710
	movzbl	%al, %eax	# D.24710, D.24711
	movq	-64(%rbp), %rdx	# x, tmp261
	movl	-68(%rbp), %esi	# mode, tmp262
	movl	$0, %ecx	#,
	movl	%eax, %edi	# D.24711,
	call	convert_modes	#
	movq	-96(%rbp), %rdx	# inc_val, tmp263
	movq	%rax, (%rdx)	# D.24709, *inc_val_49(D)
	.loc 1 6229 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.24709
	movq	16(%rbp), %rax	# mult_val, tmp264
	movq	%rdx, (%rax)	# D.24709, *mult_val_51(D)
	.loc 1 6230 0
	movl	$1, %eax	#, D.24707
	jmp	.L1259	#
.L1279:
	.loc 1 6233 0
	movl	$0, %eax	#, D.24707
	jmp	.L1259	#
.L1253:
	.loc 1 6236 0
	movq	-64(%rbp), %rax	# x, tmp265
	movq	8(%rax), %rax	# x_14(D)->fld[0].rtx, D.24709
	movzbl	2(%rax), %eax	# _121->mode, D.24710
	movzbl	%al, %edx	# D.24710, D.24711
	movq	-64(%rbp), %rax	# x, tmp266
	movq	8(%rax), %rsi	# x_14(D)->fld[0].rtx, D.24709
	movq	-96(%rbp), %r9	# inc_val, tmp267
	movq	-88(%rbp), %r8	# p, tmp268
	movq	-80(%rbp), %rcx	# dest_reg, tmp269
	movq	-56(%rbp), %rax	# loop, tmp270
	movq	24(%rbp), %rdi	# location, tmp271
	movq	%rdi, 8(%rsp)	# tmp271,
	movq	16(%rbp), %rdi	# mult_val, tmp272
	movq	%rdi, (%rsp)	# tmp272,
	movq	%rax, %rdi	# tmp270,
	call	basic_induction_var	#
	jmp	.L1259	#
.L1252:
	.loc 1 6241 0
	movq	-88(%rbp), %rax	# p, tmp273
	movq	16(%rax), %rax	# p_57(D)->fld[1].rtx, tmp274
	movq	%rax, -32(%rbp)	# tmp274, insn
	jmp	.L1280	#
.L1282:
	.loc 1 6244 0
	movq	-32(%rbp), %rax	# insn, tmp275
	movq	16(%rax), %rax	# insn_3->fld[1].rtx, tmp276
	movq	%rax, -32(%rbp)	# tmp276, insn
.L1280:
	.loc 1 6241 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, insn
	je	.L1281	#,
	.loc 1 6242 0
	movq	-32(%rbp), %rax	# insn, tmp277
	movzwl	(%rax), %eax	# insn_3->code, D.24708
	cmpw	$37, %ax	#, D.24708
	jne	.L1281	#,
	.loc 1 6243 0
	movq	-32(%rbp), %rax	# insn, tmp278
	movl	40(%rax), %eax	# insn_3->fld[4].rtint, D.24707
	cmpl	$-96, %eax	#, D.24707
	jne	.L1282	#,
.L1281:
	.loc 1 6247 0
	cmpq	$0, -32(%rbp)	#, insn
	je	.L1283	#,
	.loc 1 6248 0
	movq	-32(%rbp), %rax	# insn, tmp279
	movzwl	(%rax), %eax	# insn_3->code, D.24708
	movzwl	%ax, %eax	# D.24708, D.24707
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24712
	cmpb	$105, %al	#, D.24712
	jne	.L1284	#,
	.loc 1 6248 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# insn, tmp281
	movq	32(%rax), %rax	# insn_3->fld[3].rtx, D.24709
	movzwl	(%rax), %eax	# _133->code, D.24708
	cmpw	$47, %ax	#, D.24708
	jne	.L1285	#,
	.loc 1 6248 0 discriminator 3
	movq	-32(%rbp), %rax	# insn, tmp282
	movq	32(%rax), %rax	# insn_3->fld[3].rtx, iftmp.533
	jmp	.L1287	#
.L1285:
	.loc 1 6248 0 discriminator 4
	movq	-32(%rbp), %rax	# insn, tmp283
	movq	32(%rax), %rdx	# insn_3->fld[3].rtx, D.24709
	movq	-32(%rbp), %rax	# insn, tmp284
	movq	%rdx, %rsi	# D.24709,
	movq	%rax, %rdi	# tmp284,
	call	single_set_2	#
	jmp	.L1287	#
.L1284:
	.loc 1 6248 0 discriminator 2
	movl	$0, %eax	#, iftmp.532
.L1287:
	.loc 1 6248 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.532, set
.L1283:
	.loc 1 6250 0 is_stmt 1
	movq	-64(%rbp), %rax	# x, tmp285
	movq	8(%rax), %rdx	# x_14(D)->fld[0].rtx, D.24709
	movq	-80(%rbp), %rax	# dest_reg, tmp286
	movq	%rdx, %rsi	# D.24709,
	movq	%rax, %rdi	# tmp286,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24707
	jne	.L1288	#,
	.loc 1 6251 0
	cmpq	$0, -24(%rbp)	#, set
	je	.L1288	#,
	.loc 1 6251 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# set, tmp287
	movq	8(%rax), %rdx	# set_4->fld[0].rtx, D.24709
	movq	-64(%rbp), %rax	# x, tmp288
	movq	8(%rax), %rax	# x_14(D)->fld[0].rtx, D.24709
	cmpq	%rax, %rdx	# D.24709, D.24709
	jne	.L1288	#,
	.loc 1 6252 0 is_stmt 1
	movq	-64(%rbp), %rax	# x, tmp289
	movq	16(%rax), %rax	# x_14(D)->fld[1].rtx, D.24709
	movzwl	(%rax), %eax	# _145->code, D.24708
	cmpw	$54, %ax	#, D.24708
	jne	.L1288	#,
	.loc 1 6253 0
	movq	-64(%rbp), %rax	# x, tmp290
	movq	16(%rax), %rax	# x_14(D)->fld[1].rtx, D.24709
	movq	8(%rax), %rax	# _147->fld[0].rtwint, D.24714
	testq	%rax, %rax	# D.24714
	js	.L1288	#,
	.loc 1 6254 0
	movq	-24(%rbp), %rax	# set, tmp291
	movq	16(%rax), %rax	# set_4->fld[1].rtx, D.24709
	movzwl	(%rax), %eax	# _149->code, D.24708
	cmpw	$87, %ax	#, D.24708
	jne	.L1288	#,
	.loc 1 6255 0
	movq	-64(%rbp), %rax	# x, tmp292
	movq	16(%rax), %rdx	# x_14(D)->fld[1].rtx, D.24709
	movq	-24(%rbp), %rax	# set, tmp293
	movq	16(%rax), %rax	# set_4->fld[1].rtx, D.24709
	movq	16(%rax), %rax	# _152->fld[1].rtx, D.24709
	cmpq	%rax, %rdx	# D.24709, D.24709
	jne	.L1288	#,
	.loc 1 6257 0
	movq	-64(%rbp), %rax	# x, tmp294
	movq	8(%rax), %rax	# x_14(D)->fld[0].rtx, D.24709
	movzbl	2(%rax), %eax	# _154->mode, D.24710
	.loc 1 6256 0
	movzbl	%al, %edx	# D.24710, D.24711
	movq	-24(%rbp), %rax	# set, tmp295
	movq	16(%rax), %rax	# set_4->fld[1].rtx, D.24709
	movq	8(%rax), %rsi	# _157->fld[0].rtx, D.24709
	movq	-96(%rbp), %r9	# inc_val, tmp296
	movq	-32(%rbp), %r8	# insn, tmp297
	movq	-80(%rbp), %rcx	# dest_reg, tmp298
	movq	-56(%rbp), %rax	# loop, tmp299
	movq	24(%rbp), %rdi	# location, tmp300
	movq	%rdi, 8(%rsp)	# tmp300,
	movq	16(%rbp), %rdi	# mult_val, tmp301
	movq	%rdi, (%rsp)	# tmp301,
	movq	%rax, %rdi	# tmp299,
	call	basic_induction_var	#
	jmp	.L1259	#
.L1288:
	.loc 1 6260 0
	movl	$0, %eax	#, D.24707
	jmp	.L1259	#
.L1245:
	.loc 1 6263 0
	movl	$0, %eax	#, D.24707
.L1259:
	.loc 1 6265 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE60:
	.size	basic_induction_var, .-basic_induction_var
	.type	general_induction_var, @function
general_induction_var:
.LFB61:
	.loc 1 6293 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# loop, loop
	movq	%rsi, -48(%rbp)	# x, x
	movq	%rdx, -56(%rbp)	# src_reg, src_reg
	movq	%rcx, -64(%rbp)	# add_val, add_val
	movq	%r8, -72(%rbp)	# mult_val, mult_val
	movq	%r9, -80(%rbp)	# ext_val, ext_val
	.loc 1 6294 0
	movq	-40(%rbp), %rax	# loop, tmp99
	movq	160(%rax), %rax	# loop_2(D)->aux, D.24716
	addq	$208, %rax	#, tmp100
	movq	%rax, -32(%rbp)	# tmp100, ivs
	.loc 1 6295 0
	movq	-48(%rbp), %rax	# x, tmp101
	movq	%rax, -24(%rbp)	# tmp101, orig_x
	.loc 1 6298 0
	movq	-48(%rbp), %rdx	# x, tmp102
	movq	-40(%rbp), %rax	# loop, tmp103
	movq	%rdx, %rsi	# tmp102,
	movq	%rax, %rdi	# tmp103,
	call	loop_invariant_p	#
	cmpl	$1, %eax	#, D.24715
	jne	.L1290	#,
	.loc 1 6299 0
	movl	$0, %eax	#, D.24715
	jmp	.L1291	#
.L1290:
	.loc 1 6301 0
	movq	24(%rbp), %rax	# pbenefit, tmp104
	movl	$0, (%rax)	#, *pbenefit_9(D)
	.loc 1 6302 0
	movq	-80(%rbp), %rax	# ext_val, tmp105
	movq	$0, (%rax)	#, *ext_val_10(D)
	.loc 1 6303 0
	movq	24(%rbp), %rcx	# pbenefit, tmp106
	movq	-80(%rbp), %rdx	# ext_val, tmp107
	movq	-48(%rbp), %rsi	# x, tmp108
	movq	-40(%rbp), %rax	# loop, tmp109
	movq	%rax, %rdi	# tmp109,
	call	simplify_giv_expr	#
	movq	%rax, -48(%rbp)	# tmp110, x
	.loc 1 6304 0
	cmpq	$0, -48(%rbp)	#, x
	jne	.L1292	#,
	.loc 1 6305 0
	movl	$0, %eax	#, D.24715
	jmp	.L1291	#
.L1292:
	.loc 1 6307 0
	movq	-48(%rbp), %rax	# x, tmp111
	movzwl	(%rax), %eax	# x_11->code, D.24717
	movzwl	%ax, %eax	# D.24717, D.24718
	subl	$48, %eax	#, tmp112
	cmpl	$30, %eax	#, tmp112
	ja	.L1293	#,
	movl	%eax, %eax	# tmp112, tmp113
	movq	.L1295(,%rax,8), %rax	#, tmp114
	jmp	*%rax	# tmp114
	.section	.rodata
	.align 8
	.align 4
.L1295:
	.quad	.L1294
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1294
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1296
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1293
	.quad	.L1297
	.quad	.L1293
	.quad	.L1293
	.quad	.L1298
	.text
.L1294:
	.loc 1 6314 0
	movq	-32(%rbp), %rax	# ivs, tmp115
	movq	16(%rax), %rax	# ivs_4->list, D.24719
	movq	8(%rax), %rax	# _15->biv, D.24720
	movq	32(%rax), %rdx	# _16->dest_reg, D.24721
	movq	-56(%rbp), %rax	# src_reg, tmp116
	movq	%rdx, (%rax)	# D.24721, *src_reg_18(D)
	.loc 1 6315 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.24721
	movq	-72(%rbp), %rax	# mult_val, tmp117
	movq	%rdx, (%rax)	# D.24721, *mult_val_20(D)
	.loc 1 6316 0
	movq	-64(%rbp), %rax	# add_val, tmp118
	movq	-48(%rbp), %rdx	# x, tmp119
	movq	%rdx, (%rax)	# tmp119, *add_val_21(D)
	.loc 1 6317 0
	jmp	.L1299	#
.L1296:
	.loc 1 6321 0
	movq	-56(%rbp), %rax	# src_reg, tmp120
	movq	-48(%rbp), %rdx	# x, tmp121
	movq	%rdx, (%rax)	# tmp121, *src_reg_18(D)
	.loc 1 6322 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.24721
	movq	-72(%rbp), %rax	# mult_val, tmp122
	movq	%rdx, (%rax)	# D.24721, *mult_val_20(D)
	.loc 1 6323 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.24721
	movq	-64(%rbp), %rax	# add_val, tmp123
	movq	%rdx, (%rax)	# D.24721, *add_val_21(D)
	.loc 1 6324 0
	jmp	.L1299	#
.L1297:
	.loc 1 6329 0
	movq	-48(%rbp), %rax	# x, tmp124
	movq	8(%rax), %rax	# x_11->fld[0].rtx, D.24721
	movzwl	(%rax), %eax	# _24->code, D.24717
	cmpw	$78, %ax	#, D.24717
	jne	.L1300	#,
	.loc 1 6331 0
	movq	-48(%rbp), %rax	# x, tmp125
	movq	8(%rax), %rax	# x_11->fld[0].rtx, D.24721
	movq	8(%rax), %rdx	# _26->fld[0].rtx, D.24721
	movq	-56(%rbp), %rax	# src_reg, tmp126
	movq	%rdx, (%rax)	# D.24721, *src_reg_18(D)
	.loc 1 6332 0
	movq	-48(%rbp), %rax	# x, tmp127
	movq	8(%rax), %rax	# x_11->fld[0].rtx, D.24721
	movq	16(%rax), %rdx	# _28->fld[1].rtx, D.24721
	movq	-72(%rbp), %rax	# mult_val, tmp128
	movq	%rdx, (%rax)	# D.24721, *mult_val_20(D)
	jmp	.L1301	#
.L1300:
	.loc 1 6336 0
	movq	-48(%rbp), %rax	# x, tmp129
	movq	8(%rax), %rdx	# x_11->fld[0].rtx, D.24721
	movq	-56(%rbp), %rax	# src_reg, tmp130
	movq	%rdx, (%rax)	# D.24721, *src_reg_18(D)
	.loc 1 6337 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.24721
	movq	-72(%rbp), %rax	# mult_val, tmp131
	movq	%rdx, (%rax)	# D.24721, *mult_val_20(D)
.L1301:
	.loc 1 6339 0
	movq	-48(%rbp), %rax	# x, tmp132
	movq	16(%rax), %rdx	# x_11->fld[1].rtx, D.24721
	movq	-64(%rbp), %rax	# add_val, tmp133
	movq	%rdx, (%rax)	# D.24721, *add_val_21(D)
	.loc 1 6340 0
	jmp	.L1299	#
.L1298:
	.loc 1 6344 0
	movq	-48(%rbp), %rax	# x, tmp134
	movq	8(%rax), %rdx	# x_11->fld[0].rtx, D.24721
	movq	-56(%rbp), %rax	# src_reg, tmp135
	movq	%rdx, (%rax)	# D.24721, *src_reg_18(D)
	.loc 1 6345 0
	movq	-48(%rbp), %rax	# x, tmp136
	movq	16(%rax), %rdx	# x_11->fld[1].rtx, D.24721
	movq	-72(%rbp), %rax	# mult_val, tmp137
	movq	%rdx, (%rax)	# D.24721, *mult_val_20(D)
	.loc 1 6346 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.24721
	movq	-64(%rbp), %rax	# add_val, tmp138
	movq	%rdx, (%rax)	# D.24721, *add_val_21(D)
	.loc 1 6347 0
	jmp	.L1299	#
.L1293:
	.loc 1 6350 0
	movl	$__FUNCTION__.13761, %edx	#,
	movl	$6350, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1299:
	.loc 1 6355 0
	movq	-64(%rbp), %rax	# add_val, tmp139
	movq	(%rax), %rax	# *add_val_21(D), D.24721
	movzwl	(%rax), %eax	# _36->code, D.24717
	cmpw	$48, %ax	#, D.24717
	jne	.L1302	#,
	.loc 1 6356 0
	movq	-64(%rbp), %rax	# add_val, tmp140
	movq	(%rax), %rax	# *add_val_21(D), D.24721
	movq	8(%rax), %rdx	# _38->fld[0].rtx, D.24721
	movq	-64(%rbp), %rax	# add_val, tmp141
	movq	%rdx, (%rax)	# D.24721, *add_val_21(D)
.L1302:
	.loc 1 6357 0
	movq	-72(%rbp), %rax	# mult_val, tmp142
	movq	(%rax), %rax	# *mult_val_20(D), D.24721
	movzwl	(%rax), %eax	# _40->code, D.24717
	cmpw	$48, %ax	#, D.24717
	jne	.L1303	#,
	.loc 1 6358 0
	movq	-72(%rbp), %rax	# mult_val, tmp143
	movq	(%rax), %rax	# *mult_val_20(D), D.24721
	movq	8(%rax), %rdx	# _42->fld[0].rtx, D.24721
	movq	-72(%rbp), %rax	# mult_val, tmp144
	movq	%rdx, (%rax)	# D.24721, *mult_val_20(D)
.L1303:
	.loc 1 6360 0
	cmpl	$0, 16(%rbp)	#, is_addr
	je	.L1304	#,
	.loc 1 6361 0
	movq	24(%rbp), %rax	# pbenefit, tmp145
	movl	(%rax), %ebx	# *pbenefit_9(D), D.24715
	movl	32(%rbp), %edx	# addr_mode, tmp146
	movq	-24(%rbp), %rax	# orig_x, tmp147
	movl	%edx, %esi	# tmp146,
	movq	%rax, %rdi	# tmp147,
	call	address_cost	#
	movl	reg_address_cost(%rip), %edx	# reg_address_cost, reg_address_cost.534
	subl	%edx, %eax	# reg_address_cost.534, D.24715
	leal	(%rbx,%rax), %edx	#, D.24715
	movq	24(%rbp), %rax	# pbenefit, tmp148
	movl	%edx, (%rax)	# D.24715, *pbenefit_9(D)
	jmp	.L1305	#
.L1304:
	.loc 1 6363 0
	movq	24(%rbp), %rax	# pbenefit, tmp149
	movl	(%rax), %ebx	# *pbenefit_9(D), D.24715
	movq	-24(%rbp), %rax	# orig_x, tmp150
	movl	$47, %esi	#,
	movq	%rax, %rdi	# tmp150,
	call	rtx_cost	#
	leal	(%rbx,%rax), %edx	#, D.24715
	movq	24(%rbp), %rax	# pbenefit, tmp151
	movl	%edx, (%rax)	# D.24715, *pbenefit_9(D)
.L1305:
	.loc 1 6368 0
	movl	$1, %eax	#, D.24715
.L1291:
	.loc 1 6369 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE61:
	.size	general_induction_var, .-general_induction_var
	.type	simplify_giv_expr, @function
simplify_giv_expr:
.LFB62:
	.loc 1 6400 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# loop, loop
	movq	%rsi, -112(%rbp)	# x, x
	movq	%rdx, -120(%rbp)	# ext_val, ext_val
	movq	%rcx, -128(%rbp)	# benefit, benefit
	.loc 1 6401 0
	movq	-104(%rbp), %rax	# loop, tmp254
	movq	160(%rax), %rax	# loop_26(D)->aux, D.24723
	addq	$208, %rax	#, tmp255
	movq	%rax, -56(%rbp)	# tmp255, ivs
	.loc 1 6402 0
	movq	-104(%rbp), %rax	# loop, tmp256
	movq	160(%rax), %rax	# loop_26(D)->aux, D.24723
	addq	$184, %rax	#, tmp257
	movq	%rax, -48(%rbp)	# tmp257, regs
	.loc 1 6403 0
	movq	-112(%rbp), %rax	# x, tmp258
	movzbl	2(%rax), %eax	# x_31(D)->mode, D.24724
	movzbl	%al, %eax	# D.24724, tmp259
	movl	%eax, -92(%rbp)	# tmp259, mode
	.loc 1 6409 0
	cmpl	$0, -92(%rbp)	#, mode
	je	.L1307	#,
	.loc 1 6410 0
	movl	-92(%rbp), %eax	# mode, mode.535
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24725
	cmpl	$1, %eax	#, D.24725
	jne	.L1308	#,
	.loc 1 6411 0
	movl	-92(%rbp), %eax	# mode, mode.536
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24726
	cmpw	$64, %ax	#, D.24726
	jbe	.L1307	#,
.L1308:
	.loc 1 6412 0
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1307:
	.loc 1 6414 0
	movq	-112(%rbp), %rax	# x, tmp262
	movzwl	(%rax), %eax	# x_31(D)->code, D.24726
	movzwl	%ax, %eax	# D.24726, D.24727
	subl	$48, %eax	#, tmp263
	cmpl	$74, %eax	#, tmp263
	ja	.L1310	#,
	movl	%eax, %eax	# tmp263, tmp264
	movq	.L1312(,%rax,8), %rax	#, tmp265
	jmp	*%rax	# tmp265
	.section	.rodata
	.align 8
	.align 4
.L1312:
	.quad	.L1311
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1313
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1314
	.quad	.L1315
	.quad	.L1316
	.quad	.L1317
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1318
	.quad	.L1319
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1310
	.quad	.L1320
	.quad	.L1320
	.quad	.L1320
	.text
.L1314:
	.loc 1 6417 0
	movq	-112(%rbp), %rax	# x, tmp266
	movq	8(%rax), %rsi	# x_31(D)->fld[0].rtx, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp267
	movq	-120(%rbp), %rdx	# ext_val, tmp268
	movq	-104(%rbp), %rax	# loop, tmp269
	movq	%rax, %rdi	# tmp269,
	call	simplify_giv_expr	#
	movq	%rax, -88(%rbp)	# tmp270, arg0
	.loc 1 6418 0
	movq	-112(%rbp), %rax	# x, tmp271
	movq	16(%rax), %rsi	# x_31(D)->fld[1].rtx, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp272
	movq	-120(%rbp), %rdx	# ext_val, tmp273
	movq	-104(%rbp), %rax	# loop, tmp274
	movq	%rax, %rdi	# tmp274,
	call	simplify_giv_expr	#
	movq	%rax, -80(%rbp)	# tmp275, arg1
	.loc 1 6419 0
	cmpq	$0, -88(%rbp)	#, arg0
	je	.L1321	#,
	.loc 1 6419 0 is_stmt 0 discriminator 1
	cmpq	$0, -80(%rbp)	#, arg1
	jne	.L1322	#,
.L1321:
	.loc 1 6420 0 is_stmt 1
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1322:
	.loc 1 6423 0
	movq	-88(%rbp), %rax	# arg0, tmp276
	movzwl	(%rax), %eax	# arg0_44->code, D.24726
	cmpw	$48, %ax	#, D.24726
	je	.L1323	#,
	.loc 1 6424 0
	movq	-88(%rbp), %rax	# arg0, tmp277
	movzwl	(%rax), %eax	# arg0_44->code, D.24726
	cmpw	$54, %ax	#, D.24726
	jne	.L1324	#,
.L1323:
	.loc 1 6425 0
	movq	-88(%rbp), %rax	# arg0, tmp278
	movzwl	(%rax), %eax	# arg0_44->code, D.24726
	cmpw	$48, %ax	#, D.24726
	jne	.L1325	#,
	.loc 1 6426 0
	movq	-80(%rbp), %rax	# arg1, tmp279
	movzwl	(%rax), %eax	# arg1_46->code, D.24726
	cmpw	$48, %ax	#, D.24726
	je	.L1324	#,
.L1325:
	.loc 1 6427 0 discriminator 1
	movq	-80(%rbp), %rax	# arg1, tmp280
	movzwl	(%rax), %eax	# arg1_46->code, D.24726
	.loc 1 6425 0 discriminator 1
	cmpw	$54, %ax	#, D.24726
	je	.L1324	#,
	.loc 1 6428 0
	movq	-88(%rbp), %rax	# arg0, tmp281
	movq	%rax, -72(%rbp)	# tmp281, tem
	movq	-80(%rbp), %rax	# arg1, tmp282
	movq	%rax, -88(%rbp)	# tmp282, arg0
	movq	-72(%rbp), %rax	# tem, tmp283
	movq	%rax, -80(%rbp)	# tmp283, arg1
.L1324:
	.loc 1 6431 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24728
	cmpq	-80(%rbp), %rax	# arg1, D.24728
	jne	.L1326	#,
	.loc 1 6432 0
	movq	-88(%rbp), %rax	# arg0, D.24722
	jmp	.L1309	#
.L1326:
	.loc 1 6433 0
	movq	-80(%rbp), %rax	# arg1, tmp284
	movzwl	(%rax), %eax	# arg1_9->code, D.24726
	cmpw	$54, %ax	#, D.24726
	je	.L1327	#,
	.loc 1 6433 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# arg1, tmp285
	movzwl	(%rax), %eax	# arg1_9->code, D.24726
	cmpw	$48, %ax	#, D.24726
	jne	.L1328	#,
.L1327:
	.loc 1 6434 0 is_stmt 1
	movq	-88(%rbp), %rax	# arg0, tmp286
	movzwl	(%rax), %eax	# arg0_3->code, D.24726
	movzwl	%ax, %eax	# D.24726, D.24727
	subl	$48, %eax	#, tmp287
	cmpl	$30, %eax	#, tmp287
	ja	.L1329	#,
	movl	%eax, %eax	# tmp287, tmp288
	movq	.L1331(,%rax,8), %rax	#, tmp289
	jmp	*%rax	# tmp289
	.section	.rodata
	.align 8
	.align 4
.L1331:
	.quad	.L1330
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1330
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1332
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1329
	.quad	.L1333
	.quad	.L1329
	.quad	.L1329
	.quad	.L1332
	.text
.L1330:
	.loc 1 6440 0
	movq	-88(%rbp), %rax	# arg0, tmp290
	movzwl	(%rax), %eax	# arg0_3->code, D.24726
	cmpw	$48, %ax	#, D.24726
	jne	.L1334	#,
	.loc 1 6441 0
	movq	-88(%rbp), %rax	# arg0, tmp291
	movq	8(%rax), %rax	# arg0_3->fld[0].rtx, tmp292
	movq	%rax, -88(%rbp)	# tmp292, arg0
.L1334:
	.loc 1 6442 0
	movq	-80(%rbp), %rax	# arg1, tmp293
	movzwl	(%rax), %eax	# arg1_9->code, D.24726
	cmpw	$48, %ax	#, D.24726
	jne	.L1335	#,
	.loc 1 6443 0
	movq	-80(%rbp), %rax	# arg1, tmp294
	movq	8(%rax), %rax	# arg1_9->fld[0].rtx, tmp295
	movq	%rax, -80(%rbp)	# tmp295, arg1
.L1335:
	.loc 1 6445 0
	movq	-88(%rbp), %rax	# arg0, tmp296
	movzwl	(%rax), %eax	# arg0_4->code, D.24726
	cmpw	$54, %ax	#, D.24726
	jne	.L1336	#,
	.loc 1 6446 0
	movq	-88(%rbp), %rax	# arg0, tmp297
	movq	%rax, -72(%rbp)	# tmp297, tem
	movq	-80(%rbp), %rax	# arg1, tmp298
	movq	%rax, -88(%rbp)	# tmp298, arg0
	movq	-72(%rbp), %rax	# tem, tmp299
	movq	%rax, -80(%rbp)	# tmp299, arg1
.L1336:
	.loc 1 6447 0
	movq	-80(%rbp), %rax	# arg1, tmp300
	movzwl	(%rax), %eax	# arg1_11->code, D.24726
	cmpw	$54, %ax	#, D.24726
	jne	.L1337	#,
	.loc 1 6448 0
	movq	-80(%rbp), %rdx	# arg1, tmp301
	movq	-88(%rbp), %rax	# arg0, tmp302
	movq	%rdx, %rsi	# tmp301,
	movq	%rax, %rdi	# tmp302,
	call	sge_plus_constant	#
	movq	%rax, -72(%rbp)	# tmp303, tem
	jmp	.L1338	#
.L1337:
	.loc 1 6450 0
	movq	-80(%rbp), %rdx	# arg1, tmp304
	movq	-88(%rbp), %rcx	# arg0, tmp305
	movl	-92(%rbp), %eax	# mode, tmp306
	movq	%rcx, %rsi	# tmp305,
	movl	%eax, %edi	# tmp306,
	call	sge_plus	#
	movq	%rax, -72(%rbp)	# tmp307, tem
.L1338:
	.loc 1 6452 0
	movq	-72(%rbp), %rax	# tem, tmp308
	movzwl	(%rax), %eax	# tem_15->code, D.24726
	cmpw	$54, %ax	#, D.24726
	je	.L1339	#,
	.loc 1 6453 0
	movq	-72(%rbp), %rdx	# tem, tmp309
	movl	-92(%rbp), %eax	# mode, tmp310
	movl	%eax, %esi	# tmp310,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -72(%rbp)	# tmp311, tem
.L1339:
	.loc 1 6454 0
	movq	-72(%rbp), %rax	# tem, D.24722
	jmp	.L1309	#
.L1332:
	.loc 1 6459 0
	movq	-80(%rbp), %rcx	# arg1, tmp312
	movq	-88(%rbp), %rdx	# arg0, tmp313
	movl	-92(%rbp), %eax	# mode, tmp314
	movl	%eax, %esi	# tmp314,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1309	#
.L1333:
	.loc 1 6464 0
	movq	-88(%rbp), %rax	# arg0, tmp315
	movq	16(%rax), %rdx	# arg0_3->fld[1].rtx, D.24728
	movq	-80(%rbp), %rcx	# arg1, tmp316
	movl	-92(%rbp), %eax	# mode, tmp317
	movl	%eax, %esi	# tmp317,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rcx	#, D.24728
	movq	-88(%rbp), %rax	# arg0, tmp318
	movq	8(%rax), %rdx	# arg0_3->fld[0].rtx, D.24728
	movl	-92(%rbp), %eax	# mode, tmp319
	movl	%eax, %esi	# tmp319,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	.loc 1 6463 0
	movq	-128(%rbp), %rcx	# benefit, tmp320
	movq	-120(%rbp), %rdx	# ext_val, tmp321
	movq	-104(%rbp), %rax	# loop, tmp322
	movq	%rax, %rdi	# tmp322,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1329:
	.loc 1 6473 0
	movl	$__FUNCTION__.13788, %edx	#,
	movl	$6473, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1328:
	.loc 1 6478 0
	movq	-88(%rbp), %rax	# arg0, tmp323
	movzwl	(%rax), %eax	# arg0_3->code, D.24726
	cmpw	$61, %ax	#, D.24726
	jne	.L1340	#,
	.loc 1 6479 0
	movq	const_int_rtx+520(%rip), %rcx	# const_int_rtx, D.24728
	movq	-88(%rbp), %rdx	# arg0, tmp324
	movl	-92(%rbp), %eax	# mode, tmp325
	movl	%eax, %esi	# tmp325,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -88(%rbp)	# tmp326, arg0
.L1340:
	.loc 1 6480 0
	movq	-80(%rbp), %rax	# arg1, tmp327
	movzwl	(%rax), %eax	# arg1_9->code, D.24726
	cmpw	$61, %ax	#, D.24726
	jne	.L1341	#,
	.loc 1 6481 0
	movq	const_int_rtx+520(%rip), %rcx	# const_int_rtx, D.24728
	movq	-80(%rbp), %rdx	# arg1, tmp328
	movl	-92(%rbp), %eax	# mode, tmp329
	movl	%eax, %esi	# tmp329,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -80(%rbp)	# tmp330, arg1
.L1341:
	.loc 1 6486 0
	movq	-80(%rbp), %rax	# arg1, tmp331
	movzwl	(%rax), %eax	# arg1_12->code, D.24726
	cmpw	$78, %ax	#, D.24726
	jne	.L1342	#,
	.loc 1 6487 0
	movq	-88(%rbp), %rax	# arg0, tmp332
	movq	%rax, -72(%rbp)	# tmp332, tem
	movq	-80(%rbp), %rax	# arg1, tmp333
	movq	%rax, -88(%rbp)	# tmp333, arg0
	movq	-72(%rbp), %rax	# tem, tmp334
	movq	%rax, -80(%rbp)	# tmp334, arg1
.L1342:
	.loc 1 6489 0
	movq	-80(%rbp), %rax	# arg1, tmp335
	movzwl	(%rax), %eax	# arg1_13->code, D.24726
	cmpw	$75, %ax	#, D.24726
	jne	.L1343	#,
	.loc 1 6491 0
	movq	-80(%rbp), %rax	# arg1, tmp336
	movq	16(%rax), %rbx	# arg1_13->fld[1].rtx, D.24728
	movq	-80(%rbp), %rax	# arg1, tmp337
	movq	8(%rax), %rcx	# arg1_13->fld[0].rtx, D.24728
	movq	-88(%rbp), %rdx	# arg0, tmp338
	movl	-92(%rbp), %eax	# mode, tmp339
	movl	%eax, %esi	# tmp339,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.24728
	movl	-92(%rbp), %eax	# mode, tmp340
	movq	%rbx, %rcx	# D.24728,
	movl	%eax, %esi	# tmp340,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	.loc 1 6490 0
	movq	-128(%rbp), %rcx	# benefit, tmp341
	movq	-120(%rbp), %rdx	# ext_val, tmp342
	movq	-104(%rbp), %rax	# loop, tmp343
	movq	%rax, %rdi	# tmp343,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1343:
	.loc 1 6499 0
	movq	-88(%rbp), %rax	# arg0, tmp344
	movzwl	(%rax), %eax	# arg0_7->code, D.24726
	cmpw	$78, %ax	#, D.24726
	jne	.L1344	#,
	.loc 1 6499 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# arg1, tmp345
	movzwl	(%rax), %eax	# arg1_13->code, D.24726
	cmpw	$78, %ax	#, D.24726
	je	.L1345	#,
.L1344:
	.loc 1 6500 0 is_stmt 1
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1345:
	.loc 1 6502 0
	movq	-80(%rbp), %rdx	# arg1, tmp346
	movq	-88(%rbp), %rax	# arg0, tmp347
	movq	%rdx, %rsi	# tmp346,
	movq	%rax, %rdi	# tmp347,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24729
	jne	.L1346	#,
	.loc 1 6503 0
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1346:
	.loc 1 6505 0
	movq	-80(%rbp), %rax	# arg1, tmp348
	movq	16(%rax), %rcx	# arg1_13->fld[1].rtx, D.24728
	movq	-88(%rbp), %rax	# arg0, tmp349
	movq	16(%rax), %rdx	# arg0_7->fld[1].rtx, D.24728
	movl	-92(%rbp), %eax	# mode, tmp350
	movl	%eax, %esi	# tmp350,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rcx	#, D.24728
	movq	-88(%rbp), %rax	# arg0, tmp351
	movq	8(%rax), %rdx	# arg0_7->fld[0].rtx, D.24728
	movl	-92(%rbp), %eax	# mode, tmp352
	movl	%eax, %esi	# tmp352,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp353
	movq	-120(%rbp), %rdx	# ext_val, tmp354
	movq	-104(%rbp), %rax	# loop, tmp355
	movq	%rax, %rdi	# tmp355,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1315:
	.loc 1 6515 0
	movq	const_int_rtx+504(%rip), %rcx	# const_int_rtx, D.24728
	movq	-112(%rbp), %rax	# x, tmp356
	movq	16(%rax), %rdx	# x_31(D)->fld[1].rtx, D.24728
	movl	-92(%rbp), %eax	# mode, tmp357
	movl	%eax, %esi	# tmp357,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rcx	#, D.24728
	movq	-112(%rbp), %rax	# x, tmp358
	movq	8(%rax), %rdx	# x_31(D)->fld[0].rtx, D.24728
	movl	-92(%rbp), %eax	# mode, tmp359
	movl	%eax, %esi	# tmp359,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp360
	movq	-120(%rbp), %rdx	# ext_val, tmp361
	movq	-104(%rbp), %rax	# loop, tmp362
	movq	%rax, %rdi	# tmp362,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1317:
	.loc 1 6524 0
	movq	-112(%rbp), %rax	# x, tmp363
	movq	8(%rax), %rsi	# x_31(D)->fld[0].rtx, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp364
	movq	-120(%rbp), %rdx	# ext_val, tmp365
	movq	-104(%rbp), %rax	# loop, tmp366
	movq	%rax, %rdi	# tmp366,
	call	simplify_giv_expr	#
	movq	%rax, -88(%rbp)	# tmp367, arg0
	.loc 1 6525 0
	movq	-112(%rbp), %rax	# x, tmp368
	movq	16(%rax), %rsi	# x_31(D)->fld[1].rtx, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp369
	movq	-120(%rbp), %rdx	# ext_val, tmp370
	movq	-104(%rbp), %rax	# loop, tmp371
	movq	%rax, %rdi	# tmp371,
	call	simplify_giv_expr	#
	movq	%rax, -80(%rbp)	# tmp372, arg1
	.loc 1 6526 0
	cmpq	$0, -88(%rbp)	#, arg0
	je	.L1347	#,
	.loc 1 6526 0 is_stmt 0 discriminator 1
	cmpq	$0, -80(%rbp)	#, arg1
	jne	.L1348	#,
.L1347:
	.loc 1 6527 0 is_stmt 1
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1348:
	.loc 1 6530 0
	movq	-88(%rbp), %rax	# arg0, tmp373
	movzwl	(%rax), %eax	# arg0_116->code, D.24726
	cmpw	$48, %ax	#, D.24726
	je	.L1349	#,
	.loc 1 6530 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# arg0, tmp374
	movzwl	(%rax), %eax	# arg0_116->code, D.24726
	cmpw	$54, %ax	#, D.24726
	jne	.L1350	#,
.L1349:
	.loc 1 6531 0 is_stmt 1
	movq	-80(%rbp), %rax	# arg1, tmp375
	movzwl	(%rax), %eax	# arg1_118->code, D.24726
	cmpw	$54, %ax	#, D.24726
	je	.L1350	#,
	.loc 1 6532 0
	movq	-88(%rbp), %rax	# arg0, tmp376
	movq	%rax, -72(%rbp)	# tmp376, tem
	movq	-80(%rbp), %rax	# arg1, tmp377
	movq	%rax, -88(%rbp)	# tmp377, arg0
	movq	-72(%rbp), %rax	# tem, tmp378
	movq	%rax, -80(%rbp)	# tmp378, arg1
.L1350:
	.loc 1 6535 0
	movq	-80(%rbp), %rax	# arg1, tmp379
	movzwl	(%rax), %eax	# arg1_14->code, D.24726
	cmpw	$48, %ax	#, D.24726
	je	.L1351	#,
	.loc 1 6535 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# arg1, tmp380
	movzwl	(%rax), %eax	# arg1_14->code, D.24726
	cmpw	$54, %ax	#, D.24726
	je	.L1351	#,
	.loc 1 6536 0 is_stmt 1
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1351:
	.loc 1 6539 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24728
	cmpq	-80(%rbp), %rax	# arg1, D.24728
	jne	.L1352	#,
	.loc 1 6540 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24722
	jmp	.L1309	#
.L1352:
	.loc 1 6542 0
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, D.24728
	cmpq	-80(%rbp), %rax	# arg1, D.24728
	jne	.L1353	#,
	.loc 1 6543 0
	movq	-88(%rbp), %rax	# arg0, D.24722
	jmp	.L1309	#
.L1353:
	.loc 1 6545 0
	movq	-88(%rbp), %rax	# arg0, tmp381
	movzwl	(%rax), %eax	# arg0_8->code, D.24726
	movzwl	%ax, %eax	# D.24726, D.24727
	subl	$48, %eax	#, tmp382
	cmpl	$30, %eax	#, tmp382
	ja	.L1354	#,
	movl	%eax, %eax	# tmp382, tmp383
	movq	.L1356(,%rax,8), %rax	#, tmp384
	jmp	*%rax	# tmp384
	.section	.rodata
	.align 8
	.align 4
.L1356:
	.quad	.L1355
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1357
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1358
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1354
	.quad	.L1359
	.quad	.L1354
	.quad	.L1354
	.quad	.L1360
	.text
.L1358:
	.loc 1 6549 0
	movq	-80(%rbp), %rcx	# arg1, tmp385
	movq	-88(%rbp), %rdx	# arg0, tmp386
	movl	-92(%rbp), %eax	# mode, tmp387
	movl	%eax, %esi	# tmp387,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1309	#
.L1357:
	.loc 1 6553 0
	movq	-88(%rbp), %rax	# arg0, tmp388
	movq	8(%rax), %rdx	# arg0_8->fld[0].rtwint, D.24730
	movq	-80(%rbp), %rax	# arg1, tmp389
	movq	8(%rax), %rax	# arg1_14->fld[0].rtwint, D.24730
	imulq	%rdx, %rax	# D.24730, D.24730
	movq	%rax, %rsi	# D.24730,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	jmp	.L1309	#
.L1355:
	.loc 1 6557 0
	movq	-80(%rbp), %rax	# arg1, tmp390
	movzwl	(%rax), %eax	# arg1_14->code, D.24726
	cmpw	$54, %ax	#, D.24726
	je	.L1361	#,
	.loc 1 6558 0
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1361:
	.loc 1 6560 0
	movq	-88(%rbp), %rax	# arg0, tmp391
	movq	8(%rax), %rax	# arg0_8->fld[0].rtx, tmp392
	movq	%rax, -88(%rbp)	# tmp392, arg0
	.loc 1 6561 0
	movq	-88(%rbp), %rax	# arg0, tmp393
	movzwl	(%rax), %eax	# arg0_141->code, D.24726
	cmpw	$78, %ax	#, D.24726
	jne	.L1362	#,
	.loc 1 6564 0
	movq	-88(%rbp), %rax	# arg0, tmp394
	movq	16(%rax), %rdx	# arg0_141->fld[1].rtx, D.24728
	movq	-80(%rbp), %rcx	# arg1, tmp395
	movl	-92(%rbp), %eax	# mode, tmp396
	movl	%eax, %esi	# tmp396,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rcx	#, D.24728
	movq	-88(%rbp), %rax	# arg0, tmp397
	movq	8(%rax), %rdx	# arg0_141->fld[0].rtx, D.24728
	movl	-92(%rbp), %eax	# mode, tmp398
	movl	%eax, %esi	# tmp398,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp399
	movq	-120(%rbp), %rdx	# ext_val, tmp400
	movq	-104(%rbp), %rax	# loop, tmp401
	movq	%rax, %rdi	# tmp401,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1362:
	.loc 1 6574 0
	movq	-88(%rbp), %rax	# arg0, tmp402
	movzwl	(%rax), %eax	# arg0_141->code, D.24726
	cmpw	$75, %ax	#, D.24726
	jne	.L1363	#,
	.loc 1 6577 0
	movq	-88(%rbp), %rax	# arg0, tmp403
	movq	16(%rax), %rdx	# arg0_141->fld[1].rtx, D.24728
	movq	-80(%rbp), %rcx	# arg1, tmp404
	movl	-92(%rbp), %eax	# mode, tmp405
	movl	%eax, %esi	# tmp405,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rbx	#, D.24728
	movq	-88(%rbp), %rax	# arg0, tmp406
	movq	8(%rax), %rdx	# arg0_141->fld[0].rtx, D.24728
	movq	-80(%rbp), %rcx	# arg1, tmp407
	movl	-92(%rbp), %eax	# mode, tmp408
	movl	%eax, %esi	# tmp408,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.24728
	movl	-92(%rbp), %eax	# mode, tmp409
	movq	%rbx, %rcx	# D.24728,
	movl	%eax, %esi	# tmp409,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp410
	movq	-120(%rbp), %rdx	# ext_val, tmp411
	movq	-104(%rbp), %rax	# loop, tmp412
	movq	%rax, %rdi	# tmp412,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1363:
	.loc 1 6589 0
	movq	-80(%rbp), %rcx	# arg1, tmp413
	movq	-88(%rbp), %rdx	# arg0, tmp414
	movl	-92(%rbp), %eax	# mode, tmp415
	movl	%eax, %esi	# tmp415,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.24728
	movl	-92(%rbp), %eax	# mode, tmp416
	movl	%eax, %esi	# tmp416,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	jmp	.L1309	#
.L1360:
	.loc 1 6593 0
	movq	-88(%rbp), %rax	# arg0, tmp417
	movq	16(%rax), %rdx	# arg0_8->fld[1].rtx, D.24728
	movq	-80(%rbp), %rcx	# arg1, tmp418
	movl	-92(%rbp), %eax	# mode, tmp419
	movl	%eax, %esi	# tmp419,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rcx	#, D.24728
	movq	-88(%rbp), %rax	# arg0, tmp420
	movq	8(%rax), %rdx	# arg0_8->fld[0].rtx, D.24728
	movl	-92(%rbp), %eax	# mode, tmp421
	movl	%eax, %esi	# tmp421,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp422
	movq	-120(%rbp), %rdx	# ext_val, tmp423
	movq	-104(%rbp), %rax	# loop, tmp424
	movq	%rax, %rdi	# tmp424,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1359:
	.loc 1 6603 0
	movq	-88(%rbp), %rax	# arg0, tmp425
	movq	16(%rax), %rdx	# arg0_8->fld[1].rtx, D.24728
	movq	-80(%rbp), %rcx	# arg1, tmp426
	movl	-92(%rbp), %eax	# mode, tmp427
	movl	%eax, %esi	# tmp427,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rbx	#, D.24728
	movq	-88(%rbp), %rax	# arg0, tmp428
	movq	8(%rax), %rdx	# arg0_8->fld[0].rtx, D.24728
	movq	-80(%rbp), %rcx	# arg1, tmp429
	movl	-92(%rbp), %eax	# mode, tmp430
	movl	%eax, %esi	# tmp430,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.24728
	movl	-92(%rbp), %eax	# mode, tmp431
	movq	%rbx, %rcx	# D.24728,
	movl	%eax, %esi	# tmp431,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp432
	movq	-120(%rbp), %rdx	# ext_val, tmp433
	movq	-104(%rbp), %rax	# loop, tmp434
	movq	%rax, %rdi	# tmp434,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1354:
	.loc 1 6614 0
	movl	$__FUNCTION__.13788, %edx	#,
	movl	$6614, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1319:
	.loc 1 6619 0
	movq	-112(%rbp), %rax	# x, tmp435
	movq	16(%rax), %rax	# x_31(D)->fld[1].rtx, D.24728
	movzwl	(%rax), %eax	# _169->code, D.24726
	cmpw	$54, %ax	#, D.24726
	je	.L1364	#,
	.loc 1 6620 0
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1364:
	.loc 1 6624 0
	movq	-112(%rbp), %rax	# x, tmp436
	movq	16(%rax), %rax	# x_31(D)->fld[1].rtx, D.24728
	movq	8(%rax), %rax	# _172->fld[0].rtwint, D.24730
	.loc 1 6623 0
	movl	$1, %edx	#, tmp437
	movl	%eax, %ecx	# D.24729, tmp570
	salq	%cl, %rdx	# tmp570, D.24730
	movq	%rdx, %rax	# D.24730, D.24730
	movq	%rax, %rsi	# D.24730,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.24728
	movq	-112(%rbp), %rax	# x, tmp438
	movq	8(%rax), %rdx	# x_31(D)->fld[0].rtx, D.24728
	movl	-92(%rbp), %eax	# mode, tmp439
	movl	%eax, %esi	# tmp439,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	.loc 1 6622 0
	movq	-128(%rbp), %rcx	# benefit, tmp440
	movq	-120(%rbp), %rdx	# ext_val, tmp441
	movq	-104(%rbp), %rax	# loop, tmp442
	movq	%rax, %rdi	# tmp442,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1316:
	.loc 1 6632 0
	movq	const_int_rtx+504(%rip), %rcx	# const_int_rtx, D.24728
	movq	-112(%rbp), %rax	# x, tmp443
	movq	8(%rax), %rdx	# x_31(D)->fld[0].rtx, D.24728
	movl	-92(%rbp), %eax	# mode, tmp444
	movl	%eax, %esi	# tmp444,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp445
	movq	-120(%rbp), %rdx	# ext_val, tmp446
	movq	-104(%rbp), %rax	# loop, tmp447
	movq	%rax, %rdi	# tmp447,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1318:
	.loc 1 6638 0
	movq	const_int_rtx+520(%rip), %rbx	# const_int_rtx, D.24728
	movq	-112(%rbp), %rax	# x, tmp448
	movq	8(%rax), %rdx	# x_31(D)->fld[0].rtx, D.24728
	movl	-92(%rbp), %eax	# mode, tmp449
	movl	%eax, %esi	# tmp449,
	movl	$77, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdx	#, D.24728
	movl	-92(%rbp), %eax	# mode, tmp450
	movq	%rbx, %rcx	# D.24728,
	movl	%eax, %esi	# tmp450,
	movl	$76, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rsi	#, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp451
	movq	-120(%rbp), %rdx	# ext_val, tmp452
	movq	-104(%rbp), %rax	# loop, tmp453
	movq	%rax, %rdi	# tmp453,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1311:
	.loc 1 6646 0
	movq	-112(%rbp), %rax	# x, D.24722
	jmp	.L1309	#
.L1320:
	.loc 1 6654 0
	movq	-120(%rbp), %rax	# ext_val, tmp454
	movq	(%rax), %rax	# *ext_val_42(D), D.24728
	testq	%rax, %rax	# D.24728
	jne	.L1365	#,
	.loc 1 6656 0
	movq	-112(%rbp), %rax	# x, tmp455
	movq	8(%rax), %rsi	# x_31(D)->fld[0].rtx, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp456
	movq	-120(%rbp), %rdx	# ext_val, tmp457
	movq	-104(%rbp), %rax	# loop, tmp458
	movq	%rax, %rdi	# tmp458,
	call	simplify_giv_expr	#
	movq	%rax, -88(%rbp)	# tmp459, arg0
	.loc 1 6657 0
	cmpq	$0, -88(%rbp)	#, arg0
	je	.L1365	#,
	.loc 1 6657 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# ext_val, tmp460
	movq	(%rax), %rax	# *ext_val_42(D), D.24728
	testq	%rax, %rax	# D.24728
	jne	.L1365	#,
	movq	-88(%rbp), %rax	# arg0, tmp461
	movzwl	(%rax), %eax	# arg0_192->code, D.24726
	cmpw	$61, %ax	#, D.24726
	jne	.L1365	#,
	.loc 1 6659 0 is_stmt 1
	movq	-112(%rbp), %rax	# x, tmp462
	movzwl	(%rax), %eax	# x_31(D)->code, D.24726
	movzwl	%ax, %eax	# D.24726, D.24731
	movq	-88(%rbp), %rdx	# arg0, tmp463
	movl	-92(%rbp), %ecx	# mode, tmp464
	movl	%ecx, %esi	# tmp464,
	movl	%eax, %edi	# D.24731,
	call	gen_rtx_fmt_e	#
	movq	-120(%rbp), %rdx	# ext_val, tmp465
	movq	%rax, (%rdx)	# D.24728, *ext_val_42(D)
	.loc 1 6660 0
	movq	-88(%rbp), %rax	# arg0, D.24722
	jmp	.L1309	#
.L1365:
	.loc 1 6663 0
	jmp	.L1366	#
.L1313:
	.loc 1 6667 0
	movq	-112(%rbp), %rax	# x, tmp466
	movl	8(%rax), %edx	# x_31(D)->fld[0].rtuint, D.24727
	movl	max_reg_before_loop(%rip), %eax	# max_reg_before_loop, max_reg_before_loop.537
	cmpl	%eax, %edx	# max_reg_before_loop.537, D.24727
	jb	.L1367	#,
	.loc 1 6668 0
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1367:
	.loc 1 6671 0
	movq	-56(%rbp), %rax	# ivs, tmp467
	movq	(%rax), %rdx	# ivs_28->regs, D.24732
	movq	-112(%rbp), %rax	# x, tmp468
	movl	8(%rax), %eax	# x_31(D)->fld[0].rtuint, D.24727
	movl	%eax, %eax	# D.24727, D.24733
	salq	$4, %rax	#, D.24733
	addq	%rdx, %rax	# D.24732, D.24732
	movl	(%rax), %eax	# _206->type, D.24734
	cmpl	$1, %eax	#, D.24734
	je	.L1368	#,
	cmpl	$3, %eax	#, D.24734
	je	.L1369	#,
	jmp	.L1366	#
.L1368:
	.loc 1 6674 0
	movq	-112(%rbp), %rax	# x, D.24722
	jmp	.L1309	#
.L1369:
.LBB77:
	.loc 1 6677 0
	movq	-56(%rbp), %rax	# ivs, tmp469
	movq	(%rax), %rdx	# ivs_28->regs, D.24732
	movq	-112(%rbp), %rax	# x, tmp470
	movl	8(%rax), %eax	# x_31(D)->fld[0].rtuint, D.24727
	movl	%eax, %eax	# D.24727, D.24733
	salq	$4, %rax	#, D.24733
	addq	%rdx, %rax	# D.24732, D.24732
	movq	8(%rax), %rax	# _213->iv.info, tmp471
	movq	%rax, -40(%rbp)	# tmp471, v
.LBB78:
	.loc 1 6690 0
	movq	-48(%rbp), %rax	# regs, tmp472
	movq	8(%rax), %rcx	# regs_30->array, D.24735
	movq	-112(%rbp), %rax	# x, tmp473
	movl	8(%rax), %eax	# x_31(D)->fld[0].rtuint, D.24727
	movl	%eax, %edx	# D.24727, D.24733
	movq	%rdx, %rax	# D.24733, tmp474
	addq	%rax, %rax	# tmp474
	addq	%rdx, %rax	# D.24733, tmp474
	salq	$3, %rax	#, tmp475
	addq	%rcx, %rax	# D.24735, D.24735
	movq	8(%rax), %rax	# _219->single_usage, tmp476
	movq	%rax, -32(%rbp)	# tmp476, single_use
	.loc 1 6691 0
	cmpq	$0, -32(%rbp)	#, single_use
	je	.L1370	#,
	.loc 1 6691 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24728
	cmpq	-32(%rbp), %rax	# single_use, D.24728
	je	.L1370	#,
	.loc 1 6692 0 is_stmt 1
	movq	-128(%rbp), %rax	# benefit, tmp477
	movl	(%rax), %edx	# *benefit_43(D), D.24729
	movq	-40(%rbp), %rax	# v, tmp478
	movl	80(%rax), %eax	# v_214->benefit, D.24729
	addl	%eax, %edx	# D.24729, D.24729
	movq	-128(%rbp), %rax	# benefit, tmp479
	movl	%edx, (%rax)	# D.24729, *benefit_43(D)
.L1370:
.LBE78:
	.loc 1 6695 0
	movq	-40(%rbp), %rax	# v, tmp480
	movzbl	100(%rax), %eax	# *v_214, D.24724
	andl	$64, %eax	#, D.24724
	testb	%al, %al	# D.24724
	je	.L1371	#,
	.loc 1 6696 0
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1371:
	.loc 1 6698 0
	movq	-40(%rbp), %rax	# v, tmp481
	movq	72(%rax), %rbx	# v_214->add_val, D.24728
	movq	-40(%rbp), %rax	# v, tmp482
	movq	64(%rax), %rcx	# v_214->mult_val, D.24728
	movq	-40(%rbp), %rax	# v, tmp483
	movq	16(%rax), %rdx	# v_214->src_reg, D.24728
	movl	-92(%rbp), %eax	# mode, tmp484
	movl	%eax, %esi	# tmp484,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.24728
	movl	-92(%rbp), %eax	# mode, tmp485
	movq	%rbx, %rcx	# D.24728,
	movl	%eax, %esi	# tmp485,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -72(%rbp)	# tmp486, tem
	.loc 1 6702 0
	movq	-40(%rbp), %rax	# v, tmp487
	movq	112(%rax), %rax	# v_214->derive_adjustment, D.24728
	testq	%rax, %rax	# D.24728
	je	.L1372	#,
	.loc 1 6703 0
	movq	-40(%rbp), %rax	# v, tmp488
	movq	112(%rax), %rcx	# v_214->derive_adjustment, D.24728
	movq	-72(%rbp), %rdx	# tem, tmp489
	movl	-92(%rbp), %eax	# mode, tmp490
	movl	%eax, %esi	# tmp490,
	movl	$76, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -72(%rbp)	# tmp491, tem
.L1372:
	.loc 1 6704 0
	movq	-128(%rbp), %rcx	# benefit, tmp492
	movq	-120(%rbp), %rdx	# ext_val, tmp493
	movq	-72(%rbp), %rsi	# tem, tmp494
	movq	-104(%rbp), %rax	# loop, tmp495
	movq	%rax, %rdi	# tmp495,
	call	simplify_giv_expr	#
	movq	%rax, -88(%rbp)	# tmp496, arg0
	.loc 1 6705 0
	movq	-120(%rbp), %rax	# ext_val, tmp497
	movq	(%rax), %rax	# *ext_val_42(D), D.24728
	testq	%rax, %rax	# D.24728
	je	.L1373	#,
	.loc 1 6707 0
	movq	-40(%rbp), %rax	# v, tmp498
	movq	120(%rax), %rax	# v_214->ext_dependent, D.24728
	testq	%rax, %rax	# D.24728
	jne	.L1374	#,
	.loc 1 6708 0
	movq	-88(%rbp), %rax	# arg0, D.24722
	jmp	.L1309	#
.L1373:
	.loc 1 6712 0
	movq	-40(%rbp), %rax	# v, tmp499
	movq	120(%rax), %rdx	# v_214->ext_dependent, D.24728
	movq	-120(%rbp), %rax	# ext_val, tmp500
	movq	%rdx, (%rax)	# D.24728, *ext_val_42(D)
	.loc 1 6713 0
	movq	-88(%rbp), %rax	# arg0, D.24722
	jmp	.L1309	#
.L1374:
	.loc 1 6715 0
	movl	$0, %eax	#, D.24722
	jmp	.L1309	#
.L1366:
.LBE77:
	.loc 1 6723 0
	movq	-112(%rbp), %rdx	# x, tmp501
	movq	-104(%rbp), %rax	# loop, tmp502
	movq	%rdx, %rsi	# tmp501,
	movq	%rax, %rdi	# tmp502,
	call	loop_invariant_p	#
	cmpl	$1, %eax	#, D.24729
	jne	.L1375	#,
.LBB79:
	.loc 1 6726 0
	movq	-104(%rbp), %rax	# loop, tmp503
	movq	160(%rax), %rax	# loop_26(D)->aux, D.24723
	addq	$168, %rax	#, tmp504
	movq	%rax, -24(%rbp)	# tmp504, movables
	.loc 1 6728 0
	movq	-24(%rbp), %rax	# movables, tmp505
	movq	(%rax), %rax	# movables_245->head, tmp506
	movq	%rax, -64(%rbp)	# tmp506, m
	jmp	.L1376	#
.L1391:
	.loc 1 6729 0
	movq	-64(%rbp), %rax	# m, tmp507
	movq	16(%rax), %rdx	# m_21->set_dest, D.24728
	movq	-112(%rbp), %rax	# x, tmp508
	movq	%rdx, %rsi	# D.24728,
	movq	%rax, %rdi	# tmp508,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24729
	je	.L1377	#,
	.loc 1 6735 0
	movq	-64(%rbp), %rax	# m, tmp509
	movq	56(%rax), %rax	# m_21->match, D.24736
	testq	%rax, %rax	# D.24736
	je	.L1378	#,
	.loc 1 6736 0
	movq	-64(%rbp), %rax	# m, tmp510
	movq	56(%rax), %rax	# m_21->match, D.24736
	movq	16(%rax), %rsi	# _250->set_dest, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp511
	movq	-120(%rbp), %rdx	# ext_val, tmp512
	movq	-104(%rbp), %rax	# loop, tmp513
	movq	%rax, %rdi	# tmp513,
	call	simplify_giv_expr	#
	jmp	.L1309	#
.L1378:
	.loc 1 6743 0
	movq	-64(%rbp), %rax	# m, tmp514
	movl	32(%rax), %eax	# m_21->consec, D.24729
	testl	%eax, %eax	# D.24729
	je	.L1379	#,
.LBB80:
	.loc 1 6745 0
	movq	-64(%rbp), %rax	# m, tmp515
	movl	32(%rax), %eax	# m_21->consec, tmp516
	movl	%eax, -96(%rbp)	# tmp516, i
	.loc 1 6746 0
	movq	-64(%rbp), %rax	# m, tmp517
	movq	(%rax), %rax	# m_21->insn, tmp518
	movq	%rax, -72(%rbp)	# tmp518, tem
.L1380:
	.loc 1 6749 0 discriminator 1
	movq	-72(%rbp), %rax	# tem, tmp519
	movq	24(%rax), %rax	# tem_18->fld[2].rtx, tmp520
	movq	%rax, -72(%rbp)	# tmp520, tem
	.loc 1 6751 0 discriminator 1
	subl	$1, -96(%rbp)	#, i
	cmpl	$0, -96(%rbp)	#, i
	jg	.L1380	#,
	.loc 1 6753 0
	movq	-72(%rbp), %rax	# tem, tmp521
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp521,
	call	find_reg_note	#
	movq	%rax, -72(%rbp)	# tmp522, tem
	.loc 1 6754 0
	cmpq	$0, -72(%rbp)	#, tem
	je	.L1381	#,
	.loc 1 6755 0
	movq	-72(%rbp), %rax	# tem, tmp523
	movq	8(%rax), %rax	# tem_258->fld[0].rtx, tmp524
	movq	%rax, -72(%rbp)	# tmp524, tem
.LBE80:
	jmp	.L1382	#
.L1381:
	jmp	.L1382	#
.L1379:
	.loc 1 6759 0
	movq	-64(%rbp), %rax	# m, tmp525
	movq	(%rax), %rax	# m_21->insn, D.24728
	movzwl	(%rax), %eax	# _260->code, D.24726
	movzwl	%ax, %eax	# D.24726, D.24729
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24737
	cmpb	$105, %al	#, D.24737
	jne	.L1383	#,
	.loc 1 6759 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# m, tmp527
	movq	(%rax), %rax	# m_21->insn, D.24728
	movq	32(%rax), %rax	# _264->fld[3].rtx, D.24728
	movzwl	(%rax), %eax	# _265->code, D.24726
	cmpw	$47, %ax	#, D.24726
	jne	.L1384	#,
	.loc 1 6759 0 discriminator 3
	movq	-64(%rbp), %rax	# m, tmp528
	movq	(%rax), %rax	# m_21->insn, D.24728
	movq	32(%rax), %rax	# _267->fld[3].rtx, iftmp.539
	jmp	.L1386	#
.L1384:
	.loc 1 6759 0 discriminator 4
	movq	-64(%rbp), %rax	# m, tmp529
	movq	(%rax), %rax	# m_21->insn, D.24728
	movq	32(%rax), %rdx	# _269->fld[3].rtx, D.24728
	movq	-64(%rbp), %rax	# m, tmp530
	movq	(%rax), %rax	# m_21->insn, D.24728
	movq	%rdx, %rsi	# D.24728,
	movq	%rax, %rdi	# D.24728,
	call	single_set_2	#
	jmp	.L1386	#
.L1383:
	.loc 1 6759 0 discriminator 2
	movl	$0, %eax	#, iftmp.538
.L1386:
	.loc 1 6759 0 discriminator 5
	movq	%rax, -72(%rbp)	# iftmp.538, tem
	.loc 1 6760 0 is_stmt 1 discriminator 5
	cmpq	$0, -72(%rbp)	#, tem
	je	.L1382	#,
	.loc 1 6761 0
	movq	-72(%rbp), %rax	# tem, tmp531
	movq	16(%rax), %rax	# tem_275->fld[1].rtx, tmp532
	movq	%rax, -72(%rbp)	# tmp532, tem
.L1382:
	.loc 1 6764 0
	cmpq	$0, -72(%rbp)	#, tem
	je	.L1387	#,
	.loc 1 6769 0
	movq	-72(%rbp), %rax	# tem, tmp533
	movzwl	(%rax), %eax	# tem_20->code, D.24726
	cmpw	$75, %ax	#, D.24726
	je	.L1388	#,
	.loc 1 6770 0
	movq	-72(%rbp), %rax	# tem, tmp534
	movzwl	(%rax), %eax	# tem_20->code, D.24726
	cmpw	$78, %ax	#, D.24726
	je	.L1388	#,
	.loc 1 6771 0
	movq	-72(%rbp), %rax	# tem, tmp535
	movzwl	(%rax), %eax	# tem_20->code, D.24726
	cmpw	$87, %ax	#, D.24726
	je	.L1388	#,
	.loc 1 6772 0
	movq	-72(%rbp), %rax	# tem, tmp536
	movzwl	(%rax), %eax	# tem_20->code, D.24726
	cmpw	$54, %ax	#, D.24726
	je	.L1388	#,
	.loc 1 6773 0
	movq	-72(%rbp), %rax	# tem, tmp537
	movzwl	(%rax), %eax	# tem_20->code, D.24726
	cmpw	$68, %ax	#, D.24726
	jne	.L1389	#,
.L1388:
	.loc 1 6775 0
	movq	-128(%rbp), %rcx	# benefit, tmp538
	movq	-120(%rbp), %rdx	# ext_val, tmp539
	movq	-72(%rbp), %rsi	# tem, tmp540
	movq	-104(%rbp), %rax	# loop, tmp541
	movq	%rax, %rdi	# tmp541,
	call	simplify_giv_expr	#
	movq	%rax, -72(%rbp)	# tmp542, tem
	.loc 1 6777 0
	cmpq	$0, -72(%rbp)	#, tem
	je	.L1390	#,
	.loc 1 6778 0
	movq	-72(%rbp), %rax	# tem, D.24722
	jmp	.L1309	#
.L1390:
	.loc 1 6777 0 discriminator 1
	jmp	.L1387	#
.L1389:
	.loc 1 6780 0
	movq	-72(%rbp), %rax	# tem, tmp543
	movzwl	(%rax), %eax	# tem_20->code, D.24726
	cmpw	$58, %ax	#, D.24726
	jne	.L1387	#,
	.loc 1 6781 0
	movq	-72(%rbp), %rax	# tem, tmp544
	movq	8(%rax), %rax	# tem_20->fld[0].rtx, D.24728
	movzwl	(%rax), %eax	# _283->code, D.24726
	cmpw	$75, %ax	#, D.24726
	jne	.L1387	#,
	.loc 1 6782 0
	movq	-72(%rbp), %rax	# tem, tmp545
	movq	8(%rax), %rax	# tem_20->fld[0].rtx, D.24728
	movq	8(%rax), %rax	# _285->fld[0].rtx, D.24728
	movzwl	(%rax), %eax	# _286->code, D.24726
	cmpw	$68, %ax	#, D.24726
	jne	.L1387	#,
	.loc 1 6783 0
	movq	-72(%rbp), %rax	# tem, tmp546
	movq	8(%rax), %rax	# tem_20->fld[0].rtx, D.24728
	movq	16(%rax), %rax	# _288->fld[1].rtx, D.24728
	movzwl	(%rax), %eax	# _289->code, D.24726
	cmpw	$54, %ax	#, D.24726
	jne	.L1387	#,
	.loc 1 6785 0
	movq	-72(%rbp), %rax	# tem, tmp547
	movq	8(%rax), %rsi	# tem_20->fld[0].rtx, D.24728
	movq	-128(%rbp), %rcx	# benefit, tmp548
	movq	-120(%rbp), %rdx	# ext_val, tmp549
	movq	-104(%rbp), %rax	# loop, tmp550
	movq	%rax, %rdi	# tmp550,
	call	simplify_giv_expr	#
	movq	%rax, -72(%rbp)	# tmp551, tem
	.loc 1 6787 0
	cmpq	$0, -72(%rbp)	#, tem
	je	.L1387	#,
	.loc 1 6788 0
	movq	-72(%rbp), %rax	# tem, D.24722
	jmp	.L1309	#
.L1387:
	.loc 1 6791 0
	jmp	.L1375	#
.L1377:
	.loc 1 6728 0
	movq	-64(%rbp), %rax	# m, tmp552
	movq	72(%rax), %rax	# m_21->next, tmp553
	movq	%rax, -64(%rbp)	# tmp553, m
.L1376:
	.loc 1 6728 0 is_stmt 0 discriminator 1
	cmpq	$0, -64(%rbp)	#, m
	jne	.L1391	#,
.L1375:
.LBE79:
	.loc 1 6794 0 is_stmt 1
	nop
.L1310:
	.loc 1 6801 0
	movq	-112(%rbp), %rax	# x, tmp554
	movzwl	(%rax), %eax	# x_31(D)->code, D.24726
	cmpw	$48, %ax	#, D.24726
	jne	.L1392	#,
	.loc 1 6802 0
	movq	-112(%rbp), %rax	# x, tmp555
	movq	8(%rax), %rax	# x_31(D)->fld[0].rtx, tmp556
	movq	%rax, -112(%rbp)	# tmp556, x
.L1392:
	.loc 1 6804 0
	movq	-112(%rbp), %rdx	# x, tmp557
	movq	-104(%rbp), %rax	# loop, tmp558
	movq	%rdx, %rsi	# tmp557,
	movq	%rax, %rdi	# tmp558,
	call	loop_invariant_p	#
	cmpl	$1, %eax	#, D.24729
	jne	.L1393	#,
	.loc 1 6806 0
	movq	-112(%rbp), %rax	# x, tmp559
	movzwl	(%rax), %eax	# x_1->code, D.24726
	cmpw	$54, %ax	#, D.24726
	jne	.L1394	#,
	.loc 1 6807 0
	movq	-112(%rbp), %rax	# x, D.24722
	jmp	.L1309	#
.L1394:
	.loc 1 6808 0
	movq	-112(%rbp), %rax	# x, tmp560
	movzwl	(%rax), %eax	# x_1->code, D.24726
	cmpw	$58, %ax	#, D.24726
	jne	.L1395	#,
	.loc 1 6809 0
	movq	-112(%rbp), %rax	# x, tmp561
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.24728
	movzwl	(%rax), %eax	# _303->code, D.24726
	cmpw	$75, %ax	#, D.24726
	jne	.L1395	#,
	.loc 1 6810 0
	movq	-112(%rbp), %rax	# x, tmp562
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.24728
	movq	8(%rax), %rax	# _305->fld[0].rtx, D.24728
	movzwl	(%rax), %eax	# _306->code, D.24726
	cmpw	$68, %ax	#, D.24726
	jne	.L1395	#,
	.loc 1 6811 0
	movq	-112(%rbp), %rax	# x, tmp563
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.24728
	movq	16(%rax), %rax	# _308->fld[1].rtx, D.24728
	movzwl	(%rax), %eax	# _309->code, D.24726
	cmpw	$54, %ax	#, D.24726
	jne	.L1395	#,
	.loc 1 6812 0
	movq	-112(%rbp), %rax	# x, tmp564
	movq	8(%rax), %rax	# x_1->fld[0].rtx, tmp565
	movq	%rax, -112(%rbp)	# tmp565, x
.L1395:
	.loc 1 6813 0
	movq	-112(%rbp), %rdx	# x, tmp566
	movl	-92(%rbp), %eax	# mode, tmp567
	movl	%eax, %esi	# tmp567,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	jmp	.L1309	#
.L1393:
	.loc 1 6816 0
	movl	$0, %eax	#, D.24722
.L1309:
	.loc 1 6818 0
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE62:
	.size	simplify_giv_expr, .-simplify_giv_expr
	.type	sge_plus_constant, @function
sge_plus_constant:
.LFB63:
	.loc 1 6826 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# x, x
	movq	%rsi, -32(%rbp)	# c, c
	.loc 1 6827 0
	movq	-24(%rbp), %rax	# x, tmp92
	movzwl	(%rax), %eax	# x_2(D)->code, D.24739
	cmpw	$54, %ax	#, D.24739
	jne	.L1397	#,
	.loc 1 6828 0
	movq	-24(%rbp), %rax	# x, tmp93
	movq	8(%rax), %rdx	# x_2(D)->fld[0].rtwint, D.24740
	movq	-32(%rbp), %rax	# c, tmp94
	movq	8(%rax), %rax	# c_5(D)->fld[0].rtwint, D.24740
	addq	%rdx, %rax	# D.24740, D.24740
	movq	%rax, %rsi	# D.24740,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	jmp	.L1398	#
.L1397:
	.loc 1 6829 0
	movq	-24(%rbp), %rax	# x, tmp95
	movzwl	(%rax), %eax	# x_2(D)->code, D.24739
	cmpw	$75, %ax	#, D.24739
	je	.L1399	#,
	.loc 1 6830 0
	movq	-24(%rbp), %rax	# x, tmp96
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.24741
	movzbl	%al, %eax	# D.24741, D.24742
	movq	-32(%rbp), %rcx	# c, tmp97
	movq	-24(%rbp), %rdx	# x, tmp98
	movl	%eax, %esi	# D.24742,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1398	#
.L1399:
	.loc 1 6831 0
	movq	-24(%rbp), %rax	# x, tmp99
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.24743
	movzwl	(%rax), %eax	# _13->code, D.24739
	cmpw	$54, %ax	#, D.24739
	jne	.L1400	#,
	.loc 1 6833 0
	movq	-24(%rbp), %rax	# x, tmp100
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.24743
	movq	8(%rax), %rdx	# _15->fld[0].rtwint, D.24740
	movq	-32(%rbp), %rax	# c, tmp101
	movq	8(%rax), %rax	# c_5(D)->fld[0].rtwint, D.24740
	addq	%rdx, %rax	# D.24740, D.24740
	movq	%rax, %rsi	# D.24740,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.24743
	movq	-24(%rbp), %rax	# x, tmp102
	movq	8(%rax), %rdx	# x_2(D)->fld[0].rtx, D.24743
	movq	-24(%rbp), %rax	# x, tmp103
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.24741
	movzbl	%al, %eax	# D.24741, D.24742
	movl	%eax, %esi	# D.24742,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1398	#
.L1400:
	.loc 1 6836 0
	movq	-24(%rbp), %rax	# x, tmp104
	movq	8(%rax), %rax	# x_2(D)->fld[0].rtx, D.24743
	movzwl	(%rax), %eax	# _24->code, D.24739
	cmpw	$75, %ax	#, D.24739
	je	.L1401	#,
	.loc 1 6837 0
	movq	-24(%rbp), %rax	# x, tmp105
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.24743
	movzwl	(%rax), %eax	# _26->code, D.24739
	cmpw	$75, %ax	#, D.24739
	je	.L1402	#,
.L1401:
	.loc 1 6839 0
	movq	-24(%rbp), %rax	# x, tmp106
	movq	16(%rax), %rbx	# x_2(D)->fld[1].rtx, D.24743
	movq	-24(%rbp), %rax	# x, tmp107
	movq	8(%rax), %rax	# x_2(D)->fld[0].rtx, D.24743
	movq	-32(%rbp), %rdx	# c, tmp108
	movq	%rdx, %rsi	# tmp108,
	movq	%rax, %rdi	# D.24743,
	call	sge_plus_constant	#
	movq	%rax, %rdx	#, D.24743
	movq	-24(%rbp), %rax	# x, tmp109
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.24741
	movzbl	%al, %eax	# D.24741, D.24742
	movq	%rbx, %rcx	# D.24743,
	movl	%eax, %esi	# D.24742,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1398	#
.L1402:
	.loc 1 6844 0
	movq	-24(%rbp), %rax	# x, tmp110
	movq	8(%rax), %rbx	# x_2(D)->fld[0].rtx, D.24743
	movq	-24(%rbp), %rax	# x, tmp111
	movq	16(%rax), %rax	# x_2(D)->fld[1].rtx, D.24743
	movq	-32(%rbp), %rdx	# c, tmp112
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# D.24743,
	call	sge_plus_constant	#
	movq	%rax, %rdx	#, D.24743
	movq	-24(%rbp), %rax	# x, tmp113
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.24741
	movzbl	%al, %eax	# D.24741, D.24742
	movq	%rbx, %rcx	# D.24743,
	movl	%eax, %esi	# D.24742,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
.L1398:
	.loc 1 6847 0
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE63:
	.size	sge_plus_constant, .-sge_plus_constant
	.type	sge_plus, @function
sge_plus:
.LFB64:
	.loc 1 6853 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movl	%edi, -20(%rbp)	# mode, mode
	movq	%rsi, -32(%rbp)	# x, x
	movq	%rdx, -40(%rbp)	# y, y
	.loc 1 6854 0
	jmp	.L1404	#
.L1407:
.LBB81:
	.loc 1 6856 0
	movq	-40(%rbp), %rax	# y, tmp64
	movq	8(%rax), %rax	# y_4->fld[0].rtx, tmp65
	movq	%rax, -8(%rbp)	# tmp65, a
	.loc 1 6857 0
	movq	-8(%rbp), %rax	# a, tmp66
	movzwl	(%rax), %eax	# a_8->code, D.24744
	cmpw	$54, %ax	#, D.24744
	jne	.L1405	#,
	.loc 1 6858 0
	movq	-8(%rbp), %rdx	# a, tmp67
	movq	-32(%rbp), %rax	# x, tmp68
	movq	%rdx, %rsi	# tmp67,
	movq	%rax, %rdi	# tmp68,
	call	sge_plus_constant	#
	movq	%rax, -32(%rbp)	# tmp69, x
	jmp	.L1406	#
.L1405:
	.loc 1 6860 0
	movq	-8(%rbp), %rcx	# a, tmp70
	movq	-32(%rbp), %rdx	# x, tmp71
	movl	-20(%rbp), %eax	# mode, tmp72
	movl	%eax, %esi	# tmp72,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp73, x
.L1406:
	.loc 1 6861 0
	movq	-40(%rbp), %rax	# y, tmp74
	movq	16(%rax), %rax	# y_4->fld[1].rtx, tmp75
	movq	%rax, -40(%rbp)	# tmp75, y
.L1404:
.LBE81:
	.loc 1 6854 0 discriminator 1
	movq	-40(%rbp), %rax	# y, tmp76
	movzwl	(%rax), %eax	# y_4->code, D.24744
	cmpw	$75, %ax	#, D.24744
	je	.L1407	#,
	.loc 1 6863 0
	movq	-40(%rbp), %rax	# y, tmp77
	movzwl	(%rax), %eax	# y_4->code, D.24744
	cmpw	$54, %ax	#, D.24744
	jne	.L1408	#,
	.loc 1 6864 0
	movq	-40(%rbp), %rdx	# y, tmp78
	movq	-32(%rbp), %rax	# x, tmp79
	movq	%rdx, %rsi	# tmp78,
	movq	%rax, %rdi	# tmp79,
	call	sge_plus_constant	#
	movq	%rax, -32(%rbp)	# tmp80, x
	jmp	.L1409	#
.L1408:
	.loc 1 6866 0
	movq	-40(%rbp), %rcx	# y, tmp81
	movq	-32(%rbp), %rdx	# x, tmp82
	movl	-20(%rbp), %eax	# mode, tmp83
	movl	%eax, %esi	# tmp83,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp84, x
.L1409:
	.loc 1 6867 0
	movq	-32(%rbp), %rax	# x, D.24745
	.loc 1 6868 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE64:
	.size	sge_plus, .-sge_plus
	.type	consec_sets_giv, @function
consec_sets_giv:
.LFB65:
	.loc 1 6901 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$152, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# loop, loop
	movl	%esi, -92(%rbp)	# first_benefit, first_benefit
	movq	%rdx, -104(%rbp)	# p, p
	movq	%rcx, -112(%rbp)	# src_reg, src_reg
	movq	%r8, -120(%rbp)	# dest_reg, dest_reg
	movq	%r9, -128(%rbp)	# add_val, add_val
	.loc 1 6902 0
	movq	-88(%rbp), %rax	# loop, tmp150
	movq	160(%rax), %rax	# loop_9(D)->aux, D.24747
	addq	$208, %rax	#, tmp151
	movq	%rax, -56(%rbp)	# tmp151, ivs
	.loc 1 6903 0
	movq	-88(%rbp), %rax	# loop, tmp152
	movq	160(%rax), %rax	# loop_9(D)->aux, D.24747
	addq	$184, %rax	#, tmp153
	movq	%rax, -48(%rbp)	# tmp153, regs
	.loc 1 6919 0
	movq	-56(%rbp), %rax	# ivs, tmp154
	movq	(%rax), %rdx	# ivs_11->regs, D.24748
	movq	-120(%rbp), %rax	# dest_reg, tmp155
	movl	8(%rax), %eax	# dest_reg_15(D)->fld[0].rtuint, D.24749
	movl	%eax, %eax	# D.24749, D.24750
	salq	$4, %rax	#, D.24750
	addq	%rdx, %rax	# D.24748, D.24748
	movl	(%rax), %eax	# _19->type, D.24751
	testl	%eax, %eax	# D.24751
	je	.L1412	#,
	.loc 1 6920 0
	movl	$0, %eax	#, D.24746
	jmp	.L1430	#
.L1412:
	.loc 1 6922 0
	movl	$16, %eax	#, tmp252
	subq	$1, %rax	#, tmp156
	addq	$183, %rax	#, tmp157
	movl	$16, %ebx	#, tmp253
	movl	$0, %edx	#, tmp160
	divq	%rbx	# tmp253
	imulq	$16, %rax, %rax	#, tmp159, tmp161
	subq	%rax, %rsp	# tmp161,
	leaq	24(%rsp), %rax	#, tmp162
	addq	$15, %rax	#, tmp163
	shrq	$4, %rax	#, tmp164
	salq	$4, %rax	#, tmp165
	movq	%rax, -40(%rbp)	# tmp165, v
	.loc 1 6923 0
	movq	-112(%rbp), %rdx	# src_reg, src_reg.540
	movq	-40(%rbp), %rax	# v, tmp166
	movq	%rdx, 16(%rax)	# src_reg.540, v_22->src_reg
	.loc 1 6924 0
	movq	16(%rbp), %rax	# mult_val, tmp167
	movq	(%rax), %rdx	# *mult_val_24(D), D.24752
	movq	-40(%rbp), %rax	# v, tmp168
	movq	%rdx, 64(%rax)	# D.24752, v_22->mult_val
	.loc 1 6925 0
	movq	-128(%rbp), %rax	# add_val, tmp169
	movq	(%rax), %rdx	# *add_val_26(D), D.24752
	movq	-40(%rbp), %rax	# v, tmp170
	movq	%rdx, 72(%rax)	# D.24752, v_22->add_val
	.loc 1 6926 0
	movq	-40(%rbp), %rax	# v, tmp171
	movl	-92(%rbp), %edx	# first_benefit, tmp172
	movl	%edx, 80(%rax)	# tmp172, v_22->benefit
	.loc 1 6927 0
	movq	-40(%rbp), %rax	# v, tmp173
	movzbl	100(%rax), %edx	# v_22->cant_derive, tmp176
	andl	$-65, %edx	#, tmp177
	movb	%dl, 100(%rax)	# tmp177, v_22->cant_derive
	.loc 1 6928 0
	movq	-40(%rbp), %rax	# v, tmp178
	movq	$0, 112(%rax)	#, v_22->derive_adjustment
	.loc 1 6929 0
	movq	-40(%rbp), %rax	# v, tmp179
	movq	$0, 120(%rax)	#, v_22->ext_dependent
	.loc 1 6931 0
	movq	-56(%rbp), %rax	# ivs, tmp180
	movq	(%rax), %rdx	# ivs_11->regs, D.24748
	movq	-120(%rbp), %rax	# dest_reg, tmp181
	movl	8(%rax), %eax	# dest_reg_15(D)->fld[0].rtuint, D.24749
	movl	%eax, %eax	# D.24749, D.24750
	salq	$4, %rax	#, D.24750
	addq	%rdx, %rax	# D.24748, D.24748
	movl	$3, (%rax)	#, _33->type
	.loc 1 6932 0
	movq	-56(%rbp), %rax	# ivs, tmp182
	movq	(%rax), %rdx	# ivs_11->regs, D.24748
	movq	-120(%rbp), %rax	# dest_reg, tmp183
	movl	8(%rax), %eax	# dest_reg_15(D)->fld[0].rtuint, D.24749
	movl	%eax, %eax	# D.24749, D.24750
	salq	$4, %rax	#, D.24750
	addq	%rax, %rdx	# D.24750, D.24748
	movq	-40(%rbp), %rax	# v, tmp184
	movq	%rax, 8(%rdx)	# tmp184, _38->iv.info
	.loc 1 6934 0
	movq	-48(%rbp), %rax	# regs, tmp185
	movq	8(%rax), %rcx	# regs_13->array, D.24753
	movq	-120(%rbp), %rax	# dest_reg, tmp186
	movl	8(%rax), %eax	# dest_reg_15(D)->fld[0].rtuint, D.24749
	movl	%eax, %edx	# D.24749, D.24750
	movq	%rdx, %rax	# D.24750, tmp187
	addq	%rax, %rax	# tmp187
	addq	%rdx, %rax	# D.24750, tmp187
	salq	$3, %rax	#, tmp188
	addq	%rcx, %rax	# D.24753, D.24753
	movl	4(%rax), %eax	# _43->n_times_set, D.24746
	subl	$1, %eax	#, tmp189
	movl	%eax, -64(%rbp)	# tmp189, count
	.loc 1 6936 0
	jmp	.L1414	#
.L1429:
	.loc 1 6938 0
	movq	-104(%rbp), %rax	# p, tmp190
	movq	24(%rax), %rax	# p_2->fld[2].rtx, tmp191
	movq	%rax, -104(%rbp)	# tmp191, p
	.loc 1 6939 0
	movq	-104(%rbp), %rax	# p, tmp192
	movzwl	(%rax), %eax	# p_47->code, D.24754
	movzwl	%ax, %eax	# D.24754, tmp193
	movl	%eax, -60(%rbp)	# tmp193, code
	.loc 1 6942 0
	cmpl	$32, -60(%rbp)	#, code
	jne	.L1415	#,
	.loc 1 6942 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# p, tmp194
	movl	$0, %edx	#,
	movl	$7, %esi	#,
	movq	%rax, %rdi	# tmp194,
	call	find_reg_note	#
	movq	%rax, -32(%rbp)	# tmp195, temp
	cmpq	$0, -32(%rbp)	#, temp
	je	.L1415	#,
	.loc 1 6943 0 is_stmt 1
	movq	-32(%rbp), %rax	# temp, tmp196
	movq	8(%rax), %rax	# temp_50->fld[0].rtx, tmp197
	movq	%rax, -104(%rbp)	# tmp197, p
.L1415:
	.loc 1 6945 0
	cmpl	$32, -60(%rbp)	#, code
	jne	.L1416	#,
	.loc 1 6946 0
	movq	-104(%rbp), %rax	# p, tmp198
	movzwl	(%rax), %eax	# p_1->code, D.24754
	movzwl	%ax, %eax	# D.24754, D.24746
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24755
	cmpb	$105, %al	#, D.24755
	jne	.L1417	#,
	.loc 1 6946 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# p, tmp200
	movq	32(%rax), %rax	# p_1->fld[3].rtx, D.24752
	movzwl	(%rax), %eax	# _55->code, D.24754
	cmpw	$47, %ax	#, D.24754
	jne	.L1418	#,
	.loc 1 6946 0 discriminator 3
	movq	-104(%rbp), %rax	# p, tmp201
	movq	32(%rax), %rax	# p_1->fld[3].rtx, iftmp.542
	jmp	.L1420	#
.L1418:
	.loc 1 6946 0 discriminator 4
	movq	-104(%rbp), %rax	# p, tmp202
	movq	32(%rax), %rdx	# p_1->fld[3].rtx, D.24752
	movq	-104(%rbp), %rax	# p, tmp203
	movq	%rdx, %rsi	# D.24752,
	movq	%rax, %rdi	# tmp203,
	call	single_set_2	#
	jmp	.L1420	#
.L1417:
	.loc 1 6946 0 discriminator 2
	movl	$0, %eax	#, iftmp.541
.L1420:
	.loc 1 6946 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.541, set
	cmpq	$0, -24(%rbp)	#, set
	je	.L1416	#,
	.loc 1 6947 0 is_stmt 1
	movq	-24(%rbp), %rax	# set, tmp204
	movq	8(%rax), %rax	# set_62->fld[0].rtx, D.24752
	movzwl	(%rax), %eax	# _63->code, D.24754
	cmpw	$61, %ax	#, D.24754
	jne	.L1416	#,
	.loc 1 6948 0
	movq	-24(%rbp), %rax	# set, tmp205
	movq	8(%rax), %rax	# set_62->fld[0].rtx, D.24752
	cmpq	-120(%rbp), %rax	# dest_reg, D.24752
	jne	.L1416	#,
	.loc 1 6949 0
	movq	-24(%rbp), %rax	# set, tmp206
	movq	16(%rax), %rsi	# set_62->fld[1].rtx, D.24752
	movq	24(%rbp), %r8	# ext_val, tmp207
	movq	-128(%rbp), %rcx	# add_val, tmp208
	leaq	-112(%rbp), %rdx	#, tmp209
	movq	-88(%rbp), %rax	# loop, tmp210
	movl	$0, 16(%rsp)	#,
	leaq	-68(%rbp), %rdi	#, tmp211
	movq	%rdi, 8(%rsp)	# tmp211,
	movl	$0, (%rsp)	#,
	movq	%r8, %r9	# tmp207,
	movq	16(%rbp), %r8	# mult_val,
	movq	%rax, %rdi	# tmp210,
	call	general_induction_var	#
	testl	%eax, %eax	# D.24746
	jne	.L1421	#,
	.loc 1 6953 0
	movq	-104(%rbp), %rax	# p, tmp212
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp212,
	call	find_reg_note	#
	movq	%rax, -32(%rbp)	# tmp213, temp
	cmpq	$0, -32(%rbp)	#, temp
	je	.L1416	#,
	.loc 1 6954 0
	movq	-32(%rbp), %rax	# temp, tmp214
	movq	8(%rax), %rsi	# temp_69->fld[0].rtx, D.24752
	movq	24(%rbp), %r8	# ext_val, tmp215
	movq	-128(%rbp), %rcx	# add_val, tmp216
	leaq	-112(%rbp), %rdx	#, tmp217
	movq	-88(%rbp), %rax	# loop, tmp218
	movl	$0, 16(%rsp)	#,
	leaq	-68(%rbp), %rdi	#, tmp219
	movq	%rdi, 8(%rsp)	# tmp219,
	movl	$0, (%rsp)	#,
	movq	%r8, %r9	# tmp215,
	movq	16(%rbp), %r8	# mult_val,
	movq	%rax, %rdi	# tmp218,
	call	general_induction_var	#
	testl	%eax, %eax	# D.24746
	je	.L1416	#,
.L1421:
	.loc 1 6957 0
	movq	-40(%rbp), %rax	# v, tmp220
	movq	16(%rax), %rdx	# v_22->src_reg, D.24752
	movq	-112(%rbp), %rax	# src_reg, src_reg.543
	cmpq	%rax, %rdx	# src_reg.543, D.24752
	jne	.L1416	#,
	.loc 1 6959 0
	movq	-104(%rbp), %rax	# p, tmp221
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp221,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24752
	je	.L1422	#,
	.loc 1 6960 0
	movq	-104(%rbp), %rax	# p, tmp222
	movq	%rax, %rdi	# tmp222,
	call	libcall_benefit	#
	movl	-68(%rbp), %edx	# benefit, benefit.544
	addl	%edx, %eax	# benefit.544, benefit.545
	movl	%eax, -68(%rbp)	# benefit.545, benefit
.L1422:
	.loc 1 6962 0
	subl	$1, -64(%rbp)	#, count
	.loc 1 6963 0
	movq	16(%rbp), %rax	# mult_val, tmp223
	movq	(%rax), %rdx	# *mult_val_24(D), D.24752
	movq	-40(%rbp), %rax	# v, tmp224
	movq	%rdx, 64(%rax)	# D.24752, v_22->mult_val
	.loc 1 6964 0
	movq	-128(%rbp), %rax	# add_val, tmp225
	movq	(%rax), %rdx	# *add_val_26(D), D.24752
	movq	-40(%rbp), %rax	# v, tmp226
	movq	%rdx, 72(%rax)	# D.24752, v_22->add_val
	.loc 1 6965 0
	movq	-40(%rbp), %rax	# v, tmp227
	movl	80(%rax), %edx	# v_22->benefit, D.24746
	movl	-68(%rbp), %eax	# benefit, benefit.546
	addl	%eax, %edx	# benefit.546, D.24746
	movq	-40(%rbp), %rax	# v, tmp228
	movl	%edx, 80(%rax)	# D.24746, v_22->benefit
	jmp	.L1414	#
.L1416:
	.loc 1 6967 0
	cmpl	$37, -60(%rbp)	#, code
	je	.L1414	#,
	.loc 1 6972 0
	cmpl	$32, -60(%rbp)	#, code
	jne	.L1423	#,
	.loc 1 6973 0
	movq	-104(%rbp), %rax	# p, tmp229
	movzwl	(%rax), %eax	# p_1->code, D.24754
	movzwl	%ax, %eax	# D.24754, D.24746
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24755
	cmpb	$105, %al	#, D.24755
	jne	.L1424	#,
	.loc 1 6973 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# p, tmp231
	movq	32(%rax), %rax	# p_1->fld[3].rtx, D.24752
	movzwl	(%rax), %eax	# _87->code, D.24754
	cmpw	$47, %ax	#, D.24754
	jne	.L1425	#,
	.loc 1 6973 0 discriminator 3
	movq	-104(%rbp), %rax	# p, tmp232
	movq	32(%rax), %rax	# p_1->fld[3].rtx, iftmp.548
	jmp	.L1427	#
.L1425:
	.loc 1 6973 0 discriminator 4
	movq	-104(%rbp), %rax	# p, tmp233
	movq	32(%rax), %rdx	# p_1->fld[3].rtx, D.24752
	movq	-104(%rbp), %rax	# p, tmp234
	movq	%rdx, %rsi	# D.24752,
	movq	%rax, %rdi	# tmp234,
	call	single_set_2	#
	jmp	.L1427	#
.L1424:
	.loc 1 6973 0 discriminator 2
	movl	$0, %eax	#, iftmp.547
.L1427:
	.loc 1 6973 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.547, set
	cmpq	$0, -24(%rbp)	#, set
	je	.L1423	#,
	.loc 1 6974 0 is_stmt 1
	movq	-24(%rbp), %rax	# set, tmp235
	movq	8(%rax), %rax	# set_94->fld[0].rtx, D.24752
	cmpq	-120(%rbp), %rax	# dest_reg, D.24752
	je	.L1423	#,
	.loc 1 6975 0
	movq	-24(%rbp), %rax	# set, tmp236
	movq	16(%rax), %rax	# set_94->fld[1].rtx, D.24752
	movzwl	(%rax), %eax	# _96->code, D.24754
	cmpw	$67, %ax	#, D.24754
	je	.L1428	#,
	.loc 1 6975 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# set, tmp237
	movq	16(%rax), %rax	# set_94->fld[1].rtx, D.24752
	movzwl	(%rax), %eax	# _98->code, D.24754
	cmpw	$68, %ax	#, D.24754
	je	.L1428	#,
	movq	-24(%rbp), %rax	# set, tmp238
	movq	16(%rax), %rax	# set_94->fld[1].rtx, D.24752
	movzwl	(%rax), %eax	# _100->code, D.24754
	cmpw	$54, %ax	#, D.24754
	je	.L1428	#,
	movq	-24(%rbp), %rax	# set, tmp239
	movq	16(%rax), %rax	# set_94->fld[1].rtx, D.24752
	movzwl	(%rax), %eax	# _102->code, D.24754
	cmpw	$55, %ax	#, D.24754
	je	.L1428	#,
	movq	-24(%rbp), %rax	# set, tmp240
	movq	16(%rax), %rax	# set_94->fld[1].rtx, D.24752
	movzwl	(%rax), %eax	# _104->code, D.24754
	cmpw	$58, %ax	#, D.24754
	je	.L1428	#,
	movq	-24(%rbp), %rax	# set, tmp241
	movq	16(%rax), %rax	# set_94->fld[1].rtx, D.24752
	movzwl	(%rax), %eax	# _106->code, D.24754
	cmpw	$134, %ax	#, D.24754
	je	.L1428	#,
	movq	-24(%rbp), %rax	# set, tmp242
	movq	16(%rax), %rax	# set_94->fld[1].rtx, D.24752
	movzwl	(%rax), %eax	# _108->code, D.24754
	cmpw	$56, %ax	#, D.24754
	je	.L1428	#,
	movq	-24(%rbp), %rax	# set, tmp243
	movq	16(%rax), %rax	# set_94->fld[1].rtx, D.24752
	movzwl	(%rax), %eax	# _110->code, D.24754
	cmpw	$140, %ax	#, D.24754
	jne	.L1423	#,
.L1428:
	.loc 1 6976 0 is_stmt 1
	jmp	.L1414	#
.L1423:
	.loc 1 6978 0
	movq	-56(%rbp), %rax	# ivs, tmp244
	movq	(%rax), %rdx	# ivs_11->regs, D.24748
	movq	-120(%rbp), %rax	# dest_reg, tmp245
	movl	8(%rax), %eax	# dest_reg_15(D)->fld[0].rtuint, D.24749
	movl	%eax, %eax	# D.24749, D.24750
	salq	$4, %rax	#, D.24750
	addq	%rdx, %rax	# D.24748, D.24748
	movl	$0, (%rax)	#, _116->type
	.loc 1 6979 0
	movl	$0, %eax	#, D.24746
	jmp	.L1430	#
.L1414:
	.loc 1 6936 0 discriminator 1
	cmpl	$0, -64(%rbp)	#, count
	jg	.L1429	#,
	.loc 1 6983 0
	movq	-56(%rbp), %rax	# ivs, tmp246
	movq	(%rax), %rdx	# ivs_11->regs, D.24748
	movq	-120(%rbp), %rax	# dest_reg, tmp247
	movl	8(%rax), %eax	# dest_reg_15(D)->fld[0].rtuint, D.24749
	movl	%eax, %eax	# D.24749, D.24750
	salq	$4, %rax	#, D.24750
	addq	%rdx, %rax	# D.24748, D.24748
	movl	$0, (%rax)	#, _122->type
	.loc 1 6984 0
	movq	32(%rbp), %rax	# last_consec_insn, tmp248
	movq	-104(%rbp), %rdx	# p, tmp249
	movq	%rdx, (%rax)	# tmp249, *last_consec_insn_123(D)
	.loc 1 6985 0
	movq	-40(%rbp), %rax	# v, tmp250
	movl	80(%rax), %eax	# v_22->benefit, D.24746
.L1430:
	.loc 1 6986 0
	movq	-8(%rbp), %rbx	#,
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE65:
	.size	consec_sets_giv, .-consec_sets_giv
	.type	express_from_1, @function
express_from_1:
.LFB66:
	.loc 1 7008 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$112, %rsp	#,
	movq	%rdi, -88(%rbp)	# a, a
	movq	%rsi, -96(%rbp)	# b, b
	movq	%rdx, -104(%rbp)	# mult, mult
	.loc 1 7011 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24757
	cmpq	-104(%rbp), %rax	# mult, D.24757
	jne	.L1432	#,
	.loc 1 7012 0
	movq	-96(%rbp), %rax	# b, D.24756
	jmp	.L1433	#
.L1432:
	.loc 1 7019 0
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, D.24757
	cmpq	-104(%rbp), %rax	# mult, D.24757
	je	.L1434	#,
	.loc 1 7019 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# a, tmp105
	movzwl	(%rax), %eax	# a_15(D)->code, D.24758
	cmpw	$54, %ax	#, D.24758
	je	.L1434	#,
	.loc 1 7020 0 is_stmt 1
	movl	$0, %eax	#, D.24756
	jmp	.L1433	#
.L1434:
	.loc 1 7028 0
	jmp	.L1435	#
.L1443:
.LBB82:
	.loc 1 7032 0
	movq	-88(%rbp), %rax	# a, tmp106
	movq	8(%rax), %rax	# a_1->fld[0].rtx, tmp107
	movq	%rax, -56(%rbp)	# tmp107, ra
	movq	-88(%rbp), %rax	# a, tmp108
	movq	16(%rax), %rax	# a_1->fld[1].rtx, tmp109
	movq	%rax, -40(%rbp)	# tmp109, oa
	.loc 1 7033 0
	movq	-56(%rbp), %rax	# ra, tmp110
	movzwl	(%rax), %eax	# ra_20->code, D.24758
	cmpw	$75, %ax	#, D.24758
	jne	.L1436	#,
	.loc 1 7034 0
	movq	-56(%rbp), %rax	# ra, tmp111
	movq	%rax, -16(%rbp)	# tmp111, tmp
	movq	-40(%rbp), %rax	# oa, tmp112
	movq	%rax, -56(%rbp)	# tmp112, ra
	movq	-16(%rbp), %rax	# tmp, tmp113
	movq	%rax, -40(%rbp)	# tmp113, oa
.L1436:
	.loc 1 7036 0
	movq	-96(%rbp), %rax	# b, tmp114
	movq	8(%rax), %rax	# b_2->fld[0].rtx, tmp115
	movq	%rax, -48(%rbp)	# tmp115, rb
	movq	-96(%rbp), %rax	# b, tmp116
	movq	16(%rax), %rax	# b_2->fld[1].rtx, tmp117
	movq	%rax, -32(%rbp)	# tmp117, ob
	.loc 1 7037 0
	movq	-48(%rbp), %rax	# rb, tmp118
	movzwl	(%rax), %eax	# rb_26->code, D.24758
	cmpw	$75, %ax	#, D.24758
	jne	.L1437	#,
	.loc 1 7038 0
	movq	-48(%rbp), %rax	# rb, tmp119
	movq	%rax, -16(%rbp)	# tmp119, tmp
	movq	-32(%rbp), %rax	# ob, tmp120
	movq	%rax, -48(%rbp)	# tmp120, rb
	movq	-16(%rbp), %rax	# tmp, tmp121
	movq	%rax, -32(%rbp)	# tmp121, ob
.L1437:
	.loc 1 7040 0
	movq	-48(%rbp), %rdx	# rb, tmp122
	movq	-56(%rbp), %rax	# ra, tmp123
	movq	%rdx, %rsi	# tmp122,
	movq	%rax, %rdi	# tmp123,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24759
	je	.L1438	#,
	.loc 1 7042 0
	movq	-40(%rbp), %rax	# oa, tmp124
	movq	%rax, -88(%rbp)	# tmp124, a
	movq	-32(%rbp), %rax	# ob, tmp125
	movq	%rax, -96(%rbp)	# tmp125, b
	jmp	.L1435	#
.L1438:
	.loc 1 7043 0
	movq	-32(%rbp), %rax	# ob, tmp126
	movzwl	(%rax), %eax	# ob_6->code, D.24758
	cmpw	$75, %ax	#, D.24758
	je	.L1439	#,
	.loc 1 7043 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rdx	# ob, tmp127
	movq	-56(%rbp), %rax	# ra, tmp128
	movq	%rdx, %rsi	# tmp127,
	movq	%rax, %rdi	# tmp128,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24759
	je	.L1439	#,
	.loc 1 7045 0 is_stmt 1
	movq	-40(%rbp), %rax	# oa, tmp129
	movq	%rax, -88(%rbp)	# tmp129, a
	movq	-48(%rbp), %rax	# rb, tmp130
	movq	%rax, -96(%rbp)	# tmp130, b
	jmp	.L1435	#
.L1439:
	.loc 1 7046 0
	movq	-40(%rbp), %rax	# oa, tmp131
	movzwl	(%rax), %eax	# oa_5->code, D.24758
	cmpw	$75, %ax	#, D.24758
	je	.L1440	#,
	.loc 1 7046 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rdx	# rb, tmp132
	movq	-40(%rbp), %rax	# oa, tmp133
	movq	%rdx, %rsi	# tmp132,
	movq	%rax, %rdi	# tmp133,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24759
	je	.L1440	#,
	.loc 1 7048 0 is_stmt 1
	movq	-56(%rbp), %rax	# ra, tmp134
	movq	%rax, -88(%rbp)	# tmp134, a
	movq	-32(%rbp), %rax	# ob, tmp135
	movq	%rax, -96(%rbp)	# tmp135, b
	jmp	.L1435	#
.L1440:
	.loc 1 7053 0
	movq	-104(%rbp), %rdx	# mult, tmp136
	movq	-32(%rbp), %rcx	# ob, tmp137
	movq	-88(%rbp), %rax	# a, tmp138
	movq	%rcx, %rsi	# tmp137,
	movq	%rax, %rdi	# tmp138,
	call	express_from_1	#
	movq	%rax, -32(%rbp)	# tmp139, ob
	.loc 1 7054 0
	cmpq	$0, -32(%rbp)	#, ob
	jne	.L1441	#,
	.loc 1 7055 0
	movl	$0, %eax	#, D.24756
	jmp	.L1433	#
.L1441:
	.loc 1 7056 0
	movq	-96(%rbp), %rax	# b, tmp140
	movzbl	2(%rax), %eax	# b_2->mode, D.24760
	movzbl	%al, %eax	# D.24760, D.24761
	movq	-32(%rbp), %rcx	# ob, tmp141
	movq	-48(%rbp), %rdx	# rb, tmp142
	movl	%eax, %esi	# D.24761,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1433	#
.L1435:
.LBE82:
	.loc 1 7028 0 discriminator 1
	movq	-88(%rbp), %rax	# a, tmp143
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$75, %ax	#, D.24758
	jne	.L1442	#,
	.loc 1 7028 0 is_stmt 0 discriminator 2
	movq	-96(%rbp), %rax	# b, tmp144
	movzwl	(%rax), %eax	# b_2->code, D.24758
	cmpw	$75, %ax	#, D.24758
	je	.L1443	#,
.L1442:
	.loc 1 7063 0 is_stmt 1
	movq	-88(%rbp), %rax	# a, tmp145
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$75, %ax	#, D.24758
	jne	.L1444	#,
.LBB83:
	.loc 1 7067 0
	movq	-88(%rbp), %rax	# a, tmp146
	movq	8(%rax), %rax	# a_1->fld[0].rtx, tmp147
	movq	%rax, -8(%rbp)	# tmp147, ra
	movq	-88(%rbp), %rax	# a, tmp148
	movq	16(%rax), %rax	# a_1->fld[1].rtx, tmp149
	movq	%rax, -24(%rbp)	# tmp149, oa
	.loc 1 7068 0
	movq	-96(%rbp), %rdx	# b, tmp150
	movq	-24(%rbp), %rax	# oa, tmp151
	movq	%rdx, %rsi	# tmp150,
	movq	%rax, %rdi	# tmp151,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24759
	je	.L1445	#,
	.loc 1 7069 0
	movq	-8(%rbp), %rax	# ra, tmp152
	movq	%rax, -24(%rbp)	# tmp152, oa
	jmp	.L1446	#
.L1445:
	.loc 1 7070 0
	movq	-96(%rbp), %rdx	# b, tmp153
	movq	-8(%rbp), %rax	# ra, tmp154
	movq	%rdx, %rsi	# tmp153,
	movq	%rax, %rdi	# tmp154,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24759
	jne	.L1446	#,
	.loc 1 7071 0
	movl	$0, %eax	#, D.24756
	jmp	.L1433	#
.L1446:
	.loc 1 7073 0
	movq	-24(%rbp), %rax	# oa, tmp155
	movzwl	(%rax), %eax	# oa_7->code, D.24758
	cmpw	$54, %ax	#, D.24758
	je	.L1447	#,
	.loc 1 7074 0
	movl	$0, %eax	#, D.24756
	jmp	.L1433	#
.L1447:
	.loc 1 7076 0
	movq	-24(%rbp), %rax	# oa, tmp156
	movq	8(%rax), %rax	# oa_7->fld[0].rtwint, D.24762
	negq	%rax	# D.24762
	movq	%rax, %rdx	# D.24762, D.24762
	movq	-104(%rbp), %rax	# mult, tmp157
	movq	8(%rax), %rax	# mult_11(D)->fld[0].rtwint, D.24762
	imulq	%rdx, %rax	# D.24762, D.24762
	movq	%rax, %rsi	# D.24762,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	jmp	.L1433	#
.L1444:
.LBE83:
	.loc 1 7078 0
	movq	-88(%rbp), %rax	# a, tmp158
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$54, %ax	#, D.24758
	jne	.L1448	#,
	.loc 1 7080 0
	movq	-88(%rbp), %rax	# a, tmp159
	movq	8(%rax), %rax	# a_1->fld[0].rtwint, D.24762
	negq	%rax	# D.24762
	movq	%rax, %rdx	# D.24762, D.24762
	movq	-104(%rbp), %rax	# mult, tmp160
	movq	8(%rax), %rax	# mult_11(D)->fld[0].rtwint, D.24762
	imulq	%rax, %rdx	# D.24762, D.24762
	movq	-96(%rbp), %rax	# b, tmp161
	movq	%rdx, %rsi	# D.24762,
	movq	%rax, %rdi	# tmp161,
	call	plus_constant_wide	#
	jmp	.L1433	#
.L1448:
	.loc 1 7082 0
	movq	-88(%rbp), %rax	# a, tmp162
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$67, %ax	#, D.24758
	je	.L1449	#,
	.loc 1 7082 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# a, tmp163
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$68, %ax	#, D.24758
	je	.L1449	#,
	movq	-88(%rbp), %rax	# a, tmp164
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$54, %ax	#, D.24758
	je	.L1449	#,
	movq	-88(%rbp), %rax	# a, tmp165
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$55, %ax	#, D.24758
	je	.L1449	#,
	movq	-88(%rbp), %rax	# a, tmp166
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$58, %ax	#, D.24758
	je	.L1449	#,
	movq	-88(%rbp), %rax	# a, tmp167
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$134, %ax	#, D.24758
	je	.L1449	#,
	movq	-88(%rbp), %rax	# a, tmp168
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$56, %ax	#, D.24758
	je	.L1449	#,
	movq	-88(%rbp), %rax	# a, tmp169
	movzwl	(%rax), %eax	# a_1->code, D.24758
	cmpw	$140, %ax	#, D.24758
	jne	.L1450	#,
.L1449:
.LBB84:
	.loc 1 7084 0 is_stmt 1
	movq	-88(%rbp), %rax	# a, tmp170
	movzbl	2(%rax), %eax	# a_1->mode, D.24760
	movzbl	%al, %eax	# D.24760, tmp171
	movl	%eax, -68(%rbp)	# tmp171, mode_a
	.loc 1 7085 0
	movq	-96(%rbp), %rax	# b, tmp172
	movzbl	2(%rax), %eax	# b_2->mode, D.24760
	movzbl	%al, %eax	# D.24760, tmp173
	movl	%eax, -64(%rbp)	# tmp173, mode_b
	.loc 1 7086 0
	cmpl	$0, -64(%rbp)	#, mode_b
	jne	.L1451	#,
	.loc 1 7086 0 is_stmt 0 discriminator 1
	movl	-68(%rbp), %eax	# mode_a, iftmp.549
	jmp	.L1452	#
.L1451:
	.loc 1 7086 0 discriminator 2
	movl	-64(%rbp), %eax	# mode_b, iftmp.549
.L1452:
	.loc 1 7086 0 discriminator 3
	movl	%eax, -60(%rbp)	# iftmp.549, mode
	.loc 1 7087 0 is_stmt 1 discriminator 3
	movq	-88(%rbp), %rcx	# a, tmp174
	movq	-96(%rbp), %rdx	# b, tmp175
	movl	-60(%rbp), %eax	# mode, tmp176
	movl	%eax, %esi	# tmp176,
	movl	$76, %edi	#,
	call	simplify_gen_binary	#
	jmp	.L1433	#
.L1450:
.LBE84:
	.loc 1 7089 0
	movq	-96(%rbp), %rax	# b, tmp177
	movzwl	(%rax), %eax	# b_2->code, D.24758
	cmpw	$75, %ax	#, D.24758
	jne	.L1453	#,
	.loc 1 7091 0
	movq	-96(%rbp), %rax	# b, tmp178
	movq	8(%rax), %rdx	# b_2->fld[0].rtx, D.24757
	movq	-88(%rbp), %rax	# a, tmp179
	movq	%rdx, %rsi	# D.24757,
	movq	%rax, %rdi	# tmp179,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24759
	je	.L1454	#,
	.loc 1 7092 0
	movq	-96(%rbp), %rax	# b, tmp180
	movq	16(%rax), %rax	# b_2->fld[1].rtx, D.24756
	jmp	.L1433	#
.L1454:
	.loc 1 7093 0
	movq	-96(%rbp), %rax	# b, tmp181
	movq	16(%rax), %rdx	# b_2->fld[1].rtx, D.24757
	movq	-88(%rbp), %rax	# a, tmp182
	movq	%rdx, %rsi	# D.24757,
	movq	%rax, %rdi	# tmp182,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24759
	je	.L1455	#,
	.loc 1 7094 0
	movq	-96(%rbp), %rax	# b, tmp183
	movq	8(%rax), %rax	# b_2->fld[0].rtx, D.24756
	jmp	.L1433	#
.L1455:
	.loc 1 7096 0
	movl	$0, %eax	#, D.24756
	jmp	.L1433	#
.L1453:
	.loc 1 7098 0
	movq	-96(%rbp), %rdx	# b, tmp184
	movq	-88(%rbp), %rax	# a, tmp185
	movq	%rdx, %rsi	# tmp184,
	movq	%rax, %rdi	# tmp185,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24759
	je	.L1456	#,
	.loc 1 7099 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24756
	jmp	.L1433	#
.L1456:
	.loc 1 7101 0
	movl	$0, %eax	#, D.24756
.L1433:
	.loc 1 7102 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE66:
	.size	express_from_1, .-express_from_1
	.globl	express_from
	.type	express_from, @function
express_from:
.LFB67:
	.loc 1 7107 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# g1, g1
	movq	%rsi, -80(%rbp)	# g2, g2
	.loc 1 7113 0
	movq	-72(%rbp), %rax	# g1, tmp122
	movq	64(%rax), %rax	# g1_8(D)->mult_val, D.24764
	movzwl	(%rax), %eax	# _9->code, D.24765
	cmpw	$54, %ax	#, D.24765
	jne	.L1458	#,
	.loc 1 7114 0
	movq	-80(%rbp), %rax	# g2, tmp123
	movq	64(%rax), %rax	# g2_11(D)->mult_val, D.24764
	movzwl	(%rax), %eax	# _12->code, D.24765
	cmpw	$54, %ax	#, D.24765
	jne	.L1458	#,
	.loc 1 7116 0
	movq	-72(%rbp), %rax	# g1, tmp124
	movq	64(%rax), %rdx	# g1_8(D)->mult_val, D.24764
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24764
	cmpq	%rax, %rdx	# D.24764, D.24764
	je	.L1459	#,
	.loc 1 7117 0
	movq	-80(%rbp), %rax	# g2, tmp125
	movq	64(%rax), %rax	# g2_11(D)->mult_val, D.24764
	movq	8(%rax), %rax	# _16->fld[0].rtwint, D.24766
	movq	-72(%rbp), %rdx	# g1, tmp126
	movq	64(%rdx), %rdx	# g1_8(D)->mult_val, D.24764
	movq	8(%rdx), %rcx	# _18->fld[0].rtwint, D.24766
	cqto
	idivq	%rcx	# D.24766
	movq	%rdx, %rax	# tmp127, D.24766
	testq	%rax, %rax	# D.24766
	je	.L1460	#,
.L1459:
	.loc 1 7118 0
	movl	$0, %eax	#, D.24763
	jmp	.L1461	#
.L1460:
	.loc 1 7119 0
	movq	-80(%rbp), %rax	# g2, tmp129
	movq	64(%rax), %rax	# g2_11(D)->mult_val, D.24764
	movq	8(%rax), %rax	# _21->fld[0].rtwint, D.24766
	movq	-72(%rbp), %rdx	# g1, tmp130
	movq	64(%rdx), %rdx	# g1_8(D)->mult_val, D.24764
	movq	8(%rdx), %rbx	# _23->fld[0].rtwint, D.24766
	cqto
	idivq	%rbx	# D.24766
	movq	%rax, %rsi	# D.24766,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -56(%rbp)	# tmp133, mult
	jmp	.L1462	#
.L1458:
	.loc 1 7121 0
	movq	-80(%rbp), %rax	# g2, tmp134
	movq	64(%rax), %rdx	# g2_11(D)->mult_val, D.24764
	movq	-72(%rbp), %rax	# g1, tmp135
	movq	64(%rax), %rax	# g1_8(D)->mult_val, D.24764
	movq	%rdx, %rsi	# D.24764,
	movq	%rax, %rdi	# D.24764,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24767
	je	.L1463	#,
	.loc 1 7122 0
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, tmp136
	movq	%rax, -56(%rbp)	# tmp136, mult
	jmp	.L1462	#
.L1463:
	.loc 1 7126 0
	movl	$0, %eax	#, D.24763
	jmp	.L1461	#
.L1462:
	.loc 1 7129 0
	movq	-80(%rbp), %rax	# g2, tmp137
	movq	72(%rax), %rcx	# g2_11(D)->add_val, D.24764
	movq	-72(%rbp), %rax	# g1, tmp138
	movq	72(%rax), %rax	# g1_8(D)->add_val, D.24764
	movq	-56(%rbp), %rdx	# mult, tmp139
	movq	%rcx, %rsi	# D.24764,
	movq	%rax, %rdi	# D.24764,
	call	express_from_1	#
	movq	%rax, -48(%rbp)	# tmp140, add
	.loc 1 7130 0
	cmpq	$0, -48(%rbp)	#, add
	jne	.L1464	#,
	.loc 1 7134 0
	movq	-56(%rbp), %rax	# mult, tmp141
	movq	8(%rax), %rax	# mult_1->fld[0].rtwint, D.24766
	cmpq	$1, %rax	#, D.24766
	jle	.L1464	#,
.LBB85:
	.loc 1 7136 0
	movq	-72(%rbp), %rax	# g1, tmp142
	movq	72(%rax), %rax	# g1_8(D)->add_val, tmp143
	movq	%rax, -40(%rbp)	# tmp143, g1_add_val
	.loc 1 7137 0
	movq	-40(%rbp), %rax	# g1_add_val, tmp144
	movzwl	(%rax), %eax	# g1_add_val_37->code, D.24765
	cmpw	$78, %ax	#, D.24765
	jne	.L1465	#,
	.loc 1 7138 0
	movq	-40(%rbp), %rax	# g1_add_val, tmp145
	movq	16(%rax), %rax	# g1_add_val_37->fld[1].rtx, D.24764
	movzwl	(%rax), %eax	# _39->code, D.24765
	cmpw	$54, %ax	#, D.24765
	jne	.L1465	#,
.LBB86:
	.loc 1 7141 0
	movq	-56(%rbp), %rax	# mult, tmp146
	movq	8(%rax), %rdx	# mult_1->fld[0].rtwint, D.24766
	movq	-40(%rbp), %rax	# g1_add_val, tmp147
	movq	16(%rax), %rax	# g1_add_val_37->fld[1].rtx, D.24764
	movq	8(%rax), %rax	# _42->fld[0].rtwint, D.24766
	imulq	%rdx, %rax	# D.24766, tmp148
	movq	%rax, -32(%rbp)	# tmp148, m
	.loc 1 7142 0
	movq	-32(%rbp), %rax	# m, tmp149
	movq	%rax, %rsi	# tmp149,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.24764
	movq	-40(%rbp), %rax	# g1_add_val, tmp150
	movq	8(%rax), %rdx	# g1_add_val_37->fld[0].rtx, D.24764
	movq	-40(%rbp), %rax	# g1_add_val, tmp151
	movzbl	2(%rax), %eax	# g1_add_val_37->mode, D.24768
	movzbl	%al, %eax	# D.24768, D.24769
	movl	%eax, %esi	# D.24769,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -40(%rbp)	# tmp152, g1_add_val
.LBE86:
	.loc 1 7139 0
	jmp	.L1466	#
.L1465:
	.loc 1 7147 0
	movq	-40(%rbp), %rax	# g1_add_val, tmp153
	movzbl	2(%rax), %eax	# g1_add_val_37->mode, D.24768
	movzbl	%al, %eax	# D.24768, D.24769
	movq	-56(%rbp), %rcx	# mult, tmp154
	movq	-40(%rbp), %rdx	# g1_add_val, tmp155
	movl	%eax, %esi	# D.24769,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -40(%rbp)	# tmp156, g1_add_val
.L1466:
	.loc 1 7151 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.24764
	movq	-80(%rbp), %rax	# g2, tmp157
	movq	72(%rax), %rcx	# g2_11(D)->add_val, D.24764
	movq	-40(%rbp), %rax	# g1_add_val, tmp158
	movq	%rcx, %rsi	# D.24764,
	movq	%rax, %rdi	# tmp158,
	call	express_from_1	#
	movq	%rax, -48(%rbp)	# tmp159, add
.L1464:
.LBE85:
	.loc 1 7154 0
	cmpq	$0, -48(%rbp)	#, add
	jne	.L1467	#,
	.loc 1 7155 0
	movl	$0, %eax	#, D.24763
	jmp	.L1461	#
.L1467:
	.loc 1 7158 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24764
	cmpq	-56(%rbp), %rax	# mult, D.24764
	jne	.L1468	#,
	.loc 1 7159 0
	movq	-48(%rbp), %rax	# add, D.24763
	jmp	.L1461	#
.L1468:
	.loc 1 7160 0
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, D.24764
	cmpq	-56(%rbp), %rax	# mult, D.24764
	jne	.L1469	#,
	.loc 1 7161 0
	movq	-72(%rbp), %rax	# g1, tmp160
	movq	32(%rax), %rax	# g1_8(D)->dest_reg, tmp161
	movq	%rax, -56(%rbp)	# tmp161, mult
	jmp	.L1470	#
.L1469:
	.loc 1 7163 0
	movq	-72(%rbp), %rax	# g1, tmp162
	movq	32(%rax), %rdx	# g1_8(D)->dest_reg, D.24764
	movq	-80(%rbp), %rax	# g2, tmp163
	movl	48(%rax), %eax	# g2_11(D)->mode, D.24769
	movq	-56(%rbp), %rcx	# mult, tmp164
	movl	%eax, %esi	# D.24769,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -56(%rbp)	# tmp165, mult
.L1470:
	.loc 1 7165 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24764
	cmpq	-48(%rbp), %rax	# add, D.24764
	jne	.L1471	#,
	.loc 1 7166 0
	movq	-56(%rbp), %rax	# mult, D.24763
	jmp	.L1461	#
.L1471:
	.loc 1 7169 0
	movq	-48(%rbp), %rax	# add, tmp166
	movzwl	(%rax), %eax	# add_4->code, D.24765
	cmpw	$75, %ax	#, D.24765
	jne	.L1472	#,
	.loc 1 7170 0
	movq	-48(%rbp), %rax	# add, tmp167
	movq	16(%rax), %rax	# add_4->fld[1].rtx, D.24764
	movzwl	(%rax), %eax	# _67->code, D.24765
	cmpw	$67, %ax	#, D.24765
	je	.L1473	#,
	.loc 1 7170 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# add, tmp168
	movq	16(%rax), %rax	# add_4->fld[1].rtx, D.24764
	movzwl	(%rax), %eax	# _69->code, D.24765
	cmpw	$68, %ax	#, D.24765
	je	.L1473	#,
	movq	-48(%rbp), %rax	# add, tmp169
	movq	16(%rax), %rax	# add_4->fld[1].rtx, D.24764
	movzwl	(%rax), %eax	# _71->code, D.24765
	cmpw	$54, %ax	#, D.24765
	je	.L1473	#,
	movq	-48(%rbp), %rax	# add, tmp170
	movq	16(%rax), %rax	# add_4->fld[1].rtx, D.24764
	movzwl	(%rax), %eax	# _73->code, D.24765
	cmpw	$55, %ax	#, D.24765
	je	.L1473	#,
	movq	-48(%rbp), %rax	# add, tmp171
	movq	16(%rax), %rax	# add_4->fld[1].rtx, D.24764
	movzwl	(%rax), %eax	# _75->code, D.24765
	cmpw	$58, %ax	#, D.24765
	je	.L1473	#,
	movq	-48(%rbp), %rax	# add, tmp172
	movq	16(%rax), %rax	# add_4->fld[1].rtx, D.24764
	movzwl	(%rax), %eax	# _77->code, D.24765
	cmpw	$134, %ax	#, D.24765
	je	.L1473	#,
	movq	-48(%rbp), %rax	# add, tmp173
	movq	16(%rax), %rax	# add_4->fld[1].rtx, D.24764
	movzwl	(%rax), %eax	# _79->code, D.24765
	cmpw	$56, %ax	#, D.24765
	je	.L1473	#,
	movq	-48(%rbp), %rax	# add, tmp174
	movq	16(%rax), %rax	# add_4->fld[1].rtx, D.24764
	movzwl	(%rax), %eax	# _81->code, D.24765
	cmpw	$140, %ax	#, D.24765
	jne	.L1472	#,
.L1473:
.LBB87:
	.loc 1 7172 0 is_stmt 1
	movq	-48(%rbp), %rax	# add, tmp175
	movq	16(%rax), %rax	# add_4->fld[1].rtx, tmp176
	movq	%rax, -24(%rbp)	# tmp176, tem
	.loc 1 7173 0
	movq	-48(%rbp), %rax	# add, tmp177
	movq	8(%rax), %rcx	# add_4->fld[0].rtx, D.24764
	movq	-80(%rbp), %rax	# g2, tmp178
	movl	48(%rax), %eax	# g2_11(D)->mode, D.24769
	movq	-56(%rbp), %rdx	# mult, tmp179
	movl	%eax, %esi	# D.24769,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -56(%rbp)	# tmp180, mult
	.loc 1 7174 0
	movq	-24(%rbp), %rax	# tem, tmp181
	movq	%rax, -48(%rbp)	# tmp181, add
.L1472:
.LBE87:
	.loc 1 7177 0
	movq	-80(%rbp), %rax	# g2, tmp182
	movl	48(%rax), %eax	# g2_11(D)->mode, D.24769
	movq	-48(%rbp), %rcx	# add, tmp183
	movq	-56(%rbp), %rdx	# mult, tmp184
	movl	%eax, %esi	# D.24769,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
.L1461:
	.loc 1 7179 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE67:
	.size	express_from, .-express_from
	.type	combine_givs_p, @function
combine_givs_p:
.LFB68:
	.loc 1 7189 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# g1, g1
	movq	%rsi, -32(%rbp)	# g2, g2
	.loc 1 7194 0
	movq	-24(%rbp), %rax	# g1, tmp78
	movl	48(%rax), %eax	# g1_3(D)->mode, D.24771
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.24773
	movq	-32(%rbp), %rax	# g2, tmp80
	movl	48(%rax), %eax	# g2_7(D)->mode, D.24771
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24773
	cmpb	%al, %dl	# D.24773, D.24773
	jae	.L1475	#,
	.loc 1 7195 0
	movl	$0, %eax	#, D.24770
	jmp	.L1476	#
.L1475:
	.loc 1 7197 0
	movq	-32(%rbp), %rdx	# g2, tmp82
	movq	-24(%rbp), %rax	# g1, tmp83
	movq	%rdx, %rsi	# tmp82,
	movq	%rax, %rdi	# tmp83,
	call	express_from	#
	movq	%rax, -8(%rbp)	# tmp84, comb
	movq	-8(%rbp), %rax	# comb, tmp85
	movq	%rax, -16(%rbp)	# tmp85, ret
	.loc 1 7198 0
	cmpq	$0, -8(%rbp)	#, comb
	jne	.L1477	#,
	.loc 1 7199 0
	movl	$0, %eax	#, D.24770
	jmp	.L1476	#
.L1477:
	.loc 1 7200 0
	movq	-24(%rbp), %rax	# g1, tmp86
	movl	48(%rax), %edx	# g1_3(D)->mode, D.24771
	movq	-32(%rbp), %rax	# g2, tmp87
	movl	48(%rax), %eax	# g2_7(D)->mode, D.24771
	cmpl	%eax, %edx	# D.24771, D.24771
	je	.L1478	#,
	.loc 1 7201 0
	movq	-32(%rbp), %rax	# g2, tmp88
	movl	48(%rax), %eax	# g2_7(D)->mode, D.24771
	movq	-8(%rbp), %rdx	# comb, tmp89
	movq	%rdx, %rsi	# tmp89,
	movl	%eax, %edi	# D.24771,
	call	gen_lowpart	#
	movq	%rax, -16(%rbp)	# tmp90, ret
.L1478:
	.loc 1 7208 0
	movq	-24(%rbp), %rax	# g1, tmp91
	movq	32(%rax), %rax	# g1_3(D)->dest_reg, D.24774
	cmpq	-8(%rbp), %rax	# comb, D.24774
	jne	.L1479	#,
	.loc 1 7209 0
	movq	-24(%rbp), %rax	# g1, tmp92
	movl	24(%rax), %eax	# g1_3(D)->giv_type, D.24775
	cmpl	$1, %eax	#, D.24775
	je	.L1480	#,
	.loc 1 7209 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# g2, tmp93
	movl	24(%rax), %eax	# g2_7(D)->giv_type, D.24775
	testl	%eax, %eax	# D.24775
	jne	.L1479	#,
.L1480:
	.loc 1 7211 0 is_stmt 1
	movq	-16(%rbp), %rax	# ret, D.24770
	jmp	.L1476	#
.L1479:
	.loc 1 7217 0
	cmpq	$0, -16(%rbp)	#, ret
	je	.L1481	#,
	.loc 1 7218 0
	movq	-32(%rbp), %rax	# g2, tmp94
	movl	24(%rax), %eax	# g2_7(D)->giv_type, D.24775
	testl	%eax, %eax	# D.24775
	jne	.L1481	#,
	.loc 1 7219 0
	movq	-32(%rbp), %rax	# g2, tmp95
	movq	56(%rax), %rax	# g2_7(D)->mem, D.24774
	movzbl	2(%rax), %eax	# _24->mode, D.24773
	movzbl	%al, %eax	# D.24773, D.24771
	movq	-16(%rbp), %rdx	# ret, tmp96
	movq	%rdx, %rsi	# tmp96,
	movl	%eax, %edi	# D.24771,
	call	memory_address_p	#
	testl	%eax, %eax	# D.24772
	je	.L1481	#,
	.loc 1 7232 0
	movq	-16(%rbp), %rax	# ret, D.24770
	jmp	.L1476	#
.L1481:
	.loc 1 7235 0
	movl	$0, %eax	#, D.24770
.L1476:
	.loc 1 7236 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE68:
	.size	combine_givs_p, .-combine_givs_p
	.section	.rodata
	.align 8
.LC52:
	.string	"Verified ext dependent giv at %d of reg %d\n"
	.align 8
.LC53:
	.string	"biv iteration values overflowed"
	.align 8
.LC54:
	.string	"biv iteration info incomplete; incr by 1"
.LC55:
	.string	"biv iteration info incomplete"
	.align 8
.LC56:
	.string	"Failed ext dependent giv at %d, %s\n"
	.text
	.type	check_ext_dependent_givs, @function
check_ext_dependent_givs:
.LFB69:
	.loc 1 7246 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$152, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -152(%rbp)	# bl, bl
	movq	%rsi, -160(%rbp)	# loop_info, loop_info
	.loc 1 7247 0
	movl	$0, -144(%rbp)	#, ze_ok
	movl	$0, -140(%rbp)	#, se_ok
	movl	$0, -136(%rbp)	#, info_ok
	.loc 1 7248 0
	movq	-152(%rbp), %rax	# bl, tmp102
	movq	8(%rax), %rax	# bl_26(D)->biv, D.24776
	movq	16(%rax), %rax	# _27->src_reg, D.24777
	movzbl	2(%rax), %eax	# _28->mode, D.24778
	movzbl	%al, %eax	# D.24778, tmp103
	movl	%eax, -124(%rbp)	# tmp103, biv_mode
	.loc 1 7250 0
	movq	$0, -112(%rbp)	#, u_end_val
	.loc 1 7251 0
	movq	$0, -104(%rbp)	#, u_start_val
	.loc 1 7252 0
	movq	global_rtl(%rip), %rax	# global_rtl, tmp104
	movq	%rax, -96(%rbp)	# tmp104, incr
	.loc 1 7260 0
	movq	-160(%rbp), %rax	# loop_info, tmp105
	movq	96(%rax), %rax	# loop_info_34(D)->n_iterations, D.24779
	testq	%rax, %rax	# D.24779
	je	.L1483	#,
	.loc 1 7261 0
	movq	-152(%rbp), %rax	# bl, tmp106
	movq	40(%rax), %rax	# bl_26(D)->initial_value, D.24777
	testq	%rax, %rax	# D.24777
	je	.L1483	#,
	.loc 1 7262 0
	movq	-152(%rbp), %rax	# bl, tmp107
	movq	40(%rax), %rax	# bl_26(D)->initial_value, D.24777
	movzwl	(%rax), %eax	# _37->code, D.24780
	cmpw	$54, %ax	#, D.24780
	jne	.L1483	#,
	.loc 1 7263 0
	movq	-152(%rbp), %rax	# bl, tmp108
	movq	%rax, %rdi	# tmp108,
	call	biv_total_increment	#
	movq	%rax, -96(%rbp)	# tmp109, incr
	cmpq	$0, -96(%rbp)	#, incr
	je	.L1483	#,
	.loc 1 7264 0
	movq	-96(%rbp), %rax	# incr, tmp110
	movzwl	(%rax), %eax	# incr_39->code, D.24780
	cmpw	$54, %ax	#, D.24780
	jne	.L1483	#,
	.loc 1 7266 0
	movl	-124(%rbp), %eax	# biv_mode, biv_mode.550
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24780
	cmpw	$64, %ax	#, D.24780
	ja	.L1483	#,
.LBB88:
	.loc 1 7272 0
	movl	$1, -136(%rbp)	#, info_ok
	.loc 1 7273 0
	movq	-152(%rbp), %rax	# bl, tmp112
	movq	40(%rax), %rax	# bl_26(D)->initial_value, D.24777
	movq	8(%rax), %rax	# _44->fld[0].rtwint, tmp113
	movq	%rax, -64(%rbp)	# tmp113, start_val
	.loc 1 7274 0
	movq	-64(%rbp), %rax	# start_val, tmp114
	movq	%rax, -104(%rbp)	# tmp114, u_start_val
	.loc 1 7276 0
	movl	$0, -132(%rbp)	#, neg_incr
	movq	-96(%rbp), %rax	# incr, tmp115
	movq	8(%rax), %rax	# incr_39->fld[0].rtwint, D.24781
	movq	%rax, -80(%rbp)	# D.24781, abs_incr
	.loc 1 7277 0
	movq	-96(%rbp), %rax	# incr, tmp116
	movq	8(%rax), %rax	# incr_39->fld[0].rtwint, D.24781
	testq	%rax, %rax	# D.24781
	jns	.L1484	#,
	.loc 1 7278 0
	movl	$1, -132(%rbp)	#, neg_incr
	negq	-80(%rbp)	# abs_incr
.L1484:
	.loc 1 7279 0
	movq	-160(%rbp), %rax	# loop_info, tmp117
	movq	96(%rax), %rax	# loop_info_34(D)->n_iterations, D.24779
	imulq	-80(%rbp), %rax	# abs_incr, tmp118
	movq	%rax, -56(%rbp)	# tmp118, total_incr
	.loc 1 7282 0
	movq	-160(%rbp), %rax	# loop_info, tmp119
	movq	96(%rax), %rbx	# loop_info_34(D)->n_iterations, D.24779
	movq	-56(%rbp), %rax	# total_incr, tmp122
	movl	$0, %edx	#, tmp121
	divq	%rbx	# D.24779
	cmpq	-80(%rbp), %rax	# abs_incr, D.24779
	jne	.L1483	#,
.LBB89:
	.loc 1 7287 0
	cmpl	$0, -132(%rbp)	#, neg_incr
	je	.L1485	#,
	.loc 1 7287 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# total_incr, tmp123
	negq	%rax	# iftmp.551
	jmp	.L1486	#
.L1485:
	.loc 1 7287 0 discriminator 2
	movq	-56(%rbp), %rax	# total_incr, iftmp.551
.L1486:
	.loc 1 7287 0 discriminator 3
	movq	-64(%rbp), %rdx	# start_val, start_val.552
	addq	%rdx, %rax	# start_val.552, tmp124
	movq	%rax, -112(%rbp)	# tmp124, u_end_val
	.loc 1 7288 0 is_stmt 1 discriminator 3
	movq	-112(%rbp), %rax	# u_end_val, tmp125
	movq	%rax, -48(%rbp)	# tmp125, s_end_val
	.loc 1 7289 0 discriminator 3
	movl	-124(%rbp), %eax	# biv_mode, biv_mode.553
	cltq
	movq	mode_mask_array(,%rax,8), %rax	# mode_mask_array, tmp127
	movq	%rax, -40(%rbp)	# tmp127, u_max
	.loc 1 7290 0 discriminator 3
	movq	-40(%rbp), %rax	# u_max, tmp128
	shrq	%rax	# D.24779
	movq	%rax, -32(%rbp)	# D.24779, s_max
	.loc 1 7293 0 discriminator 3
	cmpq	$0, -64(%rbp)	#, start_val
	js	.L1487	#,
	.loc 1 7295 0
	cmpl	$0, -132(%rbp)	#, neg_incr
	je	.L1488	#,
	.loc 1 7295 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# u_end_val, tmp129
	cmpq	-104(%rbp), %rax	# u_start_val, tmp129
	setb	%al	#, iftmp.554
	jmp	.L1489	#
.L1488:
	.loc 1 7295 0 discriminator 2
	movq	-112(%rbp), %rax	# u_end_val, tmp130
	cmpq	-104(%rbp), %rax	# u_start_val, tmp130
	seta	%al	#, iftmp.554
.L1489:
	.loc 1 7295 0 discriminator 3
	testb	%al, %al	# iftmp.554
	je	.L1487	#,
	.loc 1 7299 0 is_stmt 1
	cmpl	$0, -132(%rbp)	#, neg_incr
	jne	.L1490	#,
	.loc 1 7299 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# u_end_val, tmp131
	cmpq	-40(%rbp), %rax	# u_max, tmp131
	ja	.L1487	#,
.L1490:
	.loc 1 7303 0 is_stmt 1
	movl	$1, -144(%rbp)	#, ze_ok
.L1487:
	.loc 1 7311 0
	movq	-32(%rbp), %rax	# s_max, tmp132
	notq	%rax	# D.24781
	cmpq	-64(%rbp), %rax	# start_val, D.24781
	jg	.L1483	#,
	.loc 1 7313 0
	cmpl	$0, -132(%rbp)	#, neg_incr
	je	.L1491	#,
	.loc 1 7313 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# s_end_val, tmp133
	cmpq	-64(%rbp), %rax	# start_val, tmp133
	setl	%al	#, iftmp.555
	jmp	.L1492	#
.L1491:
	.loc 1 7313 0 discriminator 2
	movq	-48(%rbp), %rax	# s_end_val, tmp134
	cmpq	-64(%rbp), %rax	# start_val, tmp134
	setg	%al	#, iftmp.555
.L1492:
	.loc 1 7313 0 discriminator 3
	testb	%al, %al	# iftmp.555
	je	.L1483	#,
	.loc 1 7317 0 is_stmt 1
	cmpl	$0, -132(%rbp)	#, neg_incr
	je	.L1493	#,
	.loc 1 7318 0
	movq	-32(%rbp), %rax	# s_max, tmp135
	notq	%rax	# D.24781
	.loc 1 7317 0
	cmpq	-48(%rbp), %rax	# s_end_val, D.24781
	setle	%al	#, iftmp.556
	jmp	.L1494	#
.L1493:
	.loc 1 7317 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# s_end_val, tmp136
	cmpq	-32(%rbp), %rax	# s_max, tmp136
	setle	%al	#, iftmp.556
.L1494:
	.loc 1 7317 0 discriminator 2
	testb	%al, %al	# iftmp.556
	je	.L1483	#,
	.loc 1 7321 0 is_stmt 1
	movl	$1, -140(%rbp)	#, se_ok
.L1483:
.LBE89:
.LBE88:
	.loc 1 7327 0
	movq	-152(%rbp), %rax	# bl, tmp137
	movq	24(%rax), %rax	# bl_26(D)->giv, tmp138
	movq	%rax, -88(%rbp)	# tmp138, v
	jmp	.L1495	#
.L1510:
	.loc 1 7328 0
	movq	-88(%rbp), %rax	# v, tmp139
	movq	120(%rax), %rax	# v_13->ext_dependent, D.24777
	testq	%rax, %rax	# D.24777
	je	.L1496	#,
.LBB90:
	.loc 1 7330 0
	movq	-88(%rbp), %rax	# v, tmp140
	movq	120(%rax), %rax	# v_13->ext_dependent, D.24777
	movzwl	(%rax), %eax	# _78->code, D.24780
	movzwl	%ax, %eax	# D.24780, tmp141
	movl	%eax, -120(%rbp)	# tmp141, code
	.loc 1 7331 0
	movl	$0, -128(%rbp)	#, ok
	.loc 1 7333 0
	movl	-120(%rbp), %eax	# code, code
	cmpl	$121, %eax	#, code
	je	.L1498	#,
	cmpl	$122, %eax	#, code
	je	.L1499	#,
	cmpl	$120, %eax	#, code
	jne	.L1511	#,
	.loc 1 7336 0
	movl	-140(%rbp), %eax	# se_ok, tmp143
	movl	%eax, -128(%rbp)	# tmp143, ok
	.loc 1 7337 0
	jmp	.L1501	#
.L1498:
	.loc 1 7339 0
	movl	-144(%rbp), %eax	# ze_ok, tmp144
	movl	%eax, -128(%rbp)	# tmp144, ok
	.loc 1 7340 0
	jmp	.L1501	#
.L1499:
	.loc 1 7348 0
	cmpl	$0, -140(%rbp)	#, se_ok
	je	.L1502	#,
	.loc 1 7348 0 is_stmt 0 discriminator 1
	cmpl	$0, -144(%rbp)	#, ze_ok
	je	.L1502	#,
.LBB91:
	.loc 1 7350 0 is_stmt 1
	movq	-88(%rbp), %rax	# v, tmp145
	movq	120(%rax), %rax	# v_13->ext_dependent, D.24777
	movzbl	2(%rax), %eax	# _84->mode, D.24778
	movzbl	%al, %eax	# D.24778, tmp146
	movl	%eax, -116(%rbp)	# tmp146, outer_mode
	.loc 1 7351 0
	movl	-116(%rbp), %eax	# outer_mode, outer_mode.557
	cltq
	movq	mode_mask_array(,%rax,8), %rax	# mode_mask_array, D.24779
	shrq	%rax	# tmp148
	movq	%rax, -24(%rbp)	# tmp148, max
	.loc 1 7356 0
	movq	-104(%rbp), %rax	# u_start_val, tmp149
	cmpq	-24(%rbp), %rax	# max, tmp149
	ja	.L1502	#,
	.loc 1 7356 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# u_end_val, tmp150
	cmpq	-24(%rbp), %rax	# max, tmp150
	ja	.L1502	#,
	.loc 1 7357 0 is_stmt 1
	movl	$1, -128(%rbp)	#, ok
.LBE91:
	.loc 1 7359 0
	jmp	.L1501	#
.L1502:
	jmp	.L1501	#
.L1511:
	.loc 1 7362 0
	movl	$__FUNCTION__.13917, %edx	#,
	movl	$7362, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1501:
	.loc 1 7365 0
	cmpl	$0, -128(%rbp)	#, ok
	je	.L1503	#,
	.loc 1 7367 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.558
	testq	%rax, %rax	# loop_dump_stream.558
	je	.L1496	#,
	.loc 1 7369 0
	movq	-152(%rbp), %rax	# bl, tmp151
	movl	(%rax), %ecx	# bl_26(D)->regno, D.24782
	.loc 1 7371 0
	movq	-88(%rbp), %rax	# v, tmp152
	movq	(%rax), %rax	# v_13->insn, D.24777
	.loc 1 7369 0
	movl	8(%rax), %edx	# _93->fld[0].rtint, D.24783
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.559
	movl	$.LC52, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.559,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L1496	#
.L1503:
	.loc 1 7376 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.560
	testq	%rax, %rax	# loop_dump_stream.560
	je	.L1505	#,
.LBB92:
	.loc 1 7380 0
	cmpl	$0, -136(%rbp)	#, info_ok
	je	.L1506	#,
	.loc 1 7381 0
	movq	$.LC53, -72(%rbp)	#, why
	jmp	.L1507	#
.L1506:
	.loc 1 7384 0
	movq	global_rtl(%rip), %rax	# global_rtl, D.24777
	cmpq	-96(%rbp), %rax	# incr, D.24777
	jne	.L1508	#,
	.loc 1 7385 0
	movq	-152(%rbp), %rax	# bl, tmp153
	movq	%rax, %rdi	# tmp153,
	call	biv_total_increment	#
	movq	%rax, -96(%rbp)	# tmp154, incr
.L1508:
	.loc 1 7386 0
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, D.24777
	cmpq	-96(%rbp), %rax	# incr, D.24777
	jne	.L1509	#,
	.loc 1 7387 0
	movq	$.LC54, -72(%rbp)	#, why
	jmp	.L1507	#
.L1509:
	.loc 1 7389 0
	movq	$.LC55, -72(%rbp)	#, why
.L1507:
	.loc 1 7394 0
	movq	-88(%rbp), %rax	# v, tmp155
	movq	(%rax), %rax	# v_13->insn, D.24777
	.loc 1 7392 0
	movl	8(%rax), %edx	# _103->fld[0].rtint, D.24783
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.561
	movq	-72(%rbp), %rcx	# why, tmp156
	movl	$.LC56, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.561,
	movl	$0, %eax	#,
	call	fprintf	#
.L1505:
.LBE92:
	.loc 1 7396 0
	movq	-88(%rbp), %rax	# v, tmp157
	movzbl	100(%rax), %edx	# v_13->ignore, tmp160
	orl	$4, %edx	#, tmp161
	movb	%dl, 100(%rax)	# tmp161, v_13->ignore
	.loc 1 7397 0
	movq	-152(%rbp), %rax	# bl, tmp162
	movzbl	88(%rax), %edx	# bl_26(D)->all_reduced, tmp165
	andl	$-17, %edx	#, tmp166
	movb	%dl, 88(%rax)	# tmp166, bl_26(D)->all_reduced
.L1496:
.LBE90:
	.loc 1 7327 0
	movq	-88(%rbp), %rax	# v, tmp167
	movq	128(%rax), %rax	# v_13->next_iv, tmp168
	movq	%rax, -88(%rbp)	# tmp168, v
.L1495:
	.loc 1 7327 0 is_stmt 0 discriminator 1
	cmpq	$0, -88(%rbp)	#, v
	jne	.L1510	#,
	.loc 1 7400 0 is_stmt 1
	addq	$152, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE69:
	.size	check_ext_dependent_givs, .-check_ext_dependent_givs
	.globl	extend_value_for_giv
	.type	extend_value_for_giv, @function
extend_value_for_giv:
.LFB70:
	.loc 1 7408 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# v, v
	movq	%rsi, -32(%rbp)	# value, value
	.loc 1 7409 0
	movq	-24(%rbp), %rax	# v, tmp74
	movq	120(%rax), %rax	# v_2(D)->ext_dependent, tmp75
	movq	%rax, -8(%rbp)	# tmp75, ext_dep
	.loc 1 7411 0
	cmpq	$0, -8(%rbp)	#, ext_dep
	jne	.L1513	#,
	.loc 1 7412 0
	movq	-32(%rbp), %rax	# value, D.24789
	jmp	.L1514	#
.L1513:
	.loc 1 7417 0
	movq	-32(%rbp), %rax	# value, tmp76
	movzwl	(%rax), %eax	# value_4(D)->code, D.24790
	cmpw	$67, %ax	#, D.24790
	je	.L1515	#,
	.loc 1 7417 0 is_stmt 0 discriminator 2
	movq	-32(%rbp), %rax	# value, tmp77
	movzwl	(%rax), %eax	# value_4(D)->code, D.24790
	cmpw	$68, %ax	#, D.24790
	je	.L1515	#,
	.loc 1 7417 0 discriminator 1
	movq	-32(%rbp), %rax	# value, tmp78
	movzwl	(%rax), %eax	# value_4(D)->code, D.24790
	cmpw	$54, %ax	#, D.24790
	je	.L1515	#,
	movq	-32(%rbp), %rax	# value, tmp79
	movzwl	(%rax), %eax	# value_4(D)->code, D.24790
	cmpw	$55, %ax	#, D.24790
	je	.L1515	#,
	movq	-32(%rbp), %rax	# value, tmp80
	movzwl	(%rax), %eax	# value_4(D)->code, D.24790
	cmpw	$58, %ax	#, D.24790
	je	.L1515	#,
	movq	-32(%rbp), %rax	# value, tmp81
	movzwl	(%rax), %eax	# value_4(D)->code, D.24790
	cmpw	$134, %ax	#, D.24790
	je	.L1515	#,
	movq	-32(%rbp), %rax	# value, tmp82
	movzwl	(%rax), %eax	# value_4(D)->code, D.24790
	cmpw	$56, %ax	#, D.24790
	je	.L1515	#,
	movq	-32(%rbp), %rax	# value, tmp83
	movzwl	(%rax), %eax	# value_4(D)->code, D.24790
	cmpw	$140, %ax	#, D.24790
	jne	.L1516	#,
.L1515:
	movq	-32(%rbp), %rax	# value, tmp84
	movzbl	2(%rax), %eax	# value_4(D)->mode, D.24791
	testb	%al, %al	# D.24791
	jne	.L1516	#,
	.loc 1 7418 0 is_stmt 1
	movq	-32(%rbp), %rax	# value, D.24789
	jmp	.L1514	#
.L1516:
	.loc 1 7422 0
	movq	-8(%rbp), %rax	# ext_dep, tmp85
	movzbl	2(%rax), %eax	# ext_dep_3->mode, D.24791
	movzbl	%al, %ecx	# D.24791, D.24792
	movq	-8(%rbp), %rax	# ext_dep, tmp86
	movzwl	(%rax), %eax	# ext_dep_3->code, D.24790
	movzwl	%ax, %eax	# D.24790, D.24793
	movq	-32(%rbp), %rdx	# value, tmp87
	movl	%ecx, %esi	# D.24792,
	movl	%eax, %edi	# D.24793,
	call	gen_rtx_fmt_e	#
.L1514:
	.loc 1 7423 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE70:
	.size	extend_value_for_giv, .-extend_value_for_giv
	.type	cmp_combine_givs_stats, @function
cmp_combine_givs_stats:
.LFB71:
	.loc 1 7435 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)	# xp, xp
	movq	%rsi, -48(%rbp)	# yp, yp
	.loc 1 7436 0
	movq	-40(%rbp), %rax	# xp, tmp65
	movq	%rax, -16(%rbp)	# tmp65, x
	.loc 1 7438 0
	movq	-48(%rbp), %rax	# yp, tmp66
	movq	%rax, -8(%rbp)	# tmp66, y
	.loc 1 7441 0
	movq	-8(%rbp), %rax	# y, tmp67
	movl	4(%rax), %edx	# y_5->total_benefit, D.24794
	movq	-16(%rbp), %rax	# x, tmp68
	movl	4(%rax), %eax	# x_3->total_benefit, D.24794
	subl	%eax, %edx	# D.24794, tmp69
	movl	%edx, %eax	# tmp69, tmp69
	movl	%eax, -20(%rbp)	# tmp69, d
	.loc 1 7443 0
	cmpl	$0, -20(%rbp)	#, d
	jne	.L1518	#,
	.loc 1 7444 0
	movq	-16(%rbp), %rax	# x, tmp70
	movl	(%rax), %edx	# x_3->giv_number, D.24794
	movq	-8(%rbp), %rax	# y, tmp71
	movl	(%rax), %eax	# y_5->giv_number, D.24794
	subl	%eax, %edx	# D.24794, tmp72
	movl	%edx, %eax	# tmp72, tmp72
	movl	%eax, -20(%rbp)	# tmp72, d
.L1518:
	.loc 1 7445 0
	movl	-20(%rbp), %eax	# d, D.24794
	.loc 1 7446 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE71:
	.size	cmp_combine_givs_stats, .-cmp_combine_givs_stats
	.section	.rodata
.LC57:
	.string	"Sorted combine statistics:\n"
.LC58:
	.string	" {%d, %d}"
	.align 8
.LC59:
	.string	"giv at %d combined with giv at %d; new benefit %d + %d, lifetime %d\n"
	.text
	.type	combine_givs, @function
combine_givs:
.LFB72:
	.loc 1 7457 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -120(%rbp)	# regs, regs
	movq	%rsi, -128(%rbp)	# bl, bl
	.loc 1 7459 0
	movl	$3, -84(%rbp)	#, extra_benefit
	.loc 1 7467 0
	movl	$0, -100(%rbp)	#, giv_count
	.loc 1 7468 0
	movq	-128(%rbp), %rax	# bl, tmp225
	movq	24(%rax), %rax	# bl_22(D)->giv, tmp226
	movq	%rax, -72(%rbp)	# tmp226, g1
	jmp	.L1521	#
.L1523:
	.loc 1 7469 0
	movq	-72(%rbp), %rax	# g1, tmp227
	movzbl	100(%rax), %eax	# *g1_1, D.24795
	andl	$4, %eax	#, D.24795
	testb	%al, %al	# D.24795
	jne	.L1522	#,
	.loc 1 7470 0
	addl	$1, -100(%rbp)	#, giv_count
.L1522:
	.loc 1 7468 0
	movq	-72(%rbp), %rax	# g1, tmp228
	movq	128(%rax), %rax	# g1_1->next_iv, tmp229
	movq	%rax, -72(%rbp)	# tmp229, g1
.L1521:
	.loc 1 7468 0 is_stmt 0 discriminator 1
	cmpq	$0, -72(%rbp)	#, g1
	jne	.L1523	#,
	.loc 1 7473 0 is_stmt 1
	movl	-100(%rbp), %eax	# giv_count, tmp230
	cltq
	salq	$3, %rax	#, D.24796
	leaq	15(%rax), %rdx	#, tmp231
	movl	$16, %eax	#, tmp377
	subq	$1, %rax	#, tmp232
	addq	%rdx, %rax	# tmp231, tmp233
	movl	$16, %ebx	#, tmp378
	movl	$0, %edx	#, tmp236
	divq	%rbx	# tmp378
	imulq	$16, %rax, %rax	#, tmp235, tmp237
	subq	%rax, %rsp	# tmp237,
	leaq	8(%rsp), %rax	#, tmp238
	addq	$15, %rax	#, tmp239
	shrq	$4, %rax	#, tmp240
	salq	$4, %rax	#, tmp241
	movq	%rax, -64(%rbp)	# tmp241, giv_array
	.loc 1 7474 0
	movl	$0, -112(%rbp)	#, i
	.loc 1 7475 0
	movq	-128(%rbp), %rax	# bl, tmp242
	movq	24(%rax), %rax	# bl_22(D)->giv, tmp243
	movq	%rax, -72(%rbp)	# tmp243, g1
	jmp	.L1524	#
.L1526:
	.loc 1 7476 0
	movq	-72(%rbp), %rax	# g1, tmp244
	movzbl	100(%rax), %eax	# *g1_2, D.24795
	andl	$4, %eax	#, D.24795
	testb	%al, %al	# D.24795
	jne	.L1525	#,
	.loc 1 7477 0
	movl	-112(%rbp), %eax	# i, i.562
	leal	1(%rax), %edx	#, tmp245
	movl	%edx, -112(%rbp)	# tmp245, i
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-64(%rbp), %rax	# giv_array, tmp246
	addq	%rax, %rdx	# tmp246, D.24797
	movq	-72(%rbp), %rax	# g1, tmp247
	movq	%rax, (%rdx)	# tmp247, *_39
.L1525:
	.loc 1 7475 0
	movq	-72(%rbp), %rax	# g1, tmp248
	movq	128(%rax), %rax	# g1_2->next_iv, tmp249
	movq	%rax, -72(%rbp)	# tmp249, g1
.L1524:
	.loc 1 7475 0 is_stmt 0 discriminator 1
	cmpq	$0, -72(%rbp)	#, g1
	jne	.L1526	#,
	.loc 1 7479 0 is_stmt 1
	movl	-100(%rbp), %eax	# giv_count, tmp250
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.24796,
	call	xcalloc	#
	movq	%rax, -56(%rbp)	# tmp251, stats
	.loc 1 7480 0
	movl	-100(%rbp), %eax	# giv_count, tmp252
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movl	-100(%rbp), %eax	# giv_count, tmp253
	cltq
	movq	%rdx, %rsi	# D.24796,
	movq	%rax, %rdi	# D.24796,
	call	xcalloc	#
	movq	%rax, -48(%rbp)	# tmp254, can_combine
	.loc 1 7482 0
	movl	$0, -112(%rbp)	#, i
	jmp	.L1527	#
.L1534:
.LBB93:
	.loc 1 7487 0
	movl	-112(%rbp), %eax	# i, tmp255
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-64(%rbp), %rax	# giv_array, tmp256
	addq	%rdx, %rax	# D.24796, D.24797
	movq	(%rax), %rax	# *_50, tmp257
	movq	%rax, -72(%rbp)	# tmp257, g1
	.loc 1 7488 0
	movl	-112(%rbp), %eax	# i, tmp258
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp259
	addq	%rax, %rdx	# tmp259, D.24798
	movl	-112(%rbp), %eax	# i, tmp260
	movl	%eax, (%rdx)	# tmp260, _54->giv_number
	.loc 1 7496 0
	movq	-72(%rbp), %rax	# g1, tmp261
	movl	24(%rax), %eax	# g1_51->giv_type, D.24799
	cmpl	$1, %eax	#, D.24799
	jne	.L1528	#,
	.loc 1 7497 0
	movq	-120(%rbp), %rax	# regs, tmp262
	movq	8(%rax), %rcx	# regs_56(D)->array, D.24800
	movq	-72(%rbp), %rax	# g1, tmp263
	movq	32(%rax), %rax	# g1_51->dest_reg, D.24801
	movl	8(%rax), %eax	# _58->fld[0].rtuint, D.24802
	movl	%eax, %edx	# D.24802, D.24796
	movq	%rdx, %rax	# D.24796, tmp264
	addq	%rax, %rax	# tmp264
	addq	%rdx, %rax	# D.24796, tmp264
	salq	$3, %rax	#, tmp265
	addq	%rcx, %rax	# D.24800, D.24800
	movq	8(%rax), %rax	# _62->single_usage, tmp266
	movq	%rax, -40(%rbp)	# tmp266, single_use
	cmpq	$0, -40(%rbp)	#, single_use
	je	.L1528	#,
	.loc 1 7498 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24801
	cmpq	-40(%rbp), %rax	# single_use, D.24801
	je	.L1528	#,
	.loc 1 7499 0
	jmp	.L1529	#
.L1528:
	.loc 1 7501 0
	movq	-72(%rbp), %rax	# g1, tmp267
	movl	80(%rax), %eax	# g1_51->benefit, tmp268
	movl	%eax, -96(%rbp)	# tmp268, this_benefit
	.loc 1 7503 0
	movq	-72(%rbp), %rax	# g1, tmp269
	movzbl	101(%rax), %eax	# *g1_51, D.24795
	andl	$8, %eax	#, D.24795
	testb	%al, %al	# D.24795
	je	.L1530	#,
	.loc 1 7504 0
	addl	$1, -96(%rbp)	#, this_benefit
.L1530:
	.loc 1 7506 0
	movl	$0, -108(%rbp)	#, j
	jmp	.L1531	#
.L1533:
.LBB94:
	.loc 1 7510 0
	movl	-108(%rbp), %eax	# j, tmp270
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-64(%rbp), %rax	# giv_array, tmp271
	addq	%rdx, %rax	# D.24796, D.24797
	movq	(%rax), %rax	# *_72, tmp272
	movq	%rax, -32(%rbp)	# tmp272, g2
	.loc 1 7511 0
	movq	-72(%rbp), %rax	# g1, tmp273
	cmpq	-32(%rbp), %rax	# g2, tmp273
	je	.L1532	#,
	.loc 1 7512 0
	movq	-32(%rbp), %rdx	# g2, tmp274
	movq	-72(%rbp), %rax	# g1, tmp275
	movq	%rdx, %rsi	# tmp274,
	movq	%rax, %rdi	# tmp275,
	call	combine_givs_p	#
	movq	%rax, -24(%rbp)	# tmp276, this_combine
	cmpq	$0, -24(%rbp)	#, this_combine
	je	.L1532	#,
	.loc 1 7514 0
	movl	-112(%rbp), %eax	# i, tmp277
	imull	-100(%rbp), %eax	# giv_count, D.24803
	movl	%eax, %edx	# D.24803, D.24803
	movl	-108(%rbp), %eax	# j, tmp278
	addl	%edx, %eax	# D.24803, D.24803
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-48(%rbp), %rax	# can_combine, tmp279
	addq	%rax, %rdx	# tmp279, D.24804
	movq	-24(%rbp), %rax	# this_combine, tmp280
	movq	%rax, (%rdx)	# tmp280, *_79
	.loc 1 7515 0
	movq	-32(%rbp), %rax	# g2, tmp281
	movl	80(%rax), %edx	# g2_73->benefit, D.24803
	movl	-84(%rbp), %eax	# extra_benefit, tmp282
	addl	%edx, %eax	# D.24803, D.24803
	addl	%eax, -96(%rbp)	# D.24803, this_benefit
.L1532:
.LBE94:
	.loc 1 7506 0
	addl	$1, -108(%rbp)	#, j
.L1531:
	.loc 1 7506 0 is_stmt 0 discriminator 1
	movl	-108(%rbp), %eax	# j, tmp283
	cmpl	-100(%rbp), %eax	# giv_count, tmp283
	jl	.L1533	#,
	.loc 1 7518 0 is_stmt 1
	movl	-112(%rbp), %eax	# i, tmp284
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp285
	addq	%rax, %rdx	# tmp285, D.24798
	movl	-96(%rbp), %eax	# this_benefit, tmp286
	movl	%eax, 4(%rdx)	# tmp286, _86->total_benefit
.L1529:
.LBE93:
	.loc 1 7482 0
	addl	$1, -112(%rbp)	#, i
.L1527:
	.loc 1 7482 0 is_stmt 0 discriminator 1
	movl	-112(%rbp), %eax	# i, tmp287
	cmpl	-100(%rbp), %eax	# giv_count, tmp287
	jl	.L1534	#,
.L1535:
	.loc 1 7523 0 is_stmt 1
	movl	-100(%rbp), %esi	# giv_count, tmp288
	movq	-56(%rbp), %rax	# stats, tmp289
	movl	$cmp_combine_givs_stats, %ecx	#,
	movl	$8, %edx	#,
	movq	%rax, %rdi	# tmp289,
	call	specqsort	#
	.loc 1 7526 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.563
	testq	%rax, %rax	# loop_dump_stream.563
	je	.L1536	#,
	.loc 1 7528 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.564
	movq	%rax, %rcx	# loop_dump_stream.564,
	movl	$27, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC57, %edi	#,
	call	fwrite	#
	.loc 1 7529 0
	movl	$0, -104(%rbp)	#, k
	jmp	.L1537	#
.L1539:
	.loc 1 7531 0
	movl	-104(%rbp), %eax	# k, tmp290
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp291
	addq	%rdx, %rax	# D.24796, D.24798
	movl	(%rax), %eax	# _93->giv_number, D.24803
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-64(%rbp), %rax	# giv_array, tmp292
	addq	%rdx, %rax	# D.24796, D.24797
	movq	(%rax), %rax	# *_97, tmp293
	movq	%rax, -72(%rbp)	# tmp293, g1
	.loc 1 7532 0
	movq	-72(%rbp), %rax	# g1, tmp294
	movl	96(%rax), %eax	# g1_98->combined_with, D.24802
	testl	%eax, %eax	# D.24802
	jne	.L1538	#,
	.loc 1 7532 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# g1, tmp295
	movq	136(%rax), %rax	# g1_98->same, D.24805
	testq	%rax, %rax	# D.24805
	jne	.L1538	#,
	.loc 1 7535 0 is_stmt 1
	movl	-104(%rbp), %eax	# k, tmp296
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp297
	addq	%rdx, %rax	# D.24796, D.24798
	.loc 1 7533 0
	movl	4(%rax), %ecx	# _103->total_benefit, D.24803
	.loc 1 7534 0
	movl	-104(%rbp), %eax	# k, tmp298
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp299
	addq	%rdx, %rax	# D.24796, D.24798
	movl	(%rax), %eax	# _107->giv_number, D.24803
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-64(%rbp), %rax	# giv_array, tmp300
	addq	%rdx, %rax	# D.24796, D.24797
	movq	(%rax), %rax	# *_111, D.24805
	movq	(%rax), %rax	# _112->insn, D.24801
	.loc 1 7533 0
	movl	8(%rax), %edx	# _113->fld[0].rtint, D.24803
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.565
	movl	$.LC58, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.565,
	movl	$0, %eax	#,
	call	fprintf	#
.L1538:
	.loc 1 7529 0
	addl	$1, -104(%rbp)	#, k
.L1537:
	.loc 1 7529 0 is_stmt 0 discriminator 1
	movl	-104(%rbp), %eax	# k, tmp301
	cmpl	-100(%rbp), %eax	# giv_count, tmp301
	jl	.L1539	#,
	.loc 1 7537 0 is_stmt 1
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.566
	movq	%rax, %rsi	# loop_dump_stream.566,
	movl	$10, %edi	#,
	call	_IO_putc	#
.L1536:
	.loc 1 7540 0
	movl	$0, -104(%rbp)	#, k
	jmp	.L1540	#
.L1555:
.LBB95:
	.loc 1 7542 0
	movl	$0, -92(%rbp)	#, g1_add_benefit
	.loc 1 7544 0
	movl	-104(%rbp), %eax	# k, tmp302
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp303
	addq	%rdx, %rax	# D.24796, D.24798
	movl	(%rax), %eax	# _122->giv_number, tmp304
	movl	%eax, -112(%rbp)	# tmp304, i
	.loc 1 7545 0
	movl	-112(%rbp), %eax	# i, tmp305
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-64(%rbp), %rax	# giv_array, tmp306
	addq	%rdx, %rax	# D.24796, D.24797
	movq	(%rax), %rax	# *_126, tmp307
	movq	%rax, -72(%rbp)	# tmp307, g1
	.loc 1 7548 0
	movq	-72(%rbp), %rax	# g1, tmp308
	movl	96(%rax), %eax	# g1_127->combined_with, D.24802
	testl	%eax, %eax	# D.24802
	jne	.L1541	#,
	.loc 1 7548 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# g1, tmp309
	movq	136(%rax), %rax	# g1_127->same, D.24805
	testq	%rax, %rax	# D.24805
	je	.L1542	#,
.L1541:
	.loc 1 7549 0 is_stmt 1
	jmp	.L1543	#
.L1542:
	.loc 1 7551 0
	movl	$0, -108(%rbp)	#, j
	jmp	.L1544	#
.L1551:
	.loc 1 7553 0
	movl	-108(%rbp), %eax	# j, tmp310
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-64(%rbp), %rax	# giv_array, tmp311
	addq	%rdx, %rax	# D.24796, D.24797
	movq	(%rax), %rax	# *_133, tmp312
	movq	%rax, -32(%rbp)	# tmp312, g2
	.loc 1 7554 0
	movq	-72(%rbp), %rax	# g1, tmp313
	cmpq	-32(%rbp), %rax	# g2, tmp313
	je	.L1545	#,
	.loc 1 7554 0 is_stmt 0 discriminator 1
	movl	-112(%rbp), %eax	# i, tmp314
	imull	-100(%rbp), %eax	# giv_count, D.24803
	movl	%eax, %edx	# D.24803, D.24803
	movl	-108(%rbp), %eax	# j, tmp315
	addl	%edx, %eax	# D.24803, D.24803
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-48(%rbp), %rax	# can_combine, tmp316
	addq	%rdx, %rax	# D.24796, D.24804
	movq	(%rax), %rax	# *_139, D.24801
	testq	%rax, %rax	# D.24801
	je	.L1545	#,
	.loc 1 7556 0 is_stmt 1
	movq	-32(%rbp), %rax	# g2, tmp317
	movq	136(%rax), %rax	# g2_134->same, D.24805
	testq	%rax, %rax	# D.24805
	jne	.L1545	#,
	.loc 1 7556 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# g2, tmp318
	movl	96(%rax), %eax	# g2_134->combined_with, D.24802
	testl	%eax, %eax	# D.24802
	jne	.L1545	#,
.LBB96:
	.loc 1 7560 0 is_stmt 1
	movl	-112(%rbp), %eax	# i, tmp319
	imull	-100(%rbp), %eax	# giv_count, D.24803
	movl	%eax, %edx	# D.24803, D.24803
	movl	-108(%rbp), %eax	# j, tmp320
	addl	%edx, %eax	# D.24803, D.24803
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-48(%rbp), %rax	# can_combine, tmp321
	addq	%rdx, %rax	# D.24796, D.24804
	movq	(%rax), %rdx	# *_147, D.24801
	movq	-32(%rbp), %rax	# g2, tmp322
	movq	%rdx, 8(%rax)	# D.24801, g2_134->new_reg
	.loc 1 7561 0
	movq	-32(%rbp), %rax	# g2, tmp323
	movq	-72(%rbp), %rdx	# g1, tmp324
	movq	%rdx, 136(%rax)	# tmp324, g2_134->same
	.loc 1 7565 0
	movq	-32(%rbp), %rax	# g2, tmp325
	movl	24(%rax), %eax	# g2_134->giv_type, D.24799
	testl	%eax, %eax	# D.24799
	jne	.L1546	#,
	.loc 1 7566 0
	movq	-32(%rbp), %rax	# g2, tmp326
	movl	80(%rax), %edx	# g2_134->benefit, D.24803
	movl	reg_address_cost(%rip), %eax	# reg_address_cost, reg_address_cost.567
	leal	(%rdx,%rax), %ebx	#, D.24803
	.loc 1 7568 0
	movq	-32(%rbp), %rax	# g2, tmp327
	movq	56(%rax), %rax	# g2_134->mem, D.24801
	movzbl	2(%rax), %eax	# _153->mode, D.24795
	.loc 1 7567 0
	movzbl	%al, %edx	# D.24795, D.24806
	movq	-32(%rbp), %rax	# g2, tmp328
	movq	8(%rax), %rax	# g2_134->new_reg, D.24801
	movl	%edx, %esi	# D.24806,
	movq	%rax, %rdi	# D.24801,
	call	address_cost	#
	subl	%eax, %ebx	# D.24803, D.24803
	movl	%ebx, %edx	# D.24803, D.24803
	.loc 1 7566 0
	movq	-32(%rbp), %rax	# g2, tmp329
	movl	%edx, 80(%rax)	# D.24803, g2_134->benefit
.L1546:
	.loc 1 7569 0
	movq	-72(%rbp), %rax	# g1, tmp330
	movl	96(%rax), %eax	# g1_127->combined_with, D.24802
	leal	1(%rax), %edx	#, D.24802
	movq	-72(%rbp), %rax	# g1, tmp331
	movl	%edx, 96(%rax)	# D.24802, g1_127->combined_with
	.loc 1 7570 0
	movq	-72(%rbp), %rax	# g1, tmp332
	movl	104(%rax), %edx	# g1_127->lifetime, D.24803
	movq	-32(%rbp), %rax	# g2, tmp333
	movl	104(%rax), %eax	# g2_134->lifetime, D.24803
	addl	%eax, %edx	# D.24803, D.24803
	movq	-72(%rbp), %rax	# g1, tmp334
	movl	%edx, 104(%rax)	# D.24803, g1_127->lifetime
	.loc 1 7572 0
	movq	-32(%rbp), %rax	# g2, tmp335
	movl	80(%rax), %eax	# g2_134->benefit, D.24803
	addl	%eax, -92(%rbp)	# D.24803, g1_add_benefit
	.loc 1 7577 0
	movq	-32(%rbp), %rax	# g2, tmp336
	movzbl	100(%rax), %eax	# *g2_134, D.24795
	andl	$1, %eax	#, D.24795
	testb	%al, %al	# D.24795
	jne	.L1547	#,
	.loc 1 7577 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# g2, tmp337
	movq	32(%rax), %rax	# g2_134->dest_reg, D.24801
	movzbl	3(%rax), %eax	# *_168, D.24795
	andl	$8, %eax	#, D.24795
	testb	%al, %al	# D.24795
	je	.L1547	#,
	.loc 1 7578 0 is_stmt 1
	movl	copy_cost(%rip), %eax	# copy_cost, copy_cost.568
	subl	%eax, -92(%rbp)	# copy_cost.568, g1_add_benefit
.L1547:
	.loc 1 7582 0
	movl	$0, -88(%rbp)	#, l
	jmp	.L1548	#
.L1550:
.LBB97:
	.loc 1 7584 0
	movl	-88(%rbp), %eax	# l, tmp338
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp339
	addq	%rdx, %rax	# D.24796, D.24798
	movl	(%rax), %eax	# _176->giv_number, tmp340
	movl	%eax, -80(%rbp)	# tmp340, m
	.loc 1 7585 0
	movl	-80(%rbp), %eax	# m, tmp341
	imull	-100(%rbp), %eax	# giv_count, D.24803
	movl	%eax, %edx	# D.24803, D.24803
	movl	-108(%rbp), %eax	# j, tmp342
	addl	%edx, %eax	# D.24803, D.24803
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-48(%rbp), %rax	# can_combine, tmp343
	addq	%rdx, %rax	# D.24796, D.24804
	movq	(%rax), %rax	# *_182, D.24801
	testq	%rax, %rax	# D.24801
	je	.L1549	#,
	.loc 1 7586 0
	movl	-88(%rbp), %eax	# l, tmp344
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp345
	addq	%rax, %rdx	# tmp345, D.24798
	movl	-88(%rbp), %eax	# l, tmp346
	cltq
	leaq	0(,%rax,8), %rcx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp347
	addq	%rcx, %rax	# D.24796, D.24798
	movl	4(%rax), %ecx	# _189->total_benefit, D.24803
	movq	-32(%rbp), %rax	# g2, tmp348
	movl	80(%rax), %esi	# g2_134->benefit, D.24803
	movl	-84(%rbp), %eax	# extra_benefit, tmp349
	addl	%esi, %eax	# D.24803, D.24803
	subl	%eax, %ecx	# D.24803, D.24803
	movl	%ecx, %eax	# D.24803, D.24803
	movl	%eax, 4(%rdx)	# D.24803, _186->total_benefit
.L1549:
.LBE97:
	.loc 1 7582 0
	addl	$1, -88(%rbp)	#, l
.L1548:
	.loc 1 7582 0 is_stmt 0 discriminator 1
	movl	-88(%rbp), %eax	# l, tmp350
	cmpl	-100(%rbp), %eax	# giv_count, tmp350
	jl	.L1550	#,
	.loc 1 7589 0 is_stmt 1
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.569
	testq	%rax, %rax	# loop_dump_stream.569
	je	.L1545	#,
	.loc 1 7590 0
	movq	-72(%rbp), %rax	# g1, tmp351
	movl	104(%rax), %esi	# g1_127->lifetime, D.24803
	movq	-72(%rbp), %rax	# g1, tmp352
	movl	80(%rax), %edi	# g1_127->benefit, D.24803
	.loc 1 7592 0
	movq	-72(%rbp), %rax	# g1, tmp353
	movq	(%rax), %rax	# g1_127->insn, D.24801
	.loc 1 7590 0
	movl	8(%rax), %ecx	# _198->fld[0].rtint, D.24803
	.loc 1 7592 0
	movq	-32(%rbp), %rax	# g2, tmp354
	movq	(%rax), %rax	# g2_134->insn, D.24801
	.loc 1 7590 0
	movl	8(%rax), %edx	# _200->fld[0].rtint, D.24803
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.570
	movl	-92(%rbp), %r8d	# g1_add_benefit, tmp355
	movl	%esi, (%rsp)	# D.24803,
	movl	%r8d, %r9d	# tmp355,
	movl	%edi, %r8d	# D.24803,
	movl	$.LC59, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.570,
	movl	$0, %eax	#,
	call	fprintf	#
.L1545:
.LBE96:
	.loc 1 7551 0
	addl	$1, -108(%rbp)	#, j
.L1544:
	.loc 1 7551 0 is_stmt 0 discriminator 1
	movl	-108(%rbp), %eax	# j, tmp356
	cmpl	-100(%rbp), %eax	# giv_count, tmp356
	jl	.L1551	#,
	.loc 1 7599 0 is_stmt 1
	movq	-72(%rbp), %rax	# g1, tmp357
	movl	96(%rax), %eax	# g1_127->combined_with, D.24802
	testl	%eax, %eax	# D.24802
	je	.L1543	#,
	.loc 1 7601 0
	movl	$0, -108(%rbp)	#, j
	jmp	.L1552	#
.L1554:
.LBB98:
	.loc 1 7603 0
	movl	-108(%rbp), %eax	# j, tmp358
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp359
	addq	%rdx, %rax	# D.24796, D.24798
	movl	(%rax), %eax	# _208->giv_number, tmp360
	movl	%eax, -76(%rbp)	# tmp360, m
	.loc 1 7604 0
	movl	-76(%rbp), %eax	# m, tmp361
	imull	-100(%rbp), %eax	# giv_count, D.24803
	movl	%eax, %edx	# D.24803, D.24803
	movl	-112(%rbp), %eax	# i, tmp362
	addl	%edx, %eax	# D.24803, D.24803
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-48(%rbp), %rax	# can_combine, tmp363
	addq	%rdx, %rax	# D.24796, D.24804
	movq	(%rax), %rax	# *_214, D.24801
	testq	%rax, %rax	# D.24801
	je	.L1553	#,
	.loc 1 7605 0
	movl	-108(%rbp), %eax	# j, tmp364
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp365
	addq	%rax, %rdx	# tmp365, D.24798
	movl	-108(%rbp), %eax	# j, tmp366
	cltq
	leaq	0(,%rax,8), %rcx	#, D.24796
	movq	-56(%rbp), %rax	# stats, tmp367
	addq	%rcx, %rax	# D.24796, D.24798
	movl	4(%rax), %ecx	# _221->total_benefit, D.24803
	movq	-72(%rbp), %rax	# g1, tmp368
	movl	80(%rax), %esi	# g1_127->benefit, D.24803
	movl	-84(%rbp), %eax	# extra_benefit, tmp369
	addl	%esi, %eax	# D.24803, D.24803
	subl	%eax, %ecx	# D.24803, D.24803
	movl	%ecx, %eax	# D.24803, D.24803
	movl	%eax, 4(%rdx)	# D.24803, _218->total_benefit
.L1553:
.LBE98:
	.loc 1 7601 0
	addl	$1, -108(%rbp)	#, j
.L1552:
	.loc 1 7601 0 is_stmt 0 discriminator 1
	movl	-108(%rbp), %eax	# j, tmp370
	cmpl	-100(%rbp), %eax	# giv_count, tmp370
	jl	.L1554	#,
	.loc 1 7608 0 is_stmt 1
	movq	-72(%rbp), %rax	# g1, tmp371
	movl	80(%rax), %edx	# g1_127->benefit, D.24803
	movl	-92(%rbp), %eax	# g1_add_benefit, tmp372
	addl	%eax, %edx	# tmp372, D.24803
	movq	-72(%rbp), %rax	# g1, tmp373
	movl	%edx, 80(%rax)	# D.24803, g1_127->benefit
	.loc 1 7616 0
	jmp	.L1535	#
.L1543:
.LBE95:
	.loc 1 7540 0
	addl	$1, -104(%rbp)	#, k
.L1540:
	.loc 1 7540 0 is_stmt 0 discriminator 1
	movl	-104(%rbp), %eax	# k, tmp374
	cmpl	-100(%rbp), %eax	# giv_count, tmp374
	jl	.L1555	#,
	.loc 1 7621 0 is_stmt 1
	movq	-56(%rbp), %rax	# stats, tmp375
	movq	%rax, %rdi	# tmp375,
	call	free	#
	.loc 1 7622 0
	movq	-48(%rbp), %rax	# can_combine, tmp376
	movq	%rax, %rdi	# tmp376,
	call	free	#
	.loc 1 7623 0
	movq	-8(%rbp), %rbx	#,
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE72:
	.size	combine_givs, .-combine_givs
	.type	gen_add_mult, @function
gen_add_mult:
.LFB73:
	.loc 1 7633 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# b, b
	movq	%rsi, -32(%rbp)	# m, m
	movq	%rdx, -40(%rbp)	# a, a
	movq	%rcx, -48(%rbp)	# reg, reg
	.loc 1 7637 0
	call	start_sequence	#
	.loc 1 7639 0
	movq	-48(%rbp), %rax	# reg, tmp63
	movzbl	2(%rax), %eax	# reg_1(D)->mode, D.24810
	movzbl	%al, %edi	# D.24810, D.24811
	movq	-40(%rbp), %rcx	# a, tmp64
	movq	-32(%rbp), %rdx	# m, tmp65
	movq	-48(%rbp), %rsi	# reg, tmp66
	movq	-24(%rbp), %rax	# b, tmp67
	movl	$1, %r9d	#,
	movl	%edi, %r8d	# D.24811,
	movq	%rax, %rdi	# tmp67,
	call	expand_mult_add	#
	movq	%rax, -16(%rbp)	# tmp68, result
	.loc 1 7640 0
	movq	-48(%rbp), %rax	# reg, tmp69
	cmpq	-16(%rbp), %rax	# result, tmp69
	je	.L1557	#,
	.loc 1 7641 0
	movq	-16(%rbp), %rdx	# result, tmp70
	movq	-48(%rbp), %rax	# reg, tmp71
	movq	%rdx, %rsi	# tmp70,
	movq	%rax, %rdi	# tmp71,
	call	emit_move_insn	#
.L1557:
	.loc 1 7642 0
	call	gen_sequence	#
	movq	%rax, -8(%rbp)	# tmp72, seq
	.loc 1 7643 0
	call	end_sequence	#
	.loc 1 7645 0
	movq	-8(%rbp), %rax	# seq, D.24812
	.loc 1 7646 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE73:
	.size	gen_add_mult, .-gen_add_mult
	.type	loop_regs_update, @function
loop_regs_update:
.LFB74:
	.loc 1 7655 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# loop, loop
	movq	%rsi, -32(%rbp)	# seq, seq
	.loc 1 7658 0
	movq	-32(%rbp), %rax	# seq, tmp91
	movzwl	(%rax), %eax	# seq_4(D)->code, D.24813
	cmpw	$24, %ax	#, D.24813
	jne	.L1560	#,
.LBB99:
	.loc 1 7661 0
	movl	$0, -12(%rbp)	#, i
	jmp	.L1561	#
.L1567:
.LBB100:
	.loc 1 7663 0
	movq	-32(%rbp), %rax	# seq, tmp92
	movq	8(%rax), %rax	# seq_4(D)->fld[0].rtvec, D.24814
	movl	-12(%rbp), %edx	# i, tmp94
	movslq	%edx, %rdx	# tmp94, tmp93
	movq	8(%rax,%rdx,8), %rax	# _9->elem, D.24816
	movzwl	(%rax), %eax	# _10->code, D.24813
	movzwl	%ax, %eax	# D.24813, D.24815
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24817
	cmpb	$105, %al	#, D.24817
	jne	.L1562	#,
	.loc 1 7663 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# seq, tmp96
	movq	8(%rax), %rax	# seq_4(D)->fld[0].rtvec, D.24814
	movl	-12(%rbp), %edx	# i, tmp98
	movslq	%edx, %rdx	# tmp98, tmp97
	movq	8(%rax,%rdx,8), %rax	# _14->elem, D.24816
	movq	32(%rax), %rax	# _15->fld[3].rtx, D.24816
	movzwl	(%rax), %eax	# _16->code, D.24813
	cmpw	$47, %ax	#, D.24813
	jne	.L1563	#,
	.loc 1 7663 0 discriminator 3
	movq	-32(%rbp), %rax	# seq, tmp99
	movq	8(%rax), %rax	# seq_4(D)->fld[0].rtvec, D.24814
	movl	-12(%rbp), %edx	# i, tmp101
	movslq	%edx, %rdx	# tmp101, tmp100
	movq	8(%rax,%rdx,8), %rax	# _18->elem, D.24816
	movq	32(%rax), %rax	# _19->fld[3].rtx, iftmp.572
	jmp	.L1565	#
.L1563:
	.loc 1 7663 0 discriminator 4
	movq	-32(%rbp), %rax	# seq, tmp102
	movq	8(%rax), %rax	# seq_4(D)->fld[0].rtvec, D.24814
	movl	-12(%rbp), %edx	# i, tmp104
	movslq	%edx, %rdx	# tmp104, tmp103
	movq	8(%rax,%rdx,8), %rax	# _21->elem, D.24816
	movq	32(%rax), %rdx	# _22->fld[3].rtx, D.24816
	movq	-32(%rbp), %rax	# seq, tmp105
	movq	8(%rax), %rax	# seq_4(D)->fld[0].rtvec, D.24814
	movl	-12(%rbp), %ecx	# i, tmp107
	movslq	%ecx, %rcx	# tmp107, tmp106
	movq	8(%rax,%rcx,8), %rax	# _24->elem, D.24816
	movq	%rdx, %rsi	# D.24816,
	movq	%rax, %rdi	# D.24816,
	call	single_set_2	#
	jmp	.L1565	#
.L1562:
	.loc 1 7663 0 discriminator 2
	movl	$0, %eax	#, iftmp.571
.L1565:
	.loc 1 7663 0 discriminator 5
	movq	%rax, -8(%rbp)	# iftmp.571, set
	.loc 1 7664 0 is_stmt 1 discriminator 5
	cmpq	$0, -8(%rbp)	#, set
	je	.L1566	#,
	.loc 1 7664 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# set, tmp108
	movq	8(%rax), %rax	# set_29->fld[0].rtx, D.24816
	movzwl	(%rax), %eax	# _30->code, D.24813
	cmpw	$61, %ax	#, D.24813
	jne	.L1566	#,
	.loc 1 7665 0 is_stmt 1
	movq	-8(%rbp), %rax	# set, tmp109
	movq	16(%rax), %rcx	# set_29->fld[1].rtx, D.24816
	movq	-8(%rbp), %rax	# set, tmp110
	movq	8(%rax), %rax	# set_29->fld[0].rtx, D.24816
	movl	8(%rax), %eax	# _33->fld[0].rtuint, D.24818
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.24816,
	movl	%eax, %edi	# D.24818,
	call	record_base_value	#
.L1566:
.LBE100:
	.loc 1 7661 0
	addl	$1, -12(%rbp)	#, i
.L1561:
	.loc 1 7661 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# seq, tmp111
	movq	8(%rax), %rax	# seq_4(D)->fld[0].rtvec, D.24814
	movl	(%rax), %eax	# _7->num_elem, D.24815
	cmpl	-12(%rbp), %eax	# i, D.24815
	jg	.L1567	#,
.LBE99:
	jmp	.L1559	#
.L1560:
	.loc 1 7670 0 is_stmt 1
	movq	-32(%rbp), %rax	# seq, tmp112
	movzwl	(%rax), %eax	# seq_4(D)->code, D.24813
	cmpw	$47, %ax	#, D.24813
	jne	.L1559	#,
	.loc 1 7671 0
	movq	-32(%rbp), %rax	# seq, tmp113
	movq	8(%rax), %rax	# seq_4(D)->fld[0].rtx, D.24816
	movzwl	(%rax), %eax	# _37->code, D.24813
	cmpw	$61, %ax	#, D.24813
	jne	.L1559	#,
	.loc 1 7672 0
	movq	-32(%rbp), %rax	# seq, tmp114
	movq	16(%rax), %rcx	# seq_4(D)->fld[1].rtx, D.24816
	movq	-32(%rbp), %rax	# seq, tmp115
	movq	8(%rax), %rax	# seq_4(D)->fld[0].rtx, D.24816
	movl	8(%rax), %eax	# _40->fld[0].rtuint, D.24818
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.24816,
	movl	%eax, %edi	# D.24818,
	call	record_base_value	#
.L1559:
	.loc 1 7674 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE74:
	.size	loop_regs_update, .-loop_regs_update
	.globl	loop_iv_add_mult_emit_before
	.type	loop_iv_add_mult_emit_before, @function
loop_iv_add_mult_emit_before:
.LFB75:
	.loc 1 7688 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$64, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -40(%rbp)	# loop, loop
	movq	%rsi, -48(%rbp)	# b, b
	movq	%rdx, -56(%rbp)	# m, m
	movq	%rcx, -64(%rbp)	# a, a
	movq	%r8, -72(%rbp)	# reg, reg
	movq	%r9, -80(%rbp)	# before_bb, before_bb
	.loc 1 7691 0
	cmpq	$0, 16(%rbp)	#, before_insn
	jne	.L1570	#,
	.loc 1 7693 0
	movq	-72(%rbp), %rdi	# reg, tmp62
	movq	-64(%rbp), %rcx	# a, tmp63
	movq	-56(%rbp), %rdx	# m, tmp64
	movq	-48(%rbp), %rsi	# b, tmp65
	movq	-40(%rbp), %rax	# loop, tmp66
	movq	%rdi, %r8	# tmp62,
	movq	%rax, %rdi	# tmp66,
	call	loop_iv_add_mult_hoist	#
	.loc 1 7694 0
	jmp	.L1569	#
.L1570:
	.loc 1 7698 0
	movq	-64(%rbp), %rax	# a, tmp67
	movq	%rax, %rdi	# tmp67,
	call	copy_rtx	#
	movq	%rax, %r12	#, D.24819
	movq	-56(%rbp), %rax	# m, tmp68
	movq	%rax, %rdi	# tmp68,
	call	copy_rtx	#
	movq	%rax, %rbx	#, D.24819
	movq	-48(%rbp), %rax	# b, tmp69
	movq	%rax, %rdi	# tmp69,
	call	copy_rtx	#
	movq	-72(%rbp), %rdx	# reg, tmp70
	movq	%rdx, %rcx	# tmp70,
	movq	%r12, %rdx	# D.24819,
	movq	%rbx, %rsi	# D.24819,
	movq	%rax, %rdi	# D.24819,
	call	gen_add_mult	#
	movq	%rax, -24(%rbp)	# tmp71, seq
	.loc 1 7701 0
	movq	-64(%rbp), %rax	# a, tmp72
	movq	16(%rbp), %rsi	# before_insn,
	movq	%rax, %rdi	# tmp72,
	call	update_reg_last_use	#
	.loc 1 7702 0
	movq	-48(%rbp), %rax	# b, tmp73
	movq	16(%rbp), %rsi	# before_insn,
	movq	%rax, %rdi	# tmp73,
	call	update_reg_last_use	#
	.loc 1 7703 0
	movq	-56(%rbp), %rax	# m, tmp74
	movq	16(%rbp), %rsi	# before_insn,
	movq	%rax, %rdi	# tmp74,
	call	update_reg_last_use	#
	.loc 1 7705 0
	movq	-24(%rbp), %rdx	# seq, tmp75
	movq	-80(%rbp), %rsi	# before_bb, tmp76
	movq	-40(%rbp), %rax	# loop, tmp77
	movq	%rdx, %rcx	# tmp75,
	movq	16(%rbp), %rdx	# before_insn,
	movq	%rax, %rdi	# tmp77,
	call	loop_insn_emit_before	#
	.loc 1 7709 0
	movq	-24(%rbp), %rdx	# seq, tmp78
	movq	-40(%rbp), %rax	# loop, tmp79
	movq	%rdx, %rsi	# tmp78,
	movq	%rax, %rdi	# tmp79,
	call	loop_regs_update	#
.L1569:
	.loc 1 7710 0
	addq	$64, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE75:
	.size	loop_iv_add_mult_emit_before, .-loop_iv_add_mult_emit_before
	.globl	loop_iv_add_mult_sink
	.type	loop_iv_add_mult_sink, @function
loop_iv_add_mult_sink:
.LFB76:
	.loc 1 7722 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$64, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -40(%rbp)	# loop, loop
	movq	%rsi, -48(%rbp)	# b, b
	movq	%rdx, -56(%rbp)	# m, m
	movq	%rcx, -64(%rbp)	# a, a
	movq	%r8, -72(%rbp)	# reg, reg
	.loc 1 7726 0
	movq	-64(%rbp), %rax	# a, tmp65
	movq	%rax, %rdi	# tmp65,
	call	copy_rtx	#
	movq	%rax, %r12	#, D.24820
	movq	-56(%rbp), %rax	# m, tmp66
	movq	%rax, %rdi	# tmp66,
	call	copy_rtx	#
	movq	%rax, %rbx	#, D.24820
	movq	-48(%rbp), %rax	# b, tmp67
	movq	%rax, %rdi	# tmp67,
	call	copy_rtx	#
	movq	-72(%rbp), %rdx	# reg, tmp68
	movq	%rdx, %rcx	# tmp68,
	movq	%r12, %rdx	# D.24820,
	movq	%rbx, %rsi	# D.24820,
	movq	%rax, %rdi	# D.24820,
	call	gen_add_mult	#
	movq	%rax, -24(%rbp)	# tmp69, seq
	.loc 1 7730 0
	movq	-40(%rbp), %rax	# loop, tmp70
	movq	224(%rax), %rdx	# loop_9(D)->sink, D.24820
	movq	-64(%rbp), %rax	# a, tmp71
	movq	%rdx, %rsi	# D.24820,
	movq	%rax, %rdi	# tmp71,
	call	update_reg_last_use	#
	.loc 1 7731 0
	movq	-40(%rbp), %rax	# loop, tmp72
	movq	224(%rax), %rdx	# loop_9(D)->sink, D.24820
	movq	-48(%rbp), %rax	# b, tmp73
	movq	%rdx, %rsi	# D.24820,
	movq	%rax, %rdi	# tmp73,
	call	update_reg_last_use	#
	.loc 1 7732 0
	movq	-40(%rbp), %rax	# loop, tmp74
	movq	224(%rax), %rdx	# loop_9(D)->sink, D.24820
	movq	-56(%rbp), %rax	# m, tmp75
	movq	%rdx, %rsi	# D.24820,
	movq	%rax, %rdi	# tmp75,
	call	update_reg_last_use	#
	.loc 1 7734 0
	movq	-24(%rbp), %rdx	# seq, tmp76
	movq	-40(%rbp), %rax	# loop, tmp77
	movq	%rdx, %rsi	# tmp76,
	movq	%rax, %rdi	# tmp77,
	call	loop_insn_sink	#
	.loc 1 7738 0
	movq	-24(%rbp), %rdx	# seq, tmp78
	movq	-40(%rbp), %rax	# loop, tmp79
	movq	%rdx, %rsi	# tmp78,
	movq	%rax, %rdi	# tmp79,
	call	loop_regs_update	#
	.loc 1 7739 0
	addq	$64, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE76:
	.size	loop_iv_add_mult_sink, .-loop_iv_add_mult_sink
	.globl	loop_iv_add_mult_hoist
	.type	loop_iv_add_mult_hoist, @function
loop_iv_add_mult_hoist:
.LFB77:
	.loc 1 7751 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$64, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -40(%rbp)	# loop, loop
	movq	%rsi, -48(%rbp)	# b, b
	movq	%rdx, -56(%rbp)	# m, m
	movq	%rcx, -64(%rbp)	# a, a
	movq	%r8, -72(%rbp)	# reg, reg
	.loc 1 7755 0
	movq	-64(%rbp), %rax	# a, tmp62
	movq	%rax, %rdi	# tmp62,
	call	copy_rtx	#
	movq	%rax, %r12	#, D.24821
	movq	-56(%rbp), %rax	# m, tmp63
	movq	%rax, %rdi	# tmp63,
	call	copy_rtx	#
	movq	%rax, %rbx	#, D.24821
	movq	-48(%rbp), %rax	# b, tmp64
	movq	%rax, %rdi	# tmp64,
	call	copy_rtx	#
	movq	-72(%rbp), %rdx	# reg, tmp65
	movq	%rdx, %rcx	# tmp65,
	movq	%r12, %rdx	# D.24821,
	movq	%rbx, %rsi	# D.24821,
	movq	%rax, %rdi	# D.24821,
	call	gen_add_mult	#
	movq	%rax, -24(%rbp)	# tmp66, seq
	.loc 1 7757 0
	movq	-24(%rbp), %rdx	# seq, tmp67
	movq	-40(%rbp), %rax	# loop, tmp68
	movq	%rdx, %rsi	# tmp67,
	movq	%rax, %rdi	# tmp68,
	call	loop_insn_hoist	#
	.loc 1 7761 0
	movq	-24(%rbp), %rdx	# seq, tmp69
	movq	-40(%rbp), %rax	# loop, tmp70
	movq	%rdx, %rsi	# tmp69,
	movq	%rax, %rdi	# tmp70,
	call	loop_regs_update	#
	.loc 1 7762 0
	addq	$64, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE77:
	.size	loop_iv_add_mult_hoist, .-loop_iv_add_mult_hoist
	.type	iv_add_mult_cost, @function
iv_add_mult_cost:
.LFB78:
	.loc 1 7775 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# b, b
	movq	%rsi, -48(%rbp)	# m, m
	movq	%rdx, -56(%rbp)	# a, a
	movq	%rcx, -64(%rbp)	# reg, reg
	.loc 1 7776 0
	movl	$0, -28(%rbp)	#, cost
	.loc 1 7779 0
	call	start_sequence	#
	.loc 1 7780 0
	movq	-64(%rbp), %rax	# reg, tmp73
	movzbl	2(%rax), %eax	# reg_7(D)->mode, D.24822
	movzbl	%al, %edi	# D.24822, D.24823
	movq	-56(%rbp), %rcx	# a, tmp74
	movq	-48(%rbp), %rdx	# m, tmp75
	movq	-64(%rbp), %rsi	# reg, tmp76
	movq	-40(%rbp), %rax	# b, tmp77
	movl	$1, %r9d	#,
	movl	%edi, %r8d	# D.24823,
	movq	%rax, %rdi	# tmp77,
	call	expand_mult_add	#
	movq	%rax, -16(%rbp)	# tmp78, result
	.loc 1 7781 0
	movq	-64(%rbp), %rax	# reg, tmp79
	cmpq	-16(%rbp), %rax	# result, tmp79
	je	.L1575	#,
	.loc 1 7782 0
	movq	-16(%rbp), %rdx	# result, tmp80
	movq	-64(%rbp), %rax	# reg, tmp81
	movq	%rdx, %rsi	# tmp80,
	movq	%rax, %rdi	# tmp81,
	call	emit_move_insn	#
.L1575:
	.loc 1 7783 0
	call	get_last_insn	#
	movq	%rax, -24(%rbp)	# tmp82, last
	.loc 1 7784 0
	jmp	.L1576	#
.L1582:
.LBB101:
	.loc 1 7786 0
	movq	-24(%rbp), %rax	# last, tmp83
	movzwl	(%rax), %eax	# last_3->code, D.24824
	movzwl	%ax, %eax	# D.24824, D.24825
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24826
	cmpb	$105, %al	#, D.24826
	jne	.L1577	#,
	.loc 1 7786 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# last, tmp85
	movq	32(%rax), %rax	# last_3->fld[3].rtx, D.24827
	movzwl	(%rax), %eax	# _18->code, D.24824
	cmpw	$47, %ax	#, D.24824
	jne	.L1578	#,
	.loc 1 7786 0 discriminator 3
	movq	-24(%rbp), %rax	# last, tmp86
	movq	32(%rax), %rax	# last_3->fld[3].rtx, iftmp.574
	jmp	.L1580	#
.L1578:
	.loc 1 7786 0 discriminator 4
	movq	-24(%rbp), %rax	# last, tmp87
	movq	32(%rax), %rdx	# last_3->fld[3].rtx, D.24827
	movq	-24(%rbp), %rax	# last, tmp88
	movq	%rdx, %rsi	# D.24827,
	movq	%rax, %rdi	# tmp88,
	call	single_set_2	#
	jmp	.L1580	#
.L1577:
	.loc 1 7786 0 discriminator 2
	movl	$0, %eax	#, iftmp.573
.L1580:
	.loc 1 7786 0 discriminator 5
	movq	%rax, -8(%rbp)	# iftmp.573, t
	.loc 1 7787 0 is_stmt 1 discriminator 5
	cmpq	$0, -8(%rbp)	#, t
	je	.L1581	#,
	.loc 1 7788 0
	movq	-8(%rbp), %rax	# t, tmp89
	movq	16(%rax), %rax	# t_25->fld[1].rtx, D.24827
	movl	$47, %esi	#,
	movq	%rax, %rdi	# D.24827,
	call	rtx_cost	#
	addl	%eax, -28(%rbp)	# D.24825, cost
.L1581:
	.loc 1 7789 0
	movq	-24(%rbp), %rax	# last, tmp90
	movq	16(%rax), %rax	# last_3->fld[1].rtx, tmp91
	movq	%rax, -24(%rbp)	# tmp91, last
.L1576:
.LBE101:
	.loc 1 7784 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, last
	jne	.L1582	#,
	.loc 1 7791 0
	call	end_sequence	#
	.loc 1 7792 0
	movl	-28(%rbp), %eax	# cost, D.24825
	.loc 1 7793 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE78:
	.size	iv_add_mult_cost, .-iv_add_mult_cost
	.type	product_cheap_p, @function
product_cheap_p:
.LFB79:
	.loc 1 7802 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# a, a
	movq	%rsi, -48(%rbp)	# b, b
	.loc 1 7805 0
	movl	$1, -20(%rbp)	#, win
	.loc 1 7808 0
	movq	-40(%rbp), %rax	# a, tmp101
	movzwl	(%rax), %eax	# a_8(D)->code, D.24829
	cmpw	$54, %ax	#, D.24829
	jne	.L1585	#,
	.loc 1 7809 0
	movq	-40(%rbp), %rax	# a, tmp102
	movq	%rax, -16(%rbp)	# tmp102, tmp
	movq	-48(%rbp), %rax	# b, tmp103
	movq	%rax, -40(%rbp)	# tmp103, a
	movq	-16(%rbp), %rax	# tmp, tmp104
	movq	%rax, -48(%rbp)	# tmp104, b
.L1585:
	.loc 1 7812 0
	movq	-40(%rbp), %rax	# a, tmp105
	movzwl	(%rax), %eax	# a_1->code, D.24829
	cmpw	$54, %ax	#, D.24829
	jne	.L1586	#,
	.loc 1 7813 0
	movl	$1, %eax	#, D.24828
	jmp	.L1587	#
.L1586:
	.loc 1 7816 0
	movq	-48(%rbp), %rax	# b, tmp106
	movzwl	(%rax), %eax	# b_2->code, D.24829
	cmpw	$54, %ax	#, D.24829
	je	.L1588	#,
	.loc 1 7817 0
	movl	$0, %eax	#, D.24828
	jmp	.L1587	#
.L1588:
	.loc 1 7823 0
	call	start_sequence	#
	.loc 1 7824 0
	movq	-40(%rbp), %rax	# a, tmp107
	movzbl	2(%rax), %eax	# a_1->mode, D.24830
	movzbl	%al, %eax	# D.24830, D.24831
	movq	-48(%rbp), %rdx	# b, tmp108
	movq	-40(%rbp), %rsi	# a, tmp109
	movl	$1, %r8d	#,
	movl	$0, %ecx	#,
	movl	%eax, %edi	# D.24831,
	call	expand_mult	#
	.loc 1 7825 0
	call	gen_sequence	#
	movq	%rax, -16(%rbp)	# tmp110, tmp
	.loc 1 7826 0
	call	end_sequence	#
	.loc 1 7828 0
	movq	-16(%rbp), %rax	# tmp, tmp111
	movzwl	(%rax), %eax	# tmp_20->code, D.24829
	cmpw	$24, %ax	#, D.24829
	jne	.L1589	#,
	.loc 1 7830 0
	movq	-16(%rbp), %rax	# tmp, tmp112
	movq	8(%rax), %rax	# tmp_20->fld[0].rtvec, D.24832
	testq	%rax, %rax	# D.24832
	jne	.L1590	#,
	.loc 1 7831 0
	movl	$1, -20(%rbp)	#, win
	jmp	.L1598	#
.L1590:
	.loc 1 7832 0
	movq	-16(%rbp), %rax	# tmp, tmp113
	movq	8(%rax), %rax	# tmp_20->fld[0].rtvec, D.24832
	movl	(%rax), %eax	# _24->num_elem, D.24828
	cmpl	$3, %eax	#, D.24828
	jle	.L1592	#,
	.loc 1 7833 0
	movl	$0, -20(%rbp)	#, win
	jmp	.L1598	#
.L1592:
	.loc 1 7835 0
	movl	$0, -24(%rbp)	#, i
	jmp	.L1593	#
.L1597:
.LBB102:
	.loc 1 7837 0
	movq	-16(%rbp), %rax	# tmp, tmp114
	movq	8(%rax), %rax	# tmp_20->fld[0].rtvec, D.24832
	movl	-24(%rbp), %edx	# i, tmp116
	movslq	%edx, %rdx	# tmp116, tmp115
	movq	8(%rax,%rdx,8), %rax	# _30->elem, tmp117
	movq	%rax, -8(%rbp)	# tmp117, insn
	.loc 1 7839 0
	movq	-8(%rbp), %rax	# insn, tmp118
	movzwl	(%rax), %eax	# insn_31->code, D.24829
	cmpw	$32, %ax	#, D.24829
	jne	.L1594	#,
	.loc 1 7840 0
	movq	-8(%rbp), %rax	# insn, tmp119
	movq	32(%rax), %rax	# insn_31->fld[3].rtx, D.24833
	movzwl	(%rax), %eax	# _33->code, D.24829
	cmpw	$47, %ax	#, D.24829
	jne	.L1595	#,
	.loc 1 7841 0
	movq	-8(%rbp), %rax	# insn, tmp120
	movq	32(%rax), %rax	# insn_31->fld[3].rtx, D.24833
	movq	16(%rax), %rax	# _35->fld[1].rtx, D.24833
	movzwl	(%rax), %eax	# _36->code, D.24829
	cmpw	$78, %ax	#, D.24829
	je	.L1594	#,
.L1595:
	.loc 1 7842 0
	movq	-8(%rbp), %rax	# insn, tmp121
	movq	32(%rax), %rax	# insn_31->fld[3].rtx, D.24833
	movzwl	(%rax), %eax	# _38->code, D.24829
	cmpw	$39, %ax	#, D.24829
	jne	.L1596	#,
	.loc 1 7843 0
	movq	-8(%rbp), %rax	# insn, tmp122
	movq	32(%rax), %rax	# insn_31->fld[3].rtx, D.24833
	movq	8(%rax), %rax	# _40->fld[0].rtvec, D.24832
	movq	8(%rax), %rax	# _41->elem, D.24833
	movzwl	(%rax), %eax	# _42->code, D.24829
	cmpw	$47, %ax	#, D.24829
	jne	.L1596	#,
	.loc 1 7844 0
	movq	-8(%rbp), %rax	# insn, tmp123
	movq	32(%rax), %rax	# insn_31->fld[3].rtx, D.24833
	movq	8(%rax), %rax	# _44->fld[0].rtvec, D.24832
	movq	8(%rax), %rax	# _45->elem, D.24833
	movq	16(%rax), %rax	# _46->fld[1].rtx, D.24833
	movzwl	(%rax), %eax	# _47->code, D.24829
	cmpw	$78, %ax	#, D.24829
	jne	.L1596	#,
.L1594:
	.loc 1 7846 0
	movl	$0, -20(%rbp)	#, win
	.loc 1 7847 0
	nop
	jmp	.L1598	#
.L1596:
.LBE102:
	.loc 1 7835 0
	addl	$1, -24(%rbp)	#, i
.L1593:
	.loc 1 7835 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# tmp, tmp124
	movq	8(%rax), %rax	# tmp_20->fld[0].rtvec, D.24832
	movl	(%rax), %eax	# _28->num_elem, D.24828
	cmpl	-24(%rbp), %eax	# i, D.24828
	jg	.L1597	#,
	jmp	.L1598	#
.L1589:
	.loc 1 7851 0 is_stmt 1
	movq	-16(%rbp), %rax	# tmp, tmp125
	movzwl	(%rax), %eax	# tmp_20->code, D.24829
	cmpw	$47, %ax	#, D.24829
	jne	.L1599	#,
	.loc 1 7852 0
	movq	-16(%rbp), %rax	# tmp, tmp126
	movq	16(%rax), %rax	# tmp_20->fld[1].rtx, D.24833
	movzwl	(%rax), %eax	# _52->code, D.24829
	cmpw	$78, %ax	#, D.24829
	jne	.L1599	#,
	.loc 1 7853 0
	movl	$0, -20(%rbp)	#, win
	jmp	.L1598	#
.L1599:
	.loc 1 7854 0
	movq	-16(%rbp), %rax	# tmp, tmp127
	movzwl	(%rax), %eax	# tmp_20->code, D.24829
	cmpw	$39, %ax	#, D.24829
	jne	.L1598	#,
	.loc 1 7855 0
	movq	-16(%rbp), %rax	# tmp, tmp128
	movq	8(%rax), %rax	# tmp_20->fld[0].rtvec, D.24832
	movq	8(%rax), %rax	# _56->elem, D.24833
	movzwl	(%rax), %eax	# _57->code, D.24829
	cmpw	$47, %ax	#, D.24829
	jne	.L1598	#,
	.loc 1 7856 0
	movq	-16(%rbp), %rax	# tmp, tmp129
	movq	8(%rax), %rax	# tmp_20->fld[0].rtvec, D.24832
	movq	8(%rax), %rax	# _59->elem, D.24833
	movq	16(%rax), %rax	# _60->fld[1].rtx, D.24833
	movzwl	(%rax), %eax	# _61->code, D.24829
	cmpw	$78, %ax	#, D.24829
	jne	.L1598	#,
	.loc 1 7857 0
	movl	$0, -20(%rbp)	#, win
.L1598:
	.loc 1 7859 0
	movl	-20(%rbp), %eax	# win, D.24828
.L1587:
	.loc 1 7860 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE79:
	.size	product_cheap_p, .-product_cheap_p
	.section	.rodata
.LC60:
	.string	"Can reverse loop\n"
.LC61:
	.string	"Reversed loop"
.LC62:
	.string	" and added reg_nonneg\n"
	.text
	.type	check_dbra_loop, @function
check_dbra_loop:
.LFB80:
	.loc 1 7881 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$344, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -328(%rbp)	# loop, loop
	movl	%esi, -332(%rbp)	# insn_count, insn_count
	.loc 1 7882 0
	movq	-328(%rbp), %rax	# loop, tmp366
	movq	160(%rax), %rax	# loop_39(D)->aux, tmp367
	movq	%rax, -176(%rbp)	# tmp367, loop_info
	.loc 1 7883 0
	movq	-328(%rbp), %rax	# loop, tmp368
	movq	160(%rax), %rax	# loop_39(D)->aux, D.24835
	addq	$184, %rax	#, tmp369
	movq	%rax, -168(%rbp)	# tmp369, regs
	.loc 1 7884 0
	movq	-328(%rbp), %rax	# loop, tmp370
	movq	160(%rax), %rax	# loop_39(D)->aux, D.24835
	addq	$208, %rax	#, tmp371
	movq	%rax, -160(%rbp)	# tmp371, ivs
	.loc 1 7897 0
	movq	-328(%rbp), %rax	# loop, tmp372
	movq	192(%rax), %rax	# loop_39(D)->start, tmp373
	movq	%rax, -152(%rbp)	# tmp373, loop_start
	.loc 1 7898 0
	movq	-328(%rbp), %rax	# loop, tmp374
	movq	200(%rax), %rax	# loop_39(D)->end, tmp375
	movq	%rax, -144(%rbp)	# tmp375, loop_end
	.loc 1 7903 0
	movq	-144(%rbp), %rax	# loop_end, tmp376
	movq	16(%rax), %rax	# loop_end_46->fld[1].rtx, tmp377
	movq	%rax, -136(%rbp)	# tmp377, jump
	.loc 1 7904 0
	movq	-136(%rbp), %rdx	# jump, tmp378
	movq	-328(%rbp), %rax	# loop, tmp379
	movq	%rdx, %rsi	# tmp378,
	movq	%rax, %rdi	# tmp379,
	call	get_condition_for_loop	#
	movq	%rax, -128(%rbp)	# tmp380, comparison
	.loc 1 7905 0
	cmpq	$0, -128(%rbp)	#, comparison
	jne	.L1601	#,
	.loc 1 7906 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1601:
	.loc 1 7907 0
	movq	-136(%rbp), %rax	# jump, tmp381
	movq	%rax, %rdi	# tmp381,
	call	onlyjump_p	#
	testl	%eax, %eax	# D.24834
	jne	.L1603	#,
	.loc 1 7908 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1603:
	.loc 1 7912 0
	leaq	-280(%rbp), %rdx	#, tmp382
	movq	-136(%rbp), %rax	# jump, tmp383
	movq	%rdx, %rsi	# tmp382,
	movq	%rax, %rdi	# tmp383,
	call	get_condition	#
	.loc 1 7913 0
	movq	-280(%rbp), %rax	# first_compare, first_compare.575
	cmpq	-136(%rbp), %rax	# jump, first_compare.575
	jne	.L1604	#,
	.loc 1 7914 0
	movl	$1, -316(%rbp)	#, compare_and_branch
	jmp	.L1605	#
.L1604:
	.loc 1 7915 0
	movq	-136(%rbp), %rax	# jump, tmp384
	movq	%rax, %rdi	# tmp384,
	call	prev_nonnote_insn	#
	movq	-280(%rbp), %rdx	# first_compare, first_compare.576
	cmpq	%rdx, %rax	# first_compare.576, D.24836
	jne	.L1606	#,
	.loc 1 7916 0
	movl	$2, -316(%rbp)	#, compare_and_branch
	jmp	.L1605	#
.L1606:
	.loc 1 7918 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1605:
.LBB103:
	.loc 1 7929 0
	movq	-280(%rbp), %rax	# first_compare, first_compare.577
	movq	%rax, %rdi	# first_compare.577,
	call	prev_nonnote_insn	#
	movq	%rax, -120(%rbp)	# tmp385, jump1
	movq	-328(%rbp), %rax	# loop, tmp386
	movq	176(%rax), %rax	# loop_39(D)->cont, D.24836
	cmpq	%rax, -120(%rbp)	# D.24836, jump1
	je	.L1607	#,
	.loc 1 7930 0
	movq	-120(%rbp), %rax	# jump1, tmp387
	movzwl	(%rax), %eax	# jump1_59->code, D.24837
	cmpw	$33, %ax	#, D.24837
	jne	.L1607	#,
	.loc 1 7931 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1607:
.LBE103:
	.loc 1 7939 0
	movq	-160(%rbp), %rax	# ivs, tmp388
	movq	16(%rax), %rax	# ivs_44->list, tmp389
	movq	%rax, -272(%rbp)	# tmp389, bl
	jmp	.L1608	#
.L1611:
	.loc 1 7941 0
	movq	-272(%rbp), %rax	# bl, tmp390
	movl	4(%rax), %eax	# bl_1->biv_count, D.24834
	cmpl	$1, %eax	#, D.24834
	jne	.L1609	#,
	.loc 1 7942 0
	movq	-272(%rbp), %rax	# bl, tmp391
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movzbl	100(%rax), %eax	# *_65, D.24839
	andl	$32, %eax	#, D.24839
	testb	%al, %al	# D.24839
	jne	.L1609	#,
	.loc 1 7943 0
	movq	-272(%rbp), %rax	# bl, tmp392
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	32(%rax), %rdx	# _68->dest_reg, D.24836
	movq	-128(%rbp), %rax	# comparison, tmp393
	movq	8(%rax), %rax	# comparison_48->fld[0].rtx, D.24836
	cmpq	%rax, %rdx	# D.24836, D.24836
	jne	.L1609	#,
	.loc 1 7944 0
	movq	-280(%rbp), %rdx	# first_compare, first_compare.578
	movq	-272(%rbp), %rax	# bl, tmp394
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	(%rax), %rcx	# _72->insn, D.24836
	movq	cfun(%rip), %rax	# cfun, cfun.579
	movq	24(%rax), %rax	# cfun.579_74->emit, D.24840
	movq	80(%rax), %rsi	# _75->x_regno_reg_rtx, D.24841
	movq	-272(%rbp), %rax	# bl, tmp395
	movl	(%rax), %eax	# bl_1->regno, D.24842
	movl	%eax, %eax	# D.24842, D.24843
	salq	$3, %rax	#, D.24843
	addq	%rsi, %rax	# D.24841, D.24841
	movq	(%rax), %rax	# *_80, D.24836
	movq	%rcx, %rsi	# D.24836,
	movq	%rax, %rdi	# D.24836,
	call	reg_used_between_p	#
	testl	%eax, %eax	# D.24834
	jne	.L1609	#,
	.loc 1 7946 0
	jmp	.L1610	#
.L1609:
	.loc 1 7939 0
	movq	-272(%rbp), %rax	# bl, tmp396
	movq	64(%rax), %rax	# bl_1->next, tmp397
	movq	%rax, -272(%rbp)	# tmp397, bl
.L1608:
	.loc 1 7939 0 is_stmt 0 discriminator 1
	cmpq	$0, -272(%rbp)	#, bl
	jne	.L1611	#,
.L1610:
	.loc 1 7949 0 is_stmt 1
	cmpq	$0, -272(%rbp)	#, bl
	jne	.L1612	#,
	.loc 1 7950 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1612:
	.loc 1 7957 0
	movq	-128(%rbp), %rax	# comparison, tmp398
	movzwl	(%rax), %eax	# comparison_48->code, D.24837
	cmpw	$105, %ax	#, D.24837
	jne	.L1613	#,
	.loc 1 7958 0
	movq	-128(%rbp), %rax	# comparison, tmp399
	movq	16(%rax), %rax	# comparison_48->fld[1].rtx, D.24836
	movzwl	(%rax), %eax	# _86->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1613	#,
	.loc 1 7959 0
	movq	-128(%rbp), %rax	# comparison, tmp400
	movq	16(%rax), %rax	# comparison_48->fld[1].rtx, D.24836
	movq	8(%rax), %rax	# _88->fld[0].rtwint, D.24844
	cmpq	$-1, %rax	#, D.24844
	je	.L1614	#,
.L1613:
	.loc 1 7960 0
	movq	-128(%rbp), %rax	# comparison, tmp401
	movzwl	(%rax), %eax	# comparison_48->code, D.24837
	cmpw	$102, %ax	#, D.24837
	jne	.L1615	#,
	.loc 1 7960 0 is_stmt 0 discriminator 1
	movq	-128(%rbp), %rax	# comparison, tmp402
	movq	16(%rax), %rdx	# comparison_48->fld[1].rtx, D.24836
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24836
	cmpq	%rax, %rdx	# D.24836, D.24836
	jne	.L1615	#,
.L1614:
	.loc 1 7961 0 is_stmt 1
	movq	-272(%rbp), %rax	# bl, tmp403
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	72(%rax), %rax	# _93->add_val, D.24836
	movzwl	(%rax), %eax	# _94->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1615	#,
	.loc 1 7962 0
	movq	-272(%rbp), %rax	# bl, tmp404
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	72(%rax), %rax	# _96->add_val, D.24836
	movq	8(%rax), %rax	# _97->fld[0].rtwint, D.24844
	testq	%rax, %rax	# D.24844
	jns	.L1615	#,
	.loc 1 7968 0
	movq	-272(%rbp), %rax	# bl, tmp405
	movq	40(%rax), %rax	# bl_1->initial_value, D.24836
	movzwl	(%rax), %eax	# _99->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1616	#,
	.loc 1 7969 0
	movq	-272(%rbp), %rax	# bl, tmp406
	movq	40(%rax), %rax	# bl_1->initial_value, D.24836
	movq	8(%rax), %rax	# _101->fld[0].rtwint, D.24844
	testq	%rax, %rax	# D.24844
	jle	.L1616	#,
	.loc 1 7970 0
	movq	-272(%rbp), %rax	# bl, tmp407
	movq	40(%rax), %rax	# bl_1->initial_value, D.24836
	movq	8(%rax), %rax	# _103->fld[0].rtwint, D.24844
	.loc 1 7971 0
	movq	-272(%rbp), %rdx	# bl, tmp408
	movq	8(%rdx), %rdx	# bl_1->biv, D.24838
	movq	72(%rdx), %rdx	# _105->add_val, D.24836
	movq	8(%rdx), %rcx	# _106->fld[0].rtwint, D.24844
	cqto
	idivq	%rcx	# D.24844
	movq	%rdx, %rax	# tmp409, D.24844
	.loc 1 7970 0
	testq	%rax, %rax	# D.24844
	jne	.L1616	#,
	.loc 1 7974 0
	movq	-136(%rbp), %rax	# jump, tmp411
	movl	$0, %edx	#,
	movl	$8, %esi	#,
	movq	%rax, %rdi	# tmp411,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24836
	jne	.L1617	#,
	.loc 1 7976 0
	movq	-136(%rbp), %rax	# jump, tmp412
	movq	56(%rax), %rdx	# jump_47->fld[6].rtx, D.24836
	movq	-272(%rbp), %rax	# bl, tmp413
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	32(%rax), %rax	# _111->dest_reg, D.24836
	movq	%rdx, %rcx	# D.24836,
	movq	%rax, %rdx	# D.24836,
	movl	$8, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-136(%rbp), %rdx	# jump, tmp414
	movq	%rax, 56(%rdx)	# D.24836, jump_47->fld[6].rtx
.L1617:
	.loc 1 7978 0
	movq	-272(%rbp), %rax	# bl, tmp415
	movzbl	88(%rax), %edx	# bl_1->nonneg, tmp418
	orl	$4, %edx	#, tmp419
	movb	%dl, 88(%rax)	# tmp419, bl_1->nonneg
	.loc 1 7980 0
	movl	$1, %eax	#, D.24834
	jmp	.L1700	#
.L1616:
	.loc 1 7985 0
	movq	-152(%rbp), %rax	# loop_start, tmp420
	movq	%rax, -248(%rbp)	# tmp420, p
	jmp	.L1618	#
.L1624:
	.loc 1 7987 0
	movq	-248(%rbp), %rax	# p, tmp421
	movzwl	(%rax), %eax	# p_6->code, D.24837
	cmpw	$36, %ax	#, D.24837
	jne	.L1619	#,
	.loc 1 7988 0
	jmp	.L1620	#
.L1619:
	.loc 1 7989 0
	movq	-248(%rbp), %rax	# p, tmp422
	movzwl	(%rax), %eax	# p_6->code, D.24837
	cmpw	$33, %ax	#, D.24837
	je	.L1621	#,
	.loc 1 7990 0
	jmp	.L1622	#
.L1621:
	.loc 1 7992 0
	movq	-248(%rbp), %rdx	# p, tmp423
	movq	-328(%rbp), %rax	# loop, tmp424
	movq	%rdx, %rsi	# tmp423,
	movq	%rax, %rdi	# tmp424,
	call	get_condition_for_loop	#
	movq	%rax, -112(%rbp)	# tmp425, before_comparison
	.loc 1 7993 0
	cmpq	$0, -112(%rbp)	#, before_comparison
	je	.L1622	#,
	.loc 1 7994 0
	movq	-112(%rbp), %rax	# before_comparison, tmp426
	movq	8(%rax), %rdx	# before_comparison_118->fld[0].rtx, D.24836
	movq	-272(%rbp), %rax	# bl, tmp427
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	32(%rax), %rax	# _120->dest_reg, D.24836
	cmpq	%rax, %rdx	# D.24836, D.24836
	jne	.L1622	#,
	.loc 1 7995 0
	movq	-112(%rbp), %rax	# before_comparison, tmp428
	movzwl	(%rax), %eax	# before_comparison_118->code, D.24837
	cmpw	$107, %ax	#, D.24837
	jne	.L1622	#,
	.loc 1 7996 0
	movq	-112(%rbp), %rax	# before_comparison, tmp429
	movq	16(%rax), %rdx	# before_comparison_118->fld[1].rtx, D.24836
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24836
	cmpq	%rax, %rdx	# D.24836, D.24836
	jne	.L1622	#,
	.loc 1 7997 0
	movq	-272(%rbp), %rax	# bl, tmp430
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	32(%rax), %rax	# _125->dest_reg, D.24836
	movq	-152(%rbp), %rdx	# loop_start, tmp431
	movq	-248(%rbp), %rcx	# p, tmp432
	movq	%rcx, %rsi	# tmp432,
	movq	%rax, %rdi	# D.24836,
	call	reg_set_between_p	#
	testl	%eax, %eax	# D.24834
	jne	.L1622	#,
	.loc 1 7998 0
	movq	-272(%rbp), %rax	# bl, tmp433
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	72(%rax), %rax	# _128->add_val, D.24836
	movq	8(%rax), %rax	# _129->fld[0].rtwint, D.24844
	cmpq	$-1, %rax	#, D.24844
	jne	.L1622	#,
	.loc 1 8000 0
	movq	-136(%rbp), %rax	# jump, tmp434
	movl	$0, %edx	#,
	movl	$8, %esi	#,
	movq	%rax, %rdi	# tmp434,
	call	find_reg_note	#
	testq	%rax, %rax	# D.24836
	jne	.L1623	#,
	.loc 1 8002 0
	movq	-136(%rbp), %rax	# jump, tmp435
	movq	56(%rax), %rdx	# jump_47->fld[6].rtx, D.24836
	movq	-272(%rbp), %rax	# bl, tmp436
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	32(%rax), %rax	# _133->dest_reg, D.24836
	movq	%rdx, %rcx	# D.24836,
	movq	%rax, %rdx	# D.24836,
	movl	$8, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-136(%rbp), %rdx	# jump, tmp437
	movq	%rax, 56(%rdx)	# D.24836, jump_47->fld[6].rtx
.L1623:
	.loc 1 8004 0
	movq	-272(%rbp), %rax	# bl, tmp438
	movzbl	88(%rax), %edx	# bl_1->nonneg, tmp441
	orl	$4, %edx	#, tmp442
	movb	%dl, 88(%rax)	# tmp442, bl_1->nonneg
	.loc 1 8006 0
	movl	$1, %eax	#, D.24834
	jmp	.L1700	#
.L1622:
	.loc 1 7985 0
	movq	-248(%rbp), %rax	# p, tmp443
	movq	16(%rax), %rax	# p_6->fld[1].rtx, tmp444
	movq	%rax, -248(%rbp)	# tmp444, p
.L1618:
	.loc 1 7985 0 is_stmt 0 discriminator 1
	cmpq	$0, -248(%rbp)	#, p
	jne	.L1624	#,
.L1620:
	.loc 1 7957 0 is_stmt 1
	jmp	.L1625	#
.L1615:
	.loc 1 8010 0
	movq	-272(%rbp), %rax	# bl, tmp445
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	72(%rax), %rax	# _138->add_val, D.24836
	movzwl	(%rax), %eax	# _139->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1625	#,
	.loc 1 8011 0
	movq	-272(%rbp), %rax	# bl, tmp446
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	72(%rax), %rax	# _141->add_val, D.24836
	movq	8(%rax), %rax	# _142->fld[0].rtwint, D.24844
	testq	%rax, %rax	# D.24844
	jle	.L1625	#,
.LBB104:
	.loc 1 8024 0
	movl	$0, -312(%rbp)	#, num_nonfixed_reads
	.loc 1 8026 0
	movl	$0, -308(%rbp)	#, no_use_except_counting
	.loc 1 8029 0
	movl	$1, -304(%rbp)	#, reversible_mem_store
	.loc 1 8031 0
	movq	-272(%rbp), %rax	# bl, tmp447
	movl	16(%rax), %eax	# bl_1->giv_count, D.24834
	testl	%eax, %eax	# D.24834
	jne	.L1626	#,
	.loc 1 8032 0
	movq	-328(%rbp), %rax	# loop, tmp448
	movl	240(%rax), %eax	# loop_39(D)->exit_count, D.24834
	testl	%eax, %eax	# D.24834
	jne	.L1626	#,
	.loc 1 8033 0
	movq	-176(%rbp), %rax	# loop_info, tmp449
	movl	20(%rax), %eax	# loop_info_40->has_multiple_exit_targets, D.24834
	testl	%eax, %eax	# D.24834
	jne	.L1626	#,
.LBB105:
	.loc 1 8035 0
	movq	cfun(%rip), %rax	# cfun, cfun.580
	movq	24(%rax), %rax	# cfun.580_150->emit, D.24840
	movq	80(%rax), %rdx	# _151->x_regno_reg_rtx, D.24841
	movq	-272(%rbp), %rax	# bl, tmp450
	movl	(%rax), %eax	# bl_1->regno, D.24842
	movl	%eax, %eax	# D.24842, D.24843
	salq	$3, %rax	#, D.24843
	addq	%rdx, %rax	# D.24841, D.24841
	movq	(%rax), %rax	# *_156, tmp451
	movq	%rax, -104(%rbp)	# tmp451, bivreg
	.loc 1 8041 0
	movl	$1, -308(%rbp)	#, no_use_except_counting
	.loc 1 8042 0
	movq	-152(%rbp), %rax	# loop_start, tmp452
	movq	%rax, -248(%rbp)	# tmp452, p
	jmp	.L1627	#
.L1638:
	.loc 1 8043 0
	movq	-248(%rbp), %rax	# p, tmp453
	movzwl	(%rax), %eax	# p_7->code, D.24837
	movzwl	%ax, %eax	# D.24837, D.24834
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24845
	cmpb	$105, %al	#, D.24845
	jne	.L1628	#,
.LBB106:
	.loc 1 8045 0
	movq	-248(%rbp), %rax	# p, tmp455
	movzwl	(%rax), %eax	# p_7->code, D.24837
	movzwl	%ax, %eax	# D.24837, D.24834
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24845
	cmpb	$105, %al	#, D.24845
	jne	.L1629	#,
	.loc 1 8045 0 is_stmt 0 discriminator 1
	movq	-248(%rbp), %rax	# p, tmp457
	movq	32(%rax), %rax	# p_7->fld[3].rtx, D.24836
	movzwl	(%rax), %eax	# _166->code, D.24837
	cmpw	$47, %ax	#, D.24837
	jne	.L1630	#,
	.loc 1 8045 0 discriminator 3
	movq	-248(%rbp), %rax	# p, tmp458
	movq	32(%rax), %rax	# p_7->fld[3].rtx, iftmp.582
	jmp	.L1632	#
.L1630:
	.loc 1 8045 0 discriminator 4
	movq	-248(%rbp), %rax	# p, tmp459
	movq	32(%rax), %rdx	# p_7->fld[3].rtx, D.24836
	movq	-248(%rbp), %rax	# p, tmp460
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# tmp460,
	call	single_set_2	#
	jmp	.L1632	#
.L1629:
	.loc 1 8045 0 discriminator 2
	movl	$0, %eax	#, iftmp.581
.L1632:
	.loc 1 8045 0 discriminator 5
	movq	%rax, -96(%rbp)	# iftmp.581, set
	.loc 1 8047 0 is_stmt 1 discriminator 5
	cmpq	$0, -96(%rbp)	#, set
	je	.L1633	#,
	.loc 1 8047 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# set, tmp461
	movq	8(%rax), %rax	# set_173->fld[0].rtx, D.24836
	movzwl	(%rax), %eax	# _174->code, D.24837
	cmpw	$61, %ax	#, D.24837
	jne	.L1633	#,
	.loc 1 8048 0 is_stmt 1
	movq	-96(%rbp), %rax	# set, tmp462
	movq	8(%rax), %rax	# set_173->fld[0].rtx, D.24836
	movl	8(%rax), %edx	# _176->fld[0].rtuint, D.24842
	movq	-272(%rbp), %rax	# bl, tmp463
	movl	(%rax), %eax	# bl_1->regno, D.24842
	cmpl	%eax, %edx	# D.24842, D.24842
	jne	.L1633	#,
	.loc 1 8048 0 is_stmt 0 discriminator 1
	jmp	.L1628	#
.L1633:
	.loc 1 8051 0 is_stmt 1
	movq	-144(%rbp), %rax	# loop_end, tmp464
	movq	%rax, %rdi	# tmp464,
	call	prev_nonnote_insn	#
	movq	%rax, %rdi	# D.24836,
	call	prev_nonnote_insn	#
	cmpq	-248(%rbp), %rax	# p, D.24836
	je	.L1634	#,
	.loc 1 8052 0
	movq	-144(%rbp), %rax	# loop_end, tmp465
	movq	%rax, %rdi	# tmp465,
	call	prev_nonnote_insn	#
	cmpq	-248(%rbp), %rax	# p, D.24836
	jne	.L1635	#,
.L1634:
	.loc 1 8053 0
	movq	-248(%rbp), %rax	# p, tmp466
	movq	32(%rax), %rdx	# p_7->fld[3].rtx, D.24836
	movq	-104(%rbp), %rax	# bivreg, tmp467
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# tmp467,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24834
	je	.L1635	#,
	.loc 1 8059 0
	movq	-248(%rbp), %rax	# p, tmp468
	movq	32(%rax), %rax	# p_7->fld[3].rtx, D.24836
	movq	-168(%rbp), %rdx	# regs, tmp469
	movl	$note_set_pseudo_multiple_uses, %esi	#,
	movq	%rax, %rdi	# D.24836,
	call	note_stores	#
	.loc 1 8061 0
	movq	-168(%rbp), %rax	# regs, tmp470
	movl	16(%rax), %eax	# regs_42->multiple_uses, D.24834
	testl	%eax, %eax	# D.24834
	je	.L1636	#,
	.loc 1 8063 0
	movl	$0, -308(%rbp)	#, no_use_except_counting
	.loc 1 8064 0
	jmp	.L1637	#
.L1636:
	.loc 1 8061 0 discriminator 1
	jmp	.L1628	#
.L1635:
	.loc 1 8067 0
	movq	-248(%rbp), %rax	# p, tmp471
	movq	32(%rax), %rdx	# p_7->fld[3].rtx, D.24836
	movq	-104(%rbp), %rax	# bivreg, tmp472
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# tmp472,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24834
	je	.L1628	#,
	.loc 1 8069 0
	movl	$0, -308(%rbp)	#, no_use_except_counting
	.loc 1 8070 0
	jmp	.L1637	#
.L1628:
.LBE106:
	.loc 1 8042 0
	movq	-248(%rbp), %rax	# p, tmp473
	movq	24(%rax), %rax	# p_7->fld[2].rtx, tmp474
	movq	%rax, -248(%rbp)	# tmp474, p
.L1627:
	.loc 1 8042 0 is_stmt 0 discriminator 1
	movq	-248(%rbp), %rax	# p, tmp475
	cmpq	-144(%rbp), %rax	# loop_end, tmp475
	jne	.L1638	#,
.L1637:
	.loc 1 8076 0 is_stmt 1
	movq	-160(%rbp), %rax	# ivs, tmp476
	movq	16(%rax), %rax	# ivs_44->list, tmp477
	movq	%rax, -240(%rbp)	# tmp477, blt
	jmp	.L1639	#
.L1641:
	.loc 1 8077 0
	movq	-240(%rbp), %rax	# blt, tmp478
	movq	80(%rax), %rax	# blt_20->init_set, D.24836
	testq	%rax, %rax	# D.24836
	je	.L1640	#,
	.loc 1 8078 0
	movq	-240(%rbp), %rax	# blt, tmp479
	movq	80(%rax), %rax	# blt_20->init_set, D.24836
	movq	16(%rax), %rdx	# _193->fld[1].rtx, D.24836
	movq	-104(%rbp), %rax	# bivreg, tmp480
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# tmp480,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24834
	je	.L1640	#,
	.loc 1 8080 0
	movl	$0, -308(%rbp)	#, no_use_except_counting
	.loc 1 8081 0
	jmp	.L1626	#
.L1640:
	.loc 1 8076 0
	movq	-240(%rbp), %rax	# blt, tmp481
	movq	64(%rax), %rax	# blt_20->next, tmp482
	movq	%rax, -240(%rbp)	# tmp482, blt
.L1639:
	.loc 1 8076 0 is_stmt 0 discriminator 1
	cmpq	$0, -240(%rbp)	#, blt
	jne	.L1641	#,
.L1626:
.LBE105:
	.loc 1 8085 0 is_stmt 1
	cmpl	$0, -308(%rbp)	#, no_use_except_counting
	jne	.L1642	#,
	.loc 1 8088 0
	movq	-176(%rbp), %rax	# loop_info, tmp483
	movl	152(%rax), %eax	# loop_info_40->num_mem_sets, D.24834
	cmpl	$1, %eax	#, D.24834
	jg	.L1643	#,
	.loc 1 8090 0
	movq	-152(%rbp), %rax	# loop_start, tmp484
	movq	%rax, -248(%rbp)	# tmp484, p
	jmp	.L1644	#
.L1646:
	.loc 1 8091 0
	movq	-248(%rbp), %rax	# p, tmp485
	movzwl	(%rax), %eax	# p_8->code, D.24837
	movzwl	%ax, %eax	# D.24837, D.24834
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24845
	cmpb	$105, %al	#, D.24845
	jne	.L1645	#,
	.loc 1 8092 0
	movq	-248(%rbp), %rax	# p, tmp487
	movq	32(%rax), %rdx	# p_8->fld[3].rtx, D.24836
	movq	-328(%rbp), %rax	# loop, tmp488
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# tmp488,
	call	count_nonfixed_reads	#
	addl	%eax, -312(%rbp)	# D.24834, num_nonfixed_reads
.L1645:
	.loc 1 8090 0
	movq	-248(%rbp), %rax	# p, tmp489
	movq	24(%rax), %rax	# p_8->fld[2].rtx, tmp490
	movq	%rax, -248(%rbp)	# tmp490, p
.L1644:
	.loc 1 8090 0 is_stmt 0 discriminator 1
	movq	-248(%rbp), %rax	# p, tmp491
	cmpq	-144(%rbp), %rax	# loop_end, tmp491
	jne	.L1646	#,
	.loc 1 8100 0 is_stmt 1
	movq	-176(%rbp), %rax	# loop_info, tmp492
	movl	152(%rax), %eax	# loop_info_40->num_mem_sets, D.24834
	cmpl	$1, %eax	#, D.24834
	jne	.L1647	#,
.LBB107:
	.loc 1 8108 0
	movl	$0, -304(%rbp)	#, reversible_mem_store
	.loc 1 8113 0
	movq	-272(%rbp), %rax	# bl, tmp493
	movq	24(%rax), %rax	# bl_1->giv, tmp494
	movq	%rax, -232(%rbp)	# tmp494, v
	jmp	.L1648	#
.L1650:
	.loc 1 8115 0
	movq	-232(%rbp), %rax	# v, tmp495
	movl	24(%rax), %eax	# v_21->giv_type, D.24846
	cmpl	$1, %eax	#, D.24846
	jne	.L1649	#,
	.loc 1 8117 0
	movq	-176(%rbp), %rax	# loop_info, tmp496
	movq	160(%rax), %rax	# loop_info_40->first_loop_store_insn, D.24836
	.loc 1 8116 0
	movq	32(%rax), %rdx	# _211->fld[3].rtx, D.24836
	movq	-232(%rbp), %rax	# v, tmp497
	movq	32(%rax), %rax	# v_21->dest_reg, D.24836
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# D.24836,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24834
	je	.L1649	#,
	.loc 1 8118 0
	movq	-232(%rbp), %rax	# v, tmp498
	movq	(%rax), %rdx	# v_21->insn, D.24836
	movq	-176(%rbp), %rax	# loop_info, tmp499
	movq	160(%rax), %rax	# loop_info_40->first_loop_store_insn, D.24836
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# D.24836,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24834
	je	.L1649	#,
	.loc 1 8120 0
	movl	$0, -304(%rbp)	#, reversible_mem_store
.L1649:
	.loc 1 8113 0
	movq	-232(%rbp), %rax	# v, tmp500
	movq	128(%rax), %rax	# v_21->next_iv, tmp501
	movq	%rax, -232(%rbp)	# tmp501, v
.L1648:
	.loc 1 8113 0 is_stmt 0 discriminator 1
	cmpl	$0, -304(%rbp)	#, reversible_mem_store
	je	.L1647	#,
	.loc 1 8113 0 discriminator 2
	cmpq	$0, -232(%rbp)	#, v
	jne	.L1650	#,
.L1647:
.LBE107:
	jmp	.L1642	#
.L1643:
	.loc 1 8125 0 is_stmt 1
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1642:
	.loc 1 8135 0
	cmpl	$1, -312(%rbp)	#, num_nonfixed_reads
	jg	.L1651	#,
	.loc 1 8136 0
	movq	-176(%rbp), %rax	# loop_info, tmp502
	movl	8(%rax), %eax	# loop_info_40->has_nonconst_call, D.24834
	testl	%eax, %eax	# D.24834
	jne	.L1651	#,
	.loc 1 8137 0
	movq	-176(%rbp), %rax	# loop_info, tmp503
	movl	12(%rax), %eax	# loop_info_40->has_volatile, D.24834
	testl	%eax, %eax	# D.24834
	jne	.L1651	#,
	.loc 1 8138 0
	cmpl	$0, -304(%rbp)	#, reversible_mem_store
	je	.L1651	#,
	.loc 1 8139 0
	movq	-272(%rbp), %rax	# bl, tmp504
	movl	16(%rax), %edx	# bl_1->giv_count, D.24834
	movq	-272(%rbp), %rax	# bl, tmp505
	movl	4(%rax), %eax	# bl_1->biv_count, D.24834
	addl	%eax, %edx	# D.24834, D.24834
	movq	-176(%rbp), %rax	# loop_info, tmp506
	movl	152(%rax), %eax	# loop_info_40->num_mem_sets, D.24834
	leal	(%rdx,%rax), %ebx	#, D.24834
	.loc 1 8140 0
	movq	-328(%rbp), %rax	# loop, tmp507
	movq	%rax, %rdi	# tmp507,
	call	num_unmoved_movables	#
	leal	(%rbx,%rax), %edx	#, D.24834
	movl	-316(%rbp), %eax	# compare_and_branch, tmp508
	addl	%edx, %eax	# D.24834, D.24834
	.loc 1 8139 0
	cmpl	-332(%rbp), %eax	# insn_count, D.24834
	jne	.L1651	#,
	.loc 1 8141 0
	movq	-160(%rbp), %rax	# ivs, tmp509
	movq	16(%rax), %rax	# ivs_44->list, D.24847
	cmpq	-272(%rbp), %rax	# bl, D.24847
	jne	.L1651	#,
	.loc 1 8141 0 is_stmt 0 discriminator 1
	movq	-272(%rbp), %rax	# bl, tmp510
	movq	64(%rax), %rax	# bl_1->next, D.24847
	testq	%rax, %rax	# D.24847
	je	.L1652	#,
.L1651:
	.loc 1 8142 0 is_stmt 1
	cmpl	$0, -308(%rbp)	#, no_use_except_counting
	je	.L1625	#,
.L1652:
.LBB108:
	.loc 1 8147 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.583
	testq	%rax, %rax	# loop_dump_stream.583
	je	.L1653	#,
	.loc 1 8148 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.584
	movq	%rax, %rcx	# loop_dump_stream.584,
	movl	$17, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC60, %edi	#,
	call	fwrite	#
.L1653:
	.loc 1 8159 0
	cmpq	$0, -128(%rbp)	#, comparison
	je	.L1625	#,
	.loc 1 8161 0
	movq	-128(%rbp), %rax	# comparison, tmp511
	movzwl	(%rax), %eax	# comparison_48->code, D.24837
	cmpw	$107, %ax	#, D.24837
	je	.L1654	#,
	.loc 1 8162 0
	movq	-128(%rbp), %rax	# comparison, tmp512
	movzwl	(%rax), %eax	# comparison_48->code, D.24837
	cmpw	$106, %ax	#, D.24837
	jne	.L1625	#,
	.loc 1 8163 0
	cmpl	$0, -308(%rbp)	#, no_use_except_counting
	je	.L1625	#,
.L1654:
.LBB109:
	.loc 1 8165 0
	movq	$0, -208(%rbp)	#, comparison_val
	.loc 1 8167 0
	movl	$0, -300(%rbp)	#, nonneg
	.loc 1 8172 0
	movq	-272(%rbp), %rax	# bl, tmp513
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	72(%rax), %rax	# _240->add_val, D.24836
	movq	8(%rax), %rax	# _241->fld[0].rtwint, tmp514
	movq	%rax, -88(%rbp)	# tmp514, add_val
	.loc 1 8173 0
	movq	-128(%rbp), %rax	# comparison, tmp515
	movq	16(%rax), %rax	# comparison_48->fld[1].rtx, tmp516
	movq	%rax, -192(%rbp)	# tmp516, comparison_value
	.loc 1 8174 0
	movq	-192(%rbp), %rax	# comparison_value, tmp517
	movzbl	2(%rax), %eax	# comparison_value_243->mode, D.24839
	testb	%al, %al	# D.24839
	jne	.L1655	#,
	.loc 1 8176 0
	movq	-128(%rbp), %rax	# comparison, tmp518
	movq	8(%rax), %rax	# comparison_48->fld[0].rtx, D.24836
	movzbl	2(%rax), %eax	# _245->mode, D.24839
	movzbl	%al, %eax	# D.24839, D.24834
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24837
	movzwl	%ax, %eax	# D.24837, tmp520
	movl	%eax, -292(%rbp)	# tmp520, comparison_const_width
	jmp	.L1656	#
.L1655:
	.loc 1 8179 0
	movq	-192(%rbp), %rax	# comparison_value, tmp521
	movzbl	2(%rax), %eax	# comparison_value_243->mode, D.24839
	movzbl	%al, %eax	# D.24839, D.24834
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24837
	movzwl	%ax, %eax	# D.24837, tmp523
	movl	%eax, -292(%rbp)	# tmp523, comparison_const_width
.L1656:
	.loc 1 8180 0
	cmpl	$64, -292(%rbp)	#, comparison_const_width
	jle	.L1657	#,
	.loc 1 8181 0
	movl	$64, -292(%rbp)	#, comparison_const_width
.L1657:
	.loc 1 8183 0
	movl	-292(%rbp), %eax	# comparison_const_width, tmp524
	subl	$1, %eax	#, D.24834
	movl	$1, %edx	#, tmp525
	movl	%eax, %ecx	# D.24834, tmp710
	salq	%cl, %rdx	# tmp710, tmp526
	movq	%rdx, %rax	# tmp526, tmp526
	movq	%rax, -80(%rbp)	# tmp526, comparison_sign_mask
	.loc 1 8191 0
	movq	-192(%rbp), %rdx	# comparison_value, tmp527
	movq	-328(%rbp), %rax	# loop, tmp528
	movq	%rdx, %rsi	# tmp527,
	movq	%rax, %rdi	# tmp528,
	call	loop_invariant_p	#
	testl	%eax, %eax	# D.24834
	jne	.L1658	#,
	.loc 1 8192 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1658:
	.loc 1 8194 0
	movq	-192(%rbp), %rax	# comparison_value, tmp529
	movzwl	(%rax), %eax	# comparison_value_243->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1659	#,
	.loc 1 8195 0
	movq	-192(%rbp), %rax	# comparison_value, tmp530
	movq	8(%rax), %rax	# comparison_value_243->fld[0].rtwint, tmp531
	movq	%rax, -208(%rbp)	# tmp531, comparison_val
.L1659:
	.loc 1 8196 0
	movq	-272(%rbp), %rax	# bl, tmp532
	movq	40(%rax), %rax	# bl_1->initial_value, tmp533
	movq	%rax, -200(%rbp)	# tmp533, initial_value
	.loc 1 8201 0
	cmpl	$0, -308(%rbp)	#, no_use_except_counting
	je	.L1660	#,
	.loc 1 8202 0
	movq	-192(%rbp), %rax	# comparison_value, tmp534
	movzwl	(%rax), %eax	# comparison_value_243->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1660	#,
	.loc 1 8203 0
	movq	-200(%rbp), %rax	# initial_value, tmp535
	movzwl	(%rax), %eax	# initial_value_261->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1660	#,
	.loc 1 8205 0
	movq	-272(%rbp), %rax	# bl, tmp536
	movq	40(%rax), %rax	# bl_1->initial_value, D.24836
	movq	8(%rax), %rax	# _264->fld[0].rtwint, D.24844
	subq	%rax, -208(%rbp)	# D.24844, comparison_val
	.loc 1 8211 0
	movq	-88(%rbp), %rax	# add_val, tmp537
	movq	-208(%rbp), %rdx	# comparison_val, tmp538
	addq	%rdx, %rax	# tmp538, D.24844
	subq	$1, %rax	#, tmp539
	movq	%rax, -208(%rbp)	# tmp539, comparison_val
	.loc 1 8213 0
	movq	-208(%rbp), %rcx	# comparison_val, comparison_val.585
	movq	-208(%rbp), %rax	# comparison_val, comparison_val.586
	movq	-88(%rbp), %rsi	# add_val, add_val.587
	movl	$0, %edx	#, tmp540
	divq	%rsi	# add_val.587
	movq	%rdx, %rax	# tmp540, D.24843
	subq	%rax, %rcx	# D.24843, D.24843
	movq	%rcx, %rax	# D.24843, D.24843
	movq	%rax, -208(%rbp)	# D.24843, comparison_val
	.loc 1 8218 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, tmp542
	movq	%rax, -200(%rbp)	# tmp542, initial_value
.L1660:
	.loc 1 8222 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24836
	cmpq	-200(%rbp), %rax	# initial_value, D.24836
	jne	.L1661	#,
	.loc 1 8234 0
	movq	-192(%rbp), %rax	# comparison_value, tmp543
	movzwl	(%rax), %eax	# comparison_value_243->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1661	#,
	.loc 1 8236 0
	movq	-88(%rbp), %rax	# add_val, tmp544
	movq	-208(%rbp), %rdx	# comparison_val, tmp545
	subq	%rax, %rdx	# tmp544, D.24844
	movq	-192(%rbp), %rax	# comparison_value, tmp546
	movq	8(%rax), %rax	# comparison_value_243->fld[0].rtwint, D.24844
	xorq	%rdx, %rax	# D.24844, D.24844
	.loc 1 8237 0
	andq	-80(%rbp), %rax	# comparison_sign_mask, D.24843
	.loc 1 8236 0
	testq	%rax, %rax	# D.24843
	jne	.L1661	#,
	.loc 1 8241 0
	movq	-88(%rbp), %rax	# add_val, tmp547
	movq	%rax, -216(%rbp)	# tmp547, add_adjust
	.loc 1 8242 0
	movl	$1, -300(%rbp)	#, nonneg
	.loc 1 8243 0
	movl	$104, -296(%rbp)	#, cmp_code
	jmp	.L1662	#
.L1661:
	.loc 1 8245 0
	cmpq	$1, -88(%rbp)	#, add_val
	jne	.L1663	#,
	.loc 1 8245 0 is_stmt 0 discriminator 1
	movq	-328(%rbp), %rax	# loop, tmp548
	movq	168(%rax), %rax	# loop_39(D)->vtop, D.24836
	testq	%rax, %rax	# D.24836
	je	.L1663	#,
	.loc 1 8246 0 is_stmt 1
	movq	-272(%rbp), %rax	# bl, tmp549
	movl	4(%rax), %eax	# bl_1->biv_count, D.24834
	testl	%eax, %eax	# D.24834
	je	.L1664	#,
	.loc 1 8247 0
	cmpl	$0, -308(%rbp)	#, no_use_except_counting
	je	.L1663	#,
.L1664:
	.loc 1 8249 0
	movq	$0, -216(%rbp)	#, add_adjust
	.loc 1 8250 0
	movl	$102, -296(%rbp)	#, cmp_code
	jmp	.L1662	#
.L1663:
	.loc 1 8253 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1662:
	.loc 1 8255 0
	movq	-128(%rbp), %rax	# comparison, tmp550
	movzwl	(%rax), %eax	# comparison_48->code, D.24837
	cmpw	$106, %ax	#, D.24837
	jne	.L1665	#,
	.loc 1 8256 0
	movq	-88(%rbp), %rax	# add_val, tmp551
	subq	%rax, -216(%rbp)	# tmp551, add_adjust
.L1665:
	.loc 1 8261 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24836
	cmpq	-200(%rbp), %rax	# initial_value, D.24836
	jne	.L1666	#,
	.loc 1 8262 0
	movq	-192(%rbp), %rax	# comparison_value, tmp552
	movzwl	(%rax), %eax	# comparison_value_243->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1666	#,
	.loc 1 8264 0
	movq	-208(%rbp), %rax	# comparison_val, comparison_val.588
	movq	-88(%rbp), %rcx	# add_val, add_val.589
	movl	$0, %edx	#, tmp553
	divq	%rcx	# add_val.589
	movq	%rdx, %rax	# tmp553, D.24843
	testq	%rax, %rax	# D.24843
	je	.L1667	#,
	.loc 1 8265 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1667:
	.loc 1 8264 0 discriminator 1
	jmp	.L1668	#
.L1666:
	.loc 1 8269 0
	cmpl	$0, -308(%rbp)	#, no_use_except_counting
	je	.L1669	#,
	.loc 1 8269 0 is_stmt 0 discriminator 1
	cmpq	$1, -88(%rbp)	#, add_val
	je	.L1668	#,
.L1669:
	.loc 1 8270 0 is_stmt 1
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1668:
	.loc 1 8273 0
	movq	-192(%rbp), %rax	# comparison_value, tmp555
	movq	%rax, -264(%rbp)	# tmp555, final_value
	.loc 1 8277 0
	movq	-192(%rbp), %rax	# comparison_value, tmp556
	movzwl	(%rax), %eax	# comparison_value_243->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1670	#,
	.loc 1 8278 0
	movq	-200(%rbp), %rax	# initial_value, tmp557
	movzwl	(%rax), %eax	# initial_value_27->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1670	#,
	.loc 1 8280 0
	movq	-208(%rbp), %rax	# comparison_val, tmp558
	movq	%rax, %rsi	# tmp558,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -192(%rbp)	# tmp559, comparison_value
	.loc 1 8282 0
	movq	-272(%rbp), %rax	# bl, tmp560
	movq	40(%rax), %rax	# bl_1->initial_value, D.24836
	movq	8(%rax), %rdx	# _304->fld[0].rtwint, D.24844
	movq	-208(%rbp), %rax	# comparison_val, tmp561
	addq	%rdx, %rax	# D.24844, D.24844
	movq	%rax, %rsi	# D.24844,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -264(%rbp)	# tmp562, final_value
.L1670:
	.loc 1 8284 0
	movq	-272(%rbp), %rax	# bl, tmp563
	movq	-200(%rbp), %rdx	# initial_value, tmp564
	movq	%rdx, 40(%rax)	# tmp564, bl_1->initial_value
	.loc 1 8287 0
	movq	-272(%rbp), %rax	# bl, tmp565
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	32(%rax), %rax	# _308->dest_reg, tmp566
	movq	%rax, -72(%rbp)	# tmp566, reg
	.loc 1 8288 0
	movq	-144(%rbp), %rax	# loop_end, tmp567
	movq	16(%rax), %rax	# loop_end_46->fld[1].rtx, D.24836
	movq	%rax, %rdi	# D.24836,
	call	condjump_label	#
	movq	%rax, -64(%rbp)	# tmp568, jump_label
	.loc 1 8289 0
	movq	-272(%rbp), %rax	# bl, tmp569
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	72(%rax), %rax	# _312->add_val, D.24836
	movq	8(%rax), %rax	# _313->fld[0].rtwint, D.24844
	negq	%rax	# D.24844
	movq	%rax, %rsi	# D.24844,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -56(%rbp)	# tmp570, new_add_val
	.loc 1 8296 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.24836
	cmpq	-200(%rbp), %rax	# initial_value, D.24836
	jne	.L1671	#,
	.loc 1 8297 0
	movq	-192(%rbp), %rax	# comparison_value, tmp571
	movzwl	(%rax), %eax	# comparison_value_28->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1671	#,
	.loc 1 8299 0
	movq	-216(%rbp), %rax	# add_adjust, tmp572
	movq	-208(%rbp), %rdx	# comparison_val, tmp573
	subq	%rax, %rdx	# tmp572, D.24844
	movq	%rdx, %rax	# D.24844, D.24844
	movq	%rax, %rsi	# D.24844,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -256(%rbp)	# tmp574, start_value
	.loc 1 8300 0
	movq	-256(%rbp), %rdx	# start_value, tmp575
	movq	-72(%rbp), %rax	# reg, tmp576
	movq	%rdx, %rsi	# tmp575,
	movq	%rax, %rdi	# tmp576,
	call	gen_move_insn	#
	movq	%rax, %rdx	#, D.24836
	movq	-328(%rbp), %rax	# loop, tmp577
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# tmp577,
	call	loop_insn_hoist	#
	jmp	.L1672	#
.L1671:
	.loc 1 8302 0
	movq	-200(%rbp), %rax	# initial_value, tmp578
	movzwl	(%rax), %eax	# initial_value_27->code, D.24837
	cmpw	$54, %ax	#, D.24837
	jne	.L1673	#,
.LBB110:
	.loc 1 8304 0
	movq	-72(%rbp), %rax	# reg, tmp579
	movzbl	2(%rax), %eax	# reg_309->mode, D.24839
	movzbl	%al, %eax	# D.24839, tmp580
	movl	%eax, -288(%rbp)	# tmp580, mode
	.loc 1 8305 0
	movq	-200(%rbp), %rax	# initial_value, tmp581
	movq	8(%rax), %rax	# initial_value_27->fld[0].rtwint, D.24844
	negq	%rax	# D.24844
	subq	-216(%rbp), %rax	# add_adjust, D.24844
	movq	%rax, %rsi	# D.24844,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -48(%rbp)	# tmp582, offset
	.loc 1 8306 0
	movq	-48(%rbp), %rdx	# offset, tmp583
	movq	-192(%rbp), %rcx	# comparison_value, tmp584
	movq	-72(%rbp), %rax	# reg, tmp585
	movq	%rcx, %rsi	# tmp584,
	movq	%rax, %rdi	# tmp585,
	call	gen_add3_insn	#
	movq	%rax, -40(%rbp)	# tmp586, add_insn
	.loc 1 8308 0
	cmpq	$0, -40(%rbp)	#, add_insn
	jne	.L1674	#,
	.loc 1 8309 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1674:
	.loc 1 8312 0
	movq	-48(%rbp), %rcx	# offset, tmp587
	movq	-192(%rbp), %rdx	# comparison_value, tmp588
	movl	-288(%rbp), %eax	# mode, tmp589
	movl	%eax, %esi	# tmp589,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -256(%rbp)	# tmp590, start_value
	.loc 1 8313 0
	movq	-40(%rbp), %rdx	# add_insn, tmp591
	movq	-328(%rbp), %rax	# loop, tmp592
	movq	%rdx, %rsi	# tmp591,
	movq	%rax, %rdi	# tmp592,
	call	loop_insn_hoist	#
	.loc 1 8314 0
	movq	-128(%rbp), %rax	# comparison, tmp593
	movzwl	(%rax), %eax	# comparison_48->code, D.24837
	cmpw	$106, %ax	#, D.24837
	jne	.L1675	#,
	.loc 1 8315 0
	movq	-88(%rbp), %rax	# add_val, tmp594
	movq	%rax, %rsi	# tmp594,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.24836
	movq	-192(%rbp), %rdx	# comparison_value, tmp595
	movl	-288(%rbp), %eax	# mode, tmp596
	movl	%eax, %esi	# tmp596,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -264(%rbp)	# tmp597, final_value
.LBE110:
	jmp	.L1672	#
.L1675:
	jmp	.L1672	#
.L1673:
	.loc 1 8318 0
	cmpq	$0, -216(%rbp)	#, add_adjust
	jne	.L1676	#,
.LBB111:
	.loc 1 8320 0
	movq	-72(%rbp), %rax	# reg, tmp598
	movzbl	2(%rax), %eax	# reg_309->mode, D.24839
	movzbl	%al, %eax	# D.24839, tmp599
	movl	%eax, -284(%rbp)	# tmp599, mode
	.loc 1 8321 0
	movq	-200(%rbp), %rdx	# initial_value, tmp600
	movq	-192(%rbp), %rcx	# comparison_value, tmp601
	movq	-72(%rbp), %rax	# reg, tmp602
	movq	%rcx, %rsi	# tmp601,
	movq	%rax, %rdi	# tmp602,
	call	gen_sub3_insn	#
	movq	%rax, -32(%rbp)	# tmp603, sub_insn
	.loc 1 8324 0
	cmpq	$0, -32(%rbp)	#, sub_insn
	jne	.L1677	#,
	.loc 1 8325 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1677:
	.loc 1 8327 0
	movq	-200(%rbp), %rcx	# initial_value, tmp604
	movq	-192(%rbp), %rdx	# comparison_value, tmp605
	movl	-284(%rbp), %eax	# mode, tmp606
	movl	%eax, %esi	# tmp606,
	movl	$76, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -256(%rbp)	# tmp607, start_value
	.loc 1 8328 0
	movq	-32(%rbp), %rdx	# sub_insn, tmp608
	movq	-328(%rbp), %rax	# loop, tmp609
	movq	%rdx, %rsi	# tmp608,
	movq	%rax, %rdi	# tmp609,
	call	loop_insn_hoist	#
.LBE111:
	jmp	.L1672	#
.L1676:
	.loc 1 8333 0
	movl	$0, %eax	#, D.24834
	jmp	.L1700	#
.L1672:
	.loc 1 8337 0
	call	start_sequence	#
	.loc 1 8338 0
	movq	-56(%rbp), %rdx	# new_add_val, tmp610
	movq	-72(%rbp), %rax	# reg, tmp611
	movq	%rdx, %rsi	# tmp610,
	movq	%rax, %rdi	# tmp611,
	call	expand_inc	#
	.loc 1 8339 0
	call	gen_sequence	#
	movq	%rax, -224(%rbp)	# tmp612, tem
	.loc 1 8340 0
	call	end_sequence	#
	.loc 1 8342 0
	movq	-272(%rbp), %rax	# bl, tmp613
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	(%rax), %rdx	# _342->insn, D.24836
	movq	-224(%rbp), %rcx	# tem, tmp614
	movq	-328(%rbp), %rax	# loop, tmp615
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp615,
	call	loop_insn_emit_before	#
	movq	%rax, -248(%rbp)	# tmp616, p
	.loc 1 8343 0
	movq	-272(%rbp), %rax	# bl, tmp617
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	(%rax), %rax	# _345->insn, D.24836
	movq	%rax, %rdi	# D.24836,
	call	delete_insn	#
	.loc 1 8346 0
	movq	-272(%rbp), %rax	# bl, tmp618
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	-248(%rbp), %rdx	# p, tmp619
	movq	%rdx, (%rax)	# tmp619, _347->insn
	.loc 1 8347 0
	movq	-272(%rbp), %rax	# bl, tmp620
	movq	-256(%rbp), %rdx	# start_value, tmp621
	movq	%rdx, 40(%rax)	# tmp621, bl_1->initial_value
	.loc 1 8348 0
	movq	-272(%rbp), %rax	# bl, tmp622
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	-56(%rbp), %rdx	# new_add_val, tmp623
	movq	%rdx, 72(%rax)	# tmp623, _348->add_val
	.loc 1 8351 0
	movq	-176(%rbp), %rax	# loop_info, tmp624
	movq	-72(%rbp), %rdx	# reg, tmp625
	movq	%rdx, 32(%rax)	# tmp625, loop_info_40->initial_value
	.loc 1 8352 0
	movq	-176(%rbp), %rax	# loop_info, tmp626
	movq	-72(%rbp), %rdx	# reg, tmp627
	movq	%rdx, 56(%rax)	# tmp627, loop_info_40->initial_equiv_value
	.loc 1 8353 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.24836
	movq	-176(%rbp), %rax	# loop_info, tmp628
	movq	%rdx, 48(%rax)	# D.24836, loop_info_40->final_value
	.loc 1 8354 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.24836
	movq	-176(%rbp), %rax	# loop_info, tmp629
	movq	%rdx, 64(%rax)	# D.24836, loop_info_40->final_equiv_value
	.loc 1 8355 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.24836
	movq	-176(%rbp), %rax	# loop_info, tmp630
	movq	%rdx, 40(%rax)	# D.24836, loop_info_40->comparison_value
	.loc 1 8356 0
	movq	-176(%rbp), %rax	# loop_info, tmp631
	movl	-296(%rbp), %edx	# cmp_code, tmp632
	movl	%edx, 88(%rax)	# tmp632, loop_info_40->comparison_code
	.loc 1 8357 0
	movq	-176(%rbp), %rax	# loop_info, tmp633
	movq	-56(%rbp), %rdx	# new_add_val, tmp634
	movq	%rdx, 80(%rax)	# tmp634, loop_info_40->increment
	.loc 1 8361 0
	movq	-64(%rbp), %rax	# jump_label, tmp635
	movq	8(%rax), %rax	# jump_label_311->fld[0].rtx, D.24836
	movl	32(%rax), %edx	# _352->fld[3].rtint, D.24834
	addl	$1, %edx	#, D.24834
	movl	%edx, 32(%rax)	# D.24834, _352->fld[3].rtint
	.loc 1 8365 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.590
	movq	-272(%rbp), %rdx	# bl, tmp636
	movl	(%rdx), %edx	# bl_1->regno, D.24842
	movl	%edx, %edx	# D.24842, tmp637
	addq	$4, %rdx	#, tmp638
	movq	(%rax,%rdx,8), %rax	# reg_n_info.590_355->data.reg, D.24848
	movl	4(%rax), %edx	# _357->last_uid, D.24834
	movq	-280(%rbp), %rax	# first_compare, first_compare.591
	movl	8(%rax), %eax	# first_compare.591_359->fld[0].rtint, D.24834
	cmpl	%eax, %edx	# D.24834, D.24834
	jne	.L1678	#,
	.loc 1 8366 0
	movq	-272(%rbp), %rax	# bl, tmp639
	movq	72(%rax), %rax	# bl_1->init_insn, D.24836
	testq	%rax, %rax	# D.24836
	je	.L1678	#,
	.loc 1 8367 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.592
	movq	-272(%rbp), %rdx	# bl, tmp640
	movl	(%rdx), %edx	# bl_1->regno, D.24842
	movl	%edx, %edx	# D.24842, tmp641
	addq	$4, %rdx	#, tmp642
	movq	(%rax,%rdx,8), %rax	# reg_n_info.592_362->data.reg, D.24848
	movl	(%rax), %edx	# _364->first_uid, D.24834
	movq	-272(%rbp), %rax	# bl, tmp643
	movq	72(%rax), %rax	# bl_1->init_insn, D.24836
	movl	8(%rax), %eax	# _366->fld[0].rtint, D.24834
	cmpl	%eax, %edx	# D.24834, D.24834
	je	.L1679	#,
.L1678:
	.loc 1 8368 0
	movq	-264(%rbp), %rdx	# final_value, tmp644
	movq	-72(%rbp), %rax	# reg, tmp645
	movq	%rdx, %rsi	# tmp644,
	movq	%rax, %rdi	# tmp645,
	call	gen_move_insn	#
	movq	%rax, %rdx	#, D.24836
	movq	-328(%rbp), %rax	# loop, tmp646
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# tmp646,
	call	loop_insn_sink	#
.L1679:
	.loc 1 8371 0
	movq	-144(%rbp), %rax	# loop_end, tmp647
	movq	16(%rax), %rax	# loop_end_46->fld[1].rtx, D.24836
	movq	%rax, %rdi	# D.24836,
	call	delete_related_insns	#
	.loc 1 8372 0
	cmpl	$2, -316(%rbp)	#, compare_and_branch
	jne	.L1680	#,
	.loc 1 8373 0
	movq	-280(%rbp), %rax	# first_compare, first_compare.593
	movq	%rax, %rdi	# first_compare.593,
	call	delete_related_insns	#
.L1680:
	.loc 1 8376 0
	call	start_sequence	#
	.loc 1 8377 0
	movq	-64(%rbp), %rax	# jump_label, tmp648
	movq	8(%rax), %rcx	# jump_label_311->fld[0].rtx, D.24836
	.loc 1 8378 0
	movq	-72(%rbp), %rax	# reg, tmp649
	movzbl	2(%rax), %eax	# reg_309->mode, D.24839
	.loc 1 8377 0
	movzbl	%al, %edi	# D.24839, D.24849
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.24836
	movl	-296(%rbp), %edx	# cmp_code, tmp650
	movq	-72(%rbp), %rax	# reg, tmp651
	movq	%rcx, (%rsp)	# D.24836,
	movl	$0, %r9d	#,
	movl	%edi, %r8d	# D.24849,
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp651,
	call	emit_cmp_and_jump_insns	#
	.loc 1 8380 0
	call	gen_sequence	#
	movq	%rax, -224(%rbp)	# tmp652, tem
	.loc 1 8381 0
	call	end_sequence	#
	.loc 1 8382 0
	movq	-144(%rbp), %rdx	# loop_end, tmp653
	movq	-224(%rbp), %rax	# tem, tmp654
	movq	%rdx, %rsi	# tmp653,
	movq	%rax, %rdi	# tmp654,
	call	emit_jump_insn_before	#
	.loc 1 8384 0
	movq	-144(%rbp), %rax	# loop_end, tmp655
	movq	16(%rax), %rax	# loop_end_46->fld[1].rtx, tmp656
	movq	%rax, -224(%rbp)	# tmp656, tem
	jmp	.L1681	#
.L1683:
	.loc 1 8386 0
	movq	-224(%rbp), %rax	# tem, tmp657
	movq	16(%rax), %rax	# tem_22->fld[1].rtx, tmp658
	movq	%rax, -224(%rbp)	# tmp658, tem
.L1681:
	.loc 1 8384 0 discriminator 1
	cmpq	$0, -224(%rbp)	#, tem
	je	.L1682	#,
	.loc 1 8385 0
	movq	-224(%rbp), %rax	# tem, tmp659
	movzwl	(%rax), %eax	# tem_22->code, D.24837
	cmpw	$33, %ax	#, D.24837
	jne	.L1683	#,
.L1682:
	.loc 1 8389 0
	cmpq	$0, -224(%rbp)	#, tem
	je	.L1684	#,
	.loc 1 8390 0
	movq	-64(%rbp), %rax	# jump_label, tmp660
	movq	8(%rax), %rdx	# jump_label_311->fld[0].rtx, D.24836
	movq	-224(%rbp), %rax	# tem, tmp661
	movq	%rdx, 64(%rax)	# D.24836, tem_22->fld[7].rtx
.L1684:
	.loc 1 8392 0
	cmpl	$0, -300(%rbp)	#, nonneg
	je	.L1685	#,
	.loc 1 8394 0
	cmpq	$0, -224(%rbp)	#, tem
	je	.L1686	#,
	.loc 1 8399 0
	movq	-224(%rbp), %rax	# tem, tmp662
	movq	56(%rax), %rdx	# tem_22->fld[6].rtx, D.24836
	movq	-72(%rbp), %rax	# reg, tmp663
	movq	%rdx, %rcx	# D.24836,
	movq	%rax, %rdx	# tmp663,
	movl	$8, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-224(%rbp), %rdx	# tem, tmp664
	movq	%rax, 56(%rdx)	# D.24836, tem_22->fld[6].rtx
.L1686:
	.loc 1 8402 0
	movq	-272(%rbp), %rax	# bl, tmp665
	movzbl	88(%rax), %edx	# bl_1->nonneg, tmp668
	orl	$4, %edx	#, tmp669
	movb	%dl, 88(%rax)	# tmp669, bl_1->nonneg
.L1685:
	.loc 1 8416 0
	movq	-152(%rbp), %rax	# loop_start, tmp670
	movq	%rax, -248(%rbp)	# tmp670, p
	jmp	.L1687	#
.L1697:
	.loc 1 8417 0
	movq	-248(%rbp), %rax	# p, tmp671
	movzwl	(%rax), %eax	# p_9->code, D.24837
	movzwl	%ax, %eax	# D.24837, D.24834
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24845
	cmpb	$105, %al	#, D.24845
	jne	.L1688	#,
.LBB112:
	.loc 1 8420 0
	movq	-248(%rbp), %rax	# p, tmp673
	movzwl	(%rax), %eax	# p_9->code, D.24837
	movzwl	%ax, %eax	# D.24837, D.24834
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24845
	cmpb	$105, %al	#, D.24845
	jne	.L1689	#,
	.loc 1 8420 0 is_stmt 0 discriminator 1
	movq	-248(%rbp), %rax	# p, tmp675
	movq	32(%rax), %rax	# p_9->fld[3].rtx, D.24836
	movzwl	(%rax), %eax	# _389->code, D.24837
	cmpw	$47, %ax	#, D.24837
	jne	.L1690	#,
	.loc 1 8420 0 discriminator 3
	movq	-248(%rbp), %rax	# p, tmp676
	movq	32(%rax), %rax	# p_9->fld[3].rtx, iftmp.595
	jmp	.L1692	#
.L1690:
	.loc 1 8420 0 discriminator 4
	movq	-248(%rbp), %rax	# p, tmp677
	movq	32(%rax), %rdx	# p_9->fld[3].rtx, D.24836
	movq	-248(%rbp), %rax	# p, tmp678
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# tmp678,
	call	single_set_2	#
	jmp	.L1692	#
.L1689:
	.loc 1 8420 0 discriminator 2
	movl	$0, %eax	#, iftmp.594
.L1692:
	.loc 1 8420 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.594, set
	.loc 1 8423 0 is_stmt 1 discriminator 5
	cmpq	$0, -24(%rbp)	#, set
	je	.L1693	#,
	.loc 1 8424 0
	movq	-24(%rbp), %rax	# set, tmp679
	movq	8(%rax), %rax	# set_396->fld[0].rtx, D.24836
	movzwl	(%rax), %eax	# _397->code, D.24837
	cmpw	$61, %ax	#, D.24837
	jne	.L1693	#,
	.loc 1 8425 0
	movq	-24(%rbp), %rax	# set, tmp680
	movq	8(%rax), %rax	# set_396->fld[0].rtx, D.24836
	movl	8(%rax), %edx	# _399->fld[0].rtuint, D.24842
	movq	-160(%rbp), %rax	# ivs, tmp681
	movl	8(%rax), %eax	# ivs_44->n_regs, D.24842
	cmpl	%eax, %edx	# D.24842, D.24842
	jae	.L1693	#,
	.loc 1 8426 0
	movq	-160(%rbp), %rax	# ivs, tmp682
	movq	(%rax), %rdx	# ivs_44->regs, D.24850
	movq	-24(%rbp), %rax	# set, tmp683
	movq	8(%rax), %rax	# set_396->fld[0].rtx, D.24836
	movl	8(%rax), %eax	# _403->fld[0].rtuint, D.24842
	movl	%eax, %eax	# D.24842, D.24843
	salq	$4, %rax	#, D.24843
	addq	%rdx, %rax	# D.24850, D.24850
	movl	(%rax), %eax	# _407->type, D.24851
	cmpl	$3, %eax	#, D.24851
	jne	.L1693	#,
	.loc 1 8427 0
	movq	-160(%rbp), %rax	# ivs, tmp684
	movq	(%rax), %rdx	# ivs_44->regs, D.24850
	movq	-24(%rbp), %rax	# set, tmp685
	movq	8(%rax), %rax	# set_396->fld[0].rtx, D.24836
	movl	8(%rax), %eax	# _410->fld[0].rtuint, D.24842
	movl	%eax, %eax	# D.24842, D.24843
	salq	$4, %rax	#, D.24843
	addq	%rdx, %rax	# D.24850, D.24850
	movq	8(%rax), %rax	# _414->iv.info, D.24838
	movq	16(%rax), %rdx	# _415->src_reg, D.24836
	movq	-272(%rbp), %rax	# bl, tmp686
	movq	8(%rax), %rax	# bl_1->biv, D.24838
	movq	16(%rax), %rax	# _417->src_reg, D.24836
	cmpq	%rax, %rdx	# D.24836, D.24836
	je	.L1688	#,
.L1693:
	.loc 1 8428 0
	movq	-248(%rbp), %rax	# p, tmp690
	addq	$56, %rax	#, tmp689
	movq	%rax, -184(%rbp)	# tmp689, pnote
	jmp	.L1694	#
.L1696:
	.loc 1 8430 0
	movq	-184(%rbp), %rax	# pnote, tmp691
	movq	(%rax), %rax	# *pnote_33, D.24836
	movzbl	2(%rax), %eax	# _421->mode, D.24839
	cmpb	$4, %al	#, D.24839
	jne	.L1695	#,
	.loc 1 8432 0
	movq	-184(%rbp), %rax	# pnote, tmp692
	movq	(%rax), %rax	# *pnote_33, D.24836
	.loc 1 8431 0
	movq	8(%rax), %rdx	# _423->fld[0].rtx, D.24836
	movq	cfun(%rip), %rax	# cfun, cfun.596
	movq	24(%rax), %rax	# cfun.596_425->emit, D.24840
	movq	80(%rax), %rcx	# _426->x_regno_reg_rtx, D.24841
	movq	-272(%rbp), %rax	# bl, tmp693
	movl	(%rax), %eax	# bl_1->regno, D.24842
	movl	%eax, %eax	# D.24842, D.24843
	salq	$3, %rax	#, D.24843
	addq	%rcx, %rax	# D.24841, D.24841
	movq	(%rax), %rax	# *_431, D.24836
	movq	%rdx, %rsi	# D.24836,
	movq	%rax, %rdi	# D.24836,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24834
	je	.L1695	#,
	.loc 1 8433 0
	movq	-184(%rbp), %rax	# pnote, tmp694
	movq	(%rax), %rax	# *pnote_33, D.24836
	movq	16(%rax), %rdx	# _434->fld[1].rtx, D.24836
	movq	-184(%rbp), %rax	# pnote, tmp695
	movq	%rdx, (%rax)	# D.24836, *pnote_33
	jmp	.L1694	#
.L1695:
	.loc 1 8435 0
	movq	-184(%rbp), %rax	# pnote, tmp696
	movq	(%rax), %rax	# *pnote_33, D.24836
	addq	$16, %rax	#, tmp697
	movq	%rax, -184(%rbp)	# tmp697, pnote
.L1694:
	.loc 1 8428 0 discriminator 1
	movq	-184(%rbp), %rax	# pnote, tmp698
	movq	(%rax), %rax	# *pnote_33, D.24836
	testq	%rax, %rax	# D.24836
	jne	.L1696	#,
.L1688:
.LBE112:
	.loc 1 8416 0
	movq	-248(%rbp), %rax	# p, tmp699
	movq	24(%rax), %rax	# p_9->fld[2].rtx, tmp700
	movq	%rax, -248(%rbp)	# tmp700, p
.L1687:
	.loc 1 8416 0 is_stmt 0 discriminator 1
	movq	-248(%rbp), %rax	# p, tmp701
	cmpq	-144(%rbp), %rax	# loop_end, tmp701
	jne	.L1697	#,
	.loc 1 8443 0 is_stmt 1
	movq	-272(%rbp), %rax	# bl, tmp702
	movzbl	88(%rax), %edx	# bl_1->reversed, tmp705
	orl	$8, %edx	#, tmp706
	movb	%dl, 88(%rax)	# tmp706, bl_1->reversed
	.loc 1 8445 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.597
	testq	%rax, %rax	# loop_dump_stream.597
	je	.L1698	#,
	.loc 1 8447 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.598
	movq	%rax, %rcx	# loop_dump_stream.598,
	movl	$13, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC61, %edi	#,
	call	fwrite	#
	.loc 1 8448 0
	movq	-272(%rbp), %rax	# bl, tmp707
	movzbl	88(%rax), %eax	# *bl_1, D.24839
	andl	$4, %eax	#, D.24839
	testb	%al, %al	# D.24839
	je	.L1699	#,
	.loc 1 8449 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.599
	movq	%rax, %rcx	# loop_dump_stream.599,
	movl	$22, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC62, %edi	#,
	call	fwrite	#
	jmp	.L1698	#
.L1699:
	.loc 1 8451 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.600
	movq	%rax, %rsi	# loop_dump_stream.600,
	movl	$10, %edi	#,
	call	fputc	#
.L1698:
	.loc 1 8454 0
	movl	$1, %eax	#, D.24834
	jmp	.L1700	#
.L1625:
.LBE109:
.LBE108:
.LBE104:
	.loc 1 8459 0
	movl	$0, %eax	#, D.24834
.L1700:
	.loc 1 8460 0
	addq	$344, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE80:
	.size	check_dbra_loop, .-check_dbra_loop
	.section	.rodata
	.align 8
.LC63:
	.string	"Cannot eliminate biv %d: biv used in insn %d.\n"
.LC64:
	.string	"was"
.LC65:
	.string	"can be"
.LC66:
	.string	"biv %d %s eliminated.\n"
	.text
	.type	maybe_eliminate_biv, @function
maybe_eliminate_biv:
.LFB81:
	.loc 1 8477 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	addq	$-128, %rsp	#,
	movq	%rdi, -88(%rbp)	# loop, loop
	movq	%rsi, -96(%rbp)	# bl, bl
	movl	%edx, -100(%rbp)	# eliminate_p, eliminate_p
	movl	%ecx, -104(%rbp)	# threshold, threshold
	movl	%r8d, -108(%rbp)	# insn_count, insn_count
	.loc 1 8478 0
	movq	-88(%rbp), %rax	# loop, tmp106
	movq	160(%rax), %rax	# loop_9(D)->aux, D.24857
	addq	$208, %rax	#, tmp107
	movq	%rax, -56(%rbp)	# tmp107, ivs
	.loc 1 8479 0
	movq	-96(%rbp), %rax	# bl, tmp108
	movq	8(%rax), %rax	# bl_12(D)->biv, D.24858
	movq	32(%rax), %rax	# _13->dest_reg, tmp109
	movq	%rax, -48(%rbp)	# tmp109, reg
	.loc 1 8485 0
	movq	-88(%rbp), %rax	# loop, tmp110
	movq	192(%rax), %rax	# loop_9(D)->start, tmp111
	movq	%rax, -64(%rbp)	# tmp111, p
	jmp	.L1702	#
.L1714:
.LBB113:
	.loc 1 8487 0
	movq	-64(%rbp), %rax	# p, tmp112
	movzwl	(%rax), %eax	# p_2->code, D.24860
	movzwl	%ax, %eax	# D.24860, tmp113
	movl	%eax, -72(%rbp)	# tmp113, code
	.loc 1 8488 0
	movq	$0, -40(%rbp)	#, where_bb
	.loc 1 8489 0
	movl	-104(%rbp), %eax	# threshold, tmp114
	cmpl	-108(%rbp), %eax	# insn_count, tmp114
	jge	.L1703	#,
	.loc 1 8489 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# p, iftmp.601
	jmp	.L1704	#
.L1703:
	.loc 1 8489 0 discriminator 2
	movl	$0, %eax	#, iftmp.601
.L1704:
	.loc 1 8489 0 discriminator 3
	movq	%rax, -32(%rbp)	# iftmp.601, where_insn
	.loc 1 8492 0 is_stmt 1 discriminator 3
	movl	-72(%rbp), %eax	# code, code.602
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24861
	cmpb	$105, %al	#, D.24861
	jne	.L1705	#,
.LBB114:
	.loc 1 8494 0
	movq	-64(%rbp), %rax	# p, tmp116
	movl	$0, %edx	#,
	movl	$7, %esi	#,
	movq	%rax, %rdi	# tmp116,
	call	find_reg_note	#
	movq	%rax, -24(%rbp)	# tmp117, note
	.loc 1 8496 0
	cmpq	$0, -24(%rbp)	#, note
	je	.L1705	#,
.LBB115:
	.loc 1 8498 0
	movq	-24(%rbp), %rax	# note, tmp118
	movq	8(%rax), %rax	# note_27->fld[0].rtx, tmp119
	movq	%rax, -16(%rbp)	# tmp119, last
	.loc 1 8499 0
	movq	-16(%rbp), %rax	# last, tmp120
	movzwl	(%rax), %eax	# last_28->code, D.24860
	movzwl	%ax, %eax	# D.24860, D.24856
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24861
	cmpb	$105, %al	#, D.24861
	jne	.L1706	#,
	.loc 1 8499 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# last, tmp122
	movq	32(%rax), %rax	# last_28->fld[3].rtx, D.24859
	movzwl	(%rax), %eax	# _32->code, D.24860
	cmpw	$47, %ax	#, D.24860
	jne	.L1707	#,
	.loc 1 8499 0 discriminator 3
	movq	-16(%rbp), %rax	# last, tmp123
	movq	32(%rax), %rax	# last_28->fld[3].rtx, iftmp.604
	jmp	.L1709	#
.L1707:
	.loc 1 8499 0 discriminator 4
	movq	-16(%rbp), %rax	# last, tmp124
	movq	32(%rax), %rdx	# last_28->fld[3].rtx, D.24859
	movq	-16(%rbp), %rax	# last, tmp125
	movq	%rdx, %rsi	# D.24859,
	movq	%rax, %rdi	# tmp125,
	call	single_set_2	#
	jmp	.L1709	#
.L1706:
	.loc 1 8499 0 discriminator 2
	movl	$0, %eax	#, iftmp.603
.L1709:
	.loc 1 8499 0 discriminator 5
	movq	%rax, -8(%rbp)	# iftmp.603, set
	.loc 1 8501 0 is_stmt 1 discriminator 5
	cmpq	$0, -8(%rbp)	#, set
	je	.L1705	#,
	.loc 1 8501 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# set, tmp126
	movq	8(%rax), %rax	# set_39->fld[0].rtx, D.24859
	movzwl	(%rax), %eax	# _40->code, D.24860
	cmpw	$61, %ax	#, D.24860
	jne	.L1705	#,
.LBB116:
	.loc 1 8503 0 is_stmt 1
	movq	-8(%rbp), %rax	# set, tmp127
	movq	8(%rax), %rax	# set_39->fld[0].rtx, D.24859
	movl	8(%rax), %eax	# _42->fld[0].rtuint, tmp128
	movl	%eax, -68(%rbp)	# tmp128, regno
	.loc 1 8505 0
	movq	-56(%rbp), %rax	# ivs, tmp129
	movl	8(%rax), %eax	# ivs_11->n_regs, D.24862
	cmpl	-68(%rbp), %eax	# regno, D.24862
	jbe	.L1705	#,
	.loc 1 8506 0
	movq	-56(%rbp), %rax	# ivs, tmp130
	movq	(%rax), %rax	# ivs_11->regs, D.24863
	movl	-68(%rbp), %edx	# regno, D.24864
	salq	$4, %rdx	#, D.24864
	addq	%rdx, %rax	# D.24864, D.24863
	movl	(%rax), %eax	# _48->type, D.24865
	cmpl	$3, %eax	#, D.24865
	jne	.L1705	#,
	.loc 1 8507 0
	movq	-56(%rbp), %rax	# ivs, tmp131
	movq	(%rax), %rax	# ivs_11->regs, D.24863
	movl	-68(%rbp), %edx	# regno, D.24864
	salq	$4, %rdx	#, D.24864
	addq	%rdx, %rax	# D.24864, D.24863
	movq	8(%rax), %rax	# _53->iv.info, D.24858
	movq	16(%rax), %rdx	# _54->src_reg, D.24859
	movq	-96(%rbp), %rax	# bl, tmp132
	movq	8(%rax), %rax	# bl_12(D)->biv, D.24858
	movq	16(%rax), %rax	# _56->src_reg, D.24859
	cmpq	%rax, %rdx	# D.24859, D.24859
	jne	.L1705	#,
	.loc 1 8508 0
	movq	-16(%rbp), %rax	# last, tmp133
	movq	%rax, -64(%rbp)	# tmp133, p
.L1705:
.LBE116:
.LBE115:
.LBE114:
	.loc 1 8512 0
	cmpl	$32, -72(%rbp)	#, code
	je	.L1710	#,
	.loc 1 8512 0 is_stmt 0 discriminator 1
	cmpl	$33, -72(%rbp)	#, code
	je	.L1710	#,
	cmpl	$34, -72(%rbp)	#, code
	jne	.L1711	#,
.L1710:
	.loc 1 8513 0 is_stmt 1
	movq	-64(%rbp), %rax	# p, tmp134
	movq	32(%rax), %rdx	# p_1->fld[3].rtx, D.24859
	movq	-48(%rbp), %rax	# reg, tmp135
	movq	%rdx, %rsi	# D.24859,
	movq	%rax, %rdi	# tmp135,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24856
	je	.L1711	#,
	.loc 1 8514 0
	movq	-64(%rbp), %rax	# p, tmp136
	movq	32(%rax), %rsi	# p_1->fld[3].rtx, D.24859
	movq	-40(%rbp), %r9	# where_bb, tmp137
	movl	-100(%rbp), %r8d	# eliminate_p, tmp138
	movq	-96(%rbp), %rcx	# bl, tmp139
	movq	-64(%rbp), %rdx	# p, tmp140
	movq	-88(%rbp), %rax	# loop, tmp141
	movq	-32(%rbp), %rdi	# where_insn, tmp142
	movq	%rdi, (%rsp)	# tmp142,
	movq	%rax, %rdi	# tmp141,
	call	maybe_eliminate_biv_1	#
	testl	%eax, %eax	# D.24856
	jne	.L1711	#,
	.loc 1 8517 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.605
	testq	%rax, %rax	# loop_dump_stream.605
	je	.L1712	#,
	.loc 1 8518 0
	movq	-64(%rbp), %rax	# p, tmp143
	movl	8(%rax), %ecx	# p_1->fld[0].rtint, D.24856
	movq	-96(%rbp), %rax	# bl, tmp144
	movl	(%rax), %edx	# bl_12(D)->regno, D.24862
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.606
	movl	$.LC63, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.606,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 8521 0
	jmp	.L1713	#
.L1712:
	jmp	.L1713	#
.L1711:
.LBE113:
	.loc 1 8485 0
	movq	-64(%rbp), %rax	# p, tmp145
	movq	24(%rax), %rax	# p_1->fld[2].rtx, tmp146
	movq	%rax, -64(%rbp)	# tmp146, p
.L1702:
	.loc 1 8485 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# loop, tmp147
	movq	200(%rax), %rax	# loop_9(D)->end, D.24859
	cmpq	-64(%rbp), %rax	# p, D.24859
	jne	.L1714	#,
.L1713:
	.loc 1 8525 0 is_stmt 1
	movq	-88(%rbp), %rax	# loop, tmp148
	movq	200(%rax), %rax	# loop_9(D)->end, D.24859
	cmpq	-64(%rbp), %rax	# p, D.24859
	jne	.L1715	#,
	.loc 1 8527 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.607
	testq	%rax, %rax	# loop_dump_stream.607
	je	.L1716	#,
	.loc 1 8528 0
	cmpl	$0, -100(%rbp)	#, eliminate_p
	je	.L1717	#,
	.loc 1 8528 0 is_stmt 0 discriminator 1
	movl	$.LC64, %eax	#, iftmp.608
	jmp	.L1718	#
.L1717:
	.loc 1 8528 0 discriminator 2
	movl	$.LC65, %eax	#, iftmp.608
.L1718:
	.loc 1 8528 0 discriminator 3
	movq	-96(%rbp), %rdx	# bl, tmp149
	movl	(%rdx), %edx	# bl_12(D)->regno, D.24862
	movq	loop_dump_stream(%rip), %rdi	# loop_dump_stream, loop_dump_stream.609
	movq	%rax, %rcx	# iftmp.608,
	movl	$.LC66, %esi	#,
	movl	$0, %eax	#,
	call	fprintf	#
.L1716:
	.loc 1 8530 0 is_stmt 1
	movl	$1, %eax	#, D.24856
	jmp	.L1719	#
.L1715:
	.loc 1 8533 0
	movl	$0, %eax	#, D.24856
.L1719:
	.loc 1 8534 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE81:
	.size	maybe_eliminate_biv, .-maybe_eliminate_biv
	.globl	loop_insn_first_p
	.type	loop_insn_first_p, @function
loop_insn_first_p:
.LFB82:
	.loc 1 8542 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	movq	%rsi, -32(%rbp)	# reference, reference
	.loc 1 8545 0
	movq	-24(%rbp), %rax	# insn, tmp88
	movq	%rax, -16(%rbp)	# tmp88, p
	movq	-32(%rbp), %rax	# reference, tmp89
	movq	%rax, -8(%rbp)	# tmp89, q
.L1734:
	.loc 1 8549 0
	movq	-8(%rbp), %rax	# q, tmp90
	cmpq	-24(%rbp), %rax	# insn, tmp90
	je	.L1721	#,
	.loc 1 8549 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, p
	jne	.L1722	#,
.L1721:
	.loc 1 8550 0 is_stmt 1
	movl	$0, %eax	#, D.24870
	jmp	.L1723	#
.L1722:
	.loc 1 8551 0
	movq	-16(%rbp), %rax	# p, tmp91
	cmpq	-32(%rbp), %rax	# reference, tmp91
	je	.L1724	#,
	.loc 1 8551 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, q
	jne	.L1725	#,
.L1724:
	.loc 1 8552 0 is_stmt 1
	movl	$1, %eax	#, D.24870
	jmp	.L1723	#
.L1725:
	.loc 1 8557 0
	movq	-16(%rbp), %rax	# p, tmp92
	movl	8(%rax), %edx	# p_1->fld[0].rtint, D.24870
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.610
	cmpl	%eax, %edx	# max_uid_for_loop.610, D.24870
	jge	.L1726	#,
	.loc 1 8558 0
	movq	-8(%rbp), %rax	# q, tmp93
	movl	8(%rax), %edx	# q_3->fld[0].rtint, D.24870
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.611
	cmpl	%eax, %edx	# max_uid_for_loop.611, D.24870
	jge	.L1726	#,
	.loc 1 8559 0
	movq	-16(%rbp), %rax	# p, tmp94
	movzwl	(%rax), %eax	# p_1->code, D.24871
	cmpw	$37, %ax	#, D.24871
	je	.L1726	#,
	.loc 1 8560 0
	movq	-16(%rbp), %rax	# p, tmp95
	movl	8(%rax), %edx	# p_1->fld[0].rtint, D.24870
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.613
	cmpl	%eax, %edx	# max_uid_for_loop.613, D.24870
	jge	.L1727	#,
	.loc 1 8560 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.614
	movq	-16(%rbp), %rax	# p, tmp96
	movl	8(%rax), %eax	# p_1->fld[0].rtint, D.24870
	cltq
	salq	$2, %rax	#, D.24872
	addq	%rdx, %rax	# uid_luid.614, D.24873
	movl	(%rax), %edx	# *_21, iftmp.612
	movq	-8(%rbp), %rax	# q, tmp97
	movl	8(%rax), %ecx	# q_3->fld[0].rtint, D.24870
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.616
	cmpl	%eax, %ecx	# max_uid_for_loop.616, D.24870
	jge	.L1729	#,
	jmp	.L1735	#
.L1727:
	.loc 1 8560 0 discriminator 2
	movl	$__FUNCTION__.14155, %edx	#,
	movl	$8560, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1735:
	.loc 1 8560 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.617
	movq	-8(%rbp), %rax	# q, tmp98
	movl	8(%rax), %eax	# q_3->fld[0].rtint, D.24870
	cltq
	salq	$2, %rax	#, D.24872
	addq	%rcx, %rax	# uid_luid.617, D.24873
	movl	(%rax), %eax	# *_29, iftmp.615
	cmpl	%eax, %edx	# iftmp.615, iftmp.612
	setle	%al	#, D.24874
	movzbl	%al, %eax	# D.24874, D.24870
	jmp	.L1723	#
.L1729:
	.loc 1 8560 0 discriminator 2
	movl	$__FUNCTION__.14155, %edx	#,
	movl	$8560, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1726:
	.loc 1 8562 0 is_stmt 1
	movq	-16(%rbp), %rax	# p, tmp99
	movl	8(%rax), %edx	# p_1->fld[0].rtint, D.24870
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.618
	cmpl	%eax, %edx	# max_uid_for_loop.618, D.24870
	jge	.L1731	#,
	.loc 1 8563 0
	movq	-16(%rbp), %rax	# p, tmp100
	movzwl	(%rax), %eax	# p_1->code, D.24871
	cmpw	$37, %ax	#, D.24871
	jne	.L1732	#,
.L1731:
	.loc 1 8564 0
	movq	-16(%rbp), %rax	# p, tmp101
	movq	24(%rax), %rax	# p_1->fld[2].rtx, tmp102
	movq	%rax, -16(%rbp)	# tmp102, p
.L1732:
	.loc 1 8565 0
	movq	-8(%rbp), %rax	# q, tmp103
	movl	8(%rax), %edx	# q_3->fld[0].rtint, D.24870
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.619
	cmpl	%eax, %edx	# max_uid_for_loop.619, D.24870
	jl	.L1733	#,
	.loc 1 8566 0
	movq	-8(%rbp), %rax	# q, tmp104
	movq	24(%rax), %rax	# q_3->fld[2].rtx, tmp105
	movq	%rax, -8(%rbp)	# tmp105, q
	.loc 1 8567 0
	jmp	.L1734	#
.L1733:
	jmp	.L1734	#
.L1723:
	.loc 1 8568 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE82:
	.size	loop_insn_first_p, .-loop_insn_first_p
	.type	biv_elimination_giv_has_0_offset, @function
biv_elimination_giv_has_0_offset:
.LFB83:
	.loc 1 8577 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# biv, biv
	movq	%rsi, -16(%rbp)	# giv, giv
	movq	%rdx, -24(%rbp)	# insn, insn
	.loc 1 8582 0
	movq	-16(%rbp), %rax	# giv, tmp71
	movzbl	101(%rax), %eax	# *giv_2(D), D.24876
	andl	$1, %eax	#, D.24876
	testb	%al, %al	# D.24876
	je	.L1737	#,
	.loc 1 8583 0
	movq	-16(%rbp), %rax	# giv, tmp72
	movq	(%rax), %rax	# giv_2(D)->insn, D.24877
	movq	-24(%rbp), %rdx	# insn, tmp73
	movq	%rdx, %rsi	# tmp73,
	movq	%rax, %rdi	# D.24877,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24875
	je	.L1738	#,
	.loc 1 8584 0
	movq	-8(%rbp), %rax	# biv, tmp74
	movq	(%rax), %rdx	# biv_8(D)->insn, D.24877
	movq	-24(%rbp), %rax	# insn, tmp75
	movq	%rdx, %rsi	# D.24877,
	movq	%rax, %rdi	# tmp75,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24875
	jne	.L1739	#,
.L1738:
	.loc 1 8585 0
	movq	-8(%rbp), %rax	# biv, tmp76
	movq	(%rax), %rax	# biv_8(D)->insn, D.24877
	movq	-24(%rbp), %rdx	# insn, tmp77
	movq	%rdx, %rsi	# tmp77,
	movq	%rax, %rdi	# D.24877,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24875
	je	.L1737	#,
	.loc 1 8586 0
	movq	-16(%rbp), %rax	# giv, tmp78
	movq	(%rax), %rdx	# giv_2(D)->insn, D.24877
	movq	-24(%rbp), %rax	# insn, tmp79
	movq	%rdx, %rsi	# D.24877,
	movq	%rax, %rdi	# tmp79,
	call	loop_insn_first_p	#
	testl	%eax, %eax	# D.24875
	je	.L1737	#,
.L1739:
	.loc 1 8587 0
	movl	$0, %eax	#, D.24875
	jmp	.L1740	#
.L1737:
	.loc 1 8589 0
	movl	$1, %eax	#, D.24875
.L1740:
	.loc 1 8590 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE83:
	.size	biv_elimination_giv_has_0_offset, .-biv_elimination_giv_has_0_offset
	.type	maybe_eliminate_biv_1, @function
maybe_eliminate_biv_1:
.LFB84:
	.loc 1 8611 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	addq	$-128, %rsp	#,
	movq	%rdi, -72(%rbp)	# loop, loop
	movq	%rsi, -80(%rbp)	# x, x
	movq	%rdx, -88(%rbp)	# insn, insn
	movq	%rcx, -96(%rbp)	# bl, bl
	movl	%r8d, -100(%rbp)	# eliminate_p, eliminate_p
	movq	%r9, -112(%rbp)	# where_bb, where_bb
	.loc 1 8612 0
	movq	-80(%rbp), %rax	# x, tmp144
	movzwl	(%rax), %eax	# x_11(D)->code, D.24879
	movzwl	%ax, %eax	# D.24879, tmp145
	movl	%eax, -48(%rbp)	# tmp145, code
	.loc 1 8613 0
	movq	-96(%rbp), %rax	# bl, tmp146
	movq	8(%rax), %rax	# bl_14(D)->biv, D.24880
	movq	32(%rax), %rax	# _15->dest_reg, tmp147
	movq	%rax, -24(%rbp)	# tmp147, reg
	.loc 1 8614 0
	movq	-24(%rbp), %rax	# reg, tmp148
	movzbl	2(%rax), %eax	# reg_16->mode, D.24881
	movzbl	%al, %eax	# D.24881, tmp149
	movl	%eax, -44(%rbp)	# tmp149, mode
	.loc 1 8624 0
	movl	-48(%rbp), %eax	# code, code
	cmpl	$66, %eax	#, code
	je	.L1743	#,
	cmpl	$66, %eax	#, code
	ja	.L1744	#,
	cmpl	$47, %eax	#, code
	je	.L1745	#,
	cmpl	$61, %eax	#, code
	je	.L1746	#,
	.loc 1 8933 0
	jmp	.L1786	#
.L1744:
	.loc 1 8624 0
	cmpl	$74, %eax	#, code
	je	.L1747	#,
	cmpl	$74, %eax	#, code
	jb	.L1786	#,
	subl	$102, %eax	#, tmp151
	cmpl	$9, %eax	#, tmp151
	ja	.L1786	#,
	jmp	.L1747	#
.L1746:
	.loc 1 8629 0
	movq	-80(%rbp), %rax	# x, tmp152
	cmpq	-24(%rbp), %rax	# reg, tmp152
	jne	.L1748	#,
	.loc 1 8630 0
	movl	$0, %eax	#, D.24878
	jmp	.L1749	#
.L1748:
	.loc 1 8631 0
	movl	$1, %eax	#, D.24878
	jmp	.L1749	#
.L1745:
	.loc 1 8635 0
	movq	-80(%rbp), %rax	# x, tmp153
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.24882
	cmpq	-24(%rbp), %rax	# reg, D.24882
	jne	.L1750	#,
	.loc 1 8636 0
	movl	$1, %eax	#, D.24878
	jmp	.L1749	#
.L1750:
	.loc 1 8640 0
	movq	-96(%rbp), %rax	# bl, tmp154
	movq	24(%rax), %rax	# bl_14(D)->giv, tmp155
	movq	%rax, -40(%rbp)	# tmp155, v
	jmp	.L1751	#
.L1753:
	.loc 1 8641 0
	movq	-40(%rbp), %rax	# v, tmp156
	movl	24(%rax), %eax	# v_1->giv_type, D.24883
	cmpl	$1, %eax	#, D.24883
	jne	.L1752	#,
	.loc 1 8641 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# x, tmp157
	movq	8(%rax), %rdx	# x_11(D)->fld[0].rtx, D.24882
	movq	-40(%rbp), %rax	# v, tmp158
	movq	32(%rax), %rax	# v_1->dest_reg, D.24882
	cmpq	%rax, %rdx	# D.24882, D.24882
	jne	.L1752	#,
	.loc 1 8642 0 is_stmt 1
	movl	$1, %eax	#, D.24878
	jmp	.L1749	#
.L1752:
	.loc 1 8640 0
	movq	-40(%rbp), %rax	# v, tmp159
	movq	128(%rax), %rax	# v_1->next_iv, tmp160
	movq	%rax, -40(%rbp)	# tmp160, v
.L1751:
	.loc 1 8640 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, v
	jne	.L1753	#,
	.loc 1 8732 0 is_stmt 1
	jmp	.L1754	#
.L1747:
	.loc 1 8739 0
	movq	-80(%rbp), %rax	# x, tmp161
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.24882
	cmpq	-24(%rbp), %rax	# reg, D.24882
	jne	.L1755	#,
	.loc 1 8740 0
	movq	-80(%rbp), %rax	# x, tmp162
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, tmp163
	movq	%rax, -32(%rbp)	# tmp163, arg
	movl	$1, -60(%rbp)	#, arg_operand
	jmp	.L1756	#
.L1755:
	.loc 1 8741 0
	movq	-80(%rbp), %rax	# x, tmp164
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.24882
	cmpq	-24(%rbp), %rax	# reg, D.24882
	jne	.L1757	#,
	.loc 1 8742 0
	movq	-80(%rbp), %rax	# x, tmp165
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, tmp166
	movq	%rax, -32(%rbp)	# tmp166, arg
	movl	$0, -60(%rbp)	#, arg_operand
	jmp	.L1756	#
.L1757:
	.loc 1 8744 0
	jmp	.L1754	#
.L1756:
	.loc 1 8746 0
	movq	-32(%rbp), %rax	# arg, tmp167
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$67, %ax	#, D.24879
	je	.L1758	#,
	.loc 1 8746 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# arg, tmp168
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$68, %ax	#, D.24879
	je	.L1758	#,
	movq	-32(%rbp), %rax	# arg, tmp169
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$54, %ax	#, D.24879
	je	.L1758	#,
	movq	-32(%rbp), %rax	# arg, tmp170
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$55, %ax	#, D.24879
	je	.L1758	#,
	movq	-32(%rbp), %rax	# arg, tmp171
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$58, %ax	#, D.24879
	je	.L1758	#,
	movq	-32(%rbp), %rax	# arg, tmp172
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$134, %ax	#, D.24879
	je	.L1758	#,
	movq	-32(%rbp), %rax	# arg, tmp173
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$56, %ax	#, D.24879
	je	.L1758	#,
	movq	-32(%rbp), %rax	# arg, tmp174
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$140, %ax	#, D.24879
	jne	.L1759	#,
.L1758:
	.loc 1 8752 0 is_stmt 1
	movq	-96(%rbp), %rax	# bl, tmp175
	movq	24(%rax), %rax	# bl_14(D)->giv, tmp176
	movq	%rax, -40(%rbp)	# tmp176, v
	jmp	.L1760	#
.L1767:
	.loc 1 8753 0
	movq	-40(%rbp), %rax	# v, tmp177
	movq	64(%rax), %rax	# v_2->mult_val, D.24882
	movzwl	(%rax), %eax	# _50->code, D.24879
	cmpw	$54, %ax	#, D.24879
	jne	.L1761	#,
	.loc 1 8754 0
	movq	-40(%rbp), %rax	# v, tmp178
	movq	64(%rax), %rax	# v_2->mult_val, D.24882
	movq	8(%rax), %rax	# _52->fld[0].rtwint, D.24884
	testq	%rax, %rax	# D.24884
	jle	.L1761	#,
	.loc 1 8755 0
	movq	-40(%rbp), %rax	# v, tmp179
	movq	72(%rax), %rax	# v_2->add_val, D.24882
	movzwl	(%rax), %eax	# _54->code, D.24879
	cmpw	$68, %ax	#, D.24879
	je	.L1762	#,
	.loc 1 8756 0
	movq	-40(%rbp), %rax	# v, tmp180
	movq	72(%rax), %rax	# v_2->add_val, D.24882
	movzwl	(%rax), %eax	# _56->code, D.24879
	cmpw	$67, %ax	#, D.24879
	je	.L1762	#,
	.loc 1 8757 0
	movq	-40(%rbp), %rax	# v, tmp181
	movq	72(%rax), %rax	# v_2->add_val, D.24882
	movzwl	(%rax), %eax	# _58->code, D.24879
	cmpw	$58, %ax	#, D.24879
	je	.L1762	#,
	.loc 1 8758 0
	movq	-40(%rbp), %rax	# v, tmp182
	movq	72(%rax), %rax	# v_2->add_val, D.24882
	movzwl	(%rax), %eax	# _60->code, D.24879
	cmpw	$61, %ax	#, D.24879
	jne	.L1761	#,
	.loc 1 8759 0
	movq	-40(%rbp), %rax	# v, tmp183
	movq	72(%rax), %rax	# v_2->add_val, D.24882
	movzbl	3(%rax), %eax	# *_62, D.24881
	andl	$-128, %eax	#, D.24881
	testb	%al, %al	# D.24881
	je	.L1761	#,
.L1762:
	.loc 1 8760 0
	movq	-40(%rbp), %rax	# v, tmp184
	movzbl	100(%rax), %eax	# *v_2, D.24881
	andl	$4, %eax	#, D.24881
	testb	%al, %al	# D.24881
	jne	.L1761	#,
	.loc 1 8760 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# v, tmp185
	movzbl	100(%rax), %eax	# *v_2, D.24881
	andl	$-128, %eax	#, D.24881
	testb	%al, %al	# D.24881
	jne	.L1761	#,
	movq	-40(%rbp), %rax	# v, tmp186
	movzbl	100(%rax), %eax	# *v_2, D.24881
	andl	$8, %eax	#, D.24881
	testb	%al, %al	# D.24881
	je	.L1761	#,
	.loc 1 8761 0 is_stmt 1
	movq	-40(%rbp), %rax	# v, tmp187
	movl	48(%rax), %eax	# v_2->mode, D.24885
	cmpl	-44(%rbp), %eax	# mode, D.24885
	jne	.L1761	#,
	.loc 1 8763 0
	movq	-96(%rbp), %rax	# bl, tmp188
	movq	8(%rax), %rax	# bl_14(D)->biv, D.24880
	movq	-88(%rbp), %rdx	# insn, tmp189
	movq	-40(%rbp), %rcx	# v, tmp190
	movq	%rcx, %rsi	# tmp190,
	movq	%rax, %rdi	# D.24880,
	call	biv_elimination_giv_has_0_offset	#
	testl	%eax, %eax	# D.24878
	jne	.L1763	#,
	.loc 1 8764 0
	jmp	.L1761	#
.L1763:
	.loc 1 8766 0
	cmpl	$0, -100(%rbp)	#, eliminate_p
	jne	.L1764	#,
	.loc 1 8767 0
	movl	$1, %eax	#, D.24878
	jmp	.L1749	#
.L1764:
	.loc 1 8770 0
	movq	-40(%rbp), %rax	# v, tmp191
	movq	8(%rax), %rdx	# v_2->new_reg, D.24882
	movl	$1, %eax	#, tmp192
	subl	-60(%rbp), %eax	# arg_operand, D.24878
	cltq
	leaq	0(,%rax,8), %rcx	#, tmp194
	movq	-80(%rbp), %rax	# x, tmp196
	addq	%rcx, %rax	# tmp194, tmp195
	leaq	8(%rax), %rsi	#, D.24886
	movq	-88(%rbp), %rax	# insn, tmp197
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp197,
	call	validate_change	#
	.loc 1 8775 0
	movq	-32(%rbp), %rax	# arg, tmp198
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$54, %ax	#, D.24879
	jne	.L1765	#,
	.loc 1 8776 0
	movq	-40(%rbp), %rax	# v, tmp199
	movq	64(%rax), %rax	# v_2->mult_val, D.24882
	movzwl	(%rax), %eax	# _81->code, D.24879
	cmpw	$54, %ax	#, D.24879
	jne	.L1765	#,
	.loc 1 8777 0
	movq	-40(%rbp), %rax	# v, tmp200
	movq	72(%rax), %rax	# v_2->add_val, D.24882
	movzwl	(%rax), %eax	# _83->code, D.24879
	cmpw	$54, %ax	#, D.24879
	jne	.L1765	#,
	.loc 1 8780 0
	movq	-32(%rbp), %rax	# arg, tmp201
	movq	8(%rax), %rdx	# arg_6->fld[0].rtwint, D.24884
	movq	-40(%rbp), %rax	# v, tmp202
	movq	64(%rax), %rax	# v_2->mult_val, D.24882
	movq	8(%rax), %rax	# _86->fld[0].rtwint, D.24884
	imulq	%rax, %rdx	# D.24884, D.24884
	movq	-40(%rbp), %rax	# v, tmp203
	movq	72(%rax), %rax	# v_2->add_val, D.24882
	movq	8(%rax), %rax	# _89->fld[0].rtwint, D.24884
	.loc 1 8779 0
	addq	%rdx, %rax	# D.24884, D.24884
	movq	%rax, %rsi	# D.24884,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.24882
	movl	-60(%rbp), %eax	# arg_operand, tmp205
	cltq
	leaq	0(,%rax,8), %rcx	#, tmp206
	movq	-80(%rbp), %rax	# x, tmp208
	addq	%rcx, %rax	# tmp206, tmp207
	leaq	8(%rax), %rsi	#, D.24886
	movq	-88(%rbp), %rax	# insn, tmp209
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp209,
	call	validate_change	#
	jmp	.L1766	#
.L1765:
	.loc 1 8787 0
	movl	-44(%rbp), %eax	# mode, tmp210
	movl	%eax, %edi	# tmp210,
	call	gen_reg_rtx	#
	movq	%rax, -16(%rbp)	# tmp211, tem
	.loc 1 8788 0
	movq	-40(%rbp), %rax	# v, tmp212
	movq	72(%rax), %rcx	# v_2->add_val, D.24882
	movq	-40(%rbp), %rax	# v, tmp213
	movq	64(%rax), %rdx	# v_2->mult_val, D.24882
	movq	-112(%rbp), %r9	# where_bb, tmp214
	movq	-16(%rbp), %r8	# tem, tmp215
	movq	-32(%rbp), %rsi	# arg, tmp216
	movq	-72(%rbp), %rax	# loop, tmp217
	movq	16(%rbp), %rdi	# where_insn, tmp218
	movq	%rdi, (%rsp)	# tmp218,
	movq	%rax, %rdi	# tmp217,
	call	loop_iv_add_mult_emit_before	#
	.loc 1 8791 0
	movl	-60(%rbp), %eax	# arg_operand, tmp220
	cltq
	leaq	0(,%rax,8), %rdx	#, tmp221
	movq	-80(%rbp), %rax	# x, tmp223
	addq	%rdx, %rax	# tmp221, tmp222
	leaq	8(%rax), %rsi	#, D.24886
	movq	-16(%rbp), %rdx	# tem, tmp224
	movq	-88(%rbp), %rax	# insn, tmp225
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp225,
	call	validate_change	#
.L1766:
	.loc 1 8793 0
	call	apply_change_group	#
	testl	%eax, %eax	# D.24878
	je	.L1761	#,
	.loc 1 8794 0
	movl	$1, %eax	#, D.24878
	jmp	.L1749	#
.L1761:
	.loc 1 8752 0
	movq	-40(%rbp), %rax	# v, tmp226
	movq	128(%rax), %rax	# v_2->next_iv, tmp227
	movq	%rax, -40(%rbp)	# tmp227, v
.L1760:
	.loc 1 8752 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, v
	jne	.L1767	#,
	.loc 1 8801 0 is_stmt 1
	movq	-96(%rbp), %rax	# bl, tmp228
	movq	24(%rax), %rax	# bl_14(D)->giv, tmp229
	movq	%rax, -40(%rbp)	# tmp229, v
	jmp	.L1768	#
.L1769:
	movq	-40(%rbp), %rax	# v, tmp230
	movq	128(%rax), %rax	# v_3->next_iv, tmp231
	movq	%rax, -40(%rbp)	# tmp231, v
.L1768:
	.loc 1 8801 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, v
	jne	.L1769	#,
	.loc 1 8746 0 is_stmt 1
	jmp	.L1770	#
.L1759:
	.loc 1 8832 0
	movq	-32(%rbp), %rax	# arg, tmp232
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$61, %ax	#, D.24879
	je	.L1771	#,
	.loc 1 8832 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# arg, tmp233
	movzwl	(%rax), %eax	# arg_6->code, D.24879
	cmpw	$66, %ax	#, D.24879
	jne	.L1770	#,
.L1771:
	.loc 1 8834 0 is_stmt 1
	movq	-32(%rbp), %rdx	# arg, tmp234
	movq	-72(%rbp), %rax	# loop, tmp235
	movq	%rdx, %rsi	# tmp234,
	movq	%rax, %rdi	# tmp235,
	call	loop_invariant_p	#
	cmpl	$1, %eax	#, D.24878
	jne	.L1770	#,
	.loc 1 8840 0
	movq	-96(%rbp), %rax	# bl, tmp236
	movq	24(%rax), %rax	# bl_14(D)->giv, tmp237
	movq	%rax, -40(%rbp)	# tmp237, v
	jmp	.L1772	#
.L1773:
	movq	-40(%rbp), %rax	# v, tmp238
	movq	128(%rax), %rax	# v_4->next_iv, tmp239
	movq	%rax, -40(%rbp)	# tmp239, v
.L1772:
	.loc 1 8840 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, v
	jne	.L1773	#,
.L1770:
	.loc 1 8922 0 is_stmt 1
	movl	$0, %eax	#, D.24878
	jmp	.L1749	#
.L1743:
	.loc 1 8927 0
	movq	-96(%rbp), %rax	# bl, tmp240
	movq	24(%rax), %rax	# bl_14(D)->giv, tmp241
	movq	%rax, -40(%rbp)	# tmp241, v
	jmp	.L1774	#
.L1776:
	.loc 1 8928 0
	movq	-40(%rbp), %rax	# v, tmp242
	movl	24(%rax), %eax	# v_5->giv_type, D.24883
	testl	%eax, %eax	# D.24883
	jne	.L1775	#,
	.loc 1 8928 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# v, tmp243
	movq	40(%rax), %rax	# v_5->location, D.24886
	movq	-80(%rbp), %rdx	# x, tmp244
	addq	$8, %rdx	#, D.24886
	cmpq	%rdx, %rax	# D.24886, D.24886
	jne	.L1775	#,
	.loc 1 8929 0 is_stmt 1
	movl	$1, %eax	#, D.24878
	jmp	.L1749	#
.L1775:
	.loc 1 8927 0
	movq	-40(%rbp), %rax	# v, tmp245
	movq	128(%rax), %rax	# v_5->next_iv, tmp246
	movq	%rax, -40(%rbp)	# tmp246, v
.L1774:
	.loc 1 8927 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, v
	jne	.L1776	#,
	.loc 1 8930 0 is_stmt 1
	jmp	.L1754	#
.L1786:
	.loc 1 8933 0
	nop
.L1754:
	.loc 1 8937 0
	movl	-48(%rbp), %eax	# code, code.620
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp248
	movq	%rax, -8(%rbp)	# tmp248, fmt
	.loc 1 8938 0
	movl	-48(%rbp), %eax	# code, code.621
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.24881
	movzbl	%al, %eax	# D.24881, D.24878
	subl	$1, %eax	#, tmp250
	movl	%eax, -56(%rbp)	# tmp250, i
	jmp	.L1777	#
.L1785:
	.loc 1 8940 0
	movl	-56(%rbp), %eax	# i, tmp251
	movslq	%eax, %rdx	# tmp251, D.24887
	movq	-8(%rbp), %rax	# fmt, tmp252
	addq	%rdx, %rax	# D.24887, D.24888
	movzbl	(%rax), %eax	# *_119, D.24889
	movsbl	%al, %eax	# D.24889, D.24878
	cmpl	$69, %eax	#, D.24878
	je	.L1779	#,
	cmpl	$101, %eax	#, D.24878
	jne	.L1778	#,
	.loc 1 8943 0
	movq	-80(%rbp), %rax	# x, tmp253
	movl	-56(%rbp), %edx	# i, tmp255
	movslq	%edx, %rdx	# tmp255, tmp254
	movq	8(%rax,%rdx,8), %rsi	# x_11(D)->fld[i_8].rtx, D.24882
	movq	-112(%rbp), %r9	# where_bb, tmp256
	movl	-100(%rbp), %r8d	# eliminate_p, tmp257
	movq	-96(%rbp), %rcx	# bl, tmp258
	movq	-88(%rbp), %rdx	# insn, tmp259
	movq	-72(%rbp), %rax	# loop, tmp260
	movq	16(%rbp), %rdi	# where_insn, tmp261
	movq	%rdi, (%rsp)	# tmp261,
	movq	%rax, %rdi	# tmp260,
	call	maybe_eliminate_biv_1	#
	testl	%eax, %eax	# D.24878
	jne	.L1781	#,
	.loc 1 8945 0
	movl	$0, %eax	#, D.24878
	jmp	.L1749	#
.L1781:
	.loc 1 8946 0
	jmp	.L1778	#
.L1779:
	.loc 1 8949 0
	movq	-80(%rbp), %rax	# x, tmp262
	movl	-56(%rbp), %edx	# i, tmp264
	movslq	%edx, %rdx	# tmp264, tmp263
	movq	8(%rax,%rdx,8), %rax	# x_11(D)->fld[i_8].rtvec, D.24890
	movl	(%rax), %eax	# _125->num_elem, D.24878
	subl	$1, %eax	#, tmp265
	movl	%eax, -52(%rbp)	# tmp265, j
	jmp	.L1782	#
.L1784:
	.loc 1 8950 0
	movq	-80(%rbp), %rax	# x, tmp266
	movl	-56(%rbp), %edx	# i, tmp268
	movslq	%edx, %rdx	# tmp268, tmp267
	movq	8(%rax,%rdx,8), %rax	# x_11(D)->fld[i_8].rtvec, D.24890
	movl	-52(%rbp), %edx	# j, tmp270
	movslq	%edx, %rdx	# tmp270, tmp269
	movq	8(%rax,%rdx,8), %rsi	# _128->elem, D.24882
	movq	-112(%rbp), %r9	# where_bb, tmp271
	movl	-100(%rbp), %r8d	# eliminate_p, tmp272
	movq	-96(%rbp), %rcx	# bl, tmp273
	movq	-88(%rbp), %rdx	# insn, tmp274
	movq	-72(%rbp), %rax	# loop, tmp275
	movq	16(%rbp), %rdi	# where_insn, tmp276
	movq	%rdi, (%rsp)	# tmp276,
	movq	%rax, %rdi	# tmp275,
	call	maybe_eliminate_biv_1	#
	testl	%eax, %eax	# D.24878
	jne	.L1783	#,
	.loc 1 8952 0
	movl	$0, %eax	#, D.24878
	jmp	.L1749	#
.L1783:
	.loc 1 8949 0
	subl	$1, -52(%rbp)	#, j
.L1782:
	.loc 1 8949 0 is_stmt 0 discriminator 1
	cmpl	$0, -52(%rbp)	#, j
	jns	.L1784	#,
	.loc 1 8953 0 is_stmt 1
	nop
.L1778:
	.loc 1 8938 0
	subl	$1, -56(%rbp)	#, i
.L1777:
	.loc 1 8938 0 is_stmt 0 discriminator 1
	cmpl	$0, -56(%rbp)	#, i
	jns	.L1785	#,
	.loc 1 8957 0 is_stmt 1
	movl	$1, %eax	#, D.24878
.L1749:
	.loc 1 8958 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE84:
	.size	maybe_eliminate_biv_1, .-maybe_eliminate_biv_1
	.type	last_use_this_basic_block, @function
last_use_this_basic_block:
.LFB85:
	.loc 1 8967 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# reg, reg
	movq	%rsi, -32(%rbp)	# insn, insn
	.loc 1 8969 0
	movq	-32(%rbp), %rax	# insn, tmp68
	movq	%rax, -8(%rbp)	# tmp68, n
	jmp	.L1788	#
.L1792:
	.loc 1 8973 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.622
	movq	-24(%rbp), %rdx	# reg, tmp69
	movl	8(%rdx), %edx	# reg_8(D)->fld[0].rtuint, D.24894
	movl	%edx, %edx	# D.24894, tmp70
	addq	$4, %rdx	#, tmp71
	movq	(%rax,%rdx,8), %rax	# reg_n_info.622_7->data.reg, D.24895
	movl	4(%rax), %edx	# _10->last_uid, D.24892
	movq	-8(%rbp), %rax	# n, tmp72
	movl	8(%rax), %eax	# n_1->fld[0].rtint, D.24892
	cmpl	%eax, %edx	# D.24892, D.24892
	jne	.L1789	#,
	.loc 1 8974 0
	movl	$1, %eax	#, D.24892
	jmp	.L1790	#
.L1789:
	.loc 1 8971 0
	movq	-8(%rbp), %rax	# n, tmp73
	movq	24(%rax), %rax	# n_1->fld[2].rtx, tmp74
	movq	%rax, -8(%rbp)	# tmp74, n
.L1788:
	.loc 1 8969 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, n
	je	.L1791	#,
	.loc 1 8970 0
	movq	-8(%rbp), %rax	# n, tmp75
	movzwl	(%rax), %eax	# n_1->code, D.24893
	cmpw	$36, %ax	#, D.24893
	je	.L1791	#,
	.loc 1 8970 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# n, tmp76
	movzwl	(%rax), %eax	# n_1->code, D.24893
	cmpw	$33, %ax	#, D.24893
	jne	.L1792	#,
.L1791:
	.loc 1 8976 0 is_stmt 1
	movl	$0, %eax	#, D.24892
.L1790:
	.loc 1 8977 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE85:
	.size	last_use_this_basic_block, .-last_use_this_basic_block
	.type	record_initial, @function
record_initial:
.LFB86:
	.loc 1 8987 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# dest, dest
	movq	%rsi, -32(%rbp)	# set, set
	movq	%rdx, -40(%rbp)	# data, data
	.loc 1 8988 0
	movq	-40(%rbp), %rax	# data, tmp75
	movq	%rax, -16(%rbp)	# tmp75, ivs
	.loc 1 8991 0
	movq	-24(%rbp), %rax	# dest, tmp76
	movzwl	(%rax), %eax	# dest_3(D)->code, D.24896
	cmpw	$61, %ax	#, D.24896
	jne	.L1794	#,
	.loc 1 8992 0
	movq	-24(%rbp), %rax	# dest, tmp77
	movl	8(%rax), %edx	# dest_3(D)->fld[0].rtuint, D.24897
	movq	-16(%rbp), %rax	# ivs, tmp78
	movl	8(%rax), %eax	# ivs_2->n_regs, D.24897
	cmpl	%eax, %edx	# D.24897, D.24897
	jae	.L1794	#,
	.loc 1 8993 0
	movq	-16(%rbp), %rax	# ivs, tmp79
	movq	(%rax), %rdx	# ivs_2->regs, D.24898
	movq	-24(%rbp), %rax	# dest, tmp80
	movl	8(%rax), %eax	# dest_3(D)->fld[0].rtuint, D.24897
	movl	%eax, %eax	# D.24897, D.24899
	salq	$4, %rax	#, D.24899
	addq	%rdx, %rax	# D.24898, D.24898
	movl	(%rax), %eax	# _11->type, D.24900
	cmpl	$1, %eax	#, D.24900
	je	.L1795	#,
.L1794:
	.loc 1 8994 0
	jmp	.L1793	#
.L1795:
	.loc 1 8996 0
	movq	-16(%rbp), %rax	# ivs, tmp81
	movq	(%rax), %rdx	# ivs_2->regs, D.24898
	movq	-24(%rbp), %rax	# dest, tmp82
	movl	8(%rax), %eax	# dest_3(D)->fld[0].rtuint, D.24897
	movl	%eax, %eax	# D.24897, D.24899
	salq	$4, %rax	#, D.24899
	addq	%rdx, %rax	# D.24898, D.24898
	movq	8(%rax), %rax	# _17->iv.class, tmp83
	movq	%rax, -8(%rbp)	# tmp83, bl
	.loc 1 8999 0
	movq	-8(%rbp), %rax	# bl, tmp84
	movq	72(%rax), %rax	# bl_18->init_insn, D.24901
	testq	%rax, %rax	# D.24901
	jne	.L1793	#,
	.loc 1 9001 0
	movq	note_insn(%rip), %rdx	# note_insn, note_insn.623
	movq	-8(%rbp), %rax	# bl, tmp85
	movq	%rdx, 72(%rax)	# note_insn.623, bl_18->init_insn
	.loc 1 9002 0
	movq	-8(%rbp), %rax	# bl, tmp86
	movq	-32(%rbp), %rdx	# set, tmp87
	movq	%rdx, 80(%rax)	# tmp87, bl_18->init_set
.L1793:
	.loc 1 9004 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE86:
	.size	record_initial, .-record_initial
	.type	update_reg_last_use, @function
update_reg_last_use:
.LFB87:
	.loc 1 9015 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# x, x
	movq	%rsi, -32(%rbp)	# insn, insn
	.loc 1 9022 0
	movq	-24(%rbp), %rax	# x, tmp102
	movzwl	(%rax), %eax	# x_3(D)->code, D.24902
	cmpw	$61, %ax	#, D.24902
	jne	.L1798	#,
	.loc 1 9022 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# x, tmp103
	movl	8(%rax), %edx	# x_3(D)->fld[0].rtuint, D.24903
	movl	max_reg_before_loop(%rip), %eax	# max_reg_before_loop, max_reg_before_loop.624
	cmpl	%eax, %edx	# max_reg_before_loop.624, D.24903
	jae	.L1798	#,
	.loc 1 9023 0 is_stmt 1
	movq	-32(%rbp), %rax	# insn, tmp104
	movl	8(%rax), %edx	# insn_7(D)->fld[0].rtint, D.24904
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.625
	cmpl	%eax, %edx	# max_uid_for_loop.625, D.24904
	jge	.L1798	#,
	.loc 1 9024 0
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.626
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.627
	movq	-24(%rbp), %rdx	# x, tmp105
	movl	8(%rdx), %edx	# x_3(D)->fld[0].rtuint, D.24903
	movl	%edx, %edx	# D.24903, tmp106
	addq	$4, %rdx	#, tmp107
	movq	(%rax,%rdx,8), %rax	# reg_n_info.627_11->data.reg, D.24905
	movl	4(%rax), %eax	# _13->last_uid, D.24904
	cltq
	salq	$2, %rax	#, D.24906
	addq	%rcx, %rax	# uid_luid.626, D.24907
	movl	(%rax), %edx	# *_17, D.24904
	movq	-32(%rbp), %rax	# insn, tmp108
	movl	8(%rax), %ecx	# insn_7(D)->fld[0].rtint, D.24904
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.629
	cmpl	%eax, %ecx	# max_uid_for_loop.629, D.24904
	jge	.L1799	#,
	.loc 1 9024 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.630
	movq	-32(%rbp), %rax	# insn, tmp109
	movl	8(%rax), %eax	# insn_7(D)->fld[0].rtint, D.24904
	cltq
	salq	$2, %rax	#, D.24906
	addq	%rcx, %rax	# uid_luid.630, D.24907
	movl	(%rax), %eax	# *_25, iftmp.628
	cmpl	%eax, %edx	# iftmp.628, D.24904
	jge	.L1798	#,
	jmp	.L1808	#
.L1799:
	.loc 1 9024 0 discriminator 2
	movl	$__FUNCTION__.14245, %edx	#,
	movl	$9024, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1808:
	.loc 1 9026 0 is_stmt 1
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.631
	movq	-24(%rbp), %rdx	# x, tmp110
	movl	8(%rdx), %edx	# x_3(D)->fld[0].rtuint, D.24903
	movl	%edx, %edx	# D.24903, tmp111
	addq	$4, %rdx	#, tmp112
	movq	(%rax,%rdx,8), %rax	# reg_n_info.631_27->data.reg, D.24905
	movq	-32(%rbp), %rdx	# insn, tmp113
	movl	8(%rdx), %edx	# insn_7(D)->fld[0].rtint, D.24904
	movl	%edx, 4(%rax)	# D.24904, _29->last_uid
	jmp	.L1797	#
.L1798:
.LBB117:
	.loc 1 9031 0
	movq	-24(%rbp), %rax	# x, tmp114
	movzwl	(%rax), %eax	# x_3(D)->code, D.24902
	movzwl	%ax, %eax	# D.24902, D.24904
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp116
	movq	%rax, -8(%rbp)	# tmp116, fmt
	.loc 1 9032 0
	movq	-24(%rbp), %rax	# x, tmp117
	movzwl	(%rax), %eax	# x_3(D)->code, D.24902
	movzwl	%ax, %eax	# D.24902, D.24904
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.24908
	movzbl	%al, %eax	# D.24908, D.24904
	subl	$1, %eax	#, tmp119
	movl	%eax, -16(%rbp)	# tmp119, i
	jmp	.L1802	#
.L1807:
	.loc 1 9034 0
	movl	-16(%rbp), %eax	# i, tmp120
	movslq	%eax, %rdx	# tmp120, D.24909
	movq	-8(%rbp), %rax	# fmt, tmp121
	addq	%rdx, %rax	# D.24909, D.24910
	movzbl	(%rax), %eax	# *_40, D.24911
	cmpb	$101, %al	#, D.24911
	jne	.L1803	#,
	.loc 1 9035 0
	movq	-24(%rbp), %rax	# x, tmp122
	movl	-16(%rbp), %edx	# i, tmp124
	movslq	%edx, %rdx	# tmp124, tmp123
	movq	8(%rax,%rdx,8), %rax	# x_3(D)->fld[i_1].rtx, D.24912
	movq	-32(%rbp), %rdx	# insn, tmp125
	movq	%rdx, %rsi	# tmp125,
	movq	%rax, %rdi	# D.24912,
	call	update_reg_last_use	#
	jmp	.L1804	#
.L1803:
	.loc 1 9036 0
	movl	-16(%rbp), %eax	# i, tmp126
	movslq	%eax, %rdx	# tmp126, D.24909
	movq	-8(%rbp), %rax	# fmt, tmp127
	addq	%rdx, %rax	# D.24909, D.24910
	movzbl	(%rax), %eax	# *_44, D.24911
	cmpb	$69, %al	#, D.24911
	jne	.L1804	#,
	.loc 1 9037 0
	movq	-24(%rbp), %rax	# x, tmp128
	movl	-16(%rbp), %edx	# i, tmp130
	movslq	%edx, %rdx	# tmp130, tmp129
	movq	8(%rax,%rdx,8), %rax	# x_3(D)->fld[i_1].rtvec, D.24913
	movl	(%rax), %eax	# _46->num_elem, D.24904
	subl	$1, %eax	#, tmp131
	movl	%eax, -12(%rbp)	# tmp131, j
	jmp	.L1805	#
.L1806:
	.loc 1 9038 0 discriminator 2
	movq	-24(%rbp), %rax	# x, tmp132
	movl	-16(%rbp), %edx	# i, tmp134
	movslq	%edx, %rdx	# tmp134, tmp133
	movq	8(%rax,%rdx,8), %rax	# x_3(D)->fld[i_1].rtvec, D.24913
	movl	-12(%rbp), %edx	# j, tmp136
	movslq	%edx, %rdx	# tmp136, tmp135
	movq	8(%rax,%rdx,8), %rax	# _49->elem, D.24912
	movq	-32(%rbp), %rdx	# insn, tmp137
	movq	%rdx, %rsi	# tmp137,
	movq	%rax, %rdi	# D.24912,
	call	update_reg_last_use	#
	.loc 1 9037 0 discriminator 2
	subl	$1, -12(%rbp)	#, j
.L1805:
	.loc 1 9037 0 is_stmt 0 discriminator 1
	cmpl	$0, -12(%rbp)	#, j
	jns	.L1806	#,
.L1804:
	.loc 1 9032 0 is_stmt 1
	subl	$1, -16(%rbp)	#, i
.L1802:
	.loc 1 9032 0 is_stmt 0 discriminator 1
	cmpl	$0, -16(%rbp)	#, i
	jns	.L1807	#,
.L1797:
.LBE117:
	.loc 1 9041 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE87:
	.size	update_reg_last_use, .-update_reg_last_use
	.globl	canonicalize_condition
	.type	canonicalize_condition, @function
canonicalize_condition:
.LFB88:
	.loc 1 9073 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$144, %rsp	#,
	movq	%rdi, -104(%rbp)	# insn, insn
	movq	%rsi, -112(%rbp)	# cond, cond
	movl	%edx, -116(%rbp)	# reverse, reverse
	movq	%rcx, -128(%rbp)	# earliest, earliest
	movq	%r8, -136(%rbp)	# want_reg, want_reg
	.loc 1 9075 0
	movq	-104(%rbp), %rax	# insn, tmp160
	movq	%rax, -72(%rbp)	# tmp160, prev
	.loc 1 9079 0
	movl	$0, -84(%rbp)	#, reverse_code
	.loc 1 9082 0
	movq	-112(%rbp), %rax	# cond, tmp161
	movzwl	(%rax), %eax	# cond_31(D)->code, D.24915
	movzwl	%ax, %eax	# D.24915, tmp162
	movl	%eax, -88(%rbp)	# tmp162, code
	.loc 1 9083 0
	movq	-112(%rbp), %rax	# cond, tmp163
	movzbl	2(%rax), %eax	# cond_31(D)->mode, D.24916
	movzbl	%al, %eax	# D.24916, tmp164
	movl	%eax, -80(%rbp)	# tmp164, mode
	.loc 1 9084 0
	movq	-112(%rbp), %rax	# cond, tmp165
	movq	8(%rax), %rax	# cond_31(D)->fld[0].rtx, tmp166
	movq	%rax, -64(%rbp)	# tmp166, op0
	.loc 1 9085 0
	movq	-112(%rbp), %rax	# cond, tmp167
	movq	16(%rax), %rax	# cond_31(D)->fld[1].rtx, tmp168
	movq	%rax, -56(%rbp)	# tmp168, op1
	.loc 1 9087 0
	cmpl	$0, -116(%rbp)	#, reverse
	je	.L1810	#,
	.loc 1 9088 0
	movq	-104(%rbp), %rdx	# insn, tmp169
	movq	-112(%rbp), %rax	# cond, tmp170
	movq	%rdx, %rsi	# tmp169,
	movq	%rax, %rdi	# tmp170,
	call	reversed_comparison_code	#
	movl	%eax, -88(%rbp)	# tmp171, code
.L1810:
	.loc 1 9089 0
	cmpl	$0, -88(%rbp)	#, code
	jne	.L1811	#,
	.loc 1 9090 0
	movl	$0, %eax	#, D.24914
	jmp	.L1812	#
.L1811:
	.loc 1 9092 0
	cmpq	$0, -128(%rbp)	#, earliest
	je	.L1813	#,
	.loc 1 9093 0
	movq	-128(%rbp), %rax	# earliest, tmp172
	movq	-104(%rbp), %rdx	# insn, tmp173
	movq	%rdx, (%rax)	# tmp173, *earliest_41(D)
	.loc 1 9100 0
	jmp	.L1814	#
.L1813:
	jmp	.L1814	#
.L1831:
.LBB118:
	.loc 1 9105 0
	movq	$0, -48(%rbp)	#, x
	.loc 1 9126 0
	movq	-64(%rbp), %rax	# op0, tmp174
	movzwl	(%rax), %eax	# op0_12->code, D.24915
	cmpw	$74, %ax	#, D.24915
	jne	.L1815	#,
	.loc 1 9128 0
	movq	-64(%rbp), %rax	# op0, tmp175
	movq	16(%rax), %rax	# op0_12->fld[1].rtx, tmp176
	movq	%rax, -56(%rbp)	# tmp176, op1
	.loc 1 9129 0
	movq	-64(%rbp), %rax	# op0, tmp177
	movq	8(%rax), %rax	# op0_12->fld[0].rtx, tmp178
	movq	%rax, -64(%rbp)	# tmp178, op0
	.loc 1 9130 0
	jmp	.L1814	#
.L1815:
	.loc 1 9132 0
	movq	-64(%rbp), %rax	# op0, tmp179
	movzwl	(%rax), %eax	# op0_12->code, D.24915
	cmpw	$61, %ax	#, D.24915
	je	.L1816	#,
	.loc 1 9133 0
	jmp	.L1817	#
.L1816:
	.loc 1 9139 0
	movq	-72(%rbp), %rax	# prev, tmp180
	movq	%rax, %rdi	# tmp180,
	call	prev_nonnote_insn	#
	movq	%rax, -72(%rbp)	# tmp181, prev
	cmpq	$0, -72(%rbp)	#, prev
	je	.L1817	#,
	.loc 1 9140 0
	movq	-72(%rbp), %rax	# prev, tmp182
	movzwl	(%rax), %eax	# prev_53->code, D.24915
	cmpw	$32, %ax	#, D.24915
	jne	.L1817	#,
	.loc 1 9144 0
	movq	-72(%rbp), %rdx	# prev, tmp183
	movq	-64(%rbp), %rax	# op0, tmp184
	movq	%rdx, %rsi	# tmp183,
	movq	%rax, %rdi	# tmp184,
	call	set_of	#
	movq	%rax, -40(%rbp)	# tmp185, set
	.loc 1 9146 0
	cmpq	$0, -40(%rbp)	#, set
	je	.L1818	#,
	.loc 1 9147 0
	movq	-40(%rbp), %rax	# set, tmp186
	movzwl	(%rax), %eax	# set_55->code, D.24915
	cmpw	$47, %ax	#, D.24915
	jne	.L1817	#,
	.loc 1 9148 0
	movq	-40(%rbp), %rax	# set, tmp187
	movq	8(%rax), %rax	# set_55->fld[0].rtx, D.24919
	movq	-64(%rbp), %rdx	# op0, tmp188
	movq	%rdx, %rsi	# tmp188,
	movq	%rax, %rdi	# D.24919,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24918
	je	.L1817	#,
.L1818:
	.loc 1 9153 0
	cmpq	$0, -40(%rbp)	#, set
	je	.L1819	#,
.LBB119:
	.loc 1 9155 0
	movq	-40(%rbp), %rax	# set, tmp189
	movq	8(%rax), %rax	# set_55->fld[0].rtx, D.24919
	movzbl	2(%rax), %eax	# _59->mode, D.24916
	movzbl	%al, %eax	# D.24916, tmp190
	movl	%eax, -76(%rbp)	# tmp190, inner_mode
	.loc 1 9171 0
	movq	-40(%rbp), %rax	# set, tmp191
	movq	16(%rax), %rax	# set_55->fld[1].rtx, D.24919
	movzwl	(%rax), %eax	# _62->code, D.24915
	cmpw	$74, %ax	#, D.24915
	je	.L1820	#,
	.loc 1 9172 0
	cmpl	$102, -88(%rbp)	#, code
	je	.L1821	#,
	.loc 1 9173 0
	cmpl	$107, -88(%rbp)	#, code
	jne	.L1822	#,
	.loc 1 9174 0
	movl	-76(%rbp), %eax	# inner_mode, inner_mode.632
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24920
	cmpl	$1, %eax	#, D.24920
	jne	.L1822	#,
	.loc 1 9175 0
	movl	-76(%rbp), %eax	# inner_mode, inner_mode.633
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24915
	cmpw	$64, %ax	#, D.24915
	ja	.L1822	#,
	.loc 1 9179 0
	movl	-76(%rbp), %eax	# inner_mode, inner_mode.634
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24915
	movzwl	%ax, %eax	# D.24915, D.24918
	subl	$1, %eax	#, D.24918
	.loc 1 9177 0
	movl	$1, %edx	#, tmp195
	movl	%eax, %ecx	# D.24918, tmp275
	sarq	%cl, %rdx	# tmp275, D.24921
	movq	%rdx, %rax	# D.24921, D.24921
	andl	$1, %eax	#, D.24921
	testq	%rax, %rax	# D.24921
	je	.L1822	#,
.L1821:
	.loc 1 9187 0
	movq	-40(%rbp), %rax	# set, tmp196
	movq	16(%rax), %rax	# set_55->fld[1].rtx, D.24919
	movzwl	(%rax), %eax	# _74->code, D.24915
	movzwl	%ax, %eax	# D.24915, D.24918
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24917
	cmpb	$60, %al	#, D.24917
	jne	.L1822	#,
.L1820:
	.loc 1 9188 0
	movl	-80(%rbp), %eax	# mode, mode.635
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24920
	.loc 1 9189 0
	cmpl	$4, %eax	#, D.24920
	setne	%dl	#, D.24922
	movl	-76(%rbp), %eax	# inner_mode, inner_mode.636
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24920
	cmpl	$4, %eax	#, D.24920
	sete	%al	#, D.24922
	xorl	%edx, %eax	# D.24922, D.24922
	.loc 1 9188 0
	testb	%al, %al	# D.24922
	jne	.L1823	#,
	.loc 1 9190 0
	cmpl	$0, -80(%rbp)	#, mode
	je	.L1823	#,
	.loc 1 9190 0 is_stmt 0 discriminator 1
	cmpl	$0, -76(%rbp)	#, inner_mode
	jne	.L1822	#,
.L1823:
	.loc 1 9191 0 is_stmt 1
	movq	-40(%rbp), %rax	# set, tmp200
	movq	16(%rax), %rax	# set_55->fld[1].rtx, tmp201
	movq	%rax, -48(%rbp)	# tmp201, x
	jmp	.L1827	#
.L1822:
	.loc 1 9192 0
	cmpl	$103, -88(%rbp)	#, code
	je	.L1825	#,
	.loc 1 9193 0
	cmpl	$104, -88(%rbp)	#, code
	jne	.L1817	#,
	.loc 1 9194 0
	movl	-76(%rbp), %eax	# inner_mode, inner_mode.637
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24915
	cmpw	$64, %ax	#, D.24915
	ja	.L1817	#,
	.loc 1 9196 0
	movl	-76(%rbp), %eax	# inner_mode, inner_mode.638
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24920
	cmpl	$1, %eax	#, D.24920
	jne	.L1817	#,
	.loc 1 9199 0
	movl	-76(%rbp), %eax	# inner_mode, inner_mode.639
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24915
	movzwl	%ax, %eax	# D.24915, D.24918
	subl	$1, %eax	#, D.24918
	.loc 1 9197 0
	movl	$1, %edx	#, tmp205
	movl	%eax, %ecx	# D.24918, tmp277
	sarq	%cl, %rdx	# tmp277, D.24921
	movq	%rdx, %rax	# D.24921, D.24921
	andl	$1, %eax	#, D.24921
	testq	%rax, %rax	# D.24921
	je	.L1817	#,
.L1825:
	.loc 1 9207 0
	movq	-40(%rbp), %rax	# set, tmp206
	movq	16(%rax), %rax	# set_55->fld[1].rtx, D.24919
	movzwl	(%rax), %eax	# _96->code, D.24915
	movzwl	%ax, %eax	# D.24915, D.24918
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24917
	cmpb	$60, %al	#, D.24917
	jne	.L1817	#,
	.loc 1 9208 0
	movl	-80(%rbp), %eax	# mode, mode.640
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24920
	.loc 1 9209 0
	cmpl	$4, %eax	#, D.24920
	setne	%dl	#, D.24922
	movl	-76(%rbp), %eax	# inner_mode, inner_mode.641
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24920
	cmpl	$4, %eax	#, D.24920
	sete	%al	#, D.24922
	xorl	%edx, %eax	# D.24922, D.24922
	.loc 1 9208 0
	testb	%al, %al	# D.24922
	jne	.L1826	#,
	.loc 1 9210 0
	cmpl	$0, -80(%rbp)	#, mode
	je	.L1826	#,
	.loc 1 9210 0 is_stmt 0 discriminator 1
	cmpl	$0, -76(%rbp)	#, inner_mode
	jne	.L1817	#,
.L1826:
	.loc 1 9213 0 is_stmt 1
	movl	$1, -84(%rbp)	#, reverse_code
	.loc 1 9214 0
	movq	-40(%rbp), %rax	# set, tmp210
	movq	16(%rax), %rax	# set_55->fld[1].rtx, tmp211
	movq	%rax, -48(%rbp)	# tmp211, x
.LBE119:
	jmp	.L1827	#
.L1819:
	.loc 1 9220 0
	movq	-72(%rbp), %rdx	# prev, tmp212
	movq	-64(%rbp), %rax	# op0, tmp213
	movq	%rdx, %rsi	# tmp212,
	movq	%rax, %rdi	# tmp213,
	call	reg_set_p	#
	testl	%eax, %eax	# D.24918
	je	.L1827	#,
	.loc 1 9222 0
	jmp	.L1817	#
.L1827:
	.loc 1 9224 0
	cmpq	$0, -48(%rbp)	#, x
	je	.L1814	#,
	.loc 1 9226 0
	movq	-48(%rbp), %rax	# x, tmp214
	movzwl	(%rax), %eax	# x_26->code, D.24915
	movzwl	%ax, %eax	# D.24915, D.24918
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24917
	cmpb	$60, %al	#, D.24917
	jne	.L1828	#,
	.loc 1 9227 0
	movq	-48(%rbp), %rax	# x, tmp216
	movzwl	(%rax), %eax	# x_26->code, D.24915
	movzwl	%ax, %eax	# D.24915, tmp217
	movl	%eax, -88(%rbp)	# tmp217, code
.L1828:
	.loc 1 9228 0
	cmpl	$0, -84(%rbp)	#, reverse_code
	je	.L1829	#,
	.loc 1 9230 0
	movq	-72(%rbp), %rdx	# prev, tmp218
	movq	-48(%rbp), %rax	# x, tmp219
	movq	%rdx, %rsi	# tmp218,
	movq	%rax, %rdi	# tmp219,
	call	reversed_comparison_code	#
	movl	%eax, -88(%rbp)	# tmp220, code
	.loc 1 9231 0
	cmpl	$0, -88(%rbp)	#, code
	jne	.L1830	#,
	.loc 1 9232 0
	movl	$0, %eax	#, D.24914
	jmp	.L1812	#
.L1830:
	.loc 1 9233 0
	movl	$0, -84(%rbp)	#, reverse_code
.L1829:
	.loc 1 9236 0
	movq	-48(%rbp), %rax	# x, tmp221
	movq	8(%rax), %rax	# x_26->fld[0].rtx, tmp222
	movq	%rax, -64(%rbp)	# tmp222, op0
	movq	-48(%rbp), %rax	# x, tmp223
	movq	16(%rax), %rax	# x_26->fld[1].rtx, tmp224
	movq	%rax, -56(%rbp)	# tmp224, op1
	.loc 1 9237 0
	cmpq	$0, -128(%rbp)	#, earliest
	je	.L1814	#,
	.loc 1 9238 0
	movq	-128(%rbp), %rax	# earliest, tmp225
	movq	-72(%rbp), %rdx	# prev, tmp226
	movq	%rdx, (%rax)	# tmp226, *earliest_41(D)
.L1814:
.LBE118:
	.loc 1 9100 0 discriminator 1
	movl	-88(%rbp), %eax	# code, code.642
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24917
	cmpb	$60, %al	#, D.24917
	jne	.L1817	#,
	.loc 1 9101 0
	movq	-64(%rbp), %rax	# op0, tmp228
	movzbl	2(%rax), %eax	# op0_12->mode, D.24916
	movzbl	%al, %eax	# D.24916, D.24918
	cltq
	movq	const_tiny_rtx(,%rax,8), %rax	# const_tiny_rtx, D.24919
	cmpq	-56(%rbp), %rax	# op1, D.24919
	jne	.L1817	#,
	.loc 1 9102 0
	movq	-64(%rbp), %rax	# op0, tmp230
	cmpq	-136(%rbp), %rax	# want_reg, tmp230
	jne	.L1831	#,
.L1817:
	.loc 1 9243 0
	movq	-64(%rbp), %rax	# op0, tmp231
	movzwl	(%rax), %eax	# op0_12->code, D.24915
	cmpw	$67, %ax	#, D.24915
	je	.L1832	#,
	.loc 1 9243 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# op0, tmp232
	movzwl	(%rax), %eax	# op0_12->code, D.24915
	cmpw	$68, %ax	#, D.24915
	je	.L1832	#,
	movq	-64(%rbp), %rax	# op0, tmp233
	movzwl	(%rax), %eax	# op0_12->code, D.24915
	cmpw	$54, %ax	#, D.24915
	je	.L1832	#,
	movq	-64(%rbp), %rax	# op0, tmp234
	movzwl	(%rax), %eax	# op0_12->code, D.24915
	cmpw	$55, %ax	#, D.24915
	je	.L1832	#,
	movq	-64(%rbp), %rax	# op0, tmp235
	movzwl	(%rax), %eax	# op0_12->code, D.24915
	cmpw	$58, %ax	#, D.24915
	je	.L1832	#,
	movq	-64(%rbp), %rax	# op0, tmp236
	movzwl	(%rax), %eax	# op0_12->code, D.24915
	cmpw	$134, %ax	#, D.24915
	je	.L1832	#,
	movq	-64(%rbp), %rax	# op0, tmp237
	movzwl	(%rax), %eax	# op0_12->code, D.24915
	cmpw	$56, %ax	#, D.24915
	je	.L1832	#,
	movq	-64(%rbp), %rax	# op0, tmp238
	movzwl	(%rax), %eax	# op0_12->code, D.24915
	cmpw	$140, %ax	#, D.24915
	jne	.L1833	#,
.L1832:
	.loc 1 9244 0 is_stmt 1
	movl	-88(%rbp), %eax	# code, tmp239
	movl	%eax, %edi	# tmp239,
	call	swap_condition	#
	movl	%eax, -88(%rbp)	# tmp240, code
	movq	-64(%rbp), %rax	# op0, tmp241
	movq	%rax, -32(%rbp)	# tmp241, tem
	movq	-56(%rbp), %rax	# op1, tmp242
	movq	%rax, -64(%rbp)	# tmp242, op0
	movq	-32(%rbp), %rax	# tem, tmp243
	movq	%rax, -56(%rbp)	# tmp243, op1
.L1833:
	.loc 1 9248 0
	movq	-64(%rbp), %rax	# op0, tmp244
	movzbl	2(%rax), %eax	# op0_13->mode, D.24916
	movzbl	%al, %eax	# D.24916, D.24918
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24920
	cmpl	$4, %eax	#, D.24920
	jne	.L1834	#,
	.loc 1 9249 0
	movl	$0, %eax	#, D.24914
	jmp	.L1812	#
.L1834:
	.loc 1 9255 0
	movq	-56(%rbp), %rax	# op1, tmp246
	movzwl	(%rax), %eax	# op1_15->code, D.24915
	cmpw	$54, %ax	#, D.24915
	jne	.L1835	#,
	.loc 1 9256 0
	movq	-64(%rbp), %rax	# op0, tmp247
	movzbl	2(%rax), %eax	# op0_13->mode, D.24916
	testb	%al, %al	# D.24916
	je	.L1835	#,
	.loc 1 9257 0
	movq	-64(%rbp), %rax	# op0, tmp248
	movzbl	2(%rax), %eax	# op0_13->mode, D.24916
	movzbl	%al, %eax	# D.24916, D.24918
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24915
	cmpw	$64, %ax	#, D.24915
	ja	.L1835	#,
.LBB120:
	.loc 1 9259 0
	movq	-56(%rbp), %rax	# op1, tmp250
	movq	8(%rax), %rax	# op1_15->fld[0].rtwint, tmp251
	movq	%rax, -24(%rbp)	# tmp251, const_val
	.loc 1 9260 0
	movq	-24(%rbp), %rax	# const_val, tmp252
	movq	%rax, -16(%rbp)	# tmp252, uconst_val
	.loc 1 9262 0
	movq	-64(%rbp), %rax	# op0, tmp253
	movzbl	2(%rax), %eax	# op0_13->mode, D.24916
	movzbl	%al, %eax	# D.24916, D.24918
	.loc 1 9261 0
	cltq
	movq	mode_mask_array(,%rax,8), %rax	# mode_mask_array, tmp255
	movq	%rax, -8(%rbp)	# tmp255, max_val
	.loc 1 9264 0
	movl	-88(%rbp), %eax	# code, code
	cmpl	$106, %eax	#, code
	je	.L1837	#,
	cmpl	$106, %eax	#, code
	ja	.L1838	#,
	cmpl	$104, %eax	#, code
	je	.L1839	#,
	.loc 1 9291 0
	jmp	.L1835	#
.L1838:
	.loc 1 9264 0
	cmpl	$108, %eax	#, code
	je	.L1840	#,
	cmpl	$110, %eax	#, code
	je	.L1841	#,
	.loc 1 9291 0
	jmp	.L1835	#
.L1837:
	.loc 1 9267 0
	movq	-24(%rbp), %rax	# const_val, const_val.643
	movq	-8(%rbp), %rdx	# max_val, tmp257
	shrq	%rdx	# D.24923
	cmpq	%rdx, %rax	# D.24923, const_val.643
	je	.L1842	#,
	.loc 1 9268 0
	movl	$107, -88(%rbp)	#, code
	movq	-24(%rbp), %rax	# const_val, tmp258
	addq	$1, %rax	#, D.24921
	movq	%rax, %rsi	# D.24921,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -56(%rbp)	# tmp259, op1
	.loc 1 9269 0
	jmp	.L1835	#
.L1842:
	jmp	.L1835	#
.L1839:
	.loc 1 9274 0
	movq	-24(%rbp), %rax	# const_val, const_val.644
	andq	-8(%rbp), %rax	# max_val, D.24923
	movq	%rax, %rdx	# D.24923, D.24921
	.loc 1 9276 0
	movq	-64(%rbp), %rax	# op0, tmp260
	movzbl	2(%rax), %eax	# op0_13->mode, D.24916
	movzbl	%al, %eax	# D.24916, D.24918
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.24915
	movzwl	%ax, %eax	# D.24915, D.24918
	subl	$1, %eax	#, D.24918
	movl	$1, %esi	#, tmp262
	movl	%eax, %ecx	# D.24918, tmp279
	salq	%cl, %rsi	# tmp279, D.24921
	movq	%rsi, %rax	# D.24921, D.24921
	.loc 1 9274 0
	cmpq	%rax, %rdx	# D.24921, D.24921
	je	.L1843	#,
	.loc 1 9277 0
	movl	$105, -88(%rbp)	#, code
	movq	-24(%rbp), %rax	# const_val, tmp263
	subq	$1, %rax	#, D.24921
	movq	%rax, %rsi	# D.24921,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -56(%rbp)	# tmp264, op1
	.loc 1 9278 0
	jmp	.L1835	#
.L1843:
	jmp	.L1835	#
.L1841:
	.loc 1 9281 0
	movq	-16(%rbp), %rax	# uconst_val, tmp265
	cmpq	-8(%rbp), %rax	# max_val, tmp265
	jae	.L1844	#,
	.loc 1 9282 0
	movl	$111, -88(%rbp)	#, code
	movq	-16(%rbp), %rax	# uconst_val, tmp266
	addq	$1, %rax	#, D.24923
	movq	%rax, %rsi	# D.24921,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -56(%rbp)	# tmp267, op1
	.loc 1 9283 0
	jmp	.L1835	#
.L1844:
	jmp	.L1835	#
.L1840:
	.loc 1 9286 0
	cmpq	$0, -16(%rbp)	#, uconst_val
	je	.L1845	#,
	.loc 1 9287 0
	movl	$109, -88(%rbp)	#, code
	movq	-16(%rbp), %rax	# uconst_val, tmp268
	subq	$1, %rax	#, D.24923
	movq	%rax, %rsi	# D.24921,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -56(%rbp)	# tmp269, op1
	.loc 1 9288 0
	jmp	.L1846	#
.L1845:
.L1846:
	nop
.L1835:
.LBE120:
	.loc 1 9301 0
	movq	-56(%rbp), %rcx	# op1, tmp270
	movq	-64(%rbp), %rdx	# op0, tmp271
	movl	-88(%rbp), %eax	# code, tmp272
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp272,
	call	gen_rtx_fmt_ee	#
.L1812:
	.loc 1 9302 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE88:
	.size	canonicalize_condition, .-canonicalize_condition
	.globl	get_condition
	.type	get_condition, @function
get_condition:
.LFB89:
	.loc 1 9318 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# jump, jump
	movq	%rsi, -48(%rbp)	# earliest, earliest
	.loc 1 9324 0
	movq	-40(%rbp), %rax	# jump, tmp72
	movzwl	(%rax), %eax	# jump_3(D)->code, D.24926
	cmpw	$33, %ax	#, D.24926
	jne	.L1848	#,
	.loc 1 9325 0
	movq	-40(%rbp), %rax	# jump, tmp73
	movq	%rax, %rdi	# tmp73,
	call	any_condjump_p	#
	testl	%eax, %eax	# D.24927
	jne	.L1849	#,
.L1848:
	.loc 1 9326 0
	movl	$0, %eax	#, D.24925
	jmp	.L1850	#
.L1849:
	.loc 1 9327 0
	movq	-40(%rbp), %rax	# jump, tmp74
	movq	%rax, %rdi	# tmp74,
	call	pc_set	#
	movq	%rax, -16(%rbp)	# tmp75, set
	.loc 1 9329 0
	movq	-16(%rbp), %rax	# set, tmp76
	movq	16(%rax), %rax	# set_6->fld[1].rtx, D.24928
	movq	8(%rax), %rax	# _7->fld[0].rtx, tmp77
	movq	%rax, -8(%rbp)	# tmp77, cond
	.loc 1 9334 0
	movq	-16(%rbp), %rax	# set, tmp78
	movq	16(%rax), %rax	# set_6->fld[1].rtx, D.24928
	movq	24(%rax), %rax	# _9->fld[2].rtx, D.24928
	movzwl	(%rax), %eax	# _10->code, D.24926
	.loc 1 9335 0
	cmpw	$67, %ax	#, D.24926
	jne	.L1851	#,
	.loc 1 9335 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# set, tmp79
	movq	16(%rax), %rax	# set_6->fld[1].rtx, D.24928
	movq	24(%rax), %rax	# _12->fld[2].rtx, D.24928
	movq	8(%rax), %rdx	# _13->fld[0].rtx, D.24928
	movq	-40(%rbp), %rax	# jump, tmp80
	movq	64(%rax), %rax	# jump_3(D)->fld[7].rtx, D.24928
	cmpq	%rax, %rdx	# D.24928, D.24928
	jne	.L1851	#,
	.loc 1 9335 0 discriminator 3
	movl	$1, %eax	#, iftmp.645
	jmp	.L1852	#
.L1851:
	.loc 1 9335 0 discriminator 2
	movl	$0, %eax	#, iftmp.645
.L1852:
	.loc 1 9334 0 is_stmt 1
	movl	%eax, -20(%rbp)	# iftmp.645, reverse
	.loc 1 9337 0
	movq	-48(%rbp), %rcx	# earliest, tmp81
	movl	-20(%rbp), %edx	# reverse, tmp82
	movq	-8(%rbp), %rsi	# cond, tmp83
	movq	-40(%rbp), %rax	# jump, tmp84
	movl	$0, %r8d	#,
	movq	%rax, %rdi	# tmp84,
	call	canonicalize_condition	#
.L1850:
	.loc 1 9338 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE89:
	.size	get_condition, .-get_condition
	.globl	get_condition_for_loop
	.type	get_condition_for_loop, @function
get_condition_for_loop:
.LFB90:
	.loc 1 9347 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$32, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -40(%rbp)	# loop, loop
	movq	%rsi, -48(%rbp)	# x, x
	.loc 1 9348 0
	movq	-48(%rbp), %rax	# x, tmp70
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp70,
	call	get_condition	#
	movq	%rax, -24(%rbp)	# tmp71, comparison
	.loc 1 9350 0
	cmpq	$0, -24(%rbp)	#, comparison
	je	.L1854	#,
	.loc 1 9351 0
	movq	-24(%rbp), %rax	# comparison, tmp72
	movq	8(%rax), %rdx	# comparison_3->fld[0].rtx, D.24930
	movq	-40(%rbp), %rax	# loop, tmp73
	movq	%rdx, %rsi	# D.24930,
	movq	%rax, %rdi	# tmp73,
	call	loop_invariant_p	#
	testl	%eax, %eax	# D.24931
	je	.L1854	#,
	.loc 1 9352 0
	movq	-24(%rbp), %rax	# comparison, tmp74
	movq	16(%rax), %rdx	# comparison_3->fld[1].rtx, D.24930
	movq	-40(%rbp), %rax	# loop, tmp75
	movq	%rdx, %rsi	# D.24930,
	movq	%rax, %rdi	# tmp75,
	call	loop_invariant_p	#
	testl	%eax, %eax	# D.24931
	je	.L1855	#,
.L1854:
	.loc 1 9353 0
	movq	-24(%rbp), %rax	# comparison, D.24929
	jmp	.L1856	#
.L1855:
	.loc 1 9355 0
	movq	-24(%rbp), %rax	# comparison, tmp76
	movq	8(%rax), %r12	# comparison_3->fld[0].rtx, D.24930
	movq	-24(%rbp), %rax	# comparison, tmp77
	movq	16(%rax), %rbx	# comparison_3->fld[1].rtx, D.24930
	movq	-24(%rbp), %rax	# comparison, tmp78
	movzwl	(%rax), %eax	# comparison_3->code, D.24932
	movzwl	%ax, %eax	# D.24932, D.24933
	movl	%eax, %edi	# D.24933,
	call	swap_condition	#
	movq	%r12, %rcx	# D.24930,
	movq	%rbx, %rdx	# D.24930,
	movl	$0, %esi	#,
	movl	%eax, %edi	# D.24933,
	call	gen_rtx_fmt_ee	#
.L1856:
	.loc 1 9357 0
	addq	$32, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE90:
	.size	get_condition_for_loop, .-get_condition_for_loop
	.type	indirect_jump_in_function_p, @function
indirect_jump_in_function_p:
.LFB91:
	.loc 1 9366 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# start, start
	.loc 1 9369 0
	movq	-24(%rbp), %rax	# start, tmp62
	movq	%rax, -8(%rbp)	# tmp62, insn
	jmp	.L1858	#
.L1861:
	.loc 1 9370 0
	movq	-8(%rbp), %rax	# insn, tmp63
	movq	%rax, %rdi	# tmp63,
	call	computed_jump_p	#
	testl	%eax, %eax	# D.24934
	je	.L1859	#,
	.loc 1 9371 0
	movl	$1, %eax	#, D.24934
	jmp	.L1860	#
.L1859:
	.loc 1 9369 0
	movq	-8(%rbp), %rax	# insn, tmp64
	movq	24(%rax), %rax	# insn_1->fld[2].rtx, tmp65
	movq	%rax, -8(%rbp)	# tmp65, insn
.L1858:
	.loc 1 9369 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, insn
	jne	.L1861	#,
	.loc 1 9373 0 is_stmt 1
	movl	$0, %eax	#, D.24934
.L1860:
	.loc 1 9374 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE91:
	.size	indirect_jump_in_function_p, .-indirect_jump_in_function_p
	.type	insert_loop_mem, @function
insert_loop_mem:
.LFB92:
	.loc 1 9384 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# mem, mem
	movq	%rsi, -48(%rbp)	# data, data
	.loc 1 9385 0
	movq	-48(%rbp), %rax	# data, tmp111
	movq	%rax, -16(%rbp)	# tmp111, loop_info
	.loc 1 9387 0
	movq	-40(%rbp), %rax	# mem, tmp112
	movq	(%rax), %rax	# *mem_5(D), tmp113
	movq	%rax, -8(%rbp)	# tmp113, m
	.loc 1 9389 0
	cmpq	$0, -8(%rbp)	#, m
	jne	.L1863	#,
	.loc 1 9390 0
	movl	$0, %eax	#, D.24935
	jmp	.L1864	#
.L1863:
	.loc 1 9392 0
	movq	-8(%rbp), %rax	# m, tmp114
	movzwl	(%rax), %eax	# m_6->code, D.24936
	movzwl	%ax, %eax	# D.24936, D.24937
	cmpl	$49, %eax	#, D.24937
	je	.L1866	#,
	cmpl	$49, %eax	#, D.24937
	ja	.L1867	#,
	cmpl	$3, %eax	#, D.24937
	je	.L1868	#,
	jmp	.L1865	#
.L1867:
	cmpl	$55, %eax	#, D.24937
	je	.L1869	#,
	cmpl	$66, %eax	#, D.24937
	je	.L1879	#,
	jmp	.L1865	#
.L1866:
	.loc 1 9399 0
	movl	$-1, %eax	#, D.24935
	jmp	.L1864	#
.L1869:
	.loc 1 9404 0
	movl	$-1, %eax	#, D.24935
	jmp	.L1864	#
.L1868:
	.loc 1 9408 0
	movl	$-1, %eax	#, D.24935
	jmp	.L1864	#
.L1865:
	.loc 1 9412 0
	movl	$0, %eax	#, D.24935
	jmp	.L1864	#
.L1879:
	.loc 1 9395 0
	nop
	.loc 1 9416 0
	movl	$0, -20(%rbp)	#, i
	jmp	.L1872	#
.L1875:
	.loc 1 9417 0
	movq	-16(%rbp), %rax	# loop_info, tmp115
	movq	128(%rax), %rcx	# loop_info_4->mems, D.24938
	movl	-20(%rbp), %eax	# i, tmp116
	movslq	%eax, %rdx	# tmp116, D.24939
	movq	%rdx, %rax	# D.24939, tmp117
	addq	%rax, %rax	# tmp117
	addq	%rdx, %rax	# D.24939, tmp117
	salq	$3, %rax	#, tmp118
	addq	%rcx, %rax	# D.24938, D.24938
	movq	(%rax), %rdx	# _15->mem, D.24940
	movq	-8(%rbp), %rax	# m, tmp119
	movq	%rdx, %rsi	# D.24940,
	movq	%rax, %rdi	# tmp119,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24935
	je	.L1873	#,
	.loc 1 9419 0
	movq	-8(%rbp), %rax	# m, tmp120
	movzbl	2(%rax), %ecx	# m_6->mode, D.24941
	movq	-16(%rbp), %rax	# loop_info, tmp121
	movq	128(%rax), %rsi	# loop_info_4->mems, D.24938
	movl	-20(%rbp), %eax	# i, tmp122
	movslq	%eax, %rdx	# tmp122, D.24939
	movq	%rdx, %rax	# D.24939, tmp123
	addq	%rax, %rax	# tmp123
	addq	%rdx, %rax	# D.24939, tmp123
	salq	$3, %rax	#, tmp124
	addq	%rsi, %rax	# D.24938, D.24938
	movq	(%rax), %rax	# _22->mem, D.24940
	movzbl	2(%rax), %eax	# _23->mode, D.24941
	cmpb	%al, %cl	# D.24941, D.24941
	je	.L1874	#,
	.loc 1 9423 0
	movq	-16(%rbp), %rax	# loop_info, tmp125
	movq	128(%rax), %rcx	# loop_info_4->mems, D.24938
	movl	-20(%rbp), %eax	# i, tmp126
	movslq	%eax, %rdx	# tmp126, D.24939
	movq	%rdx, %rax	# D.24939, tmp127
	addq	%rax, %rax	# tmp127
	addq	%rdx, %rax	# D.24939, tmp127
	salq	$3, %rax	#, tmp128
	addq	%rcx, %rax	# D.24938, D.24938
	movl	$0, 16(%rax)	#, _28->optimize
.L1874:
	.loc 1 9425 0
	movl	$0, %eax	#, D.24935
	jmp	.L1864	#
.L1873:
	.loc 1 9416 0
	addl	$1, -20(%rbp)	#, i
.L1872:
	.loc 1 9416 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# loop_info, tmp129
	movl	136(%rax), %eax	# loop_info_4->mems_idx, D.24935
	cmpl	-20(%rbp), %eax	# i, D.24935
	jg	.L1875	#,
	.loc 1 9429 0 is_stmt 1
	movq	-16(%rbp), %rax	# loop_info, tmp130
	movl	136(%rax), %edx	# loop_info_4->mems_idx, D.24935
	movq	-16(%rbp), %rax	# loop_info, tmp131
	movl	140(%rax), %eax	# loop_info_4->mems_allocated, D.24935
	cmpl	%eax, %edx	# D.24935, D.24935
	jne	.L1876	#,
	.loc 1 9431 0
	movq	-16(%rbp), %rax	# loop_info, tmp132
	movl	140(%rax), %eax	# loop_info_4->mems_allocated, D.24935
	testl	%eax, %eax	# D.24935
	je	.L1877	#,
	.loc 1 9432 0
	movq	-16(%rbp), %rax	# loop_info, tmp133
	movl	140(%rax), %eax	# loop_info_4->mems_allocated, D.24935
	leal	(%rax,%rax), %edx	#, D.24935
	movq	-16(%rbp), %rax	# loop_info, tmp134
	movl	%edx, 140(%rax)	# D.24935, loop_info_4->mems_allocated
	jmp	.L1878	#
.L1877:
	.loc 1 9434 0
	movq	-16(%rbp), %rax	# loop_info, tmp135
	movl	$32, 140(%rax)	#, loop_info_4->mems_allocated
.L1878:
	.loc 1 9438 0
	movq	-16(%rbp), %rax	# loop_info, tmp136
	movl	140(%rax), %eax	# loop_info_4->mems_allocated, D.24935
	.loc 1 9437 0
	movslq	%eax, %rdx	# D.24935, D.24939
	movq	%rdx, %rax	# D.24939, tmp137
	addq	%rax, %rax	# tmp137
	addq	%rdx, %rax	# D.24939, tmp137
	salq	$3, %rax	#, tmp138
	movq	%rax, %rdx	# tmp137, D.24939
	movq	-16(%rbp), %rax	# loop_info, tmp139
	movq	128(%rax), %rax	# loop_info_4->mems, D.24938
	movq	%rdx, %rsi	# D.24939,
	movq	%rax, %rdi	# D.24938,
	call	xrealloc	#
	.loc 1 9436 0
	movq	-16(%rbp), %rdx	# loop_info, tmp140
	movq	%rax, 128(%rdx)	# D.24942, loop_info_4->mems
.L1876:
	.loc 1 9442 0
	movq	-16(%rbp), %rax	# loop_info, tmp141
	movq	128(%rax), %rcx	# loop_info_4->mems, D.24938
	movq	-16(%rbp), %rax	# loop_info, tmp142
	movl	136(%rax), %eax	# loop_info_4->mems_idx, D.24935
	movslq	%eax, %rdx	# D.24935, D.24939
	movq	%rdx, %rax	# D.24939, tmp143
	addq	%rax, %rax	# tmp143
	addq	%rdx, %rax	# D.24939, tmp143
	salq	$3, %rax	#, tmp144
	leaq	(%rcx,%rax), %rdx	#, D.24938
	movq	-8(%rbp), %rax	# m, tmp145
	movq	%rax, (%rdx)	# tmp145, _45->mem
	.loc 1 9447 0
	movq	-16(%rbp), %rax	# loop_info, tmp146
	movq	128(%rax), %rcx	# loop_info_4->mems, D.24938
	movq	-16(%rbp), %rax	# loop_info, tmp147
	movl	136(%rax), %eax	# loop_info_4->mems_idx, D.24935
	movslq	%eax, %rdx	# D.24935, D.24939
	movq	%rdx, %rax	# D.24939, tmp148
	addq	%rax, %rax	# tmp148
	addq	%rdx, %rax	# D.24939, tmp148
	salq	$3, %rax	#, tmp149
	leaq	(%rcx,%rax), %rdx	#, D.24938
	movq	-8(%rbp), %rax	# m, tmp150
	movzbl	2(%rax), %eax	# m_6->mode, D.24941
	cmpb	$51, %al	#, D.24941
	setne	%al	#, D.24943
	movzbl	%al, %eax	# D.24943, D.24935
	movl	%eax, 16(%rdx)	# D.24935, _50->optimize
	.loc 1 9448 0
	movq	-16(%rbp), %rax	# loop_info, tmp151
	movq	128(%rax), %rcx	# loop_info_4->mems, D.24938
	movq	-16(%rbp), %rax	# loop_info, tmp152
	movl	136(%rax), %eax	# loop_info_4->mems_idx, D.24935
	movslq	%eax, %rdx	# D.24935, D.24939
	movq	%rdx, %rax	# D.24939, tmp153
	addq	%rax, %rax	# tmp153
	addq	%rdx, %rax	# D.24939, tmp153
	salq	$3, %rax	#, tmp154
	addq	%rcx, %rax	# D.24938, D.24938
	movq	$0, 8(%rax)	#, _58->reg
	.loc 1 9449 0
	movq	-16(%rbp), %rax	# loop_info, tmp155
	movl	136(%rax), %eax	# loop_info_4->mems_idx, D.24935
	leal	1(%rax), %edx	#, D.24935
	movq	-16(%rbp), %rax	# loop_info, tmp156
	movl	%edx, 136(%rax)	# D.24935, loop_info_4->mems_idx
	.loc 1 9451 0
	movl	$0, %eax	#, D.24935
.L1864:
	.loc 1 9452 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE92:
	.size	insert_loop_mem, .-insert_loop_mem
	.type	loop_regs_scan, @function
loop_regs_scan:
.LFB93:
	.loc 1 9474 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# loop, loop
	movl	%esi, -60(%rbp)	# extra_size, extra_size
	.loc 1 9475 0
	movq	-56(%rbp), %rax	# loop, tmp147
	movq	160(%rax), %rax	# loop_8(D)->aux, D.24945
	addq	$184, %rax	#, tmp148
	movq	%rax, -16(%rbp)	# tmp148, regs
	.loc 1 9483 0
	movq	-16(%rbp), %rax	# regs, tmp149
	movl	(%rax), %eax	# regs_10->num, tmp150
	movl	%eax, -28(%rbp)	# tmp150, old_nregs
	.loc 1 9484 0
	call	max_reg_num	#
	movq	-16(%rbp), %rdx	# regs, tmp151
	movl	%eax, (%rdx)	# D.24946, regs_10->num
	.loc 1 9487 0
	movq	-16(%rbp), %rax	# regs, tmp152
	movl	(%rax), %edx	# regs_10->num, D.24946
	movq	-16(%rbp), %rax	# regs, tmp153
	movl	4(%rax), %eax	# regs_10->size, D.24946
	cmpl	%eax, %edx	# D.24946, D.24946
	jl	.L1881	#,
	.loc 1 9489 0
	movq	-16(%rbp), %rax	# regs, tmp154
	movl	(%rax), %edx	# regs_10->num, D.24946
	movl	-60(%rbp), %eax	# extra_size, tmp155
	addl	%eax, %edx	# tmp155, D.24946
	movq	-16(%rbp), %rax	# regs, tmp156
	movl	%edx, 4(%rax)	# D.24946, regs_10->size
	.loc 1 9492 0
	movq	-16(%rbp), %rax	# regs, tmp157
	movl	4(%rax), %eax	# regs_10->size, D.24946
	movslq	%eax, %rdx	# D.24946, D.24947
	movq	%rdx, %rax	# D.24947, tmp158
	addq	%rax, %rax	# tmp158
	addq	%rdx, %rax	# D.24947, tmp158
	salq	$3, %rax	#, tmp159
	movq	%rax, %rdx	# tmp158, D.24947
	movq	-16(%rbp), %rax	# regs, tmp160
	movq	8(%rax), %rax	# regs_10->array, D.24948
	movq	%rdx, %rsi	# D.24947,
	movq	%rax, %rdi	# D.24948,
	call	xrealloc	#
	.loc 1 9491 0
	movq	-16(%rbp), %rdx	# regs, tmp161
	movq	%rax, 8(%rdx)	# D.24945, regs_10->array
	.loc 1 9496 0
	movq	-16(%rbp), %rax	# regs, tmp162
	movl	4(%rax), %eax	# regs_10->size, D.24946
	subl	-28(%rbp), %eax	# old_nregs, D.24946
	.loc 1 9495 0
	movslq	%eax, %rdx	# D.24946, D.24947
	movq	%rdx, %rax	# D.24947, tmp163
	addq	%rax, %rax	# tmp163
	addq	%rdx, %rax	# D.24947, tmp163
	salq	$3, %rax	#, tmp164
	movq	%rax, %rcx	# tmp163, D.24947
	movq	-16(%rbp), %rax	# regs, tmp165
	movq	8(%rax), %rsi	# regs_10->array, D.24948
	movl	-28(%rbp), %eax	# old_nregs, tmp166
	movslq	%eax, %rdx	# tmp166, D.24947
	movq	%rdx, %rax	# D.24947, tmp167
	addq	%rax, %rax	# tmp167
	addq	%rdx, %rax	# D.24947, tmp167
	salq	$3, %rax	#, tmp168
	addq	%rsi, %rax	# D.24948, D.24945
	movq	%rcx, %rdx	# D.24947,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24945,
	call	memset	#
.L1881:
	.loc 1 9500 0
	movl	$0, -36(%rbp)	#, i
	jmp	.L1882	#
.L1883:
	.loc 1 9502 0 discriminator 2
	movq	-16(%rbp), %rax	# regs, tmp169
	movq	8(%rax), %rcx	# regs_10->array, D.24948
	movl	-36(%rbp), %eax	# i, tmp170
	movslq	%eax, %rdx	# tmp170, D.24947
	movq	%rdx, %rax	# D.24947, tmp171
	addq	%rax, %rax	# tmp171
	addq	%rdx, %rax	# D.24947, tmp171
	salq	$3, %rax	#, tmp172
	addq	%rcx, %rax	# D.24948, D.24948
	movl	$0, (%rax)	#, _35->set_in_loop
	.loc 1 9503 0 discriminator 2
	movq	-16(%rbp), %rax	# regs, tmp173
	movq	8(%rax), %rcx	# regs_10->array, D.24948
	movl	-36(%rbp), %eax	# i, tmp174
	movslq	%eax, %rdx	# tmp174, D.24947
	movq	%rdx, %rax	# D.24947, tmp175
	addq	%rax, %rax	# tmp175
	addq	%rdx, %rax	# D.24947, tmp175
	salq	$3, %rax	#, tmp176
	addq	%rcx, %rax	# D.24948, D.24948
	movb	$0, 16(%rax)	#, _39->may_not_optimize
	.loc 1 9504 0 discriminator 2
	movq	-16(%rbp), %rax	# regs, tmp177
	movq	8(%rax), %rcx	# regs_10->array, D.24948
	movl	-36(%rbp), %eax	# i, tmp178
	movslq	%eax, %rdx	# tmp178, D.24947
	movq	%rdx, %rax	# D.24947, tmp179
	addq	%rax, %rax	# tmp179
	addq	%rdx, %rax	# D.24947, tmp179
	salq	$3, %rax	#, tmp180
	addq	%rcx, %rax	# D.24948, D.24948
	movq	$0, 8(%rax)	#, _43->single_usage
	.loc 1 9500 0 discriminator 2
	addl	$1, -36(%rbp)	#, i
.L1882:
	.loc 1 9500 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %eax	# i, tmp181
	cmpl	-28(%rbp), %eax	# old_nregs, tmp181
	jl	.L1883	#,
	.loc 1 9507 0 is_stmt 1
	movq	-16(%rbp), %rax	# regs, tmp182
	movl	(%rax), %eax	# regs_10->num, D.24946
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.24947,
	call	xcalloc	#
	movq	%rax, -8(%rbp)	# tmp183, last_set
	.loc 1 9510 0
	movq	-56(%rbp), %rax	# loop, tmp184
	movq	208(%rax), %rax	# loop_8(D)->top, D.24949
	testq	%rax, %rax	# D.24949
	je	.L1884	#,
	.loc 1 9510 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# loop, tmp185
	movq	208(%rax), %rax	# loop_8(D)->top, iftmp.646
	jmp	.L1885	#
.L1884:
	.loc 1 9510 0 discriminator 2
	movq	-56(%rbp), %rax	# loop, tmp186
	movq	192(%rax), %rax	# loop_8(D)->start, iftmp.646
.L1885:
	.loc 1 9510 0 discriminator 3
	movq	%rax, -24(%rbp)	# iftmp.646, insn
	jmp	.L1886	#
.L1895:
	.loc 1 9513 0 is_stmt 1
	movq	-24(%rbp), %rax	# insn, tmp187
	movzwl	(%rax), %eax	# insn_1->code, D.24950
	movzwl	%ax, %eax	# D.24950, D.24946
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24951
	cmpb	$105, %al	#, D.24951
	jne	.L1887	#,
	.loc 1 9516 0
	movq	-24(%rbp), %rax	# insn, tmp189
	movq	32(%rax), %rdx	# insn_1->fld[3].rtx, D.24949
	movq	-24(%rbp), %rcx	# insn, tmp190
	movq	-16(%rbp), %rax	# regs, tmp191
	movq	%rcx, %rsi	# tmp190,
	movq	%rax, %rdi	# tmp191,
	call	find_single_use_in_loop	#
	.loc 1 9519 0
	movq	-24(%rbp), %rax	# insn, tmp192
	movq	56(%rax), %rax	# insn_1->fld[6].rtx, D.24949
	testq	%rax, %rax	# D.24949
	je	.L1888	#,
	.loc 1 9520 0
	movq	-24(%rbp), %rax	# insn, tmp193
	movq	56(%rax), %rdx	# insn_1->fld[6].rtx, D.24949
	movq	-24(%rbp), %rcx	# insn, tmp194
	movq	-16(%rbp), %rax	# regs, tmp195
	movq	%rcx, %rsi	# tmp194,
	movq	%rax, %rdi	# tmp195,
	call	find_single_use_in_loop	#
.L1888:
	.loc 1 9522 0
	movq	-24(%rbp), %rax	# insn, tmp196
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.24949
	movzwl	(%rax), %eax	# _59->code, D.24950
	cmpw	$47, %ax	#, D.24950
	je	.L1889	#,
	.loc 1 9523 0
	movq	-24(%rbp), %rax	# insn, tmp197
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.24949
	movzwl	(%rax), %eax	# _61->code, D.24950
	cmpw	$49, %ax	#, D.24950
	jne	.L1890	#,
.L1889:
	.loc 1 9524 0
	movq	-24(%rbp), %rax	# insn, tmp198
	movq	32(%rax), %rdx	# insn_1->fld[3].rtx, D.24949
	movq	-8(%rbp), %rcx	# last_set, tmp199
	movq	-24(%rbp), %rsi	# insn, tmp200
	movq	-16(%rbp), %rax	# regs, tmp201
	movq	%rax, %rdi	# tmp201,
	call	count_one_set	#
	jmp	.L1887	#
.L1890:
	.loc 1 9525 0
	movq	-24(%rbp), %rax	# insn, tmp202
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.24949
	movzwl	(%rax), %eax	# _63->code, D.24950
	cmpw	$39, %ax	#, D.24950
	jne	.L1887	#,
.LBB121:
	.loc 1 9528 0
	movq	-24(%rbp), %rax	# insn, tmp203
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.24949
	movq	8(%rax), %rax	# _65->fld[0].rtvec, D.24952
	movl	(%rax), %eax	# _66->num_elem, D.24946
	subl	$1, %eax	#, tmp204
	movl	%eax, -32(%rbp)	# tmp204, i
	jmp	.L1891	#
.L1892:
	.loc 1 9529 0 discriminator 2
	movq	-24(%rbp), %rax	# insn, tmp205
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.24949
	movq	8(%rax), %rax	# _69->fld[0].rtvec, D.24952
	movl	-32(%rbp), %edx	# i, tmp207
	movslq	%edx, %rdx	# tmp207, tmp206
	movq	8(%rax,%rdx,8), %rdx	# _70->elem, D.24949
	movq	-8(%rbp), %rcx	# last_set, tmp208
	movq	-24(%rbp), %rsi	# insn, tmp209
	movq	-16(%rbp), %rax	# regs, tmp210
	movq	%rax, %rdi	# tmp210,
	call	count_one_set	#
	.loc 1 9528 0 discriminator 2
	subl	$1, -32(%rbp)	#, i
.L1891:
	.loc 1 9528 0 is_stmt 0 discriminator 1
	cmpl	$0, -32(%rbp)	#, i
	jns	.L1892	#,
.L1887:
.LBE121:
	.loc 1 9534 0 is_stmt 1
	movq	-24(%rbp), %rax	# insn, tmp211
	movzwl	(%rax), %eax	# insn_1->code, D.24950
	cmpw	$36, %ax	#, D.24950
	je	.L1893	#,
	.loc 1 9534 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# insn, tmp212
	movzwl	(%rax), %eax	# insn_1->code, D.24950
	cmpw	$33, %ax	#, D.24950
	jne	.L1894	#,
.L1893:
	.loc 1 9535 0 is_stmt 1
	movq	-16(%rbp), %rax	# regs, tmp213
	movl	(%rax), %eax	# regs_10->num, D.24946
	cltq
	leaq	0(,%rax,8), %rdx	#, D.24947
	movq	-8(%rbp), %rax	# last_set, tmp214
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp214,
	call	memset	#
.L1894:
	.loc 1 9511 0
	movq	-24(%rbp), %rax	# insn, tmp215
	movq	24(%rax), %rax	# insn_1->fld[2].rtx, tmp216
	movq	%rax, -24(%rbp)	# tmp216, insn
.L1886:
	.loc 1 9510 0 discriminator 1
	movq	-56(%rbp), %rax	# loop, tmp217
	movq	200(%rax), %rax	# loop_8(D)->end, D.24949
	cmpq	-24(%rbp), %rax	# insn, D.24949
	jne	.L1895	#,
	.loc 1 9542 0
	movq	-56(%rbp), %rax	# loop, tmp218
	movq	160(%rax), %rax	# loop_8(D)->aux, D.24945
	movl	(%rax), %eax	# MEM[(struct loop_info *)_80].has_call, D.24946
	testl	%eax, %eax	# D.24946
	je	.L1896	#,
	.loc 1 9543 0
	movl	$0, -36(%rbp)	#, i
	jmp	.L1897	#
.L1901:
	.loc 1 9544 0
	movq	regs_invalidated_by_call(%rip), %rdx	# regs_invalidated_by_call, regs_invalidated_by_call.647
	movl	-36(%rbp), %eax	# i, tmp219
	movl	%eax, %ecx	# tmp219, tmp241
	shrq	%cl, %rdx	# tmp241, D.24947
	movq	%rdx, %rax	# D.24947, D.24947
	andl	$1, %eax	#, D.24947
	testq	%rax, %rax	# D.24947
	je	.L1898	#,
	.loc 1 9545 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.649
	andl	$33554432, %eax	#, D.24946
	testl	%eax, %eax	# D.24946
	je	.L1899	#,
	.loc 1 9545 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.648
	jmp	.L1900	#
.L1899:
	.loc 1 9545 0 discriminator 2
	movl	$4, %eax	#, iftmp.648
.L1900:
	.loc 1 9545 0 discriminator 3
	movl	-36(%rbp), %edx	# i, tmp220
	movl	%edx, %esi	# tmp220,
	movl	%eax, %edi	# iftmp.648,
	call	gen_rtx_REG	#
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.24949,
	call	rtx_varies_p	#
	testl	%eax, %eax	# D.24946
	je	.L1898	#,
	.loc 1 9547 0 is_stmt 1
	movq	-16(%rbp), %rax	# regs, tmp221
	movq	8(%rax), %rcx	# regs_10->array, D.24948
	movl	-36(%rbp), %eax	# i, tmp222
	movslq	%eax, %rdx	# tmp222, D.24947
	movq	%rdx, %rax	# D.24947, tmp223
	addq	%rax, %rax	# tmp223
	addq	%rdx, %rax	# D.24947, tmp223
	salq	$3, %rax	#, tmp224
	addq	%rcx, %rax	# D.24948, D.24948
	movb	$1, 16(%rax)	#, _95->may_not_optimize
	.loc 1 9548 0
	movq	-16(%rbp), %rax	# regs, tmp225
	movq	8(%rax), %rcx	# regs_10->array, D.24948
	movl	-36(%rbp), %eax	# i, tmp226
	movslq	%eax, %rdx	# tmp226, D.24947
	movq	%rdx, %rax	# D.24947, tmp227
	addq	%rax, %rax	# tmp227
	addq	%rdx, %rax	# D.24947, tmp227
	salq	$3, %rax	#, tmp228
	addq	%rcx, %rax	# D.24948, D.24948
	movl	$1, (%rax)	#, _99->set_in_loop
.L1898:
	.loc 1 9543 0
	addl	$1, -36(%rbp)	#, i
.L1897:
	.loc 1 9543 0 is_stmt 0 discriminator 1
	cmpl	$52, -36(%rbp)	#, i
	jle	.L1901	#,
.L1896:
	.loc 1 9560 0 is_stmt 1
	movl	-28(%rbp), %eax	# old_nregs, tmp229
	movl	%eax, -36(%rbp)	# tmp229, i
	jmp	.L1902	#
.L1903:
	.loc 1 9561 0 discriminator 2
	movq	-16(%rbp), %rax	# regs, tmp230
	movq	8(%rax), %rcx	# regs_10->array, D.24948
	movl	-36(%rbp), %eax	# i, tmp231
	movslq	%eax, %rdx	# tmp231, D.24947
	movq	%rdx, %rax	# D.24947, tmp232
	addq	%rax, %rax	# tmp232
	addq	%rdx, %rax	# D.24947, tmp232
	salq	$3, %rax	#, tmp233
	addq	%rax, %rcx	# D.24947, D.24948
	movq	-16(%rbp), %rax	# regs, tmp234
	movq	8(%rax), %rsi	# regs_10->array, D.24948
	movl	-36(%rbp), %eax	# i, tmp235
	movslq	%eax, %rdx	# tmp235, D.24947
	movq	%rdx, %rax	# D.24947, tmp236
	addq	%rax, %rax	# tmp236
	addq	%rdx, %rax	# D.24947, tmp236
	salq	$3, %rax	#, tmp237
	addq	%rsi, %rax	# D.24948, D.24948
	movl	(%rax), %eax	# _110->set_in_loop, D.24946
	movl	%eax, 4(%rcx)	# D.24946, _106->n_times_set
	.loc 1 9560 0 discriminator 2
	addl	$1, -36(%rbp)	#, i
.L1902:
	.loc 1 9560 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# regs, tmp238
	movl	(%rax), %eax	# regs_10->num, D.24946
	cmpl	-36(%rbp), %eax	# i, D.24946
	jg	.L1903	#,
	.loc 1 9563 0 is_stmt 1
	movq	-8(%rbp), %rax	# last_set, tmp239
	movq	%rax, %rdi	# tmp239,
	call	free	#
	.loc 1 9564 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE93:
	.size	loop_regs_scan, .-loop_regs_scan
	.type	count_insns_in_loop, @function
count_insns_in_loop:
.LFB94:
	.loc 1 9571 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# loop, loop
	.loc 1 9572 0
	movl	$0, -12(%rbp)	#, count
	.loc 1 9575 0
	movq	-24(%rbp), %rax	# loop, tmp67
	movq	208(%rax), %rax	# loop_6(D)->top, D.24953
	testq	%rax, %rax	# D.24953
	je	.L1905	#,
	.loc 1 9575 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# loop, tmp68
	movq	208(%rax), %rax	# loop_6(D)->top, iftmp.650
	jmp	.L1906	#
.L1905:
	.loc 1 9575 0 discriminator 2
	movq	-24(%rbp), %rax	# loop, tmp69
	movq	192(%rax), %rax	# loop_6(D)->start, iftmp.650
.L1906:
	.loc 1 9575 0 discriminator 3
	movq	%rax, -8(%rbp)	# iftmp.650, insn
	jmp	.L1907	#
.L1909:
	.loc 1 9577 0 is_stmt 1
	movq	-8(%rbp), %rax	# insn, tmp70
	movzwl	(%rax), %eax	# insn_3->code, D.24954
	movzwl	%ax, %eax	# D.24954, D.24955
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24956
	cmpb	$105, %al	#, D.24956
	jne	.L1908	#,
	.loc 1 9578 0
	addl	$1, -12(%rbp)	#, count
.L1908:
	.loc 1 9576 0
	movq	-8(%rbp), %rax	# insn, tmp72
	movq	24(%rax), %rax	# insn_3->fld[2].rtx, tmp73
	movq	%rax, -8(%rbp)	# tmp73, insn
.L1907:
	.loc 1 9575 0 discriminator 1
	movq	-24(%rbp), %rax	# loop, tmp74
	movq	200(%rax), %rax	# loop_6(D)->end, D.24953
	cmpq	-8(%rbp), %rax	# insn, D.24953
	jne	.L1909	#,
	.loc 1 9580 0
	movl	-12(%rbp), %eax	# count, D.24955
	.loc 1 9581 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE94:
	.size	count_insns_in_loop, .-count_insns_in_loop
	.section	.rodata
.LC67:
	.string	"r/w"
.LC68:
	.string	"r/o"
.LC69:
	.string	"Hoisted regno %d %s from "
	.text
	.type	load_mems, @function
load_mems:
.LFB95:
	.loc 1 9588 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$328, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -328(%rbp)	# loop, loop
	.loc 1 9589 0
	movq	-328(%rbp), %rax	# loop, tmp371
	movq	160(%rax), %rax	# loop_56(D)->aux, tmp372
	movq	%rax, -160(%rbp)	# tmp372, loop_info
	.loc 1 9590 0
	movq	-328(%rbp), %rax	# loop, tmp373
	movq	160(%rax), %rax	# loop_56(D)->aux, D.24957
	addq	$184, %rax	#, tmp374
	movq	%rax, -152(%rbp)	# tmp374, regs
	.loc 1 9591 0
	movl	$0, -308(%rbp)	#, maybe_never
	.loc 1 9594 0
	movq	$0, -248(%rbp)	#, label
	.loc 1 9597 0
	movl	$0, -300(%rbp)	#, next_maybe_never
	.loc 1 9598 0
	call	max_reg_num	#
	movl	%eax, -272(%rbp)	# D.24958, last_max_reg
	.loc 1 9600 0
	movq	-160(%rbp), %rax	# loop_info, tmp375
	movl	136(%rax), %eax	# loop_info_57->mems_idx, D.24958
	testl	%eax, %eax	# D.24958
	jne	.L1912	#,
	.loc 1 9601 0
	jmp	.L1911	#
.L1912:
	.loc 1 9604 0
	movq	-328(%rbp), %rax	# loop, tmp376
	movq	200(%rax), %rax	# loop_56(D)->end, D.24959
	movq	%rax, %rdi	# D.24959,
	call	next_nonnote_insn	#
	movq	%rax, -240(%rbp)	# tmp377, end_label
	.loc 1 9605 0
	cmpq	$0, -240(%rbp)	#, end_label
	je	.L1914	#,
	.loc 1 9605 0 is_stmt 0 discriminator 1
	movq	-240(%rbp), %rax	# end_label, tmp378
	movzwl	(%rax), %eax	# end_label_67->code, D.24960
	cmpw	$36, %ax	#, D.24960
	je	.L1914	#,
	.loc 1 9606 0 is_stmt 1
	movq	$0, -240(%rbp)	#, end_label
.L1914:
	.loc 1 9611 0
	movq	-328(%rbp), %rax	# loop, tmp379
	movq	216(%rax), %rdx	# loop_56(D)->scan_start, D.24959
	movq	-328(%rbp), %rax	# loop, tmp380
	movq	%rdx, %rsi	# D.24959,
	movq	%rax, %rdi	# tmp380,
	call	next_insn_in_loop	#
	movq	%rax, -256(%rbp)	# p.651, p
	jmp	.L1915	#
.L1932:
	.loc 1 9615 0
	movq	-256(%rbp), %rax	# p, p.652
	movzwl	(%rax), %eax	# p.652_73->code, D.24960
	cmpw	$36, %ax	#, D.24960
	jne	.L1916	#,
	.loc 1 9616 0
	movl	$1, -308(%rbp)	#, maybe_never
	jmp	.L1917	#
.L1916:
	.loc 1 9617 0
	movq	-256(%rbp), %rax	# p, p.653
	movzwl	(%rax), %eax	# p.653_76->code, D.24960
	cmpw	$33, %ax	#, D.24960
	jne	.L1918	#,
	.loc 1 9624 0
	movq	-256(%rbp), %rax	# p, p.654
	movzwl	(%rax), %eax	# p.654_78->code, D.24960
	cmpw	$33, %ax	#, D.24960
	jne	.L1919	#,
	.loc 1 9625 0
	movq	-256(%rbp), %rax	# p, p.655
	movq	64(%rax), %rdx	# p.655_80->fld[7].rtx, D.24959
	movq	-328(%rbp), %rax	# loop, tmp381
	movq	208(%rax), %rax	# loop_56(D)->top, D.24959
	cmpq	%rax, %rdx	# D.24959, D.24959
	jne	.L1919	#,
	.loc 1 9626 0
	movq	-256(%rbp), %rax	# p, p.656
	movq	24(%rax), %rax	# p.656_83->fld[2].rtx, D.24959
	movq	24(%rax), %rdx	# _84->fld[2].rtx, D.24959
	movq	-328(%rbp), %rax	# loop, tmp382
	movq	200(%rax), %rax	# loop_56(D)->end, D.24959
	cmpq	%rax, %rdx	# D.24959, D.24959
	jne	.L1919	#,
	.loc 1 9627 0
	movq	-256(%rbp), %rax	# p, p.657
	movq	%rax, %rdi	# p.657,
	call	any_uncondjump_p	#
	.loc 1 9624 0
	testl	%eax, %eax	# D.24958
	jne	.L1918	#,
.L1919:
	.loc 1 9634 0
	movq	-256(%rbp), %rax	# p, p.658
	movq	64(%rax), %rax	# p.658_89->fld[7].rtx, D.24959
	.loc 1 9632 0
	testq	%rax, %rax	# D.24959
	je	.L1920	#,
	.loc 1 9635 0
	movq	-256(%rbp), %rax	# p, p.659
	movq	64(%rax), %rax	# p.659_91->fld[7].rtx, D.24959
	cmpq	-240(%rbp), %rax	# end_label, D.24959
	je	.L1921	#,
	.loc 1 9636 0
	movq	-256(%rbp), %rax	# p, p.660
	movq	64(%rax), %rax	# p.660_93->fld[7].rtx, D.24959
	movl	8(%rax), %edx	# _94->fld[0].rtint, D.24958
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.661
	cmpl	%eax, %edx	# max_uid_for_loop.661, D.24958
	jge	.L1920	#,
	.loc 1 9637 0
	movq	-256(%rbp), %rax	# p, p.663
	movq	64(%rax), %rax	# p.663_97->fld[7].rtx, D.24959
	movl	8(%rax), %edx	# _98->fld[0].rtint, D.24958
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.664
	cmpl	%eax, %edx	# max_uid_for_loop.664, D.24958
	jge	.L1922	#,
	.loc 1 9637 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.665
	movq	-256(%rbp), %rax	# p, p.666
	movq	64(%rax), %rax	# p.666_102->fld[7].rtx, D.24959
	movl	8(%rax), %eax	# _103->fld[0].rtint, D.24958
	cltq
	salq	$2, %rax	#, D.24961
	addq	%rdx, %rax	# uid_luid.665, D.24962
	movl	(%rax), %edx	# *_107, iftmp.662
	movq	-328(%rbp), %rax	# loop, tmp383
	movq	192(%rax), %rax	# loop_56(D)->start, D.24959
	movl	8(%rax), %ecx	# _109->fld[0].rtint, D.24958
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.668
	cmpl	%eax, %ecx	# max_uid_for_loop.668, D.24958
	jge	.L1924	#,
	jmp	.L2016	#
.L1922:
	.loc 1 9637 0 discriminator 2
	movl	$__FUNCTION__.14365, %edx	#,
	movl	$9637, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L2016:
	.loc 1 9637 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.669
	movq	-328(%rbp), %rax	# loop, tmp384
	movq	192(%rax), %rax	# loop_56(D)->start, D.24959
	movl	8(%rax), %eax	# _113->fld[0].rtint, D.24958
	cltq
	salq	$2, %rax	#, D.24961
	addq	%rcx, %rax	# uid_luid.669, D.24962
	movl	(%rax), %eax	# *_117, iftmp.667
	cmpl	%eax, %edx	# iftmp.667, iftmp.662
	jl	.L1920	#,
	jmp	.L2017	#
.L1924:
	.loc 1 9637 0 discriminator 2
	movl	$__FUNCTION__.14365, %edx	#,
	movl	$9637, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L2017:
	.loc 1 9638 0 is_stmt 1
	movq	-256(%rbp), %rax	# p, p.671
	movq	64(%rax), %rax	# p.671_119->fld[7].rtx, D.24959
	movl	8(%rax), %edx	# _120->fld[0].rtint, D.24958
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.672
	cmpl	%eax, %edx	# max_uid_for_loop.672, D.24958
	jge	.L1926	#,
	.loc 1 9638 0 is_stmt 0 discriminator 1
	movq	uid_luid(%rip), %rdx	# uid_luid, uid_luid.673
	movq	-256(%rbp), %rax	# p, p.674
	movq	64(%rax), %rax	# p.674_124->fld[7].rtx, D.24959
	movl	8(%rax), %eax	# _125->fld[0].rtint, D.24958
	cltq
	salq	$2, %rax	#, D.24961
	addq	%rdx, %rax	# uid_luid.673, D.24962
	movl	(%rax), %edx	# *_129, iftmp.670
	movq	-328(%rbp), %rax	# loop, tmp385
	movq	200(%rax), %rax	# loop_56(D)->end, D.24959
	movl	8(%rax), %ecx	# _131->fld[0].rtint, D.24958
	movl	max_uid_for_loop(%rip), %eax	# max_uid_for_loop, max_uid_for_loop.676
	cmpl	%eax, %ecx	# max_uid_for_loop.676, D.24958
	jge	.L1928	#,
	jmp	.L2018	#
.L1926:
	.loc 1 9638 0 discriminator 2
	movl	$__FUNCTION__.14365, %edx	#,
	movl	$9638, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L2018:
	.loc 1 9638 0 discriminator 1
	movq	uid_luid(%rip), %rcx	# uid_luid, uid_luid.677
	movq	-328(%rbp), %rax	# loop, tmp386
	movq	200(%rax), %rax	# loop_56(D)->end, D.24959
	movl	8(%rax), %eax	# _135->fld[0].rtint, D.24958
	cltq
	salq	$2, %rax	#, D.24961
	addq	%rcx, %rax	# uid_luid.677, D.24962
	movl	(%rax), %eax	# *_139, iftmp.675
	cmpl	%eax, %edx	# iftmp.675, iftmp.670
	jle	.L1921	#,
	jmp	.L1920	#
.L1928:
	.loc 1 9638 0 discriminator 2
	movl	$__FUNCTION__.14365, %edx	#,
	movl	$9638, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1920:
	.loc 1 9639 0 is_stmt 1
	jmp	.L1911	#
.L1921:
	.loc 1 9641 0
	movq	-256(%rbp), %rax	# p, p.678
	movq	%rax, %rdi	# p.678,
	call	any_condjump_p	#
	testl	%eax, %eax	# D.24958
	jne	.L1930	#,
	.loc 1 9643 0
	movl	$1, -308(%rbp)	#, maybe_never
	.loc 1 9641 0
	jmp	.L1917	#
.L1930:
	.loc 1 9647 0
	movl	$1, -300(%rbp)	#, next_maybe_never
	.loc 1 9641 0
	jmp	.L1917	#
.L1918:
	.loc 1 9649 0
	cmpl	$0, -300(%rbp)	#, next_maybe_never
	je	.L1917	#,
	.loc 1 9650 0
	movl	$1, -308(%rbp)	#, maybe_never
.L1917:
	.loc 1 9613 0
	movq	-256(%rbp), %rdx	# p, p.679
	movq	-328(%rbp), %rax	# loop, tmp387
	movq	%rdx, %rsi	# p.679,
	movq	%rax, %rdi	# tmp387,
	call	next_insn_in_loop	#
	movq	%rax, -256(%rbp)	# p.680, p
.L1915:
	.loc 1 9612 0 discriminator 1
	movq	-256(%rbp), %rax	# p, p.681
	.loc 1 9611 0 discriminator 1
	testq	%rax, %rax	# p.681
	jne	.L1932	#,
	.loc 1 9654 0
	movq	-328(%rbp), %rax	# loop, tmp388
	movq	192(%rax), %rax	# loop_56(D)->start, p.682
	movq	%rax, -256(%rbp)	# p.682, p
	jmp	.L1933	#
.L1935:
	.loc 1 9656 0
	movq	-256(%rbp), %rax	# p, p.683
	movq	16(%rax), %rax	# p.683_153->fld[1].rtx, p.684
	movq	%rax, -256(%rbp)	# p.684, p
.L1933:
	.loc 1 9655 0 discriminator 1
	movq	-256(%rbp), %rax	# p, p.685
	movq	16(%rax), %rax	# p.685_149->fld[1].rtx, D.24959
	.loc 1 9654 0 discriminator 1
	testq	%rax, %rax	# D.24959
	je	.L1934	#,
	.loc 1 9655 0
	movq	-256(%rbp), %rax	# p, p.686
	movzwl	(%rax), %eax	# p.686_151->code, D.24960
	cmpw	$36, %ax	#, D.24960
	jne	.L1935	#,
.L1934:
	.loc 1 9658 0
	movq	-256(%rbp), %rax	# p, tmp389
	movq	%rax, -144(%rbp)	# tmp389, prev_ebb_head
	.loc 1 9660 0
	call	cselib_init	#
	.loc 1 9664 0
	jmp	.L1936	#
.L1937:
	.loc 1 9665 0 discriminator 2
	movq	-256(%rbp), %rax	# p, p.687
	movq	%rax, %rdi	# p.687,
	call	cselib_process_insn	#
	.loc 1 9664 0 discriminator 2
	movq	-256(%rbp), %rax	# p, p.688
	movq	24(%rax), %rax	# p.688_159->fld[2].rtx, p.689
	movq	%rax, -256(%rbp)	# p.689, p
.L1936:
	.loc 1 9664 0 is_stmt 0 discriminator 1
	movq	-328(%rbp), %rax	# loop, tmp390
	movq	192(%rax), %rdx	# loop_56(D)->start, D.24959
	movq	-256(%rbp), %rax	# p, p.690
	cmpq	%rax, %rdx	# p.690, D.24959
	jne	.L1937	#,
	.loc 1 9668 0 is_stmt 1
	movl	$0, -304(%rbp)	#, i
	jmp	.L1938	#
.L2010:
.LBB122:
	.loc 1 9672 0
	movl	$0, -296(%rbp)	#, written
	.loc 1 9674 0
	movq	-160(%rbp), %rax	# loop_info, tmp391
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp392
	movslq	%eax, %rdx	# tmp392, D.24961
	movq	%rdx, %rax	# D.24961, tmp393
	addq	%rax, %rax	# tmp393
	addq	%rdx, %rax	# D.24961, tmp393
	salq	$3, %rax	#, tmp394
	addq	%rcx, %rax	# D.24963, D.24963
	movq	(%rax), %rax	# _167->mem, tmp395
	movq	%rax, -136(%rbp)	# tmp395, mem
	.loc 1 9677 0
	movq	-136(%rbp), %rax	# mem, tmp396
	movzbl	3(%rax), %eax	# *mem_168, D.24964
	andl	$8, %eax	#, D.24964
	testb	%al, %al	# D.24964
	jne	.L1939	#,
	.loc 1 9678 0
	movq	-136(%rbp), %rax	# mem, tmp397
	movq	8(%rax), %rdx	# mem_168->fld[0].rtx, D.24959
	movq	-328(%rbp), %rax	# loop, tmp398
	movq	%rdx, %rsi	# D.24959,
	movq	%rax, %rdi	# tmp398,
	call	loop_invariant_p	#
	cmpl	$1, %eax	#, D.24958
	je	.L1940	#,
.L1939:
	.loc 1 9680 0
	movq	-160(%rbp), %rax	# loop_info, tmp399
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp400
	movslq	%eax, %rdx	# tmp400, D.24961
	movq	%rdx, %rax	# D.24961, tmp401
	addq	%rax, %rax	# tmp401
	addq	%rdx, %rax	# D.24961, tmp401
	salq	$3, %rax	#, tmp402
	addq	%rcx, %rax	# D.24963, D.24963
	movl	$0, 16(%rax)	#, _176->optimize
.L1940:
	.loc 1 9684 0
	movq	-160(%rbp), %rax	# loop_info, tmp403
	movq	120(%rax), %rax	# loop_info_57->store_mems, tmp404
	movq	%rax, -232(%rbp)	# tmp404, mem_list_entry
	.loc 1 9685 0
	jmp	.L1941	#
.L1945:
	.loc 1 9687 0
	movq	-232(%rbp), %rax	# mem_list_entry, tmp405
	movq	8(%rax), %rdx	# mem_list_entry_20->fld[0].rtx, D.24959
	movq	-136(%rbp), %rax	# mem, tmp406
	movq	%rdx, %rsi	# D.24959,
	movq	%rax, %rdi	# tmp406,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24958
	je	.L1942	#,
	.loc 1 9688 0
	movl	$1, -296(%rbp)	#, written
	jmp	.L1943	#
.L1942:
	.loc 1 9689 0
	movq	-232(%rbp), %rax	# mem_list_entry, tmp407
	movq	8(%rax), %rax	# mem_list_entry_20->fld[0].rtx, D.24959
	movq	-136(%rbp), %rdx	# mem, tmp408
	movl	$rtx_varies_p, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24959,
	call	true_dependence	#
	testl	%eax, %eax	# D.24958
	je	.L1943	#,
	.loc 1 9693 0
	movq	-160(%rbp), %rax	# loop_info, tmp409
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp410
	movslq	%eax, %rdx	# tmp410, D.24961
	movq	%rdx, %rax	# D.24961, tmp411
	addq	%rax, %rax	# tmp411
	addq	%rdx, %rax	# D.24961, tmp411
	salq	$3, %rax	#, tmp412
	addq	%rcx, %rax	# D.24963, D.24963
	movl	$0, 16(%rax)	#, _186->optimize
	.loc 1 9694 0
	jmp	.L1944	#
.L1943:
	.loc 1 9696 0
	movq	-232(%rbp), %rax	# mem_list_entry, tmp413
	movq	16(%rax), %rax	# mem_list_entry_20->fld[1].rtx, tmp414
	movq	%rax, -232(%rbp)	# tmp414, mem_list_entry
.L1941:
	.loc 1 9685 0 discriminator 1
	cmpq	$0, -232(%rbp)	#, mem_list_entry
	jne	.L1945	#,
.L1944:
	.loc 1 9699 0
	movl	flag_float_store(%rip), %eax	# flag_float_store, flag_float_store.691
	testl	%eax, %eax	# flag_float_store.691
	je	.L1946	#,
	.loc 1 9699 0 is_stmt 0 discriminator 1
	cmpl	$0, -296(%rbp)	#, written
	je	.L1946	#,
	.loc 1 9700 0 is_stmt 1
	movq	-136(%rbp), %rax	# mem, tmp415
	movzbl	2(%rax), %eax	# mem_168->mode, D.24964
	movzbl	%al, %eax	# D.24964, D.24958
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24965
	cmpl	$2, %eax	#, D.24965
	jne	.L1946	#,
	.loc 1 9701 0
	movq	-160(%rbp), %rax	# loop_info, tmp417
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp418
	movslq	%eax, %rdx	# tmp418, D.24961
	movq	%rdx, %rax	# D.24961, tmp419
	addq	%rax, %rax	# tmp419
	addq	%rdx, %rax	# D.24961, tmp419
	salq	$3, %rax	#, tmp420
	addq	%rcx, %rax	# D.24963, D.24963
	movl	$0, 16(%rax)	#, _195->optimize
.L1946:
	.loc 1 9705 0
	movq	-160(%rbp), %rax	# loop_info, tmp421
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp422
	movslq	%eax, %rdx	# tmp422, D.24961
	movq	%rdx, %rax	# D.24961, tmp423
	addq	%rax, %rax	# tmp423
	addq	%rdx, %rax	# D.24961, tmp423
	salq	$3, %rax	#, tmp424
	addq	%rcx, %rax	# D.24963, D.24963
	movl	16(%rax), %eax	# _199->optimize, D.24958
	testl	%eax, %eax	# D.24958
	je	.L1947	#,
	.loc 1 9705 0 is_stmt 0 discriminator 1
	cmpl	$0, -296(%rbp)	#, written
	je	.L1947	#,
.LBB123:
	.loc 1 9709 0 is_stmt 1
	movl	$0, -292(%rbp)	#, j
	jmp	.L1948	#
.L1951:
	.loc 1 9711 0
	movl	-292(%rbp), %eax	# j, tmp425
	cmpl	-304(%rbp), %eax	# i, tmp425
	jne	.L1949	#,
	.loc 1 9712 0
	jmp	.L1950	#
.L1949:
	.loc 1 9715 0
	movq	-160(%rbp), %rax	# loop_info, tmp426
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-292(%rbp), %eax	# j, tmp427
	movslq	%eax, %rdx	# tmp427, D.24961
	movq	%rdx, %rax	# D.24961, tmp428
	addq	%rax, %rax	# tmp428
	addq	%rdx, %rax	# D.24961, tmp428
	salq	$3, %rax	#, tmp429
	addq	%rcx, %rax	# D.24963, D.24963
	.loc 1 9713 0
	movq	(%rax), %rdx	# _206->mem, D.24959
	movq	-136(%rbp), %rax	# mem, tmp430
	movl	$rtx_varies_p, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp430,
	call	true_dependence	#
	testl	%eax, %eax	# D.24958
	je	.L1950	#,
	.loc 1 9721 0
	movq	-160(%rbp), %rax	# loop_info, tmp431
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp432
	movslq	%eax, %rdx	# tmp432, D.24961
	movq	%rdx, %rax	# D.24961, tmp433
	addq	%rax, %rax	# tmp433
	addq	%rdx, %rax	# D.24961, tmp433
	salq	$3, %rax	#, tmp434
	addq	%rcx, %rax	# D.24963, D.24963
	movl	$0, 16(%rax)	#, _212->optimize
	.loc 1 9722 0
	jmp	.L1947	#
.L1950:
	.loc 1 9709 0
	addl	$1, -292(%rbp)	#, j
.L1948:
	.loc 1 9709 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# loop_info, tmp435
	movl	136(%rax), %eax	# loop_info_57->mems_idx, D.24958
	cmpl	-292(%rbp), %eax	# j, D.24958
	jg	.L1951	#,
.L1947:
.LBE123:
	.loc 1 9727 0 is_stmt 1
	cmpl	$0, -308(%rbp)	#, maybe_never
	je	.L1952	#,
	.loc 1 9727 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# mem, tmp436
	movq	%rax, %rdi	# tmp436,
	call	may_trap_p	#
	testl	%eax, %eax	# D.24958
	je	.L1952	#,
	.loc 1 9730 0 is_stmt 1
	movq	-160(%rbp), %rax	# loop_info, tmp437
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp438
	movslq	%eax, %rdx	# tmp438, D.24961
	movq	%rdx, %rax	# D.24961, tmp439
	addq	%rax, %rax	# tmp439
	addq	%rdx, %rax	# D.24961, tmp439
	salq	$3, %rax	#, tmp440
	addq	%rcx, %rax	# D.24963, D.24963
	movl	$0, 16(%rax)	#, _218->optimize
.L1952:
	.loc 1 9732 0
	movq	-160(%rbp), %rax	# loop_info, tmp441
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp442
	movslq	%eax, %rdx	# tmp442, D.24961
	movq	%rdx, %rax	# D.24961, tmp443
	addq	%rax, %rax	# tmp443
	addq	%rdx, %rax	# D.24961, tmp443
	salq	$3, %rax	#, tmp444
	addq	%rcx, %rax	# D.24963, D.24963
	movl	16(%rax), %eax	# _222->optimize, D.24958
	testl	%eax, %eax	# D.24958
	je	.L1954	#,
	.loc 1 9737 0
	leaq	-80(%rbp), %rax	#, tmp445
	movq	%rax, %rdi	# tmp445,
	call	bitmap_initialize	#
	.loc 1 9738 0
	leaq	-48(%rbp), %rax	#, tmp446
	movq	%rax, %rdi	# tmp446,
	call	bitmap_initialize	#
	.loc 1 9744 0
	movq	-136(%rbp), %rax	# mem, tmp447
	movzbl	2(%rax), %eax	# mem_168->mode, D.24964
	movzbl	%al, %eax	# D.24964, D.24966
	movl	%eax, %edi	# D.24966,
	call	gen_reg_rtx	#
	movq	%rax, -128(%rbp)	# tmp448, reg
	.loc 1 9745 0
	movq	-128(%rbp), %rax	# reg, tmp449
	movzbl	3(%rax), %edx	# reg_226->volatil, tmp452
	orl	$8, %edx	#, tmp453
	movb	%dl, 3(%rax)	# tmp453, reg_226->volatil
	.loc 1 9746 0
	movq	-160(%rbp), %rax	# loop_info, tmp454
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp455
	movslq	%eax, %rdx	# tmp455, D.24961
	movq	%rdx, %rax	# D.24961, tmp456
	addq	%rax, %rax	# tmp456
	addq	%rdx, %rax	# D.24961, tmp456
	salq	$3, %rax	#, tmp457
	leaq	(%rcx,%rax), %rdx	#, D.24963
	movq	-128(%rbp), %rax	# reg, tmp458
	movq	%rax, 8(%rdx)	# tmp458, _230->reg
	.loc 1 9750 0
	movl	$0, -308(%rbp)	#, maybe_never
	.loc 1 9751 0
	movq	-328(%rbp), %rax	# loop, tmp459
	movq	216(%rax), %rdx	# loop_56(D)->scan_start, D.24959
	movq	-328(%rbp), %rax	# loop, tmp460
	movq	%rdx, %rsi	# D.24959,
	movq	%rax, %rdi	# tmp460,
	call	next_insn_in_loop	#
	movq	%rax, -256(%rbp)	# p.692, p
	jmp	.L1955	#
.L1965:
	.loc 1 9755 0
	movq	-256(%rbp), %rax	# p, p.693
	movzwl	(%rax), %eax	# p.693_235->code, D.24960
	movzwl	%ax, %eax	# D.24960, D.24958
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24967
	cmpb	$105, %al	#, D.24967
	jne	.L1956	#,
.LBB124:
	.loc 1 9759 0
	movq	-256(%rbp), %rax	# p, p.695
	movzwl	(%rax), %eax	# p.695_239->code, D.24960
	movzwl	%ax, %eax	# D.24960, D.24958
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24967
	cmpb	$105, %al	#, D.24967
	jne	.L1957	#,
	.loc 1 9759 0 is_stmt 0 discriminator 1
	movq	-256(%rbp), %rax	# p, p.697
	movq	32(%rax), %rax	# p.697_243->fld[3].rtx, D.24959
	movzwl	(%rax), %eax	# _244->code, D.24960
	cmpw	$47, %ax	#, D.24960
	jne	.L1958	#,
	.loc 1 9759 0 discriminator 3
	movq	-256(%rbp), %rax	# p, p.698
	movq	32(%rax), %rax	# p.698_246->fld[3].rtx, iftmp.696
	jmp	.L1960	#
.L1958:
	.loc 1 9759 0 discriminator 4
	movq	-256(%rbp), %rax	# p, p.699
	movq	32(%rax), %rdx	# p.699_248->fld[3].rtx, D.24959
	movq	-256(%rbp), %rax	# p, p.700
	movq	%rdx, %rsi	# D.24959,
	movq	%rax, %rdi	# p.700,
	call	single_set_2	#
	jmp	.L1960	#
.L1957:
	.loc 1 9759 0 discriminator 2
	movl	$0, %eax	#, iftmp.694
.L1960:
	.loc 1 9759 0 discriminator 5
	movq	%rax, -120(%rbp)	# iftmp.694, set
	.loc 1 9764 0 is_stmt 1 discriminator 5
	cmpq	$0, -120(%rbp)	#, set
	je	.L1961	#,
	.loc 1 9766 0
	cmpl	$0, -308(%rbp)	#, maybe_never
	jne	.L1961	#,
	.loc 1 9767 0
	movq	-120(%rbp), %rax	# set, tmp463
	movq	8(%rax), %rax	# set_254->fld[0].rtx, D.24959
	movzwl	(%rax), %eax	# _255->code, D.24960
	cmpw	$61, %ax	#, D.24960
	jne	.L1961	#,
	.loc 1 9768 0
	movq	-120(%rbp), %rax	# set, tmp464
	movq	8(%rax), %rax	# set_254->fld[0].rtx, D.24959
	movl	8(%rax), %eax	# _257->fld[0].rtuint, D.24968
	cmpl	$52, %eax	#, D.24968
	jbe	.L1961	#,
	.loc 1 9769 0
	movq	-120(%rbp), %rax	# set, tmp465
	movq	8(%rax), %rax	# set_254->fld[0].rtx, D.24959
	movl	8(%rax), %eax	# _259->fld[0].rtuint, D.24968
	cmpl	-272(%rbp), %eax	# last_max_reg, D.24968
	jae	.L1961	#,
	.loc 1 9770 0
	movq	-152(%rbp), %rax	# regs, tmp466
	movq	8(%rax), %rcx	# regs_59->array, D.24969
	movq	-120(%rbp), %rax	# set, tmp467
	movq	8(%rax), %rax	# set_254->fld[0].rtx, D.24959
	movl	8(%rax), %eax	# _262->fld[0].rtuint, D.24968
	movl	%eax, %edx	# D.24968, D.24961
	movq	%rdx, %rax	# D.24961, tmp468
	addq	%rax, %rax	# tmp468
	addq	%rdx, %rax	# D.24961, tmp468
	salq	$3, %rax	#, tmp469
	addq	%rcx, %rax	# D.24969, D.24969
	movl	4(%rax), %eax	# _266->n_times_set, D.24958
	cmpl	$1, %eax	#, D.24958
	jne	.L1961	#,
	.loc 1 9771 0
	movq	-120(%rbp), %rax	# set, tmp470
	movq	16(%rax), %rax	# set_254->fld[1].rtx, D.24959
	movq	-136(%rbp), %rdx	# mem, tmp471
	movq	%rdx, %rsi	# tmp471,
	movq	%rax, %rdi	# D.24959,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24958
	je	.L1961	#,
	.loc 1 9772 0
	movq	-120(%rbp), %rax	# set, tmp472
	movq	8(%rax), %rax	# set_254->fld[0].rtx, D.24959
	movl	8(%rax), %eax	# _270->fld[0].rtuint, D.24968
	movl	%eax, %edx	# D.24968, D.24958
	leaq	-80(%rbp), %rax	#, tmp473
	movl	%edx, %esi	# D.24958,
	movq	%rax, %rdi	# tmp473,
	call	bitmap_set_bit	#
.L1961:
	.loc 1 9779 0
	cmpq	$0, -120(%rbp)	#, set
	je	.L1962	#,
	.loc 1 9780 0
	cmpl	$0, -308(%rbp)	#, maybe_never
	jne	.L1962	#,
	.loc 1 9781 0
	movq	-120(%rbp), %rax	# set, tmp474
	movq	16(%rax), %rax	# set_254->fld[1].rtx, D.24959
	movzwl	(%rax), %eax	# _273->code, D.24960
	cmpw	$61, %ax	#, D.24960
	jne	.L1962	#,
	.loc 1 9782 0
	movq	-120(%rbp), %rax	# set, tmp475
	movq	16(%rax), %rax	# set_254->fld[1].rtx, D.24959
	movl	8(%rax), %eax	# _275->fld[0].rtuint, D.24968
	cmpl	$52, %eax	#, D.24968
	jbe	.L1962	#,
	.loc 1 9783 0
	movq	-120(%rbp), %rax	# set, tmp476
	movq	16(%rax), %rax	# set_254->fld[1].rtx, D.24959
	movl	8(%rax), %eax	# _277->fld[0].rtuint, D.24968
	cmpl	-272(%rbp), %eax	# last_max_reg, D.24968
	jae	.L1962	#,
	.loc 1 9784 0
	movq	-152(%rbp), %rax	# regs, tmp477
	movq	8(%rax), %rcx	# regs_59->array, D.24969
	movq	-120(%rbp), %rax	# set, tmp478
	movq	16(%rax), %rax	# set_254->fld[1].rtx, D.24959
	movl	8(%rax), %eax	# _280->fld[0].rtuint, D.24968
	movl	%eax, %edx	# D.24968, D.24961
	movq	%rdx, %rax	# D.24961, tmp479
	addq	%rax, %rax	# tmp479
	addq	%rdx, %rax	# D.24961, tmp479
	salq	$3, %rax	#, tmp480
	addq	%rcx, %rax	# D.24969, D.24969
	movl	4(%rax), %eax	# _284->n_times_set, D.24958
	cmpl	$1, %eax	#, D.24958
	jne	.L1962	#,
	.loc 1 9785 0
	movq	-120(%rbp), %rax	# set, tmp481
	movq	8(%rax), %rax	# set_254->fld[0].rtx, D.24959
	movq	-136(%rbp), %rdx	# mem, tmp482
	movq	%rdx, %rsi	# tmp482,
	movq	%rax, %rdi	# D.24959,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24958
	je	.L1962	#,
	.loc 1 9786 0
	movq	-120(%rbp), %rax	# set, tmp483
	movq	16(%rax), %rax	# set_254->fld[1].rtx, D.24959
	movl	8(%rax), %eax	# _288->fld[0].rtuint, D.24968
	movl	%eax, %edx	# D.24968, D.24958
	leaq	-48(%rbp), %rax	#, tmp484
	movl	%edx, %esi	# D.24958,
	movq	%rax, %rdi	# tmp484,
	call	bitmap_set_bit	#
.L1962:
	.loc 1 9790 0
	movq	-160(%rbp), %rax	# loop_info, tmp485
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp486
	movslq	%eax, %rdx	# tmp486, D.24961
	movq	%rdx, %rax	# D.24961, tmp487
	addq	%rax, %rax	# tmp487
	addq	%rdx, %rax	# D.24961, tmp487
	salq	$3, %rax	#, tmp488
	addq	%rcx, %rax	# D.24963, D.24963
	.loc 1 9789 0
	movq	8(%rax), %rsi	# _294->reg, D.24959
	movq	-160(%rbp), %rax	# loop_info, tmp489
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp490
	movslq	%eax, %rdx	# tmp490, D.24961
	movq	%rdx, %rax	# D.24961, tmp491
	addq	%rax, %rax	# tmp491
	addq	%rdx, %rax	# D.24961, tmp491
	salq	$3, %rax	#, tmp492
	addq	%rcx, %rax	# D.24963, D.24963
	movq	(%rax), %rcx	# _299->mem, D.24959
	movq	-256(%rbp), %rax	# p, p.701
	movq	%rsi, %rdx	# D.24959,
	movq	%rcx, %rsi	# D.24959,
	movq	%rax, %rdi	# p.701,
	call	replace_loop_mems	#
.L1956:
.LBE124:
	.loc 1 9793 0
	movq	-256(%rbp), %rax	# p, p.702
	movzwl	(%rax), %eax	# p.702_302->code, D.24960
	cmpw	$36, %ax	#, D.24960
	je	.L1963	#,
	.loc 1 9794 0
	movq	-256(%rbp), %rax	# p, p.703
	movzwl	(%rax), %eax	# p.703_304->code, D.24960
	cmpw	$33, %ax	#, D.24960
	jne	.L1964	#,
.L1963:
	.loc 1 9795 0
	movl	$1, -308(%rbp)	#, maybe_never
.L1964:
	.loc 1 9753 0
	movq	-256(%rbp), %rdx	# p, p.704
	movq	-328(%rbp), %rax	# loop, tmp493
	movq	%rdx, %rsi	# p.704,
	movq	%rax, %rdi	# tmp493,
	call	next_insn_in_loop	#
	movq	%rax, -256(%rbp)	# p.705, p
.L1955:
	.loc 1 9752 0 discriminator 1
	movq	-256(%rbp), %rax	# p, p.706
	.loc 1 9751 0 discriminator 1
	testq	%rax, %rax	# p.706
	jne	.L1965	#,
	.loc 1 9798 0
	call	apply_change_group	#
	testl	%eax, %eax	# D.24958
	jne	.L1966	#,
	.loc 1 9800 0
	movq	-160(%rbp), %rax	# loop_info, tmp494
	movq	128(%rax), %rcx	# loop_info_57->mems, D.24963
	movl	-304(%rbp), %eax	# i, tmp495
	movslq	%eax, %rdx	# tmp495, D.24961
	movq	%rdx, %rax	# D.24961, tmp496
	addq	%rax, %rax	# tmp496
	addq	%rdx, %rax	# D.24961, tmp496
	salq	$3, %rax	#, tmp497
	addq	%rcx, %rax	# D.24963, D.24963
	movl	$0, 16(%rax)	#, _313->optimize
	jmp	.L1954	#
.L1966:
.LBB125:
	.loc 1 9805 0
	movq	-136(%rbp), %rax	# mem, tmp498
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp498,
	call	cselib_lookup	#
	movq	%rax, -112(%rbp)	# tmp499, e
	.loc 1 9807 0
	movq	-136(%rbp), %rax	# mem, tmp500
	movq	%rax, -224(%rbp)	# tmp500, best
	.loc 1 9809 0
	movq	$0, -216(%rbp)	#, const_equiv
	.loc 1 9811 0
	cmpq	$0, -112(%rbp)	#, e
	je	.L1968	#,
.LBB126:
	.loc 1 9814 0
	movq	$0, -200(%rbp)	#, best_equiv
	.loc 1 9815 0
	movq	-112(%rbp), %rax	# e, tmp501
	movq	16(%rax), %rax	# e_314->locs, tmp502
	movq	%rax, -208(%rbp)	# tmp502, equiv
	jmp	.L1969	#
.L1973:
	.loc 1 9817 0
	movq	-208(%rbp), %rax	# equiv, tmp503
	movq	8(%rax), %rax	# equiv_27->loc, D.24959
	movzwl	(%rax), %eax	# _319->code, D.24960
	cmpw	$67, %ax	#, D.24960
	je	.L1970	#,
	.loc 1 9817 0 is_stmt 0 discriminator 1
	movq	-208(%rbp), %rax	# equiv, tmp504
	movq	8(%rax), %rax	# equiv_27->loc, D.24959
	movzwl	(%rax), %eax	# _321->code, D.24960
	cmpw	$68, %ax	#, D.24960
	je	.L1970	#,
	movq	-208(%rbp), %rax	# equiv, tmp505
	movq	8(%rax), %rax	# equiv_27->loc, D.24959
	movzwl	(%rax), %eax	# _323->code, D.24960
	cmpw	$54, %ax	#, D.24960
	je	.L1970	#,
	movq	-208(%rbp), %rax	# equiv, tmp506
	movq	8(%rax), %rax	# equiv_27->loc, D.24959
	movzwl	(%rax), %eax	# _325->code, D.24960
	cmpw	$55, %ax	#, D.24960
	je	.L1970	#,
	movq	-208(%rbp), %rax	# equiv, tmp507
	movq	8(%rax), %rax	# equiv_27->loc, D.24959
	movzwl	(%rax), %eax	# _327->code, D.24960
	cmpw	$58, %ax	#, D.24960
	je	.L1970	#,
	movq	-208(%rbp), %rax	# equiv, tmp508
	movq	8(%rax), %rax	# equiv_27->loc, D.24959
	movzwl	(%rax), %eax	# _329->code, D.24960
	cmpw	$134, %ax	#, D.24960
	je	.L1970	#,
	movq	-208(%rbp), %rax	# equiv, tmp509
	movq	8(%rax), %rax	# equiv_27->loc, D.24959
	movzwl	(%rax), %eax	# _331->code, D.24960
	cmpw	$56, %ax	#, D.24960
	je	.L1970	#,
	movq	-208(%rbp), %rax	# equiv, tmp510
	movq	8(%rax), %rax	# equiv_27->loc, D.24959
	movzwl	(%rax), %eax	# _333->code, D.24960
	cmpw	$140, %ax	#, D.24960
	jne	.L1971	#,
.L1970:
	.loc 1 9818 0 is_stmt 1
	movq	-208(%rbp), %rax	# equiv, tmp511
	movq	%rax, -216(%rbp)	# tmp511, const_equiv
	jmp	.L1972	#
.L1971:
	.loc 1 9819 0
	movq	-208(%rbp), %rax	# equiv, tmp512
	movq	8(%rax), %rax	# equiv_27->loc, D.24959
	movzwl	(%rax), %eax	# _335->code, D.24960
	cmpw	$61, %ax	#, D.24960
	jne	.L1972	#,
	.loc 1 9825 0
	movq	-208(%rbp), %rax	# equiv, tmp513
	movq	8(%rax), %rax	# equiv_27->loc, D.24959
	movl	8(%rax), %eax	# _337->fld[0].rtuint, D.24968
	cmpl	$52, %eax	#, D.24968
	jbe	.L1972	#,
	.loc 1 9826 0
	movq	-208(%rbp), %rax	# equiv, tmp514
	movq	%rax, -200(%rbp)	# tmp514, best_equiv
.L1972:
	.loc 1 9815 0
	movq	-208(%rbp), %rax	# equiv, tmp515
	movq	(%rax), %rax	# equiv_27->next, tmp516
	movq	%rax, -208(%rbp)	# tmp516, equiv
.L1969:
	.loc 1 9815 0 is_stmt 0 discriminator 1
	cmpq	$0, -208(%rbp)	#, equiv
	jne	.L1973	#,
	.loc 1 9829 0 is_stmt 1
	cmpq	$0, -200(%rbp)	#, best_equiv
	jne	.L1974	#,
	.loc 1 9830 0
	movq	-216(%rbp), %rax	# const_equiv, tmp517
	movq	%rax, -200(%rbp)	# tmp517, best_equiv
	jmp	.L1975	#
.L1974:
	.loc 1 9831 0
	cmpq	$0, -216(%rbp)	#, const_equiv
	je	.L1975	#,
	.loc 1 9832 0
	movq	-216(%rbp), %rax	# const_equiv, tmp518
	movq	8(%rax), %rax	# const_equiv_24->loc, D.24959
	movl	$47, %esi	#,
	movq	%rax, %rdi	# D.24959,
	call	rtx_cost	#
	movl	%eax, %ebx	#, D.24958
	.loc 1 9833 0
	movq	-200(%rbp), %rax	# best_equiv, tmp519
	movq	8(%rax), %rax	# best_equiv_29->loc, D.24959
	movl	$47, %esi	#,
	movq	%rax, %rdi	# D.24959,
	call	rtx_cost	#
	.loc 1 9832 0
	cmpl	%eax, %ebx	# D.24958, D.24958
	jg	.L1975	#,
	.loc 1 9835 0
	movq	-216(%rbp), %rax	# const_equiv, tmp520
	movq	%rax, -200(%rbp)	# tmp520, best_equiv
	.loc 1 9836 0
	movq	$0, -216(%rbp)	#, const_equiv
.L1975:
	.loc 1 9843 0
	cmpq	$0, -200(%rbp)	#, best_equiv
	je	.L1968	#,
	.loc 1 9844 0
	movq	-200(%rbp), %rax	# best_equiv, tmp521
	movq	8(%rax), %rax	# best_equiv_30->loc, D.24959
	movq	%rax, %rdi	# D.24959,
	call	copy_rtx	#
	movq	%rax, -224(%rbp)	# tmp522, best
.L1968:
.LBE126:
	.loc 1 9847 0
	movq	-224(%rbp), %rdx	# best, tmp523
	movq	-128(%rbp), %rax	# reg, tmp524
	movq	%rdx, %rsi	# tmp523,
	movq	%rax, %rdi	# tmp524,
	call	gen_move_insn	#
	movq	%rax, -104(%rbp)	# tmp525, set
	.loc 1 9848 0
	movq	-104(%rbp), %rdx	# set, tmp526
	movq	-328(%rbp), %rax	# loop, tmp527
	movq	%rdx, %rsi	# tmp526,
	movq	%rax, %rdi	# tmp527,
	call	loop_insn_hoist	#
	movq	%rax, -104(%rbp)	# tmp528, set
	.loc 1 9849 0
	movq	-224(%rbp), %rax	# best, tmp529
	movzwl	(%rax), %eax	# best_22->code, D.24960
	cmpw	$61, %ax	#, D.24960
	jne	.L1976	#,
	.loc 1 9851 0
	movq	-144(%rbp), %rax	# prev_ebb_head, tmp530
	movq	%rax, -256(%rbp)	# tmp530, p
	jmp	.L1977	#
.L1979:
	.loc 1 9852 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.707
	movq	-224(%rbp), %rdx	# best, tmp531
	movl	8(%rdx), %edx	# best_22->fld[0].rtuint, D.24968
	movl	%edx, %edx	# D.24968, tmp532
	addq	$4, %rdx	#, tmp533
	movq	(%rax,%rdx,8), %rax	# reg_n_info.707_356->data.reg, D.24970
	movl	4(%rax), %edx	# _358->last_uid, D.24958
	movq	-256(%rbp), %rax	# p, p.708
	movl	8(%rax), %eax	# p.708_360->fld[0].rtint, D.24958
	cmpl	%eax, %edx	# D.24958, D.24958
	jne	.L1978	#,
	.loc 1 9854 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.709
	movq	-224(%rbp), %rdx	# best, tmp534
	movl	8(%rdx), %edx	# best_22->fld[0].rtuint, D.24968
	movl	%edx, %edx	# D.24968, tmp535
	addq	$4, %rdx	#, tmp536
	movq	(%rax,%rdx,8), %rax	# reg_n_info.709_362->data.reg, D.24970
	movq	-104(%rbp), %rdx	# set, tmp537
	movl	8(%rdx), %edx	# set_352->fld[0].rtint, D.24958
	movl	%edx, 4(%rax)	# D.24958, _364->last_uid
	.loc 1 9855 0
	jmp	.L1976	#
.L1978:
	.loc 1 9851 0
	movq	-256(%rbp), %rax	# p, p.710
	movq	24(%rax), %rax	# p.710_366->fld[2].rtx, p.711
	movq	%rax, -256(%rbp)	# p.711, p
.L1977:
	.loc 1 9851 0 is_stmt 0 discriminator 1
	movq	-328(%rbp), %rax	# loop, tmp538
	movq	192(%rax), %rdx	# loop_56(D)->start, D.24959
	movq	-256(%rbp), %rax	# p, p.712
	cmpq	%rax, %rdx	# p.712, D.24959
	jne	.L1979	#,
.L1976:
	.loc 1 9859 0 is_stmt 1
	cmpq	$0, -216(%rbp)	#, const_equiv
	je	.L1980	#,
	.loc 1 9860 0
	movq	-216(%rbp), %rax	# const_equiv, tmp539
	movq	8(%rax), %rax	# const_equiv_26->loc, D.24959
	movq	%rax, %rdi	# D.24959,
	call	copy_rtx	#
	movq	%rax, %rdx	#, D.24959
	movq	-104(%rbp), %rax	# set, tmp540
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp540,
	call	set_unique_reg_note	#
.L1980:
	.loc 1 9862 0
	cmpl	$0, -296(%rbp)	#, written
	je	.L1981	#,
	.loc 1 9864 0
	cmpq	$0, -248(%rbp)	#, label
	jne	.L1982	#,
	.loc 1 9866 0
	call	gen_label_rtx	#
	movq	%rax, -248(%rbp)	# tmp541, label
	.loc 1 9867 0
	movq	-328(%rbp), %rax	# loop, tmp542
	movq	200(%rax), %rdx	# loop_56(D)->end, D.24959
	movq	-248(%rbp), %rax	# label, tmp543
	movq	%rdx, %rsi	# D.24959,
	movq	%rax, %rdi	# tmp543,
	call	emit_label_after	#
.L1982:
	.loc 1 9872 0
	movq	-136(%rbp), %rax	# mem, tmp544
	movq	%rax, %rdi	# tmp544,
	call	copy_rtx	#
	movq	-128(%rbp), %rdx	# reg, tmp545
	movq	%rdx, %rsi	# tmp545,
	movq	%rax, %rdi	# D.24959,
	call	gen_move_insn	#
	movq	%rax, -104(%rbp)	# tmp546, set
	.loc 1 9873 0
	movq	-104(%rbp), %rcx	# set, tmp547
	movq	-248(%rbp), %rdx	# label, tmp548
	movq	-328(%rbp), %rax	# loop, tmp549
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp549,
	call	loop_insn_emit_after	#
.L1981:
	.loc 1 9876 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.713
	testq	%rax, %rax	# loop_dump_stream.713
	je	.L1983	#,
	.loc 1 9878 0
	cmpl	$0, -296(%rbp)	#, written
	je	.L1984	#,
	.loc 1 9878 0 is_stmt 0 discriminator 1
	movl	$.LC67, %eax	#, iftmp.714
	jmp	.L1985	#
.L1984:
	.loc 1 9878 0 discriminator 2
	movl	$.LC68, %eax	#, iftmp.714
.L1985:
	.loc 1 9878 0 discriminator 3
	movq	-128(%rbp), %rdx	# reg, tmp550
	movl	8(%rdx), %edx	# reg_226->fld[0].rtuint, D.24968
	movq	loop_dump_stream(%rip), %rdi	# loop_dump_stream, loop_dump_stream.715
	movq	%rax, %rcx	# iftmp.714,
	movl	$.LC69, %esi	#,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 9880 0 is_stmt 1 discriminator 3
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.716
	movq	-136(%rbp), %rdx	# mem, tmp551
	movq	%rdx, %rsi	# tmp551,
	movq	%rax, %rdi	# loop_dump_stream.716,
	call	print_rtl	#
	.loc 1 9881 0 discriminator 3
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.717
	movq	%rax, %rsi	# loop_dump_stream.717,
	movl	$10, %edi	#,
	call	fputc	#
.L1983:
.LBB127:
	.loc 1 9887 0
	movq	-80(%rbp), %rax	# load_copies.first, tmp552
	movq	%rax, -192(%rbp)	# tmp552, ptr_
	movl	$0, -268(%rbp)	#, indx_
	movl	$53, -288(%rbp)	#, bit_num_
	movl	$0, -284(%rbp)	#, word_num_
	jmp	.L1986	#
.L1988:
	.loc 1 9887 0 is_stmt 0 discriminator 1
	movq	-192(%rbp), %rax	# ptr_, tmp553
	movq	(%rax), %rax	# ptr__31->next, tmp554
	movq	%rax, -192(%rbp)	# tmp554, ptr_
.L1986:
	cmpq	$0, -192(%rbp)	#, ptr_
	je	.L1987	#,
	.loc 1 9887 0 discriminator 2
	movq	-192(%rbp), %rax	# ptr_, tmp555
	movl	16(%rax), %eax	# ptr__31->indx, D.24968
	cmpl	-268(%rbp), %eax	# indx_, D.24968
	jb	.L1988	#,
.L1987:
	.loc 1 9887 0 discriminator 3
	cmpq	$0, -192(%rbp)	#, ptr_
	je	.L1989	#,
	.loc 1 9887 0 discriminator 1
	movq	-192(%rbp), %rax	# ptr_, tmp556
	movl	16(%rax), %eax	# ptr__31->indx, D.24968
	cmpl	-268(%rbp), %eax	# indx_, D.24968
	je	.L1989	#,
	movl	$0, -288(%rbp)	#, bit_num_
	movl	$0, -284(%rbp)	#, word_num_
	jmp	.L1990	#
.L1989:
	.loc 1 9887 0 discriminator 2
	jmp	.L1990	#
.L1997:
	.loc 1 9887 0
	jmp	.L1991	#
.L1996:
.LBB128:
	.loc 1 9887 0 discriminator 2
	movq	-192(%rbp), %rax	# ptr_, tmp557
	movl	-284(%rbp), %edx	# word_num_, tmp558
	addq	$2, %rdx	#, tmp559
	movq	8(%rax,%rdx,8), %rax	# ptr__32->bits, tmp560
	movq	%rax, -184(%rbp)	# tmp560, word_
	cmpq	$0, -184(%rbp)	#, word_
	je	.L1992	#,
	.loc 1 9887 0 discriminator 1
	jmp	.L1993	#
.L1995:
.LBB129:
	.loc 1 9887 0 discriminator 2
	movl	-288(%rbp), %eax	# bit_num_, bit_num_.718
	movl	$1, %edx	#, tmp561
	movl	%eax, %ecx	# bit_num_.718, tmp605
	salq	%cl, %rdx	# tmp605, tmp562
	movq	%rdx, %rax	# tmp562, tmp562
	movq	%rax, -96(%rbp)	# tmp562, mask_
	movq	-96(%rbp), %rax	# mask_, tmp563
	movq	-184(%rbp), %rdx	# word_, tmp564
	andq	%rdx, %rax	# tmp564, D.24961
	testq	%rax, %rax	# D.24961
	je	.L1994	#,
	.loc 1 9887 0 discriminator 1
	movq	-96(%rbp), %rax	# mask_, tmp565
	notq	%rax	# D.24961
	andq	%rax, -184(%rbp)	# D.24961, word_
	movq	-192(%rbp), %rax	# ptr_, tmp566
	movl	16(%rax), %eax	# ptr__32->indx, D.24968
	leal	(%rax,%rax), %edx	#, D.24968
	movl	-284(%rbp), %eax	# word_num_, tmp567
	addl	%edx, %eax	# D.24968, D.24968
	sall	$6, %eax	#, D.24968
	movl	%eax, %edx	# D.24968, D.24968
	movl	-288(%rbp), %eax	# bit_num_, tmp568
	addl	%edx, %eax	# D.24968, D.24968
	movl	%eax, -264(%rbp)	# D.24968, j
	movl	-264(%rbp), %edx	# j, j.719
	movq	-128(%rbp), %rcx	# reg, tmp569
	movq	-328(%rbp), %rax	# loop, tmp570
	movq	%rcx, %rsi	# tmp569,
	movq	%rax, %rdi	# tmp570,
	call	try_copy_prop	#
	cmpq	$0, -184(%rbp)	#, word_
	jne	.L1994	#,
	jmp	.L1992	#
.L1994:
.LBE129:
	.loc 1 9887 0 discriminator 2
	addl	$1, -288(%rbp)	#, bit_num_
.L1993:
	.loc 1 9887 0 discriminator 1
	cmpl	$63, -288(%rbp)	#, bit_num_
	jbe	.L1995	#,
.L1992:
	.loc 1 9887 0 discriminator 2
	movl	$0, -288(%rbp)	#, bit_num_
.LBE128:
	addl	$1, -284(%rbp)	#, word_num_
.L1991:
	.loc 1 9887 0 discriminator 1
	cmpl	$1, -284(%rbp)	#, word_num_
	jbe	.L1996	#,
	.loc 1 9887 0 discriminator 3
	movl	$0, -284(%rbp)	#, word_num_
	movq	-192(%rbp), %rax	# ptr_, tmp571
	movq	(%rax), %rax	# ptr__32->next, tmp572
	movq	%rax, -192(%rbp)	# tmp572, ptr_
.L1990:
	.loc 1 9887 0 discriminator 1
	cmpq	$0, -192(%rbp)	#, ptr_
	jne	.L1997	#,
.LBE127:
	.loc 1 9892 0 is_stmt 1
	leaq	-80(%rbp), %rax	#, tmp573
	movq	%rax, %rdi	# tmp573,
	call	bitmap_clear	#
.LBB130:
	.loc 1 9894 0
	movq	-48(%rbp), %rax	# store_copies.first, tmp574
	movq	%rax, -176(%rbp)	# tmp574, ptr_
	movl	$0, -260(%rbp)	#, indx_
	movl	$53, -280(%rbp)	#, bit_num_
	movl	$0, -276(%rbp)	#, word_num_
	jmp	.L1998	#
.L2000:
	.loc 1 9894 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# ptr_, tmp575
	movq	(%rax), %rax	# ptr__42->next, tmp576
	movq	%rax, -176(%rbp)	# tmp576, ptr_
.L1998:
	cmpq	$0, -176(%rbp)	#, ptr_
	je	.L1999	#,
	.loc 1 9894 0 discriminator 2
	movq	-176(%rbp), %rax	# ptr_, tmp577
	movl	16(%rax), %eax	# ptr__42->indx, D.24968
	cmpl	-260(%rbp), %eax	# indx_, D.24968
	jb	.L2000	#,
.L1999:
	.loc 1 9894 0 discriminator 3
	cmpq	$0, -176(%rbp)	#, ptr_
	je	.L2001	#,
	.loc 1 9894 0 discriminator 1
	movq	-176(%rbp), %rax	# ptr_, tmp578
	movl	16(%rax), %eax	# ptr__42->indx, D.24968
	cmpl	-260(%rbp), %eax	# indx_, D.24968
	je	.L2001	#,
	movl	$0, -280(%rbp)	#, bit_num_
	movl	$0, -276(%rbp)	#, word_num_
	jmp	.L2002	#
.L2001:
	.loc 1 9894 0 discriminator 2
	jmp	.L2002	#
.L2009:
	.loc 1 9894 0
	jmp	.L2003	#
.L2008:
.LBB131:
	.loc 1 9894 0 discriminator 2
	movq	-176(%rbp), %rax	# ptr_, tmp579
	movl	-276(%rbp), %edx	# word_num_, tmp580
	addq	$2, %rdx	#, tmp581
	movq	8(%rax,%rdx,8), %rax	# ptr__43->bits, tmp582
	movq	%rax, -168(%rbp)	# tmp582, word_
	cmpq	$0, -168(%rbp)	#, word_
	je	.L2004	#,
	.loc 1 9894 0 discriminator 1
	jmp	.L2005	#
.L2007:
.LBB132:
	.loc 1 9894 0 discriminator 2
	movl	-280(%rbp), %eax	# bit_num_, bit_num_.720
	movl	$1, %edx	#, tmp583
	movl	%eax, %ecx	# bit_num_.720, tmp608
	salq	%cl, %rdx	# tmp608, tmp584
	movq	%rdx, %rax	# tmp584, tmp584
	movq	%rax, -88(%rbp)	# tmp584, mask_
	movq	-88(%rbp), %rax	# mask_, tmp585
	movq	-168(%rbp), %rdx	# word_, tmp586
	andq	%rdx, %rax	# tmp586, D.24961
	testq	%rax, %rax	# D.24961
	je	.L2006	#,
	.loc 1 9894 0 discriminator 1
	movq	-88(%rbp), %rax	# mask_, tmp587
	notq	%rax	# D.24961
	andq	%rax, -168(%rbp)	# D.24961, word_
	movq	-176(%rbp), %rax	# ptr_, tmp588
	movl	16(%rax), %eax	# ptr__43->indx, D.24968
	leal	(%rax,%rax), %edx	#, D.24968
	movl	-276(%rbp), %eax	# word_num_, tmp589
	addl	%edx, %eax	# D.24968, D.24968
	sall	$6, %eax	#, D.24968
	movl	%eax, %edx	# D.24968, D.24968
	movl	-280(%rbp), %eax	# bit_num_, tmp590
	addl	%edx, %eax	# D.24968, D.24968
	movl	%eax, -264(%rbp)	# D.24968, j
	movl	-264(%rbp), %edx	# j, j.721
	movq	-128(%rbp), %rcx	# reg, tmp591
	movq	-328(%rbp), %rax	# loop, tmp592
	movq	%rcx, %rsi	# tmp591,
	movq	%rax, %rdi	# tmp592,
	call	try_swap_copy_prop	#
	cmpq	$0, -168(%rbp)	#, word_
	jne	.L2006	#,
	jmp	.L2004	#
.L2006:
.LBE132:
	.loc 1 9894 0 discriminator 2
	addl	$1, -280(%rbp)	#, bit_num_
.L2005:
	.loc 1 9894 0 discriminator 1
	cmpl	$63, -280(%rbp)	#, bit_num_
	jbe	.L2007	#,
.L2004:
	.loc 1 9894 0 discriminator 2
	movl	$0, -280(%rbp)	#, bit_num_
.LBE131:
	addl	$1, -276(%rbp)	#, word_num_
.L2003:
	.loc 1 9894 0 discriminator 1
	cmpl	$1, -276(%rbp)	#, word_num_
	jbe	.L2008	#,
	.loc 1 9894 0 discriminator 3
	movl	$0, -276(%rbp)	#, word_num_
	movq	-176(%rbp), %rax	# ptr_, tmp593
	movq	(%rax), %rax	# ptr__43->next, tmp594
	movq	%rax, -176(%rbp)	# tmp594, ptr_
.L2002:
	.loc 1 9894 0 discriminator 1
	cmpq	$0, -176(%rbp)	#, ptr_
	jne	.L2009	#,
.LBE130:
	.loc 1 9899 0 is_stmt 1
	leaq	-48(%rbp), %rax	#, tmp595
	movq	%rax, %rdi	# tmp595,
	call	bitmap_clear	#
.L1954:
.LBE125:
.LBE122:
	.loc 1 9668 0
	addl	$1, -304(%rbp)	#, i
.L1938:
	.loc 1 9668 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# loop_info, tmp596
	movl	136(%rax), %eax	# loop_info_57->mems_idx, D.24958
	cmpl	-304(%rbp), %eax	# i, D.24958
	jg	.L2010	#,
	.loc 1 9903 0 is_stmt 1
	cmpq	$0, -248(%rbp)	#, label
	je	.L2011	#,
	.loc 1 9903 0 is_stmt 0 discriminator 1
	cmpq	$0, -240(%rbp)	#, end_label
	je	.L2011	#,
.LBB133:
	.loc 1 9908 0 is_stmt 1
	movq	-240(%rbp), %rax	# end_label, tmp597
	movq	%rax, -48(%rbp)	# tmp597, rr.r1
	.loc 1 9909 0
	movq	-248(%rbp), %rax	# label, tmp598
	movq	%rax, -40(%rbp)	# tmp598, rr.r2
	.loc 1 9911 0
	movq	-328(%rbp), %rax	# loop, tmp599
	movq	192(%rax), %rax	# loop_56(D)->start, p.722
	movq	%rax, -256(%rbp)	# p.722, p
	jmp	.L2012	#
.L2014:
	.loc 1 9913 0
	leaq	-48(%rbp), %rdx	#, tmp600
	leaq	-256(%rbp), %rax	#, tmp601
	movl	$replace_label, %esi	#,
	movq	%rax, %rdi	# tmp601,
	call	for_each_rtx	#
	.loc 1 9921 0
	movq	-256(%rbp), %rax	# p, p.723
	movzwl	(%rax), %eax	# p.723_439->code, D.24960
	cmpw	$33, %ax	#, D.24960
	jne	.L2013	#,
	.loc 1 9921 0 is_stmt 0 discriminator 1
	movq	-256(%rbp), %rax	# p, p.724
	movq	64(%rax), %rax	# p.724_441->fld[7].rtx, D.24959
	cmpq	-240(%rbp), %rax	# end_label, D.24959
	jne	.L2013	#,
	.loc 1 9922 0 is_stmt 1
	movq	-256(%rbp), %rax	# p, p.725
	movq	-248(%rbp), %rdx	# label, tmp602
	movq	%rdx, 64(%rax)	# tmp602, p.725_443->fld[7].rtx
.L2013:
	.loc 1 9911 0
	movq	-256(%rbp), %rax	# p, p.726
	movq	24(%rax), %rax	# p.726_444->fld[2].rtx, p.727
	movq	%rax, -256(%rbp)	# p.727, p
.L2012:
	.loc 1 9911 0 is_stmt 0 discriminator 1
	movq	-328(%rbp), %rax	# loop, tmp603
	movq	200(%rax), %rdx	# loop_56(D)->end, D.24959
	movq	-256(%rbp), %rax	# p, p.728
	cmpq	%rax, %rdx	# p.728, D.24959
	jne	.L2014	#,
.L2011:
.LBE133:
	.loc 1 9926 0 is_stmt 1 discriminator 1
	call	cselib_finish	#
.L1911:
	.loc 1 9927 0
	addq	$328, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE95:
	.size	load_mems, .-load_mems
	.type	note_reg_stored, @function
note_reg_stored:
.LFB96:
	.loc 1 9942 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# x, x
	movq	%rsi, -32(%rbp)	# setter, setter
	movq	%rdx, -40(%rbp)	# arg, arg
	.loc 1 9943 0
	movq	-40(%rbp), %rax	# arg, tmp60
	movq	%rax, -8(%rbp)	# tmp60, t
	.loc 1 9944 0
	movq	-8(%rbp), %rax	# t, tmp61
	movq	8(%rax), %rax	# t_2->reg, D.24975
	cmpq	-24(%rbp), %rax	# x, D.24975
	jne	.L2019	#,
	.loc 1 9945 0
	movq	-8(%rbp), %rax	# t, tmp62
	movl	$1, (%rax)	#, t_2->set_seen
.L2019:
	.loc 1 9946 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE96:
	.size	note_reg_stored, .-note_reg_stored
	.section	.rodata
.LC70:
	.string	"  Replaced reg %d"
.LC71:
	.string	".\n"
	.text
	.type	try_copy_prop, @function
try_copy_prop:
.LFB97:
	.loc 1 9958 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$112, %rsp	#,
	movq	%rdi, -88(%rbp)	# loop, loop
	movq	%rsi, -96(%rbp)	# replacement, replacement
	movl	%edx, -100(%rbp)	# regno, regno
	.loc 1 9960 0
	movq	cfun(%rip), %rax	# cfun, cfun.729
	movq	24(%rax), %rax	# cfun.729_17->emit, D.24976
	movq	80(%rax), %rax	# _18->x_regno_reg_rtx, D.24977
	movl	-100(%rbp), %edx	# regno, D.24978
	salq	$3, %rdx	#, D.24978
	addq	%rdx, %rax	# D.24978, D.24977
	movq	(%rax), %rax	# *_23, tmp99
	movq	%rax, -48(%rbp)	# tmp99, reg_rtx
	.loc 1 9961 0
	movq	$0, -72(%rbp)	#, init_insn
	.loc 1 9964 0
	movl	$0, -80(%rbp)	#, replaced_last
	.loc 1 9965 0
	movl	$0, -76(%rbp)	#, store_is_first
	.loc 1 9967 0
	movq	-88(%rbp), %rax	# loop, tmp100
	movq	216(%rax), %rdx	# loop_28(D)->scan_start, D.24979
	movq	-88(%rbp), %rax	# loop, tmp101
	movq	%rdx, %rsi	# D.24979,
	movq	%rax, %rdi	# tmp101,
	call	next_insn_in_loop	#
	movq	%rax, -64(%rbp)	# tmp102, insn
	jmp	.L2022	#
.L2037:
.LBB134:
	.loc 1 9975 0
	movq	-64(%rbp), %rax	# insn, tmp103
	movzwl	(%rax), %eax	# insn_5->code, D.24980
	cmpw	$36, %ax	#, D.24980
	jne	.L2023	#,
	.loc 1 9975 0 is_stmt 0 discriminator 1
	cmpq	$0, -72(%rbp)	#, init_insn
	je	.L2023	#,
	.loc 1 9976 0 is_stmt 1
	jmp	.L2024	#
.L2023:
	.loc 1 9978 0
	movq	-64(%rbp), %rax	# insn, tmp104
	movzwl	(%rax), %eax	# insn_5->code, D.24980
	movzwl	%ax, %eax	# D.24980, D.24981
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24982
	cmpb	$105, %al	#, D.24982
	je	.L2025	#,
	.loc 1 9979 0
	jmp	.L2026	#
.L2025:
	.loc 1 9982 0
	movq	-64(%rbp), %rax	# insn, tmp106
	movzwl	(%rax), %eax	# insn_5->code, D.24980
	movzwl	%ax, %eax	# D.24980, D.24981
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24982
	cmpb	$105, %al	#, D.24982
	jne	.L2027	#,
	.loc 1 9982 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# insn, tmp108
	movq	32(%rax), %rax	# insn_5->fld[3].rtx, D.24979
	movzwl	(%rax), %eax	# _38->code, D.24980
	cmpw	$47, %ax	#, D.24980
	jne	.L2028	#,
	.loc 1 9982 0 discriminator 3
	movq	-64(%rbp), %rax	# insn, tmp109
	movq	32(%rax), %rax	# insn_5->fld[3].rtx, iftmp.731
	jmp	.L2030	#
.L2028:
	.loc 1 9982 0 discriminator 4
	movq	-64(%rbp), %rax	# insn, tmp110
	movq	32(%rax), %rdx	# insn_5->fld[3].rtx, D.24979
	movq	-64(%rbp), %rax	# insn, tmp111
	movq	%rdx, %rsi	# D.24979,
	movq	%rax, %rdi	# tmp111,
	call	single_set_2	#
	jmp	.L2030	#
.L2027:
	.loc 1 9982 0 discriminator 2
	movl	$0, %eax	#, iftmp.730
.L2030:
	.loc 1 9982 0 discriminator 5
	movq	%rax, -40(%rbp)	# iftmp.730, set
	.loc 1 9983 0 is_stmt 1 discriminator 5
	cmpq	$0, -40(%rbp)	#, set
	je	.L2031	#,
	.loc 1 9984 0
	movq	-40(%rbp), %rax	# set, tmp112
	movq	8(%rax), %rax	# set_45->fld[0].rtx, D.24979
	movzwl	(%rax), %eax	# _46->code, D.24980
	cmpw	$61, %ax	#, D.24980
	jne	.L2031	#,
	.loc 1 9985 0
	movq	-40(%rbp), %rax	# set, tmp113
	movq	8(%rax), %rax	# set_45->fld[0].rtx, D.24979
	movl	8(%rax), %eax	# _48->fld[0].rtuint, D.24983
	cmpl	-100(%rbp), %eax	# regno, D.24983
	jne	.L2031	#,
	.loc 1 9987 0
	cmpq	$0, -72(%rbp)	#, init_insn
	je	.L2032	#,
	.loc 1 9988 0
	movl	$__FUNCTION__.14472, %edx	#,
	movl	$9988, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L2032:
	.loc 1 9990 0
	movq	-64(%rbp), %rax	# insn, tmp114
	movq	%rax, -72(%rbp)	# tmp114, init_insn
	.loc 1 9991 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.732
	movl	-100(%rbp), %edx	# regno, tmp115
	addq	$4, %rdx	#, tmp116
	movq	(%rax,%rdx,8), %rax	# reg_n_info.732_51->data.reg, D.24984
	movl	(%rax), %edx	# _52->first_uid, D.24981
	movq	-64(%rbp), %rax	# insn, tmp117
	movl	8(%rax), %eax	# insn_5->fld[0].rtint, D.24981
	cmpl	%eax, %edx	# D.24981, D.24981
	jne	.L2031	#,
	.loc 1 9992 0
	movl	$1, -76(%rbp)	#, store_is_first
.L2031:
	.loc 1 9996 0
	cmpq	$0, -72(%rbp)	#, init_insn
	je	.L2026	#,
	.loc 1 9996 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# insn, tmp118
	cmpq	-72(%rbp), %rax	# init_insn, tmp118
	je	.L2026	#,
.LBB135:
	.loc 1 10000 0 is_stmt 1
	movq	-96(%rbp), %rdx	# replacement, tmp119
	movq	-48(%rbp), %rcx	# reg_rtx, tmp120
	movq	-64(%rbp), %rax	# insn, tmp121
	movq	%rcx, %rsi	# tmp120,
	movq	%rax, %rdi	# tmp121,
	call	replace_loop_regs	#
	.loc 1 10001 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.733
	movl	-100(%rbp), %edx	# regno, tmp122
	addq	$4, %rdx	#, tmp123
	movq	(%rax,%rdx,8), %rax	# reg_n_info.733_57->data.reg, D.24984
	movl	4(%rax), %edx	# _58->last_uid, D.24981
	movq	-64(%rbp), %rax	# insn, tmp124
	movl	8(%rax), %eax	# insn_5->fld[0].rtint, D.24981
	cmpl	%eax, %edx	# D.24981, D.24981
	jne	.L2033	#,
	.loc 1 10002 0
	movl	$1, -80(%rbp)	#, replaced_last
.L2033:
	.loc 1 10005 0
	movq	-96(%rbp), %rax	# replacement, tmp125
	movq	%rax, -8(%rbp)	# tmp125, arg.reg
	.loc 1 10006 0
	movl	$0, -16(%rbp)	#, arg.set_seen
	.loc 1 10007 0
	movq	-64(%rbp), %rax	# insn, tmp126
	movq	32(%rax), %rax	# insn_5->fld[3].rtx, D.24979
	leaq	-16(%rbp), %rdx	#, tmp127
	movl	$note_reg_stored, %esi	#,
	movq	%rax, %rdi	# D.24979,
	call	note_stores	#
	.loc 1 10008 0
	movl	-16(%rbp), %eax	# arg.set_seen, D.24981
	testl	%eax, %eax	# D.24981
	je	.L2026	#,
.LBB136:
	.loc 1 10010 0
	movq	-64(%rbp), %rax	# insn, tmp128
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp128,
	call	find_reg_note	#
	movq	%rax, -32(%rbp)	# tmp129, note
	.loc 1 10015 0
	cmpq	$0, -32(%rbp)	#, note
	je	.L2035	#,
	.loc 1 10015 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# note, tmp130
	movq	8(%rax), %rdx	# note_64->fld[0].rtx, D.24979
	movq	-96(%rbp), %rax	# replacement, tmp131
	movq	%rdx, %rsi	# D.24979,
	movq	%rax, %rdi	# tmp131,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.24981
	je	.L2035	#,
	.loc 1 10016 0 is_stmt 1
	movq	-32(%rbp), %rdx	# note, tmp132
	movq	-64(%rbp), %rax	# insn, tmp133
	movq	%rdx, %rsi	# tmp132,
	movq	%rax, %rdi	# tmp133,
	call	remove_note	#
.L2035:
	.loc 1 10017 0
	nop
	jmp	.L2024	#
.L2026:
.LBE136:
.LBE135:
.LBE134:
	.loc 1 9969 0
	movq	-64(%rbp), %rdx	# insn, tmp134
	movq	-88(%rbp), %rax	# loop, tmp135
	movq	%rdx, %rsi	# tmp134,
	movq	%rax, %rdi	# tmp135,
	call	next_insn_in_loop	#
	movq	%rax, -64(%rbp)	# tmp136, insn
.L2022:
	.loc 1 9967 0 discriminator 1
	cmpq	$0, -64(%rbp)	#, insn
	jne	.L2037	#,
.L2024:
	.loc 1 10021 0
	cmpq	$0, -72(%rbp)	#, init_insn
	jne	.L2038	#,
	.loc 1 10022 0
	movl	$__FUNCTION__.14472, %edx	#,
	movl	$10022, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L2038:
	.loc 1 10023 0
	call	apply_change_group	#
	testl	%eax, %eax	# D.24981
	je	.L2021	#,
	.loc 1 10025 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.734
	testq	%rax, %rax	# loop_dump_stream.734
	je	.L2040	#,
	.loc 1 10026 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.735
	movl	-100(%rbp), %edx	# regno, tmp137
	movl	$.LC70, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.735,
	movl	$0, %eax	#,
	call	fprintf	#
.L2040:
	.loc 1 10027 0
	cmpl	$0, -76(%rbp)	#, store_is_first
	je	.L2041	#,
	.loc 1 10027 0 is_stmt 0 discriminator 1
	cmpl	$0, -80(%rbp)	#, replaced_last
	je	.L2041	#,
.LBB137:
	.loc 1 10033 0 is_stmt 1
	movq	-72(%rbp), %rax	# init_insn, tmp138
	movq	%rax, -56(%rbp)	# tmp138, first
	.loc 1 10036 0
	movq	-72(%rbp), %rax	# init_insn, tmp139
	movl	$0, %edx	#,
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp139,
	call	find_reg_note	#
	movq	%rax, -24(%rbp)	# tmp140, retval_note
	.loc 1 10039 0
	cmpq	$0, -24(%rbp)	#, retval_note
	je	.L2042	#,
	.loc 1 10040 0
	movq	-24(%rbp), %rax	# retval_note, tmp141
	movq	8(%rax), %rax	# retval_note_72->fld[0].rtx, tmp142
	movq	%rax, -56(%rbp)	# tmp142, first
.L2042:
	.loc 1 10043 0
	movq	-72(%rbp), %rdx	# init_insn, tmp143
	movq	-56(%rbp), %rax	# first, tmp144
	movq	%rdx, %rsi	# tmp143,
	movq	%rax, %rdi	# tmp144,
	call	loop_delete_insns	#
.L2041:
.LBE137:
	.loc 1 10045 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.736
	testq	%rax, %rax	# loop_dump_stream.736
	je	.L2021	#,
	.loc 1 10046 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.737
	movq	%rax, %rcx	# loop_dump_stream.737,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC71, %edi	#,
	call	fwrite	#
.L2021:
	.loc 1 10048 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE97:
	.size	try_copy_prop, .-try_copy_prop
	.section	.rodata
.LC72:
	.string	", deleting init_insn (%d)"
	.text
	.type	loop_delete_insns, @function
loop_delete_insns:
.LFB98:
	.loc 1 10057 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# first, first
	movq	%rsi, -16(%rbp)	# last, last
.L2047:
	.loc 1 10060 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.738
	testq	%rax, %rax	# loop_dump_stream.738
	je	.L2044	#,
	.loc 1 10061 0
	movq	-8(%rbp), %rax	# first, tmp62
	movl	8(%rax), %edx	# first_1->fld[0].rtint, D.24987
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.739
	movl	$.LC72, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.739,
	movl	$0, %eax	#,
	call	fprintf	#
.L2044:
	.loc 1 10063 0
	movq	-8(%rbp), %rax	# first, tmp63
	movq	%rax, %rdi	# tmp63,
	call	delete_insn	#
	.loc 1 10067 0
	movq	-8(%rbp), %rax	# first, tmp64
	cmpq	-16(%rbp), %rax	# last, tmp64
	jne	.L2045	#,
	.loc 1 10068 0
	jmp	.L2048	#
.L2045:
	.loc 1 10070 0
	movq	-8(%rbp), %rax	# first, tmp65
	movq	24(%rax), %rax	# first_1->fld[2].rtx, tmp66
	movq	%rax, -8(%rbp)	# tmp66, first
	.loc 1 10071 0
	jmp	.L2047	#
.L2048:
	.loc 1 10072 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE98:
	.size	loop_delete_insns, .-loop_delete_insns
	.section	.rodata
	.align 8
.LC73:
	.string	"  Swapped set of reg %d at %d with reg %d at %d.\n"
	.text
	.type	try_swap_copy_prop, @function
try_swap_copy_prop:
.LFB99:
	.loc 1 10084 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -56(%rbp)	# loop, loop
	movq	%rsi, -64(%rbp)	# replacement, replacement
	movl	%edx, -68(%rbp)	# regno, regno
	.loc 1 10086 0
	movq	$0, -24(%rbp)	#, set
	.loc 1 10089 0
	movq	-64(%rbp), %rax	# replacement, tmp110
	movl	8(%rax), %eax	# replacement_10(D)->fld[0].rtuint, tmp111
	movl	%eax, -36(%rbp)	# tmp111, new_regno
	.loc 1 10091 0
	movq	-56(%rbp), %rax	# loop, tmp112
	movq	216(%rax), %rdx	# loop_12(D)->scan_start, D.24989
	movq	-56(%rbp), %rax	# loop, tmp113
	movq	%rdx, %rsi	# D.24989,
	movq	%rax, %rdi	# tmp113,
	call	next_insn_in_loop	#
	movq	%rax, -32(%rbp)	# tmp114, insn
	jmp	.L2050	#
.L2057:
	.loc 1 10096 0
	movq	-32(%rbp), %rax	# insn, tmp115
	movzwl	(%rax), %eax	# insn_1->code, D.24990
	movzwl	%ax, %eax	# D.24990, D.24991
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24992
	cmpb	$105, %al	#, D.24992
	jne	.L2051	#,
	.loc 1 10097 0
	movq	-32(%rbp), %rax	# insn, tmp117
	movzwl	(%rax), %eax	# insn_1->code, D.24990
	movzwl	%ax, %eax	# D.24990, D.24991
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24992
	cmpb	$105, %al	#, D.24992
	jne	.L2052	#,
	.loc 1 10097 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# insn, tmp119
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.24989
	movzwl	(%rax), %eax	# _21->code, D.24990
	cmpw	$47, %ax	#, D.24990
	jne	.L2053	#,
	.loc 1 10097 0 discriminator 3
	movq	-32(%rbp), %rax	# insn, tmp120
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, iftmp.741
	jmp	.L2055	#
.L2053:
	.loc 1 10097 0 discriminator 4
	movq	-32(%rbp), %rax	# insn, tmp121
	movq	32(%rax), %rdx	# insn_1->fld[3].rtx, D.24989
	movq	-32(%rbp), %rax	# insn, tmp122
	movq	%rdx, %rsi	# D.24989,
	movq	%rax, %rdi	# tmp122,
	call	single_set_2	#
	jmp	.L2055	#
.L2052:
	.loc 1 10097 0 discriminator 2
	movl	$0, %eax	#, iftmp.740
.L2055:
	.loc 1 10097 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.740, set
	cmpq	$0, -24(%rbp)	#, set
	je	.L2051	#,
	.loc 1 10098 0 is_stmt 1
	movq	-24(%rbp), %rax	# set, tmp123
	movq	8(%rax), %rax	# set_28->fld[0].rtx, D.24989
	movzwl	(%rax), %eax	# _29->code, D.24990
	cmpw	$61, %ax	#, D.24990
	jne	.L2051	#,
	.loc 1 10099 0
	movq	-24(%rbp), %rax	# set, tmp124
	movq	8(%rax), %rax	# set_28->fld[0].rtx, D.24989
	movl	8(%rax), %eax	# _31->fld[0].rtuint, D.24993
	cmpl	-36(%rbp), %eax	# new_regno, D.24993
	jne	.L2051	#,
	.loc 1 10100 0
	movq	-24(%rbp), %rax	# set, tmp125
	movq	16(%rax), %rax	# set_28->fld[1].rtx, D.24989
	movzwl	(%rax), %eax	# _33->code, D.24990
	cmpw	$61, %ax	#, D.24990
	jne	.L2051	#,
	.loc 1 10101 0
	movq	-24(%rbp), %rax	# set, tmp126
	movq	16(%rax), %rax	# set_28->fld[1].rtx, D.24989
	movl	8(%rax), %eax	# _35->fld[0].rtuint, D.24993
	cmpl	-68(%rbp), %eax	# regno, D.24993
	jne	.L2051	#,
	.loc 1 10102 0
	jmp	.L2056	#
.L2051:
	.loc 1 10093 0
	movq	-32(%rbp), %rdx	# insn, tmp127
	movq	-56(%rbp), %rax	# loop, tmp128
	movq	%rdx, %rsi	# tmp127,
	movq	%rax, %rdi	# tmp128,
	call	next_insn_in_loop	#
	movq	%rax, -32(%rbp)	# tmp129, insn
.L2050:
	.loc 1 10091 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, insn
	jne	.L2057	#,
.L2056:
	.loc 1 10105 0
	cmpq	$0, -32(%rbp)	#, insn
	je	.L2049	#,
.LBB138:
	.loc 1 10114 0
	movq	-32(%rbp), %rax	# insn, tmp130
	movq	16(%rax), %rax	# insn_1->fld[1].rtx, tmp131
	movq	%rax, -16(%rbp)	# tmp131, prev_insn
	.loc 1 10116 0
	movq	-32(%rbp), %rax	# insn, tmp132
	movzwl	(%rax), %eax	# insn_1->code, D.24990
	movzwl	%ax, %eax	# D.24990, D.24991
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24992
	cmpb	$105, %al	#, D.24992
	jne	.L2049	#,
	.loc 1 10117 0
	movq	-16(%rbp), %rax	# prev_insn, tmp134
	movzwl	(%rax), %eax	# prev_insn_39->code, D.24990
	movzwl	%ax, %eax	# D.24990, D.24991
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.24992
	cmpb	$105, %al	#, D.24992
	jne	.L2059	#,
	.loc 1 10117 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# prev_insn, tmp136
	movq	32(%rax), %rax	# prev_insn_39->fld[3].rtx, D.24989
	movzwl	(%rax), %eax	# _46->code, D.24990
	cmpw	$47, %ax	#, D.24990
	jne	.L2060	#,
	.loc 1 10117 0 discriminator 3
	movq	-16(%rbp), %rax	# prev_insn, tmp137
	movq	32(%rax), %rax	# prev_insn_39->fld[3].rtx, iftmp.743
	jmp	.L2062	#
.L2060:
	.loc 1 10117 0 discriminator 4
	movq	-16(%rbp), %rax	# prev_insn, tmp138
	movq	32(%rax), %rdx	# prev_insn_39->fld[3].rtx, D.24989
	movq	-16(%rbp), %rax	# prev_insn, tmp139
	movq	%rdx, %rsi	# D.24989,
	movq	%rax, %rdi	# tmp139,
	call	single_set_2	#
	jmp	.L2062	#
.L2059:
	.loc 1 10117 0 discriminator 2
	movl	$0, %eax	#, iftmp.742
.L2062:
	.loc 1 10117 0 discriminator 5
	movq	%rax, -8(%rbp)	# iftmp.742, prev_set
	cmpq	$0, -8(%rbp)	#, prev_set
	je	.L2049	#,
	.loc 1 10118 0 is_stmt 1
	movq	-8(%rbp), %rax	# prev_set, tmp140
	movq	8(%rax), %rax	# prev_set_53->fld[0].rtx, D.24989
	movzwl	(%rax), %eax	# _54->code, D.24990
	cmpw	$61, %ax	#, D.24990
	jne	.L2049	#,
	.loc 1 10119 0
	movq	-8(%rbp), %rax	# prev_set, tmp141
	movq	8(%rax), %rax	# prev_set_53->fld[0].rtx, D.24989
	movl	8(%rax), %eax	# _56->fld[0].rtuint, D.24993
	cmpl	-68(%rbp), %eax	# regno, D.24993
	jne	.L2049	#,
	.loc 1 10134 0
	movq	-8(%rbp), %rax	# prev_set, tmp142
	leaq	8(%rax), %rsi	#, D.24994
	movq	-64(%rbp), %rdx	# replacement, tmp143
	movq	-16(%rbp), %rax	# prev_insn, tmp144
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp144,
	call	validate_change	#
	.loc 1 10136 0
	movq	-24(%rbp), %rax	# set, tmp145
	movq	16(%rax), %rdx	# set_4->fld[1].rtx, D.24989
	movq	-24(%rbp), %rax	# set, tmp146
	leaq	8(%rax), %rsi	#, D.24994
	movq	-32(%rbp), %rax	# insn, tmp147
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp147,
	call	validate_change	#
	.loc 1 10138 0
	movq	-24(%rbp), %rax	# set, tmp148
	leaq	16(%rax), %rsi	#, D.24994
	movq	-64(%rbp), %rdx	# replacement, tmp149
	movq	-32(%rbp), %rax	# insn, tmp150
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp150,
	call	validate_change	#
	.loc 1 10141 0
	call	apply_change_group	#
	testl	%eax, %eax	# D.24991
	je	.L2049	#,
	.loc 1 10143 0
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.744
	testq	%rax, %rax	# loop_dump_stream.744
	je	.L2063	#,
	.loc 1 10144 0
	movq	-16(%rbp), %rax	# prev_insn, tmp151
	movl	8(%rax), %edi	# prev_insn_39->fld[0].rtint, D.24991
	movq	-32(%rbp), %rax	# insn, tmp152
	movl	8(%rax), %ecx	# insn_1->fld[0].rtint, D.24991
	movq	loop_dump_stream(%rip), %rax	# loop_dump_stream, loop_dump_stream.745
	movl	-36(%rbp), %esi	# new_regno, tmp153
	movl	-68(%rbp), %edx	# regno, tmp154
	movl	%edi, %r9d	# D.24991,
	movl	%esi, %r8d	# tmp153,
	movl	$.LC73, %esi	#,
	movq	%rax, %rdi	# loop_dump_stream.745,
	movl	$0, %eax	#,
	call	fprintf	#
.L2063:
	.loc 1 10150 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.746
	movl	-68(%rbp), %edx	# regno, tmp155
	addq	$4, %rdx	#, tmp156
	movq	(%rax,%rdx,8), %rax	# reg_n_info.746_67->data.reg, D.24995
	movl	(%rax), %edx	# _68->first_uid, D.24991
	movq	-16(%rbp), %rax	# prev_insn, tmp157
	movl	8(%rax), %eax	# prev_insn_39->fld[0].rtint, D.24991
	cmpl	%eax, %edx	# D.24991, D.24991
	jne	.L2064	#,
	.loc 1 10151 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.747
	movl	-68(%rbp), %edx	# regno, tmp158
	addq	$4, %rdx	#, tmp159
	movq	(%rax,%rdx,8), %rax	# reg_n_info.747_71->data.reg, D.24995
	movq	-32(%rbp), %rdx	# insn, tmp160
	movl	8(%rdx), %edx	# insn_1->fld[0].rtint, D.24991
	movl	%edx, (%rax)	# D.24991, _72->first_uid
.L2064:
	.loc 1 10155 0
	movl	-68(%rbp), %edx	# regno, tmp161
	movq	-64(%rbp), %rcx	# replacement, tmp162
	movq	-56(%rbp), %rax	# loop, tmp163
	movq	%rcx, %rsi	# tmp162,
	movq	%rax, %rdi	# tmp163,
	call	try_copy_prop	#
.L2049:
.LBE138:
	.loc 1 10159 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE99:
	.size	try_swap_copy_prop, .-try_swap_copy_prop
	.type	replace_loop_mem, @function
replace_loop_mem:
.LFB100:
	.loc 1 10170 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# mem, mem
	movq	%rsi, -32(%rbp)	# data, data
	.loc 1 10171 0
	movq	-32(%rbp), %rax	# data, tmp67
	movq	%rax, -16(%rbp)	# tmp67, args
	.loc 1 10172 0
	movq	-24(%rbp), %rax	# mem, tmp68
	movq	(%rax), %rax	# *mem_4(D), tmp69
	movq	%rax, -8(%rbp)	# tmp69, m
	.loc 1 10174 0
	cmpq	$0, -8(%rbp)	#, m
	jne	.L2066	#,
	.loc 1 10175 0
	movl	$0, %eax	#, D.24997
	jmp	.L2067	#
.L2066:
	.loc 1 10177 0
	movq	-8(%rbp), %rax	# m, tmp70
	movzwl	(%rax), %eax	# m_5->code, D.24998
	movzwl	%ax, %eax	# D.24998, D.24999
	cmpl	$55, %eax	#, D.24999
	je	.L2069	#,
	cmpl	$66, %eax	#, D.24999
	je	.L2074	#,
	jmp	.L2073	#
.L2069:
	.loc 1 10185 0
	movl	$-1, %eax	#, D.24997
	jmp	.L2067	#
.L2073:
	.loc 1 10189 0
	movl	$0, %eax	#, D.24997
	jmp	.L2067	#
.L2074:
	.loc 1 10180 0
	nop
	.loc 1 10192 0
	movq	-16(%rbp), %rax	# args, tmp71
	movq	(%rax), %rax	# args_3->match, D.25000
	movq	-8(%rbp), %rdx	# m, tmp72
	movq	%rdx, %rsi	# tmp72,
	movq	%rax, %rdi	# D.25000,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.24997
	jne	.L2072	#,
	.loc 1 10194 0
	movl	$0, %eax	#, D.24997
	jmp	.L2067	#
.L2072:
	.loc 1 10197 0
	movq	-16(%rbp), %rax	# args, tmp73
	movq	8(%rax), %rdx	# args_3->replacement, D.25000
	movq	-16(%rbp), %rax	# args, tmp74
	movq	16(%rax), %rax	# args_3->insn, D.25000
	movq	-24(%rbp), %rsi	# mem, tmp75
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# D.25000,
	call	validate_change	#
	.loc 1 10199 0
	movl	$0, %eax	#, D.24997
.L2067:
	.loc 1 10200 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE100:
	.size	replace_loop_mem, .-replace_loop_mem
	.type	replace_loop_mems, @function
replace_loop_mems:
.LFB101:
	.loc 1 10207 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# insn, insn
	movq	%rsi, -48(%rbp)	# mem, mem
	movq	%rdx, -56(%rbp)	# reg, reg
	.loc 1 10210 0
	movq	-40(%rbp), %rax	# insn, insn.748
	movq	%rax, -16(%rbp)	# insn.748, args.insn
	.loc 1 10211 0
	movq	-48(%rbp), %rax	# mem, tmp60
	movq	%rax, -32(%rbp)	# tmp60, args.match
	.loc 1 10212 0
	movq	-56(%rbp), %rax	# reg, tmp61
	movq	%rax, -24(%rbp)	# tmp61, args.replacement
	.loc 1 10214 0
	leaq	-32(%rbp), %rdx	#, tmp62
	leaq	-40(%rbp), %rax	#, tmp63
	movl	$replace_loop_mem, %esi	#,
	movq	%rax, %rdi	# tmp63,
	call	for_each_rtx	#
	.loc 1 10215 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE101:
	.size	replace_loop_mems, .-replace_loop_mems
	.type	replace_loop_reg, @function
replace_loop_reg:
.LFB102:
	.loc 1 10225 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# px, px
	movq	%rsi, -32(%rbp)	# data, data
	.loc 1 10226 0
	movq	-24(%rbp), %rax	# px, tmp64
	movq	(%rax), %rax	# *px_2(D), tmp65
	movq	%rax, -16(%rbp)	# tmp65, x
	.loc 1 10227 0
	movq	-32(%rbp), %rax	# data, tmp66
	movq	%rax, -8(%rbp)	# tmp66, args
	.loc 1 10229 0
	cmpq	$0, -16(%rbp)	#, x
	jne	.L2077	#,
	.loc 1 10230 0
	movl	$0, %eax	#, D.25001
	jmp	.L2078	#
.L2077:
	.loc 1 10232 0
	movq	-8(%rbp), %rax	# args, tmp67
	movq	(%rax), %rax	# args_5->match, D.25002
	cmpq	-16(%rbp), %rax	# x, D.25002
	jne	.L2079	#,
	.loc 1 10233 0
	movq	-8(%rbp), %rax	# args, tmp68
	movq	8(%rax), %rdx	# args_5->replacement, D.25002
	movq	-8(%rbp), %rax	# args, tmp69
	movq	16(%rax), %rax	# args_5->insn, D.25002
	movq	-24(%rbp), %rsi	# px, tmp70
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# D.25002,
	call	validate_change	#
.L2079:
	.loc 1 10235 0
	movl	$0, %eax	#, D.25001
.L2078:
	.loc 1 10236 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE102:
	.size	replace_loop_reg, .-replace_loop_reg
	.type	replace_loop_regs, @function
replace_loop_regs:
.LFB103:
	.loc 1 10243 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# insn, insn
	movq	%rsi, -48(%rbp)	# reg, reg
	movq	%rdx, -56(%rbp)	# replacement, replacement
	.loc 1 10246 0
	movq	-40(%rbp), %rax	# insn, insn.749
	movq	%rax, -16(%rbp)	# insn.749, args.insn
	.loc 1 10247 0
	movq	-48(%rbp), %rax	# reg, tmp60
	movq	%rax, -32(%rbp)	# tmp60, args.match
	.loc 1 10248 0
	movq	-56(%rbp), %rax	# replacement, tmp61
	movq	%rax, -24(%rbp)	# tmp61, args.replacement
	.loc 1 10250 0
	leaq	-32(%rbp), %rdx	#, tmp62
	leaq	-40(%rbp), %rax	#, tmp63
	movl	$replace_loop_reg, %esi	#,
	movq	%rax, %rdi	# tmp63,
	call	for_each_rtx	#
	.loc 1 10251 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE103:
	.size	replace_loop_regs, .-replace_loop_regs
	.type	replace_label, @function
replace_label:
.LFB104:
	.loc 1 10261 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# data, data
	.loc 1 10262 0
	movq	-40(%rbp), %rax	# x, tmp67
	movq	(%rax), %rax	# *x_2(D), tmp68
	movq	%rax, -24(%rbp)	# tmp68, l
	.loc 1 10263 0
	movq	-48(%rbp), %rax	# data, tmp69
	movq	(%rax), %rax	# MEM[(struct rtx_pair *)data_4(D)].r1, tmp70
	movq	%rax, -16(%rbp)	# tmp70, old_label
	.loc 1 10264 0
	movq	-48(%rbp), %rax	# data, tmp71
	movq	8(%rax), %rax	# MEM[(struct rtx_pair *)data_4(D)].r2, tmp72
	movq	%rax, -8(%rbp)	# tmp72, new_label
	.loc 1 10266 0
	cmpq	$0, -24(%rbp)	#, l
	jne	.L2082	#,
	.loc 1 10267 0
	movl	$0, %eax	#, D.25003
	jmp	.L2083	#
.L2082:
	.loc 1 10269 0
	movq	-24(%rbp), %rax	# l, tmp73
	movzwl	(%rax), %eax	# l_3->code, D.25004
	cmpw	$67, %ax	#, D.25004
	je	.L2084	#,
	.loc 1 10270 0
	movl	$0, %eax	#, D.25003
	jmp	.L2083	#
.L2084:
	.loc 1 10272 0
	movq	-24(%rbp), %rax	# l, tmp74
	movq	8(%rax), %rax	# l_3->fld[0].rtx, D.25005
	cmpq	-16(%rbp), %rax	# old_label, D.25005
	je	.L2085	#,
	.loc 1 10273 0
	movl	$0, %eax	#, D.25003
	jmp	.L2083	#
.L2085:
	.loc 1 10275 0
	movq	-24(%rbp), %rax	# l, tmp75
	movq	-8(%rbp), %rdx	# new_label, tmp76
	movq	%rdx, 8(%rax)	# tmp76, l_3->fld[0].rtx
	.loc 1 10276 0
	movq	-8(%rbp), %rax	# new_label, tmp77
	movl	32(%rax), %eax	# new_label_6->fld[3].rtint, D.25003
	leal	1(%rax), %edx	#, D.25003
	movq	-8(%rbp), %rax	# new_label, tmp78
	movl	%edx, 32(%rax)	# D.25003, new_label_6->fld[3].rtint
	.loc 1 10277 0
	movq	-16(%rbp), %rax	# old_label, tmp79
	movl	32(%rax), %eax	# old_label_5->fld[3].rtint, D.25003
	leal	-1(%rax), %edx	#, D.25003
	movq	-16(%rbp), %rax	# old_label, tmp80
	movl	%edx, 32(%rax)	# D.25003, old_label_5->fld[3].rtint
	.loc 1 10279 0
	movl	$0, %eax	#, D.25003
.L2083:
	.loc 1 10280 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE104:
	.size	replace_label, .-replace_label
	.type	loop_insn_emit_after, @function
loop_insn_emit_after:
.LFB105:
	.loc 1 10291 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	movq	%rsi, -16(%rbp)	# where_bb, where_bb
	movq	%rdx, -24(%rbp)	# where_insn, where_insn
	movq	%rcx, -32(%rbp)	# pattern, pattern
	.loc 1 10292 0
	movq	-24(%rbp), %rdx	# where_insn, tmp61
	movq	-32(%rbp), %rax	# pattern, tmp62
	movq	%rdx, %rsi	# tmp61,
	movq	%rax, %rdi	# tmp62,
	call	emit_insn_after	#
	.loc 1 10293 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE105:
	.size	loop_insn_emit_after, .-loop_insn_emit_after
	.globl	loop_insn_emit_before
	.type	loop_insn_emit_before, @function
loop_insn_emit_before:
.LFB106:
	.loc 1 10306 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	movq	%rsi, -16(%rbp)	# where_bb, where_bb
	movq	%rdx, -24(%rbp)	# where_insn, where_insn
	movq	%rcx, -32(%rbp)	# pattern, pattern
	.loc 1 10307 0
	cmpq	$0, -24(%rbp)	#, where_insn
	jne	.L2089	#,
	.loc 1 10308 0
	movq	-32(%rbp), %rdx	# pattern, tmp61
	movq	-8(%rbp), %rax	# loop, tmp62
	movq	%rdx, %rsi	# tmp61,
	movq	%rax, %rdi	# tmp62,
	call	loop_insn_hoist	#
	jmp	.L2090	#
.L2089:
	.loc 1 10309 0
	movq	-24(%rbp), %rdx	# where_insn, tmp63
	movq	-32(%rbp), %rax	# pattern, tmp64
	movq	%rdx, %rsi	# tmp63,
	movq	%rax, %rdi	# tmp64,
	call	emit_insn_before	#
.L2090:
	.loc 1 10310 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE106:
	.size	loop_insn_emit_before, .-loop_insn_emit_before
	.type	loop_call_insn_emit_before, @function
loop_call_insn_emit_before:
.LFB107:
	.loc 1 10322 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	movq	%rsi, -16(%rbp)	# where_bb, where_bb
	movq	%rdx, -24(%rbp)	# where_insn, where_insn
	movq	%rcx, -32(%rbp)	# pattern, pattern
	.loc 1 10323 0
	movq	-24(%rbp), %rdx	# where_insn, tmp61
	movq	-32(%rbp), %rax	# pattern, tmp62
	movq	%rdx, %rsi	# tmp61,
	movq	%rax, %rdi	# tmp62,
	call	emit_call_insn_before	#
	.loc 1 10324 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE107:
	.size	loop_call_insn_emit_before, .-loop_call_insn_emit_before
	.globl	loop_insn_hoist
	.type	loop_insn_hoist, @function
loop_insn_hoist:
.LFB108:
	.loc 1 10333 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	movq	%rsi, -16(%rbp)	# pattern, pattern
	.loc 1 10334 0
	movq	-8(%rbp), %rax	# loop, tmp62
	movq	192(%rax), %rdx	# loop_1(D)->start, D.25009
	movq	-16(%rbp), %rcx	# pattern, tmp63
	movq	-8(%rbp), %rax	# loop, tmp64
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp64,
	call	loop_insn_emit_before	#
	.loc 1 10335 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE108:
	.size	loop_insn_hoist, .-loop_insn_hoist
	.type	loop_call_insn_hoist, @function
loop_call_insn_hoist:
.LFB109:
	.loc 1 10344 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	movq	%rsi, -16(%rbp)	# pattern, pattern
	.loc 1 10345 0
	movq	-8(%rbp), %rax	# loop, tmp62
	movq	192(%rax), %rdx	# loop_1(D)->start, D.25011
	movq	-16(%rbp), %rcx	# pattern, tmp63
	movq	-8(%rbp), %rax	# loop, tmp64
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp64,
	call	loop_call_insn_emit_before	#
	.loc 1 10346 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE109:
	.size	loop_call_insn_hoist, .-loop_call_insn_hoist
	.globl	loop_insn_sink
	.type	loop_insn_sink, @function
loop_insn_sink:
.LFB110:
	.loc 1 10355 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	movq	%rsi, -16(%rbp)	# pattern, pattern
	.loc 1 10356 0
	movq	-8(%rbp), %rax	# loop, tmp62
	movq	224(%rax), %rdx	# loop_1(D)->sink, D.25013
	movq	-16(%rbp), %rcx	# pattern, tmp63
	movq	-8(%rbp), %rax	# loop, tmp64
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp64,
	call	loop_insn_emit_before	#
	.loc 1 10357 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE110:
	.size	loop_insn_sink, .-loop_insn_sink
	.type	loop_insn_sink_or_swim, @function
loop_insn_sink_or_swim:
.LFB111:
	.loc 1 10369 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	movq	%rsi, -16(%rbp)	# pattern, pattern
	.loc 1 10370 0
	movq	-8(%rbp), %rax	# loop, tmp62
	movl	240(%rax), %eax	# loop_2(D)->exit_count, D.25016
	testl	%eax, %eax	# D.25016
	je	.L2100	#,
	.loc 1 10371 0
	movq	-16(%rbp), %rdx	# pattern, tmp63
	movq	-8(%rbp), %rax	# loop, tmp64
	movq	%rdx, %rsi	# tmp63,
	movq	%rax, %rdi	# tmp64,
	call	loop_insn_hoist	#
	jmp	.L2101	#
.L2100:
	.loc 1 10373 0
	movq	-16(%rbp), %rdx	# pattern, tmp65
	movq	-8(%rbp), %rax	# loop, tmp66
	movq	%rdx, %rsi	# tmp65,
	movq	%rax, %rdi	# tmp66,
	call	loop_insn_sink	#
.L2101:
	.loc 1 10374 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE111:
	.size	loop_insn_sink_or_swim, .-loop_insn_sink_or_swim
	.section	.rodata
.LC74:
	.string	"Loop %d: %d IV classes\n"
	.text
	.type	loop_ivs_dump, @function
loop_ivs_dump:
.LFB112:
	.loc 1 10381 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# loop, loop
	movq	%rsi, -32(%rbp)	# file, file
	movl	%edx, -36(%rbp)	# verbose, verbose
	.loc 1 10383 0
	movl	$0, -12(%rbp)	#, iv_num
	.loc 1 10385 0
	cmpq	$0, -24(%rbp)	#, loop
	je	.L2103	#,
	.loc 1 10385 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, file
	jne	.L2104	#,
.L2103:
	.loc 1 10386 0 is_stmt 1
	jmp	.L2102	#
.L2104:
	.loc 1 10388 0
	movq	-24(%rbp), %rax	# loop, tmp62
	movq	160(%rax), %rax	# loop_5(D)->aux, D.25017
	movq	224(%rax), %rax	# MEM[(struct loop_info *)_7].ivs.list, tmp63
	movq	%rax, -8(%rbp)	# tmp63, bl
	jmp	.L2106	#
.L2107:
	.loc 1 10389 0 discriminator 2
	addl	$1, -12(%rbp)	#, iv_num
	.loc 1 10388 0 discriminator 2
	movq	-8(%rbp), %rax	# bl, tmp64
	movq	64(%rax), %rax	# bl_1->next, tmp65
	movq	%rax, -8(%rbp)	# tmp65, bl
.L2106:
	.loc 1 10388 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, bl
	jne	.L2107	#,
	.loc 1 10391 0 is_stmt 1
	movq	-24(%rbp), %rax	# loop, tmp66
	movl	(%rax), %edx	# loop_5(D)->num, D.25018
	movl	-12(%rbp), %ecx	# iv_num, tmp67
	movq	-32(%rbp), %rax	# file, tmp68
	movl	$.LC74, %esi	#,
	movq	%rax, %rdi	# tmp68,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10393 0
	movq	-24(%rbp), %rax	# loop, tmp69
	movq	160(%rax), %rax	# loop_5(D)->aux, D.25017
	movq	224(%rax), %rax	# MEM[(struct loop_info *)_12].ivs.list, tmp70
	movq	%rax, -8(%rbp)	# tmp70, bl
	jmp	.L2108	#
.L2109:
	.loc 1 10395 0 discriminator 2
	movl	-36(%rbp), %edx	# verbose, tmp71
	movq	-32(%rbp), %rcx	# file, tmp72
	movq	-8(%rbp), %rax	# bl, tmp73
	movq	%rcx, %rsi	# tmp72,
	movq	%rax, %rdi	# tmp73,
	call	loop_iv_class_dump	#
	.loc 1 10396 0 discriminator 2
	movq	-32(%rbp), %rax	# file, tmp74
	movq	%rax, %rsi	# tmp74,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 10393 0 discriminator 2
	movq	-8(%rbp), %rax	# bl, tmp75
	movq	64(%rax), %rax	# bl_2->next, tmp76
	movq	%rax, -8(%rbp)	# tmp76, bl
.L2108:
	.loc 1 10393 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, bl
	jne	.L2109	#,
.L2102:
	.loc 1 10398 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE112:
	.size	loop_ivs_dump, .-loop_ivs_dump
	.section	.rodata
	.align 8
.LC75:
	.string	"IV class for reg %d, benefit %d\n"
.LC76:
	.string	" Init insn %d"
.LC77:
	.string	", init val: "
.LC78:
	.string	", init test: "
.LC79:
	.string	" Final val: "
.LC80:
	.string	" Total increment: "
.LC81:
	.string	" Inc%d: insn %d, incr: "
.LC82:
	.string	" Giv%d: insn %d, benefit %d, "
	.text
	.type	loop_iv_class_dump, @function
loop_iv_class_dump:
.LFB113:
	.loc 1 10406 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# bl, bl
	movq	%rsi, -48(%rbp)	# file, file
	movl	%edx, -52(%rbp)	# verbose, verbose
	.loc 1 10411 0
	cmpq	$0, -40(%rbp)	#, bl
	je	.L2111	#,
	.loc 1 10411 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, file
	jne	.L2112	#,
.L2111:
	.loc 1 10412 0 is_stmt 1
	jmp	.L2110	#
.L2112:
	.loc 1 10414 0
	movq	-40(%rbp), %rax	# bl, tmp90
	movl	32(%rax), %ecx	# bl_7(D)->total_benefit, D.25020
	movq	-40(%rbp), %rax	# bl, tmp91
	movl	(%rax), %edx	# bl_7(D)->regno, D.25021
	movq	-48(%rbp), %rax	# file, tmp92
	movl	$.LC75, %esi	#,
	movq	%rax, %rdi	# tmp92,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10417 0
	movq	-40(%rbp), %rax	# bl, tmp93
	movq	72(%rax), %rax	# bl_7(D)->init_insn, D.25022
	movl	8(%rax), %edx	# _11->fld[0].rtint, D.25020
	movq	-48(%rbp), %rax	# file, tmp94
	movl	$.LC76, %esi	#,
	movq	%rax, %rdi	# tmp94,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10418 0
	movq	-40(%rbp), %rax	# bl, tmp95
	movq	40(%rax), %rax	# bl_7(D)->initial_value, D.25022
	testq	%rax, %rax	# D.25022
	je	.L2114	#,
	.loc 1 10420 0
	movq	-48(%rbp), %rax	# file, tmp96
	movq	%rax, %rcx	# tmp96,
	movl	$12, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC77, %edi	#,
	call	fwrite	#
	.loc 1 10421 0
	movq	-40(%rbp), %rax	# bl, tmp97
	movq	40(%rax), %rdx	# bl_7(D)->initial_value, D.25022
	movq	-48(%rbp), %rax	# file, tmp98
	movq	%rdx, %rsi	# D.25022,
	movq	%rax, %rdi	# tmp98,
	call	print_simple_rtl	#
.L2114:
	.loc 1 10423 0
	movq	-40(%rbp), %rax	# bl, tmp99
	movq	48(%rax), %rax	# bl_7(D)->initial_test, D.25022
	testq	%rax, %rax	# D.25022
	je	.L2115	#,
	.loc 1 10425 0
	movq	-48(%rbp), %rax	# file, tmp100
	movq	%rax, %rcx	# tmp100,
	movl	$13, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC78, %edi	#,
	call	fwrite	#
	.loc 1 10426 0
	movq	-40(%rbp), %rax	# bl, tmp101
	movq	48(%rax), %rdx	# bl_7(D)->initial_test, D.25022
	movq	-48(%rbp), %rax	# file, tmp102
	movq	%rdx, %rsi	# D.25022,
	movq	%rax, %rdi	# tmp102,
	call	print_simple_rtl	#
.L2115:
	.loc 1 10428 0
	movq	-48(%rbp), %rax	# file, tmp103
	movq	%rax, %rsi	# tmp103,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 10430 0
	movq	-40(%rbp), %rax	# bl, tmp104
	movq	56(%rax), %rax	# bl_7(D)->final_value, D.25022
	testq	%rax, %rax	# D.25022
	je	.L2116	#,
	.loc 1 10432 0
	movq	-48(%rbp), %rax	# file, tmp105
	movq	%rax, %rcx	# tmp105,
	movl	$12, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC79, %edi	#,
	call	fwrite	#
	.loc 1 10433 0
	movq	-40(%rbp), %rax	# bl, tmp106
	movq	56(%rax), %rdx	# bl_7(D)->final_value, D.25022
	movq	-48(%rbp), %rax	# file, tmp107
	movq	%rdx, %rsi	# D.25022,
	movq	%rax, %rdi	# tmp107,
	call	print_simple_rtl	#
	.loc 1 10434 0
	movq	-48(%rbp), %rax	# file, tmp108
	movq	%rax, %rsi	# tmp108,
	movl	$10, %edi	#,
	call	fputc	#
.L2116:
	.loc 1 10437 0
	movq	-40(%rbp), %rax	# bl, tmp109
	movq	%rax, %rdi	# tmp109,
	call	biv_total_increment	#
	movq	%rax, -8(%rbp)	# tmp110, incr
	cmpq	$0, -8(%rbp)	#, incr
	je	.L2117	#,
	.loc 1 10439 0
	movq	-48(%rbp), %rax	# file, tmp111
	movq	%rax, %rcx	# tmp111,
	movl	$18, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC80, %edi	#,
	call	fwrite	#
	.loc 1 10440 0
	movq	-8(%rbp), %rdx	# incr, tmp112
	movq	-48(%rbp), %rax	# file, tmp113
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# tmp113,
	call	print_simple_rtl	#
	.loc 1 10441 0
	movq	-48(%rbp), %rax	# file, tmp114
	movq	%rax, %rsi	# tmp114,
	movl	$10, %edi	#,
	call	fputc	#
.L2117:
	.loc 1 10445 0
	movl	$0, -20(%rbp)	#, i
	movq	-40(%rbp), %rax	# bl, tmp115
	movq	8(%rax), %rax	# bl_7(D)->biv, tmp116
	movq	%rax, -16(%rbp)	# tmp116, v
	jmp	.L2118	#
.L2119:
	.loc 1 10447 0 discriminator 2
	movq	-16(%rbp), %rax	# v, tmp117
	movq	(%rax), %rax	# v_1->insn, D.25022
	movl	8(%rax), %ecx	# _22->fld[0].rtint, D.25020
	movl	-20(%rbp), %edx	# i, tmp118
	movq	-48(%rbp), %rax	# file, tmp119
	movl	$.LC81, %esi	#,
	movq	%rax, %rdi	# tmp119,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10448 0 discriminator 2
	movq	-16(%rbp), %rax	# v, tmp120
	movq	72(%rax), %rdx	# v_1->add_val, D.25022
	movq	-48(%rbp), %rax	# file, tmp121
	movq	%rdx, %rsi	# D.25022,
	movq	%rax, %rdi	# tmp121,
	call	print_simple_rtl	#
	.loc 1 10449 0 discriminator 2
	movq	-48(%rbp), %rax	# file, tmp122
	movq	%rax, %rsi	# tmp122,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 10445 0 discriminator 2
	movq	-16(%rbp), %rax	# v, tmp123
	movq	128(%rax), %rax	# v_1->next_iv, tmp124
	movq	%rax, -16(%rbp)	# tmp124, v
	addl	$1, -20(%rbp)	#, i
.L2118:
	.loc 1 10445 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, v
	jne	.L2119	#,
	.loc 1 10453 0 is_stmt 1
	movl	$0, -20(%rbp)	#, i
	movq	-40(%rbp), %rax	# bl, tmp125
	movq	24(%rax), %rax	# bl_7(D)->giv, tmp126
	movq	%rax, -16(%rbp)	# tmp126, v
	jmp	.L2120	#
.L2127:
	.loc 1 10455 0
	movq	-16(%rbp), %rax	# v, tmp127
	movl	80(%rax), %esi	# v_2->benefit, D.25020
	.loc 1 10456 0
	movq	-16(%rbp), %rax	# v, tmp128
	movq	(%rax), %rax	# v_2->insn, D.25022
	.loc 1 10455 0
	movl	8(%rax), %ecx	# _30->fld[0].rtint, D.25020
	movl	-20(%rbp), %edx	# i, tmp129
	movq	-48(%rbp), %rax	# file, tmp130
	movl	%esi, %r8d	# D.25020,
	movl	$.LC82, %esi	#,
	movq	%rax, %rdi	# tmp130,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10457 0
	movq	-16(%rbp), %rax	# v, tmp131
	movl	24(%rax), %eax	# v_2->giv_type, D.25023
	testl	%eax, %eax	# D.25023
	jne	.L2121	#,
	.loc 1 10458 0
	movq	-16(%rbp), %rax	# v, tmp132
	movq	56(%rax), %rdx	# v_2->mem, D.25022
	movq	-48(%rbp), %rax	# file, tmp133
	movq	%rdx, %rsi	# D.25022,
	movq	%rax, %rdi	# tmp133,
	call	print_simple_rtl	#
	jmp	.L2122	#
.L2121:
	.loc 1 10460 0
	movq	-16(%rbp), %rax	# v, tmp134
	movq	(%rax), %rax	# v_2->insn, D.25022
	movzwl	(%rax), %eax	# _34->code, D.25024
	movzwl	%ax, %eax	# D.25024, D.25020
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.25025
	cmpb	$105, %al	#, D.25025
	jne	.L2123	#,
	.loc 1 10460 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v, tmp136
	movq	(%rax), %rax	# v_2->insn, D.25022
	movq	32(%rax), %rax	# _38->fld[3].rtx, D.25022
	movzwl	(%rax), %eax	# _39->code, D.25024
	cmpw	$47, %ax	#, D.25024
	jne	.L2124	#,
	.loc 1 10460 0 discriminator 3
	movq	-16(%rbp), %rax	# v, tmp137
	movq	(%rax), %rax	# v_2->insn, D.25022
	movq	32(%rax), %rax	# _41->fld[3].rtx, iftmp.751
	jmp	.L2126	#
.L2124:
	.loc 1 10460 0 discriminator 4
	movq	-16(%rbp), %rax	# v, tmp138
	movq	(%rax), %rax	# v_2->insn, D.25022
	movq	32(%rax), %rdx	# _43->fld[3].rtx, D.25022
	movq	-16(%rbp), %rax	# v, tmp139
	movq	(%rax), %rax	# v_2->insn, D.25022
	movq	%rdx, %rsi	# D.25022,
	movq	%rax, %rdi	# D.25022,
	call	single_set_2	#
	jmp	.L2126	#
.L2123:
	.loc 1 10460 0 discriminator 2
	movl	$0, %eax	#, iftmp.750
.L2126:
	.loc 1 10460 0 discriminator 5
	movq	-48(%rbp), %rdx	# file, tmp140
	movq	%rax, %rsi	# iftmp.750,
	movq	%rdx, %rdi	# tmp140,
	call	print_simple_rtl	#
.L2122:
	.loc 1 10461 0 is_stmt 1
	movq	-48(%rbp), %rax	# file, tmp141
	movq	%rax, %rsi	# tmp141,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 10453 0
	movq	-16(%rbp), %rax	# v, tmp142
	movq	128(%rax), %rax	# v_2->next_iv, tmp143
	movq	%rax, -16(%rbp)	# tmp143, v
	addl	$1, -20(%rbp)	#, i
.L2120:
	.loc 1 10453 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, v
	jne	.L2127	#,
.L2110:
	.loc 1 10463 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE113:
	.size	loop_iv_class_dump, .-loop_iv_class_dump
	.section	.rodata
.LC83:
	.string	"Biv %d: insn %d"
.LC84:
	.string	" const "
.LC85:
	.string	" final "
	.text
	.type	loop_biv_dump, @function
loop_biv_dump:
.LFB114:
	.loc 1 10471 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# v, v
	movq	%rsi, -16(%rbp)	# file, file
	movl	%edx, -20(%rbp)	# verbose, verbose
	.loc 1 10472 0
	cmpq	$0, -8(%rbp)	#, v
	je	.L2129	#,
	.loc 1 10472 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, file
	jne	.L2130	#,
.L2129:
	.loc 1 10473 0 is_stmt 1
	jmp	.L2128	#
.L2130:
	.loc 1 10477 0
	movq	-8(%rbp), %rax	# v, tmp66
	movq	(%rax), %rax	# v_1(D)->insn, D.25034
	.loc 1 10475 0
	movl	8(%rax), %ecx	# _3->fld[0].rtint, D.25035
	.loc 1 10477 0
	movq	-8(%rbp), %rax	# v, tmp67
	movq	32(%rax), %rax	# v_1(D)->dest_reg, D.25034
	.loc 1 10475 0
	movl	8(%rax), %edx	# _5->fld[0].rtuint, D.25036
	movq	-16(%rbp), %rax	# file, tmp68
	movl	$.LC83, %esi	#,
	movq	%rax, %rdi	# tmp68,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10478 0
	movq	-16(%rbp), %rax	# file, tmp69
	movq	%rax, %rcx	# tmp69,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC84, %edi	#,
	call	fwrite	#
	.loc 1 10479 0
	movq	-8(%rbp), %rax	# v, tmp70
	movq	72(%rax), %rdx	# v_1(D)->add_val, D.25034
	movq	-16(%rbp), %rax	# file, tmp71
	movq	%rdx, %rsi	# D.25034,
	movq	%rax, %rdi	# tmp71,
	call	print_simple_rtl	#
	.loc 1 10481 0
	cmpl	$0, -20(%rbp)	#, verbose
	je	.L2132	#,
	.loc 1 10481 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# v, tmp72
	movq	88(%rax), %rax	# v_1(D)->final_value, D.25034
	testq	%rax, %rax	# D.25034
	je	.L2132	#,
	.loc 1 10483 0 is_stmt 1
	movq	-16(%rbp), %rax	# file, tmp73
	movq	%rax, %rsi	# tmp73,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 10484 0
	movq	-16(%rbp), %rax	# file, tmp74
	movq	%rax, %rcx	# tmp74,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC85, %edi	#,
	call	fwrite	#
	.loc 1 10485 0
	movq	-8(%rbp), %rax	# v, tmp75
	movq	88(%rax), %rdx	# v_1(D)->final_value, D.25034
	movq	-16(%rbp), %rax	# file, tmp76
	movq	%rdx, %rsi	# D.25034,
	movq	%rax, %rdi	# tmp76,
	call	print_simple_rtl	#
.L2132:
	.loc 1 10488 0
	movq	-16(%rbp), %rax	# file, tmp77
	movq	%rax, %rsi	# tmp77,
	movl	$10, %edi	#,
	call	fputc	#
.L2128:
	.loc 1 10489 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE114:
	.size	loop_biv_dump, .-loop_biv_dump
	.section	.rodata
.LC86:
	.string	"Giv %d: insn %d"
.LC87:
	.string	"Dest address: insn %d"
.LC88:
	.string	" src reg %d benefit %d"
.LC89:
	.string	" lifetime %d"
.LC90:
	.string	" replaceable"
.LC91:
	.string	" ncav"
.LC92:
	.string	" ext se"
.LC93:
	.string	" ext ze"
.LC94:
	.string	" ext tr"
.LC95:
	.string	" mult "
.LC96:
	.string	" add  "
	.text
	.type	loop_giv_dump, @function
loop_giv_dump:
.LFB115:
	.loc 1 10497 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# v, v
	movq	%rsi, -16(%rbp)	# file, file
	movl	%edx, -20(%rbp)	# verbose, verbose
	.loc 1 10498 0
	cmpq	$0, -8(%rbp)	#, v
	je	.L2134	#,
	.loc 1 10498 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, file
	jne	.L2135	#,
.L2134:
	.loc 1 10499 0 is_stmt 1
	jmp	.L2133	#
.L2135:
	.loc 1 10501 0
	movq	-8(%rbp), %rax	# v, tmp82
	movl	24(%rax), %eax	# v_1(D)->giv_type, D.25040
	cmpl	$1, %eax	#, D.25040
	jne	.L2137	#,
	.loc 1 10503 0
	movq	-8(%rbp), %rax	# v, tmp83
	movq	(%rax), %rax	# v_1(D)->insn, D.25041
	.loc 1 10502 0
	movl	8(%rax), %ecx	# _4->fld[0].rtint, D.25042
	.loc 1 10503 0
	movq	-8(%rbp), %rax	# v, tmp84
	movq	32(%rax), %rax	# v_1(D)->dest_reg, D.25041
	.loc 1 10502 0
	movl	8(%rax), %edx	# _6->fld[0].rtuint, D.25043
	movq	-16(%rbp), %rax	# file, tmp85
	movl	$.LC86, %esi	#,
	movq	%rax, %rdi	# tmp85,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L2138	#
.L2137:
	.loc 1 10506 0
	movq	-8(%rbp), %rax	# v, tmp86
	movq	(%rax), %rax	# v_1(D)->insn, D.25041
	.loc 1 10505 0
	movl	8(%rax), %edx	# _8->fld[0].rtint, D.25042
	movq	-16(%rbp), %rax	# file, tmp87
	movl	$.LC87, %esi	#,
	movq	%rax, %rdi	# tmp87,
	movl	$0, %eax	#,
	call	fprintf	#
.L2138:
	.loc 1 10508 0
	movq	-8(%rbp), %rax	# v, tmp88
	movl	80(%rax), %ecx	# v_1(D)->benefit, D.25042
	.loc 1 10509 0
	movq	-8(%rbp), %rax	# v, tmp89
	movq	16(%rax), %rax	# v_1(D)->src_reg, D.25041
	.loc 1 10508 0
	movl	8(%rax), %edx	# _11->fld[0].rtuint, D.25043
	movq	-16(%rbp), %rax	# file, tmp90
	movl	$.LC88, %esi	#,
	movq	%rax, %rdi	# tmp90,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10510 0
	movq	-8(%rbp), %rax	# v, tmp91
	movl	104(%rax), %edx	# v_1(D)->lifetime, D.25042
	movq	-16(%rbp), %rax	# file, tmp92
	movl	$.LC89, %esi	#,
	movq	%rax, %rdi	# tmp92,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10513 0
	movq	-8(%rbp), %rax	# v, tmp93
	movzbl	100(%rax), %eax	# *v_1(D), D.25044
	andl	$1, %eax	#, D.25044
	testb	%al, %al	# D.25044
	je	.L2139	#,
	.loc 1 10514 0
	movq	-16(%rbp), %rax	# file, tmp94
	movq	%rax, %rcx	# tmp94,
	movl	$12, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC90, %edi	#,
	call	fwrite	#
.L2139:
	.loc 1 10516 0
	movq	-8(%rbp), %rax	# v, tmp95
	movzbl	101(%rax), %eax	# *v_1(D), D.25044
	andl	$8, %eax	#, D.25044
	testb	%al, %al	# D.25044
	je	.L2140	#,
	.loc 1 10517 0
	movq	-16(%rbp), %rax	# file, tmp96
	movq	%rax, %rcx	# tmp96,
	movl	$5, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC91, %edi	#,
	call	fwrite	#
.L2140:
	.loc 1 10519 0
	movq	-8(%rbp), %rax	# v, tmp97
	movq	120(%rax), %rax	# v_1(D)->ext_dependent, D.25041
	testq	%rax, %rax	# D.25041
	je	.L2141	#,
	.loc 1 10521 0
	movq	-8(%rbp), %rax	# v, tmp98
	movq	120(%rax), %rax	# v_1(D)->ext_dependent, D.25041
	movzwl	(%rax), %eax	# _19->code, D.25045
	movzwl	%ax, %eax	# D.25045, D.25043
	cmpl	$121, %eax	#, D.25043
	je	.L2143	#,
	cmpl	$122, %eax	#, D.25043
	je	.L2144	#,
	cmpl	$120, %eax	#, D.25043
	jne	.L2147	#,
	.loc 1 10524 0
	movq	-16(%rbp), %rax	# file, tmp99
	movq	%rax, %rcx	# tmp99,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC92, %edi	#,
	call	fwrite	#
	.loc 1 10525 0
	jmp	.L2141	#
.L2143:
	.loc 1 10527 0
	movq	-16(%rbp), %rax	# file, tmp100
	movq	%rax, %rcx	# tmp100,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC93, %edi	#,
	call	fwrite	#
	.loc 1 10528 0
	jmp	.L2141	#
.L2144:
	.loc 1 10530 0
	movq	-16(%rbp), %rax	# file, tmp101
	movq	%rax, %rcx	# tmp101,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC94, %edi	#,
	call	fwrite	#
	.loc 1 10531 0
	jmp	.L2141	#
.L2147:
	.loc 1 10533 0
	movl	$__FUNCTION__.14609, %edx	#,
	movl	$10533, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L2141:
	.loc 1 10537 0
	movq	-16(%rbp), %rax	# file, tmp102
	movq	%rax, %rsi	# tmp102,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 10538 0
	movq	-16(%rbp), %rax	# file, tmp103
	movq	%rax, %rcx	# tmp103,
	movl	$6, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC95, %edi	#,
	call	fwrite	#
	.loc 1 10539 0
	movq	-8(%rbp), %rax	# v, tmp104
	movq	64(%rax), %rdx	# v_1(D)->mult_val, D.25041
	movq	-16(%rbp), %rax	# file, tmp105
	movq	%rdx, %rsi	# D.25041,
	movq	%rax, %rdi	# tmp105,
	call	print_simple_rtl	#
	.loc 1 10541 0
	movq	-16(%rbp), %rax	# file, tmp106
	movq	%rax, %rsi	# tmp106,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 10542 0
	movq	-16(%rbp), %rax	# file, tmp107
	movq	%rax, %rcx	# tmp107,
	movl	$6, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC96, %edi	#,
	call	fwrite	#
	.loc 1 10543 0
	movq	-8(%rbp), %rax	# v, tmp108
	movq	72(%rax), %rdx	# v_1(D)->add_val, D.25041
	movq	-16(%rbp), %rax	# file, tmp109
	movq	%rdx, %rsi	# D.25041,
	movq	%rax, %rdi	# tmp109,
	call	print_simple_rtl	#
	.loc 1 10545 0
	cmpl	$0, -20(%rbp)	#, verbose
	je	.L2146	#,
	.loc 1 10545 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# v, tmp110
	movq	88(%rax), %rax	# v_1(D)->final_value, D.25041
	testq	%rax, %rax	# D.25041
	je	.L2146	#,
	.loc 1 10547 0 is_stmt 1
	movq	-16(%rbp), %rax	# file, tmp111
	movq	%rax, %rsi	# tmp111,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 10548 0
	movq	-16(%rbp), %rax	# file, tmp112
	movq	%rax, %rcx	# tmp112,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC85, %edi	#,
	call	fwrite	#
	.loc 1 10549 0
	movq	-8(%rbp), %rax	# v, tmp113
	movq	88(%rax), %rdx	# v_1(D)->final_value, D.25041
	movq	-16(%rbp), %rax	# file, tmp114
	movq	%rdx, %rsi	# D.25041,
	movq	%rax, %rdi	# tmp114,
	call	print_simple_rtl	#
.L2146:
	.loc 1 10552 0
	movq	-16(%rbp), %rax	# file, tmp115
	movq	%rax, %rsi	# tmp115,
	movl	$10, %edi	#,
	call	fputc	#
.L2133:
	.loc 1 10553 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE115:
	.size	loop_giv_dump, .-loop_giv_dump
	.globl	debug_ivs
	.type	debug_ivs, @function
debug_ivs:
.LFB116:
	.loc 1 10559 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	.loc 1 10560 0
	movq	stderr(%rip), %rcx	# stderr, stderr.752
	movq	-8(%rbp), %rax	# loop, tmp60
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# stderr.752,
	movq	%rax, %rdi	# tmp60,
	call	loop_ivs_dump	#
	.loc 1 10561 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE116:
	.size	debug_ivs, .-debug_ivs
	.globl	debug_iv_class
	.type	debug_iv_class, @function
debug_iv_class:
.LFB117:
	.loc 1 10567 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# bl, bl
	.loc 1 10568 0
	movq	stderr(%rip), %rcx	# stderr, stderr.753
	movq	-8(%rbp), %rax	# bl, tmp60
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# stderr.753,
	movq	%rax, %rdi	# tmp60,
	call	loop_iv_class_dump	#
	.loc 1 10569 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE117:
	.size	debug_iv_class, .-debug_iv_class
	.globl	debug_biv
	.type	debug_biv, @function
debug_biv:
.LFB118:
	.loc 1 10575 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# v, v
	.loc 1 10576 0
	movq	stderr(%rip), %rcx	# stderr, stderr.754
	movq	-8(%rbp), %rax	# v, tmp60
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# stderr.754,
	movq	%rax, %rdi	# tmp60,
	call	loop_biv_dump	#
	.loc 1 10577 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE118:
	.size	debug_biv, .-debug_biv
	.globl	debug_giv
	.type	debug_giv, @function
debug_giv:
.LFB119:
	.loc 1 10583 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# v, v
	.loc 1 10584 0
	movq	stderr(%rip), %rcx	# stderr, stderr.755
	movq	-8(%rbp), %rax	# v, tmp60
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# stderr.755,
	movq	%rax, %rdi	# tmp60,
	call	loop_giv_dump	#
	.loc 1 10585 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE119:
	.size	debug_giv, .-debug_giv
	.section	.rodata
	.align 8
.LC97:
	.string	";;  No NOTE_INSN_LOOP_BEG at %d\n"
	.align 8
.LC98:
	.string	";;  No NOTE_INSN_LOOP_END at %d\n"
	.align 8
.LC99:
	.string	";;  start %d (%d), cont dom %d (%d), cont %d (%d), vtop %d (%d), end %d (%d)\n"
	.align 8
.LC100:
	.string	";;  top %d (%d), scan start %d (%d)\n"
.LC101:
	.string	";;  exit_count %d"
.LC102:
	.string	", labels:"
.LC103:
	.string	" %d "
	.align 8
.LC104:
	.string	";;  NOTE_INSN_LOOP_CONT not in loop latch\n"
	.text
	.type	loop_dump_aux, @function
loop_dump_aux:
.LFB120:
	.loc 1 10605 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
	movq	%rdi, -72(%rbp)	# loop, loop
	movq	%rsi, -80(%rbp)	# file, file
	movl	%edx, -84(%rbp)	# verbose, verbose
	.loc 1 10608 0
	cmpq	$0, -72(%rbp)	#, loop
	je	.L2153	#,
	.loc 1 10608 0 is_stmt 0 discriminator 1
	cmpq	$0, -80(%rbp)	#, file
	jne	.L2154	#,
.L2153:
	.loc 1 10609 0 is_stmt 1
	jmp	.L2152	#
.L2154:
	.loc 1 10613 0
	movq	-72(%rbp), %rax	# loop, tmp358
	movq	48(%rax), %rax	# loop_58(D)->first, D.25057
	movq	(%rax), %rax	# _60->head, D.25058
	movq	16(%rax), %rax	# _61->fld[1].rtx, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2156	#,
	.loc 1 10614 0
	movq	-72(%rbp), %rax	# loop, tmp359
	movq	48(%rax), %rax	# loop_58(D)->first, D.25057
	movq	(%rax), %rax	# _63->head, D.25058
	movq	16(%rax), %rax	# _64->fld[1].rtx, D.25058
	movzwl	(%rax), %eax	# _65->code, D.25059
	cmpw	$37, %ax	#, D.25059
	jne	.L2156	#,
	.loc 1 10615 0
	movq	-72(%rbp), %rax	# loop, tmp360
	movq	48(%rax), %rax	# loop_58(D)->first, D.25057
	movq	(%rax), %rax	# _67->head, D.25058
	movq	16(%rax), %rax	# _68->fld[1].rtx, D.25058
	movl	40(%rax), %eax	# _69->fld[4].rtint, D.25060
	cmpl	$-96, %eax	#, D.25060
	je	.L2157	#,
.L2156:
	.loc 1 10618 0
	movq	-72(%rbp), %rax	# loop, tmp361
	movq	48(%rax), %rax	# loop_58(D)->first, D.25057
	movq	(%rax), %rax	# _71->head, D.25058
	movq	16(%rax), %rax	# _72->fld[1].rtx, D.25058
	.loc 1 10617 0
	movl	8(%rax), %edx	# _73->fld[0].rtint, D.25060
	movq	-80(%rbp), %rax	# file, tmp362
	movl	$.LC97, %esi	#,
	movq	%rax, %rdi	# tmp362,
	movl	$0, %eax	#,
	call	fprintf	#
.L2157:
	.loc 1 10619 0
	movq	-72(%rbp), %rax	# loop, tmp363
	movq	56(%rax), %rax	# loop_58(D)->last, D.25057
	movq	8(%rax), %rax	# _75->end, D.25058
	movq	24(%rax), %rax	# _76->fld[2].rtx, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2158	#,
	.loc 1 10620 0
	movq	-72(%rbp), %rax	# loop, tmp364
	movq	56(%rax), %rax	# loop_58(D)->last, D.25057
	movq	8(%rax), %rax	# _78->end, D.25058
	movq	24(%rax), %rax	# _79->fld[2].rtx, D.25058
	movzwl	(%rax), %eax	# _80->code, D.25059
	cmpw	$37, %ax	#, D.25059
	jne	.L2158	#,
	.loc 1 10621 0
	movq	-72(%rbp), %rax	# loop, tmp365
	movq	56(%rax), %rax	# loop_58(D)->last, D.25057
	movq	8(%rax), %rax	# _82->end, D.25058
	movq	24(%rax), %rax	# _83->fld[2].rtx, D.25058
	movl	40(%rax), %eax	# _84->fld[4].rtint, D.25060
	cmpl	$-95, %eax	#, D.25060
	je	.L2159	#,
.L2158:
	.loc 1 10624 0
	movq	-72(%rbp), %rax	# loop, tmp366
	movq	56(%rax), %rax	# loop_58(D)->last, D.25057
	movq	8(%rax), %rax	# _86->end, D.25058
	movq	24(%rax), %rax	# _87->fld[2].rtx, D.25058
	.loc 1 10623 0
	movl	8(%rax), %edx	# _88->fld[0].rtint, D.25060
	movq	-80(%rbp), %rax	# file, tmp367
	movl	$.LC98, %esi	#,
	movq	%rax, %rdi	# tmp367,
	movl	$0, %eax	#,
	call	fprintf	#
.L2159:
	.loc 1 10626 0
	movq	-72(%rbp), %rax	# loop, tmp368
	movq	192(%rax), %rax	# loop_58(D)->start, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2152	#,
	.loc 1 10639 0
	movq	-72(%rbp), %rax	# loop, tmp369
	movq	200(%rax), %rax	# loop_58(D)->end, D.25058
	.loc 1 10628 0
	testq	%rax, %rax	# D.25058
	je	.L2160	#,
	.loc 1 10639 0
	movq	-72(%rbp), %rax	# loop, tmp370
	movq	200(%rax), %rax	# loop_58(D)->end, D.25058
	.loc 1 10628 0
	movl	8(%rax), %eax	# _92->fld[0].rtint, iftmp.756
	movl	%eax, -88(%rbp)	# iftmp.756, %sfp
	jmp	.L2161	#
.L2160:
	.loc 1 10628 0 is_stmt 0 discriminator 1
	movl	$-1, -88(%rbp)	#, %sfp
.L2161:
	.loc 1 10638 0 is_stmt 1 discriminator 2
	movq	-72(%rbp), %rax	# loop, tmp371
	movq	200(%rax), %rax	# loop_58(D)->end, D.25058
	.loc 1 10628 0 discriminator 2
	testq	%rax, %rax	# D.25058
	je	.L2162	#,
	.loc 1 10638 0
	movq	-72(%rbp), %rax	# loop, tmp372
	movq	200(%rax), %rax	# loop_58(D)->end, D.25058
	movzwl	(%rax), %eax	# _96->code, D.25059
	cmpw	$37, %ax	#, D.25059
	jne	.L2163	#,
	.loc 1 10638 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loop, tmp373
	movq	200(%rax), %rax	# loop_58(D)->end, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	testq	%rax, %rax	# D.25058
	je	.L2164	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.761
	movq	-72(%rbp), %rax	# loop, tmp374
	movq	200(%rax), %rax	# loop_58(D)->end, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _102->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp376
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.761_100->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2165	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.762
	movq	-72(%rbp), %rax	# loop, tmp377
	movq	200(%rax), %rax	# loop_58(D)->end, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _107->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp379
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.762_105->data.bb, D.25057
	movl	88(%rax), %eax	# _109->index, iftmp.760
	jmp	.L2168	#
.L2165:
	.loc 1 10638 0 discriminator 2
	movl	$-1, %eax	#, iftmp.760
	jmp	.L2168	#
.L2164:
	movl	$-1, %eax	#, iftmp.759
	jmp	.L2168	#
.L2163:
	movq	-72(%rbp), %rax	# loop, tmp380
	movq	200(%rax), %rax	# loop_58(D)->end, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2169	#,
	.loc 1 10638 0 discriminator 1
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.765
	movq	-72(%rbp), %rdx	# loop, tmp381
	movq	200(%rdx), %rdx	# loop_58(D)->end, D.25058
	movl	8(%rdx), %edx	# _117->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp382
	addq	$4, %rdx	#, tmp383
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.765_116->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2170	#,
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.766
	movq	-72(%rbp), %rdx	# loop, tmp384
	movq	200(%rdx), %rdx	# loop_58(D)->end, D.25058
	movl	8(%rdx), %edx	# _121->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp385
	addq	$4, %rdx	#, tmp386
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.766_120->data.bb, D.25057
	movl	88(%rax), %eax	# _123->index, iftmp.764
	jmp	.L2168	#
.L2170:
	.loc 1 10638 0 discriminator 2
	movl	$-1, %eax	#, iftmp.764
	jmp	.L2168	#
.L2169:
	movl	$-1, %eax	#, iftmp.763
.L2168:
	.loc 1 10628 0 is_stmt 1 discriminator 3
	movl	%eax, -92(%rbp)	# iftmp.758, %sfp
	jmp	.L2173	#
.L2162:
	movl	$-1, -92(%rbp)	#, %sfp
.L2173:
	.loc 1 10637 0 discriminator 4
	movq	-72(%rbp), %rax	# loop, tmp387
	movq	168(%rax), %rax	# loop_58(D)->vtop, D.25058
	.loc 1 10628 0 discriminator 4
	testq	%rax, %rax	# D.25058
	je	.L2174	#,
	.loc 1 10637 0
	movq	-72(%rbp), %rax	# loop, tmp388
	movq	168(%rax), %rax	# loop_58(D)->vtop, D.25058
	.loc 1 10628 0
	movl	8(%rax), %r15d	# _132->fld[0].rtint, iftmp.767
	jmp	.L2175	#
.L2174:
	.loc 1 10628 0 is_stmt 0 discriminator 5
	movl	$-1, %r15d	#, iftmp.767
.L2175:
	.loc 1 10636 0 is_stmt 1 discriminator 6
	movq	-72(%rbp), %rax	# loop, tmp389
	movq	168(%rax), %rax	# loop_58(D)->vtop, D.25058
	.loc 1 10628 0 discriminator 6
	testq	%rax, %rax	# D.25058
	je	.L2176	#,
	.loc 1 10636 0
	movq	-72(%rbp), %rax	# loop, tmp390
	movq	168(%rax), %rax	# loop_58(D)->vtop, D.25058
	movzwl	(%rax), %eax	# _136->code, D.25059
	cmpw	$37, %ax	#, D.25059
	jne	.L2177	#,
	.loc 1 10636 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loop, tmp391
	movq	168(%rax), %rax	# loop_58(D)->vtop, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	testq	%rax, %rax	# D.25058
	je	.L2178	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.772
	movq	-72(%rbp), %rax	# loop, tmp392
	movq	168(%rax), %rax	# loop_58(D)->vtop, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _142->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp394
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.772_140->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2179	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.773
	movq	-72(%rbp), %rax	# loop, tmp395
	movq	168(%rax), %rax	# loop_58(D)->vtop, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _147->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp397
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.773_145->data.bb, D.25057
	movl	88(%rax), %eax	# _149->index, iftmp.771
	jmp	.L2182	#
.L2179:
	.loc 1 10636 0 discriminator 2
	movl	$-1, %eax	#, iftmp.771
	jmp	.L2182	#
.L2178:
	movl	$-1, %eax	#, iftmp.770
	jmp	.L2182	#
.L2177:
	movq	-72(%rbp), %rax	# loop, tmp398
	movq	168(%rax), %rax	# loop_58(D)->vtop, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2183	#,
	.loc 1 10636 0 discriminator 1
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.776
	movq	-72(%rbp), %rdx	# loop, tmp399
	movq	168(%rdx), %rdx	# loop_58(D)->vtop, D.25058
	movl	8(%rdx), %edx	# _157->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp400
	addq	$4, %rdx	#, tmp401
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.776_156->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2184	#,
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.777
	movq	-72(%rbp), %rdx	# loop, tmp402
	movq	168(%rdx), %rdx	# loop_58(D)->vtop, D.25058
	movl	8(%rdx), %edx	# _161->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp403
	addq	$4, %rdx	#, tmp404
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.777_160->data.bb, D.25057
	movl	88(%rax), %eax	# _163->index, iftmp.775
	jmp	.L2182	#
.L2184:
	.loc 1 10636 0 discriminator 2
	movl	$-1, %eax	#, iftmp.775
	jmp	.L2182	#
.L2183:
	movl	$-1, %eax	#, iftmp.774
.L2182:
	.loc 1 10628 0 is_stmt 1 discriminator 7
	movl	%eax, %r14d	# iftmp.769, iftmp.768
	jmp	.L2187	#
.L2176:
	movl	$-1, %r14d	#, iftmp.768
.L2187:
	.loc 1 10635 0 discriminator 8
	movq	-72(%rbp), %rax	# loop, tmp405
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	.loc 1 10628 0 discriminator 8
	testq	%rax, %rax	# D.25058
	je	.L2188	#,
	.loc 1 10635 0
	movq	-72(%rbp), %rax	# loop, tmp406
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	.loc 1 10628 0
	movl	8(%rax), %r13d	# _172->fld[0].rtint, iftmp.778
	jmp	.L2189	#
.L2188:
	.loc 1 10628 0 is_stmt 0 discriminator 9
	movl	$-1, %r13d	#, iftmp.778
.L2189:
	.loc 1 10634 0 is_stmt 1 discriminator 10
	movq	-72(%rbp), %rax	# loop, tmp407
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	.loc 1 10628 0 discriminator 10
	testq	%rax, %rax	# D.25058
	je	.L2190	#,
	.loc 1 10634 0
	movq	-72(%rbp), %rax	# loop, tmp408
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movzwl	(%rax), %eax	# _176->code, D.25059
	cmpw	$37, %ax	#, D.25059
	jne	.L2191	#,
	.loc 1 10634 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loop, tmp409
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	testq	%rax, %rax	# D.25058
	je	.L2192	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.783
	movq	-72(%rbp), %rax	# loop, tmp410
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _182->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp412
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.783_180->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2193	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.784
	movq	-72(%rbp), %rax	# loop, tmp413
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _187->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp415
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.784_185->data.bb, D.25057
	movl	88(%rax), %eax	# _189->index, iftmp.782
	jmp	.L2196	#
.L2193:
	.loc 1 10634 0 discriminator 2
	movl	$-1, %eax	#, iftmp.782
	jmp	.L2196	#
.L2192:
	movl	$-1, %eax	#, iftmp.781
	jmp	.L2196	#
.L2191:
	movq	-72(%rbp), %rax	# loop, tmp416
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2197	#,
	.loc 1 10634 0 discriminator 1
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.787
	movq	-72(%rbp), %rdx	# loop, tmp417
	movq	176(%rdx), %rdx	# loop_58(D)->cont, D.25058
	movl	8(%rdx), %edx	# _197->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp418
	addq	$4, %rdx	#, tmp419
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.787_196->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2198	#,
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.788
	movq	-72(%rbp), %rdx	# loop, tmp420
	movq	176(%rdx), %rdx	# loop_58(D)->cont, D.25058
	movl	8(%rdx), %edx	# _201->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp421
	addq	$4, %rdx	#, tmp422
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.788_200->data.bb, D.25057
	movl	88(%rax), %eax	# _203->index, iftmp.786
	jmp	.L2196	#
.L2198:
	.loc 1 10634 0 discriminator 2
	movl	$-1, %eax	#, iftmp.786
	jmp	.L2196	#
.L2197:
	movl	$-1, %eax	#, iftmp.785
.L2196:
	.loc 1 10628 0 is_stmt 1 discriminator 11
	movl	%eax, %r12d	# iftmp.780, iftmp.779
	jmp	.L2201	#
.L2190:
	movl	$-1, %r12d	#, iftmp.779
.L2201:
	.loc 1 10633 0 discriminator 12
	movq	-72(%rbp), %rax	# loop, tmp423
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	.loc 1 10628 0 discriminator 12
	testq	%rax, %rax	# D.25058
	je	.L2202	#,
	.loc 1 10633 0
	movq	-72(%rbp), %rax	# loop, tmp424
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	.loc 1 10628 0
	movl	8(%rax), %eax	# _212->fld[0].rtint, iftmp.789
	movl	%eax, -96(%rbp)	# iftmp.789, %sfp
	jmp	.L2203	#
.L2202:
	.loc 1 10628 0 is_stmt 0 discriminator 13
	movl	$-1, -96(%rbp)	#, %sfp
.L2203:
	.loc 1 10632 0 is_stmt 1 discriminator 14
	movq	-72(%rbp), %rax	# loop, tmp425
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	.loc 1 10628 0 discriminator 14
	testq	%rax, %rax	# D.25058
	je	.L2204	#,
	.loc 1 10632 0
	movq	-72(%rbp), %rax	# loop, tmp426
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movzwl	(%rax), %eax	# _216->code, D.25059
	cmpw	$37, %ax	#, D.25059
	jne	.L2205	#,
	.loc 1 10632 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loop, tmp427
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	testq	%rax, %rax	# D.25058
	je	.L2206	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.794
	movq	-72(%rbp), %rax	# loop, tmp428
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _222->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp430
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.794_220->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2207	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.795
	movq	-72(%rbp), %rax	# loop, tmp431
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _227->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp433
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.795_225->data.bb, D.25057
	movl	88(%rax), %eax	# _229->index, iftmp.793
	jmp	.L2210	#
.L2207:
	.loc 1 10632 0 discriminator 2
	movl	$-1, %eax	#, iftmp.793
	jmp	.L2210	#
.L2206:
	movl	$-1, %eax	#, iftmp.792
	jmp	.L2210	#
.L2205:
	movq	-72(%rbp), %rax	# loop, tmp434
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2211	#,
	.loc 1 10632 0 discriminator 1
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.798
	movq	-72(%rbp), %rdx	# loop, tmp435
	movq	176(%rdx), %rdx	# loop_58(D)->cont, D.25058
	movl	8(%rdx), %edx	# _237->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp436
	addq	$4, %rdx	#, tmp437
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.798_236->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2212	#,
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.799
	movq	-72(%rbp), %rdx	# loop, tmp438
	movq	176(%rdx), %rdx	# loop_58(D)->cont, D.25058
	movl	8(%rdx), %edx	# _241->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp439
	addq	$4, %rdx	#, tmp440
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.799_240->data.bb, D.25057
	movl	88(%rax), %eax	# _243->index, iftmp.797
	jmp	.L2210	#
.L2212:
	.loc 1 10632 0 discriminator 2
	movl	$-1, %eax	#, iftmp.797
	jmp	.L2210	#
.L2211:
	movl	$-1, %eax	#, iftmp.796
.L2210:
	.loc 1 10628 0 is_stmt 1 discriminator 15
	movl	%eax, -100(%rbp)	# iftmp.791, %sfp
	jmp	.L2215	#
.L2204:
	movl	$-1, -100(%rbp)	#, %sfp
.L2215:
	.loc 1 10631 0 discriminator 16
	movq	-72(%rbp), %rax	# loop, tmp441
	movq	192(%rax), %rax	# loop_58(D)->start, D.25058
	.loc 1 10628 0 discriminator 16
	testq	%rax, %rax	# D.25058
	je	.L2216	#,
	.loc 1 10631 0
	movq	-72(%rbp), %rax	# loop, tmp442
	movq	192(%rax), %rax	# loop_58(D)->start, D.25058
	.loc 1 10628 0
	movl	8(%rax), %ebx	# _252->fld[0].rtint, iftmp.800
	jmp	.L2217	#
.L2216:
	.loc 1 10628 0 is_stmt 0 discriminator 17
	movl	$-1, %ebx	#, iftmp.800
.L2217:
	.loc 1 10630 0 is_stmt 1 discriminator 18
	movq	-72(%rbp), %rax	# loop, tmp443
	movq	192(%rax), %rax	# loop_58(D)->start, D.25058
	.loc 1 10628 0 discriminator 18
	testq	%rax, %rax	# D.25058
	je	.L2218	#,
	.loc 1 10630 0
	movq	-72(%rbp), %rax	# loop, tmp444
	movq	192(%rax), %rax	# loop_58(D)->start, D.25058
	movzwl	(%rax), %eax	# _256->code, D.25059
	cmpw	$37, %ax	#, D.25059
	jne	.L2219	#,
	.loc 1 10630 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loop, tmp445
	movq	192(%rax), %rax	# loop_58(D)->start, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	testq	%rax, %rax	# D.25058
	je	.L2220	#,
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.805
	movq	%rax, -112(%rbp)	# basic_block_for_insn.805, %sfp
	movq	-72(%rbp), %rax	# loop, tmp446
	movq	192(%rax), %rax	# loop_58(D)->start, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _262->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp448
	movq	-112(%rbp), %rcx	# %sfp, basic_block_for_insn.805
	movq	(%rcx,%rax,8), %rax	# basic_block_for_insn.805_260->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2221	#,
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.806
	movq	%rax, -112(%rbp)	# basic_block_for_insn.806, %sfp
	movq	-72(%rbp), %rax	# loop, tmp449
	movq	192(%rax), %rax	# loop_58(D)->start, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _267->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp451
	movq	-112(%rbp), %rcx	# %sfp, basic_block_for_insn.806
	movq	(%rcx,%rax,8), %rax	# basic_block_for_insn.806_265->data.bb, D.25057
	movl	88(%rax), %eax	# _269->index, iftmp.804
	jmp	.L2229	#
.L2221:
	.loc 1 10630 0 discriminator 2
	movl	$-1, %eax	#, iftmp.804
	jmp	.L2229	#
.L2220:
	movl	$-1, %eax	#, iftmp.803
	jmp	.L2229	#
.L2219:
	movq	-72(%rbp), %rax	# loop, tmp452
	movq	192(%rax), %rax	# loop_58(D)->start, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2225	#,
	.loc 1 10630 0 discriminator 1
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.809
	movq	-72(%rbp), %rdx	# loop, tmp453
	movq	192(%rdx), %rdx	# loop_58(D)->start, D.25058
	movl	8(%rdx), %edx	# _277->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp454
	addq	$4, %rdx	#, tmp455
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.809_276->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2226	#,
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.810
	movq	-72(%rbp), %rdx	# loop, tmp456
	movq	192(%rdx), %rdx	# loop_58(D)->start, D.25058
	movl	8(%rdx), %edx	# _281->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp457
	addq	$4, %rdx	#, tmp458
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.810_280->data.bb, D.25057
	movl	88(%rax), %eax	# _283->index, iftmp.808
	jmp	.L2229	#
.L2226:
	.loc 1 10630 0 discriminator 2
	movl	$-1, %eax	#, iftmp.808
	jmp	.L2229	#
.L2225:
	movl	$-1, %eax	#, iftmp.807
	jmp	.L2229	#
.L2218:
	.loc 1 10628 0 is_stmt 1 discriminator 19
	movl	$-1, %eax	#, iftmp.801
.L2229:
	.loc 1 10628 0 is_stmt 0 discriminator 20
	movq	-80(%rbp), %rdi	# file, tmp459
	movl	-88(%rbp), %ecx	# %sfp, iftmp.756
	movl	%ecx, 40(%rsp)	# iftmp.756,
	movl	-92(%rbp), %esi	# %sfp, iftmp.757
	movl	%esi, 32(%rsp)	# iftmp.757,
	movl	%r15d, 24(%rsp)	# iftmp.767,
	movl	%r14d, 16(%rsp)	# iftmp.768,
	movl	%r13d, 8(%rsp)	# iftmp.778,
	movl	%r12d, (%rsp)	# iftmp.779,
	movl	-96(%rbp), %r9d	# %sfp,
	movl	-100(%rbp), %r8d	# %sfp,
	movl	%ebx, %ecx	# iftmp.800,
	movl	%eax, %edx	# iftmp.801,
	movl	$.LC99, %esi	#,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10644 0 is_stmt 1 discriminator 20
	movq	-72(%rbp), %rax	# loop, tmp460
	movq	216(%rax), %rax	# loop_58(D)->scan_start, D.25058
	.loc 1 10640 0 discriminator 20
	testq	%rax, %rax	# D.25058
	je	.L2230	#,
	.loc 1 10644 0
	movq	-72(%rbp), %rax	# loop, tmp461
	movq	216(%rax), %rax	# loop_58(D)->scan_start, D.25058
	.loc 1 10640 0
	movl	8(%rax), %r13d	# _292->fld[0].rtint, iftmp.811
	jmp	.L2231	#
.L2230:
	.loc 1 10640 0 is_stmt 0 discriminator 1
	movl	$-1, %r13d	#, iftmp.811
.L2231:
	.loc 1 10643 0 is_stmt 1 discriminator 2
	movq	-72(%rbp), %rax	# loop, tmp462
	movq	216(%rax), %rax	# loop_58(D)->scan_start, D.25058
	.loc 1 10640 0 discriminator 2
	testq	%rax, %rax	# D.25058
	je	.L2232	#,
	.loc 1 10643 0
	movq	-72(%rbp), %rax	# loop, tmp463
	movq	216(%rax), %rax	# loop_58(D)->scan_start, D.25058
	movzwl	(%rax), %eax	# _296->code, D.25059
	cmpw	$37, %ax	#, D.25059
	jne	.L2233	#,
	.loc 1 10643 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loop, tmp464
	movq	216(%rax), %rax	# loop_58(D)->scan_start, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	testq	%rax, %rax	# D.25058
	je	.L2234	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.816
	movq	-72(%rbp), %rax	# loop, tmp465
	movq	216(%rax), %rax	# loop_58(D)->scan_start, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _302->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp467
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.816_300->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2235	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.817
	movq	-72(%rbp), %rax	# loop, tmp468
	movq	216(%rax), %rax	# loop_58(D)->scan_start, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _307->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp470
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.817_305->data.bb, D.25057
	movl	88(%rax), %eax	# _309->index, iftmp.815
	jmp	.L2238	#
.L2235:
	.loc 1 10643 0 discriminator 2
	movl	$-1, %eax	#, iftmp.815
	jmp	.L2238	#
.L2234:
	movl	$-1, %eax	#, iftmp.814
	jmp	.L2238	#
.L2233:
	movq	-72(%rbp), %rax	# loop, tmp471
	movq	216(%rax), %rax	# loop_58(D)->scan_start, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2239	#,
	.loc 1 10643 0 discriminator 1
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.820
	movq	-72(%rbp), %rdx	# loop, tmp472
	movq	216(%rdx), %rdx	# loop_58(D)->scan_start, D.25058
	movl	8(%rdx), %edx	# _317->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp473
	addq	$4, %rdx	#, tmp474
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.820_316->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2240	#,
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.821
	movq	-72(%rbp), %rdx	# loop, tmp475
	movq	216(%rdx), %rdx	# loop_58(D)->scan_start, D.25058
	movl	8(%rdx), %edx	# _321->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp476
	addq	$4, %rdx	#, tmp477
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.821_320->data.bb, D.25057
	movl	88(%rax), %eax	# _323->index, iftmp.819
	jmp	.L2238	#
.L2240:
	.loc 1 10643 0 discriminator 2
	movl	$-1, %eax	#, iftmp.819
	jmp	.L2238	#
.L2239:
	movl	$-1, %eax	#, iftmp.818
.L2238:
	.loc 1 10640 0 is_stmt 1 discriminator 23
	movl	%eax, %r12d	# iftmp.813, iftmp.812
	jmp	.L2243	#
.L2232:
	.loc 1 10640 0 is_stmt 0 discriminator 3
	movl	$-1, %r12d	#, iftmp.812
.L2243:
	.loc 1 10642 0 is_stmt 1 discriminator 4
	movq	-72(%rbp), %rax	# loop, tmp478
	movq	208(%rax), %rax	# loop_58(D)->top, D.25058
	.loc 1 10640 0 discriminator 4
	testq	%rax, %rax	# D.25058
	je	.L2244	#,
	.loc 1 10642 0
	movq	-72(%rbp), %rax	# loop, tmp479
	movq	208(%rax), %rax	# loop_58(D)->top, D.25058
	.loc 1 10640 0
	movl	8(%rax), %ebx	# _332->fld[0].rtint, iftmp.822
	jmp	.L2245	#
.L2244:
	.loc 1 10640 0 is_stmt 0 discriminator 5
	movl	$-1, %ebx	#, iftmp.822
.L2245:
	.loc 1 10641 0 is_stmt 1 discriminator 6
	movq	-72(%rbp), %rax	# loop, tmp480
	movq	208(%rax), %rax	# loop_58(D)->top, D.25058
	.loc 1 10640 0 discriminator 6
	testq	%rax, %rax	# D.25058
	je	.L2246	#,
	.loc 1 10641 0
	movq	-72(%rbp), %rax	# loop, tmp481
	movq	208(%rax), %rax	# loop_58(D)->top, D.25058
	movzwl	(%rax), %eax	# _336->code, D.25059
	cmpw	$37, %ax	#, D.25059
	jne	.L2247	#,
	.loc 1 10641 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loop, tmp482
	movq	208(%rax), %rax	# loop_58(D)->top, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	testq	%rax, %rax	# D.25058
	je	.L2248	#,
	movq	basic_block_for_insn(%rip), %r14	# basic_block_for_insn, basic_block_for_insn.827
	movq	-72(%rbp), %rax	# loop, tmp483
	movq	208(%rax), %rax	# loop_58(D)->top, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _342->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp485
	movq	(%r14,%rax,8), %rax	# basic_block_for_insn.827_340->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2249	#,
	movq	basic_block_for_insn(%rip), %r14	# basic_block_for_insn, basic_block_for_insn.828
	movq	-72(%rbp), %rax	# loop, tmp486
	movq	208(%rax), %rax	# loop_58(D)->top, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _347->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp488
	movq	(%r14,%rax,8), %rax	# basic_block_for_insn.828_345->data.bb, D.25057
	movl	88(%rax), %eax	# _349->index, iftmp.826
	jmp	.L2257	#
.L2249:
	.loc 1 10641 0 discriminator 2
	movl	$-1, %eax	#, iftmp.826
	jmp	.L2257	#
.L2248:
	movl	$-1, %eax	#, iftmp.825
	jmp	.L2257	#
.L2247:
	movq	-72(%rbp), %rax	# loop, tmp489
	movq	208(%rax), %rax	# loop_58(D)->top, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2253	#,
	.loc 1 10641 0 discriminator 1
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.831
	movq	-72(%rbp), %rdx	# loop, tmp490
	movq	208(%rdx), %rdx	# loop_58(D)->top, D.25058
	movl	8(%rdx), %edx	# _357->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp491
	addq	$4, %rdx	#, tmp492
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.831_356->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2254	#,
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.832
	movq	-72(%rbp), %rdx	# loop, tmp493
	movq	208(%rdx), %rdx	# loop_58(D)->top, D.25058
	movl	8(%rdx), %edx	# _361->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp494
	addq	$4, %rdx	#, tmp495
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.832_360->data.bb, D.25057
	movl	88(%rax), %eax	# _363->index, iftmp.830
	jmp	.L2257	#
.L2254:
	.loc 1 10641 0 discriminator 2
	movl	$-1, %eax	#, iftmp.830
	jmp	.L2257	#
.L2253:
	movl	$-1, %eax	#, iftmp.829
	jmp	.L2257	#
.L2246:
	.loc 1 10640 0 is_stmt 1 discriminator 7
	movl	$-1, %eax	#, iftmp.823
.L2257:
	.loc 1 10640 0 is_stmt 0 discriminator 8
	movq	-80(%rbp), %rdi	# file, tmp496
	movl	%r13d, %r9d	# iftmp.811,
	movl	%r12d, %r8d	# iftmp.812,
	movl	%ebx, %ecx	# iftmp.822,
	movl	%eax, %edx	# iftmp.823,
	movl	$.LC100, %esi	#,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10645 0 is_stmt 1 discriminator 8
	movq	-72(%rbp), %rax	# loop, tmp497
	movl	240(%rax), %edx	# loop_58(D)->exit_count, D.25060
	movq	-80(%rbp), %rax	# file, tmp498
	movl	$.LC101, %esi	#,
	movq	%rax, %rdi	# tmp498,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10646 0 discriminator 8
	movq	-72(%rbp), %rax	# loop, tmp499
	movl	240(%rax), %eax	# loop_58(D)->exit_count, D.25060
	testl	%eax, %eax	# D.25060
	je	.L2258	#,
	.loc 1 10648 0
	movq	-80(%rbp), %rax	# file, tmp500
	movq	%rax, %rcx	# tmp500,
	movl	$9, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC102, %edi	#,
	call	fwrite	#
	.loc 1 10649 0
	movq	-72(%rbp), %rax	# loop, tmp501
	movq	232(%rax), %rax	# loop_58(D)->exit_labels, tmp502
	movq	%rax, -56(%rbp)	# tmp502, label
	jmp	.L2259	#
.L2262:
	.loc 1 10652 0
	movq	-56(%rbp), %rax	# label, tmp503
	movq	8(%rax), %rax	# label_1->fld[0].rtx, D.25058
	.loc 1 10651 0
	testq	%rax, %rax	# D.25058
	je	.L2260	#,
	.loc 1 10652 0
	movq	-56(%rbp), %rax	# label, tmp504
	movq	8(%rax), %rax	# label_1->fld[0].rtx, D.25058
	.loc 1 10651 0
	movl	8(%rax), %eax	# _375->fld[0].rtint, iftmp.833
	jmp	.L2261	#
.L2260:
	.loc 1 10651 0 is_stmt 0 discriminator 1
	movl	$-1, %eax	#, iftmp.833
.L2261:
	.loc 1 10651 0 discriminator 2
	movq	-80(%rbp), %rcx	# file, tmp505
	movl	%eax, %edx	# iftmp.833,
	movl	$.LC103, %esi	#,
	movq	%rcx, %rdi	# tmp505,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10649 0 is_stmt 1 discriminator 2
	movq	-56(%rbp), %rax	# label, tmp506
	movq	16(%rax), %rax	# label_1->fld[1].rtx, tmp507
	movq	%rax, -56(%rbp)	# tmp507, label
.L2259:
	.loc 1 10649 0 is_stmt 0 discriminator 1
	cmpq	$0, -56(%rbp)	#, label
	jne	.L2262	#,
.L2258:
	.loc 1 10655 0 is_stmt 1
	movq	-80(%rbp), %rax	# file, tmp508
	movq	%rax, %rsi	# tmp508,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 10660 0
	movq	-72(%rbp), %rax	# loop, tmp509
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2263	#,
	.loc 1 10660 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# loop, tmp510
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movzwl	(%rax), %eax	# _380->code, D.25059
	cmpw	$37, %ax	#, D.25059
	jne	.L2264	#,
	movq	-72(%rbp), %rax	# loop, tmp511
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	testq	%rax, %rax	# D.25058
	je	.L2265	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.838
	movq	-72(%rbp), %rax	# loop, tmp512
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _386->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp514
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.838_384->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2266	#,
	movq	basic_block_for_insn(%rip), %rbx	# basic_block_for_insn, basic_block_for_insn.839
	movq	-72(%rbp), %rax	# loop, tmp515
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	movq	%rax, %rdi	# D.25058,
	call	next_nonnote_insn	#
	movl	8(%rax), %eax	# _391->fld[0].rtint, D.25060
	cltq
	addq	$4, %rax	#, tmp517
	movq	(%rbx,%rax,8), %rax	# basic_block_for_insn.839_389->data.bb, D.25057
	movl	88(%rax), %eax	# _393->index, iftmp.837
	jmp	.L2274	#
.L2266:
	.loc 1 10660 0 discriminator 2
	movl	$-1, %eax	#, iftmp.837
	jmp	.L2274	#
.L2265:
	movl	$-1, %eax	#, iftmp.836
	jmp	.L2274	#
.L2264:
	movq	-72(%rbp), %rax	# loop, tmp518
	movq	176(%rax), %rax	# loop_58(D)->cont, D.25058
	testq	%rax, %rax	# D.25058
	je	.L2270	#,
	.loc 1 10660 0 discriminator 1
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.842
	movq	-72(%rbp), %rdx	# loop, tmp519
	movq	176(%rdx), %rdx	# loop_58(D)->cont, D.25058
	movl	8(%rdx), %edx	# _401->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp520
	addq	$4, %rdx	#, tmp521
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.842_400->data.bb, D.25057
	testq	%rax, %rax	# D.25057
	je	.L2271	#,
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.843
	movq	-72(%rbp), %rdx	# loop, tmp522
	movq	176(%rdx), %rdx	# loop_58(D)->cont, D.25058
	movl	8(%rdx), %edx	# _405->fld[0].rtint, D.25060
	movslq	%edx, %rdx	# D.25060, tmp523
	addq	$4, %rdx	#, tmp524
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.843_404->data.bb, D.25057
	movl	88(%rax), %eax	# _407->index, iftmp.841
	jmp	.L2274	#
.L2271:
	.loc 1 10660 0 discriminator 2
	movl	$-1, %eax	#, iftmp.841
	jmp	.L2274	#
.L2270:
	movl	$-1, %eax	#, iftmp.840
	jmp	.L2274	#
.L2263:
	movl	$-1, %eax	#, iftmp.834
.L2274:
	.loc 1 10660 0 discriminator 3
	movq	-72(%rbp), %rdx	# loop, tmp525
	movq	16(%rdx), %rdx	# loop_58(D)->latch, D.25057
	movl	88(%rdx), %edx	# _415->index, D.25060
	cmpl	%edx, %eax	# D.25060, iftmp.834
	je	.L2152	#,
	.loc 1 10661 0 is_stmt 1
	movq	-80(%rbp), %rax	# file, tmp526
	movq	%rax, %rcx	# tmp526,
	movl	$42, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC104, %edi	#,
	call	fwrite	#
.L2152:
	.loc 1 10663 0
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE120:
	.size	loop_dump_aux, .-loop_dump_aux
	.globl	debug_loop
	.type	debug_loop, @function
debug_loop:
.LFB121:
	.loc 1 10670 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# loop, loop
	.loc 1 10671 0
	movq	stderr(%rip), %rsi	# stderr, stderr.844
	movq	-8(%rbp), %rax	# loop, tmp60
	movl	$1, %ecx	#,
	movl	$loop_dump_aux, %edx	#,
	movq	%rax, %rdi	# tmp60,
	call	flow_loop_dump	#
	.loc 1 10672 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE121:
	.size	debug_loop, .-debug_loop
	.globl	debug_loops
	.type	debug_loops, @function
debug_loops:
.LFB122:
	.loc 1 10679 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# loops, loops
	.loc 1 10680 0
	movq	stderr(%rip), %rsi	# stderr, stderr.845
	movq	-8(%rbp), %rax	# loops, tmp60
	movl	$1, %ecx	#,
	movl	$loop_dump_aux, %edx	#,
	movq	%rax, %rdi	# tmp60,
	call	flow_loops_dump	#
	.loc 1 10681 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE122:
	.size	debug_loops, .-debug_loops
	.section	.rodata
	.type	__FUNCTION__.12570, @object
	.size	__FUNCTION__.12570, 14
__FUNCTION__.12570:
	.string	"loop_optimize"
	.type	__FUNCTION__.12611, @object
	.size	__FUNCTION__.12611, 10
__FUNCTION__.12611:
	.string	"scan_loop"
	.align 16
	.type	__FUNCTION__.12830, @object
	.size	__FUNCTION__.12830, 21
__FUNCTION__.12830:
	.string	"rtx_equal_for_loop_p"
	.type	__FUNCTION__.12910, @object
	.size	__FUNCTION__.12910, 14
__FUNCTION__.12910:
	.string	"move_movables"
	.align 16
	.type	__FUNCTION__.13028, @object
	.size	__FUNCTION__.13028, 22
__FUNCTION__.13028:
	.string	"find_and_verify_loops"
	.align 16
	.type	__FUNCTION__.13138, @object
	.size	__FUNCTION__.13138, 18
__FUNCTION__.13138:
	.string	"labels_in_range_p"
	.align 16
	.type	__FUNCTION__.13302, @object
	.size	__FUNCTION__.13302, 25
__FUNCTION__.13302:
	.string	"rtx_equal_for_prefetch_p"
	.align 16
	.type	__FUNCTION__.13452, @object
	.size	__FUNCTION__.13452, 22
__FUNCTION__.13452:
	.string	"loop_biv_eliminable_p"
	.type	__FUNCTION__.13659, @object
	.size	__FUNCTION__.13659, 11
__FUNCTION__.13659:
	.string	"record_giv"
	.align 16
	.type	__FUNCTION__.13761, @object
	.size	__FUNCTION__.13761, 22
__FUNCTION__.13761:
	.string	"general_induction_var"
	.align 16
	.type	__FUNCTION__.13788, @object
	.size	__FUNCTION__.13788, 18
__FUNCTION__.13788:
	.string	"simplify_giv_expr"
	.align 16
	.type	__FUNCTION__.13917, @object
	.size	__FUNCTION__.13917, 25
__FUNCTION__.13917:
	.string	"check_ext_dependent_givs"
	.align 16
	.type	__FUNCTION__.14155, @object
	.size	__FUNCTION__.14155, 18
__FUNCTION__.14155:
	.string	"loop_insn_first_p"
	.align 16
	.type	__FUNCTION__.14245, @object
	.size	__FUNCTION__.14245, 20
__FUNCTION__.14245:
	.string	"update_reg_last_use"
	.type	__FUNCTION__.14365, @object
	.size	__FUNCTION__.14365, 10
__FUNCTION__.14365:
	.string	"load_mems"
	.type	__FUNCTION__.14472, @object
	.size	__FUNCTION__.14472, 14
__FUNCTION__.14472:
	.string	"try_copy_prop"
	.type	__FUNCTION__.14609, @object
	.size	__FUNCTION__.14609, 14
__FUNCTION__.14609:
	.string	"loop_giv_dump"
	.text
.Letext0:
	.file 2 "rtl.h"
	.file 3 "config.h"
	.file 4 "i386.h"
	.file 5 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
	.file 6 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 7 "/usr/include/stdio.h"
	.file 8 "/usr/include/libio.h"
	.file 9 "machmode.h"
	.file 10 "cselib.h"
	.file 11 "bitmap.h"
	.file 12 "basic-block.h"
	.file 13 "function.h"
	.file 14 "expr.h"
	.file 15 "hard-reg-set.h"
	.file 16 "sbitmap.h"
	.file 17 "varray.h"
	.file 18 "regs.h"
	.file 19 "recog.h"
	.file 20 "flags.h"
	.file 21 "loop.h"
	.file 22 "predict.h"
	.file 23 "insn-codes.h"
	.file 24 "optabs.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x91fe
	.value	0x4
	.long	.Ldebug_abbrev0
	.byte	0x8
	.uleb128 0x1
	.long	.LASF1797
	.byte	0x1
	.long	.LASF1798
	.long	.LASF1799
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.string	"rtx"
	.byte	0x3
	.byte	0x8
	.long	0x38
	.uleb128 0x3
	.byte	0x8
	.long	0x3e
	.uleb128 0x4
	.long	.LASF11
	.byte	0x10
	.byte	0x2
	.byte	0x7a
	.long	0xed
	.uleb128 0x5
	.long	.LASF0
	.byte	0x2
	.byte	0x7d
	.long	0x436
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0
	.uleb128 0x5
	.long	.LASF1
	.byte	0x2
	.byte	0x80
	.long	0x436
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.uleb128 0x5
	.long	.LASF2
	.byte	0x2
	.byte	0x87
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0
	.uleb128 0x5
	.long	.LASF3
	.byte	0x2
	.byte	0x8a
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0
	.uleb128 0x5
	.long	.LASF4
	.byte	0x2
	.byte	0x95
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0
	.uleb128 0x5
	.long	.LASF5
	.byte	0x2
	.byte	0x9d
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0
	.uleb128 0x5
	.long	.LASF6
	.byte	0x2
	.byte	0xaf
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0
	.uleb128 0x5
	.long	.LASF7
	.byte	0x2
	.byte	0xb6
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0
	.uleb128 0x5
	.long	.LASF8
	.byte	0x2
	.byte	0xbb
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0
	.uleb128 0x5
	.long	.LASF9
	.byte	0x2
	.byte	0xc4
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0
	.uleb128 0x6
	.string	"fld"
	.byte	0x2
	.byte	0xc9
	.long	0xf40
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF10
	.byte	0x3
	.byte	0xa
	.long	0xf8
	.uleb128 0x3
	.byte	0x8
	.long	0xfe
	.uleb128 0x4
	.long	.LASF12
	.byte	0x10
	.byte	0x2
	.byte	0xde
	.long	0x123
	.uleb128 0x8
	.long	.LASF13
	.byte	0x2
	.byte	0xdf
	.long	0x283
	.byte	0
	.uleb128 0x8
	.long	.LASF14
	.byte	0x2
	.byte	0xe0
	.long	0xf50
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF15
	.byte	0x3
	.byte	0xc
	.long	0x12e
	.uleb128 0x3
	.byte	0x8
	.long	0x134
	.uleb128 0x9
	.long	.LASF1800
	.uleb128 0x4
	.long	.LASF16
	.byte	0xa0
	.byte	0x4
	.byte	0x35
	.long	0x27e
	.uleb128 0x6
	.string	"add"
	.byte	0x4
	.byte	0x36
	.long	0x27e
	.byte	0
	.uleb128 0x6
	.string	"lea"
	.byte	0x4
	.byte	0x37
	.long	0x27e
	.byte	0x4
	.uleb128 0x8
	.long	.LASF17
	.byte	0x4
	.byte	0x38
	.long	0x27e
	.byte	0x8
	.uleb128 0x8
	.long	.LASF18
	.byte	0x4
	.byte	0x39
	.long	0x27e
	.byte	0xc
	.uleb128 0x8
	.long	.LASF19
	.byte	0x4
	.byte	0x3a
	.long	0x27e
	.byte	0x10
	.uleb128 0x8
	.long	.LASF20
	.byte	0x4
	.byte	0x3b
	.long	0x27e
	.byte	0x14
	.uleb128 0x8
	.long	.LASF21
	.byte	0x4
	.byte	0x3c
	.long	0x27e
	.byte	0x18
	.uleb128 0x8
	.long	.LASF22
	.byte	0x4
	.byte	0x3d
	.long	0x283
	.byte	0x1c
	.uleb128 0x8
	.long	.LASF23
	.byte	0x4
	.byte	0x3e
	.long	0x283
	.byte	0x20
	.uleb128 0x8
	.long	.LASF24
	.byte	0x4
	.byte	0x3f
	.long	0x27e
	.byte	0x24
	.uleb128 0x8
	.long	.LASF25
	.byte	0x4
	.byte	0x40
	.long	0x27e
	.byte	0x28
	.uleb128 0x8
	.long	.LASF26
	.byte	0x4
	.byte	0x42
	.long	0x27e
	.byte	0x2c
	.uleb128 0x8
	.long	.LASF27
	.byte	0x4
	.byte	0x43
	.long	0x2a1
	.byte	0x30
	.uleb128 0x8
	.long	.LASF28
	.byte	0x4
	.byte	0x46
	.long	0x2a6
	.byte	0x3c
	.uleb128 0x8
	.long	.LASF29
	.byte	0x4
	.byte	0x48
	.long	0x27e
	.byte	0x48
	.uleb128 0x8
	.long	.LASF30
	.byte	0x4
	.byte	0x49
	.long	0x2ab
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF31
	.byte	0x4
	.byte	0x4b
	.long	0x2b0
	.byte	0x58
	.uleb128 0x8
	.long	.LASF32
	.byte	0x4
	.byte	0x4d
	.long	0x27e
	.byte	0x64
	.uleb128 0x8
	.long	.LASF33
	.byte	0x4
	.byte	0x4e
	.long	0x2c5
	.byte	0x68
	.uleb128 0x8
	.long	.LASF34
	.byte	0x4
	.byte	0x50
	.long	0x2ca
	.byte	0x70
	.uleb128 0x8
	.long	.LASF35
	.byte	0x4
	.byte	0x52
	.long	0x27e
	.byte	0x78
	.uleb128 0x8
	.long	.LASF36
	.byte	0x4
	.byte	0x53
	.long	0x2cf
	.byte	0x7c
	.uleb128 0x8
	.long	.LASF37
	.byte	0x4
	.byte	0x55
	.long	0x2d4
	.byte	0x88
	.uleb128 0x8
	.long	.LASF38
	.byte	0x4
	.byte	0x57
	.long	0x27e
	.byte	0x94
	.uleb128 0x8
	.long	.LASF39
	.byte	0x4
	.byte	0x59
	.long	0x27e
	.byte	0x98
	.uleb128 0x8
	.long	.LASF40
	.byte	0x4
	.byte	0x5a
	.long	0x27e
	.byte	0x9c
	.byte	0
	.uleb128 0xa
	.long	0x283
	.uleb128 0xb
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0xc
	.long	0x283
	.long	0x29a
	.uleb128 0xd
	.long	0x29a
	.byte	0x2
	.byte	0
	.uleb128 0xe
	.byte	0x8
	.byte	0x7
	.long	.LASF41
	.uleb128 0xa
	.long	0x28a
	.uleb128 0xa
	.long	0x28a
	.uleb128 0xa
	.long	0x28a
	.uleb128 0xa
	.long	0x28a
	.uleb128 0xc
	.long	0x283
	.long	0x2c5
	.uleb128 0xd
	.long	0x29a
	.byte	0x1
	.byte	0
	.uleb128 0xa
	.long	0x2b5
	.uleb128 0xa
	.long	0x2b5
	.uleb128 0xa
	.long	0x28a
	.uleb128 0xa
	.long	0x28a
	.uleb128 0xf
	.long	.LASF50
	.byte	0x4
	.byte	0x4
	.value	0x18b
	.long	0x317
	.uleb128 0x10
	.long	.LASF42
	.sleb128 0
	.uleb128 0x10
	.long	.LASF43
	.sleb128 1
	.uleb128 0x10
	.long	.LASF44
	.sleb128 2
	.uleb128 0x10
	.long	.LASF45
	.sleb128 3
	.uleb128 0x10
	.long	.LASF46
	.sleb128 4
	.uleb128 0x10
	.long	.LASF47
	.sleb128 5
	.uleb128 0x10
	.long	.LASF48
	.sleb128 6
	.uleb128 0x10
	.long	.LASF49
	.sleb128 7
	.byte	0
	.uleb128 0xf
	.long	.LASF51
	.byte	0x4
	.byte	0x4
	.value	0x4b2
	.long	0x3c1
	.uleb128 0x10
	.long	.LASF52
	.sleb128 0
	.uleb128 0x10
	.long	.LASF53
	.sleb128 1
	.uleb128 0x10
	.long	.LASF54
	.sleb128 2
	.uleb128 0x10
	.long	.LASF55
	.sleb128 3
	.uleb128 0x10
	.long	.LASF56
	.sleb128 4
	.uleb128 0x10
	.long	.LASF57
	.sleb128 5
	.uleb128 0x10
	.long	.LASF58
	.sleb128 6
	.uleb128 0x10
	.long	.LASF59
	.sleb128 7
	.uleb128 0x10
	.long	.LASF60
	.sleb128 8
	.uleb128 0x10
	.long	.LASF61
	.sleb128 9
	.uleb128 0x10
	.long	.LASF62
	.sleb128 10
	.uleb128 0x10
	.long	.LASF63
	.sleb128 11
	.uleb128 0x10
	.long	.LASF64
	.sleb128 12
	.uleb128 0x10
	.long	.LASF65
	.sleb128 13
	.uleb128 0x10
	.long	.LASF66
	.sleb128 14
	.uleb128 0x10
	.long	.LASF67
	.sleb128 15
	.uleb128 0x10
	.long	.LASF68
	.sleb128 16
	.uleb128 0x10
	.long	.LASF69
	.sleb128 17
	.uleb128 0x10
	.long	.LASF70
	.sleb128 18
	.uleb128 0x10
	.long	.LASF71
	.sleb128 19
	.uleb128 0x10
	.long	.LASF72
	.sleb128 20
	.uleb128 0x10
	.long	.LASF73
	.sleb128 21
	.uleb128 0x10
	.long	.LASF74
	.sleb128 22
	.uleb128 0x10
	.long	.LASF75
	.sleb128 23
	.uleb128 0x10
	.long	.LASF76
	.sleb128 24
	.uleb128 0x10
	.long	.LASF77
	.sleb128 25
	.byte	0
	.uleb128 0x11
	.long	.LASF78
	.byte	0x1c
	.byte	0x4
	.value	0x683
	.long	0x42a
	.uleb128 0x12
	.long	.LASF79
	.byte	0x4
	.value	0x684
	.long	0x283
	.byte	0
	.uleb128 0x12
	.long	.LASF80
	.byte	0x4
	.value	0x685
	.long	0x283
	.byte	0x4
	.uleb128 0x12
	.long	.LASF81
	.byte	0x4
	.value	0x686
	.long	0x283
	.byte	0x8
	.uleb128 0x12
	.long	.LASF82
	.byte	0x4
	.value	0x687
	.long	0x283
	.byte	0xc
	.uleb128 0x12
	.long	.LASF83
	.byte	0x4
	.value	0x688
	.long	0x283
	.byte	0x10
	.uleb128 0x12
	.long	.LASF84
	.byte	0x4
	.value	0x689
	.long	0x283
	.byte	0x14
	.uleb128 0x12
	.long	.LASF85
	.byte	0x4
	.value	0x68a
	.long	0x283
	.byte	0x18
	.byte	0
	.uleb128 0x13
	.long	.LASF86
	.byte	0x4
	.value	0x68b
	.long	0x3c1
	.uleb128 0xe
	.byte	0x4
	.byte	0x7
	.long	.LASF87
	.uleb128 0x14
	.byte	0x8
	.uleb128 0xe
	.byte	0x8
	.byte	0x5
	.long	.LASF88
	.uleb128 0x7
	.long	.LASF89
	.byte	0x5
	.byte	0xd4
	.long	0x451
	.uleb128 0xe
	.byte	0x8
	.byte	0x7
	.long	.LASF90
	.uleb128 0xe
	.byte	0x1
	.byte	0x8
	.long	.LASF91
	.uleb128 0xe
	.byte	0x2
	.byte	0x7
	.long	.LASF92
	.uleb128 0xe
	.byte	0x1
	.byte	0x6
	.long	.LASF93
	.uleb128 0xe
	.byte	0x2
	.byte	0x5
	.long	.LASF94
	.uleb128 0x7
	.long	.LASF95
	.byte	0x6
	.byte	0x8c
	.long	0x43f
	.uleb128 0x7
	.long	.LASF96
	.byte	0x6
	.byte	0x8d
	.long	0x43f
	.uleb128 0x3
	.byte	0x8
	.long	0x490
	.uleb128 0xe
	.byte	0x1
	.byte	0x6
	.long	.LASF97
	.uleb128 0x7
	.long	.LASF98
	.byte	0x7
	.byte	0x30
	.long	0x4a2
	.uleb128 0x4
	.long	.LASF99
	.byte	0xd8
	.byte	0x8
	.byte	0xf6
	.long	0x623
	.uleb128 0x8
	.long	.LASF100
	.byte	0x8
	.byte	0xf7
	.long	0x283
	.byte	0
	.uleb128 0x8
	.long	.LASF101
	.byte	0x8
	.byte	0xfc
	.long	0x48a
	.byte	0x8
	.uleb128 0x8
	.long	.LASF102
	.byte	0x8
	.byte	0xfd
	.long	0x48a
	.byte	0x10
	.uleb128 0x8
	.long	.LASF103
	.byte	0x8
	.byte	0xfe
	.long	0x48a
	.byte	0x18
	.uleb128 0x8
	.long	.LASF104
	.byte	0x8
	.byte	0xff
	.long	0x48a
	.byte	0x20
	.uleb128 0x12
	.long	.LASF105
	.byte	0x8
	.value	0x100
	.long	0x48a
	.byte	0x28
	.uleb128 0x12
	.long	.LASF106
	.byte	0x8
	.value	0x101
	.long	0x48a
	.byte	0x30
	.uleb128 0x12
	.long	.LASF107
	.byte	0x8
	.value	0x102
	.long	0x48a
	.byte	0x38
	.uleb128 0x12
	.long	.LASF108
	.byte	0x8
	.value	0x103
	.long	0x48a
	.byte	0x40
	.uleb128 0x12
	.long	.LASF109
	.byte	0x8
	.value	0x105
	.long	0x48a
	.byte	0x48
	.uleb128 0x12
	.long	.LASF110
	.byte	0x8
	.value	0x106
	.long	0x48a
	.byte	0x50
	.uleb128 0x12
	.long	.LASF111
	.byte	0x8
	.value	0x107
	.long	0x48a
	.byte	0x58
	.uleb128 0x12
	.long	.LASF112
	.byte	0x8
	.value	0x109
	.long	0x65b
	.byte	0x60
	.uleb128 0x12
	.long	.LASF113
	.byte	0x8
	.value	0x10b
	.long	0x661
	.byte	0x68
	.uleb128 0x12
	.long	.LASF114
	.byte	0x8
	.value	0x10d
	.long	0x283
	.byte	0x70
	.uleb128 0x12
	.long	.LASF115
	.byte	0x8
	.value	0x111
	.long	0x283
	.byte	0x74
	.uleb128 0x12
	.long	.LASF116
	.byte	0x8
	.value	0x113
	.long	0x474
	.byte	0x78
	.uleb128 0x12
	.long	.LASF117
	.byte	0x8
	.value	0x117
	.long	0x45f
	.byte	0x80
	.uleb128 0x12
	.long	.LASF118
	.byte	0x8
	.value	0x118
	.long	0x466
	.byte	0x82
	.uleb128 0x12
	.long	.LASF119
	.byte	0x8
	.value	0x119
	.long	0x667
	.byte	0x83
	.uleb128 0x12
	.long	.LASF120
	.byte	0x8
	.value	0x11d
	.long	0x677
	.byte	0x88
	.uleb128 0x12
	.long	.LASF121
	.byte	0x8
	.value	0x126
	.long	0x47f
	.byte	0x90
	.uleb128 0x12
	.long	.LASF122
	.byte	0x8
	.value	0x12f
	.long	0x43d
	.byte	0x98
	.uleb128 0x12
	.long	.LASF123
	.byte	0x8
	.value	0x130
	.long	0x43d
	.byte	0xa0
	.uleb128 0x12
	.long	.LASF124
	.byte	0x8
	.value	0x131
	.long	0x43d
	.byte	0xa8
	.uleb128 0x12
	.long	.LASF125
	.byte	0x8
	.value	0x132
	.long	0x43d
	.byte	0xb0
	.uleb128 0x12
	.long	.LASF126
	.byte	0x8
	.value	0x133
	.long	0x446
	.byte	0xb8
	.uleb128 0x12
	.long	.LASF127
	.byte	0x8
	.value	0x135
	.long	0x283
	.byte	0xc0
	.uleb128 0x12
	.long	.LASF128
	.byte	0x8
	.value	0x137
	.long	0x67d
	.byte	0xc4
	.byte	0
	.uleb128 0x15
	.long	.LASF1801
	.byte	0x8
	.byte	0x9b
	.uleb128 0x4
	.long	.LASF129
	.byte	0x18
	.byte	0x8
	.byte	0xa1
	.long	0x65b
	.uleb128 0x8
	.long	.LASF130
	.byte	0x8
	.byte	0xa2
	.long	0x65b
	.byte	0
	.uleb128 0x8
	.long	.LASF131
	.byte	0x8
	.byte	0xa3
	.long	0x661
	.byte	0x8
	.uleb128 0x8
	.long	.LASF132
	.byte	0x8
	.byte	0xa7
	.long	0x283
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x62a
	.uleb128 0x3
	.byte	0x8
	.long	0x4a2
	.uleb128 0xc
	.long	0x490
	.long	0x677
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x623
	.uleb128 0xc
	.long	0x490
	.long	0x68d
	.uleb128 0xd
	.long	0x29a
	.byte	0x13
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x693
	.uleb128 0xa
	.long	0x490
	.uleb128 0xe
	.byte	0x8
	.byte	0x7
	.long	.LASF133
	.uleb128 0xe
	.byte	0x8
	.byte	0x5
	.long	.LASF134
	.uleb128 0x3
	.byte	0x8
	.long	0x283
	.uleb128 0x3
	.byte	0x8
	.long	0x6b2
	.uleb128 0x16
	.uleb128 0x17
	.long	.LASF135
	.byte	0x4
	.byte	0x9
	.byte	0x1d
	.long	0x828
	.uleb128 0x10
	.long	.LASF136
	.sleb128 0
	.uleb128 0x10
	.long	.LASF137
	.sleb128 1
	.uleb128 0x10
	.long	.LASF138
	.sleb128 2
	.uleb128 0x10
	.long	.LASF139
	.sleb128 3
	.uleb128 0x10
	.long	.LASF140
	.sleb128 4
	.uleb128 0x10
	.long	.LASF141
	.sleb128 5
	.uleb128 0x10
	.long	.LASF142
	.sleb128 6
	.uleb128 0x10
	.long	.LASF143
	.sleb128 7
	.uleb128 0x10
	.long	.LASF144
	.sleb128 8
	.uleb128 0x10
	.long	.LASF145
	.sleb128 9
	.uleb128 0x10
	.long	.LASF146
	.sleb128 10
	.uleb128 0x10
	.long	.LASF147
	.sleb128 11
	.uleb128 0x10
	.long	.LASF148
	.sleb128 12
	.uleb128 0x10
	.long	.LASF149
	.sleb128 13
	.uleb128 0x10
	.long	.LASF150
	.sleb128 14
	.uleb128 0x10
	.long	.LASF151
	.sleb128 15
	.uleb128 0x10
	.long	.LASF152
	.sleb128 16
	.uleb128 0x10
	.long	.LASF153
	.sleb128 17
	.uleb128 0x10
	.long	.LASF154
	.sleb128 18
	.uleb128 0x10
	.long	.LASF155
	.sleb128 19
	.uleb128 0x10
	.long	.LASF156
	.sleb128 20
	.uleb128 0x10
	.long	.LASF157
	.sleb128 21
	.uleb128 0x10
	.long	.LASF158
	.sleb128 22
	.uleb128 0x10
	.long	.LASF159
	.sleb128 23
	.uleb128 0x10
	.long	.LASF160
	.sleb128 24
	.uleb128 0x10
	.long	.LASF161
	.sleb128 25
	.uleb128 0x10
	.long	.LASF162
	.sleb128 26
	.uleb128 0x10
	.long	.LASF163
	.sleb128 27
	.uleb128 0x10
	.long	.LASF164
	.sleb128 28
	.uleb128 0x10
	.long	.LASF165
	.sleb128 29
	.uleb128 0x10
	.long	.LASF166
	.sleb128 30
	.uleb128 0x10
	.long	.LASF167
	.sleb128 31
	.uleb128 0x10
	.long	.LASF168
	.sleb128 32
	.uleb128 0x10
	.long	.LASF169
	.sleb128 33
	.uleb128 0x10
	.long	.LASF170
	.sleb128 34
	.uleb128 0x10
	.long	.LASF171
	.sleb128 35
	.uleb128 0x10
	.long	.LASF172
	.sleb128 36
	.uleb128 0x10
	.long	.LASF173
	.sleb128 37
	.uleb128 0x10
	.long	.LASF174
	.sleb128 38
	.uleb128 0x10
	.long	.LASF175
	.sleb128 39
	.uleb128 0x10
	.long	.LASF176
	.sleb128 40
	.uleb128 0x10
	.long	.LASF177
	.sleb128 41
	.uleb128 0x10
	.long	.LASF178
	.sleb128 42
	.uleb128 0x10
	.long	.LASF179
	.sleb128 43
	.uleb128 0x10
	.long	.LASF180
	.sleb128 44
	.uleb128 0x10
	.long	.LASF181
	.sleb128 45
	.uleb128 0x10
	.long	.LASF182
	.sleb128 46
	.uleb128 0x10
	.long	.LASF183
	.sleb128 47
	.uleb128 0x10
	.long	.LASF184
	.sleb128 48
	.uleb128 0x10
	.long	.LASF185
	.sleb128 49
	.uleb128 0x10
	.long	.LASF186
	.sleb128 50
	.uleb128 0x10
	.long	.LASF187
	.sleb128 51
	.uleb128 0x10
	.long	.LASF188
	.sleb128 52
	.uleb128 0x10
	.long	.LASF189
	.sleb128 53
	.uleb128 0x10
	.long	.LASF190
	.sleb128 54
	.uleb128 0x10
	.long	.LASF191
	.sleb128 55
	.uleb128 0x10
	.long	.LASF192
	.sleb128 56
	.uleb128 0x10
	.long	.LASF193
	.sleb128 57
	.uleb128 0x10
	.long	.LASF194
	.sleb128 58
	.uleb128 0x10
	.long	.LASF195
	.sleb128 59
	.byte	0
	.uleb128 0x17
	.long	.LASF196
	.byte	0x4
	.byte	0x9
	.byte	0x2c
	.long	0x871
	.uleb128 0x10
	.long	.LASF197
	.sleb128 0
	.uleb128 0x10
	.long	.LASF198
	.sleb128 1
	.uleb128 0x10
	.long	.LASF199
	.sleb128 2
	.uleb128 0x10
	.long	.LASF200
	.sleb128 3
	.uleb128 0x10
	.long	.LASF201
	.sleb128 4
	.uleb128 0x10
	.long	.LASF202
	.sleb128 5
	.uleb128 0x10
	.long	.LASF203
	.sleb128 6
	.uleb128 0x10
	.long	.LASF204
	.sleb128 7
	.uleb128 0x10
	.long	.LASF205
	.sleb128 8
	.uleb128 0x10
	.long	.LASF206
	.sleb128 9
	.byte	0
	.uleb128 0x17
	.long	.LASF207
	.byte	0x4
	.byte	0x2
	.byte	0x29
	.long	0xc6d
	.uleb128 0x10
	.long	.LASF208
	.sleb128 0
	.uleb128 0x18
	.string	"NIL"
	.sleb128 1
	.uleb128 0x10
	.long	.LASF209
	.sleb128 2
	.uleb128 0x10
	.long	.LASF210
	.sleb128 3
	.uleb128 0x10
	.long	.LASF211
	.sleb128 4
	.uleb128 0x10
	.long	.LASF212
	.sleb128 5
	.uleb128 0x10
	.long	.LASF213
	.sleb128 6
	.uleb128 0x10
	.long	.LASF214
	.sleb128 7
	.uleb128 0x10
	.long	.LASF215
	.sleb128 8
	.uleb128 0x10
	.long	.LASF216
	.sleb128 9
	.uleb128 0x10
	.long	.LASF217
	.sleb128 10
	.uleb128 0x10
	.long	.LASF218
	.sleb128 11
	.uleb128 0x10
	.long	.LASF219
	.sleb128 12
	.uleb128 0x10
	.long	.LASF220
	.sleb128 13
	.uleb128 0x10
	.long	.LASF221
	.sleb128 14
	.uleb128 0x10
	.long	.LASF222
	.sleb128 15
	.uleb128 0x10
	.long	.LASF223
	.sleb128 16
	.uleb128 0x10
	.long	.LASF224
	.sleb128 17
	.uleb128 0x10
	.long	.LASF225
	.sleb128 18
	.uleb128 0x10
	.long	.LASF226
	.sleb128 19
	.uleb128 0x10
	.long	.LASF227
	.sleb128 20
	.uleb128 0x10
	.long	.LASF228
	.sleb128 21
	.uleb128 0x10
	.long	.LASF229
	.sleb128 22
	.uleb128 0x10
	.long	.LASF230
	.sleb128 23
	.uleb128 0x10
	.long	.LASF231
	.sleb128 24
	.uleb128 0x10
	.long	.LASF232
	.sleb128 25
	.uleb128 0x10
	.long	.LASF233
	.sleb128 26
	.uleb128 0x10
	.long	.LASF234
	.sleb128 27
	.uleb128 0x10
	.long	.LASF235
	.sleb128 28
	.uleb128 0x10
	.long	.LASF236
	.sleb128 29
	.uleb128 0x10
	.long	.LASF237
	.sleb128 30
	.uleb128 0x10
	.long	.LASF238
	.sleb128 31
	.uleb128 0x10
	.long	.LASF239
	.sleb128 32
	.uleb128 0x10
	.long	.LASF240
	.sleb128 33
	.uleb128 0x10
	.long	.LASF241
	.sleb128 34
	.uleb128 0x10
	.long	.LASF242
	.sleb128 35
	.uleb128 0x10
	.long	.LASF243
	.sleb128 36
	.uleb128 0x10
	.long	.LASF244
	.sleb128 37
	.uleb128 0x10
	.long	.LASF245
	.sleb128 38
	.uleb128 0x10
	.long	.LASF246
	.sleb128 39
	.uleb128 0x10
	.long	.LASF247
	.sleb128 40
	.uleb128 0x10
	.long	.LASF248
	.sleb128 41
	.uleb128 0x10
	.long	.LASF249
	.sleb128 42
	.uleb128 0x10
	.long	.LASF250
	.sleb128 43
	.uleb128 0x10
	.long	.LASF251
	.sleb128 44
	.uleb128 0x10
	.long	.LASF252
	.sleb128 45
	.uleb128 0x10
	.long	.LASF253
	.sleb128 46
	.uleb128 0x18
	.string	"SET"
	.sleb128 47
	.uleb128 0x18
	.string	"USE"
	.sleb128 48
	.uleb128 0x10
	.long	.LASF254
	.sleb128 49
	.uleb128 0x10
	.long	.LASF255
	.sleb128 50
	.uleb128 0x10
	.long	.LASF256
	.sleb128 51
	.uleb128 0x10
	.long	.LASF257
	.sleb128 52
	.uleb128 0x10
	.long	.LASF258
	.sleb128 53
	.uleb128 0x10
	.long	.LASF259
	.sleb128 54
	.uleb128 0x10
	.long	.LASF260
	.sleb128 55
	.uleb128 0x10
	.long	.LASF261
	.sleb128 56
	.uleb128 0x10
	.long	.LASF262
	.sleb128 57
	.uleb128 0x10
	.long	.LASF263
	.sleb128 58
	.uleb128 0x18
	.string	"PC"
	.sleb128 59
	.uleb128 0x10
	.long	.LASF264
	.sleb128 60
	.uleb128 0x18
	.string	"REG"
	.sleb128 61
	.uleb128 0x10
	.long	.LASF265
	.sleb128 62
	.uleb128 0x10
	.long	.LASF266
	.sleb128 63
	.uleb128 0x10
	.long	.LASF267
	.sleb128 64
	.uleb128 0x10
	.long	.LASF268
	.sleb128 65
	.uleb128 0x18
	.string	"MEM"
	.sleb128 66
	.uleb128 0x10
	.long	.LASF269
	.sleb128 67
	.uleb128 0x10
	.long	.LASF270
	.sleb128 68
	.uleb128 0x18
	.string	"CC0"
	.sleb128 69
	.uleb128 0x10
	.long	.LASF271
	.sleb128 70
	.uleb128 0x10
	.long	.LASF272
	.sleb128 71
	.uleb128 0x10
	.long	.LASF273
	.sleb128 72
	.uleb128 0x10
	.long	.LASF274
	.sleb128 73
	.uleb128 0x10
	.long	.LASF275
	.sleb128 74
	.uleb128 0x10
	.long	.LASF276
	.sleb128 75
	.uleb128 0x10
	.long	.LASF277
	.sleb128 76
	.uleb128 0x18
	.string	"NEG"
	.sleb128 77
	.uleb128 0x10
	.long	.LASF278
	.sleb128 78
	.uleb128 0x18
	.string	"DIV"
	.sleb128 79
	.uleb128 0x18
	.string	"MOD"
	.sleb128 80
	.uleb128 0x10
	.long	.LASF279
	.sleb128 81
	.uleb128 0x10
	.long	.LASF280
	.sleb128 82
	.uleb128 0x18
	.string	"AND"
	.sleb128 83
	.uleb128 0x18
	.string	"IOR"
	.sleb128 84
	.uleb128 0x18
	.string	"XOR"
	.sleb128 85
	.uleb128 0x18
	.string	"NOT"
	.sleb128 86
	.uleb128 0x10
	.long	.LASF281
	.sleb128 87
	.uleb128 0x10
	.long	.LASF282
	.sleb128 88
	.uleb128 0x10
	.long	.LASF283
	.sleb128 89
	.uleb128 0x10
	.long	.LASF284
	.sleb128 90
	.uleb128 0x10
	.long	.LASF285
	.sleb128 91
	.uleb128 0x10
	.long	.LASF286
	.sleb128 92
	.uleb128 0x10
	.long	.LASF287
	.sleb128 93
	.uleb128 0x10
	.long	.LASF288
	.sleb128 94
	.uleb128 0x10
	.long	.LASF289
	.sleb128 95
	.uleb128 0x10
	.long	.LASF290
	.sleb128 96
	.uleb128 0x10
	.long	.LASF291
	.sleb128 97
	.uleb128 0x10
	.long	.LASF292
	.sleb128 98
	.uleb128 0x10
	.long	.LASF293
	.sleb128 99
	.uleb128 0x10
	.long	.LASF294
	.sleb128 100
	.uleb128 0x10
	.long	.LASF295
	.sleb128 101
	.uleb128 0x18
	.string	"NE"
	.sleb128 102
	.uleb128 0x18
	.string	"EQ"
	.sleb128 103
	.uleb128 0x18
	.string	"GE"
	.sleb128 104
	.uleb128 0x18
	.string	"GT"
	.sleb128 105
	.uleb128 0x18
	.string	"LE"
	.sleb128 106
	.uleb128 0x18
	.string	"LT"
	.sleb128 107
	.uleb128 0x18
	.string	"GEU"
	.sleb128 108
	.uleb128 0x18
	.string	"GTU"
	.sleb128 109
	.uleb128 0x18
	.string	"LEU"
	.sleb128 110
	.uleb128 0x18
	.string	"LTU"
	.sleb128 111
	.uleb128 0x10
	.long	.LASF296
	.sleb128 112
	.uleb128 0x10
	.long	.LASF297
	.sleb128 113
	.uleb128 0x10
	.long	.LASF298
	.sleb128 114
	.uleb128 0x10
	.long	.LASF299
	.sleb128 115
	.uleb128 0x10
	.long	.LASF300
	.sleb128 116
	.uleb128 0x10
	.long	.LASF301
	.sleb128 117
	.uleb128 0x10
	.long	.LASF302
	.sleb128 118
	.uleb128 0x10
	.long	.LASF303
	.sleb128 119
	.uleb128 0x10
	.long	.LASF304
	.sleb128 120
	.uleb128 0x10
	.long	.LASF305
	.sleb128 121
	.uleb128 0x10
	.long	.LASF306
	.sleb128 122
	.uleb128 0x10
	.long	.LASF307
	.sleb128 123
	.uleb128 0x10
	.long	.LASF308
	.sleb128 124
	.uleb128 0x10
	.long	.LASF309
	.sleb128 125
	.uleb128 0x18
	.string	"FIX"
	.sleb128 126
	.uleb128 0x10
	.long	.LASF310
	.sleb128 127
	.uleb128 0x10
	.long	.LASF311
	.sleb128 128
	.uleb128 0x18
	.string	"ABS"
	.sleb128 129
	.uleb128 0x10
	.long	.LASF312
	.sleb128 130
	.uleb128 0x18
	.string	"FFS"
	.sleb128 131
	.uleb128 0x10
	.long	.LASF313
	.sleb128 132
	.uleb128 0x10
	.long	.LASF314
	.sleb128 133
	.uleb128 0x10
	.long	.LASF315
	.sleb128 134
	.uleb128 0x10
	.long	.LASF316
	.sleb128 135
	.uleb128 0x10
	.long	.LASF317
	.sleb128 136
	.uleb128 0x10
	.long	.LASF318
	.sleb128 137
	.uleb128 0x10
	.long	.LASF319
	.sleb128 138
	.uleb128 0x10
	.long	.LASF320
	.sleb128 139
	.uleb128 0x10
	.long	.LASF321
	.sleb128 140
	.uleb128 0x10
	.long	.LASF322
	.sleb128 141
	.uleb128 0x10
	.long	.LASF323
	.sleb128 142
	.uleb128 0x10
	.long	.LASF324
	.sleb128 143
	.uleb128 0x10
	.long	.LASF325
	.sleb128 144
	.uleb128 0x10
	.long	.LASF326
	.sleb128 145
	.uleb128 0x10
	.long	.LASF327
	.sleb128 146
	.uleb128 0x10
	.long	.LASF328
	.sleb128 147
	.uleb128 0x10
	.long	.LASF329
	.sleb128 148
	.uleb128 0x10
	.long	.LASF330
	.sleb128 149
	.uleb128 0x10
	.long	.LASF331
	.sleb128 150
	.uleb128 0x10
	.long	.LASF332
	.sleb128 151
	.uleb128 0x18
	.string	"PHI"
	.sleb128 152
	.uleb128 0x10
	.long	.LASF333
	.sleb128 153
	.byte	0
	.uleb128 0x19
	.byte	0x4
	.byte	0x2
	.byte	0x44
	.long	0xcee
	.uleb128 0x5
	.long	.LASF334
	.byte	0x2
	.byte	0x47
	.long	0x436
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0
	.uleb128 0x5
	.long	.LASF335
	.byte	0x2
	.byte	0x49
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0
	.uleb128 0x5
	.long	.LASF336
	.byte	0x2
	.byte	0x4a
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0
	.uleb128 0x5
	.long	.LASF337
	.byte	0x2
	.byte	0x4c
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0
	.uleb128 0x5
	.long	.LASF338
	.byte	0x2
	.byte	0x4e
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0
	.uleb128 0x5
	.long	.LASF339
	.byte	0x2
	.byte	0x50
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0
	.uleb128 0x5
	.long	.LASF340
	.byte	0x2
	.byte	0x53
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0
	.uleb128 0x5
	.long	.LASF341
	.byte	0x2
	.byte	0x55
	.long	0x436
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.long	.LASF342
	.byte	0x2
	.byte	0x56
	.long	0xc6d
	.uleb128 0x19
	.byte	0x28
	.byte	0x2
	.byte	0x5c
	.long	0xd3e
	.uleb128 0x8
	.long	.LASF343
	.byte	0x2
	.byte	0x5e
	.long	0x43f
	.byte	0
	.uleb128 0x8
	.long	.LASF344
	.byte	0x2
	.byte	0x5f
	.long	0x123
	.byte	0x8
	.uleb128 0x8
	.long	.LASF345
	.byte	0x2
	.byte	0x60
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF346
	.byte	0x2
	.byte	0x61
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF347
	.byte	0x2
	.byte	0x62
	.long	0x436
	.byte	0x20
	.byte	0
	.uleb128 0x7
	.long	.LASF348
	.byte	0x2
	.byte	0x63
	.long	0xcf9
	.uleb128 0x1a
	.long	.LASF584
	.byte	0x8
	.byte	0x2
	.byte	0x67
	.long	0xde4
	.uleb128 0x1b
	.long	.LASF349
	.byte	0x2
	.byte	0x69
	.long	0x43f
	.uleb128 0x1b
	.long	.LASF350
	.byte	0x2
	.byte	0x6a
	.long	0x283
	.uleb128 0x1b
	.long	.LASF351
	.byte	0x2
	.byte	0x6b
	.long	0x436
	.uleb128 0x1b
	.long	.LASF352
	.byte	0x2
	.byte	0x6c
	.long	0x68d
	.uleb128 0x1c
	.string	"rtx"
	.byte	0x2
	.byte	0x6d
	.long	0x2d
	.uleb128 0x1b
	.long	.LASF10
	.byte	0x2
	.byte	0x6e
	.long	0xed
	.uleb128 0x1b
	.long	.LASF353
	.byte	0x2
	.byte	0x6f
	.long	0x6b3
	.uleb128 0x1b
	.long	.LASF354
	.byte	0x2
	.byte	0x70
	.long	0xcee
	.uleb128 0x1b
	.long	.LASF355
	.byte	0x2
	.byte	0x71
	.long	0xe1f
	.uleb128 0x1b
	.long	.LASF356
	.byte	0x2
	.byte	0x72
	.long	0xe56
	.uleb128 0x1b
	.long	.LASF357
	.byte	0x2
	.byte	0x73
	.long	0x123
	.uleb128 0x1c
	.string	"bb"
	.byte	0x2
	.byte	0x74
	.long	0xf29
	.uleb128 0x1b
	.long	.LASF358
	.byte	0x2
	.byte	0x75
	.long	0xf2f
	.byte	0
	.uleb128 0x4
	.long	.LASF359
	.byte	0x20
	.byte	0xa
	.byte	0x17
	.long	0xe1f
	.uleb128 0x8
	.long	.LASF360
	.byte	0xa
	.byte	0x1a
	.long	0x436
	.byte	0
	.uleb128 0x6
	.string	"u"
	.byte	0xa
	.byte	0x21
	.long	0x27ca
	.byte	0x8
	.uleb128 0x8
	.long	.LASF361
	.byte	0xa
	.byte	0x25
	.long	0x281a
	.byte	0x10
	.uleb128 0x8
	.long	.LASF362
	.byte	0xa
	.byte	0x28
	.long	0x1b73
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xde4
	.uleb128 0x4
	.long	.LASF363
	.byte	0x18
	.byte	0xb
	.byte	0x34
	.long	0xe56
	.uleb128 0x8
	.long	.LASF364
	.byte	0xb
	.byte	0x35
	.long	0x183d
	.byte	0
	.uleb128 0x8
	.long	.LASF365
	.byte	0xb
	.byte	0x36
	.long	0x183d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF366
	.byte	0xb
	.byte	0x37
	.long	0x436
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xe25
	.uleb128 0x4
	.long	.LASF367
	.byte	0x70
	.byte	0xc
	.byte	0xae
	.long	0xf29
	.uleb128 0x8
	.long	.LASF368
	.byte	0xc
	.byte	0xb0
	.long	0x2d
	.byte	0
	.uleb128 0x6
	.string	"end"
	.byte	0xc
	.byte	0xb0
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF369
	.byte	0xc
	.byte	0xb3
	.long	0x123
	.byte	0x10
	.uleb128 0x8
	.long	.LASF370
	.byte	0xc
	.byte	0xb4
	.long	0x123
	.byte	0x18
	.uleb128 0x8
	.long	.LASF371
	.byte	0xc
	.byte	0xb7
	.long	0x1ca3
	.byte	0x20
	.uleb128 0x8
	.long	.LASF372
	.byte	0xc
	.byte	0xb7
	.long	0x1ca3
	.byte	0x28
	.uleb128 0x8
	.long	.LASF373
	.byte	0xc
	.byte	0xbc
	.long	0x1c0e
	.byte	0x30
	.uleb128 0x8
	.long	.LASF374
	.byte	0xc
	.byte	0xc0
	.long	0x1c0e
	.byte	0x38
	.uleb128 0x8
	.long	.LASF375
	.byte	0xc
	.byte	0xc6
	.long	0x1c0e
	.byte	0x40
	.uleb128 0x8
	.long	.LASF376
	.byte	0xc
	.byte	0xc8
	.long	0x1c0e
	.byte	0x48
	.uleb128 0x6
	.string	"aux"
	.byte	0xc
	.byte	0xcb
	.long	0x43d
	.byte	0x50
	.uleb128 0x8
	.long	.LASF377
	.byte	0xc
	.byte	0xce
	.long	0x283
	.byte	0x58
	.uleb128 0x8
	.long	.LASF378
	.byte	0xc
	.byte	0xd1
	.long	0x283
	.byte	0x5c
	.uleb128 0x8
	.long	.LASF379
	.byte	0xc
	.byte	0xd4
	.long	0x1c19
	.byte	0x60
	.uleb128 0x8
	.long	.LASF380
	.byte	0xc
	.byte	0xd7
	.long	0x283
	.byte	0x68
	.uleb128 0x8
	.long	.LASF381
	.byte	0xc
	.byte	0xda
	.long	0x283
	.byte	0x6c
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xe5c
	.uleb128 0x3
	.byte	0x8
	.long	0xd3e
	.uleb128 0x7
	.long	.LASF382
	.byte	0x2
	.byte	0x76
	.long	0xd49
	.uleb128 0xc
	.long	0xf35
	.long	0xf50
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x2d
	.long	0xf60
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xf
	.long	.LASF383
	.byte	0x4
	.byte	0x2
	.value	0x1c3
	.long	0x1022
	.uleb128 0x10
	.long	.LASF384
	.sleb128 1
	.uleb128 0x10
	.long	.LASF385
	.sleb128 2
	.uleb128 0x10
	.long	.LASF386
	.sleb128 3
	.uleb128 0x10
	.long	.LASF387
	.sleb128 4
	.uleb128 0x10
	.long	.LASF388
	.sleb128 5
	.uleb128 0x10
	.long	.LASF389
	.sleb128 6
	.uleb128 0x10
	.long	.LASF390
	.sleb128 7
	.uleb128 0x10
	.long	.LASF391
	.sleb128 8
	.uleb128 0x10
	.long	.LASF392
	.sleb128 9
	.uleb128 0x10
	.long	.LASF393
	.sleb128 10
	.uleb128 0x10
	.long	.LASF394
	.sleb128 11
	.uleb128 0x10
	.long	.LASF395
	.sleb128 12
	.uleb128 0x10
	.long	.LASF396
	.sleb128 13
	.uleb128 0x10
	.long	.LASF397
	.sleb128 14
	.uleb128 0x10
	.long	.LASF398
	.sleb128 15
	.uleb128 0x10
	.long	.LASF399
	.sleb128 16
	.uleb128 0x10
	.long	.LASF400
	.sleb128 17
	.uleb128 0x10
	.long	.LASF401
	.sleb128 18
	.uleb128 0x10
	.long	.LASF402
	.sleb128 19
	.uleb128 0x10
	.long	.LASF403
	.sleb128 20
	.uleb128 0x10
	.long	.LASF404
	.sleb128 21
	.uleb128 0x10
	.long	.LASF405
	.sleb128 22
	.uleb128 0x10
	.long	.LASF406
	.sleb128 23
	.uleb128 0x10
	.long	.LASF407
	.sleb128 24
	.uleb128 0x10
	.long	.LASF408
	.sleb128 25
	.uleb128 0x10
	.long	.LASF409
	.sleb128 26
	.uleb128 0x10
	.long	.LASF410
	.sleb128 27
	.uleb128 0x10
	.long	.LASF411
	.sleb128 28
	.uleb128 0x10
	.long	.LASF412
	.sleb128 29
	.uleb128 0x10
	.long	.LASF413
	.sleb128 30
	.byte	0
	.uleb128 0xf
	.long	.LASF414
	.byte	0x4
	.byte	0x2
	.value	0x297
	.long	0x10d1
	.uleb128 0x10
	.long	.LASF415
	.sleb128 -100
	.uleb128 0x10
	.long	.LASF416
	.sleb128 -99
	.uleb128 0x10
	.long	.LASF417
	.sleb128 -98
	.uleb128 0x10
	.long	.LASF418
	.sleb128 -97
	.uleb128 0x10
	.long	.LASF419
	.sleb128 -96
	.uleb128 0x10
	.long	.LASF420
	.sleb128 -95
	.uleb128 0x10
	.long	.LASF421
	.sleb128 -94
	.uleb128 0x10
	.long	.LASF422
	.sleb128 -93
	.uleb128 0x10
	.long	.LASF423
	.sleb128 -92
	.uleb128 0x10
	.long	.LASF424
	.sleb128 -91
	.uleb128 0x10
	.long	.LASF425
	.sleb128 -90
	.uleb128 0x10
	.long	.LASF426
	.sleb128 -89
	.uleb128 0x10
	.long	.LASF427
	.sleb128 -88
	.uleb128 0x10
	.long	.LASF428
	.sleb128 -87
	.uleb128 0x10
	.long	.LASF429
	.sleb128 -86
	.uleb128 0x10
	.long	.LASF430
	.sleb128 -85
	.uleb128 0x10
	.long	.LASF431
	.sleb128 -84
	.uleb128 0x10
	.long	.LASF432
	.sleb128 -83
	.uleb128 0x10
	.long	.LASF433
	.sleb128 -82
	.uleb128 0x10
	.long	.LASF434
	.sleb128 -81
	.uleb128 0x10
	.long	.LASF435
	.sleb128 -80
	.uleb128 0x10
	.long	.LASF436
	.sleb128 -79
	.uleb128 0x10
	.long	.LASF437
	.sleb128 -78
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2d
	.uleb128 0xf
	.long	.LASF438
	.byte	0x4
	.byte	0x2
	.value	0x630
	.long	0x112d
	.uleb128 0x10
	.long	.LASF439
	.sleb128 0
	.uleb128 0x10
	.long	.LASF440
	.sleb128 1
	.uleb128 0x10
	.long	.LASF441
	.sleb128 2
	.uleb128 0x10
	.long	.LASF442
	.sleb128 3
	.uleb128 0x10
	.long	.LASF443
	.sleb128 4
	.uleb128 0x10
	.long	.LASF444
	.sleb128 5
	.uleb128 0x10
	.long	.LASF445
	.sleb128 6
	.uleb128 0x10
	.long	.LASF446
	.sleb128 7
	.uleb128 0x10
	.long	.LASF447
	.sleb128 8
	.uleb128 0x10
	.long	.LASF448
	.sleb128 9
	.uleb128 0x10
	.long	.LASF449
	.sleb128 10
	.uleb128 0x10
	.long	.LASF450
	.sleb128 11
	.byte	0
	.uleb128 0x4
	.long	.LASF451
	.byte	0x18
	.byte	0xd
	.byte	0x16
	.long	0x116a
	.uleb128 0x8
	.long	.LASF452
	.byte	0xd
	.byte	0x18
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF453
	.byte	0xd
	.byte	0x19
	.long	0x6b3
	.byte	0x8
	.uleb128 0x8
	.long	.LASF454
	.byte	0xd
	.byte	0x1a
	.long	0x283
	.byte	0xc
	.uleb128 0x8
	.long	.LASF455
	.byte	0xd
	.byte	0x1b
	.long	0x116a
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x112d
	.uleb128 0x4
	.long	.LASF456
	.byte	0x20
	.byte	0xd
	.byte	0x23
	.long	0x11ad
	.uleb128 0x8
	.long	.LASF364
	.byte	0xd
	.byte	0x26
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF457
	.byte	0xd
	.byte	0x26
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF458
	.byte	0xd
	.byte	0x27
	.long	0x123
	.byte	0x10
	.uleb128 0x8
	.long	.LASF455
	.byte	0xd
	.byte	0x28
	.long	0x11ad
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1170
	.uleb128 0x4
	.long	.LASF459
	.byte	0x58
	.byte	0xd
	.byte	0x35
	.long	0x125c
	.uleb128 0x8
	.long	.LASF460
	.byte	0xd
	.byte	0x39
	.long	0x283
	.byte	0
	.uleb128 0x8
	.long	.LASF461
	.byte	0xd
	.byte	0x3c
	.long	0x283
	.byte	0x4
	.uleb128 0x8
	.long	.LASF462
	.byte	0xd
	.byte	0x43
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF463
	.byte	0xd
	.byte	0x44
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF458
	.byte	0xd
	.byte	0x49
	.long	0x123
	.byte	0x18
	.uleb128 0x8
	.long	.LASF456
	.byte	0xd
	.byte	0x4f
	.long	0x11ad
	.byte	0x20
	.uleb128 0x8
	.long	.LASF464
	.byte	0xd
	.byte	0x53
	.long	0x283
	.byte	0x28
	.uleb128 0x8
	.long	.LASF465
	.byte	0xd
	.byte	0x57
	.long	0x283
	.byte	0x2c
	.uleb128 0x8
	.long	.LASF466
	.byte	0xd
	.byte	0x58
	.long	0x68d
	.byte	0x30
	.uleb128 0x8
	.long	.LASF467
	.byte	0xd
	.byte	0x5e
	.long	0x283
	.byte	0x38
	.uleb128 0x8
	.long	.LASF468
	.byte	0xd
	.byte	0x63
	.long	0x125c
	.byte	0x40
	.uleb128 0x8
	.long	.LASF469
	.byte	0xd
	.byte	0x67
	.long	0x1262
	.byte	0x48
	.uleb128 0x8
	.long	.LASF470
	.byte	0xd
	.byte	0x6b
	.long	0x10d1
	.byte	0x50
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x458
	.uleb128 0x3
	.byte	0x8
	.long	0x123
	.uleb128 0x4
	.long	.LASF471
	.byte	0x30
	.byte	0xd
	.byte	0x77
	.long	0x12c9
	.uleb128 0x8
	.long	.LASF472
	.byte	0xd
	.byte	0x7b
	.long	0x283
	.byte	0
	.uleb128 0x8
	.long	.LASF473
	.byte	0xd
	.byte	0x8c
	.long	0x283
	.byte	0x4
	.uleb128 0x8
	.long	.LASF474
	.byte	0xd
	.byte	0x92
	.long	0x283
	.byte	0x8
	.uleb128 0x8
	.long	.LASF475
	.byte	0xd
	.byte	0x97
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF476
	.byte	0xd
	.byte	0x9a
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF477
	.byte	0xd
	.byte	0x9d
	.long	0x2d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF478
	.byte	0xd
	.byte	0xa0
	.long	0x2d
	.byte	0x28
	.byte	0
	.uleb128 0x1d
	.long	.LASF479
	.value	0x1b0
	.byte	0xd
	.byte	0xae
	.long	0x1749
	.uleb128 0x6
	.string	"eh"
	.byte	0xd
	.byte	0xb0
	.long	0x174e
	.byte	0
	.uleb128 0x8
	.long	.LASF480
	.byte	0xd
	.byte	0xb1
	.long	0x1759
	.byte	0x8
	.uleb128 0x8
	.long	.LASF344
	.byte	0xd
	.byte	0xb2
	.long	0x175f
	.byte	0x10
	.uleb128 0x8
	.long	.LASF481
	.byte	0xd
	.byte	0xb3
	.long	0x1765
	.byte	0x18
	.uleb128 0x8
	.long	.LASF482
	.byte	0xd
	.byte	0xb4
	.long	0x1770
	.byte	0x20
	.uleb128 0x8
	.long	.LASF483
	.byte	0xd
	.byte	0xb9
	.long	0x68d
	.byte	0x28
	.uleb128 0x8
	.long	.LASF484
	.byte	0xd
	.byte	0xbc
	.long	0x123
	.byte	0x30
	.uleb128 0x8
	.long	.LASF485
	.byte	0xd
	.byte	0xbf
	.long	0x1776
	.byte	0x38
	.uleb128 0x8
	.long	.LASF486
	.byte	0xd
	.byte	0xc4
	.long	0x283
	.byte	0x40
	.uleb128 0x8
	.long	.LASF487
	.byte	0xd
	.byte	0xc9
	.long	0x283
	.byte	0x44
	.uleb128 0x8
	.long	.LASF488
	.byte	0xd
	.byte	0xce
	.long	0x283
	.byte	0x48
	.uleb128 0x8
	.long	.LASF489
	.byte	0xd
	.byte	0xd2
	.long	0x283
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF490
	.byte	0xd
	.byte	0xd6
	.long	0x2d
	.byte	0x50
	.uleb128 0x8
	.long	.LASF491
	.byte	0xd
	.byte	0xda
	.long	0x42a
	.byte	0x58
	.uleb128 0x8
	.long	.LASF492
	.byte	0xd
	.byte	0xe0
	.long	0x2d
	.byte	0x78
	.uleb128 0x8
	.long	.LASF493
	.byte	0xd
	.byte	0xe3
	.long	0x2d
	.byte	0x80
	.uleb128 0x8
	.long	.LASF494
	.byte	0xd
	.byte	0xe7
	.long	0x68d
	.byte	0x88
	.uleb128 0x8
	.long	.LASF495
	.byte	0xd
	.byte	0xeb
	.long	0x1781
	.byte	0x90
	.uleb128 0x8
	.long	.LASF496
	.byte	0xd
	.byte	0xee
	.long	0x283
	.byte	0x98
	.uleb128 0x8
	.long	.LASF497
	.byte	0xd
	.byte	0xf3
	.long	0x123
	.byte	0xa0
	.uleb128 0x8
	.long	.LASF498
	.byte	0xd
	.byte	0xf9
	.long	0x2d
	.byte	0xa8
	.uleb128 0x8
	.long	.LASF499
	.byte	0xd
	.byte	0xfd
	.long	0x2d
	.byte	0xb0
	.uleb128 0x12
	.long	.LASF500
	.byte	0xd
	.value	0x102
	.long	0x2d
	.byte	0xb8
	.uleb128 0x12
	.long	.LASF501
	.byte	0xd
	.value	0x108
	.long	0x2d
	.byte	0xc0
	.uleb128 0x12
	.long	.LASF502
	.byte	0xd
	.value	0x10d
	.long	0x2d
	.byte	0xc8
	.uleb128 0x12
	.long	.LASF503
	.byte	0xd
	.value	0x111
	.long	0x2d
	.byte	0xd0
	.uleb128 0x12
	.long	.LASF504
	.byte	0xd
	.value	0x115
	.long	0x2d
	.byte	0xd8
	.uleb128 0x12
	.long	.LASF505
	.byte	0xd
	.value	0x118
	.long	0x123
	.byte	0xe0
	.uleb128 0x12
	.long	.LASF506
	.byte	0xd
	.value	0x11c
	.long	0x2d
	.byte	0xe8
	.uleb128 0x12
	.long	.LASF507
	.byte	0xd
	.value	0x11f
	.long	0x2d
	.byte	0xf0
	.uleb128 0x12
	.long	.LASF508
	.byte	0xd
	.value	0x125
	.long	0x2d
	.byte	0xf8
	.uleb128 0x1e
	.long	.LASF509
	.byte	0xd
	.value	0x12a
	.long	0x2d
	.value	0x100
	.uleb128 0x1e
	.long	.LASF510
	.byte	0xd
	.value	0x12f
	.long	0x43f
	.value	0x108
	.uleb128 0x1e
	.long	.LASF511
	.byte	0xd
	.value	0x134
	.long	0x123
	.value	0x110
	.uleb128 0x1e
	.long	.LASF512
	.byte	0xd
	.value	0x13d
	.long	0x123
	.value	0x118
	.uleb128 0x1e
	.long	.LASF513
	.byte	0xd
	.value	0x140
	.long	0x2d
	.value	0x120
	.uleb128 0x1e
	.long	.LASF514
	.byte	0xd
	.value	0x144
	.long	0x2d
	.value	0x128
	.uleb128 0x1e
	.long	.LASF515
	.byte	0xd
	.value	0x148
	.long	0x436
	.value	0x130
	.uleb128 0x1e
	.long	.LASF516
	.byte	0xd
	.value	0x14e
	.long	0x10d1
	.value	0x138
	.uleb128 0x1e
	.long	.LASF517
	.byte	0xd
	.value	0x151
	.long	0x178c
	.value	0x140
	.uleb128 0x1e
	.long	.LASF518
	.byte	0xd
	.value	0x154
	.long	0x283
	.value	0x148
	.uleb128 0x1e
	.long	.LASF519
	.byte	0xd
	.value	0x157
	.long	0x283
	.value	0x14c
	.uleb128 0x1e
	.long	.LASF520
	.byte	0xd
	.value	0x15d
	.long	0x283
	.value	0x150
	.uleb128 0x1e
	.long	.LASF521
	.byte	0xd
	.value	0x161
	.long	0x116a
	.value	0x158
	.uleb128 0x1e
	.long	.LASF522
	.byte	0xd
	.value	0x164
	.long	0x283
	.value	0x160
	.uleb128 0x1e
	.long	.LASF523
	.byte	0xd
	.value	0x165
	.long	0x283
	.value	0x164
	.uleb128 0x1e
	.long	.LASF524
	.byte	0xd
	.value	0x167
	.long	0x43d
	.value	0x168
	.uleb128 0x1e
	.long	.LASF525
	.byte	0xd
	.value	0x168
	.long	0x123
	.value	0x170
	.uleb128 0x1e
	.long	.LASF526
	.byte	0xd
	.value	0x16b
	.long	0x2d
	.value	0x178
	.uleb128 0x1e
	.long	.LASF527
	.byte	0xd
	.value	0x16d
	.long	0x283
	.value	0x180
	.uleb128 0x1e
	.long	.LASF528
	.byte	0xd
	.value	0x170
	.long	0x283
	.value	0x184
	.uleb128 0x1e
	.long	.LASF529
	.byte	0xd
	.value	0x175
	.long	0x1797
	.value	0x188
	.uleb128 0x1e
	.long	.LASF530
	.byte	0xd
	.value	0x177
	.long	0x283
	.value	0x190
	.uleb128 0x1e
	.long	.LASF531
	.byte	0xd
	.value	0x179
	.long	0x283
	.value	0x194
	.uleb128 0x1e
	.long	.LASF532
	.byte	0xd
	.value	0x17c
	.long	0x17a2
	.value	0x198
	.uleb128 0x1e
	.long	.LASF533
	.byte	0xd
	.value	0x182
	.long	0x2d
	.value	0x1a0
	.uleb128 0x1f
	.long	.LASF534
	.byte	0xd
	.value	0x188
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF535
	.byte	0xd
	.value	0x18c
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF536
	.byte	0xd
	.value	0x18f
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF537
	.byte	0xd
	.value	0x192
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF538
	.byte	0xd
	.value	0x195
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF539
	.byte	0xd
	.value	0x198
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF540
	.byte	0xd
	.value	0x19c
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF541
	.byte	0xd
	.value	0x19f
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF542
	.byte	0xd
	.value	0x1a3
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF543
	.byte	0xd
	.value	0x1a7
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF544
	.byte	0xd
	.value	0x1aa
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF545
	.byte	0xd
	.value	0x1ad
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF546
	.byte	0xd
	.value	0x1b2
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF547
	.byte	0xd
	.value	0x1b6
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF548
	.byte	0xd
	.value	0x1b9
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF549
	.byte	0xd
	.value	0x1bd
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF550
	.byte	0xd
	.value	0x1c1
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF551
	.byte	0xd
	.value	0x1c5
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF552
	.byte	0xd
	.value	0x1cb
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF553
	.byte	0xd
	.value	0x1d4
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF554
	.byte	0xd
	.value	0x1d7
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF555
	.byte	0xd
	.value	0x1da
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF556
	.byte	0xd
	.value	0x1dd
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.value	0x1a8
	.uleb128 0x1f
	.long	.LASF557
	.byte	0xd
	.value	0x1e0
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.value	0x1a8
	.byte	0
	.uleb128 0x20
	.long	.LASF558
	.uleb128 0x3
	.byte	0x8
	.long	0x1749
	.uleb128 0x20
	.long	.LASF559
	.uleb128 0x3
	.byte	0x8
	.long	0x1754
	.uleb128 0x3
	.byte	0x8
	.long	0x1268
	.uleb128 0x3
	.byte	0x8
	.long	0x11b3
	.uleb128 0x20
	.long	.LASF560
	.uleb128 0x3
	.byte	0x8
	.long	0x176b
	.uleb128 0x3
	.byte	0x8
	.long	0x12c9
	.uleb128 0x20
	.long	.LASF561
	.uleb128 0x3
	.byte	0x8
	.long	0x177c
	.uleb128 0x20
	.long	.LASF562
	.uleb128 0x3
	.byte	0x8
	.long	0x1787
	.uleb128 0x20
	.long	.LASF563
	.uleb128 0x3
	.byte	0x8
	.long	0x1792
	.uleb128 0x20
	.long	.LASF564
	.uleb128 0x3
	.byte	0x8
	.long	0x179d
	.uleb128 0xf
	.long	.LASF565
	.byte	0x4
	.byte	0xe
	.value	0x100
	.long	0x17d4
	.uleb128 0x10
	.long	.LASF566
	.sleb128 0
	.uleb128 0x10
	.long	.LASF567
	.sleb128 1
	.uleb128 0x10
	.long	.LASF568
	.sleb128 2
	.uleb128 0x10
	.long	.LASF569
	.sleb128 3
	.uleb128 0x10
	.long	.LASF570
	.sleb128 4
	.byte	0
	.uleb128 0x7
	.long	.LASF571
	.byte	0xf
	.byte	0x29
	.long	0x451
	.uleb128 0x4
	.long	.LASF572
	.byte	0x28
	.byte	0xb
	.byte	0x2b
	.long	0x181c
	.uleb128 0x8
	.long	.LASF455
	.byte	0xb
	.byte	0x2d
	.long	0x181c
	.byte	0
	.uleb128 0x8
	.long	.LASF573
	.byte	0xb
	.byte	0x2e
	.long	0x181c
	.byte	0x8
	.uleb128 0x8
	.long	.LASF366
	.byte	0xb
	.byte	0x2f
	.long	0x436
	.byte	0x10
	.uleb128 0x8
	.long	.LASF574
	.byte	0xb
	.byte	0x30
	.long	0x1822
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x17df
	.uleb128 0xc
	.long	0x451
	.long	0x1832
	.uleb128 0xd
	.long	0x29a
	.byte	0x1
	.byte	0
	.uleb128 0x7
	.long	.LASF575
	.byte	0xb
	.byte	0x31
	.long	0x17df
	.uleb128 0x3
	.byte	0x8
	.long	0x1832
	.uleb128 0x7
	.long	.LASF576
	.byte	0xb
	.byte	0x39
	.long	0xe25
	.uleb128 0x7
	.long	.LASF577
	.byte	0xb
	.byte	0x39
	.long	0xe56
	.uleb128 0x4
	.long	.LASF578
	.byte	0x18
	.byte	0x10
	.byte	0x1f
	.long	0x1896
	.uleb128 0x8
	.long	.LASF579
	.byte	0x10
	.byte	0x21
	.long	0x436
	.byte	0
	.uleb128 0x8
	.long	.LASF346
	.byte	0x10
	.byte	0x22
	.long	0x436
	.byte	0x4
	.uleb128 0x8
	.long	.LASF580
	.byte	0x10
	.byte	0x23
	.long	0x436
	.byte	0x8
	.uleb128 0x8
	.long	.LASF581
	.byte	0x10
	.byte	0x24
	.long	0x1896
	.byte	0x10
	.byte	0
	.uleb128 0xc
	.long	0x451
	.long	0x18a6
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0x7
	.long	.LASF582
	.byte	0x10
	.byte	0x25
	.long	0x18b1
	.uleb128 0x3
	.byte	0x8
	.long	0x1859
	.uleb128 0x4
	.long	.LASF583
	.byte	0x10
	.byte	0x11
	.byte	0x24
	.long	0x18dc
	.uleb128 0x6
	.string	"rtx"
	.byte	0x11
	.byte	0x32
	.long	0x38
	.byte	0
	.uleb128 0x6
	.string	"age"
	.byte	0x11
	.byte	0x36
	.long	0x436
	.byte	0x8
	.byte	0
	.uleb128 0x1a
	.long	.LASF585
	.byte	0x10
	.byte	0x11
	.byte	0x3a
	.long	0x19c1
	.uleb128 0x1c
	.string	"c"
	.byte	0x11
	.byte	0x3b
	.long	0x667
	.uleb128 0x1c
	.string	"uc"
	.byte	0x11
	.byte	0x3c
	.long	0x19c1
	.uleb128 0x1c
	.string	"s"
	.byte	0x11
	.byte	0x3d
	.long	0x19d1
	.uleb128 0x1c
	.string	"us"
	.byte	0x11
	.byte	0x3e
	.long	0x19e1
	.uleb128 0x1c
	.string	"i"
	.byte	0x11
	.byte	0x3f
	.long	0x19f1
	.uleb128 0x1c
	.string	"u"
	.byte	0x11
	.byte	0x40
	.long	0x1a01
	.uleb128 0x1c
	.string	"l"
	.byte	0x11
	.byte	0x41
	.long	0x1a11
	.uleb128 0x1c
	.string	"ul"
	.byte	0x11
	.byte	0x42
	.long	0x1896
	.uleb128 0x1b
	.long	.LASF586
	.byte	0x11
	.byte	0x43
	.long	0x1a11
	.uleb128 0x1b
	.long	.LASF587
	.byte	0x11
	.byte	0x44
	.long	0x1896
	.uleb128 0x1b
	.long	.LASF588
	.byte	0x11
	.byte	0x45
	.long	0x1a21
	.uleb128 0x1b
	.long	.LASF589
	.byte	0x11
	.byte	0x46
	.long	0x1a31
	.uleb128 0x1c
	.string	"rtx"
	.byte	0x11
	.byte	0x47
	.long	0x1a41
	.uleb128 0x1b
	.long	.LASF10
	.byte	0x11
	.byte	0x48
	.long	0x1a51
	.uleb128 0x1b
	.long	.LASF15
	.byte	0x11
	.byte	0x49
	.long	0x1a61
	.uleb128 0x1b
	.long	.LASF577
	.byte	0x11
	.byte	0x4a
	.long	0x1a71
	.uleb128 0x1b
	.long	.LASF590
	.byte	0x11
	.byte	0x4b
	.long	0x1a81
	.uleb128 0x1c
	.string	"reg"
	.byte	0x11
	.byte	0x4c
	.long	0x1a9c
	.uleb128 0x1b
	.long	.LASF591
	.byte	0x11
	.byte	0x4d
	.long	0x1b43
	.uleb128 0x1c
	.string	"bb"
	.byte	0x11
	.byte	0x4e
	.long	0x1b53
	.uleb128 0x1c
	.string	"te"
	.byte	0x11
	.byte	0x4f
	.long	0x1b63
	.byte	0
	.uleb128 0xc
	.long	0x458
	.long	0x19d1
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x46d
	.long	0x19e1
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x45f
	.long	0x19f1
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x283
	.long	0x1a01
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x436
	.long	0x1a11
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x43f
	.long	0x1a21
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x43d
	.long	0x1a31
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x48a
	.long	0x1a41
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x38
	.long	0x1a51
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0xf8
	.long	0x1a61
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x12e
	.long	0x1a71
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0xe56
	.long	0x1a81
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x1a91
	.long	0x1a91
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1a97
	.uleb128 0x20
	.long	.LASF592
	.uleb128 0xc
	.long	0x1aac
	.long	0x1aac
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1ab2
	.uleb128 0x4
	.long	.LASF593
	.byte	0x2c
	.byte	0x12
	.byte	0x2d
	.long	0x1b43
	.uleb128 0x8
	.long	.LASF594
	.byte	0x12
	.byte	0x2f
	.long	0x283
	.byte	0
	.uleb128 0x8
	.long	.LASF595
	.byte	0x12
	.byte	0x30
	.long	0x283
	.byte	0x4
	.uleb128 0x8
	.long	.LASF596
	.byte	0x12
	.byte	0x31
	.long	0x283
	.byte	0x8
	.uleb128 0x8
	.long	.LASF597
	.byte	0x12
	.byte	0x34
	.long	0x283
	.byte	0xc
	.uleb128 0x8
	.long	.LASF598
	.byte	0x12
	.byte	0x37
	.long	0x283
	.byte	0x10
	.uleb128 0x8
	.long	.LASF599
	.byte	0x12
	.byte	0x38
	.long	0x283
	.byte	0x14
	.uleb128 0x8
	.long	.LASF600
	.byte	0x12
	.byte	0x39
	.long	0x283
	.byte	0x18
	.uleb128 0x8
	.long	.LASF601
	.byte	0x12
	.byte	0x3a
	.long	0x283
	.byte	0x1c
	.uleb128 0x8
	.long	.LASF602
	.byte	0x12
	.byte	0x3b
	.long	0x283
	.byte	0x20
	.uleb128 0x8
	.long	.LASF603
	.byte	0x12
	.byte	0x3c
	.long	0x283
	.byte	0x24
	.uleb128 0x8
	.long	.LASF604
	.byte	0x12
	.byte	0x3d
	.long	0x490
	.byte	0x28
	.byte	0
	.uleb128 0xc
	.long	0x18b7
	.long	0x1b53
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0xf29
	.long	0x1b63
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x1b73
	.long	0x1b73
	.uleb128 0xd
	.long	0x29a
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1b79
	.uleb128 0x4
	.long	.LASF605
	.byte	0x10
	.byte	0xa
	.byte	0x37
	.long	0x1b9e
	.uleb128 0x8
	.long	.LASF455
	.byte	0xa
	.byte	0x39
	.long	0x1b73
	.byte	0
	.uleb128 0x6
	.string	"elt"
	.byte	0xa
	.byte	0x3a
	.long	0x282b
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF606
	.byte	0x11
	.byte	0x50
	.long	0x18dc
	.uleb128 0x4
	.long	.LASF607
	.byte	0x30
	.byte	0x11
	.byte	0x53
	.long	0x1bf2
	.uleb128 0x8
	.long	.LASF608
	.byte	0x11
	.byte	0x54
	.long	0x446
	.byte	0
	.uleb128 0x8
	.long	.LASF609
	.byte	0x11
	.byte	0x55
	.long	0x446
	.byte	0x8
	.uleb128 0x8
	.long	.LASF610
	.byte	0x11
	.byte	0x57
	.long	0x446
	.byte	0x10
	.uleb128 0x8
	.long	.LASF483
	.byte	0x11
	.byte	0x58
	.long	0x68d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF611
	.byte	0x11
	.byte	0x59
	.long	0x1b9e
	.byte	0x20
	.byte	0
	.uleb128 0x7
	.long	.LASF612
	.byte	0x11
	.byte	0x5a
	.long	0x1bfd
	.uleb128 0x3
	.byte	0x8
	.long	0x1ba9
	.uleb128 0x7
	.long	.LASF613
	.byte	0xc
	.byte	0x1f
	.long	0x1843
	.uleb128 0x7
	.long	.LASF614
	.byte	0xc
	.byte	0x21
	.long	0x184e
	.uleb128 0x7
	.long	.LASF615
	.byte	0xc
	.byte	0x74
	.long	0x43f
	.uleb128 0x4
	.long	.LASF616
	.byte	0x40
	.byte	0xc
	.byte	0x77
	.long	0x1c9d
	.uleb128 0x8
	.long	.LASF617
	.byte	0xc
	.byte	0x79
	.long	0x1c9d
	.byte	0
	.uleb128 0x8
	.long	.LASF618
	.byte	0xc
	.byte	0x79
	.long	0x1c9d
	.byte	0x8
	.uleb128 0x6
	.string	"src"
	.byte	0xc
	.byte	0x7c
	.long	0xf29
	.byte	0x10
	.uleb128 0x8
	.long	.LASF619
	.byte	0xc
	.byte	0x7c
	.long	0xf29
	.byte	0x18
	.uleb128 0x8
	.long	.LASF620
	.byte	0xc
	.byte	0x7f
	.long	0x2d
	.byte	0x20
	.uleb128 0x6
	.string	"aux"
	.byte	0xc
	.byte	0x82
	.long	0x43d
	.byte	0x28
	.uleb128 0x8
	.long	.LASF381
	.byte	0xc
	.byte	0x84
	.long	0x283
	.byte	0x30
	.uleb128 0x8
	.long	.LASF621
	.byte	0xc
	.byte	0x85
	.long	0x283
	.byte	0x34
	.uleb128 0x8
	.long	.LASF379
	.byte	0xc
	.byte	0x86
	.long	0x1c19
	.byte	0x38
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1c24
	.uleb128 0x7
	.long	.LASF622
	.byte	0xc
	.byte	0x88
	.long	0x1c9d
	.uleb128 0x7
	.long	.LASF603
	.byte	0xc
	.byte	0xdb
	.long	0xf29
	.uleb128 0x11
	.long	.LASF623
	.byte	0xf8
	.byte	0xc
	.value	0x148
	.long	0x1e74
	.uleb128 0x21
	.string	"num"
	.byte	0xc
	.value	0x14b
	.long	0x283
	.byte	0
	.uleb128 0x12
	.long	.LASF624
	.byte	0xc
	.value	0x14e
	.long	0x1cae
	.byte	0x8
	.uleb128 0x12
	.long	.LASF625
	.byte	0xc
	.value	0x151
	.long	0x1cae
	.byte	0x10
	.uleb128 0x12
	.long	.LASF626
	.byte	0xc
	.value	0x154
	.long	0x1cae
	.byte	0x18
	.uleb128 0x12
	.long	.LASF627
	.byte	0xc
	.value	0x159
	.long	0x1e74
	.byte	0x20
	.uleb128 0x12
	.long	.LASF628
	.byte	0xc
	.value	0x15c
	.long	0x283
	.byte	0x28
	.uleb128 0x12
	.long	.LASF364
	.byte	0xc
	.value	0x160
	.long	0x1cae
	.byte	0x30
	.uleb128 0x12
	.long	.LASF457
	.byte	0xc
	.value	0x164
	.long	0x1cae
	.byte	0x38
	.uleb128 0x12
	.long	.LASF629
	.byte	0xc
	.value	0x167
	.long	0x18a6
	.byte	0x40
	.uleb128 0x12
	.long	.LASF630
	.byte	0xc
	.value	0x16a
	.long	0x283
	.byte	0x48
	.uleb128 0x12
	.long	.LASF631
	.byte	0xc
	.value	0x16d
	.long	0x1e74
	.byte	0x50
	.uleb128 0x12
	.long	.LASF632
	.byte	0xc
	.value	0x170
	.long	0x283
	.byte	0x58
	.uleb128 0x12
	.long	.LASF633
	.byte	0xc
	.value	0x173
	.long	0x1e74
	.byte	0x60
	.uleb128 0x12
	.long	.LASF634
	.byte	0xc
	.value	0x176
	.long	0x283
	.byte	0x68
	.uleb128 0x12
	.long	.LASF635
	.byte	0xc
	.value	0x179
	.long	0x18a6
	.byte	0x70
	.uleb128 0x12
	.long	.LASF636
	.byte	0xc
	.value	0x17c
	.long	0x283
	.byte	0x78
	.uleb128 0x12
	.long	.LASF637
	.byte	0xc
	.value	0x180
	.long	0x283
	.byte	0x7c
	.uleb128 0x12
	.long	.LASF485
	.byte	0xc
	.value	0x183
	.long	0x1e7a
	.byte	0x80
	.uleb128 0x12
	.long	.LASF638
	.byte	0xc
	.value	0x186
	.long	0x1e7a
	.byte	0x88
	.uleb128 0x12
	.long	.LASF455
	.byte	0xc
	.value	0x189
	.long	0x1e7a
	.byte	0x90
	.uleb128 0x12
	.long	.LASF639
	.byte	0xc
	.value	0x18c
	.long	0x283
	.byte	0x98
	.uleb128 0x12
	.long	.LASF640
	.byte	0xc
	.value	0x18f
	.long	0x283
	.byte	0x9c
	.uleb128 0x21
	.string	"aux"
	.byte	0xc
	.value	0x192
	.long	0x43d
	.byte	0xa0
	.uleb128 0x12
	.long	.LASF641
	.byte	0xc
	.value	0x198
	.long	0x2d
	.byte	0xa8
	.uleb128 0x12
	.long	.LASF642
	.byte	0xc
	.value	0x19c
	.long	0x2d
	.byte	0xb0
	.uleb128 0x12
	.long	.LASF643
	.byte	0xc
	.value	0x19f
	.long	0x2d
	.byte	0xb8
	.uleb128 0x12
	.long	.LASF644
	.byte	0xc
	.value	0x1a2
	.long	0x2d
	.byte	0xc0
	.uleb128 0x21
	.string	"end"
	.byte	0xc
	.value	0x1a5
	.long	0x2d
	.byte	0xc8
	.uleb128 0x21
	.string	"top"
	.byte	0xc
	.value	0x1a9
	.long	0x2d
	.byte	0xd0
	.uleb128 0x12
	.long	.LASF645
	.byte	0xc
	.value	0x1ac
	.long	0x2d
	.byte	0xd8
	.uleb128 0x12
	.long	.LASF646
	.byte	0xc
	.value	0x1af
	.long	0x2d
	.byte	0xe0
	.uleb128 0x12
	.long	.LASF647
	.byte	0xc
	.value	0x1ba
	.long	0x2d
	.byte	0xe8
	.uleb128 0x12
	.long	.LASF648
	.byte	0xc
	.value	0x1be
	.long	0x283
	.byte	0xf0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1ca3
	.uleb128 0x3
	.byte	0x8
	.long	0x1cb9
	.uleb128 0x22
	.string	"cfg"
	.byte	0x18
	.byte	0xc
	.value	0x1d3
	.long	0x1eb5
	.uleb128 0x21
	.string	"dom"
	.byte	0xc
	.value	0x1d6
	.long	0x1eb5
	.byte	0
	.uleb128 0x12
	.long	.LASF649
	.byte	0xc
	.value	0x1d9
	.long	0x6a6
	.byte	0x8
	.uleb128 0x12
	.long	.LASF650
	.byte	0xc
	.value	0x1dd
	.long	0x6a6
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x18a6
	.uleb128 0x11
	.long	.LASF651
	.byte	0x38
	.byte	0xc
	.value	0x1c3
	.long	0x1f17
	.uleb128 0x21
	.string	"num"
	.byte	0xc
	.value	0x1c6
	.long	0x283
	.byte	0
	.uleb128 0x12
	.long	.LASF652
	.byte	0xc
	.value	0x1c9
	.long	0x283
	.byte	0x4
	.uleb128 0x12
	.long	.LASF653
	.byte	0xc
	.value	0x1cd
	.long	0x1e7a
	.byte	0x8
	.uleb128 0x12
	.long	.LASF654
	.byte	0xc
	.value	0x1d0
	.long	0x1e7a
	.byte	0x10
	.uleb128 0x21
	.string	"cfg"
	.byte	0xc
	.value	0x1de
	.long	0x1e80
	.byte	0x18
	.uleb128 0x12
	.long	.LASF655
	.byte	0xc
	.value	0x1e1
	.long	0x18a6
	.byte	0x30
	.byte	0
	.uleb128 0x7
	.long	.LASF656
	.byte	0x13
	.byte	0xd4
	.long	0x1f22
	.uleb128 0x3
	.byte	0x8
	.long	0x1f28
	.uleb128 0x23
	.long	0x283
	.long	0x1f3c
	.uleb128 0x24
	.long	0x2d
	.uleb128 0x24
	.long	0x6b3
	.byte	0
	.uleb128 0x7
	.long	.LASF657
	.byte	0x13
	.byte	0xd6
	.long	0x1f47
	.uleb128 0x3
	.byte	0x8
	.long	0x1f4d
	.uleb128 0x23
	.long	0x2d
	.long	0x1f5d
	.uleb128 0x24
	.long	0x2d
	.uleb128 0x25
	.byte	0
	.uleb128 0x4
	.long	.LASF658
	.byte	0x18
	.byte	0x13
	.byte	0xd8
	.long	0x1fa9
	.uleb128 0x8
	.long	.LASF659
	.byte	0x13
	.byte	0xda
	.long	0x1fa9
	.byte	0
	.uleb128 0x8
	.long	.LASF660
	.byte	0x13
	.byte	0xdc
	.long	0x1fae
	.byte	0x8
	.uleb128 0x5
	.long	.LASF1
	.byte	0x13
	.byte	0xde
	.long	0x1fb3
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.uleb128 0x8
	.long	.LASF661
	.byte	0x13
	.byte	0xe0
	.long	0x693
	.byte	0x12
	.uleb128 0x8
	.long	.LASF662
	.byte	0x13
	.byte	0xe2
	.long	0x693
	.byte	0x13
	.byte	0
	.uleb128 0xa
	.long	0x1f17
	.uleb128 0xa
	.long	0x68d
	.uleb128 0xa
	.long	0x436
	.uleb128 0x4
	.long	.LASF663
	.byte	0x28
	.byte	0x13
	.byte	0xec
	.long	0x2025
	.uleb128 0x8
	.long	.LASF483
	.byte	0x13
	.byte	0xee
	.long	0x1fae
	.byte	0
	.uleb128 0x8
	.long	.LASF664
	.byte	0x13
	.byte	0xef
	.long	0x6ac
	.byte	0x8
	.uleb128 0x8
	.long	.LASF665
	.byte	0x13
	.byte	0xf0
	.long	0x2025
	.byte	0x10
	.uleb128 0x8
	.long	.LASF666
	.byte	0x13
	.byte	0xf1
	.long	0x202a
	.byte	0x18
	.uleb128 0x8
	.long	.LASF667
	.byte	0x13
	.byte	0xf3
	.long	0x693
	.byte	0x20
	.uleb128 0x8
	.long	.LASF668
	.byte	0x13
	.byte	0xf4
	.long	0x693
	.byte	0x21
	.uleb128 0x8
	.long	.LASF669
	.byte	0x13
	.byte	0xf5
	.long	0x693
	.byte	0x22
	.uleb128 0x8
	.long	.LASF670
	.byte	0x13
	.byte	0xf6
	.long	0x693
	.byte	0x23
	.byte	0
	.uleb128 0xa
	.long	0x1f3c
	.uleb128 0xa
	.long	0x202f
	.uleb128 0x3
	.byte	0x8
	.long	0x2035
	.uleb128 0xa
	.long	0x1f5d
	.uleb128 0x17
	.long	.LASF671
	.byte	0x4
	.byte	0x14
	.byte	0x1c
	.long	0x2077
	.uleb128 0x10
	.long	.LASF672
	.sleb128 0
	.uleb128 0x10
	.long	.LASF673
	.sleb128 1
	.uleb128 0x10
	.long	.LASF674
	.sleb128 2
	.uleb128 0x10
	.long	.LASF675
	.sleb128 3
	.uleb128 0x10
	.long	.LASF676
	.sleb128 4
	.uleb128 0x10
	.long	.LASF677
	.sleb128 5
	.uleb128 0x10
	.long	.LASF678
	.sleb128 6
	.uleb128 0x10
	.long	.LASF679
	.sleb128 7
	.byte	0
	.uleb128 0x17
	.long	.LASF680
	.byte	0x4
	.byte	0x15
	.byte	0x42
	.long	0x2090
	.uleb128 0x10
	.long	.LASF681
	.sleb128 0
	.uleb128 0x10
	.long	.LASF682
	.sleb128 1
	.byte	0
	.uleb128 0x4
	.long	.LASF683
	.byte	0xa8
	.byte	0x15
	.byte	0x4c
	.long	0x224d
	.uleb128 0x8
	.long	.LASF684
	.byte	0x15
	.byte	0x4e
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF685
	.byte	0x15
	.byte	0x4f
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF686
	.byte	0x15
	.byte	0x51
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF687
	.byte	0x15
	.byte	0x53
	.long	0x2077
	.byte	0x18
	.uleb128 0x8
	.long	.LASF688
	.byte	0x15
	.byte	0x54
	.long	0x2d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF689
	.byte	0x15
	.byte	0x58
	.long	0x10d1
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1
	.byte	0x15
	.byte	0x5c
	.long	0x6b3
	.byte	0x30
	.uleb128 0x6
	.string	"mem"
	.byte	0x15
	.byte	0x5d
	.long	0x2d
	.byte	0x38
	.uleb128 0x8
	.long	.LASF690
	.byte	0x15
	.byte	0x5e
	.long	0x2d
	.byte	0x40
	.uleb128 0x8
	.long	.LASF691
	.byte	0x15
	.byte	0x5f
	.long	0x2d
	.byte	0x48
	.uleb128 0x8
	.long	.LASF692
	.byte	0x15
	.byte	0x60
	.long	0x283
	.byte	0x50
	.uleb128 0x8
	.long	.LASF693
	.byte	0x15
	.byte	0x61
	.long	0x2d
	.byte	0x58
	.uleb128 0x8
	.long	.LASF694
	.byte	0x15
	.byte	0x65
	.long	0x436
	.byte	0x60
	.uleb128 0x5
	.long	.LASF695
	.byte	0x15
	.byte	0x68
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x64
	.uleb128 0x5
	.long	.LASF696
	.byte	0x15
	.byte	0x6d
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x64
	.uleb128 0x5
	.long	.LASF697
	.byte	0x15
	.byte	0x73
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x64
	.uleb128 0x5
	.long	.LASF698
	.byte	0x15
	.byte	0x74
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x64
	.uleb128 0x5
	.long	.LASF699
	.byte	0x15
	.byte	0x76
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x64
	.uleb128 0x5
	.long	.LASF700
	.byte	0x15
	.byte	0x77
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.byte	0x64
	.uleb128 0x5
	.long	.LASF701
	.byte	0x15
	.byte	0x7a
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.byte	0x64
	.uleb128 0x5
	.long	.LASF702
	.byte	0x15
	.byte	0x7e
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x64
	.uleb128 0x5
	.long	.LASF703
	.byte	0x15
	.byte	0x81
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x64
	.uleb128 0x5
	.long	.LASF704
	.byte	0x15
	.byte	0x83
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x64
	.uleb128 0x5
	.long	.LASF639
	.byte	0x15
	.byte	0x85
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x64
	.uleb128 0x5
	.long	.LASF705
	.byte	0x15
	.byte	0x86
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x64
	.uleb128 0x8
	.long	.LASF706
	.byte	0x15
	.byte	0x87
	.long	0x283
	.byte	0x68
	.uleb128 0x8
	.long	.LASF707
	.byte	0x15
	.byte	0x88
	.long	0x2d
	.byte	0x70
	.uleb128 0x8
	.long	.LASF708
	.byte	0x15
	.byte	0x8c
	.long	0x2d
	.byte	0x78
	.uleb128 0x8
	.long	.LASF709
	.byte	0x15
	.byte	0x8e
	.long	0x224d
	.byte	0x80
	.uleb128 0x8
	.long	.LASF710
	.byte	0x15
	.byte	0x92
	.long	0x224d
	.byte	0x88
	.uleb128 0x8
	.long	.LASF711
	.byte	0x15
	.byte	0x95
	.long	0x43f
	.byte	0x90
	.uleb128 0x8
	.long	.LASF712
	.byte	0x15
	.byte	0x99
	.long	0x224d
	.byte	0x98
	.uleb128 0x8
	.long	.LASF713
	.byte	0x15
	.byte	0x9d
	.long	0x2d
	.byte	0xa0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2090
	.uleb128 0x4
	.long	.LASF714
	.byte	0x60
	.byte	0x15
	.byte	0xa4
	.long	0x233b
	.uleb128 0x8
	.long	.LASF81
	.byte	0x15
	.byte	0xa6
	.long	0x436
	.byte	0
	.uleb128 0x8
	.long	.LASF715
	.byte	0x15
	.byte	0xa7
	.long	0x283
	.byte	0x4
	.uleb128 0x6
	.string	"biv"
	.byte	0x15
	.byte	0xa8
	.long	0x224d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF716
	.byte	0x15
	.byte	0xa9
	.long	0x283
	.byte	0x10
	.uleb128 0x6
	.string	"giv"
	.byte	0x15
	.byte	0xac
	.long	0x224d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF717
	.byte	0x15
	.byte	0xae
	.long	0x283
	.byte	0x20
	.uleb128 0x8
	.long	.LASF718
	.byte	0x15
	.byte	0xaf
	.long	0x2d
	.byte	0x28
	.uleb128 0x8
	.long	.LASF719
	.byte	0x15
	.byte	0xb0
	.long	0x2d
	.byte	0x30
	.uleb128 0x8
	.long	.LASF693
	.byte	0x15
	.byte	0xb1
	.long	0x2d
	.byte	0x38
	.uleb128 0x8
	.long	.LASF455
	.byte	0x15
	.byte	0xb2
	.long	0x233b
	.byte	0x40
	.uleb128 0x8
	.long	.LASF720
	.byte	0x15
	.byte	0xb3
	.long	0x2d
	.byte	0x48
	.uleb128 0x8
	.long	.LASF721
	.byte	0x15
	.byte	0xb4
	.long	0x2d
	.byte	0x50
	.uleb128 0x5
	.long	.LASF722
	.byte	0x15
	.byte	0xb5
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x58
	.uleb128 0x5
	.long	.LASF662
	.byte	0x15
	.byte	0xb6
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x58
	.uleb128 0x5
	.long	.LASF723
	.byte	0x15
	.byte	0xb8
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x58
	.uleb128 0x5
	.long	.LASF724
	.byte	0x15
	.byte	0xba
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x58
	.uleb128 0x5
	.long	.LASF725
	.byte	0x15
	.byte	0xbc
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x58
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2253
	.uleb128 0x17
	.long	.LASF726
	.byte	0x4
	.byte	0x15
	.byte	0xc2
	.long	0x2366
	.uleb128 0x10
	.long	.LASF727
	.sleb128 0
	.uleb128 0x10
	.long	.LASF728
	.sleb128 1
	.uleb128 0x10
	.long	.LASF729
	.sleb128 2
	.uleb128 0x10
	.long	.LASF730
	.sleb128 3
	.byte	0
	.uleb128 0x26
	.byte	0x8
	.byte	0x15
	.byte	0xd0
	.long	0x2385
	.uleb128 0x1b
	.long	.LASF731
	.byte	0x15
	.byte	0xd2
	.long	0x233b
	.uleb128 0x1b
	.long	.LASF732
	.byte	0x15
	.byte	0xd3
	.long	0x224d
	.byte	0
	.uleb128 0x27
	.string	"iv"
	.byte	0x10
	.byte	0x15
	.byte	0xcd
	.long	0x23a8
	.uleb128 0x8
	.long	.LASF733
	.byte	0x15
	.byte	0xcf
	.long	0x2341
	.byte	0
	.uleb128 0x6
	.string	"iv"
	.byte	0x15
	.byte	0xd4
	.long	0x2366
	.byte	0x8
	.byte	0
	.uleb128 0x4
	.long	.LASF734
	.byte	0x18
	.byte	0x15
	.byte	0xdd
	.long	0x23d9
	.uleb128 0x8
	.long	.LASF735
	.byte	0x15
	.byte	0xe1
	.long	0x23d9
	.byte	0
	.uleb128 0x8
	.long	.LASF736
	.byte	0x15
	.byte	0xe4
	.long	0x436
	.byte	0x8
	.uleb128 0x8
	.long	.LASF737
	.byte	0x15
	.byte	0xe8
	.long	0x233b
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2385
	.uleb128 0x4
	.long	.LASF738
	.byte	0x18
	.byte	0x15
	.byte	0xec
	.long	0x2410
	.uleb128 0x6
	.string	"mem"
	.byte	0x15
	.byte	0xee
	.long	0x2d
	.byte	0
	.uleb128 0x6
	.string	"reg"
	.byte	0x15
	.byte	0xef
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF739
	.byte	0x15
	.byte	0xf0
	.long	0x283
	.byte	0x10
	.byte	0
	.uleb128 0x7
	.long	.LASF738
	.byte	0x15
	.byte	0xf1
	.long	0x23df
	.uleb128 0x4
	.long	.LASF740
	.byte	0x18
	.byte	0x15
	.byte	0xf5
	.long	0x2469
	.uleb128 0x12
	.long	.LASF741
	.byte	0x15
	.value	0x101
	.long	0x283
	.byte	0
	.uleb128 0x12
	.long	.LASF742
	.byte	0x15
	.value	0x106
	.long	0x283
	.byte	0x4
	.uleb128 0x12
	.long	.LASF743
	.byte	0x15
	.value	0x10a
	.long	0x2d
	.byte	0x8
	.uleb128 0x12
	.long	.LASF744
	.byte	0x15
	.value	0x10e
	.long	0x490
	.byte	0x10
	.uleb128 0x12
	.long	.LASF745
	.byte	0x15
	.value	0x112
	.long	0x490
	.byte	0x11
	.byte	0
	.uleb128 0x11
	.long	.LASF746
	.byte	0x18
	.byte	0x15
	.value	0x116
	.long	0x24ab
	.uleb128 0x21
	.string	"num"
	.byte	0x15
	.value	0x118
	.long	0x283
	.byte	0
	.uleb128 0x12
	.long	.LASF346
	.byte	0x15
	.value	0x119
	.long	0x283
	.byte	0x4
	.uleb128 0x12
	.long	.LASF653
	.byte	0x15
	.value	0x11a
	.long	0x24ab
	.byte	0x8
	.uleb128 0x12
	.long	.LASF747
	.byte	0x15
	.value	0x11b
	.long	0x283
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x241b
	.uleb128 0x11
	.long	.LASF748
	.byte	0x10
	.byte	0x15
	.value	0x120
	.long	0x24d9
	.uleb128 0x12
	.long	.LASF368
	.byte	0x15
	.value	0x123
	.long	0x25ee
	.byte	0
	.uleb128 0x12
	.long	.LASF457
	.byte	0x15
	.value	0x125
	.long	0x25ee
	.byte	0x8
	.byte	0
	.uleb128 0x4
	.long	.LASF749
	.byte	0x50
	.byte	0x1
	.byte	0xc1
	.long	0x25ee
	.uleb128 0x8
	.long	.LASF684
	.byte	0x1
	.byte	0xc3
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF750
	.byte	0x1
	.byte	0xc4
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF751
	.byte	0x1
	.byte	0xc5
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF752
	.byte	0x1
	.byte	0xc6
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF753
	.byte	0x1
	.byte	0xc8
	.long	0x283
	.byte	0x20
	.uleb128 0x8
	.long	.LASF81
	.byte	0x1
	.byte	0xca
	.long	0x436
	.byte	0x24
	.uleb128 0x8
	.long	.LASF706
	.byte	0x1
	.byte	0xcb
	.long	0x46d
	.byte	0x28
	.uleb128 0x8
	.long	.LASF754
	.byte	0x1
	.byte	0xce
	.long	0x46d
	.byte	0x2a
	.uleb128 0x5
	.long	.LASF755
	.byte	0x1
	.byte	0xd1
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x2c
	.uleb128 0x5
	.long	.LASF756
	.byte	0x1
	.byte	0xd2
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x2c
	.uleb128 0x5
	.long	.LASF757
	.byte	0x1
	.byte	0xd3
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x2c
	.uleb128 0x5
	.long	.LASF758
	.byte	0x1
	.byte	0xd7
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x2c
	.uleb128 0x5
	.long	.LASF759
	.byte	0x1
	.byte	0xd9
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x2c
	.uleb128 0x5
	.long	.LASF760
	.byte	0x1
	.byte	0xdc
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.byte	0x2c
	.uleb128 0x5
	.long	.LASF761
	.byte	0x1
	.byte	0xde
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.byte	0x2c
	.uleb128 0x5
	.long	.LASF762
	.byte	0x1
	.byte	0xe0
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x2c
	.uleb128 0x8
	.long	.LASF763
	.byte	0x1
	.byte	0xe1
	.long	0x6b3
	.byte	0x30
	.uleb128 0x8
	.long	.LASF764
	.byte	0x1
	.byte	0xe4
	.long	0x25ee
	.byte	0x38
	.uleb128 0x8
	.long	.LASF765
	.byte	0x1
	.byte	0xe5
	.long	0x25ee
	.byte	0x40
	.uleb128 0x8
	.long	.LASF455
	.byte	0x1
	.byte	0xe6
	.long	0x25ee
	.byte	0x48
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x24d9
	.uleb128 0x11
	.long	.LASF766
	.byte	0xf0
	.byte	0x15
	.value	0x12b
	.long	0x2794
	.uleb128 0x12
	.long	.LASF767
	.byte	0x15
	.value	0x12e
	.long	0x283
	.byte	0
	.uleb128 0x12
	.long	.LASF768
	.byte	0x15
	.value	0x130
	.long	0x283
	.byte	0x4
	.uleb128 0x12
	.long	.LASF769
	.byte	0x15
	.value	0x132
	.long	0x283
	.byte	0x8
	.uleb128 0x12
	.long	.LASF770
	.byte	0x15
	.value	0x135
	.long	0x283
	.byte	0xc
	.uleb128 0x12
	.long	.LASF771
	.byte	0x15
	.value	0x137
	.long	0x283
	.byte	0x10
	.uleb128 0x12
	.long	.LASF772
	.byte	0x15
	.value	0x13a
	.long	0x283
	.byte	0x14
	.uleb128 0x12
	.long	.LASF773
	.byte	0x15
	.value	0x13c
	.long	0x283
	.byte	0x18
	.uleb128 0x12
	.long	.LASF718
	.byte	0x15
	.value	0x13e
	.long	0x2d
	.byte	0x20
	.uleb128 0x12
	.long	.LASF774
	.byte	0x15
	.value	0x140
	.long	0x2d
	.byte	0x28
	.uleb128 0x12
	.long	.LASF693
	.byte	0x15
	.value	0x142
	.long	0x2d
	.byte	0x30
	.uleb128 0x12
	.long	.LASF775
	.byte	0x15
	.value	0x145
	.long	0x2d
	.byte	0x38
	.uleb128 0x12
	.long	.LASF776
	.byte	0x15
	.value	0x148
	.long	0x2d
	.byte	0x40
	.uleb128 0x12
	.long	.LASF777
	.byte	0x15
	.value	0x14a
	.long	0x2d
	.byte	0x48
	.uleb128 0x12
	.long	.LASF778
	.byte	0x15
	.value	0x14c
	.long	0x2d
	.byte	0x50
	.uleb128 0x12
	.long	.LASF779
	.byte	0x15
	.value	0x14d
	.long	0x871
	.byte	0x58
	.uleb128 0x12
	.long	.LASF780
	.byte	0x15
	.value	0x153
	.long	0x451
	.byte	0x60
	.uleb128 0x12
	.long	.LASF781
	.byte	0x15
	.value	0x155
	.long	0x436
	.byte	0x68
	.uleb128 0x12
	.long	.LASF782
	.byte	0x15
	.value	0x156
	.long	0x283
	.byte	0x6c
	.uleb128 0x21
	.string	"iv"
	.byte	0x15
	.value	0x158
	.long	0x233b
	.byte	0x70
	.uleb128 0x12
	.long	.LASF783
	.byte	0x15
	.value	0x15a
	.long	0x2d
	.byte	0x78
	.uleb128 0x12
	.long	.LASF784
	.byte	0x15
	.value	0x160
	.long	0x2794
	.byte	0x80
	.uleb128 0x12
	.long	.LASF785
	.byte	0x15
	.value	0x162
	.long	0x283
	.byte	0x88
	.uleb128 0x12
	.long	.LASF786
	.byte	0x15
	.value	0x164
	.long	0x283
	.byte	0x8c
	.uleb128 0x12
	.long	.LASF787
	.byte	0x15
	.value	0x169
	.long	0x283
	.byte	0x90
	.uleb128 0x12
	.long	.LASF788
	.byte	0x15
	.value	0x16c
	.long	0x283
	.byte	0x94
	.uleb128 0x12
	.long	.LASF789
	.byte	0x15
	.value	0x16e
	.long	0x283
	.byte	0x98
	.uleb128 0x12
	.long	.LASF790
	.byte	0x15
	.value	0x170
	.long	0x2d
	.byte	0xa0
	.uleb128 0x12
	.long	.LASF791
	.byte	0x15
	.value	0x172
	.long	0x24b1
	.byte	0xa8
	.uleb128 0x12
	.long	.LASF735
	.byte	0x15
	.value	0x174
	.long	0x2469
	.byte	0xb8
	.uleb128 0x21
	.string	"ivs"
	.byte	0x15
	.value	0x176
	.long	0x23a8
	.byte	0xd0
	.uleb128 0x12
	.long	.LASF792
	.byte	0x15
	.value	0x178
	.long	0x283
	.byte	0xe8
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2410
	.uleb128 0x13
	.long	.LASF793
	.byte	0x15
	.value	0x19d
	.long	0x27a6
	.uleb128 0x3
	.byte	0x8
	.long	0x27ac
	.uleb128 0x23
	.long	0x2d
	.long	0x27ca
	.uleb128 0x24
	.long	0x1e7a
	.uleb128 0x24
	.long	0x2d
	.uleb128 0x24
	.long	0x283
	.uleb128 0x24
	.long	0x283
	.byte	0
	.uleb128 0x26
	.byte	0x8
	.byte	0xa
	.byte	0x1b
	.long	0x27e9
	.uleb128 0x1b
	.long	.LASF794
	.byte	0xa
	.byte	0x1e
	.long	0x2d
	.uleb128 0x1b
	.long	.LASF795
	.byte	0xa
	.byte	0x20
	.long	0xe1f
	.byte	0
	.uleb128 0x4
	.long	.LASF796
	.byte	0x18
	.byte	0xa
	.byte	0x2c
	.long	0x281a
	.uleb128 0x8
	.long	.LASF455
	.byte	0xa
	.byte	0x2f
	.long	0x281a
	.byte	0
	.uleb128 0x6
	.string	"loc"
	.byte	0xa
	.byte	0x31
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF797
	.byte	0xa
	.byte	0x33
	.long	0x2d
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x27e9
	.uleb128 0x7
	.long	.LASF798
	.byte	0xa
	.byte	0x29
	.long	0xde4
	.uleb128 0x3
	.byte	0x8
	.long	0x2820
	.uleb128 0x17
	.long	.LASF799
	.byte	0x4
	.byte	0x16
	.byte	0x17
	.long	0x28b6
	.uleb128 0x10
	.long	.LASF800
	.sleb128 0
	.uleb128 0x10
	.long	.LASF801
	.sleb128 1
	.uleb128 0x10
	.long	.LASF802
	.sleb128 2
	.uleb128 0x10
	.long	.LASF803
	.sleb128 3
	.uleb128 0x10
	.long	.LASF804
	.sleb128 4
	.uleb128 0x10
	.long	.LASF805
	.sleb128 5
	.uleb128 0x10
	.long	.LASF806
	.sleb128 6
	.uleb128 0x10
	.long	.LASF807
	.sleb128 7
	.uleb128 0x10
	.long	.LASF808
	.sleb128 8
	.uleb128 0x10
	.long	.LASF809
	.sleb128 9
	.uleb128 0x10
	.long	.LASF810
	.sleb128 10
	.uleb128 0x10
	.long	.LASF811
	.sleb128 11
	.uleb128 0x10
	.long	.LASF812
	.sleb128 12
	.uleb128 0x10
	.long	.LASF813
	.sleb128 13
	.uleb128 0x10
	.long	.LASF814
	.sleb128 14
	.uleb128 0x10
	.long	.LASF815
	.sleb128 15
	.uleb128 0x10
	.long	.LASF816
	.sleb128 16
	.uleb128 0x10
	.long	.LASF817
	.sleb128 17
	.uleb128 0x10
	.long	.LASF818
	.sleb128 18
	.uleb128 0x10
	.long	.LASF819
	.sleb128 19
	.byte	0
	.uleb128 0x17
	.long	.LASF820
	.byte	0x4
	.byte	0x17
	.byte	0x7
	.long	0x37a3
	.uleb128 0x10
	.long	.LASF821
	.sleb128 0
	.uleb128 0x10
	.long	.LASF822
	.sleb128 2
	.uleb128 0x10
	.long	.LASF823
	.sleb128 15
	.uleb128 0x10
	.long	.LASF824
	.sleb128 16
	.uleb128 0x10
	.long	.LASF825
	.sleb128 30
	.uleb128 0x10
	.long	.LASF826
	.sleb128 31
	.uleb128 0x10
	.long	.LASF827
	.sleb128 42
	.uleb128 0x10
	.long	.LASF828
	.sleb128 73
	.uleb128 0x10
	.long	.LASF829
	.sleb128 77
	.uleb128 0x10
	.long	.LASF830
	.sleb128 80
	.uleb128 0x10
	.long	.LASF831
	.sleb128 105
	.uleb128 0x10
	.long	.LASF832
	.sleb128 106
	.uleb128 0x10
	.long	.LASF833
	.sleb128 107
	.uleb128 0x10
	.long	.LASF834
	.sleb128 115
	.uleb128 0x10
	.long	.LASF835
	.sleb128 116
	.uleb128 0x10
	.long	.LASF836
	.sleb128 117
	.uleb128 0x10
	.long	.LASF837
	.sleb128 118
	.uleb128 0x10
	.long	.LASF838
	.sleb128 120
	.uleb128 0x10
	.long	.LASF839
	.sleb128 121
	.uleb128 0x10
	.long	.LASF840
	.sleb128 122
	.uleb128 0x10
	.long	.LASF841
	.sleb128 123
	.uleb128 0x10
	.long	.LASF842
	.sleb128 125
	.uleb128 0x10
	.long	.LASF843
	.sleb128 126
	.uleb128 0x10
	.long	.LASF844
	.sleb128 142
	.uleb128 0x10
	.long	.LASF845
	.sleb128 143
	.uleb128 0x10
	.long	.LASF846
	.sleb128 153
	.uleb128 0x10
	.long	.LASF847
	.sleb128 154
	.uleb128 0x10
	.long	.LASF848
	.sleb128 155
	.uleb128 0x10
	.long	.LASF849
	.sleb128 156
	.uleb128 0x10
	.long	.LASF850
	.sleb128 158
	.uleb128 0x10
	.long	.LASF851
	.sleb128 159
	.uleb128 0x10
	.long	.LASF852
	.sleb128 160
	.uleb128 0x10
	.long	.LASF853
	.sleb128 161
	.uleb128 0x10
	.long	.LASF854
	.sleb128 163
	.uleb128 0x10
	.long	.LASF855
	.sleb128 164
	.uleb128 0x10
	.long	.LASF856
	.sleb128 165
	.uleb128 0x10
	.long	.LASF857
	.sleb128 166
	.uleb128 0x10
	.long	.LASF858
	.sleb128 167
	.uleb128 0x10
	.long	.LASF859
	.sleb128 173
	.uleb128 0x10
	.long	.LASF860
	.sleb128 179
	.uleb128 0x10
	.long	.LASF861
	.sleb128 180
	.uleb128 0x10
	.long	.LASF862
	.sleb128 181
	.uleb128 0x10
	.long	.LASF863
	.sleb128 182
	.uleb128 0x10
	.long	.LASF864
	.sleb128 183
	.uleb128 0x10
	.long	.LASF865
	.sleb128 184
	.uleb128 0x10
	.long	.LASF866
	.sleb128 191
	.uleb128 0x10
	.long	.LASF867
	.sleb128 208
	.uleb128 0x10
	.long	.LASF868
	.sleb128 227
	.uleb128 0x10
	.long	.LASF869
	.sleb128 231
	.uleb128 0x10
	.long	.LASF870
	.sleb128 235
	.uleb128 0x10
	.long	.LASF871
	.sleb128 236
	.uleb128 0x10
	.long	.LASF872
	.sleb128 266
	.uleb128 0x10
	.long	.LASF873
	.sleb128 267
	.uleb128 0x10
	.long	.LASF874
	.sleb128 274
	.uleb128 0x10
	.long	.LASF875
	.sleb128 275
	.uleb128 0x10
	.long	.LASF876
	.sleb128 277
	.uleb128 0x10
	.long	.LASF877
	.sleb128 281
	.uleb128 0x10
	.long	.LASF878
	.sleb128 302
	.uleb128 0x10
	.long	.LASF879
	.sleb128 355
	.uleb128 0x10
	.long	.LASF880
	.sleb128 356
	.uleb128 0x10
	.long	.LASF881
	.sleb128 358
	.uleb128 0x10
	.long	.LASF882
	.sleb128 359
	.uleb128 0x10
	.long	.LASF883
	.sleb128 374
	.uleb128 0x10
	.long	.LASF884
	.sleb128 375
	.uleb128 0x10
	.long	.LASF885
	.sleb128 377
	.uleb128 0x10
	.long	.LASF886
	.sleb128 378
	.uleb128 0x10
	.long	.LASF887
	.sleb128 405
	.uleb128 0x10
	.long	.LASF888
	.sleb128 407
	.uleb128 0x10
	.long	.LASF889
	.sleb128 418
	.uleb128 0x10
	.long	.LASF890
	.sleb128 423
	.uleb128 0x10
	.long	.LASF891
	.sleb128 425
	.uleb128 0x10
	.long	.LASF892
	.sleb128 426
	.uleb128 0x10
	.long	.LASF893
	.sleb128 448
	.uleb128 0x10
	.long	.LASF894
	.sleb128 487
	.uleb128 0x10
	.long	.LASF895
	.sleb128 502
	.uleb128 0x10
	.long	.LASF896
	.sleb128 507
	.uleb128 0x10
	.long	.LASF897
	.sleb128 513
	.uleb128 0x10
	.long	.LASF898
	.sleb128 514
	.uleb128 0x10
	.long	.LASF899
	.sleb128 515
	.uleb128 0x10
	.long	.LASF900
	.sleb128 516
	.uleb128 0x10
	.long	.LASF901
	.sleb128 517
	.uleb128 0x10
	.long	.LASF902
	.sleb128 518
	.uleb128 0x10
	.long	.LASF903
	.sleb128 519
	.uleb128 0x10
	.long	.LASF904
	.sleb128 520
	.uleb128 0x10
	.long	.LASF905
	.sleb128 521
	.uleb128 0x10
	.long	.LASF906
	.sleb128 522
	.uleb128 0x10
	.long	.LASF907
	.sleb128 523
	.uleb128 0x10
	.long	.LASF908
	.sleb128 524
	.uleb128 0x10
	.long	.LASF909
	.sleb128 559
	.uleb128 0x10
	.long	.LASF910
	.sleb128 560
	.uleb128 0x10
	.long	.LASF911
	.sleb128 561
	.uleb128 0x10
	.long	.LASF912
	.sleb128 562
	.uleb128 0x10
	.long	.LASF913
	.sleb128 563
	.uleb128 0x10
	.long	.LASF914
	.sleb128 564
	.uleb128 0x10
	.long	.LASF915
	.sleb128 566
	.uleb128 0x10
	.long	.LASF916
	.sleb128 567
	.uleb128 0x10
	.long	.LASF917
	.sleb128 572
	.uleb128 0x10
	.long	.LASF918
	.sleb128 573
	.uleb128 0x10
	.long	.LASF919
	.sleb128 575
	.uleb128 0x10
	.long	.LASF920
	.sleb128 576
	.uleb128 0x10
	.long	.LASF921
	.sleb128 577
	.uleb128 0x10
	.long	.LASF922
	.sleb128 578
	.uleb128 0x10
	.long	.LASF923
	.sleb128 580
	.uleb128 0x10
	.long	.LASF924
	.sleb128 581
	.uleb128 0x10
	.long	.LASF925
	.sleb128 582
	.uleb128 0x10
	.long	.LASF926
	.sleb128 583
	.uleb128 0x10
	.long	.LASF927
	.sleb128 584
	.uleb128 0x10
	.long	.LASF928
	.sleb128 585
	.uleb128 0x10
	.long	.LASF929
	.sleb128 586
	.uleb128 0x10
	.long	.LASF930
	.sleb128 587
	.uleb128 0x10
	.long	.LASF931
	.sleb128 588
	.uleb128 0x10
	.long	.LASF932
	.sleb128 589
	.uleb128 0x10
	.long	.LASF933
	.sleb128 590
	.uleb128 0x10
	.long	.LASF934
	.sleb128 591
	.uleb128 0x10
	.long	.LASF935
	.sleb128 592
	.uleb128 0x10
	.long	.LASF936
	.sleb128 593
	.uleb128 0x10
	.long	.LASF937
	.sleb128 594
	.uleb128 0x10
	.long	.LASF938
	.sleb128 595
	.uleb128 0x10
	.long	.LASF939
	.sleb128 596
	.uleb128 0x10
	.long	.LASF940
	.sleb128 597
	.uleb128 0x10
	.long	.LASF941
	.sleb128 598
	.uleb128 0x10
	.long	.LASF942
	.sleb128 599
	.uleb128 0x10
	.long	.LASF943
	.sleb128 600
	.uleb128 0x10
	.long	.LASF944
	.sleb128 601
	.uleb128 0x10
	.long	.LASF945
	.sleb128 602
	.uleb128 0x10
	.long	.LASF946
	.sleb128 603
	.uleb128 0x10
	.long	.LASF947
	.sleb128 604
	.uleb128 0x10
	.long	.LASF948
	.sleb128 605
	.uleb128 0x10
	.long	.LASF949
	.sleb128 606
	.uleb128 0x10
	.long	.LASF950
	.sleb128 607
	.uleb128 0x10
	.long	.LASF951
	.sleb128 608
	.uleb128 0x10
	.long	.LASF952
	.sleb128 609
	.uleb128 0x10
	.long	.LASF953
	.sleb128 610
	.uleb128 0x10
	.long	.LASF954
	.sleb128 611
	.uleb128 0x10
	.long	.LASF955
	.sleb128 612
	.uleb128 0x10
	.long	.LASF956
	.sleb128 613
	.uleb128 0x10
	.long	.LASF957
	.sleb128 615
	.uleb128 0x10
	.long	.LASF958
	.sleb128 636
	.uleb128 0x10
	.long	.LASF959
	.sleb128 637
	.uleb128 0x10
	.long	.LASF960
	.sleb128 638
	.uleb128 0x10
	.long	.LASF961
	.sleb128 639
	.uleb128 0x10
	.long	.LASF962
	.sleb128 640
	.uleb128 0x10
	.long	.LASF963
	.sleb128 649
	.uleb128 0x10
	.long	.LASF964
	.sleb128 650
	.uleb128 0x10
	.long	.LASF965
	.sleb128 657
	.uleb128 0x10
	.long	.LASF966
	.sleb128 659
	.uleb128 0x10
	.long	.LASF967
	.sleb128 660
	.uleb128 0x10
	.long	.LASF968
	.sleb128 661
	.uleb128 0x10
	.long	.LASF969
	.sleb128 662
	.uleb128 0x10
	.long	.LASF970
	.sleb128 663
	.uleb128 0x10
	.long	.LASF971
	.sleb128 664
	.uleb128 0x10
	.long	.LASF972
	.sleb128 672
	.uleb128 0x10
	.long	.LASF973
	.sleb128 674
	.uleb128 0x10
	.long	.LASF974
	.sleb128 675
	.uleb128 0x10
	.long	.LASF975
	.sleb128 676
	.uleb128 0x10
	.long	.LASF976
	.sleb128 677
	.uleb128 0x10
	.long	.LASF977
	.sleb128 678
	.uleb128 0x10
	.long	.LASF978
	.sleb128 679
	.uleb128 0x10
	.long	.LASF979
	.sleb128 680
	.uleb128 0x10
	.long	.LASF980
	.sleb128 681
	.uleb128 0x10
	.long	.LASF981
	.sleb128 682
	.uleb128 0x10
	.long	.LASF982
	.sleb128 683
	.uleb128 0x10
	.long	.LASF983
	.sleb128 684
	.uleb128 0x10
	.long	.LASF984
	.sleb128 685
	.uleb128 0x10
	.long	.LASF985
	.sleb128 686
	.uleb128 0x10
	.long	.LASF986
	.sleb128 687
	.uleb128 0x10
	.long	.LASF987
	.sleb128 688
	.uleb128 0x10
	.long	.LASF988
	.sleb128 689
	.uleb128 0x10
	.long	.LASF989
	.sleb128 690
	.uleb128 0x10
	.long	.LASF990
	.sleb128 691
	.uleb128 0x10
	.long	.LASF991
	.sleb128 692
	.uleb128 0x10
	.long	.LASF992
	.sleb128 693
	.uleb128 0x10
	.long	.LASF993
	.sleb128 694
	.uleb128 0x10
	.long	.LASF994
	.sleb128 695
	.uleb128 0x10
	.long	.LASF995
	.sleb128 696
	.uleb128 0x10
	.long	.LASF996
	.sleb128 697
	.uleb128 0x10
	.long	.LASF997
	.sleb128 698
	.uleb128 0x10
	.long	.LASF998
	.sleb128 699
	.uleb128 0x10
	.long	.LASF999
	.sleb128 700
	.uleb128 0x10
	.long	.LASF1000
	.sleb128 701
	.uleb128 0x10
	.long	.LASF1001
	.sleb128 702
	.uleb128 0x10
	.long	.LASF1002
	.sleb128 703
	.uleb128 0x10
	.long	.LASF1003
	.sleb128 708
	.uleb128 0x10
	.long	.LASF1004
	.sleb128 712
	.uleb128 0x10
	.long	.LASF1005
	.sleb128 718
	.uleb128 0x10
	.long	.LASF1006
	.sleb128 724
	.uleb128 0x10
	.long	.LASF1007
	.sleb128 726
	.uleb128 0x10
	.long	.LASF1008
	.sleb128 727
	.uleb128 0x10
	.long	.LASF1009
	.sleb128 728
	.uleb128 0x10
	.long	.LASF1010
	.sleb128 729
	.uleb128 0x10
	.long	.LASF1011
	.sleb128 730
	.uleb128 0x10
	.long	.LASF1012
	.sleb128 731
	.uleb128 0x10
	.long	.LASF1013
	.sleb128 732
	.uleb128 0x10
	.long	.LASF1014
	.sleb128 733
	.uleb128 0x10
	.long	.LASF1015
	.sleb128 734
	.uleb128 0x10
	.long	.LASF1016
	.sleb128 735
	.uleb128 0x10
	.long	.LASF1017
	.sleb128 736
	.uleb128 0x10
	.long	.LASF1018
	.sleb128 737
	.uleb128 0x10
	.long	.LASF1019
	.sleb128 738
	.uleb128 0x10
	.long	.LASF1020
	.sleb128 739
	.uleb128 0x10
	.long	.LASF1021
	.sleb128 740
	.uleb128 0x10
	.long	.LASF1022
	.sleb128 741
	.uleb128 0x10
	.long	.LASF1023
	.sleb128 742
	.uleb128 0x10
	.long	.LASF1024
	.sleb128 743
	.uleb128 0x10
	.long	.LASF1025
	.sleb128 744
	.uleb128 0x10
	.long	.LASF1026
	.sleb128 745
	.uleb128 0x10
	.long	.LASF1027
	.sleb128 746
	.uleb128 0x10
	.long	.LASF1028
	.sleb128 747
	.uleb128 0x10
	.long	.LASF1029
	.sleb128 748
	.uleb128 0x10
	.long	.LASF1030
	.sleb128 749
	.uleb128 0x10
	.long	.LASF1031
	.sleb128 750
	.uleb128 0x10
	.long	.LASF1032
	.sleb128 751
	.uleb128 0x10
	.long	.LASF1033
	.sleb128 752
	.uleb128 0x10
	.long	.LASF1034
	.sleb128 753
	.uleb128 0x10
	.long	.LASF1035
	.sleb128 754
	.uleb128 0x10
	.long	.LASF1036
	.sleb128 755
	.uleb128 0x10
	.long	.LASF1037
	.sleb128 756
	.uleb128 0x10
	.long	.LASF1038
	.sleb128 757
	.uleb128 0x10
	.long	.LASF1039
	.sleb128 758
	.uleb128 0x10
	.long	.LASF1040
	.sleb128 759
	.uleb128 0x10
	.long	.LASF1041
	.sleb128 760
	.uleb128 0x10
	.long	.LASF1042
	.sleb128 761
	.uleb128 0x10
	.long	.LASF1043
	.sleb128 762
	.uleb128 0x10
	.long	.LASF1044
	.sleb128 763
	.uleb128 0x10
	.long	.LASF1045
	.sleb128 764
	.uleb128 0x10
	.long	.LASF1046
	.sleb128 765
	.uleb128 0x10
	.long	.LASF1047
	.sleb128 766
	.uleb128 0x10
	.long	.LASF1048
	.sleb128 767
	.uleb128 0x10
	.long	.LASF1049
	.sleb128 768
	.uleb128 0x10
	.long	.LASF1050
	.sleb128 769
	.uleb128 0x10
	.long	.LASF1051
	.sleb128 770
	.uleb128 0x10
	.long	.LASF1052
	.sleb128 771
	.uleb128 0x10
	.long	.LASF1053
	.sleb128 772
	.uleb128 0x10
	.long	.LASF1054
	.sleb128 773
	.uleb128 0x10
	.long	.LASF1055
	.sleb128 774
	.uleb128 0x10
	.long	.LASF1056
	.sleb128 775
	.uleb128 0x10
	.long	.LASF1057
	.sleb128 776
	.uleb128 0x10
	.long	.LASF1058
	.sleb128 777
	.uleb128 0x10
	.long	.LASF1059
	.sleb128 778
	.uleb128 0x10
	.long	.LASF1060
	.sleb128 779
	.uleb128 0x10
	.long	.LASF1061
	.sleb128 780
	.uleb128 0x10
	.long	.LASF1062
	.sleb128 781
	.uleb128 0x10
	.long	.LASF1063
	.sleb128 782
	.uleb128 0x10
	.long	.LASF1064
	.sleb128 783
	.uleb128 0x10
	.long	.LASF1065
	.sleb128 784
	.uleb128 0x10
	.long	.LASF1066
	.sleb128 785
	.uleb128 0x10
	.long	.LASF1067
	.sleb128 786
	.uleb128 0x10
	.long	.LASF1068
	.sleb128 787
	.uleb128 0x10
	.long	.LASF1069
	.sleb128 788
	.uleb128 0x10
	.long	.LASF1070
	.sleb128 789
	.uleb128 0x10
	.long	.LASF1071
	.sleb128 790
	.uleb128 0x10
	.long	.LASF1072
	.sleb128 791
	.uleb128 0x10
	.long	.LASF1073
	.sleb128 792
	.uleb128 0x10
	.long	.LASF1074
	.sleb128 793
	.uleb128 0x10
	.long	.LASF1075
	.sleb128 794
	.uleb128 0x10
	.long	.LASF1076
	.sleb128 795
	.uleb128 0x10
	.long	.LASF1077
	.sleb128 796
	.uleb128 0x10
	.long	.LASF1078
	.sleb128 797
	.uleb128 0x10
	.long	.LASF1079
	.sleb128 798
	.uleb128 0x10
	.long	.LASF1080
	.sleb128 799
	.uleb128 0x10
	.long	.LASF1081
	.sleb128 800
	.uleb128 0x10
	.long	.LASF1082
	.sleb128 801
	.uleb128 0x10
	.long	.LASF1083
	.sleb128 802
	.uleb128 0x10
	.long	.LASF1084
	.sleb128 803
	.uleb128 0x10
	.long	.LASF1085
	.sleb128 806
	.uleb128 0x10
	.long	.LASF1086
	.sleb128 807
	.uleb128 0x10
	.long	.LASF1087
	.sleb128 808
	.uleb128 0x10
	.long	.LASF1088
	.sleb128 809
	.uleb128 0x10
	.long	.LASF1089
	.sleb128 810
	.uleb128 0x10
	.long	.LASF1090
	.sleb128 811
	.uleb128 0x10
	.long	.LASF1091
	.sleb128 812
	.uleb128 0x10
	.long	.LASF1092
	.sleb128 813
	.uleb128 0x10
	.long	.LASF1093
	.sleb128 814
	.uleb128 0x10
	.long	.LASF1094
	.sleb128 815
	.uleb128 0x10
	.long	.LASF1095
	.sleb128 816
	.uleb128 0x10
	.long	.LASF1096
	.sleb128 817
	.uleb128 0x10
	.long	.LASF1097
	.sleb128 818
	.uleb128 0x10
	.long	.LASF1098
	.sleb128 819
	.uleb128 0x10
	.long	.LASF1099
	.sleb128 820
	.uleb128 0x10
	.long	.LASF1100
	.sleb128 821
	.uleb128 0x10
	.long	.LASF1101
	.sleb128 822
	.uleb128 0x10
	.long	.LASF1102
	.sleb128 823
	.uleb128 0x10
	.long	.LASF1103
	.sleb128 824
	.uleb128 0x10
	.long	.LASF1104
	.sleb128 825
	.uleb128 0x10
	.long	.LASF1105
	.sleb128 826
	.uleb128 0x10
	.long	.LASF1106
	.sleb128 827
	.uleb128 0x10
	.long	.LASF1107
	.sleb128 828
	.uleb128 0x10
	.long	.LASF1108
	.sleb128 829
	.uleb128 0x10
	.long	.LASF1109
	.sleb128 830
	.uleb128 0x10
	.long	.LASF1110
	.sleb128 831
	.uleb128 0x10
	.long	.LASF1111
	.sleb128 834
	.uleb128 0x10
	.long	.LASF1112
	.sleb128 835
	.uleb128 0x10
	.long	.LASF1113
	.sleb128 836
	.uleb128 0x10
	.long	.LASF1114
	.sleb128 837
	.uleb128 0x10
	.long	.LASF1115
	.sleb128 838
	.uleb128 0x10
	.long	.LASF1116
	.sleb128 839
	.uleb128 0x10
	.long	.LASF1117
	.sleb128 840
	.uleb128 0x10
	.long	.LASF1118
	.sleb128 841
	.uleb128 0x10
	.long	.LASF1119
	.sleb128 842
	.uleb128 0x10
	.long	.LASF1120
	.sleb128 843
	.uleb128 0x10
	.long	.LASF1121
	.sleb128 844
	.uleb128 0x10
	.long	.LASF1122
	.sleb128 846
	.uleb128 0x10
	.long	.LASF1123
	.sleb128 847
	.uleb128 0x10
	.long	.LASF1124
	.sleb128 848
	.uleb128 0x10
	.long	.LASF1125
	.sleb128 849
	.uleb128 0x10
	.long	.LASF1126
	.sleb128 850
	.uleb128 0x10
	.long	.LASF1127
	.sleb128 851
	.uleb128 0x10
	.long	.LASF1128
	.sleb128 852
	.uleb128 0x10
	.long	.LASF1129
	.sleb128 861
	.uleb128 0x10
	.long	.LASF1130
	.sleb128 865
	.uleb128 0x10
	.long	.LASF1131
	.sleb128 870
	.uleb128 0x10
	.long	.LASF1132
	.sleb128 871
	.uleb128 0x10
	.long	.LASF1133
	.sleb128 878
	.uleb128 0x10
	.long	.LASF1134
	.sleb128 880
	.uleb128 0x10
	.long	.LASF1135
	.sleb128 884
	.uleb128 0x10
	.long	.LASF1136
	.sleb128 888
	.uleb128 0x10
	.long	.LASF1137
	.sleb128 892
	.uleb128 0x10
	.long	.LASF1138
	.sleb128 904
	.uleb128 0x10
	.long	.LASF1139
	.sleb128 905
	.uleb128 0x10
	.long	.LASF1140
	.sleb128 906
	.uleb128 0x10
	.long	.LASF1141
	.sleb128 907
	.uleb128 0x10
	.long	.LASF1142
	.sleb128 908
	.uleb128 0x10
	.long	.LASF1143
	.sleb128 909
	.uleb128 0x10
	.long	.LASF1144
	.sleb128 913
	.uleb128 0x10
	.long	.LASF1145
	.sleb128 916
	.uleb128 0x10
	.long	.LASF1146
	.sleb128 919
	.uleb128 0x10
	.long	.LASF1147
	.sleb128 922
	.uleb128 0x10
	.long	.LASF1148
	.sleb128 925
	.uleb128 0x10
	.long	.LASF1149
	.sleb128 926
	.uleb128 0x10
	.long	.LASF1150
	.sleb128 927
	.uleb128 0x10
	.long	.LASF1151
	.sleb128 928
	.uleb128 0x10
	.long	.LASF1152
	.sleb128 932
	.uleb128 0x10
	.long	.LASF1153
	.sleb128 933
	.uleb128 0x10
	.long	.LASF1154
	.sleb128 934
	.uleb128 0x10
	.long	.LASF1155
	.sleb128 935
	.uleb128 0x10
	.long	.LASF1156
	.sleb128 939
	.uleb128 0x10
	.long	.LASF1157
	.sleb128 940
	.uleb128 0x10
	.long	.LASF1158
	.sleb128 941
	.uleb128 0x10
	.long	.LASF1159
	.sleb128 942
	.uleb128 0x10
	.long	.LASF1160
	.sleb128 946
	.uleb128 0x10
	.long	.LASF1161
	.sleb128 947
	.uleb128 0x10
	.long	.LASF1162
	.sleb128 948
	.uleb128 0x10
	.long	.LASF1163
	.sleb128 949
	.uleb128 0x10
	.long	.LASF1164
	.sleb128 951
	.uleb128 0x10
	.long	.LASF1165
	.sleb128 953
	.uleb128 0x10
	.long	.LASF1166
	.sleb128 963
	.uleb128 0x10
	.long	.LASF1167
	.sleb128 964
	.uleb128 0x10
	.long	.LASF1168
	.sleb128 965
	.uleb128 0x10
	.long	.LASF1169
	.sleb128 966
	.uleb128 0x10
	.long	.LASF1170
	.sleb128 967
	.uleb128 0x10
	.long	.LASF1171
	.sleb128 968
	.uleb128 0x10
	.long	.LASF1172
	.sleb128 969
	.uleb128 0x10
	.long	.LASF1173
	.sleb128 971
	.uleb128 0x10
	.long	.LASF1174
	.sleb128 972
	.uleb128 0x10
	.long	.LASF1175
	.sleb128 973
	.uleb128 0x10
	.long	.LASF1176
	.sleb128 974
	.uleb128 0x10
	.long	.LASF1177
	.sleb128 975
	.uleb128 0x10
	.long	.LASF1178
	.sleb128 976
	.uleb128 0x10
	.long	.LASF1179
	.sleb128 977
	.uleb128 0x10
	.long	.LASF1180
	.sleb128 978
	.uleb128 0x10
	.long	.LASF1181
	.sleb128 979
	.uleb128 0x10
	.long	.LASF1182
	.sleb128 980
	.uleb128 0x10
	.long	.LASF1183
	.sleb128 981
	.uleb128 0x10
	.long	.LASF1184
	.sleb128 982
	.uleb128 0x10
	.long	.LASF1185
	.sleb128 983
	.uleb128 0x10
	.long	.LASF1186
	.sleb128 984
	.uleb128 0x10
	.long	.LASF1187
	.sleb128 985
	.uleb128 0x10
	.long	.LASF1188
	.sleb128 986
	.uleb128 0x10
	.long	.LASF1189
	.sleb128 987
	.uleb128 0x10
	.long	.LASF1190
	.sleb128 988
	.uleb128 0x10
	.long	.LASF1191
	.sleb128 989
	.uleb128 0x10
	.long	.LASF1192
	.sleb128 990
	.uleb128 0x10
	.long	.LASF1193
	.sleb128 991
	.uleb128 0x10
	.long	.LASF1194
	.sleb128 992
	.uleb128 0x10
	.long	.LASF1195
	.sleb128 993
	.uleb128 0x10
	.long	.LASF1196
	.sleb128 994
	.uleb128 0x10
	.long	.LASF1197
	.sleb128 995
	.uleb128 0x10
	.long	.LASF1198
	.sleb128 996
	.uleb128 0x10
	.long	.LASF1199
	.sleb128 997
	.uleb128 0x10
	.long	.LASF1200
	.sleb128 998
	.uleb128 0x10
	.long	.LASF1201
	.sleb128 999
	.uleb128 0x10
	.long	.LASF1202
	.sleb128 1000
	.uleb128 0x10
	.long	.LASF1203
	.sleb128 1002
	.uleb128 0x10
	.long	.LASF1204
	.sleb128 1006
	.uleb128 0x10
	.long	.LASF1205
	.sleb128 1007
	.uleb128 0x10
	.long	.LASF1206
	.sleb128 1008
	.uleb128 0x10
	.long	.LASF1207
	.sleb128 1009
	.uleb128 0x10
	.long	.LASF1208
	.sleb128 1011
	.uleb128 0x10
	.long	.LASF1209
	.sleb128 1012
	.uleb128 0x10
	.long	.LASF1210
	.sleb128 1016
	.uleb128 0x10
	.long	.LASF1211
	.sleb128 1017
	.uleb128 0x10
	.long	.LASF1212
	.sleb128 1018
	.uleb128 0x10
	.long	.LASF1213
	.sleb128 1019
	.uleb128 0x10
	.long	.LASF1214
	.sleb128 1020
	.uleb128 0x10
	.long	.LASF1215
	.sleb128 1021
	.uleb128 0x10
	.long	.LASF1216
	.sleb128 1022
	.uleb128 0x10
	.long	.LASF1217
	.sleb128 1023
	.uleb128 0x10
	.long	.LASF1218
	.sleb128 1024
	.uleb128 0x10
	.long	.LASF1219
	.sleb128 1025
	.uleb128 0x10
	.long	.LASF1220
	.sleb128 1026
	.uleb128 0x10
	.long	.LASF1221
	.sleb128 1027
	.uleb128 0x10
	.long	.LASF1222
	.sleb128 1029
	.uleb128 0x10
	.long	.LASF1223
	.sleb128 1030
	.uleb128 0x10
	.long	.LASF1224
	.sleb128 1031
	.uleb128 0x10
	.long	.LASF1225
	.sleb128 1032
	.uleb128 0x10
	.long	.LASF1226
	.sleb128 1039
	.uleb128 0x10
	.long	.LASF1227
	.sleb128 1046
	.uleb128 0x10
	.long	.LASF1228
	.sleb128 1047
	.uleb128 0x10
	.long	.LASF1229
	.sleb128 1052
	.uleb128 0x10
	.long	.LASF1230
	.sleb128 1059
	.uleb128 0x10
	.long	.LASF1231
	.sleb128 1065
	.uleb128 0x10
	.long	.LASF1232
	.sleb128 1066
	.uleb128 0x10
	.long	.LASF1233
	.sleb128 1071
	.uleb128 0x10
	.long	.LASF1234
	.sleb128 1073
	.uleb128 0x10
	.long	.LASF1235
	.sleb128 1076
	.uleb128 0x10
	.long	.LASF1236
	.sleb128 1078
	.uleb128 0x10
	.long	.LASF1237
	.sleb128 1080
	.uleb128 0x10
	.long	.LASF1238
	.sleb128 1084
	.uleb128 0x10
	.long	.LASF1239
	.sleb128 1085
	.uleb128 0x10
	.long	.LASF1240
	.sleb128 1086
	.uleb128 0x10
	.long	.LASF1241
	.sleb128 1089
	.uleb128 0x10
	.long	.LASF1242
	.sleb128 1090
	.uleb128 0x10
	.long	.LASF1243
	.sleb128 1091
	.uleb128 0x10
	.long	.LASF1244
	.sleb128 1094
	.uleb128 0x10
	.long	.LASF1245
	.sleb128 1095
	.uleb128 0x10
	.long	.LASF1246
	.sleb128 1096
	.uleb128 0x10
	.long	.LASF1247
	.sleb128 1097
	.uleb128 0x10
	.long	.LASF1248
	.sleb128 1098
	.uleb128 0x10
	.long	.LASF1249
	.sleb128 1101
	.uleb128 0x10
	.long	.LASF1250
	.sleb128 1102
	.uleb128 0x10
	.long	.LASF1251
	.sleb128 1103
	.uleb128 0x10
	.long	.LASF1252
	.sleb128 1104
	.uleb128 0x10
	.long	.LASF1253
	.sleb128 1105
	.uleb128 0x10
	.long	.LASF1254
	.sleb128 1106
	.uleb128 0x10
	.long	.LASF1255
	.sleb128 1107
	.uleb128 0x10
	.long	.LASF1256
	.sleb128 1108
	.uleb128 0x10
	.long	.LASF1257
	.sleb128 1109
	.uleb128 0x10
	.long	.LASF1258
	.sleb128 1110
	.uleb128 0x10
	.long	.LASF1259
	.sleb128 1111
	.uleb128 0x10
	.long	.LASF1260
	.sleb128 1112
	.uleb128 0x10
	.long	.LASF1261
	.sleb128 1113
	.uleb128 0x10
	.long	.LASF1262
	.sleb128 1114
	.uleb128 0x10
	.long	.LASF1263
	.sleb128 1115
	.uleb128 0x10
	.long	.LASF1264
	.sleb128 1116
	.uleb128 0x10
	.long	.LASF1265
	.sleb128 1117
	.uleb128 0x10
	.long	.LASF1266
	.sleb128 1118
	.uleb128 0x10
	.long	.LASF1267
	.sleb128 1119
	.uleb128 0x10
	.long	.LASF1268
	.sleb128 1120
	.uleb128 0x10
	.long	.LASF1269
	.sleb128 1121
	.uleb128 0x10
	.long	.LASF1270
	.sleb128 1122
	.uleb128 0x10
	.long	.LASF1271
	.sleb128 1123
	.uleb128 0x10
	.long	.LASF1272
	.sleb128 1124
	.uleb128 0x10
	.long	.LASF1273
	.sleb128 1125
	.uleb128 0x10
	.long	.LASF1274
	.sleb128 1126
	.uleb128 0x10
	.long	.LASF1275
	.sleb128 1127
	.uleb128 0x10
	.long	.LASF1276
	.sleb128 1128
	.uleb128 0x10
	.long	.LASF1277
	.sleb128 1129
	.uleb128 0x10
	.long	.LASF1278
	.sleb128 1130
	.uleb128 0x10
	.long	.LASF1279
	.sleb128 1131
	.uleb128 0x10
	.long	.LASF1280
	.sleb128 1132
	.uleb128 0x10
	.long	.LASF1281
	.sleb128 1137
	.uleb128 0x10
	.long	.LASF1282
	.sleb128 1138
	.uleb128 0x10
	.long	.LASF1283
	.sleb128 1139
	.uleb128 0x10
	.long	.LASF1284
	.sleb128 1140
	.uleb128 0x10
	.long	.LASF1285
	.sleb128 1141
	.uleb128 0x10
	.long	.LASF1286
	.sleb128 1142
	.uleb128 0x10
	.long	.LASF1287
	.sleb128 1143
	.uleb128 0x10
	.long	.LASF1288
	.sleb128 1144
	.uleb128 0x10
	.long	.LASF1289
	.sleb128 1145
	.uleb128 0x10
	.long	.LASF1290
	.sleb128 1146
	.uleb128 0x10
	.long	.LASF1291
	.sleb128 1147
	.uleb128 0x10
	.long	.LASF1292
	.sleb128 1148
	.uleb128 0x10
	.long	.LASF1293
	.sleb128 1149
	.uleb128 0x10
	.long	.LASF1294
	.sleb128 1150
	.uleb128 0x10
	.long	.LASF1295
	.sleb128 1151
	.uleb128 0x10
	.long	.LASF1296
	.sleb128 1152
	.uleb128 0x10
	.long	.LASF1297
	.sleb128 1153
	.uleb128 0x10
	.long	.LASF1298
	.sleb128 1154
	.uleb128 0x10
	.long	.LASF1299
	.sleb128 1159
	.uleb128 0x10
	.long	.LASF1300
	.sleb128 1160
	.uleb128 0x10
	.long	.LASF1301
	.sleb128 1161
	.uleb128 0x10
	.long	.LASF1302
	.sleb128 1166
	.uleb128 0x10
	.long	.LASF1303
	.sleb128 1167
	.uleb128 0x10
	.long	.LASF1304
	.sleb128 1168
	.uleb128 0x10
	.long	.LASF1305
	.sleb128 1169
	.uleb128 0x10
	.long	.LASF1306
	.sleb128 1170
	.uleb128 0x10
	.long	.LASF1307
	.sleb128 1171
	.uleb128 0x10
	.long	.LASF1308
	.sleb128 1172
	.uleb128 0x10
	.long	.LASF1309
	.sleb128 1173
	.uleb128 0x10
	.long	.LASF1310
	.sleb128 1174
	.uleb128 0x10
	.long	.LASF1311
	.sleb128 1175
	.uleb128 0x10
	.long	.LASF1312
	.sleb128 1176
	.uleb128 0x10
	.long	.LASF1313
	.sleb128 1177
	.uleb128 0x10
	.long	.LASF1314
	.sleb128 1180
	.uleb128 0x10
	.long	.LASF1315
	.sleb128 1183
	.uleb128 0x10
	.long	.LASF1316
	.sleb128 1184
	.uleb128 0x10
	.long	.LASF1317
	.sleb128 1185
	.uleb128 0x10
	.long	.LASF1318
	.sleb128 1186
	.uleb128 0x10
	.long	.LASF1319
	.sleb128 1187
	.uleb128 0x10
	.long	.LASF1320
	.sleb128 1188
	.uleb128 0x10
	.long	.LASF1321
	.sleb128 1189
	.uleb128 0x10
	.long	.LASF1322
	.sleb128 1190
	.uleb128 0x10
	.long	.LASF1323
	.sleb128 1191
	.uleb128 0x10
	.long	.LASF1324
	.sleb128 1192
	.uleb128 0x10
	.long	.LASF1325
	.sleb128 1193
	.uleb128 0x10
	.long	.LASF1326
	.sleb128 1194
	.uleb128 0x10
	.long	.LASF1327
	.sleb128 1195
	.uleb128 0x10
	.long	.LASF1328
	.sleb128 1196
	.uleb128 0x10
	.long	.LASF1329
	.sleb128 1197
	.uleb128 0x10
	.long	.LASF1330
	.sleb128 1198
	.uleb128 0x10
	.long	.LASF1331
	.sleb128 1199
	.uleb128 0x10
	.long	.LASF1332
	.sleb128 1200
	.uleb128 0x10
	.long	.LASF1333
	.sleb128 1201
	.uleb128 0x10
	.long	.LASF1334
	.sleb128 1202
	.uleb128 0x10
	.long	.LASF1335
	.sleb128 1203
	.uleb128 0x10
	.long	.LASF1336
	.sleb128 1204
	.uleb128 0x10
	.long	.LASF1337
	.sleb128 1205
	.uleb128 0x10
	.long	.LASF1338
	.sleb128 1206
	.uleb128 0x10
	.long	.LASF1339
	.sleb128 1209
	.uleb128 0x10
	.long	.LASF1340
	.sleb128 1210
	.uleb128 0x10
	.long	.LASF1341
	.sleb128 1211
	.uleb128 0x10
	.long	.LASF1342
	.sleb128 1212
	.uleb128 0x10
	.long	.LASF1343
	.sleb128 1213
	.uleb128 0x10
	.long	.LASF1344
	.sleb128 1215
	.uleb128 0x10
	.long	.LASF1345
	.sleb128 1216
	.uleb128 0x10
	.long	.LASF1346
	.sleb128 1217
	.uleb128 0x10
	.long	.LASF1347
	.sleb128 1220
	.uleb128 0x10
	.long	.LASF1348
	.sleb128 1223
	.uleb128 0x10
	.long	.LASF1349
	.sleb128 1226
	.uleb128 0x10
	.long	.LASF1350
	.sleb128 1229
	.uleb128 0x10
	.long	.LASF1351
	.sleb128 1233
	.uleb128 0x10
	.long	.LASF1352
	.sleb128 1234
	.uleb128 0x10
	.long	.LASF1353
	.sleb128 1235
	.uleb128 0x10
	.long	.LASF1354
	.sleb128 1298
	.uleb128 0x10
	.long	.LASF1355
	.sleb128 1299
	.uleb128 0x10
	.long	.LASF1356
	.sleb128 1300
	.uleb128 0x10
	.long	.LASF1357
	.sleb128 1301
	.uleb128 0x10
	.long	.LASF1358
	.sleb128 1302
	.uleb128 0x10
	.long	.LASF1359
	.sleb128 1303
	.uleb128 0x10
	.long	.LASF1360
	.sleb128 1304
	.uleb128 0x10
	.long	.LASF1361
	.sleb128 1305
	.uleb128 0x10
	.long	.LASF1362
	.sleb128 1314
	.uleb128 0x10
	.long	.LASF1363
	.sleb128 1315
	.uleb128 0x10
	.long	.LASF1364
	.sleb128 1316
	.uleb128 0x10
	.long	.LASF1365
	.sleb128 1317
	.byte	0
	.uleb128 0x17
	.long	.LASF1366
	.byte	0x4
	.byte	0x18
	.byte	0x37
	.long	0x38dc
	.uleb128 0x10
	.long	.LASF1367
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1368
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1369
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1370
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1371
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1372
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1373
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1374
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1375
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1376
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1377
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1378
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1379
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1380
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1381
	.sleb128 14
	.uleb128 0x10
	.long	.LASF1382
	.sleb128 15
	.uleb128 0x10
	.long	.LASF1383
	.sleb128 16
	.uleb128 0x10
	.long	.LASF1384
	.sleb128 17
	.uleb128 0x10
	.long	.LASF1385
	.sleb128 18
	.uleb128 0x10
	.long	.LASF1386
	.sleb128 19
	.uleb128 0x10
	.long	.LASF1387
	.sleb128 20
	.uleb128 0x10
	.long	.LASF1388
	.sleb128 21
	.uleb128 0x10
	.long	.LASF1389
	.sleb128 22
	.uleb128 0x10
	.long	.LASF1390
	.sleb128 23
	.uleb128 0x10
	.long	.LASF1391
	.sleb128 24
	.uleb128 0x10
	.long	.LASF1392
	.sleb128 25
	.uleb128 0x10
	.long	.LASF1393
	.sleb128 26
	.uleb128 0x10
	.long	.LASF1394
	.sleb128 27
	.uleb128 0x10
	.long	.LASF1395
	.sleb128 28
	.uleb128 0x10
	.long	.LASF1396
	.sleb128 29
	.uleb128 0x10
	.long	.LASF1397
	.sleb128 30
	.uleb128 0x10
	.long	.LASF1398
	.sleb128 31
	.uleb128 0x10
	.long	.LASF1399
	.sleb128 32
	.uleb128 0x10
	.long	.LASF1400
	.sleb128 33
	.uleb128 0x10
	.long	.LASF1401
	.sleb128 34
	.uleb128 0x10
	.long	.LASF1402
	.sleb128 35
	.uleb128 0x10
	.long	.LASF1403
	.sleb128 36
	.uleb128 0x10
	.long	.LASF1404
	.sleb128 37
	.uleb128 0x10
	.long	.LASF1405
	.sleb128 38
	.uleb128 0x10
	.long	.LASF1406
	.sleb128 39
	.uleb128 0x10
	.long	.LASF1407
	.sleb128 40
	.uleb128 0x10
	.long	.LASF1408
	.sleb128 41
	.uleb128 0x10
	.long	.LASF1409
	.sleb128 42
	.uleb128 0x10
	.long	.LASF1410
	.sleb128 43
	.uleb128 0x10
	.long	.LASF1411
	.sleb128 44
	.uleb128 0x10
	.long	.LASF1412
	.sleb128 45
	.uleb128 0x10
	.long	.LASF1413
	.sleb128 46
	.uleb128 0x10
	.long	.LASF1414
	.sleb128 47
	.uleb128 0x10
	.long	.LASF1415
	.sleb128 48
	.uleb128 0x10
	.long	.LASF1416
	.sleb128 49
	.byte	0
	.uleb128 0x11
	.long	.LASF1417
	.byte	0x10
	.byte	0x1
	.value	0x16c
	.long	0x3902
	.uleb128 0x21
	.string	"r1"
	.byte	0x1
	.value	0x16e
	.long	0x2d
	.byte	0
	.uleb128 0x21
	.string	"r2"
	.byte	0x1
	.value	0x16f
	.long	0x2d
	.byte	0x8
	.byte	0
	.uleb128 0x13
	.long	.LASF1417
	.byte	0x1
	.value	0x170
	.long	0x38dc
	.uleb128 0x11
	.long	.LASF1418
	.byte	0x18
	.byte	0x1
	.value	0x172
	.long	0x3943
	.uleb128 0x12
	.long	.LASF764
	.byte	0x1
	.value	0x174
	.long	0x2d
	.byte	0
	.uleb128 0x12
	.long	.LASF1419
	.byte	0x1
	.value	0x175
	.long	0x2d
	.byte	0x8
	.uleb128 0x12
	.long	.LASF684
	.byte	0x1
	.value	0x176
	.long	0x2d
	.byte	0x10
	.byte	0
	.uleb128 0x13
	.long	.LASF1418
	.byte	0x1
	.value	0x177
	.long	0x390e
	.uleb128 0x11
	.long	.LASF1420
	.byte	0x38
	.byte	0x1
	.value	0xde9
	.long	0x39e8
	.uleb128 0x12
	.long	.LASF731
	.byte	0x1
	.value	0xdeb
	.long	0x233b
	.byte	0
	.uleb128 0x21
	.string	"giv"
	.byte	0x1
	.value	0xdec
	.long	0x224d
	.byte	0x8
	.uleb128 0x12
	.long	.LASF1421
	.byte	0x1
	.value	0xded
	.long	0x2d
	.byte	0x10
	.uleb128 0x12
	.long	.LASF377
	.byte	0x1
	.value	0xdef
	.long	0x43f
	.byte	0x18
	.uleb128 0x12
	.long	.LASF1422
	.byte	0x1
	.value	0xdf0
	.long	0x43f
	.byte	0x20
	.uleb128 0x12
	.long	.LASF1423
	.byte	0x1
	.value	0xdf2
	.long	0x436
	.byte	0x28
	.uleb128 0x12
	.long	.LASF1424
	.byte	0x1
	.value	0xdf4
	.long	0x436
	.byte	0x2c
	.uleb128 0x28
	.long	.LASF1425
	.byte	0x1
	.value	0xdf8
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x30
	.uleb128 0x28
	.long	.LASF1426
	.byte	0x1
	.value	0xdf9
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x30
	.uleb128 0x28
	.long	.LASF1427
	.byte	0x1
	.value	0xdfb
	.long	0x436
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x30
	.byte	0
	.uleb128 0x11
	.long	.LASF1428
	.byte	0x10
	.byte	0x1
	.value	0xe00
	.long	0x3a10
	.uleb128 0x12
	.long	.LASF1429
	.byte	0x1
	.value	0xe02
	.long	0x2d
	.byte	0
	.uleb128 0x12
	.long	.LASF1430
	.byte	0x1
	.value	0xe03
	.long	0x283
	.byte	0x8
	.byte	0
	.uleb128 0x11
	.long	.LASF1431
	.byte	0x8
	.byte	0x1
	.value	0x1d01
	.long	0x3a38
	.uleb128 0x12
	.long	.LASF1432
	.byte	0x1
	.value	0x1d03
	.long	0x283
	.byte	0
	.uleb128 0x12
	.long	.LASF717
	.byte	0x1
	.value	0x1d04
	.long	0x283
	.byte	0x4
	.byte	0
	.uleb128 0x11
	.long	.LASF1433
	.byte	0x10
	.byte	0x1
	.value	0x26ca
	.long	0x3a60
	.uleb128 0x12
	.long	.LASF1434
	.byte	0x1
	.value	0x26cc
	.long	0x283
	.byte	0
	.uleb128 0x21
	.string	"reg"
	.byte	0x1
	.value	0x26cd
	.long	0x2d
	.byte	0x8
	.byte	0
	.uleb128 0x29
	.long	.LASF1436
	.byte	0x1
	.value	0x191
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.uleb128 0x1
	.byte	0x9c
	.long	0x3a8e
	.uleb128 0x2a
	.string	"reg"
	.byte	0x1
	.value	0x193
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x2b
	.long	.LASF1441
	.byte	0x1
	.value	0x1a0
	.long	0x283
	.quad	.LFB3
	.quad	.LFE3-.LFB3
	.uleb128 0x1
	.byte	0x9c
	.long	0x3afa
	.uleb128 0x2c
	.long	.LASF644
	.byte	0x1
	.value	0x1a1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"end"
	.byte	0x1
	.value	0x1a1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2c
	.long	.LASF1435
	.byte	0x1
	.value	0x1a2
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x1a4
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x1a5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x29
	.long	.LASF1437
	.byte	0x1
	.value	0x1bd
	.quad	.LFB4
	.quad	.LFE4-.LFB4
	.uleb128 0x1
	.byte	0x9c
	.long	0x3bca
	.uleb128 0x2d
	.string	"f"
	.byte	0x1
	.value	0x1bf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2c
	.long	.LASF1438
	.byte	0x1
	.value	0x1c0
	.long	0x3bca
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2c
	.long	.LASF381
	.byte	0x1
	.value	0x1c1
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x1c3
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x1c4
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2e
	.long	.LASF1439
	.byte	0x1
	.value	0x1c5
	.long	0x1ebb
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF651
	.byte	0x1
	.value	0x1c6
	.long	0x3bd0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.long	.LASF1440
	.byte	0x1
	.value	0x1c7
	.long	0x3bd6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x3bec
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.12570
	.uleb128 0x30
	.quad	.LBB2
	.quad	.LBE2-.LBB2
	.uleb128 0x2e
	.long	.LASF623
	.byte	0x1
	.value	0x226
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x497
	.uleb128 0x3
	.byte	0x8
	.long	0x1ebb
	.uleb128 0x3
	.byte	0x8
	.long	0x25f4
	.uleb128 0xc
	.long	0x490
	.long	0x3bec
	.uleb128 0xd
	.long	0x29a
	.byte	0xd
	.byte	0
	.uleb128 0xa
	.long	0x3bdc
	.uleb128 0x2b
	.long	.LASF1442
	.byte	0x1
	.value	0x243
	.long	0x2d
	.quad	.LFB5
	.quad	.LFE5-.LFB5
	.uleb128 0x1
	.byte	0x9c
	.long	0x3c32
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x244
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x245
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x3c38
	.uleb128 0xa
	.long	0x1cb9
	.uleb128 0x31
	.long	.LASF1465
	.byte	0x1
	.value	0x263
	.quad	.LFB6
	.quad	.LFE6-.LFB6
	.uleb128 0x1
	.byte	0x9c
	.long	0x3eb3
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x264
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x2c
	.long	.LASF381
	.byte	0x1
	.value	0x265
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -236
	.uleb128 0x2e
	.long	.LASF766
	.byte	0x1
	.value	0x267
	.long	0x3bd6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0x268
	.long	0x3eb3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x269
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x2e
	.long	.LASF1443
	.byte	0x1
	.value	0x26a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2e
	.long	.LASF1444
	.byte	0x1
	.value	0x26b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x26c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2e
	.long	.LASF1445
	.byte	0x1
	.value	0x26e
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x2e
	.long	.LASF1446
	.byte	0x1
	.value	0x271
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x2e
	.long	.LASF1447
	.byte	0x1
	.value	0x273
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.long	.LASF1448
	.byte	0x1
	.value	0x275
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0x276
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -180
	.uleb128 0x2e
	.long	.LASF1449
	.byte	0x1
	.value	0x277
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF1450
	.byte	0x1
	.value	0x277
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2e
	.long	.LASF1451
	.byte	0x1
	.value	0x277
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x279
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.long	.LASF1452
	.byte	0x1
	.value	0x279
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF791
	.byte	0x1
	.value	0x27b
	.long	0x3eb9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF1453
	.byte	0x1
	.value	0x280
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -188
	.uleb128 0x2e
	.long	.LASF378
	.byte	0x1
	.value	0x282
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -204
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x3ecf
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.12611
	.uleb128 0x30
	.quad	.LBB3
	.quad	.LBE3-.LBB3
	.uleb128 0x2e
	.long	.LASF1455
	.byte	0x1
	.value	0x303
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x2e
	.long	.LASF1456
	.byte	0x1
	.value	0x304
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x2e
	.long	.LASF760
	.byte	0x1
	.value	0x305
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x2a
	.string	"src"
	.byte	0x1
	.value	0x306
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2e
	.long	.LASF752
	.byte	0x1
	.value	0x307
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.quad	.LBB4
	.quad	.LBE4-.LBB4
	.long	0x3e3d
	.uleb128 0x2a
	.string	"x"
	.byte	0x1
	.value	0x329
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x32
	.quad	.LBB5
	.quad	.LBE5-.LBB5
	.long	0x3e70
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x35b
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF81
	.byte	0x1
	.value	0x35c
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.byte	0
	.uleb128 0x30
	.quad	.LBB6
	.quad	.LBE6-.LBB6
	.uleb128 0x2e
	.long	.LASF81
	.byte	0x1
	.value	0x3e0
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x30
	.quad	.LBB7
	.quad	.LBE7-.LBB7
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x3e3
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2469
	.uleb128 0x3
	.byte	0x8
	.long	0x24b1
	.uleb128 0xc
	.long	0x490
	.long	0x3ecf
	.uleb128 0xd
	.long	0x29a
	.byte	0x9
	.byte	0
	.uleb128 0xa
	.long	0x3ebf
	.uleb128 0x29
	.long	.LASF1457
	.byte	0x1
	.value	0x49c
	.quad	.LFB7
	.quad	.LFE7-.LFB7
	.uleb128 0x1
	.byte	0x9c
	.long	0x3f6b
	.uleb128 0x2c
	.long	.LASF1458
	.byte	0x1
	.value	0x49d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF1459
	.byte	0x1
	.value	0x49d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2c
	.long	.LASF664
	.byte	0x1
	.value	0x49e
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x4a0
	.long	0x871
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2a
	.string	"fmt"
	.byte	0x1
	.value	0x4a1
	.long	0x68d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x4a2
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.quad	.LBB8
	.quad	.LBE8-.LBB8
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0x4be
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.uleb128 0x33
	.long	.LASF1512
	.byte	0x1
	.value	0x4d4
	.long	0x2d
	.quad	.LFB8
	.quad	.LFE8-.LFB8
	.uleb128 0x1
	.byte	0x9c
	.long	0x3fd7
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x4d5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF1460
	.byte	0x1
	.value	0x4d5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1461
	.byte	0x1
	.value	0x4d7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x4d8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF664
	.byte	0x1
	.value	0x4d9
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x2b
	.long	.LASF1462
	.byte	0x1
	.value	0x4ed
	.long	0x283
	.quad	.LFB9
	.quad	.LFE9-.LFB9
	.uleb128 0x1
	.byte	0x9c
	.long	0x4034
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x4ee
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"reg"
	.byte	0x1
	.value	0x4ee
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF81
	.byte	0x1
	.value	0x4f0
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x4f1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x34
	.long	.LASF1463
	.byte	0x1
	.value	0x523
	.long	0x283
	.quad	.LFB10
	.quad	.LFE10-.LFB10
	.uleb128 0x1
	.byte	0x9c
	.long	0x4084
	.uleb128 0x2c
	.long	.LASF457
	.byte	0x1
	.value	0x524
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x526
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF692
	.byte	0x1
	.value	0x527
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x34
	.long	.LASF1464
	.byte	0x1
	.value	0x53b
	.long	0x2d
	.quad	.LFB11
	.quad	.LFE11-.LFB11
	.uleb128 0x1
	.byte	0x9c
	.long	0x40e6
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x53c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF379
	.byte	0x1
	.value	0x53d
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.quad	.LBB9
	.quad	.LBE9-.LBB9
	.uleb128 0x2e
	.long	.LASF1449
	.byte	0x1
	.value	0x541
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1466
	.byte	0x1
	.value	0x558
	.quad	.LFB12
	.quad	.LFE12-.LFB12
	.uleb128 0x1
	.byte	0x9c
	.long	0x4171
	.uleb128 0x2c
	.long	.LASF791
	.byte	0x1
	.value	0x559
	.long	0x3eb9
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x55b
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"m1"
	.byte	0x1
	.value	0x55b
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB10
	.quad	.LBE10-.LBB10
	.uleb128 0x2e
	.long	.LASF1461
	.byte	0x1
	.value	0x560
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.quad	.LBB11
	.quad	.LBE11-.LBB11
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x563
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x35
	.long	.LASF1467
	.byte	0x1
	.value	0x578
	.quad	.LFB13
	.quad	.LFE13-.LFB13
	.uleb128 0x1
	.byte	0x9c
	.long	0x41db
	.uleb128 0x2c
	.long	.LASF791
	.byte	0x1
	.value	0x579
	.long	0x3eb9
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x57b
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"m1"
	.byte	0x1
	.value	0x57b
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.quad	.LBB12
	.quad	.LBE12-.LBB12
	.uleb128 0x2e
	.long	.LASF81
	.byte	0x1
	.value	0x581
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1468
	.byte	0x1
	.value	0x5a0
	.quad	.LFB14
	.quad	.LFE14-.LFB14
	.uleb128 0x1
	.byte	0x9c
	.long	0x42e8
	.uleb128 0x2c
	.long	.LASF791
	.byte	0x1
	.value	0x5a1
	.long	0x3eb9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2c
	.long	.LASF735
	.byte	0x1
	.value	0x5a2
	.long	0x3eb3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x5a4
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF1469
	.byte	0x1
	.value	0x5a5
	.long	0x48a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x5a6
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF1590
	.byte	0x1
	.value	0x60f
	.quad	.L288
	.uleb128 0x32
	.quad	.LBB13
	.quad	.LBE13-.LBB13
	.long	0x4289
	.uleb128 0x2a
	.string	"m1"
	.byte	0x1
	.value	0x5b0
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF81
	.byte	0x1
	.value	0x5b1
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.byte	0
	.uleb128 0x30
	.quad	.LBB14
	.quad	.LBE14-.LBB14
	.uleb128 0x2a
	.string	"m0"
	.byte	0x1
	.value	0x5e8
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB15
	.quad	.LBE15-.LBB15
	.uleb128 0x2a
	.string	"m1"
	.byte	0x1
	.value	0x5f0
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF364
	.byte	0x1
	.value	0x5f2
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF457
	.byte	0x1
	.value	0x5f3
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2b
	.long	.LASF1470
	.byte	0x1
	.value	0x61c
	.long	0x283
	.quad	.LFB15
	.quad	.LFE15-.LFB15
	.uleb128 0x1
	.byte	0x9c
	.long	0x4336
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x61d
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"num"
	.byte	0x1
	.value	0x61f
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x620
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x2b
	.long	.LASF1471
	.byte	0x1
	.value	0x62d
	.long	0x283
	.quad	.LFB16
	.quad	.LFE16-.LFB16
	.uleb128 0x1
	.byte	0x9c
	.long	0x43bb
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x62e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"y"
	.byte	0x1
	.value	0x62e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2c
	.long	.LASF791
	.byte	0x1
	.value	0x62f
	.long	0x3eb9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2a
	.string	"xn"
	.byte	0x1
	.value	0x631
	.long	0x436
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"yn"
	.byte	0x1
	.value	0x632
	.long	0x436
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2a
	.string	"mx"
	.byte	0x1
	.value	0x633
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"my"
	.byte	0x1
	.value	0x633
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x34
	.long	.LASF1472
	.byte	0x1
	.value	0x64a
	.long	0x283
	.quad	.LFB17
	.quad	.LFE17-.LFB17
	.uleb128 0x1
	.byte	0x9c
	.long	0x4470
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x64b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"y"
	.byte	0x1
	.value	0x64b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2c
	.long	.LASF791
	.byte	0x1
	.value	0x64c
	.long	0x3eb9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2c
	.long	.LASF735
	.byte	0x1
	.value	0x64d
	.long	0x3eb3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x64f
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0x650
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x651
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x652
	.long	0x871
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2a
	.string	"fmt"
	.byte	0x1
	.value	0x653
	.long	0x68d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x4480
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.12830
	.byte	0
	.uleb128 0xc
	.long	0x490
	.long	0x4480
	.uleb128 0xd
	.long	0x29a
	.byte	0x14
	.byte	0
	.uleb128 0xa
	.long	0x4470
	.uleb128 0x31
	.long	.LASF1473
	.byte	0x1
	.value	0x6c1
	.quad	.LFB18
	.quad	.LFE18-.LFB18
	.uleb128 0x1
	.byte	0x9c
	.long	0x4507
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x6c2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF620
	.byte	0x1
	.value	0x6c3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x6c5
	.long	0x871
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x6c6
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0x6c6
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"fmt"
	.byte	0x1
	.value	0x6c7
	.long	0x68d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x6c8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF1474
	.byte	0x1
	.value	0x6eb
	.quad	.LFB19
	.quad	.LFE19-.LFB19
	.uleb128 0x1
	.byte	0x9c
	.long	0x48a3
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x6ec
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -312
	.uleb128 0x2c
	.long	.LASF791
	.byte	0x1
	.value	0x6ed
	.long	0x3eb9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -320
	.uleb128 0x2c
	.long	.LASF1453
	.byte	0x1
	.value	0x6ee
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -324
	.uleb128 0x2c
	.long	.LASF1448
	.byte	0x1
	.value	0x6ef
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -328
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0x6f1
	.long	0x3eb3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x2e
	.long	.LASF80
	.byte	0x1
	.value	0x6f2
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -292
	.uleb128 0x2e
	.long	.LASF1475
	.byte	0x1
	.value	0x6f3
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x6f4
	.long	0x25ee
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x6f5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x2e
	.long	.LASF1443
	.byte	0x1
	.value	0x6f6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2e
	.long	.LASF1444
	.byte	0x1
	.value	0x6f7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2e
	.long	.LASF1476
	.byte	0x1
	.value	0x6fb
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2e
	.long	.LASF1477
	.byte	0x1
	.value	0x6fc
	.long	0x48a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x48a3
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.12910
	.uleb128 0x30
	.quad	.LBB16
	.quad	.LBE16-.LBB16
	.uleb128 0x2e
	.long	.LASF81
	.byte	0x1
	.value	0x728
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -284
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x729
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x2e
	.long	.LASF754
	.byte	0x1
	.value	0x72a
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x30
	.quad	.LBB17
	.quad	.LBE17-.LBB17
	.uleb128 0x2e
	.long	.LASF379
	.byte	0x1
	.value	0x74c
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x2a
	.string	"m1"
	.byte	0x1
	.value	0x74d
	.long	0x25ee
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x2e
	.long	.LASF364
	.byte	0x1
	.value	0x74e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x32
	.quad	.LBB18
	.quad	.LBE18-.LBB18
	.long	0x46d6
	.uleb128 0x2e
	.long	.LASF1478
	.byte	0x1
	.value	0x754
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2a
	.string	"i1"
	.byte	0x1
	.value	0x754
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2a
	.string	"r1"
	.byte	0x1
	.value	0x755
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2a
	.string	"r2"
	.byte	0x1
	.value	0x755
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.uleb128 0x32
	.quad	.LBB19
	.quad	.LBE19-.LBB19
	.long	0x471b
	.uleb128 0x2a
	.string	"i1"
	.byte	0x1
	.value	0x775
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF1449
	.byte	0x1
	.value	0x775
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x2a
	.string	"seq"
	.byte	0x1
	.value	0x775
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.byte	0
	.uleb128 0x32
	.quad	.LBB20
	.quad	.LBE20-.LBB20
	.long	0x483b
	.uleb128 0x2a
	.string	"i1"
	.byte	0x1
	.value	0x7af
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x2e
	.long	.LASF1449
	.byte	0x1
	.value	0x7af
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x32
	.quad	.LBB21
	.quad	.LBE21-.LBB21
	.long	0x47d5
	.uleb128 0x2e
	.long	.LASF1479
	.byte	0x1
	.value	0x7be
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x2e
	.long	.LASF1480
	.byte	0x1
	.value	0x7bf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x2e
	.long	.LASF1481
	.byte	0x1
	.value	0x7c0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x30
	.quad	.LBB22
	.quad	.LBE22-.LBB22
	.uleb128 0x2e
	.long	.LASF1482
	.byte	0x1
	.value	0x7c6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2a
	.string	"n"
	.byte	0x1
	.value	0x7c7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF455
	.byte	0x1
	.value	0x7c8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.byte	0
	.byte	0
	.uleb128 0x32
	.quad	.LBB23
	.quad	.LBE23-.LBB23
	.long	0x4819
	.uleb128 0x2a
	.string	"reg"
	.byte	0x1
	.value	0x815
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF1483
	.byte	0x1
	.value	0x816
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0x817
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x30
	.quad	.LBB24
	.quad	.LBE24-.LBB24
	.uleb128 0x2a
	.string	"seq"
	.byte	0x1
	.value	0x834
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x32
	.quad	.LBB25
	.quad	.LBE25-.LBB25
	.long	0x485f
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x884
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -300
	.byte	0
	.uleb128 0x30
	.quad	.LBB26
	.quad	.LBE26-.LBB26
	.uleb128 0x2e
	.long	.LASF1449
	.byte	0x1
	.value	0x89d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB27
	.quad	.LBE27-.LBB27
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x8c4
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -296
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xa
	.long	0x3bdc
	.uleb128 0x35
	.long	.LASF1484
	.byte	0x1
	.value	0x8eb
	.quad	.LFB20
	.quad	.LFE20-.LFB20
	.uleb128 0x1
	.byte	0x9c
	.long	0x48e3
	.uleb128 0x2c
	.long	.LASF791
	.byte	0x1
	.value	0x8ec
	.long	0x3eb9
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2d
	.string	"m"
	.byte	0x1
	.value	0x8ed
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF1485
	.byte	0x1
	.value	0x8f8
	.quad	.LFB21
	.quad	.LFE21-.LFB21
	.uleb128 0x1
	.byte	0x9c
	.long	0x492d
	.uleb128 0x2c
	.long	.LASF791
	.byte	0x1
	.value	0x8f9
	.long	0x3eb9
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x8fb
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1486
	.byte	0x1
	.value	0x8fc
	.long	0x25ee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x34
	.long	.LASF1487
	.byte	0x1
	.value	0x949
	.long	0x283
	.quad	.LFB22
	.quad	.LFE22-.LFB22
	.uleb128 0x1
	.byte	0x9c
	.long	0x49c7
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x94a
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x94b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x94d
	.long	0x871
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x94e
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"fmt"
	.byte	0x1
	.value	0x94f
	.long	0x68d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF360
	.byte	0x1
	.value	0x950
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.quad	.LBB28
	.quad	.LBE28-.LBB28
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0x972
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1488
	.byte	0x1
	.value	0x981
	.quad	.LFB23
	.quad	.LFE23-.LFB23
	.uleb128 0x1
	.byte	0x9c
	.long	0x4b00
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x982
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2e
	.long	.LASF637
	.byte	0x1
	.value	0x984
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x985
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.long	.LASF766
	.byte	0x1
	.value	0x986
	.long	0x3bd6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF644
	.byte	0x1
	.value	0x987
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2a
	.string	"end"
	.byte	0x1
	.value	0x988
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1489
	.byte	0x1
	.value	0x98d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.quad	.LBB29
	.quad	.LBE29-.LBB29
	.long	0x4ab9
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x9ca
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.quad	.LBB30
	.quad	.LBE30-.LBB30
	.uleb128 0x2a
	.string	"src"
	.byte	0x1
	.value	0x9ce
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF1490
	.byte	0x1
	.value	0x9cf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF1491
	.byte	0x1
	.value	0x9cf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.uleb128 0x32
	.quad	.LBB31
	.quad	.LBE31-.LBB31
	.long	0x4ade
	.uleb128 0x2a
	.string	"mem"
	.byte	0x1
	.value	0xa27
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x30
	.quad	.LBB32
	.quad	.LBE32-.LBB32
	.uleb128 0x2a
	.string	"mem"
	.byte	0x1
	.value	0xa2e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x35
	.long	.LASF1492
	.byte	0x1
	.value	0xa39
	.quad	.LFB24
	.quad	.LFE24-.LFB24
	.uleb128 0x1
	.byte	0x9c
	.long	0x4b3d
	.uleb128 0x2c
	.long	.LASF1493
	.byte	0x1
	.value	0xa3a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF623
	.byte	0x1
	.value	0xa3c
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1494
	.byte	0x1
	.value	0xa46
	.quad	.LFB25
	.quad	.LFE25-.LFB25
	.uleb128 0x1
	.byte	0x9c
	.long	0x4d75
	.uleb128 0x2d
	.string	"f"
	.byte	0x1
	.value	0xa47
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x2c
	.long	.LASF651
	.byte	0x1
	.value	0xa48
	.long	0x3bd0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0xa4a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x2e
	.long	.LASF1493
	.byte	0x1
	.value	0xa4b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x2e
	.long	.LASF1495
	.byte	0x1
	.value	0xa4c
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x2e
	.long	.LASF1496
	.byte	0x1
	.value	0xa4d
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x2e
	.long	.LASF1497
	.byte	0x1
	.value	0xa4e
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2e
	.long	.LASF623
	.byte	0x1
	.value	0xa4f
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x4d85
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.13028
	.uleb128 0x30
	.quad	.LBB33
	.quad	.LBE33-.LBB33
	.uleb128 0x2e
	.long	.LASF1498
	.byte	0x1
	.value	0xaae
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.quad	.LBB34
	.quad	.LBE34-.LBB34
	.long	0x4c33
	.uleb128 0x2e
	.long	.LASF1461
	.byte	0x1
	.value	0xab2
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.uleb128 0x30
	.quad	.LBB35
	.quad	.LBE35-.LBB35
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0xac5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2e
	.long	.LASF1499
	.byte	0x1
	.value	0xac6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.long	.LASF1500
	.byte	0x1
	.value	0xac7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x2e
	.long	.LASF1501
	.byte	0x1
	.value	0xac8
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF1502
	.byte	0x1
	.value	0xac9
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x30
	.quad	.LBB36
	.quad	.LBE36-.LBB36
	.uleb128 0x2e
	.long	.LASF1503
	.byte	0x1
	.value	0xb00
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF1504
	.byte	0x1
	.value	0xb02
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"loc"
	.byte	0x1
	.value	0xb03
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2e
	.long	.LASF1505
	.byte	0x1
	.value	0xb03
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"tmp"
	.byte	0x1
	.value	0xb04
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x30
	.quad	.LBB37
	.quad	.LBE37-.LBB37
	.uleb128 0x2e
	.long	.LASF1506
	.byte	0x1
	.value	0xb28
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1507
	.byte	0x1
	.value	0xb29
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x30
	.quad	.LBB38
	.quad	.LBE38-.LBB38
	.uleb128 0x2a
	.string	"q"
	.byte	0x1
	.value	0xb32
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2a
	.string	"r"
	.byte	0x1
	.value	0xb32
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x30
	.quad	.LBB39
	.quad	.LBE39-.LBB39
	.uleb128 0x2e
	.long	.LASF1449
	.byte	0x1
	.value	0xb40
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x490
	.long	0x4d85
	.uleb128 0xd
	.long	0x29a
	.byte	0x15
	.byte	0
	.uleb128 0xa
	.long	0x4d75
	.uleb128 0x31
	.long	.LASF1508
	.byte	0x1
	.value	0xb98
	.quad	.LFB26
	.quad	.LFE26-.LFB26
	.uleb128 0x1
	.byte	0x9c
	.long	0x4df0
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0xb99
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0xb9a
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1501
	.byte	0x1
	.value	0xb9c
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1502
	.byte	0x1
	.value	0xb9d
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0xb9e
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x34
	.long	.LASF1509
	.byte	0x1
	.value	0xc2c
	.long	0x283
	.quad	.LFB27
	.quad	.LFE27-.LFB27
	.uleb128 0x1
	.byte	0x9c
	.long	0x4e44
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0xc2d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2d
	.string	"end"
	.byte	0x1
	.value	0xc2e
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x4e54
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.13138
	.byte	0
	.uleb128 0xc
	.long	0x490
	.long	0x4e54
	.uleb128 0xd
	.long	0x29a
	.byte	0x11
	.byte	0
	.uleb128 0xa
	.long	0x4e44
	.uleb128 0x31
	.long	.LASF1510
	.byte	0x1
	.value	0xc3d
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.uleb128 0x1
	.byte	0x9c
	.long	0x4eb0
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0xc3e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"y"
	.byte	0x1
	.value	0xc3f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2c
	.long	.LASF611
	.byte	0x1
	.value	0xc40
	.long	0x43d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF766
	.byte	0x1
	.value	0xc42
	.long	0x3bd6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x35
	.long	.LASF1511
	.byte	0x1
	.value	0xc60
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.uleb128 0x1
	.byte	0x9c
	.long	0x4f07
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0xc61
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"y"
	.byte	0x1
	.value	0xc62
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2c
	.long	.LASF611
	.byte	0x1
	.value	0xc63
	.long	0x43d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0xc65
	.long	0x3eb3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x33
	.long	.LASF1513
	.byte	0x1
	.value	0xc83
	.long	0x283
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.uleb128 0x1
	.byte	0x9c
	.long	0x5016
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0xc84
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0xc85
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF766
	.byte	0x1
	.value	0xc87
	.long	0x3bd6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0xc88
	.long	0x3eb3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0xc89
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0xc8a
	.long	0x871
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2a
	.string	"fmt"
	.byte	0x1
	.value	0xc8b
	.long	0x68d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF1514
	.byte	0x1
	.value	0xc8c
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2e
	.long	.LASF1515
	.byte	0x1
	.value	0xc8d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.quad	.LBB40
	.quad	.LBE40-.LBB40
	.long	0x4fd5
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0xce5
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x30
	.quad	.LBB41
	.quad	.LBE41-.LBB41
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0xced
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.quad	.LBB42
	.quad	.LBE42-.LBB42
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0xcf0
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1516
	.byte	0x1
	.value	0xd08
	.long	0x283
	.quad	.LFB31
	.quad	.LFE31-.LFB31
	.uleb128 0x1
	.byte	0x9c
	.long	0x5121
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0xd09
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2d
	.string	"reg"
	.byte	0x1
	.value	0xd0b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2c
	.long	.LASF1517
	.byte	0x1
	.value	0xd0a
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0xd0b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0xd0d
	.long	0x3eb3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0xd0e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF81
	.byte	0x1
	.value	0xd0f
	.long	0x436
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.long	.LASF1449
	.byte	0x1
	.value	0xd10
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF379
	.byte	0x1
	.value	0xd12
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2a
	.string	"old"
	.byte	0x1
	.value	0xd13
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF360
	.byte	0x1
	.value	0xd14
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2e
	.long	.LASF1518
	.byte	0x1
	.value	0xd15
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.quad	.LBB43
	.quad	.LBE43-.LBB43
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0xd1f
	.long	0x871
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0xd20
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1519
	.byte	0x1
	.value	0xd72
	.quad	.LFB32
	.quad	.LFE32-.LFB32
	.uleb128 0x1
	.byte	0x9c
	.long	0x51a4
	.uleb128 0x2c
	.long	.LASF735
	.byte	0x1
	.value	0xd73
	.long	0x3eb3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0xd74
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0xd75
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0xd77
	.long	0x871
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2a
	.string	"fmt"
	.byte	0x1
	.value	0xd78
	.long	0x68d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0xd79
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0xd79
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF1520
	.byte	0x1
	.value	0xd9b
	.quad	.LFB33
	.quad	.LFE33-.LFB33
	.uleb128 0x1
	.byte	0x9c
	.long	0x524e
	.uleb128 0x2c
	.long	.LASF735
	.byte	0x1
	.value	0xd9c
	.long	0x3eb3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0xd9d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0xd9d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2c
	.long	.LASF1521
	.byte	0x1
	.value	0xd9e
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.quad	.LBB44
	.quad	.LBE44-.LBB44
	.uleb128 0x2e
	.long	.LASF619
	.byte	0x1
	.value	0xda7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB45
	.quad	.LBE45-.LBB45
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0xdaf
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF81
	.byte	0x1
	.value	0xdb0
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1522
	.byte	0x1
	.value	0xdd2
	.long	0x283
	.quad	.LFB34
	.quad	.LFE34-.LFB34
	.uleb128 0x1
	.byte	0x9c
	.long	0x52ba
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0xdd3
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"set"
	.byte	0x1
	.value	0xdd4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0xdd4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"reg"
	.byte	0x1
	.value	0xdd6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0xdd7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF1523
	.byte	0x1
	.value	0xe0d
	.quad	.LFB35
	.quad	.LFE35-.LFB35
	.uleb128 0x1
	.byte	0x9c
	.long	0x5311
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0xe0e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"pat"
	.byte	0x1
	.value	0xe0e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2c
	.long	.LASF611
	.byte	0x1
	.value	0xe0f
	.long	0x43d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"d"
	.byte	0x1
	.value	0xe11
	.long	0x5311
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x39e8
	.uleb128 0x34
	.long	.LASF1524
	.byte	0x1
	.value	0xe1f
	.long	0x283
	.quad	.LFB36
	.quad	.LFE36-.LFB36
	.uleb128 0x1
	.byte	0x9c
	.long	0x539f
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0xe20
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"y"
	.byte	0x1
	.value	0xe20
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0xe22
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0xe23
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0xe24
	.long	0x871
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2a
	.string	"fmt"
	.byte	0x1
	.value	0xe25
	.long	0x68d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x53af
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.13302
	.byte	0
	.uleb128 0xc
	.long	0x490
	.long	0x53af
	.uleb128 0xd
	.long	0x29a
	.byte	0x18
	.byte	0
	.uleb128 0xa
	.long	0x539f
	.uleb128 0x34
	.long	.LASF1525
	.byte	0x1
	.value	0xe72
	.long	0x43f
	.quad	.LFB37
	.quad	.LFE37-.LFB37
	.uleb128 0x1
	.byte	0x9c
	.long	0x5402
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0xe73
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF1526
	.byte	0x1
	.value	0xe75
	.long	0x43f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"exp"
	.byte	0x1
	.value	0xe76
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1527
	.byte	0x1
	.value	0xeb1
	.quad	.LFB38
	.quad	.LFE38-.LFB38
	.uleb128 0x1
	.byte	0x9c
	.long	0x569d
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0xeb2
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5848
	.uleb128 0x2e
	.long	.LASF1528
	.byte	0x1
	.value	0xeb4
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5836
	.uleb128 0x2e
	.long	.LASF1529
	.byte	0x1
	.value	0xeb5
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5832
	.uleb128 0x2e
	.long	.LASF1530
	.byte	0x1
	.value	0xeb6
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5828
	.uleb128 0x2e
	.long	.LASF1531
	.byte	0x1
	.value	0xeb7
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5800
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0xeb8
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5824
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0xeb9
	.long	0x233b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5784
	.uleb128 0x2a
	.string	"iv"
	.byte	0x1
	.value	0xeba
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5776
	.uleb128 0x2e
	.long	.LASF732
	.byte	0x1
	.value	0xebb
	.long	0x569d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5632
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0xebc
	.long	0x56ad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5744
	.uleb128 0x32
	.quad	.LBB46
	.quad	.LBE46-.LBB46
	.long	0x5582
	.uleb128 0x2a
	.string	"biv"
	.byte	0x1
	.value	0xed9
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5736
	.uleb128 0x2e
	.long	.LASF1532
	.byte	0x1
	.value	0xed9
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5768
	.uleb128 0x2e
	.long	.LASF1533
	.byte	0x1
	.value	0xeda
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5820
	.uleb128 0x30
	.quad	.LBB47
	.quad	.LBE47-.LBB47
	.uleb128 0x2e
	.long	.LASF1534
	.byte	0x1
	.value	0xf0b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5792
	.uleb128 0x2e
	.long	.LASF1449
	.byte	0x1
	.value	0xf0c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5712
	.uleb128 0x2e
	.long	.LASF377
	.byte	0x1
	.value	0xf0d
	.long	0x43f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5728
	.uleb128 0x2a
	.string	"add"
	.byte	0x1
	.value	0xf0e
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5816
	.uleb128 0x2e
	.long	.LASF1422
	.byte	0x1
	.value	0xf0f
	.long	0x43f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5720
	.uleb128 0x2a
	.string	"d"
	.byte	0x1
	.value	0xf10
	.long	0x39e8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5648
	.uleb128 0x2e
	.long	.LASF346
	.byte	0x1
	.value	0xf11
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5804
	.byte	0
	.byte	0
	.uleb128 0x32
	.quad	.LBB48
	.quad	.LBE48-.LBB48
	.long	0x563a
	.uleb128 0x2a
	.string	"y"
	.byte	0x1
	.value	0xfc0
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5812
	.uleb128 0x30
	.quad	.LBB49
	.quad	.LBE49-.LBB49
	.uleb128 0x2a
	.string	"loc"
	.byte	0x1
	.value	0xfc5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5760
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0xfc6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5752
	.uleb128 0x2e
	.long	.LASF1535
	.byte	0x1
	.value	0xfc7
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5796
	.uleb128 0x2e
	.long	.LASF1536
	.byte	0x1
	.value	0xfc8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5704
	.uleb128 0x2e
	.long	.LASF1537
	.byte	0x1
	.value	0xfc9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5696
	.uleb128 0x2a
	.string	"seq"
	.byte	0x1
	.value	0xfca
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5680
	.uleb128 0x30
	.quad	.LBB50
	.quad	.LBE50-.LBB50
	.uleb128 0x2a
	.string	"reg"
	.byte	0x1
	.value	0xfd2
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5688
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB51
	.quad	.LBE51-.LBB51
	.uleb128 0x2a
	.string	"y"
	.byte	0x1
	.value	0xff4
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5808
	.uleb128 0x30
	.quad	.LBB52
	.quad	.LBE52-.LBB52
	.uleb128 0x2a
	.string	"reg"
	.byte	0x1
	.value	0xffb
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5672
	.uleb128 0x2e
	.long	.LASF1443
	.byte	0x1
	.value	0xffc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5664
	.uleb128 0x2e
	.long	.LASF691
	.byte	0x1
	.value	0xffd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -5656
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x394f
	.long	0x56ad
	.uleb128 0xd
	.long	0x29a
	.byte	0x63
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x23a8
	.uleb128 0x29
	.long	.LASF1538
	.byte	0x1
	.value	0x1044
	.quad	.LFB39
	.quad	.LFE39-.LFB39
	.uleb128 0x1
	.byte	0x9c
	.long	0x5783
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1045
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2c
	.long	.LASF1539
	.byte	0x1
	.value	0x1046
	.long	0x279a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF1540
	.byte	0x1
	.value	0x104a
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF700
	.byte	0x1
	.value	0x104b
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2e
	.long	.LASF1541
	.byte	0x1
	.value	0x104c
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF378
	.byte	0x1
	.value	0x104d
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x104e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.quad	.LBB53
	.quad	.LBE53-.LBB53
	.long	0x5761
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x1065
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x30
	.quad	.LBB54
	.quad	.LBE54-.LBB54
	.uleb128 0x2e
	.long	.LASF1493
	.byte	0x1
	.value	0x1093
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1542
	.byte	0x1
	.value	0x10d3
	.quad	.LFB40
	.quad	.LFE40-.LFB40
	.uleb128 0x1
	.byte	0x9c
	.long	0x57ec
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x10d4
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0x10d6
	.long	0x3eb3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x10d7
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x10d9
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1543
	.byte	0x1
	.value	0x10d9
	.long	0x57ec
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x233b
	.uleb128 0x31
	.long	.LASF1544
	.byte	0x1
	.value	0x1104
	.quad	.LFB41
	.quad	.LFE41-.LFB41
	.uleb128 0x1
	.byte	0x9c
	.long	0x587c
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1105
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x1107
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x1109
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF1545
	.byte	0x1
	.value	0x110a
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x110b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.quad	.LBB55
	.quad	.LBE55-.LBB55
	.uleb128 0x2e
	.long	.LASF1546
	.byte	0x1
	.value	0x1113
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1547
	.byte	0x1
	.value	0x113c
	.quad	.LFB42
	.quad	.LFE42-.LFB42
	.uleb128 0x1
	.byte	0x9c
	.long	0x5907
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x113d
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x113f
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x1141
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF1543
	.byte	0x1
	.value	0x1142
	.long	0x57ec
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB56
	.quad	.LBE56-.LBB56
	.uleb128 0x2a
	.string	"src"
	.byte	0x1
	.value	0x1146
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1461
	.byte	0x1
	.value	0x1147
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1548
	.byte	0x1
	.value	0x1174
	.quad	.LFB43
	.quad	.LFE43-.LFB43
	.uleb128 0x1
	.byte	0x9c
	.long	0x5935
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1175
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1549
	.byte	0x1
	.value	0x1180
	.quad	.LFB44
	.quad	.LFE44-.LFB44
	.uleb128 0x1
	.byte	0x9c
	.long	0x599f
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1181
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x1183
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x1184
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB57
	.quad	.LBE57-.LBB57
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x1188
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1550
	.byte	0x1
	.value	0x1197
	.long	0x283
	.quad	.LFB45
	.quad	.LFE45-.LFB45
	.uleb128 0x1
	.byte	0x9c
	.long	0x5a10
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1198
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x1199
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LASF1453
	.byte	0x1
	.value	0x119a
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2c
	.long	.LASF1448
	.byte	0x1
	.value	0x119b
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x5a10
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.13452
	.byte	0
	.uleb128 0xa
	.long	0x4d75
	.uleb128 0x31
	.long	.LASF1551
	.byte	0x1
	.value	0x11cb
	.quad	.LFB46
	.quad	.LFE46-.LFB46
	.uleb128 0x1
	.byte	0x9c
	.long	0x5ac4
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x11cc
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x11cd
	.long	0x233b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x11cf
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.quad	.LBB58
	.quad	.LBE58-.LBB58
	.uleb128 0x2a
	.string	"tv"
	.byte	0x1
	.value	0x11d3
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.quad	.LBB59
	.quad	.LBE59-.LBB59
	.uleb128 0x2e
	.long	.LASF703
	.byte	0x1
	.value	0x11d6
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x30
	.quad	.LBB60
	.quad	.LBE60-.LBB60
	.uleb128 0x2e
	.long	.LASF1552
	.byte	0x1
	.value	0x122e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x35
	.long	.LASF1553
	.byte	0x1
	.value	0x1253
	.quad	.LFB47
	.quad	.LFE47-.LFB47
	.uleb128 0x1
	.byte	0x9c
	.long	0x5b2d
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1254
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x1255
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x1257
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.quad	.LBB61
	.quad	.LBE61-.LBB61
	.uleb128 0x2a
	.string	"v1"
	.byte	0x1
	.value	0x1262
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1554
	.byte	0x1
	.value	0x126d
	.quad	.LFB48
	.quad	.LFE48-.LFB48
	.uleb128 0x1
	.byte	0x9c
	.long	0x5bce
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x126e
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x126f
	.long	0x233b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2c
	.long	.LASF1476
	.byte	0x1
	.value	0x1270
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x1272
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.quad	.LBB62
	.quad	.LBE62-.LBB62
	.long	0x5bac
	.uleb128 0x2e
	.long	.LASF347
	.byte	0x1
	.value	0x1291
	.long	0x436
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x30
	.quad	.LBB63
	.quad	.LBE63-.LBB63
	.uleb128 0x2e
	.long	.LASF347
	.byte	0x1
	.value	0x129e
	.long	0x436
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1555
	.byte	0x1
	.value	0x12d2
	.long	0x283
	.quad	.LFB49
	.quad	.LFE49-.LFB49
	.uleb128 0x1
	.byte	0x9c
	.long	0x5c48
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x12d3
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x12d4
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2d
	.string	"v"
	.byte	0x1
	.value	0x12d5
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF1556
	.byte	0x1
	.value	0x12d6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1557
	.byte	0x1
	.value	0x12d8
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2e
	.long	.LASF692
	.byte	0x1
	.value	0x12d9
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1558
	.byte	0x1
	.value	0x131f
	.quad	.LFB50
	.quad	.LFE50-.LFB50
	.uleb128 0x1
	.byte	0x9c
	.long	0x5cd3
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1320
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x1322
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"iv"
	.byte	0x1
	.value	0x1323
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB64
	.quad	.LBE64-.LBB64
	.uleb128 0x2e
	.long	.LASF455
	.byte	0x1
	.value	0x1329
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF683
	.byte	0x1
	.value	0x132a
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1559
	.byte	0x1
	.value	0x132b
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1560
	.byte	0x1
	.value	0x1348
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x5e30
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1349
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2c
	.long	.LASF381
	.byte	0x1
	.value	0x134a
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x2e
	.long	.LASF766
	.byte	0x1
	.value	0x134c
	.long	0x3bd6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0x134d
	.long	0x3eb3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x134e
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x134f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x1351
	.long	0x233b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF1453
	.byte	0x1
	.value	0x1357
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2e
	.long	.LASF1476
	.byte	0x1
	.value	0x1359
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1561
	.byte	0x1
	.value	0x135a
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2e
	.long	.LASF1562
	.byte	0x1
	.value	0x135b
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2e
	.long	.LASF1556
	.byte	0x1
	.value	0x135c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF1448
	.byte	0x1
	.value	0x135d
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.quad	.LBB65
	.quad	.LBE65-.LBB65
	.long	0x5e0f
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x139f
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.long	.LASF692
	.byte	0x1
	.value	0x13a0
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x30
	.quad	.LBB66
	.quad	.LBE66-.LBB66
	.uleb128 0x2a
	.string	"tv"
	.byte	0x1
	.value	0x13b4
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB67
	.quad	.LBE67-.LBB67
	.uleb128 0x2a
	.string	"n"
	.byte	0x1
	.value	0x1473
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1563
	.byte	0x1
	.value	0x1483
	.long	0x2d
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x5f0b
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1484
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2d
	.string	"p"
	.byte	0x1
	.value	0x1485
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2c
	.long	.LASF1540
	.byte	0x1
	.value	0x1486
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2c
	.long	.LASF700
	.byte	0x1
	.value	0x1487
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x1489
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x148a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF688
	.byte	0x1
	.value	0x148b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1564
	.byte	0x1
	.value	0x148c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF690
	.byte	0x1
	.value	0x148d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF689
	.byte	0x1
	.value	0x148e
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB68
	.quad	.LBE68-.LBB68
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x14a1
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1565
	.byte	0x1
	.value	0x14b3
	.long	0x2d
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x603a
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x14b4
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2d
	.string	"p"
	.byte	0x1
	.value	0x14b5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2c
	.long	.LASF1540
	.byte	0x1
	.value	0x14b6
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x2c
	.long	.LASF700
	.byte	0x1
	.value	0x14b7
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0x14b9
	.long	0x3eb3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x14bb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.quad	.LBB69
	.quad	.LBE69-.LBB69
	.uleb128 0x2e
	.long	.LASF686
	.byte	0x1
	.value	0x14c2
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2e
	.long	.LASF688
	.byte	0x1
	.value	0x14c3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF691
	.byte	0x1
	.value	0x14c4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.long	.LASF690
	.byte	0x1
	.value	0x14c5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF1566
	.byte	0x1
	.value	0x14c6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.long	.LASF692
	.byte	0x1
	.value	0x14c7
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2e
	.long	.LASF1567
	.byte	0x1
	.value	0x14c8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF1568
	.byte	0x1
	.value	0x14c9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.quad	.LBB70
	.quad	.LBE70-.LBB70
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x14e4
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1569
	.byte	0x1
	.value	0x1510
	.long	0x283
	.quad	.LFB54
	.quad	.LFE54-.LFB54
	.uleb128 0x1
	.byte	0x9c
	.long	0x6097
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x1511
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x1512
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LASF1545
	.byte	0x1
	.value	0x1513
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2c
	.long	.LASF1443
	.byte	0x1
	.value	0x1514
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x31
	.long	.LASF1570
	.byte	0x1
	.value	0x1535
	.quad	.LFB55
	.quad	.LFE55-.LFB55
	.uleb128 0x1
	.byte	0x9c
	.long	0x61be
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1536
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x1537
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x1538
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2c
	.long	.LASF1540
	.byte	0x1
	.value	0x1539
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2c
	.long	.LASF700
	.byte	0x1
	.value	0x1539
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x153b
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0x153b
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x153c
	.long	0x871
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2a
	.string	"fmt"
	.byte	0x1
	.value	0x153d
	.long	0x68d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB71
	.quad	.LBE71-.LBB71
	.uleb128 0x2e
	.long	.LASF686
	.byte	0x1
	.value	0x1555
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF691
	.byte	0x1
	.value	0x1556
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF690
	.byte	0x1
	.value	0x1557
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1566
	.byte	0x1
	.value	0x1558
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF692
	.byte	0x1
	.value	0x1559
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x30
	.quad	.LBB72
	.quad	.LBE72-.LBB72
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x1565
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1571
	.byte	0x1
	.value	0x1593
	.quad	.LFB56
	.quad	.LFE56-.LFB56
	.uleb128 0x1
	.byte	0x9c
	.long	0x6281
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1595
	.long	0x1e7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"v"
	.byte	0x1
	.value	0x1596
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x1597
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF688
	.byte	0x1
	.value	0x1598
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2c
	.long	.LASF1564
	.byte	0x1
	.value	0x1599
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2c
	.long	.LASF690
	.byte	0x1
	.value	0x159a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2c
	.long	.LASF689
	.byte	0x1
	.value	0x159b
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2c
	.long	.LASF1540
	.byte	0x1
	.value	0x159c
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2c
	.long	.LASF700
	.byte	0x1
	.value	0x159d
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x159f
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x15a0
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF1572
	.byte	0x1
	.value	0x15ec
	.quad	.LFB57
	.quad	.LFE57-.LFB57
	.uleb128 0x1
	.byte	0x9c
	.long	0x63e3
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x15ee
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2d
	.string	"v"
	.byte	0x1
	.value	0x15ef
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x15f0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2c
	.long	.LASF686
	.byte	0x1
	.value	0x15f1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2c
	.long	.LASF688
	.byte	0x1
	.value	0x15f2
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2c
	.long	.LASF690
	.byte	0x1
	.value	0x15f3
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2c
	.long	.LASF691
	.byte	0x1
	.value	0x15f3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2c
	.long	.LASF1566
	.byte	0x1
	.value	0x15f3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2c
	.long	.LASF692
	.byte	0x1
	.value	0x15f4
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x2c
	.long	.LASF733
	.byte	0x1
	.value	0x15f5
	.long	0x2077
	.uleb128 0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x2c
	.long	.LASF1540
	.byte	0x1
	.value	0x15f6
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 32
	.uleb128 0x2c
	.long	.LASF700
	.byte	0x1
	.value	0x15f6
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 40
	.uleb128 0x2c
	.long	.LASF689
	.byte	0x1
	.value	0x15f7
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 48
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x15f9
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"b"
	.byte	0x1
	.value	0x15fa
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x15fb
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x15fc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF1449
	.byte	0x1
	.value	0x15fd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x63f3
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.13659
	.uleb128 0x30
	.quad	.LBB73
	.quad	.LBE73-.LBB73
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0x169c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x490
	.long	0x63f3
	.uleb128 0xd
	.long	0x29a
	.byte	0xa
	.byte	0
	.uleb128 0xa
	.long	0x63e3
	.uleb128 0x31
	.long	.LASF1573
	.byte	0x1
	.value	0x16be
	.quad	.LFB58
	.quad	.LFE58-.LFB58
	.uleb128 0x1
	.byte	0x9c
	.long	0x64ad
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x16bf
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2d
	.string	"v"
	.byte	0x1
	.value	0x16c0
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x16c2
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x16c3
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF693
	.byte	0x1
	.value	0x16c4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.quad	.LBB74
	.quad	.LBE74-.LBB74
	.uleb128 0x2e
	.long	.LASF1574
	.byte	0x1
	.value	0x16e0
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1575
	.byte	0x1
	.value	0x16e0
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x16e1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF1576
	.byte	0x1
	.value	0x16e2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1577
	.byte	0x1
	.value	0x1756
	.quad	.LFB59
	.quad	.LFE59-.LFB59
	.uleb128 0x1
	.byte	0x9c
	.long	0x6565
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1757
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2d
	.string	"p"
	.byte	0x1
	.value	0x1758
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x175a
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x175b
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"biv"
	.byte	0x1
	.value	0x175c
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"giv"
	.byte	0x1
	.value	0x175c
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0x175d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1578
	.byte	0x1
	.value	0x175e
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x30
	.quad	.LBB75
	.quad	.LBE75-.LBB75
	.uleb128 0x2e
	.long	.LASF1579
	.byte	0x1
	.value	0x1799
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1580
	.byte	0x1
	.value	0x17db
	.long	0x283
	.quad	.LFB60
	.quad	.LFE60-.LFB60
	.uleb128 0x1
	.byte	0x9c
	.long	0x666e
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x17dc
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x17dd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2c
	.long	.LASF1
	.byte	0x1
	.value	0x17de
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2c
	.long	.LASF688
	.byte	0x1
	.value	0x17df
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2d
	.string	"p"
	.byte	0x1
	.value	0x17e0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2c
	.long	.LASF1564
	.byte	0x1
	.value	0x17e1
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2c
	.long	.LASF690
	.byte	0x1
	.value	0x17e2
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2c
	.long	.LASF689
	.byte	0x1
	.value	0x17e3
	.long	0x666e
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x17e5
	.long	0x871
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.long	.LASF1581
	.byte	0x1
	.value	0x17e6
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"arg"
	.byte	0x1
	.value	0x17e6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x17e7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x17e7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB76
	.quad	.LBE76-.LBB76
	.uleb128 0x2e
	.long	.LASF619
	.byte	0x1
	.value	0x181d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x10d1
	.uleb128 0x34
	.long	.LASF1582
	.byte	0x1
	.value	0x188a
	.long	0x283
	.quad	.LFB61
	.quad	.LFE61-.LFB61
	.uleb128 0x1
	.byte	0x9c
	.long	0x6751
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x188c
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x188d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2c
	.long	.LASF686
	.byte	0x1
	.value	0x188e
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2c
	.long	.LASF691
	.byte	0x1
	.value	0x188f
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2c
	.long	.LASF690
	.byte	0x1
	.value	0x1890
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2c
	.long	.LASF1566
	.byte	0x1
	.value	0x1891
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2c
	.long	.LASF1583
	.byte	0x1
	.value	0x1892
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2c
	.long	.LASF1584
	.byte	0x1
	.value	0x1893
	.long	0x6a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2c
	.long	.LASF1585
	.byte	0x1
	.value	0x1894
	.long	0x6b3
	.uleb128 0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x1896
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1586
	.byte	0x1
	.value	0x1897
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x6751
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.13761
	.byte	0
	.uleb128 0xa
	.long	0x4d75
	.uleb128 0x34
	.long	.LASF1587
	.byte	0x1
	.value	0x18fb
	.long	0x2d
	.quad	.LFB62
	.quad	.LFE62-.LFB62
	.uleb128 0x1
	.byte	0x9c
	.long	0x68cc
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x18fc
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x18fd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2c
	.long	.LASF1566
	.byte	0x1
	.value	0x18fe
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2c
	.long	.LASF692
	.byte	0x1
	.value	0x18ff
	.long	0x6a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x1901
	.long	0x56ad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0x1902
	.long	0x3eb3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x1903
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x2e
	.long	.LASF1588
	.byte	0x1
	.value	0x1904
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.long	.LASF1589
	.byte	0x1
	.value	0x1904
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0x1905
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x68cc
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.13788
	.uleb128 0x36
	.long	.LASF1591
	.byte	0x1
	.value	0x1a3f
	.quad	.L1366
	.uleb128 0x32
	.quad	.LBB77
	.quad	.LBE77-.LBB77
	.long	0x687c
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x1a15
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB78
	.quad	.LBE78-.LBB78
	.uleb128 0x2e
	.long	.LASF1592
	.byte	0x1
	.value	0x1a22
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB79
	.quad	.LBE79-.LBB79
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x1a45
	.long	0x25ee
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF791
	.byte	0x1
	.value	0x1a46
	.long	0x3eb9
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB80
	.quad	.LBE80-.LBB80
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x1a59
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xa
	.long	0x4e44
	.uleb128 0x34
	.long	.LASF1593
	.byte	0x1
	.value	0x1aa8
	.long	0x2d
	.quad	.LFB63
	.quad	.LFE63-.LFB63
	.uleb128 0x1
	.byte	0x9c
	.long	0x690e
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x1aa9
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"c"
	.byte	0x1
	.value	0x1aa9
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x34
	.long	.LASF1594
	.byte	0x1
	.value	0x1ac2
	.long	0x2d
	.quad	.LFB64
	.quad	.LFE64-.LFB64
	.uleb128 0x1
	.byte	0x9c
	.long	0x6979
	.uleb128 0x2c
	.long	.LASF1
	.byte	0x1
	.value	0x1ac3
	.long	0x6b3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x1ac4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2d
	.string	"y"
	.byte	0x1
	.value	0x1ac4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB81
	.quad	.LBE81-.LBB81
	.uleb128 0x2a
	.string	"a"
	.byte	0x1
	.value	0x1ac8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1595
	.byte	0x1
	.value	0x1aea
	.long	0x283
	.quad	.LFB65
	.quad	.LFE65-.LFB65
	.uleb128 0x1
	.byte	0x9c
	.long	0x6aa1
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1aec
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2c
	.long	.LASF1596
	.byte	0x1
	.value	0x1aed
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x2d
	.string	"p"
	.byte	0x1
	.value	0x1aee
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2c
	.long	.LASF686
	.byte	0x1
	.value	0x1aef
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2c
	.long	.LASF688
	.byte	0x1
	.value	0x1af0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2c
	.long	.LASF691
	.byte	0x1
	.value	0x1af1
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2c
	.long	.LASF690
	.byte	0x1
	.value	0x1af2
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2c
	.long	.LASF1566
	.byte	0x1
	.value	0x1af3
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2c
	.long	.LASF1568
	.byte	0x1
	.value	0x1af4
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x1af6
	.long	0x56ad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0x1af7
	.long	0x3eb3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF379
	.byte	0x1
	.value	0x1af8
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x1af9
	.long	0x871
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2e
	.long	.LASF692
	.byte	0x1
	.value	0x1afa
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2e
	.long	.LASF1449
	.byte	0x1
	.value	0x1afb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x1afc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x1b05
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x34
	.long	.LASF1597
	.byte	0x1
	.value	0x1b5e
	.long	0x2d
	.quad	.LFB66
	.quad	.LFE66-.LFB66
	.uleb128 0x1
	.byte	0x9c
	.long	0x6bc2
	.uleb128 0x2d
	.string	"a"
	.byte	0x1
	.value	0x1b5f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2d
	.string	"b"
	.byte	0x1
	.value	0x1b5f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2c
	.long	.LASF1598
	.byte	0x1
	.value	0x1b5f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.quad	.LBB82
	.quad	.LBE82-.LBB82
	.long	0x6b4d
	.uleb128 0x2a
	.string	"ra"
	.byte	0x1
	.value	0x1b76
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2a
	.string	"rb"
	.byte	0x1
	.value	0x1b76
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"oa"
	.byte	0x1
	.value	0x1b76
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"ob"
	.byte	0x1
	.value	0x1b76
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"tmp"
	.byte	0x1
	.value	0x1b76
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x32
	.quad	.LBB83
	.quad	.LBE83-.LBB83
	.long	0x6b7f
	.uleb128 0x2a
	.string	"ra"
	.byte	0x1
	.value	0x1b99
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"oa"
	.byte	0x1
	.value	0x1b99
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x30
	.quad	.LBB84
	.quad	.LBE84-.LBB84
	.uleb128 0x2e
	.long	.LASF1599
	.byte	0x1
	.value	0x1bac
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2e
	.long	.LASF1600
	.byte	0x1
	.value	0x1bad
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x1bae
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.byte	0
	.byte	0
	.uleb128 0x33
	.long	.LASF1601
	.byte	0x1
	.value	0x1bc1
	.long	0x2d
	.quad	.LFB67
	.quad	.LFE67-.LFB67
	.uleb128 0x1
	.byte	0x9c
	.long	0x6c87
	.uleb128 0x2d
	.string	"g1"
	.byte	0x1
	.value	0x1bc2
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2d
	.string	"g2"
	.byte	0x1
	.value	0x1bc2
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF1598
	.byte	0x1
	.value	0x1bc4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2a
	.string	"add"
	.byte	0x1
	.value	0x1bc4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.quad	.LBB85
	.quad	.LBE85-.LBB85
	.long	0x6c65
	.uleb128 0x2e
	.long	.LASF1602
	.byte	0x1
	.value	0x1be0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB86
	.quad	.LBE86-.LBB86
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x1be4
	.long	0x43f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB87
	.quad	.LBE87-.LBB87
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0x1c04
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1603
	.byte	0x1
	.value	0x1c13
	.long	0x2d
	.quad	.LFB68
	.quad	.LFE68-.LFB68
	.uleb128 0x1
	.byte	0x9c
	.long	0x6ce4
	.uleb128 0x2d
	.string	"g1"
	.byte	0x1
	.value	0x1c14
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"g2"
	.byte	0x1
	.value	0x1c14
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1604
	.byte	0x1
	.value	0x1c16
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"ret"
	.byte	0x1
	.value	0x1c16
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF1605
	.byte	0x1
	.value	0x1c4b
	.quad	.LFB69
	.quad	.LFE69-.LFB69
	.uleb128 0x1
	.byte	0x9c
	.long	0x6ed0
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x1c4c
	.long	0x233b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2c
	.long	.LASF766
	.byte	0x1
	.value	0x1c4d
	.long	0x3bd6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x2e
	.long	.LASF1606
	.byte	0x1
	.value	0x1c4f
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2e
	.long	.LASF1607
	.byte	0x1
	.value	0x1c4f
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x2e
	.long	.LASF1608
	.byte	0x1
	.value	0x1c4f
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2e
	.long	.LASF1609
	.byte	0x1
	.value	0x1c50
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x2e
	.long	.LASF1610
	.byte	0x1
	.value	0x1c51
	.long	0x43f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF1611
	.byte	0x1
	.value	0x1c52
	.long	0x451
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2e
	.long	.LASF1612
	.byte	0x1
	.value	0x1c53
	.long	0x451
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2e
	.long	.LASF1613
	.byte	0x1
	.value	0x1c54
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x1c55
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x6ed0
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.13917
	.uleb128 0x32
	.quad	.LBB88
	.quad	.LBE88-.LBB88
	.long	0x6e47
	.uleb128 0x2e
	.long	.LASF1614
	.byte	0x1
	.value	0x1c64
	.long	0x451
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF1615
	.byte	0x1
	.value	0x1c64
	.long	0x451
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF1616
	.byte	0x1
	.value	0x1c65
	.long	0x43f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1617
	.byte	0x1
	.value	0x1c66
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x30
	.quad	.LBB89
	.quad	.LBE89-.LBB89
	.uleb128 0x2e
	.long	.LASF1618
	.byte	0x1
	.value	0x1c74
	.long	0x451
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF1619
	.byte	0x1
	.value	0x1c75
	.long	0x43f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB90
	.quad	.LBE90-.LBB90
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x1ca2
	.long	0x871
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2a
	.string	"ok"
	.byte	0x1
	.value	0x1ca3
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.quad	.LBB91
	.quad	.LBE91-.LBB91
	.long	0x6eac
	.uleb128 0x2e
	.long	.LASF1620
	.byte	0x1
	.value	0x1cb6
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x2a
	.string	"max"
	.byte	0x1
	.value	0x1cb7
	.long	0x451
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x30
	.quad	.LBB92
	.quad	.LBE92-.LBB92
	.uleb128 0x2a
	.string	"why"
	.byte	0x1
	.value	0x1cd2
	.long	0x68d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xa
	.long	0x539f
	.uleb128 0x33
	.long	.LASF1621
	.byte	0x1
	.value	0x1ced
	.long	0x2d
	.quad	.LFB70
	.quad	.LFE70-.LFB70
	.uleb128 0x1
	.byte	0x9c
	.long	0x6f23
	.uleb128 0x2d
	.string	"v"
	.byte	0x1
	.value	0x1cee
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF360
	.byte	0x1
	.value	0x1cef
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1622
	.byte	0x1
	.value	0x1cf1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x2b
	.long	.LASF1623
	.byte	0x1
	.value	0x1d08
	.long	0x283
	.quad	.LFB71
	.quad	.LFE71-.LFB71
	.uleb128 0x1
	.byte	0x9c
	.long	0x6f89
	.uleb128 0x2d
	.string	"xp"
	.byte	0x1
	.value	0x1d09
	.long	0x6ac
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"yp"
	.byte	0x1
	.value	0x1d0a
	.long	0x6ac
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"x"
	.byte	0x1
	.value	0x1d0c
	.long	0x6f89
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"y"
	.byte	0x1
	.value	0x1d0e
	.long	0x6f89
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"d"
	.byte	0x1
	.value	0x1d10
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0xa
	.long	0x6f8e
	.uleb128 0x3
	.byte	0x8
	.long	0x6f94
	.uleb128 0xa
	.long	0x3a10
	.uleb128 0x31
	.long	.LASF1624
	.byte	0x1
	.value	0x1d1e
	.quad	.LFB72
	.quad	.LFE72-.LFB72
	.uleb128 0x1
	.byte	0x9c
	.long	0x7159
	.uleb128 0x2c
	.long	.LASF735
	.byte	0x1
	.value	0x1d1f
	.long	0x3eb3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x1d20
	.long	0x233b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2e
	.long	.LASF1625
	.byte	0x1
	.value	0x1d23
	.long	0x27e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2a
	.string	"g1"
	.byte	0x1
	.value	0x1d25
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2a
	.string	"g2"
	.byte	0x1
	.value	0x1d25
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1626
	.byte	0x1
	.value	0x1d25
	.long	0x7159
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x1d26
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0x1d26
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2a
	.string	"k"
	.byte	0x1
	.value	0x1d26
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2e
	.long	.LASF716
	.byte	0x1
	.value	0x1d26
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2e
	.long	.LASF1627
	.byte	0x1
	.value	0x1d27
	.long	0x715f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF1628
	.byte	0x1
	.value	0x1d28
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF1629
	.byte	0x1
	.value	0x1d62
	.quad	.L1535
	.uleb128 0x32
	.quad	.LBB93
	.quad	.LBE93-.LBB93
	.long	0x70d2
	.uleb128 0x2e
	.long	.LASF1630
	.byte	0x1
	.value	0x1d3c
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2e
	.long	.LASF1592
	.byte	0x1
	.value	0x1d3d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB94
	.quad	.LBE94-.LBB94
	.uleb128 0x2e
	.long	.LASF1631
	.byte	0x1
	.value	0x1d54
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB95
	.quad	.LBE95-.LBB95
	.uleb128 0x2e
	.long	.LASF1632
	.byte	0x1
	.value	0x1d76
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.quad	.LBB96
	.quad	.LBE96-.LBB96
	.long	0x7137
	.uleb128 0x2a
	.string	"l"
	.byte	0x1
	.value	0x1d86
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x30
	.quad	.LBB97
	.quad	.LBE97-.LBB97
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x1da0
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB98
	.quad	.LBE98-.LBB98
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x1db3
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x224d
	.uleb128 0x3
	.byte	0x8
	.long	0x3a10
	.uleb128 0x34
	.long	.LASF1633
	.byte	0x1
	.value	0x1dcc
	.long	0x2d
	.quad	.LFB73
	.quad	.LFE73-.LFB73
	.uleb128 0x1
	.byte	0x9c
	.long	0x71dc
	.uleb128 0x2d
	.string	"b"
	.byte	0x1
	.value	0x1dcd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"m"
	.byte	0x1
	.value	0x1dce
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2d
	.string	"a"
	.byte	0x1
	.value	0x1dcf
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"reg"
	.byte	0x1
	.value	0x1dd0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"seq"
	.byte	0x1
	.value	0x1dd2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF1634
	.byte	0x1
	.value	0x1dd3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF1635
	.byte	0x1
	.value	0x1de4
	.quad	.LFB74
	.quad	.LFE74-.LFB74
	.uleb128 0x1
	.byte	0x9c
	.long	0x7259
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1de5
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"seq"
	.byte	0x1
	.value	0x1de6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.quad	.LBB99
	.quad	.LBE99-.LBB99
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x1dec
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.quad	.LBB100
	.quad	.LBE100-.LBB100
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x1def
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x29
	.long	.LASF1636
	.byte	0x1
	.value	0x1e00
	.quad	.LFB75
	.quad	.LFE75-.LFB75
	.uleb128 0x1
	.byte	0x9c
	.long	0x72ee
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1e01
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"b"
	.byte	0x1
	.value	0x1e02
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2d
	.string	"m"
	.byte	0x1
	.value	0x1e03
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2d
	.string	"a"
	.byte	0x1
	.value	0x1e04
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2d
	.string	"reg"
	.byte	0x1
	.value	0x1e05
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2c
	.long	.LASF1637
	.byte	0x1
	.value	0x1e06
	.long	0x1cae
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2c
	.long	.LASF1536
	.byte	0x1
	.value	0x1e07
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2a
	.string	"seq"
	.byte	0x1
	.value	0x1e09
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x29
	.long	.LASF1638
	.byte	0x1
	.value	0x1e24
	.quad	.LFB76
	.quad	.LFE76-.LFB76
	.uleb128 0x1
	.byte	0x9c
	.long	0x7364
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1e25
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"b"
	.byte	0x1
	.value	0x1e26
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2d
	.string	"m"
	.byte	0x1
	.value	0x1e27
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2d
	.string	"a"
	.byte	0x1
	.value	0x1e28
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2d
	.string	"reg"
	.byte	0x1
	.value	0x1e29
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2a
	.string	"seq"
	.byte	0x1
	.value	0x1e2b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x29
	.long	.LASF1639
	.byte	0x1
	.value	0x1e41
	.quad	.LFB77
	.quad	.LFE77-.LFB77
	.uleb128 0x1
	.byte	0x9c
	.long	0x73da
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1e42
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"b"
	.byte	0x1
	.value	0x1e43
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2d
	.string	"m"
	.byte	0x1
	.value	0x1e44
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2d
	.string	"a"
	.byte	0x1
	.value	0x1e45
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2d
	.string	"reg"
	.byte	0x1
	.value	0x1e46
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2a
	.string	"seq"
	.byte	0x1
	.value	0x1e48
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x34
	.long	.LASF1640
	.byte	0x1
	.value	0x1e5a
	.long	0x283
	.quad	.LFB78
	.quad	.LFE78-.LFB78
	.uleb128 0x1
	.byte	0x9c
	.long	0x7481
	.uleb128 0x2d
	.string	"b"
	.byte	0x1
	.value	0x1e5b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"m"
	.byte	0x1
	.value	0x1e5c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2d
	.string	"a"
	.byte	0x1
	.value	0x1e5d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2d
	.string	"reg"
	.byte	0x1
	.value	0x1e5e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF1641
	.byte	0x1
	.value	0x1e60
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.long	.LASF457
	.byte	0x1
	.value	0x1e61
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF1634
	.byte	0x1
	.value	0x1e61
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.quad	.LBB101
	.quad	.LBE101-.LBB101
	.uleb128 0x2a
	.string	"t"
	.byte	0x1
	.value	0x1e6a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1642
	.byte	0x1
	.value	0x1e77
	.long	0x283
	.quad	.LFB79
	.quad	.LFE79-.LFB79
	.uleb128 0x1
	.byte	0x9c
	.long	0x750a
	.uleb128 0x2d
	.string	"a"
	.byte	0x1
	.value	0x1e78
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"b"
	.byte	0x1
	.value	0x1e79
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x1e7b
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"tmp"
	.byte	0x1
	.value	0x1e7c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"win"
	.byte	0x1
	.value	0x1e7d
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.quad	.LBB102
	.quad	.LBE102-.LBB102
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x1e9d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1643
	.byte	0x1
	.value	0x1ec6
	.long	0x283
	.quad	.LFB80
	.quad	.LFE80-.LFB80
	.uleb128 0x1
	.byte	0x9c
	.long	0x78ac
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x1ec7
	.long	0x1e7a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -344
	.uleb128 0x2c
	.long	.LASF1448
	.byte	0x1
	.value	0x1ec8
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -348
	.uleb128 0x2e
	.long	.LASF766
	.byte	0x1
	.value	0x1eca
	.long	0x3bd6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0x1ecb
	.long	0x3eb3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x1ecc
	.long	0x56ad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x1ecd
	.long	0x233b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x2a
	.string	"reg"
	.byte	0x1
	.value	0x1ece
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.long	.LASF1644
	.byte	0x1
	.value	0x1ecf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF693
	.byte	0x1
	.value	0x1ed0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x2e
	.long	.LASF1645
	.byte	0x1
	.value	0x1ed1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x2e
	.long	.LASF1646
	.byte	0x1
	.value	0x1ed2
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF1647
	.byte	0x1
	.value	0x1ed3
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2e
	.long	.LASF1648
	.byte	0x1
	.value	0x1ed4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x1ed5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x2e
	.long	.LASF2
	.byte	0x1
	.value	0x1ed6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2e
	.long	.LASF1649
	.byte	0x1
	.value	0x1ed7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x2e
	.long	.LASF1650
	.byte	0x1
	.value	0x1ed8
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -332
	.uleb128 0x2e
	.long	.LASF1443
	.byte	0x1
	.value	0x1ed9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2e
	.long	.LASF1444
	.byte	0x1
	.value	0x1eda
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x32
	.quad	.LBB103
	.quad	.LBE103-.LBB103
	.long	0x767f
	.uleb128 0x2e
	.long	.LASF1651
	.byte	0x1
	.value	0x1ef8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.byte	0
	.uleb128 0x30
	.quad	.LBB104
	.quad	.LBE104-.LBB104
	.uleb128 0x2e
	.long	.LASF1652
	.byte	0x1
	.value	0x1f58
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -328
	.uleb128 0x2e
	.long	.LASF1653
	.byte	0x1
	.value	0x1f5a
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -324
	.uleb128 0x2e
	.long	.LASF1654
	.byte	0x1
	.value	0x1f5d
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -320
	.uleb128 0x32
	.quad	.LBB105
	.quad	.LBE105-.LBB105
	.long	0x7718
	.uleb128 0x2e
	.long	.LASF1655
	.byte	0x1
	.value	0x1f63
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2a
	.string	"blt"
	.byte	0x1
	.value	0x1f64
	.long	0x233b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x30
	.quad	.LBB106
	.quad	.LBE106-.LBB106
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x1f6d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.byte	0
	.uleb128 0x32
	.quad	.LBB107
	.quad	.LBE107-.LBB107
	.long	0x773c
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x1fa6
	.long	0x224d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.byte	0
	.uleb128 0x30
	.quad	.LBB108
	.quad	.LBE108-.LBB108
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0x1fd0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x30
	.quad	.LBB109
	.quad	.LBE109-.LBB109
	.uleb128 0x2e
	.long	.LASF691
	.byte	0x1
	.value	0x1fe5
	.long	0x43f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.long	.LASF1656
	.byte	0x1
	.value	0x1fe5
	.long	0x43f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x2e
	.long	.LASF1657
	.byte	0x1
	.value	0x1fe5
	.long	0x43f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x2e
	.long	.LASF718
	.byte	0x1
	.value	0x1fe6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x2e
	.long	.LASF774
	.byte	0x1
	.value	0x1fe6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x2e
	.long	.LASF723
	.byte	0x1
	.value	0x1fe7
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -316
	.uleb128 0x2e
	.long	.LASF1658
	.byte	0x1
	.value	0x1fe8
	.long	0x871
	.uleb128 0x3
	.byte	0x91
	.sleb128 -312
	.uleb128 0x2e
	.long	.LASF1659
	.byte	0x1
	.value	0x1fe9
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -308
	.uleb128 0x2e
	.long	.LASF1660
	.byte	0x1
	.value	0x1fea
	.long	0x451
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.quad	.LBB110
	.quad	.LBE110-.LBB110
	.long	0x7842
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x2070
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x2e
	.long	.LASF345
	.byte	0x1
	.value	0x2071
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1661
	.byte	0x1
	.value	0x2072
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x32
	.quad	.LBB111
	.quad	.LBE111-.LBB111
	.long	0x7877
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x2080
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -300
	.uleb128 0x2e
	.long	.LASF1662
	.byte	0x1
	.value	0x2081
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x30
	.quad	.LBB112
	.quad	.LBE112-.LBB112
	.uleb128 0x2e
	.long	.LASF1663
	.byte	0x1
	.value	0x20e3
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x20e4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1664
	.byte	0x1
	.value	0x2118
	.long	0x283
	.quad	.LFB81
	.quad	.LFE81-.LFB81
	.uleb128 0x1
	.byte	0x9c
	.long	0x79fe
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x2119
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x211a
	.long	0x233b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2c
	.long	.LASF1665
	.byte	0x1
	.value	0x211b
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2c
	.long	.LASF1453
	.byte	0x1
	.value	0x211c
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2c
	.long	.LASF1448
	.byte	0x1
	.value	0x211c
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x211e
	.long	0x56ad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2a
	.string	"reg"
	.byte	0x1
	.value	0x211f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x2120
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.quad	.LBB113
	.quad	.LBE113-.LBB113
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x2127
	.long	0x871
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.long	.LASF1666
	.byte	0x1
	.value	0x2128
	.long	0x1cae
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.long	.LASF1667
	.byte	0x1
	.value	0x2129
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.quad	.LBB114
	.quad	.LBE114-.LBB114
	.uleb128 0x2e
	.long	.LASF1461
	.byte	0x1
	.value	0x212e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB115
	.quad	.LBE115-.LBB115
	.uleb128 0x2e
	.long	.LASF457
	.byte	0x1
	.value	0x2132
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x2133
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.quad	.LBB116
	.quad	.LBE116-.LBB116
	.uleb128 0x2e
	.long	.LASF81
	.byte	0x1
	.value	0x2137
	.long	0x436
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.long	.LASF1668
	.byte	0x1
	.value	0x215c
	.long	0x283
	.quad	.LFB82
	.quad	.LFE82-.LFB82
	.uleb128 0x1
	.byte	0x9c
	.long	0x7a6c
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x215d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF1669
	.byte	0x1
	.value	0x215d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x215f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"q"
	.byte	0x1
	.value	0x215f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x7a6c
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14155
	.byte	0
	.uleb128 0xa
	.long	0x4e44
	.uleb128 0x34
	.long	.LASF1670
	.byte	0x1
	.value	0x217e
	.long	0x283
	.quad	.LFB83
	.quad	.LFE83-.LFB83
	.uleb128 0x1
	.byte	0x9c
	.long	0x7ac1
	.uleb128 0x2d
	.string	"biv"
	.byte	0x1
	.value	0x217f
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2d
	.string	"giv"
	.byte	0x1
	.value	0x217f
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x2180
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x34
	.long	.LASF1671
	.byte	0x1
	.value	0x219c
	.long	0x283
	.quad	.LFB84
	.quad	.LFE84-.LFB84
	.uleb128 0x1
	.byte	0x9c
	.long	0x7be3
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x219d
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x219e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x219e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x219f
	.long	0x233b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2c
	.long	.LASF1665
	.byte	0x1
	.value	0x21a0
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2c
	.long	.LASF1666
	.byte	0x1
	.value	0x21a1
	.long	0x1cae
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2c
	.long	.LASF1667
	.byte	0x1
	.value	0x21a2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x21a4
	.long	0x871
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"reg"
	.byte	0x1
	.value	0x21a5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x21a6
	.long	0x6b3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x21a7
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"arg"
	.byte	0x1
	.value	0x21a8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0x21a8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1672
	.byte	0x1
	.value	0x21ac
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2a
	.string	"fmt"
	.byte	0x1
	.value	0x21ad
	.long	0x68d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x21ae
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0x21ae
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.byte	0
	.uleb128 0x2b
	.long	.LASF1673
	.byte	0x1
	.value	0x2304
	.long	0x283
	.quad	.LFB85
	.quad	.LFE85-.LFB85
	.uleb128 0x1
	.byte	0x9c
	.long	0x7c31
	.uleb128 0x2d
	.string	"reg"
	.byte	0x1
	.value	0x2305
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x2306
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"n"
	.byte	0x1
	.value	0x2308
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x35
	.long	.LASF1674
	.byte	0x1
	.value	0x2317
	.quad	.LFB86
	.quad	.LFE86-.LFB86
	.uleb128 0x1
	.byte	0x9c
	.long	0x7c9a
	.uleb128 0x2c
	.long	.LASF619
	.byte	0x1
	.value	0x2318
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2d
	.string	"set"
	.byte	0x1
	.value	0x2319
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2c
	.long	.LASF611
	.byte	0x1
	.value	0x231a
	.long	0x43d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"ivs"
	.byte	0x1
	.value	0x231c
	.long	0x56ad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x231d
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1675
	.byte	0x1
	.value	0x2334
	.quad	.LFB87
	.quad	.LFE87-.LFB87
	.uleb128 0x1
	.byte	0x9c
	.long	0x7d23
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x2335
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x2336
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x7d23
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14245
	.uleb128 0x30
	.quad	.LBB117
	.quad	.LBE117-.LBB117
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x2346
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0x2346
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2a
	.string	"fmt"
	.byte	0x1
	.value	0x2347
	.long	0x68d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xa
	.long	0x67d
	.uleb128 0x33
	.long	.LASF1676
	.byte	0x1
	.value	0x236b
	.long	0x2d
	.quad	.LFB88
	.quad	.LFE88-.LFB88
	.uleb128 0x1
	.byte	0x9c
	.long	0x7e9d
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x236c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2c
	.long	.LASF755
	.byte	0x1
	.value	0x236d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2c
	.long	.LASF1677
	.byte	0x1
	.value	0x236e
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x2c
	.long	.LASF1678
	.byte	0x1
	.value	0x236f
	.long	0x10d1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2c
	.long	.LASF1679
	.byte	0x1
	.value	0x2370
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x2372
	.long	0x871
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.long	.LASF573
	.byte	0x1
	.value	0x2373
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x2374
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"tem"
	.byte	0x1
	.value	0x2375
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"op0"
	.byte	0x1
	.value	0x2376
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2a
	.string	"op1"
	.byte	0x1
	.value	0x2376
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF1680
	.byte	0x1
	.value	0x2377
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x2378
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.quad	.LBB118
	.quad	.LBE118-.LBB118
	.long	0x7e5d
	.uleb128 0x2a
	.string	"x"
	.byte	0x1
	.value	0x2391
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.quad	.LBB119
	.quad	.LBE119-.LBB119
	.uleb128 0x2e
	.long	.LASF1681
	.byte	0x1
	.value	0x23c3
	.long	0x6b3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB120
	.quad	.LBE120-.LBB120
	.uleb128 0x2e
	.long	.LASF1682
	.byte	0x1
	.value	0x242b
	.long	0x43f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF1683
	.byte	0x1
	.value	0x242c
	.long	0x451
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1684
	.byte	0x1
	.value	0x242d
	.long	0x451
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x33
	.long	.LASF1685
	.byte	0x1
	.value	0x2463
	.long	0x2d
	.quad	.LFB89
	.quad	.LFE89-.LFB89
	.uleb128 0x1
	.byte	0x9c
	.long	0x7f0b
	.uleb128 0x2c
	.long	.LASF2
	.byte	0x1
	.value	0x2464
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF1678
	.byte	0x1
	.value	0x2465
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF755
	.byte	0x1
	.value	0x2467
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF1677
	.byte	0x1
	.value	0x2468
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x2469
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x33
	.long	.LASF1686
	.byte	0x1
	.value	0x2480
	.long	0x2d
	.quad	.LFB90
	.quad	.LFE90-.LFB90
	.uleb128 0x1
	.byte	0x9c
	.long	0x7f59
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x2481
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x2482
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1647
	.byte	0x1
	.value	0x2484
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x34
	.long	.LASF1687
	.byte	0x1
	.value	0x2494
	.long	0x283
	.quad	.LFB91
	.quad	.LFE91-.LFB91
	.uleb128 0x1
	.byte	0x9c
	.long	0x7f9a
	.uleb128 0x2c
	.long	.LASF644
	.byte	0x1
	.value	0x2495
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x2497
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x34
	.long	.LASF1688
	.byte	0x1
	.value	0x24a5
	.long	0x283
	.quad	.LFB92
	.quad	.LFE92-.LFB92
	.uleb128 0x1
	.byte	0x9c
	.long	0x8004
	.uleb128 0x2d
	.string	"mem"
	.byte	0x1
	.value	0x24a6
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF611
	.byte	0x1
	.value	0x24a7
	.long	0x43d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF766
	.byte	0x1
	.value	0x24a9
	.long	0x3bd6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x24aa
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x24ab
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1689
	.byte	0x1
	.value	0x24ff
	.quad	.LFB93
	.quad	.LFE93-.LFB93
	.uleb128 0x1
	.byte	0x9c
	.long	0x80ab
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x2500
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2c
	.long	.LASF1690
	.byte	0x1
	.value	0x2501
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0x2503
	.long	0x3eb3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1691
	.byte	0x1
	.value	0x2504
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.long	.LASF1521
	.byte	0x1
	.value	0x2507
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x2508
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x2509
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.quad	.LBB121
	.quad	.LBE121-.LBB121
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x2537
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x2b
	.long	.LASF1692
	.byte	0x1
	.value	0x2561
	.long	0x283
	.quad	.LFB94
	.quad	.LFE94-.LFB94
	.uleb128 0x1
	.byte	0x9c
	.long	0x80fb
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x2562
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF379
	.byte	0x1
	.value	0x2564
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x2565
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1693
	.byte	0x1
	.value	0x2572
	.quad	.LFB95
	.quad	.LFE95-.LFB95
	.uleb128 0x1
	.byte	0x9c
	.long	0x847c
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x2573
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -344
	.uleb128 0x2e
	.long	.LASF766
	.byte	0x1
	.value	0x2575
	.long	0x3bd6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x2e
	.long	.LASF735
	.byte	0x1
	.value	0x2576
	.long	0x3eb3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2e
	.long	.LASF1445
	.byte	0x1
	.value	0x2577
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -324
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x2578
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -320
	.uleb128 0x2a
	.string	"p"
	.byte	0x1
	.value	0x2579
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x2e
	.long	.LASF1694
	.byte	0x1
	.value	0x2579
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2e
	.long	.LASF1493
	.byte	0x1
	.value	0x257a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x2e
	.long	.LASF1695
	.byte	0x1
	.value	0x257b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x2e
	.long	.LASF1696
	.byte	0x1
	.value	0x257d
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -316
	.uleb128 0x2e
	.long	.LASF1697
	.byte	0x1
	.value	0x257e
	.long	0x436
	.uleb128 0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x847c
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14365
	.uleb128 0x32
	.quad	.LBB122
	.quad	.LBE122-.LBB122
	.long	0x845b
	.uleb128 0x2e
	.long	.LASF1698
	.byte	0x1
	.value	0x25c6
	.long	0x1c03
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF1699
	.byte	0x1
	.value	0x25c7
	.long	0x1c03
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF1700
	.byte	0x1
	.value	0x25c8
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -312
	.uleb128 0x2a
	.string	"reg"
	.byte	0x1
	.value	0x25c9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2a
	.string	"mem"
	.byte	0x1
	.value	0x25ca
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2e
	.long	.LASF1515
	.byte	0x1
	.value	0x25cb
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x32
	.quad	.LBB123
	.quad	.LBE123-.LBB123
	.long	0x8270
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0x25eb
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -308
	.byte	0
	.uleb128 0x32
	.quad	.LBB124
	.quad	.LBE124-.LBB124
	.long	0x8296
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x261d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.byte	0
	.uleb128 0x30
	.quad	.LBB125
	.quad	.LBE125-.LBB125
	.uleb128 0x2a
	.string	"e"
	.byte	0x1
	.value	0x264d
	.long	0x282b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x264e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2e
	.long	.LASF1701
	.byte	0x1
	.value	0x264f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x2a
	.string	"j"
	.byte	0x1
	.value	0x2650
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x2e
	.long	.LASF591
	.byte	0x1
	.value	0x2651
	.long	0x281a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x32
	.quad	.LBB126
	.quad	.LBE126-.LBB126
	.long	0x8329
	.uleb128 0x2e
	.long	.LASF1460
	.byte	0x1
	.value	0x2655
	.long	0x281a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x2e
	.long	.LASF1702
	.byte	0x1
	.value	0x2656
	.long	0x281a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.byte	0
	.uleb128 0x32
	.quad	.LBB127
	.quad	.LBE127-.LBB127
	.long	0x83c3
	.uleb128 0x2e
	.long	.LASF1703
	.byte	0x1
	.value	0x269f
	.long	0x183d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x2e
	.long	.LASF1704
	.byte	0x1
	.value	0x269f
	.long	0x436
	.uleb128 0x3
	.byte	0x91
	.sleb128 -284
	.uleb128 0x2e
	.long	.LASF1705
	.byte	0x1
	.value	0x269f
	.long	0x436
	.uleb128 0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x2e
	.long	.LASF1706
	.byte	0x1
	.value	0x269f
	.long	0x436
	.uleb128 0x3
	.byte	0x91
	.sleb128 -300
	.uleb128 0x30
	.quad	.LBB128
	.quad	.LBE128-.LBB128
	.uleb128 0x2e
	.long	.LASF1707
	.byte	0x1
	.value	0x269f
	.long	0x451
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x30
	.quad	.LBB129
	.quad	.LBE129-.LBB129
	.uleb128 0x2e
	.long	.LASF1708
	.byte	0x1
	.value	0x269f
	.long	0x451
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB130
	.quad	.LBE130-.LBB130
	.uleb128 0x2e
	.long	.LASF1703
	.byte	0x1
	.value	0x26a6
	.long	0x183d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x2e
	.long	.LASF1704
	.byte	0x1
	.value	0x26a6
	.long	0x436
	.uleb128 0x3
	.byte	0x91
	.sleb128 -276
	.uleb128 0x2e
	.long	.LASF1705
	.byte	0x1
	.value	0x26a6
	.long	0x436
	.uleb128 0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x2e
	.long	.LASF1706
	.byte	0x1
	.value	0x26a6
	.long	0x436
	.uleb128 0x3
	.byte	0x91
	.sleb128 -292
	.uleb128 0x30
	.quad	.LBB131
	.quad	.LBE131-.LBB131
	.uleb128 0x2e
	.long	.LASF1707
	.byte	0x1
	.value	0x26a6
	.long	0x451
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x30
	.quad	.LBB132
	.quad	.LBE132-.LBB132
	.uleb128 0x2e
	.long	.LASF1708
	.byte	0x1
	.value	0x26a6
	.long	0x451
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB133
	.quad	.LBE133-.LBB133
	.uleb128 0x2a
	.string	"rr"
	.byte	0x1
	.value	0x26b3
	.long	0x3902
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0xa
	.long	0x3ebf
	.uleb128 0x35
	.long	.LASF1709
	.byte	0x1
	.value	0x26d3
	.quad	.LFB96
	.quad	.LFE96-.LFB96
	.uleb128 0x1
	.byte	0x9c
	.long	0x84d8
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x26d4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF1710
	.byte	0x1
	.value	0x26d4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2d
	.string	"arg"
	.byte	0x1
	.value	0x26d5
	.long	0x43d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2a
	.string	"t"
	.byte	0x1
	.value	0x26d7
	.long	0x84d8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x3a38
	.uleb128 0x31
	.long	.LASF1711
	.byte	0x1
	.value	0x26e2
	.quad	.LFB97
	.quad	.LFE97-.LFB97
	.uleb128 0x1
	.byte	0x9c
	.long	0x8627
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x26e3
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2c
	.long	.LASF1419
	.byte	0x1
	.value	0x26e4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2c
	.long	.LASF81
	.byte	0x1
	.value	0x26e5
	.long	0x436
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2e
	.long	.LASF1712
	.byte	0x1
	.value	0x26e8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.long	.LASF720
	.byte	0x1
	.value	0x26e9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x26ea
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.long	.LASF1713
	.byte	0x1
	.value	0x26ec
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.long	.LASF1714
	.byte	0x1
	.value	0x26ed
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x8627
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14472
	.uleb128 0x32
	.quad	.LBB134
	.quad	.LBE134-.LBB134
	.long	0x85f5
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x26f3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB135
	.quad	.LBE135-.LBB135
	.uleb128 0x2a
	.string	"arg"
	.byte	0x1
	.value	0x270e
	.long	0x3a38
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.quad	.LBB136
	.quad	.LBE136-.LBB136
	.uleb128 0x2e
	.long	.LASF1461
	.byte	0x1
	.value	0x271a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB137
	.quad	.LBE137-.LBB137
	.uleb128 0x2e
	.long	.LASF364
	.byte	0x1
	.value	0x272d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF1715
	.byte	0x1
	.value	0x272e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xa
	.long	0x3bdc
	.uleb128 0x31
	.long	.LASF1716
	.byte	0x1
	.value	0x2746
	.quad	.LFB98
	.quad	.LFE98-.LFB98
	.uleb128 0x1
	.byte	0x9c
	.long	0x8669
	.uleb128 0x2c
	.long	.LASF364
	.byte	0x1
	.value	0x2747
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF457
	.byte	0x1
	.value	0x2748
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF1717
	.byte	0x1
	.value	0x2760
	.quad	.LFB99
	.quad	.LFE99-.LFB99
	.uleb128 0x1
	.byte	0x9c
	.long	0x8715
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x2761
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2c
	.long	.LASF1419
	.byte	0x1
	.value	0x2762
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2c
	.long	.LASF81
	.byte	0x1
	.value	0x2763
	.long	0x436
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2e
	.long	.LASF684
	.byte	0x1
	.value	0x2765
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"set"
	.byte	0x1
	.value	0x2766
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF1718
	.byte	0x1
	.value	0x2767
	.long	0x436
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.quad	.LBB138
	.quad	.LBE138-.LBB138
	.uleb128 0x2e
	.long	.LASF1537
	.byte	0x1
	.value	0x277b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1719
	.byte	0x1
	.value	0x277c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF1720
	.byte	0x1
	.value	0x27b7
	.long	0x283
	.quad	.LFB100
	.quad	.LFE100-.LFB100
	.uleb128 0x1
	.byte	0x9c
	.long	0x8772
	.uleb128 0x2d
	.string	"mem"
	.byte	0x1
	.value	0x27b8
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF611
	.byte	0x1
	.value	0x27b9
	.long	0x43d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1721
	.byte	0x1
	.value	0x27bb
	.long	0x8772
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2a
	.string	"m"
	.byte	0x1
	.value	0x27bc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x3943
	.uleb128 0x31
	.long	.LASF1722
	.byte	0x1
	.value	0x27db
	.quad	.LFB101
	.quad	.LFE101-.LFB101
	.uleb128 0x1
	.byte	0x9c
	.long	0x87d4
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x27dc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"mem"
	.byte	0x1
	.value	0x27dd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2d
	.string	"reg"
	.byte	0x1
	.value	0x27de
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF1721
	.byte	0x1
	.value	0x27e0
	.long	0x3943
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x34
	.long	.LASF1723
	.byte	0x1
	.value	0x27ee
	.long	0x283
	.quad	.LFB102
	.quad	.LFE102-.LFB102
	.uleb128 0x1
	.byte	0x9c
	.long	0x8830
	.uleb128 0x2d
	.string	"px"
	.byte	0x1
	.value	0x27ef
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF611
	.byte	0x1
	.value	0x27f0
	.long	0x43d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"x"
	.byte	0x1
	.value	0x27f2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1721
	.byte	0x1
	.value	0x27f3
	.long	0x8772
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1724
	.byte	0x1
	.value	0x27ff
	.quad	.LFB103
	.quad	.LFE103-.LFB103
	.uleb128 0x1
	.byte	0x9c
	.long	0x888c
	.uleb128 0x2c
	.long	.LASF684
	.byte	0x1
	.value	0x2800
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.string	"reg"
	.byte	0x1
	.value	0x2801
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2c
	.long	.LASF1419
	.byte	0x1
	.value	0x2802
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.long	.LASF1721
	.byte	0x1
	.value	0x2804
	.long	0x3943
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x2b
	.long	.LASF1725
	.byte	0x1
	.value	0x2812
	.long	0x283
	.quad	.LFB104
	.quad	.LFE104-.LFB104
	.uleb128 0x1
	.byte	0x9c
	.long	0x88f6
	.uleb128 0x2d
	.string	"x"
	.byte	0x1
	.value	0x2813
	.long	0x10d1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF611
	.byte	0x1
	.value	0x2814
	.long	0x43d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2a
	.string	"l"
	.byte	0x1
	.value	0x2816
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.long	.LASF1726
	.byte	0x1
	.value	0x2817
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1507
	.byte	0x1
	.value	0x2818
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x34
	.long	.LASF1727
	.byte	0x1
	.value	0x282e
	.long	0x2d
	.quad	.LFB105
	.quad	.LFE105-.LFB105
	.uleb128 0x1
	.byte	0x9c
	.long	0x8955
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x282f
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF1666
	.byte	0x1
	.value	0x2830
	.long	0x1cae
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LASF1667
	.byte	0x1
	.value	0x2831
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF1728
	.byte	0x1
	.value	0x2832
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x33
	.long	.LASF1729
	.byte	0x1
	.value	0x283d
	.long	0x2d
	.quad	.LFB106
	.quad	.LFE106-.LFB106
	.uleb128 0x1
	.byte	0x9c
	.long	0x89b4
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x283e
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF1666
	.byte	0x1
	.value	0x283f
	.long	0x1cae
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LASF1667
	.byte	0x1
	.value	0x2840
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF1728
	.byte	0x1
	.value	0x2841
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x34
	.long	.LASF1730
	.byte	0x1
	.value	0x284d
	.long	0x2d
	.quad	.LFB107
	.quad	.LFE107-.LFB107
	.uleb128 0x1
	.byte	0x9c
	.long	0x8a13
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x284e
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF1666
	.byte	0x1
	.value	0x284f
	.long	0x1cae
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LASF1667
	.byte	0x1
	.value	0x2850
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF1728
	.byte	0x1
	.value	0x2851
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x33
	.long	.LASF1731
	.byte	0x1
	.value	0x285a
	.long	0x2d
	.quad	.LFB108
	.quad	.LFE108-.LFB108
	.uleb128 0x1
	.byte	0x9c
	.long	0x8a54
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x285b
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF1728
	.byte	0x1
	.value	0x285c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x34
	.long	.LASF1732
	.byte	0x1
	.value	0x2865
	.long	0x2d
	.quad	.LFB109
	.quad	.LFE109-.LFB109
	.uleb128 0x1
	.byte	0x9c
	.long	0x8a95
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x2866
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF1728
	.byte	0x1
	.value	0x2867
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x33
	.long	.LASF1733
	.byte	0x1
	.value	0x2870
	.long	0x2d
	.quad	.LFB110
	.quad	.LFE110-.LFB110
	.uleb128 0x1
	.byte	0x9c
	.long	0x8ad6
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x2871
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF1728
	.byte	0x1
	.value	0x2872
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x34
	.long	.LASF1734
	.byte	0x1
	.value	0x287e
	.long	0x2d
	.quad	.LFB111
	.quad	.LFE111-.LFB111
	.uleb128 0x1
	.byte	0x9c
	.long	0x8b17
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x287f
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF1728
	.byte	0x1
	.value	0x2880
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF1735
	.byte	0x1
	.value	0x2889
	.quad	.LFB112
	.quad	.LFE112-.LFB112
	.uleb128 0x1
	.byte	0x9c
	.long	0x8b80
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x288a
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LASF1736
	.byte	0x1
	.value	0x288b
	.long	0x3bca
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2c
	.long	.LASF1737
	.byte	0x1
	.value	0x288c
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2a
	.string	"bl"
	.byte	0x1
	.value	0x288e
	.long	0x233b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.long	.LASF1738
	.byte	0x1
	.value	0x288f
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x31
	.long	.LASF1739
	.byte	0x1
	.value	0x28a2
	.quad	.LFB113
	.quad	.LFE113-.LFB113
	.uleb128 0x1
	.byte	0x9c
	.long	0x8bf5
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x28a3
	.long	0x8bf5
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LASF1736
	.byte	0x1
	.value	0x28a4
	.long	0x3bca
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2c
	.long	.LASF1737
	.byte	0x1
	.value	0x28a5
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2a
	.string	"v"
	.byte	0x1
	.value	0x28a7
	.long	0x224d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.long	.LASF1613
	.byte	0x1
	.value	0x28a8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2a
	.string	"i"
	.byte	0x1
	.value	0x28a9
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x8bfb
	.uleb128 0xa
	.long	0x2253
	.uleb128 0x31
	.long	.LASF1740
	.byte	0x1
	.value	0x28e3
	.quad	.LFB114
	.quad	.LFE114-.LFB114
	.uleb128 0x1
	.byte	0x9c
	.long	0x8c4a
	.uleb128 0x2d
	.string	"v"
	.byte	0x1
	.value	0x28e4
	.long	0x8c4a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF1736
	.byte	0x1
	.value	0x28e5
	.long	0x3bca
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LASF1737
	.byte	0x1
	.value	0x28e6
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x8c50
	.uleb128 0xa
	.long	0x2090
	.uleb128 0x31
	.long	.LASF1741
	.byte	0x1
	.value	0x28fd
	.quad	.LFB115
	.quad	.LFE115-.LFB115
	.uleb128 0x1
	.byte	0x9c
	.long	0x8cb2
	.uleb128 0x2d
	.string	"v"
	.byte	0x1
	.value	0x28fe
	.long	0x8c4a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LASF1736
	.byte	0x1
	.value	0x28ff
	.long	0x3bca
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LASF1737
	.byte	0x1
	.value	0x2900
	.long	0x283
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.long	.LASF1454
	.long	0x8cb2
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14609
	.byte	0
	.uleb128 0xa
	.long	0x3bdc
	.uleb128 0x29
	.long	.LASF1742
	.byte	0x1
	.value	0x293d
	.quad	.LFB116
	.quad	.LFE116-.LFB116
	.uleb128 0x1
	.byte	0x9c
	.long	0x8ce5
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x293e
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x29
	.long	.LASF1743
	.byte	0x1
	.value	0x2945
	.quad	.LFB117
	.quad	.LFE117-.LFB117
	.uleb128 0x1
	.byte	0x9c
	.long	0x8d12
	.uleb128 0x2d
	.string	"bl"
	.byte	0x1
	.value	0x2946
	.long	0x8bf5
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x29
	.long	.LASF1744
	.byte	0x1
	.value	0x294d
	.quad	.LFB118
	.quad	.LFE118-.LFB118
	.uleb128 0x1
	.byte	0x9c
	.long	0x8d3e
	.uleb128 0x2d
	.string	"v"
	.byte	0x1
	.value	0x294e
	.long	0x8c4a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x29
	.long	.LASF1745
	.byte	0x1
	.value	0x2955
	.quad	.LFB119
	.quad	.LFE119-.LFB119
	.uleb128 0x1
	.byte	0x9c
	.long	0x8d6a
	.uleb128 0x2d
	.string	"v"
	.byte	0x1
	.value	0x2956
	.long	0x8c4a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1746
	.byte	0x1
	.value	0x2969
	.quad	.LFB120
	.quad	.LFE120-.LFB120
	.uleb128 0x1
	.byte	0x9c
	.long	0x8dc9
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x296a
	.long	0x3c32
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2c
	.long	.LASF1736
	.byte	0x1
	.value	0x296b
	.long	0x3bca
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2c
	.long	.LASF1737
	.byte	0x1
	.value	0x296c
	.long	0x283
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2e
	.long	.LASF1493
	.byte	0x1
	.value	0x296e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x29
	.long	.LASF1747
	.byte	0x1
	.value	0x29ac
	.quad	.LFB121
	.quad	.LFE121-.LFB121
	.uleb128 0x1
	.byte	0x9c
	.long	0x8df7
	.uleb128 0x2c
	.long	.LASF623
	.byte	0x1
	.value	0x29ad
	.long	0x3c32
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x29
	.long	.LASF1748
	.byte	0x1
	.value	0x29b5
	.quad	.LFB122
	.quad	.LFE122-.LFB122
	.uleb128 0x1
	.byte	0x9c
	.long	0x8e25
	.uleb128 0x2c
	.long	.LASF651
	.byte	0x1
	.value	0x29b6
	.long	0x8e25
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x8e2b
	.uleb128 0xa
	.long	0x1ebb
	.uleb128 0x37
	.long	.LASF1749
	.byte	0x1
	.byte	0xac
	.long	0x283
	.uleb128 0x9
	.byte	0x3
	.quad	max_luid
	.uleb128 0x37
	.long	.LASF1750
	.byte	0x1
	.byte	0xb1
	.long	0x283
	.uleb128 0x9
	.byte	0x3
	.quad	max_loop_num
	.uleb128 0x37
	.long	.LASF1751
	.byte	0x1
	.byte	0xb8
	.long	0x283
	.uleb128 0x9
	.byte	0x3
	.quad	loop_max_reg
	.uleb128 0x2e
	.long	.LASF1752
	.byte	0x1
	.value	0x180
	.long	0x283
	.uleb128 0x9
	.byte	0x3
	.quad	indirect_jump_in_function
	.uleb128 0x2e
	.long	.LASF1753
	.byte	0x1
	.value	0x18b
	.long	0x283
	.uleb128 0x9
	.byte	0x3
	.quad	copy_cost
	.uleb128 0x2e
	.long	.LASF1754
	.byte	0x1
	.value	0x18e
	.long	0x283
	.uleb128 0x9
	.byte	0x3
	.quad	reg_address_cost
	.uleb128 0x2e
	.long	.LASF1755
	.byte	0x1
	.value	0x1018
	.long	0x2d
	.uleb128 0x9
	.byte	0x3
	.quad	note_insn
	.uleb128 0x2e
	.long	.LASF1756
	.byte	0x1
	.value	0x101c
	.long	0x2d
	.uleb128 0x9
	.byte	0x3
	.quad	addr_placeholder
	.uleb128 0x38
	.long	.LASF1757
	.byte	0x4
	.byte	0x5e
	.long	0x8ee8
	.uleb128 0x3
	.byte	0x8
	.long	0x8eee
	.uleb128 0xa
	.long	0x139
	.uleb128 0x38
	.long	.LASF1758
	.byte	0x4
	.byte	0x62
	.long	0x283
	.uleb128 0x38
	.long	.LASF1759
	.byte	0x4
	.byte	0xd7
	.long	0x27e
	.uleb128 0x38
	.long	.LASF1760
	.byte	0x4
	.byte	0xe2
	.long	0x283
	.uleb128 0x39
	.long	.LASF1761
	.byte	0x4
	.value	0x19c
	.long	0x2d9
	.uleb128 0x38
	.long	.LASF1762
	.byte	0x7
	.byte	0xaa
	.long	0x661
	.uleb128 0xc
	.long	0x828
	.long	0x8f3b
	.uleb128 0xd
	.long	0x29a
	.byte	0x3a
	.byte	0
	.uleb128 0x38
	.long	.LASF196
	.byte	0x9
	.byte	0x34
	.long	0x8f46
	.uleb128 0xa
	.long	0x8f2b
	.uleb128 0xc
	.long	0x458
	.long	0x8f5b
	.uleb128 0xd
	.long	0x29a
	.byte	0x3a
	.byte	0
	.uleb128 0x38
	.long	.LASF1763
	.byte	0x9
	.byte	0x50
	.long	0x8f66
	.uleb128 0xa
	.long	0x8f4b
	.uleb128 0xc
	.long	0x45f
	.long	0x8f7b
	.uleb128 0xd
	.long	0x29a
	.byte	0x3a
	.byte	0
	.uleb128 0x38
	.long	.LASF1764
	.byte	0x9
	.byte	0x60
	.long	0x8f86
	.uleb128 0xa
	.long	0x8f6b
	.uleb128 0xc
	.long	0x451
	.long	0x8f9b
	.uleb128 0xd
	.long	0x29a
	.byte	0x3a
	.byte	0
	.uleb128 0x38
	.long	.LASF1765
	.byte	0x9
	.byte	0x6a
	.long	0x8fa6
	.uleb128 0xa
	.long	0x8f8b
	.uleb128 0x38
	.long	.LASF1766
	.byte	0x9
	.byte	0x7b
	.long	0x8fb6
	.uleb128 0xa
	.long	0x8f4b
	.uleb128 0xc
	.long	0x6b3
	.long	0x8fcb
	.uleb128 0xd
	.long	0x29a
	.byte	0x8
	.byte	0
	.uleb128 0x38
	.long	.LASF1767
	.byte	0x9
	.byte	0x9d
	.long	0x8fd6
	.uleb128 0xa
	.long	0x8fbb
	.uleb128 0x38
	.long	.LASF1768
	.byte	0x9
	.byte	0xa4
	.long	0x6b3
	.uleb128 0xc
	.long	0x458
	.long	0x8ff6
	.uleb128 0xd
	.long	0x29a
	.byte	0x98
	.byte	0
	.uleb128 0x38
	.long	.LASF1769
	.byte	0x2
	.byte	0x36
	.long	0x9001
	.uleb128 0xa
	.long	0x8fe6
	.uleb128 0xc
	.long	0x68d
	.long	0x9016
	.uleb128 0xd
	.long	0x29a
	.byte	0x98
	.byte	0
	.uleb128 0x38
	.long	.LASF1770
	.byte	0x2
	.byte	0x3c
	.long	0x9021
	.uleb128 0xa
	.long	0x9006
	.uleb128 0xc
	.long	0x490
	.long	0x9036
	.uleb128 0xd
	.long	0x29a
	.byte	0x98
	.byte	0
	.uleb128 0x38
	.long	.LASF1771
	.byte	0x2
	.byte	0x3f
	.long	0x9041
	.uleb128 0xa
	.long	0x9026
	.uleb128 0xc
	.long	0x2d
	.long	0x9056
	.uleb128 0xd
	.long	0x29a
	.byte	0x80
	.byte	0
	.uleb128 0x39
	.long	.LASF1772
	.byte	0x2
	.value	0x611
	.long	0x9046
	.uleb128 0xc
	.long	0x2d
	.long	0x9078
	.uleb128 0xd
	.long	0x29a
	.byte	0x2
	.uleb128 0xd
	.long	0x29a
	.byte	0x3a
	.byte	0
	.uleb128 0x39
	.long	.LASF1773
	.byte	0x2
	.value	0x619
	.long	0x9062
	.uleb128 0xc
	.long	0x2d
	.long	0x9094
	.uleb128 0xd
	.long	0x29a
	.byte	0xa
	.byte	0
	.uleb128 0x39
	.long	.LASF1774
	.byte	0x2
	.value	0x652
	.long	0x9084
	.uleb128 0x39
	.long	.LASF1775
	.byte	0x2
	.value	0x660
	.long	0x2d
	.uleb128 0x39
	.long	.LASF1776
	.byte	0xd
	.value	0x1e4
	.long	0x1776
	.uleb128 0xc
	.long	0x490
	.long	0x90c8
	.uleb128 0xd
	.long	0x29a
	.byte	0x34
	.byte	0
	.uleb128 0x39
	.long	.LASF1777
	.byte	0xf
	.value	0x196
	.long	0x90b8
	.uleb128 0x39
	.long	.LASF1778
	.byte	0xf
	.value	0x1b9
	.long	0x17d4
	.uleb128 0x39
	.long	.LASF1779
	.byte	0xf
	.value	0x1e1
	.long	0x283
	.uleb128 0x39
	.long	.LASF1780
	.byte	0xc
	.value	0x11a
	.long	0x1bf2
	.uleb128 0x38
	.long	.LASF1781
	.byte	0x12
	.byte	0x41
	.long	0x1bf2
	.uleb128 0x38
	.long	.LASF1782
	.byte	0x12
	.byte	0xc4
	.long	0x2d
	.uleb128 0xc
	.long	0x1fb8
	.long	0x9119
	.uleb128 0x3a
	.byte	0
	.uleb128 0x38
	.long	.LASF663
	.byte	0x13
	.byte	0xf9
	.long	0x9124
	.uleb128 0xa
	.long	0x910e
	.uleb128 0x38
	.long	.LASF1783
	.byte	0x14
	.byte	0x2a
	.long	0x203a
	.uleb128 0x38
	.long	.LASF1784
	.byte	0x14
	.byte	0x41
	.long	0x283
	.uleb128 0x38
	.long	.LASF1785
	.byte	0x14
	.byte	0xfe
	.long	0x283
	.uleb128 0x39
	.long	.LASF1786
	.byte	0x14
	.value	0x102
	.long	0x283
	.uleb128 0x39
	.long	.LASF1787
	.byte	0x14
	.value	0x109
	.long	0x283
	.uleb128 0x39
	.long	.LASF1788
	.byte	0x14
	.value	0x113
	.long	0x283
	.uleb128 0x39
	.long	.LASF1789
	.byte	0x14
	.value	0x11c
	.long	0x283
	.uleb128 0x39
	.long	.LASF1790
	.byte	0x14
	.value	0x1a9
	.long	0x283
	.uleb128 0x39
	.long	.LASF1791
	.byte	0x14
	.value	0x282
	.long	0x283
	.uleb128 0x3b
	.long	.LASF1792
	.byte	0x1
	.byte	0x9f
	.long	0x6a6
	.uleb128 0x9
	.byte	0x3
	.quad	uid_luid
	.uleb128 0x3b
	.long	.LASF1793
	.byte	0x1
	.byte	0xa8
	.long	0x283
	.uleb128 0x9
	.byte	0x3
	.quad	max_uid_for_loop
	.uleb128 0x3b
	.long	.LASF1794
	.byte	0x1
	.byte	0xb5
	.long	0x436
	.uleb128 0x9
	.byte	0x3
	.quad	max_reg_before_loop
	.uleb128 0x3b
	.long	.LASF1795
	.byte	0x1
	.byte	0xa4
	.long	0x91e6
	.uleb128 0x9
	.byte	0x3
	.quad	uid_loop
	.uleb128 0x3
	.byte	0x8
	.long	0x1e7a
	.uleb128 0x3b
	.long	.LASF1796
	.byte	0x1
	.byte	0xea
	.long	0x3bca
	.uleb128 0x9
	.byte	0x3
	.quad	loop_dump_stream
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x17
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x21
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x22
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x23
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x24
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x25
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x26
	.uleb128 0x17
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x27
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x28
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x29
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2a
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2b
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2c
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2d
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2e
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2f
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x34
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x30
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.byte	0
	.byte	0
	.uleb128 0x31
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x32
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x33
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x34
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x35
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x36
	.uleb128 0xa
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x37
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x38
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x39
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x3a
	.uleb128 0x21
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3b
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF399:
	.string	"REG_BR_PROB"
.LASF429:
	.string	"NOTE_INSN_EH_REGION_BEG"
.LASF528:
	.string	"profile_label_no"
.LASF706:
	.string	"lifetime"
.LASF1424:
	.string	"total_bytes"
.LASF352:
	.string	"rtstr"
.LASF1636:
	.string	"loop_iv_add_mult_emit_before"
.LASF1265:
	.string	"CODE_FOR_sgt"
.LASF1050:
	.string	"CODE_FOR_mmx_uavgv4hi3"
.LASF1497:
	.string	"next_loop"
.LASF416:
	.string	"NOTE_INSN_DELETED"
.LASF773:
	.string	"has_indirect_jump"
.LASF1759:
	.string	"x86_use_loop"
.LASF1040:
	.string	"CODE_FOR_mulv4hi3"
.LASF1711:
	.string	"try_copy_prop"
.LASF128:
	.string	"_unused2"
.LASF280:
	.string	"UMOD"
.LASF334:
	.string	"min_align"
.LASF954:
	.string	"CODE_FOR_strlenqi_1"
.LASF974:
	.string	"CODE_FOR_sse_movups"
.LASF114:
	.string	"_fileno"
.LASF794:
	.string	"val_rtx"
.LASF1683:
	.string	"uconst_val"
.LASF585:
	.string	"varray_data_tag"
.LASF1136:
	.string	"CODE_FOR_zero_extendsidi2"
.LASF1453:
	.string	"threshold"
.LASF59:
	.string	"AD_REGS"
.LASF1223:
	.string	"CODE_FOR_neghi2"
.LASF1443:
	.string	"loop_start"
.LASF1231:
	.string	"CODE_FOR_absxf2"
.LASF1037:
	.string	"CODE_FOR_sssubv4hi3"
.LASF364:
	.string	"first"
.LASF1743:
	.string	"debug_iv_class"
.LASF1783:
	.string	"write_symbols"
.LASF1133:
	.string	"CODE_FOR_zero_extendhisi2"
.LASF1237:
	.string	"CODE_FOR_ashldi3"
.LASF1388:
	.string	"OTI_ashl"
.LASF1448:
	.string	"insn_count"
.LASF522:
	.string	"inlinable"
.LASF554:
	.string	"uses_const_pool"
.LASF1169:
	.string	"CODE_FOR_addtf3"
.LASF1095:
	.string	"CODE_FOR_pf2id"
.LASF993:
	.string	"CODE_FOR_mulv4sf3"
.LASF981:
	.string	"CODE_FOR_sse_movhlps"
.LASF1390:
	.string	"OTI_ashr"
.LASF1490:
	.string	"label1"
.LASF1470:
	.string	"num_unmoved_movables"
.LASF321:
	.string	"CONSTANT_P_RTX"
.LASF1688:
	.string	"insert_loop_mem"
.LASF1577:
	.string	"update_giv_derive"
.LASF1086:
	.string	"CODE_FOR_subv2sf3"
.LASF898:
	.string	"CODE_FOR_return_internal"
.LASF1096:
	.string	"CODE_FOR_pf2iw"
.LASF1563:
	.string	"check_insn_for_bivs"
.LASF1055:
	.string	"CODE_FOR_eqv8qi3"
.LASF1266:
	.string	"CODE_FOR_sgtu"
.LASF631:
	.string	"entry_edges"
.LASF1391:
	.string	"OTI_rotl"
.LASF1392:
	.string	"OTI_rotr"
.LASF1681:
	.string	"inner_mode"
.LASF1525:
	.string	"remove_constant_addition"
.LASF351:
	.string	"rtuint"
.LASF809:
	.string	"PRED_LOOP_EXIT"
.LASF860:
	.string	"CODE_FOR_floathixf2"
.LASF715:
	.string	"biv_count"
.LASF355:
	.string	"rt_cselib"
.LASF1747:
	.string	"debug_loop"
.LASF970:
	.string	"CODE_FOR_movv2si_internal"
.LASF224:
	.string	"DEFINE_PEEPHOLE2"
.LASF1587:
	.string	"simplify_giv_expr"
.LASF12:
	.string	"rtvec_def"
.LASF527:
	.string	"inl_max_label_num"
.LASF1107:
	.string	"CODE_FOR_pfrsqit1v2sf3"
.LASF284:
	.string	"LSHIFTRT"
.LASF941:
	.string	"CODE_FOR_strsethi_1"
.LASF1635:
	.string	"loop_regs_update"
.LASF1539:
	.string	"fncall"
.LASF1210:
	.string	"CODE_FOR_andhi3"
.LASF1282:
	.string	"CODE_FOR_bne"
.LASF218:
	.string	"MATCH_PAR_DUP"
.LASF119:
	.string	"_shortbuf"
.LASF1799:
	.string	"/home/yunqi/SPEC2006/benchspec/CPU2006/403.gcc/build/build_base_amd64-m64-gcc43-nn.0000"
.LASF913:
	.string	"CODE_FOR_sqrtdf2_1_sse_only"
.LASF279:
	.string	"UDIV"
.LASF10:
	.string	"rtvec"
.LASF1567:
	.string	"regnote"
.LASF697:
	.string	"ignore"
.LASF1027:
	.string	"CODE_FOR_addv4hi3"
.LASF699:
	.string	"always_executed"
.LASF906:
	.string	"CODE_FOR_leave"
.LASF716:
	.string	"giv_count"
.LASF758:
	.string	"done"
.LASF1788:
	.string	"flag_move_all_movables"
.LASF212:
	.string	"MATCH_OPERAND"
.LASF1198:
	.string	"CODE_FOR_divxf3"
.LASF763:
	.string	"savemode"
.LASF700:
	.string	"maybe_multiple"
.LASF461:
	.string	"x_first_label_num"
.LASF193:
	.string	"CCFPmode"
.LASF1679:
	.string	"want_reg"
.LASF1745:
	.string	"debug_giv"
.LASF1278:
	.string	"CODE_FOR_sunle"
.LASF1734:
	.string	"loop_insn_sink_or_swim"
.LASF749:
	.string	"movable"
.LASF1279:
	.string	"CODE_FOR_sunlt"
.LASF51:
	.string	"reg_class"
.LASF1280:
	.string	"CODE_FOR_sltgt"
.LASF1651:
	.string	"jump1"
.LASF301:
	.string	"UNLE"
.LASF63:
	.string	"LEGACY_REGS"
.LASF339:
	.string	"max_after_base"
.LASF766:
	.string	"loop_info"
.LASF1323:
	.string	"CODE_FOR_strmovhi_rex64"
.LASF923:
	.string	"CODE_FOR_cosxf2"
.LASF302:
	.string	"UNLT"
.LASF785:
	.string	"mems_idx"
.LASF989:
	.string	"CODE_FOR_addv4sf3"
.LASF1767:
	.string	"class_narrowest_mode"
.LASF1460:
	.string	"equiv"
.LASF834:
	.string	"CODE_FOR_zero_extendsidi2_32"
.LASF1742:
	.string	"debug_ivs"
.LASF1607:
	.string	"se_ok"
.LASF555:
	.string	"uses_pic_offset_table"
.LASF1124:
	.string	"CODE_FOR_movstricthi"
.LASF561:
	.string	"initial_value_struct"
.LASF1342:
	.string	"CODE_FOR_movsfcc"
.LASF1560:
	.string	"strength_reduce"
.LASF891:
	.string	"CODE_FOR_x86_shrd_1"
.LASF1175:
	.string	"CODE_FOR_subqi3"
.LASF621:
	.string	"probability"
.LASF1290:
	.string	"CODE_FOR_bleu"
.LASF165:
	.string	"CTImode"
.LASF100:
	.string	"_flags"
.LASF1529:
	.string	"num_real_prefetches"
.LASF1650:
	.string	"compare_and_branch"
.LASF455:
	.string	"next"
.LASF1785:
	.string	"flag_float_store"
.LASF625:
	.string	"latch"
.LASF1423:
	.string	"bytes_accesed"
.LASF1649:
	.string	"first_compare"
.LASF734:
	.string	"loop_ivs"
.LASF973:
	.string	"CODE_FOR_sse_movaps"
.LASF95:
	.string	"__off_t"
.LASF1622:
	.string	"ext_dep"
.LASF741:
	.string	"set_in_loop"
.LASF1722:
	.string	"replace_loop_mems"
.LASF28:
	.string	"int_store"
.LASF1230:
	.string	"CODE_FOR_absdf2"
.LASF1744:
	.string	"debug_biv"
.LASF1271:
	.string	"CODE_FOR_sle"
.LASF1102:
	.string	"CODE_FOR_pavgusb"
.LASF163:
	.string	"CSImode"
.LASF65:
	.string	"FP_TOP_REG"
.LASF323:
	.string	"VEC_MERGE"
.LASF525:
	.string	"original_decl_initial"
.LASF1267:
	.string	"CODE_FOR_slt"
.LASF944:
	.string	"CODE_FOR_strsetqi_rex_1"
.LASF1247:
	.string	"CODE_FOR_ashrqi3"
.LASF808:
	.string	"PRED_LOOP_BRANCH"
.LASF746:
	.string	"loop_regs"
.LASF1659:
	.string	"comparison_const_width"
.LASF1614:
	.string	"abs_incr"
.LASF120:
	.string	"_lock"
.LASF587:
	.string	"uhint"
.LASF256:
	.string	"RETURN"
.LASF1091:
	.string	"CODE_FOR_pfmaxv2sf3"
.LASF670:
	.string	"output_format"
.LASF588:
	.string	"generic"
.LASF1052:
	.string	"CODE_FOR_mmx_pinsrw"
.LASF979:
	.string	"CODE_FOR_sse_movntv4sf"
.LASF14:
	.string	"elem"
.LASF663:
	.string	"insn_data"
.LASF1754:
	.string	"reg_address_cost"
.LASF199:
	.string	"MODE_FLOAT"
.LASF1575:
	.string	"before_giv_insn"
.LASF1088:
	.string	"CODE_FOR_gtv2sf3"
.LASF859:
	.string	"CODE_FOR_floathidf2"
.LASF1122:
	.string	"CODE_FOR_movsi"
.LASF1045:
	.string	"CODE_FOR_mmx_xordi3"
.LASF1656:
	.string	"add_adjust"
.LASF1224:
	.string	"CODE_FOR_negqi2"
.LASF1395:
	.string	"OTI_umin"
.LASF955:
	.string	"CODE_FOR_strlenqi_rex_1"
.LASF343:
	.string	"alias"
.LASF340:
	.string	"offset_unsigned"
.LASF1209:
	.string	"CODE_FOR_andsi3"
.LASF169:
	.string	"V2SImode"
.LASF1644:
	.string	"jump_label"
.LASF551:
	.string	"stdarg"
.LASF512:
	.string	"x_trampoline_list"
.LASF1202:
	.string	"CODE_FOR_divmoddi4"
.LASF1713:
	.string	"replaced_last"
.LASF1445:
	.string	"maybe_never"
.LASF724:
	.string	"reversed"
.LASF722:
	.string	"incremented"
.LASF60:
	.string	"Q_REGS"
.LASF243:
	.string	"CODE_LABEL"
.LASF164:
	.string	"CDImode"
.LASF249:
	.string	"UNSPEC"
.LASF1524:
	.string	"rtx_equal_for_prefetch_p"
.LASF29:
	.string	"fp_move"
.LASF17:
	.string	"shift_var"
.LASF242:
	.string	"BARRIER"
.LASF422:
	.string	"NOTE_INSN_LOOP_VTOP"
.LASF245:
	.string	"COND_EXEC"
.LASF886:
	.string	"CODE_FOR_absdf2_ifs"
.LASF259:
	.string	"CONST_INT"
.LASF759:
	.string	"partial"
.LASF255:
	.string	"CALL"
.LASF964:
	.string	"CODE_FOR_allocate_stack_worker_rex64"
.LASF1235:
	.string	"CODE_FOR_one_cmplhi2"
.LASF1339:
	.string	"CODE_FOR_movdicc"
.LASF85:
	.string	"maybe_vaarg"
.LASF533:
	.string	"epilogue_delay_list"
.LASF635:
	.string	"exits_doms"
.LASF171:
	.string	"V4QImode"
.LASF1204:
	.string	"CODE_FOR_udivmodhi4"
.LASF788:
	.string	"unknown_constant_address_altered"
.LASF234:
	.string	"ATTR"
.LASF687:
	.string	"giv_type"
.LASF379:
	.string	"count"
.LASF1495:
	.string	"num_loops"
.LASF353:
	.string	"rttype"
.LASF1098:
	.string	"CODE_FOR_pfnacc"
.LASF1770:
	.string	"rtx_format"
.LASF54:
	.string	"DREG"
.LASF1155:
	.string	"CODE_FOR_fix_truncsfsi2"
.LASF369:
	.string	"head_tree"
.LASF1001:
	.string	"CODE_FOR_sqrtv4sf2"
.LASF72:
	.string	"FLOAT_SSE_REGS"
.LASF720:
	.string	"init_insn"
.LASF446:
	.string	"GR_VIRTUAL_STACK_ARGS"
.LASF1125:
	.string	"CODE_FOR_movqi"
.LASF1796:
	.string	"loop_dump_stream"
.LASF1126:
	.string	"CODE_FOR_reload_outqi"
.LASF170:
	.string	"V2DImode"
.LASF502:
	.string	"x_return_label"
.LASF1393:
	.string	"OTI_smin"
.LASF46:
	.string	"PROCESSOR_K6"
.LASF984:
	.string	"CODE_FOR_sse_movlps"
.LASF646:
	.string	"sink"
.LASF612:
	.string	"varray_type"
.LASF348:
	.string	"mem_attrs"
.LASF1066:
	.string	"CODE_FOR_ashrv2si3"
.LASF106:
	.string	"_IO_write_end"
.LASF393:
	.string	"REG_UNUSED"
.LASF227:
	.string	"DEFINE_DELAY"
.LASF277:
	.string	"MINUS"
.LASF509:
	.string	"x_clobber_return_insn"
.LASF745:
	.string	"moved_once"
.LASF1028:
	.string	"CODE_FOR_addv2si3"
.LASF57:
	.string	"SIREG"
.LASF1132:
	.string	"CODE_FOR_movtf"
.LASF26:
	.string	"movzbl_load"
.LASF1299:
	.string	"CODE_FOR_indirect_jump"
.LASF1089:
	.string	"CODE_FOR_gev2sf3"
.LASF1060:
	.string	"CODE_FOR_gtv2si3"
.LASF693:
	.string	"final_value"
.LASF592:
	.string	"sched_info_tag"
.LASF1458:
	.string	"in_this"
.LASF267:
	.string	"STRICT_LOW_PART"
.LASF830:
	.string	"CODE_FOR_popdi1"
.LASF757:
	.string	"global"
.LASF1354:
	.string	"CODE_FOR_conditional_trap"
.LASF1347:
	.string	"CODE_FOR_mindf3"
.LASF712:
	.string	"same_insn"
.LASF1061:
	.string	"CODE_FOR_umaxv8qi3"
.LASF1078:
	.string	"CODE_FOR_mmx_punpckhdq"
.LASF209:
	.string	"INCLUDE"
.LASF655:
	.string	"shared_headers"
.LASF1206:
	.string	"CODE_FOR_testqi_ccz_1"
.LASF1706:
	.string	"word_num_"
.LASF442:
	.string	"GR_FRAME_POINTER"
.LASF1568:
	.string	"last_consec_insn"
.LASF377:
	.string	"index"
.LASF599:
	.string	"freq"
.LASF305:
	.string	"ZERO_EXTEND"
.LASF308:
	.string	"FLOAT_TRUNCATE"
.LASF477:
	.string	"x_forced_labels"
.LASF1219:
	.string	"CODE_FOR_xorqi3"
.LASF493:
	.string	"internal_arg_pointer"
.LASF1012:
	.string	"CODE_FOR_sse_comi"
.LASF1434:
	.string	"set_seen"
.LASF1777:
	.string	"call_used_regs"
.LASF1586:
	.string	"orig_x"
.LASF439:
	.string	"GR_PC"
.LASF1146:
	.string	"CODE_FOR_truncxfdf2"
.LASF1119:
	.string	"CODE_FOR_cmptf"
.LASF56:
	.string	"BREG"
.LASF180:
	.string	"V2SFmode"
.LASF606:
	.string	"varray_data"
.LASF563:
	.string	"machine_function"
.LASF1753:
	.string	"copy_cost"
.LASF309:
	.string	"FLOAT"
.LASF1794:
	.string	"max_reg_before_loop"
.LASF792:
	.string	"pre_header_has_call"
.LASF405:
	.string	"REG_EH_CONTEXT"
.LASF135:
	.string	"machine_mode"
.LASF1429:
	.string	"mem_address"
.LASF743:
	.string	"single_usage"
.LASF1519:
	.string	"find_single_use_in_loop"
.LASF1662:
	.string	"sub_insn"
.LASF1591:
	.string	"do_default"
.LASF1065:
	.string	"CODE_FOR_ashrv4hi3"
.LASF1476:
	.string	"reg_map"
.LASF358:
	.string	"rtmem"
.LASF521:
	.string	"fixup_var_refs_queue"
.LASF1601:
	.string	"express_from"
.LASF1666:
	.string	"where_bb"
.LASF318:
	.string	"RANGE_REG"
.LASF782:
	.string	"used_count_register"
.LASF39:
	.string	"prefetch_block"
.LASF977:
	.string	"CODE_FOR_mmx_maskmovq"
.LASF572:
	.string	"bitmap_element_def"
.LASF3:
	.string	"call"
.LASF142:
	.string	"TImode"
.LASF1483:
	.string	"sequence"
.LASF294:
	.string	"PRE_MODIFY"
.LASF1106:
	.string	"CODE_FOR_pfrsqrtv2sf2"
.LASF1631:
	.string	"this_combine"
.LASF1559:
	.string	"next_induction"
.LASF1355:
	.string	"CODE_FOR_movti"
.LASF846:
	.string	"CODE_FOR_fix_truncdi_nomemory"
.LASF1273:
	.string	"CODE_FOR_sunordered"
.LASF536:
	.string	"returns_pointer"
.LASF1094:
	.string	"CODE_FOR_femms"
.LASF1617:
	.string	"neg_incr"
.LASF1099:
	.string	"CODE_FOR_pfpnacc"
.LASF1613:
	.string	"incr"
.LASF1542:
	.string	"loop_bivs_find"
.LASF1328:
	.string	"CODE_FOR_strsetdi_rex64"
.LASF307:
	.string	"FLOAT_EXTEND"
.LASF876:
	.string	"CODE_FOR_udivmodsi4"
.LASF596:
	.string	"last_note_uid"
.LASF480:
	.string	"stmt"
.LASF1669:
	.string	"reference"
.LASF6:
	.string	"in_struct"
.LASF1682:
	.string	"const_val"
.LASF828:
	.string	"CODE_FOR_movsi_insv_1"
.LASF1041:
	.string	"CODE_FOR_smulv4hi3_highpart"
.LASF27:
	.string	"int_load"
.LASF1630:
	.string	"this_benefit"
.LASF140:
	.string	"SImode"
.LASF1188:
	.string	"CODE_FOR_mulditi3"
.LASF251:
	.string	"ADDR_VEC"
.LASF1174:
	.string	"CODE_FOR_subhi3"
.LASF31:
	.string	"fp_store"
.LASF559:
	.string	"stmt_status"
.LASF1341:
	.string	"CODE_FOR_movhicc"
.LASF945:
	.string	"CODE_FOR_rep_stosdi_rex64"
.LASF181:
	.string	"V2DFmode"
.LASF1383:
	.string	"OTI_umod"
.LASF333:
	.string	"LAST_AND_UNUSED_RTX_CODE"
.LASF800:
	.string	"PRED_COMBINED"
.LASF910:
	.string	"CODE_FOR_sqrtsf2_1_sse_only"
.LASF1548:
	.string	"loop_givs_find"
.LASF1409:
	.string	"OTI_ucmp"
.LASF1701:
	.string	"best"
.LASF347:
	.string	"align"
.LASF835:
	.string	"CODE_FOR_zero_extendsidi2_rex64"
.LASF84:
	.string	"sse_regno"
.LASF366:
	.string	"indx"
.LASF1751:
	.string	"loop_max_reg"
.LASF529:
	.string	"machine"
.LASF912:
	.string	"CODE_FOR_sqrtdf2_1"
.LASF1455:
	.string	"tem1"
.LASF629:
	.string	"nodes"
.LASF776:
	.string	"final_equiv_value"
.LASF890:
	.string	"CODE_FOR_ashrdi3_1"
.LASF1075:
	.string	"CODE_FOR_mmx_packuswb"
.LASF270:
	.string	"SYMBOL_REF"
.LASF415:
	.string	"NOTE_INSN_BIAS"
.LASF1732:
	.string	"loop_call_insn_hoist"
.LASF969:
	.string	"CODE_FOR_movv4hi_internal"
.LASF1768:
	.string	"word_mode"
.LASF1179:
	.string	"CODE_FOR_subsf3"
.LASF437:
	.string	"NOTE_INSN_MAX"
.LASF475:
	.string	"x_saveregs_value"
.LASF730:
	.string	"GENERAL_INDUCT"
.LASF821:
	.string	"CODE_FOR_cmpdi_ccno_1_rex64"
.LASF1159:
	.string	"CODE_FOR_fix_truncsfhi2"
.LASF1381:
	.string	"OTI_udivmod"
.LASF1790:
	.string	"flag_branch_on_count_reg"
.LASF845:
	.string	"CODE_FOR_truncdfsf2_sse_only"
.LASF35:
	.string	"sse_move"
.LASF1304:
	.string	"CODE_FOR_call_exp"
.LASF952:
	.string	"CODE_FOR_cmpstrqi_1"
.LASF672:
	.string	"NO_DEBUG"
.LASF223:
	.string	"DEFINE_INSN_AND_SPLIT"
.LASF275:
	.string	"COMPARE"
.LASF303:
	.string	"LTGT"
.LASF877:
	.string	"CODE_FOR_testsi_1"
.LASF1301:
	.string	"CODE_FOR_doloop_end"
.LASF999:
	.string	"CODE_FOR_rsqrtv4sf2"
.LASF1449:
	.string	"temp"
.LASF454:
	.string	"unsignedp"
.LASF1207:
	.string	"CODE_FOR_testqi_ext_ccno_0"
.LASF315:
	.string	"HIGH"
.LASF272:
	.string	"QUEUED"
.LASF25:
	.string	"move_ratio"
.LASF61:
	.string	"NON_Q_REGS"
.LASF1:
	.string	"mode"
.LASF1421:
	.string	"base_address"
.LASF141:
	.string	"DImode"
.LASF1633:
	.string	"gen_add_mult"
.LASF581:
	.string	"elms"
.LASF1056:
	.string	"CODE_FOR_eqv4hi3"
.LASF817:
	.string	"PRED_CALL"
.LASF583:
	.string	"const_equiv_data"
.LASF495:
	.string	"hard_reg_initial_vals"
.LASF1139:
	.string	"CODE_FOR_extendsfxf2"
.LASF799:
	.string	"br_predictor"
.LASF1399:
	.string	"OTI_neg"
.LASF473:
	.string	"x_inhibit_defer_pop"
.LASF113:
	.string	"_chain"
.LASF781:
	.string	"unroll_number"
.LASF1579:
	.string	"ext_val_dummy"
.LASF1380:
	.string	"OTI_udiv"
.LASF1048:
	.string	"CODE_FOR_mmx_nanddi3"
.LASF732:
	.string	"info"
.LASF1103:
	.string	"CODE_FOR_pfrcpv2sf2"
.LASF293:
	.string	"POST_INC"
.LASF893:
	.string	"CODE_FOR_lshrdi3_1"
.LASF1411:
	.string	"OTI_strlen"
.LASF866:
	.string	"CODE_FOR_addqi3_cc"
.LASF1573:
	.string	"check_final_value"
.LASF1115:
	.string	"CODE_FOR_cmpdi_1_rex64"
.LASF42:
	.string	"PROCESSOR_I386"
.LASF897:
	.string	"CODE_FOR_blockage"
.LASF1678:
	.string	"earliest"
.LASF918:
	.string	"CODE_FOR_sinsf2"
.LASF879:
	.string	"CODE_FOR_negsf2_memory"
.LASF154:
	.string	"TFmode"
.LASF1561:
	.string	"reg_map_size"
.LASF1737:
	.string	"verbose"
.LASF1552:
	.string	"insert_before"
.LASF1189:
	.string	"CODE_FOR_mulsidi3"
.LASF91:
	.string	"unsigned char"
.LASF1640:
	.string	"iv_add_mult_cost"
.LASF562:
	.string	"temp_slot"
.LASF66:
	.string	"FP_SECOND_REG"
.LASF478:
	.string	"x_pending_chain"
.LASF1120:
	.string	"CODE_FOR_cmpdf"
.LASF686:
	.string	"src_reg"
.LASF1111:
	.string	"CODE_FOR_cmpdi"
.LASF1661:
	.string	"add_insn"
.LASF1488:
	.string	"prescan_loop"
.LASF1225:
	.string	"CODE_FOR_negsf2"
.LASF1148:
	.string	"CODE_FOR_fix_truncxfdi2"
.LASF1157:
	.string	"CODE_FOR_fix_trunctfhi2"
.LASF494:
	.string	"cannot_inline"
.LASF1131:
	.string	"CODE_FOR_movxf"
.LASF1226:
	.string	"CODE_FOR_negdf2"
.LASF1764:
	.string	"mode_bitsize"
.LASF1801:
	.string	"_IO_lock_t"
.LASF953:
	.string	"CODE_FOR_cmpstrqi_rex_1"
.LASF1671:
	.string	"maybe_eliminate_biv_1"
.LASF1489:
	.string	"exit_target"
.LASF806:
	.string	"PRED_BUILTIN_EXPECT"
.LASF731:
	.string	"class"
.LASF48:
	.string	"PROCESSOR_PENTIUM4"
.LASF813:
	.string	"PRED_POINTER"
.LASF603:
	.string	"basic_block"
.LASF137:
	.string	"BImode"
.LASF291:
	.string	"PRE_INC"
.LASF392:
	.string	"REG_NO_CONFLICT"
.LASF151:
	.string	"SFmode"
.LASF1606:
	.string	"ze_ok"
.LASF957:
	.string	"CODE_FOR_x86_movsicc_0_m1"
.LASF1248:
	.string	"CODE_FOR_lshrdi3"
.LASF1791:
	.string	"flag_non_call_exceptions"
.LASF481:
	.string	"emit"
.LASF1566:
	.string	"ext_val"
.LASF1474:
	.string	"move_movables"
.LASF1173:
	.string	"CODE_FOR_subsi3"
.LASF664:
	.string	"output"
.LASF1492:
	.string	"invalidate_loops_containing_label"
.LASF965:
	.string	"CODE_FOR_trap"
.LASF1116:
	.string	"CODE_FOR_cmpsi_1"
.LASF240:
	.string	"JUMP_INSN"
.LASF1310:
	.string	"CODE_FOR_prologue"
.LASF374:
	.string	"cond_local_set"
.LASF49:
	.string	"PROCESSOR_max"
.LASF1503:
	.string	"target"
.LASF1008:
	.string	"CODE_FOR_maskcmpv4sf3"
.LASF622:
	.string	"edge"
.LASF1272:
	.string	"CODE_FOR_sleu"
.LASF674:
	.string	"SDB_DEBUG"
.LASF1083:
	.string	"CODE_FOR_ldmxcsr"
.LASF656:
	.string	"insn_operand_predicate_fn"
.LASF203:
	.string	"MODE_COMPLEX_FLOAT"
.LASF1739:
	.string	"loop_iv_class_dump"
.LASF1076:
	.string	"CODE_FOR_mmx_punpckhbw"
.LASF1507:
	.string	"new_label"
.LASF1521:
	.string	"last_set"
.LASF357:
	.string	"rttree"
.LASF1241:
	.string	"CODE_FOR_ashlhi3"
.LASF1123:
	.string	"CODE_FOR_movhi"
.LASF1705:
	.string	"bit_num_"
.LASF1536:
	.string	"before_insn"
.LASF414:
	.string	"insn_note"
.LASF666:
	.string	"operand"
.LASF433:
	.string	"NOTE_INSN_RANGE_END"
.LASF1315:
	.string	"CODE_FOR_sqrtsf2"
.LASF222:
	.string	"DEFINE_SPLIT"
.LASF966:
	.string	"CODE_FOR_movv4sf_internal"
.LASF543:
	.string	"has_nonlocal_goto"
.LASF775:
	.string	"initial_equiv_value"
.LASF557:
	.string	"arg_pointer_save_area_init"
.LASF1090:
	.string	"CODE_FOR_eqv2sf3"
.LASF1538:
	.string	"for_each_insn_in_loop"
.LASF1608:
	.string	"info_ok"
.LASF1074:
	.string	"CODE_FOR_mmx_packssdw"
.LASF1180:
	.string	"CODE_FOR_muldi3"
.LASF261:
	.string	"CONST_VECTOR"
.LASF1696:
	.string	"next_maybe_never"
.LASF219:
	.string	"MATCH_INSN"
.LASF1318:
	.string	"CODE_FOR_movstrdi"
.LASF946:
	.string	"CODE_FOR_rep_stossi"
.LASF778:
	.string	"increment"
.LASF503:
	.string	"x_save_expr_regs"
.LASF152:
	.string	"DFmode"
.LASF68:
	.string	"SSE_REGS"
.LASF615:
	.string	"gcov_type"
.LASF1541:
	.string	"past_loop_latch"
.LASF89:
	.string	"size_t"
.LASF253:
	.string	"PREFETCH"
.LASF30:
	.string	"fp_load"
.LASF77:
	.string	"LIM_REG_CLASSES"
.LASF76:
	.string	"ALL_REGS"
.LASF486:
	.string	"pops_args"
.LASF146:
	.string	"PSImode"
.LASF505:
	.string	"x_rtl_expr_chain"
.LASF1691:
	.string	"old_nregs"
.LASF1360:
	.string	"CODE_FOR_movv8qi"
.LASF1494:
	.string	"find_and_verify_loops"
.LASF317:
	.string	"RANGE_INFO"
.LASF1222:
	.string	"CODE_FOR_negsi2"
.LASF38:
	.string	"mmxsse_to_integer"
.LASF632:
	.string	"num_entries"
.LASF626:
	.string	"pre_header"
.LASF961:
	.string	"CODE_FOR_sse_movdfcc"
.LASF1051:
	.string	"CODE_FOR_mmx_psadbw"
.LASF1761:
	.string	"ix86_cpu"
.LASF584:
	.string	"rtunion_def"
.LASF1619:
	.string	"s_max"
.LASF1309:
	.string	"CODE_FOR_return"
.LASF1375:
	.string	"OTI_smul_widen"
.LASF1185:
	.string	"CODE_FOR_mulqihi3"
.LASF233:
	.string	"DEFINE_ATTR"
.LASF985:
	.string	"CODE_FOR_sse_loadss"
.LASF1246:
	.string	"CODE_FOR_ashrhi3"
.LASF235:
	.string	"SET_ATTR"
.LASF160:
	.string	"TCmode"
.LASF497:
	.string	"x_nonlocal_labels"
.LASF1565:
	.string	"check_insn_for_givs"
.LASF905:
	.string	"CODE_FOR_eh_return_di"
.LASF1292:
	.string	"CODE_FOR_bordered"
.LASF1038:
	.string	"CODE_FOR_ussubv8qi3"
.LASF761:
	.string	"move_insn_first"
.LASF310:
	.string	"UNSIGNED_FLOAT"
.LASF404:
	.string	"REG_FRAME_RELATED_EXPR"
.LASF359:
	.string	"cselib_val_struct"
.LASF832:
	.string	"CODE_FOR_swaptf"
.LASF1047:
	.string	"CODE_FOR_mmx_anddi3"
.LASF436:
	.string	"NOTE_INSN_EXPECTED_VALUE"
.LASF1177:
	.string	"CODE_FOR_subtf3"
.LASF105:
	.string	"_IO_write_ptr"
.LASF814:
	.string	"PRED_OPCODE_POSITIVE"
.LASF1113:
	.string	"CODE_FOR_cmphi"
.LASF1686:
	.string	"get_condition_for_loop"
.LASF282:
	.string	"ROTATE"
.LASF1540:
	.string	"not_every_iteration"
.LASF702:
	.string	"maybe_dead"
.LASF372:
	.string	"succ"
.LASF1286:
	.string	"CODE_FOR_bltu"
.LASF598:
	.string	"refs"
.LASF1478:
	.string	"newpat"
.LASF306:
	.string	"TRUNCATE"
.LASF744:
	.string	"may_not_optimize"
.LASF397:
	.string	"REG_DEP_ANTI"
.LASF157:
	.string	"SCmode"
.LASF750:
	.string	"set_src"
.LASF990:
	.string	"CODE_FOR_vmaddv4sf3"
.LASF1769:
	.string	"rtx_length"
.LASF1467:
	.string	"force_movables"
.LASF1657:
	.string	"comparison_val"
.LASF1191:
	.string	"CODE_FOR_umulsi3_highpart"
.LASF1690:
	.string	"extra_size"
.LASF1774:
	.string	"global_rtl"
.LASF1546:
	.string	"test"
.LASF447:
	.string	"GR_VIRTUAL_STACK_DYNAMIC"
.LASF147:
	.string	"PDImode"
.LASF418:
	.string	"NOTE_INSN_BLOCK_END"
.LASF882:
	.string	"CODE_FOR_negdf2_ifs"
.LASF694:
	.string	"combined_with"
.LASF577:
	.string	"bitmap"
.LASF1351:
	.string	"CODE_FOR_allocate_stack_worker"
.LASF1385:
	.string	"OTI_and"
.LASF427:
	.string	"NOTE_INSN_DELETED_LABEL"
.LASF1000:
	.string	"CODE_FOR_vmrsqrtv4sf2"
.LASF1205:
	.string	"CODE_FOR_testsi_ccno_1"
.LASF878:
	.string	"CODE_FOR_andqi_ext_0"
.LASF1389:
	.string	"OTI_lshr"
.LASF381:
	.string	"flags"
.LASF1668:
	.string	"loop_insn_first_p"
.LASF470:
	.string	"x_regno_reg_rtx"
.LASF210:
	.string	"EXPR_LIST"
.LASF237:
	.string	"EQ_ATTR"
.LASF639:
	.string	"shared"
.LASF1269:
	.string	"CODE_FOR_sge"
.LASF190:
	.string	"CCGOCmode"
.LASF268:
	.string	"CONCAT"
.LASF43:
	.string	"PROCESSOR_I486"
.LASF617:
	.string	"pred_next"
.LASF336:
	.string	"min_after_vec"
.LASF920:
	.string	"CODE_FOR_sintf2"
.LASF1562:
	.string	"unrolled_insn_copies"
.LASF1300:
	.string	"CODE_FOR_tablejump"
.LASF98:
	.string	"FILE"
.LASF1239:
	.string	"CODE_FOR_x86_shift_adj_2"
.LASF274:
	.string	"COND"
.LASF578:
	.string	"simple_bitmap_def"
.LASF200:
	.string	"MODE_PARTIAL_INT"
.LASF513:
	.string	"x_parm_birth_insn"
.LASF742:
	.string	"n_times_set"
.LASF1264:
	.string	"CODE_FOR_sne"
.LASF1220:
	.string	"CODE_FOR_xorqi_cc_ext_1"
.LASF515:
	.string	"x_max_parm_reg"
.LASF15:
	.string	"tree"
.LASF1574:
	.string	"biv_increment_seen"
.LASF735:
	.string	"regs"
.LASF158:
	.string	"DCmode"
.LASF1062:
	.string	"CODE_FOR_smaxv4hi3"
.LASF710:
	.string	"same"
.LASF1752:
	.string	"indirect_jump_in_function"
.LASF805:
	.string	"PRED_LOOP_ITERATIONS"
.LASF1597:
	.string	"express_from_1"
.LASF225:
	.string	"DEFINE_COMBINE"
.LASF1797:
	.string	"GNU C 4.8.1 -mtune=generic -march=x86-64 -g -fno-strict-aliasing -fstack-protector"
.LASF1256:
	.string	"CODE_FOR_rotrdi3"
.LASF708:
	.string	"ext_dependent"
.LASF1228:
	.string	"CODE_FOR_negtf2"
.LASF807:
	.string	"PRED_NORETURN"
.LASF507:
	.string	"x_tail_recursion_reentry"
.LASF811:
	.string	"PRED_LOOP_PRECONDITIONING"
.LASF283:
	.string	"ASHIFTRT"
.LASF1746:
	.string	"loop_dump_aux"
.LASF1340:
	.string	"CODE_FOR_movsicc"
.LASF1035:
	.string	"CODE_FOR_subv2si3"
.LASF938:
	.string	"CODE_FOR_strsetdi_rex_1"
.LASF798:
	.string	"cselib_val"
.LASF1364:
	.string	"CODE_FOR_prefetch"
.LASF936:
	.string	"CODE_FOR_rep_movqi"
.LASF1283:
	.string	"CODE_FOR_bgt"
.LASF188:
	.string	"CCmode"
.LASF44:
	.string	"PROCESSOR_PENTIUM"
.LASF1520:
	.string	"count_one_set"
.LASF1128:
	.string	"CODE_FOR_movdi"
.LASF370:
	.string	"end_tree"
.LASF67:
	.string	"FLOAT_REGS"
.LASF1011:
	.string	"CODE_FOR_vmmaskncmpv4sf3"
.LASF812:
	.string	"PRED_LOOP_HEADER"
.LASF1594:
	.string	"sge_plus"
.LASF420:
	.string	"NOTE_INSN_LOOP_END"
.LASF1501:
	.string	"dest_loop"
.LASF779:
	.string	"comparison_code"
.LASF186:
	.string	"V16SFmode"
.LASF1433:
	.string	"note_reg_stored_arg"
.LASF932:
	.string	"CODE_FOR_strmovqi_rex_1"
.LASF1138:
	.string	"CODE_FOR_extendsfdf2"
.LASF1072:
	.string	"CODE_FOR_mmx_ashldi3"
.LASF871:
	.string	"CODE_FOR_subsi3_carry_zext"
.LASF434:
	.string	"NOTE_INSN_LIVE"
.LASF1760:
	.string	"x86_prefetch_sse"
.LASF916:
	.string	"CODE_FOR_sqrttf2"
.LASF230:
	.string	"DEFINE_COND_EXEC"
.LASF109:
	.string	"_IO_save_base"
.LASF566:
	.string	"OPTAB_DIRECT"
.LASF857:
	.string	"CODE_FOR_x86_fldcw_1"
.LASF451:
	.string	"var_refs_queue"
.LASF1101:
	.string	"CODE_FOR_floatv2si2"
.LASF474:
	.string	"x_stack_pointer_delta"
.LASF1305:
	.string	"CODE_FOR_call_value_pop"
.LASF723:
	.string	"nonneg"
.LASF1156:
	.string	"CODE_FOR_fix_truncxfhi2"
.LASF943:
	.string	"CODE_FOR_strsetqi_1"
.LASF226:
	.string	"DEFINE_EXPAND"
.LASF1426:
	.string	"prefetch_in_loop"
.LASF546:
	.string	"is_thunk"
.LASF1441:
	.string	"compute_luids"
.LASF1784:
	.string	"optimize_size"
.LASF1437:
	.string	"loop_optimize"
.LASF1703:
	.string	"ptr_"
.LASF1054:
	.string	"CODE_FOR_mmx_pshufw"
.LASF609:
	.string	"elements_used"
.LASF1485:
	.string	"loop_movables_free"
.LASF177:
	.string	"V8SImode"
.LASF499:
	.string	"x_nonlocal_goto_handler_labels"
.LASF704:
	.string	"unrolled"
.LASF239:
	.string	"INSN"
.LASF350:
	.string	"rtint"
.LASF1670:
	.string	"biv_elimination_giv_has_0_offset"
.LASF837:
	.string	"CODE_FOR_zero_extendqidi2"
.LASF1789:
	.string	"flag_reduce_all_givs"
.LASF1595:
	.string	"consec_sets_giv"
.LASF36:
	.string	"sse_load"
.LASF269:
	.string	"LABEL_REF"
.LASF396:
	.string	"REG_LABEL"
.LASF934:
	.string	"CODE_FOR_rep_movsi"
.LASF1724:
	.string	"replace_loop_regs"
.LASF1697:
	.string	"last_max_reg"
.LASF769:
	.string	"has_nonconst_call"
.LASF865:
	.string	"CODE_FOR_floatditf2"
.LASF1330:
	.string	"CODE_FOR_strsetsi_rex64"
.LASF605:
	.string	"elt_list"
.LASF728:
	.string	"BASIC_INDUCT"
.LASF1715:
	.string	"retval_note"
.LASF1439:
	.string	"loops_data"
.LASF384:
	.string	"REG_DEAD"
.LASF1634:
	.string	"result"
.LASF986:
	.string	"CODE_FOR_sse_movss"
.LASF424:
	.string	"NOTE_INSN_FUNCTION_END"
.LASF123:
	.string	"__pad2"
.LASF1612:
	.string	"u_start_val"
.LASF1763:
	.string	"mode_size"
.LASF863:
	.string	"CODE_FOR_floatsitf2"
.LASF387:
	.string	"REG_EQUAL"
.LASF0:
	.string	"code"
.LASF614:
	.string	"regset"
.LASF1736:
	.string	"file"
.LASF1015:
	.string	"CODE_FOR_sse_unpcklps"
.LASF1422:
	.string	"stride"
.LASF819:
	.string	"END_PREDICTORS"
.LASF688:
	.string	"dest_reg"
.LASF1302:
	.string	"CODE_FOR_call_pop"
.LASF900:
	.string	"CODE_FOR_return_indirect_internal"
.LASF1717:
	.string	"try_swap_copy_prop"
.LASF662:
	.string	"eliminable"
.LASF1109:
	.string	"CODE_FOR_pswapdv2si2"
.LASF1551:
	.string	"loop_givs_reduce"
.LASF784:
	.string	"mems"
.LASF1168:
	.string	"CODE_FOR_addxf3"
.LASF1444:
	.string	"loop_end"
.LASF189:
	.string	"CCGCmode"
.LASF823:
	.string	"CODE_FOR_cmpqi_ext_3_insn"
.LASF1798:
	.string	"loop.c"
.LASF1778:
	.string	"regs_invalidated_by_call"
.LASF1108:
	.string	"CODE_FOR_pmulhrwv4hi3"
.LASF737:
	.string	"list"
.LASF949:
	.string	"CODE_FOR_rep_stosqi_rex64"
.LASF1621:
	.string	"extend_value_for_giv"
.LASF265:
	.string	"SCRATCH"
.LASF175:
	.string	"V8QImode"
.LASF1218:
	.string	"CODE_FOR_xorhi3"
.LASF178:
	.string	"V8DImode"
.LASF206:
	.string	"MAX_MODE_CLASS"
.LASF1334:
	.string	"CODE_FOR_strsetqi_rex64"
.LASF933:
	.string	"CODE_FOR_rep_movdi_rex64"
.LASF1349:
	.string	"CODE_FOR_maxdf3"
.LASF887:
	.string	"CODE_FOR_ashldi3_1"
.LASF899:
	.string	"CODE_FOR_return_pop_internal"
.LASF839:
	.string	"CODE_FOR_extendhidi2"
.LASF840:
	.string	"CODE_FOR_extendqidi2"
.LASF1680:
	.string	"reverse_code"
.LASF1611:
	.string	"u_end_val"
.LASF770:
	.string	"has_volatile"
.LASF872:
	.string	"CODE_FOR_divqi3"
.LASF1314:
	.string	"CODE_FOR_ffssi2"
.LASF711:
	.string	"const_adjust"
.LASF304:
	.string	"SIGN_EXTEND"
.LASF1100:
	.string	"CODE_FOR_pi2fw"
.LASF538:
	.string	"calls_setjmp"
.LASF1182:
	.string	"CODE_FOR_mulhi3"
.LASF1571:
	.string	"record_biv"
.LASF360:
	.string	"value"
.LASF1772:
	.string	"const_int_rtx"
.LASF326:
	.string	"VEC_DUPLICATE"
.LASF825:
	.string	"CODE_FOR_x86_fnstsw_1"
.LASF576:
	.string	"bitmap_head"
.LASF1428:
	.string	"check_store_data"
.LASF500:
	.string	"x_nonlocal_goto_stack_level"
.LASF1194:
	.string	"CODE_FOR_mulxf3"
.LASF130:
	.string	"_next"
.LASF797:
	.string	"setting_insn"
.LASF669:
	.string	"n_alternatives"
.LASF1151:
	.string	"CODE_FOR_fix_truncsfdi2"
.LASF344:
	.string	"expr"
.LASF1200:
	.string	"CODE_FOR_divdf3"
.LASF1289:
	.string	"CODE_FOR_ble"
.LASF430:
	.string	"NOTE_INSN_EH_REGION_END"
.LASF1362:
	.string	"CODE_FOR_sfence"
.LASF1534:
	.string	"address"
.LASF690:
	.string	"mult_val"
.LASF1057:
	.string	"CODE_FOR_eqv2si3"
.LASF1543:
	.string	"backbl"
.LASF1087:
	.string	"CODE_FOR_subrv2sf3"
.LASF1285:
	.string	"CODE_FOR_blt"
.LASF1583:
	.string	"is_addr"
.LASF1006:
	.string	"CODE_FOR_sse_xorti3"
.LASF1153:
	.string	"CODE_FOR_fix_trunctfsi2"
.LASF498:
	.string	"x_nonlocal_goto_handler_slots"
.LASF184:
	.string	"V8SFmode"
.LASF1190:
	.string	"CODE_FOR_umuldi3_highpart"
.LASF1518:
	.string	"this"
.LASF684:
	.string	"insn"
.LASF997:
	.string	"CODE_FOR_rcpv4sf2"
.LASF58:
	.string	"DIREG"
.LASF748:
	.string	"loop_movables"
.LASF1105:
	.string	"CODE_FOR_pfrcpit2v2sf3"
.LASF1216:
	.string	"CODE_FOR_xordi3"
.LASF395:
	.string	"REG_CC_USER"
.LASF1557:
	.string	"add_cost"
.LASF248:
	.string	"ASM_OPERANDS"
.LASF278:
	.string	"MULT"
.LASF518:
	.string	"x_temp_slot_level"
.LASF192:
	.string	"CCZmode"
.LASF1502:
	.string	"outer_loop"
.LASF421:
	.string	"NOTE_INSN_LOOP_CONT"
.LASF62:
	.string	"INDEX_REGS"
.LASF1114:
	.string	"CODE_FOR_cmpqi"
.LASF1628:
	.string	"can_combine"
.LASF1022:
	.string	"CODE_FOR_cvttps2pi"
.LASF1252:
	.string	"CODE_FOR_rotldi3"
.LASF956:
	.string	"CODE_FOR_x86_movdicc_0_m1_rex64"
.LASF50:
	.string	"processor_type"
.LASF1496:
	.string	"current_loop"
.LASF1410:
	.string	"OTI_tst"
.LASF816:
	.string	"PRED_FPOPCODE"
.LASF569:
	.string	"OPTAB_LIB_WIDEN"
.LASF1704:
	.string	"indx_"
.LASF1738:
	.string	"iv_num"
.LASF544:
	.string	"contains_functions"
.LASF767:
	.string	"has_call"
.LASF482:
	.string	"varasm"
.LASF410:
	.string	"REG_NON_LOCAL_GOTO"
.LASF752:
	.string	"dependencies"
.LASF1332:
	.string	"CODE_FOR_strsethi_rex64"
.LASF252:
	.string	"ADDR_DIFF_VEC"
.LASF1097:
	.string	"CODE_FOR_pfacc"
.LASF1184:
	.string	"CODE_FOR_umulqihi3"
.LASF1240:
	.string	"CODE_FOR_ashlsi3"
.LASF824:
	.string	"CODE_FOR_cmpqi_ext_3_insn_rex64"
.LASF660:
	.string	"constraint"
.LASF1609:
	.string	"biv_mode"
.LASF314:
	.string	"ZERO_EXTRACT"
.LASF873:
	.string	"CODE_FOR_udivqi3"
.LASF1005:
	.string	"CODE_FOR_sse_iorti3"
.LASF586:
	.string	"hint"
.LASF1522:
	.string	"loop_reg_used_before_p"
.LASF247:
	.string	"ASM_INPUT"
.LASF995:
	.string	"CODE_FOR_divv4sf3"
.LASF1093:
	.string	"CODE_FOR_mulv2sf3"
.LASF297:
	.string	"ORDERED"
.LASF185:
	.string	"V8DFmode"
.LASF1404:
	.string	"OTI_ffs"
.LASF1245:
	.string	"CODE_FOR_ashrsi3"
.LASF1344:
	.string	"CODE_FOR_movxfcc"
.LASF1469:
	.string	"matched_regs"
.LASF453:
	.string	"promoted_mode"
.LASF1523:
	.string	"check_store"
.LASF1212:
	.string	"CODE_FOR_iordi3"
.LASF862:
	.string	"CODE_FOR_floatsixf2"
.LASF772:
	.string	"has_multiple_exit_targets"
.LASF1447:
	.string	"loop_entry_jump"
.LASF850:
	.string	"CODE_FOR_fix_truncsi_nomemory"
.LASF608:
	.string	"num_elements"
.LASF311:
	.string	"UNSIGNED_FIX"
.LASF1648:
	.string	"before_comparison"
.LASF1527:
	.string	"emit_prefetch_instructions"
.LASF1358:
	.string	"CODE_FOR_movv2si"
.LASF1516:
	.string	"consec_sets_invariant_p"
.LASF810:
	.string	"PRED_LOOP_CONDITION"
.LASF535:
	.string	"returns_pcc_struct"
.LASF791:
	.string	"movables"
.LASF1526:
	.string	"addval"
.LASF1046:
	.string	"CODE_FOR_mmx_clrdi"
.LASF1121:
	.string	"CODE_FOR_cmpsf"
.LASF1112:
	.string	"CODE_FOR_cmpsi"
.LASF756:
	.string	"force"
.LASF1042:
	.string	"CODE_FOR_umulv4hi3_highpart"
.LASF1550:
	.string	"loop_biv_eliminable_p"
.LASF19:
	.string	"mult_init"
.LASF980:
	.string	"CODE_FOR_sse_movntdi"
.LASF1472:
	.string	"rtx_equal_for_loop_p"
.LASF16:
	.string	"processor_costs"
.LASF82:
	.string	"sse_words"
.LASF1010:
	.string	"CODE_FOR_vmmaskcmpv4sf3"
.LASF1145:
	.string	"CODE_FOR_trunctfsf2"
.LASF64:
	.string	"GENERAL_REGS"
.LASF637:
	.string	"level"
.LASF874:
	.string	"CODE_FOR_divmodhi4"
.LASF1762:
	.string	"stderr"
.LASF780:
	.string	"n_iterations"
.LASF1719:
	.string	"prev_set"
.LASF1515:
	.string	"mem_list_entry"
.LASF1741:
	.string	"loop_giv_dump"
.LASF483:
	.string	"name"
.LASF211:
	.string	"INSN_LIST"
.LASF1203:
	.string	"CODE_FOR_divmodsi4"
.LASF131:
	.string	"_sbuf"
.LASF319:
	.string	"RANGE_VAR"
.LASF604:
	.string	"changes_mode"
.LASF774:
	.string	"comparison_value"
.LASF1039:
	.string	"CODE_FOR_ussubv4hi3"
.LASF111:
	.string	"_IO_save_end"
.LASF1192:
	.string	"CODE_FOR_smuldi3_highpart"
.LASF198:
	.string	"MODE_INT"
.LASF1053:
	.string	"CODE_FOR_mmx_pextrw"
.LASF610:
	.string	"element_size"
.LASF1368:
	.string	"OTI_addv"
.LASF1695:
	.string	"end_label"
.LASF490:
	.string	"arg_offset_rtx"
.LASF1313:
	.string	"CODE_FOR_eh_return"
.LASF2:
	.string	"jump"
.LASF81:
	.string	"regno"
.LASF1665:
	.string	"eliminate_p"
.LASF976:
	.string	"CODE_FOR_mmx_pmovmskb"
.LASF471:
	.string	"expr_status"
.LASF1268:
	.string	"CODE_FOR_sltu"
.LASF903:
	.string	"CODE_FOR_prologue_get_pc"
.LASF1291:
	.string	"CODE_FOR_bunordered"
.LASF542:
	.string	"has_nonlocal_label"
.LASF1251:
	.string	"CODE_FOR_lshrqi3"
.LASF733:
	.string	"type"
.LASF677:
	.string	"XCOFF_DEBUG"
.LASF320:
	.string	"RANGE_LIVE"
.LASF472:
	.string	"x_pending_stack_adjust"
.LASF168:
	.string	"V2HImode"
.LASF487:
	.string	"args_size"
.LASF9:
	.string	"frame_related"
.LASF1693:
	.string	"load_mems"
.LASF1727:
	.string	"loop_insn_emit_after"
.LASF591:
	.string	"const_equiv"
.LASF740:
	.string	"loop_reg"
.LASF1487:
	.string	"count_nonfixed_reads"
.LASF1413:
	.string	"OTI_cmov"
.LASF1164:
	.string	"CODE_FOR_adddi3"
.LASF869:
	.string	"CODE_FOR_subdi3_carry_rex64"
.LASF1702:
	.string	"best_equiv"
.LASF1569:
	.string	"valid_initial_value_p"
.LASF595:
	.string	"last_uid"
.LASF354:
	.string	"rt_addr_diff_vec_flags"
.LASF1233:
	.string	"CODE_FOR_one_cmpldi2"
.LASF444:
	.string	"GR_ARG_POINTER"
.LASF1450:
	.string	"update_start"
.LASF1161:
	.string	"CODE_FOR_floatdisf2"
.LASF41:
	.string	"sizetype"
.LASF71:
	.string	"FP_SECOND_SSE_REGS"
.LASF921:
	.string	"CODE_FOR_cosdf2"
.LASF676:
	.string	"DWARF2_DEBUG"
.LASF329:
	.string	"SS_MINUS"
.LASF1317:
	.string	"CODE_FOR_movstrsi"
.LASF959:
	.string	"CODE_FOR_sse_movsfcc"
.LASF717:
	.string	"total_benefit"
.LASF1195:
	.string	"CODE_FOR_multf3"
.LASF216:
	.string	"MATCH_PARALLEL"
.LASF173:
	.string	"V4SImode"
.LASF5:
	.string	"volatil"
.LASF654:
	.string	"tree_root"
.LASF925:
	.string	"CODE_FOR_cld"
.LASF1646:
	.string	"new_add_val"
.LASF386:
	.string	"REG_EQUIV"
.LASF92:
	.string	"short unsigned int"
.LASF1183:
	.string	"CODE_FOR_mulqi3"
.LASF93:
	.string	"signed char"
.LASF1229:
	.string	"CODE_FOR_abssf2"
.LASF651:
	.string	"loops"
.LASF215:
	.string	"MATCH_OPERATOR"
.LASF1549:
	.string	"loop_givs_check"
.LASF644:
	.string	"start"
.LASF1677:
	.string	"reverse"
.LASF1162:
	.string	"CODE_FOR_floatsidf2"
.LASF1766:
	.string	"mode_wider_mode"
.LASF1645:
	.string	"start_value"
.LASF607:
	.string	"varray_head_tag"
.LASF365:
	.string	"current"
.LASF1643:
	.string	"check_dbra_loop"
.LASF1255:
	.string	"CODE_FOR_rotlqi3"
.LASF1345:
	.string	"CODE_FOR_movtfcc"
.LASF1555:
	.string	"loop_giv_reduce_benefit"
.LASF904:
	.string	"CODE_FOR_eh_return_si"
.LASF356:
	.string	"rtbit"
.LASF514:
	.string	"x_last_parm_insn"
.LASF1427:
	.string	"prefetch_before_loop"
.LASF858:
	.string	"CODE_FOR_floathisf2"
.LASF658:
	.string	"insn_operand_data"
.LASF1196:
	.string	"CODE_FOR_muldf3"
.LASF331:
	.string	"SS_TRUNCATE"
.LASF400:
	.string	"REG_EXEC_COUNT"
.LASF771:
	.string	"has_tablejump"
.LASF709:
	.string	"next_iv"
.LASF929:
	.string	"CODE_FOR_strmovhi_1"
.LASF1676:
	.string	"canonicalize_condition"
.LASF963:
	.string	"CODE_FOR_allocate_stack_worker_1"
.LASF523:
	.string	"no_debugging_symbols"
.LASF960:
	.string	"CODE_FOR_sse_movsfcc_eq"
.LASF1402:
	.string	"OTI_absv"
.LASF568:
	.string	"OPTAB_WIDEN"
.LASF1293:
	.string	"CODE_FOR_buneq"
.LASF335:
	.string	"base_after_vec"
.LASF1186:
	.string	"CODE_FOR_umulditi3"
.LASF220:
	.string	"DEFINE_INSN"
.LASF1031:
	.string	"CODE_FOR_usaddv8qi3"
.LASF96:
	.string	"__off64_t"
.LASF1412:
	.string	"OTI_cbranch"
.LASF1337:
	.string	"CODE_FOR_strlensi"
.LASF174:
	.string	"V4DImode"
.LASF844:
	.string	"CODE_FOR_truncdfsf2_3"
.LASF378:
	.string	"loop_depth"
.LASF703:
	.string	"auto_inc_opt"
.LASF755:
	.string	"cond"
.LASF103:
	.string	"_IO_read_base"
.LASF1201:
	.string	"CODE_FOR_divsf3"
.LASF74:
	.string	"INT_SSE_REGS"
.LASF1331:
	.string	"CODE_FOR_strsethi"
.LASF121:
	.string	"_offset"
.LASF1044:
	.string	"CODE_FOR_mmx_iordi3"
.LASF683:
	.string	"induction"
.LASF940:
	.string	"CODE_FOR_strsetsi_rex_1"
.LASF445:
	.string	"GR_VIRTUAL_INCOMING_ARGS"
.LASF642:
	.string	"cont"
.LASF1085:
	.string	"CODE_FOR_addv2sf3"
.LASF466:
	.string	"x_last_filename"
.LASF398:
	.string	"REG_DEP_OUTPUT"
.LASF108:
	.string	"_IO_buf_end"
.LASF853:
	.string	"CODE_FOR_fix_truncdfsi_sse"
.LASF579:
	.string	"n_bits"
.LASF229:
	.string	"DEFINE_ASM_ATTRIBUTES"
.LASF330:
	.string	"US_MINUS"
.LASF680:
	.string	"g_types"
.LASF1627:
	.string	"stats"
.LASF922:
	.string	"CODE_FOR_cossf2"
.LASF1781:
	.string	"reg_n_info"
.LASF1376:
	.string	"OTI_umul_widen"
.LASF1029:
	.string	"CODE_FOR_ssaddv8qi3"
.LASF1466:
	.string	"ignore_some_movables"
.LASF492:
	.string	"return_rtx"
.LASF70:
	.string	"FP_TOP_SSE_REGS"
.LASF815:
	.string	"PRED_OPCODE_NONEQUAL"
.LASF313:
	.string	"SIGN_EXTRACT"
.LASF8:
	.string	"integrated"
.LASF1782:
	.string	"regs_may_share"
.LASF937:
	.string	"CODE_FOR_rep_movqi_rex64"
.LASF601:
	.string	"live_length"
.LASF1009:
	.string	"CODE_FOR_maskncmpv4sf3"
.LASF1765:
	.string	"mode_mask_array"
.LASF1624:
	.string	"combine_givs"
.LASF1733:
	.string	"loop_insn_sink"
.LASF254:
	.string	"CLOBBER"
.LASF1073:
	.string	"CODE_FOR_mmx_packsswb"
.LASF616:
	.string	"edge_def"
.LASF127:
	.string	"_mode"
.LASF37:
	.string	"sse_store"
.LASF204:
	.string	"MODE_VECTOR_INT"
.LASF104:
	.string	"_IO_write_base"
.LASF402:
	.string	"REG_SAVE_AREA"
.LASF322:
	.string	"CALL_PLACEHOLDER"
.LASF1792:
	.string	"uid_luid"
.LASF479:
	.string	"function"
.LASF1104:
	.string	"CODE_FOR_pfrcpit1v2sf3"
.LASF1457:
	.string	"record_excess_regs"
.LASF182:
	.string	"V4SFmode"
.LASF1585:
	.string	"addr_mode"
.LASF1604:
	.string	"comb"
.LASF1435:
	.string	"prev_luid"
.LASF547:
	.string	"instrument_entry_exit"
.LASF1303:
	.string	"CODE_FOR_call"
.LASF1171:
	.string	"CODE_FOR_addsf3"
.LASF1637:
	.string	"before_bb"
.LASF1544:
	.string	"loop_bivs_init_find"
.LASF510:
	.string	"x_frame_offset"
.LASF681:
	.string	"DEST_ADDR"
.LASF1748:
	.string	"debug_loops"
.LASF276:
	.string	"PLUS"
.LASF1632:
	.string	"g1_add_benefit"
.LASF849:
	.string	"CODE_FOR_fix_truncdfdi_sse"
.LASF1417:
	.string	"rtx_pair"
.LASF1327:
	.string	"CODE_FOR_clrstrdi"
.LASF292:
	.string	"POST_DEC"
.LASF574:
	.string	"bits"
.LASF139:
	.string	"HImode"
.LASF1141:
	.string	"CODE_FOR_extenddfxf2"
.LASF382:
	.string	"rtunion"
.LASF423:
	.string	"NOTE_INSN_LOOP_END_TOP_COND"
.LASF1069:
	.string	"CODE_FOR_mmx_lshrdi3"
.LASF202:
	.string	"MODE_COMPLEX_INT"
.LASF558:
	.string	"eh_status"
.LASF1077:
	.string	"CODE_FOR_mmx_punpckhwd"
.LASF652:
	.string	"levels"
.LASF972:
	.string	"CODE_FOR_movti_internal"
.LASF1259:
	.string	"CODE_FOR_rotrqi3"
.LASF1308:
	.string	"CODE_FOR_untyped_call"
.LASF456:
	.string	"sequence_stack"
.LASF88:
	.string	"long int"
.LASF449:
	.string	"GR_VIRTUAL_CFA"
.LASF1638:
	.string	"loop_iv_add_mult_sink"
.LASF1616:
	.string	"s_end_val"
.LASF388:
	.string	"REG_WAS_0"
.LASF1773:
	.string	"const_tiny_rtx"
.LASF1144:
	.string	"CODE_FOR_truncxfsf2"
.LASF978:
	.string	"CODE_FOR_mmx_maskmovq_rex"
.LASF409:
	.string	"REG_NORETURN"
.LASF129:
	.string	"_IO_marker"
.LASF24:
	.string	"large_insn"
.LASF1564:
	.string	"inc_val"
.LASF1510:
	.string	"note_addr_stored"
.LASF153:
	.string	"XFmode"
.LASF537:
	.string	"needs_context"
.LASF408:
	.string	"REG_MAYBE_DEAD"
.LASF1532:
	.string	"biv1"
.LASF1486:
	.string	"m_next"
.LASF183:
	.string	"V4DFmode"
.LASF691:
	.string	"add_val"
.LASF1570:
	.string	"find_mem_givs"
.LASF842:
	.string	"CODE_FOR_extendqihi2"
.LASF1007:
	.string	"CODE_FOR_sse_clrv4sf"
.LASF1603:
	.string	"combine_givs_p"
.LASF4:
	.string	"unchanging"
.LASF1513:
	.string	"loop_invariant_p"
.LASF1415:
	.string	"OTI_push"
.LASF1014:
	.string	"CODE_FOR_sse_unpckhps"
.LASF907:
	.string	"CODE_FOR_leave_rex64"
.LASF935:
	.string	"CODE_FOR_rep_movsi_rex64"
.LASF1092:
	.string	"CODE_FOR_pfminv2sf3"
.LASF1509:
	.string	"labels_in_range_p"
.LASF383:
	.string	"reg_note"
.LASF867:
	.string	"CODE_FOR_addsi_1_zext"
.LASF541:
	.string	"calls_eh_return"
.LASF1129:
	.string	"CODE_FOR_movsf"
.LASF1493:
	.string	"label"
.LASF520:
	.string	"x_target_temp_slot_level"
.LASF668:
	.string	"n_dups"
.LASF488:
	.string	"pretend_args_size"
.LASF1642:
	.string	"product_cheap_p"
.LASF1425:
	.string	"write"
.LASF739:
	.string	"optimize"
.LASF207:
	.string	"rtx_code"
.LASF86:
	.string	"CUMULATIVE_ARGS"
.LASF1728:
	.string	"pattern"
.LASF1537:
	.string	"prev_insn"
.LASF457:
	.string	"last"
.LASF20:
	.string	"mult_bit"
.LASF950:
	.string	"CODE_FOR_cmpstrqi_nz_1"
.LASF1556:
	.string	"test_reg"
.LASF1694:
	.string	"prev_ebb_head"
.LASF926:
	.string	"CODE_FOR_strmovdi_rex_1"
.LASF1547:
	.string	"loop_bivs_check"
.LASF550:
	.string	"varargs"
.LASF650:
	.string	"rc_order"
.LASF1716:
	.string	"loop_delete_insns"
.LASF1294:
	.string	"CODE_FOR_bunge"
.LASF1250:
	.string	"CODE_FOR_lshrhi3"
.LASF861:
	.string	"CODE_FOR_floathitf2"
.LASF892:
	.string	"CODE_FOR_ashrsi3_31"
.LASF1262:
	.string	"CODE_FOR_insv"
.LASF1756:
	.string	"addr_placeholder"
.LASF55:
	.string	"CREG"
.LASF1740:
	.string	"loop_biv_dump"
.LASF901:
	.string	"CODE_FOR_nop"
.LASF1641:
	.string	"cost"
.LASF1685:
	.string	"get_condition"
.LASF764:
	.string	"match"
.LASF552:
	.string	"x_whole_function_mode_p"
.LASF768:
	.string	"has_libcall"
.LASF636:
	.string	"depth"
.LASF1335:
	.string	"CODE_FOR_cmpstrsi"
.LASF1208:
	.string	"CODE_FOR_anddi3"
.LASF208:
	.string	"UNKNOWN"
.LASF250:
	.string	"UNSPEC_VOLATILE"
.LASF1079:
	.string	"CODE_FOR_mmx_punpcklbw"
.LASF994:
	.string	"CODE_FOR_vmmulv4sf3"
.LASF738:
	.string	"loop_mem_info"
.LASF1406:
	.string	"OTI_sin"
.LASF564:
	.string	"language_function"
.LASF1629:
	.string	"restart"
.LASF1352:
	.string	"CODE_FOR_allocate_stack"
.LASF1596:
	.string	"first_benefit"
.LASF426:
	.string	"NOTE_INSN_EPILOGUE_BEG"
.LASF1043:
	.string	"CODE_FOR_mmx_pmaddwd"
.LASF90:
	.string	"long unsigned int"
.LASF11:
	.string	"rtx_def"
.LASF1199:
	.string	"CODE_FOR_divtf3"
.LASF18:
	.string	"shift_const"
.LASF1414:
	.string	"OTI_cstore"
.LASF908:
	.string	"CODE_FOR_ffssi_1"
.LASF149:
	.string	"HFmode"
.LASF671:
	.string	"debug_info_type"
.LASF526:
	.string	"inl_last_parm_insn"
.LASF257:
	.string	"TRAP_IF"
.LASF1593:
	.string	"sge_plus_constant"
.LASF951:
	.string	"CODE_FOR_cmpstrqi_nz_rex_1"
.LASF1484:
	.string	"loop_movables_add"
.LASF1572:
	.string	"record_giv"
.LASF641:
	.string	"vtop"
.LASF914:
	.string	"CODE_FOR_sqrtdf2_i387"
.LASF600:
	.string	"deaths"
.LASF1795:
	.string	"uid_loop"
.LASF988:
	.string	"CODE_FOR_sse_shufps"
.LASF406:
	.string	"REG_EH_REGION"
.LASF1654:
	.string	"reversible_mem_store"
.LASF516:
	.string	"x_parm_reg_stack_loc"
.LASF924:
	.string	"CODE_FOR_costf2"
.LASF667:
	.string	"n_operands"
.LASF643:
	.string	"cont_dominator"
.LASF1405:
	.string	"OTI_sqrt"
.LASF1319:
	.string	"CODE_FOR_strmovdi_rex64"
.LASF389:
	.string	"REG_RETVAL"
.LASF796:
	.string	"elt_loc_list"
.LASF161:
	.string	"CQImode"
.LASF1757:
	.string	"ix86_cost"
.LASF864:
	.string	"CODE_FOR_floatdixf2"
.LASF1775:
	.string	"pic_offset_table_rtx"
.LASF97:
	.string	"char"
.LASF790:
	.string	"first_loop_store_insn"
.LASF534:
	.string	"returns_struct"
.LASF939:
	.string	"CODE_FOR_strsetsi_1"
.LASF760:
	.string	"move_insn"
.LASF159:
	.string	"XCmode"
.LASF508:
	.string	"x_arg_pointer_save_area"
.LASF1067:
	.string	"CODE_FOR_lshrv4hi3"
.LASF786:
	.string	"mems_allocated"
.LASF992:
	.string	"CODE_FOR_vmsubv4sf3"
.LASF1197:
	.string	"CODE_FOR_mulsf3"
.LASF53:
	.string	"AREG"
.LASF1477:
	.string	"already_moved"
.LASF1708:
	.string	"mask_"
.LASF1408:
	.string	"OTI_cmp"
.LASF682:
	.string	"DEST_REG"
.LASF506:
	.string	"x_tail_recursion_label"
.LASF1081:
	.string	"CODE_FOR_mmx_punpckldq"
.LASF1480:
	.string	"fn_reg"
.LASF795:
	.string	"next_free"
.LASF713:
	.string	"last_use"
.LASF1170:
	.string	"CODE_FOR_adddf3"
.LASF843:
	.string	"CODE_FOR_extendqisi2"
.LASF1063:
	.string	"CODE_FOR_uminv8qi3"
.LASF107:
	.string	"_IO_buf_base"
.LASF532:
	.string	"language"
.LASF1610:
	.string	"start_val"
.LASF285:
	.string	"ROTATERT"
.LASF1295:
	.string	"CODE_FOR_bungt"
.LASF460:
	.string	"x_reg_rtx_no"
.LASF1397:
	.string	"OTI_mov"
.LASF1491:
	.string	"label2"
.LASF1176:
	.string	"CODE_FOR_subxf3"
.LASF889:
	.string	"CODE_FOR_ashrdi3_63_rex64"
.LASF271:
	.string	"ADDRESSOF"
.LASF647:
	.string	"exit_labels"
.LASF411:
	.string	"REG_SETJMP"
.LASF640:
	.string	"invalid"
.LASF747:
	.string	"multiple_uses"
.LASF1152:
	.string	"CODE_FOR_fix_truncxfsi2"
.LASF1325:
	.string	"CODE_FOR_strmovqi_rex64"
.LASF167:
	.string	"V2QImode"
.LASF1242:
	.string	"CODE_FOR_ashlqi3"
.LASF417:
	.string	"NOTE_INSN_BLOCK_BEG"
.LASF145:
	.string	"PHImode"
.LASF102:
	.string	"_IO_read_end"
.LASF452:
	.string	"modified"
.LASF469:
	.string	"regno_decl"
.LASF570:
	.string	"OPTAB_MUST_WIDEN"
.LASF593:
	.string	"reg_info_def"
.LASF166:
	.string	"COImode"
.LASF1068:
	.string	"CODE_FOR_lshrv2si3"
.LASF714:
	.string	"iv_class"
.LASF290:
	.string	"PRE_DEC"
.LASF659:
	.string	"predicate"
.LASF1580:
	.string	"basic_induction_var"
.LASF885:
	.string	"CODE_FOR_absdf2_memory"
.LASF820:
	.string	"insn_code"
.LASF99:
	.string	"_IO_FILE"
.LASF1249:
	.string	"CODE_FOR_lshrsi3"
.LASF425:
	.string	"NOTE_INSN_PROLOGUE_END"
.LASF1718:
	.string	"new_regno"
.LASF443:
	.string	"GR_HARD_FRAME_POINTER"
.LASF1451:
	.string	"update_end"
.LASF1187:
	.string	"CODE_FOR_umulsidi3"
.LASF394:
	.string	"REG_CC_SETTER"
.LASF1673:
	.string	"last_use_this_basic_block"
.LASF948:
	.string	"CODE_FOR_rep_stosqi"
.LASF540:
	.string	"calls_alloca"
.LASF32:
	.string	"mmx_move"
.LASF1158:
	.string	"CODE_FOR_fix_truncdfhi2"
.LASF1084:
	.string	"CODE_FOR_stmxcsr"
.LASF856:
	.string	"CODE_FOR_x86_fnstcw_1"
.LASF1024:
	.string	"CODE_FOR_cvtss2si"
.LASF1333:
	.string	"CODE_FOR_strsetqi"
.LASF567:
	.string	"OPTAB_LIB"
.LASF519:
	.string	"x_var_temp_slot_level"
.LASF765:
	.string	"forces"
.LASF197:
	.string	"MODE_RANDOM"
.LASF328:
	.string	"US_PLUS"
.LASF628:
	.string	"num_pre_header_edges"
.LASF909:
	.string	"CODE_FOR_sqrtsf2_1"
.LASF1312:
	.string	"CODE_FOR_sibcall_epilogue"
.LASF919:
	.string	"CODE_FOR_sinxf2"
.LASF187:
	.string	"BLKmode"
.LASF1730:
	.string	"loop_call_insn_emit_before"
.LASF1021:
	.string	"CODE_FOR_cvtps2pi"
.LASF1296:
	.string	"CODE_FOR_bunle"
.LASF156:
	.string	"HCmode"
.LASF754:
	.string	"savings"
.LASF870:
	.string	"CODE_FOR_subsi3_carry"
.LASF1517:
	.string	"n_sets"
.LASF902:
	.string	"CODE_FOR_prologue_set_got"
.LASF971:
	.string	"CODE_FOR_movv2sf_internal"
.LASF1338:
	.string	"CODE_FOR_strlendi"
.LASF930:
	.string	"CODE_FOR_strmovhi_rex_1"
.LASF1297:
	.string	"CODE_FOR_bunlt"
.LASF1227:
	.string	"CODE_FOR_negxf2"
.LASF361:
	.string	"locs"
.LASF698:
	.string	"always_computable"
.LASF783:
	.string	"store_mems"
.LASF1110:
	.string	"CODE_FOR_pswapdv2sf2"
.LASF613:
	.string	"regset_head"
.LASF1181:
	.string	"CODE_FOR_mulsi3"
.LASF678:
	.string	"VMS_DEBUG"
.LASF1232:
	.string	"CODE_FOR_abstf2"
.LASF1215:
	.string	"CODE_FOR_iorqi3"
.LASF262:
	.string	"CONST_STRING"
.LASF325:
	.string	"VEC_CONCAT"
.LASF1658:
	.string	"cmp_code"
.LASF875:
	.string	"CODE_FOR_udivmoddi4"
.LASF346:
	.string	"size"
.LASF1432:
	.string	"giv_number"
.LASF827:
	.string	"CODE_FOR_popsi1"
.LASF1258:
	.string	"CODE_FOR_rotrhi3"
.LASF1452:
	.string	"set1"
.LASF122:
	.string	"__pad1"
.LASF124:
	.string	"__pad3"
.LASF125:
	.string	"__pad4"
.LASF126:
	.string	"__pad5"
.LASF401:
	.string	"REG_NOALIAS"
.LASF238:
	.string	"ATTR_FLAG"
.LASF673:
	.string	"DBX_DEBUG"
.LASF1475:
	.string	"new_start"
.LASF1361:
	.string	"CODE_FOR_movv2sf"
.LASF194:
	.string	"CCFPUmode"
.LASF1002:
	.string	"CODE_FOR_vmsqrtv4sf2"
.LASF1398:
	.string	"OTI_movstrict"
.LASF729:
	.string	"NOT_BASIC_INDUCT"
.LASF1013:
	.string	"CODE_FOR_sse_ucomi"
.LASF649:
	.string	"dfs_order"
.LASF385:
	.string	"REG_INC"
.LASF228:
	.string	"DEFINE_FUNCTION_UNIT"
.LASF1329:
	.string	"CODE_FOR_strsetsi"
.LASF1118:
	.string	"CODE_FOR_cmpxf"
.LASF582:
	.string	"sbitmap"
.LASF884:
	.string	"CODE_FOR_abssf2_ifs"
.LASF511:
	.string	"x_context_display"
.LASF983:
	.string	"CODE_FOR_sse_movhps"
.LASF1407:
	.string	"OTI_cos"
.LASF464:
	.string	"x_cur_insn_uid"
.LASF112:
	.string	"_markers"
.LASF132:
	.string	"_pos"
.LASF1281:
	.string	"CODE_FOR_beq"
.LASF1710:
	.string	"setter"
.LASF232:
	.string	"ADDRESS"
.LASF620:
	.string	"insns"
.LASF1382:
	.string	"OTI_smod"
.LASF1321:
	.string	"CODE_FOR_strmovsi_rex64"
.LASF1018:
	.string	"CODE_FOR_sminv4sf3"
.LASF524:
	.string	"original_arg_vector"
.LASF1359:
	.string	"CODE_FOR_movv4hi"
.LASF915:
	.string	"CODE_FOR_sqrtxf2"
.LASF634:
	.string	"num_exits"
.LASF847:
	.string	"CODE_FOR_fix_truncdi_memory"
.LASF1653:
	.string	"no_use_except_counting"
.LASF1780:
	.string	"basic_block_for_insn"
.LASF47:
	.string	"PROCESSOR_ATHLON"
.LASF1709:
	.string	"note_reg_stored"
.LASF556:
	.string	"uses_eh_lsda"
.LASF695:
	.string	"replaceable"
.LASF633:
	.string	"exit_edges"
.LASF1019:
	.string	"CODE_FOR_vmsminv4sf3"
.LASF1605:
	.string	"check_ext_dependent_givs"
.LASF589:
	.string	"cptr"
.LASF1589:
	.string	"arg1"
.LASF363:
	.string	"bitmap_head_def"
.LASF838:
	.string	"CODE_FOR_extendsidi2_rex64"
.LASF665:
	.string	"genfun"
.LASF1348:
	.string	"CODE_FOR_maxsf3"
.LASF630:
	.string	"num_nodes"
.LASF726:
	.string	"iv_mode"
.LASF1350:
	.string	"CODE_FOR_pro_epilogue_adjust_stack"
.LASF855:
	.string	"CODE_FOR_fix_trunchi_memory"
.LASF597:
	.string	"sets"
.LASF1134:
	.string	"CODE_FOR_zero_extendqihi2"
.LASF602:
	.string	"calls_crossed"
.LASF1033:
	.string	"CODE_FOR_subv8qi3"
.LASF332:
	.string	"US_TRUNCATE"
.LASF1274:
	.string	"CODE_FOR_sordered"
.LASF1030:
	.string	"CODE_FOR_ssaddv4hi3"
.LASF1535:
	.string	"bytes_ahead"
.LASF1528:
	.string	"num_prefetches"
.LASF1581:
	.string	"argp"
.LASF362:
	.string	"addr_list"
.LASF975:
	.string	"CODE_FOR_sse_movmskps"
.LASF1167:
	.string	"CODE_FOR_addqi3"
.LASF438:
	.string	"global_rtl_index"
.LASF928:
	.string	"CODE_FOR_strmovsi_rex_1"
.LASF80:
	.string	"nregs"
.LASF1505:
	.string	"loc2"
.LASF1270:
	.string	"CODE_FOR_sgeu"
.LASF1506:
	.string	"cond_label"
.LASF327:
	.string	"SS_PLUS"
.LASF852:
	.string	"CODE_FOR_fix_truncsfsi_sse"
.LASF289:
	.string	"UMAX"
.LASF69:
	.string	"MMX_REGS"
.LASF1531:
	.string	"ahead"
.LASF341:
	.string	"scale"
.LASF138:
	.string	"QImode"
.LASF1070:
	.string	"CODE_FOR_ashlv4hi3"
.LASF1379:
	.string	"OTI_sdivmod"
.LASF917:
	.string	"CODE_FOR_sindf2"
.LASF1758:
	.string	"target_flags"
.LASF1336:
	.string	"CODE_FOR_cmpintqi"
.LASF1373:
	.string	"OTI_smul_highpart"
.LASF1714:
	.string	"store_is_first"
.LASF611:
	.string	"data"
.LASF441:
	.string	"GR_STACK_POINTER"
.LASF1322:
	.string	"CODE_FOR_strmovhi"
.LASF685:
	.string	"new_reg"
.LASF1735:
	.string	"loop_ivs_dump"
.LASF150:
	.string	"TQFmode"
.LASF1707:
	.string	"word_"
.LASF1366:
	.string	"optab_index"
.LASF1667:
	.string	"where_insn"
.LASF368:
	.string	"head"
.LASF1438:
	.string	"dumpfile"
.LASF1663:
	.string	"pnote"
.LASF1127:
	.string	"CODE_FOR_movstrictqi"
.LASF1306:
	.string	"CODE_FOR_call_value"
.LASF1430:
	.string	"mem_write"
.LASF45:
	.string	"PROCESSOR_PENTIUMPRO"
.LASF79:
	.string	"words"
.LASF1674:
	.string	"record_initial"
.LASF851:
	.string	"CODE_FOR_fix_truncsi_memory"
.LASF338:
	.string	"min_after_base"
.LASF1626:
	.string	"giv_array"
.LASF1533:
	.string	"basestride"
.LASF1257:
	.string	"CODE_FOR_rotrsi3"
.LASF1374:
	.string	"OTI_umul_highpart"
.LASF590:
	.string	"sched"
.LASF721:
	.string	"init_set"
.LASF1512:
	.string	"libcall_other_reg"
.LASF751:
	.string	"set_dest"
.LASF553:
	.string	"x_dont_save_pending_sizes_p"
.LASF78:
	.string	"ix86_args"
.LASF1479:
	.string	"fn_address"
.LASF822:
	.string	"CODE_FOR_cmpdi_1_insn_rex64"
.LASF1172:
	.string	"CODE_FOR_subdi3"
.LASF1602:
	.string	"g1_add_val"
.LASF942:
	.string	"CODE_FOR_strsethi_rex_1"
.LASF52:
	.string	"NO_REGS"
.LASF1776:
	.string	"cfun"
.LASF996:
	.string	"CODE_FOR_vmdivv4sf3"
.LASF1032:
	.string	"CODE_FOR_usaddv4hi3"
.LASF1287:
	.string	"CODE_FOR_bge"
.LASF1059:
	.string	"CODE_FOR_gtv4hi3"
.LASF1193:
	.string	"CODE_FOR_smulsi3_highpart"
.LASF489:
	.string	"outgoing_args_size"
.LASF848:
	.string	"CODE_FOR_fix_truncsfdi_sse"
.LASF143:
	.string	"OImode"
.LASF407:
	.string	"REG_SAVE_NOTE"
.LASF1599:
	.string	"mode_a"
.LASF1363:
	.string	"CODE_FOR_sse_prologue_save"
.LASF967:
	.string	"CODE_FOR_movv4si_internal"
.LASF580:
	.string	"bytes"
.LASF1365:
	.string	"CODE_FOR_nothing"
.LASF1456:
	.string	"tem2"
.LASF1698:
	.string	"load_copies"
.LASF287:
	.string	"SMAX"
.LASF1178:
	.string	"CODE_FOR_subdf3"
.LASF450:
	.string	"GR_MAX"
.LASF324:
	.string	"VEC_SELECT"
.LASF1377:
	.string	"OTI_sdiv"
.LASF1464:
	.string	"skip_consec_insns"
.LASF1481:
	.string	"fn_address_insn"
.LASF391:
	.string	"REG_NONNEG"
.LASF530:
	.string	"stack_alignment_needed"
.LASF1316:
	.string	"CODE_FOR_sqrtdf2"
.LASF1431:
	.string	"combine_givs_stats"
.LASF1387:
	.string	"OTI_xor"
.LASF459:
	.string	"emit_status"
.LASF1664:
	.string	"maybe_eliminate_biv"
.LASF1618:
	.string	"u_max"
.LASF661:
	.string	"strict_low"
.LASF1600:
	.string	"mode_b"
.LASF831:
	.string	"CODE_FOR_swapxf"
.LASF1284:
	.string	"CODE_FOR_bgtu"
.LASF696:
	.string	"not_replaceable"
.LASF205:
	.string	"MODE_VECTOR_FLOAT"
.LASF1545:
	.string	"call_seen"
.LASF295:
	.string	"POST_MODIFY"
.LASF1343:
	.string	"CODE_FOR_movdfcc"
.LASF1647:
	.string	"comparison"
.LASF804:
	.string	"PRED_UNCONDITIONAL"
.LASF1625:
	.string	"extra_benefit"
.LASF1468:
	.string	"combine_movables"
.LASF1655:
	.string	"bivreg"
.LASF1723:
	.string	"replace_loop_reg"
.LASF403:
	.string	"REG_BR_PRED"
.LASF801:
	.string	"PRED_DS_THEORY"
.LASF221:
	.string	"DEFINE_PEEPHOLE"
.LASF1135:
	.string	"CODE_FOR_zero_extendqisi2"
.LASF133:
	.string	"long long unsigned int"
.LASF432:
	.string	"NOTE_INSN_RANGE_BEG"
.LASF345:
	.string	"offset"
.LASF342:
	.string	"addr_diff_vec_flags"
.LASF117:
	.string	"_cur_column"
.LASF1440:
	.string	"loops_info"
.LASF217:
	.string	"MATCH_OP_DUP"
.LASF231:
	.string	"SEQUENCE"
.LASF1779:
	.string	"n_non_fixed_regs"
.LASF1221:
	.string	"CODE_FOR_negdi2"
.LASF1755:
	.string	"note_insn"
.LASF1254:
	.string	"CODE_FOR_rotlhi3"
.LASF1026:
	.string	"CODE_FOR_addv8qi3"
.LASF1163:
	.string	"CODE_FOR_floatdidf2"
.LASF148:
	.string	"QFmode"
.LASF1154:
	.string	"CODE_FOR_fix_truncdfsi2"
.LASF1058:
	.string	"CODE_FOR_gtv8qi3"
.LASF1584:
	.string	"pbenefit"
.LASF1326:
	.string	"CODE_FOR_clrstrsi"
.LASF1729:
	.string	"loop_insn_emit_before"
.LASF1684:
	.string	"max_val"
.LASF1324:
	.string	"CODE_FOR_strmovqi"
.LASF679:
	.string	"VMS_AND_DWARF2_DEBUG"
.LASF1378:
	.string	"OTI_sdivv"
.LASF491:
	.string	"args_info"
.LASF1787:
	.string	"flag_unroll_loops"
.LASF1592:
	.string	"single_use"
.LASF40:
	.string	"simultaneous_prefetches"
.LASF1660:
	.string	"comparison_sign_mask"
.LASF1687:
	.string	"indirect_jump_in_function_p"
.LASF1582:
	.string	"general_induction_var"
.LASF968:
	.string	"CODE_FOR_movv8qi_internal"
.LASF549:
	.string	"limit_stack"
.LASF1511:
	.string	"note_set_pseudo_multiple_uses"
.LASF258:
	.string	"RESX"
.LASF1372:
	.string	"OTI_smulv"
.LASF1508:
	.string	"mark_loop_jump"
.LASF619:
	.string	"dest"
.LASF927:
	.string	"CODE_FOR_strmovsi_1"
.LASF1117:
	.string	"CODE_FOR_cmpqi_ext_3"
.LASF246:
	.string	"PARALLEL"
.LASF1420:
	.string	"prefetch_info"
.LASF1786:
	.string	"flag_strength_reduce"
.LASF818:
	.string	"PRED_ERROR_RETURN"
.LASF13:
	.string	"num_elem"
.LASF789:
	.string	"num_mem_sets"
.LASF22:
	.string	"movsx"
.LASF110:
	.string	"_IO_backup_base"
.LASF1137:
	.string	"CODE_FOR_extendsidi2"
.LASF296:
	.string	"UNORDERED"
.LASF1214:
	.string	"CODE_FOR_iorhi3"
.LASF195:
	.string	"MAX_MACHINE_MODE"
.LASF101:
	.string	"_IO_read_ptr"
.LASF1471:
	.string	"regs_match_p"
.LASF1236:
	.string	"CODE_FOR_one_cmplqi2"
.LASF1720:
	.string	"replace_loop_mem"
.LASF1514:
	.string	"conditional"
.LASF1554:
	.string	"loop_givs_rescan"
.LASF841:
	.string	"CODE_FOR_extendhisi2"
.LASF692:
	.string	"benefit"
.LASF653:
	.string	"array"
.LASF1356:
	.string	"CODE_FOR_movv4sf"
.LASF375:
	.string	"global_live_at_start"
.LASF75:
	.string	"FLOAT_INT_SSE_REGS"
.LASF213:
	.string	"MATCH_SCRATCH"
.LASF263:
	.string	"CONST"
.LASF468:
	.string	"regno_pointer_align"
.LASF312:
	.string	"SQRT"
.LASF854:
	.string	"CODE_FOR_fix_trunchi_nomemory"
.LASF727:
	.string	"UNKNOWN_INDUCT"
.LASF440:
	.string	"GR_CC0"
.LASF1419:
	.string	"replacement"
.LASF196:
	.string	"mode_class"
.LASF1473:
	.string	"add_label_notes"
.LASF701:
	.string	"cant_derive"
.LASF1459:
	.string	"not_in_this"
.LASF1652:
	.string	"num_nonfixed_reads"
.LASF201:
	.string	"MODE_CC"
.LASF373:
	.string	"local_set"
.LASF911:
	.string	"CODE_FOR_sqrtsf2_i387"
.LASF144:
	.string	"PQImode"
.LASF458:
	.string	"sequence_rtl_expr"
.LASF1623:
	.string	"cmp_combine_givs_stats"
.LASF1320:
	.string	"CODE_FOR_strmovsi"
.LASF638:
	.string	"inner"
.LASF1064:
	.string	"CODE_FOR_sminv4hi3"
.LASF176:
	.string	"V8HImode"
.LASF33:
	.string	"mmx_load"
.LASF1463:
	.string	"libcall_benefit"
.LASF1071:
	.string	"CODE_FOR_ashlv2si3"
.LASF1298:
	.string	"CODE_FOR_bltgt"
.LASF1436:
	.string	"init_loop"
.LASF517:
	.string	"x_temp_slots"
.LASF1346:
	.string	"CODE_FOR_minsf3"
.LASF624:
	.string	"header"
.LASF958:
	.string	"CODE_FOR_pro_epilogue_adjust_stack_rex64"
.LASF504:
	.string	"x_stack_slot_list"
.LASF116:
	.string	"_old_offset"
.LASF241:
	.string	"CALL_INSN"
.LASF1370:
	.string	"OTI_subv"
.LASF802:
	.string	"PRED_FIRST_MATCH"
.LASF675:
	.string	"DWARF_DEBUG"
.LASF1023:
	.string	"CODE_FOR_cvtsi2ss"
.LASF1003:
	.string	"CODE_FOR_sse_andti3"
.LASF1353:
	.string	"CODE_FOR_builtin_setjmp_receiver"
.LASF266:
	.string	"SUBREG"
.LASF931:
	.string	"CODE_FOR_strmovqi_1"
.LASF1672:
	.string	"arg_operand"
.LASF539:
	.string	"calls_longjmp"
.LASF179:
	.string	"V16QImode"
.LASF719:
	.string	"initial_test"
.LASF627:
	.string	"pre_header_edges"
.LASF1217:
	.string	"CODE_FOR_xorsi3"
.LASF412:
	.string	"REG_ALWAYS_RETURN"
.LASF829:
	.string	"CODE_FOR_pushdi2_rex64"
.LASF1620:
	.string	"outer_mode"
.LASF484:
	.string	"decl"
.LASF1692:
	.string	"count_insns_in_loop"
.LASF894:
	.string	"CODE_FOR_setcc_2"
.LASF134:
	.string	"long long int"
.LASF1394:
	.string	"OTI_smax"
.LASF1020:
	.string	"CODE_FOR_cvtpi2ps"
.LASF390:
	.string	"REG_LIBCALL"
.LASF888:
	.string	"CODE_FOR_x86_shld_1"
.LASF115:
	.string	"_flags2"
.LASF1750:
	.string	"max_loop_num"
.LASF645:
	.string	"scan_start"
.LASF155:
	.string	"QCmode"
.LASF264:
	.string	"VALUE"
.LASF244:
	.string	"NOTE"
.LASF1749:
	.string	"max_luid"
.LASF1253:
	.string	"CODE_FOR_rotlsi3"
.LASF982:
	.string	"CODE_FOR_sse_movlhps"
.LASF1166:
	.string	"CODE_FOR_addhi3"
.LASF1675:
	.string	"update_reg_last_use"
.LASF987:
	.string	"CODE_FOR_sse_storess"
.LASF736:
	.string	"n_regs"
.LASF1147:
	.string	"CODE_FOR_trunctfdf2"
.LASF83:
	.string	"sse_nregs"
.LASF1211:
	.string	"CODE_FOR_andqi3"
.LASF288:
	.string	"UMIN"
.LASF214:
	.string	"MATCH_DUP"
.LASF1386:
	.string	"OTI_ior"
.LASF1243:
	.string	"CODE_FOR_ashrdi3"
.LASF1462:
	.string	"reg_in_basic_block_p"
.LASF571:
	.string	"HARD_REG_ELT_TYPE"
.LASF376:
	.string	"global_live_at_end"
.LASF777:
	.string	"iteration_var"
.LASF1004:
	.string	"CODE_FOR_sse_nandti3"
.LASF367:
	.string	"basic_block_def"
.LASF1140:
	.string	"CODE_FOR_extendsftf2"
.LASF1590:
	.string	"overlap"
.LASF803:
	.string	"PRED_NO_PREDICTION"
.LASF793:
	.string	"loop_insn_callback"
.LASF725:
	.string	"all_reduced"
.LASF21:
	.string	"divide"
.LASF1771:
	.string	"rtx_class"
.LASF1130:
	.string	"CODE_FOR_movdf"
.LASF1260:
	.string	"CODE_FOR_extv"
.LASF34:
	.string	"mmx_store"
.LASF1400:
	.string	"OTI_negv"
.LASF1384:
	.string	"OTI_ftrunc"
.LASF560:
	.string	"varasm_status"
.LASF1498:
	.string	"this_loop"
.LASF7:
	.string	"used"
.LASF962:
	.string	"CODE_FOR_sse_movdfcc_eq"
.LASF1482:
	.string	"body"
.LASF836:
	.string	"CODE_FOR_zero_extendhidi2"
.LASF623:
	.string	"loop"
.LASF1261:
	.string	"CODE_FOR_extzv"
.LASF895:
	.string	"CODE_FOR_jump"
.LASF896:
	.string	"CODE_FOR_doloop_end_internal"
.LASF1401:
	.string	"OTI_abs"
.LASF1418:
	.string	"loop_replace_args"
.LASF419:
	.string	"NOTE_INSN_LOOP_BEG"
.LASF1311:
	.string	"CODE_FOR_epilogue"
.LASF575:
	.string	"bitmap_element"
.LASF496:
	.string	"x_function_call_count"
.LASF1213:
	.string	"CODE_FOR_iorsi3"
.LASF573:
	.string	"prev"
.LASF162:
	.string	"CHImode"
.LASF435:
	.string	"NOTE_INSN_BASIC_BLOCK"
.LASF236:
	.string	"SET_ATTR_ALTERNATIVE"
.LASF998:
	.string	"CODE_FOR_vmrcpv4sf2"
.LASF467:
	.string	"regno_pointer_align_length"
.LASF462:
	.string	"x_first_insn"
.LASF718:
	.string	"initial_value"
.LASF476:
	.string	"x_apply_args_value"
.LASF753:
	.string	"consec"
.LASF73:
	.string	"FLOAT_INT_REGS"
.LASF1731:
	.string	"loop_insn_hoist"
.LASF1357:
	.string	"CODE_FOR_movv4si"
.LASF260:
	.string	"CONST_DOUBLE"
.LASF1576:
	.string	"last_giv_use"
.LASF1275:
	.string	"CODE_FOR_suneq"
.LASF1558:
	.string	"loop_ivs_free"
.LASF1615:
	.string	"total_incr"
.LASF1598:
	.string	"mult"
.LASF594:
	.string	"first_uid"
.LASF1465:
	.string	"scan_loop"
.LASF1725:
	.string	"replace_label"
.LASF1238:
	.string	"CODE_FOR_x86_shift_adj_1"
.LASF191:
	.string	"CCNOmode"
.LASF1244:
	.string	"CODE_FOR_x86_shift_adj_3"
.LASF1712:
	.string	"reg_rtx"
.LASF172:
	.string	"V4HImode"
.LASF1036:
	.string	"CODE_FOR_sssubv8qi3"
.LASF648:
	.string	"exit_count"
.LASF1726:
	.string	"old_label"
.LASF298:
	.string	"UNEQ"
.LASF762:
	.string	"is_equiv"
.LASF281:
	.string	"ASHIFT"
.LASF286:
	.string	"SMIN"
.LASF1454:
	.string	"__FUNCTION__"
.LASF273:
	.string	"IF_THEN_ELSE"
.LASF1588:
	.string	"arg0"
.LASF880:
	.string	"CODE_FOR_negsf2_ifs"
.LASF1367:
	.string	"OTI_add"
.LASF1371:
	.string	"OTI_smul"
.LASF707:
	.string	"derive_adjustment"
.LASF1700:
	.string	"written"
.LASF431:
	.string	"NOTE_INSN_REPEATED_LINE_NUMBER"
.LASF485:
	.string	"outer"
.LASF1143:
	.string	"CODE_FOR_truncdfsf2"
.LASF1500:
	.string	"last_insn_to_move"
.LASF833:
	.string	"CODE_FOR_zero_extendhisi2_and"
.LASF1530:
	.string	"num_real_write_prefetches"
.LASF868:
	.string	"CODE_FOR_addqi_ext_1"
.LASF428:
	.string	"NOTE_INSN_FUNCTION_BEG"
.LASF1416:
	.string	"OTI_MAX"
.LASF465:
	.string	"x_last_linenum"
.LASF689:
	.string	"location"
.LASF87:
	.string	"unsigned int"
.LASF1442:
	.string	"next_insn_in_loop"
.LASF1800:
	.string	"tree_node"
.LASF1276:
	.string	"CODE_FOR_sunge"
.LASF1461:
	.string	"note"
.LASF501:
	.string	"x_cleanup_label"
.LASF1578:
	.string	"dummy"
.LASF883:
	.string	"CODE_FOR_abssf2_memory"
.LASF1553:
	.string	"loop_givs_dead_check"
.LASF1263:
	.string	"CODE_FOR_seq"
.LASF947:
	.string	"CODE_FOR_rep_stossi_rex64"
.LASF1277:
	.string	"CODE_FOR_sungt"
.LASF1016:
	.string	"CODE_FOR_smaxv4sf3"
.LASF337:
	.string	"max_after_vec"
.LASF1396:
	.string	"OTI_umax"
.LASF1165:
	.string	"CODE_FOR_addsi3"
.LASF299:
	.string	"UNGE"
.LASF1034:
	.string	"CODE_FOR_subv4hi3"
.LASF1369:
	.string	"OTI_sub"
.LASF1017:
	.string	"CODE_FOR_vmsmaxv4sf3"
.LASF881:
	.string	"CODE_FOR_negdf2_memory"
.LASF1234:
	.string	"CODE_FOR_one_cmplsi2"
.LASF565:
	.string	"optab_methods"
.LASF826:
	.string	"CODE_FOR_x86_sahf_1"
.LASF1025:
	.string	"CODE_FOR_cvttss2si"
.LASF94:
	.string	"short int"
.LASF371:
	.string	"pred"
.LASF300:
	.string	"UNGT"
.LASF23:
	.string	"movzx"
.LASF545:
	.string	"has_computed_jump"
.LASF1049:
	.string	"CODE_FOR_mmx_uavgv8qi3"
.LASF463:
	.string	"x_last_insn"
.LASF1504:
	.string	"target_loop"
.LASF1403:
	.string	"OTI_one_cmpl"
.LASF1150:
	.string	"CODE_FOR_fix_truncdfdi2"
.LASF705:
	.string	"no_const_addval"
.LASF548:
	.string	"profile"
.LASF118:
	.string	"_vtable_offset"
.LASF1082:
	.string	"CODE_FOR_emms"
.LASF1639:
	.string	"loop_iv_add_mult_hoist"
.LASF1689:
	.string	"loop_regs_scan"
.LASF657:
	.string	"insn_gen_fn"
.LASF787:
	.string	"unknown_address_altered"
.LASF531:
	.string	"preferred_stack_boundary"
.LASF1499:
	.string	"our_next"
.LASF1721:
	.string	"args"
.LASF1307:
	.string	"CODE_FOR_call_value_exp"
.LASF136:
	.string	"VOIDmode"
.LASF413:
	.string	"REG_VTABLE_REF"
.LASF991:
	.string	"CODE_FOR_subv4sf3"
.LASF1142:
	.string	"CODE_FOR_extenddftf2"
.LASF1699:
	.string	"store_copies"
.LASF448:
	.string	"GR_VIRTUAL_OUTGOING_ARGS"
.LASF316:
	.string	"LO_SUM"
.LASF1149:
	.string	"CODE_FOR_fix_trunctfdi2"
.LASF1288:
	.string	"CODE_FOR_bgeu"
.LASF1080:
	.string	"CODE_FOR_mmx_punpcklwd"
.LASF380:
	.string	"frequency"
.LASF1160:
	.string	"CODE_FOR_floatsisf2"
.LASF349:
	.string	"rtwint"
.LASF1446:
	.string	"call_passed"
.LASF618:
	.string	"succ_next"
.LASF1793:
	.string	"max_uid_for_loop"
	.ident	"GCC: (Ubuntu/Linaro 4.8.1-10ubuntu9) 4.8.1"
	.section	.note.GNU-stack,"",@progbits
