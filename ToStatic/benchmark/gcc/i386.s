	.file	"i386.c"
# GNU C (Ubuntu/Linaro 4.8.1-10ubuntu9) version 4.8.1 (x86_64-linux-gnu)
#	compiled by GNU C version 4.8.1, GMP version 5.1.2, MPFR version 3.1.1-p2, MPC version 1.0.1
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed:  -I . -imultiarch x86_64-linux-gnu -D SPEC_CPU -D NDEBUG
# -D SPEC_CPU_LP64 i386.c -mtune=generic -march=x86-64 -g -fverbose-asm
# -fno-strict-aliasing -fstack-protector -Wformat -Wformat-security
# options enabled:  -faggressive-loop-optimizations
# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg -fcommon
# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
# -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fgnu-runtime
# -fident -finline-atomics -fira-hoist-pressure -fira-share-save-slots
# -fira-share-spill-slots -fivopts -fkeep-static-consts
# -fleading-underscore -fmath-errno -fmerge-debug-strings
# -fmove-loop-invariants -fpeephole -fprefetch-loop-arrays
# -freg-struct-return -fsched-critical-path-heuristic
# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fshow-column
# -fsigned-zeros -fsplit-ivs-in-unroller -fstack-protector
# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
# -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
# -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
# -ftree-parallelize-loops= -ftree-phiprop -ftree-pta -ftree-reassoc
# -ftree-scev-cprop -ftree-slp-vectorize -ftree-vect-loop-version
# -funit-at-a-time -funwind-tables -fverbose-asm -fzero-initialized-in-bss
# -m128bit-long-double -m64 -m80387 -maccumulate-outgoing-args
# -malign-stringops -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc
# -mieee-fp -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse
# -msse2 -mtls-direct-seg-refs

	.text
.Ltext0:
	.section	.rodata
	.align 32
	.type	size_cost, @object
	.size	size_cost, 160
size_cost:
# add:
	.long	2
# lea:
	.long	3
# shift_var:
	.long	2
# shift_const:
	.long	3
# mult_init:
	.long	3
# mult_bit:
	.long	0
# divide:
	.long	3
# movsx:
	.long	3
# movzx:
	.long	3
# large_insn:
	.long	0
# move_ratio:
	.long	2
# movzbl_load:
	.long	2
# int_load:
	.long	2
	.long	2
	.long	2
# int_store:
	.long	2
	.long	2
	.long	2
# fp_move:
	.long	2
# fp_load:
	.long	2
	.long	2
	.long	2
# fp_store:
	.long	2
	.long	2
	.long	2
# mmx_move:
	.long	3
# mmx_load:
	.long	3
	.long	3
# mmx_store:
	.long	3
	.long	3
# sse_move:
	.long	3
# sse_load:
	.long	3
	.long	3
	.long	3
# sse_store:
	.long	3
	.long	3
	.long	3
# mmxsse_to_integer:
	.long	3
# prefetch_block:
	.long	0
# simultaneous_prefetches:
	.long	0
	.align 32
	.type	i386_cost, @object
	.size	i386_cost, 160
i386_cost:
# add:
	.long	1
# lea:
	.long	1
# shift_var:
	.long	3
# shift_const:
	.long	2
# mult_init:
	.long	6
# mult_bit:
	.long	1
# divide:
	.long	23
# movsx:
	.long	3
# movzx:
	.long	2
# large_insn:
	.long	15
# move_ratio:
	.long	3
# movzbl_load:
	.long	4
# int_load:
	.long	2
	.long	4
	.long	2
# int_store:
	.long	2
	.long	4
	.long	2
# fp_move:
	.long	2
# fp_load:
	.long	8
	.long	8
	.long	8
# fp_store:
	.long	8
	.long	8
	.long	8
# mmx_move:
	.long	2
# mmx_load:
	.long	4
	.long	8
# mmx_store:
	.long	4
	.long	8
# sse_move:
	.long	2
# sse_load:
	.long	4
	.long	8
	.long	16
# sse_store:
	.long	4
	.long	8
	.long	16
# mmxsse_to_integer:
	.long	3
# prefetch_block:
	.long	0
# simultaneous_prefetches:
	.long	0
	.align 32
	.type	i486_cost, @object
	.size	i486_cost, 160
i486_cost:
# add:
	.long	1
# lea:
	.long	1
# shift_var:
	.long	3
# shift_const:
	.long	2
# mult_init:
	.long	12
# mult_bit:
	.long	1
# divide:
	.long	40
# movsx:
	.long	3
# movzx:
	.long	2
# large_insn:
	.long	15
# move_ratio:
	.long	3
# movzbl_load:
	.long	4
# int_load:
	.long	2
	.long	4
	.long	2
# int_store:
	.long	2
	.long	4
	.long	2
# fp_move:
	.long	2
# fp_load:
	.long	8
	.long	8
	.long	8
# fp_store:
	.long	8
	.long	8
	.long	8
# mmx_move:
	.long	2
# mmx_load:
	.long	4
	.long	8
# mmx_store:
	.long	4
	.long	8
# sse_move:
	.long	2
# sse_load:
	.long	4
	.long	8
	.long	16
# sse_store:
	.long	4
	.long	8
	.long	16
# mmxsse_to_integer:
	.long	3
# prefetch_block:
	.long	0
# simultaneous_prefetches:
	.long	0
	.align 32
	.type	pentium_cost, @object
	.size	pentium_cost, 160
pentium_cost:
# add:
	.long	1
# lea:
	.long	1
# shift_var:
	.long	4
# shift_const:
	.long	1
# mult_init:
	.long	11
# mult_bit:
	.long	0
# divide:
	.long	25
# movsx:
	.long	3
# movzx:
	.long	2
# large_insn:
	.long	8
# move_ratio:
	.long	6
# movzbl_load:
	.long	6
# int_load:
	.long	2
	.long	4
	.long	2
# int_store:
	.long	2
	.long	4
	.long	2
# fp_move:
	.long	2
# fp_load:
	.long	2
	.long	2
	.long	6
# fp_store:
	.long	4
	.long	4
	.long	6
# mmx_move:
	.long	8
# mmx_load:
	.long	8
	.long	8
# mmx_store:
	.long	8
	.long	8
# sse_move:
	.long	2
# sse_load:
	.long	4
	.long	8
	.long	16
# sse_store:
	.long	4
	.long	8
	.long	16
# mmxsse_to_integer:
	.long	3
# prefetch_block:
	.long	0
# simultaneous_prefetches:
	.long	0
	.align 32
	.type	pentiumpro_cost, @object
	.size	pentiumpro_cost, 160
pentiumpro_cost:
# add:
	.long	1
# lea:
	.long	1
# shift_var:
	.long	1
# shift_const:
	.long	1
# mult_init:
	.long	4
# mult_bit:
	.long	0
# divide:
	.long	17
# movsx:
	.long	1
# movzx:
	.long	1
# large_insn:
	.long	8
# move_ratio:
	.long	6
# movzbl_load:
	.long	2
# int_load:
	.long	4
	.long	4
	.long	4
# int_store:
	.long	2
	.long	2
	.long	2
# fp_move:
	.long	2
# fp_load:
	.long	2
	.long	2
	.long	6
# fp_store:
	.long	4
	.long	4
	.long	6
# mmx_move:
	.long	2
# mmx_load:
	.long	2
	.long	2
# mmx_store:
	.long	2
	.long	2
# sse_move:
	.long	2
# sse_load:
	.long	2
	.long	2
	.long	8
# sse_store:
	.long	2
	.long	2
	.long	8
# mmxsse_to_integer:
	.long	3
# prefetch_block:
	.long	32
# simultaneous_prefetches:
	.long	6
	.align 32
	.type	k6_cost, @object
	.size	k6_cost, 160
k6_cost:
# add:
	.long	1
# lea:
	.long	2
# shift_var:
	.long	1
# shift_const:
	.long	1
# mult_init:
	.long	3
# mult_bit:
	.long	0
# divide:
	.long	18
# movsx:
	.long	2
# movzx:
	.long	2
# large_insn:
	.long	8
# move_ratio:
	.long	4
# movzbl_load:
	.long	3
# int_load:
	.long	4
	.long	5
	.long	4
# int_store:
	.long	2
	.long	3
	.long	2
# fp_move:
	.long	4
# fp_load:
	.long	6
	.long	6
	.long	6
# fp_store:
	.long	4
	.long	4
	.long	4
# mmx_move:
	.long	2
# mmx_load:
	.long	2
	.long	2
# mmx_store:
	.long	2
	.long	2
# sse_move:
	.long	2
# sse_load:
	.long	2
	.long	2
	.long	8
# sse_store:
	.long	2
	.long	2
	.long	8
# mmxsse_to_integer:
	.long	6
# prefetch_block:
	.long	32
# simultaneous_prefetches:
	.long	1
	.align 32
	.type	athlon_cost, @object
	.size	athlon_cost, 160
athlon_cost:
# add:
	.long	1
# lea:
	.long	2
# shift_var:
	.long	1
# shift_const:
	.long	1
# mult_init:
	.long	5
# mult_bit:
	.long	0
# divide:
	.long	42
# movsx:
	.long	1
# movzx:
	.long	1
# large_insn:
	.long	8
# move_ratio:
	.long	9
# movzbl_load:
	.long	4
# int_load:
	.long	4
	.long	5
	.long	4
# int_store:
	.long	2
	.long	3
	.long	2
# fp_move:
	.long	4
# fp_load:
	.long	6
	.long	6
	.long	20
# fp_store:
	.long	4
	.long	4
	.long	16
# mmx_move:
	.long	2
# mmx_load:
	.long	2
	.long	2
# mmx_store:
	.long	2
	.long	2
# sse_move:
	.long	2
# sse_load:
	.long	2
	.long	2
	.long	8
# sse_store:
	.long	2
	.long	2
	.long	8
# mmxsse_to_integer:
	.long	6
# prefetch_block:
	.long	64
# simultaneous_prefetches:
	.long	6
	.align 32
	.type	pentium4_cost, @object
	.size	pentium4_cost, 160
pentium4_cost:
# add:
	.long	1
# lea:
	.long	1
# shift_var:
	.long	8
# shift_const:
	.long	8
# mult_init:
	.long	30
# mult_bit:
	.long	0
# divide:
	.long	112
# movsx:
	.long	1
# movzx:
	.long	1
# large_insn:
	.long	16
# move_ratio:
	.long	6
# movzbl_load:
	.long	2
# int_load:
	.long	4
	.long	5
	.long	4
# int_store:
	.long	2
	.long	3
	.long	2
# fp_move:
	.long	2
# fp_load:
	.long	2
	.long	2
	.long	6
# fp_store:
	.long	4
	.long	4
	.long	6
# mmx_move:
	.long	2
# mmx_load:
	.long	2
	.long	2
# mmx_store:
	.long	2
	.long	2
# sse_move:
	.long	12
# sse_load:
	.long	12
	.long	12
	.long	12
# sse_store:
	.long	2
	.long	2
	.long	8
# mmxsse_to_integer:
	.long	10
# prefetch_block:
	.long	64
# simultaneous_prefetches:
	.long	6
	.globl	ix86_cost
	.data
	.align 8
	.type	ix86_cost, @object
	.size	ix86_cost, 8
ix86_cost:
	.quad	pentium_cost
	.globl	x86_use_leave
	.section	.rodata
	.align 4
	.type	x86_use_leave, @object
	.size	x86_use_leave, 4
x86_use_leave:
	.long	49
	.globl	x86_push_memory
	.align 4
	.type	x86_push_memory, @object
	.size	x86_push_memory, 4
x86_push_memory:
	.long	113
	.globl	x86_zero_extend_with_and
	.align 4
	.type	x86_zero_extend_with_and, @object
	.size	x86_zero_extend_with_and, 4
x86_zero_extend_with_and:
	.long	6
	.globl	x86_movx
	.align 4
	.type	x86_movx, @object
	.size	x86_movx, 4
x86_movx:
	.long	104
	.globl	x86_double_with_add
	.align 4
	.type	x86_double_with_add, @object
	.size	x86_double_with_add, 4
x86_double_with_add:
	.long	-2
	.globl	x86_use_bit_test
	.align 4
	.type	x86_use_bit_test, @object
	.size	x86_use_bit_test, 4
x86_use_bit_test:
	.long	1
	.globl	x86_unroll_strlen
	.align 4
	.type	x86_unroll_strlen, @object
	.size	x86_unroll_strlen, 4
x86_unroll_strlen:
	.long	62
	.globl	x86_cmove
	.align 4
	.type	x86_cmove, @object
	.size	x86_cmove, 4
x86_cmove:
	.long	104
	.globl	x86_3dnow_a
	.align 4
	.type	x86_3dnow_a, @object
	.size	x86_3dnow_a, 4
x86_3dnow_a:
	.long	32
	.globl	x86_deep_branch
	.align 4
	.type	x86_deep_branch, @object
	.size	x86_deep_branch, 4
x86_deep_branch:
	.long	120
	.globl	x86_branch_hints
	.align 4
	.type	x86_branch_hints, @object
	.size	x86_branch_hints, 4
x86_branch_hints:
	.long	64
	.globl	x86_use_sahf
	.align 4
	.type	x86_use_sahf, @object
	.size	x86_use_sahf, 4
x86_use_sahf:
	.long	88
	.globl	x86_partial_reg_stall
	.align 4
	.type	x86_partial_reg_stall, @object
	.size	x86_partial_reg_stall, 4
x86_partial_reg_stall:
	.long	8
	.globl	x86_use_loop
	.align 4
	.type	x86_use_loop, @object
	.size	x86_use_loop, 4
x86_use_loop:
	.long	16
	.globl	x86_use_fiop
	.align 4
	.type	x86_use_fiop, @object
	.size	x86_use_fiop, 4
x86_use_fiop:
	.long	-45
	.globl	x86_use_mov0
	.align 4
	.type	x86_use_mov0, @object
	.size	x86_use_mov0, 4
x86_use_mov0:
	.long	16
	.globl	x86_use_cltd
	.align 4
	.type	x86_use_cltd, @object
	.size	x86_use_cltd, 4
x86_use_cltd:
	.long	-21
	.globl	x86_read_modify_write
	.align 4
	.type	x86_read_modify_write, @object
	.size	x86_read_modify_write, 4
x86_read_modify_write:
	.long	-5
	.globl	x86_read_modify
	.align 4
	.type	x86_read_modify, @object
	.size	x86_read_modify, 4
x86_read_modify:
	.long	-13
	.globl	x86_split_long_moves
	.align 4
	.type	x86_split_long_moves, @object
	.size	x86_split_long_moves, 4
x86_split_long_moves:
	.long	8
	.globl	x86_promote_QImode
	.align 4
	.type	x86_promote_QImode, @object
	.size	x86_promote_QImode, 4
x86_promote_QImode:
	.long	23
	.globl	x86_single_stringop
	.align 4
	.type	x86_single_stringop, @object
	.size	x86_single_stringop, 4
x86_single_stringop:
	.long	65
	.globl	x86_qimode_math
	.align 4
	.type	x86_qimode_math, @object
	.size	x86_qimode_math, 4
x86_qimode_math:
	.long	-1
	.globl	x86_promote_qi_regs
	.align 4
	.type	x86_promote_qi_regs, @object
	.size	x86_promote_qi_regs, 4
x86_promote_qi_regs:
	.zero	4
	.globl	x86_himode_math
	.align 4
	.type	x86_himode_math, @object
	.size	x86_himode_math, 4
x86_himode_math:
	.long	-9
	.globl	x86_promote_hi_regs
	.align 4
	.type	x86_promote_hi_regs, @object
	.size	x86_promote_hi_regs, 4
x86_promote_hi_regs:
	.long	8
	.globl	x86_sub_esp_4
	.align 4
	.type	x86_sub_esp_4, @object
	.size	x86_sub_esp_4, 4
x86_sub_esp_4:
	.long	104
	.globl	x86_sub_esp_8
	.align 4
	.type	x86_sub_esp_8, @object
	.size	x86_sub_esp_8, 4
x86_sub_esp_8:
	.long	107
	.globl	x86_add_esp_4
	.align 4
	.type	x86_add_esp_4, @object
	.size	x86_add_esp_4, 4
x86_add_esp_4:
	.long	112
	.globl	x86_add_esp_8
	.align 4
	.type	x86_add_esp_8, @object
	.size	x86_add_esp_8, 4
x86_add_esp_8:
	.long	123
	.globl	x86_integer_DFmode_moves
	.align 4
	.type	x86_integer_DFmode_moves, @object
	.size	x86_integer_DFmode_moves, 4
x86_integer_DFmode_moves:
	.long	-97
	.globl	x86_partial_reg_dependency
	.align 4
	.type	x86_partial_reg_dependency, @object
	.size	x86_partial_reg_dependency, 4
x86_partial_reg_dependency:
	.long	96
	.globl	x86_memory_mismatch_stall
	.align 4
	.type	x86_memory_mismatch_stall, @object
	.size	x86_memory_mismatch_stall, 4
x86_memory_mismatch_stall:
	.long	96
	.globl	x86_accumulate_outgoing_args
	.align 4
	.type	x86_accumulate_outgoing_args, @object
	.size	x86_accumulate_outgoing_args, 4
x86_accumulate_outgoing_args:
	.long	104
	.globl	x86_prologue_using_move
	.align 4
	.type	x86_prologue_using_move, @object
	.size	x86_prologue_using_move, 4
x86_prologue_using_move:
	.long	104
	.globl	x86_epilogue_using_move
	.align 4
	.type	x86_epilogue_using_move, @object
	.size	x86_epilogue_using_move, 4
x86_epilogue_using_move:
	.long	104
	.globl	x86_decompose_lea
	.align 4
	.type	x86_decompose_lea, @object
	.size	x86_decompose_lea, 4
x86_decompose_lea:
	.long	64
	.globl	x86_arch_always_fancy_math_387
	.align 4
	.type	x86_arch_always_fancy_math_387, @object
	.size	x86_arch_always_fancy_math_387, 4
x86_arch_always_fancy_math_387:
	.long	108
	.local	use_fast_prologue_epilogue
	.comm	use_fast_prologue_epilogue,4,4
.LC0:
	.string	"ax"
.LC1:
	.string	"dx"
.LC2:
	.string	"cx"
.LC3:
	.string	"bx"
.LC4:
	.string	"si"
.LC5:
	.string	"di"
.LC6:
	.string	"bp"
.LC7:
	.string	"sp"
.LC8:
	.string	"st"
.LC9:
	.string	"st(1)"
.LC10:
	.string	"st(2)"
.LC11:
	.string	"st(3)"
.LC12:
	.string	"st(4)"
.LC13:
	.string	"st(5)"
.LC14:
	.string	"st(6)"
.LC15:
	.string	"st(7)"
.LC16:
	.string	""
.LC17:
	.string	"flags"
.LC18:
	.string	"fpsr"
.LC19:
	.string	"dirflag"
.LC20:
	.string	"frame"
.LC21:
	.string	"xmm0"
.LC22:
	.string	"xmm1"
.LC23:
	.string	"xmm2"
.LC24:
	.string	"xmm3"
.LC25:
	.string	"xmm4"
.LC26:
	.string	"xmm5"
.LC27:
	.string	"xmm6"
.LC28:
	.string	"xmm7"
.LC29:
	.string	"mm0"
.LC30:
	.string	"mm1"
.LC31:
	.string	"mm2"
.LC32:
	.string	"mm3"
.LC33:
	.string	"mm4"
.LC34:
	.string	"mm5"
.LC35:
	.string	"mm6"
.LC36:
	.string	"mm7"
.LC37:
	.string	"r8"
.LC38:
	.string	"r9"
.LC39:
	.string	"r10"
.LC40:
	.string	"r11"
.LC41:
	.string	"r12"
.LC42:
	.string	"r13"
.LC43:
	.string	"r14"
.LC44:
	.string	"r15"
.LC45:
	.string	"xmm8"
.LC46:
	.string	"xmm9"
.LC47:
	.string	"xmm10"
.LC48:
	.string	"xmm11"
.LC49:
	.string	"xmm12"
.LC50:
	.string	"xmm13"
.LC51:
	.string	"xmm14"
.LC52:
	.string	"xmm15"
	.align 32
	.type	hi_reg_name, @object
	.size	hi_reg_name, 424
hi_reg_name:
	.quad	.LC0
	.quad	.LC1
	.quad	.LC2
	.quad	.LC3
	.quad	.LC4
	.quad	.LC5
	.quad	.LC6
	.quad	.LC7
	.quad	.LC8
	.quad	.LC9
	.quad	.LC10
	.quad	.LC11
	.quad	.LC12
	.quad	.LC13
	.quad	.LC14
	.quad	.LC15
	.quad	.LC16
	.quad	.LC17
	.quad	.LC18
	.quad	.LC19
	.quad	.LC20
	.quad	.LC21
	.quad	.LC22
	.quad	.LC23
	.quad	.LC24
	.quad	.LC25
	.quad	.LC26
	.quad	.LC27
	.quad	.LC28
	.quad	.LC29
	.quad	.LC30
	.quad	.LC31
	.quad	.LC32
	.quad	.LC33
	.quad	.LC34
	.quad	.LC35
	.quad	.LC36
	.quad	.LC37
	.quad	.LC38
	.quad	.LC39
	.quad	.LC40
	.quad	.LC41
	.quad	.LC42
	.quad	.LC43
	.quad	.LC44
	.quad	.LC45
	.quad	.LC46
	.quad	.LC47
	.quad	.LC48
	.quad	.LC49
	.quad	.LC50
	.quad	.LC51
	.quad	.LC52
.LC53:
	.string	"al"
.LC54:
	.string	"dl"
.LC55:
	.string	"cl"
.LC56:
	.string	"bl"
.LC57:
	.string	"sil"
.LC58:
	.string	"dil"
.LC59:
	.string	"bpl"
.LC60:
	.string	"spl"
	.align 32
	.type	qi_reg_name, @object
	.size	qi_reg_name, 64
qi_reg_name:
	.quad	.LC53
	.quad	.LC54
	.quad	.LC55
	.quad	.LC56
	.quad	.LC57
	.quad	.LC58
	.quad	.LC59
	.quad	.LC60
.LC61:
	.string	"ah"
.LC62:
	.string	"dh"
.LC63:
	.string	"ch"
.LC64:
	.string	"bh"
	.align 32
	.type	qi_high_reg_name, @object
	.size	qi_high_reg_name, 32
qi_high_reg_name:
	.quad	.LC61
	.quad	.LC62
	.quad	.LC63
	.quad	.LC64
	.globl	regclass_map
	.align 32
	.type	regclass_map, @object
	.size	regclass_map, 212
regclass_map:
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	9
	.long	9
	.long	13
	.long	14
	.long	15
	.long	15
	.long	15
	.long	15
	.long	15
	.long	15
	.long	9
	.long	0
	.long	0
	.long	0
	.long	9
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.long	17
	.long	17
	.long	17
	.long	17
	.long	17
	.long	17
	.long	17
	.long	17
	.long	9
	.long	9
	.long	9
	.long	9
	.long	9
	.long	9
	.long	9
	.long	9
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.globl	dbx_register_map
	.align 32
	.type	dbx_register_map, @object
	.size	dbx_register_map, 212
dbx_register_map:
	.long	0
	.long	2
	.long	1
	.long	3
	.long	6
	.long	7
	.long	4
	.long	5
	.long	12
	.long	13
	.long	14
	.long	15
	.long	16
	.long	17
	.long	18
	.long	19
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	21
	.long	22
	.long	23
	.long	24
	.long	25
	.long	26
	.long	27
	.long	28
	.long	29
	.long	30
	.long	31
	.long	32
	.long	33
	.long	34
	.long	35
	.long	36
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.align 16
	.type	x86_64_int_parameter_registers, @object
	.size	x86_64_int_parameter_registers, 24
x86_64_int_parameter_registers:
	.long	5
	.long	4
	.long	1
	.long	2
	.long	37
	.long	38
	.align 16
	.type	x86_64_int_return_registers, @object
	.size	x86_64_int_return_registers, 16
x86_64_int_return_registers:
	.long	0
	.long	1
	.long	5
	.long	4
	.globl	dbx64_register_map
	.align 32
	.type	dbx64_register_map, @object
	.size	dbx64_register_map, 212
dbx64_register_map:
	.long	0
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.long	33
	.long	34
	.long	35
	.long	36
	.long	37
	.long	38
	.long	39
	.long	40
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	17
	.long	18
	.long	19
	.long	20
	.long	21
	.long	22
	.long	23
	.long	24
	.long	41
	.long	42
	.long	43
	.long	44
	.long	45
	.long	46
	.long	47
	.long	48
	.long	8
	.long	9
	.long	10
	.long	11
	.long	12
	.long	13
	.long	14
	.long	15
	.long	25
	.long	26
	.long	27
	.long	28
	.long	29
	.long	30
	.long	31
	.long	32
	.globl	svr4_dbx_register_map
	.align 32
	.type	svr4_dbx_register_map, @object
	.size	svr4_dbx_register_map, 212
svr4_dbx_register_map:
	.long	0
	.long	2
	.long	1
	.long	3
	.long	6
	.long	7
	.long	5
	.long	4
	.long	11
	.long	12
	.long	13
	.long	14
	.long	15
	.long	16
	.long	17
	.long	18
	.long	-1
	.long	9
	.long	-1
	.long	-1
	.long	-1
	.long	21
	.long	22
	.long	23
	.long	24
	.long	25
	.long	26
	.long	27
	.long	28
	.long	29
	.long	30
	.long	31
	.long	32
	.long	33
	.long	34
	.long	35
	.long	36
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.globl	ix86_compare_op0
	.bss
	.align 8
	.type	ix86_compare_op0, @object
	.size	ix86_compare_op0, 8
ix86_compare_op0:
	.zero	8
	.globl	ix86_compare_op1
	.align 8
	.type	ix86_compare_op1, @object
	.size	ix86_compare_op1, 8
ix86_compare_op1:
	.zero	8
	.comm	ix86_debug_arg_string,8,8
	.comm	ix86_debug_addr_string,8,8
	.comm	ix86_cmodel_string,8,8
	.comm	ix86_cmodel,4,4
	.comm	ix86_asm_string,8,8
	.globl	ix86_asm_dialect
	.align 4
	.type	ix86_asm_dialect, @object
	.size	ix86_asm_dialect, 4
ix86_asm_dialect:
	.zero	4
	.comm	ix86_cpu,4,4
	.comm	ix86_fpmath,4,4
	.comm	ix86_arch,4,4
	.comm	ix86_cpu_string,8,8
	.comm	ix86_arch_string,8,8
	.comm	ix86_fpmath_string,8,8
	.comm	ix86_regparm_string,8,8
	.comm	x86_prefetch_sse,4,4
	.comm	ix86_regparm,4,4
	.comm	ix86_align_loops_string,8,8
	.comm	ix86_align_jumps_string,8,8
	.comm	ix86_preferred_stack_boundary_string,8,8
	.comm	ix86_preferred_stack_boundary,4,4
	.comm	ix86_branch_cost,4,4
	.comm	ix86_branch_cost_string,8,8
	.comm	ix86_align_funcs_string,8,8
	.local	internal_label_prefix
	.comm	internal_label_prefix,16,16
	.local	internal_label_prefix_len
	.comm	internal_label_prefix_len,4,4
	.globl	ix86_attribute_table
	.section	.rodata
.LC65:
	.string	"stdcall"
.LC66:
	.string	"cdecl"
.LC67:
	.string	"regparm"
	.align 32
	.type	ix86_attribute_table, @object
	.size	ix86_attribute_table, 128
ix86_attribute_table:
# name:
	.quad	.LC65
# min_length:
	.long	0
# max_length:
	.long	0
# decl_required:
	.byte	0
# type_required:
	.byte	1
# function_type_required:
	.byte	1
# handler:
	.zero	5
	.quad	ix86_handle_cdecl_attribute
# name:
	.quad	.LC66
# min_length:
	.long	0
# max_length:
	.long	0
# decl_required:
	.byte	0
# type_required:
	.byte	1
# function_type_required:
	.byte	1
# handler:
	.zero	5
	.quad	ix86_handle_cdecl_attribute
# name:
	.quad	.LC67
# min_length:
	.long	1
# max_length:
	.long	1
# decl_required:
	.byte	0
# type_required:
	.byte	1
# function_type_required:
	.byte	1
# handler:
	.zero	5
	.quad	ix86_handle_regparm_attribute
# name:
	.quad	0
# min_length:
	.long	0
# max_length:
	.long	0
# decl_required:
	.byte	0
# type_required:
	.byte	0
# function_type_required:
	.byte	0
# handler:
	.zero	5
	.quad	0
.LC68:
	.string	"no"
.LC69:
	.string	"integer"
.LC70:
	.string	"integerSI"
.LC71:
	.string	"sse"
.LC72:
	.string	"sseSF"
.LC73:
	.string	"sseDF"
.LC74:
	.string	"sseup"
.LC75:
	.string	"x87"
.LC76:
	.string	"x87up"
	.align 32
	.type	x86_64_reg_class_name, @object
	.size	x86_64_reg_class_name, 80
x86_64_reg_class_name:
	.quad	.LC68
	.quad	.LC69
	.quad	.LC70
	.quad	.LC71
	.quad	.LC72
	.quad	.LC73
	.quad	.LC74
	.quad	.LC75
	.quad	.LC76
	.quad	.LC68
	.globl	targetm
.LC77:
	.string	"\t.byte\t"
.LC78:
	.string	"\t.value\t"
.LC79:
	.string	"\t.long\t"
.LC80:
	.string	"\t.quad\t"
	.data
	.align 32
	.type	targetm, @object
	.size	targetm, 344
targetm:
# asm_out:
# open_paren:
	.quad	.LC16
# close_paren:
	.quad	.LC16
# byte_op:
	.quad	.LC77
# aligned_op:
# hi:
	.quad	.LC78
# si:
	.quad	.LC79
# di:
	.quad	.LC80
# ti:
	.quad	0
# unaligned_op:
# hi:
	.quad	.LC78
# si:
	.quad	.LC79
# di:
	.quad	.LC80
# ti:
	.quad	0
# integer:
	.quad	default_assemble_integer
# function_prologue:
	.quad	default_function_pro_epilogue
# function_end_prologue:
	.quad	no_asm_to_stream
# function_begin_epilogue:
	.quad	no_asm_to_stream
# function_epilogue:
	.quad	default_function_pro_epilogue
# named_section:
	.quad	default_elf_asm_named_section
# exception_section:
	.quad	default_exception_section
# eh_frame_section:
	.quad	default_eh_frame_section
# constructor:
	.quad	default_named_section_asm_out_constructor
# destructor:
	.quad	default_named_section_asm_out_destructor
# sched:
# adjust_cost:
	.quad	ix86_adjust_cost
# adjust_priority:
	.quad	0
# issue_rate:
	.quad	ix86_issue_rate
# variable_issue:
	.quad	ix86_variable_issue
# md_init:
	.quad	ix86_sched_init
# md_finish:
	.quad	0
# reorder:
	.quad	ix86_sched_reorder
# reorder2:
	.quad	0
# cycle_display:
	.quad	0
# merge_decl_attributes:
	.quad	merge_decl_attributes
# merge_type_attributes:
	.quad	merge_type_attributes
# attribute_table:
	.quad	ix86_attribute_table
# comp_type_attributes:
	.quad	ix86_comp_type_attributes
# set_default_type_attributes:
	.quad	default_set_default_type_attributes
# insert_attributes:
	.quad	default_insert_attributes
# function_attribute_inlinable_p:
	.quad	default_function_attribute_inlinable_p
# ms_bitfield_layout_p:
	.quad	default_ms_bitfield_layout_p
# init_builtins:
	.quad	ix86_init_builtins
# expand_builtin:
	.quad	ix86_expand_builtin
# section_type_flags:
	.quad	default_section_type_flags
# have_named_sections:
	.byte	1
# have_ctors_dtors:
	.byte	1
# cannot_modify_jumps_p:
	.zero	6
	.quad	hook_void_bool_false
	.section	.rodata
.LC81:
	.string	"athlon-4"
.LC82:
	.string	"i386"
.LC83:
	.string	"small"
	.align 8
.LC84:
	.string	"code model %s not supported in PIC mode"
.LC85:
	.string	"32"
.LC86:
	.string	"kernel"
.LC87:
	.string	"medium"
.LC88:
	.string	"large"
	.align 8
.LC89:
	.string	"bad value (%s) for -mcmodel= switch"
.LC90:
	.string	"intel"
.LC91:
	.string	"att"
	.align 8
.LC92:
	.string	"bad value (%s) for -masm= switch"
.LC93:
	.string	"64"
	.align 8
.LC94:
	.string	"code model `%s' not supported in the %s bit mode"
	.align 8
.LC95:
	.string	"code model `large' not supported yet"
	.align 8
.LC96:
	.string	"bad value (%s) for -march= switch"
	.align 8
.LC97:
	.string	"bad value (%s) for -mcpu= switch"
	.align 8
.LC98:
	.string	"-mregparm=%d is not between 0 and %d"
	.align 8
.LC99:
	.string	"-malign-loops is obsolete, use -falign-loops"
	.align 8
.LC100:
	.string	"-malign-loops=%d is not between 0 and %d"
	.align 8
.LC101:
	.string	"-malign-jumps is obsolete, use -falign-jumps"
	.align 8
.LC102:
	.string	"-malign-functions is obsolete, use -falign-functions"
	.align 8
.LC103:
	.string	"-mpreferred-stack-boundary=%d is not between %d and 12"
	.align 8
.LC104:
	.string	"-mbranch-cost=%d is not between 0 and 5"
	.align 8
.LC105:
	.string	"-malign-double makes no sense in the 64bit mode"
	.align 8
.LC106:
	.string	"-mrtd calling convention not supported in the 64bit mode"
.LC107:
	.string	"387"
	.align 8
.LC108:
	.string	"SSE instruction set disabled, using 387 arithmetics"
.LC109:
	.string	"387,sse"
.LC110:
	.string	"sse,387"
	.align 8
.LC111:
	.string	"387 instruction set disabled, using SSE arithmetics"
	.align 8
.LC112:
	.string	"bad value (%s) for -mfpmath= switch"
.LC113:
	.string	"LX"
.LC114:
	.string	"*.%s%u"
	.text
	.globl	override_options
	.type	override_options, @function
override_options:
.LFB2:
	.file 1 "i386.c"
	.loc 1 836 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 907 0
	movl	$18, -12(%rbp)	#, pta_size
	.loc 1 913 0
	movq	ix86_cpu_string(%rip), %rax	# ix86_cpu_string, ix86_cpu_string.0
	testq	%rax, %rax	# ix86_cpu_string.0
	jne	.L2	#,
	.loc 1 913 0 is_stmt 0 discriminator 1
	movq	ix86_arch_string(%rip), %rax	# ix86_arch_string, ix86_arch_string.1
	testq	%rax, %rax	# ix86_arch_string.1
	je	.L2	#,
	.loc 1 914 0 is_stmt 1
	movq	ix86_arch_string(%rip), %rax	# ix86_arch_string, ix86_arch_string.2
	movq	%rax, ix86_cpu_string(%rip)	# ix86_arch_string.2, ix86_cpu_string
.L2:
	.loc 1 915 0
	movq	ix86_cpu_string(%rip), %rax	# ix86_cpu_string, ix86_cpu_string.3
	testq	%rax, %rax	# ix86_cpu_string.3
	jne	.L3	#,
	.loc 1 916 0
	movl	$.LC81, %eax	#, ix86_cpu_string.4
	movq	%rax, ix86_cpu_string(%rip)	# ix86_cpu_string.4, ix86_cpu_string
.L3:
	.loc 1 917 0
	movq	ix86_arch_string(%rip), %rax	# ix86_arch_string, ix86_arch_string.5
	testq	%rax, %rax	# ix86_arch_string.5
	jne	.L4	#,
	.loc 1 918 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.7
	andl	$33554432, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L5	#,
	.loc 1 918 0 is_stmt 0 discriminator 1
	movl	$.LC81, %eax	#, iftmp.6
	jmp	.L6	#
.L5:
	.loc 1 918 0 discriminator 2
	movl	$.LC82, %eax	#, iftmp.6
.L6:
	.loc 1 918 0 discriminator 3
	movq	%rax, ix86_arch_string(%rip)	# iftmp.6, ix86_arch_string
.L4:
	.loc 1 920 0 is_stmt 1
	movq	ix86_cmodel_string(%rip), %rax	# ix86_cmodel_string, ix86_cmodel_string.8
	testq	%rax, %rax	# ix86_cmodel_string.8
	je	.L7	#,
	.loc 1 922 0
	movq	ix86_cmodel_string(%rip), %rax	# ix86_cmodel_string, ix86_cmodel_string.9
	movl	$.LC83, %esi	#,
	movq	%rax, %rdi	# ix86_cmodel_string.9,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L8	#,
	.loc 1 923 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.11
	testl	%eax, %eax	# flag_pic.11
	je	.L9	#,
	.loc 1 923 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.10
	jmp	.L10	#
.L9:
	.loc 1 923 0 discriminator 2
	movl	$1, %eax	#, iftmp.10
.L10:
	.loc 1 923 0 discriminator 1
	movl	%eax, ix86_cmodel(%rip)	# iftmp.10, ix86_cmodel
	jmp	.L17	#
.L8:
	.loc 1 924 0 is_stmt 1
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.12
	testl	%eax, %eax	# flag_pic.12
	je	.L12	#,
	.loc 1 925 0
	movq	ix86_cmodel_string(%rip), %rax	# ix86_cmodel_string, ix86_cmodel_string.13
	movq	%rax, %rsi	# ix86_cmodel_string.13,
	movl	$.LC84, %edi	#,
	movl	$0, %eax	#,
	call	sorry	#
	jmp	.L17	#
.L12:
	.loc 1 926 0
	movq	ix86_cmodel_string(%rip), %rax	# ix86_cmodel_string, ix86_cmodel_string.14
	movl	$.LC85, %esi	#,
	movq	%rax, %rdi	# ix86_cmodel_string.14,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L13	#,
	.loc 1 927 0
	movl	$0, ix86_cmodel(%rip)	#, ix86_cmodel
	jmp	.L17	#
.L13:
	.loc 1 928 0
	movq	ix86_cmodel_string(%rip), %rax	# ix86_cmodel_string, ix86_cmodel_string.15
	movl	$.LC86, %esi	#,
	movq	%rax, %rdi	# ix86_cmodel_string.15,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L14	#,
	.loc 1 928 0 is_stmt 0 discriminator 1
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.16
	testl	%eax, %eax	# flag_pic.16
	jne	.L14	#,
	.loc 1 929 0 is_stmt 1
	movl	$2, ix86_cmodel(%rip)	#, ix86_cmodel
	jmp	.L11	#
.L14:
	.loc 1 930 0
	movq	ix86_cmodel_string(%rip), %rax	# ix86_cmodel_string, ix86_cmodel_string.17
	movl	$.LC87, %esi	#,
	movq	%rax, %rdi	# ix86_cmodel_string.17,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L15	#,
	.loc 1 930 0 is_stmt 0 discriminator 1
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.18
	testl	%eax, %eax	# flag_pic.18
	jne	.L15	#,
	.loc 1 931 0 is_stmt 1
	movl	$3, ix86_cmodel(%rip)	#, ix86_cmodel
	jmp	.L11	#
.L15:
	.loc 1 932 0
	movq	ix86_cmodel_string(%rip), %rax	# ix86_cmodel_string, ix86_cmodel_string.19
	movl	$.LC88, %esi	#,
	movq	%rax, %rdi	# ix86_cmodel_string.19,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L16	#,
	.loc 1 932 0 is_stmt 0 discriminator 1
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.20
	testl	%eax, %eax	# flag_pic.20
	jne	.L16	#,
	.loc 1 933 0 is_stmt 1
	movl	$4, ix86_cmodel(%rip)	#, ix86_cmodel
	jmp	.L11	#
.L16:
	.loc 1 935 0
	movq	ix86_cmodel_string(%rip), %rax	# ix86_cmodel_string, ix86_cmodel_string.21
	movq	%rax, %rsi	# ix86_cmodel_string.21,
	movl	$.LC89, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	jmp	.L17	#
.L11:
	jmp	.L17	#
.L7:
	.loc 1 939 0
	movl	$0, ix86_cmodel(%rip)	#, ix86_cmodel
	.loc 1 940 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.22
	andl	$33554432, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L17	#,
	.loc 1 941 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.24
	testl	%eax, %eax	# flag_pic.24
	je	.L18	#,
	.loc 1 941 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.23
	jmp	.L19	#
.L18:
	.loc 1 941 0 discriminator 2
	movl	$1, %eax	#, iftmp.23
.L19:
	.loc 1 941 0 discriminator 3
	movl	%eax, ix86_cmodel(%rip)	# iftmp.23, ix86_cmodel
.L17:
	.loc 1 943 0 is_stmt 1
	movq	ix86_asm_string(%rip), %rax	# ix86_asm_string, ix86_asm_string.25
	testq	%rax, %rax	# ix86_asm_string.25
	je	.L20	#,
	.loc 1 945 0
	movq	ix86_asm_string(%rip), %rax	# ix86_asm_string, ix86_asm_string.26
	movl	$.LC90, %esi	#,
	movq	%rax, %rdi	# ix86_asm_string.26,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L21	#,
	.loc 1 946 0
	movl	$1, ix86_asm_dialect(%rip)	#, ix86_asm_dialect
	jmp	.L20	#
.L21:
	.loc 1 947 0
	movq	ix86_asm_string(%rip), %rax	# ix86_asm_string, ix86_asm_string.27
	movl	$.LC91, %esi	#,
	movq	%rax, %rdi	# ix86_asm_string.27,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L22	#,
	.loc 1 948 0
	movl	$0, ix86_asm_dialect(%rip)	#, ix86_asm_dialect
	jmp	.L20	#
.L22:
	.loc 1 950 0
	movq	ix86_asm_string(%rip), %rax	# ix86_asm_string, ix86_asm_string.28
	movq	%rax, %rsi	# ix86_asm_string.28,
	movl	$.LC92, %edi	#,
	movl	$0, %eax	#,
	call	error	#
.L20:
	.loc 1 952 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.29
	andl	$33554432, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	sete	%dl	#, D.29620
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.30
	testl	%eax, %eax	# ix86_cmodel.30
	sete	%al	#, D.29620
	xorl	%edx, %eax	# D.29620, D.29620
	testb	%al, %al	# D.29620
	je	.L23	#,
	.loc 1 954 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.32
	andl	$33554432, %eax	#, D.29619
	.loc 1 953 0
	testl	%eax, %eax	# D.29619
	je	.L24	#,
	.loc 1 953 0 is_stmt 0 discriminator 1
	movl	$.LC93, %eax	#, iftmp.31
	jmp	.L25	#
.L24:
	.loc 1 953 0 discriminator 2
	movl	$.LC85, %eax	#, iftmp.31
.L25:
	.loc 1 953 0 discriminator 3
	movq	ix86_cmodel_string(%rip), %rcx	# ix86_cmodel_string, ix86_cmodel_string.33
	movq	%rax, %rdx	# iftmp.31,
	movq	%rcx, %rsi	# ix86_cmodel_string.33,
	movl	$.LC94, %edi	#,
	movl	$0, %eax	#,
	call	error	#
.L23:
	.loc 1 955 0 is_stmt 1
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.34
	cmpl	$4, %eax	#, ix86_cmodel.34
	jne	.L103	#,
	.loc 1 956 0
	movl	$.LC95, %edi	#,
	movl	$0, %eax	#,
	call	sorry	#
.L103:
	.loc 1 961 0
	movl	$0, -16(%rbp)	#, i
	jmp	.L27	#
.L36:
	.loc 1 962 0
	movl	-16(%rbp), %eax	# i, tmp287
	cltq
	salq	$4, %rax	#, tmp288
	addq	$processor_alias_table.14711, %rax	#, tmp289
	movq	(%rax), %rdx	# processor_alias_table[i_1].name, D.29621
	movq	ix86_arch_string(%rip), %rax	# ix86_arch_string, ix86_arch_string.37
	movq	%rdx, %rsi	# D.29621,
	movq	%rax, %rdi	# ix86_arch_string.37,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L28	#,
	.loc 1 964 0
	movl	-16(%rbp), %eax	# i, tmp291
	cltq
	salq	$4, %rax	#, tmp292
	addq	$processor_alias_table.14711, %rax	#, tmp293
	movl	8(%rax), %eax	# processor_alias_table[i_1].processor, D.29622
	movl	%eax, ix86_arch(%rip)	# ix86_arch.38, ix86_arch
	.loc 1 966 0
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.39
	movl	%eax, ix86_cpu(%rip)	# ix86_arch.40, ix86_cpu
	.loc 1 967 0
	movl	-16(%rbp), %eax	# i, tmp295
	cltq
	salq	$4, %rax	#, tmp296
	addq	$processor_alias_table.14711, %rax	#, tmp297
	movl	12(%rax), %eax	# processor_alias_table[i_1].flags, D.29623
	andl	$4, %eax	#, D.29624
	testl	%eax, %eax	# D.29624
	je	.L29	#,
	.loc 1 968 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.41
	andl	$32768, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	jne	.L29	#,
	.loc 1 969 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.42
	orb	$64, %ah	#, target_flags.43
	movl	%eax, target_flags(%rip)	# target_flags.43, target_flags
.L29:
	.loc 1 970 0
	movl	-16(%rbp), %eax	# i, tmp299
	cltq
	salq	$4, %rax	#, tmp300
	addq	$processor_alias_table.14711, %rax	#, tmp301
	movl	12(%rax), %eax	# processor_alias_table[i_1].flags, D.29623
	andl	$16, %eax	#, D.29624
	testl	%eax, %eax	# D.29624
	je	.L30	#,
	.loc 1 971 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.44
	andl	$2097152, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	jne	.L30	#,
	.loc 1 972 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.45
	orl	$1048576, %eax	#, target_flags.46
	movl	%eax, target_flags(%rip)	# target_flags.46, target_flags
.L30:
	.loc 1 973 0
	movl	-16(%rbp), %eax	# i, tmp303
	cltq
	salq	$4, %rax	#, tmp304
	addq	$processor_alias_table.14711, %rax	#, tmp305
	movl	12(%rax), %eax	# processor_alias_table[i_1].flags, D.29623
	andl	$64, %eax	#, D.29624
	testl	%eax, %eax	# D.29624
	je	.L31	#,
	.loc 1 974 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.47
	andl	$8388608, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	jne	.L31	#,
	.loc 1 975 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.48
	orl	$4194304, %eax	#, target_flags.49
	movl	%eax, target_flags(%rip)	# target_flags.49, target_flags
.L31:
	.loc 1 976 0
	movl	-16(%rbp), %eax	# i, tmp307
	cltq
	salq	$4, %rax	#, tmp308
	addq	$processor_alias_table.14711, %rax	#, tmp309
	movl	12(%rax), %eax	# processor_alias_table[i_1].flags, D.29623
	andl	$1, %eax	#, D.29624
	testl	%eax, %eax	# D.29624
	je	.L32	#,
	.loc 1 977 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.50
	andl	$131072, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	jne	.L32	#,
	.loc 1 978 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.51
	orl	$65536, %eax	#, target_flags.52
	movl	%eax, target_flags(%rip)	# target_flags.52, target_flags
.L32:
	.loc 1 979 0
	movl	-16(%rbp), %eax	# i, tmp311
	cltq
	salq	$4, %rax	#, tmp312
	addq	$processor_alias_table.14711, %rax	#, tmp313
	movl	12(%rax), %eax	# processor_alias_table[i_1].flags, D.29623
	andl	$2, %eax	#, D.29624
	testl	%eax, %eax	# D.29624
	je	.L33	#,
	.loc 1 980 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.53
	andl	$524288, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	jne	.L33	#,
	.loc 1 981 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.54
	orl	$262144, %eax	#, target_flags.55
	movl	%eax, target_flags(%rip)	# target_flags.55, target_flags
.L33:
	.loc 1 982 0
	movl	-16(%rbp), %eax	# i, tmp315
	cltq
	salq	$4, %rax	#, tmp316
	addq	$processor_alias_table.14711, %rax	#, tmp317
	movl	12(%rax), %eax	# processor_alias_table[i_1].flags, D.29623
	andl	$8, %eax	#, D.29624
	testl	%eax, %eax	# D.29624
	je	.L34	#,
	.loc 1 983 0
	movl	$1, x86_prefetch_sse(%rip)	#, x86_prefetch_sse
	.loc 1 984 0
	jmp	.L35	#
.L34:
	jmp	.L35	#
.L28:
	.loc 1 961 0
	addl	$1, -16(%rbp)	#, i
.L27:
	.loc 1 961 0 is_stmt 0 discriminator 1
	movl	-16(%rbp), %eax	# i, tmp318
	cmpl	-12(%rbp), %eax	# pta_size, tmp318
	jl	.L36	#,
.L35:
	.loc 1 987 0 is_stmt 1
	movl	-16(%rbp), %eax	# i, tmp319
	cmpl	-12(%rbp), %eax	# pta_size, tmp319
	jne	.L37	#,
	.loc 1 988 0
	movq	ix86_arch_string(%rip), %rax	# ix86_arch_string, ix86_arch_string.56
	movq	%rax, %rsi	# ix86_arch_string.56,
	movl	$.LC96, %edi	#,
	movl	$0, %eax	#,
	call	error	#
.L37:
	.loc 1 990 0
	movl	$0, -16(%rbp)	#, i
	jmp	.L38	#
.L41:
	.loc 1 991 0
	movl	-16(%rbp), %eax	# i, tmp321
	cltq
	salq	$4, %rax	#, tmp322
	addq	$processor_alias_table.14711, %rax	#, tmp323
	movq	(%rax), %rdx	# processor_alias_table[i_2].name, D.29621
	movq	ix86_cpu_string(%rip), %rax	# ix86_cpu_string, ix86_cpu_string.57
	movq	%rdx, %rsi	# D.29621,
	movq	%rax, %rdi	# ix86_cpu_string.57,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L39	#,
	.loc 1 993 0
	movl	-16(%rbp), %eax	# i, tmp325
	cltq
	salq	$4, %rax	#, tmp326
	addq	$processor_alias_table.14711, %rax	#, tmp327
	movl	8(%rax), %eax	# processor_alias_table[i_2].processor, ix86_cpu.58
	movl	%eax, ix86_cpu(%rip)	# ix86_cpu.58, ix86_cpu
	.loc 1 994 0
	jmp	.L40	#
.L39:
	.loc 1 990 0
	addl	$1, -16(%rbp)	#, i
.L38:
	.loc 1 990 0 is_stmt 0 discriminator 1
	movl	-16(%rbp), %eax	# i, tmp328
	cmpl	-12(%rbp), %eax	# pta_size, tmp328
	jl	.L41	#,
.L40:
	.loc 1 996 0 is_stmt 1
	movl	-16(%rbp), %eax	# i, tmp330
	cltq
	salq	$4, %rax	#, tmp331
	addq	$processor_alias_table.14711, %rax	#, tmp332
	movl	12(%rax), %eax	# processor_alias_table[i_2].flags, D.29623
	andl	$8, %eax	#, D.29624
	testl	%eax, %eax	# D.29624
	je	.L42	#,
	.loc 1 997 0
	movl	$1, x86_prefetch_sse(%rip)	#, x86_prefetch_sse
.L42:
	.loc 1 998 0
	movl	-16(%rbp), %eax	# i, tmp333
	cmpl	-12(%rbp), %eax	# pta_size, tmp333
	jne	.L43	#,
	.loc 1 999 0
	movq	ix86_cpu_string(%rip), %rax	# ix86_cpu_string, ix86_cpu_string.59
	movq	%rax, %rsi	# ix86_cpu_string.59,
	movl	$.LC97, %edi	#,
	movl	$0, %eax	#,
	call	error	#
.L43:
	.loc 1 1001 0
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.60
	testl	%eax, %eax	# optimize_size.60
	je	.L44	#,
	.loc 1 1002 0
	movq	$size_cost, ix86_cost(%rip)	#, ix86_cost
	jmp	.L45	#
.L44:
	.loc 1 1004 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.61
	movl	%eax, %edx	# ix86_cpu.61, tmp334
	movq	%rdx, %rax	# tmp334, tmp335
	salq	$2, %rax	#, tmp335
	addq	%rdx, %rax	# tmp334, tmp335
	salq	$3, %rax	#, tmp336
	addq	$processor_target_table.14698, %rax	#, tmp337
	movq	(%rax), %rax	# processor_target_table[ix86_cpu.61_120].cost, ix86_cost.62
	movq	%rax, ix86_cost(%rip)	# ix86_cost.62, ix86_cost
.L45:
	.loc 1 1005 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.63
	movl	%eax, %edx	# ix86_cpu.63, tmp338
	movq	%rdx, %rax	# tmp338, tmp339
	salq	$2, %rax	#, tmp339
	addq	%rdx, %rax	# tmp338, tmp339
	salq	$3, %rax	#, tmp340
	addq	$processor_target_table.14698, %rax	#, tmp341
	movl	8(%rax), %edx	# processor_target_table[ix86_cpu.63_122].target_enable, D.29619
	movl	target_flags(%rip), %eax	# target_flags, target_flags.64
	orl	%edx, %eax	# D.29619, target_flags.65
	movl	%eax, target_flags(%rip)	# target_flags.65, target_flags
	.loc 1 1006 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.66
	movl	%eax, %edx	# ix86_cpu.66, tmp342
	movq	%rdx, %rax	# tmp342, tmp343
	salq	$2, %rax	#, tmp343
	addq	%rdx, %rax	# tmp342, tmp343
	salq	$3, %rax	#, tmp344
	addq	$processor_target_table.14698, %rax	#, tmp345
	movl	12(%rax), %eax	# processor_target_table[ix86_cpu.66_126].target_disable, D.29619
	notl	%eax	# D.29619
	movl	%eax, %edx	# D.29619, D.29619
	movl	target_flags(%rip), %eax	# target_flags, target_flags.67
	andl	%edx, %eax	# D.29619, target_flags.68
	movl	%eax, target_flags(%rip)	# target_flags.68, target_flags
	.loc 1 1009 0
	movq	$ix86_init_machine_status, init_machine_status(%rip)	#, init_machine_status
	.loc 1 1010 0
	movq	$ix86_mark_machine_status, mark_machine_status(%rip)	#, mark_machine_status
	.loc 1 1011 0
	movq	$ix86_free_machine_status, free_machine_status(%rip)	#, free_machine_status
	.loc 1 1014 0
	movq	ix86_regparm_string(%rip), %rax	# ix86_regparm_string, ix86_regparm_string.69
	testq	%rax, %rax	# ix86_regparm_string.69
	je	.L46	#,
	.loc 1 1016 0
	movq	ix86_regparm_string(%rip), %rax	# ix86_regparm_string, ix86_regparm_string.70
	movq	%rax, %rdi	# ix86_regparm_string.70,
	call	atoi	#
	movl	%eax, -16(%rbp)	# tmp346, i
	.loc 1 1017 0
	cmpl	$0, -16(%rbp)	#, i
	js	.L47	#,
	.loc 1 1017 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.72
	andl	$33554432, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L48	#,
	movl	$6, %eax	#, iftmp.71
	jmp	.L49	#
.L48:
	.loc 1 1017 0 discriminator 2
	movl	$3, %eax	#, iftmp.71
.L49:
	.loc 1 1017 0 discriminator 3
	cmpl	-16(%rbp), %eax	# i, iftmp.71
	jge	.L50	#,
.L47:
	.loc 1 1018 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.74
	andl	$33554432, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L51	#,
	.loc 1 1018 0 is_stmt 0 discriminator 1
	movl	$6, %eax	#, iftmp.73
	jmp	.L52	#
.L51:
	.loc 1 1018 0 discriminator 2
	movl	$3, %eax	#, iftmp.73
.L52:
	.loc 1 1018 0 discriminator 3
	movl	-16(%rbp), %ecx	# i, tmp347
	movl	%eax, %edx	# iftmp.73,
	movl	%ecx, %esi	# tmp347,
	movl	$.LC98, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	jmp	.L54	#
.L50:
	.loc 1 1020 0 is_stmt 1
	movl	-16(%rbp), %eax	# i, tmp348
	movl	%eax, ix86_regparm(%rip)	# tmp348, ix86_regparm
	jmp	.L54	#
.L46:
	.loc 1 1023 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.75
	andl	$33554432, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L54	#,
	.loc 1 1024 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.77
	andl	$33554432, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L55	#,
	.loc 1 1024 0 is_stmt 0 discriminator 1
	movl	$6, %eax	#, iftmp.76
	jmp	.L56	#
.L55:
	.loc 1 1024 0 discriminator 2
	movl	$3, %eax	#, iftmp.76
.L56:
	.loc 1 1024 0 discriminator 3
	movl	%eax, ix86_regparm(%rip)	# iftmp.76, ix86_regparm
.L54:
	.loc 1 1029 0 is_stmt 1
	movq	ix86_align_loops_string(%rip), %rax	# ix86_align_loops_string, ix86_align_loops_string.78
	testq	%rax, %rax	# ix86_align_loops_string.78
	je	.L57	#,
	.loc 1 1031 0
	movl	$.LC99, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1032 0
	movl	align_loops(%rip), %eax	# align_loops, align_loops.79
	testl	%eax, %eax	# align_loops.79
	jne	.L57	#,
	.loc 1 1034 0
	movq	ix86_align_loops_string(%rip), %rax	# ix86_align_loops_string, ix86_align_loops_string.80
	movq	%rax, %rdi	# ix86_align_loops_string.80,
	call	atoi	#
	movl	%eax, -16(%rbp)	# tmp349, i
	.loc 1 1035 0
	cmpl	$0, -16(%rbp)	#, i
	js	.L58	#,
	.loc 1 1035 0 is_stmt 0 discriminator 1
	cmpl	$16, -16(%rbp)	#, i
	jle	.L59	#,
.L58:
	.loc 1 1036 0 is_stmt 1
	movl	-16(%rbp), %eax	# i, tmp350
	movl	$16, %edx	#,
	movl	%eax, %esi	# tmp350,
	movl	$.LC100, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	jmp	.L57	#
.L59:
	.loc 1 1038 0
	movl	-16(%rbp), %eax	# i, tmp351
	movl	$1, %edx	#, tmp352
	movl	%eax, %ecx	# tmp351, tmp396
	sall	%cl, %edx	# tmp396, align_loops.81
	movl	%edx, %eax	# align_loops.81, align_loops.81
	movl	%eax, align_loops(%rip)	# align_loops.81, align_loops
.L57:
	.loc 1 1042 0
	movq	ix86_align_jumps_string(%rip), %rax	# ix86_align_jumps_string, ix86_align_jumps_string.82
	testq	%rax, %rax	# ix86_align_jumps_string.82
	je	.L60	#,
	.loc 1 1044 0
	movl	$.LC101, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1045 0
	movl	align_jumps(%rip), %eax	# align_jumps, align_jumps.83
	testl	%eax, %eax	# align_jumps.83
	jne	.L60	#,
	.loc 1 1047 0
	movq	ix86_align_jumps_string(%rip), %rax	# ix86_align_jumps_string, ix86_align_jumps_string.84
	movq	%rax, %rdi	# ix86_align_jumps_string.84,
	call	atoi	#
	movl	%eax, -16(%rbp)	# tmp353, i
	.loc 1 1048 0
	cmpl	$0, -16(%rbp)	#, i
	js	.L61	#,
	.loc 1 1048 0 is_stmt 0 discriminator 1
	cmpl	$16, -16(%rbp)	#, i
	jle	.L62	#,
.L61:
	.loc 1 1049 0 is_stmt 1
	movl	-16(%rbp), %eax	# i, tmp354
	movl	$16, %edx	#,
	movl	%eax, %esi	# tmp354,
	movl	$.LC100, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	jmp	.L60	#
.L62:
	.loc 1 1051 0
	movl	-16(%rbp), %eax	# i, tmp355
	movl	$1, %edx	#, tmp356
	movl	%eax, %ecx	# tmp355, tmp398
	sall	%cl, %edx	# tmp398, align_jumps.85
	movl	%edx, %eax	# align_jumps.85, align_jumps.85
	movl	%eax, align_jumps(%rip)	# align_jumps.85, align_jumps
.L60:
	.loc 1 1055 0
	movq	ix86_align_funcs_string(%rip), %rax	# ix86_align_funcs_string, ix86_align_funcs_string.86
	testq	%rax, %rax	# ix86_align_funcs_string.86
	je	.L63	#,
	.loc 1 1057 0
	movl	$.LC102, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1058 0
	movl	align_functions(%rip), %eax	# align_functions, align_functions.87
	testl	%eax, %eax	# align_functions.87
	jne	.L63	#,
	.loc 1 1060 0
	movq	ix86_align_funcs_string(%rip), %rax	# ix86_align_funcs_string, ix86_align_funcs_string.88
	movq	%rax, %rdi	# ix86_align_funcs_string.88,
	call	atoi	#
	movl	%eax, -16(%rbp)	# tmp357, i
	.loc 1 1061 0
	cmpl	$0, -16(%rbp)	#, i
	js	.L64	#,
	.loc 1 1061 0 is_stmt 0 discriminator 1
	cmpl	$16, -16(%rbp)	#, i
	jle	.L65	#,
.L64:
	.loc 1 1062 0 is_stmt 1
	movl	-16(%rbp), %eax	# i, tmp358
	movl	$16, %edx	#,
	movl	%eax, %esi	# tmp358,
	movl	$.LC100, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	jmp	.L63	#
.L65:
	.loc 1 1064 0
	movl	-16(%rbp), %eax	# i, tmp359
	movl	$1, %edx	#, tmp360
	movl	%eax, %ecx	# tmp359, tmp400
	sall	%cl, %edx	# tmp400, align_functions.89
	movl	%edx, %eax	# align_functions.89, align_functions.89
	movl	%eax, align_functions(%rip)	# align_functions.89, align_functions
.L63:
	.loc 1 1069 0
	movl	align_loops(%rip), %eax	# align_loops, align_loops.90
	testl	%eax, %eax	# align_loops.90
	jne	.L66	#,
	.loc 1 1071 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.91
	movl	%eax, %edx	# ix86_cpu.91, tmp361
	movq	%rdx, %rax	# tmp361, tmp362
	salq	$2, %rax	#, tmp362
	addq	%rdx, %rax	# tmp361, tmp362
	salq	$3, %rax	#, tmp363
	addq	$processor_target_table.14698+16, %rax	#, tmp364
	movl	(%rax), %eax	# processor_target_table[ix86_cpu.91_164].align_loop, align_loops.92
	movl	%eax, align_loops(%rip)	# align_loops.92, align_loops
	.loc 1 1072 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.93
	movl	%eax, %edx	# ix86_cpu.93, tmp365
	movq	%rdx, %rax	# tmp365, tmp366
	salq	$2, %rax	#, tmp366
	addq	%rdx, %rax	# tmp365, tmp366
	salq	$3, %rax	#, tmp367
	addq	$processor_target_table.14698+16, %rax	#, tmp368
	movl	4(%rax), %eax	# processor_target_table[ix86_cpu.93_166].align_loop_max_skip, align_loops_max_skip.94
	movl	%eax, align_loops_max_skip(%rip)	# align_loops_max_skip.94, align_loops_max_skip
.L66:
	.loc 1 1074 0
	movl	align_jumps(%rip), %eax	# align_jumps, align_jumps.95
	testl	%eax, %eax	# align_jumps.95
	jne	.L67	#,
	.loc 1 1076 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.96
	movl	%eax, %edx	# ix86_cpu.96, tmp369
	movq	%rdx, %rax	# tmp369, tmp370
	salq	$2, %rax	#, tmp370
	addq	%rdx, %rax	# tmp369, tmp370
	salq	$3, %rax	#, tmp371
	addq	$processor_target_table.14698+16, %rax	#, tmp372
	movl	8(%rax), %eax	# processor_target_table[ix86_cpu.96_169].align_jump, align_jumps.97
	movl	%eax, align_jumps(%rip)	# align_jumps.97, align_jumps
	.loc 1 1077 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.98
	movl	%eax, %edx	# ix86_cpu.98, tmp373
	movq	%rdx, %rax	# tmp373, tmp374
	salq	$2, %rax	#, tmp374
	addq	%rdx, %rax	# tmp373, tmp374
	salq	$3, %rax	#, tmp375
	addq	$processor_target_table.14698+16, %rax	#, tmp376
	movl	12(%rax), %eax	# processor_target_table[ix86_cpu.98_171].align_jump_max_skip, align_jumps_max_skip.99
	movl	%eax, align_jumps_max_skip(%rip)	# align_jumps_max_skip.99, align_jumps_max_skip
.L67:
	.loc 1 1079 0
	movl	align_functions(%rip), %eax	# align_functions, align_functions.100
	testl	%eax, %eax	# align_functions.100
	jne	.L68	#,
	.loc 1 1081 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.101
	movl	%eax, %edx	# ix86_cpu.101, tmp377
	movq	%rdx, %rax	# tmp377, tmp378
	salq	$2, %rax	#, tmp378
	addq	%rdx, %rax	# tmp377, tmp378
	salq	$3, %rax	#, tmp379
	addq	$processor_target_table.14698+32, %rax	#, tmp380
	movl	(%rax), %eax	# processor_target_table[ix86_cpu.101_174].align_func, align_functions.102
	movl	%eax, align_functions(%rip)	# align_functions.102, align_functions
.L68:
	.loc 1 1089 0
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.104
	.loc 1 1090 0
	testl	%eax, %eax	# optimize_size.104
	je	.L69	#,
	.loc 1 1089 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.106
	andl	$33554432, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L70	#,
	.loc 1 1089 0 is_stmt 0 discriminator 1
	movl	$128, %eax	#, iftmp.105
	jmp	.L72	#
.L70:
	.loc 1 1089 0 discriminator 2
	movl	$32, %eax	#, iftmp.105
	jmp	.L72	#
.L69:
	.loc 1 1090 0 is_stmt 1 discriminator 1
	movl	$128, %eax	#, iftmp.103
.L72:
	.loc 1 1088 0
	movl	%eax, ix86_preferred_stack_boundary(%rip)	# iftmp.103, ix86_preferred_stack_boundary
	.loc 1 1091 0
	movq	ix86_preferred_stack_boundary_string(%rip), %rax	# ix86_preferred_stack_boundary_string, ix86_preferred_stack_boundary_string.107
	testq	%rax, %rax	# ix86_preferred_stack_boundary_string.107
	je	.L73	#,
	.loc 1 1093 0
	movq	ix86_preferred_stack_boundary_string(%rip), %rax	# ix86_preferred_stack_boundary_string, ix86_preferred_stack_boundary_string.108
	movq	%rax, %rdi	# ix86_preferred_stack_boundary_string.108,
	call	atoi	#
	movl	%eax, -16(%rbp)	# tmp381, i
	.loc 1 1094 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.110
	andl	$33554432, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L74	#,
	.loc 1 1094 0 is_stmt 0 discriminator 1
	movl	$4, %eax	#, iftmp.109
	jmp	.L75	#
.L74:
	.loc 1 1094 0 discriminator 2
	movl	$2, %eax	#, iftmp.109
.L75:
	.loc 1 1094 0 discriminator 3
	cmpl	-16(%rbp), %eax	# i, iftmp.109
	jg	.L76	#,
	.loc 1 1094 0 discriminator 1
	cmpl	$12, -16(%rbp)	#, i
	jle	.L77	#,
.L76:
	.loc 1 1096 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.112
	andl	$33554432, %eax	#, D.29619
	.loc 1 1095 0
	testl	%eax, %eax	# D.29619
	je	.L78	#,
	.loc 1 1095 0 is_stmt 0 discriminator 1
	movl	$4, %eax	#, iftmp.111
	jmp	.L79	#
.L78:
	.loc 1 1095 0 discriminator 2
	movl	$2, %eax	#, iftmp.111
.L79:
	.loc 1 1095 0 discriminator 3
	movl	-16(%rbp), %ecx	# i, tmp382
	movl	%eax, %edx	# iftmp.111,
	movl	%ecx, %esi	# tmp382,
	movl	$.LC103, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	jmp	.L73	#
.L77:
	.loc 1 1098 0 is_stmt 1
	movl	-16(%rbp), %eax	# i, tmp383
	movl	$8, %edx	#, tmp384
	movl	%eax, %ecx	# tmp383, tmp402
	sall	%cl, %edx	# tmp402, ix86_preferred_stack_boundary.113
	movl	%edx, %eax	# ix86_preferred_stack_boundary.113, ix86_preferred_stack_boundary.113
	movl	%eax, ix86_preferred_stack_boundary(%rip)	# ix86_preferred_stack_boundary.113, ix86_preferred_stack_boundary
.L73:
	.loc 1 1102 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.114
	movl	%eax, %edx	# ix86_cpu.114, tmp385
	movq	%rdx, %rax	# tmp385, tmp386
	salq	$2, %rax	#, tmp386
	addq	%rdx, %rax	# tmp385, tmp386
	salq	$3, %rax	#, tmp387
	addq	$processor_target_table.14698+32, %rax	#, tmp388
	movl	4(%rax), %eax	# processor_target_table[ix86_cpu.114_195].branch_cost, ix86_branch_cost.115
	movl	%eax, ix86_branch_cost(%rip)	# ix86_branch_cost.115, ix86_branch_cost
	.loc 1 1103 0
	movq	ix86_branch_cost_string(%rip), %rax	# ix86_branch_cost_string, ix86_branch_cost_string.116
	testq	%rax, %rax	# ix86_branch_cost_string.116
	je	.L80	#,
	.loc 1 1105 0
	movq	ix86_branch_cost_string(%rip), %rax	# ix86_branch_cost_string, ix86_branch_cost_string.117
	movq	%rax, %rdi	# ix86_branch_cost_string.117,
	call	atoi	#
	movl	%eax, -16(%rbp)	# tmp389, i
	.loc 1 1106 0
	cmpl	$0, -16(%rbp)	#, i
	js	.L81	#,
	.loc 1 1106 0 is_stmt 0 discriminator 1
	cmpl	$5, -16(%rbp)	#, i
	jle	.L82	#,
.L81:
	.loc 1 1107 0 is_stmt 1
	movl	-16(%rbp), %eax	# i, tmp390
	movl	%eax, %esi	# tmp390,
	movl	$.LC104, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	jmp	.L80	#
.L82:
	.loc 1 1109 0
	movl	-16(%rbp), %eax	# i, tmp391
	movl	%eax, ix86_branch_cost(%rip)	# tmp391, ix86_branch_cost
.L80:
	.loc 1 1113 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.118
	andl	$128, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L83	#,
	.loc 1 1114 0
	movl	$1, flag_omit_frame_pointer(%rip)	#, flag_omit_frame_pointer
.L83:
	.loc 1 1118 0
	movl	flag_unsafe_math_optimizations(%rip), %eax	# flag_unsafe_math_optimizations, flag_unsafe_math_optimizations.119
	testl	%eax, %eax	# flag_unsafe_math_optimizations.119
	je	.L84	#,
	.loc 1 1119 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.120
	andl	$-17, %eax	#, target_flags.121
	movl	%eax, target_flags(%rip)	# target_flags.121, target_flags
.L84:
	.loc 1 1123 0
	movl	$108, %edx	#, x86_arch_always_fancy_math_387.122
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.123
	movl	%eax, %ecx	# ix86_arch.123, tmp404
	sarl	%cl, %edx	# tmp404, D.29619
	movl	%edx, %eax	# D.29619, D.29619
	andl	$1, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L85	#,
	.loc 1 1124 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.124
	andl	$-65, %eax	#, target_flags.125
	movl	%eax, target_flags(%rip)	# target_flags.125, target_flags
.L85:
	.loc 1 1126 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.126
	andl	$33554432, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L86	#,
	.loc 1 1128 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.127
	andl	$4, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L87	#,
	.loc 1 1129 0
	movl	$.LC105, %edi	#,
	movl	$0, %eax	#,
	call	error	#
.L87:
	.loc 1 1130 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.128
	andl	$2, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L88	#,
	.loc 1 1131 0
	movl	$.LC106, %edi	#,
	movl	$0, %eax	#,
	call	error	#
.L88:
	.loc 1 1133 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.129
	orl	$17121280, %eax	#, target_flags.130
	movl	%eax, target_flags(%rip)	# target_flags.130, target_flags
	.loc 1 1134 0
	movl	$2, ix86_fpmath(%rip)	#, ix86_fpmath
	jmp	.L89	#
.L86:
	.loc 1 1137 0
	movl	$1, ix86_fpmath(%rip)	#, ix86_fpmath
.L89:
	.loc 1 1139 0
	movq	ix86_fpmath_string(%rip), %rax	# ix86_fpmath_string, ix86_fpmath_string.131
	testq	%rax, %rax	# ix86_fpmath_string.131
	je	.L90	#,
	.loc 1 1141 0
	movq	ix86_fpmath_string(%rip), %rax	# ix86_fpmath_string, ix86_fpmath_string.132
	movl	$.LC107, %esi	#,
	movq	%rax, %rdi	# ix86_fpmath_string.132,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L91	#,
	.loc 1 1142 0
	movl	$1, ix86_fpmath(%rip)	#, ix86_fpmath
	jmp	.L90	#
.L91:
	.loc 1 1143 0
	movq	ix86_fpmath_string(%rip), %rax	# ix86_fpmath_string, ix86_fpmath_string.133
	movl	$.LC71, %esi	#,
	movq	%rax, %rdi	# ix86_fpmath_string.133,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L92	#,
	.loc 1 1145 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.134
	andl	$327680, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	jne	.L93	#,
	.loc 1 1147 0
	movl	$.LC108, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1148 0
	movl	$1, ix86_fpmath(%rip)	#, ix86_fpmath
	jmp	.L90	#
.L93:
	.loc 1 1151 0
	movl	$2, ix86_fpmath(%rip)	#, ix86_fpmath
	jmp	.L90	#
.L92:
	.loc 1 1153 0
	movq	ix86_fpmath_string(%rip), %rax	# ix86_fpmath_string, ix86_fpmath_string.135
	movl	$.LC109, %esi	#,
	movq	%rax, %rdi	# ix86_fpmath_string.135,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	je	.L95	#,
	.loc 1 1154 0
	movq	ix86_fpmath_string(%rip), %rax	# ix86_fpmath_string, ix86_fpmath_string.136
	movl	$.LC110, %esi	#,
	movq	%rax, %rdi	# ix86_fpmath_string.136,
	call	strcmp	#
	testl	%eax, %eax	# D.29619
	jne	.L96	#,
.L95:
	.loc 1 1156 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.137
	andl	$327680, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	jne	.L97	#,
	.loc 1 1158 0
	movl	$.LC108, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1159 0
	movl	$1, ix86_fpmath(%rip)	#, ix86_fpmath
	jmp	.L98	#
.L97:
	.loc 1 1161 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.138
	andl	$1, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	jne	.L99	#,
	.loc 1 1163 0
	movl	$.LC111, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1164 0
	movl	$2, ix86_fpmath(%rip)	#, ix86_fpmath
	jmp	.L98	#
.L99:
	.loc 1 1167 0
	movl	$3, ix86_fpmath(%rip)	#, ix86_fpmath
	.loc 1 1156 0
	jmp	.L90	#
.L98:
	jmp	.L90	#
.L96:
	.loc 1 1170 0
	movq	ix86_fpmath_string(%rip), %rax	# ix86_fpmath_string, ix86_fpmath_string.139
	movq	%rax, %rsi	# ix86_fpmath_string.139,
	movl	$.LC112, %edi	#,
	movl	$0, %eax	#,
	call	error	#
.L90:
	.loc 1 1175 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.140
	andl	$327680, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L100	#,
	.loc 1 1177 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.141
	orb	$64, %ah	#, target_flags.142
	movl	%eax, target_flags(%rip)	# target_flags.142, target_flags
	.loc 1 1178 0
	movl	$1, x86_prefetch_sse(%rip)	#, x86_prefetch_sse
.L100:
	.loc 1 1182 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.143
	andl	$1048576, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L101	#,
	.loc 1 1184 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.144
	orb	$64, %ah	#, target_flags.145
	movl	%eax, target_flags(%rip)	# target_flags.145, target_flags
	.loc 1 1187 0
	movl	$32, %edx	#, x86_3dnow_a.146
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.147
	movl	%eax, %ecx	# ix86_arch.147, tmp406
	sarl	%cl, %edx	# tmp406, D.29619
	movl	%edx, %eax	# D.29619, D.29619
	andl	$1, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L101	#,
	.loc 1 1188 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.148
	orl	$4194304, %eax	#, target_flags.149
	movl	%eax, target_flags(%rip)	# target_flags.149, target_flags
.L101:
	.loc 1 1190 0
	movl	$104, %edx	#, x86_accumulate_outgoing_args.150
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.151
	movl	%eax, %ecx	# ix86_cpu.152, tmp408
	sarl	%cl, %edx	# tmp408, D.29619
	movl	%edx, %eax	# D.29619, D.29619
	andl	$1, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	je	.L102	#,
	.loc 1 1191 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.153
	andl	$8192, %eax	#, D.29619
	testl	%eax, %eax	# D.29619
	jne	.L102	#,
	.loc 1 1192 0
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.154
	testl	%eax, %eax	# optimize_size.154
	jne	.L102	#,
	.loc 1 1193 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.155
	orb	$16, %ah	#, target_flags.156
	movl	%eax, target_flags(%rip)	# target_flags.156, target_flags
.L102:
.LBB2:
	.loc 1 1198 0
	movl	$0, %ecx	#,
	movl	$.LC113, %edx	#,
	movl	$.LC114, %esi	#,
	movl	$internal_label_prefix, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 1199 0
	movl	$88, %esi	#,
	movl	$internal_label_prefix, %edi	#,
	call	strchr	#
	movq	%rax, -8(%rbp)	# tmp392, p
	.loc 1 1200 0
	movq	-8(%rbp), %rdx	# p, p.157
	movl	$internal_label_prefix, %eax	#, internal_label_prefix.158
	subq	%rax, %rdx	# internal_label_prefix.158, D.29625
	movq	%rdx, %rax	# D.29625, D.29625
	movl	%eax, internal_label_prefix_len(%rip)	# internal_label_prefix_len.159, internal_label_prefix_len
	.loc 1 1201 0
	movq	-8(%rbp), %rax	# p, tmp393
	movb	$0, (%rax)	#, *p_259
.LBE2:
	.loc 1 1203 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	override_options, .-override_options
	.globl	optimization_options
	.type	optimization_options, @function
optimization_options:
.LFB3:
	.loc 1 1209 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# level, level
	movl	%esi, -8(%rbp)	# size, size
	.loc 1 1213 0
	cmpl	$1, -4(%rbp)	#, level
	jle	.L105	#,
	.loc 1 1214 0
	movl	$0, flag_schedule_insns(%rip)	#, flag_schedule_insns
.L105:
	.loc 1 1216 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.160
	andl	$33554432, %eax	#, D.29660
	testl	%eax, %eax	# D.29660
	je	.L106	#,
	.loc 1 1216 0 is_stmt 0 discriminator 1
	movl	optimize(%rip), %eax	# optimize, optimize.161
	testl	%eax, %eax	# optimize.161
	jle	.L106	#,
	.loc 1 1217 0 is_stmt 1
	movl	$1, flag_omit_frame_pointer(%rip)	#, flag_omit_frame_pointer
.L106:
	.loc 1 1218 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.162
	andl	$33554432, %eax	#, D.29660
	testl	%eax, %eax	# D.29660
	je	.L104	#,
	.loc 1 1220 0
	movl	$0, flag_pcc_struct_return(%rip)	#, flag_pcc_struct_return
	.loc 1 1221 0
	movl	$1, flag_asynchronous_unwind_tables(%rip)	#, flag_asynchronous_unwind_tables
.L104:
	.loc 1 1223 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	optimization_options, .-optimization_options
	.section	.rodata
	.align 8
.LC115:
	.string	"`%s' attribute only applies to functions"
.LC116:
	.string	"`%s' attribute ignored"
	.text
	.type	ix86_handle_cdecl_attribute, @function
ix86_handle_cdecl_attribute:
.LFB4:
	.loc 1 1254 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -8(%rbp)	# node, node
	movq	%rsi, -16(%rbp)	# name, name
	movq	%rdx, -24(%rbp)	# args, args
	movl	%ecx, -28(%rbp)	# flags, flags
	movq	%r8, -40(%rbp)	# no_add_attrs, no_add_attrs
	.loc 1 1255 0
	movq	-8(%rbp), %rax	# node, tmp73
	movq	(%rax), %rax	# *node_1(D), D.29661
	movzbl	16(%rax), %eax	# _2->common.code, D.29662
	cmpb	$23, %al	#, D.29662
	je	.L109	#,
	.loc 1 1256 0
	movq	-8(%rbp), %rax	# node, tmp74
	movq	(%rax), %rax	# *node_1(D), D.29661
	movzbl	16(%rax), %eax	# _4->common.code, D.29662
	cmpb	$16, %al	#, D.29662
	je	.L109	#,
	.loc 1 1257 0
	movq	-8(%rbp), %rax	# node, tmp75
	movq	(%rax), %rax	# *node_1(D), D.29661
	movzbl	16(%rax), %eax	# _6->common.code, D.29662
	cmpb	$37, %al	#, D.29662
	je	.L109	#,
	.loc 1 1258 0
	movq	-8(%rbp), %rax	# node, tmp76
	movq	(%rax), %rax	# *node_1(D), D.29661
	movzbl	16(%rax), %eax	# _8->common.code, D.29662
	cmpb	$33, %al	#, D.29662
	je	.L109	#,
	.loc 1 1261 0
	movq	-16(%rbp), %rax	# name, tmp77
	movq	32(%rax), %rax	# name_10(D)->identifier.id.str, D.29663
	.loc 1 1260 0
	movq	%rax, %rsi	# D.29663,
	movl	$.LC115, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1262 0
	movq	-40(%rbp), %rax	# no_add_attrs, tmp78
	movb	$1, (%rax)	#, *no_add_attrs_12(D)
.L109:
	.loc 1 1265 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.163
	andl	$33554432, %eax	#, D.29664
	testl	%eax, %eax	# D.29664
	je	.L110	#,
	.loc 1 1267 0
	movq	-16(%rbp), %rax	# name, tmp79
	movq	32(%rax), %rax	# name_10(D)->identifier.id.str, D.29663
	movq	%rax, %rsi	# D.29663,
	movl	$.LC116, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1268 0
	movq	-40(%rbp), %rax	# no_add_attrs, tmp80
	movb	$1, (%rax)	#, *no_add_attrs_12(D)
.L110:
	.loc 1 1271 0
	movl	$0, %eax	#, D.29665
	.loc 1 1272 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	ix86_handle_cdecl_attribute, .-ix86_handle_cdecl_attribute
	.section	.rodata
	.align 8
.LC117:
	.string	"`%s' attribute requires an integer constant argument"
	.align 8
.LC118:
	.string	"argument to `%s' attribute larger than %d"
	.text
	.type	ix86_handle_regparm_attribute, @function
ix86_handle_regparm_attribute:
.LFB5:
	.loc 1 1283 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -24(%rbp)	# node, node
	movq	%rsi, -32(%rbp)	# name, name
	movq	%rdx, -40(%rbp)	# args, args
	movl	%ecx, -44(%rbp)	# flags, flags
	movq	%r8, -56(%rbp)	# no_add_attrs, no_add_attrs
	.loc 1 1284 0
	movq	-24(%rbp), %rax	# node, tmp80
	movq	(%rax), %rax	# *node_3(D), D.29668
	movzbl	16(%rax), %eax	# _4->common.code, D.29669
	cmpb	$23, %al	#, D.29669
	je	.L113	#,
	.loc 1 1285 0
	movq	-24(%rbp), %rax	# node, tmp81
	movq	(%rax), %rax	# *node_3(D), D.29668
	movzbl	16(%rax), %eax	# _6->common.code, D.29669
	cmpb	$16, %al	#, D.29669
	je	.L113	#,
	.loc 1 1286 0
	movq	-24(%rbp), %rax	# node, tmp82
	movq	(%rax), %rax	# *node_3(D), D.29668
	movzbl	16(%rax), %eax	# _8->common.code, D.29669
	cmpb	$37, %al	#, D.29669
	je	.L113	#,
	.loc 1 1287 0
	movq	-24(%rbp), %rax	# node, tmp83
	movq	(%rax), %rax	# *node_3(D), D.29668
	movzbl	16(%rax), %eax	# _10->common.code, D.29669
	cmpb	$33, %al	#, D.29669
	je	.L113	#,
	.loc 1 1290 0
	movq	-32(%rbp), %rax	# name, tmp84
	movq	32(%rax), %rax	# name_12(D)->identifier.id.str, D.29670
	.loc 1 1289 0
	movq	%rax, %rsi	# D.29670,
	movl	$.LC115, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1291 0
	movq	-56(%rbp), %rax	# no_add_attrs, tmp85
	movb	$1, (%rax)	#, *no_add_attrs_14(D)
	jmp	.L114	#
.L113:
.LBB3:
	.loc 1 1297 0
	movq	-40(%rbp), %rax	# args, tmp86
	movq	32(%rax), %rax	# args_15(D)->list.value, tmp87
	movq	%rax, -8(%rbp)	# tmp87, cst
	.loc 1 1298 0
	movq	-8(%rbp), %rax	# cst, tmp88
	movzbl	16(%rax), %eax	# cst_16->common.code, D.29669
	cmpb	$25, %al	#, D.29669
	je	.L115	#,
	.loc 1 1301 0
	movq	-32(%rbp), %rax	# name, tmp89
	movq	32(%rax), %rax	# name_12(D)->identifier.id.str, D.29670
	.loc 1 1300 0
	movq	%rax, %rsi	# D.29670,
	movl	$.LC117, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1302 0
	movq	-56(%rbp), %rax	# no_add_attrs, tmp90
	movb	$1, (%rax)	#, *no_add_attrs_14(D)
	jmp	.L114	#
.L115:
	.loc 1 1304 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.165
	andl	$33554432, %eax	#, D.29671
	testl	%eax, %eax	# D.29671
	je	.L116	#,
	.loc 1 1304 0 is_stmt 0 discriminator 1
	movl	$6, %eax	#, iftmp.164
	jmp	.L117	#
.L116:
	.loc 1 1304 0 discriminator 2
	movl	$3, %eax	#, iftmp.164
.L117:
	.loc 1 1304 0 discriminator 3
	movq	-8(%rbp), %rdx	# cst, tmp91
	movq	%rax, %rsi	# iftmp.164,
	movq	%rdx, %rdi	# tmp91,
	call	compare_tree_int	#
	testl	%eax, %eax	# D.29671
	jle	.L114	#,
	.loc 1 1307 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.167
	andl	$33554432, %eax	#, D.29671
	.loc 1 1306 0
	testl	%eax, %eax	# D.29671
	je	.L118	#,
	.loc 1 1306 0 is_stmt 0 discriminator 1
	movl	$6, %eax	#, iftmp.166
	jmp	.L119	#
.L118:
	.loc 1 1306 0 discriminator 2
	movl	$3, %eax	#, iftmp.166
.L119:
	.loc 1 1307 0 is_stmt 1
	movq	-32(%rbp), %rdx	# name, tmp92
	movq	32(%rdx), %rcx	# name_12(D)->identifier.id.str, D.29670
	.loc 1 1306 0
	movl	%eax, %edx	# iftmp.166,
	movq	%rcx, %rsi	# D.29670,
	movl	$.LC118, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1308 0
	movq	-56(%rbp), %rax	# no_add_attrs, tmp93
	movb	$1, (%rax)	#, *no_add_attrs_14(D)
.L114:
.LBE3:
	.loc 1 1312 0
	movl	$0, %eax	#, D.29672
	.loc 1 1313 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	ix86_handle_regparm_attribute, .-ix86_handle_regparm_attribute
	.type	ix86_comp_type_attributes, @function
ix86_comp_type_attributes:
.LFB6:
	.loc 1 1422 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# type1, type1
	movq	%rsi, -48(%rbp)	# type2, type2
	.loc 1 1424 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.169
	andl	$2, %eax	#, D.29675
	testl	%eax, %eax	# D.29675
	je	.L122	#,
	.loc 1 1424 0 is_stmt 0 discriminator 1
	movl	$.LC66, %eax	#, iftmp.168
	jmp	.L123	#
.L122:
	.loc 1 1424 0 discriminator 2
	movl	$.LC65, %eax	#, iftmp.168
.L123:
	.loc 1 1424 0 discriminator 3
	movq	%rax, -24(%rbp)	# iftmp.168, rtdstr
	.loc 1 1426 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rax	# type1, tmp72
	movzbl	16(%rax), %eax	# type1_8(D)->common.code, D.29676
	cmpb	$23, %al	#, D.29676
	je	.L124	#,
	.loc 1 1427 0
	movl	$1, %eax	#, D.29675
	jmp	.L125	#
.L124:
	.loc 1 1430 0
	movq	-40(%rbp), %rax	# type1, tmp73
	movq	48(%rax), %rdx	# type1_8(D)->type.attributes, D.29677
	movq	-24(%rbp), %rax	# rtdstr, tmp74
	movq	%rdx, %rsi	# D.29677,
	movq	%rax, %rdi	# tmp74,
	call	lookup_attribute	#
	.loc 1 1431 0
	testq	%rax, %rax	# D.29677
	sete	%bl	#, D.29678
	movq	-48(%rbp), %rax	# type2, tmp75
	movq	48(%rax), %rdx	# type2_14(D)->type.attributes, D.29677
	movq	-24(%rbp), %rax	# rtdstr, tmp76
	movq	%rdx, %rsi	# D.29677,
	movq	%rax, %rdi	# tmp76,
	call	lookup_attribute	#
	testq	%rax, %rax	# D.29677
	sete	%al	#, D.29678
	xorl	%ebx, %eax	# D.29678, D.29678
	.loc 1 1430 0
	testb	%al, %al	# D.29678
	je	.L126	#,
	.loc 1 1432 0
	movl	$0, %eax	#, D.29675
	jmp	.L125	#
.L126:
	.loc 1 1433 0
	movl	$1, %eax	#, D.29675
.L125:
	.loc 1 1434 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	ix86_comp_type_attributes, .-ix86_comp_type_attributes
	.globl	ix86_return_pops_args
	.type	ix86_return_pops_args, @function
ix86_return_pops_args:
.LFB7:
	.loc 1 1458 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# fundecl, fundecl
	movq	%rsi, -32(%rbp)	# funtype, funtype
	movl	%edx, -36(%rbp)	# size, size
	.loc 1 1459 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.171
	andl	$2, %eax	#, D.29679
	testl	%eax, %eax	# D.29679
	je	.L128	#,
	.loc 1 1459 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, fundecl
	je	.L129	#,
	.loc 1 1459 0 discriminator 4
	movq	-24(%rbp), %rax	# fundecl, tmp86
	movzbl	16(%rax), %eax	# fundecl_8(D)->common.code, D.29680
	cmpb	$1, %al	#, D.29680
	je	.L128	#,
.L129:
	.loc 1 1459 0 discriminator 3
	movl	$1, %eax	#, iftmp.170
	jmp	.L130	#
.L128:
	.loc 1 1459 0 discriminator 2
	movl	$0, %eax	#, iftmp.170
.L130:
	.loc 1 1459 0 discriminator 5
	movl	%eax, -16(%rbp)	# iftmp.170, rtd
	.loc 1 1462 0 is_stmt 1 discriminator 5
	movq	-32(%rbp), %rax	# funtype, tmp87
	movq	48(%rax), %rax	# funtype_13(D)->type.attributes, D.29681
	movq	%rax, %rsi	# D.29681,
	movl	$.LC66, %edi	#,
	call	lookup_attribute	#
	testq	%rax, %rax	# D.29681
	jne	.L131	#,
	.loc 1 1465 0
	movq	-32(%rbp), %rax	# funtype, tmp88
	movq	48(%rax), %rax	# funtype_13(D)->type.attributes, D.29681
	movq	%rax, %rsi	# D.29681,
	movl	$.LC65, %edi	#,
	call	lookup_attribute	#
	testq	%rax, %rax	# D.29681
	je	.L132	#,
	.loc 1 1466 0
	movl	$1, -16(%rbp)	#, rtd
.L132:
	.loc 1 1468 0
	cmpl	$0, -16(%rbp)	#, rtd
	je	.L131	#,
	.loc 1 1469 0
	movq	-32(%rbp), %rax	# funtype, tmp89
	movq	24(%rax), %rax	# funtype_13(D)->type.values, D.29681
	testq	%rax, %rax	# D.29681
	je	.L133	#,
	.loc 1 1470 0
	movq	-32(%rbp), %rax	# funtype, tmp90
	movq	24(%rax), %rax	# funtype_13(D)->type.values, D.29681
	movq	%rax, %rdi	# D.29681,
	call	tree_last	#
	movq	32(%rax), %rdx	# _21->list.value, D.29681
	.loc 1 1471 0
	movq	global_trees+216(%rip), %rax	# global_trees, D.29681
	.loc 1 1470 0
	cmpq	%rax, %rdx	# D.29681, D.29681
	jne	.L131	#,
.L133:
	.loc 1 1472 0
	movl	-36(%rbp), %eax	# size, D.29679
	jmp	.L134	#
.L131:
	.loc 1 1476 0
	movq	-32(%rbp), %rax	# funtype, tmp91
	movq	8(%rax), %rax	# funtype_13(D)->common.type, D.29681
	movq	%rax, %rdi	# D.29681,
	call	aggregate_value_p	#
	testl	%eax, %eax	# D.29679
	je	.L135	#,
	.loc 1 1477 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.172
	andl	$33554432, %eax	#, D.29679
	testl	%eax, %eax	# D.29679
	jne	.L135	#,
.LBB4:
	.loc 1 1479 0
	movl	ix86_regparm(%rip), %eax	# ix86_regparm, tmp92
	movl	%eax, -12(%rbp)	# tmp92, nregs
	.loc 1 1481 0
	cmpq	$0, -32(%rbp)	#, funtype
	je	.L136	#,
.LBB5:
	.loc 1 1483 0
	movq	-32(%rbp), %rax	# funtype, tmp93
	movq	48(%rax), %rax	# funtype_13(D)->type.attributes, D.29681
	movq	%rax, %rsi	# D.29681,
	movl	$.LC67, %edi	#,
	call	lookup_attribute	#
	movq	%rax, -8(%rbp)	# tmp94, attr
	.loc 1 1485 0
	cmpq	$0, -8(%rbp)	#, attr
	je	.L136	#,
	.loc 1 1486 0
	movq	-8(%rbp), %rax	# attr, tmp95
	movq	32(%rax), %rax	# attr_32->list.value, D.29681
	movq	32(%rax), %rax	# _33->list.value, D.29681
	movq	32(%rax), %rax	# _34->int_cst.int_cst.low, D.29682
	movl	%eax, -12(%rbp)	# D.29682, nregs
.L136:
.LBE5:
	.loc 1 1489 0
	cmpl	$0, -12(%rbp)	#, nregs
	jne	.L135	#,
	.loc 1 1490 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.174
	andl	$33554432, %eax	#, D.29679
	testl	%eax, %eax	# D.29679
	je	.L137	#,
	.loc 1 1490 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.173
	jmp	.L138	#
.L137:
	.loc 1 1490 0 discriminator 2
	movl	$4, %eax	#, iftmp.173
.L138:
	.loc 1 1490 0 discriminator 3
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.29680
	movzbl	%al, %eax	# D.29680, D.29679
	jmp	.L134	#
.L135:
.LBE4:
	.loc 1 1493 0 is_stmt 1
	movl	$0, %eax	#, D.29679
.L134:
	.loc 1 1494 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	ix86_return_pops_args, .-ix86_return_pops_args
	.globl	ix86_function_arg_regno_p
	.type	ix86_function_arg_regno_p, @function
ix86_function_arg_regno_p:
.LFB8:
	.loc 1 1502 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -20(%rbp)	# regno, regno
	.loc 1 1504 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.175
	andl	$33554432, %eax	#, D.29684
	testl	%eax, %eax	# D.29684
	jne	.L140	#,
	.loc 1 1505 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.178
	andl	$33554432, %eax	#, D.29684
	testl	%eax, %eax	# D.29684
	je	.L141	#,
	.loc 1 1505 0 is_stmt 0 discriminator 1
	movl	$6, %eax	#, iftmp.177
	jmp	.L142	#
.L141:
	.loc 1 1505 0 discriminator 2
	movl	$3, %eax	#, iftmp.177
.L142:
	.loc 1 1506 0 is_stmt 1
	cmpl	-20(%rbp), %eax	# regno, iftmp.177
	jg	.L143	#,
	.loc 1 1506 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.179
	andl	$327680, %eax	#, D.29684
	testl	%eax, %eax	# D.29684
	je	.L144	#,
	.loc 1 1506 0 discriminator 3
	cmpl	$20, -20(%rbp)	#, regno
	jle	.L145	#,
	.loc 1 1506 0 discriminator 1
	cmpl	$28, -20(%rbp)	#, regno
	jle	.L146	#,
.L145:
	.loc 1 1506 0 discriminator 2
	cmpl	$44, -20(%rbp)	#, regno
	jle	.L144	#,
	.loc 1 1506 0 discriminator 1
	cmpl	$52, -20(%rbp)	#, regno
	jg	.L144	#,
.L146:
	movl	-20(%rbp), %eax	# regno, tmp77
	cltq
	movzbl	fixed_regs(%rax), %eax	# fixed_regs, D.29685
	testb	%al, %al	# D.29685
	jne	.L144	#,
.L143:
	movl	$1, %eax	#, iftmp.176
	jmp	.L147	#
.L144:
	.loc 1 1506 0 discriminator 4
	movl	$0, %eax	#, iftmp.176
.L147:
	.loc 1 1505 0 is_stmt 1
	andl	$1, %eax	#, D.29683
	jmp	.L148	#
.L140:
	.loc 1 1507 0
	cmpl	$20, -20(%rbp)	#, regno
	jle	.L149	#,
	.loc 1 1507 0 is_stmt 0 discriminator 1
	cmpl	$28, -20(%rbp)	#, regno
	jle	.L150	#,
.L149:
	.loc 1 1507 0 discriminator 2
	cmpl	$44, -20(%rbp)	#, regno
	jle	.L151	#,
	.loc 1 1507 0 discriminator 1
	cmpl	$52, -20(%rbp)	#, regno
	jg	.L151	#,
.L150:
	movl	target_flags(%rip), %eax	# target_flags, target_flags.180
	andl	$327680, %eax	#, D.29684
	testl	%eax, %eax	# D.29684
	je	.L151	#,
	.loc 1 1508 0 is_stmt 1
	movl	$1, %eax	#, D.29683
	jmp	.L148	#
.L151:
	.loc 1 1510 0
	cmpl	$0, -20(%rbp)	#, regno
	jne	.L152	#,
	.loc 1 1511 0
	movl	$1, %eax	#, D.29683
	jmp	.L148	#
.L152:
	.loc 1 1512 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L153	#
.L157:
	.loc 1 1513 0
	movl	-4(%rbp), %eax	# i, tmp79
	cltq
	movl	x86_64_int_parameter_registers(,%rax,4), %eax	# x86_64_int_parameter_registers, D.29684
	cmpl	-20(%rbp), %eax	# regno, D.29684
	jne	.L154	#,
	.loc 1 1514 0
	movl	$1, %eax	#, D.29683
	jmp	.L148	#
.L154:
	.loc 1 1512 0
	addl	$1, -4(%rbp)	#, i
.L153:
	.loc 1 1512 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.182
	andl	$33554432, %eax	#, D.29684
	testl	%eax, %eax	# D.29684
	je	.L155	#,
	movl	$6, %eax	#, iftmp.181
	jmp	.L156	#
.L155:
	.loc 1 1512 0 discriminator 2
	movl	$3, %eax	#, iftmp.181
.L156:
	.loc 1 1512 0 discriminator 3
	cmpl	-4(%rbp), %eax	# i, iftmp.181
	jg	.L157	#,
	.loc 1 1515 0 is_stmt 1
	movl	$0, %eax	#, D.29683
.L148:
	.loc 1 1516 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	ix86_function_arg_regno_p, .-ix86_function_arg_regno_p
	.section	.rodata
.LC119:
	.string	"\ninit_cumulative_args ("
	.align 8
.LC120:
	.string	"fntype code = %s, ret code = %s"
.LC121:
	.string	"no fntype"
.LC122:
	.string	", libname = %s"
.LC123:
	.string	", nregs=%d )\n"
	.text
	.globl	init_cumulative_args
	.type	init_cumulative_args, @function
init_cumulative_args:
.LFB9:
	.loc 1 1527 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# cum, cum
	movq	%rsi, -48(%rbp)	# fntype, fntype
	movq	%rdx, -56(%rbp)	# libname, libname
	.loc 1 1531 0
	movq	ix86_debug_arg_string(%rip), %rax	# ix86_debug_arg_string, ix86_debug_arg_string.183
	testq	%rax, %rax	# ix86_debug_arg_string.183
	je	.L159	#,
	.loc 1 1533 0
	movq	stderr(%rip), %rax	# stderr, stderr.184
	movq	%rax, %rcx	# stderr.184,
	movl	$23, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC119, %edi	#,
	call	fwrite	#
	.loc 1 1534 0
	cmpq	$0, -48(%rbp)	#, fntype
	je	.L160	#,
	.loc 1 1537 0
	movq	-48(%rbp), %rax	# fntype, tmp93
	movq	8(%rax), %rax	# fntype_6(D)->common.type, D.29686
	movzbl	16(%rax), %eax	# _7->common.code, D.29687
	movzbl	%al, %eax	# D.29687, D.29688
	.loc 1 1535 0
	cltq
	movq	tree_code_name(,%rax,8), %rcx	# tree_code_name, D.29689
	.loc 1 1536 0
	movq	-48(%rbp), %rax	# fntype, tmp95
	movzbl	16(%rax), %eax	# fntype_6(D)->common.code, D.29687
	movzbl	%al, %eax	# D.29687, D.29688
	.loc 1 1535 0
	cltq
	movq	tree_code_name(,%rax,8), %rdx	# tree_code_name, D.29689
	movq	stderr(%rip), %rax	# stderr, stderr.185
	movl	$.LC120, %esi	#,
	movq	%rax, %rdi	# stderr.185,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L161	#
.L160:
	.loc 1 1539 0
	movq	stderr(%rip), %rax	# stderr, stderr.186
	movq	%rax, %rcx	# stderr.186,
	movl	$9, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC121, %edi	#,
	call	fwrite	#
.L161:
	.loc 1 1541 0
	cmpq	$0, -56(%rbp)	#, libname
	je	.L159	#,
	.loc 1 1542 0
	movq	-56(%rbp), %rax	# libname, tmp97
	movq	8(%rax), %rdx	# libname_16(D)->fld[0].rtstr, D.29689
	movq	stderr(%rip), %rax	# stderr, stderr.187
	movl	$.LC122, %esi	#,
	movq	%rax, %rdi	# stderr.187,
	movl	$0, %eax	#,
	call	fprintf	#
.L159:
	.loc 1 1545 0
	movq	-40(%rbp), %rax	# cum, tmp98
	movq	zero_cum.14765(%rip), %rdx	# zero_cum, tmp100
	movq	%rdx, (%rax)	# tmp100, *cum_19(D)
	movq	zero_cum.14765+8(%rip), %rdx	# zero_cum, tmp101
	movq	%rdx, 8(%rax)	# tmp101, *cum_19(D)
	movq	zero_cum.14765+16(%rip), %rdx	# zero_cum, tmp102
	movq	%rdx, 16(%rax)	# tmp102, *cum_19(D)
	movl	zero_cum.14765+24(%rip), %edx	# zero_cum, tmp103
	movl	%edx, 24(%rax)	# tmp103, *cum_19(D)
	.loc 1 1548 0
	movl	ix86_regparm(%rip), %edx	# ix86_regparm, ix86_regparm.188
	movq	-40(%rbp), %rax	# cum, tmp104
	movl	%edx, 4(%rax)	# ix86_regparm.188, cum_19(D)->nregs
	.loc 1 1549 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.190
	andl	$33554432, %eax	#, D.29688
	testl	%eax, %eax	# D.29688
	je	.L162	#,
	.loc 1 1549 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.189
	jmp	.L163	#
.L162:
	.loc 1 1549 0 discriminator 2
	movl	$0, %eax	#, iftmp.189
.L163:
	.loc 1 1549 0 discriminator 3
	movq	-40(%rbp), %rdx	# cum, tmp105
	movl	%eax, 16(%rdx)	# iftmp.189, cum_19(D)->sse_nregs
	.loc 1 1550 0 is_stmt 1 discriminator 3
	cmpq	$0, -48(%rbp)	#, fntype
	je	.L164	#,
	.loc 1 1550 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.191
	andl	$33554432, %eax	#, D.29688
	testl	%eax, %eax	# D.29688
	jne	.L164	#,
.LBB6:
	.loc 1 1552 0 is_stmt 1
	movq	-48(%rbp), %rax	# fntype, tmp106
	movq	48(%rax), %rax	# fntype_6(D)->type.attributes, D.29686
	movq	%rax, %rsi	# D.29686,
	movl	$.LC67, %edi	#,
	call	lookup_attribute	#
	movq	%rax, -16(%rbp)	# tmp107, attr
	.loc 1 1554 0
	cmpq	$0, -16(%rbp)	#, attr
	je	.L164	#,
	.loc 1 1555 0
	movq	-16(%rbp), %rax	# attr, tmp108
	movq	32(%rax), %rax	# attr_28->list.value, D.29686
	movq	32(%rax), %rax	# _29->list.value, D.29686
	movq	32(%rax), %rax	# _30->int_cst.int_cst.low, D.29690
	movl	%eax, %edx	# D.29690, D.29688
	movq	-40(%rbp), %rax	# cum, tmp109
	movl	%edx, 4(%rax)	# D.29688, cum_19(D)->nregs
.L164:
.LBE6:
	.loc 1 1557 0
	movq	-40(%rbp), %rax	# cum, tmp110
	movl	$0, 24(%rax)	#, cum_19(D)->maybe_vaarg
	.loc 1 1564 0
	movq	-40(%rbp), %rax	# cum, tmp111
	movl	4(%rax), %eax	# cum_19(D)->nregs, D.29688
	testl	%eax, %eax	# D.29688
	je	.L165	#,
	.loc 1 1566 0
	cmpq	$0, -48(%rbp)	#, fntype
	je	.L166	#,
	.loc 1 1566 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# fntype, tmp112
	movq	24(%rax), %rax	# fntype_6(D)->type.values, iftmp.192
	jmp	.L167	#
.L166:
	.loc 1 1566 0 discriminator 2
	movl	$0, %eax	#, iftmp.192
.L167:
	.loc 1 1566 0 discriminator 3
	movq	%rax, -24(%rbp)	# iftmp.192, param
	jmp	.L168	#
.L171:
	.loc 1 1569 0 is_stmt 1
	movq	-24(%rbp), %rax	# param, tmp113
	movq	(%rax), %rax	# param_1->common.chain, tmp114
	movq	%rax, -8(%rbp)	# tmp114, next_param
	.loc 1 1570 0
	cmpq	$0, -8(%rbp)	#, next_param
	jne	.L169	#,
	.loc 1 1570 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# param, tmp115
	movq	32(%rax), %rdx	# param_1->list.value, D.29686
	movq	global_trees+216(%rip), %rax	# global_trees, D.29686
	cmpq	%rax, %rdx	# D.29686, D.29686
	je	.L169	#,
	.loc 1 1572 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.193
	andl	$33554432, %eax	#, D.29688
	testl	%eax, %eax	# D.29688
	jne	.L170	#,
	.loc 1 1573 0
	movq	-40(%rbp), %rax	# cum, tmp116
	movl	$0, 4(%rax)	#, cum_19(D)->nregs
.L170:
	.loc 1 1574 0
	movq	-40(%rbp), %rax	# cum, tmp117
	movl	$1, 24(%rax)	#, cum_19(D)->maybe_vaarg
.L169:
	.loc 1 1567 0
	movq	-8(%rbp), %rax	# next_param, tmp118
	movq	%rax, -24(%rbp)	# tmp118, param
.L168:
	.loc 1 1566 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, param
	jne	.L171	#,
.L165:
	.loc 1 1578 0
	cmpq	$0, -48(%rbp)	#, fntype
	jne	.L172	#,
	.loc 1 1578 0 is_stmt 0 discriminator 1
	cmpq	$0, -56(%rbp)	#, libname
	je	.L173	#,
.L172:
	.loc 1 1579 0 is_stmt 1
	cmpq	$0, -48(%rbp)	#, fntype
	je	.L174	#,
	.loc 1 1579 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# fntype, tmp119
	movq	24(%rax), %rax	# fntype_6(D)->type.values, D.29686
	testq	%rax, %rax	# D.29686
	jne	.L174	#,
.L173:
	.loc 1 1580 0 is_stmt 1
	movq	-40(%rbp), %rax	# cum, tmp120
	movl	$1, 24(%rax)	#, cum_19(D)->maybe_vaarg
.L174:
	.loc 1 1582 0
	movq	ix86_debug_arg_string(%rip), %rax	# ix86_debug_arg_string, ix86_debug_arg_string.194
	testq	%rax, %rax	# ix86_debug_arg_string.194
	je	.L175	#,
	.loc 1 1583 0
	movq	-40(%rbp), %rax	# cum, tmp121
	movl	4(%rax), %edx	# cum_19(D)->nregs, D.29688
	movq	stderr(%rip), %rax	# stderr, stderr.195
	movl	$.LC123, %esi	#,
	movq	%rax, %rdi	# stderr.195,
	movl	$0, %eax	#,
	call	fprintf	#
.L175:
	.loc 1 1585 0
	nop
	.loc 1 1586 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	init_cumulative_args, .-init_cumulative_args
	.type	merge_classes, @function
merge_classes:
.LFB10:
	.loc 1 1598 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# class1, class1
	movl	%esi, -8(%rbp)	# class2, class2
	.loc 1 1600 0
	movl	-4(%rbp), %eax	# class1, tmp61
	cmpl	-8(%rbp), %eax	# class2, tmp61
	jne	.L178	#,
	.loc 1 1601 0
	movl	-4(%rbp), %eax	# class1, D.29696
	jmp	.L179	#
.L178:
	.loc 1 1605 0
	cmpl	$0, -4(%rbp)	#, class1
	jne	.L180	#,
	.loc 1 1606 0
	movl	-8(%rbp), %eax	# class2, D.29696
	jmp	.L179	#
.L180:
	.loc 1 1607 0
	cmpl	$0, -8(%rbp)	#, class2
	jne	.L181	#,
	.loc 1 1608 0
	movl	-4(%rbp), %eax	# class1, D.29696
	jmp	.L179	#
.L181:
	.loc 1 1611 0
	cmpl	$9, -4(%rbp)	#, class1
	je	.L182	#,
	.loc 1 1611 0 is_stmt 0 discriminator 1
	cmpl	$9, -8(%rbp)	#, class2
	jne	.L183	#,
.L182:
	.loc 1 1612 0 is_stmt 1
	movl	$9, %eax	#, D.29696
	jmp	.L179	#
.L183:
	.loc 1 1615 0
	cmpl	$2, -4(%rbp)	#, class1
	jne	.L184	#,
	.loc 1 1615 0 is_stmt 0 discriminator 1
	cmpl	$4, -8(%rbp)	#, class2
	je	.L185	#,
.L184:
	.loc 1 1616 0 is_stmt 1
	cmpl	$2, -8(%rbp)	#, class2
	jne	.L186	#,
	.loc 1 1616 0 is_stmt 0 discriminator 1
	cmpl	$4, -4(%rbp)	#, class1
	jne	.L186	#,
.L185:
	.loc 1 1617 0 is_stmt 1
	movl	$2, %eax	#, D.29696
	jmp	.L179	#
.L186:
	.loc 1 1618 0
	cmpl	$1, -4(%rbp)	#, class1
	je	.L187	#,
	.loc 1 1618 0 is_stmt 0 discriminator 1
	cmpl	$2, -4(%rbp)	#, class1
	je	.L187	#,
	.loc 1 1619 0 is_stmt 1
	cmpl	$1, -8(%rbp)	#, class2
	je	.L187	#,
	.loc 1 1619 0 is_stmt 0 discriminator 1
	cmpl	$2, -8(%rbp)	#, class2
	jne	.L188	#,
.L187:
	.loc 1 1620 0 is_stmt 1
	movl	$1, %eax	#, D.29696
	jmp	.L179	#
.L188:
	.loc 1 1623 0
	cmpl	$7, -4(%rbp)	#, class1
	je	.L189	#,
	.loc 1 1623 0 is_stmt 0 discriminator 1
	cmpl	$8, -4(%rbp)	#, class1
	je	.L189	#,
	.loc 1 1624 0 is_stmt 1
	cmpl	$7, -8(%rbp)	#, class2
	je	.L189	#,
	.loc 1 1624 0 is_stmt 0 discriminator 1
	cmpl	$8, -8(%rbp)	#, class2
	jne	.L190	#,
.L189:
	.loc 1 1625 0 is_stmt 1
	movl	$9, %eax	#, D.29696
	jmp	.L179	#
.L190:
	.loc 1 1628 0
	movl	$3, %eax	#, D.29696
.L179:
	.loc 1 1629 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	merge_classes, .-merge_classes
	.section	.rodata
.LC124:
	.string	"i386.c"
	.text
	.type	classify_argument, @function
classify_argument:
.LFB11:
	.loc 1 1649 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$176, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movl	%edi, -164(%rbp)	# mode, mode
	movq	%rsi, -176(%rbp)	# type, type
	movq	%rdx, -184(%rbp)	# classes, classes
	movl	%ecx, -168(%rbp)	# bit_offset, bit_offset
	.loc 1 1650 0
	cmpl	$51, -164(%rbp)	#, mode
	jne	.L192	#,
	.loc 1 1651 0
	movq	-176(%rbp), %rax	# type, tmp252
	movq	%rax, %rdi	# tmp252,
	call	int_size_in_bytes	#
	jmp	.L193	#
.L192:
	.loc 1 1651 0 is_stmt 0 discriminator 1
	movl	-164(%rbp), %eax	# mode, mode.197
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.29699
	.loc 1 1650 0 is_stmt 1 discriminator 1
	movzbl	%al, %eax	# D.29699, iftmp.196
.L193:
	.loc 1 1650 0 is_stmt 0 discriminator 2
	movl	%eax, -144(%rbp)	# iftmp.196, bytes
	.loc 1 1652 0 is_stmt 1 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.199
	andl	$33554432, %eax	#, D.29697
	testl	%eax, %eax	# D.29697
	je	.L194	#,
	.loc 1 1652 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.198
	jmp	.L195	#
.L194:
	.loc 1 1652 0 discriminator 2
	movl	$4, %eax	#, iftmp.198
.L195:
	.loc 1 1652 0 discriminator 3
	movl	-144(%rbp), %edx	# bytes, tmp254
	addl	%edx, %eax	# tmp254, D.29697
	subl	$1, %eax	#, D.29697
	movl	target_flags(%rip), %edx	# target_flags, target_flags.201
	andl	$33554432, %edx	#, D.29697
	testl	%edx, %edx	# D.29697
	je	.L196	#,
	.loc 1 1652 0 discriminator 1
	movl	$8, %ebx	#, iftmp.200
	jmp	.L197	#
.L196:
	.loc 1 1652 0 discriminator 2
	movl	$4, %ebx	#, iftmp.200
.L197:
	.loc 1 1652 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.200
	movl	%eax, -140(%rbp)	# tmp255, words
	.loc 1 1654 0 is_stmt 1 discriminator 3
	cmpq	$0, -176(%rbp)	#, type
	je	.L198	#,
	.loc 1 1654 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# type, tmp257
	movzbl	16(%rax), %eax	# type_20(D)->common.code, D.29699
	cmpb	$18, %al	#, D.29699
	je	.L199	#,
	movq	-176(%rbp), %rax	# type, tmp258
	movzbl	16(%rax), %eax	# type_20(D)->common.code, D.29699
	cmpb	$20, %al	#, D.29699
	je	.L199	#,
	movq	-176(%rbp), %rax	# type, tmp259
	movzbl	16(%rax), %eax	# type_20(D)->common.code, D.29699
	cmpb	$21, %al	#, D.29699
	je	.L199	#,
	movq	-176(%rbp), %rax	# type, tmp260
	movzbl	16(%rax), %eax	# type_20(D)->common.code, D.29699
	cmpb	$22, %al	#, D.29699
	je	.L199	#,
	movq	-176(%rbp), %rax	# type, tmp261
	movzbl	16(%rax), %eax	# type_20(D)->common.code, D.29699
	cmpb	$19, %al	#, D.29699
	jne	.L198	#,
.L199:
.LBB7:
	.loc 1 1661 0 is_stmt 1
	cmpl	$16, -144(%rbp)	#, bytes
	jle	.L200	#,
	.loc 1 1662 0
	movl	$0, %eax	#, D.29697
	jmp	.L249	#
.L200:
	.loc 1 1664 0
	movl	$0, -160(%rbp)	#, i
	jmp	.L202	#
.L203:
	.loc 1 1665 0 discriminator 2
	movl	-160(%rbp), %eax	# i, tmp262
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp263
	addq	%rdx, %rax	# D.29700, D.29701
	movl	$0, (%rax)	#, *_48
	.loc 1 1664 0 discriminator 2
	addl	$1, -160(%rbp)	#, i
.L202:
	.loc 1 1664 0 is_stmt 0 discriminator 1
	movl	-160(%rbp), %eax	# i, tmp264
	cmpl	-140(%rbp), %eax	# words, tmp264
	jl	.L203	#,
	.loc 1 1669 0 is_stmt 1
	cmpl	$0, -140(%rbp)	#, words
	jne	.L204	#,
	.loc 1 1671 0
	movq	-184(%rbp), %rax	# classes, tmp265
	movl	$0, (%rax)	#, *classes_47(D)
	.loc 1 1672 0
	movl	$1, %eax	#, D.29697
	jmp	.L249	#
.L204:
	.loc 1 1676 0
	movq	-176(%rbp), %rax	# type, tmp266
	movzbl	16(%rax), %eax	# type_20(D)->common.code, D.29699
	cmpb	$20, %al	#, D.29699
	jne	.L205	#,
	.loc 1 1679 0
	movq	-176(%rbp), %rax	# type, tmp267
	movq	136(%rax), %rax	# type_20(D)->type.binfo, D.29702
	testq	%rax, %rax	# D.29702
	je	.L206	#,
	.loc 1 1679 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# type, tmp268
	movq	136(%rax), %rax	# type_20(D)->type.binfo, D.29702
	movq	64(%rax), %rax	# _53->vec.a, D.29702
	testq	%rax, %rax	# D.29702
	je	.L206	#,
.LBB8:
	.loc 1 1681 0 is_stmt 1
	movq	-176(%rbp), %rax	# type, tmp269
	movq	136(%rax), %rax	# type_20(D)->type.binfo, D.29702
	movq	64(%rax), %rax	# _55->vec.a, tmp270
	movq	%rax, -80(%rbp)	# tmp270, bases
	.loc 1 1682 0
	movq	-80(%rbp), %rax	# bases, tmp271
	movl	24(%rax), %eax	# bases_56->vec.length, tmp272
	movl	%eax, -136(%rbp)	# tmp272, n_bases
	.loc 1 1685 0
	movl	$0, -156(%rbp)	#, i
	jmp	.L207	#
.L211:
.LBB9:
	.loc 1 1687 0
	movq	-80(%rbp), %rax	# bases, tmp273
	movl	-156(%rbp), %edx	# i, tmp275
	movslq	%edx, %rdx	# tmp275, tmp274
	addq	$4, %rdx	#, tmp276
	movq	(%rax,%rdx,8), %rax	# bases_56->vec.a, tmp277
	movq	%rax, -72(%rbp)	# tmp277, binfo
	.loc 1 1689 0
	movq	-72(%rbp), %rax	# binfo, tmp278
	movq	40(%rax), %rax	# binfo_59->vec.a, D.29702
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.29702,
	call	tree_low_cst	#
	sall	$3, %eax	#, D.29703
	movl	%eax, -132(%rbp)	# D.29703, offset
	.loc 1 1690 0
	movq	-72(%rbp), %rax	# binfo, tmp279
	movq	8(%rax), %rax	# binfo_59->common.type, tmp280
	movq	%rax, -64(%rbp)	# tmp280, type
	.loc 1 1694 0
	movl	-168(%rbp), %eax	# bit_offset, tmp281
	movl	-132(%rbp), %edx	# offset, tmp282
	addl	%eax, %edx	# tmp281, D.29697
	.loc 1 1692 0
	movl	%edx, %eax	# D.29697, tmp283
	sarl	$31, %eax	#, tmp283
	shrl	$24, %eax	#, tmp284
	addl	%eax, %edx	# tmp284, tmp285
	movzbl	%dl, %edx	# tmp285, tmp286
	subl	%eax, %edx	# tmp284, tmp287
	movl	%edx, %eax	# tmp287, tmp287
	movl	%eax, %ecx	# tmp287, D.29697
	movq	-64(%rbp), %rax	# type, tmp288
	movzbl	61(%rax), %eax	# *type_65, tmp291
	shrb	%al	# D.29704
	movzbl	%al, %eax	# D.29704, D.29705
	leaq	-32(%rbp), %rdx	#, tmp292
	movq	-64(%rbp), %rsi	# type, tmp293
	movl	%eax, %edi	# D.29705,
	call	classify_argument	#
	movl	%eax, -128(%rbp)	# tmp294, num
	.loc 1 1695 0
	cmpl	$0, -128(%rbp)	#, num
	jne	.L208	#,
	.loc 1 1696 0
	movl	$0, %eax	#, D.29697
	jmp	.L249	#
.L208:
	.loc 1 1697 0
	movl	$0, -156(%rbp)	#, i
	jmp	.L209	#
.L210:
.LBB10:
	.loc 1 1699 0 discriminator 2
	movl	-168(%rbp), %eax	# bit_offset, tmp295
	movl	-132(%rbp), %edx	# offset, tmp296
	addl	%edx, %eax	# tmp296, D.29697
	leal	63(%rax), %edx	#, tmp298
	testl	%eax, %eax	# tmp297
	cmovs	%edx, %eax	# tmp298,, tmp297
	sarl	$6, %eax	#, tmp299
	movl	%eax, -124(%rbp)	# tmp299, pos
	.loc 1 1700 0 discriminator 2
	movl	-124(%rbp), %eax	# pos, tmp300
	movl	-156(%rbp), %edx	# i, tmp301
	addl	%edx, %eax	# tmp301, D.29697
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp302
	leaq	(%rdx,%rax), %rbx	#, D.29701
	.loc 1 1701 0 discriminator 2
	movl	-124(%rbp), %eax	# pos, tmp303
	movl	-156(%rbp), %edx	# i, tmp304
	addl	%edx, %eax	# tmp304, D.29697
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp305
	addq	%rdx, %rax	# D.29700, D.29701
	movl	(%rax), %edx	# *_83, D.29706
	movl	-156(%rbp), %eax	# i, tmp307
	cltq
	movl	-32(%rbp,%rax,4), %eax	# subclasses, D.29706
	movl	%edx, %esi	# D.29706,
	movl	%eax, %edi	# D.29706,
	call	merge_classes	#
	.loc 1 1700 0 discriminator 2
	movl	%eax, (%rbx)	# D.29706, *_79
.LBE10:
	.loc 1 1697 0 discriminator 2
	addl	$1, -156(%rbp)	#, i
.L209:
	.loc 1 1697 0 is_stmt 0 discriminator 1
	movl	-156(%rbp), %eax	# i, tmp308
	cmpl	-128(%rbp), %eax	# num, tmp308
	jl	.L210	#,
.LBE9:
	.loc 1 1685 0 is_stmt 1
	addl	$1, -156(%rbp)	#, i
.L207:
	.loc 1 1685 0 is_stmt 0 discriminator 1
	movl	-156(%rbp), %eax	# i, tmp309
	cmpl	-136(%rbp), %eax	# n_bases, tmp309
	jl	.L211	#,
.L206:
.LBE8:
	.loc 1 1706 0 is_stmt 1
	movq	-176(%rbp), %rax	# type, tmp310
	movq	24(%rax), %rax	# type_20(D)->type.values, tmp311
	movq	%rax, -88(%rbp)	# tmp311, field
	jmp	.L212	#
.L220:
	.loc 1 1708 0
	movq	-88(%rbp), %rax	# field, tmp312
	movzbl	16(%rax), %eax	# field_7->common.code, D.29699
	cmpb	$37, %al	#, D.29699
	jne	.L213	#,
.LBB11:
	.loc 1 1715 0
	movq	-88(%rbp), %rax	# field, tmp313
	movzbl	49(%rax), %eax	# *field_7, D.29699
	andl	$16, %eax	#, D.29699
	testb	%al, %al	# D.29699
	je	.L214	#,
	.loc 1 1717 0
	movq	-88(%rbp), %rax	# field, tmp314
	movq	%rax, %rdi	# tmp314,
	call	int_bit_position	#
	leaq	63(%rax), %rdx	#, tmp316
	testq	%rax, %rax	# tmp315
	cmovs	%rdx, %rax	# tmp316,, tmp315
	sarq	$6, %rax	#, tmp317
	movl	%eax, -160(%rbp)	# D.29698, i
	jmp	.L215	#
.L216:
	.loc 1 1721 0
	movl	-160(%rbp), %eax	# i, tmp318
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp319
	leaq	(%rdx,%rax), %rbx	#, D.29701
	.loc 1 1723 0
	movl	-160(%rbp), %eax	# i, tmp320
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp321
	addq	%rdx, %rax	# D.29700, D.29701
	.loc 1 1722 0
	movl	(%rax), %eax	# *_108, D.29706
	movl	%eax, %esi	# D.29706,
	movl	$1, %edi	#,
	call	merge_classes	#
	.loc 1 1721 0
	movl	%eax, (%rbx)	# D.29706, *_105
	.loc 1 1720 0
	addl	$1, -160(%rbp)	#, i
.L215:
	.loc 1 1718 0 discriminator 1
	movl	-160(%rbp), %eax	# i, tmp322
	movslq	%eax, %r12	# tmp322, D.29698
	movq	-88(%rbp), %rax	# field, tmp323
	movq	%rax, %rdi	# tmp323,
	call	int_bit_position	#
	movq	%rax, %rbx	#, D.29698
	.loc 1 1719 0 discriminator 1
	movq	-88(%rbp), %rax	# field, tmp324
	movq	40(%rax), %rax	# field_7->decl.size, D.29702
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.29702,
	call	tree_low_cst	#
	addq	%rbx, %rax	# D.29698, D.29698
	.loc 1 1720 0 discriminator 1
	addq	$63, %rax	#, D.29698
	leaq	63(%rax), %rdx	#, tmp326
	testq	%rax, %rax	# tmp325
	cmovs	%rdx, %rax	# tmp326,, tmp325
	sarq	$6, %rax	#, tmp327
	.loc 1 1717 0 discriminator 1
	cmpq	%rax, %r12	# D.29698, D.29698
	jl	.L216	#,
	jmp	.L213	#
.L214:
	.loc 1 1729 0
	movq	-88(%rbp), %rax	# field, tmp328
	movq	%rax, %rdi	# tmp328,
	call	int_bit_position	#
	.loc 1 1730 0
	movl	-168(%rbp), %edx	# bit_offset, tmp329
	movslq	%edx, %rdx	# tmp329, D.29698
	addq	%rax, %rdx	# D.29698, D.29698
	movq	%rdx, %rax	# D.29698, tmp330
	sarq	$63, %rax	#, tmp330
	shrq	$56, %rax	#, tmp331
	addq	%rax, %rdx	# tmp331, tmp332
	movzbl	%dl, %edx	# tmp332, tmp333
	subq	%rax, %rdx	# tmp331, tmp334
	movq	%rdx, %rax	# tmp334, tmp334
	.loc 1 1727 0
	movl	%eax, %ecx	# D.29698, D.29697
	movq	-88(%rbp), %rax	# field, tmp335
	movq	8(%rax), %rsi	# field_7->common.type, D.29702
	movq	-88(%rbp), %rax	# field, tmp336
	movq	8(%rax), %rax	# field_7->common.type, D.29702
	movzbl	61(%rax), %eax	# *_118, tmp339
	shrb	%al	# D.29704
	movzbl	%al, %eax	# D.29704, D.29705
	leaq	-32(%rbp), %rdx	#, tmp340
	movl	%eax, %edi	# D.29705,
	call	classify_argument	#
	movl	%eax, -120(%rbp)	# tmp341, num
	.loc 1 1731 0
	cmpl	$0, -120(%rbp)	#, num
	jne	.L217	#,
	.loc 1 1732 0
	movl	$0, %eax	#, D.29697
	jmp	.L249	#
.L217:
	.loc 1 1733 0
	movl	$0, -160(%rbp)	#, i
	jmp	.L218	#
.L219:
.LBB12:
	.loc 1 1736 0 discriminator 2
	movq	-88(%rbp), %rax	# field, tmp342
	movq	%rax, %rdi	# tmp342,
	call	int_bit_position	#
	movl	-168(%rbp), %edx	# bit_offset, tmp343
	movslq	%edx, %rdx	# tmp343, D.29698
	addq	%rdx, %rax	# D.29698, D.29698
	leaq	63(%rax), %rdx	#, tmp345
	testq	%rax, %rax	# tmp344
	cmovs	%rdx, %rax	# tmp345,, tmp344
	sarq	$6, %rax	#, tmp346
	.loc 1 1735 0 discriminator 2
	movl	%eax, -116(%rbp)	# D.29698, pos
	.loc 1 1737 0 discriminator 2
	movl	-116(%rbp), %eax	# pos, tmp347
	movl	-160(%rbp), %edx	# i, tmp348
	addl	%edx, %eax	# tmp348, D.29697
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp349
	leaq	(%rdx,%rax), %rbx	#, D.29701
	.loc 1 1738 0 discriminator 2
	movl	-116(%rbp), %eax	# pos, tmp350
	movl	-160(%rbp), %edx	# i, tmp351
	addl	%edx, %eax	# tmp351, D.29697
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp352
	addq	%rdx, %rax	# D.29700, D.29701
	movl	(%rax), %edx	# *_136, D.29706
	movl	-160(%rbp), %eax	# i, tmp354
	cltq
	movl	-32(%rbp,%rax,4), %eax	# subclasses, D.29706
	movl	%edx, %esi	# D.29706,
	movl	%eax, %edi	# D.29706,
	call	merge_classes	#
	.loc 1 1737 0 discriminator 2
	movl	%eax, (%rbx)	# D.29706, *_132
.LBE12:
	.loc 1 1733 0 discriminator 2
	addl	$1, -160(%rbp)	#, i
.L218:
	.loc 1 1733 0 is_stmt 0 discriminator 1
	movl	-160(%rbp), %eax	# i, tmp355
	cmpl	-120(%rbp), %eax	# num, tmp355
	jl	.L219	#,
.L213:
.LBE11:
	.loc 1 1706 0 is_stmt 1
	movq	-88(%rbp), %rax	# field, tmp356
	movq	(%rax), %rax	# field_7->common.chain, tmp357
	movq	%rax, -88(%rbp)	# tmp357, field
.L212:
	.loc 1 1706 0 is_stmt 0 discriminator 1
	cmpq	$0, -88(%rbp)	#, field
	jne	.L220	#,
	jmp	.L221	#
.L205:
	.loc 1 1745 0 is_stmt 1
	movq	-176(%rbp), %rax	# type, tmp358
	movzbl	16(%rax), %eax	# type_20(D)->common.code, D.29699
	cmpb	$18, %al	#, D.29699
	jne	.L222	#,
.LBB13:
	.loc 1 1748 0
	movq	-176(%rbp), %rax	# type, tmp359
	movq	8(%rax), %rsi	# type_20(D)->common.type, D.29702
	movq	-176(%rbp), %rax	# type, tmp360
	movq	8(%rax), %rax	# type_20(D)->common.type, D.29702
	movzbl	61(%rax), %eax	# *_144, tmp363
	shrb	%al	# D.29704
	movzbl	%al, %eax	# D.29704, D.29705
	movl	-168(%rbp), %ecx	# bit_offset, tmp364
	leaq	-32(%rbp), %rdx	#, tmp365
	movl	%eax, %edi	# D.29705,
	call	classify_argument	#
	movl	%eax, -112(%rbp)	# tmp366, num
	.loc 1 1750 0
	cmpl	$0, -112(%rbp)	#, num
	jne	.L223	#,
	.loc 1 1751 0
	movl	$0, %eax	#, D.29697
	jmp	.L249	#
.L223:
	.loc 1 1754 0
	movl	-32(%rbp), %eax	# subclasses, D.29706
	cmpl	$4, %eax	#, D.29706
	jne	.L224	#,
	.loc 1 1754 0 is_stmt 0 discriminator 1
	cmpl	$4, -144(%rbp)	#, bytes
	je	.L224	#,
	.loc 1 1755 0 is_stmt 1
	movl	$3, -32(%rbp)	#, subclasses
.L224:
	.loc 1 1756 0
	movl	-32(%rbp), %eax	# subclasses, D.29706
	cmpl	$2, %eax	#, D.29706
	jne	.L225	#,
	.loc 1 1756 0 is_stmt 0 discriminator 1
	cmpl	$4, -144(%rbp)	#, bytes
	je	.L225	#,
	.loc 1 1757 0 is_stmt 1
	movl	$1, -32(%rbp)	#, subclasses
.L225:
	.loc 1 1759 0
	movl	$0, -160(%rbp)	#, i
	jmp	.L226	#
.L227:
	.loc 1 1760 0 discriminator 2
	movl	-160(%rbp), %eax	# i, tmp367
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp368
	leaq	(%rdx,%rax), %rcx	#, D.29701
	movl	-160(%rbp), %eax	# i, tmp369
	cltd
	idivl	-112(%rbp)	# num
	movl	%edx, %eax	# tmp370, D.29697
	cltq
	movl	-32(%rbp,%rax,4), %eax	# subclasses, D.29706
	movl	%eax, (%rcx)	# D.29706, *_154
	.loc 1 1759 0 discriminator 2
	addl	$1, -160(%rbp)	#, i
.L226:
	.loc 1 1759 0 is_stmt 0 discriminator 1
	movl	-160(%rbp), %eax	# i, tmp373
	cmpl	-140(%rbp), %eax	# words, tmp373
	jl	.L227	#,
.LBE13:
	jmp	.L221	#
.L222:
	.loc 1 1763 0 is_stmt 1
	movq	-176(%rbp), %rax	# type, tmp374
	movzbl	16(%rax), %eax	# type_20(D)->common.code, D.29699
	cmpb	$21, %al	#, D.29699
	je	.L228	#,
	.loc 1 1764 0
	movq	-176(%rbp), %rax	# type, tmp375
	movzbl	16(%rax), %eax	# type_20(D)->common.code, D.29699
	cmpb	$22, %al	#, D.29699
	jne	.L229	#,
.L228:
	.loc 1 1767 0
	movq	-176(%rbp), %rax	# type, tmp376
	movq	136(%rax), %rax	# type_20(D)->type.binfo, D.29702
	testq	%rax, %rax	# D.29702
	je	.L230	#,
	.loc 1 1767 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# type, tmp377
	movq	136(%rax), %rax	# type_20(D)->type.binfo, D.29702
	movq	64(%rax), %rax	# _161->vec.a, D.29702
	testq	%rax, %rax	# D.29702
	je	.L230	#,
.LBB14:
	.loc 1 1769 0 is_stmt 1
	movq	-176(%rbp), %rax	# type, tmp378
	movq	136(%rax), %rax	# type_20(D)->type.binfo, D.29702
	movq	64(%rax), %rax	# _163->vec.a, tmp379
	movq	%rax, -56(%rbp)	# tmp379, bases
	.loc 1 1770 0
	movq	-56(%rbp), %rax	# bases, tmp380
	movl	24(%rax), %eax	# bases_164->vec.length, tmp381
	movl	%eax, -108(%rbp)	# tmp381, n_bases
	.loc 1 1773 0
	movl	$0, -152(%rbp)	#, i
	jmp	.L231	#
.L235:
.LBB15:
	.loc 1 1775 0
	movq	-56(%rbp), %rax	# bases, tmp382
	movl	-152(%rbp), %edx	# i, tmp384
	movslq	%edx, %rdx	# tmp384, tmp383
	addq	$4, %rdx	#, tmp385
	movq	(%rax,%rdx,8), %rax	# bases_164->vec.a, tmp386
	movq	%rax, -48(%rbp)	# tmp386, binfo
	.loc 1 1777 0
	movq	-48(%rbp), %rax	# binfo, tmp387
	movq	40(%rax), %rax	# binfo_167->vec.a, D.29702
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.29702,
	call	tree_low_cst	#
	sall	$3, %eax	#, D.29703
	movl	%eax, -104(%rbp)	# D.29703, offset
	.loc 1 1778 0
	movq	-48(%rbp), %rax	# binfo, tmp388
	movq	8(%rax), %rax	# binfo_167->common.type, tmp389
	movq	%rax, -40(%rbp)	# tmp389, type
	.loc 1 1782 0
	movl	-168(%rbp), %eax	# bit_offset, tmp390
	movl	-104(%rbp), %edx	# offset, tmp391
	addl	%eax, %edx	# tmp390, D.29697
	.loc 1 1780 0
	movl	%edx, %eax	# D.29697, tmp392
	sarl	$31, %eax	#, tmp392
	shrl	$24, %eax	#, tmp393
	addl	%eax, %edx	# tmp393, tmp394
	movzbl	%dl, %edx	# tmp394, tmp395
	subl	%eax, %edx	# tmp393, tmp396
	movl	%edx, %eax	# tmp396, tmp396
	movl	%eax, %ecx	# tmp396, D.29697
	movq	-40(%rbp), %rax	# type, tmp397
	movzbl	61(%rax), %eax	# *type_173, tmp400
	shrb	%al	# D.29704
	movzbl	%al, %eax	# D.29704, D.29705
	leaq	-32(%rbp), %rdx	#, tmp401
	movq	-40(%rbp), %rsi	# type, tmp402
	movl	%eax, %edi	# D.29705,
	call	classify_argument	#
	movl	%eax, -100(%rbp)	# tmp403, num
	.loc 1 1783 0
	cmpl	$0, -100(%rbp)	#, num
	jne	.L232	#,
	.loc 1 1784 0
	movl	$0, %eax	#, D.29697
	jmp	.L249	#
.L232:
	.loc 1 1785 0
	movl	$0, -152(%rbp)	#, i
	jmp	.L233	#
.L234:
.LBB16:
	.loc 1 1787 0 discriminator 2
	movl	-168(%rbp), %eax	# bit_offset, tmp404
	movl	-104(%rbp), %edx	# offset, tmp405
	addl	%edx, %eax	# tmp405, D.29697
	leal	63(%rax), %edx	#, tmp407
	testl	%eax, %eax	# tmp406
	cmovs	%edx, %eax	# tmp407,, tmp406
	sarl	$6, %eax	#, tmp408
	movl	%eax, -96(%rbp)	# tmp408, pos
	.loc 1 1788 0 discriminator 2
	movl	-96(%rbp), %eax	# pos, tmp409
	movl	-152(%rbp), %edx	# i, tmp410
	addl	%edx, %eax	# tmp410, D.29697
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp411
	leaq	(%rdx,%rax), %rbx	#, D.29701
	.loc 1 1789 0 discriminator 2
	movl	-96(%rbp), %eax	# pos, tmp412
	movl	-152(%rbp), %edx	# i, tmp413
	addl	%edx, %eax	# tmp413, D.29697
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp414
	addq	%rdx, %rax	# D.29700, D.29701
	movl	(%rax), %edx	# *_190, D.29706
	movl	-152(%rbp), %eax	# i, tmp416
	cltq
	movl	-32(%rbp,%rax,4), %eax	# subclasses, D.29706
	movl	%edx, %esi	# D.29706,
	movl	%eax, %edi	# D.29706,
	call	merge_classes	#
	.loc 1 1788 0 discriminator 2
	movl	%eax, (%rbx)	# D.29706, *_186
.LBE16:
	.loc 1 1785 0 discriminator 2
	addl	$1, -152(%rbp)	#, i
.L233:
	.loc 1 1785 0 is_stmt 0 discriminator 1
	movl	-152(%rbp), %eax	# i, tmp417
	cmpl	-100(%rbp), %eax	# num, tmp417
	jl	.L234	#,
.LBE15:
	.loc 1 1773 0 is_stmt 1
	addl	$1, -152(%rbp)	#, i
.L231:
	.loc 1 1773 0 is_stmt 0 discriminator 1
	movl	-152(%rbp), %eax	# i, tmp418
	cmpl	-108(%rbp), %eax	# n_bases, tmp418
	jl	.L235	#,
.L230:
.LBE14:
	.loc 1 1793 0 is_stmt 1
	movq	-176(%rbp), %rax	# type, tmp419
	movq	24(%rax), %rax	# type_20(D)->type.values, tmp420
	movq	%rax, -88(%rbp)	# tmp420, field
	jmp	.L236	#
.L241:
	.loc 1 1795 0
	movq	-88(%rbp), %rax	# field, tmp421
	movzbl	16(%rax), %eax	# field_8->common.code, D.29699
	cmpb	$37, %al	#, D.29699
	jne	.L237	#,
.LBB17:
	.loc 1 1798 0
	movq	-88(%rbp), %rax	# field, tmp422
	movq	8(%rax), %rsi	# field_8->common.type, D.29702
	movq	-88(%rbp), %rax	# field, tmp423
	movq	8(%rax), %rax	# field_8->common.type, D.29702
	movzbl	61(%rax), %eax	# *_199, tmp426
	shrb	%al	# D.29704
	movzbl	%al, %eax	# D.29704, D.29705
	movl	-168(%rbp), %ecx	# bit_offset, tmp427
	leaq	-32(%rbp), %rdx	#, tmp428
	movl	%eax, %edi	# D.29705,
	call	classify_argument	#
	movl	%eax, -92(%rbp)	# tmp429, num
	.loc 1 1801 0
	cmpl	$0, -92(%rbp)	#, num
	jne	.L238	#,
	.loc 1 1802 0
	movl	$0, %eax	#, D.29697
	jmp	.L249	#
.L238:
	.loc 1 1803 0
	movl	$0, -160(%rbp)	#, i
	jmp	.L239	#
.L240:
	.loc 1 1804 0 discriminator 2
	movl	-160(%rbp), %eax	# i, tmp430
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp431
	leaq	(%rdx,%rax), %rbx	#, D.29701
	movl	-160(%rbp), %eax	# i, tmp432
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp433
	addq	%rdx, %rax	# D.29700, D.29701
	movl	(%rax), %edx	# *_210, D.29706
	movl	-160(%rbp), %eax	# i, tmp435
	cltq
	movl	-32(%rbp,%rax,4), %eax	# subclasses, D.29706
	movl	%edx, %esi	# D.29706,
	movl	%eax, %edi	# D.29706,
	call	merge_classes	#
	movl	%eax, (%rbx)	# D.29706, *_207
	.loc 1 1803 0 discriminator 2
	addl	$1, -160(%rbp)	#, i
.L239:
	.loc 1 1803 0 is_stmt 0 discriminator 1
	movl	-160(%rbp), %eax	# i, tmp436
	cmpl	-92(%rbp), %eax	# num, tmp436
	jl	.L240	#,
.L237:
.LBE17:
	.loc 1 1793 0 is_stmt 1
	movq	-88(%rbp), %rax	# field, tmp437
	movq	(%rax), %rax	# field_8->common.chain, tmp438
	movq	%rax, -88(%rbp)	# tmp438, field
.L236:
	.loc 1 1793 0 is_stmt 0 discriminator 1
	cmpq	$0, -88(%rbp)	#, field
	jne	.L241	#,
	.loc 1 1763 0 is_stmt 1
	jmp	.L221	#
.L229:
	.loc 1 1809 0
	movl	$__FUNCTION__.14840, %edx	#,
	movl	$1809, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L221:
	.loc 1 1812 0
	movl	$0, -160(%rbp)	#, i
	jmp	.L242	#
.L248:
	.loc 1 1816 0
	movl	-160(%rbp), %eax	# i, tmp439
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp440
	addq	%rdx, %rax	# D.29700, D.29701
	movl	(%rax), %eax	# *_219, D.29706
	cmpl	$9, %eax	#, D.29706
	jne	.L243	#,
	.loc 1 1817 0
	movl	$0, %eax	#, D.29697
	jmp	.L249	#
.L243:
	.loc 1 1821 0
	movl	-160(%rbp), %eax	# i, tmp441
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp442
	addq	%rdx, %rax	# D.29700, D.29701
	movl	(%rax), %eax	# *_224, D.29706
	cmpl	$6, %eax	#, D.29706
	jne	.L244	#,
	.loc 1 1822 0
	cmpl	$0, -160(%rbp)	#, i
	je	.L245	#,
	.loc 1 1822 0 is_stmt 0 discriminator 1
	movl	-160(%rbp), %eax	# i, tmp443
	cltq
	salq	$2, %rax	#, D.29700
	leaq	-4(%rax), %rdx	#, D.29707
	movq	-184(%rbp), %rax	# classes, tmp444
	addq	%rdx, %rax	# D.29707, D.29701
	movl	(%rax), %eax	# *_229, D.29706
	cmpl	$3, %eax	#, D.29706
	je	.L244	#,
.L245:
	.loc 1 1823 0 is_stmt 1
	movl	-160(%rbp), %eax	# i, tmp445
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp446
	addq	%rdx, %rax	# D.29700, D.29701
	movl	$3, (%rax)	#, *_233
.L244:
	.loc 1 1826 0
	movl	-160(%rbp), %eax	# i, tmp447
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp448
	addq	%rdx, %rax	# D.29700, D.29701
	movl	(%rax), %eax	# *_236, D.29706
	cmpl	$8, %eax	#, D.29706
	jne	.L246	#,
	.loc 1 1827 0
	cmpl	$0, -160(%rbp)	#, i
	je	.L247	#,
	.loc 1 1827 0 is_stmt 0 discriminator 1
	movl	-160(%rbp), %eax	# i, tmp449
	cltq
	salq	$2, %rax	#, D.29700
	leaq	-4(%rax), %rdx	#, D.29707
	movq	-184(%rbp), %rax	# classes, tmp450
	addq	%rdx, %rax	# D.29707, D.29701
	movl	(%rax), %eax	# *_241, D.29706
	cmpl	$7, %eax	#, D.29706
	je	.L246	#,
.L247:
	.loc 1 1828 0 is_stmt 1
	movl	-160(%rbp), %eax	# i, tmp451
	cltq
	leaq	0(,%rax,4), %rdx	#, D.29700
	movq	-184(%rbp), %rax	# classes, tmp452
	addq	%rdx, %rax	# D.29700, D.29701
	movl	$3, (%rax)	#, *_245
.L246:
	.loc 1 1812 0
	addl	$1, -160(%rbp)	#, i
.L242:
	.loc 1 1812 0 is_stmt 0 discriminator 1
	movl	-160(%rbp), %eax	# i, tmp453
	cmpl	-140(%rbp), %eax	# words, tmp453
	jl	.L248	#,
	.loc 1 1830 0 is_stmt 1
	movl	-140(%rbp), %eax	# words, D.29697
	jmp	.L249	#
.L198:
.LBE7:
	.loc 1 1835 0
	cmpl	$0, -164(%rbp)	#, mode
	je	.L250	#,
	.loc 1 1835 0 is_stmt 0 discriminator 1
	cmpl	$51, -164(%rbp)	#, mode
	je	.L250	#,
.LBB18:
	.loc 1 1837 0 is_stmt 1
	movl	-164(%rbp), %eax	# mode, mode.202
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.29708
	movzwl	%ax, %eax	# D.29708, tmp455
	movl	%eax, -148(%rbp)	# tmp455, mode_alignment
	.loc 1 1839 0
	cmpl	$17, -164(%rbp)	#, mode
	jne	.L251	#,
	.loc 1 1840 0
	movl	$128, -148(%rbp)	#, mode_alignment
	jmp	.L252	#
.L251:
	.loc 1 1841 0
	cmpl	$23, -164(%rbp)	#, mode
	jne	.L252	#,
	.loc 1 1842 0
	movl	$256, -148(%rbp)	#, mode_alignment
.L252:
	.loc 1 1844 0
	movl	-168(%rbp), %eax	# bit_offset, tmp456
	cltd
	idivl	-148(%rbp)	# mode_alignment
	movl	%edx, %eax	# tmp457, D.29697
	testl	%eax, %eax	# D.29697
	je	.L250	#,
	.loc 1 1845 0
	movl	$0, %eax	#, D.29697
	jmp	.L249	#
.L250:
.LBE18:
	.loc 1 1849 0
	cmpl	$51, -164(%rbp)	#, mode
	ja	.L253	#,
	movl	-164(%rbp), %eax	# mode, tmp459
	movq	.L255(,%rax,8), %rax	#, tmp460
	jmp	*%rax	# tmp460
	.section	.rodata
	.align 8
	.align 4
.L255:
	.quad	.L254
	.quad	.L253
	.quad	.L256
	.quad	.L256
	.quad	.L256
	.quad	.L256
	.quad	.L257
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L258
	.quad	.L259
	.quad	.L253
	.quad	.L260
	.quad	.L253
	.quad	.L253
	.quad	.L261
	.quad	.L262
	.quad	.L253
	.quad	.L263
	.quad	.L256
	.quad	.L256
	.quad	.L256
	.quad	.L257
	.quad	.L264
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L265
	.quad	.L253
	.quad	.L253
	.quad	.L265
	.quad	.L266
	.quad	.L253
	.quad	.L265
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L265
	.quad	.L253
	.quad	.L266
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L253
	.quad	.L254
	.text
.L256:
	.loc 1 1858 0
	movl	-164(%rbp), %eax	# mode, mode.203
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.29708
	movzwl	%ax, %edx	# D.29708, D.29697
	movl	-168(%rbp), %eax	# bit_offset, tmp462
	addl	%edx, %eax	# D.29697, D.29697
	cmpl	$32, %eax	#, D.29697
	jg	.L267	#,
	.loc 1 1859 0
	movq	-184(%rbp), %rax	# classes, tmp463
	movl	$2, (%rax)	#, *classes_47(D)
	jmp	.L268	#
.L267:
	.loc 1 1861 0
	movq	-184(%rbp), %rax	# classes, tmp464
	movl	$1, (%rax)	#, *classes_47(D)
.L268:
	.loc 1 1862 0
	movl	$1, %eax	#, D.29697
	jmp	.L249	#
.L257:
	.loc 1 1865 0
	movq	-184(%rbp), %rax	# classes, tmp465
	addq	$4, %rax	#, D.29701
	movl	$1, (%rax)	#, *_260
	movl	(%rax), %edx	# *_260, D.29706
	movq	-184(%rbp), %rax	# classes, tmp466
	movl	%edx, (%rax)	# D.29706, *classes_47(D)
	.loc 1 1866 0
	movl	$2, %eax	#, D.29697
	jmp	.L249	#
.L264:
	.loc 1 1868 0
	movq	-184(%rbp), %rax	# classes, tmp467
	addq	$4, %rax	#, D.29701
	movl	$1, (%rax)	#, *_263
	movl	(%rax), %edx	# *_263, D.29706
	movq	-184(%rbp), %rax	# classes, tmp468
	movl	%edx, (%rax)	# D.29706, *classes_47(D)
	.loc 1 1869 0
	movq	-184(%rbp), %rax	# classes, tmp469
	leaq	8(%rax), %rdx	#, D.29701
	movq	-184(%rbp), %rax	# classes, tmp470
	addq	$12, %rax	#, D.29701
	movl	$1, (%rax)	#, *_266
	movl	(%rax), %eax	# *_266, D.29706
	movl	%eax, (%rdx)	# D.29706, *_265
	.loc 1 1870 0
	movl	$4, %eax	#, D.29697
	jmp	.L249	#
.L258:
	.loc 1 1872 0
	movl	-168(%rbp), %eax	# bit_offset, bit_offset.204
	andl	$63, %eax	#, D.29703
	testl	%eax, %eax	# D.29703
	jne	.L269	#,
	.loc 1 1873 0
	movq	-184(%rbp), %rax	# classes, tmp471
	movl	$4, (%rax)	#, *classes_47(D)
	jmp	.L270	#
.L269:
	.loc 1 1875 0
	movq	-184(%rbp), %rax	# classes, tmp472
	movl	$3, (%rax)	#, *classes_47(D)
.L270:
	.loc 1 1876 0
	movl	$1, %eax	#, D.29697
	jmp	.L249	#
.L259:
	.loc 1 1878 0
	movq	-184(%rbp), %rax	# classes, tmp473
	movl	$5, (%rax)	#, *classes_47(D)
	.loc 1 1879 0
	movl	$1, %eax	#, D.29697
	jmp	.L249	#
.L260:
	.loc 1 1881 0
	movq	-184(%rbp), %rax	# classes, tmp474
	movl	$7, (%rax)	#, *classes_47(D)
	.loc 1 1882 0
	movq	-184(%rbp), %rax	# classes, tmp475
	addq	$4, %rax	#, D.29701
	movl	$8, (%rax)	#, *_273
	.loc 1 1883 0
	movl	$2, %eax	#, D.29697
	jmp	.L249	#
.L263:
	.loc 1 1885 0
	movq	-184(%rbp), %rax	# classes, tmp476
	movl	$7, (%rax)	#, *classes_47(D)
	.loc 1 1886 0
	movq	-184(%rbp), %rax	# classes, tmp477
	addq	$4, %rax	#, D.29701
	movl	$8, (%rax)	#, *_275
	.loc 1 1887 0
	movq	-184(%rbp), %rax	# classes, tmp478
	addq	$8, %rax	#, D.29701
	movl	$7, (%rax)	#, *_276
	.loc 1 1888 0
	movq	-184(%rbp), %rax	# classes, tmp479
	addq	$12, %rax	#, D.29701
	movl	$8, (%rax)	#, *_277
	.loc 1 1889 0
	movl	$4, %eax	#, D.29697
	jmp	.L249	#
.L262:
	.loc 1 1891 0
	movq	-184(%rbp), %rax	# classes, tmp480
	movl	$5, (%rax)	#, *classes_47(D)
	.loc 1 1892 0
	movq	-184(%rbp), %rax	# classes, tmp481
	addq	$4, %rax	#, D.29701
	movl	$5, (%rax)	#, *_279
	.loc 1 1893 0
	movl	$2, %eax	#, D.29697
	jmp	.L249	#
.L261:
	.loc 1 1895 0
	movq	-184(%rbp), %rax	# classes, tmp482
	movl	$3, (%rax)	#, *classes_47(D)
	.loc 1 1896 0
	movl	$1, %eax	#, D.29697
	jmp	.L249	#
.L266:
	.loc 1 1899 0
	movq	-184(%rbp), %rax	# classes, tmp483
	movl	$3, (%rax)	#, *classes_47(D)
	.loc 1 1900 0
	movq	-184(%rbp), %rax	# classes, tmp484
	addq	$4, %rax	#, D.29701
	movl	$6, (%rax)	#, *_282
	.loc 1 1901 0
	movl	$2, %eax	#, D.29697
	jmp	.L249	#
.L265:
	.loc 1 1906 0
	movq	-184(%rbp), %rax	# classes, tmp485
	movl	$3, (%rax)	#, *classes_47(D)
	.loc 1 1907 0
	movl	$1, %eax	#, D.29697
	jmp	.L249	#
.L254:
	.loc 1 1910 0
	movl	$0, %eax	#, D.29697
	jmp	.L249	#
.L253:
	.loc 1 1912 0
	movl	$__FUNCTION__.14840, %edx	#,
	movl	$1912, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L249:
	.loc 1 1914 0
	addq	$176, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	classify_argument, .-classify_argument
	.type	examine_argument, @function
examine_argument:
.LFB12:
	.loc 1 1924 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movl	%edi, -36(%rbp)	# mode, mode
	movq	%rsi, -48(%rbp)	# type, type
	movl	%edx, -40(%rbp)	# in_return, in_return
	movq	%rcx, -56(%rbp)	# int_nregs, int_nregs
	movq	%r8, -64(%rbp)	# sse_nregs, sse_nregs
	.loc 1 1926 0
	leaq	-16(%rbp), %rdx	#, tmp66
	movq	-48(%rbp), %rsi	# type, tmp67
	movl	-36(%rbp), %eax	# mode, tmp68
	movl	$0, %ecx	#,
	movl	%eax, %edi	# tmp68,
	call	classify_argument	#
	movl	%eax, -20(%rbp)	# tmp69, n
	.loc 1 1928 0
	movq	-56(%rbp), %rax	# int_nregs, tmp70
	movl	$0, (%rax)	#, *int_nregs_6(D)
	.loc 1 1929 0
	movq	-64(%rbp), %rax	# sse_nregs, tmp71
	movl	$0, (%rax)	#, *sse_nregs_7(D)
	.loc 1 1930 0
	cmpl	$0, -20(%rbp)	#, n
	jne	.L272	#,
	.loc 1 1931 0
	movl	$0, %eax	#, D.29710
	jmp	.L284	#
.L272:
	.loc 1 1932 0
	subl	$1, -20(%rbp)	#, n
	jmp	.L274	#
.L283:
	.loc 1 1933 0
	movl	-20(%rbp), %eax	# n, tmp73
	cltq
	movl	-16(%rbp,%rax,4), %eax	# class, D.29711
	cmpl	$9, %eax	#, D.29711
	ja	.L275	#,
	movl	%eax, %eax	# D.29711, tmp74
	movq	.L277(,%rax,8), %rax	#, tmp75
	jmp	*%rax	# tmp75
	.section	.rodata
	.align 8
	.align 4
.L277:
	.quad	.L285
	.quad	.L278
	.quad	.L278
	.quad	.L279
	.quad	.L279
	.quad	.L279
	.quad	.L285
	.quad	.L280
	.quad	.L280
	.quad	.L281
	.text
.L278:
	.loc 1 1937 0
	movq	-56(%rbp), %rax	# int_nregs, tmp76
	movl	(%rax), %eax	# *int_nregs_6(D), D.29710
	leal	1(%rax), %edx	#, D.29710
	movq	-56(%rbp), %rax	# int_nregs, tmp77
	movl	%edx, (%rax)	# D.29710, *int_nregs_6(D)
	.loc 1 1938 0
	jmp	.L275	#
.L279:
	.loc 1 1942 0
	movq	-64(%rbp), %rax	# sse_nregs, tmp78
	movl	(%rax), %eax	# *sse_nregs_7(D), D.29710
	leal	1(%rax), %edx	#, D.29710
	movq	-64(%rbp), %rax	# sse_nregs, tmp79
	movl	%edx, (%rax)	# D.29710, *sse_nregs_7(D)
	.loc 1 1943 0
	jmp	.L275	#
.L280:
	.loc 1 1949 0
	cmpl	$0, -40(%rbp)	#, in_return
	jne	.L282	#,
	.loc 1 1950 0
	movl	$0, %eax	#, D.29710
	jmp	.L284	#
.L282:
	.loc 1 1951 0
	jmp	.L275	#
.L281:
	.loc 1 1953 0
	movl	$__FUNCTION__.14890, %edx	#,
	movl	$1953, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L285:
	.loc 1 1946 0
	nop
.L275:
	.loc 1 1932 0
	subl	$1, -20(%rbp)	#, n
.L274:
	.loc 1 1932 0 is_stmt 0 discriminator 1
	cmpl	$0, -20(%rbp)	#, n
	jns	.L283	#,
	.loc 1 1955 0 is_stmt 1
	movl	$1, %eax	#, D.29710
.L284:
	.loc 1 1956 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE12:
	.size	examine_argument, .-examine_argument
	.section	.rodata
.LC125:
	.string	"Memory class\n"
.LC126:
	.string	"Classes:"
.LC127:
	.string	" %s"
	.text
	.type	construct_container, @function
construct_container:
.LFB13:
	.loc 1 1967 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	addq	$-128, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movl	%edi, -116(%rbp)	# mode, mode
	movq	%rsi, -128(%rbp)	# type, type
	movl	%edx, -120(%rbp)	# in_return, in_return
	movl	%ecx, -132(%rbp)	# nintregs, nintregs
	movl	%r8d, -136(%rbp)	# nsseregs, nsseregs
	movq	%r9, -144(%rbp)	# intreg, intreg
	.loc 1 1969 0
	cmpl	$51, -116(%rbp)	#, mode
	jne	.L287	#,
	.loc 1 1970 0
	movq	-128(%rbp), %rax	# type, tmp136
	movq	%rax, %rdi	# tmp136,
	call	int_size_in_bytes	#
	jmp	.L288	#
.L287:
	.loc 1 1970 0 is_stmt 0 discriminator 1
	movl	-116(%rbp), %eax	# mode, mode.206
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.29714
	.loc 1 1969 0 is_stmt 1 discriminator 1
	movzbl	%al, %eax	# D.29714, iftmp.205
.L288:
	.loc 1 1969 0 is_stmt 0 discriminator 2
	movl	%eax, -80(%rbp)	# iftmp.205, bytes
	.loc 1 1974 0 is_stmt 1 discriminator 2
	movl	$0, -84(%rbp)	#, nexps
	.loc 1 1979 0 discriminator 2
	leaq	-64(%rbp), %rdx	#, tmp138
	movq	-128(%rbp), %rsi	# type, tmp139
	movl	-116(%rbp), %eax	# mode, tmp140
	movl	$0, %ecx	#,
	movl	%eax, %edi	# tmp140,
	call	classify_argument	#
	movl	%eax, -76(%rbp)	# tmp141, n
	.loc 1 1980 0 discriminator 2
	movq	ix86_debug_arg_string(%rip), %rax	# ix86_debug_arg_string, ix86_debug_arg_string.207
	testq	%rax, %rax	# ix86_debug_arg_string.207
	je	.L289	#,
	.loc 1 1982 0
	cmpl	$0, -76(%rbp)	#, n
	jne	.L290	#,
	.loc 1 1983 0
	movq	stderr(%rip), %rax	# stderr, stderr.208
	movq	%rax, %rcx	# stderr.208,
	movl	$13, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC125, %edi	#,
	call	fwrite	#
	jmp	.L289	#
.L290:
	.loc 1 1986 0
	movq	stderr(%rip), %rax	# stderr, stderr.209
	movq	%rax, %rcx	# stderr.209,
	movl	$8, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC126, %edi	#,
	call	fwrite	#
	.loc 1 1987 0
	movl	$0, -88(%rbp)	#, i
	jmp	.L291	#
.L292:
	.loc 1 1989 0 discriminator 2
	movl	-88(%rbp), %eax	# i, tmp143
	cltq
	movl	-64(%rbp,%rax,4), %eax	# class, D.29715
	movl	%eax, %eax	# D.29715, tmp144
	movq	x86_64_reg_class_name(,%rax,8), %rdx	# x86_64_reg_class_name, D.29716
	movq	stderr(%rip), %rax	# stderr, stderr.210
	movl	$.LC127, %esi	#,
	movq	%rax, %rdi	# stderr.210,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 1987 0 discriminator 2
	addl	$1, -88(%rbp)	#, i
.L291:
	.loc 1 1987 0 is_stmt 0 discriminator 1
	movl	-88(%rbp), %eax	# i, tmp145
	cmpl	-76(%rbp), %eax	# n, tmp145
	jl	.L292	#,
	.loc 1 1991 0 is_stmt 1
	movq	stderr(%rip), %rax	# stderr, stderr.211
	movq	%rax, %rsi	# stderr.211,
	movl	$10, %edi	#,
	call	fputc	#
.L289:
	.loc 1 1994 0
	cmpl	$0, -76(%rbp)	#, n
	jne	.L293	#,
	.loc 1 1995 0
	movl	$0, %eax	#, D.29712
	jmp	.L338	#
.L293:
	.loc 1 1996 0
	leaq	-100(%rbp), %rdi	#, tmp146
	leaq	-96(%rbp), %rcx	#, tmp147
	movl	-120(%rbp), %edx	# in_return, tmp148
	movq	-128(%rbp), %rsi	# type, tmp149
	movl	-116(%rbp), %eax	# mode, tmp150
	movq	%rdi, %r8	# tmp146,
	movl	%eax, %edi	# tmp150,
	call	examine_argument	#
	testl	%eax, %eax	# D.29717
	jne	.L295	#,
	.loc 1 1997 0
	movl	$0, %eax	#, D.29712
	jmp	.L338	#
.L295:
	.loc 1 1998 0
	movl	-96(%rbp), %eax	# needed_intregs, needed_intregs.212
	cmpl	-132(%rbp), %eax	# nintregs, needed_intregs.212
	jg	.L296	#,
	.loc 1 1998 0 is_stmt 0 discriminator 1
	movl	-100(%rbp), %eax	# needed_sseregs, needed_sseregs.213
	cmpl	-136(%rbp), %eax	# nsseregs, needed_sseregs.213
	jle	.L297	#,
.L296:
	.loc 1 1999 0 is_stmt 1
	movl	$0, %eax	#, D.29712
	jmp	.L338	#
.L297:
	.loc 1 2003 0
	cmpl	$1, -76(%rbp)	#, n
	jne	.L298	#,
	.loc 1 2003 0 is_stmt 0 discriminator 1
	cmpl	$21, -116(%rbp)	#, mode
	je	.L298	#,
	.loc 1 2004 0 is_stmt 1
	movl	-64(%rbp), %eax	# class, D.29715
	cmpl	$7, %eax	#, D.29715
	ja	.L299	#,
	movl	%eax, %eax	# D.29715, tmp151
	movq	.L301(,%rax,8), %rax	#, tmp152
	jmp	*%rax	# tmp152
	.section	.rodata
	.align 8
	.align 4
.L301:
	.quad	.L300
	.quad	.L302
	.quad	.L302
	.quad	.L303
	.quad	.L303
	.quad	.L303
	.quad	.L299
	.quad	.L304
	.text
.L302:
	.loc 1 2008 0
	movq	-144(%rbp), %rax	# intreg, tmp153
	movl	(%rax), %edx	# *intreg_50(D), D.29717
	movl	-116(%rbp), %eax	# mode, tmp154
	movl	%edx, %esi	# D.29717,
	movl	%eax, %edi	# tmp154,
	call	gen_rtx_REG	#
	jmp	.L338	#
.L303:
	.loc 1 2012 0
	cmpl	$7, 16(%rbp)	#, sse_regno
	jg	.L305	#,
	.loc 1 2012 0 is_stmt 0 discriminator 1
	movl	16(%rbp), %eax	# sse_regno, tmp155
	addl	$21, %eax	#, iftmp.214
	jmp	.L306	#
.L305:
	.loc 1 2012 0 discriminator 2
	movl	16(%rbp), %eax	# sse_regno, tmp156
	addl	$37, %eax	#, iftmp.214
.L306:
	.loc 1 2012 0 discriminator 3
	movl	-116(%rbp), %edx	# mode, tmp157
	movl	%eax, %esi	# iftmp.214,
	movl	%edx, %edi	# tmp157,
	call	gen_rtx_REG	#
	jmp	.L338	#
.L304:
	.loc 1 2014 0 is_stmt 1
	movl	-116(%rbp), %eax	# mode, tmp158
	movl	$8, %esi	#,
	movl	%eax, %edi	# tmp158,
	call	gen_rtx_REG	#
	jmp	.L338	#
.L300:
	.loc 1 2017 0
	movl	$0, %eax	#, D.29712
	jmp	.L338	#
.L299:
	.loc 1 2019 0
	movl	$__FUNCTION__.14924, %edx	#,
	movl	$2019, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L298:
	.loc 1 2021 0
	cmpl	$2, -76(%rbp)	#, n
	jne	.L307	#,
	.loc 1 2021 0 is_stmt 0 discriminator 1
	movl	-64(%rbp), %eax	# class, D.29715
	cmpl	$3, %eax	#, D.29715
	jne	.L307	#,
	movl	-60(%rbp), %eax	# class, D.29715
	cmpl	$6, %eax	#, D.29715
	jne	.L307	#,
	.loc 1 2022 0 is_stmt 1
	cmpl	$7, 16(%rbp)	#, sse_regno
	jg	.L308	#,
	.loc 1 2022 0 is_stmt 0 discriminator 1
	movl	16(%rbp), %eax	# sse_regno, tmp159
	addl	$21, %eax	#, iftmp.215
	jmp	.L309	#
.L308:
	.loc 1 2022 0 discriminator 2
	movl	16(%rbp), %eax	# sse_regno, tmp160
	addl	$37, %eax	#, iftmp.215
.L309:
	.loc 1 2022 0 discriminator 3
	movl	-116(%rbp), %edx	# mode, tmp161
	movl	%eax, %esi	# iftmp.215,
	movl	%edx, %edi	# tmp161,
	call	gen_rtx_REG	#
	jmp	.L338	#
.L307:
	.loc 1 2023 0 is_stmt 1
	cmpl	$2, -76(%rbp)	#, n
	jne	.L310	#,
	.loc 1 2024 0
	movl	-64(%rbp), %eax	# class, D.29715
	cmpl	$7, %eax	#, D.29715
	jne	.L310	#,
	.loc 1 2024 0 is_stmt 0 discriminator 1
	movl	-60(%rbp), %eax	# class, D.29715
	cmpl	$8, %eax	#, D.29715
	jne	.L310	#,
	.loc 1 2025 0 is_stmt 1
	movl	$8, %esi	#,
	movl	$18, %edi	#,
	call	gen_rtx_REG	#
	jmp	.L338	#
.L310:
	.loc 1 2026 0
	cmpl	$2, -76(%rbp)	#, n
	jne	.L311	#,
	.loc 1 2026 0 is_stmt 0 discriminator 1
	movl	-64(%rbp), %eax	# class, D.29715
	cmpl	$1, %eax	#, D.29715
	jne	.L311	#,
	.loc 1 2027 0 is_stmt 1
	movl	-60(%rbp), %eax	# class, D.29715
	cmpl	$1, %eax	#, D.29715
	jne	.L311	#,
	.loc 1 2028 0
	cmpl	$28, -116(%rbp)	#, mode
	je	.L312	#,
	.loc 1 2028 0 is_stmt 0 discriminator 1
	cmpl	$6, -116(%rbp)	#, mode
	jne	.L311	#,
.L312:
	.loc 1 2029 0 is_stmt 1
	movq	-144(%rbp), %rax	# intreg, tmp162
	movl	(%rax), %eax	# *intreg_50(D), D.29717
	leal	1(%rax), %edx	#, D.29717
	movq	-144(%rbp), %rax	# intreg, tmp163
	addq	$4, %rax	#, D.29718
	movl	(%rax), %eax	# *_71, D.29717
	cmpl	%eax, %edx	# D.29717, D.29717
	jne	.L311	#,
	.loc 1 2030 0
	movq	-144(%rbp), %rax	# intreg, tmp164
	movl	(%rax), %edx	# *intreg_50(D), D.29717
	movl	-116(%rbp), %eax	# mode, tmp165
	movl	%edx, %esi	# D.29717,
	movl	%eax, %edi	# tmp165,
	call	gen_rtx_REG	#
	jmp	.L338	#
.L311:
	.loc 1 2031 0
	cmpl	$4, -76(%rbp)	#, n
	jne	.L313	#,
	.loc 1 2032 0
	movl	-64(%rbp), %eax	# class, D.29715
	cmpl	$7, %eax	#, D.29715
	jne	.L313	#,
	.loc 1 2032 0 is_stmt 0 discriminator 1
	movl	-60(%rbp), %eax	# class, D.29715
	cmpl	$8, %eax	#, D.29715
	jne	.L313	#,
	.loc 1 2033 0 is_stmt 1
	movl	-56(%rbp), %eax	# class, D.29715
	cmpl	$7, %eax	#, D.29715
	jne	.L313	#,
	.loc 1 2033 0 is_stmt 0 discriminator 1
	movl	-52(%rbp), %eax	# class, D.29715
	cmpl	$8, %eax	#, D.29715
	jne	.L313	#,
	.loc 1 2034 0 is_stmt 1
	movl	$8, %esi	#,
	movl	$24, %edi	#,
	call	gen_rtx_REG	#
	jmp	.L338	#
.L313:
	.loc 1 2037 0
	movl	$0, -88(%rbp)	#, i
	jmp	.L314	#
.L335:
	.loc 1 2039 0
	movl	-88(%rbp), %eax	# i, tmp167
	cltq
	movl	-64(%rbp,%rax,4), %eax	# class, D.29715
	cmpl	$5, %eax	#, D.29715
	ja	.L315	#,
	movl	%eax, %eax	# D.29715, tmp168
	movq	.L317(,%rax,8), %rax	#, tmp169
	jmp	*%rax	# tmp169
	.section	.rodata
	.align 8
	.align 4
.L317:
	.quad	.L339
	.quad	.L318
	.quad	.L318
	.quad	.L319
	.quad	.L320
	.quad	.L321
	.text
.L318:
	.loc 1 2046 0
	movl	-88(%rbp), %eax	# i, tmp170
	addl	$1, %eax	#, D.29717
	sall	$3, %eax	#, D.29717
	cmpl	-80(%rbp), %eax	# bytes, D.29717
	jle	.L323	#,
	.loc 1 2047 0
	movl	-88(%rbp), %edx	# i, tmp171
	movl	$0, %eax	#, tmp172
	subl	%edx, %eax	# tmp171, tmp172
	sall	$3, %eax	#, tmp173
	movl	%eax, %edx	# tmp172, D.29717
	movl	-80(%rbp), %eax	# bytes, tmp174
	addl	%edx, %eax	# D.29717, D.29717
	sall	$3, %eax	#, D.29717
	movl	$0, %edx	#,
	movl	$1, %esi	#,
	movl	%eax, %edi	# D.29719,
	call	mode_for_size	#
	movl	%eax, -92(%rbp)	# tmp175, tmpmode
	jmp	.L324	#
.L323:
	.loc 1 2048 0
	movl	-88(%rbp), %eax	# i, tmp177
	cltq
	movl	-64(%rbp,%rax,4), %eax	# class, D.29715
	cmpl	$2, %eax	#, D.29715
	jne	.L325	#,
	.loc 1 2049 0
	movl	$4, -92(%rbp)	#, tmpmode
	jmp	.L324	#
.L325:
	.loc 1 2051 0
	movl	$5, -92(%rbp)	#, tmpmode
.L324:
	.loc 1 2053 0
	cmpl	$51, -92(%rbp)	#, tmpmode
	jne	.L326	#,
	.loc 1 2054 0
	movl	$5, -92(%rbp)	#, tmpmode
.L326:
	.loc 1 2055 0
	movl	-84(%rbp), %ebx	# nexps, nexps.216
	leal	1(%rbx), %eax	#, tmp178
	movl	%eax, -84(%rbp)	# tmp178, nexps
	movl	-88(%rbp), %eax	# i, tmp179
	sall	$3, %eax	#, D.29717
	cltq
	movq	%rax, %rsi	# D.29713,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %r12	#, D.29720
	movq	-144(%rbp), %rax	# intreg, tmp180
	movl	(%rax), %edx	# *intreg_2, D.29717
	movl	-92(%rbp), %eax	# tmpmode, tmp181
	movl	%edx, %esi	# D.29717,
	movl	%eax, %edi	# tmp181,
	call	gen_rtx_REG	#
	movq	%r12, %rcx	# D.29720,
	movq	%rax, %rdx	# D.29720,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movslq	%ebx, %rdx	# nexps.216, tmp182
	movq	%rax, -48(%rbp,%rdx,8)	# D.29720, exp
	.loc 1 2058 0
	addq	$4, -144(%rbp)	#, intreg
	.loc 1 2059 0
	jmp	.L322	#
.L320:
	.loc 1 2061 0
	movl	-84(%rbp), %ebx	# nexps, nexps.217
	leal	1(%rbx), %eax	#, tmp183
	movl	%eax, -84(%rbp)	# tmp183, nexps
	movl	-88(%rbp), %eax	# i, tmp184
	sall	$3, %eax	#, D.29717
	cltq
	movq	%rax, %rsi	# D.29713,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %r12	#, D.29720
	cmpl	$7, 16(%rbp)	#, sse_regno
	jg	.L327	#,
	.loc 1 2061 0 is_stmt 0 discriminator 1
	movl	16(%rbp), %eax	# sse_regno, tmp185
	addl	$21, %eax	#, iftmp.218
	jmp	.L328	#
.L327:
	.loc 1 2061 0 discriminator 2
	movl	16(%rbp), %eax	# sse_regno, tmp186
	addl	$37, %eax	#, iftmp.218
.L328:
	.loc 1 2061 0 discriminator 3
	movl	%eax, %esi	# iftmp.218,
	movl	$15, %edi	#,
	call	gen_rtx_REG	#
	movq	%r12, %rcx	# D.29720,
	movq	%rax, %rdx	# D.29720,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movslq	%ebx, %rdx	# nexps.217, tmp187
	movq	%rax, -48(%rbp,%rdx,8)	# D.29720, exp
	.loc 1 2065 0 is_stmt 1 discriminator 3
	addl	$1, 16(%rbp)	#, sse_regno
	.loc 1 2066 0 discriminator 3
	jmp	.L322	#
.L321:
	.loc 1 2068 0
	movl	-84(%rbp), %ebx	# nexps, nexps.219
	leal	1(%rbx), %eax	#, tmp188
	movl	%eax, -84(%rbp)	# tmp188, nexps
	movl	-88(%rbp), %eax	# i, tmp189
	sall	$3, %eax	#, D.29717
	cltq
	movq	%rax, %rsi	# D.29713,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %r12	#, D.29720
	cmpl	$7, 16(%rbp)	#, sse_regno
	jg	.L329	#,
	.loc 1 2068 0 is_stmt 0 discriminator 1
	movl	16(%rbp), %eax	# sse_regno, tmp190
	addl	$21, %eax	#, iftmp.220
	jmp	.L330	#
.L329:
	.loc 1 2068 0 discriminator 2
	movl	16(%rbp), %eax	# sse_regno, tmp191
	addl	$37, %eax	#, iftmp.220
.L330:
	.loc 1 2068 0 discriminator 3
	movl	%eax, %esi	# iftmp.220,
	movl	$16, %edi	#,
	call	gen_rtx_REG	#
	movq	%r12, %rcx	# D.29720,
	movq	%rax, %rdx	# D.29720,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movslq	%ebx, %rdx	# nexps.219, tmp192
	movq	%rax, -48(%rbp,%rdx,8)	# D.29720, exp
	.loc 1 2072 0 is_stmt 1 discriminator 3
	addl	$1, 16(%rbp)	#, sse_regno
	.loc 1 2073 0 discriminator 3
	jmp	.L322	#
.L319:
	.loc 1 2075 0
	movl	-76(%rbp), %eax	# n, tmp193
	subl	$1, %eax	#, D.29717
	cmpl	-88(%rbp), %eax	# i, D.29717
	jle	.L331	#,
	.loc 1 2075 0 is_stmt 0 discriminator 1
	movl	-88(%rbp), %eax	# i, tmp194
	addl	$1, %eax	#, D.29717
	cltq
	movl	-64(%rbp,%rax,4), %eax	# class, D.29715
	cmpl	$6, %eax	#, D.29715
	jne	.L331	#,
	.loc 1 2076 0 is_stmt 1
	movl	$6, -92(%rbp)	#, tmpmode
	addl	$1, -88(%rbp)	#, i
	jmp	.L332	#
.L331:
	.loc 1 2078 0
	movl	$5, -92(%rbp)	#, tmpmode
.L332:
	.loc 1 2079 0
	movl	-84(%rbp), %ebx	# nexps, nexps.221
	leal	1(%rbx), %eax	#, tmp196
	movl	%eax, -84(%rbp)	# tmp196, nexps
	movl	-88(%rbp), %eax	# i, tmp197
	sall	$3, %eax	#, D.29717
	cltq
	movq	%rax, %rsi	# D.29713,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %r12	#, D.29720
	cmpl	$7, 16(%rbp)	#, sse_regno
	jg	.L333	#,
	.loc 1 2079 0 is_stmt 0 discriminator 1
	movl	16(%rbp), %eax	# sse_regno, tmp198
	addl	$21, %eax	#, iftmp.222
	jmp	.L334	#
.L333:
	.loc 1 2079 0 discriminator 2
	movl	16(%rbp), %eax	# sse_regno, tmp199
	addl	$37, %eax	#, iftmp.222
.L334:
	.loc 1 2079 0 discriminator 3
	movl	-92(%rbp), %edx	# tmpmode, tmp200
	movl	%eax, %esi	# iftmp.222,
	movl	%edx, %edi	# tmp200,
	call	gen_rtx_REG	#
	movq	%r12, %rcx	# D.29720,
	movq	%rax, %rdx	# D.29720,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movslq	%ebx, %rdx	# nexps.221, tmp201
	movq	%rax, -48(%rbp,%rdx,8)	# D.29720, exp
	.loc 1 2083 0 is_stmt 1 discriminator 3
	addl	$1, 16(%rbp)	#, sse_regno
	.loc 1 2084 0 discriminator 3
	jmp	.L322	#
.L315:
	.loc 1 2086 0
	movl	$__FUNCTION__.14924, %edx	#,
	movl	$2086, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L339:
	.loc 1 2042 0
	nop
.L322:
	.loc 1 2037 0
	addl	$1, -88(%rbp)	#, i
.L314:
	.loc 1 2037 0 is_stmt 0 discriminator 1
	movl	-88(%rbp), %eax	# i, tmp202
	cmpl	-76(%rbp), %eax	# n, tmp202
	jl	.L335	#,
	.loc 1 2089 0 is_stmt 1
	movl	-84(%rbp), %eax	# nexps, tmp203
	movl	%eax, %edi	# tmp203,
	call	rtvec_alloc	#
	movq	%rax, %rdx	#, D.29721
	movl	-116(%rbp), %eax	# mode, tmp204
	movl	%eax, %esi	# tmp204,
	movl	$39, %edi	#,
	call	gen_rtx_fmt_E	#
	movq	%rax, -72(%rbp)	# tmp205, ret
	.loc 1 2090 0
	movl	$0, -88(%rbp)	#, i
	jmp	.L336	#
.L337:
	.loc 1 2091 0 discriminator 2
	movq	-72(%rbp), %rax	# ret, tmp206
	movq	8(%rax), %rax	# ret_140->fld[0].rtvec, D.29721
	movl	-88(%rbp), %edx	# i, tmp208
	movslq	%edx, %rdx	# tmp208, tmp207
	movq	-48(%rbp,%rdx,8), %rcx	# exp, D.29720
	movl	-88(%rbp), %edx	# i, tmp210
	movslq	%edx, %rdx	# tmp210, tmp209
	movq	%rcx, 8(%rax,%rdx,8)	# D.29720, _142->elem
	.loc 1 2090 0 discriminator 2
	addl	$1, -88(%rbp)	#, i
.L336:
	.loc 1 2090 0 is_stmt 0 discriminator 1
	movl	-88(%rbp), %eax	# i, tmp211
	cmpl	-84(%rbp), %eax	# nexps, tmp211
	jl	.L337	#,
	.loc 1 2092 0 is_stmt 1
	movq	-72(%rbp), %rax	# ret, D.29712
.L338:
	.loc 1 2093 0
	subq	$-128, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE13:
	.size	construct_container, .-construct_container
	.section	.rodata
	.align 8
.LC128:
	.string	"function_adv (sz=%d, wds=%2d, nregs=%d, mode=%s, named=%d)\n\n"
	.text
	.globl	function_arg_advance
	.type	function_arg_advance, @function
function_arg_advance:
.LFB14:
	.loc 1 2105 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# cum, cum
	movl	%esi, -44(%rbp)	# mode, mode
	movq	%rdx, -56(%rbp)	# type, type
	movl	%ecx, -48(%rbp)	# named, named
	.loc 1 2106 0
	cmpl	$51, -44(%rbp)	#, mode
	jne	.L341	#,
	.loc 1 2107 0
	movq	-56(%rbp), %rax	# type, tmp116
	movq	%rax, %rdi	# tmp116,
	call	int_size_in_bytes	#
	jmp	.L342	#
.L341:
	.loc 1 2107 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# mode, mode.224
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.29726
	.loc 1 2106 0 is_stmt 1 discriminator 1
	movzbl	%al, %eax	# D.29726, iftmp.223
.L342:
	.loc 1 2106 0 is_stmt 0 discriminator 2
	movl	%eax, -24(%rbp)	# iftmp.223, bytes
	.loc 1 2108 0 is_stmt 1 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.226
	andl	$33554432, %eax	#, D.29727
	testl	%eax, %eax	# D.29727
	je	.L343	#,
	.loc 1 2108 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.225
	jmp	.L344	#
.L343:
	.loc 1 2108 0 discriminator 2
	movl	$4, %eax	#, iftmp.225
.L344:
	.loc 1 2108 0 discriminator 3
	movl	-24(%rbp), %edx	# bytes, tmp118
	addl	%edx, %eax	# tmp118, D.29727
	subl	$1, %eax	#, D.29727
	movl	target_flags(%rip), %edx	# target_flags, target_flags.228
	andl	$33554432, %edx	#, D.29727
	testl	%edx, %edx	# D.29727
	je	.L345	#,
	.loc 1 2108 0 discriminator 1
	movl	$8, %ebx	#, iftmp.227
	jmp	.L346	#
.L345:
	.loc 1 2108 0 discriminator 2
	movl	$4, %ebx	#, iftmp.227
.L346:
	.loc 1 2108 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.227
	movl	%eax, -20(%rbp)	# tmp119, words
	.loc 1 2110 0 is_stmt 1 discriminator 3
	movq	ix86_debug_arg_string(%rip), %rax	# ix86_debug_arg_string, ix86_debug_arg_string.229
	testq	%rax, %rax	# ix86_debug_arg_string.229
	je	.L347	#,
	.loc 1 2113 0
	movl	-44(%rbp), %eax	# mode, mode.230
	.loc 1 2111 0
	cltq
	movq	mode_name(,%rax,8), %r8	# mode_name, D.29728
	movq	-40(%rbp), %rax	# cum, tmp122
	movl	4(%rax), %edi	# cum_26(D)->nregs, D.29727
	movq	-40(%rbp), %rax	# cum, tmp123
	movl	(%rax), %ecx	# cum_26(D)->words, D.29727
	movq	stderr(%rip), %rax	# stderr, stderr.231
	movl	-20(%rbp), %edx	# words, tmp124
	movl	-48(%rbp), %esi	# named, tmp125
	movl	%esi, (%rsp)	# tmp125,
	movq	%r8, %r9	# D.29728,
	movl	%edi, %r8d	# D.29727,
	movl	$.LC128, %esi	#,
	movq	%rax, %rdi	# stderr.231,
	movl	$0, %eax	#,
	call	fprintf	#
.L347:
	.loc 1 2114 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.232
	andl	$33554432, %eax	#, D.29727
	testl	%eax, %eax	# D.29727
	je	.L348	#,
.LBB19:
	.loc 1 2117 0
	leaq	-28(%rbp), %rcx	#, tmp126
	leaq	-32(%rbp), %rdx	#, tmp127
	movq	-56(%rbp), %rsi	# type, tmp128
	movl	-44(%rbp), %eax	# mode, tmp129
	movq	%rcx, %r8	# tmp126,
	movq	%rdx, %rcx	# tmp127,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp129,
	call	examine_argument	#
	testl	%eax, %eax	# D.29727
	jne	.L349	#,
	.loc 1 2118 0
	movq	-40(%rbp), %rax	# cum, tmp130
	movl	(%rax), %edx	# cum_26(D)->words, D.29727
	movl	-20(%rbp), %eax	# words, tmp131
	addl	%eax, %edx	# tmp131, D.29727
	movq	-40(%rbp), %rax	# cum, tmp132
	movl	%edx, (%rax)	# D.29727, cum_26(D)->words
	jmp	.L350	#
.L349:
	.loc 1 2119 0
	movq	-40(%rbp), %rax	# cum, tmp133
	movl	16(%rax), %edx	# cum_26(D)->sse_nregs, D.29727
	movl	-28(%rbp), %eax	# sse_nregs, sse_nregs.233
	cmpl	%eax, %edx	# sse_nregs.233, D.29727
	jl	.L351	#,
	.loc 1 2119 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# cum, tmp134
	movl	4(%rax), %edx	# cum_26(D)->nregs, D.29727
	movl	-32(%rbp), %eax	# int_nregs, int_nregs.234
	cmpl	%eax, %edx	# int_nregs.234, D.29727
	jl	.L351	#,
	.loc 1 2121 0 is_stmt 1
	movq	-40(%rbp), %rax	# cum, tmp135
	movl	4(%rax), %edx	# cum_26(D)->nregs, D.29727
	movl	-32(%rbp), %eax	# int_nregs, int_nregs.235
	subl	%eax, %edx	# int_nregs.235, D.29727
	movq	-40(%rbp), %rax	# cum, tmp136
	movl	%edx, 4(%rax)	# D.29727, cum_26(D)->nregs
	.loc 1 2122 0
	movq	-40(%rbp), %rax	# cum, tmp137
	movl	16(%rax), %edx	# cum_26(D)->sse_nregs, D.29727
	movl	-28(%rbp), %eax	# sse_nregs, sse_nregs.236
	subl	%eax, %edx	# sse_nregs.236, D.29727
	movq	-40(%rbp), %rax	# cum, tmp138
	movl	%edx, 16(%rax)	# D.29727, cum_26(D)->sse_nregs
	.loc 1 2123 0
	movq	-40(%rbp), %rax	# cum, tmp139
	movl	8(%rax), %edx	# cum_26(D)->regno, D.29727
	movl	-32(%rbp), %eax	# int_nregs, int_nregs.237
	addl	%eax, %edx	# int_nregs.237, D.29727
	movq	-40(%rbp), %rax	# cum, tmp140
	movl	%edx, 8(%rax)	# D.29727, cum_26(D)->regno
	.loc 1 2124 0
	movq	-40(%rbp), %rax	# cum, tmp141
	movl	20(%rax), %edx	# cum_26(D)->sse_regno, D.29727
	movl	-28(%rbp), %eax	# sse_nregs, sse_nregs.238
	addl	%eax, %edx	# sse_nregs.238, D.29727
	movq	-40(%rbp), %rax	# cum, tmp142
	movl	%edx, 20(%rax)	# D.29727, cum_26(D)->sse_regno
	jmp	.L350	#
.L351:
	.loc 1 2127 0
	movq	-40(%rbp), %rax	# cum, tmp143
	movl	(%rax), %edx	# cum_26(D)->words, D.29727
	movl	-20(%rbp), %eax	# words, tmp144
	addl	%eax, %edx	# tmp144, D.29727
	movq	-40(%rbp), %rax	# cum, tmp145
	movl	%edx, (%rax)	# D.29727, cum_26(D)->words
.LBE19:
	jmp	.L352	#
.L350:
	jmp	.L352	#
.L348:
	.loc 1 2131 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.239
	andl	$327680, %eax	#, D.29727
	testl	%eax, %eax	# D.29727
	je	.L353	#,
	.loc 1 2131 0 is_stmt 0 discriminator 1
	cmpl	$6, -44(%rbp)	#, mode
	jne	.L353	#,
	.loc 1 2133 0 is_stmt 1
	movq	-40(%rbp), %rax	# cum, tmp146
	movl	12(%rax), %edx	# cum_26(D)->sse_words, D.29727
	movl	-20(%rbp), %eax	# words, tmp147
	addl	%eax, %edx	# tmp147, D.29727
	movq	-40(%rbp), %rax	# cum, tmp148
	movl	%edx, 12(%rax)	# D.29727, cum_26(D)->sse_words
	.loc 1 2134 0
	movq	-40(%rbp), %rax	# cum, tmp149
	movl	16(%rax), %eax	# cum_26(D)->sse_nregs, D.29727
	leal	-1(%rax), %edx	#, D.29727
	movq	-40(%rbp), %rax	# cum, tmp150
	movl	%edx, 16(%rax)	# D.29727, cum_26(D)->sse_nregs
	.loc 1 2135 0
	movq	-40(%rbp), %rax	# cum, tmp151
	movl	20(%rax), %eax	# cum_26(D)->sse_regno, D.29727
	leal	1(%rax), %edx	#, D.29727
	movq	-40(%rbp), %rax	# cum, tmp152
	movl	%edx, 20(%rax)	# D.29727, cum_26(D)->sse_regno
	.loc 1 2136 0
	movq	-40(%rbp), %rax	# cum, tmp153
	movl	16(%rax), %eax	# cum_26(D)->sse_nregs, D.29727
	testl	%eax, %eax	# D.29727
	jg	.L354	#,
	.loc 1 2138 0
	movq	-40(%rbp), %rax	# cum, tmp154
	movl	$0, 16(%rax)	#, cum_26(D)->sse_nregs
	.loc 1 2139 0
	movq	-40(%rbp), %rax	# cum, tmp155
	movl	$0, 20(%rax)	#, cum_26(D)->sse_regno
	.loc 1 2136 0
	jmp	.L352	#
.L354:
	.loc 1 2136 0 is_stmt 0 discriminator 1
	jmp	.L352	#
.L353:
	.loc 1 2144 0 is_stmt 1
	movq	-40(%rbp), %rax	# cum, tmp156
	movl	(%rax), %edx	# cum_26(D)->words, D.29727
	movl	-20(%rbp), %eax	# words, tmp157
	addl	%eax, %edx	# tmp157, D.29727
	movq	-40(%rbp), %rax	# cum, tmp158
	movl	%edx, (%rax)	# D.29727, cum_26(D)->words
	.loc 1 2145 0
	movq	-40(%rbp), %rax	# cum, tmp159
	movl	4(%rax), %eax	# cum_26(D)->nregs, D.29727
	subl	-20(%rbp), %eax	# words, D.29727
	movl	%eax, %edx	# D.29727, D.29727
	movq	-40(%rbp), %rax	# cum, tmp160
	movl	%edx, 4(%rax)	# D.29727, cum_26(D)->nregs
	.loc 1 2146 0
	movq	-40(%rbp), %rax	# cum, tmp161
	movl	8(%rax), %edx	# cum_26(D)->regno, D.29727
	movl	-20(%rbp), %eax	# words, tmp162
	addl	%eax, %edx	# tmp162, D.29727
	movq	-40(%rbp), %rax	# cum, tmp163
	movl	%edx, 8(%rax)	# D.29727, cum_26(D)->regno
	.loc 1 2148 0
	movq	-40(%rbp), %rax	# cum, tmp164
	movl	4(%rax), %eax	# cum_26(D)->nregs, D.29727
	testl	%eax, %eax	# D.29727
	jg	.L352	#,
	.loc 1 2150 0
	movq	-40(%rbp), %rax	# cum, tmp165
	movl	$0, 4(%rax)	#, cum_26(D)->nregs
	.loc 1 2151 0
	movq	-40(%rbp), %rax	# cum, tmp166
	movl	$0, 8(%rax)	#, cum_26(D)->regno
.L352:
	.loc 1 2155 0
	nop
	.loc 1 2156 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE14:
	.size	function_arg_advance, .-function_arg_advance
	.section	.rodata
	.align 8
.LC129:
	.string	"function_arg (size=%d, wds=%2d, nregs=%d, mode=%4s, named=%d"
.LC130:
	.string	", reg=%%e%s"
.LC131:
	.string	", stack"
.LC132:
	.string	" )\n"
	.text
	.globl	function_arg
	.type	function_arg, @function
function_arg:
.LFB15:
	.loc 1 2177 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# cum, cum
	movl	%esi, -44(%rbp)	# mode, mode
	movq	%rdx, -56(%rbp)	# type, type
	movl	%ecx, -48(%rbp)	# named, named
	.loc 1 2178 0
	movq	$0, -24(%rbp)	#, ret
	.loc 1 2179 0
	cmpl	$51, -44(%rbp)	#, mode
	jne	.L357	#,
	.loc 1 2180 0
	movq	-56(%rbp), %rax	# type, tmp105
	movq	%rax, %rdi	# tmp105,
	call	int_size_in_bytes	#
	jmp	.L358	#
.L357:
	.loc 1 2180 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# mode, mode.241
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.29732
	.loc 1 2179 0 is_stmt 1 discriminator 1
	movzbl	%al, %eax	# D.29732, iftmp.240
.L358:
	.loc 1 2179 0 is_stmt 0 discriminator 2
	movl	%eax, -32(%rbp)	# iftmp.240, bytes
	.loc 1 2181 0 is_stmt 1 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.243
	andl	$33554432, %eax	#, D.29733
	testl	%eax, %eax	# D.29733
	je	.L359	#,
	.loc 1 2181 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.242
	jmp	.L360	#
.L359:
	.loc 1 2181 0 discriminator 2
	movl	$4, %eax	#, iftmp.242
.L360:
	.loc 1 2181 0 discriminator 3
	movl	-32(%rbp), %edx	# bytes, tmp107
	addl	%edx, %eax	# tmp107, D.29733
	subl	$1, %eax	#, D.29733
	movl	target_flags(%rip), %edx	# target_flags, target_flags.245
	andl	$33554432, %edx	#, D.29733
	testl	%edx, %edx	# D.29733
	je	.L361	#,
	.loc 1 2181 0 discriminator 1
	movl	$8, %ebx	#, iftmp.244
	jmp	.L362	#
.L361:
	.loc 1 2181 0 discriminator 2
	movl	$4, %ebx	#, iftmp.244
.L362:
	.loc 1 2181 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.244
	movl	%eax, -28(%rbp)	# tmp108, words
	.loc 1 2186 0 is_stmt 1 discriminator 3
	cmpl	$0, -44(%rbp)	#, mode
	jne	.L363	#,
	.loc 1 2188 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.246
	andl	$33554432, %eax	#, D.29733
	testl	%eax, %eax	# D.29733
	je	.L364	#,
	.loc 1 2189 0
	movq	-40(%rbp), %rax	# cum, tmp110
	movl	24(%rax), %eax	# cum_33(D)->maybe_vaarg, D.29733
	testl	%eax, %eax	# D.29733
	je	.L365	#,
	.loc 1 2189 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# cum, tmp111
	movl	16(%rax), %eax	# cum_33(D)->sse_nregs, D.29733
	testl	%eax, %eax	# D.29733
	jns	.L366	#,
	.loc 1 2189 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.250
	andl	$33554432, %eax	#, D.29733
	testl	%eax, %eax	# D.29733
	je	.L367	#,
	.loc 1 2189 0 discriminator 5
	movl	$8, %eax	#, iftmp.249
	jmp	.L370	#
.L367:
	.loc 1 2189 0 discriminator 6
	movl	$0, %eax	#, iftmp.249
	jmp	.L370	#
.L366:
	.loc 1 2189 0 discriminator 4
	movq	-40(%rbp), %rax	# cum, tmp112
	movl	20(%rax), %eax	# cum_33(D)->sse_regno, D.29733
	cltq
	jmp	.L370	#
.L365:
	.loc 1 2189 0 discriminator 2
	movq	$-1, %rax	#, iftmp.247
.L370:
	.loc 1 2189 0 discriminator 7
	movq	%rax, %rsi	# iftmp.247,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	jmp	.L371	#
.L364:
	.loc 1 2195 0 is_stmt 1
	movq	const_int_rtx+504(%rip), %rax	# const_int_rtx, D.29730
	jmp	.L371	#
.L363:
	.loc 1 2197 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.251
	andl	$33554432, %eax	#, D.29733
	testl	%eax, %eax	# D.29733
	je	.L372	#,
	.loc 1 2198 0
	movq	-40(%rbp), %rax	# cum, tmp113
	movl	20(%rax), %ecx	# cum_33(D)->sse_regno, D.29733
	.loc 1 2199 0
	movq	-40(%rbp), %rax	# cum, tmp114
	movl	8(%rax), %eax	# cum_33(D)->regno, D.29733
	.loc 1 2198 0
	cltq
	salq	$2, %rax	#, tmp116
	leaq	x86_64_int_parameter_registers(%rax), %r8	#, D.29734
	movq	-40(%rbp), %rax	# cum, tmp117
	movl	16(%rax), %edi	# cum_33(D)->sse_nregs, D.29733
	movq	-40(%rbp), %rax	# cum, tmp118
	movl	4(%rax), %edx	# cum_33(D)->nregs, D.29733
	movq	-56(%rbp), %rsi	# type, tmp119
	movl	-44(%rbp), %eax	# mode, tmp120
	movl	%ecx, (%rsp)	# D.29733,
	movq	%r8, %r9	# D.29734,
	movl	%edi, %r8d	# D.29733,
	movl	%edx, %ecx	# D.29733,
	movl	$0, %edx	#,
	movl	%eax, %edi	# tmp120,
	call	construct_container	#
	movq	%rax, -24(%rbp)	# tmp121, ret
	jmp	.L373	#
.L372:
	.loc 1 2202 0
	movl	-44(%rbp), %eax	# mode, mode
	cmpl	$6, %eax	#, mode
	je	.L375	#,
	cmpl	$6, %eax	#, mode
	ja	.L376	#,
	cmpl	$2, %eax	#, mode
	jb	.L383	#,
	jmp	.L377	#
.L376:
	cmpl	$51, %eax	#, mode
	jne	.L383	#,
.L377:
	.loc 1 2213 0
	movq	-40(%rbp), %rax	# cum, tmp123
	movl	4(%rax), %eax	# cum_33(D)->nregs, D.29733
	cmpl	-28(%rbp), %eax	# words, D.29733
	jl	.L378	#,
	.loc 1 2214 0
	movq	-40(%rbp), %rax	# cum, tmp124
	movl	8(%rax), %edx	# cum_33(D)->regno, D.29733
	movl	-44(%rbp), %eax	# mode, tmp125
	movl	%edx, %esi	# D.29733,
	movl	%eax, %edi	# tmp125,
	call	gen_rtx_REG	#
	movq	%rax, -24(%rbp)	# tmp126, ret
	.loc 1 2215 0
	jmp	.L373	#
.L378:
	jmp	.L373	#
.L375:
	.loc 1 2217 0
	movq	-40(%rbp), %rax	# cum, tmp127
	movl	16(%rax), %eax	# cum_33(D)->sse_nregs, D.29733
	testl	%eax, %eax	# D.29733
	je	.L379	#,
	.loc 1 2218 0
	movq	-40(%rbp), %rax	# cum, tmp128
	movl	20(%rax), %edx	# cum_33(D)->sse_regno, D.29733
	movl	-44(%rbp), %eax	# mode, tmp129
	movl	%edx, %esi	# D.29733,
	movl	%eax, %edi	# tmp129,
	call	gen_rtx_REG	#
	movq	%rax, -24(%rbp)	# tmp130, ret
	.loc 1 2219 0
	jmp	.L373	#
.L379:
	jmp	.L373	#
.L383:
	.loc 1 2206 0
	nop
.L373:
	.loc 1 2222 0
	movq	ix86_debug_arg_string(%rip), %rax	# ix86_debug_arg_string, ix86_debug_arg_string.252
	testq	%rax, %rax	# ix86_debug_arg_string.252
	je	.L380	#,
	.loc 1 2226 0
	movl	-44(%rbp), %eax	# mode, mode.253
	.loc 1 2224 0
	cltq
	movq	mode_name(,%rax,8), %r8	# mode_name, D.29735
	movq	-40(%rbp), %rax	# cum, tmp132
	movl	4(%rax), %edi	# cum_33(D)->nregs, D.29733
	movq	-40(%rbp), %rax	# cum, tmp133
	movl	(%rax), %ecx	# cum_33(D)->words, D.29733
	movq	stderr(%rip), %rax	# stderr, stderr.254
	movl	-28(%rbp), %edx	# words, tmp134
	movl	-48(%rbp), %esi	# named, tmp135
	movl	%esi, (%rsp)	# tmp135,
	movq	%r8, %r9	# D.29735,
	movl	%edi, %r8d	# D.29733,
	movl	$.LC129, %esi	#,
	movq	%rax, %rdi	# stderr.254,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 2228 0
	cmpq	$0, -24(%rbp)	#, ret
	je	.L381	#,
	.loc 1 2229 0
	movq	-24(%rbp), %rax	# ret, tmp136
	movl	8(%rax), %eax	# ret_3->fld[0].rtuint, D.29736
	movl	%eax, %eax	# D.29736, tmp137
	movq	reg_names(,%rax,8), %rdx	# reg_names, D.29735
	movq	stderr(%rip), %rax	# stderr, stderr.255
	movl	$.LC130, %esi	#,
	movq	%rax, %rdi	# stderr.255,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L382	#
.L381:
	.loc 1 2231 0
	movq	stderr(%rip), %rax	# stderr, stderr.256
	movq	%rax, %rcx	# stderr.256,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC131, %edi	#,
	call	fwrite	#
.L382:
	.loc 1 2233 0
	movq	stderr(%rip), %rax	# stderr, stderr.257
	movq	%rax, %rcx	# stderr.257,
	movl	$3, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC132, %edi	#,
	call	fwrite	#
.L380:
	.loc 1 2236 0
	movq	-24(%rbp), %rax	# ret, D.29730
.L371:
	.loc 1 2237 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE15:
	.size	function_arg, .-function_arg
	.globl	ix86_function_arg_boundary
	.type	ix86_function_arg_boundary, @function
ix86_function_arg_boundary:
.LFB16:
	.loc 1 2246 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# mode, mode
	movq	%rsi, -32(%rbp)	# type, type
	.loc 1 2248 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.258
	andl	$33554432, %eax	#, D.29742
	testl	%eax, %eax	# D.29742
	jne	.L385	#,
	.loc 1 2249 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.260
	andl	$33554432, %eax	#, D.29742
	testl	%eax, %eax	# D.29742
	je	.L386	#,
	.loc 1 2249 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.259
	jmp	.L387	#
.L386:
	.loc 1 2249 0 discriminator 2
	movl	$32, %eax	#, iftmp.259
.L387:
	.loc 1 2249 0 discriminator 3
	jmp	.L388	#
.L385:
	.loc 1 2250 0 is_stmt 1
	cmpq	$0, -32(%rbp)	#, type
	je	.L389	#,
	.loc 1 2251 0
	movq	-32(%rbp), %rax	# type, tmp74
	movl	64(%rax), %eax	# type_15(D)->type.align, D.29743
	movl	%eax, -4(%rbp)	# D.29743, align
	jmp	.L390	#
.L389:
	.loc 1 2253 0
	movl	-20(%rbp), %eax	# mode, tmp75
	movl	%eax, %edi	# tmp75,
	call	get_mode_alignment	#
	movl	%eax, -4(%rbp)	# D.29743, align
.L390:
	.loc 1 2254 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.262
	andl	$33554432, %eax	#, D.29742
	testl	%eax, %eax	# D.29742
	je	.L391	#,
	.loc 1 2254 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.261
	jmp	.L392	#
.L391:
	.loc 1 2254 0 discriminator 2
	movl	$32, %eax	#, iftmp.261
.L392:
	.loc 1 2254 0 discriminator 3
	cmpl	-4(%rbp), %eax	# align, iftmp.261
	jle	.L393	#,
	.loc 1 2255 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.264
	andl	$33554432, %eax	#, D.29742
	testl	%eax, %eax	# D.29742
	je	.L394	#,
	.loc 1 2255 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.263
	jmp	.L395	#
.L394:
	.loc 1 2255 0 discriminator 2
	movl	$32, %eax	#, iftmp.263
.L395:
	.loc 1 2255 0 discriminator 3
	movl	%eax, -4(%rbp)	# iftmp.263, align
.L393:
	.loc 1 2256 0 is_stmt 1
	cmpl	$128, -4(%rbp)	#, align
	jle	.L396	#,
	.loc 1 2257 0
	movl	$128, -4(%rbp)	#, align
.L396:
	.loc 1 2258 0
	movl	-4(%rbp), %eax	# align, D.29742
.L388:
	.loc 1 2259 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE16:
	.size	ix86_function_arg_boundary, .-ix86_function_arg_boundary
	.globl	ix86_function_value_regno_p
	.type	ix86_function_value_regno_p, @function
ix86_function_value_regno_p:
.LFB17:
	.loc 1 2265 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# regno, regno
	.loc 1 2266 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.265
	andl	$33554432, %eax	#, D.29745
	testl	%eax, %eax	# D.29745
	jne	.L398	#,
	.loc 1 2270 0
	cmpl	$0, -4(%rbp)	#, regno
	je	.L399	#,
	.loc 1 2269 0
	cmpl	$8, -4(%rbp)	#, regno
	jne	.L400	#,
	.loc 1 2269 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.267
	andl	$32, %eax	#, D.29745
	testl	%eax, %eax	# D.29745
	jne	.L399	#,
.L400:
	.loc 1 2270 0 is_stmt 1
	cmpl	$21, -4(%rbp)	#, regno
	jne	.L401	#,
	.loc 1 2270 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.268
	andl	$327680, %eax	#, D.29745
	testl	%eax, %eax	# D.29745
	je	.L401	#,
.L399:
	.loc 1 2270 0 discriminator 1
	movl	$1, %eax	#, iftmp.266
	jmp	.L402	#
.L401:
	.loc 1 2270 0 discriminator 3
	movl	$0, %eax	#, iftmp.266
.L402:
	.loc 1 2268 0 is_stmt 1
	andl	$1, %eax	#, D.29744
	jmp	.L403	#
.L398:
	.loc 1 2274 0
	cmpl	$0, -4(%rbp)	#, regno
	je	.L404	#,
	.loc 1 2272 0
	cmpl	$8, -4(%rbp)	#, regno
	je	.L404	#,
	.loc 1 2273 0
	cmpl	$21, -4(%rbp)	#, regno
	jne	.L405	#,
	.loc 1 2273 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.270
	andl	$327680, %eax	#, D.29745
	testl	%eax, %eax	# D.29745
	jne	.L404	#,
.L405:
	.loc 1 2274 0 is_stmt 1
	cmpl	$8, -4(%rbp)	#, regno
	jne	.L406	#,
	.loc 1 2274 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.271
	andl	$32, %eax	#, D.29745
	testl	%eax, %eax	# D.29745
	je	.L406	#,
.L404:
	.loc 1 2274 0 discriminator 1
	movl	$1, %eax	#, iftmp.269
	jmp	.L407	#
.L406:
	.loc 1 2274 0 discriminator 3
	movl	$0, %eax	#, iftmp.269
.L407:
	.loc 1 2272 0 is_stmt 1
	andl	$1, %eax	#, D.29744
.L403:
	.loc 1 2275 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE17:
	.size	ix86_function_value_regno_p, .-ix86_function_value_regno_p
	.globl	ix86_function_value
	.type	ix86_function_value, @function
ix86_function_value:
.LFB18:
	.loc 1 2284 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# valtype, valtype
	.loc 1 2285 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.272
	andl	$33554432, %eax	#, D.29747
	testl	%eax, %eax	# D.29747
	je	.L409	#,
.LBB20:
	.loc 1 2288 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.274
	andl	$33554432, %eax	#, D.29747
	.loc 1 2287 0
	testl	%eax, %eax	# D.29747
	je	.L410	#,
	.loc 1 2287 0 is_stmt 0 discriminator 1
	movl	$8, %edx	#, iftmp.273
	jmp	.L411	#
.L410:
	.loc 1 2287 0 discriminator 2
	movl	$0, %edx	#, iftmp.273
.L411:
	.loc 1 2288 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.276
	andl	$33554432, %eax	#, D.29747
	.loc 1 2287 0 discriminator 3
	testl	%eax, %eax	# D.29747
	je	.L412	#,
	.loc 1 2287 0 is_stmt 0 discriminator 4
	movl	$6, %eax	#, iftmp.275
	jmp	.L413	#
.L412:
	.loc 1 2287 0 discriminator 5
	movl	$3, %eax	#, iftmp.275
.L413:
	.loc 1 2287 0 discriminator 6
	movq	-24(%rbp), %rcx	# valtype, tmp90
	movzbl	61(%rcx), %ecx	# *valtype_17(D), tmp93
	shrb	%cl	# D.29748
	movzbl	%cl, %edi	# D.29748, D.29749
	movq	-24(%rbp), %rsi	# valtype, tmp94
	movl	$0, (%rsp)	#,
	movl	$x86_64_int_return_registers, %r9d	#,
	movl	%edx, %r8d	# iftmp.273,
	movl	%eax, %ecx	# iftmp.275,
	movl	$1, %edx	#,
	call	construct_container	#
	movq	%rax, -8(%rbp)	# tmp95, ret
	.loc 1 2292 0 is_stmt 1 discriminator 6
	cmpq	$0, -8(%rbp)	#, ret
	jne	.L414	#,
	.loc 1 2293 0
	movq	-24(%rbp), %rax	# valtype, tmp96
	movzbl	61(%rax), %eax	# *valtype_17(D), tmp99
	shrb	%al	# D.29748
	movzbl	%al, %eax	# D.29748, D.29749
	movl	$0, %esi	#,
	movl	%eax, %edi	# D.29749,
	call	gen_rtx_REG	#
	movq	%rax, -8(%rbp)	# tmp100, ret
.L414:
	.loc 1 2294 0
	movq	-8(%rbp), %rax	# ret, D.29746
	jmp	.L415	#
.L409:
.LBE20:
	.loc 1 2297 0
	movq	-24(%rbp), %rax	# valtype, tmp101
	movzbl	61(%rax), %eax	# *valtype_17(D), tmp104
	shrb	%al	# D.29748
	movzbl	%al, %eax	# D.29748, D.29747
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29750
	cmpl	$2, %eax	#, D.29750
	jne	.L416	#,
	.loc 1 2297 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.278
	andl	$32, %eax	#, D.29747
	testl	%eax, %eax	# D.29747
	jne	.L417	#,
.L416:
	.loc 1 2297 0 discriminator 1
	movq	-24(%rbp), %rax	# valtype, tmp106
	movzbl	61(%rax), %eax	# *valtype_17(D), D.29751
	andl	$-2, %eax	#, D.29751
	cmpb	$12, %al	#, D.29751
	je	.L418	#,
	.loc 1 2297 0 discriminator 2
	movq	-24(%rbp), %rax	# valtype, tmp107
	movzbl	61(%rax), %eax	# *valtype_17(D), tmp110
	shrb	%al	# D.29748
	movzbl	%al, %eax	# D.29748, D.29747
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29750
	cmpl	$7, %eax	#, D.29750
	je	.L418	#,
	.loc 1 2297 0 discriminator 1
	movq	-24(%rbp), %rax	# valtype, tmp112
	movzbl	61(%rax), %eax	# *valtype_17(D), tmp115
	shrb	%al	# D.29748
	movzbl	%al, %eax	# D.29748, D.29747
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29750
	cmpl	$8, %eax	#, D.29750
	jne	.L419	#,
.L418:
	movl	$21, %eax	#, iftmp.279
	jmp	.L420	#
.L419:
	movl	$0, %eax	#, iftmp.279
.L420:
	.loc 1 2297 0 discriminator 3
	jmp	.L421	#
.L417:
	.loc 1 2297 0 discriminator 1
	movl	$8, %eax	#, iftmp.277
.L421:
	.loc 1 2297 0 discriminator 3
	movq	-24(%rbp), %rdx	# valtype, tmp117
	movzbl	61(%rdx), %edx	# *valtype_17(D), tmp120
	shrb	%dl	# D.29748
	movzbl	%dl, %edx	# D.29748, D.29749
	movl	%eax, %esi	# iftmp.277,
	movl	%edx, %edi	# D.29749,
	call	gen_rtx_REG	#
.L415:
	.loc 1 2298 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE18:
	.size	ix86_function_value, .-ix86_function_value
	.globl	ix86_return_in_memory
	.type	ix86_return_in_memory, @function
ix86_return_in_memory:
.LFB19:
	.loc 1 2304 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# type, type
	.loc 1 2306 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.280
	andl	$33554432, %eax	#, D.29752
	testl	%eax, %eax	# D.29752
	je	.L423	#,
	.loc 1 2308 0
	movq	-24(%rbp), %rax	# type, tmp87
	movzbl	61(%rax), %eax	# *type_4(D), tmp90
	shrb	%al	# D.29753
	movzbl	%al, %eax	# D.29753, D.29754
	leaq	-4(%rbp), %rcx	#, tmp91
	leaq	-8(%rbp), %rdx	#, tmp92
	movq	-24(%rbp), %rsi	# type, tmp93
	movq	%rcx, %r8	# tmp91,
	movq	%rdx, %rcx	# tmp92,
	movl	$1, %edx	#,
	movl	%eax, %edi	# D.29754,
	call	examine_argument	#
	testl	%eax, %eax	# D.29752
	sete	%al	#, D.29755
	movzbl	%al, %eax	# D.29755, D.29752
	jmp	.L429	#
.L423:
	.loc 1 2313 0
	movq	-24(%rbp), %rax	# type, tmp94
	movzbl	61(%rax), %eax	# *type_4(D), D.29756
	andl	$-2, %eax	#, D.29756
	cmpb	$102, %al	#, D.29756
	je	.L425	#,
	.loc 1 2314 0
	movq	-24(%rbp), %rax	# type, tmp95
	movzbl	61(%rax), %eax	# *type_4(D), tmp98
	shrb	%al	# D.29753
	movzbl	%al, %eax	# D.29753, D.29752
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29757
	cmpl	$7, %eax	#, D.29757
	je	.L426	#,
	.loc 1 2314 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# type, tmp100
	movzbl	61(%rax), %eax	# *type_4(D), tmp103
	shrb	%al	# D.29753
	movzbl	%al, %eax	# D.29753, D.29752
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29757
	cmpl	$8, %eax	#, D.29757
	jne	.L427	#,
.L426:
	.loc 1 2315 0 is_stmt 1
	movq	-24(%rbp), %rax	# type, tmp105
	movq	%rax, %rdi	# tmp105,
	call	int_size_in_bytes	#
	cmpq	$8, %rax	#, D.29758
	je	.L425	#,
.L427:
	.loc 1 2316 0
	movq	-24(%rbp), %rax	# type, tmp106
	movq	%rax, %rdi	# tmp106,
	call	int_size_in_bytes	#
	cmpq	$12, %rax	#, D.29758
	jle	.L428	#,
	.loc 1 2316 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# type, tmp107
	movzbl	61(%rax), %eax	# *type_4(D), D.29756
	andl	$-2, %eax	#, D.29756
	cmpb	$12, %al	#, D.29756
	je	.L428	#,
	.loc 1 2317 0 is_stmt 1
	movq	-24(%rbp), %rax	# type, tmp108
	movzbl	61(%rax), %eax	# *type_4(D), D.29756
	andl	$-2, %eax	#, D.29756
	cmpb	$36, %al	#, D.29756
	je	.L428	#,
	.loc 1 2318 0
	movq	-24(%rbp), %rax	# type, tmp109
	movzbl	61(%rax), %eax	# *type_4(D), tmp112
	shrb	%al	# D.29753
	movzbl	%al, %eax	# D.29753, D.29752
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29757
	cmpl	$7, %eax	#, D.29757
	je	.L428	#,
	.loc 1 2318 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# type, tmp114
	movzbl	61(%rax), %eax	# *type_4(D), tmp117
	shrb	%al	# D.29753
	movzbl	%al, %eax	# D.29753, D.29752
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29757
	cmpl	$8, %eax	#, D.29757
	je	.L428	#,
.L425:
	.loc 1 2319 0 is_stmt 1
	movl	$1, %eax	#, D.29752
	jmp	.L429	#
.L428:
	.loc 1 2320 0
	movl	$0, %eax	#, D.29752
.L429:
	.loc 1 2322 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE19:
	.size	ix86_return_in_memory, .-ix86_return_in_memory
	.globl	ix86_libcall_value
	.type	ix86_libcall_value, @function
ix86_libcall_value:
.LFB20:
	.loc 1 2329 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# mode, mode
	.loc 1 2330 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.281
	andl	$33554432, %eax	#, D.29760
	testl	%eax, %eax	# D.29760
	je	.L431	#,
	.loc 1 2332 0
	movl	-4(%rbp), %eax	# mode, tmp74
	subl	$15, %eax	#, tmp73
	cmpl	$9, %eax	#, tmp73
	ja	.L432	#,
	movl	%eax, %eax	# tmp73, tmp75
	movq	.L434(,%rax,8), %rax	#, tmp76
	jmp	*%rax	# tmp76
	.section	.rodata
	.align 8
	.align 4
.L434:
	.quad	.L433
	.quad	.L433
	.quad	.L432
	.quad	.L435
	.quad	.L432
	.quad	.L432
	.quad	.L433
	.quad	.L433
	.quad	.L432
	.quad	.L435
	.text
.L433:
	.loc 1 2338 0
	movl	-4(%rbp), %eax	# mode, tmp77
	movl	$21, %esi	#,
	movl	%eax, %edi	# tmp77,
	call	gen_rtx_REG	#
	jmp	.L436	#
.L435:
	.loc 1 2341 0
	movl	-4(%rbp), %eax	# mode, tmp78
	movl	$8, %esi	#,
	movl	%eax, %edi	# tmp78,
	call	gen_rtx_REG	#
	jmp	.L436	#
.L432:
	.loc 1 2343 0
	movl	-4(%rbp), %eax	# mode, tmp79
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp79,
	call	gen_rtx_REG	#
	jmp	.L436	#
.L431:
	.loc 1 2347 0
	movl	-4(%rbp), %eax	# mode, mode.283
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29761
	cmpl	$2, %eax	#, D.29761
	jne	.L437	#,
	.loc 1 2347 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.284
	andl	$32, %eax	#, D.29760
	testl	%eax, %eax	# D.29760
	jne	.L438	#,
.L437:
	.loc 1 2347 0 discriminator 1
	cmpl	$6, -4(%rbp)	#, mode
	je	.L439	#,
	.loc 1 2347 0 discriminator 2
	movl	-4(%rbp), %eax	# mode, mode.286
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29761
	cmpl	$7, %eax	#, D.29761
	je	.L439	#,
	.loc 1 2347 0 discriminator 1
	movl	-4(%rbp), %eax	# mode, mode.287
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29761
	cmpl	$8, %eax	#, D.29761
	jne	.L440	#,
.L439:
	movl	$21, %eax	#, iftmp.285
	jmp	.L441	#
.L440:
	movl	$0, %eax	#, iftmp.285
.L441:
	.loc 1 2347 0 discriminator 3
	jmp	.L442	#
.L438:
	.loc 1 2347 0 discriminator 1
	movl	$8, %eax	#, iftmp.282
.L442:
	.loc 1 2347 0 discriminator 3
	movl	-4(%rbp), %edx	# mode, tmp83
	movl	%eax, %esi	# iftmp.282,
	movl	%edx, %edi	# tmp83,
	call	gen_rtx_REG	#
.L436:
	.loc 1 2348 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE20:
	.size	ix86_libcall_value, .-ix86_libcall_value
	.section	.rodata
.LC133:
	.string	"__va_list_tag"
.LC134:
	.string	"gp_offset"
.LC135:
	.string	"fp_offset"
.LC136:
	.string	"overflow_arg_area"
.LC137:
	.string	"reg_save_area"
	.text
	.globl	ix86_build_va_list
	.type	ix86_build_va_list, @function
ix86_build_va_list:
.LFB21:
	.loc 1 2354 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	.loc 1 2358 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.288
	andl	$33554432, %eax	#, D.29763
	testl	%eax, %eax	# D.29763
	jne	.L444	#,
	.loc 1 2359 0
	movq	integer_types(%rip), %rax	# integer_types, D.29764
	movq	%rax, %rdi	# D.29764,
	call	build_pointer_type	#
	jmp	.L445	#
.L444:
	.loc 1 2361 0
	movl	$20, %edi	#,
	call	make_lang_type	#
	movq	%rax, -64(%rbp)	# tmp75, record
	.loc 1 2362 0
	movl	$.LC133, %edi	#,
	call	get_identifier	#
	movq	-64(%rbp), %rdx	# record, tmp76
	movq	%rax, %rsi	# D.29764,
	movl	$33, %edi	#,
	call	build_decl	#
	movq	%rax, -56(%rbp)	# tmp77, type_decl
	.loc 1 2364 0
	movq	integer_types+48(%rip), %rbx	# integer_types, D.29764
	movl	$.LC134, %edi	#,
	call	get_identifier	#
	movq	%rbx, %rdx	# D.29764,
	movq	%rax, %rsi	# D.29764,
	movl	$37, %edi	#,
	call	build_decl	#
	movq	%rax, -48(%rbp)	# tmp78, f_gpr
	.loc 1 2366 0
	movq	integer_types+48(%rip), %rbx	# integer_types, D.29764
	movl	$.LC135, %edi	#,
	call	get_identifier	#
	movq	%rbx, %rdx	# D.29764,
	movq	%rax, %rsi	# D.29764,
	movl	$37, %edi	#,
	call	build_decl	#
	movq	%rax, -40(%rbp)	# tmp79, f_fpr
	.loc 1 2368 0
	movq	global_trees+224(%rip), %rbx	# global_trees, D.29764
	movl	$.LC136, %edi	#,
	call	get_identifier	#
	movq	%rbx, %rdx	# D.29764,
	movq	%rax, %rsi	# D.29764,
	movl	$37, %edi	#,
	call	build_decl	#
	movq	%rax, -32(%rbp)	# tmp80, f_ovf
	.loc 1 2370 0
	movq	global_trees+224(%rip), %rbx	# global_trees, D.29764
	movl	$.LC137, %edi	#,
	call	get_identifier	#
	movq	%rbx, %rdx	# D.29764,
	movq	%rax, %rsi	# D.29764,
	movl	$37, %edi	#,
	call	build_decl	#
	movq	%rax, -24(%rbp)	# tmp81, f_sav
	.loc 1 2373 0
	movq	-48(%rbp), %rax	# f_gpr, tmp82
	movq	-64(%rbp), %rdx	# record, tmp83
	movq	%rdx, 80(%rax)	# tmp83, f_gpr_11->decl.context
	.loc 1 2374 0
	movq	-40(%rbp), %rax	# f_fpr, tmp84
	movq	-64(%rbp), %rdx	# record, tmp85
	movq	%rdx, 80(%rax)	# tmp85, f_fpr_14->decl.context
	.loc 1 2375 0
	movq	-32(%rbp), %rax	# f_ovf, tmp86
	movq	-64(%rbp), %rdx	# record, tmp87
	movq	%rdx, 80(%rax)	# tmp87, f_ovf_17->decl.context
	.loc 1 2376 0
	movq	-24(%rbp), %rax	# f_sav, tmp88
	movq	-64(%rbp), %rdx	# record, tmp89
	movq	%rdx, 80(%rax)	# tmp89, f_sav_20->decl.context
	.loc 1 2378 0
	movq	-64(%rbp), %rax	# record, tmp90
	movq	-56(%rbp), %rdx	# type_decl, tmp91
	movq	%rdx, (%rax)	# tmp91, record_6->common.chain
	.loc 1 2379 0
	movq	-64(%rbp), %rax	# record, tmp92
	movq	-56(%rbp), %rdx	# type_decl, tmp93
	movq	%rdx, 96(%rax)	# tmp93, record_6->type.name
	.loc 1 2380 0
	movq	-64(%rbp), %rax	# record, tmp94
	movq	-48(%rbp), %rdx	# f_gpr, tmp95
	movq	%rdx, 24(%rax)	# tmp95, record_6->type.values
	.loc 1 2381 0
	movq	-48(%rbp), %rax	# f_gpr, tmp96
	movq	-40(%rbp), %rdx	# f_fpr, tmp97
	movq	%rdx, (%rax)	# tmp97, f_gpr_11->common.chain
	.loc 1 2382 0
	movq	-40(%rbp), %rax	# f_fpr, tmp98
	movq	-32(%rbp), %rdx	# f_ovf, tmp99
	movq	%rdx, (%rax)	# tmp99, f_fpr_14->common.chain
	.loc 1 2383 0
	movq	-32(%rbp), %rax	# f_ovf, tmp100
	movq	-24(%rbp), %rdx	# f_sav, tmp101
	movq	%rdx, (%rax)	# tmp101, f_ovf_17->common.chain
	.loc 1 2385 0
	movq	-64(%rbp), %rax	# record, tmp102
	movq	%rax, %rdi	# tmp102,
	call	layout_type	#
	.loc 1 2388 0
	movq	global_trees+120(%rip), %rax	# global_trees, D.29764
	movq	%rax, %rdi	# D.29764,
	call	build_index_type	#
	movq	%rax, %rdx	#, D.29764
	movq	-64(%rbp), %rax	# record, tmp103
	movq	%rdx, %rsi	# D.29764,
	movq	%rax, %rdi	# tmp103,
	call	build_array_type	#
.L445:
	.loc 1 2389 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE21:
	.size	ix86_build_va_list, .-ix86_build_va_list
	.globl	ix86_setup_incoming_varargs
	.type	ix86_setup_incoming_varargs, @function
ix86_setup_incoming_varargs:
.LFB22:
	.loc 1 2413 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$144, %rsp	#,
	movq	%rdi, -120(%rbp)	# cum, cum
	movl	%esi, -124(%rbp)	# mode, mode
	movq	%rdx, -136(%rbp)	# type, type
	movq	%rcx, -144(%rbp)	# pretend_size, pretend_size
	movl	%r8d, -128(%rbp)	# no_rtl, no_rtl
	.loc 1 2415 0
	movq	$0, -88(%rbp)	#, save_area
	.loc 1 2425 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.289
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L446	#,
	.loc 1 2429 0
	movq	cfun(%rip), %rax	# cfun, cfun.290
	movq	392(%rax), %rax	# cfun.290_17->machine, D.29771
	movl	$1, 1416(%rax)	#, _18->save_varrargs_registers
	.loc 1 2431 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.291
	movq	8(%rax), %rax	# current_function_decl.291_19->common.type, tmp130
	movq	%rax, -80(%rbp)	# tmp130, fntype
	.loc 1 2432 0
	movq	-80(%rbp), %rax	# fntype, tmp131
	movq	24(%rax), %rax	# fntype_20->type.values, D.29772
	.loc 1 2433 0
	testq	%rax, %rax	# D.29772
	je	.L449	#,
	.loc 1 2433 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# fntype, tmp132
	movq	24(%rax), %rax	# fntype_20->type.values, D.29772
	movq	%rax, %rdi	# D.29772,
	call	tree_last	#
	movq	32(%rax), %rdx	# _23->list.value, D.29772
	.loc 1 2434 0 is_stmt 1 discriminator 1
	movq	global_trees+216(%rip), %rax	# global_trees, D.29772
	.loc 1 2433 0 discriminator 1
	cmpq	%rax, %rdx	# D.29772, D.29772
	je	.L449	#,
	.loc 1 2433 0 is_stmt 0 discriminator 3
	movl	$1, %eax	#, iftmp.292
	jmp	.L450	#
.L449:
	.loc 1 2433 0 discriminator 2
	movl	$0, %eax	#, iftmp.292
.L450:
	.loc 1 2432 0 is_stmt 1
	movl	%eax, -96(%rbp)	# iftmp.292, stdarg_p
	.loc 1 2438 0
	movq	-120(%rbp), %rax	# cum, tmp133
	movq	(%rax), %rdx	# *cum_29(D), tmp134
	movq	%rdx, -32(%rbp)	# tmp134, next_cum
	movq	8(%rax), %rdx	# *cum_29(D), tmp135
	movq	%rdx, -24(%rbp)	# tmp135, next_cum
	movq	16(%rax), %rdx	# *cum_29(D), tmp136
	movq	%rdx, -16(%rbp)	# tmp136, next_cum
	movl	24(%rax), %eax	# *cum_29(D), tmp137
	movl	%eax, -8(%rbp)	# tmp137, next_cum
	.loc 1 2439 0
	cmpl	$0, -96(%rbp)	#, stdarg_p
	je	.L451	#,
	.loc 1 2440 0
	movq	-136(%rbp), %rdx	# type, tmp138
	movl	-124(%rbp), %esi	# mode, tmp139
	leaq	-32(%rbp), %rax	#, tmp140
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp140,
	call	function_arg_advance	#
.L451:
	.loc 1 2442 0
	cmpl	$0, -128(%rbp)	#, no_rtl
	jne	.L452	#,
	.loc 1 2443 0
	movq	global_rtl+24(%rip), %rax	# global_rtl, tmp141
	movq	%rax, -88(%rbp)	# tmp141, save_area
.L452:
	.loc 1 2445 0
	call	get_varargs_alias_set	#
	movl	%eax, -92(%rbp)	# D.29773, set
	.loc 1 2447 0
	movl	-24(%rbp), %eax	# next_cum.regno, tmp142
	movl	%eax, -100(%rbp)	# tmp142, i
	jmp	.L453	#
.L460:
	.loc 1 2450 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.294
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L454	#,
	.loc 1 2450 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.293
	jmp	.L455	#
.L454:
	.loc 1 2450 0 discriminator 2
	movl	$4, %eax	#, iftmp.293
.L455:
	.loc 1 2450 0 discriminator 3
	imull	-100(%rbp), %eax	# i, D.29770
	.loc 1 2449 0 is_stmt 1 discriminator 3
	movslq	%eax, %rdx	# D.29770, D.29773
	movq	-88(%rbp), %rax	# save_area, tmp143
	movq	%rdx, %rsi	# D.29773,
	movq	%rax, %rdi	# tmp143,
	call	plus_constant_wide	#
	movq	%rax, %rdx	#, D.29774
	movl	target_flags(%rip), %eax	# target_flags, target_flags.296
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L456	#,
	.loc 1 2449 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.295
	jmp	.L457	#
.L456:
	.loc 1 2449 0 discriminator 2
	movl	$4, %eax	#, iftmp.295
.L457:
	.loc 1 2449 0 discriminator 3
	movq	%rdx, %rsi	# D.29774,
	movl	%eax, %edi	# iftmp.295,
	call	gen_rtx_MEM	#
	movq	%rax, -72(%rbp)	# tmp144, mem
	.loc 1 2451 0 is_stmt 1 discriminator 3
	movl	-92(%rbp), %eax	# set, tmp145
	movslq	%eax, %rdx	# tmp145, D.29773
	movq	-72(%rbp), %rax	# mem, tmp146
	movq	%rdx, %rsi	# D.29773,
	movq	%rax, %rdi	# tmp146,
	call	set_mem_alias_set	#
	.loc 1 2452 0 discriminator 3
	movl	-100(%rbp), %eax	# i, tmp148
	cltq
	movl	x86_64_int_parameter_registers(,%rax,4), %edx	# x86_64_int_parameter_registers, D.29770
	movl	target_flags(%rip), %eax	# target_flags, target_flags.298
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L458	#,
	.loc 1 2452 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.297
	jmp	.L459	#
.L458:
	.loc 1 2452 0 discriminator 2
	movl	$4, %eax	#, iftmp.297
.L459:
	.loc 1 2452 0 discriminator 3
	movl	%edx, %esi	# D.29770,
	movl	%eax, %edi	# iftmp.297,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.29774
	movq	-72(%rbp), %rax	# mem, tmp149
	movq	%rdx, %rsi	# D.29774,
	movq	%rax, %rdi	# tmp149,
	call	emit_move_insn	#
	.loc 1 2447 0 is_stmt 1 discriminator 3
	addl	$1, -100(%rbp)	#, i
.L453:
	.loc 1 2447 0 is_stmt 0 discriminator 1
	movl	ix86_regparm(%rip), %eax	# ix86_regparm, ix86_regparm.299
	cmpl	%eax, -100(%rbp)	# ix86_regparm.299, i
	jl	.L460	#,
	.loc 1 2456 0 is_stmt 1
	movl	-16(%rbp), %eax	# next_cum.sse_nregs, D.29770
	testl	%eax, %eax	# D.29770
	je	.L446	#,
	.loc 1 2463 0
	call	gen_label_rtx	#
	movq	%rax, -64(%rbp)	# tmp150, label
	.loc 1 2464 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.301
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L462	#,
	.loc 1 2464 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.300
	jmp	.L463	#
.L462:
	.loc 1 2464 0 discriminator 2
	movl	$4, %eax	#, iftmp.300
.L463:
	.loc 1 2464 0 discriminator 3
	movq	-64(%rbp), %rdx	# label, tmp151
	movl	%eax, %esi	# iftmp.300,
	movl	$67, %edi	#,
	call	gen_rtx_fmt_u00	#
	movq	%rax, -56(%rbp)	# tmp152, label_ref
	.loc 1 2468 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.303
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L464	#,
	.loc 1 2468 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.302
	jmp	.L465	#
.L464:
	.loc 1 2468 0 discriminator 2
	movl	$4, %eax	#, iftmp.302
.L465:
	.loc 1 2468 0 discriminator 3
	movl	%eax, %edi	# iftmp.302,
	call	gen_reg_rtx	#
	movq	%rax, -48(%rbp)	# tmp153, tmp_reg
	.loc 1 2469 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.305
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L466	#,
	.loc 1 2469 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.304
	jmp	.L467	#
.L466:
	.loc 1 2469 0 discriminator 2
	movl	$4, %eax	#, iftmp.304
.L467:
	.loc 1 2469 0 discriminator 3
	movl	%eax, %edi	# iftmp.304,
	call	gen_reg_rtx	#
	movq	%rax, -40(%rbp)	# tmp154, nsse_reg
	.loc 1 2470 0 is_stmt 1 discriminator 3
	movl	$0, %esi	#,
	movl	$2, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.29774
	movq	-40(%rbp), %rax	# nsse_reg, tmp155
	movq	%rdx, %rsi	# D.29774,
	movq	%rax, %rdi	# tmp155,
	call	gen_zero_extendqidi2	#
	movq	%rax, %rdi	# D.29774,
	call	emit_insn	#
	.loc 1 2471 0 discriminator 3
	movl	$4, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.29774
	movl	target_flags(%rip), %eax	# target_flags, target_flags.307
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L468	#,
	.loc 1 2471 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.306
	jmp	.L469	#
.L468:
	.loc 1 2471 0 discriminator 2
	movl	$4, %eax	#, iftmp.306
.L469:
	.loc 1 2471 0 discriminator 3
	movq	-40(%rbp), %rdx	# nsse_reg, tmp156
	movl	%eax, %esi	# iftmp.306,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.29774
	movq	-48(%rbp), %rax	# tmp_reg, tmp157
	movq	%rdx, %rcx	# D.29774,
	movq	%rax, %rdx	# tmp157,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.29774,
	call	emit_insn	#
	.loc 1 2474 0 is_stmt 1 discriminator 3
	movl	-12(%rbp), %eax	# next_cum.sse_regno, D.29770
	testl	%eax, %eax	# D.29770
	je	.L470	#,
	.loc 1 2477 0
	movl	-12(%rbp), %eax	# next_cum.sse_regno, D.29770
	sall	$2, %eax	#, D.29770
	.loc 1 2476 0
	cltq
	movq	%rax, %rsi	# D.29773,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.29774
	movq	-56(%rbp), %rax	# label_ref, tmp158
	movq	%rdx, %rcx	# D.29774,
	movq	%rax, %rdx	# tmp158,
	movl	$5, %esi	#,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	# D.29774,
	movl	$5, %esi	#,
	movl	$58, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdx	#, D.29774
	movq	-40(%rbp), %rax	# nsse_reg, tmp159
	movq	%rdx, %rsi	# D.29774,
	movq	%rax, %rdi	# tmp159,
	call	emit_move_insn	#
	jmp	.L471	#
.L470:
	.loc 1 2482 0
	movq	-56(%rbp), %rdx	# label_ref, tmp160
	movq	-40(%rbp), %rax	# nsse_reg, tmp161
	movq	%rdx, %rsi	# tmp160,
	movq	%rax, %rdi	# tmp161,
	call	emit_move_insn	#
.L471:
	.loc 1 2483 0
	movq	-48(%rbp), %rdx	# tmp_reg, tmp162
	movq	-40(%rbp), %rcx	# nsse_reg, tmp163
	movq	-40(%rbp), %rax	# nsse_reg, tmp164
	movq	%rcx, %rsi	# tmp163,
	movq	%rax, %rdi	# tmp164,
	call	gen_subdi3	#
	movq	%rax, %rdi	# D.29774,
	call	emit_insn	#
	.loc 1 2488 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.309
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L472	#,
	.loc 1 2488 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.308
	jmp	.L473	#
.L472:
	.loc 1 2488 0 discriminator 2
	movl	$4, %eax	#, iftmp.308
.L473:
	.loc 1 2488 0 discriminator 3
	movl	%eax, %edi	# iftmp.308,
	call	gen_reg_rtx	#
	movq	%rax, -48(%rbp)	# tmp165, tmp_reg
	.loc 1 2489 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.311
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L474	#,
	.loc 1 2489 0 is_stmt 0 discriminator 1
	movl	$175, %eax	#, iftmp.310
	jmp	.L475	#
.L474:
	.loc 1 2489 0 discriminator 2
	movl	$151, %eax	#, iftmp.310
.L475:
	.loc 1 2489 0 discriminator 3
	movq	-88(%rbp), %rdx	# save_area, tmp166
	movq	%rax, %rsi	# iftmp.310,
	movq	%rdx, %rdi	# tmp166,
	call	plus_constant_wide	#
	movq	%rax, %rdx	#, D.29774
	movq	-48(%rbp), %rax	# tmp_reg, tmp167
	movq	%rdx, %rcx	# D.29774,
	movq	%rax, %rdx	# tmp167,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.29774,
	call	emit_insn	#
	.loc 1 2492 0 is_stmt 1 discriminator 3
	movq	-48(%rbp), %rax	# tmp_reg, tmp168
	movq	$-127, %rsi	#,
	movq	%rax, %rdi	# tmp168,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.29774,
	movl	$51, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -72(%rbp)	# tmp169, mem
	.loc 1 2493 0 discriminator 3
	movl	-92(%rbp), %eax	# set, tmp170
	movslq	%eax, %rdx	# tmp170, D.29773
	movq	-72(%rbp), %rax	# mem, tmp171
	movq	%rdx, %rsi	# D.29773,
	movq	%rax, %rdi	# tmp171,
	call	set_mem_alias_set	#
	.loc 1 2494 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.313
	andl	$33554432, %eax	#, D.29770
	testl	%eax, %eax	# D.29770
	je	.L476	#,
	.loc 1 2494 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.312
	jmp	.L477	#
.L476:
	.loc 1 2494 0 discriminator 2
	movl	$32, %eax	#, iftmp.312
.L477:
	.loc 1 2494 0 discriminator 3
	movq	-72(%rbp), %rdx	# mem, tmp172
	movl	%eax, %esi	# iftmp.312,
	movq	%rdx, %rdi	# tmp172,
	call	set_mem_align	#
	.loc 1 2498 0 is_stmt 1 discriminator 3
	movl	-12(%rbp), %eax	# next_cum.sse_regno, D.29770
	.loc 1 2497 0 discriminator 3
	cltq
	movq	%rax, %rsi	# D.29773,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.29774
	movq	-64(%rbp), %rcx	# label, tmp173
	movq	-40(%rbp), %rsi	# nsse_reg, tmp174
	movq	-72(%rbp), %rax	# mem, tmp175
	movq	%rax, %rdi	# tmp175,
	call	gen_sse_prologue_save	#
	movq	%rax, %rdi	# D.29774,
	call	emit_insn	#
.L446:
	.loc 1 2501 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE22:
	.size	ix86_setup_incoming_varargs, .-ix86_setup_incoming_varargs
	.section	.rodata
	.align 8
.LC138:
	.string	"va_start: words = %d, n_gpr = %d, n_fpr = %d\n"
	.text
	.globl	ix86_va_start
	.type	ix86_va_start, @function
ix86_va_start:
.LFB23:
	.loc 1 2510 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	addq	$-128, %rsp	#,
	movl	%edi, -100(%rbp)	# stdarg_p, stdarg_p
	movq	%rsi, -112(%rbp)	# valist, valist
	movq	%rdx, -120(%rbp)	# nextarg, nextarg
	.loc 1 2516 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.314
	andl	$33554432, %eax	#, D.29775
	testl	%eax, %eax	# D.29775
	jne	.L479	#,
	.loc 1 2518 0
	movq	-120(%rbp), %rdx	# nextarg, tmp110
	movq	-112(%rbp), %rcx	# valist, tmp111
	movl	-100(%rbp), %eax	# stdarg_p, tmp112
	movq	%rcx, %rsi	# tmp111,
	movl	%eax, %edi	# tmp112,
	call	std_expand_builtin_va_start	#
	.loc 1 2519 0
	jmp	.L478	#
.L479:
	.loc 1 2522 0
	movq	global_trees+248(%rip), %rax	# global_trees, D.29776
	movq	8(%rax), %rax	# _9->common.type, D.29776
	movq	24(%rax), %rax	# _10->type.values, tmp113
	movq	%rax, -88(%rbp)	# tmp113, f_gpr
	.loc 1 2523 0
	movq	-88(%rbp), %rax	# f_gpr, tmp114
	movq	(%rax), %rax	# f_gpr_11->common.chain, tmp115
	movq	%rax, -80(%rbp)	# tmp115, f_fpr
	.loc 1 2524 0
	movq	-80(%rbp), %rax	# f_fpr, tmp116
	movq	(%rax), %rax	# f_fpr_12->common.chain, tmp117
	movq	%rax, -72(%rbp)	# tmp117, f_ovf
	.loc 1 2525 0
	movq	-72(%rbp), %rax	# f_ovf, tmp118
	movq	(%rax), %rax	# f_ovf_13->common.chain, tmp119
	movq	%rax, -64(%rbp)	# tmp119, f_sav
	.loc 1 2527 0
	movq	-112(%rbp), %rax	# valist, tmp120
	movq	8(%rax), %rax	# valist_7(D)->common.type, D.29776
	movq	8(%rax), %rax	# _15->common.type, D.29776
	movq	-112(%rbp), %rdx	# valist, tmp121
	movq	%rax, %rsi	# D.29776,
	movl	$41, %edi	#,
	call	build1	#
	movq	%rax, -112(%rbp)	# tmp122, valist
	.loc 1 2528 0
	movq	-88(%rbp), %rax	# f_gpr, tmp123
	movq	8(%rax), %rax	# f_gpr_11->common.type, D.29776
	movq	-88(%rbp), %rcx	# f_gpr, tmp124
	movq	-112(%rbp), %rdx	# valist, tmp125
	movq	%rax, %rsi	# D.29776,
	movl	$39, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -56(%rbp)	# tmp126, gpr
	.loc 1 2529 0
	movq	-80(%rbp), %rax	# f_fpr, tmp127
	movq	8(%rax), %rax	# f_fpr_12->common.type, D.29776
	movq	-80(%rbp), %rcx	# f_fpr, tmp128
	movq	-112(%rbp), %rdx	# valist, tmp129
	movq	%rax, %rsi	# D.29776,
	movl	$39, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -48(%rbp)	# tmp130, fpr
	.loc 1 2530 0
	movq	-72(%rbp), %rax	# f_ovf, tmp131
	movq	8(%rax), %rax	# f_ovf_13->common.type, D.29776
	movq	-72(%rbp), %rcx	# f_ovf, tmp132
	movq	-112(%rbp), %rdx	# valist, tmp133
	movq	%rax, %rsi	# D.29776,
	movl	$39, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -40(%rbp)	# tmp134, ovf
	.loc 1 2531 0
	movq	-64(%rbp), %rax	# f_sav, tmp135
	movq	8(%rax), %rax	# f_sav_14->common.type, D.29776
	movq	-64(%rbp), %rcx	# f_sav, tmp136
	movq	-112(%rbp), %rdx	# valist, tmp137
	movq	%rax, %rsi	# D.29776,
	movl	$39, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -32(%rbp)	# tmp138, sav
	.loc 1 2534 0
	movq	cfun(%rip), %rax	# cfun, cfun.315
	movl	88(%rax), %eax	# cfun.315_26->args_info.words, D.29775
	cltq
	movq	%rax, -24(%rbp)	# tmp139, words
	.loc 1 2535 0
	movq	cfun(%rip), %rax	# cfun, cfun.316
	movl	96(%rax), %eax	# cfun.316_29->args_info.regno, D.29775
	cltq
	movq	%rax, -16(%rbp)	# tmp140, n_gpr
	.loc 1 2536 0
	movq	cfun(%rip), %rax	# cfun, cfun.317
	movl	108(%rax), %eax	# cfun.317_32->args_info.sse_regno, D.29775
	cltq
	movq	%rax, -8(%rbp)	# tmp141, n_fpr
	.loc 1 2538 0
	movq	ix86_debug_arg_string(%rip), %rax	# ix86_debug_arg_string, ix86_debug_arg_string.318
	testq	%rax, %rax	# ix86_debug_arg_string.318
	je	.L481	#,
	.loc 1 2539 0
	movq	-8(%rbp), %rax	# n_fpr, tmp142
	movl	%eax, %esi	# tmp142, D.29775
	movq	-16(%rbp), %rax	# n_gpr, tmp143
	movl	%eax, %ecx	# tmp143, D.29775
	movq	-24(%rbp), %rax	# words, tmp144
	movl	%eax, %edx	# tmp144, D.29775
	movq	stderr(%rip), %rax	# stderr, stderr.319
	movl	%esi, %r8d	# D.29775,
	movl	$.LC138, %esi	#,
	movq	%rax, %rdi	# stderr.319,
	movl	$0, %eax	#,
	call	fprintf	#
.L481:
	.loc 1 2543 0
	movq	-16(%rbp), %rax	# n_gpr, tmp145
	salq	$3, %rax	#, D.29777
	.loc 1 2542 0
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.29778,
	call	build_int_2_wide	#
	movq	%rax, %rcx	#, D.29776
	movq	-56(%rbp), %rax	# gpr, tmp146
	movq	8(%rax), %rax	# gpr_19->common.type, D.29776
	movq	-56(%rbp), %rdx	# gpr, tmp147
	movq	%rax, %rsi	# D.29776,
	movl	$48, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -96(%rbp)	# tmp148, t
	.loc 1 2544 0
	movq	-96(%rbp), %rax	# t, tmp149
	movzbl	17(%rax), %edx	#, tmp152
	orl	$1, %edx	#, tmp153
	movb	%dl, 17(%rax)	# tmp153,
	.loc 1 2545 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.29779
	movq	-96(%rbp), %rax	# t, tmp154
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp154,
	call	expand_expr	#
	.loc 1 2548 0
	movq	-8(%rbp), %rax	# n_fpr, tmp155
	salq	$4, %rax	#, D.29777
	movq	%rax, %rdx	# D.29777, D.29777
	movl	target_flags(%rip), %eax	# target_flags, target_flags.321
	andl	$33554432, %eax	#, D.29775
	testl	%eax, %eax	# D.29775
	je	.L482	#,
	.loc 1 2548 0 is_stmt 0 discriminator 1
	movl	$48, %eax	#, iftmp.320
	jmp	.L483	#
.L482:
	.loc 1 2548 0 discriminator 2
	movl	$24, %eax	#, iftmp.320
.L483:
	.loc 1 2548 0 discriminator 3
	addq	%rdx, %rax	# D.29777, D.29777
	.loc 1 2547 0 is_stmt 1 discriminator 3
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.29778,
	call	build_int_2_wide	#
	movq	%rax, %rcx	#, D.29776
	movq	-48(%rbp), %rax	# fpr, tmp156
	movq	8(%rax), %rax	# fpr_21->common.type, D.29776
	movq	-48(%rbp), %rdx	# fpr, tmp157
	movq	%rax, %rsi	# D.29776,
	movl	$48, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -96(%rbp)	# tmp158, t
	.loc 1 2549 0 discriminator 3
	movq	-96(%rbp), %rax	# t, tmp159
	movzbl	17(%rax), %edx	#, tmp162
	orl	$1, %edx	#, tmp163
	movb	%dl, 17(%rax)	# tmp163,
	.loc 1 2550 0 discriminator 3
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.29779
	movq	-96(%rbp), %rax	# t, tmp164
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp164,
	call	expand_expr	#
	.loc 1 2553 0 discriminator 3
	movq	global_rtl+48(%rip), %rdx	# global_rtl, D.29779
	movq	-40(%rbp), %rax	# ovf, tmp165
	movq	8(%rax), %rax	# ovf_23->common.type, D.29776
	movq	%rdx, %rsi	# D.29779,
	movq	%rax, %rdi	# D.29776,
	call	make_tree	#
	movq	%rax, -96(%rbp)	# tmp166, t
	.loc 1 2554 0 discriminator 3
	cmpq	$0, -24(%rbp)	#, words
	je	.L484	#,
	.loc 1 2556 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.323
	andl	$33554432, %eax	#, D.29775
	testl	%eax, %eax	# D.29775
	je	.L485	#,
	.loc 1 2556 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.322
	jmp	.L486	#
.L485:
	.loc 1 2556 0 discriminator 2
	movl	$4, %eax	#, iftmp.322
.L486:
	.loc 1 2556 0 discriminator 3
	imulq	-24(%rbp), %rax	# words, D.29777
	.loc 1 2555 0 is_stmt 1 discriminator 3
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.29778,
	call	build_int_2_wide	#
	movq	%rax, %rcx	#, D.29776
	movq	-40(%rbp), %rax	# ovf, tmp167
	movq	8(%rax), %rax	# ovf_23->common.type, D.29776
	movq	-96(%rbp), %rdx	# t, tmp168
	movq	%rax, %rsi	# D.29776,
	movl	$59, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -96(%rbp)	# tmp169, t
.L484:
	.loc 1 2557 0
	movq	-40(%rbp), %rax	# ovf, tmp170
	movq	8(%rax), %rax	# ovf_23->common.type, D.29776
	movq	-96(%rbp), %rcx	# t, tmp171
	movq	-40(%rbp), %rdx	# ovf, tmp172
	movq	%rax, %rsi	# D.29776,
	movl	$48, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -96(%rbp)	# tmp173, t
	.loc 1 2558 0
	movq	-96(%rbp), %rax	# t, tmp174
	movzbl	17(%rax), %edx	#, tmp177
	orl	$1, %edx	#, tmp178
	movb	%dl, 17(%rax)	# tmp178,
	.loc 1 2559 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.29779
	movq	-96(%rbp), %rax	# t, tmp179
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp179,
	call	expand_expr	#
	.loc 1 2563 0
	movq	global_rtl+24(%rip), %rdx	# global_rtl, D.29779
	movq	-32(%rbp), %rax	# sav, tmp180
	movq	8(%rax), %rax	# sav_25->common.type, D.29776
	movq	%rdx, %rsi	# D.29779,
	movq	%rax, %rdi	# D.29776,
	call	make_tree	#
	movq	%rax, -96(%rbp)	# tmp181, t
	.loc 1 2564 0
	movq	-32(%rbp), %rax	# sav, tmp182
	movq	8(%rax), %rax	# sav_25->common.type, D.29776
	movq	-96(%rbp), %rcx	# t, tmp183
	movq	-32(%rbp), %rdx	# sav, tmp184
	movq	%rax, %rsi	# D.29776,
	movl	$48, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -96(%rbp)	# tmp185, t
	.loc 1 2565 0
	movq	-96(%rbp), %rax	# t, tmp186
	movzbl	17(%rax), %edx	#, tmp189
	orl	$1, %edx	#, tmp190
	movb	%dl, 17(%rax)	# tmp190,
	.loc 1 2566 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.29779
	movq	-96(%rbp), %rax	# t, tmp191
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp191,
	call	expand_expr	#
	.loc 1 2567 0
	movq	cfun(%rip), %rax	# cfun, cfun.324
	movl	$128, 404(%rax)	#, cfun.324_78->preferred_stack_boundary
.L478:
	.loc 1 2568 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE23:
	.size	ix86_va_start, .-ix86_va_start
	.globl	ix86_va_arg
	.type	ix86_va_arg, @function
ix86_va_arg:
.LFB24:
	.loc 1 2574 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$272, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -264(%rbp)	# valist, valist
	movq	%rsi, -272(%rbp)	# type, type
	.loc 1 2579 0
	movq	$0, -208(%rbp)	#, lab_over
	.loc 1 2584 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.325
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	jne	.L488	#,
	.loc 1 2586 0
	movq	-272(%rbp), %rdx	# type, tmp238
	movq	-264(%rbp), %rax	# valist, tmp239
	movq	%rdx, %rsi	# tmp238,
	movq	%rax, %rdi	# tmp239,
	call	std_expand_builtin_va_arg	#
	jmp	.L489	#
.L488:
	.loc 1 2589 0
	movq	global_trees+248(%rip), %rax	# global_trees, D.29783
	movq	8(%rax), %rax	# _39->common.type, D.29783
	movq	24(%rax), %rax	# _40->type.values, tmp240
	movq	%rax, -168(%rbp)	# tmp240, f_gpr
	.loc 1 2590 0
	movq	-168(%rbp), %rax	# f_gpr, tmp241
	movq	(%rax), %rax	# f_gpr_41->common.chain, tmp242
	movq	%rax, -160(%rbp)	# tmp242, f_fpr
	.loc 1 2591 0
	movq	-160(%rbp), %rax	# f_fpr, tmp243
	movq	(%rax), %rax	# f_fpr_42->common.chain, tmp244
	movq	%rax, -152(%rbp)	# tmp244, f_ovf
	.loc 1 2592 0
	movq	-152(%rbp), %rax	# f_ovf, tmp245
	movq	(%rax), %rax	# f_ovf_43->common.chain, tmp246
	movq	%rax, -144(%rbp)	# tmp246, f_sav
	.loc 1 2594 0
	movq	-264(%rbp), %rax	# valist, tmp247
	movq	8(%rax), %rax	# valist_36(D)->common.type, D.29783
	movq	8(%rax), %rax	# _45->common.type, D.29783
	movq	-264(%rbp), %rdx	# valist, tmp248
	movq	%rax, %rsi	# D.29783,
	movl	$41, %edi	#,
	call	build1	#
	movq	%rax, -264(%rbp)	# tmp249, valist
	.loc 1 2595 0
	movq	-168(%rbp), %rax	# f_gpr, tmp250
	movq	8(%rax), %rax	# f_gpr_41->common.type, D.29783
	movq	-168(%rbp), %rcx	# f_gpr, tmp251
	movq	-264(%rbp), %rdx	# valist, tmp252
	movq	%rax, %rsi	# D.29783,
	movl	$39, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -136(%rbp)	# tmp253, gpr
	.loc 1 2596 0
	movq	-160(%rbp), %rax	# f_fpr, tmp254
	movq	8(%rax), %rax	# f_fpr_42->common.type, D.29783
	movq	-160(%rbp), %rcx	# f_fpr, tmp255
	movq	-264(%rbp), %rdx	# valist, tmp256
	movq	%rax, %rsi	# D.29783,
	movl	$39, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -128(%rbp)	# tmp257, fpr
	.loc 1 2597 0
	movq	-152(%rbp), %rax	# f_ovf, tmp258
	movq	8(%rax), %rax	# f_ovf_43->common.type, D.29783
	movq	-152(%rbp), %rcx	# f_ovf, tmp259
	movq	-264(%rbp), %rdx	# valist, tmp260
	movq	%rax, %rsi	# D.29783,
	movl	$39, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -120(%rbp)	# tmp261, ovf
	.loc 1 2598 0
	movq	-144(%rbp), %rax	# f_sav, tmp262
	movq	8(%rax), %rax	# f_sav_44->common.type, D.29783
	movq	-144(%rbp), %rcx	# f_sav, tmp263
	movq	-264(%rbp), %rdx	# valist, tmp264
	movq	%rax, %rsi	# D.29783,
	movl	$39, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -112(%rbp)	# tmp265, sav
	.loc 1 2600 0
	movq	-272(%rbp), %rax	# type, tmp266
	movq	%rax, %rdi	# tmp266,
	call	int_size_in_bytes	#
	movl	%eax, -228(%rbp)	# D.29784, size
	.loc 1 2601 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.327
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L490	#,
	.loc 1 2601 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.326
	jmp	.L491	#
.L490:
	.loc 1 2601 0 discriminator 2
	movl	$4, %eax	#, iftmp.326
.L491:
	.loc 1 2601 0 discriminator 3
	movl	-228(%rbp), %edx	# size, tmp267
	addl	%edx, %eax	# tmp267, D.29782
	subl	$1, %eax	#, D.29782
	movl	target_flags(%rip), %edx	# target_flags, target_flags.329
	andl	$33554432, %edx	#, D.29782
	testl	%edx, %edx	# D.29782
	je	.L492	#,
	.loc 1 2601 0 discriminator 1
	movl	$8, %ebx	#, iftmp.328
	jmp	.L493	#
.L492:
	.loc 1 2601 0 discriminator 2
	movl	$4, %ebx	#, iftmp.328
.L493:
	.loc 1 2601 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.328
	movl	%eax, -224(%rbp)	# tmp268, rsize
	.loc 1 2604 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.331
	andl	$33554432, %eax	#, D.29782
	.loc 1 2603 0 discriminator 3
	testl	%eax, %eax	# D.29782
	je	.L494	#,
	.loc 1 2603 0 is_stmt 0 discriminator 1
	movl	$8, %edx	#, iftmp.330
	jmp	.L495	#
.L494:
	.loc 1 2603 0 discriminator 2
	movl	$0, %edx	#, iftmp.330
.L495:
	.loc 1 2604 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.333
	andl	$33554432, %eax	#, D.29782
	.loc 1 2603 0 discriminator 3
	testl	%eax, %eax	# D.29782
	je	.L496	#,
	.loc 1 2603 0 is_stmt 0 discriminator 4
	movl	$6, %eax	#, iftmp.332
	jmp	.L497	#
.L496:
	.loc 1 2603 0 discriminator 5
	movl	$3, %eax	#, iftmp.332
.L497:
	.loc 1 2603 0 discriminator 6
	movq	-272(%rbp), %rcx	# type, tmp270
	movzbl	61(%rcx), %ecx	# *type_37(D), tmp273
	shrb	%cl	# D.29785
	movzbl	%cl, %edi	# D.29785, D.29786
	movq	-272(%rbp), %rsi	# type, tmp274
	movl	$0, (%rsp)	#,
	movl	$intreg.15043, %r9d	#,
	movl	%edx, %r8d	# iftmp.330,
	movl	%eax, %ecx	# iftmp.332,
	movl	$0, %edx	#,
	call	construct_container	#
	movq	%rax, -104(%rbp)	# tmp275, container
	.loc 1 2609 0 is_stmt 1 discriminator 6
	movl	target_flags(%rip), %eax	# target_flags, target_flags.335
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L498	#,
	.loc 1 2609 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.334
	jmp	.L499	#
.L498:
	.loc 1 2609 0 discriminator 2
	movl	$4, %eax	#, iftmp.334
.L499:
	.loc 1 2609 0 discriminator 3
	movl	%eax, %edi	# iftmp.334,
	call	gen_reg_rtx	#
	movq	%rax, -200(%rbp)	# tmp276, addr_rtx
	.loc 1 2611 0 is_stmt 1 discriminator 3
	cmpq	$0, -104(%rbp)	#, container
	je	.L500	#,
.LBB21:
	.loc 1 2617 0
	call	gen_label_rtx	#
	movq	%rax, -208(%rbp)	# tmp277, lab_over
	.loc 1 2618 0
	call	gen_label_rtx	#
	movq	%rax, -96(%rbp)	# tmp278, lab_false
	.loc 1 2620 0
	movq	-272(%rbp), %rax	# type, tmp279
	movzbl	61(%rax), %eax	# *type_37(D), tmp282
	shrb	%al	# D.29785
	movzbl	%al, %eax	# D.29785, D.29786
	leaq	-252(%rbp), %rcx	#, tmp283
	leaq	-256(%rbp), %rdx	#, tmp284
	movq	-272(%rbp), %rsi	# type, tmp285
	movq	%rcx, %r8	# tmp283,
	movq	%rdx, %rcx	# tmp284,
	movl	$0, %edx	#,
	movl	%eax, %edi	# D.29786,
	call	examine_argument	#
	.loc 1 2624 0
	movl	-256(%rbp), %eax	# needed_intregs, needed_intregs.337
	.loc 1 2625 0
	testl	%eax, %eax	# needed_intregs.337
	je	.L501	#,
	.loc 1 2624 0
	movq	-272(%rbp), %rax	# type, tmp286
	movl	64(%rax), %eax	# type_37(D)->type.align, D.29787
	cmpl	$64, %eax	#, D.29787
	ja	.L502	#,
.L501:
	.loc 1 2625 0 discriminator 1
	movq	-272(%rbp), %rax	# type, tmp287
	movl	64(%rax), %eax	# type_37(D)->type.align, D.29787
	cmpl	$128, %eax	#, D.29787
	jbe	.L503	#,
.L502:
	.loc 1 2625 0 is_stmt 0 discriminator 2
	movl	$1, %eax	#, iftmp.336
	jmp	.L504	#
.L503:
	.loc 1 2625 0 discriminator 3
	movl	$0, %eax	#, iftmp.336
.L504:
	.loc 1 2624 0 is_stmt 1
	movl	%eax, -248(%rbp)	# iftmp.336, need_temp
	.loc 1 2629 0
	cmpl	$0, -248(%rbp)	#, need_temp
	jne	.L505	#,
	.loc 1 2629 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# container, tmp288
	movzwl	(%rax), %eax	# container_79->code, D.29788
	cmpw	$61, %ax	#, D.29788
	je	.L505	#,
	.loc 1 2632 0 is_stmt 1
	movq	-104(%rbp), %rax	# container, tmp289
	movq	8(%rax), %rax	# container_79->fld[0].rtvec, D.29789
	movq	8(%rax), %rax	# _96->elem, D.29790
	movq	8(%rax), %rax	# _97->fld[0].rtx, D.29790
	movl	8(%rax), %eax	# _98->fld[0].rtuint, D.29787
	cmpl	$20, %eax	#, D.29787
	jbe	.L506	#,
	.loc 1 2632 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# container, tmp290
	movq	8(%rax), %rax	# container_79->fld[0].rtvec, D.29789
	movq	8(%rax), %rax	# _100->elem, D.29790
	movq	8(%rax), %rax	# _101->fld[0].rtx, D.29790
	movl	8(%rax), %eax	# _102->fld[0].rtuint, D.29787
	cmpl	$28, %eax	#, D.29787
	jbe	.L507	#,
.L506:
	.loc 1 2632 0 discriminator 2
	movq	-104(%rbp), %rax	# container, tmp291
	movq	8(%rax), %rax	# container_79->fld[0].rtvec, D.29789
	movq	8(%rax), %rax	# _104->elem, D.29790
	movq	8(%rax), %rax	# _105->fld[0].rtx, D.29790
	movl	8(%rax), %eax	# _106->fld[0].rtuint, D.29787
	cmpl	$44, %eax	#, D.29787
	jbe	.L508	#,
	.loc 1 2632 0 discriminator 1
	movq	-104(%rbp), %rax	# container, tmp292
	movq	8(%rax), %rax	# container_79->fld[0].rtvec, D.29789
	movq	8(%rax), %rax	# _108->elem, D.29790
	movq	8(%rax), %rax	# _109->fld[0].rtx, D.29790
	movl	8(%rax), %eax	# _110->fld[0].rtuint, D.29787
	cmpl	$52, %eax	#, D.29787
	ja	.L508	#,
.L507:
.LBB22:
	.loc 1 2636 0 is_stmt 1
	movl	$0, -244(%rbp)	#, i
	jmp	.L509	#
.L513:
.LBB23:
	.loc 1 2638 0
	movq	-104(%rbp), %rax	# container, tmp293
	movq	8(%rax), %rax	# container_79->fld[0].rtvec, D.29789
	movl	-244(%rbp), %edx	# i, tmp295
	movslq	%edx, %rdx	# tmp295, tmp294
	movq	8(%rax,%rdx,8), %rax	# _129->elem, tmp296
	movq	%rax, -80(%rbp)	# tmp296, slot
	.loc 1 2639 0
	movq	-80(%rbp), %rax	# slot, tmp297
	movq	8(%rax), %rax	# slot_130->fld[0].rtx, D.29790
	movl	8(%rax), %eax	# _131->fld[0].rtuint, D.29787
	movl	-244(%rbp), %edx	# i, i.338
	addl	$21, %edx	#, D.29787
	cmpl	%edx, %eax	# D.29787, D.29787
	jne	.L510	#,
	.loc 1 2640 0
	movq	-80(%rbp), %rax	# slot, tmp298
	movq	16(%rax), %rax	# slot_130->fld[1].rtx, D.29790
	movq	8(%rax), %rdx	# _135->fld[0].rtwint, D.29784
	movl	-244(%rbp), %eax	# i, tmp299
	sall	$4, %eax	#, D.29782
	cltq
	cmpq	%rax, %rdx	# D.29784, D.29784
	je	.L511	#,
.L510:
	.loc 1 2641 0
	movl	$1, -248(%rbp)	#, need_temp
.L511:
.LBE23:
	.loc 1 2636 0
	addl	$1, -244(%rbp)	#, i
.L509:
	.loc 1 2636 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# container, tmp300
	movq	8(%rax), %rax	# container_79->fld[0].rtvec, D.29789
	movl	(%rax), %eax	# _127->num_elem, D.29782
	cmpl	-244(%rbp), %eax	# i, D.29782
	jle	.L512	#,
	.loc 1 2636 0 discriminator 2
	cmpl	$0, -248(%rbp)	#, need_temp
	je	.L513	#,
.L512:
.LBE22:
	.loc 1 2633 0 is_stmt 1
	jmp	.L505	#
.L508:
.LBB24:
	.loc 1 2648 0
	movl	$0, -240(%rbp)	#, i
	jmp	.L514	#
.L517:
.LBB25:
	.loc 1 2650 0
	movq	-104(%rbp), %rax	# container, tmp301
	movq	8(%rax), %rax	# container_79->fld[0].rtvec, D.29789
	movl	-240(%rbp), %edx	# i, tmp303
	movslq	%edx, %rdx	# tmp303, tmp302
	movq	8(%rax,%rdx,8), %rax	# _115->elem, tmp304
	movq	%rax, -88(%rbp)	# tmp304, slot
	.loc 1 2651 0
	movq	-88(%rbp), %rax	# slot, tmp305
	movq	8(%rax), %rax	# slot_116->fld[0].rtx, D.29790
	movl	8(%rax), %edx	# _117->fld[0].rtuint, D.29787
	movl	-240(%rbp), %eax	# i, i.339
	cmpl	%eax, %edx	# i.339, D.29787
	jne	.L515	#,
	.loc 1 2652 0
	movq	-88(%rbp), %rax	# slot, tmp306
	movq	16(%rax), %rax	# slot_116->fld[1].rtx, D.29790
	movq	8(%rax), %rdx	# _120->fld[0].rtwint, D.29784
	movl	-240(%rbp), %eax	# i, tmp307
	sall	$3, %eax	#, D.29782
	cltq
	cmpq	%rax, %rdx	# D.29784, D.29784
	je	.L516	#,
.L515:
	.loc 1 2653 0
	movl	$1, -248(%rbp)	#, need_temp
.L516:
.LBE25:
	.loc 1 2648 0
	addl	$1, -240(%rbp)	#, i
.L514:
	.loc 1 2648 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# container, tmp308
	movq	8(%rax), %rax	# container_79->fld[0].rtvec, D.29789
	movl	(%rax), %eax	# _113->num_elem, D.29782
	cmpl	-240(%rbp), %eax	# i, D.29782
	jle	.L505	#,
	.loc 1 2648 0 discriminator 2
	cmpl	$0, -248(%rbp)	#, need_temp
	je	.L517	#,
.L505:
.LBE24:
	.loc 1 2657 0 is_stmt 1
	cmpl	$0, -248(%rbp)	#, need_temp
	jne	.L518	#,
	.loc 1 2659 0
	movq	-200(%rbp), %rax	# addr_rtx, tmp309
	movq	%rax, -192(%rbp)	# tmp309, int_addr_rtx
	.loc 1 2660 0
	movq	-200(%rbp), %rax	# addr_rtx, tmp310
	movq	%rax, -184(%rbp)	# tmp310, sse_addr_rtx
	jmp	.L519	#
.L518:
	.loc 1 2664 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.341
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L520	#,
	.loc 1 2664 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.340
	jmp	.L521	#
.L520:
	.loc 1 2664 0 discriminator 2
	movl	$4, %eax	#, iftmp.340
.L521:
	.loc 1 2664 0 discriminator 3
	movl	%eax, %edi	# iftmp.340,
	call	gen_reg_rtx	#
	movq	%rax, -192(%rbp)	# tmp311, int_addr_rtx
	.loc 1 2665 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.343
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L522	#,
	.loc 1 2665 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.342
	jmp	.L523	#
.L522:
	.loc 1 2665 0 discriminator 2
	movl	$4, %eax	#, iftmp.342
.L523:
	.loc 1 2665 0 discriminator 3
	movl	%eax, %edi	# iftmp.342,
	call	gen_reg_rtx	#
	movq	%rax, -184(%rbp)	# tmp312, sse_addr_rtx
.L519:
	.loc 1 2668 0 is_stmt 1
	movl	-256(%rbp), %eax	# needed_intregs, needed_intregs.344
	testl	%eax, %eax	# needed_intregs.344
	je	.L524	#,
	.loc 1 2670 0
	movq	const_int_rtx+520(%rip), %r12	# const_int_rtx, D.29790
	.loc 1 2672 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.346
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L525	#,
	.loc 1 2672 0 is_stmt 0 discriminator 1
	movl	$6, %eax	#, iftmp.345
	jmp	.L526	#
.L525:
	.loc 1 2672 0 discriminator 2
	movl	$3, %eax	#, iftmp.345
.L526:
	.loc 1 2672 0 discriminator 3
	movl	-256(%rbp), %edx	# needed_intregs, needed_intregs.347
	subl	%edx, %eax	# needed_intregs.347, D.29782
	addl	$1, %eax	#, D.29782
	sall	$3, %eax	#, D.29782
	.loc 1 2670 0 is_stmt 1 discriminator 3
	cltq
	movq	%rax, %rsi	# D.29784,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.29790
	movq	-136(%rbp), %rax	# gpr, tmp313
	movl	$0, %ecx	#,
	movl	$4, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp313,
	call	expand_expr	#
	movq	-96(%rbp), %rdx	# lab_false, tmp314
	movq	%rdx, (%rsp)	# tmp314,
	movl	$1, %r9d	#,
	movl	$4, %r8d	#,
	movq	%r12, %rcx	# D.29790,
	movl	$104, %edx	#,
	movq	%rbx, %rsi	# D.29790,
	movq	%rax, %rdi	# D.29790,
	call	emit_cmp_and_jump_insns	#
.L524:
	.loc 1 2676 0
	movl	-252(%rbp), %eax	# needed_sseregs, needed_sseregs.348
	testl	%eax, %eax	# needed_sseregs.348
	je	.L527	#,
	.loc 1 2678 0
	movq	const_int_rtx+520(%rip), %r12	# const_int_rtx, D.29790
	.loc 1 2680 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.350
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L528	#,
	.loc 1 2680 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.349
	jmp	.L529	#
.L528:
	.loc 1 2680 0 discriminator 2
	movl	$0, %eax	#, iftmp.349
.L529:
	.loc 1 2680 0 discriminator 3
	movl	-252(%rbp), %edx	# needed_sseregs, needed_sseregs.351
	subl	%edx, %eax	# needed_sseregs.351, D.29782
	addl	$1, %eax	#, D.29782
	sall	$4, %eax	#, D.29782
	movl	%eax, %edx	# D.29782, D.29782
	movl	target_flags(%rip), %eax	# target_flags, target_flags.353
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L530	#,
	.loc 1 2680 0 discriminator 1
	movl	$48, %eax	#, iftmp.352
	jmp	.L531	#
.L530:
	.loc 1 2680 0 discriminator 2
	movl	$24, %eax	#, iftmp.352
.L531:
	.loc 1 2680 0 discriminator 3
	addl	%edx, %eax	# D.29782, D.29782
	.loc 1 2678 0 is_stmt 1 discriminator 3
	cltq
	movq	%rax, %rsi	# D.29784,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.29790
	movq	-128(%rbp), %rax	# fpr, tmp315
	movl	$0, %ecx	#,
	movl	$4, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp315,
	call	expand_expr	#
	movq	-96(%rbp), %rdx	# lab_false, tmp316
	movq	%rdx, (%rsp)	# tmp316,
	movl	$1, %r9d	#,
	movl	$4, %r8d	#,
	movq	%r12, %rcx	# D.29790,
	movl	$104, %edx	#,
	movq	%rbx, %rsi	# D.29790,
	movq	%rax, %rdi	# D.29790,
	call	emit_cmp_and_jump_insns	#
.L527:
	.loc 1 2687 0
	movl	-256(%rbp), %eax	# needed_intregs, needed_intregs.354
	testl	%eax, %eax	# needed_intregs.354
	je	.L532	#,
	.loc 1 2689 0
	movq	global_trees+224(%rip), %rax	# global_trees, D.29783
	movq	-136(%rbp), %rcx	# gpr, tmp317
	movq	-112(%rbp), %rdx	# sav, tmp318
	movq	%rax, %rsi	# D.29783,
	movl	$59, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -216(%rbp)	# tmp319, t
	.loc 1 2690 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.356
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L533	#,
	.loc 1 2690 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.355
	jmp	.L534	#
.L533:
	.loc 1 2690 0 discriminator 2
	movl	$4, %eax	#, iftmp.355
.L534:
	.loc 1 2690 0 discriminator 3
	movq	-192(%rbp), %rsi	# int_addr_rtx, tmp320
	movq	-216(%rbp), %rdi	# t, tmp321
	movl	$0, %ecx	#,
	movl	%eax, %edx	# iftmp.355,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp322, r
	.loc 1 2691 0 is_stmt 1 discriminator 3
	movq	-72(%rbp), %rax	# r, tmp323
	cmpq	-192(%rbp), %rax	# int_addr_rtx, tmp323
	je	.L532	#,
	.loc 1 2692 0
	movq	-72(%rbp), %rdx	# r, tmp324
	movq	-192(%rbp), %rax	# int_addr_rtx, tmp325
	movq	%rdx, %rsi	# tmp324,
	movq	%rax, %rdi	# tmp325,
	call	emit_move_insn	#
.L532:
	.loc 1 2694 0
	movl	-252(%rbp), %eax	# needed_sseregs, needed_sseregs.357
	testl	%eax, %eax	# needed_sseregs.357
	je	.L535	#,
	.loc 1 2696 0
	movq	global_trees+224(%rip), %rax	# global_trees, D.29783
	movq	-128(%rbp), %rcx	# fpr, tmp326
	movq	-112(%rbp), %rdx	# sav, tmp327
	movq	%rax, %rsi	# D.29783,
	movl	$59, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -216(%rbp)	# tmp328, t
	.loc 1 2697 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.359
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L536	#,
	.loc 1 2697 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.358
	jmp	.L537	#
.L536:
	.loc 1 2697 0 discriminator 2
	movl	$4, %eax	#, iftmp.358
.L537:
	.loc 1 2697 0 discriminator 3
	movq	-184(%rbp), %rsi	# sse_addr_rtx, tmp329
	movq	-216(%rbp), %rdi	# t, tmp330
	movl	$0, %ecx	#,
	movl	%eax, %edx	# iftmp.358,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp331, r
	.loc 1 2698 0 is_stmt 1 discriminator 3
	movq	-72(%rbp), %rax	# r, tmp332
	cmpq	-184(%rbp), %rax	# sse_addr_rtx, tmp332
	je	.L535	#,
	.loc 1 2699 0
	movq	-72(%rbp), %rdx	# r, tmp333
	movq	-184(%rbp), %rax	# sse_addr_rtx, tmp334
	movq	%rdx, %rsi	# tmp333,
	movq	%rax, %rdi	# tmp334,
	call	emit_move_insn	#
.L535:
	.loc 1 2701 0
	cmpl	$0, -248(%rbp)	#, need_temp
	je	.L538	#,
.LBB26:
	.loc 1 2707 0
	movq	-272(%rbp), %rax	# type, tmp335
	movl	$0, %ecx	#,
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp335,
	call	assign_temp	#
	movq	8(%rax), %rax	# _200->fld[0].rtx, tmp336
	movq	%rax, -200(%rbp)	# tmp336, addr_rtx
	.loc 1 2708 0
	movq	-200(%rbp), %rax	# addr_rtx, tmp337
	movq	%rax, %rsi	# tmp337,
	movl	$51, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -64(%rbp)	# tmp338, mem
	.loc 1 2709 0
	call	get_varargs_alias_set	#
	movq	%rax, %rdx	#, D.29784
	movq	-64(%rbp), %rax	# mem, tmp339
	movq	%rdx, %rsi	# D.29784,
	movq	%rax, %rdi	# tmp339,
	call	set_mem_alias_set	#
	.loc 1 2710 0
	movq	-64(%rbp), %rax	# mem, tmp340
	movl	$8, %esi	#,
	movq	%rax, %rdi	# tmp340,
	call	set_mem_align	#
	.loc 1 2712 0
	movl	$0, -236(%rbp)	#, i
	jmp	.L539	#
.L544:
.LBB27:
	.loc 1 2714 0
	movq	-104(%rbp), %rax	# container, tmp341
	movq	8(%rax), %rax	# container_79->fld[0].rtvec, D.29789
	movl	-236(%rbp), %edx	# i, tmp343
	movslq	%edx, %rdx	# tmp343, tmp342
	movq	8(%rax,%rdx,8), %rax	# _207->elem, tmp344
	movq	%rax, -56(%rbp)	# tmp344, slot
	.loc 1 2715 0
	movq	-56(%rbp), %rax	# slot, tmp345
	movq	8(%rax), %rax	# slot_208->fld[0].rtx, tmp346
	movq	%rax, -48(%rbp)	# tmp346, reg
	.loc 1 2716 0
	movq	-48(%rbp), %rax	# reg, tmp347
	movzbl	2(%rax), %eax	# reg_209->mode, D.29791
	movzbl	%al, %eax	# D.29791, tmp348
	movl	%eax, -220(%rbp)	# tmp348, mode
	.loc 1 2722 0
	movq	-48(%rbp), %rax	# reg, tmp349
	movl	8(%rax), %eax	# reg_209->fld[0].rtuint, D.29787
	cmpl	$20, %eax	#, D.29787
	jbe	.L540	#,
	.loc 1 2722 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# reg, tmp350
	movl	8(%rax), %eax	# reg_209->fld[0].rtuint, D.29787
	cmpl	$28, %eax	#, D.29787
	jbe	.L541	#,
.L540:
	.loc 1 2722 0 discriminator 2
	movq	-48(%rbp), %rax	# reg, tmp351
	movl	8(%rax), %eax	# reg_209->fld[0].rtuint, D.29787
	cmpl	$44, %eax	#, D.29787
	jbe	.L542	#,
	.loc 1 2722 0 discriminator 1
	movq	-48(%rbp), %rax	# reg, tmp352
	movl	8(%rax), %eax	# reg_209->fld[0].rtuint, D.29787
	cmpl	$52, %eax	#, D.29787
	ja	.L542	#,
.L541:
	.loc 1 2724 0 is_stmt 1
	movq	-184(%rbp), %rax	# sse_addr_rtx, tmp353
	movq	%rax, -176(%rbp)	# tmp353, src_addr
	.loc 1 2725 0
	movq	-48(%rbp), %rax	# reg, tmp354
	movl	8(%rax), %eax	# reg_209->fld[0].rtuint, D.29787
	addl	$268435435, %eax	#, D.29787
	sall	$4, %eax	#, D.29787
	movl	%eax, -232(%rbp)	# D.29787, src_offset
	jmp	.L543	#
.L542:
	.loc 1 2729 0
	movq	-192(%rbp), %rax	# int_addr_rtx, tmp355
	movq	%rax, -176(%rbp)	# tmp355, src_addr
	.loc 1 2730 0
	movq	-48(%rbp), %rax	# reg, tmp356
	movl	8(%rax), %eax	# reg_209->fld[0].rtuint, D.29787
	sall	$3, %eax	#, D.29787
	movl	%eax, -232(%rbp)	# D.29787, src_offset
.L543:
	.loc 1 2732 0
	movq	-176(%rbp), %rdx	# src_addr, tmp357
	movl	-220(%rbp), %eax	# mode, tmp358
	movq	%rdx, %rsi	# tmp357,
	movl	%eax, %edi	# tmp358,
	call	gen_rtx_MEM	#
	movq	%rax, -40(%rbp)	# tmp359, src_mem
	.loc 1 2733 0
	call	get_varargs_alias_set	#
	movq	%rax, %rdx	#, D.29784
	movq	-40(%rbp), %rax	# src_mem, tmp360
	movq	%rdx, %rsi	# D.29784,
	movq	%rax, %rdi	# tmp360,
	call	set_mem_alias_set	#
	.loc 1 2734 0
	movl	-232(%rbp), %eax	# src_offset, tmp361
	movslq	%eax, %rdx	# tmp361, D.29784
	movl	-220(%rbp), %esi	# mode, tmp362
	movq	-40(%rbp), %rax	# src_mem, tmp363
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp363,
	call	adjust_address_1	#
	movq	%rax, -40(%rbp)	# tmp364, src_mem
	.loc 1 2735 0
	movq	-56(%rbp), %rax	# slot, tmp365
	movq	16(%rax), %rax	# slot_208->fld[1].rtx, D.29790
	movq	8(%rax), %rdx	# _229->fld[0].rtwint, D.29784
	movl	-220(%rbp), %esi	# mode, tmp366
	movq	-64(%rbp), %rax	# mem, tmp367
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp367,
	call	adjust_address_1	#
	movq	%rax, -32(%rbp)	# tmp368, dest_mem
	.loc 1 2736 0
	movq	-40(%rbp), %rdx	# src_mem, tmp369
	movq	-32(%rbp), %rax	# dest_mem, tmp370
	movq	%rdx, %rsi	# tmp369,
	movq	%rax, %rdi	# tmp370,
	call	emit_move_insn	#
.LBE27:
	.loc 1 2712 0
	addl	$1, -236(%rbp)	#, i
.L539:
	.loc 1 2712 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# container, tmp371
	movq	8(%rax), %rax	# container_79->fld[0].rtvec, D.29789
	movl	(%rax), %eax	# _205->num_elem, D.29782
	cmpl	-236(%rbp), %eax	# i, D.29782
	jg	.L544	#,
.L538:
.LBE26:
	.loc 1 2740 0 is_stmt 1
	movl	-256(%rbp), %eax	# needed_intregs, needed_intregs.360
	testl	%eax, %eax	# needed_intregs.360
	je	.L545	#,
	.loc 1 2744 0
	movl	-256(%rbp), %eax	# needed_intregs, needed_intregs.361
	sall	$3, %eax	#, D.29782
	.loc 1 2743 0
	cltq
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.29792,
	call	build_int_2_wide	#
	movq	%rax, %rcx	#, D.29783
	movq	-136(%rbp), %rax	# gpr, tmp372
	movq	8(%rax), %rax	# gpr_49->common.type, D.29783
	.loc 1 2742 0
	movq	-136(%rbp), %rdx	# gpr, tmp373
	movq	%rax, %rsi	# D.29783,
	movl	$59, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -216(%rbp)	# tmp374, t
	.loc 1 2745 0
	movq	-136(%rbp), %rax	# gpr, tmp375
	movq	8(%rax), %rax	# gpr_49->common.type, D.29783
	movq	-216(%rbp), %rcx	# t, tmp376
	movq	-136(%rbp), %rdx	# gpr, tmp377
	movq	%rax, %rsi	# D.29783,
	movl	$48, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -216(%rbp)	# tmp378, t
	.loc 1 2746 0
	movq	-216(%rbp), %rax	# t, tmp379
	movzbl	17(%rax), %edx	#, tmp382
	orl	$1, %edx	#, tmp383
	movb	%dl, 17(%rax)	# tmp383,
	.loc 1 2747 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.29790
	movq	-216(%rbp), %rax	# t, tmp384
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp384,
	call	expand_expr	#
.L545:
	.loc 1 2749 0
	movl	-252(%rbp), %eax	# needed_sseregs, needed_sseregs.362
	testl	%eax, %eax	# needed_sseregs.362
	je	.L546	#,
	.loc 1 2753 0
	movl	-252(%rbp), %eax	# needed_sseregs, needed_sseregs.363
	sall	$4, %eax	#, D.29782
	.loc 1 2752 0
	cltq
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.29792,
	call	build_int_2_wide	#
	movq	%rax, %rcx	#, D.29783
	movq	-128(%rbp), %rax	# fpr, tmp385
	movq	8(%rax), %rax	# fpr_51->common.type, D.29783
	.loc 1 2751 0
	movq	-128(%rbp), %rdx	# fpr, tmp386
	movq	%rax, %rsi	# D.29783,
	movl	$59, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -216(%rbp)	# tmp387, t
	.loc 1 2754 0
	movq	-128(%rbp), %rax	# fpr, tmp388
	movq	8(%rax), %rax	# fpr_51->common.type, D.29783
	movq	-216(%rbp), %rcx	# t, tmp389
	movq	-128(%rbp), %rdx	# fpr, tmp390
	movq	%rax, %rsi	# D.29783,
	movl	$48, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -216(%rbp)	# tmp391, t
	.loc 1 2755 0
	movq	-216(%rbp), %rax	# t, tmp392
	movzbl	17(%rax), %edx	#, tmp395
	orl	$1, %edx	#, tmp396
	movb	%dl, 17(%rax)	# tmp396,
	.loc 1 2756 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.29790
	movq	-216(%rbp), %rax	# t, tmp397
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp397,
	call	expand_expr	#
.L546:
	.loc 1 2759 0
	movq	-208(%rbp), %rax	# lab_over, tmp398
	movq	%rax, %rdi	# tmp398,
	call	gen_jump	#
	movq	%rax, %rdi	# D.29790,
	call	emit_jump_insn	#
	.loc 1 2760 0
	call	emit_barrier	#
	.loc 1 2761 0
	movq	-96(%rbp), %rax	# lab_false, tmp399
	movq	%rax, %rdi	# tmp399,
	call	emit_label	#
.L500:
.LBE21:
	.loc 1 2767 0
	movq	-272(%rbp), %rax	# type, tmp400
	movq	%rax, %rsi	# tmp400,
	movl	$0, %edi	#,
	call	ix86_function_arg_boundary	#
	cmpl	$64, %eax	#, D.29782
	jg	.L547	#,
	.loc 1 2768 0
	movq	-120(%rbp), %rax	# ovf, tmp401
	movq	%rax, -216(%rbp)	# tmp401, t
	jmp	.L548	#
.L547:
.LBB28:
	.loc 1 2771 0
	movq	-272(%rbp), %rax	# type, tmp402
	movq	%rax, %rsi	# tmp402,
	movl	$0, %edi	#,
	call	ix86_function_arg_boundary	#
	leal	7(%rax), %edx	#, tmp404
	testl	%eax, %eax	# tmp403
	cmovs	%edx, %eax	# tmp404,, tmp403
	sarl	$3, %eax	#, tmp405
	cltq
	movq	%rax, -24(%rbp)	# tmp406, align
	.loc 1 2772 0
	movq	-24(%rbp), %rax	# align, tmp407
	subq	$1, %rax	#, D.29784
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.29792,
	call	build_int_2_wide	#
	movq	%rax, %rcx	#, D.29783
	movq	-120(%rbp), %rax	# ovf, tmp408
	movq	8(%rax), %rax	# ovf_53->common.type, D.29783
	movq	-120(%rbp), %rdx	# ovf, tmp409
	movq	%rax, %rsi	# D.29783,
	movl	$59, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -216(%rbp)	# tmp410, t
	.loc 1 2773 0
	movq	-24(%rbp), %rax	# align, tmp411
	negq	%rax	# D.29784
	movq	$-1, %rsi	#,
	movq	%rax, %rdi	# D.29792,
	call	build_int_2_wide	#
	movq	%rax, %rcx	#, D.29783
	movq	-216(%rbp), %rax	# t, tmp412
	movq	8(%rax), %rax	# t_263->common.type, D.29783
	movq	-216(%rbp), %rdx	# t, tmp413
	movq	%rax, %rsi	# D.29783,
	movl	$88, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -216(%rbp)	# tmp414, t
.L548:
.LBE28:
	.loc 1 2775 0
	movq	-216(%rbp), %rax	# t, tmp415
	movq	%rax, %rdi	# tmp415,
	call	save_expr	#
	movq	%rax, -216(%rbp)	# tmp416, t
	.loc 1 2777 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.365
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L549	#,
	.loc 1 2777 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.364
	jmp	.L550	#
.L549:
	.loc 1 2777 0 discriminator 2
	movl	$4, %eax	#, iftmp.364
.L550:
	.loc 1 2777 0 discriminator 3
	movq	-200(%rbp), %rsi	# addr_rtx, tmp417
	movq	-216(%rbp), %rdi	# t, tmp418
	movl	$0, %ecx	#,
	movl	%eax, %edx	# iftmp.364,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp419, r
	.loc 1 2778 0 is_stmt 1 discriminator 3
	movq	-72(%rbp), %rax	# r, tmp420
	cmpq	-200(%rbp), %rax	# addr_rtx, tmp420
	je	.L551	#,
	.loc 1 2779 0
	movq	-72(%rbp), %rdx	# r, tmp421
	movq	-200(%rbp), %rax	# addr_rtx, tmp422
	movq	%rdx, %rsi	# tmp421,
	movq	%rax, %rdi	# tmp422,
	call	emit_move_insn	#
.L551:
	.loc 1 2783 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.367
	andl	$33554432, %eax	#, D.29782
	testl	%eax, %eax	# D.29782
	je	.L552	#,
	.loc 1 2783 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.366
	jmp	.L553	#
.L552:
	.loc 1 2783 0 discriminator 2
	movl	$4, %eax	#, iftmp.366
.L553:
	.loc 1 2783 0 discriminator 3
	imull	-224(%rbp), %eax	# rsize, D.29782
	.loc 1 2782 0 is_stmt 1 discriminator 3
	cltq
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.29792,
	call	build_int_2_wide	#
	movq	%rax, %rcx	#, D.29783
	movq	-216(%rbp), %rax	# t, tmp423
	movq	8(%rax), %rax	# t_269->common.type, D.29783
	.loc 1 2781 0 discriminator 3
	movq	-216(%rbp), %rdx	# t, tmp424
	movq	%rax, %rsi	# D.29783,
	movl	$59, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -216(%rbp)	# tmp425, t
	.loc 1 2784 0 discriminator 3
	movq	-120(%rbp), %rax	# ovf, tmp426
	movq	8(%rax), %rax	# ovf_53->common.type, D.29783
	movq	-216(%rbp), %rcx	# t, tmp427
	movq	-120(%rbp), %rdx	# ovf, tmp428
	movq	%rax, %rsi	# D.29783,
	movl	$48, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -216(%rbp)	# tmp429, t
	.loc 1 2785 0 discriminator 3
	movq	-216(%rbp), %rax	# t, tmp430
	movzbl	17(%rax), %edx	#, tmp433
	orl	$1, %edx	#, tmp434
	movb	%dl, 17(%rax)	# tmp434,
	.loc 1 2786 0 discriminator 3
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.29790
	movq	-216(%rbp), %rax	# t, tmp435
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp435,
	call	expand_expr	#
	.loc 1 2788 0 discriminator 3
	cmpq	$0, -104(%rbp)	#, container
	je	.L554	#,
	.loc 1 2789 0
	movq	-208(%rbp), %rax	# lab_over, tmp436
	movq	%rax, %rdi	# tmp436,
	call	emit_label	#
.L554:
	.loc 1 2791 0
	movq	-200(%rbp), %rax	# addr_rtx, D.29781
.L489:
	.loc 1 2792 0
	addq	$272, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE24:
	.size	ix86_va_arg, .-ix86_va_arg
	.globl	x86_64_general_operand
	.type	x86_64_general_operand, @function
x86_64_general_operand:
.LFB25:
	.loc 1 2800 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 2801 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.368
	andl	$33554432, %eax	#, D.29793
	testl	%eax, %eax	# D.29793
	jne	.L556	#,
	.loc 1 2802 0
	movl	-12(%rbp), %edx	# mode, tmp64
	movq	-8(%rbp), %rax	# op, tmp65
	movl	%edx, %esi	# tmp64,
	movq	%rax, %rdi	# tmp65,
	call	general_operand	#
	jmp	.L557	#
.L556:
	.loc 1 2803 0
	movl	-12(%rbp), %edx	# mode, tmp66
	movq	-8(%rbp), %rax	# op, tmp67
	movl	%edx, %esi	# tmp66,
	movq	%rax, %rdi	# tmp67,
	call	nonimmediate_operand	#
	testl	%eax, %eax	# D.29793
	je	.L558	#,
	.loc 1 2804 0
	movl	$1, %eax	#, D.29793
	jmp	.L557	#
.L558:
	.loc 1 2805 0
	movq	-8(%rbp), %rax	# op, tmp68
	movq	%rax, %rdi	# tmp68,
	call	x86_64_sign_extended_value	#
.L557:
	.loc 1 2806 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE25:
	.size	x86_64_general_operand, .-x86_64_general_operand
	.globl	x86_64_szext_general_operand
	.type	x86_64_szext_general_operand, @function
x86_64_szext_general_operand:
.LFB26:
	.loc 1 2815 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 2816 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.369
	andl	$33554432, %eax	#, D.29794
	testl	%eax, %eax	# D.29794
	jne	.L560	#,
	.loc 1 2817 0
	movl	-12(%rbp), %edx	# mode, tmp67
	movq	-8(%rbp), %rax	# op, tmp68
	movl	%edx, %esi	# tmp67,
	movq	%rax, %rdi	# tmp68,
	call	general_operand	#
	jmp	.L561	#
.L560:
	.loc 1 2818 0
	movl	-12(%rbp), %edx	# mode, tmp69
	movq	-8(%rbp), %rax	# op, tmp70
	movl	%edx, %esi	# tmp69,
	movq	%rax, %rdi	# tmp70,
	call	nonimmediate_operand	#
	testl	%eax, %eax	# D.29794
	je	.L562	#,
	.loc 1 2819 0
	movl	$1, %eax	#, D.29794
	jmp	.L561	#
.L562:
	.loc 1 2820 0
	movq	-8(%rbp), %rax	# op, tmp71
	movq	%rax, %rdi	# tmp71,
	call	x86_64_sign_extended_value	#
	testl	%eax, %eax	# D.29794
	jne	.L563	#,
	.loc 1 2820 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# op, tmp72
	movq	%rax, %rdi	# tmp72,
	call	x86_64_zero_extended_value	#
	testl	%eax, %eax	# D.29794
	je	.L564	#,
.L563:
	.loc 1 2820 0 discriminator 1
	movl	$1, %eax	#, iftmp.370
	jmp	.L565	#
.L564:
	.loc 1 2820 0 discriminator 3
	movl	$0, %eax	#, iftmp.370
.L565:
.L561:
	.loc 1 2821 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE26:
	.size	x86_64_szext_general_operand, .-x86_64_szext_general_operand
	.globl	x86_64_nonmemory_operand
	.type	x86_64_nonmemory_operand, @function
x86_64_nonmemory_operand:
.LFB27:
	.loc 1 2829 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 2830 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.371
	andl	$33554432, %eax	#, D.29795
	testl	%eax, %eax	# D.29795
	jne	.L567	#,
	.loc 1 2831 0
	movl	-12(%rbp), %edx	# mode, tmp64
	movq	-8(%rbp), %rax	# op, tmp65
	movl	%edx, %esi	# tmp64,
	movq	%rax, %rdi	# tmp65,
	call	nonmemory_operand	#
	jmp	.L568	#
.L567:
	.loc 1 2832 0
	movl	-12(%rbp), %edx	# mode, tmp66
	movq	-8(%rbp), %rax	# op, tmp67
	movl	%edx, %esi	# tmp66,
	movq	%rax, %rdi	# tmp67,
	call	register_operand	#
	testl	%eax, %eax	# D.29795
	je	.L569	#,
	.loc 1 2833 0
	movl	$1, %eax	#, D.29795
	jmp	.L568	#
.L569:
	.loc 1 2834 0
	movq	-8(%rbp), %rax	# op, tmp68
	movq	%rax, %rdi	# tmp68,
	call	x86_64_sign_extended_value	#
.L568:
	.loc 1 2835 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE27:
	.size	x86_64_nonmemory_operand, .-x86_64_nonmemory_operand
	.globl	x86_64_movabs_operand
	.type	x86_64_movabs_operand, @function
x86_64_movabs_operand:
.LFB28:
	.loc 1 2843 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 2844 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.372
	andl	$33554432, %eax	#, D.29796
	testl	%eax, %eax	# D.29796
	je	.L571	#,
	.loc 1 2844 0 is_stmt 0 discriminator 1
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.373
	testl	%eax, %eax	# flag_pic.373
	jne	.L572	#,
.L571:
	.loc 1 2845 0 is_stmt 1
	movl	-12(%rbp), %edx	# mode, tmp75
	movq	-8(%rbp), %rax	# op, tmp76
	movl	%edx, %esi	# tmp75,
	movq	%rax, %rdi	# tmp76,
	call	nonmemory_operand	#
	jmp	.L573	#
.L572:
	.loc 1 2846 0
	movl	-12(%rbp), %edx	# mode, tmp77
	movq	-8(%rbp), %rax	# op, tmp78
	movl	%edx, %esi	# tmp77,
	movq	%rax, %rdi	# tmp78,
	call	register_operand	#
	testl	%eax, %eax	# D.29796
	jne	.L574	#,
	.loc 1 2846 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# op, tmp79
	movq	%rax, %rdi	# tmp79,
	call	x86_64_sign_extended_value	#
	testl	%eax, %eax	# D.29796
	je	.L575	#,
.L574:
	.loc 1 2847 0 is_stmt 1
	movl	$1, %eax	#, D.29796
	jmp	.L573	#
.L575:
	.loc 1 2848 0
	movq	-8(%rbp), %rax	# op, tmp80
	movzwl	(%rax), %eax	# op_5(D)->code, D.29797
	cmpw	$67, %ax	#, D.29797
	je	.L576	#,
	.loc 1 2848 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# op, tmp81
	movzwl	(%rax), %eax	# op_5(D)->code, D.29797
	cmpw	$68, %ax	#, D.29797
	je	.L576	#,
	.loc 1 2848 0 discriminator 1
	movq	-8(%rbp), %rax	# op, tmp82
	movzwl	(%rax), %eax	# op_5(D)->code, D.29797
	cmpw	$54, %ax	#, D.29797
	je	.L576	#,
	movq	-8(%rbp), %rax	# op, tmp83
	movzwl	(%rax), %eax	# op_5(D)->code, D.29797
	cmpw	$55, %ax	#, D.29797
	je	.L576	#,
	movq	-8(%rbp), %rax	# op, tmp84
	movzwl	(%rax), %eax	# op_5(D)->code, D.29797
	cmpw	$58, %ax	#, D.29797
	je	.L576	#,
	movq	-8(%rbp), %rax	# op, tmp85
	movzwl	(%rax), %eax	# op_5(D)->code, D.29797
	cmpw	$134, %ax	#, D.29797
	je	.L576	#,
	movq	-8(%rbp), %rax	# op, tmp86
	movzwl	(%rax), %eax	# op_5(D)->code, D.29797
	cmpw	$56, %ax	#, D.29797
	je	.L576	#,
	movq	-8(%rbp), %rax	# op, tmp87
	movzwl	(%rax), %eax	# op_5(D)->code, D.29797
	cmpw	$140, %ax	#, D.29797
	jne	.L577	#,
.L576:
	movq	-8(%rbp), %rax	# op, tmp88
	movq	%rax, %rdi	# tmp88,
	call	symbolic_reference_mentioned_p	#
	testl	%eax, %eax	# D.29796
	jne	.L577	#,
	.loc 1 2849 0 is_stmt 1
	movl	$1, %eax	#, D.29796
	jmp	.L573	#
.L577:
	.loc 1 2850 0
	movl	$0, %eax	#, D.29796
.L573:
	.loc 1 2851 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE28:
	.size	x86_64_movabs_operand, .-x86_64_movabs_operand
	.globl	x86_64_szext_nonmemory_operand
	.type	x86_64_szext_nonmemory_operand, @function
x86_64_szext_nonmemory_operand:
.LFB29:
	.loc 1 2859 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 2860 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.374
	andl	$33554432, %eax	#, D.29798
	testl	%eax, %eax	# D.29798
	jne	.L579	#,
	.loc 1 2861 0
	movl	-12(%rbp), %edx	# mode, tmp67
	movq	-8(%rbp), %rax	# op, tmp68
	movl	%edx, %esi	# tmp67,
	movq	%rax, %rdi	# tmp68,
	call	nonmemory_operand	#
	jmp	.L580	#
.L579:
	.loc 1 2862 0
	movl	-12(%rbp), %edx	# mode, tmp69
	movq	-8(%rbp), %rax	# op, tmp70
	movl	%edx, %esi	# tmp69,
	movq	%rax, %rdi	# tmp70,
	call	register_operand	#
	testl	%eax, %eax	# D.29798
	je	.L581	#,
	.loc 1 2863 0
	movl	$1, %eax	#, D.29798
	jmp	.L580	#
.L581:
	.loc 1 2864 0
	movq	-8(%rbp), %rax	# op, tmp71
	movq	%rax, %rdi	# tmp71,
	call	x86_64_sign_extended_value	#
	testl	%eax, %eax	# D.29798
	jne	.L582	#,
	.loc 1 2864 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# op, tmp72
	movq	%rax, %rdi	# tmp72,
	call	x86_64_zero_extended_value	#
	testl	%eax, %eax	# D.29798
	je	.L583	#,
.L582:
	.loc 1 2864 0 discriminator 1
	movl	$1, %eax	#, iftmp.375
	jmp	.L584	#
.L583:
	.loc 1 2864 0 discriminator 3
	movl	$0, %eax	#, iftmp.375
.L584:
.L580:
	.loc 1 2865 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE29:
	.size	x86_64_szext_nonmemory_operand, .-x86_64_szext_nonmemory_operand
	.globl	x86_64_immediate_operand
	.type	x86_64_immediate_operand, @function
x86_64_immediate_operand:
.LFB30:
	.loc 1 2873 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 2874 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.376
	andl	$33554432, %eax	#, D.29799
	testl	%eax, %eax	# D.29799
	jne	.L586	#,
	.loc 1 2875 0
	movl	-12(%rbp), %edx	# mode, tmp63
	movq	-8(%rbp), %rax	# op, tmp64
	movl	%edx, %esi	# tmp63,
	movq	%rax, %rdi	# tmp64,
	call	immediate_operand	#
	jmp	.L587	#
.L586:
	.loc 1 2876 0
	movq	-8(%rbp), %rax	# op, tmp65
	movq	%rax, %rdi	# tmp65,
	call	x86_64_sign_extended_value	#
.L587:
	.loc 1 2877 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE30:
	.size	x86_64_immediate_operand, .-x86_64_immediate_operand
	.globl	x86_64_zext_immediate_operand
	.type	x86_64_zext_immediate_operand, @function
x86_64_zext_immediate_operand:
.LFB31:
	.loc 1 2885 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 2886 0
	movq	-8(%rbp), %rax	# op, tmp61
	movq	%rax, %rdi	# tmp61,
	call	x86_64_zero_extended_value	#
	.loc 1 2887 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE31:
	.size	x86_64_zext_immediate_operand, .-x86_64_zext_immediate_operand
	.globl	const_int_1_operand
	.type	const_int_1_operand, @function
const_int_1_operand:
.LFB32:
	.loc 1 2895 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 2896 0
	movq	-8(%rbp), %rax	# op, tmp64
	movzwl	(%rax), %eax	# op_2(D)->code, D.29801
	cmpw	$54, %ax	#, D.29801
	jne	.L591	#,
	.loc 1 2896 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# op, tmp65
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtwint, D.29802
	cmpq	$1, %rax	#, D.29802
	jne	.L591	#,
	.loc 1 2896 0 discriminator 3
	movl	$1, %eax	#, iftmp.377
	jmp	.L592	#
.L591:
	.loc 1 2896 0 discriminator 2
	movl	$0, %eax	#, iftmp.377
.L592:
	.loc 1 2897 0 is_stmt 1 discriminator 4
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE32:
	.size	const_int_1_operand, .-const_int_1_operand
	.globl	const_int_1_31_operand
	.type	const_int_1_31_operand, @function
const_int_1_31_operand:
.LFB33:
	.loc 1 2907 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 2908 0
	movq	-8(%rbp), %rax	# op, tmp65
	movzwl	(%rax), %eax	# op_2(D)->code, D.29804
	cmpw	$54, %ax	#, D.29804
	jne	.L595	#,
	.loc 1 2908 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# op, tmp66
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtwint, D.29805
	testq	%rax, %rax	# D.29805
	jle	.L595	#,
	movq	-8(%rbp), %rax	# op, tmp67
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtwint, D.29805
	cmpq	$31, %rax	#, D.29805
	jg	.L595	#,
	.loc 1 2908 0 discriminator 3
	movl	$1, %eax	#, iftmp.378
	jmp	.L596	#
.L595:
	.loc 1 2908 0 discriminator 2
	movl	$0, %eax	#, iftmp.378
.L596:
	.loc 1 2909 0 is_stmt 1 discriminator 4
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE33:
	.size	const_int_1_31_operand, .-const_int_1_31_operand
	.globl	symbolic_operand
	.type	symbolic_operand, @function
symbolic_operand:
.LFB34:
	.loc 1 2918 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 2919 0
	movzwl	(%rax), %edx	# op_2(D)->code, D.29808
	movzwl	%dx, %edx	# D.29808, D.29809
	cmpl	$58, %edx	#, D.29809
	je	.L600	#,
	cmpl	$58, %edx	#, D.29809
	jb	.L599	#,
	leal	-67(%rdx), %eax	#, tmp80
	cmpl	$1, %eax	#, tmp80
	ja	.L599	#,
	.loc 1 2923 0
	movl	$1, %eax	#, D.29807
	jmp	.L602	#
.L600:
	.loc 1 2926 0
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, op
	.loc 1 2927 0
	movzwl	(%rax), %edx	# op_6->code, D.29808
	cmpw	$68, %dx	#, D.29808
	je	.L603	#,
	.loc 1 2928 0
	movzwl	(%rax), %edx	# op_6->code, D.29808
	cmpw	$67, %dx	#, D.29808
	je	.L603	#,
	.loc 1 2929 0
	movzwl	(%rax), %edx	# op_6->code, D.29808
	cmpw	$42, %dx	#, D.29808
	jne	.L604	#,
	.loc 1 2930 0
	movl	16(%rax), %edx	# op_6->fld[1].rtint, D.29807
	cmpl	$6, %edx	#, D.29807
	je	.L603	#,
	.loc 1 2931 0
	movl	16(%rax), %edx	# op_6->fld[1].rtint, D.29807
	cmpl	$7, %edx	#, D.29807
	je	.L603	#,
	.loc 1 2932 0
	movl	16(%rax), %edx	# op_6->fld[1].rtint, D.29807
	cmpl	$15, %edx	#, D.29807
	jne	.L604	#,
.L603:
	.loc 1 2933 0
	movl	$1, %eax	#, D.29807
	jmp	.L602	#
.L604:
	.loc 1 2934 0
	movzwl	(%rax), %edx	# op_6->code, D.29808
	cmpw	$75, %dx	#, D.29808
	jne	.L605	#,
	.loc 1 2935 0
	movq	16(%rax), %rdx	# op_6->fld[1].rtx, D.29810
	movzwl	(%rdx), %edx	# _14->code, D.29808
	cmpw	$54, %dx	#, D.29808
	je	.L606	#,
.L605:
	.loc 1 2936 0
	movl	$0, %eax	#, D.29807
	jmp	.L602	#
.L606:
	.loc 1 2938 0
	movq	8(%rax), %rax	# op_6->fld[0].rtx, op
	.loc 1 2939 0
	movzwl	(%rax), %edx	# op_16->code, D.29808
	cmpw	$68, %dx	#, D.29808
	je	.L607	#,
	.loc 1 2940 0
	movzwl	(%rax), %edx	# op_16->code, D.29808
	cmpw	$67, %dx	#, D.29808
	jne	.L608	#,
.L607:
	.loc 1 2941 0
	movl	$1, %eax	#, D.29807
	jmp	.L602	#
.L608:
	.loc 1 2943 0
	movzwl	(%rax), %edx	# op_16->code, D.29808
	cmpw	$42, %dx	#, D.29808
	jne	.L609	#,
	.loc 1 2944 0
	movl	16(%rax), %edx	# op_16->fld[1].rtint, D.29807
	cmpl	$7, %edx	#, D.29807
	je	.L610	#,
.L609:
	.loc 1 2945 0
	movl	$0, %eax	#, D.29807
	jmp	.L602	#
.L610:
	.loc 1 2947 0
	movq	8(%rax), %rax	# op_16->fld[0].rtvec, D.29811
	movq	8(%rax), %rax	# _21->elem, op
	.loc 1 2948 0
	movzwl	(%rax), %edx	# op_22->code, D.29808
	cmpw	$68, %dx	#, D.29808
	je	.L611	#,
	.loc 1 2949 0
	movzwl	(%rax), %eax	# op_22->code, D.29808
	cmpw	$67, %ax	#, D.29808
	jne	.L612	#,
.L611:
	.loc 1 2950 0
	movl	$1, %eax	#, D.29807
	jmp	.L602	#
.L612:
	.loc 1 2951 0
	movl	$0, %eax	#, D.29807
	jmp	.L602	#
.L599:
	.loc 1 2954 0
	movl	$0, %eax	#, D.29807
.L602:
	.loc 1 2956 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE34:
	.size	symbolic_operand, .-symbolic_operand
	.globl	pic_symbolic_operand
	.type	pic_symbolic_operand, @function
pic_symbolic_operand:
.LFB35:
	.loc 1 2964 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 2965 0
	movzwl	(%rax), %edx	# op_2(D)->code, D.29813
	cmpw	$58, %dx	#, D.29813
	je	.L614	#,
	.loc 1 2966 0
	movl	$0, %eax	#, D.29812
	jmp	.L615	#
.L614:
	.loc 1 2967 0
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, op
	.loc 1 2968 0
	movl	target_flags(%rip), %edx	# target_flags, target_flags.379
	andl	$33554432, %edx	#, D.29812
	testl	%edx, %edx	# D.29812
	je	.L616	#,
	.loc 1 2970 0
	movq	8(%rax), %rax	# op_5->fld[0].rtx, D.29814
	movzwl	(%rax), %eax	# _8->code, D.29813
	cmpw	$42, %ax	#, D.29813
	jne	.L617	#,
	.loc 1 2971 0
	movl	$1, %eax	#, D.29812
	jmp	.L615	#
.L616:
	.loc 1 2975 0
	movzwl	(%rax), %edx	# op_5->code, D.29813
	cmpw	$42, %dx	#, D.29813
	jne	.L618	#,
	.loc 1 2976 0
	movl	$1, %eax	#, D.29812
	jmp	.L615	#
.L618:
	.loc 1 2977 0
	movzwl	(%rax), %edx	# op_5->code, D.29813
	cmpw	$75, %dx	#, D.29813
	jne	.L619	#,
	.loc 1 2978 0
	movq	16(%rax), %rdx	# op_5->fld[1].rtx, D.29814
	movzwl	(%rdx), %edx	# _14->code, D.29813
	cmpw	$54, %dx	#, D.29813
	je	.L620	#,
.L619:
	.loc 1 2979 0
	movl	$0, %eax	#, D.29812
	jmp	.L615	#
.L620:
	.loc 1 2980 0
	movq	8(%rax), %rax	# op_5->fld[0].rtx, op
	.loc 1 2981 0
	movzwl	(%rax), %eax	# op_16->code, D.29813
	cmpw	$42, %ax	#, D.29813
	jne	.L617	#,
	.loc 1 2982 0
	movl	$1, %eax	#, D.29812
	jmp	.L615	#
.L617:
	.loc 1 2984 0
	movl	$0, %eax	#, D.29812
.L615:
	.loc 1 2985 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE35:
	.size	pic_symbolic_operand, .-pic_symbolic_operand
	.type	local_symbolic_operand, @function
local_symbolic_operand:
.LFB36:
	.loc 1 2993 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 2994 0
	movq	-8(%rbp), %rax	# op, tmp78
	movzwl	(%rax), %eax	# op_3(D)->code, D.29816
	cmpw	$67, %ax	#, D.29816
	jne	.L622	#,
	.loc 1 2995 0
	movl	$1, %eax	#, D.29815
	jmp	.L623	#
.L622:
	.loc 1 2997 0
	movq	-8(%rbp), %rax	# op, tmp79
	movzwl	(%rax), %eax	# op_3(D)->code, D.29816
	cmpw	$58, %ax	#, D.29816
	jne	.L624	#,
	.loc 1 2998 0
	movq	-8(%rbp), %rax	# op, tmp80
	movq	8(%rax), %rax	# op_3(D)->fld[0].rtx, D.29817
	movzwl	(%rax), %eax	# _7->code, D.29816
	cmpw	$75, %ax	#, D.29816
	jne	.L624	#,
	.loc 1 2999 0
	movq	-8(%rbp), %rax	# op, tmp81
	movq	8(%rax), %rax	# op_3(D)->fld[0].rtx, D.29817
	movq	16(%rax), %rax	# _9->fld[1].rtx, D.29817
	movzwl	(%rax), %eax	# _10->code, D.29816
	cmpw	$54, %ax	#, D.29816
	jne	.L624	#,
	.loc 1 3000 0
	movq	-8(%rbp), %rax	# op, tmp82
	movq	8(%rax), %rax	# op_3(D)->fld[0].rtx, D.29817
	movq	8(%rax), %rax	# _12->fld[0].rtx, tmp83
	movq	%rax, -8(%rbp)	# tmp83, op
.L624:
	.loc 1 3002 0
	movq	-8(%rbp), %rax	# op, tmp84
	movzwl	(%rax), %eax	# op_1->code, D.29816
	cmpw	$68, %ax	#, D.29816
	je	.L625	#,
	.loc 1 3003 0
	movl	$0, %eax	#, D.29815
	jmp	.L623	#
.L625:
	.loc 1 3007 0
	movq	-8(%rbp), %rax	# op, tmp85
	movzbl	3(%rax), %eax	# *op_1, D.29818
	andl	$4, %eax	#, D.29818
	testb	%al, %al	# D.29818
	jne	.L626	#,
	.loc 1 3007 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# op, tmp86
	movzbl	3(%rax), %eax	# *op_1, D.29818
	andl	$8, %eax	#, D.29818
	testb	%al, %al	# D.29818
	je	.L627	#,
.L626:
	.loc 1 3008 0 is_stmt 1
	movl	$1, %eax	#, D.29815
	jmp	.L623	#
.L627:
	.loc 1 3015 0
	movl	internal_label_prefix_len(%rip), %eax	# internal_label_prefix_len, internal_label_prefix_len.380
	movslq	%eax, %rdx	# internal_label_prefix_len.380, D.29819
	movq	-8(%rbp), %rax	# op, tmp87
	movq	8(%rax), %rax	# op_1->fld[0].rtstr, D.29820
	movl	$internal_label_prefix, %esi	#,
	movq	%rax, %rdi	# D.29820,
	call	strncmp	#
	testl	%eax, %eax	# D.29815
	jne	.L628	#,
	.loc 1 3017 0
	movl	$1, %eax	#, D.29815
	jmp	.L623	#
.L628:
	.loc 1 3019 0
	movl	$0, %eax	#, D.29815
.L623:
	.loc 1 3020 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE36:
	.size	local_symbolic_operand, .-local_symbolic_operand
	.globl	call_insn_operand
	.type	call_insn_operand, @function
call_insn_operand:
.LFB37:
	.loc 1 3030 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 3033 0
	movq	-8(%rbp), %rax	# op, tmp71
	movzwl	(%rax), %eax	# op_3(D)->code, D.29822
	cmpw	$61, %ax	#, D.29822
	jne	.L630	#,
	.loc 1 3034 0
	movq	global_rtl+40(%rip), %rax	# global_rtl, D.29823
	cmpq	-8(%rbp), %rax	# op, D.29823
	je	.L631	#,
	.loc 1 3035 0
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.29823
	cmpq	-8(%rbp), %rax	# op, D.29823
	je	.L631	#,
	.loc 1 3036 0
	movq	-8(%rbp), %rax	# op, tmp72
	movl	8(%rax), %eax	# op_3(D)->fld[0].rtuint, D.29824
	cmpl	$52, %eax	#, D.29824
	jbe	.L630	#,
	.loc 1 3037 0
	movq	-8(%rbp), %rax	# op, tmp73
	movl	8(%rax), %eax	# op_3(D)->fld[0].rtuint, D.29824
	cmpl	$57, %eax	#, D.29824
	ja	.L630	#,
.L631:
	.loc 1 3038 0
	movl	$0, %eax	#, D.29821
	jmp	.L632	#
.L630:
	.loc 1 3042 0
	movq	-8(%rbp), %rax	# op, tmp74
	movzwl	(%rax), %eax	# op_3(D)->code, D.29822
	cmpw	$54, %ax	#, D.29822
	jne	.L633	#,
	.loc 1 3043 0
	movl	$0, %eax	#, D.29821
	jmp	.L632	#
.L633:
	.loc 1 3046 0
	movq	-8(%rbp), %rax	# op, tmp75
	movzwl	(%rax), %eax	# op_3(D)->code, D.29822
	cmpw	$68, %ax	#, D.29822
	jne	.L634	#,
	.loc 1 3047 0
	movl	$1, %eax	#, D.29821
	jmp	.L632	#
.L634:
	.loc 1 3055 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.384
	andl	$33554432, %eax	#, D.29821
	testl	%eax, %eax	# D.29821
	je	.L635	#,
	.loc 1 3055 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.383
	jmp	.L636	#
.L635:
	.loc 1 3055 0 discriminator 2
	movl	$4, %eax	#, iftmp.383
.L636:
	.loc 1 3055 0 discriminator 3
	movq	-8(%rbp), %rdx	# op, tmp76
	movl	%eax, %esi	# iftmp.383,
	movq	%rdx, %rdi	# tmp76,
	call	general_operand	#
.L632:
	.loc 1 3056 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE37:
	.size	call_insn_operand, .-call_insn_operand
	.globl	constant_call_address_operand
	.type	constant_call_address_operand, @function
constant_call_address_operand:
.LFB38:
	.loc 1 3062 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 3063 0
	movq	-8(%rbp), %rax	# op, tmp70
	movzwl	(%rax), %eax	# op_2(D)->code, D.29825
	cmpw	$58, %ax	#, D.29825
	jne	.L638	#,
	.loc 1 3064 0
	movq	-8(%rbp), %rax	# op, tmp71
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, D.29826
	movzwl	(%rax), %eax	# _4->code, D.29825
	cmpw	$75, %ax	#, D.29825
	jne	.L638	#,
	.loc 1 3065 0
	movq	-8(%rbp), %rax	# op, tmp72
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, D.29826
	movq	16(%rax), %rax	# _6->fld[1].rtx, D.29826
	movzwl	(%rax), %eax	# _7->code, D.29825
	cmpw	$54, %ax	#, D.29825
	jne	.L638	#,
	.loc 1 3066 0
	movq	-8(%rbp), %rax	# op, tmp73
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, D.29826
	movq	8(%rax), %rax	# _9->fld[0].rtx, tmp74
	movq	%rax, -8(%rbp)	# tmp74, op
.L638:
	.loc 1 3067 0
	movq	-8(%rbp), %rax	# op, tmp75
	movzwl	(%rax), %eax	# op_1->code, D.29825
	cmpw	$68, %ax	#, D.29825
	sete	%al	#, D.29827
	movzbl	%al, %eax	# D.29827, D.29828
	.loc 1 3068 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE38:
	.size	constant_call_address_operand, .-constant_call_address_operand
	.globl	const0_operand
	.type	const0_operand, @function
const0_operand:
.LFB39:
	.loc 1 3076 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3077 0
	movl	-4(%rbp), %edx	# mode, mode.385
	movslq	%edx, %rdx	# mode.385, tmp65
	movq	const_tiny_rtx(,%rdx,8), %rdx	# const_tiny_rtx, D.29829
	cmpq	%rax, %rdx	# op, D.29829
	sete	%al	#, D.29830
	movzbl	%al, %eax	# D.29830, D.29831
	.loc 1 3078 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE39:
	.size	const0_operand, .-const0_operand
	.globl	const1_operand
	.type	const1_operand, @function
const1_operand:
.LFB40:
	.loc 1 3084 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3085 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.29832
	cmpq	%rax, %rdx	# op, D.29832
	sete	%al	#, D.29833
	movzbl	%al, %eax	# D.29833, D.29834
	.loc 1 3086 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE40:
	.size	const1_operand, .-const1_operand
	.globl	const248_operand
	.type	const248_operand, @function
const248_operand:
.LFB41:
	.loc 1 3094 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3095 0
	movzwl	(%rax), %edx	# op_2(D)->code, D.29835
	.loc 1 3096 0
	cmpw	$54, %dx	#, D.29835
	jne	.L645	#,
	.loc 1 3096 0 is_stmt 0 discriminator 1
	movq	8(%rax), %rdx	# op_2(D)->fld[0].rtwint, D.29836
	cmpq	$2, %rdx	#, D.29836
	je	.L646	#,
	.loc 1 3096 0 discriminator 4
	movq	8(%rax), %rdx	# op_2(D)->fld[0].rtwint, D.29836
	cmpq	$4, %rdx	#, D.29836
	je	.L646	#,
	.loc 1 3096 0 discriminator 1
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtwint, D.29836
	cmpq	$8, %rax	#, D.29836
	jne	.L645	#,
.L646:
	.loc 1 3096 0 discriminator 3
	movl	$1, %eax	#, iftmp.386
	jmp	.L647	#
.L645:
	.loc 1 3096 0 discriminator 2
	movl	$0, %eax	#, iftmp.386
.L647:
	.loc 1 3097 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE41:
	.size	const248_operand, .-const248_operand
	.globl	incdec_operand
	.type	incdec_operand, @function
incdec_operand:
.LFB42:
	.loc 1 3105 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3108 0
	movl	ix86_cpu(%rip), %edx	# ix86_cpu, ix86_cpu.387
	cmpl	$6, %edx	#, ix86_cpu.387
	jne	.L650	#,
	.loc 1 3108 0 is_stmt 0 discriminator 1
	movl	optimize_size(%rip), %edx	# optimize_size, optimize_size.388
	testl	%edx, %edx	# optimize_size.388
	jne	.L650	#,
	.loc 1 3109 0 is_stmt 1
	movl	$0, %eax	#, D.29838
	jmp	.L651	#
.L650:
	.loc 1 3110 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.29839
	cmpq	%rax, %rdx	# op, D.29839
	je	.L652	#,
	.loc 1 3110 0 is_stmt 0 discriminator 2
	movq	const_int_rtx+504(%rip), %rdx	# const_int_rtx, D.29839
	cmpq	%rax, %rdx	# op, D.29839
	jne	.L653	#,
.L652:
	.loc 1 3110 0 discriminator 1
	movl	$1, %eax	#, iftmp.389
	jmp	.L654	#
.L653:
	.loc 1 3110 0 discriminator 3
	movl	$0, %eax	#, iftmp.389
.L654:
.L651:
	.loc 1 3111 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE42:
	.size	incdec_operand, .-incdec_operand
	.globl	shiftdi_operand
	.type	shiftdi_operand, @function
shiftdi_operand:
.LFB43:
	.loc 1 3120 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 3121 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.390
	andl	$33554432, %eax	#, D.29840
	testl	%eax, %eax	# D.29840
	je	.L656	#,
	.loc 1 3122 0
	movl	-12(%rbp), %edx	# mode, tmp63
	movq	-8(%rbp), %rax	# op, tmp64
	movl	%edx, %esi	# tmp63,
	movq	%rax, %rdi	# tmp64,
	call	nonimmediate_operand	#
	jmp	.L657	#
.L656:
	.loc 1 3124 0
	movl	-12(%rbp), %edx	# mode, tmp65
	movq	-8(%rbp), %rax	# op, tmp66
	movl	%edx, %esi	# tmp65,
	movq	%rax, %rdi	# tmp66,
	call	register_operand	#
.L657:
	.loc 1 3125 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE43:
	.size	shiftdi_operand, .-shiftdi_operand
	.globl	reg_no_sp_operand
	.type	reg_no_sp_operand, @function
reg_no_sp_operand:
.LFB44:
	.loc 1 3138 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, %rax	# op, op
	movl	%esi, -20(%rbp)	# mode, mode
	.loc 1 3139 0
	movq	%rax, -8(%rbp)	# op, t
	.loc 1 3140 0
	movq	-8(%rbp), %rdx	# t, tmp66
	movzwl	(%rdx), %edx	# t_4->code, D.29842
	cmpw	$63, %dx	#, D.29842
	jne	.L659	#,
	.loc 1 3141 0
	movq	-8(%rbp), %rdx	# t, tmp67
	movq	8(%rdx), %rdx	# t_4->fld[0].rtx, tmp68
	movq	%rdx, -8(%rbp)	# tmp68, t
.L659:
	.loc 1 3142 0
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.29843
	cmpq	-8(%rbp), %rdx	# t, D.29843
	je	.L660	#,
	.loc 1 3142 0 is_stmt 0 discriminator 1
	movq	global_rtl+40(%rip), %rdx	# global_rtl, D.29843
	cmpq	-8(%rbp), %rdx	# t, D.29843
	je	.L660	#,
	movq	global_rtl+24(%rip), %rdx	# global_rtl, D.29843
	cmpq	-8(%rbp), %rdx	# t, D.29843
	jne	.L661	#,
.L660:
	.loc 1 3143 0 is_stmt 1
	movl	$0, %eax	#, D.29841
	jmp	.L662	#
.L661:
	.loc 1 3145 0
	movl	-20(%rbp), %edx	# mode, tmp69
	movl	%edx, %esi	# tmp69,
	movq	%rax, %rdi	# op,
	call	register_operand	#
.L662:
	.loc 1 3146 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE44:
	.size	reg_no_sp_operand, .-reg_no_sp_operand
	.globl	mmx_reg_operand
	.type	mmx_reg_operand, @function
mmx_reg_operand:
.LFB45:
	.loc 1 3152 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3153 0
	movzwl	(%rax), %edx	# op_2(D)->code, D.29844
	cmpw	$61, %dx	#, D.29844
	jne	.L664	#,
	.loc 1 3153 0 is_stmt 0 discriminator 1
	movl	8(%rax), %edx	# op_2(D)->fld[0].rtuint, D.29845
	cmpl	$28, %edx	#, D.29845
	jbe	.L664	#,
	.loc 1 3153 0 discriminator 3
	movl	8(%rax), %eax	# op_2(D)->fld[0].rtuint, D.29845
	cmpl	$36, %eax	#, D.29845
	ja	.L664	#,
	.loc 1 3153 0 discriminator 1
	movl	$1, %eax	#, iftmp.391
	jmp	.L665	#
.L664:
	.loc 1 3153 0 discriminator 2
	movl	$0, %eax	#, iftmp.391
.L665:
	.loc 1 3154 0 is_stmt 1 discriminator 4
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE45:
	.size	mmx_reg_operand, .-mmx_reg_operand
	.globl	general_no_elim_operand
	.type	general_no_elim_operand, @function
general_no_elim_operand:
.LFB46:
	.loc 1 3163 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, %rax	# op, op
	movl	%esi, -20(%rbp)	# mode, mode
	.loc 1 3164 0
	movq	%rax, -8(%rbp)	# op, t
	.loc 1 3165 0
	movq	-8(%rbp), %rdx	# t, tmp71
	movzwl	(%rdx), %edx	# t_4->code, D.29848
	cmpw	$63, %dx	#, D.29848
	jne	.L668	#,
	.loc 1 3166 0
	movq	-8(%rbp), %rdx	# t, tmp72
	movq	8(%rdx), %rdx	# t_4->fld[0].rtx, tmp73
	movq	%rdx, -8(%rbp)	# tmp73, t
.L668:
	.loc 1 3167 0
	movq	global_rtl+40(%rip), %rdx	# global_rtl, D.29849
	cmpq	-8(%rbp), %rdx	# t, D.29849
	je	.L669	#,
	.loc 1 3167 0 is_stmt 0 discriminator 1
	movq	global_rtl+24(%rip), %rdx	# global_rtl, D.29849
	cmpq	-8(%rbp), %rdx	# t, D.29849
	je	.L669	#,
	.loc 1 3168 0 is_stmt 1
	movq	global_rtl+48(%rip), %rdx	# global_rtl, D.29849
	cmpq	-8(%rbp), %rdx	# t, D.29849
	je	.L669	#,
	.loc 1 3168 0 is_stmt 0 discriminator 1
	movq	global_rtl+56(%rip), %rdx	# global_rtl, D.29849
	cmpq	-8(%rbp), %rdx	# t, D.29849
	je	.L669	#,
	.loc 1 3169 0 is_stmt 1
	movq	global_rtl+64(%rip), %rdx	# global_rtl, D.29849
	cmpq	-8(%rbp), %rdx	# t, D.29849
	jne	.L670	#,
.L669:
	.loc 1 3170 0
	movl	$0, %eax	#, D.29847
	jmp	.L671	#
.L670:
	.loc 1 3171 0
	movq	-8(%rbp), %rdx	# t, tmp74
	movzwl	(%rdx), %edx	# t_1->code, D.29848
	cmpw	$61, %dx	#, D.29848
	jne	.L672	#,
	.loc 1 3172 0
	movq	-8(%rbp), %rdx	# t, tmp75
	movl	8(%rdx), %edx	# t_1->fld[0].rtuint, D.29850
	cmpl	$52, %edx	#, D.29850
	jbe	.L672	#,
	.loc 1 3173 0
	movq	-8(%rbp), %rdx	# t, tmp76
	movl	8(%rdx), %edx	# t_1->fld[0].rtuint, D.29850
	cmpl	$57, %edx	#, D.29850
	ja	.L672	#,
	.loc 1 3174 0
	movl	$0, %eax	#, D.29847
	jmp	.L671	#
.L672:
	.loc 1 3176 0
	movl	-20(%rbp), %edx	# mode, tmp77
	movl	%edx, %esi	# tmp77,
	movq	%rax, %rdi	# op,
	call	general_operand	#
.L671:
	.loc 1 3177 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE46:
	.size	general_no_elim_operand, .-general_no_elim_operand
	.globl	nonmemory_no_elim_operand
	.type	nonmemory_no_elim_operand, @function
nonmemory_no_elim_operand:
.LFB47:
	.loc 1 3186 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, %rax	# op, op
	movl	%esi, -20(%rbp)	# mode, mode
	.loc 1 3187 0
	movq	%rax, -8(%rbp)	# op, t
	.loc 1 3188 0
	movq	-8(%rbp), %rdx	# t, tmp71
	movzwl	(%rdx), %edx	# t_5->code, D.29852
	cmpw	$63, %dx	#, D.29852
	jne	.L674	#,
	.loc 1 3189 0
	movq	-8(%rbp), %rdx	# t, tmp72
	movq	8(%rdx), %rdx	# t_5->fld[0].rtx, tmp73
	movq	%rdx, -8(%rbp)	# tmp73, t
.L674:
	.loc 1 3190 0
	movq	global_rtl+40(%rip), %rdx	# global_rtl, D.29853
	cmpq	-8(%rbp), %rdx	# t, D.29853
	je	.L675	#,
	.loc 1 3190 0 is_stmt 0 discriminator 1
	movq	global_rtl+24(%rip), %rdx	# global_rtl, D.29853
	cmpq	-8(%rbp), %rdx	# t, D.29853
	je	.L675	#,
	.loc 1 3191 0 is_stmt 1
	movq	global_rtl+48(%rip), %rdx	# global_rtl, D.29853
	cmpq	-8(%rbp), %rdx	# t, D.29853
	je	.L675	#,
	.loc 1 3191 0 is_stmt 0 discriminator 1
	movq	global_rtl+56(%rip), %rdx	# global_rtl, D.29853
	cmpq	-8(%rbp), %rdx	# t, D.29853
	je	.L675	#,
	.loc 1 3192 0 is_stmt 1
	movq	global_rtl+64(%rip), %rdx	# global_rtl, D.29853
	cmpq	-8(%rbp), %rdx	# t, D.29853
	jne	.L676	#,
.L675:
	.loc 1 3193 0
	movl	$0, %eax	#, D.29851
	jmp	.L677	#
.L676:
	.loc 1 3195 0
	movzwl	(%rax), %edx	# op_4(D)->code, D.29852
	cmpw	$54, %dx	#, D.29852
	je	.L678	#,
	.loc 1 3195 0 is_stmt 0 discriminator 2
	movl	-20(%rbp), %edx	# mode, tmp74
	movl	%edx, %esi	# tmp74,
	movq	%rax, %rdi	# op,
	call	register_operand	#
	testl	%eax, %eax	# D.29851
	je	.L679	#,
.L678:
	.loc 1 3195 0 discriminator 1
	movl	$1, %eax	#, iftmp.392
	jmp	.L680	#
.L679:
	.loc 1 3195 0 discriminator 3
	movl	$0, %eax	#, iftmp.392
.L680:
.L677:
	.loc 1 3196 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE47:
	.size	nonmemory_no_elim_operand, .-nonmemory_no_elim_operand
	.globl	q_regs_operand
	.type	q_regs_operand, @function
q_regs_operand:
.LFB48:
	.loc 1 3204 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3205 0
	cmpl	$0, -4(%rbp)	#, mode
	je	.L682	#,
	.loc 1 3205 0 is_stmt 0 discriminator 1
	movzbl	2(%rax), %edx	# op_5(D)->mode, D.29855
	movzbl	%dl, %edx	# D.29855, D.29856
	cmpl	-4(%rbp), %edx	# mode, D.29856
	je	.L682	#,
	.loc 1 3206 0 is_stmt 1
	movl	$0, %eax	#, D.29854
	jmp	.L683	#
.L682:
	.loc 1 3207 0
	movzwl	(%rax), %edx	# op_5(D)->code, D.29857
	cmpw	$63, %dx	#, D.29857
	jne	.L684	#,
	.loc 1 3208 0
	movq	8(%rax), %rax	# op_5(D)->fld[0].rtx, op
.L684:
	.loc 1 3209 0
	movzwl	(%rax), %edx	# op_1->code, D.29857
	cmpw	$61, %dx	#, D.29857
	jne	.L685	#,
	.loc 1 3209 0 is_stmt 0 discriminator 1
	movl	8(%rax), %eax	# op_1->fld[0].rtuint, D.29856
	cmpl	$3, %eax	#, D.29856
	ja	.L685	#,
	.loc 1 3209 0 discriminator 3
	movl	$1, %eax	#, iftmp.393
	jmp	.L686	#
.L685:
	.loc 1 3209 0 discriminator 2
	movl	$0, %eax	#, iftmp.393
.L686:
.L683:
	.loc 1 3210 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE48:
	.size	q_regs_operand, .-q_regs_operand
	.globl	non_q_regs_operand
	.type	non_q_regs_operand, @function
non_q_regs_operand:
.LFB49:
	.loc 1 3218 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3219 0
	cmpl	$0, -4(%rbp)	#, mode
	je	.L688	#,
	.loc 1 3219 0 is_stmt 0 discriminator 1
	movzbl	2(%rax), %edx	# op_5(D)->mode, D.29859
	movzbl	%dl, %edx	# D.29859, D.29860
	cmpl	-4(%rbp), %edx	# mode, D.29860
	je	.L688	#,
	.loc 1 3220 0 is_stmt 1
	movl	$0, %eax	#, D.29858
	jmp	.L689	#
.L688:
	.loc 1 3221 0
	movzwl	(%rax), %edx	# op_5(D)->code, D.29861
	cmpw	$63, %dx	#, D.29861
	jne	.L690	#,
	.loc 1 3222 0
	movq	8(%rax), %rax	# op_5(D)->fld[0].rtx, op
.L690:
	.loc 1 3223 0
	movzwl	(%rax), %edx	# op_1->code, D.29861
	cmpw	$61, %dx	#, D.29861
	jne	.L691	#,
	.loc 1 3223 0 is_stmt 0 discriminator 1
	movl	8(%rax), %edx	# op_1->fld[0].rtuint, D.29860
	cmpl	$3, %edx	#, D.29860
	jbe	.L691	#,
	movl	8(%rax), %eax	# op_1->fld[0].rtuint, D.29860
	cmpl	$52, %eax	#, D.29860
	ja	.L691	#,
	.loc 1 3223 0 discriminator 3
	movl	$1, %eax	#, iftmp.394
	jmp	.L692	#
.L691:
	.loc 1 3223 0 discriminator 2
	movl	$0, %eax	#, iftmp.394
.L692:
.L689:
	.loc 1 3224 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE49:
	.size	non_q_regs_operand, .-non_q_regs_operand
	.globl	sse_comparison_operator
	.type	sse_comparison_operator, @function
sse_comparison_operator:
.LFB50:
	.loc 1 3232 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# op, op
	movl	%esi, -28(%rbp)	# mode, mode
	.loc 1 3233 0
	movq	-24(%rbp), %rax	# op, tmp65
	movzwl	(%rax), %eax	# op_2(D)->code, D.29863
	movzwl	%ax, %eax	# D.29863, tmp66
	movl	%eax, -4(%rbp)	# tmp66, code
	.loc 1 3234 0
	movl	-4(%rbp), %eax	# code, tmp68
	subl	$102, %eax	#, tmp67
	cmpl	$17, %eax	#, tmp67
	ja	.L694	#,
	movl	%eax, %eax	# tmp67, tmp69
	movq	.L696(,%rax,8), %rax	#, tmp70
	jmp	*%rax	# tmp70
	.section	.rodata
	.align 8
	.align 4
.L696:
	.quad	.L695
	.quad	.L695
	.quad	.L697
	.quad	.L697
	.quad	.L695
	.quad	.L695
	.quad	.L694
	.quad	.L694
	.quad	.L694
	.quad	.L694
	.quad	.L695
	.quad	.L695
	.quad	.L697
	.quad	.L695
	.quad	.L695
	.quad	.L697
	.quad	.L697
	.quad	.L697
	.text
.L695:
	.loc 1 3245 0
	movl	$1, %eax	#, D.29862
	jmp	.L698	#
.L697:
	.loc 1 3253 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.395
	andl	$16, %eax	#, D.29862
	testl	%eax, %eax	# D.29862
	sete	%al	#, D.29864
	movzbl	%al, %eax	# D.29864, D.29862
	jmp	.L698	#
.L694:
	.loc 1 3255 0
	movl	$0, %eax	#, D.29862
.L698:
	.loc 1 3257 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE50:
	.size	sse_comparison_operator, .-sse_comparison_operator
	.globl	ix86_comparison_operator
	.type	ix86_comparison_operator, @function
ix86_comparison_operator:
.LFB51:
	.loc 1 3263 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, %rax	# op, op
	movl	%esi, -20(%rbp)	# mode, mode
	.loc 1 3265 0
	movzwl	(%rax), %edx	# op_3(D)->code, D.29866
	movzwl	%dx, %edx	# D.29866, code.396
	movl	%edx, -16(%rbp)	# code.396, code
	.loc 1 3266 0
	cmpl	$0, -20(%rbp)	#, mode
	je	.L700	#,
	.loc 1 3266 0 is_stmt 0 discriminator 1
	movzbl	2(%rax), %edx	# op_3(D)->mode, D.29867
	movzbl	%dl, %edx	# D.29867, D.29868
	cmpl	-20(%rbp), %edx	# mode, D.29868
	je	.L700	#,
	.loc 1 3267 0 is_stmt 1
	movl	$0, %eax	#, D.29865
	jmp	.L718	#
.L700:
	.loc 1 3268 0
	movl	-16(%rbp), %edx	# code, code.397
	movslq	%edx, %rdx	# code.398, tmp76
	movzbl	rtx_class(%rdx), %edx	# rtx_class, D.29869
	cmpb	$60, %dl	#, D.29869
	je	.L702	#,
	.loc 1 3269 0
	movl	$0, %eax	#, D.29865
	jmp	.L718	#
.L702:
	.loc 1 3270 0
	movq	8(%rax), %rax	# op_3(D)->fld[0].rtx, D.29870
	movzbl	2(%rax), %eax	# _14->mode, D.29867
	movzbl	%al, %eax	# D.29867, tmp77
	movl	%eax, -4(%rbp)	# tmp77, inmode
	.loc 1 3272 0
	cmpl	$57, -4(%rbp)	#, inmode
	je	.L703	#,
	.loc 1 3272 0 is_stmt 0 discriminator 1
	cmpl	$58, -4(%rbp)	#, inmode
	jne	.L704	#,
.L703:
.LBB29:
	.loc 1 3275 0 is_stmt 1
	movl	-16(%rbp), %eax	# code, code.399
	leaq	-12(%rbp), %rcx	#, tmp78
	leaq	-16(%rbp), %rdx	#, tmp79
	leaq	-8(%rbp), %rsi	#, tmp80
	movl	%eax, %edi	# code.399,
	call	ix86_fp_comparison_codes	#
	.loc 1 3276 0
	movl	-8(%rbp), %eax	# bypass_code, bypass_code.401
	cmpl	$1, %eax	#, bypass_code.401
	jne	.L705	#,
	.loc 1 3276 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# second_code, second_code.402
	cmpl	$1, %eax	#, second_code.402
	jne	.L705	#,
	.loc 1 3276 0 discriminator 3
	movl	$1, %eax	#, iftmp.400
	jmp	.L718	#
.L705:
	.loc 1 3276 0 discriminator 2
	movl	$0, %eax	#, iftmp.400
	jmp	.L718	#
.L704:
.LBE29:
	.loc 1 3278 0 is_stmt 1
	movl	-16(%rbp), %eax	# code, code.403
	subl	$102, %eax	#, tmp81
	cmpl	$11, %eax	#, tmp81
	ja	.L707	#,
	movl	%eax, %eax	# tmp81, tmp82
	movq	.L709(,%rax,8), %rax	#, tmp83
	jmp	*%rax	# tmp83
	.section	.rodata
	.align 8
	.align 4
.L709:
	.quad	.L708
	.quad	.L708
	.quad	.L710
	.quad	.L711
	.quad	.L711
	.quad	.L710
	.quad	.L712
	.quad	.L712
	.quad	.L712
	.quad	.L712
	.quad	.L712
	.quad	.L712
	.text
.L708:
	.loc 1 3281 0
	movl	$1, %eax	#, D.29865
	jmp	.L718	#
.L710:
	.loc 1 3283 0
	cmpl	$52, -4(%rbp)	#, inmode
	je	.L713	#,
	.loc 1 3283 0 is_stmt 0 discriminator 1
	cmpl	$53, -4(%rbp)	#, inmode
	je	.L713	#,
	.loc 1 3284 0 is_stmt 1
	cmpl	$54, -4(%rbp)	#, inmode
	je	.L713	#,
	.loc 1 3284 0 is_stmt 0 discriminator 1
	cmpl	$55, -4(%rbp)	#, inmode
	jne	.L714	#,
.L713:
	.loc 1 3285 0 is_stmt 1
	movl	$1, %eax	#, D.29865
	jmp	.L718	#
.L714:
	.loc 1 3286 0
	movl	$0, %eax	#, D.29865
	jmp	.L718	#
.L712:
	.loc 1 3288 0
	cmpl	$52, -4(%rbp)	#, inmode
	jne	.L715	#,
	.loc 1 3289 0
	movl	$1, %eax	#, D.29865
	jmp	.L718	#
.L715:
	.loc 1 3290 0
	movl	$0, %eax	#, D.29865
	jmp	.L718	#
.L711:
	.loc 1 3292 0
	cmpl	$52, -4(%rbp)	#, inmode
	je	.L716	#,
	.loc 1 3292 0 is_stmt 0 discriminator 1
	cmpl	$53, -4(%rbp)	#, inmode
	je	.L716	#,
	cmpl	$55, -4(%rbp)	#, inmode
	jne	.L717	#,
.L716:
	.loc 1 3293 0 is_stmt 1
	movl	$1, %eax	#, D.29865
	jmp	.L718	#
.L717:
	.loc 1 3294 0
	movl	$0, %eax	#, D.29865
	jmp	.L718	#
.L707:
	.loc 1 3296 0
	movl	$0, %eax	#, D.29865
.L718:
	.loc 1 3298 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE51:
	.size	ix86_comparison_operator, .-ix86_comparison_operator
	.globl	fcmov_comparison_operator
	.type	fcmov_comparison_operator, @function
fcmov_comparison_operator:
.LFB52:
	.loc 1 3306 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, %rax	# op, op
	movl	%esi, -20(%rbp)	# mode, mode
	.loc 1 3308 0
	movzwl	(%rax), %edx	# op_2(D)->code, D.29872
	movzwl	%dx, %edx	# D.29872, code.404
	movl	%edx, -16(%rbp)	# code.404, code
	.loc 1 3309 0
	cmpl	$0, -20(%rbp)	#, mode
	je	.L720	#,
	.loc 1 3309 0 is_stmt 0 discriminator 1
	movzbl	2(%rax), %edx	# op_2(D)->mode, D.29873
	movzbl	%dl, %edx	# D.29873, D.29874
	cmpl	-20(%rbp), %edx	# mode, D.29874
	je	.L720	#,
	.loc 1 3310 0 is_stmt 1
	movl	$0, %eax	#, D.29871
	jmp	.L733	#
.L720:
	.loc 1 3311 0
	movl	-16(%rbp), %edx	# code, code.405
	movslq	%edx, %rdx	# code.406, tmp77
	movzbl	rtx_class(%rdx), %edx	# rtx_class, D.29875
	cmpb	$60, %dl	#, D.29875
	je	.L722	#,
	.loc 1 3312 0
	movl	$0, %eax	#, D.29871
	jmp	.L733	#
.L722:
	.loc 1 3313 0
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, D.29876
	movzbl	2(%rax), %eax	# _13->mode, D.29873
	movzbl	%al, %eax	# D.29873, tmp78
	movl	%eax, -4(%rbp)	# tmp78, inmode
	.loc 1 3314 0
	cmpl	$57, -4(%rbp)	#, inmode
	je	.L723	#,
	.loc 1 3314 0 is_stmt 0 discriminator 1
	cmpl	$58, -4(%rbp)	#, inmode
	jne	.L724	#,
.L723:
.LBB30:
	.loc 1 3317 0 is_stmt 1
	movl	-16(%rbp), %eax	# code, code.407
	leaq	-12(%rbp), %rcx	#, tmp79
	leaq	-16(%rbp), %rdx	#, tmp80
	leaq	-8(%rbp), %rsi	#, tmp81
	movl	%eax, %edi	# code.407,
	call	ix86_fp_comparison_codes	#
	.loc 1 3318 0
	movl	-8(%rbp), %eax	# bypass_code, bypass_code.408
	cmpl	$1, %eax	#, bypass_code.408
	jne	.L725	#,
	.loc 1 3318 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# second_code, second_code.409
	cmpl	$1, %eax	#, second_code.409
	je	.L726	#,
.L725:
	.loc 1 3319 0 is_stmt 1
	movl	$0, %eax	#, D.29871
	jmp	.L733	#
.L726:
	.loc 1 3320 0
	movl	-16(%rbp), %eax	# code, code.410
	movl	%eax, %edi	# code.410,
	call	ix86_fp_compare_code_to_integer	#
	movl	%eax, -16(%rbp)	# code.411, code
.L724:
.LBE30:
	.loc 1 3323 0
	movl	-16(%rbp), %eax	# code, code.412
	subl	$102, %eax	#, tmp82
	cmpl	$11, %eax	#, tmp82
	ja	.L727	#,
	movl	%eax, %eax	# tmp82, tmp83
	movq	.L729(,%rax,8), %rax	#, tmp84
	jmp	*%rax	# tmp84
	.section	.rodata
	.align 8
	.align 4
.L729:
	.quad	.L728
	.quad	.L728
	.quad	.L727
	.quad	.L727
	.quad	.L727
	.quad	.L727
	.quad	.L730
	.quad	.L730
	.quad	.L730
	.quad	.L730
	.quad	.L728
	.quad	.L728
	.text
.L730:
	.loc 1 3326 0
	cmpl	$52, -4(%rbp)	#, inmode
	je	.L731	#,
	.loc 1 3326 0 is_stmt 0 discriminator 1
	cmpl	$57, -4(%rbp)	#, inmode
	je	.L731	#,
	cmpl	$58, -4(%rbp)	#, inmode
	jne	.L732	#,
.L731:
	.loc 1 3327 0 is_stmt 1
	movl	$1, %eax	#, D.29871
	jmp	.L733	#
.L732:
	.loc 1 3328 0
	movl	$0, %eax	#, D.29871
	jmp	.L733	#
.L728:
	.loc 1 3331 0
	movl	$1, %eax	#, D.29871
	jmp	.L733	#
.L727:
	.loc 1 3333 0
	movl	$0, %eax	#, D.29871
.L733:
	.loc 1 3335 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE52:
	.size	fcmov_comparison_operator, .-fcmov_comparison_operator
	.globl	promotable_binary_operator
	.type	promotable_binary_operator, @function
promotable_binary_operator:
.LFB53:
	.loc 1 3343 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3344 0
	movzwl	(%rax), %eax	# op_2(D)->code, D.29878
	movzwl	%ax, %eax	# D.29878, D.29879
	subl	$75, %eax	#, tmp66
	cmpl	$12, %eax	#, tmp66
	ja	.L735	#,
	movl	%eax, %eax	# tmp66, tmp67
	movq	.L737(,%rax,8), %rax	#, tmp68
	jmp	*%rax	# tmp68
	.section	.rodata
	.align 8
	.align 4
.L737:
	.quad	.L736
	.quad	.L735
	.quad	.L735
	.quad	.L738
	.quad	.L735
	.quad	.L735
	.quad	.L735
	.quad	.L735
	.quad	.L736
	.quad	.L736
	.quad	.L736
	.quad	.L735
	.quad	.L736
	.text
.L738:
	.loc 1 3349 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.413
	cmpl	$1, %eax	#, ix86_cpu.413
	seta	%al	#, D.29880
	movzbl	%al, %eax	# D.29880, D.29877
	jmp	.L739	#
.L736:
	.loc 1 3355 0
	movl	$1, %eax	#, D.29877
	jmp	.L739	#
.L735:
	.loc 1 3357 0
	movl	$0, %eax	#, D.29877
.L739:
	.loc 1 3359 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE53:
	.size	promotable_binary_operator, .-promotable_binary_operator
	.globl	cmp_fp_expander_operand
	.type	cmp_fp_expander_operand, @function
cmp_fp_expander_operand:
.LFB54:
	.loc 1 3369 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3370 0
	cmpl	$0, -4(%rbp)	#, mode
	je	.L741	#,
	.loc 1 3370 0 is_stmt 0 discriminator 1
	movzbl	2(%rax), %edx	# op_3(D)->mode, D.29882
	movzbl	%dl, %edx	# D.29882, D.29883
	cmpl	-4(%rbp), %edx	# mode, D.29883
	je	.L741	#,
	.loc 1 3371 0 is_stmt 1
	movl	$0, %eax	#, D.29881
	jmp	.L742	#
.L741:
	.loc 1 3372 0
	movzwl	(%rax), %edx	# op_3(D)->code, D.29884
	cmpw	$55, %dx	#, D.29884
	jne	.L743	#,
	.loc 1 3373 0
	movl	$1, %eax	#, D.29881
	jmp	.L742	#
.L743:
	.loc 1 3374 0
	movl	-4(%rbp), %edx	# mode, tmp65
	movl	%edx, %esi	# tmp65,
	movq	%rax, %rdi	# op,
	call	general_operand	#
.L742:
	.loc 1 3375 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE54:
	.size	cmp_fp_expander_operand, .-cmp_fp_expander_operand
	.globl	ext_register_operand
	.type	ext_register_operand, @function
ext_register_operand:
.LFB55:
	.loc 1 3383 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rbx	# op, op
	movl	%esi, -36(%rbp)	# mode, mode
	.loc 1 3385 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.414
	andl	$33554432, %eax	#, D.29885
	testl	%eax, %eax	# D.29885
	je	.L745	#,
	.loc 1 3385 0 is_stmt 0 discriminator 1
	movzbl	2(%rbx), %eax	# op_6(D)->mode, D.29886
	cmpb	$5, %al	#, D.29886
	je	.L746	#,
.L745:
	.loc 1 3386 0 is_stmt 1
	movzbl	2(%rbx), %eax	# op_6(D)->mode, D.29886
	cmpb	$4, %al	#, D.29886
	je	.L746	#,
	.loc 1 3386 0 is_stmt 0 discriminator 1
	movzbl	2(%rbx), %eax	# op_6(D)->mode, D.29886
	cmpb	$3, %al	#, D.29886
	je	.L746	#,
	.loc 1 3387 0 is_stmt 1
	movl	$0, %eax	#, D.29885
	jmp	.L747	#
.L746:
	.loc 1 3389 0
	movl	$0, %esi	#,
	movq	%rbx, %rdi	# op,
	call	register_operand	#
	testl	%eax, %eax	# D.29885
	jne	.L748	#,
	.loc 1 3390 0
	movl	$0, %eax	#, D.29885
	jmp	.L747	#
.L748:
	.loc 1 3393 0
	movzwl	(%rbx), %eax	# op_6(D)->code, D.29887
	cmpw	$61, %ax	#, D.29887
	jne	.L749	#,
	.loc 1 3393 0 is_stmt 0 discriminator 1
	movl	8(%rbx), %eax	# op_6(D)->fld[0].rtuint, D.29888
	jmp	.L750	#
.L749:
	.loc 1 3393 0 discriminator 2
	movq	8(%rbx), %rax	# op_6(D)->fld[0].rtx, D.29889
	movl	8(%rax), %eax	# _16->fld[0].rtuint, D.29888
.L750:
	.loc 1 3393 0 discriminator 3
	movl	%eax, -20(%rbp)	# iftmp.415, regno
	.loc 1 3394 0 is_stmt 1 discriminator 3
	cmpl	$57, -20(%rbp)	#, regno
	jg	.L751	#,
	.loc 1 3394 0 is_stmt 0 discriminator 2
	cmpl	$3, -20(%rbp)	#, regno
	jg	.L752	#,
.L751:
	.loc 1 3394 0 discriminator 1
	movl	$1, %eax	#, iftmp.416
	jmp	.L753	#
.L752:
	.loc 1 3394 0 discriminator 3
	movl	$0, %eax	#, iftmp.416
.L753:
.L747:
	.loc 1 3395 0 is_stmt 1
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE55:
	.size	ext_register_operand, .-ext_register_operand
	.globl	binary_fp_operator
	.type	binary_fp_operator, @function
binary_fp_operator:
.LFB56:
	.loc 1 3404 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3405 0
	cmpl	$0, -4(%rbp)	#, mode
	je	.L755	#,
	.loc 1 3405 0 is_stmt 0 discriminator 1
	movzbl	2(%rax), %edx	# op_3(D)->mode, D.29891
	movzbl	%dl, %edx	# D.29891, D.29892
	cmpl	-4(%rbp), %edx	# mode, D.29892
	je	.L755	#,
	.loc 1 3406 0 is_stmt 1
	movl	$0, %eax	#, D.29890
	jmp	.L756	#
.L755:
	.loc 1 3408 0
	movzwl	(%rax), %edx	# op_3(D)->code, D.29893
	movzwl	%dx, %edx	# D.29893, D.29892
	cmpl	$75, %edx	#, D.29892
	jb	.L757	#,
	cmpl	$76, %edx	#, D.29892
	jbe	.L758	#,
	subl	$78, %edx	#, tmp70
	cmpl	$1, %edx	#, tmp70
	ja	.L757	#,
.L758:
	.loc 1 3414 0
	movzbl	2(%rax), %eax	# op_3(D)->mode, D.29891
	movzbl	%al, %eax	# D.29891, D.29890
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29894
	cmpl	$2, %eax	#, D.29894
	sete	%al	#, D.29895
	movzbl	%al, %eax	# D.29895, D.29890
	jmp	.L756	#
.L757:
	.loc 1 3417 0
	movl	$0, %eax	#, D.29890
.L756:
	.loc 1 3419 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE56:
	.size	binary_fp_operator, .-binary_fp_operator
	.globl	mult_operator
	.type	mult_operator, @function
mult_operator:
.LFB57:
	.loc 1 3425 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3426 0
	movzwl	(%rax), %eax	# op_1(D)->code, D.29896
	cmpw	$78, %ax	#, D.29896
	sete	%al	#, D.29897
	movzbl	%al, %eax	# D.29897, D.29898
	.loc 1 3427 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE57:
	.size	mult_operator, .-mult_operator
	.globl	div_operator
	.type	div_operator, @function
div_operator:
.LFB58:
	.loc 1 3433 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# op, op
	movl	%esi, -4(%rbp)	# mode, mode
	.loc 1 3434 0
	movzwl	(%rax), %eax	# op_1(D)->code, D.29899
	cmpw	$79, %ax	#, D.29899
	sete	%al	#, D.29900
	movzbl	%al, %eax	# D.29900, D.29901
	.loc 1 3435 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE58:
	.size	div_operator, .-div_operator
	.globl	arith_or_logical_operator
	.type	arith_or_logical_operator, @function
arith_or_logical_operator:
.LFB59:
	.loc 1 3441 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 3443 0
	cmpl	$0, -12(%rbp)	#, mode
	je	.L764	#,
	.loc 1 3442 0
	movq	-8(%rbp), %rax	# op, tmp70
	movzbl	2(%rax), %eax	# op_3(D)->mode, D.29902
	movzbl	%al, %eax	# D.29902, D.29903
	cmpl	-12(%rbp), %eax	# mode, D.29903
	jne	.L765	#,
.L764:
	.loc 1 3443 0 discriminator 1
	movq	-8(%rbp), %rax	# op, tmp71
	movzwl	(%rax), %eax	# op_3(D)->code, D.29904
	movzwl	%ax, %eax	# D.29904, D.29905
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.29906
	cmpb	$99, %al	#, D.29906
	je	.L766	#,
	.loc 1 3444 0
	movq	-8(%rbp), %rax	# op, tmp73
	movzwl	(%rax), %eax	# op_3(D)->code, D.29904
	movzwl	%ax, %eax	# D.29904, D.29905
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.29906
	cmpb	$50, %al	#, D.29906
	jne	.L765	#,
.L766:
	.loc 1 3443 0 discriminator 2
	movl	$1, %eax	#, iftmp.417
	jmp	.L767	#
.L765:
	.loc 1 3443 0 is_stmt 0
	movl	$0, %eax	#, iftmp.417
.L767:
	.loc 1 3445 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE59:
	.size	arith_or_logical_operator, .-arith_or_logical_operator
	.globl	memory_displacement_operand
	.type	memory_displacement_operand, @function
memory_displacement_operand:
.LFB60:
	.loc 1 3453 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rbx	# op, op
	movl	%esi, -52(%rbp)	# mode, mode
	.loc 1 3456 0
	movl	-52(%rbp), %eax	# mode, tmp67
	movl	%eax, %esi	# tmp67,
	movq	%rbx, %rdi	# op,
	call	memory_operand	#
	testl	%eax, %eax	# D.29907
	jne	.L770	#,
	.loc 1 3457 0
	movl	$0, %eax	#, D.29907
	jmp	.L773	#
.L770:
	.loc 1 3459 0
	movq	8(%rbx), %rax	# op_2(D)->fld[0].rtx, D.29908
	leaq	-48(%rbp), %rdx	#, tmp68
	movq	%rdx, %rsi	# tmp68,
	movq	%rax, %rdi	# D.29908,
	call	ix86_decompose_address	#
	testl	%eax, %eax	# D.29907
	jne	.L772	#,
	.loc 1 3460 0
	movl	$__FUNCTION__.15299, %edx	#,
	movl	$3460, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L772:
	.loc 1 3462 0
	movq	-32(%rbp), %rax	# parts.disp, D.29908
	testq	%rax, %rax	# D.29908
	setne	%al	#, D.29909
	movzbl	%al, %eax	# D.29909, D.29907
.L773:
	.loc 1 3463 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE60:
	.size	memory_displacement_operand, .-memory_displacement_operand
	.globl	cmpsi_operand
	.type	cmpsi_operand, @function
cmpsi_operand:
.LFB61:
	.loc 1 3475 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# op, op
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 3476 0
	movl	-12(%rbp), %edx	# mode, tmp80
	movq	-8(%rbp), %rax	# op, tmp81
	movl	%edx, %esi	# tmp80,
	movq	%rax, %rdi	# tmp81,
	call	nonimmediate_operand	#
	testl	%eax, %eax	# D.29910
	je	.L775	#,
	.loc 1 3477 0
	movl	$1, %eax	#, D.29910
	jmp	.L776	#
.L775:
	.loc 1 3479 0
	movq	-8(%rbp), %rax	# op, tmp82
	movzwl	(%rax), %eax	# op_2(D)->code, D.29911
	cmpw	$83, %ax	#, D.29911
	jne	.L777	#,
	.loc 1 3480 0
	movq	-8(%rbp), %rax	# op, tmp83
	movzbl	2(%rax), %eax	# op_2(D)->mode, D.29912
	cmpb	$4, %al	#, D.29912
	jne	.L777	#,
	.loc 1 3481 0
	movq	-8(%rbp), %rax	# op, tmp84
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, D.29913
	movzwl	(%rax), %eax	# _8->code, D.29911
	cmpw	$133, %ax	#, D.29911
	jne	.L777	#,
	.loc 1 3482 0
	movq	-8(%rbp), %rax	# op, tmp85
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, D.29913
	movq	16(%rax), %rax	# _10->fld[1].rtx, D.29913
	movzwl	(%rax), %eax	# _11->code, D.29911
	cmpw	$54, %ax	#, D.29911
	jne	.L777	#,
	.loc 1 3483 0
	movq	-8(%rbp), %rax	# op, tmp86
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, D.29913
	movq	24(%rax), %rax	# _13->fld[2].rtx, D.29913
	movzwl	(%rax), %eax	# _14->code, D.29911
	cmpw	$54, %ax	#, D.29911
	jne	.L777	#,
	.loc 1 3484 0
	movq	-8(%rbp), %rax	# op, tmp87
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, D.29913
	movq	16(%rax), %rax	# _16->fld[1].rtx, D.29913
	movq	8(%rax), %rax	# _17->fld[0].rtwint, D.29914
	cmpq	$8, %rax	#, D.29914
	jne	.L777	#,
	.loc 1 3485 0
	movq	-8(%rbp), %rax	# op, tmp88
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, D.29913
	movq	24(%rax), %rax	# _19->fld[2].rtx, D.29913
	movq	8(%rax), %rax	# _20->fld[0].rtwint, D.29914
	cmpq	$8, %rax	#, D.29914
	jne	.L777	#,
	.loc 1 3486 0
	movq	-8(%rbp), %rax	# op, tmp89
	movq	16(%rax), %rax	# op_2(D)->fld[1].rtx, D.29913
	movzwl	(%rax), %eax	# _22->code, D.29911
	cmpw	$54, %ax	#, D.29911
	jne	.L777	#,
	.loc 1 3487 0
	movl	$1, %eax	#, D.29910
	jmp	.L776	#
.L777:
	.loc 1 3489 0
	movl	$0, %eax	#, D.29910
.L776:
	.loc 1 3490 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE61:
	.size	cmpsi_operand, .-cmpsi_operand
	.globl	long_memory_operand
	.type	long_memory_operand, @function
long_memory_operand:
.LFB62:
	.loc 1 3499 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rbx	# op, op
	movl	%esi, -20(%rbp)	# mode, mode
	.loc 1 3500 0
	movl	-20(%rbp), %eax	# mode, tmp65
	movl	%eax, %esi	# tmp65,
	movq	%rbx, %rdi	# op,
	call	memory_operand	#
	testl	%eax, %eax	# D.29915
	jne	.L779	#,
	.loc 1 3501 0
	movl	$0, %eax	#, D.29915
	jmp	.L780	#
.L779:
	.loc 1 3503 0
	movq	%rbx, %rdi	# op,
	call	memory_address_length	#
	testl	%eax, %eax	# D.29915
	setne	%al	#, D.29916
	movzbl	%al, %eax	# D.29916, D.29915
.L780:
	.loc 1 3504 0
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE62:
	.size	long_memory_operand, .-long_memory_operand
	.globl	aligned_operand
	.type	aligned_operand, @function
aligned_operand:
.LFB63:
	.loc 1 3512 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# op, op
	movl	%esi, -44(%rbp)	# mode, mode
	.loc 1 3515 0
	movl	-44(%rbp), %edx	# mode, tmp93
	movq	-40(%rbp), %rax	# op, tmp94
	movl	%edx, %esi	# tmp93,
	movq	%rax, %rdi	# tmp94,
	call	general_operand	#
	testl	%eax, %eax	# D.29917
	jne	.L782	#,
	.loc 1 3516 0
	movl	$0, %eax	#, D.29917
	jmp	.L793	#
.L782:
	.loc 1 3519 0
	movq	-40(%rbp), %rax	# op, tmp95
	movzwl	(%rax), %eax	# op_2(D)->code, D.29918
	cmpw	$66, %ax	#, D.29918
	je	.L784	#,
	.loc 1 3520 0
	movl	$1, %eax	#, D.29917
	jmp	.L793	#
.L784:
	.loc 1 3523 0
	movq	-40(%rbp), %rax	# op, tmp96
	movzbl	3(%rax), %eax	# *op_2(D), D.29919
	andl	$8, %eax	#, D.29919
	testb	%al, %al	# D.29919
	je	.L785	#,
	.loc 1 3524 0
	movl	$0, %eax	#, D.29917
	jmp	.L793	#
.L785:
	.loc 1 3526 0
	movq	-40(%rbp), %rax	# op, tmp97
	movq	8(%rax), %rax	# op_2(D)->fld[0].rtx, tmp98
	movq	%rax, -40(%rbp)	# tmp98, op
	.loc 1 3529 0
	movq	-40(%rbp), %rax	# op, tmp99
	movzwl	(%rax), %eax	# op_11->code, D.29918
	cmpw	$96, %ax	#, D.29918
	je	.L786	#,
	.loc 1 3530 0
	movq	-40(%rbp), %rax	# op, tmp100
	movzwl	(%rax), %eax	# op_11->code, D.29918
	cmpw	$99, %ax	#, D.29918
	jne	.L787	#,
.L786:
	.loc 1 3531 0
	movl	$1, %eax	#, D.29917
	jmp	.L793	#
.L787:
	.loc 1 3534 0
	leaq	-32(%rbp), %rdx	#, tmp101
	movq	-40(%rbp), %rax	# op, tmp102
	movq	%rdx, %rsi	# tmp101,
	movq	%rax, %rdi	# tmp102,
	call	ix86_decompose_address	#
	testl	%eax, %eax	# D.29917
	jne	.L788	#,
	.loc 1 3535 0
	movl	$__FUNCTION__.15313, %edx	#,
	movl	$3535, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L788:
	.loc 1 3538 0
	movq	-24(%rbp), %rax	# parts.index, D.29920
	testq	%rax, %rax	# D.29920
	je	.L789	#,
	.loc 1 3540 0
	movq	-8(%rbp), %rax	# parts.scale, D.29921
	cmpq	$3, %rax	#, D.29921
	jg	.L789	#,
	.loc 1 3541 0
	movq	cfun(%rip), %rax	# cfun, cfun.418
	movq	24(%rax), %rax	# cfun.418_17->emit, D.29922
	movq	64(%rax), %rdx	# _18->regno_pointer_align, D.29923
	movq	-24(%rbp), %rax	# parts.index, D.29920
	movl	8(%rax), %eax	# _20->fld[0].rtuint, D.29924
	movl	%eax, %eax	# D.29924, D.29925
	addq	%rdx, %rax	# D.29923, D.29923
	movzbl	(%rax), %eax	# *_23, D.29919
	cmpb	$31, %al	#, D.29919
	ja	.L789	#,
	.loc 1 3542 0
	movl	$0, %eax	#, D.29917
	jmp	.L793	#
.L789:
	.loc 1 3544 0
	movq	-32(%rbp), %rax	# parts.base, D.29920
	testq	%rax, %rax	# D.29920
	je	.L790	#,
	.loc 1 3546 0
	movq	cfun(%rip), %rax	# cfun, cfun.419
	movq	24(%rax), %rax	# cfun.419_27->emit, D.29922
	movq	64(%rax), %rdx	# _28->regno_pointer_align, D.29923
	movq	-32(%rbp), %rax	# parts.base, D.29920
	movl	8(%rax), %eax	# _30->fld[0].rtuint, D.29924
	movl	%eax, %eax	# D.29924, D.29925
	addq	%rdx, %rax	# D.29923, D.29923
	movzbl	(%rax), %eax	# *_33, D.29919
	cmpb	$31, %al	#, D.29919
	ja	.L790	#,
	.loc 1 3547 0
	movl	$0, %eax	#, D.29917
	jmp	.L793	#
.L790:
	.loc 1 3549 0
	movq	-16(%rbp), %rax	# parts.disp, D.29920
	testq	%rax, %rax	# D.29920
	je	.L791	#,
	.loc 1 3551 0
	movq	-16(%rbp), %rax	# parts.disp, D.29920
	movzwl	(%rax), %eax	# _37->code, D.29918
	cmpw	$54, %ax	#, D.29918
	jne	.L792	#,
	.loc 1 3552 0
	movq	-16(%rbp), %rax	# parts.disp, D.29920
	movq	8(%rax), %rax	# _39->fld[0].rtwint, D.29921
	andl	$3, %eax	#, D.29921
	testq	%rax, %rax	# D.29921
	je	.L791	#,
.L792:
	.loc 1 3553 0
	movl	$0, %eax	#, D.29917
	jmp	.L793	#
.L791:
	.loc 1 3557 0
	movl	$1, %eax	#, D.29917
.L793:
	.loc 1 3558 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE63:
	.size	aligned_operand, .-aligned_operand
	.globl	standard_80387_constant_p
	.type	standard_80387_constant_p, @function
standard_80387_constant_p:
.LFB64:
	.loc 1 3567 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# x, x
	.loc 1 3568 0
	movq	-8(%rbp), %rax	# x, tmp77
	movzwl	(%rax), %eax	# x_2(D)->code, D.29927
	cmpw	$55, %ax	#, D.29927
	jne	.L795	#,
	.loc 1 3568 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp78
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.29928
	movzbl	%al, %eax	# D.29928, D.29926
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29929
	cmpl	$2, %eax	#, D.29929
	je	.L796	#,
	movq	-8(%rbp), %rax	# x, tmp80
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.29928
	movzbl	%al, %eax	# D.29928, D.29926
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29929
	cmpl	$6, %eax	#, D.29929
	je	.L796	#,
	movq	-8(%rbp), %rax	# x, tmp82
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.29928
	movzbl	%al, %eax	# D.29928, D.29926
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.29929
	cmpl	$8, %eax	#, D.29929
	je	.L796	#,
.L795:
	.loc 1 3569 0 is_stmt 1
	movl	$-1, %eax	#, D.29926
	jmp	.L797	#
.L796:
	.loc 1 3573 0
	movq	-8(%rbp), %rax	# x, tmp84
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.29928
	movzbl	%al, %eax	# D.29928, D.29926
	cltq
	movq	const_tiny_rtx(,%rax,8), %rax	# const_tiny_rtx, D.29930
	cmpq	-8(%rbp), %rax	# x, D.29930
	jne	.L798	#,
	.loc 1 3574 0
	movl	$1, %eax	#, D.29926
	jmp	.L797	#
.L798:
	.loc 1 3575 0
	movq	-8(%rbp), %rax	# x, tmp86
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.29928
	movzbl	%al, %eax	# D.29928, D.29926
	cltq
	addq	$59, %rax	#, tmp88
	movq	const_tiny_rtx(,%rax,8), %rax	# const_tiny_rtx, D.29930
	cmpq	-8(%rbp), %rax	# x, D.29930
	jne	.L799	#,
	.loc 1 3576 0
	movl	$2, %eax	#, D.29926
	jmp	.L797	#
.L799:
	.loc 1 3577 0
	movl	$0, %eax	#, D.29926
.L797:
	.loc 1 3578 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE64:
	.size	standard_80387_constant_p, .-standard_80387_constant_p
	.globl	standard_sse_constant_p
	.type	standard_sse_constant_p, @function
standard_sse_constant_p:
.LFB65:
	.loc 1 3585 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# x, x
	.loc 1 3586 0
	movq	-8(%rbp), %rax	# x, tmp66
	movzwl	(%rax), %eax	# x_2(D)->code, D.29932
	cmpw	$55, %ax	#, D.29932
	je	.L801	#,
	.loc 1 3587 0
	movl	$-1, %eax	#, D.29931
	jmp	.L802	#
.L801:
	.loc 1 3588 0
	movq	-8(%rbp), %rax	# x, tmp67
	movzbl	2(%rax), %eax	# x_2(D)->mode, D.29933
	movzbl	%al, %eax	# D.29933, D.29931
	cltq
	movq	const_tiny_rtx(,%rax,8), %rax	# const_tiny_rtx, D.29934
	cmpq	-8(%rbp), %rax	# x, D.29934
	sete	%al	#, D.29935
	movzbl	%al, %eax	# D.29935, D.29931
.L802:
	.loc 1 3589 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE65:
	.size	standard_sse_constant_p, .-standard_sse_constant_p
	.globl	symbolic_reference_mentioned_p
	.type	symbolic_reference_mentioned_p, @function
symbolic_reference_mentioned_p:
.LFB66:
	.loc 1 3596 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -40(%rbp)	# op, op
	.loc 1 3600 0
	movq	-40(%rbp), %rax	# op, tmp85
	movzwl	(%rax), %eax	# op_4(D)->code, D.29937
	cmpw	$68, %ax	#, D.29937
	je	.L804	#,
	.loc 1 3600 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# op, tmp86
	movzwl	(%rax), %eax	# op_4(D)->code, D.29937
	cmpw	$67, %ax	#, D.29937
	jne	.L805	#,
.L804:
	.loc 1 3601 0 is_stmt 1
	movl	$1, %eax	#, D.29936
	jmp	.L806	#
.L805:
	.loc 1 3603 0
	movq	-40(%rbp), %rax	# op, tmp87
	movzwl	(%rax), %eax	# op_4(D)->code, D.29937
	movzwl	%ax, %eax	# D.29937, D.29936
	cltq
	movq	rtx_format(,%rax,8), %r13	# rtx_format, fmt
	.loc 1 3604 0
	movq	-40(%rbp), %rax	# op, tmp89
	movzwl	(%rax), %eax	# op_4(D)->code, D.29937
	movzwl	%ax, %eax	# D.29937, D.29936
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.29938
	movzbl	%al, %eax	# D.29938, D.29936
	leal	-1(%rax), %ebx	#, i
	jmp	.L807	#
.L813:
	.loc 1 3606 0
	movslq	%ebx, %rax	# i, D.29939
	addq	%r13, %rax	# fmt, D.29940
	movzbl	(%rax), %eax	# *_16, D.29941
	cmpb	$69, %al	#, D.29941
	jne	.L808	#,
.LBB31:
	.loc 1 3610 0
	movq	-40(%rbp), %rax	# op, tmp91
	movslq	%ebx, %rdx	# i, tmp92
	movq	8(%rax,%rdx,8), %rax	# op_4(D)->fld[i_1].rtvec, D.29942
	movl	(%rax), %eax	# _18->num_elem, D.29936
	leal	-1(%rax), %r12d	#, j
	jmp	.L809	#
.L811:
	.loc 1 3611 0
	movq	-40(%rbp), %rax	# op, tmp93
	movslq	%ebx, %rdx	# i, tmp94
	movq	8(%rax,%rdx,8), %rax	# op_4(D)->fld[i_1].rtvec, D.29942
	movslq	%r12d, %rdx	# j, tmp95
	movq	8(%rax,%rdx,8), %rax	# _21->elem, D.29943
	movq	%rax, %rdi	# D.29943,
	call	symbolic_reference_mentioned_p	#
	testl	%eax, %eax	# D.29936
	je	.L810	#,
	.loc 1 3612 0
	movl	$1, %eax	#, D.29936
	jmp	.L806	#
.L810:
	.loc 1 3610 0
	subl	$1, %r12d	#, j
.L809:
	.loc 1 3610 0 is_stmt 0 discriminator 1
	testl	%r12d, %r12d	# j
	jns	.L811	#,
.LBE31:
	jmp	.L812	#
.L808:
	.loc 1 3615 0 is_stmt 1
	movslq	%ebx, %rax	# i, D.29939
	addq	%r13, %rax	# fmt, D.29940
	movzbl	(%rax), %eax	# *_27, D.29941
	cmpb	$101, %al	#, D.29941
	jne	.L812	#,
	.loc 1 3615 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# op, tmp96
	movslq	%ebx, %rdx	# i, tmp97
	movq	8(%rax,%rdx,8), %rax	# op_4(D)->fld[i_1].rtx, D.29943
	movq	%rax, %rdi	# D.29943,
	call	symbolic_reference_mentioned_p	#
	testl	%eax, %eax	# D.29936
	je	.L812	#,
	.loc 1 3616 0 is_stmt 1
	movl	$1, %eax	#, D.29936
	jmp	.L806	#
.L812:
	.loc 1 3604 0
	subl	$1, %ebx	#, i
.L807:
	.loc 1 3604 0 is_stmt 0 discriminator 1
	testl	%ebx, %ebx	# i
	jns	.L813	#,
	.loc 1 3619 0 is_stmt 1
	movl	$0, %eax	#, D.29936
.L806:
	.loc 1 3620 0
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE66:
	.size	symbolic_reference_mentioned_p, .-symbolic_reference_mentioned_p
	.globl	ix86_can_use_return_insn_p
	.type	ix86_can_use_return_insn_p, @function
ix86_can_use_return_insn_p:
.LFB67:
	.loc 1 3636 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	.loc 1 3644 0
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.420
	testl	%eax, %eax	# reload_completed.420
	je	.L815	#,
	.loc 1 3644 0 is_stmt 0 discriminator 1
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.421
	testl	%eax, %eax	# frame_pointer_needed.421
	je	.L816	#,
.L815:
	.loc 1 3645 0 is_stmt 1
	movl	$0, %eax	#, D.29944
	jmp	.L821	#
.L816:
	.loc 1 3649 0
	movq	cfun(%rip), %rax	# cfun, cfun.422
	movl	64(%rax), %eax	# cfun.422_5->pops_args, D.29944
	testl	%eax, %eax	# D.29944
	je	.L818	#,
	.loc 1 3650 0
	movq	cfun(%rip), %rax	# cfun, cfun.423
	movl	68(%rax), %eax	# cfun.423_7->args_size, D.29944
	cmpl	$32767, %eax	#, D.29944
	jle	.L818	#,
	.loc 1 3651 0
	movl	$0, %eax	#, D.29944
	jmp	.L821	#
.L818:
	.loc 1 3653 0
	leaq	-80(%rbp), %rax	#, tmp70
	movq	%rax, %rdi	# tmp70,
	call	ix86_compute_frame_layout	#
	.loc 1 3654 0
	movq	-40(%rbp), %rax	# frame.to_allocate, D.29945
	testq	%rax, %rax	# D.29945
	jne	.L819	#,
	.loc 1 3654 0 is_stmt 0 discriminator 1
	movl	-80(%rbp), %eax	# frame.nregs, D.29944
	testl	%eax, %eax	# D.29944
	jne	.L819	#,
	.loc 1 3654 0 discriminator 3
	movl	$1, %eax	#, iftmp.424
	jmp	.L820	#
.L819:
	.loc 1 3654 0 discriminator 2
	movl	$0, %eax	#, iftmp.424
.L820:
.L821:
	.loc 1 3655 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE67:
	.size	ix86_can_use_return_insn_p, .-ix86_can_use_return_insn_p
	.globl	x86_64_sign_extended_value
	.type	x86_64_sign_extended_value, @function
x86_64_sign_extended_value:
.LFB68:
	.loc 1 3661 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# value, value
	.loc 1 3662 0
	movq	-40(%rbp), %rax	# value, tmp97
	movzwl	(%rax), %eax	# value_4(D)->code, D.29947
	movzwl	%ax, %eax	# D.29947, D.29948
	cmpl	$58, %eax	#, D.29948
	je	.L824	#,
	cmpl	$58, %eax	#, D.29948
	ja	.L825	#,
	cmpl	$54, %eax	#, D.29948
	je	.L826	#,
	jmp	.L823	#
.L825:
	cmpl	$67, %eax	#, D.29948
	je	.L827	#,
	cmpl	$68, %eax	#, D.29948
	je	.L828	#,
	jmp	.L823	#
.L826:
.LBB32:
	.loc 1 3672 0
	movq	-40(%rbp), %rax	# value, tmp98
	movq	8(%rax), %rax	# value_4(D)->fld[0].rtwint, D.29949
	movl	$5, %esi	#,
	movq	%rax, %rdi	# D.29949,
	call	trunc_int_for_mode	#
	movq	%rax, -32(%rbp)	# tmp99, val
	.loc 1 3673 0
	movq	-32(%rbp), %rax	# val, tmp100
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp100,
	call	trunc_int_for_mode	#
	cmpq	-32(%rbp), %rax	# val, D.29949
	sete	%al	#, D.29950
	movzbl	%al, %eax	# D.29950, D.29946
	jmp	.L829	#
.L828:
.LBE32:
	.loc 1 3679 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.426
	cmpl	$1, %eax	#, ix86_cmodel.426
	je	.L830	#,
	.loc 1 3679 0 is_stmt 0 discriminator 2
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.427
	cmpl	$2, %eax	#, ix86_cmodel.427
	jne	.L831	#,
.L830:
	.loc 1 3679 0 discriminator 1
	movl	$1, %eax	#, iftmp.425
	jmp	.L832	#
.L831:
	.loc 1 3679 0 discriminator 3
	movl	$0, %eax	#, iftmp.425
.L832:
	.loc 1 3679 0 discriminator 4
	jmp	.L829	#
.L827:
	.loc 1 3683 0 is_stmt 1
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.429
	cmpl	$4, %eax	#, ix86_cmodel.429
	je	.L833	#,
	.loc 1 3683 0 is_stmt 0 discriminator 1
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.430
	cmpl	$5, %eax	#, ix86_cmodel.430
	je	.L833	#,
	.loc 1 3683 0 discriminator 3
	movl	$1, %eax	#, iftmp.428
	jmp	.L834	#
.L833:
	.loc 1 3683 0 discriminator 2
	movl	$0, %eax	#, iftmp.428
.L834:
	.loc 1 3683 0 discriminator 4
	jmp	.L829	#
.L824:
	.loc 1 3688 0 is_stmt 1
	movq	-40(%rbp), %rax	# value, tmp101
	movq	8(%rax), %rax	# value_4(D)->fld[0].rtx, D.29951
	movzwl	(%rax), %eax	# _22->code, D.29947
	cmpw	$42, %ax	#, D.29947
	jne	.L835	#,
	.loc 1 3689 0
	movq	-40(%rbp), %rax	# value, tmp102
	movq	8(%rax), %rax	# value_4(D)->fld[0].rtx, D.29951
	movq	8(%rax), %rax	# _24->fld[0].rtvec, D.29952
	movl	(%rax), %eax	# _25->num_elem, D.29946
	cmpl	$1, %eax	#, D.29946
	jne	.L835	#,
	.loc 1 3690 0
	movq	-40(%rbp), %rax	# value, tmp103
	movq	8(%rax), %rax	# value_4(D)->fld[0].rtx, D.29951
	movl	16(%rax), %eax	# _27->fld[1].rtint, D.29946
	cmpl	$15, %eax	#, D.29946
	jne	.L835	#,
	.loc 1 3691 0
	movl	$1, %eax	#, D.29946
	jmp	.L829	#
.L835:
	.loc 1 3692 0
	movq	-40(%rbp), %rax	# value, tmp104
	movq	8(%rax), %rax	# value_4(D)->fld[0].rtx, D.29951
	movzwl	(%rax), %eax	# _30->code, D.29947
	cmpw	$75, %ax	#, D.29947
	jne	.L836	#,
.LBB33:
	.loc 1 3694 0
	movq	-40(%rbp), %rax	# value, tmp105
	movq	8(%rax), %rax	# value_4(D)->fld[0].rtx, D.29951
	movq	8(%rax), %rax	# _32->fld[0].rtx, tmp106
	movq	%rax, -24(%rbp)	# tmp106, op1
	.loc 1 3695 0
	movq	-40(%rbp), %rax	# value, tmp107
	movq	8(%rax), %rax	# value_4(D)->fld[0].rtx, D.29951
	movq	16(%rax), %rax	# _34->fld[1].rtx, tmp108
	movq	%rax, -16(%rbp)	# tmp108, op2
	.loc 1 3698 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.431
	cmpl	$4, %eax	#, ix86_cmodel.431
	jne	.L837	#,
	.loc 1 3699 0
	movl	$0, %eax	#, D.29946
	jmp	.L829	#
.L837:
	.loc 1 3700 0
	movq	-16(%rbp), %rax	# op2, tmp109
	movzwl	(%rax), %eax	# op2_35->code, D.29947
	cmpw	$54, %ax	#, D.29947
	je	.L838	#,
	.loc 1 3701 0
	movl	$0, %eax	#, D.29946
	jmp	.L829	#
.L838:
	.loc 1 3702 0
	movq	-16(%rbp), %rax	# op2, tmp110
	movq	8(%rax), %rax	# op2_35->fld[0].rtwint, D.29949
	movl	$5, %esi	#,
	movq	%rax, %rdi	# D.29949,
	call	trunc_int_for_mode	#
	movq	%rax, -8(%rbp)	# tmp111, offset
	.loc 1 3703 0
	movq	-24(%rbp), %rax	# op1, tmp112
	movzwl	(%rax), %eax	# op1_33->code, D.29947
	movzwl	%ax, %eax	# D.29947, D.29948
	cmpl	$67, %eax	#, D.29948
	je	.L840	#,
	cmpl	$68, %eax	#, D.29948
	jne	.L847	#,
	.loc 1 3710 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.432
	cmpl	$1, %eax	#, ix86_cmodel.432
	jne	.L842	#,
	.loc 1 3711 0
	cmpq	$1073741823, -8(%rbp)	#, offset
	jg	.L842	#,
	.loc 1 3712 0
	movq	-8(%rbp), %rax	# offset, tmp113
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp113,
	call	trunc_int_for_mode	#
	cmpq	-8(%rbp), %rax	# offset, D.29949
	jne	.L842	#,
	.loc 1 3713 0
	movl	$1, %eax	#, D.29946
	jmp	.L829	#
.L842:
	.loc 1 3718 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.433
	cmpl	$2, %eax	#, ix86_cmodel.433
	jne	.L843	#,
	.loc 1 3719 0
	cmpq	$0, -8(%rbp)	#, offset
	jle	.L843	#,
	.loc 1 3720 0
	movq	-8(%rbp), %rax	# offset, tmp114
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp114,
	call	trunc_int_for_mode	#
	cmpq	-8(%rbp), %rax	# offset, D.29949
	jne	.L843	#,
	.loc 1 3721 0
	movl	$1, %eax	#, D.29946
	jmp	.L829	#
.L843:
	.loc 1 3722 0
	jmp	.L836	#
.L840:
	.loc 1 3726 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.434
	cmpl	$1, %eax	#, ix86_cmodel.434
	je	.L844	#,
	.loc 1 3726 0 is_stmt 0 discriminator 1
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.435
	cmpl	$3, %eax	#, ix86_cmodel.435
	jne	.L845	#,
.L844:
	.loc 1 3727 0 is_stmt 1
	cmpq	$1073741823, -8(%rbp)	#, offset
	jg	.L845	#,
	.loc 1 3728 0
	movq	-8(%rbp), %rax	# offset, tmp115
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp115,
	call	trunc_int_for_mode	#
	cmpq	-8(%rbp), %rax	# offset, D.29949
	jne	.L845	#,
	.loc 1 3729 0
	movl	$1, %eax	#, D.29946
	jmp	.L829	#
.L845:
	.loc 1 3730 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.436
	cmpl	$2, %eax	#, ix86_cmodel.436
	jne	.L846	#,
	.loc 1 3731 0
	cmpq	$0, -8(%rbp)	#, offset
	jle	.L846	#,
	.loc 1 3732 0
	movq	-8(%rbp), %rax	# offset, tmp116
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp116,
	call	trunc_int_for_mode	#
	cmpq	-8(%rbp), %rax	# offset, D.29949
	jne	.L846	#,
	.loc 1 3733 0
	movl	$1, %eax	#, D.29946
	jmp	.L829	#
.L846:
	.loc 1 3734 0
	jmp	.L836	#
.L847:
	.loc 1 3736 0
	movl	$0, %eax	#, D.29946
	jmp	.L829	#
.L836:
.LBE33:
	.loc 1 3739 0
	movl	$0, %eax	#, D.29946
	jmp	.L829	#
.L823:
	.loc 1 3741 0
	movl	$0, %eax	#, D.29946
.L829:
	.loc 1 3743 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE68:
	.size	x86_64_sign_extended_value, .-x86_64_sign_extended_value
	.globl	x86_64_zero_extended_value
	.type	x86_64_zero_extended_value, @function
x86_64_zero_extended_value:
.LFB69:
	.loc 1 3749 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# value, value
	.loc 1 3750 0
	movq	-24(%rbp), %rax	# value, tmp86
	movzwl	(%rax), %eax	# value_3(D)->code, D.29955
	movzwl	%ax, %eax	# D.29955, D.29956
	subl	$54, %eax	#, tmp87
	cmpl	$14, %eax	#, tmp87
	ja	.L849	#,
	movl	%eax, %eax	# tmp87, tmp88
	movq	.L851(,%rax,8), %rax	#, tmp89
	jmp	*%rax	# tmp89
	.section	.rodata
	.align 8
	.align 4
.L851:
	.quad	.L850
	.quad	.L852
	.quad	.L849
	.quad	.L849
	.quad	.L853
	.quad	.L849
	.quad	.L849
	.quad	.L849
	.quad	.L849
	.quad	.L849
	.quad	.L849
	.quad	.L849
	.quad	.L849
	.quad	.L854
	.quad	.L855
	.text
.L852:
	.loc 1 3757 0
	movl	$0, %eax	#, D.29954
	jmp	.L856	#
.L850:
	.loc 1 3762 0
	movq	-24(%rbp), %rax	# value, tmp90
	movq	8(%rax), %rdx	# value_3(D)->fld[0].rtwint, D.29957
	movabsq	$-4294967296, %rax	#, tmp91
	andq	%rdx, %rax	# D.29957, D.29957
	testq	%rax, %rax	# D.29957
	sete	%al	#, D.29958
	movzbl	%al, %eax	# D.29958, D.29954
	jmp	.L856	#
.L855:
	.loc 1 3767 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.438
	cmpl	$1, %eax	#, ix86_cmodel.438
	sete	%al	#, D.29958
	movzbl	%al, %eax	# D.29958, D.29954
	jmp	.L856	#
.L854:
	.loc 1 3771 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.440
	cmpl	$1, %eax	#, ix86_cmodel.440
	je	.L857	#,
	.loc 1 3771 0 is_stmt 0 discriminator 2
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.441
	cmpl	$3, %eax	#, ix86_cmodel.441
	jne	.L858	#,
.L857:
	.loc 1 3771 0 discriminator 1
	movl	$1, %eax	#, iftmp.439
	jmp	.L859	#
.L858:
	.loc 1 3771 0 discriminator 3
	movl	$0, %eax	#, iftmp.439
.L859:
	.loc 1 3771 0 discriminator 4
	jmp	.L856	#
.L853:
	.loc 1 3776 0 is_stmt 1
	movq	-24(%rbp), %rax	# value, tmp92
	movq	8(%rax), %rax	# value_3(D)->fld[0].rtx, D.29959
	movzwl	(%rax), %eax	# _19->code, D.29955
	cmpw	$75, %ax	#, D.29955
	jne	.L860	#,
.LBB34:
	.loc 1 3778 0
	movq	-24(%rbp), %rax	# value, tmp93
	movq	8(%rax), %rax	# value_3(D)->fld[0].rtx, D.29959
	movq	8(%rax), %rax	# _21->fld[0].rtx, tmp94
	movq	%rax, -16(%rbp)	# tmp94, op1
	.loc 1 3779 0
	movq	-24(%rbp), %rax	# value, tmp95
	movq	8(%rax), %rax	# value_3(D)->fld[0].rtx, D.29959
	movq	16(%rax), %rax	# _23->fld[1].rtx, tmp96
	movq	%rax, -8(%rbp)	# tmp96, op2
	.loc 1 3781 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.442
	cmpl	$4, %eax	#, ix86_cmodel.442
	jne	.L861	#,
	.loc 1 3782 0
	movl	$0, %eax	#, D.29954
	jmp	.L856	#
.L861:
	.loc 1 3783 0
	movq	-16(%rbp), %rax	# op1, tmp97
	movzwl	(%rax), %eax	# op1_22->code, D.29955
	movzwl	%ax, %eax	# D.29955, D.29956
	cmpl	$67, %eax	#, D.29956
	je	.L863	#,
	cmpl	$68, %eax	#, D.29956
	jne	.L867	#,
	.loc 1 3786 0
	movl	$0, %eax	#, D.29954
	jmp	.L856	#
.L863:
	.loc 1 3805 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.444
	cmpl	$1, %eax	#, ix86_cmodel.444
	je	.L865	#,
	.loc 1 3805 0 is_stmt 0 discriminator 1
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.445
	cmpl	$3, %eax	#, ix86_cmodel.445
	jne	.L866	#,
.L865:
	.loc 1 3806 0 is_stmt 1
	movq	-8(%rbp), %rax	# op2, tmp98
	movzwl	(%rax), %eax	# op2_24->code, D.29955
	cmpw	$54, %ax	#, D.29955
	jne	.L866	#,
	.loc 1 3807 0
	movq	-8(%rbp), %rax	# op2, tmp99
	movq	8(%rax), %rax	# op2_24->fld[0].rtwint, D.29957
	movl	$5, %esi	#,
	movq	%rax, %rdi	# D.29957,
	call	trunc_int_for_mode	#
	cmpq	$-65535, %rax	#, D.29957
	jl	.L866	#,
	.loc 1 3808 0
	movq	-8(%rbp), %rax	# op2, tmp100
	movq	8(%rax), %rax	# op2_24->fld[0].rtwint, D.29957
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.29957,
	call	trunc_int_for_mode	#
	.loc 1 3809 0
	movq	-8(%rbp), %rdx	# op2, tmp101
	movq	8(%rdx), %rdx	# op2_24->fld[0].rtwint, D.29957
	.loc 1 3808 0
	cmpq	%rdx, %rax	# D.29957, D.29957
	jne	.L866	#,
	.loc 1 3810 0
	movl	$1, %eax	#, D.29954
	jmp	.L856	#
.L866:
	.loc 1 3811 0
	jmp	.L860	#
.L867:
	.loc 1 3813 0
	movl	$0, %eax	#, D.29954
	jmp	.L856	#
.L860:
.LBE34:
	.loc 1 3816 0
	movl	$0, %eax	#, D.29954
	jmp	.L856	#
.L849:
	.loc 1 3818 0
	movl	$0, %eax	#, D.29954
.L856:
	.loc 1 3820 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE69:
	.size	x86_64_zero_extended_value, .-x86_64_zero_extended_value
	.globl	ix86_frame_pointer_required
	.type	ix86_frame_pointer_required, @function
ix86_frame_pointer_required:
.LFB70:
	.loc 1 3828 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 3831 0
	movq	cfun(%rip), %rax	# cfun, cfun.446
	movq	392(%rax), %rax	# cfun.446_2->machine, D.29961
	movl	1420(%rax), %eax	# _3->accesses_prev_frame, D.29960
	testl	%eax, %eax	# D.29960
	je	.L869	#,
	.loc 1 3832 0
	movl	$1, %eax	#, D.29960
	jmp	.L870	#
.L869:
	.loc 1 3842 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.447
	andl	$128, %eax	#, D.29960
	testl	%eax, %eax	# D.29960
	je	.L871	#,
	.loc 1 3842 0 is_stmt 0 discriminator 1
	call	leaf_function_p	#
	testl	%eax, %eax	# D.29960
	jne	.L871	#,
	.loc 1 3843 0 is_stmt 1
	movl	$1, %eax	#, D.29960
	jmp	.L870	#
.L871:
	.loc 1 3845 0
	movl	$0, %eax	#, D.29960
.L870:
	.loc 1 3846 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE70:
	.size	ix86_frame_pointer_required, .-ix86_frame_pointer_required
	.globl	ix86_setup_frame_addresses
	.type	ix86_setup_frame_addresses, @function
ix86_setup_frame_addresses:
.LFB71:
	.loc 1 3852 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 3853 0
	movq	cfun(%rip), %rax	# cfun, cfun.448
	movq	392(%rax), %rax	# cfun.448_1->machine, D.29962
	movl	$1, 1420(%rax)	#, _2->accesses_prev_frame
	.loc 1 3854 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE71:
	.size	ix86_setup_frame_addresses, .-ix86_setup_frame_addresses
	.local	pic_label_name
	.comm	pic_label_name,32,32
	.section	.rodata
.LC139:
	.string	":\n"
.LC140:
	.string	"mov{l}\t{%1, %0|%0, %1}"
.LC141:
	.string	"ret"
	.text
	.globl	ix86_asm_file_end
	.type	ix86_asm_file_end, @function
ix86_asm_file_end:
.LFB72:
	.loc 1 3864 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# file, file
	.loc 1 3867 0
	movl	$120, %edx	#, x86_deep_branch.449
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.450
	movl	%eax, %ecx	# ix86_cpu.451, tmp73
	sarl	%cl, %edx	# tmp73, D.29963
	movl	%edx, %eax	# D.29963, D.29963
	andl	$1, %eax	#, D.29963
	testl	%eax, %eax	# D.29963
	je	.L873	#,
	.loc 1 3867 0 is_stmt 0 discriminator 1
	movzbl	pic_label_name(%rip), %eax	# pic_label_name, D.29964
	testb	%al, %al	# D.29964
	je	.L873	#,
	.loc 1 3892 0 is_stmt 1
	call	text_section	#
	.loc 1 3902 0
	movq	-24(%rbp), %rax	# file, tmp68
	movl	$pic_label_name, %esi	#,
	movq	%rax, %rdi	# tmp68,
	call	assemble_name	#
	movq	-24(%rbp), %rax	# file, tmp69
	movq	%rax, %rcx	# tmp69,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC139, %edi	#,
	call	fwrite	#
	.loc 1 3904 0
	movq	pic_offset_table_rtx(%rip), %rax	# pic_offset_table_rtx, pic_offset_table_rtx.452
	movq	%rax, -16(%rbp)	# pic_offset_table_rtx.452, xops
	.loc 1 3905 0
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.29965
	movq	%rax, %rsi	# D.29965,
	movl	$4, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -8(%rbp)	# D.29965, xops
	.loc 1 3906 0
	leaq	-16(%rbp), %rax	#, tmp70
	movq	%rax, %rsi	# tmp70,
	movl	$.LC140, %edi	#,
	call	output_asm_insn	#
	.loc 1 3907 0
	leaq	-16(%rbp), %rax	#, tmp71
	movq	%rax, %rsi	# tmp71,
	movl	$.LC141, %edi	#,
	call	output_asm_insn	#
.L873:
	.loc 1 3908 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE72:
	.size	ix86_asm_file_end, .-ix86_asm_file_end
	.section	.rodata
.LC142:
	.string	"_GLOBAL_OFFSET_TABLE_"
.LC143:
	.string	"LPR"
	.text
	.globl	load_pic_register
	.type	load_pic_register, @function
load_pic_register:
.LFB73:
	.loc 1 3912 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 3915 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.453
	andl	$33554432, %eax	#, D.29969
	testl	%eax, %eax	# D.29969
	je	.L878	#,
	.loc 1 3916 0
	movl	$__FUNCTION__.15379, %edx	#,
	movl	$3916, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L878:
	.loc 1 3918 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.455
	andl	$33554432, %eax	#, D.29969
	testl	%eax, %eax	# D.29969
	je	.L879	#,
	.loc 1 3918 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.454
	jmp	.L880	#
.L879:
	.loc 1 3918 0 discriminator 2
	movl	$4, %eax	#, iftmp.454
.L880:
	.loc 1 3918 0 discriminator 3
	movl	$.LC142, %edx	#,
	movl	%eax, %esi	# iftmp.454,
	movl	$68, %edi	#,
	call	gen_rtx_fmt_s	#
	movq	%rax, -8(%rbp)	# tmp79, gotsym
	.loc 1 3920 0 is_stmt 1 discriminator 3
	movl	$120, %edx	#, x86_deep_branch.456
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.457
	movl	%eax, %ecx	# ix86_cpu.458, tmp86
	sarl	%cl, %edx	# tmp86, D.29969
	movl	%edx, %eax	# D.29969, D.29969
	andl	$1, %eax	#, D.29969
	testl	%eax, %eax	# D.29969
	je	.L881	#,
	.loc 1 3922 0
	movzbl	pic_label_name(%rip), %eax	# pic_label_name, D.29970
	testb	%al, %al	# D.29970
	jne	.L882	#,
	.loc 1 3923 0
	movl	$0, %ecx	#,
	movl	$.LC143, %edx	#,
	movl	$.LC114, %esi	#,
	movl	$pic_label_name, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
.L882:
	.loc 1 3924 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.460
	andl	$33554432, %eax	#, D.29969
	testl	%eax, %eax	# D.29969
	je	.L883	#,
	.loc 1 3924 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.459
	jmp	.L884	#
.L883:
	.loc 1 3924 0 discriminator 2
	movl	$4, %eax	#, iftmp.459
.L884:
	.loc 1 3924 0 discriminator 1
	movl	$pic_label_name, %edx	#,
	movl	%eax, %esi	# iftmp.459,
	movl	$68, %edi	#,
	call	gen_rtx_fmt_s	#
	movq	%rax, %rsi	# D.29971,
	movl	$2, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -16(%rbp)	# tmp80, pclab
	jmp	.L885	#
.L881:
	.loc 1 3928 0 is_stmt 1
	call	gen_label_rtx	#
	movq	%rax, %rdx	# D.29971,
	movl	$0, %esi	#,
	movl	$67, %edi	#,
	call	gen_rtx_fmt_u00	#
	movq	%rax, -16(%rbp)	# tmp81, pclab
.L885:
	.loc 1 3931 0
	movq	pic_offset_table_rtx(%rip), %rax	# pic_offset_table_rtx, pic_offset_table_rtx.461
	movq	-16(%rbp), %rdx	# pclab, tmp82
	movq	%rdx, %rsi	# tmp82,
	movq	%rax, %rdi	# pic_offset_table_rtx.461,
	call	gen_prologue_get_pc	#
	movq	%rax, %rdi	# D.29971,
	call	emit_insn	#
	.loc 1 3933 0
	movq	pic_offset_table_rtx(%rip), %rax	# pic_offset_table_rtx, pic_offset_table_rtx.462
	movq	-16(%rbp), %rdx	# pclab, tmp83
	movq	-8(%rbp), %rcx	# gotsym, tmp84
	movq	%rcx, %rsi	# tmp84,
	movq	%rax, %rdi	# pic_offset_table_rtx.462,
	call	gen_prologue_set_got	#
	movq	%rax, %rdi	# D.29971,
	call	emit_insn	#
	.loc 1 3934 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE73:
	.size	load_pic_register, .-load_pic_register
	.type	gen_push, @function
gen_push:
.LFB74:
	.loc 1 3941 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# arg, arg
	.loc 1 3942 0
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.29974
	movl	target_flags(%rip), %eax	# target_flags, target_flags.464
	andl	$33554432, %eax	#, D.29975
	testl	%eax, %eax	# D.29975
	je	.L887	#,
	.loc 1 3942 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.463
	jmp	.L888	#
.L887:
	.loc 1 3942 0 discriminator 2
	movl	$4, %eax	#, iftmp.463
.L888:
	.loc 1 3942 0 discriminator 3
	movl	%eax, %esi	# iftmp.463,
	movl	$96, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdx	#, D.29974
	movl	target_flags(%rip), %eax	# target_flags, target_flags.466
	andl	$33554432, %eax	#, D.29975
	testl	%eax, %eax	# D.29975
	je	.L889	#,
	.loc 1 3942 0 discriminator 4
	movl	$5, %eax	#, iftmp.465
	jmp	.L890	#
.L889:
	.loc 1 3942 0 discriminator 5
	movl	$4, %eax	#, iftmp.465
.L890:
	.loc 1 3942 0 discriminator 6
	movq	%rdx, %rsi	# D.29974,
	movl	%eax, %edi	# iftmp.465,
	call	gen_rtx_MEM	#
	movq	-8(%rbp), %rdx	# arg, tmp70
	movq	%rdx, %rcx	# tmp70,
	movq	%rax, %rdx	# D.29974,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	.loc 1 3947 0 is_stmt 1 discriminator 6
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE74:
	.size	gen_push, .-gen_push
	.type	ix86_save_reg, @function
ix86_save_reg:
.LFB75:
	.loc 1 3954 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -20(%rbp)	# regno, regno
	movl	%esi, -24(%rbp)	# maybe_eh_return, maybe_eh_return
	.loc 1 3955 0
	movl	-20(%rbp), %edx	# regno, regno.467
	movl	target_flags(%rip), %eax	# target_flags, target_flags.469
	andl	$33554432, %eax	#, D.29977
	testl	%eax, %eax	# D.29977
	jne	.L893	#,
	.loc 1 3955 0 is_stmt 0 discriminator 2
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.470
	testl	%eax, %eax	# flag_pic.470
	jne	.L894	#,
.L893:
	.loc 1 3955 0 discriminator 1
	movl	$-1, %eax	#, iftmp.468
	jmp	.L895	#
.L894:
	movl	$3, %eax	#, iftmp.468
.L895:
	.loc 1 3955 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.468, regno.467
	jne	.L896	#,
	.loc 1 3956 0 is_stmt 1
	movq	cfun(%rip), %rax	# cfun, cfun.471
	movzbl	426(%rax), %eax	# *cfun.471_13, D.29978
	andl	$32, %eax	#, D.29978
	testb	%al, %al	# D.29978
	jne	.L897	#,
	.loc 1 3957 0
	movq	cfun(%rip), %rax	# cfun, cfun.472
	movzbl	426(%rax), %eax	# *cfun.472_16, D.29978
	andl	$16, %eax	#, D.29978
	testb	%al, %al	# D.29978
	jne	.L897	#,
	.loc 1 3958 0
	movq	cfun(%rip), %rax	# cfun, cfun.473
	movzbl	424(%rax), %eax	# *cfun.473_19, D.29978
	andl	$-128, %eax	#, D.29978
	testb	%al, %al	# D.29978
	je	.L896	#,
.L897:
	.loc 1 3959 0
	movl	$1, %eax	#, D.29977
	jmp	.L898	#
.L896:
	.loc 1 3961 0
	movq	cfun(%rip), %rax	# cfun, cfun.474
	movzbl	424(%rax), %eax	# *cfun.474_23, D.29978
	andl	$-128, %eax	#, D.29978
	testb	%al, %al	# D.29978
	je	.L899	#,
	.loc 1 3961 0 is_stmt 0 discriminator 1
	cmpl	$0, -24(%rbp)	#, maybe_eh_return
	je	.L899	#,
.LBB35:
	.loc 1 3964 0 is_stmt 1
	movl	$0, -8(%rbp)	#, i
.L904:
.LBB36:
	.loc 1 3966 0
	cmpl	$1, -8(%rbp)	#, i
	ja	.L900	#,
	.loc 1 3966 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %eax	# i, iftmp.475
	jmp	.L901	#
.L900:
	.loc 1 3966 0 discriminator 2
	movl	$-1, %eax	#, iftmp.475
.L901:
	.loc 1 3966 0 discriminator 3
	movl	%eax, -4(%rbp)	# iftmp.475, test
	.loc 1 3967 0 is_stmt 1 discriminator 3
	cmpl	$-1, -4(%rbp)	#, test
	jne	.L902	#,
	.loc 1 3968 0
	jmp	.L899	#
.L902:
	.loc 1 3969 0
	movl	-20(%rbp), %eax	# regno, regno.476
	cmpl	-4(%rbp), %eax	# test, regno.476
	jne	.L903	#,
	.loc 1 3970 0
	movl	$1, %eax	#, D.29977
	jmp	.L898	#
.L903:
.LBE36:
	.loc 1 3964 0
	addl	$1, -8(%rbp)	#, i
	.loc 1 3971 0
	jmp	.L904	#
.L899:
.LBE35:
	.loc 1 3974 0
	movl	-20(%rbp), %eax	# regno, tmp86
	cltq
	movzbl	regs_ever_live(%rax), %eax	# regs_ever_live, D.29979
	.loc 1 3977 0
	testb	%al, %al	# D.29979
	je	.L905	#,
	.loc 1 3975 0
	movl	-20(%rbp), %eax	# regno, tmp88
	cltq
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.29979
	testb	%al, %al	# D.29979
	jne	.L905	#,
	.loc 1 3976 0
	movl	-20(%rbp), %eax	# regno, tmp90
	cltq
	movzbl	fixed_regs(%rax), %eax	# fixed_regs, D.29979
	testb	%al, %al	# D.29979
	jne	.L905	#,
	.loc 1 3977 0
	cmpl	$6, -20(%rbp)	#, regno
	jne	.L906	#,
	.loc 1 3977 0 is_stmt 0 discriminator 3
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.478
	testl	%eax, %eax	# frame_pointer_needed.478
	jne	.L905	#,
.L906:
	.loc 1 3977 0 discriminator 2
	movl	$1, %eax	#, iftmp.477
	jmp	.L907	#
.L905:
	.loc 1 3977 0 discriminator 1
	movl	$0, %eax	#, iftmp.477
.L907:
.L898:
	.loc 1 3978 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE75:
	.size	ix86_save_reg, .-ix86_save_reg
	.type	ix86_nsaved_regs, @function
ix86_nsaved_regs:
.LFB76:
	.loc 1 3984 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 3985 0
	movl	$0, -8(%rbp)	#, nregs
	.loc 1 3988 0
	movl	$52, -4(%rbp)	#, regno
	jmp	.L909	#
.L911:
	.loc 1 3989 0
	movl	-4(%rbp), %eax	# regno, tmp62
	movl	$1, %esi	#,
	movl	%eax, %edi	# tmp62,
	call	ix86_save_reg	#
	testl	%eax, %eax	# D.29980
	je	.L910	#,
	.loc 1 3990 0
	addl	$1, -8(%rbp)	#, nregs
.L910:
	.loc 1 3988 0
	subl	$1, -4(%rbp)	#, regno
.L909:
	.loc 1 3988 0 is_stmt 0 discriminator 1
	cmpl	$0, -4(%rbp)	#, regno
	jns	.L911	#,
	.loc 1 3991 0 is_stmt 1
	movl	-8(%rbp), %eax	# nregs, D.29980
	.loc 1 3992 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE76:
	.size	ix86_nsaved_regs, .-ix86_nsaved_regs
	.globl	ix86_initial_elimination_offset
	.type	ix86_initial_elimination_offset, @function
ix86_initial_elimination_offset:
.LFB77:
	.loc 1 4001 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movl	%edi, -84(%rbp)	# from, from
	movl	%esi, -88(%rbp)	# to, to
	.loc 1 4003 0
	leaq	-80(%rbp), %rax	#, tmp65
	movq	%rax, %rdi	# tmp65,
	call	ix86_compute_frame_layout	#
	.loc 1 4005 0
	cmpl	$16, -84(%rbp)	#, from
	jne	.L914	#,
	.loc 1 4005 0 is_stmt 0 discriminator 1
	cmpl	$6, -88(%rbp)	#, to
	jne	.L914	#,
	.loc 1 4006 0 is_stmt 1
	movq	-24(%rbp), %rax	# frame.hard_frame_pointer_offset, D.29981
	jmp	.L920	#
.L914:
	.loc 1 4007 0
	cmpl	$20, -84(%rbp)	#, from
	jne	.L916	#,
	.loc 1 4008 0
	cmpl	$6, -88(%rbp)	#, to
	jne	.L916	#,
	.loc 1 4009 0
	movq	-24(%rbp), %rdx	# frame.hard_frame_pointer_offset, D.29981
	movq	-32(%rbp), %rax	# frame.frame_pointer_offset, D.29981
	subq	%rax, %rdx	# D.29981, D.29981
	movq	%rdx, %rax	# D.29981, D.29981
	jmp	.L920	#
.L916:
	.loc 1 4012 0
	cmpl	$7, -88(%rbp)	#, to
	je	.L917	#,
	.loc 1 4013 0
	movl	$__FUNCTION__.15403, %edx	#,
	movl	$4013, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L917:
	.loc 1 4014 0
	cmpl	$16, -84(%rbp)	#, from
	jne	.L918	#,
	.loc 1 4015 0
	movq	-16(%rbp), %rax	# frame.stack_pointer_offset, D.29981
	jmp	.L920	#
.L918:
	.loc 1 4016 0
	cmpl	$20, -84(%rbp)	#, from
	je	.L919	#,
	.loc 1 4017 0
	movl	$__FUNCTION__.15403, %edx	#,
	movl	$4017, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L919:
	.loc 1 4019 0
	movq	-16(%rbp), %rdx	# frame.stack_pointer_offset, D.29981
	movq	-32(%rbp), %rax	# frame.frame_pointer_offset, D.29981
	subq	%rax, %rdx	# D.29981, D.29981
	movq	%rdx, %rax	# D.29981, D.29981
.L920:
	.loc 1 4021 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE77:
	.size	ix86_initial_elimination_offset, .-ix86_initial_elimination_offset
	.type	ix86_compute_frame_layout, @function
ix86_compute_frame_layout:
.LFB78:
	.loc 1 4028 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# frame, frame
	.loc 1 4030 0
	movq	cfun(%rip), %rax	# cfun, cfun.479
	movl	400(%rax), %eax	# cfun.479_17->stack_alignment_needed, D.29982
	leal	7(%rax), %edx	#, tmp174
	testl	%eax, %eax	# tmp173
	cmovs	%edx, %eax	# tmp174,, tmp173
	sarl	$3, %eax	#, tmp175
	movl	%eax, -28(%rbp)	# tmp175, stack_alignment_needed
	.loc 1 4032 0
	movq	cfun(%rip), %rax	# cfun, cfun.480
	movl	404(%rax), %eax	# cfun.480_20->preferred_stack_boundary, D.29982
	leal	7(%rax), %edx	#, tmp177
	testl	%eax, %eax	# tmp176
	cmovs	%edx, %eax	# tmp177,, tmp176
	sarl	$3, %eax	#, tmp178
	movl	%eax, -20(%rbp)	# tmp178, preferred_alignment
	.loc 1 4033 0
	call	get_frame_size	#
	movq	%rax, -16(%rbp)	# tmp179, size
	.loc 1 4035 0
	call	ix86_nsaved_regs	#
	movq	-40(%rbp), %rdx	# frame, tmp180
	movl	%eax, (%rdx)	# D.29982, frame_25(D)->nregs
	.loc 1 4036 0
	movq	-16(%rbp), %rax	# size, tmp181
	movq	%rax, -8(%rbp)	# tmp181, total_size
	.loc 1 4039 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.482
	testl	%eax, %eax	# frame_pointer_needed.482
	je	.L922	#,
	.loc 1 4039 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.484
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L923	#,
	movl	$16, %eax	#, iftmp.483
	jmp	.L925	#
.L923:
	.loc 1 4039 0 discriminator 2
	movl	$8, %eax	#, iftmp.483
	jmp	.L925	#
.L922:
	movl	target_flags(%rip), %eax	# target_flags, target_flags.486
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L926	#,
	.loc 1 4039 0 discriminator 1
	movl	$8, %eax	#, iftmp.485
	jmp	.L925	#
.L926:
	.loc 1 4039 0 discriminator 2
	movl	$4, %eax	#, iftmp.485
.L925:
	.loc 1 4039 0 discriminator 3
	movl	%eax, -24(%rbp)	# iftmp.481, offset
	.loc 1 4041 0 is_stmt 1 discriminator 3
	movl	-24(%rbp), %eax	# offset, tmp182
	movslq	%eax, %rdx	# tmp182, D.29983
	movq	-40(%rbp), %rax	# frame, tmp183
	movq	%rdx, 56(%rax)	# D.29983, frame_25(D)->hard_frame_pointer_offset
	.loc 1 4047 0 discriminator 3
	cmpq	$0, -16(%rbp)	#, size
	je	.L928	#,
	.loc 1 4047 0 is_stmt 0 discriminator 1
	cmpl	$0, -28(%rbp)	#, stack_alignment_needed
	jne	.L928	#,
	.loc 1 4048 0 is_stmt 1
	movl	$__FUNCTION__.15412, %edx	#,
	movl	$4048, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L928:
	.loc 1 4049 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.488
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L929	#,
	.loc 1 4049 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.487
	jmp	.L930	#
.L929:
	.loc 1 4049 0 discriminator 2
	movl	$4, %eax	#, iftmp.487
.L930:
	.loc 1 4049 0 discriminator 3
	cmpl	-20(%rbp), %eax	# preferred_alignment, iftmp.487
	jle	.L931	#,
	.loc 1 4050 0 is_stmt 1
	movl	$__FUNCTION__.15412, %edx	#,
	movl	$4050, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L931:
	.loc 1 4051 0
	movl	ix86_preferred_stack_boundary(%rip), %eax	# ix86_preferred_stack_boundary, ix86_preferred_stack_boundary.489
	leal	7(%rax), %edx	#, tmp185
	testl	%eax, %eax	# tmp184
	cmovs	%edx, %eax	# tmp185,, tmp184
	sarl	$3, %eax	#, tmp186
	cmpl	-20(%rbp), %eax	# preferred_alignment, D.29982
	jge	.L932	#,
	.loc 1 4052 0
	movl	$__FUNCTION__.15412, %edx	#,
	movl	$4052, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L932:
	.loc 1 4053 0
	movl	ix86_preferred_stack_boundary(%rip), %eax	# ix86_preferred_stack_boundary, ix86_preferred_stack_boundary.490
	leal	7(%rax), %edx	#, tmp188
	testl	%eax, %eax	# tmp187
	cmovs	%edx, %eax	# tmp188,, tmp187
	sarl	$3, %eax	#, tmp189
	cmpl	-28(%rbp), %eax	# stack_alignment_needed, D.29982
	jge	.L933	#,
	.loc 1 4054 0
	movl	$__FUNCTION__.15412, %edx	#,
	movl	$4054, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L933:
	.loc 1 4056 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.492
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L934	#,
	.loc 1 4056 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.491
	jmp	.L935	#
.L934:
	.loc 1 4056 0 discriminator 2
	movl	$4, %eax	#, iftmp.491
.L935:
	.loc 1 4056 0 discriminator 3
	cmpl	-28(%rbp), %eax	# stack_alignment_needed, iftmp.491
	jle	.L936	#,
	.loc 1 4057 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.494
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L937	#,
	.loc 1 4057 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.493
	jmp	.L938	#
.L937:
	.loc 1 4057 0 discriminator 2
	movl	$4, %eax	#, iftmp.493
.L938:
	.loc 1 4057 0 discriminator 3
	movl	%eax, -28(%rbp)	# iftmp.493, stack_alignment_needed
.L936:
	.loc 1 4060 0 is_stmt 1
	movq	-40(%rbp), %rax	# frame, tmp190
	movl	(%rax), %edx	# frame_25(D)->nregs, D.29982
	movl	target_flags(%rip), %eax	# target_flags, target_flags.496
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L939	#,
	.loc 1 4060 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.495
	jmp	.L940	#
.L939:
	.loc 1 4060 0 discriminator 2
	movl	$4, %eax	#, iftmp.495
.L940:
	.loc 1 4060 0 discriminator 3
	imull	%edx, %eax	# D.29982, D.29982
	addl	%eax, -24(%rbp)	# D.29982, offset
	.loc 1 4063 0 is_stmt 1 discriminator 3
	movq	cfun(%rip), %rax	# cfun, cfun.497
	movq	392(%rax), %rax	# cfun.497_64->machine, D.29984
	movl	1416(%rax), %eax	# _65->save_varrargs_registers, D.29982
	testl	%eax, %eax	# D.29982
	je	.L941	#,
	.loc 1 4065 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.499
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L942	#,
	.loc 1 4065 0 is_stmt 0 discriminator 1
	movl	$6, %edx	#, iftmp.498
	jmp	.L943	#
.L942:
	.loc 1 4065 0 discriminator 2
	movl	$3, %edx	#, iftmp.498
.L943:
	.loc 1 4065 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.501
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L944	#,
	.loc 1 4065 0 discriminator 1
	movl	$8, %eax	#, iftmp.500
	jmp	.L945	#
.L944:
	.loc 1 4065 0 discriminator 2
	movl	$4, %eax	#, iftmp.500
.L945:
	.loc 1 4065 0 discriminator 3
	imull	%eax, %edx	# iftmp.500, D.29982
	movl	target_flags(%rip), %eax	# target_flags, target_flags.503
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L946	#,
	.loc 1 4065 0 discriminator 1
	movl	$128, %eax	#, iftmp.502
	jmp	.L947	#
.L946:
	.loc 1 4065 0 discriminator 2
	movl	$0, %eax	#, iftmp.502
.L947:
	.loc 1 4065 0 discriminator 3
	addl	%edx, %eax	# D.29982, D.29982
	addl	%eax, -24(%rbp)	# D.29982, offset
	.loc 1 4066 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.505
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L948	#,
	.loc 1 4066 0 is_stmt 0 discriminator 1
	movl	$6, %edx	#, iftmp.504
	jmp	.L949	#
.L948:
	.loc 1 4066 0 discriminator 2
	movl	$3, %edx	#, iftmp.504
.L949:
	.loc 1 4066 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.507
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L950	#,
	.loc 1 4066 0 discriminator 1
	movl	$8, %eax	#, iftmp.506
	jmp	.L951	#
.L950:
	.loc 1 4066 0 discriminator 2
	movl	$4, %eax	#, iftmp.506
.L951:
	.loc 1 4066 0 discriminator 3
	imull	%eax, %edx	# iftmp.506, D.29982
	movl	target_flags(%rip), %eax	# target_flags, target_flags.509
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L952	#,
	.loc 1 4066 0 discriminator 1
	movl	$128, %eax	#, iftmp.508
	jmp	.L953	#
.L952:
	.loc 1 4066 0 discriminator 2
	movl	$0, %eax	#, iftmp.508
.L953:
	addl	%eax, %edx	# iftmp.508, D.29982
	movq	-40(%rbp), %rax	# frame, tmp191
	movl	%edx, 8(%rax)	# D.29982, frame_25(D)->va_arg_size
	jmp	.L954	#
.L941:
	.loc 1 4069 0 is_stmt 1
	movq	-40(%rbp), %rax	# frame, tmp192
	movl	$0, 8(%rax)	#, frame_25(D)->va_arg_size
.L954:
	.loc 1 4072 0
	movl	-28(%rbp), %eax	# stack_alignment_needed, tmp193
	movl	-24(%rbp), %edx	# offset, tmp194
	addl	%edx, %eax	# tmp194, D.29982
	leal	-1(%rax), %edx	#, D.29982
	.loc 1 4073 0
	movl	-28(%rbp), %eax	# stack_alignment_needed, tmp195
	negl	%eax	# D.29982
	andl	%edx, %eax	# D.29982, D.29982
	subl	-24(%rbp), %eax	# offset, D.29982
	movl	%eax, %edx	# D.29982, D.29982
	.loc 1 4072 0
	movq	-40(%rbp), %rax	# frame, tmp196
	movl	%edx, 4(%rax)	# D.29982, frame_25(D)->padding1
	.loc 1 4075 0
	movq	-40(%rbp), %rax	# frame, tmp197
	movl	4(%rax), %eax	# frame_25(D)->padding1, D.29982
	addl	%eax, -24(%rbp)	# D.29982, offset
	.loc 1 4078 0
	movl	-24(%rbp), %eax	# offset, tmp198
	movslq	%eax, %rdx	# tmp198, D.29983
	movq	-40(%rbp), %rax	# frame, tmp199
	movq	%rdx, 48(%rax)	# D.29983, frame_25(D)->frame_pointer_offset
	.loc 1 4080 0
	movq	-16(%rbp), %rax	# size, tmp200
	movl	%eax, %edx	# tmp200, D.29985
	movl	-24(%rbp), %eax	# offset, offset.510
	addl	%edx, %eax	# D.29985, D.29985
	movl	%eax, -24(%rbp)	# D.29985, offset
	.loc 1 4084 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.511
	andl	$4096, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L955	#,
	.loc 1 4084 0 is_stmt 0 discriminator 1
	movl	current_function_is_leaf(%rip), %eax	# current_function_is_leaf, current_function_is_leaf.512
	testl	%eax, %eax	# current_function_is_leaf.512
	jne	.L955	#,
	.loc 1 4086 0 is_stmt 1
	movq	cfun(%rip), %rax	# cfun, cfun.513
	movl	76(%rax), %eax	# cfun.513_111->outgoing_args_size, D.29982
	addl	%eax, -24(%rbp)	# D.29982, offset
	.loc 1 4087 0
	movq	cfun(%rip), %rax	# cfun, cfun.514
	movl	76(%rax), %edx	# cfun.514_114->outgoing_args_size, D.29982
	movq	-40(%rbp), %rax	# frame, tmp201
	movl	%edx, 28(%rax)	# D.29982, frame_25(D)->outgoing_arguments_size
	jmp	.L956	#
.L955:
	.loc 1 4090 0
	movq	-40(%rbp), %rax	# frame, tmp202
	movl	$0, 28(%rax)	#, frame_25(D)->outgoing_arguments_size
.L956:
	.loc 1 4094 0
	movl	current_function_is_leaf(%rip), %eax	# current_function_is_leaf, current_function_is_leaf.515
	testl	%eax, %eax	# current_function_is_leaf.515
	je	.L957	#,
	.loc 1 4094 0 is_stmt 0 discriminator 1
	movq	cfun(%rip), %rax	# cfun, cfun.516
	movzbl	424(%rax), %eax	# *cfun.516_117, D.29986
	andl	$64, %eax	#, D.29986
	testb	%al, %al	# D.29986
	je	.L958	#,
.L957:
	.loc 1 4095 0 is_stmt 1
	movl	-20(%rbp), %eax	# preferred_alignment, tmp203
	movl	-24(%rbp), %edx	# offset, tmp204
	addl	%edx, %eax	# tmp204, D.29982
	leal	-1(%rax), %edx	#, D.29982
	.loc 1 4096 0
	movl	-20(%rbp), %eax	# preferred_alignment, tmp205
	negl	%eax	# D.29982
	andl	%edx, %eax	# D.29982, D.29982
	subl	-24(%rbp), %eax	# offset, D.29982
	movl	%eax, %edx	# D.29982, D.29982
	.loc 1 4095 0
	movq	-40(%rbp), %rax	# frame, tmp206
	movl	%edx, 24(%rax)	# D.29982, frame_25(D)->padding2
	jmp	.L959	#
.L958:
	.loc 1 4098 0
	movq	-40(%rbp), %rax	# frame, tmp207
	movl	$0, 24(%rax)	#, frame_25(D)->padding2
.L959:
	.loc 1 4100 0
	movq	-40(%rbp), %rax	# frame, tmp208
	movl	24(%rax), %eax	# frame_25(D)->padding2, D.29982
	addl	%eax, -24(%rbp)	# D.29982, offset
	.loc 1 4103 0
	movl	-24(%rbp), %eax	# offset, tmp209
	movslq	%eax, %rdx	# tmp209, D.29983
	movq	-40(%rbp), %rax	# frame, tmp210
	movq	%rdx, 64(%rax)	# D.29983, frame_25(D)->stack_pointer_offset
	.loc 1 4107 0
	movq	-40(%rbp), %rax	# frame, tmp211
	movl	4(%rax), %eax	# frame_25(D)->padding1, D.29982
	movslq	%eax, %rdx	# D.29982, D.29983
	movq	-16(%rbp), %rax	# size, tmp212
	addq	%rax, %rdx	# tmp212, D.29983
	movq	-40(%rbp), %rax	# frame, tmp213
	movl	24(%rax), %eax	# frame_25(D)->padding2, D.29982
	cltq
	addq	%rax, %rdx	# D.29983, D.29983
	.loc 1 4108 0
	movq	-40(%rbp), %rax	# frame, tmp214
	movl	28(%rax), %eax	# frame_25(D)->outgoing_arguments_size, D.29982
	cltq
	addq	%rax, %rdx	# D.29983, D.29983
	movq	-40(%rbp), %rax	# frame, tmp215
	movl	8(%rax), %eax	# frame_25(D)->va_arg_size, D.29982
	cltq
	addq	%rax, %rdx	# D.29983, D.29983
	.loc 1 4106 0
	movq	-40(%rbp), %rax	# frame, tmp216
	movq	%rdx, 40(%rax)	# D.29983, frame_25(D)->to_allocate
	.loc 1 4110 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.517
	andl	$33554432, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	je	.L960	#,
	.loc 1 4110 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.518
	andl	$67108864, %eax	#, D.29982
	testl	%eax, %eax	# D.29982
	jne	.L960	#,
	movl	current_function_sp_is_unchanging(%rip), %eax	# current_function_sp_is_unchanging, current_function_sp_is_unchanging.519
	testl	%eax, %eax	# current_function_sp_is_unchanging.519
	je	.L960	#,
	.loc 1 4111 0 is_stmt 1
	movl	current_function_is_leaf(%rip), %eax	# current_function_is_leaf, current_function_is_leaf.520
	testl	%eax, %eax	# current_function_is_leaf.520
	je	.L960	#,
	.loc 1 4113 0
	movq	-40(%rbp), %rax	# frame, tmp217
	movq	40(%rax), %rax	# frame_25(D)->to_allocate, D.29983
	movl	%eax, %edx	# D.29983, D.29982
	movq	-40(%rbp), %rax	# frame, tmp218
	movl	%edx, 32(%rax)	# D.29982, frame_25(D)->red_zone_size
	.loc 1 4114 0
	movq	-40(%rbp), %rax	# frame, tmp219
	movl	32(%rax), %eax	# frame_25(D)->red_zone_size, D.29982
	cmpl	$120, %eax	#, D.29982
	jle	.L961	#,
	.loc 1 4115 0
	movq	-40(%rbp), %rax	# frame, tmp220
	movl	$120, 32(%rax)	#, frame_25(D)->red_zone_size
	.loc 1 4114 0
	jmp	.L962	#
.L961:
	.loc 1 4114 0 is_stmt 0 discriminator 1
	jmp	.L962	#
.L960:
	.loc 1 4118 0 is_stmt 1
	movq	-40(%rbp), %rax	# frame, tmp221
	movl	$0, 32(%rax)	#, frame_25(D)->red_zone_size
.L962:
	.loc 1 4119 0
	movq	-40(%rbp), %rax	# frame, tmp222
	movq	40(%rax), %rdx	# frame_25(D)->to_allocate, D.29983
	movq	-40(%rbp), %rax	# frame, tmp223
	movl	32(%rax), %eax	# frame_25(D)->red_zone_size, D.29982
	cltq
	subq	%rax, %rdx	# D.29983, D.29983
	movq	-40(%rbp), %rax	# frame, tmp224
	movq	%rdx, 40(%rax)	# D.29983, frame_25(D)->to_allocate
	.loc 1 4120 0
	movq	-40(%rbp), %rax	# frame, tmp225
	movq	64(%rax), %rdx	# frame_25(D)->stack_pointer_offset, D.29983
	movq	-40(%rbp), %rax	# frame, tmp226
	movl	32(%rax), %eax	# frame_25(D)->red_zone_size, D.29982
	cltq
	subq	%rax, %rdx	# D.29983, D.29983
	movq	-40(%rbp), %rax	# frame, tmp227
	movq	%rdx, 64(%rax)	# D.29983, frame_25(D)->stack_pointer_offset
	.loc 1 4135 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE78:
	.size	ix86_compute_frame_layout, .-ix86_compute_frame_layout
	.type	ix86_emit_save_regs, @function
ix86_emit_save_regs:
.LFB79:
	.loc 1 4141 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	.loc 1 4145 0
	movl	$52, %ebx	#, regno
	jmp	.L964	#
.L968:
	.loc 1 4146 0
	movl	$1, %esi	#,
	movl	%ebx, %edi	# regno,
	call	ix86_save_reg	#
	testl	%eax, %eax	# D.29987
	je	.L965	#,
	.loc 1 4148 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.522
	andl	$33554432, %eax	#, D.29987
	testl	%eax, %eax	# D.29987
	je	.L966	#,
	.loc 1 4148 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.521
	jmp	.L967	#
.L966:
	.loc 1 4148 0 discriminator 2
	movl	$4, %eax	#, iftmp.521
.L967:
	.loc 1 4148 0 discriminator 3
	movl	%ebx, %esi	# regno,
	movl	%eax, %edi	# iftmp.521,
	call	gen_rtx_REG	#
	movq	%rax, %rdi	# D.29988,
	call	gen_push	#
	movq	%rax, %rdi	# D.29988,
	call	emit_insn	#
	movq	%rax, -24(%rbp)	# tmp66, insn
	.loc 1 4149 0 is_stmt 1 discriminator 3
	movq	-24(%rbp), %rax	# insn, tmp67
	movzbl	3(%rax), %edx	# insn_11->frame_related, tmp70
	orl	$-128, %edx	#, tmp71
	movb	%dl, 3(%rax)	# tmp71, insn_11->frame_related
.L965:
	.loc 1 4145 0
	subl	$1, %ebx	#, regno
.L964:
	.loc 1 4145 0 is_stmt 0 discriminator 1
	testl	%ebx, %ebx	# regno
	jns	.L968	#,
	.loc 1 4151 0 is_stmt 1
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE79:
	.size	ix86_emit_save_regs, .-ix86_emit_save_regs
	.type	ix86_emit_save_regs_using_mov, @function
ix86_emit_save_regs_using_mov:
.LFB80:
	.loc 1 4159 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$32, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -40(%rbp)	# pointer, pointer
	movq	%rsi, -48(%rbp)	# offset, offset
	.loc 1 4163 0
	movl	$0, -28(%rbp)	#, regno
	jmp	.L970	#
.L980:
	.loc 1 4164 0
	movl	-28(%rbp), %eax	# regno, tmp75
	movl	$1, %esi	#,
	movl	%eax, %edi	# tmp75,
	call	ix86_save_reg	#
	testl	%eax, %eax	# D.29989
	je	.L971	#,
	.loc 1 4168 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.524
	andl	$33554432, %eax	#, D.29989
	.loc 1 4166 0
	testl	%eax, %eax	# D.29989
	je	.L972	#,
	.loc 1 4166 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.523
	jmp	.L973	#
.L972:
	.loc 1 4166 0 discriminator 2
	movl	$4, %eax	#, iftmp.523
.L973:
	.loc 1 4166 0 discriminator 3
	movl	-28(%rbp), %edx	# regno, tmp76
	movl	%edx, %esi	# tmp76,
	movl	%eax, %edi	# iftmp.523,
	call	gen_rtx_REG	#
	movq	%rax, %r12	#, D.29990
	movl	target_flags(%rip), %eax	# target_flags, target_flags.526
	andl	$33554432, %eax	#, D.29989
	testl	%eax, %eax	# D.29989
	je	.L974	#,
	.loc 1 4166 0 discriminator 4
	movl	$5, %ebx	#, iftmp.525
	jmp	.L975	#
.L974:
	.loc 1 4166 0 discriminator 5
	movl	$4, %ebx	#, iftmp.525
.L975:
	.loc 1 4166 0 discriminator 6
	movl	target_flags(%rip), %eax	# target_flags, target_flags.528
	andl	$33554432, %eax	#, D.29989
	testl	%eax, %eax	# D.29989
	je	.L976	#,
	.loc 1 4166 0 discriminator 7
	movl	$5, %eax	#, iftmp.527
	jmp	.L977	#
.L976:
	.loc 1 4166 0 discriminator 8
	movl	$4, %eax	#, iftmp.527
.L977:
	.loc 1 4166 0 discriminator 9
	movq	-40(%rbp), %rdx	# pointer, tmp77
	movq	%rdx, %rsi	# tmp77,
	movl	%eax, %edi	# iftmp.527,
	call	gen_rtx_MEM	#
	movq	-48(%rbp), %rdx	# offset, tmp78
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	%ebx, %esi	# iftmp.525,
	movq	%rax, %rdi	# D.29990,
	call	adjust_address_1	#
	movq	%r12, %rsi	# D.29990,
	movq	%rax, %rdi	# D.29990,
	call	emit_move_insn	#
	movq	%rax, -24(%rbp)	# tmp79, insn
	.loc 1 4169 0 is_stmt 1 discriminator 9
	movq	-24(%rbp), %rax	# insn, tmp80
	movzbl	3(%rax), %edx	# insn_27->frame_related, tmp83
	orl	$-128, %edx	#, tmp84
	movb	%dl, 3(%rax)	# tmp84, insn_27->frame_related
	.loc 1 4170 0 discriminator 9
	movl	target_flags(%rip), %eax	# target_flags, target_flags.530
	andl	$33554432, %eax	#, D.29989
	testl	%eax, %eax	# D.29989
	je	.L978	#,
	.loc 1 4170 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.529
	jmp	.L979	#
.L978:
	.loc 1 4170 0 discriminator 2
	movl	$4, %eax	#, iftmp.529
.L979:
	.loc 1 4170 0 discriminator 3
	addq	%rax, -48(%rbp)	# iftmp.529, offset
.L971:
	.loc 1 4163 0 is_stmt 1
	addl	$1, -28(%rbp)	#, regno
.L970:
	.loc 1 4163 0 is_stmt 0 discriminator 1
	cmpl	$52, -28(%rbp)	#, regno
	jle	.L980	#,
	.loc 1 4172 0 is_stmt 1
	addq	$32, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE80:
	.size	ix86_emit_save_regs_using_mov, .-ix86_emit_save_regs_using_mov
	.section	.rodata
.LC144:
	.string	"_alloca"
	.text
	.globl	ix86_expand_prologue
	.type	ix86_expand_prologue, @function
ix86_expand_prologue:
.LFB81:
	.loc 1 4178 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	.loc 1 4180 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.532
	.loc 1 4182 0
	testl	%eax, %eax	# flag_pic.532
	je	.L982	#,
	.loc 1 4180 0
	movq	cfun(%rip), %rax	# cfun, cfun.533
	movzbl	426(%rax), %eax	# *cfun.533_9, D.29991
	andl	$32, %eax	#, D.29991
	testb	%al, %al	# D.29991
	jne	.L983	#,
	.loc 1 4181 0
	movq	cfun(%rip), %rax	# cfun, cfun.534
	movzbl	426(%rax), %eax	# *cfun.534_12, D.29991
	andl	$16, %eax	#, D.29991
	testb	%al, %al	# D.29991
	je	.L982	#,
.L983:
	.loc 1 4182 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.535
	andl	$33554432, %eax	#, D.29992
	testl	%eax, %eax	# D.29992
	jne	.L982	#,
	.loc 1 4182 0 is_stmt 0 discriminator 2
	movl	$1, %eax	#, iftmp.531
	jmp	.L984	#
.L982:
	.loc 1 4182 0 discriminator 1
	movl	$0, %eax	#, iftmp.531
.L984:
	.loc 1 4180 0 is_stmt 1
	movl	%eax, -132(%rbp)	# iftmp.531, pic_reg_used
	.loc 1 4184 0
	movl	$0, -136(%rbp)	#, use_mov
	.loc 1 4187 0
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.536
	testl	%eax, %eax	# optimize_size.536
	jne	.L985	#,
	.loc 1 4190 0
	movl	$30, %edi	#,
	call	expensive_function_p	#
	xorl	$1, %eax	#, D.29993
	movzbl	%al, %eax	# D.29993, use_fast_prologue_epilogue.537
	movl	%eax, use_fast_prologue_epilogue(%rip)	# use_fast_prologue_epilogue.537, use_fast_prologue_epilogue
	.loc 1 4191 0
	movl	$104, %edx	#, x86_prologue_using_move.538
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.539
	movl	%eax, %ecx	# ix86_cpu.540, tmp158
	sarl	%cl, %edx	# tmp158, D.29992
	movl	%edx, %eax	# D.29992, D.29992
	andl	$1, %eax	#, D.29992
	testl	%eax, %eax	# D.29992
	je	.L985	#,
	.loc 1 4192 0
	movl	use_fast_prologue_epilogue(%rip), %eax	# use_fast_prologue_epilogue, tmp126
	movl	%eax, -136(%rbp)	# tmp126, use_mov
.L985:
	.loc 1 4194 0
	leaq	-96(%rbp), %rax	#, tmp127
	movq	%rax, %rdi	# tmp127,
	call	ix86_compute_frame_layout	#
	.loc 1 4199 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.541
	testl	%eax, %eax	# frame_pointer_needed.541
	je	.L986	#,
	.loc 1 4201 0
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.29994
	movq	%rax, %rdi	# D.29994,
	call	gen_push	#
	movq	%rax, %rdi	# D.29994,
	call	emit_insn	#
	movq	%rax, -120(%rbp)	# tmp128, insn
	.loc 1 4202 0
	movq	-120(%rbp), %rax	# insn, tmp129
	movzbl	3(%rax), %edx	# insn_34->frame_related, tmp132
	orl	$-128, %edx	#, tmp133
	movb	%dl, 3(%rax)	# tmp133, insn_34->frame_related
	.loc 1 4204 0
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.29994
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.29994
	movq	%rdx, %rsi	# D.29994,
	movq	%rax, %rdi	# D.29994,
	call	emit_move_insn	#
	movq	%rax, -120(%rbp)	# tmp134, insn
	.loc 1 4205 0
	movq	-120(%rbp), %rax	# insn, tmp135
	movzbl	3(%rax), %edx	# insn_37->frame_related, tmp138
	orl	$-128, %edx	#, tmp139
	movb	%dl, 3(%rax)	# tmp139, insn_37->frame_related
.L986:
	.loc 1 4208 0
	movq	-56(%rbp), %rax	# frame.to_allocate, tmp140
	movq	%rax, -128(%rbp)	# tmp140, allocate
	.loc 1 4211 0
	cmpq	$0, -128(%rbp)	#, allocate
	jne	.L987	#,
	.loc 1 4211 0 is_stmt 0 discriminator 1
	movl	-96(%rbp), %eax	# frame.nregs, D.29992
	cmpl	$1, %eax	#, D.29992
	jg	.L987	#,
	.loc 1 4212 0 is_stmt 1
	movl	$0, -136(%rbp)	#, use_mov
.L987:
	.loc 1 4214 0
	cmpl	$0, -136(%rbp)	#, use_mov
	jne	.L988	#,
	.loc 1 4215 0
	call	ix86_emit_save_regs	#
	jmp	.L989	#
.L988:
	.loc 1 4217 0
	movl	-96(%rbp), %edx	# frame.nregs, D.29992
	movl	target_flags(%rip), %eax	# target_flags, target_flags.543
	andl	$33554432, %eax	#, D.29992
	testl	%eax, %eax	# D.29992
	je	.L990	#,
	.loc 1 4217 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.542
	jmp	.L991	#
.L990:
	.loc 1 4217 0 discriminator 2
	movl	$4, %eax	#, iftmp.542
.L991:
	.loc 1 4217 0 discriminator 3
	imull	%edx, %eax	# D.29992, D.29992
	cltq
	addq	%rax, -128(%rbp)	# D.29995, allocate
.L989:
	.loc 1 4219 0 is_stmt 1
	cmpq	$0, -128(%rbp)	#, allocate
	je	.L992	#,
	.loc 1 4221 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.544
	andl	$256, %eax	#, D.29992
	testl	%eax, %eax	# D.29992
	je	.L993	#,
	.loc 1 4221 0 is_stmt 0 discriminator 1
	cmpq	$-1, -128(%rbp)	#, allocate
	jge	.L994	#,
.L993:
	.loc 1 4223 0 is_stmt 1
	movq	-128(%rbp), %rax	# allocate, tmp141
	negq	%rax	# D.29995
	movq	%rax, %rsi	# D.29995,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.29994
	movq	global_rtl+16(%rip), %rcx	# global_rtl, D.29994
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.29994
	movq	%rcx, %rsi	# D.29994,
	movq	%rax, %rdi	# D.29994,
	call	gen_pro_epilogue_adjust_stack	#
	movq	%rax, %rdi	# D.29994,
	call	emit_insn	#
	movq	%rax, -120(%rbp)	# tmp142, insn
	.loc 1 4226 0
	movq	-120(%rbp), %rax	# insn, tmp143
	movzbl	3(%rax), %edx	# insn_73->frame_related, tmp146
	orl	$-128, %edx	#, tmp147
	movb	%dl, 3(%rax)	# tmp147, insn_73->frame_related
	jmp	.L992	#
.L994:
.LBB37:
	.loc 1 4234 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.545
	andl	$33554432, %eax	#, D.29992
	testl	%eax, %eax	# D.29992
	je	.L995	#,
	.loc 1 4235 0
	movl	$__FUNCTION__.15438, %edx	#,
	movl	$4235, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L995:
	.loc 1 4237 0
	movl	$0, %esi	#,
	movl	$4, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -112(%rbp)	# tmp148, arg0
	.loc 1 4238 0
	movq	-128(%rbp), %rax	# allocate, tmp149
	movq	%rax, %rsi	# tmp149,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.29994
	movq	-112(%rbp), %rax	# arg0, tmp150
	movq	%rdx, %rsi	# D.29994,
	movq	%rax, %rdi	# tmp150,
	call	emit_move_insn	#
	.loc 1 4241 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.547
	andl	$33554432, %eax	#, D.29992
	.loc 1 4240 0
	testl	%eax, %eax	# D.29992
	je	.L996	#,
	.loc 1 4240 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.546
	jmp	.L997	#
.L996:
	.loc 1 4240 0 discriminator 2
	movl	$4, %eax	#, iftmp.546
.L997:
	.loc 1 4240 0 discriminator 3
	movl	$.LC144, %edx	#,
	movl	%eax, %esi	# iftmp.546,
	movl	$68, %edi	#,
	call	gen_rtx_fmt_s	#
	movq	%rax, %rsi	# D.29994,
	movl	$2, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -104(%rbp)	# tmp151, sym
	.loc 1 4242 0 is_stmt 1 discriminator 3
	movq	const_int_rtx+504(%rip), %rdx	# const_int_rtx, D.29994
	movq	const_int_rtx+512(%rip), %rcx	# const_int_rtx, D.29994
	movq	-104(%rbp), %rax	# sym, tmp152
	movq	%rcx, %rsi	# D.29994,
	movq	%rax, %rdi	# tmp152,
	call	gen_call	#
	movq	%rax, %rdi	# D.29994,
	call	emit_call_insn	#
	movq	%rax, -120(%rbp)	# tmp153, insn
	.loc 1 4245 0 discriminator 3
	movq	-120(%rbp), %rax	# insn, tmp154
	movq	64(%rax), %rbx	# insn_64->fld[7].rtx, D.29994
	movq	-112(%rbp), %rax	# arg0, tmp155
	movq	%rax, %rdx	# tmp155,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rbx, %rcx	# D.29994,
	movq	%rax, %rdx	# D.29994,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-120(%rbp), %rdx	# insn, tmp156
	movq	%rax, 64(%rdx)	# D.29994, insn_64->fld[7].rtx
.L992:
.LBE37:
	.loc 1 4248 0
	cmpl	$0, -136(%rbp)	#, use_mov
	je	.L998	#,
	.loc 1 4250 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.548
	testl	%eax, %eax	# frame_pointer_needed.548
	je	.L999	#,
	.loc 1 4250 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# frame.to_allocate, D.29995
	testq	%rax, %rax	# D.29995
	jne	.L1000	#,
.L999:
	.loc 1 4251 0 is_stmt 1
	movq	-56(%rbp), %rdx	# frame.to_allocate, D.29995
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.29994
	movq	%rdx, %rsi	# D.29995,
	movq	%rax, %rdi	# D.29994,
	call	ix86_emit_save_regs_using_mov	#
	jmp	.L998	#
.L1000:
	.loc 1 4254 0
	movl	-96(%rbp), %eax	# frame.nregs, D.29992
	negl	%eax	# D.29992
	movl	%eax, %edx	# D.29992, D.29992
	movl	target_flags(%rip), %eax	# target_flags, target_flags.550
	andl	$33554432, %eax	#, D.29992
	testl	%eax, %eax	# D.29992
	je	.L1001	#,
	.loc 1 4254 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.549
	jmp	.L1002	#
.L1001:
	.loc 1 4254 0 discriminator 2
	movl	$4, %eax	#, iftmp.549
.L1002:
	.loc 1 4254 0 discriminator 3
	imull	%edx, %eax	# D.29992, D.29992
	.loc 1 4253 0 is_stmt 1 discriminator 3
	movslq	%eax, %rdx	# D.29992, D.29995
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.29994
	movq	%rdx, %rsi	# D.29995,
	movq	%rax, %rdi	# D.29994,
	call	ix86_emit_save_regs_using_mov	#
.L998:
	.loc 1 4261 0
	cmpl	$0, -132(%rbp)	#, pic_reg_used
	je	.L1003	#,
	.loc 1 4262 0
	call	load_pic_register	#
.L1003:
	.loc 1 4267 0
	movq	cfun(%rip), %rax	# cfun, cfun.551
	movzbl	425(%rax), %eax	# *cfun.551_87, D.29991
	andl	$64, %eax	#, D.29991
	testb	%al, %al	# D.29991
	je	.L981	#,
	.loc 1 4267 0 is_stmt 0 discriminator 1
	cmpl	$0, -132(%rbp)	#, pic_reg_used
	jne	.L981	#,
	.loc 1 4268 0 is_stmt 1
	call	gen_blockage	#
	movq	%rax, %rdi	# D.29994,
	call	emit_insn	#
.L981:
	.loc 1 4269 0
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE81:
	.size	ix86_expand_prologue, .-ix86_expand_prologue
	.type	ix86_emit_restore_regs_using_mov, @function
ix86_emit_restore_regs_using_mov:
.LFB82:
	.loc 1 4278 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$32, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -40(%rbp)	# pointer, pointer
	movl	%esi, -44(%rbp)	# offset, offset
	movl	%edx, -48(%rbp)	# maybe_eh_return, maybe_eh_return
	.loc 1 4281 0
	movl	$0, -20(%rbp)	#, regno
	jmp	.L1006	#
.L1016:
	.loc 1 4282 0
	movl	-48(%rbp), %edx	# maybe_eh_return, tmp76
	movl	-20(%rbp), %eax	# regno, tmp77
	movl	%edx, %esi	# tmp76,
	movl	%eax, %edi	# tmp77,
	call	ix86_save_reg	#
	testl	%eax, %eax	# D.29997
	je	.L1007	#,
	.loc 1 4284 0
	movl	-44(%rbp), %eax	# offset, tmp78
	movslq	%eax, %r12	# tmp78, D.29998
	.loc 1 4285 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.553
	andl	$33554432, %eax	#, D.29997
	.loc 1 4284 0
	testl	%eax, %eax	# D.29997
	je	.L1008	#,
	.loc 1 4284 0 is_stmt 0 discriminator 1
	movl	$5, %ebx	#, iftmp.552
	jmp	.L1009	#
.L1008:
	.loc 1 4284 0 discriminator 2
	movl	$4, %ebx	#, iftmp.552
.L1009:
	.loc 1 4285 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.555
	andl	$33554432, %eax	#, D.29997
	.loc 1 4284 0 discriminator 3
	testl	%eax, %eax	# D.29997
	je	.L1010	#,
	.loc 1 4284 0 is_stmt 0 discriminator 4
	movl	$5, %eax	#, iftmp.554
	jmp	.L1011	#
.L1010:
	.loc 1 4284 0 discriminator 5
	movl	$4, %eax	#, iftmp.554
.L1011:
	.loc 1 4284 0 discriminator 6
	movq	-40(%rbp), %rdx	# pointer, tmp79
	movq	%rdx, %rsi	# tmp79,
	movl	%eax, %edi	# iftmp.554,
	call	gen_rtx_MEM	#
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%r12, %rdx	# D.29998,
	movl	%ebx, %esi	# iftmp.552,
	movq	%rax, %rdi	# D.29999,
	call	adjust_address_1	#
	movq	%rax, %rbx	#, D.29999
	movl	target_flags(%rip), %eax	# target_flags, target_flags.557
	andl	$33554432, %eax	#, D.29997
	testl	%eax, %eax	# D.29997
	je	.L1012	#,
	.loc 1 4284 0 discriminator 7
	movl	$5, %eax	#, iftmp.556
	jmp	.L1013	#
.L1012:
	.loc 1 4284 0 discriminator 8
	movl	$4, %eax	#, iftmp.556
.L1013:
	.loc 1 4284 0 discriminator 9
	movl	-20(%rbp), %edx	# regno, tmp80
	movl	%edx, %esi	# tmp80,
	movl	%eax, %edi	# iftmp.556,
	call	gen_rtx_REG	#
	movq	%rbx, %rsi	# D.29999,
	movq	%rax, %rdi	# D.29999,
	call	emit_move_insn	#
	.loc 1 4287 0 is_stmt 1 discriminator 9
	movl	target_flags(%rip), %eax	# target_flags, target_flags.559
	andl	$33554432, %eax	#, D.29997
	testl	%eax, %eax	# D.29997
	je	.L1014	#,
	.loc 1 4287 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.558
	jmp	.L1015	#
.L1014:
	.loc 1 4287 0 discriminator 2
	movl	$4, %eax	#, iftmp.558
.L1015:
	.loc 1 4287 0 discriminator 3
	addl	%eax, -44(%rbp)	# iftmp.558, offset
.L1007:
	.loc 1 4281 0 is_stmt 1
	addl	$1, -20(%rbp)	#, regno
.L1006:
	.loc 1 4281 0 is_stmt 0 discriminator 1
	cmpl	$52, -20(%rbp)	#, regno
	jle	.L1016	#,
	.loc 1 4289 0 is_stmt 1
	addq	$32, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE82:
	.size	ix86_emit_restore_regs_using_mov, .-ix86_emit_restore_regs_using_mov
	.globl	ix86_expand_epilogue
	.type	ix86_expand_epilogue, @function
ix86_expand_epilogue:
.LFB83:
	.loc 1 4296 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$144, %rsp	#,
	movl	%edi, -132(%rbp)	# style, style
	.loc 1 4298 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.561
	testl	%eax, %eax	# frame_pointer_needed.561
	je	.L1018	#,
	.loc 1 4298 0 is_stmt 0 discriminator 2
	movl	current_function_sp_is_unchanging(%rip), %eax	# current_function_sp_is_unchanging, current_function_sp_is_unchanging.562
	testl	%eax, %eax	# current_function_sp_is_unchanging.562
	je	.L1019	#,
.L1018:
	.loc 1 4298 0 discriminator 1
	movl	$1, %eax	#, iftmp.560
	jmp	.L1020	#
.L1019:
	.loc 1 4298 0 discriminator 3
	movl	$0, %eax	#, iftmp.560
.L1020:
	.loc 1 4298 0 discriminator 4
	movl	%eax, -124(%rbp)	# iftmp.560, sp_valid
	.loc 1 4302 0 is_stmt 1 discriminator 4
	leaq	-80(%rbp), %rax	#, tmp227
	movq	%rax, %rdi	# tmp227,
	call	ix86_compute_frame_layout	#
	.loc 1 4308 0 discriminator 4
	movl	-80(%rbp), %eax	# frame.nregs, D.30000
	cltq
	movq	%rax, -120(%rbp)	# tmp228, offset
	.loc 1 4309 0 discriminator 4
	movq	cfun(%rip), %rax	# cfun, cfun.563
	movzbl	424(%rax), %eax	# *cfun.563_23, D.30001
	andl	$-128, %eax	#, D.30001
	testb	%al, %al	# D.30001
	je	.L1021	#,
	.loc 1 4309 0 is_stmt 0 discriminator 1
	cmpl	$2, -132(%rbp)	#, style
	je	.L1021	#,
	.loc 1 4310 0 is_stmt 1
	subq	$2, -120(%rbp)	#, offset
.L1021:
	.loc 1 4311 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.565
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1022	#,
	.loc 1 4311 0 is_stmt 0 discriminator 1
	movq	$-8, %rax	#, iftmp.564
	jmp	.L1023	#
.L1022:
	.loc 1 4311 0 discriminator 2
	movq	$-4, %rax	#, iftmp.564
.L1023:
	.loc 1 4311 0 discriminator 3
	movq	-120(%rbp), %rdx	# offset, tmp230
	imulq	%rdx, %rax	# tmp230, tmp229
	movq	%rax, -120(%rbp)	# tmp229, offset
	.loc 1 4323 0 is_stmt 1 discriminator 3
	cmpl	$0, -124(%rbp)	#, sp_valid
	jne	.L1024	#,
	.loc 1 4323 0 is_stmt 0 discriminator 1
	movl	-80(%rbp), %eax	# frame.nregs, D.30000
	cmpl	$1, %eax	#, D.30000
	jle	.L1025	#,
.L1024:
	.loc 1 4324 0 is_stmt 1
	movl	$104, %edx	#, x86_epilogue_using_move.566
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.567
	movl	%eax, %ecx	# ix86_cpu.568, tmp258
	sarl	%cl, %edx	# tmp258, D.30000
	movl	%edx, %eax	# D.30000, D.30000
	andl	$1, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1026	#,
	.loc 1 4325 0
	movl	use_fast_prologue_epilogue(%rip), %eax	# use_fast_prologue_epilogue, use_fast_prologue_epilogue.569
	testl	%eax, %eax	# use_fast_prologue_epilogue.569
	je	.L1026	#,
	.loc 1 4326 0
	movl	-80(%rbp), %eax	# frame.nregs, D.30000
	cmpl	$1, %eax	#, D.30000
	jg	.L1025	#,
	.loc 1 4326 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# frame.to_allocate, D.30002
	testq	%rax, %rax	# D.30002
	jne	.L1025	#,
.L1026:
	.loc 1 4327 0 is_stmt 1
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.570
	testl	%eax, %eax	# frame_pointer_needed.570
	je	.L1027	#,
	.loc 1 4327 0 is_stmt 0 discriminator 1
	movl	-80(%rbp), %eax	# frame.nregs, D.30000
	testl	%eax, %eax	# D.30000
	jne	.L1027	#,
	movq	-40(%rbp), %rax	# frame.to_allocate, D.30002
	testq	%rax, %rax	# D.30002
	jne	.L1025	#,
.L1027:
	.loc 1 4328 0 is_stmt 1
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.571
	testl	%eax, %eax	# frame_pointer_needed.571
	je	.L1028	#,
	.loc 1 4328 0 is_stmt 0 discriminator 1
	movl	$49, %edx	#, x86_use_leave.572
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.573
	movl	%eax, %ecx	# ix86_cpu.574, tmp260
	sarl	%cl, %edx	# tmp260, D.30000
	movl	%edx, %eax	# D.30000, D.30000
	andl	$1, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1028	#,
	.loc 1 4329 0 is_stmt 1
	movl	use_fast_prologue_epilogue(%rip), %eax	# use_fast_prologue_epilogue, use_fast_prologue_epilogue.575
	testl	%eax, %eax	# use_fast_prologue_epilogue.575
	je	.L1028	#,
	.loc 1 4329 0 is_stmt 0 discriminator 1
	movl	-80(%rbp), %eax	# frame.nregs, D.30000
	cmpl	$1, %eax	#, D.30000
	je	.L1025	#,
.L1028:
	.loc 1 4330 0 is_stmt 1
	movq	cfun(%rip), %rax	# cfun, cfun.576
	movzbl	424(%rax), %eax	# *cfun.576_53, D.30001
	andl	$-128, %eax	#, D.30001
	testb	%al, %al	# D.30001
	je	.L1029	#,
.L1025:
	.loc 1 4338 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.577
	testl	%eax, %eax	# frame_pointer_needed.577
	je	.L1030	#,
	.loc 1 4338 0 is_stmt 0 discriminator 1
	cmpl	$0, -124(%rbp)	#, sp_valid
	je	.L1031	#,
	movq	-40(%rbp), %rax	# frame.to_allocate, D.30002
	testq	%rax, %rax	# D.30002
	jne	.L1031	#,
.L1030:
	.loc 1 4339 0 is_stmt 1
	cmpl	$2, -132(%rbp)	#, style
	sete	%al	#, D.30004
	movzbl	%al, %edx	# D.30004, D.30000
	.loc 1 4340 0
	movq	-40(%rbp), %rax	# frame.to_allocate, D.30002
	.loc 1 4339 0
	movl	%eax, %ecx	# D.30002, D.30000
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30003
	movl	%ecx, %esi	# D.30000,
	movq	%rax, %rdi	# D.30003,
	call	ix86_emit_restore_regs_using_mov	#
	jmp	.L1032	#
.L1031:
	.loc 1 4342 0
	cmpl	$2, -132(%rbp)	#, style
	sete	%al	#, D.30004
	movzbl	%al, %edx	# D.30004, D.30000
	movq	-120(%rbp), %rax	# offset, tmp231
	movl	%eax, %ecx	# tmp231, D.30000
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.30003
	movl	%ecx, %esi	# D.30000,
	movq	%rax, %rdi	# D.30003,
	call	ix86_emit_restore_regs_using_mov	#
.L1032:
	.loc 1 4346 0
	cmpl	$2, -132(%rbp)	#, style
	jne	.L1033	#,
.LBB38:
	.loc 1 4348 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.579
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1034	#,
	.loc 1 4348 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.578
	jmp	.L1035	#
.L1034:
	.loc 1 4348 0 discriminator 2
	movl	$4, %eax	#, iftmp.578
.L1035:
	.loc 1 4348 0 discriminator 3
	movl	$2, %esi	#,
	movl	%eax, %edi	# iftmp.578,
	call	gen_rtx_REG	#
	movq	%rax, -112(%rbp)	# tmp232, sa
	.loc 1 4350 0 is_stmt 1 discriminator 3
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.580
	testl	%eax, %eax	# frame_pointer_needed.580
	je	.L1036	#,
	.loc 1 4352 0
	movq	global_rtl+32(%rip), %rdx	# global_rtl, D.30003
	movl	target_flags(%rip), %eax	# target_flags, target_flags.582
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1037	#,
	.loc 1 4352 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.581
	jmp	.L1038	#
.L1037:
	.loc 1 4352 0 discriminator 2
	movl	$4, %eax	#, iftmp.581
.L1038:
	.loc 1 4352 0 discriminator 3
	movq	-112(%rbp), %rcx	# sa, tmp233
	movl	%eax, %esi	# iftmp.581,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -104(%rbp)	# tmp234, tmp
	.loc 1 4353 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.584
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1039	#,
	.loc 1 4353 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.583
	jmp	.L1040	#
.L1039:
	.loc 1 4353 0 discriminator 2
	movl	$4, %eax	#, iftmp.583
.L1040:
	.loc 1 4353 0 discriminator 3
	movq	-104(%rbp), %rdx	# tmp, tmp235
	movq	%rax, %rsi	# iftmp.583,
	movq	%rdx, %rdi	# tmp235,
	call	plus_constant_wide	#
	movq	%rax, -104(%rbp)	# tmp236, tmp
	.loc 1 4354 0 is_stmt 1 discriminator 3
	movq	-104(%rbp), %rdx	# tmp, tmp237
	movq	-112(%rbp), %rax	# sa, tmp238
	movq	%rdx, %rcx	# tmp237,
	movq	%rax, %rdx	# tmp238,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	.loc 1 4356 0 discriminator 3
	movq	global_rtl+32(%rip), %rdx	# global_rtl, D.30003
	movl	target_flags(%rip), %eax	# target_flags, target_flags.586
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1041	#,
	.loc 1 4356 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.585
	jmp	.L1042	#
.L1041:
	.loc 1 4356 0 discriminator 2
	movl	$4, %eax	#, iftmp.585
.L1042:
	.loc 1 4356 0 discriminator 1
	movq	%rdx, %rsi	# D.30003,
	movl	%eax, %edi	# iftmp.585,
	call	gen_rtx_MEM	#
	movq	%rax, -104(%rbp)	# tmp239, tmp
	.loc 1 4357 0 is_stmt 1 discriminator 1
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.30003
	movq	-104(%rbp), %rdx	# tmp, tmp240
	movq	%rdx, %rsi	# tmp240,
	movq	%rax, %rdi	# D.30003,
	call	emit_move_insn	#
	.loc 1 4359 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30003
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30003
	movq	-112(%rbp), %rcx	# sa, tmp241
	movq	%rcx, %rsi	# tmp241,
	movq	%rax, %rdi	# D.30003,
	call	gen_pro_epilogue_adjust_stack	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	jmp	.L1048	#
.L1036:
	.loc 1 4364 0
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.30003
	movl	target_flags(%rip), %eax	# target_flags, target_flags.588
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1044	#,
	.loc 1 4364 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.587
	jmp	.L1045	#
.L1044:
	.loc 1 4364 0 discriminator 2
	movl	$4, %eax	#, iftmp.587
.L1045:
	.loc 1 4364 0 discriminator 3
	movq	-112(%rbp), %rcx	# sa, tmp242
	movl	%eax, %esi	# iftmp.587,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -104(%rbp)	# tmp243, tmp
	.loc 1 4365 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rdx	# frame.to_allocate, D.30002
	movl	-80(%rbp), %ecx	# frame.nregs, D.30000
	movl	target_flags(%rip), %eax	# target_flags, target_flags.590
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1046	#,
	.loc 1 4365 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.589
	jmp	.L1047	#
.L1046:
	.loc 1 4365 0 discriminator 2
	movl	$4, %eax	#, iftmp.589
.L1047:
	.loc 1 4365 0 discriminator 3
	imull	%ecx, %eax	# D.30000, D.30000
	cltq
	addq	%rax, %rdx	# D.30002, D.30002
	movq	-104(%rbp), %rax	# tmp, tmp244
	movq	%rdx, %rsi	# D.30002,
	movq	%rax, %rdi	# tmp244,
	call	plus_constant_wide	#
	movq	%rax, -104(%rbp)	# tmp245, tmp
	.loc 1 4367 0 is_stmt 1 discriminator 3
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30003
	movq	-104(%rbp), %rdx	# tmp, tmp246
	movq	%rdx, %rcx	# tmp246,
	movq	%rax, %rdx	# D.30003,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
.LBE38:
	jmp	.L1048	#
.L1033:
	.loc 1 4370 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.591
	testl	%eax, %eax	# frame_pointer_needed.591
	jne	.L1049	#,
	.loc 1 4373 0
	movq	-40(%rbp), %rdx	# frame.to_allocate, D.30002
	movl	-80(%rbp), %ecx	# frame.nregs, D.30000
	movl	target_flags(%rip), %eax	# target_flags, target_flags.593
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1050	#,
	.loc 1 4373 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.592
	jmp	.L1051	#
.L1050:
	.loc 1 4373 0 discriminator 2
	movl	$4, %eax	#, iftmp.592
.L1051:
	.loc 1 4373 0 discriminator 1
	imull	%ecx, %eax	# D.30000, D.30000
	.loc 1 4371 0 is_stmt 1 discriminator 1
	cltq
	addq	%rdx, %rax	# D.30002, D.30002
	movq	%rax, %rsi	# D.30002,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30003
	movq	global_rtl+16(%rip), %rcx	# global_rtl, D.30003
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30003
	movq	%rcx, %rsi	# D.30003,
	movq	%rax, %rdi	# D.30003,
	call	gen_pro_epilogue_adjust_stack	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	jmp	.L1048	#
.L1049:
	.loc 1 4376 0
	movl	$49, %edx	#, x86_use_leave.594
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.595
	movl	%eax, %ecx	# ix86_cpu.596, tmp262
	sarl	%cl, %edx	# tmp262, D.30000
	movl	%edx, %eax	# D.30000, D.30000
	andl	$1, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	jne	.L1052	#,
	.loc 1 4376 0 is_stmt 0 discriminator 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.597
	testl	%eax, %eax	# optimize_size.597
	jne	.L1052	#,
	movl	use_fast_prologue_epilogue(%rip), %eax	# use_fast_prologue_epilogue, use_fast_prologue_epilogue.598
	testl	%eax, %eax	# use_fast_prologue_epilogue.598
	jne	.L1053	#,
.L1052:
	.loc 1 4377 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.600
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1054	#,
	.loc 1 4377 0 is_stmt 0 discriminator 1
	call	gen_leave_rex64	#
	jmp	.L1055	#
.L1054:
	.loc 1 4377 0 discriminator 2
	call	gen_leave	#
.L1055:
	.loc 1 4377 0 discriminator 3
	movq	%rax, %rdi	# iftmp.599,
	call	emit_insn	#
	jmp	.L1048	#
.L1053:
	.loc 1 4380 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30003
	movq	global_rtl+32(%rip), %rcx	# global_rtl, D.30003
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30003
	movq	%rcx, %rsi	# D.30003,
	movq	%rax, %rdi	# D.30003,
	call	gen_pro_epilogue_adjust_stack	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	.loc 1 4383 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.601
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1056	#,
	.loc 1 4384 0
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.30003
	movq	%rax, %rdi	# D.30003,
	call	gen_popdi1	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	jmp	.L1048	#
.L1056:
	.loc 1 4386 0
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.30003
	movq	%rax, %rdi	# D.30003,
	call	gen_popsi1	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	.loc 1 4346 0
	jmp	.L1057	#
.L1048:
	jmp	.L1057	#
.L1029:
	.loc 1 4393 0
	cmpl	$0, -124(%rbp)	#, sp_valid
	jne	.L1058	#,
	.loc 1 4395 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.602
	testl	%eax, %eax	# frame_pointer_needed.602
	jne	.L1059	#,
	.loc 1 4396 0
	movl	$__FUNCTION__.15457, %edx	#,
	movl	$4396, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1059:
	.loc 1 4397 0
	movq	-120(%rbp), %rax	# offset, tmp247
	movq	%rax, %rsi	# tmp247,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30003
	movq	global_rtl+32(%rip), %rcx	# global_rtl, D.30003
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30003
	movq	%rcx, %rsi	# D.30003,
	movq	%rax, %rdi	# D.30003,
	call	gen_pro_epilogue_adjust_stack	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	jmp	.L1060	#
.L1058:
	.loc 1 4401 0
	movq	-40(%rbp), %rax	# frame.to_allocate, D.30002
	testq	%rax, %rax	# D.30002
	je	.L1060	#,
	.loc 1 4402 0
	movq	-40(%rbp), %rax	# frame.to_allocate, D.30002
	movq	%rax, %rsi	# D.30002,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30003
	movq	global_rtl+16(%rip), %rcx	# global_rtl, D.30003
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30003
	movq	%rcx, %rsi	# D.30003,
	movq	%rax, %rdi	# D.30003,
	call	gen_pro_epilogue_adjust_stack	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
.L1060:
	.loc 1 4406 0
	movl	$0, -128(%rbp)	#, regno
	jmp	.L1061	#
.L1068:
	.loc 1 4407 0
	movl	-128(%rbp), %eax	# regno, tmp248
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp248,
	call	ix86_save_reg	#
	testl	%eax, %eax	# D.30000
	je	.L1062	#,
	.loc 1 4409 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.603
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1063	#,
	.loc 1 4410 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.605
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1064	#,
	.loc 1 4410 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.604
	jmp	.L1065	#
.L1064:
	.loc 1 4410 0 discriminator 2
	movl	$4, %eax	#, iftmp.604
.L1065:
	movl	-128(%rbp), %edx	# regno, tmp249
	movl	%edx, %esi	# tmp249,
	movl	%eax, %edi	# iftmp.604,
	call	gen_rtx_REG	#
	movq	%rax, %rdi	# D.30003,
	call	gen_popdi1	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	jmp	.L1062	#
.L1063:
	.loc 1 4412 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.607
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1066	#,
	.loc 1 4412 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.606
	jmp	.L1067	#
.L1066:
	.loc 1 4412 0 discriminator 2
	movl	$4, %eax	#, iftmp.606
.L1067:
	.loc 1 4412 0 discriminator 3
	movl	-128(%rbp), %edx	# regno, tmp250
	movl	%edx, %esi	# tmp250,
	movl	%eax, %edi	# iftmp.606,
	call	gen_rtx_REG	#
	movq	%rax, %rdi	# D.30003,
	call	gen_popsi1	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
.L1062:
	.loc 1 4406 0 is_stmt 1
	addl	$1, -128(%rbp)	#, regno
.L1061:
	.loc 1 4406 0 is_stmt 0 discriminator 1
	cmpl	$52, -128(%rbp)	#, regno
	jle	.L1068	#,
	.loc 1 4414 0 is_stmt 1
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.608
	testl	%eax, %eax	# frame_pointer_needed.608
	je	.L1057	#,
	.loc 1 4418 0
	movl	$49, %edx	#, x86_use_leave.609
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.610
	movl	%eax, %ecx	# ix86_cpu.611, tmp264
	sarl	%cl, %edx	# tmp264, D.30000
	movl	%edx, %eax	# D.30000, D.30000
	andl	$1, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1069	#,
	.loc 1 4419 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.613
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1070	#,
	.loc 1 4419 0 is_stmt 0 discriminator 1
	call	gen_leave_rex64	#
	jmp	.L1071	#
.L1070:
	.loc 1 4419 0 discriminator 2
	call	gen_leave	#
.L1071:
	.loc 1 4419 0 discriminator 3
	movq	%rax, %rdi	# iftmp.612,
	call	emit_insn	#
	jmp	.L1057	#
.L1069:
	.loc 1 4420 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.614
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1072	#,
	.loc 1 4421 0
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.30003
	movq	%rax, %rdi	# D.30003,
	call	gen_popdi1	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	jmp	.L1057	#
.L1072:
	.loc 1 4423 0
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.30003
	movq	%rax, %rdi	# D.30003,
	call	gen_popsi1	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
.L1057:
	.loc 1 4428 0
	cmpl	$0, -132(%rbp)	#, style
	je	.L1017	#,
	.loc 1 4431 0
	movq	cfun(%rip), %rax	# cfun, cfun.615
	movl	64(%rax), %eax	# cfun.615_192->pops_args, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1075	#,
	.loc 1 4431 0 is_stmt 0 discriminator 1
	movq	cfun(%rip), %rax	# cfun, cfun.616
	movl	68(%rax), %eax	# cfun.616_194->args_size, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1075	#,
.LBB39:
	.loc 1 4433 0 is_stmt 1
	movq	cfun(%rip), %rax	# cfun, cfun.617
	movl	64(%rax), %eax	# cfun.617_196->pops_args, D.30000
	cltq
	movq	%rax, %rsi	# D.30002,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -96(%rbp)	# tmp251, popc
	.loc 1 4439 0
	movq	cfun(%rip), %rax	# cfun, cfun.618
	movl	64(%rax), %eax	# cfun.618_200->pops_args, D.30000
	cmpl	$65535, %eax	#, D.30000
	jle	.L1076	#,
.LBB40:
	.loc 1 4441 0
	movl	$2, %esi	#,
	movl	$4, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -88(%rbp)	# tmp252, ecx
	.loc 1 4444 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.619
	andl	$33554432, %eax	#, D.30000
	testl	%eax, %eax	# D.30000
	je	.L1077	#,
	.loc 1 4445 0
	movl	$__FUNCTION__.15457, %edx	#,
	movl	$4445, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1077:
	.loc 1 4447 0
	movq	-88(%rbp), %rax	# ecx, tmp253
	movq	%rax, %rdi	# tmp253,
	call	gen_popsi1	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	.loc 1 4448 0
	movq	global_rtl+16(%rip), %rcx	# global_rtl, D.30003
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30003
	movq	-96(%rbp), %rdx	# popc, tmp254
	movq	%rcx, %rsi	# D.30003,
	movq	%rax, %rdi	# D.30003,
	call	gen_addsi3	#
	movq	%rax, %rdi	# D.30003,
	call	emit_insn	#
	.loc 1 4449 0
	movq	-88(%rbp), %rax	# ecx, tmp255
	movq	%rax, %rdi	# tmp255,
	call	gen_return_indirect_internal	#
	movq	%rax, %rdi	# D.30003,
	call	emit_jump_insn	#
.LBE40:
.LBE39:
	.loc 1 4432 0
	jmp	.L1079	#
.L1076:
.LBB41:
	.loc 1 4452 0
	movq	-96(%rbp), %rax	# popc, tmp256
	movq	%rax, %rdi	# tmp256,
	call	gen_return_pop_internal	#
	movq	%rax, %rdi	# D.30003,
	call	emit_jump_insn	#
.LBE41:
	.loc 1 4432 0
	jmp	.L1079	#
.L1075:
	.loc 1 4455 0
	call	gen_return_internal	#
	movq	%rax, %rdi	# D.30003,
	call	emit_jump_insn	#
	jmp	.L1017	#
.L1079:
.L1017:
	.loc 1 4456 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE83:
	.size	ix86_expand_epilogue, .-ix86_expand_epilogue
	.type	ix86_decompose_address, @function
ix86_decompose_address:
.LFB84:
	.loc 1 4468 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, %rax	# addr, addr
	movq	%rsi, -104(%rbp)	# out, out
	.loc 1 4469 0
	movq	$0, -72(%rbp)	#, base
	.loc 1 4470 0
	movq	$0, -64(%rbp)	#, index
	.loc 1 4471 0
	movq	$0, -56(%rbp)	#, disp
	.loc 1 4472 0
	movq	$1, -48(%rbp)	#, scale
	.loc 1 4473 0
	movq	$0, -40(%rbp)	#, scale_rtx
	.loc 1 4474 0
	movl	$1, -84(%rbp)	#, retval
	.loc 1 4476 0
	movzwl	(%rax), %edx	# addr_31(D)->code, D.30006
	cmpw	$61, %dx	#, D.30006
	je	.L1081	#,
	.loc 1 4476 0 is_stmt 0 discriminator 1
	movzwl	(%rax), %edx	# addr_31(D)->code, D.30006
	cmpw	$63, %dx	#, D.30006
	jne	.L1082	#,
.L1081:
	.loc 1 4477 0 is_stmt 1
	movq	%rax, -72(%rbp)	# addr, base
	jmp	.L1083	#
.L1082:
	.loc 1 4478 0
	movzwl	(%rax), %edx	# addr_31(D)->code, D.30006
	cmpw	$75, %dx	#, D.30006
	jne	.L1084	#,
.LBB42:
	.loc 1 4480 0
	movq	8(%rax), %rdx	# addr_31(D)->fld[0].rtx, tmp89
	movq	%rdx, -32(%rbp)	# tmp89, op0
	.loc 1 4481 0
	movq	16(%rax), %rax	# addr_31(D)->fld[1].rtx, tmp90
	movq	%rax, -24(%rbp)	# tmp90, op1
	.loc 1 4482 0
	movq	-32(%rbp), %rax	# op0, tmp91
	movzwl	(%rax), %eax	# op0_35->code, D.30006
	movzwl	%ax, %eax	# D.30006, tmp92
	movl	%eax, -80(%rbp)	# tmp92, code0
	.loc 1 4483 0
	movq	-24(%rbp), %rax	# op1, tmp93
	movzwl	(%rax), %eax	# op1_36->code, D.30006
	movzwl	%ax, %eax	# D.30006, tmp94
	movl	%eax, -76(%rbp)	# tmp94, code1
	.loc 1 4485 0
	cmpl	$61, -80(%rbp)	#, code0
	je	.L1085	#,
	.loc 1 4485 0 is_stmt 0 discriminator 1
	cmpl	$63, -80(%rbp)	#, code0
	jne	.L1086	#,
.L1085:
	.loc 1 4487 0 is_stmt 1
	cmpl	$61, -76(%rbp)	#, code1
	je	.L1087	#,
	.loc 1 4487 0 is_stmt 0 discriminator 1
	cmpl	$63, -76(%rbp)	#, code1
	jne	.L1088	#,
.L1087:
	.loc 1 4488 0 is_stmt 1
	movq	-32(%rbp), %rax	# op0, tmp95
	movq	%rax, -64(%rbp)	# tmp95, index
	movq	-24(%rbp), %rax	# op1, tmp96
	movq	%rax, -72(%rbp)	# tmp96, base
	nop
	.loc 1 4487 0
	jmp	.L1090	#
.L1088:
	.loc 1 4490 0
	movq	-32(%rbp), %rax	# op0, tmp97
	movq	%rax, -72(%rbp)	# tmp97, base
	movq	-24(%rbp), %rax	# op1, tmp98
	movq	%rax, -56(%rbp)	# tmp98, disp
	.loc 1 4487 0
	jmp	.L1090	#
.L1086:
	.loc 1 4492 0
	cmpl	$78, -80(%rbp)	#, code0
	jne	.L1091	#,
	.loc 1 4494 0
	movq	-32(%rbp), %rax	# op0, tmp99
	movq	8(%rax), %rax	# op0_35->fld[0].rtx, tmp100
	movq	%rax, -64(%rbp)	# tmp100, index
	.loc 1 4495 0
	movq	-32(%rbp), %rax	# op0, tmp101
	movq	16(%rax), %rax	# op0_35->fld[1].rtx, tmp102
	movq	%rax, -40(%rbp)	# tmp102, scale_rtx
	.loc 1 4496 0
	cmpl	$61, -76(%rbp)	#, code1
	je	.L1092	#,
	.loc 1 4496 0 is_stmt 0 discriminator 1
	cmpl	$63, -76(%rbp)	#, code1
	jne	.L1093	#,
.L1092:
	.loc 1 4497 0 is_stmt 1
	movq	-24(%rbp), %rax	# op1, tmp103
	movq	%rax, -72(%rbp)	# tmp103, base
	jmp	.L1090	#
.L1093:
	.loc 1 4499 0
	movq	-24(%rbp), %rax	# op1, tmp104
	movq	%rax, -56(%rbp)	# tmp104, disp
	jmp	.L1090	#
.L1091:
	.loc 1 4501 0
	cmpl	$75, -80(%rbp)	#, code0
	jne	.L1095	#,
	.loc 1 4501 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# op0, tmp105
	movq	8(%rax), %rax	# op0_35->fld[0].rtx, D.30007
	movzwl	(%rax), %eax	# _45->code, D.30006
	cmpw	$78, %ax	#, D.30006
	jne	.L1095	#,
	.loc 1 4503 0 is_stmt 1
	movq	-32(%rbp), %rax	# op0, tmp106
	movq	8(%rax), %rax	# op0_35->fld[0].rtx, D.30007
	movq	8(%rax), %rax	# _47->fld[0].rtx, tmp107
	movq	%rax, -64(%rbp)	# tmp107, index
	.loc 1 4504 0
	movq	-32(%rbp), %rax	# op0, tmp108
	movq	8(%rax), %rax	# op0_35->fld[0].rtx, D.30007
	movq	16(%rax), %rax	# _49->fld[1].rtx, tmp109
	movq	%rax, -40(%rbp)	# tmp109, scale_rtx
	.loc 1 4505 0
	movq	-32(%rbp), %rax	# op0, tmp110
	movq	16(%rax), %rax	# op0_35->fld[1].rtx, tmp111
	movq	%rax, -72(%rbp)	# tmp111, base
	.loc 1 4506 0
	movq	-24(%rbp), %rax	# op1, tmp112
	movq	%rax, -56(%rbp)	# tmp112, disp
	jmp	.L1090	#
.L1095:
	.loc 1 4508 0
	cmpl	$75, -80(%rbp)	#, code0
	jne	.L1096	#,
	.loc 1 4510 0
	movq	-32(%rbp), %rax	# op0, tmp113
	movq	8(%rax), %rax	# op0_35->fld[0].rtx, tmp114
	movq	%rax, -64(%rbp)	# tmp114, index
	.loc 1 4511 0
	movq	-32(%rbp), %rax	# op0, tmp115
	movq	16(%rax), %rax	# op0_35->fld[1].rtx, tmp116
	movq	%rax, -72(%rbp)	# tmp116, base
	.loc 1 4512 0
	movq	-24(%rbp), %rax	# op1, tmp117
	movq	%rax, -56(%rbp)	# tmp117, disp
	jmp	.L1090	#
.L1096:
	.loc 1 4515 0
	movl	$0, %eax	#, D.30005
	jmp	.L1097	#
.L1090:
.LBE42:
	jmp	.L1083	#
.L1084:
	.loc 1 4517 0
	movzwl	(%rax), %edx	# addr_31(D)->code, D.30006
	cmpw	$78, %dx	#, D.30006
	jne	.L1098	#,
	.loc 1 4519 0
	movq	8(%rax), %rdx	# addr_31(D)->fld[0].rtx, tmp118
	movq	%rdx, -64(%rbp)	# tmp118, index
	.loc 1 4520 0
	movq	16(%rax), %rax	# addr_31(D)->fld[1].rtx, tmp119
	movq	%rax, -40(%rbp)	# tmp119, scale_rtx
	jmp	.L1083	#
.L1098:
	.loc 1 4522 0
	movzwl	(%rax), %edx	# addr_31(D)->code, D.30006
	cmpw	$87, %dx	#, D.30006
	jne	.L1099	#,
.LBB43:
	.loc 1 4527 0
	movq	8(%rax), %rdx	# addr_31(D)->fld[0].rtx, tmp120
	movq	%rdx, -64(%rbp)	# tmp120, index
	.loc 1 4528 0
	movq	16(%rax), %rax	# addr_31(D)->fld[1].rtx, tmp121
	movq	%rax, -16(%rbp)	# tmp121, tmp
	.loc 1 4529 0
	movq	-16(%rbp), %rax	# tmp, tmp122
	movzwl	(%rax), %eax	# tmp_66->code, D.30006
	cmpw	$54, %ax	#, D.30006
	je	.L1100	#,
	.loc 1 4530 0
	movl	$0, %eax	#, D.30005
	jmp	.L1097	#
.L1100:
	.loc 1 4531 0
	movq	-16(%rbp), %rax	# tmp, tmp123
	movq	8(%rax), %rax	# tmp_66->fld[0].rtwint, tmp124
	movq	%rax, -48(%rbp)	# tmp124, scale
	.loc 1 4532 0
	movq	-48(%rbp), %rax	# scale, scale.620
	cmpq	$3, %rax	#, scale.620
	jbe	.L1101	#,
	.loc 1 4533 0
	movl	$0, %eax	#, D.30005
	jmp	.L1097	#
.L1101:
	.loc 1 4534 0
	movq	-48(%rbp), %rax	# scale, tmp125
	movl	$1, %edx	#, tmp126
	movl	%eax, %ecx	# D.30005, tmp151
	sall	%cl, %edx	# tmp151, D.30005
	movl	%edx, %eax	# D.30005, D.30005
	cltq
	movq	%rax, -48(%rbp)	# tmp127, scale
	.loc 1 4535 0
	movl	$-1, -84(%rbp)	#, retval
.LBE43:
	jmp	.L1083	#
.L1099:
	.loc 1 4538 0
	movq	%rax, -56(%rbp)	# addr, disp
.L1083:
	.loc 1 4541 0
	cmpq	$0, -40(%rbp)	#, scale_rtx
	je	.L1102	#,
	.loc 1 4543 0
	movq	-40(%rbp), %rax	# scale_rtx, tmp128
	movzwl	(%rax), %eax	# scale_rtx_22->code, D.30006
	cmpw	$54, %ax	#, D.30006
	je	.L1103	#,
	.loc 1 4544 0
	movl	$0, %eax	#, D.30005
	jmp	.L1097	#
.L1103:
	.loc 1 4545 0
	movq	-40(%rbp), %rax	# scale_rtx, tmp129
	movq	8(%rax), %rax	# scale_rtx_22->fld[0].rtwint, tmp130
	movq	%rax, -48(%rbp)	# tmp130, scale
.L1102:
	.loc 1 4549 0
	cmpq	$0, -72(%rbp)	#, base
	je	.L1104	#,
	.loc 1 4549 0 is_stmt 0 discriminator 1
	cmpq	$0, -64(%rbp)	#, index
	je	.L1104	#,
	cmpq	$1, -48(%rbp)	#, scale
	jne	.L1104	#,
	.loc 1 4550 0 is_stmt 1
	movq	global_rtl+40(%rip), %rax	# global_rtl, D.30007
	cmpq	-64(%rbp), %rax	# index, D.30007
	je	.L1105	#,
	.loc 1 4550 0 is_stmt 0 discriminator 1
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.30007
	cmpq	-64(%rbp), %rax	# index, D.30007
	je	.L1105	#,
	.loc 1 4551 0 is_stmt 1
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30007
	cmpq	-64(%rbp), %rax	# index, D.30007
	jne	.L1104	#,
.L1105:
.LBB44:
	.loc 1 4553 0
	movq	-72(%rbp), %rax	# base, tmp131
	movq	%rax, -8(%rbp)	# tmp131, tmp
	.loc 1 4554 0
	movq	-64(%rbp), %rax	# index, tmp132
	movq	%rax, -72(%rbp)	# tmp132, base
	.loc 1 4555 0
	movq	-8(%rbp), %rax	# tmp, tmp133
	movq	%rax, -64(%rbp)	# tmp133, index
.L1104:
.LBE44:
	.loc 1 4559 0
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.30007
	cmpq	-72(%rbp), %rax	# base, D.30007
	je	.L1106	#,
	.loc 1 4560 0
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.30007
	cmpq	-72(%rbp), %rax	# base, D.30007
	je	.L1106	#,
	.loc 1 4561 0
	movq	global_rtl+40(%rip), %rax	# global_rtl, D.30007
	cmpq	-72(%rbp), %rax	# base, D.30007
	jne	.L1107	#,
.L1106:
	.loc 1 4561 0 is_stmt 0 discriminator 1
	cmpq	$0, -56(%rbp)	#, disp
	jne	.L1107	#,
	.loc 1 4562 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, tmp134
	movq	%rax, -56(%rbp)	# tmp134, disp
.L1107:
	.loc 1 4566 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.621
	cmpl	$4, %eax	#, ix86_cpu.621
	jne	.L1108	#,
	.loc 1 4566 0 is_stmt 0 discriminator 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.622
	testl	%eax, %eax	# optimize_size.622
	jne	.L1108	#,
	.loc 1 4567 0 is_stmt 1
	cmpq	$0, -72(%rbp)	#, base
	je	.L1108	#,
	.loc 1 4567 0 is_stmt 0 discriminator 1
	cmpq	$0, -64(%rbp)	#, index
	jne	.L1108	#,
	cmpq	$0, -56(%rbp)	#, disp
	jne	.L1108	#,
	.loc 1 4568 0 is_stmt 1
	movq	-72(%rbp), %rax	# base, tmp135
	movzwl	(%rax), %eax	# base_5->code, D.30006
	cmpw	$61, %ax	#, D.30006
	jne	.L1108	#,
	.loc 1 4569 0
	movq	-72(%rbp), %rax	# base, tmp136
	movl	8(%rax), %eax	# base_5->fld[0].rtuint, D.30008
	movl	%eax, %eax	# D.30008, tmp137
	movl	regclass_map(,%rax,4), %eax	# regclass_map, D.30009
	cmpl	$5, %eax	#, D.30009
	jne	.L1108	#,
	.loc 1 4570 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, tmp138
	movq	%rax, -56(%rbp)	# tmp138, disp
.L1108:
	.loc 1 4573 0
	cmpq	$0, -72(%rbp)	#, base
	jne	.L1109	#,
	.loc 1 4573 0 is_stmt 0 discriminator 1
	cmpq	$0, -64(%rbp)	#, index
	je	.L1109	#,
	cmpq	$0, -48(%rbp)	#, scale
	je	.L1109	#,
	cmpq	$2, -48(%rbp)	#, scale
	jne	.L1109	#,
	.loc 1 4574 0 is_stmt 1
	movq	-64(%rbp), %rax	# index, tmp139
	movq	%rax, -72(%rbp)	# tmp139, base
	movq	$1, -48(%rbp)	#, scale
.L1109:
	.loc 1 4577 0
	cmpq	$0, -72(%rbp)	#, base
	jne	.L1110	#,
	.loc 1 4577 0 is_stmt 0 discriminator 1
	cmpq	$0, -56(%rbp)	#, disp
	jne	.L1110	#,
	cmpq	$0, -64(%rbp)	#, index
	je	.L1110	#,
	cmpq	$1, -48(%rbp)	#, scale
	je	.L1110	#,
	.loc 1 4578 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, tmp140
	movq	%rax, -56(%rbp)	# tmp140, disp
.L1110:
	.loc 1 4580 0
	movq	-104(%rbp), %rax	# out, tmp141
	movq	-72(%rbp), %rdx	# base, tmp142
	movq	%rdx, (%rax)	# tmp142, out_100(D)->base
	.loc 1 4581 0
	movq	-104(%rbp), %rax	# out, tmp143
	movq	-64(%rbp), %rdx	# index, tmp144
	movq	%rdx, 8(%rax)	# tmp144, out_100(D)->index
	.loc 1 4582 0
	movq	-104(%rbp), %rax	# out, tmp145
	movq	-56(%rbp), %rdx	# disp, tmp146
	movq	%rdx, 16(%rax)	# tmp146, out_100(D)->disp
	.loc 1 4583 0
	movq	-104(%rbp), %rax	# out, tmp147
	movq	-48(%rbp), %rdx	# scale, tmp148
	movq	%rdx, 24(%rax)	# tmp148, out_100(D)->scale
	.loc 1 4585 0
	movl	-84(%rbp), %eax	# retval, D.30005
.L1097:
	.loc 1 4586 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE84:
	.size	ix86_decompose_address, .-ix86_decompose_address
	.globl	ix86_address_cost
	.type	ix86_address_cost, @function
ix86_address_cost:
.LFB85:
	.loc 1 4596 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# x, x
	.loc 1 4598 0
	movl	$1, -36(%rbp)	#, cost
	.loc 1 4600 0
	leaq	-32(%rbp), %rdx	#, tmp100
	movq	-56(%rbp), %rax	# x, tmp101
	movq	%rdx, %rsi	# tmp100,
	movq	%rax, %rdi	# tmp101,
	call	ix86_decompose_address	#
	testl	%eax, %eax	# D.30010
	jne	.L1112	#,
	.loc 1 4601 0
	movl	$__FUNCTION__.15484, %edx	#,
	movl	$4601, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1112:
	.loc 1 4604 0
	movq	-16(%rbp), %rax	# parts.disp, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1113	#,
	.loc 1 4604 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rdx	# parts.disp, D.30011
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30011
	cmpq	%rax, %rdx	# D.30011, D.30011
	je	.L1113	#,
	.loc 1 4605 0 is_stmt 1
	subl	$1, -36(%rbp)	#, cost
.L1113:
	.loc 1 4608 0
	movq	-32(%rbp), %rax	# parts.base, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1114	#,
	.loc 1 4609 0
	movq	-32(%rbp), %rax	# parts.base, D.30011
	movzwl	(%rax), %eax	# _13->code, D.30012
	cmpw	$61, %ax	#, D.30012
	jne	.L1115	#,
	.loc 1 4609 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# parts.base, D.30011
	movl	8(%rax), %eax	# _15->fld[0].rtuint, D.30013
	cmpl	$52, %eax	#, D.30013
	ja	.L1115	#,
.L1114:
	.loc 1 4610 0 is_stmt 1
	movq	-24(%rbp), %rax	# parts.index, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1116	#,
	.loc 1 4611 0
	movq	-24(%rbp), %rax	# parts.index, D.30011
	movzwl	(%rax), %eax	# _18->code, D.30012
	cmpw	$61, %ax	#, D.30012
	jne	.L1115	#,
	.loc 1 4612 0
	movq	-24(%rbp), %rax	# parts.index, D.30011
	movl	8(%rax), %eax	# _20->fld[0].rtuint, D.30013
	cmpl	$52, %eax	#, D.30013
	jbe	.L1116	#,
.L1115:
	.loc 1 4613 0
	addl	$1, -36(%rbp)	#, cost
.L1116:
	.loc 1 4615 0
	movq	-32(%rbp), %rax	# parts.base, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1117	#,
	.loc 1 4616 0
	movq	-32(%rbp), %rax	# parts.base, D.30011
	movzwl	(%rax), %eax	# _24->code, D.30012
	cmpw	$61, %ax	#, D.30012
	jne	.L1118	#,
	.loc 1 4616 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# parts.base, D.30011
	movl	8(%rax), %eax	# _26->fld[0].rtuint, D.30013
	cmpl	$52, %eax	#, D.30013
	jbe	.L1117	#,
.L1118:
	.loc 1 4617 0 is_stmt 1
	movq	-24(%rbp), %rax	# parts.index, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1117	#,
	.loc 1 4618 0
	movq	-24(%rbp), %rax	# parts.index, D.30011
	movzwl	(%rax), %eax	# _29->code, D.30012
	cmpw	$61, %ax	#, D.30012
	jne	.L1119	#,
	.loc 1 4618 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# parts.index, D.30011
	movl	8(%rax), %eax	# _31->fld[0].rtuint, D.30013
	cmpl	$52, %eax	#, D.30013
	jbe	.L1117	#,
.L1119:
	.loc 1 4619 0 is_stmt 1
	movq	-32(%rbp), %rdx	# parts.base, D.30011
	movq	-24(%rbp), %rax	# parts.index, D.30011
	cmpq	%rax, %rdx	# D.30011, D.30011
	je	.L1117	#,
	.loc 1 4620 0
	addl	$1, -36(%rbp)	#, cost
.L1117:
	.loc 1 4637 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.623
	cmpl	$4, %eax	#, ix86_cpu.623
	jne	.L1120	#,
	.loc 1 4638 0
	movq	-16(%rbp), %rax	# parts.disp, D.30011
	testq	%rax, %rax	# D.30011
	jne	.L1121	#,
	.loc 1 4638 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# parts.base, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1121	#,
	movq	-24(%rbp), %rax	# parts.index, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1121	#,
	movq	-8(%rbp), %rax	# parts.scale, D.30014
	cmpq	$1, %rax	#, D.30014
	jne	.L1122	#,
.L1121:
	.loc 1 4639 0 is_stmt 1
	movq	-16(%rbp), %rax	# parts.disp, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1123	#,
	.loc 1 4639 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# parts.base, D.30011
	testq	%rax, %rax	# D.30011
	jne	.L1123	#,
	movq	-24(%rbp), %rax	# parts.index, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1123	#,
	movq	-8(%rbp), %rax	# parts.scale, D.30014
	cmpq	$1, %rax	#, D.30014
	jne	.L1122	#,
.L1123:
	.loc 1 4640 0 is_stmt 1
	movq	-16(%rbp), %rax	# parts.disp, D.30011
	testq	%rax, %rax	# D.30011
	jne	.L1120	#,
	.loc 1 4640 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# parts.base, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1120	#,
	movq	-24(%rbp), %rax	# parts.index, D.30011
	testq	%rax, %rax	# D.30011
	je	.L1120	#,
	movq	-8(%rbp), %rax	# parts.scale, D.30014
	cmpq	$1, %rax	#, D.30014
	jne	.L1120	#,
.L1122:
	.loc 1 4641 0 is_stmt 1
	addl	$10, -36(%rbp)	#, cost
.L1120:
	.loc 1 4643 0
	movl	-36(%rbp), %eax	# cost, D.30010
	.loc 1 4644 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE85:
	.size	ix86_address_cost, .-ix86_address_cost
	.globl	ix86_find_base_term
	.type	ix86_find_base_term, @function
ix86_find_base_term:
.LFB86:
	.loc 1 4653 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# x, x
	.loc 1 4656 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.624
	andl	$33554432, %eax	#, D.30016
	testl	%eax, %eax	# D.30016
	je	.L1126	#,
	.loc 1 4658 0
	movq	-24(%rbp), %rax	# x, tmp92
	movzwl	(%rax), %eax	# x_6(D)->code, D.30017
	cmpw	$58, %ax	#, D.30017
	je	.L1127	#,
	.loc 1 4659 0
	movq	-24(%rbp), %rax	# x, D.30015
	jmp	.L1128	#
.L1127:
	.loc 1 4660 0
	movq	-24(%rbp), %rax	# x, tmp93
	movq	8(%rax), %rax	# x_6(D)->fld[0].rtx, tmp94
	movq	%rax, -8(%rbp)	# tmp94, term
	.loc 1 4661 0
	movq	-8(%rbp), %rax	# term, tmp95
	movzwl	(%rax), %eax	# term_9->code, D.30017
	cmpw	$75, %ax	#, D.30017
	jne	.L1129	#,
	.loc 1 4662 0
	movq	-8(%rbp), %rax	# term, tmp96
	movq	16(%rax), %rax	# term_9->fld[1].rtx, D.30018
	movzwl	(%rax), %eax	# _11->code, D.30017
	cmpw	$54, %ax	#, D.30017
	je	.L1130	#,
	.loc 1 4663 0
	movq	-8(%rbp), %rax	# term, tmp97
	movq	16(%rax), %rax	# term_9->fld[1].rtx, D.30018
	movzwl	(%rax), %eax	# _13->code, D.30017
	cmpw	$55, %ax	#, D.30017
	jne	.L1129	#,
.L1130:
	.loc 1 4664 0
	movq	-8(%rbp), %rax	# term, tmp98
	movq	8(%rax), %rax	# term_9->fld[0].rtx, tmp99
	movq	%rax, -8(%rbp)	# tmp99, term
.L1129:
	.loc 1 4665 0
	movq	-8(%rbp), %rax	# term, tmp100
	movzwl	(%rax), %eax	# term_1->code, D.30017
	cmpw	$42, %ax	#, D.30017
	jne	.L1131	#,
	.loc 1 4666 0
	movq	-8(%rbp), %rax	# term, tmp101
	movq	8(%rax), %rax	# term_1->fld[0].rtvec, D.30019
	movl	(%rax), %eax	# _17->num_elem, D.30016
	cmpl	$1, %eax	#, D.30016
	jne	.L1131	#,
	.loc 1 4667 0
	movq	-8(%rbp), %rax	# term, tmp102
	movl	16(%rax), %eax	# term_1->fld[1].rtint, D.30016
	cmpl	$15, %eax	#, D.30016
	je	.L1132	#,
.L1131:
	.loc 1 4668 0
	movq	-24(%rbp), %rax	# x, D.30015
	jmp	.L1128	#
.L1132:
	.loc 1 4670 0
	movq	-8(%rbp), %rax	# term, tmp103
	movq	8(%rax), %rax	# term_1->fld[0].rtvec, D.30019
	movq	8(%rax), %rax	# _20->elem, tmp104
	movq	%rax, -8(%rbp)	# tmp104, term
	.loc 1 4672 0
	movq	-8(%rbp), %rax	# term, tmp105
	movzwl	(%rax), %eax	# term_21->code, D.30017
	cmpw	$68, %ax	#, D.30017
	je	.L1133	#,
	.loc 1 4673 0
	movq	-8(%rbp), %rax	# term, tmp106
	movzwl	(%rax), %eax	# term_21->code, D.30017
	cmpw	$67, %ax	#, D.30017
	je	.L1133	#,
	.loc 1 4674 0
	movq	-24(%rbp), %rax	# x, D.30015
	jmp	.L1128	#
.L1133:
	.loc 1 4676 0
	movq	-8(%rbp), %rax	# term, D.30015
	jmp	.L1128	#
.L1126:
	.loc 1 4679 0
	movq	-24(%rbp), %rax	# x, tmp107
	movzwl	(%rax), %eax	# x_6(D)->code, D.30017
	cmpw	$75, %ax	#, D.30017
	jne	.L1134	#,
	.loc 1 4680 0
	movq	-24(%rbp), %rax	# x, tmp108
	movq	8(%rax), %rdx	# x_6(D)->fld[0].rtx, D.30018
	movq	pic_offset_table_rtx(%rip), %rax	# pic_offset_table_rtx, pic_offset_table_rtx.625
	cmpq	%rax, %rdx	# pic_offset_table_rtx.625, D.30018
	jne	.L1134	#,
	.loc 1 4681 0
	movq	-24(%rbp), %rax	# x, tmp109
	movq	16(%rax), %rax	# x_6(D)->fld[1].rtx, D.30018
	movzwl	(%rax), %eax	# _30->code, D.30017
	cmpw	$58, %ax	#, D.30017
	je	.L1135	#,
.L1134:
	.loc 1 4682 0
	movq	-24(%rbp), %rax	# x, D.30015
	jmp	.L1128	#
.L1135:
	.loc 1 4684 0
	movq	-24(%rbp), %rax	# x, tmp110
	movq	16(%rax), %rax	# x_6(D)->fld[1].rtx, D.30018
	movq	8(%rax), %rax	# _32->fld[0].rtx, tmp111
	movq	%rax, -8(%rbp)	# tmp111, term
	.loc 1 4686 0
	movq	-8(%rbp), %rax	# term, tmp112
	movzwl	(%rax), %eax	# term_33->code, D.30017
	cmpw	$75, %ax	#, D.30017
	jne	.L1136	#,
	.loc 1 4686 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# term, tmp113
	movq	16(%rax), %rax	# term_33->fld[1].rtx, D.30018
	movzwl	(%rax), %eax	# _35->code, D.30017
	cmpw	$54, %ax	#, D.30017
	jne	.L1136	#,
	.loc 1 4687 0 is_stmt 1
	movq	-8(%rbp), %rax	# term, tmp114
	movq	8(%rax), %rax	# term_33->fld[0].rtx, tmp115
	movq	%rax, -8(%rbp)	# tmp115, term
.L1136:
	.loc 1 4689 0
	movq	-8(%rbp), %rax	# term, tmp116
	movzwl	(%rax), %eax	# term_2->code, D.30017
	cmpw	$42, %ax	#, D.30017
	jne	.L1137	#,
	.loc 1 4690 0
	movq	-8(%rbp), %rax	# term, tmp117
	movq	8(%rax), %rax	# term_2->fld[0].rtvec, D.30019
	movl	(%rax), %eax	# _39->num_elem, D.30016
	cmpl	$1, %eax	#, D.30016
	jne	.L1137	#,
	.loc 1 4691 0
	movq	-8(%rbp), %rax	# term, tmp118
	movl	16(%rax), %eax	# term_2->fld[1].rtint, D.30016
	cmpl	$7, %eax	#, D.30016
	je	.L1138	#,
.L1137:
	.loc 1 4692 0
	movq	-24(%rbp), %rax	# x, D.30015
	jmp	.L1128	#
.L1138:
	.loc 1 4694 0
	movq	-8(%rbp), %rax	# term, tmp119
	movq	8(%rax), %rax	# term_2->fld[0].rtvec, D.30019
	movq	8(%rax), %rax	# _42->elem, tmp120
	movq	%rax, -8(%rbp)	# tmp120, term
	.loc 1 4696 0
	movq	-8(%rbp), %rax	# term, tmp121
	movzwl	(%rax), %eax	# term_43->code, D.30017
	cmpw	$68, %ax	#, D.30017
	je	.L1139	#,
	.loc 1 4697 0
	movq	-8(%rbp), %rax	# term, tmp122
	movzwl	(%rax), %eax	# term_43->code, D.30017
	cmpw	$67, %ax	#, D.30017
	je	.L1139	#,
	.loc 1 4698 0
	movq	-24(%rbp), %rax	# x, D.30015
	jmp	.L1128	#
.L1139:
	.loc 1 4700 0
	movq	-8(%rbp), %rax	# term, D.30015
.L1128:
	.loc 1 4701 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE86:
	.size	ix86_find_base_term, .-ix86_find_base_term
	.globl	legitimate_pic_address_disp_p
	.type	legitimate_pic_address_disp_p, @function
legitimate_pic_address_disp_p:
.LFB87:
	.loc 1 4709 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rbx	# disp, disp
	.loc 1 4712 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.626
	andl	$33554432, %eax	#, D.30020
	testl	%eax, %eax	# D.30020
	je	.L1141	#,
.LBB45:
	.loc 1 4714 0
	movq	%rbx, -24(%rbp)	# disp, x
	.loc 1 4715 0
	movzwl	(%rbx), %eax	# disp_9(D)->code, D.30021
	cmpw	$58, %ax	#, D.30021
	jne	.L1142	#,
	.loc 1 4716 0
	movq	8(%rbx), %rax	# disp_9(D)->fld[0].rtx, tmp106
	movq	%rax, -24(%rbp)	# tmp106, x
.L1142:
	.loc 1 4718 0
	movq	-24(%rbp), %rax	# x, tmp107
	movzwl	(%rax), %eax	# x_2->code, D.30021
	cmpw	$75, %ax	#, D.30021
	jne	.L1143	#,
	.loc 1 4719 0
	movq	-24(%rbp), %rax	# x, tmp108
	movq	16(%rax), %rax	# x_2->fld[1].rtx, D.30022
	movzwl	(%rax), %eax	# _14->code, D.30021
	cmpw	$54, %ax	#, D.30021
	jne	.L1143	#,
	.loc 1 4720 0
	movl	ix86_cmodel(%rip), %eax	# ix86_cmodel, ix86_cmodel.627
	cmpl	$5, %eax	#, ix86_cmodel.627
	jne	.L1143	#,
	.loc 1 4721 0
	movq	-24(%rbp), %rax	# x, tmp109
	movq	16(%rax), %rax	# x_2->fld[1].rtx, D.30022
	movq	8(%rax), %rax	# _17->fld[0].rtwint, D.30023
	cmpq	$1073741823, %rax	#, D.30023
	jg	.L1143	#,
	.loc 1 4722 0
	movq	-24(%rbp), %rax	# x, tmp110
	movq	16(%rax), %rax	# x_2->fld[1].rtx, D.30022
	movq	8(%rax), %rax	# _19->fld[0].rtwint, D.30023
	cmpq	$-1073741823, %rax	#, D.30023
	jl	.L1143	#,
	.loc 1 4723 0
	movq	-24(%rbp), %rax	# x, tmp111
	movq	8(%rax), %rax	# x_2->fld[0].rtx, tmp112
	movq	%rax, -24(%rbp)	# tmp112, x
.L1143:
	.loc 1 4724 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.629
	andl	$33554432, %eax	#, D.30020
	testl	%eax, %eax	# D.30020
	je	.L1144	#,
	.loc 1 4724 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.628
	jmp	.L1145	#
.L1144:
	.loc 1 4724 0 discriminator 2
	movl	$4, %eax	#, iftmp.628
.L1145:
	.loc 1 4724 0 discriminator 3
	movq	-24(%rbp), %rdx	# x, tmp113
	movl	%eax, %esi	# iftmp.628,
	movq	%rdx, %rdi	# tmp113,
	call	local_symbolic_operand	#
	testl	%eax, %eax	# D.30020
	je	.L1141	#,
	.loc 1 4725 0 is_stmt 1
	movl	$1, %eax	#, D.30020
	jmp	.L1146	#
.L1141:
.LBE45:
	.loc 1 4727 0
	movzwl	(%rbx), %eax	# disp_9(D)->code, D.30021
	cmpw	$58, %ax	#, D.30021
	je	.L1147	#,
	.loc 1 4728 0
	movl	$0, %eax	#, D.30020
	jmp	.L1146	#
.L1147:
	.loc 1 4729 0
	movq	8(%rbx), %rbx	# disp_9(D)->fld[0].rtx, disp
	.loc 1 4731 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.630
	andl	$33554432, %eax	#, D.30020
	testl	%eax, %eax	# D.30020
	je	.L1148	#,
	.loc 1 4735 0
	movzwl	(%rbx), %eax	# disp_30->code, D.30021
	cmpw	$42, %ax	#, D.30021
	jne	.L1149	#,
	.loc 1 4736 0
	movq	8(%rbx), %rax	# disp_30->fld[0].rtvec, D.30024
	movl	(%rax), %eax	# _34->num_elem, D.30020
	cmpl	$1, %eax	#, D.30020
	jne	.L1149	#,
	.loc 1 4737 0
	movl	16(%rbx), %eax	# disp_30->fld[1].rtint, D.30020
	cmpl	$15, %eax	#, D.30020
	je	.L1150	#,
.L1149:
	.loc 1 4738 0
	movl	$0, %eax	#, D.30020
	jmp	.L1146	#
.L1150:
	.loc 1 4740 0
	movq	8(%rbx), %rax	# disp_30->fld[0].rtvec, D.30024
	movq	8(%rax), %rax	# _37->elem, D.30022
	movzwl	(%rax), %eax	# _38->code, D.30021
	cmpw	$68, %ax	#, D.30021
	je	.L1151	#,
	.loc 1 4741 0
	movq	8(%rbx), %rax	# disp_30->fld[0].rtvec, D.30024
	movq	8(%rax), %rax	# _40->elem, D.30022
	movzwl	(%rax), %eax	# _41->code, D.30021
	cmpw	$67, %ax	#, D.30021
	je	.L1151	#,
	.loc 1 4742 0
	movl	$0, %eax	#, D.30020
	jmp	.L1146	#
.L1151:
	.loc 1 4743 0
	movl	$1, %eax	#, D.30020
	jmp	.L1146	#
.L1148:
	.loc 1 4746 0
	movzwl	(%rbx), %eax	# disp_30->code, D.30021
	cmpw	$75, %ax	#, D.30021
	jne	.L1152	#,
	.loc 1 4748 0
	movq	16(%rbx), %rax	# disp_30->fld[1].rtx, D.30022
	movzwl	(%rax), %eax	# _47->code, D.30021
	cmpw	$54, %ax	#, D.30021
	je	.L1153	#,
	.loc 1 4749 0
	movl	$0, %eax	#, D.30020
	jmp	.L1146	#
.L1153:
	.loc 1 4750 0
	movq	8(%rbx), %rbx	# disp_30->fld[0].rtx, disp
.L1152:
	.loc 1 4753 0
	movzwl	(%rbx), %eax	# disp_1->code, D.30021
	cmpw	$42, %ax	#, D.30021
	jne	.L1154	#,
	.loc 1 4754 0
	movq	8(%rbx), %rax	# disp_1->fld[0].rtvec, D.30024
	movl	(%rax), %eax	# _52->num_elem, D.30020
	cmpl	$1, %eax	#, D.30020
	je	.L1155	#,
.L1154:
	.loc 1 4755 0
	movl	$0, %eax	#, D.30020
	jmp	.L1146	#
.L1155:
	.loc 1 4758 0
	movl	16(%rbx), %eax	# disp_1->fld[1].rtint, D.30020
	cmpl	$6, %eax	#, D.30020
	je	.L1157	#,
	cmpl	$7, %eax	#, D.30020
	je	.L1158	#,
	jmp	.L1161	#
.L1157:
	.loc 1 4761 0
	movq	8(%rbx), %rax	# disp_1->fld[0].rtvec, D.30024
	movq	8(%rax), %rax	# _55->elem, D.30022
	movzwl	(%rax), %eax	# _56->code, D.30021
	cmpw	$68, %ax	#, D.30021
	sete	%al	#, D.30025
	movzbl	%al, %eax	# D.30025, D.30020
	jmp	.L1146	#
.L1158:
	.loc 1 4764 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.632
	andl	$33554432, %eax	#, D.30020
	testl	%eax, %eax	# D.30020
	je	.L1159	#,
	.loc 1 4764 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.631
	jmp	.L1160	#
.L1159:
	.loc 1 4764 0 discriminator 2
	movl	$4, %eax	#, iftmp.631
.L1160:
	.loc 1 4764 0 discriminator 3
	movq	8(%rbx), %rdx	# disp_1->fld[0].rtvec, D.30024
	movq	8(%rdx), %rdx	# _64->elem, D.30022
	movl	%eax, %esi	# iftmp.631,
	movq	%rdx, %rdi	# D.30022,
	call	local_symbolic_operand	#
	jmp	.L1146	#
.L1161:
	.loc 1 4767 0 is_stmt 1
	movl	$0, %eax	#, D.30020
.L1146:
	.loc 1 4768 0
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE87:
	.size	legitimate_pic_address_disp_p, .-legitimate_pic_address_disp_p
	.section	.rodata
	.align 8
.LC145:
	.string	"\n======\nGO_IF_LEGITIMATE_ADDRESS, mode = %s, strict = %d\n"
.LC146:
	.string	"decomposition failed"
.LC147:
	.string	"base is not a register"
.LC148:
	.string	"base is not in Pmode"
.LC149:
	.string	"base is not valid"
.LC150:
	.string	"index is not a register"
.LC151:
	.string	"index is not in Pmode"
.LC152:
	.string	"index is not valid"
.LC153:
	.string	"scale without index"
	.align 8
.LC154:
	.string	"scale is not a valid multiplier"
.LC155:
	.string	"displacement is not constant"
.LC156:
	.string	"displacement is out of range"
	.align 8
.LC157:
	.string	"displacement is a const_double"
	.align 8
.LC158:
	.string	"non-constant pic memory reference"
	.align 8
.LC159:
	.string	"displacement is an invalid pic construct"
.LC160:
	.string	"Success.\n"
.LC161:
	.string	"Error: %s\n"
	.text
	.globl	legitimate_address_p
	.type	legitimate_address_p, @function
legitimate_address_p:
.LFB88:
	.loc 1 4783 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -100(%rbp)	# mode, mode
	movq	%rsi, %rbx	# addr, addr
	movl	%edx, -104(%rbp)	# strict, strict
	.loc 1 4787 0
	movq	$0, -96(%rbp)	#, reason
	.loc 1 4788 0
	movq	$0, -88(%rbp)	#, reason_rtx
	.loc 1 4790 0
	movq	ix86_debug_addr_string(%rip), %rax	# ix86_debug_addr_string, ix86_debug_addr_string.633
	testq	%rax, %rax	# ix86_debug_addr_string.633
	je	.L1163	#,
	.loc 1 4794 0
	movl	-100(%rbp), %eax	# mode, mode.634
	.loc 1 4792 0
	cltq
	movq	mode_name(,%rax,8), %rdx	# mode_name, D.30027
	movq	stderr(%rip), %rax	# stderr, stderr.635
	movl	-104(%rbp), %ecx	# strict, tmp161
	movl	$.LC145, %esi	#,
	movq	%rax, %rdi	# stderr.635,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 4795 0
	movq	%rbx, %rdi	# addr,
	call	debug_rtx	#
.L1163:
	.loc 1 4798 0
	leaq	-48(%rbp), %rax	#, tmp162
	movq	%rax, %rsi	# tmp162,
	movq	%rbx, %rdi	# addr,
	call	ix86_decompose_address	#
	testl	%eax, %eax	# D.30026
	jg	.L1164	#,
	.loc 1 4800 0
	movq	$.LC146, -96(%rbp)	#, reason
	.loc 1 4801 0
	jmp	.L1165	#
.L1164:
	.loc 1 4804 0
	movq	-48(%rbp), %rax	# parts.base, tmp163
	movq	%rax, -80(%rbp)	# tmp163, base
	.loc 1 4805 0
	movq	-40(%rbp), %rax	# parts.index, tmp164
	movq	%rax, -72(%rbp)	# tmp164, index
	.loc 1 4806 0
	movq	-32(%rbp), %rax	# parts.disp, tmp165
	movq	%rax, -64(%rbp)	# tmp165, disp
	.loc 1 4807 0
	movq	-24(%rbp), %rax	# parts.scale, tmp166
	movq	%rax, -56(%rbp)	# tmp166, scale
	.loc 1 4815 0
	cmpq	$0, -80(%rbp)	#, base
	je	.L1166	#,
	.loc 1 4817 0
	movq	-80(%rbp), %rax	# base, tmp167
	movq	%rax, -88(%rbp)	# tmp167, reason_rtx
	.loc 1 4819 0
	movq	-80(%rbp), %rax	# base, tmp168
	movzwl	(%rax), %eax	# base_17->code, D.30028
	cmpw	$61, %ax	#, D.30028
	je	.L1167	#,
	.loc 1 4821 0
	movq	$.LC147, -96(%rbp)	#, reason
	.loc 1 4822 0
	jmp	.L1165	#
.L1167:
	.loc 1 4825 0
	movq	-80(%rbp), %rax	# base, tmp169
	movzbl	2(%rax), %eax	# base_17->mode, D.30029
	movzbl	%al, %edx	# D.30029, D.30030
	movl	target_flags(%rip), %eax	# target_flags, target_flags.637
	andl	$33554432, %eax	#, D.30026
	testl	%eax, %eax	# D.30026
	je	.L1168	#,
	.loc 1 4825 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.636
	jmp	.L1169	#
.L1168:
	.loc 1 4825 0 discriminator 2
	movl	$4, %eax	#, iftmp.636
.L1169:
	.loc 1 4825 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.636, D.30030
	je	.L1170	#,
	.loc 1 4827 0 is_stmt 1
	movq	$.LC148, -96(%rbp)	#, reason
	.loc 1 4828 0
	jmp	.L1165	#
.L1170:
	.loc 1 4831 0
	cmpl	$0, -104(%rbp)	#, strict
	je	.L1171	#,
	.loc 1 4831 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# base, tmp170
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$7, %eax	#, D.30030
	jbe	.L1171	#,
	movq	-80(%rbp), %rax	# base, tmp171
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$16, %eax	#, D.30030
	je	.L1171	#,
	movq	-80(%rbp), %rax	# base, tmp172
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$20, %eax	#, D.30030
	je	.L1171	#,
	movq	-80(%rbp), %rax	# base, tmp173
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$36, %eax	#, D.30030
	jbe	.L1172	#,
	.loc 1 4831 0 discriminator 2
	movq	-80(%rbp), %rax	# base, tmp174
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$44, %eax	#, D.30030
	jbe	.L1171	#,
.L1172:
	.loc 1 4831 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.638
	movq	-80(%rbp), %rax	# base, tmp175
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	movl	%eax, %eax	# D.30030, D.30031
	addq	%rax, %rax	# D.30031
	addq	%rdx, %rax	# reg_renumber.638, D.30032
	movzwl	(%rax), %eax	# *_40, D.30033
	cmpw	$36, %ax	#, D.30028
	jbe	.L1173	#,
	.loc 1 4831 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.639
	movq	-80(%rbp), %rax	# base, tmp176
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	movl	%eax, %eax	# D.30030, D.30031
	addq	%rax, %rax	# D.30031
	addq	%rdx, %rax	# reg_renumber.639, D.30032
	movzwl	(%rax), %eax	# *_47, D.30033
	cmpw	$44, %ax	#, D.30028
	jbe	.L1171	#,
.L1173:
	.loc 1 4831 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.640
	movq	-80(%rbp), %rax	# base, tmp177
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	movl	%eax, %eax	# D.30030, D.30031
	addq	%rax, %rax	# D.30031
	addq	%rdx, %rax	# reg_renumber.640, D.30032
	movzwl	(%rax), %eax	# *_54, D.30033
	cmpw	$7, %ax	#, D.30028
	ja	.L1174	#,
.L1171:
	.loc 1 4832 0 is_stmt 1
	cmpl	$0, -104(%rbp)	#, strict
	jne	.L1166	#,
	.loc 1 4832 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# base, tmp178
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$7, %eax	#, D.30030
	jbe	.L1166	#,
	movq	-80(%rbp), %rax	# base, tmp179
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$16, %eax	#, D.30030
	je	.L1166	#,
	movq	-80(%rbp), %rax	# base, tmp180
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$20, %eax	#, D.30030
	je	.L1166	#,
	movq	-80(%rbp), %rax	# base, tmp181
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$36, %eax	#, D.30030
	jbe	.L1175	#,
	.loc 1 4832 0 discriminator 2
	movq	-80(%rbp), %rax	# base, tmp182
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$44, %eax	#, D.30030
	jbe	.L1166	#,
.L1175:
	.loc 1 4832 0 discriminator 1
	movq	-80(%rbp), %rax	# base, tmp183
	movl	8(%rax), %eax	# base_17->fld[0].rtuint, D.30030
	cmpl	$52, %eax	#, D.30030
	ja	.L1166	#,
.L1174:
	.loc 1 4834 0 is_stmt 1
	movq	$.LC149, -96(%rbp)	#, reason
	.loc 1 4835 0
	jmp	.L1165	#
.L1166:
	.loc 1 4845 0
	cmpq	$0, -72(%rbp)	#, index
	je	.L1176	#,
	.loc 1 4847 0
	movq	-72(%rbp), %rax	# index, tmp184
	movq	%rax, -88(%rbp)	# tmp184, reason_rtx
	.loc 1 4849 0
	movq	-72(%rbp), %rax	# index, tmp185
	movzwl	(%rax), %eax	# index_18->code, D.30028
	cmpw	$61, %ax	#, D.30028
	je	.L1177	#,
	.loc 1 4851 0
	movq	$.LC150, -96(%rbp)	#, reason
	.loc 1 4852 0
	jmp	.L1165	#
.L1177:
	.loc 1 4855 0
	movq	-72(%rbp), %rax	# index, tmp186
	movzbl	2(%rax), %eax	# index_18->mode, D.30029
	movzbl	%al, %edx	# D.30029, D.30030
	movl	target_flags(%rip), %eax	# target_flags, target_flags.642
	andl	$33554432, %eax	#, D.30026
	testl	%eax, %eax	# D.30026
	je	.L1178	#,
	.loc 1 4855 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.641
	jmp	.L1179	#
.L1178:
	.loc 1 4855 0 discriminator 2
	movl	$4, %eax	#, iftmp.641
.L1179:
	.loc 1 4855 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.641, D.30030
	je	.L1180	#,
	.loc 1 4857 0 is_stmt 1
	movq	$.LC151, -96(%rbp)	#, reason
	.loc 1 4858 0
	jmp	.L1165	#
.L1180:
	.loc 1 4861 0
	cmpl	$0, -104(%rbp)	#, strict
	je	.L1181	#,
	.loc 1 4861 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# index, tmp187
	movl	8(%rax), %eax	# index_18->fld[0].rtuint, D.30030
	cmpl	$6, %eax	#, D.30030
	jbe	.L1181	#,
	movq	-72(%rbp), %rax	# index, tmp188
	movl	8(%rax), %eax	# index_18->fld[0].rtuint, D.30030
	cmpl	$36, %eax	#, D.30030
	jbe	.L1182	#,
	.loc 1 4861 0 discriminator 2
	movq	-72(%rbp), %rax	# index, tmp189
	movl	8(%rax), %eax	# index_18->fld[0].rtuint, D.30030
	cmpl	$44, %eax	#, D.30030
	jbe	.L1181	#,
.L1182:
	.loc 1 4861 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.643
	movq	-72(%rbp), %rax	# index, tmp190
	movl	8(%rax), %eax	# index_18->fld[0].rtuint, D.30030
	movl	%eax, %eax	# D.30030, D.30031
	addq	%rax, %rax	# D.30031
	addq	%rdx, %rax	# reg_renumber.643, D.30032
	movzwl	(%rax), %eax	# *_81, D.30033
	cmpw	$36, %ax	#, D.30028
	jbe	.L1183	#,
	.loc 1 4861 0 discriminator 2
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.644
	movq	-72(%rbp), %rax	# index, tmp191
	movl	8(%rax), %eax	# index_18->fld[0].rtuint, D.30030
	movl	%eax, %eax	# D.30030, D.30031
	addq	%rax, %rax	# D.30031
	addq	%rdx, %rax	# reg_renumber.644, D.30032
	movzwl	(%rax), %eax	# *_88, D.30033
	cmpw	$44, %ax	#, D.30028
	jbe	.L1181	#,
.L1183:
	.loc 1 4861 0 discriminator 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.645
	movq	-72(%rbp), %rax	# index, tmp192
	movl	8(%rax), %eax	# index_18->fld[0].rtuint, D.30030
	movl	%eax, %eax	# D.30030, D.30031
	addq	%rax, %rax	# D.30031
	addq	%rdx, %rax	# reg_renumber.645, D.30032
	movzwl	(%rax), %eax	# *_95, D.30033
	cmpw	$6, %ax	#, D.30028
	ja	.L1184	#,
.L1181:
	.loc 1 4862 0 is_stmt 1
	cmpl	$0, -104(%rbp)	#, strict
	jne	.L1176	#,
	.loc 1 4862 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# index, tmp193
	movl	8(%rax), %eax	# index_18->fld[0].rtuint, D.30030
	cmpl	$6, %eax	#, D.30030
	jbe	.L1176	#,
	movq	-72(%rbp), %rax	# index, tmp194
	movl	8(%rax), %eax	# index_18->fld[0].rtuint, D.30030
	cmpl	$36, %eax	#, D.30030
	jbe	.L1185	#,
	.loc 1 4862 0 discriminator 2
	movq	-72(%rbp), %rax	# index, tmp195
	movl	8(%rax), %eax	# index_18->fld[0].rtuint, D.30030
	cmpl	$44, %eax	#, D.30030
	jbe	.L1176	#,
.L1185:
	.loc 1 4862 0 discriminator 1
	movq	-72(%rbp), %rax	# index, tmp196
	movl	8(%rax), %eax	# index_18->fld[0].rtuint, D.30030
	cmpl	$52, %eax	#, D.30030
	ja	.L1176	#,
.L1184:
	.loc 1 4864 0 is_stmt 1
	movq	$.LC152, -96(%rbp)	#, reason
	.loc 1 4865 0
	jmp	.L1165	#
.L1176:
	.loc 1 4870 0
	cmpq	$1, -56(%rbp)	#, scale
	je	.L1186	#,
	.loc 1 4872 0
	movq	-56(%rbp), %rax	# scale, tmp197
	movq	%rax, %rsi	# tmp197,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -88(%rbp)	# tmp198, reason_rtx
	.loc 1 4873 0
	cmpq	$0, -72(%rbp)	#, index
	jne	.L1187	#,
	.loc 1 4875 0
	movq	$.LC153, -96(%rbp)	#, reason
	.loc 1 4876 0
	jmp	.L1165	#
.L1187:
	.loc 1 4879 0
	cmpq	$2, -56(%rbp)	#, scale
	je	.L1186	#,
	.loc 1 4879 0 is_stmt 0 discriminator 1
	cmpq	$4, -56(%rbp)	#, scale
	je	.L1186	#,
	cmpq	$8, -56(%rbp)	#, scale
	je	.L1186	#,
	.loc 1 4881 0 is_stmt 1
	movq	$.LC154, -96(%rbp)	#, reason
	.loc 1 4882 0
	jmp	.L1165	#
.L1186:
	.loc 1 4887 0
	cmpq	$0, -64(%rbp)	#, disp
	je	.L1188	#,
	.loc 1 4889 0
	movq	-64(%rbp), %rax	# disp, tmp199
	movq	%rax, -88(%rbp)	# tmp199, reason_rtx
	.loc 1 4891 0
	movq	-64(%rbp), %rax	# disp, tmp200
	movzwl	(%rax), %eax	# disp_19->code, D.30028
	cmpw	$67, %ax	#, D.30028
	je	.L1189	#,
	.loc 1 4891 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# disp, tmp201
	movzwl	(%rax), %eax	# disp_19->code, D.30028
	cmpw	$68, %ax	#, D.30028
	je	.L1189	#,
	movq	-64(%rbp), %rax	# disp, tmp202
	movzwl	(%rax), %eax	# disp_19->code, D.30028
	cmpw	$54, %ax	#, D.30028
	je	.L1189	#,
	movq	-64(%rbp), %rax	# disp, tmp203
	movzwl	(%rax), %eax	# disp_19->code, D.30028
	cmpw	$58, %ax	#, D.30028
	je	.L1189	#,
	movq	-64(%rbp), %rax	# disp, tmp204
	movzwl	(%rax), %eax	# disp_19->code, D.30028
	cmpw	$55, %ax	#, D.30028
	je	.L1189	#,
	.loc 1 4893 0 is_stmt 1
	movq	$.LC155, -96(%rbp)	#, reason
	.loc 1 4894 0
	jmp	.L1165	#
.L1189:
	.loc 1 4897 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.646
	andl	$33554432, %eax	#, D.30026
	testl	%eax, %eax	# D.30026
	je	.L1190	#,
	.loc 1 4899 0
	movq	-64(%rbp), %rax	# disp, tmp205
	movq	%rax, %rdi	# tmp205,
	call	x86_64_sign_extended_value	#
	testl	%eax, %eax	# D.30026
	jne	.L1191	#,
	.loc 1 4901 0
	movq	$.LC156, -96(%rbp)	#, reason
	.loc 1 4902 0
	jmp	.L1165	#
.L1190:
	.loc 1 4907 0
	movq	-64(%rbp), %rax	# disp, tmp206
	movzwl	(%rax), %eax	# disp_19->code, D.30028
	cmpw	$55, %ax	#, D.30028
	jne	.L1191	#,
	.loc 1 4909 0
	movq	$.LC157, -96(%rbp)	#, reason
	.loc 1 4910 0
	jmp	.L1165	#
.L1191:
	.loc 1 4914 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.647
	testl	%eax, %eax	# flag_pic.647
	je	.L1188	#,
	.loc 1 4914 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# disp, tmp207
	movzwl	(%rax), %eax	# disp_19->code, D.30028
	cmpw	$68, %ax	#, D.30028
	je	.L1192	#,
	movq	-64(%rbp), %rax	# disp, tmp208
	movzwl	(%rax), %eax	# disp_19->code, D.30028
	cmpw	$67, %ax	#, D.30028
	je	.L1192	#,
	movq	-64(%rbp), %rax	# disp, tmp209
	movzwl	(%rax), %eax	# disp_19->code, D.30028
	cmpw	$58, %ax	#, D.30028
	jne	.L1188	#,
	movq	-64(%rbp), %rax	# disp, tmp210
	movq	%rax, %rdi	# tmp210,
	call	symbolic_reference_mentioned_p	#
	testl	%eax, %eax	# D.30026
	je	.L1188	#,
.L1192:
	.loc 1 4916 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.648
	andl	$33554432, %eax	#, D.30026
	testl	%eax, %eax	# D.30026
	je	.L1193	#,
	.loc 1 4916 0 is_stmt 0 discriminator 1
	cmpq	$0, -72(%rbp)	#, index
	jne	.L1194	#,
	cmpq	$0, -80(%rbp)	#, base
	je	.L1193	#,
.L1194:
	.loc 1 4918 0 is_stmt 1
	movq	$.LC158, -96(%rbp)	#, reason
	.loc 1 4919 0
	jmp	.L1165	#
.L1193:
	.loc 1 4921 0
	movq	-64(%rbp), %rax	# disp, tmp211
	movq	%rax, %rdi	# tmp211,
	call	legitimate_pic_address_disp_p	#
	testl	%eax, %eax	# D.30026
	jne	.L1195	#,
	.loc 1 4923 0
	movq	$.LC159, -96(%rbp)	#, reason
	.loc 1 4924 0
	jmp	.L1165	#
.L1195:
	.loc 1 4921 0 discriminator 1
	nop
.L1188:
	.loc 1 4961 0
	movq	ix86_debug_addr_string(%rip), %rax	# ix86_debug_addr_string, ix86_debug_addr_string.649
	testq	%rax, %rax	# ix86_debug_addr_string.649
	je	.L1196	#,
	.loc 1 4962 0
	movq	stderr(%rip), %rax	# stderr, stderr.650
	movq	%rax, %rcx	# stderr.650,
	movl	$9, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC160, %edi	#,
	call	fwrite	#
.L1196:
	.loc 1 4963 0
	movl	$1, %eax	#, D.30026
	jmp	.L1199	#
.L1165:
	.loc 1 4966 0
	movq	ix86_debug_addr_string(%rip), %rax	# ix86_debug_addr_string, ix86_debug_addr_string.651
	testq	%rax, %rax	# ix86_debug_addr_string.651
	je	.L1198	#,
	.loc 1 4968 0
	movq	stderr(%rip), %rax	# stderr, stderr.652
	movq	-96(%rbp), %rdx	# reason, tmp212
	movl	$.LC161, %esi	#,
	movq	%rax, %rdi	# stderr.652,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 4969 0
	movq	-88(%rbp), %rax	# reason_rtx, tmp213
	movq	%rax, %rdi	# tmp213,
	call	debug_rtx	#
.L1198:
	.loc 1 4971 0
	movl	$0, %eax	#, D.30026
.L1199:
	.loc 1 4972 0
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE88:
	.size	legitimate_address_p, .-legitimate_address_p
	.type	ix86_GOT_alias_set, @function
ix86_GOT_alias_set:
.LFB89:
	.loc 1 4978 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 4980 0
	movq	set.15510(%rip), %rax	# set, set.653
	cmpq	$-1, %rax	#, set.653
	jne	.L1201	#,
	.loc 1 4981 0
	call	new_alias_set	#
	movq	%rax, set.15510(%rip)	# set.654, set
.L1201:
	.loc 1 4982 0
	movq	set.15510(%rip), %rax	# set, D.30051
	.loc 1 4983 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE89:
	.size	ix86_GOT_alias_set, .-ix86_GOT_alias_set
	.globl	legitimize_pic_address
	.type	legitimize_pic_address, @function
legitimize_pic_address:
.LFB90:
	.loc 1 5007 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# orig, orig
	movq	%rsi, -64(%rbp)	# reg, reg
	.loc 1 5008 0
	movq	-56(%rbp), %rax	# orig, tmp175
	movq	%rax, -40(%rbp)	# tmp175, addr
	.loc 1 5009 0
	movq	-56(%rbp), %rax	# orig, tmp176
	movq	%rax, -32(%rbp)	# tmp176, new
	.loc 1 5012 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.656
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1204	#,
	.loc 1 5012 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.655
	jmp	.L1205	#
.L1204:
	.loc 1 5012 0 discriminator 2
	movl	$4, %eax	#, iftmp.655
.L1205:
	.loc 1 5012 0 discriminator 3
	movq	-40(%rbp), %rdx	# addr, tmp177
	movl	%eax, %esi	# iftmp.655,
	movq	%rdx, %rdi	# tmp177,
	call	local_symbolic_operand	#
	testl	%eax, %eax	# D.30053
	je	.L1206	#,
	.loc 1 5015 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.657
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1207	#,
	.loc 1 5016 0
	movq	-40(%rbp), %rax	# addr, tmp178
	movq	%rax, -32(%rbp)	# tmp178, new
	jmp	.L1215	#
.L1207:
	.loc 1 5022 0
	movq	cfun(%rip), %rax	# cfun, cfun.658
	movzbl	426(%rax), %edx	#, tmp181
	orl	$32, %edx	#, tmp182
	movb	%dl, 426(%rax)	# tmp182,
	.loc 1 5023 0
	movq	-40(%rbp), %rax	# addr, tmp183
	movq	%rax, %rsi	# tmp183,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movq	%rax, %rdx	#, D.30054
	movl	target_flags(%rip), %eax	# target_flags, target_flags.660
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1209	#,
	.loc 1 5023 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.659
	jmp	.L1210	#
.L1209:
	.loc 1 5023 0 discriminator 2
	movl	$4, %eax	#, iftmp.659
.L1210:
	.loc 1 5023 0 discriminator 3
	movl	$7, %ecx	#,
	movl	%eax, %esi	# iftmp.659,
	movl	$42, %edi	#,
	call	gen_rtx_fmt_Ei	#
	movq	%rax, -32(%rbp)	# tmp184, new
	.loc 1 5024 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.662
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1211	#,
	.loc 1 5024 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.661
	jmp	.L1212	#
.L1211:
	.loc 1 5024 0 discriminator 2
	movl	$4, %eax	#, iftmp.661
.L1212:
	.loc 1 5024 0 discriminator 3
	movq	-32(%rbp), %rdx	# new, tmp185
	movl	%eax, %esi	# iftmp.661,
	movl	$58, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -32(%rbp)	# tmp186, new
	.loc 1 5025 0 is_stmt 1 discriminator 3
	movq	pic_offset_table_rtx(%rip), %rdx	# pic_offset_table_rtx, pic_offset_table_rtx.663
	movl	target_flags(%rip), %eax	# target_flags, target_flags.665
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1213	#,
	.loc 1 5025 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.664
	jmp	.L1214	#
.L1213:
	.loc 1 5025 0 discriminator 2
	movl	$4, %eax	#, iftmp.664
.L1214:
	.loc 1 5025 0 discriminator 3
	movq	-32(%rbp), %rcx	# new, tmp187
	movl	%eax, %esi	# iftmp.664,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp188, new
	.loc 1 5027 0 is_stmt 1 discriminator 3
	cmpq	$0, -64(%rbp)	#, reg
	je	.L1215	#,
	.loc 1 5029 0
	movq	-32(%rbp), %rdx	# new, tmp189
	movq	-64(%rbp), %rax	# reg, tmp190
	movq	%rdx, %rsi	# tmp189,
	movq	%rax, %rdi	# tmp190,
	call	emit_move_insn	#
	.loc 1 5030 0
	movq	-64(%rbp), %rax	# reg, tmp191
	movq	%rax, -32(%rbp)	# tmp191, new
	jmp	.L1215	#
.L1206:
	.loc 1 5034 0
	movq	-40(%rbp), %rax	# addr, tmp192
	movzwl	(%rax), %eax	# addr_34->code, D.30055
	cmpw	$68, %ax	#, D.30055
	jne	.L1216	#,
	.loc 1 5036 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.666
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1217	#,
	.loc 1 5038 0
	movq	cfun(%rip), %rax	# cfun, cfun.667
	movzbl	426(%rax), %edx	#, tmp195
	orl	$32, %edx	#, tmp196
	movb	%dl, 426(%rax)	# tmp196,
	.loc 1 5039 0
	movq	-40(%rbp), %rax	# addr, tmp197
	movq	%rax, %rsi	# tmp197,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movq	%rax, %rdx	#, D.30054
	movl	target_flags(%rip), %eax	# target_flags, target_flags.669
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1218	#,
	.loc 1 5039 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.668
	jmp	.L1219	#
.L1218:
	.loc 1 5039 0 discriminator 2
	movl	$4, %eax	#, iftmp.668
.L1219:
	.loc 1 5039 0 discriminator 3
	movl	$15, %ecx	#,
	movl	%eax, %esi	# iftmp.668,
	movl	$42, %edi	#,
	call	gen_rtx_fmt_Ei	#
	movq	%rax, -32(%rbp)	# tmp198, new
	.loc 1 5040 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.671
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1220	#,
	.loc 1 5040 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.670
	jmp	.L1221	#
.L1220:
	.loc 1 5040 0 discriminator 2
	movl	$4, %eax	#, iftmp.670
.L1221:
	.loc 1 5040 0 discriminator 3
	movq	-32(%rbp), %rdx	# new, tmp199
	movl	%eax, %esi	# iftmp.670,
	movl	$58, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -32(%rbp)	# tmp200, new
	.loc 1 5041 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.673
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1222	#,
	.loc 1 5041 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.672
	jmp	.L1223	#
.L1222:
	.loc 1 5041 0 discriminator 2
	movl	$4, %eax	#, iftmp.672
.L1223:
	.loc 1 5041 0 discriminator 3
	movq	-32(%rbp), %rdx	# new, tmp201
	movq	%rdx, %rsi	# tmp201,
	movl	%eax, %edi	# iftmp.672,
	call	gen_rtx_MEM	#
	movq	%rax, -32(%rbp)	# tmp202, new
	.loc 1 5042 0 is_stmt 1 discriminator 3
	movq	-32(%rbp), %rax	# new, tmp203
	movzbl	3(%rax), %edx	# new_83->unchanging, tmp206
	orl	$4, %edx	#, tmp207
	movb	%dl, 3(%rax)	# tmp207, new_83->unchanging
	.loc 1 5043 0 discriminator 3
	call	ix86_GOT_alias_set	#
	movq	%rax, %rdx	#, D.30056
	movq	-32(%rbp), %rax	# new, tmp208
	movq	%rdx, %rsi	# D.30056,
	movq	%rax, %rdi	# tmp208,
	call	set_mem_alias_set	#
	.loc 1 5045 0 discriminator 3
	cmpq	$0, -64(%rbp)	#, reg
	jne	.L1224	#,
	.loc 1 5046 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.675
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1225	#,
	.loc 1 5046 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.674
	jmp	.L1226	#
.L1225:
	.loc 1 5046 0 discriminator 2
	movl	$4, %eax	#, iftmp.674
.L1226:
	.loc 1 5046 0 discriminator 3
	movl	%eax, %edi	# iftmp.674,
	call	gen_reg_rtx	#
	movq	%rax, -64(%rbp)	# tmp209, reg
.L1224:
	.loc 1 5050 0 is_stmt 1
	movq	-32(%rbp), %rdx	# new, tmp210
	movq	-64(%rbp), %rax	# reg, tmp211
	movq	%rdx, %rsi	# tmp210,
	movq	%rax, %rdi	# tmp211,
	call	gen_movsi	#
	movq	%rax, %rdi	# D.30057,
	call	emit_insn	#
	.loc 1 5051 0
	movq	-64(%rbp), %rax	# reg, tmp212
	movq	%rax, -32(%rbp)	# tmp212, new
	jmp	.L1215	#
.L1217:
	.loc 1 5058 0
	movq	cfun(%rip), %rax	# cfun, cfun.676
	movzbl	426(%rax), %edx	#, tmp215
	orl	$32, %edx	#, tmp216
	movb	%dl, 426(%rax)	# tmp216,
	.loc 1 5059 0
	movq	-40(%rbp), %rax	# addr, tmp217
	movq	%rax, %rsi	# tmp217,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movq	%rax, %rdx	#, D.30054
	movl	target_flags(%rip), %eax	# target_flags, target_flags.678
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1228	#,
	.loc 1 5059 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.677
	jmp	.L1229	#
.L1228:
	.loc 1 5059 0 discriminator 2
	movl	$4, %eax	#, iftmp.677
.L1229:
	.loc 1 5059 0 discriminator 3
	movl	$6, %ecx	#,
	movl	%eax, %esi	# iftmp.677,
	movl	$42, %edi	#,
	call	gen_rtx_fmt_Ei	#
	movq	%rax, -32(%rbp)	# tmp218, new
	.loc 1 5060 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.680
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1230	#,
	.loc 1 5060 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.679
	jmp	.L1231	#
.L1230:
	.loc 1 5060 0 discriminator 2
	movl	$4, %eax	#, iftmp.679
.L1231:
	.loc 1 5060 0 discriminator 3
	movq	-32(%rbp), %rdx	# new, tmp219
	movl	%eax, %esi	# iftmp.679,
	movl	$58, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -32(%rbp)	# tmp220, new
	.loc 1 5061 0 is_stmt 1 discriminator 3
	movq	pic_offset_table_rtx(%rip), %rdx	# pic_offset_table_rtx, pic_offset_table_rtx.681
	movl	target_flags(%rip), %eax	# target_flags, target_flags.683
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1232	#,
	.loc 1 5061 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.682
	jmp	.L1233	#
.L1232:
	.loc 1 5061 0 discriminator 2
	movl	$4, %eax	#, iftmp.682
.L1233:
	.loc 1 5061 0 discriminator 3
	movq	-32(%rbp), %rcx	# new, tmp221
	movl	%eax, %esi	# iftmp.682,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp222, new
	.loc 1 5062 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.685
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1234	#,
	.loc 1 5062 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.684
	jmp	.L1235	#
.L1234:
	.loc 1 5062 0 discriminator 2
	movl	$4, %eax	#, iftmp.684
.L1235:
	.loc 1 5062 0 discriminator 3
	movq	-32(%rbp), %rdx	# new, tmp223
	movq	%rdx, %rsi	# tmp223,
	movl	%eax, %edi	# iftmp.684,
	call	gen_rtx_MEM	#
	movq	%rax, -32(%rbp)	# tmp224, new
	.loc 1 5063 0 is_stmt 1 discriminator 3
	movq	-32(%rbp), %rax	# new, tmp225
	movzbl	3(%rax), %edx	# new_114->unchanging, tmp228
	orl	$4, %edx	#, tmp229
	movb	%dl, 3(%rax)	# tmp229, new_114->unchanging
	.loc 1 5064 0 discriminator 3
	call	ix86_GOT_alias_set	#
	movq	%rax, %rdx	#, D.30056
	movq	-32(%rbp), %rax	# new, tmp230
	movq	%rdx, %rsi	# D.30056,
	movq	%rax, %rdi	# tmp230,
	call	set_mem_alias_set	#
	.loc 1 5066 0 discriminator 3
	cmpq	$0, -64(%rbp)	#, reg
	jne	.L1236	#,
	.loc 1 5067 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.687
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1237	#,
	.loc 1 5067 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.686
	jmp	.L1238	#
.L1237:
	.loc 1 5067 0 discriminator 2
	movl	$4, %eax	#, iftmp.686
.L1238:
	.loc 1 5067 0 discriminator 3
	movl	%eax, %edi	# iftmp.686,
	call	gen_reg_rtx	#
	movq	%rax, -64(%rbp)	# tmp231, reg
.L1236:
	.loc 1 5068 0 is_stmt 1
	movq	-32(%rbp), %rdx	# new, tmp232
	movq	-64(%rbp), %rax	# reg, tmp233
	movq	%rdx, %rsi	# tmp232,
	movq	%rax, %rdi	# tmp233,
	call	emit_move_insn	#
	.loc 1 5069 0
	movq	-64(%rbp), %rax	# reg, tmp234
	movq	%rax, -32(%rbp)	# tmp234, new
	jmp	.L1215	#
.L1216:
	.loc 1 5074 0
	movq	-40(%rbp), %rax	# addr, tmp235
	movzwl	(%rax), %eax	# addr_34->code, D.30055
	cmpw	$58, %ax	#, D.30055
	jne	.L1239	#,
	.loc 1 5076 0
	movq	-40(%rbp), %rax	# addr, tmp236
	movq	8(%rax), %rax	# addr_34->fld[0].rtx, tmp237
	movq	%rax, -40(%rbp)	# tmp237, addr
	.loc 1 5081 0
	movq	-40(%rbp), %rax	# addr, tmp238
	movzwl	(%rax), %eax	# addr_123->code, D.30055
	cmpw	$42, %ax	#, D.30055
	je	.L1240	#,
	.loc 1 5082 0
	movq	-40(%rbp), %rax	# addr, tmp239
	movzwl	(%rax), %eax	# addr_123->code, D.30055
	cmpw	$75, %ax	#, D.30055
	jne	.L1241	#,
	.loc 1 5083 0
	movq	-40(%rbp), %rax	# addr, tmp240
	movq	8(%rax), %rax	# addr_123->fld[0].rtx, D.30057
	movzwl	(%rax), %eax	# _126->code, D.30055
	cmpw	$42, %ax	#, D.30055
	jne	.L1241	#,
.L1240:
	.loc 1 5084 0
	movq	-56(%rbp), %rax	# orig, D.30052
	jmp	.L1242	#
.L1241:
	.loc 1 5085 0
	movq	-40(%rbp), %rax	# addr, tmp241
	movzwl	(%rax), %eax	# addr_123->code, D.30055
	cmpw	$75, %ax	#, D.30055
	je	.L1239	#,
	.loc 1 5086 0
	movl	$__FUNCTION__.15518, %edx	#,
	movl	$5086, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1239:
	.loc 1 5088 0
	movq	-40(%rbp), %rax	# addr, tmp242
	movzwl	(%rax), %eax	# addr_3->code, D.30055
	cmpw	$75, %ax	#, D.30055
	jne	.L1215	#,
.LBB46:
	.loc 1 5090 0
	movq	-40(%rbp), %rax	# addr, tmp243
	movq	8(%rax), %rax	# addr_3->fld[0].rtx, tmp244
	movq	%rax, -16(%rbp)	# tmp244, op0
	movq	-40(%rbp), %rax	# addr, tmp245
	movq	16(%rax), %rax	# addr_3->fld[1].rtx, tmp246
	movq	%rax, -8(%rbp)	# tmp246, op1
	.loc 1 5094 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.689
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1243	#,
	.loc 1 5094 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.688
	jmp	.L1244	#
.L1243:
	.loc 1 5094 0 discriminator 2
	movl	$4, %eax	#, iftmp.688
.L1244:
	.loc 1 5094 0 discriminator 3
	movq	-16(%rbp), %rdx	# op0, tmp247
	movl	%eax, %esi	# iftmp.688,
	movq	%rdx, %rdi	# tmp247,
	call	local_symbolic_operand	#
	testl	%eax, %eax	# D.30053
	je	.L1245	#,
	.loc 1 5095 0 is_stmt 1
	movq	-8(%rbp), %rax	# op1, tmp248
	movzwl	(%rax), %eax	# op1_132->code, D.30055
	cmpw	$54, %ax	#, D.30055
	jne	.L1245	#,
	.loc 1 5097 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.690
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	jne	.L1246	#,
	.loc 1 5099 0
	movq	cfun(%rip), %rax	# cfun, cfun.691
	movzbl	426(%rax), %edx	#, tmp251
	orl	$32, %edx	#, tmp252
	movb	%dl, 426(%rax)	# tmp252,
	.loc 1 5100 0
	movq	-16(%rbp), %rax	# op0, tmp253
	movq	%rax, %rsi	# tmp253,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movq	%rax, %rdx	#, D.30054
	movl	target_flags(%rip), %eax	# target_flags, target_flags.693
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1247	#,
	.loc 1 5100 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.692
	jmp	.L1248	#
.L1247:
	.loc 1 5100 0 discriminator 2
	movl	$4, %eax	#, iftmp.692
.L1248:
	.loc 1 5100 0 discriminator 3
	movl	$7, %ecx	#,
	movl	%eax, %esi	# iftmp.692,
	movl	$42, %edi	#,
	call	gen_rtx_fmt_Ei	#
	movq	%rax, -32(%rbp)	# tmp254, new
	.loc 1 5101 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.695
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1249	#,
	.loc 1 5101 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.694
	jmp	.L1250	#
.L1249:
	.loc 1 5101 0 discriminator 2
	movl	$4, %eax	#, iftmp.694
.L1250:
	.loc 1 5101 0 discriminator 3
	movq	-8(%rbp), %rcx	# op1, tmp255
	movq	-32(%rbp), %rdx	# new, tmp256
	movl	%eax, %esi	# iftmp.694,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp257, new
	.loc 1 5102 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.697
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1251	#,
	.loc 1 5102 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.696
	jmp	.L1252	#
.L1251:
	.loc 1 5102 0 discriminator 2
	movl	$4, %eax	#, iftmp.696
.L1252:
	.loc 1 5102 0 discriminator 3
	movq	-32(%rbp), %rdx	# new, tmp258
	movl	%eax, %esi	# iftmp.696,
	movl	$58, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -32(%rbp)	# tmp259, new
	.loc 1 5103 0 is_stmt 1 discriminator 3
	movq	pic_offset_table_rtx(%rip), %rdx	# pic_offset_table_rtx, pic_offset_table_rtx.698
	movl	target_flags(%rip), %eax	# target_flags, target_flags.700
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1253	#,
	.loc 1 5103 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.699
	jmp	.L1254	#
.L1253:
	.loc 1 5103 0 discriminator 2
	movl	$4, %eax	#, iftmp.699
.L1254:
	.loc 1 5103 0 discriminator 3
	movq	-32(%rbp), %rcx	# new, tmp260
	movl	%eax, %esi	# iftmp.699,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp261, new
	.loc 1 5105 0 is_stmt 1 discriminator 3
	cmpq	$0, -64(%rbp)	#, reg
	je	.L1246	#,
	.loc 1 5107 0
	movq	-32(%rbp), %rdx	# new, tmp262
	movq	-64(%rbp), %rax	# reg, tmp263
	movq	%rdx, %rsi	# tmp262,
	movq	%rax, %rdi	# tmp263,
	call	emit_move_insn	#
	.loc 1 5108 0
	movq	-64(%rbp), %rax	# reg, tmp264
	movq	%rax, -32(%rbp)	# tmp264, new
	.loc 1 5097 0
	jmp	.L1215	#
.L1246:
	.loc 1 5097 0 is_stmt 0 discriminator 1
	jmp	.L1215	#
.L1245:
	.loc 1 5118 0 is_stmt 1
	movq	-40(%rbp), %rax	# addr, tmp265
	movq	8(%rax), %rax	# addr_3->fld[0].rtx, D.30057
	movq	-64(%rbp), %rdx	# reg, tmp266
	movq	%rdx, %rsi	# tmp266,
	movq	%rax, %rdi	# D.30057,
	call	legitimize_pic_address	#
	movq	%rax, -24(%rbp)	# tmp267, base
	.loc 1 5119 0
	movq	-24(%rbp), %rax	# base, tmp268
	cmpq	-64(%rbp), %rax	# reg, tmp268
	je	.L1256	#,
	.loc 1 5119 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# reg, iftmp.701
	jmp	.L1257	#
.L1256:
	.loc 1 5119 0 discriminator 2
	movl	$0, %eax	#, iftmp.701
.L1257:
	.loc 1 5119 0 discriminator 3
	movq	-40(%rbp), %rdx	# addr, tmp269
	movq	16(%rdx), %rdx	# addr_3->fld[1].rtx, D.30057
	movq	%rax, %rsi	# iftmp.701,
	movq	%rdx, %rdi	# D.30057,
	call	legitimize_pic_address	#
	movq	%rax, -32(%rbp)	# tmp270, new
	.loc 1 5122 0 is_stmt 1 discriminator 3
	movq	-32(%rbp), %rax	# new, tmp271
	movzwl	(%rax), %eax	# new_170->code, D.30055
	cmpw	$54, %ax	#, D.30055
	jne	.L1258	#,
	.loc 1 5123 0
	movq	-32(%rbp), %rax	# new, tmp272
	movq	8(%rax), %rdx	# new_170->fld[0].rtwint, D.30056
	movq	-24(%rbp), %rax	# base, tmp273
	movq	%rdx, %rsi	# D.30056,
	movq	%rax, %rdi	# tmp273,
	call	plus_constant_wide	#
	movq	%rax, -32(%rbp)	# tmp274, new
	jmp	.L1215	#
.L1258:
	.loc 1 5126 0
	movq	-32(%rbp), %rax	# new, tmp275
	movzwl	(%rax), %eax	# new_170->code, D.30055
	cmpw	$75, %ax	#, D.30055
	jne	.L1259	#,
	.loc 1 5126 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# new, tmp276
	movq	16(%rax), %rax	# new_170->fld[1].rtx, D.30057
	movzwl	(%rax), %eax	# _175->code, D.30055
	cmpw	$67, %ax	#, D.30055
	je	.L1260	#,
	movq	-32(%rbp), %rax	# new, tmp277
	movq	16(%rax), %rax	# new_170->fld[1].rtx, D.30057
	movzwl	(%rax), %eax	# _177->code, D.30055
	cmpw	$68, %ax	#, D.30055
	je	.L1260	#,
	movq	-32(%rbp), %rax	# new, tmp278
	movq	16(%rax), %rax	# new_170->fld[1].rtx, D.30057
	movzwl	(%rax), %eax	# _179->code, D.30055
	cmpw	$54, %ax	#, D.30055
	je	.L1260	#,
	movq	-32(%rbp), %rax	# new, tmp279
	movq	16(%rax), %rax	# new_170->fld[1].rtx, D.30057
	movzwl	(%rax), %eax	# _181->code, D.30055
	cmpw	$55, %ax	#, D.30055
	je	.L1260	#,
	movq	-32(%rbp), %rax	# new, tmp280
	movq	16(%rax), %rax	# new_170->fld[1].rtx, D.30057
	movzwl	(%rax), %eax	# _183->code, D.30055
	cmpw	$58, %ax	#, D.30055
	je	.L1260	#,
	movq	-32(%rbp), %rax	# new, tmp281
	movq	16(%rax), %rax	# new_170->fld[1].rtx, D.30057
	movzwl	(%rax), %eax	# _185->code, D.30055
	cmpw	$134, %ax	#, D.30055
	je	.L1260	#,
	movq	-32(%rbp), %rax	# new, tmp282
	movq	16(%rax), %rax	# new_170->fld[1].rtx, D.30057
	movzwl	(%rax), %eax	# _187->code, D.30055
	cmpw	$56, %ax	#, D.30055
	je	.L1260	#,
	movq	-32(%rbp), %rax	# new, tmp283
	movq	16(%rax), %rax	# new_170->fld[1].rtx, D.30057
	movzwl	(%rax), %eax	# _189->code, D.30055
	cmpw	$140, %ax	#, D.30055
	jne	.L1259	#,
.L1260:
	.loc 1 5128 0 is_stmt 1
	movq	-32(%rbp), %rax	# new, tmp284
	movq	8(%rax), %rcx	# new_170->fld[0].rtx, D.30057
	movl	target_flags(%rip), %eax	# target_flags, target_flags.703
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1261	#,
	.loc 1 5128 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.702
	jmp	.L1262	#
.L1261:
	.loc 1 5128 0 discriminator 2
	movl	$4, %eax	#, iftmp.702
.L1262:
	.loc 1 5128 0 discriminator 3
	movq	-24(%rbp), %rdx	# base, tmp285
	movl	%eax, %esi	# iftmp.702,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -24(%rbp)	# tmp286, base
	.loc 1 5129 0 is_stmt 1 discriminator 3
	movq	-32(%rbp), %rax	# new, tmp287
	movq	16(%rax), %rax	# new_170->fld[1].rtx, tmp288
	movq	%rax, -32(%rbp)	# tmp288, new
.L1259:
	.loc 1 5131 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.705
	andl	$33554432, %eax	#, D.30053
	testl	%eax, %eax	# D.30053
	je	.L1263	#,
	.loc 1 5131 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.704
	jmp	.L1264	#
.L1263:
	.loc 1 5131 0 discriminator 2
	movl	$4, %eax	#, iftmp.704
.L1264:
	.loc 1 5131 0 discriminator 3
	movq	-32(%rbp), %rcx	# new, tmp289
	movq	-24(%rbp), %rdx	# base, tmp290
	movl	%eax, %esi	# iftmp.704,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp291, new
.L1215:
.LBE46:
	.loc 1 5136 0 is_stmt 1
	movq	-32(%rbp), %rax	# new, D.30052
.L1242:
	.loc 1 5137 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE90:
	.size	legitimize_pic_address, .-legitimize_pic_address
	.section	.rodata
	.align 8
.LC162:
	.string	"\n==========\nLEGITIMIZE_ADDRESS, mode = %s\n"
	.text
	.globl	legitimize_address
	.type	legitimize_address, @function
legitimize_address:
.LFB91:
	.loc 1 5165 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, %rbx	# x, x
	movl	%edx, -68(%rbp)	# mode, mode
	.loc 1 5166 0
	movl	$0, -64(%rbp)	#, changed
	.loc 1 5169 0
	movq	ix86_debug_addr_string(%rip), %rax	# ix86_debug_addr_string, ix86_debug_addr_string.706
	testq	%rax, %rax	# ix86_debug_addr_string.706
	je	.L1266	#,
	.loc 1 5172 0
	movl	-68(%rbp), %eax	# mode, mode.707
	.loc 1 5171 0
	cltq
	movq	mode_name(,%rax,8), %rdx	# mode_name, D.30059
	movq	stderr(%rip), %rax	# stderr, stderr.708
	movl	$.LC162, %esi	#,
	movq	%rax, %rdi	# stderr.708,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5173 0
	movq	%rbx, %rdi	# x,
	call	debug_rtx	#
.L1266:
	.loc 1 5176 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.709
	testl	%eax, %eax	# flag_pic.709
	je	.L1267	#,
	.loc 1 5176 0 is_stmt 0 discriminator 1
	movzwl	(%rbx), %eax	# x_34(D)->code, D.30060
	cmpw	$68, %ax	#, D.30060
	je	.L1268	#,
	movzwl	(%rbx), %eax	# x_34(D)->code, D.30060
	cmpw	$67, %ax	#, D.30060
	je	.L1268	#,
	movzwl	(%rbx), %eax	# x_34(D)->code, D.30060
	cmpw	$58, %ax	#, D.30060
	jne	.L1267	#,
	movq	%rbx, %rdi	# x,
	call	symbolic_reference_mentioned_p	#
	testl	%eax, %eax	# D.30061
	je	.L1267	#,
.L1268:
	.loc 1 5177 0 is_stmt 1
	movl	$0, %esi	#,
	movq	%rbx, %rdi	# x,
	call	legitimize_pic_address	#
	jmp	.L1269	#
.L1267:
	.loc 1 5180 0
	movzwl	(%rbx), %eax	# x_34(D)->code, D.30060
	cmpw	$87, %ax	#, D.30060
	jne	.L1270	#,
	.loc 1 5181 0
	movq	16(%rbx), %rax	# x_34(D)->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _42->code, D.30060
	cmpw	$54, %ax	#, D.30060
	jne	.L1270	#,
	.loc 1 5182 0
	movq	16(%rbx), %rax	# x_34(D)->fld[1].rtx, D.30062
	movq	8(%rax), %rax	# _44->fld[0].rtwint, D.30063
	movq	%rax, %rdi	# D.30064,
	call	exact_log2_wide	#
	movl	%eax, -60(%rbp)	# D.30061, log
	cmpl	$3, -60(%rbp)	#, log
	ja	.L1270	#,
	.loc 1 5184 0
	movl	$1, -64(%rbp)	#, changed
	.loc 1 5185 0
	movl	-60(%rbp), %eax	# log, log.710
	movl	$1, %edx	#, tmp248
	movl	%eax, %ecx	# log.710, tmp263
	sall	%cl, %edx	# tmp263, D.30061
	movl	%edx, %eax	# D.30061, D.30061
	cltq
	movq	%rax, %rsi	# D.30063,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %r12	#, D.30062
	movq	8(%rbx), %rdx	# x_34(D)->fld[0].rtx, D.30062
	movl	target_flags(%rip), %eax	# target_flags, target_flags.712
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1271	#,
	.loc 1 5185 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.711
	jmp	.L1272	#
.L1271:
	.loc 1 5185 0 discriminator 2
	movl	$4, %eax	#, iftmp.711
.L1272:
	.loc 1 5185 0 discriminator 3
	movq	%rdx, %rsi	# D.30062,
	movl	%eax, %edi	# iftmp.711,
	call	force_reg	#
	movq	%rax, %rdx	#, D.30062
	movl	target_flags(%rip), %eax	# target_flags, target_flags.714
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1273	#,
	.loc 1 5185 0 discriminator 4
	movl	$5, %eax	#, iftmp.713
	jmp	.L1274	#
.L1273:
	.loc 1 5185 0 discriminator 5
	movl	$4, %eax	#, iftmp.713
.L1274:
	.loc 1 5185 0 discriminator 6
	movq	%r12, %rcx	# D.30062,
	movl	%eax, %esi	# iftmp.713,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rbx	#, x
.L1270:
	.loc 1 5189 0 is_stmt 1
	movzwl	(%rbx), %eax	# x_1->code, D.30060
	cmpw	$75, %ax	#, D.30060
	jne	.L1275	#,
	.loc 1 5193 0
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movzwl	(%rax), %eax	# _66->code, D.30060
	cmpw	$87, %ax	#, D.30060
	jne	.L1276	#,
	.loc 1 5194 0
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movq	16(%rax), %rax	# _68->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _69->code, D.30060
	cmpw	$54, %ax	#, D.30060
	jne	.L1276	#,
	.loc 1 5195 0
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movq	16(%rax), %rax	# _71->fld[1].rtx, D.30062
	movq	8(%rax), %rax	# _72->fld[0].rtwint, D.30063
	movq	%rax, %rdi	# D.30064,
	call	exact_log2_wide	#
	movl	%eax, -60(%rbp)	# D.30061, log
	cmpl	$3, -60(%rbp)	#, log
	ja	.L1276	#,
	.loc 1 5197 0
	movl	$1, -64(%rbp)	#, changed
	.loc 1 5198 0
	movl	-60(%rbp), %eax	# log, log.715
	movl	$1, %edx	#, tmp249
	movl	%eax, %ecx	# log.715, tmp265
	sall	%cl, %edx	# tmp265, D.30061
	movl	%edx, %eax	# D.30061, D.30061
	cltq
	movq	%rax, %rsi	# D.30063,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %r12	#, D.30062
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movq	8(%rax), %rdx	# _82->fld[0].rtx, D.30062
	movl	target_flags(%rip), %eax	# target_flags, target_flags.717
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1277	#,
	.loc 1 5198 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.716
	jmp	.L1278	#
.L1277:
	.loc 1 5198 0 discriminator 2
	movl	$4, %eax	#, iftmp.716
.L1278:
	.loc 1 5198 0 discriminator 3
	movq	%rdx, %rsi	# D.30062,
	movl	%eax, %edi	# iftmp.716,
	call	force_reg	#
	movq	%rax, %rdx	#, D.30062
	movl	target_flags(%rip), %eax	# target_flags, target_flags.719
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1279	#,
	.loc 1 5198 0 discriminator 4
	movl	$5, %eax	#, iftmp.718
	jmp	.L1280	#
.L1279:
	.loc 1 5198 0 discriminator 5
	movl	$4, %eax	#, iftmp.718
.L1280:
	.loc 1 5198 0 discriminator 6
	movq	%r12, %rcx	# D.30062,
	movl	%eax, %esi	# iftmp.718,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, 8(%rbx)	# D.30062, x_1->fld[0].rtx
.L1276:
	.loc 1 5203 0 is_stmt 1
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _94->code, D.30060
	cmpw	$87, %ax	#, D.30060
	jne	.L1281	#,
	.loc 1 5204 0
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movq	16(%rax), %rax	# _96->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _97->code, D.30060
	cmpw	$54, %ax	#, D.30060
	jne	.L1281	#,
	.loc 1 5205 0
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movq	16(%rax), %rax	# _99->fld[1].rtx, D.30062
	movq	8(%rax), %rax	# _100->fld[0].rtwint, D.30063
	movq	%rax, %rdi	# D.30064,
	call	exact_log2_wide	#
	movl	%eax, -60(%rbp)	# D.30061, log
	cmpl	$3, -60(%rbp)	#, log
	ja	.L1281	#,
	.loc 1 5207 0
	movl	$1, -64(%rbp)	#, changed
	.loc 1 5208 0
	movl	-60(%rbp), %eax	# log, log.720
	movl	$1, %edx	#, tmp250
	movl	%eax, %ecx	# log.720, tmp267
	sall	%cl, %edx	# tmp267, D.30061
	movl	%edx, %eax	# D.30061, D.30061
	cltq
	movq	%rax, %rsi	# D.30063,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %r12	#, D.30062
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movq	8(%rax), %rdx	# _110->fld[0].rtx, D.30062
	movl	target_flags(%rip), %eax	# target_flags, target_flags.722
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1282	#,
	.loc 1 5208 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.721
	jmp	.L1283	#
.L1282:
	.loc 1 5208 0 discriminator 2
	movl	$4, %eax	#, iftmp.721
.L1283:
	.loc 1 5208 0 discriminator 3
	movq	%rdx, %rsi	# D.30062,
	movl	%eax, %edi	# iftmp.721,
	call	force_reg	#
	movq	%rax, %rdx	#, D.30062
	movl	target_flags(%rip), %eax	# target_flags, target_flags.724
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1284	#,
	.loc 1 5208 0 discriminator 4
	movl	$5, %eax	#, iftmp.723
	jmp	.L1285	#
.L1284:
	.loc 1 5208 0 discriminator 5
	movl	$4, %eax	#, iftmp.723
.L1285:
	.loc 1 5208 0 discriminator 6
	movq	%r12, %rcx	# D.30062,
	movl	%eax, %esi	# iftmp.723,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, 16(%rbx)	# D.30062, x_1->fld[1].rtx
.L1281:
	.loc 1 5214 0 is_stmt 1
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _122->code, D.30060
	cmpw	$78, %ax	#, D.30060
	jne	.L1286	#,
.LBB47:
	.loc 1 5216 0
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, tmp251
	movq	%rax, -40(%rbp)	# tmp251, tmp
	.loc 1 5217 0
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movq	%rax, 8(%rbx)	# D.30062, x_1->fld[0].rtx
	.loc 1 5218 0
	movq	-40(%rbp), %rax	# tmp, tmp252
	movq	%rax, 16(%rbx)	# tmp252, x_1->fld[1].rtx
	.loc 1 5219 0
	movl	$1, -64(%rbp)	#, changed
.L1286:
.LBE47:
	.loc 1 5226 0
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movzwl	(%rax), %eax	# _127->code, D.30060
	cmpw	$78, %ax	#, D.30060
	jne	.L1287	#,
	.loc 1 5226 0 is_stmt 0 discriminator 1
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _129->code, D.30060
	cmpw	$75, %ax	#, D.30060
	jne	.L1287	#,
	.loc 1 5228 0 is_stmt 1
	movl	$1, -64(%rbp)	#, changed
	.loc 1 5229 0
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movq	16(%rax), %r12	# _132->fld[1].rtx, D.30062
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movq	8(%rax), %rcx	# _134->fld[0].rtx, D.30062
	movq	8(%rbx), %rdx	# x_1->fld[0].rtx, D.30062
	movl	target_flags(%rip), %eax	# target_flags, target_flags.726
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1288	#,
	.loc 1 5229 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.725
	jmp	.L1289	#
.L1288:
	.loc 1 5229 0 discriminator 2
	movl	$4, %eax	#, iftmp.725
.L1289:
	.loc 1 5229 0 discriminator 3
	movl	%eax, %esi	# iftmp.725,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.30062
	movl	target_flags(%rip), %eax	# target_flags, target_flags.728
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1290	#,
	.loc 1 5229 0 discriminator 4
	movl	$5, %eax	#, iftmp.727
	jmp	.L1291	#
.L1290:
	.loc 1 5229 0 discriminator 5
	movl	$4, %eax	#, iftmp.727
.L1291:
	.loc 1 5229 0 discriminator 6
	movq	%r12, %rcx	# D.30062,
	movl	%eax, %esi	# iftmp.727,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rbx	#, x
	jmp	.L1292	#
.L1287:
	.loc 1 5238 0 is_stmt 1
	movzwl	(%rbx), %eax	# x_1->code, D.30060
	cmpw	$75, %ax	#, D.30060
	jne	.L1292	#,
	.loc 1 5238 0 is_stmt 0 discriminator 1
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movzwl	(%rax), %eax	# _148->code, D.30060
	cmpw	$75, %ax	#, D.30060
	jne	.L1292	#,
	.loc 1 5239 0 is_stmt 1
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movq	8(%rax), %rax	# _150->fld[0].rtx, D.30062
	movzwl	(%rax), %eax	# _151->code, D.30060
	cmpw	$78, %ax	#, D.30060
	jne	.L1292	#,
	.loc 1 5240 0
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movq	16(%rax), %rax	# _153->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _154->code, D.30060
	cmpw	$75, %ax	#, D.30060
	jne	.L1292	#,
	.loc 1 5241 0
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _156->code, D.30060
	cmpw	$67, %ax	#, D.30060
	je	.L1293	#,
	.loc 1 5241 0 is_stmt 0 discriminator 1
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _158->code, D.30060
	cmpw	$68, %ax	#, D.30060
	je	.L1293	#,
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _160->code, D.30060
	cmpw	$54, %ax	#, D.30060
	je	.L1293	#,
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _162->code, D.30060
	cmpw	$55, %ax	#, D.30060
	je	.L1293	#,
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _164->code, D.30060
	cmpw	$58, %ax	#, D.30060
	je	.L1293	#,
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _166->code, D.30060
	cmpw	$134, %ax	#, D.30060
	je	.L1293	#,
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _168->code, D.30060
	cmpw	$56, %ax	#, D.30060
	je	.L1293	#,
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _170->code, D.30060
	cmpw	$140, %ax	#, D.30060
	jne	.L1292	#,
.L1293:
.LBB48:
	.loc 1 5244 0 is_stmt 1
	movq	$0, -48(%rbp)	#, other
	.loc 1 5246 0
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _173->code, D.30060
	cmpw	$54, %ax	#, D.30060
	jne	.L1294	#,
	.loc 1 5248 0
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, tmp253
	movq	%rax, -56(%rbp)	# tmp253, constant
	.loc 1 5249 0
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movq	16(%rax), %rax	# _176->fld[1].rtx, D.30062
	movq	16(%rax), %rax	# _177->fld[1].rtx, tmp254
	movq	%rax, -48(%rbp)	# tmp254, other
	jmp	.L1295	#
.L1294:
	.loc 1 5251 0
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movq	16(%rax), %rax	# _179->fld[1].rtx, D.30062
	movq	16(%rax), %rax	# _180->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _181->code, D.30060
	cmpw	$54, %ax	#, D.30060
	jne	.L1296	#,
	.loc 1 5253 0
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movq	16(%rax), %rax	# _183->fld[1].rtx, D.30062
	movq	16(%rax), %rax	# _184->fld[1].rtx, tmp255
	movq	%rax, -56(%rbp)	# tmp255, constant
	.loc 1 5254 0
	movq	16(%rbx), %rax	# x_1->fld[1].rtx, tmp256
	movq	%rax, -48(%rbp)	# tmp256, other
	jmp	.L1295	#
.L1296:
	.loc 1 5257 0
	movq	$0, -56(%rbp)	#, constant
.L1295:
	.loc 1 5259 0
	cmpq	$0, -56(%rbp)	#, constant
	je	.L1292	#,
	.loc 1 5261 0
	movl	$1, -64(%rbp)	#, changed
	.loc 1 5262 0
	movq	-56(%rbp), %rax	# constant, tmp257
	movq	8(%rax), %rdx	# constant_13->fld[0].rtwint, D.30063
	movq	-48(%rbp), %rax	# other, tmp258
	movq	%rdx, %rsi	# D.30063,
	movq	%rax, %rdi	# tmp258,
	call	plus_constant_wide	#
	movq	%rax, %r12	#, D.30062
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movq	16(%rax), %rax	# _191->fld[1].rtx, D.30062
	movq	8(%rax), %rcx	# _192->fld[0].rtx, D.30062
	movq	8(%rbx), %rax	# x_1->fld[0].rtx, D.30062
	movq	8(%rax), %rdx	# _194->fld[0].rtx, D.30062
	movl	target_flags(%rip), %eax	# target_flags, target_flags.730
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1297	#,
	.loc 1 5262 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.729
	jmp	.L1298	#
.L1297:
	.loc 1 5262 0 discriminator 2
	movl	$4, %eax	#, iftmp.729
.L1298:
	.loc 1 5262 0 discriminator 3
	movl	%eax, %esi	# iftmp.729,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.30062
	movl	target_flags(%rip), %eax	# target_flags, target_flags.732
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1299	#,
	.loc 1 5262 0 discriminator 4
	movl	$5, %eax	#, iftmp.731
	jmp	.L1300	#
.L1299:
	.loc 1 5262 0 discriminator 5
	movl	$4, %eax	#, iftmp.731
.L1300:
	.loc 1 5262 0 discriminator 6
	movq	%r12, %rcx	# D.30062,
	movl	%eax, %esi	# iftmp.731,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rbx	#, x
.L1292:
.LBE48:
	.loc 1 5269 0 is_stmt 1
	cmpl	$0, -64(%rbp)	#, changed
	je	.L1301	#,
	.loc 1 5269 0 is_stmt 0 discriminator 1
	movl	-68(%rbp), %eax	# mode, tmp259
	movl	$0, %edx	#,
	movq	%rbx, %rsi	# x,
	movl	%eax, %edi	# tmp259,
	call	legitimate_address_p	#
	testl	%eax, %eax	# D.30061
	je	.L1301	#,
	.loc 1 5270 0 is_stmt 1
	movq	%rbx, %rax	# x, D.30058
	jmp	.L1269	#
.L1301:
	.loc 1 5272 0
	movq	8(%rbx), %rax	# x_2->fld[0].rtx, D.30062
	movzwl	(%rax), %eax	# _208->code, D.30060
	cmpw	$78, %ax	#, D.30060
	jne	.L1302	#,
	.loc 1 5274 0
	movl	$1, -64(%rbp)	#, changed
	.loc 1 5275 0
	movq	8(%rbx), %rax	# x_2->fld[0].rtx, D.30062
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.30062,
	call	force_operand	#
	movq	%rax, 8(%rbx)	# D.30062, x_2->fld[0].rtx
.L1302:
	.loc 1 5278 0
	movq	16(%rbx), %rax	# x_2->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _213->code, D.30060
	cmpw	$78, %ax	#, D.30060
	jne	.L1303	#,
	.loc 1 5280 0
	movl	$1, -64(%rbp)	#, changed
	.loc 1 5281 0
	movq	16(%rbx), %rax	# x_2->fld[1].rtx, D.30062
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.30062,
	call	force_operand	#
	movq	%rax, 16(%rbx)	# D.30062, x_2->fld[1].rtx
.L1303:
	.loc 1 5284 0
	cmpl	$0, -64(%rbp)	#, changed
	je	.L1304	#,
	.loc 1 5285 0
	movq	16(%rbx), %rax	# x_2->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _218->code, D.30060
	cmpw	$61, %ax	#, D.30060
	jne	.L1304	#,
	.loc 1 5286 0
	movq	8(%rbx), %rax	# x_2->fld[0].rtx, D.30062
	movzwl	(%rax), %eax	# _220->code, D.30060
	cmpw	$61, %ax	#, D.30060
	jne	.L1304	#,
	.loc 1 5287 0
	movq	%rbx, %rax	# x, D.30058
	jmp	.L1269	#
.L1304:
	.loc 1 5289 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.733
	testl	%eax, %eax	# flag_pic.733
	je	.L1305	#,
	.loc 1 5289 0 is_stmt 0 discriminator 1
	movq	16(%rbx), %rax	# x_2->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _224->code, D.30060
	cmpw	$68, %ax	#, D.30060
	je	.L1306	#,
	movq	16(%rbx), %rax	# x_2->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _226->code, D.30060
	cmpw	$67, %ax	#, D.30060
	je	.L1306	#,
	movq	16(%rbx), %rax	# x_2->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _228->code, D.30060
	cmpw	$58, %ax	#, D.30060
	jne	.L1305	#,
	movq	16(%rbx), %rax	# x_2->fld[1].rtx, D.30062
	movq	%rax, %rdi	# D.30062,
	call	symbolic_reference_mentioned_p	#
	testl	%eax, %eax	# D.30061
	je	.L1305	#,
.L1306:
	.loc 1 5291 0 is_stmt 1
	movl	$1, -64(%rbp)	#, changed
	.loc 1 5292 0
	movl	$0, %esi	#,
	movq	%rbx, %rdi	# x,
	call	legitimize_pic_address	#
	movq	%rax, %rbx	#, x
.L1305:
	.loc 1 5295 0
	cmpl	$0, -64(%rbp)	#, changed
	je	.L1307	#,
	.loc 1 5295 0 is_stmt 0 discriminator 1
	movl	-68(%rbp), %eax	# mode, tmp260
	movl	$0, %edx	#,
	movq	%rbx, %rsi	# x,
	movl	%eax, %edi	# tmp260,
	call	legitimate_address_p	#
	testl	%eax, %eax	# D.30061
	je	.L1307	#,
	.loc 1 5296 0 is_stmt 1
	movq	%rbx, %rax	# x, D.30058
	jmp	.L1269	#
.L1307:
	.loc 1 5298 0
	movq	8(%rbx), %rax	# x_3->fld[0].rtx, D.30062
	movzwl	(%rax), %eax	# _236->code, D.30060
	cmpw	$61, %ax	#, D.30060
	jne	.L1308	#,
.LBB49:
	.loc 1 5300 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.735
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1309	#,
	.loc 1 5300 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.734
	jmp	.L1310	#
.L1309:
	.loc 1 5300 0 discriminator 2
	movl	$4, %eax	#, iftmp.734
.L1310:
	.loc 1 5300 0 discriminator 3
	movl	%eax, %edi	# iftmp.734,
	call	gen_reg_rtx	#
	movq	%rax, %r12	#, temp
	.loc 1 5301 0 is_stmt 1 discriminator 3
	movq	16(%rbx), %rax	# x_3->fld[1].rtx, D.30062
	movq	%r12, %rsi	# temp,
	movq	%rax, %rdi	# D.30062,
	call	force_operand	#
	movq	%rax, %r13	#, val
	.loc 1 5302 0 discriminator 3
	cmpq	%r12, %r13	# temp, val
	je	.L1311	#,
	.loc 1 5303 0
	movq	%r13, %rsi	# val,
	movq	%r12, %rdi	# temp,
	call	emit_move_insn	#
.L1311:
	.loc 1 5305 0
	movq	%r12, 16(%rbx)	# temp, x_3->fld[1].rtx
	.loc 1 5306 0
	movq	%rbx, %rax	# x, D.30058
	jmp	.L1269	#
.L1308:
.LBE49:
	.loc 1 5309 0
	movq	16(%rbx), %rax	# x_3->fld[1].rtx, D.30062
	movzwl	(%rax), %eax	# _246->code, D.30060
	cmpw	$61, %ax	#, D.30060
	jne	.L1275	#,
.LBB50:
	.loc 1 5311 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.737
	andl	$33554432, %eax	#, D.30061
	testl	%eax, %eax	# D.30061
	je	.L1312	#,
	.loc 1 5311 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.736
	jmp	.L1313	#
.L1312:
	.loc 1 5311 0 discriminator 2
	movl	$4, %eax	#, iftmp.736
.L1313:
	.loc 1 5311 0 discriminator 3
	movl	%eax, %edi	# iftmp.736,
	call	gen_reg_rtx	#
	movq	%rax, %r12	#, temp
	.loc 1 5312 0 is_stmt 1 discriminator 3
	movq	8(%rbx), %rax	# x_3->fld[0].rtx, D.30062
	movq	%r12, %rsi	# temp,
	movq	%rax, %rdi	# D.30062,
	call	force_operand	#
	movq	%rax, %r13	#, val
	.loc 1 5313 0 discriminator 3
	cmpq	%r12, %r13	# temp, val
	je	.L1314	#,
	.loc 1 5314 0
	movq	%r13, %rsi	# val,
	movq	%r12, %rdi	# temp,
	call	emit_move_insn	#
.L1314:
	.loc 1 5316 0
	movq	%r12, 8(%rbx)	# temp, x_3->fld[0].rtx
	.loc 1 5317 0
	movq	%rbx, %rax	# x, D.30058
	jmp	.L1269	#
.L1275:
.LBE50:
	.loc 1 5321 0
	movq	%rbx, %rax	# x, D.30058
.L1269:
	.loc 1 5322 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE91:
	.size	legitimize_address, .-legitimize_address
	.section	.rodata
.LC163:
	.string	"@PLT"
.LC164:
	.string	"L"
.LC165:
	.string	"%ld"
.LC166:
	.string	"0x%lx%08lx"
.LC167:
	.string	"floating constant misused"
.LC168:
	.string	"@GOT"
.LC169:
	.string	"@GOTOFF"
.LC170:
	.string	"@GOTPCREL(%RIP)"
.LC171:
	.string	"invalid UNSPEC as operand"
.LC172:
	.string	"invalid expression as operand"
	.text
	.type	output_pic_addr_const, @function
output_pic_addr_const:
.LFB92:
	.loc 1 5334 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$304, %rsp	#,
	movq	%rdi, -280(%rbp)	# file, file
	movq	%rsi, -288(%rbp)	# x, x
	movl	%edx, -292(%rbp)	# code, code
	.loc 1 5334 0
	movq	%fs:40, %rax	#, tmp158
	movq	%rax, -8(%rbp)	# tmp158, D.30075
	xorl	%eax, %eax	# tmp158
	.loc 1 5337 0
	movq	-288(%rbp), %rax	# x, tmp97
	movzwl	(%rax), %eax	# x_4(D)->code, D.30066
	movzwl	%ax, %eax	# D.30066, D.30067
	subl	$36, %eax	#, tmp98
	cmpl	$40, %eax	#, tmp98
	ja	.L1316	#,
	movl	%eax, %eax	# tmp98, tmp99
	movq	.L1318(,%rax,8), %rax	#, tmp100
	jmp	*%rax	# tmp100
	.section	.rodata
	.align 8
	.align 4
.L1318:
	.quad	.L1317
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1319
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1320
	.quad	.L1321
	.quad	.L1316
	.quad	.L1316
	.quad	.L1322
	.quad	.L1323
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1324
	.quad	.L1325
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1316
	.quad	.L1326
	.quad	.L1327
	.text
.L1323:
	.loc 1 5340 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.738
	testl	%eax, %eax	# flag_pic.738
	je	.L1328	#,
	.loc 1 5341 0
	movq	-280(%rbp), %rax	# file, tmp101
	movq	%rax, %rsi	# tmp101,
	movl	$46, %edi	#,
	call	_IO_putc	#
	.loc 1 5344 0
	jmp	.L1315	#
.L1328:
	.loc 1 5343 0
	movl	$__FUNCTION__.15542, %edx	#,
	movl	$5343, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1325:
	.loc 1 5347 0
	movq	-288(%rbp), %rax	# x, tmp102
	movq	8(%rax), %rdx	# x_4(D)->fld[0].rtstr, D.30068
	movq	-280(%rbp), %rax	# file, tmp103
	movq	%rdx, %rsi	# D.30068,
	movq	%rax, %rdi	# tmp103,
	call	assemble_name	#
	.loc 1 5348 0
	cmpl	$80, -292(%rbp)	#, code
	jne	.L1331	#,
	.loc 1 5348 0 is_stmt 0 discriminator 1
	movq	-288(%rbp), %rax	# x, tmp104
	movzbl	3(%rax), %eax	# *x_4(D), D.30069
	andl	$8, %eax	#, D.30069
	testb	%al, %al	# D.30069
	jne	.L1331	#,
	.loc 1 5349 0 is_stmt 1
	movq	-280(%rbp), %rax	# file, tmp105
	movq	%rax, %rcx	# tmp105,
	movl	$4, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC163, %edi	#,
	call	fwrite	#
	.loc 1 5350 0
	jmp	.L1315	#
.L1331:
	jmp	.L1315	#
.L1324:
	.loc 1 5353 0
	movq	-288(%rbp), %rax	# x, tmp106
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, tmp107
	movq	%rax, -288(%rbp)	# tmp107, x
.L1317:
	.loc 1 5356 0
	movq	-288(%rbp), %rax	# x, tmp108
	movl	48(%rax), %eax	# x_1->fld[5].rtint, D.30070
	movl	%eax, %edx	# D.30070, D.30067
	leaq	-272(%rbp), %rax	#, tmp109
	movl	%edx, %ecx	# D.30067,
	movl	$.LC164, %edx	#,
	movl	$.LC114, %esi	#,
	movq	%rax, %rdi	# tmp109,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 5357 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.739
	leaq	-272(%rbp), %rdx	#, tmp110
	movq	%rdx, %rsi	# tmp110,
	movq	%rax, %rdi	# asm_out_file.739,
	call	assemble_name	#
	.loc 1 5358 0
	jmp	.L1315	#
.L1320:
	.loc 1 5361 0
	movq	-288(%rbp), %rax	# x, tmp111
	movq	8(%rax), %rdx	# x_4(D)->fld[0].rtwint, D.30071
	movq	-280(%rbp), %rax	# file, tmp112
	movl	$.LC165, %esi	#,
	movq	%rax, %rdi	# tmp112,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5362 0
	jmp	.L1315	#
.L1322:
	.loc 1 5367 0
	movq	-288(%rbp), %rax	# x, tmp113
	movq	8(%rax), %rcx	# x_4(D)->fld[0].rtx, D.30072
	movl	-292(%rbp), %edx	# code, tmp114
	movq	-280(%rbp), %rax	# file, tmp115
	movq	%rcx, %rsi	# D.30072,
	movq	%rax, %rdi	# tmp115,
	call	output_pic_addr_const	#
	.loc 1 5368 0
	jmp	.L1315	#
.L1321:
	.loc 1 5371 0
	movq	-288(%rbp), %rax	# x, tmp116
	movzbl	2(%rax), %eax	# x_4(D)->mode, D.30069
	testb	%al, %al	# D.30069
	jne	.L1332	#,
	.loc 1 5374 0
	movq	-288(%rbp), %rax	# x, tmp117
	movq	24(%rax), %rax	# x_4(D)->fld[2].rtwint, D.30071
	testq	%rax, %rax	# D.30071
	jne	.L1333	#,
	.loc 1 5374 0 is_stmt 0 discriminator 1
	movq	-288(%rbp), %rax	# x, tmp118
	movq	16(%rax), %rax	# x_4(D)->fld[1].rtwint, D.30071
	testq	%rax, %rax	# D.30071
	jns	.L1334	#,
.L1333:
	.loc 1 5377 0 is_stmt 1
	movq	-288(%rbp), %rax	# x, tmp119
	movq	16(%rax), %rax	# x_4(D)->fld[1].rtwint, D.30071
	.loc 1 5375 0
	movq	%rax, %rcx	# D.30071, D.30073
	.loc 1 5376 0
	movq	-288(%rbp), %rax	# x, tmp120
	movq	24(%rax), %rax	# x_4(D)->fld[2].rtwint, D.30071
	.loc 1 5375 0
	movq	%rax, %rdx	# D.30071, D.30073
	movq	-280(%rbp), %rax	# file, tmp121
	movl	$.LC166, %esi	#,
	movq	%rax, %rdi	# tmp121,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L1336	#
.L1334:
	.loc 1 5379 0
	movq	-288(%rbp), %rax	# x, tmp122
	movq	16(%rax), %rdx	# x_4(D)->fld[1].rtwint, D.30071
	movq	-280(%rbp), %rax	# file, tmp123
	movl	$.LC165, %esi	#,
	movq	%rax, %rdi	# tmp123,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L1336	#
.L1332:
	.loc 1 5384 0
	movl	$.LC167, %edi	#,
	movl	$0, %eax	#,
	call	output_operand_lossage	#
	.loc 1 5385 0
	jmp	.L1315	#
.L1336:
	jmp	.L1315	#
.L1326:
	.loc 1 5389 0
	movq	-288(%rbp), %rax	# x, tmp124
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.30072
	movzwl	(%rax), %eax	# _27->code, D.30066
	cmpw	$54, %ax	#, D.30066
	jne	.L1337	#,
	.loc 1 5391 0
	movq	-288(%rbp), %rax	# x, tmp125
	movq	8(%rax), %rcx	# x_4(D)->fld[0].rtx, D.30072
	movl	-292(%rbp), %edx	# code, tmp126
	movq	-280(%rbp), %rax	# file, tmp127
	movq	%rcx, %rsi	# D.30072,
	movq	%rax, %rdi	# tmp127,
	call	output_pic_addr_const	#
	.loc 1 5392 0
	movq	-280(%rbp), %rax	# file, tmp128
	movq	%rax, %rsi	# tmp128,
	movl	$43, %edi	#,
	call	_IO_putc	#
	.loc 1 5393 0
	movq	-288(%rbp), %rax	# x, tmp129
	movq	16(%rax), %rcx	# x_4(D)->fld[1].rtx, D.30072
	movl	-292(%rbp), %edx	# code, tmp130
	movq	-280(%rbp), %rax	# file, tmp131
	movq	%rcx, %rsi	# D.30072,
	movq	%rax, %rdi	# tmp131,
	call	output_pic_addr_const	#
	jmp	.L1338	#
.L1337:
	.loc 1 5395 0
	movq	-288(%rbp), %rax	# x, tmp132
	movq	16(%rax), %rax	# x_4(D)->fld[1].rtx, D.30072
	movzwl	(%rax), %eax	# _31->code, D.30066
	cmpw	$54, %ax	#, D.30066
	jne	.L1339	#,
	.loc 1 5397 0
	movq	-288(%rbp), %rax	# x, tmp133
	movq	16(%rax), %rcx	# x_4(D)->fld[1].rtx, D.30072
	movl	-292(%rbp), %edx	# code, tmp134
	movq	-280(%rbp), %rax	# file, tmp135
	movq	%rcx, %rsi	# D.30072,
	movq	%rax, %rdi	# tmp135,
	call	output_pic_addr_const	#
	.loc 1 5398 0
	movq	-280(%rbp), %rax	# file, tmp136
	movq	%rax, %rsi	# tmp136,
	movl	$43, %edi	#,
	call	_IO_putc	#
	.loc 1 5399 0
	movq	-288(%rbp), %rax	# x, tmp137
	movq	8(%rax), %rcx	# x_4(D)->fld[0].rtx, D.30072
	movl	-292(%rbp), %edx	# code, tmp138
	movq	-280(%rbp), %rax	# file, tmp139
	movq	%rcx, %rsi	# D.30072,
	movq	%rax, %rdi	# tmp139,
	call	output_pic_addr_const	#
	jmp	.L1338	#
.L1339:
	.loc 1 5402 0
	movl	$__FUNCTION__.15542, %edx	#,
	movl	$5402, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1338:
	.loc 1 5403 0
	jmp	.L1315	#
.L1327:
	.loc 1 5406 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.741
	cmpl	$1, %eax	#, ix86_asm_dialect.741
	jne	.L1340	#,
	.loc 1 5406 0 is_stmt 0 discriminator 1
	movl	$40, %eax	#, iftmp.740
	jmp	.L1341	#
.L1340:
	.loc 1 5406 0 discriminator 2
	movl	$91, %eax	#, iftmp.740
.L1341:
	.loc 1 5406 0 discriminator 3
	movq	-280(%rbp), %rdx	# file, tmp140
	movq	%rdx, %rsi	# tmp140,
	movl	%eax, %edi	# iftmp.740,
	call	_IO_putc	#
	.loc 1 5407 0 is_stmt 1 discriminator 3
	movq	-288(%rbp), %rax	# x, tmp141
	movq	8(%rax), %rcx	# x_4(D)->fld[0].rtx, D.30072
	movl	-292(%rbp), %edx	# code, tmp142
	movq	-280(%rbp), %rax	# file, tmp143
	movq	%rcx, %rsi	# D.30072,
	movq	%rax, %rdi	# tmp143,
	call	output_pic_addr_const	#
	.loc 1 5408 0 discriminator 3
	movq	-280(%rbp), %rax	# file, tmp144
	movq	%rax, %rsi	# tmp144,
	movl	$45, %edi	#,
	call	_IO_putc	#
	.loc 1 5409 0 discriminator 3
	movq	-288(%rbp), %rax	# x, tmp145
	movq	16(%rax), %rcx	# x_4(D)->fld[1].rtx, D.30072
	movl	-292(%rbp), %edx	# code, tmp146
	movq	-280(%rbp), %rax	# file, tmp147
	movq	%rcx, %rsi	# D.30072,
	movq	%rax, %rdi	# tmp147,
	call	output_pic_addr_const	#
	.loc 1 5410 0 discriminator 3
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.743
	cmpl	$1, %eax	#, ix86_asm_dialect.743
	jne	.L1342	#,
	.loc 1 5410 0 is_stmt 0 discriminator 1
	movl	$41, %eax	#, iftmp.742
	jmp	.L1343	#
.L1342:
	.loc 1 5410 0 discriminator 2
	movl	$93, %eax	#, iftmp.742
.L1343:
	.loc 1 5410 0 discriminator 3
	movq	-280(%rbp), %rdx	# file, tmp148
	movq	%rdx, %rsi	# tmp148,
	movl	%eax, %edi	# iftmp.742,
	call	_IO_putc	#
	.loc 1 5411 0 is_stmt 1 discriminator 3
	jmp	.L1315	#
.L1319:
	.loc 1 5414 0
	movq	-288(%rbp), %rax	# x, tmp149
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtvec, D.30074
	movl	(%rax), %eax	# _43->num_elem, D.30070
	cmpl	$1, %eax	#, D.30070
	je	.L1344	#,
	.loc 1 5415 0
	movl	$__FUNCTION__.15542, %edx	#,
	movl	$5415, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1344:
	.loc 1 5416 0
	movq	-288(%rbp), %rax	# x, tmp150
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtvec, D.30074
	movq	8(%rax), %rcx	# _45->elem, D.30072
	movl	-292(%rbp), %edx	# code, tmp151
	movq	-280(%rbp), %rax	# file, tmp152
	movq	%rcx, %rsi	# D.30072,
	movq	%rax, %rdi	# tmp152,
	call	output_pic_addr_const	#
	.loc 1 5417 0
	movq	-288(%rbp), %rax	# x, tmp153
	movl	16(%rax), %eax	# x_4(D)->fld[1].rtint, D.30070
	cmpl	$7, %eax	#, D.30070
	je	.L1346	#,
	cmpl	$7, %eax	#, D.30070
	jg	.L1347	#,
	cmpl	$6, %eax	#, D.30070
	je	.L1348	#,
	jmp	.L1345	#
.L1347:
	cmpl	$8, %eax	#, D.30070
	je	.L1349	#,
	cmpl	$15, %eax	#, D.30070
	je	.L1350	#,
	jmp	.L1345	#
.L1348:
	.loc 1 5420 0
	movq	-280(%rbp), %rax	# file, tmp154
	movq	%rax, %rcx	# tmp154,
	movl	$4, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC168, %edi	#,
	call	fwrite	#
	.loc 1 5421 0
	jmp	.L1351	#
.L1346:
	.loc 1 5423 0
	movq	-280(%rbp), %rax	# file, tmp155
	movq	%rax, %rcx	# tmp155,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC169, %edi	#,
	call	fwrite	#
	.loc 1 5424 0
	jmp	.L1351	#
.L1349:
	.loc 1 5426 0
	movq	-280(%rbp), %rax	# file, tmp156
	movq	%rax, %rcx	# tmp156,
	movl	$4, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC163, %edi	#,
	call	fwrite	#
	.loc 1 5427 0
	jmp	.L1351	#
.L1350:
	.loc 1 5429 0
	movq	-280(%rbp), %rax	# file, tmp157
	movq	%rax, %rcx	# tmp157,
	movl	$15, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC170, %edi	#,
	call	fwrite	#
	.loc 1 5430 0
	jmp	.L1351	#
.L1345:
	.loc 1 5432 0
	movl	$.LC171, %edi	#,
	movl	$0, %eax	#,
	call	output_operand_lossage	#
	.loc 1 5433 0
	nop
.L1351:
	.loc 1 5435 0
	jmp	.L1315	#
.L1316:
	.loc 1 5438 0
	movl	$.LC172, %edi	#,
	movl	$0, %eax	#,
	call	output_operand_lossage	#
.L1315:
	.loc 1 5440 0
	movq	-8(%rbp), %rax	# D.30075, tmp159
	xorq	%fs:40, %rax	#, tmp159
	je	.L1352	#,
	call	__stack_chk_fail	#
.L1352:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE92:
	.size	output_pic_addr_const, .-output_pic_addr_const
	.globl	i386_dwarf_output_addr_const
	.type	i386_dwarf_output_addr_const, @function
i386_dwarf_output_addr_const:
.LFB93:
	.loc 1 5449 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# file, file
	movq	%rsi, -16(%rbp)	# x, x
	.loc 1 5451 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.745
	andl	$33554432, %eax	#, D.30089
	testl	%eax, %eax	# D.30089
	je	.L1354	#,
	.loc 1 5451 0 is_stmt 0 discriminator 1
	movl	$.LC80, %eax	#, iftmp.744
	jmp	.L1355	#
.L1354:
	.loc 1 5451 0 discriminator 2
	movl	$.LC79, %eax	#, iftmp.744
.L1355:
	.loc 1 5451 0 discriminator 3
	movq	-8(%rbp), %rdx	# file, tmp63
	movq	%rdx, %rcx	# tmp63,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movq	%rax, %rdi	# iftmp.744,
	call	fwrite	#
	.loc 1 5457 0 is_stmt 1 discriminator 3
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.746
	testl	%eax, %eax	# flag_pic.746
	je	.L1356	#,
	.loc 1 5458 0
	movq	-16(%rbp), %rcx	# x, tmp64
	movq	-8(%rbp), %rax	# file, tmp65
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp64,
	movq	%rax, %rdi	# tmp65,
	call	output_pic_addr_const	#
	jmp	.L1357	#
.L1356:
	.loc 1 5460 0
	movq	-16(%rbp), %rdx	# x, tmp66
	movq	-8(%rbp), %rax	# file, tmp67
	movq	%rdx, %rsi	# tmp66,
	movq	%rax, %rdi	# tmp67,
	call	output_addr_const	#
.L1357:
	.loc 1 5461 0
	movq	-8(%rbp), %rax	# file, tmp68
	movq	%rax, %rsi	# tmp68,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 5462 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE93:
	.size	i386_dwarf_output_addr_const, .-i386_dwarf_output_addr_const
	.globl	i386_simplify_dwarf_addr
	.type	i386_simplify_dwarf_addr, @function
i386_simplify_dwarf_addr:
.LFB94:
	.loc 1 5471 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# orig_x, orig_x
	.loc 1 5472 0
	movq	-24(%rbp), %rax	# orig_x, tmp134
	movq	%rax, -16(%rbp)	# tmp134, x
	.loc 1 5474 0
	movq	-16(%rbp), %rax	# x, tmp135
	movzwl	(%rax), %eax	# x_11->code, D.30091
	cmpw	$66, %ax	#, D.30091
	jne	.L1359	#,
	.loc 1 5475 0
	movq	-16(%rbp), %rax	# x, tmp136
	movq	8(%rax), %rax	# x_11->fld[0].rtx, tmp137
	movq	%rax, -16(%rbp)	# tmp137, x
.L1359:
	.loc 1 5477 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.747
	andl	$33554432, %eax	#, D.30092
	testl	%eax, %eax	# D.30092
	je	.L1360	#,
	.loc 1 5479 0
	movq	-16(%rbp), %rax	# x, tmp138
	movzwl	(%rax), %eax	# x_1->code, D.30091
	cmpw	$58, %ax	#, D.30091
	jne	.L1361	#,
	.loc 1 5480 0
	movq	-16(%rbp), %rax	# x, tmp139
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.30093
	movzwl	(%rax), %eax	# _17->code, D.30091
	cmpw	$42, %ax	#, D.30091
	jne	.L1361	#,
	.loc 1 5481 0
	movq	-16(%rbp), %rax	# x, tmp140
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.30093
	movl	16(%rax), %eax	# _19->fld[1].rtint, D.30092
	cmpl	$15, %eax	#, D.30092
	jne	.L1361	#,
	.loc 1 5482 0
	movq	-24(%rbp), %rax	# orig_x, tmp141
	movzwl	(%rax), %eax	# orig_x_10(D)->code, D.30091
	cmpw	$66, %ax	#, D.30091
	je	.L1362	#,
.L1361:
	.loc 1 5483 0
	movq	-24(%rbp), %rax	# orig_x, D.30090
	jmp	.L1363	#
.L1362:
	.loc 1 5484 0
	movq	-16(%rbp), %rax	# x, tmp142
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.30093
	movq	8(%rax), %rax	# _22->fld[0].rtvec, D.30094
	movq	8(%rax), %rax	# _23->elem, D.30090
	jmp	.L1363	#
.L1360:
	.loc 1 5487 0
	movq	-16(%rbp), %rax	# x, tmp143
	movzwl	(%rax), %eax	# x_1->code, D.30091
	cmpw	$75, %ax	#, D.30091
	jne	.L1364	#,
	.loc 1 5488 0
	movq	-16(%rbp), %rax	# x, tmp144
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.30093
	movzwl	(%rax), %eax	# _27->code, D.30091
	cmpw	$58, %ax	#, D.30091
	je	.L1365	#,
.L1364:
	.loc 1 5489 0
	movq	-24(%rbp), %rax	# orig_x, D.30090
	jmp	.L1363	#
.L1365:
	.loc 1 5491 0
	movq	-16(%rbp), %rax	# x, tmp145
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.30093
	movzwl	(%rax), %eax	# _29->code, D.30091
	cmpw	$61, %ax	#, D.30091
	jne	.L1366	#,
	.loc 1 5492 0
	movq	-16(%rbp), %rax	# x, tmp146
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.30093
	movl	8(%rax), %edx	# _31->fld[0].rtuint, D.30095
	movl	target_flags(%rip), %eax	# target_flags, target_flags.749
	andl	$33554432, %eax	#, D.30092
	testl	%eax, %eax	# D.30092
	jne	.L1367	#,
	.loc 1 5492 0 is_stmt 0 discriminator 2
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.750
	testl	%eax, %eax	# flag_pic.750
	jne	.L1368	#,
.L1367:
	.loc 1 5492 0 discriminator 1
	movl	$-1, %eax	#, iftmp.748
	jmp	.L1369	#
.L1368:
	movl	$3, %eax	#, iftmp.748
.L1369:
	.loc 1 5492 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.748, D.30095
	jne	.L1366	#,
	.loc 1 5494 0 is_stmt 1
	movq	$0, -8(%rbp)	#, y
	jmp	.L1370	#
.L1366:
	.loc 1 5495 0
	movq	-16(%rbp), %rax	# x, tmp147
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.30093
	movzwl	(%rax), %eax	# _39->code, D.30091
	cmpw	$75, %ax	#, D.30091
	jne	.L1371	#,
	.loc 1 5498 0
	movq	-16(%rbp), %rax	# x, tmp148
	movq	8(%rax), %rax	# x_1->fld[0].rtx, tmp149
	movq	%rax, -8(%rbp)	# tmp149, y
	.loc 1 5499 0
	movq	-8(%rbp), %rax	# y, tmp150
	movq	8(%rax), %rax	# y_41->fld[0].rtx, D.30093
	movzwl	(%rax), %eax	# _42->code, D.30091
	cmpw	$61, %ax	#, D.30091
	jne	.L1372	#,
	.loc 1 5500 0
	movq	-8(%rbp), %rax	# y, tmp151
	movq	8(%rax), %rax	# y_41->fld[0].rtx, D.30093
	movl	8(%rax), %edx	# _44->fld[0].rtuint, D.30095
	movl	target_flags(%rip), %eax	# target_flags, target_flags.752
	andl	$33554432, %eax	#, D.30092
	testl	%eax, %eax	# D.30092
	jne	.L1373	#,
	.loc 1 5500 0 is_stmt 0 discriminator 2
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.753
	testl	%eax, %eax	# flag_pic.753
	jne	.L1374	#,
.L1373:
	.loc 1 5500 0 discriminator 1
	movl	$-1, %eax	#, iftmp.751
	jmp	.L1375	#
.L1374:
	movl	$3, %eax	#, iftmp.751
.L1375:
	.loc 1 5500 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.751, D.30095
	jne	.L1372	#,
	.loc 1 5501 0 is_stmt 1
	movq	-8(%rbp), %rax	# y, tmp152
	movq	16(%rax), %rax	# y_41->fld[1].rtx, tmp153
	movq	%rax, -8(%rbp)	# tmp153, y
	jmp	.L1376	#
.L1372:
	.loc 1 5502 0
	movq	-8(%rbp), %rax	# y, tmp154
	movq	16(%rax), %rax	# y_41->fld[1].rtx, D.30093
	movzwl	(%rax), %eax	# _52->code, D.30091
	cmpw	$61, %ax	#, D.30091
	jne	.L1377	#,
	.loc 1 5503 0
	movq	-8(%rbp), %rax	# y, tmp155
	movq	16(%rax), %rax	# y_41->fld[1].rtx, D.30093
	movl	8(%rax), %edx	# _54->fld[0].rtuint, D.30095
	movl	target_flags(%rip), %eax	# target_flags, target_flags.755
	andl	$33554432, %eax	#, D.30092
	testl	%eax, %eax	# D.30092
	jne	.L1378	#,
	.loc 1 5503 0 is_stmt 0 discriminator 2
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.756
	testl	%eax, %eax	# flag_pic.756
	jne	.L1379	#,
.L1378:
	.loc 1 5503 0 discriminator 1
	movl	$-1, %eax	#, iftmp.754
	jmp	.L1380	#
.L1379:
	movl	$3, %eax	#, iftmp.754
.L1380:
	.loc 1 5503 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.754, D.30095
	jne	.L1377	#,
	.loc 1 5504 0 is_stmt 1
	movq	-8(%rbp), %rax	# y, tmp156
	movq	8(%rax), %rax	# y_41->fld[0].rtx, tmp157
	movq	%rax, -8(%rbp)	# tmp157, y
	jmp	.L1376	#
.L1377:
	.loc 1 5506 0
	movq	-24(%rbp), %rax	# orig_x, D.30090
	jmp	.L1363	#
.L1376:
	.loc 1 5507 0
	movq	-8(%rbp), %rax	# y, tmp158
	movzwl	(%rax), %eax	# y_2->code, D.30091
	cmpw	$61, %ax	#, D.30091
	je	.L1370	#,
	.loc 1 5508 0
	movq	-8(%rbp), %rax	# y, tmp159
	movzwl	(%rax), %eax	# y_2->code, D.30091
	cmpw	$78, %ax	#, D.30091
	je	.L1370	#,
	.loc 1 5509 0
	movq	-8(%rbp), %rax	# y, tmp160
	movzwl	(%rax), %eax	# y_2->code, D.30091
	cmpw	$87, %ax	#, D.30091
	je	.L1370	#,
	.loc 1 5510 0
	movq	-24(%rbp), %rax	# orig_x, D.30090
	jmp	.L1363	#
.L1371:
	.loc 1 5513 0
	movq	-24(%rbp), %rax	# orig_x, D.30090
	jmp	.L1363	#
.L1370:
	.loc 1 5515 0
	movq	-16(%rbp), %rax	# x, tmp161
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.30093
	movq	8(%rax), %rax	# _68->fld[0].rtx, tmp162
	movq	%rax, -16(%rbp)	# tmp162, x
	.loc 1 5516 0
	movq	-16(%rbp), %rax	# x, tmp163
	movzwl	(%rax), %eax	# x_69->code, D.30091
	cmpw	$42, %ax	#, D.30091
	jne	.L1381	#,
	.loc 1 5517 0
	movq	-16(%rbp), %rax	# x, tmp164
	movl	16(%rax), %eax	# x_69->fld[1].rtint, D.30092
	cmpl	$6, %eax	#, D.30092
	jne	.L1382	#,
	.loc 1 5517 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# orig_x, tmp165
	movzwl	(%rax), %eax	# orig_x_10(D)->code, D.30091
	cmpw	$66, %ax	#, D.30091
	je	.L1383	#,
.L1382:
	.loc 1 5518 0 is_stmt 1
	movq	-16(%rbp), %rax	# x, tmp166
	movl	16(%rax), %eax	# x_69->fld[1].rtint, D.30092
	cmpl	$7, %eax	#, D.30092
	jne	.L1381	#,
	.loc 1 5518 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# orig_x, tmp167
	movzwl	(%rax), %eax	# orig_x_10(D)->code, D.30091
	cmpw	$66, %ax	#, D.30091
	je	.L1381	#,
.L1383:
	.loc 1 5520 0 is_stmt 1
	cmpq	$0, -8(%rbp)	#, y
	je	.L1384	#,
	.loc 1 5521 0
	movq	-16(%rbp), %rax	# x, tmp168
	movq	8(%rax), %rax	# x_69->fld[0].rtvec, D.30094
	movq	8(%rax), %rcx	# _75->elem, D.30093
	movl	target_flags(%rip), %eax	# target_flags, target_flags.758
	andl	$33554432, %eax	#, D.30092
	testl	%eax, %eax	# D.30092
	je	.L1385	#,
	.loc 1 5521 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.757
	jmp	.L1386	#
.L1385:
	.loc 1 5521 0 discriminator 2
	movl	$4, %eax	#, iftmp.757
.L1386:
	.loc 1 5521 0 discriminator 3
	movq	-8(%rbp), %rdx	# y, tmp169
	movl	%eax, %esi	# iftmp.757,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1363	#
.L1384:
	.loc 1 5522 0 is_stmt 1
	movq	-16(%rbp), %rax	# x, tmp170
	movq	8(%rax), %rax	# x_69->fld[0].rtvec, D.30094
	movq	8(%rax), %rax	# _82->elem, D.30090
	jmp	.L1363	#
.L1381:
	.loc 1 5525 0
	movq	-16(%rbp), %rax	# x, tmp171
	movzwl	(%rax), %eax	# x_69->code, D.30091
	cmpw	$75, %ax	#, D.30091
	jne	.L1387	#,
	.loc 1 5526 0
	movq	-16(%rbp), %rax	# x, tmp172
	movq	8(%rax), %rax	# x_69->fld[0].rtx, D.30093
	movzwl	(%rax), %eax	# _85->code, D.30091
	cmpw	$42, %ax	#, D.30091
	jne	.L1387	#,
	.loc 1 5527 0
	movq	-16(%rbp), %rax	# x, tmp173
	movq	16(%rax), %rax	# x_69->fld[1].rtx, D.30093
	movzwl	(%rax), %eax	# _87->code, D.30091
	cmpw	$54, %ax	#, D.30091
	jne	.L1387	#,
	.loc 1 5528 0
	movq	-16(%rbp), %rax	# x, tmp174
	movq	8(%rax), %rax	# x_69->fld[0].rtx, D.30093
	movl	16(%rax), %eax	# _89->fld[1].rtint, D.30092
	cmpl	$6, %eax	#, D.30092
	jne	.L1388	#,
	.loc 1 5528 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# orig_x, tmp175
	movzwl	(%rax), %eax	# orig_x_10(D)->code, D.30091
	cmpw	$66, %ax	#, D.30091
	je	.L1389	#,
.L1388:
	.loc 1 5529 0 is_stmt 1
	movq	-16(%rbp), %rax	# x, tmp176
	movq	8(%rax), %rax	# x_69->fld[0].rtx, D.30093
	movl	16(%rax), %eax	# _92->fld[1].rtint, D.30092
	cmpl	$7, %eax	#, D.30092
	jne	.L1387	#,
	.loc 1 5529 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# orig_x, tmp177
	movzwl	(%rax), %eax	# orig_x_10(D)->code, D.30091
	cmpw	$66, %ax	#, D.30091
	je	.L1387	#,
.L1389:
	.loc 1 5531 0 is_stmt 1
	movq	-16(%rbp), %rax	# x, tmp178
	movq	16(%rax), %rdx	# x_69->fld[1].rtx, D.30093
	movq	-16(%rbp), %rax	# x, tmp179
	movq	8(%rax), %rax	# x_69->fld[0].rtx, D.30093
	movq	8(%rax), %rax	# _96->fld[0].rtvec, D.30094
	movq	8(%rax), %rax	# _97->elem, D.30093
	movq	%rdx, %rcx	# D.30093,
	movq	%rax, %rdx	# D.30093,
	movl	$0, %esi	#,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -16(%rbp)	# tmp180, x
	.loc 1 5532 0
	cmpq	$0, -8(%rbp)	#, y
	je	.L1390	#,
	.loc 1 5533 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.760
	andl	$33554432, %eax	#, D.30092
	testl	%eax, %eax	# D.30092
	je	.L1391	#,
	.loc 1 5533 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.759
	jmp	.L1392	#
.L1391:
	.loc 1 5533 0 discriminator 2
	movl	$4, %eax	#, iftmp.759
.L1392:
	.loc 1 5533 0 discriminator 3
	movq	-16(%rbp), %rcx	# x, tmp181
	movq	-8(%rbp), %rdx	# y, tmp182
	movl	%eax, %esi	# iftmp.759,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1363	#
.L1390:
	.loc 1 5534 0 is_stmt 1
	movq	-16(%rbp), %rax	# x, D.30090
	jmp	.L1363	#
.L1387:
	.loc 1 5537 0
	movq	-24(%rbp), %rax	# orig_x, D.30090
.L1363:
	.loc 1 5538 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE94:
	.size	i386_simplify_dwarf_addr, .-i386_simplify_dwarf_addr
	.section	.rodata
.LC173:
	.string	"e"
.LC174:
	.string	"ne"
.LC175:
	.string	"g"
.LC176:
	.string	"nbe"
.LC177:
	.string	"a"
.LC178:
	.string	"s"
.LC179:
	.string	"l"
.LC180:
	.string	"b"
.LC181:
	.string	"ns"
.LC182:
	.string	"ge"
.LC183:
	.string	"nb"
.LC184:
	.string	"ae"
.LC185:
	.string	"le"
.LC186:
	.string	"be"
.LC187:
	.string	"u"
.LC188:
	.string	"p"
.LC189:
	.string	"nu"
.LC190:
	.string	"np"
	.text
	.type	put_condition_code, @function
put_condition_code:
.LFB95:
	.loc 1 5546 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movl	%edi, -20(%rbp)	# code, code
	movl	%esi, -24(%rbp)	# mode, mode
	movl	%edx, -28(%rbp)	# reverse, reverse
	movl	%ecx, -32(%rbp)	# fp, fp
	movq	%r8, -40(%rbp)	# file, file
	.loc 1 5549 0
	cmpl	$57, -24(%rbp)	#, mode
	je	.L1394	#,
	.loc 1 5549 0 is_stmt 0 discriminator 1
	cmpl	$58, -24(%rbp)	#, mode
	jne	.L1395	#,
.L1394:
.LBB51:
	.loc 1 5552 0 is_stmt 1
	movl	-20(%rbp), %eax	# code, code.761
	leaq	-16(%rbp), %rcx	#, tmp71
	leaq	-20(%rbp), %rdx	#, tmp72
	leaq	-12(%rbp), %rsi	#, tmp73
	movl	%eax, %edi	# code.761,
	call	ix86_fp_comparison_codes	#
	.loc 1 5553 0
	movl	-12(%rbp), %eax	# bypass_code, bypass_code.762
	cmpl	$1, %eax	#, bypass_code.762
	jne	.L1396	#,
	.loc 1 5553 0 is_stmt 0 discriminator 1
	movl	-16(%rbp), %eax	# second_code, second_code.763
	cmpl	$1, %eax	#, second_code.763
	je	.L1397	#,
.L1396:
	.loc 1 5554 0 is_stmt 1
	movl	$__FUNCTION__.15579, %edx	#,
	movl	$5554, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1397:
	.loc 1 5555 0
	movl	-20(%rbp), %eax	# code, code.764
	movl	%eax, %edi	# code.764,
	call	ix86_fp_compare_code_to_integer	#
	movl	%eax, -20(%rbp)	# code.765, code
	.loc 1 5556 0
	movl	$52, -24(%rbp)	#, mode
.L1395:
.LBE51:
	.loc 1 5558 0
	cmpl	$0, -28(%rbp)	#, reverse
	je	.L1398	#,
	.loc 1 5559 0
	movl	-20(%rbp), %eax	# code, code.766
	movl	%eax, %edi	# code.766,
	call	reverse_condition	#
	movl	%eax, -20(%rbp)	# code.767, code
.L1398:
	.loc 1 5561 0
	movl	-20(%rbp), %eax	# code, code.768
	subl	$102, %eax	#, tmp74
	cmpl	$11, %eax	#, tmp74
	ja	.L1399	#,
	movl	%eax, %eax	# tmp74, tmp75
	movq	.L1401(,%rax,8), %rax	#, tmp76
	jmp	*%rax	# tmp76
	.section	.rodata
	.align 8
	.align 4
.L1401:
	.quad	.L1400
	.quad	.L1402
	.quad	.L1403
	.quad	.L1404
	.quad	.L1405
	.quad	.L1406
	.quad	.L1407
	.quad	.L1408
	.quad	.L1409
	.quad	.L1410
	.quad	.L1411
	.quad	.L1412
	.text
.L1402:
	.loc 1 5564 0
	movq	$.LC173, -8(%rbp)	#, suffix
	.loc 1 5565 0
	jmp	.L1413	#
.L1400:
	.loc 1 5567 0
	movq	$.LC174, -8(%rbp)	#, suffix
	.loc 1 5568 0
	jmp	.L1413	#
.L1404:
	.loc 1 5570 0
	cmpl	$52, -24(%rbp)	#, mode
	je	.L1414	#,
	.loc 1 5570 0 is_stmt 0 discriminator 1
	cmpl	$55, -24(%rbp)	#, mode
	je	.L1414	#,
	cmpl	$53, -24(%rbp)	#, mode
	je	.L1414	#,
	.loc 1 5571 0 is_stmt 1
	movl	$__FUNCTION__.15579, %edx	#,
	movl	$5571, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1414:
	.loc 1 5572 0
	movq	$.LC175, -8(%rbp)	#, suffix
	.loc 1 5573 0
	jmp	.L1413	#
.L1408:
	.loc 1 5577 0
	cmpl	$52, -24(%rbp)	#, mode
	je	.L1415	#,
	.loc 1 5578 0
	movl	$__FUNCTION__.15579, %edx	#,
	movl	$5578, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1415:
	.loc 1 5579 0
	cmpl	$0, -32(%rbp)	#, fp
	je	.L1416	#,
	.loc 1 5579 0 is_stmt 0 discriminator 1
	movl	$.LC176, %eax	#, iftmp.769
	jmp	.L1417	#
.L1416:
	.loc 1 5579 0 discriminator 2
	movl	$.LC177, %eax	#, iftmp.769
.L1417:
	.loc 1 5579 0 discriminator 3
	movq	%rax, -8(%rbp)	# iftmp.769, suffix
	.loc 1 5580 0 is_stmt 1 discriminator 3
	jmp	.L1413	#
.L1406:
	.loc 1 5582 0
	cmpl	$55, -24(%rbp)	#, mode
	je	.L1418	#,
	.loc 1 5582 0 is_stmt 0 discriminator 1
	cmpl	$54, -24(%rbp)	#, mode
	jne	.L1419	#,
.L1418:
	.loc 1 5583 0 is_stmt 1
	movq	$.LC178, -8(%rbp)	#, suffix
	jmp	.L1420	#
.L1419:
	.loc 1 5584 0
	cmpl	$52, -24(%rbp)	#, mode
	je	.L1421	#,
	.loc 1 5584 0 is_stmt 0 discriminator 1
	cmpl	$53, -24(%rbp)	#, mode
	jne	.L1422	#,
.L1421:
	.loc 1 5585 0 is_stmt 1
	movq	$.LC179, -8(%rbp)	#, suffix
	jmp	.L1420	#
.L1422:
	.loc 1 5587 0
	movl	$__FUNCTION__.15579, %edx	#,
	movl	$5587, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1420:
	.loc 1 5588 0
	jmp	.L1413	#
.L1410:
	.loc 1 5590 0
	cmpl	$52, -24(%rbp)	#, mode
	je	.L1423	#,
	.loc 1 5591 0
	movl	$__FUNCTION__.15579, %edx	#,
	movl	$5591, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1423:
	.loc 1 5592 0
	movq	$.LC180, -8(%rbp)	#, suffix
	.loc 1 5593 0
	jmp	.L1413	#
.L1403:
	.loc 1 5595 0
	cmpl	$55, -24(%rbp)	#, mode
	je	.L1424	#,
	.loc 1 5595 0 is_stmt 0 discriminator 1
	cmpl	$54, -24(%rbp)	#, mode
	jne	.L1425	#,
.L1424:
	.loc 1 5596 0 is_stmt 1
	movq	$.LC181, -8(%rbp)	#, suffix
	jmp	.L1426	#
.L1425:
	.loc 1 5597 0
	cmpl	$52, -24(%rbp)	#, mode
	je	.L1427	#,
	.loc 1 5597 0 is_stmt 0 discriminator 1
	cmpl	$53, -24(%rbp)	#, mode
	jne	.L1428	#,
.L1427:
	.loc 1 5598 0 is_stmt 1
	movq	$.LC182, -8(%rbp)	#, suffix
	jmp	.L1426	#
.L1428:
	.loc 1 5600 0
	movl	$__FUNCTION__.15579, %edx	#,
	movl	$5600, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1426:
	.loc 1 5601 0
	jmp	.L1413	#
.L1407:
	.loc 1 5604 0
	cmpl	$52, -24(%rbp)	#, mode
	je	.L1429	#,
	.loc 1 5605 0
	movl	$__FUNCTION__.15579, %edx	#,
	movl	$5605, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1429:
	.loc 1 5606 0
	cmpl	$0, -32(%rbp)	#, fp
	je	.L1430	#,
	.loc 1 5606 0 is_stmt 0 discriminator 1
	movl	$.LC183, %eax	#, iftmp.770
	jmp	.L1431	#
.L1430:
	.loc 1 5606 0 discriminator 2
	movl	$.LC184, %eax	#, iftmp.770
.L1431:
	.loc 1 5606 0 discriminator 3
	movq	%rax, -8(%rbp)	# iftmp.770, suffix
	.loc 1 5607 0 is_stmt 1 discriminator 3
	jmp	.L1413	#
.L1405:
	.loc 1 5609 0
	cmpl	$52, -24(%rbp)	#, mode
	je	.L1432	#,
	.loc 1 5609 0 is_stmt 0 discriminator 1
	cmpl	$53, -24(%rbp)	#, mode
	je	.L1432	#,
	cmpl	$55, -24(%rbp)	#, mode
	je	.L1432	#,
	.loc 1 5610 0 is_stmt 1
	movl	$__FUNCTION__.15579, %edx	#,
	movl	$5610, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1432:
	.loc 1 5611 0
	movq	$.LC185, -8(%rbp)	#, suffix
	.loc 1 5612 0
	jmp	.L1413	#
.L1409:
	.loc 1 5614 0
	cmpl	$52, -24(%rbp)	#, mode
	je	.L1433	#,
	.loc 1 5615 0
	movl	$__FUNCTION__.15579, %edx	#,
	movl	$5615, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1433:
	.loc 1 5616 0
	movq	$.LC186, -8(%rbp)	#, suffix
	.loc 1 5617 0
	jmp	.L1413	#
.L1411:
	.loc 1 5619 0
	cmpl	$0, -32(%rbp)	#, fp
	je	.L1434	#,
	.loc 1 5619 0 is_stmt 0 discriminator 1
	movl	$.LC187, %eax	#, iftmp.771
	jmp	.L1435	#
.L1434:
	.loc 1 5619 0 discriminator 2
	movl	$.LC188, %eax	#, iftmp.771
.L1435:
	.loc 1 5619 0 discriminator 3
	movq	%rax, -8(%rbp)	# iftmp.771, suffix
	.loc 1 5620 0 is_stmt 1 discriminator 3
	jmp	.L1413	#
.L1412:
	.loc 1 5622 0
	cmpl	$0, -32(%rbp)	#, fp
	je	.L1436	#,
	.loc 1 5622 0 is_stmt 0 discriminator 1
	movl	$.LC189, %eax	#, iftmp.772
	jmp	.L1437	#
.L1436:
	.loc 1 5622 0 discriminator 2
	movl	$.LC190, %eax	#, iftmp.772
.L1437:
	.loc 1 5622 0 discriminator 3
	movq	%rax, -8(%rbp)	# iftmp.772, suffix
	.loc 1 5623 0 is_stmt 1 discriminator 3
	jmp	.L1413	#
.L1399:
	.loc 1 5625 0
	movl	$__FUNCTION__.15579, %edx	#,
	movl	$5625, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1413:
	.loc 1 5627 0
	movq	-40(%rbp), %rdx	# file, tmp77
	movq	-8(%rbp), %rax	# suffix, tmp78
	movq	%rdx, %rsi	# tmp77,
	movq	%rax, %rdi	# tmp78,
	call	fputs	#
	.loc 1 5628 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE95:
	.size	put_condition_code, .-put_condition_code
	.section	.rodata
	.align 8
.LC191:
	.string	"extended registers have no high halves"
.LC192:
	.string	"r%ib"
.LC193:
	.string	"r%iw"
.LC194:
	.string	"r%id"
.LC195:
	.string	"r%i"
	.align 8
.LC196:
	.string	"unsupported operand size for extended register"
.LC197:
	.string	"st(0)"
	.text
	.globl	print_reg
	.type	print_reg, @function
print_reg:
.LFB96:
	.loc 1 5635 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# x, x
	movl	%esi, -12(%rbp)	# code, code
	movq	%rdx, -24(%rbp)	# file, file
	.loc 1 5636 0
	movq	-8(%rbp), %rax	# x, tmp102
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$16, %eax	#, D.30114
	je	.L1439	#,
	.loc 1 5637 0
	movq	-8(%rbp), %rax	# x, tmp103
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$20, %eax	#, D.30114
	je	.L1439	#,
	.loc 1 5638 0
	movq	-8(%rbp), %rax	# x, tmp104
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$17, %eax	#, D.30114
	je	.L1439	#,
	.loc 1 5639 0
	movq	-8(%rbp), %rax	# x, tmp105
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$18, %eax	#, D.30114
	jne	.L1440	#,
.L1439:
	.loc 1 5640 0
	movl	$__FUNCTION__.15599, %edx	#,
	movl	$5640, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1440:
	.loc 1 5642 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.773
	testl	%eax, %eax	# ix86_asm_dialect.773
	je	.L1441	#,
	.loc 1 5642 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, D.30115
	testb	%al, %al	# D.30115
	jne	.L1442	#,
.L1441:
	.loc 1 5643 0 is_stmt 1
	movq	-24(%rbp), %rax	# file, tmp106
	movq	%rax, %rsi	# tmp106,
	movl	$37, %edi	#,
	call	_IO_putc	#
.L1442:
	.loc 1 5645 0
	cmpl	$119, -12(%rbp)	#, code
	je	.L1443	#,
	.loc 1 5645 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp107
	movzwl	(%rax), %eax	# x_3(D)->code, D.30116
	cmpw	$61, %ax	#, D.30116
	jne	.L1444	#,
	movq	-8(%rbp), %rax	# x, tmp108
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$28, %eax	#, D.30114
	jbe	.L1444	#,
	movq	-8(%rbp), %rax	# x, tmp109
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$36, %eax	#, D.30114
	ja	.L1444	#,
.L1443:
	.loc 1 5646 0 is_stmt 1
	movl	$2, -12(%rbp)	#, code
	jmp	.L1445	#
.L1444:
	.loc 1 5647 0
	cmpl	$98, -12(%rbp)	#, code
	jne	.L1446	#,
	.loc 1 5648 0
	movl	$1, -12(%rbp)	#, code
	jmp	.L1445	#
.L1446:
	.loc 1 5649 0
	cmpl	$107, -12(%rbp)	#, code
	jne	.L1447	#,
	.loc 1 5650 0
	movl	$4, -12(%rbp)	#, code
	jmp	.L1445	#
.L1447:
	.loc 1 5651 0
	cmpl	$113, -12(%rbp)	#, code
	jne	.L1448	#,
	.loc 1 5652 0
	movl	$8, -12(%rbp)	#, code
	jmp	.L1445	#
.L1448:
	.loc 1 5653 0
	cmpl	$121, -12(%rbp)	#, code
	jne	.L1449	#,
	.loc 1 5654 0
	movl	$3, -12(%rbp)	#, code
	jmp	.L1445	#
.L1449:
	.loc 1 5655 0
	cmpl	$104, -12(%rbp)	#, code
	jne	.L1450	#,
	.loc 1 5656 0
	movl	$0, -12(%rbp)	#, code
	jmp	.L1445	#
.L1450:
	.loc 1 5658 0
	movq	-8(%rbp), %rax	# x, tmp110
	movzbl	2(%rax), %eax	# x_3(D)->mode, D.30117
	movzbl	%al, %eax	# D.30117, D.30118
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30117
	movzbl	%al, %eax	# D.30117, tmp112
	movl	%eax, -12(%rbp)	# tmp112, code
.L1445:
	.loc 1 5662 0
	movq	-8(%rbp), %rax	# x, tmp113
	movzwl	(%rax), %eax	# x_3(D)->code, D.30116
	cmpw	$61, %ax	#, D.30116
	jne	.L1451	#,
	.loc 1 5662 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp114
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$36, %eax	#, D.30114
	jbe	.L1451	#,
	movq	-8(%rbp), %rax	# x, tmp115
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$44, %eax	#, D.30114
	ja	.L1451	#,
	.loc 1 5664 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.774
	andl	$33554432, %eax	#, D.30118
	testl	%eax, %eax	# D.30118
	jne	.L1452	#,
	.loc 1 5665 0
	movl	$__FUNCTION__.15599, %edx	#,
	movl	$5665, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1452:
	.loc 1 5666 0
	cmpl	$8, -12(%rbp)	#, code
	ja	.L1453	#,
	movl	-12(%rbp), %eax	# code, tmp116
	movq	.L1455(,%rax,8), %rax	#, tmp117
	jmp	*%rax	# tmp117
	.section	.rodata
	.align 8
	.align 4
.L1455:
	.quad	.L1454
	.quad	.L1456
	.quad	.L1457
	.quad	.L1453
	.quad	.L1458
	.quad	.L1453
	.quad	.L1453
	.quad	.L1453
	.quad	.L1459
	.text
.L1454:
	.loc 1 5669 0
	movl	$.LC191, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	.loc 1 5670 0
	jmp	.L1460	#
.L1456:
	.loc 1 5672 0
	movq	-8(%rbp), %rax	# x, tmp118
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	leal	-29(%rax), %edx	#, D.30114
	movq	-24(%rbp), %rax	# file, tmp119
	movl	$.LC192, %esi	#,
	movq	%rax, %rdi	# tmp119,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5673 0
	jmp	.L1460	#
.L1457:
	.loc 1 5675 0
	movq	-8(%rbp), %rax	# x, tmp120
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	leal	-29(%rax), %edx	#, D.30114
	movq	-24(%rbp), %rax	# file, tmp121
	movl	$.LC193, %esi	#,
	movq	%rax, %rdi	# tmp121,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5676 0
	jmp	.L1460	#
.L1458:
	.loc 1 5678 0
	movq	-8(%rbp), %rax	# x, tmp122
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	leal	-29(%rax), %edx	#, D.30114
	movq	-24(%rbp), %rax	# file, tmp123
	movl	$.LC194, %esi	#,
	movq	%rax, %rdi	# tmp123,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5679 0
	jmp	.L1460	#
.L1459:
	.loc 1 5681 0
	movq	-8(%rbp), %rax	# x, tmp124
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	leal	-29(%rax), %edx	#, D.30114
	movq	-24(%rbp), %rax	# file, tmp125
	movl	$.LC195, %esi	#,
	movq	%rax, %rdi	# tmp125,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5682 0
	jmp	.L1460	#
.L1453:
	.loc 1 5684 0
	movl	$.LC196, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	.loc 1 5685 0
	nop
.L1460:
	.loc 1 5687 0
	jmp	.L1438	#
.L1451:
	.loc 1 5689 0
	cmpl	$16, -12(%rbp)	#, code
	ja	.L1462	#,
	movl	-12(%rbp), %eax	# code, tmp126
	movq	.L1464(,%rax,8), %rax	#, tmp127
	jmp	*%rax	# tmp127
	.section	.rodata
	.align 8
	.align 4
.L1464:
	.quad	.L1463
	.quad	.L1465
	.quad	.L1466
	.quad	.L1467
	.quad	.L1468
	.quad	.L1462
	.quad	.L1462
	.quad	.L1462
	.quad	.L1468
	.quad	.L1462
	.quad	.L1462
	.quad	.L1462
	.quad	.L1468
	.quad	.L1462
	.quad	.L1462
	.quad	.L1462
	.quad	.L1466
	.text
.L1467:
	.loc 1 5692 0
	movq	-8(%rbp), %rax	# x, tmp128
	movzwl	(%rax), %eax	# x_3(D)->code, D.30116
	cmpw	$61, %ax	#, D.30116
	jne	.L1468	#,
	.loc 1 5692 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp129
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$8, %eax	#, D.30114
	jne	.L1468	#,
	.loc 1 5694 0 is_stmt 1
	movq	-24(%rbp), %rax	# file, tmp130
	movq	%rax, %rcx	# tmp130,
	movl	$5, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC197, %edi	#,
	call	fwrite	#
	.loc 1 5695 0
	jmp	.L1438	#
.L1468:
	.loc 1 5701 0
	movq	-8(%rbp), %rax	# x, tmp131
	movzwl	(%rax), %eax	# x_3(D)->code, D.30116
	cmpw	$61, %ax	#, D.30116
	jne	.L1469	#,
	.loc 1 5701 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp132
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$7, %eax	#, D.30114
	jbe	.L1470	#,
	.loc 1 5701 0 discriminator 2
	movq	-8(%rbp), %rax	# x, tmp133
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$15, %eax	#, D.30114
	jbe	.L1466	#,
.L1470:
	.loc 1 5701 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp134
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$20, %eax	#, D.30114
	jbe	.L1471	#,
	.loc 1 5701 0 discriminator 2
	movq	-8(%rbp), %rax	# x, tmp135
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$28, %eax	#, D.30114
	jbe	.L1466	#,
.L1471:
	.loc 1 5701 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp136
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$44, %eax	#, D.30114
	jbe	.L1469	#,
	movq	-8(%rbp), %rax	# x, tmp137
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	cmpl	$52, %eax	#, D.30114
	jbe	.L1466	#,
.L1469:
	.loc 1 5702 0 is_stmt 1
	cmpl	$8, -12(%rbp)	#, code
	jne	.L1472	#,
	.loc 1 5702 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.776
	andl	$33554432, %eax	#, D.30118
	testl	%eax, %eax	# D.30118
	je	.L1472	#,
	movl	$114, %eax	#, iftmp.775
	jmp	.L1473	#
.L1472:
	.loc 1 5702 0 discriminator 2
	movl	$101, %eax	#, iftmp.775
.L1473:
	.loc 1 5702 0 discriminator 3
	movq	-24(%rbp), %rdx	# file, tmp138
	movq	%rdx, %rsi	# tmp138,
	movl	%eax, %edi	# iftmp.775,
	call	_IO_putc	#
.L1466:
	.loc 1 5706 0 is_stmt 1
	movq	-8(%rbp), %rax	# x, tmp139
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	movl	%eax, %eax	# D.30114, tmp140
	movq	hi_reg_name(,%rax,8), %rax	# hi_reg_name, D.30119
	movq	-24(%rbp), %rdx	# file, tmp141
	movq	%rdx, %rsi	# tmp141,
	movq	%rax, %rdi	# D.30119,
	call	fputs	#
	.loc 1 5707 0
	jmp	.L1438	#
.L1465:
	.loc 1 5709 0
	movq	-8(%rbp), %rax	# x, tmp142
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	movl	%eax, %eax	# D.30114, tmp143
	movq	qi_reg_name(,%rax,8), %rax	# qi_reg_name, D.30119
	movq	-24(%rbp), %rdx	# file, tmp144
	movq	%rdx, %rsi	# tmp144,
	movq	%rax, %rdi	# D.30119,
	call	fputs	#
	.loc 1 5710 0
	jmp	.L1438	#
.L1463:
	.loc 1 5712 0
	movq	-8(%rbp), %rax	# x, tmp145
	movl	8(%rax), %eax	# x_3(D)->fld[0].rtuint, D.30114
	movl	%eax, %eax	# D.30114, tmp146
	movq	qi_high_reg_name(,%rax,8), %rax	# qi_high_reg_name, D.30119
	movq	-24(%rbp), %rdx	# file, tmp147
	movq	%rdx, %rsi	# tmp147,
	movq	%rax, %rdi	# D.30119,
	call	fputs	#
	.loc 1 5713 0
	jmp	.L1438	#
.L1462:
	.loc 1 5715 0
	movl	$__FUNCTION__.15599, %edx	#,
	movl	$5715, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1438:
	.loc 1 5717 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE96:
	.size	print_reg, .-print_reg
	.section	.rodata
.LC198:
	.string	"eq"
.LC199:
	.string	"lt"
.LC200:
	.string	"unord"
.LC201:
	.string	"neq"
.LC202:
	.string	"nlt"
.LC203:
	.string	"nle"
.LC204:
	.string	"ord"
	.align 8
.LC205:
	.string	"operand is neither a constant nor a condition code, invalid operand code 'c'"
.LC206:
	.string	"ds ; "
.LC207:
	.string	"cs ; "
.LC208:
	.string	"invalid operand code `%c'"
.LC209:
	.string	"BYTE"
.LC210:
	.string	"WORD"
.LC211:
	.string	"DWORD"
.LC212:
	.string	"QWORD"
.LC213:
	.string	"XWORD"
.LC214:
	.string	"XMMWORD"
.LC215:
	.string	" PTR "
.LC216:
	.string	"0x%lx"
.LC217:
	.string	"OFFSET FLAT:"
	.text
	.globl	print_operand
	.type	print_operand, @function
print_operand:
.LFB97:
	.loc 1 5750 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$208, %rsp	#,
	movq	%rdi, -168(%rbp)	# file, file
	movq	%rsi, -176(%rbp)	# x, x
	movl	%edx, -180(%rbp)	# code, code
	.loc 1 5750 0
	movq	%fs:40, %rax	#, tmp323
	movq	%rax, -8(%rbp)	# tmp323, D.30140
	xorl	%eax, %eax	# tmp323
	.loc 1 5751 0
	cmpl	$0, -180(%rbp)	#, code
	je	.L1475	#,
	.loc 1 5753 0
	movl	-180(%rbp), %eax	# code, tmp162
	subl	$42, %eax	#, tmp161
	cmpl	$80, %eax	#, tmp161
	ja	.L1476	#,
	movl	%eax, %eax	# tmp161, tmp163
	movq	.L1478(,%rax,8), %rax	#, tmp164
	jmp	*%rax	# tmp164
	.section	.rodata
	.align 8
	.align 4
.L1478:
	.quad	.L1477
	.quad	.L1479
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1480
	.quad	.L1481
	.quad	.L1482
	.quad	.L1483
	.quad	.L1476
	.quad	.L1484
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1485
	.quad	.L1476
	.quad	.L1476
	.quad	.L1570
	.quad	.L1571
	.quad	.L1488
	.quad	.L1476
	.quad	.L1489
	.quad	.L1490
	.quad	.L1476
	.quad	.L1476
	.quad	.L1491
	.quad	.L1571
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1571
	.quad	.L1492
	.quad	.L1476
	.quad	.L1476
	.quad	.L1493
	.quad	.L1476
	.quad	.L1571
	.quad	.L1476
	.quad	.L1476
	.quad	.L1571
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1571
	.quad	.L1476
	.quad	.L1494
	.quad	.L1476
	.quad	.L1476
	.quad	.L1476
	.quad	.L1571
	.quad	.L1476
	.quad	.L1571
	.quad	.L1495
	.text
.L1477:
	.loc 1 5756 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.777
	testl	%eax, %eax	# ix86_asm_dialect.777
	jne	.L1496	#,
	.loc 1 5757 0
	movq	-168(%rbp), %rax	# file, tmp165
	movq	%rax, %rsi	# tmp165,
	movl	$42, %edi	#,
	call	_IO_putc	#
	.loc 1 5758 0
	jmp	.L1474	#
.L1496:
	jmp	.L1474	#
.L1480:
	.loc 1 5761 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.778
	testl	%eax, %eax	# ix86_asm_dialect.778
	jne	.L1498	#,
	.loc 1 5762 0
	movq	-168(%rbp), %rax	# file, tmp166
	movq	%rax, %rsi	# tmp166,
	movl	$42, %edi	#,
	call	_IO_putc	#
	jmp	.L1499	#
.L1498:
	.loc 1 5763 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.779
	cmpl	$1, %eax	#, ix86_asm_dialect.779
	jne	.L1500	#,
	.loc 1 5767 0
	movq	-176(%rbp), %rax	# x, tmp167
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$61, %ax	#, D.30127
	je	.L1499	#,
	.loc 1 5769 0
	movq	-168(%rbp), %rax	# file, tmp168
	movq	%rax, %rsi	# tmp168,
	movl	$91, %edi	#,
	call	_IO_putc	#
	.loc 1 5770 0
	movq	-176(%rbp), %rcx	# x, tmp169
	movq	-168(%rbp), %rax	# file, tmp170
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp169,
	movq	%rax, %rdi	# tmp170,
	call	print_operand	#
	.loc 1 5771 0
	movq	-168(%rbp), %rax	# file, tmp171
	movq	%rax, %rsi	# tmp171,
	movl	$93, %edi	#,
	call	_IO_putc	#
	.loc 1 5772 0
	jmp	.L1474	#
.L1500:
	.loc 1 5776 0
	movl	$__FUNCTION__.15624, %edx	#,
	movl	$5776, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1499:
	.loc 1 5778 0
	movq	-176(%rbp), %rcx	# x, tmp172
	movq	-168(%rbp), %rax	# file, tmp173
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp172,
	movq	%rax, %rdi	# tmp173,
	call	print_operand	#
	.loc 1 5779 0
	jmp	.L1474	#
.L1485:
	.loc 1 5783 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.780
	testl	%eax, %eax	# ix86_asm_dialect.780
	jne	.L1501	#,
	.loc 1 5784 0
	movq	-168(%rbp), %rax	# file, tmp174
	movq	%rax, %rsi	# tmp174,
	movl	$108, %edi	#,
	call	_IO_putc	#
	.loc 1 5785 0
	jmp	.L1474	#
.L1501:
	jmp	.L1474	#
.L1491:
	.loc 1 5788 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.781
	testl	%eax, %eax	# ix86_asm_dialect.781
	jne	.L1502	#,
	.loc 1 5789 0
	movq	-168(%rbp), %rax	# file, tmp175
	movq	%rax, %rsi	# tmp175,
	movl	$119, %edi	#,
	call	_IO_putc	#
	.loc 1 5790 0
	jmp	.L1474	#
.L1502:
	jmp	.L1474	#
.L1481:
	.loc 1 5793 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.782
	testl	%eax, %eax	# ix86_asm_dialect.782
	jne	.L1503	#,
	.loc 1 5794 0
	movq	-168(%rbp), %rax	# file, tmp176
	movq	%rax, %rsi	# tmp176,
	movl	$98, %edi	#,
	call	_IO_putc	#
	.loc 1 5795 0
	jmp	.L1474	#
.L1503:
	jmp	.L1474	#
.L1488:
	.loc 1 5798 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.783
	testl	%eax, %eax	# ix86_asm_dialect.783
	jne	.L1504	#,
	.loc 1 5799 0
	movq	-168(%rbp), %rax	# file, tmp177
	movq	%rax, %rsi	# tmp177,
	movl	$108, %edi	#,
	call	_IO_putc	#
	.loc 1 5800 0
	jmp	.L1474	#
.L1504:
	jmp	.L1474	#
.L1489:
	.loc 1 5803 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.784
	testl	%eax, %eax	# ix86_asm_dialect.784
	jne	.L1505	#,
	.loc 1 5804 0
	movq	-168(%rbp), %rax	# file, tmp178
	movq	%rax, %rsi	# tmp178,
	movl	$115, %edi	#,
	call	_IO_putc	#
	.loc 1 5805 0
	jmp	.L1474	#
.L1505:
	jmp	.L1474	#
.L1490:
	.loc 1 5808 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.785
	testl	%eax, %eax	# ix86_asm_dialect.785
	jne	.L1506	#,
	.loc 1 5809 0
	movq	-168(%rbp), %rax	# file, tmp179
	movq	%rax, %rsi	# tmp179,
	movl	$116, %edi	#,
	call	_IO_putc	#
	.loc 1 5810 0
	jmp	.L1474	#
.L1506:
	jmp	.L1474	#
.L1495:
	.loc 1 5815 0
	movq	-176(%rbp), %rax	# x, tmp180
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$61, %ax	#, D.30127
	jne	.L1507	#,
	.loc 1 5815 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# x, tmp181
	movl	8(%rax), %eax	# x_8(D)->fld[0].rtuint, D.30128
	cmpl	$7, %eax	#, D.30128
	jbe	.L1507	#,
	movq	-176(%rbp), %rax	# x, tmp182
	movl	8(%rax), %eax	# x_8(D)->fld[0].rtuint, D.30128
	cmpl	$15, %eax	#, D.30128
	ja	.L1507	#,
	.loc 1 5816 0 is_stmt 1
	jmp	.L1474	#
.L1507:
	.loc 1 5819 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.786
	cmpl	$1, %eax	#, ix86_asm_dialect.786
	jne	.L1508	#,
	.loc 1 5820 0
	jmp	.L1474	#
.L1508:
	.loc 1 5823 0
	movq	-176(%rbp), %rax	# x, tmp183
	movzbl	2(%rax), %eax	# x_8(D)->mode, D.30129
	movzbl	%al, %eax	# D.30129, D.30130
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30129
	movzbl	%al, %eax	# D.30129, D.30130
	cmpl	$16, %eax	#, D.30130
	ja	.L1509	#,
	movl	%eax, %eax	# D.30130, tmp185
	movq	.L1511(,%rax,8), %rax	#, tmp186
	jmp	*%rax	# tmp186
	.section	.rodata
	.align 8
	.align 4
.L1511:
	.quad	.L1509
	.quad	.L1509
	.quad	.L1510
	.quad	.L1509
	.quad	.L1512
	.quad	.L1509
	.quad	.L1509
	.quad	.L1509
	.quad	.L1513
	.quad	.L1509
	.quad	.L1509
	.quad	.L1509
	.quad	.L1514
	.quad	.L1509
	.quad	.L1509
	.quad	.L1509
	.quad	.L1514
	.text
.L1510:
	.loc 1 5827 0
	movq	-168(%rbp), %rax	# file, tmp187
	movq	%rax, %rsi	# tmp187,
	movl	$115, %edi	#,
	call	_IO_putc	#
	.loc 1 5829 0
	jmp	.L1474	#
.L1512:
	.loc 1 5832 0
	movq	-176(%rbp), %rax	# x, tmp188
	movzbl	2(%rax), %eax	# x_8(D)->mode, D.30129
	cmpb	$15, %al	#, D.30129
	jne	.L1515	#,
	.loc 1 5834 0
	movq	-168(%rbp), %rax	# file, tmp189
	movq	%rax, %rsi	# tmp189,
	movl	$115, %edi	#,
	call	_IO_putc	#
	.loc 1 5835 0
	jmp	.L1474	#
.L1515:
	.loc 1 5838 0
	movq	-168(%rbp), %rax	# file, tmp190
	movq	%rax, %rsi	# tmp190,
	movl	$108, %edi	#,
	call	_IO_putc	#
	.loc 1 5839 0
	jmp	.L1474	#
.L1514:
	.loc 1 5843 0
	movq	-168(%rbp), %rax	# file, tmp191
	movq	%rax, %rsi	# tmp191,
	movl	$116, %edi	#,
	call	_IO_putc	#
	.loc 1 5844 0
	jmp	.L1474	#
.L1513:
	.loc 1 5847 0
	movq	-176(%rbp), %rax	# x, tmp192
	movzbl	2(%rax), %eax	# x_8(D)->mode, D.30129
	movzbl	%al, %eax	# D.30129, D.30130
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30131
	cmpl	$1, %eax	#, D.30131
	jne	.L1516	#,
	.loc 1 5852 0
	movq	-168(%rbp), %rax	# file, tmp194
	movq	%rax, %rsi	# tmp194,
	movl	$108, %edi	#,
	call	_IO_putc	#
	.loc 1 5853 0
	movq	-168(%rbp), %rax	# file, tmp195
	movq	%rax, %rsi	# tmp195,
	movl	$108, %edi	#,
	call	_IO_putc	#
	.loc 1 5858 0
	jmp	.L1474	#
.L1516:
	.loc 1 5857 0
	movq	-168(%rbp), %rax	# file, tmp196
	movq	%rax, %rsi	# tmp196,
	movl	$108, %edi	#,
	call	_IO_putc	#
	.loc 1 5858 0
	jmp	.L1474	#
.L1509:
	.loc 1 5861 0
	movl	$__FUNCTION__.15624, %edx	#,
	movl	$5861, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1494:
	.loc 1 5875 0
	movq	-176(%rbp), %rax	# x, tmp197
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$54, %ax	#, D.30127
	jne	.L1518	#,
	.loc 1 5877 0
	movq	-176(%rbp), %rcx	# x, tmp198
	movq	-168(%rbp), %rax	# file, tmp199
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp198,
	movq	%rax, %rdi	# tmp199,
	call	print_operand	#
	.loc 1 5878 0
	movq	-168(%rbp), %rax	# file, tmp200
	movq	%rax, %rsi	# tmp200,
	movl	$44, %edi	#,
	call	_IO_putc	#
	.loc 1 5880 0
	jmp	.L1474	#
.L1518:
	jmp	.L1474	#
.L1483:
	.loc 1 5886 0
	movq	-176(%rbp), %rax	# x, tmp201
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	movzwl	%ax, %eax	# D.30127, D.30128
	subl	$102, %eax	#, tmp202
	cmpl	$17, %eax	#, tmp202
	ja	.L1519	#,
	movl	%eax, %eax	# tmp202, tmp203
	movq	.L1521(,%rax,8), %rax	#, tmp204
	jmp	*%rax	# tmp204
	.section	.rodata
	.align 8
	.align 4
.L1521:
	.quad	.L1520
	.quad	.L1522
	.quad	.L1523
	.quad	.L1524
	.quad	.L1525
	.quad	.L1526
	.quad	.L1519
	.quad	.L1519
	.quad	.L1519
	.quad	.L1519
	.quad	.L1527
	.quad	.L1528
	.quad	.L1522
	.quad	.L1523
	.quad	.L1524
	.quad	.L1525
	.quad	.L1526
	.quad	.L1520
	.text
.L1522:
	.loc 1 5890 0
	movq	-168(%rbp), %rax	# file, tmp205
	movq	%rax, %rcx	# tmp205,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC198, %edi	#,
	call	fwrite	#
	.loc 1 5891 0
	jmp	.L1529	#
.L1526:
	.loc 1 5894 0
	movq	-168(%rbp), %rax	# file, tmp206
	movq	%rax, %rcx	# tmp206,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC199, %edi	#,
	call	fwrite	#
	.loc 1 5895 0
	jmp	.L1529	#
.L1525:
	.loc 1 5898 0
	movq	-168(%rbp), %rax	# file, tmp207
	movq	%rax, %rcx	# tmp207,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC185, %edi	#,
	call	fwrite	#
	.loc 1 5899 0
	jmp	.L1529	#
.L1527:
	.loc 1 5901 0
	movq	-168(%rbp), %rax	# file, tmp208
	movq	%rax, %rcx	# tmp208,
	movl	$5, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC200, %edi	#,
	call	fwrite	#
	.loc 1 5902 0
	jmp	.L1529	#
.L1520:
	.loc 1 5905 0
	movq	-168(%rbp), %rax	# file, tmp209
	movq	%rax, %rcx	# tmp209,
	movl	$3, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC201, %edi	#,
	call	fwrite	#
	.loc 1 5906 0
	jmp	.L1529	#
.L1523:
	.loc 1 5909 0
	movq	-168(%rbp), %rax	# file, tmp210
	movq	%rax, %rcx	# tmp210,
	movl	$3, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC202, %edi	#,
	call	fwrite	#
	.loc 1 5910 0
	jmp	.L1529	#
.L1524:
	.loc 1 5913 0
	movq	-168(%rbp), %rax	# file, tmp211
	movq	%rax, %rcx	# tmp211,
	movl	$3, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC203, %edi	#,
	call	fwrite	#
	.loc 1 5914 0
	jmp	.L1529	#
.L1528:
	.loc 1 5916 0
	movq	-168(%rbp), %rax	# file, tmp212
	movq	%rax, %rcx	# tmp212,
	movl	$3, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC204, %edi	#,
	call	fwrite	#
	.loc 1 5917 0
	jmp	.L1529	#
.L1519:
	.loc 1 5919 0
	movl	$__FUNCTION__.15624, %edx	#,
	movl	$5919, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1529:
	.loc 1 5922 0
	jmp	.L1474	#
.L1482:
	.loc 1 5941 0
	movq	-176(%rbp), %rax	# x, tmp213
	movq	8(%rax), %rax	# x_8(D)->fld[0].rtx, D.30132
	movzbl	2(%rax), %eax	# _31->mode, D.30129
	movzbl	%al, %esi	# D.30129, D.30133
	movq	-176(%rbp), %rax	# x, tmp214
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	movzwl	%ax, %eax	# D.30127, D.30134
	movq	-168(%rbp), %rdx	# file, tmp215
	movq	%rdx, %r8	# tmp215,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	%eax, %edi	# D.30134,
	call	put_condition_code	#
	.loc 1 5942 0
	jmp	.L1474	#
.L1484:
	.loc 1 5948 0
	movq	-176(%rbp), %rax	# x, tmp216
	movq	8(%rax), %rax	# x_8(D)->fld[0].rtx, D.30132
	movzbl	2(%rax), %eax	# _36->mode, D.30129
	movzbl	%al, %esi	# D.30129, D.30133
	movq	-176(%rbp), %rax	# x, tmp217
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	movzwl	%ax, %eax	# D.30127, D.30134
	movq	-168(%rbp), %rdx	# file, tmp218
	movq	%rdx, %r8	# tmp218,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	%eax, %edi	# D.30134,
	call	put_condition_code	#
	.loc 1 5949 0
	jmp	.L1474	#
.L1492:
	.loc 1 5955 0
	movq	-176(%rbp), %rax	# x, tmp219
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	movzwl	%ax, %eax	# D.30127, D.30130
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30135
	cmpb	$60, %al	#, D.30135
	je	.L1530	#,
	.loc 1 5957 0
	movl	$.LC205, %edi	#,
	movl	$0, %eax	#,
	call	output_operand_lossage	#
	.loc 1 5958 0
	jmp	.L1474	#
.L1530:
	.loc 1 5960 0
	movq	-176(%rbp), %rax	# x, tmp221
	movq	8(%rax), %rax	# x_8(D)->fld[0].rtx, D.30132
	movzbl	2(%rax), %eax	# _44->mode, D.30129
	movzbl	%al, %esi	# D.30129, D.30133
	movq	-176(%rbp), %rax	# x, tmp222
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	movzwl	%ax, %eax	# D.30127, D.30134
	movq	-168(%rbp), %rdx	# file, tmp223
	movq	%rdx, %r8	# tmp223,
	movl	$0, %ecx	#,
	movl	$1, %edx	#,
	movl	%eax, %edi	# D.30134,
	call	put_condition_code	#
	.loc 1 5961 0
	jmp	.L1474	#
.L1493:
	.loc 1 5967 0
	movq	-176(%rbp), %rax	# x, tmp224
	movq	8(%rax), %rax	# x_8(D)->fld[0].rtx, D.30132
	movzbl	2(%rax), %eax	# _49->mode, D.30129
	movzbl	%al, %esi	# D.30129, D.30133
	movq	-176(%rbp), %rax	# x, tmp225
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	movzwl	%ax, %eax	# D.30127, D.30134
	movq	-168(%rbp), %rdx	# file, tmp226
	movq	%rdx, %r8	# tmp226,
	movl	$1, %ecx	#,
	movl	$1, %edx	#,
	movl	%eax, %edi	# D.30134,
	call	put_condition_code	#
	.loc 1 5968 0
	jmp	.L1474	#
.L1479:
.LBB52:
	.loc 1 5973 0
	movl	optimize(%rip), %eax	# optimize, optimize.787
	testl	%eax, %eax	# optimize.787
	je	.L1531	#,
	.loc 1 5973 0 is_stmt 0 discriminator 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.788
	testl	%eax, %eax	# optimize_size.788
	jne	.L1531	#,
	movl	$64, %edx	#, x86_branch_hints.789
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.790
	movl	%eax, %ecx	# ix86_cpu.791, tmp326
	sarl	%cl, %edx	# tmp326, D.30130
	movl	%edx, %eax	# D.30130, D.30130
	andl	$1, %eax	#, D.30130
	testl	%eax, %eax	# D.30130
	jne	.L1532	#,
.L1531:
	.loc 1 5974 0 is_stmt 1
	jmp	.L1474	#
.L1532:
	.loc 1 5976 0
	movq	current_output_insn(%rip), %rax	# current_output_insn, current_output_insn.792
	movl	$0, %edx	#,
	movl	$16, %esi	#,
	movq	%rax, %rdi	# current_output_insn.792,
	call	find_reg_note	#
	movq	%rax, -128(%rbp)	# tmp227, x
	.loc 1 5977 0
	cmpq	$0, -128(%rbp)	#, x
	je	.L1533	#,
.LBB53:
	.loc 1 5979 0
	movq	-128(%rbp), %rax	# x, tmp228
	movq	8(%rax), %rax	# x_62->fld[0].rtx, D.30132
	movq	8(%rax), %rax	# _63->fld[0].rtwint, D.30136
	movl	%eax, -148(%rbp)	# D.30136, pred_val
	.loc 1 5981 0
	cmpl	$4499, -148(%rbp)	#, pred_val
	jle	.L1534	#,
	.loc 1 5982 0
	cmpl	$5500, -148(%rbp)	#, pred_val
	jle	.L1533	#,
.L1534:
.LBB54:
	.loc 1 5984 0
	cmpl	$5000, -148(%rbp)	#, pred_val
	setg	%al	#, D.30137
	movzbl	%al, %eax	# D.30137, tmp229
	movl	%eax, -144(%rbp)	# tmp229, taken
	.loc 1 5985 0
	movq	current_output_insn(%rip), %rax	# current_output_insn, current_output_insn.793
	movq	%rax, %rdi	# current_output_insn.793,
	call	final_forward_branch_p	#
	testl	%eax, %eax	# D.30130
	sete	%al	#, D.30137
	movzbl	%al, %eax	# D.30137, tmp230
	movl	%eax, -140(%rbp)	# tmp230, cputaken
	.loc 1 5989 0
	movl	-144(%rbp), %eax	# taken, tmp231
	cmpl	-140(%rbp), %eax	# cputaken, tmp231
	je	.L1533	#,
	.loc 1 5993 0
	cmpl	$0, -144(%rbp)	#, taken
	je	.L1535	#,
	.loc 1 5994 0
	movq	-168(%rbp), %rax	# file, tmp232
	movq	%rax, %rcx	# tmp232,
	movl	$5, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC206, %edi	#,
	call	fwrite	#
	jmp	.L1533	#
.L1535:
	.loc 1 5996 0
	movq	-168(%rbp), %rax	# file, tmp233
	movq	%rax, %rcx	# tmp233,
	movl	$5, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC207, %edi	#,
	call	fwrite	#
.LBE54:
.LBE53:
	.loc 1 6000 0
	jmp	.L1474	#
.L1533:
	jmp	.L1474	#
.L1476:
.LBE52:
	.loc 1 6003 0
	movl	-180(%rbp), %eax	# code, tmp234
	movl	%eax, %esi	# tmp234,
	movl	$.LC208, %edi	#,
	movl	$0, %eax	#,
	call	output_operand_lossage	#
	jmp	.L1475	#
.L1571:
	.loc 1 5872 0
	nop
.L1475:
	.loc 1 6007 0
	movq	-176(%rbp), %rax	# x, tmp235
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$61, %ax	#, D.30127
	jne	.L1536	#,
	.loc 1 6009 0
	movq	-168(%rbp), %rdx	# file, tmp236
	movl	-180(%rbp), %ecx	# code, tmp237
	movq	-176(%rbp), %rax	# x, tmp238
	movl	%ecx, %esi	# tmp237,
	movq	%rax, %rdi	# tmp238,
	call	print_reg	#
	jmp	.L1474	#
.L1536:
	.loc 1 6012 0
	movq	-176(%rbp), %rax	# x, tmp239
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$66, %ax	#, D.30127
	jne	.L1537	#,
	.loc 1 6015 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.794
	cmpl	$1, %eax	#, ix86_asm_dialect.794
	jne	.L1538	#,
	.loc 1 6015 0 is_stmt 0 discriminator 1
	cmpl	$88, -180(%rbp)	#, code
	je	.L1538	#,
	cmpl	$80, -180(%rbp)	#, code
	je	.L1538	#,
.LBB55:
	.loc 1 6018 0 is_stmt 1
	movq	-176(%rbp), %rax	# x, tmp240
	movzbl	2(%rax), %eax	# x_8(D)->mode, D.30129
	movzbl	%al, %eax	# D.30129, D.30130
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30129
	movzbl	%al, %eax	# D.30129, D.30130
	cmpl	$16, %eax	#, D.30130
	ja	.L1539	#,
	movl	%eax, %eax	# D.30130, tmp242
	movq	.L1541(,%rax,8), %rax	#, tmp243
	jmp	*%rax	# tmp243
	.section	.rodata
	.align 8
	.align 4
.L1541:
	.quad	.L1539
	.quad	.L1540
	.quad	.L1542
	.quad	.L1539
	.quad	.L1543
	.quad	.L1539
	.quad	.L1539
	.quad	.L1539
	.quad	.L1544
	.quad	.L1539
	.quad	.L1539
	.quad	.L1539
	.quad	.L1545
	.quad	.L1539
	.quad	.L1539
	.quad	.L1539
	.quad	.L1546
	.text
.L1540:
	.loc 1 6020 0
	movq	$.LC209, -136(%rbp)	#, size
	jmp	.L1547	#
.L1542:
	.loc 1 6021 0
	movq	$.LC210, -136(%rbp)	#, size
	jmp	.L1547	#
.L1543:
	.loc 1 6022 0
	movq	$.LC211, -136(%rbp)	#, size
	jmp	.L1547	#
.L1544:
	.loc 1 6023 0
	movq	$.LC212, -136(%rbp)	#, size
	jmp	.L1547	#
.L1545:
	.loc 1 6024 0
	movq	$.LC213, -136(%rbp)	#, size
	jmp	.L1547	#
.L1546:
	.loc 1 6025 0
	movq	$.LC214, -136(%rbp)	#, size
	jmp	.L1547	#
.L1539:
	.loc 1 6027 0
	movl	$__FUNCTION__.15624, %edx	#,
	movl	$6027, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1547:
	.loc 1 6031 0
	cmpl	$98, -180(%rbp)	#, code
	jne	.L1548	#,
	.loc 1 6032 0
	movq	$.LC209, -136(%rbp)	#, size
	jmp	.L1549	#
.L1548:
	.loc 1 6033 0
	cmpl	$119, -180(%rbp)	#, code
	jne	.L1550	#,
	.loc 1 6034 0
	movq	$.LC210, -136(%rbp)	#, size
	jmp	.L1549	#
.L1550:
	.loc 1 6035 0
	cmpl	$107, -180(%rbp)	#, code
	jne	.L1549	#,
	.loc 1 6036 0
	movq	$.LC211, -136(%rbp)	#, size
.L1549:
	.loc 1 6038 0
	movq	-168(%rbp), %rdx	# file, tmp244
	movq	-136(%rbp), %rax	# size, tmp245
	movq	%rdx, %rsi	# tmp244,
	movq	%rax, %rdi	# tmp245,
	call	fputs	#
	.loc 1 6039 0
	movq	-168(%rbp), %rax	# file, tmp246
	movq	%rax, %rcx	# tmp246,
	movl	$5, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC215, %edi	#,
	call	fwrite	#
.L1538:
.LBE55:
	.loc 1 6042 0
	movq	-176(%rbp), %rax	# x, tmp247
	movq	8(%rax), %rax	# x_8(D)->fld[0].rtx, tmp248
	movq	%rax, -176(%rbp)	# tmp248, x
	.loc 1 6043 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.795
	testl	%eax, %eax	# flag_pic.795
	je	.L1551	#,
	.loc 1 6043 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# x, tmp249
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$67, %ax	#, D.30127
	je	.L1552	#,
	movq	-176(%rbp), %rax	# x, tmp250
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$68, %ax	#, D.30127
	je	.L1552	#,
	movq	-176(%rbp), %rax	# x, tmp251
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$54, %ax	#, D.30127
	je	.L1552	#,
	movq	-176(%rbp), %rax	# x, tmp252
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$58, %ax	#, D.30127
	je	.L1552	#,
	movq	-176(%rbp), %rax	# x, tmp253
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$55, %ax	#, D.30127
	jne	.L1551	#,
.L1552:
	.loc 1 6044 0 is_stmt 1
	movl	-180(%rbp), %edx	# code, tmp254
	movq	-176(%rbp), %rcx	# x, tmp255
	movq	-168(%rbp), %rax	# file, tmp256
	movq	%rcx, %rsi	# tmp255,
	movq	%rax, %rdi	# tmp256,
	call	output_pic_addr_const	#
	jmp	.L1553	#
.L1551:
	.loc 1 6046 0
	movq	-176(%rbp), %rax	# x, tmp257
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$67, %ax	#, D.30127
	je	.L1554	#,
	.loc 1 6046 0 is_stmt 0 discriminator 2
	movq	-176(%rbp), %rax	# x, tmp258
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$68, %ax	#, D.30127
	je	.L1554	#,
	.loc 1 6046 0 discriminator 1
	movq	-176(%rbp), %rax	# x, tmp259
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$54, %ax	#, D.30127
	je	.L1554	#,
	movq	-176(%rbp), %rax	# x, tmp260
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$58, %ax	#, D.30127
	je	.L1554	#,
	movq	-176(%rbp), %rax	# x, tmp261
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$55, %ax	#, D.30127
	jne	.L1555	#,
.L1554:
	cmpl	$80, -180(%rbp)	#, code
	jne	.L1555	#,
	.loc 1 6047 0 is_stmt 1
	movq	-176(%rbp), %rax	# x, tmp262
	movzwl	(%rax), %eax	# x_88->code, D.30127
	cmpw	$54, %ax	#, D.30127
	je	.L1555	#,
	.loc 1 6048 0
	movq	-176(%rbp), %rdx	# x, tmp263
	movq	-168(%rbp), %rax	# file, tmp264
	movq	%rdx, %rsi	# tmp263,
	movq	%rax, %rdi	# tmp264,
	call	output_addr_const	#
	jmp	.L1553	#
.L1555:
	.loc 1 6050 0
	movq	-176(%rbp), %rax	# x, tmp265
	movq	%rax, %rdi	# tmp265,
	call	output_address	#
	jmp	.L1474	#
.L1553:
	jmp	.L1474	#
.L1537:
	.loc 1 6053 0
	movq	-176(%rbp), %rax	# x, tmp266
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$55, %ax	#, D.30127
	jne	.L1556	#,
	.loc 1 6053 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# x, tmp267
	movzbl	2(%rax), %eax	# x_8(D)->mode, D.30129
	cmpb	$15, %al	#, D.30129
	jne	.L1556	#,
.LBB56:
.LBB57:
	.loc 1 6058 0 is_stmt 1
	movq	-176(%rbp), %rax	# x, tmp268
	leaq	16(%rax), %rcx	#, D.30138
	leaq	-80(%rbp), %rax	#, tmp269
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.30138,
	movq	%rax, %rdi	# tmp269,
	call	memcpy	#
	movq	-80(%rbp), %rax	# u.d, tmp270
	movq	%rax, -112(%rbp)	# tmp270, r
	movq	-72(%rbp), %rax	# u.d, tmp271
	movq	%rax, -104(%rbp)	# tmp271, r
	movq	-64(%rbp), %rax	# u.d, tmp272
	movq	%rax, -96(%rbp)	# tmp272, r
.LBE57:
	.loc 1 6059 0
	movq	-112(%rbp), %rax	# r, tmp273
	movq	%rax, (%rsp)	# tmp273,
	movq	-104(%rbp), %rax	# r, tmp274
	movq	%rax, 8(%rsp)	# tmp274,
	movq	-96(%rbp), %rax	# r, tmp275
	movq	%rax, 16(%rsp)	# tmp275,
	call	etarsingle	#
	movq	%rax, -120(%rbp)	# tmp276, l
	.loc 1 6061 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.796
	testl	%eax, %eax	# ix86_asm_dialect.796
	jne	.L1557	#,
	.loc 1 6062 0
	movq	-168(%rbp), %rax	# file, tmp277
	movq	%rax, %rsi	# tmp277,
	movl	$36, %edi	#,
	call	_IO_putc	#
.L1557:
	.loc 1 6063 0
	movq	-120(%rbp), %rdx	# l, tmp278
	movq	-168(%rbp), %rax	# file, tmp279
	movl	$.LC216, %esi	#,
	movq	%rax, %rdi	# tmp279,
	movl	$0, %eax	#,
	call	fprintf	#
.LBE56:
	.loc 1 6054 0
	jmp	.L1474	#
.L1556:
	.loc 1 6067 0
	movq	-176(%rbp), %rax	# x, tmp280
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$55, %ax	#, D.30127
	jne	.L1558	#,
	.loc 1 6067 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# x, tmp281
	movzbl	2(%rax), %eax	# x_8(D)->mode, D.30129
	cmpb	$16, %al	#, D.30129
	jne	.L1558	#,
.LBB58:
.LBB59:
	.loc 1 6072 0 is_stmt 1
	movq	-176(%rbp), %rax	# x, tmp282
	leaq	16(%rax), %rcx	#, D.30138
	leaq	-80(%rbp), %rax	#, tmp283
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.30138,
	movq	%rax, %rdi	# tmp283,
	call	memcpy	#
	movq	-80(%rbp), %rax	# u.d, tmp284
	movq	%rax, -112(%rbp)	# tmp284, r
	movq	-72(%rbp), %rax	# u.d, tmp285
	movq	%rax, -104(%rbp)	# tmp285, r
	movq	-64(%rbp), %rax	# u.d, tmp286
	movq	%rax, -96(%rbp)	# tmp286, r
.LBE59:
	.loc 1 6073 0
	leaq	-48(%rbp), %rax	#, tmp287
	movq	-112(%rbp), %rdx	# r, tmp288
	movq	%rdx, (%rsp)	# tmp288,
	movq	-104(%rbp), %rdx	# r, tmp289
	movq	%rdx, 8(%rsp)	# tmp289,
	movq	-96(%rbp), %rdx	# r, tmp290
	movq	%rdx, 16(%rsp)	# tmp290,
	movq	%rax, %rdi	# tmp287,
	call	ereal_to_decimal	#
	.loc 1 6074 0
	movq	-168(%rbp), %rdx	# file, tmp291
	leaq	-48(%rbp), %rax	#, tmp292
	movq	%rdx, %rsi	# tmp291,
	movq	%rax, %rdi	# tmp292,
	call	fputs	#
.LBE58:
	.loc 1 6068 0
	jmp	.L1474	#
.L1558:
	.loc 1 6077 0
	movq	-176(%rbp), %rax	# x, tmp293
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$55, %ax	#, D.30127
	jne	.L1559	#,
	.loc 1 6078 0
	movq	-176(%rbp), %rax	# x, tmp294
	movzbl	2(%rax), %eax	# x_8(D)->mode, D.30129
	cmpb	$17, %al	#, D.30129
	je	.L1560	#,
	.loc 1 6078 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# x, tmp295
	movzbl	2(%rax), %eax	# x_8(D)->mode, D.30129
	cmpb	$18, %al	#, D.30129
	jne	.L1559	#,
.L1560:
.LBB60:
.LBB61:
	.loc 1 6083 0 is_stmt 1
	movq	-176(%rbp), %rax	# x, tmp296
	leaq	16(%rax), %rcx	#, D.30138
	leaq	-80(%rbp), %rax	#, tmp297
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.30138,
	movq	%rax, %rdi	# tmp297,
	call	memcpy	#
	movq	-80(%rbp), %rax	# u.d, tmp298
	movq	%rax, -112(%rbp)	# tmp298, r
	movq	-72(%rbp), %rax	# u.d, tmp299
	movq	%rax, -104(%rbp)	# tmp299, r
	movq	-64(%rbp), %rax	# u.d, tmp300
	movq	%rax, -96(%rbp)	# tmp300, r
.LBE61:
	.loc 1 6084 0
	leaq	-48(%rbp), %rax	#, tmp301
	movq	-112(%rbp), %rdx	# r, tmp302
	movq	%rdx, (%rsp)	# tmp302,
	movq	-104(%rbp), %rdx	# r, tmp303
	movq	%rdx, 8(%rsp)	# tmp303,
	movq	-96(%rbp), %rdx	# r, tmp304
	movq	%rdx, 16(%rsp)	# tmp304,
	movq	%rax, %rdi	# tmp301,
	call	ereal_to_decimal	#
	.loc 1 6085 0
	movq	-168(%rbp), %rdx	# file, tmp305
	leaq	-48(%rbp), %rax	#, tmp306
	movq	%rdx, %rsi	# tmp305,
	movq	%rax, %rdi	# tmp306,
	call	fputs	#
.LBE60:
	.loc 1 6079 0
	jmp	.L1474	#
.L1559:
	.loc 1 6089 0
	cmpl	$80, -180(%rbp)	#, code
	je	.L1561	#,
	.loc 1 6091 0
	movq	-176(%rbp), %rax	# x, tmp307
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$54, %ax	#, D.30127
	je	.L1562	#,
	.loc 1 6091 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# x, tmp308
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$55, %ax	#, D.30127
	jne	.L1563	#,
.L1562:
	.loc 1 6093 0 is_stmt 1
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.797
	testl	%eax, %eax	# ix86_asm_dialect.797
	jne	.L1564	#,
	.loc 1 6094 0
	movq	-168(%rbp), %rax	# file, tmp309
	movq	%rax, %rsi	# tmp309,
	movl	$36, %edi	#,
	call	_IO_putc	#
	.loc 1 6093 0
	jmp	.L1561	#
.L1564:
	.loc 1 6093 0 is_stmt 0 discriminator 1
	jmp	.L1561	#
.L1563:
	.loc 1 6096 0 is_stmt 1
	movq	-176(%rbp), %rax	# x, tmp310
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$58, %ax	#, D.30127
	je	.L1565	#,
	.loc 1 6096 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# x, tmp311
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$68, %ax	#, D.30127
	je	.L1565	#,
	.loc 1 6097 0 is_stmt 1
	movq	-176(%rbp), %rax	# x, tmp312
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$67, %ax	#, D.30127
	jne	.L1561	#,
.L1565:
	.loc 1 6099 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.798
	testl	%eax, %eax	# ix86_asm_dialect.798
	jne	.L1566	#,
	.loc 1 6100 0
	movq	-168(%rbp), %rax	# file, tmp313
	movq	%rax, %rsi	# tmp313,
	movl	$36, %edi	#,
	call	_IO_putc	#
	jmp	.L1561	#
.L1566:
	.loc 1 6102 0
	movq	-168(%rbp), %rax	# file, tmp314
	movq	%rax, %rcx	# tmp314,
	movl	$12, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC217, %edi	#,
	call	fwrite	#
.L1561:
	.loc 1 6105 0
	movq	-176(%rbp), %rax	# x, tmp315
	movzwl	(%rax), %eax	# x_8(D)->code, D.30127
	cmpw	$54, %ax	#, D.30127
	jne	.L1567	#,
	.loc 1 6106 0
	movq	-176(%rbp), %rax	# x, tmp316
	movq	8(%rax), %rdx	# x_8(D)->fld[0].rtwint, D.30136
	movq	-168(%rbp), %rax	# file, tmp317
	movl	$.LC165, %esi	#,
	movq	%rax, %rdi	# tmp317,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L1474	#
.L1567:
	.loc 1 6107 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.799
	testl	%eax, %eax	# flag_pic.799
	je	.L1568	#,
	.loc 1 6108 0
	movl	-180(%rbp), %edx	# code, tmp318
	movq	-176(%rbp), %rcx	# x, tmp319
	movq	-168(%rbp), %rax	# file, tmp320
	movq	%rcx, %rsi	# tmp319,
	movq	%rax, %rdi	# tmp320,
	call	output_pic_addr_const	#
	jmp	.L1474	#
.L1568:
	.loc 1 6110 0
	movq	-176(%rbp), %rdx	# x, tmp321
	movq	-168(%rbp), %rax	# file, tmp322
	movq	%rdx, %rsi	# tmp321,
	movq	%rax, %rdi	# tmp322,
	call	output_addr_const	#
	jmp	.L1474	#
.L1570:
	.loc 1 5939 0
	nop
.L1474:
	.loc 1 6112 0
	movq	-8(%rbp), %rax	# D.30140, tmp324
	xorq	%fs:40, %rax	#, tmp324
	je	.L1569	#,
	call	__stack_chk_fail	#
.L1569:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE97:
	.size	print_operand, .-print_operand
	.section	.rodata
.LC218:
	.string	"ds:"
.LC219:
	.string	"(%rip)"
.LC220:
	.string	",%d"
.LC221:
	.string	"*%d"
	.text
	.globl	print_operand_address
	.type	print_operand_address, @function
print_operand_address:
.LFB98:
	.loc 1 6120 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# file, file
	movq	%rsi, %rbx	# addr, addr
	.loc 1 6125 0
	leaq	-48(%rbp), %rax	#, tmp88
	movq	%rax, %rsi	# tmp88,
	movq	%rbx, %rdi	# addr,
	call	ix86_decompose_address	#
	testl	%eax, %eax	# D.30162
	jne	.L1573	#,
	.loc 1 6126 0
	movl	$__FUNCTION__.15703, %edx	#,
	movl	$6126, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1573:
	.loc 1 6128 0
	movq	-48(%rbp), %rax	# parts.base, tmp89
	movq	%rax, -64(%rbp)	# tmp89, base
	.loc 1 6129 0
	movq	-40(%rbp), %rax	# parts.index, tmp90
	movq	%rax, -56(%rbp)	# tmp90, index
	.loc 1 6130 0
	movq	-32(%rbp), %rax	# parts.disp, tmp91
	movq	%rax, -80(%rbp)	# tmp91, disp
	.loc 1 6131 0
	movq	-24(%rbp), %rax	# parts.scale, D.30163
	movl	%eax, -84(%rbp)	# D.30163, scale
	.loc 1 6133 0
	cmpq	$0, -64(%rbp)	#, base
	jne	.L1574	#,
	.loc 1 6133 0 is_stmt 0 discriminator 1
	cmpq	$0, -56(%rbp)	#, index
	jne	.L1574	#,
	.loc 1 6137 0 is_stmt 1
	movq	-80(%rbp), %rax	# disp, tmp92
	movzwl	(%rax), %eax	# disp_8->code, D.30164
	cmpw	$54, %ax	#, D.30164
	jne	.L1575	#,
	.loc 1 6139 0
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.800
	cmpl	$1, %eax	#, ix86_asm_dialect.800
	jne	.L1576	#,
	.loc 1 6141 0
	movl	$0, %eax	#, D.30165
	testb	%al, %al	# D.30165
	jne	.L1577	#,
	.loc 1 6142 0
	movq	-104(%rbp), %rax	# file, tmp93
	movq	%rax, %rsi	# tmp93,
	movl	$37, %edi	#,
	call	_IO_putc	#
.L1577:
	.loc 1 6143 0
	movq	-104(%rbp), %rax	# file, tmp94
	movq	%rax, %rcx	# tmp94,
	movl	$3, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC218, %edi	#,
	call	fwrite	#
.L1576:
	.loc 1 6145 0
	movq	8(%rbx), %rdx	# addr_4(D)->fld[0].rtwint, D.30163
	movq	-104(%rbp), %rax	# file, tmp95
	movl	$.LC165, %esi	#,
	movq	%rax, %rdi	# tmp95,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L1578	#
.L1575:
	.loc 1 6147 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.801
	testl	%eax, %eax	# flag_pic.801
	je	.L1579	#,
	.loc 1 6148 0
	movq	-104(%rbp), %rax	# file, tmp96
	movl	$0, %edx	#,
	movq	%rbx, %rsi	# addr,
	movq	%rax, %rdi	# tmp96,
	call	output_pic_addr_const	#
	jmp	.L1578	#
.L1579:
	.loc 1 6150 0
	movq	-104(%rbp), %rax	# file, tmp97
	movq	%rbx, %rsi	# addr,
	movq	%rax, %rdi	# tmp97,
	call	output_addr_const	#
.L1578:
	.loc 1 6153 0
	movq	-80(%rbp), %rax	# disp, tmp98
	movzwl	(%rax), %eax	# disp_8->code, D.30164
	cmpw	$54, %ax	#, D.30164
	je	.L1580	#,
	.loc 1 6153 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.802
	andl	$33554432, %eax	#, D.30162
	testl	%eax, %eax	# D.30162
	je	.L1580	#,
	.loc 1 6154 0 is_stmt 1
	movq	-104(%rbp), %rax	# file, tmp99
	movq	%rax, %rcx	# tmp99,
	movl	$6, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC219, %edi	#,
	call	fwrite	#
	.loc 1 6153 0
	jmp	.L1572	#
.L1580:
	.loc 1 6153 0 is_stmt 0 discriminator 2
	jmp	.L1572	#
.L1574:
	.loc 1 6158 0 is_stmt 1
	movl	ix86_asm_dialect(%rip), %eax	# ix86_asm_dialect, ix86_asm_dialect.803
	testl	%eax, %eax	# ix86_asm_dialect.803
	jne	.L1582	#,
	.loc 1 6160 0
	cmpq	$0, -80(%rbp)	#, disp
	je	.L1583	#,
	.loc 1 6162 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.804
	testl	%eax, %eax	# flag_pic.804
	je	.L1584	#,
	.loc 1 6163 0
	movq	-80(%rbp), %rcx	# disp, tmp100
	movq	-104(%rbp), %rax	# file, tmp101
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp100,
	movq	%rax, %rdi	# tmp101,
	call	output_pic_addr_const	#
	jmp	.L1583	#
.L1584:
	.loc 1 6164 0
	movq	-80(%rbp), %rax	# disp, tmp102
	movzwl	(%rax), %eax	# disp_8->code, D.30164
	cmpw	$67, %ax	#, D.30164
	jne	.L1585	#,
	.loc 1 6165 0
	movq	-80(%rbp), %rax	# disp, tmp103
	movq	%rax, %rdi	# tmp103,
	call	output_asm_label	#
	jmp	.L1583	#
.L1585:
	.loc 1 6167 0
	movq	-80(%rbp), %rdx	# disp, tmp104
	movq	-104(%rbp), %rax	# file, tmp105
	movq	%rdx, %rsi	# tmp104,
	movq	%rax, %rdi	# tmp105,
	call	output_addr_const	#
.L1583:
	.loc 1 6170 0
	movq	-104(%rbp), %rax	# file, tmp106
	movq	%rax, %rsi	# tmp106,
	movl	$40, %edi	#,
	call	_IO_putc	#
	.loc 1 6171 0
	cmpq	$0, -64(%rbp)	#, base
	je	.L1586	#,
	.loc 1 6172 0
	movq	-104(%rbp), %rdx	# file, tmp107
	movq	-64(%rbp), %rax	# base, tmp108
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp108,
	call	print_reg	#
.L1586:
	.loc 1 6173 0
	cmpq	$0, -56(%rbp)	#, index
	je	.L1587	#,
	.loc 1 6175 0
	movq	-104(%rbp), %rax	# file, tmp109
	movq	%rax, %rsi	# tmp109,
	movl	$44, %edi	#,
	call	_IO_putc	#
	.loc 1 6176 0
	movq	-104(%rbp), %rdx	# file, tmp110
	movq	-56(%rbp), %rax	# index, tmp111
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp111,
	call	print_reg	#
	.loc 1 6177 0
	cmpl	$1, -84(%rbp)	#, scale
	je	.L1587	#,
	.loc 1 6178 0
	movl	-84(%rbp), %edx	# scale, tmp112
	movq	-104(%rbp), %rax	# file, tmp113
	movl	$.LC220, %esi	#,
	movq	%rax, %rdi	# tmp113,
	movl	$0, %eax	#,
	call	fprintf	#
.L1587:
	.loc 1 6180 0
	movq	-104(%rbp), %rax	# file, tmp114
	movq	%rax, %rsi	# tmp114,
	movl	$41, %edi	#,
	call	_IO_putc	#
	jmp	.L1572	#
.L1582:
.LBB62:
	.loc 1 6184 0
	movq	$0, -72(%rbp)	#, offset
	.loc 1 6186 0
	cmpq	$0, -80(%rbp)	#, disp
	je	.L1588	#,
	.loc 1 6189 0
	movq	-80(%rbp), %rax	# disp, tmp115
	movzwl	(%rax), %eax	# disp_8->code, D.30164
	cmpw	$58, %ax	#, D.30164
	jne	.L1589	#,
	.loc 1 6190 0
	movq	-80(%rbp), %rax	# disp, tmp116
	movq	8(%rax), %rax	# disp_8->fld[0].rtx, D.30166
	movzwl	(%rax), %eax	# _25->code, D.30164
	cmpw	$75, %ax	#, D.30164
	jne	.L1589	#,
	.loc 1 6191 0
	movq	-80(%rbp), %rax	# disp, tmp117
	movq	8(%rax), %rax	# disp_8->fld[0].rtx, D.30166
	movq	16(%rax), %rax	# _27->fld[1].rtx, D.30166
	movzwl	(%rax), %eax	# _28->code, D.30164
	cmpw	$54, %ax	#, D.30164
	jne	.L1589	#,
	.loc 1 6193 0
	movq	-80(%rbp), %rax	# disp, tmp118
	movq	8(%rax), %rax	# disp_8->fld[0].rtx, D.30166
	movq	16(%rax), %rax	# _30->fld[1].rtx, tmp119
	movq	%rax, -72(%rbp)	# tmp119, offset
	.loc 1 6194 0
	movq	-80(%rbp), %rax	# disp, tmp120
	movq	8(%rax), %rax	# disp_8->fld[0].rtx, D.30166
	movq	8(%rax), %rax	# _32->fld[0].rtx, D.30166
	movq	%rax, %rdx	# D.30166,
	movl	$0, %esi	#,
	movl	$58, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -80(%rbp)	# tmp121, disp
.L1589:
	.loc 1 6198 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.805
	testl	%eax, %eax	# flag_pic.805
	je	.L1590	#,
	.loc 1 6199 0
	movq	-80(%rbp), %rcx	# disp, tmp122
	movq	-104(%rbp), %rax	# file, tmp123
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp122,
	movq	%rax, %rdi	# tmp123,
	call	output_pic_addr_const	#
	jmp	.L1588	#
.L1590:
	.loc 1 6200 0
	movq	-80(%rbp), %rax	# disp, tmp124
	movzwl	(%rax), %eax	# disp_1->code, D.30164
	cmpw	$67, %ax	#, D.30164
	jne	.L1591	#,
	.loc 1 6201 0
	movq	-80(%rbp), %rax	# disp, tmp125
	movq	%rax, %rdi	# tmp125,
	call	output_asm_label	#
	jmp	.L1588	#
.L1591:
	.loc 1 6202 0
	movq	-80(%rbp), %rax	# disp, tmp126
	movzwl	(%rax), %eax	# disp_1->code, D.30164
	cmpw	$54, %ax	#, D.30164
	jne	.L1592	#,
	.loc 1 6203 0
	movq	-80(%rbp), %rax	# disp, tmp127
	movq	%rax, -72(%rbp)	# tmp127, offset
	jmp	.L1588	#
.L1592:
	.loc 1 6205 0
	movq	-80(%rbp), %rdx	# disp, tmp128
	movq	-104(%rbp), %rax	# file, tmp129
	movq	%rdx, %rsi	# tmp128,
	movq	%rax, %rdi	# tmp129,
	call	output_addr_const	#
.L1588:
	.loc 1 6208 0
	movq	-104(%rbp), %rax	# file, tmp130
	movq	%rax, %rsi	# tmp130,
	movl	$91, %edi	#,
	call	_IO_putc	#
	.loc 1 6209 0
	cmpq	$0, -64(%rbp)	#, base
	je	.L1593	#,
	.loc 1 6211 0
	movq	-104(%rbp), %rdx	# file, tmp131
	movq	-64(%rbp), %rax	# base, tmp132
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp132,
	call	print_reg	#
	.loc 1 6212 0
	cmpq	$0, -72(%rbp)	#, offset
	je	.L1596	#,
	.loc 1 6214 0
	movq	-72(%rbp), %rax	# offset, tmp133
	movq	8(%rax), %rax	# offset_3->fld[0].rtwint, D.30163
	testq	%rax, %rax	# D.30163
	js	.L1595	#,
	.loc 1 6215 0
	movq	-104(%rbp), %rax	# file, tmp134
	movq	%rax, %rsi	# tmp134,
	movl	$43, %edi	#,
	call	_IO_putc	#
.L1595:
	.loc 1 6216 0
	movq	-72(%rbp), %rax	# offset, tmp135
	movq	8(%rax), %rdx	# offset_3->fld[0].rtwint, D.30163
	movq	-104(%rbp), %rax	# file, tmp136
	movl	$.LC165, %esi	#,
	movq	%rax, %rdi	# tmp136,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L1596	#
.L1593:
	.loc 1 6219 0
	cmpq	$0, -72(%rbp)	#, offset
	je	.L1597	#,
	.loc 1 6220 0
	movq	-72(%rbp), %rax	# offset, tmp137
	movq	8(%rax), %rdx	# offset_3->fld[0].rtwint, D.30163
	movq	-104(%rbp), %rax	# file, tmp138
	movl	$.LC165, %esi	#,
	movq	%rax, %rdi	# tmp138,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L1596	#
.L1597:
	.loc 1 6222 0
	movq	-104(%rbp), %rax	# file, tmp139
	movq	%rax, %rsi	# tmp139,
	movl	$48, %edi	#,
	call	_IO_putc	#
.L1596:
	.loc 1 6224 0
	cmpq	$0, -56(%rbp)	#, index
	je	.L1598	#,
	.loc 1 6226 0
	movq	-104(%rbp), %rax	# file, tmp140
	movq	%rax, %rsi	# tmp140,
	movl	$43, %edi	#,
	call	_IO_putc	#
	.loc 1 6227 0
	movq	-104(%rbp), %rdx	# file, tmp141
	movq	-56(%rbp), %rax	# index, tmp142
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp142,
	call	print_reg	#
	.loc 1 6228 0
	cmpl	$1, -84(%rbp)	#, scale
	je	.L1598	#,
	.loc 1 6229 0
	movl	-84(%rbp), %edx	# scale, tmp143
	movq	-104(%rbp), %rax	# file, tmp144
	movl	$.LC221, %esi	#,
	movq	%rax, %rdi	# tmp144,
	movl	$0, %eax	#,
	call	fprintf	#
.L1598:
	.loc 1 6231 0
	movq	-104(%rbp), %rax	# file, tmp145
	movq	%rax, %rsi	# tmp145,
	movl	$93, %edi	#,
	call	_IO_putc	#
.L1572:
.LBE62:
	.loc 1 6234 0
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE98:
	.size	print_operand_address, .-print_operand_address
	.globl	split_di
	.type	split_di, @function
split_di:
.LFB99:
	.loc 1 6247 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# operands, operands
	movl	%esi, -44(%rbp)	# num, num
	movq	%rdx, -56(%rbp)	# lo_half, lo_half
	movq	%rcx, -64(%rbp)	# hi_half, hi_half
	.loc 1 6248 0
	jmp	.L1600	#
.L1606:
.LBB63:
	.loc 1 6250 0
	movl	-44(%rbp), %eax	# num, tmp86
	cltq
	leaq	0(,%rax,8), %rdx	#, D.30171
	movq	-40(%rbp), %rax	# operands, tmp87
	addq	%rdx, %rax	# D.30171, D.30172
	movq	(%rax), %rax	# *_10, tmp88
	movq	%rax, -24(%rbp)	# tmp88, op
	.loc 1 6254 0
	movq	-24(%rbp), %rax	# op, tmp89
	movzwl	(%rax), %eax	# op_11->code, D.30173
	cmpw	$66, %ax	#, D.30173
	jne	.L1601	#,
	.loc 1 6256 0
	movl	-44(%rbp), %eax	# num, tmp90
	cltq
	leaq	0(,%rax,8), %rdx	#, D.30171
	movq	-56(%rbp), %rax	# lo_half, tmp91
	leaq	(%rdx,%rax), %rbx	#, D.30172
	movq	-24(%rbp), %rax	# op, tmp92
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp92,
	call	adjust_address_1	#
	movq	%rax, (%rbx)	# D.30174, *_16
	.loc 1 6257 0
	movl	-44(%rbp), %eax	# num, tmp93
	cltq
	leaq	0(,%rax,8), %rdx	#, D.30171
	movq	-64(%rbp), %rax	# hi_half, tmp94
	leaq	(%rdx,%rax), %rbx	#, D.30172
	movq	-24(%rbp), %rax	# op, tmp95
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$4, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp95,
	call	adjust_address_1	#
	movq	%rax, (%rbx)	# D.30174, *_21
	jmp	.L1600	#
.L1601:
	.loc 1 6261 0
	movl	-44(%rbp), %eax	# num, tmp96
	cltq
	leaq	0(,%rax,8), %rdx	#, D.30171
	movq	-56(%rbp), %rax	# lo_half, tmp97
	leaq	(%rdx,%rax), %rbx	#, D.30172
	.loc 1 6262 0
	movq	-24(%rbp), %rax	# op, tmp98
	movzbl	2(%rax), %eax	# op_11->mode, D.30175
	.loc 1 6261 0
	testb	%al, %al	# D.30175
	je	.L1602	#,
	.loc 1 6263 0
	movq	-24(%rbp), %rax	# op, tmp99
	movzbl	2(%rax), %eax	# op_11->mode, D.30175
	.loc 1 6261 0
	movzbl	%al, %eax	# D.30175, iftmp.806
	jmp	.L1603	#
.L1602:
	.loc 1 6261 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.806
.L1603:
	.loc 1 6261 0 discriminator 2
	movq	-24(%rbp), %rsi	# op, tmp100
	movl	$0, %ecx	#,
	movl	%eax, %edx	# iftmp.806,
	movl	$4, %edi	#,
	call	simplify_gen_subreg	#
	movq	%rax, (%rbx)	# D.30174, *_25
	.loc 1 6264 0 is_stmt 1 discriminator 2
	movl	-44(%rbp), %eax	# num, tmp101
	cltq
	leaq	0(,%rax,8), %rdx	#, D.30171
	movq	-64(%rbp), %rax	# hi_half, tmp102
	leaq	(%rdx,%rax), %rbx	#, D.30172
	.loc 1 6265 0 discriminator 2
	movq	-24(%rbp), %rax	# op, tmp103
	movzbl	2(%rax), %eax	# op_11->mode, D.30175
	.loc 1 6264 0 discriminator 2
	testb	%al, %al	# D.30175
	je	.L1604	#,
	.loc 1 6266 0
	movq	-24(%rbp), %rax	# op, tmp104
	movzbl	2(%rax), %eax	# op_11->mode, D.30175
	.loc 1 6264 0
	movzbl	%al, %eax	# D.30175, iftmp.807
	jmp	.L1605	#
.L1604:
	.loc 1 6264 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.807
.L1605:
	.loc 1 6264 0 discriminator 2
	movq	-24(%rbp), %rsi	# op, tmp105
	movl	$4, %ecx	#,
	movl	%eax, %edx	# iftmp.807,
	movl	$4, %edi	#,
	call	simplify_gen_subreg	#
	movq	%rax, (%rbx)	# D.30174, *_33
.L1600:
.LBE63:
	.loc 1 6248 0 is_stmt 1 discriminator 1
	movl	-44(%rbp), %eax	# num, num.808
	leal	-1(%rax), %edx	#, tmp106
	movl	%edx, -44(%rbp)	# tmp106, num
	testl	%eax, %eax	# num.808
	jne	.L1606	#,
	.loc 1 6269 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE99:
	.size	split_di, .-split_di
	.globl	split_ti
	.type	split_ti, @function
split_ti:
.LFB100:
	.loc 1 6281 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# operands, operands
	movl	%esi, -44(%rbp)	# num, num
	movq	%rdx, -56(%rbp)	# lo_half, lo_half
	movq	%rcx, -64(%rbp)	# hi_half, hi_half
	.loc 1 6282 0
	jmp	.L1608	#
.L1610:
.LBB64:
	.loc 1 6284 0
	movl	-44(%rbp), %eax	# num, tmp80
	cltq
	leaq	0(,%rax,8), %rdx	#, D.30176
	movq	-40(%rbp), %rax	# operands, tmp81
	addq	%rdx, %rax	# D.30176, D.30177
	movq	(%rax), %rax	# *_8, tmp82
	movq	%rax, -24(%rbp)	# tmp82, op
	.loc 1 6288 0
	movq	-24(%rbp), %rax	# op, tmp83
	movzwl	(%rax), %eax	# op_9->code, D.30178
	cmpw	$66, %ax	#, D.30178
	jne	.L1609	#,
	.loc 1 6290 0
	movl	-44(%rbp), %eax	# num, tmp84
	cltq
	leaq	0(,%rax,8), %rdx	#, D.30176
	movq	-56(%rbp), %rax	# lo_half, tmp85
	leaq	(%rdx,%rax), %rbx	#, D.30177
	movq	-24(%rbp), %rax	# op, tmp86
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$5, %esi	#,
	movq	%rax, %rdi	# tmp86,
	call	adjust_address_1	#
	movq	%rax, (%rbx)	# D.30179, *_14
	.loc 1 6291 0
	movl	-44(%rbp), %eax	# num, tmp87
	cltq
	leaq	0(,%rax,8), %rdx	#, D.30176
	movq	-64(%rbp), %rax	# hi_half, tmp88
	leaq	(%rdx,%rax), %rbx	#, D.30177
	movq	-24(%rbp), %rax	# op, tmp89
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$8, %edx	#,
	movl	$5, %esi	#,
	movq	%rax, %rdi	# tmp89,
	call	adjust_address_1	#
	movq	%rax, (%rbx)	# D.30179, *_19
	jmp	.L1608	#
.L1609:
	.loc 1 6295 0
	movl	-44(%rbp), %eax	# num, tmp90
	cltq
	leaq	0(,%rax,8), %rdx	#, D.30176
	movq	-56(%rbp), %rax	# lo_half, tmp91
	leaq	(%rdx,%rax), %rbx	#, D.30177
	movq	-24(%rbp), %rax	# op, tmp92
	movl	$0, %ecx	#,
	movl	$6, %edx	#,
	movq	%rax, %rsi	# tmp92,
	movl	$5, %edi	#,
	call	simplify_gen_subreg	#
	movq	%rax, (%rbx)	# D.30179, *_23
	.loc 1 6296 0
	movl	-44(%rbp), %eax	# num, tmp93
	cltq
	leaq	0(,%rax,8), %rdx	#, D.30176
	movq	-64(%rbp), %rax	# hi_half, tmp94
	leaq	(%rdx,%rax), %rbx	#, D.30177
	movq	-24(%rbp), %rax	# op, tmp95
	movl	$8, %ecx	#,
	movl	$6, %edx	#,
	movq	%rax, %rsi	# tmp95,
	movl	$5, %edi	#,
	call	simplify_gen_subreg	#
	movq	%rax, (%rbx)	# D.30179, *_27
.L1608:
.LBE64:
	.loc 1 6282 0 discriminator 1
	movl	-44(%rbp), %eax	# num, num.809
	leal	-1(%rax), %edx	#, tmp96
	movl	%edx, -44(%rbp)	# tmp96, num
	testl	%eax, %eax	# num.809
	jne	.L1610	#,
	.loc 1 6299 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE100:
	.size	split_ti, .-split_ti
	.section	.rodata
.LC222:
	.string	"fiadd"
.LC223:
	.string	"fadd"
.LC224:
	.string	"add"
.LC225:
	.string	"fisub"
.LC226:
	.string	"fsub"
.LC227:
	.string	"sub"
.LC228:
	.string	"fimul"
.LC229:
	.string	"fmul"
.LC230:
	.string	"mul"
.LC231:
	.string	"fidiv"
.LC232:
	.string	"fdiv"
.LC233:
	.string	"div"
.LC234:
	.string	"%z2\t%2"
.LC235:
	.string	"p\t{%0, %2|%2, %0}"
.LC236:
	.string	"p\t{%2, %0|%0, %2}"
.LC237:
	.string	"\t{%y2, %0|%0, %y2}"
.LC238:
	.string	"\t{%2, %0|%0, %2}"
.LC239:
	.string	"r%z1\t%1"
.LC240:
	.string	"{p\t%0, %2|rp\t%2, %0}"
.LC241:
	.string	"{rp\t%2, %0|p\t%0, %2}"
.LC242:
	.string	"{rp\t%0, %1|p\t%1, %0}"
.LC243:
	.string	"{p\t%1, %0|rp\t%0, %1}"
.LC244:
	.string	"r\t{%y1, %0|%0, %y1}"
.LC245:
	.string	"{\t%1, %0|r\t%0, %1}"
.LC246:
	.string	"{r\t%2, %0|\t%0, %2}"
	.text
	.globl	output_387_binary_op
	.type	output_387_binary_op, @function
output_387_binary_op:
.LFB101:
	.loc 1 6322 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# insn, insn
	movq	%rsi, -64(%rbp)	# operands, operands
	.loc 1 6326 0
	movq	-64(%rbp), %rax	# operands, tmp226
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movzwl	(%rax), %eax	# _19->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1612	#,
	.loc 1 6326 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp227
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movl	8(%rax), %eax	# _21->fld[0].rtuint, D.30183
	cmpl	$20, %eax	#, D.30183
	jbe	.L1613	#,
	.loc 1 6326 0 discriminator 3
	movq	-64(%rbp), %rax	# operands, tmp228
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movl	8(%rax), %eax	# _23->fld[0].rtuint, D.30183
	cmpl	$28, %eax	#, D.30183
	jbe	.L1614	#,
.L1613:
	.loc 1 6326 0 discriminator 4
	movq	-64(%rbp), %rax	# operands, tmp229
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movl	8(%rax), %eax	# _25->fld[0].rtuint, D.30183
	cmpl	$44, %eax	#, D.30183
	jbe	.L1612	#,
	.loc 1 6326 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp230
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movl	8(%rax), %eax	# _27->fld[0].rtuint, D.30183
	cmpl	$52, %eax	#, D.30183
	ja	.L1612	#,
.L1614:
	movl	$1, %eax	#, iftmp.810
	jmp	.L1615	#
.L1612:
	.loc 1 6326 0 discriminator 2
	movl	$0, %eax	#, iftmp.810
.L1615:
	.loc 1 6326 0 discriminator 5
	movl	%eax, %edx	# iftmp.810, D.30184
	andl	$1, %edx	#, D.30184
	movq	-64(%rbp), %rax	# operands, tmp231
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_32, D.30181
	movzwl	(%rax), %eax	# _33->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1616	#,
	.loc 1 6326 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp232
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_35, D.30181
	movl	8(%rax), %eax	# _36->fld[0].rtuint, D.30183
	cmpl	$20, %eax	#, D.30183
	jbe	.L1617	#,
	.loc 1 6326 0 discriminator 3
	movq	-64(%rbp), %rax	# operands, tmp233
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_38, D.30181
	movl	8(%rax), %eax	# _39->fld[0].rtuint, D.30183
	cmpl	$28, %eax	#, D.30183
	jbe	.L1618	#,
.L1617:
	.loc 1 6326 0 discriminator 4
	movq	-64(%rbp), %rax	# operands, tmp234
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_41, D.30181
	movl	8(%rax), %eax	# _42->fld[0].rtuint, D.30183
	cmpl	$44, %eax	#, D.30183
	jbe	.L1616	#,
	.loc 1 6326 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp235
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_44, D.30181
	movl	8(%rax), %eax	# _45->fld[0].rtuint, D.30183
	cmpl	$52, %eax	#, D.30183
	ja	.L1616	#,
.L1618:
	movl	$1, %eax	#, iftmp.811
	jmp	.L1619	#
.L1616:
	.loc 1 6326 0 discriminator 2
	movl	$0, %eax	#, iftmp.811
.L1619:
	.loc 1 6326 0 discriminator 5
	andl	$1, %eax	#, D.30184
	orl	%edx, %eax	# D.30184, D.30184
	movzbl	%al, %edx	# D.30184, D.30186
	movq	-64(%rbp), %rax	# operands, tmp236
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_52, D.30181
	movzwl	(%rax), %eax	# _53->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1620	#,
	.loc 1 6326 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp237
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_55, D.30181
	movl	8(%rax), %eax	# _56->fld[0].rtuint, D.30183
	cmpl	$20, %eax	#, D.30183
	jbe	.L1621	#,
	.loc 1 6326 0 discriminator 3
	movq	-64(%rbp), %rax	# operands, tmp238
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_58, D.30181
	movl	8(%rax), %eax	# _59->fld[0].rtuint, D.30183
	cmpl	$28, %eax	#, D.30183
	jbe	.L1622	#,
.L1621:
	.loc 1 6326 0 discriminator 4
	movq	-64(%rbp), %rax	# operands, tmp239
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_61, D.30181
	movl	8(%rax), %eax	# _62->fld[0].rtuint, D.30183
	cmpl	$44, %eax	#, D.30183
	jbe	.L1620	#,
	.loc 1 6326 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp240
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_64, D.30181
	movl	8(%rax), %eax	# _65->fld[0].rtuint, D.30183
	cmpl	$52, %eax	#, D.30183
	ja	.L1620	#,
.L1622:
	movl	$1, %eax	#, iftmp.812
	jmp	.L1623	#
.L1620:
	.loc 1 6326 0 discriminator 2
	movl	$0, %eax	#, iftmp.812
.L1623:
	.loc 1 6326 0 discriminator 5
	orl	%edx, %eax	# D.30186, tmp241
	movl	%eax, -44(%rbp)	# tmp241, is_sse
	.loc 1 6344 0 is_stmt 1 discriminator 5
	movq	-64(%rbp), %rax	# operands, tmp242
	addq	$24, %rax	#, D.30185
	movq	(%rax), %rax	# *_70, D.30181
	movzwl	(%rax), %eax	# _71->code, D.30182
	movzwl	%ax, %eax	# D.30182, D.30183
	cmpl	$76, %eax	#, D.30183
	je	.L1625	#,
	cmpl	$76, %eax	#, D.30183
	ja	.L1626	#,
	cmpl	$75, %eax	#, D.30183
	je	.L1627	#,
	.loc 1 6344 0 is_stmt 0
	jmp	.L1624	#
.L1626:
	.loc 1 6344 0 discriminator 5
	cmpl	$78, %eax	#, D.30183
	je	.L1628	#,
	cmpl	$79, %eax	#, D.30183
	je	.L1629	#,
	.loc 1 6344 0
	jmp	.L1624	#
.L1627:
	.loc 1 6347 0 is_stmt 1
	movq	-64(%rbp), %rax	# operands, tmp243
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_74, D.30181
	movzbl	2(%rax), %eax	# _75->mode, D.30187
	movzbl	%al, %eax	# D.30187, D.30186
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30188
	cmpl	$1, %eax	#, D.30188
	je	.L1630	#,
	.loc 1 6348 0
	movq	-64(%rbp), %rax	# operands, tmp245
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_79, D.30181
	movzbl	2(%rax), %eax	# _80->mode, D.30187
	movzbl	%al, %eax	# D.30187, D.30186
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30188
	cmpl	$1, %eax	#, D.30188
	jne	.L1631	#,
.L1630:
	.loc 1 6349 0
	movq	$.LC222, -40(%rbp)	#, p
	jmp	.L1632	#
.L1631:
	.loc 1 6351 0
	movq	$.LC223, -40(%rbp)	#, p
.L1632:
	.loc 1 6352 0
	movq	$.LC224, -32(%rbp)	#, ssep
	.loc 1 6353 0
	jmp	.L1633	#
.L1625:
	.loc 1 6356 0
	movq	-64(%rbp), %rax	# operands, tmp247
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_87, D.30181
	movzbl	2(%rax), %eax	# _88->mode, D.30187
	movzbl	%al, %eax	# D.30187, D.30186
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30188
	cmpl	$1, %eax	#, D.30188
	je	.L1634	#,
	.loc 1 6357 0
	movq	-64(%rbp), %rax	# operands, tmp249
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_92, D.30181
	movzbl	2(%rax), %eax	# _93->mode, D.30187
	movzbl	%al, %eax	# D.30187, D.30186
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30188
	cmpl	$1, %eax	#, D.30188
	jne	.L1635	#,
.L1634:
	.loc 1 6358 0
	movq	$.LC225, -40(%rbp)	#, p
	jmp	.L1636	#
.L1635:
	.loc 1 6360 0
	movq	$.LC226, -40(%rbp)	#, p
.L1636:
	.loc 1 6361 0
	movq	$.LC227, -32(%rbp)	#, ssep
	.loc 1 6362 0
	jmp	.L1633	#
.L1628:
	.loc 1 6365 0
	movq	-64(%rbp), %rax	# operands, tmp251
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_100, D.30181
	movzbl	2(%rax), %eax	# _101->mode, D.30187
	movzbl	%al, %eax	# D.30187, D.30186
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30188
	cmpl	$1, %eax	#, D.30188
	je	.L1637	#,
	.loc 1 6366 0
	movq	-64(%rbp), %rax	# operands, tmp253
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_105, D.30181
	movzbl	2(%rax), %eax	# _106->mode, D.30187
	movzbl	%al, %eax	# D.30187, D.30186
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30188
	cmpl	$1, %eax	#, D.30188
	jne	.L1638	#,
.L1637:
	.loc 1 6367 0
	movq	$.LC228, -40(%rbp)	#, p
	jmp	.L1639	#
.L1638:
	.loc 1 6369 0
	movq	$.LC229, -40(%rbp)	#, p
.L1639:
	.loc 1 6370 0
	movq	$.LC230, -32(%rbp)	#, ssep
	.loc 1 6371 0
	jmp	.L1633	#
.L1629:
	.loc 1 6374 0
	movq	-64(%rbp), %rax	# operands, tmp255
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_113, D.30181
	movzbl	2(%rax), %eax	# _114->mode, D.30187
	movzbl	%al, %eax	# D.30187, D.30186
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30188
	cmpl	$1, %eax	#, D.30188
	je	.L1640	#,
	.loc 1 6375 0
	movq	-64(%rbp), %rax	# operands, tmp257
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_118, D.30181
	movzbl	2(%rax), %eax	# _119->mode, D.30187
	movzbl	%al, %eax	# D.30187, D.30186
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30188
	cmpl	$1, %eax	#, D.30188
	jne	.L1641	#,
.L1640:
	.loc 1 6376 0
	movq	$.LC231, -40(%rbp)	#, p
	jmp	.L1642	#
.L1641:
	.loc 1 6378 0
	movq	$.LC232, -40(%rbp)	#, p
.L1642:
	.loc 1 6379 0
	movq	$.LC233, -32(%rbp)	#, ssep
	.loc 1 6380 0
	jmp	.L1633	#
.L1624:
	.loc 1 6383 0
	movl	$__FUNCTION__.15739, %edx	#,
	movl	$6383, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1633:
	.loc 1 6386 0
	cmpl	$0, -44(%rbp)	#, is_sse
	je	.L1643	#,
	.loc 1 6388 0
	movq	-32(%rbp), %rax	# ssep, tmp259
	movq	%rax, %rsi	# tmp259,
	movl	$buf.15729, %edi	#,
	call	strcpy	#
	.loc 1 6389 0
	movq	-64(%rbp), %rax	# operands, tmp260
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movzbl	2(%rax), %eax	# _126->mode, D.30187
	cmpb	$15, %al	#, D.30187
	jne	.L1644	#,
	.loc 1 6390 0
	movl	$buf.15729, %eax	#, tmp261
	movq	$-1, %rcx	#, tmp265
	movq	%rax, %rdx	# tmp261, tmp264
	movl	$0, %eax	#, tmp266
	movq	%rdx, %rdi	# tmp264, tmp264
	repnz scasb
	movq	%rcx, %rax	# tmp262, tmp262
	notq	%rax	# tmp263
	subq	$1, %rax	#, D.30189
	addq	$buf.15729, %rax	#, D.30190
	movabsq	$2318283044748358515, %rbx	#, tmp311
	movq	%rbx, (%rax)	# tmp311, MEM[(void *)_129]
	movabsq	$2675186763957022757, %rbx	#, tmp312
	movq	%rbx, 8(%rax)	# tmp312, MEM[(void *)_129]
	movw	$32050, 16(%rax)	#, MEM[(void *)_129]
	movb	$0, 18(%rax)	#, MEM[(void *)_129]
	jmp	.L1645	#
.L1644:
	.loc 1 6392 0
	movl	$buf.15729, %eax	#, tmp267
	movq	$-1, %rcx	#, tmp271
	movq	%rax, %rdx	# tmp267, tmp270
	movl	$0, %eax	#, tmp272
	movq	%rdx, %rdi	# tmp270, tmp270
	repnz scasb
	movq	%rcx, %rax	# tmp268, tmp268
	notq	%rax	# tmp269
	subq	$1, %rax	#, D.30189
	addq	$buf.15729, %rax	#, D.30190
	movabsq	$2318283044748354675, %rbx	#, tmp315
	movq	%rbx, (%rax)	# tmp315, MEM[(void *)_131]
	movabsq	$2675186763957022757, %rbx	#, tmp316
	movq	%rbx, 8(%rax)	# tmp316, MEM[(void *)_131]
	movw	$32050, 16(%rax)	#, MEM[(void *)_131]
	movb	$0, 18(%rax)	#, MEM[(void *)_131]
.L1645:
	.loc 1 6393 0
	movl	$buf.15729, %eax	#, D.30180
	jmp	.L1646	#
.L1643:
	.loc 1 6395 0
	movq	-40(%rbp), %rax	# p, tmp273
	movq	%rax, %rsi	# tmp273,
	movl	$buf.15729, %edi	#,
	call	strcpy	#
	.loc 1 6397 0
	movq	-64(%rbp), %rax	# operands, tmp274
	addq	$24, %rax	#, D.30185
	movq	(%rax), %rax	# *_133, D.30181
	movzwl	(%rax), %eax	# _134->code, D.30182
	movzwl	%ax, %eax	# D.30182, D.30183
	cmpl	$76, %eax	#, D.30183
	je	.L1648	#,
	cmpl	$76, %eax	#, D.30183
	ja	.L1649	#,
	cmpl	$75, %eax	#, D.30183
	je	.L1650	#,
	jmp	.L1647	#
.L1649:
	cmpl	$78, %eax	#, D.30183
	je	.L1650	#,
	cmpl	$79, %eax	#, D.30183
	je	.L1648	#,
	jmp	.L1647	#
.L1650:
	.loc 1 6401 0
	movq	-64(%rbp), %rax	# operands, tmp275
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_137, D.30181
	movzwl	(%rax), %eax	# _138->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1651	#,
	.loc 1 6401 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp276
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movl	8(%rax), %edx	# _140->fld[0].rtuint, D.30183
	movq	-64(%rbp), %rax	# operands, tmp277
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_142, D.30181
	movl	8(%rax), %eax	# _143->fld[0].rtuint, D.30183
	cmpl	%eax, %edx	# D.30183, D.30183
	jne	.L1651	#,
.LBB65:
	.loc 1 6403 0 is_stmt 1
	movq	-64(%rbp), %rax	# operands, tmp278
	movq	16(%rax), %rax	# MEM[(struct rtx_def * *)operands_18(D) + 16B], tmp279
	movq	%rax, -24(%rbp)	# tmp279, temp
	.loc 1 6404 0
	movq	-64(%rbp), %rax	# operands, tmp280
	leaq	16(%rax), %rdx	#, D.30185
	movq	-64(%rbp), %rax	# operands, tmp281
	movq	8(%rax), %rax	# MEM[(struct rtx_def * *)operands_18(D) + 8B], D.30181
	movq	%rax, (%rdx)	# D.30181, *_146
	.loc 1 6405 0
	movq	-64(%rbp), %rax	# operands, tmp282
	leaq	8(%rax), %rdx	#, D.30185
	movq	-24(%rbp), %rax	# temp, tmp283
	movq	%rax, (%rdx)	# tmp283, *_148
.L1651:
.LBE65:
	.loc 1 6410 0
	movq	-64(%rbp), %rax	# operands, tmp284
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_149, D.30181
	movzwl	(%rax), %eax	# _150->code, D.30182
	cmpw	$66, %ax	#, D.30182
	jne	.L1652	#,
	.loc 1 6412 0
	movq	$.LC234, -40(%rbp)	#, p
	.loc 1 6413 0
	jmp	.L1653	#
.L1652:
	.loc 1 6416 0
	movq	-64(%rbp), %rax	# operands, tmp285
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_153, D.30181
	movl	8(%rax), %edx	# _154->fld[0].rtuint, D.30183
	movq	-56(%rbp), %rax	# insn, tmp286
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp286,
	call	find_regno_note	#
	testq	%rax, %rax	# D.30181
	je	.L1654	#,
	.loc 1 6418 0
	movq	-64(%rbp), %rax	# operands, tmp287
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movzwl	(%rax), %eax	# _158->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1655	#,
	.loc 1 6418 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp288
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movl	8(%rax), %eax	# _160->fld[0].rtuint, D.30183
	cmpl	$8, %eax	#, D.30183
	jne	.L1655	#,
	.loc 1 6426 0 is_stmt 1
	movq	$.LC235, -40(%rbp)	#, p
	.loc 1 6429 0
	jmp	.L1653	#
.L1655:
	.loc 1 6428 0
	movq	$.LC236, -40(%rbp)	#, p
	.loc 1 6429 0
	jmp	.L1653	#
.L1654:
	.loc 1 6432 0
	movq	-64(%rbp), %rax	# operands, tmp289
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movzwl	(%rax), %eax	# _164->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1657	#,
	.loc 1 6432 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp290
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movl	8(%rax), %eax	# _166->fld[0].rtuint, D.30183
	cmpl	$8, %eax	#, D.30183
	jne	.L1657	#,
	.loc 1 6433 0 is_stmt 1
	movq	$.LC237, -40(%rbp)	#, p
	.loc 1 6436 0
	jmp	.L1653	#
.L1657:
	.loc 1 6435 0
	movq	$.LC238, -40(%rbp)	#, p
	.loc 1 6436 0
	jmp	.L1653	#
.L1648:
	.loc 1 6440 0
	movq	-64(%rbp), %rax	# operands, tmp291
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_170, D.30181
	movzwl	(%rax), %eax	# _171->code, D.30182
	cmpw	$66, %ax	#, D.30182
	jne	.L1659	#,
	.loc 1 6442 0
	movq	$.LC239, -40(%rbp)	#, p
	.loc 1 6443 0
	jmp	.L1653	#
.L1659:
	.loc 1 6446 0
	movq	-64(%rbp), %rax	# operands, tmp292
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_174, D.30181
	movzwl	(%rax), %eax	# _175->code, D.30182
	cmpw	$66, %ax	#, D.30182
	jne	.L1660	#,
	.loc 1 6448 0
	movq	$.LC234, -40(%rbp)	#, p
	.loc 1 6449 0
	jmp	.L1653	#
.L1660:
	.loc 1 6452 0
	movq	-64(%rbp), %rax	# operands, tmp293
	addq	$16, %rax	#, D.30185
	movq	(%rax), %rax	# *_178, D.30181
	movl	8(%rax), %edx	# _179->fld[0].rtuint, D.30183
	movq	-56(%rbp), %rax	# insn, tmp294
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp294,
	call	find_regno_note	#
	testq	%rax, %rax	# D.30181
	je	.L1661	#,
	.loc 1 6461 0
	movq	-64(%rbp), %rax	# operands, tmp295
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movzwl	(%rax), %eax	# _182->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1662	#,
	.loc 1 6461 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp296
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movl	8(%rax), %eax	# _184->fld[0].rtuint, D.30183
	cmpl	$8, %eax	#, D.30183
	jne	.L1662	#,
	.loc 1 6462 0 is_stmt 1
	movq	$.LC240, -40(%rbp)	#, p
	.loc 1 6472 0
	jmp	.L1653	#
.L1662:
	.loc 1 6464 0
	movq	$.LC241, -40(%rbp)	#, p
	.loc 1 6472 0
	jmp	.L1653	#
.L1661:
	.loc 1 6475 0
	movq	-64(%rbp), %rax	# operands, tmp297
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_188, D.30181
	movl	8(%rax), %edx	# _189->fld[0].rtuint, D.30183
	movq	-56(%rbp), %rax	# insn, tmp298
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp298,
	call	find_regno_note	#
	testq	%rax, %rax	# D.30181
	je	.L1664	#,
	.loc 1 6478 0
	movq	-64(%rbp), %rax	# operands, tmp299
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movzwl	(%rax), %eax	# _192->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1665	#,
	.loc 1 6478 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp300
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movl	8(%rax), %eax	# _194->fld[0].rtuint, D.30183
	cmpl	$8, %eax	#, D.30183
	jne	.L1665	#,
	.loc 1 6479 0 is_stmt 1
	movq	$.LC242, -40(%rbp)	#, p
	.loc 1 6488 0
	jmp	.L1653	#
.L1665:
	.loc 1 6481 0
	movq	$.LC243, -40(%rbp)	#, p
	.loc 1 6488 0
	jmp	.L1653	#
.L1664:
	.loc 1 6491 0
	movq	-64(%rbp), %rax	# operands, tmp301
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movzwl	(%rax), %eax	# _198->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1667	#,
	.loc 1 6491 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp302
	movq	(%rax), %rax	# *operands_18(D), D.30181
	movl	8(%rax), %eax	# _200->fld[0].rtuint, D.30183
	cmpl	$8, %eax	#, D.30183
	jne	.L1667	#,
	.loc 1 6493 0 is_stmt 1
	movq	-64(%rbp), %rax	# operands, tmp303
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_202, D.30181
	movzwl	(%rax), %eax	# _203->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1668	#,
	.loc 1 6493 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp304
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_205, D.30181
	movl	8(%rax), %eax	# _206->fld[0].rtuint, D.30183
	cmpl	$8, %eax	#, D.30183
	jne	.L1668	#,
	.loc 1 6494 0 is_stmt 1
	movq	$.LC237, -40(%rbp)	#, p
	.loc 1 6497 0
	jmp	.L1653	#
.L1668:
	.loc 1 6496 0
	movq	$.LC244, -40(%rbp)	#, p
	.loc 1 6497 0
	jmp	.L1653	#
.L1667:
	.loc 1 6499 0
	movq	-64(%rbp), %rax	# operands, tmp305
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_210, D.30181
	movzwl	(%rax), %eax	# _211->code, D.30182
	cmpw	$61, %ax	#, D.30182
	jne	.L1670	#,
	.loc 1 6499 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp306
	addq	$8, %rax	#, D.30185
	movq	(%rax), %rax	# *_213, D.30181
	movl	8(%rax), %eax	# _214->fld[0].rtuint, D.30183
	cmpl	$8, %eax	#, D.30183
	jne	.L1670	#,
	.loc 1 6502 0 is_stmt 1
	movq	$.LC245, -40(%rbp)	#, p
	.loc 1 6515 0
	jmp	.L1653	#
.L1670:
	.loc 1 6510 0
	movq	$.LC246, -40(%rbp)	#, p
	.loc 1 6515 0
	jmp	.L1653	#
.L1647:
	.loc 1 6518 0
	movl	$__FUNCTION__.15739, %edx	#,
	movl	$6518, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1653:
	.loc 1 6521 0
	movq	-40(%rbp), %rax	# p, tmp307
	movq	%rax, %rsi	# tmp307,
	movl	$buf.15729, %edi	#,
	call	strcat	#
	.loc 1 6522 0
	movl	$buf.15729, %eax	#, D.30180
.L1646:
	.loc 1 6523 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE101:
	.size	output_387_binary_op, .-output_387_binary_op
	.globl	emit_i387_cw_initialization
	.type	emit_i387_cw_initialization, @function
emit_i387_cw_initialization:
.LFB102:
	.loc 1 6531 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# normal, normal
	movq	%rsi, -32(%rbp)	# round_down, round_down
	.loc 1 6532 0
	movl	$3, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -8(%rbp)	# tmp72, reg
	.loc 1 6534 0
	movq	-24(%rbp), %rax	# normal, tmp73
	movq	%rax, %rdi	# tmp73,
	call	gen_x86_fnstcw_1	#
	movq	%rax, %rdi	# D.30218,
	call	emit_insn	#
	.loc 1 6535 0
	movq	-24(%rbp), %rdx	# normal, tmp74
	movq	-8(%rbp), %rax	# reg, tmp75
	movq	%rdx, %rsi	# tmp74,
	movq	%rax, %rdi	# tmp75,
	call	emit_move_insn	#
	.loc 1 6536 0
	movl	$8, %edx	#, x86_partial_reg_stall.813
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.814
	movl	%eax, %ecx	# ix86_cpu.815, tmp82
	sarl	%cl, %edx	# tmp82, D.30219
	movl	%edx, %eax	# D.30219, D.30219
	andl	$1, %eax	#, D.30219
	testl	%eax, %eax	# D.30219
	jne	.L1673	#,
	.loc 1 6536 0 is_stmt 0 discriminator 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.816
	testl	%eax, %eax	# optimize_size.816
	jne	.L1673	#,
	.loc 1 6537 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.817
	andl	$33554432, %eax	#, D.30219
	testl	%eax, %eax	# D.30219
	jne	.L1673	#,
	.loc 1 6538 0
	movl	$12, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30218
	movq	-8(%rbp), %rax	# reg, tmp76
	movq	%rdx, %rsi	# D.30218,
	movq	%rax, %rdi	# tmp76,
	call	gen_movsi_insv_1	#
	movq	%rax, %rdi	# D.30218,
	call	emit_insn	#
	jmp	.L1674	#
.L1673:
	.loc 1 6540 0
	movl	$3072, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30218
	movq	-8(%rbp), %rcx	# reg, tmp77
	movq	-8(%rbp), %rax	# reg, tmp78
	movq	%rcx, %rsi	# tmp77,
	movq	%rax, %rdi	# tmp78,
	call	gen_iorhi3	#
	movq	%rax, %rdi	# D.30218,
	call	emit_insn	#
.L1674:
	.loc 1 6541 0
	movq	-8(%rbp), %rdx	# reg, tmp79
	movq	-32(%rbp), %rax	# round_down, tmp80
	movq	%rdx, %rsi	# tmp79,
	movq	%rax, %rdi	# tmp80,
	call	emit_move_insn	#
	.loc 1 6542 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE102:
	.size	emit_i387_cw_initialization, .-emit_i387_cw_initialization
	.section	.rodata
.LC247:
	.string	"fld\t%y1"
.LC248:
	.string	"fldcw\t%3"
.LC249:
	.string	"fistp%z0\t%0"
.LC250:
	.string	"fist%z0\t%0"
.LC251:
	.string	"fldcw\t%2"
	.text
	.globl	output_fix_trunc
	.type	output_fix_trunc, @function
output_fix_trunc:
.LFB103:
	.loc 1 6552 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	movq	%rsi, -32(%rbp)	# operands, operands
	.loc 1 6553 0
	movq	-24(%rbp), %rax	# insn, tmp74
	movl	$8, %edx	#,
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp74,
	call	find_regno_note	#
	testq	%rax, %rax	# D.30220
	setne	%al	#, D.30221
	movzbl	%al, %eax	# D.30221, tmp75
	movl	%eax, -8(%rbp)	# tmp75, stack_top_dies
	.loc 1 6554 0
	movq	-32(%rbp), %rax	# operands, tmp76
	movq	(%rax), %rax	# *operands_5(D), D.30220
	movzbl	2(%rax), %eax	# _6->mode, D.30222
	cmpb	$5, %al	#, D.30222
	sete	%al	#, D.30221
	movzbl	%al, %eax	# D.30221, tmp77
	movl	%eax, -4(%rbp)	# tmp77, dimode_p
	.loc 1 6559 0
	cmpl	$0, -4(%rbp)	#, dimode_p
	je	.L1676	#,
	.loc 1 6559 0 is_stmt 0 discriminator 1
	cmpl	$0, -8(%rbp)	#, stack_top_dies
	jne	.L1676	#,
	.loc 1 6560 0 is_stmt 1
	movq	-32(%rbp), %rax	# operands, tmp78
	movq	%rax, %rsi	# tmp78,
	movl	$.LC247, %edi	#,
	call	output_asm_insn	#
.L1676:
	.loc 1 6562 0
	movq	-32(%rbp), %rax	# operands, tmp79
	addq	$8, %rax	#, D.30223
	movq	(%rax), %rax	# *_10, D.30220
	movzwl	(%rax), %eax	# _11->code, D.30224
	cmpw	$61, %ax	#, D.30224
	jne	.L1677	#,
	.loc 1 6562 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# operands, tmp80
	addq	$8, %rax	#, D.30223
	movq	(%rax), %rax	# *_13, D.30220
	movl	8(%rax), %eax	# _14->fld[0].rtuint, D.30225
	cmpl	$8, %eax	#, D.30225
	je	.L1678	#,
.L1677:
	.loc 1 6563 0 is_stmt 1
	movl	$__FUNCTION__.15758, %edx	#,
	movl	$6563, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1678:
	.loc 1 6565 0
	movq	-32(%rbp), %rax	# operands, tmp81
	movq	(%rax), %rax	# *operands_5(D), D.30220
	movzwl	(%rax), %eax	# _16->code, D.30224
	cmpw	$66, %ax	#, D.30224
	je	.L1679	#,
	.loc 1 6566 0
	movl	$__FUNCTION__.15758, %edx	#,
	movl	$6566, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1679:
	.loc 1 6568 0
	movq	-32(%rbp), %rax	# operands, tmp82
	movq	%rax, %rsi	# tmp82,
	movl	$.LC248, %edi	#,
	call	output_asm_insn	#
	.loc 1 6569 0
	cmpl	$0, -8(%rbp)	#, stack_top_dies
	jne	.L1680	#,
	.loc 1 6569 0 is_stmt 0 discriminator 1
	cmpl	$0, -4(%rbp)	#, dimode_p
	je	.L1681	#,
.L1680:
	.loc 1 6570 0 is_stmt 1
	movq	-32(%rbp), %rax	# operands, tmp83
	movq	%rax, %rsi	# tmp83,
	movl	$.LC249, %edi	#,
	call	output_asm_insn	#
	jmp	.L1682	#
.L1681:
	.loc 1 6572 0
	movq	-32(%rbp), %rax	# operands, tmp84
	movq	%rax, %rsi	# tmp84,
	movl	$.LC250, %edi	#,
	call	output_asm_insn	#
.L1682:
	.loc 1 6573 0
	movq	-32(%rbp), %rax	# operands, tmp85
	movq	%rax, %rsi	# tmp85,
	movl	$.LC251, %edi	#,
	call	output_asm_insn	#
	.loc 1 6575 0
	movl	$.LC16, %eax	#, D.30226
	.loc 1 6576 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE103:
	.size	output_fix_trunc, .-output_fix_trunc
	.section	.rodata
.LC252:
	.string	"ucomiss\t{%1, %0|%0, %1}"
.LC253:
	.string	"comiss\t{%1, %0|%0, %y}"
.LC254:
	.string	"ucomisd\t{%1, %0|%0, %1}"
.LC255:
	.string	"comisd\t{%1, %0|%0, %y}"
.LC256:
	.string	"fucomip\t{%y1, %0|%0, %y1}"
.LC257:
	.string	"fcomip\t{%y1, %0|%0, %y1}"
.LC258:
	.string	"fstp\t%y0"
.LC259:
	.string	"fucompp\n\tfnstsw\t%0"
.LC260:
	.string	"fcompp\n\tfnstsw\t%0"
.LC261:
	.string	"fucompp"
.LC262:
	.string	"fcompp"
	.text
	.globl	output_fp_compare
	.type	output_fp_compare, @function
output_fp_compare:
.LFB104:
	.loc 1 6587 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -56(%rbp)	# insn, insn
	movq	%rsi, -64(%rbp)	# operands, operands
	movl	%edx, -68(%rbp)	# eflags_p, eflags_p
	movl	%ecx, -72(%rbp)	# unordered_p, unordered_p
	.loc 1 6589 0
	movq	-64(%rbp), %rax	# operands, tmp110
	movq	(%rax), %rax	# *operands_7(D), tmp111
	movq	%rax, -24(%rbp)	# tmp111, cmp_op0
	.loc 1 6590 0
	movq	-64(%rbp), %rax	# operands, tmp112
	movq	8(%rax), %rax	# MEM[(struct rtx_def * *)operands_7(D) + 8B], tmp113
	movq	%rax, -16(%rbp)	# tmp113, cmp_op1
	.loc 1 6591 0
	movq	-64(%rbp), %rax	# operands, tmp114
	movq	(%rax), %rax	# *operands_7(D), D.30233
	movzwl	(%rax), %eax	# _10->code, D.30234
	cmpw	$61, %ax	#, D.30234
	jne	.L1685	#,
	.loc 1 6591 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp115
	movq	(%rax), %rax	# *operands_7(D), D.30233
	movl	8(%rax), %eax	# _12->fld[0].rtuint, D.30235
	cmpl	$20, %eax	#, D.30235
	jbe	.L1686	#,
	.loc 1 6591 0 discriminator 3
	movq	-64(%rbp), %rax	# operands, tmp116
	movq	(%rax), %rax	# *operands_7(D), D.30233
	movl	8(%rax), %eax	# _14->fld[0].rtuint, D.30235
	cmpl	$28, %eax	#, D.30235
	jbe	.L1687	#,
.L1686:
	.loc 1 6591 0 discriminator 4
	movq	-64(%rbp), %rax	# operands, tmp117
	movq	(%rax), %rax	# *operands_7(D), D.30233
	movl	8(%rax), %eax	# _16->fld[0].rtuint, D.30235
	cmpl	$44, %eax	#, D.30235
	jbe	.L1685	#,
	.loc 1 6591 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp118
	movq	(%rax), %rax	# *operands_7(D), D.30233
	movl	8(%rax), %eax	# _18->fld[0].rtuint, D.30235
	cmpl	$52, %eax	#, D.30235
	ja	.L1685	#,
.L1687:
	movl	$1, %eax	#, iftmp.818
	jmp	.L1688	#
.L1685:
	.loc 1 6591 0 discriminator 2
	movl	$0, %eax	#, iftmp.818
.L1688:
	.loc 1 6591 0 discriminator 5
	movl	%eax, %edx	# iftmp.818, D.30236
	andl	$1, %edx	#, D.30236
	movq	-64(%rbp), %rax	# operands, tmp119
	addq	$8, %rax	#, D.30237
	movq	(%rax), %rax	# *_23, D.30233
	movzwl	(%rax), %eax	# _24->code, D.30234
	cmpw	$61, %ax	#, D.30234
	jne	.L1689	#,
	.loc 1 6591 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp120
	addq	$8, %rax	#, D.30237
	movq	(%rax), %rax	# *_26, D.30233
	movl	8(%rax), %eax	# _27->fld[0].rtuint, D.30235
	cmpl	$20, %eax	#, D.30235
	jbe	.L1690	#,
	.loc 1 6591 0 discriminator 3
	movq	-64(%rbp), %rax	# operands, tmp121
	addq	$8, %rax	#, D.30237
	movq	(%rax), %rax	# *_29, D.30233
	movl	8(%rax), %eax	# _30->fld[0].rtuint, D.30235
	cmpl	$28, %eax	#, D.30235
	jbe	.L1691	#,
.L1690:
	.loc 1 6591 0 discriminator 4
	movq	-64(%rbp), %rax	# operands, tmp122
	addq	$8, %rax	#, D.30237
	movq	(%rax), %rax	# *_32, D.30233
	movl	8(%rax), %eax	# _33->fld[0].rtuint, D.30235
	cmpl	$44, %eax	#, D.30235
	jbe	.L1689	#,
	.loc 1 6591 0 discriminator 1
	movq	-64(%rbp), %rax	# operands, tmp123
	addq	$8, %rax	#, D.30237
	movq	(%rax), %rax	# *_35, D.30233
	movl	8(%rax), %eax	# _36->fld[0].rtuint, D.30235
	cmpl	$52, %eax	#, D.30235
	ja	.L1689	#,
.L1691:
	movl	$1, %eax	#, iftmp.819
	jmp	.L1692	#
.L1689:
	.loc 1 6591 0 discriminator 2
	movl	$0, %eax	#, iftmp.819
.L1692:
	.loc 1 6591 0 discriminator 5
	andl	$1, %eax	#, D.30236
	orl	%edx, %eax	# D.30236, D.30236
	movzbl	%al, %eax	# D.30236, tmp124
	movl	%eax, -36(%rbp)	# tmp124, is_sse
	.loc 1 6593 0 is_stmt 1 discriminator 5
	cmpl	$2, -68(%rbp)	#, eflags_p
	jne	.L1693	#,
	.loc 1 6595 0
	movq	-16(%rbp), %rax	# cmp_op1, tmp125
	movq	%rax, -24(%rbp)	# tmp125, cmp_op0
	.loc 1 6596 0
	movq	-64(%rbp), %rax	# operands, tmp126
	movq	16(%rax), %rax	# MEM[(struct rtx_def * *)operands_7(D) + 16B], tmp127
	movq	%rax, -16(%rbp)	# tmp127, cmp_op1
.L1693:
	.loc 1 6598 0
	cmpl	$0, -36(%rbp)	#, is_sse
	je	.L1694	#,
	.loc 1 6600 0
	movq	-64(%rbp), %rax	# operands, tmp128
	movq	(%rax), %rax	# *operands_7(D), D.30233
	movzbl	2(%rax), %eax	# _46->mode, D.30238
	cmpb	$15, %al	#, D.30238
	jne	.L1695	#,
	.loc 1 6601 0
	cmpl	$0, -72(%rbp)	#, unordered_p
	je	.L1696	#,
	.loc 1 6602 0
	movl	$.LC252, %eax	#, D.30232
	jmp	.L1697	#
.L1696:
	.loc 1 6604 0
	movl	$.LC253, %eax	#, D.30232
	jmp	.L1697	#
.L1695:
	.loc 1 6606 0
	cmpl	$0, -72(%rbp)	#, unordered_p
	je	.L1698	#,
	.loc 1 6607 0
	movl	$.LC254, %eax	#, D.30232
	jmp	.L1697	#
.L1698:
	.loc 1 6609 0
	movl	$.LC255, %eax	#, D.30232
	jmp	.L1697	#
.L1694:
	.loc 1 6612 0
	movq	-24(%rbp), %rax	# cmp_op0, tmp129
	movzwl	(%rax), %eax	# cmp_op0_1->code, D.30234
	cmpw	$61, %ax	#, D.30234
	jne	.L1699	#,
	.loc 1 6612 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# cmp_op0, tmp130
	movl	8(%rax), %eax	# cmp_op0_1->fld[0].rtuint, D.30235
	cmpl	$8, %eax	#, D.30235
	je	.L1700	#,
.L1699:
	.loc 1 6613 0 is_stmt 1
	movl	$__FUNCTION__.15769, %edx	#,
	movl	$6613, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1700:
	.loc 1 6615 0
	movq	-56(%rbp), %rax	# insn, tmp131
	movl	$8, %edx	#,
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp131,
	call	find_regno_note	#
	testq	%rax, %rax	# D.30233
	setne	%al	#, D.30236
	movzbl	%al, %eax	# D.30236, tmp132
	movl	%eax, -32(%rbp)	# tmp132, stack_top_dies
	.loc 1 6617 0
	movq	-16(%rbp), %rax	# cmp_op1, tmp133
	movzwl	(%rax), %eax	# cmp_op1_2->code, D.30234
	cmpw	$61, %ax	#, D.30234
	jne	.L1701	#,
	.loc 1 6617 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# cmp_op1, tmp134
	movl	8(%rax), %eax	# cmp_op1_2->fld[0].rtuint, D.30235
	cmpl	$7, %eax	#, D.30235
	jbe	.L1701	#,
	movq	-16(%rbp), %rax	# cmp_op1, tmp135
	movl	8(%rax), %eax	# cmp_op1_2->fld[0].rtuint, D.30235
	cmpl	$15, %eax	#, D.30235
	ja	.L1701	#,
	.loc 1 6618 0 is_stmt 1
	cmpl	$0, -32(%rbp)	#, stack_top_dies
	je	.L1701	#,
	.loc 1 6619 0
	movq	-16(%rbp), %rax	# cmp_op1, tmp136
	movl	8(%rax), %edx	# cmp_op1_2->fld[0].rtuint, D.30235
	movq	-56(%rbp), %rax	# insn, tmp137
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp137,
	call	find_regno_note	#
	testq	%rax, %rax	# D.30233
	je	.L1701	#,
	.loc 1 6620 0
	movq	-16(%rbp), %rax	# cmp_op1, tmp138
	movl	8(%rax), %eax	# cmp_op1_2->fld[0].rtuint, D.30235
	cmpl	$8, %eax	#, D.30235
	je	.L1701	#,
	.loc 1 6626 0
	cmpl	$1, -68(%rbp)	#, eflags_p
	jne	.L1702	#,
	.loc 1 6630 0
	cmpl	$0, -72(%rbp)	#, unordered_p
	je	.L1703	#,
	.loc 1 6631 0
	movq	-64(%rbp), %rax	# operands, tmp139
	movq	%rax, %rsi	# tmp139,
	movl	$.LC256, %edi	#,
	call	output_asm_insn	#
	jmp	.L1704	#
.L1703:
	.loc 1 6633 0
	movq	-64(%rbp), %rax	# operands, tmp140
	movq	%rax, %rsi	# tmp140,
	movl	$.LC257, %edi	#,
	call	output_asm_insn	#
.L1704:
	.loc 1 6634 0
	movl	$.LC258, %eax	#, D.30232
	jmp	.L1697	#
.L1702:
	.loc 1 6638 0
	cmpl	$2, -68(%rbp)	#, eflags_p
	jne	.L1705	#,
	.loc 1 6640 0
	cmpl	$0, -72(%rbp)	#, unordered_p
	je	.L1706	#,
	.loc 1 6641 0
	movl	$.LC259, %eax	#, D.30232
	jmp	.L1697	#
.L1706:
	.loc 1 6643 0
	movl	$.LC260, %eax	#, D.30232
	jmp	.L1697	#
.L1705:
	.loc 1 6647 0
	cmpl	$0, -72(%rbp)	#, unordered_p
	je	.L1707	#,
	.loc 1 6648 0
	movl	$.LC261, %eax	#, D.30232
	jmp	.L1697	#
.L1707:
	.loc 1 6650 0
	movl	$.LC262, %eax	#, D.30232
	jmp	.L1697	#
.L1701:
.LBB66:
	.loc 1 6694 0
	movl	-68(%rbp), %eax	# eflags_p, tmp144
	sall	$3, %eax	#, tmp143
	movl	%eax, -28(%rbp)	# tmp143, mask
	.loc 1 6695 0
	movq	-64(%rbp), %rax	# operands, tmp145
	addq	$8, %rax	#, D.30237
	movq	(%rax), %rax	# *_71, D.30233
	movzbl	2(%rax), %eax	# _72->mode, D.30238
	movzbl	%al, %eax	# D.30238, D.30239
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30240
	cmpl	$1, %eax	#, D.30240
	jne	.L1708	#,
	.loc 1 6695 0 is_stmt 0 discriminator 1
	movl	$4, %eax	#, iftmp.820
	jmp	.L1709	#
.L1708:
	.loc 1 6695 0 discriminator 2
	movl	$0, %eax	#, iftmp.820
.L1709:
	.loc 1 6695 0 discriminator 3
	orl	%eax, -28(%rbp)	# iftmp.820, mask
	.loc 1 6696 0 is_stmt 1 discriminator 3
	movl	-72(%rbp), %eax	# unordered_p, tmp147
	addl	%eax, %eax	# D.30239
	orl	%eax, -28(%rbp)	# D.30239, mask
	.loc 1 6697 0 discriminator 3
	movl	-32(%rbp), %eax	# stack_top_dies, tmp148
	orl	%eax, -28(%rbp)	# tmp148, mask
	.loc 1 6699 0 discriminator 3
	cmpl	$23, -28(%rbp)	#, mask
	jle	.L1710	#,
	.loc 1 6700 0
	movl	$__FUNCTION__.15769, %edx	#,
	movl	$6700, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1710:
	.loc 1 6701 0
	movl	-28(%rbp), %eax	# mask, tmp150
	cltq
	movq	alt.15770(,%rax,8), %rax	# alt, tmp151
	movq	%rax, -8(%rbp)	# tmp151, ret
	.loc 1 6702 0
	cmpq	$0, -8(%rbp)	#, ret
	jne	.L1711	#,
	.loc 1 6703 0
	movl	$__FUNCTION__.15769, %edx	#,
	movl	$6703, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1711:
	.loc 1 6705 0
	movq	-8(%rbp), %rax	# ret, D.30232
.L1697:
.LBE66:
	.loc 1 6707 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE104:
	.size	output_fp_compare, .-output_fp_compare
	.section	.rodata
.LC263:
	.string	".L"
.LC264:
	.string	"%s%s%d\n"
	.text
	.globl	ix86_output_addr_vec_elt
	.type	ix86_output_addr_vec_elt, @function
ix86_output_addr_vec_elt:
.LFB105:
	.loc 1 6713 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# file, file
	movl	%esi, -28(%rbp)	# value, value
	.loc 1 6714 0
	movq	$.LC79, -8(%rbp)	#, directive
	.loc 1 6716 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.821
	andl	$33554432, %eax	#, D.30252
	testl	%eax, %eax	# D.30252
	je	.L1713	#,
	.loc 1 6719 0
	movq	$.LC80, -8(%rbp)	#, directive
.L1713:
	.loc 1 6725 0
	movl	-28(%rbp), %ecx	# value, tmp61
	movq	-8(%rbp), %rdx	# directive, tmp62
	movq	-24(%rbp), %rax	# file, tmp63
	movl	%ecx, %r8d	# tmp61,
	movl	$.LC263, %ecx	#,
	movl	$.LC264, %esi	#,
	movq	%rax, %rdi	# tmp63,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 6726 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE105:
	.size	ix86_output_addr_vec_elt, .-ix86_output_addr_vec_elt
	.section	.rodata
.LC265:
	.string	"%s%s%d-.+(.-%s%d)\n"
	.align 8
.LC266:
	.string	"%s%U_GLOBAL_OFFSET_TABLE_+[.-%s%d]\n"
	.text
	.globl	ix86_output_addr_diff_elt
	.type	ix86_output_addr_diff_elt, @function
ix86_output_addr_diff_elt:
.LFB106:
	.loc 1 6732 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# file, file
	movl	%esi, -12(%rbp)	# value, value
	movl	%edx, -16(%rbp)	# rel, rel
	.loc 1 6733 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.822
	andl	$33554432, %eax	#, D.30255
	testl	%eax, %eax	# D.30255
	je	.L1715	#,
	.loc 1 6734 0
	movl	-12(%rbp), %ecx	# value, tmp61
	movq	-8(%rbp), %rax	# file, tmp62
	movl	-16(%rbp), %edx	# rel, tmp63
	movl	%edx, (%rsp)	# tmp63,
	movl	$.LC263, %r9d	#,
	movl	%ecx, %r8d	# tmp61,
	movl	$.LC263, %ecx	#,
	movl	$.LC79, %edx	#,
	movl	$.LC265, %esi	#,
	movq	%rax, %rdi	# tmp62,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L1714	#
.L1715:
	.loc 1 6739 0
	movl	-12(%rbp), %edx	# value, tmp64
	movq	-8(%rbp), %rax	# file, tmp65
	movl	%edx, %r8d	# tmp64,
	movl	$.LC263, %ecx	#,
	movl	$.LC79, %edx	#,
	movl	$.LC266, %esi	#,
	movq	%rax, %rdi	# tmp65,
	movl	$0, %eax	#,
	call	asm_fprintf	#
.L1714:
	.loc 1 6741 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE106:
	.size	ix86_output_addr_diff_elt, .-ix86_output_addr_diff_elt
	.globl	ix86_expand_clear
	.type	ix86_expand_clear, @function
ix86_expand_clear:
.LFB107:
	.loc 1 6749 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# dest, dest
	.loc 1 6753 0
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.823
	testl	%eax, %eax	# reload_completed.823
	jne	.L1718	#,
	.loc 1 6754 0
	movl	$__FUNCTION__.15787, %edx	#,
	movl	$6754, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1718:
	.loc 1 6757 0
	movq	-24(%rbp), %rax	# dest, tmp75
	movzbl	2(%rax), %eax	# dest_4(D)->mode, D.30258
	movzbl	%al, %eax	# D.30258, D.30259
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30258
	cmpb	$3, %al	#, D.30258
	ja	.L1719	#,
	.loc 1 6758 0
	movq	-24(%rbp), %rax	# dest, tmp77
	movl	8(%rax), %eax	# dest_4(D)->fld[0].rtuint, D.30260
	movl	%eax, %esi	# D.30259,
	movl	$4, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -24(%rbp)	# tmp78, dest
.L1719:
	.loc 1 6760 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30261
	movq	-24(%rbp), %rax	# dest, tmp79
	movq	%rdx, %rcx	# D.30261,
	movq	%rax, %rdx	# tmp79,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -16(%rbp)	# tmp80, tmp
	.loc 1 6763 0
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.824
	testl	%eax, %eax	# reload_completed.824
	je	.L1720	#,
	.loc 1 6763 0 is_stmt 0 discriminator 1
	movl	$16, %edx	#, x86_use_mov0.825
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.826
	movl	%eax, %ecx	# ix86_cpu.827, tmp87
	sarl	%cl, %edx	# tmp87, D.30259
	movl	%edx, %eax	# D.30259, D.30259
	andl	$1, %eax	#, D.30259
	testl	%eax, %eax	# D.30259
	je	.L1721	#,
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.828
	testl	%eax, %eax	# optimize_size.828
	je	.L1720	#,
.L1721:
.LBB67:
	.loc 1 6765 0 is_stmt 1
	movl	$17, %esi	#,
	movl	$52, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	# D.30261,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -8(%rbp)	# tmp81, clob
	.loc 1 6766 0
	movq	-8(%rbp), %rdx	# clob, tmp82
	movq	-16(%rbp), %rax	# tmp, tmp83
	movq	%rax, %rsi	# tmp83,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movq	%rax, %rdx	# D.30262,
	movl	$0, %esi	#,
	movl	$39, %edi	#,
	call	gen_rtx_fmt_E	#
	movq	%rax, -16(%rbp)	# tmp84, tmp
.L1720:
.LBE67:
	.loc 1 6769 0
	movq	-16(%rbp), %rax	# tmp, tmp85
	movq	%rax, %rdi	# tmp85,
	call	emit_insn	#
	.loc 1 6770 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE107:
	.size	ix86_expand_clear, .-ix86_expand_clear
	.globl	ix86_expand_move
	.type	ix86_expand_move, @function
ix86_expand_move:
.LFB108:
	.loc 1 6776 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -52(%rbp)	# mode, mode
	movq	%rsi, -64(%rbp)	# operands, operands
	.loc 1 6777 0
	movl	reload_in_progress(%rip), %eax	# reload_in_progress, reload_in_progress.830
	testl	%eax, %eax	# reload_in_progress.830
	jne	.L1723	#,
	.loc 1 6777 0 is_stmt 0 discriminator 2
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.831
	testl	%eax, %eax	# reload_completed.831
	je	.L1724	#,
.L1723:
	.loc 1 6777 0 discriminator 1
	movl	$1, %eax	#, iftmp.829
	jmp	.L1725	#
.L1724:
	.loc 1 6777 0 discriminator 3
	movl	$0, %eax	#, iftmp.829
.L1725:
	.loc 1 6777 0 discriminator 4
	movl	%eax, -36(%rbp)	# iftmp.829, strict
	.loc 1 6780 0 is_stmt 1 discriminator 4
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.832
	testl	%eax, %eax	# flag_pic.832
	je	.L1726	#,
	.loc 1 6780 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.834
	andl	$33554432, %eax	#, D.30263
	testl	%eax, %eax	# D.30263
	je	.L1727	#,
	movl	$5, %eax	#, iftmp.833
	jmp	.L1728	#
.L1727:
	.loc 1 6780 0 discriminator 2
	movl	$4, %eax	#, iftmp.833
.L1728:
	.loc 1 6780 0 discriminator 3
	cmpl	-52(%rbp), %eax	# mode, iftmp.833
	jne	.L1726	#,
	.loc 1 6780 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.836
	andl	$33554432, %eax	#, D.30263
	testl	%eax, %eax	# D.30263
	je	.L1729	#,
	movl	$5, %eax	#, iftmp.835
	jmp	.L1730	#
.L1729:
	.loc 1 6780 0 discriminator 2
	movl	$4, %eax	#, iftmp.835
.L1730:
	.loc 1 6780 0 discriminator 3
	movq	-64(%rbp), %rdx	# operands, tmp159
	addq	$8, %rdx	#, D.30264
	movq	(%rdx), %rdx	# *_24, D.30265
	movl	%eax, %esi	# iftmp.835,
	movq	%rdx, %rdi	# D.30265,
	call	symbolic_operand	#
	testl	%eax, %eax	# D.30263
	je	.L1726	#,
	.loc 1 6784 0 is_stmt 1
	movq	-64(%rbp), %rax	# operands, tmp160
	movq	(%rax), %rax	# *operands_23(D), D.30265
	movzwl	(%rax), %eax	# _27->code, D.30266
	cmpw	$66, %ax	#, D.30266
	jne	.L1731	#,
	.loc 1 6785 0
	movq	-64(%rbp), %rax	# operands, tmp161
	leaq	8(%rax), %rbx	#, D.30264
	movq	-64(%rbp), %rax	# operands, tmp162
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rdx	# *_30, D.30265
	movl	target_flags(%rip), %eax	# target_flags, target_flags.838
	andl	$33554432, %eax	#, D.30263
	testl	%eax, %eax	# D.30263
	je	.L1732	#,
	.loc 1 6785 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.837
	jmp	.L1733	#
.L1732:
	.loc 1 6785 0 discriminator 2
	movl	$4, %eax	#, iftmp.837
.L1733:
	.loc 1 6785 0 discriminator 1
	movq	%rdx, %rsi	# D.30265,
	movl	%eax, %edi	# iftmp.837,
	call	force_reg	#
	movq	%rax, (%rbx)	# D.30265, *_29
	.loc 1 6784 0 is_stmt 1 discriminator 1
	jmp	.L1740	#
.L1731:
.LBB68:
	.loc 1 6788 0
	movq	-64(%rbp), %rax	# operands, tmp163
	movq	(%rax), %rax	# *operands_23(D), tmp164
	movq	%rax, -32(%rbp)	# tmp164, temp
	.loc 1 6789 0
	movq	-32(%rbp), %rax	# temp, tmp165
	movzwl	(%rax), %eax	# temp_37->code, D.30266
	cmpw	$61, %ax	#, D.30266
	je	.L1735	#,
	.loc 1 6790 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.840
	andl	$33554432, %eax	#, D.30263
	testl	%eax, %eax	# D.30263
	je	.L1736	#,
	.loc 1 6790 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.839
	jmp	.L1737	#
.L1736:
	.loc 1 6790 0 discriminator 2
	movl	$4, %eax	#, iftmp.839
.L1737:
	.loc 1 6790 0 discriminator 3
	movl	%eax, %edi	# iftmp.839,
	call	gen_reg_rtx	#
	movq	%rax, -32(%rbp)	# tmp166, temp
.L1735:
	.loc 1 6791 0 is_stmt 1
	movq	-64(%rbp), %rax	# operands, tmp167
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rax	# *_44, D.30265
	movq	-32(%rbp), %rdx	# temp, tmp168
	movq	%rdx, %rsi	# tmp168,
	movq	%rax, %rdi	# D.30265,
	call	legitimize_pic_address	#
	movq	%rax, -32(%rbp)	# tmp169, temp
	.loc 1 6792 0
	movq	-64(%rbp), %rax	# operands, tmp170
	movq	(%rax), %rax	# *operands_23(D), D.30265
	cmpq	-32(%rbp), %rax	# temp, D.30265
	jne	.L1738	#,
	.loc 1 6793 0
	jmp	.L1722	#
.L1738:
	.loc 1 6794 0
	movq	-64(%rbp), %rax	# operands, tmp171
	leaq	8(%rax), %rdx	#, D.30264
	movq	-32(%rbp), %rax	# temp, tmp172
	movq	%rax, (%rdx)	# tmp172, *_48
.LBE68:
	.loc 1 6784 0
	jmp	.L1740	#
.L1726:
	.loc 1 6799 0
	movq	-64(%rbp), %rax	# operands, tmp173
	movq	(%rax), %rax	# *operands_23(D), D.30265
	movzwl	(%rax), %eax	# _49->code, D.30266
	cmpw	$66, %ax	#, D.30266
	jne	.L1741	#,
	.loc 1 6800 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.842
	andl	$33554432, %eax	#, D.30263
	testl	%eax, %eax	# D.30263
	je	.L1742	#,
	.loc 1 6800 0 is_stmt 0 discriminator 1
	movl	-52(%rbp), %eax	# mode, mode.843
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30267
	movzbl	%al, %eax	# D.30267, D.30263
	addl	$7, %eax	#, D.30263
	andl	$-8, %eax	#, iftmp.841
	jmp	.L1743	#
.L1742:
	.loc 1 6800 0 discriminator 2
	movl	-52(%rbp), %eax	# mode, mode.844
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30267
	movzbl	%al, %eax	# D.30267, D.30263
	addl	$1, %eax	#, D.30263
	andl	$-2, %eax	#, iftmp.841
.L1743:
	.loc 1 6800 0 discriminator 3
	movl	-52(%rbp), %edx	# mode, mode.845
	movslq	%edx, %rdx	# mode.845, tmp176
	movzbl	mode_size(%rdx), %edx	# mode_size, D.30267
	movzbl	%dl, %edx	# D.30267, D.30263
	cmpl	%edx, %eax	# D.30263, iftmp.841
	jne	.L1744	#,
	.loc 1 6801 0 is_stmt 1
	movq	-64(%rbp), %rax	# operands, tmp177
	movq	(%rax), %rax	# *operands_23(D), D.30265
	movl	-52(%rbp), %edx	# mode, tmp178
	movl	%edx, %esi	# tmp178,
	movq	%rax, %rdi	# D.30265,
	call	push_operand	#
	testl	%eax, %eax	# D.30263
	jne	.L1741	#,
.L1744:
	.loc 1 6802 0
	movq	-64(%rbp), %rax	# operands, tmp179
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rax	# *_68, D.30265
	movzwl	(%rax), %eax	# _69->code, D.30266
	cmpw	$66, %ax	#, D.30266
	jne	.L1741	#,
	.loc 1 6803 0
	movq	-64(%rbp), %rax	# operands, tmp180
	leaq	8(%rax), %rbx	#, D.30264
	movq	-64(%rbp), %rax	# operands, tmp181
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rdx	# *_72, D.30265
	movl	-52(%rbp), %eax	# mode, tmp182
	movq	%rdx, %rsi	# D.30265,
	movl	%eax, %edi	# tmp182,
	call	force_reg	#
	movq	%rax, (%rbx)	# D.30265, *_71
.L1741:
	.loc 1 6805 0
	movq	-64(%rbp), %rax	# operands, tmp183
	movq	(%rax), %rax	# *operands_23(D), D.30265
	movl	-52(%rbp), %edx	# mode, tmp184
	movl	%edx, %esi	# tmp184,
	movq	%rax, %rdi	# D.30265,
	call	push_operand	#
	testl	%eax, %eax	# D.30263
	je	.L1745	#,
	.loc 1 6806 0
	movq	-64(%rbp), %rax	# operands, tmp185
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rax	# *_77, D.30265
	movl	-52(%rbp), %edx	# mode, tmp186
	movl	%edx, %esi	# tmp186,
	movq	%rax, %rdi	# D.30265,
	call	general_no_elim_operand	#
	testl	%eax, %eax	# D.30263
	jne	.L1745	#,
	.loc 1 6807 0
	movq	-64(%rbp), %rax	# operands, tmp187
	leaq	8(%rax), %rbx	#, D.30264
	movq	-64(%rbp), %rax	# operands, tmp188
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rdx	# *_81, D.30265
	movl	-52(%rbp), %eax	# mode, tmp189
	movq	%rdx, %rsi	# D.30265,
	movl	%eax, %edi	# tmp189,
	call	copy_to_mode_reg	#
	movq	%rax, (%rbx)	# D.30265, *_80
.L1745:
	.loc 1 6811 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.846
	andl	$33554432, %eax	#, D.30263
	testl	%eax, %eax	# D.30263
	je	.L1746	#,
	.loc 1 6811 0 is_stmt 0 discriminator 1
	cmpl	$5, -52(%rbp)	#, mode
	jne	.L1746	#,
	.loc 1 6812 0 is_stmt 1
	movq	-64(%rbp), %rax	# operands, tmp190
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rax	# *_86, D.30265
	movl	-52(%rbp), %edx	# mode, tmp191
	movl	%edx, %esi	# tmp191,
	movq	%rax, %rdi	# D.30265,
	call	immediate_operand	#
	testl	%eax, %eax	# D.30263
	je	.L1746	#,
	.loc 1 6813 0
	movq	-64(%rbp), %rax	# operands, tmp192
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rax	# *_89, D.30265
	movq	%rax, %rdi	# D.30265,
	call	x86_64_zero_extended_value	#
	testl	%eax, %eax	# D.30263
	jne	.L1746	#,
	.loc 1 6814 0
	movq	-64(%rbp), %rax	# operands, tmp193
	movq	(%rax), %rax	# *operands_23(D), D.30265
	movl	-52(%rbp), %edx	# mode, tmp194
	movl	%edx, %esi	# tmp194,
	movq	%rax, %rdi	# D.30265,
	call	register_operand	#
	testl	%eax, %eax	# D.30263
	jne	.L1746	#,
	.loc 1 6815 0
	movl	optimize(%rip), %eax	# optimize, optimize.847
	testl	%eax, %eax	# optimize.847
	je	.L1746	#,
	.loc 1 6815 0 is_stmt 0 discriminator 1
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.848
	testl	%eax, %eax	# reload_completed.848
	jne	.L1746	#,
	movl	reload_in_progress(%rip), %eax	# reload_in_progress, reload_in_progress.849
	testl	%eax, %eax	# reload_in_progress.849
	jne	.L1746	#,
	.loc 1 6816 0 is_stmt 1
	movq	-64(%rbp), %rax	# operands, tmp195
	leaq	8(%rax), %rbx	#, D.30264
	movq	-64(%rbp), %rax	# operands, tmp196
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rdx	# *_98, D.30265
	movl	-52(%rbp), %eax	# mode, tmp197
	movq	%rdx, %rsi	# D.30265,
	movl	%eax, %edi	# tmp197,
	call	copy_to_mode_reg	#
	movq	%rax, (%rbx)	# D.30265, *_97
.L1746:
	.loc 1 6818 0
	movl	-52(%rbp), %eax	# mode, mode.850
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30268
	cmpl	$2, %eax	#, D.30268
	je	.L1747	#,
	.loc 1 6818 0 is_stmt 0 discriminator 1
	movl	-52(%rbp), %eax	# mode, mode.851
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30268
	cmpl	$6, %eax	#, D.30268
	je	.L1747	#,
	movl	-52(%rbp), %eax	# mode, mode.852
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30268
	cmpl	$8, %eax	#, D.30268
	jne	.L1740	#,
.L1747:
	.loc 1 6824 0 is_stmt 1
	cmpl	$0, -36(%rbp)	#, strict
	jne	.L1740	#,
	.loc 1 6826 0
	movq	-64(%rbp), %rax	# operands, tmp201
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rax	# *_107, D.30265
	movzwl	(%rax), %eax	# _108->code, D.30266
	cmpw	$55, %ax	#, D.30266
	jne	.L1740	#,
	.loc 1 6827 0
	movq	-64(%rbp), %rax	# operands, tmp202
	movq	(%rax), %rax	# *operands_23(D), D.30265
	movl	-52(%rbp), %edx	# mode, tmp203
	movl	%edx, %esi	# tmp203,
	movq	%rax, %rdi	# D.30265,
	call	register_operand	#
	testl	%eax, %eax	# D.30263
	je	.L1740	#,
	.loc 1 6828 0
	movq	-64(%rbp), %rax	# operands, tmp204
	leaq	8(%rax), %rbx	#, D.30264
	movq	-64(%rbp), %rax	# operands, tmp205
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rdx	# *_113, D.30265
	movl	-52(%rbp), %eax	# mode, tmp206
	movq	%rdx, %rsi	# D.30265,
	movl	%eax, %edi	# tmp206,
	call	force_const_mem	#
	movq	%rax, %rdi	# D.30265,
	call	validize_mem	#
	movq	%rax, (%rbx)	# D.30265, *_112
.L1740:
	.loc 1 6832 0
	movq	-64(%rbp), %rax	# operands, tmp207
	addq	$8, %rax	#, D.30264
	movq	(%rax), %rdx	# *_117, D.30265
	movq	-64(%rbp), %rax	# operands, tmp208
	movq	(%rax), %rax	# *operands_23(D), D.30265
	movq	%rdx, %rcx	# D.30265,
	movq	%rax, %rdx	# D.30265,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -24(%rbp)	# tmp209, insn
	.loc 1 6834 0
	movq	-24(%rbp), %rax	# insn, tmp210
	movq	%rax, %rdi	# tmp210,
	call	emit_insn	#
.L1722:
	.loc 1 6835 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE108:
	.size	ix86_expand_move, .-ix86_expand_move
	.globl	ix86_expand_vector_move
	.type	ix86_expand_vector_move, @function
ix86_expand_vector_move:
.LFB109:
	.loc 1 6841 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# mode, mode
	movq	%rsi, -48(%rbp)	# operands, operands
	.loc 1 6846 0
	movl	reload_in_progress(%rip), %edx	# reload_in_progress, reload_in_progress.853
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.854
	orl	%edx, %eax	# reload_in_progress.853, D.30269
	testl	%eax, %eax	# D.30269
	jne	.L1749	#,
	.loc 1 6847 0
	movq	-48(%rbp), %rax	# operands, tmp120
	movq	(%rax), %rax	# *operands_5(D), D.30270
	movl	-36(%rbp), %edx	# mode, tmp121
	movl	%edx, %esi	# tmp121,
	movq	%rax, %rdi	# D.30270,
	call	register_operand	#
	testl	%eax, %eax	# D.30269
	je	.L1749	#,
	.loc 1 6848 0
	movq	-48(%rbp), %rax	# operands, tmp122
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rax	# *_9, D.30270
	movzwl	(%rax), %eax	# _10->code, D.30272
	cmpw	$67, %ax	#, D.30272
	je	.L1750	#,
	.loc 1 6848 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# operands, tmp123
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rax	# *_12, D.30270
	movzwl	(%rax), %eax	# _13->code, D.30272
	cmpw	$68, %ax	#, D.30272
	je	.L1750	#,
	movq	-48(%rbp), %rax	# operands, tmp124
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rax	# *_15, D.30270
	movzwl	(%rax), %eax	# _16->code, D.30272
	cmpw	$54, %ax	#, D.30272
	je	.L1750	#,
	movq	-48(%rbp), %rax	# operands, tmp125
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rax	# *_18, D.30270
	movzwl	(%rax), %eax	# _19->code, D.30272
	cmpw	$55, %ax	#, D.30272
	je	.L1750	#,
	movq	-48(%rbp), %rax	# operands, tmp126
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rax	# *_21, D.30270
	movzwl	(%rax), %eax	# _22->code, D.30272
	cmpw	$58, %ax	#, D.30272
	je	.L1750	#,
	movq	-48(%rbp), %rax	# operands, tmp127
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rax	# *_24, D.30270
	movzwl	(%rax), %eax	# _25->code, D.30272
	cmpw	$134, %ax	#, D.30272
	je	.L1750	#,
	movq	-48(%rbp), %rax	# operands, tmp128
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rax	# *_27, D.30270
	movzwl	(%rax), %eax	# _28->code, D.30272
	cmpw	$56, %ax	#, D.30272
	je	.L1750	#,
	movq	-48(%rbp), %rax	# operands, tmp129
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rax	# *_30, D.30270
	movzwl	(%rax), %eax	# _31->code, D.30272
	cmpw	$140, %ax	#, D.30272
	jne	.L1749	#,
.L1750:
.LBB69:
	.loc 1 6850 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.856
	andl	$33554432, %eax	#, D.30269
	testl	%eax, %eax	# D.30269
	je	.L1751	#,
	.loc 1 6850 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.855
	jmp	.L1752	#
.L1751:
	.loc 1 6850 0 discriminator 2
	movl	$4, %eax	#, iftmp.855
.L1752:
	.loc 1 6850 0 discriminator 3
	movl	%eax, %edi	# iftmp.855,
	call	gen_reg_rtx	#
	movq	%rax, -32(%rbp)	# tmp130, addr
	.loc 1 6851 0 is_stmt 1 discriminator 3
	movq	-48(%rbp), %rax	# operands, tmp131
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rdx	# *_38, D.30270
	movl	-36(%rbp), %eax	# mode, tmp132
	movq	%rdx, %rsi	# D.30270,
	movl	%eax, %edi	# tmp132,
	call	force_const_mem	#
	movq	8(%rax), %rdx	# _40->fld[0].rtx, D.30270
	movq	-32(%rbp), %rax	# addr, tmp133
	movq	%rdx, %rsi	# D.30270,
	movq	%rax, %rdi	# tmp133,
	call	emit_move_insn	#
	.loc 1 6852 0 discriminator 3
	movq	-48(%rbp), %rax	# operands, tmp134
	leaq	8(%rax), %rbx	#, D.30271
	movq	-32(%rbp), %rdx	# addr, tmp135
	movl	-36(%rbp), %eax	# mode, tmp136
	movq	%rdx, %rsi	# tmp135,
	movl	%eax, %edi	# tmp136,
	call	gen_rtx_MEM	#
	movq	%rax, (%rbx)	# D.30270, *_42
.L1749:
.LBE69:
	.loc 1 6856 0
	movl	reload_in_progress(%rip), %edx	# reload_in_progress, reload_in_progress.857
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.858
	orl	%edx, %eax	# reload_in_progress.857, D.30269
	testl	%eax, %eax	# D.30269
	jne	.L1753	#,
	.loc 1 6857 0
	movq	-48(%rbp), %rax	# operands, tmp137
	movq	(%rax), %rax	# *operands_5(D), D.30270
	movl	-36(%rbp), %edx	# mode, tmp138
	movl	%edx, %esi	# tmp138,
	movq	%rax, %rdi	# D.30270,
	call	register_operand	#
	testl	%eax, %eax	# D.30269
	jne	.L1753	#,
	.loc 1 6858 0
	movq	-48(%rbp), %rax	# operands, tmp139
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rax	# *_49, D.30270
	movl	-36(%rbp), %edx	# mode, tmp140
	movl	%edx, %esi	# tmp140,
	movq	%rax, %rdi	# D.30270,
	call	register_operand	#
	testl	%eax, %eax	# D.30269
	jne	.L1753	#,
	.loc 1 6859 0
	movq	-48(%rbp), %rax	# operands, tmp141
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rdx	# *_52, D.30270
	movl	-36(%rbp), %eax	# mode, mode.859
	cltq
	movq	const_tiny_rtx(,%rax,8), %rax	# const_tiny_rtx, D.30270
	cmpq	%rax, %rdx	# D.30270, D.30270
	je	.L1753	#,
.LBB70:
	.loc 1 6861 0
	movq	-48(%rbp), %rax	# operands, tmp143
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rdx	# *_56, D.30270
	movq	-48(%rbp), %rax	# operands, tmp144
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rax	# *_58, D.30270
	movzbl	2(%rax), %eax	# _59->mode, D.30273
	movzbl	%al, %eax	# D.30273, D.30274
	movq	%rdx, %rsi	# D.30270,
	movl	%eax, %edi	# D.30274,
	call	force_reg	#
	movq	%rax, -24(%rbp)	# tmp145, temp
	.loc 1 6862 0
	movq	-48(%rbp), %rax	# operands, tmp146
	movq	(%rax), %rax	# *operands_5(D), D.30270
	movq	-24(%rbp), %rdx	# temp, tmp147
	movq	%rdx, %rsi	# tmp147,
	movq	%rax, %rdi	# D.30270,
	call	emit_move_insn	#
	.loc 1 6863 0
	jmp	.L1748	#
.L1753:
.LBE70:
	.loc 1 6866 0
	movq	-48(%rbp), %rax	# operands, tmp148
	addq	$8, %rax	#, D.30271
	movq	(%rax), %rdx	# *_64, D.30270
	movq	-48(%rbp), %rax	# operands, tmp149
	movq	(%rax), %rax	# *operands_5(D), D.30270
	movq	%rdx, %rcx	# D.30270,
	movq	%rax, %rdx	# D.30270,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30270,
	call	emit_insn	#
.L1748:
	.loc 1 6867 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE109:
	.size	ix86_expand_vector_move, .-ix86_expand_vector_move
	.globl	ix86_expand_binary_operator
	.type	ix86_expand_binary_operator, @function
ix86_expand_binary_operator:
.LFB110:
	.loc 1 6878 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movl	%edi, -68(%rbp)	# code, code
	movl	%esi, -72(%rbp)	# mode, mode
	movq	%rdx, -80(%rbp)	# operands, operands
	.loc 1 6882 0
	movq	-80(%rbp), %rax	# operands, tmp93
	movq	(%rax), %rax	# *operands_13(D), tmp94
	movq	%rax, -32(%rbp)	# tmp94, dst
	.loc 1 6883 0
	movq	-80(%rbp), %rax	# operands, tmp95
	movq	8(%rax), %rax	# MEM[(struct rtx_def * *)operands_13(D) + 8B], tmp96
	movq	%rax, -48(%rbp)	# tmp96, src1
	.loc 1 6884 0
	movq	-80(%rbp), %rax	# operands, tmp97
	movq	16(%rax), %rax	# MEM[(struct rtx_def * *)operands_13(D) + 16B], tmp98
	movq	%rax, -40(%rbp)	# tmp98, src2
	.loc 1 6887 0
	movl	-68(%rbp), %eax	# code, code.860
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30275
	cmpb	$99, %al	#, D.30275
	jne	.L1756	#,
	.loc 1 6888 0
	movq	-40(%rbp), %rdx	# src2, tmp100
	movq	-32(%rbp), %rax	# dst, tmp101
	movq	%rdx, %rsi	# tmp100,
	movq	%rax, %rdi	# tmp101,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30276
	jne	.L1757	#,
	.loc 1 6889 0
	movl	-72(%rbp), %edx	# mode, tmp102
	movq	-48(%rbp), %rax	# src1, tmp103
	movl	%edx, %esi	# tmp102,
	movq	%rax, %rdi	# tmp103,
	call	immediate_operand	#
	testl	%eax, %eax	# D.30276
	je	.L1756	#,
.L1757:
.LBB71:
	.loc 1 6891 0
	movq	-48(%rbp), %rax	# src1, tmp104
	movq	%rax, -24(%rbp)	# tmp104, temp
	.loc 1 6892 0
	movq	-40(%rbp), %rax	# src2, tmp105
	movq	%rax, -48(%rbp)	# tmp105, src1
	.loc 1 6893 0
	movq	-24(%rbp), %rax	# temp, tmp106
	movq	%rax, -40(%rbp)	# tmp106, src2
.L1756:
.LBE71:
	.loc 1 6898 0
	movl	$0, -52(%rbp)	#, matching_memory
	.loc 1 6899 0
	movq	-32(%rbp), %rax	# dst, tmp107
	movzwl	(%rax), %eax	# dst_14->code, D.30277
	cmpw	$66, %ax	#, D.30277
	jne	.L1758	#,
	.loc 1 6901 0
	movq	-48(%rbp), %rdx	# src1, tmp108
	movq	-32(%rbp), %rax	# dst, tmp109
	movq	%rdx, %rsi	# tmp108,
	movq	%rax, %rdi	# tmp109,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30276
	je	.L1759	#,
	.loc 1 6902 0
	movl	$1, -52(%rbp)	#, matching_memory
	jmp	.L1758	#
.L1759:
	.loc 1 6903 0
	movl	-68(%rbp), %eax	# code, code.861
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30275
	cmpb	$99, %al	#, D.30275
	jne	.L1760	#,
	.loc 1 6904 0
	movq	-40(%rbp), %rdx	# src2, tmp111
	movq	-32(%rbp), %rax	# dst, tmp112
	movq	%rdx, %rsi	# tmp111,
	movq	%rax, %rdi	# tmp112,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30276
	je	.L1760	#,
	.loc 1 6905 0
	movl	$2, -52(%rbp)	#, matching_memory
	jmp	.L1758	#
.L1760:
	.loc 1 6907 0
	movl	-72(%rbp), %eax	# mode, tmp113
	movl	%eax, %edi	# tmp113,
	call	gen_reg_rtx	#
	movq	%rax, -32(%rbp)	# tmp114, dst
.L1758:
	.loc 1 6911 0
	movq	-48(%rbp), %rax	# src1, tmp115
	movzwl	(%rax), %eax	# src1_2->code, D.30277
	cmpw	$66, %ax	#, D.30277
	jne	.L1761	#,
	.loc 1 6911 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# src2, tmp116
	movzwl	(%rax), %eax	# src2_7->code, D.30277
	cmpw	$66, %ax	#, D.30277
	jne	.L1761	#,
	.loc 1 6913 0 is_stmt 1
	cmpl	$2, -52(%rbp)	#, matching_memory
	je	.L1762	#,
	.loc 1 6914 0
	movq	-40(%rbp), %rdx	# src2, tmp117
	movl	-72(%rbp), %eax	# mode, tmp118
	movq	%rdx, %rsi	# tmp117,
	movl	%eax, %edi	# tmp118,
	call	force_reg	#
	movq	%rax, -40(%rbp)	# tmp119, src2
	jmp	.L1761	#
.L1762:
	.loc 1 6916 0
	movq	-48(%rbp), %rdx	# src1, tmp120
	movl	-72(%rbp), %eax	# mode, tmp121
	movq	%rdx, %rsi	# tmp120,
	movl	%eax, %edi	# tmp121,
	call	force_reg	#
	movq	%rax, -48(%rbp)	# tmp122, src1
.L1761:
	.loc 1 6921 0
	movq	-48(%rbp), %rax	# src1, tmp123
	movzwl	(%rax), %eax	# src1_3->code, D.30277
	cmpw	$67, %ax	#, D.30277
	je	.L1763	#,
	.loc 1 6921 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# src1, tmp124
	movzwl	(%rax), %eax	# src1_3->code, D.30277
	cmpw	$68, %ax	#, D.30277
	je	.L1763	#,
	movq	-48(%rbp), %rax	# src1, tmp125
	movzwl	(%rax), %eax	# src1_3->code, D.30277
	cmpw	$54, %ax	#, D.30277
	je	.L1763	#,
	movq	-48(%rbp), %rax	# src1, tmp126
	movzwl	(%rax), %eax	# src1_3->code, D.30277
	cmpw	$55, %ax	#, D.30277
	je	.L1763	#,
	movq	-48(%rbp), %rax	# src1, tmp127
	movzwl	(%rax), %eax	# src1_3->code, D.30277
	cmpw	$58, %ax	#, D.30277
	je	.L1763	#,
	movq	-48(%rbp), %rax	# src1, tmp128
	movzwl	(%rax), %eax	# src1_3->code, D.30277
	cmpw	$134, %ax	#, D.30277
	je	.L1763	#,
	movq	-48(%rbp), %rax	# src1, tmp129
	movzwl	(%rax), %eax	# src1_3->code, D.30277
	cmpw	$56, %ax	#, D.30277
	je	.L1763	#,
	movq	-48(%rbp), %rax	# src1, tmp130
	movzwl	(%rax), %eax	# src1_3->code, D.30277
	cmpw	$140, %ax	#, D.30277
	je	.L1763	#,
	.loc 1 6922 0 is_stmt 1
	cmpl	$0, -52(%rbp)	#, matching_memory
	jne	.L1764	#,
	.loc 1 6922 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# src1, tmp131
	movzwl	(%rax), %eax	# src1_3->code, D.30277
	cmpw	$66, %ax	#, D.30277
	jne	.L1764	#,
.L1763:
	.loc 1 6923 0 is_stmt 1
	movl	-68(%rbp), %eax	# code, code.862
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30275
	cmpb	$99, %al	#, D.30275
	je	.L1764	#,
	.loc 1 6924 0
	movq	-48(%rbp), %rdx	# src1, tmp133
	movl	-72(%rbp), %eax	# mode, tmp134
	movq	%rdx, %rsi	# tmp133,
	movl	%eax, %edi	# tmp134,
	call	force_reg	#
	movq	%rax, -48(%rbp)	# tmp135, src1
.L1764:
	.loc 1 6927 0
	movl	optimize(%rip), %eax	# optimize, optimize.863
	testl	%eax, %eax	# optimize.863
	je	.L1765	#,
	.loc 1 6927 0 is_stmt 0 discriminator 1
	movl	no_new_pseudos(%rip), %eax	# no_new_pseudos, no_new_pseudos.864
	testl	%eax, %eax	# no_new_pseudos.864
	jne	.L1765	#,
	.loc 1 6929 0 is_stmt 1
	movq	-32(%rbp), %rax	# dst, tmp136
	movzwl	(%rax), %eax	# dst_10->code, D.30277
	cmpw	$66, %ax	#, D.30277
	jne	.L1766	#,
	.loc 1 6930 0
	movl	-72(%rbp), %eax	# mode, tmp137
	movl	%eax, %edi	# tmp137,
	call	gen_reg_rtx	#
	movq	%rax, -32(%rbp)	# tmp138, dst
.L1766:
	.loc 1 6931 0
	movq	-48(%rbp), %rax	# src1, tmp139
	movzwl	(%rax), %eax	# src1_4->code, D.30277
	cmpw	$66, %ax	#, D.30277
	jne	.L1767	#,
	.loc 1 6932 0
	movq	-48(%rbp), %rdx	# src1, tmp140
	movl	-72(%rbp), %eax	# mode, tmp141
	movq	%rdx, %rsi	# tmp140,
	movl	%eax, %edi	# tmp141,
	call	force_reg	#
	movq	%rax, -48(%rbp)	# tmp142, src1
.L1767:
	.loc 1 6933 0
	movq	-40(%rbp), %rax	# src2, tmp143
	movzwl	(%rax), %eax	# src2_8->code, D.30277
	cmpw	$66, %ax	#, D.30277
	jne	.L1765	#,
	.loc 1 6934 0
	movq	-40(%rbp), %rdx	# src2, tmp144
	movl	-72(%rbp), %eax	# mode, tmp145
	movq	%rdx, %rsi	# tmp144,
	movl	%eax, %edi	# tmp145,
	call	force_reg	#
	movq	%rax, -40(%rbp)	# tmp146, src2
.L1765:
	.loc 1 6939 0
	movq	-40(%rbp), %rcx	# src2, tmp147
	movq	-48(%rbp), %rdx	# src1, tmp148
	movl	-72(%rbp), %esi	# mode, tmp149
	movl	-68(%rbp), %eax	# code, tmp150
	movl	%eax, %edi	# tmp150,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.30278
	movq	-32(%rbp), %rax	# dst, tmp151
	movq	%rdx, %rcx	# D.30278,
	movq	%rax, %rdx	# tmp151,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -16(%rbp)	# tmp152, op
	.loc 1 6940 0
	movl	reload_in_progress(%rip), %eax	# reload_in_progress, reload_in_progress.865
	testl	%eax, %eax	# reload_in_progress.865
	je	.L1768	#,
	.loc 1 6944 0
	cmpl	$75, -68(%rbp)	#, code
	je	.L1769	#,
	.loc 1 6945 0
	movl	$__FUNCTION__.15814, %edx	#,
	movl	$6945, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1769:
	.loc 1 6946 0
	movq	-16(%rbp), %rax	# op, tmp153
	movq	%rax, %rdi	# tmp153,
	call	emit_insn	#
	jmp	.L1770	#
.L1768:
	.loc 1 6950 0
	movl	$17, %esi	#,
	movl	$52, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	# D.30278,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -8(%rbp)	# tmp154, clob
	.loc 1 6951 0
	movq	-8(%rbp), %rdx	# clob, tmp155
	movq	-16(%rbp), %rax	# op, tmp156
	movq	%rax, %rsi	# tmp156,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movq	%rax, %rdx	# D.30279,
	movl	$0, %esi	#,
	movl	$39, %edi	#,
	call	gen_rtx_fmt_E	#
	movq	%rax, %rdi	# D.30278,
	call	emit_insn	#
.L1770:
	.loc 1 6955 0
	movq	-80(%rbp), %rax	# operands, tmp157
	movq	(%rax), %rax	# *operands_13(D), D.30278
	cmpq	-32(%rbp), %rax	# dst, D.30278
	je	.L1755	#,
	.loc 1 6956 0
	movq	-80(%rbp), %rax	# operands, tmp158
	movq	(%rax), %rax	# *operands_13(D), D.30278
	movq	-32(%rbp), %rdx	# dst, tmp159
	movq	%rdx, %rsi	# tmp159,
	movq	%rax, %rdi	# D.30278,
	call	emit_move_insn	#
.L1755:
	.loc 1 6957 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE110:
	.size	ix86_expand_binary_operator, .-ix86_expand_binary_operator
	.globl	ix86_binary_operator_ok
	.type	ix86_binary_operator_ok, @function
ix86_binary_operator_ok:
.LFB111:
	.loc 1 6967 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# code, code
	movl	%esi, -8(%rbp)	# mode, mode
	movq	%rdx, -16(%rbp)	# operands, operands
	.loc 1 6969 0
	movq	-16(%rbp), %rax	# operands, tmp114
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rax	# *_3, D.30282
	movzwl	(%rax), %eax	# _4->code, D.30283
	cmpw	$66, %ax	#, D.30283
	jne	.L1773	#,
	.loc 1 6969 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# operands, tmp115
	addq	$16, %rax	#, D.30281
	movq	(%rax), %rax	# *_6, D.30282
	movzwl	(%rax), %eax	# _7->code, D.30283
	cmpw	$66, %ax	#, D.30283
	jne	.L1773	#,
	.loc 1 6970 0 is_stmt 1
	movl	$0, %eax	#, D.30280
	jmp	.L1774	#
.L1773:
	.loc 1 6972 0
	movq	-16(%rbp), %rax	# operands, tmp116
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rax	# *_10, D.30282
	movzwl	(%rax), %eax	# _11->code, D.30283
	cmpw	$67, %ax	#, D.30283
	je	.L1775	#,
	.loc 1 6972 0 is_stmt 0 discriminator 2
	movq	-16(%rbp), %rax	# operands, tmp117
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rax	# *_13, D.30282
	movzwl	(%rax), %eax	# _14->code, D.30283
	cmpw	$68, %ax	#, D.30283
	je	.L1775	#,
	.loc 1 6972 0 discriminator 1
	movq	-16(%rbp), %rax	# operands, tmp118
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rax	# *_16, D.30282
	movzwl	(%rax), %eax	# _17->code, D.30283
	cmpw	$54, %ax	#, D.30283
	je	.L1775	#,
	movq	-16(%rbp), %rax	# operands, tmp119
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rax	# *_19, D.30282
	movzwl	(%rax), %eax	# _20->code, D.30283
	cmpw	$55, %ax	#, D.30283
	je	.L1775	#,
	movq	-16(%rbp), %rax	# operands, tmp120
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rax	# *_22, D.30282
	movzwl	(%rax), %eax	# _23->code, D.30283
	cmpw	$58, %ax	#, D.30283
	je	.L1775	#,
	movq	-16(%rbp), %rax	# operands, tmp121
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rax	# *_25, D.30282
	movzwl	(%rax), %eax	# _26->code, D.30283
	cmpw	$134, %ax	#, D.30283
	je	.L1775	#,
	movq	-16(%rbp), %rax	# operands, tmp122
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rax	# *_28, D.30282
	movzwl	(%rax), %eax	# _29->code, D.30283
	cmpw	$56, %ax	#, D.30283
	je	.L1775	#,
	movq	-16(%rbp), %rax	# operands, tmp123
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rax	# *_31, D.30282
	movzwl	(%rax), %eax	# _32->code, D.30283
	cmpw	$140, %ax	#, D.30283
	jne	.L1776	#,
.L1775:
	movl	-4(%rbp), %eax	# code, code.866
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30284
	cmpb	$99, %al	#, D.30284
	je	.L1776	#,
	.loc 1 6973 0 is_stmt 1
	movl	$0, %eax	#, D.30280
	jmp	.L1774	#
.L1776:
	.loc 1 6975 0
	movq	-16(%rbp), %rax	# operands, tmp125
	movq	(%rax), %rax	# *operands_2(D), D.30282
	movzwl	(%rax), %eax	# _38->code, D.30283
	cmpw	$66, %ax	#, D.30283
	jne	.L1777	#,
	.loc 1 6976 0
	movq	-16(%rbp), %rax	# operands, tmp126
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rdx	# *_40, D.30282
	movq	-16(%rbp), %rax	# operands, tmp127
	movq	(%rax), %rax	# *operands_2(D), D.30282
	movq	%rdx, %rsi	# D.30282,
	movq	%rax, %rdi	# D.30282,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30280
	jne	.L1777	#,
	.loc 1 6977 0 discriminator 1
	movl	-4(%rbp), %eax	# code, code.867
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30284
	.loc 1 6976 0 discriminator 1
	cmpb	$99, %al	#, D.30284
	jne	.L1778	#,
	.loc 1 6978 0
	movq	-16(%rbp), %rax	# operands, tmp129
	addq	$16, %rax	#, D.30281
	movq	(%rax), %rdx	# *_46, D.30282
	movq	-16(%rbp), %rax	# operands, tmp130
	movq	(%rax), %rax	# *operands_2(D), D.30282
	movq	%rdx, %rsi	# D.30282,
	movq	%rax, %rdi	# D.30282,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30280
	jne	.L1777	#,
.L1778:
	.loc 1 6979 0
	movl	$0, %eax	#, D.30280
	jmp	.L1774	#
.L1777:
	.loc 1 6982 0
	movq	-16(%rbp), %rax	# operands, tmp131
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rax	# *_51, D.30282
	movzwl	(%rax), %eax	# _52->code, D.30283
	cmpw	$66, %ax	#, D.30283
	jne	.L1779	#,
	.loc 1 6983 0
	movl	-4(%rbp), %eax	# code, code.868
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30284
	cmpb	$99, %al	#, D.30284
	je	.L1779	#,
	.loc 1 6984 0
	movq	-16(%rbp), %rax	# operands, tmp133
	addq	$8, %rax	#, D.30281
	movq	(%rax), %rdx	# *_56, D.30282
	movq	-16(%rbp), %rax	# operands, tmp134
	movq	(%rax), %rax	# *operands_2(D), D.30282
	movq	%rdx, %rsi	# D.30282,
	movq	%rax, %rdi	# D.30282,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30280
	jne	.L1779	#,
	.loc 1 6985 0
	movl	$0, %eax	#, D.30280
	jmp	.L1774	#
.L1779:
	.loc 1 6986 0
	movl	$1, %eax	#, D.30280
.L1774:
	.loc 1 6987 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE111:
	.size	ix86_binary_operator_ok, .-ix86_binary_operator_ok
	.globl	ix86_expand_unary_operator
	.type	ix86_expand_unary_operator, @function
ix86_expand_unary_operator:
.LFB112:
	.loc 1 6998 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movl	%edi, -52(%rbp)	# code, code
	movl	%esi, -56(%rbp)	# mode, mode
	movq	%rdx, -64(%rbp)	# operands, operands
	.loc 1 7002 0
	movq	-64(%rbp), %rax	# operands, tmp73
	movq	(%rax), %rax	# *operands_7(D), tmp74
	movq	%rax, -24(%rbp)	# tmp74, dst
	.loc 1 7003 0
	movq	-64(%rbp), %rax	# operands, tmp75
	movq	8(%rax), %rax	# MEM[(struct rtx_def * *)operands_7(D) + 8B], tmp76
	movq	%rax, -32(%rbp)	# tmp76, src
	.loc 1 7007 0
	movl	$0, -36(%rbp)	#, matching_memory
	.loc 1 7008 0
	movq	-24(%rbp), %rax	# dst, tmp77
	movzwl	(%rax), %eax	# dst_8->code, D.30285
	cmpw	$66, %ax	#, D.30285
	jne	.L1781	#,
	.loc 1 7010 0
	movq	-32(%rbp), %rdx	# src, tmp78
	movq	-24(%rbp), %rax	# dst, tmp79
	movq	%rdx, %rsi	# tmp78,
	movq	%rax, %rdi	# tmp79,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30286
	je	.L1782	#,
	.loc 1 7011 0
	movl	$1, -36(%rbp)	#, matching_memory
	jmp	.L1781	#
.L1782:
	.loc 1 7013 0
	movl	-56(%rbp), %eax	# mode, tmp80
	movl	%eax, %edi	# tmp80,
	call	gen_reg_rtx	#
	movq	%rax, -24(%rbp)	# tmp81, dst
.L1781:
	.loc 1 7017 0
	cmpl	$0, -36(%rbp)	#, matching_memory
	jne	.L1783	#,
	.loc 1 7017 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# src, tmp82
	movzwl	(%rax), %eax	# src_9->code, D.30285
	cmpw	$66, %ax	#, D.30285
	jne	.L1783	#,
	.loc 1 7018 0 is_stmt 1
	movq	-32(%rbp), %rdx	# src, tmp83
	movl	-56(%rbp), %eax	# mode, tmp84
	movq	%rdx, %rsi	# tmp83,
	movl	%eax, %edi	# tmp84,
	call	force_reg	#
	movq	%rax, -32(%rbp)	# tmp85, src
.L1783:
	.loc 1 7021 0
	movl	optimize(%rip), %eax	# optimize, optimize.869
	testl	%eax, %eax	# optimize.869
	je	.L1784	#,
	.loc 1 7021 0 is_stmt 0 discriminator 1
	movl	no_new_pseudos(%rip), %eax	# no_new_pseudos, no_new_pseudos.870
	testl	%eax, %eax	# no_new_pseudos.870
	jne	.L1784	#,
	.loc 1 7023 0 is_stmt 1
	movq	-24(%rbp), %rax	# dst, tmp86
	movzwl	(%rax), %eax	# dst_4->code, D.30285
	cmpw	$66, %ax	#, D.30285
	jne	.L1785	#,
	.loc 1 7024 0
	movl	-56(%rbp), %eax	# mode, tmp87
	movl	%eax, %edi	# tmp87,
	call	gen_reg_rtx	#
	movq	%rax, -24(%rbp)	# tmp88, dst
.L1785:
	.loc 1 7025 0
	movq	-32(%rbp), %rax	# src, tmp89
	movzwl	(%rax), %eax	# src_2->code, D.30285
	cmpw	$66, %ax	#, D.30285
	jne	.L1784	#,
	.loc 1 7026 0
	movq	-32(%rbp), %rdx	# src, tmp90
	movl	-56(%rbp), %eax	# mode, tmp91
	movq	%rdx, %rsi	# tmp90,
	movl	%eax, %edi	# tmp91,
	call	force_reg	#
	movq	%rax, -32(%rbp)	# tmp92, src
.L1784:
	.loc 1 7031 0
	movq	-32(%rbp), %rdx	# src, tmp93
	movl	-56(%rbp), %ecx	# mode, tmp94
	movl	-52(%rbp), %eax	# code, tmp95
	movl	%ecx, %esi	# tmp94,
	movl	%eax, %edi	# tmp95,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdx	#, D.30287
	movq	-24(%rbp), %rax	# dst, tmp96
	movq	%rdx, %rcx	# D.30287,
	movq	%rax, %rdx	# tmp96,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -16(%rbp)	# tmp97, op
	.loc 1 7032 0
	movl	reload_in_progress(%rip), %eax	# reload_in_progress, reload_in_progress.871
	testl	%eax, %eax	# reload_in_progress.871
	jne	.L1786	#,
	.loc 1 7032 0 is_stmt 0 discriminator 1
	cmpl	$86, -52(%rbp)	#, code
	jne	.L1787	#,
.L1786:
	.loc 1 7036 0 is_stmt 1
	cmpl	$86, -52(%rbp)	#, code
	je	.L1788	#,
	.loc 1 7037 0
	movl	$__FUNCTION__.15830, %edx	#,
	movl	$7037, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1788:
	.loc 1 7038 0
	movq	-16(%rbp), %rax	# op, tmp98
	movq	%rax, %rdi	# tmp98,
	call	emit_insn	#
	jmp	.L1789	#
.L1787:
	.loc 1 7042 0
	movl	$17, %esi	#,
	movl	$52, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	# D.30287,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -8(%rbp)	# tmp99, clob
	.loc 1 7043 0
	movq	-8(%rbp), %rdx	# clob, tmp100
	movq	-16(%rbp), %rax	# op, tmp101
	movq	%rax, %rsi	# tmp101,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movq	%rax, %rdx	# D.30288,
	movl	$0, %esi	#,
	movl	$39, %edi	#,
	call	gen_rtx_fmt_E	#
	movq	%rax, %rdi	# D.30287,
	call	emit_insn	#
.L1789:
	.loc 1 7047 0
	movq	-64(%rbp), %rax	# operands, tmp102
	movq	(%rax), %rax	# *operands_7(D), D.30287
	cmpq	-24(%rbp), %rax	# dst, D.30287
	je	.L1780	#,
	.loc 1 7048 0
	movq	-64(%rbp), %rax	# operands, tmp103
	movq	(%rax), %rax	# *operands_7(D), D.30287
	movq	-24(%rbp), %rdx	# dst, tmp104
	movq	%rdx, %rsi	# tmp104,
	movq	%rax, %rdi	# D.30287,
	call	emit_move_insn	#
.L1780:
	.loc 1 7049 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE112:
	.size	ix86_expand_unary_operator, .-ix86_expand_unary_operator
	.globl	ix86_unary_operator_ok
	.type	ix86_unary_operator_ok, @function
ix86_unary_operator_ok:
.LFB113:
	.loc 1 7059 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# code, code
	movl	%esi, -8(%rbp)	# mode, mode
	movq	%rdx, -16(%rbp)	# operands, operands
	.loc 1 7061 0
	movq	-16(%rbp), %rax	# operands, tmp70
	movq	(%rax), %rax	# *operands_2(D), D.30290
	movzwl	(%rax), %eax	# _3->code, D.30291
	cmpw	$66, %ax	#, D.30291
	je	.L1792	#,
	.loc 1 7062 0
	movq	-16(%rbp), %rax	# operands, tmp71
	addq	$8, %rax	#, D.30292
	movq	(%rax), %rax	# *_5, D.30290
	movzwl	(%rax), %eax	# _6->code, D.30291
	cmpw	$66, %ax	#, D.30291
	jne	.L1793	#,
.L1792:
	.loc 1 7063 0
	movq	-16(%rbp), %rax	# operands, tmp72
	addq	$8, %rax	#, D.30292
	movq	(%rax), %rdx	# *_8, D.30290
	movq	-16(%rbp), %rax	# operands, tmp73
	movq	(%rax), %rax	# *operands_2(D), D.30290
	movq	%rdx, %rsi	# D.30290,
	movq	%rax, %rdi	# D.30290,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30289
	jne	.L1793	#,
	.loc 1 7064 0
	movl	$0, %eax	#, D.30289
	jmp	.L1794	#
.L1793:
	.loc 1 7065 0
	movl	$1, %eax	#, D.30289
.L1794:
	.loc 1 7066 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE113:
	.size	ix86_unary_operator_ok, .-ix86_unary_operator_ok
	.globl	ix86_match_ccmode
	.type	ix86_match_ccmode, @function
ix86_match_ccmode:
.LFB114:
	.loc 1 7076 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	movl	%esi, -28(%rbp)	# req_mode, req_mode
	.loc 1 7080 0
	movq	-24(%rbp), %rax	# insn, tmp75
	movq	32(%rax), %rax	# insn_3(D)->fld[3].rtx, tmp76
	movq	%rax, -8(%rbp)	# tmp76, set
	.loc 1 7081 0
	movq	-8(%rbp), %rax	# set, tmp77
	movzwl	(%rax), %eax	# set_4->code, D.30294
	cmpw	$39, %ax	#, D.30294
	jne	.L1796	#,
	.loc 1 7082 0
	movq	-8(%rbp), %rax	# set, tmp78
	movq	8(%rax), %rax	# set_4->fld[0].rtvec, D.30295
	movq	8(%rax), %rax	# _6->elem, tmp79
	movq	%rax, -8(%rbp)	# tmp79, set
.L1796:
	.loc 1 7083 0
	movq	-8(%rbp), %rax	# set, tmp80
	movzwl	(%rax), %eax	# set_1->code, D.30294
	cmpw	$47, %ax	#, D.30294
	je	.L1797	#,
	.loc 1 7084 0
	movl	$__FUNCTION__.15842, %edx	#,
	movl	$7084, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1797:
	.loc 1 7085 0
	movq	-8(%rbp), %rax	# set, tmp81
	movq	16(%rax), %rax	# set_1->fld[1].rtx, D.30296
	movzwl	(%rax), %eax	# _9->code, D.30294
	cmpw	$74, %ax	#, D.30294
	je	.L1798	#,
	.loc 1 7086 0
	movl	$__FUNCTION__.15842, %edx	#,
	movl	$7086, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1798:
	.loc 1 7088 0
	movq	-8(%rbp), %rax	# set, tmp82
	movq	8(%rax), %rax	# set_1->fld[0].rtx, D.30296
	movzbl	2(%rax), %eax	# _11->mode, D.30297
	movzbl	%al, %eax	# D.30297, tmp83
	movl	%eax, -12(%rbp)	# tmp83, set_mode
	.loc 1 7089 0
	movl	-12(%rbp), %eax	# set_mode, tmp85
	subl	$52, %eax	#, tmp84
	cmpl	$4, %eax	#, tmp84
	ja	.L1799	#,
	movl	%eax, %eax	# tmp84, tmp86
	movq	.L1801(,%rax,8), %rax	#, tmp87
	jmp	*%rax	# tmp87
	.section	.rodata
	.align 8
	.align 4
.L1801:
	.quad	.L1800
	.quad	.L1802
	.quad	.L1803
	.quad	.L1804
	.quad	.L1811
	.text
.L1804:
	.loc 1 7092 0
	cmpl	$55, -28(%rbp)	#, req_mode
	je	.L1806	#,
	.loc 1 7093 0
	cmpl	$52, -28(%rbp)	#, req_mode
	jne	.L1807	#,
	.loc 1 7094 0
	movq	-8(%rbp), %rax	# set, tmp88
	movq	16(%rax), %rax	# set_1->fld[1].rtx, D.30296
	movq	16(%rax), %rdx	# _15->fld[1].rtx, D.30296
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30296
	cmpq	%rax, %rdx	# D.30296, D.30296
	je	.L1806	#,
.L1807:
	.loc 1 7095 0
	movl	$0, %eax	#, D.30293
	jmp	.L1808	#
.L1806:
	.loc 1 7096 0
	jmp	.L1809	#
.L1800:
	.loc 1 7098 0
	cmpl	$53, -28(%rbp)	#, req_mode
	jne	.L1802	#,
	.loc 1 7099 0
	movl	$0, %eax	#, D.30293
	jmp	.L1808	#
.L1802:
	.loc 1 7102 0
	cmpl	$54, -28(%rbp)	#, req_mode
	je	.L1810	#,
	.loc 1 7102 0 is_stmt 0 discriminator 1
	cmpl	$55, -28(%rbp)	#, req_mode
	jne	.L1803	#,
.L1810:
	.loc 1 7103 0 is_stmt 1
	movl	$0, %eax	#, D.30293
	jmp	.L1808	#
.L1803:
	.loc 1 7106 0
	cmpl	$56, -28(%rbp)	#, req_mode
	jne	.L1805	#,
	.loc 1 7107 0
	movl	$0, %eax	#, D.30293
	jmp	.L1808	#
.L1805:
	.loc 1 7110 0
	jmp	.L1811	#
.L1799:
	.loc 1 7113 0
	movl	$__FUNCTION__.15842, %edx	#,
	movl	$7113, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1811:
	.loc 1 7110 0
	nop
.L1809:
	.loc 1 7116 0
	movq	-8(%rbp), %rax	# set, tmp89
	movq	16(%rax), %rax	# set_1->fld[1].rtx, D.30296
	movzbl	2(%rax), %eax	# _22->mode, D.30297
	movzbl	%al, %eax	# D.30297, D.30298
	cmpl	-12(%rbp), %eax	# set_mode, D.30298
	sete	%al	#, D.30299
	movzbl	%al, %eax	# D.30299, D.30293
.L1808:
	.loc 1 7117 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE114:
	.size	ix86_match_ccmode, .-ix86_match_ccmode
	.type	ix86_expand_int_compare, @function
ix86_expand_int_compare:
.LFB115:
	.loc 1 7125 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movl	%edi, -36(%rbp)	# code, code
	movq	%rsi, -48(%rbp)	# op0, op0
	movq	%rdx, -56(%rbp)	# op1, op1
	.loc 1 7129 0
	movq	-56(%rbp), %rdx	# op1, tmp63
	movq	-48(%rbp), %rcx	# op0, tmp64
	movl	-36(%rbp), %eax	# code, tmp65
	movq	%rcx, %rsi	# tmp64,
	movl	%eax, %edi	# tmp65,
	call	ix86_cc_mode	#
	movl	%eax, -20(%rbp)	# tmp66, cmpmode
	.loc 1 7130 0
	movl	-20(%rbp), %eax	# cmpmode, tmp67
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp67,
	call	gen_rtx_REG	#
	movq	%rax, -16(%rbp)	# tmp68, flags
	.loc 1 7134 0
	movq	-56(%rbp), %rcx	# op1, tmp69
	movq	-48(%rbp), %rdx	# op0, tmp70
	movl	-20(%rbp), %eax	# cmpmode, tmp71
	movl	%eax, %esi	# tmp71,
	movl	$74, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -8(%rbp)	# tmp72, tmp
	.loc 1 7135 0
	movq	-8(%rbp), %rdx	# tmp, tmp73
	movq	-16(%rbp), %rax	# flags, tmp74
	movq	%rdx, %rcx	# tmp73,
	movq	%rax, %rdx	# tmp74,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30300,
	call	emit_insn	#
	.loc 1 7139 0
	movq	const_int_rtx+512(%rip), %rcx	# const_int_rtx, D.30300
	movq	-16(%rbp), %rdx	# flags, tmp75
	movl	-36(%rbp), %eax	# code, tmp76
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp76,
	call	gen_rtx_fmt_ee	#
	.loc 1 7140 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE115:
	.size	ix86_expand_int_compare, .-ix86_expand_int_compare
	.globl	ix86_fp_compare_mode
	.type	ix86_fp_compare_mode, @function
ix86_fp_compare_mode:
.LFB116:
	.loc 1 7148 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# code, code
	.loc 1 7154 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.873
	andl	$16, %eax	#, D.30302
	testl	%eax, %eax	# D.30302
	je	.L1815	#,
	.loc 1 7154 0 is_stmt 0 discriminator 1
	movl	$58, %eax	#, iftmp.872
	jmp	.L1816	#
.L1815:
	.loc 1 7154 0 discriminator 2
	movl	$57, %eax	#, iftmp.872
.L1816:
	.loc 1 7155 0 is_stmt 1 discriminator 3
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE116:
	.size	ix86_fp_compare_mode, .-ix86_fp_compare_mode
	.globl	ix86_cc_mode
	.type	ix86_cc_mode, @function
ix86_cc_mode:
.LFB117:
	.loc 1 7161 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -4(%rbp)	# code, code
	movq	%rsi, -16(%rbp)	# op0, op0
	movq	%rdx, -24(%rbp)	# op1, op1
	.loc 1 7162 0
	movq	-16(%rbp), %rax	# op0, tmp66
	movzbl	2(%rax), %eax	# op0_2(D)->mode, D.30305
	movzbl	%al, %eax	# D.30305, D.30306
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30307
	cmpl	$2, %eax	#, D.30307
	jne	.L1819	#,
	.loc 1 7163 0
	movl	-4(%rbp), %eax	# code, tmp68
	movl	%eax, %edi	# tmp68,
	call	ix86_fp_compare_mode	#
	jmp	.L1820	#
.L1819:
	.loc 1 7164 0
	movl	-4(%rbp), %eax	# code, tmp70
	subl	$48, %eax	#, tmp69
	cmpl	$63, %eax	#, tmp69
	ja	.L1821	#,
	movl	%eax, %eax	# tmp69, tmp71
	movq	.L1823(,%rax,8), %rax	#, tmp72
	jmp	*%rax	# tmp72
	.section	.rodata
	.align 8
	.align 4
.L1823:
	.quad	.L1822
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1821
	.quad	.L1824
	.quad	.L1824
	.quad	.L1825
	.quad	.L1826
	.quad	.L1826
	.quad	.L1825
	.quad	.L1827
	.quad	.L1827
	.quad	.L1827
	.quad	.L1827
	.text
.L1824:
	.loc 1 7169 0
	movl	$56, %eax	#, D.30304
	jmp	.L1820	#
.L1827:
	.loc 1 7175 0
	movl	$52, %eax	#, D.30304
	jmp	.L1820	#
.L1825:
	.loc 1 7180 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30308
	cmpq	-24(%rbp), %rax	# op1, D.30308
	jne	.L1828	#,
	.loc 1 7181 0
	movl	$54, %eax	#, D.30304
	jmp	.L1820	#
.L1828:
	.loc 1 7184 0
	movl	$53, %eax	#, D.30304
	jmp	.L1820	#
.L1826:
	.loc 1 7191 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30308
	cmpq	-24(%rbp), %rax	# op1, D.30308
	jne	.L1829	#,
	.loc 1 7192 0
	movl	$55, %eax	#, D.30304
	jmp	.L1820	#
.L1829:
	.loc 1 7194 0
	movl	$53, %eax	#, D.30304
	jmp	.L1820	#
.L1822:
	.loc 1 7198 0
	movl	$52, %eax	#, D.30304
	jmp	.L1820	#
.L1821:
	.loc 1 7200 0
	movl	$__FUNCTION__.15878, %edx	#,
	movl	$7200, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1820:
	.loc 1 7202 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE117:
	.size	ix86_cc_mode, .-ix86_cc_mode
	.globl	ix86_use_fcomi_compare
	.type	ix86_use_fcomi_compare, @function
ix86_use_fcomi_compare:
.LFB118:
	.loc 1 7209 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# code, code
	.loc 1 7210 0
	movl	-36(%rbp), %eax	# code, tmp66
	movl	%eax, %edi	# tmp66,
	call	swap_condition	#
	movl	%eax, -20(%rbp)	# tmp67, swapped_code
	.loc 1 7211 0
	movl	-36(%rbp), %eax	# code, tmp68
	movl	%eax, %edi	# tmp68,
	call	ix86_fp_comparison_cost	#
	movl	%eax, %ebx	#, D.30309
	movl	-36(%rbp), %eax	# code, tmp69
	movl	%eax, %edi	# tmp69,
	call	ix86_fp_comparison_fcomi_cost	#
	.loc 1 7212 0
	cmpl	%eax, %ebx	# D.30309, D.30309
	je	.L1831	#,
	.loc 1 7212 0 is_stmt 0 discriminator 2
	movl	-20(%rbp), %eax	# swapped_code, tmp70
	movl	%eax, %edi	# tmp70,
	call	ix86_fp_comparison_cost	#
	movl	%eax, %ebx	#, D.30309
	.loc 1 7213 0 is_stmt 1 discriminator 2
	movl	-20(%rbp), %eax	# swapped_code, tmp71
	movl	%eax, %edi	# tmp71,
	call	ix86_fp_comparison_fcomi_cost	#
	.loc 1 7212 0 discriminator 2
	cmpl	%eax, %ebx	# D.30309, D.30309
	jne	.L1832	#,
.L1831:
	.loc 1 7212 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.874
	jmp	.L1833	#
.L1832:
	.loc 1 7212 0 discriminator 3
	movl	$0, %eax	#, iftmp.874
.L1833:
	.loc 1 7214 0 is_stmt 1
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE118:
	.size	ix86_use_fcomi_compare, .-ix86_use_fcomi_compare
	.type	ix86_prepare_fp_compare_args, @function
ix86_prepare_fp_compare_args:
.LFB119:
	.loc 1 7224 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -68(%rbp)	# code, code
	movq	%rsi, -80(%rbp)	# pop0, pop0
	movq	%rdx, -88(%rbp)	# pop1, pop1
	.loc 1 7225 0
	movl	-68(%rbp), %eax	# code, tmp99
	movl	%eax, %edi	# tmp99,
	call	ix86_fp_compare_mode	#
	movl	%eax, -60(%rbp)	# tmp100, fpcmp_mode
	.loc 1 7226 0
	movq	-80(%rbp), %rax	# pop0, tmp101
	movq	(%rax), %rax	# *pop0_15(D), tmp102
	movq	%rax, -48(%rbp)	# tmp102, op0
	movq	-88(%rbp), %rax	# pop1, tmp103
	movq	(%rax), %rax	# *pop1_17(D), tmp104
	movq	%rax, -40(%rbp)	# tmp104, op1
	.loc 1 7227 0
	movq	-48(%rbp), %rax	# op0, tmp105
	movzbl	2(%rax), %eax	# op0_16->mode, D.30310
	movzbl	%al, %eax	# D.30310, tmp106
	movl	%eax, -56(%rbp)	# tmp106, op_mode
	.loc 1 7228 0
	movq	-48(%rbp), %rax	# op0, tmp107
	movzwl	(%rax), %eax	# op0_16->code, D.30311
	cmpw	$61, %ax	#, D.30311
	jne	.L1836	#,
	.loc 1 7228 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# op0, tmp108
	movl	8(%rax), %eax	# op0_16->fld[0].rtuint, D.30312
	cmpl	$20, %eax	#, D.30312
	jbe	.L1837	#,
	.loc 1 7228 0 discriminator 3
	movq	-48(%rbp), %rax	# op0, tmp109
	movl	8(%rax), %eax	# op0_16->fld[0].rtuint, D.30312
	cmpl	$28, %eax	#, D.30312
	jbe	.L1838	#,
.L1837:
	.loc 1 7228 0 discriminator 4
	movq	-48(%rbp), %rax	# op0, tmp110
	movl	8(%rax), %eax	# op0_16->fld[0].rtuint, D.30312
	cmpl	$44, %eax	#, D.30312
	jbe	.L1836	#,
	.loc 1 7228 0 discriminator 1
	movq	-48(%rbp), %rax	# op0, tmp111
	movl	8(%rax), %eax	# op0_16->fld[0].rtuint, D.30312
	cmpl	$52, %eax	#, D.30312
	ja	.L1836	#,
.L1838:
	movl	$1, %eax	#, iftmp.875
	jmp	.L1839	#
.L1836:
	.loc 1 7228 0 discriminator 2
	movl	$0, %eax	#, iftmp.875
.L1839:
	.loc 1 7228 0 discriminator 5
	movl	%eax, %edx	# iftmp.875, D.30313
	andl	$1, %edx	#, D.30313
	movq	-40(%rbp), %rax	# op1, tmp112
	movzwl	(%rax), %eax	# op1_18->code, D.30311
	cmpw	$61, %ax	#, D.30311
	jne	.L1840	#,
	.loc 1 7228 0 discriminator 1
	movq	-40(%rbp), %rax	# op1, tmp113
	movl	8(%rax), %eax	# op1_18->fld[0].rtuint, D.30312
	cmpl	$20, %eax	#, D.30312
	jbe	.L1841	#,
	.loc 1 7228 0 discriminator 3
	movq	-40(%rbp), %rax	# op1, tmp114
	movl	8(%rax), %eax	# op1_18->fld[0].rtuint, D.30312
	cmpl	$28, %eax	#, D.30312
	jbe	.L1842	#,
.L1841:
	.loc 1 7228 0 discriminator 4
	movq	-40(%rbp), %rax	# op1, tmp115
	movl	8(%rax), %eax	# op1_18->fld[0].rtuint, D.30312
	cmpl	$44, %eax	#, D.30312
	jbe	.L1840	#,
	.loc 1 7228 0 discriminator 1
	movq	-40(%rbp), %rax	# op1, tmp116
	movl	8(%rax), %eax	# op1_18->fld[0].rtuint, D.30312
	cmpl	$52, %eax	#, D.30312
	ja	.L1840	#,
.L1842:
	movl	$1, %eax	#, iftmp.876
	jmp	.L1843	#
.L1840:
	.loc 1 7228 0 discriminator 2
	movl	$0, %eax	#, iftmp.876
.L1843:
	.loc 1 7228 0 discriminator 5
	andl	$1, %eax	#, D.30313
	orl	%edx, %eax	# D.30313, D.30313
	movzbl	%al, %eax	# D.30313, tmp117
	movl	%eax, -52(%rbp)	# tmp117, is_sse
	.loc 1 7234 0 is_stmt 1 discriminator 5
	cmpl	$0, -52(%rbp)	#, is_sse
	jne	.L1844	#,
	.loc 1 7235 0
	cmpl	$58, -60(%rbp)	#, fpcmp_mode
	je	.L1845	#,
	.loc 1 7236 0
	cmpl	$17, -56(%rbp)	#, op_mode
	je	.L1845	#,
	.loc 1 7237 0
	cmpl	$18, -56(%rbp)	#, op_mode
	je	.L1845	#,
	.loc 1 7238 0
	movl	-68(%rbp), %eax	# code, tmp118
	movl	%eax, %edi	# tmp118,
	call	ix86_use_fcomi_compare	#
	testl	%eax, %eax	# D.30314
	je	.L1844	#,
.L1845:
	.loc 1 7240 0
	movq	-48(%rbp), %rdx	# op0, tmp119
	movl	-56(%rbp), %eax	# op_mode, tmp120
	movq	%rdx, %rsi	# tmp119,
	movl	%eax, %edi	# tmp120,
	call	force_reg	#
	movq	%rax, -48(%rbp)	# tmp121, op0
	.loc 1 7241 0
	movq	-40(%rbp), %rdx	# op1, tmp122
	movl	-56(%rbp), %eax	# op_mode, tmp123
	movq	%rdx, %rsi	# tmp122,
	movl	%eax, %edi	# tmp123,
	call	force_reg	#
	movq	%rax, -40(%rbp)	# tmp124, op1
	jmp	.L1846	#
.L1844:
	.loc 1 7249 0
	movq	-48(%rbp), %rax	# op0, tmp125
	movq	%rax, %rdi	# tmp125,
	call	standard_80387_constant_p	#
	testl	%eax, %eax	# D.30314
	je	.L1847	#,
	.loc 1 7250 0
	movq	-48(%rbp), %rax	# op0, tmp126
	movzwl	(%rax), %eax	# op0_16->code, D.30311
	cmpw	$66, %ax	#, D.30311
	jne	.L1848	#,
	.loc 1 7251 0
	movq	-40(%rbp), %rax	# op1, tmp127
	movq	%rax, %rdi	# tmp127,
	call	standard_80387_constant_p	#
	testl	%eax, %eax	# D.30314
	je	.L1848	#,
	.loc 1 7252 0 discriminator 1
	movq	-40(%rbp), %rax	# op1, tmp128
	movzwl	(%rax), %eax	# op1_18->code, D.30311
	.loc 1 7251 0 discriminator 1
	cmpw	$66, %ax	#, D.30311
	je	.L1848	#,
.L1847:
.LBB72:
	.loc 1 7255 0
	movq	-48(%rbp), %rax	# op0, tmp129
	movq	%rax, -32(%rbp)	# tmp129, tmp
	movq	-40(%rbp), %rax	# op1, tmp130
	movq	%rax, -48(%rbp)	# tmp130, op0
	movq	-32(%rbp), %rax	# tmp, tmp131
	movq	%rax, -40(%rbp)	# tmp131, op1
	.loc 1 7256 0
	movl	-68(%rbp), %eax	# code, tmp132
	movl	%eax, %edi	# tmp132,
	call	swap_condition	#
	movl	%eax, -68(%rbp)	# tmp133, code
.L1848:
.LBE72:
	.loc 1 7259 0
	movq	-48(%rbp), %rax	# op0, tmp134
	movzwl	(%rax), %eax	# op0_4->code, D.30311
	cmpw	$61, %ax	#, D.30311
	je	.L1849	#,
	.loc 1 7260 0
	movq	-48(%rbp), %rdx	# op0, tmp135
	movl	-56(%rbp), %eax	# op_mode, tmp136
	movq	%rdx, %rsi	# tmp135,
	movl	%eax, %edi	# tmp136,
	call	force_reg	#
	movq	%rax, -48(%rbp)	# tmp137, op0
.L1849:
	.loc 1 7262 0
	movq	-40(%rbp), %rax	# op1, tmp138
	movzwl	(%rax), %eax	# op1_8->code, D.30311
	cmpw	$67, %ax	#, D.30311
	je	.L1850	#,
	.loc 1 7262 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# op1, tmp139
	movzwl	(%rax), %eax	# op1_8->code, D.30311
	cmpw	$68, %ax	#, D.30311
	je	.L1850	#,
	movq	-40(%rbp), %rax	# op1, tmp140
	movzwl	(%rax), %eax	# op1_8->code, D.30311
	cmpw	$54, %ax	#, D.30311
	je	.L1850	#,
	movq	-40(%rbp), %rax	# op1, tmp141
	movzwl	(%rax), %eax	# op1_8->code, D.30311
	cmpw	$55, %ax	#, D.30311
	je	.L1850	#,
	movq	-40(%rbp), %rax	# op1, tmp142
	movzwl	(%rax), %eax	# op1_8->code, D.30311
	cmpw	$58, %ax	#, D.30311
	je	.L1850	#,
	movq	-40(%rbp), %rax	# op1, tmp143
	movzwl	(%rax), %eax	# op1_8->code, D.30311
	cmpw	$134, %ax	#, D.30311
	je	.L1850	#,
	movq	-40(%rbp), %rax	# op1, tmp144
	movzwl	(%rax), %eax	# op1_8->code, D.30311
	cmpw	$56, %ax	#, D.30311
	je	.L1850	#,
	movq	-40(%rbp), %rax	# op1, tmp145
	movzwl	(%rax), %eax	# op1_8->code, D.30311
	cmpw	$140, %ax	#, D.30311
	jne	.L1846	#,
.L1850:
	.loc 1 7264 0 is_stmt 1
	movq	-40(%rbp), %rax	# op1, tmp146
	movq	%rax, %rdi	# tmp146,
	call	standard_80387_constant_p	#
	testl	%eax, %eax	# D.30314
	je	.L1851	#,
	.loc 1 7265 0
	movq	-40(%rbp), %rdx	# op1, tmp147
	movl	-56(%rbp), %eax	# op_mode, tmp148
	movq	%rdx, %rsi	# tmp147,
	movl	%eax, %edi	# tmp148,
	call	force_reg	#
	movq	%rax, -40(%rbp)	# tmp149, op1
	jmp	.L1846	#
.L1851:
	.loc 1 7267 0
	movq	-40(%rbp), %rdx	# op1, tmp150
	movl	-56(%rbp), %eax	# op_mode, tmp151
	movq	%rdx, %rsi	# tmp150,
	movl	%eax, %edi	# tmp151,
	call	force_const_mem	#
	movq	%rax, %rdi	# D.30315,
	call	validize_mem	#
	movq	%rax, -40(%rbp)	# tmp152, op1
.L1846:
	.loc 1 7272 0
	movl	-68(%rbp), %eax	# code, tmp153
	movl	%eax, %edi	# tmp153,
	call	ix86_fp_comparison_cost	#
	movl	%eax, %ebx	#, D.30314
	.loc 1 7273 0
	movl	-68(%rbp), %eax	# code, tmp154
	movl	%eax, %edi	# tmp154,
	call	swap_condition	#
	movl	%eax, %edi	# D.30316,
	call	ix86_fp_comparison_cost	#
	.loc 1 7272 0
	cmpl	%eax, %ebx	# D.30314, D.30314
	jle	.L1852	#,
	.loc 1 7274 0
	movq	-40(%rbp), %rax	# op1, tmp155
	movzwl	(%rax), %eax	# op1_9->code, D.30311
	cmpw	$61, %ax	#, D.30311
	je	.L1853	#,
	.loc 1 7274 0 is_stmt 0 discriminator 1
	movl	no_new_pseudos(%rip), %eax	# no_new_pseudos, no_new_pseudos.877
	testl	%eax, %eax	# no_new_pseudos.877
	jne	.L1852	#,
.L1853:
.LBB73:
	.loc 1 7277 0 is_stmt 1
	movq	-48(%rbp), %rax	# op0, tmp156
	movq	%rax, -24(%rbp)	# tmp156, tmp
	movq	-40(%rbp), %rax	# op1, tmp157
	movq	%rax, -48(%rbp)	# tmp157, op0
	movq	-24(%rbp), %rax	# tmp, tmp158
	movq	%rax, -40(%rbp)	# tmp158, op1
	.loc 1 7278 0
	movl	-68(%rbp), %eax	# code, tmp159
	movl	%eax, %edi	# tmp159,
	call	swap_condition	#
	movl	%eax, -68(%rbp)	# tmp160, code
	.loc 1 7279 0
	movq	-48(%rbp), %rax	# op0, tmp161
	movzwl	(%rax), %eax	# op0_70->code, D.30311
	cmpw	$61, %ax	#, D.30311
	je	.L1852	#,
	.loc 1 7280 0
	movq	-48(%rbp), %rdx	# op0, tmp162
	movl	-56(%rbp), %eax	# op_mode, tmp163
	movq	%rdx, %rsi	# tmp162,
	movl	%eax, %edi	# tmp163,
	call	force_reg	#
	movq	%rax, -48(%rbp)	# tmp164, op0
.L1852:
.LBE73:
	.loc 1 7283 0
	movq	-80(%rbp), %rax	# pop0, tmp165
	movq	-48(%rbp), %rdx	# op0, tmp166
	movq	%rdx, (%rax)	# tmp166, *pop0_15(D)
	.loc 1 7284 0
	movq	-88(%rbp), %rax	# pop1, tmp167
	movq	-40(%rbp), %rdx	# op1, tmp168
	movq	%rdx, (%rax)	# tmp168, *pop1_17(D)
	.loc 1 7285 0
	movl	-68(%rbp), %eax	# code, D.30316
	.loc 1 7286 0
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE119:
	.size	ix86_prepare_fp_compare_args, .-ix86_prepare_fp_compare_args
	.type	ix86_fp_compare_code_to_integer, @function
ix86_fp_compare_code_to_integer:
.LFB120:
	.loc 1 7294 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# code, code
	.loc 1 7295 0
	movl	-4(%rbp), %eax	# code, tmp62
	subl	$104, %eax	#, tmp61
	cmpl	$15, %eax	#, tmp61
	ja	.L1856	#,
	movl	%eax, %eax	# tmp61, tmp63
	movq	.L1858(,%rax,8), %rax	#, tmp64
	jmp	*%rax	# tmp64
	.section	.rodata
	.align 8
	.align 4
.L1858:
	.quad	.L1857
	.quad	.L1859
	.quad	.L1856
	.quad	.L1856
	.quad	.L1856
	.quad	.L1856
	.quad	.L1856
	.quad	.L1856
	.quad	.L1860
	.quad	.L1860
	.quad	.L1861
	.quad	.L1856
	.quad	.L1856
	.quad	.L1862
	.quad	.L1863
	.quad	.L1864
	.text
.L1859:
	.loc 1 7298 0
	movl	$109, %eax	#, D.30317
	jmp	.L1865	#
.L1857:
	.loc 1 7300 0
	movl	$108, %eax	#, D.30317
	jmp	.L1865	#
.L1860:
	.loc 1 7303 0
	movl	-4(%rbp), %eax	# code, D.30317
	jmp	.L1865	#
.L1861:
	.loc 1 7306 0
	movl	$103, %eax	#, D.30317
	jmp	.L1865	#
.L1863:
	.loc 1 7309 0
	movl	$111, %eax	#, D.30317
	jmp	.L1865	#
.L1862:
	.loc 1 7312 0
	movl	$110, %eax	#, D.30317
	jmp	.L1865	#
.L1864:
	.loc 1 7315 0
	movl	$102, %eax	#, D.30317
	jmp	.L1865	#
.L1856:
	.loc 1 7318 0
	movl	$0, %eax	#, D.30317
.L1865:
	.loc 1 7320 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE120:
	.size	ix86_fp_compare_code_to_integer, .-ix86_fp_compare_code_to_integer
	.type	ix86_fp_comparison_codes, @function
ix86_fp_comparison_codes:
.LFB121:
	.loc 1 7330 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -4(%rbp)	# code, code
	movq	%rsi, -16(%rbp)	# bypass_code, bypass_code
	movq	%rdx, -24(%rbp)	# first_code, first_code
	movq	%rcx, -32(%rbp)	# second_code, second_code
	.loc 1 7331 0
	movq	-24(%rbp), %rax	# first_code, tmp61
	movl	-4(%rbp), %edx	# code, tmp62
	movl	%edx, (%rax)	# tmp62, *first_code_1(D)
	.loc 1 7332 0
	movq	-16(%rbp), %rax	# bypass_code, tmp63
	movl	$1, (%rax)	#, *bypass_code_3(D)
	.loc 1 7333 0
	movq	-32(%rbp), %rax	# second_code, tmp64
	movl	$1, (%rax)	#, *second_code_4(D)
	.loc 1 7343 0
	movl	-4(%rbp), %eax	# code, tmp66
	subl	$102, %eax	#, tmp65
	cmpl	$17, %eax	#, tmp65
	ja	.L1867	#,
	movl	%eax, %eax	# tmp65, tmp67
	movq	.L1869(,%rax,8), %rax	#, tmp68
	jmp	*%rax	# tmp68
	.section	.rodata
	.align 8
	.align 4
.L1869:
	.quad	.L1868
	.quad	.L1870
	.quad	.L1878
	.quad	.L1878
	.quad	.L1872
	.quad	.L1873
	.quad	.L1867
	.quad	.L1867
	.quad	.L1867
	.quad	.L1867
	.quad	.L1878
	.quad	.L1878
	.quad	.L1878
	.quad	.L1874
	.quad	.L1875
	.quad	.L1878
	.quad	.L1878
	.quad	.L1878
	.text
.L1873:
	.loc 1 7355 0
	movq	-24(%rbp), %rax	# first_code, tmp69
	movl	$118, (%rax)	#, *first_code_1(D)
	.loc 1 7356 0
	movq	-16(%rbp), %rax	# bypass_code, tmp70
	movl	$112, (%rax)	#, *bypass_code_3(D)
	.loc 1 7357 0
	jmp	.L1876	#
.L1872:
	.loc 1 7359 0
	movq	-24(%rbp), %rax	# first_code, tmp71
	movl	$117, (%rax)	#, *first_code_1(D)
	.loc 1 7360 0
	movq	-16(%rbp), %rax	# bypass_code, tmp72
	movl	$112, (%rax)	#, *bypass_code_3(D)
	.loc 1 7361 0
	jmp	.L1876	#
.L1870:
	.loc 1 7363 0
	movq	-24(%rbp), %rax	# first_code, tmp73
	movl	$114, (%rax)	#, *first_code_1(D)
	.loc 1 7364 0
	movq	-16(%rbp), %rax	# bypass_code, tmp74
	movl	$112, (%rax)	#, *bypass_code_3(D)
	.loc 1 7365 0
	jmp	.L1876	#
.L1868:
	.loc 1 7367 0
	movq	-24(%rbp), %rax	# first_code, tmp75
	movl	$119, (%rax)	#, *first_code_1(D)
	.loc 1 7368 0
	movq	-32(%rbp), %rax	# second_code, tmp76
	movl	$112, (%rax)	#, *second_code_4(D)
	.loc 1 7369 0
	jmp	.L1876	#
.L1874:
	.loc 1 7371 0
	movq	-24(%rbp), %rax	# first_code, tmp77
	movl	$104, (%rax)	#, *first_code_1(D)
	.loc 1 7372 0
	movq	-32(%rbp), %rax	# second_code, tmp78
	movl	$112, (%rax)	#, *second_code_4(D)
	.loc 1 7373 0
	jmp	.L1876	#
.L1875:
	.loc 1 7375 0
	movq	-24(%rbp), %rax	# first_code, tmp79
	movl	$105, (%rax)	#, *first_code_1(D)
	.loc 1 7376 0
	movq	-32(%rbp), %rax	# second_code, tmp80
	movl	$112, (%rax)	#, *second_code_4(D)
	.loc 1 7377 0
	jmp	.L1876	#
.L1867:
	.loc 1 7379 0
	movl	$__FUNCTION__.15929, %edx	#,
	movl	$7379, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1878:
	.loc 1 7353 0
	nop
.L1876:
	.loc 1 7381 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.878
	andl	$16, %eax	#, D.30318
	testl	%eax, %eax	# D.30318
	jne	.L1866	#,
	.loc 1 7383 0
	movq	-32(%rbp), %rax	# second_code, tmp81
	movl	$1, (%rax)	#, *second_code_4(D)
	.loc 1 7384 0
	movq	-16(%rbp), %rax	# bypass_code, tmp82
	movl	$1, (%rax)	#, *bypass_code_3(D)
.L1866:
	.loc 1 7386 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE121:
	.size	ix86_fp_comparison_codes, .-ix86_fp_comparison_codes
	.type	ix86_fp_comparison_arithmetics_cost, @function
ix86_fp_comparison_arithmetics_cost:
.LFB122:
	.loc 1 7395 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# code, code
	.loc 1 7396 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.879
	andl	$16, %eax	#, D.30319
	testl	%eax, %eax	# D.30319
	jne	.L1880	#,
	.loc 1 7397 0
	movl	$4, %eax	#, D.30319
	jmp	.L1881	#
.L1880:
	.loc 1 7399 0
	movl	-4(%rbp), %eax	# code, tmp64
	subl	$102, %eax	#, tmp63
	cmpl	$17, %eax	#, tmp63
	ja	.L1882	#,
	movl	%eax, %eax	# tmp63, tmp65
	movq	.L1884(,%rax,8), %rax	#, tmp66
	jmp	*%rax	# tmp66
	.section	.rodata
	.align 8
	.align 4
.L1884:
	.quad	.L1883
	.quad	.L1883
	.quad	.L1885
	.quad	.L1885
	.quad	.L1886
	.quad	.L1883
	.quad	.L1882
	.quad	.L1882
	.quad	.L1882
	.quad	.L1882
	.quad	.L1885
	.quad	.L1885
	.quad	.L1885
	.quad	.L1883
	.quad	.L1886
	.quad	.L1885
	.quad	.L1885
	.quad	.L1885
	.text
.L1885:
	.loc 1 7409 0
	movl	$4, %eax	#, D.30319
	jmp	.L1881	#
.L1883:
	.loc 1 7415 0
	movl	$5, %eax	#, D.30319
	jmp	.L1881	#
.L1886:
	.loc 1 7419 0
	movl	$6, %eax	#, D.30319
	jmp	.L1881	#
.L1882:
	.loc 1 7422 0
	movl	$__FUNCTION__.15948, %edx	#,
	movl	$7422, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1881:
	.loc 1 7424 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE122:
	.size	ix86_fp_comparison_arithmetics_cost, .-ix86_fp_comparison_arithmetics_cost
	.type	ix86_fp_comparison_fcomi_cost, @function
ix86_fp_comparison_fcomi_cost:
.LFB123:
	.loc 1 7431 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# code, code
	.loc 1 7435 0
	movl	$104, %edx	#, x86_cmove.880
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.881
	movl	%eax, %ecx	# ix86_arch.881, tmp76
	sarl	%cl, %edx	# tmp76, D.30320
	movl	%edx, %eax	# D.30320, D.30320
	andl	$1, %eax	#, D.30320
	testl	%eax, %eax	# D.30320
	jne	.L1888	#,
	.loc 1 7435 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.882
	andl	$327680, %eax	#, D.30320
	testl	%eax, %eax	# D.30320
	jne	.L1888	#,
	.loc 1 7436 0 is_stmt 1
	movl	$1024, %eax	#, D.30320
	jmp	.L1893	#
.L1888:
	.loc 1 7437 0
	leaq	-4(%rbp), %rcx	#, tmp70
	leaq	-8(%rbp), %rdx	#, tmp71
	leaq	-12(%rbp), %rsi	#, tmp72
	movl	-20(%rbp), %eax	# code, tmp73
	movl	%eax, %edi	# tmp73,
	call	ix86_fp_comparison_codes	#
	.loc 1 7438 0
	movl	-12(%rbp), %eax	# bypass_code, bypass_code.884
	cmpl	$1, %eax	#, bypass_code.884
	jne	.L1890	#,
	.loc 1 7438 0 is_stmt 0 discriminator 2
	movl	-4(%rbp), %eax	# second_code, second_code.885
	cmpl	$1, %eax	#, second_code.885
	je	.L1891	#,
.L1890:
	.loc 1 7438 0 discriminator 1
	movl	$1, %eax	#, iftmp.883
	jmp	.L1892	#
.L1891:
	.loc 1 7438 0 discriminator 3
	movl	$0, %eax	#, iftmp.883
.L1892:
	.loc 1 7438 0 discriminator 4
	addl	$2, %eax	#, D.30320
.L1893:
	.loc 1 7439 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE123:
	.size	ix86_fp_comparison_fcomi_cost, .-ix86_fp_comparison_fcomi_cost
	.type	ix86_fp_comparison_sahf_cost, @function
ix86_fp_comparison_sahf_cost:
.LFB124:
	.loc 1 7446 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# code, code
	.loc 1 7450 0
	movl	$88, %edx	#, x86_use_sahf.886
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.887
	movl	%eax, %ecx	# ix86_cpu.888, tmp78
	sarl	%cl, %edx	# tmp78, D.30321
	movl	%edx, %eax	# D.30321, D.30321
	andl	$1, %eax	#, D.30321
	testl	%eax, %eax	# D.30321
	je	.L1895	#,
	.loc 1 7450 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.889
	andl	$33554432, %eax	#, D.30321
	testl	%eax, %eax	# D.30321
	je	.L1896	#,
.L1895:
	.loc 1 7450 0 discriminator 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.890
	testl	%eax, %eax	# optimize_size.890
	jne	.L1896	#,
	.loc 1 7451 0 is_stmt 1
	movl	$1024, %eax	#, D.30321
	jmp	.L1901	#
.L1896:
	.loc 1 7452 0
	leaq	-4(%rbp), %rcx	#, tmp72
	leaq	-8(%rbp), %rdx	#, tmp73
	leaq	-12(%rbp), %rsi	#, tmp74
	movl	-20(%rbp), %eax	# code, tmp75
	movl	%eax, %edi	# tmp75,
	call	ix86_fp_comparison_codes	#
	.loc 1 7453 0
	movl	-12(%rbp), %eax	# bypass_code, bypass_code.892
	cmpl	$1, %eax	#, bypass_code.892
	jne	.L1898	#,
	.loc 1 7453 0 is_stmt 0 discriminator 2
	movl	-4(%rbp), %eax	# second_code, second_code.893
	cmpl	$1, %eax	#, second_code.893
	je	.L1899	#,
.L1898:
	.loc 1 7453 0 discriminator 1
	movl	$1, %eax	#, iftmp.891
	jmp	.L1900	#
.L1899:
	.loc 1 7453 0 discriminator 3
	movl	$0, %eax	#, iftmp.891
.L1900:
	.loc 1 7453 0 discriminator 4
	addl	$3, %eax	#, D.30321
.L1901:
	.loc 1 7454 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE124:
	.size	ix86_fp_comparison_sahf_cost, .-ix86_fp_comparison_sahf_cost
	.type	ix86_fp_comparison_cost, @function
ix86_fp_comparison_cost:
.LFB125:
	.loc 1 7461 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# code, code
	.loc 1 7462 0
	movl	$1024, -12(%rbp)	#, arithmetics_cost
	.loc 1 7465 0
	movl	-20(%rbp), %eax	# code, tmp61
	movl	%eax, %edi	# tmp61,
	call	ix86_fp_comparison_fcomi_cost	#
	movl	%eax, -8(%rbp)	# tmp62, fcomi_cost
	.loc 1 7466 0
	movl	-20(%rbp), %eax	# code, tmp63
	movl	%eax, %edi	# tmp63,
	call	ix86_fp_comparison_sahf_cost	#
	movl	%eax, -4(%rbp)	# tmp64, sahf_cost
	.loc 1 7468 0
	movl	-20(%rbp), %eax	# code, tmp65
	movl	%eax, %edi	# tmp65,
	call	ix86_fp_comparison_arithmetics_cost	#
	movl	%eax, -12(%rbp)	# tmp66, arithmetics_cost
	movl	-12(%rbp), %eax	# arithmetics_cost, tmp67
	movl	%eax, -16(%rbp)	# tmp67, min
	.loc 1 7469 0
	movl	-16(%rbp), %eax	# min, tmp68
	cmpl	-4(%rbp), %eax	# sahf_cost, tmp68
	jle	.L1903	#,
	.loc 1 7470 0
	movl	-4(%rbp), %eax	# sahf_cost, tmp69
	movl	%eax, -16(%rbp)	# tmp69, min
.L1903:
	.loc 1 7471 0
	movl	-16(%rbp), %eax	# min, tmp70
	cmpl	-8(%rbp), %eax	# fcomi_cost, tmp70
	jle	.L1904	#,
	.loc 1 7472 0
	movl	-8(%rbp), %eax	# fcomi_cost, tmp71
	movl	%eax, -16(%rbp)	# tmp71, min
.L1904:
	.loc 1 7473 0
	movl	-16(%rbp), %eax	# min, D.30322
	.loc 1 7474 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE125:
	.size	ix86_fp_comparison_cost, .-ix86_fp_comparison_cost
	.type	ix86_expand_fp_compare, @function
ix86_expand_fp_compare:
.LFB126:
	.loc 1 7484 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -68(%rbp)	# code, code
	movq	%rsi, -80(%rbp)	# op0, op0
	movq	%rdx, -88(%rbp)	# op1, op1
	movq	%rcx, -96(%rbp)	# scratch, scratch
	movq	%r8, -104(%rbp)	# second_test, second_test
	movq	%r9, -112(%rbp)	# bypass_test, bypass_test
	.loc 1 7487 0
	movl	-68(%rbp), %eax	# code, tmp150
	movl	%eax, %edi	# tmp150,
	call	ix86_fp_comparison_cost	#
	movl	%eax, -40(%rbp)	# tmp151, cost
	.loc 1 7490 0
	movl	-68(%rbp), %eax	# code, tmp152
	movl	%eax, %edi	# tmp152,
	call	ix86_fp_compare_mode	#
	movl	%eax, -36(%rbp)	# tmp153, fpcmp_mode
	.loc 1 7491 0
	leaq	-88(%rbp), %rdx	#, tmp154
	leaq	-80(%rbp), %rcx	#, tmp155
	movl	-68(%rbp), %eax	# code, tmp156
	movq	%rcx, %rsi	# tmp155,
	movl	%eax, %edi	# tmp156,
	call	ix86_prepare_fp_compare_args	#
	movl	%eax, -68(%rbp)	# tmp157, code
	.loc 1 7493 0
	cmpq	$0, -104(%rbp)	#, second_test
	je	.L1907	#,
	.loc 1 7494 0
	movq	-104(%rbp), %rax	# second_test, tmp158
	movq	$0, (%rax)	#, *second_test_17(D)
.L1907:
	.loc 1 7495 0
	cmpq	$0, -112(%rbp)	#, bypass_test
	je	.L1908	#,
	.loc 1 7496 0
	movq	-112(%rbp), %rax	# bypass_test, tmp159
	movq	$0, (%rax)	#, *bypass_test_18(D)
.L1908:
	.loc 1 7498 0
	leaq	-48(%rbp), %rcx	#, tmp160
	leaq	-52(%rbp), %rdx	#, tmp161
	leaq	-56(%rbp), %rsi	#, tmp162
	movl	-68(%rbp), %eax	# code, tmp163
	movl	%eax, %edi	# tmp163,
	call	ix86_fp_comparison_codes	#
	.loc 1 7501 0
	movl	-56(%rbp), %eax	# bypass_code, bypass_code.894
	cmpl	$1, %eax	#, bypass_code.894
	je	.L1909	#,
	.loc 1 7501 0 is_stmt 0 discriminator 1
	cmpq	$0, -112(%rbp)	#, bypass_test
	je	.L1910	#,
.L1909:
	.loc 1 7502 0 is_stmt 1
	movl	-48(%rbp), %eax	# second_code, second_code.895
	cmpl	$1, %eax	#, second_code.895
	je	.L1911	#,
	.loc 1 7502 0 is_stmt 0 discriminator 1
	cmpq	$0, -104(%rbp)	#, second_test
	je	.L1910	#,
.L1911:
	.loc 1 7503 0 is_stmt 1
	movl	-68(%rbp), %eax	# code, tmp164
	movl	%eax, %edi	# tmp164,
	call	ix86_fp_comparison_arithmetics_cost	#
	cmpl	-40(%rbp), %eax	# cost, D.30323
	jle	.L1910	#,
	.loc 1 7505 0
	movl	$104, %edx	#, x86_cmove.896
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.897
	movl	%eax, %ecx	# ix86_arch.897, tmp232
	sarl	%cl, %edx	# tmp232, D.30323
	movl	%edx, %eax	# D.30323, D.30323
	andl	$1, %eax	#, D.30323
	testl	%eax, %eax	# D.30323
	jne	.L1912	#,
	.loc 1 7505 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.898
	andl	$327680, %eax	#, D.30323
	testl	%eax, %eax	# D.30323
	je	.L1913	#,
.L1912:
	.loc 1 7507 0 is_stmt 1
	movq	-88(%rbp), %rcx	# op1, op1.899
	movq	-80(%rbp), %rdx	# op0, op0.900
	movl	-36(%rbp), %eax	# fpcmp_mode, tmp165
	movl	%eax, %esi	# tmp165,
	movl	$74, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp166, tmp
	.loc 1 7508 0
	movl	-36(%rbp), %eax	# fpcmp_mode, tmp167
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp167,
	call	gen_rtx_REG	#
	movq	-32(%rbp), %rdx	# tmp, tmp168
	movq	%rdx, %rcx	# tmp168,
	movq	%rax, %rdx	# D.30325,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp169, tmp
	.loc 1 7510 0
	movq	-32(%rbp), %rax	# tmp, tmp170
	movq	%rax, %rdi	# tmp170,
	call	emit_insn	#
	jmp	.L1914	#
.L1913:
	.loc 1 7514 0
	movq	-88(%rbp), %rcx	# op1, op1.901
	movq	-80(%rbp), %rdx	# op0, op0.902
	movl	-36(%rbp), %eax	# fpcmp_mode, tmp171
	movl	%eax, %esi	# tmp171,
	movl	$74, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp172, tmp
	.loc 1 7515 0
	movq	-32(%rbp), %rax	# tmp, tmp173
	movq	%rax, %rsi	# tmp173,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movl	$9, %ecx	#,
	movq	%rax, %rdx	# D.30324,
	movl	$3, %esi	#,
	movl	$42, %edi	#,
	call	gen_rtx_fmt_Ei	#
	movq	%rax, -24(%rbp)	# tmp174, tmp2
	.loc 1 7516 0
	cmpq	$0, -96(%rbp)	#, scratch
	jne	.L1915	#,
	.loc 1 7517 0
	movl	$3, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -96(%rbp)	# tmp175, scratch
.L1915:
	.loc 1 7518 0
	movq	-24(%rbp), %rdx	# tmp2, tmp176
	movq	-96(%rbp), %rax	# scratch, tmp177
	movq	%rdx, %rcx	# tmp176,
	movq	%rax, %rdx	# tmp177,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7519 0
	movq	-96(%rbp), %rax	# scratch, tmp178
	movq	%rax, %rdi	# tmp178,
	call	gen_x86_sahf_1	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
.L1914:
	.loc 1 7523 0
	movl	-36(%rbp), %eax	# fpcmp_mode, tmp179
	movl	%eax, -44(%rbp)	# tmp179, intcmp_mode
	.loc 1 7524 0
	movl	-52(%rbp), %eax	# first_code, tmp180
	movl	%eax, -68(%rbp)	# tmp180, code
	.loc 1 7525 0
	movl	-56(%rbp), %eax	# bypass_code, bypass_code.903
	cmpl	$1, %eax	#, bypass_code.903
	je	.L1916	#,
	.loc 1 7526 0
	movq	const_int_rtx+512(%rip), %rbx	# const_int_rtx, D.30325
	movl	-44(%rbp), %eax	# intcmp_mode, tmp181
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp181,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.30325
	movl	-56(%rbp), %eax	# bypass_code, bypass_code.904
	movq	%rbx, %rcx	# D.30325,
	movl	$0, %esi	#,
	movl	%eax, %edi	# bypass_code.904,
	call	gen_rtx_fmt_ee	#
	movq	-112(%rbp), %rdx	# bypass_test, tmp182
	movq	%rax, (%rdx)	# D.30325, *bypass_test_18(D)
.L1916:
	.loc 1 7529 0
	movl	-48(%rbp), %eax	# second_code, second_code.905
	cmpl	$1, %eax	#, second_code.905
	je	.L1917	#,
	.loc 1 7530 0
	movq	const_int_rtx+512(%rip), %rbx	# const_int_rtx, D.30325
	movl	-44(%rbp), %eax	# intcmp_mode, tmp183
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp183,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.30325
	movl	-48(%rbp), %eax	# second_code, second_code.906
	movq	%rbx, %rcx	# D.30325,
	movl	$0, %esi	#,
	movl	%eax, %edi	# second_code.906,
	call	gen_rtx_fmt_ee	#
	movq	-104(%rbp), %rdx	# second_test, tmp184
	movq	%rax, (%rdx)	# D.30325, *second_test_17(D)
	.loc 1 7529 0
	jmp	.L1918	#
.L1917:
	.loc 1 7529 0 is_stmt 0 discriminator 1
	jmp	.L1918	#
.L1910:
	.loc 1 7537 0 is_stmt 1
	movq	-88(%rbp), %rcx	# op1, op1.907
	movq	-80(%rbp), %rdx	# op0, op0.908
	movl	-36(%rbp), %eax	# fpcmp_mode, tmp185
	movl	%eax, %esi	# tmp185,
	movl	$74, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp186, tmp
	.loc 1 7538 0
	movq	-32(%rbp), %rax	# tmp, tmp187
	movq	%rax, %rsi	# tmp187,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movl	$9, %ecx	#,
	movq	%rax, %rdx	# D.30324,
	movl	$3, %esi	#,
	movl	$42, %edi	#,
	call	gen_rtx_fmt_Ei	#
	movq	%rax, -24(%rbp)	# tmp188, tmp2
	.loc 1 7539 0
	cmpq	$0, -96(%rbp)	#, scratch
	jne	.L1919	#,
	.loc 1 7540 0
	movl	$3, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -96(%rbp)	# tmp189, scratch
.L1919:
	.loc 1 7541 0
	movq	-24(%rbp), %rdx	# tmp2, tmp190
	movq	-96(%rbp), %rax	# scratch, tmp191
	movq	%rdx, %rcx	# tmp190,
	movq	%rax, %rdx	# tmp191,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7548 0
	movl	$55, -44(%rbp)	#, intcmp_mode
	.loc 1 7549 0
	movl	-68(%rbp), %eax	# code, tmp193
	subl	$102, %eax	#, tmp192
	cmpl	$17, %eax	#, tmp192
	ja	.L1920	#,
	movl	%eax, %eax	# tmp192, tmp194
	movq	.L1922(,%rax,8), %rax	#, tmp195
	jmp	*%rax	# tmp195
	.section	.rodata
	.align 8
	.align 4
.L1922:
	.quad	.L1921
	.quad	.L1923
	.quad	.L1924
	.quad	.L1925
	.quad	.L1926
	.quad	.L1927
	.quad	.L1920
	.quad	.L1920
	.quad	.L1920
	.quad	.L1920
	.quad	.L1928
	.quad	.L1929
	.quad	.L1923
	.quad	.L1924
	.quad	.L1925
	.quad	.L1926
	.quad	.L1927
	.quad	.L1921
	.text
.L1925:
	.loc 1 7553 0
	cmpl	$105, -68(%rbp)	#, code
	je	.L1930	#,
	.loc 1 7553 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.909
	andl	$16, %eax	#, D.30323
	testl	%eax, %eax	# D.30323
	jne	.L1931	#,
.L1930:
	.loc 1 7555 0 is_stmt 1
	movl	$69, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp196
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp196,
	call	gen_testqi_ext_ccno_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7556 0
	movl	$103, -68(%rbp)	#, code
	.loc 1 7566 0
	jmp	.L1918	#
.L1931:
	.loc 1 7560 0
	movl	$69, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rcx	# scratch, tmp197
	movq	-96(%rbp), %rax	# scratch, tmp198
	movq	%rcx, %rsi	# tmp197,
	movq	%rax, %rdi	# tmp198,
	call	gen_andqi_ext_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7561 0
	movq	const_int_rtx+504(%rip), %rdx	# const_int_rtx, D.30325
	movq	-96(%rbp), %rcx	# scratch, tmp199
	movq	-96(%rbp), %rax	# scratch, tmp200
	movq	%rcx, %rsi	# tmp199,
	movq	%rax, %rdi	# tmp200,
	call	gen_addqi_ext_1	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7562 0
	movl	$68, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp201
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp201,
	call	gen_cmpqi_ext_3	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7563 0
	movl	$52, -44(%rbp)	#, intcmp_mode
	.loc 1 7564 0
	movl	$108, -68(%rbp)	#, code
	.loc 1 7566 0
	jmp	.L1918	#
.L1927:
	.loc 1 7569 0
	cmpl	$107, -68(%rbp)	#, code
	jne	.L1933	#,
	.loc 1 7569 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.910
	andl	$16, %eax	#, D.30323
	testl	%eax, %eax	# D.30323
	je	.L1933	#,
	.loc 1 7571 0 is_stmt 1
	movl	$69, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rcx	# scratch, tmp202
	movq	-96(%rbp), %rax	# scratch, tmp203
	movq	%rcx, %rsi	# tmp202,
	movq	%rax, %rdi	# tmp203,
	call	gen_andqi_ext_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7572 0
	movl	$1, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp204
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp204,
	call	gen_cmpqi_ext_3	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7573 0
	movl	$52, -44(%rbp)	#, intcmp_mode
	.loc 1 7574 0
	movl	$103, -68(%rbp)	#, code
	.loc 1 7581 0
	jmp	.L1918	#
.L1933:
	.loc 1 7578 0
	movl	$1, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp205
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp205,
	call	gen_testqi_ext_ccno_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7579 0
	movl	$102, -68(%rbp)	#, code
	.loc 1 7581 0
	jmp	.L1918	#
.L1924:
	.loc 1 7584 0
	cmpl	$104, -68(%rbp)	#, code
	je	.L1935	#,
	.loc 1 7584 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.911
	andl	$16, %eax	#, D.30323
	testl	%eax, %eax	# D.30323
	jne	.L1936	#,
.L1935:
	.loc 1 7586 0 is_stmt 1
	movl	$5, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp206
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp206,
	call	gen_testqi_ext_ccno_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7587 0
	movl	$103, -68(%rbp)	#, code
	.loc 1 7596 0
	jmp	.L1918	#
.L1936:
	.loc 1 7591 0
	movl	$69, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rcx	# scratch, tmp207
	movq	-96(%rbp), %rax	# scratch, tmp208
	movq	%rcx, %rsi	# tmp207,
	movq	%rax, %rdi	# tmp208,
	call	gen_andqi_ext_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7592 0
	movl	$1, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rcx	# scratch, tmp209
	movq	-96(%rbp), %rax	# scratch, tmp210
	movq	%rcx, %rsi	# tmp209,
	movq	%rax, %rdi	# tmp210,
	call	gen_xorqi_cc_ext_1	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7594 0
	movl	$102, -68(%rbp)	#, code
	.loc 1 7596 0
	jmp	.L1918	#
.L1926:
	.loc 1 7599 0
	cmpl	$106, -68(%rbp)	#, code
	jne	.L1938	#,
	.loc 1 7599 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.912
	andl	$16, %eax	#, D.30323
	testl	%eax, %eax	# D.30323
	je	.L1938	#,
	.loc 1 7601 0 is_stmt 1
	movl	$69, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rcx	# scratch, tmp211
	movq	-96(%rbp), %rax	# scratch, tmp212
	movq	%rcx, %rsi	# tmp211,
	movq	%rax, %rdi	# tmp212,
	call	gen_andqi_ext_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7602 0
	movq	const_int_rtx+504(%rip), %rdx	# const_int_rtx, D.30325
	movq	-96(%rbp), %rcx	# scratch, tmp213
	movq	-96(%rbp), %rax	# scratch, tmp214
	movq	%rcx, %rsi	# tmp213,
	movq	%rax, %rdi	# tmp214,
	call	gen_addqi_ext_1	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7603 0
	movl	$64, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp215
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp215,
	call	gen_cmpqi_ext_3	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7604 0
	movl	$52, -44(%rbp)	#, intcmp_mode
	.loc 1 7605 0
	movl	$111, -68(%rbp)	#, code
	.loc 1 7612 0
	jmp	.L1918	#
.L1938:
	.loc 1 7609 0
	movl	$69, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp216
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp216,
	call	gen_testqi_ext_ccno_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7610 0
	movl	$102, -68(%rbp)	#, code
	.loc 1 7612 0
	jmp	.L1918	#
.L1923:
	.loc 1 7615 0
	cmpl	$103, -68(%rbp)	#, code
	jne	.L1940	#,
	.loc 1 7615 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.913
	andl	$16, %eax	#, D.30323
	testl	%eax, %eax	# D.30323
	je	.L1940	#,
	.loc 1 7617 0 is_stmt 1
	movl	$69, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rcx	# scratch, tmp217
	movq	-96(%rbp), %rax	# scratch, tmp218
	movq	%rcx, %rsi	# tmp217,
	movq	%rax, %rdi	# tmp218,
	call	gen_andqi_ext_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7618 0
	movl	$64, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp219
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp219,
	call	gen_cmpqi_ext_3	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7619 0
	movl	$52, -44(%rbp)	#, intcmp_mode
	.loc 1 7620 0
	movl	$103, -68(%rbp)	#, code
	.loc 1 7628 0
	jmp	.L1918	#
.L1940:
	.loc 1 7624 0
	movl	$64, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp220
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp220,
	call	gen_testqi_ext_ccno_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7625 0
	movl	$102, -68(%rbp)	#, code
	.loc 1 7626 0
	jmp	.L1918	#
.L1921:
	.loc 1 7631 0
	cmpl	$102, -68(%rbp)	#, code
	jne	.L1941	#,
	.loc 1 7631 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.914
	andl	$16, %eax	#, D.30323
	testl	%eax, %eax	# D.30323
	je	.L1941	#,
	.loc 1 7633 0 is_stmt 1
	movl	$69, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rcx	# scratch, tmp221
	movq	-96(%rbp), %rax	# scratch, tmp222
	movq	%rcx, %rsi	# tmp221,
	movq	%rax, %rdi	# tmp222,
	call	gen_andqi_ext_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7634 0
	movl	$64, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rcx	# scratch, tmp223
	movq	-96(%rbp), %rax	# scratch, tmp224
	movq	%rcx, %rsi	# tmp223,
	movq	%rax, %rdi	# tmp224,
	call	gen_xorqi_cc_ext_1	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7636 0
	movl	$102, -68(%rbp)	#, code
	.loc 1 7643 0
	jmp	.L1918	#
.L1941:
	.loc 1 7640 0
	movl	$64, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp225
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp225,
	call	gen_testqi_ext_ccno_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7641 0
	movl	$103, -68(%rbp)	#, code
	.loc 1 7643 0
	jmp	.L1918	#
.L1928:
	.loc 1 7646 0
	movl	$4, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp226
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp226,
	call	gen_testqi_ext_ccno_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7647 0
	movl	$102, -68(%rbp)	#, code
	.loc 1 7648 0
	jmp	.L1918	#
.L1929:
	.loc 1 7650 0
	movl	$4, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30325
	movq	-96(%rbp), %rax	# scratch, tmp227
	movq	%rdx, %rsi	# D.30325,
	movq	%rax, %rdi	# tmp227,
	call	gen_testqi_ext_ccno_0	#
	movq	%rax, %rdi	# D.30325,
	call	emit_insn	#
	.loc 1 7651 0
	movl	$103, -68(%rbp)	#, code
	.loc 1 7652 0
	jmp	.L1918	#
.L1920:
	.loc 1 7655 0
	movl	$__FUNCTION__.16000, %edx	#,
	movl	$7655, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1918:
	.loc 1 7661 0
	movq	const_int_rtx+512(%rip), %rbx	# const_int_rtx, D.30325
	movl	-44(%rbp), %eax	# intcmp_mode, tmp228
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp228,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.30325
	movl	-68(%rbp), %eax	# code, tmp229
	movq	%rbx, %rcx	# D.30325,
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp229,
	call	gen_rtx_fmt_ee	#
	.loc 1 7664 0
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE126:
	.size	ix86_expand_fp_compare, .-ix86_expand_fp_compare
	.globl	ix86_expand_compare
	.type	ix86_expand_compare, @function
ix86_expand_compare:
.LFB127:
	.loc 1 7670 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movl	%edi, -36(%rbp)	# code, code
	movq	%rsi, -48(%rbp)	# second_test, second_test
	movq	%rdx, -56(%rbp)	# bypass_test, bypass_test
	.loc 1 7672 0
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, tmp64
	movq	%rax, -16(%rbp)	# tmp64, op0
	.loc 1 7673 0
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, tmp65
	movq	%rax, -8(%rbp)	# tmp65, op1
	.loc 1 7675 0
	cmpq	$0, -48(%rbp)	#, second_test
	je	.L1945	#,
	.loc 1 7676 0
	movq	-48(%rbp), %rax	# second_test, tmp66
	movq	$0, (%rax)	#, *second_test_4(D)
.L1945:
	.loc 1 7677 0
	cmpq	$0, -56(%rbp)	#, bypass_test
	je	.L1946	#,
	.loc 1 7678 0
	movq	-56(%rbp), %rax	# bypass_test, tmp67
	movq	$0, (%rax)	#, *bypass_test_5(D)
.L1946:
	.loc 1 7680 0
	movq	-16(%rbp), %rax	# op0, tmp68
	movzbl	2(%rax), %eax	# op0_2->mode, D.30327
	movzbl	%al, %eax	# D.30327, D.30328
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30329
	cmpl	$2, %eax	#, D.30329
	jne	.L1947	#,
	.loc 1 7681 0
	movq	-56(%rbp), %rdi	# bypass_test, tmp70
	movq	-48(%rbp), %rcx	# second_test, tmp71
	movq	-8(%rbp), %rdx	# op1, tmp72
	movq	-16(%rbp), %rsi	# op0, tmp73
	movl	-36(%rbp), %eax	# code, tmp74
	movq	%rdi, %r9	# tmp70,
	movq	%rcx, %r8	# tmp71,
	movl	$0, %ecx	#,
	movl	%eax, %edi	# tmp74,
	call	ix86_expand_fp_compare	#
	movq	%rax, -24(%rbp)	# tmp75, ret
	jmp	.L1948	#
.L1947:
	.loc 1 7684 0
	movq	-8(%rbp), %rdx	# op1, tmp76
	movq	-16(%rbp), %rcx	# op0, tmp77
	movl	-36(%rbp), %eax	# code, tmp78
	movq	%rcx, %rsi	# tmp77,
	movl	%eax, %edi	# tmp78,
	call	ix86_expand_int_compare	#
	movq	%rax, -24(%rbp)	# tmp79, ret
.L1948:
	.loc 1 7686 0
	movq	-24(%rbp), %rax	# ret, D.30330
	.loc 1 7687 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE127:
	.size	ix86_expand_compare, .-ix86_expand_compare
	.globl	ix86_fp_jump_nontrivial_p
	.type	ix86_fp_jump_nontrivial_p, @function
ix86_fp_jump_nontrivial_p:
.LFB128:
	.loc 1 7693 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# code, code
	.loc 1 7695 0
	movl	$104, %edx	#, x86_cmove.915
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.916
	movl	%eax, %ecx	# ix86_arch.916, tmp76
	sarl	%cl, %edx	# tmp76, D.30332
	movl	%edx, %eax	# D.30332, D.30332
	andl	$1, %eax	#, D.30332
	testl	%eax, %eax	# D.30332
	jne	.L1951	#,
	.loc 1 7695 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.917
	andl	$327680, %eax	#, D.30332
	testl	%eax, %eax	# D.30332
	jne	.L1951	#,
	.loc 1 7696 0 is_stmt 1
	movl	$1, %eax	#, D.30331
	jmp	.L1956	#
.L1951:
	.loc 1 7697 0
	leaq	-4(%rbp), %rcx	#, tmp70
	leaq	-8(%rbp), %rdx	#, tmp71
	leaq	-12(%rbp), %rsi	#, tmp72
	movl	-20(%rbp), %eax	# code, tmp73
	movl	%eax, %edi	# tmp73,
	call	ix86_fp_comparison_codes	#
	.loc 1 7698 0
	movl	-12(%rbp), %eax	# bypass_code, bypass_code.919
	cmpl	$1, %eax	#, bypass_code.919
	jne	.L1953	#,
	.loc 1 7698 0 is_stmt 0 discriminator 2
	movl	-4(%rbp), %eax	# second_code, second_code.920
	cmpl	$1, %eax	#, second_code.920
	je	.L1954	#,
.L1953:
	.loc 1 7698 0 discriminator 1
	movl	$1, %eax	#, iftmp.918
	jmp	.L1955	#
.L1954:
	.loc 1 7698 0 discriminator 3
	movl	$0, %eax	#, iftmp.918
.L1955:
	.loc 1 7698 0 discriminator 4
	andl	$1, %eax	#, D.30331
.L1956:
	.loc 1 7699 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE128:
	.size	ix86_fp_jump_nontrivial_p, .-ix86_fp_jump_nontrivial_p
	.globl	ix86_expand_branch
	.type	ix86_expand_branch, @function
ix86_expand_branch:
.LFB129:
	.loc 1 7705 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -116(%rbp)	# code, code
	movq	%rsi, -128(%rbp)	# label, label
	.loc 1 7708 0
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.921
	movzbl	2(%rax), %eax	# ix86_compare_op0.921_7->mode, D.30333
	movzbl	%al, %eax	# D.30333, D.30334
	cmpl	$18, %eax	#, D.30334
	ja	.L1958	#,
	movl	%eax, %eax	# D.30334, tmp151
	movq	.L1960(,%rax,8), %rax	#, tmp152
	jmp	*%rax	# tmp152
	.section	.rodata
	.align 8
	.align 4
.L1960:
	.quad	.L1958
	.quad	.L1958
	.quad	.L1959
	.quad	.L1959
	.quad	.L1959
	.quad	.L1961
	.quad	.L1958
	.quad	.L1958
	.quad	.L1958
	.quad	.L1958
	.quad	.L1958
	.quad	.L1958
	.quad	.L1958
	.quad	.L1958
	.quad	.L1958
	.quad	.L1962
	.quad	.L1962
	.quad	.L1962
	.quad	.L1962
	.text
.L1959:
	.loc 1 7714 0
	movl	-116(%rbp), %eax	# code, tmp153
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp153,
	call	ix86_expand_compare	#
	movq	%rax, -72(%rbp)	# tmp154, tmp
	.loc 1 7715 0
	movq	global_rtl(%rip), %rbx	# global_rtl, D.30336
	movq	-128(%rbp), %rax	# label, tmp155
	movq	%rax, %rdx	# tmp155,
	movl	$0, %esi	#,
	movl	$67, %edi	#,
	call	gen_rtx_fmt_u00	#
	movq	%rax, %rdx	#, D.30336
	movq	-72(%rbp), %rax	# tmp, tmp156
	movq	%rbx, %r8	# D.30336,
	movq	%rdx, %rcx	# D.30336,
	movq	%rax, %rdx	# tmp156,
	movl	$0, %esi	#,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, -72(%rbp)	# tmp157, tmp
	.loc 1 7718 0
	movq	global_rtl(%rip), %rax	# global_rtl, D.30336
	movq	-72(%rbp), %rdx	# tmp, tmp158
	movq	%rdx, %rcx	# tmp158,
	movq	%rax, %rdx	# D.30336,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30336,
	call	emit_jump_insn	#
	.loc 1 7719 0
	jmp	.L1957	#
.L1962:
.LBB74:
	.loc 1 7730 0
	movl	-116(%rbp), %eax	# code, tmp159
	movl	$ix86_compare_op1, %edx	#,
	movl	$ix86_compare_op0, %esi	#,
	movl	%eax, %edi	# tmp159,
	call	ix86_prepare_fp_compare_args	#
	movl	%eax, -116(%rbp)	# tmp160, code
	.loc 1 7733 0
	leaq	-32(%rbp), %rcx	#, tmp161
	leaq	-48(%rbp), %rdx	#, tmp162
	leaq	-108(%rbp), %rsi	#, tmp163
	movl	-116(%rbp), %eax	# code, tmp164
	movl	%eax, %edi	# tmp164,
	call	ix86_fp_comparison_codes	#
	.loc 1 7738 0
	movl	-108(%rbp), %eax	# bypass_code, bypass_code.922
	cmpl	$1, %eax	#, bypass_code.922
	jne	.L1964	#,
	.loc 1 7738 0 is_stmt 0 discriminator 1
	movl	-32(%rbp), %eax	# second_code, second_code.923
	cmpl	$1, %eax	#, second_code.923
	jne	.L1964	#,
	.loc 1 7739 0 is_stmt 1
	movl	$104, %edx	#, x86_cmove.924
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.925
	movl	%eax, %ecx	# ix86_arch.925, tmp226
	sarl	%cl, %edx	# tmp226, D.30335
	movl	%edx, %eax	# D.30335, D.30335
	andl	$1, %eax	#, D.30335
	testl	%eax, %eax	# D.30335
	jne	.L1965	#,
	.loc 1 7739 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.926
	andl	$327680, %eax	#, D.30335
	testl	%eax, %eax	# D.30335
	je	.L1964	#,
.L1965:
	.loc 1 7741 0 is_stmt 1
	movq	global_rtl(%rip), %rbx	# global_rtl, D.30336
	movq	-128(%rbp), %rax	# label, tmp165
	movq	%rax, %rdx	# tmp165,
	movl	$0, %esi	#,
	movl	$67, %edi	#,
	call	gen_rtx_fmt_u00	#
	movq	%rax, %rcx	#, D.30336
	movq	ix86_compare_op1(%rip), %rdx	# ix86_compare_op1, ix86_compare_op1.927
	movq	ix86_compare_op0(%rip), %rsi	# ix86_compare_op0, ix86_compare_op0.928
	movl	-116(%rbp), %eax	# code, tmp166
	movl	$0, %r9d	#,
	movq	%rbx, %r8	# D.30336,
	movl	%eax, %edi	# tmp166,
	call	ix86_split_fp_branch	#
	jmp	.L1966	#
.L1964:
	.loc 1 7747 0
	movq	ix86_compare_op1(%rip), %rcx	# ix86_compare_op1, ix86_compare_op1.929
	movq	ix86_compare_op0(%rip), %rdx	# ix86_compare_op0, ix86_compare_op0.930
	movl	-116(%rbp), %eax	# code, tmp167
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp167,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -72(%rbp)	# tmp168, tmp
	.loc 1 7749 0
	movq	global_rtl(%rip), %rbx	# global_rtl, D.30336
	movq	-128(%rbp), %rax	# label, tmp169
	movq	%rax, %rdx	# tmp169,
	movl	$0, %esi	#,
	movl	$67, %edi	#,
	call	gen_rtx_fmt_u00	#
	movq	%rax, %rdx	#, D.30336
	movq	-72(%rbp), %rax	# tmp, tmp170
	movq	%rbx, %r8	# D.30336,
	movq	%rdx, %rcx	# D.30336,
	movq	%rax, %rdx	# tmp170,
	movl	$0, %esi	#,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, -72(%rbp)	# tmp171, tmp
	.loc 1 7752 0
	movq	global_rtl(%rip), %rax	# global_rtl, D.30336
	movq	-72(%rbp), %rdx	# tmp, tmp172
	movq	%rdx, %rcx	# tmp172,
	movq	%rax, %rdx	# D.30336,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -72(%rbp)	# tmp173, tmp
	.loc 1 7754 0
	movl	-116(%rbp), %eax	# code, tmp174
	movl	%eax, %edi	# tmp174,
	call	ix86_use_fcomi_compare	#
	movl	%eax, -96(%rbp)	# tmp175, use_fcomi
	.loc 1 7755 0
	cmpl	$0, -96(%rbp)	#, use_fcomi
	jne	.L1967	#,
	.loc 1 7755 0 is_stmt 0 discriminator 1
	movl	$4, %eax	#, iftmp.931
	jmp	.L1968	#
.L1967:
	.loc 1 7755 0 discriminator 2
	movl	$3, %eax	#, iftmp.931
.L1968:
	.loc 1 7755 0 discriminator 3
	movl	%eax, %edi	# iftmp.931,
	call	rtvec_alloc	#
	movq	%rax, -64(%rbp)	# tmp176, vec
	.loc 1 7756 0 is_stmt 1 discriminator 3
	movq	-64(%rbp), %rax	# vec, tmp177
	movq	-72(%rbp), %rdx	# tmp, tmp178
	movq	%rdx, 8(%rax)	# tmp178, vec_36->elem
	.loc 1 7758 0 discriminator 3
	movl	$18, %esi	#,
	movl	$57, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	# D.30336,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-64(%rbp), %rdx	# vec, tmp179
	movq	%rax, 16(%rdx)	# D.30336, vec_36->elem
	.loc 1 7760 0 discriminator 3
	movl	$17, %esi	#,
	movl	$57, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	# D.30336,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-64(%rbp), %rdx	# vec, tmp180
	movq	%rax, 24(%rdx)	# D.30336, vec_36->elem
	.loc 1 7761 0 discriminator 3
	cmpl	$0, -96(%rbp)	#, use_fcomi
	jne	.L1969	#,
	.loc 1 7763 0
	movl	$3, %esi	#,
	movl	$62, %edi	#,
	call	gen_rtx_fmt_0	#
	movq	%rax, %rdx	# D.30336,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-64(%rbp), %rdx	# vec, tmp181
	movq	%rax, 32(%rdx)	# D.30336, vec_36->elem
.L1969:
	.loc 1 7765 0
	movq	-64(%rbp), %rax	# vec, tmp182
	movq	%rax, %rdx	# tmp182,
	movl	$0, %esi	#,
	movl	$39, %edi	#,
	call	gen_rtx_fmt_E	#
	movq	%rax, %rdi	# D.30336,
	call	emit_jump_insn	#
.L1966:
	.loc 1 7767 0
	nop
	jmp	.L1957	#
.L1961:
.LBE74:
	.loc 1 7771 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.932
	andl	$33554432, %eax	#, D.30335
	testl	%eax, %eax	# D.30335
	je	.L1970	#,
	.loc 1 7772 0
	jmp	.L1959	#
.L1970:
.LBB75:
	.loc 1 7778 0
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.933
	movzwl	(%rax), %eax	# ix86_compare_op0.933_46->code, D.30337
	cmpw	$67, %ax	#, D.30337
	je	.L1971	#,
	.loc 1 7778 0 is_stmt 0 discriminator 2
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.934
	movzwl	(%rax), %eax	# ix86_compare_op0.934_48->code, D.30337
	cmpw	$68, %ax	#, D.30337
	je	.L1971	#,
	.loc 1 7778 0 discriminator 1
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.935
	movzwl	(%rax), %eax	# ix86_compare_op0.935_50->code, D.30337
	cmpw	$54, %ax	#, D.30337
	je	.L1971	#,
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.936
	movzwl	(%rax), %eax	# ix86_compare_op0.936_52->code, D.30337
	cmpw	$55, %ax	#, D.30337
	je	.L1971	#,
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.937
	movzwl	(%rax), %eax	# ix86_compare_op0.937_54->code, D.30337
	cmpw	$58, %ax	#, D.30337
	je	.L1971	#,
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.938
	movzwl	(%rax), %eax	# ix86_compare_op0.938_56->code, D.30337
	cmpw	$134, %ax	#, D.30337
	je	.L1971	#,
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.939
	movzwl	(%rax), %eax	# ix86_compare_op0.939_58->code, D.30337
	cmpw	$56, %ax	#, D.30337
	je	.L1971	#,
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.940
	movzwl	(%rax), %eax	# ix86_compare_op0.940_60->code, D.30337
	cmpw	$140, %ax	#, D.30337
	jne	.L1972	#,
.L1971:
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.941
	movzwl	(%rax), %eax	# ix86_compare_op1.941_62->code, D.30337
	cmpw	$67, %ax	#, D.30337
	je	.L1972	#,
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.942
	movzwl	(%rax), %eax	# ix86_compare_op1.942_64->code, D.30337
	cmpw	$68, %ax	#, D.30337
	je	.L1972	#,
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.943
	movzwl	(%rax), %eax	# ix86_compare_op1.943_66->code, D.30337
	cmpw	$54, %ax	#, D.30337
	je	.L1972	#,
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.944
	movzwl	(%rax), %eax	# ix86_compare_op1.944_68->code, D.30337
	cmpw	$55, %ax	#, D.30337
	je	.L1972	#,
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.945
	movzwl	(%rax), %eax	# ix86_compare_op1.945_70->code, D.30337
	cmpw	$58, %ax	#, D.30337
	je	.L1972	#,
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.946
	movzwl	(%rax), %eax	# ix86_compare_op1.946_72->code, D.30337
	cmpw	$134, %ax	#, D.30337
	je	.L1972	#,
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.947
	movzwl	(%rax), %eax	# ix86_compare_op1.947_74->code, D.30337
	cmpw	$56, %ax	#, D.30337
	je	.L1972	#,
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.948
	movzwl	(%rax), %eax	# ix86_compare_op1.948_76->code, D.30337
	cmpw	$140, %ax	#, D.30337
	je	.L1972	#,
	.loc 1 7780 0 is_stmt 1
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, tmp183
	movq	%rax, -72(%rbp)	# tmp183, tmp
	.loc 1 7781 0
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.949
	movq	%rax, ix86_compare_op0(%rip)	# ix86_compare_op1.949, ix86_compare_op0
	.loc 1 7782 0
	movq	-72(%rbp), %rax	# tmp, tmp184
	movq	%rax, ix86_compare_op1(%rip)	# tmp184, ix86_compare_op1
	.loc 1 7783 0
	movl	-116(%rbp), %eax	# code, tmp185
	movl	%eax, %edi	# tmp185,
	call	swap_condition	#
	movl	%eax, -116(%rbp)	# tmp186, code
.L1972:
	.loc 1 7785 0
	leaq	-32(%rbp), %rdx	#, tmp187
	leaq	-48(%rbp), %rax	#, tmp188
	movq	%rdx, %rcx	# tmp187,
	movq	%rax, %rdx	# tmp188,
	movl	$1, %esi	#,
	movl	$ix86_compare_op0, %edi	#,
	call	split_di	#
	.loc 1 7786 0
	leaq	-32(%rbp), %rax	#, tmp189
	leaq	8(%rax), %rdx	#, tmp190
	leaq	-48(%rbp), %rax	#, tmp191
	addq	$8, %rax	#, tmp192
	movq	%rdx, %rcx	# tmp190,
	movq	%rax, %rdx	# tmp192,
	movl	$1, %esi	#,
	movl	$ix86_compare_op1, %edi	#,
	call	split_di	#
	.loc 1 7792 0
	cmpl	$103, -116(%rbp)	#, code
	je	.L1973	#,
	.loc 1 7792 0 is_stmt 0 discriminator 1
	cmpl	$102, -116(%rbp)	#, code
	jne	.L1974	#,
.L1973:
	.loc 1 7793 0 is_stmt 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.950
	testl	%eax, %eax	# optimize_size.950
	je	.L1975	#,
	.loc 1 7794 0
	movq	-24(%rbp), %rdx	# hi, D.30336
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30336
	cmpq	%rax, %rdx	# D.30336, D.30336
	je	.L1975	#,
	.loc 1 7794 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rdx	# lo, D.30336
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30336
	cmpq	%rax, %rdx	# D.30336, D.30336
	jne	.L1974	#,
.L1975:
.LBB76:
	.loc 1 7798 0 is_stmt 1
	movq	-32(%rbp), %rax	# hi, tmp193
	movq	%rax, -80(%rbp)	# tmp193, xor1
	.loc 1 7799 0
	movq	-24(%rbp), %rdx	# hi, D.30336
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30336
	cmpq	%rax, %rdx	# D.30336, D.30336
	je	.L1976	#,
	.loc 1 7800 0
	movq	-24(%rbp), %rcx	# hi, D.30336
	movq	optab_table+160(%rip), %rax	# optab_table, D.30338
	movq	-80(%rbp), %rdx	# xor1, tmp194
	movl	$2, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movq	%rax, %rsi	# D.30338,
	movl	$4, %edi	#,
	call	expand_binop	#
	movq	%rax, -80(%rbp)	# tmp195, xor1
.L1976:
	.loc 1 7803 0
	movq	-48(%rbp), %rax	# lo, tmp196
	movq	%rax, -88(%rbp)	# tmp196, xor0
	.loc 1 7804 0
	movq	-40(%rbp), %rdx	# lo, D.30336
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30336
	cmpq	%rax, %rdx	# D.30336, D.30336
	je	.L1977	#,
	.loc 1 7805 0
	movq	-40(%rbp), %rcx	# lo, D.30336
	movq	optab_table+160(%rip), %rax	# optab_table, D.30338
	movq	-88(%rbp), %rdx	# xor0, tmp197
	movl	$2, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movq	%rax, %rsi	# D.30338,
	movl	$4, %edi	#,
	call	expand_binop	#
	movq	%rax, -88(%rbp)	# tmp198, xor0
.L1977:
	.loc 1 7808 0
	movq	optab_table+152(%rip), %rax	# optab_table, D.30338
	movq	-88(%rbp), %rcx	# xor0, tmp199
	movq	-80(%rbp), %rdx	# xor1, tmp200
	movl	$2, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movq	%rax, %rsi	# D.30338,
	movl	$4, %edi	#,
	call	expand_binop	#
	movq	%rax, -72(%rbp)	# tmp201, tmp
	.loc 1 7811 0
	movq	-72(%rbp), %rax	# tmp, tmp202
	movq	%rax, ix86_compare_op0(%rip)	# tmp202, ix86_compare_op0
	.loc 1 7812 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, ix86_compare_op1.951
	movq	%rax, ix86_compare_op1(%rip)	# ix86_compare_op1.951, ix86_compare_op1
	.loc 1 7813 0
	movq	-128(%rbp), %rdx	# label, tmp203
	movl	-116(%rbp), %eax	# code, tmp204
	movq	%rdx, %rsi	# tmp203,
	movl	%eax, %edi	# tmp204,
	call	ix86_expand_branch	#
	.loc 1 7814 0
	jmp	.L1957	#
.L1974:
.LBE76:
	.loc 1 7821 0
	movq	-24(%rbp), %rax	# hi, D.30336
	movzwl	(%rax), %eax	# _101->code, D.30337
	cmpw	$54, %ax	#, D.30337
	jne	.L1979	#,
	.loc 1 7821 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rdx	# lo, D.30336
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30336
	cmpq	%rax, %rdx	# D.30336, D.30336
	jne	.L1979	#,
	.loc 1 7822 0 is_stmt 1
	movl	-116(%rbp), %eax	# code, code
	cmpl	$108, %eax	#, code
	ja	.L1981	#,
	cmpl	$107, %eax	#, code
	jae	.L1982	#,
	cmpl	$104, %eax	#, code
	je	.L1982	#,
	.loc 1 7830 0
	jmp	.L1979	#
.L1981:
	.loc 1 7822 0
	cmpl	$111, %eax	#, code
	je	.L1982	#,
	.loc 1 7830 0
	jmp	.L1979	#
.L1982:
	.loc 1 7825 0
	movq	-32(%rbp), %rax	# hi, ix86_compare_op0.952
	movq	%rax, ix86_compare_op0(%rip)	# ix86_compare_op0.952, ix86_compare_op0
	.loc 1 7826 0
	movq	-24(%rbp), %rax	# hi, ix86_compare_op1.953
	movq	%rax, ix86_compare_op1(%rip)	# ix86_compare_op1.953, ix86_compare_op1
	.loc 1 7827 0
	movq	-128(%rbp), %rdx	# label, tmp206
	movl	-116(%rbp), %eax	# code, tmp207
	movq	%rdx, %rsi	# tmp206,
	movl	%eax, %edi	# tmp207,
	call	ix86_expand_branch	#
	.loc 1 7828 0
	jmp	.L1957	#
.L1979:
	.loc 1 7835 0
	call	gen_label_rtx	#
	movq	%rax, -56(%rbp)	# tmp208, label2
	.loc 1 7837 0
	movl	-116(%rbp), %eax	# code, tmp209
	movl	%eax, -104(%rbp)	# tmp209, code1
	.loc 1 7838 0
	movl	-116(%rbp), %eax	# code, tmp210
	movl	%eax, %edi	# tmp210,
	call	swap_condition	#
	movl	%eax, -100(%rbp)	# tmp211, code2
	.loc 1 7839 0
	movl	-116(%rbp), %eax	# code, tmp212
	movl	%eax, %edi	# tmp212,
	call	unsigned_condition	#
	movl	%eax, -92(%rbp)	# tmp213, code3
	.loc 1 7841 0
	movl	-116(%rbp), %eax	# code, tmp215
	subl	$102, %eax	#, tmp214
	cmpl	$9, %eax	#, tmp214
	ja	.L1983	#,
	movl	%eax, %eax	# tmp214, tmp216
	movq	.L1985(,%rax,8), %rax	#, tmp217
	jmp	*%rax	# tmp217
	.section	.rodata
	.align 8
	.align 4
.L1985:
	.quad	.L1984
	.quad	.L1986
	.quad	.L1987
	.quad	.L1996
	.quad	.L1989
	.quad	.L1996
	.quad	.L1990
	.quad	.L1996
	.quad	.L1991
	.quad	.L1996
	.text
.L1989:
	.loc 1 7846 0
	movl	$107, -104(%rbp)	#, code1
	movl	$105, -100(%rbp)	#, code2
	jmp	.L1992	#
.L1987:
	.loc 1 7847 0
	movl	$105, -104(%rbp)	#, code1
	movl	$107, -100(%rbp)	#, code2
	jmp	.L1992	#
.L1991:
	.loc 1 7848 0
	movl	$111, -104(%rbp)	#, code1
	movl	$109, -100(%rbp)	#, code2
	jmp	.L1992	#
.L1990:
	.loc 1 7849 0
	movl	$109, -104(%rbp)	#, code1
	movl	$111, -100(%rbp)	#, code2
	jmp	.L1992	#
.L1986:
	.loc 1 7851 0
	movl	$1, -104(%rbp)	#, code1
	movl	$102, -100(%rbp)	#, code2
	jmp	.L1992	#
.L1984:
	.loc 1 7852 0
	movl	$1, -100(%rbp)	#, code2
	jmp	.L1992	#
.L1983:
	.loc 1 7855 0
	movl	$__FUNCTION__.16060, %edx	#,
	movl	$7855, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1996:
	.loc 1 7844 0
	nop
.L1992:
	.loc 1 7866 0
	movq	-32(%rbp), %rax	# hi, ix86_compare_op0.954
	movq	%rax, ix86_compare_op0(%rip)	# ix86_compare_op0.954, ix86_compare_op0
	.loc 1 7867 0
	movq	-24(%rbp), %rax	# hi, ix86_compare_op1.955
	movq	%rax, ix86_compare_op1(%rip)	# ix86_compare_op1.955, ix86_compare_op1
	.loc 1 7869 0
	cmpl	$1, -104(%rbp)	#, code1
	je	.L1993	#,
	.loc 1 7870 0
	movq	-128(%rbp), %rdx	# label, tmp218
	movl	-104(%rbp), %eax	# code1, tmp219
	movq	%rdx, %rsi	# tmp218,
	movl	%eax, %edi	# tmp219,
	call	ix86_expand_branch	#
.L1993:
	.loc 1 7871 0
	cmpl	$1, -100(%rbp)	#, code2
	je	.L1994	#,
	.loc 1 7872 0
	movq	-56(%rbp), %rdx	# label2, tmp220
	movl	-100(%rbp), %eax	# code2, tmp221
	movq	%rdx, %rsi	# tmp220,
	movl	%eax, %edi	# tmp221,
	call	ix86_expand_branch	#
.L1994:
	.loc 1 7874 0
	movq	-48(%rbp), %rax	# lo, ix86_compare_op0.956
	movq	%rax, ix86_compare_op0(%rip)	# ix86_compare_op0.956, ix86_compare_op0
	.loc 1 7875 0
	movq	-40(%rbp), %rax	# lo, ix86_compare_op1.957
	movq	%rax, ix86_compare_op1(%rip)	# ix86_compare_op1.957, ix86_compare_op1
	.loc 1 7876 0
	movq	-128(%rbp), %rdx	# label, tmp222
	movl	-92(%rbp), %eax	# code3, tmp223
	movq	%rdx, %rsi	# tmp222,
	movl	%eax, %edi	# tmp223,
	call	ix86_expand_branch	#
	.loc 1 7878 0
	cmpl	$1, -100(%rbp)	#, code2
	je	.L1995	#,
	.loc 1 7879 0
	movq	-56(%rbp), %rax	# label2, tmp224
	movq	%rax, %rdi	# tmp224,
	call	emit_label	#
	.loc 1 7880 0
	jmp	.L1957	#
.L1995:
	nop
	jmp	.L1957	#
.L1958:
.LBE75:
	.loc 1 7884 0
	movl	$__FUNCTION__.16060, %edx	#,
	movl	$7884, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L1957:
	.loc 1 7886 0
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE129:
	.size	ix86_expand_branch, .-ix86_expand_branch
	.globl	ix86_split_fp_branch
	.type	ix86_split_fp_branch, @function
ix86_split_fp_branch:
.LFB130:
	.loc 1 7893 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -84(%rbp)	# code, code
	movq	%rsi, -96(%rbp)	# op1, op1
	movq	%rdx, -104(%rbp)	# op2, op2
	movq	%rcx, -112(%rbp)	# target1, target1
	movq	%r8, -120(%rbp)	# target2, target2
	movq	%r9, -128(%rbp)	# tmp, tmp
	.loc 1 7895 0
	movq	$0, -48(%rbp)	#, label
	.loc 1 7897 0
	movl	$-1, -76(%rbp)	#, bypass_probability
	movl	$-1, -72(%rbp)	#, second_probability
	movl	$-1, -68(%rbp)	#, probability
	.loc 1 7900 0
	movq	global_rtl(%rip), %rax	# global_rtl, D.30341
	cmpq	-120(%rbp), %rax	# target2, D.30341
	je	.L1998	#,
.LBB77:
	.loc 1 7902 0
	movq	-120(%rbp), %rax	# target2, tmp90
	movq	%rax, -40(%rbp)	# tmp90, tmp
	.loc 1 7903 0
	movl	-84(%rbp), %eax	# code, tmp91
	movl	%eax, %edi	# tmp91,
	call	reverse_condition_maybe_unordered	#
	movl	%eax, -84(%rbp)	# tmp92, code
	.loc 1 7904 0
	movq	-112(%rbp), %rax	# target1, tmp93
	movq	%rax, -120(%rbp)	# tmp93, target2
	.loc 1 7905 0
	movq	-40(%rbp), %rax	# tmp, tmp94
	movq	%rax, -112(%rbp)	# tmp94, target1
.L1998:
.LBE77:
	.loc 1 7908 0
	leaq	-56(%rbp), %r8	#, tmp95
	leaq	-64(%rbp), %rdi	#, tmp96
	movq	-128(%rbp), %rcx	# tmp, tmp97
	movq	-104(%rbp), %rdx	# op2, tmp98
	movq	-96(%rbp), %rsi	# op1, tmp99
	movl	-84(%rbp), %eax	# code, tmp100
	movq	%r8, %r9	# tmp95,
	movq	%rdi, %r8	# tmp96,
	movl	%eax, %edi	# tmp100,
	call	ix86_expand_fp_compare	#
	movq	%rax, -32(%rbp)	# tmp101, condition
	.loc 1 7911 0
	movl	split_branch_probability(%rip), %eax	# split_branch_probability, split_branch_probability.958
	testl	%eax, %eax	# split_branch_probability.958
	js	.L1999	#,
	.loc 1 7916 0
	movl	split_branch_probability(%rip), %eax	# split_branch_probability, tmp102
	movl	%eax, -68(%rbp)	# tmp102, probability
	.loc 1 7921 0
	movq	-56(%rbp), %rax	# bypass, bypass.959
	testq	%rax, %rax	# bypass.959
	je	.L2000	#,
	.loc 1 7922 0
	movl	$1, -76(%rbp)	#, bypass_probability
.L2000:
	.loc 1 7923 0
	movq	-64(%rbp), %rax	# second, second.960
	testq	%rax, %rax	# second.960
	je	.L1999	#,
	.loc 1 7924 0
	movl	$1, -72(%rbp)	#, second_probability
.L1999:
	.loc 1 7926 0
	movq	-56(%rbp), %rax	# bypass, bypass.961
	testq	%rax, %rax	# bypass.961
	je	.L2001	#,
	.loc 1 7928 0
	call	gen_label_rtx	#
	movq	%rax, -48(%rbp)	# tmp103, label
	.loc 1 7929 0
	movq	global_rtl(%rip), %rbx	# global_rtl, D.30341
	movq	-48(%rbp), %rax	# label, tmp104
	movq	%rax, %rdx	# tmp104,
	movl	$0, %esi	#,
	movl	$67, %edi	#,
	call	gen_rtx_fmt_u00	#
	movq	%rax, %rdx	#, D.30341
	movq	-56(%rbp), %rax	# bypass, bypass.962
	movq	%rbx, %r8	# D.30341,
	movq	%rdx, %rcx	# D.30341,
	movq	%rax, %rdx	# bypass.962,
	movl	$0, %esi	#,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30341
	movq	global_rtl(%rip), %rax	# global_rtl, D.30341
	movq	%rdx, %rcx	# D.30341,
	movq	%rax, %rdx	# D.30341,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30341,
	call	emit_jump_insn	#
	movq	%rax, -24(%rbp)	# tmp105, i
	.loc 1 7936 0
	cmpl	$0, -76(%rbp)	#, bypass_probability
	js	.L2001	#,
	.loc 1 7938 0
	movq	-24(%rbp), %rax	# i, tmp106
	movq	56(%rax), %rbx	# i_39->fld[6].rtx, D.30341
	movl	-76(%rbp), %eax	# bypass_probability, tmp107
	cltq
	movq	%rax, %rsi	# D.30342,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rbx, %rcx	# D.30341,
	movq	%rax, %rdx	# D.30341,
	movl	$16, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-24(%rbp), %rdx	# i, tmp108
	movq	%rax, 56(%rdx)	# D.30341, i_39->fld[6].rtx
.L2001:
	.loc 1 7942 0
	movq	-120(%rbp), %rcx	# target2, tmp109
	movq	-112(%rbp), %rdx	# target1, tmp110
	movq	-32(%rbp), %rax	# condition, tmp111
	movq	%rcx, %r8	# tmp109,
	movq	%rdx, %rcx	# tmp110,
	movq	%rax, %rdx	# tmp111,
	movl	$0, %esi	#,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30341
	movq	global_rtl(%rip), %rax	# global_rtl, D.30341
	movq	%rdx, %rcx	# D.30341,
	movq	%rax, %rdx	# D.30341,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30341,
	call	emit_jump_insn	#
	movq	%rax, -24(%rbp)	# tmp112, i
	.loc 1 7946 0
	cmpl	$0, -68(%rbp)	#, probability
	js	.L2002	#,
	.loc 1 7948 0
	movq	-24(%rbp), %rax	# i, tmp113
	movq	56(%rax), %rbx	# i_47->fld[6].rtx, D.30341
	movl	-68(%rbp), %eax	# probability, tmp114
	cltq
	movq	%rax, %rsi	# D.30342,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rbx, %rcx	# D.30341,
	movq	%rax, %rdx	# D.30341,
	movl	$16, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-24(%rbp), %rdx	# i, tmp115
	movq	%rax, 56(%rdx)	# D.30341, i_47->fld[6].rtx
.L2002:
	.loc 1 7951 0
	movq	-64(%rbp), %rax	# second, second.963
	testq	%rax, %rax	# second.963
	je	.L2003	#,
	.loc 1 7953 0
	movq	-64(%rbp), %rax	# second, second.964
	movq	-120(%rbp), %rcx	# target2, tmp116
	movq	-112(%rbp), %rdx	# target1, tmp117
	movq	%rcx, %r8	# tmp116,
	movq	%rdx, %rcx	# tmp117,
	movq	%rax, %rdx	# second.964,
	movl	$0, %esi	#,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30341
	movq	global_rtl(%rip), %rax	# global_rtl, D.30341
	movq	%rdx, %rcx	# D.30341,
	movq	%rax, %rdx	# D.30341,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30341,
	call	emit_jump_insn	#
	movq	%rax, -24(%rbp)	# tmp118, i
	.loc 1 7957 0
	cmpl	$0, -72(%rbp)	#, second_probability
	js	.L2003	#,
	.loc 1 7959 0
	movq	-24(%rbp), %rax	# i, tmp119
	movq	56(%rax), %rbx	# i_57->fld[6].rtx, D.30341
	movl	-72(%rbp), %eax	# second_probability, tmp120
	cltq
	movq	%rax, %rsi	# D.30342,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rbx, %rcx	# D.30341,
	movq	%rax, %rdx	# D.30341,
	movl	$16, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-24(%rbp), %rdx	# i, tmp121
	movq	%rax, 56(%rdx)	# D.30341, i_57->fld[6].rtx
.L2003:
	.loc 1 7963 0
	cmpq	$0, -48(%rbp)	#, label
	je	.L1997	#,
	.loc 1 7964 0
	movq	-48(%rbp), %rax	# label, tmp122
	movq	%rax, %rdi	# tmp122,
	call	emit_label	#
.L1997:
	.loc 1 7965 0
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE130:
	.size	ix86_split_fp_branch, .-ix86_split_fp_branch
	.globl	ix86_expand_setcc
	.type	ix86_expand_setcc, @function
ix86_expand_setcc:
.LFB131:
	.loc 1 7971 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movl	%edi, -68(%rbp)	# code, code
	movq	%rsi, -80(%rbp)	# dest, dest
	.loc 1 7975 0
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.965
	movzbl	2(%rax), %eax	# ix86_compare_op0.965_4->mode, D.30344
	cmpb	$5, %al	#, D.30344
	jne	.L2006	#,
	.loc 1 7976 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.966
	andl	$33554432, %eax	#, D.30343
	testl	%eax, %eax	# D.30343
	jne	.L2006	#,
	.loc 1 7977 0
	movl	$0, %eax	#, D.30343
	jmp	.L2014	#
.L2006:
	.loc 1 7979 0
	movq	-80(%rbp), %rax	# dest, tmp78
	movzbl	2(%rax), %eax	# dest_9(D)->mode, D.30344
	cmpb	$2, %al	#, D.30344
	je	.L2008	#,
	.loc 1 7980 0
	movl	$__FUNCTION__.16088, %edx	#,
	movl	$7980, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2008:
	.loc 1 7982 0
	leaq	-48(%rbp), %rdx	#, tmp79
	leaq	-56(%rbp), %rcx	#, tmp80
	movl	-68(%rbp), %eax	# code, tmp81
	movq	%rcx, %rsi	# tmp80,
	movl	%eax, %edi	# tmp81,
	call	ix86_expand_compare	#
	movq	%rax, -32(%rbp)	# tmp82, ret
	.loc 1 7983 0
	movq	-32(%rbp), %rax	# ret, tmp83
	movb	$2, 2(%rax)	#, ret_12->mode
	.loc 1 7985 0
	movq	-80(%rbp), %rax	# dest, tmp84
	movq	%rax, -24(%rbp)	# tmp84, tmp
	.loc 1 7986 0
	movq	-80(%rbp), %rax	# dest, tmp85
	movq	%rax, -16(%rbp)	# tmp85, tmpreg
	.loc 1 7988 0
	movq	-32(%rbp), %rdx	# ret, tmp86
	movq	-24(%rbp), %rax	# tmp, tmp87
	movq	%rdx, %rcx	# tmp86,
	movq	%rax, %rdx	# tmp87,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30345,
	call	emit_insn	#
	.loc 1 7989 0
	movq	-48(%rbp), %rax	# bypass_test, bypass_test.967
	testq	%rax, %rax	# bypass_test.967
	jne	.L2009	#,
	.loc 1 7989 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# second_test, second_test.968
	testq	%rax, %rax	# second_test.968
	je	.L2010	#,
.L2009:
.LBB78:
	.loc 1 7991 0 is_stmt 1
	movq	-56(%rbp), %rax	# second_test, tmp88
	movq	%rax, -40(%rbp)	# tmp88, test
	.loc 1 7992 0
	movl	$0, -60(%rbp)	#, bypass
	.loc 1 7993 0
	movl	$2, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -8(%rbp)	# tmp89, tmp2
	.loc 1 7994 0
	movq	-48(%rbp), %rax	# bypass_test, bypass_test.969
	testq	%rax, %rax	# bypass_test.969
	je	.L2011	#,
	.loc 1 7996 0
	movq	-56(%rbp), %rax	# second_test, second_test.970
	testq	%rax, %rax	# second_test.970
	je	.L2012	#,
	.loc 1 7997 0
	movl	$__FUNCTION__.16088, %edx	#,
	movl	$7997, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2012:
	.loc 1 7998 0
	movq	-48(%rbp), %rax	# bypass_test, tmp90
	movq	%rax, -40(%rbp)	# tmp90, test
	.loc 1 7999 0
	movl	$1, -60(%rbp)	#, bypass
	.loc 1 8000 0
	movq	-40(%rbp), %rax	# test, tmp91
	movzwl	(%rax), %eax	# test_23->code, D.30346
	movzwl	%ax, %eax	# D.30346, D.30347
	movl	%eax, %edi	# D.30347,
	call	reverse_condition_maybe_unordered	#
	movl	%eax, %edx	# D.30347, D.30346
	movq	-40(%rbp), %rax	# test, tmp92
	movw	%dx, (%rax)	# D.30346, test_23->code
.L2011:
	.loc 1 8002 0
	movq	-40(%rbp), %rax	# test, tmp93
	movb	$2, 2(%rax)	#, test_1->mode
	.loc 1 8003 0
	movq	-40(%rbp), %rdx	# test, tmp94
	movq	-8(%rbp), %rax	# tmp2, tmp95
	movq	%rdx, %rcx	# tmp94,
	movq	%rax, %rdx	# tmp95,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30345,
	call	emit_insn	#
	.loc 1 8005 0
	cmpl	$0, -60(%rbp)	#, bypass
	je	.L2013	#,
	.loc 1 8006 0
	movq	-8(%rbp), %rdx	# tmp2, tmp96
	movq	-16(%rbp), %rcx	# tmpreg, tmp97
	movq	-24(%rbp), %rax	# tmp, tmp98
	movq	%rcx, %rsi	# tmp97,
	movq	%rax, %rdi	# tmp98,
	call	gen_andqi3	#
	movq	%rax, %rdi	# D.30345,
	call	emit_insn	#
	jmp	.L2010	#
.L2013:
	.loc 1 8008 0
	movq	-8(%rbp), %rdx	# tmp2, tmp99
	movq	-16(%rbp), %rcx	# tmpreg, tmp100
	movq	-24(%rbp), %rax	# tmp, tmp101
	movq	%rcx, %rsi	# tmp100,
	movq	%rax, %rdi	# tmp101,
	call	gen_iorqi3	#
	movq	%rax, %rdi	# D.30345,
	call	emit_insn	#
.L2010:
.LBE78:
	.loc 1 8011 0
	movl	$1, %eax	#, D.30343
.L2014:
	.loc 1 8012 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE131:
	.size	ix86_expand_setcc, .-ix86_expand_setcc
	.globl	ix86_expand_int_movcc
	.type	ix86_expand_int_movcc, @function
ix86_expand_int_movcc:
.LFB132:
	.loc 1 8017 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$216, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -216(%rbp)	# operands, operands
	.loc 1 8018 0
	movq	-216(%rbp), %rax	# operands, tmp268
	addq	$8, %rax	#, D.30349
	movq	(%rax), %rax	# *_25, D.30350
	movzwl	(%rax), %eax	# _26->code, D.30351
	movzwl	%ax, %eax	# D.30351, tmp269
	movl	%eax, -196(%rbp)	# tmp269, code
	.loc 1 8021 0
	movq	-216(%rbp), %rax	# operands, tmp270
	movq	(%rax), %rax	# *operands_24(D), D.30350
	movzbl	2(%rax), %eax	# _29->mode, D.30352
	movzbl	%al, %eax	# D.30352, tmp271
	movl	%eax, -184(%rbp)	# tmp271, mode
	.loc 1 8027 0
	cmpl	$110, -196(%rbp)	#, code
	je	.L2016	#,
	.loc 1 8027 0 is_stmt 0 discriminator 1
	cmpl	$109, -196(%rbp)	#, code
	jne	.L2017	#,
.L2016:
	.loc 1 8028 0 is_stmt 1
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.971
	movzwl	(%rax), %eax	# ix86_compare_op1.971_32->code, D.30351
	cmpw	$54, %ax	#, D.30351
	jne	.L2017	#,
	.loc 1 8029 0
	cmpl	$3, -184(%rbp)	#, mode
	je	.L2017	#,
	.loc 1 8030 0
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.972
	movq	8(%rax), %rax	# ix86_compare_op1.972_34->fld[0].rtwint, D.30353
	cmpq	$-1, %rax	#, D.30353
	je	.L2017	#,
	.loc 1 8033 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.973
	andl	$33554432, %eax	#, D.30348
	testl	%eax, %eax	# D.30348
	je	.L2018	#,
	.loc 1 8034 0
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.974
	movzbl	2(%rax), %eax	# ix86_compare_op0.974_38->mode, D.30352
	cmpb	$5, %al	#, D.30352
	jne	.L2018	#,
	.loc 1 8035 0
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.975
	movq	8(%rax), %rax	# ix86_compare_op1.975_40->fld[0].rtwint, D.30353
	cmpq	$2147483647, %rax	#, D.30353
	je	.L2017	#,
.L2018:
	.loc 1 8036 0
	movq	-216(%rbp), %rax	# operands, tmp272
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rax	# *_42, D.30350
	movzwl	(%rax), %eax	# _43->code, D.30351
	cmpw	$54, %ax	#, D.30351
	jne	.L2017	#,
	.loc 1 8037 0
	movq	-216(%rbp), %rax	# operands, tmp273
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rax	# *_45, D.30350
	movzwl	(%rax), %eax	# _46->code, D.30351
	cmpw	$54, %ax	#, D.30351
	jne	.L2017	#,
	.loc 1 8039 0
	cmpl	$110, -196(%rbp)	#, code
	jne	.L2019	#,
	.loc 1 8040 0
	movl	$111, -196(%rbp)	#, code
	jmp	.L2020	#
.L2019:
	.loc 1 8042 0
	movl	$108, -196(%rbp)	#, code
.L2020:
	.loc 1 8044 0
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.976
	movzbl	2(%rax), %eax	# ix86_compare_op0.976_50->mode, D.30352
	.loc 1 8043 0
	movzbl	%al, %eax	# D.30352, D.30354
	movq	ix86_compare_op1(%rip), %rdx	# ix86_compare_op1, ix86_compare_op1.977
	movq	8(%rdx), %rdx	# ix86_compare_op1.977_53->fld[0].rtwint, D.30353
	addq	$1, %rdx	#, D.30353
	movl	%eax, %esi	# D.30354,
	movq	%rdx, %rdi	# D.30353,
	call	gen_int_mode	#
	movq	%rax, ix86_compare_op1(%rip)	# ix86_compare_op1.978, ix86_compare_op1
.L2017:
	.loc 1 8047 0
	call	start_sequence	#
	.loc 1 8048 0
	leaq	-168(%rbp), %rdx	#, tmp274
	leaq	-176(%rbp), %rcx	#, tmp275
	movl	-196(%rbp), %eax	# code, tmp276
	movq	%rcx, %rsi	# tmp275,
	movl	%eax, %edi	# tmp276,
	call	ix86_expand_compare	#
	movq	%rax, -104(%rbp)	# tmp277, compare_op
	.loc 1 8049 0
	call	gen_sequence	#
	movq	%rax, -96(%rbp)	# tmp278, compare_seq
	.loc 1 8050 0
	call	end_sequence	#
	.loc 1 8052 0
	movq	-104(%rbp), %rax	# compare_op, tmp279
	movzwl	(%rax), %eax	# compare_op_57->code, D.30351
	movzwl	%ax, %eax	# D.30351, tmp280
	movl	%eax, -192(%rbp)	# tmp280, compare_code
	.loc 1 8057 0
	cmpl	$3, -184(%rbp)	#, mode
	je	.L2021	#,
	.loc 1 8058 0
	cmpl	$5, -184(%rbp)	#, mode
	jne	.L2022	#,
	.loc 1 8058 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.979
	andl	$33554432, %eax	#, D.30348
	testl	%eax, %eax	# D.30348
	je	.L2021	#,
.L2022:
	.loc 1 8059 0 is_stmt 1
	movq	-216(%rbp), %rax	# operands, tmp281
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rax	# *_63, D.30350
	movzwl	(%rax), %eax	# _64->code, D.30351
	cmpw	$54, %ax	#, D.30351
	jne	.L2021	#,
	.loc 1 8060 0
	movq	-216(%rbp), %rax	# operands, tmp282
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rax	# *_66, D.30350
	movzwl	(%rax), %eax	# _67->code, D.30351
	cmpw	$54, %ax	#, D.30351
	jne	.L2021	#,
.LBB79:
	.loc 1 8062 0
	movq	-216(%rbp), %rax	# operands, tmp283
	movq	(%rax), %rax	# *operands_24(D), tmp284
	movq	%rax, -88(%rbp)	# tmp284, out
	.loc 1 8063 0
	movq	-216(%rbp), %rax	# operands, tmp285
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rax	# *_70, D.30350
	movq	8(%rax), %rax	# _71->fld[0].rtwint, tmp286
	movq	%rax, -160(%rbp)	# tmp286, ct
	.loc 1 8064 0
	movq	-216(%rbp), %rax	# operands, tmp287
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rax	# *_73, D.30350
	movq	8(%rax), %rax	# _74->fld[0].rtwint, tmp288
	movq	%rax, -152(%rbp)	# tmp288, cf
	.loc 1 8067 0
	cmpl	$111, -192(%rbp)	#, compare_code
	je	.L2023	#,
	.loc 1 8067 0 is_stmt 0 discriminator 1
	cmpl	$108, -192(%rbp)	#, compare_code
	jne	.L2024	#,
.L2023:
	.loc 1 8068 0 is_stmt 1
	movq	-176(%rbp), %rax	# second_test, second_test.980
	testq	%rax, %rax	# second_test.980
	jne	.L2024	#,
	.loc 1 8068 0 is_stmt 0 discriminator 1
	movq	-168(%rbp), %rax	# bypass_test, bypass_test.981
	testq	%rax, %rax	# bypass_test.981
	jne	.L2024	#,
.LBB80:
	.loc 1 8072 0 is_stmt 1
	movq	-88(%rbp), %rax	# out, tmp289
	movq	%rax, -136(%rbp)	# tmp289, tmp
	.loc 1 8075 0
	cmpl	$111, -192(%rbp)	#, compare_code
	jne	.L2025	#,
.LBB81:
	.loc 1 8077 0
	movq	-160(%rbp), %rax	# ct, tmp290
	movl	%eax, -180(%rbp)	# tmp290, tmp
	.loc 1 8078 0
	movq	-152(%rbp), %rax	# cf, tmp291
	movq	%rax, -160(%rbp)	# tmp291, ct
	.loc 1 8079 0
	movl	-180(%rbp), %eax	# tmp, tmp293
	cltq
	movq	%rax, -152(%rbp)	# tmp292, cf
	.loc 1 8080 0
	movl	-192(%rbp), %eax	# compare_code, tmp294
	movl	%eax, %edi	# tmp294,
	call	reverse_condition	#
	movl	%eax, -192(%rbp)	# tmp295, compare_code
	.loc 1 8081 0
	movl	-196(%rbp), %eax	# code, tmp296
	movl	%eax, %edi	# tmp296,
	call	reverse_condition	#
	movl	%eax, -196(%rbp)	# tmp297, code
.L2025:
.LBE81:
	.loc 1 8083 0
	movq	-152(%rbp), %rax	# cf, tmp302
	movq	-160(%rbp), %rdx	# ct, tmp303
	subq	%rax, %rdx	# tmp302, tmp301
	movq	%rdx, %rax	# tmp301, tmp301
	movq	%rax, -144(%rbp)	# tmp301, diff
	.loc 1 8085 0
	movq	ix86_compare_op0(%rip), %rdx	# ix86_compare_op0, ix86_compare_op0.982
	movq	-88(%rbp), %rax	# out, tmp304
	movq	%rdx, %rsi	# ix86_compare_op0.982,
	movq	%rax, %rdi	# tmp304,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30348
	jne	.L2026	#,
	.loc 1 8086 0
	movq	ix86_compare_op1(%rip), %rdx	# ix86_compare_op1, ix86_compare_op1.983
	movq	-88(%rbp), %rax	# out, tmp305
	movq	%rdx, %rsi	# ix86_compare_op1.983,
	movq	%rax, %rdi	# tmp305,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30348
	je	.L2027	#,
.L2026:
	.loc 1 8087 0
	movl	-184(%rbp), %eax	# mode, tmp306
	movl	%eax, %edi	# tmp306,
	call	gen_reg_rtx	#
	movq	%rax, -136(%rbp)	# tmp307, tmp
.L2027:
	.loc 1 8089 0
	movq	-96(%rbp), %rax	# compare_seq, tmp308
	movq	%rax, %rdi	# tmp308,
	call	emit_insn	#
	.loc 1 8090 0
	cmpl	$5, -184(%rbp)	#, mode
	jne	.L2028	#,
	.loc 1 8091 0
	movq	-136(%rbp), %rax	# tmp, tmp309
	movq	%rax, %rdi	# tmp309,
	call	gen_x86_movdicc_0_m1_rex64	#
	movq	%rax, %rdi	# D.30350,
	call	emit_insn	#
	jmp	.L2029	#
.L2028:
	.loc 1 8093 0
	movq	-136(%rbp), %rax	# tmp, tmp310
	movq	%rax, %rdi	# tmp310,
	call	gen_x86_movsicc_0_m1	#
	movq	%rax, %rdi	# D.30350,
	call	emit_insn	#
.L2029:
	.loc 1 8095 0
	cmpq	$1, -144(%rbp)	#, diff
	jne	.L2030	#,
	.loc 1 8104 0
	cmpq	$0, -160(%rbp)	#, ct
	je	.L2032	#,
	.loc 1 8105 0
	movq	-160(%rbp), %rax	# ct, tmp311
	movq	%rax, %rsi	# tmp311,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30350
	movq	-136(%rbp), %rsi	# tmp, tmp312
	movq	-136(%rbp), %rdx	# tmp, tmp313
	movl	-184(%rbp), %eax	# mode, tmp314
	movl	$0, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rsi, %r8	# tmp312,
	movl	$75, %esi	#,
	movl	%eax, %edi	# tmp314,
	call	expand_simple_binop	#
	movq	%rax, -136(%rbp)	# tmp315, tmp
	jmp	.L2032	#
.L2030:
	.loc 1 8109 0
	cmpq	$-1, -152(%rbp)	#, cf
	jne	.L2033	#,
	.loc 1 8118 0
	movq	-160(%rbp), %rax	# ct, tmp316
	movq	%rax, %rsi	# tmp316,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30350
	movq	-136(%rbp), %rsi	# tmp, tmp317
	movq	-136(%rbp), %rdx	# tmp, tmp318
	movl	-184(%rbp), %eax	# mode, tmp319
	movl	$0, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rsi, %r8	# tmp317,
	movl	$84, %esi	#,
	movl	%eax, %edi	# tmp319,
	call	expand_simple_binop	#
	movq	%rax, -136(%rbp)	# tmp320, tmp
	jmp	.L2032	#
.L2033:
	.loc 1 8122 0
	cmpq	$-1, -144(%rbp)	#, diff
	jne	.L2034	#,
	.loc 1 8122 0 is_stmt 0 discriminator 1
	cmpq	$0, -160(%rbp)	#, ct
	je	.L2034	#,
	.loc 1 8132 0 is_stmt 1
	movq	-136(%rbp), %rcx	# tmp, tmp321
	movq	-136(%rbp), %rdx	# tmp, tmp322
	movl	-184(%rbp), %eax	# mode, tmp323
	movl	$1, %r8d	#,
	movl	$86, %esi	#,
	movl	%eax, %edi	# tmp323,
	call	expand_simple_unop	#
	movq	%rax, -136(%rbp)	# tmp324, tmp
	.loc 1 8133 0
	cmpq	$0, -152(%rbp)	#, cf
	je	.L2035	#,
	.loc 1 8134 0
	movq	-152(%rbp), %rax	# cf, tmp325
	movq	%rax, %rsi	# tmp325,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30350
	movq	-136(%rbp), %rsi	# tmp, tmp326
	movq	-136(%rbp), %rdx	# tmp, tmp327
	movl	-184(%rbp), %eax	# mode, tmp328
	movl	$0, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rsi, %r8	# tmp326,
	movl	$75, %esi	#,
	movl	%eax, %edi	# tmp328,
	call	expand_simple_binop	#
	movq	%rax, -136(%rbp)	# tmp329, tmp
	.loc 1 8133 0
	jmp	.L2032	#
.L2035:
	.loc 1 8133 0 is_stmt 0 discriminator 1
	jmp	.L2032	#
.L2034:
	.loc 1 8148 0 is_stmt 1
	movq	-160(%rbp), %rax	# ct, tmp330
	movq	-152(%rbp), %rdx	# cf, tmp331
	subq	%rax, %rdx	# tmp330, D.30353
	movl	-184(%rbp), %eax	# mode, tmp332
	movl	%eax, %esi	# tmp332,
	movq	%rdx, %rdi	# D.30353,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30353,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30350
	movq	-136(%rbp), %rsi	# tmp, tmp333
	movq	-136(%rbp), %rdx	# tmp, tmp334
	movl	-184(%rbp), %eax	# mode, tmp335
	movl	$0, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rsi, %r8	# tmp333,
	movl	$83, %esi	#,
	movl	%eax, %edi	# tmp335,
	call	expand_simple_binop	#
	movq	%rax, -136(%rbp)	# tmp336, tmp
	.loc 1 8153 0
	cmpq	$0, -160(%rbp)	#, ct
	je	.L2032	#,
	.loc 1 8154 0
	movq	-160(%rbp), %rax	# ct, tmp337
	movq	%rax, %rsi	# tmp337,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30350
	movq	-136(%rbp), %rsi	# tmp, tmp338
	movq	-136(%rbp), %rdx	# tmp, tmp339
	movl	-184(%rbp), %eax	# mode, tmp340
	movl	$0, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rsi, %r8	# tmp338,
	movl	$75, %esi	#,
	movl	%eax, %edi	# tmp340,
	call	expand_simple_binop	#
	movq	%rax, -136(%rbp)	# tmp341, tmp
.L2032:
	.loc 1 8159 0
	movq	-136(%rbp), %rax	# tmp, tmp342
	cmpq	-88(%rbp), %rax	# out, tmp342
	je	.L2036	#,
	.loc 1 8160 0
	movq	-136(%rbp), %rdx	# tmp, tmp343
	movq	-88(%rbp), %rax	# out, tmp344
	movq	%rdx, %rsi	# tmp343,
	movq	%rax, %rdi	# tmp344,
	call	emit_move_insn	#
.L2036:
	.loc 1 8162 0
	movl	$1, %eax	#, D.30348
	jmp	.L2073	#
.L2024:
.LBE80:
	.loc 1 8165 0
	movq	-152(%rbp), %rax	# cf, tmp349
	movq	-160(%rbp), %rdx	# ct, tmp350
	subq	%rax, %rdx	# tmp349, tmp348
	movq	%rdx, %rax	# tmp348, tmp348
	movq	%rax, -144(%rbp)	# tmp348, diff
	.loc 1 8166 0
	cmpq	$0, -144(%rbp)	#, diff
	jns	.L2038	#,
.LBB82:
	.loc 1 8169 0
	movq	-160(%rbp), %rax	# ct, tmp351
	movq	%rax, -80(%rbp)	# tmp351, tmp
	movq	-152(%rbp), %rax	# cf, tmp352
	movq	%rax, -160(%rbp)	# tmp352, ct
	movq	-80(%rbp), %rax	# tmp, tmp353
	movq	%rax, -152(%rbp)	# tmp353, cf
	.loc 1 8170 0
	negq	-144(%rbp)	# diff
	.loc 1 8171 0
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.984
	movzbl	2(%rax), %eax	# ix86_compare_op0.984_111->mode, D.30352
	movzbl	%al, %eax	# D.30352, D.30348
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30355
	cmpl	$2, %eax	#, D.30355
	je	.L2039	#,
	.loc 1 8171 0 is_stmt 0 discriminator 1
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.985
	movzbl	2(%rax), %eax	# ix86_compare_op0.985_115->mode, D.30352
	movzbl	%al, %eax	# D.30352, D.30348
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30355
	cmpl	$6, %eax	#, D.30355
	je	.L2039	#,
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.986
	movzbl	2(%rax), %eax	# ix86_compare_op0.986_119->mode, D.30352
	movzbl	%al, %eax	# D.30352, D.30348
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30355
	cmpl	$8, %eax	#, D.30355
	jne	.L2040	#,
.L2039:
	.loc 1 8177 0 is_stmt 1
	movl	-192(%rbp), %eax	# compare_code, tmp357
	movl	%eax, %edi	# tmp357,
	call	reverse_condition_maybe_unordered	#
	movl	%eax, -192(%rbp)	# tmp358, compare_code
	.loc 1 8178 0
	movl	-196(%rbp), %eax	# code, tmp359
	movl	%eax, %edi	# tmp359,
	call	reverse_condition_maybe_unordered	#
	movl	%eax, -196(%rbp)	# tmp360, code
	jmp	.L2038	#
.L2040:
	.loc 1 8182 0
	movl	-192(%rbp), %eax	# compare_code, tmp361
	movl	%eax, %edi	# tmp361,
	call	reverse_condition	#
	movl	%eax, -192(%rbp)	# tmp362, compare_code
	.loc 1 8183 0
	movl	-196(%rbp), %eax	# code, tmp363
	movl	%eax, %edi	# tmp363,
	call	reverse_condition	#
	movl	%eax, -196(%rbp)	# tmp364, code
.L2038:
.LBE82:
	.loc 1 8186 0
	cmpq	$1, -144(%rbp)	#, diff
	je	.L2041	#,
	.loc 1 8186 0 is_stmt 0 discriminator 1
	cmpq	$2, -144(%rbp)	#, diff
	je	.L2041	#,
	cmpq	$4, -144(%rbp)	#, diff
	je	.L2041	#,
	cmpq	$8, -144(%rbp)	#, diff
	je	.L2041	#,
	.loc 1 8187 0 is_stmt 1
	cmpq	$3, -144(%rbp)	#, diff
	je	.L2041	#,
	.loc 1 8187 0 is_stmt 0 discriminator 1
	cmpq	$5, -144(%rbp)	#, diff
	je	.L2041	#,
	cmpq	$9, -144(%rbp)	#, diff
	jne	.L2042	#,
.L2041:
	.loc 1 8188 0 is_stmt 1
	cmpl	$5, -184(%rbp)	#, mode
	jne	.L2043	#,
	.loc 1 8188 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# cf, tmp365
	movq	%rax, %rsi	# tmp365,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdi	# D.30350,
	call	x86_64_sign_extended_value	#
	testl	%eax, %eax	# D.30348
	je	.L2042	#,
.L2043:
.LBB83:
	.loc 1 8204 0 is_stmt 1
	movq	ix86_compare_op1(%rip), %rcx	# ix86_compare_op1, ix86_compare_op1.987
	movq	ix86_compare_op0(%rip), %rdx	# ix86_compare_op0, ix86_compare_op0.988
	movl	-196(%rbp), %esi	# code, tmp366
	movq	-88(%rbp), %rax	# out, tmp367
	movl	$1, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movq	%rax, %rdi	# tmp367,
	call	emit_store_flag	#
	movq	%rax, -88(%rbp)	# tmp368, out
	.loc 1 8207 0
	movl	$0, -188(%rbp)	#, nops
	.loc 1 8210 0
	cmpq	$1, -144(%rbp)	#, diff
	jne	.L2044	#,
	.loc 1 8211 0
	movq	-88(%rbp), %rax	# out, tmp369
	movq	%rax, -128(%rbp)	# tmp369, tmp
	jmp	.L2045	#
.L2044:
.LBB84:
	.loc 1 8215 0
	movq	-88(%rbp), %rax	# out, tmp370
	movq	%rax, -72(%rbp)	# tmp370, out1
	.loc 1 8216 0
	movq	-144(%rbp), %rax	# diff, tmp371
	andq	$-2, %rax	#, D.30353
	movq	%rax, %rsi	# D.30353,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30350
	movq	-72(%rbp), %rdx	# out1, tmp372
	movl	-184(%rbp), %eax	# mode, tmp373
	movl	%eax, %esi	# tmp373,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -128(%rbp)	# tmp374, tmp
	.loc 1 8217 0
	addl	$1, -188(%rbp)	#, nops
	.loc 1 8218 0
	movq	-144(%rbp), %rax	# diff, tmp375
	andl	$1, %eax	#, D.30353
	testq	%rax, %rax	# D.30353
	je	.L2045	#,
	.loc 1 8220 0
	movq	-72(%rbp), %rcx	# out1, tmp376
	movq	-128(%rbp), %rdx	# tmp, tmp377
	movl	-184(%rbp), %eax	# mode, tmp378
	movl	%eax, %esi	# tmp378,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -128(%rbp)	# tmp379, tmp
	.loc 1 8221 0
	addl	$1, -188(%rbp)	#, nops
.L2045:
.LBE84:
	.loc 1 8224 0
	cmpq	$0, -152(%rbp)	#, cf
	je	.L2046	#,
	.loc 1 8226 0
	movq	-152(%rbp), %rax	# cf, tmp380
	movq	%rax, %rsi	# tmp380,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30350
	movq	-128(%rbp), %rdx	# tmp, tmp381
	movl	-184(%rbp), %eax	# mode, tmp382
	movl	%eax, %esi	# tmp382,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -128(%rbp)	# tmp383, tmp
	.loc 1 8227 0
	addl	$1, -188(%rbp)	#, nops
.L2046:
	.loc 1 8229 0
	movq	-128(%rbp), %rax	# tmp, tmp384
	cmpq	-88(%rbp), %rax	# out, tmp384
	je	.L2047	#,
	.loc 1 8230 0
	movq	-128(%rbp), %rax	# tmp, tmp385
	movzwl	(%rax), %eax	# tmp_18->code, D.30351
	cmpw	$63, %ax	#, D.30351
	jne	.L2048	#,
	.loc 1 8230 0 is_stmt 0 discriminator 1
	movq	-128(%rbp), %rax	# tmp, tmp386
	movq	8(%rax), %rax	# tmp_18->fld[0].rtx, D.30350
	cmpq	-88(%rbp), %rax	# out, D.30350
	je	.L2047	#,
.L2048:
	.loc 1 8232 0 is_stmt 1
	cmpl	$1, -188(%rbp)	#, nops
	jne	.L2049	#,
.LBB85:
	.loc 1 8236 0
	movl	$17, %esi	#,
	movl	$52, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -64(%rbp)	# tmp387, clob
	.loc 1 8237 0
	movq	-64(%rbp), %rax	# clob, tmp388
	movq	%rax, %rdx	# tmp388,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -64(%rbp)	# tmp389, clob
	.loc 1 8239 0
	movq	-128(%rbp), %rdx	# tmp, tmp390
	movq	-88(%rbp), %rax	# out, tmp391
	movq	%rdx, %rcx	# tmp390,
	movq	%rax, %rdx	# tmp391,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -128(%rbp)	# tmp392, tmp
	.loc 1 8240 0
	movq	-64(%rbp), %rdx	# clob, tmp393
	movq	-128(%rbp), %rax	# tmp, tmp394
	movq	%rax, %rsi	# tmp394,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movq	%rax, %rdx	# D.30356,
	movl	$0, %esi	#,
	movl	$39, %edi	#,
	call	gen_rtx_fmt_E	#
	movq	%rax, -128(%rbp)	# tmp395, tmp
	.loc 1 8241 0
	movq	-128(%rbp), %rax	# tmp, tmp396
	movq	%rax, %rdi	# tmp396,
	call	emit_insn	#
.LBE85:
	jmp	.L2047	#
.L2049:
	.loc 1 8244 0
	movq	-128(%rbp), %rdx	# tmp, tmp397
	movq	-88(%rbp), %rax	# out, tmp398
	movq	%rdx, %rcx	# tmp397,
	movq	%rax, %rdx	# tmp398,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30350,
	call	emit_insn	#
.L2047:
	.loc 1 8246 0
	movq	-216(%rbp), %rax	# operands, tmp399
	movq	(%rax), %rax	# *operands_24(D), D.30350
	cmpq	-88(%rbp), %rax	# out, D.30350
	je	.L2050	#,
	.loc 1 8247 0
	movq	-216(%rbp), %rax	# operands, tmp400
	movq	(%rax), %rax	# *operands_24(D), D.30350
	movq	-88(%rbp), %rdx	# out, tmp401
	movq	%rdx, %rsi	# tmp401,
	movq	%rax, %rdi	# D.30350,
	call	emit_move_insn	#
.L2050:
	.loc 1 8249 0
	movl	$1, %eax	#, D.30348
	jmp	.L2073	#
.L2042:
.LBE83:
	.loc 1 8271 0
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.989
	testl	%eax, %eax	# optimize_size.989
	jne	.L2021	#,
	.loc 1 8271 0 is_stmt 0 discriminator 1
	movl	$104, %edx	#, x86_cmove.990
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.991
	movl	%eax, %ecx	# ix86_arch.991, tmp519
	sarl	%cl, %edx	# tmp519, D.30348
	movl	%edx, %eax	# D.30348, D.30348
	andl	$1, %eax	#, D.30348
	testl	%eax, %eax	# D.30348
	jne	.L2021	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.992
	andl	$327680, %eax	#, D.30348
	testl	%eax, %eax	# D.30348
	jne	.L2021	#,
	.loc 1 8273 0 is_stmt 1
	cmpq	$0, -160(%rbp)	#, ct
	jne	.L2051	#,
	.loc 1 8275 0
	movq	-152(%rbp), %rax	# cf, tmp402
	movq	%rax, -160(%rbp)	# tmp402, ct
	.loc 1 8276 0
	movq	$0, -152(%rbp)	#, cf
	.loc 1 8277 0
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.993
	movzbl	2(%rax), %eax	# ix86_compare_op0.993_165->mode, D.30352
	movzbl	%al, %eax	# D.30352, D.30348
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30355
	cmpl	$2, %eax	#, D.30355
	je	.L2052	#,
	.loc 1 8277 0 is_stmt 0 discriminator 1
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.994
	movzbl	2(%rax), %eax	# ix86_compare_op0.994_169->mode, D.30352
	movzbl	%al, %eax	# D.30352, D.30348
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30355
	cmpl	$6, %eax	#, D.30355
	je	.L2052	#,
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.995
	movzbl	2(%rax), %eax	# ix86_compare_op0.995_173->mode, D.30352
	movzbl	%al, %eax	# D.30352, D.30348
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30355
	cmpl	$8, %eax	#, D.30355
	jne	.L2053	#,
.L2052:
	.loc 1 8283 0 is_stmt 1
	movl	-192(%rbp), %eax	# compare_code, tmp406
	movl	%eax, %edi	# tmp406,
	call	reverse_condition_maybe_unordered	#
	movl	%eax, -192(%rbp)	# tmp407, compare_code
	.loc 1 8284 0
	movl	-196(%rbp), %eax	# code, tmp408
	movl	%eax, %edi	# tmp408,
	call	reverse_condition_maybe_unordered	#
	movl	%eax, -196(%rbp)	# tmp409, code
	jmp	.L2051	#
.L2053:
	.loc 1 8288 0
	movl	-192(%rbp), %eax	# compare_code, tmp410
	movl	%eax, %edi	# tmp410,
	call	reverse_condition	#
	movl	%eax, -192(%rbp)	# tmp411, compare_code
	.loc 1 8289 0
	movl	-196(%rbp), %eax	# code, tmp412
	movl	%eax, %edi	# tmp412,
	call	reverse_condition	#
	movl	%eax, -196(%rbp)	# tmp413, code
.L2051:
	.loc 1 8293 0
	movq	ix86_compare_op1(%rip), %rcx	# ix86_compare_op1, ix86_compare_op1.996
	movq	ix86_compare_op0(%rip), %rdx	# ix86_compare_op0, ix86_compare_op0.997
	movl	-196(%rbp), %esi	# code, tmp414
	movq	-88(%rbp), %rax	# out, tmp415
	movl	$1, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movq	%rax, %rdi	# tmp415,
	call	emit_store_flag	#
	movq	%rax, -88(%rbp)	# tmp416, out
	.loc 1 8296 0
	movq	const_int_rtx+504(%rip), %rcx	# const_int_rtx, D.30350
	movq	-88(%rbp), %rsi	# out, tmp417
	movq	-88(%rbp), %rdx	# out, tmp418
	movl	-184(%rbp), %eax	# mode, tmp419
	movl	$0, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rsi, %r8	# tmp417,
	movl	$75, %esi	#,
	movl	%eax, %edi	# tmp419,
	call	expand_simple_binop	#
	movq	%rax, -88(%rbp)	# tmp420, out
	.loc 1 8299 0
	movq	-160(%rbp), %rax	# ct, tmp421
	movq	-152(%rbp), %rdx	# cf, tmp422
	subq	%rax, %rdx	# tmp421, D.30353
	movl	-184(%rbp), %eax	# mode, tmp423
	movl	%eax, %esi	# tmp423,
	movq	%rdx, %rdi	# D.30353,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30353,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30350
	movq	-88(%rbp), %rsi	# out, tmp424
	movq	-88(%rbp), %rdx	# out, tmp425
	movl	-184(%rbp), %eax	# mode, tmp426
	movl	$0, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rsi, %r8	# tmp424,
	movl	$83, %esi	#,
	movl	%eax, %edi	# tmp426,
	call	expand_simple_binop	#
	movq	%rax, -88(%rbp)	# tmp427, out
	.loc 1 8304 0
	movq	-160(%rbp), %rax	# ct, tmp428
	movq	%rax, %rsi	# tmp428,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30350
	movq	-88(%rbp), %rsi	# out, tmp429
	movq	-88(%rbp), %rdx	# out, tmp430
	movl	-184(%rbp), %eax	# mode, tmp431
	movl	$0, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rsi, %r8	# tmp429,
	movl	$75, %esi	#,
	movl	%eax, %edi	# tmp431,
	call	expand_simple_binop	#
	movq	%rax, -88(%rbp)	# tmp432, out
	.loc 1 8307 0
	movq	-216(%rbp), %rax	# operands, tmp433
	movq	(%rax), %rax	# *operands_24(D), D.30350
	cmpq	-88(%rbp), %rax	# out, D.30350
	je	.L2054	#,
	.loc 1 8308 0
	movq	-216(%rbp), %rax	# operands, tmp434
	movq	(%rax), %rax	# *operands_24(D), D.30350
	movq	-88(%rbp), %rdx	# out, tmp435
	movq	%rdx, %rsi	# tmp435,
	movq	%rax, %rdi	# D.30350,
	call	emit_move_insn	#
.L2054:
	.loc 1 8310 0
	movl	$1, %eax	#, D.30348
	jmp	.L2073	#
.L2021:
.LBE79:
	.loc 1 8314 0
	movl	$104, %edx	#, x86_cmove.998
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.999
	movl	%eax, %ecx	# ix86_arch.999, tmp521
	sarl	%cl, %edx	# tmp521, D.30348
	movl	%edx, %eax	# D.30348, D.30348
	andl	$1, %eax	#, D.30348
	testl	%eax, %eax	# D.30348
	jne	.L2055	#,
	.loc 1 8314 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1000
	andl	$327680, %eax	#, D.30348
	testl	%eax, %eax	# D.30348
	jne	.L2055	#,
.LBB86:
	.loc 1 8321 0 is_stmt 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.1001
	testl	%eax, %eax	# optimize_size.1001
	je	.L2056	#,
	.loc 1 8322 0
	movl	$0, %eax	#, D.30348
	jmp	.L2073	#
.L2056:
	.loc 1 8327 0
	movq	-216(%rbp), %rax	# operands, tmp436
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rax	# *_203, D.30350
	movzwl	(%rax), %eax	# _204->code, D.30351
	cmpw	$54, %ax	#, D.30351
	jne	.L2057	#,
	.loc 1 8329 0
	movq	-216(%rbp), %rax	# operands, tmp437
	movq	24(%rax), %rax	# MEM[(struct rtx_def * *)operands_24(D) + 24B], tmp438
	movq	%rax, -112(%rbp)	# tmp438, var
	.loc 1 8330 0
	movq	-216(%rbp), %rax	# operands, tmp439
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rax	# *_207, D.30350
	movq	8(%rax), %rax	# _208->fld[0].rtwint, D.30353
	testq	%rax, %rax	# D.30353
	jne	.L2058	#,
	.loc 1 8331 0
	movq	-216(%rbp), %rax	# operands, tmp440
	leaq	24(%rax), %rdx	#, D.30349
	movq	const_int_rtx+504(%rip), %rax	# const_int_rtx, D.30350
	movq	%rax, (%rdx)	# D.30350, *_210
	movq	optab_table+144(%rip), %rax	# optab_table, tmp441
	movq	%rax, -120(%rbp)	# tmp441, op
	jmp	.L2059	#
.L2058:
	.loc 1 8332 0
	movq	-216(%rbp), %rax	# operands, tmp442
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rax	# *_213, D.30350
	movq	8(%rax), %rax	# _214->fld[0].rtwint, D.30353
	cmpq	$-1, %rax	#, D.30353
	jne	.L2060	#,
	.loc 1 8333 0
	movq	-216(%rbp), %rax	# operands, tmp443
	leaq	24(%rax), %rdx	#, D.30349
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30350
	movq	%rax, (%rdx)	# D.30350, *_216
	movq	optab_table+152(%rip), %rax	# optab_table, tmp444
	movq	%rax, -120(%rbp)	# tmp444, op
	jmp	.L2059	#
.L2060:
	.loc 1 8335 0
	movl	$0, %eax	#, D.30348
	jmp	.L2073	#
.L2057:
	.loc 1 8337 0
	movq	-216(%rbp), %rax	# operands, tmp445
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rax	# *_220, D.30350
	movzwl	(%rax), %eax	# _221->code, D.30351
	cmpw	$54, %ax	#, D.30351
	jne	.L2061	#,
	.loc 1 8339 0
	movq	-216(%rbp), %rax	# operands, tmp446
	movq	16(%rax), %rax	# MEM[(struct rtx_def * *)operands_24(D) + 16B], tmp447
	movq	%rax, -112(%rbp)	# tmp447, var
	.loc 1 8340 0
	movq	-216(%rbp), %rax	# operands, tmp448
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rax	# *_224, D.30350
	movq	8(%rax), %rax	# _225->fld[0].rtwint, D.30353
	testq	%rax, %rax	# D.30353
	jne	.L2062	#,
	.loc 1 8341 0
	movq	-216(%rbp), %rax	# operands, tmp449
	leaq	16(%rax), %rdx	#, D.30349
	movq	const_int_rtx+504(%rip), %rax	# const_int_rtx, D.30350
	movq	%rax, (%rdx)	# D.30350, *_227
	movq	optab_table+144(%rip), %rax	# optab_table, tmp450
	movq	%rax, -120(%rbp)	# tmp450, op
	jmp	.L2059	#
.L2062:
	.loc 1 8342 0
	movq	-216(%rbp), %rax	# operands, tmp451
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rax	# *_230, D.30350
	movq	8(%rax), %rax	# _231->fld[0].rtwint, D.30353
	cmpq	$-1, %rax	#, D.30353
	jne	.L2063	#,
	.loc 1 8343 0
	movq	-216(%rbp), %rax	# operands, tmp452
	leaq	16(%rax), %rdx	#, D.30349
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30350
	movq	%rax, (%rdx)	# D.30350, *_233
	movq	optab_table+152(%rip), %rax	# optab_table, tmp453
	movq	%rax, -120(%rbp)	# tmp453, op
	jmp	.L2059	#
.L2063:
	.loc 1 8345 0
	movl	$0, %eax	#, D.30348
	jmp	.L2073	#
.L2061:
	.loc 1 8348 0
	movl	$0, %eax	#, D.30348
	jmp	.L2073	#
.L2059:
	.loc 1 8350 0
	movq	-216(%rbp), %rax	# operands, tmp454
	movq	(%rax), %rax	# *operands_24(D), tmp455
	movq	%rax, -56(%rbp)	# tmp455, orig_out
	.loc 1 8351 0
	movl	-184(%rbp), %eax	# mode, tmp456
	movl	%eax, %edi	# tmp456,
	call	gen_reg_rtx	#
	movq	%rax, -48(%rbp)	# tmp457, tmp
	.loc 1 8352 0
	movq	-216(%rbp), %rax	# operands, tmp458
	movq	-48(%rbp), %rdx	# tmp, tmp459
	movq	%rdx, (%rax)	# tmp459, *operands_24(D)
	.loc 1 8355 0
	movq	-216(%rbp), %rax	# operands, tmp460
	movq	%rax, %rdi	# tmp460,
	call	ix86_expand_int_movcc	#
	testl	%eax, %eax	# D.30348
	jne	.L2064	#,
	.loc 1 8356 0
	movl	$0, %eax	#, D.30348
	jmp	.L2073	#
.L2064:
	.loc 1 8359 0
	movq	-56(%rbp), %rdi	# orig_out, tmp461
	movq	-48(%rbp), %rcx	# tmp, tmp462
	movq	-112(%rbp), %rdx	# var, tmp463
	movq	-120(%rbp), %rsi	# op, tmp464
	movl	-184(%rbp), %eax	# mode, tmp465
	movl	$2, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%rdi, %r8	# tmp461,
	movl	%eax, %edi	# tmp465,
	call	expand_binop	#
	movq	%rax, -40(%rbp)	# tmp466, out
	.loc 1 8361 0
	movq	-40(%rbp), %rax	# out, tmp467
	cmpq	-56(%rbp), %rax	# orig_out, tmp467
	je	.L2065	#,
	.loc 1 8362 0
	movq	-40(%rbp), %rdx	# out, tmp468
	movq	-56(%rbp), %rax	# orig_out, tmp469
	movq	%rdx, %rsi	# tmp468,
	movq	%rax, %rdi	# tmp469,
	call	emit_move_insn	#
.L2065:
	.loc 1 8364 0
	movl	$1, %eax	#, D.30348
	jmp	.L2073	#
.L2055:
.LBE86:
	.loc 1 8378 0
	movq	-216(%rbp), %rax	# operands, tmp470
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rax	# *_244, D.30350
	movl	-184(%rbp), %edx	# mode, tmp471
	movl	%edx, %esi	# tmp471,
	movq	%rax, %rdi	# D.30350,
	call	nonimmediate_operand	#
	testl	%eax, %eax	# D.30348
	jne	.L2066	#,
	.loc 1 8379 0
	movq	-216(%rbp), %rax	# operands, tmp472
	leaq	16(%rax), %rbx	#, D.30349
	movq	-216(%rbp), %rax	# operands, tmp473
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rdx	# *_248, D.30350
	movl	-184(%rbp), %eax	# mode, tmp474
	movq	%rdx, %rsi	# D.30350,
	movl	%eax, %edi	# tmp474,
	call	force_reg	#
	movq	%rax, (%rbx)	# D.30350, *_247
.L2066:
	.loc 1 8380 0
	movq	-216(%rbp), %rax	# operands, tmp475
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rax	# *_251, D.30350
	movl	-184(%rbp), %edx	# mode, tmp476
	movl	%edx, %esi	# tmp476,
	movq	%rax, %rdi	# D.30350,
	call	nonimmediate_operand	#
	testl	%eax, %eax	# D.30348
	jne	.L2067	#,
	.loc 1 8381 0
	movq	-216(%rbp), %rax	# operands, tmp477
	leaq	24(%rax), %rbx	#, D.30349
	movq	-216(%rbp), %rax	# operands, tmp478
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rdx	# *_255, D.30350
	movl	-184(%rbp), %eax	# mode, tmp479
	movq	%rdx, %rsi	# D.30350,
	movl	%eax, %edi	# tmp479,
	call	force_reg	#
	movq	%rax, (%rbx)	# D.30350, *_254
.L2067:
	.loc 1 8383 0
	movq	-168(%rbp), %rax	# bypass_test, bypass_test.1002
	testq	%rax, %rax	# bypass_test.1002
	je	.L2068	#,
	.loc 1 8383 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# operands, tmp480
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rdx	# *_259, D.30350
	movq	-216(%rbp), %rax	# operands, tmp481
	movq	(%rax), %rax	# *operands_24(D), D.30350
	movq	%rdx, %rsi	# D.30350,
	movq	%rax, %rdi	# D.30350,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30348
	je	.L2068	#,
.LBB87:
	.loc 1 8385 0 is_stmt 1
	movl	-184(%rbp), %eax	# mode, tmp482
	movl	%eax, %edi	# tmp482,
	call	gen_reg_rtx	#
	movq	%rax, -32(%rbp)	# tmp483, tmp
	.loc 1 8386 0
	movq	-216(%rbp), %rax	# operands, tmp484
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rdx	# *_264, D.30350
	movq	-32(%rbp), %rax	# tmp, tmp485
	movq	%rdx, %rsi	# D.30350,
	movq	%rax, %rdi	# tmp485,
	call	emit_move_insn	#
	.loc 1 8387 0
	movq	-216(%rbp), %rax	# operands, tmp486
	leaq	24(%rax), %rdx	#, D.30349
	movq	-32(%rbp), %rax	# tmp, tmp487
	movq	%rax, (%rdx)	# tmp487, *_266
.L2068:
.LBE87:
	.loc 1 8389 0
	movq	-176(%rbp), %rax	# second_test, second_test.1003
	testq	%rax, %rax	# second_test.1003
	je	.L2069	#,
	.loc 1 8389 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# operands, tmp488
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rdx	# *_268, D.30350
	movq	-216(%rbp), %rax	# operands, tmp489
	movq	(%rax), %rax	# *operands_24(D), D.30350
	movq	%rdx, %rsi	# D.30350,
	movq	%rax, %rdi	# D.30350,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30348
	je	.L2069	#,
.LBB88:
	.loc 1 8391 0 is_stmt 1
	movl	-184(%rbp), %eax	# mode, tmp490
	movl	%eax, %edi	# tmp490,
	call	gen_reg_rtx	#
	movq	%rax, -24(%rbp)	# tmp491, tmp
	.loc 1 8392 0
	movq	-216(%rbp), %rax	# operands, tmp492
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rdx	# *_273, D.30350
	movq	-24(%rbp), %rax	# tmp, tmp493
	movq	%rdx, %rsi	# D.30350,
	movq	%rax, %rdi	# tmp493,
	call	emit_move_insn	#
	.loc 1 8393 0
	movq	-216(%rbp), %rax	# operands, tmp494
	leaq	16(%rax), %rdx	#, D.30349
	movq	-24(%rbp), %rax	# tmp, tmp495
	movq	%rax, (%rdx)	# tmp495, *_275
.L2069:
.LBE88:
	.loc 1 8395 0
	movq	-216(%rbp), %rax	# operands, tmp496
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rax	# *_276, D.30350
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.30350,
	call	register_operand	#
	testl	%eax, %eax	# D.30348
	jne	.L2070	#,
	.loc 1 8396 0
	movq	-216(%rbp), %rax	# operands, tmp497
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rax	# *_279, D.30350
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.30350,
	call	register_operand	#
	testl	%eax, %eax	# D.30348
	jne	.L2070	#,
	.loc 1 8397 0
	movq	-216(%rbp), %rax	# operands, tmp498
	leaq	16(%rax), %rbx	#, D.30349
	movq	-216(%rbp), %rax	# operands, tmp499
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rdx	# *_283, D.30350
	movl	-184(%rbp), %eax	# mode, tmp500
	movq	%rdx, %rsi	# D.30350,
	movl	%eax, %edi	# tmp500,
	call	force_reg	#
	movq	%rax, (%rbx)	# D.30350, *_282
.L2070:
	.loc 1 8399 0
	movq	-96(%rbp), %rax	# compare_seq, tmp501
	movq	%rax, %rdi	# tmp501,
	call	emit_insn	#
	.loc 1 8400 0
	movq	-216(%rbp), %rax	# operands, tmp502
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rsi	# *_286, D.30350
	movq	-216(%rbp), %rax	# operands, tmp503
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rcx	# *_288, D.30350
	movq	-104(%rbp), %rdx	# compare_op, tmp504
	movl	-184(%rbp), %eax	# mode, tmp505
	movq	%rsi, %r8	# D.30350,
	movl	%eax, %esi	# tmp505,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30350
	movq	-216(%rbp), %rax	# operands, tmp506
	movq	(%rax), %rax	# *operands_24(D), D.30350
	movq	%rdx, %rcx	# D.30350,
	movq	%rax, %rdx	# D.30350,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30350,
	call	emit_insn	#
	.loc 1 8404 0
	movq	-168(%rbp), %rax	# bypass_test, bypass_test.1004
	testq	%rax, %rax	# bypass_test.1004
	je	.L2071	#,
	.loc 1 8405 0
	movq	-216(%rbp), %rax	# operands, tmp507
	movq	(%rax), %rsi	# *operands_24(D), D.30350
	movq	-216(%rbp), %rax	# operands, tmp508
	addq	$24, %rax	#, D.30349
	movq	(%rax), %rcx	# *_295, D.30350
	movq	-168(%rbp), %rdx	# bypass_test, bypass_test.1005
	movl	-184(%rbp), %eax	# mode, tmp509
	movq	%rsi, %r8	# D.30350,
	movl	%eax, %esi	# tmp509,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30350
	movq	-216(%rbp), %rax	# operands, tmp510
	movq	(%rax), %rax	# *operands_24(D), D.30350
	movq	%rdx, %rcx	# D.30350,
	movq	%rax, %rdx	# D.30350,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30350,
	call	emit_insn	#
.L2071:
	.loc 1 8410 0
	movq	-176(%rbp), %rax	# second_test, second_test.1006
	testq	%rax, %rax	# second_test.1006
	je	.L2072	#,
	.loc 1 8411 0
	movq	-216(%rbp), %rax	# operands, tmp511
	movq	(%rax), %rsi	# *operands_24(D), D.30350
	movq	-216(%rbp), %rax	# operands, tmp512
	addq	$16, %rax	#, D.30349
	movq	(%rax), %rcx	# *_303, D.30350
	movq	-176(%rbp), %rdx	# second_test, second_test.1007
	movl	-184(%rbp), %eax	# mode, tmp513
	movq	%rsi, %r8	# D.30350,
	movl	%eax, %esi	# tmp513,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30350
	movq	-216(%rbp), %rax	# operands, tmp514
	movq	(%rax), %rax	# *operands_24(D), D.30350
	movq	%rdx, %rcx	# D.30350,
	movq	%rax, %rdx	# D.30350,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30350,
	call	emit_insn	#
.L2072:
	.loc 1 8417 0
	movl	$1, %eax	#, D.30348
.L2073:
	.loc 1 8418 0
	addq	$216, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE132:
	.size	ix86_expand_int_movcc, .-ix86_expand_int_movcc
	.globl	ix86_expand_fp_movcc
	.type	ix86_expand_fp_movcc, @function
ix86_expand_fp_movcc:
.LFB133:
	.loc 1 8423 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -120(%rbp)	# operands, operands
	.loc 1 8430 0
	movl	ix86_fpmath(%rip), %eax	# ix86_fpmath, ix86_fpmath.1008
	andl	$2, %eax	#, D.30358
	testl	%eax, %eax	# D.30358
	je	.L2075	#,
	.loc 1 8430 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# operands, tmp266
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _11->mode, D.30360
	cmpb	$15, %al	#, D.30360
	je	.L2076	#,
.L2075:
	.loc 1 8431 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1009
	andl	$262144, %eax	#, D.30357
	testl	%eax, %eax	# D.30357
	je	.L2077	#,
	.loc 1 8431 0 is_stmt 0 discriminator 1
	movl	ix86_fpmath(%rip), %eax	# ix86_fpmath, ix86_fpmath.1010
	andl	$2, %eax	#, D.30358
	testl	%eax, %eax	# D.30358
	je	.L2077	#,
	movq	-120(%rbp), %rax	# operands, tmp267
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _17->mode, D.30360
	cmpb	$16, %al	#, D.30360
	jne	.L2077	#,
.L2076:
	.loc 1 8432 0 is_stmt 1
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, ix86_compare_op0.1011
	movzbl	2(%rax), %edx	# ix86_compare_op0.1011_19->mode, D.30360
	movq	-120(%rbp), %rax	# operands, tmp268
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _21->mode, D.30360
	cmpb	%al, %dl	# D.30360, D.30360
	jne	.L2077	#,
	.loc 1 8434 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1012
	andl	$16, %eax	#, D.30357
	testl	%eax, %eax	# D.30357
	je	.L2078	#,
	.loc 1 8435 0
	movq	-120(%rbp), %rax	# operands, tmp269
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rax	# *_25, D.30359
	movzwl	(%rax), %eax	# _26->code, D.30362
	cmpw	$119, %ax	#, D.30362
	je	.L2077	#,
	.loc 1 8435 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# operands, tmp270
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rax	# *_28, D.30359
	movzwl	(%rax), %eax	# _29->code, D.30362
	cmpw	$114, %ax	#, D.30362
	je	.L2077	#,
.L2078:
	.loc 1 8437 0 is_stmt 1
	movq	-120(%rbp), %rax	# operands, tmp271
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzwl	(%rax), %eax	# _31->code, D.30362
	cmpw	$61, %ax	#, D.30362
	jne	.L2079	#,
	.loc 1 8438 0
	movq	-120(%rbp), %rax	# operands, tmp272
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzwl	(%rax), %eax	# _33->code, D.30362
	cmpw	$61, %ax	#, D.30362
	jne	.L2080	#,
	.loc 1 8438 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# operands, tmp273
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movl	8(%rax), %eax	# _35->fld[0].rtuint, D.30358
	cmpl	$20, %eax	#, D.30358
	jbe	.L2081	#,
	movq	-120(%rbp), %rax	# operands, tmp274
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movl	8(%rax), %eax	# _37->fld[0].rtuint, D.30358
	cmpl	$28, %eax	#, D.30358
	jbe	.L2079	#,
.L2081:
	.loc 1 8438 0 discriminator 2
	movq	-120(%rbp), %rax	# operands, tmp275
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movl	8(%rax), %eax	# _39->fld[0].rtuint, D.30358
	cmpl	$44, %eax	#, D.30358
	jbe	.L2080	#,
	.loc 1 8438 0 discriminator 1
	movq	-120(%rbp), %rax	# operands, tmp276
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movl	8(%rax), %eax	# _41->fld[0].rtuint, D.30358
	cmpl	$52, %eax	#, D.30358
	jbe	.L2079	#,
.L2080:
	.loc 1 8439 0 is_stmt 1
	movq	-120(%rbp), %rax	# operands, tmp277
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movl	8(%rax), %eax	# _43->fld[0].rtuint, D.30358
	cmpl	$52, %eax	#, D.30358
	jbe	.L2077	#,
.L2079:
.LBB89:
	.loc 1 8441 0
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, tmp278
	movq	%rax, -80(%rbp)	# tmp278, op0
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, tmp279
	movq	%rax, -72(%rbp)	# tmp279, op1
	.loc 1 8442 0
	movq	-120(%rbp), %rax	# operands, tmp280
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rax	# *_47, D.30359
	movzwl	(%rax), %eax	# _48->code, D.30362
	movzwl	%ax, %eax	# D.30362, tmp281
	movl	%eax, -108(%rbp)	# tmp281, code
	.loc 1 8446 0
	movq	-120(%rbp), %rax	# operands, tmp282
	addq	$16, %rax	#, D.30361
	movq	(%rax), %rax	# *_51, D.30359
	movq	-72(%rbp), %rdx	# op1, tmp283
	movq	%rdx, %rsi	# tmp283,
	movq	%rax, %rdi	# D.30359,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30357
	je	.L2082	#,
.LBB90:
	.loc 1 8448 0
	movq	-80(%rbp), %rax	# op0, tmp284
	movq	%rax, -64(%rbp)	# tmp284, tmp
	.loc 1 8449 0
	movq	-72(%rbp), %rax	# op1, tmp285
	movq	%rax, -80(%rbp)	# tmp285, op0
	.loc 1 8450 0
	movq	-64(%rbp), %rax	# tmp, tmp286
	movq	%rax, -72(%rbp)	# tmp286, op1
	.loc 1 8451 0
	movl	-108(%rbp), %eax	# code, tmp287
	movl	%eax, %edi	# tmp287,
	call	reverse_condition_maybe_unordered	#
	movl	%eax, -108(%rbp)	# tmp288, code
.L2082:
.LBE90:
	.loc 1 8453 0
	movq	-120(%rbp), %rax	# operands, tmp289
	addq	$16, %rax	#, D.30361
	movq	(%rax), %rax	# *_58, D.30359
	movq	-80(%rbp), %rdx	# op0, tmp290
	movq	%rdx, %rsi	# tmp290,
	movq	%rax, %rdi	# D.30359,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30357
	je	.L2083	#,
	.loc 1 8453 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# operands, tmp291
	addq	$24, %rax	#, D.30361
	movq	(%rax), %rax	# *_61, D.30359
	movq	-72(%rbp), %rdx	# op1, tmp292
	movq	%rdx, %rsi	# tmp292,
	movq	%rax, %rdi	# D.30359,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30357
	je	.L2083	#,
	.loc 1 8456 0 is_stmt 1
	cmpl	$107, -108(%rbp)	#, code
	jne	.L2084	#,
	.loc 1 8458 0
	movq	-120(%rbp), %rax	# operands, tmp293
	movq	(%rax), %rdx	# *operands_10(D), D.30359
	movq	-120(%rbp), %rax	# operands, tmp294
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _65->mode, D.30360
	movzbl	%al, %eax	# D.30360, D.30363
	movq	%rdx, %rsi	# D.30359,
	movl	%eax, %edi	# D.30363,
	call	force_reg	#
	movq	-120(%rbp), %rdx	# operands, tmp295
	movq	%rax, (%rdx)	# D.30359, *operands_10(D)
	.loc 1 8459 0
	movq	-80(%rbp), %rax	# op0, tmp296
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp296,
	call	memory_operand	#
	testl	%eax, %eax	# D.30357
	je	.L2085	#,
	.loc 1 8460 0
	movq	-120(%rbp), %rax	# operands, tmp297
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _70->mode, D.30360
	movzbl	%al, %eax	# D.30360, D.30363
	movq	-80(%rbp), %rdx	# op0, tmp298
	movq	%rdx, %rsi	# tmp298,
	movl	%eax, %edi	# D.30363,
	call	force_reg	#
	movq	%rax, -80(%rbp)	# tmp299, op0
.L2085:
	.loc 1 8461 0
	movq	-120(%rbp), %rax	# operands, tmp300
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _74->mode, D.30360
	cmpb	$15, %al	#, D.30360
	jne	.L2086	#,
	.loc 1 8462 0
	movq	-120(%rbp), %rax	# operands, tmp301
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	-72(%rbp), %rdx	# op1, tmp302
	movq	-80(%rbp), %rcx	# op0, tmp303
	movq	%rcx, %rsi	# tmp303,
	movq	%rax, %rdi	# D.30359,
	call	gen_minsf3	#
	movq	%rax, %rdi	# D.30359,
	call	emit_insn	#
	jmp	.L2087	#
.L2086:
	.loc 1 8464 0
	movq	-120(%rbp), %rax	# operands, tmp304
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	-72(%rbp), %rdx	# op1, tmp305
	movq	-80(%rbp), %rcx	# op0, tmp306
	movq	%rcx, %rsi	# tmp306,
	movq	%rax, %rdi	# D.30359,
	call	gen_mindf3	#
	movq	%rax, %rdi	# D.30359,
	call	emit_insn	#
.L2087:
	.loc 1 8465 0
	movl	$1, %eax	#, D.30357
	jmp	.L2106	#
.L2084:
	.loc 1 8468 0
	cmpl	$105, -108(%rbp)	#, code
	jne	.L2083	#,
	.loc 1 8470 0
	movq	-120(%rbp), %rax	# operands, tmp307
	movq	(%rax), %rdx	# *operands_10(D), D.30359
	movq	-120(%rbp), %rax	# operands, tmp308
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _82->mode, D.30360
	movzbl	%al, %eax	# D.30360, D.30363
	movq	%rdx, %rsi	# D.30359,
	movl	%eax, %edi	# D.30363,
	call	force_reg	#
	movq	-120(%rbp), %rdx	# operands, tmp309
	movq	%rax, (%rdx)	# D.30359, *operands_10(D)
	.loc 1 8471 0
	movq	-80(%rbp), %rax	# op0, tmp310
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp310,
	call	memory_operand	#
	testl	%eax, %eax	# D.30357
	je	.L2089	#,
	.loc 1 8472 0
	movq	-120(%rbp), %rax	# operands, tmp311
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _87->mode, D.30360
	movzbl	%al, %eax	# D.30360, D.30363
	movq	-80(%rbp), %rdx	# op0, tmp312
	movq	%rdx, %rsi	# tmp312,
	movl	%eax, %edi	# D.30363,
	call	force_reg	#
	movq	%rax, -80(%rbp)	# tmp313, op0
.L2089:
	.loc 1 8473 0
	movq	-120(%rbp), %rax	# operands, tmp314
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _91->mode, D.30360
	cmpb	$15, %al	#, D.30360
	jne	.L2090	#,
	.loc 1 8474 0
	movq	-120(%rbp), %rax	# operands, tmp315
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	-72(%rbp), %rdx	# op1, tmp316
	movq	-80(%rbp), %rcx	# op0, tmp317
	movq	%rcx, %rsi	# tmp317,
	movq	%rax, %rdi	# D.30359,
	call	gen_maxsf3	#
	movq	%rax, %rdi	# D.30359,
	call	emit_insn	#
	jmp	.L2091	#
.L2090:
	.loc 1 8476 0
	movq	-120(%rbp), %rax	# operands, tmp318
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	-72(%rbp), %rdx	# op1, tmp319
	movq	-80(%rbp), %rcx	# op0, tmp320
	movq	%rcx, %rsi	# tmp320,
	movq	%rax, %rdi	# D.30359,
	call	gen_maxdf3	#
	movq	%rax, %rdi	# D.30359,
	call	emit_insn	#
.L2091:
	.loc 1 8477 0
	movl	$1, %eax	#, D.30357
	jmp	.L2106	#
.L2083:
	.loc 1 8484 0
	movq	-120(%rbp), %rax	# operands, tmp321
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rax	# *_98, D.30359
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.30359,
	call	sse_comparison_operator	#
	testl	%eax, %eax	# D.30357
	je	.L2092	#,
	.loc 1 8485 0
	movq	ix86_compare_op1(%rip), %rdx	# ix86_compare_op1, ix86_compare_op1.1013
	movq	-120(%rbp), %rax	# operands, tmp322
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	%rdx, %rsi	# ix86_compare_op1.1013,
	movq	%rax, %rdi	# D.30359,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30357
	je	.L2093	#,
	.loc 1 8485 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1014
	andl	$16, %eax	#, D.30357
	testl	%eax, %eax	# D.30357
	jne	.L2093	#,
.L2092:
.LBB91:
	.loc 1 8487 0 is_stmt 1
	movq	ix86_compare_op0(%rip), %rax	# ix86_compare_op0, tmp323
	movq	%rax, -56(%rbp)	# tmp323, tmp
	.loc 1 8488 0
	movq	ix86_compare_op1(%rip), %rax	# ix86_compare_op1, ix86_compare_op1.1015
	movq	%rax, ix86_compare_op0(%rip)	# ix86_compare_op1.1015, ix86_compare_op0
	.loc 1 8489 0
	movq	-56(%rbp), %rax	# tmp, tmp324
	movq	%rax, ix86_compare_op1(%rip)	# tmp324, ix86_compare_op1
	.loc 1 8490 0
	movq	-120(%rbp), %rax	# operands, tmp325
	leaq	8(%rax), %r13	#, D.30361
	movq	ix86_compare_op1(%rip), %r12	# ix86_compare_op1, ix86_compare_op1.1016
	movq	ix86_compare_op0(%rip), %rbx	# ix86_compare_op0, ix86_compare_op0.1017
	movq	-120(%rbp), %rax	# operands, tmp326
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rax	# *_111, D.30359
	movzwl	(%rax), %eax	# _112->code, D.30362
	movzwl	%ax, %eax	# D.30362, D.30364
	movl	%eax, %edi	# D.30364,
	call	swap_condition	#
	movq	%r12, %rcx	# ix86_compare_op1.1016,
	movq	%rbx, %rdx	# ix86_compare_op0.1017,
	movl	$0, %esi	#,
	movl	%eax, %edi	# D.30364,
	call	gen_rtx_fmt_ee	#
	movq	%rax, 0(%r13)	# D.30359, *_108
.L2093:
.LBE91:
	.loc 1 8497 0
	movq	-120(%rbp), %rax	# operands, tmp327
	addq	$24, %rax	#, D.30361
	movq	(%rax), %rdx	# *_117, D.30359
	movq	-120(%rbp), %rax	# operands, tmp328
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	%rdx, %rsi	# D.30359,
	movq	%rax, %rdi	# D.30359,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30357
	je	.L2094	#,
	.loc 1 8498 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1018
	andl	$16, %eax	#, D.30357
	testl	%eax, %eax	# D.30357
	je	.L2095	#,
	.loc 1 8498 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# operands, tmp329
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rax	# *_123, D.30359
	movzwl	(%rax), %eax	# _124->code, D.30362
	cmpw	$103, %ax	#, D.30362
	jne	.L2095	#,
.L2094:
	.loc 1 8499 0 is_stmt 1
	movq	-120(%rbp), %rax	# operands, tmp330
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rax	# *_126, D.30359
	movzwl	(%rax), %eax	# _127->code, D.30362
	cmpw	$102, %ax	#, D.30362
	jne	.L2096	#,
	.loc 1 8499 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1019
	andl	$16, %eax	#, D.30357
	testl	%eax, %eax	# D.30357
	je	.L2096	#,
.L2095:
.LBB92:
	.loc 1 8501 0 is_stmt 1
	movq	-120(%rbp), %rax	# operands, tmp331
	movq	16(%rax), %rax	# MEM[(struct rtx_def * *)operands_10(D) + 16B], tmp332
	movq	%rax, -48(%rbp)	# tmp332, tmp
	.loc 1 8502 0
	movq	-120(%rbp), %rax	# operands, tmp333
	leaq	16(%rax), %rdx	#, D.30361
	movq	-120(%rbp), %rax	# operands, tmp334
	movq	24(%rax), %rax	# MEM[(struct rtx_def * *)operands_10(D) + 24B], D.30359
	movq	%rax, (%rdx)	# D.30359, *_132
	.loc 1 8503 0
	movq	-120(%rbp), %rax	# operands, tmp335
	leaq	24(%rax), %rdx	#, D.30361
	movq	-48(%rbp), %rax	# tmp, tmp336
	movq	%rax, (%rdx)	# tmp336, *_134
	.loc 1 8504 0
	movq	-120(%rbp), %rax	# operands, tmp337
	leaq	8(%rax), %r13	#, D.30361
	movq	ix86_compare_op1(%rip), %r12	# ix86_compare_op1, ix86_compare_op1.1020
	movq	ix86_compare_op0(%rip), %rbx	# ix86_compare_op0, ix86_compare_op0.1021
	.loc 1 8505 0
	movq	-120(%rbp), %rax	# operands, tmp338
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rax	# *_138, D.30359
	movzwl	(%rax), %eax	# _139->code, D.30362
	.loc 1 8504 0
	movzwl	%ax, %eax	# D.30362, D.30364
	movl	%eax, %edi	# D.30364,
	call	reverse_condition_maybe_unordered	#
	movq	%r12, %rcx	# ix86_compare_op1.1020,
	movq	%rbx, %rdx	# ix86_compare_op0.1021,
	movl	$0, %esi	#,
	movl	%eax, %edi	# D.30364,
	call	gen_rtx_fmt_ee	#
	movq	%rax, 0(%r13)	# D.30359, *_135
.L2096:
.LBE92:
	.loc 1 8509 0
	movq	-120(%rbp), %rax	# operands, tmp339
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _144->mode, D.30360
	cmpb	$15, %al	#, D.30360
	jne	.L2097	#,
	.loc 1 8510 0
	movq	ix86_compare_op1(%rip), %r8	# ix86_compare_op1, ix86_compare_op1.1022
	movq	ix86_compare_op0(%rip), %rdi	# ix86_compare_op0, ix86_compare_op0.1023
	.loc 1 8511 0
	movq	-120(%rbp), %rax	# operands, tmp340
	addq	$24, %rax	#, D.30361
	.loc 1 8510 0
	movq	(%rax), %rcx	# *_148, D.30359
	.loc 1 8511 0
	movq	-120(%rbp), %rax	# operands, tmp341
	addq	$16, %rax	#, D.30361
	.loc 1 8510 0
	movq	(%rax), %rdx	# *_150, D.30359
	movq	-120(%rbp), %rax	# operands, tmp342
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rsi	# *_152, D.30359
	movq	-120(%rbp), %rax	# operands, tmp343
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	%r8, %r9	# ix86_compare_op1.1022,
	movq	%rdi, %r8	# ix86_compare_op0.1023,
	movq	%rax, %rdi	# D.30359,
	call	gen_sse_movsfcc	#
	movq	%rax, %rdi	# D.30359,
	call	emit_insn	#
	jmp	.L2098	#
.L2097:
	.loc 1 8514 0
	movq	ix86_compare_op1(%rip), %r8	# ix86_compare_op1, ix86_compare_op1.1024
	movq	ix86_compare_op0(%rip), %rdi	# ix86_compare_op0, ix86_compare_op0.1025
	.loc 1 8515 0
	movq	-120(%rbp), %rax	# operands, tmp344
	addq	$24, %rax	#, D.30361
	.loc 1 8514 0
	movq	(%rax), %rcx	# *_158, D.30359
	.loc 1 8515 0
	movq	-120(%rbp), %rax	# operands, tmp345
	addq	$16, %rax	#, D.30361
	.loc 1 8514 0
	movq	(%rax), %rdx	# *_160, D.30359
	movq	-120(%rbp), %rax	# operands, tmp346
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rsi	# *_162, D.30359
	movq	-120(%rbp), %rax	# operands, tmp347
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	%r8, %r9	# ix86_compare_op1.1024,
	movq	%rdi, %r8	# ix86_compare_op0.1025,
	movq	%rax, %rdi	# D.30359,
	call	gen_sse_movdfcc	#
	movq	%rax, %rdi	# D.30359,
	call	emit_insn	#
.L2098:
	.loc 1 8517 0
	movl	$1, %eax	#, D.30357
	jmp	.L2106	#
.L2077:
.LBE89:
	.loc 1 8523 0
	movq	-120(%rbp), %rax	# operands, tmp348
	addq	$8, %rax	#, D.30361
	movq	(%rax), %rax	# *_167, D.30359
	movzwl	(%rax), %eax	# _168->code, D.30362
	movzwl	%ax, %eax	# D.30362, tmp349
	movl	%eax, -108(%rbp)	# tmp349, code
	.loc 1 8524 0
	leaq	-96(%rbp), %rdx	#, tmp350
	leaq	-104(%rbp), %rcx	#, tmp351
	movl	-108(%rbp), %eax	# code, tmp352
	movq	%rcx, %rsi	# tmp351,
	movl	%eax, %edi	# tmp352,
	call	ix86_expand_compare	#
	movq	%rax, -88(%rbp)	# tmp353, compare_op
	.loc 1 8529 0
	movq	-88(%rbp), %rax	# compare_op, tmp354
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp354,
	call	fcmov_comparison_operator	#
	testl	%eax, %eax	# D.30357
	jne	.L2099	#,
	.loc 1 8531 0
	movq	-104(%rbp), %rax	# second_test, second_test.1026
	testq	%rax, %rax	# second_test.1026
	jne	.L2100	#,
	.loc 1 8531 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# bypass_test, bypass_test.1027
	testq	%rax, %rax	# bypass_test.1027
	je	.L2101	#,
.L2100:
	.loc 1 8532 0 is_stmt 1
	movl	$__FUNCTION__.16133, %edx	#,
	movl	$8532, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2101:
	.loc 1 8533 0
	movl	$2, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -40(%rbp)	# tmp355, tmp
	.loc 1 8534 0
	movq	-40(%rbp), %rdx	# tmp, tmp356
	movl	-108(%rbp), %eax	# code, tmp357
	movq	%rdx, %rsi	# tmp356,
	movl	%eax, %edi	# tmp357,
	call	ix86_expand_setcc	#
	.loc 1 8535 0
	movl	$102, -108(%rbp)	#, code
	.loc 1 8536 0
	movq	-40(%rbp), %rax	# tmp, tmp358
	movq	%rax, ix86_compare_op0(%rip)	# tmp358, ix86_compare_op0
	.loc 1 8537 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, ix86_compare_op1.1028
	movq	%rax, ix86_compare_op1(%rip)	# ix86_compare_op1.1028, ix86_compare_op1
	.loc 1 8538 0
	leaq	-96(%rbp), %rdx	#, tmp359
	leaq	-104(%rbp), %rcx	#, tmp360
	movl	-108(%rbp), %eax	# code, tmp361
	movq	%rcx, %rsi	# tmp360,
	movl	%eax, %edi	# tmp361,
	call	ix86_expand_compare	#
	movq	%rax, -88(%rbp)	# tmp362, compare_op
.L2099:
	.loc 1 8540 0
	movq	-96(%rbp), %rax	# bypass_test, bypass_test.1029
	testq	%rax, %rax	# bypass_test.1029
	je	.L2102	#,
	.loc 1 8540 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# operands, tmp363
	addq	$24, %rax	#, D.30361
	movq	(%rax), %rdx	# *_180, D.30359
	movq	-120(%rbp), %rax	# operands, tmp364
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	%rdx, %rsi	# D.30359,
	movq	%rax, %rdi	# D.30359,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30357
	je	.L2102	#,
	.loc 1 8542 0 is_stmt 1
	movq	-120(%rbp), %rax	# operands, tmp365
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _184->mode, D.30360
	movzbl	%al, %eax	# D.30360, D.30363
	movl	%eax, %edi	# D.30363,
	call	gen_reg_rtx	#
	movq	%rax, -40(%rbp)	# tmp366, tmp
	.loc 1 8543 0
	movq	-120(%rbp), %rax	# operands, tmp367
	addq	$24, %rax	#, D.30361
	movq	(%rax), %rdx	# *_188, D.30359
	movq	-40(%rbp), %rax	# tmp, tmp368
	movq	%rdx, %rsi	# D.30359,
	movq	%rax, %rdi	# tmp368,
	call	emit_move_insn	#
	.loc 1 8544 0
	movq	-120(%rbp), %rax	# operands, tmp369
	leaq	24(%rax), %rdx	#, D.30361
	movq	-40(%rbp), %rax	# tmp, tmp370
	movq	%rax, (%rdx)	# tmp370, *_190
.L2102:
	.loc 1 8546 0
	movq	-104(%rbp), %rax	# second_test, second_test.1030
	testq	%rax, %rax	# second_test.1030
	je	.L2103	#,
	.loc 1 8546 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# operands, tmp371
	addq	$16, %rax	#, D.30361
	movq	(%rax), %rdx	# *_192, D.30359
	movq	-120(%rbp), %rax	# operands, tmp372
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	%rdx, %rsi	# D.30359,
	movq	%rax, %rdi	# D.30359,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30357
	je	.L2103	#,
	.loc 1 8548 0 is_stmt 1
	movq	-120(%rbp), %rax	# operands, tmp373
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _196->mode, D.30360
	movzbl	%al, %eax	# D.30360, D.30363
	movl	%eax, %edi	# D.30363,
	call	gen_reg_rtx	#
	movq	%rax, -40(%rbp)	# tmp374, tmp
	.loc 1 8549 0
	movq	-120(%rbp), %rax	# operands, tmp375
	addq	$16, %rax	#, D.30361
	movq	(%rax), %rdx	# *_200, D.30359
	movq	-40(%rbp), %rax	# tmp, tmp376
	movq	%rdx, %rsi	# D.30359,
	movq	%rax, %rdi	# tmp376,
	call	emit_move_insn	#
	.loc 1 8550 0
	movq	-120(%rbp), %rax	# operands, tmp377
	leaq	16(%rax), %rdx	#, D.30361
	movq	-40(%rbp), %rax	# tmp, tmp378
	movq	%rax, (%rdx)	# tmp378, *_202
.L2103:
	.loc 1 8553 0
	movq	-120(%rbp), %rax	# operands, tmp379
	addq	$24, %rax	#, D.30361
	movq	(%rax), %rsi	# *_203, D.30359
	movq	-120(%rbp), %rax	# operands, tmp380
	addq	$16, %rax	#, D.30361
	movq	(%rax), %rcx	# *_205, D.30359
	movq	-120(%rbp), %rax	# operands, tmp381
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _207->mode, D.30360
	movzbl	%al, %eax	# D.30360, D.30363
	movq	-88(%rbp), %rdx	# compare_op, tmp382
	movq	%rsi, %r8	# D.30359,
	movl	%eax, %esi	# D.30363,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30359
	movq	-120(%rbp), %rax	# operands, tmp383
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	%rdx, %rcx	# D.30359,
	movq	%rax, %rdx	# D.30359,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30359,
	call	emit_insn	#
	.loc 1 8558 0
	movq	-96(%rbp), %rax	# bypass_test, bypass_test.1031
	testq	%rax, %rax	# bypass_test.1031
	je	.L2104	#,
	.loc 1 8559 0
	movq	-120(%rbp), %rax	# operands, tmp384
	movq	(%rax), %rsi	# *operands_10(D), D.30359
	movq	-120(%rbp), %rax	# operands, tmp385
	addq	$24, %rax	#, D.30361
	movq	(%rax), %rcx	# *_215, D.30359
	movq	-96(%rbp), %rdx	# bypass_test, bypass_test.1032
	movq	-120(%rbp), %rax	# operands, tmp386
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _218->mode, D.30360
	movzbl	%al, %eax	# D.30360, D.30363
	movq	%rsi, %r8	# D.30359,
	movl	%eax, %esi	# D.30363,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30359
	movq	-120(%rbp), %rax	# operands, tmp387
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	%rdx, %rcx	# D.30359,
	movq	%rax, %rdx	# D.30359,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30359,
	call	emit_insn	#
.L2104:
	.loc 1 8564 0
	movq	-104(%rbp), %rax	# second_test, second_test.1033
	testq	%rax, %rax	# second_test.1033
	je	.L2105	#,
	.loc 1 8565 0
	movq	-120(%rbp), %rax	# operands, tmp388
	movq	(%rax), %rsi	# *operands_10(D), D.30359
	movq	-120(%rbp), %rax	# operands, tmp389
	addq	$16, %rax	#, D.30361
	movq	(%rax), %rcx	# *_226, D.30359
	movq	-104(%rbp), %rdx	# second_test, second_test.1034
	movq	-120(%rbp), %rax	# operands, tmp390
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movzbl	2(%rax), %eax	# _229->mode, D.30360
	movzbl	%al, %eax	# D.30360, D.30363
	movq	%rsi, %r8	# D.30359,
	movl	%eax, %esi	# D.30363,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30359
	movq	-120(%rbp), %rax	# operands, tmp391
	movq	(%rax), %rax	# *operands_10(D), D.30359
	movq	%rdx, %rcx	# D.30359,
	movq	%rax, %rdx	# D.30359,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30359,
	call	emit_insn	#
.L2105:
	.loc 1 8571 0
	movl	$1, %eax	#, D.30357
.L2106:
	.loc 1 8572 0
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE133:
	.size	ix86_expand_fp_movcc, .-ix86_expand_fp_movcc
	.type	ix86_split_to_parts, @function
ix86_split_to_parts:
.LFB134:
	.loc 1 8584 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# operand, operand
	movq	%rsi, -112(%rbp)	# parts, parts
	movl	%edx, -116(%rbp)	# mode, mode
	.loc 1 8587 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1035
	andl	$33554432, %eax	#, D.30365
	testl	%eax, %eax	# D.30365
	jne	.L2108	#,
	.loc 1 8588 0
	cmpl	$18, -116(%rbp)	#, mode
	je	.L2109	#,
	.loc 1 8588 0 is_stmt 0 discriminator 1
	movl	-116(%rbp), %eax	# mode, mode.1037
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30366
	shrb	$2, %al	#, D.30366
	movzbl	%al, %eax	# D.30366, iftmp.1036
	jmp	.L2110	#
.L2109:
	.loc 1 8588 0 discriminator 2
	movl	$3, %eax	#, iftmp.1036
.L2110:
	.loc 1 8588 0 discriminator 1
	movl	%eax, -84(%rbp)	# iftmp.1036, size
	jmp	.L2111	#
.L2108:
	.loc 1 8590 0 is_stmt 1
	movl	-116(%rbp), %eax	# mode, mode.1038
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30366
	movzbl	%al, %eax	# D.30366, D.30365
	addl	$4, %eax	#, D.30365
	leal	7(%rax), %edx	#, tmp202
	testl	%eax, %eax	# tmp201
	cmovs	%edx, %eax	# tmp202,, tmp201
	sarl	$3, %eax	#, tmp203
	movl	%eax, -84(%rbp)	# tmp203, size
.L2111:
	.loc 1 8592 0
	movq	-104(%rbp), %rax	# operand, operand.1039
	movzwl	(%rax), %eax	# operand.1039_18->code, D.30367
	cmpw	$61, %ax	#, D.30367
	jne	.L2112	#,
	.loc 1 8592 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# operand, operand.1040
	movl	8(%rax), %eax	# operand.1040_20->fld[0].rtuint, D.30368
	cmpl	$28, %eax	#, D.30368
	jbe	.L2112	#,
	movq	-104(%rbp), %rax	# operand, operand.1041
	movl	8(%rax), %eax	# operand.1041_22->fld[0].rtuint, D.30368
	cmpl	$36, %eax	#, D.30368
	ja	.L2112	#,
	.loc 1 8593 0 is_stmt 1
	movl	$__FUNCTION__.16140, %edx	#,
	movl	$8593, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2112:
	.loc 1 8594 0
	cmpl	$1, -84(%rbp)	#, size
	jle	.L2113	#,
	.loc 1 8594 0 is_stmt 0 discriminator 1
	cmpl	$3, -84(%rbp)	#, size
	jle	.L2114	#,
.L2113:
	.loc 1 8595 0 is_stmt 1
	movl	$__FUNCTION__.16140, %edx	#,
	movl	$8595, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2114:
	.loc 1 8600 0
	movq	-104(%rbp), %rax	# operand, operand.1042
	movzwl	(%rax), %eax	# operand.1042_24->code, D.30367
	cmpw	$66, %ax	#, D.30367
	jne	.L2115	#,
	.loc 1 8601 0
	movq	-104(%rbp), %rax	# operand, operand.1043
	movq	8(%rax), %rax	# operand.1043_26->fld[0].rtx, D.30369
	movzwl	(%rax), %eax	# _27->code, D.30367
	cmpw	$68, %ax	#, D.30367
	jne	.L2115	#,
	.loc 1 8602 0
	movq	-104(%rbp), %rax	# operand, operand.1044
	movq	8(%rax), %rax	# operand.1044_29->fld[0].rtx, D.30369
	movzbl	3(%rax), %eax	# *_30, D.30366
	andl	$4, %eax	#, D.30366
	testb	%al, %al	# D.30366
	je	.L2115	#,
	.loc 1 8603 0
	movq	-104(%rbp), %rax	# operand, operand.1045
	movq	8(%rax), %rax	# operand.1045_33->fld[0].rtx, D.30369
	movq	%rax, %rdi	# D.30369,
	call	get_pool_constant	#
	movq	%rax, -104(%rbp)	# operand.1046, operand
.L2115:
	.loc 1 8605 0
	movq	-104(%rbp), %rax	# operand, operand.1047
	movzwl	(%rax), %eax	# operand.1047_36->code, D.30367
	cmpw	$66, %ax	#, D.30367
	jne	.L2116	#,
	.loc 1 8605 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# operand, operand.1048
	movq	%rax, %rdi	# operand.1048,
	call	offsettable_memref_p	#
	testl	%eax, %eax	# D.30365
	jne	.L2116	#,
	.loc 1 8608 0 is_stmt 1
	movq	-104(%rbp), %rax	# operand, operand.1049
	movl	$0, %esi	#,
	movq	%rax, %rdi	# operand.1049,
	call	push_operand	#
	testl	%eax, %eax	# D.30365
	jne	.L2117	#,
	.loc 1 8609 0
	movl	$__FUNCTION__.16140, %edx	#,
	movl	$8609, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2117:
	.loc 1 8611 0
	movq	-104(%rbp), %rax	# operand, operand.1050
	movq	%rax, %rdi	# operand.1050,
	call	copy_rtx	#
	movq	%rax, -104(%rbp)	# operand.1051, operand
	.loc 1 8612 0
	movq	-104(%rbp), %rdx	# operand, operand.1052
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1054
	andl	$33554432, %eax	#, D.30365
	testl	%eax, %eax	# D.30365
	je	.L2118	#,
	.loc 1 8612 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1053
	jmp	.L2119	#
.L2118:
	.loc 1 8612 0 discriminator 2
	movl	$4, %eax	#, iftmp.1053
.L2119:
	.loc 1 8612 0 discriminator 3
	movb	%al, 2(%rdx)	# iftmp.1053, operand.1052_44->mode
	.loc 1 8613 0 is_stmt 1 discriminator 3
	movq	-112(%rbp), %rax	# parts, tmp204
	addq	$8, %rax	#, D.30370
	movq	-112(%rbp), %rdx	# parts, tmp205
	addq	$16, %rdx	#, D.30370
	movq	-104(%rbp), %rcx	# operand, operand.1055
	movq	%rcx, (%rdx)	# operand.1055, *_51
	movq	(%rdx), %rdx	# *_51, D.30369
	movq	%rdx, (%rax)	# D.30369, *_50
	movq	(%rax), %rdx	# *_50, D.30369
	movq	-112(%rbp), %rax	# parts, tmp206
	movq	%rdx, (%rax)	# D.30369, *parts_49(D)
	jmp	.L2120	#
.L2116:
	.loc 1 8615 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1056
	andl	$33554432, %eax	#, D.30365
	testl	%eax, %eax	# D.30365
	jne	.L2121	#,
	.loc 1 8617 0
	cmpl	$5, -116(%rbp)	#, mode
	jne	.L2122	#,
	.loc 1 8618 0
	movq	-112(%rbp), %rax	# parts, tmp207
	leaq	8(%rax), %rcx	#, D.30370
	movq	-112(%rbp), %rdx	# parts, tmp208
	leaq	-104(%rbp), %rax	#, tmp209
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp209,
	call	split_di	#
	jmp	.L2120	#
.L2122:
	.loc 1 8621 0
	movq	-104(%rbp), %rax	# operand, operand.1057
	movzwl	(%rax), %eax	# operand.1057_58->code, D.30367
	cmpw	$61, %ax	#, D.30367
	jne	.L2123	#,
	.loc 1 8623 0
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.1058
	testl	%eax, %eax	# reload_completed.1058
	jne	.L2124	#,
	.loc 1 8624 0
	movl	$__FUNCTION__.16140, %edx	#,
	movl	$8624, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2124:
	.loc 1 8625 0
	movq	-104(%rbp), %rax	# operand, operand.1059
	movl	8(%rax), %eax	# operand.1059_61->fld[0].rtuint, D.30368
	movl	%eax, %esi	# D.30365,
	movl	$4, %edi	#,
	call	gen_rtx_REG	#
	movq	-112(%rbp), %rdx	# parts, tmp210
	movq	%rax, (%rdx)	# D.30369, *parts_49(D)
	.loc 1 8626 0
	movq	-112(%rbp), %rax	# parts, tmp211
	leaq	8(%rax), %rbx	#, D.30370
	movq	-104(%rbp), %rax	# operand, operand.1060
	movl	8(%rax), %eax	# operand.1060_66->fld[0].rtuint, D.30368
	addl	$1, %eax	#, D.30368
	movl	%eax, %esi	# D.30365,
	movl	$4, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, (%rbx)	# D.30369, *_65
	.loc 1 8627 0
	cmpl	$3, -84(%rbp)	#, size
	jne	.L2120	#,
	.loc 1 8628 0
	movq	-112(%rbp), %rax	# parts, tmp212
	leaq	16(%rax), %rbx	#, D.30370
	movq	-104(%rbp), %rax	# operand, operand.1061
	movl	8(%rax), %eax	# operand.1061_72->fld[0].rtuint, D.30368
	addl	$2, %eax	#, D.30368
	movl	%eax, %esi	# D.30365,
	movl	$4, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, (%rbx)	# D.30369, *_71
	jmp	.L2120	#
.L2123:
	.loc 1 8630 0
	movq	-104(%rbp), %rax	# operand, operand.1062
	movq	%rax, %rdi	# operand.1062,
	call	offsettable_memref_p	#
	testl	%eax, %eax	# D.30365
	je	.L2126	#,
	.loc 1 8632 0
	movq	-104(%rbp), %rax	# operand, operand.1063
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# operand.1063,
	call	adjust_address_1	#
	movq	%rax, -104(%rbp)	# operand.1064, operand
	.loc 1 8633 0
	movq	-104(%rbp), %rdx	# operand, operand.1065
	movq	-112(%rbp), %rax	# parts, tmp213
	movq	%rdx, (%rax)	# operand.1065, *parts_49(D)
	.loc 1 8634 0
	movq	-112(%rbp), %rax	# parts, tmp214
	leaq	8(%rax), %rbx	#, D.30370
	movq	-104(%rbp), %rax	# operand, operand.1066
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$4, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# operand.1066,
	call	adjust_address_1	#
	movq	%rax, (%rbx)	# D.30369, *_82
	.loc 1 8635 0
	cmpl	$3, -84(%rbp)	#, size
	jne	.L2120	#,
	.loc 1 8636 0
	movq	-112(%rbp), %rax	# parts, tmp215
	leaq	16(%rax), %rbx	#, D.30370
	movq	-104(%rbp), %rax	# operand, operand.1067
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$8, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# operand.1067,
	call	adjust_address_1	#
	movq	%rax, (%rbx)	# D.30369, *_85
	jmp	.L2120	#
.L2126:
	.loc 1 8638 0
	movq	-104(%rbp), %rax	# operand, operand.1068
	movzwl	(%rax), %eax	# operand.1068_88->code, D.30367
	cmpw	$55, %ax	#, D.30367
	jne	.L2128	#,
.LBB93:
.LBB94:
	.loc 1 8643 0
	movq	-104(%rbp), %rax	# operand, operand.1069
	leaq	16(%rax), %rcx	#, D.30371
	leaq	-48(%rbp), %rax	#, tmp216
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.30371,
	movq	%rax, %rdi	# tmp216,
	call	memcpy	#
	movq	-48(%rbp), %rax	# u.d, tmp217
	movq	%rax, -80(%rbp)	# tmp217, r
	movq	-40(%rbp), %rax	# u.d, tmp218
	movq	%rax, -72(%rbp)	# tmp218, r
	movq	-32(%rbp), %rax	# u.d, tmp219
	movq	%rax, -64(%rbp)	# tmp219, r
.LBE94:
	.loc 1 8644 0
	movl	-116(%rbp), %eax	# mode, mode
	cmpl	$16, %eax	#, mode
	je	.L2130	#,
	cmpl	$16, %eax	#, mode
	jb	.L2129	#,
	cmpl	$18, %eax	#, mode
	ja	.L2129	#,
	.loc 1 8648 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1070
	andl	$16777216, %eax	#, D.30365
	testl	%eax, %eax	# D.30365
	jne	.L2132	#,
	.loc 1 8648 0 is_stmt 0 discriminator 1
	leaq	-48(%rbp), %rax	#, tmp221
	movq	-80(%rbp), %rdx	# r, tmp222
	movq	%rdx, (%rsp)	# tmp222,
	movq	-72(%rbp), %rdx	# r, tmp223
	movq	%rdx, 8(%rsp)	# tmp223,
	movq	-64(%rbp), %rdx	# r, tmp224
	movq	%rdx, 16(%rsp)	# tmp224,
	movq	%rax, %rdi	# tmp221,
	call	etarldouble	#
	jmp	.L2133	#
.L2132:
	.loc 1 8648 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1071
	andl	$16777216, %eax	#, D.30365
	testl	%eax, %eax	# D.30365
	je	.L2134	#,
	.loc 1 8648 0 discriminator 1
	leaq	-48(%rbp), %rax	#, tmp225
	movq	-80(%rbp), %rdx	# r, tmp226
	movq	%rdx, (%rsp)	# tmp226,
	movq	-72(%rbp), %rdx	# r, tmp227
	movq	%rdx, 8(%rsp)	# tmp227,
	movq	-64(%rbp), %rdx	# r, tmp228
	movq	%rdx, 16(%rsp)	# tmp228,
	movq	%rax, %rdi	# tmp225,
	call	etartdouble	#
	jmp	.L2133	#
.L2134:
	.loc 1 8648 0 discriminator 2
	movl	$__FUNCTION__.16140, %edx	#,
	movl	$8648, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2133:
	.loc 1 8649 0 is_stmt 1
	movq	-112(%rbp), %rax	# parts, tmp229
	leaq	16(%rax), %rbx	#, D.30370
	movq	-32(%rbp), %rax	# l, D.30372
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.30372,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30372,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, (%rbx)	# D.30369, *_96
	.loc 1 8650 0
	jmp	.L2135	#
.L2130:
	.loc 1 8652 0
	leaq	-48(%rbp), %rax	#, tmp230
	movq	-80(%rbp), %rdx	# r, tmp231
	movq	%rdx, (%rsp)	# tmp231,
	movq	-72(%rbp), %rdx	# r, tmp232
	movq	%rdx, 8(%rsp)	# tmp232,
	movq	-64(%rbp), %rdx	# r, tmp233
	movq	%rdx, 16(%rsp)	# tmp233,
	movq	%rax, %rdi	# tmp230,
	call	etardouble	#
	.loc 1 8653 0
	jmp	.L2135	#
.L2129:
	.loc 1 8655 0
	movl	$__FUNCTION__.16140, %edx	#,
	movl	$8655, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2135:
	.loc 1 8657 0
	movq	-112(%rbp), %rax	# parts, tmp234
	leaq	8(%rax), %rbx	#, D.30370
	movq	-40(%rbp), %rax	# l, D.30372
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.30372,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30372,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, (%rbx)	# D.30369, *_100
	.loc 1 8658 0
	movq	-48(%rbp), %rax	# l, D.30372
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.30372,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30372,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	-112(%rbp), %rdx	# parts, tmp235
	movq	%rax, (%rdx)	# D.30369, *parts_49(D)
.LBE93:
	jmp	.L2120	#
.L2128:
	.loc 1 8661 0
	movl	$__FUNCTION__.16140, %edx	#,
	movl	$8661, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2121:
	.loc 1 8666 0
	cmpl	$6, -116(%rbp)	#, mode
	jne	.L2136	#,
	.loc 1 8667 0
	movq	-112(%rbp), %rax	# parts, tmp236
	leaq	8(%rax), %rcx	#, D.30370
	movq	-112(%rbp), %rdx	# parts, tmp237
	leaq	-104(%rbp), %rax	#, tmp238
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp238,
	call	split_ti	#
.L2136:
	.loc 1 8668 0
	cmpl	$17, -116(%rbp)	#, mode
	je	.L2137	#,
	.loc 1 8668 0 is_stmt 0 discriminator 1
	cmpl	$18, -116(%rbp)	#, mode
	jne	.L2120	#,
.L2137:
	.loc 1 8670 0 is_stmt 1
	movq	-104(%rbp), %rax	# operand, operand.1072
	movzwl	(%rax), %eax	# operand.1072_108->code, D.30367
	cmpw	$61, %ax	#, D.30367
	jne	.L2138	#,
	.loc 1 8672 0
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.1073
	testl	%eax, %eax	# reload_completed.1073
	jne	.L2139	#,
	.loc 1 8673 0
	movl	$__FUNCTION__.16140, %edx	#,
	movl	$8673, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2139:
	.loc 1 8674 0
	movq	-104(%rbp), %rax	# operand, operand.1074
	movl	8(%rax), %eax	# operand.1074_111->fld[0].rtuint, D.30368
	movl	%eax, %esi	# D.30365,
	movl	$5, %edi	#,
	call	gen_rtx_REG	#
	movq	-112(%rbp), %rdx	# parts, tmp239
	movq	%rax, (%rdx)	# D.30369, *parts_49(D)
	.loc 1 8675 0
	movq	-112(%rbp), %rax	# parts, tmp240
	leaq	8(%rax), %rbx	#, D.30370
	movq	-104(%rbp), %rax	# operand, operand.1075
	movl	8(%rax), %eax	# operand.1075_116->fld[0].rtuint, D.30368
	addl	$1, %eax	#, D.30368
	movl	%eax, %esi	# D.30365,
	movl	$4, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, (%rbx)	# D.30369, *_115
	jmp	.L2120	#
.L2138:
	.loc 1 8677 0
	movq	-104(%rbp), %rax	# operand, operand.1076
	movq	%rax, %rdi	# operand.1076,
	call	offsettable_memref_p	#
	testl	%eax, %eax	# D.30365
	je	.L2140	#,
	.loc 1 8679 0
	movq	-104(%rbp), %rax	# operand, operand.1077
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$5, %esi	#,
	movq	%rax, %rdi	# operand.1077,
	call	adjust_address_1	#
	movq	%rax, -104(%rbp)	# operand.1078, operand
	.loc 1 8680 0
	movq	-104(%rbp), %rdx	# operand, operand.1079
	movq	-112(%rbp), %rax	# parts, tmp241
	movq	%rdx, (%rax)	# operand.1079, *parts_49(D)
	.loc 1 8681 0
	movq	-112(%rbp), %rax	# parts, tmp242
	leaq	8(%rax), %rbx	#, D.30370
	movq	-104(%rbp), %rax	# operand, operand.1080
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$8, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# operand.1080,
	call	adjust_address_1	#
	movq	%rax, (%rbx)	# D.30369, *_126
	jmp	.L2120	#
.L2140:
	.loc 1 8683 0
	movq	-104(%rbp), %rax	# operand, operand.1081
	movzwl	(%rax), %eax	# operand.1081_129->code, D.30367
	cmpw	$55, %ax	#, D.30367
	jne	.L2141	#,
.LBB95:
.LBB96:
	.loc 1 8688 0
	movq	-104(%rbp), %rax	# operand, operand.1082
	leaq	16(%rax), %rcx	#, D.30371
	leaq	-48(%rbp), %rax	#, tmp243
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.30371,
	movq	%rax, %rdi	# tmp243,
	call	memcpy	#
	movq	-48(%rbp), %rax	# u.d, tmp244
	movq	%rax, -80(%rbp)	# tmp244, r
	movq	-40(%rbp), %rax	# u.d, tmp245
	movq	%rax, -72(%rbp)	# tmp245, r
	movq	-32(%rbp), %rax	# u.d, tmp246
	movq	%rax, -64(%rbp)	# tmp246, r
.LBE96:
	.loc 1 8689 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1083
	andl	$16777216, %eax	#, D.30365
	testl	%eax, %eax	# D.30365
	jne	.L2142	#,
	.loc 1 8689 0 is_stmt 0 discriminator 1
	leaq	-48(%rbp), %rax	#, tmp247
	movq	-80(%rbp), %rdx	# r, tmp248
	movq	%rdx, (%rsp)	# tmp248,
	movq	-72(%rbp), %rdx	# r, tmp249
	movq	%rdx, 8(%rsp)	# tmp249,
	movq	-64(%rbp), %rdx	# r, tmp250
	movq	%rdx, 16(%rsp)	# tmp250,
	movq	%rax, %rdi	# tmp247,
	call	etarldouble	#
	jmp	.L2143	#
.L2142:
	.loc 1 8689 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1084
	andl	$16777216, %eax	#, D.30365
	testl	%eax, %eax	# D.30365
	je	.L2144	#,
	.loc 1 8689 0 discriminator 1
	leaq	-48(%rbp), %rax	#, tmp251
	movq	-80(%rbp), %rdx	# r, tmp252
	movq	%rdx, (%rsp)	# tmp252,
	movq	-72(%rbp), %rdx	# r, tmp253
	movq	%rdx, 8(%rsp)	# tmp253,
	movq	-64(%rbp), %rdx	# r, tmp254
	movq	%rdx, 16(%rsp)	# tmp254,
	movq	%rax, %rdi	# tmp251,
	call	etartdouble	#
	jmp	.L2143	#
.L2144:
	.loc 1 8689 0 discriminator 2
	movl	$__FUNCTION__.16140, %edx	#,
	movl	$8689, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2143:
	.loc 1 8693 0 is_stmt 1
	movq	-48(%rbp), %rax	# l, D.30372
	movl	%eax, %eax	# D.30372, D.30372
	movq	-40(%rbp), %rdx	# l, D.30372
	salq	$32, %rdx	#, D.30372
	addq	%rdx, %rax	# D.30372, D.30372
	movl	$5, %esi	#,
	movq	%rax, %rdi	# D.30372,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30372,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	-112(%rbp), %rdx	# parts, tmp255
	movq	%rax, (%rdx)	# D.30369, *parts_49(D)
	.loc 1 8699 0
	movq	-112(%rbp), %rax	# parts, tmp256
	leaq	8(%rax), %rbx	#, D.30370
	movq	-32(%rbp), %rax	# l, D.30372
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.30372,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30372,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, (%rbx)	# D.30369, *_144
.LBE95:
	jmp	.L2120	#
.L2141:
	.loc 1 8702 0
	movl	$__FUNCTION__.16140, %edx	#,
	movl	$8702, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2120:
	.loc 1 8706 0
	movl	-84(%rbp), %eax	# size, D.30365
	.loc 1 8707 0
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE134:
	.size	ix86_split_to_parts, .-ix86_split_to_parts
	.globl	ix86_split_long_move
	.type	ix86_split_long_move, @function
ix86_split_long_move:
.LFB135:
	.loc 1 8717 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# operands, operands
	.loc 1 8720 0
	movl	$0, -88(%rbp)	#, push
	.loc 1 8721 0
	movl	$0, -84(%rbp)	#, collisions
	.loc 1 8722 0
	movq	-104(%rbp), %rax	# operands, tmp275
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movzbl	2(%rax), %eax	# _12->mode, D.30375
	movzbl	%al, %eax	# D.30375, tmp276
	movl	%eax, -80(%rbp)	# tmp276, mode
	.loc 1 8727 0
	movq	-104(%rbp), %rax	# operands, tmp277
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movzbl	2(%rax), %eax	# _15->mode, D.30375
	movzbl	%al, %eax	# D.30375, D.30376
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30375
	cmpb	$8, %al	#, D.30375
	jne	.L2147	#,
	.loc 1 8727 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1085
	andl	$33554432, %eax	#, D.30376
	testl	%eax, %eax	# D.30376
	je	.L2147	#,
	.loc 1 8732 0 is_stmt 1
	movq	-104(%rbp), %rax	# operands, tmp279
	addq	$8, %rax	#, D.30377
	movq	(%rax), %rax	# *_21, D.30374
	movzwl	(%rax), %eax	# _22->code, D.30378
	cmpw	$66, %ax	#, D.30378
	jne	.L2148	#,
	.loc 1 8733 0
	movq	-104(%rbp), %rax	# operands, tmp280
	addq	$8, %rax	#, D.30377
	movq	(%rax), %rax	# *_24, D.30374
	movq	8(%rax), %rax	# _25->fld[0].rtx, D.30374
	movzwl	(%rax), %eax	# _26->code, D.30378
	cmpw	$68, %ax	#, D.30378
	jne	.L2148	#,
	.loc 1 8734 0
	movq	-104(%rbp), %rax	# operands, tmp281
	addq	$8, %rax	#, D.30377
	movq	(%rax), %rax	# *_28, D.30374
	movq	8(%rax), %rax	# _29->fld[0].rtx, D.30374
	movzbl	3(%rax), %eax	# *_30, D.30375
	andl	$4, %eax	#, D.30375
	testb	%al, %al	# D.30375
	je	.L2148	#,
	.loc 1 8735 0
	movq	-104(%rbp), %rax	# operands, tmp282
	leaq	8(%rax), %rbx	#, D.30377
	movq	-104(%rbp), %rax	# operands, tmp283
	addq	$8, %rax	#, D.30377
	movq	(%rax), %rax	# *_34, D.30374
	movq	8(%rax), %rax	# _35->fld[0].rtx, D.30374
	movq	%rax, %rdi	# D.30374,
	call	get_pool_constant	#
	movq	%rax, (%rbx)	# D.30374, *_33
.L2148:
	.loc 1 8736 0
	movq	-104(%rbp), %rax	# operands, tmp284
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.30374,
	call	push_operand	#
	testl	%eax, %eax	# D.30376
	je	.L2149	#,
	.loc 1 8738 0
	movq	-104(%rbp), %rax	# operands, tmp285
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movq	%rax, %rdi	# D.30374,
	call	copy_rtx	#
	movq	-104(%rbp), %rdx	# operands, tmp286
	movq	%rax, (%rdx)	# D.30374, *operands_11(D)
	.loc 1 8739 0
	movq	-104(%rbp), %rax	# operands, tmp287
	movq	(%rax), %rdx	# *operands_11(D), D.30374
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1087
	andl	$33554432, %eax	#, D.30376
	testl	%eax, %eax	# D.30376
	je	.L2150	#,
	.loc 1 8739 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1086
	jmp	.L2151	#
.L2150:
	.loc 1 8739 0 discriminator 2
	movl	$4, %eax	#, iftmp.1086
.L2151:
	.loc 1 8739 0 discriminator 1
	movb	%al, 2(%rdx)	# iftmp.1086, _42->mode
	jmp	.L2152	#
.L2149:
	.loc 1 8742 0 is_stmt 1
	movq	-104(%rbp), %rax	# operands, tmp288
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movq	%rax, %rsi	# D.30374,
	movl	$5, %edi	#,
	call	gen_lowpart	#
	movq	-104(%rbp), %rdx	# operands, tmp289
	movq	%rax, (%rdx)	# D.30374, *operands_11(D)
.L2152:
	.loc 1 8743 0
	movq	-104(%rbp), %rax	# operands, tmp290
	leaq	8(%rax), %rbx	#, D.30377
	movq	-104(%rbp), %rax	# operands, tmp291
	addq	$8, %rax	#, D.30377
	movq	(%rax), %rax	# *_50, D.30374
	movq	%rax, %rsi	# D.30374,
	movl	$5, %edi	#,
	call	gen_lowpart	#
	movq	%rax, (%rbx)	# D.30374, *_49
	.loc 1 8744 0
	movq	-104(%rbp), %rax	# operands, tmp292
	addq	$8, %rax	#, D.30377
	movq	(%rax), %rdx	# *_53, D.30374
	movq	-104(%rbp), %rax	# operands, tmp293
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	emit_move_insn	#
	.loc 1 8745 0
	jmp	.L2146	#
.L2147:
	.loc 1 8749 0
	movq	-104(%rbp), %rax	# operands, tmp294
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.30374,
	call	push_operand	#
	testl	%eax, %eax	# D.30376
	je	.L2154	#,
	.loc 1 8750 0
	movl	$1, -88(%rbp)	#, push
	jmp	.L2155	#
.L2154:
	.loc 1 8751 0
	movq	-104(%rbp), %rax	# operands, tmp295
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movzwl	(%rax), %eax	# _59->code, D.30378
	cmpw	$66, %ax	#, D.30378
	jne	.L2155	#,
	.loc 1 8752 0
	movq	-104(%rbp), %rax	# operands, tmp296
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movq	%rax, %rdi	# D.30374,
	call	offsettable_memref_p	#
	testl	%eax, %eax	# D.30376
	jne	.L2155	#,
	.loc 1 8753 0
	movl	$__FUNCTION__.16160, %edx	#,
	movl	$8753, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2155:
	.loc 1 8755 0
	movq	-104(%rbp), %rax	# operands, tmp297
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movzbl	2(%rax), %eax	# _63->mode, D.30375
	movzbl	%al, %edx	# D.30375, D.30379
	movq	-104(%rbp), %rax	# operands, tmp298
	addq	$8, %rax	#, D.30377
	movq	(%rax), %rax	# *_66, D.30374
	leaq	-64(%rbp), %rcx	#, tmp299
	addq	$24, %rcx	#, tmp300
	movq	%rcx, %rsi	# tmp300,
	movq	%rax, %rdi	# D.30374,
	call	ix86_split_to_parts	#
	movl	%eax, -76(%rbp)	# tmp301, nparts
	.loc 1 8756 0
	movq	-104(%rbp), %rax	# operands, tmp302
	movq	(%rax), %rax	# *operands_11(D), D.30374
	movzbl	2(%rax), %eax	# _69->mode, D.30375
	movzbl	%al, %edx	# D.30375, D.30379
	movq	-104(%rbp), %rax	# operands, tmp303
	movq	(%rax), %rax	# *operands_11(D), D.30374
	leaq	-64(%rbp), %rcx	#, tmp304
	movq	%rcx, %rsi	# tmp304,
	movq	%rax, %rdi	# D.30374,
	call	ix86_split_to_parts	#
	.loc 1 8759 0
	cmpl	$0, -88(%rbp)	#, push
	je	.L2156	#,
	.loc 1 8759 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# operands, tmp305
	addq	$8, %rax	#, D.30377
	movq	(%rax), %rax	# *_73, D.30374
	movzwl	(%rax), %eax	# _74->code, D.30378
	cmpw	$66, %ax	#, D.30378
	jne	.L2156	#,
	.loc 1 8760 0 is_stmt 1
	movq	-104(%rbp), %rax	# operands, tmp306
	addq	$8, %rax	#, D.30377
	movq	(%rax), %rdx	# *_76, D.30374
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30376
	je	.L2156	#,
	.loc 1 8762 0
	cmpl	$3, -76(%rbp)	#, nparts
	jne	.L2157	#,
	.loc 1 8764 0
	movq	-24(%rbp), %rax	# part, D.30374
	.loc 1 8763 0
	movq	8(%rax), %rdx	# _80->fld[0].rtx, D.30374
	movq	-32(%rbp), %rax	# part, D.30374
	movzbl	2(%rax), %eax	# _82->mode, D.30375
	movzbl	%al, %ecx	# D.30375, D.30379
	movq	-32(%rbp), %rax	# part, D.30374
	movl	%ecx, %esi	# D.30379,
	movq	%rax, %rdi	# D.30374,
	call	change_address	#
	movq	%rax, -32(%rbp)	# D.30374, part
.L2157:
	.loc 1 8766 0
	movq	-32(%rbp), %rax	# part, D.30374
	.loc 1 8765 0
	movq	8(%rax), %rdx	# _87->fld[0].rtx, D.30374
	movq	-40(%rbp), %rax	# part, D.30374
	movzbl	2(%rax), %eax	# _89->mode, D.30375
	movzbl	%al, %ecx	# D.30375, D.30379
	movq	-40(%rbp), %rax	# part, D.30374
	movl	%ecx, %esi	# D.30379,
	movq	%rax, %rdi	# D.30374,
	call	change_address	#
	movq	%rax, -40(%rbp)	# D.30374, part
.L2156:
	.loc 1 8771 0
	movq	-64(%rbp), %rax	# part, D.30374
	movzwl	(%rax), %eax	# _94->code, D.30378
	cmpw	$61, %ax	#, D.30378
	jne	.L2158	#,
	.loc 1 8771 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# part, D.30374
	movzwl	(%rax), %eax	# _96->code, D.30378
	cmpw	$66, %ax	#, D.30378
	jne	.L2158	#,
	.loc 1 8773 0 is_stmt 1
	movq	-40(%rbp), %rax	# part, D.30374
	movq	8(%rax), %rdx	# _98->fld[0].rtx, D.30374
	movq	-64(%rbp), %rax	# part, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30376
	je	.L2159	#,
	.loc 1 8774 0
	addl	$1, -84(%rbp)	#, collisions
.L2159:
	.loc 1 8775 0
	movq	-40(%rbp), %rax	# part, D.30374
	movq	8(%rax), %rdx	# _103->fld[0].rtx, D.30374
	movq	-56(%rbp), %rax	# part, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30376
	je	.L2160	#,
	.loc 1 8776 0
	addl	$1, -84(%rbp)	#, collisions
.L2160:
	.loc 1 8777 0
	cmpl	$3, -76(%rbp)	#, nparts
	jne	.L2161	#,
	.loc 1 8778 0
	movq	-40(%rbp), %rax	# part, D.30374
	movq	8(%rax), %rdx	# _108->fld[0].rtx, D.30374
	movq	-48(%rbp), %rax	# part, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30376
	je	.L2161	#,
	.loc 1 8779 0
	addl	$1, -84(%rbp)	#, collisions
.L2161:
	.loc 1 8782 0
	cmpl	$1, -84(%rbp)	#, collisions
	jne	.L2162	#,
	.loc 1 8782 0 is_stmt 0 discriminator 1
	cmpl	$3, -76(%rbp)	#, nparts
	jne	.L2162	#,
	.loc 1 8783 0 is_stmt 1
	movq	-40(%rbp), %rax	# part, D.30374
	movq	8(%rax), %rdx	# _113->fld[0].rtx, D.30374
	movq	-56(%rbp), %rax	# part, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30376
	je	.L2162	#,
.LBB97:
	.loc 1 8786 0
	movq	-56(%rbp), %rax	# part, tmp307
	movq	%rax, -72(%rbp)	# tmp307, tmp
	movq	-48(%rbp), %rax	# part, D.30374
	movq	%rax, -56(%rbp)	# D.30374, part
	movq	-72(%rbp), %rax	# tmp, tmp308
	movq	%rax, -48(%rbp)	# tmp308, part
	.loc 1 8787 0
	movq	-32(%rbp), %rax	# part, tmp309
	movq	%rax, -72(%rbp)	# tmp309, tmp
	movq	-24(%rbp), %rax	# part, D.30374
	movq	%rax, -32(%rbp)	# D.30374, part
	movq	-72(%rbp), %rax	# tmp, tmp310
	movq	%rax, -24(%rbp)	# tmp310, part
.LBE97:
	.loc 1 8784 0
	jmp	.L2158	#
.L2162:
	.loc 1 8792 0
	cmpl	$1, -84(%rbp)	#, collisions
	jle	.L2158	#,
	.loc 1 8794 0
	movl	$1, -84(%rbp)	#, collisions
	.loc 1 8795 0
	movq	-40(%rbp), %rax	# part, D.30374
	movq	8(%rax), %rdx	# _122->fld[0].rtx, D.30374
	movl	-76(%rbp), %eax	# nparts, tmp311
	subl	$1, %eax	#, D.30376
	cltq
	movq	-64(%rbp,%rax,8), %rax	# part, D.30374
	movq	%rdx, %rcx	# D.30374,
	movq	%rax, %rdx	# D.30374,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30374,
	call	emit_insn	#
	.loc 1 8799 0
	movl	-76(%rbp), %eax	# nparts, tmp313
	subl	$1, %eax	#, D.30376
	.loc 1 8797 0
	cltq
	movq	-64(%rbp,%rax,8), %rdx	# part, D.30374
	.loc 1 8798 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1089
	andl	$33554432, %eax	#, D.30376
	.loc 1 8797 0
	testl	%eax, %eax	# D.30376
	je	.L2163	#,
	.loc 1 8797 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1088
	jmp	.L2164	#
.L2163:
	.loc 1 8797 0 discriminator 2
	movl	$4, %eax	#, iftmp.1088
.L2164:
	.loc 1 8797 0 discriminator 3
	movq	-40(%rbp), %rcx	# part, D.30374
	movl	%eax, %esi	# iftmp.1088,
	movq	%rcx, %rdi	# D.30374,
	call	change_address	#
	movq	%rax, -40(%rbp)	# D.30374, part
	.loc 1 8800 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1091
	andl	$33554432, %eax	#, D.30376
	testl	%eax, %eax	# D.30376
	je	.L2165	#,
	.loc 1 8800 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.1090
	jmp	.L2166	#
.L2165:
	.loc 1 8800 0 discriminator 2
	movl	$4, %eax	#, iftmp.1090
.L2166:
	.loc 1 8800 0 discriminator 3
	movq	-40(%rbp), %rdi	# part, D.30374
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdx	# iftmp.1090,
	movl	$0, %esi	#,
	call	adjust_address_1	#
	movq	%rax, -32(%rbp)	# D.30374, part
	.loc 1 8801 0 is_stmt 1 discriminator 3
	cmpl	$3, -76(%rbp)	#, nparts
	jne	.L2158	#,
	.loc 1 8802 0
	movq	-40(%rbp), %rax	# part, D.30374
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$8, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.30374,
	call	adjust_address_1	#
	movq	%rax, -24(%rbp)	# D.30374, part
.L2158:
	.loc 1 8806 0
	cmpl	$0, -88(%rbp)	#, push
	je	.L2167	#,
	.loc 1 8808 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1092
	andl	$33554432, %eax	#, D.30376
	testl	%eax, %eax	# D.30376
	jne	.L2168	#,
	.loc 1 8810 0
	cmpl	$3, -76(%rbp)	#, nparts
	jne	.L2171	#,
	.loc 1 8815 0
	cmpl	$18, -80(%rbp)	#, mode
	jne	.L2170	#,
	.loc 1 8815 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1093
	andl	$33554432, %eax	#, D.30376
	testl	%eax, %eax	# D.30376
	jne	.L2170	#,
	.loc 1 8816 0 is_stmt 1
	movq	$-4, %rsi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30374
	movq	global_rtl+16(%rip), %rcx	# global_rtl, D.30374
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30374
	movq	%rcx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	gen_addsi3	#
	movq	%rax, %rdi	# D.30374,
	call	emit_insn	#
.L2170:
	.loc 1 8818 0
	movq	-24(%rbp), %rdx	# part, D.30374
	movq	-48(%rbp), %rax	# part, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	emit_move_insn	#
	jmp	.L2171	#
.L2168:
	.loc 1 8827 0
	movq	-32(%rbp), %rax	# part, D.30374
	movzbl	2(%rax), %eax	# _153->mode, D.30375
	cmpb	$4, %al	#, D.30375
	jne	.L2171	#,
	.loc 1 8829 0
	movq	-32(%rbp), %rax	# part, D.30374
	movzwl	(%rax), %eax	# _155->code, D.30378
	cmpw	$66, %ax	#, D.30378
	jne	.L2172	#,
	.loc 1 8830 0
	movq	-32(%rbp), %rax	# part, D.30374
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$5, %esi	#,
	movq	%rax, %rdi	# D.30374,
	call	adjust_address_1	#
	movq	%rax, -32(%rbp)	# D.30374, part
	jmp	.L2173	#
.L2172:
	.loc 1 8831 0
	movq	-32(%rbp), %rax	# part, D.30374
	movzwl	(%rax), %eax	# _159->code, D.30378
	cmpw	$61, %ax	#, D.30378
	jne	.L2174	#,
	.loc 1 8832 0
	movq	-32(%rbp), %rax	# part, D.30374
	movl	8(%rax), %eax	# _161->fld[0].rtuint, D.30380
	movl	%eax, %esi	# D.30376,
	movl	$5, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -32(%rbp)	# D.30374, part
	jmp	.L2173	#
.L2174:
	.loc 1 8834 0
	movl	$__FUNCTION__.16160, %edx	#,
	movl	$8834, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2173:
	.loc 1 8835 0
	movq	-40(%rbp), %rax	# part, D.30374
	movzbl	2(%rax), %eax	# _165->mode, D.30375
	cmpb	$4, %al	#, D.30375
	jne	.L2171	#,
	.loc 1 8836 0
	movq	-32(%rbp), %rax	# part, D.30374
	movq	%rax, -40(%rbp)	# D.30374, part
.L2171:
	.loc 1 8839 0
	movq	-32(%rbp), %rdx	# part, D.30374
	movq	-56(%rbp), %rax	# part, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	emit_move_insn	#
	.loc 1 8840 0
	movq	-40(%rbp), %rdx	# part, D.30374
	movq	-64(%rbp), %rax	# part, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	emit_move_insn	#
	.loc 1 8841 0
	jmp	.L2146	#
.L2167:
	.loc 1 8845 0
	movq	-64(%rbp), %rax	# part, D.30374
	movzwl	(%rax), %eax	# _172->code, D.30378
	cmpw	$61, %ax	#, D.30378
	jne	.L2175	#,
	.loc 1 8846 0
	movq	-32(%rbp), %rax	# part, D.30374
	movzwl	(%rax), %eax	# _174->code, D.30378
	cmpw	$61, %ax	#, D.30378
	jne	.L2175	#,
	.loc 1 8847 0
	movq	-64(%rbp), %rax	# part, D.30374
	movl	8(%rax), %edx	# _176->fld[0].rtuint, D.30380
	movq	-32(%rbp), %rax	# part, D.30374
	movl	8(%rax), %eax	# _178->fld[0].rtuint, D.30380
	cmpl	%eax, %edx	# D.30380, D.30380
	je	.L2176	#,
	.loc 1 8848 0
	cmpl	$3, -76(%rbp)	#, nparts
	jne	.L2175	#,
	.loc 1 8849 0
	movq	-64(%rbp), %rax	# part, D.30374
	movl	8(%rax), %edx	# _180->fld[0].rtuint, D.30380
	movq	-24(%rbp), %rax	# part, D.30374
	movl	8(%rax), %eax	# _182->fld[0].rtuint, D.30380
	cmpl	%eax, %edx	# D.30380, D.30380
	je	.L2176	#,
.L2175:
	.loc 1 8850 0
	cmpl	$0, -84(%rbp)	#, collisions
	jle	.L2177	#,
	.loc 1 8851 0
	movq	-40(%rbp), %rax	# part, D.30374
	movq	8(%rax), %rdx	# _184->fld[0].rtx, D.30374
	movq	-64(%rbp), %rax	# part, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30376
	je	.L2177	#,
.L2176:
	.loc 1 8853 0
	cmpl	$3, -76(%rbp)	#, nparts
	jne	.L2178	#,
	.loc 1 8855 0
	movq	-104(%rbp), %rax	# operands, tmp315
	leaq	16(%rax), %rdx	#, D.30377
	movq	-48(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_208
	.loc 1 8856 0
	movq	-104(%rbp), %rax	# operands, tmp316
	leaq	24(%rax), %rdx	#, D.30377
	movq	-56(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_210
	.loc 1 8857 0
	movq	-104(%rbp), %rax	# operands, tmp317
	leaq	32(%rax), %rdx	#, D.30377
	movq	-64(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_212
	.loc 1 8858 0
	movq	-104(%rbp), %rax	# operands, tmp318
	leaq	40(%rax), %rdx	#, D.30377
	movq	-24(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_214
	.loc 1 8859 0
	movq	-104(%rbp), %rax	# operands, tmp319
	leaq	48(%rax), %rdx	#, D.30377
	movq	-32(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_216
	.loc 1 8860 0
	movq	-104(%rbp), %rax	# operands, tmp320
	leaq	56(%rax), %rdx	#, D.30377
	movq	-40(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_218
	.loc 1 8853 0
	jmp	.L2180	#
.L2178:
	.loc 1 8864 0
	movq	-104(%rbp), %rax	# operands, tmp321
	leaq	16(%rax), %rdx	#, D.30377
	movq	-56(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_220
	.loc 1 8865 0
	movq	-104(%rbp), %rax	# operands, tmp322
	leaq	24(%rax), %rdx	#, D.30377
	movq	-64(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_222
	.loc 1 8866 0
	movq	-104(%rbp), %rax	# operands, tmp323
	leaq	40(%rax), %rdx	#, D.30377
	movq	-32(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_224
	.loc 1 8867 0
	movq	-104(%rbp), %rax	# operands, tmp324
	leaq	48(%rax), %rdx	#, D.30377
	movq	-40(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_226
	.loc 1 8853 0
	jmp	.L2180	#
.L2177:
	.loc 1 8872 0
	cmpl	$3, -76(%rbp)	#, nparts
	jne	.L2181	#,
	.loc 1 8874 0
	movq	-104(%rbp), %rax	# operands, tmp325
	leaq	16(%rax), %rdx	#, D.30377
	movq	-64(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_188
	.loc 1 8875 0
	movq	-104(%rbp), %rax	# operands, tmp326
	leaq	24(%rax), %rdx	#, D.30377
	movq	-56(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_190
	.loc 1 8876 0
	movq	-104(%rbp), %rax	# operands, tmp327
	leaq	32(%rax), %rdx	#, D.30377
	movq	-48(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_192
	.loc 1 8877 0
	movq	-104(%rbp), %rax	# operands, tmp328
	leaq	40(%rax), %rdx	#, D.30377
	movq	-40(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_194
	.loc 1 8878 0
	movq	-104(%rbp), %rax	# operands, tmp329
	leaq	48(%rax), %rdx	#, D.30377
	movq	-32(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_196
	.loc 1 8879 0
	movq	-104(%rbp), %rax	# operands, tmp330
	leaq	56(%rax), %rdx	#, D.30377
	movq	-24(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_198
	jmp	.L2180	#
.L2181:
	.loc 1 8883 0
	movq	-104(%rbp), %rax	# operands, tmp331
	leaq	16(%rax), %rdx	#, D.30377
	movq	-64(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_200
	.loc 1 8884 0
	movq	-104(%rbp), %rax	# operands, tmp332
	leaq	24(%rax), %rdx	#, D.30377
	movq	-56(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_202
	.loc 1 8885 0
	movq	-104(%rbp), %rax	# operands, tmp333
	leaq	40(%rax), %rdx	#, D.30377
	movq	-40(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_204
	.loc 1 8886 0
	movq	-104(%rbp), %rax	# operands, tmp334
	leaq	48(%rax), %rdx	#, D.30377
	movq	-32(%rbp), %rax	# part, D.30374
	movq	%rax, (%rdx)	# D.30374, *_206
.L2180:
	.loc 1 8889 0
	movq	-104(%rbp), %rax	# operands, tmp335
	addq	$40, %rax	#, D.30377
	movq	(%rax), %rdx	# *_228, D.30374
	movq	-104(%rbp), %rax	# operands, tmp336
	addq	$16, %rax	#, D.30377
	movq	(%rax), %rax	# *_230, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	emit_move_insn	#
	.loc 1 8890 0
	movq	-104(%rbp), %rax	# operands, tmp337
	addq	$48, %rax	#, D.30377
	movq	(%rax), %rdx	# *_232, D.30374
	movq	-104(%rbp), %rax	# operands, tmp338
	addq	$24, %rax	#, D.30377
	movq	(%rax), %rax	# *_234, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	emit_move_insn	#
	.loc 1 8891 0
	cmpl	$3, -76(%rbp)	#, nparts
	jne	.L2182	#,
	.loc 1 8892 0
	movq	-104(%rbp), %rax	# operands, tmp339
	addq	$56, %rax	#, D.30377
	movq	(%rax), %rdx	# *_236, D.30374
	movq	-104(%rbp), %rax	# operands, tmp340
	addq	$32, %rax	#, D.30377
	movq	(%rax), %rax	# *_238, D.30374
	movq	%rdx, %rsi	# D.30374,
	movq	%rax, %rdi	# D.30374,
	call	emit_move_insn	#
.L2182:
	.loc 1 8894 0
	nop
.L2146:
	.loc 1 8895 0
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE135:
	.size	ix86_split_long_move, .-ix86_split_long_move
	.globl	ix86_split_ashldi
	.type	ix86_split_ashldi, @function
ix86_split_ashldi:
.LFB136:
	.loc 1 8900 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# operands, operands
	movq	%rsi, -64(%rbp)	# scratch, scratch
	.loc 1 8904 0
	movq	-56(%rbp), %rax	# operands, tmp130
	addq	$16, %rax	#, D.30381
	movq	(%rax), %rax	# *_3, D.30382
	movzwl	(%rax), %eax	# _4->code, D.30383
	cmpw	$54, %ax	#, D.30383
	jne	.L2185	#,
	.loc 1 8906 0
	leaq	-16(%rbp), %rcx	#, tmp131
	leaq	-32(%rbp), %rdx	#, tmp132
	movq	-56(%rbp), %rax	# operands, tmp133
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp133,
	call	split_di	#
	.loc 1 8907 0
	movq	-56(%rbp), %rax	# operands, tmp134
	addq	$16, %rax	#, D.30381
	movq	(%rax), %rax	# *_6, D.30382
	movq	8(%rax), %rax	# _7->fld[0].rtwint, D.30384
	andl	$63, %eax	#, tmp135
	movl	%eax, -36(%rbp)	# tmp135, count
	.loc 1 8909 0
	cmpl	$31, -36(%rbp)	#, count
	jle	.L2186	#,
	.loc 1 8911 0
	movq	-24(%rbp), %rdx	# low, D.30382
	movq	-16(%rbp), %rax	# high, D.30382
	movq	%rdx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	emit_move_insn	#
	.loc 1 8912 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30382
	movq	-32(%rbp), %rax	# low, D.30382
	movq	%rdx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	emit_move_insn	#
	.loc 1 8914 0
	cmpl	$32, -36(%rbp)	#, count
	jle	.L2184	#,
	.loc 1 8915 0
	movl	-36(%rbp), %eax	# count, tmp136
	subl	$32, %eax	#, D.30385
	cltq
	movq	%rax, %rsi	# D.30384,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30382
	movq	-16(%rbp), %rcx	# high, D.30382
	movq	-16(%rbp), %rax	# high, D.30382
	movq	%rcx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	gen_ashlsi3	#
	movq	%rax, %rdi	# D.30382,
	call	emit_insn	#
	jmp	.L2184	#
.L2186:
	.loc 1 8919 0
	movq	-56(%rbp), %rax	# operands, tmp137
	addq	$8, %rax	#, D.30381
	movq	(%rax), %rdx	# *_21, D.30382
	movq	-56(%rbp), %rax	# operands, tmp138
	movq	(%rax), %rax	# *operands_2(D), D.30382
	movq	%rdx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30385
	jne	.L2189	#,
	.loc 1 8920 0
	movq	-56(%rbp), %rax	# operands, tmp139
	addq	$8, %rax	#, D.30381
	movq	(%rax), %rdx	# *_25, D.30382
	movq	-56(%rbp), %rax	# operands, tmp140
	movq	(%rax), %rax	# *operands_2(D), D.30382
	movq	%rdx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	emit_move_insn	#
.L2189:
	.loc 1 8921 0
	movl	-36(%rbp), %eax	# count, tmp141
	cltq
	movq	%rax, %rsi	# D.30384,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30382
	movq	-32(%rbp), %rcx	# low, D.30382
	movq	-16(%rbp), %rax	# high, D.30382
	movq	%rcx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	gen_x86_shld_1	#
	movq	%rax, %rdi	# D.30382,
	call	emit_insn	#
	.loc 1 8922 0
	movl	-36(%rbp), %eax	# count, tmp142
	cltq
	movq	%rax, %rsi	# D.30384,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30382
	movq	-32(%rbp), %rcx	# low, D.30382
	movq	-32(%rbp), %rax	# low, D.30382
	movq	%rcx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	gen_ashlsi3	#
	movq	%rax, %rdi	# D.30382,
	call	emit_insn	#
	jmp	.L2184	#
.L2185:
	.loc 1 8927 0
	movq	-56(%rbp), %rax	# operands, tmp143
	addq	$8, %rax	#, D.30381
	movq	(%rax), %rdx	# *_38, D.30382
	movq	-56(%rbp), %rax	# operands, tmp144
	movq	(%rax), %rax	# *operands_2(D), D.30382
	movq	%rdx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30385
	jne	.L2191	#,
	.loc 1 8928 0
	movq	-56(%rbp), %rax	# operands, tmp145
	addq	$8, %rax	#, D.30381
	movq	(%rax), %rdx	# *_42, D.30382
	movq	-56(%rbp), %rax	# operands, tmp146
	movq	(%rax), %rax	# *operands_2(D), D.30382
	movq	%rdx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	emit_move_insn	#
.L2191:
	.loc 1 8930 0
	leaq	-16(%rbp), %rcx	#, tmp147
	leaq	-32(%rbp), %rdx	#, tmp148
	movq	-56(%rbp), %rax	# operands, tmp149
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp149,
	call	split_di	#
	.loc 1 8932 0
	movq	-56(%rbp), %rax	# operands, tmp150
	addq	$16, %rax	#, D.30381
	movq	(%rax), %rdx	# *_45, D.30382
	movq	-32(%rbp), %rcx	# low, D.30382
	movq	-16(%rbp), %rax	# high, D.30382
	movq	%rcx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	gen_x86_shld_1	#
	movq	%rax, %rdi	# D.30382,
	call	emit_insn	#
	.loc 1 8933 0
	movq	-56(%rbp), %rax	# operands, tmp151
	addq	$16, %rax	#, D.30381
	movq	(%rax), %rdx	# *_50, D.30382
	movq	-32(%rbp), %rcx	# low, D.30382
	movq	-32(%rbp), %rax	# low, D.30382
	movq	%rcx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	gen_ashlsi3	#
	movq	%rax, %rdi	# D.30382,
	call	emit_insn	#
	.loc 1 8935 0
	movl	$104, %edx	#, x86_cmove.1094
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.1095
	movl	%eax, %ecx	# ix86_arch.1095, tmp158
	sarl	%cl, %edx	# tmp158, D.30385
	movl	%edx, %eax	# D.30385, D.30385
	andl	$1, %eax	#, D.30385
	testl	%eax, %eax	# D.30385
	jne	.L2192	#,
	.loc 1 8935 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1096
	andl	$327680, %eax	#, D.30385
	testl	%eax, %eax	# D.30385
	je	.L2193	#,
.L2192:
	.loc 1 8935 0 discriminator 1
	movl	no_new_pseudos(%rip), %eax	# no_new_pseudos, no_new_pseudos.1097
	testl	%eax, %eax	# no_new_pseudos.1097
	je	.L2194	#,
	cmpq	$0, -64(%rbp)	#, scratch
	je	.L2193	#,
.L2194:
	.loc 1 8937 0 is_stmt 1
	movl	no_new_pseudos(%rip), %eax	# no_new_pseudos, no_new_pseudos.1098
	testl	%eax, %eax	# no_new_pseudos.1098
	jne	.L2195	#,
	.loc 1 8938 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30382
	movq	%rax, %rsi	# D.30382,
	movl	$4, %edi	#,
	call	force_reg	#
	movq	%rax, -64(%rbp)	# tmp152, scratch
	jmp	.L2196	#
.L2195:
	.loc 1 8940 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30382
	movq	-64(%rbp), %rax	# scratch, tmp153
	movq	%rdx, %rsi	# D.30382,
	movq	%rax, %rdi	# tmp153,
	call	emit_move_insn	#
.L2196:
	.loc 1 8942 0
	movq	-56(%rbp), %rax	# operands, tmp154
	addq	$16, %rax	#, D.30381
	movq	(%rax), %rdx	# *_67, D.30382
	movq	-32(%rbp), %rsi	# low, D.30382
	movq	-16(%rbp), %rax	# high, D.30382
	movq	-64(%rbp), %rcx	# scratch, tmp155
	movq	%rax, %rdi	# D.30382,
	call	gen_x86_shift_adj_1	#
	movq	%rax, %rdi	# D.30382,
	call	emit_insn	#
	jmp	.L2184	#
.L2193:
	.loc 1 8946 0
	movq	-56(%rbp), %rax	# operands, tmp156
	addq	$16, %rax	#, D.30381
	movq	(%rax), %rdx	# *_72, D.30382
	movq	-32(%rbp), %rcx	# low, D.30382
	movq	-16(%rbp), %rax	# high, D.30382
	movq	%rcx, %rsi	# D.30382,
	movq	%rax, %rdi	# D.30382,
	call	gen_x86_shift_adj_2	#
	movq	%rax, %rdi	# D.30382,
	call	emit_insn	#
.L2184:
	.loc 1 8948 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE136:
	.size	ix86_split_ashldi, .-ix86_split_ashldi
	.globl	ix86_split_ashrdi
	.type	ix86_split_ashrdi, @function
ix86_split_ashrdi:
.LFB137:
	.loc 1 8953 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# operands, operands
	movq	%rsi, -64(%rbp)	# scratch, scratch
	.loc 1 8957 0
	movq	-56(%rbp), %rax	# operands, tmp140
	addq	$16, %rax	#, D.30386
	movq	(%rax), %rax	# *_3, D.30387
	movzwl	(%rax), %eax	# _4->code, D.30388
	cmpw	$54, %ax	#, D.30388
	jne	.L2198	#,
	.loc 1 8959 0
	leaq	-16(%rbp), %rcx	#, tmp141
	leaq	-32(%rbp), %rdx	#, tmp142
	movq	-56(%rbp), %rax	# operands, tmp143
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp143,
	call	split_di	#
	.loc 1 8960 0
	movq	-56(%rbp), %rax	# operands, tmp144
	addq	$16, %rax	#, D.30386
	movq	(%rax), %rax	# *_6, D.30387
	movq	8(%rax), %rax	# _7->fld[0].rtwint, D.30389
	andl	$63, %eax	#, tmp145
	movl	%eax, -36(%rbp)	# tmp145, count
	.loc 1 8962 0
	cmpl	$31, -36(%rbp)	#, count
	jle	.L2199	#,
	.loc 1 8964 0
	movq	-8(%rbp), %rdx	# high, D.30387
	movq	-32(%rbp), %rax	# low, D.30387
	movq	%rdx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	emit_move_insn	#
	.loc 1 8966 0
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.1099
	testl	%eax, %eax	# reload_completed.1099
	jne	.L2200	#,
	.loc 1 8967 0
	movl	$31, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30387
	movq	-32(%rbp), %rcx	# low, D.30387
	movq	-16(%rbp), %rax	# high, D.30387
	movq	%rcx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	gen_ashrsi3	#
	movq	%rax, %rdi	# D.30387,
	call	emit_insn	#
	jmp	.L2201	#
.L2200:
	.loc 1 8970 0
	movq	-32(%rbp), %rdx	# low, D.30387
	movq	-16(%rbp), %rax	# high, D.30387
	movq	%rdx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	emit_move_insn	#
	.loc 1 8971 0
	movl	$31, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30387
	movq	-16(%rbp), %rcx	# high, D.30387
	movq	-16(%rbp), %rax	# high, D.30387
	movq	%rcx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	gen_ashrsi3	#
	movq	%rax, %rdi	# D.30387,
	call	emit_insn	#
.L2201:
	.loc 1 8974 0
	cmpl	$32, -36(%rbp)	#, count
	jle	.L2197	#,
	.loc 1 8975 0
	movl	-36(%rbp), %eax	# count, tmp146
	subl	$32, %eax	#, D.30390
	cltq
	movq	%rax, %rsi	# D.30389,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30387
	movq	-32(%rbp), %rcx	# low, D.30387
	movq	-32(%rbp), %rax	# low, D.30387
	movq	%rcx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	gen_ashrsi3	#
	movq	%rax, %rdi	# D.30387,
	call	emit_insn	#
	jmp	.L2197	#
.L2199:
	.loc 1 8979 0
	movq	-56(%rbp), %rax	# operands, tmp147
	addq	$8, %rax	#, D.30386
	movq	(%rax), %rdx	# *_30, D.30387
	movq	-56(%rbp), %rax	# operands, tmp148
	movq	(%rax), %rax	# *operands_2(D), D.30387
	movq	%rdx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30390
	jne	.L2204	#,
	.loc 1 8980 0
	movq	-56(%rbp), %rax	# operands, tmp149
	addq	$8, %rax	#, D.30386
	movq	(%rax), %rdx	# *_34, D.30387
	movq	-56(%rbp), %rax	# operands, tmp150
	movq	(%rax), %rax	# *operands_2(D), D.30387
	movq	%rdx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	emit_move_insn	#
.L2204:
	.loc 1 8981 0
	movl	-36(%rbp), %eax	# count, tmp151
	cltq
	movq	%rax, %rsi	# D.30389,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30387
	movq	-16(%rbp), %rcx	# high, D.30387
	movq	-32(%rbp), %rax	# low, D.30387
	movq	%rcx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	gen_x86_shrd_1	#
	movq	%rax, %rdi	# D.30387,
	call	emit_insn	#
	.loc 1 8982 0
	movl	-36(%rbp), %eax	# count, tmp152
	cltq
	movq	%rax, %rsi	# D.30389,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30387
	movq	-16(%rbp), %rcx	# high, D.30387
	movq	-16(%rbp), %rax	# high, D.30387
	movq	%rcx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	gen_ashrsi3	#
	movq	%rax, %rdi	# D.30387,
	call	emit_insn	#
	jmp	.L2197	#
.L2198:
	.loc 1 8987 0
	movq	-56(%rbp), %rax	# operands, tmp153
	addq	$8, %rax	#, D.30386
	movq	(%rax), %rdx	# *_47, D.30387
	movq	-56(%rbp), %rax	# operands, tmp154
	movq	(%rax), %rax	# *operands_2(D), D.30387
	movq	%rdx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30390
	jne	.L2206	#,
	.loc 1 8988 0
	movq	-56(%rbp), %rax	# operands, tmp155
	addq	$8, %rax	#, D.30386
	movq	(%rax), %rdx	# *_51, D.30387
	movq	-56(%rbp), %rax	# operands, tmp156
	movq	(%rax), %rax	# *operands_2(D), D.30387
	movq	%rdx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	emit_move_insn	#
.L2206:
	.loc 1 8990 0
	leaq	-16(%rbp), %rcx	#, tmp157
	leaq	-32(%rbp), %rdx	#, tmp158
	movq	-56(%rbp), %rax	# operands, tmp159
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp159,
	call	split_di	#
	.loc 1 8992 0
	movq	-56(%rbp), %rax	# operands, tmp160
	addq	$16, %rax	#, D.30386
	movq	(%rax), %rdx	# *_54, D.30387
	movq	-16(%rbp), %rcx	# high, D.30387
	movq	-32(%rbp), %rax	# low, D.30387
	movq	%rcx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	gen_x86_shrd_1	#
	movq	%rax, %rdi	# D.30387,
	call	emit_insn	#
	.loc 1 8993 0
	movq	-56(%rbp), %rax	# operands, tmp161
	addq	$16, %rax	#, D.30386
	movq	(%rax), %rdx	# *_59, D.30387
	movq	-16(%rbp), %rcx	# high, D.30387
	movq	-16(%rbp), %rax	# high, D.30387
	movq	%rcx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	gen_ashrsi3	#
	movq	%rax, %rdi	# D.30387,
	call	emit_insn	#
	.loc 1 8995 0
	movl	$104, %edx	#, x86_cmove.1100
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.1101
	movl	%eax, %ecx	# ix86_arch.1101, tmp170
	sarl	%cl, %edx	# tmp170, D.30390
	movl	%edx, %eax	# D.30390, D.30390
	andl	$1, %eax	#, D.30390
	testl	%eax, %eax	# D.30390
	jne	.L2207	#,
	.loc 1 8995 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1102
	andl	$327680, %eax	#, D.30390
	testl	%eax, %eax	# D.30390
	je	.L2208	#,
.L2207:
	.loc 1 8995 0 discriminator 1
	movl	no_new_pseudos(%rip), %eax	# no_new_pseudos, no_new_pseudos.1103
	testl	%eax, %eax	# no_new_pseudos.1103
	je	.L2209	#,
	cmpq	$0, -64(%rbp)	#, scratch
	je	.L2208	#,
.L2209:
	.loc 1 8997 0 is_stmt 1
	movl	no_new_pseudos(%rip), %eax	# no_new_pseudos, no_new_pseudos.1104
	testl	%eax, %eax	# no_new_pseudos.1104
	jne	.L2210	#,
	.loc 1 8998 0
	movl	$4, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -64(%rbp)	# tmp162, scratch
.L2210:
	.loc 1 8999 0
	movq	-16(%rbp), %rdx	# high, D.30387
	movq	-64(%rbp), %rax	# scratch, tmp163
	movq	%rdx, %rsi	# D.30387,
	movq	%rax, %rdi	# tmp163,
	call	emit_move_insn	#
	.loc 1 9000 0
	movl	$31, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30387
	movq	-64(%rbp), %rcx	# scratch, tmp164
	movq	-64(%rbp), %rax	# scratch, tmp165
	movq	%rcx, %rsi	# tmp164,
	movq	%rax, %rdi	# tmp165,
	call	gen_ashrsi3	#
	movq	%rax, %rdi	# D.30387,
	call	emit_insn	#
	.loc 1 9001 0
	movq	-56(%rbp), %rax	# operands, tmp166
	addq	$16, %rax	#, D.30386
	movq	(%rax), %rdx	# *_77, D.30387
	movq	-16(%rbp), %rsi	# high, D.30387
	movq	-32(%rbp), %rax	# low, D.30387
	movq	-64(%rbp), %rcx	# scratch, tmp167
	movq	%rax, %rdi	# D.30387,
	call	gen_x86_shift_adj_1	#
	movq	%rax, %rdi	# D.30387,
	call	emit_insn	#
	jmp	.L2197	#
.L2208:
	.loc 1 9005 0
	movq	-56(%rbp), %rax	# operands, tmp168
	addq	$16, %rax	#, D.30386
	movq	(%rax), %rdx	# *_82, D.30387
	movq	-16(%rbp), %rcx	# high, D.30387
	movq	-32(%rbp), %rax	# low, D.30387
	movq	%rcx, %rsi	# D.30387,
	movq	%rax, %rdi	# D.30387,
	call	gen_x86_shift_adj_3	#
	movq	%rax, %rdi	# D.30387,
	call	emit_insn	#
.L2197:
	.loc 1 9007 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE137:
	.size	ix86_split_ashrdi, .-ix86_split_ashrdi
	.globl	ix86_split_lshrdi
	.type	ix86_split_lshrdi, @function
ix86_split_lshrdi:
.LFB138:
	.loc 1 9012 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# operands, operands
	movq	%rsi, -64(%rbp)	# scratch, scratch
	.loc 1 9016 0
	movq	-56(%rbp), %rax	# operands, tmp130
	addq	$16, %rax	#, D.30391
	movq	(%rax), %rax	# *_3, D.30392
	movzwl	(%rax), %eax	# _4->code, D.30393
	cmpw	$54, %ax	#, D.30393
	jne	.L2212	#,
	.loc 1 9018 0
	leaq	-16(%rbp), %rcx	#, tmp131
	leaq	-32(%rbp), %rdx	#, tmp132
	movq	-56(%rbp), %rax	# operands, tmp133
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp133,
	call	split_di	#
	.loc 1 9019 0
	movq	-56(%rbp), %rax	# operands, tmp134
	addq	$16, %rax	#, D.30391
	movq	(%rax), %rax	# *_6, D.30392
	movq	8(%rax), %rax	# _7->fld[0].rtwint, D.30394
	andl	$63, %eax	#, tmp135
	movl	%eax, -36(%rbp)	# tmp135, count
	.loc 1 9021 0
	cmpl	$31, -36(%rbp)	#, count
	jle	.L2213	#,
	.loc 1 9023 0
	movq	-8(%rbp), %rdx	# high, D.30392
	movq	-32(%rbp), %rax	# low, D.30392
	movq	%rdx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	emit_move_insn	#
	.loc 1 9024 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30392
	movq	-16(%rbp), %rax	# high, D.30392
	movq	%rdx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	emit_move_insn	#
	.loc 1 9026 0
	cmpl	$32, -36(%rbp)	#, count
	jle	.L2211	#,
	.loc 1 9027 0
	movl	-36(%rbp), %eax	# count, tmp136
	subl	$32, %eax	#, D.30395
	cltq
	movq	%rax, %rsi	# D.30394,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30392
	movq	-32(%rbp), %rcx	# low, D.30392
	movq	-32(%rbp), %rax	# low, D.30392
	movq	%rcx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	gen_lshrsi3	#
	movq	%rax, %rdi	# D.30392,
	call	emit_insn	#
	jmp	.L2211	#
.L2213:
	.loc 1 9031 0
	movq	-56(%rbp), %rax	# operands, tmp137
	addq	$8, %rax	#, D.30391
	movq	(%rax), %rdx	# *_21, D.30392
	movq	-56(%rbp), %rax	# operands, tmp138
	movq	(%rax), %rax	# *operands_2(D), D.30392
	movq	%rdx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30395
	jne	.L2216	#,
	.loc 1 9032 0
	movq	-56(%rbp), %rax	# operands, tmp139
	addq	$8, %rax	#, D.30391
	movq	(%rax), %rdx	# *_25, D.30392
	movq	-56(%rbp), %rax	# operands, tmp140
	movq	(%rax), %rax	# *operands_2(D), D.30392
	movq	%rdx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	emit_move_insn	#
.L2216:
	.loc 1 9033 0
	movl	-36(%rbp), %eax	# count, tmp141
	cltq
	movq	%rax, %rsi	# D.30394,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30392
	movq	-16(%rbp), %rcx	# high, D.30392
	movq	-32(%rbp), %rax	# low, D.30392
	movq	%rcx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	gen_x86_shrd_1	#
	movq	%rax, %rdi	# D.30392,
	call	emit_insn	#
	.loc 1 9034 0
	movl	-36(%rbp), %eax	# count, tmp142
	cltq
	movq	%rax, %rsi	# D.30394,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30392
	movq	-16(%rbp), %rcx	# high, D.30392
	movq	-16(%rbp), %rax	# high, D.30392
	movq	%rcx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	gen_lshrsi3	#
	movq	%rax, %rdi	# D.30392,
	call	emit_insn	#
	jmp	.L2211	#
.L2212:
	.loc 1 9039 0
	movq	-56(%rbp), %rax	# operands, tmp143
	addq	$8, %rax	#, D.30391
	movq	(%rax), %rdx	# *_38, D.30392
	movq	-56(%rbp), %rax	# operands, tmp144
	movq	(%rax), %rax	# *operands_2(D), D.30392
	movq	%rdx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30395
	jne	.L2218	#,
	.loc 1 9040 0
	movq	-56(%rbp), %rax	# operands, tmp145
	addq	$8, %rax	#, D.30391
	movq	(%rax), %rdx	# *_42, D.30392
	movq	-56(%rbp), %rax	# operands, tmp146
	movq	(%rax), %rax	# *operands_2(D), D.30392
	movq	%rdx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	emit_move_insn	#
.L2218:
	.loc 1 9042 0
	leaq	-16(%rbp), %rcx	#, tmp147
	leaq	-32(%rbp), %rdx	#, tmp148
	movq	-56(%rbp), %rax	# operands, tmp149
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp149,
	call	split_di	#
	.loc 1 9044 0
	movq	-56(%rbp), %rax	# operands, tmp150
	addq	$16, %rax	#, D.30391
	movq	(%rax), %rdx	# *_45, D.30392
	movq	-16(%rbp), %rcx	# high, D.30392
	movq	-32(%rbp), %rax	# low, D.30392
	movq	%rcx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	gen_x86_shrd_1	#
	movq	%rax, %rdi	# D.30392,
	call	emit_insn	#
	.loc 1 9045 0
	movq	-56(%rbp), %rax	# operands, tmp151
	addq	$16, %rax	#, D.30391
	movq	(%rax), %rdx	# *_50, D.30392
	movq	-16(%rbp), %rcx	# high, D.30392
	movq	-16(%rbp), %rax	# high, D.30392
	movq	%rcx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	gen_lshrsi3	#
	movq	%rax, %rdi	# D.30392,
	call	emit_insn	#
	.loc 1 9048 0
	movl	$104, %edx	#, x86_cmove.1105
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.1106
	movl	%eax, %ecx	# ix86_arch.1106, tmp158
	sarl	%cl, %edx	# tmp158, D.30395
	movl	%edx, %eax	# D.30395, D.30395
	andl	$1, %eax	#, D.30395
	testl	%eax, %eax	# D.30395
	jne	.L2219	#,
	.loc 1 9048 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1107
	andl	$327680, %eax	#, D.30395
	testl	%eax, %eax	# D.30395
	je	.L2220	#,
.L2219:
	.loc 1 9048 0 discriminator 1
	movl	no_new_pseudos(%rip), %eax	# no_new_pseudos, no_new_pseudos.1108
	testl	%eax, %eax	# no_new_pseudos.1108
	je	.L2221	#,
	cmpq	$0, -64(%rbp)	#, scratch
	je	.L2220	#,
.L2221:
	.loc 1 9050 0 is_stmt 1
	movl	no_new_pseudos(%rip), %eax	# no_new_pseudos, no_new_pseudos.1109
	testl	%eax, %eax	# no_new_pseudos.1109
	jne	.L2222	#,
	.loc 1 9051 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30392
	movq	%rax, %rsi	# D.30392,
	movl	$4, %edi	#,
	call	force_reg	#
	movq	%rax, -64(%rbp)	# tmp152, scratch
	jmp	.L2223	#
.L2222:
	.loc 1 9053 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30392
	movq	-64(%rbp), %rax	# scratch, tmp153
	movq	%rdx, %rsi	# D.30392,
	movq	%rax, %rdi	# tmp153,
	call	emit_move_insn	#
.L2223:
	.loc 1 9055 0
	movq	-56(%rbp), %rax	# operands, tmp154
	addq	$16, %rax	#, D.30391
	movq	(%rax), %rdx	# *_67, D.30392
	movq	-16(%rbp), %rsi	# high, D.30392
	movq	-32(%rbp), %rax	# low, D.30392
	movq	-64(%rbp), %rcx	# scratch, tmp155
	movq	%rax, %rdi	# D.30392,
	call	gen_x86_shift_adj_1	#
	movq	%rax, %rdi	# D.30392,
	call	emit_insn	#
	jmp	.L2211	#
.L2220:
	.loc 1 9059 0
	movq	-56(%rbp), %rax	# operands, tmp156
	addq	$16, %rax	#, D.30391
	movq	(%rax), %rdx	# *_72, D.30392
	movq	-16(%rbp), %rcx	# high, D.30392
	movq	-32(%rbp), %rax	# low, D.30392
	movq	%rcx, %rsi	# D.30392,
	movq	%rax, %rdi	# D.30392,
	call	gen_x86_shift_adj_2	#
	movq	%rax, %rdi	# D.30392,
	call	emit_insn	#
.L2211:
	.loc 1 9061 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE138:
	.size	ix86_split_lshrdi, .-ix86_split_lshrdi
	.type	ix86_expand_aligntest, @function
ix86_expand_aligntest:
.LFB139:
	.loc 1 9069 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# variable, variable
	movl	%esi, -28(%rbp)	# value, value
	.loc 1 9070 0
	call	gen_label_rtx	#
	movq	%rax, -16(%rbp)	# tmp73, label
	.loc 1 9071 0
	movq	-24(%rbp), %rax	# variable, tmp74
	movzbl	2(%rax), %eax	# variable_2(D)->mode, D.30396
	movzbl	%al, %eax	# D.30396, D.30397
	movl	%eax, %edi	# D.30397,
	call	gen_reg_rtx	#
	movq	%rax, -8(%rbp)	# tmp75, tmpcount
	.loc 1 9072 0
	movq	-24(%rbp), %rax	# variable, tmp76
	movzbl	2(%rax), %eax	# variable_2(D)->mode, D.30396
	cmpb	$5, %al	#, D.30396
	jne	.L2225	#,
	.loc 1 9073 0
	movl	-28(%rbp), %eax	# value, tmp77
	cltq
	movq	%rax, %rsi	# D.30398,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30399
	movq	-24(%rbp), %rcx	# variable, tmp78
	movq	-8(%rbp), %rax	# tmpcount, tmp79
	movq	%rcx, %rsi	# tmp78,
	movq	%rax, %rdi	# tmp79,
	call	gen_anddi3	#
	movq	%rax, %rdi	# D.30399,
	call	emit_insn	#
	jmp	.L2226	#
.L2225:
	.loc 1 9075 0
	movl	-28(%rbp), %eax	# value, tmp80
	cltq
	movq	%rax, %rsi	# D.30398,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30399
	movq	-24(%rbp), %rcx	# variable, tmp81
	movq	-8(%rbp), %rax	# tmpcount, tmp82
	movq	%rcx, %rsi	# tmp81,
	movq	%rax, %rdi	# tmp82,
	call	gen_andsi3	#
	movq	%rax, %rdi	# D.30399,
	call	emit_insn	#
.L2226:
	.loc 1 9076 0
	movq	-24(%rbp), %rax	# variable, tmp83
	movzbl	2(%rax), %eax	# variable_2(D)->mode, D.30396
	movzbl	%al, %ecx	# D.30396, D.30397
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.30399
	movq	-8(%rbp), %rax	# tmpcount, tmp84
	movq	-16(%rbp), %rdx	# label, tmp85
	movq	%rdx, (%rsp)	# tmp85,
	movl	$1, %r9d	#,
	movl	%ecx, %r8d	# D.30397,
	movl	$0, %ecx	#,
	movl	$103, %edx	#,
	movq	%rax, %rdi	# tmp84,
	call	emit_cmp_and_jump_insns	#
	.loc 1 9078 0
	movq	-16(%rbp), %rax	# label, D.30400
	.loc 1 9079 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE139:
	.size	ix86_expand_aligntest, .-ix86_expand_aligntest
	.type	ix86_adjust_counter, @function
ix86_adjust_counter:
.LFB140:
	.loc 1 9086 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# countreg, countreg
	movq	%rsi, -16(%rbp)	# value, value
	.loc 1 9087 0
	movq	-8(%rbp), %rax	# countreg, tmp66
	movzbl	2(%rax), %eax	# countreg_1(D)->mode, D.30401
	cmpb	$5, %al	#, D.30401
	jne	.L2229	#,
	.loc 1 9088 0
	movq	-16(%rbp), %rax	# value, tmp67
	negq	%rax	# D.30402
	movq	%rax, %rsi	# D.30402,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30403
	movq	-8(%rbp), %rcx	# countreg, tmp68
	movq	-8(%rbp), %rax	# countreg, tmp69
	movq	%rcx, %rsi	# tmp68,
	movq	%rax, %rdi	# tmp69,
	call	gen_adddi3	#
	movq	%rax, %rdi	# D.30403,
	call	emit_insn	#
	jmp	.L2228	#
.L2229:
	.loc 1 9090 0
	movq	-16(%rbp), %rax	# value, tmp70
	negq	%rax	# D.30402
	movq	%rax, %rsi	# D.30402,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30403
	movq	-8(%rbp), %rcx	# countreg, tmp71
	movq	-8(%rbp), %rax	# countreg, tmp72
	movq	%rcx, %rsi	# tmp71,
	movq	%rax, %rdi	# tmp72,
	call	gen_addsi3	#
	movq	%rax, %rdi	# D.30403,
	call	emit_insn	#
.L2228:
	.loc 1 9091 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE140:
	.size	ix86_adjust_counter, .-ix86_adjust_counter
	.globl	ix86_zero_extend_to_Pmode
	.type	ix86_zero_extend_to_Pmode, @function
ix86_zero_extend_to_Pmode:
.LFB141:
	.loc 1 9097 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# exp, exp
	.loc 1 9099 0
	movq	-24(%rbp), %rax	# exp, tmp77
	movzbl	2(%rax), %eax	# exp_6(D)->mode, D.30405
	testb	%al, %al	# D.30405
	jne	.L2232	#,
	.loc 1 9100 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1111
	andl	$33554432, %eax	#, D.30406
	testl	%eax, %eax	# D.30406
	je	.L2233	#,
	.loc 1 9100 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1110
	jmp	.L2234	#
.L2233:
	.loc 1 9100 0 discriminator 2
	movl	$4, %eax	#, iftmp.1110
.L2234:
	.loc 1 9100 0 discriminator 3
	movq	-24(%rbp), %rdx	# exp, tmp78
	movq	%rdx, %rsi	# tmp78,
	movl	%eax, %edi	# iftmp.1110,
	call	force_reg	#
	jmp	.L2235	#
.L2232:
	.loc 1 9101 0 is_stmt 1
	movq	-24(%rbp), %rax	# exp, tmp79
	movzbl	2(%rax), %eax	# exp_6(D)->mode, D.30405
	movzbl	%al, %edx	# D.30405, D.30407
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1113
	andl	$33554432, %eax	#, D.30406
	testl	%eax, %eax	# D.30406
	je	.L2236	#,
	.loc 1 9101 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1112
	jmp	.L2237	#
.L2236:
	.loc 1 9101 0 discriminator 2
	movl	$4, %eax	#, iftmp.1112
.L2237:
	.loc 1 9101 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.1112, D.30407
	jne	.L2238	#,
	.loc 1 9102 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1115
	andl	$33554432, %eax	#, D.30406
	testl	%eax, %eax	# D.30406
	je	.L2239	#,
	.loc 1 9102 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1114
	jmp	.L2240	#
.L2239:
	.loc 1 9102 0 discriminator 2
	movl	$4, %eax	#, iftmp.1114
.L2240:
	.loc 1 9102 0 discriminator 3
	movq	-24(%rbp), %rdx	# exp, tmp80
	movq	%rdx, %rsi	# tmp80,
	movl	%eax, %edi	# iftmp.1114,
	call	copy_to_mode_reg	#
	jmp	.L2235	#
.L2238:
	.loc 1 9103 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1117
	andl	$33554432, %eax	#, D.30406
	testl	%eax, %eax	# D.30406
	je	.L2241	#,
	.loc 1 9103 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1116
	jmp	.L2242	#
.L2241:
	.loc 1 9103 0 discriminator 2
	movl	$4, %eax	#, iftmp.1116
.L2242:
	.loc 1 9103 0 discriminator 3
	movl	%eax, %edi	# iftmp.1116,
	call	gen_reg_rtx	#
	movq	%rax, -8(%rbp)	# tmp81, r
	.loc 1 9104 0 is_stmt 1 discriminator 3
	movq	-24(%rbp), %rdx	# exp, tmp82
	movq	-8(%rbp), %rax	# r, tmp83
	movq	%rdx, %rsi	# tmp82,
	movq	%rax, %rdi	# tmp83,
	call	gen_zero_extendsidi2	#
	movq	%rax, %rdi	# D.30408,
	call	emit_insn	#
	.loc 1 9105 0 discriminator 3
	movq	-8(%rbp), %rax	# r, D.30404
.L2235:
	.loc 1 9106 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE141:
	.size	ix86_zero_extend_to_Pmode, .-ix86_zero_extend_to_Pmode
	.globl	ix86_expand_movstr
	.type	ix86_expand_movstr, @function
ix86_expand_movstr:
.LFB142:
	.loc 1 9113 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$184, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -152(%rbp)	# dst, dst
	movq	%rsi, -160(%rbp)	# src, src
	movq	%rdx, -168(%rbp)	# count_exp, count_exp
	movq	%rcx, -176(%rbp)	# align_exp, align_exp
	.loc 1 9116 0
	movq	$0, -128(%rbp)	#, align
	.loc 1 9117 0
	movq	$0, -120(%rbp)	#, count
	.loc 1 9120 0
	call	start_sequence	#
	.loc 1 9122 0
	movq	-176(%rbp), %rax	# align_exp, tmp172
	movzwl	(%rax), %eax	# align_exp_19(D)->code, D.30410
	cmpw	$54, %ax	#, D.30410
	jne	.L2244	#,
	.loc 1 9123 0
	movq	-176(%rbp), %rax	# align_exp, tmp173
	movq	8(%rax), %rax	# align_exp_19(D)->fld[0].rtwint, tmp174
	movq	%rax, -128(%rbp)	# tmp174, align
.L2244:
	.loc 1 9126 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1118
	andl	$512, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2245	#,
	.loc 1 9127 0
	movq	$64, -128(%rbp)	#, align
.L2245:
	.loc 1 9129 0
	movq	-168(%rbp), %rax	# count_exp, tmp175
	movzwl	(%rax), %eax	# count_exp_25(D)->code, D.30410
	cmpw	$54, %ax	#, D.30410
	jne	.L2246	#,
	.loc 1 9130 0
	movq	-168(%rbp), %rax	# count_exp, tmp176
	movq	8(%rax), %rax	# count_exp_25(D)->fld[0].rtwint, D.30411
	movq	%rax, -120(%rbp)	# D.30411, count
.L2246:
	.loc 1 9135 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1119
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2247	#,
	.loc 1 9135 0 is_stmt 0 discriminator 1
	movq	-168(%rbp), %rax	# count_exp, tmp177
	movzbl	2(%rax), %eax	# count_exp_25(D)->mode, D.30412
	cmpb	$4, %al	#, D.30412
	je	.L2247	#,
	.loc 1 9136 0 is_stmt 1
	movq	-168(%rbp), %rax	# count_exp, tmp178
	movq	%rax, %rdi	# tmp178,
	call	x86_64_zero_extended_value	#
	testl	%eax, %eax	# D.30409
	je	.L2248	#,
.L2247:
	.loc 1 9137 0
	movl	$4, -140(%rbp)	#, counter_mode
	jmp	.L2249	#
.L2248:
	.loc 1 9139 0
	movl	$5, -140(%rbp)	#, counter_mode
.L2249:
	.loc 1 9141 0
	cmpl	$4, -140(%rbp)	#, counter_mode
	je	.L2250	#,
	.loc 1 9141 0 is_stmt 0 discriminator 1
	cmpl	$5, -140(%rbp)	#, counter_mode
	je	.L2250	#,
	.loc 1 9142 0 is_stmt 1
	movl	$__FUNCTION__.16210, %edx	#,
	movl	$9142, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2250:
	.loc 1 9144 0
	movq	-152(%rbp), %rax	# dst, tmp179
	movq	8(%rax), %rdx	# dst_35(D)->fld[0].rtx, D.30413
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1121
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2251	#,
	.loc 1 9144 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1120
	jmp	.L2252	#
.L2251:
	.loc 1 9144 0 discriminator 2
	movl	$4, %eax	#, iftmp.1120
.L2252:
	.loc 1 9144 0 discriminator 3
	movq	%rdx, %rsi	# D.30413,
	movl	%eax, %edi	# iftmp.1120,
	call	copy_to_mode_reg	#
	movq	%rax, -104(%rbp)	# tmp180, destreg
	.loc 1 9145 0 is_stmt 1 discriminator 3
	movq	-160(%rbp), %rax	# src, tmp181
	movq	8(%rax), %rdx	# src_42(D)->fld[0].rtx, D.30413
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1123
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2253	#,
	.loc 1 9145 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1122
	jmp	.L2254	#
.L2253:
	.loc 1 9145 0 discriminator 2
	movl	$4, %eax	#, iftmp.1122
.L2254:
	.loc 1 9145 0 discriminator 3
	movq	%rdx, %rsi	# D.30413,
	movl	%eax, %edi	# iftmp.1122,
	call	copy_to_mode_reg	#
	movq	%rax, -96(%rbp)	# tmp182, srcreg
	.loc 1 9147 0 is_stmt 1 discriminator 3
	call	gen_cld	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9152 0 discriminator 3
	movl	optimize(%rip), %eax	# optimize, optimize.1124
	testl	%eax, %eax	# optimize.1124
	je	.L2255	#,
	.loc 1 9152 0 is_stmt 0 discriminator 2
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.1125
	testl	%eax, %eax	# optimize_size.1125
	je	.L2256	#,
.L2255:
	.loc 1 9152 0 discriminator 1
	cmpq	$0, -120(%rbp)	#, count
	je	.L2257	#,
	movq	-120(%rbp), %rax	# count, tmp183
	andl	$3, %eax	#, D.30414
	testq	%rax, %rax	# D.30414
	je	.L2256	#,
.L2257:
	.loc 1 9154 0 is_stmt 1
	movq	-168(%rbp), %rax	# count_exp, tmp184
	movq	%rax, %rdi	# tmp184,
	call	ix86_zero_extend_to_Pmode	#
	movq	%rax, -88(%rbp)	# tmp185, countreg
	.loc 1 9155 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1126
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2258	#,
	.loc 1 9156 0
	movq	-88(%rbp), %r8	# countreg, tmp186
	movq	-96(%rbp), %rdi	# srcreg, tmp187
	movq	-104(%rbp), %rcx	# destreg, tmp188
	movq	-88(%rbp), %rdx	# countreg, tmp189
	movq	-96(%rbp), %rsi	# srcreg, tmp190
	movq	-104(%rbp), %rax	# destreg, tmp191
	movq	%r8, %r9	# tmp186,
	movq	%rdi, %r8	# tmp187,
	movq	%rax, %rdi	# tmp191,
	call	gen_rep_movqi_rex64	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9155 0
	jmp	.L2260	#
.L2258:
	.loc 1 9159 0
	movq	-88(%rbp), %r8	# countreg, tmp192
	movq	-96(%rbp), %rdi	# srcreg, tmp193
	movq	-104(%rbp), %rcx	# destreg, tmp194
	movq	-88(%rbp), %rdx	# countreg, tmp195
	movq	-96(%rbp), %rsi	# srcreg, tmp196
	movq	-104(%rbp), %rax	# destreg, tmp197
	movq	%r8, %r9	# tmp192,
	movq	%rdi, %r8	# tmp193,
	movq	%rax, %rdi	# tmp197,
	call	gen_rep_movqi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9155 0
	jmp	.L2260	#
.L2256:
	.loc 1 9167 0
	cmpq	$0, -120(%rbp)	#, count
	je	.L2261	#,
	.loc 1 9168 0
	cmpq	$7, -128(%rbp)	#, align
	jg	.L2262	#,
	.loc 1 9169 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1127
	cmpl	$3, %eax	#, ix86_cpu.1127
	je	.L2263	#,
	.loc 1 9169 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1128
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	jne	.L2263	#,
	cmpq	$3, -128(%rbp)	#, align
	jg	.L2262	#,
.L2263:
	.loc 1 9170 0 is_stmt 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.1129
	testl	%eax, %eax	# optimize_size.1129
	jne	.L2262	#,
	.loc 1 9170 0 is_stmt 0 discriminator 1
	cmpq	$63, -120(%rbp)	#, count
	ja	.L2261	#,
.L2262:
.LBB98:
	.loc 1 9172 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1131
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2264	#,
	.loc 1 9172 0 is_stmt 0 discriminator 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.1132
	testl	%eax, %eax	# optimize_size.1132
	jne	.L2264	#,
	movl	$8, %eax	#, iftmp.1130
	jmp	.L2265	#
.L2264:
	.loc 1 9172 0 discriminator 2
	movl	$4, %eax	#, iftmp.1130
.L2265:
	.loc 1 9172 0 discriminator 3
	movl	%eax, -136(%rbp)	# iftmp.1130, size
	.loc 1 9173 0 is_stmt 1 discriminator 3
	movl	-136(%rbp), %eax	# size, tmp198
	negl	%eax	# D.30409
	cltq
	andq	-120(%rbp), %rax	# count, D.30414
	testq	%rax, %rax	# D.30414
	je	.L2266	#,
	.loc 1 9176 0
	cmpl	$4, -136(%rbp)	#, size
	jne	.L2267	#,
	.loc 1 9176 0 is_stmt 0 discriminator 1
	movl	$2, %eax	#, iftmp.1133
	jmp	.L2268	#
.L2267:
	.loc 1 9176 0 discriminator 2
	movl	$3, %eax	#, iftmp.1133
.L2268:
	.loc 1 9176 0 discriminator 3
	movq	-120(%rbp), %rdx	# count, tmp199
	movl	%eax, %ecx	# iftmp.1133, tmp317
	shrq	%cl, %rdx	# tmp317, D.30414
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1135
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2269	#,
	.loc 1 9176 0 discriminator 1
	movq	$-1, %rax	#, iftmp.1134
	jmp	.L2270	#
.L2269:
	.loc 1 9176 0 discriminator 2
	movl	$1073741823, %eax	#, iftmp.1134
.L2270:
	.loc 1 9176 0 discriminator 3
	andq	%rdx, %rax	# D.30414, D.30414
	.loc 1 9175 0 is_stmt 1 discriminator 3
	movq	%rax, %rsi	# D.30411,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30413
	movl	-140(%rbp), %eax	# counter_mode, tmp200
	movq	%rdx, %rsi	# D.30413,
	movl	%eax, %edi	# tmp200,
	call	copy_to_mode_reg	#
	movq	%rax, -88(%rbp)	# tmp201, countreg
	.loc 1 9178 0 discriminator 3
	movq	-88(%rbp), %rax	# countreg, tmp202
	movq	%rax, %rdi	# tmp202,
	call	ix86_zero_extend_to_Pmode	#
	movq	%rax, -88(%rbp)	# tmp203, countreg
	.loc 1 9179 0 discriminator 3
	cmpl	$4, -136(%rbp)	#, size
	jne	.L2271	#,
	.loc 1 9181 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1136
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2272	#,
	.loc 1 9182 0
	movq	-88(%rbp), %r8	# countreg, tmp204
	movq	-96(%rbp), %rdi	# srcreg, tmp205
	movq	-104(%rbp), %rcx	# destreg, tmp206
	movq	-88(%rbp), %rdx	# countreg, tmp207
	movq	-96(%rbp), %rsi	# srcreg, tmp208
	movq	-104(%rbp), %rax	# destreg, tmp209
	movq	%r8, %r9	# tmp204,
	movq	%rdi, %r8	# tmp205,
	movq	%rax, %rdi	# tmp209,
	call	gen_rep_movsi_rex64	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	jmp	.L2266	#
.L2272:
	.loc 1 9185 0
	movq	-88(%rbp), %r8	# countreg, tmp210
	movq	-96(%rbp), %rdi	# srcreg, tmp211
	movq	-104(%rbp), %rcx	# destreg, tmp212
	movq	-88(%rbp), %rdx	# countreg, tmp213
	movq	-96(%rbp), %rsi	# srcreg, tmp214
	movq	-104(%rbp), %rax	# destreg, tmp215
	movq	%r8, %r9	# tmp210,
	movq	%rdi, %r8	# tmp211,
	movq	%rax, %rdi	# tmp215,
	call	gen_rep_movsi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	jmp	.L2266	#
.L2271:
	.loc 1 9189 0
	movq	-88(%rbp), %r8	# countreg, tmp216
	movq	-96(%rbp), %rdi	# srcreg, tmp217
	movq	-104(%rbp), %rcx	# destreg, tmp218
	movq	-88(%rbp), %rdx	# countreg, tmp219
	movq	-96(%rbp), %rsi	# srcreg, tmp220
	movq	-104(%rbp), %rax	# destreg, tmp221
	movq	%r8, %r9	# tmp216,
	movq	%rdi, %r8	# tmp217,
	movq	%rax, %rdi	# tmp221,
	call	gen_rep_movdi_rex64	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
.L2266:
	.loc 1 9192 0
	cmpl	$8, -136(%rbp)	#, size
	jne	.L2274	#,
	.loc 1 9192 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# count, tmp222
	andl	$4, %eax	#, D.30414
	testq	%rax, %rax	# D.30414
	je	.L2274	#,
	.loc 1 9193 0 is_stmt 1
	movq	-96(%rbp), %rdx	# srcreg, tmp223
	movq	-104(%rbp), %rax	# destreg, tmp224
	movq	%rdx, %rsi	# tmp223,
	movq	%rax, %rdi	# tmp224,
	call	gen_strmovsi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
.L2274:
	.loc 1 9194 0
	movq	-120(%rbp), %rax	# count, tmp225
	andl	$2, %eax	#, D.30414
	testq	%rax, %rax	# D.30414
	je	.L2275	#,
	.loc 1 9195 0
	movq	-96(%rbp), %rdx	# srcreg, tmp226
	movq	-104(%rbp), %rax	# destreg, tmp227
	movq	%rdx, %rsi	# tmp226,
	movq	%rax, %rdi	# tmp227,
	call	gen_strmovhi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
.L2275:
	.loc 1 9196 0
	movq	-120(%rbp), %rax	# count, tmp228
	andl	$1, %eax	#, D.30414
	testq	%rax, %rax	# D.30414
	je	.L2276	#,
	.loc 1 9197 0
	movq	-96(%rbp), %rdx	# srcreg, tmp229
	movq	-104(%rbp), %rax	# destreg, tmp230
	movq	%rdx, %rsi	# tmp229,
	movq	%rax, %rdi	# tmp230,
	call	gen_strmovqi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
.LBE98:
	.loc 1 9171 0
	jmp	.L2260	#
.L2276:
	jmp	.L2260	#
.L2261:
.LBB99:
	.loc 1 9207 0
	movq	$0, -112(%rbp)	#, label
	.loc 1 9208 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1138
	.loc 1 9210 0
	cmpl	$3, %eax	#, ix86_cpu.1138
	jne	.L2277	#,
	.loc 1 9209 0
	cmpq	$0, -120(%rbp)	#, count
	je	.L2278	#,
	.loc 1 9209 0 is_stmt 0 discriminator 1
	cmpq	$259, -120(%rbp)	#, count
	ja	.L2278	#,
.L2277:
	.loc 1 9210 0 is_stmt 1 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1140
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2279	#,
	movl	$8, %eax	#, iftmp.1139
	jmp	.L2280	#
.L2279:
	.loc 1 9210 0 is_stmt 0 discriminator 2
	movl	$4, %eax	#, iftmp.1139
.L2280:
	.loc 1 9210 0 discriminator 3
	jmp	.L2281	#
.L2278:
	.loc 1 9210 0
	movl	$8, %eax	#, iftmp.1137
.L2281:
	.loc 1 9208 0 is_stmt 1
	movl	%eax, -132(%rbp)	# iftmp.1137, desired_alignment
	.loc 1 9215 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1141
	andl	$1024, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	jne	.L2282	#,
	.loc 1 9215 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1143
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2283	#,
	movl	$8, %eax	#, iftmp.1142
	jmp	.L2284	#
.L2283:
	.loc 1 9215 0 discriminator 2
	movl	$4, %eax	#, iftmp.1142
.L2284:
	.loc 1 9215 0 discriminator 3
	cmpq	-128(%rbp), %rax	# align, iftmp.1142
	jle	.L2282	#,
	.loc 1 9217 0 is_stmt 1
	call	end_sequence	#
	.loc 1 9218 0
	movl	$0, %eax	#, D.30409
	jmp	.L2285	#
.L2282:
	.loc 1 9221 0
	movl	$65, %edx	#, x86_single_stringop.1144
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1145
	movl	%eax, %ecx	# ix86_cpu.1146, tmp319
	sarl	%cl, %edx	# tmp319, D.30409
	movl	%edx, %eax	# D.30409, D.30409
	andl	$1, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2286	#,
	.loc 1 9222 0
	call	gen_cld	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
.L2286:
	.loc 1 9224 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1148
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2287	#,
	.loc 1 9224 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1147
	jmp	.L2288	#
.L2287:
	.loc 1 9224 0 discriminator 2
	movl	$4, %eax	#, iftmp.1147
.L2288:
	.loc 1 9224 0 discriminator 3
	movl	%eax, %edi	# iftmp.1147,
	call	gen_reg_rtx	#
	movq	%rax, -80(%rbp)	# tmp231, countreg2
	.loc 1 9225 0 is_stmt 1 discriminator 3
	movq	-168(%rbp), %rdx	# count_exp, tmp232
	movl	-140(%rbp), %eax	# counter_mode, tmp233
	movq	%rdx, %rsi	# tmp232,
	movl	%eax, %edi	# tmp233,
	call	copy_to_mode_reg	#
	movq	%rax, -88(%rbp)	# tmp234, countreg
	.loc 1 9240 0 discriminator 3
	cmpq	$0, -120(%rbp)	#, count
	jne	.L2289	#,
	.loc 1 9240 0 is_stmt 0 discriminator 1
	movl	-132(%rbp), %eax	# desired_alignment, tmp235
	cltq
	cmpq	-128(%rbp), %rax	# align, D.30411
	jle	.L2289	#,
	.loc 1 9242 0 is_stmt 1
	call	gen_label_rtx	#
	movq	%rax, -112(%rbp)	# tmp236, label
	.loc 1 9243 0
	movl	-132(%rbp), %eax	# desired_alignment, tmp237
	subl	$1, %eax	#, D.30409
	cltq
	movq	%rax, %rsi	# D.30411,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rsi	#, D.30413
	movl	-140(%rbp), %ecx	# counter_mode, tmp238
	movq	-88(%rbp), %rax	# countreg, tmp239
	movq	-112(%rbp), %rdx	# label, tmp240
	movq	%rdx, (%rsp)	# tmp240,
	movl	$1, %r9d	#,
	movl	%ecx, %r8d	# tmp238,
	movl	$0, %ecx	#,
	movl	$110, %edx	#,
	movq	%rax, %rdi	# tmp239,
	call	emit_cmp_and_jump_insns	#
.L2289:
	.loc 1 9246 0
	cmpq	$1, -128(%rbp)	#, align
	jg	.L2290	#,
.LBB100:
	.loc 1 9248 0
	movq	-104(%rbp), %rax	# destreg, tmp241
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp241,
	call	ix86_expand_aligntest	#
	movq	%rax, -72(%rbp)	# tmp242, label
	.loc 1 9249 0
	movq	-96(%rbp), %rdx	# srcreg, tmp243
	movq	-104(%rbp), %rax	# destreg, tmp244
	movq	%rdx, %rsi	# tmp243,
	movq	%rax, %rdi	# tmp244,
	call	gen_strmovqi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9250 0
	movq	-88(%rbp), %rax	# countreg, tmp245
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp245,
	call	ix86_adjust_counter	#
	.loc 1 9251 0
	movq	-72(%rbp), %rax	# label, tmp246
	movq	%rax, %rdi	# tmp246,
	call	emit_label	#
	.loc 1 9252 0
	movq	-72(%rbp), %rax	# label, tmp247
	movl	$1, 32(%rax)	#, label_127->fld[3].rtint
.L2290:
.LBE100:
	.loc 1 9254 0
	cmpq	$2, -128(%rbp)	#, align
	jg	.L2291	#,
.LBB101:
	.loc 1 9256 0
	movq	-104(%rbp), %rax	# destreg, tmp248
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp248,
	call	ix86_expand_aligntest	#
	movq	%rax, -64(%rbp)	# tmp249, label
	.loc 1 9257 0
	movq	-96(%rbp), %rdx	# srcreg, tmp250
	movq	-104(%rbp), %rax	# destreg, tmp251
	movq	%rdx, %rsi	# tmp250,
	movq	%rax, %rdi	# tmp251,
	call	gen_strmovhi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9258 0
	movq	-88(%rbp), %rax	# countreg, tmp252
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp252,
	call	ix86_adjust_counter	#
	.loc 1 9259 0
	movq	-64(%rbp), %rax	# label, tmp253
	movq	%rax, %rdi	# tmp253,
	call	emit_label	#
	.loc 1 9260 0
	movq	-64(%rbp), %rax	# label, tmp254
	movl	$1, 32(%rax)	#, label_129->fld[3].rtint
.L2291:
.LBE101:
	.loc 1 9262 0
	cmpq	$4, -128(%rbp)	#, align
	jg	.L2292	#,
	.loc 1 9262 0 is_stmt 0 discriminator 1
	cmpl	$4, -132(%rbp)	#, desired_alignment
	jle	.L2292	#,
.LBB102:
	.loc 1 9264 0 is_stmt 1
	movq	-104(%rbp), %rax	# destreg, tmp255
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp255,
	call	ix86_expand_aligntest	#
	movq	%rax, -56(%rbp)	# tmp256, label
	.loc 1 9265 0
	movq	-96(%rbp), %rdx	# srcreg, tmp257
	movq	-104(%rbp), %rax	# destreg, tmp258
	movq	%rdx, %rsi	# tmp257,
	movq	%rax, %rdi	# tmp258,
	call	gen_strmovsi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9266 0
	movq	-88(%rbp), %rax	# countreg, tmp259
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp259,
	call	ix86_adjust_counter	#
	.loc 1 9267 0
	movq	-56(%rbp), %rax	# label, tmp260
	movq	%rax, %rdi	# tmp260,
	call	emit_label	#
	.loc 1 9268 0
	movq	-56(%rbp), %rax	# label, tmp261
	movl	$1, 32(%rax)	#, label_131->fld[3].rtint
.L2292:
.LBE102:
	.loc 1 9271 0
	cmpq	$0, -112(%rbp)	#, label
	je	.L2293	#,
	.loc 1 9271 0 is_stmt 0 discriminator 1
	cmpl	$4, -132(%rbp)	#, desired_alignment
	jle	.L2293	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1149
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	jne	.L2293	#,
	.loc 1 9273 0 is_stmt 1
	movq	-112(%rbp), %rax	# label, tmp262
	movq	%rax, %rdi	# tmp262,
	call	emit_label	#
	.loc 1 9274 0
	movq	-112(%rbp), %rax	# label, tmp263
	movl	$1, 32(%rax)	#, label_5->fld[3].rtint
	.loc 1 9275 0
	movq	$0, -112(%rbp)	#, label
.L2293:
	.loc 1 9277 0
	movl	$65, %edx	#, x86_single_stringop.1150
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1151
	movl	%eax, %ecx	# ix86_cpu.1152, tmp321
	sarl	%cl, %edx	# tmp321, D.30409
	movl	%edx, %eax	# D.30409, D.30409
	andl	$1, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	jne	.L2294	#,
	.loc 1 9278 0
	call	gen_cld	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
.L2294:
	.loc 1 9279 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1153
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2295	#,
	.loc 1 9281 0
	movl	$3, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.30413
	movq	-88(%rbp), %rax	# countreg, tmp264
	movq	%rax, %rdi	# tmp264,
	call	ix86_zero_extend_to_Pmode	#
	movq	%rax, %rcx	#, D.30413
	movq	-80(%rbp), %rax	# countreg2, tmp265
	movq	%rbx, %rdx	# D.30413,
	movq	%rcx, %rsi	# D.30413,
	movq	%rax, %rdi	# tmp265,
	call	gen_lshrdi3	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9283 0
	movq	-80(%rbp), %r8	# countreg2, tmp266
	movq	-96(%rbp), %rdi	# srcreg, tmp267
	movq	-104(%rbp), %rcx	# destreg, tmp268
	movq	-80(%rbp), %rdx	# countreg2, tmp269
	movq	-96(%rbp), %rsi	# srcreg, tmp270
	movq	-104(%rbp), %rax	# destreg, tmp271
	movq	%r8, %r9	# tmp266,
	movq	%rdi, %r8	# tmp267,
	movq	%rax, %rdi	# tmp271,
	call	gen_rep_movdi_rex64	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	jmp	.L2296	#
.L2295:
	.loc 1 9288 0
	movl	$2, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30413
	movq	-88(%rbp), %rcx	# countreg, tmp272
	movq	-80(%rbp), %rax	# countreg2, tmp273
	movq	%rcx, %rsi	# tmp272,
	movq	%rax, %rdi	# tmp273,
	call	gen_lshrsi3	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9289 0
	movq	-80(%rbp), %r8	# countreg2, tmp274
	movq	-96(%rbp), %rdi	# srcreg, tmp275
	movq	-104(%rbp), %rcx	# destreg, tmp276
	movq	-80(%rbp), %rdx	# countreg2, tmp277
	movq	-96(%rbp), %rsi	# srcreg, tmp278
	movq	-104(%rbp), %rax	# destreg, tmp279
	movq	%r8, %r9	# tmp274,
	movq	%rdi, %r8	# tmp275,
	movq	%rax, %rdi	# tmp279,
	call	gen_rep_movsi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
.L2296:
	.loc 1 9293 0
	cmpq	$0, -112(%rbp)	#, label
	je	.L2297	#,
	.loc 1 9295 0
	movq	-112(%rbp), %rax	# label, tmp280
	movq	%rax, %rdi	# tmp280,
	call	emit_label	#
	.loc 1 9296 0
	movq	-112(%rbp), %rax	# label, tmp281
	movl	$1, 32(%rax)	#, label_6->fld[3].rtint
.L2297:
	.loc 1 9298 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1154
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2298	#,
	.loc 1 9298 0 is_stmt 0 discriminator 1
	cmpq	$4, -128(%rbp)	#, align
	jle	.L2298	#,
	cmpq	$0, -120(%rbp)	#, count
	je	.L2298	#,
	movq	-120(%rbp), %rax	# count, tmp282
	andl	$4, %eax	#, D.30414
	testq	%rax, %rax	# D.30414
	je	.L2298	#,
	.loc 1 9299 0 is_stmt 1
	movq	-96(%rbp), %rdx	# srcreg, tmp283
	movq	-104(%rbp), %rax	# destreg, tmp284
	movq	%rdx, %rsi	# tmp283,
	movq	%rax, %rdi	# tmp284,
	call	gen_strmovsi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
.L2298:
	.loc 1 9300 0
	cmpq	$4, -128(%rbp)	#, align
	jle	.L2299	#,
	.loc 1 9300 0 is_stmt 0 discriminator 2
	cmpq	$0, -120(%rbp)	#, count
	jne	.L2300	#,
.L2299:
	.loc 1 9300 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1155
	andl	$33554432, %eax	#, D.30409
	testl	%eax, %eax	# D.30409
	je	.L2300	#,
.LBB103:
	.loc 1 9302 0 is_stmt 1
	movq	-88(%rbp), %rax	# countreg, tmp285
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp285,
	call	ix86_expand_aligntest	#
	movq	%rax, -48(%rbp)	# tmp286, label
	.loc 1 9303 0
	movq	-96(%rbp), %rdx	# srcreg, tmp287
	movq	-104(%rbp), %rax	# destreg, tmp288
	movq	%rdx, %rsi	# tmp287,
	movq	%rax, %rdi	# tmp288,
	call	gen_strmovsi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9304 0
	movq	-48(%rbp), %rax	# label, tmp289
	movq	%rax, %rdi	# tmp289,
	call	emit_label	#
	.loc 1 9305 0
	movq	-48(%rbp), %rax	# label, tmp290
	movl	$1, 32(%rax)	#, label_157->fld[3].rtint
.L2300:
.LBE103:
	.loc 1 9307 0
	cmpq	$2, -128(%rbp)	#, align
	jle	.L2301	#,
	.loc 1 9307 0 is_stmt 0 discriminator 1
	cmpq	$0, -120(%rbp)	#, count
	je	.L2301	#,
	movq	-120(%rbp), %rax	# count, tmp291
	andl	$2, %eax	#, D.30414
	testq	%rax, %rax	# D.30414
	je	.L2301	#,
	.loc 1 9308 0 is_stmt 1
	movq	-96(%rbp), %rdx	# srcreg, tmp292
	movq	-104(%rbp), %rax	# destreg, tmp293
	movq	%rdx, %rsi	# tmp292,
	movq	%rax, %rdi	# tmp293,
	call	gen_strmovhi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
.L2301:
	.loc 1 9309 0
	cmpq	$2, -128(%rbp)	#, align
	jle	.L2302	#,
	.loc 1 9309 0 is_stmt 0 discriminator 1
	cmpq	$0, -120(%rbp)	#, count
	jne	.L2303	#,
.L2302:
.LBB104:
	.loc 1 9311 0 is_stmt 1
	movq	-88(%rbp), %rax	# countreg, tmp294
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp294,
	call	ix86_expand_aligntest	#
	movq	%rax, -40(%rbp)	# tmp295, label
	.loc 1 9312 0
	movq	-96(%rbp), %rdx	# srcreg, tmp296
	movq	-104(%rbp), %rax	# destreg, tmp297
	movq	%rdx, %rsi	# tmp296,
	movq	%rax, %rdi	# tmp297,
	call	gen_strmovhi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9313 0
	movq	-40(%rbp), %rax	# label, tmp298
	movq	%rax, %rdi	# tmp298,
	call	emit_label	#
	.loc 1 9314 0
	movq	-40(%rbp), %rax	# label, tmp299
	movl	$1, 32(%rax)	#, label_161->fld[3].rtint
.L2303:
.LBE104:
	.loc 1 9316 0
	cmpq	$1, -128(%rbp)	#, align
	jle	.L2304	#,
	.loc 1 9316 0 is_stmt 0 discriminator 1
	cmpq	$0, -120(%rbp)	#, count
	je	.L2304	#,
	movq	-120(%rbp), %rax	# count, tmp300
	andl	$1, %eax	#, D.30414
	testq	%rax, %rax	# D.30414
	je	.L2304	#,
	.loc 1 9317 0 is_stmt 1
	movq	-96(%rbp), %rdx	# srcreg, tmp301
	movq	-104(%rbp), %rax	# destreg, tmp302
	movq	%rdx, %rsi	# tmp301,
	movq	%rax, %rdi	# tmp302,
	call	gen_strmovqi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
.L2304:
	.loc 1 9318 0
	cmpq	$1, -128(%rbp)	#, align
	jle	.L2305	#,
	.loc 1 9318 0 is_stmt 0 discriminator 1
	cmpq	$0, -120(%rbp)	#, count
	jne	.L2260	#,
.L2305:
.LBB105:
	.loc 1 9320 0 is_stmt 1
	movq	-88(%rbp), %rax	# countreg, tmp303
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp303,
	call	ix86_expand_aligntest	#
	movq	%rax, -32(%rbp)	# tmp304, label
	.loc 1 9321 0
	movq	-96(%rbp), %rdx	# srcreg, tmp305
	movq	-104(%rbp), %rax	# destreg, tmp306
	movq	%rdx, %rsi	# tmp305,
	movq	%rax, %rdi	# tmp306,
	call	gen_strmovqi	#
	movq	%rax, %rdi	# D.30413,
	call	emit_insn	#
	.loc 1 9322 0
	movq	-32(%rbp), %rax	# label, tmp307
	movq	%rax, %rdi	# tmp307,
	call	emit_label	#
	.loc 1 9323 0
	movq	-32(%rbp), %rax	# label, tmp308
	movl	$1, 32(%rax)	#, label_165->fld[3].rtint
.L2260:
.LBE105:
.LBE99:
	.loc 1 9327 0
	call	get_insns	#
	movq	%rax, -24(%rbp)	# tmp309, insns
	.loc 1 9328 0
	call	end_sequence	#
	.loc 1 9330 0
	movq	-96(%rbp), %rdi	# srcreg, tmp310
	movq	-104(%rbp), %rcx	# destreg, tmp311
	movq	-160(%rbp), %rdx	# src, tmp312
	movq	-152(%rbp), %rsi	# dst, tmp313
	movq	-24(%rbp), %rax	# insns, tmp314
	movq	%rdi, %r8	# tmp310,
	movq	%rax, %rdi	# tmp314,
	call	ix86_set_move_mem_attrs	#
	.loc 1 9331 0
	movq	-24(%rbp), %rax	# insns, tmp315
	movq	%rax, %rdi	# tmp315,
	call	emit_insns	#
	.loc 1 9332 0
	movl	$1, %eax	#, D.30409
.L2285:
	.loc 1 9333 0
	addq	$184, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE142:
	.size	ix86_expand_movstr, .-ix86_expand_movstr
	.globl	ix86_expand_clrstr
	.type	ix86_expand_clrstr, @function
ix86_expand_clrstr:
.LFB143:
	.loc 1 9340 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$168, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -152(%rbp)	# src, src
	movq	%rsi, -160(%rbp)	# count_exp, count_exp
	movq	%rdx, -168(%rbp)	# align_exp, align_exp
	.loc 1 9343 0
	movq	$0, -120(%rbp)	#, align
	.loc 1 9344 0
	movq	$0, -112(%rbp)	#, count
	.loc 1 9346 0
	movq	-168(%rbp), %rax	# align_exp, tmp189
	movzwl	(%rax), %eax	# align_exp_21(D)->code, D.30416
	cmpw	$54, %ax	#, D.30416
	jne	.L2307	#,
	.loc 1 9347 0
	movq	-168(%rbp), %rax	# align_exp, tmp190
	movq	8(%rax), %rax	# align_exp_21(D)->fld[0].rtwint, tmp191
	movq	%rax, -120(%rbp)	# tmp191, align
.L2307:
	.loc 1 9350 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1156
	andl	$512, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2308	#,
	.loc 1 9351 0
	movq	$32, -120(%rbp)	#, align
.L2308:
	.loc 1 9353 0
	movq	-160(%rbp), %rax	# count_exp, tmp192
	movzwl	(%rax), %eax	# count_exp_27(D)->code, D.30416
	cmpw	$54, %ax	#, D.30416
	jne	.L2309	#,
	.loc 1 9354 0
	movq	-160(%rbp), %rax	# count_exp, tmp193
	movq	8(%rax), %rax	# count_exp_27(D)->fld[0].rtwint, D.30417
	movq	%rax, -112(%rbp)	# D.30417, count
.L2309:
	.loc 1 9358 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1157
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2310	#,
	.loc 1 9358 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# count_exp, tmp194
	movzbl	2(%rax), %eax	# count_exp_27(D)->mode, D.30418
	cmpb	$4, %al	#, D.30418
	je	.L2310	#,
	.loc 1 9359 0 is_stmt 1
	movq	-160(%rbp), %rax	# count_exp, tmp195
	movq	%rax, %rdi	# tmp195,
	call	x86_64_zero_extended_value	#
	testl	%eax, %eax	# D.30415
	je	.L2311	#,
.L2310:
	.loc 1 9360 0
	movl	$4, -132(%rbp)	#, counter_mode
	jmp	.L2312	#
.L2311:
	.loc 1 9362 0
	movl	$5, -132(%rbp)	#, counter_mode
.L2312:
	.loc 1 9364 0
	movq	-152(%rbp), %rax	# src, tmp196
	movq	8(%rax), %rdx	# src_37(D)->fld[0].rtx, D.30419
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1159
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2313	#,
	.loc 1 9364 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1158
	jmp	.L2314	#
.L2313:
	.loc 1 9364 0 discriminator 2
	movl	$4, %eax	#, iftmp.1158
.L2314:
	.loc 1 9364 0 discriminator 3
	movq	%rdx, %rsi	# D.30419,
	movl	%eax, %edi	# iftmp.1158,
	call	copy_to_mode_reg	#
	movq	%rax, -96(%rbp)	# tmp197, destreg
	.loc 1 9366 0 is_stmt 1 discriminator 3
	call	gen_cld	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9371 0 discriminator 3
	movl	optimize(%rip), %eax	# optimize, optimize.1160
	testl	%eax, %eax	# optimize.1160
	je	.L2315	#,
	.loc 1 9371 0 is_stmt 0 discriminator 2
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.1161
	testl	%eax, %eax	# optimize_size.1161
	je	.L2316	#,
.L2315:
	.loc 1 9371 0 discriminator 1
	cmpq	$0, -112(%rbp)	#, count
	je	.L2317	#,
	movq	-112(%rbp), %rax	# count, tmp198
	andl	$3, %eax	#, D.30420
	testq	%rax, %rax	# D.30420
	je	.L2316	#,
.L2317:
	.loc 1 9373 0 is_stmt 1
	movq	-160(%rbp), %rax	# count_exp, tmp199
	movq	%rax, %rdi	# tmp199,
	call	ix86_zero_extend_to_Pmode	#
	movq	%rax, -88(%rbp)	# tmp200, countreg
	.loc 1 9374 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30419
	movq	%rax, %rsi	# D.30419,
	movl	$2, %edi	#,
	call	copy_to_mode_reg	#
	movq	%rax, -80(%rbp)	# tmp201, zeroreg
	.loc 1 9375 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1162
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2318	#,
	.loc 1 9376 0
	movq	-88(%rbp), %rdi	# countreg, tmp202
	movq	-96(%rbp), %rcx	# destreg, tmp203
	movq	-80(%rbp), %rdx	# zeroreg, tmp204
	movq	-88(%rbp), %rsi	# countreg, tmp205
	movq	-96(%rbp), %rax	# destreg, tmp206
	movq	%rdi, %r8	# tmp202,
	movq	%rax, %rdi	# tmp206,
	call	gen_rep_stosqi_rex64	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9375 0
	jmp	.L2320	#
.L2318:
	.loc 1 9379 0
	movq	-88(%rbp), %rdi	# countreg, tmp207
	movq	-96(%rbp), %rcx	# destreg, tmp208
	movq	-80(%rbp), %rdx	# zeroreg, tmp209
	movq	-88(%rbp), %rsi	# countreg, tmp210
	movq	-96(%rbp), %rax	# destreg, tmp211
	movq	%rdi, %r8	# tmp207,
	movq	%rax, %rdi	# tmp211,
	call	gen_rep_stosqi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9375 0
	jmp	.L2320	#
.L2316:
	.loc 1 9382 0
	cmpq	$0, -112(%rbp)	#, count
	je	.L2321	#,
	.loc 1 9383 0
	cmpq	$7, -120(%rbp)	#, align
	jg	.L2322	#,
	.loc 1 9384 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1163
	cmpl	$3, %eax	#, ix86_cpu.1163
	je	.L2323	#,
	.loc 1 9384 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1164
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	jne	.L2323	#,
	cmpq	$3, -120(%rbp)	#, align
	jg	.L2322	#,
.L2323:
	.loc 1 9385 0 is_stmt 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.1165
	testl	%eax, %eax	# optimize_size.1165
	jne	.L2322	#,
	.loc 1 9385 0 is_stmt 0 discriminator 1
	cmpq	$63, -112(%rbp)	#, count
	ja	.L2321	#,
.L2322:
.LBB106:
	.loc 1 9387 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1167
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2324	#,
	.loc 1 9387 0 is_stmt 0 discriminator 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.1168
	testl	%eax, %eax	# optimize_size.1168
	jne	.L2324	#,
	movl	$8, %eax	#, iftmp.1166
	jmp	.L2325	#
.L2324:
	.loc 1 9387 0 discriminator 2
	movl	$4, %eax	#, iftmp.1166
.L2325:
	.loc 1 9387 0 discriminator 3
	movl	%eax, -128(%rbp)	# iftmp.1166, size
	.loc 1 9388 0 is_stmt 1 discriminator 3
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30419
	cmpl	$4, -128(%rbp)	#, size
	jne	.L2326	#,
	.loc 1 9388 0 is_stmt 0 discriminator 1
	movl	$4, %eax	#, iftmp.1169
	jmp	.L2327	#
.L2326:
	.loc 1 9388 0 discriminator 2
	movl	$5, %eax	#, iftmp.1169
.L2327:
	.loc 1 9388 0 discriminator 3
	movq	%rdx, %rsi	# D.30419,
	movl	%eax, %edi	# iftmp.1169,
	call	copy_to_mode_reg	#
	movq	%rax, -80(%rbp)	# tmp212, zeroreg
	.loc 1 9389 0 is_stmt 1 discriminator 3
	movl	-128(%rbp), %eax	# size, tmp213
	negl	%eax	# D.30415
	cltq
	andq	-112(%rbp), %rax	# count, D.30420
	testq	%rax, %rax	# D.30420
	je	.L2328	#,
	.loc 1 9392 0
	cmpl	$4, -128(%rbp)	#, size
	jne	.L2329	#,
	.loc 1 9392 0 is_stmt 0 discriminator 1
	movl	$2, %eax	#, iftmp.1170
	jmp	.L2330	#
.L2329:
	.loc 1 9392 0 discriminator 2
	movl	$3, %eax	#, iftmp.1170
.L2330:
	.loc 1 9392 0 discriminator 3
	movq	-112(%rbp), %rdx	# count, tmp214
	movl	%eax, %ecx	# iftmp.1170, tmp321
	shrq	%cl, %rdx	# tmp321, D.30420
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1172
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2331	#,
	.loc 1 9392 0 discriminator 1
	movq	$-1, %rax	#, iftmp.1171
	jmp	.L2332	#
.L2331:
	.loc 1 9392 0 discriminator 2
	movl	$1073741823, %eax	#, iftmp.1171
.L2332:
	.loc 1 9392 0 discriminator 3
	andq	%rdx, %rax	# D.30420, D.30420
	.loc 1 9391 0 is_stmt 1 discriminator 3
	movq	%rax, %rsi	# D.30417,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30419
	movl	-132(%rbp), %eax	# counter_mode, tmp215
	movq	%rdx, %rsi	# D.30419,
	movl	%eax, %edi	# tmp215,
	call	copy_to_mode_reg	#
	movq	%rax, -88(%rbp)	# tmp216, countreg
	.loc 1 9394 0 discriminator 3
	movq	-88(%rbp), %rax	# countreg, tmp217
	movq	%rax, %rdi	# tmp217,
	call	ix86_zero_extend_to_Pmode	#
	movq	%rax, -88(%rbp)	# tmp218, countreg
	.loc 1 9395 0 discriminator 3
	cmpl	$4, -128(%rbp)	#, size
	jne	.L2333	#,
	.loc 1 9397 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1173
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2334	#,
	.loc 1 9398 0
	movq	-88(%rbp), %rdi	# countreg, tmp219
	movq	-96(%rbp), %rcx	# destreg, tmp220
	movq	-80(%rbp), %rdx	# zeroreg, tmp221
	movq	-88(%rbp), %rsi	# countreg, tmp222
	movq	-96(%rbp), %rax	# destreg, tmp223
	movq	%rdi, %r8	# tmp219,
	movq	%rax, %rdi	# tmp223,
	call	gen_rep_stossi_rex64	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	jmp	.L2328	#
.L2334:
	.loc 1 9401 0
	movq	-88(%rbp), %rdi	# countreg, tmp224
	movq	-96(%rbp), %rcx	# destreg, tmp225
	movq	-80(%rbp), %rdx	# zeroreg, tmp226
	movq	-88(%rbp), %rsi	# countreg, tmp227
	movq	-96(%rbp), %rax	# destreg, tmp228
	movq	%rdi, %r8	# tmp224,
	movq	%rax, %rdi	# tmp228,
	call	gen_rep_stossi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	jmp	.L2328	#
.L2333:
	.loc 1 9405 0
	movq	-88(%rbp), %rdi	# countreg, tmp229
	movq	-96(%rbp), %rcx	# destreg, tmp230
	movq	-80(%rbp), %rdx	# zeroreg, tmp231
	movq	-88(%rbp), %rsi	# countreg, tmp232
	movq	-96(%rbp), %rax	# destreg, tmp233
	movq	%rdi, %r8	# tmp229,
	movq	%rax, %rdi	# tmp233,
	call	gen_rep_stosdi_rex64	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
.L2328:
	.loc 1 9408 0
	cmpl	$8, -128(%rbp)	#, size
	jne	.L2336	#,
	.loc 1 9408 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# count, tmp234
	andl	$4, %eax	#, D.30420
	testq	%rax, %rax	# D.30420
	je	.L2336	#,
	.loc 1 9409 0 is_stmt 1
	movq	-80(%rbp), %rax	# zeroreg, tmp235
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp235,
	movl	$4, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp236
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp236,
	call	gen_strsetsi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
.L2336:
	.loc 1 9411 0
	movq	-112(%rbp), %rax	# count, tmp237
	andl	$2, %eax	#, D.30420
	testq	%rax, %rax	# D.30420
	je	.L2337	#,
	.loc 1 9412 0
	movq	-80(%rbp), %rax	# zeroreg, tmp238
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp238,
	movl	$3, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp239
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp239,
	call	gen_strsethi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
.L2337:
	.loc 1 9414 0
	movq	-112(%rbp), %rax	# count, tmp240
	andl	$1, %eax	#, D.30420
	testq	%rax, %rax	# D.30420
	je	.L2338	#,
	.loc 1 9415 0
	movq	-80(%rbp), %rax	# zeroreg, tmp241
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp241,
	movl	$2, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp242
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp242,
	call	gen_strsetqi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
.LBE106:
	.loc 1 9386 0
	jmp	.L2320	#
.L2338:
	jmp	.L2320	#
.L2321:
.LBB107:
	.loc 1 9421 0
	movq	$0, -104(%rbp)	#, label
	.loc 1 9423 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1175
	.loc 1 9425 0
	cmpl	$3, %eax	#, ix86_cpu.1175
	jne	.L2339	#,
	.loc 1 9424 0
	cmpq	$0, -112(%rbp)	#, count
	je	.L2340	#,
	.loc 1 9424 0 is_stmt 0 discriminator 1
	cmpq	$259, -112(%rbp)	#, count
	ja	.L2340	#,
.L2339:
	.loc 1 9425 0 is_stmt 1 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1177
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2341	#,
	movl	$8, %eax	#, iftmp.1176
	jmp	.L2342	#
.L2341:
	.loc 1 9425 0 is_stmt 0 discriminator 2
	movl	$4, %eax	#, iftmp.1176
.L2342:
	.loc 1 9425 0 discriminator 3
	jmp	.L2343	#
.L2340:
	.loc 1 9425 0
	movl	$8, %eax	#, iftmp.1174
.L2343:
	.loc 1 9423 0 is_stmt 1
	movl	%eax, -124(%rbp)	# iftmp.1174, desired_alignment
	.loc 1 9430 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1178
	andl	$1024, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	jne	.L2344	#,
	.loc 1 9430 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1180
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2345	#,
	movl	$8, %eax	#, iftmp.1179
	jmp	.L2346	#
.L2345:
	.loc 1 9430 0 discriminator 2
	movl	$4, %eax	#, iftmp.1179
.L2346:
	.loc 1 9430 0 discriminator 3
	cmpq	-120(%rbp), %rax	# align, iftmp.1179
	jle	.L2344	#,
	.loc 1 9431 0 is_stmt 1
	movl	$0, %eax	#, D.30415
	jmp	.L2347	#
.L2344:
	.loc 1 9433 0
	movl	$65, %edx	#, x86_single_stringop.1181
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1182
	movl	%eax, %ecx	# ix86_cpu.1183, tmp323
	sarl	%cl, %edx	# tmp323, D.30415
	movl	%edx, %eax	# D.30415, D.30415
	andl	$1, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2348	#,
	.loc 1 9434 0
	call	gen_cld	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
.L2348:
	.loc 1 9436 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1185
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2349	#,
	.loc 1 9436 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1184
	jmp	.L2350	#
.L2349:
	.loc 1 9436 0 discriminator 2
	movl	$4, %eax	#, iftmp.1184
.L2350:
	.loc 1 9436 0 discriminator 3
	movl	%eax, %edi	# iftmp.1184,
	call	gen_reg_rtx	#
	movq	%rax, -72(%rbp)	# tmp243, countreg2
	.loc 1 9437 0 is_stmt 1 discriminator 3
	movq	-160(%rbp), %rdx	# count_exp, tmp244
	movl	-132(%rbp), %eax	# counter_mode, tmp245
	movq	%rdx, %rsi	# tmp244,
	movl	%eax, %edi	# tmp245,
	call	copy_to_mode_reg	#
	movq	%rax, -88(%rbp)	# tmp246, countreg
	.loc 1 9438 0 discriminator 3
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30419
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1187
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2351	#,
	.loc 1 9438 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1186
	jmp	.L2352	#
.L2351:
	.loc 1 9438 0 discriminator 2
	movl	$4, %eax	#, iftmp.1186
.L2352:
	.loc 1 9438 0 discriminator 3
	movq	%rdx, %rsi	# D.30419,
	movl	%eax, %edi	# iftmp.1186,
	call	copy_to_mode_reg	#
	movq	%rax, -80(%rbp)	# tmp247, zeroreg
	.loc 1 9440 0 is_stmt 1 discriminator 3
	cmpq	$0, -112(%rbp)	#, count
	jne	.L2353	#,
	.loc 1 9440 0 is_stmt 0 discriminator 1
	movl	-124(%rbp), %eax	# desired_alignment, tmp248
	cltq
	cmpq	-120(%rbp), %rax	# align, D.30417
	jle	.L2353	#,
	.loc 1 9442 0 is_stmt 1
	call	gen_label_rtx	#
	movq	%rax, -104(%rbp)	# tmp249, label
	.loc 1 9443 0
	movl	-124(%rbp), %eax	# desired_alignment, tmp250
	subl	$1, %eax	#, D.30415
	cltq
	movq	%rax, %rsi	# D.30417,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rsi	#, D.30419
	movl	-132(%rbp), %ecx	# counter_mode, tmp251
	movq	-88(%rbp), %rax	# countreg, tmp252
	movq	-104(%rbp), %rdx	# label, tmp253
	movq	%rdx, (%rsp)	# tmp253,
	movl	$1, %r9d	#,
	movl	%ecx, %r8d	# tmp251,
	movl	$0, %ecx	#,
	movl	$110, %edx	#,
	movq	%rax, %rdi	# tmp252,
	call	emit_cmp_and_jump_insns	#
.L2353:
	.loc 1 9446 0
	cmpq	$1, -120(%rbp)	#, align
	jg	.L2354	#,
.LBB108:
	.loc 1 9448 0
	movq	-96(%rbp), %rax	# destreg, tmp254
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp254,
	call	ix86_expand_aligntest	#
	movq	%rax, -64(%rbp)	# tmp255, label
	.loc 1 9449 0
	movq	-80(%rbp), %rax	# zeroreg, tmp256
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp256,
	movl	$2, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp257
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp257,
	call	gen_strsetqi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9451 0
	movq	-88(%rbp), %rax	# countreg, tmp258
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp258,
	call	ix86_adjust_counter	#
	.loc 1 9452 0
	movq	-64(%rbp), %rax	# label, tmp259
	movq	%rax, %rdi	# tmp259,
	call	emit_label	#
	.loc 1 9453 0
	movq	-64(%rbp), %rax	# label, tmp260
	movl	$1, 32(%rax)	#, label_137->fld[3].rtint
.L2354:
.LBE108:
	.loc 1 9455 0
	cmpq	$2, -120(%rbp)	#, align
	jg	.L2355	#,
.LBB109:
	.loc 1 9457 0
	movq	-96(%rbp), %rax	# destreg, tmp261
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp261,
	call	ix86_expand_aligntest	#
	movq	%rax, -56(%rbp)	# tmp262, label
	.loc 1 9458 0
	movq	-80(%rbp), %rax	# zeroreg, tmp263
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp263,
	movl	$3, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp264
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp264,
	call	gen_strsethi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9460 0
	movq	-88(%rbp), %rax	# countreg, tmp265
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp265,
	call	ix86_adjust_counter	#
	.loc 1 9461 0
	movq	-56(%rbp), %rax	# label, tmp266
	movq	%rax, %rdi	# tmp266,
	call	emit_label	#
	.loc 1 9462 0
	movq	-56(%rbp), %rax	# label, tmp267
	movl	$1, 32(%rax)	#, label_140->fld[3].rtint
.L2355:
.LBE109:
	.loc 1 9464 0
	cmpq	$4, -120(%rbp)	#, align
	jg	.L2356	#,
	.loc 1 9464 0 is_stmt 0 discriminator 1
	cmpl	$4, -124(%rbp)	#, desired_alignment
	jle	.L2356	#,
.LBB110:
	.loc 1 9466 0 is_stmt 1
	movq	-96(%rbp), %rax	# destreg, tmp268
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp268,
	call	ix86_expand_aligntest	#
	movq	%rax, -48(%rbp)	# tmp269, label
	.loc 1 9467 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1189
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2357	#,
	.loc 1 9467 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# zeroreg, tmp270
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp270,
	movl	$4, %edi	#,
	call	gen_rtx_SUBREG	#
	jmp	.L2358	#
.L2357:
	.loc 1 9467 0 discriminator 2
	movq	-80(%rbp), %rax	# zeroreg, iftmp.1188
.L2358:
	.loc 1 9467 0 discriminator 3
	movq	-96(%rbp), %rdx	# destreg, tmp271
	movq	%rax, %rsi	# iftmp.1188,
	movq	%rdx, %rdi	# tmp271,
	call	gen_strsetsi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9470 0 is_stmt 1 discriminator 3
	movq	-88(%rbp), %rax	# countreg, tmp272
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp272,
	call	ix86_adjust_counter	#
	.loc 1 9471 0 discriminator 3
	movq	-48(%rbp), %rax	# label, tmp273
	movq	%rax, %rdi	# tmp273,
	call	emit_label	#
	.loc 1 9472 0 discriminator 3
	movq	-48(%rbp), %rax	# label, tmp274
	movl	$1, 32(%rax)	#, label_143->fld[3].rtint
.L2356:
.LBE110:
	.loc 1 9475 0
	cmpq	$0, -104(%rbp)	#, label
	je	.L2359	#,
	.loc 1 9475 0 is_stmt 0 discriminator 1
	cmpl	$4, -124(%rbp)	#, desired_alignment
	jle	.L2359	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1190
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	jne	.L2359	#,
	.loc 1 9477 0 is_stmt 1
	movq	-104(%rbp), %rax	# label, tmp275
	movq	%rax, %rdi	# tmp275,
	call	emit_label	#
	.loc 1 9478 0
	movq	-104(%rbp), %rax	# label, tmp276
	movl	$1, 32(%rax)	#, label_5->fld[3].rtint
	.loc 1 9479 0
	movq	$0, -104(%rbp)	#, label
.L2359:
	.loc 1 9482 0
	movl	$65, %edx	#, x86_single_stringop.1191
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1192
	movl	%eax, %ecx	# ix86_cpu.1193, tmp325
	sarl	%cl, %edx	# tmp325, D.30415
	movl	%edx, %eax	# D.30415, D.30415
	andl	$1, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	jne	.L2360	#,
	.loc 1 9483 0
	call	gen_cld	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
.L2360:
	.loc 1 9484 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1194
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2361	#,
	.loc 1 9486 0
	movl	$3, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.30419
	movq	-88(%rbp), %rax	# countreg, tmp277
	movq	%rax, %rdi	# tmp277,
	call	ix86_zero_extend_to_Pmode	#
	movq	%rax, %rcx	#, D.30419
	movq	-72(%rbp), %rax	# countreg2, tmp278
	movq	%rbx, %rdx	# D.30419,
	movq	%rcx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp278,
	call	gen_lshrdi3	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9488 0
	movq	-72(%rbp), %rdi	# countreg2, tmp279
	movq	-96(%rbp), %rcx	# destreg, tmp280
	movq	-80(%rbp), %rdx	# zeroreg, tmp281
	movq	-72(%rbp), %rsi	# countreg2, tmp282
	movq	-96(%rbp), %rax	# destreg, tmp283
	movq	%rdi, %r8	# tmp279,
	movq	%rax, %rdi	# tmp283,
	call	gen_rep_stosdi_rex64	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	jmp	.L2362	#
.L2361:
	.loc 1 9493 0
	movl	$2, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30419
	movq	-88(%rbp), %rcx	# countreg, tmp284
	movq	-72(%rbp), %rax	# countreg2, tmp285
	movq	%rcx, %rsi	# tmp284,
	movq	%rax, %rdi	# tmp285,
	call	gen_lshrsi3	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9494 0
	movq	-72(%rbp), %rdi	# countreg2, tmp286
	movq	-96(%rbp), %rcx	# destreg, tmp287
	movq	-80(%rbp), %rdx	# zeroreg, tmp288
	movq	-72(%rbp), %rsi	# countreg2, tmp289
	movq	-96(%rbp), %rax	# destreg, tmp290
	movq	%rdi, %r8	# tmp286,
	movq	%rax, %rdi	# tmp290,
	call	gen_rep_stossi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
.L2362:
	.loc 1 9497 0
	cmpq	$0, -104(%rbp)	#, label
	je	.L2363	#,
	.loc 1 9499 0
	movq	-104(%rbp), %rax	# label, tmp291
	movq	%rax, %rdi	# tmp291,
	call	emit_label	#
	.loc 1 9500 0
	movq	-104(%rbp), %rax	# label, tmp292
	movl	$1, 32(%rax)	#, label_6->fld[3].rtint
.L2363:
	.loc 1 9503 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1195
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2364	#,
	.loc 1 9503 0 is_stmt 0 discriminator 1
	cmpq	$4, -120(%rbp)	#, align
	jle	.L2364	#,
	cmpq	$0, -112(%rbp)	#, count
	je	.L2364	#,
	movq	-112(%rbp), %rax	# count, tmp293
	andl	$4, %eax	#, D.30420
	testq	%rax, %rax	# D.30420
	je	.L2364	#,
	.loc 1 9504 0 is_stmt 1
	movq	-80(%rbp), %rax	# zeroreg, tmp294
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp294,
	movl	$4, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp295
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp295,
	call	gen_strsetsi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
.L2364:
	.loc 1 9506 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1196
	andl	$33554432, %eax	#, D.30415
	testl	%eax, %eax	# D.30415
	je	.L2365	#,
	.loc 1 9506 0 is_stmt 0 discriminator 1
	cmpq	$4, -120(%rbp)	#, align
	jle	.L2366	#,
	cmpq	$0, -112(%rbp)	#, count
	jne	.L2365	#,
.L2366:
.LBB111:
	.loc 1 9508 0 is_stmt 1
	movq	-88(%rbp), %rax	# countreg, tmp296
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp296,
	call	ix86_expand_aligntest	#
	movq	%rax, -40(%rbp)	# tmp297, label
	.loc 1 9509 0
	movq	-80(%rbp), %rax	# zeroreg, tmp298
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp298,
	movl	$4, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp299
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp299,
	call	gen_strsetsi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9511 0
	movq	-40(%rbp), %rax	# label, tmp300
	movq	%rax, %rdi	# tmp300,
	call	emit_label	#
	.loc 1 9512 0
	movq	-40(%rbp), %rax	# label, tmp301
	movl	$1, 32(%rax)	#, label_174->fld[3].rtint
.L2365:
.LBE111:
	.loc 1 9514 0
	cmpq	$2, -120(%rbp)	#, align
	jle	.L2367	#,
	.loc 1 9514 0 is_stmt 0 discriminator 1
	cmpq	$0, -112(%rbp)	#, count
	je	.L2367	#,
	movq	-112(%rbp), %rax	# count, tmp302
	andl	$2, %eax	#, D.30420
	testq	%rax, %rax	# D.30420
	je	.L2367	#,
	.loc 1 9515 0 is_stmt 1
	movq	-80(%rbp), %rax	# zeroreg, tmp303
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp303,
	movl	$3, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp304
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp304,
	call	gen_strsethi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
.L2367:
	.loc 1 9517 0
	cmpq	$2, -120(%rbp)	#, align
	jle	.L2368	#,
	.loc 1 9517 0 is_stmt 0 discriminator 1
	cmpq	$0, -112(%rbp)	#, count
	jne	.L2369	#,
.L2368:
.LBB112:
	.loc 1 9519 0 is_stmt 1
	movq	-88(%rbp), %rax	# countreg, tmp305
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp305,
	call	ix86_expand_aligntest	#
	movq	%rax, -32(%rbp)	# tmp306, label
	.loc 1 9520 0
	movq	-80(%rbp), %rax	# zeroreg, tmp307
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp307,
	movl	$3, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp308
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp308,
	call	gen_strsethi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9522 0
	movq	-32(%rbp), %rax	# label, tmp309
	movq	%rax, %rdi	# tmp309,
	call	emit_label	#
	.loc 1 9523 0
	movq	-32(%rbp), %rax	# label, tmp310
	movl	$1, 32(%rax)	#, label_180->fld[3].rtint
.L2369:
.LBE112:
	.loc 1 9525 0
	cmpq	$1, -120(%rbp)	#, align
	jle	.L2370	#,
	.loc 1 9525 0 is_stmt 0 discriminator 1
	cmpq	$0, -112(%rbp)	#, count
	je	.L2370	#,
	movq	-112(%rbp), %rax	# count, tmp311
	andl	$1, %eax	#, D.30420
	testq	%rax, %rax	# D.30420
	je	.L2370	#,
	.loc 1 9526 0 is_stmt 1
	movq	-80(%rbp), %rax	# zeroreg, tmp312
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp312,
	movl	$2, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp313
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp313,
	call	gen_strsetqi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
.L2370:
	.loc 1 9528 0
	cmpq	$1, -120(%rbp)	#, align
	jle	.L2371	#,
	.loc 1 9528 0 is_stmt 0 discriminator 1
	cmpq	$0, -112(%rbp)	#, count
	jne	.L2320	#,
.L2371:
.LBB113:
	.loc 1 9530 0 is_stmt 1
	movq	-88(%rbp), %rax	# countreg, tmp314
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp314,
	call	ix86_expand_aligntest	#
	movq	%rax, -24(%rbp)	# tmp315, label
	.loc 1 9531 0
	movq	-80(%rbp), %rax	# zeroreg, tmp316
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp316,
	movl	$2, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, %rdx	#, D.30419
	movq	-96(%rbp), %rax	# destreg, tmp317
	movq	%rdx, %rsi	# D.30419,
	movq	%rax, %rdi	# tmp317,
	call	gen_strsetqi	#
	movq	%rax, %rdi	# D.30419,
	call	emit_insn	#
	.loc 1 9533 0
	movq	-24(%rbp), %rax	# label, tmp318
	movq	%rax, %rdi	# tmp318,
	call	emit_label	#
	.loc 1 9534 0
	movq	-24(%rbp), %rax	# label, tmp319
	movl	$1, 32(%rax)	#, label_186->fld[3].rtint
.L2320:
.LBE113:
.LBE107:
	.loc 1 9537 0
	movl	$1, %eax	#, D.30415
.L2347:
	.loc 1 9538 0
	addq	$168, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE143:
	.size	ix86_expand_clrstr, .-ix86_expand_clrstr
	.globl	ix86_expand_strlen
	.type	ix86_expand_strlen, @function
ix86_expand_strlen:
.LFB144:
	.loc 1 9543 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -56(%rbp)	# out, out
	movq	%rsi, -64(%rbp)	# src, src
	movq	%rdx, -72(%rbp)	# eoschar, eoschar
	movq	%rcx, -80(%rbp)	# align, align
	.loc 1 9549 0
	movl	$62, %edx	#, x86_unroll_strlen.1197
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1198
	movl	%eax, %ecx	# ix86_cpu.1199, tmp157
	sarl	%cl, %edx	# tmp157, D.30421
	movl	%edx, %eax	# D.30421, D.30421
	andl	$1, %eax	#, D.30421
	testl	%eax, %eax	# D.30421
	je	.L2373	#,
	.loc 1 9549 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30422
	cmpq	-72(%rbp), %rax	# eoschar, D.30422
	jne	.L2373	#,
	movl	optimize(%rip), %eax	# optimize, optimize.1200
	cmpl	$1, %eax	#, optimize.1200
	jle	.L2373	#,
	.loc 1 9550 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1201
	andl	$1024, %eax	#, D.30421
	testl	%eax, %eax	# D.30421
	jne	.L2373	#,
	.loc 1 9551 0
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.1202
	testl	%eax, %eax	# optimize_size.1202
	jne	.L2373	#,
	.loc 1 9552 0
	movq	-80(%rbp), %rax	# align, tmp113
	movzwl	(%rax), %eax	# align_18(D)->code, D.30423
	cmpw	$54, %ax	#, D.30423
	jne	.L2374	#,
	.loc 1 9552 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# align, tmp114
	movq	8(%rax), %rax	# align_18(D)->fld[0].rtwint, D.30424
	cmpq	$3, %rax	#, D.30424
	jg	.L2373	#,
.L2374:
	.loc 1 9553 0 is_stmt 1
	movl	$0, %eax	#, D.30421
	jmp	.L2375	#
.L2373:
	.loc 1 9555 0
	movq	-64(%rbp), %rax	# src, tmp115
	movq	8(%rax), %rdx	# src_22(D)->fld[0].rtx, D.30422
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1204
	andl	$33554432, %eax	#, D.30421
	testl	%eax, %eax	# D.30421
	je	.L2376	#,
	.loc 1 9555 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1203
	jmp	.L2377	#
.L2376:
	.loc 1 9555 0 discriminator 2
	movl	$4, %eax	#, iftmp.1203
.L2377:
	.loc 1 9555 0 discriminator 3
	movq	%rdx, %rsi	# D.30422,
	movl	%eax, %edi	# iftmp.1203,
	call	force_reg	#
	movq	%rax, -40(%rbp)	# tmp116, addr
	.loc 1 9556 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1206
	andl	$33554432, %eax	#, D.30421
	testl	%eax, %eax	# D.30421
	je	.L2378	#,
	.loc 1 9556 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1205
	jmp	.L2379	#
.L2378:
	.loc 1 9556 0 discriminator 2
	movl	$4, %eax	#, iftmp.1205
.L2379:
	.loc 1 9556 0 discriminator 3
	movl	%eax, %edi	# iftmp.1205,
	call	gen_reg_rtx	#
	movq	%rax, -32(%rbp)	# tmp117, scratch1
	.loc 1 9558 0 is_stmt 1 discriminator 3
	movl	$62, %edx	#, x86_unroll_strlen.1207
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1208
	movl	%eax, %ecx	# ix86_cpu.1209, tmp159
	sarl	%cl, %edx	# tmp159, D.30421
	movl	%edx, %eax	# D.30421, D.30421
	andl	$1, %eax	#, D.30421
	testl	%eax, %eax	# D.30421
	je	.L2380	#,
	.loc 1 9558 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30422
	cmpq	-72(%rbp), %rax	# eoschar, D.30422
	jne	.L2380	#,
	movl	optimize(%rip), %eax	# optimize, optimize.1210
	cmpl	$1, %eax	#, optimize.1210
	jle	.L2380	#,
	.loc 1 9559 0 is_stmt 1
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.1211
	testl	%eax, %eax	# optimize_size.1211
	jne	.L2380	#,
	.loc 1 9569 0
	movq	-40(%rbp), %rdx	# addr, tmp118
	movq	-56(%rbp), %rax	# out, tmp119
	movq	%rdx, %rsi	# tmp118,
	movq	%rax, %rdi	# tmp119,
	call	emit_move_insn	#
	.loc 1 9571 0
	movq	-80(%rbp), %rdx	# align, tmp120
	movq	-56(%rbp), %rax	# out, tmp121
	movq	%rdx, %rsi	# tmp120,
	movq	%rax, %rdi	# tmp121,
	call	ix86_expand_strlensi_unroll_1	#
	.loc 1 9576 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1212
	andl	$33554432, %eax	#, D.30421
	testl	%eax, %eax	# D.30421
	je	.L2381	#,
	.loc 1 9577 0
	movq	-40(%rbp), %rdx	# addr, tmp122
	movq	-56(%rbp), %rcx	# out, tmp123
	movq	-56(%rbp), %rax	# out, tmp124
	movq	%rcx, %rsi	# tmp123,
	movq	%rax, %rdi	# tmp124,
	call	gen_subdi3	#
	movq	%rax, %rdi	# D.30422,
	call	emit_insn	#
	.loc 1 9576 0
	jmp	.L2383	#
.L2381:
	.loc 1 9579 0
	movq	-40(%rbp), %rdx	# addr, tmp125
	movq	-56(%rbp), %rcx	# out, tmp126
	movq	-56(%rbp), %rax	# out, tmp127
	movq	%rcx, %rsi	# tmp126,
	movq	%rax, %rdi	# tmp127,
	call	gen_subsi3	#
	movq	%rax, %rdi	# D.30422,
	call	emit_insn	#
	.loc 1 9576 0
	jmp	.L2383	#
.L2380:
	.loc 1 9583 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1214
	andl	$33554432, %eax	#, D.30421
	testl	%eax, %eax	# D.30421
	je	.L2384	#,
	.loc 1 9583 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1213
	jmp	.L2385	#
.L2384:
	.loc 1 9583 0 discriminator 2
	movl	$4, %eax	#, iftmp.1213
.L2385:
	.loc 1 9583 0 discriminator 3
	movl	%eax, %edi	# iftmp.1213,
	call	gen_reg_rtx	#
	movq	%rax, -24(%rbp)	# tmp128, scratch2
	.loc 1 9584 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1216
	andl	$33554432, %eax	#, D.30421
	testl	%eax, %eax	# D.30421
	je	.L2386	#,
	.loc 1 9584 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1215
	jmp	.L2387	#
.L2386:
	.loc 1 9584 0 discriminator 2
	movl	$4, %eax	#, iftmp.1215
.L2387:
	.loc 1 9584 0 discriminator 3
	movl	%eax, %edi	# iftmp.1215,
	call	gen_reg_rtx	#
	movq	%rax, -16(%rbp)	# tmp129, scratch3
	.loc 1 9585 0 is_stmt 1 discriminator 3
	movq	const_int_rtx+504(%rip), %rdx	# const_int_rtx, D.30422
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1218
	andl	$33554432, %eax	#, D.30421
	testl	%eax, %eax	# D.30421
	je	.L2388	#,
	.loc 1 9585 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1217
	jmp	.L2389	#
.L2388:
	.loc 1 9585 0 discriminator 2
	movl	$4, %eax	#, iftmp.1217
.L2389:
	.loc 1 9585 0 discriminator 3
	movq	%rdx, %rsi	# D.30422,
	movl	%eax, %edi	# iftmp.1217,
	call	force_reg	#
	movq	%rax, -8(%rbp)	# tmp130, scratch4
	.loc 1 9587 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rdx	# addr, tmp131
	movq	-16(%rbp), %rax	# scratch3, tmp132
	movq	%rdx, %rsi	# tmp131,
	movq	%rax, %rdi	# tmp132,
	call	emit_move_insn	#
	.loc 1 9588 0 discriminator 3
	movq	-72(%rbp), %rax	# eoschar, tmp133
	movq	%rax, %rsi	# tmp133,
	movl	$2, %edi	#,
	call	force_reg	#
	movq	%rax, -72(%rbp)	# tmp134, eoschar
	.loc 1 9590 0 discriminator 3
	call	gen_cld	#
	movq	%rax, %rdi	# D.30422,
	call	emit_insn	#
	.loc 1 9591 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1219
	andl	$33554432, %eax	#, D.30421
	testl	%eax, %eax	# D.30421
	je	.L2390	#,
	.loc 1 9593 0
	movq	-16(%rbp), %r8	# scratch3, tmp135
	movq	-8(%rbp), %rdi	# scratch4, tmp136
	movq	-80(%rbp), %rcx	# align, tmp137
	movq	-72(%rbp), %rdx	# eoschar, tmp138
	movq	-16(%rbp), %rsi	# scratch3, tmp139
	movq	-32(%rbp), %rax	# scratch1, tmp140
	movq	%r8, %r9	# tmp135,
	movq	%rdi, %r8	# tmp136,
	movq	%rax, %rdi	# tmp140,
	call	gen_strlenqi_rex_1	#
	movq	%rax, %rdi	# D.30422,
	call	emit_insn	#
	.loc 1 9595 0
	movq	-32(%rbp), %rdx	# scratch1, tmp141
	movq	-24(%rbp), %rax	# scratch2, tmp142
	movq	%rdx, %rsi	# tmp141,
	movq	%rax, %rdi	# tmp142,
	call	gen_one_cmpldi2	#
	movq	%rax, %rdi	# D.30422,
	call	emit_insn	#
	.loc 1 9596 0
	movq	const_int_rtx+504(%rip), %rdx	# const_int_rtx, D.30422
	movq	-24(%rbp), %rcx	# scratch2, tmp143
	movq	-56(%rbp), %rax	# out, tmp144
	movq	%rcx, %rsi	# tmp143,
	movq	%rax, %rdi	# tmp144,
	call	gen_adddi3	#
	movq	%rax, %rdi	# D.30422,
	call	emit_insn	#
	jmp	.L2383	#
.L2390:
	.loc 1 9600 0
	movq	-16(%rbp), %r8	# scratch3, tmp145
	movq	-8(%rbp), %rdi	# scratch4, tmp146
	movq	-80(%rbp), %rcx	# align, tmp147
	movq	-72(%rbp), %rdx	# eoschar, tmp148
	movq	-16(%rbp), %rsi	# scratch3, tmp149
	movq	-32(%rbp), %rax	# scratch1, tmp150
	movq	%r8, %r9	# tmp145,
	movq	%rdi, %r8	# tmp146,
	movq	%rax, %rdi	# tmp150,
	call	gen_strlenqi_1	#
	movq	%rax, %rdi	# D.30422,
	call	emit_insn	#
	.loc 1 9602 0
	movq	-32(%rbp), %rdx	# scratch1, tmp151
	movq	-24(%rbp), %rax	# scratch2, tmp152
	movq	%rdx, %rsi	# tmp151,
	movq	%rax, %rdi	# tmp152,
	call	gen_one_cmplsi2	#
	movq	%rax, %rdi	# D.30422,
	call	emit_insn	#
	.loc 1 9603 0
	movq	const_int_rtx+504(%rip), %rdx	# const_int_rtx, D.30422
	movq	-24(%rbp), %rcx	# scratch2, tmp153
	movq	-56(%rbp), %rax	# out, tmp154
	movq	%rcx, %rsi	# tmp153,
	movq	%rax, %rdi	# tmp154,
	call	gen_addsi3	#
	movq	%rax, %rdi	# D.30422,
	call	emit_insn	#
.L2383:
	.loc 1 9606 0
	movl	$1, %eax	#, D.30421
.L2375:
	.loc 1 9607 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE144:
	.size	ix86_expand_strlen, .-ix86_expand_strlen
	.type	ix86_expand_strlensi_unroll_1, @function
ix86_expand_strlensi_unroll_1:
.LFB145:
	.loc 1 9623 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$152, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -136(%rbp)	# out, out
	movq	%rsi, -144(%rbp)	# align_rtx, align_rtx
	.loc 1 9626 0
	movq	$0, -112(%rbp)	#, align_2_label
	.loc 1 9627 0
	movq	$0, -104(%rbp)	#, align_3_label
	.loc 1 9628 0
	call	gen_label_rtx	#
	movq	%rax, -96(%rbp)	# tmp175, align_4_label
	.loc 1 9629 0
	call	gen_label_rtx	#
	movq	%rax, -88(%rbp)	# tmp176, end_0_label
	.loc 1 9631 0
	movl	$4, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -80(%rbp)	# tmp177, tmpreg
	.loc 1 9632 0
	movl	$4, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -72(%rbp)	# tmp178, scratch
	.loc 1 9634 0
	movl	$0, -116(%rbp)	#, align
	.loc 1 9635 0
	movq	-144(%rbp), %rax	# align_rtx, tmp179
	movzwl	(%rax), %eax	# align_rtx_21(D)->code, D.30425
	cmpw	$54, %ax	#, D.30425
	jne	.L2392	#,
	.loc 1 9636 0
	movq	-144(%rbp), %rax	# align_rtx, tmp180
	movq	8(%rax), %rax	# align_rtx_21(D)->fld[0].rtwint, D.30426
	movl	%eax, -116(%rbp)	# D.30426, align
.L2392:
	.loc 1 9641 0
	cmpl	$3, -116(%rbp)	#, align
	jg	.L2393	#,
.LBB114:
	.loc 1 9643 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1221
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2394	#,
	.loc 1 9643 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1220
	jmp	.L2395	#
.L2394:
	.loc 1 9643 0 discriminator 2
	movl	$4, %eax	#, iftmp.1220
.L2395:
	.loc 1 9643 0 discriminator 3
	movl	%eax, %edi	# iftmp.1220,
	call	gen_reg_rtx	#
	movq	%rax, -64(%rbp)	# tmp181, scratch1
	.loc 1 9644 0 is_stmt 1 discriminator 3
	movq	-136(%rbp), %rdx	# out, tmp182
	movq	-64(%rbp), %rax	# scratch1, tmp183
	movq	%rdx, %rsi	# tmp182,
	movq	%rax, %rdi	# tmp183,
	call	emit_move_insn	#
	.loc 1 9646 0 discriminator 3
	cmpl	$2, -116(%rbp)	#, align
	je	.L2396	#,
	.loc 1 9648 0
	call	gen_label_rtx	#
	movq	%rax, -104(%rbp)	# tmp184, align_3_label
	.loc 1 9649 0
	call	gen_label_rtx	#
	movq	%rax, -112(%rbp)	# tmp185, align_2_label
	.loc 1 9652 0
	movl	$3, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30428
	movq	optab_table+144(%rip), %rsi	# optab_table, D.30429
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1223
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2397	#,
	.loc 1 9652 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1222
	jmp	.L2398	#
.L2397:
	.loc 1 9652 0 discriminator 2
	movl	$4, %eax	#, iftmp.1222
.L2398:
	.loc 1 9652 0 discriminator 3
	movq	-64(%rbp), %rdx	# scratch1, tmp186
	movl	$2, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movl	%eax, %edi	# iftmp.1222,
	call	expand_binop	#
	movq	%rax, -144(%rbp)	# tmp187, align_rtx
	.loc 1 9656 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1225
	andl	$33554432, %eax	#, D.30427
	.loc 1 9655 0 discriminator 3
	testl	%eax, %eax	# D.30427
	je	.L2399	#,
	.loc 1 9655 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1224
	jmp	.L2400	#
.L2399:
	.loc 1 9655 0 discriminator 2
	movl	$4, %eax	#, iftmp.1224
.L2400:
	.loc 1 9655 0 discriminator 3
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.30428
	movq	-144(%rbp), %rdi	# align_rtx, tmp188
	movq	-96(%rbp), %rdx	# align_4_label, tmp189
	movq	%rdx, (%rsp)	# tmp189,
	movl	$1, %r9d	#,
	movl	%eax, %r8d	# iftmp.1224,
	movl	$0, %ecx	#,
	movl	$103, %edx	#,
	call	emit_cmp_and_jump_insns	#
	.loc 1 9658 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1227
	andl	$33554432, %eax	#, D.30427
	.loc 1 9657 0 discriminator 3
	testl	%eax, %eax	# D.30427
	je	.L2401	#,
	.loc 1 9657 0 is_stmt 0 discriminator 1
	movl	$5, %ebx	#, iftmp.1226
	jmp	.L2402	#
.L2401:
	.loc 1 9657 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1226
.L2402:
	.loc 1 9657 0 discriminator 3
	movl	$2, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rsi	#, D.30428
	movq	-144(%rbp), %rax	# align_rtx, tmp190
	movq	-112(%rbp), %rdx	# align_2_label, tmp191
	movq	%rdx, (%rsp)	# tmp191,
	movl	$1, %r9d	#,
	movl	%ebx, %r8d	# iftmp.1226,
	movl	$0, %ecx	#,
	movl	$103, %edx	#,
	movq	%rax, %rdi	# tmp190,
	call	emit_cmp_and_jump_insns	#
	.loc 1 9660 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1229
	andl	$33554432, %eax	#, D.30427
	.loc 1 9659 0 discriminator 3
	testl	%eax, %eax	# D.30427
	je	.L2403	#,
	.loc 1 9659 0 is_stmt 0 discriminator 1
	movl	$5, %ebx	#, iftmp.1228
	jmp	.L2404	#
.L2403:
	.loc 1 9659 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1228
.L2404:
	.loc 1 9659 0 discriminator 1
	movl	$2, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rsi	#, D.30428
	movq	-144(%rbp), %rax	# align_rtx, tmp192
	movq	-104(%rbp), %rdx	# align_3_label, tmp193
	movq	%rdx, (%rsp)	# tmp193,
	movl	$1, %r9d	#,
	movl	%ebx, %r8d	# iftmp.1228,
	movl	$0, %ecx	#,
	movl	$109, %edx	#,
	movq	%rax, %rdi	# tmp192,
	call	emit_cmp_and_jump_insns	#
	jmp	.L2405	#
.L2396:
	.loc 1 9667 0 is_stmt 1
	movl	$2, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30428
	movq	optab_table+144(%rip), %rsi	# optab_table, D.30429
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1231
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2406	#,
	.loc 1 9667 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1230
	jmp	.L2407	#
.L2406:
	.loc 1 9667 0 discriminator 2
	movl	$4, %eax	#, iftmp.1230
.L2407:
	.loc 1 9667 0 discriminator 3
	movq	-64(%rbp), %rdx	# scratch1, tmp194
	movl	$2, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movl	%eax, %edi	# iftmp.1230,
	call	expand_binop	#
	movq	%rax, -144(%rbp)	# tmp195, align_rtx
	.loc 1 9671 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1233
	andl	$33554432, %eax	#, D.30427
	.loc 1 9670 0 discriminator 3
	testl	%eax, %eax	# D.30427
	je	.L2408	#,
	.loc 1 9670 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1232
	jmp	.L2409	#
.L2408:
	.loc 1 9670 0 discriminator 2
	movl	$4, %eax	#, iftmp.1232
.L2409:
	.loc 1 9670 0 discriminator 3
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.30428
	movq	-144(%rbp), %rdi	# align_rtx, tmp196
	movq	-96(%rbp), %rdx	# align_4_label, tmp197
	movq	%rdx, (%rsp)	# tmp197,
	movl	$1, %r9d	#,
	movl	%eax, %r8d	# iftmp.1232,
	movl	$0, %ecx	#,
	movl	$103, %edx	#,
	call	emit_cmp_and_jump_insns	#
.L2405:
	.loc 1 9674 0 is_stmt 1
	movq	-136(%rbp), %rax	# out, tmp198
	movq	%rax, %rsi	# tmp198,
	movl	$2, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -56(%rbp)	# tmp199, mem
	.loc 1 9679 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.30428
	movq	-56(%rbp), %rax	# mem, tmp200
	movq	-88(%rbp), %rdx	# end_0_label, tmp201
	movq	%rdx, (%rsp)	# tmp201,
	movl	$1, %r9d	#,
	movl	$2, %r8d	#,
	movl	$0, %ecx	#,
	movl	$103, %edx	#,
	movq	%rax, %rdi	# tmp200,
	call	emit_cmp_and_jump_insns	#
	.loc 1 9683 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1234
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2410	#,
	.loc 1 9684 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.30428
	movq	-136(%rbp), %rcx	# out, tmp202
	movq	-136(%rbp), %rax	# out, tmp203
	movq	%rcx, %rsi	# tmp202,
	movq	%rax, %rdi	# tmp203,
	call	gen_adddi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	jmp	.L2411	#
.L2410:
	.loc 1 9686 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.30428
	movq	-136(%rbp), %rcx	# out, tmp204
	movq	-136(%rbp), %rax	# out, tmp205
	movq	%rcx, %rsi	# tmp204,
	movq	%rax, %rdi	# tmp205,
	call	gen_addsi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
.L2411:
	.loc 1 9689 0
	cmpl	$2, -116(%rbp)	#, align
	je	.L2412	#,
	.loc 1 9691 0
	movq	-112(%rbp), %rax	# align_2_label, tmp206
	movq	%rax, %rdi	# tmp206,
	call	emit_label	#
	.loc 1 9693 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.30428
	movq	-56(%rbp), %rax	# mem, tmp207
	movq	-88(%rbp), %rdx	# end_0_label, tmp208
	movq	%rdx, (%rsp)	# tmp208,
	movl	$1, %r9d	#,
	movl	$2, %r8d	#,
	movl	$0, %ecx	#,
	movl	$103, %edx	#,
	movq	%rax, %rdi	# tmp207,
	call	emit_cmp_and_jump_insns	#
	.loc 1 9696 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1235
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2413	#,
	.loc 1 9697 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.30428
	movq	-136(%rbp), %rcx	# out, tmp209
	movq	-136(%rbp), %rax	# out, tmp210
	movq	%rcx, %rsi	# tmp209,
	movq	%rax, %rdi	# tmp210,
	call	gen_adddi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	jmp	.L2414	#
.L2413:
	.loc 1 9699 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.30428
	movq	-136(%rbp), %rcx	# out, tmp211
	movq	-136(%rbp), %rax	# out, tmp212
	movq	%rcx, %rsi	# tmp211,
	movq	%rax, %rdi	# tmp212,
	call	gen_addsi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
.L2414:
	.loc 1 9701 0
	movq	-104(%rbp), %rax	# align_3_label, tmp213
	movq	%rax, %rdi	# tmp213,
	call	emit_label	#
.L2412:
	.loc 1 9704 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.30428
	movq	-56(%rbp), %rax	# mem, tmp214
	movq	-88(%rbp), %rdx	# end_0_label, tmp215
	movq	%rdx, (%rsp)	# tmp215,
	movl	$1, %r9d	#,
	movl	$2, %r8d	#,
	movl	$0, %ecx	#,
	movl	$103, %edx	#,
	movq	%rax, %rdi	# tmp214,
	call	emit_cmp_and_jump_insns	#
	.loc 1 9707 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1236
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2415	#,
	.loc 1 9708 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.30428
	movq	-136(%rbp), %rcx	# out, tmp216
	movq	-136(%rbp), %rax	# out, tmp217
	movq	%rcx, %rsi	# tmp216,
	movq	%rax, %rdi	# tmp217,
	call	gen_adddi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	jmp	.L2393	#
.L2415:
	.loc 1 9710 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.30428
	movq	-136(%rbp), %rcx	# out, tmp218
	movq	-136(%rbp), %rax	# out, tmp219
	movq	%rcx, %rsi	# tmp218,
	movq	%rax, %rdi	# tmp219,
	call	gen_addsi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
.L2393:
.LBE114:
	.loc 1 9716 0
	movq	-96(%rbp), %rax	# align_4_label, tmp220
	movq	%rax, %rdi	# tmp220,
	call	emit_label	#
	.loc 1 9718 0
	movq	-136(%rbp), %rax	# out, tmp221
	movq	%rax, %rsi	# tmp221,
	movl	$4, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -56(%rbp)	# tmp222, mem
	.loc 1 9719 0
	movq	-56(%rbp), %rdx	# mem, tmp223
	movq	-72(%rbp), %rax	# scratch, tmp224
	movq	%rdx, %rsi	# tmp223,
	movq	%rax, %rdi	# tmp224,
	call	emit_move_insn	#
	.loc 1 9720 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1237
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2416	#,
	.loc 1 9721 0
	movl	$4, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-136(%rbp), %rcx	# out, tmp225
	movq	-136(%rbp), %rax	# out, tmp226
	movq	%rcx, %rsi	# tmp225,
	movq	%rax, %rdi	# tmp226,
	call	gen_adddi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	jmp	.L2417	#
.L2416:
	.loc 1 9723 0
	movl	$4, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-136(%rbp), %rcx	# out, tmp227
	movq	-136(%rbp), %rax	# out, tmp228
	movq	%rcx, %rsi	# tmp227,
	movq	%rax, %rdi	# tmp228,
	call	gen_addsi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
.L2417:
	.loc 1 9728 0
	movq	$-16843009, %rsi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-72(%rbp), %rcx	# scratch, tmp229
	movq	-80(%rbp), %rax	# tmpreg, tmp230
	movq	%rcx, %rsi	# tmp229,
	movq	%rax, %rdi	# tmp230,
	call	gen_addsi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9729 0
	movq	-72(%rbp), %rdx	# scratch, tmp231
	movq	-72(%rbp), %rax	# scratch, tmp232
	movq	%rdx, %rsi	# tmp231,
	movq	%rax, %rdi	# tmp232,
	call	gen_one_cmplsi2	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9730 0
	movq	-72(%rbp), %rdx	# scratch, tmp233
	movq	-80(%rbp), %rcx	# tmpreg, tmp234
	movq	-80(%rbp), %rax	# tmpreg, tmp235
	movq	%rcx, %rsi	# tmp234,
	movq	%rax, %rdi	# tmp235,
	call	gen_andsi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9731 0
	movl	$4, %esi	#,
	movl	$2155905152, %edi	#,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30426,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-80(%rbp), %rcx	# tmpreg, tmp236
	movq	-80(%rbp), %rax	# tmpreg, tmp237
	movq	%rcx, %rsi	# tmp236,
	movq	%rax, %rdi	# tmp237,
	call	gen_andsi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9734 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.30428
	movq	-80(%rbp), %rax	# tmpreg, tmp238
	movq	-96(%rbp), %rdx	# align_4_label, tmp239
	movq	%rdx, (%rsp)	# tmp239,
	movl	$1, %r9d	#,
	movl	$4, %r8d	#,
	movl	$0, %ecx	#,
	movl	$103, %edx	#,
	movq	%rax, %rdi	# tmp238,
	call	emit_cmp_and_jump_insns	#
	.loc 1 9737 0
	movl	$104, %edx	#, x86_cmove.1238
	movl	ix86_arch(%rip), %eax	# ix86_arch, ix86_arch.1239
	movl	%eax, %ecx	# ix86_arch.1239, tmp293
	sarl	%cl, %edx	# tmp293, D.30427
	movl	%edx, %eax	# D.30427, D.30427
	andl	$1, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	jne	.L2418	#,
	.loc 1 9737 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1240
	andl	$327680, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2419	#,
.L2418:
.LBB115:
	.loc 1 9739 0 is_stmt 1
	movl	$4, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -32(%rbp)	# tmp240, reg
	.loc 1 9740 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1242
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2420	#,
	.loc 1 9740 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1241
	jmp	.L2421	#
.L2420:
	.loc 1 9740 0 discriminator 2
	movl	$4, %eax	#, iftmp.1241
.L2421:
	.loc 1 9740 0 discriminator 3
	movl	%eax, %edi	# iftmp.1241,
	call	gen_reg_rtx	#
	movq	%rax, -24(%rbp)	# tmp241, reg2
	.loc 1 9741 0 is_stmt 1 discriminator 3
	movq	-80(%rbp), %rdx	# tmpreg, tmp242
	movq	-32(%rbp), %rax	# reg, tmp243
	movq	%rdx, %rsi	# tmp242,
	movq	%rax, %rdi	# tmp243,
	call	emit_move_insn	#
	.loc 1 9742 0 discriminator 3
	movl	$16, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-32(%rbp), %rcx	# reg, tmp244
	movq	-32(%rbp), %rax	# reg, tmp245
	movq	%rcx, %rsi	# tmp244,
	movq	%rax, %rdi	# tmp245,
	call	gen_lshrsi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9745 0 discriminator 3
	movl	$32896, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-80(%rbp), %rax	# tmpreg, tmp246
	movq	%rdx, %rsi	# D.30428,
	movq	%rax, %rdi	# tmp246,
	call	gen_testsi_ccno_1	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9746 0 discriminator 3
	movl	$17, %esi	#,
	movl	$55, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -40(%rbp)	# tmp247, tmp
	.loc 1 9747 0 discriminator 3
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30428
	movq	-40(%rbp), %rax	# tmp, tmp248
	movq	%rdx, %rcx	# D.30428,
	movq	%rax, %rdx	# tmp248,
	movl	$0, %esi	#,
	movl	$103, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -40(%rbp)	# tmp249, tmp
	.loc 1 9748 0 discriminator 3
	movq	-80(%rbp), %rcx	# tmpreg, tmp250
	movq	-32(%rbp), %rdx	# reg, tmp251
	movq	-40(%rbp), %rax	# tmp, tmp252
	movq	%rcx, %r8	# tmp250,
	movq	%rdx, %rcx	# tmp251,
	movq	%rax, %rdx	# tmp252,
	movl	$4, %esi	#,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30428
	movq	-80(%rbp), %rax	# tmpreg, tmp253
	movq	%rdx, %rcx	# D.30428,
	movq	%rax, %rdx	# tmp253,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9753 0 discriminator 3
	movl	$2, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30428
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1244
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2422	#,
	.loc 1 9753 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1243
	jmp	.L2423	#
.L2422:
	.loc 1 9753 0 discriminator 2
	movl	$4, %eax	#, iftmp.1243
.L2423:
	.loc 1 9753 0 discriminator 3
	movq	-136(%rbp), %rdx	# out, tmp254
	movl	%eax, %esi	# iftmp.1243,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.30428
	movq	-24(%rbp), %rax	# reg2, tmp255
	movq	%rdx, %rcx	# D.30428,
	movq	%rax, %rdx	# tmp255,
	movl	$4, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9756 0 is_stmt 1 discriminator 3
	movl	$17, %esi	#,
	movl	$55, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -40(%rbp)	# tmp256, tmp
	.loc 1 9757 0 discriminator 3
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30428
	movq	-40(%rbp), %rax	# tmp, tmp257
	movq	%rdx, %rcx	# D.30428,
	movq	%rax, %rdx	# tmp257,
	movl	$0, %esi	#,
	movl	$103, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -40(%rbp)	# tmp258, tmp
	.loc 1 9758 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1246
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2424	#,
	.loc 1 9758 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1245
	jmp	.L2425	#
.L2424:
	.loc 1 9758 0 discriminator 2
	movl	$4, %eax	#, iftmp.1245
.L2425:
	.loc 1 9758 0 discriminator 3
	movq	-136(%rbp), %rsi	# out, tmp259
	movq	-24(%rbp), %rcx	# reg2, tmp260
	movq	-40(%rbp), %rdx	# tmp, tmp261
	movq	%rsi, %r8	# tmp259,
	movl	%eax, %esi	# iftmp.1245,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, %rdx	#, D.30428
	movq	-136(%rbp), %rax	# out, tmp262
	movq	%rdx, %rcx	# D.30428,
	movq	%rax, %rdx	# tmp262,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
.LBE115:
	.loc 1 9738 0 is_stmt 1 discriminator 3
	jmp	.L2426	#
.L2419:
.LBB116:
	.loc 1 9766 0
	call	gen_label_rtx	#
	movq	%rax, -48(%rbp)	# tmp263, end_2_label
	.loc 1 9769 0
	movl	$32896, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-80(%rbp), %rax	# tmpreg, tmp264
	movq	%rdx, %rsi	# D.30428,
	movq	%rax, %rdi	# tmp264,
	call	gen_testsi_ccno_1	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9770 0
	movl	$17, %esi	#,
	movl	$55, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -40(%rbp)	# tmp265, tmp
	.loc 1 9771 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30428
	movq	-40(%rbp), %rax	# tmp, tmp266
	movq	%rdx, %rcx	# D.30428,
	movq	%rax, %rdx	# tmp266,
	movl	$0, %esi	#,
	movl	$102, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -40(%rbp)	# tmp267, tmp
	.loc 1 9772 0
	movq	global_rtl(%rip), %rbx	# global_rtl, D.30428
	movq	-48(%rbp), %rax	# end_2_label, tmp268
	movq	%rax, %rdx	# tmp268,
	movl	$0, %esi	#,
	movl	$67, %edi	#,
	call	gen_rtx_fmt_u00	#
	movq	%rax, %rdx	#, D.30428
	movq	-40(%rbp), %rax	# tmp, tmp269
	movq	%rbx, %r8	# D.30428,
	movq	%rdx, %rcx	# D.30428,
	movq	%rax, %rdx	# tmp269,
	movl	$0, %esi	#,
	movl	$72, %edi	#,
	call	gen_rtx_fmt_eee	#
	movq	%rax, -40(%rbp)	# tmp270, tmp
	.loc 1 9775 0
	movq	global_rtl(%rip), %rax	# global_rtl, D.30428
	movq	-40(%rbp), %rdx	# tmp, tmp271
	movq	%rdx, %rcx	# tmp271,
	movq	%rax, %rdx	# D.30428,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30428,
	call	emit_jump_insn	#
	movq	%rax, -40(%rbp)	# tmp272, tmp
	.loc 1 9776 0
	movq	-40(%rbp), %rax	# tmp, tmp273
	movq	-48(%rbp), %rdx	# end_2_label, tmp274
	movq	%rdx, 64(%rax)	# tmp274, tmp_121->fld[7].rtx
	.loc 1 9779 0
	movl	$16, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-80(%rbp), %rcx	# tmpreg, tmp275
	movq	-80(%rbp), %rax	# tmpreg, tmp276
	movq	%rcx, %rsi	# tmp275,
	movq	%rax, %rdi	# tmp276,
	call	gen_lshrsi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9780 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1247
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2427	#,
	.loc 1 9781 0
	movl	$2, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-136(%rbp), %rcx	# out, tmp277
	movq	-136(%rbp), %rax	# out, tmp278
	movq	%rcx, %rsi	# tmp277,
	movq	%rax, %rdi	# tmp278,
	call	gen_adddi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	jmp	.L2428	#
.L2427:
	.loc 1 9783 0
	movl	$2, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-136(%rbp), %rcx	# out, tmp279
	movq	-136(%rbp), %rax	# out, tmp280
	movq	%rcx, %rsi	# tmp279,
	movq	%rax, %rdi	# tmp280,
	call	gen_addsi3	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
.L2428:
	.loc 1 9785 0
	movq	-48(%rbp), %rax	# end_2_label, tmp281
	movq	%rax, %rdi	# tmp281,
	call	emit_label	#
.L2426:
.LBE116:
	.loc 1 9790 0
	movq	-80(%rbp), %rax	# tmpreg, tmp282
	movq	%rax, %rsi	# tmp282,
	movl	$2, %edi	#,
	call	gen_lowpart	#
	movq	%rax, -80(%rbp)	# tmp283, tmpreg
	.loc 1 9791 0
	movq	-80(%rbp), %rdx	# tmpreg, tmp284
	movq	-80(%rbp), %rcx	# tmpreg, tmp285
	movq	-80(%rbp), %rax	# tmpreg, tmp286
	movq	%rcx, %rsi	# tmp285,
	movq	%rax, %rdi	# tmp286,
	call	gen_addqi3_cc	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	.loc 1 9792 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1248
	andl	$33554432, %eax	#, D.30427
	testl	%eax, %eax	# D.30427
	je	.L2429	#,
	.loc 1 9793 0
	movl	$3, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-136(%rbp), %rcx	# out, tmp287
	movq	-136(%rbp), %rax	# out, tmp288
	movq	%rcx, %rsi	# tmp287,
	movq	%rax, %rdi	# tmp288,
	call	gen_subdi3_carry_rex64	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
	jmp	.L2430	#
.L2429:
	.loc 1 9795 0
	movl	$3, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.30428
	movq	-136(%rbp), %rcx	# out, tmp289
	movq	-136(%rbp), %rax	# out, tmp290
	movq	%rcx, %rsi	# tmp289,
	movq	%rax, %rdi	# tmp290,
	call	gen_subsi3_carry	#
	movq	%rax, %rdi	# D.30428,
	call	emit_insn	#
.L2430:
	.loc 1 9797 0
	movq	-88(%rbp), %rax	# end_0_label, tmp291
	movq	%rax, %rdi	# tmp291,
	call	emit_label	#
	.loc 1 9798 0
	addq	$152, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE145:
	.size	ix86_expand_strlensi_unroll_1, .-ix86_expand_strlensi_unroll_1
	.type	ix86_init_machine_status, @function
ix86_init_machine_status:
.LFB146:
	.loc 1 9807 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p, p
	.loc 1 9809 0
	movl	$1424, %esi	#,
	movl	$1, %edi	#,
	call	xcalloc	#
	movq	%rax, %rdx	# tmp60, D.30430
	.loc 1 9808 0
	movq	-8(%rbp), %rax	# p, tmp61
	movq	%rdx, 392(%rax)	# D.30430, p_2(D)->machine
	.loc 1 9810 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE146:
	.size	ix86_init_machine_status, .-ix86_init_machine_status
	.type	ix86_mark_machine_status, @function
ix86_mark_machine_status:
.LFB147:
	.loc 1 9816 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# p, p
	.loc 1 9817 0
	movq	-40(%rbp), %rax	# p, tmp64
	movq	392(%rax), %rax	# p_3(D)->machine, tmp65
	movq	%rax, -16(%rbp)	# tmp65, machine
	.loc 1 9821 0
	cmpq	$0, -16(%rbp)	#, machine
	jne	.L2433	#,
	.loc 1 9822 0
	jmp	.L2432	#
.L2433:
	.loc 1 9824 0
	movl	$0, -24(%rbp)	#, mode
	jmp	.L2435	#
.L2439:
	.loc 1 9826 0
	movl	$0, -20(%rbp)	#, n
	jmp	.L2436	#
.L2438:
.LBB117:
	.loc 1 9827 0
	movl	-24(%rbp), %eax	# mode, mode.1249
	movq	-16(%rbp), %rcx	# machine, tmp66
	movl	-20(%rbp), %edx	# n, tmp68
	movslq	%edx, %rsi	# tmp68, tmp67
	movslq	%eax, %rdx	# mode.1249, tmp69
	movq	%rdx, %rax	# tmp69, tmp70
	addq	%rax, %rax	# tmp70
	addq	%rdx, %rax	# tmp69, tmp70
	addq	%rsi, %rax	# tmp67, tmp71
	movq	(%rcx,%rax,8), %rax	# machine_4->stack_locals, tmp72
	movq	%rax, -8(%rbp)	# tmp72, r__
	cmpq	$0, -8(%rbp)	#, r__
	je	.L2437	#,
	.loc 1 9827 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# r__, tmp73
	movq	%rax, %rdi	# tmp73,
	call	ggc_set_mark	#
	testl	%eax, %eax	# D.30431
	jne	.L2437	#,
	movq	-8(%rbp), %rax	# r__, tmp74
	movq	%rax, %rdi	# tmp74,
	call	ggc_mark_rtx_children	#
.L2437:
.LBE117:
	.loc 1 9826 0 is_stmt 1
	addl	$1, -20(%rbp)	#, n
.L2436:
	.loc 1 9826 0 is_stmt 0 discriminator 1
	cmpl	$2, -20(%rbp)	#, n
	jle	.L2438	#,
	.loc 1 9825 0 is_stmt 1
	movl	-24(%rbp), %eax	# mode, mode.1250
	addl	$1, %eax	#, D.30431
	movl	%eax, -24(%rbp)	# D.30431, mode
.L2435:
	.loc 1 9824 0 discriminator 1
	movl	-24(%rbp), %eax	# mode, mode.1251
	cmpl	$58, %eax	#, mode.1251
	jle	.L2439	#,
.L2432:
	.loc 1 9828 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE147:
	.size	ix86_mark_machine_status, .-ix86_mark_machine_status
	.type	ix86_free_machine_status, @function
ix86_free_machine_status:
.LFB148:
	.loc 1 9833 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p, p
	.loc 1 9834 0
	movq	-8(%rbp), %rax	# p, tmp60
	movq	392(%rax), %rax	# p_1(D)->machine, D.30432
	movq	%rax, %rdi	# D.30432,
	call	free	#
	.loc 1 9835 0
	movq	-8(%rbp), %rax	# p, tmp61
	movq	$0, 392(%rax)	#, p_1(D)->machine
	.loc 1 9836 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE148:
	.size	ix86_free_machine_status, .-ix86_free_machine_status
	.globl	assign_386_stack_local
	.type	assign_386_stack_local, @function
assign_386_stack_local:
.LFB149:
	.loc 1 9848 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$16, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movl	%edi, -20(%rbp)	# mode, mode
	movl	%esi, -24(%rbp)	# n, n
	.loc 1 9849 0
	cmpl	$0, -24(%rbp)	#, n
	js	.L2442	#,
	.loc 1 9849 0 is_stmt 0 discriminator 1
	cmpl	$2, -24(%rbp)	#, n
	jle	.L2443	#,
.L2442:
	.loc 1 9850 0 is_stmt 1
	movl	$__FUNCTION__.16293, %edx	#,
	movl	$9850, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2443:
	.loc 1 9852 0
	movq	cfun(%rip), %rax	# cfun, cfun.1252
	movq	392(%rax), %rcx	# cfun.1252_2->machine, D.30433
	movl	-20(%rbp), %eax	# mode, mode.1253
	movl	-24(%rbp), %edx	# n, tmp76
	movslq	%edx, %rsi	# tmp76, tmp75
	movslq	%eax, %rdx	# mode.1253, tmp77
	movq	%rdx, %rax	# tmp77, tmp78
	addq	%rax, %rax	# tmp78
	addq	%rdx, %rax	# tmp77, tmp78
	addq	%rsi, %rax	# tmp75, tmp79
	movq	(%rcx,%rax,8), %rax	# _3->stack_locals, D.30434
	testq	%rax, %rax	# D.30434
	jne	.L2444	#,
	.loc 1 9853 0
	movq	cfun(%rip), %rax	# cfun, cfun.1254
	movq	392(%rax), %rbx	# cfun.1254_7->machine, D.30433
	movl	-20(%rbp), %r12d	# mode, mode.1255
	.loc 1 9854 0
	movl	-20(%rbp), %eax	# mode, mode.1256
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30435
	movzbl	%al, %ecx	# D.30435, D.30436
	movl	-20(%rbp), %eax	# mode, tmp81
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.30436,
	movl	%eax, %edi	# tmp81,
	call	assign_stack_local	#
	movq	%rax, %rcx	#, D.30434
	movl	-24(%rbp), %eax	# n, tmp83
	movslq	%eax, %rsi	# tmp83, tmp82
	movslq	%r12d, %rdx	# mode.1255, tmp84
	movq	%rdx, %rax	# tmp84, tmp85
	addq	%rax, %rax	# tmp85
	addq	%rdx, %rax	# tmp84, tmp85
	addq	%rsi, %rax	# tmp82, tmp86
	movq	%rcx, (%rbx,%rax,8)	# D.30434, _8->stack_locals
.L2444:
	.loc 1 9856 0
	movq	cfun(%rip), %rax	# cfun, cfun.1257
	movq	392(%rax), %rcx	# cfun.1257_14->machine, D.30433
	movl	-20(%rbp), %eax	# mode, mode.1258
	movl	-24(%rbp), %edx	# n, tmp88
	movslq	%edx, %rsi	# tmp88, tmp87
	movslq	%eax, %rdx	# mode.1258, tmp89
	movq	%rdx, %rax	# tmp89, tmp90
	addq	%rax, %rax	# tmp90
	addq	%rdx, %rax	# tmp89, tmp90
	addq	%rsi, %rax	# tmp87, tmp91
	movq	(%rcx,%rax,8), %rax	# _15->stack_locals, D.30437
	.loc 1 9857 0
	addq	$16, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE149:
	.size	assign_386_stack_local, .-assign_386_stack_local
	.type	memory_address_length, @function
memory_address_length:
.LFB150:
	.loc 1 9865 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# addr, addr
	.loc 1 9870 0
	movq	-72(%rbp), %rax	# addr, tmp73
	movzwl	(%rax), %eax	# addr_5(D)->code, D.30439
	cmpw	$96, %ax	#, D.30439
	je	.L2447	#,
	.loc 1 9871 0
	movq	-72(%rbp), %rax	# addr, tmp74
	movzwl	(%rax), %eax	# addr_5(D)->code, D.30439
	cmpw	$99, %ax	#, D.30439
	je	.L2447	#,
	.loc 1 9872 0
	movq	-72(%rbp), %rax	# addr, tmp75
	movzwl	(%rax), %eax	# addr_5(D)->code, D.30439
	cmpw	$100, %ax	#, D.30439
	je	.L2447	#,
	.loc 1 9873 0
	movq	-72(%rbp), %rax	# addr, tmp76
	movzwl	(%rax), %eax	# addr_5(D)->code, D.30439
	cmpw	$101, %ax	#, D.30439
	jne	.L2448	#,
.L2447:
	.loc 1 9874 0
	movl	$0, %eax	#, D.30438
	jmp	.L2458	#
.L2448:
	.loc 1 9876 0
	leaq	-32(%rbp), %rdx	#, tmp77
	movq	-72(%rbp), %rax	# addr, tmp78
	movq	%rdx, %rsi	# tmp77,
	movq	%rax, %rdi	# tmp78,
	call	ix86_decompose_address	#
	testl	%eax, %eax	# D.30438
	jne	.L2450	#,
	.loc 1 9877 0
	movl	$__FUNCTION__.16302, %edx	#,
	movl	$9877, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2450:
	.loc 1 9879 0
	movq	-32(%rbp), %rax	# parts.base, tmp79
	movq	%rax, -56(%rbp)	# tmp79, base
	.loc 1 9880 0
	movq	-24(%rbp), %rax	# parts.index, tmp80
	movq	%rax, -48(%rbp)	# tmp80, index
	.loc 1 9881 0
	movq	-16(%rbp), %rax	# parts.disp, tmp81
	movq	%rax, -40(%rbp)	# tmp81, disp
	.loc 1 9882 0
	movl	$0, -60(%rbp)	#, len
	.loc 1 9885 0
	cmpq	$0, -56(%rbp)	#, base
	je	.L2451	#,
	.loc 1 9885 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, index
	jne	.L2451	#,
	cmpq	$0, -40(%rbp)	#, disp
	jne	.L2451	#,
	.loc 1 9888 0 is_stmt 1
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30440
	cmpq	-72(%rbp), %rax	# addr, D.30440
	je	.L2452	#,
	.loc 1 9889 0
	movq	global_rtl+40(%rip), %rax	# global_rtl, D.30440
	cmpq	-72(%rbp), %rax	# addr, D.30440
	je	.L2452	#,
	.loc 1 9890 0
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.30440
	cmpq	-72(%rbp), %rax	# addr, D.30440
	je	.L2452	#,
	.loc 1 9891 0
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.30440
	cmpq	-72(%rbp), %rax	# addr, D.30440
	jne	.L2453	#,
.L2452:
	.loc 1 9892 0
	movl	$1, -60(%rbp)	#, len
	.loc 1 9888 0
	jmp	.L2454	#
.L2453:
	jmp	.L2454	#
.L2451:
	.loc 1 9896 0
	cmpq	$0, -40(%rbp)	#, disp
	je	.L2455	#,
	.loc 1 9896 0 is_stmt 0 discriminator 1
	cmpq	$0, -56(%rbp)	#, base
	jne	.L2455	#,
	cmpq	$0, -48(%rbp)	#, index
	jne	.L2455	#,
	.loc 1 9897 0 is_stmt 1
	movl	$4, -60(%rbp)	#, len
	jmp	.L2454	#
.L2455:
	.loc 1 9902 0
	cmpq	$0, -40(%rbp)	#, disp
	je	.L2456	#,
	.loc 1 9904 0
	movq	-40(%rbp), %rax	# disp, tmp82
	movzwl	(%rax), %eax	# disp_13->code, D.30439
	cmpw	$54, %ax	#, D.30439
	jne	.L2457	#,
	.loc 1 9905 0
	movq	-40(%rbp), %rax	# disp, tmp83
	movq	8(%rax), %rax	# disp_13->fld[0].rtwint, D.30441
	cmpq	$-128, %rax	#, D.30441
	jl	.L2457	#,
	.loc 1 9905 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# disp, tmp84
	movq	8(%rax), %rax	# disp_13->fld[0].rtwint, D.30441
	cmpq	$127, %rax	#, D.30441
	jg	.L2457	#,
	.loc 1 9906 0 is_stmt 1
	movl	$1, -60(%rbp)	#, len
	jmp	.L2456	#
.L2457:
	.loc 1 9908 0
	movl	$4, -60(%rbp)	#, len
.L2456:
	.loc 1 9912 0
	cmpq	$0, -48(%rbp)	#, index
	je	.L2454	#,
	.loc 1 9913 0
	addl	$1, -60(%rbp)	#, len
.L2454:
	.loc 1 9916 0
	movl	-60(%rbp), %eax	# len, D.30438
.L2458:
	.loc 1 9917 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE150:
	.size	memory_address_length, .-memory_address_length
	.section	.rodata
.LC267:
	.string	"unknown insn mode"
	.text
	.globl	ix86_attr_length_immediate_default
	.type	ix86_attr_length_immediate_default, @function
ix86_attr_length_immediate_default:
.LFB151:
	.loc 1 9925 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	movl	%esi, -28(%rbp)	# shortform, shortform
	.loc 1 9926 0
	movl	$0, -8(%rbp)	#, len
	.loc 1 9928 0
	movq	-24(%rbp), %rax	# insn, tmp86
	movq	%rax, %rdi	# tmp86,
	call	extract_insn_cached	#
	.loc 1 9929 0
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.30442
	movsbl	%al, %eax	# D.30442, D.30443
	subl	$1, %eax	#, tmp87
	movl	%eax, -4(%rbp)	# tmp87, i
	jmp	.L2460	#
.L2471:
	.loc 1 9930 0
	movl	-4(%rbp), %eax	# i, tmp89
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movzwl	(%rax), %eax	# _9->code, D.30445
	cmpw	$67, %ax	#, D.30445
	je	.L2461	#,
	.loc 1 9930 0 is_stmt 0 discriminator 1
	movl	-4(%rbp), %eax	# i, tmp91
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movzwl	(%rax), %eax	# _11->code, D.30445
	cmpw	$68, %ax	#, D.30445
	je	.L2461	#,
	movl	-4(%rbp), %eax	# i, tmp93
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movzwl	(%rax), %eax	# _13->code, D.30445
	cmpw	$54, %ax	#, D.30445
	je	.L2461	#,
	movl	-4(%rbp), %eax	# i, tmp95
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movzwl	(%rax), %eax	# _15->code, D.30445
	cmpw	$55, %ax	#, D.30445
	je	.L2461	#,
	movl	-4(%rbp), %eax	# i, tmp97
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movzwl	(%rax), %eax	# _17->code, D.30445
	cmpw	$58, %ax	#, D.30445
	je	.L2461	#,
	movl	-4(%rbp), %eax	# i, tmp99
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movzwl	(%rax), %eax	# _19->code, D.30445
	cmpw	$134, %ax	#, D.30445
	je	.L2461	#,
	movl	-4(%rbp), %eax	# i, tmp101
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movzwl	(%rax), %eax	# _21->code, D.30445
	cmpw	$56, %ax	#, D.30445
	je	.L2461	#,
	movl	-4(%rbp), %eax	# i, tmp103
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movzwl	(%rax), %eax	# _23->code, D.30445
	cmpw	$140, %ax	#, D.30445
	jne	.L2462	#,
.L2461:
	.loc 1 9932 0 is_stmt 1
	cmpl	$0, -8(%rbp)	#, len
	je	.L2463	#,
	.loc 1 9933 0
	movl	$__FUNCTION__.16309, %edx	#,
	movl	$9933, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2463:
	.loc 1 9934 0
	cmpl	$0, -28(%rbp)	#, shortform
	je	.L2464	#,
	.loc 1 9935 0
	movl	-4(%rbp), %eax	# i, tmp105
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movzwl	(%rax), %eax	# _26->code, D.30445
	cmpw	$54, %ax	#, D.30445
	jne	.L2464	#,
	.loc 1 9936 0
	movl	-4(%rbp), %eax	# i, tmp107
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movq	8(%rax), %rax	# _28->fld[0].rtwint, D.30446
	cmpq	$-128, %rax	#, D.30446
	jl	.L2464	#,
	.loc 1 9936 0 is_stmt 0 discriminator 1
	movl	-4(%rbp), %eax	# i, tmp109
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30444
	movq	8(%rax), %rax	# _30->fld[0].rtwint, D.30446
	cmpq	$127, %rax	#, D.30446
	jg	.L2464	#,
	.loc 1 9937 0 is_stmt 1
	movl	$1, -8(%rbp)	#, len
	jmp	.L2462	#
.L2464:
	.loc 1 9940 0
	movq	-24(%rbp), %rax	# insn, tmp110
	movq	%rax, %rdi	# tmp110,
	call	get_attr_mode	#
	cmpl	$3, %eax	#, D.30447
	je	.L2466	#,
	cmpl	$3, %eax	#, D.30447
	ja	.L2467	#,
	cmpl	$2, %eax	#, D.30447
	je	.L2468	#,
	jmp	.L2465	#
.L2467:
	cmpl	$4, %eax	#, D.30447
	je	.L2469	#,
	cmpl	$5, %eax	#, D.30447
	je	.L2470	#,
	jmp	.L2465	#
.L2468:
	.loc 1 9943 0
	addl	$1, -8(%rbp)	#, len
	.loc 1 9944 0
	jmp	.L2462	#
.L2466:
	.loc 1 9946 0
	addl	$2, -8(%rbp)	#, len
	.loc 1 9947 0
	jmp	.L2462	#
.L2469:
	.loc 1 9949 0
	addl	$4, -8(%rbp)	#, len
	.loc 1 9950 0
	jmp	.L2462	#
.L2470:
	.loc 1 9953 0
	addl	$4, -8(%rbp)	#, len
	.loc 1 9954 0
	jmp	.L2462	#
.L2465:
	.loc 1 9956 0
	movq	-24(%rbp), %rax	# insn, tmp111
	movl	$__FUNCTION__.16309, %r8d	#,
	movl	$9956, %ecx	#,
	movl	$.LC124, %edx	#,
	movq	%rax, %rsi	# tmp111,
	movl	$.LC267, %edi	#,
	call	_fatal_insn	#
.L2462:
	.loc 1 9929 0
	subl	$1, -4(%rbp)	#, i
.L2460:
	.loc 1 9929 0 is_stmt 0 discriminator 1
	cmpl	$0, -4(%rbp)	#, i
	jns	.L2471	#,
	.loc 1 9960 0 is_stmt 1
	movl	-8(%rbp), %eax	# len, D.30443
	.loc 1 9961 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE151:
	.size	ix86_attr_length_immediate_default, .-ix86_attr_length_immediate_default
	.globl	ix86_attr_length_address_default
	.type	ix86_attr_length_address_default, @function
ix86_attr_length_address_default:
.LFB152:
	.loc 1 9966 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	.loc 1 9968 0
	movq	-24(%rbp), %rax	# insn, tmp67
	movq	%rax, %rdi	# tmp67,
	call	extract_insn_cached	#
	.loc 1 9969 0
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.30451
	movsbl	%al, %eax	# D.30451, D.30450
	subl	$1, %eax	#, tmp68
	movl	%eax, -4(%rbp)	# tmp68, i
	jmp	.L2474	#
.L2477:
	.loc 1 9970 0
	movl	-4(%rbp), %eax	# i, tmp70
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30452
	movzwl	(%rax), %eax	# _7->code, D.30453
	cmpw	$66, %ax	#, D.30453
	jne	.L2475	#,
	.loc 1 9972 0
	movl	-4(%rbp), %eax	# i, tmp72
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30452
	movq	8(%rax), %rax	# _9->fld[0].rtx, D.30452
	movq	%rax, %rdi	# D.30452,
	call	memory_address_length	#
	jmp	.L2476	#
.L2475:
	.loc 1 9969 0
	subl	$1, -4(%rbp)	#, i
.L2474:
	.loc 1 9969 0 is_stmt 0 discriminator 1
	cmpl	$0, -4(%rbp)	#, i
	jns	.L2477	#,
	.loc 1 9975 0 is_stmt 1
	movl	$0, %eax	#, D.30450
.L2476:
	.loc 1 9976 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE152:
	.size	ix86_attr_length_address_default, .-ix86_attr_length_address_default
	.type	ix86_issue_rate, @function
ix86_issue_rate:
.LFB153:
	.loc 1 9982 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 9983 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1259
	cmpl	$6, %eax	#, ix86_cpu.1259
	ja	.L2479	#,
	movl	%eax, %eax	# ix86_cpu.1259, tmp62
	movq	.L2481(,%rax,8), %rax	#, tmp63
	jmp	*%rax	# tmp63
	.section	.rodata
	.align 8
	.align 4
.L2481:
	.quad	.L2479
	.quad	.L2479
	.quad	.L2480
	.quad	.L2482
	.quad	.L2480
	.quad	.L2482
	.quad	.L2482
	.text
.L2480:
	.loc 1 9987 0
	movl	$2, %eax	#, D.30454
	jmp	.L2483	#
.L2482:
	.loc 1 9992 0
	movl	$3, %eax	#, D.30454
	jmp	.L2483	#
.L2479:
	.loc 1 9995 0
	movl	$1, %eax	#, D.30454
.L2483:
	.loc 1 9997 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE153:
	.size	ix86_issue_rate, .-ix86_issue_rate
	.type	ix86_flags_dependant, @function
ix86_flags_dependant:
.LFB154:
	.loc 1 10006 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	movq	%rsi, -32(%rbp)	# dep_insn, dep_insn
	movl	%edx, -36(%rbp)	# insn_type, insn_type
	.loc 1 10010 0
	cmpl	$15, -36(%rbp)	#, insn_type
	je	.L2485	#,
	.loc 1 10011 0
	cmpl	$20, -36(%rbp)	#, insn_type
	je	.L2485	#,
	.loc 1 10012 0
	cmpl	$28, -36(%rbp)	#, insn_type
	je	.L2485	#,
	.loc 1 10013 0
	cmpl	$14, -36(%rbp)	#, insn_type
	je	.L2485	#,
	.loc 1 10014 0
	movl	$0, %eax	#, D.30455
	jmp	.L2486	#
.L2485:
	.loc 1 10016 0
	movq	-32(%rbp), %rax	# dep_insn, tmp94
	movzwl	(%rax), %eax	# dep_insn_8(D)->code, D.30456
	movzwl	%ax, %eax	# D.30456, D.30455
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30457
	cmpb	$105, %al	#, D.30457
	jne	.L2487	#,
	.loc 1 10016 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# dep_insn, tmp96
	movq	32(%rax), %rax	# dep_insn_8(D)->fld[3].rtx, D.30458
	movzwl	(%rax), %eax	# _12->code, D.30456
	cmpw	$47, %ax	#, D.30456
	jne	.L2488	#,
	.loc 1 10016 0 discriminator 3
	movq	-32(%rbp), %rax	# dep_insn, tmp97
	movq	32(%rax), %rax	# dep_insn_8(D)->fld[3].rtx, iftmp.1261
	jmp	.L2490	#
.L2488:
	.loc 1 10016 0 discriminator 4
	movq	-32(%rbp), %rax	# dep_insn, tmp98
	movq	32(%rax), %rdx	# dep_insn_8(D)->fld[3].rtx, D.30458
	movq	-32(%rbp), %rax	# dep_insn, tmp99
	movq	%rdx, %rsi	# D.30458,
	movq	%rax, %rdi	# tmp99,
	call	single_set_2	#
	jmp	.L2490	#
.L2487:
	.loc 1 10016 0 discriminator 2
	movl	$0, %eax	#, iftmp.1260
.L2490:
	.loc 1 10016 0 discriminator 5
	movq	%rax, -16(%rbp)	# iftmp.1260, set
	cmpq	$0, -16(%rbp)	#, set
	je	.L2491	#,
	.loc 1 10018 0 is_stmt 1
	movq	-16(%rbp), %rax	# set, tmp100
	movq	8(%rax), %rax	# set_19->fld[0].rtx, tmp101
	movq	%rax, -16(%rbp)	# tmp101, set
	.loc 1 10019 0
	movq	$0, -8(%rbp)	#, set2
	jmp	.L2492	#
.L2491:
	.loc 1 10021 0
	movq	-32(%rbp), %rax	# dep_insn, tmp102
	movq	32(%rax), %rax	# dep_insn_8(D)->fld[3].rtx, D.30458
	movzwl	(%rax), %eax	# _22->code, D.30456
	cmpw	$39, %ax	#, D.30456
	jne	.L2493	#,
	.loc 1 10022 0
	movq	-32(%rbp), %rax	# dep_insn, tmp103
	movq	32(%rax), %rax	# dep_insn_8(D)->fld[3].rtx, D.30458
	movq	8(%rax), %rax	# _24->fld[0].rtvec, D.30459
	movl	(%rax), %eax	# _25->num_elem, D.30455
	cmpl	$2, %eax	#, D.30455
	jne	.L2493	#,
	.loc 1 10023 0
	movq	-32(%rbp), %rax	# dep_insn, tmp104
	movq	32(%rax), %rax	# dep_insn_8(D)->fld[3].rtx, D.30458
	movq	8(%rax), %rax	# _27->fld[0].rtvec, D.30459
	movq	8(%rax), %rax	# _28->elem, D.30458
	movzwl	(%rax), %eax	# _29->code, D.30456
	cmpw	$47, %ax	#, D.30456
	jne	.L2493	#,
	.loc 1 10024 0
	movq	-32(%rbp), %rax	# dep_insn, tmp105
	movq	32(%rax), %rax	# dep_insn_8(D)->fld[3].rtx, D.30458
	movq	8(%rax), %rax	# _31->fld[0].rtvec, D.30459
	movq	16(%rax), %rax	# _32->elem, D.30458
	movzwl	(%rax), %eax	# _33->code, D.30456
	cmpw	$47, %ax	#, D.30456
	jne	.L2493	#,
	.loc 1 10026 0
	movq	-32(%rbp), %rax	# dep_insn, tmp106
	movq	32(%rax), %rax	# dep_insn_8(D)->fld[3].rtx, D.30458
	movq	8(%rax), %rax	# _35->fld[0].rtvec, D.30459
	movq	8(%rax), %rax	# _36->elem, D.30458
	movq	8(%rax), %rax	# _37->fld[0].rtx, tmp107
	movq	%rax, -16(%rbp)	# tmp107, set
	.loc 1 10027 0
	movq	-32(%rbp), %rax	# dep_insn, tmp108
	movq	32(%rax), %rax	# dep_insn_8(D)->fld[3].rtx, D.30458
	movq	8(%rax), %rax	# _39->fld[0].rtvec, D.30459
	movq	8(%rax), %rax	# _40->elem, D.30458
	movq	8(%rax), %rax	# _41->fld[0].rtx, tmp109
	movq	%rax, -8(%rbp)	# tmp109, set2
	jmp	.L2492	#
.L2493:
	.loc 1 10030 0
	movl	$0, %eax	#, D.30455
	jmp	.L2486	#
.L2492:
	.loc 1 10032 0
	movq	-16(%rbp), %rax	# set, tmp110
	movzwl	(%rax), %eax	# set_1->code, D.30456
	cmpw	$61, %ax	#, D.30456
	jne	.L2494	#,
	.loc 1 10032 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# set, tmp111
	movl	8(%rax), %eax	# set_1->fld[0].rtuint, D.30460
	cmpl	$17, %eax	#, D.30460
	je	.L2495	#,
.L2494:
	.loc 1 10033 0 is_stmt 1
	movl	$0, %eax	#, D.30455
	jmp	.L2486	#
.L2495:
	.loc 1 10037 0
	movq	-24(%rbp), %rax	# insn, tmp112
	movq	32(%rax), %rdx	# insn_46(D)->fld[3].rtx, D.30458
	movq	-16(%rbp), %rax	# set, tmp113
	movq	%rdx, %rsi	# D.30458,
	movq	%rax, %rdi	# tmp113,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30455
	jne	.L2496	#,
	.loc 1 10038 0
	movl	$0, %eax	#, D.30455
	jmp	.L2486	#
.L2496:
	.loc 1 10040 0
	cmpq	$0, -8(%rbp)	#, set2
	je	.L2497	#,
	.loc 1 10040 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# insn, tmp114
	movq	32(%rax), %rdx	# insn_46(D)->fld[3].rtx, D.30458
	movq	-8(%rbp), %rax	# set2, tmp115
	movq	%rdx, %rsi	# D.30458,
	movq	%rax, %rdi	# tmp115,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.30455
	je	.L2497	#,
	.loc 1 10041 0 is_stmt 1
	movl	$0, %eax	#, D.30455
	jmp	.L2486	#
.L2497:
	.loc 1 10043 0
	movl	$1, %eax	#, D.30455
.L2486:
	.loc 1 10044 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE154:
	.size	ix86_flags_dependant, .-ix86_flags_dependant
	.type	ix86_agi_dependant, @function
ix86_agi_dependant:
.LFB155:
	.loc 1 10053 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	movq	%rsi, -32(%rbp)	# dep_insn, dep_insn
	movl	%edx, -36(%rbp)	# insn_type, insn_type
	.loc 1 10056 0
	cmpl	$9, -36(%rbp)	#, insn_type
	jne	.L2499	#,
	.loc 1 10057 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1262
	cmpl	$2, %eax	#, ix86_cpu.1262
	jne	.L2499	#,
	.loc 1 10059 0
	movq	-24(%rbp), %rax	# insn, tmp73
	movq	32(%rax), %rax	# insn_7(D)->fld[3].rtx, tmp74
	movq	%rax, -8(%rbp)	# tmp74, addr
	.loc 1 10060 0
	movq	-8(%rbp), %rax	# addr, tmp75
	movzwl	(%rax), %eax	# addr_8->code, D.30462
	cmpw	$47, %ax	#, D.30462
	je	.L2500	#,
	.loc 1 10062 0
	movq	-8(%rbp), %rax	# addr, tmp76
	movzwl	(%rax), %eax	# addr_8->code, D.30462
	cmpw	$39, %ax	#, D.30462
	jne	.L2501	#,
	.loc 1 10063 0
	movq	-8(%rbp), %rax	# addr, tmp77
	movq	8(%rax), %rax	# addr_8->fld[0].rtvec, D.30463
	movq	8(%rax), %rax	# _11->elem, D.30464
	movzwl	(%rax), %eax	# _12->code, D.30462
	cmpw	$47, %ax	#, D.30462
	jne	.L2501	#,
	.loc 1 10064 0
	movq	-8(%rbp), %rax	# addr, tmp78
	movq	8(%rax), %rax	# addr_8->fld[0].rtvec, D.30463
	movq	8(%rax), %rax	# _14->elem, tmp79
	movq	%rax, -8(%rbp)	# tmp79, addr
	jmp	.L2500	#
.L2501:
	.loc 1 10066 0
	movl	$__FUNCTION__.16347, %edx	#,
	movl	$10066, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2500:
	.loc 1 10067 0
	movq	-8(%rbp), %rax	# addr, tmp80
	movq	16(%rax), %rax	# addr_1->fld[1].rtx, tmp81
	movq	%rax, -8(%rbp)	# tmp81, addr
	jmp	.L2502	#
.L2499:
.LBB118:
	.loc 1 10072 0
	movq	-24(%rbp), %rax	# insn, tmp82
	movq	%rax, %rdi	# tmp82,
	call	extract_insn_cached	#
	.loc 1 10073 0
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.30465
	movsbl	%al, %eax	# D.30465, D.30461
	subl	$1, %eax	#, tmp83
	movl	%eax, -12(%rbp)	# tmp83, i
	jmp	.L2503	#
.L2505:
	.loc 1 10074 0
	movl	-12(%rbp), %eax	# i, tmp85
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30464
	movzwl	(%rax), %eax	# _20->code, D.30462
	cmpw	$66, %ax	#, D.30462
	jne	.L2504	#,
	.loc 1 10076 0
	movl	-12(%rbp), %eax	# i, tmp87
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.30464
	movq	8(%rax), %rax	# _22->fld[0].rtx, tmp88
	movq	%rax, -8(%rbp)	# tmp88, addr
	.loc 1 10077 0
	jmp	.L2502	#
.L2504:
	.loc 1 10073 0
	subl	$1, -12(%rbp)	#, i
.L2503:
	.loc 1 10073 0 is_stmt 0 discriminator 1
	cmpl	$0, -12(%rbp)	#, i
	jns	.L2505	#,
	.loc 1 10079 0 is_stmt 1
	movl	$0, %eax	#, D.30461
	jmp	.L2506	#
.L2502:
.LBE118:
	.loc 1 10083 0
	movq	-32(%rbp), %rdx	# dep_insn, tmp89
	movq	-8(%rbp), %rax	# addr, tmp90
	movq	%rdx, %rsi	# tmp89,
	movq	%rax, %rdi	# tmp90,
	call	modified_in_p	#
.L2506:
	.loc 1 10084 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE155:
	.size	ix86_agi_dependant, .-ix86_agi_dependant
	.type	ix86_adjust_cost, @function
ix86_adjust_cost:
.LFB156:
	.loc 1 10090 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -56(%rbp)	# insn, insn
	movq	%rsi, -64(%rbp)	# link, link
	movq	%rdx, -72(%rbp)	# dep_insn, dep_insn
	movl	%ecx, -76(%rbp)	# cost, cost
	.loc 1 10097 0
	movq	-64(%rbp), %rax	# link, tmp99
	movzbl	2(%rax), %eax	# link_21(D)->mode, D.30467
	testb	%al, %al	# D.30467
	je	.L2508	#,
	.loc 1 10098 0
	movl	$0, %eax	#, D.30466
	jmp	.L2509	#
.L2508:
	.loc 1 10100 0
	movq	-72(%rbp), %rax	# dep_insn, tmp100
	movl	40(%rax), %eax	# dep_insn_24(D)->fld[4].rtint, D.30466
	testl	%eax, %eax	# D.30466
	js	.L2510	#,
	.loc 1 10100 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# dep_insn, tmp101
	movl	40(%rax), %eax	# dep_insn_24(D)->fld[4].rtint, iftmp.1263
	jmp	.L2511	#
.L2510:
	.loc 1 10100 0 discriminator 2
	movq	-72(%rbp), %rax	# dep_insn, tmp102
	movq	%rax, %rdi	# tmp102,
	call	recog_memoized_1	#
.L2511:
	.loc 1 10100 0 discriminator 3
	movl	%eax, -36(%rbp)	# iftmp.1263, dep_insn_code_number
	.loc 1 10103 0 is_stmt 1 discriminator 3
	cmpl	$0, -36(%rbp)	#, dep_insn_code_number
	js	.L2512	#,
	.loc 1 10103 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# insn, tmp103
	movl	40(%rax), %eax	# insn_29(D)->fld[4].rtint, D.30466
	testl	%eax, %eax	# D.30466
	js	.L2513	#,
	.loc 1 10103 0 discriminator 2
	movq	-56(%rbp), %rax	# insn, tmp104
	movl	40(%rax), %eax	# insn_29(D)->fld[4].rtint, D.30466
	testl	%eax, %eax	# D.30466
	js	.L2512	#,
	jmp	.L2514	#
.L2513:
	.loc 1 10103 0 discriminator 3
	movq	-56(%rbp), %rax	# insn, tmp105
	movq	%rax, %rdi	# tmp105,
	call	recog_memoized_1	#
	testl	%eax, %eax	# D.30466
	jns	.L2514	#,
.L2512:
	.loc 1 10104 0 is_stmt 1
	movl	-76(%rbp), %eax	# cost, D.30466
	jmp	.L2509	#
.L2514:
	.loc 1 10106 0
	movq	-56(%rbp), %rax	# insn, tmp106
	movq	%rax, %rdi	# tmp106,
	call	get_attr_type	#
	movl	%eax, -32(%rbp)	# tmp107, insn_type
	.loc 1 10107 0
	movq	-72(%rbp), %rax	# dep_insn, tmp108
	movq	%rax, %rdi	# tmp108,
	call	get_attr_type	#
	movl	%eax, -28(%rbp)	# tmp109, dep_insn_type
	.loc 1 10109 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1264
	cmpl	$3, %eax	#, ix86_cpu.1264
	je	.L2516	#,
	cmpl	$3, %eax	#, ix86_cpu.1264
	ja	.L2517	#,
	cmpl	$2, %eax	#, ix86_cpu.1264
	je	.L2518	#,
	.loc 1 10231 0
	jmp	.L2562	#
.L2517:
	.loc 1 10109 0
	cmpl	$4, %eax	#, ix86_cpu.1264
	je	.L2519	#,
	cmpl	$5, %eax	#, ix86_cpu.1264
	je	.L2520	#,
	.loc 1 10231 0
	jmp	.L2562	#
.L2518:
	.loc 1 10113 0
	movl	-32(%rbp), %edx	# insn_type, tmp110
	movq	-72(%rbp), %rcx	# dep_insn, tmp111
	movq	-56(%rbp), %rax	# insn, tmp112
	movq	%rcx, %rsi	# tmp111,
	movq	%rax, %rdi	# tmp112,
	call	ix86_agi_dependant	#
	testl	%eax, %eax	# D.30466
	je	.L2521	#,
	.loc 1 10114 0
	addl	$1, -76(%rbp)	#, cost
.L2521:
	.loc 1 10117 0
	movl	-32(%rbp), %edx	# insn_type, tmp113
	movq	-72(%rbp), %rcx	# dep_insn, tmp114
	movq	-56(%rbp), %rax	# insn, tmp115
	movq	%rcx, %rsi	# tmp114,
	movq	%rax, %rdi	# tmp115,
	call	ix86_flags_dependant	#
	testl	%eax, %eax	# D.30466
	je	.L2522	#,
	.loc 1 10118 0
	movl	$0, -76(%rbp)	#, cost
.L2522:
	.loc 1 10121 0
	cmpl	$21, -32(%rbp)	#, insn_type
	jne	.L2523	#,
	.loc 1 10122 0
	movq	-56(%rbp), %rax	# insn, tmp116
	movq	%rax, %rdi	# tmp116,
	call	get_attr_memory	#
	cmpl	$2, %eax	#, D.30468
	jne	.L2523	#,
	.loc 1 10123 0
	movl	-32(%rbp), %edx	# insn_type, tmp117
	movq	-72(%rbp), %rcx	# dep_insn, tmp118
	movq	-56(%rbp), %rax	# insn, tmp119
	movq	%rcx, %rsi	# tmp118,
	movq	%rax, %rdi	# tmp119,
	call	ix86_agi_dependant	#
	testl	%eax, %eax	# D.30466
	jne	.L2523	#,
	.loc 1 10124 0
	addl	$1, -76(%rbp)	#, cost
	.loc 1 10125 0
	jmp	.L2524	#
.L2523:
	jmp	.L2524	#
.L2516:
	.loc 1 10128 0
	movq	-56(%rbp), %rax	# insn, tmp120
	movq	%rax, %rdi	# tmp120,
	call	get_attr_memory	#
	movl	%eax, -24(%rbp)	# tmp121, memory
	.loc 1 10129 0
	movq	-72(%rbp), %rax	# dep_insn, tmp122
	movq	%rax, %rdi	# tmp122,
	call	get_attr_memory	#
	movl	%eax, -20(%rbp)	# tmp123, dep_memory
	.loc 1 10133 0
	cmpl	$7, -28(%rbp)	#, dep_insn_type
	je	.L2525	#,
	.loc 1 10134 0
	cmpl	$21, -28(%rbp)	#, dep_insn_type
	je	.L2525	#,
	.loc 1 10135 0
	cmpl	$1, -20(%rbp)	#, dep_memory
	je	.L2526	#,
	.loc 1 10135 0 is_stmt 0 discriminator 1
	cmpl	$3, -20(%rbp)	#, dep_memory
	jne	.L2525	#,
.L2526:
	.loc 1 10136 0 is_stmt 1
	addl	$1, -76(%rbp)	#, cost
.L2525:
	.loc 1 10139 0
	movq	-72(%rbp), %rax	# dep_insn, tmp124
	movq	%rax, %rdi	# tmp124,
	call	get_attr_fp_int_src	#
	testl	%eax, %eax	# D.30469
	je	.L2527	#,
	.loc 1 10140 0
	addl	$5, -76(%rbp)	#, cost
.L2527:
	.loc 1 10143 0
	cmpl	$21, -32(%rbp)	#, insn_type
	jne	.L2528	#,
	.loc 1 10144 0
	movq	-72(%rbp), %rax	# dep_insn, tmp125
	movzwl	(%rax), %eax	# dep_insn_24(D)->code, D.30470
	movzwl	%ax, %eax	# D.30470, D.30466
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30471
	cmpb	$105, %al	#, D.30471
	jne	.L2529	#,
	.loc 1 10144 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# dep_insn, tmp127
	movq	32(%rax), %rax	# dep_insn_24(D)->fld[3].rtx, D.30472
	movzwl	(%rax), %eax	# _52->code, D.30470
	cmpw	$47, %ax	#, D.30470
	jne	.L2530	#,
	.loc 1 10144 0 discriminator 3
	movq	-72(%rbp), %rax	# dep_insn, tmp128
	movq	32(%rax), %rax	# dep_insn_24(D)->fld[3].rtx, iftmp.1266
	jmp	.L2532	#
.L2530:
	.loc 1 10144 0 discriminator 4
	movq	-72(%rbp), %rax	# dep_insn, tmp129
	movq	32(%rax), %rdx	# dep_insn_24(D)->fld[3].rtx, D.30472
	movq	-72(%rbp), %rax	# dep_insn, tmp130
	movq	%rdx, %rsi	# D.30472,
	movq	%rax, %rdi	# tmp130,
	call	single_set_2	#
	jmp	.L2532	#
.L2529:
	.loc 1 10144 0 discriminator 2
	movl	$0, %eax	#, iftmp.1265
.L2532:
	.loc 1 10144 0 discriminator 5
	movq	%rax, -16(%rbp)	# iftmp.1265, set
	cmpq	$0, -16(%rbp)	#, set
	je	.L2528	#,
	.loc 1 10145 0 is_stmt 1
	movq	-56(%rbp), %rax	# insn, tmp131
	movzwl	(%rax), %eax	# insn_29(D)->code, D.30470
	movzwl	%ax, %eax	# D.30470, D.30466
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30471
	cmpb	$105, %al	#, D.30471
	jne	.L2533	#,
	.loc 1 10145 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# insn, tmp133
	movq	32(%rax), %rax	# insn_29(D)->fld[3].rtx, D.30472
	movzwl	(%rax), %eax	# _63->code, D.30470
	cmpw	$47, %ax	#, D.30470
	jne	.L2534	#,
	.loc 1 10145 0 discriminator 3
	movq	-56(%rbp), %rax	# insn, tmp134
	movq	32(%rax), %rax	# insn_29(D)->fld[3].rtx, iftmp.1268
	jmp	.L2536	#
.L2534:
	.loc 1 10145 0 discriminator 4
	movq	-56(%rbp), %rax	# insn, tmp135
	movq	32(%rax), %rdx	# insn_29(D)->fld[3].rtx, D.30472
	movq	-56(%rbp), %rax	# insn, tmp136
	movq	%rdx, %rsi	# D.30472,
	movq	%rax, %rdi	# tmp136,
	call	single_set_2	#
	jmp	.L2536	#
.L2533:
	.loc 1 10145 0 discriminator 2
	movl	$0, %eax	#, iftmp.1267
.L2536:
	.loc 1 10145 0 discriminator 5
	movq	%rax, -8(%rbp)	# iftmp.1267, set2
	cmpq	$0, -8(%rbp)	#, set2
	je	.L2528	#,
	.loc 1 10146 0 is_stmt 1
	movq	-8(%rbp), %rax	# set2, tmp137
	movq	16(%rax), %rdx	# set2_70->fld[1].rtx, D.30472
	movq	-16(%rbp), %rax	# set, tmp138
	movq	8(%rax), %rax	# set_59->fld[0].rtx, D.30472
	movq	%rdx, %rsi	# D.30472,
	movq	%rax, %rdi	# D.30472,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.30466
	je	.L2528	#,
	.loc 1 10147 0
	movq	-8(%rbp), %rax	# set2, tmp139
	movq	8(%rax), %rax	# set2_70->fld[0].rtx, D.30472
	movzwl	(%rax), %eax	# _74->code, D.30470
	cmpw	$66, %ax	#, D.30470
	jne	.L2528	#,
	.loc 1 10148 0
	addl	$1, -76(%rbp)	#, cost
.L2528:
	.loc 1 10153 0
	cmpl	$1, -24(%rbp)	#, memory
	je	.L2537	#,
	.loc 1 10153 0 is_stmt 0 discriminator 1
	cmpl	$3, -24(%rbp)	#, memory
	jne	.L2538	#,
.L2537:
	.loc 1 10154 0 is_stmt 1
	movl	-32(%rbp), %edx	# insn_type, tmp140
	movq	-72(%rbp), %rcx	# dep_insn, tmp141
	movq	-56(%rbp), %rax	# insn, tmp142
	movq	%rcx, %rsi	# tmp141,
	movq	%rax, %rdi	# tmp142,
	call	ix86_agi_dependant	#
	testl	%eax, %eax	# D.30466
	jne	.L2538	#,
	.loc 1 10158 0
	cmpl	$7, -28(%rbp)	#, dep_insn_type
	je	.L2539	#,
	.loc 1 10159 0
	cmpl	$21, -28(%rbp)	#, dep_insn_type
	jne	.L2540	#,
.L2539:
	.loc 1 10160 0
	movl	$1, -76(%rbp)	#, cost
	jmp	.L2538	#
.L2540:
	.loc 1 10161 0
	cmpl	$1, -76(%rbp)	#, cost
	jle	.L2538	#,
	.loc 1 10162 0
	subl	$1, -76(%rbp)	#, cost
	.loc 1 10164 0
	jmp	.L2524	#
.L2538:
	jmp	.L2524	#
.L2519:
	.loc 1 10167 0
	movq	-56(%rbp), %rax	# insn, tmp143
	movq	%rax, %rdi	# tmp143,
	call	get_attr_memory	#
	movl	%eax, -24(%rbp)	# tmp144, memory
	.loc 1 10168 0
	movq	-72(%rbp), %rax	# dep_insn, tmp145
	movq	%rax, %rdi	# tmp145,
	call	get_attr_memory	#
	movl	%eax, -20(%rbp)	# tmp146, dep_memory
	.loc 1 10171 0
	cmpl	$16, -32(%rbp)	#, insn_type
	je	.L2541	#,
	.loc 1 10171 0 is_stmt 0 discriminator 1
	cmpl	$17, -32(%rbp)	#, insn_type
	jne	.L2542	#,
.L2541:
	.loc 1 10172 0 is_stmt 1
	cmpl	$16, -28(%rbp)	#, dep_insn_type
	je	.L2543	#,
	.loc 1 10172 0 is_stmt 0 discriminator 1
	cmpl	$17, -28(%rbp)	#, dep_insn_type
	jne	.L2542	#,
.L2543:
	.loc 1 10173 0 is_stmt 1
	movl	$1, %eax	#, D.30466
	jmp	.L2509	#
.L2542:
	.loc 1 10177 0
	cmpl	$1, -20(%rbp)	#, dep_memory
	je	.L2544	#,
	.loc 1 10177 0 is_stmt 0 discriminator 1
	cmpl	$3, -20(%rbp)	#, dep_memory
	jne	.L2545	#,
.L2544:
	.loc 1 10178 0 is_stmt 1
	cmpl	$7, -28(%rbp)	#, dep_insn_type
	je	.L2546	#,
	.loc 1 10178 0 is_stmt 0 discriminator 1
	movl	$2, %eax	#, iftmp.1269
	jmp	.L2547	#
.L2546:
	.loc 1 10178 0 discriminator 2
	movl	$1, %eax	#, iftmp.1269
.L2547:
	.loc 1 10178 0 discriminator 3
	addl	%eax, -76(%rbp)	# iftmp.1269, cost
.L2545:
	.loc 1 10181 0 is_stmt 1
	movq	-72(%rbp), %rax	# dep_insn, tmp147
	movq	%rax, %rdi	# tmp147,
	call	get_attr_fp_int_src	#
	testl	%eax, %eax	# D.30469
	je	.L2548	#,
	.loc 1 10182 0
	addl	$5, -76(%rbp)	#, cost
.L2548:
	.loc 1 10187 0
	cmpl	$1, -24(%rbp)	#, memory
	je	.L2549	#,
	.loc 1 10187 0 is_stmt 0 discriminator 1
	cmpl	$3, -24(%rbp)	#, memory
	jne	.L2550	#,
.L2549:
	.loc 1 10188 0 is_stmt 1
	movl	-32(%rbp), %edx	# insn_type, tmp148
	movq	-72(%rbp), %rcx	# dep_insn, tmp149
	movq	-56(%rbp), %rax	# insn, tmp150
	movq	%rcx, %rsi	# tmp149,
	movq	%rax, %rdi	# tmp150,
	call	ix86_agi_dependant	#
	testl	%eax, %eax	# D.30466
	jne	.L2550	#,
	.loc 1 10192 0
	cmpl	$7, -28(%rbp)	#, dep_insn_type
	je	.L2551	#,
	.loc 1 10193 0
	cmpl	$21, -28(%rbp)	#, dep_insn_type
	jne	.L2552	#,
.L2551:
	.loc 1 10194 0
	movl	$1, -76(%rbp)	#, cost
	jmp	.L2550	#
.L2552:
	.loc 1 10195 0
	cmpl	$2, -76(%rbp)	#, cost
	jle	.L2553	#,
	.loc 1 10196 0
	subl	$2, -76(%rbp)	#, cost
	jmp	.L2550	#
.L2553:
	.loc 1 10198 0
	movl	$1, -76(%rbp)	#, cost
	.loc 1 10200 0
	jmp	.L2524	#
.L2550:
	jmp	.L2524	#
.L2520:
	.loc 1 10203 0
	movq	-56(%rbp), %rax	# insn, tmp151
	movq	%rax, %rdi	# tmp151,
	call	get_attr_memory	#
	movl	%eax, -24(%rbp)	# tmp152, memory
	.loc 1 10204 0
	movq	-72(%rbp), %rax	# dep_insn, tmp153
	movq	%rax, %rdi	# tmp153,
	call	get_attr_memory	#
	movl	%eax, -20(%rbp)	# tmp154, dep_memory
	.loc 1 10206 0
	cmpl	$1, -20(%rbp)	#, dep_memory
	je	.L2554	#,
	.loc 1 10206 0 is_stmt 0 discriminator 1
	cmpl	$3, -20(%rbp)	#, dep_memory
	jne	.L2555	#,
.L2554:
	.loc 1 10208 0 is_stmt 1
	cmpl	$7, -28(%rbp)	#, dep_insn_type
	je	.L2556	#,
	.loc 1 10208 0 is_stmt 0 discriminator 1
	cmpl	$21, -28(%rbp)	#, dep_insn_type
	jne	.L2557	#,
.L2556:
	.loc 1 10209 0 is_stmt 1
	addl	$2, -76(%rbp)	#, cost
	jmp	.L2555	#
.L2557:
	.loc 1 10211 0
	addl	$3, -76(%rbp)	#, cost
.L2555:
	.loc 1 10216 0
	cmpl	$1, -24(%rbp)	#, memory
	je	.L2558	#,
	.loc 1 10216 0 is_stmt 0 discriminator 1
	cmpl	$3, -24(%rbp)	#, memory
	jne	.L2515	#,
.L2558:
	.loc 1 10217 0 is_stmt 1
	movl	-32(%rbp), %edx	# insn_type, tmp155
	movq	-72(%rbp), %rcx	# dep_insn, tmp156
	movq	-56(%rbp), %rax	# insn, tmp157
	movq	%rcx, %rsi	# tmp156,
	movq	%rax, %rdi	# tmp157,
	call	ix86_agi_dependant	#
	testl	%eax, %eax	# D.30466
	jne	.L2515	#,
	.loc 1 10221 0
	cmpl	$7, -28(%rbp)	#, dep_insn_type
	je	.L2559	#,
	.loc 1 10222 0
	cmpl	$21, -28(%rbp)	#, dep_insn_type
	jne	.L2560	#,
.L2559:
	.loc 1 10223 0
	movl	$0, -76(%rbp)	#, cost
	jmp	.L2515	#
.L2560:
	.loc 1 10224 0
	cmpl	$2, -76(%rbp)	#, cost
	jle	.L2561	#,
	.loc 1 10225 0
	subl	$3, -76(%rbp)	#, cost
	jmp	.L2515	#
.L2561:
	.loc 1 10227 0
	movl	$0, -76(%rbp)	#, cost
	.loc 1 10231 0
	jmp	.L2562	#
.L2515:
.L2562:
	nop
.L2524:
	.loc 1 10234 0
	movl	-76(%rbp), %eax	# cost, D.30466
.L2509:
	.loc 1 10235 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE156:
	.size	ix86_adjust_cost, .-ix86_adjust_cost
	.local	ix86_sched_data
	.comm	ix86_sched_data,32,32
	.type	ix86_safe_length, @function
ix86_safe_length:
.LFB157:
	.loc 1 10249 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# insn, insn
	.loc 1 10250 0
	movq	-8(%rbp), %rax	# insn, tmp65
	movl	40(%rax), %eax	# insn_3(D)->fld[4].rtint, D.30474
	testl	%eax, %eax	# D.30474
	js	.L2564	#,
	.loc 1 10250 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# insn, tmp66
	movl	40(%rax), %eax	# insn_3(D)->fld[4].rtint, D.30474
	notl	%eax	# tmp67
	shrl	$31, %eax	#, tmp68
	jmp	.L2565	#
.L2564:
	.loc 1 10250 0 discriminator 2
	movq	-8(%rbp), %rax	# insn, tmp69
	movq	%rax, %rdi	# tmp69,
	call	recog_memoized_1	#
	notl	%eax	# tmp70
	shrl	$31, %eax	#, tmp71
.L2565:
	.loc 1 10250 0 discriminator 3
	testb	%al, %al	# iftmp.1270
	je	.L2566	#,
	.loc 1 10251 0 is_stmt 1
	movq	-8(%rbp), %rax	# insn, tmp72
	movq	%rax, %rdi	# tmp72,
	call	get_attr_length	#
	jmp	.L2567	#
.L2566:
	.loc 1 10253 0
	movl	$128, %eax	#, D.30474
.L2567:
	.loc 1 10254 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE157:
	.size	ix86_safe_length, .-ix86_safe_length
	.type	ix86_safe_length_prefix, @function
ix86_safe_length_prefix:
.LFB158:
	.loc 1 10259 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# insn, insn
	.loc 1 10260 0
	movq	-8(%rbp), %rax	# insn, tmp65
	movl	40(%rax), %eax	# insn_3(D)->fld[4].rtint, D.30475
	testl	%eax, %eax	# D.30475
	js	.L2569	#,
	.loc 1 10260 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# insn, tmp66
	movl	40(%rax), %eax	# insn_3(D)->fld[4].rtint, D.30475
	notl	%eax	# tmp67
	shrl	$31, %eax	#, tmp68
	jmp	.L2570	#
.L2569:
	.loc 1 10260 0 discriminator 2
	movq	-8(%rbp), %rax	# insn, tmp69
	movq	%rax, %rdi	# tmp69,
	call	recog_memoized_1	#
	notl	%eax	# tmp70
	shrl	$31, %eax	#, tmp71
.L2570:
	.loc 1 10260 0 discriminator 3
	testb	%al, %al	# iftmp.1271
	je	.L2571	#,
	.loc 1 10261 0 is_stmt 1
	movq	-8(%rbp), %rax	# insn, tmp72
	movq	%rax, %rdi	# tmp72,
	call	get_attr_length	#
	jmp	.L2572	#
.L2571:
	.loc 1 10263 0
	movl	$0, %eax	#, D.30475
.L2572:
	.loc 1 10264 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE158:
	.size	ix86_safe_length_prefix, .-ix86_safe_length_prefix
	.type	ix86_safe_memory, @function
ix86_safe_memory:
.LFB159:
	.loc 1 10269 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# insn, insn
	.loc 1 10270 0
	movq	-8(%rbp), %rax	# insn, tmp65
	movl	40(%rax), %eax	# insn_3(D)->fld[4].rtint, D.30477
	testl	%eax, %eax	# D.30477
	js	.L2574	#,
	.loc 1 10270 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# insn, tmp66
	movl	40(%rax), %eax	# insn_3(D)->fld[4].rtint, D.30477
	notl	%eax	# tmp67
	shrl	$31, %eax	#, tmp68
	jmp	.L2575	#
.L2574:
	.loc 1 10270 0 discriminator 2
	movq	-8(%rbp), %rax	# insn, tmp69
	movq	%rax, %rdi	# tmp69,
	call	recog_memoized_1	#
	notl	%eax	# tmp70
	shrl	$31, %eax	#, tmp71
.L2575:
	.loc 1 10270 0 discriminator 3
	testb	%al, %al	# iftmp.1272
	je	.L2576	#,
	.loc 1 10271 0 is_stmt 1
	movq	-8(%rbp), %rax	# insn, tmp72
	movq	%rax, %rdi	# tmp72,
	call	get_attr_memory	#
	jmp	.L2577	#
.L2576:
	.loc 1 10273 0
	movl	$4, %eax	#, D.30476
.L2577:
	.loc 1 10274 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE159:
	.size	ix86_safe_memory, .-ix86_safe_memory
	.type	ix86_safe_pent_pair, @function
ix86_safe_pent_pair:
.LFB160:
	.loc 1 10279 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# insn, insn
	.loc 1 10280 0
	movq	-8(%rbp), %rax	# insn, tmp65
	movl	40(%rax), %eax	# insn_3(D)->fld[4].rtint, D.30479
	testl	%eax, %eax	# D.30479
	js	.L2579	#,
	.loc 1 10280 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# insn, tmp66
	movl	40(%rax), %eax	# insn_3(D)->fld[4].rtint, D.30479
	notl	%eax	# tmp67
	shrl	$31, %eax	#, tmp68
	jmp	.L2580	#
.L2579:
	.loc 1 10280 0 discriminator 2
	movq	-8(%rbp), %rax	# insn, tmp69
	movq	%rax, %rdi	# tmp69,
	call	recog_memoized_1	#
	notl	%eax	# tmp70
	shrl	$31, %eax	#, tmp71
.L2580:
	.loc 1 10280 0 discriminator 3
	testb	%al, %al	# iftmp.1273
	je	.L2581	#,
	.loc 1 10281 0 is_stmt 1
	movq	-8(%rbp), %rax	# insn, tmp72
	movq	%rax, %rdi	# tmp72,
	call	get_attr_pent_pair	#
	jmp	.L2582	#
.L2581:
	.loc 1 10283 0
	movl	$3, %eax	#, D.30478
.L2582:
	.loc 1 10284 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE160:
	.size	ix86_safe_pent_pair, .-ix86_safe_pent_pair
	.type	ix86_safe_ppro_uops, @function
ix86_safe_ppro_uops:
.LFB161:
	.loc 1 10289 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# insn, insn
	.loc 1 10290 0
	movq	-8(%rbp), %rax	# insn, tmp65
	movl	40(%rax), %eax	# insn_3(D)->fld[4].rtint, D.30481
	testl	%eax, %eax	# D.30481
	js	.L2584	#,
	.loc 1 10290 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# insn, tmp66
	movl	40(%rax), %eax	# insn_3(D)->fld[4].rtint, D.30481
	notl	%eax	# tmp67
	shrl	$31, %eax	#, tmp68
	jmp	.L2585	#
.L2584:
	.loc 1 10290 0 discriminator 2
	movq	-8(%rbp), %rax	# insn, tmp69
	movq	%rax, %rdi	# tmp69,
	call	recog_memoized_1	#
	notl	%eax	# tmp70
	shrl	$31, %eax	#, tmp71
.L2585:
	.loc 1 10290 0 discriminator 3
	testb	%al, %al	# iftmp.1274
	je	.L2586	#,
	.loc 1 10291 0 is_stmt 1
	movq	-8(%rbp), %rax	# insn, tmp72
	movq	%rax, %rdi	# tmp72,
	call	get_attr_ppro_uops	#
	jmp	.L2587	#
.L2586:
	.loc 1 10293 0
	movl	$2, %eax	#, D.30480
.L2587:
	.loc 1 10294 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE161:
	.size	ix86_safe_ppro_uops, .-ix86_safe_ppro_uops
	.section	.rodata
.LC268:
	.string	"PPRO packet: %d"
.LC269:
	.string	" %d"
	.text
	.type	ix86_dump_ppro_packet, @function
ix86_dump_ppro_packet:
.LFB162:
	.loc 1 10299 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# dump, dump
	.loc 1 10300 0
	movq	ix86_sched_data(%rip), %rax	# ix86_sched_data.ppro.decode, D.30482
	testq	%rax, %rax	# D.30482
	je	.L2588	#,
	.loc 1 10303 0
	movq	ix86_sched_data(%rip), %rax	# ix86_sched_data.ppro.decode, D.30482
	.loc 1 10302 0
	movl	8(%rax), %edx	# _2->fld[0].rtint, D.30483
	movq	-8(%rbp), %rax	# dump, tmp68
	movl	$.LC268, %esi	#,
	movq	%rax, %rdi	# tmp68,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 10304 0
	movq	ix86_sched_data+8(%rip), %rax	# ix86_sched_data.ppro.decode, D.30482
	testq	%rax, %rax	# D.30482
	je	.L2590	#,
	.loc 1 10305 0
	movq	ix86_sched_data+8(%rip), %rax	# ix86_sched_data.ppro.decode, D.30482
	movl	8(%rax), %edx	# _6->fld[0].rtint, D.30483
	movq	-8(%rbp), %rax	# dump, tmp69
	movl	$.LC269, %esi	#,
	movq	%rax, %rdi	# tmp69,
	movl	$0, %eax	#,
	call	fprintf	#
.L2590:
	.loc 1 10306 0
	movq	ix86_sched_data+16(%rip), %rax	# ix86_sched_data.ppro.decode, D.30482
	testq	%rax, %rax	# D.30482
	je	.L2591	#,
	.loc 1 10307 0
	movq	ix86_sched_data+16(%rip), %rax	# ix86_sched_data.ppro.decode, D.30482
	movl	8(%rax), %edx	# _9->fld[0].rtint, D.30483
	movq	-8(%rbp), %rax	# dump, tmp70
	movl	$.LC269, %esi	#,
	movq	%rax, %rdi	# tmp70,
	movl	$0, %eax	#,
	call	fprintf	#
.L2591:
	.loc 1 10308 0
	movq	-8(%rbp), %rax	# dump, tmp71
	movq	%rax, %rsi	# tmp71,
	movl	$10, %edi	#,
	call	fputc	#
.L2588:
	.loc 1 10310 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE162:
	.size	ix86_dump_ppro_packet, .-ix86_dump_ppro_packet
	.type	ix86_sched_init, @function
ix86_sched_init:
.LFB163:
	.loc 1 10319 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# dump, dump
	movl	%esi, -12(%rbp)	# sched_verbose, sched_verbose
	movl	%edx, -16(%rbp)	# veclen, veclen
	.loc 1 10320 0
	movl	$32, %edx	#,
	movl	$0, %esi	#,
	movl	$ix86_sched_data, %edi	#,
	call	memset	#
	.loc 1 10321 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE163:
	.size	ix86_sched_init, .-ix86_sched_init
	.type	ix86_reorder_insn, @function
ix86_reorder_insn:
.LFB164:
	.loc 1 10328 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# insnp, insnp
	movq	%rsi, -32(%rbp)	# slot, slot
	.loc 1 10329 0
	movq	-24(%rbp), %rax	# insnp, tmp60
	cmpq	-32(%rbp), %rax	# slot, tmp60
	je	.L2593	#,
.LBB119:
	.loc 1 10331 0
	movq	-24(%rbp), %rax	# insnp, tmp61
	movq	(%rax), %rax	# *insnp_2(D), tmp62
	movq	%rax, -8(%rbp)	# tmp62, insn
.L2595:
	.loc 1 10333 0 discriminator 1
	movq	-24(%rbp), %rax	# insnp, tmp63
	movq	8(%rax), %rdx	# MEM[(struct rtx_def * *)insnp_1 + 8B], D.30486
	movq	-24(%rbp), %rax	# insnp, tmp64
	movq	%rdx, (%rax)	# D.30486, *insnp_1
	.loc 1 10334 0 discriminator 1
	addq	$8, -24(%rbp)	#, insnp
	movq	-24(%rbp), %rax	# insnp, tmp65
	cmpq	-32(%rbp), %rax	# slot, tmp65
	jne	.L2595	#,
	.loc 1 10335 0
	movq	-24(%rbp), %rax	# insnp, tmp66
	movq	-8(%rbp), %rdx	# insn, tmp67
	movq	%rdx, (%rax)	# tmp67, *insnp_6
.L2593:
.LBE119:
	.loc 1 10337 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE164:
	.size	ix86_reorder_insn, .-ix86_reorder_insn
	.type	ix86_pent_find_pair, @function
ix86_pent_find_pair:
.LFB165:
	.loc 1 10350 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# e_ready, e_ready
	movq	%rsi, -80(%rbp)	# ready, ready
	movl	%edx, -84(%rbp)	# type, type
	movq	%rcx, -96(%rbp)	# first, first
	.loc 1 10354 0
	movq	$0, -24(%rbp)	#, bestinsnp
	.loc 1 10356 0
	movq	-96(%rbp), %rax	# first, tmp74
	movq	%rax, %rdi	# tmp74,
	call	ix86_safe_length	#
	movl	%eax, %ebx	#, D.30488
	movq	-96(%rbp), %rax	# first, tmp75
	movq	%rax, %rdi	# tmp75,
	call	ix86_safe_length_prefix	#
	addl	$7, %eax	#, D.30488
	cmpl	%eax, %ebx	# D.30488, D.30488
	jle	.L2597	#,
	.loc 1 10357 0
	movl	$0, %eax	#, D.30487
	jmp	.L2598	#
.L2597:
	.loc 1 10359 0
	movq	-96(%rbp), %rax	# first, tmp76
	movq	%rax, %rdi	# tmp76,
	call	ix86_safe_memory	#
	movl	%eax, -52(%rbp)	# tmp77, memory
	.loc 1 10360 0
	movq	-96(%rbp), %rax	# first, tmp78
	movq	%rax, %rdi	# tmp78,
	call	result_ready_cost	#
	movl	%eax, -48(%rbp)	# tmp79, cycles
	.loc 1 10361 0
	movl	$2147483647, -60(%rbp)	#, mincycles
	.loc 1 10363 0
	movq	-72(%rbp), %rax	# e_ready, tmp80
	movq	%rax, -32(%rbp)	# tmp80, insnp
	jmp	.L2599	#
.L2604:
	.loc 1 10364 0
	movq	-32(%rbp), %rax	# insnp, tmp81
	movq	(%rax), %rax	# *insnp_3, D.30489
	movq	%rax, %rdi	# D.30489,
	call	ix86_safe_pent_pair	#
	movl	%eax, -44(%rbp)	# tmp82, tmp
	movl	-44(%rbp), %eax	# tmp, tmp83
	cmpl	-84(%rbp), %eax	# type, tmp83
	jne	.L2600	#,
	.loc 1 10365 0
	movq	-32(%rbp), %rax	# insnp, tmp84
	movq	(%rax), %rax	# *insnp_3, D.30489
	movq	%rax, %rdi	# D.30489,
	call	ix86_safe_length	#
	movl	%eax, %ebx	#, D.30488
	movq	-32(%rbp), %rax	# insnp, tmp85
	movq	(%rax), %rax	# *insnp_3, D.30489
	movq	%rax, %rdi	# D.30489,
	call	ix86_safe_length_prefix	#
	addl	$7, %eax	#, D.30488
	cmpl	%eax, %ebx	# D.30488, D.30488
	jg	.L2600	#,
.LBB120:
	.loc 1 10370 0
	movq	-32(%rbp), %rax	# insnp, tmp86
	movq	(%rax), %rax	# *insnp_3, D.30489
	movq	%rax, %rdi	# D.30489,
	call	ix86_safe_memory	#
	movl	%eax, -40(%rbp)	# tmp87, second_memory
	.loc 1 10371 0
	movq	-32(%rbp), %rax	# insnp, tmp88
	movq	(%rax), %rax	# *insnp_3, D.30489
	movq	%rax, %rdi	# D.30489,
	call	result_ready_cost	#
	movl	%eax, -36(%rbp)	# tmp89, secondcycles
	.loc 1 10372 0
	movl	-36(%rbp), %eax	# secondcycles, tmp90
	movl	-48(%rbp), %edx	# cycles, tmp91
	subl	%eax, %edx	# tmp90, D.30488
	movl	%edx, %eax	# D.30488, tmp92
	sarl	$31, %eax	#, tmp92
	xorl	%eax, %edx	# tmp92, tmp93
	movl	%edx, -56(%rbp)	# tmp93, currentcycles
	subl	%eax, -56(%rbp)	# tmp92, currentcycles
	.loc 1 10374 0
	cmpl	$0, -36(%rbp)	#, secondcycles
	jle	.L2601	#,
	.loc 1 10374 0 is_stmt 0 discriminator 1
	cmpl	$0, -48(%rbp)	#, cycles
	jle	.L2601	#,
	.loc 1 10378 0 is_stmt 1
	cmpl	$3, -52(%rbp)	#, memory
	jne	.L2602	#,
	.loc 1 10378 0 is_stmt 0 discriminator 1
	cmpl	$3, -40(%rbp)	#, second_memory
	jne	.L2602	#,
	.loc 1 10379 0 is_stmt 1
	addl	$2, -56(%rbp)	#, currentcycles
.L2602:
	.loc 1 10383 0
	cmpl	$3, -52(%rbp)	#, memory
	jne	.L2601	#,
	.loc 1 10383 0 is_stmt 0 discriminator 1
	cmpl	$1, -40(%rbp)	#, second_memory
	jne	.L2601	#,
	.loc 1 10384 0 is_stmt 1
	cmpl	$0, -44(%rbp)	#, tmp
	je	.L2601	#,
	.loc 1 10385 0
	movq	-96(%rbp), %rax	# first, tmp94
	movq	%rax, %rdi	# tmp94,
	call	ix86_safe_pent_pair	#
	testl	%eax, %eax	# D.30490
	je	.L2601	#,
	.loc 1 10386 0
	addl	$1, -56(%rbp)	#, currentcycles
.L2601:
	.loc 1 10388 0
	movl	-56(%rbp), %eax	# currentcycles, tmp95
	cmpl	-60(%rbp), %eax	# mincycles, tmp95
	jge	.L2600	#,
	.loc 1 10389 0
	movq	-32(%rbp), %rax	# insnp, tmp96
	movq	%rax, -24(%rbp)	# tmp96, bestinsnp
	movl	-56(%rbp), %eax	# currentcycles, tmp97
	movl	%eax, -60(%rbp)	# tmp97, mincycles
.L2600:
.LBE120:
	.loc 1 10363 0
	subq	$8, -32(%rbp)	#, insnp
.L2599:
	.loc 1 10363 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# insnp, tmp98
	cmpq	-80(%rbp), %rax	# ready, tmp98
	jb	.L2603	#,
	.loc 1 10363 0 discriminator 2
	cmpl	$0, -60(%rbp)	#, mincycles
	jne	.L2604	#,
.L2603:
	.loc 1 10392 0 is_stmt 1
	movq	-24(%rbp), %rax	# bestinsnp, D.30487
.L2598:
	.loc 1 10393 0
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE165:
	.size	ix86_pent_find_pair, .-ix86_pent_find_pair
	.type	ix86_sched_reorder_pentium, @function
ix86_sched_reorder_pentium:
.LFB166:
	.loc 1 10401 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# ready, ready
	movq	%rsi, -32(%rbp)	# e_ready, e_ready
	.loc 1 10409 0
	movq	-32(%rbp), %rax	# e_ready, tmp71
	movq	(%rax), %rax	# *e_ready_7(D), D.30491
	movq	%rax, %rdi	# D.30491,
	call	ix86_safe_pent_pair	#
	movl	%eax, -12(%rbp)	# tmp72, pair1
	.loc 1 10412 0
	cmpl	$3, -12(%rbp)	#, pair1
	jne	.L2606	#,
	.loc 1 10413 0
	jmp	.L2605	#
.L2606:
	.loc 1 10415 0
	movl	$3, -16(%rbp)	#, pair2
	.loc 1 10416 0
	movq	$0, -8(%rbp)	#, insnp
	.loc 1 10420 0
	cmpl	$0, -12(%rbp)	#, pair1
	je	.L2608	#,
	.loc 1 10420 0 is_stmt 0 discriminator 1
	cmpl	$2, -12(%rbp)	#, pair1
	jne	.L2609	#,
.L2608:
	.loc 1 10422 0 is_stmt 1
	movq	-32(%rbp), %rax	# e_ready, tmp73
	movq	(%rax), %rdx	# *e_ready_7(D), D.30491
	movq	-32(%rbp), %rax	# e_ready, tmp74
	leaq	-8(%rax), %rdi	#, D.30492
	movq	-24(%rbp), %rax	# ready, tmp75
	movq	%rdx, %rcx	# D.30491,
	movl	$1, %edx	#,
	movq	%rax, %rsi	# tmp75,
	call	ix86_pent_find_pair	#
	movq	%rax, -8(%rbp)	# tmp76, insnp
	.loc 1 10424 0
	cmpq	$0, -8(%rbp)	#, insnp
	je	.L2609	#,
	.loc 1 10425 0
	movl	$1, -16(%rbp)	#, pair2
.L2609:
	.loc 1 10430 0
	cmpl	$3, -16(%rbp)	#, pair2
	jne	.L2610	#,
	.loc 1 10431 0
	cmpl	$1, -12(%rbp)	#, pair1
	je	.L2611	#,
	.loc 1 10431 0 is_stmt 0 discriminator 1
	cmpl	$0, -12(%rbp)	#, pair1
	jne	.L2610	#,
.L2611:
	.loc 1 10433 0 is_stmt 1
	movq	-32(%rbp), %rax	# e_ready, tmp77
	movq	(%rax), %rdx	# *e_ready_7(D), D.30491
	movq	-32(%rbp), %rax	# e_ready, tmp78
	leaq	-8(%rax), %rdi	#, D.30492
	movq	-24(%rbp), %rax	# ready, tmp79
	movq	%rdx, %rcx	# D.30491,
	movl	$2, %edx	#,
	movq	%rax, %rsi	# tmp79,
	call	ix86_pent_find_pair	#
	movq	%rax, -8(%rbp)	# tmp80, insnp
	.loc 1 10435 0
	cmpq	$0, -8(%rbp)	#, insnp
	je	.L2610	#,
	.loc 1 10436 0
	movl	$2, -16(%rbp)	#, pair2
.L2610:
	.loc 1 10441 0
	cmpl	$3, -16(%rbp)	#, pair2
	jne	.L2612	#,
	.loc 1 10443 0
	movq	-32(%rbp), %rax	# e_ready, tmp81
	movq	(%rax), %rdx	# *e_ready_7(D), D.30491
	movq	-32(%rbp), %rax	# e_ready, tmp82
	leaq	-8(%rax), %rdi	#, D.30492
	movq	-24(%rbp), %rax	# ready, tmp83
	movq	%rdx, %rcx	# D.30491,
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp83,
	call	ix86_pent_find_pair	#
	movq	%rax, -8(%rbp)	# tmp84, insnp
	.loc 1 10445 0
	cmpq	$0, -8(%rbp)	#, insnp
	je	.L2612	#,
	.loc 1 10446 0
	movl	$0, -16(%rbp)	#, pair2
.L2612:
	.loc 1 10449 0
	cmpl	$3, -16(%rbp)	#, pair2
	jne	.L2613	#,
	.loc 1 10450 0
	jmp	.L2605	#
.L2613:
	.loc 1 10453 0
	cmpl	$2, -12(%rbp)	#, pair1
	je	.L2614	#,
	.loc 1 10453 0 is_stmt 0 discriminator 1
	cmpl	$1, -16(%rbp)	#, pair2
	je	.L2614	#,
	.loc 1 10454 0 is_stmt 1
	cmpl	$0, -12(%rbp)	#, pair1
	jne	.L2615	#,
	.loc 1 10454 0 is_stmt 0 discriminator 1
	cmpl	$0, -16(%rbp)	#, pair2
	jne	.L2615	#,
	.loc 1 10455 0 is_stmt 1
	movq	-32(%rbp), %rax	# e_ready, tmp85
	movq	(%rax), %rax	# *e_ready_7(D), D.30491
	movq	%rax, %rdi	# D.30491,
	call	ix86_safe_memory	#
	cmpl	$3, %eax	#, D.30493
	jne	.L2615	#,
	.loc 1 10456 0
	movq	-8(%rbp), %rax	# insnp, tmp86
	movq	(%rax), %rax	# *insnp_6, D.30491
	movq	%rax, %rdi	# D.30491,
	call	ix86_safe_memory	#
	cmpl	$1, %eax	#, D.30493
	jne	.L2615	#,
.L2614:
	.loc 1 10457 0
	movq	-32(%rbp), %rdx	# e_ready, tmp87
	movq	-8(%rbp), %rax	# insnp, tmp88
	movq	%rdx, %rsi	# tmp87,
	movq	%rax, %rdi	# tmp88,
	call	ix86_reorder_insn	#
	jmp	.L2605	#
.L2615:
	.loc 1 10459 0
	movq	-32(%rbp), %rax	# e_ready, tmp89
	leaq	-8(%rax), %rdx	#, D.30492
	movq	-8(%rbp), %rax	# insnp, tmp90
	movq	%rdx, %rsi	# D.30492,
	movq	%rax, %rdi	# tmp90,
	call	ix86_reorder_insn	#
.L2605:
	.loc 1 10460 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE166:
	.size	ix86_sched_reorder_pentium, .-ix86_sched_reorder_pentium
	.type	ix86_sched_reorder_ppro, @function
ix86_sched_reorder_ppro:
.LFB167:
	.loc 1 10466 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# ready, ready
	movq	%rsi, -80(%rbp)	# e_ready, e_ready
	.loc 1 10479 0
	movq	ix86_sched_data(%rip), %rax	# MEM[(char * {ref-all})&ix86_sched_data], tmp71
	movq	%rax, -32(%rbp)	# tmp71, MEM[(char * {ref-all})&decode]
	movq	ix86_sched_data+8(%rip), %rax	# MEM[(char * {ref-all})&ix86_sched_data], tmp72
	movq	%rax, -24(%rbp)	# tmp72, MEM[(char * {ref-all})&decode]
	movq	ix86_sched_data+16(%rip), %rax	# MEM[(char * {ref-all})&ix86_sched_data], tmp73
	movq	%rax, -16(%rbp)	# tmp73, MEM[(char * {ref-all})&decode]
	.loc 1 10480 0
	movl	$0, -48(%rbp)	#, issued_this_cycle
	.loc 1 10482 0
	movq	-80(%rbp), %rax	# e_ready, tmp74
	movq	%rax, -40(%rbp)	# tmp74, insnp
	.loc 1 10483 0
	movq	-40(%rbp), %rax	# insnp, tmp75
	movq	(%rax), %rax	# *insnp_16, D.30494
	movq	%rax, %rdi	# D.30494,
	call	ix86_safe_ppro_uops	#
	movl	%eax, -52(%rbp)	# tmp76, cur_uops
	.loc 1 10487 0
	movq	-32(%rbp), %rax	# decode, D.30494
	testq	%rax, %rax	# D.30494
	jne	.L2617	#,
	.loc 1 10489 0
	cmpl	$2, -52(%rbp)	#, cur_uops
	jne	.L2618	#,
	.loc 1 10491 0
	movq	-40(%rbp), %rax	# insnp, tmp77
	movq	(%rax), %rax	# *insnp_16, D.30494
	movq	%rax, -32(%rbp)	# D.30494, decode
	.loc 1 10492 0
	jmp	.L2619	#
.L2618:
	.loc 1 10496 0
	jmp	.L2620	#
.L2623:
	.loc 1 10498 0
	movq	-40(%rbp), %rax	# insnp, tmp78
	cmpq	-72(%rbp), %rax	# ready, tmp78
	jne	.L2621	#,
	.loc 1 10499 0
	jmp	.L2622	#
.L2621:
	.loc 1 10500 0
	subq	$8, -40(%rbp)	#, insnp
	movq	-40(%rbp), %rax	# insnp, tmp79
	movq	(%rax), %rax	# *insnp_22, D.30494
	movq	%rax, %rdi	# D.30494,
	call	ix86_safe_ppro_uops	#
	movl	%eax, -52(%rbp)	# tmp80, cur_uops
.L2620:
	.loc 1 10496 0 discriminator 1
	cmpl	$1, -52(%rbp)	#, cur_uops
	jne	.L2623	#,
.L2622:
	.loc 1 10504 0
	cmpl	$1, -52(%rbp)	#, cur_uops
	jne	.L2624	#,
	.loc 1 10505 0
	movq	-80(%rbp), %rdx	# e_ready, tmp81
	movq	-40(%rbp), %rax	# insnp, tmp82
	movq	%rdx, %rsi	# tmp81,
	movq	%rax, %rdi	# tmp82,
	call	ix86_reorder_insn	#
.L2624:
	.loc 1 10508 0
	movl	$1, -48(%rbp)	#, issued_this_cycle
	.loc 1 10509 0
	movq	-80(%rbp), %rax	# e_ready, e_ready.1275
	leaq	-8(%rax), %rdx	#, tmp83
	movq	%rdx, -80(%rbp)	# tmp83, e_ready
	movq	(%rax), %rax	# *e_ready.1275_26, D.30494
	movq	%rax, -32(%rbp)	# D.30494, decode
.L2617:
	.loc 1 10513 0
	movl	$1, -44(%rbp)	#, i
	jmp	.L2625	#
.L2632:
	.loc 1 10514 0
	movl	-44(%rbp), %eax	# i, tmp85
	cltq
	movq	-32(%rbp,%rax,8), %rax	# decode, D.30494
	testq	%rax, %rax	# D.30494
	jne	.L2626	#,
	.loc 1 10516 0
	movq	-72(%rbp), %rax	# ready, tmp86
	cmpq	-80(%rbp), %rax	# e_ready, tmp86
	jb	.L2627	#,
	.loc 1 10517 0
	jmp	.L2619	#
.L2627:
	.loc 1 10519 0
	movq	-80(%rbp), %rax	# e_ready, tmp87
	movq	%rax, -40(%rbp)	# tmp87, insnp
	.loc 1 10520 0
	movq	-40(%rbp), %rax	# insnp, tmp88
	movq	(%rax), %rax	# *insnp_31, D.30494
	movq	%rax, %rdi	# D.30494,
	call	ix86_safe_ppro_uops	#
	movl	%eax, -52(%rbp)	# tmp89, cur_uops
	.loc 1 10521 0
	jmp	.L2628	#
.L2631:
	.loc 1 10523 0
	movq	-40(%rbp), %rax	# insnp, tmp90
	cmpq	-72(%rbp), %rax	# ready, tmp90
	jne	.L2629	#,
	.loc 1 10524 0
	jmp	.L2630	#
.L2629:
	.loc 1 10525 0
	subq	$8, -40(%rbp)	#, insnp
	movq	-40(%rbp), %rax	# insnp, tmp91
	movq	(%rax), %rax	# *insnp_34, D.30494
	movq	%rax, %rdi	# D.30494,
	call	ix86_safe_ppro_uops	#
	movl	%eax, -52(%rbp)	# tmp92, cur_uops
.L2628:
	.loc 1 10521 0 discriminator 1
	cmpl	$0, -52(%rbp)	#, cur_uops
	jne	.L2631	#,
.L2630:
	.loc 1 10529 0
	cmpl	$0, -52(%rbp)	#, cur_uops
	jne	.L2626	#,
	.loc 1 10531 0
	movq	-80(%rbp), %rdx	# e_ready, tmp93
	movq	-40(%rbp), %rax	# insnp, tmp94
	movq	%rdx, %rsi	# tmp93,
	movq	%rax, %rdi	# tmp94,
	call	ix86_reorder_insn	#
	.loc 1 10532 0
	movq	-80(%rbp), %rax	# e_ready, e_ready.1276
	leaq	-8(%rax), %rdx	#, tmp95
	movq	%rdx, -80(%rbp)	# tmp95, e_ready
	movq	(%rax), %rdx	# *e_ready.1276_37, D.30494
	movl	-44(%rbp), %eax	# i, tmp97
	cltq
	movq	%rdx, -32(%rbp,%rax,8)	# D.30494, decode
	.loc 1 10533 0
	addl	$1, -48(%rbp)	#, issued_this_cycle
	.loc 1 10534 0
	nop
.L2626:
	.loc 1 10513 0
	addl	$1, -44(%rbp)	#, i
.L2625:
	.loc 1 10513 0 is_stmt 0 discriminator 1
	cmpl	$2, -44(%rbp)	#, i
	jle	.L2632	#,
.L2619:
	.loc 1 10542 0 is_stmt 1
	cmpl	$0, -48(%rbp)	#, issued_this_cycle
	jne	.L2633	#,
	.loc 1 10543 0
	movl	$1, -48(%rbp)	#, issued_this_cycle
.L2633:
	.loc 1 10544 0
	movl	-48(%rbp), %eax	# issued_this_cycle, tmp98
	movl	%eax, ix86_sched_data+24(%rip)	# tmp98, ix86_sched_data.ppro.issued_this_cycle
	.loc 1 10545 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE167:
	.size	ix86_sched_reorder_ppro, .-ix86_sched_reorder_ppro
	.type	ix86_sched_reorder, @function
ix86_sched_reorder:
.LFB168:
	.loc 1 10556 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# dump, dump
	movl	%esi, -28(%rbp)	# sched_verbose, sched_verbose
	movq	%rdx, -40(%rbp)	# ready, ready
	movq	%rcx, -48(%rbp)	# n_readyp, n_readyp
	movl	%r8d, -32(%rbp)	# clock_var, clock_var
	.loc 1 10557 0
	movq	-48(%rbp), %rax	# n_readyp, tmp65
	movl	(%rax), %eax	# *n_readyp_1(D), tmp66
	movl	%eax, -12(%rbp)	# tmp66, n_ready
	.loc 1 10558 0
	movl	-12(%rbp), %eax	# n_ready, tmp67
	cltq
	salq	$3, %rax	#, D.30495
	leaq	-8(%rax), %rdx	#, D.30496
	movq	-40(%rbp), %rax	# ready, tmp71
	addq	%rdx, %rax	# D.30496, tmp70
	movq	%rax, -8(%rbp)	# tmp70, e_ready
	.loc 1 10560 0
	cmpl	$1, -12(%rbp)	#, n_ready
	jg	.L2635	#,
	.loc 1 10561 0
	jmp	.L2636	#
.L2635:
	.loc 1 10563 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1277
	cmpl	$2, %eax	#, ix86_cpu.1277
	je	.L2638	#,
	cmpl	$3, %eax	#, ix86_cpu.1277
	je	.L2639	#,
	.loc 1 10566 0
	jmp	.L2636	#
.L2638:
	.loc 1 10569 0
	movq	-8(%rbp), %rdx	# e_ready, tmp72
	movq	-40(%rbp), %rax	# ready, tmp73
	movq	%rdx, %rsi	# tmp72,
	movq	%rax, %rdi	# tmp73,
	call	ix86_sched_reorder_pentium	#
	.loc 1 10570 0
	jmp	.L2636	#
.L2639:
	.loc 1 10573 0
	movq	-8(%rbp), %rdx	# e_ready, tmp74
	movq	-40(%rbp), %rax	# ready, tmp75
	movq	%rdx, %rsi	# tmp74,
	movq	%rax, %rdi	# tmp75,
	call	ix86_sched_reorder_ppro	#
	.loc 1 10574 0
	nop
.L2636:
	.loc 1 10578 0
	call	ix86_issue_rate	#
	.loc 1 10579 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE168:
	.size	ix86_sched_reorder, .-ix86_sched_reorder
	.type	ix86_variable_issue, @function
ix86_variable_issue:
.LFB169:
	.loc 1 10590 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# dump, dump
	movl	%esi, -28(%rbp)	# sched_verbose, sched_verbose
	movq	%rdx, -40(%rbp)	# insn, insn
	movl	%ecx, -32(%rbp)	# can_issue_more, can_issue_more
	.loc 1 10592 0
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1278
	cmpl	$3, %eax	#, ix86_cpu.1278
	je	.L2643	#,
	.loc 1 10595 0
	movl	-32(%rbp), %eax	# can_issue_more, tmp65
	subl	$1, %eax	#, D.30498
	jmp	.L2644	#
.L2643:
.LBB121:
	.loc 1 10599 0
	movq	-40(%rbp), %rax	# insn, tmp66
	movq	%rax, %rdi	# tmp66,
	call	ix86_safe_ppro_uops	#
	movl	%eax, -4(%rbp)	# tmp67, uops
	.loc 1 10601 0
	cmpl	$2, -4(%rbp)	#, uops
	jne	.L2645	#,
	.loc 1 10603 0
	cmpl	$0, -28(%rbp)	#, sched_verbose
	je	.L2646	#,
	.loc 1 10604 0
	movq	-24(%rbp), %rax	# dump, tmp68
	movq	%rax, %rdi	# tmp68,
	call	ix86_dump_ppro_packet	#
.L2646:
	.loc 1 10605 0
	movq	-40(%rbp), %rax	# insn, tmp69
	movq	%rax, ix86_sched_data(%rip)	# tmp69, ix86_sched_data.ppro.decode
	.loc 1 10606 0
	movq	$0, ix86_sched_data+8(%rip)	#, ix86_sched_data.ppro.decode
	.loc 1 10607 0
	movq	$0, ix86_sched_data+16(%rip)	#, ix86_sched_data.ppro.decode
	.loc 1 10608 0
	cmpl	$0, -28(%rbp)	#, sched_verbose
	je	.L2647	#,
	.loc 1 10609 0
	movq	-24(%rbp), %rax	# dump, tmp70
	movq	%rax, %rdi	# tmp70,
	call	ix86_dump_ppro_packet	#
.L2647:
	.loc 1 10610 0
	movq	$0, ix86_sched_data(%rip)	#, ix86_sched_data.ppro.decode
	jmp	.L2648	#
.L2645:
	.loc 1 10612 0
	cmpl	$1, -4(%rbp)	#, uops
	jne	.L2649	#,
	.loc 1 10614 0
	cmpl	$0, -28(%rbp)	#, sched_verbose
	je	.L2650	#,
	.loc 1 10615 0
	movq	-24(%rbp), %rax	# dump, tmp71
	movq	%rax, %rdi	# tmp71,
	call	ix86_dump_ppro_packet	#
.L2650:
	.loc 1 10616 0
	movq	-40(%rbp), %rax	# insn, tmp72
	movq	%rax, ix86_sched_data(%rip)	# tmp72, ix86_sched_data.ppro.decode
	.loc 1 10617 0
	movq	$0, ix86_sched_data+8(%rip)	#, ix86_sched_data.ppro.decode
	.loc 1 10618 0
	movq	$0, ix86_sched_data+16(%rip)	#, ix86_sched_data.ppro.decode
	jmp	.L2648	#
.L2649:
	.loc 1 10622 0
	movl	$0, -8(%rbp)	#, i
	jmp	.L2651	#
.L2654:
	.loc 1 10623 0
	movl	-8(%rbp), %eax	# i, tmp74
	cltq
	movq	ix86_sched_data(,%rax,8), %rax	# ix86_sched_data.ppro.decode, D.30499
	testq	%rax, %rax	# D.30499
	jne	.L2652	#,
	.loc 1 10625 0
	movl	-8(%rbp), %eax	# i, tmp76
	cltq
	movq	-40(%rbp), %rdx	# insn, tmp77
	movq	%rdx, ix86_sched_data(,%rax,8)	# tmp77, ix86_sched_data.ppro.decode
	.loc 1 10626 0
	jmp	.L2653	#
.L2652:
	.loc 1 10622 0
	addl	$1, -8(%rbp)	#, i
.L2651:
	.loc 1 10622 0 is_stmt 0 discriminator 1
	cmpl	$2, -8(%rbp)	#, i
	jle	.L2654	#,
.L2653:
	.loc 1 10628 0 is_stmt 1
	cmpl	$3, -8(%rbp)	#, i
	jne	.L2655	#,
	.loc 1 10629 0
	movl	$__FUNCTION__.16480, %edx	#,
	movl	$10629, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2655:
	.loc 1 10630 0
	cmpl	$2, -8(%rbp)	#, i
	jne	.L2648	#,
	.loc 1 10632 0
	cmpl	$0, -28(%rbp)	#, sched_verbose
	je	.L2656	#,
	.loc 1 10633 0
	movq	-24(%rbp), %rax	# dump, tmp78
	movq	%rax, %rdi	# tmp78,
	call	ix86_dump_ppro_packet	#
.L2656:
	.loc 1 10634 0
	movq	$0, ix86_sched_data(%rip)	#, ix86_sched_data.ppro.decode
	.loc 1 10635 0
	movq	$0, ix86_sched_data+8(%rip)	#, ix86_sched_data.ppro.decode
	.loc 1 10636 0
	movq	$0, ix86_sched_data+16(%rip)	#, ix86_sched_data.ppro.decode
.L2648:
.LBE121:
	.loc 1 10640 0
	movl	ix86_sched_data+24(%rip), %eax	# ix86_sched_data.ppro.issued_this_cycle, D.30498
	subl	$1, %eax	#, D.30498
	movl	%eax, ix86_sched_data+24(%rip)	# D.30498, ix86_sched_data.ppro.issued_this_cycle
	movl	ix86_sched_data+24(%rip), %eax	# ix86_sched_data.ppro.issued_this_cycle, D.30498
.L2644:
	.loc 1 10642 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE169:
	.size	ix86_variable_issue, .-ix86_variable_issue
	.globl	ix86_set_move_mem_attrs
	.type	ix86_set_move_mem_attrs, @function
ix86_set_move_mem_attrs:
.LFB170:
	.loc 1 10652 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -24(%rbp)	# insns, insns
	movq	%rsi, -32(%rbp)	# dstref, dstref
	movq	%rdx, -40(%rbp)	# srcref, srcref
	movq	%rcx, -48(%rbp)	# dstreg, dstreg
	movq	%r8, -56(%rbp)	# srcreg, srcreg
	.loc 1 10655 0
	movq	-24(%rbp), %rax	# insns, tmp63
	movq	%rax, -8(%rbp)	# tmp63, insn
	jmp	.L2658	#
.L2660:
	.loc 1 10656 0
	movq	-8(%rbp), %rax	# insn, tmp64
	movzwl	(%rax), %eax	# insn_1->code, D.30500
	movzwl	%ax, %eax	# D.30500, D.30501
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.30502
	cmpb	$105, %al	#, D.30502
	jne	.L2659	#,
	.loc 1 10657 0
	movq	-8(%rbp), %rax	# insn, tmp66
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.30503
	movq	-56(%rbp), %rdi	# srcreg, tmp67
	movq	-48(%rbp), %rcx	# dstreg, tmp68
	movq	-40(%rbp), %rdx	# srcref, tmp69
	movq	-32(%rbp), %rsi	# dstref, tmp70
	movq	%rdi, %r8	# tmp67,
	movq	%rax, %rdi	# D.30503,
	call	ix86_set_move_mem_attrs_1	#
.L2659:
	.loc 1 10655 0
	movq	-8(%rbp), %rax	# insn, tmp71
	movq	24(%rax), %rax	# insn_1->fld[2].rtx, tmp72
	movq	%rax, -8(%rbp)	# tmp72, insn
.L2658:
	.loc 1 10655 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, insn
	jne	.L2660	#,
	.loc 1 10659 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE170:
	.size	ix86_set_move_mem_attrs, .-ix86_set_move_mem_attrs
	.type	ix86_set_move_mem_attrs_1, @function
ix86_set_move_mem_attrs_1:
.LFB171:
	.loc 1 10668 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# dstref, dstref
	movq	%rdx, -56(%rbp)	# srcref, srcref
	movq	%rcx, -64(%rbp)	# dstreg, dstreg
	movq	%r8, -72(%rbp)	# srcreg, srcreg
	.loc 1 10669 0
	movq	-40(%rbp), %rax	# x, tmp85
	movzwl	(%rax), %eax	# x_4(D)->code, D.30504
	movzwl	%ax, %eax	# D.30504, tmp86
	movl	%eax, -12(%rbp)	# tmp86, code
	.loc 1 10670 0
	movl	-12(%rbp), %eax	# code, code.1279
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp88
	movq	%rax, -8(%rbp)	# tmp88, format_ptr
	.loc 1 10673 0
	cmpl	$66, -12(%rbp)	#, code
	jne	.L2662	#,
	.loc 1 10673 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp89
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.30505
	cmpq	-64(%rbp), %rax	# dstreg, D.30505
	jne	.L2662	#,
	.loc 1 10674 0 is_stmt 1
	movq	-48(%rbp), %rax	# dstref, tmp90
	movzbl	3(%rax), %eax	# *dstref_11(D), tmp93
	shrb	$3, %al	#, D.30506
	andl	$1, %eax	#, D.30506
	movq	-40(%rbp), %rdx	# x, tmp94
	andl	$1, %eax	#, tmp96
	leal	0(,%rax,8), %ecx	#, tmp97
	movzbl	3(%rdx), %eax	# x_4(D)->volatil, tmp98
	andl	$-9, %eax	#, tmp99
	orl	%ecx, %eax	# tmp97, tmp100
	movb	%al, 3(%rdx)	# tmp100, x_4(D)->volatil
	movq	-48(%rbp), %rax	# dstref, tmp101
	movzbl	3(%rax), %eax	# *dstref_11(D), tmp104
	shrb	$4, %al	#, D.30506
	andl	$1, %eax	#, D.30506
	movq	-40(%rbp), %rdx	# x, tmp105
	andl	$1, %eax	#, tmp107
	sall	$4, %eax	#, tmp108
	movl	%eax, %ecx	# tmp108, tmp108
	movzbl	3(%rdx), %eax	# x_4(D)->in_struct, tmp109
	andl	$-17, %eax	#, tmp110
	orl	%ecx, %eax	# tmp108, tmp111
	movb	%al, 3(%rdx)	# tmp111, x_4(D)->in_struct
	movq	-48(%rbp), %rax	# dstref, tmp112
	movzbl	3(%rax), %eax	# *dstref_11(D), tmp115
	shrb	$7, %al	#, D.30506
	movl	%eax, %edx	# D.30506, D.30506
	movq	-40(%rbp), %rax	# x, tmp116
	movl	%edx, %ecx	# D.30506, tmp118
	sall	$7, %ecx	#, tmp118
	movzbl	3(%rax), %edx	# x_4(D)->frame_related, tmp119
	andl	$127, %edx	#, tmp120
	orl	%ecx, %edx	# tmp118, tmp121
	movb	%dl, 3(%rax)	# tmp121, x_4(D)->frame_related
	movq	-48(%rbp), %rax	# dstref, tmp122
	movzbl	3(%rax), %eax	# *dstref_11(D), tmp125
	shrb	$2, %al	#, D.30506
	andl	$1, %eax	#, D.30506
	movq	-40(%rbp), %rdx	# x, tmp126
	andl	$1, %eax	#, tmp128
	leal	0(,%rax,4), %ecx	#, tmp129
	movzbl	3(%rdx), %eax	# x_4(D)->unchanging, tmp130
	andl	$-5, %eax	#, tmp131
	orl	%ecx, %eax	# tmp129, tmp132
	movb	%al, 3(%rdx)	# tmp132, x_4(D)->unchanging
	movq	-48(%rbp), %rax	# dstref, tmp133
	movzbl	3(%rax), %eax	# *dstref_11(D), tmp136
	andl	$1, %eax	#, D.30506
	movl	%eax, %edx	# D.30506, D.30506
	movq	-40(%rbp), %rax	# x, tmp137
	movl	%edx, %ecx	# D.30506, tmp139
	andl	$1, %ecx	#, tmp139
	movzbl	3(%rax), %edx	# x_4(D)->jump, tmp140
	andl	$-2, %edx	#, tmp141
	orl	%ecx, %edx	# tmp139, tmp142
	movb	%dl, 3(%rax)	# tmp142, x_4(D)->jump
	movq	-48(%rbp), %rax	# dstref, tmp143
	movq	16(%rax), %rdx	# dstref_11(D)->fld[1].rtmem, D.30507
	movq	-40(%rbp), %rax	# x, tmp144
	movq	%rdx, 16(%rax)	# D.30507, x_4(D)->fld[1].rtmem
	jmp	.L2663	#
.L2662:
	.loc 1 10675 0
	cmpl	$66, -12(%rbp)	#, code
	jne	.L2663	#,
	.loc 1 10675 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp145
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.30505
	cmpq	-72(%rbp), %rax	# srcreg, D.30505
	jne	.L2663	#,
	.loc 1 10676 0 is_stmt 1
	movq	-56(%rbp), %rax	# srcref, tmp146
	movzbl	3(%rax), %eax	# *srcref_20(D), tmp149
	shrb	$3, %al	#, D.30506
	andl	$1, %eax	#, D.30506
	movq	-40(%rbp), %rdx	# x, tmp150
	andl	$1, %eax	#, tmp152
	leal	0(,%rax,8), %ecx	#, tmp153
	movzbl	3(%rdx), %eax	# x_4(D)->volatil, tmp154
	andl	$-9, %eax	#, tmp155
	orl	%ecx, %eax	# tmp153, tmp156
	movb	%al, 3(%rdx)	# tmp156, x_4(D)->volatil
	movq	-56(%rbp), %rax	# srcref, tmp157
	movzbl	3(%rax), %eax	# *srcref_20(D), tmp160
	shrb	$4, %al	#, D.30506
	andl	$1, %eax	#, D.30506
	movq	-40(%rbp), %rdx	# x, tmp161
	andl	$1, %eax	#, tmp163
	sall	$4, %eax	#, tmp164
	movl	%eax, %ecx	# tmp164, tmp164
	movzbl	3(%rdx), %eax	# x_4(D)->in_struct, tmp165
	andl	$-17, %eax	#, tmp166
	orl	%ecx, %eax	# tmp164, tmp167
	movb	%al, 3(%rdx)	# tmp167, x_4(D)->in_struct
	movq	-56(%rbp), %rax	# srcref, tmp168
	movzbl	3(%rax), %eax	# *srcref_20(D), tmp171
	shrb	$7, %al	#, D.30506
	movl	%eax, %edx	# D.30506, D.30506
	movq	-40(%rbp), %rax	# x, tmp172
	movl	%edx, %ecx	# D.30506, tmp174
	sall	$7, %ecx	#, tmp174
	movzbl	3(%rax), %edx	# x_4(D)->frame_related, tmp175
	andl	$127, %edx	#, tmp176
	orl	%ecx, %edx	# tmp174, tmp177
	movb	%dl, 3(%rax)	# tmp177, x_4(D)->frame_related
	movq	-56(%rbp), %rax	# srcref, tmp178
	movzbl	3(%rax), %eax	# *srcref_20(D), tmp181
	shrb	$2, %al	#, D.30506
	andl	$1, %eax	#, D.30506
	movq	-40(%rbp), %rdx	# x, tmp182
	andl	$1, %eax	#, tmp184
	leal	0(,%rax,4), %ecx	#, tmp185
	movzbl	3(%rdx), %eax	# x_4(D)->unchanging, tmp186
	andl	$-5, %eax	#, tmp187
	orl	%ecx, %eax	# tmp185, tmp188
	movb	%al, 3(%rdx)	# tmp188, x_4(D)->unchanging
	movq	-56(%rbp), %rax	# srcref, tmp189
	movzbl	3(%rax), %eax	# *srcref_20(D), tmp192
	andl	$1, %eax	#, D.30506
	movl	%eax, %edx	# D.30506, D.30506
	movq	-40(%rbp), %rax	# x, tmp193
	movl	%edx, %ecx	# D.30506, tmp195
	andl	$1, %ecx	#, tmp195
	movzbl	3(%rax), %edx	# x_4(D)->jump, tmp196
	andl	$-2, %edx	#, tmp197
	orl	%ecx, %edx	# tmp195, tmp198
	movb	%dl, 3(%rax)	# tmp198, x_4(D)->jump
	movq	-56(%rbp), %rax	# srcref, tmp199
	movq	16(%rax), %rdx	# srcref_20(D)->fld[1].rtmem, D.30507
	movq	-40(%rbp), %rax	# x, tmp200
	movq	%rdx, 16(%rax)	# D.30507, x_4(D)->fld[1].rtmem
.L2663:
	.loc 1 10678 0
	movl	$0, -20(%rbp)	#, i
	jmp	.L2664	#
.L2669:
	.loc 1 10680 0
	movq	-8(%rbp), %rax	# format_ptr, tmp201
	movzbl	(%rax), %eax	# *format_ptr_1, D.30510
	cmpb	$101, %al	#, D.30510
	jne	.L2665	#,
	.loc 1 10681 0
	movq	-40(%rbp), %rax	# x, tmp202
	movl	-20(%rbp), %edx	# i, tmp204
	movslq	%edx, %rdx	# tmp204, tmp203
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_2].rtx, D.30505
	movq	-72(%rbp), %rdi	# srcreg, tmp205
	movq	-64(%rbp), %rcx	# dstreg, tmp206
	movq	-56(%rbp), %rdx	# srcref, tmp207
	movq	-48(%rbp), %rsi	# dstref, tmp208
	movq	%rdi, %r8	# tmp205,
	movq	%rax, %rdi	# D.30505,
	call	ix86_set_move_mem_attrs_1	#
	jmp	.L2666	#
.L2665:
	.loc 1 10683 0
	movq	-8(%rbp), %rax	# format_ptr, tmp209
	movzbl	(%rax), %eax	# *format_ptr_1, D.30510
	cmpb	$69, %al	#, D.30510
	jne	.L2666	#,
	.loc 1 10684 0
	movq	-40(%rbp), %rax	# x, tmp210
	movl	-20(%rbp), %edx	# i, tmp212
	movslq	%edx, %rdx	# tmp212, tmp211
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_2].rtvec, D.30511
	movl	(%rax), %eax	# _34->num_elem, D.30509
	subl	$1, %eax	#, tmp213
	movl	%eax, -16(%rbp)	# tmp213, j
	jmp	.L2667	#
.L2668:
	.loc 1 10685 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp214
	movl	-20(%rbp), %edx	# i, tmp216
	movslq	%edx, %rdx	# tmp216, tmp215
	movq	8(%rax,%rdx,8), %rax	# x_4(D)->fld[i_2].rtvec, D.30511
	movl	-16(%rbp), %edx	# j, tmp218
	movslq	%edx, %rdx	# tmp218, tmp217
	movq	8(%rax,%rdx,8), %rax	# _37->elem, D.30505
	movq	-72(%rbp), %rdi	# srcreg, tmp219
	movq	-64(%rbp), %rcx	# dstreg, tmp220
	movq	-56(%rbp), %rdx	# srcref, tmp221
	movq	-48(%rbp), %rsi	# dstref, tmp222
	movq	%rdi, %r8	# tmp219,
	movq	%rax, %rdi	# D.30505,
	call	ix86_set_move_mem_attrs_1	#
	.loc 1 10684 0 discriminator 2
	subl	$1, -16(%rbp)	#, j
.L2667:
	.loc 1 10684 0 is_stmt 0 discriminator 1
	cmpl	$0, -16(%rbp)	#, j
	jns	.L2668	#,
.L2666:
	.loc 1 10678 0 is_stmt 1
	addl	$1, -20(%rbp)	#, i
	addq	$1, -8(%rbp)	#, format_ptr
.L2664:
	.loc 1 10678 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# code, code.1280
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.30508
	movzbl	%al, %eax	# D.30508, D.30509
	cmpl	-20(%rbp), %eax	# i, D.30509
	jg	.L2669	#,
	.loc 1 10688 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE171:
	.size	ix86_set_move_mem_attrs_1, .-ix86_set_move_mem_attrs_1
	.globl	ix86_constant_alignment
	.type	ix86_constant_alignment, @function
ix86_constant_alignment:
.LFB172:
	.loc 1 10700 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# exp, exp
	movl	%esi, -12(%rbp)	# align, align
	.loc 1 10701 0
	movq	-8(%rbp), %rax	# exp, tmp82
	movzbl	16(%rax), %eax	# exp_2(D)->common.code, D.30513
	cmpb	$26, %al	#, D.30513
	jne	.L2671	#,
	.loc 1 10703 0
	movq	-8(%rbp), %rax	# exp, tmp83
	movq	8(%rax), %rax	# exp_2(D)->common.type, D.30514
	movzbl	61(%rax), %eax	# *_4, D.30513
	andl	$-2, %eax	#, D.30513
	cmpb	$32, %al	#, D.30513
	jne	.L2672	#,
	.loc 1 10703 0 is_stmt 0 discriminator 1
	cmpl	$63, -12(%rbp)	#, align
	jg	.L2672	#,
	.loc 1 10704 0 is_stmt 1
	movl	$64, %eax	#, D.30512
	jmp	.L2673	#
.L2672:
	.loc 1 10705 0
	movq	-8(%rbp), %rax	# exp, tmp84
	movq	8(%rax), %rax	# exp_2(D)->common.type, D.30514
	movzbl	61(%rax), %eax	# *_9, D.30513
	andl	$-2, %eax	#, D.30513
	cmpb	$34, %al	#, D.30513
	je	.L2674	#,
	.loc 1 10705 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# exp, tmp85
	movq	8(%rax), %rax	# exp_2(D)->common.type, D.30514
	movzbl	61(%rax), %eax	# *_12, D.30513
	andl	$-2, %eax	#, D.30513
	cmpb	$36, %al	#, D.30513
	je	.L2674	#,
	.loc 1 10705 0 discriminator 1
	movq	-8(%rbp), %rax	# exp, tmp86
	movq	8(%rax), %rax	# exp_2(D)->common.type, D.30514
	movzbl	61(%rax), %eax	# *_15, D.30513
	andl	$-2, %eax	#, D.30513
	cmpb	$12, %al	#, D.30513
	je	.L2674	#,
	movq	-8(%rbp), %rax	# exp, tmp87
	movq	8(%rax), %rax	# exp_2(D)->common.type, D.30514
	movzbl	61(%rax), %eax	# *_18, D.30513
	andl	$-2, %eax	#, D.30513
	cmpb	$92, %al	#, D.30513
	je	.L2674	#,
	movq	-8(%rbp), %rax	# exp, tmp88
	movq	8(%rax), %rax	# exp_2(D)->common.type, D.30514
	movzbl	61(%rax), %eax	# *_21, D.30513
	andl	$-2, %eax	#, D.30513
	cmpb	$74, %al	#, D.30513
	jne	.L2675	#,
.L2674:
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2675	#,
	.loc 1 10706 0 is_stmt 1
	movl	$128, %eax	#, D.30512
	jmp	.L2673	#
.L2671:
	.loc 1 10708 0
	movq	-8(%rbp), %rax	# exp, tmp89
	movzbl	16(%rax), %eax	# exp_2(D)->common.code, D.30513
	cmpb	$29, %al	#, D.30513
	jne	.L2675	#,
	.loc 1 10708 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# exp, tmp90
	movl	32(%rax), %eax	# exp_2(D)->string.length, D.30512
	cmpl	$30, %eax	#, D.30512
	jle	.L2675	#,
	.loc 1 10709 0 is_stmt 1
	cmpl	$255, -12(%rbp)	#, align
	jg	.L2675	#,
	.loc 1 10710 0
	movl	$256, %eax	#, D.30512
	jmp	.L2673	#
.L2675:
	.loc 1 10712 0
	movl	-12(%rbp), %eax	# align, D.30512
.L2673:
	.loc 1 10713 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE172:
	.size	ix86_constant_alignment, .-ix86_constant_alignment
	.globl	ix86_data_alignment
	.type	ix86_data_alignment, @function
ix86_data_alignment:
.LFB173:
	.loc 1 10724 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# type, type
	movl	%esi, -12(%rbp)	# align, align
	.loc 1 10725 0
	movq	-8(%rbp), %rax	# type, tmp142
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$18, %al	#, D.30516
	je	.L2677	#,
	.loc 1 10725 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp143
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$20, %al	#, D.30516
	je	.L2677	#,
	movq	-8(%rbp), %rax	# type, tmp144
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$21, %al	#, D.30516
	je	.L2677	#,
	movq	-8(%rbp), %rax	# type, tmp145
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$22, %al	#, D.30516
	je	.L2677	#,
	movq	-8(%rbp), %rax	# type, tmp146
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$19, %al	#, D.30516
	jne	.L2678	#,
.L2677:
	.loc 1 10726 0 is_stmt 1
	movq	-8(%rbp), %rax	# type, tmp147
	movq	32(%rax), %rax	# type_2(D)->type.size, D.30517
	testq	%rax, %rax	# D.30517
	je	.L2678	#,
	.loc 1 10727 0
	movq	-8(%rbp), %rax	# type, tmp148
	movq	32(%rax), %rax	# type_2(D)->type.size, D.30517
	movzbl	16(%rax), %eax	# _9->common.code, D.30516
	cmpb	$25, %al	#, D.30516
	jne	.L2678	#,
	.loc 1 10728 0
	movq	-8(%rbp), %rax	# type, tmp149
	movq	32(%rax), %rax	# type_2(D)->type.size, D.30517
	movq	32(%rax), %rax	# _11->int_cst.int_cst.low, D.30518
	cmpq	$255, %rax	#, D.30518
	ja	.L2679	#,
	.loc 1 10729 0
	movq	-8(%rbp), %rax	# type, tmp150
	movq	32(%rax), %rax	# type_2(D)->type.size, D.30517
	movq	40(%rax), %rax	# _13->int_cst.int_cst.high, D.30519
	testq	%rax, %rax	# D.30519
	je	.L2678	#,
.L2679:
	.loc 1 10729 0 is_stmt 0 discriminator 1
	cmpl	$255, -12(%rbp)	#, align
	jg	.L2678	#,
	.loc 1 10730 0 is_stmt 1
	movl	$256, %eax	#, D.30515
	jmp	.L2680	#
.L2678:
	.loc 1 10734 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1281
	andl	$33554432, %eax	#, D.30515
	testl	%eax, %eax	# D.30515
	je	.L2681	#,
	.loc 1 10736 0
	movq	-8(%rbp), %rax	# type, tmp151
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$18, %al	#, D.30516
	je	.L2682	#,
	.loc 1 10736 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp152
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$20, %al	#, D.30516
	je	.L2682	#,
	movq	-8(%rbp), %rax	# type, tmp153
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$21, %al	#, D.30516
	je	.L2682	#,
	movq	-8(%rbp), %rax	# type, tmp154
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$22, %al	#, D.30516
	je	.L2682	#,
	movq	-8(%rbp), %rax	# type, tmp155
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$19, %al	#, D.30516
	jne	.L2681	#,
.L2682:
	.loc 1 10737 0 is_stmt 1
	movq	-8(%rbp), %rax	# type, tmp156
	movq	32(%rax), %rax	# type_2(D)->type.size, D.30517
	testq	%rax, %rax	# D.30517
	je	.L2681	#,
	.loc 1 10738 0
	movq	-8(%rbp), %rax	# type, tmp157
	movq	32(%rax), %rax	# type_2(D)->type.size, D.30517
	movzbl	16(%rax), %eax	# _25->common.code, D.30516
	cmpb	$25, %al	#, D.30516
	jne	.L2681	#,
	.loc 1 10739 0
	movq	-8(%rbp), %rax	# type, tmp158
	movq	32(%rax), %rax	# type_2(D)->type.size, D.30517
	movq	32(%rax), %rax	# _27->int_cst.int_cst.low, D.30518
	cmpq	$127, %rax	#, D.30518
	ja	.L2683	#,
	.loc 1 10740 0
	movq	-8(%rbp), %rax	# type, tmp159
	movq	32(%rax), %rax	# type_2(D)->type.size, D.30517
	movq	40(%rax), %rax	# _29->int_cst.int_cst.high, D.30519
	testq	%rax, %rax	# D.30519
	je	.L2681	#,
.L2683:
	.loc 1 10740 0 is_stmt 0 discriminator 1
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2681	#,
	.loc 1 10741 0 is_stmt 1
	movl	$128, %eax	#, D.30515
	jmp	.L2680	#
.L2681:
	.loc 1 10744 0
	movq	-8(%rbp), %rax	# type, tmp160
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$18, %al	#, D.30516
	jne	.L2684	#,
	.loc 1 10746 0
	movq	-8(%rbp), %rax	# type, tmp161
	movq	8(%rax), %rax	# type_2(D)->common.type, D.30517
	movzbl	61(%rax), %eax	# *_33, D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$32, %al	#, D.30516
	jne	.L2685	#,
	.loc 1 10746 0 is_stmt 0 discriminator 1
	cmpl	$63, -12(%rbp)	#, align
	jg	.L2685	#,
	.loc 1 10747 0 is_stmt 1
	movl	$64, %eax	#, D.30515
	jmp	.L2680	#
.L2685:
	.loc 1 10748 0
	movq	-8(%rbp), %rax	# type, tmp162
	movq	8(%rax), %rax	# type_2(D)->common.type, D.30517
	movzbl	61(%rax), %eax	# *_37, D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$34, %al	#, D.30516
	je	.L2686	#,
	.loc 1 10748 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# type, tmp163
	movq	8(%rax), %rax	# type_2(D)->common.type, D.30517
	movzbl	61(%rax), %eax	# *_40, D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$36, %al	#, D.30516
	je	.L2686	#,
	.loc 1 10748 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp164
	movq	8(%rax), %rax	# type_2(D)->common.type, D.30517
	movzbl	61(%rax), %eax	# *_43, D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$12, %al	#, D.30516
	je	.L2686	#,
	movq	-8(%rbp), %rax	# type, tmp165
	movq	8(%rax), %rax	# type_2(D)->common.type, D.30517
	movzbl	61(%rax), %eax	# *_46, D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$92, %al	#, D.30516
	je	.L2686	#,
	movq	-8(%rbp), %rax	# type, tmp166
	movq	8(%rax), %rax	# type_2(D)->common.type, D.30517
	movzbl	61(%rax), %eax	# *_49, D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$74, %al	#, D.30516
	jne	.L2687	#,
.L2686:
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2687	#,
	.loc 1 10749 0 is_stmt 1
	movl	$128, %eax	#, D.30515
	jmp	.L2680	#
.L2684:
	.loc 1 10751 0
	movq	-8(%rbp), %rax	# type, tmp167
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$8, %al	#, D.30516
	jne	.L2688	#,
	.loc 1 10754 0
	movq	-8(%rbp), %rax	# type, tmp168
	movzbl	61(%rax), %eax	# *type_2(D), D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$44, %al	#, D.30516
	jne	.L2689	#,
	.loc 1 10754 0 is_stmt 0 discriminator 1
	cmpl	$63, -12(%rbp)	#, align
	jg	.L2689	#,
	.loc 1 10755 0 is_stmt 1
	movl	$64, %eax	#, D.30515
	jmp	.L2680	#
.L2689:
	.loc 1 10756 0
	movq	-8(%rbp), %rax	# type, tmp169
	movzbl	61(%rax), %eax	# *type_2(D), D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$46, %al	#, D.30516
	jne	.L2687	#,
	.loc 1 10756 0 is_stmt 0 discriminator 1
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2687	#,
	.loc 1 10757 0 is_stmt 1
	movl	$128, %eax	#, D.30515
	jmp	.L2680	#
.L2688:
	.loc 1 10759 0
	movq	-8(%rbp), %rax	# type, tmp170
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$20, %al	#, D.30516
	je	.L2690	#,
	.loc 1 10760 0
	movq	-8(%rbp), %rax	# type, tmp171
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$21, %al	#, D.30516
	je	.L2690	#,
	.loc 1 10761 0
	movq	-8(%rbp), %rax	# type, tmp172
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$22, %al	#, D.30516
	jne	.L2691	#,
.L2690:
	.loc 1 10762 0
	movq	-8(%rbp), %rax	# type, tmp173
	movq	24(%rax), %rax	# type_2(D)->type.values, D.30517
	testq	%rax, %rax	# D.30517
	je	.L2691	#,
	.loc 1 10764 0
	movq	-8(%rbp), %rax	# type, tmp174
	movq	24(%rax), %rax	# type_2(D)->type.values, D.30517
	movzbl	48(%rax), %eax	# _64->decl.mode, D.30516
	cmpb	$16, %al	#, D.30516
	jne	.L2692	#,
	.loc 1 10764 0 is_stmt 0 discriminator 1
	cmpl	$63, -12(%rbp)	#, align
	jg	.L2692	#,
	.loc 1 10765 0 is_stmt 1
	movl	$64, %eax	#, D.30515
	jmp	.L2680	#
.L2692:
	.loc 1 10766 0
	movq	-8(%rbp), %rax	# type, tmp175
	movq	24(%rax), %rax	# type_2(D)->type.values, D.30517
	movzbl	48(%rax), %eax	# _67->decl.mode, D.30516
	cmpb	$17, %al	#, D.30516
	je	.L2693	#,
	.loc 1 10766 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# type, tmp176
	movq	24(%rax), %rax	# type_2(D)->type.values, D.30517
	movzbl	48(%rax), %eax	# _69->decl.mode, D.30516
	cmpb	$18, %al	#, D.30516
	je	.L2693	#,
	.loc 1 10766 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp177
	movq	24(%rax), %rax	# type_2(D)->type.values, D.30517
	movzbl	48(%rax), %eax	# _71->decl.mode, D.30516
	cmpb	$6, %al	#, D.30516
	je	.L2693	#,
	movq	-8(%rbp), %rax	# type, tmp178
	movq	24(%rax), %rax	# type_2(D)->type.values, D.30517
	movzbl	48(%rax), %eax	# _73->decl.mode, D.30516
	cmpb	$46, %al	#, D.30516
	je	.L2693	#,
	movq	-8(%rbp), %rax	# type, tmp179
	movq	24(%rax), %rax	# type_2(D)->type.values, D.30517
	movzbl	48(%rax), %eax	# _75->decl.mode, D.30516
	cmpb	$37, %al	#, D.30516
	jne	.L2694	#,
.L2693:
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2694	#,
	.loc 1 10767 0 is_stmt 1
	movl	$128, %eax	#, D.30515
	jmp	.L2680	#
.L2694:
	.loc 1 10766 0 discriminator 1
	jmp	.L2687	#
.L2691:
	.loc 1 10769 0
	movq	-8(%rbp), %rax	# type, tmp180
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$7, %al	#, D.30516
	je	.L2695	#,
	.loc 1 10769 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp181
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$9, %al	#, D.30516
	je	.L2695	#,
	.loc 1 10770 0 is_stmt 1
	movq	-8(%rbp), %rax	# type, tmp182
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.30516
	cmpb	$6, %al	#, D.30516
	jne	.L2687	#,
.L2695:
	.loc 1 10772 0
	movq	-8(%rbp), %rax	# type, tmp183
	movzbl	61(%rax), %eax	# *type_2(D), D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$32, %al	#, D.30516
	jne	.L2696	#,
	.loc 1 10772 0 is_stmt 0 discriminator 1
	cmpl	$63, -12(%rbp)	#, align
	jg	.L2696	#,
	.loc 1 10773 0 is_stmt 1
	movl	$64, %eax	#, D.30515
	jmp	.L2680	#
.L2696:
	.loc 1 10774 0
	movq	-8(%rbp), %rax	# type, tmp184
	movzbl	61(%rax), %eax	# *type_2(D), D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$34, %al	#, D.30516
	je	.L2697	#,
	.loc 1 10774 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# type, tmp185
	movzbl	61(%rax), %eax	# *type_2(D), D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$36, %al	#, D.30516
	je	.L2697	#,
	.loc 1 10774 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp186
	movzbl	61(%rax), %eax	# *type_2(D), D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$12, %al	#, D.30516
	je	.L2697	#,
	movq	-8(%rbp), %rax	# type, tmp187
	movzbl	61(%rax), %eax	# *type_2(D), D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$92, %al	#, D.30516
	je	.L2697	#,
	movq	-8(%rbp), %rax	# type, tmp188
	movzbl	61(%rax), %eax	# *type_2(D), D.30516
	andl	$-2, %eax	#, D.30516
	cmpb	$74, %al	#, D.30516
	jne	.L2687	#,
.L2697:
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2687	#,
	.loc 1 10775 0 is_stmt 1
	movl	$128, %eax	#, D.30515
	jmp	.L2680	#
.L2687:
	.loc 1 10778 0
	movl	-12(%rbp), %eax	# align, D.30515
.L2680:
	.loc 1 10779 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE173:
	.size	ix86_data_alignment, .-ix86_data_alignment
	.globl	ix86_local_alignment
	.type	ix86_local_alignment, @function
ix86_local_alignment:
.LFB174:
	.loc 1 10790 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# type, type
	movl	%esi, -12(%rbp)	# align, align
	.loc 1 10793 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1282
	andl	$33554432, %eax	#, D.30520
	testl	%eax, %eax	# D.30520
	je	.L2699	#,
	.loc 1 10795 0
	movq	-8(%rbp), %rax	# type, tmp130
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$18, %al	#, D.30521
	je	.L2700	#,
	.loc 1 10795 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp131
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$20, %al	#, D.30521
	je	.L2700	#,
	movq	-8(%rbp), %rax	# type, tmp132
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$21, %al	#, D.30521
	je	.L2700	#,
	movq	-8(%rbp), %rax	# type, tmp133
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$22, %al	#, D.30521
	je	.L2700	#,
	movq	-8(%rbp), %rax	# type, tmp134
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$19, %al	#, D.30521
	jne	.L2699	#,
.L2700:
	.loc 1 10796 0 is_stmt 1
	movq	-8(%rbp), %rax	# type, tmp135
	movq	32(%rax), %rax	# type_4(D)->type.size, D.30522
	testq	%rax, %rax	# D.30522
	je	.L2699	#,
	.loc 1 10797 0
	movq	-8(%rbp), %rax	# type, tmp136
	movq	32(%rax), %rax	# type_4(D)->type.size, D.30522
	movzbl	16(%rax), %eax	# _11->common.code, D.30521
	cmpb	$25, %al	#, D.30521
	jne	.L2699	#,
	.loc 1 10798 0
	movq	-8(%rbp), %rax	# type, tmp137
	movq	32(%rax), %rax	# type_4(D)->type.size, D.30522
	movq	32(%rax), %rax	# _13->int_cst.int_cst.low, D.30523
	cmpq	$15, %rax	#, D.30523
	ja	.L2701	#,
	.loc 1 10799 0
	movq	-8(%rbp), %rax	# type, tmp138
	movq	32(%rax), %rax	# type_4(D)->type.size, D.30522
	movq	40(%rax), %rax	# _15->int_cst.int_cst.high, D.30524
	testq	%rax, %rax	# D.30524
	je	.L2699	#,
.L2701:
	.loc 1 10799 0 is_stmt 0 discriminator 1
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2699	#,
	.loc 1 10800 0 is_stmt 1
	movl	$128, %eax	#, D.30520
	jmp	.L2702	#
.L2699:
	.loc 1 10802 0
	movq	-8(%rbp), %rax	# type, tmp139
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$18, %al	#, D.30521
	jne	.L2703	#,
	.loc 1 10804 0
	movq	-8(%rbp), %rax	# type, tmp140
	movq	8(%rax), %rax	# type_4(D)->common.type, D.30522
	movzbl	61(%rax), %eax	# *_20, D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$32, %al	#, D.30521
	jne	.L2704	#,
	.loc 1 10804 0 is_stmt 0 discriminator 1
	cmpl	$63, -12(%rbp)	#, align
	jg	.L2704	#,
	.loc 1 10805 0 is_stmt 1
	movl	$64, %eax	#, D.30520
	jmp	.L2702	#
.L2704:
	.loc 1 10806 0
	movq	-8(%rbp), %rax	# type, tmp141
	movq	8(%rax), %rax	# type_4(D)->common.type, D.30522
	movzbl	61(%rax), %eax	# *_24, D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$34, %al	#, D.30521
	je	.L2705	#,
	.loc 1 10806 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# type, tmp142
	movq	8(%rax), %rax	# type_4(D)->common.type, D.30522
	movzbl	61(%rax), %eax	# *_27, D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$36, %al	#, D.30521
	je	.L2705	#,
	.loc 1 10806 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp143
	movq	8(%rax), %rax	# type_4(D)->common.type, D.30522
	movzbl	61(%rax), %eax	# *_30, D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$12, %al	#, D.30521
	je	.L2705	#,
	movq	-8(%rbp), %rax	# type, tmp144
	movq	8(%rax), %rax	# type_4(D)->common.type, D.30522
	movzbl	61(%rax), %eax	# *_33, D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$92, %al	#, D.30521
	je	.L2705	#,
	movq	-8(%rbp), %rax	# type, tmp145
	movq	8(%rax), %rax	# type_4(D)->common.type, D.30522
	movzbl	61(%rax), %eax	# *_36, D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$74, %al	#, D.30521
	jne	.L2706	#,
.L2705:
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2706	#,
	.loc 1 10807 0 is_stmt 1
	movl	$128, %eax	#, D.30520
	jmp	.L2702	#
.L2703:
	.loc 1 10809 0
	movq	-8(%rbp), %rax	# type, tmp146
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$8, %al	#, D.30521
	jne	.L2707	#,
	.loc 1 10811 0
	movq	-8(%rbp), %rax	# type, tmp147
	movzbl	61(%rax), %eax	# *type_4(D), D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$44, %al	#, D.30521
	jne	.L2708	#,
	.loc 1 10811 0 is_stmt 0 discriminator 1
	cmpl	$63, -12(%rbp)	#, align
	jg	.L2708	#,
	.loc 1 10812 0 is_stmt 1
	movl	$64, %eax	#, D.30520
	jmp	.L2702	#
.L2708:
	.loc 1 10813 0
	movq	-8(%rbp), %rax	# type, tmp148
	movzbl	61(%rax), %eax	# *type_4(D), D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$46, %al	#, D.30521
	jne	.L2706	#,
	.loc 1 10813 0 is_stmt 0 discriminator 1
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2706	#,
	.loc 1 10814 0 is_stmt 1
	movl	$128, %eax	#, D.30520
	jmp	.L2702	#
.L2707:
	.loc 1 10816 0
	movq	-8(%rbp), %rax	# type, tmp149
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$20, %al	#, D.30521
	je	.L2709	#,
	.loc 1 10817 0
	movq	-8(%rbp), %rax	# type, tmp150
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$21, %al	#, D.30521
	je	.L2709	#,
	.loc 1 10818 0
	movq	-8(%rbp), %rax	# type, tmp151
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$22, %al	#, D.30521
	jne	.L2710	#,
.L2709:
	.loc 1 10819 0
	movq	-8(%rbp), %rax	# type, tmp152
	movq	24(%rax), %rax	# type_4(D)->type.values, D.30522
	testq	%rax, %rax	# D.30522
	je	.L2710	#,
	.loc 1 10821 0
	movq	-8(%rbp), %rax	# type, tmp153
	movq	24(%rax), %rax	# type_4(D)->type.values, D.30522
	movzbl	48(%rax), %eax	# _51->decl.mode, D.30521
	cmpb	$16, %al	#, D.30521
	jne	.L2711	#,
	.loc 1 10821 0 is_stmt 0 discriminator 1
	cmpl	$63, -12(%rbp)	#, align
	jg	.L2711	#,
	.loc 1 10822 0 is_stmt 1
	movl	$64, %eax	#, D.30520
	jmp	.L2702	#
.L2711:
	.loc 1 10823 0
	movq	-8(%rbp), %rax	# type, tmp154
	movq	24(%rax), %rax	# type_4(D)->type.values, D.30522
	movzbl	48(%rax), %eax	# _54->decl.mode, D.30521
	cmpb	$17, %al	#, D.30521
	je	.L2712	#,
	.loc 1 10823 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# type, tmp155
	movq	24(%rax), %rax	# type_4(D)->type.values, D.30522
	movzbl	48(%rax), %eax	# _56->decl.mode, D.30521
	cmpb	$18, %al	#, D.30521
	je	.L2712	#,
	.loc 1 10823 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp156
	movq	24(%rax), %rax	# type_4(D)->type.values, D.30522
	movzbl	48(%rax), %eax	# _58->decl.mode, D.30521
	cmpb	$6, %al	#, D.30521
	je	.L2712	#,
	movq	-8(%rbp), %rax	# type, tmp157
	movq	24(%rax), %rax	# type_4(D)->type.values, D.30522
	movzbl	48(%rax), %eax	# _60->decl.mode, D.30521
	cmpb	$46, %al	#, D.30521
	je	.L2712	#,
	movq	-8(%rbp), %rax	# type, tmp158
	movq	24(%rax), %rax	# type_4(D)->type.values, D.30522
	movzbl	48(%rax), %eax	# _62->decl.mode, D.30521
	cmpb	$37, %al	#, D.30521
	jne	.L2713	#,
.L2712:
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2713	#,
	.loc 1 10824 0 is_stmt 1
	movl	$128, %eax	#, D.30520
	jmp	.L2702	#
.L2713:
	.loc 1 10823 0 discriminator 1
	jmp	.L2706	#
.L2710:
	.loc 1 10826 0
	movq	-8(%rbp), %rax	# type, tmp159
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$7, %al	#, D.30521
	je	.L2714	#,
	.loc 1 10826 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp160
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$9, %al	#, D.30521
	je	.L2714	#,
	.loc 1 10827 0 is_stmt 1
	movq	-8(%rbp), %rax	# type, tmp161
	movzbl	16(%rax), %eax	# type_4(D)->common.code, D.30521
	cmpb	$6, %al	#, D.30521
	jne	.L2706	#,
.L2714:
	.loc 1 10830 0
	movq	-8(%rbp), %rax	# type, tmp162
	movzbl	61(%rax), %eax	# *type_4(D), D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$32, %al	#, D.30521
	jne	.L2715	#,
	.loc 1 10830 0 is_stmt 0 discriminator 1
	cmpl	$63, -12(%rbp)	#, align
	jg	.L2715	#,
	.loc 1 10831 0 is_stmt 1
	movl	$64, %eax	#, D.30520
	jmp	.L2702	#
.L2715:
	.loc 1 10832 0
	movq	-8(%rbp), %rax	# type, tmp163
	movzbl	61(%rax), %eax	# *type_4(D), D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$34, %al	#, D.30521
	je	.L2716	#,
	.loc 1 10832 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# type, tmp164
	movzbl	61(%rax), %eax	# *type_4(D), D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$36, %al	#, D.30521
	je	.L2716	#,
	.loc 1 10832 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp165
	movzbl	61(%rax), %eax	# *type_4(D), D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$12, %al	#, D.30521
	je	.L2716	#,
	movq	-8(%rbp), %rax	# type, tmp166
	movzbl	61(%rax), %eax	# *type_4(D), D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$92, %al	#, D.30521
	je	.L2716	#,
	movq	-8(%rbp), %rax	# type, tmp167
	movzbl	61(%rax), %eax	# *type_4(D), D.30521
	andl	$-2, %eax	#, D.30521
	cmpb	$74, %al	#, D.30521
	jne	.L2706	#,
.L2716:
	cmpl	$127, -12(%rbp)	#, align
	jg	.L2706	#,
	.loc 1 10833 0 is_stmt 1
	movl	$128, %eax	#, D.30520
	jmp	.L2702	#
.L2706:
	.loc 1 10835 0
	movl	-12(%rbp), %eax	# align, D.30520
.L2702:
	.loc 1 10836 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE174:
	.size	ix86_local_alignment, .-ix86_local_alignment
	.globl	x86_initialize_trampoline
	.type	x86_initialize_trampoline, @function
x86_initialize_trampoline:
.LFB175:
	.loc 1 10844 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# tramp, tramp
	movq	%rsi, -48(%rbp)	# fnaddr, fnaddr
	movq	%rdx, -56(%rbp)	# cxt, cxt
	.loc 1 10845 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1283
	andl	$33554432, %eax	#, D.30525
	testl	%eax, %eax	# D.30525
	jne	.L2718	#,
.LBB122:
	.loc 1 10848 0
	movq	-40(%rbp), %rax	# tramp, tmp117
	movl	$10, %esi	#,
	movq	%rax, %rdi	# tmp117,
	call	plus_constant_wide	#
	movq	%rax, %rcx	#, D.30526
	movq	optab_table+16(%rip), %rax	# optab_table, D.30527
	movq	-48(%rbp), %rdx	# fnaddr, tmp118
	movl	$0, (%rsp)	#,
	movl	$1, %r9d	#,
	movl	$0, %r8d	#,
	movq	%rax, %rsi	# D.30527,
	movl	$4, %edi	#,
	call	expand_binop	#
	movq	%rax, -24(%rbp)	# tmp119, disp
	.loc 1 10851 0
	movl	$2, %esi	#,
	movl	$185, %edi	#,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30528,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.30526
	movq	-40(%rbp), %rax	# tramp, tmp120
	movq	%rax, %rsi	# tmp120,
	movl	$2, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rsi	# D.30526,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10853 0
	movq	-40(%rbp), %rax	# tramp, tmp121
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp121,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$4, %edi	#,
	call	gen_rtx_MEM	#
	movq	-56(%rbp), %rdx	# cxt, tmp122
	movq	%rdx, %rsi	# tmp122,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10854 0
	movl	$2, %esi	#,
	movl	$233, %edi	#,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30528,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.30526
	movq	-40(%rbp), %rax	# tramp, tmp123
	movl	$5, %esi	#,
	movq	%rax, %rdi	# tmp123,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$2, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rsi	# D.30526,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10856 0
	movq	-40(%rbp), %rax	# tramp, tmp124
	movl	$6, %esi	#,
	movq	%rax, %rdi	# tmp124,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$4, %edi	#,
	call	gen_rtx_MEM	#
	movq	-24(%rbp), %rdx	# disp, tmp125
	movq	%rdx, %rsi	# tmp125,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
.LBE122:
	jmp	.L2717	#
.L2718:
.LBB123:
	.loc 1 10860 0
	movl	$0, -28(%rbp)	#, offset
	.loc 1 10864 0
	movq	-48(%rbp), %rax	# fnaddr, tmp126
	movq	%rax, %rdi	# tmp126,
	call	x86_64_zero_extended_value	#
	testl	%eax, %eax	# D.30525
	je	.L2720	#,
	.loc 1 10866 0
	movq	-48(%rbp), %rax	# fnaddr, tmp127
	movq	%rax, %rsi	# tmp127,
	movl	$5, %edi	#,
	call	copy_to_mode_reg	#
	movq	%rax, -48(%rbp)	# tmp128, fnaddr
	.loc 1 10867 0
	movl	$3, %esi	#,
	movl	$47937, %edi	#,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30528,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.30526
	movl	-28(%rbp), %eax	# offset, tmp129
	movslq	%eax, %rdx	# tmp129, D.30528
	movq	-40(%rbp), %rax	# tramp, tmp130
	movq	%rdx, %rsi	# D.30528,
	movq	%rax, %rdi	# tmp130,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$3, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rsi	# D.30526,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10869 0
	movq	-48(%rbp), %rax	# fnaddr, tmp131
	movq	%rax, %rsi	# tmp131,
	movl	$4, %edi	#,
	call	gen_lowpart	#
	movq	%rax, %rbx	#, D.30526
	movl	-28(%rbp), %eax	# offset, tmp132
	addl	$2, %eax	#, D.30525
	movslq	%eax, %rdx	# D.30525, D.30528
	movq	-40(%rbp), %rax	# tramp, tmp133
	movq	%rdx, %rsi	# D.30528,
	movq	%rax, %rdi	# tmp133,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$4, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rsi	# D.30526,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10871 0
	addl	$6, -28(%rbp)	#, offset
	jmp	.L2721	#
.L2720:
	.loc 1 10875 0
	movl	$3, %esi	#,
	movl	$47945, %edi	#,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30528,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.30526
	movl	-28(%rbp), %eax	# offset, tmp134
	movslq	%eax, %rdx	# tmp134, D.30528
	movq	-40(%rbp), %rax	# tramp, tmp135
	movq	%rdx, %rsi	# D.30528,
	movq	%rax, %rdi	# tmp135,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$3, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rsi	# D.30526,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10877 0
	movl	-28(%rbp), %eax	# offset, tmp136
	addl	$2, %eax	#, D.30525
	movslq	%eax, %rdx	# D.30525, D.30528
	movq	-40(%rbp), %rax	# tramp, tmp137
	movq	%rdx, %rsi	# D.30528,
	movq	%rax, %rdi	# tmp137,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$5, %edi	#,
	call	gen_rtx_MEM	#
	movq	-48(%rbp), %rdx	# fnaddr, tmp138
	movq	%rdx, %rsi	# tmp138,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10879 0
	addl	$10, -28(%rbp)	#, offset
.L2721:
	.loc 1 10882 0
	movl	$3, %esi	#,
	movl	$47689, %edi	#,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30528,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.30526
	movl	-28(%rbp), %eax	# offset, tmp139
	movslq	%eax, %rdx	# tmp139, D.30528
	movq	-40(%rbp), %rax	# tramp, tmp140
	movq	%rdx, %rsi	# D.30528,
	movq	%rax, %rdi	# tmp140,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$3, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rsi	# D.30526,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10884 0
	movl	-28(%rbp), %eax	# offset, tmp141
	addl	$2, %eax	#, D.30525
	movslq	%eax, %rdx	# D.30525, D.30528
	movq	-40(%rbp), %rax	# tramp, tmp142
	movq	%rdx, %rsi	# D.30528,
	movq	%rax, %rdi	# tmp142,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$5, %edi	#,
	call	gen_rtx_MEM	#
	movq	-56(%rbp), %rdx	# cxt, tmp143
	movq	%rdx, %rsi	# tmp143,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10886 0
	addl	$10, -28(%rbp)	#, offset
	.loc 1 10888 0
	movl	$3, %esi	#,
	movl	$65353, %edi	#,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30528,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.30526
	movl	-28(%rbp), %eax	# offset, tmp144
	movslq	%eax, %rdx	# tmp144, D.30528
	movq	-40(%rbp), %rax	# tramp, tmp145
	movq	%rdx, %rsi	# D.30528,
	movq	%rax, %rdi	# tmp145,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$3, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rsi	# D.30526,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10890 0
	movl	$2, %esi	#,
	movl	$227, %edi	#,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.30528,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.30526
	movl	-28(%rbp), %eax	# offset, tmp146
	addl	$2, %eax	#, D.30525
	movslq	%eax, %rdx	# D.30525, D.30528
	movq	-40(%rbp), %rax	# tramp, tmp147
	movq	%rdx, %rsi	# D.30528,
	movq	%rax, %rdi	# tmp147,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30526,
	movl	$2, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rsi	# D.30526,
	movq	%rax, %rdi	# D.30526,
	call	emit_move_insn	#
	.loc 1 10892 0
	addl	$3, -28(%rbp)	#, offset
	.loc 1 10893 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1285
	andl	$33554432, %eax	#, D.30525
	testl	%eax, %eax	# D.30525
	je	.L2722	#,
	.loc 1 10893 0 is_stmt 0 discriminator 1
	movl	$23, %eax	#, iftmp.1284
	jmp	.L2723	#
.L2722:
	.loc 1 10893 0 discriminator 2
	movl	$10, %eax	#, iftmp.1284
.L2723:
	.loc 1 10893 0 discriminator 3
	cmpl	-28(%rbp), %eax	# offset, iftmp.1284
	jge	.L2717	#,
	.loc 1 10894 0 is_stmt 1
	movl	$__FUNCTION__.16528, %edx	#,
	movl	$10894, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2717:
.LBE123:
	.loc 1 10896 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE175:
	.size	x86_initialize_trampoline, .-x86_initialize_trampoline
	.section	.rodata
.LC270:
	.string	"__builtin_ia32_comieq"
.LC271:
	.string	"__builtin_ia32_comilt"
.LC272:
	.string	"__builtin_ia32_comile"
.LC273:
	.string	"__builtin_ia32_comigt"
.LC274:
	.string	"__builtin_ia32_comige"
.LC275:
	.string	"__builtin_ia32_comineq"
.LC276:
	.string	"__builtin_ia32_ucomieq"
.LC277:
	.string	"__builtin_ia32_ucomilt"
.LC278:
	.string	"__builtin_ia32_ucomile"
.LC279:
	.string	"__builtin_ia32_ucomigt"
.LC280:
	.string	"__builtin_ia32_ucomige"
.LC281:
	.string	"__builtin_ia32_ucomineq"
	.align 32
	.type	bdesc_comi, @object
	.size	bdesc_comi, 384
bdesc_comi:
# mask:
	.long	65536
# icode:
	.long	731
# name:
	.quad	.LC270
# code:
	.long	34
# comparison:
	.long	103
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	731
# name:
	.quad	.LC271
# code:
	.long	35
# comparison:
	.long	107
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	731
# name:
	.quad	.LC272
# code:
	.long	36
# comparison:
	.long	106
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	731
# name:
	.quad	.LC273
# code:
	.long	37
# comparison:
	.long	107
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	731
# name:
	.quad	.LC274
# code:
	.long	38
# comparison:
	.long	106
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	731
# name:
	.quad	.LC275
# code:
	.long	39
# comparison:
	.long	102
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	732
# name:
	.quad	.LC276
# code:
	.long	40
# comparison:
	.long	103
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	732
# name:
	.quad	.LC277
# code:
	.long	41
# comparison:
	.long	107
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	732
# name:
	.quad	.LC278
# code:
	.long	42
# comparison:
	.long	106
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	732
# name:
	.quad	.LC279
# code:
	.long	43
# comparison:
	.long	107
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	732
# name:
	.quad	.LC280
# code:
	.long	44
# comparison:
	.long	106
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	732
# name:
	.quad	.LC281
# code:
	.long	45
# comparison:
	.long	102
# flag:
	.long	0
	.zero	4
.LC282:
	.string	"__builtin_ia32_addps"
.LC283:
	.string	"__builtin_ia32_subps"
.LC284:
	.string	"__builtin_ia32_mulps"
.LC285:
	.string	"__builtin_ia32_divps"
.LC286:
	.string	"__builtin_ia32_addss"
.LC287:
	.string	"__builtin_ia32_subss"
.LC288:
	.string	"__builtin_ia32_mulss"
.LC289:
	.string	"__builtin_ia32_divss"
.LC290:
	.string	"__builtin_ia32_cmpeqps"
.LC291:
	.string	"__builtin_ia32_cmpltps"
.LC292:
	.string	"__builtin_ia32_cmpleps"
.LC293:
	.string	"__builtin_ia32_cmpgtps"
.LC294:
	.string	"__builtin_ia32_cmpgeps"
.LC295:
	.string	"__builtin_ia32_cmpunordps"
.LC296:
	.string	"__builtin_ia32_cmpneqps"
.LC297:
	.string	"__builtin_ia32_cmpnltps"
.LC298:
	.string	"__builtin_ia32_cmpnleps"
.LC299:
	.string	"__builtin_ia32_cmpngtps"
.LC300:
	.string	"__builtin_ia32_cmpngeps"
.LC301:
	.string	"__builtin_ia32_cmpordps"
.LC302:
	.string	"__builtin_ia32_cmpeqss"
.LC303:
	.string	"__builtin_ia32_cmpltss"
.LC304:
	.string	"__builtin_ia32_cmpless"
.LC305:
	.string	"__builtin_ia32_cmpgtss"
.LC306:
	.string	"__builtin_ia32_cmpgess"
.LC307:
	.string	"__builtin_ia32_cmpunordss"
.LC308:
	.string	"__builtin_ia32_cmpneqss"
.LC309:
	.string	"__builtin_ia32_cmpnltss"
.LC310:
	.string	"__builtin_ia32_cmpnless"
.LC311:
	.string	"__builtin_ia32_cmpngtss"
.LC312:
	.string	"__builtin_ia32_cmpngess"
.LC313:
	.string	"__builtin_ia32_cmpordss"
.LC314:
	.string	"__builtin_ia32_minps"
.LC315:
	.string	"__builtin_ia32_maxps"
.LC316:
	.string	"__builtin_ia32_minss"
.LC317:
	.string	"__builtin_ia32_maxss"
.LC318:
	.string	"__builtin_ia32_movss"
.LC319:
	.string	"__builtin_ia32_movhlps"
.LC320:
	.string	"__builtin_ia32_movlhps"
.LC321:
	.string	"__builtin_ia32_unpckhps"
.LC322:
	.string	"__builtin_ia32_unpcklps"
.LC323:
	.string	"__builtin_ia32_paddb"
.LC324:
	.string	"__builtin_ia32_paddw"
.LC325:
	.string	"__builtin_ia32_paddd"
.LC326:
	.string	"__builtin_ia32_psubb"
.LC327:
	.string	"__builtin_ia32_psubw"
.LC328:
	.string	"__builtin_ia32_psubd"
.LC329:
	.string	"__builtin_ia32_paddsb"
.LC330:
	.string	"__builtin_ia32_paddsw"
.LC331:
	.string	"__builtin_ia32_psubsb"
.LC332:
	.string	"__builtin_ia32_psubsw"
.LC333:
	.string	"__builtin_ia32_paddusb"
.LC334:
	.string	"__builtin_ia32_paddusw"
.LC335:
	.string	"__builtin_ia32_psubusb"
.LC336:
	.string	"__builtin_ia32_psubusw"
.LC337:
	.string	"__builtin_ia32_pmullw"
.LC338:
	.string	"__builtin_ia32_pmulhw"
.LC339:
	.string	"__builtin_ia32_pmulhuw"
.LC340:
	.string	"__builtin_ia32_pand"
.LC341:
	.string	"__builtin_ia32_pandn"
.LC342:
	.string	"__builtin_ia32_por"
.LC343:
	.string	"__builtin_ia32_pxor"
.LC344:
	.string	"__builtin_ia32_pavgb"
.LC345:
	.string	"__builtin_ia32_pavgw"
.LC346:
	.string	"__builtin_ia32_pcmpeqb"
.LC347:
	.string	"__builtin_ia32_pcmpeqw"
.LC348:
	.string	"__builtin_ia32_pcmpeqd"
.LC349:
	.string	"__builtin_ia32_pcmpgtb"
.LC350:
	.string	"__builtin_ia32_pcmpgtw"
.LC351:
	.string	"__builtin_ia32_pcmpgtd"
.LC352:
	.string	"__builtin_ia32_pmaxub"
.LC353:
	.string	"__builtin_ia32_pmaxsw"
.LC354:
	.string	"__builtin_ia32_pminub"
.LC355:
	.string	"__builtin_ia32_pminsw"
.LC356:
	.string	"__builtin_ia32_punpckhbw"
.LC357:
	.string	"__builtin_ia32_punpckhwd"
.LC358:
	.string	"__builtin_ia32_punpckhdq"
.LC359:
	.string	"__builtin_ia32_punpcklbw"
.LC360:
	.string	"__builtin_ia32_punpcklwd"
.LC361:
	.string	"__builtin_ia32_punpckldq"
	.align 32
	.type	bdesc_2arg, @object
	.size	bdesc_2arg, 3296
bdesc_2arg:
# mask:
	.long	65536
# icode:
	.long	690
# name:
	.quad	.LC282
# code:
	.long	0
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	692
# name:
	.quad	.LC283
# code:
	.long	6
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	694
# name:
	.quad	.LC284
# code:
	.long	4
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	696
# name:
	.quad	.LC285
# code:
	.long	2
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	691
# name:
	.quad	.LC286
# code:
	.long	1
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	693
# name:
	.quad	.LC287
# code:
	.long	7
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	695
# name:
	.quad	.LC288
# code:
	.long	5
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	697
# name:
	.quad	.LC289
# code:
	.long	3
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	727
# name:
	.quad	.LC290
# code:
	.long	8
# comparison:
	.long	103
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	727
# name:
	.quad	.LC291
# code:
	.long	9
# comparison:
	.long	107
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	727
# name:
	.quad	.LC292
# code:
	.long	10
# comparison:
	.long	106
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	727
# name:
	.quad	.LC293
# code:
	.long	11
# comparison:
	.long	107
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	727
# name:
	.quad	.LC294
# code:
	.long	12
# comparison:
	.long	106
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	727
# name:
	.quad	.LC295
# code:
	.long	19
# comparison:
	.long	112
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	728
# name:
	.quad	.LC296
# code:
	.long	13
# comparison:
	.long	103
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	728
# name:
	.quad	.LC297
# code:
	.long	14
# comparison:
	.long	107
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	728
# name:
	.quad	.LC298
# code:
	.long	15
# comparison:
	.long	106
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	728
# name:
	.quad	.LC299
# code:
	.long	16
# comparison:
	.long	107
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	728
# name:
	.quad	.LC300
# code:
	.long	17
# comparison:
	.long	106
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	728
# name:
	.quad	.LC301
# code:
	.long	18
# comparison:
	.long	112
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	729
# name:
	.quad	.LC302
# code:
	.long	21
# comparison:
	.long	103
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	729
# name:
	.quad	.LC303
# code:
	.long	22
# comparison:
	.long	107
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	729
# name:
	.quad	.LC304
# code:
	.long	23
# comparison:
	.long	106
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	729
# name:
	.quad	.LC305
# code:
	.long	24
# comparison:
	.long	107
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	729
# name:
	.quad	.LC306
# code:
	.long	25
# comparison:
	.long	106
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	729
# name:
	.quad	.LC307
# code:
	.long	32
# comparison:
	.long	112
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	730
# name:
	.quad	.LC308
# code:
	.long	26
# comparison:
	.long	103
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	730
# name:
	.quad	.LC309
# code:
	.long	27
# comparison:
	.long	107
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	730
# name:
	.quad	.LC310
# code:
	.long	28
# comparison:
	.long	106
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	730
# name:
	.quad	.LC311
# code:
	.long	29
# comparison:
	.long	107
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	730
# name:
	.quad	.LC312
# code:
	.long	30
# comparison:
	.long	106
# flag:
	.long	1
	.zero	4
# mask:
	.long	65536
# icode:
	.long	730
# name:
	.quad	.LC313
# code:
	.long	31
# comparison:
	.long	112
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	737
# name:
	.quad	.LC314
# code:
	.long	54
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	735
# name:
	.quad	.LC315
# code:
	.long	52
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	738
# name:
	.quad	.LC316
# code:
	.long	55
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	736
# name:
	.quad	.LC317
# code:
	.long	53
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	687
# name:
	.quad	.LC318
# code:
	.long	62
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	682
# name:
	.quad	.LC319
# code:
	.long	63
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	683
# name:
	.quad	.LC320
# code:
	.long	64
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	733
# name:
	.quad	.LC321
# code:
	.long	144
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	734
# name:
	.quad	.LC322
# code:
	.long	145
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	745
# name:
	.quad	.LC323
# code:
	.long	77
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	746
# name:
	.quad	.LC324
# code:
	.long	78
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	747
# name:
	.quad	.LC325
# code:
	.long	79
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	752
# name:
	.quad	.LC326
# code:
	.long	84
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	753
# name:
	.quad	.LC327
# code:
	.long	85
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	754
# name:
	.quad	.LC328
# code:
	.long	86
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	748
# name:
	.quad	.LC329
# code:
	.long	80
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	749
# name:
	.quad	.LC330
# code:
	.long	81
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	755
# name:
	.quad	.LC331
# code:
	.long	87
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	756
# name:
	.quad	.LC332
# code:
	.long	88
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	750
# name:
	.quad	.LC333
# code:
	.long	82
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	751
# name:
	.quad	.LC334
# code:
	.long	83
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	757
# name:
	.quad	.LC335
# code:
	.long	89
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	758
# name:
	.quad	.LC336
# code:
	.long	90
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	759
# name:
	.quad	.LC337
# code:
	.long	112
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	760
# name:
	.quad	.LC338
# code:
	.long	111
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	4259840
# icode:
	.long	761
# name:
	.quad	.LC339
# code:
	.long	110
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	766
# name:
	.quad	.LC340
# code:
	.long	91
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	767
# name:
	.quad	.LC341
# code:
	.long	92
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	763
# name:
	.quad	.LC342
# code:
	.long	93
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	764
# name:
	.quad	.LC343
# code:
	.long	94
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	4259840
# icode:
	.long	768
# name:
	.quad	.LC344
# code:
	.long	95
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	4259840
# icode:
	.long	769
# name:
	.quad	.LC345
# code:
	.long	96
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	774
# name:
	.quad	.LC346
# code:
	.long	97
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	775
# name:
	.quad	.LC347
# code:
	.long	98
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	776
# name:
	.quad	.LC348
# code:
	.long	99
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	777
# name:
	.quad	.LC349
# code:
	.long	100
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	778
# name:
	.quad	.LC350
# code:
	.long	101
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	779
# name:
	.quad	.LC351
# code:
	.long	102
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	4259840
# icode:
	.long	780
# name:
	.quad	.LC352
# code:
	.long	107
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	4259840
# icode:
	.long	781
# name:
	.quad	.LC353
# code:
	.long	106
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	4259840
# icode:
	.long	782
# name:
	.quad	.LC354
# code:
	.long	109
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	4259840
# icode:
	.long	783
# name:
	.quad	.LC355
# code:
	.long	108
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	795
# name:
	.quad	.LC356
# code:
	.long	131
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	796
# name:
	.quad	.LC357
# code:
	.long	132
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	797
# name:
	.quad	.LC358
# code:
	.long	133
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	798
# name:
	.quad	.LC359
# code:
	.long	134
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	799
# name:
	.quad	.LC360
# code:
	.long	135
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	800
# name:
	.quad	.LC361
# code:
	.long	136
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	792
# name:
	.quad	0
# code:
	.long	74
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	793
# name:
	.quad	0
# code:
	.long	75
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	794
# name:
	.quad	0
# code:
	.long	76
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	739
# name:
	.quad	0
# code:
	.long	46
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	742
# name:
	.quad	0
# code:
	.long	48
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	789
# name:
	.quad	0
# code:
	.long	115
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	789
# name:
	.quad	0
# code:
	.long	123
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	790
# name:
	.quad	0
# code:
	.long	116
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	790
# name:
	.quad	0
# code:
	.long	124
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	791
# name:
	.quad	0
# code:
	.long	117
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	791
# name:
	.quad	0
# code:
	.long	125
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	786
# name:
	.quad	0
# code:
	.long	120
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	786
# name:
	.quad	0
# code:
	.long	128
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	787
# name:
	.quad	0
# code:
	.long	121
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	787
# name:
	.quad	0
# code:
	.long	129
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	788
# name:
	.quad	0
# code:
	.long	122
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	788
# name:
	.quad	0
# code:
	.long	130
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	784
# name:
	.quad	0
# code:
	.long	118
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	784
# name:
	.quad	0
# code:
	.long	126
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	785
# name:
	.quad	0
# code:
	.long	119
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	785
# name:
	.quad	0
# code:
	.long	127
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	4259840
# icode:
	.long	770
# name:
	.quad	0
# code:
	.long	113
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	16384
# icode:
	.long	762
# name:
	.quad	0
# code:
	.long	105
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
	.align 32
	.type	bdesc_1arg, @object
	.size	bdesc_1arg, 288
bdesc_1arg:
# mask:
	.long	4259840
# icode:
	.long	677
# name:
	.quad	0
# code:
	.long	71
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	676
# name:
	.quad	0
# code:
	.long	70
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	702
# name:
	.quad	0
# code:
	.long	142
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	700
# name:
	.quad	0
# code:
	.long	140
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	698
# name:
	.quad	0
# code:
	.long	138
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	740
# name:
	.quad	0
# code:
	.long	47
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	743
# name:
	.quad	0
# code:
	.long	49
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	741
# name:
	.quad	0
# code:
	.long	50
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
# mask:
	.long	65536
# icode:
	.long	744
# name:
	.quad	0
# code:
	.long	51
# comparison:
	.long	0
# flag:
	.long	0
	.zero	4
	.text
	.globl	ix86_init_builtins
	.type	ix86_init_builtins, @function
ix86_init_builtins:
.LFB176:
	.loc 1 11076 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 11077 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1286
	andl	$16384, %eax	#, D.30621
	testl	%eax, %eax	# D.30621
	je	.L2724	#,
	.loc 1 11078 0
	call	ix86_init_mmx_sse_builtins	#
.L2724:
	.loc 1 11079 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE176:
	.size	ix86_init_builtins, .-ix86_init_builtins
	.section	.rodata
.LC362:
	.string	"__builtin_ia32_mmx_zero"
.LC363:
	.string	"__builtin_ia32_emms"
.LC364:
	.string	"__builtin_ia32_ldmxcsr"
.LC365:
	.string	"__builtin_ia32_stmxcsr"
.LC366:
	.string	"__builtin_ia32_psllw"
.LC367:
	.string	"__builtin_ia32_pslld"
.LC368:
	.string	"__builtin_ia32_psllq"
.LC369:
	.string	"__builtin_ia32_psrlw"
.LC370:
	.string	"__builtin_ia32_psrld"
.LC371:
	.string	"__builtin_ia32_psrlq"
.LC372:
	.string	"__builtin_ia32_psraw"
.LC373:
	.string	"__builtin_ia32_psrad"
.LC374:
	.string	"__builtin_ia32_pshufw"
.LC375:
	.string	"__builtin_ia32_pmaddwd"
.LC376:
	.string	"__builtin_ia32_packsswb"
.LC377:
	.string	"__builtin_ia32_packssdw"
.LC378:
	.string	"__builtin_ia32_packuswb"
.LC379:
	.string	"__builtin_ia32_cvtpi2ps"
.LC380:
	.string	"__builtin_ia32_cvtps2pi"
.LC381:
	.string	"__builtin_ia32_cvtsi2ss"
.LC382:
	.string	"__builtin_ia32_cvtss2si"
.LC383:
	.string	"__builtin_ia32_cvttps2pi"
.LC384:
	.string	"__builtin_ia32_cvttss2si"
.LC385:
	.string	"__builtin_ia32_andps"
.LC386:
	.string	"__builtin_ia32_andnps"
.LC387:
	.string	"__builtin_ia32_orps"
.LC388:
	.string	"__builtin_ia32_xorps"
.LC389:
	.string	"__builtin_ia32_pextrw"
.LC390:
	.string	"__builtin_ia32_pinsrw"
.LC391:
	.string	"__builtin_ia32_maskmovq"
.LC392:
	.string	"__builtin_ia32_loadaps"
.LC393:
	.string	"__builtin_ia32_loadups"
.LC394:
	.string	"__builtin_ia32_loadss"
.LC395:
	.string	"__builtin_ia32_storeaps"
.LC396:
	.string	"__builtin_ia32_storeups"
.LC397:
	.string	"__builtin_ia32_storess"
.LC398:
	.string	"__builtin_ia32_loadhps"
.LC399:
	.string	"__builtin_ia32_loadlps"
.LC400:
	.string	"__builtin_ia32_storehps"
.LC401:
	.string	"__builtin_ia32_storelps"
.LC402:
	.string	"__builtin_ia32_movmskps"
.LC403:
	.string	"__builtin_ia32_pmovmskb"
.LC404:
	.string	"__builtin_ia32_movntps"
.LC405:
	.string	"__builtin_ia32_movntq"
.LC406:
	.string	"__builtin_ia32_sfence"
.LC407:
	.string	"__builtin_ia32_psadbw"
.LC408:
	.string	"__builtin_ia32_rcpps"
.LC409:
	.string	"__builtin_ia32_rcpss"
.LC410:
	.string	"__builtin_ia32_rsqrtps"
.LC411:
	.string	"__builtin_ia32_rsqrtss"
.LC412:
	.string	"__builtin_ia32_sqrtps"
.LC413:
	.string	"__builtin_ia32_sqrtss"
.LC414:
	.string	"__builtin_ia32_shufps"
.LC415:
	.string	"__builtin_ia32_femms"
.LC416:
	.string	"__builtin_ia32_pavgusb"
.LC417:
	.string	"__builtin_ia32_pf2id"
.LC418:
	.string	"__builtin_ia32_pfacc"
.LC419:
	.string	"__builtin_ia32_pfadd"
.LC420:
	.string	"__builtin_ia32_pfcmpeq"
.LC421:
	.string	"__builtin_ia32_pfcmpge"
.LC422:
	.string	"__builtin_ia32_pfcmpgt"
.LC423:
	.string	"__builtin_ia32_pfmax"
.LC424:
	.string	"__builtin_ia32_pfmin"
.LC425:
	.string	"__builtin_ia32_pfmul"
.LC426:
	.string	"__builtin_ia32_pfrcp"
.LC427:
	.string	"__builtin_ia32_pfrcpit1"
.LC428:
	.string	"__builtin_ia32_pfrcpit2"
.LC429:
	.string	"__builtin_ia32_pfrsqrt"
.LC430:
	.string	"__builtin_ia32_pfrsqit1"
.LC431:
	.string	"__builtin_ia32_pfsub"
.LC432:
	.string	"__builtin_ia32_pfsubr"
.LC433:
	.string	"__builtin_ia32_pi2fd"
.LC434:
	.string	"__builtin_ia32_pmulhrw"
.LC435:
	.string	"__builtin_ia32_pf2iw"
.LC436:
	.string	"__builtin_ia32_pfnacc"
.LC437:
	.string	"__builtin_ia32_pfpnacc"
.LC438:
	.string	"__builtin_ia32_pi2fw"
.LC439:
	.string	"__builtin_ia32_pswapdsf"
.LC440:
	.string	"__builtin_ia32_pswapdsi"
.LC441:
	.string	"__builtin_ia32_setzerops"
	.text
	.type	ix86_init_mmx_sse_builtins, @function
ix86_init_mmx_sse_builtins:
.LFB177:
	.loc 1 11086 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$400, %rsp	#,
	.loc 1 11089 0
	movq	global_trees+256(%rip), %rax	# global_trees, tmp409
	movq	%rax, -368(%rbp)	# tmp409, endlink
	.loc 1 11091 0
	movq	integer_types(%rip), %rax	# integer_types, D.30622
	movq	%rax, %rdi	# D.30622,
	call	build_pointer_type	#
	movq	%rax, -360(%rbp)	# tmp410, pchar_type_node
	.loc 1 11092 0
	movq	global_trees+192(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rdi	# D.30622,
	call	build_pointer_type	#
	movq	%rax, -352(%rbp)	# tmp411, pfloat_type_node
	.loc 1 11093 0
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rdi	# D.30622,
	call	build_pointer_type	#
	movq	%rax, -344(%rbp)	# tmp412, pv2si_type_node
	.loc 1 11094 0
	movq	integer_types+80(%rip), %rax	# integer_types, D.30622
	movq	%rax, %rdi	# D.30622,
	call	build_pointer_type	#
	movq	%rax, -336(%rbp)	# tmp413, pdi_type_node
	.loc 1 11098 0
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp414
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	integer_types+40(%rip), %rax	# integer_types, D.30622
	.loc 1 11097 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -328(%rbp)	# tmp415, int_ftype_v4sf_v4sf
	.loc 1 11104 0
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp416
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+344(%rip), %rax	# global_trees, D.30622
	.loc 1 11103 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -320(%rbp)	# tmp417, v4si_ftype_v4sf_v4sf
	.loc 1 11111 0
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp418
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	integer_types+40(%rip), %rax	# integer_types, D.30622
	.loc 1 11110 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -312(%rbp)	# tmp419, int_ftype_v4sf
	.loc 1 11115 0
	movq	global_trees+360(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp420
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	integer_types+40(%rip), %rax	# integer_types, D.30622
	.loc 1 11114 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -304(%rbp)	# tmp421, int_ftype_v8qi
	.loc 1 11119 0
	movq	integer_types+40(%rip), %rax	# integer_types, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp422
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	.loc 1 11118 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -296(%rbp)	# tmp423, v4sf_ftype_v4sf_int
	.loc 1 11124 0
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp424
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	.loc 1 11123 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -288(%rbp)	# tmp425, v4sf_ftype_v4sf_v2si
	.loc 1 11129 0
	movq	integer_types+40(%rip), %rax	# integer_types, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp426
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	integer_types+40(%rip), %rax	# integer_types, D.30622
	.loc 1 11128 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -280(%rbp)	# tmp427, int_ftype_v4hi_int
	.loc 1 11134 0
	movq	integer_types+40(%rip), %rax	# integer_types, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp428
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	integer_types+40(%rip), %rax	# integer_types, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	.loc 1 11133 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -272(%rbp)	# tmp429, v4hi_ftype_v4hi_int_int
	.loc 1 11142 0
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp430
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+360(%rip), %rax	# global_trees, D.30622
	.loc 1 11141 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -264(%rbp)	# tmp431, v8qi_ftype_v4hi_v4hi
	.loc 1 11147 0
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp432
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	.loc 1 11146 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -256(%rbp)	# tmp433, v4hi_ftype_v2si_v2si
	.loc 1 11152 0
	movq	integer_types+40(%rip), %rax	# integer_types, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp434
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	.loc 1 11151 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -248(%rbp)	# tmp435, v4sf_ftype_v4sf_v4sf_int
	.loc 1 11159 0
	movq	global_trees+360(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp436
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+360(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	.loc 1 11158 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -240(%rbp)	# tmp437, v4hi_ftype_v8qi_v8qi
	.loc 1 11164 0
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp438
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	.loc 1 11163 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -232(%rbp)	# tmp439, v2si_ftype_v4hi_v4hi
	.loc 1 11169 0
	movq	integer_types+40(%rip), %rax	# integer_types, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp440
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	.loc 1 11168 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -224(%rbp)	# tmp441, v4hi_ftype_v4hi_int
	.loc 1 11174 0
	movq	integer_types+72(%rip), %rax	# integer_types, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp442
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	.loc 1 11173 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -216(%rbp)	# tmp443, v4hi_ftype_v4hi_di
	.loc 1 11180 0
	movq	integer_types+72(%rip), %rax	# integer_types, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp444
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	.loc 1 11179 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -208(%rbp)	# tmp445, v2si_ftype_v2si_di
	.loc 1 11186 0
	movq	global_trees+216(%rip), %rax	# global_trees, D.30622
	.loc 1 11185 0
	movq	-368(%rbp), %rdx	# endlink, tmp446
	movq	%rdx, %rsi	# tmp446,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -200(%rbp)	# tmp447, void_ftype_void
	.loc 1 11188 0
	movq	integer_types+48(%rip), %rax	# integer_types, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp448
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+216(%rip), %rax	# global_trees, D.30622
	.loc 1 11187 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -192(%rbp)	# tmp449, void_ftype_unsigned
	.loc 1 11192 0
	movq	integer_types+48(%rip), %rax	# integer_types, D.30622
	.loc 1 11191 0
	movq	-368(%rbp), %rdx	# endlink, tmp450
	movq	%rdx, %rsi	# tmp450,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -184(%rbp)	# tmp451, unsigned_ftype_void
	.loc 1 11194 0
	movq	integer_types+80(%rip), %rax	# integer_types, D.30622
	.loc 1 11193 0
	movq	-368(%rbp), %rdx	# endlink, tmp452
	movq	%rdx, %rsi	# tmp452,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -176(%rbp)	# tmp453, di_ftype_void
	.loc 1 11196 0
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	.loc 1 11195 0
	movq	-368(%rbp), %rdx	# endlink, tmp454
	movq	%rdx, %rsi	# tmp454,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -168(%rbp)	# tmp455, v4sf_ftype_void
	.loc 1 11198 0
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp456
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	.loc 1 11197 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -160(%rbp)	# tmp457, v2si_ftype_v4sf
	.loc 1 11202 0
	movq	-368(%rbp), %rdx	# endlink, tmp458
	movq	-360(%rbp), %rax	# pchar_type_node, tmp459
	movq	%rax, %rsi	# tmp459,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+360(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+360(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, -152(%rbp)	# tmp460, maskmovq_args
	.loc 1 11208 0
	movq	global_trees+216(%rip), %rax	# global_trees, D.30622
	.loc 1 11207 0
	movq	-152(%rbp), %rdx	# maskmovq_args, tmp461
	movq	%rdx, %rsi	# tmp461,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -144(%rbp)	# tmp462, void_ftype_v8qi_v8qi_pchar
	.loc 1 11210 0
	movq	-368(%rbp), %rdx	# endlink, tmp463
	movq	-352(%rbp), %rax	# pfloat_type_node, tmp464
	movq	%rax, %rsi	# tmp464,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	.loc 1 11209 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -136(%rbp)	# tmp465, v4sf_ftype_pfloat
	.loc 1 11215 0
	movq	-368(%rbp), %rdx	# endlink, tmp466
	movq	-344(%rbp), %rax	# pv2si_type_node, tmp467
	movq	%rax, %rsi	# tmp467,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	.loc 1 11214 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -128(%rbp)	# tmp468, v4sf_ftype_v4sf_pv2si
	.loc 1 11220 0
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp469
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	-344(%rbp), %rax	# pv2si_type_node, tmp470
	movq	%rax, %rsi	# tmp470,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+216(%rip), %rax	# global_trees, D.30622
	.loc 1 11219 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -120(%rbp)	# tmp471, void_ftype_pv2si_v4sf
	.loc 1 11225 0
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp472
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	-352(%rbp), %rax	# pfloat_type_node, tmp473
	movq	%rax, %rsi	# tmp473,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+216(%rip), %rax	# global_trees, D.30622
	.loc 1 11224 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -112(%rbp)	# tmp474, void_ftype_pfloat_v4sf
	.loc 1 11230 0
	movq	integer_types+80(%rip), %rax	# integer_types, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp475
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	-336(%rbp), %rax	# pdi_type_node, tmp476
	movq	%rax, %rsi	# tmp476,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+216(%rip), %rax	# global_trees, D.30622
	.loc 1 11229 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -104(%rbp)	# tmp477, void_ftype_pdi_di
	.loc 1 11237 0
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp478
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	.loc 1 11236 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -96(%rbp)	# tmp479, v4sf_ftype_v4sf
	.loc 1 11243 0
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp480
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+328(%rip), %rax	# global_trees, D.30622
	.loc 1 11242 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -88(%rbp)	# tmp481, v4sf_ftype_v4sf_v4sf
	.loc 1 11248 0
	movq	global_trees+360(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp482
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+360(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+360(%rip), %rax	# global_trees, D.30622
	.loc 1 11247 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -80(%rbp)	# tmp483, v8qi_ftype_v8qi_v8qi
	.loc 1 11253 0
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp484
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+368(%rip), %rax	# global_trees, D.30622
	.loc 1 11252 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -72(%rbp)	# tmp485, v4hi_ftype_v4hi_v4hi
	.loc 1 11258 0
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp486
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	.loc 1 11257 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -64(%rbp)	# tmp487, v2si_ftype_v2si_v2si
	.loc 1 11263 0
	movq	integer_types+80(%rip), %rax	# integer_types, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp488
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	integer_types+80(%rip), %rax	# integer_types, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	integer_types+80(%rip), %rax	# integer_types, D.30622
	.loc 1 11262 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -56(%rbp)	# tmp489, di_ftype_di_di
	.loc 1 11270 0
	movq	global_trees+384(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp490
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	.loc 1 11269 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -48(%rbp)	# tmp491, v2si_ftype_v2sf
	.loc 1 11274 0
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp492
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+384(%rip), %rax	# global_trees, D.30622
	.loc 1 11273 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -40(%rbp)	# tmp493, v2sf_ftype_v2si
	.loc 1 11278 0
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp494
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	.loc 1 11277 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -32(%rbp)	# tmp495, v2si_ftype_v2si
	.loc 1 11282 0
	movq	global_trees+384(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp496
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+384(%rip), %rax	# global_trees, D.30622
	.loc 1 11281 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -24(%rbp)	# tmp497, v2sf_ftype_v2sf
	.loc 1 11286 0
	movq	global_trees+384(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp498
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+384(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+384(%rip), %rax	# global_trees, D.30622
	.loc 1 11285 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -16(%rbp)	# tmp499, v2sf_ftype_v2sf_v2sf
	.loc 1 11292 0
	movq	global_trees+384(%rip), %rax	# global_trees, D.30622
	movq	-368(%rbp), %rdx	# endlink, tmp500
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+384(%rip), %rax	# global_trees, D.30622
	movq	%rax, %rsi	# D.30622,
	movl	$0, %edi	#,
	call	tree_cons	#
	movq	%rax, %rdx	#, D.30622
	movq	global_trees+376(%rip), %rax	# global_trees, D.30622
	.loc 1 11291 0
	movq	%rdx, %rsi	# D.30622,
	movq	%rax, %rdi	# D.30622,
	call	build_function_type	#
	movq	%rax, -8(%rbp)	# tmp501, v2si_ftype_v2sf_v2sf
	.loc 1 11300 0
	movq	$0, -384(%rbp)	#, i
	movq	$bdesc_2arg, -392(%rbp)	#, d
	jmp	.L2727	#
.L2740:
.LBB124:
	.loc 1 11307 0
	movq	-392(%rbp), %rax	# d, tmp502
	movq	8(%rax), %rax	# d_1->name, D.30623
	testq	%rax, %rax	# D.30623
	jne	.L2728	#,
	.loc 1 11308 0
	jmp	.L2729	#
.L2728:
	.loc 1 11309 0
	movq	-392(%rbp), %rax	# d, tmp503
	movl	4(%rax), %eax	# d_1->icode, D.30624
	movl	%eax, %edx	# D.30624, tmp504
	movq	%rdx, %rax	# tmp504, tmp505
	salq	$2, %rax	#, tmp505
	addq	%rdx, %rax	# tmp504, tmp505
	salq	$3, %rax	#, tmp506
	addq	$insn_data+24, %rax	#, tmp507
	movq	(%rax), %rax	# insn_data[_223].operand, D.30625
	addq	$24, %rax	#, D.30625
	movzwl	16(%rax), %eax	# _225->mode, D.30626
	movzwl	%ax, %eax	# D.30626, tmp508
	movl	%eax, -396(%rbp)	# tmp508, mode
	.loc 1 11311 0
	movl	-396(%rbp), %eax	# mode, tmp510
	subl	$5, %eax	#, tmp509
	cmpl	$41, %eax	#, tmp509
	ja	.L2730	#,
	movl	%eax, %eax	# tmp509, tmp511
	movq	.L2732(,%rax,8), %rax	#, tmp512
	jmp	*%rax	# tmp512
	.section	.rodata
	.align 8
	.align 4
.L2732:
	.quad	.L2731
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2733
	.quad	.L2730
	.quad	.L2730
	.quad	.L2734
	.quad	.L2730
	.quad	.L2730
	.quad	.L2735
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2730
	.quad	.L2736
	.text
.L2736:
	.loc 1 11314 0
	movq	-88(%rbp), %rax	# v4sf_ftype_v4sf_v4sf, tmp513
	movq	%rax, -376(%rbp)	# tmp513, type
	.loc 1 11315 0
	jmp	.L2737	#
.L2735:
	.loc 1 11317 0
	movq	-80(%rbp), %rax	# v8qi_ftype_v8qi_v8qi, tmp514
	movq	%rax, -376(%rbp)	# tmp514, type
	.loc 1 11318 0
	jmp	.L2737	#
.L2734:
	.loc 1 11320 0
	movq	-72(%rbp), %rax	# v4hi_ftype_v4hi_v4hi, tmp515
	movq	%rax, -376(%rbp)	# tmp515, type
	.loc 1 11321 0
	jmp	.L2737	#
.L2733:
	.loc 1 11323 0
	movq	-64(%rbp), %rax	# v2si_ftype_v2si_v2si, tmp516
	movq	%rax, -376(%rbp)	# tmp516, type
	.loc 1 11324 0
	jmp	.L2737	#
.L2731:
	.loc 1 11326 0
	movq	-56(%rbp), %rax	# di_ftype_di_di, tmp517
	movq	%rax, -376(%rbp)	# tmp517, type
	.loc 1 11327 0
	jmp	.L2737	#
.L2730:
	.loc 1 11330 0
	movl	$__FUNCTION__.16600, %edx	#,
	movl	$11330, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2737:
	.loc 1 11334 0
	movq	-392(%rbp), %rax	# d, tmp518
	movl	4(%rax), %eax	# d_1->icode, D.30624
	cmpl	$727, %eax	#, D.30624
	je	.L2738	#,
	.loc 1 11335 0
	movq	-392(%rbp), %rax	# d, tmp519
	movl	4(%rax), %eax	# d_1->icode, D.30624
	cmpl	$728, %eax	#, D.30624
	je	.L2738	#,
	.loc 1 11336 0
	movq	-392(%rbp), %rax	# d, tmp520
	movl	4(%rax), %eax	# d_1->icode, D.30624
	cmpl	$729, %eax	#, D.30624
	je	.L2738	#,
	.loc 1 11337 0
	movq	-392(%rbp), %rax	# d, tmp521
	movl	4(%rax), %eax	# d_1->icode, D.30624
	cmpl	$730, %eax	#, D.30624
	jne	.L2739	#,
.L2738:
	.loc 1 11338 0
	movq	-320(%rbp), %rax	# v4si_ftype_v4sf_v4sf, tmp522
	movq	%rax, -376(%rbp)	# tmp522, type
.L2739:
	.loc 1 11340 0
	movq	-392(%rbp), %rax	# d, tmp523
	movl	(%rax), %edx	# d_1->mask, D.30627
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1287
	andl	%edx, %eax	# D.30627, D.30627
	testl	%eax, %eax	# D.30627
	je	.L2729	#,
	.loc 1 11340 0 is_stmt 0 discriminator 1
	movq	-392(%rbp), %rax	# d, tmp524
	movl	16(%rax), %eax	# d_1->code, D.30628
	movl	%eax, %edx	# D.30628, D.30629
	movq	-392(%rbp), %rax	# d, tmp525
	movq	8(%rax), %rax	# d_1->name, D.30623
	movq	-376(%rbp), %rsi	# type, tmp526
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movq	%rax, %rdi	# D.30623,
	call	builtin_function	#
.L2729:
.LBE124:
	.loc 1 11300 0 is_stmt 1
	addq	$1, -384(%rbp)	#, i
	addq	$32, -392(%rbp)	#, d
.L2727:
	.loc 1 11300 0 is_stmt 0 discriminator 1
	cmpq	$102, -384(%rbp)	#, i
	jbe	.L2740	#,
	.loc 1 11344 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1289
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2741	#,
	.loc 1 11344 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# di_ftype_void, tmp527
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$181, %edx	#,
	movq	%rax, %rsi	# tmp527,
	movl	$.LC362, %edi	#,
	call	builtin_function	#
.L2741:
	.loc 1 11345 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1290
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2742	#,
	.loc 1 11345 0 is_stmt 0 discriminator 1
	movq	-200(%rbp), %rax	# void_ftype_void, tmp528
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$150, %edx	#,
	movq	%rax, %rsi	# tmp528,
	movl	$.LC363, %edi	#,
	call	builtin_function	#
.L2742:
	.loc 1 11346 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1291
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2743	#,
	.loc 1 11346 0 is_stmt 0 discriminator 1
	movq	-192(%rbp), %rax	# void_ftype_unsigned, tmp529
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$151, %edx	#,
	movq	%rax, %rsi	# tmp529,
	movl	$.LC364, %edi	#,
	call	builtin_function	#
.L2743:
	.loc 1 11347 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1292
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2744	#,
	.loc 1 11347 0 is_stmt 0 discriminator 1
	movq	-184(%rbp), %rax	# unsigned_ftype_void, tmp530
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$152, %edx	#,
	movq	%rax, %rsi	# tmp530,
	movl	$.LC365, %edi	#,
	call	builtin_function	#
.L2744:
	.loc 1 11348 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1293
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2745	#,
	.loc 1 11348 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# v4hi_ftype_v4hi_di, tmp531
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$115, %edx	#,
	movq	%rax, %rsi	# tmp531,
	movl	$.LC366, %edi	#,
	call	builtin_function	#
.L2745:
	.loc 1 11349 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1294
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2746	#,
	.loc 1 11349 0 is_stmt 0 discriminator 1
	movq	-208(%rbp), %rax	# v2si_ftype_v2si_di, tmp532
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$116, %edx	#,
	movq	%rax, %rsi	# tmp532,
	movl	$.LC367, %edi	#,
	call	builtin_function	#
.L2746:
	.loc 1 11350 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1295
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2747	#,
	.loc 1 11350 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# di_ftype_di_di, tmp533
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$117, %edx	#,
	movq	%rax, %rsi	# tmp533,
	movl	$.LC368, %edi	#,
	call	builtin_function	#
.L2747:
	.loc 1 11352 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1296
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2748	#,
	.loc 1 11352 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# v4hi_ftype_v4hi_di, tmp534
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$120, %edx	#,
	movq	%rax, %rsi	# tmp534,
	movl	$.LC369, %edi	#,
	call	builtin_function	#
.L2748:
	.loc 1 11353 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1297
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2749	#,
	.loc 1 11353 0 is_stmt 0 discriminator 1
	movq	-208(%rbp), %rax	# v2si_ftype_v2si_di, tmp535
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$121, %edx	#,
	movq	%rax, %rsi	# tmp535,
	movl	$.LC370, %edi	#,
	call	builtin_function	#
.L2749:
	.loc 1 11354 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1298
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2750	#,
	.loc 1 11354 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# di_ftype_di_di, tmp536
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$122, %edx	#,
	movq	%rax, %rsi	# tmp536,
	movl	$.LC371, %edi	#,
	call	builtin_function	#
.L2750:
	.loc 1 11356 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1299
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2751	#,
	.loc 1 11356 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# v4hi_ftype_v4hi_di, tmp537
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$118, %edx	#,
	movq	%rax, %rsi	# tmp537,
	movl	$.LC372, %edi	#,
	call	builtin_function	#
.L2751:
	.loc 1 11357 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1300
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2752	#,
	.loc 1 11357 0 is_stmt 0 discriminator 1
	movq	-208(%rbp), %rax	# v2si_ftype_v2si_di, tmp538
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$119, %edx	#,
	movq	%rax, %rsi	# tmp538,
	movl	$.LC373, %edi	#,
	call	builtin_function	#
.L2752:
	.loc 1 11359 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1301
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2753	#,
	.loc 1 11359 0 is_stmt 0 discriminator 1
	movq	-224(%rbp), %rax	# v4hi_ftype_v4hi_int, tmp539
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$114, %edx	#,
	movq	%rax, %rsi	# tmp539,
	movl	$.LC374, %edi	#,
	call	builtin_function	#
.L2753:
	.loc 1 11360 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1302
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2754	#,
	.loc 1 11360 0 is_stmt 0 discriminator 1
	movq	-232(%rbp), %rax	# v2si_ftype_v4hi_v4hi, tmp540
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$105, %edx	#,
	movq	%rax, %rsi	# tmp540,
	movl	$.LC375, %edi	#,
	call	builtin_function	#
.L2754:
	.loc 1 11363 0 is_stmt 1
	movq	$0, -384(%rbp)	#, i
	movq	$bdesc_comi, -392(%rbp)	#, d
	jmp	.L2755	#
.L2757:
	.loc 1 11364 0
	movq	-392(%rbp), %rax	# d, tmp541
	movl	(%rax), %edx	# d_2->mask, D.30627
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1303
	andl	%edx, %eax	# D.30627, D.30627
	testl	%eax, %eax	# D.30627
	je	.L2756	#,
	.loc 1 11364 0 is_stmt 0 discriminator 1
	movq	-392(%rbp), %rax	# d, tmp542
	movl	16(%rax), %eax	# d_2->code, D.30628
	movl	%eax, %edx	# D.30628, D.30629
	movq	-392(%rbp), %rax	# d, tmp543
	movq	8(%rax), %rax	# d_2->name, D.30623
	movq	-328(%rbp), %rsi	# int_ftype_v4sf_v4sf, tmp544
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movq	%rax, %rdi	# D.30623,
	call	builtin_function	#
.L2756:
	.loc 1 11363 0 is_stmt 1
	addq	$1, -384(%rbp)	#, i
	addq	$32, -392(%rbp)	#, d
.L2755:
	.loc 1 11363 0 is_stmt 0 discriminator 1
	cmpq	$11, -384(%rbp)	#, i
	jbe	.L2757	#,
	.loc 1 11366 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1305
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2758	#,
	.loc 1 11366 0 is_stmt 0 discriminator 1
	movq	-264(%rbp), %rax	# v8qi_ftype_v4hi_v4hi, tmp545
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$74, %edx	#,
	movq	%rax, %rsi	# tmp545,
	movl	$.LC376, %edi	#,
	call	builtin_function	#
.L2758:
	.loc 1 11367 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1306
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2759	#,
	.loc 1 11367 0 is_stmt 0 discriminator 1
	movq	-256(%rbp), %rax	# v4hi_ftype_v2si_v2si, tmp546
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$75, %edx	#,
	movq	%rax, %rsi	# tmp546,
	movl	$.LC377, %edi	#,
	call	builtin_function	#
.L2759:
	.loc 1 11368 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1307
	andl	$16384, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2760	#,
	.loc 1 11368 0 is_stmt 0 discriminator 1
	movq	-264(%rbp), %rax	# v8qi_ftype_v4hi_v4hi, tmp547
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$76, %edx	#,
	movq	%rax, %rsi	# tmp547,
	movl	$.LC378, %edi	#,
	call	builtin_function	#
.L2760:
	.loc 1 11370 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1308
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2761	#,
	.loc 1 11370 0 is_stmt 0 discriminator 1
	movq	-288(%rbp), %rax	# v4sf_ftype_v4sf_v2si, tmp548
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$46, %edx	#,
	movq	%rax, %rsi	# tmp548,
	movl	$.LC379, %edi	#,
	call	builtin_function	#
.L2761:
	.loc 1 11371 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1309
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2762	#,
	.loc 1 11371 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# v2si_ftype_v4sf, tmp549
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$47, %edx	#,
	movq	%rax, %rsi	# tmp549,
	movl	$.LC380, %edi	#,
	call	builtin_function	#
.L2762:
	.loc 1 11372 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1310
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2763	#,
	.loc 1 11372 0 is_stmt 0 discriminator 1
	movq	-296(%rbp), %rax	# v4sf_ftype_v4sf_int, tmp550
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$48, %edx	#,
	movq	%rax, %rsi	# tmp550,
	movl	$.LC381, %edi	#,
	call	builtin_function	#
.L2763:
	.loc 1 11373 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1311
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2764	#,
	.loc 1 11373 0 is_stmt 0 discriminator 1
	movq	-312(%rbp), %rax	# int_ftype_v4sf, tmp551
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$49, %edx	#,
	movq	%rax, %rsi	# tmp551,
	movl	$.LC382, %edi	#,
	call	builtin_function	#
.L2764:
	.loc 1 11374 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1312
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2765	#,
	.loc 1 11374 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# v2si_ftype_v4sf, tmp552
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$50, %edx	#,
	movq	%rax, %rsi	# tmp552,
	movl	$.LC383, %edi	#,
	call	builtin_function	#
.L2765:
	.loc 1 11375 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1313
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2766	#,
	.loc 1 11375 0 is_stmt 0 discriminator 1
	movq	-312(%rbp), %rax	# int_ftype_v4sf, tmp553
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$51, %edx	#,
	movq	%rax, %rsi	# tmp553,
	movl	$.LC384, %edi	#,
	call	builtin_function	#
.L2766:
	.loc 1 11377 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1314
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2767	#,
	.loc 1 11377 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# v4sf_ftype_v4sf_v4sf, tmp554
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$146, %edx	#,
	movq	%rax, %rsi	# tmp554,
	movl	$.LC385, %edi	#,
	call	builtin_function	#
.L2767:
	.loc 1 11378 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1315
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2768	#,
	.loc 1 11378 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# v4sf_ftype_v4sf_v4sf, tmp555
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$147, %edx	#,
	movq	%rax, %rsi	# tmp555,
	movl	$.LC386, %edi	#,
	call	builtin_function	#
.L2768:
	.loc 1 11379 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1316
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2769	#,
	.loc 1 11379 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# v4sf_ftype_v4sf_v4sf, tmp556
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$148, %edx	#,
	movq	%rax, %rsi	# tmp556,
	movl	$.LC387, %edi	#,
	call	builtin_function	#
.L2769:
	.loc 1 11380 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1317
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2770	#,
	.loc 1 11380 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# v4sf_ftype_v4sf_v4sf, tmp557
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$149, %edx	#,
	movq	%rax, %rsi	# tmp557,
	movl	$.LC388, %edi	#,
	call	builtin_function	#
.L2770:
	.loc 1 11382 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1318
	andl	$4259840, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2771	#,
	.loc 1 11382 0 is_stmt 0 discriminator 1
	movq	-280(%rbp), %rax	# int_ftype_v4hi_int, tmp558
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$103, %edx	#,
	movq	%rax, %rsi	# tmp558,
	movl	$.LC389, %edi	#,
	call	builtin_function	#
.L2771:
	.loc 1 11383 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1319
	andl	$4259840, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2772	#,
	.loc 1 11383 0 is_stmt 0 discriminator 1
	movq	-272(%rbp), %rax	# v4hi_ftype_v4hi_int_int, tmp559
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$104, %edx	#,
	movq	%rax, %rsi	# tmp559,
	movl	$.LC390, %edi	#,
	call	builtin_function	#
.L2772:
	.loc 1 11385 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1320
	andl	$4259840, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2773	#,
	.loc 1 11385 0 is_stmt 0 discriminator 1
	movq	-144(%rbp), %rax	# void_ftype_v8qi_v8qi_pchar, tmp560
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$69, %edx	#,
	movq	%rax, %rsi	# tmp560,
	movl	$.LC391, %edi	#,
	call	builtin_function	#
.L2773:
	.loc 1 11387 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1321
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2774	#,
	.loc 1 11387 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# v4sf_ftype_pfloat, tmp561
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$56, %edx	#,
	movq	%rax, %rsi	# tmp561,
	movl	$.LC392, %edi	#,
	call	builtin_function	#
.L2774:
	.loc 1 11388 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1322
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2775	#,
	.loc 1 11388 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# v4sf_ftype_pfloat, tmp562
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$57, %edx	#,
	movq	%rax, %rsi	# tmp562,
	movl	$.LC393, %edi	#,
	call	builtin_function	#
.L2775:
	.loc 1 11389 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1323
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2776	#,
	.loc 1 11389 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# v4sf_ftype_pfloat, tmp563
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$60, %edx	#,
	movq	%rax, %rsi	# tmp563,
	movl	$.LC394, %edi	#,
	call	builtin_function	#
.L2776:
	.loc 1 11390 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1324
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2777	#,
	.loc 1 11390 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# void_ftype_pfloat_v4sf, tmp564
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$58, %edx	#,
	movq	%rax, %rsi	# tmp564,
	movl	$.LC395, %edi	#,
	call	builtin_function	#
.L2777:
	.loc 1 11391 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1325
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2778	#,
	.loc 1 11391 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# void_ftype_pfloat_v4sf, tmp565
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$59, %edx	#,
	movq	%rax, %rsi	# tmp565,
	movl	$.LC396, %edi	#,
	call	builtin_function	#
.L2778:
	.loc 1 11392 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1326
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2779	#,
	.loc 1 11392 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# void_ftype_pfloat_v4sf, tmp566
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$61, %edx	#,
	movq	%rax, %rsi	# tmp566,
	movl	$.LC397, %edi	#,
	call	builtin_function	#
.L2779:
	.loc 1 11394 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1327
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2780	#,
	.loc 1 11394 0 is_stmt 0 discriminator 1
	movq	-128(%rbp), %rax	# v4sf_ftype_v4sf_pv2si, tmp567
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$65, %edx	#,
	movq	%rax, %rsi	# tmp567,
	movl	$.LC398, %edi	#,
	call	builtin_function	#
.L2780:
	.loc 1 11395 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1328
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2781	#,
	.loc 1 11395 0 is_stmt 0 discriminator 1
	movq	-128(%rbp), %rax	# v4sf_ftype_v4sf_pv2si, tmp568
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$66, %edx	#,
	movq	%rax, %rsi	# tmp568,
	movl	$.LC399, %edi	#,
	call	builtin_function	#
.L2781:
	.loc 1 11396 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1329
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2782	#,
	.loc 1 11396 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# void_ftype_pv2si_v4sf, tmp569
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$67, %edx	#,
	movq	%rax, %rsi	# tmp569,
	movl	$.LC400, %edi	#,
	call	builtin_function	#
.L2782:
	.loc 1 11397 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1330
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2783	#,
	.loc 1 11397 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# void_ftype_pv2si_v4sf, tmp570
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$68, %edx	#,
	movq	%rax, %rsi	# tmp570,
	movl	$.LC401, %edi	#,
	call	builtin_function	#
.L2783:
	.loc 1 11399 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1331
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2784	#,
	.loc 1 11399 0 is_stmt 0 discriminator 1
	movq	-312(%rbp), %rax	# int_ftype_v4sf, tmp571
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$70, %edx	#,
	movq	%rax, %rsi	# tmp571,
	movl	$.LC402, %edi	#,
	call	builtin_function	#
.L2784:
	.loc 1 11400 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1332
	andl	$4259840, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2785	#,
	.loc 1 11400 0 is_stmt 0 discriminator 1
	movq	-304(%rbp), %rax	# int_ftype_v8qi, tmp572
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$71, %edx	#,
	movq	%rax, %rsi	# tmp572,
	movl	$.LC403, %edi	#,
	call	builtin_function	#
.L2785:
	.loc 1 11401 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1333
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2786	#,
	.loc 1 11401 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# void_ftype_pfloat_v4sf, tmp573
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$72, %edx	#,
	movq	%rax, %rsi	# tmp573,
	movl	$.LC404, %edi	#,
	call	builtin_function	#
.L2786:
	.loc 1 11402 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1334
	andl	$4259840, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2787	#,
	.loc 1 11402 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# void_ftype_pdi_di, tmp574
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$73, %edx	#,
	movq	%rax, %rsi	# tmp574,
	movl	$.LC405, %edi	#,
	call	builtin_function	#
.L2787:
	.loc 1 11404 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1335
	andl	$4259840, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2788	#,
	.loc 1 11404 0 is_stmt 0 discriminator 1
	movq	-200(%rbp), %rax	# void_ftype_void, tmp575
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$153, %edx	#,
	movq	%rax, %rsi	# tmp575,
	movl	$.LC406, %edi	#,
	call	builtin_function	#
.L2788:
	.loc 1 11406 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1336
	andl	$4259840, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2789	#,
	.loc 1 11406 0 is_stmt 0 discriminator 1
	movq	-240(%rbp), %rax	# v4hi_ftype_v8qi_v8qi, tmp576
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$113, %edx	#,
	movq	%rax, %rsi	# tmp576,
	movl	$.LC407, %edi	#,
	call	builtin_function	#
.L2789:
	.loc 1 11408 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1337
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2790	#,
	.loc 1 11408 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# v4sf_ftype_v4sf, tmp577
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$138, %edx	#,
	movq	%rax, %rsi	# tmp577,
	movl	$.LC408, %edi	#,
	call	builtin_function	#
.L2790:
	.loc 1 11409 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1338
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2791	#,
	.loc 1 11409 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# v4sf_ftype_v4sf, tmp578
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$139, %edx	#,
	movq	%rax, %rsi	# tmp578,
	movl	$.LC409, %edi	#,
	call	builtin_function	#
.L2791:
	.loc 1 11410 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1339
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2792	#,
	.loc 1 11410 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# v4sf_ftype_v4sf, tmp579
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$140, %edx	#,
	movq	%rax, %rsi	# tmp579,
	movl	$.LC410, %edi	#,
	call	builtin_function	#
.L2792:
	.loc 1 11411 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1340
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2793	#,
	.loc 1 11411 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# v4sf_ftype_v4sf, tmp580
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$141, %edx	#,
	movq	%rax, %rsi	# tmp580,
	movl	$.LC411, %edi	#,
	call	builtin_function	#
.L2793:
	.loc 1 11412 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1341
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2794	#,
	.loc 1 11412 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# v4sf_ftype_v4sf, tmp581
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$142, %edx	#,
	movq	%rax, %rsi	# tmp581,
	movl	$.LC412, %edi	#,
	call	builtin_function	#
.L2794:
	.loc 1 11413 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1342
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2795	#,
	.loc 1 11413 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# v4sf_ftype_v4sf, tmp582
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$143, %edx	#,
	movq	%rax, %rsi	# tmp582,
	movl	$.LC413, %edi	#,
	call	builtin_function	#
.L2795:
	.loc 1 11415 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1343
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2796	#,
	.loc 1 11415 0 is_stmt 0 discriminator 1
	movq	-248(%rbp), %rax	# v4sf_ftype_v4sf_v4sf_int, tmp583
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$137, %edx	#,
	movq	%rax, %rsi	# tmp583,
	movl	$.LC414, %edi	#,
	call	builtin_function	#
.L2796:
	.loc 1 11418 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1344
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2797	#,
	.loc 1 11418 0 is_stmt 0 discriminator 1
	movq	-200(%rbp), %rax	# void_ftype_void, tmp584
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$154, %edx	#,
	movq	%rax, %rsi	# tmp584,
	movl	$.LC415, %edi	#,
	call	builtin_function	#
.L2797:
	.loc 1 11419 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1345
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2798	#,
	.loc 1 11419 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# v8qi_ftype_v8qi_v8qi, tmp585
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$155, %edx	#,
	movq	%rax, %rsi	# tmp585,
	movl	$.LC416, %edi	#,
	call	builtin_function	#
.L2798:
	.loc 1 11420 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1346
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2799	#,
	.loc 1 11420 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# v2si_ftype_v2sf, tmp586
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$156, %edx	#,
	movq	%rax, %rsi	# tmp586,
	movl	$.LC417, %edi	#,
	call	builtin_function	#
.L2799:
	.loc 1 11421 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1347
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2800	#,
	.loc 1 11421 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp587
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$157, %edx	#,
	movq	%rax, %rsi	# tmp587,
	movl	$.LC418, %edi	#,
	call	builtin_function	#
.L2800:
	.loc 1 11422 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1348
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2801	#,
	.loc 1 11422 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp588
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$158, %edx	#,
	movq	%rax, %rsi	# tmp588,
	movl	$.LC419, %edi	#,
	call	builtin_function	#
.L2801:
	.loc 1 11423 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1349
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2802	#,
	.loc 1 11423 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# v2si_ftype_v2sf_v2sf, tmp589
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$159, %edx	#,
	movq	%rax, %rsi	# tmp589,
	movl	$.LC420, %edi	#,
	call	builtin_function	#
.L2802:
	.loc 1 11424 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1350
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2803	#,
	.loc 1 11424 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# v2si_ftype_v2sf_v2sf, tmp590
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$160, %edx	#,
	movq	%rax, %rsi	# tmp590,
	movl	$.LC421, %edi	#,
	call	builtin_function	#
.L2803:
	.loc 1 11425 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1351
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2804	#,
	.loc 1 11425 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# v2si_ftype_v2sf_v2sf, tmp591
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$161, %edx	#,
	movq	%rax, %rsi	# tmp591,
	movl	$.LC422, %edi	#,
	call	builtin_function	#
.L2804:
	.loc 1 11426 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1352
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2805	#,
	.loc 1 11426 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp592
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$162, %edx	#,
	movq	%rax, %rsi	# tmp592,
	movl	$.LC423, %edi	#,
	call	builtin_function	#
.L2805:
	.loc 1 11427 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1353
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2806	#,
	.loc 1 11427 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp593
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$163, %edx	#,
	movq	%rax, %rsi	# tmp593,
	movl	$.LC424, %edi	#,
	call	builtin_function	#
.L2806:
	.loc 1 11428 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1354
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2807	#,
	.loc 1 11428 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp594
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$164, %edx	#,
	movq	%rax, %rsi	# tmp594,
	movl	$.LC425, %edi	#,
	call	builtin_function	#
.L2807:
	.loc 1 11429 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1355
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2808	#,
	.loc 1 11429 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# v2sf_ftype_v2sf, tmp595
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$165, %edx	#,
	movq	%rax, %rsi	# tmp595,
	movl	$.LC426, %edi	#,
	call	builtin_function	#
.L2808:
	.loc 1 11430 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1356
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2809	#,
	.loc 1 11430 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp596
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$166, %edx	#,
	movq	%rax, %rsi	# tmp596,
	movl	$.LC427, %edi	#,
	call	builtin_function	#
.L2809:
	.loc 1 11431 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1357
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2810	#,
	.loc 1 11431 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp597
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$167, %edx	#,
	movq	%rax, %rsi	# tmp597,
	movl	$.LC428, %edi	#,
	call	builtin_function	#
.L2810:
	.loc 1 11432 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1358
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2811	#,
	.loc 1 11432 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# v2sf_ftype_v2sf, tmp598
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$169, %edx	#,
	movq	%rax, %rsi	# tmp598,
	movl	$.LC429, %edi	#,
	call	builtin_function	#
.L2811:
	.loc 1 11433 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1359
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2812	#,
	.loc 1 11433 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp599
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$168, %edx	#,
	movq	%rax, %rsi	# tmp599,
	movl	$.LC430, %edi	#,
	call	builtin_function	#
.L2812:
	.loc 1 11434 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1360
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2813	#,
	.loc 1 11434 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp600
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$170, %edx	#,
	movq	%rax, %rsi	# tmp600,
	movl	$.LC431, %edi	#,
	call	builtin_function	#
.L2813:
	.loc 1 11435 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1361
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2814	#,
	.loc 1 11435 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp601
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$171, %edx	#,
	movq	%rax, %rsi	# tmp601,
	movl	$.LC432, %edi	#,
	call	builtin_function	#
.L2814:
	.loc 1 11436 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1362
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2815	#,
	.loc 1 11436 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# v2sf_ftype_v2si, tmp602
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$172, %edx	#,
	movq	%rax, %rsi	# tmp602,
	movl	$.LC433, %edi	#,
	call	builtin_function	#
.L2815:
	.loc 1 11437 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1363
	andl	$1048576, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2816	#,
	.loc 1 11437 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# v4hi_ftype_v4hi_v4hi, tmp603
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$173, %edx	#,
	movq	%rax, %rsi	# tmp603,
	movl	$.LC434, %edi	#,
	call	builtin_function	#
.L2816:
	.loc 1 11440 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1364
	andl	$4194304, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2817	#,
	.loc 1 11440 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# v2si_ftype_v2sf, tmp604
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$174, %edx	#,
	movq	%rax, %rsi	# tmp604,
	movl	$.LC435, %edi	#,
	call	builtin_function	#
.L2817:
	.loc 1 11441 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1365
	andl	$4194304, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2818	#,
	.loc 1 11441 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp605
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$175, %edx	#,
	movq	%rax, %rsi	# tmp605,
	movl	$.LC436, %edi	#,
	call	builtin_function	#
.L2818:
	.loc 1 11442 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1366
	andl	$4194304, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2819	#,
	.loc 1 11442 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# v2sf_ftype_v2sf_v2sf, tmp606
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$176, %edx	#,
	movq	%rax, %rsi	# tmp606,
	movl	$.LC437, %edi	#,
	call	builtin_function	#
.L2819:
	.loc 1 11443 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1367
	andl	$4194304, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2820	#,
	.loc 1 11443 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# v2sf_ftype_v2si, tmp607
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$177, %edx	#,
	movq	%rax, %rsi	# tmp607,
	movl	$.LC438, %edi	#,
	call	builtin_function	#
.L2820:
	.loc 1 11444 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1368
	andl	$4194304, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2821	#,
	.loc 1 11444 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# v2sf_ftype_v2sf, tmp608
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$179, %edx	#,
	movq	%rax, %rsi	# tmp608,
	movl	$.LC439, %edi	#,
	call	builtin_function	#
.L2821:
	.loc 1 11445 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1369
	andl	$4194304, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2822	#,
	.loc 1 11445 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# v2si_ftype_v2si, tmp609
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$178, %edx	#,
	movq	%rax, %rsi	# tmp609,
	movl	$.LC440, %edi	#,
	call	builtin_function	#
.L2822:
	.loc 1 11447 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1370
	andl	$65536, %eax	#, D.30629
	testl	%eax, %eax	# D.30629
	je	.L2726	#,
	.loc 1 11447 0 is_stmt 0 discriminator 1
	movq	-168(%rbp), %rax	# v4sf_ftype_void, tmp610
	movl	$0, %r8d	#,
	movl	$2, %ecx	#,
	movl	$180, %edx	#,
	movq	%rax, %rsi	# tmp610,
	movl	$.LC441, %edi	#,
	call	builtin_function	#
.L2726:
	.loc 1 11448 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE177:
	.size	ix86_init_mmx_sse_builtins, .-ix86_init_mmx_sse_builtins
	.type	safe_vector_operand, @function
safe_vector_operand:
.LFB178:
	.loc 1 11457 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# x, x
	movl	%esi, -12(%rbp)	# mode, mode
	.loc 1 11458 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30711
	cmpq	-8(%rbp), %rax	# x, D.30711
	je	.L2825	#,
	.loc 1 11459 0
	movq	-8(%rbp), %rax	# x, D.30710
	jmp	.L2826	#
.L2825:
	.loc 1 11460 0
	movl	-12(%rbp), %eax	# mode, tmp66
	movl	%eax, %edi	# tmp66,
	call	gen_reg_rtx	#
	movq	%rax, -8(%rbp)	# tmp67, x
	.loc 1 11462 0
	cmpl	$5, -12(%rbp)	#, mode
	je	.L2827	#,
	.loc 1 11462 0 is_stmt 0 discriminator 1
	cmpl	$39, -12(%rbp)	#, mode
	je	.L2827	#,
	cmpl	$36, -12(%rbp)	#, mode
	je	.L2827	#,
	cmpl	$33, -12(%rbp)	#, mode
	je	.L2827	#,
	cmpl	$4, -12(%rbp)	#, mode
	je	.L2827	#,
	cmpl	$44, -12(%rbp)	#, mode
	je	.L2827	#,
	cmpl	$15, -12(%rbp)	#, mode
	jne	.L2828	#,
.L2827:
	.loc 1 11463 0 is_stmt 1
	cmpl	$5, -12(%rbp)	#, mode
	je	.L2829	#,
	.loc 1 11463 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp68
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp68,
	movl	$5, %edi	#,
	call	gen_rtx_SUBREG	#
	jmp	.L2830	#
.L2829:
	.loc 1 11463 0 discriminator 2
	movq	-8(%rbp), %rax	# x, iftmp.1371
.L2830:
	.loc 1 11463 0 discriminator 3
	movq	%rax, %rdi	# iftmp.1371,
	call	gen_mmx_clrdi	#
	movq	%rax, %rdi	# D.30711,
	call	emit_insn	#
	jmp	.L2831	#
.L2828:
	.loc 1 11466 0 is_stmt 1
	cmpl	$46, -12(%rbp)	#, mode
	je	.L2832	#,
	.loc 1 11466 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp69
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp69,
	movl	$46, %edi	#,
	call	gen_rtx_SUBREG	#
	jmp	.L2833	#
.L2832:
	.loc 1 11466 0 discriminator 2
	movq	-8(%rbp), %rax	# x, iftmp.1372
.L2833:
	.loc 1 11466 0 discriminator 3
	movq	%rax, %rdi	# iftmp.1372,
	call	gen_sse_clrv4sf	#
	movq	%rax, %rdi	# D.30711,
	call	emit_insn	#
.L2831:
	.loc 1 11468 0 is_stmt 1
	movq	-8(%rbp), %rax	# x, D.30710
.L2826:
	.loc 1 11469 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE178:
	.size	safe_vector_operand, .-safe_vector_operand
	.type	ix86_expand_binop_builtin, @function
ix86_expand_binop_builtin:
.LFB179:
	.loc 1 11478 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movl	%edi, -68(%rbp)	# icode, icode
	movq	%rsi, -80(%rbp)	# arglist, arglist
	movq	%rdx, -88(%rbp)	# target, target
	.loc 1 11480 0
	movq	-80(%rbp), %rax	# arglist, tmp99
	movq	32(%rax), %rax	# arglist_8(D)->list.value, tmp100
	movq	%rax, -24(%rbp)	# tmp100, arg0
	.loc 1 11481 0
	movq	-80(%rbp), %rax	# arglist, tmp101
	movq	(%rax), %rax	# arglist_8(D)->common.chain, D.30713
	movq	32(%rax), %rax	# _10->list.value, tmp102
	movq	%rax, -16(%rbp)	# tmp102, arg1
	.loc 1 11482 0
	movq	-24(%rbp), %rax	# arg0, tmp103
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp103,
	call	expand_expr	#
	movq	%rax, -40(%rbp)	# tmp104, op0
	.loc 1 11483 0
	movq	-16(%rbp), %rax	# arg1, tmp105
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp105,
	call	expand_expr	#
	movq	%rax, -32(%rbp)	# tmp106, op1
	.loc 1 11484 0
	movl	-68(%rbp), %edx	# icode, tmp107
	movq	%rdx, %rax	# tmp107, tmp108
	salq	$2, %rax	#, tmp108
	addq	%rdx, %rax	# tmp107, tmp108
	salq	$3, %rax	#, tmp109
	addq	$insn_data+24, %rax	#, tmp110
	movq	(%rax), %rax	# insn_data[icode_14(D)].operand, D.30714
	movzwl	16(%rax), %eax	# _15->mode, D.30715
	movzwl	%ax, %eax	# D.30715, tmp111
	movl	%eax, -52(%rbp)	# tmp111, tmode
	.loc 1 11485 0
	movl	-68(%rbp), %edx	# icode, tmp112
	movq	%rdx, %rax	# tmp112, tmp113
	salq	$2, %rax	#, tmp113
	addq	%rdx, %rax	# tmp112, tmp113
	salq	$3, %rax	#, tmp114
	addq	$insn_data+24, %rax	#, tmp115
	movq	(%rax), %rax	# insn_data[icode_14(D)].operand, D.30714
	addq	$24, %rax	#, D.30714
	movzwl	16(%rax), %eax	# _19->mode, D.30715
	movzwl	%ax, %eax	# D.30715, tmp116
	movl	%eax, -48(%rbp)	# tmp116, mode0
	.loc 1 11486 0
	movl	-68(%rbp), %edx	# icode, tmp117
	movq	%rdx, %rax	# tmp117, tmp118
	salq	$2, %rax	#, tmp118
	addq	%rdx, %rax	# tmp117, tmp118
	salq	$3, %rax	#, tmp119
	addq	$insn_data+24, %rax	#, tmp120
	movq	(%rax), %rax	# insn_data[icode_14(D)].operand, D.30714
	addq	$48, %rax	#, D.30714
	movzwl	16(%rax), %eax	# _23->mode, D.30715
	movzwl	%ax, %eax	# D.30715, tmp121
	movl	%eax, -44(%rbp)	# tmp121, mode1
	.loc 1 11488 0
	movl	-48(%rbp), %eax	# mode0, mode0.1373
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30716
	cmpl	$7, %eax	#, D.30716
	je	.L2835	#,
	.loc 1 11488 0 is_stmt 0 discriminator 1
	movl	-48(%rbp), %eax	# mode0, mode0.1374
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30716
	cmpl	$8, %eax	#, D.30716
	jne	.L2836	#,
.L2835:
	.loc 1 11489 0 is_stmt 1
	movl	-48(%rbp), %edx	# mode0, tmp124
	movq	-40(%rbp), %rax	# op0, tmp125
	movl	%edx, %esi	# tmp124,
	movq	%rax, %rdi	# tmp125,
	call	safe_vector_operand	#
	movq	%rax, -40(%rbp)	# tmp126, op0
.L2836:
	.loc 1 11490 0
	movl	-44(%rbp), %eax	# mode1, mode1.1375
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30716
	cmpl	$7, %eax	#, D.30716
	je	.L2837	#,
	.loc 1 11490 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# mode1, mode1.1376
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30716
	cmpl	$8, %eax	#, D.30716
	jne	.L2838	#,
.L2837:
	.loc 1 11491 0 is_stmt 1
	movl	-44(%rbp), %edx	# mode1, tmp129
	movq	-32(%rbp), %rax	# op1, tmp130
	movl	%edx, %esi	# tmp129,
	movq	%rax, %rdi	# tmp130,
	call	safe_vector_operand	#
	movq	%rax, -32(%rbp)	# tmp131, op1
.L2838:
	.loc 1 11493 0
	cmpq	$0, -88(%rbp)	#, target
	je	.L2839	#,
	.loc 1 11494 0
	movq	-88(%rbp), %rax	# target, tmp132
	movzbl	2(%rax), %eax	# target_36(D)->mode, D.30717
	movzbl	%al, %eax	# D.30717, D.30718
	cmpl	-52(%rbp), %eax	# tmode, D.30718
	jne	.L2839	#,
	.loc 1 11495 0
	movl	-68(%rbp), %edx	# icode, tmp133
	movq	%rdx, %rax	# tmp133, tmp134
	salq	$2, %rax	#, tmp134
	addq	%rdx, %rax	# tmp133, tmp134
	salq	$3, %rax	#, tmp135
	addq	$insn_data+24, %rax	#, tmp136
	movq	(%rax), %rax	# insn_data[icode_14(D)].operand, D.30714
	movq	(%rax), %rax	# _39->predicate, D.30719
	movl	-52(%rbp), %ecx	# tmode, tmp137
	movq	-88(%rbp), %rdx	# target, tmp138
	movl	%ecx, %esi	# tmp137,
	movq	%rdx, %rdi	# tmp138,
	call	*%rax	# D.30719
	testl	%eax, %eax	# D.30720
	jne	.L2840	#,
.L2839:
	.loc 1 11496 0
	movl	-52(%rbp), %eax	# tmode, tmp139
	movl	%eax, %edi	# tmp139,
	call	gen_reg_rtx	#
	movq	%rax, -88(%rbp)	# tmp140, target
.L2840:
	.loc 1 11500 0
	movq	-40(%rbp), %rax	# op0, tmp141
	movzbl	2(%rax), %eax	# op0_2->mode, D.30717
	movzbl	%al, %eax	# D.30717, D.30718
	cmpl	-48(%rbp), %eax	# mode0, D.30718
	jne	.L2841	#,
	.loc 1 11500 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# op1, tmp142
	movzbl	2(%rax), %eax	# op1_5->mode, D.30717
	movzbl	%al, %eax	# D.30717, D.30718
	cmpl	-44(%rbp), %eax	# mode1, D.30718
	je	.L2842	#,
.L2841:
	.loc 1 11501 0 is_stmt 1
	movl	$__FUNCTION__.16624, %edx	#,
	movl	$11501, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L2842:
	.loc 1 11503 0
	movl	-68(%rbp), %edx	# icode, tmp143
	movq	%rdx, %rax	# tmp143, tmp144
	salq	$2, %rax	#, tmp144
	addq	%rdx, %rax	# tmp143, tmp144
	salq	$3, %rax	#, tmp145
	addq	$insn_data+24, %rax	#, tmp146
	movq	(%rax), %rax	# insn_data[icode_14(D)].operand, D.30714
	addq	$24, %rax	#, D.30714
	movq	(%rax), %rax	# _48->predicate, D.30719
	movl	-48(%rbp), %ecx	# mode0, tmp147
	movq	-40(%rbp), %rdx	# op0, tmp148
	movl	%ecx, %esi	# tmp147,
	movq	%rdx, %rdi	# tmp148,
	call	*%rax	# D.30719
	testl	%eax, %eax	# D.30720
	jne	.L2843	#,
	.loc 1 11504 0
	movq	-40(%rbp), %rdx	# op0, tmp149
	movl	-48(%rbp), %eax	# mode0, tmp150
	movq	%rdx, %rsi	# tmp149,
	movl	%eax, %edi	# tmp150,
	call	copy_to_mode_reg	#
	movq	%rax, -40(%rbp)	# tmp151, op0
.L2843:
	.loc 1 11505 0
	movl	-68(%rbp), %edx	# icode, tmp152
	movq	%rdx, %rax	# tmp152, tmp153
	salq	$2, %rax	#, tmp153
	addq	%rdx, %rax	# tmp152, tmp153
	salq	$3, %rax	#, tmp154
	addq	$insn_data+24, %rax	#, tmp155
	movq	(%rax), %rax	# insn_data[icode_14(D)].operand, D.30714
	addq	$48, %rax	#, D.30714
	movq	(%rax), %rax	# _53->predicate, D.30719
	movl	-44(%rbp), %ecx	# mode1, tmp156
	movq	-32(%rbp), %rdx	# op1, tmp157
	movl	%ecx, %esi	# tmp156,
	movq	%rdx, %rdi	# tmp157,
	call	*%rax	# D.30719
	testl	%eax, %eax	# D.30720
	jne	.L2844	#,
	.loc 1 11506 0
	movq	-32(%rbp), %rdx	# op1, tmp158
	movl	-44(%rbp), %eax	# mode1, tmp159
	movq	%rdx, %rsi	# tmp158,
	movl	%eax, %edi	# tmp159,
	call	copy_to_mode_reg	#
	movq	%rax, -32(%rbp)	# tmp160, op1
.L2844:
	.loc 1 11511 0
	movq	-40(%rbp), %rax	# op0, tmp161
	movzwl	(%rax), %eax	# op0_3->code, D.30715
	cmpw	$66, %ax	#, D.30715
	jne	.L2845	#,
	.loc 1 11511 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# op1, tmp162
	movzwl	(%rax), %eax	# op1_6->code, D.30715
	cmpw	$66, %ax	#, D.30715
	jne	.L2845	#,
	.loc 1 11512 0 is_stmt 1
	movq	-40(%rbp), %rdx	# op0, tmp163
	movl	-48(%rbp), %eax	# mode0, tmp164
	movq	%rdx, %rsi	# tmp163,
	movl	%eax, %edi	# tmp164,
	call	copy_to_mode_reg	#
	movq	%rax, -40(%rbp)	# tmp165, op0
.L2845:
	.loc 1 11514 0
	movl	-68(%rbp), %eax	# icode, icode.1377
	movslq	%eax, %rdx	# icode.1377, tmp166
	movq	%rdx, %rax	# tmp166, tmp167
	salq	$2, %rax	#, tmp167
	addq	%rdx, %rax	# tmp166, tmp167
	salq	$3, %rax	#, tmp168
	addq	$insn_data+16, %rax	#, tmp169
	movq	(%rax), %rcx	# insn_data[icode.1377_60].genfun, D.30721
	movq	-32(%rbp), %rdx	# op1, tmp170
	movq	-40(%rbp), %rsi	# op0, tmp171
	movq	-88(%rbp), %rax	# target, tmp172
	movq	%rax, %rdi	# tmp172,
	movl	$0, %eax	#,
	call	*%rcx	# D.30721
	movq	%rax, -8(%rbp)	# tmp173, pat
	.loc 1 11515 0
	cmpq	$0, -8(%rbp)	#, pat
	jne	.L2846	#,
	.loc 1 11516 0
	movl	$0, %eax	#, D.30712
	jmp	.L2847	#
.L2846:
	.loc 1 11517 0
	movq	-8(%rbp), %rax	# pat, tmp174
	movq	%rax, %rdi	# tmp174,
	call	emit_insn	#
	.loc 1 11518 0
	movq	-88(%rbp), %rax	# target, D.30712
.L2847:
	.loc 1 11519 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE179:
	.size	ix86_expand_binop_builtin, .-ix86_expand_binop_builtin
	.type	ix86_expand_timode_binop_builtin, @function
ix86_expand_timode_binop_builtin:
.LFB180:
	.loc 1 11530 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movl	%edi, -52(%rbp)	# icode, icode
	movq	%rsi, -64(%rbp)	# arglist, arglist
	movq	%rdx, -72(%rbp)	# target, target
	.loc 1 11532 0
	movq	-64(%rbp), %rax	# arglist, tmp74
	movq	32(%rax), %rax	# arglist_5(D)->list.value, tmp75
	movq	%rax, -32(%rbp)	# tmp75, arg0
	.loc 1 11533 0
	movq	-64(%rbp), %rax	# arglist, tmp76
	movq	(%rax), %rax	# arglist_5(D)->common.chain, D.30723
	movq	32(%rax), %rax	# _7->list.value, tmp77
	movq	%rax, -24(%rbp)	# tmp77, arg1
	.loc 1 11534 0
	movq	-32(%rbp), %rax	# arg0, tmp78
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp78,
	call	expand_expr	#
	movq	%rax, -48(%rbp)	# tmp79, op0
	.loc 1 11535 0
	movq	-24(%rbp), %rax	# arg1, tmp80
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp80,
	call	expand_expr	#
	movq	%rax, -40(%rbp)	# tmp81, op1
	.loc 1 11537 0
	movq	-48(%rbp), %rax	# op0, tmp82
	movq	%rax, %rsi	# tmp82,
	movl	$6, %edi	#,
	call	gen_lowpart	#
	movq	%rax, -48(%rbp)	# tmp83, op0
	.loc 1 11538 0
	movq	-40(%rbp), %rax	# op1, tmp84
	movq	%rax, %rsi	# tmp84,
	movl	$6, %edi	#,
	call	gen_lowpart	#
	movq	%rax, -40(%rbp)	# tmp85, op1
	.loc 1 11539 0
	movl	$6, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -16(%rbp)	# tmp86, target
	.loc 1 11541 0
	movl	-52(%rbp), %edx	# icode, tmp87
	movq	%rdx, %rax	# tmp87, tmp88
	salq	$2, %rax	#, tmp88
	addq	%rdx, %rax	# tmp87, tmp88
	salq	$3, %rax	#, tmp89
	addq	$insn_data+24, %rax	#, tmp90
	movq	(%rax), %rax	# insn_data[icode_14(D)].operand, D.30724
	addq	$24, %rax	#, D.30724
	movq	(%rax), %rax	# _16->predicate, D.30725
	movq	-48(%rbp), %rdx	# op0, tmp91
	movl	$6, %esi	#,
	movq	%rdx, %rdi	# tmp91,
	call	*%rax	# D.30725
	testl	%eax, %eax	# D.30726
	jne	.L2849	#,
	.loc 1 11542 0
	movq	-48(%rbp), %rax	# op0, tmp92
	movq	%rax, %rsi	# tmp92,
	movl	$6, %edi	#,
	call	copy_to_mode_reg	#
	movq	%rax, -48(%rbp)	# tmp93, op0
.L2849:
	.loc 1 11543 0
	movl	-52(%rbp), %edx	# icode, tmp94
	movq	%rdx, %rax	# tmp94, tmp95
	salq	$2, %rax	#, tmp95
	addq	%rdx, %rax	# tmp94, tmp95
	salq	$3, %rax	#, tmp96
	addq	$insn_data+24, %rax	#, tmp97
	movq	(%rax), %rax	# insn_data[icode_14(D)].operand, D.30724
	addq	$48, %rax	#, D.30724
	movq	(%rax), %rax	# _21->predicate, D.30725
	movq	-40(%rbp), %rdx	# op1, tmp98
	movl	$6, %esi	#,
	movq	%rdx, %rdi	# tmp98,
	call	*%rax	# D.30725
	testl	%eax, %eax	# D.30726
	jne	.L2850	#,
	.loc 1 11544 0
	movq	-40(%rbp), %rax	# op1, tmp99
	movq	%rax, %rsi	# tmp99,
	movl	$6, %edi	#,
	call	copy_to_mode_reg	#
	movq	%rax, -40(%rbp)	# tmp100, op1
.L2850:
	.loc 1 11549 0
	movq	-48(%rbp), %rax	# op0, tmp101
	movzwl	(%rax), %eax	# op0_1->code, D.30727
	cmpw	$66, %ax	#, D.30727
	jne	.L2851	#,
	.loc 1 11549 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# op1, tmp102
	movzwl	(%rax), %eax	# op1_3->code, D.30727
	cmpw	$66, %ax	#, D.30727
	jne	.L2851	#,
	.loc 1 11550 0 is_stmt 1
	movq	-48(%rbp), %rax	# op0, tmp103
	movq	%rax, %rsi	# tmp103,
	movl	$6, %edi	#,
	call	copy_to_mode_reg	#
	movq	%rax, -48(%rbp)	# tmp104, op0
.L2851:
	.loc 1 11552 0
	movl	-52(%rbp), %eax	# icode, icode.1378
	movslq	%eax, %rdx	# icode.1378, tmp105
	movq	%rdx, %rax	# tmp105, tmp106
	salq	$2, %rax	#, tmp106
	addq	%rdx, %rax	# tmp105, tmp106
	salq	$3, %rax	#, tmp107
	addq	$insn_data+16, %rax	#, tmp108
	movq	(%rax), %rcx	# insn_data[icode.1378_28].genfun, D.30728
	movq	-40(%rbp), %rdx	# op1, tmp109
	movq	-48(%rbp), %rsi	# op0, tmp110
	movq	-16(%rbp), %rax	# target, tmp111
	movq	%rax, %rdi	# tmp111,
	movl	$0, %eax	#,
	call	*%rcx	# D.30728
	movq	%rax, -8(%rbp)	# tmp112, pat
	.loc 1 11553 0
	cmpq	$0, -8(%rbp)	#, pat
	jne	.L2852	#,
	.loc 1 11554 0
	movl	$0, %eax	#, D.30722
	jmp	.L2853	#
.L2852:
	.loc 1 11555 0
	movq	-8(%rbp), %rax	# pat, tmp113
	movq	%rax, %rdi	# tmp113,
	call	emit_insn	#
	.loc 1 11557 0
	movq	-16(%rbp), %rax	# target, tmp114
	movq	%rax, %rsi	# tmp114,
	movl	$46, %edi	#,
	call	gen_lowpart	#
.L2853:
	.loc 1 11558 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE180:
	.size	ix86_expand_timode_binop_builtin, .-ix86_expand_timode_binop_builtin
	.type	ix86_expand_store_builtin, @function
ix86_expand_store_builtin:
.LFB181:
	.loc 1 11566 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movl	%edi, -52(%rbp)	# icode, icode
	movq	%rsi, -64(%rbp)	# arglist, arglist
	.loc 1 11568 0
	movq	-64(%rbp), %rax	# arglist, tmp81
	movq	32(%rax), %rax	# arglist_4(D)->list.value, tmp82
	movq	%rax, -32(%rbp)	# tmp82, arg0
	.loc 1 11569 0
	movq	-64(%rbp), %rax	# arglist, tmp83
	movq	(%rax), %rax	# arglist_4(D)->common.chain, D.30729
	movq	32(%rax), %rax	# _6->list.value, tmp84
	movq	%rax, -24(%rbp)	# tmp84, arg1
	.loc 1 11570 0
	movq	-32(%rbp), %rax	# arg0, tmp85
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp85,
	call	expand_expr	#
	movq	%rax, -16(%rbp)	# tmp86, op0
	.loc 1 11571 0
	movq	-24(%rbp), %rax	# arg1, tmp87
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	expand_expr	#
	movq	%rax, -40(%rbp)	# tmp88, op1
	.loc 1 11572 0
	movl	-52(%rbp), %edx	# icode, tmp89
	movq	%rdx, %rax	# tmp89, tmp90
	salq	$2, %rax	#, tmp90
	addq	%rdx, %rax	# tmp89, tmp90
	salq	$3, %rax	#, tmp91
	addq	$insn_data+24, %rax	#, tmp92
	movq	(%rax), %rax	# insn_data[icode_10(D)].operand, D.30730
	movzwl	16(%rax), %eax	# _11->mode, D.30731
	movzwl	%ax, %eax	# D.30731, tmp93
	movl	%eax, -48(%rbp)	# tmp93, mode0
	.loc 1 11573 0
	movl	-52(%rbp), %edx	# icode, tmp94
	movq	%rdx, %rax	# tmp94, tmp95
	salq	$2, %rax	#, tmp95
	addq	%rdx, %rax	# tmp94, tmp95
	salq	$3, %rax	#, tmp96
	addq	$insn_data+24, %rax	#, tmp97
	movq	(%rax), %rax	# insn_data[icode_10(D)].operand, D.30730
	addq	$24, %rax	#, D.30730
	movzwl	16(%rax), %eax	# _15->mode, D.30731
	movzwl	%ax, %eax	# D.30731, tmp98
	movl	%eax, -44(%rbp)	# tmp98, mode1
	.loc 1 11575 0
	movl	-44(%rbp), %eax	# mode1, mode1.1379
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30732
	cmpl	$7, %eax	#, D.30732
	je	.L2855	#,
	.loc 1 11575 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# mode1, mode1.1380
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30732
	cmpl	$8, %eax	#, D.30732
	jne	.L2856	#,
.L2855:
	.loc 1 11576 0 is_stmt 1
	movl	-44(%rbp), %edx	# mode1, tmp101
	movq	-40(%rbp), %rax	# op1, tmp102
	movl	%edx, %esi	# tmp101,
	movq	%rax, %rdi	# tmp102,
	call	safe_vector_operand	#
	movq	%rax, -40(%rbp)	# tmp103, op1
.L2856:
	.loc 1 11578 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1382
	andl	$33554432, %eax	#, D.30733
	testl	%eax, %eax	# D.30733
	je	.L2857	#,
	.loc 1 11578 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1381
	jmp	.L2858	#
.L2857:
	.loc 1 11578 0 discriminator 2
	movl	$4, %eax	#, iftmp.1381
.L2858:
	.loc 1 11578 0 discriminator 3
	movq	-16(%rbp), %rdx	# op0, tmp104
	movq	%rdx, %rsi	# tmp104,
	movl	%eax, %edi	# iftmp.1381,
	call	copy_to_mode_reg	#
	movq	%rax, %rdx	#, D.30734
	movl	-48(%rbp), %eax	# mode0, tmp105
	movq	%rdx, %rsi	# D.30734,
	movl	%eax, %edi	# tmp105,
	call	gen_rtx_MEM	#
	movq	%rax, -16(%rbp)	# tmp106, op0
	.loc 1 11580 0 is_stmt 1 discriminator 3
	movl	-52(%rbp), %edx	# icode, tmp107
	movq	%rdx, %rax	# tmp107, tmp108
	salq	$2, %rax	#, tmp108
	addq	%rdx, %rax	# tmp107, tmp108
	salq	$3, %rax	#, tmp109
	addq	$insn_data+24, %rax	#, tmp110
	movq	(%rax), %rax	# insn_data[icode_10(D)].operand, D.30730
	addq	$24, %rax	#, D.30730
	movq	(%rax), %rax	# _30->predicate, D.30735
	movl	-44(%rbp), %ecx	# mode1, tmp111
	movq	-40(%rbp), %rdx	# op1, tmp112
	movl	%ecx, %esi	# tmp111,
	movq	%rdx, %rdi	# tmp112,
	call	*%rax	# D.30735
	testl	%eax, %eax	# D.30733
	jne	.L2859	#,
	.loc 1 11581 0
	movq	-40(%rbp), %rdx	# op1, tmp113
	movl	-44(%rbp), %eax	# mode1, tmp114
	movq	%rdx, %rsi	# tmp113,
	movl	%eax, %edi	# tmp114,
	call	copy_to_mode_reg	#
	movq	%rax, -40(%rbp)	# tmp115, op1
.L2859:
	.loc 1 11583 0
	movl	-52(%rbp), %eax	# icode, icode.1383
	movslq	%eax, %rdx	# icode.1383, tmp116
	movq	%rdx, %rax	# tmp116, tmp117
	salq	$2, %rax	#, tmp117
	addq	%rdx, %rax	# tmp116, tmp117
	salq	$3, %rax	#, tmp118
	addq	$insn_data+16, %rax	#, tmp119
	movq	(%rax), %rdx	# insn_data[icode.1383_34].genfun, D.30736
	movq	-40(%rbp), %rcx	# op1, tmp120
	movq	-16(%rbp), %rax	# op0, tmp121
	movq	%rcx, %rsi	# tmp120,
	movq	%rax, %rdi	# tmp121,
	movl	$0, %eax	#,
	call	*%rdx	# D.30736
	movq	%rax, -8(%rbp)	# tmp122, pat
	.loc 1 11584 0
	cmpq	$0, -8(%rbp)	#, pat
	je	.L2860	#,
	.loc 1 11585 0
	movq	-8(%rbp), %rax	# pat, tmp123
	movq	%rax, %rdi	# tmp123,
	call	emit_insn	#
.L2860:
	.loc 1 11586 0
	movl	$0, %eax	#, D.30737
	.loc 1 11587 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE181:
	.size	ix86_expand_store_builtin, .-ix86_expand_store_builtin
	.type	ix86_expand_unop_builtin, @function
ix86_expand_unop_builtin:
.LFB182:
	.loc 1 11597 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movl	%edi, -36(%rbp)	# icode, icode
	movq	%rsi, -48(%rbp)	# arglist, arglist
	movq	%rdx, -56(%rbp)	# target, target
	movl	%ecx, -40(%rbp)	# do_load, do_load
	.loc 1 11599 0
	movq	-48(%rbp), %rax	# arglist, tmp85
	movq	32(%rax), %rax	# arglist_6(D)->list.value, tmp86
	movq	%rax, -16(%rbp)	# tmp86, arg0
	.loc 1 11600 0
	movq	-16(%rbp), %rax	# arg0, tmp87
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	expand_expr	#
	movq	%rax, -24(%rbp)	# tmp88, op0
	.loc 1 11601 0
	movl	-36(%rbp), %edx	# icode, tmp89
	movq	%rdx, %rax	# tmp89, tmp90
	salq	$2, %rax	#, tmp90
	addq	%rdx, %rax	# tmp89, tmp90
	salq	$3, %rax	#, tmp91
	addq	$insn_data+24, %rax	#, tmp92
	movq	(%rax), %rax	# insn_data[icode_9(D)].operand, D.30739
	movzwl	16(%rax), %eax	# _10->mode, D.30740
	movzwl	%ax, %eax	# D.30740, tmp93
	movl	%eax, -32(%rbp)	# tmp93, tmode
	.loc 1 11602 0
	movl	-36(%rbp), %edx	# icode, tmp94
	movq	%rdx, %rax	# tmp94, tmp95
	salq	$2, %rax	#, tmp95
	addq	%rdx, %rax	# tmp94, tmp95
	salq	$3, %rax	#, tmp96
	addq	$insn_data+24, %rax	#, tmp97
	movq	(%rax), %rax	# insn_data[icode_9(D)].operand, D.30739
	addq	$24, %rax	#, D.30739
	movzwl	16(%rax), %eax	# _14->mode, D.30740
	movzwl	%ax, %eax	# D.30740, tmp98
	movl	%eax, -28(%rbp)	# tmp98, mode0
	.loc 1 11604 0
	cmpq	$0, -56(%rbp)	#, target
	je	.L2863	#,
	.loc 1 11605 0
	movq	-56(%rbp), %rax	# target, tmp99
	movzbl	2(%rax), %eax	# target_17(D)->mode, D.30741
	movzbl	%al, %eax	# D.30741, D.30742
	cmpl	-32(%rbp), %eax	# tmode, D.30742
	jne	.L2863	#,
	.loc 1 11606 0
	movl	-36(%rbp), %edx	# icode, tmp100
	movq	%rdx, %rax	# tmp100, tmp101
	salq	$2, %rax	#, tmp101
	addq	%rdx, %rax	# tmp100, tmp101
	salq	$3, %rax	#, tmp102
	addq	$insn_data+24, %rax	#, tmp103
	movq	(%rax), %rax	# insn_data[icode_9(D)].operand, D.30739
	movq	(%rax), %rax	# _20->predicate, D.30743
	movl	-32(%rbp), %ecx	# tmode, tmp104
	movq	-56(%rbp), %rdx	# target, tmp105
	movl	%ecx, %esi	# tmp104,
	movq	%rdx, %rdi	# tmp105,
	call	*%rax	# D.30743
	testl	%eax, %eax	# D.30744
	jne	.L2864	#,
.L2863:
	.loc 1 11607 0
	movl	-32(%rbp), %eax	# tmode, tmp106
	movl	%eax, %edi	# tmp106,
	call	gen_reg_rtx	#
	movq	%rax, -56(%rbp)	# tmp107, target
.L2864:
	.loc 1 11608 0
	cmpl	$0, -40(%rbp)	#, do_load
	je	.L2865	#,
	.loc 1 11609 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1385
	andl	$33554432, %eax	#, D.30744
	testl	%eax, %eax	# D.30744
	je	.L2866	#,
	.loc 1 11609 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1384
	jmp	.L2867	#
.L2866:
	.loc 1 11609 0 discriminator 2
	movl	$4, %eax	#, iftmp.1384
.L2867:
	.loc 1 11609 0 discriminator 1
	movq	-24(%rbp), %rdx	# op0, tmp108
	movq	%rdx, %rsi	# tmp108,
	movl	%eax, %edi	# iftmp.1384,
	call	copy_to_mode_reg	#
	movq	%rax, %rdx	#, D.30745
	movl	-28(%rbp), %eax	# mode0, tmp109
	movq	%rdx, %rsi	# D.30745,
	movl	%eax, %edi	# tmp109,
	call	gen_rtx_MEM	#
	movq	%rax, -24(%rbp)	# tmp110, op0
	jmp	.L2868	#
.L2865:
	.loc 1 11612 0 is_stmt 1
	movl	-28(%rbp), %eax	# mode0, mode0.1386
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30746
	cmpl	$7, %eax	#, D.30746
	je	.L2869	#,
	.loc 1 11612 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# mode0, mode0.1387
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30746
	cmpl	$8, %eax	#, D.30746
	jne	.L2870	#,
.L2869:
	.loc 1 11613 0 is_stmt 1
	movl	-28(%rbp), %edx	# mode0, tmp113
	movq	-24(%rbp), %rax	# op0, tmp114
	movl	%edx, %esi	# tmp113,
	movq	%rax, %rdi	# tmp114,
	call	safe_vector_operand	#
	movq	%rax, -24(%rbp)	# tmp115, op0
.L2870:
	.loc 1 11615 0
	movl	-36(%rbp), %edx	# icode, tmp116
	movq	%rdx, %rax	# tmp116, tmp117
	salq	$2, %rax	#, tmp117
	addq	%rdx, %rax	# tmp116, tmp117
	salq	$3, %rax	#, tmp118
	addq	$insn_data+24, %rax	#, tmp119
	movq	(%rax), %rax	# insn_data[icode_9(D)].operand, D.30739
	addq	$24, %rax	#, D.30739
	movq	(%rax), %rax	# _37->predicate, D.30743
	movl	-28(%rbp), %ecx	# mode0, tmp120
	movq	-24(%rbp), %rdx	# op0, tmp121
	movl	%ecx, %esi	# tmp120,
	movq	%rdx, %rdi	# tmp121,
	call	*%rax	# D.30743
	testl	%eax, %eax	# D.30744
	jne	.L2868	#,
	.loc 1 11616 0
	movq	-24(%rbp), %rdx	# op0, tmp122
	movl	-28(%rbp), %eax	# mode0, tmp123
	movq	%rdx, %rsi	# tmp122,
	movl	%eax, %edi	# tmp123,
	call	copy_to_mode_reg	#
	movq	%rax, -24(%rbp)	# tmp124, op0
.L2868:
	.loc 1 11619 0
	movl	-36(%rbp), %eax	# icode, icode.1388
	movslq	%eax, %rdx	# icode.1388, tmp125
	movq	%rdx, %rax	# tmp125, tmp126
	salq	$2, %rax	#, tmp126
	addq	%rdx, %rax	# tmp125, tmp126
	salq	$3, %rax	#, tmp127
	addq	$insn_data+16, %rax	#, tmp128
	movq	(%rax), %rdx	# insn_data[icode.1388_41].genfun, D.30747
	movq	-24(%rbp), %rcx	# op0, tmp129
	movq	-56(%rbp), %rax	# target, tmp130
	movq	%rcx, %rsi	# tmp129,
	movq	%rax, %rdi	# tmp130,
	movl	$0, %eax	#,
	call	*%rdx	# D.30747
	movq	%rax, -8(%rbp)	# tmp131, pat
	.loc 1 11620 0
	cmpq	$0, -8(%rbp)	#, pat
	jne	.L2871	#,
	.loc 1 11621 0
	movl	$0, %eax	#, D.30738
	jmp	.L2872	#
.L2871:
	.loc 1 11622 0
	movq	-8(%rbp), %rax	# pat, tmp132
	movq	%rax, %rdi	# tmp132,
	call	emit_insn	#
	.loc 1 11623 0
	movq	-56(%rbp), %rax	# target, D.30738
.L2872:
	.loc 1 11624 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE182:
	.size	ix86_expand_unop_builtin, .-ix86_expand_unop_builtin
	.type	ix86_expand_unop1_builtin, @function
ix86_expand_unop1_builtin:
.LFB183:
	.loc 1 11634 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movl	%edi, -52(%rbp)	# icode, icode
	movq	%rsi, -64(%rbp)	# arglist, arglist
	movq	%rdx, -72(%rbp)	# target, target
	.loc 1 11636 0
	movq	-64(%rbp), %rax	# arglist, tmp85
	movq	32(%rax), %rax	# arglist_6(D)->list.value, tmp86
	movq	%rax, -16(%rbp)	# tmp86, arg0
	.loc 1 11637 0
	movq	-16(%rbp), %rax	# arg0, tmp87
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	expand_expr	#
	movq	%rax, -24(%rbp)	# tmp88, op0
	.loc 1 11638 0
	movl	-52(%rbp), %edx	# icode, tmp89
	movq	%rdx, %rax	# tmp89, tmp90
	salq	$2, %rax	#, tmp90
	addq	%rdx, %rax	# tmp89, tmp90
	salq	$3, %rax	#, tmp91
	addq	$insn_data+24, %rax	#, tmp92
	movq	(%rax), %rax	# insn_data[icode_9(D)].operand, D.30749
	movzwl	16(%rax), %eax	# _10->mode, D.30750
	movzwl	%ax, %eax	# D.30750, tmp93
	movl	%eax, -40(%rbp)	# tmp93, tmode
	.loc 1 11639 0
	movl	-52(%rbp), %edx	# icode, tmp94
	movq	%rdx, %rax	# tmp94, tmp95
	salq	$2, %rax	#, tmp95
	addq	%rdx, %rax	# tmp94, tmp95
	salq	$3, %rax	#, tmp96
	addq	$insn_data+24, %rax	#, tmp97
	movq	(%rax), %rax	# insn_data[icode_9(D)].operand, D.30749
	addq	$24, %rax	#, D.30749
	movzwl	16(%rax), %eax	# _14->mode, D.30750
	movzwl	%ax, %eax	# D.30750, tmp98
	movl	%eax, -36(%rbp)	# tmp98, mode0
	.loc 1 11641 0
	cmpq	$0, -72(%rbp)	#, target
	je	.L2874	#,
	.loc 1 11642 0
	movq	-72(%rbp), %rax	# target, tmp99
	movzbl	2(%rax), %eax	# target_17(D)->mode, D.30751
	movzbl	%al, %eax	# D.30751, D.30752
	cmpl	-40(%rbp), %eax	# tmode, D.30752
	jne	.L2874	#,
	.loc 1 11643 0
	movl	-52(%rbp), %edx	# icode, tmp100
	movq	%rdx, %rax	# tmp100, tmp101
	salq	$2, %rax	#, tmp101
	addq	%rdx, %rax	# tmp100, tmp101
	salq	$3, %rax	#, tmp102
	addq	$insn_data+24, %rax	#, tmp103
	movq	(%rax), %rax	# insn_data[icode_9(D)].operand, D.30749
	movq	(%rax), %rax	# _20->predicate, D.30753
	movl	-40(%rbp), %ecx	# tmode, tmp104
	movq	-72(%rbp), %rdx	# target, tmp105
	movl	%ecx, %esi	# tmp104,
	movq	%rdx, %rdi	# tmp105,
	call	*%rax	# D.30753
	testl	%eax, %eax	# D.30754
	jne	.L2875	#,
.L2874:
	.loc 1 11644 0
	movl	-40(%rbp), %eax	# tmode, tmp106
	movl	%eax, %edi	# tmp106,
	call	gen_reg_rtx	#
	movq	%rax, -72(%rbp)	# tmp107, target
.L2875:
	.loc 1 11646 0
	movl	-36(%rbp), %eax	# mode0, mode0.1389
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30755
	cmpl	$7, %eax	#, D.30755
	je	.L2876	#,
	.loc 1 11646 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %eax	# mode0, mode0.1390
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30755
	cmpl	$8, %eax	#, D.30755
	jne	.L2877	#,
.L2876:
	.loc 1 11647 0 is_stmt 1
	movl	-36(%rbp), %edx	# mode0, tmp110
	movq	-24(%rbp), %rax	# op0, tmp111
	movl	%edx, %esi	# tmp110,
	movq	%rax, %rdi	# tmp111,
	call	safe_vector_operand	#
	movq	%rax, -24(%rbp)	# tmp112, op0
.L2877:
	.loc 1 11649 0
	movl	-52(%rbp), %edx	# icode, tmp113
	movq	%rdx, %rax	# tmp113, tmp114
	salq	$2, %rax	#, tmp114
	addq	%rdx, %rax	# tmp113, tmp114
	salq	$3, %rax	#, tmp115
	addq	$insn_data+24, %rax	#, tmp116
	movq	(%rax), %rax	# insn_data[icode_9(D)].operand, D.30749
	addq	$24, %rax	#, D.30749
	movq	(%rax), %rax	# _30->predicate, D.30753
	movl	-36(%rbp), %ecx	# mode0, tmp117
	movq	-24(%rbp), %rdx	# op0, tmp118
	movl	%ecx, %esi	# tmp117,
	movq	%rdx, %rdi	# tmp118,
	call	*%rax	# D.30753
	testl	%eax, %eax	# D.30754
	jne	.L2878	#,
	.loc 1 11650 0
	movq	-24(%rbp), %rdx	# op0, tmp119
	movl	-36(%rbp), %eax	# mode0, tmp120
	movq	%rdx, %rsi	# tmp119,
	movl	%eax, %edi	# tmp120,
	call	copy_to_mode_reg	#
	movq	%rax, -24(%rbp)	# tmp121, op0
.L2878:
	.loc 1 11652 0
	movq	-24(%rbp), %rax	# op0, tmp122
	movq	%rax, -32(%rbp)	# tmp122, op1
	.loc 1 11653 0
	movl	-52(%rbp), %edx	# icode, tmp123
	movq	%rdx, %rax	# tmp123, tmp124
	salq	$2, %rax	#, tmp124
	addq	%rdx, %rax	# tmp123, tmp124
	salq	$3, %rax	#, tmp125
	addq	$insn_data+24, %rax	#, tmp126
	movq	(%rax), %rax	# insn_data[icode_9(D)].operand, D.30749
	addq	$48, %rax	#, D.30749
	movq	(%rax), %rax	# _36->predicate, D.30753
	movl	-36(%rbp), %ecx	# mode0, tmp127
	movq	-32(%rbp), %rdx	# op1, tmp128
	movl	%ecx, %esi	# tmp127,
	movq	%rdx, %rdi	# tmp128,
	call	*%rax	# D.30753
	testl	%eax, %eax	# D.30754
	jne	.L2879	#,
	.loc 1 11654 0
	movq	-32(%rbp), %rdx	# op1, tmp129
	movl	-36(%rbp), %eax	# mode0, tmp130
	movq	%rdx, %rsi	# tmp129,
	movl	%eax, %edi	# tmp130,
	call	copy_to_mode_reg	#
	movq	%rax, -32(%rbp)	# tmp131, op1
.L2879:
	.loc 1 11656 0
	movl	-52(%rbp), %eax	# icode, icode.1391
	movslq	%eax, %rdx	# icode.1391, tmp132
	movq	%rdx, %rax	# tmp132, tmp133
	salq	$2, %rax	#, tmp133
	addq	%rdx, %rax	# tmp132, tmp133
	salq	$3, %rax	#, tmp134
	addq	$insn_data+16, %rax	#, tmp135
	movq	(%rax), %rcx	# insn_data[icode.1391_40].genfun, D.30756
	movq	-32(%rbp), %rdx	# op1, tmp136
	movq	-24(%rbp), %rsi	# op0, tmp137
	movq	-72(%rbp), %rax	# target, tmp138
	movq	%rax, %rdi	# tmp138,
	movl	$0, %eax	#,
	call	*%rcx	# D.30756
	movq	%rax, -8(%rbp)	# tmp139, pat
	.loc 1 11657 0
	cmpq	$0, -8(%rbp)	#, pat
	jne	.L2880	#,
	.loc 1 11658 0
	movl	$0, %eax	#, D.30748
	jmp	.L2881	#
.L2880:
	.loc 1 11659 0
	movq	-8(%rbp), %rax	# pat, tmp140
	movq	%rax, %rdi	# tmp140,
	call	emit_insn	#
	.loc 1 11660 0
	movq	-72(%rbp), %rax	# target, D.30748
.L2881:
	.loc 1 11661 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE183:
	.size	ix86_expand_unop1_builtin, .-ix86_expand_unop1_builtin
	.type	ix86_expand_sse_compare, @function
ix86_expand_sse_compare:
.LFB184:
	.loc 1 11670 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$112, %rsp	#,
	movq	%rdi, -88(%rbp)	# d, d
	movq	%rsi, -96(%rbp)	# arglist, arglist
	movq	%rdx, -104(%rbp)	# target, target
	.loc 1 11672 0
	movq	-96(%rbp), %rax	# arglist, tmp101
	movq	32(%rax), %rax	# arglist_9(D)->list.value, tmp102
	movq	%rax, -40(%rbp)	# tmp102, arg0
	.loc 1 11673 0
	movq	-96(%rbp), %rax	# arglist, tmp103
	movq	(%rax), %rax	# arglist_9(D)->common.chain, D.30758
	movq	32(%rax), %rax	# _11->list.value, tmp104
	movq	%rax, -32(%rbp)	# tmp104, arg1
	.loc 1 11674 0
	movq	-40(%rbp), %rax	# arg0, tmp105
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp105,
	call	expand_expr	#
	movq	%rax, -56(%rbp)	# tmp106, op0
	.loc 1 11675 0
	movq	-32(%rbp), %rax	# arg1, tmp107
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp107,
	call	expand_expr	#
	movq	%rax, -48(%rbp)	# tmp108, op1
	.loc 1 11677 0
	movq	-88(%rbp), %rax	# d, tmp109
	movl	4(%rax), %eax	# d_15(D)->icode, D.30759
	movl	%eax, %edx	# D.30759, tmp110
	movq	%rdx, %rax	# tmp110, tmp111
	salq	$2, %rax	#, tmp111
	addq	%rdx, %rax	# tmp110, tmp111
	salq	$3, %rax	#, tmp112
	addq	$insn_data+24, %rax	#, tmp113
	movq	(%rax), %rax	# insn_data[_16].operand, D.30760
	movzwl	16(%rax), %eax	# _17->mode, D.30761
	movzwl	%ax, %eax	# D.30761, tmp114
	movl	%eax, -72(%rbp)	# tmp114, tmode
	.loc 1 11678 0
	movq	-88(%rbp), %rax	# d, tmp115
	movl	4(%rax), %eax	# d_15(D)->icode, D.30759
	movl	%eax, %edx	# D.30759, tmp116
	movq	%rdx, %rax	# tmp116, tmp117
	salq	$2, %rax	#, tmp117
	addq	%rdx, %rax	# tmp116, tmp117
	salq	$3, %rax	#, tmp118
	addq	$insn_data+24, %rax	#, tmp119
	movq	(%rax), %rax	# insn_data[_20].operand, D.30760
	addq	$24, %rax	#, D.30760
	movzwl	16(%rax), %eax	# _22->mode, D.30761
	movzwl	%ax, %eax	# D.30761, tmp120
	movl	%eax, -68(%rbp)	# tmp120, mode0
	.loc 1 11679 0
	movq	-88(%rbp), %rax	# d, tmp121
	movl	4(%rax), %eax	# d_15(D)->icode, D.30759
	movl	%eax, %edx	# D.30759, tmp122
	movq	%rdx, %rax	# tmp122, tmp123
	salq	$2, %rax	#, tmp123
	addq	%rdx, %rax	# tmp122, tmp123
	salq	$3, %rax	#, tmp124
	addq	$insn_data+24, %rax	#, tmp125
	movq	(%rax), %rax	# insn_data[_25].operand, D.30760
	addq	$48, %rax	#, D.30760
	movzwl	16(%rax), %eax	# _27->mode, D.30761
	movzwl	%ax, %eax	# D.30761, tmp126
	movl	%eax, -64(%rbp)	# tmp126, mode1
	.loc 1 11680 0
	movq	-88(%rbp), %rax	# d, tmp127
	movl	20(%rax), %eax	# d_15(D)->comparison, tmp128
	movl	%eax, -60(%rbp)	# tmp128, comparison
	.loc 1 11682 0
	movl	-68(%rbp), %eax	# mode0, mode0.1392
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30762
	cmpl	$7, %eax	#, D.30762
	je	.L2883	#,
	.loc 1 11682 0 is_stmt 0 discriminator 1
	movl	-68(%rbp), %eax	# mode0, mode0.1393
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30762
	cmpl	$8, %eax	#, D.30762
	jne	.L2884	#,
.L2883:
	.loc 1 11683 0 is_stmt 1
	movl	-68(%rbp), %edx	# mode0, tmp131
	movq	-56(%rbp), %rax	# op0, tmp132
	movl	%edx, %esi	# tmp131,
	movq	%rax, %rdi	# tmp132,
	call	safe_vector_operand	#
	movq	%rax, -56(%rbp)	# tmp133, op0
.L2884:
	.loc 1 11684 0
	movl	-64(%rbp), %eax	# mode1, mode1.1394
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30762
	cmpl	$7, %eax	#, D.30762
	je	.L2885	#,
	.loc 1 11684 0 is_stmt 0 discriminator 1
	movl	-64(%rbp), %eax	# mode1, mode1.1395
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30762
	cmpl	$8, %eax	#, D.30762
	jne	.L2886	#,
.L2885:
	.loc 1 11685 0 is_stmt 1
	movl	-64(%rbp), %edx	# mode1, tmp136
	movq	-48(%rbp), %rax	# op1, tmp137
	movl	%edx, %esi	# tmp136,
	movq	%rax, %rdi	# tmp137,
	call	safe_vector_operand	#
	movq	%rax, -48(%rbp)	# tmp138, op1
.L2886:
	.loc 1 11689 0
	movq	-88(%rbp), %rax	# d, tmp139
	movl	24(%rax), %eax	# d_15(D)->flag, D.30763
	testl	%eax, %eax	# D.30763
	je	.L2887	#,
.LBB125:
	.loc 1 11691 0
	movl	-64(%rbp), %eax	# mode1, tmp140
	movl	%eax, %edi	# tmp140,
	call	gen_reg_rtx	#
	movq	%rax, -24(%rbp)	# tmp141, tmp
	.loc 1 11692 0
	movq	-48(%rbp), %rdx	# op1, tmp142
	movq	-24(%rbp), %rax	# tmp, tmp143
	movq	%rdx, %rsi	# tmp142,
	movq	%rax, %rdi	# tmp143,
	call	emit_move_insn	#
	.loc 1 11693 0
	movq	-56(%rbp), %rax	# op0, tmp144
	movq	%rax, -48(%rbp)	# tmp144, op1
	.loc 1 11694 0
	movq	-24(%rbp), %rax	# tmp, tmp145
	movq	%rax, -56(%rbp)	# tmp145, op0
.L2887:
.LBE125:
	.loc 1 11697 0
	cmpq	$0, -104(%rbp)	#, target
	je	.L2888	#,
	.loc 1 11698 0
	movq	-104(%rbp), %rax	# target, tmp146
	movzbl	2(%rax), %eax	# target_45(D)->mode, D.30764
	movzbl	%al, %eax	# D.30764, D.30763
	cmpl	-72(%rbp), %eax	# tmode, D.30763
	jne	.L2888	#,
	.loc 1 11699 0
	movq	-88(%rbp), %rax	# d, tmp147
	movl	4(%rax), %eax	# d_15(D)->icode, D.30759
	movl	%eax, %edx	# D.30759, tmp148
	movq	%rdx, %rax	# tmp148, tmp149
	salq	$2, %rax	#, tmp149
	addq	%rdx, %rax	# tmp148, tmp149
	salq	$3, %rax	#, tmp150
	addq	$insn_data+24, %rax	#, tmp151
	movq	(%rax), %rax	# insn_data[_48].operand, D.30760
	movq	(%rax), %rax	# _49->predicate, D.30765
	movl	-72(%rbp), %ecx	# tmode, tmp152
	movq	-104(%rbp), %rdx	# target, tmp153
	movl	%ecx, %esi	# tmp152,
	movq	%rdx, %rdi	# tmp153,
	call	*%rax	# D.30765
	testl	%eax, %eax	# D.30766
	jne	.L2889	#,
.L2888:
	.loc 1 11700 0
	movl	-72(%rbp), %eax	# tmode, tmp154
	movl	%eax, %edi	# tmp154,
	call	gen_reg_rtx	#
	movq	%rax, -104(%rbp)	# tmp155, target
.L2889:
	.loc 1 11702 0
	movq	-88(%rbp), %rax	# d, tmp156
	movl	4(%rax), %eax	# d_15(D)->icode, D.30759
	movl	%eax, %edx	# D.30759, tmp157
	movq	%rdx, %rax	# tmp157, tmp158
	salq	$2, %rax	#, tmp158
	addq	%rdx, %rax	# tmp157, tmp158
	salq	$3, %rax	#, tmp159
	addq	$insn_data+24, %rax	#, tmp160
	movq	(%rax), %rax	# insn_data[_53].operand, D.30760
	addq	$24, %rax	#, D.30760
	movq	(%rax), %rax	# _55->predicate, D.30765
	movl	-68(%rbp), %ecx	# mode0, tmp161
	movq	-56(%rbp), %rdx	# op0, tmp162
	movl	%ecx, %esi	# tmp161,
	movq	%rdx, %rdi	# tmp162,
	call	*%rax	# D.30765
	testl	%eax, %eax	# D.30766
	jne	.L2890	#,
	.loc 1 11703 0
	movq	-56(%rbp), %rdx	# op0, tmp163
	movl	-68(%rbp), %eax	# mode0, tmp164
	movq	%rdx, %rsi	# tmp163,
	movl	%eax, %edi	# tmp164,
	call	copy_to_mode_reg	#
	movq	%rax, -56(%rbp)	# tmp165, op0
.L2890:
	.loc 1 11704 0
	movq	-88(%rbp), %rax	# d, tmp166
	movl	4(%rax), %eax	# d_15(D)->icode, D.30759
	movl	%eax, %edx	# D.30759, tmp167
	movq	%rdx, %rax	# tmp167, tmp168
	salq	$2, %rax	#, tmp168
	addq	%rdx, %rax	# tmp167, tmp168
	salq	$3, %rax	#, tmp169
	addq	$insn_data+24, %rax	#, tmp170
	movq	(%rax), %rax	# insn_data[_59].operand, D.30760
	addq	$48, %rax	#, D.30760
	movq	(%rax), %rax	# _61->predicate, D.30765
	movl	-64(%rbp), %ecx	# mode1, tmp171
	movq	-48(%rbp), %rdx	# op1, tmp172
	movl	%ecx, %esi	# tmp171,
	movq	%rdx, %rdi	# tmp172,
	call	*%rax	# D.30765
	testl	%eax, %eax	# D.30766
	jne	.L2891	#,
	.loc 1 11705 0
	movq	-48(%rbp), %rdx	# op1, tmp173
	movl	-64(%rbp), %eax	# mode1, tmp174
	movq	%rdx, %rsi	# tmp173,
	movl	%eax, %edi	# tmp174,
	call	copy_to_mode_reg	#
	movq	%rax, -48(%rbp)	# tmp175, op1
.L2891:
	.loc 1 11707 0
	movq	-48(%rbp), %rcx	# op1, tmp176
	movq	-56(%rbp), %rdx	# op0, tmp177
	movl	-68(%rbp), %esi	# mode0, tmp178
	movl	-60(%rbp), %eax	# comparison, tmp179
	movl	%eax, %edi	# tmp179,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -16(%rbp)	# tmp180, op2
	.loc 1 11708 0
	movq	-88(%rbp), %rax	# d, tmp181
	movl	4(%rax), %eax	# d_15(D)->icode, D.30759
	movslq	%eax, %rdx	# D.30766, tmp182
	movq	%rdx, %rax	# tmp182, tmp183
	salq	$2, %rax	#, tmp183
	addq	%rdx, %rax	# tmp182, tmp183
	salq	$3, %rax	#, tmp184
	addq	$insn_data+16, %rax	#, tmp185
	movq	(%rax), %r8	# insn_data[_67].genfun, D.30767
	movq	-16(%rbp), %rcx	# op2, tmp186
	movq	-48(%rbp), %rdx	# op1, tmp187
	movq	-56(%rbp), %rsi	# op0, tmp188
	movq	-104(%rbp), %rax	# target, tmp189
	movq	%rax, %rdi	# tmp189,
	movl	$0, %eax	#,
	call	*%r8	# D.30767
	movq	%rax, -8(%rbp)	# tmp190, pat
	.loc 1 11709 0
	cmpq	$0, -8(%rbp)	#, pat
	jne	.L2892	#,
	.loc 1 11710 0
	movl	$0, %eax	#, D.30757
	jmp	.L2893	#
.L2892:
	.loc 1 11711 0
	movq	-8(%rbp), %rax	# pat, tmp191
	movq	%rax, %rdi	# tmp191,
	call	emit_insn	#
	.loc 1 11712 0
	movq	-104(%rbp), %rax	# target, D.30757
.L2893:
	.loc 1 11713 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE184:
	.size	ix86_expand_sse_compare, .-ix86_expand_sse_compare
	.type	ix86_expand_sse_comi, @function
ix86_expand_sse_comi:
.LFB185:
	.loc 1 11722 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# d, d
	movq	%rsi, -112(%rbp)	# arglist, arglist
	movq	%rdx, -120(%rbp)	# target, target
	.loc 1 11724 0
	movq	-112(%rbp), %rax	# arglist, tmp96
	movq	32(%rax), %rax	# arglist_8(D)->list.value, tmp97
	movq	%rax, -64(%rbp)	# tmp97, arg0
	.loc 1 11725 0
	movq	-112(%rbp), %rax	# arglist, tmp98
	movq	(%rax), %rax	# arglist_8(D)->common.chain, D.30769
	movq	32(%rax), %rax	# _10->list.value, tmp99
	movq	%rax, -56(%rbp)	# tmp99, arg1
	.loc 1 11726 0
	movq	-64(%rbp), %rax	# arg0, tmp100
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp100,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp101, op0
	.loc 1 11727 0
	movq	-56(%rbp), %rax	# arg1, tmp102
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp102,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp103, op1
	.loc 1 11729 0
	movq	-104(%rbp), %rax	# d, tmp104
	movl	4(%rax), %eax	# d_14(D)->icode, D.30770
	movl	%eax, %edx	# D.30770, tmp105
	movq	%rdx, %rax	# tmp105, tmp106
	salq	$2, %rax	#, tmp106
	addq	%rdx, %rax	# tmp105, tmp106
	salq	$3, %rax	#, tmp107
	addq	$insn_data+24, %rax	#, tmp108
	movq	(%rax), %rax	# insn_data[_15].operand, D.30771
	movzwl	16(%rax), %eax	# _16->mode, D.30772
	movzwl	%ax, %eax	# D.30772, tmp109
	movl	%eax, -92(%rbp)	# tmp109, mode0
	.loc 1 11730 0
	movq	-104(%rbp), %rax	# d, tmp110
	movl	4(%rax), %eax	# d_14(D)->icode, D.30770
	movl	%eax, %edx	# D.30770, tmp111
	movq	%rdx, %rax	# tmp111, tmp112
	salq	$2, %rax	#, tmp112
	addq	%rdx, %rax	# tmp111, tmp112
	salq	$3, %rax	#, tmp113
	addq	$insn_data+24, %rax	#, tmp114
	movq	(%rax), %rax	# insn_data[_19].operand, D.30771
	addq	$24, %rax	#, D.30771
	movzwl	16(%rax), %eax	# _21->mode, D.30772
	movzwl	%ax, %eax	# D.30772, tmp115
	movl	%eax, -88(%rbp)	# tmp115, mode1
	.loc 1 11731 0
	movq	-104(%rbp), %rax	# d, tmp116
	movl	20(%rax), %eax	# d_14(D)->comparison, tmp117
	movl	%eax, -84(%rbp)	# tmp117, comparison
	.loc 1 11733 0
	movl	-92(%rbp), %eax	# mode0, mode0.1396
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30773
	cmpl	$7, %eax	#, D.30773
	je	.L2895	#,
	.loc 1 11733 0 is_stmt 0 discriminator 1
	movl	-92(%rbp), %eax	# mode0, mode0.1397
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30773
	cmpl	$8, %eax	#, D.30773
	jne	.L2896	#,
.L2895:
	.loc 1 11734 0 is_stmt 1
	movl	-92(%rbp), %edx	# mode0, tmp120
	movq	-80(%rbp), %rax	# op0, tmp121
	movl	%edx, %esi	# tmp120,
	movq	%rax, %rdi	# tmp121,
	call	safe_vector_operand	#
	movq	%rax, -80(%rbp)	# tmp122, op0
.L2896:
	.loc 1 11735 0
	movl	-88(%rbp), %eax	# mode1, mode1.1398
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30773
	cmpl	$7, %eax	#, D.30773
	je	.L2897	#,
	.loc 1 11735 0 is_stmt 0 discriminator 1
	movl	-88(%rbp), %eax	# mode1, mode1.1399
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30773
	cmpl	$8, %eax	#, D.30773
	jne	.L2898	#,
.L2897:
	.loc 1 11736 0 is_stmt 1
	movl	-88(%rbp), %edx	# mode1, tmp125
	movq	-72(%rbp), %rax	# op1, tmp126
	movl	%edx, %esi	# tmp125,
	movq	%rax, %rdi	# tmp126,
	call	safe_vector_operand	#
	movq	%rax, -72(%rbp)	# tmp127, op1
.L2898:
	.loc 1 11740 0
	movq	-104(%rbp), %rax	# d, tmp128
	movl	24(%rax), %eax	# d_14(D)->flag, D.30774
	testl	%eax, %eax	# D.30774
	je	.L2899	#,
.LBB126:
	.loc 1 11742 0
	movq	-72(%rbp), %rax	# op1, tmp129
	movq	%rax, -48(%rbp)	# tmp129, tmp
	.loc 1 11743 0
	movq	-80(%rbp), %rax	# op0, tmp130
	movq	%rax, -72(%rbp)	# tmp130, op1
	.loc 1 11744 0
	movq	-48(%rbp), %rax	# tmp, tmp131
	movq	%rax, -80(%rbp)	# tmp131, op0
.L2899:
.LBE126:
	.loc 1 11747 0
	movl	$4, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -40(%rbp)	# tmp132, target
	.loc 1 11748 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.30775
	movq	-40(%rbp), %rax	# target, tmp133
	movq	%rdx, %rsi	# D.30775,
	movq	%rax, %rdi	# tmp133,
	call	emit_move_insn	#
	.loc 1 11749 0
	movq	-40(%rbp), %rax	# target, tmp134
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp134,
	movl	$2, %edi	#,
	call	gen_rtx_SUBREG	#
	movq	%rax, -40(%rbp)	# tmp135, target
	.loc 1 11751 0
	movq	-104(%rbp), %rax	# d, tmp136
	movl	4(%rax), %eax	# d_14(D)->icode, D.30770
	movl	%eax, %edx	# D.30770, tmp137
	movq	%rdx, %rax	# tmp137, tmp138
	salq	$2, %rax	#, tmp138
	addq	%rdx, %rax	# tmp137, tmp138
	salq	$3, %rax	#, tmp139
	addq	$insn_data+24, %rax	#, tmp140
	movq	(%rax), %rax	# insn_data[_42].operand, D.30771
	movq	(%rax), %rax	# _43->predicate, D.30776
	movl	-92(%rbp), %ecx	# mode0, tmp141
	movq	-80(%rbp), %rdx	# op0, tmp142
	movl	%ecx, %esi	# tmp141,
	movq	%rdx, %rdi	# tmp142,
	call	*%rax	# D.30776
	testl	%eax, %eax	# D.30777
	jne	.L2900	#,
	.loc 1 11752 0
	movq	-80(%rbp), %rdx	# op0, tmp143
	movl	-92(%rbp), %eax	# mode0, tmp144
	movq	%rdx, %rsi	# tmp143,
	movl	%eax, %edi	# tmp144,
	call	copy_to_mode_reg	#
	movq	%rax, -80(%rbp)	# tmp145, op0
.L2900:
	.loc 1 11753 0
	movq	-104(%rbp), %rax	# d, tmp146
	movl	4(%rax), %eax	# d_14(D)->icode, D.30770
	movl	%eax, %edx	# D.30770, tmp147
	movq	%rdx, %rax	# tmp147, tmp148
	salq	$2, %rax	#, tmp148
	addq	%rdx, %rax	# tmp147, tmp148
	salq	$3, %rax	#, tmp149
	addq	$insn_data+24, %rax	#, tmp150
	movq	(%rax), %rax	# insn_data[_47].operand, D.30771
	addq	$24, %rax	#, D.30771
	movq	(%rax), %rax	# _49->predicate, D.30776
	movl	-88(%rbp), %ecx	# mode1, tmp151
	movq	-72(%rbp), %rdx	# op1, tmp152
	movl	%ecx, %esi	# tmp151,
	movq	%rdx, %rdi	# tmp152,
	call	*%rax	# D.30776
	testl	%eax, %eax	# D.30777
	jne	.L2901	#,
	.loc 1 11754 0
	movq	-72(%rbp), %rdx	# op1, tmp153
	movl	-88(%rbp), %eax	# mode1, tmp154
	movq	%rdx, %rsi	# tmp153,
	movl	%eax, %edi	# tmp154,
	call	copy_to_mode_reg	#
	movq	%rax, -72(%rbp)	# tmp155, op1
.L2901:
	.loc 1 11756 0
	movq	-72(%rbp), %rcx	# op1, tmp156
	movq	-80(%rbp), %rdx	# op0, tmp157
	movl	-92(%rbp), %esi	# mode0, tmp158
	movl	-84(%rbp), %eax	# comparison, tmp159
	movl	%eax, %edi	# tmp159,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -32(%rbp)	# tmp160, op2
	.loc 1 11757 0
	movq	-104(%rbp), %rax	# d, tmp161
	movl	4(%rax), %eax	# d_14(D)->icode, D.30770
	movslq	%eax, %rdx	# D.30777, tmp162
	movq	%rdx, %rax	# tmp162, tmp163
	salq	$2, %rax	#, tmp163
	addq	%rdx, %rax	# tmp162, tmp163
	salq	$3, %rax	#, tmp164
	addq	$insn_data+16, %rax	#, tmp165
	movq	(%rax), %rcx	# insn_data[_55].genfun, D.30778
	movq	-32(%rbp), %rdx	# op2, tmp166
	movq	-72(%rbp), %rsi	# op1, tmp167
	movq	-80(%rbp), %rax	# op0, tmp168
	movq	%rax, %rdi	# tmp168,
	movl	$0, %eax	#,
	call	*%rcx	# D.30778
	movq	%rax, -24(%rbp)	# tmp169, pat
	.loc 1 11758 0
	cmpq	$0, -24(%rbp)	#, pat
	jne	.L2902	#,
	.loc 1 11759 0
	movl	$0, %eax	#, D.30768
	jmp	.L2903	#
.L2902:
	.loc 1 11760 0
	movq	-24(%rbp), %rax	# pat, tmp170
	movq	%rax, %rdi	# tmp170,
	call	emit_insn	#
	.loc 1 11761 0
	movq	const_int_rtx+512(%rip), %rbx	# const_int_rtx, D.30775
	movl	$17, %esi	#,
	movl	$52, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.30775
	movl	-84(%rbp), %eax	# comparison, tmp171
	movq	%rbx, %rcx	# D.30775,
	movl	$2, %esi	#,
	movl	%eax, %edi	# tmp171,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rbx	#, D.30775
	movq	-40(%rbp), %rax	# target, tmp172
	movq	%rax, %rdx	# tmp172,
	movl	$0, %esi	#,
	movl	$64, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rbx, %rcx	# D.30775,
	movq	%rax, %rdx	# D.30775,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30775,
	call	emit_insn	#
	.loc 1 11767 0
	movq	-40(%rbp), %rax	# target, tmp173
	movq	8(%rax), %rax	# target_41->fld[0].rtx, D.30768
.L2903:
	.loc 1 11768 0
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE185:
	.size	ix86_expand_sse_comi, .-ix86_expand_sse_comi
	.section	.rodata
.LC442:
	.string	"selector must be an immediate"
.LC443:
	.string	"mask must be an immediate"
	.text
	.globl	ix86_expand_builtin
	.type	ix86_expand_builtin, @function
ix86_expand_builtin:
.LFB186:
	.loc 1 11783 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$144, %rsp	#,
	movq	%rdi, -120(%rbp)	# exp, exp
	movq	%rsi, -128(%rbp)	# target, target
	movq	%rdx, -136(%rbp)	# subtarget, subtarget
	movl	%ecx, -140(%rbp)	# mode, mode
	movl	%r8d, -144(%rbp)	# ignore, ignore
	.loc 1 11787 0
	movq	-120(%rbp), %rax	# exp, tmp263
	movq	32(%rax), %rax	# exp_29(D)->exp.operands, D.30780
	movq	32(%rax), %rax	# _30->exp.operands, tmp264
	movq	%rax, -48(%rbp)	# tmp264, fndecl
	.loc 1 11788 0
	movq	-120(%rbp), %rax	# exp, tmp265
	movq	40(%rax), %rax	# exp_29(D)->exp.operands, tmp266
	movq	%rax, -40(%rbp)	# tmp266, arglist
	.loc 1 11792 0
	movq	-48(%rbp), %rax	# fndecl, tmp267
	movl	56(%rax), %eax	# fndecl_31->decl.u1.f, tmp268
	movl	%eax, -112(%rbp)	# tmp268, fcode
	.loc 1 11794 0
	movl	-112(%rbp), %eax	# fcode, tmp270
	subl	$56, %eax	#, tmp269
	cmpl	$125, %eax	#, tmp269
	ja	.L3016	#,
	movl	%eax, %eax	# tmp269, tmp271
	movq	.L2907(,%rax,8), %rax	#, tmp272
	jmp	*%rax	# tmp272
	.section	.rodata
	.align 8
	.align 4
.L2907:
	.quad	.L2906
	.quad	.L2908
	.quad	.L2909
	.quad	.L2910
	.quad	.L2911
	.quad	.L2912
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L2913
	.quad	.L2913
	.quad	.L2914
	.quad	.L2914
	.quad	.L2915
	.quad	.L3016
	.quad	.L3016
	.quad	.L2916
	.quad	.L2917
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L2918
	.quad	.L2919
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L2920
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L3016
	.quad	.L2921
	.quad	.L3016
	.quad	.L2922
	.quad	.L3016
	.quad	.L2923
	.quad	.L3016
	.quad	.L2924
	.quad	.L3016
	.quad	.L3016
	.quad	.L2925
	.quad	.L2926
	.quad	.L2927
	.quad	.L2928
	.quad	.L2929
	.quad	.L2930
	.quad	.L2931
	.quad	.L2932
	.quad	.L2933
	.quad	.L2934
	.quad	.L2935
	.quad	.L2936
	.quad	.L2937
	.quad	.L2938
	.quad	.L2939
	.quad	.L2940
	.quad	.L2941
	.quad	.L2942
	.quad	.L2943
	.quad	.L2944
	.quad	.L2945
	.quad	.L2946
	.quad	.L2947
	.quad	.L2948
	.quad	.L2949
	.quad	.L2950
	.quad	.L2951
	.quad	.L2952
	.quad	.L2953
	.quad	.L2954
	.quad	.L2955
	.quad	.L2956
	.quad	.L2957
	.quad	.L2958
	.quad	.L2959
	.quad	.L2960
	.text
.L2929:
	.loc 1 11797 0
	call	gen_emms	#
	movq	%rax, %rdi	# D.30781,
	call	emit_insn	#
	.loc 1 11798 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2932:
	.loc 1 11801 0
	call	gen_sfence	#
	movq	%rax, %rdi	# D.30781,
	call	emit_insn	#
	.loc 1 11802 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2918:
	.loc 1 11805 0
	movl	$772, -108(%rbp)	#, icode
	.loc 1 11806 0
	movq	-40(%rbp), %rax	# arglist, tmp273
	movq	32(%rax), %rax	# arglist_32->list.value, tmp274
	movq	%rax, -32(%rbp)	# tmp274, arg0
	.loc 1 11807 0
	movq	-40(%rbp), %rax	# arglist, tmp275
	movq	(%rax), %rax	# arglist_32->common.chain, D.30780
	movq	32(%rax), %rax	# _40->list.value, tmp276
	movq	%rax, -24(%rbp)	# tmp276, arg1
	.loc 1 11808 0
	movq	-32(%rbp), %rax	# arg0, tmp277
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp277,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp278, op0
	.loc 1 11809 0
	movq	-24(%rbp), %rax	# arg1, tmp279
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp279,
	call	expand_expr	#
	movq	%rax, -64(%rbp)	# tmp280, op1
	.loc 1 11810 0
	movl	-108(%rbp), %edx	# icode, tmp281
	movq	%rdx, %rax	# tmp281, tmp282
	salq	$2, %rax	#, tmp282
	addq	%rdx, %rax	# tmp281, tmp282
	salq	$3, %rax	#, tmp283
	addq	$insn_data+24, %rax	#, tmp284
	movq	(%rax), %rax	# insn_data[icode_38].operand, D.30782
	movzwl	16(%rax), %eax	# _44->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp285
	movl	%eax, -104(%rbp)	# tmp285, tmode
	.loc 1 11811 0
	movl	-108(%rbp), %edx	# icode, tmp286
	movq	%rdx, %rax	# tmp286, tmp287
	salq	$2, %rax	#, tmp287
	addq	%rdx, %rax	# tmp286, tmp287
	salq	$3, %rax	#, tmp288
	addq	$insn_data+24, %rax	#, tmp289
	movq	(%rax), %rax	# insn_data[icode_38].operand, D.30782
	addq	$24, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _48->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp290
	movl	%eax, -100(%rbp)	# tmp290, mode0
	.loc 1 11812 0
	movl	-108(%rbp), %edx	# icode, tmp291
	movq	%rdx, %rax	# tmp291, tmp292
	salq	$2, %rax	#, tmp292
	addq	%rdx, %rax	# tmp291, tmp292
	salq	$3, %rax	#, tmp293
	addq	$insn_data+24, %rax	#, tmp294
	movq	(%rax), %rax	# insn_data[icode_38].operand, D.30782
	addq	$48, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _52->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp295
	movl	%eax, -96(%rbp)	# tmp295, mode1
	.loc 1 11814 0
	movl	-108(%rbp), %edx	# icode, tmp296
	movq	%rdx, %rax	# tmp296, tmp297
	salq	$2, %rax	#, tmp297
	addq	%rdx, %rax	# tmp296, tmp297
	salq	$3, %rax	#, tmp298
	addq	$insn_data+24, %rax	#, tmp299
	movq	(%rax), %rax	# insn_data[icode_38].operand, D.30782
	addq	$24, %rax	#, D.30782
	movq	(%rax), %rax	# _56->predicate, D.30784
	movl	-100(%rbp), %ecx	# mode0, tmp300
	movq	-72(%rbp), %rdx	# op0, tmp301
	movl	%ecx, %esi	# tmp300,
	movq	%rdx, %rdi	# tmp301,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2962	#,
	.loc 1 11815 0
	movq	-72(%rbp), %rdx	# op0, tmp302
	movl	-100(%rbp), %eax	# mode0, tmp303
	movq	%rdx, %rsi	# tmp302,
	movl	%eax, %edi	# tmp303,
	call	copy_to_mode_reg	#
	movq	%rax, -72(%rbp)	# tmp304, op0
.L2962:
	.loc 1 11816 0
	movl	-108(%rbp), %edx	# icode, tmp305
	movq	%rdx, %rax	# tmp305, tmp306
	salq	$2, %rax	#, tmp306
	addq	%rdx, %rax	# tmp305, tmp306
	salq	$3, %rax	#, tmp307
	addq	$insn_data+24, %rax	#, tmp308
	movq	(%rax), %rax	# insn_data[icode_38].operand, D.30782
	addq	$48, %rax	#, D.30782
	movq	(%rax), %rax	# _61->predicate, D.30784
	movl	-96(%rbp), %ecx	# mode1, tmp309
	movq	-64(%rbp), %rdx	# op1, tmp310
	movl	%ecx, %esi	# tmp309,
	movq	%rdx, %rdi	# tmp310,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2963	#,
	.loc 1 11819 0
	movl	$.LC442, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	.loc 1 11820 0
	movl	-104(%rbp), %eax	# tmode, tmp311
	movl	%eax, %edi	# tmp311,
	call	gen_reg_rtx	#
	jmp	.L2961	#
.L2963:
	.loc 1 11822 0
	cmpq	$0, -128(%rbp)	#, target
	je	.L2964	#,
	.loc 1 11823 0
	movq	-128(%rbp), %rax	# target, tmp312
	movzbl	2(%rax), %eax	# target_65(D)->mode, D.30786
	movzbl	%al, %eax	# D.30786, D.30787
	cmpl	-104(%rbp), %eax	# tmode, D.30787
	jne	.L2964	#,
	.loc 1 11824 0
	movl	-108(%rbp), %edx	# icode, tmp313
	movq	%rdx, %rax	# tmp313, tmp314
	salq	$2, %rax	#, tmp314
	addq	%rdx, %rax	# tmp313, tmp314
	salq	$3, %rax	#, tmp315
	addq	$insn_data+24, %rax	#, tmp316
	movq	(%rax), %rax	# insn_data[icode_38].operand, D.30782
	movq	(%rax), %rax	# _68->predicate, D.30784
	movl	-104(%rbp), %ecx	# tmode, tmp317
	movq	-128(%rbp), %rdx	# target, tmp318
	movl	%ecx, %esi	# tmp317,
	movq	%rdx, %rdi	# tmp318,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2965	#,
.L2964:
	.loc 1 11825 0
	movl	-104(%rbp), %eax	# tmode, tmp319
	movl	%eax, %edi	# tmp319,
	call	gen_reg_rtx	#
	movq	%rax, -128(%rbp)	# tmp320, target
.L2965:
	.loc 1 11826 0
	movl	-108(%rbp), %eax	# icode, icode.1400
	movslq	%eax, %rdx	# icode.1400, tmp321
	movq	%rdx, %rax	# tmp321, tmp322
	salq	$2, %rax	#, tmp322
	addq	%rdx, %rax	# tmp321, tmp322
	salq	$3, %rax	#, tmp323
	addq	$insn_data+16, %rax	#, tmp324
	movq	(%rax), %rcx	# insn_data[icode.1400_72].genfun, D.30788
	movq	-64(%rbp), %rdx	# op1, tmp325
	movq	-72(%rbp), %rsi	# op0, tmp326
	movq	-128(%rbp), %rax	# target, tmp327
	movq	%rax, %rdi	# tmp327,
	movl	$0, %eax	#,
	call	*%rcx	# D.30788
	movq	%rax, -16(%rbp)	# tmp328, pat
	.loc 1 11827 0
	cmpq	$0, -16(%rbp)	#, pat
	jne	.L2966	#,
	.loc 1 11828 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2966:
	.loc 1 11829 0
	movq	-16(%rbp), %rax	# pat, tmp329
	movq	%rax, %rdi	# tmp329,
	call	emit_insn	#
	.loc 1 11830 0
	movq	-128(%rbp), %rax	# target, D.30779
	jmp	.L2961	#
.L2919:
	.loc 1 11833 0
	movl	$771, -108(%rbp)	#, icode
	.loc 1 11834 0
	movq	-40(%rbp), %rax	# arglist, tmp330
	movq	32(%rax), %rax	# arglist_32->list.value, tmp331
	movq	%rax, -32(%rbp)	# tmp331, arg0
	.loc 1 11835 0
	movq	-40(%rbp), %rax	# arglist, tmp332
	movq	(%rax), %rax	# arglist_32->common.chain, D.30780
	movq	32(%rax), %rax	# _79->list.value, tmp333
	movq	%rax, -24(%rbp)	# tmp333, arg1
	.loc 1 11836 0
	movq	-40(%rbp), %rax	# arglist, tmp334
	movq	(%rax), %rax	# arglist_32->common.chain, D.30780
	movq	(%rax), %rax	# _81->common.chain, D.30780
	movq	32(%rax), %rax	# _82->list.value, tmp335
	movq	%rax, -8(%rbp)	# tmp335, arg2
	.loc 1 11837 0
	movq	-32(%rbp), %rax	# arg0, tmp336
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp336,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp337, op0
	.loc 1 11838 0
	movq	-24(%rbp), %rax	# arg1, tmp338
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp338,
	call	expand_expr	#
	movq	%rax, -64(%rbp)	# tmp339, op1
	.loc 1 11839 0
	movq	-8(%rbp), %rax	# arg2, tmp340
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp340,
	call	expand_expr	#
	movq	%rax, -56(%rbp)	# tmp341, op2
	.loc 1 11840 0
	movl	-108(%rbp), %edx	# icode, tmp342
	movq	%rdx, %rax	# tmp342, tmp343
	salq	$2, %rax	#, tmp343
	addq	%rdx, %rax	# tmp342, tmp343
	salq	$3, %rax	#, tmp344
	addq	$insn_data+24, %rax	#, tmp345
	movq	(%rax), %rax	# insn_data[icode_77].operand, D.30782
	movzwl	16(%rax), %eax	# _87->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp346
	movl	%eax, -104(%rbp)	# tmp346, tmode
	.loc 1 11841 0
	movl	-108(%rbp), %edx	# icode, tmp347
	movq	%rdx, %rax	# tmp347, tmp348
	salq	$2, %rax	#, tmp348
	addq	%rdx, %rax	# tmp347, tmp348
	salq	$3, %rax	#, tmp349
	addq	$insn_data+24, %rax	#, tmp350
	movq	(%rax), %rax	# insn_data[icode_77].operand, D.30782
	addq	$24, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _91->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp351
	movl	%eax, -100(%rbp)	# tmp351, mode0
	.loc 1 11842 0
	movl	-108(%rbp), %edx	# icode, tmp352
	movq	%rdx, %rax	# tmp352, tmp353
	salq	$2, %rax	#, tmp353
	addq	%rdx, %rax	# tmp352, tmp353
	salq	$3, %rax	#, tmp354
	addq	$insn_data+24, %rax	#, tmp355
	movq	(%rax), %rax	# insn_data[icode_77].operand, D.30782
	addq	$48, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _95->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp356
	movl	%eax, -96(%rbp)	# tmp356, mode1
	.loc 1 11843 0
	movl	-108(%rbp), %edx	# icode, tmp357
	movq	%rdx, %rax	# tmp357, tmp358
	salq	$2, %rax	#, tmp358
	addq	%rdx, %rax	# tmp357, tmp358
	salq	$3, %rax	#, tmp359
	addq	$insn_data+24, %rax	#, tmp360
	movq	(%rax), %rax	# insn_data[icode_77].operand, D.30782
	addq	$72, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _99->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp361
	movl	%eax, -92(%rbp)	# tmp361, mode2
	.loc 1 11845 0
	movl	-108(%rbp), %edx	# icode, tmp362
	movq	%rdx, %rax	# tmp362, tmp363
	salq	$2, %rax	#, tmp363
	addq	%rdx, %rax	# tmp362, tmp363
	salq	$3, %rax	#, tmp364
	addq	$insn_data+24, %rax	#, tmp365
	movq	(%rax), %rax	# insn_data[icode_77].operand, D.30782
	addq	$24, %rax	#, D.30782
	movq	(%rax), %rax	# _103->predicate, D.30784
	movl	-100(%rbp), %ecx	# mode0, tmp366
	movq	-72(%rbp), %rdx	# op0, tmp367
	movl	%ecx, %esi	# tmp366,
	movq	%rdx, %rdi	# tmp367,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2967	#,
	.loc 1 11846 0
	movq	-72(%rbp), %rdx	# op0, tmp368
	movl	-100(%rbp), %eax	# mode0, tmp369
	movq	%rdx, %rsi	# tmp368,
	movl	%eax, %edi	# tmp369,
	call	copy_to_mode_reg	#
	movq	%rax, -72(%rbp)	# tmp370, op0
.L2967:
	.loc 1 11847 0
	movl	-108(%rbp), %edx	# icode, tmp371
	movq	%rdx, %rax	# tmp371, tmp372
	salq	$2, %rax	#, tmp372
	addq	%rdx, %rax	# tmp371, tmp372
	salq	$3, %rax	#, tmp373
	addq	$insn_data+24, %rax	#, tmp374
	movq	(%rax), %rax	# insn_data[icode_77].operand, D.30782
	addq	$48, %rax	#, D.30782
	movq	(%rax), %rax	# _108->predicate, D.30784
	movl	-96(%rbp), %ecx	# mode1, tmp375
	movq	-64(%rbp), %rdx	# op1, tmp376
	movl	%ecx, %esi	# tmp375,
	movq	%rdx, %rdi	# tmp376,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2968	#,
	.loc 1 11848 0
	movq	-64(%rbp), %rdx	# op1, tmp377
	movl	-96(%rbp), %eax	# mode1, tmp378
	movq	%rdx, %rsi	# tmp377,
	movl	%eax, %edi	# tmp378,
	call	copy_to_mode_reg	#
	movq	%rax, -64(%rbp)	# tmp379, op1
.L2968:
	.loc 1 11849 0
	movl	-108(%rbp), %edx	# icode, tmp380
	movq	%rdx, %rax	# tmp380, tmp381
	salq	$2, %rax	#, tmp381
	addq	%rdx, %rax	# tmp380, tmp381
	salq	$3, %rax	#, tmp382
	addq	$insn_data+24, %rax	#, tmp383
	movq	(%rax), %rax	# insn_data[icode_77].operand, D.30782
	addq	$72, %rax	#, D.30782
	movq	(%rax), %rax	# _113->predicate, D.30784
	movl	-92(%rbp), %ecx	# mode2, tmp384
	movq	-56(%rbp), %rdx	# op2, tmp385
	movl	%ecx, %esi	# tmp384,
	movq	%rdx, %rdi	# tmp385,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2969	#,
	.loc 1 11852 0
	movl	$.LC442, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	.loc 1 11853 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30779
	jmp	.L2961	#
.L2969:
	.loc 1 11855 0
	cmpq	$0, -128(%rbp)	#, target
	je	.L2970	#,
	.loc 1 11856 0
	movq	-128(%rbp), %rax	# target, tmp386
	movzbl	2(%rax), %eax	# target_65(D)->mode, D.30786
	movzbl	%al, %eax	# D.30786, D.30787
	cmpl	-104(%rbp), %eax	# tmode, D.30787
	jne	.L2970	#,
	.loc 1 11857 0
	movl	-108(%rbp), %edx	# icode, tmp387
	movq	%rdx, %rax	# tmp387, tmp388
	salq	$2, %rax	#, tmp388
	addq	%rdx, %rax	# tmp387, tmp388
	salq	$3, %rax	#, tmp389
	addq	$insn_data+24, %rax	#, tmp390
	movq	(%rax), %rax	# insn_data[icode_77].operand, D.30782
	movq	(%rax), %rax	# _119->predicate, D.30784
	movl	-104(%rbp), %ecx	# tmode, tmp391
	movq	-128(%rbp), %rdx	# target, tmp392
	movl	%ecx, %esi	# tmp391,
	movq	%rdx, %rdi	# tmp392,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2971	#,
.L2970:
	.loc 1 11858 0
	movl	-104(%rbp), %eax	# tmode, tmp393
	movl	%eax, %edi	# tmp393,
	call	gen_reg_rtx	#
	movq	%rax, -128(%rbp)	# tmp394, target
.L2971:
	.loc 1 11859 0
	movl	-108(%rbp), %eax	# icode, icode.1401
	movslq	%eax, %rdx	# icode.1401, tmp395
	movq	%rdx, %rax	# tmp395, tmp396
	salq	$2, %rax	#, tmp396
	addq	%rdx, %rax	# tmp395, tmp396
	salq	$3, %rax	#, tmp397
	addq	$insn_data+16, %rax	#, tmp398
	movq	(%rax), %r8	# insn_data[icode.1401_123].genfun, D.30788
	movq	-56(%rbp), %rcx	# op2, tmp399
	movq	-64(%rbp), %rdx	# op1, tmp400
	movq	-72(%rbp), %rsi	# op0, tmp401
	movq	-128(%rbp), %rax	# target, tmp402
	movq	%rax, %rdi	# tmp402,
	movl	$0, %eax	#,
	call	*%r8	# D.30788
	movq	%rax, -16(%rbp)	# tmp403, pat
	.loc 1 11860 0
	cmpq	$0, -16(%rbp)	#, pat
	jne	.L2972	#,
	.loc 1 11861 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2972:
	.loc 1 11862 0
	movq	-16(%rbp), %rax	# pat, tmp404
	movq	%rax, %rdi	# tmp404,
	call	emit_insn	#
	.loc 1 11863 0
	movq	-128(%rbp), %rax	# target, D.30779
	jmp	.L2961	#
.L2915:
	.loc 1 11866 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1403
	andl	$33554432, %eax	#, D.30785
	testl	%eax, %eax	# D.30785
	je	.L2973	#,
	.loc 1 11866 0 is_stmt 0 discriminator 1
	movl	$679, %eax	#, iftmp.1402
	jmp	.L2974	#
.L2973:
	.loc 1 11866 0 discriminator 2
	movl	$678, %eax	#, iftmp.1402
.L2974:
	.loc 1 11866 0 discriminator 3
	movl	%eax, -108(%rbp)	# iftmp.1402, icode
	.loc 1 11868 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rax	# arglist, tmp405
	movq	32(%rax), %rax	# arglist_32->list.value, tmp406
	movq	%rax, -24(%rbp)	# tmp406, arg1
	.loc 1 11869 0 discriminator 3
	movq	-40(%rbp), %rax	# arglist, tmp407
	movq	(%rax), %rax	# arglist_32->common.chain, D.30780
	movq	32(%rax), %rax	# _134->list.value, tmp408
	movq	%rax, -8(%rbp)	# tmp408, arg2
	.loc 1 11870 0 discriminator 3
	movq	-40(%rbp), %rax	# arglist, tmp409
	movq	(%rax), %rax	# arglist_32->common.chain, D.30780
	movq	(%rax), %rax	# _136->common.chain, D.30780
	movq	32(%rax), %rax	# _137->list.value, tmp410
	movq	%rax, -32(%rbp)	# tmp410, arg0
	.loc 1 11871 0 discriminator 3
	movq	-32(%rbp), %rax	# arg0, tmp411
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp411,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp412, op0
	.loc 1 11872 0 discriminator 3
	movq	-24(%rbp), %rax	# arg1, tmp413
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp413,
	call	expand_expr	#
	movq	%rax, -64(%rbp)	# tmp414, op1
	.loc 1 11873 0 discriminator 3
	movq	-8(%rbp), %rax	# arg2, tmp415
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp415,
	call	expand_expr	#
	movq	%rax, -56(%rbp)	# tmp416, op2
	.loc 1 11874 0 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp417
	movq	%rdx, %rax	# tmp417, tmp418
	salq	$2, %rax	#, tmp418
	addq	%rdx, %rax	# tmp417, tmp418
	salq	$3, %rax	#, tmp419
	addq	$insn_data+24, %rax	#, tmp420
	movq	(%rax), %rax	# insn_data[icode_132].operand, D.30782
	movzwl	16(%rax), %eax	# _142->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp421
	movl	%eax, -100(%rbp)	# tmp421, mode0
	.loc 1 11875 0 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp422
	movq	%rdx, %rax	# tmp422, tmp423
	salq	$2, %rax	#, tmp423
	addq	%rdx, %rax	# tmp422, tmp423
	salq	$3, %rax	#, tmp424
	addq	$insn_data+24, %rax	#, tmp425
	movq	(%rax), %rax	# insn_data[icode_132].operand, D.30782
	addq	$24, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _146->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp426
	movl	%eax, -96(%rbp)	# tmp426, mode1
	.loc 1 11876 0 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp427
	movq	%rdx, %rax	# tmp427, tmp428
	salq	$2, %rax	#, tmp428
	addq	%rdx, %rax	# tmp427, tmp428
	salq	$3, %rax	#, tmp429
	addq	$insn_data+24, %rax	#, tmp430
	movq	(%rax), %rax	# insn_data[icode_132].operand, D.30782
	addq	$48, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _150->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp431
	movl	%eax, -92(%rbp)	# tmp431, mode2
	.loc 1 11878 0 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp432
	movq	%rdx, %rax	# tmp432, tmp433
	salq	$2, %rax	#, tmp433
	addq	%rdx, %rax	# tmp432, tmp433
	salq	$3, %rax	#, tmp434
	addq	$insn_data+24, %rax	#, tmp435
	movq	(%rax), %rax	# insn_data[icode_132].operand, D.30782
	movq	(%rax), %rax	# _153->predicate, D.30784
	movl	-100(%rbp), %ecx	# mode0, tmp436
	movq	-72(%rbp), %rdx	# op0, tmp437
	movl	%ecx, %esi	# tmp436,
	movq	%rdx, %rdi	# tmp437,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2975	#,
	.loc 1 11879 0
	movq	-72(%rbp), %rdx	# op0, tmp438
	movl	-100(%rbp), %eax	# mode0, tmp439
	movq	%rdx, %rsi	# tmp438,
	movl	%eax, %edi	# tmp439,
	call	copy_to_mode_reg	#
	movq	%rax, -72(%rbp)	# tmp440, op0
.L2975:
	.loc 1 11880 0
	movl	-108(%rbp), %edx	# icode, tmp441
	movq	%rdx, %rax	# tmp441, tmp442
	salq	$2, %rax	#, tmp442
	addq	%rdx, %rax	# tmp441, tmp442
	salq	$3, %rax	#, tmp443
	addq	$insn_data+24, %rax	#, tmp444
	movq	(%rax), %rax	# insn_data[icode_132].operand, D.30782
	addq	$24, %rax	#, D.30782
	movq	(%rax), %rax	# _158->predicate, D.30784
	movl	-96(%rbp), %ecx	# mode1, tmp445
	movq	-64(%rbp), %rdx	# op1, tmp446
	movl	%ecx, %esi	# tmp445,
	movq	%rdx, %rdi	# tmp446,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2976	#,
	.loc 1 11881 0
	movq	-64(%rbp), %rdx	# op1, tmp447
	movl	-96(%rbp), %eax	# mode1, tmp448
	movq	%rdx, %rsi	# tmp447,
	movl	%eax, %edi	# tmp448,
	call	copy_to_mode_reg	#
	movq	%rax, -64(%rbp)	# tmp449, op1
.L2976:
	.loc 1 11882 0
	movl	-108(%rbp), %edx	# icode, tmp450
	movq	%rdx, %rax	# tmp450, tmp451
	salq	$2, %rax	#, tmp451
	addq	%rdx, %rax	# tmp450, tmp451
	salq	$3, %rax	#, tmp452
	addq	$insn_data+24, %rax	#, tmp453
	movq	(%rax), %rax	# insn_data[icode_132].operand, D.30782
	addq	$48, %rax	#, D.30782
	movq	(%rax), %rax	# _163->predicate, D.30784
	movl	-92(%rbp), %ecx	# mode2, tmp454
	movq	-56(%rbp), %rdx	# op2, tmp455
	movl	%ecx, %esi	# tmp454,
	movq	%rdx, %rdi	# tmp455,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2977	#,
	.loc 1 11883 0
	movq	-56(%rbp), %rdx	# op2, tmp456
	movl	-92(%rbp), %eax	# mode2, tmp457
	movq	%rdx, %rsi	# tmp456,
	movl	%eax, %edi	# tmp457,
	call	copy_to_mode_reg	#
	movq	%rax, -56(%rbp)	# tmp458, op2
.L2977:
	.loc 1 11884 0
	movl	-108(%rbp), %eax	# icode, icode.1404
	movslq	%eax, %rdx	# icode.1404, tmp459
	movq	%rdx, %rax	# tmp459, tmp460
	salq	$2, %rax	#, tmp460
	addq	%rdx, %rax	# tmp459, tmp460
	salq	$3, %rax	#, tmp461
	addq	$insn_data+16, %rax	#, tmp462
	movq	(%rax), %rcx	# insn_data[icode.1404_167].genfun, D.30788
	movq	-56(%rbp), %rdx	# op2, tmp463
	movq	-64(%rbp), %rsi	# op1, tmp464
	movq	-72(%rbp), %rax	# op0, tmp465
	movq	%rax, %rdi	# tmp465,
	movl	$0, %eax	#,
	call	*%rcx	# D.30788
	movq	%rax, -16(%rbp)	# tmp466, pat
	.loc 1 11885 0
	cmpq	$0, -16(%rbp)	#, pat
	jne	.L2978	#,
	.loc 1 11886 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2978:
	.loc 1 11887 0
	movq	-16(%rbp), %rax	# pat, tmp467
	movq	%rax, %rdi	# tmp467,
	call	emit_insn	#
	.loc 1 11888 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2924:
	.loc 1 11891 0
	movq	-128(%rbp), %rdx	# target, tmp468
	movq	-40(%rbp), %rax	# arglist, tmp469
	movq	%rax, %rsi	# tmp469,
	movl	$703, %edi	#,
	call	ix86_expand_unop1_builtin	#
	jmp	.L2961	#
.L2923:
	.loc 1 11893 0
	movq	-128(%rbp), %rdx	# target, tmp470
	movq	-40(%rbp), %rax	# arglist, tmp471
	movq	%rax, %rsi	# tmp471,
	movl	$701, %edi	#,
	call	ix86_expand_unop1_builtin	#
	jmp	.L2961	#
.L2922:
	.loc 1 11895 0
	movq	-128(%rbp), %rdx	# target, tmp472
	movq	-40(%rbp), %rax	# arglist, tmp473
	movq	%rax, %rsi	# tmp473,
	movl	$699, %edi	#,
	call	ix86_expand_unop1_builtin	#
	jmp	.L2961	#
.L2925:
	.loc 1 11898 0
	movq	-128(%rbp), %rdx	# target, tmp474
	movq	-40(%rbp), %rax	# arglist, tmp475
	movq	%rax, %rsi	# tmp475,
	movl	$708, %edi	#,
	call	ix86_expand_timode_binop_builtin	#
	jmp	.L2961	#
.L2926:
	.loc 1 11901 0
	movq	-128(%rbp), %rdx	# target, tmp476
	movq	-40(%rbp), %rax	# arglist, tmp477
	movq	%rax, %rsi	# tmp477,
	movl	$712, %edi	#,
	call	ix86_expand_timode_binop_builtin	#
	jmp	.L2961	#
.L2927:
	.loc 1 11904 0
	movq	-128(%rbp), %rdx	# target, tmp478
	movq	-40(%rbp), %rax	# arglist, tmp479
	movq	%rax, %rsi	# tmp479,
	movl	$718, %edi	#,
	call	ix86_expand_timode_binop_builtin	#
	jmp	.L2961	#
.L2928:
	.loc 1 11907 0
	movq	-128(%rbp), %rdx	# target, tmp480
	movq	-40(%rbp), %rax	# arglist, tmp481
	movq	%rax, %rsi	# tmp481,
	movl	$724, %edi	#,
	call	ix86_expand_timode_binop_builtin	#
	jmp	.L2961	#
.L2906:
	.loc 1 11911 0
	movq	-128(%rbp), %rdx	# target, tmp482
	movq	-40(%rbp), %rax	# arglist, tmp483
	movl	$1, %ecx	#,
	movq	%rax, %rsi	# tmp483,
	movl	$674, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2908:
	.loc 1 11914 0
	movq	-128(%rbp), %rdx	# target, tmp484
	movq	-40(%rbp), %rax	# arglist, tmp485
	movl	$1, %ecx	#,
	movq	%rax, %rsi	# tmp485,
	movl	$675, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2909:
	.loc 1 11917 0
	movq	-40(%rbp), %rax	# arglist, tmp486
	movq	%rax, %rsi	# tmp486,
	movl	$674, %edi	#,
	call	ix86_expand_store_builtin	#
	jmp	.L2961	#
.L2910:
	.loc 1 11919 0
	movq	-40(%rbp), %rax	# arglist, tmp487
	movq	%rax, %rsi	# tmp487,
	movl	$675, %edi	#,
	call	ix86_expand_store_builtin	#
	jmp	.L2961	#
.L2911:
	.loc 1 11922 0
	movq	-128(%rbp), %rdx	# target, tmp488
	movq	-40(%rbp), %rax	# arglist, tmp489
	movl	$1, %ecx	#,
	movq	%rax, %rsi	# tmp489,
	movl	$686, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2912:
	.loc 1 11925 0
	movq	-40(%rbp), %rax	# arglist, tmp490
	movq	%rax, %rsi	# tmp490,
	movl	$688, %edi	#,
	call	ix86_expand_store_builtin	#
	jmp	.L2961	#
.L2913:
	.loc 1 11929 0
	cmpl	$65, -112(%rbp)	#, fcode
	jne	.L2979	#,
	.loc 1 11929 0 is_stmt 0 discriminator 1
	movl	$684, %eax	#, iftmp.1405
	jmp	.L2980	#
.L2979:
	.loc 1 11929 0 discriminator 2
	movl	$685, %eax	#, iftmp.1405
.L2980:
	.loc 1 11929 0 discriminator 3
	movl	%eax, -108(%rbp)	# iftmp.1405, icode
	.loc 1 11931 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rax	# arglist, tmp491
	movq	32(%rax), %rax	# arglist_32->list.value, tmp492
	movq	%rax, -32(%rbp)	# tmp492, arg0
	.loc 1 11932 0 discriminator 3
	movq	-40(%rbp), %rax	# arglist, tmp493
	movq	(%rax), %rax	# arglist_32->common.chain, D.30780
	movq	32(%rax), %rax	# _189->list.value, tmp494
	movq	%rax, -24(%rbp)	# tmp494, arg1
	.loc 1 11933 0 discriminator 3
	movq	-32(%rbp), %rax	# arg0, tmp495
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp495,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp496, op0
	.loc 1 11934 0 discriminator 3
	movq	-24(%rbp), %rax	# arg1, tmp497
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp497,
	call	expand_expr	#
	movq	%rax, -64(%rbp)	# tmp498, op1
	.loc 1 11935 0 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp499
	movq	%rdx, %rax	# tmp499, tmp500
	salq	$2, %rax	#, tmp500
	addq	%rdx, %rax	# tmp499, tmp500
	salq	$3, %rax	#, tmp501
	addq	$insn_data+24, %rax	#, tmp502
	movq	(%rax), %rax	# insn_data[icode_187].operand, D.30782
	movzwl	16(%rax), %eax	# _193->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp503
	movl	%eax, -104(%rbp)	# tmp503, tmode
	.loc 1 11936 0 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp504
	movq	%rdx, %rax	# tmp504, tmp505
	salq	$2, %rax	#, tmp505
	addq	%rdx, %rax	# tmp504, tmp505
	salq	$3, %rax	#, tmp506
	addq	$insn_data+24, %rax	#, tmp507
	movq	(%rax), %rax	# insn_data[icode_187].operand, D.30782
	addq	$24, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _197->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp508
	movl	%eax, -100(%rbp)	# tmp508, mode0
	.loc 1 11937 0 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp509
	movq	%rdx, %rax	# tmp509, tmp510
	salq	$2, %rax	#, tmp510
	addq	%rdx, %rax	# tmp509, tmp510
	salq	$3, %rax	#, tmp511
	addq	$insn_data+24, %rax	#, tmp512
	movq	(%rax), %rax	# insn_data[icode_187].operand, D.30782
	addq	$48, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _201->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp513
	movl	%eax, -96(%rbp)	# tmp513, mode1
	.loc 1 11939 0 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp514
	movq	%rdx, %rax	# tmp514, tmp515
	salq	$2, %rax	#, tmp515
	addq	%rdx, %rax	# tmp514, tmp515
	salq	$3, %rax	#, tmp516
	addq	$insn_data+24, %rax	#, tmp517
	movq	(%rax), %rax	# insn_data[icode_187].operand, D.30782
	addq	$24, %rax	#, D.30782
	movq	(%rax), %rax	# _205->predicate, D.30784
	movl	-100(%rbp), %ecx	# mode0, tmp518
	movq	-72(%rbp), %rdx	# op0, tmp519
	movl	%ecx, %esi	# tmp518,
	movq	%rdx, %rdi	# tmp519,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2981	#,
	.loc 1 11940 0
	movq	-72(%rbp), %rdx	# op0, tmp520
	movl	-100(%rbp), %eax	# mode0, tmp521
	movq	%rdx, %rsi	# tmp520,
	movl	%eax, %edi	# tmp521,
	call	copy_to_mode_reg	#
	movq	%rax, -72(%rbp)	# tmp522, op0
.L2981:
	.loc 1 11941 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1407
	andl	$33554432, %eax	#, D.30785
	testl	%eax, %eax	# D.30785
	je	.L2982	#,
	.loc 1 11941 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1406
	jmp	.L2983	#
.L2982:
	.loc 1 11941 0 discriminator 2
	movl	$4, %eax	#, iftmp.1406
.L2983:
	.loc 1 11941 0 discriminator 3
	movq	-64(%rbp), %rdx	# op1, tmp523
	movq	%rdx, %rsi	# tmp523,
	movl	%eax, %edi	# iftmp.1406,
	call	copy_to_mode_reg	#
	movq	%rax, %rdx	#, D.30781
	movl	-96(%rbp), %eax	# mode1, tmp524
	movq	%rdx, %rsi	# D.30781,
	movl	%eax, %edi	# tmp524,
	call	gen_rtx_MEM	#
	movq	%rax, -64(%rbp)	# tmp525, op1
	.loc 1 11942 0 is_stmt 1 discriminator 3
	cmpq	$0, -128(%rbp)	#, target
	je	.L2984	#,
	.loc 1 11943 0
	movq	-128(%rbp), %rax	# target, tmp526
	movzbl	2(%rax), %eax	# target_65(D)->mode, D.30786
	movzbl	%al, %eax	# D.30786, D.30787
	cmpl	-104(%rbp), %eax	# tmode, D.30787
	jne	.L2984	#,
	.loc 1 11944 0
	movl	-108(%rbp), %edx	# icode, tmp527
	movq	%rdx, %rax	# tmp527, tmp528
	salq	$2, %rax	#, tmp528
	addq	%rdx, %rax	# tmp527, tmp528
	salq	$3, %rax	#, tmp529
	addq	$insn_data+24, %rax	#, tmp530
	movq	(%rax), %rax	# insn_data[icode_187].operand, D.30782
	movq	(%rax), %rax	# _217->predicate, D.30784
	movl	-104(%rbp), %ecx	# tmode, tmp531
	movq	-128(%rbp), %rdx	# target, tmp532
	movl	%ecx, %esi	# tmp531,
	movq	%rdx, %rdi	# tmp532,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2985	#,
.L2984:
	.loc 1 11945 0
	movl	-104(%rbp), %eax	# tmode, tmp533
	movl	%eax, %edi	# tmp533,
	call	gen_reg_rtx	#
	movq	%rax, -128(%rbp)	# tmp534, target
.L2985:
	.loc 1 11946 0
	movl	-108(%rbp), %eax	# icode, icode.1408
	movslq	%eax, %rdx	# icode.1408, tmp535
	movq	%rdx, %rax	# tmp535, tmp536
	salq	$2, %rax	#, tmp536
	addq	%rdx, %rax	# tmp535, tmp536
	salq	$3, %rax	#, tmp537
	addq	$insn_data+16, %rax	#, tmp538
	movq	(%rax), %rcx	# insn_data[icode.1408_221].genfun, D.30788
	movq	-64(%rbp), %rdx	# op1, tmp539
	movq	-72(%rbp), %rsi	# op0, tmp540
	movq	-128(%rbp), %rax	# target, tmp541
	movq	%rax, %rdi	# tmp541,
	movl	$0, %eax	#,
	call	*%rcx	# D.30788
	movq	%rax, -16(%rbp)	# tmp542, pat
	.loc 1 11947 0
	cmpq	$0, -16(%rbp)	#, pat
	jne	.L2986	#,
	.loc 1 11948 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2986:
	.loc 1 11949 0
	movq	-16(%rbp), %rax	# pat, tmp543
	movq	%rax, %rdi	# tmp543,
	call	emit_insn	#
	.loc 1 11950 0
	movq	-128(%rbp), %rax	# target, D.30779
	jmp	.L2961	#
.L2914:
	.loc 1 11954 0
	cmpl	$67, -112(%rbp)	#, fcode
	jne	.L2987	#,
	.loc 1 11954 0 is_stmt 0 discriminator 1
	movl	$684, %eax	#, iftmp.1409
	jmp	.L2988	#
.L2987:
	.loc 1 11954 0 discriminator 2
	movl	$685, %eax	#, iftmp.1409
.L2988:
	.loc 1 11954 0 discriminator 3
	movl	%eax, -108(%rbp)	# iftmp.1409, icode
	.loc 1 11956 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rax	# arglist, tmp544
	movq	32(%rax), %rax	# arglist_32->list.value, tmp545
	movq	%rax, -32(%rbp)	# tmp545, arg0
	.loc 1 11957 0 discriminator 3
	movq	-40(%rbp), %rax	# arglist, tmp546
	movq	(%rax), %rax	# arglist_32->common.chain, D.30780
	movq	32(%rax), %rax	# _230->list.value, tmp547
	movq	%rax, -24(%rbp)	# tmp547, arg1
	.loc 1 11958 0 discriminator 3
	movq	-32(%rbp), %rax	# arg0, tmp548
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp548,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp549, op0
	.loc 1 11959 0 discriminator 3
	movq	-24(%rbp), %rax	# arg1, tmp550
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp550,
	call	expand_expr	#
	movq	%rax, -64(%rbp)	# tmp551, op1
	.loc 1 11960 0 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp552
	movq	%rdx, %rax	# tmp552, tmp553
	salq	$2, %rax	#, tmp553
	addq	%rdx, %rax	# tmp552, tmp553
	salq	$3, %rax	#, tmp554
	addq	$insn_data+24, %rax	#, tmp555
	movq	(%rax), %rax	# insn_data[icode_228].operand, D.30782
	addq	$24, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _235->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp556
	movl	%eax, -100(%rbp)	# tmp556, mode0
	.loc 1 11961 0 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp557
	movq	%rdx, %rax	# tmp557, tmp558
	salq	$2, %rax	#, tmp558
	addq	%rdx, %rax	# tmp557, tmp558
	salq	$3, %rax	#, tmp559
	addq	$insn_data+24, %rax	#, tmp560
	movq	(%rax), %rax	# insn_data[icode_228].operand, D.30782
	addq	$48, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _239->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp561
	movl	%eax, -96(%rbp)	# tmp561, mode1
	.loc 1 11963 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1411
	andl	$33554432, %eax	#, D.30785
	testl	%eax, %eax	# D.30785
	je	.L2989	#,
	.loc 1 11963 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1410
	jmp	.L2990	#
.L2989:
	.loc 1 11963 0 discriminator 2
	movl	$4, %eax	#, iftmp.1410
.L2990:
	.loc 1 11963 0 discriminator 3
	movq	-72(%rbp), %rdx	# op0, tmp562
	movq	%rdx, %rsi	# tmp562,
	movl	%eax, %edi	# iftmp.1410,
	call	copy_to_mode_reg	#
	movq	%rax, %rdx	#, D.30781
	movl	-100(%rbp), %eax	# mode0, tmp563
	movq	%rdx, %rsi	# D.30781,
	movl	%eax, %edi	# tmp563,
	call	gen_rtx_MEM	#
	movq	%rax, -72(%rbp)	# tmp564, op0
	.loc 1 11964 0 is_stmt 1 discriminator 3
	movl	-108(%rbp), %edx	# icode, tmp565
	movq	%rdx, %rax	# tmp565, tmp566
	salq	$2, %rax	#, tmp566
	addq	%rdx, %rax	# tmp565, tmp566
	salq	$3, %rax	#, tmp567
	addq	$insn_data+24, %rax	#, tmp568
	movq	(%rax), %rax	# insn_data[icode_228].operand, D.30782
	addq	$48, %rax	#, D.30782
	movq	(%rax), %rax	# _249->predicate, D.30784
	movl	-96(%rbp), %ecx	# mode1, tmp569
	movq	-64(%rbp), %rdx	# op1, tmp570
	movl	%ecx, %esi	# tmp569,
	movq	%rdx, %rdi	# tmp570,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2991	#,
	.loc 1 11965 0
	movq	-64(%rbp), %rdx	# op1, tmp571
	movl	-96(%rbp), %eax	# mode1, tmp572
	movq	%rdx, %rsi	# tmp571,
	movl	%eax, %edi	# tmp572,
	call	copy_to_mode_reg	#
	movq	%rax, -64(%rbp)	# tmp573, op1
.L2991:
	.loc 1 11967 0
	movl	-108(%rbp), %eax	# icode, icode.1412
	movslq	%eax, %rdx	# icode.1412, tmp574
	movq	%rdx, %rax	# tmp574, tmp575
	salq	$2, %rax	#, tmp575
	addq	%rdx, %rax	# tmp574, tmp575
	salq	$3, %rax	#, tmp576
	addq	$insn_data+16, %rax	#, tmp577
	movq	(%rax), %rcx	# insn_data[icode.1412_253].genfun, D.30788
	movq	-64(%rbp), %rdx	# op1, tmp578
	movq	-72(%rbp), %rsi	# op0, tmp579
	movq	-72(%rbp), %rax	# op0, tmp580
	movq	%rax, %rdi	# tmp580,
	movl	$0, %eax	#,
	call	*%rcx	# D.30788
	movq	%rax, -16(%rbp)	# tmp581, pat
	.loc 1 11968 0
	cmpq	$0, -16(%rbp)	#, pat
	jne	.L2992	#,
	.loc 1 11969 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2992:
	.loc 1 11970 0
	movq	-16(%rbp), %rax	# pat, tmp582
	movq	%rax, %rdi	# tmp582,
	call	emit_insn	#
	.loc 1 11971 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2916:
	.loc 1 11974 0
	movq	-40(%rbp), %rax	# arglist, tmp583
	movq	%rax, %rsi	# tmp583,
	movl	$680, %edi	#,
	call	ix86_expand_store_builtin	#
	jmp	.L2961	#
.L2917:
	.loc 1 11976 0
	movq	-40(%rbp), %rax	# arglist, tmp584
	movq	%rax, %rsi	# tmp584,
	movl	$681, %edi	#,
	call	ix86_expand_store_builtin	#
	jmp	.L2961	#
.L2930:
	.loc 1 11979 0
	movq	-40(%rbp), %rax	# arglist, tmp585
	movq	32(%rax), %rax	# arglist_32->list.value, D.30780
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.30780,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp586, op0
	.loc 1 11980 0
	movl	$0, %esi	#,
	movl	$4, %edi	#,
	call	assign_386_stack_local	#
	movq	%rax, -128(%rbp)	# tmp587, target
	.loc 1 11981 0
	movq	-72(%rbp), %rdx	# op0, tmp588
	movq	-128(%rbp), %rax	# target, tmp589
	movq	%rdx, %rsi	# tmp588,
	movq	%rax, %rdi	# tmp589,
	call	emit_move_insn	#
	.loc 1 11982 0
	movq	-128(%rbp), %rax	# target, tmp590
	movq	%rax, %rdi	# tmp590,
	call	gen_ldmxcsr	#
	movq	%rax, %rdi	# D.30781,
	call	emit_insn	#
	.loc 1 11983 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2931:
	.loc 1 11986 0
	movl	$0, %esi	#,
	movl	$4, %edi	#,
	call	assign_386_stack_local	#
	movq	%rax, -128(%rbp)	# tmp591, target
	.loc 1 11987 0
	movq	-128(%rbp), %rax	# target, tmp592
	movq	%rax, %rdi	# tmp592,
	call	gen_stmxcsr	#
	movq	%rax, %rdi	# D.30781,
	call	emit_insn	#
	.loc 1 11988 0
	movq	-128(%rbp), %rax	# target, tmp593
	movq	%rax, %rsi	# tmp593,
	movl	$4, %edi	#,
	call	copy_to_mode_reg	#
	jmp	.L2961	#
.L2921:
	.loc 1 11991 0
	movl	$689, -108(%rbp)	#, icode
	.loc 1 11992 0
	movq	-40(%rbp), %rax	# arglist, tmp594
	movq	32(%rax), %rax	# arglist_32->list.value, tmp595
	movq	%rax, -32(%rbp)	# tmp595, arg0
	.loc 1 11993 0
	movq	-40(%rbp), %rax	# arglist, tmp596
	movq	(%rax), %rax	# arglist_32->common.chain, D.30780
	movq	32(%rax), %rax	# _270->list.value, tmp597
	movq	%rax, -24(%rbp)	# tmp597, arg1
	.loc 1 11994 0
	movq	-40(%rbp), %rax	# arglist, tmp598
	movq	(%rax), %rax	# arglist_32->common.chain, D.30780
	movq	(%rax), %rax	# _272->common.chain, D.30780
	movq	32(%rax), %rax	# _273->list.value, tmp599
	movq	%rax, -8(%rbp)	# tmp599, arg2
	.loc 1 11995 0
	movq	-32(%rbp), %rax	# arg0, tmp600
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp600,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp601, op0
	.loc 1 11996 0
	movq	-24(%rbp), %rax	# arg1, tmp602
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp602,
	call	expand_expr	#
	movq	%rax, -64(%rbp)	# tmp603, op1
	.loc 1 11997 0
	movq	-8(%rbp), %rax	# arg2, tmp604
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp604,
	call	expand_expr	#
	movq	%rax, -56(%rbp)	# tmp605, op2
	.loc 1 11998 0
	movl	-108(%rbp), %edx	# icode, tmp606
	movq	%rdx, %rax	# tmp606, tmp607
	salq	$2, %rax	#, tmp607
	addq	%rdx, %rax	# tmp606, tmp607
	salq	$3, %rax	#, tmp608
	addq	$insn_data+24, %rax	#, tmp609
	movq	(%rax), %rax	# insn_data[icode_268].operand, D.30782
	movzwl	16(%rax), %eax	# _278->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp610
	movl	%eax, -104(%rbp)	# tmp610, tmode
	.loc 1 11999 0
	movl	-108(%rbp), %edx	# icode, tmp611
	movq	%rdx, %rax	# tmp611, tmp612
	salq	$2, %rax	#, tmp612
	addq	%rdx, %rax	# tmp611, tmp612
	salq	$3, %rax	#, tmp613
	addq	$insn_data+24, %rax	#, tmp614
	movq	(%rax), %rax	# insn_data[icode_268].operand, D.30782
	addq	$24, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _282->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp615
	movl	%eax, -100(%rbp)	# tmp615, mode0
	.loc 1 12000 0
	movl	-108(%rbp), %edx	# icode, tmp616
	movq	%rdx, %rax	# tmp616, tmp617
	salq	$2, %rax	#, tmp617
	addq	%rdx, %rax	# tmp616, tmp617
	salq	$3, %rax	#, tmp618
	addq	$insn_data+24, %rax	#, tmp619
	movq	(%rax), %rax	# insn_data[icode_268].operand, D.30782
	addq	$48, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _286->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp620
	movl	%eax, -96(%rbp)	# tmp620, mode1
	.loc 1 12001 0
	movl	-108(%rbp), %edx	# icode, tmp621
	movq	%rdx, %rax	# tmp621, tmp622
	salq	$2, %rax	#, tmp622
	addq	%rdx, %rax	# tmp621, tmp622
	salq	$3, %rax	#, tmp623
	addq	$insn_data+24, %rax	#, tmp624
	movq	(%rax), %rax	# insn_data[icode_268].operand, D.30782
	addq	$72, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _290->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp625
	movl	%eax, -92(%rbp)	# tmp625, mode2
	.loc 1 12003 0
	movl	-108(%rbp), %edx	# icode, tmp626
	movq	%rdx, %rax	# tmp626, tmp627
	salq	$2, %rax	#, tmp627
	addq	%rdx, %rax	# tmp626, tmp627
	salq	$3, %rax	#, tmp628
	addq	$insn_data+24, %rax	#, tmp629
	movq	(%rax), %rax	# insn_data[icode_268].operand, D.30782
	addq	$24, %rax	#, D.30782
	movq	(%rax), %rax	# _294->predicate, D.30784
	movl	-100(%rbp), %ecx	# mode0, tmp630
	movq	-72(%rbp), %rdx	# op0, tmp631
	movl	%ecx, %esi	# tmp630,
	movq	%rdx, %rdi	# tmp631,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2993	#,
	.loc 1 12004 0
	movq	-72(%rbp), %rdx	# op0, tmp632
	movl	-100(%rbp), %eax	# mode0, tmp633
	movq	%rdx, %rsi	# tmp632,
	movl	%eax, %edi	# tmp633,
	call	copy_to_mode_reg	#
	movq	%rax, -72(%rbp)	# tmp634, op0
.L2993:
	.loc 1 12005 0
	movl	-108(%rbp), %edx	# icode, tmp635
	movq	%rdx, %rax	# tmp635, tmp636
	salq	$2, %rax	#, tmp636
	addq	%rdx, %rax	# tmp635, tmp636
	salq	$3, %rax	#, tmp637
	addq	$insn_data+24, %rax	#, tmp638
	movq	(%rax), %rax	# insn_data[icode_268].operand, D.30782
	addq	$48, %rax	#, D.30782
	movq	(%rax), %rax	# _299->predicate, D.30784
	movl	-96(%rbp), %ecx	# mode1, tmp639
	movq	-64(%rbp), %rdx	# op1, tmp640
	movl	%ecx, %esi	# tmp639,
	movq	%rdx, %rdi	# tmp640,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2994	#,
	.loc 1 12006 0
	movq	-64(%rbp), %rdx	# op1, tmp641
	movl	-96(%rbp), %eax	# mode1, tmp642
	movq	%rdx, %rsi	# tmp641,
	movl	%eax, %edi	# tmp642,
	call	copy_to_mode_reg	#
	movq	%rax, -64(%rbp)	# tmp643, op1
.L2994:
	.loc 1 12007 0
	movl	-108(%rbp), %edx	# icode, tmp644
	movq	%rdx, %rax	# tmp644, tmp645
	salq	$2, %rax	#, tmp645
	addq	%rdx, %rax	# tmp644, tmp645
	salq	$3, %rax	#, tmp646
	addq	$insn_data+24, %rax	#, tmp647
	movq	(%rax), %rax	# insn_data[icode_268].operand, D.30782
	addq	$72, %rax	#, D.30782
	movq	(%rax), %rax	# _304->predicate, D.30784
	movl	-92(%rbp), %ecx	# mode2, tmp648
	movq	-56(%rbp), %rdx	# op2, tmp649
	movl	%ecx, %esi	# tmp648,
	movq	%rdx, %rdi	# tmp649,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2995	#,
	.loc 1 12010 0
	movl	$.LC443, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	.loc 1 12011 0
	movl	-104(%rbp), %eax	# tmode, tmp650
	movl	%eax, %edi	# tmp650,
	call	gen_reg_rtx	#
	jmp	.L2961	#
.L2995:
	.loc 1 12013 0
	cmpq	$0, -128(%rbp)	#, target
	je	.L2996	#,
	.loc 1 12014 0
	movq	-128(%rbp), %rax	# target, tmp651
	movzbl	2(%rax), %eax	# target_65(D)->mode, D.30786
	movzbl	%al, %eax	# D.30786, D.30787
	cmpl	-104(%rbp), %eax	# tmode, D.30787
	jne	.L2996	#,
	.loc 1 12015 0
	movl	-108(%rbp), %edx	# icode, tmp652
	movq	%rdx, %rax	# tmp652, tmp653
	salq	$2, %rax	#, tmp653
	addq	%rdx, %rax	# tmp652, tmp653
	salq	$3, %rax	#, tmp654
	addq	$insn_data+24, %rax	#, tmp655
	movq	(%rax), %rax	# insn_data[icode_268].operand, D.30782
	movq	(%rax), %rax	# _310->predicate, D.30784
	movl	-104(%rbp), %ecx	# tmode, tmp656
	movq	-128(%rbp), %rdx	# target, tmp657
	movl	%ecx, %esi	# tmp656,
	movq	%rdx, %rdi	# tmp657,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2997	#,
.L2996:
	.loc 1 12016 0
	movl	-104(%rbp), %eax	# tmode, tmp658
	movl	%eax, %edi	# tmp658,
	call	gen_reg_rtx	#
	movq	%rax, -128(%rbp)	# tmp659, target
.L2997:
	.loc 1 12017 0
	movl	-108(%rbp), %eax	# icode, icode.1413
	movslq	%eax, %rdx	# icode.1413, tmp660
	movq	%rdx, %rax	# tmp660, tmp661
	salq	$2, %rax	#, tmp661
	addq	%rdx, %rax	# tmp660, tmp661
	salq	$3, %rax	#, tmp662
	addq	$insn_data+16, %rax	#, tmp663
	movq	(%rax), %r8	# insn_data[icode.1413_314].genfun, D.30788
	movq	-56(%rbp), %rcx	# op2, tmp664
	movq	-64(%rbp), %rdx	# op1, tmp665
	movq	-72(%rbp), %rsi	# op0, tmp666
	movq	-128(%rbp), %rax	# target, tmp667
	movq	%rax, %rdi	# tmp667,
	movl	$0, %eax	#,
	call	*%r8	# D.30788
	movq	%rax, -16(%rbp)	# tmp668, pat
	.loc 1 12018 0
	cmpq	$0, -16(%rbp)	#, pat
	jne	.L2998	#,
	.loc 1 12019 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2998:
	.loc 1 12020 0
	movq	-16(%rbp), %rax	# pat, tmp669
	movq	%rax, %rdi	# tmp669,
	call	emit_insn	#
	.loc 1 12021 0
	movq	-128(%rbp), %rax	# target, D.30779
	jmp	.L2961	#
.L2920:
	.loc 1 12024 0
	movl	$773, -108(%rbp)	#, icode
	.loc 1 12025 0
	movq	-40(%rbp), %rax	# arglist, tmp670
	movq	32(%rax), %rax	# arglist_32->list.value, tmp671
	movq	%rax, -32(%rbp)	# tmp671, arg0
	.loc 1 12026 0
	movq	-40(%rbp), %rax	# arglist, tmp672
	movq	(%rax), %rax	# arglist_32->common.chain, D.30780
	movq	32(%rax), %rax	# _321->list.value, tmp673
	movq	%rax, -24(%rbp)	# tmp673, arg1
	.loc 1 12027 0
	movq	-32(%rbp), %rax	# arg0, tmp674
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp674,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp675, op0
	.loc 1 12028 0
	movq	-24(%rbp), %rax	# arg1, tmp676
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp676,
	call	expand_expr	#
	movq	%rax, -64(%rbp)	# tmp677, op1
	.loc 1 12029 0
	movl	-108(%rbp), %edx	# icode, tmp678
	movq	%rdx, %rax	# tmp678, tmp679
	salq	$2, %rax	#, tmp679
	addq	%rdx, %rax	# tmp678, tmp679
	salq	$3, %rax	#, tmp680
	addq	$insn_data+24, %rax	#, tmp681
	movq	(%rax), %rax	# insn_data[icode_319].operand, D.30782
	movzwl	16(%rax), %eax	# _325->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp682
	movl	%eax, -104(%rbp)	# tmp682, tmode
	.loc 1 12030 0
	movl	-108(%rbp), %edx	# icode, tmp683
	movq	%rdx, %rax	# tmp683, tmp684
	salq	$2, %rax	#, tmp684
	addq	%rdx, %rax	# tmp683, tmp684
	salq	$3, %rax	#, tmp685
	addq	$insn_data+24, %rax	#, tmp686
	movq	(%rax), %rax	# insn_data[icode_319].operand, D.30782
	addq	$24, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _329->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp687
	movl	%eax, -96(%rbp)	# tmp687, mode1
	.loc 1 12031 0
	movl	-108(%rbp), %edx	# icode, tmp688
	movq	%rdx, %rax	# tmp688, tmp689
	salq	$2, %rax	#, tmp689
	addq	%rdx, %rax	# tmp688, tmp689
	salq	$3, %rax	#, tmp690
	addq	$insn_data+24, %rax	#, tmp691
	movq	(%rax), %rax	# insn_data[icode_319].operand, D.30782
	addq	$48, %rax	#, D.30782
	movzwl	16(%rax), %eax	# _333->mode, D.30783
	movzwl	%ax, %eax	# D.30783, tmp692
	movl	%eax, -92(%rbp)	# tmp692, mode2
	.loc 1 12033 0
	movl	-108(%rbp), %edx	# icode, tmp693
	movq	%rdx, %rax	# tmp693, tmp694
	salq	$2, %rax	#, tmp694
	addq	%rdx, %rax	# tmp693, tmp694
	salq	$3, %rax	#, tmp695
	addq	$insn_data+24, %rax	#, tmp696
	movq	(%rax), %rax	# insn_data[icode_319].operand, D.30782
	addq	$24, %rax	#, D.30782
	movq	(%rax), %rax	# _337->predicate, D.30784
	movl	-96(%rbp), %ecx	# mode1, tmp697
	movq	-72(%rbp), %rdx	# op0, tmp698
	movl	%ecx, %esi	# tmp697,
	movq	%rdx, %rdi	# tmp698,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L2999	#,
	.loc 1 12034 0
	movq	-72(%rbp), %rdx	# op0, tmp699
	movl	-96(%rbp), %eax	# mode1, tmp700
	movq	%rdx, %rsi	# tmp699,
	movl	%eax, %edi	# tmp700,
	call	copy_to_mode_reg	#
	movq	%rax, -72(%rbp)	# tmp701, op0
.L2999:
	.loc 1 12035 0
	movl	-108(%rbp), %edx	# icode, tmp702
	movq	%rdx, %rax	# tmp702, tmp703
	salq	$2, %rax	#, tmp703
	addq	%rdx, %rax	# tmp702, tmp703
	salq	$3, %rax	#, tmp704
	addq	$insn_data+24, %rax	#, tmp705
	movq	(%rax), %rax	# insn_data[icode_319].operand, D.30782
	addq	$48, %rax	#, D.30782
	movq	(%rax), %rax	# _342->predicate, D.30784
	movl	-92(%rbp), %ecx	# mode2, tmp706
	movq	-64(%rbp), %rdx	# op1, tmp707
	movl	%ecx, %esi	# tmp706,
	movq	%rdx, %rdi	# tmp707,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L3000	#,
	.loc 1 12038 0
	movl	$.LC443, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	.loc 1 12039 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.30779
	jmp	.L2961	#
.L3000:
	.loc 1 12041 0
	cmpq	$0, -128(%rbp)	#, target
	je	.L3001	#,
	.loc 1 12042 0
	movq	-128(%rbp), %rax	# target, tmp708
	movzbl	2(%rax), %eax	# target_65(D)->mode, D.30786
	movzbl	%al, %eax	# D.30786, D.30787
	cmpl	-104(%rbp), %eax	# tmode, D.30787
	jne	.L3001	#,
	.loc 1 12043 0
	movl	-108(%rbp), %edx	# icode, tmp709
	movq	%rdx, %rax	# tmp709, tmp710
	salq	$2, %rax	#, tmp710
	addq	%rdx, %rax	# tmp709, tmp710
	salq	$3, %rax	#, tmp711
	addq	$insn_data+24, %rax	#, tmp712
	movq	(%rax), %rax	# insn_data[icode_319].operand, D.30782
	movq	(%rax), %rax	# _348->predicate, D.30784
	movl	-104(%rbp), %ecx	# tmode, tmp713
	movq	-128(%rbp), %rdx	# target, tmp714
	movl	%ecx, %esi	# tmp713,
	movq	%rdx, %rdi	# tmp714,
	call	*%rax	# D.30784
	testl	%eax, %eax	# D.30785
	jne	.L3002	#,
.L3001:
	.loc 1 12044 0
	movl	-104(%rbp), %eax	# tmode, tmp715
	movl	%eax, %edi	# tmp715,
	call	gen_reg_rtx	#
	movq	%rax, -128(%rbp)	# tmp716, target
.L3002:
	.loc 1 12045 0
	movl	-108(%rbp), %eax	# icode, icode.1414
	movslq	%eax, %rdx	# icode.1414, tmp717
	movq	%rdx, %rax	# tmp717, tmp718
	salq	$2, %rax	#, tmp718
	addq	%rdx, %rax	# tmp717, tmp718
	salq	$3, %rax	#, tmp719
	addq	$insn_data+16, %rax	#, tmp720
	movq	(%rax), %rcx	# insn_data[icode.1414_352].genfun, D.30788
	movq	-64(%rbp), %rdx	# op1, tmp721
	movq	-72(%rbp), %rsi	# op0, tmp722
	movq	-128(%rbp), %rax	# target, tmp723
	movq	%rax, %rdi	# tmp723,
	movl	$0, %eax	#,
	call	*%rcx	# D.30788
	movq	%rax, -16(%rbp)	# tmp724, pat
	.loc 1 12046 0
	cmpq	$0, -16(%rbp)	#, pat
	jne	.L3003	#,
	.loc 1 12047 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L3003:
	.loc 1 12048 0
	movq	-16(%rbp), %rax	# pat, tmp725
	movq	%rax, %rdi	# tmp725,
	call	emit_insn	#
	.loc 1 12049 0
	movq	-128(%rbp), %rax	# target, D.30779
	jmp	.L2961	#
.L2933:
	.loc 1 12052 0
	call	gen_femms	#
	movq	%rax, %rdi	# D.30781,
	call	emit_insn	#
	.loc 1 12053 0
	movl	$0, %eax	#, D.30779
	jmp	.L2961	#
.L2934:
	.loc 1 12056 0
	movq	-128(%rbp), %rdx	# target, tmp726
	movq	-40(%rbp), %rax	# arglist, tmp727
	movq	%rax, %rsi	# tmp727,
	movl	$823, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2935:
	.loc 1 12059 0
	movq	-128(%rbp), %rdx	# target, tmp728
	movq	-40(%rbp), %rax	# arglist, tmp729
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp729,
	movl	$816, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2936:
	.loc 1 12062 0
	movq	-128(%rbp), %rdx	# target, tmp730
	movq	-40(%rbp), %rax	# arglist, tmp731
	movq	%rax, %rsi	# tmp731,
	movl	$818, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2937:
	.loc 1 12065 0
	movq	-128(%rbp), %rdx	# target, tmp732
	movq	-40(%rbp), %rax	# arglist, tmp733
	movq	%rax, %rsi	# tmp733,
	movl	$806, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2938:
	.loc 1 12068 0
	movq	-128(%rbp), %rdx	# target, tmp734
	movq	-40(%rbp), %rax	# arglist, tmp735
	movq	%rax, %rsi	# tmp735,
	movl	$811, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2939:
	.loc 1 12071 0
	movq	-128(%rbp), %rdx	# target, tmp736
	movq	-40(%rbp), %rax	# arglist, tmp737
	movq	%rax, %rsi	# tmp737,
	movl	$810, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2940:
	.loc 1 12074 0
	movq	-128(%rbp), %rdx	# target, tmp738
	movq	-40(%rbp), %rax	# arglist, tmp739
	movq	%rax, %rsi	# tmp739,
	movl	$809, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2941:
	.loc 1 12077 0
	movq	-128(%rbp), %rdx	# target, tmp740
	movq	-40(%rbp), %rax	# arglist, tmp741
	movq	%rax, %rsi	# tmp741,
	movl	$812, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2942:
	.loc 1 12080 0
	movq	-128(%rbp), %rdx	# target, tmp742
	movq	-40(%rbp), %rax	# arglist, tmp743
	movq	%rax, %rsi	# tmp743,
	movl	$813, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2943:
	.loc 1 12083 0
	movq	-128(%rbp), %rdx	# target, tmp744
	movq	-40(%rbp), %rax	# arglist, tmp745
	movq	%rax, %rsi	# tmp745,
	movl	$814, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2944:
	.loc 1 12086 0
	movq	-128(%rbp), %rdx	# target, tmp746
	movq	-40(%rbp), %rax	# arglist, tmp747
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp747,
	movl	$824, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2945:
	.loc 1 12089 0
	movq	-128(%rbp), %rdx	# target, tmp748
	movq	-40(%rbp), %rax	# arglist, tmp749
	movq	%rax, %rsi	# tmp749,
	movl	$825, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2946:
	.loc 1 12092 0
	movq	-128(%rbp), %rdx	# target, tmp750
	movq	-40(%rbp), %rax	# arglist, tmp751
	movq	%rax, %rsi	# tmp751,
	movl	$826, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2947:
	.loc 1 12095 0
	movq	-128(%rbp), %rdx	# target, tmp752
	movq	-40(%rbp), %rax	# arglist, tmp753
	movq	%rax, %rsi	# tmp753,
	movl	$828, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2948:
	.loc 1 12098 0
	movq	-128(%rbp), %rdx	# target, tmp754
	movq	-40(%rbp), %rax	# arglist, tmp755
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp755,
	movl	$827, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2949:
	.loc 1 12101 0
	movq	-128(%rbp), %rdx	# target, tmp756
	movq	-40(%rbp), %rax	# arglist, tmp757
	movq	%rax, %rsi	# tmp757,
	movl	$807, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2950:
	.loc 1 12104 0
	movq	-128(%rbp), %rdx	# target, tmp758
	movq	-40(%rbp), %rax	# arglist, tmp759
	movq	%rax, %rsi	# tmp759,
	movl	$808, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2951:
	.loc 1 12107 0
	movq	-128(%rbp), %rdx	# target, tmp760
	movq	-40(%rbp), %rax	# arglist, tmp761
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp761,
	movl	$822, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2952:
	.loc 1 12110 0
	movq	-128(%rbp), %rdx	# target, tmp762
	movq	-40(%rbp), %rax	# arglist, tmp763
	movq	%rax, %rsi	# tmp763,
	movl	$829, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2953:
	.loc 1 12113 0
	movq	-128(%rbp), %rdx	# target, tmp764
	movq	-40(%rbp), %rax	# arglist, tmp765
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp765,
	movl	$817, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2954:
	.loc 1 12116 0
	movq	-128(%rbp), %rdx	# target, tmp766
	movq	-40(%rbp), %rax	# arglist, tmp767
	movq	%rax, %rsi	# tmp767,
	movl	$819, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2955:
	.loc 1 12119 0
	movq	-128(%rbp), %rdx	# target, tmp768
	movq	-40(%rbp), %rax	# arglist, tmp769
	movq	%rax, %rsi	# tmp769,
	movl	$820, %edi	#,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L2956:
	.loc 1 12122 0
	movq	-128(%rbp), %rdx	# target, tmp770
	movq	-40(%rbp), %rax	# arglist, tmp771
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp771,
	movl	$821, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2957:
	.loc 1 12125 0
	movq	-128(%rbp), %rdx	# target, tmp772
	movq	-40(%rbp), %rax	# arglist, tmp773
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp773,
	movl	$830, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2958:
	.loc 1 12128 0
	movq	-128(%rbp), %rdx	# target, tmp774
	movq	-40(%rbp), %rax	# arglist, tmp775
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp775,
	movl	$831, %edi	#,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L2959:
	.loc 1 12131 0
	movl	$46, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -128(%rbp)	# tmp776, target
	.loc 1 12132 0
	movq	-128(%rbp), %rax	# target, tmp777
	movq	%rax, %rdi	# tmp777,
	call	gen_sse_clrv4sf	#
	movq	%rax, %rdi	# D.30781,
	call	emit_insn	#
	.loc 1 12133 0
	movq	-128(%rbp), %rax	# target, D.30779
	jmp	.L2961	#
.L2960:
	.loc 1 12136 0
	movl	$5, %edi	#,
	call	gen_reg_rtx	#
	movq	%rax, -128(%rbp)	# tmp778, target
	.loc 1 12137 0
	movq	-128(%rbp), %rax	# target, tmp779
	movq	%rax, %rdi	# tmp779,
	call	gen_mmx_clrdi	#
	movq	%rax, %rdi	# D.30781,
	call	emit_insn	#
	.loc 1 12138 0
	movq	-128(%rbp), %rax	# target, D.30779
	jmp	.L2961	#
.L3016:
	.loc 1 12141 0
	nop
	.loc 1 12144 0
	movq	$0, -80(%rbp)	#, i
	movq	$bdesc_2arg, -88(%rbp)	#, d
	jmp	.L3004	#
.L3008:
	.loc 1 12145 0
	movq	-88(%rbp), %rax	# d, tmp780
	movl	16(%rax), %eax	# d_6->code, D.30789
	cmpl	-112(%rbp), %eax	# fcode, D.30789
	jne	.L3005	#,
	.loc 1 12148 0
	movq	-88(%rbp), %rax	# d, tmp781
	movl	4(%rax), %eax	# d_6->icode, D.30790
	cmpl	$727, %eax	#, D.30790
	je	.L3006	#,
	.loc 1 12149 0
	movq	-88(%rbp), %rax	# d, tmp782
	movl	4(%rax), %eax	# d_6->icode, D.30790
	cmpl	$729, %eax	#, D.30790
	je	.L3006	#,
	.loc 1 12150 0
	movq	-88(%rbp), %rax	# d, tmp783
	movl	4(%rax), %eax	# d_6->icode, D.30790
	cmpl	$728, %eax	#, D.30790
	je	.L3006	#,
	.loc 1 12151 0
	movq	-88(%rbp), %rax	# d, tmp784
	movl	4(%rax), %eax	# d_6->icode, D.30790
	cmpl	$730, %eax	#, D.30790
	jne	.L3007	#,
.L3006:
	.loc 1 12152 0
	movq	-128(%rbp), %rdx	# target, tmp785
	movq	-40(%rbp), %rcx	# arglist, tmp786
	movq	-88(%rbp), %rax	# d, tmp787
	movq	%rcx, %rsi	# tmp786,
	movq	%rax, %rdi	# tmp787,
	call	ix86_expand_sse_compare	#
	jmp	.L2961	#
.L3007:
	.loc 1 12154 0
	movq	-88(%rbp), %rax	# d, tmp788
	movl	4(%rax), %eax	# d_6->icode, D.30790
	movq	-128(%rbp), %rdx	# target, tmp789
	movq	-40(%rbp), %rcx	# arglist, tmp790
	movq	%rcx, %rsi	# tmp790,
	movl	%eax, %edi	# D.30790,
	call	ix86_expand_binop_builtin	#
	jmp	.L2961	#
.L3005:
	.loc 1 12144 0
	addq	$1, -80(%rbp)	#, i
	addq	$32, -88(%rbp)	#, d
.L3004:
	.loc 1 12144 0 is_stmt 0 discriminator 1
	cmpq	$102, -80(%rbp)	#, i
	jbe	.L3008	#,
	.loc 1 12157 0 is_stmt 1
	movq	$0, -80(%rbp)	#, i
	movq	$bdesc_1arg, -88(%rbp)	#, d
	jmp	.L3009	#
.L3011:
	.loc 1 12158 0
	movq	-88(%rbp), %rax	# d, tmp791
	movl	16(%rax), %eax	# d_7->code, D.30789
	cmpl	-112(%rbp), %eax	# fcode, D.30789
	jne	.L3010	#,
	.loc 1 12159 0
	movq	-88(%rbp), %rax	# d, tmp792
	movl	4(%rax), %eax	# d_7->icode, D.30790
	movq	-128(%rbp), %rdx	# target, tmp793
	movq	-40(%rbp), %rsi	# arglist, tmp794
	movl	$0, %ecx	#,
	movl	%eax, %edi	# D.30790,
	call	ix86_expand_unop_builtin	#
	jmp	.L2961	#
.L3010:
	.loc 1 12157 0
	addq	$1, -80(%rbp)	#, i
	addq	$32, -88(%rbp)	#, d
.L3009:
	.loc 1 12157 0 is_stmt 0 discriminator 1
	cmpq	$8, -80(%rbp)	#, i
	jbe	.L3011	#,
	.loc 1 12161 0 is_stmt 1
	movq	$0, -80(%rbp)	#, i
	movq	$bdesc_comi, -88(%rbp)	#, d
	jmp	.L3012	#
.L3014:
	.loc 1 12162 0
	movq	-88(%rbp), %rax	# d, tmp795
	movl	16(%rax), %eax	# d_8->code, D.30789
	cmpl	-112(%rbp), %eax	# fcode, D.30789
	jne	.L3013	#,
	.loc 1 12163 0
	movq	-128(%rbp), %rdx	# target, tmp796
	movq	-40(%rbp), %rcx	# arglist, tmp797
	movq	-88(%rbp), %rax	# d, tmp798
	movq	%rcx, %rsi	# tmp797,
	movq	%rax, %rdi	# tmp798,
	call	ix86_expand_sse_comi	#
	jmp	.L2961	#
.L3013:
	.loc 1 12161 0
	addq	$1, -80(%rbp)	#, i
	addq	$32, -88(%rbp)	#, d
.L3012:
	.loc 1 12161 0 is_stmt 0 discriminator 1
	cmpq	$11, -80(%rbp)	#, i
	jbe	.L3014	#,
	.loc 1 12166 0 is_stmt 1
	movl	$0, %eax	#, D.30779
.L2961:
	.loc 1 12167 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE186:
	.size	ix86_expand_builtin, .-ix86_expand_builtin
	.globl	ix86_force_to_memory
	.type	ix86_force_to_memory, @function
ix86_force_to_memory:
.LFB187:
	.loc 1 12175 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -52(%rbp)	# mode, mode
	movq	%rsi, -64(%rbp)	# operand, operand
	.loc 1 12177 0
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.1415
	testl	%eax, %eax	# reload_completed.1415
	jne	.L3018	#,
	.loc 1 12178 0
	movl	$__FUNCTION__.16795, %edx	#,
	movl	$12178, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L3018:
	.loc 1 12179 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1416
	andl	$33554432, %eax	#, D.30793
	testl	%eax, %eax	# D.30793
	je	.L3019	#,
	.loc 1 12179 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1417
	andl	$67108864, %eax	#, D.30793
	testl	%eax, %eax	# D.30793
	jne	.L3019	#,
	.loc 1 12181 0 is_stmt 1
	movq	$-128, %rsi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30794
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.30794
	.loc 1 12182 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1419
	andl	$33554432, %eax	#, D.30793
	.loc 1 12181 0
	testl	%eax, %eax	# D.30793
	je	.L3020	#,
	.loc 1 12181 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1418
	jmp	.L3021	#
.L3020:
	.loc 1 12181 0 discriminator 2
	movl	$4, %eax	#, iftmp.1418
.L3021:
	.loc 1 12181 0 discriminator 3
	movl	%eax, %esi	# iftmp.1418,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.30794
	movl	-52(%rbp), %eax	# mode, tmp117
	movq	%rdx, %rsi	# D.30794,
	movl	%eax, %edi	# tmp117,
	call	gen_rtx_MEM	#
	movq	%rax, -40(%rbp)	# tmp118, result
	.loc 1 12185 0 is_stmt 1 discriminator 3
	movq	-64(%rbp), %rdx	# operand, operand.1420
	movq	-40(%rbp), %rax	# result, tmp119
	movq	%rdx, %rsi	# operand.1420,
	movq	%rax, %rdi	# tmp119,
	call	emit_move_insn	#
	jmp	.L3022	#
.L3019:
	.loc 1 12187 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1421
	andl	$33554432, %eax	#, D.30793
	testl	%eax, %eax	# D.30793
	je	.L3023	#,
	.loc 1 12187 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1422
	andl	$67108864, %eax	#, D.30793
	testl	%eax, %eax	# D.30793
	je	.L3023	#,
	.loc 1 12189 0 is_stmt 1
	movl	-52(%rbp), %eax	# mode, mode
	cmpl	$3, %eax	#, mode
	jb	.L3024	#,
	cmpl	$4, %eax	#, mode
	jbe	.L3025	#,
	cmpl	$5, %eax	#, mode
	je	.L3026	#,
	jmp	.L3024	#
.L3025:
	.loc 1 12193 0
	movq	-64(%rbp), %rax	# operand, operand.1423
	movq	%rax, %rsi	# operand.1423,
	movl	$5, %edi	#,
	call	gen_lowpart	#
	movq	%rax, -64(%rbp)	# operand.1424, operand
.L3026:
	.loc 1 12196 0
	movq	-64(%rbp), %rbx	# operand, operand.1425
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30794
	movq	%rax, %rdx	# D.30794,
	movl	$5, %esi	#,
	movl	$96, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rsi	# D.30794,
	movl	$5, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rcx	# operand.1425,
	movq	%rax, %rdx	# D.30794,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30794,
	call	emit_insn	#
	.loc 1 12202 0
	nop
	.loc 1 12206 0
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.30794
	movl	-52(%rbp), %eax	# mode, tmp121
	movq	%rdx, %rsi	# D.30794,
	movl	%eax, %edi	# tmp121,
	call	gen_rtx_MEM	#
	movq	%rax, -40(%rbp)	# tmp122, result
	jmp	.L3022	#
.L3024:
	.loc 1 12204 0
	movl	$__FUNCTION__.16795, %edx	#,
	movl	$12204, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L3023:
	.loc 1 12210 0
	movl	-52(%rbp), %eax	# mode, mode
	cmpl	$4, %eax	#, mode
	je	.L3029	#,
	cmpl	$5, %eax	#, mode
	je	.L3030	#,
	cmpl	$3, %eax	#, mode
	je	.L3031	#,
	jmp	.L3038	#
.L3030:
.LBB127:
	.loc 1 12215 0
	leaq	-32(%rbp), %rax	#, tmp124
	leaq	8(%rax), %rcx	#, tmp125
	leaq	-32(%rbp), %rdx	#, tmp126
	leaq	-64(%rbp), %rax	#, tmp127
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp127,
	call	split_di	#
	.loc 1 12216 0
	movq	-24(%rbp), %rbx	# operands, D.30794
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.30794
	.loc 1 12217 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1427
	andl	$33554432, %eax	#, D.30793
	.loc 1 12216 0
	testl	%eax, %eax	# D.30793
	je	.L3032	#,
	.loc 1 12216 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1426
	jmp	.L3033	#
.L3032:
	.loc 1 12216 0 discriminator 2
	movl	$4, %eax	#, iftmp.1426
.L3033:
	.loc 1 12216 0 discriminator 3
	movl	%eax, %esi	# iftmp.1426,
	movl	$96, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rsi	# D.30794,
	movl	$4, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rcx	# D.30794,
	movq	%rax, %rdx	# D.30794,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30794,
	call	emit_insn	#
	.loc 1 12222 0 is_stmt 1 discriminator 3
	movq	-32(%rbp), %rbx	# operands, D.30794
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.30794
	.loc 1 12223 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1429
	andl	$33554432, %eax	#, D.30793
	.loc 1 12222 0 discriminator 3
	testl	%eax, %eax	# D.30793
	je	.L3034	#,
	.loc 1 12222 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1428
	jmp	.L3035	#
.L3034:
	.loc 1 12222 0 discriminator 2
	movl	$4, %eax	#, iftmp.1428
.L3035:
	.loc 1 12222 0 discriminator 3
	movl	%eax, %esi	# iftmp.1428,
	movl	$96, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rsi	# D.30794,
	movl	$4, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rbx, %rcx	# D.30794,
	movq	%rax, %rdx	# D.30794,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30794,
	call	emit_insn	#
.LBE127:
	.loc 1 12229 0 is_stmt 1 discriminator 3
	jmp	.L3036	#
.L3031:
	.loc 1 12232 0
	movl	$8, %edx	#, x86_partial_reg_stall.1430
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1431
	movl	%eax, %ecx	# ix86_cpu.1432, tmp132
	sarl	%cl, %edx	# tmp132, D.30793
	movl	%edx, %eax	# D.30793, D.30793
	andl	$1, %eax	#, D.30793
	testl	%eax, %eax	# D.30793
	jne	.L3029	#,
	.loc 1 12233 0
	movq	-64(%rbp), %rax	# operand, operand.1433
	movq	%rax, %rsi	# operand.1433,
	movl	$4, %edi	#,
	call	gen_lowpart	#
	movq	%rax, -64(%rbp)	# operand.1434, operand
.L3029:
	.loc 1 12236 0
	movq	-64(%rbp), %rbx	# operand, operand.1435
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30794
	movq	%rax, %rdx	# D.30794,
	movl	$4, %esi	#,
	movl	$96, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdx	#, D.30794
	.loc 1 12237 0
	movq	-64(%rbp), %rax	# operand, operand.1436
	movzbl	2(%rax), %eax	# operand.1436_61->mode, D.30795
	.loc 1 12236 0
	movzbl	%al, %eax	# D.30795, D.30796
	movq	%rdx, %rsi	# D.30794,
	movl	%eax, %edi	# D.30796,
	call	gen_rtx_MEM	#
	movq	%rbx, %rcx	# operand.1435,
	movq	%rax, %rdx	# D.30794,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30794,
	call	emit_insn	#
	.loc 1 12242 0
	jmp	.L3036	#
.L3038:
	.loc 1 12244 0
	movl	$__FUNCTION__.16795, %edx	#,
	movl	$12244, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L3036:
	.loc 1 12246 0
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.30794
	movl	-52(%rbp), %eax	# mode, tmp128
	movq	%rdx, %rsi	# D.30794,
	movl	%eax, %edi	# tmp128,
	call	gen_rtx_MEM	#
	movq	%rax, -40(%rbp)	# tmp129, result
.L3022:
	.loc 1 12248 0
	movq	-40(%rbp), %rax	# result, D.30797
	.loc 1 12249 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE187:
	.size	ix86_force_to_memory, .-ix86_force_to_memory
	.globl	ix86_free_from_memory
	.type	ix86_free_from_memory, @function
ix86_free_from_memory:
.LFB188:
	.loc 1 12255 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# mode, mode
	.loc 1 12256 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1437
	andl	$33554432, %eax	#, D.30798
	testl	%eax, %eax	# D.30798
	je	.L3040	#,
	.loc 1 12256 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1438
	andl	$67108864, %eax	#, D.30798
	testl	%eax, %eax	# D.30798
	je	.L3039	#,
.L3040:
.LBB128:
	.loc 1 12260 0 is_stmt 1
	cmpl	$5, -20(%rbp)	#, mode
	je	.L3042	#,
	.loc 1 12260 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1439
	andl	$33554432, %eax	#, D.30798
	testl	%eax, %eax	# D.30798
	je	.L3043	#,
.L3042:
	.loc 1 12261 0 is_stmt 1
	movl	$8, -4(%rbp)	#, size
	jmp	.L3044	#
.L3043:
	.loc 1 12262 0
	cmpl	$3, -20(%rbp)	#, mode
	jne	.L3045	#,
	.loc 1 12262 0 is_stmt 0 discriminator 1
	movl	$8, %edx	#, x86_partial_reg_stall.1440
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1441
	movl	%eax, %ecx	# ix86_cpu.1442, tmp81
	sarl	%cl, %edx	# tmp81, D.30798
	movl	%edx, %eax	# D.30798, D.30798
	andl	$1, %eax	#, D.30798
	testl	%eax, %eax	# D.30798
	je	.L3045	#,
	.loc 1 12263 0 is_stmt 1
	movl	$2, -4(%rbp)	#, size
	jmp	.L3044	#
.L3045:
	.loc 1 12265 0
	movl	$4, -4(%rbp)	#, size
.L3044:
	.loc 1 12268 0
	movl	-4(%rbp), %eax	# size, tmp79
	cltq
	movq	%rax, %rsi	# D.30799,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.30800
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.30800
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1444
	andl	$33554432, %eax	#, D.30798
	testl	%eax, %eax	# D.30798
	je	.L3046	#,
	.loc 1 12268 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1443
	jmp	.L3047	#
.L3046:
	.loc 1 12268 0 discriminator 2
	movl	$4, %eax	#, iftmp.1443
.L3047:
	.loc 1 12268 0 discriminator 3
	movl	%eax, %esi	# iftmp.1443,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.30800
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30800
	movq	%rdx, %rcx	# D.30800,
	movq	%rax, %rdx	# D.30800,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.30800,
	call	emit_insn	#
.L3039:
.LBE128:
	.loc 1 12272 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE188:
	.size	ix86_free_from_memory, .-ix86_free_from_memory
	.globl	ix86_preferred_reload_class
	.type	ix86_preferred_reload_class, @function
ix86_preferred_reload_class:
.LFB189:
	.loc 1 12282 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# x, x
	movl	%esi, -12(%rbp)	# class, class
	.loc 1 12283 0
	movq	-8(%rbp), %rax	# x, tmp83
	movzwl	(%rax), %eax	# x_3(D)->code, D.30802
	cmpw	$55, %ax	#, D.30802
	jne	.L3049	#,
	.loc 1 12283 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp84
	movzbl	2(%rax), %eax	# x_3(D)->mode, D.30803
	testb	%al, %al	# D.30803
	je	.L3049	#,
	.loc 1 12286 0 is_stmt 1
	movl	-12(%rbp), %eax	# class, tmp85
	movl	$16, %esi	#,
	movl	%eax, %edi	# tmp85,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.30804
	je	.L3050	#,
	.loc 1 12287 0
	movl	$0, %eax	#, D.30801
	jmp	.L3051	#
.L3050:
	.loc 1 12289 0
	movl	-12(%rbp), %eax	# class, tmp86
	movl	$15, %esi	#,
	movl	%eax, %edi	# tmp86,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.30804
	je	.L3052	#,
	.loc 1 12289 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp87
	movq	%rax, %rdi	# tmp87,
	call	standard_80387_constant_p	#
	testl	%eax, %eax	# D.30804
	je	.L3052	#,
	.loc 1 12292 0 is_stmt 1
	movl	-12(%rbp), %eax	# class, tmp88
	movl	%eax, %esi	# tmp88,
	movl	$16, %edi	#,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.30804
	je	.L3053	#,
	.loc 1 12293 0
	movl	-12(%rbp), %eax	# class, tmp89
	movl	$12, %esi	#,
	movl	%eax, %edi	# tmp89,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.30804
	je	.L3054	#,
	.loc 1 12293 0 is_stmt 0 discriminator 1
	movl	$12, %eax	#, iftmp.1445
	jmp	.L3055	#
.L3054:
	.loc 1 12293 0 discriminator 2
	movl	$15, %eax	#, iftmp.1445
.L3055:
	.loc 1 12293 0 discriminator 3
	jmp	.L3051	#
.L3053:
	.loc 1 12296 0 is_stmt 1
	movl	-12(%rbp), %eax	# class, D.30801
	jmp	.L3051	#
.L3052:
	.loc 1 12299 0
	movl	-12(%rbp), %eax	# class, tmp90
	movl	$12, %esi	#,
	movl	%eax, %edi	# tmp90,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.30804
	je	.L3056	#,
	.loc 1 12300 0
	movl	$12, %eax	#, D.30801
	jmp	.L3051	#
.L3056:
	.loc 1 12302 0
	movl	-12(%rbp), %eax	# class, tmp91
	movl	$15, %esi	#,
	movl	%eax, %edi	# tmp91,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.30804
	jne	.L3057	#,
	.loc 1 12302 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# class, tmp92
	movl	%eax, %esi	# tmp92,
	movl	$16, %edi	#,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.30804
	je	.L3049	#,
.L3057:
	.loc 1 12303 0 is_stmt 1
	movl	$0, %eax	#, D.30801
	jmp	.L3051	#
.L3049:
	.loc 1 12305 0
	movl	-12(%rbp), %eax	# class, tmp93
	movl	%eax, %esi	# tmp93,
	movl	$17, %edi	#,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.30804
	je	.L3058	#,
	.loc 1 12305 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp94
	movzwl	(%rax), %eax	# x_3(D)->code, D.30802
	cmpw	$67, %ax	#, D.30802
	je	.L3059	#,
	movq	-8(%rbp), %rax	# x, tmp95
	movzwl	(%rax), %eax	# x_3(D)->code, D.30802
	cmpw	$68, %ax	#, D.30802
	je	.L3059	#,
	movq	-8(%rbp), %rax	# x, tmp96
	movzwl	(%rax), %eax	# x_3(D)->code, D.30802
	cmpw	$54, %ax	#, D.30802
	je	.L3059	#,
	movq	-8(%rbp), %rax	# x, tmp97
	movzwl	(%rax), %eax	# x_3(D)->code, D.30802
	cmpw	$55, %ax	#, D.30802
	je	.L3059	#,
	movq	-8(%rbp), %rax	# x, tmp98
	movzwl	(%rax), %eax	# x_3(D)->code, D.30802
	cmpw	$58, %ax	#, D.30802
	je	.L3059	#,
	movq	-8(%rbp), %rax	# x, tmp99
	movzwl	(%rax), %eax	# x_3(D)->code, D.30802
	cmpw	$134, %ax	#, D.30802
	je	.L3059	#,
	movq	-8(%rbp), %rax	# x, tmp100
	movzwl	(%rax), %eax	# x_3(D)->code, D.30802
	cmpw	$56, %ax	#, D.30802
	je	.L3059	#,
	movq	-8(%rbp), %rax	# x, tmp101
	movzwl	(%rax), %eax	# x_3(D)->code, D.30802
	cmpw	$140, %ax	#, D.30802
	jne	.L3058	#,
.L3059:
	.loc 1 12306 0 is_stmt 1
	movl	$0, %eax	#, D.30801
	jmp	.L3051	#
.L3058:
	.loc 1 12307 0
	movq	-8(%rbp), %rax	# x, tmp102
	movzbl	2(%rax), %eax	# x_3(D)->mode, D.30803
	cmpb	$2, %al	#, D.30803
	jne	.L3060	#,
	.loc 1 12307 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# class, tmp103
	movl	$8, %esi	#,
	movl	%eax, %edi	# tmp103,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.30804
	jne	.L3060	#,
	.loc 1 12308 0 is_stmt 1
	movl	$8, %eax	#, D.30801
	jmp	.L3051	#
.L3060:
	.loc 1 12309 0
	movl	-12(%rbp), %eax	# class, D.30801
.L3051:
	.loc 1 12310 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE189:
	.size	ix86_preferred_reload_class, .-ix86_preferred_reload_class
	.globl	ix86_secondary_memory_needed
	.type	ix86_secondary_memory_needed, @function
ix86_secondary_memory_needed:
.LFB190:
	.loc 1 12327 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -20(%rbp)	# class1, class1
	movl	%esi, -24(%rbp)	# class2, class2
	movl	%edx, -28(%rbp)	# mode, mode
	movl	%ecx, -32(%rbp)	# strict, strict
	.loc 1 12328 0
	movl	-20(%rbp), %eax	# class1, tmp80
	movl	$15, %esi	#,
	movl	%eax, %edi	# tmp80,
	call	reg_classes_intersect_p	#
	movl	%eax, %ebx	#, D.30805
	movl	-20(%rbp), %eax	# class1, tmp81
	movl	$15, %esi	#,
	movl	%eax, %edi	# tmp81,
	call	reg_class_subset_p	#
	cmpl	%eax, %ebx	# D.30805, D.30805
	jne	.L3062	#,
	.loc 1 12329 0
	movl	-24(%rbp), %eax	# class2, tmp82
	movl	$15, %esi	#,
	movl	%eax, %edi	# tmp82,
	call	reg_classes_intersect_p	#
	movl	%eax, %ebx	#, D.30805
	movl	-24(%rbp), %eax	# class2, tmp83
	movl	$15, %esi	#,
	movl	%eax, %edi	# tmp83,
	call	reg_class_subset_p	#
	cmpl	%eax, %ebx	# D.30805, D.30805
	jne	.L3062	#,
	.loc 1 12330 0
	movl	-20(%rbp), %eax	# class1, tmp84
	movl	%eax, %esi	# tmp84,
	movl	$16, %edi	#,
	call	reg_classes_intersect_p	#
	movl	%eax, %ebx	#, D.30805
	movl	-20(%rbp), %eax	# class1, tmp85
	movl	$16, %esi	#,
	movl	%eax, %edi	# tmp85,
	call	reg_class_subset_p	#
	cmpl	%eax, %ebx	# D.30805, D.30805
	jne	.L3062	#,
	.loc 1 12331 0
	movl	-24(%rbp), %eax	# class2, tmp86
	movl	%eax, %esi	# tmp86,
	movl	$16, %edi	#,
	call	reg_classes_intersect_p	#
	movl	%eax, %ebx	#, D.30805
	movl	-24(%rbp), %eax	# class2, tmp87
	movl	$16, %esi	#,
	movl	%eax, %edi	# tmp87,
	call	reg_class_subset_p	#
	cmpl	%eax, %ebx	# D.30805, D.30805
	jne	.L3062	#,
	.loc 1 12332 0
	movl	-20(%rbp), %eax	# class1, tmp88
	movl	%eax, %esi	# tmp88,
	movl	$17, %edi	#,
	call	reg_classes_intersect_p	#
	movl	%eax, %ebx	#, D.30805
	movl	-20(%rbp), %eax	# class1, tmp89
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp89,
	call	reg_class_subset_p	#
	cmpl	%eax, %ebx	# D.30805, D.30805
	jne	.L3062	#,
	.loc 1 12333 0
	movl	-24(%rbp), %eax	# class2, tmp90
	movl	%eax, %esi	# tmp90,
	movl	$17, %edi	#,
	call	reg_classes_intersect_p	#
	movl	%eax, %ebx	#, D.30805
	movl	-24(%rbp), %eax	# class2, tmp91
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp91,
	call	reg_class_subset_p	#
	cmpl	%eax, %ebx	# D.30805, D.30805
	je	.L3063	#,
.L3062:
	.loc 1 12335 0
	cmpl	$0, -32(%rbp)	#, strict
	je	.L3064	#,
	.loc 1 12336 0
	movl	$__FUNCTION__.16821, %edx	#,
	movl	$12336, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L3064:
	.loc 1 12338 0
	movl	$1, %eax	#, D.30805
	jmp	.L3065	#
.L3063:
	.loc 1 12340 0
	movl	-20(%rbp), %eax	# class1, tmp92
	movl	$15, %esi	#,
	movl	%eax, %edi	# tmp92,
	call	reg_class_subset_p	#
	movl	%eax, %ebx	#, D.30805
	movl	-24(%rbp), %eax	# class2, tmp93
	movl	$15, %esi	#,
	movl	%eax, %edi	# tmp93,
	call	reg_class_subset_p	#
	.loc 1 12343 0
	cmpl	%eax, %ebx	# D.30805, D.30805
	jne	.L3066	#,
	.loc 1 12341 0
	movl	-20(%rbp), %eax	# class1, tmp94
	movl	$16, %esi	#,
	movl	%eax, %edi	# tmp94,
	call	reg_class_subset_p	#
	movl	%eax, %ebx	#, D.30805
	movl	-24(%rbp), %eax	# class2, tmp95
	movl	$16, %esi	#,
	movl	%eax, %edi	# tmp95,
	call	reg_class_subset_p	#
	cmpl	%eax, %ebx	# D.30805, D.30805
	je	.L3067	#,
	.loc 1 12342 0
	cmpl	$4, -28(%rbp)	#, mode
	jne	.L3066	#,
.L3067:
	.loc 1 12343 0
	movl	-20(%rbp), %eax	# class1, tmp96
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp96,
	call	reg_class_subset_p	#
	movl	%eax, %ebx	#, D.30805
	movl	-24(%rbp), %eax	# class2, tmp97
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp97,
	call	reg_class_subset_p	#
	cmpl	%eax, %ebx	# D.30805, D.30805
	je	.L3068	#,
	.loc 1 12344 0
	cmpl	$4, -28(%rbp)	#, mode
	je	.L3068	#,
.L3066:
	.loc 1 12343 0 discriminator 1
	movl	$1, %eax	#, iftmp.1446
	jmp	.L3069	#
.L3068:
	.loc 1 12343 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.1446
.L3069:
.L3065:
	.loc 1 12345 0 is_stmt 1
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE190:
	.size	ix86_secondary_memory_needed, .-ix86_secondary_memory_needed
	.globl	ix86_register_move_cost
	.type	ix86_register_move_cost, @function
ix86_register_move_cost:
.LFB191:
	.loc 1 12356 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# mode, mode
	movl	%esi, -40(%rbp)	# class1, class1
	movl	%edx, -44(%rbp)	# class2, class2
	.loc 1 12361 0
	movl	-36(%rbp), %edx	# mode, tmp112
	movl	-44(%rbp), %esi	# class2, tmp113
	movl	-40(%rbp), %eax	# class1, tmp114
	movl	$0, %ecx	#,
	movl	%eax, %edi	# tmp114,
	call	ix86_secondary_memory_needed	#
	testl	%eax, %eax	# D.30806
	je	.L3071	#,
.LBB129:
	.loc 1 12363 0
	movl	$0, -20(%rbp)	#, add_cost
	.loc 1 12364 0
	movl	-40(%rbp), %eax	# class1, tmp115
	movl	$12, %esi	#,
	movl	%eax, %edi	# tmp115,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.30806
	jne	.L3072	#,
	.loc 1 12364 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %eax	# mode, mode.1449
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30807
	cmpl	$5, %eax	#, D.30807
	je	.L3073	#,
	.loc 1 12364 0 discriminator 2
	movl	-36(%rbp), %eax	# mode, mode.1450
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30807
	cmpl	$6, %eax	#, D.30807
	jne	.L3074	#,
.L3073:
	.loc 1 12364 0 discriminator 1
	movl	$2, %eax	#, iftmp.1448
	jmp	.L3075	#
.L3074:
	movl	$1, %eax	#, iftmp.1448
.L3075:
	.loc 1 12364 0 discriminator 3
	movl	%eax, %ebx	# iftmp.1448, iftmp.1447
	jmp	.L3076	#
.L3072:
	.loc 1 12364 0 discriminator 2
	cmpl	$18, -36(%rbp)	#, mode
	je	.L3077	#,
	.loc 1 12364 0 discriminator 1
	movl	-36(%rbp), %eax	# mode, iftmp.1451
	jmp	.L3078	#
.L3077:
	.loc 1 12364 0 discriminator 2
	movl	$17, %eax	#, iftmp.1451
.L3078:
	.loc 1 12364 0 discriminator 3
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30808
	movzbl	%al, %edx	# D.30808, D.30806
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1453
	andl	$33554432, %eax	#, D.30806
	testl	%eax, %eax	# D.30806
	je	.L3079	#,
	.loc 1 12364 0 discriminator 1
	movl	$8, %eax	#, iftmp.1452
	jmp	.L3080	#
.L3079:
	.loc 1 12364 0 discriminator 2
	movl	$4, %eax	#, iftmp.1452
.L3080:
	.loc 1 12364 0 discriminator 3
	addl	%edx, %eax	# D.30806, D.30806
	subl	$1, %eax	#, D.30806
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1455
	andl	$33554432, %edx	#, D.30806
	testl	%edx, %edx	# D.30806
	je	.L3081	#,
	.loc 1 12364 0 discriminator 1
	movl	$8, %ecx	#, iftmp.1454
	jmp	.L3082	#
.L3081:
	.loc 1 12364 0 discriminator 2
	movl	$4, %ecx	#, iftmp.1454
.L3082:
	.loc 1 12364 0 discriminator 3
	cltd
	idivl	%ecx	# iftmp.1454
	movl	%eax, %ebx	# tmp119, iftmp.1447
.L3076:
	movl	-44(%rbp), %eax	# class2, tmp121
	movl	$12, %esi	#,
	movl	%eax, %edi	# tmp121,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.30806
	jne	.L3083	#,
	.loc 1 12364 0 discriminator 1
	movl	-36(%rbp), %eax	# mode, mode.1458
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30807
	cmpl	$5, %eax	#, D.30807
	je	.L3084	#,
	.loc 1 12364 0 discriminator 2
	movl	-36(%rbp), %eax	# mode, mode.1459
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30807
	cmpl	$6, %eax	#, D.30807
	jne	.L3085	#,
.L3084:
	.loc 1 12364 0 discriminator 1
	movl	$2, %eax	#, iftmp.1457
	jmp	.L3086	#
.L3085:
	movl	$1, %eax	#, iftmp.1457
.L3086:
	jmp	.L3087	#
.L3083:
	.loc 1 12364 0 discriminator 2
	cmpl	$18, -36(%rbp)	#, mode
	je	.L3088	#,
	.loc 1 12364 0 discriminator 1
	movl	-36(%rbp), %eax	# mode, iftmp.1460
	jmp	.L3089	#
.L3088:
	.loc 1 12364 0 discriminator 2
	movl	$17, %eax	#, iftmp.1460
.L3089:
	.loc 1 12364 0 discriminator 3
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30808
	movzbl	%al, %edx	# D.30808, D.30806
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1462
	andl	$33554432, %eax	#, D.30806
	testl	%eax, %eax	# D.30806
	je	.L3090	#,
	.loc 1 12364 0 discriminator 1
	movl	$8, %eax	#, iftmp.1461
	jmp	.L3091	#
.L3090:
	.loc 1 12364 0 discriminator 2
	movl	$4, %eax	#, iftmp.1461
.L3091:
	.loc 1 12364 0 discriminator 3
	addl	%edx, %eax	# D.30806, D.30806
	subl	$1, %eax	#, D.30806
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1464
	andl	$33554432, %edx	#, D.30806
	testl	%edx, %edx	# D.30806
	je	.L3092	#,
	.loc 1 12364 0 discriminator 1
	movl	$8, %ecx	#, iftmp.1463
	jmp	.L3093	#
.L3092:
	.loc 1 12364 0 discriminator 2
	movl	$4, %ecx	#, iftmp.1463
.L3093:
	.loc 1 12364 0 discriminator 3
	cltd
	idivl	%ecx	# iftmp.1463
.L3087:
	cmpl	%eax, %ebx	# iftmp.1456, iftmp.1447
	jle	.L3094	#,
	.loc 1 12365 0 is_stmt 1
	movl	$20, -20(%rbp)	#, add_cost
.L3094:
	.loc 1 12366 0
	movl	-40(%rbp), %ecx	# class1, tmp127
	movl	-36(%rbp), %eax	# mode, tmp128
	movl	$0, %edx	#,
	movl	%ecx, %esi	# tmp127,
	movl	%eax, %edi	# tmp128,
	call	ix86_memory_move_cost	#
	movl	%eax, %ebx	#, D.30806
	.loc 1 12367 0
	movl	-44(%rbp), %ecx	# class2, tmp129
	movl	-36(%rbp), %eax	# mode, tmp130
	movl	$1, %edx	#,
	movl	%ecx, %esi	# tmp129,
	movl	%eax, %edi	# tmp130,
	call	ix86_memory_move_cost	#
	leal	(%rbx,%rax), %edx	#, D.30806
	.loc 1 12366 0
	movl	-20(%rbp), %eax	# add_cost, tmp131
	addl	%edx, %eax	# D.30806, D.30806
	jmp	.L3095	#
.L3071:
.LBE129:
	.loc 1 12370 0
	movl	-40(%rbp), %eax	# class1, tmp132
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp132,
	call	reg_class_subset_p	#
	movl	%eax, %ebx	#, D.30806
	movl	-44(%rbp), %eax	# class2, tmp133
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp133,
	call	reg_class_subset_p	#
	cmpl	%eax, %ebx	# D.30806, D.30806
	jne	.L3096	#,
	.loc 1 12371 0
	movl	-40(%rbp), %eax	# class1, tmp134
	movl	$16, %esi	#,
	movl	%eax, %edi	# tmp134,
	call	reg_class_subset_p	#
	movl	%eax, %ebx	#, D.30806
	movl	-44(%rbp), %eax	# class2, tmp135
	movl	$16, %esi	#,
	movl	%eax, %edi	# tmp135,
	call	reg_class_subset_p	#
	cmpl	%eax, %ebx	# D.30806, D.30806
	je	.L3097	#,
.L3096:
	.loc 1 12372 0
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1465
	movl	148(%rax), %eax	# ix86_cost.1465_83->mmxsse_to_integer, D.30806
	jmp	.L3095	#
.L3097:
	.loc 1 12373 0
	movl	-40(%rbp), %eax	# class1, tmp136
	movl	$15, %esi	#,
	movl	%eax, %edi	# tmp136,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.30806
	je	.L3098	#,
	.loc 1 12374 0
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1466
	movl	72(%rax), %eax	# ix86_cost.1466_74->fp_move, D.30806
	jmp	.L3095	#
.L3098:
	.loc 1 12375 0
	movl	-40(%rbp), %eax	# class1, tmp137
	movl	%eax, %esi	# tmp137,
	movl	$16, %edi	#,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.30806
	je	.L3099	#,
	.loc 1 12376 0
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1467
	movl	120(%rax), %eax	# ix86_cost.1467_77->sse_move, D.30806
	jmp	.L3095	#
.L3099:
	.loc 1 12377 0
	movl	-40(%rbp), %eax	# class1, tmp138
	movl	%eax, %esi	# tmp138,
	movl	$17, %edi	#,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.30806
	je	.L3100	#,
	.loc 1 12378 0
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1468
	movl	100(%rax), %eax	# ix86_cost.1468_80->mmx_move, D.30806
	jmp	.L3095	#
.L3100:
	.loc 1 12379 0
	movl	$2, %eax	#, D.30806
.L3095:
	.loc 1 12380 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE191:
	.size	ix86_register_move_cost, .-ix86_register_move_cost
	.globl	ix86_hard_regno_mode_ok
	.type	ix86_hard_regno_mode_ok, @function
ix86_hard_regno_mode_ok:
.LFB192:
	.loc 1 12387 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# regno, regno
	movl	%esi, -8(%rbp)	# mode, mode
	.loc 1 12389 0
	cmpl	$17, -4(%rbp)	#, regno
	je	.L3102	#,
	.loc 1 12389 0 is_stmt 0 discriminator 1
	cmpl	$18, -4(%rbp)	#, regno
	jne	.L3103	#,
.L3102:
	.loc 1 12390 0 is_stmt 1
	movl	-8(%rbp), %eax	# mode, mode.1469
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30810
	cmpl	$4, %eax	#, D.30810
	sete	%al	#, D.30811
	movzbl	%al, %eax	# D.30811, D.30809
	jmp	.L3104	#
.L3103:
	.loc 1 12391 0
	movl	-8(%rbp), %eax	# mode, mode.1470
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30810
	cmpl	$4, %eax	#, D.30810
	je	.L3105	#,
	.loc 1 12392 0
	movl	-8(%rbp), %eax	# mode, mode.1471
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30810
	testl	%eax, %eax	# D.30810
	je	.L3105	#,
	.loc 1 12393 0
	movl	-8(%rbp), %eax	# mode, mode.1472
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30810
	cmpl	$3, %eax	#, D.30810
	jne	.L3106	#,
.L3105:
	.loc 1 12394 0
	movl	$0, %eax	#, D.30809
	jmp	.L3104	#
.L3106:
	.loc 1 12395 0
	cmpl	$7, -4(%rbp)	#, regno
	jle	.L3107	#,
	.loc 1 12395 0 is_stmt 0 discriminator 1
	cmpl	$15, -4(%rbp)	#, regno
	jg	.L3107	#,
	.loc 1 12396 0 is_stmt 1
	cmpl	$15, -8(%rbp)	#, mode
	je	.L3108	#,
	.loc 1 12396 0 is_stmt 0 discriminator 2
	cmpl	$16, -8(%rbp)	#, mode
	je	.L3108	#,
	.loc 1 12396 0 discriminator 1
	cmpl	$18, -8(%rbp)	#, mode
	je	.L3108	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1474
	andl	$33554432, %eax	#, D.30809
	testl	%eax, %eax	# D.30809
	jne	.L3109	#,
	cmpl	$17, -8(%rbp)	#, mode
	je	.L3108	#,
.L3109:
	.loc 1 12396 0 discriminator 2
	cmpl	$21, -8(%rbp)	#, mode
	je	.L3108	#,
	.loc 1 12396 0 discriminator 1
	cmpl	$22, -8(%rbp)	#, mode
	je	.L3108	#,
	cmpl	$24, -8(%rbp)	#, mode
	je	.L3108	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1475
	andl	$33554432, %eax	#, D.30809
	testl	%eax, %eax	# D.30809
	jne	.L3110	#,
	.loc 1 12396 0 discriminator 3
	cmpl	$23, -8(%rbp)	#, mode
	jne	.L3110	#,
.L3108:
	.loc 1 12396 0 discriminator 1
	movl	$1, %eax	#, iftmp.1473
	jmp	.L3111	#
.L3110:
	.loc 1 12396 0 discriminator 4
	movl	$0, %eax	#, iftmp.1473
.L3111:
	.loc 1 12396 0 discriminator 5
	jmp	.L3104	#
.L3107:
	.loc 1 12397 0 is_stmt 1
	cmpl	$20, -4(%rbp)	#, regno
	jle	.L3112	#,
	.loc 1 12397 0 is_stmt 0 discriminator 1
	cmpl	$28, -4(%rbp)	#, regno
	jle	.L3113	#,
.L3112:
	.loc 1 12397 0 discriminator 2
	cmpl	$44, -4(%rbp)	#, regno
	jle	.L3114	#,
	.loc 1 12397 0 discriminator 1
	cmpl	$52, -4(%rbp)	#, regno
	jg	.L3114	#,
.L3113:
	.loc 1 12398 0 is_stmt 1
	cmpl	$6, -8(%rbp)	#, mode
	je	.L3115	#,
	.loc 1 12398 0 is_stmt 0 discriminator 2
	cmpl	$46, -8(%rbp)	#, mode
	je	.L3115	#,
	.loc 1 12398 0 discriminator 1
	cmpl	$37, -8(%rbp)	#, mode
	je	.L3115	#,
	cmpl	$15, -8(%rbp)	#, mode
	je	.L3115	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1477
	andl	$262144, %eax	#, D.30809
	testl	%eax, %eax	# D.30809
	je	.L3116	#,
	.loc 1 12398 0 discriminator 3
	cmpl	$16, -8(%rbp)	#, mode
	je	.L3115	#,
	.loc 1 12398 0 discriminator 1
	cmpl	$5, -8(%rbp)	#, mode
	je	.L3115	#,
	cmpl	$39, -8(%rbp)	#, mode
	je	.L3115	#,
	cmpl	$36, -8(%rbp)	#, mode
	je	.L3115	#,
	cmpl	$33, -8(%rbp)	#, mode
	je	.L3115	#,
	cmpl	$4, -8(%rbp)	#, mode
	jne	.L3116	#,
.L3115:
	movl	$1, %eax	#, iftmp.1476
	jmp	.L3117	#
.L3116:
	.loc 1 12398 0 discriminator 4
	movl	$0, %eax	#, iftmp.1476
.L3117:
	.loc 1 12398 0 discriminator 5
	jmp	.L3104	#
.L3114:
	.loc 1 12399 0 is_stmt 1
	cmpl	$28, -4(%rbp)	#, regno
	jle	.L3118	#,
	.loc 1 12399 0 is_stmt 0 discriminator 1
	cmpl	$36, -4(%rbp)	#, regno
	jg	.L3118	#,
	.loc 1 12400 0 is_stmt 1
	cmpl	$5, -8(%rbp)	#, mode
	je	.L3119	#,
	.loc 1 12400 0 is_stmt 0 discriminator 2
	cmpl	$39, -8(%rbp)	#, mode
	je	.L3119	#,
	.loc 1 12400 0 discriminator 1
	cmpl	$36, -8(%rbp)	#, mode
	je	.L3119	#,
	cmpl	$33, -8(%rbp)	#, mode
	je	.L3119	#,
	cmpl	$4, -8(%rbp)	#, mode
	je	.L3119	#,
	cmpl	$44, -8(%rbp)	#, mode
	je	.L3119	#,
	.loc 1 12400 0 discriminator 3
	cmpl	$15, -8(%rbp)	#, mode
	jne	.L3120	#,
.L3119:
	.loc 1 12400 0 discriminator 1
	movl	$1, %eax	#, iftmp.1478
	jmp	.L3121	#
.L3120:
	movl	$0, %eax	#, iftmp.1478
.L3121:
	.loc 1 12400 0 discriminator 4
	jmp	.L3104	#
.L3118:
	.loc 1 12403 0 is_stmt 1
	cmpl	$2, -8(%rbp)	#, mode
	je	.L3122	#,
	.loc 1 12403 0 is_stmt 0 discriminator 1
	cmpl	$3, -8(%rbp)	#, mode
	je	.L3122	#,
	cmpl	$4, -8(%rbp)	#, mode
	je	.L3122	#,
	cmpl	$5, -8(%rbp)	#, mode
	je	.L3122	#,
	cmpl	$25, -8(%rbp)	#, mode
	je	.L3122	#,
	cmpl	$26, -8(%rbp)	#, mode
	je	.L3122	#,
	cmpl	$27, -8(%rbp)	#, mode
	je	.L3122	#,
	cmpl	$28, -8(%rbp)	#, mode
	je	.L3122	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1479
	andl	$33554432, %eax	#, D.30809
	testl	%eax, %eax	# D.30809
	je	.L3123	#,
	.loc 1 12403 0 discriminator 2
	cmpl	$6, -8(%rbp)	#, mode
	je	.L3122	#,
	.loc 1 12403 0 discriminator 1
	cmpl	$29, -8(%rbp)	#, mode
	je	.L3122	#,
.L3123:
	cmpl	$15, -8(%rbp)	#, mode
	je	.L3122	#,
	cmpl	$16, -8(%rbp)	#, mode
	je	.L3122	#,
	cmpl	$18, -8(%rbp)	#, mode
	je	.L3122	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1480
	andl	$33554432, %eax	#, D.30809
	testl	%eax, %eax	# D.30809
	jne	.L3124	#,
	.loc 1 12403 0 discriminator 2
	cmpl	$17, -8(%rbp)	#, mode
	je	.L3122	#,
.L3124:
	.loc 1 12403 0 discriminator 1
	cmpl	$21, -8(%rbp)	#, mode
	je	.L3122	#,
	cmpl	$22, -8(%rbp)	#, mode
	je	.L3122	#,
	cmpl	$24, -8(%rbp)	#, mode
	je	.L3122	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1481
	andl	$33554432, %eax	#, D.30809
	testl	%eax, %eax	# D.30809
	jne	.L3125	#,
	cmpl	$23, -8(%rbp)	#, mode
	je	.L3122	#,
.L3125:
	.loc 1 12404 0 is_stmt 1
	movl	$0, %eax	#, D.30809
	jmp	.L3104	#
.L3122:
	.loc 1 12407 0
	cmpl	$3, -4(%rbp)	#, regno
	jle	.L3126	#,
	.loc 1 12407 0 is_stmt 0 discriminator 1
	cmpl	$2, -8(%rbp)	#, mode
	jne	.L3126	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1482
	andl	$33554432, %eax	#, D.30809
	testl	%eax, %eax	# D.30809
	je	.L3127	#,
.L3126:
	.loc 1 12408 0 is_stmt 1
	movl	$1, %eax	#, D.30809
	jmp	.L3104	#
.L3127:
	.loc 1 12409 0
	movl	reload_in_progress(%rip), %eax	# reload_in_progress, reload_in_progress.1484
	testl	%eax, %eax	# reload_in_progress.1484
	jne	.L3128	#,
	.loc 1 12409 0 is_stmt 0 discriminator 2
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.1485
	testl	%eax, %eax	# reload_completed.1485
	jne	.L3128	#,
	.loc 1 12409 0 discriminator 1
	movl	$8, %edx	#, x86_partial_reg_stall.1486
	movl	ix86_cpu(%rip), %eax	# ix86_cpu, ix86_cpu.1487
	movl	%eax, %ecx	# ix86_cpu.1488, tmp101
	sarl	%cl, %edx	# tmp101, D.30809
	movl	%edx, %eax	# D.30809, D.30809
	andl	$1, %eax	#, D.30809
	testl	%eax, %eax	# D.30809
	jne	.L3129	#,
.L3128:
	movl	$1, %eax	#, iftmp.1483
	jmp	.L3130	#
.L3129:
	.loc 1 12409 0 discriminator 3
	movl	$0, %eax	#, iftmp.1483
.L3130:
.L3104:
	.loc 1 12410 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE192:
	.size	ix86_hard_regno_mode_ok, .-ix86_hard_regno_mode_ok
	.globl	ix86_memory_move_cost
	.type	ix86_memory_move_cost, @function
ix86_memory_move_cost:
.LFB193:
	.loc 1 12428 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# mode, mode
	movl	%esi, -24(%rbp)	# class, class
	movl	%edx, -28(%rbp)	# in, in
	.loc 1 12429 0
	movl	-24(%rbp), %eax	# class, tmp101
	movl	$15, %esi	#,
	movl	%eax, %edi	# tmp101,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.30812
	je	.L3132	#,
.LBB130:
	.loc 1 12432 0
	movl	-20(%rbp), %eax	# mode, mode
	cmpl	$16, %eax	#, mode
	je	.L3134	#,
	cmpl	$16, %eax	#, mode
	ja	.L3135	#,
	cmpl	$15, %eax	#, mode
	je	.L3136	#,
	jmp	.L3133	#
.L3135:
	cmpl	$18, %eax	#, mode
	ja	.L3133	#,
	jmp	.L3170	#
.L3136:
	.loc 1 12435 0
	movl	$0, -12(%rbp)	#, index
	.loc 1 12436 0
	jmp	.L3138	#
.L3134:
	.loc 1 12438 0
	movl	$1, -12(%rbp)	#, index
	.loc 1 12439 0
	jmp	.L3138	#
.L3170:
	.loc 1 12442 0
	movl	$2, -12(%rbp)	#, index
	.loc 1 12443 0
	jmp	.L3138	#
.L3133:
	.loc 1 12445 0
	movl	$100, %eax	#, D.30812
	jmp	.L3139	#
.L3138:
	.loc 1 12447 0
	cmpl	$0, -28(%rbp)	#, in
	je	.L3140	#,
	.loc 1 12447 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1490
	movl	-12(%rbp), %edx	# index, tmp104
	movslq	%edx, %rdx	# tmp104, tmp103
	addq	$16, %rdx	#, tmp105
	movl	12(%rax,%rdx,4), %eax	# ix86_cost.1490_21->fp_load, iftmp.1489
	jmp	.L3141	#
.L3140:
	.loc 1 12447 0 discriminator 2
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1491
	movl	-12(%rbp), %edx	# index, tmp107
	movslq	%edx, %rdx	# tmp107, tmp106
	addq	$20, %rdx	#, tmp108
	movl	8(%rax,%rdx,4), %eax	# ix86_cost.1491_23->fp_store, iftmp.1489
.L3141:
	.loc 1 12447 0 discriminator 3
	jmp	.L3139	#
.L3132:
.LBE130:
	.loc 1 12449 0 is_stmt 1
	movl	-24(%rbp), %eax	# class, tmp109
	movl	$16, %esi	#,
	movl	%eax, %edi	# tmp109,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.30812
	je	.L3142	#,
.LBB131:
	.loc 1 12452 0
	movl	-20(%rbp), %eax	# mode, mode.1492
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30813
	movzbl	%al, %eax	# D.30813, D.30812
	cmpl	$8, %eax	#, D.30812
	je	.L3144	#,
	cmpl	$16, %eax	#, D.30812
	je	.L3145	#,
	cmpl	$4, %eax	#, D.30812
	jne	.L3171	#,
	.loc 1 12455 0
	movl	$0, -8(%rbp)	#, index
	.loc 1 12456 0
	jmp	.L3147	#
.L3144:
	.loc 1 12458 0
	movl	$1, -8(%rbp)	#, index
	.loc 1 12459 0
	jmp	.L3147	#
.L3145:
	.loc 1 12461 0
	movl	$2, -8(%rbp)	#, index
	.loc 1 12462 0
	jmp	.L3147	#
.L3171:
	.loc 1 12464 0
	movl	$100, %eax	#, D.30812
	jmp	.L3139	#
.L3147:
	.loc 1 12466 0
	cmpl	$0, -28(%rbp)	#, in
	je	.L3148	#,
	.loc 1 12466 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1494
	movl	-8(%rbp), %edx	# index, tmp112
	movslq	%edx, %rdx	# tmp112, tmp111
	addq	$28, %rdx	#, tmp113
	movl	12(%rax,%rdx,4), %eax	# ix86_cost.1494_34->sse_load, iftmp.1493
	jmp	.L3149	#
.L3148:
	.loc 1 12466 0 discriminator 2
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1495
	movl	-8(%rbp), %edx	# index, tmp115
	movslq	%edx, %rdx	# tmp115, tmp114
	addq	$32, %rdx	#, tmp116
	movl	8(%rax,%rdx,4), %eax	# ix86_cost.1495_36->sse_store, iftmp.1493
.L3149:
	.loc 1 12466 0 discriminator 3
	jmp	.L3139	#
.L3142:
.LBE131:
	.loc 1 12468 0 is_stmt 1
	movl	-24(%rbp), %eax	# class, tmp117
	movl	$17, %esi	#,
	movl	%eax, %edi	# tmp117,
	call	reg_class_subset_p	#
	testl	%eax, %eax	# D.30812
	je	.L3150	#,
.LBB132:
	.loc 1 12471 0
	movl	-20(%rbp), %eax	# mode, mode.1496
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30813
	movzbl	%al, %eax	# D.30813, D.30812
	cmpl	$4, %eax	#, D.30812
	je	.L3152	#,
	cmpl	$8, %eax	#, D.30812
	je	.L3153	#,
	jmp	.L3172	#
.L3152:
	.loc 1 12474 0
	movl	$0, -4(%rbp)	#, index
	.loc 1 12475 0
	jmp	.L3154	#
.L3153:
	.loc 1 12477 0
	movl	$1, -4(%rbp)	#, index
	.loc 1 12478 0
	jmp	.L3154	#
.L3172:
	.loc 1 12480 0
	movl	$100, %eax	#, D.30812
	jmp	.L3139	#
.L3154:
	.loc 1 12482 0
	cmpl	$0, -28(%rbp)	#, in
	je	.L3155	#,
	.loc 1 12482 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1498
	movl	-4(%rbp), %edx	# index, tmp120
	movslq	%edx, %rdx	# tmp120, tmp119
	addq	$24, %rdx	#, tmp121
	movl	8(%rax,%rdx,4), %eax	# ix86_cost.1498_46->mmx_load, iftmp.1497
	jmp	.L3156	#
.L3155:
	.loc 1 12482 0 discriminator 2
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1499
	movl	-4(%rbp), %edx	# index, tmp123
	movslq	%edx, %rdx	# tmp123, tmp122
	addq	$28, %rdx	#, tmp124
	movl	(%rax,%rdx,4), %eax	# ix86_cost.1499_48->mmx_store, iftmp.1497
.L3156:
	.loc 1 12482 0 discriminator 3
	jmp	.L3139	#
.L3150:
.LBE132:
	.loc 1 12484 0 is_stmt 1
	movl	-20(%rbp), %eax	# mode, mode.1500
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.30813
	movzbl	%al, %eax	# D.30813, D.30812
	cmpl	$1, %eax	#, D.30812
	je	.L3158	#,
	cmpl	$2, %eax	#, D.30812
	je	.L3159	#,
	jmp	.L3173	#
.L3158:
	.loc 1 12487 0
	cmpl	$0, -28(%rbp)	#, in
	je	.L3160	#,
	.loc 1 12488 0
	movl	-24(%rbp), %eax	# class, tmp126
	movl	$8, %esi	#,
	movl	%eax, %edi	# tmp126,
	call	reg_class_subset_p	#
	.loc 1 12489 0
	testl	%eax, %eax	# D.30812
	je	.L3161	#,
	.loc 1 12488 0
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1502
	.loc 1 12489 0
	movl	48(%rax), %eax	# ix86_cost.1502_55->int_load, iftmp.1501
	jmp	.L3162	#
.L3161:
	.loc 1 12489 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1503
	movl	44(%rax), %eax	# ix86_cost.1503_57->movzbl_load, iftmp.1501
.L3162:
	.loc 1 12488 0 is_stmt 1
	jmp	.L3139	#
.L3160:
	.loc 1 12491 0
	movl	-24(%rbp), %eax	# class, tmp127
	movl	$8, %esi	#,
	movl	%eax, %edi	# tmp127,
	call	reg_class_subset_p	#
	.loc 1 12492 0
	testl	%eax, %eax	# D.30812
	je	.L3163	#,
	.loc 1 12491 0
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1505
	.loc 1 12492 0
	movl	60(%rax), %eax	# ix86_cost.1505_61->int_store, iftmp.1504
	jmp	.L3164	#
.L3163:
	.loc 1 12492 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1506
	movl	60(%rax), %eax	# ix86_cost.1506_63->int_store, D.30812
	addl	$4, %eax	#, iftmp.1504
.L3164:
	.loc 1 12491 0 is_stmt 1
	jmp	.L3139	#
.L3159:
	.loc 1 12495 0
	cmpl	$0, -28(%rbp)	#, in
	je	.L3165	#,
	.loc 1 12495 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1508
	movl	52(%rax), %eax	# ix86_cost.1508_67->int_load, iftmp.1507
	jmp	.L3166	#
.L3165:
	.loc 1 12495 0 discriminator 2
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1509
	movl	64(%rax), %eax	# ix86_cost.1509_69->int_store, iftmp.1507
.L3166:
	.loc 1 12495 0 discriminator 3
	jmp	.L3139	#
.L3173:
	.loc 1 12498 0 is_stmt 1
	cmpl	$18, -20(%rbp)	#, mode
	jne	.L3167	#,
	.loc 1 12499 0
	movl	$17, -20(%rbp)	#, mode
.L3167:
	.loc 1 12500 0
	cmpl	$0, -28(%rbp)	#, in
	je	.L3168	#,
	.loc 1 12500 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1511
	movl	56(%rax), %eax	# ix86_cost.1511_73->int_load, iftmp.1510
	jmp	.L3169	#
.L3168:
	.loc 1 12500 0 discriminator 2
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.1512
	movl	68(%rax), %eax	# ix86_cost.1512_75->int_store, iftmp.1510
.L3169:
	.loc 1 12501 0 is_stmt 1 discriminator 3
	movl	-20(%rbp), %edx	# mode, mode.1513
	movslq	%edx, %rdx	# mode.1513, tmp128
	movzbl	mode_size(%rdx), %edx	# mode_size, D.30813
	movzbl	%dl, %edx	# D.30813, D.30812
	imull	%edx, %eax	# D.30812, D.30812
	.loc 1 12500 0 discriminator 3
	leal	3(%rax), %edx	#, tmp130
	testl	%eax, %eax	# tmp129
	cmovs	%edx, %eax	# tmp130,, tmp129
	sarl	$2, %eax	#, tmp131
.L3139:
	.loc 1 12503 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE193:
	.size	ix86_memory_move_cost, .-ix86_memory_move_cost
	.globl	x86_order_regs_for_local_alloc
	.type	x86_order_regs_for_local_alloc, @function
x86_order_regs_for_local_alloc:
.LFB194:
	.loc 1 12522 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 12523 0
	movl	$0, -8(%rbp)	#, pos
	.loc 1 12527 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L3175	#
.L3178:
	.loc 1 12528 0
	cmpl	$7, -4(%rbp)	#, i
	jle	.L3176	#,
	.loc 1 12528 0 is_stmt 0 discriminator 2
	cmpl	$36, -4(%rbp)	#, i
	jle	.L3177	#,
	.loc 1 12528 0 discriminator 1
	cmpl	$44, -4(%rbp)	#, i
	jg	.L3177	#,
.L3176:
	movl	-4(%rbp), %eax	# i, tmp74
	cltq
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.30815
	testb	%al, %al	# D.30815
	je	.L3177	#,
	.loc 1 12529 0 is_stmt 1
	movl	-8(%rbp), %eax	# pos, pos.1514
	leal	1(%rax), %edx	#, tmp75
	movl	%edx, -8(%rbp)	# tmp75, pos
	cltq
	movl	-4(%rbp), %edx	# i, tmp77
	movl	%edx, reg_alloc_order(,%rax,4)	# tmp77, reg_alloc_order
.L3177:
	.loc 1 12527 0
	addl	$1, -4(%rbp)	#, i
.L3175:
	.loc 1 12527 0 is_stmt 0 discriminator 1
	cmpl	$52, -4(%rbp)	#, i
	jle	.L3178	#,
	.loc 1 12532 0 is_stmt 1
	movl	$0, -4(%rbp)	#, i
	jmp	.L3179	#
.L3182:
	.loc 1 12533 0
	cmpl	$7, -4(%rbp)	#, i
	jle	.L3180	#,
	.loc 1 12533 0 is_stmt 0 discriminator 2
	cmpl	$36, -4(%rbp)	#, i
	jle	.L3181	#,
	.loc 1 12533 0 discriminator 1
	cmpl	$44, -4(%rbp)	#, i
	jg	.L3181	#,
.L3180:
	movl	-4(%rbp), %eax	# i, tmp79
	cltq
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.30815
	testb	%al, %al	# D.30815
	jne	.L3181	#,
	.loc 1 12534 0 is_stmt 1
	movl	-8(%rbp), %eax	# pos, pos.1515
	leal	1(%rax), %edx	#, tmp80
	movl	%edx, -8(%rbp)	# tmp80, pos
	cltq
	movl	-4(%rbp), %edx	# i, tmp82
	movl	%edx, reg_alloc_order(,%rax,4)	# tmp82, reg_alloc_order
.L3181:
	.loc 1 12532 0
	addl	$1, -4(%rbp)	#, i
.L3179:
	.loc 1 12532 0 is_stmt 0 discriminator 1
	cmpl	$52, -4(%rbp)	#, i
	jle	.L3182	#,
	.loc 1 12538 0 is_stmt 1
	movl	ix86_fpmath(%rip), %eax	# ix86_fpmath, ix86_fpmath.1516
	andl	$2, %eax	#, D.30816
	testl	%eax, %eax	# D.30816
	jne	.L3183	#,
	.loc 1 12539 0
	movl	$8, -4(%rbp)	#, i
	jmp	.L3184	#
.L3185:
	.loc 1 12540 0 discriminator 2
	movl	-8(%rbp), %eax	# pos, pos.1517
	leal	1(%rax), %edx	#, tmp83
	movl	%edx, -8(%rbp)	# tmp83, pos
	cltq
	movl	-4(%rbp), %edx	# i, tmp85
	movl	%edx, reg_alloc_order(,%rax,4)	# tmp85, reg_alloc_order
	.loc 1 12539 0 discriminator 2
	addl	$1, -4(%rbp)	#, i
.L3184:
	.loc 1 12539 0 is_stmt 0 discriminator 1
	cmpl	$15, -4(%rbp)	#, i
	jle	.L3185	#,
.L3183:
	.loc 1 12543 0 is_stmt 1
	movl	$21, -4(%rbp)	#, i
	jmp	.L3186	#
.L3187:
	.loc 1 12544 0 discriminator 2
	movl	-8(%rbp), %eax	# pos, pos.1518
	leal	1(%rax), %edx	#, tmp86
	movl	%edx, -8(%rbp)	# tmp86, pos
	cltq
	movl	-4(%rbp), %edx	# i, tmp88
	movl	%edx, reg_alloc_order(,%rax,4)	# tmp88, reg_alloc_order
	.loc 1 12543 0 discriminator 2
	addl	$1, -4(%rbp)	#, i
.L3186:
	.loc 1 12543 0 is_stmt 0 discriminator 1
	cmpl	$28, -4(%rbp)	#, i
	jle	.L3187	#,
	.loc 1 12545 0 is_stmt 1
	movl	$45, -4(%rbp)	#, i
	jmp	.L3188	#
.L3189:
	.loc 1 12546 0 discriminator 2
	movl	-8(%rbp), %eax	# pos, pos.1519
	leal	1(%rax), %edx	#, tmp89
	movl	%edx, -8(%rbp)	# tmp89, pos
	cltq
	movl	-4(%rbp), %edx	# i, tmp91
	movl	%edx, reg_alloc_order(,%rax,4)	# tmp91, reg_alloc_order
	.loc 1 12545 0 discriminator 2
	addl	$1, -4(%rbp)	#, i
.L3188:
	.loc 1 12545 0 is_stmt 0 discriminator 1
	cmpl	$52, -4(%rbp)	#, i
	jle	.L3189	#,
	.loc 1 12549 0 is_stmt 1
	movl	ix86_fpmath(%rip), %eax	# ix86_fpmath, ix86_fpmath.1520
	andl	$2, %eax	#, D.30816
	testl	%eax, %eax	# D.30816
	je	.L3190	#,
	.loc 1 12550 0
	movl	$8, -4(%rbp)	#, i
	jmp	.L3191	#
.L3192:
	.loc 1 12551 0 discriminator 2
	movl	-8(%rbp), %eax	# pos, pos.1521
	leal	1(%rax), %edx	#, tmp92
	movl	%edx, -8(%rbp)	# tmp92, pos
	cltq
	movl	-4(%rbp), %edx	# i, tmp94
	movl	%edx, reg_alloc_order(,%rax,4)	# tmp94, reg_alloc_order
	.loc 1 12550 0 discriminator 2
	addl	$1, -4(%rbp)	#, i
.L3191:
	.loc 1 12550 0 is_stmt 0 discriminator 1
	cmpl	$15, -4(%rbp)	#, i
	jle	.L3192	#,
.L3190:
	.loc 1 12553 0 is_stmt 1
	movl	$29, -4(%rbp)	#, i
	jmp	.L3193	#
.L3194:
	.loc 1 12554 0 discriminator 2
	movl	-8(%rbp), %eax	# pos, pos.1522
	leal	1(%rax), %edx	#, tmp95
	movl	%edx, -8(%rbp)	# tmp95, pos
	cltq
	movl	-4(%rbp), %edx	# i, tmp97
	movl	%edx, reg_alloc_order(,%rax,4)	# tmp97, reg_alloc_order
	.loc 1 12553 0 discriminator 2
	addl	$1, -4(%rbp)	#, i
.L3193:
	.loc 1 12553 0 is_stmt 0 discriminator 1
	cmpl	$36, -4(%rbp)	#, i
	jle	.L3194	#,
	.loc 1 12558 0 is_stmt 1
	jmp	.L3195	#
.L3196:
	.loc 1 12559 0
	movl	-8(%rbp), %eax	# pos, pos.1523
	leal	1(%rax), %edx	#, tmp98
	movl	%edx, -8(%rbp)	# tmp98, pos
	cltq
	movl	$0, reg_alloc_order(,%rax,4)	#, reg_alloc_order
.L3195:
	.loc 1 12558 0 discriminator 1
	cmpl	$52, -8(%rbp)	#, pos
	jle	.L3196	#,
	.loc 1 12560 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE194:
	.size	x86_order_regs_for_local_alloc, .-x86_order_regs_for_local_alloc
	.section	.rodata
.LC444:
	.string	"add{q} {%0, %1|%1, %0}"
.LC445:
	.string	"\tjmp *"
.LC446:
	.string	"@GOTPCREL(%%rip)\n"
.LC447:
	.string	"\tjmp "
.LC448:
	.string	"add{l} {%0, %1|%1, %0}"
.LC449:
	.string	"push{l}\t%0"
.LC450:
	.string	"call\t%P1"
.LC451:
	.string	".%s%u:\n"
.LC452:
	.string	"pop{l}\t%0"
	.align 8
.LC453:
	.string	"add{l}\t{%2+[.-%P1], %0|%0, OFFSET FLAT: %2+[.-%P1]}"
	.align 8
.LC454:
	.string	"mov{l}\t{%0@GOT(%%ebx), %%ecx|%%ecx, %0@GOT[%%ebx]}"
.LC455:
	.string	"\tpop{l\t%%ebx|\t%%ebx}\n"
.LC456:
	.string	"\tjmp\t{*%%ecx|%%ecx}\n"
	.text
	.globl	x86_output_mi_thunk
	.type	x86_output_mi_thunk, @function
x86_output_mi_thunk:
.LFB195:
	.loc 1 12567 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -56(%rbp)	# file, file
	movl	%esi, -60(%rbp)	# delta, delta
	movq	%rdx, -72(%rbp)	# function, function
	.loc 1 12571 0
	movl	ix86_regparm(%rip), %eax	# ix86_regparm, ix86_regparm.1524
	testl	%eax, %eax	# ix86_regparm.1524
	jle	.L3198	#,
	.loc 1 12572 0
	movq	-72(%rbp), %rax	# function, tmp111
	movq	8(%rax), %rax	# function_9(D)->common.type, D.30817
	movq	24(%rax), %rax	# _10->type.values, tmp112
	movq	%rax, -40(%rbp)	# tmp112, parm
	.loc 1 12575 0
	jmp	.L3200	#
.L3198:
	.loc 1 12574 0
	movq	$0, -40(%rbp)	#, parm
	.loc 1 12575 0
	jmp	.L3200	#
.L3203:
	.loc 1 12576 0
	movq	-40(%rbp), %rax	# parm, tmp113
	movq	32(%rax), %rdx	# parm_2->list.value, D.30817
	movq	global_trees+216(%rip), %rax	# global_trees, D.30817
	cmpq	%rax, %rdx	# D.30817, D.30817
	jne	.L3201	#,
	.loc 1 12577 0
	jmp	.L3202	#
.L3201:
	.loc 1 12575 0
	movq	-40(%rbp), %rax	# parm, tmp114
	movq	(%rax), %rax	# parm_2->common.chain, tmp115
	movq	%rax, -40(%rbp)	# tmp115, parm
.L3200:
	.loc 1 12575 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, parm
	jne	.L3203	#,
.L3202:
	.loc 1 12579 0 is_stmt 1
	movl	-60(%rbp), %eax	# delta, tmp116
	cltq
	movq	%rax, %rsi	# D.30818,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -32(%rbp)	# D.30819, xops
	.loc 1 12580 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1525
	andl	$33554432, %eax	#, D.30820
	testl	%eax, %eax	# D.30820
	je	.L3204	#,
.LBB133:
	.loc 1 12582 0
	movq	-72(%rbp), %rax	# function, tmp117
	movq	8(%rax), %rax	# function_9(D)->common.type, D.30817
	movq	8(%rax), %rax	# _21->common.type, D.30817
	movq	%rax, %rdi	# D.30817,
	call	aggregate_value_p	#
	testl	%eax, %eax	# D.30820
	setne	%al	#, D.30821
	movzbl	%al, %eax	# D.30821, tmp118
	movl	%eax, -44(%rbp)	# tmp118, n
	.loc 1 12583 0
	movl	-44(%rbp), %eax	# n, tmp120
	cltq
	movl	x86_64_int_parameter_registers(,%rax,4), %eax	# x86_64_int_parameter_registers, D.30820
	movl	%eax, %esi	# D.30820,
	movl	$5, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -24(%rbp)	# D.30819, xops
	.loc 1 12584 0
	leaq	-32(%rbp), %rax	#, tmp121
	movq	%rax, %rsi	# tmp121,
	movl	$.LC444, %edi	#,
	call	output_asm_insn	#
	.loc 1 12585 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.1526
	testl	%eax, %eax	# flag_pic.1526
	je	.L3205	#,
	.loc 1 12587 0
	movq	-56(%rbp), %rax	# file, tmp122
	movq	%rax, %rcx	# tmp122,
	movl	$6, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC445, %edi	#,
	call	fwrite	#
	.loc 1 12588 0
	movq	-72(%rbp), %rax	# function, tmp123
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, D.30819
	testq	%rax, %rax	# D.30819
	je	.L3206	#,
	.loc 1 12588 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# function, tmp124
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, iftmp.1527
	jmp	.L3207	#
.L3206:
	.loc 1 12588 0 discriminator 2
	movq	-72(%rbp), %rax	# function, tmp125
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp125,
	call	make_decl_rtl	#
	movq	-72(%rbp), %rax	# function, tmp126
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, iftmp.1527
.L3207:
	.loc 1 12588 0 discriminator 1
	movq	8(%rax), %rax	# iftmp.1527_3->fld[0].rtx, D.30819
	movq	8(%rax), %rdx	# _33->fld[0].rtstr, D.30822
	movq	-56(%rbp), %rax	# file, tmp127
	movq	%rdx, %rsi	# D.30822,
	movq	%rax, %rdi	# tmp127,
	call	assemble_name	#
	.loc 1 12589 0 is_stmt 1 discriminator 1
	movq	-56(%rbp), %rax	# file, tmp128
	movl	$.LC446, %esi	#,
	movq	%rax, %rdi	# tmp128,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L3197	#
.L3205:
	.loc 1 12593 0
	movq	-56(%rbp), %rax	# file, tmp129
	movq	%rax, %rcx	# tmp129,
	movl	$5, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC447, %edi	#,
	call	fwrite	#
	.loc 1 12594 0
	movq	-72(%rbp), %rax	# function, tmp130
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, D.30819
	testq	%rax, %rax	# D.30819
	je	.L3209	#,
	.loc 1 12594 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# function, tmp131
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, iftmp.1528
	jmp	.L3210	#
.L3209:
	.loc 1 12594 0 discriminator 2
	movq	-72(%rbp), %rax	# function, tmp132
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp132,
	call	make_decl_rtl	#
	movq	-72(%rbp), %rax	# function, tmp133
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, iftmp.1528
.L3210:
	.loc 1 12594 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.1528_4->fld[0].rtx, D.30819
	movq	8(%rax), %rdx	# _38->fld[0].rtstr, D.30822
	movq	-56(%rbp), %rax	# file, tmp134
	movq	%rdx, %rsi	# D.30822,
	movq	%rax, %rdi	# tmp134,
	call	assemble_name	#
	.loc 1 12595 0 is_stmt 1 discriminator 3
	movq	-56(%rbp), %rax	# file, tmp135
	movq	%rax, %rsi	# tmp135,
	movl	$10, %edi	#,
	call	fputc	#
.LBE133:
	jmp	.L3197	#
.L3204:
	.loc 1 12600 0
	cmpq	$0, -40(%rbp)	#, parm
	je	.L3212	#,
	.loc 1 12601 0
	movl	$0, %esi	#,
	movl	$4, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -24(%rbp)	# D.30819, xops
	jmp	.L3213	#
.L3212:
	.loc 1 12602 0
	movq	-72(%rbp), %rax	# function, tmp136
	movq	8(%rax), %rax	# function_9(D)->common.type, D.30817
	movq	8(%rax), %rax	# _41->common.type, D.30817
	movq	%rax, %rdi	# D.30817,
	call	aggregate_value_p	#
	testl	%eax, %eax	# D.30820
	je	.L3214	#,
	.loc 1 12603 0
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30819
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.30819,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30819,
	movl	$4, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -24(%rbp)	# D.30819, xops
	jmp	.L3213	#
.L3214:
	.loc 1 12605 0
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.30819
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.30819,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.30819,
	movl	$4, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -24(%rbp)	# D.30819, xops
.L3213:
	.loc 1 12606 0
	leaq	-32(%rbp), %rax	#, tmp137
	movq	%rax, %rsi	# tmp137,
	movl	$.LC448, %edi	#,
	call	output_asm_insn	#
	.loc 1 12608 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.1529
	testl	%eax, %eax	# flag_pic.1529
	je	.L3215	#,
	.loc 1 12610 0
	movq	pic_offset_table_rtx(%rip), %rax	# pic_offset_table_rtx, pic_offset_table_rtx.1530
	movq	%rax, -32(%rbp)	# pic_offset_table_rtx.1530, xops
	.loc 1 12611 0
	call	gen_label_rtx	#
	movq	%rax, -24(%rbp)	# D.30819, xops
	.loc 1 12612 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1532
	andl	$33554432, %eax	#, D.30820
	testl	%eax, %eax	# D.30820
	je	.L3216	#,
	.loc 1 12612 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.1531
	jmp	.L3217	#
.L3216:
	.loc 1 12612 0 discriminator 2
	movl	$4, %eax	#, iftmp.1531
.L3217:
	.loc 1 12612 0 discriminator 3
	movl	$.LC142, %edx	#,
	movl	%eax, %esi	# iftmp.1531,
	movl	$68, %edi	#,
	call	gen_rtx_fmt_s	#
	movq	%rax, -16(%rbp)	# D.30819, xops
	.loc 1 12614 0 is_stmt 1 discriminator 3
	movl	ix86_regparm(%rip), %eax	# ix86_regparm, ix86_regparm.1533
	cmpl	$2, %eax	#, ix86_regparm.1533
	jle	.L3218	#,
	.loc 1 12615 0
	movl	$__FUNCTION__.16897, %edx	#,
	movl	$12615, %esi	#,
	movl	$.LC124, %edi	#,
	call	fancy_abort	#
.L3218:
	.loc 1 12616 0
	leaq	-32(%rbp), %rax	#, tmp138
	movq	%rax, %rsi	# tmp138,
	movl	$.LC449, %edi	#,
	call	output_asm_insn	#
	.loc 1 12617 0
	leaq	-32(%rbp), %rax	#, tmp139
	movq	%rax, %rsi	# tmp139,
	movl	$.LC450, %edi	#,
	call	output_asm_insn	#
	.loc 1 12618 0
	movq	-24(%rbp), %rax	# xops, D.30819
	movl	48(%rax), %eax	# _59->fld[5].rtint, D.30820
	movl	%eax, %edx	# D.30820, D.30823
	movq	-56(%rbp), %rax	# file, tmp140
	movl	%edx, %ecx	# D.30823,
	movl	$.LC164, %edx	#,
	movl	$.LC451, %esi	#,
	movq	%rax, %rdi	# tmp140,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 12619 0
	leaq	-32(%rbp), %rax	#, tmp141
	movq	%rax, %rsi	# tmp141,
	movl	$.LC452, %edi	#,
	call	output_asm_insn	#
	.loc 1 12621 0
	leaq	-32(%rbp), %rax	#, tmp142
	movq	%rax, %rsi	# tmp142,
	movl	$.LC453, %edi	#,
	call	output_asm_insn	#
	.loc 1 12622 0
	movq	-72(%rbp), %rax	# function, tmp143
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, D.30819
	testq	%rax, %rax	# D.30819
	je	.L3219	#,
	.loc 1 12622 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# function, tmp144
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, iftmp.1534
	jmp	.L3220	#
.L3219:
	.loc 1 12622 0 discriminator 2
	movq	-72(%rbp), %rax	# function, tmp145
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp145,
	call	make_decl_rtl	#
	movq	-72(%rbp), %rax	# function, tmp146
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, iftmp.1534
.L3220:
	movq	8(%rax), %rax	# iftmp.1534_6->fld[0].rtx, D.30819
	movq	%rax, %rsi	# D.30819,
	movl	$4, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -32(%rbp)	# D.30819, xops
	.loc 1 12624 0 is_stmt 1 discriminator 2
	leaq	-32(%rbp), %rax	#, tmp147
	movq	%rax, %rsi	# tmp147,
	movl	$.LC454, %edi	#,
	call	output_asm_insn	#
	.loc 1 12625 0 discriminator 2
	movq	-56(%rbp), %rax	# file, tmp148
	movl	$.LC455, %esi	#,
	movq	%rax, %rdi	# tmp148,
	movl	$0, %eax	#,
	call	asm_fprintf	#
	.loc 1 12626 0 discriminator 2
	movq	-56(%rbp), %rax	# file, tmp149
	movl	$.LC456, %esi	#,
	movq	%rax, %rdi	# tmp149,
	movl	$0, %eax	#,
	call	asm_fprintf	#
	jmp	.L3197	#
.L3215:
	.loc 1 12630 0
	movq	-56(%rbp), %rax	# file, tmp150
	movq	%rax, %rcx	# tmp150,
	movl	$5, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC447, %edi	#,
	call	fwrite	#
	.loc 1 12631 0
	movq	-72(%rbp), %rax	# function, tmp151
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, D.30819
	testq	%rax, %rax	# D.30819
	je	.L3221	#,
	.loc 1 12631 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# function, tmp152
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, iftmp.1535
	jmp	.L3222	#
.L3221:
	.loc 1 12631 0 discriminator 2
	movq	-72(%rbp), %rax	# function, tmp153
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp153,
	call	make_decl_rtl	#
	movq	-72(%rbp), %rax	# function, tmp154
	movq	144(%rax), %rax	# function_9(D)->decl.rtl, iftmp.1535
.L3222:
	.loc 1 12631 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.1535_7->fld[0].rtx, D.30819
	movq	8(%rax), %rdx	# _70->fld[0].rtstr, D.30822
	movq	-56(%rbp), %rax	# file, tmp155
	movq	%rdx, %rsi	# D.30822,
	movq	%rax, %rdi	# tmp155,
	call	assemble_name	#
	.loc 1 12632 0 is_stmt 1 discriminator 3
	movq	-56(%rbp), %rax	# file, tmp156
	movq	%rax, %rsi	# tmp156,
	movl	$10, %edi	#,
	call	fputc	#
.L3197:
	.loc 1 12635 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE195:
	.size	x86_output_mi_thunk, .-x86_output_mi_thunk
	.globl	x86_field_alignment
	.type	x86_field_alignment, @function
x86_field_alignment:
.LFB196:
	.loc 1 12641 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# field, field
	movl	%esi, -28(%rbp)	# computed, computed
	.loc 1 12643 0
	movq	-24(%rbp), %rax	# field, tmp72
	movq	8(%rax), %rax	# field_3(D)->common.type, tmp73
	movq	%rax, -8(%rbp)	# tmp73, type
	.loc 1 12645 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1536
	andl	$33554432, %eax	#, D.30837
	testl	%eax, %eax	# D.30837
	jne	.L3224	#,
	.loc 1 12645 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1537
	andl	$4, %eax	#, D.30837
	testl	%eax, %eax	# D.30837
	je	.L3225	#,
.L3224:
	.loc 1 12646 0 is_stmt 1
	movl	-28(%rbp), %eax	# computed, D.30837
	jmp	.L3226	#
.L3225:
	.loc 1 12647 0
	movq	-8(%rbp), %rax	# type, tmp74
	movzbl	16(%rax), %eax	# type_4->common.code, D.30838
	cmpb	$18, %al	#, D.30838
	jne	.L3227	#,
	.loc 1 12647 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp75
	movq	%rax, %rdi	# tmp75,
	call	get_inner_array_type	#
	jmp	.L3228	#
.L3227:
	.loc 1 12647 0 discriminator 2
	movq	-8(%rbp), %rax	# type, iftmp.1538
.L3228:
	.loc 1 12647 0 discriminator 3
	movzbl	61(%rax), %eax	# *iftmp.1538_2, tmp78
	shrb	%al	# D.30839
	movzbl	%al, %eax	# D.30839, tmp79
	movl	%eax, -12(%rbp)	# tmp79, mode
	.loc 1 12649 0 is_stmt 1 discriminator 3
	cmpl	$16, -12(%rbp)	#, mode
	je	.L3229	#,
	.loc 1 12649 0 is_stmt 0 discriminator 1
	cmpl	$22, -12(%rbp)	#, mode
	je	.L3229	#,
	.loc 1 12650 0 is_stmt 1
	movl	-12(%rbp), %eax	# mode, mode.1539
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30840
	cmpl	$1, %eax	#, D.30840
	je	.L3229	#,
	.loc 1 12651 0
	movl	-12(%rbp), %eax	# mode, mode.1540
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.30840
	cmpl	$5, %eax	#, D.30840
	jne	.L3230	#,
.L3229:
	.loc 1 12652 0
	movl	$32, %eax	#, tmp82
	cmpl	$32, -28(%rbp)	#, computed
	cmovle	-28(%rbp), %eax	# computed,, D.30837
	jmp	.L3226	#
.L3230:
	.loc 1 12653 0
	movl	-28(%rbp), %eax	# computed, D.30837
.L3226:
	.loc 1 12654 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE196:
	.size	x86_field_alignment, .-x86_field_alignment
	.section	.rodata
.LC457:
	.string	"i486"
.LC458:
	.string	"i586"
.LC459:
	.string	"pentium"
.LC460:
	.string	"pentium-mmx"
.LC461:
	.string	"i686"
.LC462:
	.string	"pentiumpro"
.LC463:
	.string	"pentium2"
.LC464:
	.string	"pentium3"
.LC465:
	.string	"pentium4"
.LC466:
	.string	"k6"
.LC467:
	.string	"k6-2"
.LC468:
	.string	"k6-3"
.LC469:
	.string	"athlon"
.LC470:
	.string	"athlon-tbird"
.LC471:
	.string	"athlon-xp"
.LC472:
	.string	"athlon-mp"
	.align 32
	.type	processor_alias_table.14711, @object
	.size	processor_alias_table.14711, 288
processor_alias_table.14711:
# name:
	.quad	.LC82
# processor:
	.long	0
# flags:
	.long	0
# name:
	.quad	.LC457
# processor:
	.long	1
# flags:
	.long	0
# name:
	.quad	.LC458
# processor:
	.long	2
# flags:
	.long	0
# name:
	.quad	.LC459
# processor:
	.long	2
# flags:
	.long	0
# name:
	.quad	.LC460
# processor:
	.long	2
# flags:
	.long	4
# name:
	.quad	.LC461
# processor:
	.long	3
# flags:
	.long	0
# name:
	.quad	.LC462
# processor:
	.long	3
# flags:
	.long	0
# name:
	.quad	.LC463
# processor:
	.long	3
# flags:
	.long	4
# name:
	.quad	.LC464
# processor:
	.long	3
# flags:
	.long	13
# name:
	.quad	.LC465
# processor:
	.long	6
# flags:
	.long	15
# name:
	.quad	.LC466
# processor:
	.long	4
# flags:
	.long	4
# name:
	.quad	.LC467
# processor:
	.long	4
# flags:
	.long	20
# name:
	.quad	.LC468
# processor:
	.long	4
# flags:
	.long	20
# name:
	.quad	.LC469
# processor:
	.long	5
# flags:
	.long	92
# name:
	.quad	.LC470
# processor:
	.long	5
# flags:
	.long	92
# name:
	.quad	.LC81
# processor:
	.long	5
# flags:
	.long	93
# name:
	.quad	.LC471
# processor:
	.long	5
# flags:
	.long	93
# name:
	.quad	.LC472
# processor:
	.long	5
# flags:
	.long	93
	.align 32
	.type	processor_target_table.14698, @object
	.size	processor_target_table.14698, 280
processor_target_table.14698:
# cost:
	.quad	i386_cost
# target_enable:
	.long	0
# target_disable:
	.long	0
# align_loop:
	.long	4
# align_loop_max_skip:
	.long	3
# align_jump:
	.long	4
# align_jump_max_skip:
	.long	3
# align_func:
	.long	4
# branch_cost:
	.long	1
# cost:
	.quad	i486_cost
# target_enable:
	.long	0
# target_disable:
	.long	0
# align_loop:
	.long	16
# align_loop_max_skip:
	.long	15
# align_jump:
	.long	16
# align_jump_max_skip:
	.long	15
# align_func:
	.long	16
# branch_cost:
	.long	1
# cost:
	.quad	pentium_cost
# target_enable:
	.long	0
# target_disable:
	.long	0
# align_loop:
	.long	16
# align_loop_max_skip:
	.long	7
# align_jump:
	.long	16
# align_jump_max_skip:
	.long	7
# align_func:
	.long	16
# branch_cost:
	.long	1
# cost:
	.quad	pentiumpro_cost
# target_enable:
	.long	0
# target_disable:
	.long	0
# align_loop:
	.long	16
# align_loop_max_skip:
	.long	15
# align_jump:
	.long	16
# align_jump_max_skip:
	.long	7
# align_func:
	.long	16
# branch_cost:
	.long	1
# cost:
	.quad	k6_cost
# target_enable:
	.long	0
# target_disable:
	.long	0
# align_loop:
	.long	32
# align_loop_max_skip:
	.long	7
# align_jump:
	.long	32
# align_jump_max_skip:
	.long	7
# align_func:
	.long	32
# branch_cost:
	.long	1
# cost:
	.quad	athlon_cost
# target_enable:
	.long	0
# target_disable:
	.long	0
# align_loop:
	.long	16
# align_loop_max_skip:
	.long	7
# align_jump:
	.long	64
# align_jump_max_skip:
	.long	7
# align_func:
	.long	16
# branch_cost:
	.long	1
# cost:
	.quad	pentium4_cost
# target_enable:
	.long	0
# target_disable:
	.long	0
# align_loop:
	.long	0
# align_loop_max_skip:
	.long	0
# align_jump:
	.long	0
# align_jump_max_skip:
	.long	0
# align_func:
	.long	0
# branch_cost:
	.long	1
	.align 32
	.type	cpu_names.14699, @object
	.size	cpu_names.14699, 104
cpu_names.14699:
	.quad	.LC82
	.quad	.LC457
	.quad	.LC459
	.quad	.LC460
	.quad	.LC462
	.quad	.LC463
	.quad	.LC464
	.quad	.LC465
	.quad	.LC466
	.quad	.LC467
	.quad	.LC468
	.quad	.LC469
	.quad	.LC81
	.local	zero_cum.14765
	.comm	zero_cum.14765,28,16
	.align 16
	.type	__FUNCTION__.14840, @object
	.size	__FUNCTION__.14840, 18
__FUNCTION__.14840:
	.string	"classify_argument"
	.align 16
	.type	__FUNCTION__.14890, @object
	.size	__FUNCTION__.14890, 17
__FUNCTION__.14890:
	.string	"examine_argument"
	.align 16
	.type	__FUNCTION__.14924, @object
	.size	__FUNCTION__.14924, 20
__FUNCTION__.14924:
	.string	"construct_container"
	.data
	.align 16
	.type	intreg.15043, @object
	.size	intreg.15043, 24
intreg.15043:
	.long	0
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.section	.rodata
	.align 16
	.type	__FUNCTION__.15299, @object
	.size	__FUNCTION__.15299, 28
__FUNCTION__.15299:
	.string	"memory_displacement_operand"
	.align 16
	.type	__FUNCTION__.15313, @object
	.size	__FUNCTION__.15313, 16
__FUNCTION__.15313:
	.string	"aligned_operand"
	.align 16
	.type	__FUNCTION__.15379, @object
	.size	__FUNCTION__.15379, 18
__FUNCTION__.15379:
	.string	"load_pic_register"
	.align 32
	.type	__FUNCTION__.15403, @object
	.size	__FUNCTION__.15403, 32
__FUNCTION__.15403:
	.string	"ix86_initial_elimination_offset"
	.align 16
	.type	__FUNCTION__.15412, @object
	.size	__FUNCTION__.15412, 26
__FUNCTION__.15412:
	.string	"ix86_compute_frame_layout"
	.align 16
	.type	__FUNCTION__.15438, @object
	.size	__FUNCTION__.15438, 21
__FUNCTION__.15438:
	.string	"ix86_expand_prologue"
	.align 16
	.type	__FUNCTION__.15457, @object
	.size	__FUNCTION__.15457, 21
__FUNCTION__.15457:
	.string	"ix86_expand_epilogue"
	.align 16
	.type	__FUNCTION__.15484, @object
	.size	__FUNCTION__.15484, 18
__FUNCTION__.15484:
	.string	"ix86_address_cost"
	.data
	.align 8
	.type	set.15510, @object
	.size	set.15510, 8
set.15510:
	.quad	-1
	.section	.rodata
	.align 16
	.type	__FUNCTION__.15518, @object
	.size	__FUNCTION__.15518, 23
__FUNCTION__.15518:
	.string	"legitimize_pic_address"
	.align 16
	.type	__FUNCTION__.15542, @object
	.size	__FUNCTION__.15542, 22
__FUNCTION__.15542:
	.string	"output_pic_addr_const"
	.align 16
	.type	__FUNCTION__.15579, @object
	.size	__FUNCTION__.15579, 19
__FUNCTION__.15579:
	.string	"put_condition_code"
	.type	__FUNCTION__.15599, @object
	.size	__FUNCTION__.15599, 10
__FUNCTION__.15599:
	.string	"print_reg"
	.type	__FUNCTION__.15624, @object
	.size	__FUNCTION__.15624, 14
__FUNCTION__.15624:
	.string	"print_operand"
	.align 16
	.type	__FUNCTION__.15703, @object
	.size	__FUNCTION__.15703, 22
__FUNCTION__.15703:
	.string	"print_operand_address"
	.align 16
	.type	__FUNCTION__.15739, @object
	.size	__FUNCTION__.15739, 21
__FUNCTION__.15739:
	.string	"output_387_binary_op"
	.local	buf.15729
	.comm	buf.15729,30,16
	.align 16
	.type	__FUNCTION__.15758, @object
	.size	__FUNCTION__.15758, 17
__FUNCTION__.15758:
	.string	"output_fix_trunc"
	.align 16
	.type	__FUNCTION__.15769, @object
	.size	__FUNCTION__.15769, 18
__FUNCTION__.15769:
	.string	"output_fp_compare"
.LC473:
	.string	"fcom%z1\t%y1"
.LC474:
	.string	"fcomp%z1\t%y1"
.LC475:
	.string	"fucom%z1\t%y1"
.LC476:
	.string	"fucomp%z1\t%y1"
.LC477:
	.string	"ficom%z1\t%y1"
.LC478:
	.string	"ficomp%z1\t%y1"
.LC479:
	.string	"fcomi\t{%y1, %0|%0, %y1}"
.LC480:
	.string	"fucomi\t{%y1, %0|%0, %y1}"
.LC481:
	.string	"fcom%z2\t%y2\n\tfnstsw\t%0"
.LC482:
	.string	"fcomp%z2\t%y2\n\tfnstsw\t%0"
.LC483:
	.string	"fucom%z2\t%y2\n\tfnstsw\t%0"
.LC484:
	.string	"fucomp%z2\t%y2\n\tfnstsw\t%0"
.LC485:
	.string	"ficom%z2\t%y2\n\tfnstsw\t%0"
.LC486:
	.string	"ficomp%z2\t%y2\n\tfnstsw\t%0"
	.align 32
	.type	alt.15770, @object
	.size	alt.15770, 192
alt.15770:
	.quad	.LC473
	.quad	.LC474
	.quad	.LC475
	.quad	.LC476
	.quad	.LC477
	.quad	.LC478
	.quad	0
	.quad	0
	.quad	.LC479
	.quad	.LC257
	.quad	.LC480
	.quad	.LC256
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	.LC481
	.quad	.LC482
	.quad	.LC483
	.quad	.LC484
	.quad	.LC485
	.quad	.LC486
	.quad	0
	.quad	0
	.align 16
	.type	__FUNCTION__.15787, @object
	.size	__FUNCTION__.15787, 18
__FUNCTION__.15787:
	.string	"ix86_expand_clear"
	.align 16
	.type	__FUNCTION__.15814, @object
	.size	__FUNCTION__.15814, 28
__FUNCTION__.15814:
	.string	"ix86_expand_binary_operator"
	.align 16
	.type	__FUNCTION__.15830, @object
	.size	__FUNCTION__.15830, 27
__FUNCTION__.15830:
	.string	"ix86_expand_unary_operator"
	.align 16
	.type	__FUNCTION__.15842, @object
	.size	__FUNCTION__.15842, 18
__FUNCTION__.15842:
	.string	"ix86_match_ccmode"
	.type	__FUNCTION__.15878, @object
	.size	__FUNCTION__.15878, 13
__FUNCTION__.15878:
	.string	"ix86_cc_mode"
	.align 16
	.type	__FUNCTION__.15929, @object
	.size	__FUNCTION__.15929, 25
__FUNCTION__.15929:
	.string	"ix86_fp_comparison_codes"
	.align 32
	.type	__FUNCTION__.15948, @object
	.size	__FUNCTION__.15948, 36
__FUNCTION__.15948:
	.string	"ix86_fp_comparison_arithmetics_cost"
	.align 16
	.type	__FUNCTION__.16000, @object
	.size	__FUNCTION__.16000, 23
__FUNCTION__.16000:
	.string	"ix86_expand_fp_compare"
	.align 16
	.type	__FUNCTION__.16060, @object
	.size	__FUNCTION__.16060, 19
__FUNCTION__.16060:
	.string	"ix86_expand_branch"
	.align 16
	.type	__FUNCTION__.16088, @object
	.size	__FUNCTION__.16088, 18
__FUNCTION__.16088:
	.string	"ix86_expand_setcc"
	.align 16
	.type	__FUNCTION__.16133, @object
	.size	__FUNCTION__.16133, 21
__FUNCTION__.16133:
	.string	"ix86_expand_fp_movcc"
	.align 16
	.type	__FUNCTION__.16140, @object
	.size	__FUNCTION__.16140, 20
__FUNCTION__.16140:
	.string	"ix86_split_to_parts"
	.align 16
	.type	__FUNCTION__.16160, @object
	.size	__FUNCTION__.16160, 21
__FUNCTION__.16160:
	.string	"ix86_split_long_move"
	.align 16
	.type	__FUNCTION__.16210, @object
	.size	__FUNCTION__.16210, 19
__FUNCTION__.16210:
	.string	"ix86_expand_movstr"
	.align 16
	.type	__FUNCTION__.16293, @object
	.size	__FUNCTION__.16293, 23
__FUNCTION__.16293:
	.string	"assign_386_stack_local"
	.align 16
	.type	__FUNCTION__.16302, @object
	.size	__FUNCTION__.16302, 22
__FUNCTION__.16302:
	.string	"memory_address_length"
	.align 32
	.type	__FUNCTION__.16309, @object
	.size	__FUNCTION__.16309, 35
__FUNCTION__.16309:
	.string	"ix86_attr_length_immediate_default"
	.align 16
	.type	__FUNCTION__.16347, @object
	.size	__FUNCTION__.16347, 19
__FUNCTION__.16347:
	.string	"ix86_agi_dependant"
	.align 16
	.type	__FUNCTION__.16480, @object
	.size	__FUNCTION__.16480, 20
__FUNCTION__.16480:
	.string	"ix86_variable_issue"
	.align 16
	.type	__FUNCTION__.16528, @object
	.size	__FUNCTION__.16528, 26
__FUNCTION__.16528:
	.string	"x86_initialize_trampoline"
	.align 16
	.type	__FUNCTION__.16600, @object
	.size	__FUNCTION__.16600, 27
__FUNCTION__.16600:
	.string	"ix86_init_mmx_sse_builtins"
	.align 16
	.type	__FUNCTION__.16624, @object
	.size	__FUNCTION__.16624, 26
__FUNCTION__.16624:
	.string	"ix86_expand_binop_builtin"
	.align 16
	.type	__FUNCTION__.16795, @object
	.size	__FUNCTION__.16795, 21
__FUNCTION__.16795:
	.string	"ix86_force_to_memory"
	.align 16
	.type	__FUNCTION__.16821, @object
	.size	__FUNCTION__.16821, 29
__FUNCTION__.16821:
	.string	"ix86_secondary_memory_needed"
	.align 16
	.type	__FUNCTION__.16897, @object
	.size	__FUNCTION__.16897, 20
__FUNCTION__.16897:
	.string	"x86_output_mi_thunk"
	.text
.Letext0:
	.file 2 "rtl.h"
	.file 3 "config.h"
	.file 4 "tree.h"
	.file 5 "i386.h"
	.file 6 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
	.file 7 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 8 "/usr/include/stdio.h"
	.file 9 "/usr/include/libio.h"
	.file 10 "machmode.h"
	.file 11 "bitmap.h"
	.file 12 "basic-block.h"
	.file 13 "real.h"
	.file 14 "hashtable.h"
	.file 15 "function.h"
	.file 16 "insn-attr.h"
	.file 17 "recog.h"
	.file 18 "expr.h"
	.file 19 "insn-codes.h"
	.file 20 "optabs.h"
	.file 21 "target.h"
	.file 22 "regs.h"
	.file 23 "hard-reg-set.h"
	.file 24 "output.h"
	.file 25 "flags.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0xc56d
	.value	0x4
	.long	.Ldebug_abbrev0
	.byte	0x8
	.uleb128 0x1
	.long	.LASF2673
	.byte	0x1
	.long	.LASF2674
	.long	.LASF2675
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.string	"rtx"
	.byte	0x3
	.byte	0x8
	.long	0x38
	.uleb128 0x3
	.byte	0x8
	.long	0x3e
	.uleb128 0x4
	.long	.LASF11
	.byte	0x10
	.byte	0x2
	.byte	0x7a
	.long	0xed
	.uleb128 0x5
	.long	.LASF0
	.byte	0x2
	.byte	0x7d
	.long	0xa10
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0
	.uleb128 0x5
	.long	.LASF1
	.byte	0x2
	.byte	0x80
	.long	0xa10
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.uleb128 0x5
	.long	.LASF2
	.byte	0x2
	.byte	0x87
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0
	.uleb128 0x5
	.long	.LASF3
	.byte	0x2
	.byte	0x8a
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0
	.uleb128 0x5
	.long	.LASF4
	.byte	0x2
	.byte	0x95
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0
	.uleb128 0x5
	.long	.LASF5
	.byte	0x2
	.byte	0x9d
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0
	.uleb128 0x5
	.long	.LASF6
	.byte	0x2
	.byte	0xaf
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0
	.uleb128 0x5
	.long	.LASF7
	.byte	0x2
	.byte	0xb6
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0
	.uleb128 0x5
	.long	.LASF8
	.byte	0x2
	.byte	0xbb
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0
	.uleb128 0x5
	.long	.LASF9
	.byte	0x2
	.byte	0xc4
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0
	.uleb128 0x6
	.string	"fld"
	.byte	0x2
	.byte	0xc9
	.long	0x151a
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF10
	.byte	0x3
	.byte	0xa
	.long	0xf8
	.uleb128 0x3
	.byte	0x8
	.long	0xfe
	.uleb128 0x4
	.long	.LASF12
	.byte	0x10
	.byte	0x2
	.byte	0xde
	.long	0x123
	.uleb128 0x8
	.long	.LASF13
	.byte	0x2
	.byte	0xdf
	.long	0x328
	.byte	0
	.uleb128 0x8
	.long	.LASF14
	.byte	0x2
	.byte	0xe0
	.long	0x152a
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF15
	.byte	0x3
	.byte	0xc
	.long	0x12e
	.uleb128 0x3
	.byte	0x8
	.long	0x134
	.uleb128 0x9
	.long	.LASF557
	.byte	0xd0
	.byte	0x4
	.value	0x744
	.long	0x1de
	.uleb128 0xa
	.long	.LASF16
	.byte	0x4
	.value	0x746
	.long	0x1d72
	.uleb128 0xa
	.long	.LASF17
	.byte	0x4
	.value	0x747
	.long	0x1f32
	.uleb128 0xa
	.long	.LASF18
	.byte	0x4
	.value	0x748
	.long	0x1fb7
	.uleb128 0xa
	.long	.LASF19
	.byte	0x4
	.value	0x749
	.long	0x2070
	.uleb128 0xa
	.long	.LASF20
	.byte	0x4
	.value	0x74a
	.long	0x1fec
	.uleb128 0xa
	.long	.LASF21
	.byte	0x4
	.value	0x74b
	.long	0x202e
	.uleb128 0xa
	.long	.LASF22
	.byte	0x4
	.value	0x74c
	.long	0x20d5
	.uleb128 0xa
	.long	.LASF23
	.byte	0x4
	.value	0x74d
	.long	0x298e
	.uleb128 0xa
	.long	.LASF24
	.byte	0x4
	.value	0x74e
	.long	0x2264
	.uleb128 0xa
	.long	.LASF25
	.byte	0x4
	.value	0x74f
	.long	0x20fc
	.uleb128 0xb
	.string	"vec"
	.byte	0x4
	.value	0x750
	.long	0x2131
	.uleb128 0xb
	.string	"exp"
	.byte	0x4
	.value	0x751
	.long	0x2174
	.uleb128 0xa
	.long	.LASF26
	.byte	0x4
	.value	0x752
	.long	0x21a9
	.byte	0
	.uleb128 0x4
	.long	.LASF27
	.byte	0xa0
	.byte	0x5
	.byte	0x35
	.long	0x323
	.uleb128 0x6
	.string	"add"
	.byte	0x5
	.byte	0x36
	.long	0x323
	.byte	0
	.uleb128 0x6
	.string	"lea"
	.byte	0x5
	.byte	0x37
	.long	0x323
	.byte	0x4
	.uleb128 0x8
	.long	.LASF28
	.byte	0x5
	.byte	0x38
	.long	0x323
	.byte	0x8
	.uleb128 0x8
	.long	.LASF29
	.byte	0x5
	.byte	0x39
	.long	0x323
	.byte	0xc
	.uleb128 0x8
	.long	.LASF30
	.byte	0x5
	.byte	0x3a
	.long	0x323
	.byte	0x10
	.uleb128 0x8
	.long	.LASF31
	.byte	0x5
	.byte	0x3b
	.long	0x323
	.byte	0x14
	.uleb128 0x8
	.long	.LASF32
	.byte	0x5
	.byte	0x3c
	.long	0x323
	.byte	0x18
	.uleb128 0x8
	.long	.LASF33
	.byte	0x5
	.byte	0x3d
	.long	0x328
	.byte	0x1c
	.uleb128 0x8
	.long	.LASF34
	.byte	0x5
	.byte	0x3e
	.long	0x328
	.byte	0x20
	.uleb128 0x8
	.long	.LASF35
	.byte	0x5
	.byte	0x3f
	.long	0x323
	.byte	0x24
	.uleb128 0x8
	.long	.LASF36
	.byte	0x5
	.byte	0x40
	.long	0x323
	.byte	0x28
	.uleb128 0x8
	.long	.LASF37
	.byte	0x5
	.byte	0x42
	.long	0x323
	.byte	0x2c
	.uleb128 0x8
	.long	.LASF38
	.byte	0x5
	.byte	0x43
	.long	0x346
	.byte	0x30
	.uleb128 0x8
	.long	.LASF39
	.byte	0x5
	.byte	0x46
	.long	0x34b
	.byte	0x3c
	.uleb128 0x8
	.long	.LASF40
	.byte	0x5
	.byte	0x48
	.long	0x323
	.byte	0x48
	.uleb128 0x8
	.long	.LASF41
	.byte	0x5
	.byte	0x49
	.long	0x350
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF42
	.byte	0x5
	.byte	0x4b
	.long	0x355
	.byte	0x58
	.uleb128 0x8
	.long	.LASF43
	.byte	0x5
	.byte	0x4d
	.long	0x323
	.byte	0x64
	.uleb128 0x8
	.long	.LASF44
	.byte	0x5
	.byte	0x4e
	.long	0x36a
	.byte	0x68
	.uleb128 0x8
	.long	.LASF45
	.byte	0x5
	.byte	0x50
	.long	0x36f
	.byte	0x70
	.uleb128 0x8
	.long	.LASF46
	.byte	0x5
	.byte	0x52
	.long	0x323
	.byte	0x78
	.uleb128 0x8
	.long	.LASF47
	.byte	0x5
	.byte	0x53
	.long	0x374
	.byte	0x7c
	.uleb128 0x8
	.long	.LASF48
	.byte	0x5
	.byte	0x55
	.long	0x379
	.byte	0x88
	.uleb128 0x8
	.long	.LASF49
	.byte	0x5
	.byte	0x57
	.long	0x323
	.byte	0x94
	.uleb128 0x8
	.long	.LASF50
	.byte	0x5
	.byte	0x59
	.long	0x323
	.byte	0x98
	.uleb128 0x8
	.long	.LASF51
	.byte	0x5
	.byte	0x5a
	.long	0x323
	.byte	0x9c
	.byte	0
	.uleb128 0xc
	.long	0x328
	.uleb128 0xd
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0xe
	.long	0x328
	.long	0x33f
	.uleb128 0xf
	.long	0x33f
	.byte	0x2
	.byte	0
	.uleb128 0x10
	.byte	0x8
	.byte	0x7
	.long	.LASF52
	.uleb128 0xc
	.long	0x32f
	.uleb128 0xc
	.long	0x32f
	.uleb128 0xc
	.long	0x32f
	.uleb128 0xc
	.long	0x32f
	.uleb128 0xe
	.long	0x328
	.long	0x36a
	.uleb128 0xf
	.long	0x33f
	.byte	0x1
	.byte	0
	.uleb128 0xc
	.long	0x35a
	.uleb128 0xc
	.long	0x35a
	.uleb128 0xc
	.long	0x32f
	.uleb128 0xc
	.long	0x32f
	.uleb128 0x11
	.long	.LASF61
	.byte	0x4
	.byte	0x5
	.value	0x18b
	.long	0x3bc
	.uleb128 0x12
	.long	.LASF53
	.sleb128 0
	.uleb128 0x12
	.long	.LASF54
	.sleb128 1
	.uleb128 0x12
	.long	.LASF55
	.sleb128 2
	.uleb128 0x12
	.long	.LASF56
	.sleb128 3
	.uleb128 0x12
	.long	.LASF57
	.sleb128 4
	.uleb128 0x12
	.long	.LASF58
	.sleb128 5
	.uleb128 0x12
	.long	.LASF59
	.sleb128 6
	.uleb128 0x12
	.long	.LASF60
	.sleb128 7
	.byte	0
	.uleb128 0x11
	.long	.LASF62
	.byte	0x4
	.byte	0x5
	.value	0x196
	.long	0x3d6
	.uleb128 0x12
	.long	.LASF63
	.sleb128 1
	.uleb128 0x12
	.long	.LASF64
	.sleb128 2
	.byte	0
	.uleb128 0x11
	.long	.LASF65
	.byte	0x4
	.byte	0x5
	.value	0x4b2
	.long	0x480
	.uleb128 0x12
	.long	.LASF66
	.sleb128 0
	.uleb128 0x12
	.long	.LASF67
	.sleb128 1
	.uleb128 0x12
	.long	.LASF68
	.sleb128 2
	.uleb128 0x12
	.long	.LASF69
	.sleb128 3
	.uleb128 0x12
	.long	.LASF70
	.sleb128 4
	.uleb128 0x12
	.long	.LASF71
	.sleb128 5
	.uleb128 0x12
	.long	.LASF72
	.sleb128 6
	.uleb128 0x12
	.long	.LASF73
	.sleb128 7
	.uleb128 0x12
	.long	.LASF74
	.sleb128 8
	.uleb128 0x12
	.long	.LASF75
	.sleb128 9
	.uleb128 0x12
	.long	.LASF76
	.sleb128 10
	.uleb128 0x12
	.long	.LASF77
	.sleb128 11
	.uleb128 0x12
	.long	.LASF78
	.sleb128 12
	.uleb128 0x12
	.long	.LASF79
	.sleb128 13
	.uleb128 0x12
	.long	.LASF80
	.sleb128 14
	.uleb128 0x12
	.long	.LASF81
	.sleb128 15
	.uleb128 0x12
	.long	.LASF82
	.sleb128 16
	.uleb128 0x12
	.long	.LASF83
	.sleb128 17
	.uleb128 0x12
	.long	.LASF84
	.sleb128 18
	.uleb128 0x12
	.long	.LASF85
	.sleb128 19
	.uleb128 0x12
	.long	.LASF86
	.sleb128 20
	.uleb128 0x12
	.long	.LASF87
	.sleb128 21
	.uleb128 0x12
	.long	.LASF88
	.sleb128 22
	.uleb128 0x12
	.long	.LASF89
	.sleb128 23
	.uleb128 0x12
	.long	.LASF90
	.sleb128 24
	.uleb128 0x12
	.long	.LASF91
	.sleb128 25
	.byte	0
	.uleb128 0x13
	.long	.LASF92
	.byte	0x1c
	.byte	0x5
	.value	0x683
	.long	0x4e9
	.uleb128 0x14
	.long	.LASF93
	.byte	0x5
	.value	0x684
	.long	0x328
	.byte	0
	.uleb128 0x14
	.long	.LASF94
	.byte	0x5
	.value	0x685
	.long	0x328
	.byte	0x4
	.uleb128 0x14
	.long	.LASF95
	.byte	0x5
	.value	0x686
	.long	0x328
	.byte	0x8
	.uleb128 0x14
	.long	.LASF96
	.byte	0x5
	.value	0x687
	.long	0x328
	.byte	0xc
	.uleb128 0x14
	.long	.LASF97
	.byte	0x5
	.value	0x688
	.long	0x328
	.byte	0x10
	.uleb128 0x14
	.long	.LASF98
	.byte	0x5
	.value	0x689
	.long	0x328
	.byte	0x14
	.uleb128 0x14
	.long	.LASF99
	.byte	0x5
	.value	0x68a
	.long	0x328
	.byte	0x18
	.byte	0
	.uleb128 0x15
	.long	.LASF100
	.byte	0x5
	.value	0x68b
	.long	0x480
	.uleb128 0x11
	.long	.LASF101
	.byte	0x4
	.byte	0x5
	.value	0x7ed
	.long	0x9c4
	.uleb128 0x12
	.long	.LASF102
	.sleb128 0
	.uleb128 0x12
	.long	.LASF103
	.sleb128 1
	.uleb128 0x12
	.long	.LASF104
	.sleb128 2
	.uleb128 0x12
	.long	.LASF105
	.sleb128 3
	.uleb128 0x12
	.long	.LASF106
	.sleb128 4
	.uleb128 0x12
	.long	.LASF107
	.sleb128 5
	.uleb128 0x12
	.long	.LASF108
	.sleb128 6
	.uleb128 0x12
	.long	.LASF109
	.sleb128 7
	.uleb128 0x12
	.long	.LASF110
	.sleb128 8
	.uleb128 0x12
	.long	.LASF111
	.sleb128 9
	.uleb128 0x12
	.long	.LASF112
	.sleb128 10
	.uleb128 0x12
	.long	.LASF113
	.sleb128 11
	.uleb128 0x12
	.long	.LASF114
	.sleb128 12
	.uleb128 0x12
	.long	.LASF115
	.sleb128 13
	.uleb128 0x12
	.long	.LASF116
	.sleb128 14
	.uleb128 0x12
	.long	.LASF117
	.sleb128 15
	.uleb128 0x12
	.long	.LASF118
	.sleb128 16
	.uleb128 0x12
	.long	.LASF119
	.sleb128 17
	.uleb128 0x12
	.long	.LASF120
	.sleb128 18
	.uleb128 0x12
	.long	.LASF121
	.sleb128 19
	.uleb128 0x12
	.long	.LASF122
	.sleb128 20
	.uleb128 0x12
	.long	.LASF123
	.sleb128 21
	.uleb128 0x12
	.long	.LASF124
	.sleb128 22
	.uleb128 0x12
	.long	.LASF125
	.sleb128 23
	.uleb128 0x12
	.long	.LASF126
	.sleb128 24
	.uleb128 0x12
	.long	.LASF127
	.sleb128 25
	.uleb128 0x12
	.long	.LASF128
	.sleb128 26
	.uleb128 0x12
	.long	.LASF129
	.sleb128 27
	.uleb128 0x12
	.long	.LASF130
	.sleb128 28
	.uleb128 0x12
	.long	.LASF131
	.sleb128 29
	.uleb128 0x12
	.long	.LASF132
	.sleb128 30
	.uleb128 0x12
	.long	.LASF133
	.sleb128 31
	.uleb128 0x12
	.long	.LASF134
	.sleb128 32
	.uleb128 0x12
	.long	.LASF135
	.sleb128 33
	.uleb128 0x12
	.long	.LASF136
	.sleb128 34
	.uleb128 0x12
	.long	.LASF137
	.sleb128 35
	.uleb128 0x12
	.long	.LASF138
	.sleb128 36
	.uleb128 0x12
	.long	.LASF139
	.sleb128 37
	.uleb128 0x12
	.long	.LASF140
	.sleb128 38
	.uleb128 0x12
	.long	.LASF141
	.sleb128 39
	.uleb128 0x12
	.long	.LASF142
	.sleb128 40
	.uleb128 0x12
	.long	.LASF143
	.sleb128 41
	.uleb128 0x12
	.long	.LASF144
	.sleb128 42
	.uleb128 0x12
	.long	.LASF145
	.sleb128 43
	.uleb128 0x12
	.long	.LASF146
	.sleb128 44
	.uleb128 0x12
	.long	.LASF147
	.sleb128 45
	.uleb128 0x12
	.long	.LASF148
	.sleb128 46
	.uleb128 0x12
	.long	.LASF149
	.sleb128 47
	.uleb128 0x12
	.long	.LASF150
	.sleb128 48
	.uleb128 0x12
	.long	.LASF151
	.sleb128 49
	.uleb128 0x12
	.long	.LASF152
	.sleb128 50
	.uleb128 0x12
	.long	.LASF153
	.sleb128 51
	.uleb128 0x12
	.long	.LASF154
	.sleb128 52
	.uleb128 0x12
	.long	.LASF155
	.sleb128 53
	.uleb128 0x12
	.long	.LASF156
	.sleb128 54
	.uleb128 0x12
	.long	.LASF157
	.sleb128 55
	.uleb128 0x12
	.long	.LASF158
	.sleb128 56
	.uleb128 0x12
	.long	.LASF159
	.sleb128 57
	.uleb128 0x12
	.long	.LASF160
	.sleb128 58
	.uleb128 0x12
	.long	.LASF161
	.sleb128 59
	.uleb128 0x12
	.long	.LASF162
	.sleb128 60
	.uleb128 0x12
	.long	.LASF163
	.sleb128 61
	.uleb128 0x12
	.long	.LASF164
	.sleb128 62
	.uleb128 0x12
	.long	.LASF165
	.sleb128 63
	.uleb128 0x12
	.long	.LASF166
	.sleb128 64
	.uleb128 0x12
	.long	.LASF167
	.sleb128 65
	.uleb128 0x12
	.long	.LASF168
	.sleb128 66
	.uleb128 0x12
	.long	.LASF169
	.sleb128 67
	.uleb128 0x12
	.long	.LASF170
	.sleb128 68
	.uleb128 0x12
	.long	.LASF171
	.sleb128 69
	.uleb128 0x12
	.long	.LASF172
	.sleb128 70
	.uleb128 0x12
	.long	.LASF173
	.sleb128 71
	.uleb128 0x12
	.long	.LASF174
	.sleb128 72
	.uleb128 0x12
	.long	.LASF175
	.sleb128 73
	.uleb128 0x12
	.long	.LASF176
	.sleb128 74
	.uleb128 0x12
	.long	.LASF177
	.sleb128 75
	.uleb128 0x12
	.long	.LASF178
	.sleb128 76
	.uleb128 0x12
	.long	.LASF179
	.sleb128 77
	.uleb128 0x12
	.long	.LASF180
	.sleb128 78
	.uleb128 0x12
	.long	.LASF181
	.sleb128 79
	.uleb128 0x12
	.long	.LASF182
	.sleb128 80
	.uleb128 0x12
	.long	.LASF183
	.sleb128 81
	.uleb128 0x12
	.long	.LASF184
	.sleb128 82
	.uleb128 0x12
	.long	.LASF185
	.sleb128 83
	.uleb128 0x12
	.long	.LASF186
	.sleb128 84
	.uleb128 0x12
	.long	.LASF187
	.sleb128 85
	.uleb128 0x12
	.long	.LASF188
	.sleb128 86
	.uleb128 0x12
	.long	.LASF189
	.sleb128 87
	.uleb128 0x12
	.long	.LASF190
	.sleb128 88
	.uleb128 0x12
	.long	.LASF191
	.sleb128 89
	.uleb128 0x12
	.long	.LASF192
	.sleb128 90
	.uleb128 0x12
	.long	.LASF193
	.sleb128 91
	.uleb128 0x12
	.long	.LASF194
	.sleb128 92
	.uleb128 0x12
	.long	.LASF195
	.sleb128 93
	.uleb128 0x12
	.long	.LASF196
	.sleb128 94
	.uleb128 0x12
	.long	.LASF197
	.sleb128 95
	.uleb128 0x12
	.long	.LASF198
	.sleb128 96
	.uleb128 0x12
	.long	.LASF199
	.sleb128 97
	.uleb128 0x12
	.long	.LASF200
	.sleb128 98
	.uleb128 0x12
	.long	.LASF201
	.sleb128 99
	.uleb128 0x12
	.long	.LASF202
	.sleb128 100
	.uleb128 0x12
	.long	.LASF203
	.sleb128 101
	.uleb128 0x12
	.long	.LASF204
	.sleb128 102
	.uleb128 0x12
	.long	.LASF205
	.sleb128 103
	.uleb128 0x12
	.long	.LASF206
	.sleb128 104
	.uleb128 0x12
	.long	.LASF207
	.sleb128 105
	.uleb128 0x12
	.long	.LASF208
	.sleb128 106
	.uleb128 0x12
	.long	.LASF209
	.sleb128 107
	.uleb128 0x12
	.long	.LASF210
	.sleb128 108
	.uleb128 0x12
	.long	.LASF211
	.sleb128 109
	.uleb128 0x12
	.long	.LASF212
	.sleb128 110
	.uleb128 0x12
	.long	.LASF213
	.sleb128 111
	.uleb128 0x12
	.long	.LASF214
	.sleb128 112
	.uleb128 0x12
	.long	.LASF215
	.sleb128 113
	.uleb128 0x12
	.long	.LASF216
	.sleb128 114
	.uleb128 0x12
	.long	.LASF217
	.sleb128 115
	.uleb128 0x12
	.long	.LASF218
	.sleb128 116
	.uleb128 0x12
	.long	.LASF219
	.sleb128 117
	.uleb128 0x12
	.long	.LASF220
	.sleb128 118
	.uleb128 0x12
	.long	.LASF221
	.sleb128 119
	.uleb128 0x12
	.long	.LASF222
	.sleb128 120
	.uleb128 0x12
	.long	.LASF223
	.sleb128 121
	.uleb128 0x12
	.long	.LASF224
	.sleb128 122
	.uleb128 0x12
	.long	.LASF225
	.sleb128 123
	.uleb128 0x12
	.long	.LASF226
	.sleb128 124
	.uleb128 0x12
	.long	.LASF227
	.sleb128 125
	.uleb128 0x12
	.long	.LASF228
	.sleb128 126
	.uleb128 0x12
	.long	.LASF229
	.sleb128 127
	.uleb128 0x12
	.long	.LASF230
	.sleb128 128
	.uleb128 0x12
	.long	.LASF231
	.sleb128 129
	.uleb128 0x12
	.long	.LASF232
	.sleb128 130
	.uleb128 0x12
	.long	.LASF233
	.sleb128 131
	.uleb128 0x12
	.long	.LASF234
	.sleb128 132
	.uleb128 0x12
	.long	.LASF235
	.sleb128 133
	.uleb128 0x12
	.long	.LASF236
	.sleb128 134
	.uleb128 0x12
	.long	.LASF237
	.sleb128 135
	.uleb128 0x12
	.long	.LASF238
	.sleb128 136
	.uleb128 0x12
	.long	.LASF239
	.sleb128 137
	.uleb128 0x12
	.long	.LASF240
	.sleb128 138
	.uleb128 0x12
	.long	.LASF241
	.sleb128 139
	.uleb128 0x12
	.long	.LASF242
	.sleb128 140
	.uleb128 0x12
	.long	.LASF243
	.sleb128 141
	.uleb128 0x12
	.long	.LASF244
	.sleb128 142
	.uleb128 0x12
	.long	.LASF245
	.sleb128 143
	.uleb128 0x12
	.long	.LASF246
	.sleb128 144
	.uleb128 0x12
	.long	.LASF247
	.sleb128 145
	.uleb128 0x12
	.long	.LASF248
	.sleb128 146
	.uleb128 0x12
	.long	.LASF249
	.sleb128 147
	.uleb128 0x12
	.long	.LASF250
	.sleb128 148
	.uleb128 0x12
	.long	.LASF251
	.sleb128 149
	.uleb128 0x12
	.long	.LASF252
	.sleb128 150
	.uleb128 0x12
	.long	.LASF253
	.sleb128 151
	.uleb128 0x12
	.long	.LASF254
	.sleb128 152
	.uleb128 0x12
	.long	.LASF255
	.sleb128 153
	.uleb128 0x12
	.long	.LASF256
	.sleb128 154
	.uleb128 0x12
	.long	.LASF257
	.sleb128 155
	.uleb128 0x12
	.long	.LASF258
	.sleb128 156
	.uleb128 0x12
	.long	.LASF259
	.sleb128 157
	.uleb128 0x12
	.long	.LASF260
	.sleb128 158
	.uleb128 0x12
	.long	.LASF261
	.sleb128 159
	.uleb128 0x12
	.long	.LASF262
	.sleb128 160
	.uleb128 0x12
	.long	.LASF263
	.sleb128 161
	.uleb128 0x12
	.long	.LASF264
	.sleb128 162
	.uleb128 0x12
	.long	.LASF265
	.sleb128 163
	.uleb128 0x12
	.long	.LASF266
	.sleb128 164
	.uleb128 0x12
	.long	.LASF267
	.sleb128 165
	.uleb128 0x12
	.long	.LASF268
	.sleb128 166
	.uleb128 0x12
	.long	.LASF269
	.sleb128 167
	.uleb128 0x12
	.long	.LASF270
	.sleb128 168
	.uleb128 0x12
	.long	.LASF271
	.sleb128 169
	.uleb128 0x12
	.long	.LASF272
	.sleb128 170
	.uleb128 0x12
	.long	.LASF273
	.sleb128 171
	.uleb128 0x12
	.long	.LASF274
	.sleb128 172
	.uleb128 0x12
	.long	.LASF275
	.sleb128 173
	.uleb128 0x12
	.long	.LASF276
	.sleb128 174
	.uleb128 0x12
	.long	.LASF277
	.sleb128 175
	.uleb128 0x12
	.long	.LASF278
	.sleb128 176
	.uleb128 0x12
	.long	.LASF279
	.sleb128 177
	.uleb128 0x12
	.long	.LASF280
	.sleb128 178
	.uleb128 0x12
	.long	.LASF281
	.sleb128 179
	.uleb128 0x12
	.long	.LASF282
	.sleb128 180
	.uleb128 0x12
	.long	.LASF283
	.sleb128 181
	.uleb128 0x12
	.long	.LASF284
	.sleb128 182
	.byte	0
	.uleb128 0x11
	.long	.LASF285
	.byte	0x4
	.byte	0x5
	.value	0xc14
	.long	0x9f6
	.uleb128 0x12
	.long	.LASF286
	.sleb128 0
	.uleb128 0x12
	.long	.LASF287
	.sleb128 1
	.uleb128 0x12
	.long	.LASF288
	.sleb128 2
	.uleb128 0x12
	.long	.LASF289
	.sleb128 3
	.uleb128 0x12
	.long	.LASF290
	.sleb128 4
	.uleb128 0x12
	.long	.LASF291
	.sleb128 5
	.byte	0
	.uleb128 0x11
	.long	.LASF292
	.byte	0x4
	.byte	0x5
	.value	0xc23
	.long	0xa10
	.uleb128 0x12
	.long	.LASF293
	.sleb128 0
	.uleb128 0x12
	.long	.LASF294
	.sleb128 1
	.byte	0
	.uleb128 0x10
	.byte	0x4
	.byte	0x7
	.long	.LASF295
	.uleb128 0x16
	.byte	0x8
	.uleb128 0x10
	.byte	0x8
	.byte	0x5
	.long	.LASF296
	.uleb128 0x7
	.long	.LASF297
	.byte	0x6
	.byte	0xd4
	.long	0xa2b
	.uleb128 0x10
	.byte	0x8
	.byte	0x7
	.long	.LASF298
	.uleb128 0x10
	.byte	0x1
	.byte	0x8
	.long	.LASF299
	.uleb128 0x10
	.byte	0x2
	.byte	0x7
	.long	.LASF300
	.uleb128 0x10
	.byte	0x1
	.byte	0x6
	.long	.LASF301
	.uleb128 0x10
	.byte	0x2
	.byte	0x5
	.long	.LASF302
	.uleb128 0x7
	.long	.LASF303
	.byte	0x7
	.byte	0x8c
	.long	0xa19
	.uleb128 0x7
	.long	.LASF304
	.byte	0x7
	.byte	0x8d
	.long	0xa19
	.uleb128 0x3
	.byte	0x8
	.long	0xa6a
	.uleb128 0x10
	.byte	0x1
	.byte	0x6
	.long	.LASF305
	.uleb128 0x7
	.long	.LASF306
	.byte	0x8
	.byte	0x30
	.long	0xa7c
	.uleb128 0x4
	.long	.LASF307
	.byte	0xd8
	.byte	0x9
	.byte	0xf6
	.long	0xbfd
	.uleb128 0x8
	.long	.LASF308
	.byte	0x9
	.byte	0xf7
	.long	0x328
	.byte	0
	.uleb128 0x8
	.long	.LASF309
	.byte	0x9
	.byte	0xfc
	.long	0xa64
	.byte	0x8
	.uleb128 0x8
	.long	.LASF310
	.byte	0x9
	.byte	0xfd
	.long	0xa64
	.byte	0x10
	.uleb128 0x8
	.long	.LASF311
	.byte	0x9
	.byte	0xfe
	.long	0xa64
	.byte	0x18
	.uleb128 0x8
	.long	.LASF312
	.byte	0x9
	.byte	0xff
	.long	0xa64
	.byte	0x20
	.uleb128 0x14
	.long	.LASF313
	.byte	0x9
	.value	0x100
	.long	0xa64
	.byte	0x28
	.uleb128 0x14
	.long	.LASF314
	.byte	0x9
	.value	0x101
	.long	0xa64
	.byte	0x30
	.uleb128 0x14
	.long	.LASF315
	.byte	0x9
	.value	0x102
	.long	0xa64
	.byte	0x38
	.uleb128 0x14
	.long	.LASF316
	.byte	0x9
	.value	0x103
	.long	0xa64
	.byte	0x40
	.uleb128 0x14
	.long	.LASF317
	.byte	0x9
	.value	0x105
	.long	0xa64
	.byte	0x48
	.uleb128 0x14
	.long	.LASF318
	.byte	0x9
	.value	0x106
	.long	0xa64
	.byte	0x50
	.uleb128 0x14
	.long	.LASF319
	.byte	0x9
	.value	0x107
	.long	0xa64
	.byte	0x58
	.uleb128 0x14
	.long	.LASF320
	.byte	0x9
	.value	0x109
	.long	0xc45
	.byte	0x60
	.uleb128 0x14
	.long	.LASF321
	.byte	0x9
	.value	0x10b
	.long	0xc4b
	.byte	0x68
	.uleb128 0x14
	.long	.LASF322
	.byte	0x9
	.value	0x10d
	.long	0x328
	.byte	0x70
	.uleb128 0x14
	.long	.LASF323
	.byte	0x9
	.value	0x111
	.long	0x328
	.byte	0x74
	.uleb128 0x14
	.long	.LASF324
	.byte	0x9
	.value	0x113
	.long	0xa4e
	.byte	0x78
	.uleb128 0x14
	.long	.LASF325
	.byte	0x9
	.value	0x117
	.long	0xa39
	.byte	0x80
	.uleb128 0x14
	.long	.LASF326
	.byte	0x9
	.value	0x118
	.long	0xa40
	.byte	0x82
	.uleb128 0x14
	.long	.LASF327
	.byte	0x9
	.value	0x119
	.long	0xc51
	.byte	0x83
	.uleb128 0x14
	.long	.LASF328
	.byte	0x9
	.value	0x11d
	.long	0xc61
	.byte	0x88
	.uleb128 0x14
	.long	.LASF329
	.byte	0x9
	.value	0x126
	.long	0xa59
	.byte	0x90
	.uleb128 0x14
	.long	.LASF330
	.byte	0x9
	.value	0x12f
	.long	0xa17
	.byte	0x98
	.uleb128 0x14
	.long	.LASF331
	.byte	0x9
	.value	0x130
	.long	0xa17
	.byte	0xa0
	.uleb128 0x14
	.long	.LASF332
	.byte	0x9
	.value	0x131
	.long	0xa17
	.byte	0xa8
	.uleb128 0x14
	.long	.LASF333
	.byte	0x9
	.value	0x132
	.long	0xa17
	.byte	0xb0
	.uleb128 0x14
	.long	.LASF334
	.byte	0x9
	.value	0x133
	.long	0xa20
	.byte	0xb8
	.uleb128 0x14
	.long	.LASF335
	.byte	0x9
	.value	0x135
	.long	0x328
	.byte	0xc0
	.uleb128 0x14
	.long	.LASF336
	.byte	0x9
	.value	0x137
	.long	0xc67
	.byte	0xc4
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0xc0d
	.uleb128 0xf
	.long	0x33f
	.byte	0x3
	.byte	0
	.uleb128 0x17
	.long	.LASF2676
	.byte	0x9
	.byte	0x9b
	.uleb128 0x4
	.long	.LASF337
	.byte	0x18
	.byte	0x9
	.byte	0xa1
	.long	0xc45
	.uleb128 0x8
	.long	.LASF338
	.byte	0x9
	.byte	0xa2
	.long	0xc45
	.byte	0
	.uleb128 0x8
	.long	.LASF339
	.byte	0x9
	.byte	0xa3
	.long	0xc4b
	.byte	0x8
	.uleb128 0x8
	.long	.LASF340
	.byte	0x9
	.byte	0xa7
	.long	0x328
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xc14
	.uleb128 0x3
	.byte	0x8
	.long	0xa7c
	.uleb128 0xe
	.long	0xa6a
	.long	0xc61
	.uleb128 0xf
	.long	0x33f
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xc0d
	.uleb128 0xe
	.long	0xa6a
	.long	0xc77
	.uleb128 0xf
	.long	0x33f
	.byte	0x13
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xc7d
	.uleb128 0xc
	.long	0xa6a
	.uleb128 0x10
	.byte	0x8
	.byte	0x7
	.long	.LASF341
	.uleb128 0x10
	.byte	0x8
	.byte	0x5
	.long	.LASF342
	.uleb128 0xe
	.long	0xa6a
	.long	0xca0
	.uleb128 0xf
	.long	0x33f
	.byte	0x1f
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x323
	.uleb128 0xe
	.long	0xc77
	.long	0xcb6
	.uleb128 0xf
	.long	0x33f
	.byte	0xc
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x328
	.uleb128 0x3
	.byte	0x8
	.long	0xcc2
	.uleb128 0x18
	.uleb128 0x19
	.long	.LASF343
	.byte	0x4
	.byte	0xa
	.byte	0x1d
	.long	0xe38
	.uleb128 0x12
	.long	.LASF344
	.sleb128 0
	.uleb128 0x12
	.long	.LASF345
	.sleb128 1
	.uleb128 0x12
	.long	.LASF346
	.sleb128 2
	.uleb128 0x12
	.long	.LASF347
	.sleb128 3
	.uleb128 0x12
	.long	.LASF348
	.sleb128 4
	.uleb128 0x12
	.long	.LASF349
	.sleb128 5
	.uleb128 0x12
	.long	.LASF350
	.sleb128 6
	.uleb128 0x12
	.long	.LASF351
	.sleb128 7
	.uleb128 0x12
	.long	.LASF352
	.sleb128 8
	.uleb128 0x12
	.long	.LASF353
	.sleb128 9
	.uleb128 0x12
	.long	.LASF354
	.sleb128 10
	.uleb128 0x12
	.long	.LASF355
	.sleb128 11
	.uleb128 0x12
	.long	.LASF356
	.sleb128 12
	.uleb128 0x12
	.long	.LASF357
	.sleb128 13
	.uleb128 0x12
	.long	.LASF358
	.sleb128 14
	.uleb128 0x12
	.long	.LASF359
	.sleb128 15
	.uleb128 0x12
	.long	.LASF360
	.sleb128 16
	.uleb128 0x12
	.long	.LASF361
	.sleb128 17
	.uleb128 0x12
	.long	.LASF362
	.sleb128 18
	.uleb128 0x12
	.long	.LASF363
	.sleb128 19
	.uleb128 0x12
	.long	.LASF364
	.sleb128 20
	.uleb128 0x12
	.long	.LASF365
	.sleb128 21
	.uleb128 0x12
	.long	.LASF366
	.sleb128 22
	.uleb128 0x12
	.long	.LASF367
	.sleb128 23
	.uleb128 0x12
	.long	.LASF368
	.sleb128 24
	.uleb128 0x12
	.long	.LASF369
	.sleb128 25
	.uleb128 0x12
	.long	.LASF370
	.sleb128 26
	.uleb128 0x12
	.long	.LASF371
	.sleb128 27
	.uleb128 0x12
	.long	.LASF372
	.sleb128 28
	.uleb128 0x12
	.long	.LASF373
	.sleb128 29
	.uleb128 0x12
	.long	.LASF374
	.sleb128 30
	.uleb128 0x12
	.long	.LASF375
	.sleb128 31
	.uleb128 0x12
	.long	.LASF376
	.sleb128 32
	.uleb128 0x12
	.long	.LASF377
	.sleb128 33
	.uleb128 0x12
	.long	.LASF378
	.sleb128 34
	.uleb128 0x12
	.long	.LASF379
	.sleb128 35
	.uleb128 0x12
	.long	.LASF380
	.sleb128 36
	.uleb128 0x12
	.long	.LASF381
	.sleb128 37
	.uleb128 0x12
	.long	.LASF382
	.sleb128 38
	.uleb128 0x12
	.long	.LASF383
	.sleb128 39
	.uleb128 0x12
	.long	.LASF384
	.sleb128 40
	.uleb128 0x12
	.long	.LASF385
	.sleb128 41
	.uleb128 0x12
	.long	.LASF386
	.sleb128 42
	.uleb128 0x12
	.long	.LASF387
	.sleb128 43
	.uleb128 0x12
	.long	.LASF388
	.sleb128 44
	.uleb128 0x12
	.long	.LASF389
	.sleb128 45
	.uleb128 0x12
	.long	.LASF390
	.sleb128 46
	.uleb128 0x12
	.long	.LASF391
	.sleb128 47
	.uleb128 0x12
	.long	.LASF392
	.sleb128 48
	.uleb128 0x12
	.long	.LASF393
	.sleb128 49
	.uleb128 0x12
	.long	.LASF394
	.sleb128 50
	.uleb128 0x12
	.long	.LASF395
	.sleb128 51
	.uleb128 0x12
	.long	.LASF396
	.sleb128 52
	.uleb128 0x12
	.long	.LASF397
	.sleb128 53
	.uleb128 0x12
	.long	.LASF398
	.sleb128 54
	.uleb128 0x12
	.long	.LASF399
	.sleb128 55
	.uleb128 0x12
	.long	.LASF400
	.sleb128 56
	.uleb128 0x12
	.long	.LASF401
	.sleb128 57
	.uleb128 0x12
	.long	.LASF402
	.sleb128 58
	.uleb128 0x12
	.long	.LASF403
	.sleb128 59
	.byte	0
	.uleb128 0x19
	.long	.LASF404
	.byte	0x4
	.byte	0xa
	.byte	0x2c
	.long	0xe81
	.uleb128 0x12
	.long	.LASF405
	.sleb128 0
	.uleb128 0x12
	.long	.LASF406
	.sleb128 1
	.uleb128 0x12
	.long	.LASF407
	.sleb128 2
	.uleb128 0x12
	.long	.LASF408
	.sleb128 3
	.uleb128 0x12
	.long	.LASF409
	.sleb128 4
	.uleb128 0x12
	.long	.LASF410
	.sleb128 5
	.uleb128 0x12
	.long	.LASF411
	.sleb128 6
	.uleb128 0x12
	.long	.LASF412
	.sleb128 7
	.uleb128 0x12
	.long	.LASF413
	.sleb128 8
	.uleb128 0x12
	.long	.LASF414
	.sleb128 9
	.byte	0
	.uleb128 0x19
	.long	.LASF415
	.byte	0x4
	.byte	0x2
	.byte	0x29
	.long	0x127d
	.uleb128 0x12
	.long	.LASF416
	.sleb128 0
	.uleb128 0x1a
	.string	"NIL"
	.sleb128 1
	.uleb128 0x12
	.long	.LASF417
	.sleb128 2
	.uleb128 0x12
	.long	.LASF418
	.sleb128 3
	.uleb128 0x12
	.long	.LASF419
	.sleb128 4
	.uleb128 0x12
	.long	.LASF420
	.sleb128 5
	.uleb128 0x12
	.long	.LASF421
	.sleb128 6
	.uleb128 0x12
	.long	.LASF422
	.sleb128 7
	.uleb128 0x12
	.long	.LASF423
	.sleb128 8
	.uleb128 0x12
	.long	.LASF424
	.sleb128 9
	.uleb128 0x12
	.long	.LASF425
	.sleb128 10
	.uleb128 0x12
	.long	.LASF426
	.sleb128 11
	.uleb128 0x12
	.long	.LASF427
	.sleb128 12
	.uleb128 0x12
	.long	.LASF428
	.sleb128 13
	.uleb128 0x12
	.long	.LASF429
	.sleb128 14
	.uleb128 0x12
	.long	.LASF430
	.sleb128 15
	.uleb128 0x12
	.long	.LASF431
	.sleb128 16
	.uleb128 0x12
	.long	.LASF432
	.sleb128 17
	.uleb128 0x12
	.long	.LASF433
	.sleb128 18
	.uleb128 0x12
	.long	.LASF434
	.sleb128 19
	.uleb128 0x12
	.long	.LASF435
	.sleb128 20
	.uleb128 0x12
	.long	.LASF436
	.sleb128 21
	.uleb128 0x12
	.long	.LASF437
	.sleb128 22
	.uleb128 0x12
	.long	.LASF438
	.sleb128 23
	.uleb128 0x12
	.long	.LASF439
	.sleb128 24
	.uleb128 0x12
	.long	.LASF440
	.sleb128 25
	.uleb128 0x12
	.long	.LASF441
	.sleb128 26
	.uleb128 0x12
	.long	.LASF442
	.sleb128 27
	.uleb128 0x12
	.long	.LASF443
	.sleb128 28
	.uleb128 0x12
	.long	.LASF444
	.sleb128 29
	.uleb128 0x12
	.long	.LASF445
	.sleb128 30
	.uleb128 0x12
	.long	.LASF446
	.sleb128 31
	.uleb128 0x12
	.long	.LASF447
	.sleb128 32
	.uleb128 0x12
	.long	.LASF448
	.sleb128 33
	.uleb128 0x12
	.long	.LASF449
	.sleb128 34
	.uleb128 0x12
	.long	.LASF450
	.sleb128 35
	.uleb128 0x12
	.long	.LASF451
	.sleb128 36
	.uleb128 0x12
	.long	.LASF452
	.sleb128 37
	.uleb128 0x12
	.long	.LASF453
	.sleb128 38
	.uleb128 0x12
	.long	.LASF454
	.sleb128 39
	.uleb128 0x12
	.long	.LASF455
	.sleb128 40
	.uleb128 0x12
	.long	.LASF456
	.sleb128 41
	.uleb128 0x12
	.long	.LASF457
	.sleb128 42
	.uleb128 0x12
	.long	.LASF458
	.sleb128 43
	.uleb128 0x12
	.long	.LASF459
	.sleb128 44
	.uleb128 0x12
	.long	.LASF460
	.sleb128 45
	.uleb128 0x12
	.long	.LASF461
	.sleb128 46
	.uleb128 0x1a
	.string	"SET"
	.sleb128 47
	.uleb128 0x1a
	.string	"USE"
	.sleb128 48
	.uleb128 0x12
	.long	.LASF462
	.sleb128 49
	.uleb128 0x12
	.long	.LASF463
	.sleb128 50
	.uleb128 0x12
	.long	.LASF464
	.sleb128 51
	.uleb128 0x12
	.long	.LASF465
	.sleb128 52
	.uleb128 0x12
	.long	.LASF466
	.sleb128 53
	.uleb128 0x12
	.long	.LASF467
	.sleb128 54
	.uleb128 0x12
	.long	.LASF468
	.sleb128 55
	.uleb128 0x12
	.long	.LASF469
	.sleb128 56
	.uleb128 0x12
	.long	.LASF470
	.sleb128 57
	.uleb128 0x12
	.long	.LASF471
	.sleb128 58
	.uleb128 0x1a
	.string	"PC"
	.sleb128 59
	.uleb128 0x12
	.long	.LASF472
	.sleb128 60
	.uleb128 0x1a
	.string	"REG"
	.sleb128 61
	.uleb128 0x12
	.long	.LASF473
	.sleb128 62
	.uleb128 0x12
	.long	.LASF474
	.sleb128 63
	.uleb128 0x12
	.long	.LASF475
	.sleb128 64
	.uleb128 0x12
	.long	.LASF476
	.sleb128 65
	.uleb128 0x1a
	.string	"MEM"
	.sleb128 66
	.uleb128 0x12
	.long	.LASF477
	.sleb128 67
	.uleb128 0x12
	.long	.LASF478
	.sleb128 68
	.uleb128 0x1a
	.string	"CC0"
	.sleb128 69
	.uleb128 0x12
	.long	.LASF479
	.sleb128 70
	.uleb128 0x12
	.long	.LASF480
	.sleb128 71
	.uleb128 0x12
	.long	.LASF481
	.sleb128 72
	.uleb128 0x12
	.long	.LASF482
	.sleb128 73
	.uleb128 0x12
	.long	.LASF483
	.sleb128 74
	.uleb128 0x12
	.long	.LASF484
	.sleb128 75
	.uleb128 0x12
	.long	.LASF485
	.sleb128 76
	.uleb128 0x1a
	.string	"NEG"
	.sleb128 77
	.uleb128 0x12
	.long	.LASF486
	.sleb128 78
	.uleb128 0x1a
	.string	"DIV"
	.sleb128 79
	.uleb128 0x1a
	.string	"MOD"
	.sleb128 80
	.uleb128 0x12
	.long	.LASF487
	.sleb128 81
	.uleb128 0x12
	.long	.LASF488
	.sleb128 82
	.uleb128 0x1a
	.string	"AND"
	.sleb128 83
	.uleb128 0x1a
	.string	"IOR"
	.sleb128 84
	.uleb128 0x1a
	.string	"XOR"
	.sleb128 85
	.uleb128 0x1a
	.string	"NOT"
	.sleb128 86
	.uleb128 0x12
	.long	.LASF489
	.sleb128 87
	.uleb128 0x12
	.long	.LASF490
	.sleb128 88
	.uleb128 0x12
	.long	.LASF491
	.sleb128 89
	.uleb128 0x12
	.long	.LASF492
	.sleb128 90
	.uleb128 0x12
	.long	.LASF493
	.sleb128 91
	.uleb128 0x12
	.long	.LASF494
	.sleb128 92
	.uleb128 0x12
	.long	.LASF495
	.sleb128 93
	.uleb128 0x12
	.long	.LASF496
	.sleb128 94
	.uleb128 0x12
	.long	.LASF497
	.sleb128 95
	.uleb128 0x12
	.long	.LASF498
	.sleb128 96
	.uleb128 0x12
	.long	.LASF499
	.sleb128 97
	.uleb128 0x12
	.long	.LASF500
	.sleb128 98
	.uleb128 0x12
	.long	.LASF501
	.sleb128 99
	.uleb128 0x12
	.long	.LASF502
	.sleb128 100
	.uleb128 0x12
	.long	.LASF503
	.sleb128 101
	.uleb128 0x1a
	.string	"NE"
	.sleb128 102
	.uleb128 0x1a
	.string	"EQ"
	.sleb128 103
	.uleb128 0x1a
	.string	"GE"
	.sleb128 104
	.uleb128 0x1a
	.string	"GT"
	.sleb128 105
	.uleb128 0x1a
	.string	"LE"
	.sleb128 106
	.uleb128 0x1a
	.string	"LT"
	.sleb128 107
	.uleb128 0x1a
	.string	"GEU"
	.sleb128 108
	.uleb128 0x1a
	.string	"GTU"
	.sleb128 109
	.uleb128 0x1a
	.string	"LEU"
	.sleb128 110
	.uleb128 0x1a
	.string	"LTU"
	.sleb128 111
	.uleb128 0x12
	.long	.LASF504
	.sleb128 112
	.uleb128 0x12
	.long	.LASF505
	.sleb128 113
	.uleb128 0x12
	.long	.LASF506
	.sleb128 114
	.uleb128 0x12
	.long	.LASF507
	.sleb128 115
	.uleb128 0x12
	.long	.LASF508
	.sleb128 116
	.uleb128 0x12
	.long	.LASF509
	.sleb128 117
	.uleb128 0x12
	.long	.LASF510
	.sleb128 118
	.uleb128 0x12
	.long	.LASF511
	.sleb128 119
	.uleb128 0x12
	.long	.LASF512
	.sleb128 120
	.uleb128 0x12
	.long	.LASF513
	.sleb128 121
	.uleb128 0x12
	.long	.LASF514
	.sleb128 122
	.uleb128 0x12
	.long	.LASF515
	.sleb128 123
	.uleb128 0x12
	.long	.LASF516
	.sleb128 124
	.uleb128 0x12
	.long	.LASF517
	.sleb128 125
	.uleb128 0x1a
	.string	"FIX"
	.sleb128 126
	.uleb128 0x12
	.long	.LASF518
	.sleb128 127
	.uleb128 0x12
	.long	.LASF519
	.sleb128 128
	.uleb128 0x1a
	.string	"ABS"
	.sleb128 129
	.uleb128 0x12
	.long	.LASF520
	.sleb128 130
	.uleb128 0x1a
	.string	"FFS"
	.sleb128 131
	.uleb128 0x12
	.long	.LASF521
	.sleb128 132
	.uleb128 0x12
	.long	.LASF522
	.sleb128 133
	.uleb128 0x12
	.long	.LASF523
	.sleb128 134
	.uleb128 0x12
	.long	.LASF524
	.sleb128 135
	.uleb128 0x12
	.long	.LASF525
	.sleb128 136
	.uleb128 0x12
	.long	.LASF526
	.sleb128 137
	.uleb128 0x12
	.long	.LASF527
	.sleb128 138
	.uleb128 0x12
	.long	.LASF528
	.sleb128 139
	.uleb128 0x12
	.long	.LASF529
	.sleb128 140
	.uleb128 0x12
	.long	.LASF530
	.sleb128 141
	.uleb128 0x12
	.long	.LASF531
	.sleb128 142
	.uleb128 0x12
	.long	.LASF532
	.sleb128 143
	.uleb128 0x12
	.long	.LASF533
	.sleb128 144
	.uleb128 0x12
	.long	.LASF534
	.sleb128 145
	.uleb128 0x12
	.long	.LASF535
	.sleb128 146
	.uleb128 0x12
	.long	.LASF536
	.sleb128 147
	.uleb128 0x12
	.long	.LASF537
	.sleb128 148
	.uleb128 0x12
	.long	.LASF538
	.sleb128 149
	.uleb128 0x12
	.long	.LASF539
	.sleb128 150
	.uleb128 0x12
	.long	.LASF540
	.sleb128 151
	.uleb128 0x1a
	.string	"PHI"
	.sleb128 152
	.uleb128 0x12
	.long	.LASF541
	.sleb128 153
	.byte	0
	.uleb128 0x1b
	.byte	0x4
	.byte	0x2
	.byte	0x44
	.long	0x12fe
	.uleb128 0x5
	.long	.LASF542
	.byte	0x2
	.byte	0x47
	.long	0xa10
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0
	.uleb128 0x5
	.long	.LASF543
	.byte	0x2
	.byte	0x49
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0
	.uleb128 0x5
	.long	.LASF544
	.byte	0x2
	.byte	0x4a
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0
	.uleb128 0x5
	.long	.LASF545
	.byte	0x2
	.byte	0x4c
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0
	.uleb128 0x5
	.long	.LASF546
	.byte	0x2
	.byte	0x4e
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0
	.uleb128 0x5
	.long	.LASF547
	.byte	0x2
	.byte	0x50
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0
	.uleb128 0x5
	.long	.LASF548
	.byte	0x2
	.byte	0x53
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0
	.uleb128 0x5
	.long	.LASF549
	.byte	0x2
	.byte	0x55
	.long	0xa10
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.long	.LASF550
	.byte	0x2
	.byte	0x56
	.long	0x127d
	.uleb128 0x1b
	.byte	0x28
	.byte	0x2
	.byte	0x5c
	.long	0x134e
	.uleb128 0x8
	.long	.LASF551
	.byte	0x2
	.byte	0x5e
	.long	0xa19
	.byte	0
	.uleb128 0x8
	.long	.LASF552
	.byte	0x2
	.byte	0x5f
	.long	0x123
	.byte	0x8
	.uleb128 0x8
	.long	.LASF553
	.byte	0x2
	.byte	0x60
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF554
	.byte	0x2
	.byte	0x61
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF555
	.byte	0x2
	.byte	0x62
	.long	0xa10
	.byte	0x20
	.byte	0
	.uleb128 0x7
	.long	.LASF556
	.byte	0x2
	.byte	0x63
	.long	0x1309
	.uleb128 0x1c
	.long	.LASF558
	.byte	0x8
	.byte	0x2
	.byte	0x67
	.long	0x13f4
	.uleb128 0x1d
	.long	.LASF559
	.byte	0x2
	.byte	0x69
	.long	0xa19
	.uleb128 0x1d
	.long	.LASF560
	.byte	0x2
	.byte	0x6a
	.long	0x328
	.uleb128 0x1d
	.long	.LASF561
	.byte	0x2
	.byte	0x6b
	.long	0xa10
	.uleb128 0x1d
	.long	.LASF562
	.byte	0x2
	.byte	0x6c
	.long	0xc77
	.uleb128 0x1e
	.string	"rtx"
	.byte	0x2
	.byte	0x6d
	.long	0x2d
	.uleb128 0x1d
	.long	.LASF10
	.byte	0x2
	.byte	0x6e
	.long	0xed
	.uleb128 0x1d
	.long	.LASF563
	.byte	0x2
	.byte	0x6f
	.long	0xcc3
	.uleb128 0x1d
	.long	.LASF564
	.byte	0x2
	.byte	0x70
	.long	0x12fe
	.uleb128 0x1d
	.long	.LASF565
	.byte	0x2
	.byte	0x71
	.long	0x13f9
	.uleb128 0x1d
	.long	.LASF566
	.byte	0x2
	.byte	0x72
	.long	0x1430
	.uleb128 0x1d
	.long	.LASF567
	.byte	0x2
	.byte	0x73
	.long	0x123
	.uleb128 0x1e
	.string	"bb"
	.byte	0x2
	.byte	0x74
	.long	0x1503
	.uleb128 0x1d
	.long	.LASF568
	.byte	0x2
	.byte	0x75
	.long	0x1509
	.byte	0
	.uleb128 0x1f
	.long	.LASF992
	.uleb128 0x3
	.byte	0x8
	.long	0x13f4
	.uleb128 0x4
	.long	.LASF569
	.byte	0x18
	.byte	0xb
	.byte	0x34
	.long	0x1430
	.uleb128 0x8
	.long	.LASF570
	.byte	0xb
	.byte	0x35
	.long	0x46e5
	.byte	0
	.uleb128 0x8
	.long	.LASF571
	.byte	0xb
	.byte	0x36
	.long	0x46e5
	.byte	0x8
	.uleb128 0x8
	.long	.LASF572
	.byte	0xb
	.byte	0x37
	.long	0xa10
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x13ff
	.uleb128 0x4
	.long	.LASF573
	.byte	0x70
	.byte	0xc
	.byte	0xae
	.long	0x1503
	.uleb128 0x8
	.long	.LASF574
	.byte	0xc
	.byte	0xb0
	.long	0x2d
	.byte	0
	.uleb128 0x6
	.string	"end"
	.byte	0xc
	.byte	0xb0
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF575
	.byte	0xc
	.byte	0xb3
	.long	0x123
	.byte	0x10
	.uleb128 0x8
	.long	.LASF576
	.byte	0xc
	.byte	0xb4
	.long	0x123
	.byte	0x18
	.uleb128 0x8
	.long	.LASF577
	.byte	0xc
	.byte	0xb7
	.long	0x478b
	.byte	0x20
	.uleb128 0x8
	.long	.LASF578
	.byte	0xc
	.byte	0xb7
	.long	0x478b
	.byte	0x28
	.uleb128 0x8
	.long	.LASF579
	.byte	0xc
	.byte	0xbc
	.long	0x46f6
	.byte	0x30
	.uleb128 0x8
	.long	.LASF580
	.byte	0xc
	.byte	0xc0
	.long	0x46f6
	.byte	0x38
	.uleb128 0x8
	.long	.LASF581
	.byte	0xc
	.byte	0xc6
	.long	0x46f6
	.byte	0x40
	.uleb128 0x8
	.long	.LASF582
	.byte	0xc
	.byte	0xc8
	.long	0x46f6
	.byte	0x48
	.uleb128 0x6
	.string	"aux"
	.byte	0xc
	.byte	0xcb
	.long	0xa17
	.byte	0x50
	.uleb128 0x8
	.long	.LASF583
	.byte	0xc
	.byte	0xce
	.long	0x328
	.byte	0x58
	.uleb128 0x8
	.long	.LASF584
	.byte	0xc
	.byte	0xd1
	.long	0x328
	.byte	0x5c
	.uleb128 0x8
	.long	.LASF585
	.byte	0xc
	.byte	0xd4
	.long	0x4701
	.byte	0x60
	.uleb128 0x8
	.long	.LASF586
	.byte	0xc
	.byte	0xd7
	.long	0x328
	.byte	0x68
	.uleb128 0x8
	.long	.LASF587
	.byte	0xc
	.byte	0xda
	.long	0x328
	.byte	0x6c
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1436
	.uleb128 0x3
	.byte	0x8
	.long	0x134e
	.uleb128 0x7
	.long	.LASF588
	.byte	0x2
	.byte	0x76
	.long	0x1359
	.uleb128 0xe
	.long	0x150f
	.long	0x152a
	.uleb128 0xf
	.long	0x33f
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x2d
	.long	0x153a
	.uleb128 0xf
	.long	0x33f
	.byte	0
	.byte	0
	.uleb128 0x11
	.long	.LASF589
	.byte	0x4
	.byte	0x2
	.value	0x1c3
	.long	0x15fc
	.uleb128 0x12
	.long	.LASF590
	.sleb128 1
	.uleb128 0x12
	.long	.LASF591
	.sleb128 2
	.uleb128 0x12
	.long	.LASF592
	.sleb128 3
	.uleb128 0x12
	.long	.LASF593
	.sleb128 4
	.uleb128 0x12
	.long	.LASF594
	.sleb128 5
	.uleb128 0x12
	.long	.LASF595
	.sleb128 6
	.uleb128 0x12
	.long	.LASF596
	.sleb128 7
	.uleb128 0x12
	.long	.LASF597
	.sleb128 8
	.uleb128 0x12
	.long	.LASF598
	.sleb128 9
	.uleb128 0x12
	.long	.LASF599
	.sleb128 10
	.uleb128 0x12
	.long	.LASF600
	.sleb128 11
	.uleb128 0x12
	.long	.LASF601
	.sleb128 12
	.uleb128 0x12
	.long	.LASF602
	.sleb128 13
	.uleb128 0x12
	.long	.LASF603
	.sleb128 14
	.uleb128 0x12
	.long	.LASF604
	.sleb128 15
	.uleb128 0x12
	.long	.LASF605
	.sleb128 16
	.uleb128 0x12
	.long	.LASF606
	.sleb128 17
	.uleb128 0x12
	.long	.LASF607
	.sleb128 18
	.uleb128 0x12
	.long	.LASF608
	.sleb128 19
	.uleb128 0x12
	.long	.LASF609
	.sleb128 20
	.uleb128 0x12
	.long	.LASF610
	.sleb128 21
	.uleb128 0x12
	.long	.LASF611
	.sleb128 22
	.uleb128 0x12
	.long	.LASF612
	.sleb128 23
	.uleb128 0x12
	.long	.LASF613
	.sleb128 24
	.uleb128 0x12
	.long	.LASF614
	.sleb128 25
	.uleb128 0x12
	.long	.LASF615
	.sleb128 26
	.uleb128 0x12
	.long	.LASF616
	.sleb128 27
	.uleb128 0x12
	.long	.LASF617
	.sleb128 28
	.uleb128 0x12
	.long	.LASF618
	.sleb128 29
	.uleb128 0x12
	.long	.LASF619
	.sleb128 30
	.byte	0
	.uleb128 0x11
	.long	.LASF620
	.byte	0x4
	.byte	0x2
	.value	0x297
	.long	0x16ab
	.uleb128 0x12
	.long	.LASF621
	.sleb128 -100
	.uleb128 0x12
	.long	.LASF622
	.sleb128 -99
	.uleb128 0x12
	.long	.LASF623
	.sleb128 -98
	.uleb128 0x12
	.long	.LASF624
	.sleb128 -97
	.uleb128 0x12
	.long	.LASF625
	.sleb128 -96
	.uleb128 0x12
	.long	.LASF626
	.sleb128 -95
	.uleb128 0x12
	.long	.LASF627
	.sleb128 -94
	.uleb128 0x12
	.long	.LASF628
	.sleb128 -93
	.uleb128 0x12
	.long	.LASF629
	.sleb128 -92
	.uleb128 0x12
	.long	.LASF630
	.sleb128 -91
	.uleb128 0x12
	.long	.LASF631
	.sleb128 -90
	.uleb128 0x12
	.long	.LASF632
	.sleb128 -89
	.uleb128 0x12
	.long	.LASF633
	.sleb128 -88
	.uleb128 0x12
	.long	.LASF634
	.sleb128 -87
	.uleb128 0x12
	.long	.LASF635
	.sleb128 -86
	.uleb128 0x12
	.long	.LASF636
	.sleb128 -85
	.uleb128 0x12
	.long	.LASF637
	.sleb128 -84
	.uleb128 0x12
	.long	.LASF638
	.sleb128 -83
	.uleb128 0x12
	.long	.LASF639
	.sleb128 -82
	.uleb128 0x12
	.long	.LASF640
	.sleb128 -81
	.uleb128 0x12
	.long	.LASF641
	.sleb128 -80
	.uleb128 0x12
	.long	.LASF642
	.sleb128 -79
	.uleb128 0x12
	.long	.LASF643
	.sleb128 -78
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2d
	.uleb128 0x11
	.long	.LASF644
	.byte	0x4
	.byte	0x2
	.value	0x630
	.long	0x1707
	.uleb128 0x12
	.long	.LASF645
	.sleb128 0
	.uleb128 0x12
	.long	.LASF646
	.sleb128 1
	.uleb128 0x12
	.long	.LASF647
	.sleb128 2
	.uleb128 0x12
	.long	.LASF648
	.sleb128 3
	.uleb128 0x12
	.long	.LASF649
	.sleb128 4
	.uleb128 0x12
	.long	.LASF650
	.sleb128 5
	.uleb128 0x12
	.long	.LASF651
	.sleb128 6
	.uleb128 0x12
	.long	.LASF652
	.sleb128 7
	.uleb128 0x12
	.long	.LASF653
	.sleb128 8
	.uleb128 0x12
	.long	.LASF654
	.sleb128 9
	.uleb128 0x12
	.long	.LASF655
	.sleb128 10
	.uleb128 0x12
	.long	.LASF656
	.sleb128 11
	.byte	0
	.uleb128 0x19
	.long	.LASF657
	.byte	0x4
	.byte	0x4
	.byte	0x1d
	.long	0x1ae0
	.uleb128 0x12
	.long	.LASF658
	.sleb128 0
	.uleb128 0x12
	.long	.LASF659
	.sleb128 1
	.uleb128 0x12
	.long	.LASF660
	.sleb128 2
	.uleb128 0x12
	.long	.LASF661
	.sleb128 3
	.uleb128 0x12
	.long	.LASF662
	.sleb128 4
	.uleb128 0x12
	.long	.LASF663
	.sleb128 5
	.uleb128 0x12
	.long	.LASF664
	.sleb128 6
	.uleb128 0x12
	.long	.LASF665
	.sleb128 7
	.uleb128 0x12
	.long	.LASF666
	.sleb128 8
	.uleb128 0x12
	.long	.LASF667
	.sleb128 9
	.uleb128 0x12
	.long	.LASF668
	.sleb128 10
	.uleb128 0x12
	.long	.LASF669
	.sleb128 11
	.uleb128 0x12
	.long	.LASF670
	.sleb128 12
	.uleb128 0x12
	.long	.LASF671
	.sleb128 13
	.uleb128 0x12
	.long	.LASF672
	.sleb128 14
	.uleb128 0x12
	.long	.LASF673
	.sleb128 15
	.uleb128 0x12
	.long	.LASF674
	.sleb128 16
	.uleb128 0x12
	.long	.LASF675
	.sleb128 17
	.uleb128 0x12
	.long	.LASF676
	.sleb128 18
	.uleb128 0x12
	.long	.LASF677
	.sleb128 19
	.uleb128 0x12
	.long	.LASF678
	.sleb128 20
	.uleb128 0x12
	.long	.LASF679
	.sleb128 21
	.uleb128 0x12
	.long	.LASF680
	.sleb128 22
	.uleb128 0x12
	.long	.LASF681
	.sleb128 23
	.uleb128 0x12
	.long	.LASF682
	.sleb128 24
	.uleb128 0x12
	.long	.LASF683
	.sleb128 25
	.uleb128 0x12
	.long	.LASF684
	.sleb128 26
	.uleb128 0x12
	.long	.LASF685
	.sleb128 27
	.uleb128 0x12
	.long	.LASF686
	.sleb128 28
	.uleb128 0x12
	.long	.LASF687
	.sleb128 29
	.uleb128 0x12
	.long	.LASF688
	.sleb128 30
	.uleb128 0x12
	.long	.LASF689
	.sleb128 31
	.uleb128 0x12
	.long	.LASF690
	.sleb128 32
	.uleb128 0x12
	.long	.LASF691
	.sleb128 33
	.uleb128 0x12
	.long	.LASF692
	.sleb128 34
	.uleb128 0x12
	.long	.LASF693
	.sleb128 35
	.uleb128 0x12
	.long	.LASF694
	.sleb128 36
	.uleb128 0x12
	.long	.LASF695
	.sleb128 37
	.uleb128 0x12
	.long	.LASF696
	.sleb128 38
	.uleb128 0x12
	.long	.LASF697
	.sleb128 39
	.uleb128 0x12
	.long	.LASF698
	.sleb128 40
	.uleb128 0x12
	.long	.LASF699
	.sleb128 41
	.uleb128 0x12
	.long	.LASF700
	.sleb128 42
	.uleb128 0x12
	.long	.LASF701
	.sleb128 43
	.uleb128 0x12
	.long	.LASF702
	.sleb128 44
	.uleb128 0x12
	.long	.LASF703
	.sleb128 45
	.uleb128 0x12
	.long	.LASF704
	.sleb128 46
	.uleb128 0x12
	.long	.LASF705
	.sleb128 47
	.uleb128 0x12
	.long	.LASF706
	.sleb128 48
	.uleb128 0x12
	.long	.LASF707
	.sleb128 49
	.uleb128 0x12
	.long	.LASF708
	.sleb128 50
	.uleb128 0x12
	.long	.LASF709
	.sleb128 51
	.uleb128 0x12
	.long	.LASF710
	.sleb128 52
	.uleb128 0x12
	.long	.LASF711
	.sleb128 53
	.uleb128 0x12
	.long	.LASF712
	.sleb128 54
	.uleb128 0x12
	.long	.LASF713
	.sleb128 55
	.uleb128 0x12
	.long	.LASF714
	.sleb128 56
	.uleb128 0x12
	.long	.LASF715
	.sleb128 57
	.uleb128 0x12
	.long	.LASF716
	.sleb128 58
	.uleb128 0x12
	.long	.LASF717
	.sleb128 59
	.uleb128 0x12
	.long	.LASF718
	.sleb128 60
	.uleb128 0x12
	.long	.LASF719
	.sleb128 61
	.uleb128 0x12
	.long	.LASF720
	.sleb128 62
	.uleb128 0x12
	.long	.LASF721
	.sleb128 63
	.uleb128 0x12
	.long	.LASF722
	.sleb128 64
	.uleb128 0x12
	.long	.LASF723
	.sleb128 65
	.uleb128 0x12
	.long	.LASF724
	.sleb128 66
	.uleb128 0x12
	.long	.LASF725
	.sleb128 67
	.uleb128 0x12
	.long	.LASF726
	.sleb128 68
	.uleb128 0x12
	.long	.LASF727
	.sleb128 69
	.uleb128 0x12
	.long	.LASF728
	.sleb128 70
	.uleb128 0x12
	.long	.LASF729
	.sleb128 71
	.uleb128 0x12
	.long	.LASF730
	.sleb128 72
	.uleb128 0x12
	.long	.LASF731
	.sleb128 73
	.uleb128 0x12
	.long	.LASF732
	.sleb128 74
	.uleb128 0x12
	.long	.LASF733
	.sleb128 75
	.uleb128 0x12
	.long	.LASF734
	.sleb128 76
	.uleb128 0x12
	.long	.LASF735
	.sleb128 77
	.uleb128 0x12
	.long	.LASF736
	.sleb128 78
	.uleb128 0x12
	.long	.LASF737
	.sleb128 79
	.uleb128 0x12
	.long	.LASF738
	.sleb128 80
	.uleb128 0x12
	.long	.LASF739
	.sleb128 81
	.uleb128 0x12
	.long	.LASF740
	.sleb128 82
	.uleb128 0x12
	.long	.LASF741
	.sleb128 83
	.uleb128 0x12
	.long	.LASF742
	.sleb128 84
	.uleb128 0x12
	.long	.LASF743
	.sleb128 85
	.uleb128 0x12
	.long	.LASF744
	.sleb128 86
	.uleb128 0x12
	.long	.LASF745
	.sleb128 87
	.uleb128 0x12
	.long	.LASF746
	.sleb128 88
	.uleb128 0x12
	.long	.LASF747
	.sleb128 89
	.uleb128 0x12
	.long	.LASF748
	.sleb128 90
	.uleb128 0x12
	.long	.LASF749
	.sleb128 91
	.uleb128 0x12
	.long	.LASF750
	.sleb128 92
	.uleb128 0x12
	.long	.LASF751
	.sleb128 93
	.uleb128 0x12
	.long	.LASF752
	.sleb128 94
	.uleb128 0x12
	.long	.LASF753
	.sleb128 95
	.uleb128 0x12
	.long	.LASF754
	.sleb128 96
	.uleb128 0x12
	.long	.LASF755
	.sleb128 97
	.uleb128 0x12
	.long	.LASF756
	.sleb128 98
	.uleb128 0x12
	.long	.LASF757
	.sleb128 99
	.uleb128 0x12
	.long	.LASF758
	.sleb128 100
	.uleb128 0x12
	.long	.LASF759
	.sleb128 101
	.uleb128 0x12
	.long	.LASF760
	.sleb128 102
	.uleb128 0x12
	.long	.LASF761
	.sleb128 103
	.uleb128 0x12
	.long	.LASF762
	.sleb128 104
	.uleb128 0x12
	.long	.LASF763
	.sleb128 105
	.uleb128 0x12
	.long	.LASF764
	.sleb128 106
	.uleb128 0x12
	.long	.LASF765
	.sleb128 107
	.uleb128 0x12
	.long	.LASF766
	.sleb128 108
	.uleb128 0x12
	.long	.LASF767
	.sleb128 109
	.uleb128 0x12
	.long	.LASF768
	.sleb128 110
	.uleb128 0x12
	.long	.LASF769
	.sleb128 111
	.uleb128 0x12
	.long	.LASF770
	.sleb128 112
	.uleb128 0x12
	.long	.LASF771
	.sleb128 113
	.uleb128 0x12
	.long	.LASF772
	.sleb128 114
	.uleb128 0x12
	.long	.LASF773
	.sleb128 115
	.uleb128 0x12
	.long	.LASF774
	.sleb128 116
	.uleb128 0x12
	.long	.LASF775
	.sleb128 117
	.uleb128 0x12
	.long	.LASF776
	.sleb128 118
	.uleb128 0x12
	.long	.LASF777
	.sleb128 119
	.uleb128 0x12
	.long	.LASF778
	.sleb128 120
	.uleb128 0x12
	.long	.LASF779
	.sleb128 121
	.uleb128 0x12
	.long	.LASF780
	.sleb128 122
	.uleb128 0x12
	.long	.LASF781
	.sleb128 123
	.uleb128 0x12
	.long	.LASF782
	.sleb128 124
	.uleb128 0x12
	.long	.LASF783
	.sleb128 125
	.uleb128 0x12
	.long	.LASF784
	.sleb128 126
	.uleb128 0x12
	.long	.LASF785
	.sleb128 127
	.uleb128 0x12
	.long	.LASF786
	.sleb128 128
	.uleb128 0x12
	.long	.LASF787
	.sleb128 129
	.uleb128 0x12
	.long	.LASF788
	.sleb128 130
	.uleb128 0x12
	.long	.LASF789
	.sleb128 131
	.uleb128 0x12
	.long	.LASF790
	.sleb128 132
	.uleb128 0x12
	.long	.LASF791
	.sleb128 133
	.uleb128 0x12
	.long	.LASF792
	.sleb128 134
	.uleb128 0x12
	.long	.LASF793
	.sleb128 135
	.uleb128 0x12
	.long	.LASF794
	.sleb128 136
	.uleb128 0x12
	.long	.LASF795
	.sleb128 137
	.uleb128 0x12
	.long	.LASF796
	.sleb128 138
	.uleb128 0x12
	.long	.LASF797
	.sleb128 139
	.uleb128 0x12
	.long	.LASF798
	.sleb128 140
	.uleb128 0x12
	.long	.LASF799
	.sleb128 141
	.uleb128 0x12
	.long	.LASF800
	.sleb128 142
	.uleb128 0x12
	.long	.LASF801
	.sleb128 143
	.uleb128 0x12
	.long	.LASF802
	.sleb128 144
	.uleb128 0x12
	.long	.LASF803
	.sleb128 145
	.uleb128 0x12
	.long	.LASF804
	.sleb128 146
	.uleb128 0x12
	.long	.LASF805
	.sleb128 147
	.byte	0
	.uleb128 0x19
	.long	.LASF806
	.byte	0x4
	.byte	0x4
	.byte	0x45
	.long	0x1b05
	.uleb128 0x12
	.long	.LASF807
	.sleb128 0
	.uleb128 0x12
	.long	.LASF808
	.sleb128 1
	.uleb128 0x12
	.long	.LASF809
	.sleb128 2
	.uleb128 0x12
	.long	.LASF810
	.sleb128 3
	.byte	0
	.uleb128 0x19
	.long	.LASF811
	.byte	0x4
	.byte	0x4
	.byte	0x54
	.long	0x1d72
	.uleb128 0x12
	.long	.LASF812
	.sleb128 0
	.uleb128 0x12
	.long	.LASF813
	.sleb128 1
	.uleb128 0x12
	.long	.LASF814
	.sleb128 2
	.uleb128 0x12
	.long	.LASF815
	.sleb128 3
	.uleb128 0x12
	.long	.LASF816
	.sleb128 4
	.uleb128 0x12
	.long	.LASF817
	.sleb128 5
	.uleb128 0x12
	.long	.LASF818
	.sleb128 6
	.uleb128 0x12
	.long	.LASF819
	.sleb128 7
	.uleb128 0x12
	.long	.LASF820
	.sleb128 8
	.uleb128 0x12
	.long	.LASF821
	.sleb128 9
	.uleb128 0x12
	.long	.LASF822
	.sleb128 10
	.uleb128 0x12
	.long	.LASF823
	.sleb128 11
	.uleb128 0x12
	.long	.LASF824
	.sleb128 12
	.uleb128 0x12
	.long	.LASF825
	.sleb128 13
	.uleb128 0x12
	.long	.LASF826
	.sleb128 14
	.uleb128 0x12
	.long	.LASF827
	.sleb128 15
	.uleb128 0x12
	.long	.LASF828
	.sleb128 16
	.uleb128 0x12
	.long	.LASF829
	.sleb128 17
	.uleb128 0x12
	.long	.LASF830
	.sleb128 18
	.uleb128 0x12
	.long	.LASF831
	.sleb128 19
	.uleb128 0x12
	.long	.LASF832
	.sleb128 20
	.uleb128 0x12
	.long	.LASF833
	.sleb128 21
	.uleb128 0x12
	.long	.LASF834
	.sleb128 22
	.uleb128 0x12
	.long	.LASF835
	.sleb128 23
	.uleb128 0x12
	.long	.LASF836
	.sleb128 24
	.uleb128 0x12
	.long	.LASF837
	.sleb128 25
	.uleb128 0x12
	.long	.LASF838
	.sleb128 26
	.uleb128 0x12
	.long	.LASF839
	.sleb128 27
	.uleb128 0x12
	.long	.LASF840
	.sleb128 28
	.uleb128 0x12
	.long	.LASF841
	.sleb128 29
	.uleb128 0x12
	.long	.LASF842
	.sleb128 30
	.uleb128 0x12
	.long	.LASF843
	.sleb128 31
	.uleb128 0x12
	.long	.LASF844
	.sleb128 32
	.uleb128 0x12
	.long	.LASF845
	.sleb128 33
	.uleb128 0x12
	.long	.LASF846
	.sleb128 34
	.uleb128 0x12
	.long	.LASF847
	.sleb128 35
	.uleb128 0x12
	.long	.LASF848
	.sleb128 36
	.uleb128 0x12
	.long	.LASF849
	.sleb128 37
	.uleb128 0x12
	.long	.LASF850
	.sleb128 38
	.uleb128 0x12
	.long	.LASF851
	.sleb128 39
	.uleb128 0x12
	.long	.LASF852
	.sleb128 40
	.uleb128 0x12
	.long	.LASF853
	.sleb128 41
	.uleb128 0x12
	.long	.LASF854
	.sleb128 42
	.uleb128 0x12
	.long	.LASF855
	.sleb128 43
	.uleb128 0x12
	.long	.LASF856
	.sleb128 44
	.uleb128 0x12
	.long	.LASF857
	.sleb128 45
	.uleb128 0x12
	.long	.LASF858
	.sleb128 46
	.uleb128 0x12
	.long	.LASF859
	.sleb128 47
	.uleb128 0x12
	.long	.LASF860
	.sleb128 48
	.uleb128 0x12
	.long	.LASF861
	.sleb128 49
	.uleb128 0x12
	.long	.LASF862
	.sleb128 50
	.uleb128 0x12
	.long	.LASF863
	.sleb128 51
	.uleb128 0x12
	.long	.LASF864
	.sleb128 52
	.uleb128 0x12
	.long	.LASF865
	.sleb128 53
	.uleb128 0x12
	.long	.LASF866
	.sleb128 54
	.uleb128 0x12
	.long	.LASF867
	.sleb128 55
	.uleb128 0x12
	.long	.LASF868
	.sleb128 56
	.uleb128 0x12
	.long	.LASF869
	.sleb128 57
	.uleb128 0x12
	.long	.LASF870
	.sleb128 58
	.uleb128 0x12
	.long	.LASF871
	.sleb128 59
	.uleb128 0x12
	.long	.LASF872
	.sleb128 60
	.uleb128 0x12
	.long	.LASF873
	.sleb128 61
	.uleb128 0x12
	.long	.LASF874
	.sleb128 62
	.uleb128 0x12
	.long	.LASF875
	.sleb128 63
	.uleb128 0x12
	.long	.LASF876
	.sleb128 64
	.uleb128 0x12
	.long	.LASF877
	.sleb128 65
	.uleb128 0x12
	.long	.LASF878
	.sleb128 66
	.uleb128 0x12
	.long	.LASF879
	.sleb128 67
	.uleb128 0x12
	.long	.LASF880
	.sleb128 68
	.uleb128 0x12
	.long	.LASF881
	.sleb128 69
	.uleb128 0x12
	.long	.LASF882
	.sleb128 70
	.uleb128 0x12
	.long	.LASF883
	.sleb128 71
	.uleb128 0x12
	.long	.LASF884
	.sleb128 72
	.uleb128 0x12
	.long	.LASF885
	.sleb128 73
	.uleb128 0x12
	.long	.LASF886
	.sleb128 74
	.uleb128 0x12
	.long	.LASF887
	.sleb128 75
	.uleb128 0x12
	.long	.LASF888
	.sleb128 76
	.uleb128 0x12
	.long	.LASF889
	.sleb128 77
	.uleb128 0x12
	.long	.LASF890
	.sleb128 78
	.uleb128 0x12
	.long	.LASF891
	.sleb128 79
	.uleb128 0x12
	.long	.LASF892
	.sleb128 80
	.uleb128 0x12
	.long	.LASF893
	.sleb128 81
	.uleb128 0x12
	.long	.LASF894
	.sleb128 82
	.uleb128 0x12
	.long	.LASF895
	.sleb128 83
	.uleb128 0x12
	.long	.LASF896
	.sleb128 84
	.uleb128 0x12
	.long	.LASF897
	.sleb128 85
	.uleb128 0x12
	.long	.LASF898
	.sleb128 86
	.uleb128 0x12
	.long	.LASF899
	.sleb128 87
	.uleb128 0x12
	.long	.LASF900
	.sleb128 88
	.uleb128 0x12
	.long	.LASF901
	.sleb128 89
	.uleb128 0x12
	.long	.LASF902
	.sleb128 90
	.uleb128 0x12
	.long	.LASF903
	.sleb128 91
	.uleb128 0x12
	.long	.LASF904
	.sleb128 92
	.uleb128 0x12
	.long	.LASF905
	.sleb128 93
	.uleb128 0x12
	.long	.LASF906
	.sleb128 94
	.uleb128 0x12
	.long	.LASF907
	.sleb128 95
	.byte	0
	.uleb128 0x4
	.long	.LASF908
	.byte	0x18
	.byte	0x4
	.byte	0x79
	.long	0x1f0e
	.uleb128 0x8
	.long	.LASF909
	.byte	0x4
	.byte	0x7b
	.long	0x123
	.byte	0
	.uleb128 0x8
	.long	.LASF24
	.byte	0x4
	.byte	0x7c
	.long	0x123
	.byte	0x8
	.uleb128 0x5
	.long	.LASF0
	.byte	0x4
	.byte	0x7e
	.long	0xa10
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x10
	.uleb128 0x5
	.long	.LASF910
	.byte	0x4
	.byte	0x80
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x10
	.uleb128 0x5
	.long	.LASF911
	.byte	0x4
	.byte	0x81
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x10
	.uleb128 0x5
	.long	.LASF912
	.byte	0x4
	.byte	0x82
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x10
	.uleb128 0x5
	.long	.LASF913
	.byte	0x4
	.byte	0x83
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x10
	.uleb128 0x5
	.long	.LASF914
	.byte	0x4
	.byte	0x84
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x10
	.uleb128 0x5
	.long	.LASF915
	.byte	0x4
	.byte	0x85
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x10
	.uleb128 0x5
	.long	.LASF916
	.byte	0x4
	.byte	0x86
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x10
	.uleb128 0x5
	.long	.LASF917
	.byte	0x4
	.byte	0x87
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x10
	.uleb128 0x5
	.long	.LASF918
	.byte	0x4
	.byte	0x89
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x10
	.uleb128 0x5
	.long	.LASF919
	.byte	0x4
	.byte	0x8a
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x10
	.uleb128 0x5
	.long	.LASF920
	.byte	0x4
	.byte	0x8b
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x10
	.uleb128 0x5
	.long	.LASF921
	.byte	0x4
	.byte	0x8c
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x10
	.uleb128 0x5
	.long	.LASF922
	.byte	0x4
	.byte	0x8d
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x10
	.uleb128 0x5
	.long	.LASF923
	.byte	0x4
	.byte	0x8e
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x10
	.uleb128 0x5
	.long	.LASF924
	.byte	0x4
	.byte	0x8f
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x10
	.uleb128 0x5
	.long	.LASF925
	.byte	0x4
	.byte	0x90
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.uleb128 0x5
	.long	.LASF926
	.byte	0x4
	.byte	0x92
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x10
	.uleb128 0x5
	.long	.LASF927
	.byte	0x4
	.byte	0x93
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x10
	.uleb128 0x5
	.long	.LASF928
	.byte	0x4
	.byte	0x94
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x10
	.uleb128 0x5
	.long	.LASF929
	.byte	0x4
	.byte	0x95
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x10
	.uleb128 0x5
	.long	.LASF930
	.byte	0x4
	.byte	0x96
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x10
	.uleb128 0x5
	.long	.LASF931
	.byte	0x4
	.byte	0x97
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x10
	.uleb128 0x5
	.long	.LASF932
	.byte	0x4
	.byte	0x98
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x10
	.uleb128 0x5
	.long	.LASF933
	.byte	0x4
	.byte	0x99
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x10
	.byte	0
	.uleb128 0x20
	.byte	0x10
	.byte	0x4
	.value	0x2c9
	.long	0x1f32
	.uleb128 0x21
	.string	"low"
	.byte	0x4
	.value	0x2ca
	.long	0xa2b
	.byte	0
	.uleb128 0x14
	.long	.LASF934
	.byte	0x4
	.value	0x2cb
	.long	0xa19
	.byte	0x8
	.byte	0
	.uleb128 0x13
	.long	.LASF935
	.byte	0x30
	.byte	0x4
	.value	0x2c1
	.long	0x1f67
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x2c3
	.long	0x1d72
	.byte	0
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x2c4
	.long	0x2d
	.byte	0x18
	.uleb128 0x14
	.long	.LASF17
	.byte	0x4
	.value	0x2cc
	.long	0x1f0e
	.byte	0x20
	.byte	0
	.uleb128 0x1b
	.byte	0x18
	.byte	0xd
	.byte	0x6b
	.long	0x1f7a
	.uleb128 0x6
	.string	"r"
	.byte	0xd
	.byte	0x6c
	.long	0x1f7a
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0xa19
	.long	0x1f8a
	.uleb128 0xf
	.long	0x33f
	.byte	0x2
	.byte	0
	.uleb128 0x7
	.long	.LASF936
	.byte	0xd
	.byte	0x6d
	.long	0x1f67
	.uleb128 0x9
	.long	.LASF937
	.byte	0x18
	.byte	0xd
	.value	0x1bd
	.long	0x1fb7
	.uleb128 0xb
	.string	"d"
	.byte	0xd
	.value	0x1bf
	.long	0x1f8a
	.uleb128 0xb
	.string	"i"
	.byte	0xd
	.value	0x1c0
	.long	0x1f7a
	.byte	0
	.uleb128 0x13
	.long	.LASF938
	.byte	0x38
	.byte	0x4
	.value	0x2de
	.long	0x1fec
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x2e0
	.long	0x1d72
	.byte	0
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x2e1
	.long	0x2d
	.byte	0x18
	.uleb128 0x14
	.long	.LASF18
	.byte	0x4
	.value	0x2e2
	.long	0x1f8a
	.byte	0x20
	.byte	0
	.uleb128 0x13
	.long	.LASF939
	.byte	0x30
	.byte	0x4
	.value	0x2e9
	.long	0x202e
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x2eb
	.long	0x1d72
	.byte	0
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x2ec
	.long	0x2d
	.byte	0x18
	.uleb128 0x14
	.long	.LASF940
	.byte	0x4
	.value	0x2ed
	.long	0x328
	.byte	0x20
	.uleb128 0x14
	.long	.LASF941
	.byte	0x4
	.value	0x2ee
	.long	0xc77
	.byte	0x28
	.byte	0
	.uleb128 0x13
	.long	.LASF942
	.byte	0x30
	.byte	0x4
	.value	0x2f5
	.long	0x2070
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x2f7
	.long	0x1d72
	.byte	0
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x2f8
	.long	0x2d
	.byte	0x18
	.uleb128 0x14
	.long	.LASF943
	.byte	0x4
	.value	0x2f9
	.long	0x123
	.byte	0x20
	.uleb128 0x14
	.long	.LASF944
	.byte	0x4
	.value	0x2fa
	.long	0x123
	.byte	0x28
	.byte	0
	.uleb128 0x13
	.long	.LASF945
	.byte	0x28
	.byte	0x4
	.value	0x300
	.long	0x20a5
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x302
	.long	0x1d72
	.byte	0
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x303
	.long	0x2d
	.byte	0x18
	.uleb128 0x14
	.long	.LASF946
	.byte	0x4
	.value	0x304
	.long	0x123
	.byte	0x20
	.byte	0
	.uleb128 0x4
	.long	.LASF947
	.byte	0x10
	.byte	0xe
	.byte	0x1a
	.long	0x20ca
	.uleb128 0x6
	.string	"len"
	.byte	0xe
	.byte	0x1c
	.long	0xa10
	.byte	0
	.uleb128 0x6
	.string	"str"
	.byte	0xe
	.byte	0x1d
	.long	0x20ca
	.byte	0x8
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x20d0
	.uleb128 0xc
	.long	0xa32
	.uleb128 0x13
	.long	.LASF948
	.byte	0x28
	.byte	0x4
	.value	0x317
	.long	0x20fc
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x319
	.long	0x1d72
	.byte	0
	.uleb128 0x21
	.string	"id"
	.byte	0x4
	.value	0x31a
	.long	0x20a5
	.byte	0x18
	.byte	0
	.uleb128 0x13
	.long	.LASF949
	.byte	0x28
	.byte	0x4
	.value	0x321
	.long	0x2131
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x323
	.long	0x1d72
	.byte	0
	.uleb128 0x14
	.long	.LASF950
	.byte	0x4
	.value	0x324
	.long	0x123
	.byte	0x18
	.uleb128 0x14
	.long	.LASF951
	.byte	0x4
	.value	0x325
	.long	0x123
	.byte	0x20
	.byte	0
	.uleb128 0x13
	.long	.LASF952
	.byte	0x28
	.byte	0x4
	.value	0x32e
	.long	0x2164
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x330
	.long	0x1d72
	.byte	0
	.uleb128 0x14
	.long	.LASF940
	.byte	0x4
	.value	0x331
	.long	0x328
	.byte	0x18
	.uleb128 0x21
	.string	"a"
	.byte	0x4
	.value	0x332
	.long	0x2164
	.byte	0x20
	.byte	0
	.uleb128 0xe
	.long	0x123
	.long	0x2174
	.uleb128 0xf
	.long	0x33f
	.byte	0
	.byte	0
	.uleb128 0x13
	.long	.LASF953
	.byte	0x28
	.byte	0x4
	.value	0x36f
	.long	0x21a9
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x371
	.long	0x1d72
	.byte	0
	.uleb128 0x14
	.long	.LASF954
	.byte	0x4
	.value	0x372
	.long	0x328
	.byte	0x18
	.uleb128 0x14
	.long	.LASF955
	.byte	0x4
	.value	0x373
	.long	0x2164
	.byte	0x20
	.byte	0
	.uleb128 0x13
	.long	.LASF956
	.byte	0x50
	.byte	0x4
	.value	0x3a3
	.long	0x2242
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x3a5
	.long	0x1d72
	.byte	0
	.uleb128 0x22
	.long	.LASF957
	.byte	0x4
	.value	0x3a7
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x18
	.uleb128 0x22
	.long	.LASF958
	.byte	0x4
	.value	0x3a8
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x18
	.uleb128 0x22
	.long	.LASF959
	.byte	0x4
	.value	0x3a9
	.long	0xa10
	.byte	0x4
	.byte	0x1e
	.byte	0
	.byte	0x18
	.uleb128 0x14
	.long	.LASF960
	.byte	0x4
	.value	0x3ab
	.long	0x123
	.byte	0x20
	.uleb128 0x14
	.long	.LASF961
	.byte	0x4
	.value	0x3ac
	.long	0x123
	.byte	0x28
	.uleb128 0x14
	.long	.LASF962
	.byte	0x4
	.value	0x3ad
	.long	0x123
	.byte	0x30
	.uleb128 0x14
	.long	.LASF963
	.byte	0x4
	.value	0x3ae
	.long	0x123
	.byte	0x38
	.uleb128 0x14
	.long	.LASF964
	.byte	0x4
	.value	0x3af
	.long	0x123
	.byte	0x40
	.uleb128 0x14
	.long	.LASF965
	.byte	0x4
	.value	0x3b0
	.long	0x123
	.byte	0x48
	.byte	0
	.uleb128 0x23
	.byte	0x8
	.byte	0x4
	.value	0x4d8
	.long	0x2264
	.uleb128 0xa
	.long	.LASF966
	.byte	0x4
	.value	0x4d8
	.long	0x328
	.uleb128 0xa
	.long	.LASF941
	.byte	0x4
	.value	0x4d8
	.long	0xa64
	.byte	0
	.uleb128 0x13
	.long	.LASF967
	.byte	0xa8
	.byte	0x4
	.value	0x4b8
	.long	0x2479
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x4ba
	.long	0x1d72
	.byte	0
	.uleb128 0x14
	.long	.LASF968
	.byte	0x4
	.value	0x4bb
	.long	0x123
	.byte	0x18
	.uleb128 0x14
	.long	.LASF554
	.byte	0x4
	.value	0x4bc
	.long	0x123
	.byte	0x20
	.uleb128 0x14
	.long	.LASF969
	.byte	0x4
	.value	0x4bd
	.long	0x123
	.byte	0x28
	.uleb128 0x14
	.long	.LASF970
	.byte	0x4
	.value	0x4be
	.long	0x123
	.byte	0x30
	.uleb128 0x21
	.string	"uid"
	.byte	0x4
	.value	0x4bf
	.long	0xa10
	.byte	0x38
	.uleb128 0x22
	.long	.LASF971
	.byte	0x4
	.value	0x4c1
	.long	0xa10
	.byte	0x4
	.byte	0x9
	.byte	0x17
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF1
	.byte	0x4
	.value	0x4c2
	.long	0xa10
	.byte	0x4
	.byte	0x7
	.byte	0x10
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF972
	.byte	0x4
	.value	0x4c4
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF973
	.byte	0x4
	.value	0x4c5
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF974
	.byte	0x4
	.value	0x4c6
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF975
	.byte	0x4
	.value	0x4c7
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF976
	.byte	0x4
	.value	0x4c8
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF977
	.byte	0x4
	.value	0x4c9
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF978
	.byte	0x4
	.value	0x4ca
	.long	0xa10
	.byte	0x4
	.byte	0x2
	.byte	0x8
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF926
	.byte	0x4
	.value	0x4cc
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF927
	.byte	0x4
	.value	0x4cd
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF928
	.byte	0x4
	.value	0x4ce
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF929
	.byte	0x4
	.value	0x4cf
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF930
	.byte	0x4
	.value	0x4d0
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF931
	.byte	0x4
	.value	0x4d1
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF932
	.byte	0x4
	.value	0x4d2
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF979
	.byte	0x4
	.value	0x4d3
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x3c
	.uleb128 0x14
	.long	.LASF555
	.byte	0x4
	.value	0x4d5
	.long	0xa10
	.byte	0x40
	.uleb128 0x14
	.long	.LASF980
	.byte	0x4
	.value	0x4d6
	.long	0x123
	.byte	0x48
	.uleb128 0x14
	.long	.LASF981
	.byte	0x4
	.value	0x4d7
	.long	0x123
	.byte	0x50
	.uleb128 0x14
	.long	.LASF982
	.byte	0x4
	.value	0x4d8
	.long	0x2242
	.byte	0x58
	.uleb128 0x14
	.long	.LASF983
	.byte	0x4
	.value	0x4d9
	.long	0x123
	.byte	0x60
	.uleb128 0x14
	.long	.LASF984
	.byte	0x4
	.value	0x4da
	.long	0x123
	.byte	0x68
	.uleb128 0x14
	.long	.LASF985
	.byte	0x4
	.value	0x4db
	.long	0x123
	.byte	0x70
	.uleb128 0x14
	.long	.LASF986
	.byte	0x4
	.value	0x4dc
	.long	0x123
	.byte	0x78
	.uleb128 0x14
	.long	.LASF987
	.byte	0x4
	.value	0x4dd
	.long	0x123
	.byte	0x80
	.uleb128 0x14
	.long	.LASF988
	.byte	0x4
	.value	0x4de
	.long	0x123
	.byte	0x88
	.uleb128 0x14
	.long	.LASF989
	.byte	0x4
	.value	0x4df
	.long	0x123
	.byte	0x90
	.uleb128 0x14
	.long	.LASF990
	.byte	0x4
	.value	0x4e0
	.long	0xa19
	.byte	0x98
	.uleb128 0x14
	.long	.LASF991
	.byte	0x4
	.value	0x4e2
	.long	0x247e
	.byte	0xa0
	.byte	0
	.uleb128 0x1f
	.long	.LASF993
	.uleb128 0x3
	.byte	0x8
	.long	0x2479
	.uleb128 0x20
	.byte	0x4
	.byte	0x4
	.value	0x717
	.long	0x24ae
	.uleb128 0x22
	.long	.LASF555
	.byte	0x4
	.value	0x717
	.long	0xa10
	.byte	0x4
	.byte	0x18
	.byte	0x8
	.byte	0
	.uleb128 0x22
	.long	.LASF994
	.byte	0x4
	.value	0x717
	.long	0xa10
	.byte	0x4
	.byte	0x8
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x23
	.byte	0x8
	.byte	0x4
	.value	0x70e
	.long	0x24d6
	.uleb128 0xb
	.string	"f"
	.byte	0x4
	.value	0x711
	.long	0x1b05
	.uleb128 0xb
	.string	"i"
	.byte	0x4
	.value	0x714
	.long	0xa19
	.uleb128 0xb
	.string	"a"
	.byte	0x4
	.value	0x717
	.long	0x2484
	.byte	0
	.uleb128 0x23
	.byte	0x8
	.byte	0x4
	.value	0x72c
	.long	0x2508
	.uleb128 0xb
	.string	"f"
	.byte	0x4
	.value	0x72d
	.long	0x2988
	.uleb128 0xb
	.string	"r"
	.byte	0x4
	.value	0x72e
	.long	0x2d
	.uleb128 0xb
	.string	"t"
	.byte	0x4
	.value	0x72f
	.long	0x123
	.uleb128 0xb
	.string	"i"
	.byte	0x4
	.value	0x730
	.long	0x328
	.byte	0
	.uleb128 0x24
	.long	.LASF995
	.value	0x1b0
	.byte	0xf
	.byte	0xae
	.long	0x2988
	.uleb128 0x6
	.string	"eh"
	.byte	0xf
	.byte	0xb0
	.long	0x32e3
	.byte	0
	.uleb128 0x8
	.long	.LASF996
	.byte	0xf
	.byte	0xb1
	.long	0x32ee
	.byte	0x8
	.uleb128 0x8
	.long	.LASF552
	.byte	0xf
	.byte	0xb2
	.long	0x32f4
	.byte	0x10
	.uleb128 0x8
	.long	.LASF997
	.byte	0xf
	.byte	0xb3
	.long	0x32fa
	.byte	0x18
	.uleb128 0x8
	.long	.LASF998
	.byte	0xf
	.byte	0xb4
	.long	0x3305
	.byte	0x20
	.uleb128 0x8
	.long	.LASF983
	.byte	0xf
	.byte	0xb9
	.long	0xc77
	.byte	0x28
	.uleb128 0x8
	.long	.LASF23
	.byte	0xf
	.byte	0xbc
	.long	0x123
	.byte	0x30
	.uleb128 0x8
	.long	.LASF999
	.byte	0xf
	.byte	0xbf
	.long	0x2988
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1000
	.byte	0xf
	.byte	0xc4
	.long	0x328
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1001
	.byte	0xf
	.byte	0xc9
	.long	0x328
	.byte	0x44
	.uleb128 0x8
	.long	.LASF1002
	.byte	0xf
	.byte	0xce
	.long	0x328
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1003
	.byte	0xf
	.byte	0xd2
	.long	0x328
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF1004
	.byte	0xf
	.byte	0xd6
	.long	0x2d
	.byte	0x50
	.uleb128 0x8
	.long	.LASF1005
	.byte	0xf
	.byte	0xda
	.long	0x4e9
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1006
	.byte	0xf
	.byte	0xe0
	.long	0x2d
	.byte	0x78
	.uleb128 0x8
	.long	.LASF1007
	.byte	0xf
	.byte	0xe3
	.long	0x2d
	.byte	0x80
	.uleb128 0x8
	.long	.LASF1008
	.byte	0xf
	.byte	0xe7
	.long	0xc77
	.byte	0x88
	.uleb128 0x8
	.long	.LASF1009
	.byte	0xf
	.byte	0xeb
	.long	0x3310
	.byte	0x90
	.uleb128 0x8
	.long	.LASF1010
	.byte	0xf
	.byte	0xee
	.long	0x328
	.byte	0x98
	.uleb128 0x8
	.long	.LASF1011
	.byte	0xf
	.byte	0xf3
	.long	0x123
	.byte	0xa0
	.uleb128 0x8
	.long	.LASF1012
	.byte	0xf
	.byte	0xf9
	.long	0x2d
	.byte	0xa8
	.uleb128 0x8
	.long	.LASF1013
	.byte	0xf
	.byte	0xfd
	.long	0x2d
	.byte	0xb0
	.uleb128 0x14
	.long	.LASF1014
	.byte	0xf
	.value	0x102
	.long	0x2d
	.byte	0xb8
	.uleb128 0x14
	.long	.LASF1015
	.byte	0xf
	.value	0x108
	.long	0x2d
	.byte	0xc0
	.uleb128 0x14
	.long	.LASF1016
	.byte	0xf
	.value	0x10d
	.long	0x2d
	.byte	0xc8
	.uleb128 0x14
	.long	.LASF1017
	.byte	0xf
	.value	0x111
	.long	0x2d
	.byte	0xd0
	.uleb128 0x14
	.long	.LASF1018
	.byte	0xf
	.value	0x115
	.long	0x2d
	.byte	0xd8
	.uleb128 0x14
	.long	.LASF1019
	.byte	0xf
	.value	0x118
	.long	0x123
	.byte	0xe0
	.uleb128 0x14
	.long	.LASF1020
	.byte	0xf
	.value	0x11c
	.long	0x2d
	.byte	0xe8
	.uleb128 0x14
	.long	.LASF1021
	.byte	0xf
	.value	0x11f
	.long	0x2d
	.byte	0xf0
	.uleb128 0x14
	.long	.LASF1022
	.byte	0xf
	.value	0x125
	.long	0x2d
	.byte	0xf8
	.uleb128 0x25
	.long	.LASF1023
	.byte	0xf
	.value	0x12a
	.long	0x2d
	.value	0x100
	.uleb128 0x25
	.long	.LASF1024
	.byte	0xf
	.value	0x12f
	.long	0xa19
	.value	0x108
	.uleb128 0x25
	.long	.LASF1025
	.byte	0xf
	.value	0x134
	.long	0x123
	.value	0x110
	.uleb128 0x25
	.long	.LASF1026
	.byte	0xf
	.value	0x13d
	.long	0x123
	.value	0x118
	.uleb128 0x25
	.long	.LASF1027
	.byte	0xf
	.value	0x140
	.long	0x2d
	.value	0x120
	.uleb128 0x25
	.long	.LASF1028
	.byte	0xf
	.value	0x144
	.long	0x2d
	.value	0x128
	.uleb128 0x25
	.long	.LASF1029
	.byte	0xf
	.value	0x148
	.long	0xa10
	.value	0x130
	.uleb128 0x25
	.long	.LASF1030
	.byte	0xf
	.value	0x14e
	.long	0x16ab
	.value	0x138
	.uleb128 0x25
	.long	.LASF1031
	.byte	0xf
	.value	0x151
	.long	0x331b
	.value	0x140
	.uleb128 0x25
	.long	.LASF1032
	.byte	0xf
	.value	0x154
	.long	0x328
	.value	0x148
	.uleb128 0x25
	.long	.LASF1033
	.byte	0xf
	.value	0x157
	.long	0x328
	.value	0x14c
	.uleb128 0x25
	.long	.LASF1034
	.byte	0xf
	.value	0x15d
	.long	0x328
	.value	0x150
	.uleb128 0x25
	.long	.LASF1035
	.byte	0xf
	.value	0x161
	.long	0x3185
	.value	0x158
	.uleb128 0x25
	.long	.LASF1036
	.byte	0xf
	.value	0x164
	.long	0x328
	.value	0x160
	.uleb128 0x25
	.long	.LASF1037
	.byte	0xf
	.value	0x165
	.long	0x328
	.value	0x164
	.uleb128 0x25
	.long	.LASF1038
	.byte	0xf
	.value	0x167
	.long	0xa17
	.value	0x168
	.uleb128 0x25
	.long	.LASF1039
	.byte	0xf
	.value	0x168
	.long	0x123
	.value	0x170
	.uleb128 0x25
	.long	.LASF1040
	.byte	0xf
	.value	0x16b
	.long	0x2d
	.value	0x178
	.uleb128 0x25
	.long	.LASF1041
	.byte	0xf
	.value	0x16d
	.long	0x328
	.value	0x180
	.uleb128 0x25
	.long	.LASF1042
	.byte	0xf
	.value	0x170
	.long	0x328
	.value	0x184
	.uleb128 0x25
	.long	.LASF1043
	.byte	0xf
	.value	0x175
	.long	0x3359
	.value	0x188
	.uleb128 0x25
	.long	.LASF1044
	.byte	0xf
	.value	0x177
	.long	0x328
	.value	0x190
	.uleb128 0x25
	.long	.LASF1045
	.byte	0xf
	.value	0x179
	.long	0x328
	.value	0x194
	.uleb128 0x25
	.long	.LASF1046
	.byte	0xf
	.value	0x17c
	.long	0x3364
	.value	0x198
	.uleb128 0x25
	.long	.LASF1047
	.byte	0xf
	.value	0x182
	.long	0x2d
	.value	0x1a0
	.uleb128 0x26
	.long	.LASF1048
	.byte	0xf
	.value	0x188
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1049
	.byte	0xf
	.value	0x18c
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1050
	.byte	0xf
	.value	0x18f
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1051
	.byte	0xf
	.value	0x192
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1052
	.byte	0xf
	.value	0x195
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1053
	.byte	0xf
	.value	0x198
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1054
	.byte	0xf
	.value	0x19c
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1055
	.byte	0xf
	.value	0x19f
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1056
	.byte	0xf
	.value	0x1a3
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1057
	.byte	0xf
	.value	0x1a7
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1058
	.byte	0xf
	.value	0x1aa
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1059
	.byte	0xf
	.value	0x1ad
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1060
	.byte	0xf
	.value	0x1b2
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1061
	.byte	0xf
	.value	0x1b6
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1062
	.byte	0xf
	.value	0x1b9
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1063
	.byte	0xf
	.value	0x1bd
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1064
	.byte	0xf
	.value	0x1c1
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1065
	.byte	0xf
	.value	0x1c5
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1066
	.byte	0xf
	.value	0x1cb
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1067
	.byte	0xf
	.value	0x1d4
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1068
	.byte	0xf
	.value	0x1d7
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1069
	.byte	0xf
	.value	0x1da
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1070
	.byte	0xf
	.value	0x1dd
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF1071
	.byte	0xf
	.value	0x1e0
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.value	0x1a8
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2508
	.uleb128 0x13
	.long	.LASF1072
	.byte	0xd0
	.byte	0x4
	.value	0x6dc
	.long	0x2d12
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x6de
	.long	0x1d72
	.byte	0
	.uleb128 0x14
	.long	.LASF1073
	.byte	0x4
	.value	0x6df
	.long	0xc77
	.byte	0x18
	.uleb128 0x14
	.long	.LASF1074
	.byte	0x4
	.value	0x6e0
	.long	0x328
	.byte	0x20
	.uleb128 0x21
	.string	"uid"
	.byte	0x4
	.value	0x6e1
	.long	0xa10
	.byte	0x24
	.uleb128 0x14
	.long	.LASF554
	.byte	0x4
	.value	0x6e2
	.long	0x123
	.byte	0x28
	.uleb128 0x22
	.long	.LASF1
	.byte	0x4
	.value	0x6e3
	.long	0xa10
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1075
	.byte	0x4
	.value	0x6e5
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1076
	.byte	0x4
	.value	0x6e6
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1077
	.byte	0x4
	.value	0x6e7
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1078
	.byte	0x4
	.value	0x6e8
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1079
	.byte	0x4
	.value	0x6e9
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1080
	.byte	0x4
	.value	0x6ea
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1081
	.byte	0x4
	.value	0x6eb
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x30
	.uleb128 0x22
	.long	.LASF958
	.byte	0x4
	.value	0x6ec
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1082
	.byte	0x4
	.value	0x6ee
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1083
	.byte	0x4
	.value	0x6ef
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1084
	.byte	0x4
	.value	0x6f0
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1085
	.byte	0x4
	.value	0x6f1
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1086
	.byte	0x4
	.value	0x6f2
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1087
	.byte	0x4
	.value	0x6f3
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1088
	.byte	0x4
	.value	0x6f4
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1089
	.byte	0x4
	.value	0x6f5
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1090
	.byte	0x4
	.value	0x6f7
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1091
	.byte	0x4
	.value	0x6f8
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1092
	.byte	0x4
	.value	0x6f9
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1093
	.byte	0x4
	.value	0x6fa
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1094
	.byte	0x4
	.value	0x6fb
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x30
	.uleb128 0x22
	.long	.LASF806
	.byte	0x4
	.value	0x6fc
	.long	0xa10
	.byte	0x4
	.byte	0x2
	.byte	0x1
	.byte	0x30
	.uleb128 0x22
	.long	.LASF1095
	.byte	0x4
	.value	0x6fd
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x30
	.uleb128 0x22
	.long	.LASF978
	.byte	0x4
	.value	0x6ff
	.long	0xa10
	.byte	0x4
	.byte	0x2
	.byte	0x1e
	.byte	0x34
	.uleb128 0x22
	.long	.LASF1096
	.byte	0x4
	.value	0x700
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x34
	.uleb128 0x22
	.long	.LASF979
	.byte	0x4
	.value	0x701
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x34
	.uleb128 0x22
	.long	.LASF1097
	.byte	0x4
	.value	0x702
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x34
	.uleb128 0x22
	.long	.LASF926
	.byte	0x4
	.value	0x705
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.byte	0x34
	.uleb128 0x22
	.long	.LASF927
	.byte	0x4
	.value	0x706
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.byte	0x34
	.uleb128 0x22
	.long	.LASF928
	.byte	0x4
	.value	0x707
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x34
	.uleb128 0x22
	.long	.LASF929
	.byte	0x4
	.value	0x708
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x34
	.uleb128 0x22
	.long	.LASF930
	.byte	0x4
	.value	0x709
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x34
	.uleb128 0x22
	.long	.LASF931
	.byte	0x4
	.value	0x70a
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x34
	.uleb128 0x22
	.long	.LASF932
	.byte	0x4
	.value	0x70b
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x34
	.uleb128 0x22
	.long	.LASF1098
	.byte	0x4
	.value	0x70c
	.long	0xa10
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x34
	.uleb128 0x21
	.string	"u1"
	.byte	0x4
	.value	0x718
	.long	0x24ae
	.byte	0x38
	.uleb128 0x14
	.long	.LASF969
	.byte	0x4
	.value	0x71a
	.long	0x123
	.byte	0x40
	.uleb128 0x14
	.long	.LASF983
	.byte	0x4
	.value	0x71b
	.long	0x123
	.byte	0x48
	.uleb128 0x14
	.long	.LASF989
	.byte	0x4
	.value	0x71c
	.long	0x123
	.byte	0x50
	.uleb128 0x14
	.long	.LASF1099
	.byte	0x4
	.value	0x71d
	.long	0x123
	.byte	0x58
	.uleb128 0x14
	.long	.LASF1100
	.byte	0x4
	.value	0x71e
	.long	0x123
	.byte	0x60
	.uleb128 0x14
	.long	.LASF1101
	.byte	0x4
	.value	0x71f
	.long	0x123
	.byte	0x68
	.uleb128 0x14
	.long	.LASF963
	.byte	0x4
	.value	0x720
	.long	0x123
	.byte	0x70
	.uleb128 0x14
	.long	.LASF1102
	.byte	0x4
	.value	0x721
	.long	0x123
	.byte	0x78
	.uleb128 0x14
	.long	.LASF1103
	.byte	0x4
	.value	0x722
	.long	0x123
	.byte	0x80
	.uleb128 0x14
	.long	.LASF970
	.byte	0x4
	.value	0x723
	.long	0x123
	.byte	0x88
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x724
	.long	0x2d
	.byte	0x90
	.uleb128 0x14
	.long	.LASF1104
	.byte	0x4
	.value	0x725
	.long	0x2d
	.byte	0x98
	.uleb128 0x21
	.string	"u2"
	.byte	0x4
	.value	0x731
	.long	0x24d6
	.byte	0xa0
	.uleb128 0x14
	.long	.LASF1105
	.byte	0x4
	.value	0x734
	.long	0x123
	.byte	0xa8
	.uleb128 0x14
	.long	.LASF1106
	.byte	0x4
	.value	0x738
	.long	0x123
	.byte	0xb0
	.uleb128 0x14
	.long	.LASF1107
	.byte	0x4
	.value	0x73a
	.long	0x123
	.byte	0xb8
	.uleb128 0x14
	.long	.LASF1108
	.byte	0x4
	.value	0x73b
	.long	0xa19
	.byte	0xc0
	.uleb128 0x14
	.long	.LASF991
	.byte	0x4
	.value	0x73d
	.long	0x2d17
	.byte	0xc8
	.byte	0
	.uleb128 0x1f
	.long	.LASF1109
	.uleb128 0x3
	.byte	0x8
	.long	0x2d12
	.uleb128 0x11
	.long	.LASF1110
	.byte	0x4
	.byte	0x4
	.value	0x757
	.long	0x2e63
	.uleb128 0x12
	.long	.LASF1111
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1112
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1113
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1114
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1115
	.sleb128 4
	.uleb128 0x12
	.long	.LASF1116
	.sleb128 5
	.uleb128 0x12
	.long	.LASF1117
	.sleb128 6
	.uleb128 0x12
	.long	.LASF1118
	.sleb128 7
	.uleb128 0x12
	.long	.LASF1119
	.sleb128 8
	.uleb128 0x12
	.long	.LASF1120
	.sleb128 9
	.uleb128 0x12
	.long	.LASF1121
	.sleb128 10
	.uleb128 0x12
	.long	.LASF1122
	.sleb128 11
	.uleb128 0x12
	.long	.LASF1123
	.sleb128 12
	.uleb128 0x12
	.long	.LASF1124
	.sleb128 13
	.uleb128 0x12
	.long	.LASF1125
	.sleb128 14
	.uleb128 0x12
	.long	.LASF1126
	.sleb128 15
	.uleb128 0x12
	.long	.LASF1127
	.sleb128 16
	.uleb128 0x12
	.long	.LASF1128
	.sleb128 17
	.uleb128 0x12
	.long	.LASF1129
	.sleb128 18
	.uleb128 0x12
	.long	.LASF1130
	.sleb128 19
	.uleb128 0x12
	.long	.LASF1131
	.sleb128 20
	.uleb128 0x12
	.long	.LASF1132
	.sleb128 21
	.uleb128 0x12
	.long	.LASF1133
	.sleb128 22
	.uleb128 0x12
	.long	.LASF1134
	.sleb128 23
	.uleb128 0x12
	.long	.LASF1135
	.sleb128 24
	.uleb128 0x12
	.long	.LASF1136
	.sleb128 25
	.uleb128 0x12
	.long	.LASF1137
	.sleb128 26
	.uleb128 0x12
	.long	.LASF1138
	.sleb128 27
	.uleb128 0x12
	.long	.LASF1139
	.sleb128 28
	.uleb128 0x12
	.long	.LASF1140
	.sleb128 29
	.uleb128 0x12
	.long	.LASF1141
	.sleb128 30
	.uleb128 0x12
	.long	.LASF1142
	.sleb128 31
	.uleb128 0x12
	.long	.LASF1143
	.sleb128 32
	.uleb128 0x12
	.long	.LASF1144
	.sleb128 33
	.uleb128 0x12
	.long	.LASF1145
	.sleb128 34
	.uleb128 0x12
	.long	.LASF1146
	.sleb128 35
	.uleb128 0x12
	.long	.LASF1147
	.sleb128 36
	.uleb128 0x12
	.long	.LASF1148
	.sleb128 37
	.uleb128 0x12
	.long	.LASF1149
	.sleb128 38
	.uleb128 0x12
	.long	.LASF1150
	.sleb128 39
	.uleb128 0x12
	.long	.LASF1151
	.sleb128 40
	.uleb128 0x12
	.long	.LASF1152
	.sleb128 41
	.uleb128 0x12
	.long	.LASF1153
	.sleb128 42
	.uleb128 0x12
	.long	.LASF1154
	.sleb128 43
	.uleb128 0x12
	.long	.LASF1155
	.sleb128 44
	.uleb128 0x12
	.long	.LASF1156
	.sleb128 45
	.uleb128 0x12
	.long	.LASF1157
	.sleb128 46
	.uleb128 0x12
	.long	.LASF1158
	.sleb128 47
	.uleb128 0x12
	.long	.LASF1159
	.sleb128 48
	.uleb128 0x12
	.long	.LASF1160
	.sleb128 49
	.uleb128 0x12
	.long	.LASF1161
	.sleb128 50
	.uleb128 0x12
	.long	.LASF1162
	.sleb128 51
	.byte	0
	.uleb128 0x11
	.long	.LASF1163
	.byte	0x4
	.byte	0x4
	.value	0x7e4
	.long	0x2eb9
	.uleb128 0x12
	.long	.LASF1164
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1165
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1166
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1167
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1168
	.sleb128 4
	.uleb128 0x12
	.long	.LASF1169
	.sleb128 5
	.uleb128 0x12
	.long	.LASF1170
	.sleb128 6
	.uleb128 0x12
	.long	.LASF1171
	.sleb128 7
	.uleb128 0x12
	.long	.LASF1172
	.sleb128 8
	.uleb128 0x12
	.long	.LASF1173
	.sleb128 9
	.uleb128 0x12
	.long	.LASF1174
	.sleb128 10
	.uleb128 0x12
	.long	.LASF1175
	.sleb128 11
	.byte	0
	.uleb128 0x13
	.long	.LASF1176
	.byte	0x20
	.byte	0x4
	.value	0x885
	.long	0x2f22
	.uleb128 0x14
	.long	.LASF983
	.byte	0x4
	.value	0x889
	.long	0x2f22
	.byte	0
	.uleb128 0x14
	.long	.LASF1177
	.byte	0x4
	.value	0x88b
	.long	0x323
	.byte	0x8
	.uleb128 0x14
	.long	.LASF1178
	.byte	0x4
	.value	0x88e
	.long	0x323
	.byte	0xc
	.uleb128 0x14
	.long	.LASF1179
	.byte	0x4
	.value	0x896
	.long	0x2f27
	.byte	0x10
	.uleb128 0x14
	.long	.LASF1180
	.byte	0x4
	.value	0x899
	.long	0x2f27
	.byte	0x11
	.uleb128 0x14
	.long	.LASF1181
	.byte	0x4
	.value	0x89e
	.long	0x2f27
	.byte	0x12
	.uleb128 0x14
	.long	.LASF1182
	.byte	0x4
	.value	0x8ad
	.long	0x2f62
	.byte	0x18
	.byte	0
	.uleb128 0xc
	.long	0xc77
	.uleb128 0xc
	.long	0x2f2c
	.uleb128 0x10
	.byte	0x1
	.byte	0x2
	.long	.LASF1183
	.uleb128 0x27
	.long	0x123
	.long	0x2f56
	.uleb128 0x28
	.long	0x2f56
	.uleb128 0x28
	.long	0x123
	.uleb128 0x28
	.long	0x123
	.uleb128 0x28
	.long	0x328
	.uleb128 0x28
	.long	0x2f5c
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x123
	.uleb128 0x3
	.byte	0x8
	.long	0x2f2c
	.uleb128 0xc
	.long	0x2f67
	.uleb128 0x3
	.byte	0x8
	.long	0x2f33
	.uleb128 0x11
	.long	.LASF1184
	.byte	0x4
	.byte	0x4
	.value	0x972
	.long	0x2fa5
	.uleb128 0x12
	.long	.LASF1185
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1186
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1187
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1188
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1189
	.sleb128 4
	.uleb128 0x12
	.long	.LASF1190
	.sleb128 5
	.uleb128 0x12
	.long	.LASF1191
	.sleb128 6
	.byte	0
	.uleb128 0x19
	.long	.LASF1192
	.byte	0x4
	.byte	0x10
	.byte	0xe
	.long	0x308a
	.uleb128 0x12
	.long	.LASF1193
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1194
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1195
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1196
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1197
	.sleb128 4
	.uleb128 0x12
	.long	.LASF1198
	.sleb128 5
	.uleb128 0x12
	.long	.LASF1199
	.sleb128 6
	.uleb128 0x12
	.long	.LASF1200
	.sleb128 7
	.uleb128 0x12
	.long	.LASF1201
	.sleb128 8
	.uleb128 0x12
	.long	.LASF1202
	.sleb128 9
	.uleb128 0x12
	.long	.LASF1203
	.sleb128 10
	.uleb128 0x12
	.long	.LASF1204
	.sleb128 11
	.uleb128 0x12
	.long	.LASF1205
	.sleb128 12
	.uleb128 0x12
	.long	.LASF1206
	.sleb128 13
	.uleb128 0x12
	.long	.LASF1207
	.sleb128 14
	.uleb128 0x12
	.long	.LASF1208
	.sleb128 15
	.uleb128 0x12
	.long	.LASF1209
	.sleb128 16
	.uleb128 0x12
	.long	.LASF1210
	.sleb128 17
	.uleb128 0x12
	.long	.LASF1211
	.sleb128 18
	.uleb128 0x12
	.long	.LASF1212
	.sleb128 19
	.uleb128 0x12
	.long	.LASF1213
	.sleb128 20
	.uleb128 0x12
	.long	.LASF1214
	.sleb128 21
	.uleb128 0x12
	.long	.LASF1215
	.sleb128 22
	.uleb128 0x12
	.long	.LASF1216
	.sleb128 23
	.uleb128 0x12
	.long	.LASF1217
	.sleb128 24
	.uleb128 0x12
	.long	.LASF1218
	.sleb128 25
	.uleb128 0x12
	.long	.LASF1219
	.sleb128 26
	.uleb128 0x12
	.long	.LASF1220
	.sleb128 27
	.uleb128 0x12
	.long	.LASF1221
	.sleb128 28
	.uleb128 0x12
	.long	.LASF1222
	.sleb128 29
	.uleb128 0x12
	.long	.LASF1223
	.sleb128 30
	.uleb128 0x12
	.long	.LASF1224
	.sleb128 31
	.uleb128 0x12
	.long	.LASF1225
	.sleb128 32
	.uleb128 0x12
	.long	.LASF1226
	.sleb128 33
	.uleb128 0x12
	.long	.LASF1227
	.sleb128 34
	.uleb128 0x12
	.long	.LASF1228
	.sleb128 35
	.byte	0
	.uleb128 0x19
	.long	.LASF1229
	.byte	0x4
	.byte	0x10
	.byte	0x12
	.long	0x30d9
	.uleb128 0x12
	.long	.LASF1230
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1231
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1232
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1233
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1234
	.sleb128 4
	.uleb128 0x12
	.long	.LASF1235
	.sleb128 5
	.uleb128 0x12
	.long	.LASF1236
	.sleb128 6
	.uleb128 0x12
	.long	.LASF1237
	.sleb128 7
	.uleb128 0x12
	.long	.LASF1238
	.sleb128 8
	.uleb128 0x12
	.long	.LASF1239
	.sleb128 9
	.uleb128 0x12
	.long	.LASF1240
	.sleb128 10
	.byte	0
	.uleb128 0x19
	.long	.LASF1241
	.byte	0x4
	.byte	0x10
	.byte	0x2d
	.long	0x3104
	.uleb128 0x12
	.long	.LASF1242
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1243
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1244
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1245
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1246
	.sleb128 4
	.byte	0
	.uleb128 0x19
	.long	.LASF1247
	.byte	0x4
	.byte	0x10
	.byte	0x3d
	.long	0x3129
	.uleb128 0x12
	.long	.LASF1248
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1249
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1250
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1251
	.sleb128 3
	.byte	0
	.uleb128 0x19
	.long	.LASF1252
	.byte	0x4
	.byte	0x10
	.byte	0x41
	.long	0x3148
	.uleb128 0x12
	.long	.LASF1253
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1254
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1255
	.sleb128 2
	.byte	0
	.uleb128 0x4
	.long	.LASF1256
	.byte	0x18
	.byte	0xf
	.byte	0x16
	.long	0x3185
	.uleb128 0x8
	.long	.LASF1257
	.byte	0xf
	.byte	0x18
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF1258
	.byte	0xf
	.byte	0x19
	.long	0xcc3
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1259
	.byte	0xf
	.byte	0x1a
	.long	0x328
	.byte	0xc
	.uleb128 0x8
	.long	.LASF1260
	.byte	0xf
	.byte	0x1b
	.long	0x3185
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x3148
	.uleb128 0x4
	.long	.LASF1261
	.byte	0x20
	.byte	0xf
	.byte	0x23
	.long	0x31c8
	.uleb128 0x8
	.long	.LASF570
	.byte	0xf
	.byte	0x26
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF1262
	.byte	0xf
	.byte	0x26
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1263
	.byte	0xf
	.byte	0x27
	.long	0x123
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1260
	.byte	0xf
	.byte	0x28
	.long	0x31c8
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x318b
	.uleb128 0x4
	.long	.LASF1264
	.byte	0x58
	.byte	0xf
	.byte	0x35
	.long	0x3277
	.uleb128 0x8
	.long	.LASF1265
	.byte	0xf
	.byte	0x39
	.long	0x328
	.byte	0
	.uleb128 0x8
	.long	.LASF1266
	.byte	0xf
	.byte	0x3c
	.long	0x328
	.byte	0x4
	.uleb128 0x8
	.long	.LASF1267
	.byte	0xf
	.byte	0x43
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1268
	.byte	0xf
	.byte	0x44
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1263
	.byte	0xf
	.byte	0x49
	.long	0x123
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1261
	.byte	0xf
	.byte	0x4f
	.long	0x31c8
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1269
	.byte	0xf
	.byte	0x53
	.long	0x328
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1270
	.byte	0xf
	.byte	0x57
	.long	0x328
	.byte	0x2c
	.uleb128 0x8
	.long	.LASF1271
	.byte	0xf
	.byte	0x58
	.long	0xc77
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1272
	.byte	0xf
	.byte	0x5e
	.long	0x328
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1273
	.byte	0xf
	.byte	0x63
	.long	0x3277
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1274
	.byte	0xf
	.byte	0x67
	.long	0x2f56
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1275
	.byte	0xf
	.byte	0x6b
	.long	0x16ab
	.byte	0x50
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xa32
	.uleb128 0x4
	.long	.LASF1276
	.byte	0x30
	.byte	0xf
	.byte	0x77
	.long	0x32de
	.uleb128 0x8
	.long	.LASF1277
	.byte	0xf
	.byte	0x7b
	.long	0x328
	.byte	0
	.uleb128 0x8
	.long	.LASF1278
	.byte	0xf
	.byte	0x8c
	.long	0x328
	.byte	0x4
	.uleb128 0x8
	.long	.LASF1279
	.byte	0xf
	.byte	0x92
	.long	0x328
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1280
	.byte	0xf
	.byte	0x97
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1281
	.byte	0xf
	.byte	0x9a
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1282
	.byte	0xf
	.byte	0x9d
	.long	0x2d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1283
	.byte	0xf
	.byte	0xa0
	.long	0x2d
	.byte	0x28
	.byte	0
	.uleb128 0x1f
	.long	.LASF1284
	.uleb128 0x3
	.byte	0x8
	.long	0x32de
	.uleb128 0x1f
	.long	.LASF1285
	.uleb128 0x3
	.byte	0x8
	.long	0x32e9
	.uleb128 0x3
	.byte	0x8
	.long	0x327d
	.uleb128 0x3
	.byte	0x8
	.long	0x31ce
	.uleb128 0x1f
	.long	.LASF1286
	.uleb128 0x3
	.byte	0x8
	.long	0x3300
	.uleb128 0x1f
	.long	.LASF1287
	.uleb128 0x3
	.byte	0x8
	.long	0x330b
	.uleb128 0x1f
	.long	.LASF1288
	.uleb128 0x3
	.byte	0x8
	.long	0x3316
	.uleb128 0x29
	.long	.LASF1289
	.value	0x590
	.byte	0x1
	.value	0x220
	.long	0x3359
	.uleb128 0x14
	.long	.LASF1290
	.byte	0x1
	.value	0x222
	.long	0x4c11
	.byte	0
	.uleb128 0x25
	.long	.LASF1291
	.byte	0x1
	.value	0x223
	.long	0x328
	.value	0x588
	.uleb128 0x25
	.long	.LASF1292
	.byte	0x1
	.value	0x224
	.long	0x328
	.value	0x58c
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x3321
	.uleb128 0x1f
	.long	.LASF1293
	.uleb128 0x3
	.byte	0x8
	.long	0x335f
	.uleb128 0x19
	.long	.LASF1294
	.byte	0x4
	.byte	0x11
	.byte	0x1c
	.long	0x3389
	.uleb128 0x12
	.long	.LASF1295
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1296
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1297
	.sleb128 2
	.byte	0
	.uleb128 0x24
	.long	.LASF1298
	.value	0x3f0
	.byte	0x11
	.byte	0x95
	.long	0x3424
	.uleb128 0x8
	.long	.LASF1299
	.byte	0x11
	.byte	0x9e
	.long	0x3424
	.byte	0
	.uleb128 0x8
	.long	.LASF1300
	.byte	0x11
	.byte	0xa1
	.long	0x3434
	.byte	0xf0
	.uleb128 0x2a
	.long	.LASF1301
	.byte	0x11
	.byte	0xa4
	.long	0x3444
	.value	0x1e0
	.uleb128 0x2a
	.long	.LASF1302
	.byte	0x11
	.byte	0xa7
	.long	0x3454
	.value	0x2d0
	.uleb128 0x2a
	.long	.LASF1303
	.byte	0x11
	.byte	0xaa
	.long	0x3464
	.value	0x348
	.uleb128 0x2a
	.long	.LASF1304
	.byte	0x11
	.byte	0xae
	.long	0x3474
	.value	0x3c0
	.uleb128 0x2a
	.long	.LASF1305
	.byte	0x11
	.byte	0xb2
	.long	0xbfd
	.value	0x3e0
	.uleb128 0x2a
	.long	.LASF1306
	.byte	0x11
	.byte	0xbf
	.long	0xa6a
	.value	0x3e4
	.uleb128 0x2a
	.long	.LASF1307
	.byte	0x11
	.byte	0xc2
	.long	0xa6a
	.value	0x3e5
	.uleb128 0x2a
	.long	.LASF1308
	.byte	0x11
	.byte	0xc5
	.long	0xa6a
	.value	0x3e6
	.uleb128 0x2a
	.long	.LASF1309
	.byte	0x11
	.byte	0xc8
	.long	0x2d
	.value	0x3e8
	.byte	0
	.uleb128 0xe
	.long	0x2d
	.long	0x3434
	.uleb128 0xf
	.long	0x33f
	.byte	0x1d
	.byte	0
	.uleb128 0xe
	.long	0x16ab
	.long	0x3444
	.uleb128 0xf
	.long	0x33f
	.byte	0x1d
	.byte	0
	.uleb128 0xe
	.long	0xc77
	.long	0x3454
	.uleb128 0xf
	.long	0x33f
	.byte	0x1d
	.byte	0
	.uleb128 0xe
	.long	0xcc3
	.long	0x3464
	.uleb128 0xf
	.long	0x33f
	.byte	0x1d
	.byte	0
	.uleb128 0xe
	.long	0x336a
	.long	0x3474
	.uleb128 0xf
	.long	0x33f
	.byte	0x1d
	.byte	0
	.uleb128 0xe
	.long	0x16ab
	.long	0x3484
	.uleb128 0xf
	.long	0x33f
	.byte	0x3
	.byte	0
	.uleb128 0x7
	.long	.LASF1310
	.byte	0x11
	.byte	0xd4
	.long	0x348f
	.uleb128 0x3
	.byte	0x8
	.long	0x3495
	.uleb128 0x27
	.long	0x328
	.long	0x34a9
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0xcc3
	.byte	0
	.uleb128 0x7
	.long	.LASF1311
	.byte	0x11
	.byte	0xd6
	.long	0x34b4
	.uleb128 0x3
	.byte	0x8
	.long	0x34ba
	.uleb128 0x27
	.long	0x2d
	.long	0x34ca
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x2b
	.byte	0
	.uleb128 0x4
	.long	.LASF1312
	.byte	0x18
	.byte	0x11
	.byte	0xd8
	.long	0x3516
	.uleb128 0x8
	.long	.LASF1313
	.byte	0x11
	.byte	0xda
	.long	0x3516
	.byte	0
	.uleb128 0x8
	.long	.LASF1314
	.byte	0x11
	.byte	0xdc
	.long	0x2f22
	.byte	0x8
	.uleb128 0x5
	.long	.LASF1
	.byte	0x11
	.byte	0xde
	.long	0x351b
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1315
	.byte	0x11
	.byte	0xe0
	.long	0xc7d
	.byte	0x12
	.uleb128 0x8
	.long	.LASF1316
	.byte	0x11
	.byte	0xe2
	.long	0xc7d
	.byte	0x13
	.byte	0
	.uleb128 0xc
	.long	0x3484
	.uleb128 0xc
	.long	0xa10
	.uleb128 0x4
	.long	.LASF1317
	.byte	0x28
	.byte	0x11
	.byte	0xec
	.long	0x358d
	.uleb128 0x8
	.long	.LASF983
	.byte	0x11
	.byte	0xee
	.long	0x2f22
	.byte	0
	.uleb128 0x8
	.long	.LASF1318
	.byte	0x11
	.byte	0xef
	.long	0xcbc
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1319
	.byte	0x11
	.byte	0xf0
	.long	0x358d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1299
	.byte	0x11
	.byte	0xf1
	.long	0x3592
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1306
	.byte	0x11
	.byte	0xf3
	.long	0xc7d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1307
	.byte	0x11
	.byte	0xf4
	.long	0xc7d
	.byte	0x21
	.uleb128 0x8
	.long	.LASF1308
	.byte	0x11
	.byte	0xf5
	.long	0xc7d
	.byte	0x22
	.uleb128 0x8
	.long	.LASF1320
	.byte	0x11
	.byte	0xf6
	.long	0xc7d
	.byte	0x23
	.byte	0
	.uleb128 0xc
	.long	0x34a9
	.uleb128 0xc
	.long	0x3597
	.uleb128 0x3
	.byte	0x8
	.long	0x359d
	.uleb128 0xc
	.long	0x34ca
	.uleb128 0x19
	.long	.LASF1321
	.byte	0x4
	.byte	0x12
	.byte	0x34
	.long	0x35cd
	.uleb128 0x12
	.long	.LASF1322
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1323
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1324
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1325
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1326
	.sleb128 4
	.byte	0
	.uleb128 0x11
	.long	.LASF1327
	.byte	0x4
	.byte	0x12
	.value	0x100
	.long	0x35f9
	.uleb128 0x12
	.long	.LASF1328
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1329
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1330
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1331
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1332
	.sleb128 4
	.byte	0
	.uleb128 0x19
	.long	.LASF1333
	.byte	0x4
	.byte	0x13
	.byte	0x7
	.long	0x44e6
	.uleb128 0x12
	.long	.LASF1334
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1335
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1336
	.sleb128 15
	.uleb128 0x12
	.long	.LASF1337
	.sleb128 16
	.uleb128 0x12
	.long	.LASF1338
	.sleb128 30
	.uleb128 0x12
	.long	.LASF1339
	.sleb128 31
	.uleb128 0x12
	.long	.LASF1340
	.sleb128 42
	.uleb128 0x12
	.long	.LASF1341
	.sleb128 73
	.uleb128 0x12
	.long	.LASF1342
	.sleb128 77
	.uleb128 0x12
	.long	.LASF1343
	.sleb128 80
	.uleb128 0x12
	.long	.LASF1344
	.sleb128 105
	.uleb128 0x12
	.long	.LASF1345
	.sleb128 106
	.uleb128 0x12
	.long	.LASF1346
	.sleb128 107
	.uleb128 0x12
	.long	.LASF1347
	.sleb128 115
	.uleb128 0x12
	.long	.LASF1348
	.sleb128 116
	.uleb128 0x12
	.long	.LASF1349
	.sleb128 117
	.uleb128 0x12
	.long	.LASF1350
	.sleb128 118
	.uleb128 0x12
	.long	.LASF1351
	.sleb128 120
	.uleb128 0x12
	.long	.LASF1352
	.sleb128 121
	.uleb128 0x12
	.long	.LASF1353
	.sleb128 122
	.uleb128 0x12
	.long	.LASF1354
	.sleb128 123
	.uleb128 0x12
	.long	.LASF1355
	.sleb128 125
	.uleb128 0x12
	.long	.LASF1356
	.sleb128 126
	.uleb128 0x12
	.long	.LASF1357
	.sleb128 142
	.uleb128 0x12
	.long	.LASF1358
	.sleb128 143
	.uleb128 0x12
	.long	.LASF1359
	.sleb128 153
	.uleb128 0x12
	.long	.LASF1360
	.sleb128 154
	.uleb128 0x12
	.long	.LASF1361
	.sleb128 155
	.uleb128 0x12
	.long	.LASF1362
	.sleb128 156
	.uleb128 0x12
	.long	.LASF1363
	.sleb128 158
	.uleb128 0x12
	.long	.LASF1364
	.sleb128 159
	.uleb128 0x12
	.long	.LASF1365
	.sleb128 160
	.uleb128 0x12
	.long	.LASF1366
	.sleb128 161
	.uleb128 0x12
	.long	.LASF1367
	.sleb128 163
	.uleb128 0x12
	.long	.LASF1368
	.sleb128 164
	.uleb128 0x12
	.long	.LASF1369
	.sleb128 165
	.uleb128 0x12
	.long	.LASF1370
	.sleb128 166
	.uleb128 0x12
	.long	.LASF1371
	.sleb128 167
	.uleb128 0x12
	.long	.LASF1372
	.sleb128 173
	.uleb128 0x12
	.long	.LASF1373
	.sleb128 179
	.uleb128 0x12
	.long	.LASF1374
	.sleb128 180
	.uleb128 0x12
	.long	.LASF1375
	.sleb128 181
	.uleb128 0x12
	.long	.LASF1376
	.sleb128 182
	.uleb128 0x12
	.long	.LASF1377
	.sleb128 183
	.uleb128 0x12
	.long	.LASF1378
	.sleb128 184
	.uleb128 0x12
	.long	.LASF1379
	.sleb128 191
	.uleb128 0x12
	.long	.LASF1380
	.sleb128 208
	.uleb128 0x12
	.long	.LASF1381
	.sleb128 227
	.uleb128 0x12
	.long	.LASF1382
	.sleb128 231
	.uleb128 0x12
	.long	.LASF1383
	.sleb128 235
	.uleb128 0x12
	.long	.LASF1384
	.sleb128 236
	.uleb128 0x12
	.long	.LASF1385
	.sleb128 266
	.uleb128 0x12
	.long	.LASF1386
	.sleb128 267
	.uleb128 0x12
	.long	.LASF1387
	.sleb128 274
	.uleb128 0x12
	.long	.LASF1388
	.sleb128 275
	.uleb128 0x12
	.long	.LASF1389
	.sleb128 277
	.uleb128 0x12
	.long	.LASF1390
	.sleb128 281
	.uleb128 0x12
	.long	.LASF1391
	.sleb128 302
	.uleb128 0x12
	.long	.LASF1392
	.sleb128 355
	.uleb128 0x12
	.long	.LASF1393
	.sleb128 356
	.uleb128 0x12
	.long	.LASF1394
	.sleb128 358
	.uleb128 0x12
	.long	.LASF1395
	.sleb128 359
	.uleb128 0x12
	.long	.LASF1396
	.sleb128 374
	.uleb128 0x12
	.long	.LASF1397
	.sleb128 375
	.uleb128 0x12
	.long	.LASF1398
	.sleb128 377
	.uleb128 0x12
	.long	.LASF1399
	.sleb128 378
	.uleb128 0x12
	.long	.LASF1400
	.sleb128 405
	.uleb128 0x12
	.long	.LASF1401
	.sleb128 407
	.uleb128 0x12
	.long	.LASF1402
	.sleb128 418
	.uleb128 0x12
	.long	.LASF1403
	.sleb128 423
	.uleb128 0x12
	.long	.LASF1404
	.sleb128 425
	.uleb128 0x12
	.long	.LASF1405
	.sleb128 426
	.uleb128 0x12
	.long	.LASF1406
	.sleb128 448
	.uleb128 0x12
	.long	.LASF1407
	.sleb128 487
	.uleb128 0x12
	.long	.LASF1408
	.sleb128 502
	.uleb128 0x12
	.long	.LASF1409
	.sleb128 507
	.uleb128 0x12
	.long	.LASF1410
	.sleb128 513
	.uleb128 0x12
	.long	.LASF1411
	.sleb128 514
	.uleb128 0x12
	.long	.LASF1412
	.sleb128 515
	.uleb128 0x12
	.long	.LASF1413
	.sleb128 516
	.uleb128 0x12
	.long	.LASF1414
	.sleb128 517
	.uleb128 0x12
	.long	.LASF1415
	.sleb128 518
	.uleb128 0x12
	.long	.LASF1416
	.sleb128 519
	.uleb128 0x12
	.long	.LASF1417
	.sleb128 520
	.uleb128 0x12
	.long	.LASF1418
	.sleb128 521
	.uleb128 0x12
	.long	.LASF1419
	.sleb128 522
	.uleb128 0x12
	.long	.LASF1420
	.sleb128 523
	.uleb128 0x12
	.long	.LASF1421
	.sleb128 524
	.uleb128 0x12
	.long	.LASF1422
	.sleb128 559
	.uleb128 0x12
	.long	.LASF1423
	.sleb128 560
	.uleb128 0x12
	.long	.LASF1424
	.sleb128 561
	.uleb128 0x12
	.long	.LASF1425
	.sleb128 562
	.uleb128 0x12
	.long	.LASF1426
	.sleb128 563
	.uleb128 0x12
	.long	.LASF1427
	.sleb128 564
	.uleb128 0x12
	.long	.LASF1428
	.sleb128 566
	.uleb128 0x12
	.long	.LASF1429
	.sleb128 567
	.uleb128 0x12
	.long	.LASF1430
	.sleb128 572
	.uleb128 0x12
	.long	.LASF1431
	.sleb128 573
	.uleb128 0x12
	.long	.LASF1432
	.sleb128 575
	.uleb128 0x12
	.long	.LASF1433
	.sleb128 576
	.uleb128 0x12
	.long	.LASF1434
	.sleb128 577
	.uleb128 0x12
	.long	.LASF1435
	.sleb128 578
	.uleb128 0x12
	.long	.LASF1436
	.sleb128 580
	.uleb128 0x12
	.long	.LASF1437
	.sleb128 581
	.uleb128 0x12
	.long	.LASF1438
	.sleb128 582
	.uleb128 0x12
	.long	.LASF1439
	.sleb128 583
	.uleb128 0x12
	.long	.LASF1440
	.sleb128 584
	.uleb128 0x12
	.long	.LASF1441
	.sleb128 585
	.uleb128 0x12
	.long	.LASF1442
	.sleb128 586
	.uleb128 0x12
	.long	.LASF1443
	.sleb128 587
	.uleb128 0x12
	.long	.LASF1444
	.sleb128 588
	.uleb128 0x12
	.long	.LASF1445
	.sleb128 589
	.uleb128 0x12
	.long	.LASF1446
	.sleb128 590
	.uleb128 0x12
	.long	.LASF1447
	.sleb128 591
	.uleb128 0x12
	.long	.LASF1448
	.sleb128 592
	.uleb128 0x12
	.long	.LASF1449
	.sleb128 593
	.uleb128 0x12
	.long	.LASF1450
	.sleb128 594
	.uleb128 0x12
	.long	.LASF1451
	.sleb128 595
	.uleb128 0x12
	.long	.LASF1452
	.sleb128 596
	.uleb128 0x12
	.long	.LASF1453
	.sleb128 597
	.uleb128 0x12
	.long	.LASF1454
	.sleb128 598
	.uleb128 0x12
	.long	.LASF1455
	.sleb128 599
	.uleb128 0x12
	.long	.LASF1456
	.sleb128 600
	.uleb128 0x12
	.long	.LASF1457
	.sleb128 601
	.uleb128 0x12
	.long	.LASF1458
	.sleb128 602
	.uleb128 0x12
	.long	.LASF1459
	.sleb128 603
	.uleb128 0x12
	.long	.LASF1460
	.sleb128 604
	.uleb128 0x12
	.long	.LASF1461
	.sleb128 605
	.uleb128 0x12
	.long	.LASF1462
	.sleb128 606
	.uleb128 0x12
	.long	.LASF1463
	.sleb128 607
	.uleb128 0x12
	.long	.LASF1464
	.sleb128 608
	.uleb128 0x12
	.long	.LASF1465
	.sleb128 609
	.uleb128 0x12
	.long	.LASF1466
	.sleb128 610
	.uleb128 0x12
	.long	.LASF1467
	.sleb128 611
	.uleb128 0x12
	.long	.LASF1468
	.sleb128 612
	.uleb128 0x12
	.long	.LASF1469
	.sleb128 613
	.uleb128 0x12
	.long	.LASF1470
	.sleb128 615
	.uleb128 0x12
	.long	.LASF1471
	.sleb128 636
	.uleb128 0x12
	.long	.LASF1472
	.sleb128 637
	.uleb128 0x12
	.long	.LASF1473
	.sleb128 638
	.uleb128 0x12
	.long	.LASF1474
	.sleb128 639
	.uleb128 0x12
	.long	.LASF1475
	.sleb128 640
	.uleb128 0x12
	.long	.LASF1476
	.sleb128 649
	.uleb128 0x12
	.long	.LASF1477
	.sleb128 650
	.uleb128 0x12
	.long	.LASF1478
	.sleb128 657
	.uleb128 0x12
	.long	.LASF1479
	.sleb128 659
	.uleb128 0x12
	.long	.LASF1480
	.sleb128 660
	.uleb128 0x12
	.long	.LASF1481
	.sleb128 661
	.uleb128 0x12
	.long	.LASF1482
	.sleb128 662
	.uleb128 0x12
	.long	.LASF1483
	.sleb128 663
	.uleb128 0x12
	.long	.LASF1484
	.sleb128 664
	.uleb128 0x12
	.long	.LASF1485
	.sleb128 672
	.uleb128 0x12
	.long	.LASF1486
	.sleb128 674
	.uleb128 0x12
	.long	.LASF1487
	.sleb128 675
	.uleb128 0x12
	.long	.LASF1488
	.sleb128 676
	.uleb128 0x12
	.long	.LASF1489
	.sleb128 677
	.uleb128 0x12
	.long	.LASF1490
	.sleb128 678
	.uleb128 0x12
	.long	.LASF1491
	.sleb128 679
	.uleb128 0x12
	.long	.LASF1492
	.sleb128 680
	.uleb128 0x12
	.long	.LASF1493
	.sleb128 681
	.uleb128 0x12
	.long	.LASF1494
	.sleb128 682
	.uleb128 0x12
	.long	.LASF1495
	.sleb128 683
	.uleb128 0x12
	.long	.LASF1496
	.sleb128 684
	.uleb128 0x12
	.long	.LASF1497
	.sleb128 685
	.uleb128 0x12
	.long	.LASF1498
	.sleb128 686
	.uleb128 0x12
	.long	.LASF1499
	.sleb128 687
	.uleb128 0x12
	.long	.LASF1500
	.sleb128 688
	.uleb128 0x12
	.long	.LASF1501
	.sleb128 689
	.uleb128 0x12
	.long	.LASF1502
	.sleb128 690
	.uleb128 0x12
	.long	.LASF1503
	.sleb128 691
	.uleb128 0x12
	.long	.LASF1504
	.sleb128 692
	.uleb128 0x12
	.long	.LASF1505
	.sleb128 693
	.uleb128 0x12
	.long	.LASF1506
	.sleb128 694
	.uleb128 0x12
	.long	.LASF1507
	.sleb128 695
	.uleb128 0x12
	.long	.LASF1508
	.sleb128 696
	.uleb128 0x12
	.long	.LASF1509
	.sleb128 697
	.uleb128 0x12
	.long	.LASF1510
	.sleb128 698
	.uleb128 0x12
	.long	.LASF1511
	.sleb128 699
	.uleb128 0x12
	.long	.LASF1512
	.sleb128 700
	.uleb128 0x12
	.long	.LASF1513
	.sleb128 701
	.uleb128 0x12
	.long	.LASF1514
	.sleb128 702
	.uleb128 0x12
	.long	.LASF1515
	.sleb128 703
	.uleb128 0x12
	.long	.LASF1516
	.sleb128 708
	.uleb128 0x12
	.long	.LASF1517
	.sleb128 712
	.uleb128 0x12
	.long	.LASF1518
	.sleb128 718
	.uleb128 0x12
	.long	.LASF1519
	.sleb128 724
	.uleb128 0x12
	.long	.LASF1520
	.sleb128 726
	.uleb128 0x12
	.long	.LASF1521
	.sleb128 727
	.uleb128 0x12
	.long	.LASF1522
	.sleb128 728
	.uleb128 0x12
	.long	.LASF1523
	.sleb128 729
	.uleb128 0x12
	.long	.LASF1524
	.sleb128 730
	.uleb128 0x12
	.long	.LASF1525
	.sleb128 731
	.uleb128 0x12
	.long	.LASF1526
	.sleb128 732
	.uleb128 0x12
	.long	.LASF1527
	.sleb128 733
	.uleb128 0x12
	.long	.LASF1528
	.sleb128 734
	.uleb128 0x12
	.long	.LASF1529
	.sleb128 735
	.uleb128 0x12
	.long	.LASF1530
	.sleb128 736
	.uleb128 0x12
	.long	.LASF1531
	.sleb128 737
	.uleb128 0x12
	.long	.LASF1532
	.sleb128 738
	.uleb128 0x12
	.long	.LASF1533
	.sleb128 739
	.uleb128 0x12
	.long	.LASF1534
	.sleb128 740
	.uleb128 0x12
	.long	.LASF1535
	.sleb128 741
	.uleb128 0x12
	.long	.LASF1536
	.sleb128 742
	.uleb128 0x12
	.long	.LASF1537
	.sleb128 743
	.uleb128 0x12
	.long	.LASF1538
	.sleb128 744
	.uleb128 0x12
	.long	.LASF1539
	.sleb128 745
	.uleb128 0x12
	.long	.LASF1540
	.sleb128 746
	.uleb128 0x12
	.long	.LASF1541
	.sleb128 747
	.uleb128 0x12
	.long	.LASF1542
	.sleb128 748
	.uleb128 0x12
	.long	.LASF1543
	.sleb128 749
	.uleb128 0x12
	.long	.LASF1544
	.sleb128 750
	.uleb128 0x12
	.long	.LASF1545
	.sleb128 751
	.uleb128 0x12
	.long	.LASF1546
	.sleb128 752
	.uleb128 0x12
	.long	.LASF1547
	.sleb128 753
	.uleb128 0x12
	.long	.LASF1548
	.sleb128 754
	.uleb128 0x12
	.long	.LASF1549
	.sleb128 755
	.uleb128 0x12
	.long	.LASF1550
	.sleb128 756
	.uleb128 0x12
	.long	.LASF1551
	.sleb128 757
	.uleb128 0x12
	.long	.LASF1552
	.sleb128 758
	.uleb128 0x12
	.long	.LASF1553
	.sleb128 759
	.uleb128 0x12
	.long	.LASF1554
	.sleb128 760
	.uleb128 0x12
	.long	.LASF1555
	.sleb128 761
	.uleb128 0x12
	.long	.LASF1556
	.sleb128 762
	.uleb128 0x12
	.long	.LASF1557
	.sleb128 763
	.uleb128 0x12
	.long	.LASF1558
	.sleb128 764
	.uleb128 0x12
	.long	.LASF1559
	.sleb128 765
	.uleb128 0x12
	.long	.LASF1560
	.sleb128 766
	.uleb128 0x12
	.long	.LASF1561
	.sleb128 767
	.uleb128 0x12
	.long	.LASF1562
	.sleb128 768
	.uleb128 0x12
	.long	.LASF1563
	.sleb128 769
	.uleb128 0x12
	.long	.LASF1564
	.sleb128 770
	.uleb128 0x12
	.long	.LASF1565
	.sleb128 771
	.uleb128 0x12
	.long	.LASF1566
	.sleb128 772
	.uleb128 0x12
	.long	.LASF1567
	.sleb128 773
	.uleb128 0x12
	.long	.LASF1568
	.sleb128 774
	.uleb128 0x12
	.long	.LASF1569
	.sleb128 775
	.uleb128 0x12
	.long	.LASF1570
	.sleb128 776
	.uleb128 0x12
	.long	.LASF1571
	.sleb128 777
	.uleb128 0x12
	.long	.LASF1572
	.sleb128 778
	.uleb128 0x12
	.long	.LASF1573
	.sleb128 779
	.uleb128 0x12
	.long	.LASF1574
	.sleb128 780
	.uleb128 0x12
	.long	.LASF1575
	.sleb128 781
	.uleb128 0x12
	.long	.LASF1576
	.sleb128 782
	.uleb128 0x12
	.long	.LASF1577
	.sleb128 783
	.uleb128 0x12
	.long	.LASF1578
	.sleb128 784
	.uleb128 0x12
	.long	.LASF1579
	.sleb128 785
	.uleb128 0x12
	.long	.LASF1580
	.sleb128 786
	.uleb128 0x12
	.long	.LASF1581
	.sleb128 787
	.uleb128 0x12
	.long	.LASF1582
	.sleb128 788
	.uleb128 0x12
	.long	.LASF1583
	.sleb128 789
	.uleb128 0x12
	.long	.LASF1584
	.sleb128 790
	.uleb128 0x12
	.long	.LASF1585
	.sleb128 791
	.uleb128 0x12
	.long	.LASF1586
	.sleb128 792
	.uleb128 0x12
	.long	.LASF1587
	.sleb128 793
	.uleb128 0x12
	.long	.LASF1588
	.sleb128 794
	.uleb128 0x12
	.long	.LASF1589
	.sleb128 795
	.uleb128 0x12
	.long	.LASF1590
	.sleb128 796
	.uleb128 0x12
	.long	.LASF1591
	.sleb128 797
	.uleb128 0x12
	.long	.LASF1592
	.sleb128 798
	.uleb128 0x12
	.long	.LASF1593
	.sleb128 799
	.uleb128 0x12
	.long	.LASF1594
	.sleb128 800
	.uleb128 0x12
	.long	.LASF1595
	.sleb128 801
	.uleb128 0x12
	.long	.LASF1596
	.sleb128 802
	.uleb128 0x12
	.long	.LASF1597
	.sleb128 803
	.uleb128 0x12
	.long	.LASF1598
	.sleb128 806
	.uleb128 0x12
	.long	.LASF1599
	.sleb128 807
	.uleb128 0x12
	.long	.LASF1600
	.sleb128 808
	.uleb128 0x12
	.long	.LASF1601
	.sleb128 809
	.uleb128 0x12
	.long	.LASF1602
	.sleb128 810
	.uleb128 0x12
	.long	.LASF1603
	.sleb128 811
	.uleb128 0x12
	.long	.LASF1604
	.sleb128 812
	.uleb128 0x12
	.long	.LASF1605
	.sleb128 813
	.uleb128 0x12
	.long	.LASF1606
	.sleb128 814
	.uleb128 0x12
	.long	.LASF1607
	.sleb128 815
	.uleb128 0x12
	.long	.LASF1608
	.sleb128 816
	.uleb128 0x12
	.long	.LASF1609
	.sleb128 817
	.uleb128 0x12
	.long	.LASF1610
	.sleb128 818
	.uleb128 0x12
	.long	.LASF1611
	.sleb128 819
	.uleb128 0x12
	.long	.LASF1612
	.sleb128 820
	.uleb128 0x12
	.long	.LASF1613
	.sleb128 821
	.uleb128 0x12
	.long	.LASF1614
	.sleb128 822
	.uleb128 0x12
	.long	.LASF1615
	.sleb128 823
	.uleb128 0x12
	.long	.LASF1616
	.sleb128 824
	.uleb128 0x12
	.long	.LASF1617
	.sleb128 825
	.uleb128 0x12
	.long	.LASF1618
	.sleb128 826
	.uleb128 0x12
	.long	.LASF1619
	.sleb128 827
	.uleb128 0x12
	.long	.LASF1620
	.sleb128 828
	.uleb128 0x12
	.long	.LASF1621
	.sleb128 829
	.uleb128 0x12
	.long	.LASF1622
	.sleb128 830
	.uleb128 0x12
	.long	.LASF1623
	.sleb128 831
	.uleb128 0x12
	.long	.LASF1624
	.sleb128 834
	.uleb128 0x12
	.long	.LASF1625
	.sleb128 835
	.uleb128 0x12
	.long	.LASF1626
	.sleb128 836
	.uleb128 0x12
	.long	.LASF1627
	.sleb128 837
	.uleb128 0x12
	.long	.LASF1628
	.sleb128 838
	.uleb128 0x12
	.long	.LASF1629
	.sleb128 839
	.uleb128 0x12
	.long	.LASF1630
	.sleb128 840
	.uleb128 0x12
	.long	.LASF1631
	.sleb128 841
	.uleb128 0x12
	.long	.LASF1632
	.sleb128 842
	.uleb128 0x12
	.long	.LASF1633
	.sleb128 843
	.uleb128 0x12
	.long	.LASF1634
	.sleb128 844
	.uleb128 0x12
	.long	.LASF1635
	.sleb128 846
	.uleb128 0x12
	.long	.LASF1636
	.sleb128 847
	.uleb128 0x12
	.long	.LASF1637
	.sleb128 848
	.uleb128 0x12
	.long	.LASF1638
	.sleb128 849
	.uleb128 0x12
	.long	.LASF1639
	.sleb128 850
	.uleb128 0x12
	.long	.LASF1640
	.sleb128 851
	.uleb128 0x12
	.long	.LASF1641
	.sleb128 852
	.uleb128 0x12
	.long	.LASF1642
	.sleb128 861
	.uleb128 0x12
	.long	.LASF1643
	.sleb128 865
	.uleb128 0x12
	.long	.LASF1644
	.sleb128 870
	.uleb128 0x12
	.long	.LASF1645
	.sleb128 871
	.uleb128 0x12
	.long	.LASF1646
	.sleb128 878
	.uleb128 0x12
	.long	.LASF1647
	.sleb128 880
	.uleb128 0x12
	.long	.LASF1648
	.sleb128 884
	.uleb128 0x12
	.long	.LASF1649
	.sleb128 888
	.uleb128 0x12
	.long	.LASF1650
	.sleb128 892
	.uleb128 0x12
	.long	.LASF1651
	.sleb128 904
	.uleb128 0x12
	.long	.LASF1652
	.sleb128 905
	.uleb128 0x12
	.long	.LASF1653
	.sleb128 906
	.uleb128 0x12
	.long	.LASF1654
	.sleb128 907
	.uleb128 0x12
	.long	.LASF1655
	.sleb128 908
	.uleb128 0x12
	.long	.LASF1656
	.sleb128 909
	.uleb128 0x12
	.long	.LASF1657
	.sleb128 913
	.uleb128 0x12
	.long	.LASF1658
	.sleb128 916
	.uleb128 0x12
	.long	.LASF1659
	.sleb128 919
	.uleb128 0x12
	.long	.LASF1660
	.sleb128 922
	.uleb128 0x12
	.long	.LASF1661
	.sleb128 925
	.uleb128 0x12
	.long	.LASF1662
	.sleb128 926
	.uleb128 0x12
	.long	.LASF1663
	.sleb128 927
	.uleb128 0x12
	.long	.LASF1664
	.sleb128 928
	.uleb128 0x12
	.long	.LASF1665
	.sleb128 932
	.uleb128 0x12
	.long	.LASF1666
	.sleb128 933
	.uleb128 0x12
	.long	.LASF1667
	.sleb128 934
	.uleb128 0x12
	.long	.LASF1668
	.sleb128 935
	.uleb128 0x12
	.long	.LASF1669
	.sleb128 939
	.uleb128 0x12
	.long	.LASF1670
	.sleb128 940
	.uleb128 0x12
	.long	.LASF1671
	.sleb128 941
	.uleb128 0x12
	.long	.LASF1672
	.sleb128 942
	.uleb128 0x12
	.long	.LASF1673
	.sleb128 946
	.uleb128 0x12
	.long	.LASF1674
	.sleb128 947
	.uleb128 0x12
	.long	.LASF1675
	.sleb128 948
	.uleb128 0x12
	.long	.LASF1676
	.sleb128 949
	.uleb128 0x12
	.long	.LASF1677
	.sleb128 951
	.uleb128 0x12
	.long	.LASF1678
	.sleb128 953
	.uleb128 0x12
	.long	.LASF1679
	.sleb128 963
	.uleb128 0x12
	.long	.LASF1680
	.sleb128 964
	.uleb128 0x12
	.long	.LASF1681
	.sleb128 965
	.uleb128 0x12
	.long	.LASF1682
	.sleb128 966
	.uleb128 0x12
	.long	.LASF1683
	.sleb128 967
	.uleb128 0x12
	.long	.LASF1684
	.sleb128 968
	.uleb128 0x12
	.long	.LASF1685
	.sleb128 969
	.uleb128 0x12
	.long	.LASF1686
	.sleb128 971
	.uleb128 0x12
	.long	.LASF1687
	.sleb128 972
	.uleb128 0x12
	.long	.LASF1688
	.sleb128 973
	.uleb128 0x12
	.long	.LASF1689
	.sleb128 974
	.uleb128 0x12
	.long	.LASF1690
	.sleb128 975
	.uleb128 0x12
	.long	.LASF1691
	.sleb128 976
	.uleb128 0x12
	.long	.LASF1692
	.sleb128 977
	.uleb128 0x12
	.long	.LASF1693
	.sleb128 978
	.uleb128 0x12
	.long	.LASF1694
	.sleb128 979
	.uleb128 0x12
	.long	.LASF1695
	.sleb128 980
	.uleb128 0x12
	.long	.LASF1696
	.sleb128 981
	.uleb128 0x12
	.long	.LASF1697
	.sleb128 982
	.uleb128 0x12
	.long	.LASF1698
	.sleb128 983
	.uleb128 0x12
	.long	.LASF1699
	.sleb128 984
	.uleb128 0x12
	.long	.LASF1700
	.sleb128 985
	.uleb128 0x12
	.long	.LASF1701
	.sleb128 986
	.uleb128 0x12
	.long	.LASF1702
	.sleb128 987
	.uleb128 0x12
	.long	.LASF1703
	.sleb128 988
	.uleb128 0x12
	.long	.LASF1704
	.sleb128 989
	.uleb128 0x12
	.long	.LASF1705
	.sleb128 990
	.uleb128 0x12
	.long	.LASF1706
	.sleb128 991
	.uleb128 0x12
	.long	.LASF1707
	.sleb128 992
	.uleb128 0x12
	.long	.LASF1708
	.sleb128 993
	.uleb128 0x12
	.long	.LASF1709
	.sleb128 994
	.uleb128 0x12
	.long	.LASF1710
	.sleb128 995
	.uleb128 0x12
	.long	.LASF1711
	.sleb128 996
	.uleb128 0x12
	.long	.LASF1712
	.sleb128 997
	.uleb128 0x12
	.long	.LASF1713
	.sleb128 998
	.uleb128 0x12
	.long	.LASF1714
	.sleb128 999
	.uleb128 0x12
	.long	.LASF1715
	.sleb128 1000
	.uleb128 0x12
	.long	.LASF1716
	.sleb128 1002
	.uleb128 0x12
	.long	.LASF1717
	.sleb128 1006
	.uleb128 0x12
	.long	.LASF1718
	.sleb128 1007
	.uleb128 0x12
	.long	.LASF1719
	.sleb128 1008
	.uleb128 0x12
	.long	.LASF1720
	.sleb128 1009
	.uleb128 0x12
	.long	.LASF1721
	.sleb128 1011
	.uleb128 0x12
	.long	.LASF1722
	.sleb128 1012
	.uleb128 0x12
	.long	.LASF1723
	.sleb128 1016
	.uleb128 0x12
	.long	.LASF1724
	.sleb128 1017
	.uleb128 0x12
	.long	.LASF1725
	.sleb128 1018
	.uleb128 0x12
	.long	.LASF1726
	.sleb128 1019
	.uleb128 0x12
	.long	.LASF1727
	.sleb128 1020
	.uleb128 0x12
	.long	.LASF1728
	.sleb128 1021
	.uleb128 0x12
	.long	.LASF1729
	.sleb128 1022
	.uleb128 0x12
	.long	.LASF1730
	.sleb128 1023
	.uleb128 0x12
	.long	.LASF1731
	.sleb128 1024
	.uleb128 0x12
	.long	.LASF1732
	.sleb128 1025
	.uleb128 0x12
	.long	.LASF1733
	.sleb128 1026
	.uleb128 0x12
	.long	.LASF1734
	.sleb128 1027
	.uleb128 0x12
	.long	.LASF1735
	.sleb128 1029
	.uleb128 0x12
	.long	.LASF1736
	.sleb128 1030
	.uleb128 0x12
	.long	.LASF1737
	.sleb128 1031
	.uleb128 0x12
	.long	.LASF1738
	.sleb128 1032
	.uleb128 0x12
	.long	.LASF1739
	.sleb128 1039
	.uleb128 0x12
	.long	.LASF1740
	.sleb128 1046
	.uleb128 0x12
	.long	.LASF1741
	.sleb128 1047
	.uleb128 0x12
	.long	.LASF1742
	.sleb128 1052
	.uleb128 0x12
	.long	.LASF1743
	.sleb128 1059
	.uleb128 0x12
	.long	.LASF1744
	.sleb128 1065
	.uleb128 0x12
	.long	.LASF1745
	.sleb128 1066
	.uleb128 0x12
	.long	.LASF1746
	.sleb128 1071
	.uleb128 0x12
	.long	.LASF1747
	.sleb128 1073
	.uleb128 0x12
	.long	.LASF1748
	.sleb128 1076
	.uleb128 0x12
	.long	.LASF1749
	.sleb128 1078
	.uleb128 0x12
	.long	.LASF1750
	.sleb128 1080
	.uleb128 0x12
	.long	.LASF1751
	.sleb128 1084
	.uleb128 0x12
	.long	.LASF1752
	.sleb128 1085
	.uleb128 0x12
	.long	.LASF1753
	.sleb128 1086
	.uleb128 0x12
	.long	.LASF1754
	.sleb128 1089
	.uleb128 0x12
	.long	.LASF1755
	.sleb128 1090
	.uleb128 0x12
	.long	.LASF1756
	.sleb128 1091
	.uleb128 0x12
	.long	.LASF1757
	.sleb128 1094
	.uleb128 0x12
	.long	.LASF1758
	.sleb128 1095
	.uleb128 0x12
	.long	.LASF1759
	.sleb128 1096
	.uleb128 0x12
	.long	.LASF1760
	.sleb128 1097
	.uleb128 0x12
	.long	.LASF1761
	.sleb128 1098
	.uleb128 0x12
	.long	.LASF1762
	.sleb128 1101
	.uleb128 0x12
	.long	.LASF1763
	.sleb128 1102
	.uleb128 0x12
	.long	.LASF1764
	.sleb128 1103
	.uleb128 0x12
	.long	.LASF1765
	.sleb128 1104
	.uleb128 0x12
	.long	.LASF1766
	.sleb128 1105
	.uleb128 0x12
	.long	.LASF1767
	.sleb128 1106
	.uleb128 0x12
	.long	.LASF1768
	.sleb128 1107
	.uleb128 0x12
	.long	.LASF1769
	.sleb128 1108
	.uleb128 0x12
	.long	.LASF1770
	.sleb128 1109
	.uleb128 0x12
	.long	.LASF1771
	.sleb128 1110
	.uleb128 0x12
	.long	.LASF1772
	.sleb128 1111
	.uleb128 0x12
	.long	.LASF1773
	.sleb128 1112
	.uleb128 0x12
	.long	.LASF1774
	.sleb128 1113
	.uleb128 0x12
	.long	.LASF1775
	.sleb128 1114
	.uleb128 0x12
	.long	.LASF1776
	.sleb128 1115
	.uleb128 0x12
	.long	.LASF1777
	.sleb128 1116
	.uleb128 0x12
	.long	.LASF1778
	.sleb128 1117
	.uleb128 0x12
	.long	.LASF1779
	.sleb128 1118
	.uleb128 0x12
	.long	.LASF1780
	.sleb128 1119
	.uleb128 0x12
	.long	.LASF1781
	.sleb128 1120
	.uleb128 0x12
	.long	.LASF1782
	.sleb128 1121
	.uleb128 0x12
	.long	.LASF1783
	.sleb128 1122
	.uleb128 0x12
	.long	.LASF1784
	.sleb128 1123
	.uleb128 0x12
	.long	.LASF1785
	.sleb128 1124
	.uleb128 0x12
	.long	.LASF1786
	.sleb128 1125
	.uleb128 0x12
	.long	.LASF1787
	.sleb128 1126
	.uleb128 0x12
	.long	.LASF1788
	.sleb128 1127
	.uleb128 0x12
	.long	.LASF1789
	.sleb128 1128
	.uleb128 0x12
	.long	.LASF1790
	.sleb128 1129
	.uleb128 0x12
	.long	.LASF1791
	.sleb128 1130
	.uleb128 0x12
	.long	.LASF1792
	.sleb128 1131
	.uleb128 0x12
	.long	.LASF1793
	.sleb128 1132
	.uleb128 0x12
	.long	.LASF1794
	.sleb128 1137
	.uleb128 0x12
	.long	.LASF1795
	.sleb128 1138
	.uleb128 0x12
	.long	.LASF1796
	.sleb128 1139
	.uleb128 0x12
	.long	.LASF1797
	.sleb128 1140
	.uleb128 0x12
	.long	.LASF1798
	.sleb128 1141
	.uleb128 0x12
	.long	.LASF1799
	.sleb128 1142
	.uleb128 0x12
	.long	.LASF1800
	.sleb128 1143
	.uleb128 0x12
	.long	.LASF1801
	.sleb128 1144
	.uleb128 0x12
	.long	.LASF1802
	.sleb128 1145
	.uleb128 0x12
	.long	.LASF1803
	.sleb128 1146
	.uleb128 0x12
	.long	.LASF1804
	.sleb128 1147
	.uleb128 0x12
	.long	.LASF1805
	.sleb128 1148
	.uleb128 0x12
	.long	.LASF1806
	.sleb128 1149
	.uleb128 0x12
	.long	.LASF1807
	.sleb128 1150
	.uleb128 0x12
	.long	.LASF1808
	.sleb128 1151
	.uleb128 0x12
	.long	.LASF1809
	.sleb128 1152
	.uleb128 0x12
	.long	.LASF1810
	.sleb128 1153
	.uleb128 0x12
	.long	.LASF1811
	.sleb128 1154
	.uleb128 0x12
	.long	.LASF1812
	.sleb128 1159
	.uleb128 0x12
	.long	.LASF1813
	.sleb128 1160
	.uleb128 0x12
	.long	.LASF1814
	.sleb128 1161
	.uleb128 0x12
	.long	.LASF1815
	.sleb128 1166
	.uleb128 0x12
	.long	.LASF1816
	.sleb128 1167
	.uleb128 0x12
	.long	.LASF1817
	.sleb128 1168
	.uleb128 0x12
	.long	.LASF1818
	.sleb128 1169
	.uleb128 0x12
	.long	.LASF1819
	.sleb128 1170
	.uleb128 0x12
	.long	.LASF1820
	.sleb128 1171
	.uleb128 0x12
	.long	.LASF1821
	.sleb128 1172
	.uleb128 0x12
	.long	.LASF1822
	.sleb128 1173
	.uleb128 0x12
	.long	.LASF1823
	.sleb128 1174
	.uleb128 0x12
	.long	.LASF1824
	.sleb128 1175
	.uleb128 0x12
	.long	.LASF1825
	.sleb128 1176
	.uleb128 0x12
	.long	.LASF1826
	.sleb128 1177
	.uleb128 0x12
	.long	.LASF1827
	.sleb128 1180
	.uleb128 0x12
	.long	.LASF1828
	.sleb128 1183
	.uleb128 0x12
	.long	.LASF1829
	.sleb128 1184
	.uleb128 0x12
	.long	.LASF1830
	.sleb128 1185
	.uleb128 0x12
	.long	.LASF1831
	.sleb128 1186
	.uleb128 0x12
	.long	.LASF1832
	.sleb128 1187
	.uleb128 0x12
	.long	.LASF1833
	.sleb128 1188
	.uleb128 0x12
	.long	.LASF1834
	.sleb128 1189
	.uleb128 0x12
	.long	.LASF1835
	.sleb128 1190
	.uleb128 0x12
	.long	.LASF1836
	.sleb128 1191
	.uleb128 0x12
	.long	.LASF1837
	.sleb128 1192
	.uleb128 0x12
	.long	.LASF1838
	.sleb128 1193
	.uleb128 0x12
	.long	.LASF1839
	.sleb128 1194
	.uleb128 0x12
	.long	.LASF1840
	.sleb128 1195
	.uleb128 0x12
	.long	.LASF1841
	.sleb128 1196
	.uleb128 0x12
	.long	.LASF1842
	.sleb128 1197
	.uleb128 0x12
	.long	.LASF1843
	.sleb128 1198
	.uleb128 0x12
	.long	.LASF1844
	.sleb128 1199
	.uleb128 0x12
	.long	.LASF1845
	.sleb128 1200
	.uleb128 0x12
	.long	.LASF1846
	.sleb128 1201
	.uleb128 0x12
	.long	.LASF1847
	.sleb128 1202
	.uleb128 0x12
	.long	.LASF1848
	.sleb128 1203
	.uleb128 0x12
	.long	.LASF1849
	.sleb128 1204
	.uleb128 0x12
	.long	.LASF1850
	.sleb128 1205
	.uleb128 0x12
	.long	.LASF1851
	.sleb128 1206
	.uleb128 0x12
	.long	.LASF1852
	.sleb128 1209
	.uleb128 0x12
	.long	.LASF1853
	.sleb128 1210
	.uleb128 0x12
	.long	.LASF1854
	.sleb128 1211
	.uleb128 0x12
	.long	.LASF1855
	.sleb128 1212
	.uleb128 0x12
	.long	.LASF1856
	.sleb128 1213
	.uleb128 0x12
	.long	.LASF1857
	.sleb128 1215
	.uleb128 0x12
	.long	.LASF1858
	.sleb128 1216
	.uleb128 0x12
	.long	.LASF1859
	.sleb128 1217
	.uleb128 0x12
	.long	.LASF1860
	.sleb128 1220
	.uleb128 0x12
	.long	.LASF1861
	.sleb128 1223
	.uleb128 0x12
	.long	.LASF1862
	.sleb128 1226
	.uleb128 0x12
	.long	.LASF1863
	.sleb128 1229
	.uleb128 0x12
	.long	.LASF1864
	.sleb128 1233
	.uleb128 0x12
	.long	.LASF1865
	.sleb128 1234
	.uleb128 0x12
	.long	.LASF1866
	.sleb128 1235
	.uleb128 0x12
	.long	.LASF1867
	.sleb128 1298
	.uleb128 0x12
	.long	.LASF1868
	.sleb128 1299
	.uleb128 0x12
	.long	.LASF1869
	.sleb128 1300
	.uleb128 0x12
	.long	.LASF1870
	.sleb128 1301
	.uleb128 0x12
	.long	.LASF1871
	.sleb128 1302
	.uleb128 0x12
	.long	.LASF1872
	.sleb128 1303
	.uleb128 0x12
	.long	.LASF1873
	.sleb128 1304
	.uleb128 0x12
	.long	.LASF1874
	.sleb128 1305
	.uleb128 0x12
	.long	.LASF1875
	.sleb128 1314
	.uleb128 0x12
	.long	.LASF1876
	.sleb128 1315
	.uleb128 0x12
	.long	.LASF1877
	.sleb128 1316
	.uleb128 0x12
	.long	.LASF1878
	.sleb128 1317
	.byte	0
	.uleb128 0x1b
	.byte	0x10
	.byte	0x14
	.byte	0x2c
	.long	0x4507
	.uleb128 0x8
	.long	.LASF1333
	.byte	0x14
	.byte	0x2d
	.long	0x35f9
	.byte	0
	.uleb128 0x8
	.long	.LASF1879
	.byte	0x14
	.byte	0x2e
	.long	0x2d
	.byte	0x8
	.byte	0
	.uleb128 0x24
	.long	.LASF1880
	.value	0x3b8
	.byte	0x14
	.byte	0x29
	.long	0x452d
	.uleb128 0x8
	.long	.LASF0
	.byte	0x14
	.byte	0x2b
	.long	0xe81
	.byte	0
	.uleb128 0x8
	.long	.LASF1881
	.byte	0x14
	.byte	0x2f
	.long	0x452d
	.byte	0x8
	.byte	0
	.uleb128 0xe
	.long	0x44e6
	.long	0x453d
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x7
	.long	.LASF1880
	.byte	0x14
	.byte	0x30
	.long	0x4548
	.uleb128 0x3
	.byte	0x8
	.long	0x4507
	.uleb128 0x19
	.long	.LASF1882
	.byte	0x4
	.byte	0x14
	.byte	0x37
	.long	0x4687
	.uleb128 0x12
	.long	.LASF1883
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1884
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1885
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1886
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1887
	.sleb128 4
	.uleb128 0x12
	.long	.LASF1888
	.sleb128 5
	.uleb128 0x12
	.long	.LASF1889
	.sleb128 6
	.uleb128 0x12
	.long	.LASF1890
	.sleb128 7
	.uleb128 0x12
	.long	.LASF1891
	.sleb128 8
	.uleb128 0x12
	.long	.LASF1892
	.sleb128 9
	.uleb128 0x12
	.long	.LASF1893
	.sleb128 10
	.uleb128 0x12
	.long	.LASF1894
	.sleb128 11
	.uleb128 0x12
	.long	.LASF1895
	.sleb128 12
	.uleb128 0x12
	.long	.LASF1896
	.sleb128 13
	.uleb128 0x12
	.long	.LASF1897
	.sleb128 14
	.uleb128 0x12
	.long	.LASF1898
	.sleb128 15
	.uleb128 0x12
	.long	.LASF1899
	.sleb128 16
	.uleb128 0x12
	.long	.LASF1900
	.sleb128 17
	.uleb128 0x12
	.long	.LASF1901
	.sleb128 18
	.uleb128 0x12
	.long	.LASF1902
	.sleb128 19
	.uleb128 0x12
	.long	.LASF1903
	.sleb128 20
	.uleb128 0x12
	.long	.LASF1904
	.sleb128 21
	.uleb128 0x12
	.long	.LASF1905
	.sleb128 22
	.uleb128 0x12
	.long	.LASF1906
	.sleb128 23
	.uleb128 0x12
	.long	.LASF1907
	.sleb128 24
	.uleb128 0x12
	.long	.LASF1908
	.sleb128 25
	.uleb128 0x12
	.long	.LASF1909
	.sleb128 26
	.uleb128 0x12
	.long	.LASF1910
	.sleb128 27
	.uleb128 0x12
	.long	.LASF1911
	.sleb128 28
	.uleb128 0x12
	.long	.LASF1912
	.sleb128 29
	.uleb128 0x12
	.long	.LASF1913
	.sleb128 30
	.uleb128 0x12
	.long	.LASF1914
	.sleb128 31
	.uleb128 0x12
	.long	.LASF1915
	.sleb128 32
	.uleb128 0x12
	.long	.LASF1916
	.sleb128 33
	.uleb128 0x12
	.long	.LASF1917
	.sleb128 34
	.uleb128 0x12
	.long	.LASF1918
	.sleb128 35
	.uleb128 0x12
	.long	.LASF1919
	.sleb128 36
	.uleb128 0x12
	.long	.LASF1920
	.sleb128 37
	.uleb128 0x12
	.long	.LASF1921
	.sleb128 38
	.uleb128 0x12
	.long	.LASF1922
	.sleb128 39
	.uleb128 0x12
	.long	.LASF1923
	.sleb128 40
	.uleb128 0x12
	.long	.LASF1924
	.sleb128 41
	.uleb128 0x12
	.long	.LASF1925
	.sleb128 42
	.uleb128 0x12
	.long	.LASF1926
	.sleb128 43
	.uleb128 0x12
	.long	.LASF1927
	.sleb128 44
	.uleb128 0x12
	.long	.LASF1928
	.sleb128 45
	.uleb128 0x12
	.long	.LASF1929
	.sleb128 46
	.uleb128 0x12
	.long	.LASF1930
	.sleb128 47
	.uleb128 0x12
	.long	.LASF1931
	.sleb128 48
	.uleb128 0x12
	.long	.LASF1932
	.sleb128 49
	.byte	0
	.uleb128 0x4
	.long	.LASF1933
	.byte	0x28
	.byte	0xb
	.byte	0x2b
	.long	0x46c4
	.uleb128 0x8
	.long	.LASF1260
	.byte	0xb
	.byte	0x2d
	.long	0x46c4
	.byte	0
	.uleb128 0x8
	.long	.LASF1934
	.byte	0xb
	.byte	0x2e
	.long	0x46c4
	.byte	0x8
	.uleb128 0x8
	.long	.LASF572
	.byte	0xb
	.byte	0x2f
	.long	0xa10
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1935
	.byte	0xb
	.byte	0x30
	.long	0x46ca
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4687
	.uleb128 0xe
	.long	0xa2b
	.long	0x46da
	.uleb128 0xf
	.long	0x33f
	.byte	0x1
	.byte	0
	.uleb128 0x7
	.long	.LASF1936
	.byte	0xb
	.byte	0x31
	.long	0x4687
	.uleb128 0x3
	.byte	0x8
	.long	0x46da
	.uleb128 0x7
	.long	.LASF1937
	.byte	0xb
	.byte	0x39
	.long	0x1430
	.uleb128 0x7
	.long	.LASF1938
	.byte	0xc
	.byte	0x21
	.long	0x46eb
	.uleb128 0x7
	.long	.LASF1939
	.byte	0xc
	.byte	0x74
	.long	0xa19
	.uleb128 0x4
	.long	.LASF1940
	.byte	0x40
	.byte	0xc
	.byte	0x77
	.long	0x4785
	.uleb128 0x8
	.long	.LASF1941
	.byte	0xc
	.byte	0x79
	.long	0x4785
	.byte	0
	.uleb128 0x8
	.long	.LASF1942
	.byte	0xc
	.byte	0x79
	.long	0x4785
	.byte	0x8
	.uleb128 0x6
	.string	"src"
	.byte	0xc
	.byte	0x7c
	.long	0x1503
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1943
	.byte	0xc
	.byte	0x7c
	.long	0x1503
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1944
	.byte	0xc
	.byte	0x7f
	.long	0x2d
	.byte	0x20
	.uleb128 0x6
	.string	"aux"
	.byte	0xc
	.byte	0x82
	.long	0xa17
	.byte	0x28
	.uleb128 0x8
	.long	.LASF587
	.byte	0xc
	.byte	0x84
	.long	0x328
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1945
	.byte	0xc
	.byte	0x85
	.long	0x328
	.byte	0x34
	.uleb128 0x8
	.long	.LASF585
	.byte	0xc
	.byte	0x86
	.long	0x4701
	.byte	0x38
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x470c
	.uleb128 0x7
	.long	.LASF1946
	.byte	0xc
	.byte	0x88
	.long	0x4785
	.uleb128 0x4
	.long	.LASF1947
	.byte	0x20
	.byte	0x15
	.byte	0x39
	.long	0x47cf
	.uleb128 0x6
	.string	"hi"
	.byte	0x15
	.byte	0x3b
	.long	0xc77
	.byte	0
	.uleb128 0x6
	.string	"si"
	.byte	0x15
	.byte	0x3c
	.long	0xc77
	.byte	0x8
	.uleb128 0x6
	.string	"di"
	.byte	0x15
	.byte	0x3d
	.long	0xc77
	.byte	0x10
	.uleb128 0x6
	.string	"ti"
	.byte	0x15
	.byte	0x3e
	.long	0xc77
	.byte	0x18
	.byte	0
	.uleb128 0x4
	.long	.LASF1948
	.byte	0xa8
	.byte	0x15
	.byte	0x32
	.long	0x4890
	.uleb128 0x8
	.long	.LASF1949
	.byte	0x15
	.byte	0x35
	.long	0xc77
	.byte	0
	.uleb128 0x8
	.long	.LASF1950
	.byte	0x15
	.byte	0x35
	.long	0xc77
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1951
	.byte	0x15
	.byte	0x38
	.long	0xc77
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1952
	.byte	0x15
	.byte	0x3f
	.long	0x4796
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1953
	.byte	0x15
	.byte	0x3f
	.long	0x4796
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1954
	.byte	0x15
	.byte	0x46
	.long	0x48a9
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1955
	.byte	0x15
	.byte	0x49
	.long	0x48c5
	.byte	0x60
	.uleb128 0x8
	.long	.LASF1956
	.byte	0x15
	.byte	0x4c
	.long	0x48d6
	.byte	0x68
	.uleb128 0x8
	.long	.LASF1957
	.byte	0x15
	.byte	0x4f
	.long	0x48d6
	.byte	0x70
	.uleb128 0x8
	.long	.LASF1958
	.byte	0x15
	.byte	0x52
	.long	0x48c5
	.byte	0x78
	.uleb128 0x8
	.long	.LASF1959
	.byte	0x15
	.byte	0x56
	.long	0x48ec
	.byte	0x80
	.uleb128 0x8
	.long	.LASF1960
	.byte	0x15
	.byte	0x59
	.long	0x48f3
	.byte	0x88
	.uleb128 0x8
	.long	.LASF1961
	.byte	0x15
	.byte	0x5c
	.long	0x48f3
	.byte	0x90
	.uleb128 0x8
	.long	.LASF1962
	.byte	0x15
	.byte	0x5f
	.long	0x4909
	.byte	0x98
	.uleb128 0x8
	.long	.LASF1963
	.byte	0x15
	.byte	0x62
	.long	0x4909
	.byte	0xa0
	.byte	0
	.uleb128 0x27
	.long	0x2f2c
	.long	0x48a9
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0xa10
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4890
	.uleb128 0x2c
	.long	0x48bf
	.uleb128 0x28
	.long	0x48bf
	.uleb128 0x28
	.long	0xa19
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xa71
	.uleb128 0x3
	.byte	0x8
	.long	0x48af
	.uleb128 0x2c
	.long	0x48d6
	.uleb128 0x28
	.long	0x48bf
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x48cb
	.uleb128 0x2c
	.long	0x48ec
	.uleb128 0x28
	.long	0xc77
	.uleb128 0x28
	.long	0xa10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x48dc
	.uleb128 0x2d
	.uleb128 0x3
	.byte	0x8
	.long	0x48f2
	.uleb128 0x2c
	.long	0x4909
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x48f9
	.uleb128 0x4
	.long	.LASF1964
	.byte	0x48
	.byte	0x15
	.byte	0x66
	.long	0x4988
	.uleb128 0x8
	.long	.LASF1965
	.byte	0x15
	.byte	0x6b
	.long	0x49a6
	.byte	0
	.uleb128 0x8
	.long	.LASF1966
	.byte	0x15
	.byte	0x6f
	.long	0x49c0
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1967
	.byte	0x15
	.byte	0x74
	.long	0x49cb
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1968
	.byte	0x15
	.byte	0x78
	.long	0x49ef
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1969
	.byte	0x15
	.byte	0x7b
	.long	0x4a0a
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1970
	.byte	0x15
	.byte	0x7e
	.long	0x4a20
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1971
	.byte	0x15
	.byte	0x82
	.long	0x4a49
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1972
	.byte	0x15
	.byte	0x83
	.long	0x4a49
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1973
	.byte	0x15
	.byte	0x8a
	.long	0x4a63
	.byte	0x40
	.byte	0
	.uleb128 0x27
	.long	0x328
	.long	0x49a6
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4988
	.uleb128 0x27
	.long	0x328
	.long	0x49c0
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x49ac
	.uleb128 0x2e
	.long	0x328
	.uleb128 0x3
	.byte	0x8
	.long	0x49c6
	.uleb128 0x27
	.long	0x328
	.long	0x49ef
	.uleb128 0x28
	.long	0x48bf
	.uleb128 0x28
	.long	0x328
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x49d1
	.uleb128 0x2c
	.long	0x4a0a
	.uleb128 0x28
	.long	0x48bf
	.uleb128 0x28
	.long	0x328
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x49f5
	.uleb128 0x2c
	.long	0x4a20
	.uleb128 0x28
	.long	0x48bf
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4a10
	.uleb128 0x27
	.long	0x328
	.long	0x4a49
	.uleb128 0x28
	.long	0x48bf
	.uleb128 0x28
	.long	0x328
	.uleb128 0x28
	.long	0x16ab
	.uleb128 0x28
	.long	0xcb6
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4a26
	.uleb128 0x27
	.long	0x2d
	.long	0x4a63
	.uleb128 0x28
	.long	0x328
	.uleb128 0x28
	.long	0x2d
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4a4f
	.uleb128 0x24
	.long	.LASF1974
	.value	0x158
	.byte	0x15
	.byte	0x2f
	.long	0x4b43
	.uleb128 0x8
	.long	.LASF1948
	.byte	0x15
	.byte	0x63
	.long	0x47cf
	.byte	0
	.uleb128 0x8
	.long	.LASF1964
	.byte	0x15
	.byte	0x8b
	.long	0x490f
	.byte	0xa8
	.uleb128 0x8
	.long	.LASF1975
	.byte	0x15
	.byte	0x8e
	.long	0x4b57
	.byte	0xf0
	.uleb128 0x8
	.long	.LASF1976
	.byte	0x15
	.byte	0x91
	.long	0x4b57
	.byte	0xf8
	.uleb128 0x2a
	.long	.LASF1977
	.byte	0x15
	.byte	0x94
	.long	0x4b5d
	.value	0x100
	.uleb128 0x2a
	.long	.LASF1978
	.byte	0x15
	.byte	0x99
	.long	0x4b7c
	.value	0x108
	.uleb128 0x2a
	.long	.LASF1979
	.byte	0x15
	.byte	0x9c
	.long	0x4b8d
	.value	0x110
	.uleb128 0x2a
	.long	.LASF1980
	.byte	0x15
	.byte	0x9f
	.long	0x4ba3
	.value	0x118
	.uleb128 0x2a
	.long	.LASF1981
	.byte	0x15
	.byte	0xa3
	.long	0x4bb8
	.value	0x120
	.uleb128 0x2a
	.long	.LASF1982
	.byte	0x15
	.byte	0xa7
	.long	0x4bb8
	.value	0x128
	.uleb128 0x2a
	.long	.LASF1983
	.byte	0x15
	.byte	0xaa
	.long	0x48f3
	.value	0x130
	.uleb128 0x2a
	.long	.LASF1984
	.byte	0x15
	.byte	0xad
	.long	0x4be1
	.value	0x138
	.uleb128 0x2a
	.long	.LASF1985
	.byte	0x15
	.byte	0xb3
	.long	0x4c00
	.value	0x140
	.uleb128 0x2a
	.long	.LASF1986
	.byte	0x15
	.byte	0xb6
	.long	0x2f2c
	.value	0x148
	.uleb128 0x2a
	.long	.LASF1987
	.byte	0x15
	.byte	0xba
	.long	0x2f2c
	.value	0x149
	.uleb128 0x2a
	.long	.LASF1988
	.byte	0x15
	.byte	0xbe
	.long	0x4c0b
	.value	0x150
	.byte	0
	.uleb128 0x27
	.long	0x123
	.long	0x4b57
	.uleb128 0x28
	.long	0x123
	.uleb128 0x28
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4b43
	.uleb128 0x3
	.byte	0x8
	.long	0x4b63
	.uleb128 0xc
	.long	0x2eb9
	.uleb128 0x27
	.long	0x328
	.long	0x4b7c
	.uleb128 0x28
	.long	0x123
	.uleb128 0x28
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4b68
	.uleb128 0x2c
	.long	0x4b8d
	.uleb128 0x28
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4b82
	.uleb128 0x2c
	.long	0x4ba3
	.uleb128 0x28
	.long	0x123
	.uleb128 0x28
	.long	0x2f56
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4b93
	.uleb128 0x27
	.long	0x2f2c
	.long	0x4bb8
	.uleb128 0x28
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4ba9
	.uleb128 0x27
	.long	0x2d
	.long	0x4be1
	.uleb128 0x28
	.long	0x123
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0xcc3
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4bbe
	.uleb128 0x27
	.long	0xa10
	.long	0x4c00
	.uleb128 0x28
	.long	0x123
	.uleb128 0x28
	.long	0xc77
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4be7
	.uleb128 0x2e
	.long	0x2f2c
	.uleb128 0x3
	.byte	0x8
	.long	0x4c06
	.uleb128 0xe
	.long	0x2d
	.long	0x4c27
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.uleb128 0xf
	.long	0x33f
	.byte	0x2
	.byte	0
	.uleb128 0x13
	.long	.LASF1989
	.byte	0x48
	.byte	0x1
	.value	0x23d
	.long	0x4cc4
	.uleb128 0x14
	.long	.LASF94
	.byte	0x1
	.value	0x23f
	.long	0x328
	.byte	0
	.uleb128 0x14
	.long	.LASF1990
	.byte	0x1
	.value	0x240
	.long	0x328
	.byte	0x4
	.uleb128 0x14
	.long	.LASF1991
	.byte	0x1
	.value	0x241
	.long	0x328
	.byte	0x8
	.uleb128 0x14
	.long	.LASF1992
	.byte	0x1
	.value	0x242
	.long	0xa19
	.byte	0x10
	.uleb128 0x14
	.long	.LASF1993
	.byte	0x1
	.value	0x243
	.long	0x328
	.byte	0x18
	.uleb128 0x14
	.long	.LASF1994
	.byte	0x1
	.value	0x244
	.long	0x328
	.byte	0x1c
	.uleb128 0x14
	.long	.LASF1995
	.byte	0x1
	.value	0x245
	.long	0x328
	.byte	0x20
	.uleb128 0x14
	.long	.LASF1996
	.byte	0x1
	.value	0x247
	.long	0xa19
	.byte	0x28
	.uleb128 0x14
	.long	.LASF1997
	.byte	0x1
	.value	0x249
	.long	0xa19
	.byte	0x30
	.uleb128 0x14
	.long	.LASF1998
	.byte	0x1
	.value	0x24a
	.long	0xa19
	.byte	0x38
	.uleb128 0x14
	.long	.LASF1999
	.byte	0x1
	.value	0x24b
	.long	0xa19
	.byte	0x40
	.byte	0
	.uleb128 0x13
	.long	.LASF2000
	.byte	0x20
	.byte	0x1
	.value	0x2b2
	.long	0x4d06
	.uleb128 0x14
	.long	.LASF2001
	.byte	0x1
	.value	0x2b4
	.long	0x2d
	.byte	0
	.uleb128 0x14
	.long	.LASF583
	.byte	0x1
	.value	0x2b4
	.long	0x2d
	.byte	0x8
	.uleb128 0x14
	.long	.LASF2002
	.byte	0x1
	.value	0x2b4
	.long	0x2d
	.byte	0x10
	.uleb128 0x14
	.long	.LASF549
	.byte	0x1
	.value	0x2b5
	.long	0xa19
	.byte	0x18
	.byte	0
	.uleb128 0x11
	.long	.LASF2003
	.byte	0x4
	.byte	0x1
	.value	0x2e4
	.long	0x4d50
	.uleb128 0x12
	.long	.LASF2004
	.sleb128 0
	.uleb128 0x12
	.long	.LASF2005
	.sleb128 1
	.uleb128 0x12
	.long	.LASF2006
	.sleb128 2
	.uleb128 0x12
	.long	.LASF2007
	.sleb128 3
	.uleb128 0x12
	.long	.LASF2008
	.sleb128 4
	.uleb128 0x12
	.long	.LASF2009
	.sleb128 5
	.uleb128 0x12
	.long	.LASF2010
	.sleb128 6
	.uleb128 0x12
	.long	.LASF2011
	.sleb128 7
	.uleb128 0x12
	.long	.LASF2012
	.sleb128 8
	.uleb128 0x12
	.long	.LASF2013
	.sleb128 9
	.byte	0
	.uleb128 0x13
	.long	.LASF2014
	.byte	0x20
	.byte	0x1
	.value	0x27ff
	.long	0x4d78
	.uleb128 0x14
	.long	.LASF2015
	.byte	0x1
	.value	0x2801
	.long	0x4d78
	.byte	0
	.uleb128 0x14
	.long	.LASF2016
	.byte	0x1
	.value	0x2802
	.long	0x328
	.byte	0x18
	.byte	0
	.uleb128 0xe
	.long	0x2d
	.long	0x4d88
	.uleb128 0xf
	.long	0x33f
	.byte	0x2
	.byte	0
	.uleb128 0x23
	.byte	0x20
	.byte	0x1
	.value	0x27fd
	.long	0x4d9e
	.uleb128 0xa
	.long	.LASF2017
	.byte	0x1
	.value	0x2803
	.long	0x4d50
	.byte	0
	.uleb128 0x13
	.long	.LASF2018
	.byte	0x20
	.byte	0x1
	.value	0x2a98
	.long	0x4dfa
	.uleb128 0x14
	.long	.LASF2019
	.byte	0x1
	.value	0x2a9a
	.long	0x351b
	.byte	0
	.uleb128 0x14
	.long	.LASF2020
	.byte	0x1
	.value	0x2a9b
	.long	0x4dfa
	.byte	0x4
	.uleb128 0x14
	.long	.LASF983
	.byte	0x1
	.value	0x2a9c
	.long	0x2f22
	.byte	0x8
	.uleb128 0x14
	.long	.LASF0
	.byte	0x1
	.value	0x2a9d
	.long	0x4dff
	.byte	0x10
	.uleb128 0x14
	.long	.LASF2021
	.byte	0x1
	.value	0x2a9e
	.long	0x4e04
	.byte	0x14
	.uleb128 0x14
	.long	.LASF2022
	.byte	0x1
	.value	0x2a9f
	.long	0x351b
	.byte	0x18
	.byte	0
	.uleb128 0xc
	.long	0x35f9
	.uleb128 0xc
	.long	0x4f5
	.uleb128 0xc
	.long	0xe81
	.uleb128 0x2f
	.long	.LASF2044
	.byte	0x1
	.value	0x343
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.uleb128 0x1
	.byte	0x9c
	.long	0x4f95
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x345
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.string	"ptt"
	.byte	0x28
	.byte	0x1
	.value	0x349
	.long	0x4eb7
	.uleb128 0x14
	.long	.LASF2023
	.byte	0x1
	.value	0x34b
	.long	0x4f95
	.byte	0
	.uleb128 0x14
	.long	.LASF2024
	.byte	0x1
	.value	0x34c
	.long	0x323
	.byte	0x8
	.uleb128 0x14
	.long	.LASF2025
	.byte	0x1
	.value	0x34d
	.long	0x323
	.byte	0xc
	.uleb128 0x14
	.long	.LASF2026
	.byte	0x1
	.value	0x34e
	.long	0x323
	.byte	0x10
	.uleb128 0x14
	.long	.LASF2027
	.byte	0x1
	.value	0x34f
	.long	0x323
	.byte	0x14
	.uleb128 0x14
	.long	.LASF2028
	.byte	0x1
	.value	0x350
	.long	0x323
	.byte	0x18
	.uleb128 0x14
	.long	.LASF2029
	.byte	0x1
	.value	0x351
	.long	0x323
	.byte	0x1c
	.uleb128 0x14
	.long	.LASF2030
	.byte	0x1
	.value	0x352
	.long	0x323
	.byte	0x20
	.uleb128 0x14
	.long	.LASF2031
	.byte	0x1
	.value	0x353
	.long	0x323
	.byte	0x24
	.byte	0
	.uleb128 0x32
	.long	.LASF2032
	.byte	0x1
	.value	0x355
	.long	0x4fb0
	.uleb128 0x9
	.byte	0x3
	.quad	processor_target_table.14698
	.uleb128 0x32
	.long	.LASF2033
	.byte	0x1
	.value	0x360
	.long	0x4fb5
	.uleb128 0x9
	.byte	0x3
	.quad	cpu_names.14699
	.uleb128 0x31
	.string	"pta"
	.byte	0x10
	.byte	0x1
	.value	0x361
	.long	0x4f1d
	.uleb128 0x14
	.long	.LASF983
	.byte	0x1
	.value	0x363
	.long	0x2f22
	.byte	0
	.uleb128 0x14
	.long	.LASF2034
	.byte	0x1
	.value	0x364
	.long	0x4fba
	.byte	0x8
	.uleb128 0x14
	.long	.LASF587
	.byte	0x1
	.value	0x36d
	.long	0x4f17
	.byte	0xc
	.uleb128 0xc
	.long	0x4f1d
	.byte	0
	.uleb128 0x11
	.long	.LASF2035
	.byte	0x4
	.byte	0x1
	.value	0x365
	.long	0x4f50
	.uleb128 0x12
	.long	.LASF2036
	.sleb128 1
	.uleb128 0x12
	.long	.LASF2037
	.sleb128 2
	.uleb128 0x12
	.long	.LASF2038
	.sleb128 4
	.uleb128 0x12
	.long	.LASF2039
	.sleb128 8
	.uleb128 0x12
	.long	.LASF2040
	.sleb128 16
	.uleb128 0x12
	.long	.LASF2041
	.sleb128 64
	.byte	0
	.uleb128 0x32
	.long	.LASF2042
	.byte	0x1
	.value	0x36f
	.long	0x4fcf
	.uleb128 0x9
	.byte	0x3
	.quad	processor_alias_table.14711
	.uleb128 0x32
	.long	.LASF2043
	.byte	0x1
	.value	0x38b
	.long	0x323
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x33
	.quad	.LBB2
	.quad	.LBE2-.LBB2
	.uleb128 0x30
	.string	"p"
	.byte	0x1
	.value	0x4ad
	.long	0xa64
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4f9b
	.uleb128 0xc
	.long	0x1de
	.uleb128 0xe
	.long	0x4e34
	.long	0x4fb0
	.uleb128 0xf
	.long	0x33f
	.byte	0x6
	.byte	0
	.uleb128 0xc
	.long	0x4fa0
	.uleb128 0xc
	.long	0xca6
	.uleb128 0xc
	.long	0x37e
	.uleb128 0xe
	.long	0x4ee3
	.long	0x4fcf
	.uleb128 0xf
	.long	0x33f
	.byte	0x11
	.byte	0
	.uleb128 0xc
	.long	0x4fbf
	.uleb128 0x34
	.long	.LASF2045
	.byte	0x1
	.value	0x4b6
	.quad	.LFB3
	.quad	.LFE3-.LFB3
	.uleb128 0x1
	.byte	0x9c
	.long	0x5011
	.uleb128 0x35
	.long	.LASF2046
	.byte	0x1
	.value	0x4b7
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x35
	.long	.LASF554
	.byte	0x1
	.value	0x4b8
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x36
	.long	.LASF2050
	.byte	0x1
	.value	0x4e0
	.long	0x123
	.quad	.LFB4
	.quad	.LFE4-.LFB4
	.uleb128 0x1
	.byte	0x9c
	.long	0x507f
	.uleb128 0x35
	.long	.LASF2047
	.byte	0x1
	.value	0x4e1
	.long	0x2f56
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF983
	.byte	0x1
	.value	0x4e2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.long	.LASF2048
	.byte	0x1
	.value	0x4e3
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF587
	.byte	0x1
	.value	0x4e4
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.long	.LASF2049
	.byte	0x1
	.value	0x4e5
	.long	0x2f5c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x36
	.long	.LASF2051
	.byte	0x1
	.value	0x4fd
	.long	0x123
	.quad	.LFB5
	.quad	.LFE5-.LFB5
	.uleb128 0x1
	.byte	0x9c
	.long	0x510f
	.uleb128 0x35
	.long	.LASF2047
	.byte	0x1
	.value	0x4fe
	.long	0x2f56
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF983
	.byte	0x1
	.value	0x4ff
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.long	.LASF2048
	.byte	0x1
	.value	0x500
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF587
	.byte	0x1
	.value	0x501
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x35
	.long	.LASF2049
	.byte	0x1
	.value	0x502
	.long	0x2f5c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x33
	.quad	.LBB3
	.quad	.LBE3-.LBB3
	.uleb128 0x30
	.string	"cst"
	.byte	0x1
	.value	0x50f
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x36
	.long	.LASF2052
	.byte	0x1
	.value	0x58b
	.long	0x328
	.quad	.LFB6
	.quad	.LFE6-.LFB6
	.uleb128 0x1
	.byte	0x9c
	.long	0x515f
	.uleb128 0x35
	.long	.LASF2053
	.byte	0x1
	.value	0x58c
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF2054
	.byte	0x1
	.value	0x58d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2055
	.byte	0x1
	.value	0x590
	.long	0x2f22
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x37
	.long	.LASF2059
	.byte	0x1
	.value	0x5ae
	.long	0x328
	.quad	.LFB7
	.quad	.LFE7-.LFB7
	.uleb128 0x1
	.byte	0x9c
	.long	0x5200
	.uleb128 0x35
	.long	.LASF2056
	.byte	0x1
	.value	0x5af
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2057
	.byte	0x1
	.value	0x5b0
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.long	.LASF554
	.byte	0x1
	.value	0x5b1
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.string	"rtd"
	.byte	0x1
	.value	0x5b3
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x33
	.quad	.LBB4
	.quad	.LBE4-.LBB4
	.uleb128 0x32
	.long	.LASF94
	.byte	0x1
	.value	0x5c7
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x33
	.quad	.LBB5
	.quad	.LBE5-.LBB5
	.uleb128 0x32
	.long	.LASF2058
	.byte	0x1
	.value	0x5cb
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF2060
	.byte	0x1
	.value	0x5dc
	.long	0x2f2c
	.quad	.LFB8
	.quad	.LFE8-.LFB8
	.uleb128 0x1
	.byte	0x9c
	.long	0x523f
	.uleb128 0x35
	.long	.LASF95
	.byte	0x1
	.value	0x5dd
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x5df
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x2f
	.long	.LASF2061
	.byte	0x1
	.value	0x5f3
	.quad	.LFB9
	.quad	.LFE9-.LFB9
	.uleb128 0x1
	.byte	0x9c
	.long	0x52e1
	.uleb128 0x39
	.string	"cum"
	.byte	0x1
	.value	0x5f4
	.long	0x52e1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF2062
	.byte	0x1
	.value	0x5f5
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF2063
	.byte	0x1
	.value	0x5f6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2064
	.byte	0x1
	.value	0x5f8
	.long	0x4e9
	.uleb128 0x9
	.byte	0x3
	.quad	zero_cum.14765
	.uleb128 0x32
	.long	.LASF2065
	.byte	0x1
	.value	0x5f9
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2066
	.byte	0x1
	.value	0x5f9
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x33
	.quad	.LBB6
	.quad	.LBE6-.LBB6
	.uleb128 0x32
	.long	.LASF2058
	.byte	0x1
	.value	0x610
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4e9
	.uleb128 0x3a
	.long	.LASF2067
	.byte	0x1
	.value	0x63c
	.long	0x4d06
	.quad	.LFB10
	.quad	.LFE10-.LFB10
	.uleb128 0x1
	.byte	0x9c
	.long	0x5328
	.uleb128 0x35
	.long	.LASF2068
	.byte	0x1
	.value	0x63d
	.long	0x4d06
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x35
	.long	.LASF2069
	.byte	0x1
	.value	0x63d
	.long	0x4d06
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x36
	.long	.LASF2070
	.byte	0x1
	.value	0x66c
	.long	0x328
	.quad	.LFB11
	.quad	.LFE11-.LFB11
	.uleb128 0x1
	.byte	0x9c
	.long	0x5621
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x66d
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -180
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x66e
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x35
	.long	.LASF2071
	.byte	0x1
	.value	0x66f
	.long	0x5621
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x35
	.long	.LASF2072
	.byte	0x1
	.value	0x670
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x32
	.long	.LASF2073
	.byte	0x1
	.value	0x672
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x32
	.long	.LASF93
	.byte	0x1
	.value	0x674
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x5637
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14840
	.uleb128 0x3c
	.quad	.LBB7
	.quad	.LBE7-.LBB7
	.long	0x55fe
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x678
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x32
	.long	.LASF2074
	.byte	0x1
	.value	0x679
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2075
	.byte	0x1
	.value	0x67a
	.long	0x563c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3c
	.quad	.LBB8
	.quad	.LBE8-.LBB8
	.long	0x54b7
	.uleb128 0x32
	.long	.LASF2076
	.byte	0x1
	.value	0x691
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2077
	.byte	0x1
	.value	0x692
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x693
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x33
	.quad	.LBB9
	.quad	.LBE9-.LBB9
	.uleb128 0x32
	.long	.LASF988
	.byte	0x1
	.value	0x697
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x30
	.string	"num"
	.byte	0x1
	.value	0x698
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF553
	.byte	0x1
	.value	0x699
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x32
	.long	.LASF24
	.byte	0x1
	.value	0x69a
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x33
	.quad	.LBB10
	.quad	.LBE10-.LBB10
	.uleb128 0x30
	.string	"pos"
	.byte	0x1
	.value	0x6a3
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3c
	.quad	.LBB11
	.quad	.LBE11-.LBB11
	.long	0x54ff
	.uleb128 0x30
	.string	"num"
	.byte	0x1
	.value	0x6ae
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x33
	.quad	.LBB12
	.quad	.LBE12-.LBB12
	.uleb128 0x30
	.string	"pos"
	.byte	0x1
	.value	0x6c7
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.byte	0
	.byte	0
	.uleb128 0x3c
	.quad	.LBB13
	.quad	.LBE13-.LBB13
	.long	0x5525
	.uleb128 0x30
	.string	"num"
	.byte	0x1
	.value	0x6d3
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.byte	0
	.uleb128 0x3c
	.quad	.LBB14
	.quad	.LBE14-.LBB14
	.long	0x55db
	.uleb128 0x32
	.long	.LASF2076
	.byte	0x1
	.value	0x6e9
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2077
	.byte	0x1
	.value	0x6ea
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x6eb
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x33
	.quad	.LBB15
	.quad	.LBE15-.LBB15
	.uleb128 0x32
	.long	.LASF988
	.byte	0x1
	.value	0x6ef
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.string	"num"
	.byte	0x1
	.value	0x6f0
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x32
	.long	.LASF553
	.byte	0x1
	.value	0x6f1
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF24
	.byte	0x1
	.value	0x6f2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x33
	.quad	.LBB16
	.quad	.LBE16-.LBB16
	.uleb128 0x30
	.string	"pos"
	.byte	0x1
	.value	0x6fb
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB17
	.quad	.LBE17-.LBB17
	.uleb128 0x30
	.string	"num"
	.byte	0x1
	.value	0x705
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB18
	.quad	.LBE18-.LBB18
	.uleb128 0x32
	.long	.LASF2078
	.byte	0x1
	.value	0x72d
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4d06
	.uleb128 0xe
	.long	0xa6a
	.long	0x5637
	.uleb128 0xf
	.long	0x33f
	.byte	0x11
	.byte	0
	.uleb128 0xc
	.long	0x5627
	.uleb128 0xe
	.long	0x4d06
	.long	0x564c
	.uleb128 0xf
	.long	0x33f
	.byte	0x3
	.byte	0
	.uleb128 0x36
	.long	.LASF2079
	.byte	0x1
	.value	0x77f
	.long	0x328
	.quad	.LFB12
	.quad	.LFE12-.LFB12
	.uleb128 0x1
	.byte	0x9c
	.long	0x56eb
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x780
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x781
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF2080
	.byte	0x1
	.value	0x783
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF2081
	.byte	0x1
	.value	0x782
	.long	0xcb6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF97
	.byte	0x1
	.value	0x782
	.long	0xcb6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2082
	.byte	0x1
	.value	0x785
	.long	0x563c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.string	"n"
	.byte	0x1
	.value	0x786
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x56fb
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14890
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x56fb
	.uleb128 0xf
	.long	0x33f
	.byte	0x10
	.byte	0
	.uleb128 0xc
	.long	0x56eb
	.uleb128 0x36
	.long	.LASF2084
	.byte	0x1
	.value	0x7a8
	.long	0x2d
	.quad	.LFB13
	.quad	.LFE13-.LFB13
	.uleb128 0x1
	.byte	0x9c
	.long	0x5840
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x7a9
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x7aa
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x35
	.long	.LASF2080
	.byte	0x1
	.value	0x7ab
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x35
	.long	.LASF2085
	.byte	0x1
	.value	0x7ac
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x35
	.long	.LASF2086
	.byte	0x1
	.value	0x7ac
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x35
	.long	.LASF2087
	.byte	0x1
	.value	0x7ad
	.long	0xca0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x35
	.long	.LASF98
	.byte	0x1
	.value	0x7ae
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x32
	.long	.LASF2088
	.byte	0x1
	.value	0x7b0
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.long	.LASF2073
	.byte	0x1
	.value	0x7b1
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2082
	.byte	0x1
	.value	0x7b3
	.long	0x563c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.string	"n"
	.byte	0x1
	.value	0x7b4
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x7b5
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2089
	.byte	0x1
	.value	0x7b6
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x32
	.long	.LASF2090
	.byte	0x1
	.value	0x7b7
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x32
	.long	.LASF2091
	.byte	0x1
	.value	0x7b7
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x30
	.string	"exp"
	.byte	0x1
	.value	0x7b8
	.long	0x5840
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.string	"ret"
	.byte	0x1
	.value	0x7b9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x5850
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14924
	.byte	0
	.uleb128 0xe
	.long	0x2d
	.long	0x5850
	.uleb128 0xf
	.long	0x33f
	.byte	0x3
	.byte	0
	.uleb128 0xc
	.long	0xc67
	.uleb128 0x2f
	.long	.LASF2092
	.byte	0x1
	.value	0x834
	.quad	.LFB14
	.quad	.LFE14-.LFB14
	.uleb128 0x1
	.byte	0x9c
	.long	0x58ff
	.uleb128 0x39
	.string	"cum"
	.byte	0x1
	.value	0x835
	.long	0x52e1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x836
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x837
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2093
	.byte	0x1
	.value	0x838
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2073
	.byte	0x1
	.value	0x83a
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF93
	.byte	0x1
	.value	0x83c
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x33
	.quad	.LBB19
	.quad	.LBE19-.LBB19
	.uleb128 0x32
	.long	.LASF2081
	.byte	0x1
	.value	0x844
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF97
	.byte	0x1
	.value	0x844
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2094
	.byte	0x1
	.value	0x87c
	.long	0x2d
	.quad	.LFB15
	.quad	.LFE15-.LFB15
	.uleb128 0x1
	.byte	0x9c
	.long	0x598c
	.uleb128 0x39
	.string	"cum"
	.byte	0x1
	.value	0x87d
	.long	0x52e1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x87e
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x87f
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2093
	.byte	0x1
	.value	0x880
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.string	"ret"
	.byte	0x1
	.value	0x882
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2073
	.byte	0x1
	.value	0x883
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF93
	.byte	0x1
	.value	0x885
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.uleb128 0x37
	.long	.LASF2095
	.byte	0x1
	.value	0x8c3
	.long	0x328
	.quad	.LFB16
	.quad	.LFE16-.LFB16
	.uleb128 0x1
	.byte	0x9c
	.long	0x59dc
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x8c4
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x8c5
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF555
	.byte	0x1
	.value	0x8c7
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF2096
	.byte	0x1
	.value	0x8d7
	.long	0x2f2c
	.quad	.LFB17
	.quad	.LFE17-.LFB17
	.uleb128 0x1
	.byte	0x9c
	.long	0x5a0e
	.uleb128 0x35
	.long	.LASF95
	.byte	0x1
	.value	0x8d8
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF2097
	.byte	0x1
	.value	0x8ea
	.long	0x2d
	.quad	.LFB18
	.quad	.LFE18-.LFB18
	.uleb128 0x1
	.byte	0x9c
	.long	0x5a61
	.uleb128 0x35
	.long	.LASF2098
	.byte	0x1
	.value	0x8eb
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x33
	.quad	.LBB20
	.quad	.LBE20-.LBB20
	.uleb128 0x30
	.string	"ret"
	.byte	0x1
	.value	0x8ef
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2099
	.byte	0x1
	.value	0x8fe
	.long	0x328
	.quad	.LFB19
	.quad	.LFE19-.LFB19
	.uleb128 0x1
	.byte	0x9c
	.long	0x5ab1
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x8ff
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2091
	.byte	0x1
	.value	0x901
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2090
	.byte	0x1
	.value	0x901
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF2100
	.byte	0x1
	.value	0x917
	.long	0x2d
	.quad	.LFB20
	.quad	.LFE20-.LFB20
	.uleb128 0x1
	.byte	0x9c
	.long	0x5ae3
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x918
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF2101
	.byte	0x1
	.value	0x931
	.long	0x123
	.quad	.LFB21
	.quad	.LFE21-.LFB21
	.uleb128 0x1
	.byte	0x9c
	.long	0x5b62
	.uleb128 0x32
	.long	.LASF2102
	.byte	0x1
	.value	0x933
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2103
	.byte	0x1
	.value	0x933
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2104
	.byte	0x1
	.value	0x933
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2105
	.byte	0x1
	.value	0x933
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2106
	.byte	0x1
	.value	0x933
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2107
	.byte	0x1
	.value	0x933
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x2f
	.long	.LASF2108
	.byte	0x1
	.value	0x966
	.quad	.LFB22
	.quad	.LFE22-.LFB22
	.uleb128 0x1
	.byte	0x9c
	.long	0x5c7c
	.uleb128 0x39
	.string	"cum"
	.byte	0x1
	.value	0x967
	.long	0x52e1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x968
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x969
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x35
	.long	.LASF2109
	.byte	0x1
	.value	0x96a
	.long	0xcb6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x35
	.long	.LASF2110
	.byte	0x1
	.value	0x96b
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF2111
	.byte	0x1
	.value	0x96e
	.long	0x4e9
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2112
	.byte	0x1
	.value	0x96f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x30
	.string	"mem"
	.byte	0x1
	.value	0x96f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x970
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2114
	.byte	0x1
	.value	0x971
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2115
	.byte	0x1
	.value	0x972
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2116
	.byte	0x1
	.value	0x973
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.string	"set"
	.byte	0x1
	.value	0x974
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.long	.LASF2062
	.byte	0x1
	.value	0x975
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2117
	.byte	0x1
	.value	0x976
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x977
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.byte	0
	.uleb128 0x2f
	.long	.LASF2118
	.byte	0x1
	.value	0x9ca
	.quad	.LFB23
	.quad	.LFE23-.LFB23
	.uleb128 0x1
	.byte	0x9c
	.long	0x5d83
	.uleb128 0x35
	.long	.LASF2117
	.byte	0x1
	.value	0x9cb
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x35
	.long	.LASF2119
	.byte	0x1
	.value	0x9cc
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x35
	.long	.LASF2120
	.byte	0x1
	.value	0x9cd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.long	.LASF93
	.byte	0x1
	.value	0x9cf
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2121
	.byte	0x1
	.value	0x9cf
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2122
	.byte	0x1
	.value	0x9cf
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2102
	.byte	0x1
	.value	0x9d0
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2103
	.byte	0x1
	.value	0x9d0
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2104
	.byte	0x1
	.value	0x9d0
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF2105
	.byte	0x1
	.value	0x9d0
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.string	"gpr"
	.byte	0x1
	.value	0x9d1
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.string	"fpr"
	.byte	0x1
	.value	0x9d1
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.string	"ovf"
	.byte	0x1
	.value	0x9d1
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.string	"sav"
	.byte	0x1
	.value	0x9d1
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.string	"t"
	.byte	0x1
	.value	0x9d1
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.uleb128 0x37
	.long	.LASF2123
	.byte	0x1
	.value	0xa0c
	.long	0x2d
	.quad	.LFB24
	.quad	.LFE24-.LFB24
	.uleb128 0x1
	.byte	0x9c
	.long	0x609a
	.uleb128 0x35
	.long	.LASF2119
	.byte	0x1
	.value	0xa0d
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0xa0d
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x32
	.long	.LASF2087
	.byte	0x1
	.value	0xa0f
	.long	0x609a
	.uleb128 0x9
	.byte	0x3
	.quad	intreg.15043
	.uleb128 0x32
	.long	.LASF2102
	.byte	0x1
	.value	0xa10
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x32
	.long	.LASF2103
	.byte	0x1
	.value	0xa10
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x32
	.long	.LASF2104
	.byte	0x1
	.value	0xa10
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x32
	.long	.LASF2105
	.byte	0x1
	.value	0xa10
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x30
	.string	"gpr"
	.byte	0x1
	.value	0xa11
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x30
	.string	"fpr"
	.byte	0x1
	.value	0xa11
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x30
	.string	"ovf"
	.byte	0x1
	.value	0xa11
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x30
	.string	"sav"
	.byte	0x1
	.value	0xa11
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x30
	.string	"t"
	.byte	0x1
	.value	0xa11
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x32
	.long	.LASF554
	.byte	0x1
	.value	0xa12
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -244
	.uleb128 0x32
	.long	.LASF2124
	.byte	0x1
	.value	0xa12
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x32
	.long	.LASF2125
	.byte	0x1
	.value	0xa13
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2126
	.byte	0x1
	.value	0xa13
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x32
	.long	.LASF2127
	.byte	0x1
	.value	0xa14
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x30
	.string	"r"
	.byte	0x1
	.value	0xa14
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF2128
	.byte	0x1
	.value	0xa15
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x3c
	.quad	.LBB21
	.quad	.LBE21-.LBB21
	.long	0x6078
	.uleb128 0x32
	.long	.LASF2129
	.byte	0x1
	.value	0xa35
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x32
	.long	.LASF2130
	.byte	0x1
	.value	0xa35
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x32
	.long	.LASF2091
	.byte	0x1
	.value	0xa36
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x32
	.long	.LASF2090
	.byte	0x1
	.value	0xa36
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -268
	.uleb128 0x32
	.long	.LASF2131
	.byte	0x1
	.value	0xa37
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x3c
	.quad	.LBB22
	.quad	.LBE22-.LBB22
	.long	0x5f82
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0xa4a
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -260
	.uleb128 0x33
	.quad	.LBB23
	.quad	.LBE23-.LBB23
	.uleb128 0x32
	.long	.LASF2132
	.byte	0x1
	.value	0xa4e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.byte	0
	.uleb128 0x3c
	.quad	.LBB24
	.quad	.LBE24-.LBB24
	.long	0x5fc8
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0xa56
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x33
	.quad	.LBB25
	.quad	.LBE25-.LBB25
	.uleb128 0x32
	.long	.LASF2132
	.byte	0x1
	.value	0xa5a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB26
	.quad	.LBE26-.LBB26
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0xa8f
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -252
	.uleb128 0x30
	.string	"mem"
	.byte	0x1
	.value	0xa90
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x33
	.quad	.LBB27
	.quad	.LBE27-.LBB27
	.uleb128 0x32
	.long	.LASF2132
	.byte	0x1
	.value	0xa9a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.string	"reg"
	.byte	0x1
	.value	0xa9b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0xa9c
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -236
	.uleb128 0x32
	.long	.LASF2133
	.byte	0x1
	.value	0xa9d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x32
	.long	.LASF2134
	.byte	0x1
	.value	0xa9e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2135
	.byte	0x1
	.value	0xa9f
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x32
	.long	.LASF2136
	.byte	0x1
	.value	0xaa0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB28
	.quad	.LBE28-.LBB28
	.uleb128 0x32
	.long	.LASF555
	.byte	0x1
	.value	0xad3
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x328
	.long	0x60aa
	.uleb128 0xf
	.long	0x33f
	.byte	0x5
	.byte	0
	.uleb128 0x37
	.long	.LASF2137
	.byte	0x1
	.value	0xaed
	.long	0x328
	.quad	.LFB25
	.quad	.LFE25-.LFB25
	.uleb128 0x1
	.byte	0x9c
	.long	0x60ea
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xaee
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xaef
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2138
	.byte	0x1
	.value	0xafc
	.long	0x328
	.quad	.LFB26
	.quad	.LFE26-.LFB26
	.uleb128 0x1
	.byte	0x9c
	.long	0x612a
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xafd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xafe
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2139
	.byte	0x1
	.value	0xb0a
	.long	0x328
	.quad	.LFB27
	.quad	.LFE27-.LFB27
	.uleb128 0x1
	.byte	0x9c
	.long	0x616a
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xb0b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xb0c
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2140
	.byte	0x1
	.value	0xb18
	.long	0x328
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.uleb128 0x1
	.byte	0x9c
	.long	0x61aa
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xb19
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xb1a
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2141
	.byte	0x1
	.value	0xb28
	.long	0x328
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.uleb128 0x1
	.byte	0x9c
	.long	0x61ea
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xb29
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xb2a
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2142
	.byte	0x1
	.value	0xb36
	.long	0x328
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.uleb128 0x1
	.byte	0x9c
	.long	0x622a
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xb37
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xb38
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2143
	.byte	0x1
	.value	0xb42
	.long	0x328
	.quad	.LFB31
	.quad	.LFE31-.LFB31
	.uleb128 0x1
	.byte	0x9c
	.long	0x626a
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xb43
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xb44
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x38
	.long	.LASF2144
	.byte	0x1
	.value	0xb4c
	.long	0x328
	.quad	.LFB32
	.quad	.LFE32-.LFB32
	.uleb128 0x1
	.byte	0x9c
	.long	0x62aa
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xb4d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xb4e
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x38
	.long	.LASF2145
	.byte	0x1
	.value	0xb58
	.long	0x328
	.quad	.LFB33
	.quad	.LFE33-.LFB33
	.uleb128 0x1
	.byte	0x9c
	.long	0x62ea
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xb59
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xb5a
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x38
	.long	.LASF2146
	.byte	0x1
	.value	0xb63
	.long	0x328
	.quad	.LFB34
	.quad	.LFE34-.LFB34
	.uleb128 0x1
	.byte	0x9c
	.long	0x6329
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xb64
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xb65
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF2147
	.byte	0x1
	.value	0xb91
	.long	0x328
	.quad	.LFB35
	.quad	.LFE35-.LFB35
	.uleb128 0x1
	.byte	0x9c
	.long	0x6368
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xb92
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xb93
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x36
	.long	.LASF2148
	.byte	0x1
	.value	0xbae
	.long	0x328
	.quad	.LFB36
	.quad	.LFE36-.LFB36
	.uleb128 0x1
	.byte	0x9c
	.long	0x63a8
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xbaf
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xbb0
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2149
	.byte	0x1
	.value	0xbd3
	.long	0x328
	.quad	.LFB37
	.quad	.LFE37-.LFB37
	.uleb128 0x1
	.byte	0x9c
	.long	0x63e8
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xbd4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xbd5
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x38
	.long	.LASF2150
	.byte	0x1
	.value	0xbf3
	.long	0x328
	.quad	.LFB38
	.quad	.LFE38-.LFB38
	.uleb128 0x1
	.byte	0x9c
	.long	0x6428
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xbf4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xbf5
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x38
	.long	.LASF2151
	.byte	0x1
	.value	0xc01
	.long	0x328
	.quad	.LFB39
	.quad	.LFE39-.LFB39
	.uleb128 0x1
	.byte	0x9c
	.long	0x6467
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc02
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc03
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF2152
	.byte	0x1
	.value	0xc09
	.long	0x328
	.quad	.LFB40
	.quad	.LFE40-.LFB40
	.uleb128 0x1
	.byte	0x9c
	.long	0x64a6
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc0a
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc0b
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF2153
	.byte	0x1
	.value	0xc13
	.long	0x328
	.quad	.LFB41
	.quad	.LFE41-.LFB41
	.uleb128 0x1
	.byte	0x9c
	.long	0x64e5
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc14
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc15
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF2154
	.byte	0x1
	.value	0xc1e
	.long	0x328
	.quad	.LFB42
	.quad	.LFE42-.LFB42
	.uleb128 0x1
	.byte	0x9c
	.long	0x6524
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc1f
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc20
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF2155
	.byte	0x1
	.value	0xc2d
	.long	0x328
	.quad	.LFB43
	.quad	.LFE43-.LFB43
	.uleb128 0x1
	.byte	0x9c
	.long	0x6564
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc2e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc2f
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2156
	.byte	0x1
	.value	0xc3f
	.long	0x328
	.quad	.LFB44
	.quad	.LFE44-.LFB44
	.uleb128 0x1
	.byte	0x9c
	.long	0x65b0
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc40
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc41
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.string	"t"
	.byte	0x1
	.value	0xc43
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF2157
	.byte	0x1
	.value	0xc4d
	.long	0x328
	.quad	.LFB45
	.quad	.LFE45-.LFB45
	.uleb128 0x1
	.byte	0x9c
	.long	0x65ef
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc4e
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc4f
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF2158
	.byte	0x1
	.value	0xc58
	.long	0x328
	.quad	.LFB46
	.quad	.LFE46-.LFB46
	.uleb128 0x1
	.byte	0x9c
	.long	0x663b
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc59
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc5a
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.string	"t"
	.byte	0x1
	.value	0xc5c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF2159
	.byte	0x1
	.value	0xc6f
	.long	0x328
	.quad	.LFB47
	.quad	.LFE47-.LFB47
	.uleb128 0x1
	.byte	0x9c
	.long	0x6687
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc70
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc71
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.string	"t"
	.byte	0x1
	.value	0xc73
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF2160
	.byte	0x1
	.value	0xc81
	.long	0x328
	.quad	.LFB48
	.quad	.LFE48-.LFB48
	.uleb128 0x1
	.byte	0x9c
	.long	0x66c6
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc82
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc83
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF2161
	.byte	0x1
	.value	0xc8f
	.long	0x328
	.quad	.LFB49
	.quad	.LFE49-.LFB49
	.uleb128 0x1
	.byte	0x9c
	.long	0x6705
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc90
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc91
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF2162
	.byte	0x1
	.value	0xc9d
	.long	0x328
	.quad	.LFB50
	.quad	.LFE50-.LFB50
	.uleb128 0x1
	.byte	0x9c
	.long	0x6754
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xc9e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xc9f
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0xca1
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF2163
	.byte	0x1
	.value	0xcbc
	.long	0x328
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x67e1
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xcbd
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xcbe
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF2164
	.byte	0x1
	.value	0xcc0
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0xcc1
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x33
	.quad	.LBB29
	.quad	.LBE29-.LBB29
	.uleb128 0x32
	.long	.LASF2165
	.byte	0x1
	.value	0xcca
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF2166
	.byte	0x1
	.value	0xcca
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2167
	.byte	0x1
	.value	0xce7
	.long	0x328
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x686e
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xce8
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xce9
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF2164
	.byte	0x1
	.value	0xceb
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0xcec
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x33
	.quad	.LBB30
	.quad	.LBE30-.LBB30
	.uleb128 0x32
	.long	.LASF2165
	.byte	0x1
	.value	0xcf4
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF2166
	.byte	0x1
	.value	0xcf4
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF2168
	.byte	0x1
	.value	0xd0c
	.long	0x328
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x68ad
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xd0d
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xd0e
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF2169
	.byte	0x1
	.value	0xd26
	.long	0x328
	.quad	.LFB54
	.quad	.LFE54-.LFB54
	.uleb128 0x1
	.byte	0x9c
	.long	0x68ec
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xd27
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xd28
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF2170
	.byte	0x1
	.value	0xd34
	.long	0x328
	.quad	.LFB55
	.quad	.LFE55-.LFB55
	.uleb128 0x1
	.byte	0x9c
	.long	0x693a
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xd35
	.long	0x2d
	.uleb128 0x1
	.byte	0x53
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xd36
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.long	.LASF95
	.byte	0x1
	.value	0xd38
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x38
	.long	.LASF2171
	.byte	0x1
	.value	0xd49
	.long	0x328
	.quad	.LFB56
	.quad	.LFE56-.LFB56
	.uleb128 0x1
	.byte	0x9c
	.long	0x6979
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xd4a
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xd4b
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF2172
	.byte	0x1
	.value	0xd5e
	.long	0x328
	.quad	.LFB57
	.quad	.LFE57-.LFB57
	.uleb128 0x1
	.byte	0x9c
	.long	0x69b8
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xd5f
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xd60
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF2173
	.byte	0x1
	.value	0xd66
	.long	0x328
	.quad	.LFB58
	.quad	.LFE58-.LFB58
	.uleb128 0x1
	.byte	0x9c
	.long	0x69f7
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xd67
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xd68
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF2174
	.byte	0x1
	.value	0xd6e
	.long	0x328
	.quad	.LFB59
	.quad	.LFE59-.LFB59
	.uleb128 0x1
	.byte	0x9c
	.long	0x6a37
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xd6f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xd70
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2175
	.byte	0x1
	.value	0xd7a
	.long	0x328
	.quad	.LFB60
	.quad	.LFE60-.LFB60
	.uleb128 0x1
	.byte	0x9c
	.long	0x6a99
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xd7b
	.long	0x2d
	.uleb128 0x1
	.byte	0x53
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xd7c
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF2176
	.byte	0x1
	.value	0xd7e
	.long	0x4cc4
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x6aa9
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15299
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x6aa9
	.uleb128 0xf
	.long	0x33f
	.byte	0x1b
	.byte	0
	.uleb128 0xc
	.long	0x6a99
	.uleb128 0x37
	.long	.LASF2177
	.byte	0x1
	.value	0xd90
	.long	0x328
	.quad	.LFB61
	.quad	.LFE61-.LFB61
	.uleb128 0x1
	.byte	0x9c
	.long	0x6aee
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xd91
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xd92
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2178
	.byte	0x1
	.value	0xda8
	.long	0x328
	.quad	.LFB62
	.quad	.LFE62-.LFB62
	.uleb128 0x1
	.byte	0x9c
	.long	0x6b2d
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xda9
	.long	0x2d
	.uleb128 0x1
	.byte	0x53
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xdaa
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x37
	.long	.LASF2179
	.byte	0x1
	.value	0xdb5
	.long	0x328
	.quad	.LFB63
	.quad	.LFE63-.LFB63
	.uleb128 0x1
	.byte	0x9c
	.long	0x6b8f
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xdb6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0xdb7
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x32
	.long	.LASF2176
	.byte	0x1
	.value	0xdb9
	.long	0x4cc4
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x6b9f
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15313
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x6b9f
	.uleb128 0xf
	.long	0x33f
	.byte	0xf
	.byte	0
	.uleb128 0xc
	.long	0x6b8f
	.uleb128 0x38
	.long	.LASF2180
	.byte	0x1
	.value	0xded
	.long	0x328
	.quad	.LFB64
	.quad	.LFE64-.LFB64
	.uleb128 0x1
	.byte	0x9c
	.long	0x6bd4
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0xdee
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF2181
	.byte	0x1
	.value	0xdff
	.long	0x328
	.quad	.LFB65
	.quad	.LFE65-.LFB65
	.uleb128 0x1
	.byte	0x9c
	.long	0x6c04
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0xe00
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF2182
	.byte	0x1
	.value	0xe0a
	.long	0x328
	.quad	.LFB66
	.quad	.LFE66-.LFB66
	.uleb128 0x1
	.byte	0x9c
	.long	0x6c6d
	.uleb128 0x39
	.string	"op"
	.byte	0x1
	.value	0xe0b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.string	"fmt"
	.byte	0x1
	.value	0xe0d
	.long	0xc77
	.uleb128 0x1
	.byte	0x5d
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0xe0e
	.long	0x328
	.uleb128 0x1
	.byte	0x53
	.uleb128 0x33
	.quad	.LBB31
	.quad	.LBE31-.LBB31
	.uleb128 0x30
	.string	"j"
	.byte	0x1
	.value	0xe18
	.long	0x328
	.uleb128 0x1
	.byte	0x5c
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2183
	.byte	0x1
	.value	0xe33
	.long	0x328
	.quad	.LFB67
	.quad	.LFE67-.LFB67
	.uleb128 0x1
	.byte	0x9c
	.long	0x6ca0
	.uleb128 0x32
	.long	.LASF1992
	.byte	0x1
	.value	0xe35
	.long	0x4c27
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.uleb128 0x37
	.long	.LASF2184
	.byte	0x1
	.value	0xe4b
	.long	0x328
	.quad	.LFB68
	.quad	.LFE68-.LFB68
	.uleb128 0x1
	.byte	0x9c
	.long	0x6d36
	.uleb128 0x35
	.long	.LASF951
	.byte	0x1
	.value	0xe4c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x3c
	.quad	.LBB32
	.quad	.LBE32-.LBB32
	.long	0x6cf6
	.uleb128 0x30
	.string	"val"
	.byte	0x1
	.value	0xe58
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x33
	.quad	.LBB33
	.quad	.LBE33-.LBB33
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0xe6e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.string	"op2"
	.byte	0x1
	.value	0xe6f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF553
	.byte	0x1
	.value	0xe70
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2185
	.byte	0x1
	.value	0xea3
	.long	0x328
	.quad	.LFB69
	.quad	.LFE69-.LFB69
	.uleb128 0x1
	.byte	0x9c
	.long	0x6d98
	.uleb128 0x35
	.long	.LASF951
	.byte	0x1
	.value	0xea4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x33
	.quad	.LBB34
	.quad	.LBE34-.LBB34
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0xec2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.string	"op2"
	.byte	0x1
	.value	0xec3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2677
	.byte	0x1
	.value	0xef3
	.long	0x328
	.quad	.LFB70
	.quad	.LFE70-.LFB70
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3e
	.long	.LASF2448
	.byte	0x1
	.value	0xf0b
	.quad	.LFB71
	.quad	.LFE71-.LFB71
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x2f
	.long	.LASF2186
	.byte	0x1
	.value	0xf16
	.quad	.LFB72
	.quad	.LFE72-.LFB72
	.uleb128 0x1
	.byte	0x9c
	.long	0x6e0d
	.uleb128 0x35
	.long	.LASF2187
	.byte	0x1
	.value	0xf17
	.long	0x48bf
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2188
	.byte	0x1
	.value	0xf19
	.long	0x6e0d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0xe
	.long	0x2d
	.long	0x6e1d
	.uleb128 0xf
	.long	0x33f
	.byte	0x1
	.byte	0
	.uleb128 0x2f
	.long	.LASF2189
	.byte	0x1
	.value	0xf47
	.quad	.LFB73
	.quad	.LFE73-.LFB73
	.uleb128 0x1
	.byte	0x9c
	.long	0x6e6d
	.uleb128 0x32
	.long	.LASF2190
	.byte	0x1
	.value	0xf49
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2191
	.byte	0x1
	.value	0xf49
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x6e6d
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15379
	.byte	0
	.uleb128 0xc
	.long	0x5627
	.uleb128 0x36
	.long	.LASF2192
	.byte	0x1
	.value	0xf63
	.long	0x2d
	.quad	.LFB74
	.quad	.LFE74-.LFB74
	.uleb128 0x1
	.byte	0x9c
	.long	0x6ea4
	.uleb128 0x39
	.string	"arg"
	.byte	0x1
	.value	0xf64
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3a
	.long	.LASF2193
	.byte	0x1
	.value	0xf6f
	.long	0x328
	.quad	.LFB75
	.quad	.LFE75-.LFB75
	.uleb128 0x1
	.byte	0x9c
	.long	0x6f25
	.uleb128 0x35
	.long	.LASF95
	.byte	0x1
	.value	0xf70
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x35
	.long	.LASF2194
	.byte	0x1
	.value	0xf71
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x33
	.quad	.LBB35
	.quad	.LBE35-.LBB35
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0xf7b
	.long	0xa10
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x33
	.quad	.LBB36
	.quad	.LBE36-.LBB36
	.uleb128 0x32
	.long	.LASF2195
	.byte	0x1
	.value	0xf7e
	.long	0xa10
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x36
	.long	.LASF2196
	.byte	0x1
	.value	0xf8f
	.long	0x328
	.quad	.LFB76
	.quad	.LFE76-.LFB76
	.uleb128 0x1
	.byte	0x9c
	.long	0x6f66
	.uleb128 0x32
	.long	.LASF94
	.byte	0x1
	.value	0xf91
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF95
	.byte	0x1
	.value	0xf92
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF2197
	.byte	0x1
	.value	0xf9e
	.long	0xa19
	.quad	.LFB77
	.quad	.LFE77-.LFB77
	.uleb128 0x1
	.byte	0x9c
	.long	0x6fcb
	.uleb128 0x35
	.long	.LASF2198
	.byte	0x1
	.value	0xf9f
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x39
	.string	"to"
	.byte	0x1
	.value	0xfa0
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF1992
	.byte	0x1
	.value	0xfa2
	.long	0x4c27
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x6fcb
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15403
	.byte	0
	.uleb128 0xc
	.long	0xc90
	.uleb128 0x3f
	.long	.LASF2201
	.byte	0x1
	.value	0xfba
	.quad	.LFB78
	.quad	.LFE78-.LFB78
	.uleb128 0x1
	.byte	0x9c
	.long	0x705c
	.uleb128 0x35
	.long	.LASF1992
	.byte	0x1
	.value	0xfbb
	.long	0x705c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2199
	.byte	0x1
	.value	0xfbd
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF1044
	.byte	0x1
	.value	0xfbe
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LASF553
	.byte	0x1
	.value	0xfbf
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2200
	.byte	0x1
	.value	0xfc0
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF554
	.byte	0x1
	.value	0xfc1
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x7072
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15412
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4c27
	.uleb128 0xe
	.long	0xa6a
	.long	0x7072
	.uleb128 0xf
	.long	0x33f
	.byte	0x19
	.byte	0
	.uleb128 0xc
	.long	0x7062
	.uleb128 0x3f
	.long	.LASF2202
	.byte	0x1
	.value	0x102c
	.quad	.LFB79
	.quad	.LFE79-.LFB79
	.uleb128 0x1
	.byte	0x9c
	.long	0x70b3
	.uleb128 0x32
	.long	.LASF95
	.byte	0x1
	.value	0x102e
	.long	0x328
	.uleb128 0x1
	.byte	0x53
	.uleb128 0x32
	.long	.LASF1309
	.byte	0x1
	.value	0x102f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x3f
	.long	.LASF2203
	.byte	0x1
	.value	0x103c
	.quad	.LFB80
	.quad	.LFE80-.LFB80
	.uleb128 0x1
	.byte	0x9c
	.long	0x710e
	.uleb128 0x35
	.long	.LASF941
	.byte	0x1
	.value	0x103d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF553
	.byte	0x1
	.value	0x103e
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF95
	.byte	0x1
	.value	0x1040
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LASF1309
	.byte	0x1
	.value	0x1041
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x2f
	.long	.LASF2204
	.byte	0x1
	.value	0x1051
	.quad	.LFB81
	.quad	.LFE81-.LFB81
	.uleb128 0x1
	.byte	0x9c
	.long	0x71c2
	.uleb128 0x32
	.long	.LASF1309
	.byte	0x1
	.value	0x1053
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.long	.LASF2205
	.byte	0x1
	.value	0x1054
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x32
	.long	.LASF1992
	.byte	0x1
	.value	0x1057
	.long	0x4c27
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2206
	.byte	0x1
	.value	0x1058
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x32
	.long	.LASF2207
	.byte	0x1
	.value	0x1059
	.long	0xa19
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x71d2
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15438
	.uleb128 0x33
	.quad	.LBB37
	.quad	.LBE37-.LBB37
	.uleb128 0x32
	.long	.LASF2208
	.byte	0x1
	.value	0x1088
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x30
	.string	"sym"
	.byte	0x1
	.value	0x1088
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x71d2
	.uleb128 0xf
	.long	0x33f
	.byte	0x14
	.byte	0
	.uleb128 0xc
	.long	0x71c2
	.uleb128 0x3f
	.long	.LASF2209
	.byte	0x1
	.value	0x10b2
	.quad	.LFB82
	.quad	.LFE82-.LFB82
	.uleb128 0x1
	.byte	0x9c
	.long	0x7232
	.uleb128 0x35
	.long	.LASF941
	.byte	0x1
	.value	0x10b3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF553
	.byte	0x1
	.value	0x10b4
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x35
	.long	.LASF2194
	.byte	0x1
	.value	0x10b5
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF95
	.byte	0x1
	.value	0x10b7
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x2f
	.long	.LASF2210
	.byte	0x1
	.value	0x10c6
	.quad	.LFB83
	.quad	.LFE83-.LFB83
	.uleb128 0x1
	.byte	0x9c
	.long	0x7321
	.uleb128 0x35
	.long	.LASF2211
	.byte	0x1
	.value	0x10c7
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x32
	.long	.LASF95
	.byte	0x1
	.value	0x10c9
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF2212
	.byte	0x1
	.value	0x10ca
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x32
	.long	.LASF1992
	.byte	0x1
	.value	0x10cb
	.long	0x4c27
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF553
	.byte	0x1
	.value	0x10cc
	.long	0xa19
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x7321
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15457
	.uleb128 0x3c
	.quad	.LBB38
	.quad	.LBE38-.LBB38
	.long	0x72e8
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x10fc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x30
	.string	"sa"
	.byte	0x1
	.value	0x10fc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.byte	0
	.uleb128 0x40
	.long	.Ldebug_ranges0+0
	.uleb128 0x32
	.long	.LASF2213
	.byte	0x1
	.value	0x1151
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x33
	.quad	.LBB40
	.quad	.LBE40-.LBB40
	.uleb128 0x30
	.string	"ecx"
	.byte	0x1
	.value	0x1159
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x71c2
	.uleb128 0x3a
	.long	.LASF2214
	.byte	0x1
	.value	0x1171
	.long	0x328
	.quad	.LFB84
	.quad	.LFE84-.LFB84
	.uleb128 0x1
	.byte	0x9c
	.long	0x745f
	.uleb128 0x35
	.long	.LASF2215
	.byte	0x1
	.value	0x1172
	.long	0x2d
	.uleb128 0x1
	.byte	0x50
	.uleb128 0x39
	.string	"out"
	.byte	0x1
	.value	0x1173
	.long	0x745f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2001
	.byte	0x1
	.value	0x1175
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF583
	.byte	0x1
	.value	0x1176
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2002
	.byte	0x1
	.value	0x1177
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF549
	.byte	0x1
	.value	0x1178
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2216
	.byte	0x1
	.value	0x1179
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2217
	.byte	0x1
	.value	0x117a
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x3c
	.quad	.LBB42
	.quad	.LBE42-.LBB42
	.long	0x7418
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x1180
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x1181
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2218
	.byte	0x1
	.value	0x1182
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2219
	.byte	0x1
	.value	0x1183
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.byte	0
	.uleb128 0x3c
	.quad	.LBB43
	.quad	.LBE43-.LBB43
	.long	0x743d
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x11ac
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x33
	.quad	.LBB44
	.quad	.LBE44-.LBB44
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x11c9
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4cc4
	.uleb128 0x37
	.long	.LASF2220
	.byte	0x1
	.value	0x11f2
	.long	0x328
	.quad	.LFB85
	.quad	.LFE85-.LFB85
	.uleb128 0x1
	.byte	0x9c
	.long	0x74c7
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0x11f3
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2176
	.byte	0x1
	.value	0x11f5
	.long	0x4cc4
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2023
	.byte	0x1
	.value	0x11f6
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x74c7
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15484
	.byte	0
	.uleb128 0xc
	.long	0x5627
	.uleb128 0x38
	.long	.LASF2221
	.byte	0x1
	.value	0x122b
	.long	0x2d
	.quad	.LFB86
	.quad	.LFE86-.LFB86
	.uleb128 0x1
	.byte	0x9c
	.long	0x750b
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0x122c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2222
	.byte	0x1
	.value	0x122e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF2223
	.byte	0x1
	.value	0x1263
	.long	0x328
	.quad	.LFB87
	.quad	.LFE87-.LFB87
	.uleb128 0x1
	.byte	0x9c
	.long	0x755b
	.uleb128 0x35
	.long	.LASF2002
	.byte	0x1
	.value	0x1264
	.long	0x2d
	.uleb128 0x1
	.byte	0x53
	.uleb128 0x33
	.quad	.LBB45
	.quad	.LBE45-.LBB45
	.uleb128 0x30
	.string	"x"
	.byte	0x1
	.value	0x126a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2224
	.byte	0x1
	.value	0x12ab
	.long	0x328
	.quad	.LFB88
	.quad	.LFE88-.LFB88
	.uleb128 0x1
	.byte	0x9c
	.long	0x762b
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x12ac
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x35
	.long	.LASF2215
	.byte	0x1
	.value	0x12ad
	.long	0x2d
	.uleb128 0x1
	.byte	0x53
	.uleb128 0x35
	.long	.LASF2225
	.byte	0x1
	.value	0x12ae
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2176
	.byte	0x1
	.value	0x12b0
	.long	0x4cc4
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2001
	.byte	0x1
	.value	0x12b1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF583
	.byte	0x1
	.value	0x12b1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF2002
	.byte	0x1
	.value	0x12b1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF549
	.byte	0x1
	.value	0x12b2
	.long	0xa19
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2226
	.byte	0x1
	.value	0x12b3
	.long	0xc77
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2227
	.byte	0x1
	.value	0x12b4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x41
	.long	.LASF2316
	.byte	0x1
	.value	0x1365
	.quad	.L1165
	.byte	0
	.uleb128 0x36
	.long	.LASF2228
	.byte	0x1
	.value	0x1371
	.long	0xa19
	.quad	.LFB89
	.quad	.LFE89-.LFB89
	.uleb128 0x1
	.byte	0x9c
	.long	0x7664
	.uleb128 0x30
	.string	"set"
	.byte	0x1
	.value	0x1373
	.long	0xa19
	.uleb128 0x9
	.byte	0x3
	.quad	set.15510
	.byte	0
	.uleb128 0x37
	.long	.LASF2229
	.byte	0x1
	.value	0x138c
	.long	0x2d
	.quad	.LFB90
	.quad	.LFE90-.LFB90
	.uleb128 0x1
	.byte	0x9c
	.long	0x7717
	.uleb128 0x35
	.long	.LASF2230
	.byte	0x1
	.value	0x138d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.string	"reg"
	.byte	0x1
	.value	0x138e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2215
	.byte	0x1
	.value	0x1390
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.string	"new"
	.byte	0x1
	.value	0x1391
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2001
	.byte	0x1
	.value	0x1392
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x7727
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15518
	.uleb128 0x33
	.quad	.LBB46
	.quad	.LBE46-.LBB46
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x13e2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x13e2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x7727
	.uleb128 0xf
	.long	0x33f
	.byte	0x16
	.byte	0
	.uleb128 0xc
	.long	0x7717
	.uleb128 0x37
	.long	.LASF2231
	.byte	0x1
	.value	0x1429
	.long	0x2d
	.quad	.LFB91
	.quad	.LFE91-.LFB91
	.uleb128 0x1
	.byte	0x9c
	.long	0x7853
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0x142a
	.long	0x2d
	.uleb128 0x1
	.byte	0x53
	.uleb128 0x35
	.long	.LASF2232
	.byte	0x1
	.value	0x142b
	.long	0x2d
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x142c
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x32
	.long	.LASF2233
	.byte	0x1
	.value	0x142e
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.string	"log"
	.byte	0x1
	.value	0x142f
	.long	0xa10
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x3c
	.quad	.LBB47
	.quad	.LBE47-.LBB47
	.long	0x77bd
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1460
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x3c
	.quad	.LBB48
	.quad	.LBE48-.LBB48
	.long	0x77f2
	.uleb128 0x32
	.long	.LASF2234
	.byte	0x1
	.value	0x147b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2235
	.byte	0x1
	.value	0x147c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x3c
	.quad	.LBB49
	.quad	.LBE49-.LBB49
	.long	0x7824
	.uleb128 0x32
	.long	.LASF2236
	.byte	0x1
	.value	0x14b4
	.long	0x2d
	.uleb128 0x1
	.byte	0x5c
	.uleb128 0x30
	.string	"val"
	.byte	0x1
	.value	0x14b5
	.long	0x2d
	.uleb128 0x1
	.byte	0x5d
	.byte	0
	.uleb128 0x33
	.quad	.LBB50
	.quad	.LBE50-.LBB50
	.uleb128 0x32
	.long	.LASF2236
	.byte	0x1
	.value	0x14bf
	.long	0x2d
	.uleb128 0x1
	.byte	0x5c
	.uleb128 0x30
	.string	"val"
	.byte	0x1
	.value	0x14c0
	.long	0x2d
	.uleb128 0x1
	.byte	0x5d
	.byte	0
	.byte	0
	.uleb128 0x3f
	.long	.LASF2237
	.byte	0x1
	.value	0x14d2
	.quad	.LFB92
	.quad	.LFE92-.LFB92
	.uleb128 0x1
	.byte	0x9c
	.long	0x78c3
	.uleb128 0x35
	.long	.LASF2187
	.byte	0x1
	.value	0x14d3
	.long	0x48bf
	.uleb128 0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0x14d4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x14d5
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -308
	.uleb128 0x30
	.string	"buf"
	.byte	0x1
	.value	0x14d7
	.long	0x78c3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x78e3
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15542
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x78d3
	.uleb128 0xf
	.long	0x33f
	.byte	0xff
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x78e3
	.uleb128 0xf
	.long	0x33f
	.byte	0x15
	.byte	0
	.uleb128 0xc
	.long	0x78d3
	.uleb128 0x2f
	.long	.LASF2238
	.byte	0x1
	.value	0x1546
	.quad	.LFB93
	.quad	.LFE93-.LFB93
	.uleb128 0x1
	.byte	0x9c
	.long	0x7923
	.uleb128 0x35
	.long	.LASF2187
	.byte	0x1
	.value	0x1547
	.long	0x48bf
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0x1548
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x37
	.long	.LASF2239
	.byte	0x1
	.value	0x155d
	.long	0x2d
	.quad	.LFB94
	.quad	.LFE94-.LFB94
	.uleb128 0x1
	.byte	0x9c
	.long	0x796f
	.uleb128 0x35
	.long	.LASF2240
	.byte	0x1
	.value	0x155e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.string	"x"
	.byte	0x1
	.value	0x1560
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.string	"y"
	.byte	0x1
	.value	0x1560
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3f
	.long	.LASF2241
	.byte	0x1
	.value	0x15a5
	.quad	.LFB95
	.quad	.LFE95-.LFB95
	.uleb128 0x1
	.byte	0x9c
	.long	0x7a2a
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x15a6
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x15a7
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2242
	.byte	0x1
	.value	0x15a8
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x39
	.string	"fp"
	.byte	0x1
	.value	0x15a8
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.long	.LASF2187
	.byte	0x1
	.value	0x15a9
	.long	0x48bf
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2243
	.byte	0x1
	.value	0x15ab
	.long	0xc77
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x7a3a
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15579
	.uleb128 0x33
	.quad	.LBB51
	.quad	.LBE51-.LBB51
	.uleb128 0x32
	.long	.LASF2165
	.byte	0x1
	.value	0x15af
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2166
	.byte	0x1
	.value	0x15af
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x7a3a
	.uleb128 0xf
	.long	0x33f
	.byte	0x12
	.byte	0
	.uleb128 0xc
	.long	0x7a2a
	.uleb128 0x2f
	.long	.LASF2244
	.byte	0x1
	.value	0x15ff
	.quad	.LFB96
	.quad	.LFE96-.LFB96
	.uleb128 0x1
	.byte	0x9c
	.long	0x7a9c
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0x1600
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1601
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x35
	.long	.LASF2187
	.byte	0x1
	.value	0x1602
	.long	0x48bf
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x7aac
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15599
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x7aac
	.uleb128 0xf
	.long	0x33f
	.byte	0x9
	.byte	0
	.uleb128 0xc
	.long	0x7a9c
	.uleb128 0x2f
	.long	.LASF2245
	.byte	0x1
	.value	0x1672
	.quad	.LFB97
	.quad	.LFE97-.LFB97
	.uleb128 0x1
	.byte	0x9c
	.long	0x7ca3
	.uleb128 0x35
	.long	.LASF2187
	.byte	0x1
	.value	0x1673
	.long	0x48bf
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0x1674
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1675
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x7cb3
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15624
	.uleb128 0x3c
	.quad	.LBB52
	.quad	.LBE52-.LBB52
	.long	0x7b88
	.uleb128 0x30
	.string	"x"
	.byte	0x1
	.value	0x1753
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x33
	.quad	.LBB53
	.quad	.LBE53-.LBB53
	.uleb128 0x32
	.long	.LASF2246
	.byte	0x1
	.value	0x175b
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x33
	.quad	.LBB54
	.quad	.LBE54-.LBB54
	.uleb128 0x32
	.long	.LASF2247
	.byte	0x1
	.value	0x1760
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x32
	.long	.LASF2248
	.byte	0x1
	.value	0x1761
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3c
	.quad	.LBB55
	.quad	.LBE55-.LBB55
	.long	0x7bae
	.uleb128 0x32
	.long	.LASF554
	.byte	0x1
	.value	0x1781
	.long	0xc77
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.byte	0
	.uleb128 0x3c
	.quad	.LBB56
	.quad	.LBE56-.LBB56
	.long	0x7c00
	.uleb128 0x30
	.string	"r"
	.byte	0x1
	.value	0x17a7
	.long	0x1f8a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x30
	.string	"l"
	.byte	0x1
	.value	0x17a8
	.long	0xa19
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x33
	.quad	.LBB57
	.quad	.LBE57-.LBB57
	.uleb128 0x30
	.string	"u"
	.byte	0x1
	.value	0x17aa
	.long	0x1f95
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.byte	0
	.uleb128 0x3c
	.quad	.LBB58
	.quad	.LBE58-.LBB58
	.long	0x7c53
	.uleb128 0x30
	.string	"r"
	.byte	0x1
	.value	0x17b5
	.long	0x1f8a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF2249
	.byte	0x1
	.value	0x17b6
	.long	0x7cb8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x33
	.quad	.LBB59
	.quad	.LBE59-.LBB59
	.uleb128 0x30
	.string	"u"
	.byte	0x1
	.value	0x17b8
	.long	0x1f95
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB60
	.quad	.LBE60-.LBB60
	.uleb128 0x30
	.string	"r"
	.byte	0x1
	.value	0x17c0
	.long	0x1f8a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF2249
	.byte	0x1
	.value	0x17c1
	.long	0x7cb8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x33
	.quad	.LBB61
	.quad	.LBE61-.LBB61
	.uleb128 0x30
	.string	"u"
	.byte	0x1
	.value	0x17c3
	.long	0x1f95
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x7cb3
	.uleb128 0xf
	.long	0x33f
	.byte	0xd
	.byte	0
	.uleb128 0xc
	.long	0x7ca3
	.uleb128 0xe
	.long	0xa6a
	.long	0x7cc8
	.uleb128 0xf
	.long	0x33f
	.byte	0x1d
	.byte	0
	.uleb128 0x2f
	.long	.LASF2250
	.byte	0x1
	.value	0x17e5
	.quad	.LFB98
	.quad	.LFE98-.LFB98
	.uleb128 0x1
	.byte	0x9c
	.long	0x7d89
	.uleb128 0x35
	.long	.LASF2187
	.byte	0x1
	.value	0x17e6
	.long	0x48bf
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x35
	.long	.LASF2215
	.byte	0x1
	.value	0x17e7
	.long	0x2d
	.uleb128 0x1
	.byte	0x53
	.uleb128 0x32
	.long	.LASF2176
	.byte	0x1
	.value	0x17e9
	.long	0x4cc4
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2001
	.byte	0x1
	.value	0x17ea
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF583
	.byte	0x1
	.value	0x17ea
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2002
	.byte	0x1
	.value	0x17ea
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF549
	.byte	0x1
	.value	0x17eb
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x7d89
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15703
	.uleb128 0x33
	.quad	.LBB62
	.quad	.LBE62-.LBB62
	.uleb128 0x32
	.long	.LASF553
	.byte	0x1
	.value	0x1828
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x78d3
	.uleb128 0x2f
	.long	.LASF2251
	.byte	0x1
	.value	0x1863
	.quad	.LFB99
	.quad	.LFE99-.LFB99
	.uleb128 0x1
	.byte	0x9c
	.long	0x7e0b
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x1864
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.string	"num"
	.byte	0x1
	.value	0x1865
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x35
	.long	.LASF2252
	.byte	0x1
	.value	0x1866
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2253
	.byte	0x1
	.value	0x1866
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x33
	.quad	.LBB63
	.quad	.LBE63-.LBB63
	.uleb128 0x30
	.string	"op"
	.byte	0x1
	.value	0x186a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x2f
	.long	.LASF2254
	.byte	0x1
	.value	0x1885
	.quad	.LFB100
	.quad	.LFE100-.LFB100
	.uleb128 0x1
	.byte	0x9c
	.long	0x7e88
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x1886
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.string	"num"
	.byte	0x1
	.value	0x1887
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x35
	.long	.LASF2252
	.byte	0x1
	.value	0x1888
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2253
	.byte	0x1
	.value	0x1888
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x33
	.quad	.LBB64
	.quad	.LBE64-.LBB64
	.uleb128 0x30
	.string	"op"
	.byte	0x1
	.value	0x188c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2255
	.byte	0x1
	.value	0x18af
	.long	0xc77
	.quad	.LFB101
	.quad	.LFE101-.LFB101
	.uleb128 0x1
	.byte	0x9c
	.long	0x7f40
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x18b0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x18b1
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.string	"buf"
	.byte	0x1
	.value	0x18b3
	.long	0x7cb8
	.uleb128 0x9
	.byte	0x3
	.quad	buf.15729
	.uleb128 0x30
	.string	"p"
	.byte	0x1
	.value	0x18b4
	.long	0xc77
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2256
	.byte	0x1
	.value	0x18b5
	.long	0xc77
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2257
	.byte	0x1
	.value	0x18b6
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x7f40
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15739
	.uleb128 0x33
	.quad	.LBB65
	.quad	.LBE65-.LBB65
	.uleb128 0x32
	.long	.LASF2236
	.byte	0x1
	.value	0x1903
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x71c2
	.uleb128 0x2f
	.long	.LASF2258
	.byte	0x1
	.value	0x1981
	.quad	.LFB102
	.quad	.LFE102-.LFB102
	.uleb128 0x1
	.byte	0x9c
	.long	0x7f91
	.uleb128 0x35
	.long	.LASF2259
	.byte	0x1
	.value	0x1982
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2260
	.byte	0x1
	.value	0x1982
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.string	"reg"
	.byte	0x1
	.value	0x1984
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF2261
	.byte	0x1
	.value	0x1995
	.long	0xc77
	.quad	.LFB103
	.quad	.LFE103-.LFB103
	.uleb128 0x1
	.byte	0x9c
	.long	0x8003
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x1996
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x1997
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2262
	.byte	0x1
	.value	0x1999
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2263
	.byte	0x1
	.value	0x199a
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x8003
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15758
	.byte	0
	.uleb128 0xc
	.long	0x56eb
	.uleb128 0x37
	.long	.LASF2264
	.byte	0x1
	.value	0x19b7
	.long	0xc77
	.quad	.LFB104
	.quad	.LFE104-.LFB104
	.uleb128 0x1
	.byte	0x9c
	.long	0x8100
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x19b8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x19b9
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.long	.LASF2265
	.byte	0x1
	.value	0x19ba
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x35
	.long	.LASF2266
	.byte	0x1
	.value	0x19ba
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF2262
	.byte	0x1
	.value	0x19bc
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2267
	.byte	0x1
	.value	0x19bd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2268
	.byte	0x1
	.value	0x19be
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2257
	.byte	0x1
	.value	0x19bf
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x8100
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15769
	.uleb128 0x33
	.quad	.LBB66
	.quad	.LBE66-.LBB66
	.uleb128 0x30
	.string	"alt"
	.byte	0x1
	.value	0x1a02
	.long	0x8115
	.uleb128 0x9
	.byte	0x3
	.quad	alt.15770
	.uleb128 0x32
	.long	.LASF2019
	.byte	0x1
	.value	0x1a23
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.string	"ret"
	.byte	0x1
	.value	0x1a24
	.long	0xc77
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x5627
	.uleb128 0xe
	.long	0xc77
	.long	0x8115
	.uleb128 0xf
	.long	0x33f
	.byte	0x17
	.byte	0
	.uleb128 0xc
	.long	0x8105
	.uleb128 0x2f
	.long	.LASF2269
	.byte	0x1
	.value	0x1a36
	.quad	.LFB105
	.quad	.LFE105-.LFB105
	.uleb128 0x1
	.byte	0x9c
	.long	0x8166
	.uleb128 0x35
	.long	.LASF2187
	.byte	0x1
	.value	0x1a37
	.long	0x48bf
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF951
	.byte	0x1
	.value	0x1a38
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LASF2270
	.byte	0x1
	.value	0x1a3a
	.long	0xc77
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x2f
	.long	.LASF2271
	.byte	0x1
	.value	0x1a49
	.quad	.LFB106
	.quad	.LFE106-.LFB106
	.uleb128 0x1
	.byte	0x9c
	.long	0x81b2
	.uleb128 0x35
	.long	.LASF2187
	.byte	0x1
	.value	0x1a4a
	.long	0x48bf
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF951
	.byte	0x1
	.value	0x1a4b
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x39
	.string	"rel"
	.byte	0x1
	.value	0x1a4b
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x2f
	.long	.LASF2272
	.byte	0x1
	.value	0x1a5b
	.quad	.LFB107
	.quad	.LFE107-.LFB107
	.uleb128 0x1
	.byte	0x9c
	.long	0x8223
	.uleb128 0x35
	.long	.LASF1943
	.byte	0x1
	.value	0x1a5c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1a5e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x8223
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15787
	.uleb128 0x33
	.quad	.LBB67
	.quad	.LBE67-.LBB67
	.uleb128 0x32
	.long	.LASF2273
	.byte	0x1
	.value	0x1a6d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x5627
	.uleb128 0x2f
	.long	.LASF2274
	.byte	0x1
	.value	0x1a75
	.quad	.LFB108
	.quad	.LFE108-.LFB108
	.uleb128 0x1
	.byte	0x9c
	.long	0x82a6
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x1a76
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x1a77
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2225
	.byte	0x1
	.value	0x1a79
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.long	.LASF1309
	.byte	0x1
	.value	0x1a7a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x33
	.quad	.LBB68
	.quad	.LBE68-.LBB68
	.uleb128 0x32
	.long	.LASF2236
	.byte	0x1
	.value	0x1a84
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x2f
	.long	.LASF2275
	.byte	0x1
	.value	0x1ab6
	.quad	.LFB109
	.quad	.LFE109-.LFB109
	.uleb128 0x1
	.byte	0x9c
	.long	0x8329
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x1ab7
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x1ab8
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x3c
	.quad	.LBB69
	.quad	.LBE69-.LBB69
	.long	0x8307
	.uleb128 0x32
	.long	.LASF2215
	.byte	0x1
	.value	0x1ac2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x33
	.quad	.LBB70
	.quad	.LBE70-.LBB70
	.uleb128 0x32
	.long	.LASF2236
	.byte	0x1
	.value	0x1acd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x2f
	.long	.LASF2276
	.byte	0x1
	.value	0x1ada
	.quad	.LFB110
	.quad	.LFE110-.LFB110
	.uleb128 0x1
	.byte	0x9c
	.long	0x8406
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1adb
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x1adc
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x1add
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2277
	.byte	0x1
	.value	0x1adf
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF2278
	.byte	0x1
	.value	0x1ae0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2279
	.byte	0x1
	.value	0x1ae0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.string	"dst"
	.byte	0x1
	.value	0x1ae0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.string	"op"
	.byte	0x1
	.value	0x1ae0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2273
	.byte	0x1
	.value	0x1ae0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x8406
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15814
	.uleb128 0x33
	.quad	.LBB71
	.quad	.LBE71-.LBB71
	.uleb128 0x32
	.long	.LASF2236
	.byte	0x1
	.value	0x1aeb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x6a99
	.uleb128 0x37
	.long	.LASF2280
	.byte	0x1
	.value	0x1b33
	.long	0x328
	.quad	.LFB111
	.quad	.LFE111-.LFB111
	.uleb128 0x1
	.byte	0x9c
	.long	0x845b
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1b34
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x1b35
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x1b36
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x2f
	.long	.LASF2281
	.byte	0x1
	.value	0x1b52
	.quad	.LFB112
	.quad	.LFE112-.LFB112
	.uleb128 0x1
	.byte	0x9c
	.long	0x8507
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1b53
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x1b54
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x1b55
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2277
	.byte	0x1
	.value	0x1b57
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.string	"src"
	.byte	0x1
	.value	0x1b58
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.string	"dst"
	.byte	0x1
	.value	0x1b58
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.string	"op"
	.byte	0x1
	.value	0x1b58
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2273
	.byte	0x1
	.value	0x1b58
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x8517
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15830
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x8517
	.uleb128 0xf
	.long	0x33f
	.byte	0x1a
	.byte	0
	.uleb128 0xc
	.long	0x8507
	.uleb128 0x37
	.long	.LASF2282
	.byte	0x1
	.value	0x1b8f
	.long	0x328
	.quad	.LFB113
	.quad	.LFE113-.LFB113
	.uleb128 0x1
	.byte	0x9c
	.long	0x856c
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1b90
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x1b91
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x1b92
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x37
	.long	.LASF2283
	.byte	0x1
	.value	0x1ba1
	.long	0x328
	.quad	.LFB114
	.quad	.LFE114-.LFB114
	.uleb128 0x1
	.byte	0x9c
	.long	0x85de
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x1ba2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2284
	.byte	0x1
	.value	0x1ba3
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.string	"set"
	.byte	0x1
	.value	0x1ba5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2285
	.byte	0x1
	.value	0x1ba6
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x85de
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15842
	.byte	0
	.uleb128 0xc
	.long	0x5627
	.uleb128 0x36
	.long	.LASF2286
	.byte	0x1
	.value	0x1bd2
	.long	0x2d
	.quad	.LFB115
	.quad	.LFE115-.LFB115
	.uleb128 0x1
	.byte	0x9c
	.long	0x8661
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1bd3
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x39
	.string	"op0"
	.byte	0x1
	.value	0x1bd4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.string	"op1"
	.byte	0x1
	.value	0x1bd4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2287
	.byte	0x1
	.value	0x1bd6
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1bd7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF587
	.byte	0x1
	.value	0x1bd7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x38
	.long	.LASF2288
	.byte	0x1
	.value	0x1bea
	.long	0xcc3
	.quad	.LFB116
	.quad	.LFE116-.LFB116
	.uleb128 0x1
	.byte	0x9c
	.long	0x8693
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1beb
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF2289
	.byte	0x1
	.value	0x1bf6
	.long	0xcc3
	.quad	.LFB117
	.quad	.LFE117-.LFB117
	.uleb128 0x1
	.byte	0x9c
	.long	0x86f6
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1bf7
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x39
	.string	"op0"
	.byte	0x1
	.value	0x1bf8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.string	"op1"
	.byte	0x1
	.value	0x1bf8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x8706
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15878
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x8706
	.uleb128 0xf
	.long	0x33f
	.byte	0xc
	.byte	0
	.uleb128 0xc
	.long	0x86f6
	.uleb128 0x37
	.long	.LASF2290
	.byte	0x1
	.value	0x1c27
	.long	0x328
	.quad	.LFB118
	.quad	.LFE118-.LFB118
	.uleb128 0x1
	.byte	0x9c
	.long	0x874c
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1c28
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.long	.LASF2291
	.byte	0x1
	.value	0x1c2a
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x36
	.long	.LASF2292
	.byte	0x1
	.value	0x1c35
	.long	0xe81
	.quad	.LFB119
	.quad	.LFE119-.LFB119
	.uleb128 0x1
	.byte	0x9c
	.long	0x8833
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1c36
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x35
	.long	.LASF2293
	.byte	0x1
	.value	0x1c37
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x35
	.long	.LASF2294
	.byte	0x1
	.value	0x1c37
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2295
	.byte	0x1
	.value	0x1c39
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x1c3a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x1c3a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2296
	.byte	0x1
	.value	0x1c3b
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2257
	.byte	0x1
	.value	0x1c3c
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x3c
	.quad	.LBB72
	.quad	.LBE72-.LBB72
	.long	0x8811
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1c56
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x33
	.quad	.LBB73
	.quad	.LBE73-.LBB73
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1c6c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x3a
	.long	.LASF2297
	.byte	0x1
	.value	0x1c7c
	.long	0xe81
	.quad	.LFB120
	.quad	.LFE120-.LFB120
	.uleb128 0x1
	.byte	0x9c
	.long	0x8865
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1c7d
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x3f
	.long	.LASF2298
	.byte	0x1
	.value	0x1ca0
	.quad	.LFB121
	.quad	.LFE121-.LFB121
	.uleb128 0x1
	.byte	0x9c
	.long	0x88d3
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1ca1
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x35
	.long	.LASF2166
	.byte	0x1
	.value	0x1ca1
	.long	0x88d3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.long	.LASF2299
	.byte	0x1
	.value	0x1ca1
	.long	0x88d3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2165
	.byte	0x1
	.value	0x1ca1
	.long	0x88d3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x88e9
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15929
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xe81
	.uleb128 0xe
	.long	0xa6a
	.long	0x88e9
	.uleb128 0xf
	.long	0x33f
	.byte	0x18
	.byte	0
	.uleb128 0xc
	.long	0x88d9
	.uleb128 0x36
	.long	.LASF2300
	.byte	0x1
	.value	0x1ce1
	.long	0x328
	.quad	.LFB122
	.quad	.LFE122-.LFB122
	.uleb128 0x1
	.byte	0x9c
	.long	0x8933
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1ce2
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x8943
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15948
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0x8943
	.uleb128 0xf
	.long	0x33f
	.byte	0x23
	.byte	0
	.uleb128 0xc
	.long	0x8933
	.uleb128 0x36
	.long	.LASF2301
	.byte	0x1
	.value	0x1d05
	.long	0x328
	.quad	.LFB123
	.quad	.LFE123-.LFB123
	.uleb128 0x1
	.byte	0x9c
	.long	0x89a7
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1d06
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF2166
	.byte	0x1
	.value	0x1d08
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF2299
	.byte	0x1
	.value	0x1d08
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2165
	.byte	0x1
	.value	0x1d08
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x36
	.long	.LASF2302
	.byte	0x1
	.value	0x1d14
	.long	0x328
	.quad	.LFB124
	.quad	.LFE124-.LFB124
	.uleb128 0x1
	.byte	0x9c
	.long	0x8a06
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1d15
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF2166
	.byte	0x1
	.value	0x1d17
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF2299
	.byte	0x1
	.value	0x1d17
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2165
	.byte	0x1
	.value	0x1d17
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x36
	.long	.LASF2303
	.byte	0x1
	.value	0x1d23
	.long	0x328
	.quad	.LFB125
	.quad	.LFE125-.LFB125
	.uleb128 0x1
	.byte	0x9c
	.long	0x8a74
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1d24
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF2304
	.byte	0x1
	.value	0x1d26
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2305
	.byte	0x1
	.value	0x1d26
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x32
	.long	.LASF2306
	.byte	0x1
	.value	0x1d26
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.string	"min"
	.byte	0x1
	.value	0x1d27
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x36
	.long	.LASF2307
	.byte	0x1
	.value	0x1d37
	.long	0x2d
	.quad	.LFB126
	.quad	.LFE126-.LFB126
	.uleb128 0x1
	.byte	0x9c
	.long	0x8b84
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1d38
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x39
	.string	"op0"
	.byte	0x1
	.value	0x1d39
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.string	"op1"
	.byte	0x1
	.value	0x1d39
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x35
	.long	.LASF2308
	.byte	0x1
	.value	0x1d39
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x35
	.long	.LASF2309
	.byte	0x1
	.value	0x1d3a
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x35
	.long	.LASF2310
	.byte	0x1
	.value	0x1d3b
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF2295
	.byte	0x1
	.value	0x1d3d
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.long	.LASF2311
	.byte	0x1
	.value	0x1d3d
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1d3e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2312
	.byte	0x1
	.value	0x1d3e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2023
	.byte	0x1
	.value	0x1d3f
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2166
	.byte	0x1
	.value	0x1d40
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2299
	.byte	0x1
	.value	0x1d40
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF2165
	.byte	0x1
	.value	0x1d40
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x8b84
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16000
	.byte	0
	.uleb128 0xc
	.long	0x7717
	.uleb128 0x37
	.long	.LASF2313
	.byte	0x1
	.value	0x1df3
	.long	0x2d
	.quad	.LFB127
	.quad	.LFE127-.LFB127
	.uleb128 0x1
	.byte	0x9c
	.long	0x8c07
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1df4
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x35
	.long	.LASF2309
	.byte	0x1
	.value	0x1df5
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF2310
	.byte	0x1
	.value	0x1df5
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x1df7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x1df7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.string	"ret"
	.byte	0x1
	.value	0x1df7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x37
	.long	.LASF2314
	.byte	0x1
	.value	0x1e0b
	.long	0x2f2c
	.quad	.LFB128
	.quad	.LFE128-.LFB128
	.uleb128 0x1
	.byte	0x9c
	.long	0x8c66
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1e0c
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF2166
	.byte	0x1
	.value	0x1e0e
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF2299
	.byte	0x1
	.value	0x1e0e
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2165
	.byte	0x1
	.value	0x1e0e
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x2f
	.long	.LASF2315
	.byte	0x1
	.value	0x1e16
	.quad	.LFB129
	.quad	.LFE129-.LFB129
	.uleb128 0x1
	.byte	0x9c
	.long	0x8ddc
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1e17
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x35
	.long	.LASF2113
	.byte	0x1
	.value	0x1e18
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1e1a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x41
	.long	.LASF2317
	.byte	0x1
	.value	0x1e21
	.quad	.L1959
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x8ddc
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16060
	.uleb128 0x3c
	.quad	.LBB74
	.quad	.LBE74-.LBB74
	.long	0x8d3b
	.uleb128 0x30
	.string	"vec"
	.byte	0x1
	.value	0x1e2e
	.long	0xed
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2318
	.byte	0x1
	.value	0x1e2f
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2166
	.byte	0x1
	.value	0x1e30
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x32
	.long	.LASF2299
	.byte	0x1
	.value	0x1e30
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2165
	.byte	0x1
	.value	0x1e30
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x33
	.quad	.LBB75
	.quad	.LBE75-.LBB75
	.uleb128 0x30
	.string	"lo"
	.byte	0x1
	.value	0x1e5f
	.long	0x6e0d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.string	"hi"
	.byte	0x1
	.value	0x1e5f
	.long	0x6e0d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2319
	.byte	0x1
	.value	0x1e5f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2219
	.byte	0x1
	.value	0x1e60
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2320
	.byte	0x1
	.value	0x1e60
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x32
	.long	.LASF2321
	.byte	0x1
	.value	0x1e60
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x33
	.quad	.LBB76
	.quad	.LBE76-.LBB76
	.uleb128 0x32
	.long	.LASF2322
	.byte	0x1
	.value	0x1e74
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2323
	.byte	0x1
	.value	0x1e74
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x7a2a
	.uleb128 0x2f
	.long	.LASF2324
	.byte	0x1
	.value	0x1ed2
	.quad	.LFB130
	.quad	.LFE130-.LFB130
	.uleb128 0x1
	.byte	0x9c
	.long	0x8efc
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1ed3
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x39
	.string	"op1"
	.byte	0x1
	.value	0x1ed4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x39
	.string	"op2"
	.byte	0x1
	.value	0x1ed4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x35
	.long	.LASF2325
	.byte	0x1
	.value	0x1ed4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x35
	.long	.LASF2326
	.byte	0x1
	.value	0x1ed4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x39
	.string	"tmp"
	.byte	0x1
	.value	0x1ed4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF2327
	.byte	0x1
	.value	0x1ed6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2328
	.byte	0x1
	.value	0x1ed6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x1ed7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2329
	.byte	0x1
	.value	0x1ed8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2330
	.byte	0x1
	.value	0x1ed9
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x32
	.long	.LASF2331
	.byte	0x1
	.value	0x1ed9
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF1945
	.byte	0x1
	.value	0x1ed9
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x1eda
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x33
	.quad	.LBB77
	.quad	.LBE77-.LBB77
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1ede
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2332
	.byte	0x1
	.value	0x1f20
	.long	0x328
	.quad	.LFB131
	.quad	.LFE131-.LFB131
	.uleb128 0x1
	.byte	0x9c
	.long	0x8fde
	.uleb128 0x35
	.long	.LASF0
	.byte	0x1
	.value	0x1f21
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x35
	.long	.LASF1943
	.byte	0x1
	.value	0x1f22
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x30
	.string	"ret"
	.byte	0x1
	.value	0x1f24
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1f24
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2333
	.byte	0x1
	.value	0x1f24
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2309
	.byte	0x1
	.value	0x1f25
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2310
	.byte	0x1
	.value	0x1f25
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x8fde
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16088
	.uleb128 0x33
	.quad	.LBB78
	.quad	.LBE78-.LBB78
	.uleb128 0x32
	.long	.LASF2195
	.byte	0x1
	.value	0x1f37
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2328
	.byte	0x1
	.value	0x1f38
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x32
	.long	.LASF2312
	.byte	0x1
	.value	0x1f39
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x5627
	.uleb128 0x37
	.long	.LASF2334
	.byte	0x1
	.value	0x1f4f
	.long	0x328
	.quad	.LFB132
	.quad	.LFE132-.LFB132
	.uleb128 0x1
	.byte	0x9c
	.long	0x926b
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x1f50
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0x1f52
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x32
	.long	.LASF2335
	.byte	0x1
	.value	0x1f52
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x32
	.long	.LASF2336
	.byte	0x1
	.value	0x1f53
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2337
	.byte	0x1
	.value	0x1f53
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2309
	.byte	0x1
	.value	0x1f54
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x32
	.long	.LASF2310
	.byte	0x1
	.value	0x1f54
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x1f55
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x3c
	.quad	.LBB79
	.quad	.LBE79-.LBB79
	.long	0x91c1
	.uleb128 0x30
	.string	"out"
	.byte	0x1
	.value	0x1f7e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x30
	.string	"ct"
	.byte	0x1
	.value	0x1f7f
	.long	0xa19
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x30
	.string	"cf"
	.byte	0x1
	.value	0x1f80
	.long	0xa19
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x32
	.long	.LASF2338
	.byte	0x1
	.value	0x1f81
	.long	0xa19
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x3c
	.quad	.LBB80
	.quad	.LBE80-.LBB80
	.long	0x9120
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1f88
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x33
	.quad	.LBB81
	.quad	.LBE81-.LBB81
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1f8d
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -196
	.byte	0
	.byte	0
	.uleb128 0x3c
	.quad	.LBB82
	.quad	.LBE82-.LBB82
	.long	0x9146
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x1fe8
	.long	0xa19
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.uleb128 0x33
	.quad	.LBB83
	.quad	.LBE83-.LBB83
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x2009
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF2339
	.byte	0x1
	.value	0x200a
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -204
	.uleb128 0x3c
	.quad	.LBB84
	.quad	.LBE84-.LBB84
	.long	0x919d
	.uleb128 0x32
	.long	.LASF2340
	.byte	0x1
	.value	0x2016
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.uleb128 0x33
	.quad	.LBB85
	.quad	.LBE85-.LBB85
	.uleb128 0x32
	.long	.LASF2273
	.byte	0x1
	.value	0x202a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3c
	.quad	.LBB86
	.quad	.LBE86-.LBB86
	.long	0x9224
	.uleb128 0x30
	.string	"op"
	.byte	0x1
	.value	0x207e
	.long	0x453d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x30
	.string	"var"
	.byte	0x1
	.value	0x207f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF2341
	.byte	0x1
	.value	0x207f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.string	"out"
	.byte	0x1
	.value	0x207f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x207f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x3c
	.quad	.LBB87
	.quad	.LBE87-.LBB87
	.long	0x9249
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x20c1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x33
	.quad	.LBB88
	.quad	.LBE88-.LBB88
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x20c7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2342
	.byte	0x1
	.value	0x20e5
	.long	0x328
	.quad	.LFB133
	.quad	.LFE133-.LFB133
	.uleb128 0x1
	.byte	0x9c
	.long	0x939f
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x20e6
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0x20e8
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x20e9
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2337
	.byte	0x1
	.value	0x20ea
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2309
	.byte	0x1
	.value	0x20ea
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2310
	.byte	0x1
	.value	0x20ea
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x939f
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16133
	.uleb128 0x33
	.quad	.LBB89
	.quad	.LBE89-.LBB89
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x20f9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x20f9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x3c
	.quad	.LBB90
	.quad	.LBE90-.LBB90
	.long	0x9356
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x2100
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x3c
	.quad	.LBB91
	.quad	.LBE91-.LBB91
	.long	0x937c
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x2127
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x33
	.quad	.LBB92
	.quad	.LBE92-.LBB92
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x2135
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x71c2
	.uleb128 0x36
	.long	.LASF2343
	.byte	0x1
	.value	0x2184
	.long	0x328
	.quad	.LFB134
	.quad	.LFE134-.LFB134
	.uleb128 0x1
	.byte	0x9c
	.long	0x94b6
	.uleb128 0x35
	.long	.LASF1299
	.byte	0x1
	.value	0x2185
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x35
	.long	.LASF2176
	.byte	0x1
	.value	0x2186
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x2187
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x32
	.long	.LASF554
	.byte	0x1
	.value	0x2189
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x94b6
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16140
	.uleb128 0x3c
	.quad	.LBB93
	.quad	.LBE93-.LBB93
	.long	0x9469
	.uleb128 0x30
	.string	"r"
	.byte	0x1
	.value	0x21c0
	.long	0x1f8a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x30
	.string	"l"
	.byte	0x1
	.value	0x21c1
	.long	0x94bb
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x33
	.quad	.LBB94
	.quad	.LBE94-.LBB94
	.uleb128 0x30
	.string	"u"
	.byte	0x1
	.value	0x21c3
	.long	0x1f95
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB95
	.quad	.LBE95-.LBB95
	.uleb128 0x30
	.string	"r"
	.byte	0x1
	.value	0x21ed
	.long	0x1f8a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x30
	.string	"l"
	.byte	0x1
	.value	0x21ee
	.long	0x1f7a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x33
	.quad	.LBB96
	.quad	.LBE96-.LBB96
	.uleb128 0x30
	.string	"u"
	.byte	0x1
	.value	0x21f0
	.long	0x1f95
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0xc67
	.uleb128 0xe
	.long	0xa19
	.long	0x94cb
	.uleb128 0xf
	.long	0x33f
	.byte	0x3
	.byte	0
	.uleb128 0x2f
	.long	.LASF2344
	.byte	0x1
	.value	0x220b
	.quad	.LFB135
	.quad	.LFE135-.LFB135
	.uleb128 0x1
	.byte	0x9c
	.long	0x957f
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x220c
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2345
	.byte	0x1
	.value	0x220e
	.long	0x957f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2346
	.byte	0x1
	.value	0x220f
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x32
	.long	.LASF2347
	.byte	0x1
	.value	0x2210
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2348
	.byte	0x1
	.value	0x2211
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x2212
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x9595
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16160
	.uleb128 0x33
	.quad	.LBB97
	.quad	.LBE97-.LBB97
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x2251
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x2d
	.long	0x9595
	.uleb128 0xf
	.long	0x33f
	.byte	0x1
	.uleb128 0xf
	.long	0x33f
	.byte	0x2
	.byte	0
	.uleb128 0xc
	.long	0x71c2
	.uleb128 0x2f
	.long	.LASF2349
	.byte	0x1
	.value	0x22c2
	.quad	.LFB136
	.quad	.LFE136-.LFB136
	.uleb128 0x1
	.byte	0x9c
	.long	0x9606
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x22c3
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2308
	.byte	0x1
	.value	0x22c3
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.string	"low"
	.byte	0x1
	.value	0x22c5
	.long	0x6e0d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF934
	.byte	0x1
	.value	0x22c5
	.long	0x6e0d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF585
	.byte	0x1
	.value	0x22c6
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.uleb128 0x2f
	.long	.LASF2350
	.byte	0x1
	.value	0x22f7
	.quad	.LFB137
	.quad	.LFE137-.LFB137
	.uleb128 0x1
	.byte	0x9c
	.long	0x9672
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x22f8
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2308
	.byte	0x1
	.value	0x22f8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.string	"low"
	.byte	0x1
	.value	0x22fa
	.long	0x6e0d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF934
	.byte	0x1
	.value	0x22fa
	.long	0x6e0d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF585
	.byte	0x1
	.value	0x22fb
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.uleb128 0x2f
	.long	.LASF2351
	.byte	0x1
	.value	0x2332
	.quad	.LFB138
	.quad	.LFE138-.LFB138
	.uleb128 0x1
	.byte	0x9c
	.long	0x96de
	.uleb128 0x35
	.long	.LASF955
	.byte	0x1
	.value	0x2333
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2308
	.byte	0x1
	.value	0x2333
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.string	"low"
	.byte	0x1
	.value	0x2335
	.long	0x6e0d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF934
	.byte	0x1
	.value	0x2335
	.long	0x6e0d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF585
	.byte	0x1
	.value	0x2336
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.uleb128 0x36
	.long	.LASF2352
	.byte	0x1
	.value	0x236a
	.long	0x2d
	.quad	.LFB139
	.quad	.LFE139-.LFB139
	.uleb128 0x1
	.byte	0x9c
	.long	0x973d
	.uleb128 0x35
	.long	.LASF2353
	.byte	0x1
	.value	0x236b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF951
	.byte	0x1
	.value	0x236c
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x236e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2354
	.byte	0x1
	.value	0x236f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3f
	.long	.LASF2355
	.byte	0x1
	.value	0x237b
	.quad	.LFB140
	.quad	.LFE140-.LFB140
	.uleb128 0x1
	.byte	0x9c
	.long	0x977a
	.uleb128 0x35
	.long	.LASF2356
	.byte	0x1
	.value	0x237c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF951
	.byte	0x1
	.value	0x237d
	.long	0xa19
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x37
	.long	.LASF2357
	.byte	0x1
	.value	0x2387
	.long	0x2d
	.quad	.LFB141
	.quad	.LFE141-.LFB141
	.uleb128 0x1
	.byte	0x9c
	.long	0x97b9
	.uleb128 0x39
	.string	"exp"
	.byte	0x1
	.value	0x2388
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.string	"r"
	.byte	0x1
	.value	0x238a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF2358
	.byte	0x1
	.value	0x2397
	.long	0x328
	.quad	.LFB142
	.quad	.LFE142-.LFB142
	.uleb128 0x1
	.byte	0x9c
	.long	0x99e3
	.uleb128 0x39
	.string	"dst"
	.byte	0x1
	.value	0x2398
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x39
	.string	"src"
	.byte	0x1
	.value	0x2398
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x35
	.long	.LASF2359
	.byte	0x1
	.value	0x2398
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x35
	.long	.LASF2360
	.byte	0x1
	.value	0x2398
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x32
	.long	.LASF2361
	.byte	0x1
	.value	0x239a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2362
	.byte	0x1
	.value	0x239a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2356
	.byte	0x1
	.value	0x239a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2363
	.byte	0x1
	.value	0x239b
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x32
	.long	.LASF555
	.byte	0x1
	.value	0x239c
	.long	0xa19
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF585
	.byte	0x1
	.value	0x239d
	.long	0xa2b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.long	.LASF1944
	.byte	0x1
	.value	0x239e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x99e3
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16210
	.uleb128 0x3c
	.quad	.LBB98
	.quad	.LBE98-.LBB98
	.long	0x98c3
	.uleb128 0x32
	.long	.LASF554
	.byte	0x1
	.value	0x23d4
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.byte	0
	.uleb128 0x33
	.quad	.LBB99
	.quad	.LBE99-.LBB99
	.uleb128 0x32
	.long	.LASF2364
	.byte	0x1
	.value	0x23f6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x23f7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF2365
	.byte	0x1
	.value	0x23f8
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x3c
	.quad	.LBB100
	.quad	.LBE100-.LBB100
	.long	0x992a
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x2420
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.uleb128 0x3c
	.quad	.LBB101
	.quad	.LBE101-.LBB101
	.long	0x9950
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x2428
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x3c
	.quad	.LBB102
	.quad	.LBE102-.LBB102
	.long	0x9976
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x2430
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x3c
	.quad	.LBB103
	.quad	.LBE103-.LBB103
	.long	0x999b
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x2456
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x3c
	.quad	.LBB104
	.quad	.LBE104-.LBB104
	.long	0x99c0
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x245f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x33
	.quad	.LBB105
	.quad	.LBE105-.LBB105
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x2468
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x7a2a
	.uleb128 0x37
	.long	.LASF2366
	.byte	0x1
	.value	0x247a
	.long	0x328
	.quad	.LFB143
	.quad	.LFE143-.LFB143
	.uleb128 0x1
	.byte	0x9c
	.long	0x9bdf
	.uleb128 0x39
	.string	"src"
	.byte	0x1
	.value	0x247b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x35
	.long	.LASF2359
	.byte	0x1
	.value	0x247b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x35
	.long	.LASF2360
	.byte	0x1
	.value	0x247b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x32
	.long	.LASF2362
	.byte	0x1
	.value	0x247d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2367
	.byte	0x1
	.value	0x247d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2356
	.byte	0x1
	.value	0x247d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2363
	.byte	0x1
	.value	0x247e
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x32
	.long	.LASF555
	.byte	0x1
	.value	0x247f
	.long	0xa19
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.long	.LASF585
	.byte	0x1
	.value	0x2480
	.long	0xa2b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x3c
	.quad	.LBB106
	.quad	.LBE106-.LBB106
	.long	0x9ac0
	.uleb128 0x32
	.long	.LASF554
	.byte	0x1
	.value	0x24ab
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.byte	0
	.uleb128 0x33
	.quad	.LBB107
	.quad	.LBE107-.LBB107
	.uleb128 0x32
	.long	.LASF2364
	.byte	0x1
	.value	0x24cc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x24cd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2365
	.byte	0x1
	.value	0x24cf
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x3c
	.quad	.LBB108
	.quad	.LBE108-.LBB108
	.long	0x9b27
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x24e8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x3c
	.quad	.LBB109
	.quad	.LBE109-.LBB109
	.long	0x9b4d
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x24f1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x3c
	.quad	.LBB110
	.quad	.LBE110-.LBB110
	.long	0x9b72
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x24fa
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x3c
	.quad	.LBB111
	.quad	.LBE111-.LBB111
	.long	0x9b97
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x2524
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x3c
	.quad	.LBB112
	.quad	.LBE112-.LBB112
	.long	0x9bbc
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x252f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x33
	.quad	.LBB113
	.quad	.LBE113-.LBB113
	.uleb128 0x32
	.long	.LASF2113
	.byte	0x1
	.value	0x253a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2368
	.byte	0x1
	.value	0x2545
	.long	0x328
	.quad	.LFB144
	.quad	.LFE144-.LFB144
	.uleb128 0x1
	.byte	0x9c
	.long	0x9c8d
	.uleb128 0x39
	.string	"out"
	.byte	0x1
	.value	0x2546
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.string	"src"
	.byte	0x1
	.value	0x2546
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.long	.LASF2369
	.byte	0x1
	.value	0x2546
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.long	.LASF555
	.byte	0x1
	.value	0x2546
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2215
	.byte	0x1
	.value	0x2548
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2370
	.byte	0x1
	.value	0x2548
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2371
	.byte	0x1
	.value	0x2548
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2372
	.byte	0x1
	.value	0x2548
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2373
	.byte	0x1
	.value	0x2548
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3f
	.long	.LASF2374
	.byte	0x1
	.value	0x2595
	.quad	.LFB145
	.quad	.LFE145-.LFB145
	.uleb128 0x1
	.byte	0x9c
	.long	0x9dd6
	.uleb128 0x39
	.string	"out"
	.byte	0x1
	.value	0x2596
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x35
	.long	.LASF2375
	.byte	0x1
	.value	0x2596
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x32
	.long	.LASF555
	.byte	0x1
	.value	0x2598
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x2599
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2376
	.byte	0x1
	.value	0x259a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF2377
	.byte	0x1
	.value	0x259b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2378
	.byte	0x1
	.value	0x259c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2379
	.byte	0x1
	.value	0x259d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x30
	.string	"mem"
	.byte	0x1
	.value	0x259e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2333
	.byte	0x1
	.value	0x259f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2308
	.byte	0x1
	.value	0x25a0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x3c
	.quad	.LBB114
	.quad	.LBE114-.LBB114
	.long	0x9d80
	.uleb128 0x32
	.long	.LASF2370
	.byte	0x1
	.value	0x25ab
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x3c
	.quad	.LBB115
	.quad	.LBE115-.LBB115
	.long	0x9db4
	.uleb128 0x30
	.string	"reg"
	.byte	0x1
	.value	0x260b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2380
	.byte	0x1
	.value	0x260c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x33
	.quad	.LBB116
	.quad	.LBE116-.LBB116
	.uleb128 0x32
	.long	.LASF2381
	.byte	0x1
	.value	0x2626
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0x3f
	.long	.LASF2382
	.byte	0x1
	.value	0x264d
	.quad	.LFB146
	.quad	.LFE146-.LFB146
	.uleb128 0x1
	.byte	0x9c
	.long	0x9e02
	.uleb128 0x39
	.string	"p"
	.byte	0x1
	.value	0x264e
	.long	0x2988
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3f
	.long	.LASF2383
	.byte	0x1
	.value	0x2656
	.quad	.LFB147
	.quad	.LFE147-.LFB147
	.uleb128 0x1
	.byte	0x9c
	.long	0x9e7a
	.uleb128 0x39
	.string	"p"
	.byte	0x1
	.value	0x2657
	.long	0x2988
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1043
	.byte	0x1
	.value	0x2659
	.long	0x3359
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x265a
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.string	"n"
	.byte	0x1
	.value	0x265b
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x33
	.quad	.LBB117
	.quad	.LBE117-.LBB117
	.uleb128 0x30
	.string	"r__"
	.byte	0x1
	.value	0x2663
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3f
	.long	.LASF2384
	.byte	0x1
	.value	0x2667
	.quad	.LFB148
	.quad	.LFE148-.LFB148
	.uleb128 0x1
	.byte	0x9c
	.long	0x9ea6
	.uleb128 0x39
	.string	"p"
	.byte	0x1
	.value	0x2668
	.long	0x2988
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF2385
	.byte	0x1
	.value	0x2675
	.long	0x2d
	.quad	.LFB149
	.quad	.LFE149-.LFB149
	.uleb128 0x1
	.byte	0x9c
	.long	0x9ef8
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x2676
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x39
	.string	"n"
	.byte	0x1
	.value	0x2677
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x9ef8
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16293
	.byte	0
	.uleb128 0xc
	.long	0x7717
	.uleb128 0x36
	.long	.LASF2386
	.byte	0x1
	.value	0x2687
	.long	0x328
	.quad	.LFB150
	.quad	.LFE150-.LFB150
	.uleb128 0x1
	.byte	0x9c
	.long	0x9f90
	.uleb128 0x35
	.long	.LASF2215
	.byte	0x1
	.value	0x2688
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF2176
	.byte	0x1
	.value	0x268a
	.long	0x4cc4
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2001
	.byte	0x1
	.value	0x268b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF583
	.byte	0x1
	.value	0x268b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2002
	.byte	0x1
	.value	0x268b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.string	"len"
	.byte	0x1
	.value	0x268c
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x3b
	.long	.LASF2083
	.long	0x9f90
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16302
	.byte	0
	.uleb128 0xc
	.long	0x78d3
	.uleb128 0x37
	.long	.LASF2387
	.byte	0x1
	.value	0x26c2
	.long	0x328
	.quad	.LFB151
	.quad	.LFE151-.LFB151
	.uleb128 0x1
	.byte	0x9c
	.long	0xa005
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x26c3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2388
	.byte	0x1
	.value	0x26c4
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.string	"len"
	.byte	0x1
	.value	0x26c6
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x26c7
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x3b
	.long	.LASF2083
	.long	0xa015
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16309
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0xa015
	.uleb128 0xf
	.long	0x33f
	.byte	0x22
	.byte	0
	.uleb128 0xc
	.long	0xa005
	.uleb128 0x37
	.long	.LASF2389
	.byte	0x1
	.value	0x26ec
	.long	0x328
	.quad	.LFB152
	.quad	.LFE152-.LFB152
	.uleb128 0x1
	.byte	0x9c
	.long	0xa059
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x26ed
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x26ef
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x42
	.long	.LASF2678
	.byte	0x1
	.value	0x26fd
	.long	0x328
	.quad	.LFB153
	.quad	.LFE153-.LFB153
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x36
	.long	.LASF2390
	.byte	0x1
	.value	0x2713
	.long	0x328
	.quad	.LFB154
	.quad	.LFE154-.LFB154
	.uleb128 0x1
	.byte	0x9c
	.long	0xa0e5
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x2714
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2391
	.byte	0x1
	.value	0x2714
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.long	.LASF2392
	.byte	0x1
	.value	0x2715
	.long	0x2fa5
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.string	"set"
	.byte	0x1
	.value	0x2717
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2393
	.byte	0x1
	.value	0x2717
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x36
	.long	.LASF2394
	.byte	0x1
	.value	0x2742
	.long	0x328
	.quad	.LFB155
	.quad	.LFE155-.LFB155
	.uleb128 0x1
	.byte	0x9c
	.long	0xa186
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x2743
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2391
	.byte	0x1
	.value	0x2743
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.long	.LASF2392
	.byte	0x1
	.value	0x2744
	.long	0x2fa5
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.long	.LASF2215
	.byte	0x1
	.value	0x2746
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.long	.LASF2083
	.long	0xa186
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16347
	.uleb128 0x41
	.long	.LASF2395
	.byte	0x1
	.value	0x2760
	.quad	.L2502
	.uleb128 0x33
	.quad	.LBB118
	.quad	.LBE118-.LBB118
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x2757
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x7a2a
	.uleb128 0x36
	.long	.LASF2396
	.byte	0x1
	.value	0x2767
	.long	0x328
	.quad	.LFB156
	.quad	.LFE156-.LFB156
	.uleb128 0x1
	.byte	0x9c
	.long	0xa257
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x2768
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2397
	.byte	0x1
	.value	0x2768
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.long	.LASF2391
	.byte	0x1
	.value	0x2768
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.long	.LASF2023
	.byte	0x1
	.value	0x2769
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x32
	.long	.LASF2392
	.byte	0x1
	.value	0x276b
	.long	0x2fa5
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2398
	.byte	0x1
	.value	0x276b
	.long	0x2fa5
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LASF2399
	.byte	0x1
	.value	0x276c
	.long	0x30d9
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2400
	.byte	0x1
	.value	0x276c
	.long	0x30d9
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.string	"set"
	.byte	0x1
	.value	0x276d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2393
	.byte	0x1
	.value	0x276d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2401
	.byte	0x1
	.value	0x276e
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.uleb128 0x36
	.long	.LASF2402
	.byte	0x1
	.value	0x2807
	.long	0x328
	.quad	.LFB157
	.quad	.LFE157-.LFB157
	.uleb128 0x1
	.byte	0x9c
	.long	0xa289
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x2808
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x36
	.long	.LASF2403
	.byte	0x1
	.value	0x2811
	.long	0x328
	.quad	.LFB158
	.quad	.LFE158-.LFB158
	.uleb128 0x1
	.byte	0x9c
	.long	0xa2bb
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x2812
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x36
	.long	.LASF2404
	.byte	0x1
	.value	0x281b
	.long	0x30d9
	.quad	.LFB159
	.quad	.LFE159-.LFB159
	.uleb128 0x1
	.byte	0x9c
	.long	0xa2ed
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x281c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x36
	.long	.LASF2405
	.byte	0x1
	.value	0x2825
	.long	0x3104
	.quad	.LFB160
	.quad	.LFE160-.LFB160
	.uleb128 0x1
	.byte	0x9c
	.long	0xa31f
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x2826
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x36
	.long	.LASF2406
	.byte	0x1
	.value	0x282f
	.long	0x3129
	.quad	.LFB161
	.quad	.LFE161-.LFB161
	.uleb128 0x1
	.byte	0x9c
	.long	0xa351
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x2830
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3f
	.long	.LASF2407
	.byte	0x1
	.value	0x2839
	.quad	.LFB162
	.quad	.LFE162-.LFB162
	.uleb128 0x1
	.byte	0x9c
	.long	0xa37f
	.uleb128 0x35
	.long	.LASF2408
	.byte	0x1
	.value	0x283a
	.long	0x48bf
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3f
	.long	.LASF2409
	.byte	0x1
	.value	0x284b
	.quad	.LFB163
	.quad	.LFE163-.LFB163
	.uleb128 0x1
	.byte	0x9c
	.long	0xa3cb
	.uleb128 0x35
	.long	.LASF2408
	.byte	0x1
	.value	0x284c
	.long	0x48bf
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF2410
	.byte	0x1
	.value	0x284d
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x35
	.long	.LASF2411
	.byte	0x1
	.value	0x284e
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x43
	.long	.LASF2412
	.byte	0x1
	.value	0x2856
	.quad	.LFB164
	.quad	.LFE164-.LFB164
	.uleb128 0x1
	.byte	0x9c
	.long	0xa429
	.uleb128 0x35
	.long	.LASF2413
	.byte	0x1
	.value	0x2857
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2132
	.byte	0x1
	.value	0x2857
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x33
	.quad	.LBB119
	.quad	.LBE119-.LBB119
	.uleb128 0x32
	.long	.LASF1309
	.byte	0x1
	.value	0x285b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x36
	.long	.LASF2414
	.byte	0x1
	.value	0x2869
	.long	0x16ab
	.quad	.LFB165
	.quad	.LFE165-.LFB165
	.uleb128 0x1
	.byte	0x9c
	.long	0xa528
	.uleb128 0x35
	.long	.LASF2415
	.byte	0x1
	.value	0x286a
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.long	.LASF2416
	.byte	0x1
	.value	0x286b
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x286c
	.long	0x3104
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x35
	.long	.LASF570
	.byte	0x1
	.value	0x286d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2417
	.byte	0x1
	.value	0x286f
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x32
	.long	.LASF2418
	.byte	0x1
	.value	0x286f
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x2870
	.long	0x3104
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x32
	.long	.LASF2399
	.byte	0x1
	.value	0x2871
	.long	0x30d9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF2413
	.byte	0x1
	.value	0x2872
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2419
	.byte	0x1
	.value	0x2872
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x33
	.quad	.LBB120
	.quad	.LBE120-.LBB120
	.uleb128 0x32
	.long	.LASF2420
	.byte	0x1
	.value	0x287f
	.long	0x30d9
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2421
	.byte	0x1
	.value	0x2880
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.long	.LASF2422
	.byte	0x1
	.value	0x2880
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.byte	0
	.uleb128 0x3f
	.long	.LASF2423
	.byte	0x1
	.value	0x289e
	.quad	.LFB166
	.quad	.LFE166-.LFB166
	.uleb128 0x1
	.byte	0x9c
	.long	0xa592
	.uleb128 0x35
	.long	.LASF2416
	.byte	0x1
	.value	0x289f
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2415
	.byte	0x1
	.value	0x28a0
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2424
	.byte	0x1
	.value	0x28a2
	.long	0x3104
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF2425
	.byte	0x1
	.value	0x28a2
	.long	0x3104
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2413
	.byte	0x1
	.value	0x28a3
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3f
	.long	.LASF2426
	.byte	0x1
	.value	0x28df
	.quad	.LFB167
	.quad	.LFE167-.LFB167
	.uleb128 0x1
	.byte	0x9c
	.long	0xa62b
	.uleb128 0x35
	.long	.LASF2416
	.byte	0x1
	.value	0x28e0
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.long	.LASF2415
	.byte	0x1
	.value	0x28e1
	.long	0x16ab
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2015
	.byte	0x1
	.value	0x28e3
	.long	0x4d78
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2427
	.byte	0x1
	.value	0x28e4
	.long	0x3129
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF2016
	.byte	0x1
	.value	0x28e5
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2413
	.byte	0x1
	.value	0x28e6
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x28e7
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x41
	.long	.LASF2428
	.byte	0x1
	.value	0x292d
	.quad	.L2619
	.byte	0
	.uleb128 0x36
	.long	.LASF2429
	.byte	0x1
	.value	0x2936
	.long	0x328
	.quad	.LFB168
	.quad	.LFE168-.LFB168
	.uleb128 0x1
	.byte	0x9c
	.long	0xa6c7
	.uleb128 0x35
	.long	.LASF2408
	.byte	0x1
	.value	0x2937
	.long	0x48bf
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2410
	.byte	0x1
	.value	0x2938
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.long	.LASF2416
	.byte	0x1
	.value	0x2939
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF2430
	.byte	0x1
	.value	0x293a
	.long	0xcb6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF2431
	.byte	0x1
	.value	0x293b
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2432
	.byte	0x1
	.value	0x293d
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF2415
	.byte	0x1
	.value	0x293e
	.long	0x16ab
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x44
	.string	"out"
	.byte	0x1
	.value	0x2951
	.quad	.L2636
	.byte	0
	.uleb128 0x36
	.long	.LASF2433
	.byte	0x1
	.value	0x2959
	.long	0x328
	.quad	.LFB169
	.quad	.LFE169-.LFB169
	.uleb128 0x1
	.byte	0x9c
	.long	0xa767
	.uleb128 0x35
	.long	.LASF2408
	.byte	0x1
	.value	0x295a
	.long	0x48bf
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2410
	.byte	0x1
	.value	0x295b
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.long	.LASF1309
	.byte	0x1
	.value	0x295c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF2434
	.byte	0x1
	.value	0x295d
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x295f
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.long	.LASF2083
	.long	0xa767
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16480
	.uleb128 0x33
	.quad	.LBB121
	.quad	.LBE121-.LBB121
	.uleb128 0x32
	.long	.LASF2435
	.byte	0x1
	.value	0x2967
	.long	0x3129
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0xc67
	.uleb128 0x2f
	.long	.LASF2436
	.byte	0x1
	.value	0x2999
	.quad	.LFB170
	.quad	.LFE170-.LFB170
	.uleb128 0x1
	.byte	0x9c
	.long	0xa7e6
	.uleb128 0x35
	.long	.LASF1944
	.byte	0x1
	.value	0x299a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2437
	.byte	0x1
	.value	0x299b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.long	.LASF2438
	.byte	0x1
	.value	0x299b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF2439
	.byte	0x1
	.value	0x299b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF2361
	.byte	0x1
	.value	0x299b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF1309
	.byte	0x1
	.value	0x299d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3f
	.long	.LASF2440
	.byte	0x1
	.value	0x29a9
	.quad	.LFB171
	.quad	.LFE171-.LFB171
	.uleb128 0x1
	.byte	0x9c
	.long	0xa889
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0x29aa
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF2437
	.byte	0x1
	.value	0x29ab
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF2438
	.byte	0x1
	.value	0x29ab
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2439
	.byte	0x1
	.value	0x29ab
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.long	.LASF2361
	.byte	0x1
	.value	0x29ab
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0x29ad
	.long	0xe81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF2441
	.byte	0x1
	.value	0x29ae
	.long	0xc77
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x29af
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.string	"j"
	.byte	0x1
	.value	0x29af
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x38
	.long	.LASF2442
	.byte	0x1
	.value	0x29c9
	.long	0x328
	.quad	.LFB172
	.quad	.LFE172-.LFB172
	.uleb128 0x1
	.byte	0x9c
	.long	0xa8ca
	.uleb128 0x39
	.string	"exp"
	.byte	0x1
	.value	0x29ca
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF555
	.byte	0x1
	.value	0x29cb
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x38
	.long	.LASF2443
	.byte	0x1
	.value	0x29e1
	.long	0x328
	.quad	.LFB173
	.quad	.LFE173-.LFB173
	.uleb128 0x1
	.byte	0x9c
	.long	0xa90b
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x29e2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF555
	.byte	0x1
	.value	0x29e3
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x38
	.long	.LASF2444
	.byte	0x1
	.value	0x2a23
	.long	0x328
	.quad	.LFB174
	.quad	.LFE174-.LFB174
	.uleb128 0x1
	.byte	0x9c
	.long	0xa94c
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x2a24
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF555
	.byte	0x1
	.value	0x2a25
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x2f
	.long	.LASF2445
	.byte	0x1
	.value	0x2a5a
	.quad	.LFB175
	.quad	.LFE175-.LFB175
	.uleb128 0x1
	.byte	0x9c
	.long	0xa9f2
	.uleb128 0x35
	.long	.LASF2446
	.byte	0x1
	.value	0x2a5b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF2447
	.byte	0x1
	.value	0x2a5b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.string	"cxt"
	.byte	0x1
	.value	0x2a5b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x3b
	.long	.LASF2083
	.long	0xa9f2
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16528
	.uleb128 0x3c
	.quad	.LBB122
	.quad	.LBE122-.LBB122
	.long	0xa9d0
	.uleb128 0x32
	.long	.LASF2002
	.byte	0x1
	.value	0x2a60
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x33
	.quad	.LBB123
	.quad	.LBE123-.LBB123
	.uleb128 0x32
	.long	.LASF553
	.byte	0x1
	.value	0x2a6c
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x7062
	.uleb128 0x45
	.long	.LASF2449
	.byte	0x1
	.value	0x2b43
	.quad	.LFB176
	.quad	.LFE176-.LFB176
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3f
	.long	.LASF2450
	.byte	0x1
	.value	0x2b4d
	.quad	.LFB177
	.quad	.LFE177-.LFB177
	.uleb128 0x1
	.byte	0x9c
	.long	0xad6b
	.uleb128 0x30
	.string	"d"
	.byte	0x1
	.value	0x2b4f
	.long	0xad6b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -408
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x2b50
	.long	0xa20
	.uleb128 0x3
	.byte	0x91
	.sleb128 -400
	.uleb128 0x32
	.long	.LASF2451
	.byte	0x1
	.value	0x2b51
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -384
	.uleb128 0x32
	.long	.LASF2452
	.byte	0x1
	.value	0x2b53
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -376
	.uleb128 0x32
	.long	.LASF2453
	.byte	0x1
	.value	0x2b54
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -368
	.uleb128 0x32
	.long	.LASF2454
	.byte	0x1
	.value	0x2b55
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -360
	.uleb128 0x32
	.long	.LASF2455
	.byte	0x1
	.value	0x2b56
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -352
	.uleb128 0x32
	.long	.LASF2456
	.byte	0x1
	.value	0x2b59
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -344
	.uleb128 0x32
	.long	.LASF2457
	.byte	0x1
	.value	0x2b5f
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -336
	.uleb128 0x32
	.long	.LASF2458
	.byte	0x1
	.value	0x2b66
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -328
	.uleb128 0x32
	.long	.LASF2459
	.byte	0x1
	.value	0x2b6a
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -320
	.uleb128 0x32
	.long	.LASF2460
	.byte	0x1
	.value	0x2b6e
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -312
	.uleb128 0x32
	.long	.LASF2461
	.byte	0x1
	.value	0x2b73
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x32
	.long	.LASF2462
	.byte	0x1
	.value	0x2b78
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x32
	.long	.LASF2463
	.byte	0x1
	.value	0x2b7d
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x32
	.long	.LASF2464
	.byte	0x1
	.value	0x2b85
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x32
	.long	.LASF2465
	.byte	0x1
	.value	0x2b8a
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x32
	.long	.LASF2466
	.byte	0x1
	.value	0x2b8f
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x32
	.long	.LASF2467
	.byte	0x1
	.value	0x2b96
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x32
	.long	.LASF2468
	.byte	0x1
	.value	0x2b9b
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x32
	.long	.LASF2469
	.byte	0x1
	.value	0x2ba0
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x32
	.long	.LASF2470
	.byte	0x1
	.value	0x2ba5
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x32
	.long	.LASF2471
	.byte	0x1
	.value	0x2bab
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x32
	.long	.LASF2472
	.byte	0x1
	.value	0x2bb1
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x32
	.long	.LASF2473
	.byte	0x1
	.value	0x2bb3
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x32
	.long	.LASF2474
	.byte	0x1
	.value	0x2bb7
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x32
	.long	.LASF2475
	.byte	0x1
	.value	0x2bb9
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x32
	.long	.LASF2476
	.byte	0x1
	.value	0x2bbb
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x32
	.long	.LASF2477
	.byte	0x1
	.value	0x2bbd
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x32
	.long	.LASF2478
	.byte	0x1
	.value	0x2bc2
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x32
	.long	.LASF2479
	.byte	0x1
	.value	0x2bc7
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x32
	.long	.LASF2480
	.byte	0x1
	.value	0x2bc9
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x32
	.long	.LASF2481
	.byte	0x1
	.value	0x2bce
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF2482
	.byte	0x1
	.value	0x2bd3
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.long	.LASF2483
	.byte	0x1
	.value	0x2bd8
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF2484
	.byte	0x1
	.value	0x2bdd
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2485
	.byte	0x1
	.value	0x2be4
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2486
	.byte	0x1
	.value	0x2bea
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2487
	.byte	0x1
	.value	0x2bef
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2488
	.byte	0x1
	.value	0x2bf4
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF2489
	.byte	0x1
	.value	0x2bf9
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2490
	.byte	0x1
	.value	0x2bfe
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF2491
	.byte	0x1
	.value	0x2c05
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2492
	.byte	0x1
	.value	0x2c09
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2493
	.byte	0x1
	.value	0x2c0d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2494
	.byte	0x1
	.value	0x2c11
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2495
	.byte	0x1
	.value	0x2c15
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2496
	.byte	0x1
	.value	0x2c1b
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.long	.LASF2083
	.long	0xad76
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16600
	.uleb128 0x33
	.quad	.LBB124
	.quad	.LBE124-.LBB124
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x2c28
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -412
	.uleb128 0x32
	.long	.LASF24
	.byte	0x1
	.value	0x2c29
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -392
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xad71
	.uleb128 0xc
	.long	0x4d9e
	.uleb128 0xc
	.long	0x8507
	.uleb128 0x36
	.long	.LASF2497
	.byte	0x1
	.value	0x2cbe
	.long	0x2d
	.quad	.LFB178
	.quad	.LFE178-.LFB178
	.uleb128 0x1
	.byte	0x9c
	.long	0xadba
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0x2cbf
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x2cc0
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x36
	.long	.LASF2498
	.byte	0x1
	.value	0x2cd2
	.long	0x2d
	.quad	.LFB179
	.quad	.LFE179-.LFB179
	.uleb128 0x1
	.byte	0x9c
	.long	0xae99
	.uleb128 0x35
	.long	.LASF2020
	.byte	0x1
	.value	0x2cd3
	.long	0x35f9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x35
	.long	.LASF2499
	.byte	0x1
	.value	0x2cd4
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x35
	.long	.LASF2500
	.byte	0x1
	.value	0x2cd5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x30
	.string	"pat"
	.byte	0x1
	.value	0x2cd7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2208
	.byte	0x1
	.value	0x2cd8
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2501
	.byte	0x1
	.value	0x2cd9
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x2cda
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x2cdb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2502
	.byte	0x1
	.value	0x2cdc
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF2503
	.byte	0x1
	.value	0x2cdd
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2504
	.byte	0x1
	.value	0x2cde
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x3b
	.long	.LASF2083
	.long	0xae99
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16624
	.byte	0
	.uleb128 0xc
	.long	0x7062
	.uleb128 0x36
	.long	.LASF2505
	.byte	0x1
	.value	0x2d06
	.long	0x2d
	.quad	.LFB180
	.quad	.LFE180-.LFB180
	.uleb128 0x1
	.byte	0x9c
	.long	0xaf3c
	.uleb128 0x35
	.long	.LASF2020
	.byte	0x1
	.value	0x2d07
	.long	0x35f9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x35
	.long	.LASF2499
	.byte	0x1
	.value	0x2d08
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.long	.LASF2500
	.byte	0x1
	.value	0x2d09
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x30
	.string	"pat"
	.byte	0x1
	.value	0x2d0b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2208
	.byte	0x1
	.value	0x2d0c
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2501
	.byte	0x1
	.value	0x2d0d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x2d0e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x2d0f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x36
	.long	.LASF2506
	.byte	0x1
	.value	0x2d2b
	.long	0x2d
	.quad	.LFB181
	.quad	.LFE181-.LFB181
	.uleb128 0x1
	.byte	0x9c
	.long	0xafe8
	.uleb128 0x35
	.long	.LASF2020
	.byte	0x1
	.value	0x2d2c
	.long	0x35f9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x35
	.long	.LASF2499
	.byte	0x1
	.value	0x2d2d
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.string	"pat"
	.byte	0x1
	.value	0x2d2f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2208
	.byte	0x1
	.value	0x2d30
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2501
	.byte	0x1
	.value	0x2d31
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x2d32
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x2d33
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2503
	.byte	0x1
	.value	0x2d34
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2504
	.byte	0x1
	.value	0x2d35
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.byte	0
	.uleb128 0x36
	.long	.LASF2507
	.byte	0x1
	.value	0x2d48
	.long	0x2d
	.quad	.LFB182
	.quad	.LFE182-.LFB182
	.uleb128 0x1
	.byte	0x9c
	.long	0xb093
	.uleb128 0x35
	.long	.LASF2020
	.byte	0x1
	.value	0x2d49
	.long	0x35f9
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x35
	.long	.LASF2499
	.byte	0x1
	.value	0x2d4a
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF2500
	.byte	0x1
	.value	0x2d4b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2508
	.byte	0x1
	.value	0x2d4c
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.string	"pat"
	.byte	0x1
	.value	0x2d4e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2208
	.byte	0x1
	.value	0x2d4f
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x2d50
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2502
	.byte	0x1
	.value	0x2d51
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2503
	.byte	0x1
	.value	0x2d52
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.uleb128 0x36
	.long	.LASF2509
	.byte	0x1
	.value	0x2d6e
	.long	0x2d
	.quad	.LFB183
	.quad	.LFE183-.LFB183
	.uleb128 0x1
	.byte	0x9c
	.long	0xb140
	.uleb128 0x35
	.long	.LASF2020
	.byte	0x1
	.value	0x2d6f
	.long	0x35f9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x35
	.long	.LASF2499
	.byte	0x1
	.value	0x2d70
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.long	.LASF2500
	.byte	0x1
	.value	0x2d71
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x30
	.string	"pat"
	.byte	0x1
	.value	0x2d73
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2208
	.byte	0x1
	.value	0x2d74
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x2d75
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x2d75
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2502
	.byte	0x1
	.value	0x2d76
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2503
	.byte	0x1
	.value	0x2d77
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.uleb128 0x36
	.long	.LASF2510
	.byte	0x1
	.value	0x2d92
	.long	0x2d
	.quad	.LFB184
	.quad	.LFE184-.LFB184
	.uleb128 0x1
	.byte	0x9c
	.long	0xb24d
	.uleb128 0x39
	.string	"d"
	.byte	0x1
	.value	0x2d93
	.long	0xad6b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x35
	.long	.LASF2499
	.byte	0x1
	.value	0x2d94
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x35
	.long	.LASF2500
	.byte	0x1
	.value	0x2d95
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x30
	.string	"pat"
	.byte	0x1
	.value	0x2d97
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF2208
	.byte	0x1
	.value	0x2d98
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2501
	.byte	0x1
	.value	0x2d99
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x2d9a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x2d9b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.string	"op2"
	.byte	0x1
	.value	0x2d9c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2502
	.byte	0x1
	.value	0x2d9d
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF2503
	.byte	0x1
	.value	0x2d9e
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x32
	.long	.LASF2504
	.byte	0x1
	.value	0x2d9f
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2021
	.byte	0x1
	.value	0x2da0
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x33
	.quad	.LBB125
	.quad	.LBE125-.LBB125
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x2dab
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x36
	.long	.LASF2511
	.byte	0x1
	.value	0x2dc6
	.long	0x2d
	.quad	.LFB185
	.quad	.LFE185-.LFB185
	.uleb128 0x1
	.byte	0x9c
	.long	0xb34d
	.uleb128 0x39
	.string	"d"
	.byte	0x1
	.value	0x2dc7
	.long	0xad6b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x35
	.long	.LASF2499
	.byte	0x1
	.value	0x2dc8
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x35
	.long	.LASF2500
	.byte	0x1
	.value	0x2dc9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x30
	.string	"pat"
	.byte	0x1
	.value	0x2dcb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2208
	.byte	0x1
	.value	0x2dcc
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF2501
	.byte	0x1
	.value	0x2dcd
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x2dce
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x2dcf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x30
	.string	"op2"
	.byte	0x1
	.value	0x2dd0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2503
	.byte	0x1
	.value	0x2dd1
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.long	.LASF2504
	.byte	0x1
	.value	0x2dd2
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF2021
	.byte	0x1
	.value	0x2dd3
	.long	0xe81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x33
	.quad	.LBB126
	.quad	.LBE126-.LBB126
	.uleb128 0x30
	.string	"tmp"
	.byte	0x1
	.value	0x2dde
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2512
	.byte	0x1
	.value	0x2e01
	.long	0x2d
	.quad	.LFB186
	.quad	.LFE186-.LFB186
	.uleb128 0x1
	.byte	0x9c
	.long	0xb4c6
	.uleb128 0x39
	.string	"exp"
	.byte	0x1
	.value	0x2e02
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x35
	.long	.LASF2500
	.byte	0x1
	.value	0x2e03
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x35
	.long	.LASF2513
	.byte	0x1
	.value	0x2e04
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x2e05
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x35
	.long	.LASF2514
	.byte	0x1
	.value	0x2e06
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x30
	.string	"d"
	.byte	0x1
	.value	0x2e08
	.long	0xad6b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x2e09
	.long	0xa20
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF2020
	.byte	0x1
	.value	0x2e0a
	.long	0x35f9
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x32
	.long	.LASF2515
	.byte	0x1
	.value	0x2e0b
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF2499
	.byte	0x1
	.value	0x2e0c
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2208
	.byte	0x1
	.value	0x2e0d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF2501
	.byte	0x1
	.value	0x2e0d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF2516
	.byte	0x1
	.value	0x2e0d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.string	"op0"
	.byte	0x1
	.value	0x2e0e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x30
	.string	"op1"
	.byte	0x1
	.value	0x2e0e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.string	"op2"
	.byte	0x1
	.value	0x2e0e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.string	"pat"
	.byte	0x1
	.value	0x2e0e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF2502
	.byte	0x1
	.value	0x2e0f
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF2503
	.byte	0x1
	.value	0x2e0f
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x32
	.long	.LASF2504
	.byte	0x1
	.value	0x2e0f
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF2517
	.byte	0x1
	.value	0x2e0f
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.long	.LASF2518
	.byte	0x1
	.value	0x2e10
	.long	0xa10
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.byte	0
	.uleb128 0x37
	.long	.LASF2519
	.byte	0x1
	.value	0x2f8c
	.long	0x2d
	.quad	.LFB187
	.quad	.LFE187-.LFB187
	.uleb128 0x1
	.byte	0x9c
	.long	0xb54c
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x2f8d
	.long	0xcc3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x35
	.long	.LASF1299
	.byte	0x1
	.value	0x2f8e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF1100
	.byte	0x1
	.value	0x2f90
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x3b
	.long	.LASF2083
	.long	0xb54c
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16795
	.uleb128 0x33
	.quad	.LBB127
	.quad	.LBE127-.LBB127
	.uleb128 0x32
	.long	.LASF955
	.byte	0x1
	.value	0x2fb6
	.long	0x6e0d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x71c2
	.uleb128 0x2f
	.long	.LASF2520
	.byte	0x1
	.value	0x2fdd
	.quad	.LFB188
	.quad	.LFE188-.LFB188
	.uleb128 0x1
	.byte	0x9c
	.long	0xb5a0
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x2fde
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x33
	.quad	.LBB128
	.quad	.LBE128-.LBB128
	.uleb128 0x32
	.long	.LASF554
	.byte	0x1
	.value	0x2fe2
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF2521
	.byte	0x1
	.value	0x2ff7
	.long	0x3d6
	.quad	.LFB189
	.quad	.LFE189-.LFB189
	.uleb128 0x1
	.byte	0x9c
	.long	0xb5df
	.uleb128 0x39
	.string	"x"
	.byte	0x1
	.value	0x2ff8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF2082
	.byte	0x1
	.value	0x2ff9
	.long	0x3d6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF2522
	.byte	0x1
	.value	0x3023
	.long	0x328
	.quad	.LFB190
	.quad	.LFE190-.LFB190
	.uleb128 0x1
	.byte	0x9c
	.long	0xb651
	.uleb128 0x35
	.long	.LASF2068
	.byte	0x1
	.value	0x3024
	.long	0x3d6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x35
	.long	.LASF2069
	.byte	0x1
	.value	0x3024
	.long	0x3d6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x3025
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.long	.LASF2225
	.byte	0x1
	.value	0x3026
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3b
	.long	.LASF2083
	.long	0xb661
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16821
	.byte	0
	.uleb128 0xe
	.long	0xa6a
	.long	0xb661
	.uleb128 0xf
	.long	0x33f
	.byte	0x1c
	.byte	0
	.uleb128 0xc
	.long	0xb651
	.uleb128 0x37
	.long	.LASF2523
	.byte	0x1
	.value	0x3041
	.long	0x328
	.quad	.LFB191
	.quad	.LFE191-.LFB191
	.uleb128 0x1
	.byte	0x9c
	.long	0xb6d7
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x3042
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x35
	.long	.LASF2068
	.byte	0x1
	.value	0x3043
	.long	0x3d6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF2069
	.byte	0x1
	.value	0x3043
	.long	0x3d6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x33
	.quad	.LBB129
	.quad	.LBE129-.LBB129
	.uleb128 0x32
	.long	.LASF2524
	.byte	0x1
	.value	0x304b
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF2525
	.byte	0x1
	.value	0x3060
	.long	0x328
	.quad	.LFB192
	.quad	.LFE192-.LFB192
	.uleb128 0x1
	.byte	0x9c
	.long	0xb718
	.uleb128 0x35
	.long	.LASF95
	.byte	0x1
	.value	0x3061
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x3062
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF2526
	.byte	0x1
	.value	0x3088
	.long	0x328
	.quad	.LFB193
	.quad	.LFE193-.LFB193
	.uleb128 0x1
	.byte	0x9c
	.long	0xb7d2
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x3089
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x35
	.long	.LASF2082
	.byte	0x1
	.value	0x308a
	.long	0x3d6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.string	"in"
	.byte	0x1
	.value	0x308b
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x3c
	.quad	.LBB130
	.quad	.LBE130-.LBB130
	.long	0xb78b
	.uleb128 0x32
	.long	.LASF583
	.byte	0x1
	.value	0x308f
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x3c
	.quad	.LBB131
	.quad	.LBE131-.LBB131
	.long	0xb7b0
	.uleb128 0x32
	.long	.LASF583
	.byte	0x1
	.value	0x30a3
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x33
	.quad	.LBB132
	.quad	.LBE132-.LBB132
	.uleb128 0x32
	.long	.LASF583
	.byte	0x1
	.value	0x30b6
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.byte	0
	.uleb128 0x34
	.long	.LASF2527
	.byte	0x1
	.value	0x30e9
	.quad	.LFB194
	.quad	.LFE194-.LFB194
	.uleb128 0x1
	.byte	0x9c
	.long	0xb80d
	.uleb128 0x30
	.string	"pos"
	.byte	0x1
	.value	0x30eb
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.string	"i"
	.byte	0x1
	.value	0x30ec
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x2f
	.long	.LASF2528
	.byte	0x1
	.value	0x3113
	.quad	.LFB195
	.quad	.LFE195-.LFB195
	.uleb128 0x1
	.byte	0x9c
	.long	0xb8ac
	.uleb128 0x35
	.long	.LASF2187
	.byte	0x1
	.value	0x3114
	.long	0x48bf
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF2529
	.byte	0x1
	.value	0x3115
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x35
	.long	.LASF995
	.byte	0x1
	.value	0x3116
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF2530
	.byte	0x1
	.value	0x3118
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF2188
	.byte	0x1
	.value	0x3119
	.long	0x4d78
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3b
	.long	.LASF2083
	.long	0xb8ac
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16897
	.uleb128 0x33
	.quad	.LBB133
	.quad	.LBE133-.LBB133
	.uleb128 0x30
	.string	"n"
	.byte	0x1
	.value	0x3126
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0xc67
	.uleb128 0x37
	.long	.LASF2531
	.byte	0x1
	.value	0x315e
	.long	0x328
	.quad	.LFB196
	.quad	.LFE196-.LFB196
	.uleb128 0x1
	.byte	0x9c
	.long	0xb910
	.uleb128 0x35
	.long	.LASF2074
	.byte	0x1
	.value	0x315f
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF2532
	.byte	0x1
	.value	0x3160
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x3162
	.long	0xcc3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF24
	.byte	0x1
	.value	0x3163
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x46
	.long	.LASF2533
	.byte	0x1
	.byte	0x34
	.long	0x4f9b
	.uleb128 0x9
	.byte	0x3
	.quad	size_cost
	.uleb128 0x46
	.long	.LASF2534
	.byte	0x1
	.byte	0x59
	.long	0x4f9b
	.uleb128 0x9
	.byte	0x3
	.quad	i386_cost
	.uleb128 0x46
	.long	.LASF2535
	.byte	0x1
	.byte	0x7e
	.long	0x4f9b
	.uleb128 0x9
	.byte	0x3
	.quad	i486_cost
	.uleb128 0x46
	.long	.LASF2536
	.byte	0x1
	.byte	0xa3
	.long	0x4f9b
	.uleb128 0x9
	.byte	0x3
	.quad	pentium_cost
	.uleb128 0x46
	.long	.LASF2537
	.byte	0x1
	.byte	0xc8
	.long	0x4f9b
	.uleb128 0x9
	.byte	0x3
	.quad	pentiumpro_cost
	.uleb128 0x46
	.long	.LASF2538
	.byte	0x1
	.byte	0xed
	.long	0x4f9b
	.uleb128 0x9
	.byte	0x3
	.quad	k6_cost
	.uleb128 0x32
	.long	.LASF2539
	.byte	0x1
	.value	0x112
	.long	0x4f9b
	.uleb128 0x9
	.byte	0x3
	.quad	athlon_cost
	.uleb128 0x32
	.long	.LASF2540
	.byte	0x1
	.value	0x137
	.long	0x4f9b
	.uleb128 0x9
	.byte	0x3
	.quad	pentium4_cost
	.uleb128 0x32
	.long	.LASF2541
	.byte	0x1
	.value	0x193
	.long	0x328
	.uleb128 0x9
	.byte	0x3
	.quad	use_fast_prologue_epilogue
	.uleb128 0xe
	.long	0xc77
	.long	0xb9e0
	.uleb128 0xf
	.long	0x33f
	.byte	0x34
	.byte	0
	.uleb128 0x32
	.long	.LASF2542
	.byte	0x1
	.value	0x197
	.long	0xb9f6
	.uleb128 0x9
	.byte	0x3
	.quad	hi_reg_name
	.uleb128 0xc
	.long	0xb9d0
	.uleb128 0xe
	.long	0xc77
	.long	0xba0b
	.uleb128 0xf
	.long	0x33f
	.byte	0x7
	.byte	0
	.uleb128 0x32
	.long	.LASF2543
	.byte	0x1
	.value	0x198
	.long	0xba21
	.uleb128 0x9
	.byte	0x3
	.quad	qi_reg_name
	.uleb128 0xc
	.long	0xb9fb
	.uleb128 0xe
	.long	0xc77
	.long	0xba36
	.uleb128 0xf
	.long	0x33f
	.byte	0x3
	.byte	0
	.uleb128 0x32
	.long	.LASF2544
	.byte	0x1
	.value	0x199
	.long	0xba4c
	.uleb128 0x9
	.byte	0x3
	.quad	qi_high_reg_name
	.uleb128 0xc
	.long	0xba26
	.uleb128 0x32
	.long	.LASF2545
	.byte	0x1
	.value	0x1c2
	.long	0xba67
	.uleb128 0x9
	.byte	0x3
	.quad	x86_64_int_parameter_registers
	.uleb128 0xc
	.long	0x609a
	.uleb128 0xe
	.long	0x328
	.long	0xba7c
	.uleb128 0xf
	.long	0x33f
	.byte	0x3
	.byte	0
	.uleb128 0x32
	.long	.LASF2546
	.byte	0x1
	.value	0x1c6
	.long	0xba92
	.uleb128 0x9
	.byte	0x3
	.quad	x86_64_int_return_registers
	.uleb128 0xc
	.long	0xba6c
	.uleb128 0x32
	.long	.LASF2547
	.byte	0x1
	.value	0x285
	.long	0x6b8f
	.uleb128 0x9
	.byte	0x3
	.quad	internal_label_prefix
	.uleb128 0x32
	.long	.LASF2548
	.byte	0x1
	.value	0x286
	.long	0x328
	.uleb128 0x9
	.byte	0x3
	.quad	internal_label_prefix_len
	.uleb128 0xe
	.long	0xc77
	.long	0xbad3
	.uleb128 0xf
	.long	0x33f
	.byte	0x9
	.byte	0
	.uleb128 0x32
	.long	.LASF2549
	.byte	0x1
	.value	0x2f1
	.long	0xbae9
	.uleb128 0x9
	.byte	0x3
	.quad	x86_64_reg_class_name
	.uleb128 0xc
	.long	0xbac3
	.uleb128 0x32
	.long	.LASF2550
	.byte	0x1
	.value	0xf10
	.long	0xc90
	.uleb128 0x9
	.byte	0x3
	.quad	pic_label_name
	.uleb128 0x32
	.long	.LASF2551
	.byte	0x1
	.value	0x2804
	.long	0x4d88
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_sched_data
	.uleb128 0xe
	.long	0x4d9e
	.long	0xbb2a
	.uleb128 0xf
	.long	0x33f
	.byte	0xb
	.byte	0
	.uleb128 0x32
	.long	.LASF2552
	.byte	0x1
	.value	0x2aa2
	.long	0xbb40
	.uleb128 0x9
	.byte	0x3
	.quad	bdesc_comi
	.uleb128 0xc
	.long	0xbb1a
	.uleb128 0xe
	.long	0x4d9e
	.long	0xbb55
	.uleb128 0xf
	.long	0x33f
	.byte	0x66
	.byte	0
	.uleb128 0x32
	.long	.LASF2553
	.byte	0x1
	.value	0x2ab2
	.long	0xbb6b
	.uleb128 0x9
	.byte	0x3
	.quad	bdesc_2arg
	.uleb128 0xc
	.long	0xbb45
	.uleb128 0xe
	.long	0x4d9e
	.long	0xbb80
	.uleb128 0xf
	.long	0x33f
	.byte	0x8
	.byte	0
	.uleb128 0x32
	.long	.LASF2554
	.byte	0x1
	.value	0x2b32
	.long	0xbb96
	.uleb128 0x9
	.byte	0x3
	.quad	bdesc_1arg
	.uleb128 0xc
	.long	0xbb70
	.uleb128 0x47
	.long	.LASF2555
	.byte	0x1
	.value	0x15b
	.long	0x4f95
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_cost
	.uleb128 0x48
	.long	.LASF2556
	.byte	0x5
	.byte	0x62
	.long	0x328
	.uleb128 0x47
	.long	.LASF2557
	.byte	0x1
	.value	0x166
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_use_leave
	.uleb128 0x47
	.long	.LASF2558
	.byte	0x1
	.value	0x167
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_push_memory
	.uleb128 0x47
	.long	.LASF2559
	.byte	0x1
	.value	0x168
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_zero_extend_with_and
	.uleb128 0x47
	.long	.LASF2560
	.byte	0x1
	.value	0x16b
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_use_bit_test
	.uleb128 0x47
	.long	.LASF2561
	.byte	0x1
	.value	0x16d
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_cmove
	.uleb128 0x47
	.long	.LASF2562
	.byte	0x1
	.value	0x16f
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_deep_branch
	.uleb128 0x47
	.long	.LASF2563
	.byte	0x1
	.value	0x170
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_branch_hints
	.uleb128 0x47
	.long	.LASF2564
	.byte	0x1
	.value	0x16c
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_unroll_strlen
	.uleb128 0x47
	.long	.LASF2565
	.byte	0x1
	.value	0x16a
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_double_with_add
	.uleb128 0x47
	.long	.LASF2566
	.byte	0x1
	.value	0x172
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_partial_reg_stall
	.uleb128 0x47
	.long	.LASF2567
	.byte	0x1
	.value	0x169
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_movx
	.uleb128 0x47
	.long	.LASF2568
	.byte	0x1
	.value	0x173
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_use_loop
	.uleb128 0x47
	.long	.LASF2569
	.byte	0x1
	.value	0x174
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_use_fiop
	.uleb128 0x47
	.long	.LASF2570
	.byte	0x1
	.value	0x175
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_use_mov0
	.uleb128 0x47
	.long	.LASF2571
	.byte	0x1
	.value	0x176
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_use_cltd
	.uleb128 0x47
	.long	.LASF2572
	.byte	0x1
	.value	0x177
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_read_modify_write
	.uleb128 0x47
	.long	.LASF2573
	.byte	0x1
	.value	0x178
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_read_modify
	.uleb128 0x47
	.long	.LASF2574
	.byte	0x1
	.value	0x179
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_split_long_moves
	.uleb128 0x47
	.long	.LASF2575
	.byte	0x1
	.value	0x17a
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_promote_QImode
	.uleb128 0x47
	.long	.LASF2576
	.byte	0x1
	.value	0x17b
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_single_stringop
	.uleb128 0x47
	.long	.LASF2577
	.byte	0x1
	.value	0x17e
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_himode_math
	.uleb128 0x47
	.long	.LASF2578
	.byte	0x1
	.value	0x17c
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_qimode_math
	.uleb128 0x47
	.long	.LASF2579
	.byte	0x1
	.value	0x17d
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_promote_qi_regs
	.uleb128 0x47
	.long	.LASF2580
	.byte	0x1
	.value	0x17f
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_promote_hi_regs
	.uleb128 0x47
	.long	.LASF2581
	.byte	0x1
	.value	0x184
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_integer_DFmode_moves
	.uleb128 0x47
	.long	.LASF2582
	.byte	0x1
	.value	0x182
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_add_esp_4
	.uleb128 0x47
	.long	.LASF2583
	.byte	0x1
	.value	0x183
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_add_esp_8
	.uleb128 0x47
	.long	.LASF2584
	.byte	0x1
	.value	0x180
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_sub_esp_4
	.uleb128 0x47
	.long	.LASF2585
	.byte	0x1
	.value	0x181
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_sub_esp_8
	.uleb128 0x47
	.long	.LASF2586
	.byte	0x1
	.value	0x185
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_partial_reg_dependency
	.uleb128 0x47
	.long	.LASF2587
	.byte	0x1
	.value	0x186
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_memory_mismatch_stall
	.uleb128 0x47
	.long	.LASF2588
	.byte	0x1
	.value	0x187
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_accumulate_outgoing_args
	.uleb128 0x47
	.long	.LASF2589
	.byte	0x1
	.value	0x188
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_prologue_using_move
	.uleb128 0x47
	.long	.LASF2590
	.byte	0x1
	.value	0x189
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_epilogue_using_move
	.uleb128 0x47
	.long	.LASF2591
	.byte	0x1
	.value	0x18a
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_decompose_lea
	.uleb128 0x47
	.long	.LASF2592
	.byte	0x1
	.value	0x18b
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_arch_always_fancy_math_387
	.uleb128 0x47
	.long	.LASF2593
	.byte	0x1
	.value	0x26a
	.long	0x328
	.uleb128 0x9
	.byte	0x3
	.quad	x86_prefetch_sse
	.uleb128 0x47
	.long	.LASF2594
	.byte	0x1
	.value	0x259
	.long	0x37e
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_cpu
	.uleb128 0x47
	.long	.LASF2595
	.byte	0x1
	.value	0x25c
	.long	0x3bc
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_fpmath
	.uleb128 0x47
	.long	.LASF2596
	.byte	0x1
	.value	0x25f
	.long	0x328
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_arch
	.uleb128 0xe
	.long	0x328
	.long	0xbf3c
	.uleb128 0xf
	.long	0x33f
	.byte	0x34
	.byte	0
	.uleb128 0x47
	.long	.LASF2597
	.byte	0x1
	.value	0x1b7
	.long	0xbf52
	.uleb128 0x9
	.byte	0x3
	.quad	dbx_register_map
	.uleb128 0xc
	.long	0xbf2c
	.uleb128 0x47
	.long	.LASF2598
	.byte	0x1
	.value	0x1c9
	.long	0xbf6d
	.uleb128 0x9
	.byte	0x3
	.quad	dbx64_register_map
	.uleb128 0xc
	.long	0xbf2c
	.uleb128 0x47
	.long	.LASF2599
	.byte	0x1
	.value	0x20a
	.long	0xbf88
	.uleb128 0x9
	.byte	0x3
	.quad	svr4_dbx_register_map
	.uleb128 0xc
	.long	0xbf2c
	.uleb128 0x47
	.long	.LASF2600
	.byte	0x1
	.value	0x24f
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_debug_arg_string
	.uleb128 0x47
	.long	.LASF2601
	.byte	0x1
	.value	0x24f
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_debug_addr_string
	.uleb128 0x47
	.long	.LASF2602
	.byte	0x1
	.value	0x255
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_asm_string
	.uleb128 0x47
	.long	.LASF2603
	.byte	0x1
	.value	0x256
	.long	0x9f6
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_asm_dialect
	.uleb128 0x47
	.long	.LASF2604
	.byte	0x1
	.value	0x251
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_cmodel_string
	.uleb128 0x47
	.long	.LASF2605
	.byte	0x1
	.value	0x253
	.long	0x9c4
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_cmodel
	.uleb128 0x47
	.long	.LASF2606
	.byte	0x1
	.value	0x262
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_cpu_string
	.uleb128 0x47
	.long	.LASF2607
	.byte	0x1
	.value	0x263
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_arch_string
	.uleb128 0x47
	.long	.LASF2608
	.byte	0x1
	.value	0x264
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_fpmath_string
	.uleb128 0x47
	.long	.LASF2609
	.byte	0x1
	.value	0x267
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_regparm_string
	.uleb128 0x47
	.long	.LASF2610
	.byte	0x1
	.value	0x272
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_align_loops_string
	.uleb128 0x47
	.long	.LASF2611
	.byte	0x1
	.value	0x275
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_align_jumps_string
	.uleb128 0x47
	.long	.LASF2612
	.byte	0x1
	.value	0x282
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_align_funcs_string
	.uleb128 0x47
	.long	.LASF2613
	.byte	0x1
	.value	0x278
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_preferred_stack_boundary_string
	.uleb128 0x47
	.long	.LASF2614
	.byte	0x1
	.value	0x27f
	.long	0xc77
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_branch_cost_string
	.uleb128 0x47
	.long	.LASF2615
	.byte	0x1
	.value	0x26d
	.long	0x328
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_regparm
	.uleb128 0x47
	.long	.LASF2616
	.byte	0x1
	.value	0x27b
	.long	0x328
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_preferred_stack_boundary
	.uleb128 0x47
	.long	.LASF2617
	.byte	0x1
	.value	0x27e
	.long	0x328
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_branch_cost
	.uleb128 0xe
	.long	0x3d6
	.long	0xc129
	.uleb128 0xf
	.long	0x33f
	.byte	0x34
	.byte	0
	.uleb128 0x47
	.long	.LASF2618
	.byte	0x1
	.value	0x19e
	.long	0xc13f
	.uleb128 0x9
	.byte	0x3
	.quad	regclass_map
	.uleb128 0xc
	.long	0xc119
	.uleb128 0x47
	.long	.LASF2619
	.byte	0x1
	.value	0x218
	.long	0x2d
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_compare_op0
	.uleb128 0x47
	.long	.LASF2620
	.byte	0x1
	.value	0x219
	.long	0x2d
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_compare_op1
	.uleb128 0x48
	.long	.LASF2621
	.byte	0x8
	.byte	0xaa
	.long	0xc4b
	.uleb128 0xe
	.long	0xc77
	.long	0xc18b
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x48
	.long	.LASF2622
	.byte	0xa
	.byte	0x29
	.long	0xc196
	.uleb128 0xc
	.long	0xc17b
	.uleb128 0xe
	.long	0xe38
	.long	0xc1ab
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x48
	.long	.LASF404
	.byte	0xa
	.byte	0x34
	.long	0xc1b6
	.uleb128 0xc
	.long	0xc19b
	.uleb128 0xe
	.long	0xa32
	.long	0xc1cb
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x48
	.long	.LASF2623
	.byte	0xa
	.byte	0x50
	.long	0xc1d6
	.uleb128 0xc
	.long	0xc1bb
	.uleb128 0xe
	.long	0xa39
	.long	0xc1eb
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x48
	.long	.LASF2624
	.byte	0xa
	.byte	0x60
	.long	0xc1f6
	.uleb128 0xc
	.long	0xc1db
	.uleb128 0xe
	.long	0xa32
	.long	0xc20b
	.uleb128 0xf
	.long	0x33f
	.byte	0x98
	.byte	0
	.uleb128 0x48
	.long	.LASF2625
	.byte	0x2
	.byte	0x36
	.long	0xc216
	.uleb128 0xc
	.long	0xc1fb
	.uleb128 0xe
	.long	0xc77
	.long	0xc22b
	.uleb128 0xf
	.long	0x33f
	.byte	0x98
	.byte	0
	.uleb128 0x48
	.long	.LASF2626
	.byte	0x2
	.byte	0x3c
	.long	0xc236
	.uleb128 0xc
	.long	0xc21b
	.uleb128 0xe
	.long	0xa6a
	.long	0xc24b
	.uleb128 0xf
	.long	0x33f
	.byte	0x98
	.byte	0
	.uleb128 0x48
	.long	.LASF2627
	.byte	0x2
	.byte	0x3f
	.long	0xc256
	.uleb128 0xc
	.long	0xc23b
	.uleb128 0x49
	.long	.LASF2628
	.byte	0x2
	.value	0x568
	.long	0x328
	.uleb128 0xe
	.long	0x2d
	.long	0xc277
	.uleb128 0xf
	.long	0x33f
	.byte	0x80
	.byte	0
	.uleb128 0x49
	.long	.LASF2629
	.byte	0x2
	.value	0x611
	.long	0xc267
	.uleb128 0xe
	.long	0x2d
	.long	0xc299
	.uleb128 0xf
	.long	0x33f
	.byte	0x2
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x49
	.long	.LASF2630
	.byte	0x2
	.value	0x619
	.long	0xc283
	.uleb128 0xe
	.long	0x2d
	.long	0xc2b5
	.uleb128 0xf
	.long	0x33f
	.byte	0xa
	.byte	0
	.uleb128 0x49
	.long	.LASF2631
	.byte	0x2
	.value	0x652
	.long	0xc2a5
	.uleb128 0x49
	.long	.LASF2632
	.byte	0x2
	.value	0x660
	.long	0x2d
	.uleb128 0x49
	.long	.LASF2633
	.byte	0x2
	.value	0x6d2
	.long	0x328
	.uleb128 0x49
	.long	.LASF2634
	.byte	0x2
	.value	0x6d7
	.long	0x328
	.uleb128 0x49
	.long	.LASF2635
	.byte	0x2
	.value	0x6e3
	.long	0x328
	.uleb128 0xe
	.long	0xc77
	.long	0xc301
	.uleb128 0xf
	.long	0x33f
	.byte	0xff
	.byte	0
	.uleb128 0x48
	.long	.LASF2636
	.byte	0x4
	.byte	0x41
	.long	0xc2f1
	.uleb128 0xe
	.long	0x123
	.long	0xc31c
	.uleb128 0xf
	.long	0x33f
	.byte	0x32
	.byte	0
	.uleb128 0x49
	.long	.LASF2637
	.byte	0x4
	.value	0x79b
	.long	0xc30c
	.uleb128 0xe
	.long	0x123
	.long	0xc338
	.uleb128 0xf
	.long	0x33f
	.byte	0xa
	.byte	0
	.uleb128 0x49
	.long	.LASF2638
	.byte	0x4
	.value	0x7f8
	.long	0xc328
	.uleb128 0x49
	.long	.LASF2639
	.byte	0x4
	.value	0xa98
	.long	0x123
	.uleb128 0x48
	.long	.LASF2640
	.byte	0x16
	.byte	0x9d
	.long	0xc35b
	.uleb128 0x3
	.byte	0x8
	.long	0xa47
	.uleb128 0xe
	.long	0xa6a
	.long	0xc371
	.uleb128 0xf
	.long	0x33f
	.byte	0x34
	.byte	0
	.uleb128 0x48
	.long	.LASF2641
	.byte	0x16
	.byte	0xa2
	.long	0xc361
	.uleb128 0x49
	.long	.LASF2642
	.byte	0x17
	.value	0x1e5
	.long	0xb9d0
	.uleb128 0x49
	.long	.LASF2643
	.byte	0x17
	.value	0x18b
	.long	0xc361
	.uleb128 0x49
	.long	.LASF2644
	.byte	0x17
	.value	0x196
	.long	0xc361
	.uleb128 0x49
	.long	.LASF2645
	.byte	0x17
	.value	0x1be
	.long	0xbf2c
	.uleb128 0x49
	.long	.LASF2646
	.byte	0x18
	.value	0x1a7
	.long	0x48bf
	.uleb128 0x49
	.long	.LASF2647
	.byte	0x18
	.value	0x1b5
	.long	0x328
	.uleb128 0x49
	.long	.LASF2648
	.byte	0x18
	.value	0x1c0
	.long	0x328
	.uleb128 0x49
	.long	.LASF2649
	.byte	0x18
	.value	0x1d2
	.long	0x38
	.uleb128 0x48
	.long	.LASF2650
	.byte	0x19
	.byte	0x3d
	.long	0x328
	.uleb128 0x48
	.long	.LASF2651
	.byte	0x19
	.byte	0x41
	.long	0x328
	.uleb128 0x48
	.long	.LASF2652
	.byte	0x19
	.byte	0xea
	.long	0x328
	.uleb128 0x49
	.long	.LASF2653
	.byte	0x19
	.value	0x13a
	.long	0x328
	.uleb128 0x49
	.long	.LASF2654
	.byte	0x19
	.value	0x15a
	.long	0x328
	.uleb128 0x49
	.long	.LASF2655
	.byte	0x19
	.value	0x195
	.long	0x328
	.uleb128 0x49
	.long	.LASF2656
	.byte	0x19
	.value	0x1c8
	.long	0x328
	.uleb128 0x49
	.long	.LASF2657
	.byte	0x19
	.value	0x1d5
	.long	0x328
	.uleb128 0x49
	.long	.LASF2658
	.byte	0x19
	.value	0x244
	.long	0x328
	.uleb128 0x49
	.long	.LASF2659
	.byte	0x19
	.value	0x253
	.long	0x328
	.uleb128 0x49
	.long	.LASF2660
	.byte	0x19
	.value	0x255
	.long	0x328
	.uleb128 0x49
	.long	.LASF2661
	.byte	0x19
	.value	0x256
	.long	0x328
	.uleb128 0x49
	.long	.LASF2662
	.byte	0x19
	.value	0x258
	.long	0x328
	.uleb128 0x49
	.long	.LASF2663
	.byte	0x19
	.value	0x25c
	.long	0x328
	.uleb128 0x49
	.long	.LASF2664
	.byte	0xf
	.value	0x1e4
	.long	0x2988
	.uleb128 0x2c
	.long	0xc498
	.uleb128 0x28
	.long	0x2988
	.byte	0
	.uleb128 0x49
	.long	.LASF2665
	.byte	0xf
	.value	0x23e
	.long	0xc4a4
	.uleb128 0x3
	.byte	0x8
	.long	0xc48d
	.uleb128 0x49
	.long	.LASF2666
	.byte	0xf
	.value	0x23f
	.long	0xc4a4
	.uleb128 0x49
	.long	.LASF2667
	.byte	0xf
	.value	0x243
	.long	0xc4a4
	.uleb128 0x48
	.long	.LASF1298
	.byte	0x11
	.byte	0xcb
	.long	0x3389
	.uleb128 0xe
	.long	0x3520
	.long	0xc4d8
	.uleb128 0x4a
	.byte	0
	.uleb128 0x48
	.long	.LASF1317
	.byte	0x11
	.byte	0xf9
	.long	0xc4e3
	.uleb128 0xc
	.long	0xc4cd
	.uleb128 0xe
	.long	0x453d
	.long	0xc4f8
	.uleb128 0xf
	.long	0x33f
	.byte	0x30
	.byte	0
	.uleb128 0x48
	.long	.LASF2668
	.byte	0x14
	.byte	0x9b
	.long	0xc4e8
	.uleb128 0x47
	.long	.LASF2669
	.byte	0x1
	.value	0x337
	.long	0x4a69
	.uleb128 0x9
	.byte	0x3
	.quad	targetm
	.uleb128 0x47
	.long	.LASF2670
	.byte	0x1
	.value	0x16e
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_3dnow_a
	.uleb128 0x47
	.long	.LASF2671
	.byte	0x1
	.value	0x171
	.long	0x323
	.uleb128 0x9
	.byte	0x3
	.quad	x86_use_sahf
	.uleb128 0xe
	.long	0x2eb9
	.long	0xc555
	.uleb128 0xf
	.long	0x33f
	.byte	0x3
	.byte	0
	.uleb128 0x47
	.long	.LASF2672
	.byte	0x1
	.value	0x4ca
	.long	0xc56b
	.uleb128 0x9
	.byte	0x3
	.quad	ix86_attribute_table
	.uleb128 0xc
	.long	0xc545
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x21
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x22
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x23
	.uleb128 0x17
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x24
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x25
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x26
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x27
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x28
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x29
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2a
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x2b
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2c
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2d
	.uleb128 0x15
	.byte	0
	.uleb128 0x27
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x2e
	.uleb128 0x15
	.byte	0
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2f
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x30
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x32
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x33
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.byte	0
	.byte	0
	.uleb128 0x34
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x35
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x36
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x37
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x38
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x39
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3a
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3b
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x34
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3c
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3d
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x3e
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x3f
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x40
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x41
	.uleb128 0xa
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x42
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x43
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x44
	.uleb128 0xa
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x45
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x46
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x47
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x48
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x49
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x4a
	.uleb128 0x21
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.LBB39-.Ltext0
	.quad	.LBE39-.Ltext0
	.quad	.LBB41-.Ltext0
	.quad	.LBE41-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF1666:
	.string	"CODE_FOR_fix_trunctfsi2"
.LASF266:
	.string	"IX86_BUILTIN_PFMUL"
.LASF342:
	.string	"long long int"
.LASF1153:
	.string	"TI_V16SF_TYPE"
.LASF2370:
	.string	"scratch1"
.LASF2371:
	.string	"scratch2"
.LASF2372:
	.string	"scratch3"
.LASF2373:
	.string	"scratch4"
.LASF1038:
	.string	"original_arg_vector"
.LASF278:
	.string	"IX86_BUILTIN_PFPNACC"
.LASF1243:
	.string	"MEMORY_LOAD"
.LASF2506:
	.string	"ix86_expand_store_builtin"
.LASF847:
	.string	"BUILT_IN_STRCSPN"
.LASF2397:
	.string	"link"
.LASF537:
	.string	"SS_MINUS"
.LASF2156:
	.string	"reg_no_sp_operand"
.LASF110:
	.string	"IX86_BUILTIN_CMPEQPS"
.LASF1093:
	.string	"malloc_flag"
.LASF1775:
	.string	"CODE_FOR_insv"
.LASF743:
	.string	"RROTATE_EXPR"
.LASF526:
	.string	"RANGE_REG"
.LASF659:
	.string	"IDENTIFIER_NODE"
.LASF223:
	.string	"IX86_BUILTIN_PSRLD"
.LASF215:
	.string	"IX86_BUILTIN_PSADBW"
.LASF943:
	.string	"real"
.LASF2481:
	.string	"v4sf_ftype_v4sf_pv2si"
.LASF330:
	.string	"__pad1"
.LASF331:
	.string	"__pad2"
.LASF332:
	.string	"__pad3"
.LASF333:
	.string	"__pad4"
.LASF334:
	.string	"__pad5"
.LASF224:
	.string	"IX86_BUILTIN_PSRLQ"
.LASF933:
	.string	"unused_1"
.LASF222:
	.string	"IX86_BUILTIN_PSRLW"
.LASF2457:
	.string	"v4si_ftype_v4sf_v4sf"
.LASF298:
	.string	"long unsigned int"
.LASF1650:
	.string	"CODE_FOR_extendsidi2"
.LASF1039:
	.string	"original_decl_initial"
.LASF2047:
	.string	"node"
.LASF1254:
	.string	"PPRO_UOPS_FEW"
.LASF1219:
	.string	"TYPE_FDIV"
.LASF2602:
	.string	"ix86_asm_string"
.LASF1253:
	.string	"PPRO_UOPS_ONE"
.LASF748:
	.string	"BIT_NOT_EXPR"
.LASF2554:
	.string	"bdesc_1arg"
.LASF2426:
	.string	"ix86_sched_reorder_ppro"
.LASF1137:
	.string	"TI_LONG_DOUBLE_TYPE"
.LASF568:
	.string	"rtmem"
.LASF838:
	.string	"BUILT_IN_STRNCAT"
.LASF2619:
	.string	"ix86_compare_op0"
.LASF2620:
	.string	"ix86_compare_op1"
.LASF1751:
	.string	"CODE_FOR_x86_shift_adj_1"
.LASF1155:
	.string	"TI_V8HI_TYPE"
.LASF1757:
	.string	"CODE_FOR_x86_shift_adj_3"
.LASF1699:
	.string	"CODE_FOR_umulditi3"
.LASF482:
	.string	"COND"
.LASF1749:
	.string	"CODE_FOR_one_cmplqi2"
.LASF2527:
	.string	"x86_order_regs_for_local_alloc"
.LASF483:
	.string	"COMPARE"
.LASF1892:
	.string	"OTI_umul_widen"
.LASF95:
	.string	"regno"
.LASF566:
	.string	"rtbit"
.LASF613:
	.string	"REG_SAVE_NOTE"
.LASF397:
	.string	"CCGCmode"
.LASF2605:
	.string	"ix86_cmodel"
.LASF744:
	.string	"BIT_IOR_EXPR"
.LASF547:
	.string	"max_after_base"
.LASF1874:
	.string	"CODE_FOR_movv2sf"
.LASF1424:
	.string	"CODE_FOR_sqrtsf2_i387"
.LASF1871:
	.string	"CODE_FOR_movv2si"
.LASF159:
	.string	"IX86_BUILTIN_LOADUPS"
.LASF1933:
	.string	"bitmap_element_def"
.LASF55:
	.string	"PROCESSOR_PENTIUM"
.LASF1443:
	.string	"CODE_FOR_strmovhi_rex_1"
.LASF782:
	.string	"FDESC_EXPR"
.LASF1453:
	.string	"CODE_FOR_strsetsi_rex_1"
.LASF1444:
	.string	"CODE_FOR_strmovqi_1"
.LASF123:
	.string	"IX86_BUILTIN_CMPEQSS"
.LASF2251:
	.string	"split_di"
.LASF1907:
	.string	"OTI_rotl"
.LASF2542:
	.string	"hi_reg_name"
.LASF1840:
	.string	"CODE_FOR_clrstrdi"
.LASF725:
	.string	"CEIL_MOD_EXPR"
.LASF1117:
	.string	"TI_UINTQI_TYPE"
.LASF1872:
	.string	"CODE_FOR_movv4hi"
.LASF1623:
	.string	"CODE_FOR_pswapdv2sf2"
.LASF1081:
	.string	"ignored_flag"
.LASF1193:
	.string	"TYPE_OTHER"
.LASF2475:
	.string	"di_ftype_void"
.LASF1617:
	.string	"CODE_FOR_pfrcpit1v2sf3"
.LASF536:
	.string	"US_PLUS"
.LASF439:
	.string	"SEQUENCE"
.LASF1103:
	.string	"section_name"
.LASF2363:
	.string	"counter_mode"
.LASF2199:
	.string	"total_size"
.LASF455:
	.string	"ASM_INPUT"
.LASF1063:
	.string	"limit_stack"
.LASF1322:
	.string	"EXPAND_NORMAL"
.LASF750:
	.string	"TRUTH_ORIF_EXPR"
.LASF477:
	.string	"LABEL_REF"
.LASF246:
	.string	"IX86_BUILTIN_UNPCKHPS"
.LASF41:
	.string	"fp_load"
.LASF2395:
	.string	"found"
.LASF977:
	.string	"restrict_flag"
.LASF764:
	.string	"UNLE_EXPR"
.LASF47:
	.string	"sse_load"
.LASF1957:
	.string	"function_begin_epilogue"
.LASF367:
	.string	"XCmode"
.LASF1002:
	.string	"pretend_args_size"
.LASF737:
	.string	"MAX_EXPR"
.LASF2146:
	.string	"symbolic_operand"
.LASF2274:
	.string	"ix86_expand_move"
.LASF25:
	.string	"list"
.LASF869:
	.string	"BUILT_IN_RETURN"
.LASF845:
	.string	"BUILT_IN_STRPBRK"
.LASF142:
	.string	"IX86_BUILTIN_UCOMIEQSS"
.LASF2635:
	.string	"no_new_pseudos"
.LASF1347:
	.string	"CODE_FOR_zero_extendsidi2_32"
.LASF2419:
	.string	"bestinsnp"
.LASF2518:
	.string	"fcode"
.LASF949:
	.string	"tree_list"
.LASF983:
	.string	"name"
.LASF778:
	.string	"RTL_EXPR"
.LASF996:
	.string	"stmt"
.LASF406:
	.string	"MODE_INT"
.LASF2271:
	.string	"ix86_output_addr_diff_elt"
.LASF364:
	.string	"HCmode"
.LASF1227:
	.string	"TYPE_MMX"
.LASF36:
	.string	"move_ratio"
.LASF1620:
	.string	"CODE_FOR_pfrsqit1v2sf3"
.LASF2289:
	.string	"ix86_cc_mode"
.LASF2400:
	.string	"dep_memory"
.LASF1602:
	.string	"CODE_FOR_gev2sf3"
.LASF2488:
	.string	"v4hi_ftype_v4hi_v4hi"
.LASF1701:
	.string	"CODE_FOR_mulditi3"
.LASF2230:
	.string	"orig"
.LASF1477:
	.string	"CODE_FOR_allocate_stack_worker_rex64"
.LASF796:
	.string	"GOTO_EXPR"
.LASF1140:
	.string	"TI_CONST_PTR_TYPE"
.LASF2380:
	.string	"reg2"
.LASF1441:
	.string	"CODE_FOR_strmovsi_rex_1"
.LASF1925:
	.string	"OTI_ucmp"
.LASF726:
	.string	"FLOOR_MOD_EXPR"
.LASF391:
	.string	"V4DFmode"
.LASF850:
	.string	"BUILT_IN_SQRT"
.LASF1100:
	.string	"result"
.LASF586:
	.string	"frequency"
.LASF808:
	.string	"BUILT_IN_FRONTEND"
.LASF1688:
	.string	"CODE_FOR_subqi3"
.LASF2616:
	.string	"ix86_preferred_stack_boundary"
.LASF1622:
	.string	"CODE_FOR_pswapdv2si2"
.LASF1468:
	.string	"CODE_FOR_strlenqi_rex_1"
.LASF1126:
	.string	"TI_SIZE_ZERO"
.LASF580:
	.string	"cond_local_set"
.LASF1924:
	.string	"OTI_cmp"
.LASF2650:
	.string	"optimize"
.LASF1969:
	.string	"md_init"
.LASF1184:
	.string	"size_type_kind"
.LASF471:
	.string	"CONST"
.LASF399:
	.string	"CCNOmode"
.LASF2546:
	.string	"x86_64_int_return_registers"
.LASF2192:
	.string	"gen_push"
.LASF2672:
	.string	"ix86_attribute_table"
.LASF881:
	.string	"BUILT_IN_PUTCHAR_UNLOCKED"
.LASF656:
	.string	"GR_MAX"
.LASF2234:
	.string	"constant"
.LASF2588:
	.string	"x86_accumulate_outgoing_args"
.LASF88:
	.string	"INT_SSE_REGS"
.LASF1525:
	.string	"CODE_FOR_sse_comi"
.LASF627:
	.string	"NOTE_INSN_LOOP_CONT"
.LASF1201:
	.string	"TYPE_IMOVX"
.LASF672:
	.string	"OFFSET_TYPE"
.LASF519:
	.string	"UNSIGNED_FIX"
.LASF1909:
	.string	"OTI_smin"
.LASF432:
	.string	"DEFINE_PEEPHOLE2"
.LASF2066:
	.string	"next_param"
.LASF756:
	.string	"LE_EXPR"
.LASF2571:
	.string	"x86_use_cltd"
.LASF1681:
	.string	"CODE_FOR_addxf3"
.LASF2597:
	.string	"dbx_register_map"
.LASF1729:
	.string	"CODE_FOR_xordi3"
.LASF158:
	.string	"IX86_BUILTIN_LOADAPS"
.LASF443:
	.string	"SET_ATTR"
.LASF1955:
	.string	"function_prologue"
.LASF2415:
	.string	"e_ready"
.LASF640:
	.string	"NOTE_INSN_LIVE"
.LASF1390:
	.string	"CODE_FOR_testsi_1"
.LASF2248:
	.string	"cputaken"
.LASF998:
	.string	"varasm"
.LASF2165:
	.string	"second_code"
.LASF2614:
	.string	"ix86_branch_cost_string"
.LASF1541:
	.string	"CODE_FOR_addv2si3"
.LASF2418:
	.string	"cycles"
.LASF1916:
	.string	"OTI_negv"
.LASF1357:
	.string	"CODE_FOR_truncdfsf2_3"
.LASF2387:
	.string	"ix86_attr_length_immediate_default"
.LASF2123:
	.string	"ix86_va_arg"
.LASF1008:
	.string	"cannot_inline"
.LASF934:
	.string	"high"
.LASF2140:
	.string	"x86_64_movabs_operand"
.LASF2004:
	.string	"X86_64_NO_CLASS"
.LASF1630:
	.string	"CODE_FOR_cmpqi_ext_3"
.LASF1426:
	.string	"CODE_FOR_sqrtdf2_1_sse_only"
.LASF2386:
	.string	"memory_address_length"
.LASF691:
	.string	"TYPE_DECL"
.LASF1395:
	.string	"CODE_FOR_negdf2_ifs"
.LASF879:
	.string	"BUILT_IN_FWRITE"
.LASF1364:
	.string	"CODE_FOR_fix_truncsi_memory"
.LASF1923:
	.string	"OTI_cos"
.LASF1083:
	.string	"common_flag"
.LASF1015:
	.string	"x_cleanup_label"
.LASF610:
	.string	"REG_FRAME_RELATED_EXPR"
.LASF681:
	.string	"FUNCTION_TYPE"
.LASF1286:
	.string	"varasm_status"
.LASF804:
	.string	"EXC_PTR_EXPR"
.LASF754:
	.string	"TRUTH_NOT_EXPR"
.LASF2557:
	.string	"x86_use_leave"
.LASF1589:
	.string	"CODE_FOR_mmx_punpckhbw"
.LASF661:
	.string	"TREE_VEC"
.LASF82:
	.string	"SSE_REGS"
.LASF1954:
	.string	"integer"
.LASF2328:
	.string	"bypass"
.LASF1451:
	.string	"CODE_FOR_strsetdi_rex_1"
.LASF2574:
	.string	"x86_split_long_moves"
.LASF2584:
	.string	"x86_sub_esp_4"
.LASF926:
	.string	"lang_flag_0"
.LASF927:
	.string	"lang_flag_1"
.LASF928:
	.string	"lang_flag_2"
.LASF929:
	.string	"lang_flag_3"
.LASF635:
	.string	"NOTE_INSN_EH_REGION_BEG"
.LASF931:
	.string	"lang_flag_5"
.LASF932:
	.string	"lang_flag_6"
.LASF1098:
	.string	"lang_flag_7"
.LASF1462:
	.string	"CODE_FOR_rep_stosqi_rex64"
.LASF1358:
	.string	"CODE_FOR_truncdfsf2_sse_only"
.LASF2520:
	.string	"ix86_free_from_memory"
.LASF374:
	.string	"COImode"
.LASF1161:
	.string	"TI_MAIN_IDENTIFIER"
.LASF57:
	.string	"PROCESSOR_K6"
.LASF2592:
	.string	"x86_arch_always_fancy_math_387"
.LASF941:
	.string	"pointer"
.LASF2451:
	.string	"endlink"
.LASF405:
	.string	"MODE_RANDOM"
.LASF113:
	.string	"IX86_BUILTIN_CMPGTPS"
.LASF2254:
	.string	"split_ti"
.LASF1558:
	.string	"CODE_FOR_mmx_xordi3"
.LASF1580:
	.string	"CODE_FOR_lshrv4hi3"
.LASF1456:
	.string	"CODE_FOR_strsetqi_1"
.LASF1748:
	.string	"CODE_FOR_one_cmplhi2"
.LASF1787:
	.string	"CODE_FOR_sordered"
.LASF1082:
	.string	"in_system_header_flag"
.LASF1565:
	.string	"CODE_FOR_mmx_pinsrw"
.LASF707:
	.string	"INIT_EXPR"
.LASF599:
	.string	"REG_UNUSED"
.LASF2314:
	.string	"ix86_fp_jump_nontrivial_p"
.LASF1053:
	.string	"calls_longjmp"
.LASF1016:
	.string	"x_return_label"
.LASF345:
	.string	"BImode"
.LASF2008:
	.string	"X86_64_SSESF_CLASS"
.LASF1050:
	.string	"returns_pointer"
.LASF2523:
	.string	"ix86_register_move_cost"
.LASF168:
	.string	"IX86_BUILTIN_LOADLPS"
.LASF1591:
	.string	"CODE_FOR_mmx_punpckhdq"
.LASF1394:
	.string	"CODE_FOR_negdf2_memory"
.LASF1216:
	.string	"TYPE_FOP1"
.LASF521:
	.string	"SIGN_EXTRACT"
.LASF1170:
	.string	"itk_unsigned_int"
.LASF777:
	.string	"UNSAVE_EXPR"
.LASF2642:
	.string	"reg_names"
.LASF1089:
	.string	"weak_flag"
.LASF2379:
	.string	"end_0_label"
.LASF138:
	.string	"IX86_BUILTIN_COMILESS"
.LASF1517:
	.string	"CODE_FOR_sse_nandti3"
.LASF2510:
	.string	"ix86_expand_sse_compare"
.LASF282:
	.string	"IX86_BUILTIN_SSE_ZERO"
.LASF468:
	.string	"CONST_DOUBLE"
.LASF1852:
	.string	"CODE_FOR_movdicc"
.LASF271:
	.string	"IX86_BUILTIN_PFRSQRT"
.LASF53:
	.string	"PROCESSOR_I386"
.LASF738:
	.string	"ABS_EXPR"
.LASF198:
	.string	"IX86_BUILTIN_PAVGW"
.LASF1762:
	.string	"CODE_FOR_lshrsi3"
.LASF1830:
	.string	"CODE_FOR_movstrsi"
.LASF789:
	.string	"POSTDECREMENT_EXPR"
.LASF100:
	.string	"CUMULATIVE_ARGS"
.LASF417:
	.string	"INCLUDE"
.LASF1683:
	.string	"CODE_FOR_adddf3"
.LASF1943:
	.string	"dest"
.LASF258:
	.string	"IX86_BUILTIN_PF2ID"
.LASF464:
	.string	"RETURN"
.LASF2189:
	.string	"load_pic_register"
.LASF408:
	.string	"MODE_PARTIAL_INT"
.LASF1405:
	.string	"CODE_FOR_ashrsi3_31"
.LASF1407:
	.string	"CODE_FOR_setcc_2"
.LASF2044:
	.string	"override_options"
.LASF2014:
	.string	"ppro_sched_data"
.LASF276:
	.string	"IX86_BUILTIN_PF2IW"
.LASF2640:
	.string	"reg_renumber"
.LASF875:
	.string	"BUILT_IN_PUTS"
.LASF2178:
	.string	"long_memory_operand"
.LASF2049:
	.string	"no_add_attrs"
.LASF1673:
	.string	"CODE_FOR_floatsisf2"
.LASF478:
	.string	"SYMBOL_REF"
.LASF897:
	.string	"BUILT_IN_INIT_DWARF_REG_SIZES"
.LASF2674:
	.string	"i386.c"
.LASF1148:
	.string	"TI_UV4HI_TYPE"
.LASF1707:
	.string	"CODE_FOR_mulxf3"
.LASF1898:
	.string	"OTI_smod"
.LASF1994:
	.string	"outgoing_arguments_size"
.LASF126:
	.string	"IX86_BUILTIN_CMPGTSS"
.LASF2409:
	.string	"ix86_sched_init"
.LASF2428:
	.string	"ppro_done"
.LASF2336:
	.string	"compare_seq"
.LASF1283:
	.string	"x_pending_chain"
.LASF2499:
	.string	"arglist"
.LASF1555:
	.string	"CODE_FOR_umulv4hi3_highpart"
.LASF1160:
	.string	"TI_V16QI_TYPE"
.LASF2401:
	.string	"dep_insn_code_number"
.LASF2478:
	.string	"maskmovq_args"
.LASF700:
	.string	"BUFFER_REF"
.LASF2162:
	.string	"sse_comparison_operator"
.LASF165:
	.string	"IX86_BUILTIN_MOVHLPS"
.LASF85:
	.string	"FP_SECOND_SSE_REGS"
.LASF1747:
	.string	"CODE_FOR_one_cmplsi2"
.LASF1025:
	.string	"x_context_display"
.LASF749:
	.string	"TRUTH_ANDIF_EXPR"
.LASF1123:
	.string	"TI_INTEGER_ONE"
.LASF2639:
	.string	"current_function_decl"
.LASF2043:
	.string	"pta_size"
.LASF2121:
	.string	"n_gpr"
.LASF846:
	.string	"BUILT_IN_STRSPN"
.LASF999:
	.string	"outer"
.LASF1476:
	.string	"CODE_FOR_allocate_stack_worker_1"
.LASF645:
	.string	"GR_PC"
.LASF540:
	.string	"US_TRUNCATE"
.LASF1869:
	.string	"CODE_FOR_movv4sf"
.LASF1870:
	.string	"CODE_FOR_movv4si"
.LASF1231:
	.string	"MODE_NONE"
.LASF1518:
	.string	"CODE_FOR_sse_iorti3"
.LASF1311:
	.string	"insn_gen_fn"
.LASF830:
	.string	"BUILT_IN_BCMP"
.LASF51:
	.string	"simultaneous_prefetches"
.LASF1275:
	.string	"x_regno_reg_rtx"
.LASF554:
	.string	"size"
.LASF814:
	.string	"BUILT_IN_LABS"
.LASF2460:
	.string	"v4sf_ftype_v4sf_int"
.LASF997:
	.string	"emit"
.LASF1527:
	.string	"CODE_FOR_sse_unpckhps"
.LASF768:
	.string	"IN_EXPR"
.LASF794:
	.string	"GOTO_SUBROUTINE_EXPR"
.LASF145:
	.string	"IX86_BUILTIN_UCOMIGTSS"
.LASF1692:
	.string	"CODE_FOR_subsf3"
.LASF1677:
	.string	"CODE_FOR_adddi3"
.LASF570:
	.string	"first"
.LASF2301:
	.string	"ix86_fp_comparison_fcomi_cost"
.LASF1192:
	.string	"attr_type"
.LASF2290:
	.string	"ix86_use_fcomi_compare"
.LASF469:
	.string	"CONST_VECTOR"
.LASF2427:
	.string	"cur_uops"
.LASF1893:
	.string	"OTI_sdiv"
.LASF739:
	.string	"FFS_EXPR"
.LASF921:
	.string	"public_flag"
.LASF1537:
	.string	"CODE_FOR_cvtss2si"
.LASF422:
	.string	"MATCH_DUP"
.LASF1182:
	.string	"handler"
.LASF900:
	.string	"BUILT_IN_EH_RETURN"
.LASF626:
	.string	"NOTE_INSN_LOOP_END"
.LASF2182:
	.string	"symbolic_reference_mentioned_p"
.LASF3:
	.string	"call"
.LASF412:
	.string	"MODE_VECTOR_INT"
.LASF2:
	.string	"jump"
.LASF2003:
	.string	"x86_64_reg_class"
.LASF2449:
	.string	"ix86_init_builtins"
.LASF630:
	.string	"NOTE_INSN_FUNCTION_END"
.LASF2568:
	.string	"x86_use_loop"
.LASF747:
	.string	"BIT_ANDTC_EXPR"
.LASF1818:
	.string	"CODE_FOR_call_value_pop"
.LASF336:
	.string	"_unused2"
.LASF2119:
	.string	"valist"
.LASF1821:
	.string	"CODE_FOR_untyped_call"
.LASF818:
	.string	"BUILT_IN_LLABS"
.LASF1307:
	.string	"n_dups"
.LASF1388:
	.string	"CODE_FOR_udivmoddi4"
.LASF297:
	.string	"size_t"
.LASF840:
	.string	"BUILT_IN_STRNCPY"
.LASF1293:
	.string	"language_function"
.LASF1120:
	.string	"TI_UINTDI_TYPE"
.LASF1492:
	.string	"CODE_FOR_sse_movntv4sf"
.LASF745:
	.string	"BIT_XOR_EXPR"
.LASF1331:
	.string	"OPTAB_LIB_WIDEN"
.LASF2078:
	.string	"mode_alignment"
.LASF1629:
	.string	"CODE_FOR_cmpsi_1"
.LASF2422:
	.string	"currentcycles"
.LASF906:
	.string	"BUILT_IN_EXPECT"
.LASF556:
	.string	"mem_attrs"
.LASF522:
	.string	"ZERO_EXTRACT"
.LASF696:
	.string	"NAMESPACE_DECL"
.LASF765:
	.string	"UNGT_EXPR"
.LASF2079:
	.string	"examine_argument"
.LASF1483:
	.string	"CODE_FOR_movv2si_internal"
.LASF2678:
	.string	"ix86_issue_rate"
.LASF2020:
	.string	"icode"
.LASF2100:
	.string	"ix86_libcall_value"
.LASF268:
	.string	"IX86_BUILTIN_PFRCPIT1"
.LASF269:
	.string	"IX86_BUILTIN_PFRCPIT2"
.LASF1481:
	.string	"CODE_FOR_movv8qi_internal"
.LASF48:
	.string	"sse_store"
.LASF351:
	.string	"OImode"
.LASF1513:
	.string	"CODE_FOR_vmrsqrtv4sf2"
.LASF2257:
	.string	"is_sse"
.LASF976:
	.string	"packed_flag"
.LASF1466:
	.string	"CODE_FOR_cmpstrqi_rex_1"
.LASF1333:
	.string	"insn_code"
.LASF844:
	.string	"BUILT_IN_STRSTR"
.LASF1281:
	.string	"x_apply_args_value"
.LASF1031:
	.string	"x_temp_slots"
.LASF1884:
	.string	"OTI_addv"
.LASF1839:
	.string	"CODE_FOR_clrstrsi"
.LASF1252:
	.string	"attr_ppro_uops"
.LASF1409:
	.string	"CODE_FOR_doloop_end_internal"
.LASF67:
	.string	"AREG"
.LASF712:
	.string	"METHOD_CALL_EXPR"
.LASF892:
	.string	"BUILT_IN_ISLESSGREATER"
.LASF1315:
	.string	"strict_low"
.LASF2240:
	.string	"orig_x"
.LASF2459:
	.string	"int_ftype_v8qi"
.LASF1052:
	.string	"calls_setjmp"
.LASF2137:
	.string	"x86_64_general_operand"
.LASF1011:
	.string	"x_nonlocal_labels"
.LASF1188:
	.string	"BITSIZETYPE"
.LASF2325:
	.string	"target1"
.LASF2326:
	.string	"target2"
.LASF1268:
	.string	"x_last_insn"
.LASF335:
	.string	"_mode"
.LASF1506:
	.string	"CODE_FOR_mulv4sf3"
.LASF2570:
	.string	"x86_use_mov0"
.LASF1111:
	.string	"TI_ERROR_MARK"
.LASF1963:
	.string	"destructor"
.LASF1949:
	.string	"open_paren"
.LASF1101:
	.string	"initial"
.LASF1415:
	.string	"CODE_FOR_prologue_set_got"
.LASF87:
	.string	"FLOAT_INT_REGS"
.LASF1335:
	.string	"CODE_FOR_cmpdi_1_insn_rex64"
.LASF1887:
	.string	"OTI_smul"
.LASF1044:
	.string	"stack_alignment_needed"
.LASF2394:
	.string	"ix86_agi_dependant"
.LASF1498:
	.string	"CODE_FOR_sse_loadss"
.LASF1799:
	.string	"CODE_FOR_bltu"
.LASF594:
	.string	"REG_WAS_0"
.LASF1704:
	.string	"CODE_FOR_umulsi3_highpart"
.LASF1514:
	.string	"CODE_FOR_sqrtv4sf2"
.LASF193:
	.string	"IX86_BUILTIN_PAND"
.LASF2669:
	.string	"targetm"
.LASF1049:
	.string	"returns_pcc_struct"
.LASF863:
	.string	"BUILT_IN_CONSTANT_P"
.LASF1116:
	.string	"TI_INTTI_TYPE"
.LASF662:
	.string	"BLOCK"
.LASF206:
	.string	"IX86_BUILTIN_PINSRW"
.LASF1838:
	.string	"CODE_FOR_strmovqi_rex64"
.LASF1978:
	.string	"comp_type_attributes"
.LASF1983:
	.string	"init_builtins"
.LASF1421:
	.string	"CODE_FOR_ffssi_1"
.LASF1450:
	.string	"CODE_FOR_rep_movqi_rex64"
.LASF1488:
	.string	"CODE_FOR_sse_movmskps"
.LASF1436:
	.string	"CODE_FOR_cosxf2"
.LASF660:
	.string	"TREE_LIST"
.LASF907:
	.string	"END_BUILTINS"
.LASF757:
	.string	"GT_EXPR"
.LASF2438:
	.string	"srcref"
.LASF2361:
	.string	"srcreg"
.LASF2310:
	.string	"bypass_test"
.LASF527:
	.string	"RANGE_VAR"
.LASF415:
	.string	"rtx_code"
.LASF2366:
	.string	"ix86_expand_clrstr"
.LASF727:
	.string	"ROUND_MOD_EXPR"
.LASF531:
	.string	"VEC_MERGE"
.LASF2264:
	.string	"output_fp_compare"
.LASF642:
	.string	"NOTE_INSN_EXPECTED_VALUE"
.LASF819:
	.string	"BUILT_IN_IMAXABS"
.LASF1572:
	.string	"CODE_FOR_gtv4hi3"
.LASF2444:
	.string	"ix86_local_alignment"
.LASF148:
	.string	"IX86_BUILTIN_CVTPI2PS"
.LASF411:
	.string	"MODE_COMPLEX_FLOAT"
.LASF1398:
	.string	"CODE_FOR_absdf2_memory"
.LASF511:
	.string	"LTGT"
.LASF990:
	.string	"alias_set"
.LASF108:
	.string	"IX86_BUILTIN_SUBPS"
.LASF1599:
	.string	"CODE_FOR_subv2sf3"
.LASF1967:
	.string	"issue_rate"
.LASF1145:
	.string	"TI_UV4SI_TYPE"
.LASF693:
	.string	"PARM_DECL"
.LASF1060:
	.string	"is_thunk"
.LASF2293:
	.string	"pop0"
.LASF2677:
	.string	"ix86_frame_pointer_required"
.LASF2058:
	.string	"attr"
.LASF964:
	.string	"fragment_origin"
.LASF116:
	.string	"IX86_BUILTIN_CMPNLTPS"
.LASF787:
	.string	"PREDECREMENT_EXPR"
.LASF2569:
	.string	"x86_use_fiop"
.LASF386:
	.string	"V8DImode"
.LASF175:
	.string	"IX86_BUILTIN_MOVNTQ"
.LASF720:
	.string	"TRUNC_DIV_EXPR"
.LASF2298:
	.string	"ix86_fp_comparison_codes"
.LASF2231:
	.string	"legitimize_address"
.LASF2621:
	.string	"stderr"
.LASF589:
	.string	"reg_note"
.LASF2152:
	.string	"const1_operand"
.LASF1918:
	.string	"OTI_absv"
.LASF1604:
	.string	"CODE_FOR_pfmaxv2sf3"
.LASF1010:
	.string	"x_function_call_count"
.LASF2389:
	.string	"ix86_attr_length_address_default"
.LASF1614:
	.string	"CODE_FOR_floatv2si2"
.LASF2423:
	.string	"ix86_sched_reorder_pentium"
.LASF1500:
	.string	"CODE_FOR_sse_storess"
.LASF872:
	.string	"BUILT_IN_TRAP"
.LASF1455:
	.string	"CODE_FOR_strsethi_rex_1"
.LASF2562:
	.string	"x86_deep_branch"
.LASF575:
	.string	"head_tree"
.LASF2218:
	.string	"code0"
.LASF2219:
	.string	"code1"
.LASF2320:
	.string	"code2"
.LASF2321:
	.string	"code3"
.LASF1113:
	.string	"TI_INTHI_TYPE"
.LASF1820:
	.string	"CODE_FOR_call_value_exp"
.LASF1842:
	.string	"CODE_FOR_strsetsi"
.LASF84:
	.string	"FP_TOP_SSE_REGS"
.LASF208:
	.string	"IX86_BUILTIN_PMAXSW"
.LASF2273:
	.string	"clob"
.LASF2338:
	.string	"diff"
.LASF1171:
	.string	"itk_long"
.LASF2508:
	.string	"do_load"
.LASF2565:
	.string	"x86_double_with_add"
.LASF792:
	.string	"TRY_CATCH_EXPR"
.LASF2233:
	.string	"changed"
.LASF690:
	.string	"CONST_DECL"
.LASF1732:
	.string	"CODE_FOR_xorqi3"
.LASF2238:
	.string	"i386_dwarf_output_addr_const"
.LASF1702:
	.string	"CODE_FOR_mulsidi3"
.LASF2538:
	.string	"k6_cost"
.LASF786:
	.string	"IMAGPART_EXPR"
.LASF2052:
	.string	"ix86_comp_type_attributes"
.LASF2548:
	.string	"internal_label_prefix_len"
.LASF843:
	.string	"BUILT_IN_STRLEN"
.LASF1345:
	.string	"CODE_FOR_swaptf"
.LASF474:
	.string	"SUBREG"
.LASF1351:
	.string	"CODE_FOR_extendsidi2_rex64"
.LASF2533:
	.string	"size_cost"
.LASF1372:
	.string	"CODE_FOR_floathidf2"
.LASF1950:
	.string	"close_paren"
.LASF78:
	.string	"GENERAL_REGS"
.LASF1509:
	.string	"CODE_FOR_vmdivv4sf3"
.LASF2076:
	.string	"bases"
.LASF381:
	.string	"V4SImode"
.LASF753:
	.string	"TRUTH_XOR_EXPR"
.LASF2194:
	.string	"maybe_eh_return"
.LASF2467:
	.string	"v4hi_ftype_v8qi_v8qi"
.LASF658:
	.string	"ERROR_MARK"
.LASF2200:
	.string	"preferred_alignment"
.LASF1579:
	.string	"CODE_FOR_ashrv2si3"
.LASF1205:
	.string	"TYPE_IMUL"
.LASF109:
	.string	"IX86_BUILTIN_SUBSS"
.LASF209:
	.string	"IX86_BUILTIN_PMAXUB"
.LASF284:
	.string	"IX86_BUILTIN_MAX"
.LASF852:
	.string	"BUILT_IN_COS"
.LASF2658:
	.string	"frame_pointer_needed"
.LASF1968:
	.string	"variable_issue"
.LASF129:
	.string	"IX86_BUILTIN_CMPNLTSS"
.LASF2653:
	.string	"flag_omit_frame_pointer"
.LASF104:
	.string	"IX86_BUILTIN_DIVPS"
.LASF608:
	.string	"REG_SAVE_AREA"
.LASF2607:
	.string	"ix86_arch_string"
.LASF156:
	.string	"IX86_BUILTIN_MINPS"
.LASF895:
	.string	"BUILT_IN_DWARF_CFA"
.LASF326:
	.string	"_vtable_offset"
.LASF479:
	.string	"ADDRESSOF"
.LASF2543:
	.string	"qi_reg_name"
.LASF535:
	.string	"SS_PLUS"
.LASF910:
	.string	"side_effects_flag"
.LASF2118:
	.string	"ix86_va_start"
.LASF597:
	.string	"REG_NONNEG"
.LASF1827:
	.string	"CODE_FOR_ffssi2"
.LASF1434:
	.string	"CODE_FOR_cosdf2"
.LASF2221:
	.string	"ix86_find_base_term"
.LASF1566:
	.string	"CODE_FOR_mmx_pextrw"
.LASF798:
	.string	"EXIT_EXPR"
.LASF552:
	.string	"expr"
.LASF1659:
	.string	"CODE_FOR_truncxfdf2"
.LASF1679:
	.string	"CODE_FOR_addhi3"
.LASF2522:
	.string	"ix86_secondary_memory_needed"
.LASF1365:
	.string	"CODE_FOR_fix_truncsfsi_sse"
.LASF1272:
	.string	"regno_pointer_align_length"
.LASF2239:
	.string	"i386_simplify_dwarf_addr"
.LASF1146:
	.string	"TI_UV8HI_TYPE"
.LASF1289:
	.string	"machine_function"
.LASF2609:
	.string	"ix86_regparm_string"
.LASF1167:
	.string	"itk_short"
.LASF988:
	.string	"binfo"
.LASF2528:
	.string	"x86_output_mi_thunk"
.LASF1709:
	.string	"CODE_FOR_muldf3"
.LASF1203:
	.string	"TYPE_INCDEC"
.LASF1875:
	.string	"CODE_FOR_sfence"
.LASF1217:
	.string	"TYPE_FSGN"
.LASF2158:
	.string	"general_no_elim_operand"
.LASF1793:
	.string	"CODE_FOR_sltgt"
.LASF99:
	.string	"maybe_vaarg"
.LASF673:
	.string	"REFERENCE_TYPE"
.LASF1484:
	.string	"CODE_FOR_movv2sf_internal"
.LASF2406:
	.string	"ix86_safe_ppro_uops"
.LASF1230:
	.string	"MODE_UNKNOWN"
.LASF499:
	.string	"PRE_INC"
.LASF1418:
	.string	"CODE_FOR_eh_return_di"
.LASF2332:
	.string	"ix86_expand_setcc"
.LASF2308:
	.string	"scratch"
.LASF1380:
	.string	"CODE_FOR_addsi_1_zext"
.LASF354:
	.string	"PSImode"
.LASF2673:
	.string	"GNU C 4.8.1 -mtune=generic -march=x86-64 -g -fno-strict-aliasing -fstack-protector"
.LASF1300:
	.string	"operand_loc"
.LASF1267:
	.string	"x_first_insn"
.LASF197:
	.string	"IX86_BUILTIN_PAVGB"
.LASF2090:
	.string	"needed_sseregs"
.LASF502:
	.string	"PRE_MODIFY"
.LASF2539:
	.string	"athlon_cost"
.LASF389:
	.string	"V2DFmode"
.LASF2521:
	.string	"ix86_preferred_reload_class"
.LASF1343:
	.string	"CODE_FOR_popdi1"
.LASF1551:
	.string	"CODE_FOR_ussubv8qi3"
.LASF1984:
	.string	"expand_builtin"
.LASF105:
	.string	"IX86_BUILTIN_DIVSS"
.LASF1344:
	.string	"CODE_FOR_swapxf"
.LASF178:
	.string	"IX86_BUILTIN_PACKUSWB"
.LASF157:
	.string	"IX86_BUILTIN_MINSS"
.LASF2253:
	.string	"hi_half"
.LASF50:
	.string	"prefetch_block"
.LASF1215:
	.string	"TYPE_FOP"
.LASF1635:
	.string	"CODE_FOR_movsi"
.LASF2022:
	.string	"flag"
.LASF2350:
	.string	"ix86_split_ashrdi"
.LASF837:
	.string	"BUILT_IN_STRCAT"
.LASF609:
	.string	"REG_BR_PRED"
.LASF888:
	.string	"BUILT_IN_ISGREATER"
.LASF1478:
	.string	"CODE_FOR_trap"
.LASF2168:
	.string	"promotable_binary_operator"
.LASF2217:
	.string	"retval"
.LASF633:
	.string	"NOTE_INSN_DELETED_LABEL"
.LASF2670:
	.string	"x86_3dnow_a"
.LASF1074:
	.string	"linenum"
.LASF2311:
	.string	"intcmp_mode"
.LASF2296:
	.string	"op_mode"
.LASF1576:
	.string	"CODE_FOR_uminv8qi3"
.LASF2600:
	.string	"ix86_debug_arg_string"
.LASF247:
	.string	"IX86_BUILTIN_UNPCKLPS"
.LASF736:
	.string	"MIN_EXPR"
.LASF512:
	.string	"SIGN_EXTEND"
.LASF2549:
	.string	"x86_64_reg_class_name"
.LASF541:
	.string	"LAST_AND_UNUSED_RTX_CODE"
.LASF2161:
	.string	"non_q_regs_operand"
.LASF2575:
	.string	"x86_promote_QImode"
.LASF274:
	.string	"IX86_BUILTIN_PI2FD"
.LASF1855:
	.string	"CODE_FOR_movsfcc"
.LASF1211:
	.string	"TYPE_CALL"
.LASF832:
	.string	"BUILT_IN_INDEX"
.LASF2261:
	.string	"output_fix_trunc"
.LASF666:
	.string	"COMPLEX_TYPE"
.LASF2563:
	.string	"x86_branch_hints"
.LASF2576:
	.string	"x86_single_stringop"
.LASF2589:
	.string	"x86_prologue_using_move"
.LASF279:
	.string	"IX86_BUILTIN_PI2FW"
.LASF1105:
	.string	"saved_tree"
.LASF31:
	.string	"mult_bit"
.LASF1693:
	.string	"CODE_FOR_muldi3"
.LASF2378:
	.string	"align_4_label"
.LASF1144:
	.string	"TI_UV4SF_TYPE"
.LASF2555:
	.string	"ix86_cost"
.LASF387:
	.string	"V16QImode"
.LASF2466:
	.string	"v4sf_ftype_v4sf_v4sf_int"
.LASF2122:
	.string	"n_fpr"
.LASF2180:
	.string	"standard_80387_constant_p"
.LASF16:
	.string	"common"
.LASF2292:
	.string	"ix86_prepare_fp_compare_args"
.LASF1362:
	.string	"CODE_FOR_fix_truncdfdi_sse"
.LASF528:
	.string	"RANGE_LIVE"
.LASF714:
	.string	"CLEANUP_POINT_EXPR"
.LASF308:
	.string	"_flags"
.LASF2167:
	.string	"fcmov_comparison_operator"
.LASF2469:
	.string	"v4hi_ftype_v4hi_int"
.LASF448:
	.string	"JUMP_INSN"
.LASF1590:
	.string	"CODE_FOR_mmx_punpckhwd"
.LASF1475:
	.string	"CODE_FOR_sse_movdfcc_eq"
.LASF462:
	.string	"CLOBBER"
.LASF2275:
	.string	"ix86_expand_vector_move"
.LASF948:
	.string	"tree_identifier"
.LASF1114:
	.string	"TI_INTSI_TYPE"
.LASF2646:
	.string	"asm_out_file"
.LASF644:
	.string	"global_rtl_index"
.LASF56:
	.string	"PROCESSOR_PENTIUMPRO"
.LASF2534:
	.string	"i386_cost"
.LASF1680:
	.string	"CODE_FOR_addqi3"
.LASF1109:
	.string	"lang_decl"
.LASF1349:
	.string	"CODE_FOR_zero_extendhidi2"
.LASF1369:
	.string	"CODE_FOR_x86_fnstcw_1"
.LASF2046:
	.string	"level"
.LASF1633:
	.string	"CODE_FOR_cmpdf"
.LASF991:
	.string	"lang_specific"
.LASF1624:
	.string	"CODE_FOR_cmpdi"
.LASF362:
	.string	"TFmode"
.LASF1588:
	.string	"CODE_FOR_mmx_packuswb"
.LASF1411:
	.string	"CODE_FOR_return_internal"
.LASF836:
	.string	"BUILT_IN_MEMSET"
.LASF2585:
	.string	"x86_sub_esp_8"
.LASF318:
	.string	"_IO_backup_base"
.LASF1785:
	.string	"CODE_FOR_sleu"
.LASF1731:
	.string	"CODE_FOR_xorhi3"
.LASF91:
	.string	"LIM_REG_CLASSES"
.LASF1987:
	.string	"have_ctors_dtors"
.LASF426:
	.string	"MATCH_PAR_DUP"
.LASF1970:
	.string	"md_finish"
.LASF942:
	.string	"tree_complex"
.LASF2095:
	.string	"ix86_function_arg_boundary"
.LASF1221:
	.string	"TYPE_FCMOV"
.LASF360:
	.string	"DFmode"
.LASF582:
	.string	"global_live_at_end"
.LASF1999:
	.string	"stack_pointer_offset"
.LASF273:
	.string	"IX86_BUILTIN_PFSUBR"
.LASF2057:
	.string	"funtype"
.LASF5:
	.string	"volatil"
.LASF1263:
	.string	"sequence_rtl_expr"
.LASF2153:
	.string	"const248_operand"
.LASF2656:
	.string	"flag_pic"
.LASF1321:
	.string	"expand_modifier"
.LASF868:
	.string	"BUILT_IN_APPLY"
.LASF413:
	.string	"MODE_VECTOR_FLOAT"
.LASF1469:
	.string	"CODE_FOR_x86_movdicc_0_m1_rex64"
.LASF232:
	.string	"IX86_BUILTIN_PSRLQI"
.LASF1505:
	.string	"CODE_FOR_vmsubv4sf3"
.LASF1750:
	.string	"CODE_FOR_ashldi3"
.LASF2241:
	.string	"put_condition_code"
.LASF2088:
	.string	"tmpmode"
.LASF523:
	.string	"HIGH"
.LASF1058:
	.string	"contains_functions"
.LASF1350:
	.string	"CODE_FOR_zero_extendqidi2"
.LASF1592:
	.string	"CODE_FOR_mmx_punpcklbw"
.LASF2039:
	.string	"PTA_PREFETCH_SSE"
.LASF2111:
	.string	"next_cum"
.LASF752:
	.string	"TRUTH_OR_EXPR"
.LASF1982:
	.string	"ms_bitfield_layout_p"
.LASF912:
	.string	"addressable_flag"
.LASF678:
	.string	"RECORD_TYPE"
.LASF956:
	.string	"tree_block"
.LASF1312:
	.string	"insn_operand_data"
.LASF1845:
	.string	"CODE_FOR_strsethi_rex64"
.LASF1864:
	.string	"CODE_FOR_allocate_stack_worker"
.LASF1042:
	.string	"profile_label_no"
.LASF259:
	.string	"IX86_BUILTIN_PFACC"
.LASF1548:
	.string	"CODE_FOR_subv2si3"
.LASF2215:
	.string	"addr"
.LASF35:
	.string	"large_insn"
.LASF2124:
	.string	"rsize"
.LASF2035:
	.string	"pta_flags"
.LASF2461:
	.string	"v4sf_ftype_v4sf_v2si"
.LASF2362:
	.string	"destreg"
.LASF1406:
	.string	"CODE_FOR_lshrdi3_1"
.LASF310:
	.string	"_IO_read_end"
.LASF565:
	.string	"rt_cselib"
.LASF102:
	.string	"IX86_BUILTIN_ADDPS"
.LASF893:
	.string	"BUILT_IN_ISUNORDERED"
.LASF614:
	.string	"REG_MAYBE_DEAD"
.LASF972:
	.string	"string_flag"
.LASF1091:
	.string	"no_instrument_function_entry_exit"
.LASF19:
	.string	"vector"
.LASF1177:
	.string	"min_length"
.LASF260:
	.string	"IX86_BUILTIN_PFADD"
.LASF205:
	.string	"IX86_BUILTIN_PEXTRW"
.LASF2151:
	.string	"const0_operand"
.LASF428:
	.string	"DEFINE_INSN"
.LASF1422:
	.string	"CODE_FOR_sqrtsf2_1"
.LASF71:
	.string	"SIREG"
.LASF1730:
	.string	"CODE_FOR_xorsi3"
.LASF1594:
	.string	"CODE_FOR_mmx_punpckldq"
.LASF848:
	.string	"BUILT_IN_STRCHR"
.LASF317:
	.string	"_IO_save_base"
.LASF1608:
	.string	"CODE_FOR_pf2id"
.LASF1626:
	.string	"CODE_FOR_cmphi"
.LASF272:
	.string	"IX86_BUILTIN_PFSUB"
.LASF542:
	.string	"min_align"
.LASF1609:
	.string	"CODE_FOR_pf2iw"
.LASF162:
	.string	"IX86_BUILTIN_LOADSS"
.LASF2382:
	.string	"ix86_init_machine_status"
.LASF1889:
	.string	"OTI_smul_highpart"
.LASF49:
	.string	"mmxsse_to_integer"
.LASF1261:
	.string	"sequence_stack"
.LASF290:
	.string	"CM_LARGE"
.LASF1655:
	.string	"CODE_FOR_extenddftf2"
.LASF870:
	.string	"BUILT_IN_SETJMP"
.LASF2668:
	.string	"optab_table"
.LASF1246:
	.string	"MEMORY_UNKNOWN"
.LASF2227:
	.string	"reason_rtx"
.LASF2388:
	.string	"shortform"
.LASF1158:
	.string	"TI_V2SI_TYPE"
.LASF2432:
	.string	"n_ready"
.LASF2067:
	.string	"merge_classes"
.LASF1942:
	.string	"succ_next"
.LASF233:
	.string	"IX86_BUILTIN_PUNPCKHBW"
.LASF2002:
	.string	"disp"
.LASF2116:
	.string	"nsse_reg"
.LASF2206:
	.string	"use_mov"
.LASF427:
	.string	"MATCH_INSN"
.LASF314:
	.string	"_IO_write_end"
.LASF1569:
	.string	"CODE_FOR_eqv4hi3"
.LASF1873:
	.string	"CODE_FOR_movv8qi"
.LASF1495:
	.string	"CODE_FOR_sse_movlhps"
.LASF1073:
	.string	"filename"
.LASF1801:
	.string	"CODE_FOR_bgeu"
.LASF591:
	.string	"REG_INC"
.LASF1866:
	.string	"CODE_FOR_builtin_setjmp_receiver"
.LASF1992:
	.string	"frame"
.LASF2084:
	.string	"construct_container"
.LASF76:
	.string	"INDEX_REGS"
.LASF485:
	.string	"MINUS"
.LASF153:
	.string	"IX86_BUILTIN_CVTTSS2SI"
.LASF1946:
	.string	"edge"
.LASF255:
	.string	"IX86_BUILTIN_SFENCE"
.LASF1480:
	.string	"CODE_FOR_movv4si_internal"
.LASF103:
	.string	"IX86_BUILTIN_ADDSS"
.LASF995:
	.string	"function"
.LASF563:
	.string	"rttype"
.LASF2166:
	.string	"bypass_code"
.LASF1273:
	.string	"regno_pointer_align"
.LASF2243:
	.string	"suffix"
.LASF573:
	.string	"basic_block_def"
.LASF962:
	.string	"supercontext"
.LASF1090:
	.string	"non_addr_const_p"
.LASF800:
	.string	"LABELED_BLOCK_EXPR"
.LASF504:
	.string	"UNORDERED"
.LASF791:
	.string	"VA_ARG_EXPR"
.LASF249:
	.string	"IX86_BUILTIN_ANDNPS"
.LASF68:
	.string	"DREG"
.LASF235:
	.string	"IX86_BUILTIN_PUNPCKHDQ"
.LASF315:
	.string	"_IO_buf_base"
.LASF605:
	.string	"REG_BR_PROB"
.LASF770:
	.string	"CARD_EXPR"
.LASF1637:
	.string	"CODE_FOR_movstricthi"
.LASF2038:
	.string	"PTA_MMX"
.LASF1905:
	.string	"OTI_lshr"
.LASF2434:
	.string	"can_issue_more"
.LASF329:
	.string	"_offset"
.LASF2136:
	.string	"dest_mem"
.LASF226:
	.string	"IX86_BUILTIN_PSLLDI"
.LASF2106:
	.string	"record"
.LASF1567:
	.string	"CODE_FOR_mmx_pshufw"
.LASF1280:
	.string	"x_saveregs_value"
.LASF702:
	.string	"ARRAY_RANGE_REF"
.LASF407:
	.string	"MODE_FLOAT"
.LASF1095:
	.string	"pure_flag"
.LASF1663:
	.string	"CODE_FOR_fix_truncdfdi2"
.LASF974:
	.string	"needs_constructing_flag"
.LASF2018:
	.string	"builtin_description"
.LASF137:
	.string	"IX86_BUILTIN_COMILTSS"
.LASF1043:
	.string	"machine"
.LASF1528:
	.string	"CODE_FOR_sse_unpcklps"
.LASF2183:
	.string	"ix86_can_use_return_insn_p"
.LASF1397:
	.string	"CODE_FOR_abssf2_ifs"
.LASF356:
	.string	"QFmode"
.LASF1352:
	.string	"CODE_FOR_extendhidi2"
.LASF705:
	.string	"COMPOUND_EXPR"
.LASF92:
	.string	"ix86_args"
.LASF1660:
	.string	"CODE_FOR_trunctfdf2"
.LASF1559:
	.string	"CODE_FOR_mmx_clrdi"
.LASF2104:
	.string	"f_ovf"
.LASF495:
	.string	"SMAX"
.LASF1847:
	.string	"CODE_FOR_strsetqi_rex64"
.LASF1070:
	.string	"uses_eh_lsda"
.LASF1204:
	.string	"TYPE_ISHIFT"
.LASF1085:
	.string	"transparent_union"
.LASF2665:
	.string	"init_machine_status"
.LASF711:
	.string	"CALL_EXPR"
.LASF887:
	.string	"BUILT_IN_FPRINTF_UNLOCKED"
.LASF1510:
	.string	"CODE_FOR_rcpv4sf2"
.LASF2173:
	.string	"div_operator"
.LASF1684:
	.string	"CODE_FOR_addsf3"
.LASF1728:
	.string	"CODE_FOR_iorqi3"
.LASF742:
	.string	"LROTATE_EXPR"
.LASF2485:
	.string	"v4sf_ftype_v4sf"
.LASF716:
	.string	"WITH_RECORD_EXPR"
.LASF2550:
	.string	"pic_label_name"
.LASF1584:
	.string	"CODE_FOR_ashlv2si3"
.LASF841:
	.string	"BUILT_IN_STRCMP"
.LASF1363:
	.string	"CODE_FOR_fix_truncsi_nomemory"
.LASF2139:
	.string	"x86_64_nonmemory_operand"
.LASF2410:
	.string	"sched_verbose"
.LASF2342:
	.string	"ix86_expand_fp_movcc"
.LASF1921:
	.string	"OTI_sqrt"
.LASF2348:
	.string	"collisions"
.LASF1719:
	.string	"CODE_FOR_testqi_ccz_1"
.LASF505:
	.string	"ORDERED"
.LASF461:
	.string	"PREFETCH"
.LASF1260:
	.string	"next"
.LASF270:
	.string	"IX86_BUILTIN_PFRSQIT1"
.LASF463:
	.string	"CALL"
.LASF2331:
	.string	"second_probability"
.LASF1717:
	.string	"CODE_FOR_udivmodhi4"
.LASF899:
	.string	"BUILT_IN_EXTRACT_RETURN_ADDR"
.LASF2377:
	.string	"align_3_label"
.LASF2270:
	.string	"directive"
.LASF1428:
	.string	"CODE_FOR_sqrtxf2"
.LASF179:
	.string	"IX86_BUILTIN_PADDB"
.LASF181:
	.string	"IX86_BUILTIN_PADDD"
.LASF1615:
	.string	"CODE_FOR_pavgusb"
.LASF2630:
	.string	"const_tiny_rtx"
.LASF1142:
	.string	"TI_VA_LIST_TYPE"
.LASF1877:
	.string	"CODE_FOR_prefetch"
.LASF180:
	.string	"IX86_BUILTIN_PADDW"
.LASF506:
	.string	"UNEQ"
.LASF6:
	.string	"in_struct"
.LASF2494:
	.string	"v2sf_ftype_v2sf"
.LASF337:
	.string	"_IO_marker"
.LASF2103:
	.string	"f_fpr"
.LASF1189:
	.string	"SBITSIZETYPE"
.LASF2147:
	.string	"pic_symbolic_operand"
.LASF2098:
	.string	"valtype"
.LASF2468:
	.string	"v2si_ftype_v4hi_v4hi"
.LASF1618:
	.string	"CODE_FOR_pfrcpit2v2sf3"
.LASF2034:
	.string	"processor"
.LASF2497:
	.string	"safe_vector_operand"
.LASF2105:
	.string	"f_sav"
.LASF730:
	.string	"FIX_TRUNC_EXPR"
.LASF987:
	.string	"main_variant"
.LASF2214:
	.string	"ix86_decompose_address"
.LASF871:
	.string	"BUILT_IN_LONGJMP"
.LASF896:
	.string	"BUILT_IN_DWARF_FP_REGNUM"
.LASF1314:
	.string	"constraint"
.LASF1745:
	.string	"CODE_FOR_abstf2"
.LASF2171:
	.string	"binary_fp_operator"
.LASF1486:
	.string	"CODE_FOR_sse_movaps"
.LASF1386:
	.string	"CODE_FOR_udivqi3"
.LASF1472:
	.string	"CODE_FOR_sse_movsfcc"
.LASF2051:
	.string	"ix86_handle_regparm_attribute"
.LASF2159:
	.string	"nonmemory_no_elim_operand"
.LASF1958:
	.string	"function_epilogue"
.LASF1172:
	.string	"itk_unsigned_long"
.LASF2532:
	.string	"computed"
.LASF1378:
	.string	"CODE_FOR_floatditf2"
.LASF1099:
	.string	"arguments"
.LASF449:
	.string	"CALL_INSN"
.LASF1678:
	.string	"CODE_FOR_addsi3"
.LASF2330:
	.string	"bypass_probability"
.LASF507:
	.string	"UNGE"
.LASF1656:
	.string	"CODE_FOR_truncdfsf2"
.LASF1086:
	.string	"static_ctor_flag"
.LASF1169:
	.string	"itk_int"
.LASF1991:
	.string	"va_arg_size"
.LASF508:
	.string	"UNGT"
.LASF1340:
	.string	"CODE_FOR_popsi1"
.LASF13:
	.string	"num_elem"
.LASF1928:
	.string	"OTI_cbranch"
.LASF2283:
	.string	"ix86_match_ccmode"
.LASF2536:
	.string	"pentium_cost"
.LASF772:
	.string	"CONVERT_EXPR"
.LASF2207:
	.string	"allocate"
.LASF2573:
	.string	"x86_read_modify"
.LASF1876:
	.string	"CODE_FOR_sse_prologue_save"
.LASF606:
	.string	"REG_EXEC_COUNT"
.LASF1825:
	.string	"CODE_FOR_sibcall_epilogue"
.LASF285:
	.string	"cmodel"
.LASF1269:
	.string	"x_cur_insn_uid"
.LASF451:
	.string	"CODE_LABEL"
.LASF1971:
	.string	"reorder"
.LASF2676:
	.string	"_IO_lock_t"
.LASF2441:
	.string	"format_ptr"
.LASF149:
	.string	"IX86_BUILTIN_CVTPS2PI"
.LASF686:
	.string	"VECTOR_CST"
.LASF309:
	.string	"_IO_read_ptr"
.LASF344:
	.string	"VOIDmode"
.LASF1544:
	.string	"CODE_FOR_usaddv8qi3"
.LASF1627:
	.string	"CODE_FOR_cmpqi"
.LASF564:
	.string	"rt_addr_diff_vec_flags"
.LASF1389:
	.string	"CODE_FOR_udivmodsi4"
.LASF2448:
	.string	"ix86_setup_frame_addresses"
.LASF119:
	.string	"IX86_BUILTIN_CMPNGEPS"
.LASF1361:
	.string	"CODE_FOR_fix_truncsfdi_sse"
.LASF1902:
	.string	"OTI_ior"
.LASF1812:
	.string	"CODE_FOR_indirect_jump"
.LASF429:
	.string	"DEFINE_PEEPHOLE"
.LASF101:
	.string	"ix86_builtins"
.LASF1417:
	.string	"CODE_FOR_eh_return_si"
.LASF2463:
	.string	"v4hi_ftype_v4hi_int_int"
.LASF885:
	.string	"BUILT_IN_FPUTS_UNLOCKED"
.LASF466:
	.string	"RESX"
.LASF2479:
	.string	"void_ftype_v8qi_v8qi_pchar"
.LASF636:
	.string	"NOTE_INSN_EH_REGION_END"
.LASF1180:
	.string	"type_required"
.LASF323:
	.string	"_flags2"
.LASF2224:
	.string	"legitimate_address_p"
.LASF377:
	.string	"V2SImode"
.LASF963:
	.string	"abstract_origin"
.LASF2245:
	.string	"print_operand"
.LASF491:
	.string	"ASHIFTRT"
.LASF445:
	.string	"EQ_ATTR"
.LASF2155:
	.string	"shiftdi_operand"
.LASF1094:
	.string	"no_limit_stack"
.LASF1802:
	.string	"CODE_FOR_ble"
.LASF404:
	.string	"mode_class"
.LASF254:
	.string	"IX86_BUILTIN_STMXCSR"
.LASF1013:
	.string	"x_nonlocal_goto_handler_labels"
.LASF555:
	.string	"align"
.LASF641:
	.string	"NOTE_INSN_BASIC_BLOCK"
.LASF1723:
	.string	"CODE_FOR_andhi3"
.LASF2596:
	.string	"ix86_arch"
.LASF1931:
	.string	"OTI_push"
.LASF203:
	.string	"IX86_BUILTIN_PCMPGTW"
.LASF1996:
	.string	"to_allocate"
.LASF1302:
	.string	"operand_mode"
.LASF480:
	.string	"QUEUED"
.LASF1829:
	.string	"CODE_FOR_sqrtdf2"
.LASF442:
	.string	"ATTR"
.LASF784:
	.string	"CONJ_EXPR"
.LASF694:
	.string	"RESULT_DECL"
.LASF97:
	.string	"sse_nregs"
.LASF1006:
	.string	"return_rtx"
.LASF313:
	.string	"_IO_write_ptr"
.LASF2266:
	.string	"unordered_p"
.LASF1625:
	.string	"CODE_FOR_cmpsi"
.LASF1012:
	.string	"x_nonlocal_goto_handler_slots"
.LASF2447:
	.string	"fnaddr"
.LASF2465:
	.string	"v4hi_ftype_v2si_v2si"
.LASF1605:
	.string	"CODE_FOR_pfminv2sf3"
.LASF2446:
	.string	"tramp"
.LASF1598:
	.string	"CODE_FOR_addv2sf3"
.LASF2132:
	.string	"slot"
.LASF2019:
	.string	"mask"
.LASF1781:
	.string	"CODE_FOR_sltu"
.LASF1948:
	.string	"asm_out"
.LASF567:
	.string	"rttree"
.LASF1788:
	.string	"CODE_FOR_suneq"
.LASF1562:
	.string	"CODE_FOR_mmx_uavgv8qi3"
.LASF1574:
	.string	"CODE_FOR_umaxv8qi3"
.LASF2186:
	.string	"ix86_asm_file_end"
.LASF810:
	.string	"BUILT_IN_NORMAL"
.LASF767:
	.string	"UNEQ_EXPR"
.LASF2502:
	.string	"tmode"
.LASF718:
	.string	"MINUS_EXPR"
.LASF1499:
	.string	"CODE_FOR_sse_movss"
.LASF1464:
	.string	"CODE_FOR_cmpstrqi_nz_rex_1"
.LASF741:
	.string	"RSHIFT_EXPR"
.LASF1226:
	.string	"TYPE_SSE"
.LASF343:
	.string	"machine_mode"
.LASF494:
	.string	"SMIN"
.LASF1725:
	.string	"CODE_FOR_iordi3"
.LASF1632:
	.string	"CODE_FOR_cmptf"
.LASF1640:
	.string	"CODE_FOR_movstrictqi"
.LASF2381:
	.string	"end_2_label"
.LASF978:
	.string	"pointer_depth"
.LASF771:
	.string	"RANGE_EXPR"
.LASF2675:
	.string	"/home/yunqi/SPEC2006/benchspec/CPU2006/403.gcc/build/build_base_amd64-m64-gcc43-nn.0000"
.LASF670:
	.string	"CHAR_TYPE"
.LASF1670:
	.string	"CODE_FOR_fix_trunctfhi2"
.LASF719:
	.string	"MULT_EXPR"
.LASF132:
	.string	"IX86_BUILTIN_CMPNGESS"
.LASF64:
	.string	"FPMATH_SSE"
.LASF680:
	.string	"QUAL_UNION_TYPE"
.LASF615:
	.string	"REG_NORETURN"
.LASF216:
	.string	"IX86_BUILTIN_PSHUFW"
.LASF731:
	.string	"FIX_CEIL_EXPR"
.LASF1941:
	.string	"pred_next"
.LASF2110:
	.string	"no_rtl"
.LASF1886:
	.string	"OTI_subv"
.LASF1815:
	.string	"CODE_FOR_call_pop"
.LASF769:
	.string	"SET_LE_EXPR"
.LASF1755:
	.string	"CODE_FOR_ashlqi3"
.LASF859:
	.string	"BUILT_IN_SAVEREGS"
.LASF492:
	.string	"LSHIFTRT"
.LASF2613:
	.string	"ix86_preferred_stack_boundary_string"
.LASF2417:
	.string	"mincycles"
.LASF509:
	.string	"UNLE"
.LASF1256:
	.string	"var_refs_queue"
.LASF1152:
	.string	"TI_V4SF_TYPE"
.LASF1224:
	.string	"TYPE_STR"
.LASF392:
	.string	"V8SFmode"
.LASF1789:
	.string	"CODE_FOR_sunge"
.LASF1813:
	.string	"CODE_FOR_tablejump"
.LASF793:
	.string	"TRY_FINALLY_EXPR"
.LASF1790:
	.string	"CODE_FOR_sungt"
.LASF583:
	.string	"index"
.LASF1657:
	.string	"CODE_FOR_truncxfsf2"
.LASF2269:
	.string	"ix86_output_addr_vec_elt"
.LASF20:
	.string	"string"
.LASF1557:
	.string	"CODE_FOR_mmx_iordi3"
.LASF683:
	.string	"INTEGER_CST"
.LASF8:
	.string	"integrated"
.LASF394:
	.string	"V16SFmode"
.LASF1326:
	.string	"EXPAND_WRITE"
.LASF1179:
	.string	"decl_required"
.LASF251:
	.string	"IX86_BUILTIN_XORPS"
.LASF1503:
	.string	"CODE_FOR_vmaddv4sf3"
.LASF954:
	.string	"complexity"
.LASF348:
	.string	"SImode"
.LASF809:
	.string	"BUILT_IN_MD"
.LASF759:
	.string	"EQ_EXPR"
.LASF2160:
	.string	"q_regs_operand"
.LASF1051:
	.string	"needs_context"
.LASF603:
	.string	"REG_DEP_ANTI"
.LASF1370:
	.string	"CODE_FOR_x86_fldcw_1"
.LASF21:
	.string	"complex"
.LASF1027:
	.string	"x_parm_birth_insn"
.LASF2598:
	.string	"dbx64_register_map"
.LASF2108:
	.string	"ix86_setup_incoming_varargs"
.LASF289:
	.string	"CM_MEDIUM"
.LASF1904:
	.string	"OTI_ashl"
.LASF498:
	.string	"PRE_DEC"
.LASF936:
	.string	"realvaluetype"
.LASF1906:
	.string	"OTI_ashr"
.LASF692:
	.string	"VAR_DECL"
.LASF1078:
	.string	"inline_flag"
.LASF1399:
	.string	"CODE_FOR_absdf2_ifs"
.LASF38:
	.string	"int_load"
.LASF867:
	.string	"BUILT_IN_APPLY_ARGS"
.LASF2519:
	.string	"ix86_force_to_memory"
.LASF2512:
	.string	"ix86_expand_builtin"
.LASF434:
	.string	"DEFINE_EXPAND"
.LASF1639:
	.string	"CODE_FOR_reload_outqi"
.LASF2595:
	.string	"ix86_fpmath"
.LASF1522:
	.string	"CODE_FOR_maskncmpv4sf3"
.LASF2133:
	.string	"src_addr"
.LASF1461:
	.string	"CODE_FOR_rep_stosqi"
.LASF2618:
	.string	"regclass_map"
.LASF2101:
	.string	"ix86_build_va_list"
.LASF453:
	.string	"COND_EXEC"
.LASF1026:
	.string	"x_trampoline_list"
.LASF1067:
	.string	"x_dont_save_pending_sizes_p"
.LASF1022:
	.string	"x_arg_pointer_save_area"
.LASF373:
	.string	"CTImode"
.LASF1765:
	.string	"CODE_FOR_rotldi3"
.LASF1516:
	.string	"CODE_FOR_sse_andti3"
.LASF458:
	.string	"UNSPEC_VOLATILE"
.LASF1822:
	.string	"CODE_FOR_return"
.LASF1392:
	.string	"CODE_FOR_negsf2_memory"
.LASF2149:
	.string	"call_insn_operand"
.LASF985:
	.string	"maxval"
.LASF1371:
	.string	"CODE_FOR_floathisf2"
.LASF2458:
	.string	"int_ftype_v4sf"
.LASF625:
	.string	"NOTE_INSN_LOOP_BEG"
.LASF558:
	.string	"rtunion_def"
.LASF717:
	.string	"PLUS_EXPR"
.LASF39:
	.string	"int_store"
.LASF1631:
	.string	"CODE_FOR_cmpxf"
.LASF1552:
	.string	"CODE_FOR_ussubv4hi3"
.LASF2113:
	.string	"label"
.LASF2213:
	.string	"popc"
.LASF1112:
	.string	"TI_INTQI_TYPE"
.LASF634:
	.string	"NOTE_INSN_FUNCTION_BEG"
.LASF1879:
	.string	"libfunc"
.LASF708:
	.string	"TARGET_EXPR"
.LASF384:
	.string	"V8HImode"
.LASF1613:
	.string	"CODE_FOR_pi2fw"
.LASF227:
	.string	"IX86_BUILTIN_PSLLQI"
.LASF1797:
	.string	"CODE_FOR_bgtu"
.LASF1926:
	.string	"OTI_tst"
.LASF189:
	.string	"IX86_BUILTIN_PSUBSB"
.LASF1508:
	.string	"CODE_FOR_divv4sf3"
.LASF820:
	.string	"BUILT_IN_CONJ"
.LASF1208:
	.string	"TYPE_SETCC"
.LASF1459:
	.string	"CODE_FOR_rep_stossi"
.LASF190:
	.string	"IX86_BUILTIN_PSUBSW"
.LASF677:
	.string	"SET_TYPE"
.LASF2112:
	.string	"save_area"
.LASF1435:
	.string	"CODE_FOR_cossf2"
.LASF444:
	.string	"SET_ATTR_ALTERNATIVE"
.LASF1919:
	.string	"OTI_one_cmpl"
.LASF2660:
	.string	"align_loops_max_skip"
.LASF2403:
	.string	"ix86_safe_length_prefix"
.LASF562:
	.string	"rtstr"
.LASF2096:
	.string	"ix86_function_value_regno_p"
.LASF1720:
	.string	"CODE_FOR_testqi_ext_ccno_0"
.LASF1851:
	.string	"CODE_FOR_strlendi"
.LASF328:
	.string	"_lock"
.LASF45:
	.string	"mmx_store"
.LASF396:
	.string	"CCmode"
.LASF1695:
	.string	"CODE_FOR_mulhi3"
.LASF2291:
	.string	"swapped_code"
.LASF1176:
	.string	"attribute_spec"
.LASF903:
	.string	"BUILT_IN_STDARG_START"
.LASF698:
	.string	"BIT_FIELD_REF"
.LASF1202:
	.string	"TYPE_LEA"
.LASF1740:
	.string	"CODE_FOR_negxf2"
.LASF549:
	.string	"scale"
.LASF1493:
	.string	"CODE_FOR_sse_movntdi"
.LASF2256:
	.string	"ssep"
.LASF2354:
	.string	"tmpcount"
.LASF1844:
	.string	"CODE_FOR_strsethi"
.LASF551:
	.string	"alias"
.LASF2006:
	.string	"X86_64_INTEGERSI_CLASS"
.LASF2028:
	.string	"align_jump"
.LASF1912:
	.string	"OTI_umax"
.LASF1791:
	.string	"CODE_FOR_sunle"
.LASF1965:
	.string	"adjust_cost"
.LASF2581:
	.string	"x86_integer_DFmode_moves"
.LASF829:
	.string	"BUILT_IN_BZERO"
.LASF2671:
	.string	"x86_use_sahf"
.LASF2368:
	.string	"ix86_expand_strlen"
.LASF2651:
	.string	"optimize_size"
.LASF2452:
	.string	"pchar_type_node"
.LASF1792:
	.string	"CODE_FOR_sunlt"
.LASF1068:
	.string	"uses_const_pool"
.LASF2220:
	.string	"ix86_address_cost"
.LASF1593:
	.string	"CODE_FOR_mmx_punpcklwd"
.LASF1147:
	.string	"TI_UV8QI_TYPE"
.LASF2507:
	.string	"ix86_expand_unop_builtin"
.LASF1607:
	.string	"CODE_FOR_femms"
.LASF2228:
	.string	"ix86_GOT_alias_set"
.LASF1373:
	.string	"CODE_FOR_floathixf2"
.LASF1479:
	.string	"CODE_FOR_movv4sf_internal"
.LASF654:
	.string	"GR_VIRTUAL_OUTGOING_ARGS"
.LASF398:
	.string	"CCGOCmode"
.LASF1019:
	.string	"x_rtl_expr_chain"
.LASF1270:
	.string	"x_last_linenum"
.LASF1284:
	.string	"eh_status"
.LASF1697:
	.string	"CODE_FOR_umulqihi3"
.LASF2077:
	.string	"n_bases"
.LASF2587:
	.string	"x86_memory_mismatch_stall"
.LASF2085:
	.string	"nintregs"
.LASF171:
	.string	"IX86_BUILTIN_MASKMOVQ"
.LASF316:
	.string	"_IO_buf_end"
.LASF979:
	.string	"user_align"
.LASF1848:
	.string	"CODE_FOR_cmpstrsi"
.LASF816:
	.string	"BUILT_IN_FABSF"
.LASF58:
	.string	"PROCESSOR_ATHLON"
.LASF300:
	.string	"short unsigned int"
.LASF2127:
	.string	"addr_rtx"
.LASF817:
	.string	"BUILT_IN_FABSL"
.LASF2145:
	.string	"const_int_1_31_operand"
.LASF710:
	.string	"BIND_EXPR"
.LASF1819:
	.string	"CODE_FOR_call_value"
.LASF1915:
	.string	"OTI_neg"
.LASF1465:
	.string	"CODE_FOR_cmpstrqi_1"
.LASF1686:
	.string	"CODE_FOR_subsi3"
.LASF2473:
	.string	"void_ftype_unsigned"
.LASF1393:
	.string	"CODE_FOR_negsf2_ifs"
.LASF2284:
	.string	"req_mode"
.LASF2135:
	.string	"src_offset"
.LASF2216:
	.string	"scale_rtx"
.LASF2396:
	.string	"ix86_adjust_cost"
.LASF1433:
	.string	"CODE_FOR_sintf2"
.LASF2282:
	.string	"ix86_unary_operator_ok"
.LASF1835:
	.string	"CODE_FOR_strmovhi"
.LASF2148:
	.string	"local_symbolic_operand"
.LASF210:
	.string	"IX86_BUILTIN_PMINSW"
.LASF288:
	.string	"CM_KERNEL"
.LASF1856:
	.string	"CODE_FOR_movdfcc"
.LASF403:
	.string	"MAX_MACHINE_MODE"
.LASF435:
	.string	"DEFINE_DELAY"
.LASF2622:
	.string	"mode_name"
.LASF2011:
	.string	"X86_64_X87_CLASS"
.LASF534:
	.string	"VEC_DUPLICATE"
.LASF311:
	.string	"_IO_read_base"
.LASF1754:
	.string	"CODE_FOR_ashlhi3"
.LASF112:
	.string	"IX86_BUILTIN_CMPLEPS"
.LASF1533:
	.string	"CODE_FOR_cvtpi2ps"
.LASF1803:
	.string	"CODE_FOR_bleu"
.LASF1059:
	.string	"has_computed_jump"
.LASF163:
	.string	"IX86_BUILTIN_STORESS"
.LASF774:
	.string	"NON_LVALUE_EXPR"
.LASF1157:
	.string	"TI_V4HI_TYPE"
.LASF1278:
	.string	"x_inhibit_defer_pop"
.LASF1197:
	.string	"TYPE_ALU"
.LASF234:
	.string	"IX86_BUILTIN_PUNPCKHWD"
.LASF1485:
	.string	"CODE_FOR_movti_internal"
.LASF1438:
	.string	"CODE_FOR_cld"
.LASF2141:
	.string	"x86_64_szext_nonmemory_operand"
.LASF2586:
	.string	"x86_partial_reg_dependency"
.LASF628:
	.string	"NOTE_INSN_LOOP_VTOP"
.LASF913:
	.string	"volatile_flag"
.LASF1320:
	.string	"output_format"
.LASF855:
	.string	"BUILT_IN_COSF"
.LASF858:
	.string	"BUILT_IN_COSL"
.LASF993:
	.string	"lang_type"
.LASF766:
	.string	"UNGE_EXPR"
.LASF248:
	.string	"IX86_BUILTIN_ANDPS"
.LASF211:
	.string	"IX86_BUILTIN_PMINUB"
.LASF2307:
	.string	"ix86_expand_fp_compare"
.LASF880:
	.string	"BUILT_IN_FPRINTF"
.LASF1104:
	.string	"live_range_rtl"
.LASF2138:
	.string	"x86_64_szext_general_operand"
.LASF225:
	.string	"IX86_BUILTIN_PSLLWI"
.LASF2080:
	.string	"in_return"
.LASF2276:
	.string	"ix86_expand_binary_operator"
.LASF2032:
	.string	"processor_target_table"
.LASF421:
	.string	"MATCH_SCRATCH"
.LASF1739:
	.string	"CODE_FOR_negdf2"
.LASF2001:
	.string	"base"
.LASF2365:
	.string	"desired_alignment"
.LASF925:
	.string	"deprecated_flag"
.LASF966:
	.string	"address"
.LASF2566:
	.string	"x86_partial_reg_stall"
.LASF2329:
	.string	"condition"
.LASF1646:
	.string	"CODE_FOR_zero_extendhisi2"
.LASF1490:
	.string	"CODE_FOR_mmx_maskmovq"
.LASF862:
	.string	"BUILT_IN_ARGS_INFO"
.LASF935:
	.string	"tree_int_cst"
.LASF1698:
	.string	"CODE_FOR_mulqihi3"
.LASF2131:
	.string	"need_temp"
.LASF1080:
	.string	"virtual_flag"
.LASF1672:
	.string	"CODE_FOR_fix_truncsfhi2"
.LASF1285:
	.string	"stmt_status"
.LASF365:
	.string	"SCmode"
.LASF689:
	.string	"LABEL_DECL"
.LASF2431:
	.string	"clock_var"
.LASF1334:
	.string	"CODE_FOR_cmpdi_ccno_1_rex64"
.LASF2551:
	.string	"ix86_sched_data"
.LASF486:
	.string	"MULT"
.LASF922:
	.string	"private_flag"
.LASF2212:
	.string	"sp_valid"
.LASF1981:
	.string	"function_attribute_inlinable_p"
.LASF1654:
	.string	"CODE_FOR_extenddfxf2"
.LASF327:
	.string	"_shortbuf"
.LASF339:
	.string	"_sbuf"
.LASF125:
	.string	"IX86_BUILTIN_CMPLESS"
.LASF2470:
	.string	"v4hi_ftype_v4hi_di"
.LASF1274:
	.string	"regno_decl"
.LASF2344:
	.string	"ix86_split_long_move"
.LASF1696:
	.string	"CODE_FOR_mulqi3"
.LASF2193:
	.string	"ix86_save_reg"
.LASF236:
	.string	"IX86_BUILTIN_PUNPCKLBW"
.LASF938:
	.string	"tree_real_cst"
.LASF1753:
	.string	"CODE_FOR_ashlsi3"
.LASF758:
	.string	"GE_EXPR"
.LASF647:
	.string	"GR_STACK_POINTER"
.LASF1141:
	.string	"TI_PTRDIFF_TYPE"
.LASF440:
	.string	"ADDRESS"
.LASF529:
	.string	"CONSTANT_P_RTX"
.LASF2634:
	.string	"reload_in_progress"
.LASF1705:
	.string	"CODE_FOR_smuldi3_highpart"
.LASF89:
	.string	"FLOAT_INT_SSE_REGS"
.LASF75:
	.string	"NON_Q_REGS"
.LASF1880:
	.string	"optab"
.LASF1546:
	.string	"CODE_FOR_subv8qi3"
.LASF1342:
	.string	"CODE_FOR_pushdi2_rex64"
.LASF1014:
	.string	"x_nonlocal_goto_stack_level"
.LASF2263:
	.string	"dimode_p"
.LASF1396:
	.string	"CODE_FOR_abssf2_memory"
.LASF1159:
	.string	"TI_V2SF_TYPE"
.LASF2610:
	.string	"ix86_align_loops_string"
.LASF299:
	.string	"unsigned char"
.LASF982:
	.string	"symtab"
.LASF1794:
	.string	"CODE_FOR_beq"
.LASF1734:
	.string	"CODE_FOR_negdi2"
.LASF667:
	.string	"VECTOR_TYPE"
.LASF1222:
	.string	"TYPE_FCMP"
.LASF1521:
	.string	"CODE_FOR_maskcmpv4sf3"
.LASF1174:
	.string	"itk_unsigned_long_long"
.LASF1703:
	.string	"CODE_FOR_umuldi3_highpart"
.LASF2059:
	.string	"ix86_return_pops_args"
.LASF1306:
	.string	"n_operands"
.LASF2648:
	.string	"current_function_sp_is_unchanging"
.LASF465:
	.string	"TRAP_IF"
.LASF617:
	.string	"REG_SETJMP"
.LASF1911:
	.string	"OTI_umin"
.LASF1028:
	.string	"x_last_parm_insn"
.LASF1445:
	.string	"CODE_FOR_strmovqi_rex_1"
.LASF144:
	.string	"IX86_BUILTIN_UCOMILESS"
.LASF891:
	.string	"BUILT_IN_ISLESSEQUAL"
.LASF115:
	.string	"IX86_BUILTIN_CMPNEQPS"
.LASF1964:
	.string	"sched"
.LASF969:
	.string	"size_unit"
.LASF238:
	.string	"IX86_BUILTIN_PUNPCKLDQ"
.LASF709:
	.string	"COND_EXPR"
.LASF1568:
	.string	"CODE_FOR_eqv8qi3"
.LASF140:
	.string	"IX86_BUILTIN_COMIGESS"
.LASF2130:
	.string	"sse_addr_rtx"
.LASF2599:
	.string	"svr4_dbx_register_map"
.LASF1296:
	.string	"OP_OUT"
.LASF74:
	.string	"Q_REGS"
.LASF596:
	.string	"REG_LIBCALL"
.LASF2025:
	.string	"target_disable"
.LASF361:
	.string	"XFmode"
.LASF340:
	.string	"_pos"
.LASF2082:
	.string	"class"
.LASF2384:
	.string	"ix86_free_machine_status"
.LASF685:
	.string	"COMPLEX_CST"
.LASF572:
	.string	"indx"
.LASF1671:
	.string	"CODE_FOR_fix_truncdfhi2"
.LASF470:
	.string	"CONST_STRING"
.LASF590:
	.string	"REG_DEAD"
.LASF688:
	.string	"FUNCTION_DECL"
.LASF2297:
	.string	"ix86_fp_compare_code_to_integer"
.LASF357:
	.string	"HFmode"
.LASF2204:
	.string	"ix86_expand_prologue"
.LASF1800:
	.string	"CODE_FOR_bge"
.LASF578:
	.string	"succ"
.LASF1183:
	.string	"_Bool"
.LASF147:
	.string	"IX86_BUILTIN_UCOMINEQSS"
.LASF1304:
	.string	"dup_loc"
.LASF2069:
	.string	"class2"
.LASF1796:
	.string	"CODE_FOR_bgt"
.LASF59:
	.string	"PROCESSOR_PENTIUM4"
.LASF2627:
	.string	"rtx_class"
.LASF584:
	.string	"loop_depth"
.LASF2647:
	.string	"current_function_is_leaf"
.LASF1712:
	.string	"CODE_FOR_divtf3"
.LASF919:
	.string	"nothrow_flag"
.LASF1977:
	.string	"attribute_table"
.LASF729:
	.string	"EXACT_DIV_EXPR"
.LASF1783:
	.string	"CODE_FOR_sgeu"
.LASF382:
	.string	"V4DImode"
.LASF724:
	.string	"TRUNC_MOD_EXPR"
.LASF2304:
	.string	"fcomi_cost"
.LASF456:
	.string	"ASM_OPERANDS"
.LASF1895:
	.string	"OTI_sdivmod"
.LASF1643:
	.string	"CODE_FOR_movdf"
.LASF1229:
	.string	"attr_mode"
.LASF1641:
	.string	"CODE_FOR_movdi"
.LASF1913:
	.string	"OTI_mov"
.LASF2490:
	.string	"di_ftype_di_di"
.LASF2024:
	.string	"target_enable"
.LASF2334:
	.string	"ix86_expand_int_movcc"
.LASF1538:
	.string	"CODE_FOR_cvttss2si"
.LASF60:
	.string	"PROCESSOR_max"
.LASF2553:
	.string	"bdesc_2arg"
.LASF1959:
	.string	"named_section"
.LASF1054:
	.string	"calls_alloca"
.LASF1956:
	.string	"function_end_prologue"
.LASF902:
	.string	"BUILT_IN_VARARGS_START"
.LASF1247:
	.string	"attr_pent_pair"
.LASF1452:
	.string	"CODE_FOR_strsetsi_1"
.LASF128:
	.string	"IX86_BUILTIN_CMPNEQSS"
.LASF371:
	.string	"CSImode"
.LASF1264:
	.string	"emit_status"
.LASF2530:
	.string	"parm"
.LASF577:
	.string	"pred"
.LASF946:
	.string	"elements"
.LASF2345:
	.string	"part"
.LASF2535:
	.string	"i486_cost"
.LASF2526:
	.string	"ix86_memory_move_cost"
.LASF762:
	.string	"ORDERED_EXPR"
.LASF1975:
	.string	"merge_decl_attributes"
.LASF24:
	.string	"type"
.LASF1255:
	.string	"PPRO_UOPS_MANY"
.LASF1908:
	.string	"OTI_rotr"
.LASF649:
	.string	"GR_HARD_FRAME_POINTER"
.LASF182:
	.string	"IX86_BUILTIN_PADDSB"
.LASF303:
	.string	"__off_t"
.LASF2414:
	.string	"ix86_pent_find_pair"
.LASF1115:
	.string	"TI_INTDI_TYPE"
.LASF2561:
	.string	"x86_cmove"
.LASF183:
	.string	"IX86_BUILTIN_PADDSW"
.LASF1953:
	.string	"unaligned_op"
.LASF1301:
	.string	"constraints"
.LASF1413:
	.string	"CODE_FOR_return_indirect_internal"
.LASF1668:
	.string	"CODE_FOR_fix_truncsfsi2"
.LASF1768:
	.string	"CODE_FOR_rotlqi3"
.LASF1667:
	.string	"CODE_FOR_fix_truncdfsi2"
.LASF1271:
	.string	"x_last_filename"
.LASF1744:
	.string	"CODE_FOR_absxf2"
.LASF1585:
	.string	"CODE_FOR_mmx_ashldi3"
.LASF740:
	.string	"LSHIFT_EXPR"
.LASF2262:
	.string	"stack_top_dies"
.LASF746:
	.string	"BIT_AND_EXPR"
.LASF967:
	.string	"tree_type"
.LASF1377:
	.string	"CODE_FOR_floatdixf2"
.LASF395:
	.string	"BLKmode"
.LASF2300:
	.string	"ix86_fp_comparison_arithmetics_cost"
.LASF1017:
	.string	"x_save_expr_regs"
.LASF2623:
	.string	"mode_size"
.LASF281:
	.string	"IX86_BUILTIN_PSWAPDSF"
.LASF355:
	.string	"PDImode"
.LASF280:
	.string	"IX86_BUILTIN_PSWAPDSI"
.LASF1077:
	.string	"regdecl_flag"
.LASF2429:
	.string	"ix86_sched_reorder"
.LASF699:
	.string	"INDIRECT_REF"
.LASF1046:
	.string	"language"
.LASF14:
	.string	"elem"
.LASF598:
	.string	"REG_NO_CONFLICT"
.LASF1833:
	.string	"CODE_FOR_strmovsi"
.LASF1128:
	.string	"TI_BITSIZE_ZERO"
.LASF1945:
	.string	"probability"
.LASF2236:
	.string	"temp"
.LASF1242:
	.string	"MEMORY_NONE"
.LASF2560:
	.string	"x86_use_bit_test"
.LASF2163:
	.string	"ix86_comparison_operator"
.LASF1899:
	.string	"OTI_umod"
.LASF1166:
	.string	"itk_unsigned_char"
.LASF73:
	.string	"AD_REGS"
.LASF2578:
	.string	"x86_qimode_math"
.LASF423:
	.string	"MATCH_OPERATOR"
.LASF1023:
	.string	"x_clobber_return_insn"
.LASF821:
	.string	"BUILT_IN_CONJF"
.LASF431:
	.string	"DEFINE_INSN_AND_SPLIT"
.LASF822:
	.string	"BUILT_IN_CONJL"
.LASF2454:
	.string	"pv2si_type_node"
.LASF835:
	.string	"BUILT_IN_MEMCMP"
.LASF1636:
	.string	"CODE_FOR_movhi"
.LASF1187:
	.string	"USIZETYPE"
.LASF2157:
	.string	"mmx_reg_operand"
.LASF2055:
	.string	"rtdstr"
.LASF1520:
	.string	"CODE_FOR_sse_clrv4sf"
.LASF1545:
	.string	"CODE_FOR_usaddv4hi3"
.LASF1798:
	.string	"CODE_FOR_blt"
.LASF1715:
	.string	"CODE_FOR_divmoddi4"
.LASF1055:
	.string	"calls_eh_return"
.LASF1990:
	.string	"padding1"
.LASF1993:
	.string	"padding2"
.LASF538:
	.string	"US_MINUS"
.LASF894:
	.string	"BUILT_IN_UNWIND_INIT"
.LASF2053:
	.string	"type1"
.LASF2054:
	.string	"type2"
.LASF2068:
	.string	"class1"
.LASF1863:
	.string	"CODE_FOR_pro_epilogue_adjust_stack"
.LASF920:
	.string	"static_flag"
.LASF1225:
	.string	"TYPE_CLD"
.LASF2129:
	.string	"int_addr_rtx"
.LASF1890:
	.string	"OTI_umul_highpart"
.LASF1442:
	.string	"CODE_FOR_strmovhi_1"
.LASF951:
	.string	"value"
.LASF338:
	.string	"_next"
.LASF27:
	.string	"processor_costs"
.LASF1032:
	.string	"x_temp_slot_level"
.LASF1995:
	.string	"red_zone_size"
.LASF2072:
	.string	"bit_offset"
.LASF781:
	.string	"ENTRY_VALUE_EXPR"
.LASF172:
	.string	"IX86_BUILTIN_MOVMSKPS"
.LASF2246:
	.string	"pred_val"
.LASF2606:
	.string	"ix86_cpu_string"
.LASF1007:
	.string	"internal_arg_pointer"
.LASF1474:
	.string	"CODE_FOR_sse_movdfcc"
.LASF2611:
	.string	"ix86_align_jumps_string"
.LASF2169:
	.string	"cmp_fp_expander_operand"
.LASF1020:
	.string	"x_tail_recursion_label"
.LASF1600:
	.string	"CODE_FOR_subrv2sf3"
.LASF1181:
	.string	"function_type_required"
.LASF761:
	.string	"UNORDERED_EXPR"
.LASF2030:
	.string	"align_func"
.LASF2537:
	.string	"pentiumpro_cost"
.LASF1045:
	.string	"preferred_stack_boundary"
.LASF1057:
	.string	"has_nonlocal_goto"
.LASF1795:
	.string	"CODE_FOR_bne"
.LASF1896:
	.string	"OTI_udiv"
.LASF2143:
	.string	"x86_64_zext_immediate_operand"
.LASF1828:
	.string	"CODE_FOR_sqrtsf2"
.LASF2471:
	.string	"v2si_ftype_v2si_di"
.LASF77:
	.string	"LEGACY_REGS"
.LASF1826:
	.string	"CODE_FOR_eh_return"
.LASF186:
	.string	"IX86_BUILTIN_PSUBB"
.LASF188:
	.string	"IX86_BUILTIN_PSUBD"
.LASF1888:
	.string	"OTI_smulv"
.LASF1125:
	.string	"TI_NULL_POINTER"
.LASF1036:
	.string	"inlinable"
.LASF2319:
	.string	"label2"
.LASF1384:
	.string	"CODE_FOR_subsi3_carry_zext"
.LASF2142:
	.string	"x86_64_immediate_operand"
.LASF1563:
	.string	"CODE_FOR_mmx_uavgv4hi3"
.LASF187:
	.string	"IX86_BUILTIN_PSUBW"
.LASF671:
	.string	"POINTER_TYPE"
.LASF2247:
	.string	"taken"
.LASF1414:
	.string	"CODE_FOR_nop"
.LASF824:
	.string	"BUILT_IN_CREALF"
.LASF379:
	.string	"V4QImode"
.LASF1168:
	.string	"itk_unsigned_short"
.LASF825:
	.string	"BUILT_IN_CREALL"
.LASF1743:
	.string	"CODE_FOR_absdf2"
.LASF2637:
	.string	"global_trees"
.LASF1727:
	.string	"CODE_FOR_iorhi3"
.LASF1939:
	.string	"gcov_type"
.LASF834:
	.string	"BUILT_IN_MEMCPY"
.LASF639:
	.string	"NOTE_INSN_RANGE_END"
.LASF2476:
	.string	"v4sf_ftype_void"
.LASF2097:
	.string	"ix86_function_value"
.LASF561:
	.string	"rtuint"
.LASF1009:
	.string	"hard_reg_initial_vals"
.LASF1676:
	.string	"CODE_FOR_floatdidf2"
.LASF1756:
	.string	"CODE_FOR_ashrdi3"
.LASF1596:
	.string	"CODE_FOR_ldmxcsr"
.LASF500:
	.string	"POST_DEC"
.LASF2343:
	.string	"ix86_split_to_parts"
.LASF2511:
	.string	"ix86_expand_sse_comi"
.LASF1846:
	.string	"CODE_FOR_strsetqi"
.LASF585:
	.string	"count"
.LASF419:
	.string	"INSN_LIST"
.LASF118:
	.string	"IX86_BUILTIN_CMPNGTPS"
.LASF1903:
	.string	"OTI_xor"
.LASF651:
	.string	"GR_VIRTUAL_INCOMING_ARGS"
.LASF2552:
	.string	"bdesc_comi"
.LASF2222:
	.string	"term"
.LASF1669:
	.string	"CODE_FOR_fix_truncxfhi2"
.LASF682:
	.string	"LANG_TYPE"
.LASF2369:
	.string	"eoschar"
.LASF1127:
	.string	"TI_SIZE_ONE"
.LASF600:
	.string	"REG_CC_SETTER"
.LASF611:
	.string	"REG_EH_CONTEXT"
.LASF961:
	.string	"subblocks"
.LASF2000:
	.string	"ix86_address"
.LASF646:
	.string	"GR_CC0"
.LASF1001:
	.string	"args_size"
.LASF69:
	.string	"CREG"
.LASF324:
	.string	"_old_offset"
.LASF1823:
	.string	"CODE_FOR_prologue"
.LASF631:
	.string	"NOTE_INSN_PROLOGUE_END"
.LASF191:
	.string	"IX86_BUILTIN_PSUBUSB"
.LASF267:
	.string	"IX86_BUILTIN_PFRCP"
.LASF1368:
	.string	"CODE_FOR_fix_trunchi_memory"
.LASF1079:
	.string	"bit_field_flag"
.LASF1156:
	.string	"TI_V8QI_TYPE"
.LASF1410:
	.string	"CODE_FOR_blockage"
.LASF2195:
	.string	"test"
.LASF192:
	.string	"IX86_BUILTIN_PSUBUSW"
.LASF2074:
	.string	"field"
.LASF2327:
	.string	"second"
.LASF2347:
	.string	"push"
.LASF1048:
	.string	"returns_struct"
.LASF1209:
	.string	"TYPE_PUSH"
.LASF1832:
	.string	"CODE_FOR_strmovdi_rex64"
.LASF827:
	.string	"BUILT_IN_CIMAGF"
.LASF229:
	.string	"IX86_BUILTIN_PSRADI"
.LASF2456:
	.string	"int_ftype_v4sf_v4sf"
.LASF1446:
	.string	"CODE_FOR_rep_movdi_rex64"
.LASF2531:
	.string	"x86_field_alignment"
.LASF676:
	.string	"ARRAY_TYPE"
.LASF1737:
	.string	"CODE_FOR_negqi2"
.LASF1811:
	.string	"CODE_FOR_bltgt"
.LASF751:
	.string	"TRUTH_AND_EXPR"
.LASF1076:
	.string	"nonlocal_flag"
.LASF352:
	.string	"PQImode"
.LASF1653:
	.string	"CODE_FOR_extendsftf2"
.LASF2026:
	.string	"align_loop"
.LASF2313:
	.string	"ix86_expand_compare"
.LASF968:
	.string	"values"
.LASF2340:
	.string	"out1"
.LASF1997:
	.string	"frame_pointer_offset"
.LASF2655:
	.string	"flag_schedule_insns"
.LASF30:
	.string	"mult_init"
.LASF15:
	.string	"tree"
.LASF1767:
	.string	"CODE_FOR_rotlhi3"
.LASF1601:
	.string	"CODE_FOR_gtv2sf3"
.LASF1726:
	.string	"CODE_FOR_iorsi3"
.LASF94:
	.string	"nregs"
.LASF1952:
	.string	"aligned_op"
.LASF524:
	.string	"LO_SUM"
.LASF436:
	.string	"DEFINE_FUNCTION_UNIT"
.LASF2593:
	.string	"x86_prefetch_sse"
.LASF2525:
	.string	"ix86_hard_regno_mode_ok"
.LASF1251:
	.string	"PENT_PAIR_NP"
.LASF131:
	.string	"IX86_BUILTIN_CMPNGTSS"
.LASF601:
	.string	"REG_CC_USER"
.LASF1578:
	.string	"CODE_FOR_ashrv4hi3"
.LASF975:
	.string	"transparent_union_flag"
.LASF1894:
	.string	"OTI_sdivv"
.LASF1561:
	.string	"CODE_FOR_mmx_nanddi3"
.LASF2260:
	.string	"round_down"
.LASF1979:
	.string	"set_default_type_attributes"
.LASF319:
	.string	"_IO_save_end"
.LASF981:
	.string	"reference_to"
.LASF2071:
	.string	"classes"
.LASF917:
	.string	"unused_0"
.LASF515:
	.string	"FLOAT_EXTEND"
.LASF2633:
	.string	"reload_completed"
.LASF668:
	.string	"ENUMERAL_TYPE"
.LASF416:
	.string	"UNKNOWN"
.LASF2223:
	.string	"legitimate_pic_address_disp_p"
.LASF1929:
	.string	"OTI_cmov"
.LASF402:
	.string	"CCFPUmode"
.LASF701:
	.string	"ARRAY_REF"
.LASF684:
	.string	"REAL_CST"
.LASF1665:
	.string	"CODE_FOR_fix_truncxfsi2"
.LASF1382:
	.string	"CODE_FOR_subdi3_carry_rex64"
.LASF2636:
	.string	"tree_code_name"
.LASF826:
	.string	"BUILT_IN_CIMAG"
.LASF2007:
	.string	"X86_64_SSE_CLASS"
.LASF1859:
	.string	"CODE_FOR_minsf3"
.LASF1136:
	.string	"TI_DOUBLE_TYPE"
.LASF2210:
	.string	"ix86_expand_epilogue"
.LASF1539:
	.string	"CODE_FOR_addv8qi3"
.LASF2612:
	.string	"ix86_align_funcs_string"
.LASF17:
	.string	"int_cst"
.LASF1454:
	.string	"CODE_FOR_strsethi_1"
.LASF2500:
	.string	"target"
.LASF773:
	.string	"NOP_EXPR"
.LASF973:
	.string	"no_force_blk_flag"
.LASF2358:
	.string	"ix86_expand_movstr"
.LASF2495:
	.string	"v2sf_ftype_v2sf_v2sf"
.LASF1294:
	.string	"op_type"
.LASF2272:
	.string	"ix86_expand_clear"
.LASF643:
	.string	"NOTE_INSN_MAX"
.LASF1611:
	.string	"CODE_FOR_pfnacc"
.LASF1149:
	.string	"TI_UV2SI_TYPE"
.LASF1249:
	.string	"PENT_PAIR_PU"
.LASF1250:
	.string	"PENT_PAIR_PV"
.LASF2608:
	.string	"ix86_fpmath_string"
.LASF1175:
	.string	"itk_none"
.LASF2037:
	.string	"PTA_SSE2"
.LASF1664:
	.string	"CODE_FOR_fix_truncsfdi2"
.LASF2430:
	.string	"n_readyp"
.LASF1638:
	.string	"CODE_FOR_movqi"
.LASF2626:
	.string	"rtx_format"
.LASF231:
	.string	"IX86_BUILTIN_PSRLDI"
.LASF2316:
	.string	"report_error"
.LASF706:
	.string	"MODIFY_EXPR"
.LASF63:
	.string	"FPMATH_387"
.LASF679:
	.string	"UNION_TYPE"
.LASF905:
	.string	"BUILT_IN_VA_COPY"
.LASF807:
	.string	"NOT_BUILT_IN"
.LASF1131:
	.string	"TI_COMPLEX_INTEGER_TYPE"
.LASF1309:
	.string	"insn"
.LASF2016:
	.string	"issued_this_cycle"
.LASF703:
	.string	"VTABLE_REF"
.LASF2202:
	.string	"ix86_emit_save_regs"
.LASF971:
	.string	"precision"
.LASF2021:
	.string	"comparison"
.LASF2442:
	.string	"ix86_constant_alignment"
.LASF1021:
	.string	"x_tail_recursion_reentry"
.LASF62:
	.string	"fpmath_unit"
.LASF2198:
	.string	"from"
.LASF1766:
	.string	"CODE_FOR_rotlsi3"
.LASF916:
	.string	"asm_written_flag"
.LASF1318:
	.string	"output"
.LASF735:
	.string	"NEGATE_EXPR"
.LASF728:
	.string	"RDIV_EXPR"
.LASF1661:
	.string	"CODE_FOR_fix_truncxfdi2"
.LASF854:
	.string	"BUILT_IN_SINF"
.LASF177:
	.string	"IX86_BUILTIN_PACKSSDW"
.LASF2294:
	.string	"pop1"
.LASF2450:
	.string	"ix86_init_mmx_sse_builtins"
.LASF857:
	.string	"BUILT_IN_SINL"
.LASF2209:
	.string	"ix86_emit_restore_regs_using_mov"
.LASF1932:
	.string	"OTI_MAX"
.LASF2062:
	.string	"fntype"
.LASF797:
	.string	"RETURN_EXPR"
.LASF1041:
	.string	"inl_max_label_num"
.LASF2385:
	.string	"assign_386_stack_local"
.LASF2094:
	.string	"function_arg"
.LASF1985:
	.string	"section_type_flags"
.LASF1087:
	.string	"static_dtor_flag"
.LASF2081:
	.string	"int_nregs"
.LASF1553:
	.string	"CODE_FOR_mulv4hi3"
.LASF1642:
	.string	"CODE_FOR_movsf"
.LASF136:
	.string	"IX86_BUILTIN_COMIEQSS"
.LASF61:
	.string	"processor_type"
.LASF955:
	.string	"operands"
.LASF1523:
	.string	"CODE_FOR_vmmaskcmpv4sf3"
.LASF1310:
	.string	"insn_operand_predicate_fn"
.LASF199:
	.string	"IX86_BUILTIN_PCMPEQB"
.LASF201:
	.string	"IX86_BUILTIN_PCMPEQD"
.LASF2244:
	.string	"print_reg"
.LASF1761:
	.string	"CODE_FOR_lshrdi3"
.LASF1432:
	.string	"CODE_FOR_sinxf2"
.LASF2177:
	.string	"cmpsi_operand"
.LASF1534:
	.string	"CODE_FOR_cvtps2pi"
.LASF2349:
	.string	"ix86_split_ashldi"
.LASF200:
	.string	"IX86_BUILTIN_PCMPEQW"
.LASF383:
	.string	"V8QImode"
.LASF1339:
	.string	"CODE_FOR_x86_sahf_1"
.LASF2250:
	.string	"print_operand_address"
.LASF460:
	.string	"ADDR_DIFF_VEC"
.LASF1425:
	.string	"CODE_FOR_sqrtdf2_1"
.LASF2629:
	.string	"const_int_rtx"
.LASF2087:
	.string	"intreg"
.LASF476:
	.string	"CONCAT"
.LASF557:
	.string	"tree_node"
.LASF877:
	.string	"BUILT_IN_FPUTC"
.LASF54:
	.string	"PROCESSOR_I486"
.LASF29:
	.string	"shift_const"
.LASF1645:
	.string	"CODE_FOR_movtf"
.LASF1549:
	.string	"CODE_FOR_sssubv8qi3"
.LASF1868:
	.string	"CODE_FOR_movti"
.LASF1165:
	.string	"itk_signed_char"
.LASF878:
	.string	"BUILT_IN_FPUTS"
.LASF520:
	.string	"SQRT"
.LASF866:
	.string	"BUILT_IN_AGGREGATE_INCOMING_ADDRESS"
.LASF2259:
	.string	"normal"
.LASF1198:
	.string	"TYPE_ICMP"
.LASF220:
	.string	"IX86_BUILTIN_PSRAW"
.LASF372:
	.string	"CDImode"
.LASF2515:
	.string	"fndecl"
.LASF2416:
	.string	"ready"
.LASF1733:
	.string	"CODE_FOR_xorqi_cc_ext_1"
.LASF1088:
	.string	"artificial_flag"
.LASF2367:
	.string	"zeroreg"
.LASF9:
	.string	"frame_related"
.LASF1457:
	.string	"CODE_FOR_strsetqi_rex_1"
.LASF1163:
	.string	"integer_type_kind"
.LASF237:
	.string	"IX86_BUILTIN_PUNPCKLWD"
.LASF1376:
	.string	"CODE_FOR_floatsitf2"
.LASF1135:
	.string	"TI_FLOAT_TYPE"
.LASF1330:
	.string	"OPTAB_WIDEN"
.LASF294:
	.string	"ASM_INTEL"
.LASF2302:
	.string	"ix86_fp_comparison_sahf_cost"
.LASF150:
	.string	"IX86_BUILTIN_CVTSI2SS"
.LASF1305:
	.string	"dup_num"
.LASF812:
	.string	"BUILT_IN_ALLOCA"
.LASF489:
	.string	"ASHIFT"
.LASF687:
	.string	"STRING_CST"
.LASF2436:
	.string	"ix86_set_move_mem_attrs"
.LASF1687:
	.string	"CODE_FOR_subhi3"
.LASF1262:
	.string	"last"
.LASF2407:
	.string	"ix86_dump_ppro_packet"
.LASF2063:
	.string	"libname"
.LASF302:
	.string	"short int"
.LASF2374:
	.string	"ix86_expand_strlensi_unroll_1"
.LASF169:
	.string	"IX86_BUILTIN_STOREHPS"
.LASF595:
	.string	"REG_RETVAL"
.LASF2529:
	.string	"delta"
.LASF473:
	.string	"SCRATCH"
.LASF2285:
	.string	"set_mode"
.LASF1324:
	.string	"EXPAND_CONST_ADDRESS"
.LASF1248:
	.string	"PENT_PAIR_UV"
.LASF1429:
	.string	"CODE_FOR_sqrttf2"
.LASF516:
	.string	"FLOAT_TRUNCATE"
.LASF2351:
	.string	"ix86_split_lshrdi"
.LASF1721:
	.string	"CODE_FOR_anddi3"
.LASF665:
	.string	"REAL_TYPE"
.LASF1535:
	.string	"CODE_FOR_cvttps2pi"
.LASF2023:
	.string	"cost"
.LASF2268:
	.string	"cmp_op1"
.LASF1634:
	.string	"CODE_FOR_cmpsf"
.LASF1470:
	.string	"CODE_FOR_x86_movsicc_0_m1"
.LASF1092:
	.string	"comdat_flag"
.LASF286:
	.string	"CM_32"
.LASF1878:
	.string	"CODE_FOR_nothing"
.LASF409:
	.string	"MODE_CC"
.LASF2540:
	.string	"pentium4_cost"
.LASF2359:
	.string	"count_exp"
.LASF624:
	.string	"NOTE_INSN_BLOCK_END"
.LASF2187:
	.string	"file"
.LASF1849:
	.string	"CODE_FOR_cmpintqi"
.LASF802:
	.string	"EXPR_WITH_FILE_LOCATION"
.LASF1690:
	.string	"CODE_FOR_subtf3"
.LASF1556:
	.string	"CODE_FOR_mmx_pmaddwd"
.LASF811:
	.string	"built_in_function"
.LASF2580:
	.string	"x86_promote_hi_regs"
.LASF256:
	.string	"IX86_BUILTIN_FEMMS"
.LASF2150:
	.string	"constant_call_address_operand"
.LASF1694:
	.string	"CODE_FOR_mulsi3"
.LASF1581:
	.string	"CODE_FOR_lshrv2si3"
.LASF320:
	.string	"_markers"
.LASF559:
	.string	"rtwint"
.LASF1030:
	.string	"x_parm_reg_stack_loc"
.LASF111:
	.string	"IX86_BUILTIN_CMPLTPS"
.LASF322:
	.string	"_fileno"
.LASF2315:
	.string	"ix86_expand_branch"
.LASF1238:
	.string	"MODE_DF"
.LASF2567:
	.string	"x86_movx"
.LASF1235:
	.string	"MODE_DI"
.LASF2464:
	.string	"v8qi_ftype_v4hi_v4hi"
.LASF1297:
	.string	"OP_INOUT"
.LASF2582:
	.string	"x86_add_esp_4"
.LASF1644:
	.string	"CODE_FOR_movxf"
.LASF22:
	.string	"identifier"
.LASF2492:
	.string	"v2sf_ftype_v2si"
.LASF1430:
	.string	"CODE_FOR_sindf2"
.LASF1758:
	.string	"CODE_FOR_ashrsi3"
.LASF1547:
	.string	"CODE_FOR_subv4hi3"
.LASF1962:
	.string	"constructor"
.LASF378:
	.string	"V2DImode"
.LASF1951:
	.string	"byte_op"
.LASF1150:
	.string	"TI_UV2SF_TYPE"
.LASF1940:
	.string	"edge_def"
.LASF780:
	.string	"REFERENCE_EXPR"
.LASF1024:
	.string	"x_frame_offset"
.LASF1504:
	.string	"CODE_FOR_subv4sf3"
.LASF950:
	.string	"purpose"
.LASF1736:
	.string	"CODE_FOR_neghi2"
.LASF2631:
	.string	"global_rtl"
.LASF1416:
	.string	"CODE_FOR_prologue_get_pc"
.LASF886:
	.string	"BUILT_IN_FWRITE_UNLOCKED"
.LASF1560:
	.string	"CODE_FOR_mmx_anddi3"
.LASF2413:
	.string	"insnp"
.LASF2483:
	.string	"void_ftype_pfloat_v4sf"
.LASF1944:
	.string	"insns"
.LASF1786:
	.string	"CODE_FOR_sunordered"
.LASF721:
	.string	"CEIL_DIV_EXPR"
.LASF2286:
	.string	"ix86_expand_int_compare"
.LASF1836:
	.string	"CODE_FOR_strmovhi_rex64"
.LASF1738:
	.string	"CODE_FOR_negsf2"
.LASF930:
	.string	"lang_flag_4"
.LASF953:
	.string	"tree_exp"
.LASF1138:
	.string	"TI_VOID_TYPE"
.LASF958:
	.string	"abstract_flag"
.LASF2056:
	.string	"fundecl"
.LASF1587:
	.string	"CODE_FOR_mmx_packssdw"
.LASF2075:
	.string	"subclasses"
.LASF1346:
	.string	"CODE_FOR_zero_extendhisi2_and"
.LASF1440:
	.string	"CODE_FOR_strmovsi_1"
.LASF525:
	.string	"RANGE_INFO"
.LASF296:
	.string	"long int"
.LASF490:
	.string	"ROTATE"
.LASF876:
	.string	"BUILT_IN_PRINTF"
.LASF2632:
	.string	"pic_offset_table_rtx"
.LASF1920:
	.string	"OTI_ffs"
.LASF1706:
	.string	"CODE_FOR_smulsi3_highpart"
.LASF2645:
	.string	"reg_alloc_order"
.LASF1064:
	.string	"varargs"
.LASF1134:
	.string	"TI_COMPLEX_LONG_DOUBLE_TYPE"
.LASF823:
	.string	"BUILT_IN_CREAL"
.LASF450:
	.string	"BARRIER"
.LASF2190:
	.string	"gotsym"
.LASF1897:
	.string	"OTI_udivmod"
.LASF1760:
	.string	"CODE_FOR_ashrqi3"
.LASF96:
	.string	"sse_words"
.LASF1353:
	.string	"CODE_FOR_extendqidi2"
.LASF124:
	.string	"IX86_BUILTIN_CMPLTSS"
.LASF1199:
	.string	"TYPE_TEST"
.LASF1244:
	.string	"MEMORY_STORE"
.LASF918:
	.string	"used_flag"
.LASF722:
	.string	"FLOOR_DIV_EXPR"
.LASF1711:
	.string	"CODE_FOR_divxf3"
.LASF2420:
	.string	"second_memory"
.LASF2050:
	.string	"ix86_handle_cdecl_attribute"
.LASF1210:
	.string	"TYPE_POP"
.LASF1279:
	.string	"x_stack_pointer_delta"
.LASF621:
	.string	"NOTE_INSN_BIAS"
.LASF1865:
	.string	"CODE_FOR_allocate_stack"
.LASF901:
	.string	"BUILT_IN_EH_RETURN_DATA_REGNO"
.LASF33:
	.string	"movsx"
.LASF401:
	.string	"CCFPmode"
.LASF475:
	.string	"STRICT_LOW_PART"
.LASF2352:
	.string	"ix86_expand_aligntest"
.LASF369:
	.string	"CQImode"
.LASF277:
	.string	"IX86_BUILTIN_PFNACC"
.LASF1328:
	.string	"OPTAB_DIRECT"
.LASF1989:
	.string	"ix86_frame"
.LASF2594:
	.string	"ix86_cpu"
.LASF1233:
	.string	"MODE_HI"
.LASF1323:
	.string	"EXPAND_SUM"
.LASF655:
	.string	"GR_VIRTUAL_CFA"
.LASF1359:
	.string	"CODE_FOR_fix_truncdi_nomemory"
.LASF293:
	.string	"ASM_ATT"
.LASF1066:
	.string	"x_whole_function_mode_p"
.LASF1084:
	.string	"defer_output"
.LASF1501:
	.string	"CODE_FOR_sse_shufps"
.LASF350:
	.string	"TImode"
.LASF1834:
	.string	"CODE_FOR_strmovsi_rex64"
.LASF795:
	.string	"LABEL_EXPR"
.LASF853:
	.string	"BUILT_IN_SQRTF"
.LASF1308:
	.string	"n_alternatives"
.LASF856:
	.string	"BUILT_IN_SQRTL"
.LASF287:
	.string	"CM_SMALL"
.LASF2109:
	.string	"pretend_size"
.LASF2356:
	.string	"countreg"
.LASF571:
	.string	"current"
.LASF1606:
	.string	"CODE_FOR_mulv2sf3"
.LASF2029:
	.string	"align_jump_max_skip"
.LASF2514:
	.string	"ignore"
.LASF604:
	.string	"REG_DEP_OUTPUT"
.LASF2287:
	.string	"cmpmode"
.LASF218:
	.string	"IX86_BUILTIN_PSLLD"
.LASF143:
	.string	"IX86_BUILTIN_UCOMILTSS"
.LASF1213:
	.string	"TYPE_ICMOV"
.LASF2486:
	.string	"v4sf_ftype_v4sf_v4sf"
.LASF1337:
	.string	"CODE_FOR_cmpqi_ext_3_insn_rex64"
.LASF312:
	.string	"_IO_write_base"
.LASF349:
	.string	"DImode"
.LASF2440:
	.string	"ix86_set_move_mem_attrs_1"
.LASF219:
	.string	"IX86_BUILTIN_PSLLQ"
.LASF763:
	.string	"UNLT_EXPR"
.LASF2503:
	.string	"mode0"
.LASF2504:
	.string	"mode1"
.LASF2517:
	.string	"mode2"
.LASF217:
	.string	"IX86_BUILTIN_PSLLW"
.LASF79:
	.string	"FP_TOP_REG"
.LASF2232:
	.string	"oldx"
.LASF139:
	.string	"IX86_BUILTIN_COMIGTSS"
.LASF1769:
	.string	"CODE_FOR_rotrdi3"
.LASF257:
	.string	"IX86_BUILTIN_PAVGUSB"
.LASF2509:
	.string	"ix86_expand_unop1_builtin"
.LASF530:
	.string	"CALL_PLACEHOLDER"
.LASF2624:
	.string	"mode_bitsize"
.LASF2558:
	.string	"x86_push_memory"
.LASF1151:
	.string	"TI_UV16QI_TYPE"
.LASF43:
	.string	"mmx_move"
.LASF1303:
	.string	"operand_type"
.LASF1974:
	.string	"gcc_target"
.LASF1218:
	.string	"TYPE_FMUL"
.LASF52:
	.string	"sizetype"
.LASF1471:
	.string	"CODE_FOR_pro_epilogue_adjust_stack_rex64"
.LASF874:
	.string	"BUILT_IN_PUTCHAR"
.LASF2288:
	.string	"ix86_fp_compare_mode"
.LASF106:
	.string	"IX86_BUILTIN_MULPS"
.LASF2040:
	.string	"PTA_3DNOW"
.LASF1004:
	.string	"arg_offset_rtx"
.LASF2412:
	.string	"ix86_reorder_insn"
.LASF2404:
	.string	"ix86_safe_memory"
.LASF28:
	.string	"shift_var"
.LASF1162:
	.string	"TI_MAX"
.LASF390:
	.string	"V4SFmode"
.LASF1583:
	.string	"CODE_FOR_ashlv4hi3"
.LASF1966:
	.string	"adjust_priority"
.LASF430:
	.string	"DEFINE_SPLIT"
.LASF242:
	.string	"IX86_BUILTIN_RSQRTPS"
.LASF576:
	.string	"end_tree"
.LASF454:
	.string	"PARALLEL"
.LASF1496:
	.string	"CODE_FOR_sse_movhps"
.LASF2501:
	.string	"arg1"
.LASF2472:
	.string	"void_ftype_void"
.LASF1186:
	.string	"SSIZETYPE"
.LASF81:
	.string	"FLOAT_REGS"
.LASF244:
	.string	"IX86_BUILTIN_SQRTPS"
.LASF1934:
	.string	"prev"
.LASF618:
	.string	"REG_ALWAYS_RETURN"
.LASF1980:
	.string	"insert_attributes"
.LASF493:
	.string	"ROTATERT"
.LASF2591:
	.string	"x86_decompose_lea"
.LASF459:
	.string	"ADDR_VEC"
.LASF0:
	.string	"code"
.LASF1507:
	.string	"CODE_FOR_vmmulv4sf3"
.LASF695:
	.string	"FIELD_DECL"
.LASF1718:
	.string	"CODE_FOR_testsi_ccno_1"
.LASF657:
	.string	"tree_code"
.LASF755:
	.string	"LT_EXPR"
.LASF593:
	.string	"REG_EQUAL"
.LASF539:
	.string	"SS_TRUNCATE"
.LASF1841:
	.string	"CODE_FOR_strsetdi_rex64"
.LASF2524:
	.string	"add_cost"
.LASF375:
	.string	"V2QImode"
.LASF1003:
	.string	"outgoing_args_size"
.LASF1713:
	.string	"CODE_FOR_divdf3"
.LASF1387:
	.string	"CODE_FOR_divmodhi4"
.LASF2339:
	.string	"nops"
.LASF2091:
	.string	"needed_intregs"
.LASF2590:
	.string	"x86_epilogue_using_move"
.LASF2060:
	.string	"ix86_function_arg_regno_p"
.LASF2017:
	.string	"ppro"
.LASF12:
	.string	"rtvec_def"
.LASF884:
	.string	"BUILT_IN_FPUTC_UNLOCKED"
.LASF2089:
	.string	"nexps"
.LASF2357:
	.string	"ix86_zero_extend_to_Pmode"
.LASF1133:
	.string	"TI_COMPLEX_DOUBLE_TYPE"
.LASF2126:
	.string	"lab_over"
.LASF2255:
	.string	"output_387_binary_op"
.LASF1298:
	.string	"recog_data"
.LASF989:
	.string	"context"
.LASF2267:
	.string	"cmp_op0"
.LASF1033:
	.string	"x_var_temp_slot_level"
.LASF622:
	.string	"NOTE_INSN_DELETED"
.LASF1236:
	.string	"MODE_UNKNOWNFP"
.LASF1338:
	.string	"CODE_FOR_x86_fnstsw_1"
.LASF228:
	.string	"IX86_BUILTIN_PSRAWI"
.LASF2093:
	.string	"named"
.LASF1463:
	.string	"CODE_FOR_cmpstrqi_nz_1"
.LASF2036:
	.string	"PTA_SSE"
.LASF107:
	.string	"IX86_BUILTIN_MULSS"
.LASF240:
	.string	"IX86_BUILTIN_RCPPS"
.LASF544:
	.string	"min_after_vec"
.LASF325:
	.string	"_cur_column"
.LASF497:
	.string	"UMAX"
.LASF1129:
	.string	"TI_BITSIZE_ONE"
.LASF1062:
	.string	"profile"
.LASF1973:
	.string	"cycle_display"
.LASF2643:
	.string	"fixed_regs"
.LASF2360:
	.string	"align_exp"
.LASF1336:
	.string	"CODE_FOR_cmpqi_ext_3_insn"
.LASF1071:
	.string	"arg_pointer_save_area_init"
.LASF1575:
	.string	"CODE_FOR_smaxv4hi3"
.LASF1467:
	.string	"CODE_FOR_strlenqi_1"
.LASF947:
	.string	"ht_identifier"
.LASF2252:
	.string	"lo_half"
.LASF1061:
	.string	"instrument_entry_exit"
.LASF243:
	.string	"IX86_BUILTIN_RSQRTSS"
.LASF2295:
	.string	"fpcmp_mode"
.LASF2042:
	.string	"processor_alias_table"
.LASF2092:
	.string	"function_arg_advance"
.LASF1573:
	.string	"CODE_FOR_gtv2si3"
.LASF1327:
	.string	"optab_methods"
.LASF245:
	.string	"IX86_BUILTIN_SQRTSS"
.LASF1529:
	.string	"CODE_FOR_smaxv4sf3"
.LASF1806:
	.string	"CODE_FOR_buneq"
.LASF420:
	.string	"MATCH_OPERAND"
.LASF1526:
	.string	"CODE_FOR_sse_ucomi"
.LASF202:
	.string	"IX86_BUILTIN_PCMPGTB"
.LASF204:
	.string	"IX86_BUILTIN_PCMPGTD"
.LASF517:
	.string	"FLOAT"
.LASF1040:
	.string	"inl_last_parm_insn"
.LASF616:
	.string	"REG_NON_LOCAL_GOTO"
.LASF1207:
	.string	"TYPE_IBR"
.LASF2402:
	.string	"ix86_safe_length"
.LASF11:
	.string	"rtx_def"
.LASF380:
	.string	"V4HImode"
.LASF2277:
	.string	"matching_memory"
.LASF1862:
	.string	"CODE_FOR_maxdf3"
.LASF34:
	.string	"movzx"
.LASF1047:
	.string	"epilogue_delay_list"
.LASF1764:
	.string	"CODE_FOR_lshrqi3"
.LASF2435:
	.string	"uops"
.LASF619:
	.string	"REG_VTABLE_REF"
.LASF2065:
	.string	"param"
.LASF831:
	.string	"BUILT_IN_FFS"
.LASF2393:
	.string	"set2"
.LASF2649:
	.string	"current_output_insn"
.LASF1332:
	.string	"OPTAB_MUST_WIDEN"
.LASF2644:
	.string	"call_used_regs"
.LASF1759:
	.string	"CODE_FOR_ashrhi3"
.LASF1554:
	.string	"CODE_FOR_smulv4hi3_highpart"
.LASF2541:
	.string	"use_fast_prologue_epilogue"
.LASF2577:
	.string	"x86_himode_math"
.LASF1178:
	.string	"max_length"
.LASF1383:
	.string	"CODE_FOR_subsi3_carry"
.LASF1716:
	.string	"CODE_FOR_divmodsi4"
.LASF1831:
	.string	"CODE_FOR_movstrdi"
.LASF1121:
	.string	"TI_UINTTI_TYPE"
.LASF553:
	.string	"offset"
.LASF196:
	.string	"IX86_BUILTIN_PXOR"
.LASF275:
	.string	"IX86_BUILTIN_PMULHRW"
.LASF632:
	.string	"NOTE_INSN_EPILOGUE_BEG"
.LASF1164:
	.string	"itk_char"
.LASF2564:
	.string	"x86_unroll_strlen"
.LASF543:
	.string	"base_after_vec"
.LASF2010:
	.string	"X86_64_SSEUP_CLASS"
.LASF484:
	.string	"PLUS"
.LASF250:
	.string	"IX86_BUILTIN_ORPS"
.LASF1662:
	.string	"CODE_FOR_fix_trunctfdi2"
.LASF1808:
	.string	"CODE_FOR_bungt"
.LASF1914:
	.string	"OTI_movstrict"
.LASF346:
	.string	"QImode"
.LASF241:
	.string	"IX86_BUILTIN_RCPSS"
.LASF965:
	.string	"fragment_chain"
.LASF1530:
	.string	"CODE_FOR_vmsmaxv4sf3"
.LASF230:
	.string	"IX86_BUILTIN_PSRLWI"
.LASF909:
	.string	"chain"
.LASF904:
	.string	"BUILT_IN_VA_END"
.LASF2249:
	.string	"dstr"
.LASF1132:
	.string	"TI_COMPLEX_FLOAT_TYPE"
.LASF1542:
	.string	"CODE_FOR_ssaddv8qi3"
.LASF1408:
	.string	"CODE_FOR_jump"
.LASF2405:
	.string	"ix86_safe_pent_pair"
.LASF1837:
	.string	"CODE_FOR_strmovqi"
.LASF425:
	.string	"MATCH_OP_DUP"
.LASF803:
	.string	"SWITCH_EXPR"
.LASF1173:
	.string	"itk_long_long"
.LASF161:
	.string	"IX86_BUILTIN_STOREUPS"
.LASF2662:
	.string	"align_jumps_max_skip"
.LASF1212:
	.string	"TYPE_CALLV"
.LASF1232:
	.string	"MODE_QI"
.LASF2196:
	.string	"ix86_nsaved_regs"
.LASF1423:
	.string	"CODE_FOR_sqrtsf2_1_sse_only"
.LASF1282:
	.string	"x_forced_labels"
.LASF173:
	.string	"IX86_BUILTIN_PMOVMSKB"
.LASF176:
	.string	"IX86_BUILTIN_PACKSSWB"
.LASF898:
	.string	"BUILT_IN_FROB_RETURN_ADDR"
.LASF612:
	.string	"REG_EH_REGION"
.LASF1724:
	.string	"CODE_FOR_andqi3"
.LASF353:
	.string	"PHImode"
.LASF2615:
	.string	"ix86_regparm"
.LASF1652:
	.string	"CODE_FOR_extendsfxf2"
.LASF368:
	.string	"TCmode"
.LASF301:
	.string	"signed char"
.LASF1037:
	.string	"no_debugging_symbols"
.LASF1292:
	.string	"accesses_prev_frame"
.LASF2324:
	.string	"ix86_split_fp_branch"
.LASF207:
	.string	"IX86_BUILTIN_PMADDWD"
.LASF1097:
	.string	"uninlinable"
.LASF1804:
	.string	"CODE_FOR_bunordered"
.LASF581:
	.string	"global_live_at_start"
.LASF86:
	.string	"FLOAT_SSE_REGS"
.LASF393:
	.string	"V8DFmode"
.LASF1742:
	.string	"CODE_FOR_abssf2"
.LASF1313:
	.string	"predicate"
.LASF184:
	.string	"IX86_BUILTIN_PADDUSB"
.LASF366:
	.string	"DCmode"
.LASF1329:
	.string	"OPTAB_LIB"
.LASF358:
	.string	"TQFmode"
.LASF166:
	.string	"IX86_BUILTIN_MOVLHPS"
.LASF414:
	.string	"MAX_MODE_CLASS"
.LASF185:
	.string	"IX86_BUILTIN_PADDUSW"
.LASF1674:
	.string	"CODE_FOR_floatdisf2"
.LASF1403:
	.string	"CODE_FOR_ashrdi3_1"
.LASF98:
	.string	"sse_regno"
.LASF957:
	.string	"handler_block_flag"
.LASF873:
	.string	"BUILT_IN_PREFETCH"
.LASF510:
	.string	"UNLT"
.LASF923:
	.string	"protected_flag"
.LASF1881:
	.string	"handlers"
.LASF4:
	.string	"unchanging"
.LASF212:
	.string	"IX86_BUILTIN_PMULHUW"
.LASF548:
	.string	"offset_unsigned"
.LASF2185:
	.string	"x86_64_zero_extended_value"
.LASF1700:
	.string	"CODE_FOR_umulsidi3"
.LASF1118:
	.string	"TI_UINTHI_TYPE"
.LASF1234:
	.string	"MODE_SI"
.LASF1860:
	.string	"CODE_FOR_mindf3"
.LASF2211:
	.string	"style"
.LASF1056:
	.string	"has_nonlocal_label"
.LASF2031:
	.string	"branch_cost"
.LASF1628:
	.string	"CODE_FOR_cmpdi_1_rex64"
.LASF1595:
	.string	"CODE_FOR_emms"
.LASF908:
	.string	"tree_common"
.LASF704:
	.string	"CONSTRUCTOR"
.LASF1130:
	.string	"TI_BITSIZE_UNIT"
.LASF592:
	.string	"REG_EQUIV"
.LASF2663:
	.string	"align_functions"
.LASF1540:
	.string	"CODE_FOR_addv4hi3"
.LASF815:
	.string	"BUILT_IN_FABS"
.LASF1240:
	.string	"MODE_TI"
.LASF174:
	.string	"IX86_BUILTIN_MOVNTPS"
.LASF1776:
	.string	"CODE_FOR_seq"
.LASF2203:
	.string	"ix86_emit_save_regs_using_mov"
.LASF1779:
	.string	"CODE_FOR_sgtu"
.LASF2033:
	.string	"cpu_names"
.LASF2299:
	.string	"first_code"
.LASF1961:
	.string	"eh_frame_section"
.LASF732:
	.string	"FIX_FLOOR_EXPR"
.LASF620:
	.string	"insn_note"
.LASF1404:
	.string	"CODE_FOR_x86_shrd_1"
.LASF1658:
	.string	"CODE_FOR_trunctfsf2"
.LASF152:
	.string	"IX86_BUILTIN_CVTTPS2PI"
.LASF194:
	.string	"IX86_BUILTIN_PANDN"
.LASF2411:
	.string	"veclen"
.LASF1419:
	.string	"CODE_FOR_leave"
.LASF1354:
	.string	"CODE_FOR_extendhisi2"
.LASF607:
	.string	"REG_NOALIAS"
.LASF1489:
	.string	"CODE_FOR_mmx_pmovmskb"
.LASF1586:
	.string	"CODE_FOR_mmx_packsswb"
.LASF1515:
	.string	"CODE_FOR_vmsqrtv4sf2"
.LASF1379:
	.string	"CODE_FOR_addqi3_cc"
.LASF32:
	.string	"divide"
.LASF650:
	.string	"GR_ARG_POINTER"
.LASF1850:
	.string	"CODE_FOR_strlensi"
.LASF1809:
	.string	"CODE_FOR_bunle"
.LASF675:
	.string	"FILE_TYPE"
.LASF1810:
	.string	"CODE_FOR_bunlt"
.LASF418:
	.string	"EXPR_LIST"
.LASF2061:
	.string	"init_cumulative_args"
.LASF2184:
	.string	"x86_64_sign_extended_value"
.LASF496:
	.string	"UMIN"
.LASF2408:
	.string	"dump"
.LASF1710:
	.string	"CODE_FOR_mulsf3"
.LASF261:
	.string	"IX86_BUILTIN_PFCMPEQ"
.LASF2235:
	.string	"other"
.LASF860:
	.string	"BUILT_IN_CLASSIFY_TYPE"
.LASF42:
	.string	"fp_store"
.LASF160:
	.string	"IX86_BUILTIN_STOREAPS"
.LASF1196:
	.string	"TYPE_NEGNOT"
.LASF447:
	.string	"INSN"
.LASF252:
	.string	"IX86_BUILTIN_EMMS"
.LASF799:
	.string	"LOOP_EXPR"
.LASF2390:
	.string	"ix86_flags_dependant"
.LASF2556:
	.string	"target_flags"
.LASF1782:
	.string	"CODE_FOR_sge"
.LASF574:
	.string	"head"
.LASF1348:
	.string	"CODE_FOR_zero_extendsidi2_rex64"
.LASF1857:
	.string	"CODE_FOR_movxfcc"
.LASF1778:
	.string	"CODE_FOR_sgt"
.LASF2628:
	.string	"split_branch_probability"
.LASF723:
	.string	"ROUND_DIV_EXPR"
.LASF1647:
	.string	"CODE_FOR_zero_extendqihi2"
.LASF1096:
	.string	"non_addressable"
.LASF2617:
	.string	"ix86_branch_cost"
.LASF1651:
	.string	"CODE_FOR_extendsfdf2"
.LASF441:
	.string	"DEFINE_ATTR"
.LASF2667:
	.string	"mark_machine_status"
.LASF960:
	.string	"vars"
.LASF1449:
	.string	"CODE_FOR_rep_movqi"
.LASF1524:
	.string	"CODE_FOR_vmmaskncmpv4sf3"
.LASF37:
	.string	"movzbl_load"
.LASF341:
	.string	"long long unsigned int"
.LASF2015:
	.string	"decode"
.LASF1460:
	.string	"CODE_FOR_rep_stossi_rex64"
.LASF239:
	.string	"IX86_BUILTIN_SHUFPS"
.LASF1494:
	.string	"CODE_FOR_sse_movhlps"
.LASF1763:
	.string	"CODE_FOR_lshrhi3"
.LASF44:
	.string	"mmx_load"
.LASF2657:
	.string	"flag_asynchronous_unwind_tables"
.LASF2205:
	.string	"pic_reg_used"
.LASF264:
	.string	"IX86_BUILTIN_PFMAX"
.LASF262:
	.string	"IX86_BUILTIN_PFCMPGE"
.LASF1741:
	.string	"CODE_FOR_negtf2"
.LASF713:
	.string	"WITH_CLEANUP_EXPR"
.LASF472:
	.string	"VALUE"
.LASF2484:
	.string	"void_ftype_pdi_di"
.LASF263:
	.string	"IX86_BUILTIN_PFCMPGT"
.LASF546:
	.string	"min_after_base"
.LASF914:
	.string	"readonly_flag"
.LASF2012:
	.string	"X86_64_X87UP_CLASS"
.LASF2493:
	.string	"v2si_ftype_v2si"
.LASF1258:
	.string	"promoted_mode"
.LASF2083:
	.string	"__FUNCTION__"
.LASF410:
	.string	"MODE_COMPLEX_INT"
.LASF503:
	.string	"POST_MODIFY"
.LASF937:
	.string	"real_extract"
.LASF1550:
	.string	"CODE_FOR_sssubv4hi3"
.LASF2559:
	.string	"x86_zero_extend_with_and"
.LASF861:
	.string	"BUILT_IN_NEXT_ARG"
.LASF2086:
	.string	"nsseregs"
.LASF1239:
	.string	"MODE_XF"
.LASF151:
	.string	"IX86_BUILTIN_CVTSS2SI"
.LASF533:
	.string	"VEC_CONCAT"
.LASF1458:
	.string	"CODE_FOR_rep_stosdi_rex64"
.LASF65:
	.string	"reg_class"
.LASF1206:
	.string	"TYPE_IDIV"
.LASF2114:
	.string	"label_ref"
.LASF2303:
	.string	"ix86_fp_comparison_cost"
.LASF2489:
	.string	"v2si_ftype_v2si_v2si"
.LASF1772:
	.string	"CODE_FOR_rotrqi3"
.LASF1447:
	.string	"CODE_FOR_rep_movsi"
.LASF2305:
	.string	"sahf_cost"
.LASF1375:
	.string	"CODE_FOR_floatsixf2"
.LASF1259:
	.string	"unsignedp"
.LASF945:
	.string	"tree_vector"
.LASF2491:
	.string	"v2si_ftype_v2sf"
.LASF959:
	.string	"block_num"
.LASF1341:
	.string	"CODE_FOR_movsi_insv_1"
.LASF2375:
	.string	"align_rtx"
.LASF2516:
	.string	"arg2"
.LASF952:
	.string	"tree_vec"
.LASF806:
	.string	"built_in_class"
.LASF518:
	.string	"UNSIGNED_FLOAT"
.LASF1448:
	.string	"CODE_FOR_rep_movsi_rex64"
.LASF170:
	.string	"IX86_BUILTIN_STORELPS"
.LASF2229:
	.string	"legitimize_pic_address"
.LASF1900:
	.string	"OTI_ftrunc"
.LASF1402:
	.string	"CODE_FOR_ashrdi3_63_rex64"
.LASF2498:
	.string	"ix86_expand_binop_builtin"
.LASF363:
	.string	"QCmode"
.LASF385:
	.string	"V8SImode"
.LASF1295:
	.string	"OP_IN"
.LASF2115:
	.string	"tmp_reg"
.LASF2144:
	.string	"const_int_1_operand"
.LASF842:
	.string	"BUILT_IN_STRNCMP"
.LASF1648:
	.string	"CODE_FOR_zero_extendqisi2"
.LASF457:
	.string	"UNSPEC"
.LASF652:
	.string	"GR_VIRTUAL_STACK_ARGS"
.LASF1391:
	.string	"CODE_FOR_andqi_ext_0"
.LASF733:
	.string	"FIX_ROUND_EXPR"
.LASF638:
	.string	"NOTE_INSN_RANGE_BEG"
.LASF2437:
	.string	"dstref"
.LASF2439:
	.string	"dstreg"
.LASF1487:
	.string	"CODE_FOR_sse_movups"
.LASF2383:
	.string	"ix86_mark_machine_status"
.LASF1119:
	.string	"TI_UINTSI_TYPE"
.LASF2278:
	.string	"src1"
.LASF2279:
	.string	"src2"
.LASF501:
	.string	"POST_INC"
.LASF1843:
	.string	"CODE_FOR_strsetsi_rex64"
.LASF2117:
	.string	"stdarg_p"
.LASF2455:
	.string	"pdi_type_node"
.LASF481:
	.string	"IF_THEN_ELSE"
.LASF66:
	.string	"NO_REGS"
.LASF669:
	.string	"BOOLEAN_TYPE"
.LASF114:
	.string	"IX86_BUILTIN_CMPGEPS"
.LASF1420:
	.string	"CODE_FOR_leave_rex64"
.LASF1935:
	.string	"bits"
.LASF1735:
	.string	"CODE_FOR_negsi2"
.LASF1277:
	.string	"x_pending_stack_adjust"
.LASF2048:
	.string	"args"
.LASF1689:
	.string	"CODE_FOR_subxf3"
.LASF437:
	.string	"DEFINE_ASM_ATTRIBUTES"
.LASF1784:
	.string	"CODE_FOR_sle"
.LASF2661:
	.string	"align_jumps"
.LASF587:
	.string	"flags"
.LASF488:
	.string	"UMOD"
.LASF7:
	.string	"used"
.LASF1780:
	.string	"CODE_FOR_slt"
.LASF1998:
	.string	"hard_frame_pointer_offset"
.LASF1288:
	.string	"temp_slot"
.LASF1917:
	.string	"OTI_abs"
.LASF1682:
	.string	"CODE_FOR_addtf3"
.LASF306:
	.string	"FILE"
.LASF70:
	.string	"BREG"
.LASF1265:
	.string	"x_reg_rtx_no"
.LASF1824:
	.string	"CODE_FOR_epilogue"
.LASF83:
	.string	"MMX_REGS"
.LASF120:
	.string	"IX86_BUILTIN_CMPORDPS"
.LASF864:
	.string	"BUILT_IN_FRAME_ADDRESS"
.LASF801:
	.string	"EXIT_BLOCK_EXPR"
.LASF1960:
	.string	"exception_section"
.LASF2376:
	.string	"align_2_label"
.LASF1619:
	.string	"CODE_FOR_pfrsqrtv2sf2"
.LASF1891:
	.string	"OTI_smul_widen"
.LASF2070:
	.string	"classify_argument"
.LASF2242:
	.string	"reverse"
.LASF2337:
	.string	"compare_op"
.LASF1291:
	.string	"save_varrargs_registers"
.LASF1853:
	.string	"CODE_FOR_movsicc"
.LASF734:
	.string	"FLOAT_EXPR"
.LASF305:
	.string	"char"
.LASF890:
	.string	"BUILT_IN_ISLESS"
.LASF1325:
	.string	"EXPAND_INITIALIZER"
.LASF1319:
	.string	"genfun"
.LASF2197:
	.string	"ix86_initial_elimination_offset"
.LASF1777:
	.string	"CODE_FOR_sne"
.LASF2453:
	.string	"pfloat_type_node"
.LASF1883:
	.string	"OTI_add"
.LASF779:
	.string	"ADDR_EXPR"
.LASF2179:
	.string	"aligned_operand"
.LASF1512:
	.string	"CODE_FOR_rsqrtv4sf2"
.LASF1616:
	.string	"CODE_FOR_pfrcpv2sf2"
.LASF2333:
	.string	"tmpreg"
.LASF2102:
	.string	"f_gpr"
.LASF1722:
	.string	"CODE_FOR_andsi3"
.LASF1675:
	.string	"CODE_FOR_floatsidf2"
.LASF2638:
	.string	"integer_types"
.LASF1885:
	.string	"OTI_sub"
.LASF487:
	.string	"UDIV"
.LASF127:
	.string	"IX86_BUILTIN_CMPGESS"
.LASF2641:
	.string	"regs_ever_live"
.LASF291:
	.string	"CM_SMALL_PIC"
.LASF1491:
	.string	"CODE_FOR_mmx_maskmovq_rex"
.LASF883:
	.string	"BUILT_IN_PRINTF_UNLOCKED"
.LASF26:
	.string	"block"
.LASF283:
	.string	"IX86_BUILTIN_MMX_ZERO"
.LASF213:
	.string	"IX86_BUILTIN_PMULHW"
.LASF760:
	.string	"NE_EXPR"
.LASF1773:
	.string	"CODE_FOR_extv"
.LASF2005:
	.string	"X86_64_INTEGER_CLASS"
.LASF1035:
	.string	"fixup_var_refs_queue"
.LASF1385:
	.string	"CODE_FOR_divqi3"
.LASF2505:
	.string	"ix86_expand_timode_binop_builtin"
.LASF121:
	.string	"IX86_BUILTIN_CMPUNORDPS"
.LASF1746:
	.string	"CODE_FOR_one_cmpldi2"
.LASF1355:
	.string	"CODE_FOR_extendqihi2"
.LASF370:
	.string	"CHImode"
.LASF1220:
	.string	"TYPE_FPSPC"
.LASF122:
	.string	"IX86_BUILTIN_CMPNEPS"
.LASF1195:
	.string	"TYPE_ALU1"
.LASF2545:
	.string	"x86_64_int_parameter_registers"
.LASF697:
	.string	"COMPONENT_REF"
.LASF133:
	.string	"IX86_BUILTIN_CMPORDSS"
.LASF664:
	.string	"INTEGER_TYPE"
.LASF1069:
	.string	"uses_pic_offset_table"
.LASF915:
	.string	"unsigned_flag"
.LASF828:
	.string	"BUILT_IN_CIMAGL"
.LASF1108:
	.string	"pointer_alias_set"
.LASF2392:
	.string	"insn_type"
.LASF1228:
	.string	"TYPE_FISTP"
.LASF790:
	.string	"POSTINCREMENT_EXPR"
.LASF560:
	.string	"rtint"
.LASF1511:
	.string	"CODE_FOR_vmrcpv4sf2"
.LASF167:
	.string	"IX86_BUILTIN_LOADHPS"
.LASF715:
	.string	"PLACEHOLDER_EXPR"
.LASF265:
	.string	"IX86_BUILTIN_PFMIN"
.LASF2175:
	.string	"memory_displacement_operand"
.LASF1431:
	.string	"CODE_FOR_sinsf2"
.LASF388:
	.string	"V2SFmode"
.LASF1427:
	.string	"CODE_FOR_sqrtdf2_i387"
.LASF776:
	.string	"SAVE_EXPR"
.LASF1124:
	.string	"TI_INTEGER_MINUS_ONE"
.LASF146:
	.string	"IX86_BUILTIN_UCOMIGESS"
.LASF1691:
	.string	"CODE_FOR_subdf3"
.LASF1612:
	.string	"CODE_FOR_pfpnacc"
.LASF588:
	.string	"rtunion"
.LASF2280:
	.string	"ix86_binary_operator_ok"
.LASF2583:
	.string	"x86_add_esp_8"
.LASF783:
	.string	"COMPLEX_EXPR"
.LASF1927:
	.string	"OTI_strlen"
.LASF992:
	.string	"cselib_val_struct"
.LASF2125:
	.string	"lab_false"
.LASF2496:
	.string	"v2si_ftype_v2sf_v2sf"
.LASF1502:
	.string	"CODE_FOR_addv4sf3"
.LASF1976:
	.string	"merge_type_attributes"
.LASF2579:
	.string	"x86_promote_qi_regs"
.LASF579:
	.string	"local_set"
.LASF90:
	.string	"ALL_REGS"
.LASF2513:
	.string	"subtarget"
.LASF80:
	.string	"FP_SECOND_REG"
.LASF1582:
	.string	"CODE_FOR_mmx_lshrdi3"
.LASF1972:
	.string	"reorder2"
.LASF1771:
	.string	"CODE_FOR_rotrhi3"
.LASF2154:
	.string	"incdec_operand"
.LASF2191:
	.string	"pclab"
.LASF2045:
	.string	"optimization_options"
.LASF653:
	.string	"GR_VIRTUAL_STACK_DYNAMIC"
.LASF1139:
	.string	"TI_PTR_TYPE"
.LASF1805:
	.string	"CODE_FOR_bordered"
.LASF2445:
	.string	"x86_initialize_trampoline"
.LASF851:
	.string	"BUILT_IN_SIN"
.LASF221:
	.string	"IX86_BUILTIN_PSRAD"
.LASF545:
	.string	"max_after_vec"
.LASF2027:
	.string	"align_loop_max_skip"
.LASF1937:
	.string	"bitmap"
.LASF2281:
	.string	"ix86_expand_unary_operator"
.LASF134:
	.string	"IX86_BUILTIN_CMPUNORDSS"
.LASF135:
	.string	"IX86_BUILTIN_CMPNESS"
.LASF2601:
	.string	"ix86_debug_addr_string"
.LASF1241:
	.string	"attr_memory"
.LASF2341:
	.string	"orig_out"
.LASF1366:
	.string	"CODE_FOR_fix_truncdfsi_sse"
.LASF1223:
	.string	"TYPE_FXCH"
.LASF164:
	.string	"IX86_BUILTIN_MOVSS"
.LASF1814:
	.string	"CODE_FOR_doloop_end"
.LASF321:
	.string	"_chain"
.LASF775:
	.string	"VIEW_CONVERT_EXPR"
.LASF1356:
	.string	"CODE_FOR_extendqisi2"
.LASF1482:
	.string	"CODE_FOR_movv4hi_internal"
.LASF2188:
	.string	"xops"
.LASF214:
	.string	"IX86_BUILTIN_PMULLW"
.LASF2176:
	.string	"parts"
.LASF93:
	.string	"words"
.LASF833:
	.string	"BUILT_IN_RINDEX"
.LASF1988:
	.string	"cannot_modify_jumps_p"
.LASF1034:
	.string	"x_target_temp_slot_level"
.LASF1:
	.string	"mode"
.LASF1400:
	.string	"CODE_FOR_ashldi3_1"
.LASF2604:
	.string	"ix86_cmodel_string"
.LASF1497:
	.string	"CODE_FOR_sse_movlps"
.LASF980:
	.string	"pointer_to"
.LASF2064:
	.string	"zero_cum"
.LASF1316:
	.string	"eliminable"
.LASF2309:
	.string	"second_test"
.LASF2462:
	.string	"int_ftype_v4hi_int"
.LASF2317:
	.string	"simple"
.LASF2433:
	.string	"ix86_variable_issue"
.LASF569:
	.string	"bitmap_head_def"
.LASF1685:
	.string	"CODE_FOR_subdi3"
.LASF1110:
	.string	"tree_index"
.LASF40:
	.string	"fp_move"
.LASF1439:
	.string	"CODE_FOR_strmovdi_rex_1"
.LASF438:
	.string	"DEFINE_COND_EXEC"
.LASF944:
	.string	"imag"
.LASF154:
	.string	"IX86_BUILTIN_MAXPS"
.LASF46:
	.string	"sse_move"
.LASF2013:
	.string	"X86_64_MEMORY_CLASS"
.LASF2322:
	.string	"xor0"
.LASF2323:
	.string	"xor1"
.LASF1564:
	.string	"CODE_FOR_mmx_psadbw"
.LASF2181:
	.string	"standard_sse_constant_p"
.LASF2477:
	.string	"v2si_ftype_v4sf"
.LASF376:
	.string	"V2HImode"
.LASF2421:
	.string	"secondcycles"
.LASF648:
	.string	"GR_FRAME_POINTER"
.LASF1266:
	.string	"x_first_label_num"
.LASF1299:
	.string	"operand"
.LASF467:
	.string	"CONST_INT"
.LASF785:
	.string	"REALPART_EXPR"
.LASF359:
	.string	"SFmode"
.LASF1194:
	.string	"TYPE_MULTI"
.LASF446:
	.string	"ATTR_FLAG"
.LASF2318:
	.string	"use_fcomi"
.LASF602:
	.string	"REG_LABEL"
.LASF2544:
	.string	"qi_high_reg_name"
.LASF1807:
	.string	"CODE_FOR_bunge"
.LASF1237:
	.string	"MODE_SF"
.LASF1770:
	.string	"CODE_FOR_rotrsi3"
.LASF2398:
	.string	"dep_insn_type"
.LASF18:
	.string	"real_cst"
.LASF2225:
	.string	"strict"
.LASF1536:
	.string	"CODE_FOR_cvtsi2ss"
.LASF1649:
	.string	"CODE_FOR_zero_extendsidi2"
.LASF2399:
	.string	"memory"
.LASF2312:
	.string	"tmp2"
.LASF2099:
	.string	"ix86_return_in_memory"
.LASF1367:
	.string	"CODE_FOR_fix_trunchi_nomemory"
.LASF292:
	.string	"asm_dialect"
.LASF1621:
	.string	"CODE_FOR_pmulhrwv4hi3"
.LASF1930:
	.string	"OTI_cstore"
.LASF2664:
	.string	"cfun"
.LASF514:
	.string	"TRUNCATE"
.LASF10:
	.string	"rtvec"
.LASF2625:
	.string	"rtx_length"
.LASF1102:
	.string	"assembler_name"
.LASF2355:
	.string	"ix86_adjust_counter"
.LASF849:
	.string	"BUILT_IN_STRRCHR"
.LASF1000:
	.string	"pops_args"
.LASF2487:
	.string	"v8qi_ftype_v8qi_v8qi"
.LASF839:
	.string	"BUILT_IN_STRCPY"
.LASF986:
	.string	"next_variant"
.LASF2134:
	.string	"src_mem"
.LASF2107:
	.string	"type_decl"
.LASF2652:
	.string	"flag_pcc_struct_return"
.LASF2170:
	.string	"ext_register_operand"
.LASF1107:
	.string	"vindex"
.LASF1858:
	.string	"CODE_FOR_movtfcc"
.LASF1143:
	.string	"TI_VOID_LIST_NODE"
.LASF1317:
	.string	"insn_data"
.LASF2265:
	.string	"eflags_p"
.LASF117:
	.string	"IX86_BUILTIN_CMPNLEPS"
.LASF1185:
	.string	"SIZETYPE"
.LASF400:
	.string	"CCZmode"
.LASF623:
	.string	"NOTE_INSN_BLOCK_BEG"
.LASF1577:
	.string	"CODE_FOR_sminv4hi3"
.LASF924:
	.string	"bounded_flag"
.LASF195:
	.string	"IX86_BUILTIN_POR"
.LASF155:
	.string	"IX86_BUILTIN_MAXSS"
.LASF1257:
	.string	"modified"
.LASF307:
	.string	"_IO_FILE"
.LASF1401:
	.string	"CODE_FOR_x86_shld_1"
.LASF2659:
	.string	"align_loops"
.LASF1947:
	.string	"asm_int_op"
.LASF1018:
	.string	"x_stack_slot_list"
.LASF1287:
	.string	"initial_value_struct"
.LASF1531:
	.string	"CODE_FOR_sminv4sf3"
.LASF2258:
	.string	"emit_i387_cw_initialization"
.LASF304:
	.string	"__off64_t"
.LASF1816:
	.string	"CODE_FOR_call"
.LASF1774:
	.string	"CODE_FOR_extzv"
.LASF2480:
	.string	"v4sf_ftype_pfloat"
.LASF2353:
	.string	"variable"
.LASF1190:
	.string	"UBITSIZETYPE"
.LASF994:
	.string	"off_align"
.LASF1374:
	.string	"CODE_FOR_floathitf2"
.LASF1603:
	.string	"CODE_FOR_eqv2sf3"
.LASF1867:
	.string	"CODE_FOR_conditional_trap"
.LASF2572:
	.string	"x86_read_modify_write"
.LASF1029:
	.string	"x_max_parm_reg"
.LASF2164:
	.string	"inmode"
.LASF1106:
	.string	"inlined_fns"
.LASF1360:
	.string	"CODE_FOR_fix_truncdi_memory"
.LASF970:
	.string	"attributes"
.LASF2208:
	.string	"arg0"
.LASF1473:
	.string	"CODE_FOR_sse_movsfcc_eq"
.LASF1519:
	.string	"CODE_FOR_sse_xorti3"
.LASF939:
	.string	"tree_string"
.LASF1714:
	.string	"CODE_FOR_divsf3"
.LASF2654:
	.string	"flag_unsafe_math_optimizations"
.LASF882:
	.string	"BUILT_IN_PUTS_UNLOCKED"
.LASF1901:
	.string	"OTI_and"
.LASF2041:
	.string	"PTA_3DNOW_A"
.LASF1986:
	.string	"have_named_sections"
.LASF2174:
	.string	"arith_or_logical_operator"
.LASF2424:
	.string	"pair1"
.LASF2425:
	.string	"pair2"
.LASF253:
	.string	"IX86_BUILTIN_LDMXCSR"
.LASF1817:
	.string	"CODE_FOR_call_exp"
.LASF2237:
	.string	"output_pic_addr_const"
.LASF2335:
	.string	"compare_code"
.LASF1245:
	.string	"MEMORY_BOTH"
.LASF2603:
	.string	"ix86_asm_dialect"
.LASF23:
	.string	"decl"
.LASF1075:
	.string	"external_flag"
.LASF347:
	.string	"HImode"
.LASF1200:
	.string	"TYPE_IMOV"
.LASF2547:
	.string	"internal_label_prefix"
.LASF2009:
	.string	"X86_64_SSEDF_CLASS"
.LASF1072:
	.string	"tree_decl"
.LASF788:
	.string	"PREINCREMENT_EXPR"
.LASF1854:
	.string	"CODE_FOR_movhicc"
.LASF1752:
	.string	"CODE_FOR_x86_shift_adj_2"
.LASF1437:
	.string	"CODE_FOR_costf2"
.LASF2306:
	.string	"arithmetics_cost"
.LASF452:
	.string	"NOTE"
.LASF532:
	.string	"VEC_SELECT"
.LASF72:
	.string	"DIREG"
.LASF1910:
	.string	"OTI_smax"
.LASF984:
	.string	"minval"
.LASF1381:
	.string	"CODE_FOR_addqi_ext_1"
.LASF1543:
	.string	"CODE_FOR_ssaddv4hi3"
.LASF1532:
	.string	"CODE_FOR_vmsminv4sf3"
.LASF1571:
	.string	"CODE_FOR_gtv8qi3"
.LASF1122:
	.string	"TI_INTEGER_ZERO"
.LASF130:
	.string	"IX86_BUILTIN_CMPNLESS"
.LASF1597:
	.string	"CODE_FOR_stmxcsr"
.LASF940:
	.string	"length"
.LASF2482:
	.string	"void_ftype_pv2si_v4sf"
.LASF2120:
	.string	"nextarg"
.LASF1005:
	.string	"args_info"
.LASF1154:
	.string	"TI_V4SI_TYPE"
.LASF2346:
	.string	"nparts"
.LASF1882:
	.string	"optab_index"
.LASF889:
	.string	"BUILT_IN_ISGREATEREQUAL"
.LASF1708:
	.string	"CODE_FOR_multf3"
.LASF1938:
	.string	"regset"
.LASF2364:
	.string	"countreg2"
.LASF1065:
	.string	"stdarg"
.LASF2172:
	.string	"mult_operator"
.LASF1936:
	.string	"bitmap_element"
.LASF513:
	.string	"ZERO_EXTEND"
.LASF424:
	.string	"MATCH_PARALLEL"
.LASF674:
	.string	"METHOD_TYPE"
.LASF1861:
	.string	"CODE_FOR_maxsf3"
.LASF2128:
	.string	"container"
.LASF2443:
	.string	"ix86_data_alignment"
.LASF2666:
	.string	"free_machine_status"
.LASF433:
	.string	"DEFINE_COMBINE"
.LASF1290:
	.string	"stack_locals"
.LASF911:
	.string	"constant_flag"
.LASF865:
	.string	"BUILT_IN_RETURN_ADDRESS"
.LASF141:
	.string	"IX86_BUILTIN_COMINEQSS"
.LASF663:
	.string	"VOID_TYPE"
.LASF2073:
	.string	"bytes"
.LASF2201:
	.string	"ix86_compute_frame_layout"
.LASF295:
	.string	"unsigned int"
.LASF1214:
	.string	"TYPE_FMOV"
.LASF2391:
	.string	"dep_insn"
.LASF1610:
	.string	"CODE_FOR_pfacc"
.LASF629:
	.string	"NOTE_INSN_LOOP_END_TOP_COND"
.LASF1276:
	.string	"expr_status"
.LASF2226:
	.string	"reason"
.LASF1570:
	.string	"CODE_FOR_eqv2si3"
.LASF2474:
	.string	"unsigned_ftype_void"
.LASF1412:
	.string	"CODE_FOR_return_pop_internal"
.LASF1191:
	.string	"TYPE_KIND_LAST"
.LASF805:
	.string	"LAST_AND_UNUSED_TREE_CODE"
.LASF813:
	.string	"BUILT_IN_ABS"
.LASF1922:
	.string	"OTI_sin"
.LASF550:
	.string	"addr_diff_vec_flags"
.LASF637:
	.string	"NOTE_INSN_REPEATED_LINE_NUMBER"
	.ident	"GCC: (Ubuntu/Linaro 4.8.1-10ubuntu9) 4.8.1"
	.section	.note.GNU-stack,"",@progbits
