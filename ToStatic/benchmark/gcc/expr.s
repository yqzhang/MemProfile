	.file	"expr.c"
# GNU C (Ubuntu/Linaro 4.8.1-10ubuntu9) version 4.8.1 (x86_64-linux-gnu)
#	compiled by GNU C version 4.8.1, GMP version 5.1.2, MPFR version 3.1.1-p2, MPC version 1.0.1
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed:  -I . -imultiarch x86_64-linux-gnu -D SPEC_CPU -D NDEBUG
# -D SPEC_CPU_LP64 expr.c -mtune=generic -march=x86-64 -g -fverbose-asm
# -fno-strict-aliasing -fstack-protector -Wformat -Wformat-security
# options enabled:  -faggressive-loop-optimizations
# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg -fcommon
# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
# -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fgnu-runtime
# -fident -finline-atomics -fira-hoist-pressure -fira-share-save-slots
# -fira-share-spill-slots -fivopts -fkeep-static-consts
# -fleading-underscore -fmath-errno -fmerge-debug-strings
# -fmove-loop-invariants -fpeephole -fprefetch-loop-arrays
# -freg-struct-return -fsched-critical-path-heuristic
# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fshow-column
# -fsigned-zeros -fsplit-ivs-in-unroller -fstack-protector
# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
# -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
# -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
# -ftree-parallelize-loops= -ftree-phiprop -ftree-pta -ftree-reassoc
# -ftree-scev-cprop -ftree-slp-vectorize -ftree-vect-loop-version
# -funit-at-a-time -funwind-tables -fverbose-asm -fzero-initialized-in-bss
# -m128bit-long-double -m64 -m80387 -maccumulate-outgoing-args
# -malign-stringops -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc
# -mieee-fp -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse
# -msse2 -mtls-direct-seg-refs

	.text
.Ltext0:
	.comm	cse_not_expected,4,4
	.local	placeholder_list
	.comm	placeholder_list,8,8
	.local	direct_load
	.comm	direct_load,59,32
	.local	direct_store
	.comm	direct_store,59,32
	.comm	movstr_optab,236,32
	.comm	clrstr_optab,236,32
	.globl	init_expr_once
	.type	init_expr_once, @function
init_expr_once:
.LFB2:
	.file 1 "expr.c"
	.loc 1 206 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	.loc 1 212 0
	call	start_sequence	#
	.loc 1 217 0
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.25546
	movq	%rax, %rsi	# D.25546,
	movl	$0, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -40(%rbp)	# tmp83, mem
	.loc 1 218 0
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.25546
	movq	%rax, %rsi	# D.25546,
	movl	$0, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -32(%rbp)	# tmp84, mem1
	.loc 1 220 0
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.25546,
	call	emit_insn	#
	movq	%rax, -24(%rbp)	# tmp85, insn
	.loc 1 221 0
	movq	-24(%rbp), %rax	# insn, tmp86
	movq	32(%rax), %rax	# insn_8->fld[3].rtx, tmp87
	movq	%rax, -16(%rbp)	# tmp87, pat
	.loc 1 223 0
	movl	$0, -48(%rbp)	#, mode
	jmp	.L2	#
.L11:
.LBB2:
	.loc 1 229 0
	movl	-48(%rbp), %ecx	# mode, mode.0
	movl	-48(%rbp), %eax	# mode, mode.1
	movslq	%eax, %rdx	# mode.1, tmp88
	movb	$0, direct_store(%rdx)	#, direct_store
	cltq
	movzbl	direct_store(%rax), %edx	# direct_store, D.25547
	movslq	%ecx, %rax	# mode.0, tmp90
	movb	%dl, direct_load(%rax)	# D.25547, direct_load
	.loc 1 230 0
	movl	-48(%rbp), %eax	# mode, tmp91
	movl	%eax, %edx	# tmp91, D.25548
	movq	-40(%rbp), %rax	# mem, tmp92
	movb	%dl, 2(%rax)	# D.25548, mem_4->mode
	.loc 1 231 0
	movl	-48(%rbp), %eax	# mode, tmp93
	movl	%eax, %edx	# tmp93, D.25548
	movq	-32(%rbp), %rax	# mem1, tmp94
	movb	%dl, 2(%rax)	# D.25548, mem1_6->mode
	.loc 1 236 0
	cmpl	$0, -48(%rbp)	#, mode
	je	.L3	#,
	.loc 1 236 0 is_stmt 0 discriminator 1
	cmpl	$51, -48(%rbp)	#, mode
	je	.L3	#,
	.loc 1 237 0 is_stmt 1
	movl	$0, -44(%rbp)	#, regno
	jmp	.L4	#
.L10:
	.loc 1 241 0
	movl	-48(%rbp), %edx	# mode, tmp95
	movl	-44(%rbp), %eax	# regno, tmp96
	movl	%edx, %esi	# tmp95,
	movl	%eax, %edi	# tmp96,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.25549
	jne	.L5	#,
	.loc 1 242 0
	jmp	.L6	#
.L5:
	.loc 1 244 0
	movl	-44(%rbp), %edx	# regno, tmp97
	movl	-48(%rbp), %eax	# mode, tmp98
	movl	%edx, %esi	# tmp97,
	movl	%eax, %edi	# tmp98,
	call	gen_rtx_REG	#
	movq	%rax, -8(%rbp)	# tmp99, reg
	.loc 1 246 0
	movq	-16(%rbp), %rax	# pat, tmp100
	movq	-40(%rbp), %rdx	# mem, tmp101
	movq	%rdx, 16(%rax)	# tmp101, pat_9->fld[1].rtx
	.loc 1 247 0
	movq	-16(%rbp), %rax	# pat, tmp102
	movq	-8(%rbp), %rdx	# reg, tmp103
	movq	%rdx, 8(%rax)	# tmp103, pat_9->fld[0].rtx
	.loc 1 248 0
	leaq	-52(%rbp), %rdx	#, tmp104
	movq	-24(%rbp), %rcx	# insn, tmp105
	movq	-16(%rbp), %rax	# pat, tmp106
	movq	%rcx, %rsi	# tmp105,
	movq	%rax, %rdi	# tmp106,
	call	recog	#
	testl	%eax, %eax	# D.25549
	js	.L7	#,
	.loc 1 249 0
	movl	-48(%rbp), %eax	# mode, mode.2
	cltq
	movb	$1, direct_load(%rax)	#, direct_load
.L7:
	.loc 1 251 0
	movq	-16(%rbp), %rax	# pat, tmp108
	movq	-32(%rbp), %rdx	# mem1, tmp109
	movq	%rdx, 16(%rax)	# tmp109, pat_9->fld[1].rtx
	.loc 1 252 0
	movq	-16(%rbp), %rax	# pat, tmp110
	movq	-8(%rbp), %rdx	# reg, tmp111
	movq	%rdx, 8(%rax)	# tmp111, pat_9->fld[0].rtx
	.loc 1 253 0
	leaq	-52(%rbp), %rdx	#, tmp112
	movq	-24(%rbp), %rcx	# insn, tmp113
	movq	-16(%rbp), %rax	# pat, tmp114
	movq	%rcx, %rsi	# tmp113,
	movq	%rax, %rdi	# tmp114,
	call	recog	#
	testl	%eax, %eax	# D.25549
	js	.L8	#,
	.loc 1 254 0
	movl	-48(%rbp), %eax	# mode, mode.3
	cltq
	movb	$1, direct_load(%rax)	#, direct_load
.L8:
	.loc 1 256 0
	movq	-16(%rbp), %rax	# pat, tmp116
	movq	-8(%rbp), %rdx	# reg, tmp117
	movq	%rdx, 16(%rax)	# tmp117, pat_9->fld[1].rtx
	.loc 1 257 0
	movq	-16(%rbp), %rax	# pat, tmp118
	movq	-40(%rbp), %rdx	# mem, tmp119
	movq	%rdx, 8(%rax)	# tmp119, pat_9->fld[0].rtx
	.loc 1 258 0
	leaq	-52(%rbp), %rdx	#, tmp120
	movq	-24(%rbp), %rcx	# insn, tmp121
	movq	-16(%rbp), %rax	# pat, tmp122
	movq	%rcx, %rsi	# tmp121,
	movq	%rax, %rdi	# tmp122,
	call	recog	#
	testl	%eax, %eax	# D.25549
	js	.L9	#,
	.loc 1 259 0
	movl	-48(%rbp), %eax	# mode, mode.4
	cltq
	movb	$1, direct_store(%rax)	#, direct_store
.L9:
	.loc 1 261 0
	movq	-16(%rbp), %rax	# pat, tmp124
	movq	-8(%rbp), %rdx	# reg, tmp125
	movq	%rdx, 16(%rax)	# tmp125, pat_9->fld[1].rtx
	.loc 1 262 0
	movq	-16(%rbp), %rax	# pat, tmp126
	movq	-32(%rbp), %rdx	# mem1, tmp127
	movq	%rdx, 8(%rax)	# tmp127, pat_9->fld[0].rtx
	.loc 1 263 0
	leaq	-52(%rbp), %rdx	#, tmp128
	movq	-24(%rbp), %rcx	# insn, tmp129
	movq	-16(%rbp), %rax	# pat, tmp130
	movq	%rcx, %rsi	# tmp129,
	movq	%rax, %rdi	# tmp130,
	call	recog	#
	testl	%eax, %eax	# D.25549
	js	.L6	#,
	.loc 1 264 0
	movl	-48(%rbp), %eax	# mode, mode.5
	cltq
	movb	$1, direct_store(%rax)	#, direct_store
.L6:
	.loc 1 239 0
	addl	$1, -44(%rbp)	#, regno
.L4:
	.loc 1 237 0 discriminator 1
	cmpl	$52, -44(%rbp)	#, regno
	jg	.L3	#,
	.loc 1 238 0
	movl	-48(%rbp), %eax	# mode, mode.6
	cltq
	movzbl	direct_load(%rax), %eax	# direct_load, D.25547
	testb	%al, %al	# D.25547
	je	.L10	#,
	.loc 1 238 0 is_stmt 0 discriminator 1
	movl	-48(%rbp), %eax	# mode, mode.7
	cltq
	movzbl	direct_store(%rax), %eax	# direct_store, D.25547
	testb	%al, %al	# D.25547
	je	.L10	#,
.L3:
.LBE2:
	.loc 1 224 0 is_stmt 1
	movl	-48(%rbp), %eax	# mode, mode.8
	addl	$1, %eax	#, D.25549
	movl	%eax, -48(%rbp)	# D.25549, mode
.L2:
	.loc 1 223 0 discriminator 1
	movl	-48(%rbp), %eax	# mode, mode.9
	cmpl	$58, %eax	#, mode.9
	jle	.L11	#,
	.loc 1 268 0
	call	end_sequence	#
	.loc 1 269 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	init_expr_once, .-init_expr_once
	.globl	init_expr
	.type	init_expr, @function
init_expr:
.LFB3:
	.loc 1 275 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 3, -24
	.loc 1 276 0
	movq	cfun(%rip), %rbx	# cfun, cfun.10
	movl	$48, %edi	#,
	call	xmalloc	#
	movq	%rax, 16(%rbx)	# D.25550, cfun.10_1->expr
	.loc 1 278 0
	movq	cfun(%rip), %rax	# cfun, cfun.11
	movq	16(%rax), %rax	# cfun.11_3->expr, D.25551
	movq	$0, 40(%rax)	#, _4->x_pending_chain
	.loc 1 279 0
	movq	cfun(%rip), %rax	# cfun, cfun.12
	movq	16(%rax), %rax	# cfun.12_5->expr, D.25551
	movl	$0, (%rax)	#, _6->x_pending_stack_adjust
	.loc 1 280 0
	movq	cfun(%rip), %rax	# cfun, cfun.13
	movq	16(%rax), %rax	# cfun.13_7->expr, D.25551
	movl	$0, 8(%rax)	#, _8->x_stack_pointer_delta
	.loc 1 281 0
	movq	cfun(%rip), %rax	# cfun, cfun.14
	movq	16(%rax), %rax	# cfun.14_9->expr, D.25551
	movl	$0, 4(%rax)	#, _10->x_inhibit_defer_pop
	.loc 1 282 0
	movq	cfun(%rip), %rax	# cfun, cfun.15
	movq	16(%rax), %rax	# cfun.15_11->expr, D.25551
	movq	$0, 16(%rax)	#, _12->x_saveregs_value
	.loc 1 283 0
	movq	cfun(%rip), %rax	# cfun, cfun.16
	movq	16(%rax), %rax	# cfun.16_13->expr, D.25551
	movq	$0, 24(%rax)	#, _14->x_apply_args_value
	.loc 1 284 0
	movq	cfun(%rip), %rax	# cfun, cfun.17
	movq	16(%rax), %rax	# cfun.17_15->expr, D.25551
	movq	$0, 32(%rax)	#, _16->x_forced_labels
	.loc 1 285 0
	addq	$8, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	init_expr, .-init_expr
	.globl	mark_expr_status
	.type	mark_expr_status, @function
mark_expr_status:
.LFB4:
	.loc 1 290 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# p, p
	.loc 1 291 0
	cmpq	$0, -40(%rbp)	#, p
	jne	.L14	#,
	.loc 1 292 0
	jmp	.L13	#
.L14:
.LBB3:
	.loc 1 294 0
	movq	-40(%rbp), %rax	# p, tmp62
	movq	16(%rax), %rax	# p_1(D)->x_saveregs_value, tmp63
	movq	%rax, -24(%rbp)	# tmp63, r__
	cmpq	$0, -24(%rbp)	#, r__
	je	.L16	#,
	.loc 1 294 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# r__, tmp64
	movq	%rax, %rdi	# tmp64,
	call	ggc_set_mark	#
	testl	%eax, %eax	# D.25552
	jne	.L16	#,
	movq	-24(%rbp), %rax	# r__, tmp65
	movq	%rax, %rdi	# tmp65,
	call	ggc_mark_rtx_children	#
.L16:
.LBE3:
.LBB4:
	.loc 1 295 0 is_stmt 1
	movq	-40(%rbp), %rax	# p, tmp66
	movq	24(%rax), %rax	# p_1(D)->x_apply_args_value, tmp67
	movq	%rax, -16(%rbp)	# tmp67, r__
	cmpq	$0, -16(%rbp)	#, r__
	je	.L17	#,
	.loc 1 295 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# r__, tmp68
	movq	%rax, %rdi	# tmp68,
	call	ggc_set_mark	#
	testl	%eax, %eax	# D.25552
	jne	.L17	#,
	movq	-16(%rbp), %rax	# r__, tmp69
	movq	%rax, %rdi	# tmp69,
	call	ggc_mark_rtx_children	#
.L17:
.LBE4:
.LBB5:
	.loc 1 296 0 is_stmt 1
	movq	-40(%rbp), %rax	# p, tmp70
	movq	32(%rax), %rax	# p_1(D)->x_forced_labels, tmp71
	movq	%rax, -8(%rbp)	# tmp71, r__
	cmpq	$0, -8(%rbp)	#, r__
	je	.L13	#,
	.loc 1 296 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# r__, tmp72
	movq	%rax, %rdi	# tmp72,
	call	ggc_set_mark	#
	testl	%eax, %eax	# D.25552
	jne	.L13	#,
	movq	-8(%rbp), %rax	# r__, tmp73
	movq	%rax, %rdi	# tmp73,
	call	ggc_mark_rtx_children	#
.L13:
.LBE5:
	.loc 1 297 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	mark_expr_status, .-mark_expr_status
	.globl	free_expr_status
	.type	free_expr_status, @function
free_expr_status:
.LFB5:
	.loc 1 302 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# f, f
	.loc 1 303 0
	movq	-8(%rbp), %rax	# f, tmp60
	movq	16(%rax), %rax	# f_1(D)->expr, D.25553
	movq	%rax, %rdi	# D.25553,
	call	free	#
	.loc 1 304 0
	movq	-8(%rbp), %rax	# f, tmp61
	movq	$0, 16(%rax)	#, f_1(D)->expr
	.loc 1 305 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	free_expr_status, .-free_expr_status
	.section	.rodata
.LC0:
	.string	"expr.c"
	.text
	.globl	finish_expr_for_function
	.type	finish_expr_for_function, @function
finish_expr_for_function:
.LFB6:
	.loc 1 311 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 312 0
	movq	cfun(%rip), %rax	# cfun, cfun.18
	movq	16(%rax), %rax	# cfun.18_1->expr, D.25554
	movq	40(%rax), %rax	# _2->x_pending_chain, D.25555
	testq	%rax, %rax	# D.25555
	je	.L19	#,
	.loc 1 313 0
	movl	$__FUNCTION__.14186, %edx	#,
	movl	$313, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L19:
	.loc 1 314 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	finish_expr_for_function, .-finish_expr_for_function
	.type	enqueue_insn, @function
enqueue_insn:
.LFB7:
	.loc 1 329 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# var, var
	movq	%rsi, -32(%rbp)	# body, body
	.loc 1 330 0
	movq	cfun(%rip), %rax	# cfun, cfun.19
	movq	16(%rax), %rbx	# cfun.19_1->expr, D.25557
	movq	cfun(%rip), %rax	# cfun, cfun.20
	movq	16(%rax), %rax	# cfun.20_3->expr, D.25557
	movq	40(%rax), %rcx	# _4->x_pending_chain, D.25558
	movq	-24(%rbp), %rax	# var, tmp71
	movzbl	2(%rax), %eax	# var_6(D)->mode, D.25559
	movzbl	%al, %eax	# D.25559, D.25560
	movq	-32(%rbp), %rsi	# body, tmp72
	movq	-24(%rbp), %rdx	# var, tmp73
	movq	%rcx, (%rsp)	# D.25558,
	movq	%rsi, %r9	# tmp72,
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movl	%eax, %esi	# D.25560,
	movl	$71, %edi	#,
	call	gen_rtx_fmt_eeeee	#
	movq	%rax, 40(%rbx)	# D.25558, _2->x_pending_chain
	.loc 1 332 0
	movq	cfun(%rip), %rax	# cfun, cfun.21
	movq	16(%rax), %rax	# cfun.21_11->expr, D.25557
	movq	40(%rax), %rax	# _12->x_pending_chain, D.25561
	.loc 1 333 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	enqueue_insn, .-enqueue_insn
	.globl	protect_from_queue
	.type	protect_from_queue, @function
protect_from_queue:
.LFB8:
	.loc 1 354 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# x, x
	movl	%esi, -92(%rbp)	# modify, modify
	.loc 1 355 0
	movq	-88(%rbp), %rax	# x, tmp90
	movzwl	(%rax), %eax	# x_4(D)->code, D.25563
	movzwl	%ax, %eax	# D.25563, tmp91
	movl	%eax, -68(%rbp)	# tmp91, code
	.loc 1 363 0
	cmpl	$71, -68(%rbp)	#, code
	je	.L24	#,
	.loc 1 370 0
	cmpl	$66, -68(%rbp)	#, code
	jne	.L25	#,
	.loc 1 370 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# x, tmp92
	movzbl	2(%rax), %eax	# x_4(D)->mode, D.25564
	cmpb	$51, %al	#, D.25564
	je	.L25	#,
	.loc 1 371 0 is_stmt 1
	movq	-88(%rbp), %rax	# x, tmp93
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.25565
	movzwl	(%rax), %eax	# _8->code, D.25563
	cmpw	$71, %ax	#, D.25563
	jne	.L25	#,
	.loc 1 371 0 is_stmt 0 discriminator 1
	cmpl	$0, -92(%rbp)	#, modify
	jne	.L25	#,
.LBB6:
	.loc 1 373 0 is_stmt 1
	movq	-88(%rbp), %rax	# x, tmp94
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, tmp95
	movq	%rax, -64(%rbp)	# tmp95, y
	.loc 1 374 0
	movq	-64(%rbp), %rax	# y, tmp96
	movq	8(%rax), %rdx	# y_11->fld[0].rtx, D.25565
	movq	-88(%rbp), %rax	# x, tmp97
	movq	%rdx, %rsi	# D.25565,
	movq	%rax, %rdi	# tmp97,
	call	replace_equiv_address_nv	#
	movq	%rax, -56(%rbp)	# tmp98, new
	.loc 1 376 0
	movq	-64(%rbp), %rax	# y, tmp99
	movq	16(%rax), %rax	# y_11->fld[1].rtx, D.25565
	testq	%rax, %rax	# D.25565
	je	.L26	#,
.LBB7:
	.loc 1 378 0
	movq	-88(%rbp), %rax	# x, tmp100
	movzbl	2(%rax), %eax	# x_4(D)->mode, D.25564
	movzbl	%al, %eax	# D.25564, D.25566
	movl	%eax, %edi	# D.25566,
	call	gen_reg_rtx	#
	movq	%rax, -48(%rbp)	# tmp101, temp
	.loc 1 380 0
	movq	-64(%rbp), %rax	# y, tmp102
	movq	16(%rax), %rbx	# y_11->fld[1].rtx, D.25565
	movq	-56(%rbp), %rdx	# new, tmp103
	movq	-48(%rbp), %rax	# temp, tmp104
	movq	%rdx, %rsi	# tmp103,
	movq	%rax, %rdi	# tmp104,
	call	gen_move_insn	#
	movq	%rbx, %rsi	# D.25565,
	movq	%rax, %rdi	# D.25565,
	call	emit_insn_before	#
	.loc 1 382 0
	movq	-48(%rbp), %rax	# temp, D.25562
	jmp	.L27	#
.L26:
.LBE7:
	.loc 1 387 0
	movq	-56(%rbp), %rax	# new, tmp105
	movq	8(%rax), %rax	# new_13->fld[0].rtx, D.25565
	movq	%rax, %rdi	# D.25565,
	call	copy_to_reg	#
	movq	%rax, %rdx	#, D.25565
	movq	-56(%rbp), %rax	# new, tmp106
	movq	%rdx, %rsi	# D.25565,
	movq	%rax, %rdi	# tmp106,
	call	replace_equiv_address	#
	jmp	.L27	#
.L25:
.LBE6:
	.loc 1 392 0
	cmpl	$66, -68(%rbp)	#, code
	jne	.L28	#,
.LBB8:
	.loc 1 394 0
	movq	-88(%rbp), %rax	# x, tmp107
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.25565
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25565,
	call	protect_from_queue	#
	movq	%rax, -40(%rbp)	# tmp108, tem
	.loc 1 395 0
	movq	-88(%rbp), %rax	# x, tmp109
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.25565
	cmpq	-40(%rbp), %rax	# tem, D.25565
	je	.L29	#,
	.loc 1 397 0
	movq	-88(%rbp), %rax	# x, tmp110
	movq	%rax, %rdi	# tmp110,
	call	copy_rtx	#
	movq	%rax, -88(%rbp)	# tmp111, x
	.loc 1 398 0
	movq	-88(%rbp), %rax	# x, tmp112
	movq	-40(%rbp), %rdx	# tem, tmp113
	movq	%rdx, 8(%rax)	# tmp113, x_27->fld[0].rtx
.LBE8:
	jmp	.L30	#
.L29:
	jmp	.L30	#
.L28:
	.loc 1 401 0
	cmpl	$75, -68(%rbp)	#, code
	je	.L31	#,
	.loc 1 401 0 is_stmt 0 discriminator 1
	cmpl	$78, -68(%rbp)	#, code
	jne	.L30	#,
.L31:
.LBB9:
	.loc 1 403 0 is_stmt 1
	movq	-88(%rbp), %rax	# x, tmp114
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.25565
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25565,
	call	protect_from_queue	#
	movq	%rax, -32(%rbp)	# tmp115, new0
	.loc 1 404 0
	movq	-88(%rbp), %rax	# x, tmp116
	movq	16(%rax), %rax	# x_4(D)->fld[1].rtx, D.25565
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25565,
	call	protect_from_queue	#
	movq	%rax, -24(%rbp)	# tmp117, new1
	.loc 1 405 0
	movq	-88(%rbp), %rax	# x, tmp118
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.25565
	cmpq	-32(%rbp), %rax	# new0, D.25565
	jne	.L32	#,
	.loc 1 405 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# x, tmp119
	movq	16(%rax), %rax	# x_4(D)->fld[1].rtx, D.25565
	cmpq	-24(%rbp), %rax	# new1, D.25565
	je	.L30	#,
.L32:
	.loc 1 407 0 is_stmt 1
	movq	-88(%rbp), %rax	# x, tmp120
	movq	%rax, %rdi	# tmp120,
	call	copy_rtx	#
	movq	%rax, -88(%rbp)	# tmp121, x
	.loc 1 408 0
	movq	-88(%rbp), %rax	# x, tmp122
	movq	-32(%rbp), %rdx	# new0, tmp123
	movq	%rdx, 8(%rax)	# tmp123, x_34->fld[0].rtx
	.loc 1 409 0
	movq	-88(%rbp), %rax	# x, tmp124
	movq	-24(%rbp), %rdx	# new1, tmp125
	movq	%rdx, 16(%rax)	# tmp125, x_34->fld[1].rtx
.L30:
.LBE9:
	.loc 1 412 0
	movq	-88(%rbp), %rax	# x, D.25562
	jmp	.L27	#
.L24:
	.loc 1 417 0
	movq	-88(%rbp), %rax	# x, tmp126
	movq	16(%rax), %rax	# x_4(D)->fld[1].rtx, D.25565
	testq	%rax, %rax	# D.25565
	jne	.L33	#,
	.loc 1 418 0
	movq	-88(%rbp), %rax	# x, tmp127
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.25565
	movq	%rax, %rdi	# D.25565,
	call	copy_to_reg	#
	jmp	.L27	#
.L33:
	.loc 1 421 0
	movq	-88(%rbp), %rax	# x, tmp128
	movq	24(%rax), %rax	# x_4(D)->fld[2].rtx, D.25565
	testq	%rax, %rax	# D.25565
	je	.L34	#,
	.loc 1 422 0
	movq	-88(%rbp), %rax	# x, tmp129
	movq	24(%rax), %rax	# x_4(D)->fld[2].rtx, D.25562
	jmp	.L27	#
.L34:
	.loc 1 425 0
	movq	-88(%rbp), %rax	# x, tmp130
	movq	8(%rax), %rax	# x_4(D)->fld[0].rtx, D.25565
	movzbl	2(%rax), %eax	# _41->mode, D.25564
	movzbl	%al, %eax	# D.25564, D.25566
	movl	%eax, %edi	# D.25566,
	call	gen_reg_rtx	#
	movq	-88(%rbp), %rdx	# x, tmp131
	movq	%rax, 24(%rdx)	# D.25565, x_4(D)->fld[2].rtx
	.loc 1 426 0
	movq	-88(%rbp), %rax	# x, tmp132
	movq	16(%rax), %rbx	# x_4(D)->fld[1].rtx, D.25565
	movq	-88(%rbp), %rax	# x, tmp133
	movq	8(%rax), %rdx	# x_4(D)->fld[0].rtx, D.25565
	movq	-88(%rbp), %rax	# x, tmp134
	movq	24(%rax), %rax	# x_4(D)->fld[2].rtx, D.25565
	movq	%rdx, %rsi	# D.25565,
	movq	%rax, %rdi	# D.25565,
	call	gen_move_insn	#
	movq	%rbx, %rsi	# D.25565,
	movq	%rax, %rdi	# D.25565,
	call	emit_insn_before	#
	.loc 1 428 0
	movq	-88(%rbp), %rax	# x, tmp135
	movq	24(%rax), %rax	# x_4(D)->fld[2].rtx, D.25562
.L27:
	.loc 1 429 0
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	protect_from_queue, .-protect_from_queue
	.globl	queued_subexp_p
	.type	queued_subexp_p, @function
queued_subexp_p:
.LFB9:
	.loc 1 439 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# x, x
	.loc 1 440 0
	movq	-24(%rbp), %rax	# x, tmp68
	movzwl	(%rax), %eax	# x_3(D)->code, D.25568
	movzwl	%ax, %eax	# D.25568, tmp69
	movl	%eax, -4(%rbp)	# tmp69, code
	.loc 1 441 0
	movl	-4(%rbp), %eax	# code, tmp71
	subl	$66, %eax	#, tmp70
	cmpl	$12, %eax	#, tmp70
	ja	.L36	#,
	movl	%eax, %eax	# tmp70, tmp72
	movq	.L38(,%rax,8), %rax	#, tmp73
	jmp	*%rax	# tmp73
	.section	.rodata
	.align 8
	.align 4
.L38:
	.quad	.L37
	.quad	.L36
	.quad	.L36
	.quad	.L36
	.quad	.L36
	.quad	.L39
	.quad	.L36
	.quad	.L36
	.quad	.L36
	.quad	.L40
	.quad	.L40
	.quad	.L36
	.quad	.L40
	.text
.L39:
	.loc 1 444 0
	movl	$1, %eax	#, D.25567
	jmp	.L41	#
.L37:
	.loc 1 446 0
	movq	-24(%rbp), %rax	# x, tmp74
	movq	8(%rax), %rax	# x_3(D)->fld[0].rtx, D.25569
	movq	%rax, %rdi	# D.25569,
	call	queued_subexp_p	#
	jmp	.L41	#
.L40:
	.loc 1 450 0
	movq	-24(%rbp), %rax	# x, tmp75
	movq	8(%rax), %rax	# x_3(D)->fld[0].rtx, D.25569
	movq	%rax, %rdi	# D.25569,
	call	queued_subexp_p	#
	.loc 1 451 0
	testl	%eax, %eax	# D.25567
	jne	.L42	#,
	.loc 1 451 0 is_stmt 0 discriminator 2
	movq	-24(%rbp), %rax	# x, tmp76
	movq	16(%rax), %rax	# x_3(D)->fld[1].rtx, D.25569
	movq	%rax, %rdi	# D.25569,
	call	queued_subexp_p	#
	testl	%eax, %eax	# D.25567
	je	.L43	#,
.L42:
	.loc 1 451 0 discriminator 1
	movl	$1, %eax	#, iftmp.22
	jmp	.L44	#
.L43:
	.loc 1 451 0 discriminator 3
	movl	$0, %eax	#, iftmp.22
.L44:
	.loc 1 450 0 is_stmt 1
	jmp	.L41	#
.L36:
	.loc 1 453 0
	movl	$0, %eax	#, D.25567
.L41:
	.loc 1 455 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	queued_subexp_p, .-queued_subexp_p
	.globl	emit_queue
	.type	emit_queue, @function
emit_queue:
.LFB10:
	.loc 1 461 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 463 0
	jmp	.L46	#
.L49:
.LBB10:
	.loc 1 465 0
	movq	-16(%rbp), %rax	# p, tmp71
	movq	32(%rax), %rax	# p_3->fld[3].rtx, tmp72
	movq	%rax, -8(%rbp)	# tmp72, body
	.loc 1 467 0
	movq	-8(%rbp), %rax	# body, tmp73
	movzwl	(%rax), %eax	# body_4->code, D.25571
	cmpw	$24, %ax	#, D.25571
	jne	.L47	#,
	.loc 1 469 0
	movq	-16(%rbp), %rax	# p, tmp74
	movq	32(%rax), %rax	# p_3->fld[3].rtx, D.25572
	movq	8(%rax), %rax	# _6->fld[0].rtvec, D.25573
	movq	8(%rax), %rdx	# _7->elem, D.25572
	movq	-16(%rbp), %rax	# p, tmp75
	movq	%rdx, 16(%rax)	# D.25572, p_3->fld[1].rtx
	.loc 1 470 0
	movq	-16(%rbp), %rax	# p, tmp76
	movq	32(%rax), %rax	# p_3->fld[3].rtx, D.25572
	movq	%rax, %rdi	# D.25572,
	call	emit_insn	#
	jmp	.L48	#
.L47:
	.loc 1 473 0
	movq	-16(%rbp), %rax	# p, tmp77
	movq	32(%rax), %rax	# p_3->fld[3].rtx, D.25572
	movq	%rax, %rdi	# D.25572,
	call	emit_insn	#
	movq	-16(%rbp), %rdx	# p, tmp78
	movq	%rax, 16(%rdx)	# D.25572, p_3->fld[1].rtx
.L48:
	.loc 1 474 0
	movq	cfun(%rip), %rax	# cfun, cfun.23
	movq	16(%rax), %rax	# cfun.23_12->expr, D.25570
	movq	-16(%rbp), %rdx	# p, tmp79
	movq	40(%rdx), %rdx	# p_3->fld[4].rtx, D.25572
	movq	%rdx, 40(%rax)	# D.25572, _13->x_pending_chain
.L46:
.LBE10:
	.loc 1 463 0 discriminator 1
	movq	cfun(%rip), %rax	# cfun, cfun.24
	movq	16(%rax), %rax	# cfun.24_1->expr, D.25570
	movq	40(%rax), %rax	# _2->x_pending_chain, tmp80
	movq	%rax, -16(%rbp)	# tmp80, p
	cmpq	$0, -16(%rbp)	#, p
	jne	.L49	#,
	.loc 1 476 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	emit_queue, .-emit_queue
	.globl	convert_move
	.type	convert_move, @function
convert_move:
.LFB11:
	.loc 1 487 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$184, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -168(%rbp)	# to, to
	movq	%rsi, -176(%rbp)	# from, from
	movl	%edx, -180(%rbp)	# unsignedp, unsignedp
	.loc 1 488 0
	movq	-168(%rbp), %rax	# to, tmp274
	movzbl	2(%rax), %eax	# to_35(D)->mode, D.25574
	movzbl	%al, %eax	# D.25574, tmp275
	movl	%eax, -132(%rbp)	# tmp275, to_mode
	.loc 1 489 0
	movq	-176(%rbp), %rax	# from, tmp276
	movzbl	2(%rax), %eax	# from_38(D)->mode, D.25574
	movzbl	%al, %eax	# D.25574, tmp277
	movl	%eax, -148(%rbp)	# tmp277, from_mode
	.loc 1 490 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.25
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25575
	cmpl	$2, %eax	#, D.25575
	sete	%al	#, D.25576
	movzbl	%al, %eax	# D.25576, tmp279
	movl	%eax, -128(%rbp)	# tmp279, to_real
	.loc 1 491 0
	movl	-148(%rbp), %eax	# from_mode, from_mode.26
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25575
	cmpl	$2, %eax	#, D.25575
	sete	%al	#, D.25576
	movzbl	%al, %eax	# D.25576, tmp281
	movl	%eax, -124(%rbp)	# tmp281, from_real
	.loc 1 496 0
	cmpl	$0, -180(%rbp)	#, unsignedp
	je	.L51	#,
	.loc 1 496 0 is_stmt 0 discriminator 1
	movl	$121, %eax	#, iftmp.27
	jmp	.L52	#
.L51:
	.loc 1 496 0 discriminator 2
	movl	$120, %eax	#, iftmp.27
.L52:
	.loc 1 496 0 discriminator 3
	movl	%eax, -120(%rbp)	# iftmp.27, equiv_code
	.loc 1 498 0 is_stmt 1 discriminator 3
	movq	-168(%rbp), %rax	# to, tmp282
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp282,
	call	protect_from_queue	#
	movq	%rax, -168(%rbp)	# tmp283, to
	.loc 1 499 0 discriminator 3
	movq	-176(%rbp), %rax	# from, tmp284
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp284,
	call	protect_from_queue	#
	movq	%rax, -176(%rbp)	# tmp285, from
	.loc 1 501 0 discriminator 3
	movl	-128(%rbp), %eax	# to_real, tmp286
	cmpl	-124(%rbp), %eax	# from_real, tmp286
	je	.L53	#,
	.loc 1 502 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$502, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L53:
	.loc 1 508 0
	movq	-176(%rbp), %rax	# from, tmp287
	movzwl	(%rax), %eax	# from_54->code, D.25577
	cmpw	$63, %ax	#, D.25577
	jne	.L54	#,
	.loc 1 508 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# from, tmp288
	movzbl	3(%rax), %eax	# *from_54, D.25574
	andl	$16, %eax	#, D.25574
	testb	%al, %al	# D.25574
	je	.L54	#,
	.loc 1 509 0 is_stmt 1
	movq	-176(%rbp), %rax	# from, tmp289
	movq	8(%rax), %rax	# from_54->fld[0].rtx, D.25578
	movzbl	2(%rax), %eax	# _58->mode, D.25574
	movzbl	%al, %eax	# D.25574, D.25579
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.25574
	.loc 1 510 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.28
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25574
	.loc 1 509 0
	cmpb	%al, %dl	# D.25574, D.25574
	jb	.L54	#,
	.loc 1 511 0
	movq	-176(%rbp), %rax	# from, tmp292
	movzbl	3(%rax), %eax	# *from_54, tmp295
	shrb	$2, %al	#, D.25580
	andl	$1, %eax	#, D.25580
	movzbl	%al, %eax	# D.25580, D.25579
	cmpl	-180(%rbp), %eax	# unsignedp, D.25579
	jne	.L54	#,
	.loc 1 512 0
	movq	-176(%rbp), %rdx	# from, tmp296
	movl	-132(%rbp), %eax	# to_mode, tmp297
	movq	%rdx, %rsi	# tmp296,
	movl	%eax, %edi	# tmp297,
	call	gen_lowpart	#
	movq	%rax, -176(%rbp)	# tmp298, from
	movl	-132(%rbp), %eax	# to_mode, tmp299
	movl	%eax, -148(%rbp)	# tmp299, from_mode
.L54:
	.loc 1 514 0
	movq	-168(%rbp), %rax	# to, tmp300
	movzwl	(%rax), %eax	# to_53->code, D.25577
	cmpw	$63, %ax	#, D.25577
	jne	.L55	#,
	.loc 1 514 0 is_stmt 0 discriminator 1
	movq	-168(%rbp), %rax	# to, tmp301
	movzbl	3(%rax), %eax	# *to_53, D.25574
	andl	$16, %eax	#, D.25574
	testb	%al, %al	# D.25574
	je	.L55	#,
	.loc 1 515 0 is_stmt 1
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$515, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L55:
	.loc 1 517 0
	movl	-132(%rbp), %eax	# to_mode, tmp302
	cmpl	-148(%rbp), %eax	# from_mode, tmp302
	je	.L56	#,
	.loc 1 518 0
	cmpl	$0, -148(%rbp)	#, from_mode
	jne	.L57	#,
	.loc 1 518 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# from, tmp303
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$67, %ax	#, D.25577
	je	.L56	#,
	movq	-176(%rbp), %rax	# from, tmp304
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$68, %ax	#, D.25577
	je	.L56	#,
	movq	-176(%rbp), %rax	# from, tmp305
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$54, %ax	#, D.25577
	je	.L56	#,
	movq	-176(%rbp), %rax	# from, tmp306
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$55, %ax	#, D.25577
	je	.L56	#,
	movq	-176(%rbp), %rax	# from, tmp307
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$58, %ax	#, D.25577
	je	.L56	#,
	movq	-176(%rbp), %rax	# from, tmp308
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$134, %ax	#, D.25577
	je	.L56	#,
	movq	-176(%rbp), %rax	# from, tmp309
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$56, %ax	#, D.25577
	je	.L56	#,
	movq	-176(%rbp), %rax	# from, tmp310
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$140, %ax	#, D.25577
	jne	.L57	#,
.L56:
	.loc 1 520 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp311
	movq	-168(%rbp), %rax	# to, tmp312
	movq	%rdx, %rsi	# tmp311,
	movq	%rax, %rdi	# tmp312,
	call	emit_move_insn	#
	.loc 1 521 0
	jmp	.L50	#
.L57:
	.loc 1 524 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.29
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25575
	cmpl	$7, %eax	#, D.25575
	je	.L59	#,
	.loc 1 524 0 is_stmt 0 discriminator 1
	movl	-132(%rbp), %eax	# to_mode, to_mode.30
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25575
	cmpl	$8, %eax	#, D.25575
	je	.L59	#,
	movl	-148(%rbp), %eax	# from_mode, from_mode.31
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25575
	cmpl	$7, %eax	#, D.25575
	je	.L59	#,
	movl	-148(%rbp), %eax	# from_mode, from_mode.32
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25575
	cmpl	$8, %eax	#, D.25575
	jne	.L60	#,
.L59:
	.loc 1 526 0 is_stmt 1
	movl	-148(%rbp), %eax	# from_mode, from_mode.33
	cltq
	movzwl	mode_bitsize(%rax,%rax), %edx	# mode_bitsize, D.25577
	movl	-132(%rbp), %eax	# to_mode, to_mode.34
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	cmpw	%ax, %dx	# D.25577, D.25577
	je	.L61	#,
	.loc 1 527 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$527, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L61:
	.loc 1 529 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.35
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25575
	cmpl	$7, %eax	#, D.25575
	je	.L62	#,
	.loc 1 529 0 is_stmt 0 discriminator 1
	movl	-132(%rbp), %eax	# to_mode, to_mode.36
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25575
	cmpl	$8, %eax	#, D.25575
	jne	.L63	#,
.L62:
	.loc 1 530 0 is_stmt 1
	movq	-176(%rbp), %rax	# from, tmp321
	movzbl	2(%rax), %eax	# from_2->mode, D.25574
	movzbl	%al, %edx	# D.25574, D.25587
	movq	-176(%rbp), %rsi	# from, tmp322
	movl	-132(%rbp), %eax	# to_mode, tmp323
	movl	$0, %ecx	#,
	movl	%eax, %edi	# tmp323,
	call	simplify_gen_subreg	#
	movq	%rax, -176(%rbp)	# tmp324, from
	jmp	.L64	#
.L63:
	.loc 1 532 0
	movq	-168(%rbp), %rax	# to, tmp325
	movzbl	2(%rax), %eax	# to_53->mode, D.25574
	movzbl	%al, %edx	# D.25574, D.25587
	movq	-168(%rbp), %rsi	# to, tmp326
	movl	-148(%rbp), %eax	# from_mode, tmp327
	movl	$0, %ecx	#,
	movl	%eax, %edi	# tmp327,
	call	simplify_gen_subreg	#
	movq	%rax, -168(%rbp)	# tmp328, to
.L64:
	.loc 1 534 0
	movq	-176(%rbp), %rdx	# from, tmp329
	movq	-168(%rbp), %rax	# to, tmp330
	movq	%rdx, %rsi	# tmp329,
	movq	%rax, %rdi	# tmp330,
	call	emit_move_insn	#
	.loc 1 535 0
	jmp	.L50	#
.L60:
	.loc 1 538 0
	movl	-128(%rbp), %eax	# to_real, tmp331
	cmpl	-124(%rbp), %eax	# from_real, tmp331
	je	.L65	#,
	.loc 1 539 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$539, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L65:
	.loc 1 541 0
	cmpl	$0, -128(%rbp)	#, to_real
	je	.L66	#,
.LBB11:
	.loc 1 545 0
	movl	-148(%rbp), %eax	# from_mode, from_mode.37
	cltq
	movzwl	mode_bitsize(%rax,%rax), %edx	# mode_bitsize, D.25577
	movl	-132(%rbp), %eax	# to_mode, to_mode.38
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	cmpw	%ax, %dx	# D.25577, D.25577
	jae	.L67	#,
	.loc 1 548 0
	movl	-148(%rbp), %ecx	# from_mode, tmp334
	movl	-132(%rbp), %eax	# to_mode, tmp335
	movl	$0, %edx	#,
	movl	%ecx, %esi	# tmp334,
	movl	%eax, %edi	# tmp335,
	call	can_extend_p	#
	movl	%eax, -116(%rbp)	# tmp336, code
	cmpl	$1317, -116(%rbp)	#, code
	je	.L67	#,
	.loc 1 551 0
	movl	-116(%rbp), %eax	# code, code.39
	movq	-176(%rbp), %rdx	# from, tmp337
	movq	-168(%rbp), %rsi	# to, tmp338
	movl	$0, %ecx	#,
	movl	%eax, %edi	# code.39,
	call	emit_unop_insn	#
	.loc 1 552 0
	jmp	.L50	#
.L67:
	.loc 1 665 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.40
	andl	$1, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	jne	.L68	#,
	.loc 1 665 0 is_stmt 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.41
	andl	$262144, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L69	#,
.L68:
	.loc 1 665 0 discriminator 1
	cmpl	$16, -148(%rbp)	#, from_mode
	jne	.L69	#,
	cmpl	$15, -132(%rbp)	#, to_mode
	jne	.L69	#,
	.loc 1 667 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp339
	movq	-168(%rbp), %rax	# to, tmp340
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp340,
	movl	$909, %edi	#,
	call	emit_unop_insn	#
	.loc 1 668 0
	jmp	.L50	#
.L69:
	.loc 1 672 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.42
	andl	$33554432, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	jne	.L70	#,
	.loc 1 672 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.43
	andl	$1, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L70	#,
	cmpl	$17, -148(%rbp)	#, from_mode
	jne	.L70	#,
	cmpl	$15, -132(%rbp)	#, to_mode
	jne	.L70	#,
	.loc 1 674 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp341
	movq	-168(%rbp), %rax	# to, tmp342
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp342,
	movl	$913, %edi	#,
	call	emit_unop_insn	#
	.loc 1 675 0
	jmp	.L50	#
.L70:
	.loc 1 679 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.44
	andl	$1, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L71	#,
	.loc 1 679 0 is_stmt 0 discriminator 1
	cmpl	$18, -148(%rbp)	#, from_mode
	jne	.L71	#,
	cmpl	$15, -132(%rbp)	#, to_mode
	jne	.L71	#,
	.loc 1 681 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp343
	movq	-168(%rbp), %rax	# to, tmp344
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp344,
	movl	$916, %edi	#,
	call	emit_unop_insn	#
	.loc 1 682 0
	jmp	.L50	#
.L71:
	.loc 1 686 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.45
	andl	$33554432, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	jne	.L72	#,
	.loc 1 686 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.46
	andl	$1, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L72	#,
	cmpl	$17, -148(%rbp)	#, from_mode
	jne	.L72	#,
	cmpl	$16, -132(%rbp)	#, to_mode
	jne	.L72	#,
	.loc 1 688 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp345
	movq	-168(%rbp), %rax	# to, tmp346
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp346,
	movl	$919, %edi	#,
	call	emit_unop_insn	#
	.loc 1 689 0
	jmp	.L50	#
.L72:
	.loc 1 693 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.47
	andl	$1, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L73	#,
	.loc 1 693 0 is_stmt 0 discriminator 1
	cmpl	$18, -148(%rbp)	#, from_mode
	jne	.L73	#,
	cmpl	$16, -132(%rbp)	#, to_mode
	jne	.L73	#,
	.loc 1 695 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp347
	movq	-168(%rbp), %rax	# to, tmp348
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp348,
	movl	$922, %edi	#,
	call	emit_unop_insn	#
	.loc 1 696 0
	jmp	.L50	#
.L73:
	.loc 1 700 0
	movq	$0, -104(%rbp)	#, libcall
	.loc 1 701 0
	movl	-148(%rbp), %eax	# from_mode, from_mode
	cmpl	$16, %eax	#, from_mode
	je	.L75	#,
	cmpl	$16, %eax	#, from_mode
	ja	.L76	#,
	cmpl	$15, %eax	#, from_mode
	je	.L77	#,
	.loc 1 776 0
	jmp	.L85	#
.L76:
	.loc 1 701 0
	cmpl	$17, %eax	#, from_mode
	je	.L78	#,
	cmpl	$18, %eax	#, from_mode
	je	.L79	#,
	.loc 1 776 0
	jmp	.L85	#
.L77:
	.loc 1 704 0
	movl	-132(%rbp), %eax	# to_mode, to_mode
	cmpl	$17, %eax	#, to_mode
	je	.L81	#,
	cmpl	$18, %eax	#, to_mode
	je	.L82	#,
	cmpl	$16, %eax	#, to_mode
	je	.L83	#,
	.loc 1 719 0
	jmp	.L84	#
.L83:
	.loc 1 707 0
	movq	libfunc_table(%rip), %rax	# libfunc_table, tmp351
	movq	%rax, -104(%rbp)	# tmp351, libcall
	.loc 1 708 0
	jmp	.L84	#
.L81:
	.loc 1 711 0
	movq	libfunc_table+8(%rip), %rax	# libfunc_table, tmp352
	movq	%rax, -104(%rbp)	# tmp352, libcall
	.loc 1 712 0
	jmp	.L84	#
.L82:
	.loc 1 715 0
	movq	libfunc_table+16(%rip), %rax	# libfunc_table, tmp353
	movq	%rax, -104(%rbp)	# tmp353, libcall
	.loc 1 716 0
	nop
.L84:
	.loc 1 721 0
	jmp	.L85	#
.L75:
	.loc 1 724 0
	movl	-132(%rbp), %eax	# to_mode, to_mode
	cmpl	$17, %eax	#, to_mode
	je	.L87	#,
	cmpl	$18, %eax	#, to_mode
	je	.L88	#,
	cmpl	$15, %eax	#, to_mode
	je	.L89	#,
	.loc 1 739 0
	jmp	.L90	#
.L89:
	.loc 1 727 0
	movq	libfunc_table+40(%rip), %rax	# libfunc_table, tmp355
	movq	%rax, -104(%rbp)	# tmp355, libcall
	.loc 1 728 0
	jmp	.L90	#
.L87:
	.loc 1 731 0
	movq	libfunc_table+24(%rip), %rax	# libfunc_table, tmp356
	movq	%rax, -104(%rbp)	# tmp356, libcall
	.loc 1 732 0
	jmp	.L90	#
.L88:
	.loc 1 735 0
	movq	libfunc_table+32(%rip), %rax	# libfunc_table, tmp357
	movq	%rax, -104(%rbp)	# tmp357, libcall
	.loc 1 736 0
	nop
.L90:
	.loc 1 741 0
	jmp	.L85	#
.L78:
	.loc 1 744 0
	movl	-132(%rbp), %eax	# to_mode, to_mode
	cmpl	$15, %eax	#, to_mode
	je	.L92	#,
	cmpl	$16, %eax	#, to_mode
	je	.L93	#,
	.loc 1 755 0
	jmp	.L94	#
.L92:
	.loc 1 747 0
	movq	libfunc_table+48(%rip), %rax	# libfunc_table, tmp359
	movq	%rax, -104(%rbp)	# tmp359, libcall
	.loc 1 748 0
	jmp	.L94	#
.L93:
	.loc 1 751 0
	movq	libfunc_table+64(%rip), %rax	# libfunc_table, tmp360
	movq	%rax, -104(%rbp)	# tmp360, libcall
	.loc 1 752 0
	nop
.L94:
	.loc 1 757 0
	jmp	.L85	#
.L79:
	.loc 1 760 0
	movl	-132(%rbp), %eax	# to_mode, to_mode
	cmpl	$15, %eax	#, to_mode
	je	.L96	#,
	cmpl	$16, %eax	#, to_mode
	je	.L97	#,
	.loc 1 771 0
	jmp	.L98	#
.L96:
	.loc 1 763 0
	movq	libfunc_table+56(%rip), %rax	# libfunc_table, tmp362
	movq	%rax, -104(%rbp)	# tmp362, libcall
	.loc 1 764 0
	jmp	.L98	#
.L97:
	.loc 1 767 0
	movq	libfunc_table+72(%rip), %rax	# libfunc_table, tmp363
	movq	%rax, -104(%rbp)	# tmp363, libcall
	.loc 1 768 0
	nop
.L98:
	.loc 1 773 0
	nop
.L85:
	.loc 1 779 0
	cmpq	$0, -104(%rbp)	#, libcall
	jne	.L99	#,
	.loc 1 781 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$781, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L99:
	.loc 1 783 0
	call	start_sequence	#
	.loc 1 784 0
	movq	-176(%rbp), %rsi	# from, tmp364
	movl	-132(%rbp), %edx	# to_mode, tmp365
	movq	-104(%rbp), %rax	# libcall, tmp366
	movl	-148(%rbp), %ecx	# from_mode, tmp367
	movl	%ecx, (%rsp)	# tmp367,
	movq	%rsi, %r9	# tmp364,
	movl	$1, %r8d	#,
	movl	%edx, %ecx	# tmp365,
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp366,
	movl	$0, %eax	#,
	call	emit_library_call_value	#
	movq	%rax, -88(%rbp)	# tmp368, value
	.loc 1 786 0
	call	get_insns	#
	movq	%rax, -80(%rbp)	# tmp369, insns
	.loc 1 787 0
	call	end_sequence	#
	.loc 1 788 0
	movq	-176(%rbp), %rdx	# from, tmp370
	movl	-132(%rbp), %eax	# to_mode, tmp371
	movl	%eax, %esi	# tmp371,
	movl	$124, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rcx	#, D.25578
	movq	-88(%rbp), %rdx	# value, tmp372
	movq	-168(%rbp), %rsi	# to, tmp373
	movq	-80(%rbp), %rax	# insns, tmp374
	movq	%rax, %rdi	# tmp374,
	call	emit_libcall_block	#
	.loc 1 790 0
	jmp	.L50	#
.L66:
.LBE11:
	.loc 1 796 0
	movl	-148(%rbp), %eax	# from_mode, from_mode.48
	cltq
	movzwl	mode_bitsize(%rax,%rax), %edx	# mode_bitsize, D.25577
	movl	-132(%rbp), %eax	# to_mode, to_mode.49
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	cmpw	%ax, %dx	# D.25577, D.25577
	jae	.L100	#,
	.loc 1 797 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.50
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	movzwl	%ax, %edx	# D.25577, D.25579
	movl	target_flags(%rip), %eax	# target_flags, target_flags.52
	andl	$33554432, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L101	#,
	.loc 1 797 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.51
	jmp	.L102	#
.L101:
	.loc 1 797 0 discriminator 2
	movl	$32, %eax	#, iftmp.51
.L102:
	.loc 1 797 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.51, D.25579
	jle	.L100	#,
.LBB12:
	.loc 1 805 0 is_stmt 1
	movl	-132(%rbp), %eax	# to_mode, to_mode.53
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25574
	movzbl	%al, %edx	# D.25574, D.25579
	movl	target_flags(%rip), %eax	# target_flags, target_flags.55
	andl	$33554432, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L103	#,
	.loc 1 805 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.54
	jmp	.L104	#
.L103:
	.loc 1 805 0 discriminator 2
	movl	$4, %eax	#, iftmp.54
.L104:
	.loc 1 805 0 discriminator 3
	addl	%edx, %eax	# D.25579, D.25579
	subl	$1, %eax	#, D.25579
	movl	target_flags(%rip), %edx	# target_flags, target_flags.57
	andl	$33554432, %edx	#, D.25579
	testl	%edx, %edx	# D.25579
	je	.L105	#,
	.loc 1 805 0 discriminator 1
	movl	$8, %ebx	#, iftmp.56
	jmp	.L106	#
.L105:
	.loc 1 805 0 discriminator 2
	movl	$4, %ebx	#, iftmp.56
.L106:
	.loc 1 805 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.56
	movl	%eax, -112(%rbp)	# tmp379, nwords
	.loc 1 808 0 is_stmt 1 discriminator 3
	movl	-180(%rbp), %edx	# unsignedp, tmp381
	movl	-148(%rbp), %ecx	# from_mode, tmp382
	movl	-132(%rbp), %eax	# to_mode, tmp383
	movl	%ecx, %esi	# tmp382,
	movl	%eax, %edi	# tmp383,
	call	can_extend_p	#
	movl	%eax, -116(%rbp)	# tmp384, code
	cmpl	$1317, -116(%rbp)	#, code
	je	.L107	#,
	.loc 1 815 0
	movl	optimize(%rip), %eax	# optimize, optimize.58
	testl	%eax, %eax	# optimize.58
	jle	.L108	#,
	.loc 1 815 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# from, tmp385
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$63, %ax	#, D.25577
	jne	.L108	#,
	.loc 1 816 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp386
	movl	-148(%rbp), %eax	# from_mode, tmp387
	movq	%rdx, %rsi	# tmp386,
	movl	%eax, %edi	# tmp387,
	call	force_reg	#
	movq	%rax, -176(%rbp)	# tmp388, from
.L108:
	.loc 1 817 0
	movl	-116(%rbp), %eax	# code, code.59
	movl	-120(%rbp), %ecx	# equiv_code, tmp389
	movq	-176(%rbp), %rdx	# from, tmp390
	movq	-168(%rbp), %rsi	# to, tmp391
	movl	%eax, %edi	# code.59,
	call	emit_unop_insn	#
	.loc 1 818 0
	jmp	.L50	#
.L107:
	.loc 1 821 0
	movl	-148(%rbp), %eax	# from_mode, from_mode.60
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	movzwl	%ax, %edx	# D.25577, D.25579
	movl	target_flags(%rip), %eax	# target_flags, target_flags.62
	andl	$33554432, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L109	#,
	.loc 1 821 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.61
	jmp	.L110	#
.L109:
	.loc 1 821 0 discriminator 2
	movl	$32, %eax	#, iftmp.61
.L110:
	.loc 1 821 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.61, D.25579
	jge	.L111	#,
	.loc 1 822 0 is_stmt 1
	movl	word_mode(%rip), %ecx	# word_mode, word_mode.63
	movl	-180(%rbp), %edx	# unsignedp, tmp393
	movl	-132(%rbp), %eax	# to_mode, tmp394
	movl	%ecx, %esi	# word_mode.63,
	movl	%eax, %edi	# tmp394,
	call	can_extend_p	#
	movl	%eax, -116(%rbp)	# tmp395, code
	cmpl	$1317, -116(%rbp)	#, code
	je	.L111	#,
	.loc 1 825 0
	movq	-168(%rbp), %rax	# to, tmp396
	movzwl	(%rax), %eax	# to_53->code, D.25577
	cmpw	$61, %ax	#, D.25577
	jne	.L112	#,
	.loc 1 826 0
	movq	-168(%rbp), %rax	# to, tmp397
	movq	%rax, %rdx	# tmp397,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdi	# D.25578,
	call	emit_insn	#
.L112:
	.loc 1 827 0
	movl	word_mode(%rip), %eax	# word_mode, word_mode.64
	movq	-168(%rbp), %rdx	# to, tmp398
	movq	%rdx, %rsi	# tmp398,
	movl	%eax, %edi	# word_mode.64,
	call	gen_lowpart	#
	movl	-180(%rbp), %edx	# unsignedp, tmp399
	movq	-176(%rbp), %rcx	# from, tmp400
	movq	%rcx, %rsi	# tmp400,
	movq	%rax, %rdi	# D.25578,
	call	convert_move	#
	.loc 1 828 0
	movl	word_mode(%rip), %eax	# word_mode, word_mode.65
	movq	-168(%rbp), %rdx	# to, tmp401
	movq	%rdx, %rsi	# tmp401,
	movl	%eax, %edi	# word_mode.65,
	call	gen_lowpart	#
	movq	%rax, %rdx	#, D.25578
	movl	-116(%rbp), %eax	# code, code.66
	movl	-120(%rbp), %ecx	# equiv_code, tmp402
	movq	-168(%rbp), %rsi	# to, tmp403
	movl	%eax, %edi	# code.66,
	call	emit_unop_insn	#
	.loc 1 830 0
	jmp	.L50	#
.L111:
	.loc 1 834 0
	call	start_sequence	#
	.loc 1 839 0
	movq	-176(%rbp), %rdx	# from, tmp404
	movq	-168(%rbp), %rax	# to, tmp405
	movq	%rdx, %rsi	# tmp404,
	movq	%rax, %rdi	# tmp405,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.25579
	je	.L113	#,
	.loc 1 840 0
	movq	-176(%rbp), %rdx	# from, tmp406
	movl	-148(%rbp), %eax	# from_mode, tmp407
	movq	%rdx, %rsi	# tmp406,
	movl	%eax, %edi	# tmp407,
	call	force_reg	#
	movq	%rax, -176(%rbp)	# tmp408, from
.L113:
	.loc 1 843 0
	movl	-148(%rbp), %eax	# from_mode, from_mode.67
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	movzwl	%ax, %edx	# D.25577, D.25579
	movl	target_flags(%rip), %eax	# target_flags, target_flags.69
	andl	$33554432, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L114	#,
	.loc 1 843 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.68
	jmp	.L115	#
.L114:
	.loc 1 843 0 discriminator 2
	movl	$32, %eax	#, iftmp.68
.L115:
	.loc 1 843 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.68, D.25579
	jge	.L116	#,
	.loc 1 844 0 is_stmt 1
	movl	word_mode(%rip), %eax	# word_mode, tmp410
	movl	%eax, -140(%rbp)	# tmp410, lowpart_mode
	jmp	.L117	#
.L116:
	.loc 1 846 0
	movl	-148(%rbp), %eax	# from_mode, tmp411
	movl	%eax, -140(%rbp)	# tmp411, lowpart_mode
.L117:
	.loc 1 848 0
	movl	-180(%rbp), %edx	# unsignedp, tmp412
	movq	-176(%rbp), %rcx	# from, tmp413
	movl	-140(%rbp), %eax	# lowpart_mode, tmp414
	movq	%rcx, %rsi	# tmp413,
	movl	%eax, %edi	# tmp414,
	call	convert_to_mode	#
	movq	%rax, -72(%rbp)	# tmp415, lowfrom
	.loc 1 850 0
	movq	-168(%rbp), %rdx	# to, tmp416
	movl	-140(%rbp), %eax	# lowpart_mode, tmp417
	movq	%rdx, %rsi	# tmp416,
	movl	%eax, %edi	# tmp417,
	call	gen_lowpart	#
	movq	%rax, -64(%rbp)	# tmp418, lowpart
	.loc 1 851 0
	movq	-72(%rbp), %rdx	# lowfrom, tmp419
	movq	-64(%rbp), %rax	# lowpart, tmp420
	movq	%rdx, %rsi	# tmp419,
	movq	%rax, %rdi	# tmp420,
	call	emit_move_insn	#
	.loc 1 854 0
	cmpl	$0, -180(%rbp)	#, unsignedp
	je	.L118	#,
	.loc 1 855 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, tmp421
	movq	%rax, -96(%rbp)	# tmp421, fill_value
	jmp	.L119	#
.L118:
	.loc 1 873 0
	movl	-140(%rbp), %eax	# lowpart_mode, lowpart_mode.71
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	movzwl	%ax, %eax	# D.25577, D.25579
	subl	$1, %eax	#, D.25579
	.loc 1 872 0
	cltq
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25581,
	call	size_int_wide	#
	movq	%rax, %rcx	#, D.25582
	movq	-72(%rbp), %rdx	# lowfrom, tmp423
	movl	-140(%rbp), %eax	# lowpart_mode, tmp424
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movl	%eax, %esi	# tmp424,
	movl	$83, %edi	#,
	call	expand_shift	#
	movq	%rax, -96(%rbp)	# tmp425, fill_value
	.loc 1 875 0
	movl	word_mode(%rip), %eax	# word_mode, word_mode.72
	movq	-96(%rbp), %rcx	# fill_value, tmp426
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp426,
	movl	%eax, %edi	# word_mode.72,
	call	convert_to_mode	#
	movq	%rax, -96(%rbp)	# tmp427, fill_value
.L119:
	.loc 1 880 0
	movl	-140(%rbp), %eax	# lowpart_mode, lowpart_mode.73
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25574
	movzbl	%al, %eax	# D.25574, D.25579
	movl	target_flags(%rip), %edx	# target_flags, target_flags.75
	andl	$33554432, %edx	#, D.25579
	testl	%edx, %edx	# D.25579
	je	.L120	#,
	.loc 1 880 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.74
	jmp	.L121	#
.L120:
	.loc 1 880 0 discriminator 2
	movl	$4, %ebx	#, iftmp.74
.L121:
	.loc 1 880 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.74
	movl	%eax, -144(%rbp)	# tmp429, i
	jmp	.L122	#
.L125:
.LBB13:
	.loc 1 882 0 is_stmt 1
	movl	-144(%rbp), %eax	# i, tmp431
	movl	%eax, -108(%rbp)	# tmp431, index
	.loc 1 883 0
	movl	-108(%rbp), %esi	# index, index.76
	movl	-132(%rbp), %edx	# to_mode, tmp432
	movq	-168(%rbp), %rax	# to, tmp433
	movl	%edx, %ecx	# tmp432,
	movl	$1, %edx	#,
	movq	%rax, %rdi	# tmp433,
	call	operand_subword	#
	movq	%rax, -56(%rbp)	# tmp434, subword
	.loc 1 885 0
	cmpq	$0, -56(%rbp)	#, subword
	jne	.L123	#,
	.loc 1 886 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$886, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L123:
	.loc 1 888 0
	movq	-96(%rbp), %rax	# fill_value, tmp435
	cmpq	-56(%rbp), %rax	# subword, tmp435
	je	.L124	#,
	.loc 1 889 0
	movq	-96(%rbp), %rdx	# fill_value, tmp436
	movq	-56(%rbp), %rax	# subword, tmp437
	movq	%rdx, %rsi	# tmp436,
	movq	%rax, %rdi	# tmp437,
	call	emit_move_insn	#
.L124:
.LBE13:
	.loc 1 880 0
	addl	$1, -144(%rbp)	#, i
.L122:
	.loc 1 880 0 is_stmt 0 discriminator 1
	movl	-144(%rbp), %eax	# i, tmp438
	cmpl	-112(%rbp), %eax	# nwords, tmp438
	jl	.L125	#,
	.loc 1 892 0 is_stmt 1
	call	get_insns	#
	movq	%rax, -48(%rbp)	# tmp439, insns
	.loc 1 893 0
	call	end_sequence	#
	.loc 1 895 0
	movq	-176(%rbp), %rax	# from, tmp440
	movq	%rax, %rdi	# tmp440,
	call	copy_rtx	#
	movq	%rax, %rdx	#, D.25578
	movl	-132(%rbp), %ecx	# to_mode, tmp441
	movl	-120(%rbp), %eax	# equiv_code, tmp442
	movl	%ecx, %esi	# tmp441,
	movl	%eax, %edi	# tmp442,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rcx	#, D.25578
	movq	-176(%rbp), %rdx	# from, tmp443
	movq	-168(%rbp), %rsi	# to, tmp444
	movq	-48(%rbp), %rax	# insns, tmp445
	movq	%rcx, %r8	# D.25578,
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp445,
	call	emit_no_conflict_block	#
	.loc 1 897 0
	jmp	.L50	#
.L100:
.LBE12:
	.loc 1 901 0
	movl	-148(%rbp), %eax	# from_mode, from_mode.77
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	movzwl	%ax, %edx	# D.25577, D.25579
	movl	target_flags(%rip), %eax	# target_flags, target_flags.79
	andl	$33554432, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L126	#,
	.loc 1 901 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.78
	jmp	.L127	#
.L126:
	.loc 1 901 0 discriminator 2
	movl	$32, %eax	#, iftmp.78
.L127:
	.loc 1 901 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.78, D.25579
	jle	.L128	#,
	.loc 1 902 0 is_stmt 1
	movl	-132(%rbp), %eax	# to_mode, to_mode.80
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	movzwl	%ax, %edx	# D.25577, D.25579
	movl	target_flags(%rip), %eax	# target_flags, target_flags.82
	andl	$33554432, %eax	#, D.25579
	testl	%eax, %eax	# D.25579
	je	.L129	#,
	.loc 1 902 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.81
	jmp	.L130	#
.L129:
	.loc 1 902 0 discriminator 2
	movl	$32, %eax	#, iftmp.81
.L130:
	.loc 1 902 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.81, D.25579
	jg	.L128	#,
	.loc 1 904 0 is_stmt 1
	movq	-176(%rbp), %rax	# from, tmp448
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$66, %ax	#, D.25577
	jne	.L131	#,
	.loc 1 905 0
	movq	-176(%rbp), %rax	# from, tmp449
	movzbl	3(%rax), %eax	# *from_2, D.25574
	andl	$8, %eax	#, D.25574
	testb	%al, %al	# D.25574
	jne	.L131	#,
	.loc 1 906 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.83
	cltq
	movzbl	direct_load(%rax), %eax	# direct_load, D.25583
	testb	%al, %al	# D.25583
	je	.L131	#,
	.loc 1 907 0
	movq	-176(%rbp), %rax	# from, tmp451
	movq	8(%rax), %rax	# from_2->fld[0].rtx, D.25578
	movq	%rax, %rdi	# D.25578,
	call	mode_dependent_address_p	#
	testl	%eax, %eax	# D.25579
	je	.L132	#,
.L131:
	.loc 1 908 0
	movq	-176(%rbp), %rax	# from, tmp452
	movzwl	(%rax), %eax	# from_2->code, D.25577
	cmpw	$61, %ax	#, D.25577
	je	.L132	#,
	.loc 1 909 0
	movq	-176(%rbp), %rax	# from, tmp453
	movzwl	(%rax), %eax	# from_2->code, D.25577
	.loc 1 904 0
	cmpw	$63, %ax	#, D.25577
	je	.L132	#,
	.loc 1 910 0
	movq	-176(%rbp), %rdx	# from, tmp454
	movl	-148(%rbp), %eax	# from_mode, tmp455
	movq	%rdx, %rsi	# tmp454,
	movl	%eax, %edi	# tmp455,
	call	force_reg	#
	movq	%rax, -176(%rbp)	# tmp456, from
.L132:
	.loc 1 911 0
	movl	word_mode(%rip), %eax	# word_mode, word_mode.84
	movq	-176(%rbp), %rdx	# from, tmp457
	movq	%rdx, %rsi	# tmp457,
	movl	%eax, %edi	# word_mode.84,
	call	gen_lowpart	#
	movq	%rax, %rcx	#, D.25578
	movq	-168(%rbp), %rax	# to, tmp458
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp458,
	call	convert_move	#
	.loc 1 912 0
	jmp	.L50	#
.L128:
	.loc 1 916 0
	cmpl	$8, -132(%rbp)	#, to_mode
	jne	.L133	#,
	.loc 1 918 0
	cmpl	$2, -148(%rbp)	#, from_mode
	je	.L134	#,
	.loc 1 919 0
	movl	-180(%rbp), %edx	# unsignedp, tmp459
	movq	-176(%rbp), %rax	# from, tmp460
	movq	%rax, %rsi	# tmp460,
	movl	$2, %edi	#,
	call	convert_to_mode	#
	movq	%rax, -176(%rbp)	# tmp461, from
.L134:
	.loc 1 928 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$928, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L133:
	.loc 1 931 0
	cmpl	$8, -148(%rbp)	#, from_mode
	jne	.L135	#,
	.loc 1 933 0
	cmpl	$2, -132(%rbp)	#, to_mode
	je	.L136	#,
	.loc 1 935 0
	movl	-180(%rbp), %edx	# unsignedp, tmp462
	movq	-176(%rbp), %rax	# from, tmp463
	movq	%rax, %rsi	# tmp463,
	movl	$2, %edi	#,
	call	convert_to_mode	#
	movq	%rax, -176(%rbp)	# tmp464, from
	.loc 1 936 0
	movl	$2, -148(%rbp)	#, from_mode
	jmp	.L135	#
.L136:
	.loc 1 947 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$947, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L135:
	.loc 1 951 0
	cmpl	$10, -132(%rbp)	#, to_mode
	jne	.L137	#,
	.loc 1 953 0
	cmpl	$4, -148(%rbp)	#, from_mode
	je	.L138	#,
	.loc 1 954 0
	movl	-180(%rbp), %edx	# unsignedp, tmp465
	movq	-176(%rbp), %rax	# from, tmp466
	movq	%rax, %rsi	# tmp466,
	movl	$4, %edi	#,
	call	convert_to_mode	#
	movq	%rax, -176(%rbp)	# tmp467, from
.L138:
	.loc 1 963 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$963, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L137:
	.loc 1 966 0
	cmpl	$10, -148(%rbp)	#, from_mode
	jne	.L139	#,
	.loc 1 968 0
	cmpl	$4, -132(%rbp)	#, to_mode
	je	.L140	#,
	.loc 1 970 0
	movl	-180(%rbp), %edx	# unsignedp, tmp468
	movq	-176(%rbp), %rax	# from, tmp469
	movq	%rax, %rsi	# tmp469,
	movl	$4, %edi	#,
	call	convert_to_mode	#
	movq	%rax, -176(%rbp)	# tmp470, from
	.loc 1 971 0
	movl	$4, -148(%rbp)	#, from_mode
	jmp	.L139	#
.L140:
	.loc 1 989 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$989, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L139:
	.loc 1 993 0
	cmpl	$11, -132(%rbp)	#, to_mode
	jne	.L141	#,
	.loc 1 995 0
	cmpl	$5, -148(%rbp)	#, from_mode
	je	.L142	#,
	.loc 1 996 0
	movl	-180(%rbp), %edx	# unsignedp, tmp471
	movq	-176(%rbp), %rax	# from, tmp472
	movq	%rax, %rsi	# tmp472,
	movl	$5, %edi	#,
	call	convert_to_mode	#
	movq	%rax, -176(%rbp)	# tmp473, from
.L142:
	.loc 1 1005 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$1005, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L141:
	.loc 1 1008 0
	cmpl	$11, -148(%rbp)	#, from_mode
	jne	.L143	#,
	.loc 1 1010 0
	cmpl	$5, -132(%rbp)	#, to_mode
	je	.L144	#,
	.loc 1 1012 0
	movl	-180(%rbp), %edx	# unsignedp, tmp474
	movq	-176(%rbp), %rax	# from, tmp475
	movq	%rax, %rsi	# tmp475,
	movl	$5, %edi	#,
	call	convert_to_mode	#
	movq	%rax, -176(%rbp)	# tmp476, from
	.loc 1 1013 0
	movl	$5, -148(%rbp)	#, from_mode
	jmp	.L143	#
.L144:
	.loc 1 1024 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$1024, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L143:
	.loc 1 1032 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.85
	cltq
	movzwl	mode_bitsize(%rax,%rax), %edx	# mode_bitsize, D.25577
	movl	-148(%rbp), %eax	# from_mode, from_mode.86
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	cmpw	%ax, %dx	# D.25577, D.25577
	jae	.L145	#,
	.loc 1 1036 0
	movq	-176(%rbp), %rax	# from, tmp479
	movzwl	(%rax), %eax	# from_9->code, D.25577
	cmpw	$66, %ax	#, D.25577
	jne	.L146	#,
	.loc 1 1037 0
	movq	-176(%rbp), %rax	# from, tmp480
	movzbl	3(%rax), %eax	# *from_9, D.25574
	andl	$8, %eax	#, D.25574
	testb	%al, %al	# D.25574
	jne	.L146	#,
	.loc 1 1038 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.87
	cltq
	movzbl	direct_load(%rax), %eax	# direct_load, D.25583
	testb	%al, %al	# D.25583
	je	.L146	#,
	.loc 1 1039 0
	movq	-176(%rbp), %rax	# from, tmp482
	movq	8(%rax), %rax	# from_9->fld[0].rtx, D.25578
	movq	%rax, %rdi	# D.25578,
	call	mode_dependent_address_p	#
	testl	%eax, %eax	# D.25579
	je	.L147	#,
.L146:
	.loc 1 1040 0
	movq	-176(%rbp), %rax	# from, tmp483
	movzwl	(%rax), %eax	# from_9->code, D.25577
	cmpw	$61, %ax	#, D.25577
	je	.L147	#,
	.loc 1 1041 0
	movq	-176(%rbp), %rax	# from, tmp484
	movzwl	(%rax), %eax	# from_9->code, D.25577
	.loc 1 1036 0
	cmpw	$63, %ax	#, D.25577
	je	.L147	#,
	.loc 1 1042 0
	movq	-176(%rbp), %rdx	# from, tmp485
	movl	-148(%rbp), %eax	# from_mode, tmp486
	movq	%rdx, %rsi	# tmp485,
	movl	%eax, %edi	# tmp486,
	call	force_reg	#
	movq	%rax, -176(%rbp)	# tmp487, from
.L147:
	.loc 1 1043 0
	movq	-176(%rbp), %rax	# from, tmp488
	movzwl	(%rax), %eax	# from_10->code, D.25577
	cmpw	$61, %ax	#, D.25577
	jne	.L148	#,
	.loc 1 1043 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# from, tmp489
	movl	8(%rax), %eax	# from_10->fld[0].rtuint, D.25584
	cmpl	$52, %eax	#, D.25584
	ja	.L148	#,
	.loc 1 1044 0 is_stmt 1
	movq	-176(%rbp), %rax	# from, tmp490
	movl	8(%rax), %eax	# from_10->fld[0].rtuint, D.25584
	movl	-132(%rbp), %edx	# to_mode, tmp491
	movl	%edx, %esi	# tmp491,
	movl	%eax, %edi	# D.25579,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.25579
	jne	.L148	#,
	.loc 1 1045 0
	movq	-176(%rbp), %rax	# from, tmp492
	movq	%rax, %rdi	# tmp492,
	call	copy_to_reg	#
	movq	%rax, -176(%rbp)	# tmp493, from
.L148:
	.loc 1 1046 0
	movq	-176(%rbp), %rdx	# from, tmp494
	movl	-132(%rbp), %eax	# to_mode, tmp495
	movq	%rdx, %rsi	# tmp494,
	movl	%eax, %edi	# tmp495,
	call	gen_lowpart	#
	movq	%rax, %rdx	#, D.25578
	movq	-168(%rbp), %rax	# to, tmp496
	movq	%rdx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp496,
	call	emit_move_insn	#
	.loc 1 1047 0
	jmp	.L50	#
.L145:
	.loc 1 1051 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.88
	cltq
	movzwl	mode_bitsize(%rax,%rax), %edx	# mode_bitsize, D.25577
	movl	-148(%rbp), %eax	# from_mode, from_mode.89
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	cmpw	%ax, %dx	# D.25577, D.25577
	jbe	.L149	#,
	.loc 1 1054 0
	movl	-180(%rbp), %edx	# unsignedp, tmp499
	movl	-148(%rbp), %ecx	# from_mode, tmp500
	movl	-132(%rbp), %eax	# to_mode, tmp501
	movl	%ecx, %esi	# tmp500,
	movl	%eax, %edi	# tmp501,
	call	can_extend_p	#
	movl	%eax, -116(%rbp)	# tmp502, code
	cmpl	$1317, -116(%rbp)	#, code
	je	.L150	#,
	.loc 1 1057 0
	movl	flag_force_mem(%rip), %eax	# flag_force_mem, flag_force_mem.90
	testl	%eax, %eax	# flag_force_mem.90
	je	.L151	#,
	.loc 1 1058 0
	movq	-176(%rbp), %rax	# from, tmp503
	movq	%rax, %rdi	# tmp503,
	call	force_not_mem	#
	movq	%rax, -176(%rbp)	# tmp504, from
.L151:
	.loc 1 1060 0
	movl	-116(%rbp), %eax	# code, code.91
	movl	-120(%rbp), %ecx	# equiv_code, tmp505
	movq	-176(%rbp), %rdx	# from, tmp506
	movq	-168(%rbp), %rsi	# to, tmp507
	movl	%eax, %edi	# code.91,
	call	emit_unop_insn	#
	.loc 1 1061 0
	jmp	.L50	#
.L150:
.LBB14:
	.loc 1 1070 0
	movl	-148(%rbp), %eax	# from_mode, tmp508
	movl	%eax, -136(%rbp)	# tmp508, intermediate
	jmp	.L152	#
.L155:
	.loc 1 1072 0
	movl	-180(%rbp), %edx	# unsignedp, tmp509
	movl	-136(%rbp), %ecx	# intermediate, tmp510
	movl	-132(%rbp), %eax	# to_mode, tmp511
	movl	%ecx, %esi	# tmp510,
	movl	%eax, %edi	# tmp511,
	call	can_extend_p	#
	cmpl	$1317, %eax	#, D.25585
	jne	.L153	#,
	.loc 1 1074 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.92
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.25574
	movl	-136(%rbp), %eax	# intermediate, intermediate.93
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25574
	cmpb	%al, %dl	# D.25574, D.25574
	jae	.L154	#,
.L153:
	.loc 1 1077 0
	movl	-180(%rbp), %edx	# unsignedp, tmp514
	movl	-148(%rbp), %ecx	# from_mode, tmp515
	movl	-136(%rbp), %eax	# intermediate, tmp516
	movl	%ecx, %esi	# tmp515,
	movl	%eax, %edi	# tmp516,
	call	can_extend_p	#
	cmpl	$1317, %eax	#, D.25585
	je	.L154	#,
	.loc 1 1080 0
	movl	-180(%rbp), %edx	# unsignedp, tmp517
	movq	-176(%rbp), %rcx	# from, tmp518
	movl	-136(%rbp), %eax	# intermediate, tmp519
	movq	%rcx, %rsi	# tmp518,
	movl	%eax, %edi	# tmp519,
	call	convert_to_mode	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp520
	movq	-168(%rbp), %rax	# to, tmp521
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp521,
	call	convert_move	#
	.loc 1 1082 0
	jmp	.L50	#
.L154:
	.loc 1 1071 0
	movl	-136(%rbp), %eax	# intermediate, intermediate.94
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25574
	movzbl	%al, %eax	# D.25574, tmp523
	movl	%eax, -136(%rbp)	# tmp523, intermediate
.L152:
	.loc 1 1070 0 discriminator 1
	cmpl	$0, -136(%rbp)	#, intermediate
	jne	.L155	#,
	.loc 1 1087 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.95
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	movzwl	%ax, %edx	# D.25577, D.25579
	movl	-148(%rbp), %eax	# from_mode, from_mode.96
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	movzwl	%ax, %eax	# D.25577, D.25579
	subl	%eax, %edx	# D.25579, D.25579
	movl	%edx, %eax	# D.25579, D.25579
	cltq
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25586,
	call	build_int_2_wide	#
	movq	%rax, -40(%rbp)	# tmp526, shift_amount
	.loc 1 1089 0
	movq	-176(%rbp), %rdx	# from, tmp527
	movl	-148(%rbp), %eax	# from_mode, tmp528
	movq	%rdx, %rsi	# tmp527,
	movl	%eax, %edi	# tmp528,
	call	force_reg	#
	movq	%rax, %rdx	#, D.25578
	movl	-132(%rbp), %eax	# to_mode, tmp529
	movq	%rdx, %rsi	# D.25578,
	movl	%eax, %edi	# tmp529,
	call	gen_lowpart	#
	movq	%rax, -176(%rbp)	# tmp530, from
	.loc 1 1090 0
	movl	-180(%rbp), %edi	# unsignedp, tmp531
	movq	-168(%rbp), %rsi	# to, tmp532
	movq	-40(%rbp), %rcx	# shift_amount, tmp533
	movq	-176(%rbp), %rdx	# from, tmp534
	movl	-132(%rbp), %eax	# to_mode, tmp535
	movl	%edi, %r9d	# tmp531,
	movq	%rsi, %r8	# tmp532,
	movl	%eax, %esi	# tmp535,
	movl	$82, %edi	#,
	call	expand_shift	#
	movq	%rax, -32(%rbp)	# tmp536, tmp
	.loc 1 1092 0
	movl	-180(%rbp), %edi	# unsignedp, tmp537
	movq	-168(%rbp), %rsi	# to, tmp538
	movq	-40(%rbp), %rcx	# shift_amount, tmp539
	movq	-32(%rbp), %rdx	# tmp, tmp540
	movl	-132(%rbp), %eax	# to_mode, tmp541
	movl	%edi, %r9d	# tmp537,
	movq	%rsi, %r8	# tmp538,
	movl	%eax, %esi	# tmp541,
	movl	$83, %edi	#,
	call	expand_shift	#
	movq	%rax, -32(%rbp)	# tmp542, tmp
	.loc 1 1094 0
	movq	-32(%rbp), %rax	# tmp, tmp543
	cmpq	-168(%rbp), %rax	# to, tmp543
	je	.L156	#,
	.loc 1 1095 0
	movq	-32(%rbp), %rdx	# tmp, tmp544
	movq	-168(%rbp), %rax	# to, tmp545
	movq	%rdx, %rsi	# tmp544,
	movq	%rax, %rdi	# tmp545,
	call	emit_move_insn	#
	.loc 1 1096 0
	jmp	.L50	#
.L156:
	jmp	.L50	#
.L149:
.LBE14:
	.loc 1 1102 0
	cmpl	$5, -148(%rbp)	#, from_mode
	jne	.L157	#,
	.loc 1 1102 0 is_stmt 0 discriminator 1
	cmpl	$4, -132(%rbp)	#, to_mode
	jne	.L157	#,
	.loc 1 1111 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp546
	movl	-148(%rbp), %eax	# from_mode, tmp547
	movq	%rdx, %rsi	# tmp546,
	movl	%eax, %edi	# tmp547,
	call	force_reg	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp548
	movq	-168(%rbp), %rax	# to, tmp549
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp549,
	call	convert_move	#
	.loc 1 1112 0
	jmp	.L50	#
.L157:
	.loc 1 1115 0
	cmpl	$5, -148(%rbp)	#, from_mode
	jne	.L158	#,
	.loc 1 1115 0 is_stmt 0 discriminator 1
	cmpl	$3, -132(%rbp)	#, to_mode
	jne	.L158	#,
	.loc 1 1124 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp550
	movl	-148(%rbp), %eax	# from_mode, tmp551
	movq	%rdx, %rsi	# tmp550,
	movl	%eax, %edi	# tmp551,
	call	force_reg	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp552
	movq	-168(%rbp), %rax	# to, tmp553
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp553,
	call	convert_move	#
	.loc 1 1125 0
	jmp	.L50	#
.L158:
	.loc 1 1128 0
	cmpl	$5, -148(%rbp)	#, from_mode
	jne	.L159	#,
	.loc 1 1128 0 is_stmt 0 discriminator 1
	cmpl	$2, -132(%rbp)	#, to_mode
	jne	.L159	#,
	.loc 1 1137 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp554
	movl	-148(%rbp), %eax	# from_mode, tmp555
	movq	%rdx, %rsi	# tmp554,
	movl	%eax, %edi	# tmp555,
	call	force_reg	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp556
	movq	-168(%rbp), %rax	# to, tmp557
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp557,
	call	convert_move	#
	.loc 1 1138 0
	jmp	.L50	#
.L159:
	.loc 1 1141 0
	cmpl	$4, -148(%rbp)	#, from_mode
	jne	.L160	#,
	.loc 1 1141 0 is_stmt 0 discriminator 1
	cmpl	$3, -132(%rbp)	#, to_mode
	jne	.L160	#,
	.loc 1 1150 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp558
	movl	-148(%rbp), %eax	# from_mode, tmp559
	movq	%rdx, %rsi	# tmp558,
	movl	%eax, %edi	# tmp559,
	call	force_reg	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp560
	movq	-168(%rbp), %rax	# to, tmp561
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp561,
	call	convert_move	#
	.loc 1 1151 0
	jmp	.L50	#
.L160:
	.loc 1 1154 0
	cmpl	$4, -148(%rbp)	#, from_mode
	jne	.L161	#,
	.loc 1 1154 0 is_stmt 0 discriminator 1
	cmpl	$2, -132(%rbp)	#, to_mode
	jne	.L161	#,
	.loc 1 1163 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp562
	movl	-148(%rbp), %eax	# from_mode, tmp563
	movq	%rdx, %rsi	# tmp562,
	movl	%eax, %edi	# tmp563,
	call	force_reg	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp564
	movq	-168(%rbp), %rax	# to, tmp565
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp565,
	call	convert_move	#
	.loc 1 1164 0
	jmp	.L50	#
.L161:
	.loc 1 1167 0
	cmpl	$3, -148(%rbp)	#, from_mode
	jne	.L162	#,
	.loc 1 1167 0 is_stmt 0 discriminator 1
	cmpl	$2, -132(%rbp)	#, to_mode
	jne	.L162	#,
	.loc 1 1176 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp566
	movl	-148(%rbp), %eax	# from_mode, tmp567
	movq	%rdx, %rsi	# tmp566,
	movl	%eax, %edi	# tmp567,
	call	force_reg	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp568
	movq	-168(%rbp), %rax	# to, tmp569
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp569,
	call	convert_move	#
	.loc 1 1177 0
	jmp	.L50	#
.L162:
	.loc 1 1180 0
	cmpl	$6, -148(%rbp)	#, from_mode
	jne	.L163	#,
	.loc 1 1180 0 is_stmt 0 discriminator 1
	cmpl	$5, -132(%rbp)	#, to_mode
	jne	.L163	#,
	.loc 1 1189 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp570
	movl	-148(%rbp), %eax	# from_mode, tmp571
	movq	%rdx, %rsi	# tmp570,
	movl	%eax, %edi	# tmp571,
	call	force_reg	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp572
	movq	-168(%rbp), %rax	# to, tmp573
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp573,
	call	convert_move	#
	.loc 1 1190 0
	jmp	.L50	#
.L163:
	.loc 1 1193 0
	cmpl	$6, -148(%rbp)	#, from_mode
	jne	.L164	#,
	.loc 1 1193 0 is_stmt 0 discriminator 1
	cmpl	$4, -132(%rbp)	#, to_mode
	jne	.L164	#,
	.loc 1 1202 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp574
	movl	-148(%rbp), %eax	# from_mode, tmp575
	movq	%rdx, %rsi	# tmp574,
	movl	%eax, %edi	# tmp575,
	call	force_reg	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp576
	movq	-168(%rbp), %rax	# to, tmp577
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp577,
	call	convert_move	#
	.loc 1 1203 0
	jmp	.L50	#
.L164:
	.loc 1 1206 0
	cmpl	$6, -148(%rbp)	#, from_mode
	jne	.L165	#,
	.loc 1 1206 0 is_stmt 0 discriminator 1
	cmpl	$3, -132(%rbp)	#, to_mode
	jne	.L165	#,
	.loc 1 1215 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp578
	movl	-148(%rbp), %eax	# from_mode, tmp579
	movq	%rdx, %rsi	# tmp578,
	movl	%eax, %edi	# tmp579,
	call	force_reg	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp580
	movq	-168(%rbp), %rax	# to, tmp581
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp581,
	call	convert_move	#
	.loc 1 1216 0
	jmp	.L50	#
.L165:
	.loc 1 1219 0
	cmpl	$6, -148(%rbp)	#, from_mode
	jne	.L166	#,
	.loc 1 1219 0 is_stmt 0 discriminator 1
	cmpl	$2, -132(%rbp)	#, to_mode
	jne	.L166	#,
	.loc 1 1228 0 is_stmt 1
	movq	-176(%rbp), %rdx	# from, tmp582
	movl	-148(%rbp), %eax	# from_mode, tmp583
	movq	%rdx, %rsi	# tmp582,
	movl	%eax, %edi	# tmp583,
	call	force_reg	#
	movq	%rax, %rcx	#, D.25578
	movl	-180(%rbp), %edx	# unsignedp, tmp584
	movq	-168(%rbp), %rax	# to, tmp585
	movq	%rcx, %rsi	# D.25578,
	movq	%rax, %rdi	# tmp585,
	call	convert_move	#
	.loc 1 1229 0
	jmp	.L50	#
.L166:
	.loc 1 1235 0
	movl	-132(%rbp), %eax	# to_mode, to_mode.97
	cltq
	movzwl	mode_bitsize(%rax,%rax), %edx	# mode_bitsize, D.25577
	movl	-148(%rbp), %eax	# from_mode, from_mode.98
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25577
	cmpw	%ax, %dx	# D.25577, D.25577
	jae	.L167	#,
.LBB15:
	.loc 1 1237 0
	movq	-176(%rbp), %rdx	# from, tmp588
	movl	-132(%rbp), %eax	# to_mode, tmp589
	movq	%rdx, %rsi	# tmp588,
	movl	%eax, %edi	# tmp589,
	call	gen_lowpart	#
	movq	%rax, %rdx	#, D.25578
	movl	-132(%rbp), %eax	# to_mode, tmp590
	movq	%rdx, %rsi	# D.25578,
	movl	%eax, %edi	# tmp590,
	call	force_reg	#
	movq	%rax, -24(%rbp)	# tmp591, temp
	.loc 1 1238 0
	movq	-24(%rbp), %rdx	# temp, tmp592
	movq	-168(%rbp), %rax	# to, tmp593
	movq	%rdx, %rsi	# tmp592,
	movq	%rax, %rdi	# tmp593,
	call	emit_move_insn	#
	.loc 1 1239 0
	jmp	.L50	#
.L167:
.LBE15:
	.loc 1 1243 0
	movl	$__FUNCTION__.14231, %edx	#,
	movl	$1243, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L50:
	.loc 1 1244 0
	addq	$184, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	convert_move, .-convert_move
	.globl	convert_to_mode
	.type	convert_to_mode, @function
convert_to_mode:
.LFB12:
	.loc 1 1261 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# mode, mode
	movq	%rsi, -16(%rbp)	# x, x
	movl	%edx, -8(%rbp)	# unsignedp, unsignedp
	.loc 1 1262 0
	movl	-8(%rbp), %ecx	# unsignedp, tmp61
	movq	-16(%rbp), %rdx	# x, tmp62
	movl	-4(%rbp), %eax	# mode, tmp63
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp63,
	call	convert_modes	#
	.loc 1 1263 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE12:
	.size	convert_to_mode, .-convert_to_mode
	.globl	convert_modes
	.type	convert_modes, @function
convert_modes:
.LFB13:
	.loc 1 1283 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movl	%edi, -36(%rbp)	# mode, mode
	movl	%esi, -40(%rbp)	# oldmode, oldmode
	movq	%rdx, -48(%rbp)	# x, x
	movl	%ecx, -52(%rbp)	# unsignedp, unsignedp
	.loc 1 1289 0
	movq	-48(%rbp), %rax	# x, tmp118
	movzwl	(%rax), %eax	# x_6(D)->code, D.25591
	cmpw	$63, %ax	#, D.25591
	jne	.L171	#,
	.loc 1 1289 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# x, tmp119
	movzbl	3(%rax), %eax	# *x_6(D), D.25592
	andl	$16, %eax	#, D.25592
	testb	%al, %al	# D.25592
	je	.L171	#,
	.loc 1 1290 0 is_stmt 1
	movq	-48(%rbp), %rax	# x, tmp120
	movq	8(%rax), %rax	# x_6(D)->fld[0].rtx, D.25593
	movzbl	2(%rax), %eax	# _10->mode, D.25592
	movzbl	%al, %eax	# D.25592, D.25594
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.25592
	movl	-36(%rbp), %eax	# mode, mode.99
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25592
	cmpb	%al, %dl	# D.25592, D.25592
	jb	.L171	#,
	.loc 1 1291 0
	movq	-48(%rbp), %rax	# x, tmp123
	movzbl	3(%rax), %eax	# *x_6(D), tmp126
	shrb	$2, %al	#, D.25595
	andl	$1, %eax	#, D.25595
	movzbl	%al, %eax	# D.25595, D.25594
	cmpl	-52(%rbp), %eax	# unsignedp, D.25594
	jne	.L171	#,
	.loc 1 1292 0
	movq	-48(%rbp), %rdx	# x, tmp127
	movl	-36(%rbp), %eax	# mode, tmp128
	movq	%rdx, %rsi	# tmp127,
	movl	%eax, %edi	# tmp128,
	call	gen_lowpart	#
	movq	%rax, -48(%rbp)	# tmp129, x
.L171:
	.loc 1 1294 0
	movq	-48(%rbp), %rax	# x, tmp130
	movzbl	2(%rax), %eax	# x_2->mode, D.25592
	testb	%al, %al	# D.25592
	je	.L172	#,
	.loc 1 1295 0
	movq	-48(%rbp), %rax	# x, tmp131
	movzbl	2(%rax), %eax	# x_2->mode, D.25592
	movzbl	%al, %eax	# D.25592, tmp132
	movl	%eax, -40(%rbp)	# tmp132, oldmode
.L172:
	.loc 1 1297 0
	movl	-36(%rbp), %eax	# mode, tmp133
	cmpl	-40(%rbp), %eax	# oldmode, tmp133
	jne	.L173	#,
	.loc 1 1298 0
	movq	-48(%rbp), %rax	# x, D.25590
	jmp	.L174	#
.L173:
	.loc 1 1306 0
	cmpl	$0, -52(%rbp)	#, unsignedp
	je	.L175	#,
	.loc 1 1306 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %eax	# mode, mode.100
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25596
	cmpl	$1, %eax	#, D.25596
	jne	.L175	#,
	.loc 1 1307 0 is_stmt 1
	movl	-36(%rbp), %eax	# mode, mode.101
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25591
	cmpw	$128, %ax	#, D.25591
	jne	.L175	#,
	.loc 1 1308 0
	movq	-48(%rbp), %rax	# x, tmp136
	movzwl	(%rax), %eax	# x_2->code, D.25591
	cmpw	$54, %ax	#, D.25591
	jne	.L175	#,
	.loc 1 1308 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# x, tmp137
	movq	8(%rax), %rax	# x_2->fld[0].rtwint, D.25597
	testq	%rax, %rax	# D.25597
	jns	.L175	#,
.LBB16:
	.loc 1 1310 0 is_stmt 1
	movq	-48(%rbp), %rax	# x, tmp138
	movq	8(%rax), %rax	# x_2->fld[0].rtwint, tmp139
	movq	%rax, -24(%rbp)	# tmp139, val
	.loc 1 1312 0
	cmpl	$0, -40(%rbp)	#, oldmode
	je	.L176	#,
	.loc 1 1313 0
	movl	-40(%rbp), %eax	# oldmode, oldmode.102
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25591
	cmpw	$63, %ax	#, D.25591
	ja	.L176	#,
.LBB17:
	.loc 1 1315 0
	movl	-40(%rbp), %eax	# oldmode, oldmode.103
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25591
	movzwl	%ax, %eax	# D.25591, tmp142
	movl	%eax, -32(%rbp)	# tmp142, width
	.loc 1 1318 0
	movl	-32(%rbp), %eax	# width, tmp143
	movl	$1, %edx	#, tmp144
	movl	%eax, %ecx	# tmp143, tmp182
	salq	%cl, %rdx	# tmp182, D.25597
	movq	%rdx, %rax	# D.25597, D.25597
	subq	$1, %rax	#, D.25597
	andq	%rax, -24(%rbp)	# D.25597, val
.L176:
.LBE17:
	.loc 1 1321 0
	movl	-36(%rbp), %edx	# mode, tmp145
	movq	-24(%rbp), %rax	# val, tmp146
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp146,
	call	immed_double_const	#
	jmp	.L174	#
.L175:
.LBE16:
	.loc 1 1329 0
	movq	-48(%rbp), %rax	# x, tmp147
	movzwl	(%rax), %eax	# x_2->code, D.25591
	cmpw	$54, %ax	#, D.25591
	jne	.L177	#,
	.loc 1 1330 0
	movl	-36(%rbp), %eax	# mode, mode.104
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25591
	cmpw	$64, %ax	#, D.25591
	jbe	.L178	#,
.L177:
	.loc 1 1331 0
	movl	-36(%rbp), %eax	# mode, mode.105
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25596
	cmpl	$1, %eax	#, D.25596
	jne	.L179	#,
	.loc 1 1332 0
	movl	-40(%rbp), %eax	# oldmode, oldmode.106
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25596
	cmpl	$1, %eax	#, D.25596
	jne	.L179	#,
	.loc 1 1333 0
	movq	-48(%rbp), %rax	# x, tmp151
	movzwl	(%rax), %eax	# x_2->code, D.25591
	cmpw	$55, %ax	#, D.25591
	je	.L178	#,
	.loc 1 1334 0
	movl	-36(%rbp), %eax	# mode, mode.107
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.25592
	movl	-40(%rbp), %eax	# oldmode, oldmode.108
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25592
	cmpb	%al, %dl	# D.25592, D.25592
	ja	.L179	#,
	.loc 1 1335 0
	movq	-48(%rbp), %rax	# x, tmp154
	movzwl	(%rax), %eax	# x_2->code, D.25591
	cmpw	$66, %ax	#, D.25591
	jne	.L180	#,
	.loc 1 1335 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# x, tmp155
	movzbl	3(%rax), %eax	# *x_2, D.25592
	andl	$8, %eax	#, D.25592
	testb	%al, %al	# D.25592
	jne	.L180	#,
	.loc 1 1336 0 is_stmt 1
	movl	-36(%rbp), %eax	# mode, mode.109
	cltq
	movzbl	direct_load(%rax), %eax	# direct_load, D.25598
	testb	%al, %al	# D.25598
	jne	.L178	#,
.L180:
	.loc 1 1337 0
	movq	-48(%rbp), %rax	# x, tmp157
	movzwl	(%rax), %eax	# x_2->code, D.25591
	cmpw	$61, %ax	#, D.25591
	jne	.L179	#,
.L178:
	.loc 1 1344 0
	movq	-48(%rbp), %rax	# x, tmp158
	movzwl	(%rax), %eax	# x_2->code, D.25591
	cmpw	$54, %ax	#, D.25591
	jne	.L181	#,
	.loc 1 1344 0 is_stmt 0 discriminator 1
	cmpl	$0, -40(%rbp)	#, oldmode
	je	.L181	#,
	.loc 1 1345 0 is_stmt 1
	movl	-36(%rbp), %eax	# mode, mode.110
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.25592
	movl	-40(%rbp), %eax	# oldmode, oldmode.111
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25592
	cmpb	%al, %dl	# D.25592, D.25592
	jbe	.L181	#,
.LBB18:
	.loc 1 1347 0
	movq	-48(%rbp), %rax	# x, tmp161
	movq	8(%rax), %rax	# x_2->fld[0].rtwint, tmp162
	movq	%rax, -16(%rbp)	# tmp162, val
	.loc 1 1348 0
	movl	-40(%rbp), %eax	# oldmode, oldmode.112
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25591
	movzwl	%ax, %eax	# D.25591, tmp164
	movl	%eax, -28(%rbp)	# tmp164, width
	.loc 1 1352 0
	movl	-28(%rbp), %eax	# width, tmp165
	movl	$1, %edx	#, tmp166
	movl	%eax, %ecx	# tmp165, tmp184
	salq	%cl, %rdx	# tmp184, D.25597
	movq	%rdx, %rax	# D.25597, D.25597
	subq	$1, %rax	#, D.25597
	andq	%rax, -16(%rbp)	# D.25597, val
	.loc 1 1353 0
	cmpl	$0, -52(%rbp)	#, unsignedp
	jne	.L182	#,
	.loc 1 1354 0
	movl	-28(%rbp), %eax	# width, tmp167
	subl	$1, %eax	#, D.25594
	movq	-16(%rbp), %rdx	# val, tmp168
	movl	%eax, %ecx	# D.25594, tmp186
	sarq	%cl, %rdx	# tmp186, D.25597
	movq	%rdx, %rax	# D.25597, D.25597
	andl	$1, %eax	#, D.25597
	testq	%rax, %rax	# D.25597
	je	.L182	#,
	.loc 1 1355 0
	movl	-28(%rbp), %eax	# width, tmp169
	movq	$-1, %rdx	#, tmp170
	movl	%eax, %ecx	# tmp169, tmp188
	salq	%cl, %rdx	# tmp188, D.25597
	movq	%rdx, %rax	# D.25597, D.25597
	orq	%rax, -16(%rbp)	# D.25597, val
.L182:
	.loc 1 1357 0
	movl	-36(%rbp), %edx	# mode, tmp171
	movq	-16(%rbp), %rax	# val, tmp172
	movl	%edx, %esi	# tmp171,
	movq	%rax, %rdi	# tmp172,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.25597,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	jmp	.L174	#
.L181:
.LBE18:
	.loc 1 1360 0
	movq	-48(%rbp), %rdx	# x, tmp173
	movl	-36(%rbp), %eax	# mode, tmp174
	movq	%rdx, %rsi	# tmp173,
	movl	%eax, %edi	# tmp174,
	call	gen_lowpart	#
	jmp	.L174	#
.L179:
	.loc 1 1363 0
	movl	-36(%rbp), %eax	# mode, tmp175
	movl	%eax, %edi	# tmp175,
	call	gen_reg_rtx	#
	movq	%rax, -8(%rbp)	# tmp176, temp
	.loc 1 1364 0
	movl	-52(%rbp), %edx	# unsignedp, tmp177
	movq	-48(%rbp), %rcx	# x, tmp178
	movq	-8(%rbp), %rax	# temp, tmp179
	movq	%rcx, %rsi	# tmp178,
	movq	%rax, %rdi	# tmp179,
	call	convert_move	#
	.loc 1 1365 0
	movq	-8(%rbp), %rax	# temp, D.25590
.L174:
	.loc 1 1366 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE13:
	.size	convert_modes, .-convert_modes
	.globl	move_by_pieces
	.type	move_by_pieces, @function
move_by_pieces:
.LFB14:
	.loc 1 1393 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$144, %rsp	#,
	movq	%rdi, -120(%rbp)	# to, to
	movq	%rsi, -128(%rbp)	# from, from
	movq	%rdx, -136(%rbp)	# len, len
	movl	%ecx, -140(%rbp)	# align, align
	.loc 1 1395 0
	movq	-128(%rbp), %rax	# from, tmp118
	movq	8(%rax), %rax	# from_15(D)->fld[0].rtx, tmp119
	movq	%rax, -88(%rbp)	# tmp119, from_addr
	.loc 1 1396 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.114
	andl	$33554432, %eax	#, D.25599
	testl	%eax, %eax	# D.25599
	je	.L184	#,
	.loc 1 1396 0 is_stmt 0 discriminator 1
	movl	$9, %eax	#, iftmp.113
	jmp	.L185	#
.L184:
	.loc 1 1396 0 discriminator 2
	movl	$5, %eax	#, iftmp.113
.L185:
	.loc 1 1396 0 discriminator 3
	movl	%eax, -112(%rbp)	# iftmp.113, max_size
	.loc 1 1397 0 is_stmt 1 discriminator 3
	movl	$0, -108(%rbp)	#, mode
	.loc 1 1400 0 discriminator 3
	movq	$0, -24(%rbp)	#, data.offset
	.loc 1 1401 0 discriminator 3
	movq	-88(%rbp), %rax	# from_addr, tmp120
	movq	%rax, -48(%rbp)	# tmp120, data.from_addr
	.loc 1 1402 0 discriminator 3
	cmpq	$0, -120(%rbp)	#, to
	je	.L186	#,
	.loc 1 1404 0
	movq	-120(%rbp), %rax	# to, tmp121
	movq	8(%rax), %rax	# to_23(D)->fld[0].rtx, tmp122
	movq	%rax, -96(%rbp)	# tmp122, to_addr
	.loc 1 1405 0
	movq	-120(%rbp), %rax	# to, tmp123
	movq	%rax, -80(%rbp)	# tmp123, data.to
	.loc 1 1407 0
	movq	-96(%rbp), %rax	# to_addr, tmp124
	movzwl	(%rax), %eax	# to_addr_24->code, D.25600
	.loc 1 1408 0
	cmpw	$97, %ax	#, D.25600
	je	.L187	#,
	.loc 1 1407 0
	movq	-96(%rbp), %rax	# to_addr, tmp125
	movzwl	(%rax), %eax	# to_addr_24->code, D.25600
	cmpw	$96, %ax	#, D.25600
	je	.L187	#,
	.loc 1 1408 0
	movq	-96(%rbp), %rax	# to_addr, tmp126
	movzwl	(%rax), %eax	# to_addr_24->code, D.25600
	cmpw	$99, %ax	#, D.25600
	je	.L187	#,
	.loc 1 1408 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_addr, tmp127
	movzwl	(%rax), %eax	# to_addr_24->code, D.25600
	cmpw	$98, %ax	#, D.25600
	jne	.L188	#,
.L187:
	movl	$1, %eax	#, iftmp.115
	jmp	.L189	#
.L188:
	.loc 1 1408 0 discriminator 2
	movl	$0, %eax	#, iftmp.115
.L189:
	.loc 1 1407 0 is_stmt 1
	movl	%eax, -64(%rbp)	# iftmp.115, data.autinc_to
	.loc 1 1410 0
	movq	-96(%rbp), %rax	# to_addr, tmp128
	movzwl	(%rax), %eax	# to_addr_24->code, D.25600
	cmpw	$96, %ax	#, D.25600
	je	.L190	#,
	.loc 1 1410 0 is_stmt 0 discriminator 2
	movq	-96(%rbp), %rax	# to_addr, tmp129
	movzwl	(%rax), %eax	# to_addr_24->code, D.25600
	cmpw	$98, %ax	#, D.25600
	jne	.L191	#,
.L190:
	.loc 1 1410 0 discriminator 1
	movl	$1, %eax	#, iftmp.116
	jmp	.L192	#
.L191:
	.loc 1 1410 0 discriminator 3
	movl	$0, %eax	#, iftmp.116
.L192:
	.loc 1 1410 0 discriminator 4
	movl	%eax, -16(%rbp)	# iftmp.116, data.reverse
	jmp	.L193	#
.L186:
	.loc 1 1414 0 is_stmt 1
	movq	$0, -96(%rbp)	#, to_addr
	.loc 1 1415 0
	movq	$0, -80(%rbp)	#, data.to
	.loc 1 1416 0
	movl	$1, -64(%rbp)	#, data.autinc_to
	.loc 1 1418 0
	movl	$1, -16(%rbp)	#, data.reverse
.L193:
	.loc 1 1423 0
	movq	-96(%rbp), %rax	# to_addr, tmp130
	movq	%rax, -72(%rbp)	# tmp130, data.to_addr
	.loc 1 1424 0
	movq	-128(%rbp), %rax	# from, tmp131
	movq	%rax, -56(%rbp)	# tmp131, data.from
	.loc 1 1426 0
	movq	-88(%rbp), %rax	# from_addr, tmp132
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	.loc 1 1428 0
	cmpw	$97, %ax	#, D.25600
	je	.L194	#,
	.loc 1 1426 0
	movq	-88(%rbp), %rax	# from_addr, tmp133
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$96, %ax	#, D.25600
	je	.L194	#,
	.loc 1 1427 0
	movq	-88(%rbp), %rax	# from_addr, tmp134
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$99, %ax	#, D.25600
	je	.L194	#,
	.loc 1 1428 0
	movq	-88(%rbp), %rax	# from_addr, tmp135
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$98, %ax	#, D.25600
	jne	.L195	#,
.L194:
	.loc 1 1428 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.117
	jmp	.L196	#
.L195:
	.loc 1 1428 0 discriminator 2
	movl	$0, %eax	#, iftmp.117
.L196:
	.loc 1 1426 0 is_stmt 1
	movl	%eax, -40(%rbp)	# iftmp.117, data.autinc_from
	.loc 1 1430 0
	movl	$0, -36(%rbp)	#, data.explicit_inc_from
	.loc 1 1431 0
	movl	$0, -60(%rbp)	#, data.explicit_inc_to
	.loc 1 1432 0
	movl	-16(%rbp), %eax	# data.reverse, D.25599
	testl	%eax, %eax	# D.25599
	je	.L197	#,
	.loc 1 1432 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# len, len.118
	movq	%rax, -24(%rbp)	# len.118, data.offset
.L197:
	.loc 1 1433 0 is_stmt 1
	movq	-136(%rbp), %rax	# len, tmp136
	movq	%rax, -32(%rbp)	# tmp136, data.len
	.loc 1 1438 0
	movl	-40(%rbp), %eax	# data.autinc_from, D.25599
	testl	%eax, %eax	# D.25599
	je	.L198	#,
	.loc 1 1438 0 is_stmt 0 discriminator 1
	movl	-64(%rbp), %eax	# data.autinc_to, D.25599
	testl	%eax, %eax	# D.25599
	jne	.L215	#,
.L198:
	.loc 1 1439 0 is_stmt 1
	movl	-140(%rbp), %edx	# align, tmp137
	movq	-136(%rbp), %rax	# len, tmp138
	movl	%edx, %esi	# tmp137,
	movq	%rax, %rdi	# tmp138,
	call	move_by_pieces_ninsns	#
	cmpq	$2, %rax	#, D.25601
	jbe	.L215	#,
	.loc 1 1442 0
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, tmp139
	movl	%eax, -104(%rbp)	# tmp139, tmode
	jmp	.L200	#
.L202:
	.loc 1 1444 0
	movl	-104(%rbp), %eax	# tmode, tmode.119
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25602
	movzbl	%al, %eax	# D.25602, D.25603
	cmpl	-112(%rbp), %eax	# max_size, D.25603
	jae	.L201	#,
	.loc 1 1445 0
	movl	-104(%rbp), %eax	# tmode, tmp141
	movl	%eax, -108(%rbp)	# tmp141, mode
.L201:
	.loc 1 1443 0
	movl	-104(%rbp), %eax	# tmode, tmode.120
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25602
	movzbl	%al, %eax	# D.25602, tmp143
	movl	%eax, -104(%rbp)	# tmp143, tmode
.L200:
	.loc 1 1442 0 discriminator 1
	cmpl	$0, -104(%rbp)	#, tmode
	jne	.L202	#,
	.loc 1 1459 0
	movl	-40(%rbp), %eax	# data.autinc_from, D.25599
	testl	%eax, %eax	# D.25599
	jne	.L216	#,
	.loc 1 1459 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# from_addr, tmp144
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$67, %ax	#, D.25600
	je	.L204	#,
	movq	-88(%rbp), %rax	# from_addr, tmp145
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$68, %ax	#, D.25600
	je	.L204	#,
	movq	-88(%rbp), %rax	# from_addr, tmp146
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$54, %ax	#, D.25600
	je	.L204	#,
	movq	-88(%rbp), %rax	# from_addr, tmp147
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$55, %ax	#, D.25600
	je	.L204	#,
	movq	-88(%rbp), %rax	# from_addr, tmp148
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$58, %ax	#, D.25600
	je	.L204	#,
	movq	-88(%rbp), %rax	# from_addr, tmp149
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$134, %ax	#, D.25600
	je	.L204	#,
	movq	-88(%rbp), %rax	# from_addr, tmp150
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$56, %ax	#, D.25600
	je	.L204	#,
	movq	-88(%rbp), %rax	# from_addr, tmp151
	movzwl	(%rax), %eax	# from_addr_16->code, D.25600
	cmpw	$140, %ax	#, D.25600
	jne	.L216	#,
.L204:
	.loc 1 1460 0 is_stmt 1
	movq	-88(%rbp), %rax	# from_addr, tmp152
	movq	%rax, %rdi	# tmp152,
	call	copy_addr_to_reg	#
	movq	%rax, -48(%rbp)	# D.25604, data.from_addr
.L216:
	.loc 1 1473 0
	movl	-64(%rbp), %eax	# data.autinc_to, D.25599
	testl	%eax, %eax	# D.25599
	jne	.L215	#,
	.loc 1 1473 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_addr, tmp153
	movzwl	(%rax), %eax	# to_addr_1->code, D.25600
	cmpw	$67, %ax	#, D.25600
	je	.L205	#,
	movq	-96(%rbp), %rax	# to_addr, tmp154
	movzwl	(%rax), %eax	# to_addr_1->code, D.25600
	cmpw	$68, %ax	#, D.25600
	je	.L205	#,
	movq	-96(%rbp), %rax	# to_addr, tmp155
	movzwl	(%rax), %eax	# to_addr_1->code, D.25600
	cmpw	$54, %ax	#, D.25600
	je	.L205	#,
	movq	-96(%rbp), %rax	# to_addr, tmp156
	movzwl	(%rax), %eax	# to_addr_1->code, D.25600
	cmpw	$55, %ax	#, D.25600
	je	.L205	#,
	movq	-96(%rbp), %rax	# to_addr, tmp157
	movzwl	(%rax), %eax	# to_addr_1->code, D.25600
	cmpw	$58, %ax	#, D.25600
	je	.L205	#,
	movq	-96(%rbp), %rax	# to_addr, tmp158
	movzwl	(%rax), %eax	# to_addr_1->code, D.25600
	cmpw	$134, %ax	#, D.25600
	je	.L205	#,
	movq	-96(%rbp), %rax	# to_addr, tmp159
	movzwl	(%rax), %eax	# to_addr_1->code, D.25600
	cmpw	$56, %ax	#, D.25600
	je	.L205	#,
	movq	-96(%rbp), %rax	# to_addr, tmp160
	movzwl	(%rax), %eax	# to_addr_1->code, D.25600
	cmpw	$140, %ax	#, D.25600
	jne	.L215	#,
.L205:
	.loc 1 1474 0 is_stmt 1
	movq	-96(%rbp), %rax	# to_addr, tmp161
	movq	%rax, %rdi	# tmp161,
	call	copy_addr_to_reg	#
	movq	%rax, -72(%rbp)	# D.25604, data.to_addr
.L215:
	.loc 1 1479 0
	movl	$128, -140(%rbp)	#, align
	.loc 1 1484 0
	jmp	.L206	#
.L213:
	.loc 1 1486 0
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, tmp162
	movl	%eax, -104(%rbp)	# tmp162, tmode
	jmp	.L207	#
.L209:
	.loc 1 1488 0
	movl	-104(%rbp), %eax	# tmode, tmode.123
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25602
	movzbl	%al, %eax	# D.25602, D.25603
	cmpl	-112(%rbp), %eax	# max_size, D.25603
	jae	.L208	#,
	.loc 1 1489 0
	movl	-104(%rbp), %eax	# tmode, tmp164
	movl	%eax, -108(%rbp)	# tmp164, mode
.L208:
	.loc 1 1487 0
	movl	-104(%rbp), %eax	# tmode, tmode.124
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25602
	movzbl	%al, %eax	# D.25602, tmp166
	movl	%eax, -104(%rbp)	# tmp166, tmode
.L207:
	.loc 1 1486 0 discriminator 1
	cmpl	$0, -104(%rbp)	#, tmode
	jne	.L209	#,
	.loc 1 1491 0
	cmpl	$0, -108(%rbp)	#, mode
	jne	.L210	#,
	.loc 1 1492 0
	jmp	.L211	#
.L210:
	.loc 1 1494 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25605
	movl	-108(%rbp), %edx	# mode, mode.125
	movslq	%edx, %rdx	# mode.125, tmp167
	salq	$4, %rdx	#, tmp168
	addq	%rdx, %rax	# tmp168, tmp169
	movl	8(%rax), %eax	# _86->handlers[mode.125_87].insn_code, tmp170
	movl	%eax, -100(%rbp)	# tmp170, icode
	.loc 1 1495 0
	cmpl	$1317, -100(%rbp)	#, icode
	je	.L212	#,
	.loc 1 1495 0 is_stmt 0 discriminator 1
	movl	-108(%rbp), %eax	# mode, tmp171
	movl	%eax, %edi	# tmp171,
	call	get_mode_alignment	#
	cmpl	-140(%rbp), %eax	# align, D.25603
	ja	.L212	#,
	.loc 1 1496 0 is_stmt 1
	movl	-100(%rbp), %eax	# icode, icode.126
	movslq	%eax, %rdx	# icode.126, tmp172
	movq	%rdx, %rax	# tmp172, tmp173
	salq	$2, %rax	#, tmp173
	addq	%rdx, %rax	# tmp172, tmp173
	salq	$3, %rax	#, tmp174
	addq	$insn_data+16, %rax	#, tmp175
	movq	(%rax), %rax	# insn_data[icode.126_90].genfun, D.25606
	leaq	-80(%rbp), %rdx	#, tmp176
	movl	-108(%rbp), %ecx	# mode, tmp177
	movl	%ecx, %esi	# tmp177,
	movq	%rax, %rdi	# D.25606,
	call	move_by_pieces_1	#
.L212:
	.loc 1 1498 0
	movl	-108(%rbp), %eax	# mode, mode.127
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25602
	movzbl	%al, %eax	# D.25602, tmp179
	movl	%eax, -112(%rbp)	# tmp179, max_size
.L206:
	.loc 1 1484 0 discriminator 1
	cmpl	$1, -112(%rbp)	#, max_size
	ja	.L213	#,
.L211:
	.loc 1 1502 0
	movq	-32(%rbp), %rax	# data.len, D.25601
	testq	%rax, %rax	# D.25601
	je	.L183	#,
	.loc 1 1503 0
	movl	$__FUNCTION__.14315, %edx	#,
	movl	$1503, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L183:
	.loc 1 1504 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE14:
	.size	move_by_pieces, .-move_by_pieces
	.type	move_by_pieces_ninsns, @function
move_by_pieces_ninsns:
.LFB15:
	.loc 1 1513 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# l, l
	movl	%esi, -60(%rbp)	# align, align
	.loc 1 1514 0
	movq	$0, -32(%rbp)	#, n_insns
	.loc 1 1515 0
	movq	$17, -24(%rbp)	#, max_size
	.loc 1 1519 0
	movl	$128, -40(%rbp)	#, align
	.loc 1 1521 0
	jmp	.L218	#
.L225:
.LBB19:
	.loc 1 1523 0
	movl	$0, -48(%rbp)	#, mode
	.loc 1 1526 0
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, tmp78
	movl	%eax, -44(%rbp)	# tmp78, tmode
	jmp	.L219	#
.L221:
	.loc 1 1528 0
	movl	-44(%rbp), %eax	# tmode, tmode.128
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25607
	movzbl	%al, %eax	# D.25607, D.25608
	cmpq	-24(%rbp), %rax	# max_size, D.25608
	jae	.L220	#,
	.loc 1 1529 0
	movl	-44(%rbp), %eax	# tmode, tmp80
	movl	%eax, -48(%rbp)	# tmp80, mode
.L220:
	.loc 1 1527 0
	movl	-44(%rbp), %eax	# tmode, tmode.129
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25607
	movzbl	%al, %eax	# D.25607, tmp82
	movl	%eax, -44(%rbp)	# tmp82, tmode
.L219:
	.loc 1 1526 0 discriminator 1
	cmpl	$0, -44(%rbp)	#, tmode
	jne	.L221	#,
	.loc 1 1531 0
	cmpl	$0, -48(%rbp)	#, mode
	jne	.L222	#,
	.loc 1 1532 0
	jmp	.L223	#
.L222:
	.loc 1 1534 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25609
	movl	-48(%rbp), %edx	# mode, mode.130
	movslq	%edx, %rdx	# mode.130, tmp83
	salq	$4, %rdx	#, tmp84
	addq	%rdx, %rax	# tmp84, tmp85
	movl	8(%rax), %eax	# _22->handlers[mode.130_23].insn_code, tmp86
	movl	%eax, -36(%rbp)	# tmp86, icode
	.loc 1 1535 0
	cmpl	$1317, -36(%rbp)	#, icode
	je	.L224	#,
	.loc 1 1535 0 is_stmt 0 discriminator 1
	movl	-48(%rbp), %eax	# mode, tmp87
	movl	%eax, %edi	# tmp87,
	call	get_mode_alignment	#
	cmpl	-40(%rbp), %eax	# align, D.25610
	ja	.L224	#,
	.loc 1 1536 0 is_stmt 1
	movl	-48(%rbp), %eax	# mode, mode.131
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25607
	movzbl	%al, %ebx	# D.25607, D.25608
	movq	-56(%rbp), %rax	# l, tmp91
	movl	$0, %edx	#, tmp90
	divq	%rbx	# D.25608
	addq	%rax, -32(%rbp)	# D.25608, n_insns
	movl	-48(%rbp), %eax	# mode, mode.132
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25607
	movzbl	%al, %ecx	# D.25607, D.25608
	movq	-56(%rbp), %rax	# l, tmp94
	movl	$0, %edx	#, tmp95
	divq	%rcx	# D.25608
	movq	%rdx, -56(%rbp)	# tmp95, l
.L224:
	.loc 1 1538 0
	movl	-48(%rbp), %eax	# mode, mode.133
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25607
	movzbl	%al, %eax	# D.25607, tmp98
	movq	%rax, -24(%rbp)	# tmp98, max_size
.L218:
.LBE19:
	.loc 1 1521 0 discriminator 1
	cmpq	$1, -24(%rbp)	#, max_size
	ja	.L225	#,
.L223:
	.loc 1 1541 0
	cmpq	$0, -56(%rbp)	#, l
	je	.L226	#,
	.loc 1 1542 0
	movl	$__FUNCTION__.14331, %edx	#,
	movl	$1542, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L226:
	.loc 1 1543 0
	movq	-32(%rbp), %rax	# n_insns, D.25608
	.loc 1 1544 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE15:
	.size	move_by_pieces_ninsns, .-move_by_pieces_ninsns
	.type	move_by_pieces_1, @function
move_by_pieces_1:
.LFB16:
	.loc 1 1555 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# genfun, genfun
	movl	%esi, -44(%rbp)	# mode, mode
	movq	%rdx, -56(%rbp)	# data, data
	.loc 1 1556 0
	movl	-44(%rbp), %eax	# mode, mode.134
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25613
	movzbl	%al, %eax	# D.25613, tmp90
	movl	%eax, -20(%rbp)	# tmp90, size
	.loc 1 1557 0
	movq	$0, -16(%rbp)	#, to1
	.loc 1 1559 0
	jmp	.L229	#
.L238:
	.loc 1 1561 0
	movq	-56(%rbp), %rax	# data, tmp91
	movl	64(%rax), %eax	# data_9(D)->reverse, D.25615
	testl	%eax, %eax	# D.25615
	je	.L230	#,
	.loc 1 1562 0
	movq	-56(%rbp), %rax	# data, tmp92
	movq	56(%rax), %rdx	# data_9(D)->offset, D.25616
	movl	-20(%rbp), %eax	# size, D.25616
	subq	%rax, %rdx	# D.25616, D.25616
	movq	-56(%rbp), %rax	# data, tmp93
	movq	%rdx, 56(%rax)	# D.25616, data_9(D)->offset
.L230:
	.loc 1 1564 0
	movq	-56(%rbp), %rax	# data, tmp94
	movq	(%rax), %rax	# data_9(D)->to, D.25617
	testq	%rax, %rax	# D.25617
	je	.L231	#,
	.loc 1 1566 0
	movq	-56(%rbp), %rax	# data, tmp95
	movl	16(%rax), %eax	# data_9(D)->autinc_to, D.25615
	testl	%eax, %eax	# D.25615
	je	.L232	#,
	.loc 1 1567 0
	movq	-56(%rbp), %rax	# data, tmp96
	movq	56(%rax), %rcx	# data_9(D)->offset, D.25616
	movq	-56(%rbp), %rax	# data, tmp97
	movq	8(%rax), %rdx	# data_9(D)->to_addr, D.25617
	movq	-56(%rbp), %rax	# data, tmp98
	movq	(%rax), %rax	# data_9(D)->to, D.25617
	movl	-44(%rbp), %esi	# mode, tmp99
	movl	$1, %r8d	#,
	movq	%rax, %rdi	# D.25617,
	call	adjust_automodify_address_1	#
	movq	%rax, -16(%rbp)	# tmp100, to1
	jmp	.L231	#
.L232:
	.loc 1 1570 0
	movq	-56(%rbp), %rax	# data, tmp101
	movq	56(%rax), %rdx	# data_9(D)->offset, D.25616
	movq	-56(%rbp), %rax	# data, tmp102
	movq	(%rax), %rax	# data_9(D)->to, D.25617
	movl	-44(%rbp), %esi	# mode, tmp103
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# D.25617,
	call	adjust_address_1	#
	movq	%rax, -16(%rbp)	# tmp104, to1
.L231:
	.loc 1 1573 0
	movq	-56(%rbp), %rax	# data, tmp105
	movl	40(%rax), %eax	# data_9(D)->autinc_from, D.25615
	testl	%eax, %eax	# D.25615
	je	.L233	#,
	.loc 1 1574 0
	movq	-56(%rbp), %rax	# data, tmp106
	movq	56(%rax), %rcx	# data_9(D)->offset, D.25616
	movq	-56(%rbp), %rax	# data, tmp107
	movq	32(%rax), %rdx	# data_9(D)->from_addr, D.25617
	movq	-56(%rbp), %rax	# data, tmp108
	movq	24(%rax), %rax	# data_9(D)->from, D.25617
	movl	-44(%rbp), %esi	# mode, tmp109
	movl	$1, %r8d	#,
	movq	%rax, %rdi	# D.25617,
	call	adjust_automodify_address_1	#
	movq	%rax, -8(%rbp)	# tmp110, from1
	jmp	.L239	#
.L233:
	.loc 1 1577 0
	movq	-56(%rbp), %rax	# data, tmp111
	movq	56(%rax), %rdx	# data_9(D)->offset, D.25616
	movq	-56(%rbp), %rax	# data, tmp112
	movq	24(%rax), %rax	# data_9(D)->from, D.25617
	movl	-44(%rbp), %esi	# mode, tmp113
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# D.25617,
	call	adjust_address_1	#
	movq	%rax, -8(%rbp)	# tmp114, from1
.L239:
	.loc 1 1586 0
	movq	-56(%rbp), %rax	# data, tmp115
	movq	(%rax), %rax	# data_9(D)->to, D.25617
	testq	%rax, %rax	# D.25617
	je	.L235	#,
	.loc 1 1587 0
	movq	-8(%rbp), %rcx	# from1, tmp116
	movq	-16(%rbp), %rax	# to1, tmp117
	movq	-40(%rbp), %rdx	# genfun, tmp118
	movq	%rcx, %rsi	# tmp116,
	movq	%rax, %rdi	# tmp117,
	movl	$0, %eax	#,
	call	*%rdx	# tmp118
	movq	%rax, %rdi	# D.25617,
	call	emit_insn	#
	jmp	.L240	#
.L235:
	.loc 1 1591 0
	movq	-8(%rbp), %rcx	# from1, tmp119
	movl	-44(%rbp), %eax	# mode, tmp120
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp119,
	movl	%eax, %edi	# tmp120,
	call	emit_single_push_insn	#
.L240:
	.loc 1 1602 0
	movq	-56(%rbp), %rax	# data, tmp121
	movl	64(%rax), %eax	# data_9(D)->reverse, D.25615
	testl	%eax, %eax	# D.25615
	jne	.L237	#,
	.loc 1 1603 0
	movq	-56(%rbp), %rax	# data, tmp122
	movq	56(%rax), %rdx	# data_9(D)->offset, D.25616
	movl	-20(%rbp), %eax	# size, D.25616
	addq	%rax, %rdx	# D.25616, D.25616
	movq	-56(%rbp), %rax	# data, tmp123
	movq	%rdx, 56(%rax)	# D.25616, data_9(D)->offset
.L237:
	.loc 1 1605 0
	movq	-56(%rbp), %rax	# data, tmp124
	movq	48(%rax), %rdx	# data_9(D)->len, D.25614
	movl	-20(%rbp), %eax	# size, D.25614
	subq	%rax, %rdx	# D.25614, D.25614
	movq	-56(%rbp), %rax	# data, tmp125
	movq	%rdx, 48(%rax)	# D.25614, data_9(D)->len
.L229:
	.loc 1 1559 0 discriminator 1
	movq	-56(%rbp), %rax	# data, tmp126
	movq	48(%rax), %rdx	# data_9(D)->len, D.25614
	movl	-20(%rbp), %eax	# size, D.25614
	cmpq	%rax, %rdx	# D.25614, D.25614
	jae	.L238	#,
	.loc 1 1607 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE16:
	.size	move_by_pieces_1, .-move_by_pieces_1
	.section	.rodata
.LC1:
	.string	"memcpy"
	.text
	.globl	emit_block_move
	.type	emit_block_move, @function
emit_block_move:
.LFB17:
	.loc 1 1625 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -120(%rbp)	# x, x
	movq	%rsi, -128(%rbp)	# y, y
	movq	%rdx, -136(%rbp)	# size, size
	.loc 1 1626 0
	movq	$0, -88(%rbp)	#, retval
	.loc 1 1631 0
	movq	-128(%rbp), %rax	# y, tmp161
	movq	16(%rax), %rax	# y_12(D)->fld[1].rtmem, D.25619
	testq	%rax, %rax	# D.25619
	je	.L242	#,
	.loc 1 1631 0 is_stmt 0 discriminator 1
	movq	-128(%rbp), %rax	# y, tmp162
	movq	16(%rax), %rax	# y_12(D)->fld[1].rtmem, D.25619
	movl	32(%rax), %edx	# _14->align, iftmp.135
	jmp	.L243	#
.L242:
	.loc 1 1631 0 discriminator 2
	movl	$8, %edx	#, iftmp.135
.L243:
	.loc 1 1631 0 discriminator 3
	movq	-120(%rbp), %rax	# x, tmp163
	movq	16(%rax), %rax	# x_17(D)->fld[1].rtmem, D.25619
	testq	%rax, %rax	# D.25619
	je	.L244	#,
	.loc 1 1631 0 discriminator 1
	movq	-120(%rbp), %rax	# x, tmp164
	movq	16(%rax), %rax	# x_17(D)->fld[1].rtmem, D.25619
	movl	32(%rax), %eax	# _19->align, iftmp.136
	jmp	.L245	#
.L244:
	.loc 1 1631 0 discriminator 2
	movl	$8, %eax	#, iftmp.136
.L245:
	.loc 1 1631 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.136, iftmp.135
	cmovbe	%edx, %eax	# iftmp.135,, tmp165
	movl	%eax, -96(%rbp)	# tmp165, align
	.loc 1 1633 0 is_stmt 1 discriminator 3
	movq	-120(%rbp), %rax	# x, tmp166
	movzbl	2(%rax), %eax	# x_17(D)->mode, D.25620
	cmpb	$51, %al	#, D.25620
	je	.L246	#,
	.loc 1 1634 0
	movl	$__FUNCTION__.14354, %edx	#,
	movl	$1634, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L246:
	.loc 1 1636 0
	movq	-128(%rbp), %rax	# y, tmp167
	movzbl	2(%rax), %eax	# y_12(D)->mode, D.25620
	cmpb	$51, %al	#, D.25620
	je	.L247	#,
	.loc 1 1637 0
	movl	$__FUNCTION__.14354, %edx	#,
	movl	$1637, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L247:
	.loc 1 1639 0
	movq	-120(%rbp), %rax	# x, tmp168
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp168,
	call	protect_from_queue	#
	movq	%rax, -120(%rbp)	# tmp169, x
	.loc 1 1640 0
	movq	-128(%rbp), %rax	# y, tmp170
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp170,
	call	protect_from_queue	#
	movq	%rax, -128(%rbp)	# tmp171, y
	.loc 1 1641 0
	movq	-136(%rbp), %rax	# size, tmp172
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp172,
	call	protect_from_queue	#
	movq	%rax, -136(%rbp)	# tmp173, size
	.loc 1 1643 0
	movq	-120(%rbp), %rax	# x, tmp174
	movzwl	(%rax), %eax	# x_25->code, D.25621
	cmpw	$66, %ax	#, D.25621
	je	.L248	#,
	.loc 1 1644 0
	movl	$__FUNCTION__.14354, %edx	#,
	movl	$1644, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L248:
	.loc 1 1645 0
	movq	-128(%rbp), %rax	# y, tmp175
	movzwl	(%rax), %eax	# y_26->code, D.25621
	cmpw	$66, %ax	#, D.25621
	je	.L249	#,
	.loc 1 1646 0
	movl	$__FUNCTION__.14354, %edx	#,
	movl	$1646, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L249:
	.loc 1 1647 0
	cmpq	$0, -136(%rbp)	#, size
	jne	.L250	#,
	.loc 1 1648 0
	movl	$__FUNCTION__.14354, %edx	#,
	movl	$1648, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L250:
	.loc 1 1650 0
	movq	-136(%rbp), %rax	# size, tmp176
	movzwl	(%rax), %eax	# size_28->code, D.25621
	cmpw	$54, %ax	#, D.25621
	jne	.L251	#,
	.loc 1 1650 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# size, tmp177
	movq	8(%rax), %rax	# size_28->fld[0].rtwint, D.25622
	movl	-96(%rbp), %edx	# align, tmp178
	movl	%edx, %esi	# tmp178,
	movq	%rax, %rdi	# D.25623,
	call	move_by_pieces_ninsns	#
	movq	%rax, %rdx	#, D.25623
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.138
	testl	%eax, %eax	# optimize_size.138
	jne	.L252	#,
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.139
	movl	40(%rax), %eax	# ix86_cost.139_36->move_ratio, D.25624
	movl	%eax, %eax	# D.25625, iftmp.137
	jmp	.L253	#
.L252:
	.loc 1 1650 0 discriminator 2
	movl	$3, %eax	#, iftmp.137
.L253:
	.loc 1 1650 0 discriminator 3
	cmpq	%rax, %rdx	# iftmp.137, D.25623
	jae	.L251	#,
	.loc 1 1651 0 is_stmt 1
	movq	-136(%rbp), %rax	# size, tmp179
	movq	8(%rax), %rax	# size_28->fld[0].rtwint, D.25622
	movq	%rax, %rdx	# D.25622, D.25623
	movl	-96(%rbp), %ecx	# align, tmp180
	movq	-128(%rbp), %rsi	# y, tmp181
	movq	-120(%rbp), %rax	# x, tmp182
	movq	%rax, %rdi	# tmp182,
	call	move_by_pieces	#
	jmp	.L254	#
.L251:
.LBB20:
	.loc 1 1658 0
	movl	-96(%rbp), %eax	# align, tmp183
	shrl	$3, %eax	#, D.25625
	movl	%eax, %eax	# D.25625, D.25622
	movq	%rax, %rsi	# D.25622,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -72(%rbp)	# tmp184, opalign
	.loc 1 1662 0
	movl	$1, volatile_ok(%rip)	#, volatile_ok
	.loc 1 1664 0
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, tmp185
	movl	%eax, -100(%rbp)	# tmp185, mode
	jmp	.L255	#
.L267:
.LBB21:
	.loc 1 1667 0
	movl	-100(%rbp), %eax	# mode, mode.140
	cltq
	movl	movstr_optab(,%rax,4), %eax	# movstr_optab, tmp187
	movl	%eax, -92(%rbp)	# tmp187, code
	.loc 1 1670 0
	cmpl	$1317, -92(%rbp)	#, code
	je	.L256	#,
	.loc 1 1675 0
	movq	-136(%rbp), %rax	# size, tmp188
	movzwl	(%rax), %eax	# size_28->code, D.25621
	cmpw	$54, %ax	#, D.25621
	jne	.L257	#,
	.loc 1 1676 0
	movq	-136(%rbp), %rax	# size, tmp189
	movq	8(%rax), %rax	# size_28->fld[0].rtwint, D.25622
	movq	%rax, %rdx	# D.25622, D.25623
	.loc 1 1677 0
	movl	-100(%rbp), %eax	# mode, mode.141
	cltq
	movq	mode_mask_array(,%rax,8), %rax	# mode_mask_array, D.25623
	shrq	%rax	# D.25623
	.loc 1 1676 0
	cmpq	%rax, %rdx	# D.25623, D.25623
	jbe	.L258	#,
.L257:
	.loc 1 1678 0
	movl	-100(%rbp), %eax	# mode, mode.142
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25621
	movzwl	%ax, %edx	# D.25621, D.25624
	movl	target_flags(%rip), %eax	# target_flags, target_flags.144
	andl	$33554432, %eax	#, D.25624
	testl	%eax, %eax	# D.25624
	je	.L259	#,
	.loc 1 1678 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.143
	jmp	.L260	#
.L259:
	.loc 1 1678 0 discriminator 2
	movl	$32, %eax	#, iftmp.143
.L260:
	.loc 1 1678 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.143, D.25624
	jl	.L256	#,
.L258:
	.loc 1 1679 0 is_stmt 1
	movl	-92(%rbp), %eax	# code, code.145
	movslq	%eax, %rdx	# code.145, tmp192
	movq	%rdx, %rax	# tmp192, tmp193
	salq	$2, %rax	#, tmp193
	addq	%rdx, %rax	# tmp192, tmp193
	salq	$3, %rax	#, tmp194
	addq	$insn_data+24, %rax	#, tmp195
	movq	(%rax), %rax	# insn_data[code.145_62].operand, D.25626
	movq	(%rax), %rax	# _63->predicate, tmp196
	movq	%rax, -64(%rbp)	# tmp196, pred
	cmpq	$0, -64(%rbp)	#, pred
	je	.L261	#,
	.loc 1 1680 0
	movq	-120(%rbp), %rdx	# x, tmp197
	movq	-64(%rbp), %rax	# pred, tmp198
	movl	$51, %esi	#,
	movq	%rdx, %rdi	# tmp197,
	call	*%rax	# tmp198
	testl	%eax, %eax	# D.25624
	je	.L256	#,
.L261:
	.loc 1 1681 0
	movl	-92(%rbp), %eax	# code, code.146
	movslq	%eax, %rdx	# code.146, tmp199
	movq	%rdx, %rax	# tmp199, tmp200
	salq	$2, %rax	#, tmp200
	addq	%rdx, %rax	# tmp199, tmp200
	salq	$3, %rax	#, tmp201
	addq	$insn_data+24, %rax	#, tmp202
	movq	(%rax), %rax	# insn_data[code.146_66].operand, D.25626
	addq	$24, %rax	#, D.25626
	movq	(%rax), %rax	# _68->predicate, tmp203
	movq	%rax, -64(%rbp)	# tmp203, pred
	cmpq	$0, -64(%rbp)	#, pred
	je	.L262	#,
	.loc 1 1682 0
	movq	-128(%rbp), %rdx	# y, tmp204
	movq	-64(%rbp), %rax	# pred, tmp205
	movl	$51, %esi	#,
	movq	%rdx, %rdi	# tmp204,
	call	*%rax	# tmp205
	testl	%eax, %eax	# D.25624
	je	.L256	#,
.L262:
	.loc 1 1683 0
	movl	-92(%rbp), %eax	# code, code.147
	movslq	%eax, %rdx	# code.147, tmp206
	movq	%rdx, %rax	# tmp206, tmp207
	salq	$2, %rax	#, tmp207
	addq	%rdx, %rax	# tmp206, tmp207
	salq	$3, %rax	#, tmp208
	addq	$insn_data+24, %rax	#, tmp209
	movq	(%rax), %rax	# insn_data[code.147_71].operand, D.25626
	addq	$72, %rax	#, D.25626
	movq	(%rax), %rax	# _73->predicate, tmp210
	movq	%rax, -64(%rbp)	# tmp210, pred
	cmpq	$0, -64(%rbp)	#, pred
	je	.L263	#,
	.loc 1 1684 0
	movq	-72(%rbp), %rdx	# opalign, tmp211
	movq	-64(%rbp), %rax	# pred, tmp212
	movl	$0, %esi	#,
	movq	%rdx, %rdi	# tmp211,
	call	*%rax	# tmp212
	testl	%eax, %eax	# D.25624
	je	.L256	#,
.L263:
.LBB22:
	.loc 1 1687 0
	call	get_last_insn	#
	movq	%rax, -56(%rbp)	# tmp213, last
	.loc 1 1690 0
	movq	-136(%rbp), %rcx	# size, tmp214
	movl	-100(%rbp), %eax	# mode, tmp215
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp214,
	movl	%eax, %edi	# tmp215,
	call	convert_to_mode	#
	movq	%rax, -80(%rbp)	# tmp216, op2
	.loc 1 1691 0
	movl	-92(%rbp), %eax	# code, code.148
	movslq	%eax, %rdx	# code.148, tmp217
	movq	%rdx, %rax	# tmp217, tmp218
	salq	$2, %rax	#, tmp218
	addq	%rdx, %rax	# tmp217, tmp218
	salq	$3, %rax	#, tmp219
	addq	$insn_data+24, %rax	#, tmp220
	movq	(%rax), %rax	# insn_data[code.148_78].operand, D.25626
	addq	$48, %rax	#, D.25626
	movq	(%rax), %rax	# _80->predicate, tmp221
	movq	%rax, -64(%rbp)	# tmp221, pred
	.loc 1 1692 0
	cmpq	$0, -64(%rbp)	#, pred
	je	.L264	#,
	.loc 1 1692 0 is_stmt 0 discriminator 1
	movl	-100(%rbp), %ecx	# mode, tmp222
	movq	-80(%rbp), %rdx	# op2, tmp223
	movq	-64(%rbp), %rax	# pred, tmp224
	movl	%ecx, %esi	# tmp222,
	movq	%rdx, %rdi	# tmp223,
	call	*%rax	# tmp224
	testl	%eax, %eax	# D.25624
	jne	.L264	#,
	.loc 1 1693 0 is_stmt 1
	movq	-80(%rbp), %rdx	# op2, tmp225
	movl	-100(%rbp), %eax	# mode, tmp226
	movq	%rdx, %rsi	# tmp225,
	movl	%eax, %edi	# tmp226,
	call	copy_to_mode_reg	#
	movq	%rax, -80(%rbp)	# tmp227, op2
.L264:
	.loc 1 1695 0
	movl	-92(%rbp), %eax	# code, code.149
	movslq	%eax, %rdx	# code.149, tmp228
	movq	%rdx, %rax	# tmp228, tmp229
	salq	$2, %rax	#, tmp229
	addq	%rdx, %rax	# tmp228, tmp229
	salq	$3, %rax	#, tmp230
	addq	$insn_data+16, %rax	#, tmp231
	movq	(%rax), %r8	# insn_data[code.149_84].genfun, D.25627
	movq	-72(%rbp), %rcx	# opalign, tmp232
	movq	-80(%rbp), %rdx	# op2, tmp233
	movq	-128(%rbp), %rsi	# y, tmp234
	movq	-120(%rbp), %rax	# x, tmp235
	movq	%rax, %rdi	# tmp235,
	movl	$0, %eax	#,
	call	*%r8	# D.25627
	movq	%rax, -48(%rbp)	# tmp236, pat
	.loc 1 1696 0
	cmpq	$0, -48(%rbp)	#, pat
	je	.L265	#,
	.loc 1 1698 0
	movq	-48(%rbp), %rax	# pat, tmp237
	movq	%rax, %rdi	# tmp237,
	call	emit_insn	#
	.loc 1 1699 0
	movl	$0, volatile_ok(%rip)	#, volatile_ok
	.loc 1 1700 0
	movl	$0, %eax	#, D.25618
	jmp	.L266	#
.L265:
	.loc 1 1703 0
	movq	-56(%rbp), %rax	# last, tmp238
	movq	%rax, %rdi	# tmp238,
	call	delete_insns_since	#
.L256:
.LBE22:
.LBE21:
	.loc 1 1665 0
	movl	-100(%rbp), %eax	# mode, mode.150
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25620
	movzbl	%al, %eax	# D.25620, tmp240
	movl	%eax, -100(%rbp)	# tmp240, mode
.L255:
	.loc 1 1664 0 discriminator 1
	cmpl	$0, -100(%rbp)	#, mode
	jne	.L267	#,
	.loc 1 1707 0
	movl	$0, volatile_ok(%rip)	#, volatile_ok
	.loc 1 1729 0
	movq	-120(%rbp), %rax	# x, tmp241
	movq	8(%rax), %rdx	# x_25->fld[0].rtx, D.25628
	movl	target_flags(%rip), %eax	# target_flags, target_flags.152
	andl	$33554432, %eax	#, D.25624
	testl	%eax, %eax	# D.25624
	je	.L268	#,
	.loc 1 1729 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.151
	jmp	.L269	#
.L268:
	.loc 1 1729 0 discriminator 2
	movl	$4, %eax	#, iftmp.151
.L269:
	.loc 1 1729 0 discriminator 3
	movq	%rdx, %rsi	# D.25628,
	movl	%eax, %edi	# iftmp.151,
	call	copy_to_mode_reg	#
	movq	%rax, -120(%rbp)	# tmp242, x
	.loc 1 1730 0 is_stmt 1 discriminator 3
	movq	-128(%rbp), %rax	# y, tmp243
	movq	8(%rax), %rdx	# y_26->fld[0].rtx, D.25628
	movl	target_flags(%rip), %eax	# target_flags, target_flags.154
	andl	$33554432, %eax	#, D.25624
	testl	%eax, %eax	# D.25624
	je	.L270	#,
	.loc 1 1730 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.153
	jmp	.L271	#
.L270:
	.loc 1 1730 0 discriminator 2
	movl	$4, %eax	#, iftmp.153
.L271:
	.loc 1 1730 0 discriminator 3
	movq	%rdx, %rsi	# D.25628,
	movl	%eax, %edi	# iftmp.153,
	call	copy_to_mode_reg	#
	movq	%rax, -128(%rbp)	# tmp244, y
	.loc 1 1733 0 is_stmt 1 discriminator 3
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25629
	movzbl	61(%rax), %eax	# *_103, tmp247
	shrb	%al	# D.25630
	movzbl	%al, %eax	# D.25630, D.25631
	movq	-136(%rbp), %rdx	# size, tmp248
	movq	%rdx, %rsi	# tmp248,
	movl	%eax, %edi	# D.25631,
	call	copy_to_mode_reg	#
	movq	%rax, -136(%rbp)	# tmp249, size
	.loc 1 1752 0 discriminator 3
	movq	fn.14350(%rip), %rax	# fn, fn.155
	testq	%rax, %rax	# fn.155
	jne	.L272	#,
.LBB23:
	.loc 1 1758 0
	movl	$.LC1, %edi	#,
	call	get_identifier	#
	movq	%rax, fn.14350(%rip)	# fn.156, fn
	.loc 1 1759 0
	movq	global_trees+216(%rip), %rax	# global_trees, D.25629
	movq	%rax, %rdi	# D.25629,
	call	build_pointer_type	#
	movq	%rax, -40(%rbp)	# tmp250, fntype
	.loc 1 1760 0
	movq	-40(%rbp), %rax	# fntype, tmp251
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp251,
	call	build_function_type	#
	movq	%rax, -40(%rbp)	# tmp252, fntype
	.loc 1 1761 0
	movq	fn.14350(%rip), %rax	# fn, fn.157
	movq	-40(%rbp), %rdx	# fntype, tmp253
	movq	%rax, %rsi	# fn.157,
	movl	$30, %edi	#,
	call	build_decl	#
	movq	%rax, fn.14350(%rip)	# fn.158, fn
	.loc 1 1762 0
	movl	$1, %esi	#,
	movl	$fn.14350, %edi	#,
	call	ggc_add_tree_root	#
	.loc 1 1763 0
	movq	fn.14350(%rip), %rax	# fn, fn.159
	movzbl	49(%rax), %edx	#, tmp256
	orl	$1, %edx	#, tmp257
	movb	%dl, 49(%rax)	# tmp257,
	.loc 1 1764 0
	movq	fn.14350(%rip), %rax	# fn, fn.160
	movzbl	18(%rax), %edx	#, tmp260
	orl	$8, %edx	#, tmp261
	movb	%dl, 18(%rax)	# tmp261,
	.loc 1 1765 0
	movq	fn.14350(%rip), %rax	# fn, fn.161
	movzbl	50(%rax), %edx	#, tmp264
	orl	$64, %edx	#, tmp265
	movb	%dl, 50(%rax)	# tmp265,
	.loc 1 1766 0
	movq	fn.14350(%rip), %rax	# fn, fn.162
	movzbl	18(%rax), %edx	#, tmp268
	orl	$2, %edx	#, tmp269
	movb	%dl, 18(%rax)	# tmp269,
	.loc 1 1767 0
	movq	fn.14350(%rip), %rax	# fn, fn.163
	movl	$0, %esi	#,
	movq	%rax, %rdi	# fn.163,
	call	make_decl_rtl	#
	.loc 1 1768 0
	movq	fn.14350(%rip), %rax	# fn, fn.164
	movq	%rax, %rdi	# fn.164,
	call	assemble_external	#
.L272:
.LBE23:
	.loc 1 1776 0
	movq	global_trees+216(%rip), %rax	# global_trees, D.25629
	movq	%rax, %rdi	# D.25629,
	call	build_pointer_type	#
	movq	-120(%rbp), %rdx	# x, tmp270
	movq	%rdx, %rsi	# tmp270,
	movq	%rax, %rdi	# D.25629,
	call	make_tree	#
	movq	%rax, %rsi	# D.25629,
	movl	$0, %edi	#,
	call	build_tree_list	#
	movq	%rax, -32(%rbp)	# tmp271, arg_list
	.loc 1 1779 0
	movq	global_trees+216(%rip), %rax	# global_trees, D.25629
	movq	%rax, %rdi	# D.25629,
	call	build_pointer_type	#
	movq	-128(%rbp), %rdx	# y, tmp272
	movq	%rdx, %rsi	# tmp272,
	movq	%rax, %rdi	# D.25629,
	call	make_tree	#
	movq	%rax, %rsi	# D.25629,
	movl	$0, %edi	#,
	call	build_tree_list	#
	movq	-32(%rbp), %rdx	# arg_list, tmp273
	movq	%rax, (%rdx)	# D.25629, arg_list_123->common.chain
	.loc 1 1781 0
	movq	-32(%rbp), %rax	# arg_list, tmp274
	movq	(%rax), %rbx	# arg_list_123->common.chain, D.25629
	.loc 1 1782 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25629
	movq	-136(%rbp), %rdx	# size, tmp275
	movq	%rdx, %rsi	# tmp275,
	movq	%rax, %rdi	# D.25629,
	call	make_tree	#
	movq	%rax, %rsi	# D.25629,
	movl	$0, %edi	#,
	call	build_tree_list	#
	movq	%rax, (%rbx)	# D.25629, _128->common.chain
	.loc 1 1783 0
	movq	-32(%rbp), %rax	# arg_list, tmp276
	movq	(%rax), %rax	# arg_list_123->common.chain, D.25629
	movq	(%rax), %rax	# _132->common.chain, D.25629
	movq	$0, (%rax)	#, _133->common.chain
	.loc 1 1786 0
	movq	fn.14350(%rip), %rbx	# fn, fn.165
	movq	fn.14350(%rip), %rax	# fn, fn.166
	movq	8(%rax), %rax	# fn.166_135->common.type, D.25629
	movq	%rax, %rdi	# D.25629,
	call	build_pointer_type	#
	movq	%rbx, %rdx	# fn.165,
	movq	%rax, %rsi	# D.25629,
	movl	$121, %edi	#,
	call	build1	#
	movq	%rax, -24(%rbp)	# tmp277, call_expr
	.loc 1 1787 0
	movq	fn.14350(%rip), %rax	# fn, fn.167
	movq	8(%rax), %rax	# fn.167_139->common.type, D.25629
	movq	8(%rax), %rax	# _140->common.type, D.25629
	movq	-32(%rbp), %rcx	# arg_list, tmp278
	movq	-24(%rbp), %rdx	# call_expr, tmp279
	movl	$0, %r8d	#,
	movq	%rax, %rsi	# D.25629,
	movl	$53, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -24(%rbp)	# tmp280, call_expr
	.loc 1 1789 0
	movq	-24(%rbp), %rax	# call_expr, tmp281
	movzbl	17(%rax), %edx	#, tmp284
	orl	$1, %edx	#, tmp285
	movb	%dl, 17(%rax)	# tmp285,
	.loc 1 1791 0
	movq	-24(%rbp), %rax	# call_expr, tmp286
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp286,
	call	expand_expr	#
	movq	%rax, -88(%rbp)	# tmp287, retval
	.loc 1 1803 0
	movq	-120(%rbp), %rax	# x, tmp288
	movzbl	3(%rax), %eax	# *x_96, D.25620
	andl	$4, %eax	#, D.25620
	testb	%al, %al	# D.25620
	je	.L254	#,
	.loc 1 1804 0
	movq	-120(%rbp), %rax	# x, tmp289
	movq	%rax, %rdx	# tmp289,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdi	# D.25628,
	call	emit_insn	#
.L254:
.LBE20:
	.loc 1 1807 0
	movq	-88(%rbp), %rax	# retval, D.25618
.L266:
	.loc 1 1808 0
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE17:
	.size	emit_block_move, .-emit_block_move
	.globl	move_block_to_reg
	.type	move_block_to_reg, @function
move_block_to_reg:
.LFB18:
	.loc 1 1819 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# regno, regno
	movq	%rsi, -48(%rbp)	# x, x
	movl	%edx, -40(%rbp)	# nregs, nregs
	movl	%ecx, -52(%rbp)	# mode, mode
	.loc 1 1826 0
	cmpl	$0, -40(%rbp)	#, nregs
	jne	.L274	#,
	.loc 1 1827 0
	jmp	.L273	#
.L274:
	.loc 1 1849 0
	movl	$0, -20(%rbp)	#, i
	jmp	.L276	#
.L277:
	.loc 1 1850 0 discriminator 2
	movl	-20(%rbp), %ecx	# i, i.168
	movl	-52(%rbp), %edx	# mode, tmp64
	movq	-48(%rbp), %rax	# x, tmp65
	movl	%ecx, %esi	# i.168,
	movq	%rax, %rdi	# tmp65,
	call	operand_subword_force	#
	movq	%rax, %rbx	#, D.25633
	movl	-20(%rbp), %eax	# i, tmp66
	movl	-36(%rbp), %edx	# regno, tmp67
	addl	%eax, %edx	# tmp66, D.25634
	movl	word_mode(%rip), %eax	# word_mode, word_mode.169
	movl	%edx, %esi	# D.25634,
	movl	%eax, %edi	# word_mode.169,
	call	gen_rtx_REG	#
	movq	%rbx, %rsi	# D.25633,
	movq	%rax, %rdi	# D.25633,
	call	emit_move_insn	#
	.loc 1 1849 0 discriminator 2
	addl	$1, -20(%rbp)	#, i
.L276:
	.loc 1 1849 0 is_stmt 0 discriminator 1
	movl	-20(%rbp), %eax	# i, tmp68
	cmpl	-40(%rbp), %eax	# nregs, tmp68
	jl	.L277	#,
.L273:
	.loc 1 1852 0 is_stmt 1
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE18:
	.size	move_block_to_reg, .-move_block_to_reg
	.globl	move_block_from_reg
	.type	move_block_from_reg, @function
move_block_from_reg:
.LFB19:
	.loc 1 1864 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# regno, regno
	movq	%rsi, -48(%rbp)	# x, x
	movl	%edx, -40(%rbp)	# nregs, nregs
	movl	%ecx, -52(%rbp)	# size, size
	.loc 1 1872 0
	cmpl	$0, -40(%rbp)	#, nregs
	jne	.L279	#,
	.loc 1 1873 0
	jmp	.L278	#
.L279:
	.loc 1 1877 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.171
	andl	$33554432, %eax	#, D.25635
	testl	%eax, %eax	# D.25635
	je	.L281	#,
	.loc 1 1877 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.170
	jmp	.L282	#
.L281:
	.loc 1 1877 0 discriminator 2
	movl	$4, %eax	#, iftmp.170
.L282:
	.loc 1 1877 0 discriminator 3
	cmpl	-52(%rbp), %eax	# size, iftmp.170
	jl	.L283	#,
	.loc 1 1878 0 is_stmt 1
	movl	-52(%rbp), %eax	# size, tmp70
	sall	$3, %eax	#, D.25635
	movl	$0, %edx	#,
	movl	$1, %esi	#,
	movl	%eax, %edi	# D.25636,
	call	mode_for_size	#
	movl	%eax, -28(%rbp)	# tmp71, mode
	cmpl	$51, -28(%rbp)	#, mode
	je	.L283	#,
	.loc 1 1881 0
	movl	-36(%rbp), %edx	# regno, tmp72
	movl	-28(%rbp), %eax	# mode, tmp73
	movl	%edx, %esi	# tmp72,
	movl	%eax, %edi	# tmp73,
	call	gen_rtx_REG	#
	movq	%rax, %rbx	#, D.25637
	movl	-28(%rbp), %esi	# mode, tmp74
	movq	-48(%rbp), %rax	# x, tmp75
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp75,
	call	adjust_address_1	#
	movq	%rbx, %rsi	# D.25637,
	movq	%rax, %rdi	# D.25637,
	call	emit_move_insn	#
	.loc 1 1882 0
	jmp	.L278	#
.L283:
	.loc 1 1923 0
	movl	$0, -32(%rbp)	#, i
	jmp	.L284	#
.L286:
.LBB24:
	.loc 1 1925 0
	movl	-32(%rbp), %esi	# i, i.176
	movq	-48(%rbp), %rax	# x, tmp76
	movl	$51, %ecx	#,
	movl	$1, %edx	#,
	movq	%rax, %rdi	# tmp76,
	call	operand_subword	#
	movq	%rax, -24(%rbp)	# tmp77, tem
	.loc 1 1927 0
	cmpq	$0, -24(%rbp)	#, tem
	jne	.L285	#,
	.loc 1 1928 0
	movl	$__FUNCTION__.14386, %edx	#,
	movl	$1928, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L285:
	.loc 1 1930 0
	movl	-32(%rbp), %eax	# i, tmp78
	movl	-36(%rbp), %edx	# regno, tmp79
	addl	%eax, %edx	# tmp78, D.25635
	movl	word_mode(%rip), %eax	# word_mode, word_mode.177
	movl	%edx, %esi	# D.25635,
	movl	%eax, %edi	# word_mode.177,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.25637
	movq	-24(%rbp), %rax	# tem, tmp80
	movq	%rdx, %rsi	# D.25637,
	movq	%rax, %rdi	# tmp80,
	call	emit_move_insn	#
.LBE24:
	.loc 1 1923 0
	addl	$1, -32(%rbp)	#, i
.L284:
	.loc 1 1923 0 is_stmt 0 discriminator 1
	movl	-32(%rbp), %eax	# i, tmp81
	cmpl	-40(%rbp), %eax	# nregs, tmp81
	jl	.L286	#,
.L278:
	.loc 1 1932 0 is_stmt 1
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE19:
	.size	move_block_from_reg, .-move_block_from_reg
	.globl	emit_group_load
	.type	emit_group_load, @function
emit_group_load:
.LFB20:
	.loc 1 1948 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# dst, dst
	movq	%rsi, -96(%rbp)	# orig_src, orig_src
	movl	%edx, -100(%rbp)	# ssize, ssize
	.loc 1 1952 0
	movq	-88(%rbp), %rax	# dst, tmp251
	movzwl	(%rax), %eax	# dst_8(D)->code, D.25638
	cmpw	$39, %ax	#, D.25638
	je	.L288	#,
	.loc 1 1953 0
	movl	$__FUNCTION__.14400, %edx	#,
	movl	$1953, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L288:
	.loc 1 1957 0
	movq	-88(%rbp), %rax	# dst, tmp252
	movq	8(%rax), %rax	# dst_8(D)->fld[0].rtvec, D.25639
	movq	8(%rax), %rax	# _10->elem, D.25640
	movq	8(%rax), %rax	# _11->fld[0].rtx, D.25640
	testq	%rax, %rax	# D.25640
	je	.L289	#,
	.loc 1 1958 0
	movl	$0, -68(%rbp)	#, start
	jmp	.L290	#
.L289:
	.loc 1 1960 0
	movl	$1, -68(%rbp)	#, start
.L290:
	.loc 1 1962 0
	movq	-88(%rbp), %rax	# dst, tmp253
	movq	8(%rax), %rax	# dst_8(D)->fld[0].rtvec, D.25639
	movl	(%rax), %eax	# _15->num_elem, D.25641
	cltq
	salq	$3, %rax	#, D.25642
	leaq	15(%rax), %rdx	#, tmp254
	movl	$16, %eax	#, tmp396
	subq	$1, %rax	#, tmp255
	addq	%rdx, %rax	# tmp254, tmp256
	movl	$16, %ebx	#, tmp397
	movl	$0, %edx	#, tmp259
	divq	%rbx	# tmp397
	imulq	$16, %rax, %rax	#, tmp258, tmp260
	subq	%rax, %rsp	# tmp260,
	leaq	16(%rsp), %rax	#, tmp261
	addq	$15, %rax	#, tmp262
	shrq	$4, %rax	#, tmp263
	salq	$4, %rax	#, tmp264
	movq	%rax, -40(%rbp)	# tmp264, tmps
	.loc 1 1965 0
	movl	-68(%rbp), %eax	# start, tmp265
	movl	%eax, -64(%rbp)	# tmp265, i
	jmp	.L291	#
.L312:
.LBB25:
	.loc 1 1967 0
	movq	-88(%rbp), %rax	# dst, tmp266
	movq	8(%rax), %rax	# dst_8(D)->fld[0].rtvec, D.25639
	movl	-64(%rbp), %edx	# i, tmp268
	movslq	%edx, %rdx	# tmp268, tmp267
	movq	8(%rax,%rdx,8), %rax	# _23->elem, D.25640
	movq	8(%rax), %rax	# _24->fld[0].rtx, D.25640
	movzbl	2(%rax), %eax	# _25->mode, D.25643
	movzbl	%al, %eax	# D.25643, tmp269
	movl	%eax, -56(%rbp)	# tmp269, mode
	.loc 1 1968 0
	movq	-88(%rbp), %rax	# dst, tmp270
	movq	8(%rax), %rax	# dst_8(D)->fld[0].rtvec, D.25639
	movl	-64(%rbp), %edx	# i, tmp272
	movslq	%edx, %rdx	# tmp272, tmp271
	movq	8(%rax,%rdx,8), %rax	# _28->elem, D.25640
	movq	16(%rax), %rax	# _29->fld[1].rtx, D.25640
	movq	8(%rax), %rax	# _30->fld[0].rtwint, tmp273
	movq	%rax, -32(%rbp)	# tmp273, bytepos
	.loc 1 1969 0
	movl	-56(%rbp), %eax	# mode, mode.178
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25643
	movzbl	%al, %eax	# D.25643, tmp275
	movl	%eax, -60(%rbp)	# tmp275, bytelen
	.loc 1 1970 0
	movl	$0, -52(%rbp)	#, shift
	.loc 1 1973 0
	cmpl	$0, -100(%rbp)	#, ssize
	js	.L292	#,
	.loc 1 1973 0 is_stmt 0 discriminator 1
	movl	-60(%rbp), %edx	# bytelen, D.25644
	movq	-32(%rbp), %rax	# bytepos, tmp276
	addq	%rax, %rdx	# tmp276, D.25644
	movl	-100(%rbp), %eax	# ssize, tmp277
	cltq
	cmpq	%rax, %rdx	# D.25644, D.25644
	jle	.L292	#,
	.loc 1 1975 0 is_stmt 1
	movl	-60(%rbp), %eax	# bytelen, D.25644
	movl	-100(%rbp), %edx	# ssize, tmp278
	movslq	%edx, %rdx	# tmp278, D.25644
	movq	-32(%rbp), %rcx	# bytepos, tmp279
	subq	%rdx, %rcx	# D.25644, D.25644
	movq	%rcx, %rdx	# D.25644, D.25644
	addq	%rdx, %rax	# D.25644, D.25644
	sall	$3, %eax	#, D.25645
	movl	%eax, -52(%rbp)	# D.25645, shift
	.loc 1 1976 0
	movl	-100(%rbp), %edx	# ssize, ssize.179
	movq	-32(%rbp), %rax	# bytepos, tmp280
	subl	%eax, %edx	# D.25646, tmp281
	movl	%edx, %eax	# tmp281, tmp281
	movl	%eax, -60(%rbp)	# tmp281, bytelen
	.loc 1 1977 0
	cmpl	$0, -60(%rbp)	#, bytelen
	jne	.L292	#,
	.loc 1 1978 0
	movl	$__FUNCTION__.14400, %edx	#,
	movl	$1978, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L292:
	.loc 1 1984 0
	movq	-96(%rbp), %rax	# orig_src, tmp282
	movq	%rax, -48(%rbp)	# tmp282, src
	.loc 1 1985 0
	movq	-96(%rbp), %rax	# orig_src, tmp283
	movzwl	(%rax), %eax	# orig_src_50(D)->code, D.25638
	cmpw	$66, %ax	#, D.25638
	je	.L293	#,
	.loc 1 1986 0
	movq	-96(%rbp), %rax	# orig_src, tmp284
	movzwl	(%rax), %eax	# orig_src_50(D)->code, D.25638
	cmpw	$67, %ax	#, D.25638
	je	.L294	#,
	.loc 1 1986 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# orig_src, tmp285
	movzwl	(%rax), %eax	# orig_src_50(D)->code, D.25638
	cmpw	$68, %ax	#, D.25638
	je	.L294	#,
	movq	-96(%rbp), %rax	# orig_src, tmp286
	movzwl	(%rax), %eax	# orig_src_50(D)->code, D.25638
	cmpw	$54, %ax	#, D.25638
	je	.L294	#,
	movq	-96(%rbp), %rax	# orig_src, tmp287
	movzwl	(%rax), %eax	# orig_src_50(D)->code, D.25638
	cmpw	$55, %ax	#, D.25638
	je	.L294	#,
	movq	-96(%rbp), %rax	# orig_src, tmp288
	movzwl	(%rax), %eax	# orig_src_50(D)->code, D.25638
	cmpw	$58, %ax	#, D.25638
	je	.L294	#,
	movq	-96(%rbp), %rax	# orig_src, tmp289
	movzwl	(%rax), %eax	# orig_src_50(D)->code, D.25638
	cmpw	$134, %ax	#, D.25638
	je	.L294	#,
	movq	-96(%rbp), %rax	# orig_src, tmp290
	movzwl	(%rax), %eax	# orig_src_50(D)->code, D.25638
	cmpw	$56, %ax	#, D.25638
	je	.L294	#,
	movq	-96(%rbp), %rax	# orig_src, tmp291
	movzwl	(%rax), %eax	# orig_src_50(D)->code, D.25638
	cmpw	$140, %ax	#, D.25638
	jne	.L295	#,
.L294:
	.loc 1 1987 0 is_stmt 1
	movq	-96(%rbp), %rax	# orig_src, tmp292
	movzbl	2(%rax), %eax	# orig_src_50(D)->mode, D.25643
	movzbl	%al, %eax	# D.25643, D.25646
	cmpl	-56(%rbp), %eax	# mode, D.25646
	je	.L293	#,
	.loc 1 1988 0
	movq	-96(%rbp), %rax	# orig_src, tmp293
	movzbl	2(%rax), %eax	# orig_src_50(D)->mode, D.25643
	testb	%al, %al	# D.25643
	je	.L293	#,
.L295:
	.loc 1 1990 0
	movq	-96(%rbp), %rax	# orig_src, tmp294
	movzbl	2(%rax), %eax	# orig_src_50(D)->mode, D.25643
	testb	%al, %al	# D.25643
	jne	.L296	#,
	.loc 1 1991 0
	movl	-56(%rbp), %eax	# mode, tmp295
	movl	%eax, %edi	# tmp295,
	call	gen_reg_rtx	#
	movq	%rax, -48(%rbp)	# tmp296, src
	jmp	.L297	#
.L296:
	.loc 1 1993 0
	movq	-96(%rbp), %rax	# orig_src, tmp297
	movzbl	2(%rax), %eax	# orig_src_50(D)->mode, D.25643
	movzbl	%al, %eax	# D.25643, D.25647
	movl	%eax, %edi	# D.25647,
	call	gen_reg_rtx	#
	movq	%rax, -48(%rbp)	# tmp298, src
.L297:
	.loc 1 1995 0
	movq	-96(%rbp), %rdx	# orig_src, tmp299
	movq	-48(%rbp), %rax	# src, tmp300
	movq	%rdx, %rsi	# tmp299,
	movq	%rax, %rdi	# tmp300,
	call	emit_move_insn	#
.L293:
	.loc 1 1999 0
	movq	-48(%rbp), %rax	# src, tmp301
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$66, %ax	#, D.25638
	jne	.L298	#,
	.loc 1 2000 0
	movq	-48(%rbp), %rax	# src, tmp302
	movq	16(%rax), %rax	# src_2->fld[1].rtmem, D.25648
	testq	%rax, %rax	# D.25648
	je	.L299	#,
	.loc 1 2000 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# src, tmp303
	movq	16(%rax), %rax	# src_2->fld[1].rtmem, D.25648
	movl	32(%rax), %ebx	# _71->align, iftmp.180
	jmp	.L300	#
.L299:
	.loc 1 2000 0 discriminator 2
	movl	$8, %ebx	#, iftmp.180
.L300:
	.loc 1 2000 0 discriminator 3
	movl	-56(%rbp), %eax	# mode, tmp304
	movl	%eax, %edi	# tmp304,
	call	get_mode_alignment	#
	cmpl	%eax, %ebx	# D.25646, iftmp.180
	jb	.L298	#,
	.loc 1 2001 0 is_stmt 1
	movq	-32(%rbp), %rax	# bytepos, tmp305
	leaq	0(,%rax,8), %rbx	#, D.25644
	movl	-56(%rbp), %eax	# mode, tmp306
	movl	%eax, %edi	# tmp306,
	call	get_mode_alignment	#
	movl	%eax, %ecx	# D.25646, D.25644
	movq	%rbx, %rax	# D.25644, tmp308
	cqto
	idivq	%rcx	# D.25644
	movq	%rdx, %rax	# tmp307, D.25644
	testq	%rax, %rax	# D.25644
	jne	.L298	#,
	.loc 1 2002 0
	movl	-56(%rbp), %eax	# mode, mode.181
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25643
	movzbl	%al, %eax	# D.25643, D.25646
	cmpl	-60(%rbp), %eax	# bytelen, D.25646
	jne	.L298	#,
	.loc 1 2004 0
	movl	-64(%rbp), %eax	# i, tmp310
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp311
	leaq	(%rdx,%rax), %rbx	#, D.25649
	movl	-56(%rbp), %eax	# mode, tmp312
	movl	%eax, %edi	# tmp312,
	call	gen_reg_rtx	#
	movq	%rax, (%rbx)	# D.25640, *_84
	.loc 1 2005 0
	movq	-32(%rbp), %rdx	# bytepos, tmp313
	movl	-56(%rbp), %esi	# mode, tmp314
	movq	-48(%rbp), %rax	# src, tmp315
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp315,
	call	adjust_address_1	#
	movq	%rax, %rdx	#, D.25640
	movl	-64(%rbp), %eax	# i, tmp316
	cltq
	leaq	0(,%rax,8), %rcx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp317
	addq	%rcx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_89, D.25640
	movq	%rdx, %rsi	# D.25640,
	movq	%rax, %rdi	# D.25640,
	call	emit_move_insn	#
	jmp	.L301	#
.L298:
	.loc 1 2007 0
	movq	-48(%rbp), %rax	# src, tmp318
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$65, %ax	#, D.25638
	jne	.L302	#,
	.loc 1 2009 0
	cmpq	$0, -32(%rbp)	#, bytepos
	jne	.L303	#,
	.loc 1 2010 0
	movq	-48(%rbp), %rax	# src, tmp319
	movq	8(%rax), %rax	# src_2->fld[0].rtx, D.25640
	movzbl	2(%rax), %eax	# _92->mode, D.25643
	movzbl	%al, %eax	# D.25643, D.25641
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25643
	movzbl	%al, %eax	# D.25643, D.25646
	cmpl	-60(%rbp), %eax	# bytelen, D.25646
	je	.L304	#,
.L303:
	.loc 1 2011 0
	movq	-48(%rbp), %rax	# src, tmp321
	movq	8(%rax), %rax	# src_2->fld[0].rtx, D.25640
	movzbl	2(%rax), %eax	# _97->mode, D.25643
	movzbl	%al, %eax	# D.25643, D.25641
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25643
	movzbl	%al, %eax	# D.25643, D.25644
	cmpq	-32(%rbp), %rax	# bytepos, D.25644
	jne	.L305	#,
	.loc 1 2012 0
	movq	-48(%rbp), %rax	# src, tmp323
	movq	16(%rax), %rax	# src_2->fld[1].rtx, D.25640
	movzbl	2(%rax), %eax	# _102->mode, D.25643
	movzbl	%al, %eax	# D.25643, D.25641
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25643
	movzbl	%al, %eax	# D.25643, D.25646
	cmpl	-60(%rbp), %eax	# bytelen, D.25646
	jne	.L305	#,
.L304:
	.loc 1 2014 0
	movl	-64(%rbp), %eax	# i, tmp325
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp326
	leaq	(%rdx,%rax), %rcx	#, D.25649
	cmpq	$0, -32(%rbp)	#, bytepos
	setne	%al	#, D.25650
	movzbl	%al, %edx	# D.25650, D.25641
	movq	-48(%rbp), %rax	# src, tmp327
	movslq	%edx, %rdx	# D.25641, tmp328
	movq	8(%rax,%rdx,8), %rax	# src_2->fld[_122].rtx, D.25640
	movq	%rax, (%rcx)	# D.25640, *_120
	.loc 1 2015 0
	movl	-64(%rbp), %eax	# i, tmp329
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp330
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_126, D.25640
	movzwl	(%rax), %eax	# _127->code, D.25638
	cmpw	$67, %ax	#, D.25638
	je	.L306	#,
	.loc 1 2015 0 is_stmt 0 discriminator 1
	movl	-64(%rbp), %eax	# i, tmp331
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp332
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_131, D.25640
	movzwl	(%rax), %eax	# _132->code, D.25638
	cmpw	$68, %ax	#, D.25638
	je	.L306	#,
	movl	-64(%rbp), %eax	# i, tmp333
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp334
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_136, D.25640
	movzwl	(%rax), %eax	# _137->code, D.25638
	cmpw	$54, %ax	#, D.25638
	je	.L306	#,
	movl	-64(%rbp), %eax	# i, tmp335
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp336
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_141, D.25640
	movzwl	(%rax), %eax	# _142->code, D.25638
	cmpw	$55, %ax	#, D.25638
	je	.L306	#,
	movl	-64(%rbp), %eax	# i, tmp337
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp338
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_146, D.25640
	movzwl	(%rax), %eax	# _147->code, D.25638
	cmpw	$58, %ax	#, D.25638
	je	.L306	#,
	movl	-64(%rbp), %eax	# i, tmp339
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp340
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_151, D.25640
	movzwl	(%rax), %eax	# _152->code, D.25638
	cmpw	$134, %ax	#, D.25638
	je	.L306	#,
	movl	-64(%rbp), %eax	# i, tmp341
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp342
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_156, D.25640
	movzwl	(%rax), %eax	# _157->code, D.25638
	cmpw	$56, %ax	#, D.25638
	je	.L306	#,
	movl	-64(%rbp), %eax	# i, tmp343
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp344
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_161, D.25640
	movzwl	(%rax), %eax	# _162->code, D.25638
	cmpw	$140, %ax	#, D.25638
	je	.L306	#,
	.loc 1 2016 0 is_stmt 1
	movl	-64(%rbp), %eax	# i, tmp345
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp346
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_166, D.25640
	movzwl	(%rax), %eax	# _167->code, D.25638
	cmpw	$61, %ax	#, D.25638
	jne	.L307	#,
	.loc 1 2016 0 is_stmt 0 discriminator 1
	movl	-64(%rbp), %eax	# i, tmp347
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp348
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_171, D.25640
	movzbl	2(%rax), %eax	# _172->mode, D.25643
	movzbl	%al, %eax	# D.25643, D.25646
	cmpl	-56(%rbp), %eax	# mode, D.25646
	je	.L306	#,
.L307:
	.loc 1 2017 0 is_stmt 1
	movl	-64(%rbp), %eax	# i, tmp349
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp350
	leaq	(%rdx,%rax), %rbx	#, D.25649
	movl	-100(%rbp), %eax	# ssize, tmp351
	movslq	%eax, %rdx	# tmp351, D.25644
	movl	-60(%rbp), %eax	# bytelen, tmp352
	sall	$3, %eax	#, D.25646
	movl	%eax, %esi	# D.25646, D.25642
	movl	-64(%rbp), %eax	# i, tmp353
	cltq
	leaq	0(,%rax,8), %rcx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp354
	addq	%rcx, %rax	# D.25642, D.25649
	movq	(%rax), %rax	# *_183, D.25640
	movl	-56(%rbp), %ecx	# mode, tmp355
	movq	%rdx, 8(%rsp)	# D.25644,
	movl	-56(%rbp), %edx	# mode, tmp356
	movl	%edx, (%rsp)	# tmp356,
	movl	%ecx, %r9d	# tmp355,
	movl	$0, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25640,
	call	extract_bit_field	#
	movq	%rax, (%rbx)	# D.25640, *_177
	.loc 1 2015 0
	jmp	.L308	#
.L306:
	.loc 1 2015 0 is_stmt 0 discriminator 2
	jmp	.L308	#
.L305:
	.loc 1 2020 0 is_stmt 1
	cmpq	$0, -32(%rbp)	#, bytepos
	jne	.L309	#,
.LBB26:
	.loc 1 2023 0
	movq	-48(%rbp), %rax	# src, tmp357
	movzbl	2(%rax), %eax	# src_2->mode, D.25643
	movzbl	%al, %eax	# D.25643, D.25641
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25643
	.loc 1 2022 0
	movzbl	%al, %ecx	# D.25643, D.25644
	movq	-48(%rbp), %rax	# src, tmp359
	movzbl	2(%rax), %eax	# src_2->mode, D.25643
	movzbl	%al, %eax	# D.25643, D.25647
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25644,
	movl	%eax, %edi	# D.25647,
	call	assign_stack_temp	#
	movq	%rax, -24(%rbp)	# tmp360, mem
	.loc 1 2024 0
	movq	-48(%rbp), %rdx	# src, tmp361
	movq	-24(%rbp), %rax	# mem, tmp362
	movq	%rdx, %rsi	# tmp361,
	movq	%rax, %rdi	# tmp362,
	call	emit_move_insn	#
	.loc 1 2025 0
	movl	-64(%rbp), %eax	# i, tmp363
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp364
	leaq	(%rdx,%rax), %rbx	#, D.25649
	movl	-56(%rbp), %esi	# mode, tmp365
	movq	-24(%rbp), %rax	# mem, tmp366
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp366,
	call	adjust_address_1	#
	movq	%rax, (%rbx)	# D.25640, *_116
.LBE26:
	jmp	.L315	#
.L309:
	.loc 1 2028 0
	movl	$__FUNCTION__.14400, %edx	#,
	movl	$2028, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L308:
	jmp	.L315	#
.L302:
	.loc 1 2030 0
	movq	-48(%rbp), %rax	# src, tmp367
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$67, %ax	#, D.25638
	je	.L310	#,
	.loc 1 2030 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# src, tmp368
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$68, %ax	#, D.25638
	je	.L310	#,
	movq	-48(%rbp), %rax	# src, tmp369
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$54, %ax	#, D.25638
	je	.L310	#,
	movq	-48(%rbp), %rax	# src, tmp370
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$55, %ax	#, D.25638
	je	.L310	#,
	movq	-48(%rbp), %rax	# src, tmp371
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$58, %ax	#, D.25638
	je	.L310	#,
	movq	-48(%rbp), %rax	# src, tmp372
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$134, %ax	#, D.25638
	je	.L310	#,
	movq	-48(%rbp), %rax	# src, tmp373
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$56, %ax	#, D.25638
	je	.L310	#,
	movq	-48(%rbp), %rax	# src, tmp374
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$140, %ax	#, D.25638
	je	.L310	#,
	.loc 1 2031 0 is_stmt 1
	movq	-48(%rbp), %rax	# src, tmp375
	movzwl	(%rax), %eax	# src_2->code, D.25638
	cmpw	$61, %ax	#, D.25638
	jne	.L311	#,
	.loc 1 2031 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# src, tmp376
	movzbl	2(%rax), %eax	# src_2->mode, D.25643
	movzbl	%al, %eax	# D.25643, D.25646
	cmpl	-56(%rbp), %eax	# mode, D.25646
	jne	.L311	#,
.L310:
	.loc 1 2032 0 is_stmt 1
	movl	-64(%rbp), %eax	# i, tmp377
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp378
	addq	%rax, %rdx	# tmp378, D.25649
	movq	-48(%rbp), %rax	# src, tmp379
	movq	%rax, (%rdx)	# tmp379, *_208
	jmp	.L301	#
.L311:
	.loc 1 2034 0
	movl	-64(%rbp), %eax	# i, tmp380
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp381
	leaq	(%rdx,%rax), %rbx	#, D.25649
	movl	-100(%rbp), %eax	# ssize, tmp382
	movslq	%eax, %rcx	# tmp382, D.25644
	.loc 1 2035 0
	movq	-32(%rbp), %rax	# bytepos, tmp383
	salq	$3, %rax	#, D.25644
	.loc 1 2034 0
	movq	%rax, %rdx	# D.25644, D.25642
	movl	-60(%rbp), %eax	# bytelen, tmp384
	sall	$3, %eax	#, D.25646
	movl	%eax, %esi	# D.25646, D.25642
	movl	-56(%rbp), %edi	# mode, tmp385
	movq	-48(%rbp), %rax	# src, tmp386
	movq	%rcx, 8(%rsp)	# D.25644,
	movl	-56(%rbp), %ecx	# mode, tmp387
	movl	%ecx, (%rsp)	# tmp387,
	movl	%edi, %r9d	# tmp385,
	movl	$0, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp386,
	call	extract_bit_field	#
	movq	%rax, (%rbx)	# D.25640, *_199
	jmp	.L315	#
.L301:
.L315:
.LBE25:
	.loc 1 1965 0
	addl	$1, -64(%rbp)	#, i
.L291:
	.loc 1 1965 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# dst, tmp388
	movq	8(%rax), %rax	# dst_8(D)->fld[0].rtvec, D.25639
	movl	(%rax), %eax	# _21->num_elem, D.25641
	cmpl	-64(%rbp), %eax	# i, D.25641
	jg	.L312	#,
	.loc 1 2043 0 is_stmt 1
	call	emit_queue	#
	.loc 1 2046 0
	movl	-68(%rbp), %eax	# start, tmp389
	movl	%eax, -64(%rbp)	# tmp389, i
	jmp	.L313	#
.L314:
	.loc 1 2047 0 discriminator 2
	movl	-64(%rbp), %eax	# i, tmp390
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25642
	movq	-40(%rbp), %rax	# tmps, tmp391
	addq	%rdx, %rax	# D.25642, D.25649
	movq	(%rax), %rdx	# *_215, D.25640
	movq	-88(%rbp), %rax	# dst, tmp392
	movq	8(%rax), %rax	# dst_8(D)->fld[0].rtvec, D.25639
	movl	-64(%rbp), %ecx	# i, tmp394
	movslq	%ecx, %rcx	# tmp394, tmp393
	movq	8(%rax,%rcx,8), %rax	# _217->elem, D.25640
	movq	8(%rax), %rax	# _218->fld[0].rtx, D.25640
	movq	%rdx, %rsi	# D.25640,
	movq	%rax, %rdi	# D.25640,
	call	emit_move_insn	#
	.loc 1 2046 0 discriminator 2
	addl	$1, -64(%rbp)	#, i
.L313:
	.loc 1 2046 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# dst, tmp395
	movq	8(%rax), %rax	# dst_8(D)->fld[0].rtvec, D.25639
	movl	(%rax), %eax	# _211->num_elem, D.25641
	cmpl	-64(%rbp), %eax	# i, D.25641
	jg	.L314	#,
	.loc 1 2048 0 is_stmt 1
	movq	-8(%rbp), %rbx	#,
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE20:
	.size	emit_group_load, .-emit_group_load
	.globl	emit_group_store
	.type	emit_group_store, @function
emit_group_store:
.LFB21:
	.loc 1 2058 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# orig_dst, orig_dst
	movq	%rsi, -96(%rbp)	# src, src
	movl	%edx, -100(%rbp)	# ssize, ssize
	.loc 1 2062 0
	movq	-96(%rbp), %rax	# src, tmp153
	movzwl	(%rax), %eax	# src_9(D)->code, D.25652
	cmpw	$39, %ax	#, D.25652
	je	.L317	#,
	.loc 1 2063 0
	movl	$__FUNCTION__.14421, %edx	#,
	movl	$2063, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L317:
	.loc 1 2067 0
	movq	-96(%rbp), %rax	# src, tmp154
	movq	8(%rax), %rax	# src_9(D)->fld[0].rtvec, D.25653
	movq	8(%rax), %rax	# _11->elem, D.25654
	movq	8(%rax), %rax	# _12->fld[0].rtx, D.25654
	testq	%rax, %rax	# D.25654
	je	.L318	#,
	.loc 1 2068 0
	movl	$0, -80(%rbp)	#, start
	jmp	.L319	#
.L318:
	.loc 1 2070 0
	movl	$1, -80(%rbp)	#, start
.L319:
	.loc 1 2072 0
	movq	-96(%rbp), %rax	# src, tmp155
	movq	8(%rax), %rax	# src_9(D)->fld[0].rtvec, D.25653
	movl	(%rax), %eax	# _16->num_elem, D.25655
	cltq
	salq	$3, %rax	#, D.25656
	leaq	15(%rax), %rdx	#, tmp156
	movl	$16, %eax	#, tmp249
	subq	$1, %rax	#, tmp157
	addq	%rdx, %rax	# tmp156, tmp158
	movl	$16, %ebx	#, tmp250
	movl	$0, %edx	#, tmp161
	divq	%rbx	# tmp250
	imulq	$16, %rax, %rax	#, tmp160, tmp162
	subq	%rax, %rsp	# tmp162,
	movq	%rsp, %rax	#, tmp163
	addq	$15, %rax	#, tmp164
	shrq	$4, %rax	#, tmp165
	salq	$4, %rax	#, tmp166
	movq	%rax, -40(%rbp)	# tmp166, tmps
	.loc 1 2075 0
	movl	-80(%rbp), %eax	# start, tmp167
	movl	%eax, -76(%rbp)	# tmp167, i
	jmp	.L320	#
.L321:
.LBB27:
	.loc 1 2077 0 discriminator 2
	movq	-96(%rbp), %rax	# src, tmp168
	movq	8(%rax), %rax	# src_9(D)->fld[0].rtvec, D.25653
	movl	-76(%rbp), %edx	# i, tmp170
	movslq	%edx, %rdx	# tmp170, tmp169
	movq	8(%rax,%rdx,8), %rax	# _24->elem, D.25654
	movq	8(%rax), %rax	# _25->fld[0].rtx, tmp171
	movq	%rax, -32(%rbp)	# tmp171, reg
	.loc 1 2078 0 discriminator 2
	movl	-76(%rbp), %eax	# i, tmp172
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25656
	movq	-40(%rbp), %rax	# tmps, tmp173
	leaq	(%rdx,%rax), %rbx	#, D.25657
	movq	-32(%rbp), %rax	# reg, tmp174
	movzbl	2(%rax), %eax	# reg_26->mode, D.25658
	movzbl	%al, %eax	# D.25658, D.25659
	movl	%eax, %edi	# D.25659,
	call	gen_reg_rtx	#
	movq	%rax, (%rbx)	# D.25654, *_29
	.loc 1 2079 0 discriminator 2
	movl	-76(%rbp), %eax	# i, tmp175
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25656
	movq	-40(%rbp), %rax	# tmps, tmp176
	addq	%rdx, %rax	# D.25656, D.25657
	movq	(%rax), %rax	# *_35, D.25654
	movq	-32(%rbp), %rdx	# reg, tmp177
	movq	%rdx, %rsi	# tmp177,
	movq	%rax, %rdi	# D.25654,
	call	emit_move_insn	#
.LBE27:
	.loc 1 2075 0 discriminator 2
	addl	$1, -76(%rbp)	#, i
.L320:
	.loc 1 2075 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# src, tmp178
	movq	8(%rax), %rax	# src_9(D)->fld[0].rtvec, D.25653
	movl	(%rax), %eax	# _22->num_elem, D.25655
	cmpl	-76(%rbp), %eax	# i, D.25655
	jg	.L321	#,
	.loc 1 2081 0 is_stmt 1
	call	emit_queue	#
	.loc 1 2085 0
	movq	-88(%rbp), %rax	# orig_dst, tmp179
	movq	%rax, -64(%rbp)	# tmp179, dst
	.loc 1 2086 0
	movq	-64(%rbp), %rax	# dst, tmp180
	movzwl	(%rax), %eax	# dst_39->code, D.25652
	cmpw	$39, %ax	#, D.25652
	jne	.L322	#,
.LBB28:
	.loc 1 2093 0
	movq	-96(%rbp), %rdx	# src, tmp181
	movq	-64(%rbp), %rax	# dst, tmp182
	movq	%rdx, %rsi	# tmp181,
	movq	%rax, %rdi	# tmp182,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.25655
	je	.L323	#,
	.loc 1 2094 0
	jmp	.L316	#
.L323:
	.loc 1 2100 0
	movl	-100(%rbp), %eax	# ssize, tmp183
	movslq	%eax, %rcx	# tmp183, D.25660
	movq	-64(%rbp), %rax	# dst, tmp184
	movzbl	2(%rax), %eax	# dst_39->mode, D.25658
	movzbl	%al, %eax	# D.25658, D.25659
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25660,
	movl	%eax, %edi	# D.25659,
	call	assign_stack_temp	#
	movq	%rax, -24(%rbp)	# tmp185, temp
	.loc 1 2101 0
	movl	-100(%rbp), %edx	# ssize, tmp186
	movq	-96(%rbp), %rcx	# src, tmp187
	movq	-24(%rbp), %rax	# temp, tmp188
	movq	%rcx, %rsi	# tmp187,
	movq	%rax, %rdi	# tmp188,
	call	emit_group_store	#
	.loc 1 2102 0
	movl	-100(%rbp), %edx	# ssize, tmp189
	movq	-24(%rbp), %rcx	# temp, tmp190
	movq	-64(%rbp), %rax	# dst, tmp191
	movq	%rcx, %rsi	# tmp190,
	movq	%rax, %rdi	# tmp191,
	call	emit_group_load	#
	.loc 1 2103 0
	jmp	.L316	#
.L322:
.LBE28:
	.loc 1 2105 0
	movq	-64(%rbp), %rax	# dst, tmp192
	movzwl	(%rax), %eax	# dst_39->code, D.25652
	cmpw	$66, %ax	#, D.25652
	je	.L325	#,
	.loc 1 2105 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# dst, tmp193
	movzwl	(%rax), %eax	# dst_39->code, D.25652
	cmpw	$65, %ax	#, D.25652
	je	.L325	#,
	.loc 1 2107 0 is_stmt 1
	movq	-88(%rbp), %rax	# orig_dst, tmp194
	movzbl	2(%rax), %eax	# orig_dst_38(D)->mode, D.25658
	movzbl	%al, %eax	# D.25658, D.25659
	movl	%eax, %edi	# D.25659,
	call	gen_reg_rtx	#
	movq	%rax, -64(%rbp)	# tmp195, dst
	.loc 1 2109 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.25654
	movq	-64(%rbp), %rax	# dst, tmp196
	movq	%rdx, %rsi	# D.25654,
	movq	%rax, %rdi	# tmp196,
	call	emit_move_insn	#
.L325:
	.loc 1 2113 0
	movl	-80(%rbp), %eax	# start, tmp197
	movl	%eax, -76(%rbp)	# tmp197, i
	jmp	.L326	#
.L335:
.LBB29:
	.loc 1 2115 0
	movq	-96(%rbp), %rax	# src, tmp198
	movq	8(%rax), %rax	# src_9(D)->fld[0].rtvec, D.25653
	movl	-76(%rbp), %edx	# i, tmp200
	movslq	%edx, %rdx	# tmp200, tmp199
	movq	8(%rax,%rdx,8), %rax	# _56->elem, D.25654
	movq	16(%rax), %rax	# _57->fld[1].rtx, D.25654
	movq	8(%rax), %rax	# _58->fld[0].rtwint, tmp201
	movq	%rax, -56(%rbp)	# tmp201, bytepos
	.loc 1 2116 0
	movl	-76(%rbp), %eax	# i, tmp202
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25656
	movq	-40(%rbp), %rax	# tmps, tmp203
	addq	%rdx, %rax	# D.25656, D.25657
	movq	(%rax), %rax	# *_62, D.25654
	movzbl	2(%rax), %eax	# _63->mode, D.25658
	movzbl	%al, %eax	# D.25658, tmp204
	movl	%eax, -68(%rbp)	# tmp204, mode
	.loc 1 2117 0
	movl	-68(%rbp), %eax	# mode, mode.182
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25658
	movzbl	%al, %eax	# D.25658, tmp206
	movl	%eax, -72(%rbp)	# tmp206, bytelen
	.loc 1 2118 0
	movq	-64(%rbp), %rax	# dst, tmp207
	movq	%rax, -48(%rbp)	# tmp207, dest
	.loc 1 2121 0
	cmpl	$0, -100(%rbp)	#, ssize
	js	.L327	#,
	.loc 1 2121 0 is_stmt 0 discriminator 1
	movl	-72(%rbp), %edx	# bytelen, D.25660
	movq	-56(%rbp), %rax	# bytepos, tmp208
	addq	%rax, %rdx	# tmp208, D.25660
	movl	-100(%rbp), %eax	# ssize, tmp209
	cltq
	cmpq	%rax, %rdx	# D.25660, D.25660
	jle	.L327	#,
	.loc 1 2129 0 is_stmt 1
	movl	-100(%rbp), %edx	# ssize, ssize.183
	movq	-56(%rbp), %rax	# bytepos, tmp210
	subl	%eax, %edx	# D.25661, tmp211
	movl	%edx, %eax	# tmp211, tmp211
	movl	%eax, -72(%rbp)	# tmp211, bytelen
.L327:
	.loc 1 2132 0
	movq	-64(%rbp), %rax	# dst, tmp212
	movzwl	(%rax), %eax	# dst_1->code, D.25652
	cmpw	$65, %ax	#, D.25652
	jne	.L328	#,
	.loc 1 2134 0
	movl	-72(%rbp), %edx	# bytelen, D.25660
	movq	-56(%rbp), %rax	# bytepos, tmp213
	addq	%rax, %rdx	# tmp213, D.25660
	movq	-64(%rbp), %rax	# dst, tmp214
	movq	8(%rax), %rax	# dst_1->fld[0].rtx, D.25654
	movzbl	2(%rax), %eax	# _79->mode, D.25658
	movzbl	%al, %eax	# D.25658, D.25655
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25658
	movzbl	%al, %eax	# D.25658, D.25660
	cmpq	%rax, %rdx	# D.25660, D.25660
	jg	.L329	#,
	.loc 1 2135 0
	movq	-64(%rbp), %rax	# dst, tmp216
	movq	8(%rax), %rax	# dst_1->fld[0].rtx, tmp217
	movq	%rax, -48(%rbp)	# tmp217, dest
	jmp	.L328	#
.L329:
	.loc 1 2136 0
	movq	-64(%rbp), %rax	# dst, tmp218
	movq	8(%rax), %rax	# dst_1->fld[0].rtx, D.25654
	movzbl	2(%rax), %eax	# _85->mode, D.25658
	movzbl	%al, %eax	# D.25658, D.25655
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25658
	movzbl	%al, %eax	# D.25658, D.25660
	cmpq	-56(%rbp), %rax	# bytepos, D.25660
	jg	.L330	#,
	.loc 1 2138 0
	movq	-64(%rbp), %rax	# dst, tmp220
	movq	8(%rax), %rax	# dst_1->fld[0].rtx, D.25654
	movzbl	2(%rax), %eax	# _90->mode, D.25658
	movzbl	%al, %eax	# D.25658, D.25655
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25658
	movzbl	%al, %eax	# D.25658, D.25660
	subq	%rax, -56(%rbp)	# D.25660, bytepos
	.loc 1 2139 0
	movq	-64(%rbp), %rax	# dst, tmp222
	movq	16(%rax), %rax	# dst_1->fld[1].rtx, tmp223
	movq	%rax, -48(%rbp)	# tmp223, dest
	jmp	.L328	#
.L330:
	.loc 1 2142 0
	movl	$__FUNCTION__.14421, %edx	#,
	movl	$2142, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L328:
	.loc 1 2146 0
	movq	-48(%rbp), %rax	# dest, tmp224
	movzwl	(%rax), %eax	# dest_7->code, D.25652
	cmpw	$66, %ax	#, D.25652
	jne	.L331	#,
	.loc 1 2147 0
	movq	-48(%rbp), %rax	# dest, tmp225
	movq	16(%rax), %rax	# dest_7->fld[1].rtmem, D.25662
	testq	%rax, %rax	# D.25662
	je	.L332	#,
	.loc 1 2147 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# dest, tmp226
	movq	16(%rax), %rax	# dest_7->fld[1].rtmem, D.25662
	movl	32(%rax), %ebx	# _99->align, iftmp.184
	jmp	.L333	#
.L332:
	.loc 1 2147 0 discriminator 2
	movl	$8, %ebx	#, iftmp.184
.L333:
	.loc 1 2147 0 discriminator 3
	movl	-68(%rbp), %eax	# mode, tmp227
	movl	%eax, %edi	# tmp227,
	call	get_mode_alignment	#
	cmpl	%eax, %ebx	# D.25661, iftmp.184
	jb	.L331	#,
	.loc 1 2148 0 is_stmt 1
	movq	-56(%rbp), %rax	# bytepos, tmp228
	leaq	0(,%rax,8), %rbx	#, D.25660
	movl	-68(%rbp), %eax	# mode, tmp229
	movl	%eax, %edi	# tmp229,
	call	get_mode_alignment	#
	movl	%eax, %ecx	# D.25661, D.25660
	movq	%rbx, %rax	# D.25660, tmp231
	cqto
	idivq	%rcx	# D.25660
	movq	%rdx, %rax	# tmp230, D.25660
	testq	%rax, %rax	# D.25660
	jne	.L331	#,
	.loc 1 2149 0
	movl	-68(%rbp), %eax	# mode, mode.185
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25658
	movzbl	%al, %eax	# D.25658, D.25661
	cmpl	-72(%rbp), %eax	# bytelen, D.25661
	jne	.L331	#,
	.loc 1 2150 0
	movl	-76(%rbp), %eax	# i, tmp233
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25656
	movq	-40(%rbp), %rax	# tmps, tmp234
	addq	%rdx, %rax	# D.25656, D.25657
	movq	(%rax), %rbx	# *_112, D.25654
	movq	-56(%rbp), %rdx	# bytepos, tmp235
	movl	-68(%rbp), %esi	# mode, tmp236
	movq	-48(%rbp), %rax	# dest, tmp237
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp237,
	call	adjust_address_1	#
	movq	%rbx, %rsi	# D.25654,
	movq	%rax, %rdi	# D.25654,
	call	emit_move_insn	#
	jmp	.L334	#
.L331:
	.loc 1 2152 0
	movl	-100(%rbp), %eax	# ssize, tmp238
	movslq	%eax, %r8	# tmp238, D.25660
	.loc 1 2153 0
	movl	-76(%rbp), %eax	# i, tmp239
	cltq
	leaq	0(,%rax,8), %rdx	#, D.25656
	movq	-40(%rbp), %rax	# tmps, tmp240
	addq	%rdx, %rax	# D.25656, D.25657
	.loc 1 2152 0
	movq	(%rax), %rdi	# *_118, D.25654
	movq	-56(%rbp), %rax	# bytepos, tmp241
	salq	$3, %rax	#, D.25660
	movq	%rax, %rdx	# D.25660, D.25656
	movl	-72(%rbp), %eax	# bytelen, tmp242
	sall	$3, %eax	#, D.25661
	movl	%eax, %esi	# D.25661, D.25656
	movl	-68(%rbp), %ecx	# mode, tmp243
	movq	-48(%rbp), %rax	# dest, tmp244
	movq	%r8, %r9	# D.25660,
	movq	%rdi, %r8	# D.25654,
	movq	%rax, %rdi	# tmp244,
	call	store_bit_field	#
.L334:
.LBE29:
	.loc 1 2113 0
	addl	$1, -76(%rbp)	#, i
.L326:
	.loc 1 2113 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# src, tmp245
	movq	8(%rax), %rax	# src_9(D)->fld[0].rtvec, D.25653
	movl	(%rax), %eax	# _54->num_elem, D.25655
	cmpl	-76(%rbp), %eax	# i, D.25655
	jg	.L335	#,
	.loc 1 2156 0 is_stmt 1
	call	emit_queue	#
	.loc 1 2159 0
	movq	-64(%rbp), %rax	# dst, tmp246
	movzwl	(%rax), %eax	# dst_1->code, D.25652
	cmpw	$61, %ax	#, D.25652
	jne	.L316	#,
	.loc 1 2160 0
	movq	-64(%rbp), %rdx	# dst, tmp247
	movq	-88(%rbp), %rax	# orig_dst, tmp248
	movq	%rdx, %rsi	# tmp247,
	movq	%rax, %rdi	# tmp248,
	call	emit_move_insn	#
.L316:
	.loc 1 2161 0
	movq	-8(%rbp), %rbx	#,
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE21:
	.size	emit_group_store, .-emit_group_store
	.globl	copy_blkmode_from_reg
	.type	copy_blkmode_from_reg, @function
copy_blkmode_from_reg:
.LFB22:
	.loc 1 2177 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# tgtblk, tgtblk
	movq	%rsi, -96(%rbp)	# srcreg, srcreg
	movq	%rdx, -104(%rbp)	# type, type
	.loc 1 2178 0
	movq	-104(%rbp), %rax	# type, tmp134
	movq	%rax, %rdi	# tmp134,
	call	int_size_in_bytes	#
	movq	%rax, -40(%rbp)	# D.25663, bytes
	.loc 1 2179 0
	movq	$0, -72(%rbp)	#, src
	movq	$0, -64(%rbp)	#, dst
	.loc 1 2180 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.187
	andl	$33554432, %eax	#, D.25664
	testl	%eax, %eax	# D.25664
	je	.L337	#,
	.loc 1 2180 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.186
	jmp	.L338	#
.L337:
	.loc 1 2180 0 discriminator 2
	movl	$32, %eax	#, iftmp.186
.L338:
	.loc 1 2180 0 discriminator 3
	movq	-104(%rbp), %rdx	# type, tmp135
	movl	64(%rdx), %edx	# type_20(D)->type.align, D.25665
	cmpl	%edx, %eax	# D.25665, iftmp.186
	cmova	%edx, %eax	# iftmp.186,, D.25665, D.25665
	movl	%eax, %eax	# D.25665, tmp195
	movq	%rax, -32(%rbp)	# tmp195, bitsize
	.loc 1 2181 0 is_stmt 1 discriminator 3
	movq	$0, -24(%rbp)	#, big_endian_correction
	.loc 1 2183 0 discriminator 3
	cmpq	$0, -88(%rbp)	#, tgtblk
	jne	.L339	#,
	.loc 1 2186 0
	movq	-104(%rbp), %rax	# type, tmp136
	movzbl	17(%rax), %eax	# *type_20(D), tmp139
	shrb	$4, %al	#, D.25666
	andl	$1, %eax	#, D.25666
	movzbl	%al, %edx	# D.25666, D.25664
	movq	-104(%rbp), %rax	# type, tmp140
	movzbl	17(%rax), %eax	# *type_20(D), tmp143
	shrb	$3, %al	#, D.25666
	andl	$1, %eax	#, D.25666
	movzbl	%al, %eax	# D.25666, D.25664
	addl	%eax, %eax	# D.25664
	orl	%eax, %edx	# D.25664, D.25664
	movq	-104(%rbp), %rax	# type, tmp144
	movzbl	62(%rax), %eax	# *type_20(D), tmp147
	shrb	$5, %al	#, D.25666
	andl	$1, %eax	#, D.25666
	movzbl	%al, %eax	# D.25666, D.25664
	sall	$2, %eax	#, D.25664
	orl	%eax, %edx	# D.25664, D.25664
	movq	-104(%rbp), %rax	# type, tmp148
	movzbl	16(%rax), %eax	# type_20(D)->common.code, D.25667
	cmpb	$20, %al	#, D.25667
	jne	.L340	#,
	.loc 1 2186 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# type, tmp149
	movq	8(%rax), %rax	# type_20(D)->common.type, D.25668
	testq	%rax, %rax	# D.25668
	je	.L340	#,
	.loc 1 2186 0 discriminator 3
	movl	$1, %eax	#, iftmp.188
	jmp	.L341	#
.L340:
	.loc 1 2186 0 discriminator 2
	movl	$0, %eax	#, iftmp.188
.L341:
	.loc 1 2186 0 discriminator 4
	sall	$3, %eax	#, D.25664
	orl	%edx, %eax	# D.25664, D.25664
	.loc 1 2185 0 is_stmt 1 discriminator 4
	orl	$1, %eax	#, D.25664
	movl	%eax, %edx	# D.25664, D.25664
	movq	-104(%rbp), %rax	# type, tmp150
	movl	%edx, %esi	# D.25664,
	movq	%rax, %rdi	# tmp150,
	call	build_qualified_type	#
	movl	$1, %ecx	#,
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25668,
	call	assign_temp	#
	movq	%rax, -88(%rbp)	# tmp151, tgtblk
	.loc 1 2189 0 discriminator 4
	movq	-88(%rbp), %rax	# tgtblk, tmp152
	movq	%rax, %rdi	# tmp152,
	call	preserve_temp_slots	#
.L339:
	.loc 1 2198 0
	movq	-96(%rbp), %rax	# srcreg, tmp153
	movzbl	2(%rax), %eax	# srcreg_53(D)->mode, D.25667
	cmpb	$51, %al	#, D.25667
	je	.L367	#,
	.loc 1 2199 0
	movq	-96(%rbp), %rax	# srcreg, tmp154
	movzbl	2(%rax), %eax	# srcreg_53(D)->mode, D.25667
	movzbl	%al, %eax	# D.25667, D.25664
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25667
	movzbl	%al, %edx	# D.25667, D.25664
	movl	target_flags(%rip), %eax	# target_flags, target_flags.190
	andl	$33554432, %eax	#, D.25664
	testl	%eax, %eax	# D.25664
	je	.L343	#,
	.loc 1 2199 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.189
	jmp	.L344	#
.L343:
	.loc 1 2199 0 discriminator 2
	movl	$4, %eax	#, iftmp.189
.L344:
	.loc 1 2199 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.189, D.25664
	jge	.L367	#,
	.loc 1 2204 0 is_stmt 1
	movq	-104(%rbp), %rax	# type, tmp156
	movzbl	17(%rax), %eax	# *type_20(D), tmp159
	shrb	$5, %al	#, D.25666
	andl	$1, %eax	#, D.25666
	movzbl	%al, %edx	# D.25666, D.25664
	movl	word_mode(%rip), %eax	# word_mode, word_mode.192
	movq	-96(%rbp), %rcx	# srcreg, tmp160
	movq	%rcx, %rsi	# tmp160,
	movl	%eax, %edi	# word_mode.192,
	call	convert_to_mode	#
	movq	%rax, -96(%rbp)	# tmp161, srcreg
.L367:
	.loc 1 2222 0
	movq	$0, -56(%rbp)	#, bitpos
	movq	-24(%rbp), %rax	# big_endian_correction, tmp162
	movq	%rax, -48(%rbp)	# tmp162, xbitpos
	jmp	.L345	#
.L365:
	.loc 1 2229 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.198
	andl	$33554432, %eax	#, D.25664
	testl	%eax, %eax	# D.25664
	je	.L346	#,
	.loc 1 2229 0 is_stmt 0 discriminator 1
	movl	$64, %ebx	#, iftmp.197
	jmp	.L347	#
.L346:
	.loc 1 2229 0 discriminator 2
	movl	$32, %ebx	#, iftmp.197
.L347:
	.loc 1 2229 0 discriminator 3
	movq	-48(%rbp), %rax	# xbitpos, tmp163
	movl	$0, %edx	#, tmp164
	divq	%rbx	# iftmp.197
	movq	%rdx, %rcx	# tmp164, tmp164
	movq	%rcx, %rax	# tmp164, D.25669
	testq	%rax, %rax	# D.25669
	je	.L348	#,
	.loc 1 2230 0 is_stmt 1
	movq	-48(%rbp), %rax	# xbitpos, tmp166
	cmpq	-24(%rbp), %rax	# big_endian_correction, tmp166
	jne	.L349	#,
.L348:
	.loc 1 2232 0
	movq	-96(%rbp), %rax	# srcreg, tmp167
	movzbl	2(%rax), %eax	# srcreg_2->mode, D.25667
	.loc 1 2231 0
	movzbl	%al, %esi	# D.25667, D.25670
	movl	target_flags(%rip), %eax	# target_flags, target_flags.200
	andl	$33554432, %eax	#, D.25664
	testl	%eax, %eax	# D.25664
	je	.L350	#,
	.loc 1 2231 0 is_stmt 0 discriminator 1
	movl	$64, %ebx	#, iftmp.199
	jmp	.L351	#
.L350:
	.loc 1 2231 0 discriminator 2
	movl	$32, %ebx	#, iftmp.199
.L351:
	.loc 1 2231 0 discriminator 3
	movq	-48(%rbp), %rax	# xbitpos, tmp170
	movl	$0, %edx	#, tmp169
	divq	%rbx	# iftmp.199
	movl	%eax, %ecx	# D.25669, D.25665
	movq	-96(%rbp), %rax	# srcreg, tmp171
	movl	%esi, %edx	# D.25670,
	movl	%ecx, %esi	# D.25665,
	movq	%rax, %rdi	# tmp171,
	call	operand_subword_force	#
	movq	%rax, -72(%rbp)	# tmp172, src
.L349:
	.loc 1 2236 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.202
	andl	$33554432, %eax	#, D.25664
	testl	%eax, %eax	# D.25664
	je	.L352	#,
	.loc 1 2236 0 is_stmt 0 discriminator 1
	movl	$64, %ebx	#, iftmp.201
	jmp	.L353	#
.L352:
	.loc 1 2236 0 discriminator 2
	movl	$32, %ebx	#, iftmp.201
.L353:
	.loc 1 2236 0 discriminator 3
	movq	-56(%rbp), %rax	# bitpos, tmp173
	movl	$0, %edx	#, tmp174
	divq	%rbx	# iftmp.201
	movq	%rdx, %rcx	# tmp174, tmp174
	movq	%rcx, %rax	# tmp174, D.25669
	testq	%rax, %rax	# D.25669
	jne	.L354	#,
	.loc 1 2237 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.204
	andl	$33554432, %eax	#, D.25664
	testl	%eax, %eax	# D.25664
	je	.L355	#,
	.loc 1 2237 0 is_stmt 0 discriminator 1
	movl	$64, %ebx	#, iftmp.203
	jmp	.L356	#
.L355:
	.loc 1 2237 0 discriminator 2
	movl	$32, %ebx	#, iftmp.203
.L356:
	.loc 1 2237 0 discriminator 3
	movq	-56(%rbp), %rax	# bitpos, tmp178
	movl	$0, %edx	#, tmp177
	divq	%rbx	# iftmp.203
	movl	%eax, %esi	# D.25669, D.25665
	movq	-88(%rbp), %rax	# tgtblk, tmp179
	movl	$51, %ecx	#,
	movl	$1, %edx	#,
	movq	%rax, %rdi	# tmp179,
	call	operand_subword	#
	movq	%rax, -64(%rbp)	# tmp180, dst
.L354:
	.loc 1 2246 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.206
	andl	$33554432, %eax	#, D.25664
	.loc 1 2241 0
	testl	%eax, %eax	# D.25664
	je	.L357	#,
	.loc 1 2241 0 is_stmt 0 discriminator 1
	movl	$64, %ebx	#, iftmp.205
	jmp	.L358	#
.L357:
	.loc 1 2241 0 discriminator 2
	movl	$32, %ebx	#, iftmp.205
.L358:
	.loc 1 2245 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.208
	andl	$33554432, %eax	#, D.25664
	.loc 1 2241 0 discriminator 3
	testl	%eax, %eax	# D.25664
	je	.L359	#,
	.loc 1 2241 0 is_stmt 0 discriminator 4
	movl	$64, %ecx	#, iftmp.207
	jmp	.L360	#
.L359:
	.loc 1 2241 0 discriminator 5
	movl	$32, %ecx	#, iftmp.207
.L360:
	.loc 1 2241 0 discriminator 6
	movl	word_mode(%rip), %edi	# word_mode, word_mode.209
	movl	word_mode(%rip), %r8d	# word_mode, word_mode.210
	.loc 1 2243 0 is_stmt 1 discriminator 6
	movl	target_flags(%rip), %eax	# target_flags, target_flags.212
	andl	$33554432, %eax	#, D.25664
	.loc 1 2241 0 discriminator 6
	testl	%eax, %eax	# D.25664
	je	.L361	#,
	.loc 1 2241 0 is_stmt 0 discriminator 7
	movl	$64, %esi	#, iftmp.211
	jmp	.L362	#
.L361:
	.loc 1 2241 0 discriminator 8
	movl	$32, %esi	#, iftmp.211
.L362:
	.loc 1 2241 0 discriminator 9
	movq	-48(%rbp), %rax	# xbitpos, tmp181
	movl	$0, %edx	#, tmp182
	divq	%rsi	# iftmp.211
	movq	%rdx, %rsi	# tmp182, tmp182
	movq	%rsi, %rdx	# tmp182, D.25669
	movq	-32(%rbp), %rsi	# bitsize, tmp184
	movq	-72(%rbp), %rax	# src, tmp185
	movq	%rcx, 8(%rsp)	# iftmp.207,
	movl	%edi, (%rsp)	# word_mode.209,
	movl	%r8d, %r9d	# word_mode.210,
	movl	$0, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp185,
	call	extract_bit_field	#
	movq	%rax, %rdi	#, D.25671
	movl	word_mode(%rip), %ecx	# word_mode, word_mode.213
	movl	target_flags(%rip), %eax	# target_flags, target_flags.215
	andl	$33554432, %eax	#, D.25664
	testl	%eax, %eax	# D.25664
	je	.L363	#,
	.loc 1 2241 0 discriminator 10
	movl	$64, %esi	#, iftmp.214
	jmp	.L364	#
.L363:
	.loc 1 2241 0 discriminator 11
	movl	$32, %esi	#, iftmp.214
.L364:
	.loc 1 2241 0 discriminator 12
	movq	-56(%rbp), %rax	# bitpos, tmp186
	movl	$0, %edx	#, tmp187
	divq	%rsi	# iftmp.214
	movq	%rdx, %rsi	# tmp187, tmp187
	movq	%rsi, %rdx	# tmp187, D.25669
	movq	-32(%rbp), %rsi	# bitsize, tmp189
	movq	-64(%rbp), %rax	# dst, tmp190
	movq	%rbx, %r9	# iftmp.205,
	movq	%rdi, %r8	# D.25671,
	movq	%rax, %rdi	# tmp190,
	call	store_bit_field	#
	.loc 1 2224 0 is_stmt 1 discriminator 12
	movq	-32(%rbp), %rax	# bitsize, tmp191
	addq	%rax, -56(%rbp)	# tmp191, bitpos
	movq	-32(%rbp), %rax	# bitsize, tmp192
	addq	%rax, -48(%rbp)	# tmp192, xbitpos
.L345:
	.loc 1 2223 0 discriminator 1
	movq	-40(%rbp), %rax	# bytes, tmp193
	salq	$3, %rax	#, D.25669
	.loc 1 2222 0 discriminator 1
	cmpq	-56(%rbp), %rax	# bitpos, D.25669
	ja	.L365	#,
	.loc 1 2249 0
	movq	-88(%rbp), %rax	# tgtblk, D.25672
	.loc 1 2250 0
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE22:
	.size	copy_blkmode_from_reg, .-copy_blkmode_from_reg
	.globl	use_reg
	.type	use_reg, @function
use_reg:
.LFB23:
	.loc 1 2258 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# call_fusage, call_fusage
	movq	%rsi, -32(%rbp)	# reg, reg
	.loc 1 2259 0
	movq	-32(%rbp), %rax	# reg, tmp64
	movzwl	(%rax), %eax	# reg_1(D)->code, D.25673
	cmpw	$61, %ax	#, D.25673
	jne	.L369	#,
	.loc 1 2260 0
	movq	-32(%rbp), %rax	# reg, tmp65
	movl	8(%rax), %eax	# reg_1(D)->fld[0].rtuint, D.25674
	cmpl	$52, %eax	#, D.25674
	jbe	.L370	#,
.L369:
	.loc 1 2261 0
	movl	$__FUNCTION__.14454, %edx	#,
	movl	$2261, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L370:
	.loc 1 2264 0
	movq	-24(%rbp), %rax	# call_fusage, tmp66
	movq	(%rax), %rbx	# *call_fusage_4(D), D.25675
	movq	-32(%rbp), %rax	# reg, tmp67
	movq	%rax, %rdx	# tmp67,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rbx, %rcx	# D.25675,
	movq	%rax, %rdx	# D.25675,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-24(%rbp), %rdx	# call_fusage, tmp68
	movq	%rax, (%rdx)	# D.25675, *call_fusage_4(D)
	.loc 1 2266 0
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE23:
	.size	use_reg, .-use_reg
	.globl	use_regs
	.type	use_regs, @function
use_regs:
.LFB24:
	.loc 1 2276 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# call_fusage, call_fusage
	movl	%esi, -28(%rbp)	# regno, regno
	movl	%edx, -32(%rbp)	# nregs, nregs
	.loc 1 2279 0
	movl	-32(%rbp), %eax	# nregs, tmp64
	movl	-28(%rbp), %edx	# regno, tmp65
	addl	%edx, %eax	# tmp65, D.25676
	cmpl	$53, %eax	#, D.25676
	jle	.L372	#,
	.loc 1 2280 0
	movl	$__FUNCTION__.14461, %edx	#,
	movl	$2280, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L372:
	.loc 1 2282 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L373	#
.L374:
	.loc 1 2283 0 discriminator 2
	movl	-4(%rbp), %eax	# i, tmp66
	movl	-28(%rbp), %edx	# regno, tmp67
	addl	%eax, %edx	# tmp66, D.25676
	movl	-4(%rbp), %eax	# i, tmp68
	movl	-28(%rbp), %ecx	# regno, tmp69
	addl	%ecx, %eax	# tmp69, D.25676
	cltq
	movl	reg_raw_mode(,%rax,4), %eax	# reg_raw_mode, D.25677
	movl	%edx, %esi	# D.25676,
	movl	%eax, %edi	# D.25677,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.25678
	movq	-24(%rbp), %rax	# call_fusage, tmp71
	movq	%rdx, %rsi	# D.25678,
	movq	%rax, %rdi	# tmp71,
	call	use_reg	#
	.loc 1 2282 0 discriminator 2
	addl	$1, -4(%rbp)	#, i
.L373:
	.loc 1 2282 0 is_stmt 0 discriminator 1
	movl	-4(%rbp), %eax	# i, tmp72
	cmpl	-32(%rbp), %eax	# nregs, tmp72
	jl	.L374	#,
	.loc 1 2284 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE24:
	.size	use_regs, .-use_regs
	.globl	use_group_regs
	.type	use_group_regs, @function
use_group_regs:
.LFB25:
	.loc 1 2294 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# call_fusage, call_fusage
	movq	%rsi, -32(%rbp)	# regs, regs
	.loc 1 2297 0
	movl	$0, -12(%rbp)	#, i
	jmp	.L376	#
.L378:
.LBB30:
	.loc 1 2299 0
	movq	-32(%rbp), %rax	# regs, tmp64
	movq	8(%rax), %rax	# regs_3(D)->fld[0].rtvec, D.25679
	movl	-12(%rbp), %edx	# i, tmp66
	movslq	%edx, %rdx	# tmp66, tmp65
	movq	8(%rax,%rdx,8), %rax	# _6->elem, D.25681
	movq	8(%rax), %rax	# _7->fld[0].rtx, tmp67
	movq	%rax, -8(%rbp)	# tmp67, reg
	.loc 1 2304 0
	cmpq	$0, -8(%rbp)	#, reg
	je	.L377	#,
	.loc 1 2304 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# reg, tmp68
	movzwl	(%rax), %eax	# reg_8->code, D.25682
	cmpw	$61, %ax	#, D.25682
	jne	.L377	#,
	.loc 1 2305 0 is_stmt 1
	movq	-8(%rbp), %rdx	# reg, tmp69
	movq	-24(%rbp), %rax	# call_fusage, tmp70
	movq	%rdx, %rsi	# tmp69,
	movq	%rax, %rdi	# tmp70,
	call	use_reg	#
.L377:
.LBE30:
	.loc 1 2297 0
	addl	$1, -12(%rbp)	#, i
.L376:
	.loc 1 2297 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# regs, tmp71
	movq	8(%rax), %rax	# regs_3(D)->fld[0].rtvec, D.25679
	movl	(%rax), %eax	# _4->num_elem, D.25680
	cmpl	-12(%rbp), %eax	# i, D.25680
	jg	.L378	#,
	.loc 1 2307 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE25:
	.size	use_group_regs, .-use_group_regs
	.globl	can_store_by_pieces
	.type	can_store_by_pieces, @function
can_store_by_pieces:
.LFB26:
	.loc 1 2316 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -72(%rbp)	# len, len
	movq	%rsi, -80(%rbp)	# constfun, constfun
	movq	%rdx, -88(%rbp)	# constfundata, constfundata
	movl	%ecx, -92(%rbp)	# align, align
	.loc 1 2318 0
	movq	$0, -16(%rbp)	#, offset
	.loc 1 2324 0
	movl	-92(%rbp), %edx	# align, tmp86
	movq	-72(%rbp), %rax	# len, tmp87
	movl	%edx, %esi	# tmp86,
	movq	%rax, %rdi	# tmp87,
	call	move_by_pieces_ninsns	#
	movq	%rax, %rdx	#, D.25684
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.217
	testl	%eax, %eax	# optimize_size.217
	jne	.L380	#,
	.loc 1 2324 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.218
	movl	40(%rax), %eax	# ix86_cost.218_24->move_ratio, D.25683
	movl	%eax, %eax	# D.25685, iftmp.216
	jmp	.L381	#
.L380:
	.loc 1 2324 0 discriminator 2
	movl	$3, %eax	#, iftmp.216
.L381:
	.loc 1 2324 0 discriminator 3
	cmpq	%rax, %rdx	# iftmp.216, D.25684
	jb	.L382	#,
	.loc 1 2325 0 is_stmt 1
	movl	$0, %eax	#, D.25683
	jmp	.L383	#
.L382:
	.loc 1 2329 0
	movl	$128, -92(%rbp)	#, align
	.loc 1 2334 0
	movl	$0, -44(%rbp)	#, reverse
	jmp	.L384	#
.L400:
	.loc 1 2338 0
	movq	-72(%rbp), %rax	# len, tmp88
	movq	%rax, -24(%rbp)	# tmp88, l
	.loc 1 2339 0
	movl	$0, -52(%rbp)	#, mode
	.loc 1 2340 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.220
	andl	$33554432, %eax	#, D.25683
	testl	%eax, %eax	# D.25683
	je	.L385	#,
	.loc 1 2340 0 is_stmt 0 discriminator 1
	movl	$9, %eax	#, iftmp.219
	jmp	.L386	#
.L385:
	.loc 1 2340 0 discriminator 2
	movl	$5, %eax	#, iftmp.219
.L386:
	.loc 1 2340 0 discriminator 3
	movq	%rax, -32(%rbp)	# iftmp.219, max_size
	.loc 1 2341 0 is_stmt 1 discriminator 3
	jmp	.L387	#
.L398:
	.loc 1 2343 0
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, tmp89
	movl	%eax, -48(%rbp)	# tmp89, tmode
	jmp	.L388	#
.L390:
	.loc 1 2345 0
	movl	-48(%rbp), %eax	# tmode, tmode.221
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25686
	movzbl	%al, %eax	# D.25686, D.25684
	cmpq	-32(%rbp), %rax	# max_size, D.25684
	jae	.L389	#,
	.loc 1 2346 0
	movl	-48(%rbp), %eax	# tmode, tmp91
	movl	%eax, -52(%rbp)	# tmp91, mode
.L389:
	.loc 1 2344 0
	movl	-48(%rbp), %eax	# tmode, tmode.222
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25686
	movzbl	%al, %eax	# D.25686, tmp93
	movl	%eax, -48(%rbp)	# tmp93, tmode
.L388:
	.loc 1 2343 0 discriminator 1
	cmpl	$0, -48(%rbp)	#, tmode
	jne	.L390	#,
	.loc 1 2348 0
	cmpl	$0, -52(%rbp)	#, mode
	jne	.L391	#,
	.loc 1 2349 0
	jmp	.L392	#
.L391:
	.loc 1 2351 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25687
	movl	-52(%rbp), %edx	# mode, mode.223
	movslq	%edx, %rdx	# mode.223, tmp94
	salq	$4, %rdx	#, tmp95
	addq	%rdx, %rax	# tmp95, tmp96
	movl	8(%rax), %eax	# _47->handlers[mode.223_48].insn_code, tmp97
	movl	%eax, -40(%rbp)	# tmp97, icode
	.loc 1 2352 0
	cmpl	$1317, -40(%rbp)	#, icode
	je	.L393	#,
	.loc 1 2353 0
	movl	-52(%rbp), %eax	# mode, tmp98
	movl	%eax, %edi	# tmp98,
	call	get_mode_alignment	#
	cmpl	-92(%rbp), %eax	# align, D.25685
	ja	.L393	#,
.LBB31:
	.loc 1 2355 0
	movl	-52(%rbp), %eax	# mode, mode.224
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25686
	movzbl	%al, %eax	# D.25686, tmp100
	movl	%eax, -36(%rbp)	# tmp100, size
	.loc 1 2357 0
	jmp	.L394	#
.L397:
	.loc 1 2359 0
	cmpl	$0, -44(%rbp)	#, reverse
	je	.L395	#,
	.loc 1 2360 0
	movl	-36(%rbp), %eax	# size, D.25688
	subq	%rax, -16(%rbp)	# D.25688, offset
.L395:
	.loc 1 2362 0
	movl	-52(%rbp), %edx	# mode, tmp101
	movq	-16(%rbp), %rsi	# offset, tmp102
	movq	-88(%rbp), %rcx	# constfundata, tmp103
	movq	-80(%rbp), %rax	# constfun, tmp104
	movq	%rcx, %rdi	# tmp103,
	call	*%rax	# tmp104
	movq	%rax, -8(%rbp)	# tmp105, cst
	.loc 1 2366 0
	cmpl	$0, -44(%rbp)	#, reverse
	jne	.L396	#,
	.loc 1 2367 0
	movl	-36(%rbp), %eax	# size, D.25688
	addq	%rax, -16(%rbp)	# D.25688, offset
.L396:
	.loc 1 2369 0
	movl	-36(%rbp), %eax	# size, D.25684
	subq	%rax, -24(%rbp)	# D.25684, l
.L394:
	.loc 1 2357 0 discriminator 1
	movl	-36(%rbp), %eax	# size, D.25684
	cmpq	-24(%rbp), %rax	# l, D.25684
	jbe	.L397	#,
.L393:
.LBE31:
	.loc 1 2373 0
	movl	-52(%rbp), %eax	# mode, mode.225
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25686
	movzbl	%al, %eax	# D.25686, tmp107
	movq	%rax, -32(%rbp)	# tmp107, max_size
.L387:
	.loc 1 2341 0 discriminator 1
	cmpq	$1, -32(%rbp)	#, max_size
	ja	.L398	#,
.L392:
	.loc 1 2377 0
	cmpq	$0, -24(%rbp)	#, l
	je	.L399	#,
	.loc 1 2378 0
	movl	$__FUNCTION__.14501, %edx	#,
	movl	$2378, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L399:
	.loc 1 2336 0
	addl	$1, -44(%rbp)	#, reverse
.L384:
	.loc 1 2334 0 discriminator 1
	cmpl	$0, -44(%rbp)	#, reverse
	jle	.L400	#,
	.loc 1 2381 0
	movl	$1, %eax	#, D.25683
.L383:
	.loc 1 2382 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE26:
	.size	can_store_by_pieces, .-can_store_by_pieces
	.globl	store_by_pieces
	.type	store_by_pieces, @function
store_by_pieces:
.LFB27:
	.loc 1 2396 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$112, %rsp	#,
	movq	%rdi, -72(%rbp)	# to, to
	movq	%rsi, -80(%rbp)	# len, len
	movq	%rdx, -88(%rbp)	# constfun, constfun
	movq	%rcx, -96(%rbp)	# constfundata, constfundata
	movl	%r8d, -100(%rbp)	# align, align
	.loc 1 2399 0
	movl	-100(%rbp), %edx	# align, tmp65
	movq	-80(%rbp), %rax	# len, tmp66
	movl	%edx, %esi	# tmp65,
	movq	%rax, %rdi	# tmp66,
	call	move_by_pieces_ninsns	#
	movq	%rax, %rdx	#, D.25689
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.227
	testl	%eax, %eax	# optimize_size.227
	jne	.L402	#,
	.loc 1 2399 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.228
	movl	40(%rax), %eax	# ix86_cost.228_6->move_ratio, D.25690
	movl	%eax, %eax	# D.25691, iftmp.226
	jmp	.L403	#
.L402:
	.loc 1 2399 0 discriminator 2
	movl	$3, %eax	#, iftmp.226
.L403:
	.loc 1 2399 0 discriminator 3
	cmpq	%rax, %rdx	# iftmp.226, D.25689
	jb	.L404	#,
	.loc 1 2400 0 is_stmt 1
	movl	$__FUNCTION__.14516, %edx	#,
	movl	$2400, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L404:
	.loc 1 2401 0
	movq	-72(%rbp), %rax	# to, tmp67
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp67,
	call	protect_from_queue	#
	movq	%rax, -72(%rbp)	# tmp68, to
	.loc 1 2402 0
	movq	-88(%rbp), %rax	# constfun, tmp69
	movq	%rax, -24(%rbp)	# tmp69, data.constfun
	.loc 1 2403 0
	movq	-96(%rbp), %rax	# constfundata, tmp70
	movq	%rax, -16(%rbp)	# tmp70, data.constfundata
	.loc 1 2404 0
	movq	-80(%rbp), %rax	# len, tmp71
	movq	%rax, -40(%rbp)	# tmp71, data.len
	.loc 1 2405 0
	movq	-72(%rbp), %rax	# to, tmp72
	movq	%rax, -64(%rbp)	# tmp72, data.to
	.loc 1 2406 0
	movl	-100(%rbp), %edx	# align, tmp73
	leaq	-64(%rbp), %rax	#, tmp74
	movl	%edx, %esi	# tmp73,
	movq	%rax, %rdi	# tmp74,
	call	store_by_pieces_1	#
	.loc 1 2407 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE27:
	.size	store_by_pieces, .-store_by_pieces
	.type	clear_by_pieces, @function
clear_by_pieces:
.LFB28:
	.loc 1 2418 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -72(%rbp)	# to, to
	movq	%rsi, -80(%rbp)	# len, len
	movl	%edx, -84(%rbp)	# align, align
	.loc 1 2421 0
	movq	$clear_by_pieces_1, -24(%rbp)	#, data.constfun
	.loc 1 2422 0
	movq	$0, -16(%rbp)	#, data.constfundata
	.loc 1 2423 0
	movq	-80(%rbp), %rax	# len, tmp59
	movq	%rax, -40(%rbp)	# tmp59, data.len
	.loc 1 2424 0
	movq	-72(%rbp), %rax	# to, tmp60
	movq	%rax, -64(%rbp)	# tmp60, data.to
	.loc 1 2425 0
	movl	-84(%rbp), %edx	# align, tmp61
	leaq	-64(%rbp), %rax	#, tmp62
	movl	%edx, %esi	# tmp61,
	movq	%rax, %rdi	# tmp62,
	call	store_by_pieces_1	#
	.loc 1 2426 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE28:
	.size	clear_by_pieces, .-clear_by_pieces
	.type	clear_by_pieces_1, @function
clear_by_pieces_1:
.LFB29:
	.loc 1 2436 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# data, data
	movq	%rsi, -16(%rbp)	# offset, offset
	movl	%edx, -20(%rbp)	# mode, mode
	.loc 1 2437 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25692
	.loc 1 2438 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE29:
	.size	clear_by_pieces_1, .-clear_by_pieces_1
	.type	store_by_pieces_1, @function
store_by_pieces_1:
.LFB30:
	.loc 1 2449 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# data, data
	movl	%esi, -44(%rbp)	# align, align
	.loc 1 2450 0
	movq	-40(%rbp), %rax	# data, tmp105
	movq	(%rax), %rax	# data_13(D)->to, D.25693
	movq	8(%rax), %rax	# _14->fld[0].rtx, tmp106
	movq	%rax, -8(%rbp)	# tmp106, to_addr
	.loc 1 2451 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.230
	andl	$33554432, %eax	#, D.25694
	testl	%eax, %eax	# D.25694
	je	.L409	#,
	.loc 1 2451 0 is_stmt 0 discriminator 1
	movl	$9, %eax	#, iftmp.229
	jmp	.L410	#
.L409:
	.loc 1 2451 0 discriminator 2
	movl	$5, %eax	#, iftmp.229
.L410:
	.loc 1 2451 0 discriminator 3
	movq	%rax, -16(%rbp)	# iftmp.229, max_size
	.loc 1 2452 0 is_stmt 1 discriminator 3
	movl	$0, -28(%rbp)	#, mode
	.loc 1 2455 0 discriminator 3
	movq	-40(%rbp), %rax	# data, tmp107
	movq	$0, 32(%rax)	#, data_13(D)->offset
	.loc 1 2456 0 discriminator 3
	movq	-40(%rbp), %rax	# data, tmp108
	movq	-8(%rbp), %rdx	# to_addr, tmp109
	movq	%rdx, 8(%rax)	# tmp109, data_13(D)->to_addr
	.loc 1 2458 0 discriminator 3
	movq	-8(%rbp), %rax	# to_addr, tmp110
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	.loc 1 2459 0 discriminator 3
	cmpw	$97, %ax	#, D.25695
	je	.L411	#,
	.loc 1 2458 0
	movq	-8(%rbp), %rax	# to_addr, tmp111
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$96, %ax	#, D.25695
	je	.L411	#,
	.loc 1 2459 0
	movq	-8(%rbp), %rax	# to_addr, tmp112
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$99, %ax	#, D.25695
	je	.L411	#,
	.loc 1 2459 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# to_addr, tmp113
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$98, %ax	#, D.25695
	jne	.L412	#,
.L411:
	movl	$1, %eax	#, iftmp.231
	jmp	.L413	#
.L412:
	.loc 1 2459 0 discriminator 2
	movl	$0, %eax	#, iftmp.231
.L413:
	.loc 1 2458 0 is_stmt 1
	movq	-40(%rbp), %rdx	# data, tmp114
	movl	%eax, 16(%rdx)	# iftmp.231, data_13(D)->autinc_to
	.loc 1 2461 0
	movq	-40(%rbp), %rax	# data, tmp115
	movl	$0, 20(%rax)	#, data_13(D)->explicit_inc_to
	.loc 1 2463 0
	movq	-8(%rbp), %rax	# to_addr, tmp116
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$96, %ax	#, D.25695
	je	.L414	#,
	.loc 1 2463 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# to_addr, tmp117
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$98, %ax	#, D.25695
	jne	.L415	#,
.L414:
	.loc 1 2463 0 discriminator 1
	movl	$1, %eax	#, iftmp.232
	jmp	.L416	#
.L415:
	.loc 1 2463 0 discriminator 3
	movl	$0, %eax	#, iftmp.232
.L416:
	.loc 1 2463 0 discriminator 4
	movq	-40(%rbp), %rdx	# data, tmp118
	movl	%eax, 56(%rdx)	# iftmp.232, data_13(D)->reverse
	.loc 1 2464 0 is_stmt 1 discriminator 4
	movq	-40(%rbp), %rax	# data, tmp119
	movl	56(%rax), %eax	# data_13(D)->reverse, D.25694
	testl	%eax, %eax	# D.25694
	je	.L417	#,
	.loc 1 2465 0
	movq	-40(%rbp), %rax	# data, tmp120
	movq	24(%rax), %rax	# data_13(D)->len, D.25696
	movq	%rax, %rdx	# D.25696, D.25697
	movq	-40(%rbp), %rax	# data, tmp121
	movq	%rdx, 32(%rax)	# D.25697, data_13(D)->offset
.L417:
	.loc 1 2470 0
	movq	-40(%rbp), %rax	# data, tmp122
	movl	16(%rax), %eax	# data_13(D)->autinc_to, D.25694
	testl	%eax, %eax	# D.25694
	jne	.L432	#,
	.loc 1 2471 0
	movq	-40(%rbp), %rax	# data, tmp123
	movq	24(%rax), %rax	# data_13(D)->len, D.25696
	movl	-44(%rbp), %edx	# align, tmp124
	movl	%edx, %esi	# tmp124,
	movq	%rax, %rdi	# D.25696,
	call	move_by_pieces_ninsns	#
	cmpq	$2, %rax	#, D.25696
	jbe	.L432	#,
	.loc 1 2474 0
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, tmp125
	movl	%eax, -24(%rbp)	# tmp125, tmode
	jmp	.L419	#
.L421:
	.loc 1 2476 0
	movl	-24(%rbp), %eax	# tmode, tmode.233
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25698
	movzbl	%al, %eax	# D.25698, D.25696
	cmpq	-16(%rbp), %rax	# max_size, D.25696
	jae	.L420	#,
	.loc 1 2477 0
	movl	-24(%rbp), %eax	# tmode, tmp127
	movl	%eax, -28(%rbp)	# tmp127, mode
.L420:
	.loc 1 2475 0
	movl	-24(%rbp), %eax	# tmode, tmode.234
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25698
	movzbl	%al, %eax	# D.25698, tmp129
	movl	%eax, -24(%rbp)	# tmp129, tmode
.L419:
	.loc 1 2474 0 discriminator 1
	cmpl	$0, -24(%rbp)	#, tmode
	jne	.L421	#,
	.loc 1 2494 0
	movq	-40(%rbp), %rax	# data, tmp130
	movl	16(%rax), %eax	# data_13(D)->autinc_to, D.25694
	testl	%eax, %eax	# D.25694
	jne	.L432	#,
	.loc 1 2494 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# to_addr, tmp131
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$67, %ax	#, D.25695
	je	.L422	#,
	movq	-8(%rbp), %rax	# to_addr, tmp132
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$68, %ax	#, D.25695
	je	.L422	#,
	movq	-8(%rbp), %rax	# to_addr, tmp133
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$54, %ax	#, D.25695
	je	.L422	#,
	movq	-8(%rbp), %rax	# to_addr, tmp134
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$55, %ax	#, D.25695
	je	.L422	#,
	movq	-8(%rbp), %rax	# to_addr, tmp135
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$58, %ax	#, D.25695
	je	.L422	#,
	movq	-8(%rbp), %rax	# to_addr, tmp136
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$134, %ax	#, D.25695
	je	.L422	#,
	movq	-8(%rbp), %rax	# to_addr, tmp137
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$56, %ax	#, D.25695
	je	.L422	#,
	movq	-8(%rbp), %rax	# to_addr, tmp138
	movzwl	(%rax), %eax	# to_addr_15->code, D.25695
	cmpw	$140, %ax	#, D.25695
	jne	.L432	#,
.L422:
	.loc 1 2495 0 is_stmt 1
	movq	-8(%rbp), %rax	# to_addr, tmp139
	movq	%rax, %rdi	# tmp139,
	call	copy_addr_to_reg	#
	movq	-40(%rbp), %rdx	# data, tmp140
	movq	%rax, 8(%rdx)	# D.25693, data_13(D)->to_addr
.L432:
	.loc 1 2500 0
	movl	$128, -44(%rbp)	#, align
	.loc 1 2505 0
	jmp	.L423	#
.L430:
	.loc 1 2507 0
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, tmp141
	movl	%eax, -24(%rbp)	# tmp141, tmode
	jmp	.L424	#
.L426:
	.loc 1 2509 0
	movl	-24(%rbp), %eax	# tmode, tmode.235
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25698
	movzbl	%al, %eax	# D.25698, D.25696
	cmpq	-16(%rbp), %rax	# max_size, D.25696
	jae	.L425	#,
	.loc 1 2510 0
	movl	-24(%rbp), %eax	# tmode, tmp143
	movl	%eax, -28(%rbp)	# tmp143, mode
.L425:
	.loc 1 2508 0
	movl	-24(%rbp), %eax	# tmode, tmode.236
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25698
	movzbl	%al, %eax	# D.25698, tmp145
	movl	%eax, -24(%rbp)	# tmp145, tmode
.L424:
	.loc 1 2507 0 discriminator 1
	cmpl	$0, -24(%rbp)	#, tmode
	jne	.L426	#,
	.loc 1 2512 0
	cmpl	$0, -28(%rbp)	#, mode
	jne	.L427	#,
	.loc 1 2513 0
	jmp	.L428	#
.L427:
	.loc 1 2515 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25699
	movl	-28(%rbp), %edx	# mode, mode.237
	movslq	%edx, %rdx	# mode.237, tmp146
	salq	$4, %rdx	#, tmp147
	addq	%rdx, %rax	# tmp147, tmp148
	movl	8(%rax), %eax	# _66->handlers[mode.237_67].insn_code, tmp149
	movl	%eax, -20(%rbp)	# tmp149, icode
	.loc 1 2516 0
	cmpl	$1317, -20(%rbp)	#, icode
	je	.L429	#,
	.loc 1 2516 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# mode, tmp150
	movl	%eax, %edi	# tmp150,
	call	get_mode_alignment	#
	cmpl	-44(%rbp), %eax	# align, D.25700
	ja	.L429	#,
	.loc 1 2517 0 is_stmt 1
	movl	-20(%rbp), %eax	# icode, icode.238
	movslq	%eax, %rdx	# icode.238, tmp151
	movq	%rdx, %rax	# tmp151, tmp152
	salq	$2, %rax	#, tmp152
	addq	%rdx, %rax	# tmp151, tmp152
	salq	$3, %rax	#, tmp153
	addq	$insn_data+16, %rax	#, tmp154
	movq	(%rax), %rax	# insn_data[icode.238_70].genfun, D.25701
	movq	-40(%rbp), %rdx	# data, tmp155
	movl	-28(%rbp), %ecx	# mode, tmp156
	movl	%ecx, %esi	# tmp156,
	movq	%rax, %rdi	# D.25701,
	call	store_by_pieces_2	#
.L429:
	.loc 1 2519 0
	movl	-28(%rbp), %eax	# mode, mode.239
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25698
	movzbl	%al, %eax	# D.25698, tmp158
	movq	%rax, -16(%rbp)	# tmp158, max_size
.L423:
	.loc 1 2505 0 discriminator 1
	cmpq	$1, -16(%rbp)	#, max_size
	ja	.L430	#,
.L428:
	.loc 1 2523 0
	movq	-40(%rbp), %rax	# data, tmp159
	movq	24(%rax), %rax	# data_13(D)->len, D.25696
	testq	%rax, %rax	# D.25696
	je	.L408	#,
	.loc 1 2524 0
	movl	$__FUNCTION__.14546, %edx	#,
	movl	$2524, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L408:
	.loc 1 2525 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE30:
	.size	store_by_pieces_1, .-store_by_pieces_1
	.type	store_by_pieces_2, @function
store_by_pieces_2:
.LFB31:
	.loc 1 2536 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# genfun, genfun
	movl	%esi, -44(%rbp)	# mode, mode
	movq	%rdx, -56(%rbp)	# data, data
	.loc 1 2537 0
	movl	-44(%rbp), %eax	# mode, mode.240
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25702
	movzbl	%al, %eax	# D.25702, tmp85
	movl	%eax, -20(%rbp)	# tmp85, size
	.loc 1 2540 0
	jmp	.L434	#
.L439:
	.loc 1 2542 0
	movq	-56(%rbp), %rax	# data, tmp86
	movl	56(%rax), %eax	# data_6(D)->reverse, D.25704
	testl	%eax, %eax	# D.25704
	je	.L435	#,
	.loc 1 2543 0
	movq	-56(%rbp), %rax	# data, tmp87
	movq	32(%rax), %rdx	# data_6(D)->offset, D.25705
	movl	-20(%rbp), %eax	# size, D.25705
	subq	%rax, %rdx	# D.25705, D.25705
	movq	-56(%rbp), %rax	# data, tmp88
	movq	%rdx, 32(%rax)	# D.25705, data_6(D)->offset
.L435:
	.loc 1 2545 0
	movq	-56(%rbp), %rax	# data, tmp89
	movl	16(%rax), %eax	# data_6(D)->autinc_to, D.25704
	testl	%eax, %eax	# D.25704
	je	.L436	#,
	.loc 1 2546 0
	movq	-56(%rbp), %rax	# data, tmp90
	movq	32(%rax), %rcx	# data_6(D)->offset, D.25705
	movq	-56(%rbp), %rax	# data, tmp91
	movq	8(%rax), %rdx	# data_6(D)->to_addr, D.25706
	movq	-56(%rbp), %rax	# data, tmp92
	movq	(%rax), %rax	# data_6(D)->to, D.25706
	movl	-44(%rbp), %esi	# mode, tmp93
	movl	$1, %r8d	#,
	movq	%rax, %rdi	# D.25706,
	call	adjust_automodify_address_1	#
	movq	%rax, -16(%rbp)	# tmp94, to1
	jmp	.L440	#
.L436:
	.loc 1 2549 0
	movq	-56(%rbp), %rax	# data, tmp95
	movq	32(%rax), %rdx	# data_6(D)->offset, D.25705
	movq	-56(%rbp), %rax	# data, tmp96
	movq	(%rax), %rax	# data_6(D)->to, D.25706
	movl	-44(%rbp), %esi	# mode, tmp97
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# D.25706,
	call	adjust_address_1	#
	movq	%rax, -16(%rbp)	# tmp98, to1
.L440:
	.loc 1 2555 0
	movq	-56(%rbp), %rax	# data, tmp99
	movq	40(%rax), %rax	# data_6(D)->constfun, D.25707
	movq	-56(%rbp), %rdx	# data, tmp100
	movq	32(%rdx), %rsi	# data_6(D)->offset, D.25705
	movq	-56(%rbp), %rdx	# data, tmp101
	movq	48(%rdx), %rcx	# data_6(D)->constfundata, D.25708
	movl	-44(%rbp), %edx	# mode, tmp102
	movq	%rcx, %rdi	# D.25708,
	call	*%rax	# D.25707
	movq	%rax, -8(%rbp)	# tmp103, cst
	.loc 1 2556 0
	movq	-8(%rbp), %rcx	# cst, tmp104
	movq	-16(%rbp), %rax	# to1, tmp105
	movq	-40(%rbp), %rdx	# genfun, tmp106
	movq	%rcx, %rsi	# tmp104,
	movq	%rax, %rdi	# tmp105,
	movl	$0, %eax	#,
	call	*%rdx	# tmp106
	movq	%rax, %rdi	# D.25706,
	call	emit_insn	#
	.loc 1 2561 0
	movq	-56(%rbp), %rax	# data, tmp107
	movl	56(%rax), %eax	# data_6(D)->reverse, D.25704
	testl	%eax, %eax	# D.25704
	jne	.L438	#,
	.loc 1 2562 0
	movq	-56(%rbp), %rax	# data, tmp108
	movq	32(%rax), %rdx	# data_6(D)->offset, D.25705
	movl	-20(%rbp), %eax	# size, D.25705
	addq	%rax, %rdx	# D.25705, D.25705
	movq	-56(%rbp), %rax	# data, tmp109
	movq	%rdx, 32(%rax)	# D.25705, data_6(D)->offset
.L438:
	.loc 1 2564 0
	movq	-56(%rbp), %rax	# data, tmp110
	movq	24(%rax), %rdx	# data_6(D)->len, D.25703
	movl	-20(%rbp), %eax	# size, D.25703
	subq	%rax, %rdx	# D.25703, D.25703
	movq	-56(%rbp), %rax	# data, tmp111
	movq	%rdx, 24(%rax)	# D.25703, data_6(D)->len
.L434:
	.loc 1 2540 0 discriminator 1
	movq	-56(%rbp), %rax	# data, tmp112
	movq	24(%rax), %rdx	# data_6(D)->len, D.25703
	movl	-20(%rbp), %eax	# size, D.25703
	cmpq	%rax, %rdx	# D.25703, D.25703
	jae	.L439	#,
	.loc 1 2566 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE31:
	.size	store_by_pieces_2, .-store_by_pieces_2
	.section	.rodata
.LC2:
	.string	"memset"
	.text
	.globl	clear_storage
	.type	clear_storage, @function
clear_storage:
.LFB32:
	.loc 1 2575 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -120(%rbp)	# object, object
	movq	%rsi, -128(%rbp)	# size, size
	.loc 1 2580 0
	movq	$0, -88(%rbp)	#, retval
	.loc 1 2581 0
	movq	-120(%rbp), %rax	# object, tmp161
	movzwl	(%rax), %eax	# object_11(D)->code, D.25710
	.loc 1 2582 0
	cmpw	$66, %ax	#, D.25710
	jne	.L442	#,
	.loc 1 2581 0
	movq	-120(%rbp), %rax	# object, tmp162
	movq	16(%rax), %rax	# object_11(D)->fld[1].rtmem, D.25711
	testq	%rax, %rax	# D.25711
	je	.L443	#,
	.loc 1 2581 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# object, tmp163
	movq	16(%rax), %rax	# object_11(D)->fld[1].rtmem, D.25711
	movl	32(%rax), %eax	# _14->align, iftmp.242
	jmp	.L445	#
.L443:
	.loc 1 2581 0 discriminator 2
	movl	$8, %eax	#, iftmp.242
	jmp	.L445	#
.L442:
	.loc 1 2582 0 is_stmt 1 discriminator 1
	movq	-120(%rbp), %rax	# object, tmp164
	movzbl	2(%rax), %eax	# object_11(D)->mode, D.25712
	movzbl	%al, %eax	# D.25712, D.25713
	movl	%eax, %edi	# D.25713,
	call	get_mode_alignment	#
.L445:
	.loc 1 2581 0
	movl	%eax, -96(%rbp)	# iftmp.241, align
	.loc 1 2586 0
	movq	-120(%rbp), %rax	# object, tmp165
	movzbl	2(%rax), %eax	# object_11(D)->mode, D.25712
	cmpb	$51, %al	#, D.25712
	je	.L446	#,
	.loc 1 2587 0
	movq	-128(%rbp), %rax	# size, tmp166
	movzwl	(%rax), %eax	# size_23(D)->code, D.25710
	cmpw	$54, %ax	#, D.25710
	jne	.L446	#,
	.loc 1 2588 0
	movq	-120(%rbp), %rax	# object, tmp167
	movzbl	2(%rax), %eax	# object_11(D)->mode, D.25712
	movzbl	%al, %eax	# D.25712, D.25714
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25712
	movzbl	%al, %edx	# D.25712, D.25715
	movq	-128(%rbp), %rax	# size, tmp169
	movq	8(%rax), %rax	# size_23(D)->fld[0].rtwint, D.25716
	cmpl	%eax, %edx	# D.25715, D.25715
	jne	.L446	#,
	.loc 1 2589 0
	movq	-120(%rbp), %rax	# object, tmp170
	movzbl	2(%rax), %eax	# object_11(D)->mode, D.25712
	movzbl	%al, %eax	# D.25712, D.25714
	cltq
	movq	const_tiny_rtx(,%rax,8), %rdx	# const_tiny_rtx, D.25717
	movq	-120(%rbp), %rax	# object, tmp172
	movq	%rdx, %rsi	# D.25717,
	movq	%rax, %rdi	# tmp172,
	call	emit_move_insn	#
	jmp	.L447	#
.L446:
	.loc 1 2592 0
	movq	-120(%rbp), %rax	# object, tmp173
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp173,
	call	protect_from_queue	#
	movq	%rax, -120(%rbp)	# tmp174, object
	.loc 1 2593 0
	movq	-128(%rbp), %rax	# size, tmp175
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp175,
	call	protect_from_queue	#
	movq	%rax, -128(%rbp)	# tmp176, size
	.loc 1 2595 0
	movq	-128(%rbp), %rax	# size, tmp177
	movzwl	(%rax), %eax	# size_35->code, D.25710
	cmpw	$54, %ax	#, D.25710
	jne	.L448	#,
	.loc 1 2596 0
	movq	-128(%rbp), %rax	# size, tmp178
	movq	8(%rax), %rax	# size_35->fld[0].rtwint, D.25716
	movl	-96(%rbp), %edx	# align, tmp179
	movl	%edx, %esi	# tmp179,
	movq	%rax, %rdi	# D.25718,
	call	move_by_pieces_ninsns	#
	movq	%rax, %rdx	#, D.25718
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.244
	testl	%eax, %eax	# optimize_size.244
	jne	.L449	#,
	.loc 1 2596 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.245
	movl	40(%rax), %eax	# ix86_cost.245_41->move_ratio, D.25714
	movl	%eax, %eax	# D.25715, iftmp.243
	jmp	.L450	#
.L449:
	.loc 1 2596 0 discriminator 2
	movl	$3, %eax	#, iftmp.243
.L450:
	.loc 1 2596 0 discriminator 3
	cmpq	%rax, %rdx	# iftmp.243, D.25718
	jae	.L448	#,
	.loc 1 2597 0 is_stmt 1
	movq	-128(%rbp), %rax	# size, tmp180
	movq	8(%rax), %rax	# size_35->fld[0].rtwint, D.25716
	movq	%rax, %rcx	# D.25716, D.25718
	movl	-96(%rbp), %edx	# align, tmp181
	movq	-120(%rbp), %rax	# object, tmp182
	movq	%rcx, %rsi	# D.25718,
	movq	%rax, %rdi	# tmp182,
	call	clear_by_pieces	#
	jmp	.L447	#
.L448:
.LBB32:
	.loc 1 2604 0
	movl	-96(%rbp), %eax	# align, tmp183
	shrl	$3, %eax	#, D.25715
	movl	%eax, %eax	# D.25715, D.25716
	movq	%rax, %rsi	# D.25716,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -72(%rbp)	# tmp184, opalign
	.loc 1 2607 0
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, tmp185
	movl	%eax, -100(%rbp)	# tmp185, mode
	jmp	.L451	#
.L462:
.LBB33:
	.loc 1 2610 0
	movl	-100(%rbp), %eax	# mode, mode.246
	cltq
	movl	clrstr_optab(,%rax,4), %eax	# clrstr_optab, tmp187
	movl	%eax, -92(%rbp)	# tmp187, code
	.loc 1 2613 0
	cmpl	$1317, -92(%rbp)	#, code
	je	.L452	#,
	.loc 1 2618 0
	movq	-128(%rbp), %rax	# size, tmp188
	movzwl	(%rax), %eax	# size_35->code, D.25710
	cmpw	$54, %ax	#, D.25710
	jne	.L453	#,
	.loc 1 2619 0
	movq	-128(%rbp), %rax	# size, tmp189
	movq	8(%rax), %rax	# size_35->fld[0].rtwint, D.25716
	movq	%rax, %rdx	# D.25716, D.25718
	.loc 1 2620 0
	movl	-100(%rbp), %eax	# mode, mode.247
	cltq
	movq	mode_mask_array(,%rax,8), %rax	# mode_mask_array, D.25718
	shrq	%rax	# D.25718
	.loc 1 2619 0
	cmpq	%rax, %rdx	# D.25718, D.25718
	jbe	.L454	#,
.L453:
	.loc 1 2621 0
	movl	-100(%rbp), %eax	# mode, mode.248
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25710
	movzwl	%ax, %edx	# D.25710, D.25714
	movl	target_flags(%rip), %eax	# target_flags, target_flags.250
	andl	$33554432, %eax	#, D.25714
	testl	%eax, %eax	# D.25714
	je	.L455	#,
	.loc 1 2621 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.249
	jmp	.L456	#
.L455:
	.loc 1 2621 0 discriminator 2
	movl	$32, %eax	#, iftmp.249
.L456:
	.loc 1 2621 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.249, D.25714
	jl	.L452	#,
.L454:
	.loc 1 2622 0 is_stmt 1
	movl	-92(%rbp), %eax	# code, code.251
	movslq	%eax, %rdx	# code.251, tmp192
	movq	%rdx, %rax	# tmp192, tmp193
	salq	$2, %rax	#, tmp193
	addq	%rdx, %rax	# tmp192, tmp193
	salq	$3, %rax	#, tmp194
	addq	$insn_data+24, %rax	#, tmp195
	movq	(%rax), %rax	# insn_data[code.251_67].operand, D.25719
	movq	(%rax), %rax	# _68->predicate, tmp196
	movq	%rax, -64(%rbp)	# tmp196, pred
	cmpq	$0, -64(%rbp)	#, pred
	je	.L457	#,
	.loc 1 2623 0
	movq	-120(%rbp), %rdx	# object, tmp197
	movq	-64(%rbp), %rax	# pred, tmp198
	movl	$51, %esi	#,
	movq	%rdx, %rdi	# tmp197,
	call	*%rax	# tmp198
	testl	%eax, %eax	# D.25714
	je	.L452	#,
.L457:
	.loc 1 2624 0
	movl	-92(%rbp), %eax	# code, code.252
	movslq	%eax, %rdx	# code.252, tmp199
	movq	%rdx, %rax	# tmp199, tmp200
	salq	$2, %rax	#, tmp200
	addq	%rdx, %rax	# tmp199, tmp200
	salq	$3, %rax	#, tmp201
	addq	$insn_data+24, %rax	#, tmp202
	movq	(%rax), %rax	# insn_data[code.252_71].operand, D.25719
	addq	$48, %rax	#, D.25719
	movq	(%rax), %rax	# _73->predicate, tmp203
	movq	%rax, -64(%rbp)	# tmp203, pred
	cmpq	$0, -64(%rbp)	#, pred
	je	.L458	#,
	.loc 1 2625 0
	movq	-72(%rbp), %rdx	# opalign, tmp204
	movq	-64(%rbp), %rax	# pred, tmp205
	movl	$0, %esi	#,
	movq	%rdx, %rdi	# tmp204,
	call	*%rax	# tmp205
	testl	%eax, %eax	# D.25714
	je	.L452	#,
.L458:
.LBB34:
	.loc 1 2628 0
	call	get_last_insn	#
	movq	%rax, -56(%rbp)	# tmp206, last
	.loc 1 2631 0
	movq	-128(%rbp), %rcx	# size, tmp207
	movl	-100(%rbp), %eax	# mode, tmp208
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp207,
	movl	%eax, %edi	# tmp208,
	call	convert_to_mode	#
	movq	%rax, -80(%rbp)	# tmp209, op1
	.loc 1 2632 0
	movl	-92(%rbp), %eax	# code, code.253
	movslq	%eax, %rdx	# code.253, tmp210
	movq	%rdx, %rax	# tmp210, tmp211
	salq	$2, %rax	#, tmp211
	addq	%rdx, %rax	# tmp210, tmp211
	salq	$3, %rax	#, tmp212
	addq	$insn_data+24, %rax	#, tmp213
	movq	(%rax), %rax	# insn_data[code.253_78].operand, D.25719
	addq	$24, %rax	#, D.25719
	movq	(%rax), %rax	# _80->predicate, tmp214
	movq	%rax, -64(%rbp)	# tmp214, pred
	.loc 1 2633 0
	cmpq	$0, -64(%rbp)	#, pred
	je	.L459	#,
	.loc 1 2633 0 is_stmt 0 discriminator 1
	movl	-100(%rbp), %ecx	# mode, tmp215
	movq	-80(%rbp), %rdx	# op1, tmp216
	movq	-64(%rbp), %rax	# pred, tmp217
	movl	%ecx, %esi	# tmp215,
	movq	%rdx, %rdi	# tmp216,
	call	*%rax	# tmp217
	testl	%eax, %eax	# D.25714
	jne	.L459	#,
	.loc 1 2634 0 is_stmt 1
	movq	-80(%rbp), %rdx	# op1, tmp218
	movl	-100(%rbp), %eax	# mode, tmp219
	movq	%rdx, %rsi	# tmp218,
	movl	%eax, %edi	# tmp219,
	call	copy_to_mode_reg	#
	movq	%rax, -80(%rbp)	# tmp220, op1
.L459:
	.loc 1 2636 0
	movl	-92(%rbp), %eax	# code, code.254
	movslq	%eax, %rdx	# code.254, tmp221
	movq	%rdx, %rax	# tmp221, tmp222
	salq	$2, %rax	#, tmp222
	addq	%rdx, %rax	# tmp221, tmp222
	salq	$3, %rax	#, tmp223
	addq	$insn_data+16, %rax	#, tmp224
	movq	(%rax), %rcx	# insn_data[code.254_84].genfun, D.25720
	movq	-72(%rbp), %rdx	# opalign, tmp225
	movq	-80(%rbp), %rsi	# op1, tmp226
	movq	-120(%rbp), %rax	# object, tmp227
	movq	%rax, %rdi	# tmp227,
	movl	$0, %eax	#,
	call	*%rcx	# D.25720
	movq	%rax, -48(%rbp)	# tmp228, pat
	.loc 1 2637 0
	cmpq	$0, -48(%rbp)	#, pat
	je	.L460	#,
	.loc 1 2639 0
	movq	-48(%rbp), %rax	# pat, tmp229
	movq	%rax, %rdi	# tmp229,
	call	emit_insn	#
	.loc 1 2640 0
	movl	$0, %eax	#, D.25709
	jmp	.L461	#
.L460:
	.loc 1 2643 0
	movq	-56(%rbp), %rax	# last, tmp230
	movq	%rax, %rdi	# tmp230,
	call	delete_insns_since	#
.L452:
.LBE34:
.LBE33:
	.loc 1 2608 0
	movl	-100(%rbp), %eax	# mode, mode.255
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25712
	movzbl	%al, %eax	# D.25712, tmp232
	movl	%eax, -100(%rbp)	# tmp232, mode
.L451:
	.loc 1 2607 0 discriminator 1
	cmpl	$0, -100(%rbp)	#, mode
	jne	.L462	#,
	.loc 1 2667 0
	movq	-120(%rbp), %rax	# object, tmp233
	movq	8(%rax), %rdx	# object_34->fld[0].rtx, D.25717
	movl	target_flags(%rip), %eax	# target_flags, target_flags.257
	andl	$33554432, %eax	#, D.25714
	testl	%eax, %eax	# D.25714
	je	.L463	#,
	.loc 1 2667 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.256
	jmp	.L464	#
.L463:
	.loc 1 2667 0 discriminator 2
	movl	$4, %eax	#, iftmp.256
.L464:
	.loc 1 2667 0 discriminator 3
	movq	%rdx, %rsi	# D.25717,
	movl	%eax, %edi	# iftmp.256,
	call	copy_to_mode_reg	#
	movq	%rax, -120(%rbp)	# tmp234, object
	.loc 1 2670 0 is_stmt 1 discriminator 3
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25721
	movzbl	61(%rax), %eax	# *_97, tmp237
	shrb	%al	# D.25722
	movzbl	%al, %eax	# D.25722, D.25713
	movq	-128(%rbp), %rdx	# size, tmp238
	movq	%rdx, %rsi	# tmp238,
	movl	%eax, %edi	# D.25713,
	call	copy_to_mode_reg	#
	movq	%rax, -128(%rbp)	# tmp239, size
	.loc 1 2690 0 discriminator 3
	movq	fn.14563(%rip), %rax	# fn, fn.258
	testq	%rax, %rax	# fn.258
	jne	.L465	#,
.LBB35:
	.loc 1 2696 0
	movl	$.LC2, %edi	#,
	call	get_identifier	#
	movq	%rax, fn.14563(%rip)	# fn.259, fn
	.loc 1 2697 0
	movq	global_trees+216(%rip), %rax	# global_trees, D.25721
	movq	%rax, %rdi	# D.25721,
	call	build_pointer_type	#
	movq	%rax, -40(%rbp)	# tmp240, fntype
	.loc 1 2698 0
	movq	-40(%rbp), %rax	# fntype, tmp241
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp241,
	call	build_function_type	#
	movq	%rax, -40(%rbp)	# tmp242, fntype
	.loc 1 2699 0
	movq	fn.14563(%rip), %rax	# fn, fn.260
	movq	-40(%rbp), %rdx	# fntype, tmp243
	movq	%rax, %rsi	# fn.260,
	movl	$30, %edi	#,
	call	build_decl	#
	movq	%rax, fn.14563(%rip)	# fn.261, fn
	.loc 1 2700 0
	movl	$1, %esi	#,
	movl	$fn.14563, %edi	#,
	call	ggc_add_tree_root	#
	.loc 1 2701 0
	movq	fn.14563(%rip), %rax	# fn, fn.262
	movzbl	49(%rax), %edx	#, tmp246
	orl	$1, %edx	#, tmp247
	movb	%dl, 49(%rax)	# tmp247,
	.loc 1 2702 0
	movq	fn.14563(%rip), %rax	# fn, fn.263
	movzbl	18(%rax), %edx	#, tmp250
	orl	$8, %edx	#, tmp251
	movb	%dl, 18(%rax)	# tmp251,
	.loc 1 2703 0
	movq	fn.14563(%rip), %rax	# fn, fn.264
	movzbl	50(%rax), %edx	#, tmp254
	orl	$64, %edx	#, tmp255
	movb	%dl, 50(%rax)	# tmp255,
	.loc 1 2704 0
	movq	fn.14563(%rip), %rax	# fn, fn.265
	movzbl	18(%rax), %edx	#, tmp258
	orl	$2, %edx	#, tmp259
	movb	%dl, 18(%rax)	# tmp259,
	.loc 1 2705 0
	movq	fn.14563(%rip), %rax	# fn, fn.266
	movl	$0, %esi	#,
	movq	%rax, %rdi	# fn.266,
	call	make_decl_rtl	#
	.loc 1 2706 0
	movq	fn.14563(%rip), %rax	# fn, fn.267
	movq	%rax, %rdi	# fn.267,
	call	assemble_external	#
.L465:
.LBE35:
	.loc 1 2715 0
	movq	global_trees+216(%rip), %rax	# global_trees, D.25721
	movq	%rax, %rdi	# D.25721,
	call	build_pointer_type	#
	movq	-120(%rbp), %rdx	# object, tmp260
	movq	%rdx, %rsi	# tmp260,
	movq	%rax, %rdi	# D.25721,
	call	make_tree	#
	movq	%rax, %rsi	# D.25721,
	movl	$0, %edi	#,
	call	build_tree_list	#
	movq	%rax, -32(%rbp)	# tmp261, arg_list
	.loc 1 2719 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.25717
	movq	integer_types+40(%rip), %rax	# integer_types, D.25721
	movq	%rdx, %rsi	# D.25717,
	movq	%rax, %rdi	# D.25721,
	call	make_tree	#
	movq	%rax, %rsi	# D.25721,
	movl	$0, %edi	#,
	call	build_tree_list	#
	movq	-32(%rbp), %rdx	# arg_list, tmp262
	movq	%rax, (%rdx)	# D.25721, arg_list_117->common.chain
	.loc 1 2721 0
	movq	-32(%rbp), %rax	# arg_list, tmp263
	movq	(%rax), %rbx	# arg_list_117->common.chain, D.25721
	.loc 1 2722 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25721
	movq	-128(%rbp), %rdx	# size, tmp264
	movq	%rdx, %rsi	# tmp264,
	movq	%rax, %rdi	# D.25721,
	call	make_tree	#
	movq	%rax, %rsi	# D.25721,
	movl	$0, %edi	#,
	call	build_tree_list	#
	movq	%rax, (%rbx)	# D.25721, _122->common.chain
	.loc 1 2723 0
	movq	-32(%rbp), %rax	# arg_list, tmp265
	movq	(%rax), %rax	# arg_list_117->common.chain, D.25721
	movq	(%rax), %rax	# _126->common.chain, D.25721
	movq	$0, (%rax)	#, _127->common.chain
	.loc 1 2726 0
	movq	fn.14563(%rip), %rbx	# fn, fn.268
	.loc 1 2727 0
	movq	fn.14563(%rip), %rax	# fn, fn.269
	.loc 1 2726 0
	movq	8(%rax), %rax	# fn.269_129->common.type, D.25721
	movq	%rax, %rdi	# D.25721,
	call	build_pointer_type	#
	movq	%rbx, %rdx	# fn.268,
	movq	%rax, %rsi	# D.25721,
	movl	$121, %edi	#,
	call	build1	#
	movq	%rax, -24(%rbp)	# tmp266, call_expr
	.loc 1 2728 0
	movq	fn.14563(%rip), %rax	# fn, fn.270
	movq	8(%rax), %rax	# fn.270_133->common.type, D.25721
	movq	8(%rax), %rax	# _134->common.type, D.25721
	movq	-32(%rbp), %rcx	# arg_list, tmp267
	movq	-24(%rbp), %rdx	# call_expr, tmp268
	movl	$0, %r8d	#,
	movq	%rax, %rsi	# D.25721,
	movl	$53, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -24(%rbp)	# tmp269, call_expr
	.loc 1 2730 0
	movq	-24(%rbp), %rax	# call_expr, tmp270
	movzbl	17(%rax), %edx	#, tmp273
	orl	$1, %edx	#, tmp274
	movb	%dl, 17(%rax)	# tmp274,
	.loc 1 2732 0
	movq	-24(%rbp), %rax	# call_expr, tmp275
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp275,
	call	expand_expr	#
	movq	%rax, -88(%rbp)	# tmp276, retval
	.loc 1 2742 0
	movq	-120(%rbp), %rax	# object, tmp277
	movzbl	3(%rax), %eax	# *object_96, D.25712
	andl	$4, %eax	#, D.25712
	testb	%al, %al	# D.25712
	je	.L447	#,
	.loc 1 2743 0
	movq	-120(%rbp), %rax	# object, tmp278
	movq	%rax, %rdx	# tmp278,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdi	# D.25717,
	call	emit_insn	#
.L447:
.LBE32:
	.loc 1 2747 0
	movq	-88(%rbp), %rax	# retval, D.25709
.L461:
	.loc 1 2748 0
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE32:
	.size	clear_storage, .-clear_storage
	.globl	emit_move_insn
	.type	emit_move_insn, @function
emit_move_insn:
.LFB33:
	.loc 1 2760 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# y, y
	.loc 1 2761 0
	movq	-40(%rbp), %rax	# x, tmp102
	movzbl	2(%rax), %eax	# x_3(D)->mode, D.25724
	movzbl	%al, %eax	# D.25724, tmp103
	movl	%eax, -20(%rbp)	# tmp103, mode
	.loc 1 2762 0
	movq	$0, -16(%rbp)	#, y_cst
	.loc 1 2765 0
	movq	-40(%rbp), %rax	# x, tmp104
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp104,
	call	protect_from_queue	#
	movq	%rax, -40(%rbp)	# tmp105, x
	.loc 1 2766 0
	movq	-48(%rbp), %rax	# y, tmp106
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp106,
	call	protect_from_queue	#
	movq	%rax, -48(%rbp)	# tmp107, y
	.loc 1 2768 0
	cmpl	$51, -20(%rbp)	#, mode
	je	.L467	#,
	.loc 1 2768 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# y, tmp108
	movzbl	2(%rax), %eax	# y_9->mode, D.25724
	movzbl	%al, %eax	# D.25724, D.25725
	cmpl	-20(%rbp), %eax	# mode, D.25725
	je	.L468	#,
	movq	-48(%rbp), %rax	# y, tmp109
	movzbl	2(%rax), %eax	# y_9->mode, D.25724
	testb	%al, %al	# D.25724
	je	.L468	#,
.L467:
	.loc 1 2769 0 is_stmt 1
	movl	$__FUNCTION__.14586, %edx	#,
	movl	$2769, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L468:
	.loc 1 2782 0
	movq	-40(%rbp), %rax	# x, tmp111
	movzwl	(%rax), %eax	# x_7->code, D.25726
	cmpw	$66, %ax	#, D.25726
	jne	.L469	#,
	.loc 1 2783 0
	movq	-40(%rbp), %rax	# x, tmp112
	movq	8(%rax), %rdx	# x_7->fld[0].rtx, D.25727
	movq	-40(%rbp), %rax	# x, tmp113
	movzbl	2(%rax), %eax	# x_7->mode, D.25724
	movzbl	%al, %eax	# D.25724, D.25728
	movq	%rdx, %rsi	# D.25727,
	movl	%eax, %edi	# D.25728,
	call	memory_address_p	#
	testl	%eax, %eax	# D.25729
	jne	.L470	#,
	.loc 1 2784 0
	movq	-40(%rbp), %rax	# x, tmp114
	movzbl	2(%rax), %eax	# x_7->mode, D.25724
	movzbl	%al, %edx	# D.25724, D.25728
	movq	-40(%rbp), %rax	# x, tmp115
	movl	%edx, %esi	# D.25728,
	movq	%rax, %rdi	# tmp115,
	call	push_operand	#
	testl	%eax, %eax	# D.25729
	je	.L471	#,
.L470:
	.loc 1 2785 0
	movl	flag_force_addr(%rip), %eax	# flag_force_addr, flag_force_addr.271
	testl	%eax, %eax	# flag_force_addr.271
	je	.L469	#,
	.loc 1 2786 0
	movq	-40(%rbp), %rax	# x, tmp116
	movq	8(%rax), %rax	# x_7->fld[0].rtx, D.25727
	movzwl	(%rax), %eax	# _23->code, D.25726
	cmpw	$67, %ax	#, D.25726
	je	.L471	#,
	.loc 1 2786 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp117
	movq	8(%rax), %rax	# x_7->fld[0].rtx, D.25727
	movzwl	(%rax), %eax	# _25->code, D.25726
	cmpw	$68, %ax	#, D.25726
	je	.L471	#,
	movq	-40(%rbp), %rax	# x, tmp118
	movq	8(%rax), %rax	# x_7->fld[0].rtx, D.25727
	movzwl	(%rax), %eax	# _27->code, D.25726
	cmpw	$54, %ax	#, D.25726
	je	.L471	#,
	movq	-40(%rbp), %rax	# x, tmp119
	movq	8(%rax), %rax	# x_7->fld[0].rtx, D.25727
	movzwl	(%rax), %eax	# _29->code, D.25726
	cmpw	$58, %ax	#, D.25726
	je	.L471	#,
	movq	-40(%rbp), %rax	# x, tmp120
	movq	8(%rax), %rax	# x_7->fld[0].rtx, D.25727
	movzwl	(%rax), %eax	# _31->code, D.25726
	cmpw	$55, %ax	#, D.25726
	jne	.L469	#,
.L471:
	.loc 1 2787 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp121
	movq	%rax, %rdi	# tmp121,
	call	validize_mem	#
	movq	%rax, -40(%rbp)	# tmp122, x
.L469:
	.loc 1 2789 0
	movq	-48(%rbp), %rax	# y, tmp123
	movzwl	(%rax), %eax	# y_9->code, D.25726
	cmpw	$66, %ax	#, D.25726
	jne	.L472	#,
	.loc 1 2790 0
	movq	-48(%rbp), %rax	# y, tmp124
	movq	8(%rax), %rdx	# y_9->fld[0].rtx, D.25727
	movq	-48(%rbp), %rax	# y, tmp125
	movzbl	2(%rax), %eax	# y_9->mode, D.25724
	movzbl	%al, %eax	# D.25724, D.25728
	movq	%rdx, %rsi	# D.25727,
	movl	%eax, %edi	# D.25728,
	call	memory_address_p	#
	testl	%eax, %eax	# D.25729
	je	.L473	#,
	.loc 1 2791 0
	movl	flag_force_addr(%rip), %eax	# flag_force_addr, flag_force_addr.272
	testl	%eax, %eax	# flag_force_addr.272
	je	.L472	#,
	.loc 1 2792 0
	movq	-48(%rbp), %rax	# y, tmp126
	movq	8(%rax), %rax	# y_9->fld[0].rtx, D.25727
	movzwl	(%rax), %eax	# _40->code, D.25726
	cmpw	$67, %ax	#, D.25726
	je	.L473	#,
	.loc 1 2792 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# y, tmp127
	movq	8(%rax), %rax	# y_9->fld[0].rtx, D.25727
	movzwl	(%rax), %eax	# _42->code, D.25726
	cmpw	$68, %ax	#, D.25726
	je	.L473	#,
	movq	-48(%rbp), %rax	# y, tmp128
	movq	8(%rax), %rax	# y_9->fld[0].rtx, D.25727
	movzwl	(%rax), %eax	# _44->code, D.25726
	cmpw	$54, %ax	#, D.25726
	je	.L473	#,
	movq	-48(%rbp), %rax	# y, tmp129
	movq	8(%rax), %rax	# y_9->fld[0].rtx, D.25727
	movzwl	(%rax), %eax	# _46->code, D.25726
	cmpw	$58, %ax	#, D.25726
	je	.L473	#,
	movq	-48(%rbp), %rax	# y, tmp130
	movq	8(%rax), %rax	# y_9->fld[0].rtx, D.25727
	movzwl	(%rax), %eax	# _48->code, D.25726
	cmpw	$55, %ax	#, D.25726
	jne	.L472	#,
.L473:
	.loc 1 2793 0 is_stmt 1
	movq	-48(%rbp), %rax	# y, tmp131
	movq	%rax, %rdi	# tmp131,
	call	validize_mem	#
	movq	%rax, -48(%rbp)	# tmp132, y
.L472:
	.loc 1 2795 0
	cmpl	$51, -20(%rbp)	#, mode
	jne	.L474	#,
	.loc 1 2796 0
	movl	$__FUNCTION__.14586, %edx	#,
	movl	$2796, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L474:
	.loc 1 2798 0
	movq	-48(%rbp), %rdx	# y, tmp133
	movq	-40(%rbp), %rax	# x, tmp134
	movq	%rdx, %rsi	# tmp133,
	movq	%rax, %rdi	# tmp134,
	call	emit_move_insn_1	#
	movq	%rax, -8(%rbp)	# tmp135, last_insn
	.loc 1 2800 0
	cmpq	$0, -16(%rbp)	#, y_cst
	je	.L475	#,
	.loc 1 2800 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp136
	movzwl	(%rax), %eax	# x_1->code, D.25726
	cmpw	$61, %ax	#, D.25726
	jne	.L475	#,
	.loc 1 2801 0 is_stmt 1
	movq	-16(%rbp), %rdx	# y_cst, tmp137
	movq	-8(%rbp), %rax	# last_insn, tmp138
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp138,
	call	set_unique_reg_note	#
.L475:
	.loc 1 2803 0
	movq	-8(%rbp), %rax	# last_insn, D.25730
	.loc 1 2804 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE33:
	.size	emit_move_insn, .-emit_move_insn
	.section	.rodata
	.align 8
.LC3:
	.string	"function using short complex types cannot be inline"
	.text
	.globl	emit_move_insn_1
	.type	emit_move_insn_1, @function
emit_move_insn_1:
.LFB34:
	.loc 1 2813 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$224, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -216(%rbp)	# x, x
	movq	%rsi, -224(%rbp)	# y, y
	.loc 1 2814 0
	movq	-216(%rbp), %rax	# x, tmp288
	movzbl	2(%rax), %eax	# x_29(D)->mode, D.25732
	movzbl	%al, %eax	# D.25732, tmp289
	movl	%eax, -188(%rbp)	# tmp289, mode
	.loc 1 2816 0
	movl	-188(%rbp), %eax	# mode, mode.273
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, tmp291
	movl	%eax, -184(%rbp)	# tmp291, class
	.loc 1 2818 0
	cmpl	$58, -188(%rbp)	#, mode
	jbe	.L478	#,
	.loc 1 2819 0
	movl	$__FUNCTION__.14594, %edx	#,
	movl	$2819, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L478:
	.loc 1 2821 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25733
	movl	-188(%rbp), %edx	# mode, mode.274
	movslq	%edx, %rdx	# mode.274, tmp292
	salq	$4, %rdx	#, tmp293
	addq	%rdx, %rax	# tmp293, tmp294
	movl	8(%rax), %eax	# _34->handlers[mode.274_35].insn_code, D.25734
	cmpl	$1317, %eax	#, D.25734
	je	.L479	#,
	.loc 1 2823 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25733
	movl	-188(%rbp), %edx	# mode, mode.275
	movslq	%edx, %rdx	# mode.275, tmp295
	salq	$4, %rdx	#, tmp296
	addq	%rdx, %rax	# tmp296, tmp297
	movl	8(%rax), %eax	# _37->handlers[mode.275_38].insn_code, D.25734
	movslq	%eax, %rdx	# D.25735, tmp298
	movq	%rdx, %rax	# tmp298, tmp299
	salq	$2, %rax	#, tmp299
	addq	%rdx, %rax	# tmp298, tmp299
	salq	$3, %rax	#, tmp300
	addq	$insn_data+16, %rax	#, tmp301
	movq	(%rax), %rdx	# insn_data[_40].genfun, D.25736
	movq	-224(%rbp), %rcx	# y, tmp302
	movq	-216(%rbp), %rax	# x, tmp303
	movq	%rcx, %rsi	# tmp302,
	movq	%rax, %rdi	# tmp303,
	movl	$0, %eax	#,
	call	*%rdx	# D.25736
	.loc 1 2822 0
	movq	%rax, %rdi	# D.25737,
	call	emit_insn	#
	jmp	.L480	#
.L479:
	.loc 1 2826 0
	cmpl	$6, -184(%rbp)	#, class
	je	.L481	#,
	.loc 1 2826 0 is_stmt 0 discriminator 1
	cmpl	$5, -184(%rbp)	#, class
	jne	.L482	#,
.L481:
	.loc 1 2827 0 is_stmt 1
	cmpl	$5, -184(%rbp)	#, class
	jne	.L483	#,
	.loc 1 2827 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.276
	jmp	.L484	#
.L483:
	.loc 1 2827 0 discriminator 2
	movl	$2, %eax	#, iftmp.276
.L484:
	.loc 1 2827 0 discriminator 3
	movl	-188(%rbp), %edx	# mode, mode.277
	movslq	%edx, %rdx	# mode.277, tmp304
	movzbl	mode_unit_size(%rdx), %edx	# mode_unit_size, D.25732
	.loc 1 2828 0 is_stmt 1 discriminator 3
	movzbl	%dl, %edx	# D.25732, D.25735
	sall	$3, %edx	#, D.25735
	.loc 1 2827 0 discriminator 3
	movl	%edx, %ecx	# D.25735, D.25738
	movl	$0, %edx	#,
	movl	%eax, %esi	# iftmp.276,
	movl	%ecx, %edi	# D.25738,
	call	mode_for_size	#
	movl	%eax, -180(%rbp)	# tmp305, submode
	cmpl	$51, -180(%rbp)	#, submode
	je	.L482	#,
	.loc 1 2832 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25733
	movl	-180(%rbp), %edx	# submode, submode.278
	movslq	%edx, %rdx	# submode.278, tmp306
	salq	$4, %rdx	#, tmp307
	addq	%rdx, %rax	# tmp307, tmp308
	movl	8(%rax), %eax	# _53->handlers[submode.278_54].insn_code, D.25734
	cmpl	$1317, %eax	#, D.25734
	je	.L482	#,
.LBB36:
	.loc 1 2836 0
	movq	-216(%rbp), %rax	# x, tmp309
	movzbl	2(%rax), %eax	# x_29(D)->mode, D.25732
	movzbl	%al, %edx	# D.25732, D.25739
	movq	-216(%rbp), %rax	# x, tmp310
	movl	%edx, %esi	# D.25739,
	movq	%rax, %rdi	# tmp310,
	call	push_operand	#
	movl	%eax, -176(%rbp)	# tmp311, stack
	.loc 1 2841 0
	cmpl	$0, -176(%rbp)	#, stack
	je	.L485	#,
	.loc 1 2842 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.280
	andl	$33554432, %eax	#, D.25735
	testl	%eax, %eax	# D.25735
	je	.L486	#,
	.loc 1 2842 0 is_stmt 0 discriminator 1
	movl	-180(%rbp), %eax	# submode, submode.281
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	addl	$7, %eax	#, D.25735
	andl	$-8, %eax	#, iftmp.279
	jmp	.L487	#
.L486:
	.loc 1 2842 0 discriminator 2
	movl	-180(%rbp), %eax	# submode, submode.282
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	addl	$1, %eax	#, D.25735
	andl	$-2, %eax	#, iftmp.279
.L487:
	.loc 1 2843 0 is_stmt 1 discriminator 3
	movl	-180(%rbp), %edx	# submode, submode.283
	movslq	%edx, %rdx	# submode.283, tmp314
	movzbl	mode_size(%rdx), %edx	# mode_size, D.25732
	movzbl	%dl, %edx	# D.25732, D.25735
	.loc 1 2842 0 discriminator 3
	cmpl	%edx, %eax	# D.25735, iftmp.279
	je	.L485	#,
.LBB37:
	.loc 1 2850 0
	movq	global_rtl+16(%rip), %rbx	# global_rtl, D.25737
	.loc 1 2857 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.285
	andl	$33554432, %eax	#, D.25735
	.loc 1 2850 0
	testl	%eax, %eax	# D.25735
	je	.L488	#,
	.loc 1 2857 0
	movq	-216(%rbp), %rax	# x, tmp315
	movzbl	2(%rax), %eax	# x_29(D)->mode, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	addl	$7, %eax	#, D.25735
	andl	$-8, %eax	#, D.25735
	.loc 1 2850 0
	cltq
	jmp	.L489	#
.L488:
	.loc 1 2857 0 discriminator 1
	movq	-216(%rbp), %rax	# x, tmp317
	movzbl	2(%rax), %eax	# x_29(D)->mode, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	addl	$1, %eax	#, D.25735
	andl	$-2, %eax	#, D.25735
	.loc 1 2850 0 discriminator 1
	cltq
.L489:
	.loc 1 2850 0 is_stmt 0 discriminator 2
	movq	%rax, %rsi	# iftmp.284,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25737
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.25737
	movq	optab_table+16(%rip), %rsi	# optab_table, D.25733
	movl	target_flags(%rip), %eax	# target_flags, target_flags.287
	andl	$33554432, %eax	#, D.25735
	testl	%eax, %eax	# D.25735
	je	.L490	#,
	.loc 1 2850 0 discriminator 3
	movl	$5, %eax	#, iftmp.286
	jmp	.L491	#
.L490:
	.loc 1 2850 0 discriminator 4
	movl	$4, %eax	#, iftmp.286
.L491:
	.loc 1 2850 0 discriminator 5
	movl	$3, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%rbx, %r8	# D.25737,
	movl	%eax, %edi	# iftmp.286,
	call	expand_binop	#
	movq	%rax, -128(%rbp)	# tmp319, temp
	.loc 1 2862 0 is_stmt 1 discriminator 5
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.25737
	cmpq	-128(%rbp), %rax	# temp, D.25737
	je	.L492	#,
	.loc 1 2863 0
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.25737
	movq	-128(%rbp), %rdx	# temp, tmp320
	movq	%rdx, %rsi	# tmp320,
	movq	%rax, %rdi	# D.25737,
	call	emit_move_insn	#
.L492:
	.loc 1 2866 0
	movq	$0, -120(%rbp)	#, offset1
	.loc 1 2867 0
	movl	-180(%rbp), %eax	# submode, submode.288
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %eax	# D.25732, tmp322
	movq	%rax, -112(%rbp)	# tmp322, offset2
	.loc 1 2874 0
	movq	-224(%rbp), %rdx	# y, tmp323
	movl	-180(%rbp), %eax	# submode, tmp324
	movq	%rdx, %rsi	# tmp323,
	movl	%eax, %edi	# tmp324,
	call	gen_realpart	#
	movq	%rax, %rbx	#, D.25737
	movq	-120(%rbp), %rax	# offset1, tmp325
	movq	%rax, %rsi	# tmp325,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25737
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.25737
	.loc 1 2875 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.290
	andl	$33554432, %eax	#, D.25735
	.loc 1 2874 0
	testl	%eax, %eax	# D.25735
	je	.L493	#,
	.loc 1 2874 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.289
	jmp	.L494	#
.L493:
	.loc 1 2874 0 discriminator 2
	movl	$4, %eax	#, iftmp.289
.L494:
	.loc 1 2874 0 discriminator 3
	movl	%eax, %esi	# iftmp.289,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.25737
	movl	-180(%rbp), %ecx	# submode, tmp326
	movq	-216(%rbp), %rax	# x, tmp327
	movl	%ecx, %esi	# tmp326,
	movq	%rax, %rdi	# tmp327,
	call	change_address	#
	movq	%rbx, %rsi	# D.25737,
	movq	%rax, %rdi	# D.25737,
	call	emit_move_insn	#
	.loc 1 2879 0 is_stmt 1 discriminator 3
	movq	-224(%rbp), %rdx	# y, tmp328
	movl	-180(%rbp), %eax	# submode, tmp329
	movq	%rdx, %rsi	# tmp328,
	movl	%eax, %edi	# tmp329,
	call	gen_imagpart	#
	movq	%rax, %rbx	#, D.25737
	movq	-112(%rbp), %rax	# offset2, tmp330
	movq	%rax, %rsi	# tmp330,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25737
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.25737
	.loc 1 2880 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.292
	andl	$33554432, %eax	#, D.25735
	.loc 1 2879 0 discriminator 3
	testl	%eax, %eax	# D.25735
	je	.L495	#,
	.loc 1 2879 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.291
	jmp	.L496	#
.L495:
	.loc 1 2879 0 discriminator 2
	movl	$4, %eax	#, iftmp.291
.L496:
	.loc 1 2879 0 discriminator 3
	movl	%eax, %esi	# iftmp.291,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.25737
	movl	-180(%rbp), %ecx	# submode, tmp331
	movq	-216(%rbp), %rax	# x, tmp332
	movl	%ecx, %esi	# tmp331,
	movq	%rax, %rdi	# tmp332,
	call	change_address	#
	movq	%rbx, %rsi	# D.25737,
	movq	%rax, %rdi	# D.25737,
	call	emit_move_insn	#
.LBE37:
	.loc 1 2844 0 is_stmt 1 discriminator 3
	jmp	.L497	#
.L485:
	.loc 1 2892 0
	cmpl	$0, -176(%rbp)	#, stack
	je	.L498	#,
	.loc 1 2897 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25733
	movl	-180(%rbp), %edx	# submode, submode.293
	movslq	%edx, %rdx	# submode.293, tmp333
	salq	$4, %rdx	#, tmp334
	addq	%rdx, %rax	# tmp334, tmp335
	movl	8(%rax), %eax	# _123->handlers[submode.293_124].insn_code, D.25734
	.loc 1 2898 0
	movslq	%eax, %rdx	# D.25735, tmp336
	movq	%rdx, %rax	# tmp336, tmp337
	salq	$2, %rax	#, tmp337
	addq	%rdx, %rax	# tmp336, tmp337
	salq	$3, %rax	#, tmp338
	addq	$insn_data+16, %rax	#, tmp339
	movq	(%rax), %rbx	# insn_data[_126].genfun, D.25736
	.loc 1 2897 0
	movq	-224(%rbp), %rdx	# y, tmp340
	movl	-180(%rbp), %eax	# submode, tmp341
	movq	%rdx, %rsi	# tmp340,
	movl	%eax, %edi	# tmp341,
	call	gen_imagpart	#
	movq	%rax, %r12	#, D.25737
	movq	-216(%rbp), %rax	# x, tmp342
	movq	8(%rax), %rdx	# x_29(D)->fld[0].rtx, D.25737
	movl	-180(%rbp), %eax	# submode, tmp343
	movq	%rdx, %rsi	# D.25737,
	movl	%eax, %edi	# tmp343,
	call	gen_rtx_MEM	#
	movq	%r12, %rsi	# D.25737,
	movq	%rax, %rdi	# D.25737,
	movl	$0, %eax	#,
	call	*%rbx	# D.25736
	movq	%rax, %rdi	# D.25737,
	call	emit_insn	#
	.loc 1 2900 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25733
	movl	-180(%rbp), %edx	# submode, submode.294
	movslq	%edx, %rdx	# submode.294, tmp344
	salq	$4, %rdx	#, tmp345
	addq	%rdx, %rax	# tmp345, tmp346
	movl	8(%rax), %eax	# _132->handlers[submode.294_133].insn_code, D.25734
	.loc 1 2901 0
	movslq	%eax, %rdx	# D.25735, tmp347
	movq	%rdx, %rax	# tmp347, tmp348
	salq	$2, %rax	#, tmp348
	addq	%rdx, %rax	# tmp347, tmp348
	salq	$3, %rax	#, tmp349
	addq	$insn_data+16, %rax	#, tmp350
	movq	(%rax), %rbx	# insn_data[_135].genfun, D.25736
	.loc 1 2900 0
	movq	-224(%rbp), %rdx	# y, tmp351
	movl	-180(%rbp), %eax	# submode, tmp352
	movq	%rdx, %rsi	# tmp351,
	movl	%eax, %edi	# tmp352,
	call	gen_realpart	#
	movq	%rax, %r12	#, D.25737
	movq	-216(%rbp), %rax	# x, tmp353
	movq	8(%rax), %rdx	# x_29(D)->fld[0].rtx, D.25737
	movl	-180(%rbp), %eax	# submode, tmp354
	movq	%rdx, %rsi	# D.25737,
	movl	%eax, %edi	# tmp354,
	call	gen_rtx_MEM	#
	movq	%r12, %rsi	# D.25737,
	movq	%rax, %rdi	# D.25737,
	movl	$0, %eax	#,
	call	*%rbx	# D.25736
	movq	%rax, %rdi	# D.25737,
	call	emit_insn	#
	jmp	.L497	#
.L498:
.LBB38:
	.loc 1 2926 0
	movl	-188(%rbp), %eax	# mode, mode.295
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25740
	movzwl	%ax, %edx	# D.25740, D.25735
	movl	target_flags(%rip), %eax	# target_flags, target_flags.297
	andl	$33554432, %eax	#, D.25735
	testl	%eax, %eax	# D.25735
	je	.L499	#,
	.loc 1 2926 0 is_stmt 0 discriminator 1
	movl	$128, %eax	#, iftmp.296
	jmp	.L500	#
.L499:
	.loc 1 2926 0 discriminator 2
	movl	$64, %eax	#, iftmp.296
.L500:
	.loc 1 2926 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.296, D.25735
	jge	.L501	#,
	.loc 1 2927 0 is_stmt 1
	movl	reload_in_progress(%rip), %edx	# reload_in_progress, reload_in_progress.298
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.299
	orl	%edx, %eax	# reload_in_progress.298, D.25735
	testl	%eax, %eax	# D.25735
	jne	.L501	#,
.LBB39:
	.loc 1 2930 0
	movq	-216(%rbp), %rax	# x, tmp356
	movzwl	(%rax), %eax	# x_29(D)->code, D.25740
	cmpw	$61, %ax	#, D.25740
	jne	.L502	#,
	.loc 1 2930 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# x, tmp357
	movl	8(%rax), %eax	# x_29(D)->fld[0].rtuint, D.25738
	cmpl	$52, %eax	#, D.25738
	ja	.L502	#,
	.loc 1 2930 0 discriminator 3
	movl	$1, %eax	#, iftmp.300
	jmp	.L503	#
.L502:
	.loc 1 2930 0 discriminator 2
	movl	$0, %eax	#, iftmp.300
.L503:
	.loc 1 2929 0 is_stmt 1
	movl	%eax, -172(%rbp)	# iftmp.300, packed_dest_p
	.loc 1 2932 0
	movq	-224(%rbp), %rax	# y, tmp358
	movzwl	(%rax), %eax	# y_42(D)->code, D.25740
	cmpw	$61, %ax	#, D.25740
	jne	.L504	#,
	.loc 1 2932 0 is_stmt 0 discriminator 1
	movq	-224(%rbp), %rax	# y, tmp359
	movl	8(%rax), %eax	# y_42(D)->fld[0].rtuint, D.25738
	cmpl	$52, %eax	#, D.25738
	ja	.L504	#,
	.loc 1 2932 0 discriminator 3
	movl	$1, %eax	#, iftmp.301
	jmp	.L505	#
.L504:
	.loc 1 2932 0 discriminator 2
	movl	$0, %eax	#, iftmp.301
.L505:
	.loc 1 2931 0 is_stmt 1
	movl	%eax, -168(%rbp)	# iftmp.301, packed_src_p
	.loc 1 2934 0
	cmpl	$0, -172(%rbp)	#, packed_dest_p
	jne	.L506	#,
	.loc 1 2934 0 is_stmt 0 discriminator 1
	cmpl	$0, -168(%rbp)	#, packed_src_p
	je	.L501	#,
.L506:
.LBB40:
	.loc 1 2936 0 is_stmt 1
	cmpl	$6, -184(%rbp)	#, class
	jne	.L507	#,
	.loc 1 2936 0 is_stmt 0 discriminator 1
	movl	$2, %eax	#, iftmp.302
	jmp	.L508	#
.L507:
	.loc 1 2936 0 discriminator 2
	movl	$1, %eax	#, iftmp.302
.L508:
	.loc 1 2936 0 discriminator 3
	movl	%eax, -164(%rbp)	# iftmp.302, reg_class
	.loc 1 2940 0 is_stmt 1 discriminator 3
	movl	-188(%rbp), %eax	# mode, mode.303
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25740
	movzwl	%ax, %eax	# D.25740, D.25738
	.loc 1 2939 0 discriminator 3
	movl	-164(%rbp), %ecx	# reg_class, tmp361
	movl	$1, %edx	#,
	movl	%ecx, %esi	# tmp361,
	movl	%eax, %edi	# D.25738,
	call	mode_for_size	#
	movl	%eax, -160(%rbp)	# tmp362, reg_mode
	.loc 1 2942 0 discriminator 3
	cmpl	$51, -160(%rbp)	#, reg_mode
	je	.L501	#,
.LBB41:
	.loc 1 2945 0
	movl	-188(%rbp), %eax	# mode, mode.304
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	.loc 1 2944 0
	movzbl	%al, %ecx	# D.25732, D.25741
	movl	-160(%rbp), %eax	# reg_mode, tmp364
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25741,
	movl	%eax, %edi	# tmp364,
	call	assign_stack_temp	#
	movq	%rax, -104(%rbp)	# tmp365, mem
	.loc 1 2946 0
	movl	-188(%rbp), %esi	# mode, tmp366
	movq	-104(%rbp), %rax	# mem, tmp367
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp367,
	call	adjust_address_1	#
	movq	%rax, -96(%rbp)	# tmp368, cmem
	.loc 1 2948 0
	movq	cfun(%rip), %rax	# cfun, cfun.305
	.loc 1 2949 0
	movq	$.LC3, 136(%rax)	#, cfun.305_173->cannot_inline
	.loc 1 2951 0
	cmpl	$0, -172(%rbp)	#, packed_dest_p
	je	.L509	#,
.LBB42:
	.loc 1 2953 0
	movq	-216(%rbp), %rcx	# x, tmp369
	movl	-160(%rbp), %eax	# reg_mode, tmp370
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp369,
	movl	%eax, %edi	# tmp370,
	call	gen_rtx_SUBREG	#
	movq	%rax, -88(%rbp)	# tmp371, sreg
	.loc 1 2955 0
	movq	-224(%rbp), %rdx	# y, tmp372
	movq	-96(%rbp), %rax	# cmem, tmp373
	movq	%rdx, %rsi	# tmp372,
	movq	%rax, %rdi	# tmp373,
	call	emit_move_insn_1	#
	.loc 1 2956 0
	movq	-104(%rbp), %rdx	# mem, tmp374
	movq	-88(%rbp), %rax	# sreg, tmp375
	movq	%rdx, %rsi	# tmp374,
	movq	%rax, %rdi	# tmp375,
	call	emit_move_insn_1	#
	jmp	.L480	#
.L509:
.LBE42:
.LBB43:
	.loc 1 2960 0
	movq	-224(%rbp), %rcx	# y, tmp376
	movl	-160(%rbp), %eax	# reg_mode, tmp377
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp376,
	movl	%eax, %edi	# tmp377,
	call	gen_rtx_SUBREG	#
	movq	%rax, -80(%rbp)	# tmp378, sreg
	.loc 1 2962 0
	movq	-80(%rbp), %rdx	# sreg, tmp379
	movq	-104(%rbp), %rax	# mem, tmp380
	movq	%rdx, %rsi	# tmp379,
	movq	%rax, %rdi	# tmp380,
	call	emit_move_insn_1	#
	.loc 1 2963 0
	movq	-96(%rbp), %rdx	# cmem, tmp381
	movq	-216(%rbp), %rax	# x, tmp382
	movq	%rdx, %rsi	# tmp381,
	movq	%rax, %rdi	# tmp382,
	call	emit_move_insn_1	#
	jmp	.L480	#
.L501:
.LBE43:
.LBE41:
.LBE40:
.LBE39:
	.loc 1 2969 0
	movq	-216(%rbp), %rdx	# x, tmp383
	movl	-180(%rbp), %eax	# submode, tmp384
	movq	%rdx, %rsi	# tmp383,
	movl	%eax, %edi	# tmp384,
	call	gen_realpart	#
	movq	%rax, -72(%rbp)	# tmp385, realpart_x
	.loc 1 2970 0
	movq	-224(%rbp), %rdx	# y, tmp386
	movl	-180(%rbp), %eax	# submode, tmp387
	movq	%rdx, %rsi	# tmp386,
	movl	%eax, %edi	# tmp387,
	call	gen_realpart	#
	movq	%rax, -64(%rbp)	# tmp388, realpart_y
	.loc 1 2971 0
	movq	-216(%rbp), %rdx	# x, tmp389
	movl	-180(%rbp), %eax	# submode, tmp390
	movq	%rdx, %rsi	# tmp389,
	movl	%eax, %edi	# tmp390,
	call	gen_imagpart	#
	movq	%rax, -56(%rbp)	# tmp391, imagpart_x
	.loc 1 2972 0
	movq	-224(%rbp), %rdx	# y, tmp392
	movl	-180(%rbp), %eax	# submode, tmp393
	movq	%rdx, %rsi	# tmp392,
	movl	%eax, %edi	# tmp393,
	call	gen_imagpart	#
	movq	%rax, -48(%rbp)	# tmp394, imagpart_y
	.loc 1 2978 0
	movq	-216(%rbp), %rax	# x, tmp395
	cmpq	-224(%rbp), %rax	# y, tmp395
	je	.L510	#,
	.loc 1 2979 0
	movl	reload_in_progress(%rip), %eax	# reload_in_progress, reload_in_progress.306
	testl	%eax, %eax	# reload_in_progress.306
	jne	.L510	#,
	.loc 1 2979 0 is_stmt 0 discriminator 1
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.307
	testl	%eax, %eax	# reload_completed.307
	jne	.L510	#,
	.loc 1 2980 0 is_stmt 1
	movq	-72(%rbp), %rax	# realpart_x, tmp396
	movzwl	(%rax), %eax	# realpart_x_178->code, D.25740
	cmpw	$63, %ax	#, D.25740
	je	.L511	#,
	.loc 1 2981 0
	movq	-56(%rbp), %rax	# imagpart_x, tmp397
	movzwl	(%rax), %eax	# imagpart_x_180->code, D.25740
	cmpw	$63, %ax	#, D.25740
	jne	.L510	#,
.L511:
	.loc 1 2982 0
	movq	-216(%rbp), %rax	# x, tmp398
	movq	%rax, %rdx	# tmp398,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdi	# D.25737,
	call	emit_insn	#
.L510:
	.loc 1 2984 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25733
	movl	-180(%rbp), %edx	# submode, submode.308
	movslq	%edx, %rdx	# submode.308, tmp399
	salq	$4, %rdx	#, tmp400
	addq	%rdx, %rax	# tmp400, tmp401
	movl	8(%rax), %eax	# _187->handlers[submode.308_188].insn_code, D.25734
	.loc 1 2985 0
	movslq	%eax, %rdx	# D.25735, tmp402
	movq	%rdx, %rax	# tmp402, tmp403
	salq	$2, %rax	#, tmp403
	addq	%rdx, %rax	# tmp402, tmp403
	salq	$3, %rax	#, tmp404
	addq	$insn_data+16, %rax	#, tmp405
	movq	(%rax), %rdx	# insn_data[_190].genfun, D.25736
	.loc 1 2984 0
	movq	-64(%rbp), %rcx	# realpart_y, tmp406
	movq	-72(%rbp), %rax	# realpart_x, tmp407
	movq	%rcx, %rsi	# tmp406,
	movq	%rax, %rdi	# tmp407,
	movl	$0, %eax	#,
	call	*%rdx	# D.25736
	movq	%rax, %rdi	# D.25737,
	call	emit_insn	#
	.loc 1 2986 0
	movq	optab_table+240(%rip), %rax	# optab_table, D.25733
	movl	-180(%rbp), %edx	# submode, submode.309
	movslq	%edx, %rdx	# submode.309, tmp408
	salq	$4, %rdx	#, tmp409
	addq	%rdx, %rax	# tmp409, tmp410
	movl	8(%rax), %eax	# _193->handlers[submode.309_194].insn_code, D.25734
	.loc 1 2987 0
	movslq	%eax, %rdx	# D.25735, tmp411
	movq	%rdx, %rax	# tmp411, tmp412
	salq	$2, %rax	#, tmp412
	addq	%rdx, %rax	# tmp411, tmp412
	salq	$3, %rax	#, tmp413
	addq	$insn_data+16, %rax	#, tmp414
	movq	(%rax), %rdx	# insn_data[_196].genfun, D.25736
	.loc 1 2986 0
	movq	-48(%rbp), %rcx	# imagpart_y, tmp415
	movq	-56(%rbp), %rax	# imagpart_x, tmp416
	movq	%rcx, %rsi	# tmp415,
	movq	%rax, %rdi	# tmp416,
	movl	$0, %eax	#,
	call	*%rdx	# D.25736
	movq	%rax, %rdi	# D.25737,
	call	emit_insn	#
.L497:
.LBE38:
	.loc 1 2990 0
	call	get_last_insn	#
	jmp	.L480	#
.L482:
.LBE36:
	.loc 1 2996 0
	movl	-188(%rbp), %eax	# mode, mode.310
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %edx	# D.25732, D.25735
	movl	target_flags(%rip), %eax	# target_flags, target_flags.312
	andl	$33554432, %eax	#, D.25735
	testl	%eax, %eax	# D.25735
	je	.L512	#,
	.loc 1 2996 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.311
	jmp	.L513	#
.L512:
	.loc 1 2996 0 discriminator 2
	movl	$4, %eax	#, iftmp.311
.L513:
	.loc 1 2996 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.311, D.25735
	jle	.L514	#,
.LBB44:
	.loc 1 2998 0 is_stmt 1
	movq	$0, -152(%rbp)	#, last_insn
	.loc 1 3007 0
	movq	-216(%rbp), %rax	# x, tmp418
	movzbl	2(%rax), %eax	# x_29(D)->mode, D.25732
	movzbl	%al, %edx	# D.25732, D.25739
	movq	-216(%rbp), %rax	# x, tmp419
	movl	%edx, %esi	# D.25739,
	movq	%rax, %rdi	# tmp419,
	call	push_operand	#
	testl	%eax, %eax	# D.25735
	je	.L515	#,
.LBB45:
	.loc 1 3014 0
	movq	global_rtl+16(%rip), %rbx	# global_rtl, D.25737
	.loc 1 3021 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.314
	andl	$33554432, %eax	#, D.25735
	.loc 1 3014 0
	testl	%eax, %eax	# D.25735
	je	.L516	#,
	.loc 1 3021 0
	movq	-216(%rbp), %rax	# x, tmp420
	movzbl	2(%rax), %eax	# x_29(D)->mode, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	addl	$7, %eax	#, D.25735
	andl	$-8, %eax	#, D.25735
	.loc 1 3014 0
	cltq
	jmp	.L517	#
.L516:
	.loc 1 3021 0 discriminator 1
	movq	-216(%rbp), %rax	# x, tmp422
	movzbl	2(%rax), %eax	# x_29(D)->mode, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	addl	$1, %eax	#, D.25735
	andl	$-2, %eax	#, D.25735
	.loc 1 3014 0 discriminator 1
	cltq
.L517:
	.loc 1 3014 0 is_stmt 0 discriminator 2
	movq	%rax, %rsi	# iftmp.313,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25737
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.25737
	movq	optab_table+16(%rip), %rsi	# optab_table, D.25733
	movl	target_flags(%rip), %eax	# target_flags, target_flags.316
	andl	$33554432, %eax	#, D.25735
	testl	%eax, %eax	# D.25735
	je	.L518	#,
	.loc 1 3014 0 discriminator 3
	movl	$5, %eax	#, iftmp.315
	jmp	.L519	#
.L518:
	.loc 1 3014 0 discriminator 4
	movl	$4, %eax	#, iftmp.315
.L519:
	.loc 1 3014 0 discriminator 5
	movl	$3, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%rbx, %r8	# D.25737,
	movl	%eax, %edi	# iftmp.315,
	call	expand_binop	#
	movq	%rax, -144(%rbp)	# tmp424, temp
	.loc 1 3026 0 is_stmt 1 discriminator 5
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.25737
	cmpq	-144(%rbp), %rax	# temp, D.25737
	je	.L520	#,
	.loc 1 3027 0
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.25737
	movq	-144(%rbp), %rdx	# temp, tmp425
	movq	%rdx, %rsi	# tmp425,
	movq	%rax, %rdi	# D.25737,
	call	emit_move_insn	#
.L520:
	.loc 1 3029 0
	movq	-216(%rbp), %rax	# x, tmp426
	movq	8(%rax), %rax	# x_29(D)->fld[0].rtx, D.25737
	movzwl	(%rax), %eax	# _238->code, D.25740
	movzwl	%ax, %eax	# D.25740, tmp427
	movl	%eax, -156(%rbp)	# tmp427, code
	.loc 1 3032 0
	cmpl	$99, -156(%rbp)	#, code
	jne	.L521	#,
	.loc 1 3033 0
	movq	-216(%rbp), %rax	# x, tmp428
	movzbl	2(%rax), %eax	# x_29(D)->mode, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %eax	# D.25732, D.25741
	negq	%rax	# D.25741
	movq	%rax, %rsi	# D.25741,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25737
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.25737
	movl	target_flags(%rip), %eax	# target_flags, target_flags.318
	andl	$33554432, %eax	#, D.25735
	testl	%eax, %eax	# D.25735
	je	.L522	#,
	.loc 1 3033 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.317
	jmp	.L523	#
.L522:
	.loc 1 3033 0 discriminator 2
	movl	$4, %eax	#, iftmp.317
.L523:
	.loc 1 3033 0 discriminator 1
	movl	%eax, %esi	# iftmp.317,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -144(%rbp)	# tmp430, temp
	jmp	.L524	#
.L521:
	.loc 1 3036 0 is_stmt 1
	cmpl	$98, -156(%rbp)	#, code
	jne	.L525	#,
	.loc 1 3037 0
	movq	-216(%rbp), %rax	# x, tmp431
	movzbl	2(%rax), %eax	# x_29(D)->mode, D.25732
	movzbl	%al, %eax	# D.25732, D.25735
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %eax	# D.25732, D.25741
	movq	%rax, %rsi	# D.25741,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25737
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.25737
	movl	target_flags(%rip), %eax	# target_flags, target_flags.320
	andl	$33554432, %eax	#, D.25735
	testl	%eax, %eax	# D.25735
	je	.L526	#,
	.loc 1 3037 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.319
	jmp	.L527	#
.L526:
	.loc 1 3037 0 discriminator 2
	movl	$4, %eax	#, iftmp.319
.L527:
	movl	%eax, %esi	# iftmp.319,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -144(%rbp)	# tmp433, temp
	jmp	.L524	#
.L525:
	.loc 1 3040 0 is_stmt 1
	movq	global_rtl+16(%rip), %rax	# global_rtl, tmp434
	movq	%rax, -144(%rbp)	# tmp434, temp
.L524:
	.loc 1 3042 0
	movq	-144(%rbp), %rdx	# temp, tmp435
	movq	-216(%rbp), %rax	# x, tmp436
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp436,
	call	change_address	#
	movq	%rax, -216(%rbp)	# tmp437, x
.L515:
.LBE45:
	.loc 1 3048 0
	movl	reload_in_progress(%rip), %eax	# reload_in_progress, reload_in_progress.321
	testl	%eax, %eax	# reload_in_progress.321
	je	.L528	#,
	.loc 1 3048 0 is_stmt 0 discriminator 1
	movq	-216(%rbp), %rax	# x, tmp438
	movzwl	(%rax), %eax	# x_1->code, D.25740
	cmpw	$66, %ax	#, D.25740
	jne	.L528	#,
	.loc 1 3049 0 is_stmt 1
	movq	-216(%rbp), %rax	# x, tmp439
	addq	$8, %rax	#, D.25742
	movq	%rax, %rdi	# D.25742,
	call	find_replacement	#
	movq	%rax, -40(%rbp)	# tmp440, inner
	movq	-216(%rbp), %rax	# x, tmp441
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.25737
	cmpq	%rax, -40(%rbp)	# D.25737, inner
	je	.L528	#,
	.loc 1 3050 0
	movq	-40(%rbp), %rdx	# inner, tmp442
	movq	-216(%rbp), %rax	# x, tmp443
	movq	%rdx, %rsi	# tmp442,
	movq	%rax, %rdi	# tmp443,
	call	replace_equiv_address_nv	#
	movq	%rax, -216(%rbp)	# tmp444, x
.L528:
	.loc 1 3051 0
	movl	reload_in_progress(%rip), %eax	# reload_in_progress, reload_in_progress.322
	testl	%eax, %eax	# reload_in_progress.322
	je	.L529	#,
	.loc 1 3051 0 is_stmt 0 discriminator 1
	movq	-224(%rbp), %rax	# y, tmp445
	movzwl	(%rax), %eax	# y_42(D)->code, D.25740
	cmpw	$66, %ax	#, D.25740
	jne	.L529	#,
	.loc 1 3052 0 is_stmt 1
	movq	-224(%rbp), %rax	# y, tmp446
	addq	$8, %rax	#, D.25742
	movq	%rax, %rdi	# D.25742,
	call	find_replacement	#
	movq	%rax, -40(%rbp)	# tmp447, inner
	movq	-224(%rbp), %rax	# y, tmp448
	movq	8(%rax), %rax	# y_42(D)->fld[0].rtx, D.25737
	cmpq	%rax, -40(%rbp)	# D.25737, inner
	je	.L529	#,
	.loc 1 3053 0
	movq	-40(%rbp), %rdx	# inner, tmp449
	movq	-224(%rbp), %rax	# y, tmp450
	movq	%rdx, %rsi	# tmp449,
	movq	%rax, %rdi	# tmp450,
	call	replace_equiv_address_nv	#
	movq	%rax, -224(%rbp)	# tmp451, y
.L529:
	.loc 1 3055 0
	call	start_sequence	#
	.loc 1 3057 0
	movl	$0, -196(%rbp)	#, need_clobber
	.loc 1 3058 0
	movl	$0, -192(%rbp)	#, i
	jmp	.L530	#
.L540:
.LBB46:
	.loc 1 3062 0
	movl	-192(%rbp), %esi	# i, i.323
	movl	-188(%rbp), %edx	# mode, tmp452
	movq	-216(%rbp), %rax	# x, tmp453
	movl	%edx, %ecx	# tmp452,
	movl	$1, %edx	#,
	movq	%rax, %rdi	# tmp453,
	call	operand_subword	#
	movq	%rax, -32(%rbp)	# tmp454, xpart
	.loc 1 3063 0
	movl	-192(%rbp), %esi	# i, i.324
	movl	-188(%rbp), %edx	# mode, tmp455
	movq	-224(%rbp), %rax	# y, tmp456
	movl	%edx, %ecx	# tmp455,
	movl	$1, %edx	#,
	movq	%rax, %rdi	# tmp456,
	call	operand_subword	#
	movq	%rax, -136(%rbp)	# tmp457, ypart
	.loc 1 3068 0
	cmpq	$0, -136(%rbp)	#, ypart
	jne	.L531	#,
	.loc 1 3068 0 is_stmt 0 discriminator 1
	movq	-224(%rbp), %rax	# y, tmp458
	movzwl	(%rax), %eax	# y_5->code, D.25740
	cmpw	$67, %ax	#, D.25740
	je	.L532	#,
	movq	-224(%rbp), %rax	# y, tmp459
	movzwl	(%rax), %eax	# y_5->code, D.25740
	cmpw	$68, %ax	#, D.25740
	je	.L532	#,
	movq	-224(%rbp), %rax	# y, tmp460
	movzwl	(%rax), %eax	# y_5->code, D.25740
	cmpw	$54, %ax	#, D.25740
	je	.L532	#,
	movq	-224(%rbp), %rax	# y, tmp461
	movzwl	(%rax), %eax	# y_5->code, D.25740
	cmpw	$55, %ax	#, D.25740
	je	.L532	#,
	movq	-224(%rbp), %rax	# y, tmp462
	movzwl	(%rax), %eax	# y_5->code, D.25740
	cmpw	$58, %ax	#, D.25740
	je	.L532	#,
	movq	-224(%rbp), %rax	# y, tmp463
	movzwl	(%rax), %eax	# y_5->code, D.25740
	cmpw	$134, %ax	#, D.25740
	je	.L532	#,
	movq	-224(%rbp), %rax	# y, tmp464
	movzwl	(%rax), %eax	# y_5->code, D.25740
	cmpw	$56, %ax	#, D.25740
	je	.L532	#,
	movq	-224(%rbp), %rax	# y, tmp465
	movzwl	(%rax), %eax	# y_5->code, D.25740
	cmpw	$140, %ax	#, D.25740
	jne	.L531	#,
.L532:
	.loc 1 3070 0 is_stmt 1
	movq	-224(%rbp), %rdx	# y, tmp466
	movl	-188(%rbp), %eax	# mode, tmp467
	movq	%rdx, %rsi	# tmp466,
	movl	%eax, %edi	# tmp467,
	call	force_const_mem	#
	movq	%rax, -224(%rbp)	# tmp468, y
	.loc 1 3071 0
	movl	-192(%rbp), %esi	# i, i.325
	movl	-188(%rbp), %edx	# mode, tmp469
	movq	-224(%rbp), %rax	# y, tmp470
	movl	%edx, %ecx	# tmp469,
	movl	$1, %edx	#,
	movq	%rax, %rdi	# tmp470,
	call	operand_subword	#
	movq	%rax, -136(%rbp)	# tmp471, ypart
	jmp	.L533	#
.L531:
	.loc 1 3073 0
	cmpq	$0, -136(%rbp)	#, ypart
	jne	.L533	#,
	.loc 1 3074 0
	movl	-192(%rbp), %ecx	# i, i.326
	movl	-188(%rbp), %edx	# mode, tmp472
	movq	-224(%rbp), %rax	# y, tmp473
	movl	%ecx, %esi	# i.326,
	movq	%rax, %rdi	# tmp473,
	call	operand_subword_force	#
	movq	%rax, -136(%rbp)	# tmp474, ypart
.L533:
	.loc 1 3076 0
	cmpq	$0, -32(%rbp)	#, xpart
	je	.L534	#,
	.loc 1 3076 0 is_stmt 0 discriminator 1
	cmpq	$0, -136(%rbp)	#, ypart
	jne	.L535	#,
.L534:
	.loc 1 3077 0 is_stmt 1
	movl	$__FUNCTION__.14594, %edx	#,
	movl	$3077, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L535:
	.loc 1 3079 0
	movq	-32(%rbp), %rax	# xpart, tmp475
	movzwl	(%rax), %eax	# xpart_294->code, D.25740
	cmpw	$63, %ax	#, D.25740
	sete	%al	#, D.25743
	movzbl	%al, %eax	# D.25743, D.25735
	orl	%eax, -196(%rbp)	# D.25735, need_clobber
	.loc 1 3081 0
	movq	-136(%rbp), %rdx	# ypart, tmp476
	movq	-32(%rbp), %rax	# xpart, tmp477
	movq	%rdx, %rsi	# tmp476,
	movq	%rax, %rdi	# tmp477,
	call	emit_move_insn	#
	movq	%rax, -152(%rbp)	# tmp478, last_insn
.LBE46:
	.loc 1 3060 0
	addl	$1, -192(%rbp)	#, i
.L530:
	.loc 1 3059 0
	movl	-188(%rbp), %eax	# mode, mode.327
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25732
	movzbl	%al, %edx	# D.25732, D.25735
	movl	target_flags(%rip), %eax	# target_flags, target_flags.329
	andl	$33554432, %eax	#, D.25735
	testl	%eax, %eax	# D.25735
	je	.L536	#,
	.loc 1 3059 0 is_stmt 0 discriminator 1
	movl	$7, %eax	#, iftmp.328
	jmp	.L537	#
.L536:
	.loc 1 3059 0 discriminator 2
	movl	$3, %eax	#, iftmp.328
.L537:
	.loc 1 3059 0 discriminator 3
	addl	%edx, %eax	# D.25735, D.25735
	movl	target_flags(%rip), %edx	# target_flags, target_flags.331
	andl	$33554432, %edx	#, D.25735
	testl	%edx, %edx	# D.25735
	je	.L538	#,
	.loc 1 3059 0 discriminator 1
	movl	$8, %ebx	#, iftmp.330
	jmp	.L539	#
.L538:
	.loc 1 3059 0 discriminator 2
	movl	$4, %ebx	#, iftmp.330
.L539:
	.loc 1 3059 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.330
	.loc 1 3058 0 is_stmt 1 discriminator 3
	cmpl	-192(%rbp), %eax	# i, D.25735
	jg	.L540	#,
	.loc 1 3084 0
	call	gen_sequence	#
	movq	%rax, -24(%rbp)	# tmp482, seq
	.loc 1 3085 0
	call	end_sequence	#
	.loc 1 3091 0
	movq	-216(%rbp), %rax	# x, tmp483
	cmpq	-224(%rbp), %rax	# y, tmp483
	je	.L541	#,
	.loc 1 3092 0
	movl	reload_in_progress(%rip), %eax	# reload_in_progress, reload_in_progress.332
	testl	%eax, %eax	# reload_in_progress.332
	jne	.L541	#,
	.loc 1 3092 0 is_stmt 0 discriminator 1
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.333
	testl	%eax, %eax	# reload_completed.333
	jne	.L541	#,
	.loc 1 3093 0 is_stmt 1
	cmpl	$0, -196(%rbp)	#, need_clobber
	je	.L541	#,
	.loc 1 3094 0
	movq	-216(%rbp), %rax	# x, tmp484
	movq	%rax, %rdx	# tmp484,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdi	# D.25737,
	call	emit_insn	#
.L541:
	.loc 1 3096 0
	movq	-24(%rbp), %rax	# seq, tmp485
	movq	%rax, %rdi	# tmp485,
	call	emit_insn	#
	.loc 1 3098 0
	movq	-152(%rbp), %rax	# last_insn, D.25731
	jmp	.L480	#
.L514:
.LBE44:
	.loc 1 3101 0
	movl	$__FUNCTION__.14594, %edx	#,
	movl	$3101, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L480:
	.loc 1 3102 0
	addq	$224, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE34:
	.size	emit_move_insn_1, .-emit_move_insn_1
	.globl	push_block
	.type	push_block, @function
push_block:
.LFB35:
	.loc 1 3119 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# size, size
	movl	%esi, -28(%rbp)	# extra, extra
	movl	%edx, -32(%rbp)	# below, below
	.loc 1 3122 0
	movl	ptr_mode(%rip), %esi	# ptr_mode, ptr_mode.334
	movl	target_flags(%rip), %eax	# target_flags, target_flags.336
	andl	$33554432, %eax	#, D.25745
	testl	%eax, %eax	# D.25745
	je	.L543	#,
	.loc 1 3122 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.335
	jmp	.L544	#
.L543:
	.loc 1 3122 0 discriminator 2
	movl	$4, %eax	#, iftmp.335
.L544:
	.loc 1 3122 0 discriminator 3
	movq	-24(%rbp), %rdx	# size, tmp87
	movl	$1, %ecx	#,
	movl	%eax, %edi	# iftmp.335,
	call	convert_modes	#
	movq	%rax, -24(%rbp)	# tmp88, size
	.loc 1 3123 0 is_stmt 1 discriminator 3
	movq	-24(%rbp), %rax	# size, tmp89
	movzwl	(%rax), %eax	# size_12->code, D.25746
	cmpw	$67, %ax	#, D.25746
	je	.L545	#,
	.loc 1 3123 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# size, tmp90
	movzwl	(%rax), %eax	# size_12->code, D.25746
	cmpw	$68, %ax	#, D.25746
	je	.L545	#,
	movq	-24(%rbp), %rax	# size, tmp91
	movzwl	(%rax), %eax	# size_12->code, D.25746
	cmpw	$54, %ax	#, D.25746
	je	.L545	#,
	movq	-24(%rbp), %rax	# size, tmp92
	movzwl	(%rax), %eax	# size_12->code, D.25746
	cmpw	$55, %ax	#, D.25746
	je	.L545	#,
	movq	-24(%rbp), %rax	# size, tmp93
	movzwl	(%rax), %eax	# size_12->code, D.25746
	cmpw	$58, %ax	#, D.25746
	je	.L545	#,
	movq	-24(%rbp), %rax	# size, tmp94
	movzwl	(%rax), %eax	# size_12->code, D.25746
	cmpw	$134, %ax	#, D.25746
	je	.L545	#,
	movq	-24(%rbp), %rax	# size, tmp95
	movzwl	(%rax), %eax	# size_12->code, D.25746
	cmpw	$56, %ax	#, D.25746
	je	.L545	#,
	movq	-24(%rbp), %rax	# size, tmp96
	movzwl	(%rax), %eax	# size_12->code, D.25746
	cmpw	$140, %ax	#, D.25746
	jne	.L546	#,
.L545:
	.loc 1 3124 0 is_stmt 1
	movl	-28(%rbp), %eax	# extra, tmp97
	movslq	%eax, %rdx	# tmp97, D.25747
	movq	-24(%rbp), %rax	# size, tmp98
	movq	%rdx, %rsi	# D.25747,
	movq	%rax, %rdi	# tmp98,
	call	plus_constant_wide	#
	movq	%rax, %rdi	# D.25748,
	call	anti_adjust_stack	#
	jmp	.L547	#
.L546:
	.loc 1 3125 0
	movq	-24(%rbp), %rax	# size, tmp99
	movzwl	(%rax), %eax	# size_12->code, D.25746
	cmpw	$61, %ax	#, D.25746
	jne	.L548	#,
	.loc 1 3125 0 is_stmt 0 discriminator 1
	cmpl	$0, -28(%rbp)	#, extra
	jne	.L548	#,
	.loc 1 3126 0 is_stmt 1
	movq	-24(%rbp), %rax	# size, tmp100
	movq	%rax, %rdi	# tmp100,
	call	anti_adjust_stack	#
	jmp	.L547	#
.L548:
	.loc 1 3129 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.338
	andl	$33554432, %eax	#, D.25745
	testl	%eax, %eax	# D.25745
	je	.L549	#,
	.loc 1 3129 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.337
	jmp	.L550	#
.L549:
	.loc 1 3129 0 discriminator 2
	movl	$4, %eax	#, iftmp.337
.L550:
	.loc 1 3129 0 discriminator 3
	movq	-24(%rbp), %rdx	# size, tmp101
	movq	%rdx, %rsi	# tmp101,
	movl	%eax, %edi	# iftmp.337,
	call	copy_to_mode_reg	#
	movq	%rax, -8(%rbp)	# tmp102, temp
	.loc 1 3130 0 is_stmt 1 discriminator 3
	cmpl	$0, -28(%rbp)	#, extra
	je	.L551	#,
	.loc 1 3131 0
	movl	-28(%rbp), %eax	# extra, tmp103
	cltq
	movq	%rax, %rsi	# D.25747,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25748
	movq	optab_table(%rip), %rsi	# optab_table, D.25749
	movl	target_flags(%rip), %eax	# target_flags, target_flags.340
	andl	$33554432, %eax	#, D.25745
	testl	%eax, %eax	# D.25745
	je	.L552	#,
	.loc 1 3131 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.339
	jmp	.L553	#
.L552:
	.loc 1 3131 0 discriminator 2
	movl	$4, %eax	#, iftmp.339
.L553:
	.loc 1 3131 0 discriminator 3
	movq	-8(%rbp), %rdi	# temp, tmp104
	movq	-8(%rbp), %rdx	# temp, tmp105
	movl	$3, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%rdi, %r8	# tmp104,
	movl	%eax, %edi	# iftmp.339,
	call	expand_binop	#
	movq	%rax, -8(%rbp)	# tmp106, temp
.L551:
	.loc 1 3133 0 is_stmt 1
	movq	-8(%rbp), %rax	# temp, tmp107
	movq	%rax, %rdi	# tmp107,
	call	anti_adjust_stack	#
.L547:
	.loc 1 3142 0
	movq	global_rtl+72(%rip), %rax	# global_rtl, tmp108
	movq	%rax, -8(%rbp)	# tmp108, temp
	.loc 1 3143 0
	cmpl	$0, -28(%rbp)	#, extra
	je	.L556	#,
	.loc 1 3143 0 is_stmt 0 discriminator 1
	cmpl	$0, -32(%rbp)	#, below
	je	.L556	#,
	.loc 1 3144 0 is_stmt 1
	movl	-28(%rbp), %eax	# extra, tmp109
	movslq	%eax, %rdx	# tmp109, D.25747
	movq	-8(%rbp), %rax	# temp, tmp110
	movq	%rdx, %rsi	# D.25747,
	movq	%rax, %rdi	# tmp110,
	call	plus_constant_wide	#
	movq	%rax, -8(%rbp)	# tmp111, temp
.L556:
	.loc 1 3159 0
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, D.25750
	movq	-8(%rbp), %rdx	# temp, tmp112
	movq	%rdx, %rsi	# tmp112,
	movl	%eax, %edi	# D.25750,
	call	memory_address	#
	.loc 1 3160 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE35:
	.size	push_block, .-push_block
	.type	emit_single_push_insn, @function
emit_single_push_insn:
.LFB36:
	.loc 1 3171 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movl	%edi, -36(%rbp)	# mode, mode
	movq	%rsi, -48(%rbp)	# x, x
	movq	%rdx, -56(%rbp)	# type, type
	.loc 1 3173 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.351
	andl	$33554432, %eax	#, D.25752
	testl	%eax, %eax	# D.25752
	je	.L558	#,
	.loc 1 3173 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %eax	# mode, mode.352
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25753
	movzbl	%al, %eax	# D.25753, D.25752
	addl	$7, %eax	#, D.25752
	andl	$-8, %eax	#, iftmp.350
	jmp	.L559	#
.L558:
	.loc 1 3173 0 discriminator 2
	movl	-36(%rbp), %eax	# mode, mode.353
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25753
	movzbl	%al, %eax	# D.25753, D.25752
	addl	$1, %eax	#, D.25752
	andl	$-2, %eax	#, iftmp.350
.L559:
	.loc 1 3173 0 discriminator 3
	movl	%eax, -32(%rbp)	# iftmp.350, rounded_size
	.loc 1 3178 0 is_stmt 1 discriminator 3
	movq	cfun(%rip), %rax	# cfun, cfun.354
	movq	16(%rax), %rdx	# cfun.354_24->expr, D.25755
	movq	cfun(%rip), %rax	# cfun, cfun.355
	movq	16(%rax), %rax	# cfun.355_26->expr, D.25755
	movl	8(%rax), %ecx	# _27->x_stack_pointer_delta, D.25752
	movl	target_flags(%rip), %eax	# target_flags, target_flags.357
	andl	$33554432, %eax	#, D.25752
	testl	%eax, %eax	# D.25752
	je	.L560	#,
	.loc 1 3178 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %eax	# mode, mode.358
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25753
	movzbl	%al, %eax	# D.25753, D.25752
	addl	$7, %eax	#, D.25752
	andl	$-8, %eax	#, iftmp.356
	jmp	.L561	#
.L560:
	.loc 1 3178 0 discriminator 2
	movl	-36(%rbp), %eax	# mode, mode.359
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25753
	movzbl	%al, %eax	# D.25753, D.25752
	addl	$1, %eax	#, D.25752
	andl	$-2, %eax	#, iftmp.356
.L561:
	.loc 1 3178 0 discriminator 3
	addl	%ecx, %eax	# D.25752, D.25752
	movl	%eax, 8(%rdx)	# D.25752, _25->x_stack_pointer_delta
	.loc 1 3181 0 is_stmt 1 discriminator 3
	movq	optab_table+384(%rip), %rax	# optab_table, D.25756
	movl	-36(%rbp), %edx	# mode, mode.360
	movslq	%edx, %rdx	# mode.360, tmp120
	salq	$4, %rdx	#, tmp121
	addq	%rdx, %rax	# tmp121, tmp122
	movl	8(%rax), %eax	# _42->handlers[mode.360_43].insn_code, tmp123
	movl	%eax, -28(%rbp)	# tmp123, icode
	.loc 1 3182 0 discriminator 3
	cmpl	$1317, -28(%rbp)	#, icode
	je	.L562	#,
	.loc 1 3184 0
	movl	-28(%rbp), %eax	# icode, icode.361
	movslq	%eax, %rdx	# icode.361, tmp124
	movq	%rdx, %rax	# tmp124, tmp125
	salq	$2, %rax	#, tmp125
	addq	%rdx, %rax	# tmp124, tmp125
	salq	$3, %rax	#, tmp126
	addq	$insn_data+24, %rax	#, tmp127
	movq	(%rax), %rax	# insn_data[icode.361_45].operand, D.25757
	movq	(%rax), %rax	# _46->predicate, tmp128
	movq	%rax, -16(%rbp)	# tmp128, pred
	cmpq	$0, -16(%rbp)	#, pred
	je	.L563	#,
	.loc 1 3185 0
	movl	-36(%rbp), %ecx	# mode, tmp129
	movq	-48(%rbp), %rdx	# x, tmp130
	movq	-16(%rbp), %rax	# pred, tmp131
	movl	%ecx, %esi	# tmp129,
	movq	%rdx, %rdi	# tmp130,
	call	*%rax	# tmp131
	testl	%eax, %eax	# D.25752
	jne	.L563	#,
	.loc 1 3186 0
	movq	-48(%rbp), %rdx	# x, tmp132
	movl	-36(%rbp), %eax	# mode, tmp133
	movq	%rdx, %rsi	# tmp132,
	movl	%eax, %edi	# tmp133,
	call	force_reg	#
	movq	%rax, -48(%rbp)	# tmp134, x
.L563:
	.loc 1 3187 0
	movl	-28(%rbp), %eax	# icode, icode.362
	movslq	%eax, %rdx	# icode.362, tmp135
	movq	%rdx, %rax	# tmp135, tmp136
	salq	$2, %rax	#, tmp136
	addq	%rdx, %rax	# tmp135, tmp136
	salq	$3, %rax	#, tmp137
	addq	$insn_data+16, %rax	#, tmp138
	movq	(%rax), %rdx	# insn_data[icode.362_51].genfun, D.25758
	movq	-48(%rbp), %rax	# x, tmp139
	movq	%rax, %rdi	# tmp139,
	movl	$0, %eax	#,
	call	*%rdx	# D.25758
	movq	%rax, %rdi	# D.25759,
	call	emit_insn	#
	.loc 1 3188 0
	jmp	.L557	#
.L562:
	.loc 1 3190 0
	movl	-36(%rbp), %eax	# mode, mode.363
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25753
	movzbl	%al, %eax	# D.25753, D.25754
	cmpl	-32(%rbp), %eax	# rounded_size, D.25754
	jne	.L565	#,
	.loc 1 3191 0
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.25759
	movl	target_flags(%rip), %eax	# target_flags, target_flags.365
	andl	$33554432, %eax	#, D.25752
	testl	%eax, %eax	# D.25752
	je	.L566	#,
	.loc 1 3191 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.364
	jmp	.L567	#
.L566:
	.loc 1 3191 0 discriminator 2
	movl	$4, %eax	#, iftmp.364
.L567:
	.loc 1 3191 0 discriminator 1
	movl	%eax, %esi	# iftmp.364,
	movl	$96, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, -24(%rbp)	# tmp141, dest_addr
	jmp	.L568	#
.L565:
	.loc 1 3195 0 is_stmt 1
	movl	-32(%rbp), %eax	# rounded_size, D.25760
	negq	%rax	# D.25760
	movq	%rax, %rsi	# D.25760,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25759
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.25759
	movl	target_flags(%rip), %eax	# target_flags, target_flags.367
	andl	$33554432, %eax	#, D.25752
	testl	%eax, %eax	# D.25752
	je	.L569	#,
	.loc 1 3195 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.366
	jmp	.L570	#
.L569:
	.loc 1 3195 0 discriminator 2
	movl	$4, %eax	#, iftmp.366
.L570:
	.loc 1 3195 0 discriminator 3
	movl	%eax, %esi	# iftmp.366,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -24(%rbp)	# tmp142, dest_addr
	.loc 1 3201 0 is_stmt 1 discriminator 3
	movq	global_rtl+16(%rip), %rdx	# global_rtl, D.25759
	movl	target_flags(%rip), %eax	# target_flags, target_flags.369
	andl	$33554432, %eax	#, D.25752
	testl	%eax, %eax	# D.25752
	je	.L571	#,
	.loc 1 3201 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.368
	jmp	.L572	#
.L571:
	.loc 1 3201 0 discriminator 2
	movl	$4, %eax	#, iftmp.368
.L572:
	.loc 1 3201 0 discriminator 3
	movq	-24(%rbp), %rcx	# dest_addr, tmp143
	movl	%eax, %esi	# iftmp.368,
	movl	$100, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -24(%rbp)	# tmp144, dest_addr
.L568:
	.loc 1 3204 0 is_stmt 1
	movq	-24(%rbp), %rdx	# dest_addr, tmp145
	movl	-36(%rbp), %eax	# mode, tmp146
	movq	%rdx, %rsi	# tmp145,
	movl	%eax, %edi	# tmp146,
	call	gen_rtx_MEM	#
	movq	%rax, -8(%rbp)	# tmp147, dest
	.loc 1 3206 0
	cmpq	$0, -56(%rbp)	#, type
	je	.L573	#,
	.loc 1 3208 0
	movq	-56(%rbp), %rcx	# type, tmp148
	movq	-8(%rbp), %rax	# dest, tmp149
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp148,
	movq	%rax, %rdi	# tmp149,
	call	set_mem_attributes	#
	.loc 1 3210 0
	movl	flag_optimize_sibling_calls(%rip), %eax	# flag_optimize_sibling_calls, flag_optimize_sibling_calls.370
	testl	%eax, %eax	# flag_optimize_sibling_calls.370
	je	.L573	#,
	.loc 1 3215 0
	movq	-8(%rbp), %rax	# dest, tmp150
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp150,
	call	set_mem_alias_set	#
.L573:
	.loc 1 3217 0
	movq	-48(%rbp), %rdx	# x, tmp151
	movq	-8(%rbp), %rax	# dest, tmp152
	movq	%rdx, %rsi	# tmp151,
	movq	%rax, %rdi	# tmp152,
	call	emit_move_insn	#
.L557:
	.loc 1 3218 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE36:
	.size	emit_single_push_insn, .-emit_single_push_insn
	.globl	emit_push_insn
	.type	emit_push_insn, @function
emit_push_insn:
.LFB37:
	.loc 1 3269 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$240, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -168(%rbp)	# x, x
	movl	%esi, -172(%rbp)	# mode, mode
	movq	%rdx, -184(%rbp)	# type, type
	movq	%rcx, -192(%rbp)	# size, size
	movl	%r8d, -176(%rbp)	# align, align
	movl	%r9d, -196(%rbp)	# partial, partial
	.loc 1 3271 0
	movl	$2, -144(%rbp)	#, stack_direction
	.loc 1 3281 0
	movl	$1, -140(%rbp)	#, where_pad
	.loc 1 3289 0
	movq	-168(%rbp), %rax	# x, tmp254
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp254,
	call	protect_from_queue	#
	movq	%rax, -168(%rbp)	# tmp255, x
	movq	-168(%rbp), %rax	# x, tmp256
	movq	%rax, -104(%rbp)	# tmp256, xinner
	.loc 1 3291 0
	cmpl	$51, -172(%rbp)	#, mode
	jne	.L575	#,
.LBB47:
	.loc 1 3296 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.373
	andl	$33554432, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	je	.L576	#,
	.loc 1 3296 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.372
	jmp	.L577	#
.L576:
	.loc 1 3296 0 discriminator 2
	movl	$4, %eax	#, iftmp.372
.L577:
	.loc 1 3296 0 discriminator 3
	imull	-196(%rbp), %eax	# partial, tmp257
	movl	%eax, -136(%rbp)	# tmp257, used
	.loc 1 3297 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.375
	andl	$33554432, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	je	.L578	#,
	.loc 1 3297 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.374
	jmp	.L579	#
.L578:
	.loc 1 3297 0 discriminator 2
	movl	$4, %ebx	#, iftmp.374
.L579:
	.loc 1 3297 0 discriminator 3
	movl	-136(%rbp), %eax	# used, tmp259
	cltd
	idivl	%ebx	# iftmp.374
	movl	%edx, %ecx	# tmp260, tmp260
	movl	%ecx, -132(%rbp)	# tmp260, offset
	.loc 1 3300 0 is_stmt 1 discriminator 3
	cmpq	$0, -192(%rbp)	#, size
	jne	.L580	#,
	.loc 1 3301 0
	movl	$__FUNCTION__.14660, %edx	#,
	movl	$3301, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L580:
	.loc 1 3303 0
	movl	-132(%rbp), %eax	# offset, tmp262
	subl	%eax, -136(%rbp)	# tmp262, used
	.loc 1 3308 0
	cmpl	$0, -196(%rbp)	#, partial
	je	.L581	#,
	.loc 1 3309 0
	movl	-136(%rbp), %eax	# used, tmp263
	movslq	%eax, %rdx	# tmp263, D.25762
	movq	-104(%rbp), %rax	# xinner, tmp264
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$51, %esi	#,
	movq	%rax, %rdi	# tmp264,
	call	adjust_address_1	#
	movq	%rax, -104(%rbp)	# tmp265, xinner
.L581:
	.loc 1 3315 0
	cmpl	$0, 48(%rbp)	#, reg_parm_stack_space
	je	.L582	#,
	.loc 1 3315 0 is_stmt 0 discriminator 1
	movl	-136(%rbp), %eax	# used, iftmp.376
	jmp	.L583	#
.L582:
	.loc 1 3315 0 discriminator 2
	movl	$0, %eax	#, iftmp.376
.L583:
	.loc 1 3315 0 discriminator 3
	movl	%eax, -128(%rbp)	# iftmp.376, skip
	.loc 1 3321 0 is_stmt 1 discriminator 3
	cmpq	$0, 32(%rbp)	#, args_addr
	jne	.L584	#,
	.loc 1 3322 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.377
	andl	$2048, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	jne	.L584	#,
	.loc 1 3322 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.378
	andl	$4096, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	jne	.L584	#,
	.loc 1 3323 0 is_stmt 1
	movq	-192(%rbp), %rax	# size, tmp266
	movzwl	(%rax), %eax	# size_48(D)->code, D.25763
	cmpw	$54, %ax	#, D.25763
	jne	.L584	#,
	.loc 1 3324 0
	cmpl	$0, -128(%rbp)	#, skip
	jne	.L584	#,
	.loc 1 3325 0
	movq	-192(%rbp), %rax	# size, tmp267
	movq	8(%rax), %rax	# size_48(D)->fld[0].rtwint, D.25762
	movl	%eax, %edx	# D.25762, D.25764
	movl	-136(%rbp), %eax	# used, used.379
	subl	%eax, %edx	# used.379, D.25764
	movl	%edx, %eax	# D.25764, D.25764
	movl	%eax, %eax	# D.25764, D.25765
	movl	-176(%rbp), %edx	# align, tmp268
	movl	%edx, %esi	# tmp268,
	movq	%rax, %rdi	# D.25765,
	call	move_by_pieces_ninsns	#
	movq	%rax, %rdx	#, D.25765
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.381
	testl	%eax, %eax	# optimize_size.381
	jne	.L585	#,
	.loc 1 3325 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.382
	movl	40(%rax), %eax	# ix86_cost.382_70->move_ratio, D.25761
	movl	%eax, %eax	# D.25764, iftmp.380
	jmp	.L586	#
.L585:
	.loc 1 3325 0 discriminator 2
	movl	$3, %eax	#, iftmp.380
.L586:
	.loc 1 3325 0 discriminator 3
	cmpq	%rax, %rdx	# iftmp.380, D.25765
	jae	.L584	#,
	.loc 1 3333 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.384
	andl	$33554432, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	je	.L587	#,
	.loc 1 3333 0 is_stmt 0 discriminator 1
	movq	-192(%rbp), %rax	# size, tmp269
	movq	8(%rax), %rax	# size_48(D)->fld[0].rtwint, D.25762
	addq	$7, %rax	#, D.25762
	andq	$-8, %rax	#, iftmp.383
	jmp	.L588	#
.L587:
	.loc 1 3333 0 discriminator 2
	movq	-192(%rbp), %rax	# size, tmp270
	movq	8(%rax), %rax	# size_48(D)->fld[0].rtwint, D.25762
	addq	$1, %rax	#, D.25762
	andq	$-2, %rax	#, iftmp.383
.L588:
	.loc 1 3333 0 discriminator 3
	movq	-192(%rbp), %rdx	# size, tmp271
	movq	8(%rdx), %rdx	# size_48(D)->fld[0].rtwint, D.25762
	cmpq	%rdx, %rax	# D.25762, iftmp.383
	jne	.L584	#,
	.loc 1 3338 0 is_stmt 1
	cmpl	$0, 24(%rbp)	#, extra
	je	.L589	#,
	.loc 1 3338 0 is_stmt 0 discriminator 1
	cmpq	$0, 32(%rbp)	#, args_addr
	jne	.L589	#,
	.loc 1 3339 0 is_stmt 1
	cmpl	$0, -140(%rbp)	#, where_pad
	je	.L589	#,
	.loc 1 3339 0 is_stmt 0 discriminator 1
	movl	-140(%rbp), %eax	# where_pad, tmp272
	cmpl	-144(%rbp), %eax	# stack_direction, tmp272
	je	.L589	#,
	.loc 1 3340 0 is_stmt 1
	movl	24(%rbp), %eax	# extra, tmp273
	cltq
	movq	%rax, %rsi	# D.25762,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdi	# D.25766,
	call	anti_adjust_stack	#
.L589:
	.loc 1 3342 0
	movq	-192(%rbp), %rax	# size, tmp274
	movq	8(%rax), %rdx	# size_48(D)->fld[0].rtwint, D.25762
	movl	-136(%rbp), %eax	# used, tmp275
	cltq
	subq	%rax, %rdx	# D.25762, D.25762
	movq	%rdx, %rax	# D.25762, D.25762
	movq	%rax, %rdx	# D.25762, D.25765
	movl	-176(%rbp), %ecx	# align, tmp276
	movq	-104(%rbp), %rax	# xinner, tmp277
	movq	%rax, %rsi	# tmp277,
	movl	$0, %edi	#,
	call	move_by_pieces	#
	jmp	.L603	#
.L584:
.LBB48:
	.loc 1 3353 0
	cmpl	$0, -196(%rbp)	#, partial
	je	.L591	#,
	.loc 1 3355 0
	movq	-192(%rbp), %rax	# size, tmp278
	movzwl	(%rax), %eax	# size_48(D)->code, D.25763
	cmpw	$54, %ax	#, D.25763
	jne	.L592	#,
	.loc 1 3356 0
	movq	-192(%rbp), %rax	# size, tmp279
	movq	8(%rax), %rdx	# size_48(D)->fld[0].rtwint, D.25762
	movl	-136(%rbp), %eax	# used, tmp280
	cltq
	subq	%rax, %rdx	# D.25762, D.25762
	movq	%rdx, %rax	# D.25762, D.25762
	movq	%rax, %rsi	# D.25762,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -192(%rbp)	# tmp281, size
	jmp	.L591	#
.L592:
	.loc 1 3358 0
	movl	-136(%rbp), %eax	# used, tmp282
	cltq
	movq	%rax, %rsi	# D.25762,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25766
	movq	optab_table+16(%rip), %rsi	# optab_table, D.25767
	movq	-192(%rbp), %rax	# size, tmp283
	movzbl	2(%rax), %eax	# size_48(D)->mode, D.25768
	movzbl	%al, %eax	# D.25768, D.25769
	movq	-192(%rbp), %rdx	# size, tmp284
	movl	$3, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movl	%eax, %edi	# D.25769,
	call	expand_binop	#
	movq	%rax, -192(%rbp)	# tmp285, size
.L591:
	.loc 1 3366 0
	cmpq	$0, 32(%rbp)	#, args_addr
	jne	.L593	#,
	.loc 1 3368 0
	cmpl	$2, -140(%rbp)	#, where_pad
	sete	%al	#, D.25770
	movzbl	%al, %edx	# D.25770, D.25761
	movl	24(%rbp), %ecx	# extra, tmp286
	movq	-192(%rbp), %rax	# size, tmp287
	movl	%ecx, %esi	# tmp286,
	movq	%rax, %rdi	# tmp287,
	call	push_block	#
	movq	%rax, -96(%rbp)	# tmp288, temp
	.loc 1 3369 0
	movl	$0, 24(%rbp)	#, extra
	jmp	.L594	#
.L593:
	.loc 1 3371 0
	movq	40(%rbp), %rax	# args_so_far, tmp289
	movzwl	(%rax), %eax	# args_so_far_106(D)->code, D.25763
	cmpw	$54, %ax	#, D.25763
	jne	.L595	#,
	.loc 1 3372 0
	movl	-128(%rbp), %eax	# skip, tmp290
	movslq	%eax, %rdx	# tmp290, D.25762
	.loc 1 3373 0
	movq	40(%rbp), %rax	# args_so_far, tmp291
	movq	8(%rax), %rax	# args_so_far_106(D)->fld[0].rtwint, D.25762
	.loc 1 3372 0
	addq	%rax, %rdx	# D.25762, D.25762
	movq	32(%rbp), %rax	# args_addr, tmp292
	movq	%rdx, %rsi	# D.25762,
	movq	%rax, %rdi	# tmp292,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.25766,
	movl	$51, %edi	#,
	call	memory_address	#
	movq	%rax, -96(%rbp)	# tmp293, temp
	jmp	.L594	#
.L595:
	.loc 1 3376 0
	movl	-128(%rbp), %eax	# skip, tmp294
	movslq	%eax, %rbx	# tmp294, D.25762
	.loc 1 3377 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.386
	andl	$33554432, %eax	#, D.25761
	.loc 1 3376 0
	testl	%eax, %eax	# D.25761
	je	.L596	#,
	.loc 1 3376 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.385
	jmp	.L597	#
.L596:
	.loc 1 3376 0 discriminator 2
	movl	$4, %eax	#, iftmp.385
.L597:
	.loc 1 3376 0 discriminator 3
	movq	40(%rbp), %rcx	# args_so_far, tmp295
	movq	32(%rbp), %rdx	# args_addr, tmp296
	movl	%eax, %esi	# iftmp.385,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rbx, %rsi	# D.25762,
	movq	%rax, %rdi	# D.25766,
	call	plus_constant_wide	#
	movq	%rax, %rsi	# D.25766,
	movl	$51, %edi	#,
	call	memory_address	#
	movq	%rax, -96(%rbp)	# tmp297, temp
.L594:
	.loc 1 3381 0 is_stmt 1
	movq	-96(%rbp), %rax	# temp, tmp298
	movq	%rax, %rsi	# tmp298,
	movl	$51, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -72(%rbp)	# tmp299, target
	.loc 1 3383 0
	cmpq	$0, -184(%rbp)	#, type
	je	.L598	#,
	.loc 1 3385 0
	movq	-184(%rbp), %rcx	# type, tmp300
	movq	-72(%rbp), %rax	# target, tmp301
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp300,
	movq	%rax, %rdi	# tmp301,
	call	set_mem_attributes	#
	.loc 1 3390 0
	movq	-72(%rbp), %rax	# target, tmp302
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp302,
	call	set_mem_alias_set	#
	jmp	.L599	#
.L598:
	.loc 1 3393 0
	movl	-176(%rbp), %edx	# align, tmp303
	movq	-72(%rbp), %rax	# target, tmp304
	movl	%edx, %esi	# tmp303,
	movq	%rax, %rdi	# tmp304,
	call	set_mem_align	#
.L599:
	.loc 1 3396 0
	movq	-192(%rbp), %rax	# size, tmp305
	movzwl	(%rax), %eax	# size_3->code, D.25763
	cmpw	$54, %ax	#, D.25763
	jne	.L600	#,
	.loc 1 3397 0
	movq	-192(%rbp), %rax	# size, tmp306
	movq	8(%rax), %rax	# size_3->fld[0].rtwint, D.25762
	movl	%eax, %eax	# D.25764, D.25765
	movl	-176(%rbp), %edx	# align, tmp307
	movl	%edx, %esi	# tmp307,
	movq	%rax, %rdi	# D.25765,
	call	move_by_pieces_ninsns	#
	movq	%rax, %rdx	#, D.25765
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.388
	testl	%eax, %eax	# optimize_size.388
	jne	.L601	#,
	.loc 1 3397 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.389
	movl	40(%rax), %eax	# ix86_cost.389_129->move_ratio, D.25761
	movl	%eax, %eax	# D.25764, iftmp.387
	jmp	.L602	#
.L601:
	.loc 1 3397 0 discriminator 2
	movl	$3, %eax	#, iftmp.387
.L602:
	.loc 1 3397 0 discriminator 3
	cmpq	%rax, %rdx	# iftmp.387, D.25765
	jae	.L600	#,
	.loc 1 3399 0 is_stmt 1
	movq	-192(%rbp), %rax	# size, tmp308
	movq	8(%rax), %rax	# size_3->fld[0].rtwint, D.25762
	movq	%rax, %rdx	# D.25762, D.25765
	movl	-176(%rbp), %ecx	# align, tmp309
	movq	-104(%rbp), %rsi	# xinner, tmp310
	movq	-72(%rbp), %rax	# target, tmp311
	movq	%rax, %rdi	# tmp311,
	call	move_by_pieces	#
	.loc 1 3400 0
	jmp	.L603	#
.L600:
.LBB49:
	.loc 1 3404 0
	movl	-176(%rbp), %eax	# align, tmp312
	shrl	$3, %eax	#, D.25764
	movl	%eax, %eax	# D.25764, D.25762
	movq	%rax, %rsi	# D.25762,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -64(%rbp)	# tmp313, opalign
	.loc 1 3407 0
	movl	class_narrowest_mode+4(%rip), %eax	# class_narrowest_mode, tmp314
	movl	%eax, -156(%rbp)	# tmp314, mode
	jmp	.L604	#
.L615:
.LBB50:
	.loc 1 3411 0
	movl	-156(%rbp), %eax	# mode, mode.390
	cltq
	movl	movstr_optab(,%rax,4), %eax	# movstr_optab, tmp316
	movl	%eax, -124(%rbp)	# tmp316, code
	.loc 1 3414 0
	cmpl	$1317, -124(%rbp)	#, code
	je	.L605	#,
	.loc 1 3415 0
	movq	-192(%rbp), %rax	# size, tmp317
	movzwl	(%rax), %eax	# size_3->code, D.25763
	cmpw	$54, %ax	#, D.25763
	jne	.L606	#,
	.loc 1 3416 0
	movq	-192(%rbp), %rax	# size, tmp318
	movq	8(%rax), %rax	# size_3->fld[0].rtwint, D.25762
	movq	%rax, %rdx	# D.25762, D.25765
	.loc 1 3417 0
	movl	-156(%rbp), %eax	# mode, mode.391
	cltq
	movq	mode_mask_array(,%rax,8), %rax	# mode_mask_array, D.25765
	shrq	%rax	# D.25765
	.loc 1 3416 0
	cmpq	%rax, %rdx	# D.25765, D.25765
	jbe	.L607	#,
.L606:
	.loc 1 3418 0
	movl	-156(%rbp), %eax	# mode, mode.392
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25763
	movzwl	%ax, %edx	# D.25763, D.25761
	movl	target_flags(%rip), %eax	# target_flags, target_flags.394
	andl	$33554432, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	je	.L608	#,
	.loc 1 3418 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.393
	jmp	.L609	#
.L608:
	.loc 1 3418 0 discriminator 2
	movl	$32, %eax	#, iftmp.393
.L609:
	.loc 1 3418 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.393, D.25761
	jl	.L605	#,
.L607:
	.loc 1 3419 0 is_stmt 1
	movl	-124(%rbp), %eax	# code, code.395
	movslq	%eax, %rdx	# code.395, tmp321
	movq	%rdx, %rax	# tmp321, tmp322
	salq	$2, %rax	#, tmp322
	addq	%rdx, %rax	# tmp321, tmp322
	salq	$3, %rax	#, tmp323
	addq	$insn_data+24, %rax	#, tmp324
	movq	(%rax), %rax	# insn_data[code.395_155].operand, D.25771
	movq	(%rax), %rax	# _156->predicate, tmp325
	movq	%rax, -56(%rbp)	# tmp325, pred
	cmpq	$0, -56(%rbp)	#, pred
	je	.L610	#,
	.loc 1 3420 0
	movq	-72(%rbp), %rdx	# target, tmp326
	movq	-56(%rbp), %rax	# pred, tmp327
	movl	$51, %esi	#,
	movq	%rdx, %rdi	# tmp326,
	call	*%rax	# tmp327
	testl	%eax, %eax	# D.25761
	je	.L605	#,
.L610:
	.loc 1 3421 0
	movl	-124(%rbp), %eax	# code, code.396
	movslq	%eax, %rdx	# code.396, tmp328
	movq	%rdx, %rax	# tmp328, tmp329
	salq	$2, %rax	#, tmp329
	addq	%rdx, %rax	# tmp328, tmp329
	salq	$3, %rax	#, tmp330
	addq	$insn_data+24, %rax	#, tmp331
	movq	(%rax), %rax	# insn_data[code.396_159].operand, D.25771
	addq	$24, %rax	#, D.25771
	movq	(%rax), %rax	# _161->predicate, tmp332
	movq	%rax, -56(%rbp)	# tmp332, pred
	cmpq	$0, -56(%rbp)	#, pred
	je	.L611	#,
	.loc 1 3422 0
	movq	-104(%rbp), %rdx	# xinner, tmp333
	movq	-56(%rbp), %rax	# pred, tmp334
	movl	$51, %esi	#,
	movq	%rdx, %rdi	# tmp333,
	call	*%rax	# tmp334
	testl	%eax, %eax	# D.25761
	je	.L605	#,
.L611:
	.loc 1 3423 0
	movl	-124(%rbp), %eax	# code, code.397
	movslq	%eax, %rdx	# code.397, tmp335
	movq	%rdx, %rax	# tmp335, tmp336
	salq	$2, %rax	#, tmp336
	addq	%rdx, %rax	# tmp335, tmp336
	salq	$3, %rax	#, tmp337
	addq	$insn_data+24, %rax	#, tmp338
	movq	(%rax), %rax	# insn_data[code.397_164].operand, D.25771
	addq	$72, %rax	#, D.25771
	movq	(%rax), %rax	# _166->predicate, tmp339
	movq	%rax, -56(%rbp)	# tmp339, pred
	cmpq	$0, -56(%rbp)	#, pred
	je	.L612	#,
	.loc 1 3424 0
	movq	-64(%rbp), %rdx	# opalign, tmp340
	movq	-56(%rbp), %rax	# pred, tmp341
	movl	$0, %esi	#,
	movq	%rdx, %rdi	# tmp340,
	call	*%rax	# tmp341
	testl	%eax, %eax	# D.25761
	je	.L605	#,
.L612:
.LBB51:
	.loc 1 3426 0
	movq	-192(%rbp), %rcx	# size, tmp342
	movl	-156(%rbp), %eax	# mode, tmp343
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp342,
	movl	%eax, %edi	# tmp343,
	call	convert_to_mode	#
	movq	%rax, -88(%rbp)	# tmp344, op2
	.loc 1 3427 0
	call	get_last_insn	#
	movq	%rax, -48(%rbp)	# tmp345, last
	.loc 1 3430 0
	movl	-124(%rbp), %eax	# code, code.398
	movslq	%eax, %rdx	# code.398, tmp346
	movq	%rdx, %rax	# tmp346, tmp347
	salq	$2, %rax	#, tmp347
	addq	%rdx, %rax	# tmp346, tmp347
	salq	$3, %rax	#, tmp348
	addq	$insn_data+24, %rax	#, tmp349
	movq	(%rax), %rax	# insn_data[code.398_171].operand, D.25771
	addq	$48, %rax	#, D.25771
	movq	(%rax), %rax	# _173->predicate, tmp350
	movq	%rax, -56(%rbp)	# tmp350, pred
	.loc 1 3431 0
	cmpq	$0, -56(%rbp)	#, pred
	je	.L613	#,
	.loc 1 3431 0 is_stmt 0 discriminator 1
	movl	-156(%rbp), %ecx	# mode, tmp351
	movq	-88(%rbp), %rdx	# op2, tmp352
	movq	-56(%rbp), %rax	# pred, tmp353
	movl	%ecx, %esi	# tmp351,
	movq	%rdx, %rdi	# tmp352,
	call	*%rax	# tmp353
	testl	%eax, %eax	# D.25761
	jne	.L613	#,
	.loc 1 3432 0 is_stmt 1
	movq	-88(%rbp), %rdx	# op2, tmp354
	movl	-156(%rbp), %eax	# mode, tmp355
	movq	%rdx, %rsi	# tmp354,
	movl	%eax, %edi	# tmp355,
	call	copy_to_mode_reg	#
	movq	%rax, -88(%rbp)	# tmp356, op2
.L613:
	.loc 1 3434 0
	movl	-124(%rbp), %eax	# code, code.399
	movslq	%eax, %rdx	# code.399, tmp357
	movq	%rdx, %rax	# tmp357, tmp358
	salq	$2, %rax	#, tmp358
	addq	%rdx, %rax	# tmp357, tmp358
	salq	$3, %rax	#, tmp359
	addq	$insn_data+16, %rax	#, tmp360
	movq	(%rax), %r8	# insn_data[code.399_177].genfun, D.25772
	movq	-64(%rbp), %rcx	# opalign, tmp361
	movq	-88(%rbp), %rdx	# op2, tmp362
	movq	-104(%rbp), %rsi	# xinner, tmp363
	movq	-72(%rbp), %rax	# target, tmp364
	movq	%rax, %rdi	# tmp364,
	movl	$0, %eax	#,
	call	*%r8	# D.25772
	movq	%rax, -40(%rbp)	# tmp365, pat
	.loc 1 3436 0
	cmpq	$0, -40(%rbp)	#, pat
	je	.L614	#,
	.loc 1 3438 0
	movq	-40(%rbp), %rax	# pat, tmp366
	movq	%rax, %rdi	# tmp366,
	call	emit_insn	#
	.loc 1 3439 0
	jmp	.L603	#
.L614:
	.loc 1 3442 0
	movq	-48(%rbp), %rax	# last, tmp367
	movq	%rax, %rdi	# tmp367,
	call	delete_insns_since	#
.L605:
.LBE51:
.LBE50:
	.loc 1 3409 0
	movl	-156(%rbp), %eax	# mode, mode.400
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25768
	movzbl	%al, %eax	# D.25768, tmp369
	movl	%eax, -156(%rbp)	# tmp369, mode
.L604:
	.loc 1 3407 0 discriminator 1
	cmpl	$0, -156(%rbp)	#, mode
	jne	.L615	#,
.LBE49:
	.loc 1 3447 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.401
	andl	$4096, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	jne	.L616	#,
	.loc 1 3453 0
	movq	global_rtl+64(%rip), %rax	# global_rtl, D.25766
	movq	-96(%rbp), %rdx	# temp, tmp370
	movq	%rdx, %rsi	# tmp370,
	movq	%rax, %rdi	# D.25766,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.25761
	jne	.L617	#,
	.loc 1 3454 0
	movq	global_rtl+72(%rip), %rax	# global_rtl, D.25766
	movq	-96(%rbp), %rdx	# temp, tmp371
	movq	%rdx, %rsi	# tmp371,
	movq	%rax, %rdi	# D.25766,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.25761
	je	.L616	#,
.L617:
	.loc 1 3455 0
	movq	-96(%rbp), %rax	# temp, tmp372
	movq	%rax, %rdi	# tmp372,
	call	copy_to_reg	#
	movq	%rax, -96(%rbp)	# tmp373, temp
.L616:
	.loc 1 3460 0
	movq	cfun(%rip), %rax	# cfun, cfun.402
	movq	16(%rax), %rax	# cfun.402_190->expr, D.25773
	movq	cfun(%rip), %rdx	# cfun, cfun.403
	movq	16(%rdx), %rdx	# cfun.403_192->expr, D.25773
	movl	4(%rdx), %edx	# _193->x_inhibit_defer_pop, D.25761
	addl	$1, %edx	#, D.25761
	movl	%edx, 4(%rax)	# D.25761, _191->x_inhibit_defer_pop
	.loc 1 3466 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25774
	movzbl	61(%rax), %eax	# *_196, tmp376
	shrb	%al	# D.25775
	.loc 1 3462 0
	movzbl	%al, %ebx	# D.25775, D.25761
	.loc 1 3465 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25774
	movzbl	17(%rax), %eax	# *_199, tmp379
	shrb	$5, %al	#, D.25776
	andl	$1, %eax	#, D.25776
	.loc 1 3462 0
	movzbl	%al, %edx	# D.25776, D.25761
	.loc 1 3464 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25774
	movzbl	61(%rax), %eax	# *_202, tmp382
	shrb	%al	# D.25775
	.loc 1 3462 0
	movzbl	%al, %eax	# D.25775, D.25769
	movq	-192(%rbp), %rcx	# size, tmp383
	movq	%rcx, %rsi	# tmp383,
	movl	%eax, %edi	# D.25769,
	call	convert_to_mode	#
	movq	%rax, %rcx	#, D.25766
	.loc 1 3463 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.405
	andl	$33554432, %eax	#, D.25761
	.loc 1 3462 0
	testl	%eax, %eax	# D.25761
	je	.L618	#,
	.loc 1 3462 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.404
	jmp	.L619	#
.L618:
	.loc 1 3462 0 discriminator 2
	movl	$4, %eax	#, iftmp.404
.L619:
	.loc 1 3462 0 discriminator 3
	movq	-104(%rbp), %rdx	# xinner, tmp384
	movq	8(%rdx), %rsi	# xinner_7->fld[0].rtx, D.25766
	.loc 1 3463 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %edx	# target_flags, target_flags.407
	andl	$33554432, %edx	#, D.25761
	.loc 1 3462 0 discriminator 3
	testl	%edx, %edx	# D.25761
	je	.L620	#,
	.loc 1 3462 0 is_stmt 0 discriminator 4
	movl	$5, %edx	#, iftmp.406
	jmp	.L621	#
.L620:
	.loc 1 3462 0 discriminator 5
	movl	$4, %edx	#, iftmp.406
.L621:
	.loc 1 3462 0 discriminator 6
	movq	libfunc_table+88(%rip), %rdi	# libfunc_table, D.25766
	movq	-96(%rbp), %r8	# temp, tmp385
	movl	%ebx, 24(%rsp)	# D.25761,
	movq	%rcx, 16(%rsp)	# D.25766,
	movl	%eax, 8(%rsp)	# iftmp.404,
	movq	%rsi, (%rsp)	# D.25766,
	movl	%edx, %r9d	# iftmp.406,
	movl	$3, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$0, %eax	#,
	call	emit_library_call	#
	.loc 1 3475 0 is_stmt 1 discriminator 6
	movq	cfun(%rip), %rax	# cfun, cfun.408
	movq	16(%rax), %rax	# cfun.408_216->expr, D.25773
	movq	cfun(%rip), %rdx	# cfun, cfun.409
	movq	16(%rdx), %rdx	# cfun.409_218->expr, D.25773
	movl	4(%rdx), %edx	# _219->x_inhibit_defer_pop, D.25761
	subl	$1, %edx	#, D.25761
	movl	%edx, 4(%rax)	# D.25761, _217->x_inhibit_defer_pop
.LBE48:
.LBE47:
	jmp	.L603	#
.L575:
	.loc 1 3478 0
	cmpl	$0, -196(%rbp)	#, partial
	jle	.L622	#,
.LBB52:
	.loc 1 3482 0
	movl	-172(%rbp), %eax	# mode, mode.410
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25768
	movzbl	%al, %eax	# D.25768, D.25761
	movl	target_flags(%rip), %edx	# target_flags, target_flags.412
	andl	$33554432, %edx	#, D.25761
	testl	%edx, %edx	# D.25761
	je	.L623	#,
	.loc 1 3482 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.411
	jmp	.L624	#
.L623:
	.loc 1 3482 0 discriminator 2
	movl	$4, %ebx	#, iftmp.411
.L624:
	.loc 1 3482 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.411
	movl	%eax, -120(%rbp)	# tmp387, size
	.loc 1 3487 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.414
	andl	$33554432, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	je	.L625	#,
	.loc 1 3487 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.413
	jmp	.L626	#
.L625:
	.loc 1 3487 0 discriminator 2
	movl	$32, %eax	#, iftmp.413
.L626:
	.loc 1 3487 0 discriminator 3
	movl	target_flags(%rip), %edx	# target_flags, target_flags.416
	andl	$33554432, %edx	#, D.25761
	testl	%edx, %edx	# D.25761
	je	.L627	#,
	.loc 1 3487 0 discriminator 1
	movl	$64, %ebx	#, iftmp.415
	jmp	.L628	#
.L627:
	.loc 1 3487 0 discriminator 2
	movl	$32, %ebx	#, iftmp.415
.L628:
	.loc 1 3487 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.415
	movl	%eax, %ecx	# tmp389, D.25761
	movl	-196(%rbp), %eax	# partial, tmp392
	cltd
	idivl	%ecx	# D.25761
	movl	%edx, -148(%rbp)	# tmp393, offset
	.loc 1 3488 0 is_stmt 1 discriminator 3
	movq	40(%rbp), %rax	# args_so_far, tmp395
	movq	8(%rax), %rax	# args_so_far_106(D)->fld[0].rtwint, D.25762
	movl	%eax, -116(%rbp)	# D.25762, args_offset
	.loc 1 3494 0 discriminator 3
	cmpl	$0, 24(%rbp)	#, extra
	je	.L629	#,
	.loc 1 3494 0 is_stmt 0 discriminator 1
	cmpq	$0, 32(%rbp)	#, args_addr
	jne	.L629	#,
	.loc 1 3495 0 is_stmt 1
	cmpl	$0, -140(%rbp)	#, where_pad
	je	.L629	#,
	.loc 1 3495 0 is_stmt 0 discriminator 1
	movl	-140(%rbp), %eax	# where_pad, tmp396
	cmpl	-144(%rbp), %eax	# stack_direction, tmp396
	je	.L629	#,
	.loc 1 3496 0 is_stmt 1
	movl	24(%rbp), %eax	# extra, tmp397
	cltq
	movq	%rax, %rsi	# D.25762,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdi	# D.25766,
	call	anti_adjust_stack	#
.L629:
	.loc 1 3501 0
	cmpq	$0, 32(%rbp)	#, args_addr
	jne	.L630	#,
	.loc 1 3502 0
	movl	$0, -148(%rbp)	#, offset
.L630:
	.loc 1 3506 0
	movl	-148(%rbp), %eax	# offset, tmp402
	movl	-196(%rbp), %edx	# partial, tmp403
	subl	%eax, %edx	# tmp402, tmp401
	movl	%edx, %eax	# tmp401, tmp401
	movl	%eax, -112(%rbp)	# tmp401, not_stack
	.loc 1 3512 0
	cmpl	$0, 48(%rbp)	#, reg_parm_stack_space
	je	.L631	#,
	.loc 1 3512 0 is_stmt 0 discriminator 1
	movl	-112(%rbp), %eax	# not_stack, iftmp.417
	jmp	.L632	#
.L631:
	.loc 1 3512 0 discriminator 2
	movl	$0, %eax	#, iftmp.417
.L632:
	.loc 1 3512 0 discriminator 3
	movl	%eax, -108(%rbp)	# iftmp.417, skip
	.loc 1 3519 0 is_stmt 1 discriminator 3
	movq	-168(%rbp), %rax	# x, tmp404
	movzwl	(%rax), %eax	# x_34->code, D.25763
	cmpw	$61, %ax	#, D.25763
	jne	.L633	#,
	.loc 1 3519 0 is_stmt 0 discriminator 1
	movq	-168(%rbp), %rax	# x, tmp405
	movl	8(%rax), %eax	# x_34->fld[0].rtuint, D.25764
	cmpl	$52, %eax	#, D.25764
	ja	.L633	#,
	.loc 1 3520 0 is_stmt 1
	movq	-168(%rbp), %rax	# x, tmp406
	movzbl	2(%rax), %eax	# x_34->mode, D.25768
	movzbl	%al, %eax	# D.25768, D.25761
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25777
	cmpl	$1, %eax	#, D.25777
	je	.L633	#,
	.loc 1 3521 0
	movq	-168(%rbp), %rax	# x, tmp408
	movq	%rax, %rdi	# tmp408,
	call	copy_to_reg	#
	movq	%rax, -168(%rbp)	# tmp409, x
.L633:
	.loc 1 3529 0
	movl	-120(%rbp), %eax	# size, tmp413
	subl	$1, %eax	#, tmp412
	movl	%eax, -152(%rbp)	# tmp412, i
	jmp	.L634	#
.L638:
	.loc 1 3531 0
	movl	-148(%rbp), %eax	# offset, tmp414
	movl	-112(%rbp), %edx	# not_stack, tmp415
	addl	%edx, %eax	# tmp415, D.25761
	cmpl	-152(%rbp), %eax	# i, D.25761
	jg	.L635	#,
	.loc 1 3535 0
	movl	-112(%rbp), %eax	# not_stack, tmp416
	movl	-152(%rbp), %edx	# i, tmp417
	subl	%eax, %edx	# tmp416, D.25761
	movl	-108(%rbp), %eax	# skip, tmp418
	addl	%eax, %edx	# tmp418, D.25761
	movl	target_flags(%rip), %eax	# target_flags, target_flags.419
	andl	$33554432, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	je	.L636	#,
	.loc 1 3535 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.418
	jmp	.L637	#
.L636:
	.loc 1 3535 0 discriminator 2
	movl	$4, %eax	#, iftmp.418
.L637:
	.loc 1 3535 0 discriminator 3
	imull	%eax, %edx	# iftmp.418, D.25761
	movl	-116(%rbp), %eax	# args_offset, tmp419
	addl	%edx, %eax	# D.25761, D.25761
	.loc 1 3532 0 is_stmt 1 discriminator 3
	cltq
	movq	%rax, %rsi	# D.25762,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.25766
	movl	word_mode(%rip), %r12d	# word_mode, word_mode.420
	movl	-152(%rbp), %ecx	# i, i.421
	movl	-172(%rbp), %edx	# mode, tmp420
	movq	-168(%rbp), %rax	# x, tmp421
	movl	%ecx, %esi	# i.421,
	movq	%rax, %rdi	# tmp421,
	call	operand_subword_force	#
	movl	-176(%rbp), %ecx	# align, tmp422
	movq	56(%rbp), %rdx	# alignment_pad, tmp423
	movq	%rdx, 40(%rsp)	# tmp423,
	movl	48(%rbp), %edx	# reg_parm_stack_space, tmp424
	movl	%edx, 32(%rsp)	# tmp424,
	movq	%rbx, 24(%rsp)	# D.25766,
	movq	32(%rbp), %rdx	# args_addr, tmp425
	movq	%rdx, 16(%rsp)	# tmp425,
	movl	$0, 8(%rsp)	#,
	movq	$0, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	%ecx, %r8d	# tmp422,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	%r12d, %esi	# word_mode.420,
	movq	%rax, %rdi	# D.25766,
	call	emit_push_insn	#
.L635:
	.loc 1 3529 0
	subl	$1, -152(%rbp)	#, i
.L634:
	.loc 1 3529 0 is_stmt 0 discriminator 1
	movl	-152(%rbp), %eax	# i, tmp426
	cmpl	-112(%rbp), %eax	# not_stack, tmp426
	jge	.L638	#,
.LBE52:
	jmp	.L603	#
.L622:
.LBB53:
	.loc 1 3542 0 is_stmt 1
	movq	$0, -32(%rbp)	#, target
	.loc 1 3548 0
	cmpl	$0, 24(%rbp)	#, extra
	je	.L639	#,
	.loc 1 3548 0 is_stmt 0 discriminator 1
	cmpq	$0, 32(%rbp)	#, args_addr
	jne	.L639	#,
	.loc 1 3549 0 is_stmt 1
	cmpl	$0, -140(%rbp)	#, where_pad
	je	.L639	#,
	.loc 1 3549 0 is_stmt 0 discriminator 1
	movl	-140(%rbp), %eax	# where_pad, tmp427
	cmpl	-144(%rbp), %eax	# stack_direction, tmp427
	je	.L639	#,
	.loc 1 3550 0 is_stmt 1
	movl	24(%rbp), %eax	# extra, tmp428
	cltq
	movq	%rax, %rsi	# D.25762,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdi	# D.25766,
	call	anti_adjust_stack	#
.L639:
	.loc 1 3553 0
	cmpq	$0, 32(%rbp)	#, args_addr
	jne	.L640	#,
	.loc 1 3553 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.422
	andl	$2048, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	jne	.L640	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.423
	andl	$4096, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	jne	.L640	#,
	.loc 1 3554 0 is_stmt 1
	movq	-184(%rbp), %rdx	# type, tmp429
	movq	-168(%rbp), %rcx	# x, tmp430
	movl	-172(%rbp), %eax	# mode, tmp431
	movq	%rcx, %rsi	# tmp430,
	movl	%eax, %edi	# tmp431,
	call	emit_single_push_insn	#
	jmp	.L603	#
.L640:
	.loc 1 3558 0
	movq	40(%rbp), %rax	# args_so_far, tmp432
	movzwl	(%rax), %eax	# args_so_far_106(D)->code, D.25763
	cmpw	$54, %ax	#, D.25763
	jne	.L641	#,
	.loc 1 3560 0
	movq	40(%rbp), %rax	# args_so_far, tmp433
	movq	8(%rax), %rdx	# args_so_far_106(D)->fld[0].rtwint, D.25762
	movq	32(%rbp), %rax	# args_addr, tmp434
	movq	%rdx, %rsi	# D.25762,
	movq	%rax, %rdi	# tmp434,
	call	plus_constant_wide	#
	movq	%rax, %rdx	#, D.25766
	movl	-172(%rbp), %eax	# mode, tmp435
	movq	%rdx, %rsi	# D.25766,
	movl	%eax, %edi	# tmp435,
	call	memory_address	#
	movq	%rax, -80(%rbp)	# tmp436, addr
	jmp	.L642	#
.L641:
	.loc 1 3564 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.425
	andl	$33554432, %eax	#, D.25761
	testl	%eax, %eax	# D.25761
	je	.L643	#,
	.loc 1 3564 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.424
	jmp	.L644	#
.L643:
	.loc 1 3564 0 discriminator 2
	movl	$4, %eax	#, iftmp.424
.L644:
	.loc 1 3564 0 discriminator 3
	movq	40(%rbp), %rcx	# args_so_far, tmp437
	movq	32(%rbp), %rdx	# args_addr, tmp438
	movl	%eax, %esi	# iftmp.424,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.25766
	movl	-172(%rbp), %eax	# mode, tmp439
	movq	%rdx, %rsi	# D.25766,
	movl	%eax, %edi	# tmp439,
	call	memory_address	#
	movq	%rax, -80(%rbp)	# tmp440, addr
.L642:
	.loc 1 3566 0 is_stmt 1
	movq	-80(%rbp), %rax	# addr, tmp441
	movq	%rax, -32(%rbp)	# tmp441, target
	.loc 1 3567 0
	movq	-80(%rbp), %rdx	# addr, tmp442
	movl	-172(%rbp), %eax	# mode, tmp443
	movq	%rdx, %rsi	# tmp442,
	movl	%eax, %edi	# tmp443,
	call	gen_rtx_MEM	#
	movq	%rax, -24(%rbp)	# tmp444, dest
	.loc 1 3568 0
	cmpq	$0, -184(%rbp)	#, type
	je	.L645	#,
	.loc 1 3570 0
	movq	-184(%rbp), %rcx	# type, tmp445
	movq	-24(%rbp), %rax	# dest, tmp446
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp445,
	movq	%rax, %rdi	# tmp446,
	call	set_mem_attributes	#
	.loc 1 3575 0
	movq	-24(%rbp), %rax	# dest, tmp447
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp447,
	call	set_mem_alias_set	#
.L645:
	.loc 1 3578 0
	movq	-168(%rbp), %rdx	# x, tmp448
	movq	-24(%rbp), %rax	# dest, tmp449
	movq	%rdx, %rsi	# tmp448,
	movq	%rax, %rdi	# tmp449,
	call	emit_move_insn	#
.L603:
.LBE53:
	.loc 1 3587 0
	cmpl	$0, -196(%rbp)	#, partial
	jle	.L646	#,
	.loc 1 3587 0 is_stmt 0 discriminator 1
	cmpq	$0, 16(%rbp)	#, reg
	je	.L646	#,
	.loc 1 3591 0 is_stmt 1
	movq	16(%rbp), %rax	# reg, tmp450
	movzwl	(%rax), %eax	# reg_291(D)->code, D.25763
	cmpw	$39, %ax	#, D.25763
	jne	.L647	#,
	.loc 1 3592 0
	movq	-168(%rbp), %rax	# x, tmp451
	movl	$-1, %edx	#,
	movq	%rax, %rsi	# tmp451,
	movq	16(%rbp), %rdi	# reg,
	call	emit_group_load	#
	jmp	.L646	#
.L647:
	.loc 1 3594 0
	movq	16(%rbp), %rax	# reg, tmp452
	movl	8(%rax), %eax	# reg_291(D)->fld[0].rtuint, D.25764
	movl	-172(%rbp), %ecx	# mode, tmp453
	movl	-196(%rbp), %edx	# partial, tmp454
	movq	-168(%rbp), %rsi	# x, tmp455
	movl	%eax, %edi	# D.25761,
	call	move_block_to_reg	#
.L646:
	.loc 1 3597 0
	cmpl	$0, 24(%rbp)	#, extra
	je	.L648	#,
	.loc 1 3597 0 is_stmt 0 discriminator 1
	cmpq	$0, 32(%rbp)	#, args_addr
	jne	.L648	#,
	movl	-140(%rbp), %eax	# where_pad, tmp456
	cmpl	-144(%rbp), %eax	# stack_direction, tmp456
	jne	.L648	#,
	.loc 1 3598 0 is_stmt 1
	movl	24(%rbp), %eax	# extra, tmp457
	cltq
	movq	%rax, %rsi	# D.25762,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdi	# D.25766,
	call	anti_adjust_stack	#
.L648:
	.loc 1 3600 0
	cmpq	$0, 56(%rbp)	#, alignment_pad
	je	.L574	#,
	.loc 1 3600 0 is_stmt 0 discriminator 1
	cmpq	$0, 32(%rbp)	#, args_addr
	jne	.L574	#,
	.loc 1 3601 0 is_stmt 1
	movq	56(%rbp), %rax	# alignment_pad, tmp458
	movq	%rax, %rdi	# tmp458,
	call	anti_adjust_stack	#
.L574:
	.loc 1 3602 0
	addq	$240, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE37:
	.size	emit_push_insn, .-emit_push_insn
	.type	get_subtarget, @function
get_subtarget:
.LFB38:
	.loc 1 3610 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# x, x
	.loc 1 3621 0
	cmpq	$0, -8(%rbp)	#, x
	je	.L651	#,
	.loc 1 3613 0
	movq	-8(%rbp), %rax	# x, tmp67
	movzwl	(%rax), %eax	# x_2(D)->code, D.25778
	cmpw	$61, %ax	#, D.25778
	jne	.L651	#,
	.loc 1 3615 0
	movq	-8(%rbp), %rax	# x, tmp68
	movzbl	3(%rax), %eax	# *x_2(D), D.25779
	andl	$4, %eax	#, D.25779
	testb	%al, %al	# D.25779
	jne	.L651	#,
	.loc 1 3617 0
	movq	-8(%rbp), %rax	# x, tmp69
	movl	8(%rax), %eax	# x_2(D)->fld[0].rtuint, D.25780
	cmpl	$52, %eax	#, D.25780
	jbe	.L651	#,
	.loc 1 3620 0
	call	preserve_subexpressions_p	#
	testl	%eax, %eax	# D.25781
	jne	.L651	#,
	.loc 1 3621 0
	movq	-8(%rbp), %rax	# x, iftmp.426
	jmp	.L652	#
.L651:
	.loc 1 3621 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.426
.L652:
	.loc 1 3622 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE38:
	.size	get_subtarget, .-get_subtarget
	.globl	expand_assignment
	.type	expand_assignment, @function
expand_assignment:
.LFB39:
	.loc 1 3640 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$200, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -152(%rbp)	# to, to
	movq	%rsi, -160(%rbp)	# from, from
	movl	%edx, -164(%rbp)	# want_value, want_value
	movl	%ecx, -168(%rbp)	# suggest_reg, suggest_reg
	.loc 1 3641 0
	movq	$0, -96(%rbp)	#, to_rtx
	.loc 1 3646 0
	movq	-152(%rbp), %rax	# to, tmp204
	movzbl	16(%rax), %eax	# to_30(D)->common.code, D.25784
	testb	%al, %al	# D.25784
	jne	.L655	#,
	.loc 1 3648 0
	movq	-160(%rbp), %rax	# from, tmp205
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp205,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp206, result
	.loc 1 3649 0
	cmpl	$0, -164(%rbp)	#, want_value
	je	.L656	#,
	.loc 1 3649 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# result, iftmp.427
	jmp	.L657	#
.L656:
	.loc 1 3649 0 discriminator 2
	movl	$0, %eax	#, iftmp.427
.L657:
	.loc 1 3649 0 discriminator 3
	jmp	.L658	#
.L655:
	.loc 1 3658 0 is_stmt 1
	movq	-152(%rbp), %rax	# to, tmp207
	movzbl	16(%rax), %eax	# to_30(D)->common.code, D.25784
	cmpb	$39, %al	#, D.25784
	je	.L659	#,
	.loc 1 3658 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# to, tmp208
	movzbl	16(%rax), %eax	# to_30(D)->common.code, D.25784
	cmpb	$40, %al	#, D.25784
	je	.L659	#,
	.loc 1 3659 0 is_stmt 1
	movq	-152(%rbp), %rax	# to, tmp209
	movzbl	16(%rax), %eax	# to_30(D)->common.code, D.25784
	cmpb	$43, %al	#, D.25784
	je	.L659	#,
	.loc 1 3659 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# to, tmp210
	movzbl	16(%rax), %eax	# to_30(D)->common.code, D.25784
	cmpb	$44, %al	#, D.25784
	jne	.L660	#,
.L659:
.LBB54:
	.loc 1 3666 0 is_stmt 1
	movl	$0, -124(%rbp)	#, volatilep
	.loc 1 3669 0
	call	push_temp_slots	#
	.loc 1 3670 0
	leaq	-128(%rbp), %r9	#, tmp211
	leaq	-132(%rbp), %r8	#, tmp212
	leaq	-104(%rbp), %rcx	#, tmp213
	leaq	-112(%rbp), %rdx	#, tmp214
	leaq	-120(%rbp), %rsi	#, tmp215
	movq	-152(%rbp), %rax	# to, tmp216
	leaq	-124(%rbp), %rdi	#, tmp217
	movq	%rdi, (%rsp)	# tmp217,
	movq	%rax, %rdi	# tmp216,
	call	get_inner_reference	#
	movq	%rax, -88(%rbp)	# tmp218, tem
	.loc 1 3676 0
	movl	-132(%rbp), %eax	# mode1, mode1.428
	testl	%eax, %eax	# mode1.428
	jne	.L661	#,
	.loc 1 3676 0 is_stmt 0 discriminator 1
	cmpl	$0, -164(%rbp)	#, want_value
	je	.L661	#,
	.loc 1 3677 0 is_stmt 1
	movq	-88(%rbp), %rax	# tem, tmp219
	movq	%rax, %rdi	# tmp219,
	call	stabilize_reference	#
	movq	%rax, -88(%rbp)	# tmp220, tem
.L661:
	.loc 1 3679 0
	movq	-88(%rbp), %rax	# tem, tmp221
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp221,
	call	expand_expr	#
	movq	%rax, -96(%rbp)	# tmp222, to_rtx
	movq	-96(%rbp), %rax	# to_rtx, tmp223
	movq	%rax, -32(%rbp)	# tmp223, orig_to_rtx
	.loc 1 3681 0
	movq	-104(%rbp), %rax	# offset, offset.429
	testq	%rax, %rax	# offset.429
	je	.L662	#,
.LBB55:
	.loc 1 3683 0
	movq	-104(%rbp), %rax	# offset, offset.430
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# offset.430,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp224, offset_rtx
	.loc 1 3685 0
	movq	-96(%rbp), %rax	# to_rtx, tmp225
	movzwl	(%rax), %eax	# to_rtx_119->code, D.25788
	cmpw	$66, %ax	#, D.25788
	je	.L663	#,
	.loc 1 3686 0
	movl	$__FUNCTION__.14705, %edx	#,
	movl	$3686, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L663:
	.loc 1 3692 0
	movq	-80(%rbp), %rax	# offset_rtx, tmp226
	movzbl	2(%rax), %eax	# offset_rtx_123->mode, D.25784
	movzbl	%al, %edx	# D.25784, D.25793
	movl	ptr_mode(%rip), %eax	# ptr_mode, ptr_mode.431
	cmpl	%eax, %edx	# ptr_mode.431, D.25793
	je	.L664	#,
	.loc 1 3693 0
	movl	ptr_mode(%rip), %eax	# ptr_mode, ptr_mode.432
	movq	-80(%rbp), %rcx	# offset_rtx, tmp227
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp227,
	movl	%eax, %edi	# ptr_mode.432,
	call	convert_to_mode	#
	movq	%rax, -80(%rbp)	# tmp228, offset_rtx
.L664:
	.loc 1 3698 0
	movq	-96(%rbp), %rax	# to_rtx, tmp229
	movzwl	(%rax), %eax	# to_rtx_119->code, D.25788
	cmpw	$66, %ax	#, D.25788
	jne	.L665	#,
	.loc 1 3699 0
	movq	-96(%rbp), %rax	# to_rtx, tmp230
	movzbl	2(%rax), %eax	# to_rtx_119->mode, D.25784
	cmpb	$51, %al	#, D.25784
	jne	.L665	#,
	.loc 1 3700 0
	movq	-96(%rbp), %rax	# to_rtx, tmp231
	movq	8(%rax), %rax	# to_rtx_119->fld[0].rtx, D.25787
	movzbl	2(%rax), %eax	# _132->mode, D.25784
	testb	%al, %al	# D.25784
	je	.L665	#,
	.loc 1 3701 0
	movq	-120(%rbp), %rax	# bitsize, bitsize.433
	testq	%rax, %rax	# bitsize.433
	jle	.L665	#,
	.loc 1 3702 0
	movq	-112(%rbp), %rax	# bitpos, bitpos.434
	movq	-120(%rbp), %rcx	# bitsize, bitsize.435
	cqto
	idivq	%rcx	# bitsize.435
	movq	%rdx, %rax	# tmp232, D.25789
	testq	%rax, %rax	# D.25789
	jne	.L665	#,
	.loc 1 3703 0
	movq	-120(%rbp), %rbx	# bitsize, bitsize.436
	movl	-132(%rbp), %eax	# mode1, mode1.437
	movl	%eax, %edi	# mode1.437,
	call	get_mode_alignment	#
	movl	%eax, %ecx	# D.25793, D.25789
	movq	%rbx, %rax	# bitsize.436, tmp235
	cqto
	idivq	%rcx	# D.25789
	movq	%rdx, %rax	# tmp234, D.25789
	testq	%rax, %rax	# D.25789
	jne	.L665	#,
	.loc 1 3704 0
	movq	-96(%rbp), %rax	# to_rtx, tmp236
	movq	16(%rax), %rax	# to_rtx_119->fld[1].rtmem, D.25794
	testq	%rax, %rax	# D.25794
	je	.L666	#,
	.loc 1 3704 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_rtx, tmp237
	movq	16(%rax), %rax	# to_rtx_119->fld[1].rtmem, D.25794
	movl	32(%rax), %ebx	# _144->align, iftmp.438
	jmp	.L667	#
.L666:
	.loc 1 3704 0 discriminator 2
	movl	$8, %ebx	#, iftmp.438
.L667:
	.loc 1 3704 0 discriminator 3
	movl	-132(%rbp), %eax	# mode1, mode1.439
	movl	%eax, %edi	# mode1.439,
	call	get_mode_alignment	#
	cmpl	%eax, %ebx	# D.25793, iftmp.438
	jne	.L665	#,
	.loc 1 3706 0 is_stmt 1
	movq	-112(%rbp), %rax	# bitpos, bitpos.440
	leaq	7(%rax), %rdx	#, tmp239
	testq	%rax, %rax	# tmp238
	cmovs	%rdx, %rax	# tmp239,, tmp238
	sarq	$3, %rax	#, tmp240
	movq	%rax, %rdx	# tmp240, D.25789
	movl	-132(%rbp), %esi	# mode1, mode1.441
	movq	-96(%rbp), %rax	# to_rtx, tmp241
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp241,
	call	adjust_address_1	#
	movq	%rax, -96(%rbp)	# tmp242, to_rtx
	.loc 1 3707 0
	movq	$0, -112(%rbp)	#, bitpos
.L665:
	.loc 1 3710 0
	movq	-104(%rbp), %rdx	# offset, offset.442
	movq	-152(%rbp), %rax	# to, tmp243
	movq	8(%rax), %rax	# to_30(D)->common.type, D.25786
	movq	%rdx, %rsi	# offset.442,
	movq	%rax, %rdi	# D.25786,
	call	highest_pow2_factor_for_type	#
	movq	%rax, %rdx	#, D.25789
	movq	-80(%rbp), %rcx	# offset_rtx, tmp244
	movq	-96(%rbp), %rax	# to_rtx, tmp245
	movq	%rcx, %rsi	# tmp244,
	movq	%rax, %rdi	# tmp245,
	call	offset_address	#
	movq	%rax, -96(%rbp)	# tmp246, to_rtx
.L662:
.LBE55:
	.loc 1 3715 0
	movq	-96(%rbp), %rax	# to_rtx, tmp247
	movzwl	(%rax), %eax	# to_rtx_2->code, D.25788
	cmpw	$66, %ax	#, D.25788
	jne	.L668	#,
.LBB56:
	.loc 1 3717 0
	movq	-96(%rbp), %rax	# to_rtx, tmp248
	movq	16(%rax), %rax	# to_rtx_2->fld[1].rtmem, D.25794
	testq	%rax, %rax	# D.25794
	je	.L669	#,
	.loc 1 3717 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_rtx, tmp249
	movq	16(%rax), %rax	# to_rtx_2->fld[1].rtmem, D.25794
	movq	8(%rax), %rax	# _159->expr, iftmp.443
	jmp	.L670	#
.L669:
	.loc 1 3717 0 discriminator 2
	movl	$0, %eax	#, iftmp.443
.L670:
	.loc 1 3717 0 discriminator 3
	movq	%rax, -24(%rbp)	# iftmp.443, old_expr
	.loc 1 3721 0 is_stmt 1 discriminator 3
	movq	-96(%rbp), %rax	# to_rtx, tmp250
	movq	%rax, %rdi	# tmp250,
	call	shallow_copy_rtx	#
	movq	%rax, -96(%rbp)	# tmp251, to_rtx
	.loc 1 3723 0 discriminator 3
	movq	-152(%rbp), %rcx	# to, tmp252
	movq	-96(%rbp), %rax	# to_rtx, tmp253
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp252,
	movq	%rax, %rdi	# tmp253,
	call	set_mem_attributes	#
	.loc 1 3730 0 discriminator 3
	movq	-96(%rbp), %rax	# to_rtx, tmp254
	movq	16(%rax), %rax	# to_rtx_163->fld[1].rtmem, D.25794
	testq	%rax, %rax	# D.25794
	je	.L671	#,
	.loc 1 3730 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_rtx, tmp255
	movq	16(%rax), %rax	# to_rtx_163->fld[1].rtmem, D.25794
	movq	8(%rax), %rax	# _165->expr, iftmp.444
	jmp	.L672	#
.L671:
	.loc 1 3730 0 discriminator 2
	movl	$0, %eax	#, iftmp.444
.L672:
	.loc 1 3730 0 discriminator 3
	cmpq	-24(%rbp), %rax	# old_expr, iftmp.444
	je	.L668	#,
	.loc 1 3730 0 discriminator 1
	movq	-96(%rbp), %rax	# to_rtx, tmp256
	movq	16(%rax), %rax	# to_rtx_163->fld[1].rtmem, D.25794
	testq	%rax, %rax	# D.25794
	je	.L668	#,
	movq	-96(%rbp), %rax	# to_rtx, tmp257
	movq	16(%rax), %rax	# to_rtx_163->fld[1].rtmem, D.25794
	movq	16(%rax), %rax	# _169->offset, D.25787
	testq	%rax, %rax	# D.25787
	je	.L668	#,
	.loc 1 3731 0 is_stmt 1
	movq	-112(%rbp), %rax	# bitpos, bitpos.445
	addq	$7, %rax	#, D.25795
	cmpq	$14, %rax	#, D.25795
	jbe	.L668	#,
	.loc 1 3732 0
	movq	-96(%rbp), %rax	# to_rtx, tmp258
	movq	16(%rax), %rax	# to_rtx_163->fld[1].rtmem, D.25794
	testq	%rax, %rax	# D.25794
	je	.L673	#,
	.loc 1 3732 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_rtx, tmp259
	movq	16(%rax), %rax	# to_rtx_163->fld[1].rtmem, D.25794
	movq	16(%rax), %rax	# _175->offset, iftmp.447
	jmp	.L674	#
.L673:
	.loc 1 3732 0 discriminator 2
	movl	$0, %eax	#, iftmp.447
.L674:
	.loc 1 3732 0 discriminator 3
	movq	8(%rax), %rdx	# iftmp.447_19->fld[0].rtwint, D.25789
	movq	-112(%rbp), %rax	# bitpos, bitpos.448
	leaq	7(%rax), %rcx	#, tmp261
	testq	%rax, %rax	# tmp260
	cmovs	%rcx, %rax	# tmp261,, tmp260
	sarq	$3, %rax	#, tmp262
	subq	%rax, %rdx	# D.25789, D.25789
	movq	%rdx, %rax	# D.25789, D.25789
	movq	%rax, %rsi	# D.25789,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.25787
	movq	-96(%rbp), %rax	# to_rtx, tmp263
	movq	%rdx, %rsi	# D.25787,
	movq	%rax, %rdi	# tmp263,
	call	set_mem_offset	#
.L668:
.LBE56:
	.loc 1 3738 0 is_stmt 1
	movl	-124(%rbp), %eax	# volatilep, volatilep.449
	testl	%eax, %eax	# volatilep.449
	je	.L675	#,
	.loc 1 3738 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_rtx, tmp264
	movzwl	(%rax), %eax	# to_rtx_3->code, D.25788
	cmpw	$66, %ax	#, D.25788
	jne	.L675	#,
	.loc 1 3740 0 is_stmt 1
	movq	-96(%rbp), %rax	# to_rtx, tmp265
	cmpq	-32(%rbp), %rax	# orig_to_rtx, tmp265
	jne	.L676	#,
	.loc 1 3741 0
	movq	-96(%rbp), %rax	# to_rtx, tmp266
	movq	%rax, %rdi	# tmp266,
	call	copy_rtx	#
	movq	%rax, -96(%rbp)	# tmp267, to_rtx
.L676:
	.loc 1 3742 0
	movq	-96(%rbp), %rax	# to_rtx, tmp268
	movzbl	3(%rax), %edx	# to_rtx_4->volatil, tmp271
	orl	$8, %edx	#, tmp272
	movb	%dl, 3(%rax)	# tmp272, to_rtx_4->volatil
.L675:
	.loc 1 3745 0
	movq	-152(%rbp), %rax	# to, tmp273
	movzbl	16(%rax), %eax	# to_30(D)->common.code, D.25784
	cmpb	$39, %al	#, D.25784
	jne	.L677	#,
	.loc 1 3746 0
	movq	-152(%rbp), %rax	# to, tmp274
	movq	40(%rax), %rax	# to_30(D)->exp.operands, D.25786
	movzbl	17(%rax), %eax	# *_187, D.25784
	andl	$16, %eax	#, D.25784
	testb	%al, %al	# D.25784
	je	.L677	#,
	.loc 1 3748 0
	movq	-96(%rbp), %rax	# to_rtx, tmp275
	cmpq	-32(%rbp), %rax	# orig_to_rtx, tmp275
	jne	.L678	#,
	.loc 1 3749 0
	movq	-96(%rbp), %rax	# to_rtx, tmp276
	movq	%rax, %rdi	# tmp276,
	call	copy_rtx	#
	movq	%rax, -96(%rbp)	# tmp277, to_rtx
.L678:
	.loc 1 3750 0
	movq	-96(%rbp), %rax	# to_rtx, tmp278
	movzbl	3(%rax), %edx	# to_rtx_6->unchanging, tmp281
	orl	$4, %edx	#, tmp282
	movb	%dl, 3(%rax)	# tmp282, to_rtx_6->unchanging
.L677:
	.loc 1 3753 0
	movq	-96(%rbp), %rax	# to_rtx, tmp283
	movzwl	(%rax), %eax	# to_rtx_7->code, D.25788
	cmpw	$66, %ax	#, D.25788
	jne	.L679	#,
	.loc 1 3753 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# to, tmp284
	movq	%rax, %rdi	# tmp284,
	call	can_address_p	#
	testl	%eax, %eax	# D.25785
	jne	.L679	#,
	.loc 1 3755 0 is_stmt 1
	movq	-96(%rbp), %rax	# to_rtx, tmp285
	cmpq	-32(%rbp), %rax	# orig_to_rtx, tmp285
	jne	.L680	#,
	.loc 1 3756 0
	movq	-96(%rbp), %rax	# to_rtx, tmp286
	movq	%rax, %rdi	# tmp286,
	call	copy_rtx	#
	movq	%rax, -96(%rbp)	# tmp287, to_rtx
.L680:
	.loc 1 3757 0
	movq	-96(%rbp), %rax	# to_rtx, tmp288
	movzbl	3(%rax), %edx	# to_rtx_8->jump, tmp291
	orl	$1, %edx	#, tmp292
	movb	%dl, 3(%rax)	# tmp292, to_rtx_8->jump
.L679:
	.loc 1 3766 0
	movq	-152(%rbp), %rax	# to, tmp293
	movq	%rax, %rdi	# tmp293,
	call	get_alias_set	#
	.loc 1 3760 0
	movl	%eax, %r10d	# D.25789, D.25785
	movq	-88(%rbp), %rax	# tem, tmp294
	movq	8(%rax), %r9	# tem_12->common.type, D.25786
	movl	-128(%rbp), %r8d	# unsignedp, unsignedp.450
	cmpl	$0, -164(%rbp)	#, want_value
	je	.L681	#,
	.loc 1 3764 0
	movq	-152(%rbp), %rax	# to, tmp295
	movq	8(%rax), %rax	# to_30(D)->common.type, D.25786
	movzbl	61(%rax), %eax	# *_198, tmp298
	shrb	%al	# D.25791
	.loc 1 3760 0
	movzbl	%al, %eax	# D.25791, iftmp.451
	jmp	.L682	#
.L681:
	.loc 1 3760 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.451
.L682:
	.loc 1 3760 0 discriminator 2
	movl	-132(%rbp), %ecx	# mode1, mode1.452
	movq	-112(%rbp), %rdx	# bitpos, bitpos.453
	movq	-120(%rbp), %rsi	# bitsize, bitsize.454
	movq	-160(%rbp), %r11	# from, tmp299
	movq	-96(%rbp), %rdi	# to_rtx, tmp300
	movl	%r10d, 16(%rsp)	# D.25785,
	movq	%r9, 8(%rsp)	# D.25786,
	movl	%r8d, (%rsp)	# unsignedp.450,
	movl	%eax, %r9d	# iftmp.451,
	movq	%r11, %r8	# tmp299,
	call	store_field	#
	movq	%rax, -72(%rbp)	# tmp301, result
	.loc 1 3768 0 is_stmt 1 discriminator 2
	movq	-72(%rbp), %rax	# result, tmp302
	movq	%rax, %rdi	# tmp302,
	call	preserve_temp_slots	#
	.loc 1 3769 0 discriminator 2
	call	free_temp_slots	#
	.loc 1 3770 0 discriminator 2
	call	pop_temp_slots	#
	.loc 1 3778 0 discriminator 2
	cmpl	$0, -164(%rbp)	#, want_value
	je	.L683	#,
	.loc 1 3777 0
	movq	-152(%rbp), %rax	# to, tmp303
	movq	8(%rax), %rax	# to_30(D)->common.type, D.25786
	movzbl	17(%rax), %eax	# *_206, tmp306
	shrb	$5, %al	#, D.25792
	andl	$1, %eax	#, D.25792
	.loc 1 3774 0
	movzbl	%al, %ecx	# D.25792, D.25785
	.loc 1 3775 0
	movq	-160(%rbp), %rax	# from, tmp307
	movq	8(%rax), %rax	# from_32(D)->common.type, D.25786
	movzbl	61(%rax), %eax	# *_209, tmp310
	shrb	%al	# D.25791
	.loc 1 3774 0
	movzbl	%al, %esi	# D.25791, D.25790
	movq	-152(%rbp), %rax	# to, tmp311
	movq	8(%rax), %rax	# to_30(D)->common.type, D.25786
	movzbl	61(%rax), %eax	# *_212, tmp314
	shrb	%al	# D.25791
	movzbl	%al, %eax	# D.25791, D.25790
	.loc 1 3778 0
	movq	-72(%rbp), %rdx	# result, tmp315
	movl	%eax, %edi	# D.25790,
	call	convert_modes	#
	jmp	.L658	#
.L683:
	.loc 1 3778 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.455
	jmp	.L658	#
.L660:
.LBE54:
	.loc 1 3791 0 is_stmt 1
	movq	-160(%rbp), %rax	# from, tmp316
	movzbl	16(%rax), %eax	# from_32(D)->common.code, D.25784
	cmpb	$53, %al	#, D.25784
	jne	.L685	#,
	.loc 1 3791 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# from, tmp317
	movq	%rax, %rdi	# tmp317,
	call	aggregate_value_p	#
	testl	%eax, %eax	# D.25785
	jne	.L685	#,
	.loc 1 3792 0 is_stmt 1
	movq	-160(%rbp), %rax	# from, tmp318
	movq	8(%rax), %rax	# from_32(D)->common.type, D.25786
	movq	32(%rax), %rax	# _44->type.size, D.25786
	movzbl	16(%rax), %eax	# _45->common.code, D.25784
	cmpb	$25, %al	#, D.25784
	jne	.L685	#,
	.loc 1 3793 0
	movq	-152(%rbp), %rax	# to, tmp319
	movzbl	16(%rax), %eax	# to_30(D)->common.code, D.25784
	cmpb	$34, %al	#, D.25784
	je	.L686	#,
	.loc 1 3793 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# to, tmp320
	movzbl	16(%rax), %eax	# to_30(D)->common.code, D.25784
	cmpb	$35, %al	#, D.25784
	jne	.L687	#,
.L686:
	.loc 1 3794 0 is_stmt 1
	movq	-152(%rbp), %rax	# to, tmp321
	movq	144(%rax), %rax	# to_30(D)->decl.rtl, D.25787
	testq	%rax, %rax	# D.25787
	je	.L688	#,
	.loc 1 3794 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# to, tmp322
	movq	144(%rax), %rax	# to_30(D)->decl.rtl, iftmp.456
	jmp	.L689	#
.L688:
	.loc 1 3794 0 discriminator 2
	movq	-152(%rbp), %rax	# to, tmp323
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp323,
	call	make_decl_rtl	#
	movq	-152(%rbp), %rax	# to, tmp324
	movq	144(%rax), %rax	# to_30(D)->decl.rtl, iftmp.456
.L689:
	.loc 1 3794 0 discriminator 3
	movzwl	(%rax), %eax	# iftmp.456_22->code, D.25788
	.loc 1 3793 0 is_stmt 1 discriminator 3
	cmpw	$61, %ax	#, D.25788
	je	.L685	#,
.L687:
.LBB57:
	.loc 1 3798 0
	call	push_temp_slots	#
	.loc 1 3799 0
	movq	-160(%rbp), %rax	# from, tmp325
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp325,
	call	expand_expr	#
	movq	%rax, -64(%rbp)	# tmp326, value
	.loc 1 3800 0
	cmpq	$0, -96(%rbp)	#, to_rtx
	jne	.L690	#,
	.loc 1 3801 0
	movq	-152(%rbp), %rax	# to, tmp327
	movl	$4, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp327,
	call	expand_expr	#
	movq	%rax, -96(%rbp)	# tmp328, to_rtx
.L690:
	.loc 1 3805 0
	movq	-96(%rbp), %rax	# to_rtx, tmp329
	movzwl	(%rax), %eax	# to_rtx_10->code, D.25788
	cmpw	$39, %ax	#, D.25788
	jne	.L691	#,
	.loc 1 3806 0
	movq	-160(%rbp), %rax	# from, tmp330
	movq	8(%rax), %rax	# from_32(D)->common.type, D.25786
	movq	%rax, %rdi	# D.25786,
	call	int_size_in_bytes	#
	movl	%eax, %edx	# D.25789, D.25785
	movq	-64(%rbp), %rcx	# value, tmp331
	movq	-96(%rbp), %rax	# to_rtx, tmp332
	movq	%rcx, %rsi	# tmp331,
	movq	%rax, %rdi	# tmp332,
	call	emit_group_load	#
	jmp	.L692	#
.L691:
	.loc 1 3807 0
	movq	-96(%rbp), %rax	# to_rtx, tmp333
	movzbl	2(%rax), %eax	# to_rtx_10->mode, D.25784
	cmpb	$51, %al	#, D.25784
	jne	.L693	#,
	.loc 1 3808 0
	movq	-160(%rbp), %rax	# from, tmp334
	movq	%rax, %rdi	# tmp334,
	call	expr_size	#
	movq	%rax, %rdx	#, D.25787
	movq	-64(%rbp), %rcx	# value, tmp335
	movq	-96(%rbp), %rax	# to_rtx, tmp336
	movq	%rcx, %rsi	# tmp335,
	movq	%rax, %rdi	# tmp336,
	call	emit_block_move	#
	jmp	.L692	#
.L693:
	.loc 1 3816 0
	movq	-64(%rbp), %rdx	# value, tmp337
	movq	-96(%rbp), %rax	# to_rtx, tmp338
	movq	%rdx, %rsi	# tmp337,
	movq	%rax, %rdi	# tmp338,
	call	emit_move_insn	#
.L692:
	.loc 1 3818 0
	movq	-96(%rbp), %rax	# to_rtx, tmp339
	movq	%rax, %rdi	# tmp339,
	call	preserve_temp_slots	#
	.loc 1 3819 0
	call	free_temp_slots	#
	.loc 1 3820 0
	call	pop_temp_slots	#
	.loc 1 3821 0
	cmpl	$0, -164(%rbp)	#, want_value
	je	.L694	#,
	.loc 1 3821 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_rtx, iftmp.457
	jmp	.L695	#
.L694:
	.loc 1 3821 0 discriminator 2
	movl	$0, %eax	#, iftmp.457
.L695:
	.loc 1 3821 0 discriminator 3
	jmp	.L658	#
.L685:
.LBE57:
	.loc 1 3827 0 is_stmt 1
	cmpq	$0, -96(%rbp)	#, to_rtx
	jne	.L696	#,
	.loc 1 3828 0
	movq	-152(%rbp), %rax	# to, tmp340
	movl	$4, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp340,
	call	expand_expr	#
	movq	%rax, -96(%rbp)	# tmp341, to_rtx
.L696:
	.loc 1 3831 0
	movq	-152(%rbp), %rax	# to, tmp342
	movzbl	16(%rax), %eax	# to_30(D)->common.code, D.25784
	cmpb	$36, %al	#, D.25784
	jne	.L697	#,
	.loc 1 3832 0
	movq	-96(%rbp), %rax	# to_rtx, tmp343
	movzwl	(%rax), %eax	# to_rtx_11->code, D.25788
	cmpw	$61, %ax	#, D.25788
	je	.L698	#,
	.loc 1 3832 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_rtx, tmp344
	movzwl	(%rax), %eax	# to_rtx_11->code, D.25788
	cmpw	$39, %ax	#, D.25788
	jne	.L697	#,
.L698:
.LBB58:
	.loc 1 3836 0 is_stmt 1
	call	push_temp_slots	#
	.loc 1 3837 0
	movq	-96(%rbp), %rax	# to_rtx, tmp345
	movzbl	2(%rax), %eax	# to_rtx_11->mode, D.25784
	movzbl	%al, %edx	# D.25784, D.25790
	movq	-160(%rbp), %rax	# from, tmp346
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp346,
	call	expand_expr	#
	movq	%rax, -56(%rbp)	# tmp347, temp
	.loc 1 3839 0
	movq	-96(%rbp), %rax	# to_rtx, tmp348
	movzwl	(%rax), %eax	# to_rtx_11->code, D.25788
	cmpw	$39, %ax	#, D.25788
	jne	.L699	#,
	.loc 1 3840 0
	movq	-160(%rbp), %rax	# from, tmp349
	movq	8(%rax), %rax	# from_32(D)->common.type, D.25786
	movq	%rax, %rdi	# D.25786,
	call	int_size_in_bytes	#
	movl	%eax, %edx	# D.25789, D.25785
	movq	-56(%rbp), %rcx	# temp, tmp350
	movq	-96(%rbp), %rax	# to_rtx, tmp351
	movq	%rcx, %rsi	# tmp350,
	movq	%rax, %rdi	# tmp351,
	call	emit_group_load	#
	jmp	.L700	#
.L699:
	.loc 1 3842 0
	movq	-56(%rbp), %rdx	# temp, tmp352
	movq	-96(%rbp), %rax	# to_rtx, tmp353
	movq	%rdx, %rsi	# tmp352,
	movq	%rax, %rdi	# tmp353,
	call	emit_move_insn	#
.L700:
	.loc 1 3844 0
	movq	-96(%rbp), %rax	# to_rtx, tmp354
	movq	%rax, %rdi	# tmp354,
	call	preserve_temp_slots	#
	.loc 1 3845 0
	call	free_temp_slots	#
	.loc 1 3846 0
	call	pop_temp_slots	#
	.loc 1 3847 0
	cmpl	$0, -164(%rbp)	#, want_value
	je	.L701	#,
	.loc 1 3847 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_rtx, iftmp.458
	jmp	.L702	#
.L701:
	.loc 1 3847 0 discriminator 2
	movl	$0, %eax	#, iftmp.458
.L702:
	.loc 1 3847 0 discriminator 3
	jmp	.L658	#
.L697:
.LBE58:
	.loc 1 3853 0 is_stmt 1
	movq	-152(%rbp), %rax	# to, tmp355
	movzbl	16(%rax), %eax	# to_30(D)->common.code, D.25784
	cmpb	$36, %al	#, D.25784
	jne	.L703	#,
	.loc 1 3853 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# from, tmp356
	movzbl	16(%rax), %eax	# from_32(D)->common.code, D.25784
	cmpb	$41, %al	#, D.25784
	jne	.L703	#,
	.loc 1 3854 0 is_stmt 1
	movq	cfun(%rip), %rax	# cfun, cfun.459
	movzbl	424(%rax), %eax	# *cfun.459_80, D.25784
	andl	$1, %eax	#, D.25784
	testb	%al, %al	# D.25784
	je	.L703	#,
	.loc 1 3855 0
	movq	cfun(%rip), %rax	# cfun, cfun.460
	movzbl	424(%rax), %eax	# *cfun.460_83, D.25784
	andl	$2, %eax	#, D.25784
	testb	%al, %al	# D.25784
	jne	.L703	#,
.LBB59:
	.loc 1 3859 0
	call	push_temp_slots	#
	.loc 1 3860 0
	movq	-160(%rbp), %rax	# from, tmp357
	movq	%rax, %rdi	# tmp357,
	call	expr_size	#
	movq	%rax, -48(%rbp)	# tmp358, size
	.loc 1 3861 0
	movq	-160(%rbp), %rax	# from, tmp359
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp359,
	call	expand_expr	#
	movq	%rax, -40(%rbp)	# tmp360, from_rtx
	.loc 1 3869 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25786
	movzbl	61(%rax), %eax	# *_88, tmp363
	shrb	%al	# D.25791
	.loc 1 3864 0
	movzbl	%al, %ebx	# D.25791, D.25785
	.loc 1 3868 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25786
	movzbl	17(%rax), %eax	# *_91, tmp366
	shrb	$5, %al	#, D.25792
	andl	$1, %eax	#, D.25792
	.loc 1 3864 0
	movzbl	%al, %edx	# D.25792, D.25785
	.loc 1 3867 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25786
	movzbl	61(%rax), %eax	# *_94, tmp369
	shrb	%al	# D.25791
	.loc 1 3864 0
	movzbl	%al, %eax	# D.25791, D.25790
	movq	-48(%rbp), %rcx	# size, tmp370
	movq	%rcx, %rsi	# tmp370,
	movl	%eax, %edi	# D.25790,
	call	convert_to_mode	#
	movq	%rax, %rcx	#, D.25787
	.loc 1 3866 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.462
	andl	$33554432, %eax	#, D.25785
	.loc 1 3864 0
	testl	%eax, %eax	# D.25785
	je	.L704	#,
	.loc 1 3864 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.461
	jmp	.L705	#
.L704:
	.loc 1 3864 0 discriminator 2
	movl	$4, %eax	#, iftmp.461
.L705:
	.loc 1 3864 0 discriminator 3
	movq	-40(%rbp), %rdx	# from_rtx, tmp371
	movq	8(%rdx), %rsi	# from_rtx_87->fld[0].rtx, D.25787
	.loc 1 3865 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %edx	# target_flags, target_flags.464
	andl	$33554432, %edx	#, D.25785
	.loc 1 3864 0 discriminator 3
	testl	%edx, %edx	# D.25785
	je	.L706	#,
	.loc 1 3864 0 is_stmt 0 discriminator 4
	movl	$5, %edx	#, iftmp.463
	jmp	.L707	#
.L706:
	.loc 1 3864 0 discriminator 5
	movl	$4, %edx	#, iftmp.463
.L707:
	.loc 1 3864 0 discriminator 6
	movq	-96(%rbp), %rdi	# to_rtx, tmp372
	movq	8(%rdi), %r8	# to_rtx_11->fld[0].rtx, D.25787
	movq	libfunc_table+96(%rip), %rdi	# libfunc_table, D.25787
	movl	%ebx, 24(%rsp)	# D.25785,
	movq	%rcx, 16(%rsp)	# D.25787,
	movl	%eax, 8(%rsp)	# iftmp.461,
	movq	%rsi, (%rsp)	# D.25787,
	movl	%edx, %r9d	# iftmp.463,
	movl	$3, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$0, %eax	#,
	call	emit_library_call	#
	.loc 1 3879 0 is_stmt 1 discriminator 6
	movq	-96(%rbp), %rax	# to_rtx, tmp373
	movq	%rax, %rdi	# tmp373,
	call	preserve_temp_slots	#
	.loc 1 3880 0 discriminator 6
	call	free_temp_slots	#
	.loc 1 3881 0 discriminator 6
	call	pop_temp_slots	#
	.loc 1 3882 0 discriminator 6
	cmpl	$0, -164(%rbp)	#, want_value
	je	.L708	#,
	.loc 1 3882 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# to_rtx, iftmp.465
	jmp	.L709	#
.L708:
	.loc 1 3882 0 discriminator 2
	movl	$0, %eax	#, iftmp.465
.L709:
	.loc 1 3882 0 discriminator 3
	jmp	.L658	#
.L703:
.LBE59:
	.loc 1 3887 0 is_stmt 1
	call	push_temp_slots	#
	.loc 1 3888 0
	movl	-164(%rbp), %edx	# want_value, tmp374
	movq	-96(%rbp), %rcx	# to_rtx, tmp375
	movq	-160(%rbp), %rax	# from, tmp376
	movq	%rcx, %rsi	# tmp375,
	movq	%rax, %rdi	# tmp376,
	call	store_expr	#
	movq	%rax, -72(%rbp)	# tmp377, result
	.loc 1 3889 0
	movq	-72(%rbp), %rax	# result, tmp378
	movq	%rax, %rdi	# tmp378,
	call	preserve_temp_slots	#
	.loc 1 3890 0
	call	free_temp_slots	#
	.loc 1 3891 0
	call	pop_temp_slots	#
	.loc 1 3892 0
	cmpl	$0, -164(%rbp)	#, want_value
	je	.L710	#,
	.loc 1 3892 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# result, iftmp.466
	jmp	.L711	#
.L710:
	.loc 1 3892 0 discriminator 2
	movl	$0, %eax	#, iftmp.466
.L711:
.L658:
	.loc 1 3893 0 is_stmt 1
	addq	$200, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE39:
	.size	expand_assignment, .-expand_assignment
	.globl	store_expr
	.type	store_expr, @function
store_expr:
.LFB40:
	.loc 1 3923 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# exp, exp
	movq	%rsi, -112(%rbp)	# target, target
	movl	%edx, -116(%rbp)	# want_value, want_value
	.loc 1 3925 0
	movl	$0, -92(%rbp)	#, dont_return_target
	.loc 1 3926 0
	movl	$0, -88(%rbp)	#, dont_store_target
	.loc 1 3928 0
	movq	-104(%rbp), %rax	# exp, tmp269
	movzbl	16(%rax), %eax	# exp_30(D)->common.code, D.25797
	cmpb	$47, %al	#, D.25797
	jne	.L713	#,
	.loc 1 3932 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25798
	movq	-104(%rbp), %rax	# exp, tmp270
	movq	32(%rax), %rax	# exp_30(D)->exp.operands, D.25799
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25799,
	call	expand_expr	#
	.loc 1 3933 0
	call	emit_queue	#
	.loc 1 3934 0
	movq	-104(%rbp), %rax	# exp, tmp271
	movq	40(%rax), %rax	# exp_30(D)->exp.operands, D.25799
	movl	-116(%rbp), %edx	# want_value, tmp272
	movq	-112(%rbp), %rcx	# target, tmp273
	movq	%rcx, %rsi	# tmp273,
	movq	%rax, %rdi	# D.25799,
	call	store_expr	#
	jmp	.L714	#
.L713:
	.loc 1 3936 0
	movq	-104(%rbp), %rax	# exp, tmp274
	movzbl	16(%rax), %eax	# exp_30(D)->common.code, D.25797
	cmpb	$51, %al	#, D.25797
	jne	.L715	#,
	.loc 1 3936 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# target, tmp275
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	cmpb	$51, %al	#, D.25797
	jne	.L715	#,
.LBB60:
	.loc 1 3943 0 is_stmt 1
	call	gen_label_rtx	#
	movq	%rax, -48(%rbp)	# tmp276, lab1
	call	gen_label_rtx	#
	movq	%rax, -40(%rbp)	# tmp277, lab2
	.loc 1 3945 0
	call	emit_queue	#
	.loc 1 3946 0
	movq	-112(%rbp), %rax	# target, tmp278
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp278,
	call	protect_from_queue	#
	movq	%rax, -112(%rbp)	# tmp279, target
	.loc 1 3948 0
	call	do_pending_stack_adjust	#
	.loc 1 3949 0
	movq	cfun(%rip), %rax	# cfun, cfun.467
	movq	16(%rax), %rax	# cfun.467_43->expr, D.25800
	movq	cfun(%rip), %rdx	# cfun, cfun.468
	movq	16(%rdx), %rdx	# cfun.468_45->expr, D.25800
	movl	4(%rdx), %edx	# _46->x_inhibit_defer_pop, D.25801
	addl	$1, %edx	#, D.25801
	movl	%edx, 4(%rax)	# D.25801, _44->x_inhibit_defer_pop
	.loc 1 3950 0
	movq	-104(%rbp), %rax	# exp, tmp280
	movq	32(%rax), %rax	# exp_30(D)->exp.operands, D.25799
	movq	-48(%rbp), %rdx	# lab1, tmp281
	movq	%rdx, %rsi	# tmp281,
	movq	%rax, %rdi	# D.25799,
	call	jumpifnot	#
	.loc 1 3951 0
	call	start_cleanup_deferral	#
	.loc 1 3952 0
	movq	-104(%rbp), %rax	# exp, tmp282
	movq	40(%rax), %rax	# exp_30(D)->exp.operands, D.25799
	movq	-112(%rbp), %rcx	# target, tmp283
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp283,
	movq	%rax, %rdi	# D.25799,
	call	store_expr	#
	.loc 1 3953 0
	call	end_cleanup_deferral	#
	.loc 1 3954 0
	call	emit_queue	#
	.loc 1 3955 0
	movq	-40(%rbp), %rax	# lab2, tmp284
	movq	%rax, %rdi	# tmp284,
	call	gen_jump	#
	movq	%rax, %rdi	# D.25798,
	call	emit_jump_insn	#
	.loc 1 3956 0
	call	emit_barrier	#
	.loc 1 3957 0
	movq	-48(%rbp), %rax	# lab1, tmp285
	movq	%rax, %rdi	# tmp285,
	call	emit_label	#
	.loc 1 3958 0
	call	start_cleanup_deferral	#
	.loc 1 3959 0
	movq	-104(%rbp), %rax	# exp, tmp286
	movq	48(%rax), %rax	# exp_30(D)->exp.operands, D.25799
	movq	-112(%rbp), %rcx	# target, tmp287
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp287,
	movq	%rax, %rdi	# D.25799,
	call	store_expr	#
	.loc 1 3960 0
	call	end_cleanup_deferral	#
	.loc 1 3961 0
	call	emit_queue	#
	.loc 1 3962 0
	movq	-40(%rbp), %rax	# lab2, tmp288
	movq	%rax, %rdi	# tmp288,
	call	emit_label	#
	.loc 1 3963 0
	movq	cfun(%rip), %rax	# cfun, cfun.469
	movq	16(%rax), %rax	# cfun.469_53->expr, D.25800
	movq	cfun(%rip), %rdx	# cfun, cfun.470
	movq	16(%rdx), %rdx	# cfun.470_55->expr, D.25800
	movl	4(%rdx), %edx	# _56->x_inhibit_defer_pop, D.25801
	subl	$1, %edx	#, D.25801
	movl	%edx, 4(%rax)	# D.25801, _54->x_inhibit_defer_pop
	.loc 1 3965 0
	cmpl	$0, -116(%rbp)	#, want_value
	je	.L716	#,
	.loc 1 3965 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# target, iftmp.471
	jmp	.L717	#
.L716:
	.loc 1 3965 0 discriminator 2
	movl	$0, %eax	#, iftmp.471
.L717:
	.loc 1 3965 0 discriminator 3
	jmp	.L714	#
.L715:
.LBE60:
	.loc 1 3967 0 is_stmt 1
	movq	-112(%rbp), %rax	# target, tmp289
	movq	%rax, %rdi	# tmp289,
	call	queued_subexp_p	#
	testl	%eax, %eax	# D.25801
	je	.L718	#,
	.loc 1 3971 0
	movq	-112(%rbp), %rax	# target, tmp290
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	cmpb	$51, %al	#, D.25797
	je	.L719	#,
	.loc 1 3971 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# target, tmp291
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	testb	%al, %al	# D.25797
	je	.L719	#,
	.loc 1 3974 0 is_stmt 1
	movq	-112(%rbp), %rax	# target, tmp292
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	movzbl	%al, %eax	# D.25797, D.25802
	movl	%eax, %edi	# D.25802,
	call	gen_reg_rtx	#
	movq	%rax, -80(%rbp)	# tmp293, temp
	.loc 1 3975 0
	movq	-112(%rbp), %rax	# target, tmp294
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	movzbl	%al, %edx	# D.25797, D.25802
	movq	-80(%rbp), %rsi	# temp, tmp295
	movq	-104(%rbp), %rax	# exp, tmp296
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp296,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp297, temp
	jmp	.L720	#
.L719:
	.loc 1 3978 0
	movq	-112(%rbp), %rax	# target, tmp298
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	movzbl	%al, %edx	# D.25797, D.25802
	movq	-104(%rbp), %rax	# exp, tmp299
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp299,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp300, temp
.L720:
	.loc 1 3983 0
	movq	-112(%rbp), %rax	# target, tmp301
	movzbl	3(%rax), %eax	# *target_35(D), D.25797
	andl	$8, %eax	#, D.25797
	testb	%al, %al	# D.25797
	jne	.L722	#,
	.loc 1 3983 0 is_stmt 0 discriminator 1
	cmpl	$0, -116(%rbp)	#, want_value
	je	.L722	#,
	.loc 1 3984 0 is_stmt 1
	movl	$1, -92(%rbp)	#, dont_return_target
	jmp	.L722	#
.L718:
	.loc 1 3986 0
	cmpl	$0, -116(%rbp)	#, want_value
	je	.L723	#,
	.loc 1 3986 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# target, tmp302
	movzwl	(%rax), %eax	# target_35(D)->code, D.25803
	cmpw	$66, %ax	#, D.25803
	jne	.L723	#,
	movq	-112(%rbp), %rax	# target, tmp303
	movzbl	3(%rax), %eax	# *target_35(D), D.25797
	andl	$8, %eax	#, D.25797
	testb	%al, %al	# D.25797
	jne	.L723	#,
	.loc 1 3987 0 is_stmt 1
	movq	-112(%rbp), %rax	# target, tmp304
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	cmpb	$51, %al	#, D.25797
	je	.L723	#,
	.loc 1 3995 0
	movq	-112(%rbp), %rax	# target, tmp305
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	movzbl	%al, %edx	# D.25797, D.25802
	movq	-112(%rbp), %rsi	# target, tmp306
	movq	-104(%rbp), %rax	# exp, tmp307
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp307,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp308, temp
	.loc 1 3996 0
	movq	-80(%rbp), %rax	# temp, tmp309
	movzbl	2(%rax), %eax	# temp_83->mode, D.25797
	cmpb	$51, %al	#, D.25797
	je	.L724	#,
	.loc 1 3996 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# temp, tmp310
	movzbl	2(%rax), %eax	# temp_83->mode, D.25797
	testb	%al, %al	# D.25797
	je	.L724	#,
	.loc 1 4000 0 is_stmt 1
	movq	-80(%rbp), %rax	# temp, tmp311
	cmpq	-112(%rbp), %rax	# target, tmp311
	je	.L725	#,
	.loc 1 4001 0
	movq	-112(%rbp), %rdx	# target, tmp312
	movq	-80(%rbp), %rax	# temp, tmp313
	movq	%rdx, %rsi	# tmp312,
	movq	%rax, %rdi	# tmp313,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.25801
	je	.L726	#,
	.loc 1 4002 0
	movq	-80(%rbp), %rax	# temp, tmp314
	movq	%rax, %rdi	# tmp314,
	call	side_effects_p	#
	testl	%eax, %eax	# D.25801
	jne	.L726	#,
	.loc 1 4002 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# target, tmp315
	movq	%rax, %rdi	# tmp315,
	call	side_effects_p	#
	testl	%eax, %eax	# D.25801
	jne	.L726	#,
.L725:
	.loc 1 4003 0 is_stmt 1
	movl	$1, -88(%rbp)	#, dont_store_target
.L726:
	.loc 1 4004 0
	movq	-80(%rbp), %rax	# temp, tmp316
	movq	%rax, %rdi	# tmp316,
	call	copy_to_reg	#
	movq	%rax, -80(%rbp)	# tmp317, temp
.L724:
	.loc 1 4006 0
	movl	$1, -92(%rbp)	#, dont_return_target
	jmp	.L722	#
.L723:
	.loc 1 4008 0
	movq	-112(%rbp), %rax	# target, tmp318
	movzwl	(%rax), %eax	# target_35(D)->code, D.25803
	cmpw	$63, %ax	#, D.25803
	jne	.L727	#,
	.loc 1 4008 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# target, tmp319
	movzbl	3(%rax), %eax	# *target_35(D), D.25797
	andl	$16, %eax	#, D.25797
	testb	%al, %al	# D.25797
	je	.L727	#,
.LBB61:
	.loc 1 4014 0 is_stmt 1
	movq	$0, -72(%rbp)	#, inner_target
	.loc 1 4022 0
	cmpl	$0, -116(%rbp)	#, want_value
	jne	.L728	#,
	.loc 1 4022 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# exp, tmp320
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movzbl	16(%rax), %eax	# _96->common.code, D.25797
	cmpb	$6, %al	#, D.25797
	je	.L729	#,
	movq	-104(%rbp), %rax	# exp, tmp321
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movzbl	16(%rax), %eax	# _98->common.code, D.25797
	cmpb	$10, %al	#, D.25797
	je	.L729	#,
	movq	-104(%rbp), %rax	# exp, tmp322
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movzbl	16(%rax), %eax	# _100->common.code, D.25797
	cmpb	$11, %al	#, D.25797
	je	.L729	#,
	movq	-104(%rbp), %rax	# exp, tmp323
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movzbl	16(%rax), %eax	# _102->common.code, D.25797
	cmpb	$12, %al	#, D.25797
	jne	.L728	#,
.L729:
	.loc 1 4023 0 is_stmt 1
	movq	-104(%rbp), %rax	# exp, tmp324
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movq	8(%rax), %rax	# _104->common.type, D.25799
	testq	%rax, %rax	# D.25799
	jne	.L728	#,
	.loc 1 4025 0
	movq	-104(%rbp), %rax	# exp, tmp325
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movzbl	17(%rax), %eax	# *_106, tmp328
	shrb	$5, %al	#, D.25804
	movl	%eax, %edx	# D.25804, D.25804
	andl	$1, %edx	#, D.25804
	.loc 1 4026 0
	movq	-112(%rbp), %rax	# target, tmp329
	movzbl	3(%rax), %eax	# *target_35(D), tmp332
	shrb	$2, %al	#, D.25804
	andl	$1, %eax	#, D.25804
	.loc 1 4025 0
	cmpb	%al, %dl	# D.25804, D.25804
	je	.L730	#,
	.loc 1 4029 0
	movq	-104(%rbp), %rax	# exp, tmp333
	movq	8(%rax), %rdx	# exp_30(D)->common.type, D.25799
	movq	-112(%rbp), %rax	# target, tmp334
	movzbl	3(%rax), %eax	# *target_35(D), tmp337
	shrb	$2, %al	#, D.25804
	andl	$1, %eax	#, D.25804
	movzbl	%al, %eax	# D.25804, D.25801
	movq	%rdx, %rsi	# D.25799,
	movl	%eax, %edi	# D.25801,
	call	signed_or_unsigned_type	#
	.loc 1 4028 0
	movq	-104(%rbp), %rdx	# exp, tmp338
	movq	%rdx, %rsi	# tmp338,
	movq	%rax, %rdi	# D.25799,
	call	convert	#
	movq	%rax, -104(%rbp)	# tmp339, exp
.L730:
	.loc 1 4034 0
	movq	-112(%rbp), %rax	# target, tmp340
	movzbl	3(%rax), %eax	# *target_35(D), tmp343
	shrb	$2, %al	#, D.25804
	andl	$1, %eax	#, D.25804
	.loc 1 4033 0
	movzbl	%al, %edx	# D.25804, D.25801
	movq	-112(%rbp), %rax	# target, tmp344
	movq	8(%rax), %rax	# target_35(D)->fld[0].rtx, D.25798
	movzbl	2(%rax), %eax	# _116->mode, D.25797
	movzbl	%al, %eax	# D.25797, D.25802
	movl	%edx, %esi	# D.25801,
	movl	%eax, %edi	# D.25802,
	call	type_for_mode	#
	movq	-104(%rbp), %rdx	# exp, tmp345
	movq	%rdx, %rsi	# tmp345,
	movq	%rax, %rdi	# D.25799,
	call	convert	#
	movq	%rax, -104(%rbp)	# tmp346, exp
	.loc 1 4037 0
	movq	-112(%rbp), %rax	# target, tmp347
	movq	8(%rax), %rax	# target_35(D)->fld[0].rtx, tmp348
	movq	%rax, -72(%rbp)	# tmp348, inner_target
.L728:
	.loc 1 4040 0
	movq	-72(%rbp), %rsi	# inner_target, tmp349
	movq	-104(%rbp), %rax	# exp, tmp350
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp350,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp351, temp
	.loc 1 4045 0
	movq	-80(%rbp), %rax	# temp, tmp352
	movzwl	(%rax), %eax	# temp_122->code, D.25803
	cmpw	$66, %ax	#, D.25803
	jne	.L731	#,
	.loc 1 4045 0 is_stmt 0 discriminator 1
	cmpl	$0, -116(%rbp)	#, want_value
	je	.L731	#,
	.loc 1 4046 0 is_stmt 1
	movq	-80(%rbp), %rax	# temp, tmp353
	movzbl	3(%rax), %eax	# *temp_122, D.25797
	andl	$8, %eax	#, D.25797
	testb	%al, %al	# D.25797
	jne	.L732	#,
	.loc 1 4047 0
	movq	-80(%rbp), %rax	# temp, tmp354
	movq	8(%rax), %rdx	# temp_122->fld[0].rtx, D.25798
	movq	-112(%rbp), %rax	# target, tmp355
	movq	8(%rax), %rax	# target_35(D)->fld[0].rtx, D.25798
	movq	%rdx, %rsi	# D.25798,
	movq	%rax, %rdi	# D.25798,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.25801
	je	.L731	#,
.L732:
	.loc 1 4048 0
	movq	-80(%rbp), %rax	# temp, tmp356
	movq	%rax, %rdi	# tmp356,
	call	copy_to_reg	#
	movq	%rax, -80(%rbp)	# tmp357, temp
.L731:
	.loc 1 4052 0
	movq	-80(%rbp), %rax	# temp, tmp358
	movzwl	(%rax), %eax	# temp_8->code, D.25803
	cmpw	$67, %ax	#, D.25803
	je	.L733	#,
	.loc 1 4052 0 is_stmt 0 discriminator 2
	movq	-80(%rbp), %rax	# temp, tmp359
	movzwl	(%rax), %eax	# temp_8->code, D.25803
	cmpw	$68, %ax	#, D.25803
	je	.L733	#,
	.loc 1 4052 0 discriminator 1
	movq	-80(%rbp), %rax	# temp, tmp360
	movzwl	(%rax), %eax	# temp_8->code, D.25803
	cmpw	$54, %ax	#, D.25803
	je	.L733	#,
	movq	-80(%rbp), %rax	# temp, tmp361
	movzwl	(%rax), %eax	# temp_8->code, D.25803
	cmpw	$55, %ax	#, D.25803
	je	.L733	#,
	movq	-80(%rbp), %rax	# temp, tmp362
	movzwl	(%rax), %eax	# temp_8->code, D.25803
	cmpw	$58, %ax	#, D.25803
	je	.L733	#,
	movq	-80(%rbp), %rax	# temp, tmp363
	movzwl	(%rax), %eax	# temp_8->code, D.25803
	cmpw	$134, %ax	#, D.25803
	je	.L733	#,
	movq	-80(%rbp), %rax	# temp, tmp364
	movzwl	(%rax), %eax	# temp_8->code, D.25803
	cmpw	$56, %ax	#, D.25803
	je	.L733	#,
	movq	-80(%rbp), %rax	# temp, tmp365
	movzwl	(%rax), %eax	# temp_8->code, D.25803
	cmpw	$140, %ax	#, D.25803
	jne	.L734	#,
.L733:
	movq	-80(%rbp), %rax	# temp, tmp366
	movzbl	2(%rax), %eax	# temp_8->mode, D.25797
	testb	%al, %al	# D.25797
	jne	.L734	#,
	.loc 1 4055 0 is_stmt 1
	movq	-112(%rbp), %rax	# target, tmp367
	movzbl	3(%rax), %eax	# *target_35(D), tmp370
	shrb	$2, %al	#, D.25804
	andl	$1, %eax	#, D.25804
	.loc 1 4054 0
	movzbl	%al, %ecx	# D.25804, D.25801
	movq	-104(%rbp), %rax	# exp, tmp371
	movq	8(%rax), %rax	# exp_2->common.type, D.25799
	movzbl	61(%rax), %eax	# *_141, tmp374
	shrb	%al	# D.25805
	movzbl	%al, %esi	# D.25805, D.25802
	movq	-112(%rbp), %rax	# target, tmp375
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	movzbl	%al, %eax	# D.25797, D.25802
	movq	-80(%rbp), %rdx	# temp, tmp376
	movl	%eax, %edi	# D.25802,
	call	convert_modes	#
	movq	%rax, -80(%rbp)	# tmp377, temp
	.loc 1 4058 0
	movq	-112(%rbp), %rax	# target, tmp378
	movzbl	3(%rax), %eax	# *target_35(D), tmp381
	shrb	$2, %al	#, D.25804
	andl	$1, %eax	#, D.25804
	.loc 1 4056 0
	movzbl	%al, %ecx	# D.25804, D.25801
	.loc 1 4057 0
	movq	-112(%rbp), %rax	# target, tmp382
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	.loc 1 4056 0
	movzbl	%al, %esi	# D.25797, D.25802
	movq	-112(%rbp), %rax	# target, tmp383
	movq	8(%rax), %rax	# target_35(D)->fld[0].rtx, D.25798
	movzbl	2(%rax), %eax	# _151->mode, D.25797
	movzbl	%al, %eax	# D.25797, D.25802
	movq	-80(%rbp), %rdx	# temp, tmp384
	movl	%eax, %edi	# D.25802,
	call	convert_modes	#
	movq	%rax, -80(%rbp)	# tmp385, temp
.L734:
	.loc 1 4062 0
	movq	-112(%rbp), %rax	# target, tmp386
	movzbl	3(%rax), %eax	# *target_35(D), tmp389
	shrb	$2, %al	#, D.25804
	andl	$1, %eax	#, D.25804
	.loc 1 4061 0
	movzbl	%al, %edx	# D.25804, D.25801
	movq	-112(%rbp), %rax	# target, tmp390
	movq	8(%rax), %rax	# target_35(D)->fld[0].rtx, D.25798
	movq	-80(%rbp), %rcx	# temp, tmp391
	movq	%rcx, %rsi	# tmp391,
	movq	%rax, %rdi	# D.25798,
	call	convert_move	#
	.loc 1 4068 0
	cmpl	$0, -116(%rbp)	#, want_value
	je	.L735	#,
	.loc 1 4068 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# temp, tmp392
	movzbl	2(%rax), %edx	# temp_9->mode, D.25797
	movq	-112(%rbp), %rax	# target, tmp393
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	cmpb	%al, %dl	# D.25797, D.25797
	je	.L735	#,
	.loc 1 4070 0 is_stmt 1
	movq	-80(%rbp), %rax	# temp, tmp394
	movzbl	2(%rax), %eax	# temp_9->mode, D.25797
	testb	%al, %al	# D.25797
	je	.L736	#,
	.loc 1 4072 0
	movq	-112(%rbp), %rax	# target, tmp395
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	movzbl	%al, %eax	# D.25797, D.25802
	movq	-80(%rbp), %rdx	# temp, tmp396
	movq	%rdx, %rsi	# tmp396,
	movl	%eax, %edi	# D.25802,
	call	gen_lowpart_SUBREG	#
	movq	%rax, -80(%rbp)	# tmp397, temp
	.loc 1 4073 0
	movq	-80(%rbp), %rax	# temp, tmp398
	movzbl	3(%rax), %edx	# temp_163->in_struct, tmp401
	orl	$16, %edx	#, tmp402
	movb	%dl, 3(%rax)	# tmp402, temp_163->in_struct
	.loc 1 4075 0
	movq	-112(%rbp), %rax	# target, tmp403
	movzbl	3(%rax), %eax	# *target_35(D), tmp406
	shrb	$2, %al	#, D.25804
	andl	$1, %eax	#, D.25804
	movq	-80(%rbp), %rdx	# temp, tmp407
	andl	$1, %eax	#, tmp409
	leal	0(,%rax,4), %ecx	#, tmp410
	movzbl	3(%rdx), %eax	# temp_163->unchanging, tmp411
	andl	$-5, %eax	#, tmp412
	orl	%ecx, %eax	# tmp410, tmp413
	movb	%al, 3(%rdx)	# tmp413, temp_163->unchanging
	jmp	.L735	#
.L736:
	.loc 1 4080 0
	movq	-112(%rbp), %rax	# target, tmp414
	movzbl	3(%rax), %eax	# *target_35(D), tmp417
	shrb	$2, %al	#, D.25804
	andl	$1, %eax	#, D.25804
	.loc 1 4078 0
	movzbl	%al, %ecx	# D.25804, D.25801
	.loc 1 4079 0
	movq	-112(%rbp), %rax	# target, tmp418
	movq	8(%rax), %rax	# target_35(D)->fld[0].rtx, D.25798
	movzbl	2(%rax), %eax	# _167->mode, D.25797
	.loc 1 4078 0
	movzbl	%al, %esi	# D.25797, D.25802
	movq	-112(%rbp), %rax	# target, tmp419
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	movzbl	%al, %eax	# D.25797, D.25802
	movq	-80(%rbp), %rdx	# temp, tmp420
	movl	%eax, %edi	# D.25802,
	call	convert_modes	#
	movq	%rax, -80(%rbp)	# tmp421, temp
.L735:
	.loc 1 4083 0
	cmpl	$0, -116(%rbp)	#, want_value
	je	.L737	#,
	.loc 1 4083 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# temp, iftmp.472
	jmp	.L738	#
.L737:
	.loc 1 4083 0 discriminator 2
	movl	$0, %eax	#, iftmp.472
.L738:
	.loc 1 4083 0 discriminator 3
	jmp	.L714	#
.L727:
.LBE61:
	.loc 1 4087 0 is_stmt 1
	movq	-112(%rbp), %rax	# target, tmp422
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	movzbl	%al, %edx	# D.25797, D.25802
	movq	-112(%rbp), %rsi	# target, tmp423
	movq	-104(%rbp), %rax	# exp, tmp424
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp424,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp425, temp
	.loc 1 4095 0
	cmpq	$0, -112(%rbp)	#, target
	je	.L739	#,
	.loc 1 4095 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# target, tmp426
	movzwl	(%rax), %eax	# target_35(D)->code, D.25803
	cmpw	$61, %ax	#, D.25803
	jne	.L739	#,
	.loc 1 4096 0 is_stmt 1 discriminator 1
	movq	-112(%rbp), %rax	# target, tmp427
	movl	8(%rax), %eax	# target_35(D)->fld[0].rtuint, D.25806
	.loc 1 4095 0 discriminator 1
	cmpl	$52, %eax	#, D.25806
	jbe	.L722	#,
.L739:
	.loc 1 4097 0
	movq	-112(%rbp), %rax	# target, tmp428
	movzwl	(%rax), %eax	# target_35(D)->code, D.25803
	cmpw	$66, %ax	#, D.25803
	jne	.L740	#,
	.loc 1 4097 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# target, tmp429
	movzbl	3(%rax), %eax	# *target_35(D), D.25797
	andl	$8, %eax	#, D.25797
	testb	%al, %al	# D.25797
	jne	.L722	#,
.L740:
	.loc 1 4098 0 is_stmt 1
	movq	-112(%rbp), %rdx	# target, tmp430
	movq	-80(%rbp), %rax	# temp, tmp431
	movq	%rdx, %rsi	# tmp430,
	movq	%rax, %rdi	# tmp431,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.25801
	jne	.L722	#,
	.loc 1 4099 0
	movq	-80(%rbp), %rax	# temp, tmp432
	movzwl	(%rax), %eax	# temp_178->code, D.25803
	cmpw	$67, %ax	#, D.25803
	je	.L741	#,
	.loc 1 4099 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# temp, tmp433
	movzwl	(%rax), %eax	# temp_178->code, D.25803
	cmpw	$68, %ax	#, D.25803
	je	.L741	#,
	movq	-80(%rbp), %rax	# temp, tmp434
	movzwl	(%rax), %eax	# temp_178->code, D.25803
	cmpw	$54, %ax	#, D.25803
	je	.L741	#,
	movq	-80(%rbp), %rax	# temp, tmp435
	movzwl	(%rax), %eax	# temp_178->code, D.25803
	cmpw	$55, %ax	#, D.25803
	je	.L741	#,
	movq	-80(%rbp), %rax	# temp, tmp436
	movzwl	(%rax), %eax	# temp_178->code, D.25803
	cmpw	$58, %ax	#, D.25803
	je	.L741	#,
	movq	-80(%rbp), %rax	# temp, tmp437
	movzwl	(%rax), %eax	# temp_178->code, D.25803
	cmpw	$134, %ax	#, D.25803
	je	.L741	#,
	movq	-80(%rbp), %rax	# temp, tmp438
	movzwl	(%rax), %eax	# temp_178->code, D.25803
	cmpw	$56, %ax	#, D.25803
	je	.L741	#,
	movq	-80(%rbp), %rax	# temp, tmp439
	movzwl	(%rax), %eax	# temp_178->code, D.25803
	cmpw	$140, %ax	#, D.25803
	je	.L741	#,
	cmpl	$0, -116(%rbp)	#, want_value
	je	.L722	#,
.L741:
	.loc 1 4100 0 is_stmt 1
	movl	$1, -92(%rbp)	#, dont_return_target
.L722:
	.loc 1 4107 0
	movq	-80(%rbp), %rax	# temp, tmp440
	movzwl	(%rax), %eax	# temp_11->code, D.25803
	cmpw	$67, %ax	#, D.25803
	je	.L742	#,
	.loc 1 4107 0 is_stmt 0 discriminator 2
	movq	-80(%rbp), %rax	# temp, tmp441
	movzwl	(%rax), %eax	# temp_11->code, D.25803
	cmpw	$68, %ax	#, D.25803
	je	.L742	#,
	.loc 1 4107 0 discriminator 1
	movq	-80(%rbp), %rax	# temp, tmp442
	movzwl	(%rax), %eax	# temp_11->code, D.25803
	cmpw	$54, %ax	#, D.25803
	je	.L742	#,
	movq	-80(%rbp), %rax	# temp, tmp443
	movzwl	(%rax), %eax	# temp_11->code, D.25803
	cmpw	$55, %ax	#, D.25803
	je	.L742	#,
	movq	-80(%rbp), %rax	# temp, tmp444
	movzwl	(%rax), %eax	# temp_11->code, D.25803
	cmpw	$58, %ax	#, D.25803
	je	.L742	#,
	movq	-80(%rbp), %rax	# temp, tmp445
	movzwl	(%rax), %eax	# temp_11->code, D.25803
	cmpw	$134, %ax	#, D.25803
	je	.L742	#,
	movq	-80(%rbp), %rax	# temp, tmp446
	movzwl	(%rax), %eax	# temp_11->code, D.25803
	cmpw	$56, %ax	#, D.25803
	je	.L742	#,
	movq	-80(%rbp), %rax	# temp, tmp447
	movzwl	(%rax), %eax	# temp_11->code, D.25803
	cmpw	$140, %ax	#, D.25803
	jne	.L743	#,
.L742:
	movq	-80(%rbp), %rax	# temp, tmp448
	movzbl	2(%rax), %eax	# temp_11->mode, D.25797
	testb	%al, %al	# D.25797
	jne	.L743	#,
	.loc 1 4108 0 is_stmt 1
	movq	-104(%rbp), %rax	# exp, tmp449
	movzbl	16(%rax), %eax	# exp_30(D)->common.code, D.25797
	testb	%al, %al	# D.25797
	je	.L743	#,
	.loc 1 4109 0
	movq	-112(%rbp), %rax	# target, tmp450
	movzbl	2(%rax), %edx	# target_35(D)->mode, D.25797
	movq	-104(%rbp), %rax	# exp, tmp451
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movzbl	61(%rax), %eax	# *_205, tmp454
	shrb	%al	# D.25805
	cmpb	%al, %dl	# D.25797, D.25797
	je	.L743	#,
	.loc 1 4111 0
	movq	-104(%rbp), %rax	# exp, tmp455
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movzbl	17(%rax), %eax	# *_208, tmp458
	shrb	$5, %al	#, D.25804
	andl	$1, %eax	#, D.25804
	.loc 1 4110 0
	movzbl	%al, %ecx	# D.25804, D.25801
	movq	-104(%rbp), %rax	# exp, tmp459
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movzbl	61(%rax), %eax	# *_211, tmp462
	shrb	%al	# D.25805
	movzbl	%al, %esi	# D.25805, D.25802
	movq	-112(%rbp), %rax	# target, tmp463
	movzbl	2(%rax), %eax	# target_35(D)->mode, D.25797
	movzbl	%al, %eax	# D.25797, D.25802
	movq	-80(%rbp), %rdx	# temp, tmp464
	movl	%eax, %edi	# D.25802,
	call	convert_modes	#
	movq	%rax, -80(%rbp)	# tmp465, temp
.L743:
	.loc 1 4127 0
	movq	-112(%rbp), %rdx	# target, tmp466
	movq	-80(%rbp), %rax	# temp, tmp467
	movq	%rdx, %rsi	# tmp466,
	movq	%rax, %rdi	# tmp467,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.25801
	je	.L744	#,
	.loc 1 4128 0
	movq	-80(%rbp), %rax	# temp, tmp468
	cmpq	-112(%rbp), %rax	# target, tmp468
	je	.L745	#,
	.loc 1 4128 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# temp, tmp469
	movq	%rax, %rdi	# tmp469,
	call	side_effects_p	#
	testl	%eax, %eax	# D.25801
	jne	.L744	#,
	.loc 1 4129 0 is_stmt 1
	movq	-112(%rbp), %rax	# target, tmp470
	movq	%rax, %rdi	# tmp470,
	call	side_effects_p	#
	testl	%eax, %eax	# D.25801
	je	.L745	#,
.L744:
	.loc 1 4130 0
	movq	-104(%rbp), %rax	# exp, tmp471
	movzbl	16(%rax), %eax	# exp_30(D)->common.code, D.25797
	testb	%al, %al	# D.25797
	je	.L745	#,
	.loc 1 4131 0
	cmpl	$0, -88(%rbp)	#, dont_store_target
	jne	.L745	#,
	.loc 1 4135 0
	movq	-104(%rbp), %rax	# exp, tmp472
	movzbl	16(%rax), %eax	# exp_30(D)->common.code, D.25797
	movzbl	%al, %eax	# D.25797, D.25801
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25807
	cmpb	$100, %al	#, D.25807
	jne	.L746	#,
	.loc 1 4136 0
	movq	-104(%rbp), %rax	# exp, tmp474
	movq	144(%rax), %rax	# exp_30(D)->decl.rtl, D.25798
	testq	%rax, %rax	# D.25798
	je	.L747	#,
	.loc 1 4136 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# exp, tmp475
	movq	144(%rax), %rax	# exp_30(D)->decl.rtl, D.25798
	testq	%rax, %rax	# D.25798
	je	.L748	#,
	movq	-104(%rbp), %rax	# exp, tmp476
	movq	144(%rax), %rax	# exp_30(D)->decl.rtl, iftmp.474
	jmp	.L750	#
.L748:
	.loc 1 4136 0 discriminator 2
	movq	-104(%rbp), %rax	# exp, tmp477
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp477,
	call	make_decl_rtl	#
	movq	-104(%rbp), %rax	# exp, tmp478
	movq	144(%rax), %rax	# exp_30(D)->decl.rtl, iftmp.474
	jmp	.L750	#
.L747:
	movl	$0, %eax	#, iftmp.473
.L750:
	.loc 1 4136 0 discriminator 3
	cmpq	-112(%rbp), %rax	# target, iftmp.473
	je	.L745	#,
.L746:
	.loc 1 4138 0 is_stmt 1
	movq	-112(%rbp), %rax	# target, tmp479
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp479,
	call	protect_from_queue	#
	movq	%rax, -112(%rbp)	# tmp480, target
	.loc 1 4139 0
	movq	-80(%rbp), %rax	# temp, tmp481
	movzbl	2(%rax), %edx	# temp_12->mode, D.25797
	movq	-112(%rbp), %rax	# target, tmp482
	movzbl	2(%rax), %eax	# target_230->mode, D.25797
	cmpb	%al, %dl	# D.25797, D.25797
	je	.L751	#,
	.loc 1 4140 0
	movq	-80(%rbp), %rax	# temp, tmp483
	movzbl	2(%rax), %eax	# temp_12->mode, D.25797
	testb	%al, %al	# D.25797
	je	.L751	#,
.LBB62:
	.loc 1 4142 0
	movq	-104(%rbp), %rax	# exp, tmp484
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movzbl	17(%rax), %eax	# *_234, tmp487
	shrb	$5, %al	#, D.25804
	andl	$1, %eax	#, D.25804
	movzbl	%al, %eax	# D.25804, tmp488
	movl	%eax, -84(%rbp)	# tmp488, unsignedp
	.loc 1 4143 0
	cmpl	$0, -92(%rbp)	#, dont_return_target
	je	.L752	#,
	.loc 1 4148 0
	movq	-112(%rbp), %rax	# target, tmp489
	movzbl	2(%rax), %eax	# target_230->mode, D.25797
	movzbl	%al, %eax	# D.25797, D.25802
	movl	-84(%rbp), %edx	# unsignedp, tmp490
	movq	-80(%rbp), %rcx	# temp, tmp491
	movq	%rcx, %rsi	# tmp491,
	movl	%eax, %edi	# D.25802,
	call	convert_to_mode	#
	movq	%rax, -80(%rbp)	# tmp492, temp
	.loc 1 4149 0
	movq	-80(%rbp), %rdx	# temp, tmp493
	movq	-112(%rbp), %rax	# target, tmp494
	movq	%rdx, %rsi	# tmp493,
	movq	%rax, %rdi	# tmp494,
	call	emit_move_insn	#
.LBE62:
	.loc 1 4141 0
	jmp	.L745	#
.L752:
.LBB63:
	.loc 1 4152 0
	movl	-84(%rbp), %edx	# unsignedp, tmp495
	movq	-80(%rbp), %rcx	# temp, tmp496
	movq	-112(%rbp), %rax	# target, tmp497
	movq	%rcx, %rsi	# tmp496,
	movq	%rax, %rdi	# tmp497,
	call	convert_move	#
.LBE63:
	.loc 1 4141 0
	jmp	.L745	#
.L751:
	.loc 1 4155 0
	movq	-80(%rbp), %rax	# temp, tmp498
	movzbl	2(%rax), %eax	# temp_12->mode, D.25797
	cmpb	$51, %al	#, D.25797
	jne	.L754	#,
	.loc 1 4155 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# exp, tmp499
	movzbl	16(%rax), %eax	# exp_30(D)->common.code, D.25797
	cmpb	$29, %al	#, D.25797
	jne	.L754	#,
.LBB64:
	.loc 1 4161 0 is_stmt 1
	movq	-104(%rbp), %rax	# exp, tmp500
	movq	%rax, %rdi	# tmp500,
	call	expr_size	#
	movq	%rax, -64(%rbp)	# tmp501, size
	.loc 1 4163 0
	movq	-64(%rbp), %rax	# size, tmp502
	movzwl	(%rax), %eax	# size_242->code, D.25803
	cmpw	$54, %ax	#, D.25803
	jne	.L755	#,
	.loc 1 4164 0
	movq	-64(%rbp), %rax	# size, tmp503
	movq	8(%rax), %rdx	# size_242->fld[0].rtwint, D.25808
	movq	-104(%rbp), %rax	# exp, tmp504
	movl	32(%rax), %eax	# exp_30(D)->string.length, D.25801
	cltq
	cmpq	%rax, %rdx	# D.25808, D.25808
	jge	.L755	#,
	.loc 1 4165 0
	movq	-64(%rbp), %rdx	# size, tmp505
	movq	-80(%rbp), %rcx	# temp, tmp506
	movq	-112(%rbp), %rax	# target, tmp507
	movq	%rcx, %rsi	# tmp506,
	movq	%rax, %rdi	# tmp507,
	call	emit_block_move	#
	jmp	.L756	#
.L755:
.LBB65:
	.loc 1 4172 0
	movq	-104(%rbp), %rax	# exp, tmp508
	movl	32(%rax), %eax	# exp_30(D)->string.length, D.25801
	.loc 1 4170 0
	cltq
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25808,
	call	size_int_wide	#
	movq	%rax, %rbx	#, D.25799
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25799
	movq	-64(%rbp), %rdx	# size, tmp509
	movq	%rdx, %rsi	# tmp509,
	movq	%rax, %rdi	# D.25799,
	call	make_tree	#
	.loc 1 4169 0
	movq	%rbx, %rdx	# D.25799,
	movq	%rax, %rsi	# D.25799,
	movl	$78, %edi	#,
	call	size_binop	#
	movq	%rax, -32(%rbp)	# tmp510, copy_size
	.loc 1 4173 0
	movq	-32(%rbp), %rax	# copy_size, tmp511
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp511,
	call	expand_expr	#
	movq	%rax, -24(%rbp)	# tmp512, copy_size_rtx
	.loc 1 4175 0
	movq	$0, -56(%rbp)	#, label
	.loc 1 4178 0
	movl	ptr_mode(%rip), %eax	# ptr_mode, ptr_mode.475
	movq	-24(%rbp), %rcx	# copy_size_rtx, tmp513
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp513,
	movl	%eax, %edi	# ptr_mode.475,
	call	convert_to_mode	#
	movq	%rax, -24(%rbp)	# tmp514, copy_size_rtx
	.loc 1 4179 0
	movq	-24(%rbp), %rdx	# copy_size_rtx, tmp515
	movq	-80(%rbp), %rcx	# temp, tmp516
	movq	-112(%rbp), %rax	# target, tmp517
	movq	%rcx, %rsi	# tmp516,
	movq	%rax, %rdi	# tmp517,
	call	emit_block_move	#
	.loc 1 4183 0
	movq	-24(%rbp), %rax	# copy_size_rtx, tmp518
	movzwl	(%rax), %eax	# copy_size_rtx_256->code, D.25803
	cmpw	$54, %ax	#, D.25803
	jne	.L757	#,
	.loc 1 4185 0
	movq	-24(%rbp), %rax	# copy_size_rtx, tmp519
	movq	8(%rax), %rax	# copy_size_rtx_256->fld[0].rtwint, D.25808
	negq	%rax	# D.25808
	movq	%rax, %rdx	# D.25808, D.25808
	movq	-64(%rbp), %rax	# size, tmp520
	movq	%rdx, %rsi	# D.25808,
	movq	%rax, %rdi	# tmp520,
	call	plus_constant_wide	#
	movq	%rax, -64(%rbp)	# tmp521, size
	.loc 1 4186 0
	movq	-24(%rbp), %rax	# copy_size_rtx, tmp522
	movq	8(%rax), %rdx	# copy_size_rtx_256->fld[0].rtwint, D.25808
	movq	-112(%rbp), %rax	# target, tmp523
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$51, %esi	#,
	movq	%rax, %rdi	# tmp523,
	call	adjust_address_1	#
	movq	%rax, -112(%rbp)	# tmp524, target
	jmp	.L758	#
.L757:
	.loc 1 4191 0
	movq	optab_table+16(%rip), %rsi	# optab_table, D.25809
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25799
	movzbl	61(%rax), %eax	# *_264, tmp527
	shrb	%al	# D.25805
	movzbl	%al, %eax	# D.25805, D.25802
	movq	-24(%rbp), %rcx	# copy_size_rtx, tmp528
	movq	-64(%rbp), %rdx	# size, tmp529
	movl	$3, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movl	%eax, %edi	# D.25802,
	call	expand_binop	#
	movq	%rax, -64(%rbp)	# tmp530, size
	.loc 1 4201 0
	movq	-32(%rbp), %rax	# copy_size, tmp531
	movq	%rax, %rdi	# tmp531,
	call	highest_pow2_factor	#
	movq	%rax, %rdx	#, D.25808
	movq	-24(%rbp), %rcx	# copy_size_rtx, tmp532
	movq	-112(%rbp), %rax	# target, tmp533
	movq	%rcx, %rsi	# tmp532,
	movq	%rax, %rdi	# tmp533,
	call	offset_address	#
	movq	%rax, -112(%rbp)	# tmp534, target
	.loc 1 4203 0
	call	gen_label_rtx	#
	movq	%rax, -56(%rbp)	# tmp535, label
	.loc 1 4205 0
	movq	-64(%rbp), %rax	# size, tmp536
	movzbl	2(%rax), %eax	# size_267->mode, D.25797
	.loc 1 4204 0
	movzbl	%al, %ecx	# D.25797, D.25802
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25798
	movq	-64(%rbp), %rax	# size, tmp537
	movq	-56(%rbp), %rdx	# label, tmp538
	movq	%rdx, (%rsp)	# tmp538,
	movl	$0, %r9d	#,
	movl	%ecx, %r8d	# D.25802,
	movl	$0, %ecx	#,
	movl	$107, %edx	#,
	movq	%rax, %rdi	# tmp537,
	call	emit_cmp_and_jump_insns	#
.L758:
	.loc 1 4208 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25798
	cmpq	-64(%rbp), %rax	# size, D.25798
	je	.L759	#,
	.loc 1 4209 0
	movq	-64(%rbp), %rdx	# size, tmp539
	movq	-112(%rbp), %rax	# target, tmp540
	movq	%rdx, %rsi	# tmp539,
	movq	%rax, %rdi	# tmp540,
	call	clear_storage	#
.L759:
	.loc 1 4211 0
	cmpq	$0, -56(%rbp)	#, label
	je	.L756	#,
	.loc 1 4212 0
	movq	-56(%rbp), %rax	# label, tmp541
	movq	%rax, %rdi	# tmp541,
	call	emit_label	#
.LBE65:
.LBE64:
	.loc 1 4156 0
	jmp	.L745	#
.L756:
	jmp	.L745	#
.L754:
	.loc 1 4217 0
	movq	-112(%rbp), %rax	# target, tmp542
	movzwl	(%rax), %eax	# target_230->code, D.25803
	cmpw	$39, %ax	#, D.25803
	jne	.L760	#,
	.loc 1 4218 0
	movq	-104(%rbp), %rax	# exp, tmp543
	movq	8(%rax), %rax	# exp_30(D)->common.type, D.25799
	movq	%rax, %rdi	# D.25799,
	call	int_size_in_bytes	#
	movl	%eax, %edx	# D.25808, D.25801
	movq	-80(%rbp), %rcx	# temp, tmp544
	movq	-112(%rbp), %rax	# target, tmp545
	movq	%rcx, %rsi	# tmp544,
	movq	%rax, %rdi	# tmp545,
	call	emit_group_load	#
	jmp	.L745	#
.L760:
	.loc 1 4219 0
	movq	-80(%rbp), %rax	# temp, tmp546
	movzbl	2(%rax), %eax	# temp_12->mode, D.25797
	cmpb	$51, %al	#, D.25797
	jne	.L761	#,
	.loc 1 4220 0
	movq	-104(%rbp), %rax	# exp, tmp547
	movq	%rax, %rdi	# tmp547,
	call	expr_size	#
	movq	%rax, %rdx	#, D.25798
	movq	-80(%rbp), %rcx	# temp, tmp548
	movq	-112(%rbp), %rax	# target, tmp549
	movq	%rcx, %rsi	# tmp548,
	movq	%rax, %rdi	# tmp549,
	call	emit_block_move	#
	jmp	.L745	#
.L761:
	.loc 1 4222 0
	movq	-80(%rbp), %rdx	# temp, tmp550
	movq	-112(%rbp), %rax	# target, tmp551
	movq	%rdx, %rsi	# tmp550,
	movq	%rax, %rdi	# tmp551,
	call	emit_move_insn	#
.L745:
	.loc 1 4226 0
	cmpl	$0, -116(%rbp)	#, want_value
	jne	.L762	#,
	.loc 1 4227 0
	movl	$0, %eax	#, D.25796
	jmp	.L714	#
.L762:
	.loc 1 4231 0
	cmpl	$0, -92(%rbp)	#, dont_return_target
	je	.L763	#,
	.loc 1 4231 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# temp, tmp552
	movzwl	(%rax), %eax	# temp_14->code, D.25803
	cmpw	$66, %ax	#, D.25803
	je	.L763	#,
	.loc 1 4232 0 is_stmt 1
	movq	-80(%rbp), %rax	# temp, D.25796
	jmp	.L714	#
.L763:
	.loc 1 4235 0
	cmpl	$0, -116(%rbp)	#, want_value
	je	.L764	#,
	.loc 1 4235 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# target, tmp553
	movzbl	2(%rax), %eax	# target_5->mode, D.25797
	cmpb	$51, %al	#, D.25797
	je	.L764	#,
	.loc 1 4236 0 is_stmt 1
	movq	-112(%rbp), %rax	# target, tmp554
	movzwl	(%rax), %eax	# target_5->code, D.25803
	cmpw	$61, %ax	#, D.25803
	jne	.L765	#,
	.loc 1 4237 0 discriminator 1
	movq	-112(%rbp), %rax	# target, tmp555
	movl	8(%rax), %eax	# target_5->fld[0].rtuint, D.25806
	.loc 1 4236 0 discriminator 1
	cmpl	$52, %eax	#, D.25806
	jbe	.L764	#,
.L765:
	.loc 1 4238 0
	movq	-112(%rbp), %rax	# target, tmp556
	movq	%rax, %rdi	# tmp556,
	call	copy_to_reg	#
	jmp	.L714	#
.L764:
	.loc 1 4241 0
	movq	-112(%rbp), %rax	# target, D.25796
.L714:
	.loc 1 4242 0
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE40:
	.size	store_expr, .-store_expr
	.type	is_zeros_p, @function
is_zeros_p:
.LFB41:
	.loc 1 4249 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# exp, exp
	.loc 1 4252 0
	movq	-24(%rbp), %rax	# exp, tmp81
	movzbl	16(%rax), %eax	# exp_5(D)->common.code, D.25811
	movzbl	%al, %eax	# D.25811, D.25812
	cmpl	$28, %eax	#, D.25812
	je	.L768	#,
	cmpl	$28, %eax	#, D.25812
	ja	.L769	#,
	cmpl	$26, %eax	#, D.25812
	je	.L770	#,
	cmpl	$26, %eax	#, D.25812
	ja	.L771	#,
	cmpl	$25, %eax	#, D.25812
	je	.L772	#,
	jmp	.L767	#
.L769:
	cmpl	$46, %eax	#, D.25812
	je	.L773	#,
	cmpl	$46, %eax	#, D.25812
	jb	.L767	#,
	subl	$114, %eax	#, tmp82
	cmpl	$3, %eax	#, tmp82
	ja	.L767	#,
	.loc 1 4258 0
	movq	-24(%rbp), %rax	# exp, tmp83
	movq	32(%rax), %rax	# exp_5(D)->exp.operands, D.25813
	movq	%rax, %rdi	# D.25813,
	call	is_zeros_p	#
	jmp	.L775	#
.L772:
	.loc 1 4261 0
	movq	-24(%rbp), %rax	# exp, tmp84
	movq	%rax, %rdi	# tmp84,
	call	integer_zerop	#
	jmp	.L775	#
.L771:
	.loc 1 4265 0
	movq	-24(%rbp), %rax	# exp, tmp85
	movq	32(%rax), %rax	# exp_5(D)->complex.real, D.25813
	movq	%rax, %rdi	# D.25813,
	call	is_zeros_p	#
	testl	%eax, %eax	# D.25810
	je	.L776	#,
	.loc 1 4265 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# exp, tmp86
	movq	40(%rax), %rax	# exp_5(D)->complex.imag, D.25813
	movq	%rax, %rdi	# D.25813,
	call	is_zeros_p	#
	testl	%eax, %eax	# D.25810
	je	.L776	#,
	.loc 1 4265 0 discriminator 3
	movl	$1, %eax	#, iftmp.476
	jmp	.L777	#
.L776:
	.loc 1 4265 0 discriminator 2
	movl	$0, %eax	#, iftmp.476
.L777:
	.loc 1 4264 0 is_stmt 1
	jmp	.L775	#
.L770:
	.loc 1 4268 0
	movq	-24(%rbp), %rax	# exp, tmp87
	addq	$32, %rax	#, D.25814
	movl	$24, %edx	#,
	movl	$dconst0, %esi	#,
	movq	%rax, %rdi	# D.25814,
	call	memcmp	#
	testl	%eax, %eax	# D.25810
	sete	%al	#, D.25815
	movzbl	%al, %eax	# D.25815, D.25810
	jmp	.L775	#
.L768:
	.loc 1 4271 0
	movq	-24(%rbp), %rax	# exp, tmp88
	movq	32(%rax), %rax	# exp_5(D)->vector.elements, tmp89
	movq	%rax, -8(%rbp)	# tmp89, elt
	jmp	.L778	#
.L780:
	.loc 1 4273 0
	movq	-8(%rbp), %rax	# elt, tmp90
	movq	32(%rax), %rax	# elt_1->list.value, D.25813
	movq	%rax, %rdi	# D.25813,
	call	is_zeros_p	#
	testl	%eax, %eax	# D.25810
	jne	.L779	#,
	.loc 1 4274 0
	movl	$0, %eax	#, D.25810
	jmp	.L775	#
.L779:
	.loc 1 4272 0
	movq	-8(%rbp), %rax	# elt, tmp91
	movq	(%rax), %rax	# elt_1->common.chain, tmp92
	movq	%rax, -8(%rbp)	# tmp92, elt
.L778:
	.loc 1 4271 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, elt
	jne	.L780	#,
	.loc 1 4276 0
	movl	$1, %eax	#, D.25810
	jmp	.L775	#
.L773:
	.loc 1 4279 0
	movq	-24(%rbp), %rax	# exp, tmp93
	movq	8(%rax), %rax	# exp_5(D)->common.type, D.25813
	testq	%rax, %rax	# D.25813
	je	.L781	#,
	.loc 1 4279 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# exp, tmp94
	movq	8(%rax), %rax	# exp_5(D)->common.type, D.25813
	movzbl	16(%rax), %eax	# _29->common.code, D.25811
	cmpb	$19, %al	#, D.25811
	jne	.L781	#,
	.loc 1 4280 0 is_stmt 1
	movq	-24(%rbp), %rax	# exp, tmp95
	movq	40(%rax), %rax	# exp_5(D)->exp.operands, D.25813
	testq	%rax, %rax	# D.25813
	sete	%al	#, D.25815
	movzbl	%al, %eax	# D.25815, D.25810
	jmp	.L775	#
.L781:
	.loc 1 4281 0
	movq	-24(%rbp), %rax	# exp, tmp96
	movq	40(%rax), %rax	# exp_5(D)->exp.operands, tmp97
	movq	%rax, -8(%rbp)	# tmp97, elt
	jmp	.L782	#
.L784:
	.loc 1 4282 0
	movq	-8(%rbp), %rax	# elt, tmp98
	movq	32(%rax), %rax	# elt_2->list.value, D.25813
	movq	%rax, %rdi	# D.25813,
	call	is_zeros_p	#
	testl	%eax, %eax	# D.25810
	jne	.L783	#,
	.loc 1 4283 0
	movl	$0, %eax	#, D.25810
	jmp	.L775	#
.L783:
	.loc 1 4281 0
	movq	-8(%rbp), %rax	# elt, tmp99
	movq	(%rax), %rax	# elt_2->common.chain, tmp100
	movq	%rax, -8(%rbp)	# tmp100, elt
.L782:
	.loc 1 4281 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, elt
	jne	.L784	#,
	.loc 1 4285 0 is_stmt 1
	movl	$1, %eax	#, D.25810
	jmp	.L775	#
.L767:
	.loc 1 4288 0
	movl	$0, %eax	#, D.25810
.L775:
	.loc 1 4290 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE41:
	.size	is_zeros_p, .-is_zeros_p
	.type	mostly_zeros_p, @function
mostly_zeros_p:
.LFB42:
	.loc 1 4297 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# exp, exp
	.loc 1 4298 0
	movq	-24(%rbp), %rax	# exp, tmp71
	movzbl	16(%rax), %eax	# exp_6(D)->common.code, D.25818
	cmpb	$46, %al	#, D.25818
	jne	.L786	#,
.LBB66:
	.loc 1 4300 0
	movl	$0, -16(%rbp)	#, elts
	movl	$0, -12(%rbp)	#, zeros
	.loc 1 4301 0
	movq	-24(%rbp), %rax	# exp, tmp72
	movq	40(%rax), %rax	# exp_6(D)->exp.operands, tmp73
	movq	%rax, -8(%rbp)	# tmp73, elt
	.loc 1 4302 0
	movq	-24(%rbp), %rax	# exp, tmp74
	movq	8(%rax), %rax	# exp_6(D)->common.type, D.25819
	testq	%rax, %rax	# D.25819
	je	.L787	#,
	.loc 1 4302 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# exp, tmp75
	movq	8(%rax), %rax	# exp_6(D)->common.type, D.25819
	movzbl	16(%rax), %eax	# _12->common.code, D.25818
	cmpb	$19, %al	#, D.25818
	jne	.L787	#,
	.loc 1 4305 0 is_stmt 1
	cmpq	$0, -8(%rbp)	#, elt
	sete	%al	#, D.25820
	movzbl	%al, %eax	# D.25820, D.25817
	jmp	.L788	#
.L787:
	.loc 1 4307 0
	jmp	.L789	#
.L791:
	.loc 1 4314 0
	movq	-8(%rbp), %rax	# elt, tmp76
	movq	32(%rax), %rax	# elt_4->list.value, D.25819
	movq	%rax, %rdi	# D.25819,
	call	mostly_zeros_p	#
	testl	%eax, %eax	# D.25817
	je	.L790	#,
	.loc 1 4315 0
	addl	$1, -12(%rbp)	#, zeros
.L790:
	.loc 1 4316 0
	addl	$1, -16(%rbp)	#, elts
	.loc 1 4307 0
	movq	-8(%rbp), %rax	# elt, tmp77
	movq	(%rax), %rax	# elt_4->common.chain, tmp78
	movq	%rax, -8(%rbp)	# tmp78, elt
.L789:
	.loc 1 4307 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, elt
	jne	.L791	#,
	.loc 1 4319 0 is_stmt 1
	movl	-12(%rbp), %eax	# zeros, tmp79
	leal	0(,%rax,4), %ecx	#, D.25817
	movl	-16(%rbp), %edx	# elts, tmp80
	movl	%edx, %eax	# tmp80, tmp81
	addl	%eax, %eax	# tmp81
	addl	%edx, %eax	# tmp80, D.25817
	cmpl	%eax, %ecx	# D.25817, D.25817
	setge	%al	#, D.25820
	movzbl	%al, %eax	# D.25820, D.25817
	jmp	.L788	#
.L786:
.LBE66:
	.loc 1 4322 0
	movq	-24(%rbp), %rax	# exp, tmp82
	movq	%rax, %rdi	# tmp82,
	call	is_zeros_p	#
.L788:
	.loc 1 4323 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE42:
	.size	mostly_zeros_p, .-mostly_zeros_p
	.type	store_constructor_field, @function
store_constructor_field:
.LFB43:
	.loc 1 4346 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# target, target
	movq	%rsi, -32(%rbp)	# bitsize, bitsize
	movq	%rdx, -40(%rbp)	# bitpos, bitpos
	movl	%ecx, -44(%rbp)	# mode, mode
	movq	%r8, -56(%rbp)	# exp, exp
	movq	%r9, -64(%rbp)	# type, type
	.loc 1 4347 0
	movq	-56(%rbp), %rax	# exp, tmp82
	movzbl	16(%rax), %eax	# exp_4(D)->common.code, D.25821
	cmpb	$46, %al	#, D.25821
	jne	.L793	#,
	.loc 1 4348 0
	movq	-40(%rbp), %rax	# bitpos, bitpos.477
	andl	$7, %eax	#, D.25822
	testq	%rax, %rax	# D.25822
	jne	.L793	#,
	.loc 1 4352 0
	cmpq	$0, -40(%rbp)	#, bitpos
	je	.L794	#,
	.loc 1 4352 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# target, tmp83
	movzwl	(%rax), %eax	# target_9(D)->code, D.25823
	cmpw	$66, %ax	#, D.25823
	jne	.L793	#,
.L794:
	.loc 1 4354 0 is_stmt 1
	movq	-24(%rbp), %rax	# target, tmp84
	movzwl	(%rax), %eax	# target_9(D)->code, D.25823
	cmpw	$66, %ax	#, D.25823
	jne	.L795	#,
	.loc 1 4356 0
	movq	-40(%rbp), %rax	# bitpos, tmp85
	leaq	7(%rax), %rdx	#, tmp87
	testq	%rax, %rax	# tmp86
	cmovs	%rdx, %rax	# tmp87,, tmp86
	sarq	$3, %rax	#, tmp88
	movq	%rax, %rbx	# tmp88, D.25824
	movq	-24(%rbp), %rax	# target, tmp89
	movzbl	2(%rax), %eax	# target_9(D)->mode, D.25821
	cmpb	$51, %al	#, D.25821
	je	.L796	#,
	.loc 1 4356 0 is_stmt 0 discriminator 2
	movq	-24(%rbp), %rax	# target, tmp90
	movzbl	2(%rax), %eax	# target_9(D)->mode, D.25821
	movzbl	%al, %eax	# D.25821, D.25825
	movl	%eax, %edi	# D.25825,
	call	get_mode_alignment	#
	movl	%eax, %ecx	# D.25826, D.25824
	movq	-40(%rbp), %rax	# bitpos, tmp91
	cqto
	idivq	%rcx	# D.25824
	movq	%rdx, %rax	# tmp92, D.25824
	testq	%rax, %rax	# D.25824
	je	.L797	#,
.L796:
	.loc 1 4356 0 discriminator 1
	movl	$51, %eax	#, iftmp.478
	jmp	.L798	#
.L797:
	movl	$0, %eax	#, iftmp.478
.L798:
	.loc 1 4356 0 discriminator 3
	movq	-24(%rbp), %rdi	# target, tmp94
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rbx, %rdx	# D.25824,
	movl	%eax, %esi	# iftmp.478,
	call	adjust_address_1	#
	movq	%rax, -24(%rbp)	# tmp95, target
.L795:
	.loc 1 4364 0 is_stmt 1
	movq	-24(%rbp), %rax	# target, tmp96
	movzwl	(%rax), %eax	# target_1->code, D.25823
	cmpw	$66, %ax	#, D.25823
	jne	.L799	#,
	.loc 1 4364 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# target, tmp97
	movzbl	3(%rax), %eax	# *target_1, D.25821
	andl	$1, %eax	#, D.25821
	testb	%al, %al	# D.25821
	jne	.L799	#,
	.loc 1 4365 0 is_stmt 1
	movq	-24(%rbp), %rax	# target, tmp98
	movq	16(%rax), %rax	# target_1->fld[1].rtmem, D.25827
	testq	%rax, %rax	# D.25827
	je	.L799	#,
	.loc 1 4365 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# target, tmp99
	movq	16(%rax), %rax	# target_1->fld[1].rtmem, D.25827
	movq	(%rax), %rax	# _26->alias, D.25824
	testq	%rax, %rax	# D.25824
	je	.L799	#,
	.loc 1 4367 0 is_stmt 1
	movq	-24(%rbp), %rax	# target, tmp100
	movq	%rax, %rdi	# tmp100,
	call	copy_rtx	#
	movq	%rax, -24(%rbp)	# tmp101, target
	.loc 1 4368 0
	movl	24(%rbp), %eax	# alias_set, tmp102
	movslq	%eax, %rdx	# tmp102, D.25824
	movq	-24(%rbp), %rax	# target, tmp103
	movq	%rdx, %rsi	# D.25824,
	movq	%rax, %rdi	# tmp103,
	call	set_mem_alias_set	#
.L799:
	.loc 1 4371 0
	movq	-32(%rbp), %rax	# bitsize, tmp104
	shrq	$3, %rax	#, D.25828
	movq	%rax, %rdx	# D.25828, D.25824
	movq	-24(%rbp), %rsi	# target, tmp105
	movq	-56(%rbp), %rax	# exp, tmp106
	movq	%rdx, %rcx	# D.25824,
	movl	16(%rbp), %edx	# cleared,
	movq	%rax, %rdi	# tmp106,
	call	store_constructor	#
	jmp	.L792	#
.L793:
	.loc 1 4374 0
	movq	-32(%rbp), %rsi	# bitsize, bitsize.479
	movq	-56(%rbp), %r8	# exp, tmp107
	movl	-44(%rbp), %ecx	# mode, tmp108
	movq	-40(%rbp), %rdx	# bitpos, tmp109
	movq	-24(%rbp), %rax	# target, tmp110
	movl	24(%rbp), %edi	# alias_set, tmp111
	movl	%edi, 16(%rsp)	# tmp111,
	movq	-64(%rbp), %rdi	# type, tmp112
	movq	%rdi, 8(%rsp)	# tmp112,
	movl	$0, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%rax, %rdi	# tmp110,
	call	store_field	#
.L792:
	.loc 1 4376 0
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE43:
	.size	store_constructor_field, .-store_constructor_field
	.section	.rodata
.LC4:
	.string	"__setbits"
	.text
	.type	store_constructor, @function
store_constructor:
.LFB44:
	.loc 1 4392 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$600, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
	movq	%rdi, -568(%rbp)	# exp, exp
	movq	%rsi, -576(%rbp)	# target, target
	movl	%edx, -580(%rbp)	# cleared, cleared
	movq	%rcx, -592(%rbp)	# size, size
	.loc 1 4393 0
	movq	-568(%rbp), %rax	# exp, tmp343
	movq	8(%rax), %rax	# exp_63(D)->common.type, tmp344
	movq	%rax, -320(%rbp)	# tmp344, type
	.loc 1 4398 0
	movq	-320(%rbp), %rax	# type, tmp345
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$20, %al	#, D.25829
	je	.L802	#,
	.loc 1 4398 0 is_stmt 0 discriminator 1
	movq	-320(%rbp), %rax	# type, tmp346
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$21, %al	#, D.25829
	je	.L802	#,
	.loc 1 4399 0 is_stmt 1
	movq	-320(%rbp), %rax	# type, tmp347
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$22, %al	#, D.25829
	jne	.L803	#,
.L802:
.LBB67:
	.loc 1 4404 0
	movq	-320(%rbp), %rax	# type, tmp348
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$21, %al	#, D.25829
	je	.L804	#,
	.loc 1 4405 0
	movq	-320(%rbp), %rax	# type, tmp349
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$22, %al	#, D.25829
	jne	.L805	#,
.L804:
	.loc 1 4406 0
	cmpl	$0, -580(%rbp)	#, cleared
	jne	.L805	#,
	.loc 1 4407 0
	movq	-568(%rbp), %rax	# exp, tmp350
	movq	40(%rax), %rax	# exp_63(D)->exp.operands, D.25832
	testq	%rax, %rax	# D.25832
	jne	.L805	#,
	.loc 1 4410 0
	movq	-568(%rbp), %rax	# exp, tmp351
	movq	%rax, %rdi	# tmp351,
	call	expr_size	#
	movq	%rax, %rdx	#, D.25831
	movq	-576(%rbp), %rax	# target, tmp352
	movq	%rdx, %rsi	# D.25831,
	movq	%rax, %rdi	# tmp352,
	call	clear_storage	#
	.loc 1 4411 0
	movl	$1, -580(%rbp)	#, cleared
	jmp	.L806	#
.L805:
	.loc 1 4418 0
	cmpl	$0, -580(%rbp)	#, cleared
	jne	.L807	#,
	.loc 1 4418 0 is_stmt 0 discriminator 1
	movq	-576(%rbp), %rax	# target, tmp353
	movzwl	(%rax), %eax	# target_78(D)->code, D.25839
	cmpw	$61, %ax	#, D.25839
	jne	.L807	#,
	movq	-568(%rbp), %rax	# exp, tmp354
	movzbl	18(%rax), %eax	# *exp_63(D), D.25829
	andl	$4, %eax	#, D.25829
	testb	%al, %al	# D.25829
	je	.L807	#,
	.loc 1 4419 0 is_stmt 1
	movq	-576(%rbp), %rax	# target, tmp355
	movzbl	2(%rax), %eax	# target_78(D)->mode, D.25829
	movzbl	%al, %eax	# D.25829, D.25833
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25829
	movzbl	%al, %edx	# D.25829, D.25833
	movl	target_flags(%rip), %eax	# target_flags, target_flags.481
	andl	$33554432, %eax	#, D.25833
	testl	%eax, %eax	# D.25833
	je	.L808	#,
	.loc 1 4419 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.480
	jmp	.L809	#
.L808:
	.loc 1 4419 0 discriminator 2
	movl	$4, %eax	#, iftmp.480
.L809:
	.loc 1 4419 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.480, D.25833
	jg	.L807	#,
	.loc 1 4421 0 is_stmt 1
	movq	-576(%rbp), %rax	# target, tmp357
	movzbl	2(%rax), %eax	# target_78(D)->mode, D.25829
	movzbl	%al, %eax	# D.25829, D.25833
	cltq
	movq	const_tiny_rtx(,%rax,8), %rdx	# const_tiny_rtx, D.25831
	movq	-576(%rbp), %rax	# target, tmp359
	movq	%rdx, %rsi	# D.25831,
	movq	%rax, %rdi	# tmp359,
	call	emit_move_insn	#
	.loc 1 4422 0
	movl	$1, -580(%rbp)	#, cleared
	jmp	.L806	#
.L807:
	.loc 1 4430 0
	cmpl	$0, -580(%rbp)	#, cleared
	jne	.L806	#,
	.loc 1 4430 0 is_stmt 0 discriminator 1
	cmpq	$0, -592(%rbp)	#, size
	jle	.L806	#,
	.loc 1 4431 0 is_stmt 1
	movq	-568(%rbp), %rax	# exp, tmp360
	movq	40(%rax), %rax	# exp_63(D)->exp.operands, D.25832
	movq	%rax, %rdi	# D.25832,
	call	list_length	#
	movl	%eax, %ebx	#, D.25833
	.loc 1 4432 0
	movq	-320(%rbp), %rax	# type, tmp361
	movq	%rax, %rdi	# tmp361,
	call	fields_length	#
	.loc 1 4431 0
	cmpl	%eax, %ebx	# D.25833, D.25833
	jne	.L810	#,
	.loc 1 4433 0
	movq	-568(%rbp), %rax	# exp, tmp362
	movq	%rax, %rdi	# tmp362,
	call	mostly_zeros_p	#
	testl	%eax, %eax	# D.25833
	je	.L806	#,
.L810:
	.loc 1 4434 0
	movq	-576(%rbp), %rax	# target, tmp363
	movzwl	(%rax), %eax	# target_78(D)->code, D.25839
	cmpw	$61, %ax	#, D.25839
	jne	.L811	#,
	.loc 1 4435 0
	movq	-576(%rbp), %rax	# target, tmp364
	movzbl	2(%rax), %eax	# target_78(D)->mode, D.25829
	movzbl	%al, %eax	# D.25829, D.25833
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25829
	movzbl	%al, %eax	# D.25829, D.25830
	cmpq	-592(%rbp), %rax	# size, D.25830
	jne	.L806	#,
.L811:
	.loc 1 4438 0
	movq	-592(%rbp), %rax	# size, tmp366
	movq	%rax, %rsi	# tmp366,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.25831
	movq	-576(%rbp), %rax	# target, tmp367
	movq	%rdx, %rsi	# D.25831,
	movq	%rax, %rdi	# tmp367,
	call	clear_storage	#
	.loc 1 4439 0
	movl	$1, -580(%rbp)	#, cleared
.L806:
	.loc 1 4442 0
	cmpl	$0, -580(%rbp)	#, cleared
	jne	.L812	#,
	.loc 1 4443 0
	movq	-576(%rbp), %rax	# target, tmp368
	movq	%rax, %rdx	# tmp368,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdi	# D.25831,
	call	emit_insn	#
.L812:
	.loc 1 4448 0
	movq	-568(%rbp), %rax	# exp, tmp369
	movq	40(%rax), %rax	# exp_63(D)->exp.operands, tmp370
	movq	%rax, -504(%rbp)	# tmp370, elt
	jmp	.L813	#
.L829:
.LBB68:
	.loc 1 4450 0
	movq	-504(%rbp), %rax	# elt, tmp371
	movq	24(%rax), %rax	# elt_10->list.purpose, tmp372
	movq	%rax, -64(%rbp)	# tmp372, field
	.loc 1 4451 0
	movq	-504(%rbp), %rax	# elt, tmp373
	movq	32(%rax), %rax	# elt_10->list.value, tmp374
	movq	%rax, -56(%rbp)	# tmp374, value
	.loc 1 4454 0
	movq	$0, -488(%rbp)	#, bitpos
	.loc 1 4457 0
	movq	-576(%rbp), %rax	# target, tmp375
	movq	%rax, -472(%rbp)	# tmp375, to_rtx
	.loc 1 4462 0
	cmpq	$0, -64(%rbp)	#, field
	jne	.L814	#,
	.loc 1 4463 0
	jmp	.L815	#
.L814:
	.loc 1 4465 0
	cmpl	$0, -580(%rbp)	#, cleared
	je	.L816	#,
	.loc 1 4465 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# value, tmp376
	movq	%rax, %rdi	# tmp376,
	call	is_zeros_p	#
	testl	%eax, %eax	# D.25833
	je	.L816	#,
	.loc 1 4466 0 is_stmt 1
	jmp	.L815	#
.L816:
	.loc 1 4468 0
	movq	-64(%rbp), %rax	# field, tmp377
	movq	40(%rax), %rax	# field_435->decl.size, D.25832
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L817	#,
	.loc 1 4469 0
	movq	-64(%rbp), %rax	# field, tmp378
	movq	40(%rax), %rax	# field_435->decl.size, D.25832
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	movq	%rax, -496(%rbp)	# tmp379, bitsize
	jmp	.L818	#
.L817:
	.loc 1 4471 0
	movq	$-1, -496(%rbp)	#, bitsize
.L818:
	.loc 1 4473 0
	movq	-64(%rbp), %rax	# field, tmp380
	movzbl	17(%rax), %eax	# *field_435, tmp383
	shrb	$5, %al	#, D.25844
	andl	$1, %eax	#, D.25844
	movzbl	%al, %eax	# D.25844, tmp384
	movl	%eax, -508(%rbp)	# tmp384, unsignedp
	.loc 1 4474 0
	movq	-64(%rbp), %rax	# field, tmp385
	movzbl	48(%rax), %eax	# field_435->decl.mode, D.25829
	movzbl	%al, %eax	# D.25829, tmp386
	movl	%eax, -548(%rbp)	# tmp386, mode
	.loc 1 4475 0
	movq	-64(%rbp), %rax	# field, tmp387
	movzbl	49(%rax), %eax	# *field_435, D.25829
	andl	$16, %eax	#, D.25829
	testb	%al, %al	# D.25829
	je	.L819	#,
	.loc 1 4476 0
	movl	$0, -548(%rbp)	#, mode
.L819:
	.loc 1 4478 0
	movq	-64(%rbp), %rax	# field, tmp388
	movq	88(%rax), %rax	# field_435->decl.arguments, tmp389
	movq	%rax, -480(%rbp)	# tmp389, offset
	.loc 1 4479 0
	movq	-480(%rbp), %rax	# offset, tmp390
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp390,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L820	#,
	.loc 1 4480 0
	movq	-64(%rbp), %rax	# field, tmp391
	movq	%rax, %rdi	# tmp391,
	call	bit_position	#
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L820	#,
	.loc 1 4482 0
	movq	-64(%rbp), %rax	# field, tmp392
	movq	%rax, %rdi	# tmp392,
	call	int_bit_position	#
	movq	%rax, -488(%rbp)	# tmp393, bitpos
	.loc 1 4483 0
	movq	$0, -480(%rbp)	#, offset
	jmp	.L821	#
.L820:
	.loc 1 4486 0
	movq	-64(%rbp), %rax	# field, tmp394
	movq	160(%rax), %rax	# field_435->decl.u2.t, D.25832
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	movq	%rax, -488(%rbp)	# tmp395, bitpos
.L821:
	.loc 1 4488 0
	cmpq	$0, -480(%rbp)	#, offset
	je	.L822	#,
.LBB69:
	.loc 1 4492 0
	movq	-480(%rbp), %rax	# offset, tmp396
	movq	%rax, %rdi	# tmp396,
	call	contains_placeholder_p	#
	testl	%eax, %eax	# D.25833
	je	.L823	#,
	.loc 1 4493 0
	movq	-568(%rbp), %rax	# exp, tmp397
	movq	8(%rax), %rax	# exp_63(D)->common.type, D.25832
	movq	-576(%rbp), %rdx	# target, tmp398
	movq	%rdx, %rsi	# tmp398,
	movq	%rax, %rdi	# D.25832,
	call	make_tree	#
	movq	%rax, %rcx	#, D.25832
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25832
	movq	-480(%rbp), %rdx	# offset, tmp399
	movq	%rax, %rsi	# D.25832,
	movl	$58, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -480(%rbp)	# tmp400, offset
.L823:
	.loc 1 4496 0
	movq	-480(%rbp), %rax	# offset, tmp401
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp401,
	call	expand_expr	#
	movq	%rax, -464(%rbp)	# tmp402, offset_rtx
	.loc 1 4497 0
	movq	-472(%rbp), %rax	# to_rtx, tmp403
	movzwl	(%rax), %eax	# to_rtx_438->code, D.25839
	cmpw	$66, %ax	#, D.25839
	je	.L824	#,
	.loc 1 4498 0
	movl	$__FUNCTION__.14784, %edx	#,
	movl	$4498, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L824:
	.loc 1 4504 0
	movq	-464(%rbp), %rax	# offset_rtx, tmp404
	movzbl	2(%rax), %eax	# offset_rtx_465->mode, D.25829
	movzbl	%al, %edx	# D.25829, D.25840
	movl	ptr_mode(%rip), %eax	# ptr_mode, ptr_mode.482
	cmpl	%eax, %edx	# ptr_mode.482, D.25840
	je	.L825	#,
	.loc 1 4505 0
	movl	ptr_mode(%rip), %eax	# ptr_mode, ptr_mode.483
	movq	-464(%rbp), %rcx	# offset_rtx, tmp405
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp405,
	movl	%eax, %edi	# ptr_mode.483,
	call	convert_to_mode	#
	movq	%rax, -464(%rbp)	# tmp406, offset_rtx
.L825:
	.loc 1 4508 0
	movq	-480(%rbp), %rax	# offset, tmp407
	movq	%rax, %rdi	# tmp407,
	call	highest_pow2_factor	#
	movq	%rax, %rdx	#, D.25830
	movq	-464(%rbp), %rcx	# offset_rtx, tmp408
	movq	-472(%rbp), %rax	# to_rtx, tmp409
	movq	%rcx, %rsi	# tmp408,
	movq	%rax, %rdi	# tmp409,
	call	offset_address	#
	movq	%rax, -472(%rbp)	# tmp410, to_rtx
.L822:
.LBE69:
	.loc 1 4512 0
	movq	-64(%rbp), %rax	# field, tmp411
	movzbl	17(%rax), %eax	# *field_435, D.25829
	andl	$16, %eax	#, D.25829
	testb	%al, %al	# D.25829
	je	.L826	#,
	.loc 1 4514 0
	movq	-472(%rbp), %rax	# to_rtx, tmp412
	movzwl	(%rax), %eax	# to_rtx_16->code, D.25839
	cmpw	$66, %ax	#, D.25839
	jne	.L827	#,
	.loc 1 4515 0
	movq	-472(%rbp), %rax	# to_rtx, tmp413
	movq	%rax, %rdi	# tmp413,
	call	copy_rtx	#
	movq	%rax, -472(%rbp)	# tmp414, to_rtx
.L827:
	.loc 1 4517 0
	movq	-472(%rbp), %rax	# to_rtx, tmp415
	movzbl	3(%rax), %edx	# to_rtx_17->unchanging, tmp418
	orl	$4, %edx	#, tmp419
	movb	%dl, 3(%rax)	# tmp419, to_rtx_17->unchanging
.L826:
	.loc 1 4550 0
	movq	-472(%rbp), %rax	# to_rtx, tmp420
	movzwl	(%rax), %eax	# to_rtx_18->code, D.25839
	cmpw	$66, %ax	#, D.25839
	jne	.L828	#,
	.loc 1 4550 0 is_stmt 0 discriminator 1
	movq	-472(%rbp), %rax	# to_rtx, tmp421
	movzbl	3(%rax), %eax	# *to_rtx_18, D.25829
	andl	$1, %eax	#, D.25829
	testb	%al, %al	# D.25829
	jne	.L828	#,
	.loc 1 4551 0 is_stmt 1
	movq	-64(%rbp), %rax	# field, tmp422
	movzbl	52(%rax), %eax	# *field_435, D.25829
	andl	$4, %eax	#, D.25829
	testb	%al, %al	# D.25829
	je	.L828	#,
	.loc 1 4553 0
	movq	-472(%rbp), %rax	# to_rtx, tmp423
	movq	%rax, %rdi	# tmp423,
	call	copy_rtx	#
	movq	%rax, -472(%rbp)	# tmp424, to_rtx
	.loc 1 4554 0
	movq	-472(%rbp), %rax	# to_rtx, tmp425
	movzbl	3(%rax), %edx	# to_rtx_483->jump, tmp428
	orl	$1, %edx	#, tmp429
	movb	%dl, 3(%rax)	# tmp429, to_rtx_483->jump
.L828:
	.loc 1 4559 0
	movq	-64(%rbp), %rax	# field, tmp430
	movq	8(%rax), %rax	# field_435->common.type, D.25832
	movq	%rax, %rdi	# D.25832,
	call	get_alias_set	#
	.loc 1 4557 0
	movl	%eax, %edi	# D.25830, D.25833
	movq	-496(%rbp), %rsi	# bitsize, bitsize.484
	movq	-320(%rbp), %r9	# type, tmp431
	movq	-56(%rbp), %r8	# value, tmp432
	movl	-548(%rbp), %ecx	# mode, tmp433
	movq	-488(%rbp), %rdx	# bitpos, tmp434
	movq	-472(%rbp), %rax	# to_rtx, tmp435
	movl	%edi, 8(%rsp)	# D.25833,
	movl	-580(%rbp), %edi	# cleared, tmp436
	movl	%edi, (%rsp)	# tmp436,
	movq	%rax, %rdi	# tmp435,
	call	store_constructor_field	#
.L815:
.LBE68:
	.loc 1 4448 0
	movq	-504(%rbp), %rax	# elt, tmp437
	movq	(%rax), %rax	# elt_10->common.chain, tmp438
	movq	%rax, -504(%rbp)	# tmp438, elt
.L813:
	.loc 1 4448 0 is_stmt 0 discriminator 1
	cmpq	$0, -504(%rbp)	#, elt
	jne	.L829	#,
.LBE67:
	.loc 1 4400 0 is_stmt 1
	jmp	.L801	#
.L803:
	.loc 1 4562 0
	movq	-320(%rbp), %rax	# type, tmp439
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$18, %al	#, D.25829
	je	.L831	#,
	.loc 1 4563 0
	movq	-320(%rbp), %rax	# type, tmp440
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$9, %al	#, D.25829
	jne	.L832	#,
.L831:
.LBB70:
	.loc 1 4568 0
	movq	-320(%rbp), %rax	# type, tmp441
	movq	24(%rax), %rax	# type_64->type.values, tmp442
	movq	%rax, -448(%rbp)	# tmp442, domain
	.loc 1 4569 0
	movq	-320(%rbp), %rax	# type, tmp443
	movq	8(%rax), %rax	# type_64->common.type, tmp444
	movq	%rax, -208(%rbp)	# tmp444, elttype
	.loc 1 4571 0
	movq	$0, -440(%rbp)	#, minelt
	.loc 1 4572 0
	movq	$0, -432(%rbp)	#, maxelt
	.loc 1 4576 0
	movq	-320(%rbp), %rax	# type, tmp445
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$9, %al	#, D.25829
	jne	.L833	#,
	.loc 1 4581 0
	movq	-320(%rbp), %rax	# type, tmp446
	movq	24(%rax), %rax	# type_64->type.values, tmp447
	movq	%rax, -448(%rbp)	# tmp447, domain
	.loc 1 4582 0
	movq	-448(%rbp), %rax	# domain, tmp448
	movq	24(%rax), %rax	# domain_220->type.values, D.25832
	movq	8(%rax), %rax	# _221->common.type, D.25832
	movq	24(%rax), %rax	# _222->type.values, tmp449
	movq	%rax, -448(%rbp)	# tmp449, domain
.L833:
	.loc 1 4585 0
	movq	-448(%rbp), %rax	# domain, tmp450
	movq	104(%rax), %rax	# domain_26->type.minval, D.25832
	.loc 1 4588 0
	testq	%rax, %rax	# D.25832
	je	.L834	#,
	.loc 1 4586 0
	movq	-448(%rbp), %rax	# domain, tmp451
	movq	112(%rax), %rax	# domain_26->type.maxval, D.25832
	testq	%rax, %rax	# D.25832
	je	.L834	#,
	.loc 1 4587 0
	movq	-448(%rbp), %rax	# domain, tmp452
	movq	104(%rax), %rax	# domain_26->type.minval, D.25832
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L834	#,
	.loc 1 4588 0
	movq	-448(%rbp), %rax	# domain, tmp453
	movq	112(%rax), %rax	# domain_26->type.maxval, D.25832
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L834	#,
	.loc 1 4588 0 is_stmt 0 discriminator 2
	movl	$1, %eax	#, iftmp.485
	jmp	.L835	#
.L834:
	.loc 1 4588 0 discriminator 1
	movl	$0, %eax	#, iftmp.485
.L835:
	.loc 1 4585 0 is_stmt 1
	movl	%eax, -516(%rbp)	# iftmp.485, const_bounds_p
	.loc 1 4591 0
	cmpl	$0, -516(%rbp)	#, const_bounds_p
	je	.L836	#,
	.loc 1 4593 0
	movq	-448(%rbp), %rax	# domain, tmp454
	movq	104(%rax), %rax	# domain_26->type.minval, D.25832
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	movq	%rax, -440(%rbp)	# tmp455, minelt
	.loc 1 4594 0
	movq	-448(%rbp), %rax	# domain, tmp456
	movq	112(%rax), %rax	# domain_26->type.maxval, D.25832
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	movq	%rax, -432(%rbp)	# tmp457, maxelt
.L836:
	.loc 1 4600 0
	cmpl	$0, -580(%rbp)	#, cleared
	jne	.L837	#,
	.loc 1 4600 0 is_stmt 0 discriminator 1
	movq	-576(%rbp), %rax	# target, tmp458
	movzwl	(%rax), %eax	# target_78(D)->code, D.25839
	cmpw	$61, %ax	#, D.25839
	jne	.L838	#,
	movq	-568(%rbp), %rax	# exp, tmp459
	movzbl	18(%rax), %eax	# *exp_63(D), D.25829
	andl	$4, %eax	#, D.25829
	testb	%al, %al	# D.25829
	je	.L838	#,
.L837:
	.loc 1 4601 0 is_stmt 1
	movl	$1, -540(%rbp)	#, need_to_clear
	jmp	.L839	#
.L838:
.LBB71:
	.loc 1 4604 0
	movq	$0, -424(%rbp)	#, count
	movq	$0, -416(%rbp)	#, zero_count
	.loc 1 4605 0
	cmpl	$0, -516(%rbp)	#, const_bounds_p
	sete	%al	#, D.25834
	movzbl	%al, %eax	# D.25834, tmp460
	movl	%eax, -540(%rbp)	# tmp460, need_to_clear
	.loc 1 4610 0
	movq	-568(%rbp), %rax	# exp, tmp461
	movq	40(%rax), %rax	# exp_63(D)->exp.operands, tmp462
	movq	%rax, -456(%rbp)	# tmp462, elt
	jmp	.L840	#
.L847:
.LBB72:
	.loc 1 4614 0
	movq	-456(%rbp), %rax	# elt, tmp463
	movq	24(%rax), %rax	# elt_21->list.purpose, tmp464
	movq	%rax, -200(%rbp)	# tmp464, index
	.loc 1 4617 0
	cmpq	$0, -200(%rbp)	#, index
	je	.L841	#,
	.loc 1 4617 0 is_stmt 0 discriminator 1
	movq	-200(%rbp), %rax	# index, tmp465
	movzbl	16(%rax), %eax	# index_245->common.code, D.25829
	cmpb	$113, %al	#, D.25829
	jne	.L841	#,
.LBB73:
	.loc 1 4619 0 is_stmt 1
	movq	-200(%rbp), %rax	# index, tmp466
	movq	32(%rax), %rax	# index_245->exp.operands, tmp467
	movq	%rax, -192(%rbp)	# tmp467, lo_index
	.loc 1 4620 0
	movq	-200(%rbp), %rax	# index, tmp468
	movq	40(%rax), %rax	# index_245->exp.operands, tmp469
	movq	%rax, -184(%rbp)	# tmp469, hi_index
	.loc 1 4622 0
	movq	-192(%rbp), %rax	# lo_index, tmp470
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp470,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L842	#,
	.loc 1 4623 0
	movq	-184(%rbp), %rax	# hi_index, tmp471
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp471,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	jne	.L843	#,
.L842:
	.loc 1 4625 0
	movl	$1, -540(%rbp)	#, need_to_clear
	.loc 1 4626 0
	jmp	.L844	#
.L843:
	.loc 1 4629 0
	movq	-184(%rbp), %rax	# hi_index, tmp472
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp472,
	call	tree_low_cst	#
	movq	%rax, %rbx	#, D.25830
	.loc 1 4630 0
	movq	-192(%rbp), %rax	# lo_index, tmp473
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp473,
	call	tree_low_cst	#
	subq	%rax, %rbx	# D.25830, D.25830
	movq	%rbx, %rax	# D.25830, D.25830
	.loc 1 4629 0
	addq	$1, %rax	#, tmp474
	movq	%rax, -408(%rbp)	# tmp474, this_node_count
.LBE73:
	.loc 1 4618 0
	jmp	.L845	#
.L841:
	.loc 1 4633 0
	movq	$1, -408(%rbp)	#, this_node_count
.L845:
	.loc 1 4635 0
	movq	-408(%rbp), %rax	# this_node_count, tmp475
	addq	%rax, -424(%rbp)	# tmp475, count
	.loc 1 4636 0
	movq	-456(%rbp), %rax	# elt, tmp476
	movq	32(%rax), %rax	# elt_21->list.value, D.25832
	movq	%rax, %rdi	# D.25832,
	call	mostly_zeros_p	#
	testl	%eax, %eax	# D.25833
	je	.L846	#,
	.loc 1 4637 0
	movq	-408(%rbp), %rax	# this_node_count, tmp477
	addq	%rax, -416(%rbp)	# tmp477, zero_count
.L846:
.LBE72:
	.loc 1 4612 0
	movq	-456(%rbp), %rax	# elt, tmp478
	movq	(%rax), %rax	# elt_21->common.chain, tmp479
	movq	%rax, -456(%rbp)	# tmp479, elt
.L840:
	.loc 1 4610 0 discriminator 1
	cmpq	$0, -456(%rbp)	#, elt
	je	.L844	#,
	.loc 1 4611 0
	cmpl	$0, -540(%rbp)	#, need_to_clear
	je	.L847	#,
.L844:
	.loc 1 4642 0
	cmpl	$0, -540(%rbp)	#, need_to_clear
	jne	.L839	#,
	.loc 1 4643 0
	movq	-440(%rbp), %rax	# minelt, tmp480
	movq	-432(%rbp), %rdx	# maxelt, tmp481
	subq	%rax, %rdx	# tmp480, D.25830
	movq	%rdx, %rax	# D.25830, D.25830
	addq	$1, %rax	#, D.25830
	cmpq	-424(%rbp), %rax	# count, D.25830
	jg	.L848	#,
	.loc 1 4643 0 is_stmt 0 discriminator 1
	movq	-416(%rbp), %rax	# zero_count, tmp482
	leaq	0(,%rax,4), %rcx	#, D.25830
	movq	-424(%rbp), %rdx	# count, tmp483
	movq	%rdx, %rax	# tmp483, tmp484
	addq	%rax, %rax	# tmp484
	addq	%rdx, %rax	# tmp483, D.25830
	cmpq	%rax, %rcx	# D.25830, D.25830
	jl	.L839	#,
.L848:
	.loc 1 4644 0 is_stmt 1
	movl	$1, -540(%rbp)	#, need_to_clear
.L839:
.LBE71:
	.loc 1 4647 0
	cmpl	$0, -540(%rbp)	#, need_to_clear
	je	.L849	#,
	.loc 1 4647 0 is_stmt 0 discriminator 1
	cmpq	$0, -592(%rbp)	#, size
	jle	.L849	#,
	.loc 1 4649 0 is_stmt 1
	cmpl	$0, -580(%rbp)	#, cleared
	jne	.L850	#,
	.loc 1 4651 0
	movq	-576(%rbp), %rax	# target, tmp485
	movzwl	(%rax), %eax	# target_78(D)->code, D.25839
	cmpw	$61, %ax	#, D.25839
	jne	.L851	#,
	.loc 1 4652 0
	movq	-576(%rbp), %rax	# target, tmp486
	movzbl	2(%rax), %eax	# target_78(D)->mode, D.25829
	movzbl	%al, %eax	# D.25829, D.25833
	cltq
	movq	const_tiny_rtx(,%rax,8), %rdx	# const_tiny_rtx, D.25831
	movq	-576(%rbp), %rax	# target, tmp488
	movq	%rdx, %rsi	# D.25831,
	movq	%rax, %rdi	# tmp488,
	call	emit_move_insn	#
	jmp	.L850	#
.L851:
	.loc 1 4654 0
	movq	-592(%rbp), %rax	# size, tmp489
	movq	%rax, %rsi	# tmp489,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.25831
	movq	-576(%rbp), %rax	# target, tmp490
	movq	%rdx, %rsi	# D.25831,
	movq	%rax, %rdi	# tmp490,
	call	clear_storage	#
.L850:
	.loc 1 4656 0
	movl	$1, -580(%rbp)	#, cleared
	jmp	.L852	#
.L849:
	.loc 1 4658 0
	movq	-576(%rbp), %rax	# target, tmp491
	movzwl	(%rax), %eax	# target_78(D)->code, D.25839
	cmpw	$61, %ax	#, D.25839
	jne	.L852	#,
	.loc 1 4660 0
	movq	-576(%rbp), %rax	# target, tmp492
	movq	%rax, %rdx	# tmp492,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	%rax, %rdi	# D.25831,
	call	emit_insn	#
.L852:
	.loc 1 4665 0
	movq	-568(%rbp), %rax	# exp, tmp493
	movq	40(%rax), %rax	# exp_63(D)->exp.operands, tmp494
	movq	%rax, -456(%rbp)	# tmp494, elt
	movl	$0, -544(%rbp)	#, i
	jmp	.L853	#
.L881:
.LBB74:
	.loc 1 4673 0
	movq	-456(%rbp), %rax	# elt, tmp495
	movq	32(%rax), %rax	# elt_22->list.value, tmp496
	movq	%rax, -176(%rbp)	# tmp496, value
	.loc 1 4674 0
	movq	-456(%rbp), %rax	# elt, tmp497
	movq	24(%rax), %rax	# elt_22->list.purpose, tmp498
	movq	%rax, -384(%rbp)	# tmp498, index
	.loc 1 4675 0
	movq	-576(%rbp), %rax	# target, tmp499
	movq	%rax, -168(%rbp)	# tmp499, xtarget
	.loc 1 4677 0
	cmpl	$0, -580(%rbp)	#, cleared
	je	.L854	#,
	.loc 1 4677 0 is_stmt 0 discriminator 1
	movq	-176(%rbp), %rax	# value, tmp500
	movq	%rax, %rdi	# tmp500,
	call	is_zeros_p	#
	testl	%eax, %eax	# D.25833
	jne	.L855	#,
.L854:
	.loc 1 4680 0 is_stmt 1
	movq	-208(%rbp), %rax	# elttype, tmp501
	movzbl	17(%rax), %eax	# *elttype_216, tmp504
	shrb	$5, %al	#, D.25844
	andl	$1, %eax	#, D.25844
	movzbl	%al, %eax	# D.25844, unsignedp.486
	movl	%eax, -552(%rbp)	# unsignedp.486, unsignedp
	.loc 1 4681 0
	movq	-208(%rbp), %rax	# elttype, tmp505
	movzbl	61(%rax), %eax	# *elttype_216, tmp508
	shrb	%al	# D.25843
	movzbl	%al, %eax	# D.25843, tmp509
	movl	%eax, -512(%rbp)	# tmp509, mode
	.loc 1 4682 0
	cmpl	$51, -512(%rbp)	#, mode
	jne	.L856	#,
	.loc 1 4683 0
	movq	-208(%rbp), %rax	# elttype, tmp510
	movq	32(%rax), %rax	# elttype_216->type.size, D.25832
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	host_integerp	#
	.loc 1 4685 0
	testl	%eax, %eax	# D.25833
	je	.L857	#,
	.loc 1 4684 0
	movq	-208(%rbp), %rax	# elttype, tmp511
	movq	32(%rax), %rax	# elttype_216->type.size, D.25832
	.loc 1 4685 0
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	jmp	.L858	#
.L857:
	.loc 1 4685 0 is_stmt 0 discriminator 1
	movq	$-1, %rax	#, iftmp.487
.L858:
	.loc 1 4683 0 is_stmt 1 discriminator 1
	movq	%rax, -400(%rbp)	# iftmp.487, bitsize
	jmp	.L859	#
.L856:
	.loc 1 4687 0
	movl	-512(%rbp), %eax	# mode, mode.488
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25839
	movzwl	%ax, %eax	# D.25839, tmp513
	movq	%rax, -400(%rbp)	# tmp513, bitsize
.L859:
	.loc 1 4689 0
	cmpq	$0, -384(%rbp)	#, index
	je	.L860	#,
	.loc 1 4689 0 is_stmt 0 discriminator 1
	movq	-384(%rbp), %rax	# index, tmp514
	movzbl	16(%rax), %eax	# index_279->common.code, D.25829
	cmpb	$113, %al	#, D.25829
	jne	.L860	#,
.LBB75:
	.loc 1 4691 0 is_stmt 1
	movq	-384(%rbp), %rax	# index, tmp515
	movq	32(%rax), %rax	# index_279->exp.operands, tmp516
	movq	%rax, -160(%rbp)	# tmp516, lo_index
	.loc 1 4692 0
	movq	-384(%rbp), %rax	# index, tmp517
	movq	40(%rax), %rax	# index_279->exp.operands, tmp518
	movq	%rax, -152(%rbp)	# tmp518, hi_index
	.loc 1 4699 0
	cmpl	$0, -516(%rbp)	#, const_bounds_p
	je	.L861	#,
	.loc 1 4700 0
	movq	-160(%rbp), %rax	# lo_index, tmp519
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp519,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L861	#,
	.loc 1 4701 0
	movq	-152(%rbp), %rax	# hi_index, tmp520
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp520,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L861	#,
	.loc 1 4702 0
	movq	-160(%rbp), %rax	# lo_index, tmp521
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp521,
	call	tree_low_cst	#
	movq	%rax, -376(%rbp)	# tmp522, lo
	.loc 1 4703 0
	movq	-152(%rbp), %rax	# hi_index, tmp523
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp523,
	call	tree_low_cst	#
	movq	%rax, -144(%rbp)	# tmp524, hi
	.loc 1 4704 0
	movq	-376(%rbp), %rax	# lo, tmp525
	movq	-144(%rbp), %rdx	# hi, tmp526
	subq	%rax, %rdx	# tmp525, D.25830
	movq	%rdx, %rax	# D.25830, D.25830
	addq	$1, %rax	#, tmp527
	movq	%rax, -136(%rbp)	# tmp527, count
	.loc 1 4705 0
	movq	-576(%rbp), %rax	# target, tmp528
	movzwl	(%rax), %eax	# target_7->code, D.25839
	.loc 1 4707 0
	cmpw	$66, %ax	#, D.25839
	jne	.L862	#,
	.loc 1 4706 0
	cmpq	$2, -136(%rbp)	#, count
	jle	.L862	#,
	.loc 1 4707 0
	movq	-208(%rbp), %rax	# elttype, tmp529
	movq	32(%rax), %rax	# elttype_216->type.size, D.25832
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L863	#,
	.loc 1 4708 0
	movq	-208(%rbp), %rax	# elttype, tmp530
	movq	32(%rax), %rax	# elttype_216->type.size, D.25832
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	imulq	-136(%rbp), %rax	# count, D.25830
	cmpq	$320, %rax	#, D.25830
	jg	.L863	#,
.L862:
	.loc 1 4707 0 discriminator 1
	movl	$1, %eax	#, iftmp.489
	jmp	.L864	#
.L863:
	.loc 1 4707 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.489
.L864:
	.loc 1 4702 0 is_stmt 1
	testl	%eax, %eax	# iftmp.489
	je	.L861	#,
	.loc 1 4711 0
	movq	-440(%rbp), %rax	# minelt, tmp531
	subq	%rax, -376(%rbp)	# tmp531, lo
	movq	-440(%rbp), %rax	# minelt, tmp532
	subq	%rax, -144(%rbp)	# tmp532, hi
	.loc 1 4712 0
	jmp	.L865	#
.L867:
	.loc 1 4714 0
	movq	-208(%rbp), %rax	# elttype, tmp533
	movq	32(%rax), %rax	# elttype_216->type.size, D.25832
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	imulq	-376(%rbp), %rax	# lo, tmp534
	movq	%rax, -392(%rbp)	# tmp534, bitpos
	.loc 1 4716 0
	movq	-576(%rbp), %rax	# target, tmp535
	movzwl	(%rax), %eax	# target_2->code, D.25839
	cmpw	$66, %ax	#, D.25839
	jne	.L866	#,
	.loc 1 4717 0
	movq	-576(%rbp), %rax	# target, tmp536
	movzbl	3(%rax), %eax	# *target_2, D.25829
	andl	$1, %eax	#, D.25829
	testb	%al, %al	# D.25829
	jne	.L866	#,
	.loc 1 4718 0
	movq	-320(%rbp), %rax	# type, tmp537
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$18, %al	#, D.25829
	jne	.L866	#,
	.loc 1 4719 0
	movq	-320(%rbp), %rax	# type, tmp538
	movzbl	62(%rax), %eax	# *type_64, D.25829
	andl	$8, %eax	#, D.25829
	testb	%al, %al	# D.25829
	je	.L866	#,
	.loc 1 4721 0
	movq	-576(%rbp), %rax	# target, tmp539
	movq	%rax, %rdi	# tmp539,
	call	copy_rtx	#
	movq	%rax, -576(%rbp)	# tmp540, target
	.loc 1 4722 0
	movq	-576(%rbp), %rax	# target, tmp541
	movzbl	3(%rax), %edx	# target_323->jump, tmp544
	orl	$1, %edx	#, tmp545
	movb	%dl, 3(%rax)	# tmp545, target_323->jump
.L866:
	.loc 1 4727 0
	movq	-208(%rbp), %rax	# elttype, tmp546
	movq	%rax, %rdi	# tmp546,
	call	get_alias_set	#
	.loc 1 4726 0
	movl	%eax, %edi	# D.25830, D.25833
	movq	-400(%rbp), %rsi	# bitsize, bitsize.490
	movq	-320(%rbp), %r9	# type, tmp547
	movq	-176(%rbp), %r8	# value, tmp548
	movl	-512(%rbp), %ecx	# mode, tmp549
	movq	-392(%rbp), %rdx	# bitpos, tmp550
	movq	-576(%rbp), %rax	# target, tmp551
	movl	%edi, 8(%rsp)	# D.25833,
	movl	-580(%rbp), %edi	# cleared, tmp552
	movl	%edi, (%rsp)	# tmp552,
	movq	%rax, %rdi	# tmp551,
	call	store_constructor_field	#
	.loc 1 4712 0
	addq	$1, -376(%rbp)	#, lo
.L865:
	.loc 1 4712 0 is_stmt 0 discriminator 1
	movq	-376(%rbp), %rax	# lo, tmp553
	cmpq	-144(%rbp), %rax	# hi, tmp553
	jle	.L867	#,
	.loc 1 4699 0 is_stmt 1
	nop
.LBE75:
	.loc 1 4690 0
	jmp	.L872	#
.L861:
.LBB76:
	.loc 1 4732 0
	movq	-152(%rbp), %rax	# hi_index, tmp554
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp554,
	call	expand_expr	#
	movq	%rax, -128(%rbp)	# tmp555, hi_r
	.loc 1 4733 0
	call	gen_label_rtx	#
	movq	%rax, -120(%rbp)	# tmp556, loop_top
	.loc 1 4734 0
	call	gen_label_rtx	#
	movq	%rax, -112(%rbp)	# tmp557, loop_end
	.loc 1 4736 0
	movq	-448(%rbp), %rax	# domain, tmp558
	movzbl	17(%rax), %eax	# *domain_26, tmp561
	shrb	$5, %al	#, D.25844
	andl	$1, %eax	#, D.25844
	movzbl	%al, %eax	# D.25844, unsignedp.491
	movl	%eax, -552(%rbp)	# unsignedp.491, unsignedp
	.loc 1 4738 0
	movq	-448(%rbp), %rax	# domain, tmp562
	movq	%rax, %rdx	# tmp562,
	movl	$0, %esi	#,
	movl	$34, %edi	#,
	call	build_decl	#
	movq	%rax, -384(%rbp)	# tmp563, index
	.loc 1 4741 0
	movq	-384(%rbp), %rax	# index, tmp564
	movzbl	48(%rax), %eax	# index_333->decl.mode, D.25829
	movzbl	%al, %esi	# D.25829, D.25841
	leaq	-552(%rbp), %rdx	#, tmp565
	movq	-448(%rbp), %rax	# domain, tmp566
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp566,
	call	promote_mode	#
	movl	%eax, %edi	# D.25841,
	call	gen_reg_rtx	#
	movq	%rax, -104(%rbp)	# tmp567, index_r
	.loc 1 4743 0
	movq	-384(%rbp), %rax	# index, tmp568
	movq	-104(%rbp), %rdx	# index_r, tmp569
	movq	%rdx, 144(%rax)	# tmp569, index_333->decl.rtl
	.loc 1 4744 0
	movq	-176(%rbp), %rax	# value, tmp570
	movzbl	16(%rax), %eax	# value_278->common.code, D.25829
	cmpb	$118, %al	#, D.25829
	jne	.L869	#,
	.loc 1 4745 0
	movq	-176(%rbp), %rax	# value, tmp571
	addq	$48, %rax	#, D.25845
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_339], D.25831
	testq	%rax, %rax	# D.25831
	jne	.L869	#,
	.loc 1 4749 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25831
	movq	-176(%rbp), %rax	# value, tmp572
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp572,
	call	expand_expr	#
	.loc 1 4750 0
	call	emit_queue	#
.L869:
	.loc 1 4752 0
	movq	-104(%rbp), %rcx	# index_r, tmp573
	movq	-160(%rbp), %rax	# lo_index, tmp574
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp573,
	movq	%rax, %rdi	# tmp574,
	call	store_expr	#
	.loc 1 4753 0
	movl	$0, %edi	#,
	call	expand_start_loop	#
	movq	%rax, -96(%rbp)	# tmp575, loop
	.loc 1 4757 0
	movq	-448(%rbp), %rax	# domain, tmp576
	movq	104(%rax), %rcx	# domain_26->type.minval, D.25832
	movq	-384(%rbp), %rax	# index, tmp577
	movq	8(%rax), %rax	# index_333->common.type, D.25832
	movq	-384(%rbp), %rdx	# index, tmp578
	movq	%rax, %rsi	# D.25832,
	movl	$60, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25832,
	call	fold	#
	movq	%rax, %rdx	#, D.25832
	movq	sizetype_tab+8(%rip), %rax	# sizetype_tab, D.25832
	movq	%rdx, %rsi	# D.25832,
	movq	%rax, %rdi	# D.25832,
	call	convert	#
	movq	%rax, -88(%rbp)	# tmp579, position
	.loc 1 4760 0
	movq	-208(%rbp), %rax	# elttype, tmp580
	movq	40(%rax), %rdx	# elttype_216->type.size_unit, D.25832
	movq	sizetype_tab+8(%rip), %rax	# sizetype_tab, D.25832
	movq	%rdx, %rsi	# D.25832,
	movq	%rax, %rdi	# D.25832,
	call	convert	#
	movq	%rax, %rdx	#, D.25832
	movq	-88(%rbp), %rax	# position, tmp581
	movq	%rax, %rsi	# tmp581,
	movl	$61, %edi	#,
	call	size_binop	#
	movq	%rax, -88(%rbp)	# tmp582, position
	.loc 1 4764 0
	movq	-88(%rbp), %rax	# position, tmp583
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp583,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp584, pos_rtx
	.loc 1 4765 0
	movq	-88(%rbp), %rax	# position, tmp585
	movq	%rax, %rdi	# tmp585,
	call	highest_pow2_factor	#
	movq	%rax, %rdx	#, D.25830
	movq	-80(%rbp), %rcx	# pos_rtx, tmp586
	movq	-576(%rbp), %rax	# target, tmp587
	movq	%rcx, %rsi	# tmp586,
	movq	%rax, %rdi	# tmp587,
	call	offset_address	#
	movq	%rax, -168(%rbp)	# tmp588, xtarget
	.loc 1 4767 0
	movl	-512(%rbp), %esi	# mode, tmp589
	movq	-168(%rbp), %rax	# xtarget, tmp590
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp590,
	call	adjust_address_1	#
	movq	%rax, -168(%rbp)	# tmp591, xtarget
	.loc 1 4768 0
	movq	-176(%rbp), %rax	# value, tmp592
	movzbl	16(%rax), %eax	# value_278->common.code, D.25829
	cmpb	$46, %al	#, D.25829
	jne	.L870	#,
	.loc 1 4769 0
	movq	-400(%rbp), %rax	# bitsize, tmp593
	leaq	7(%rax), %rdx	#, tmp595
	testq	%rax, %rax	# tmp594
	cmovs	%rdx, %rax	# tmp595,, tmp594
	sarq	$3, %rax	#, tmp596
	movq	%rax, %rcx	# tmp596, D.25830
	movl	-580(%rbp), %edx	# cleared, tmp597
	movq	-168(%rbp), %rsi	# xtarget, tmp598
	movq	-176(%rbp), %rax	# value, tmp599
	movq	%rax, %rdi	# tmp599,
	call	store_constructor	#
	jmp	.L871	#
.L870:
	.loc 1 4772 0
	movq	-168(%rbp), %rcx	# xtarget, tmp600
	movq	-176(%rbp), %rax	# value, tmp601
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp600,
	movq	%rax, %rdi	# tmp601,
	call	store_expr	#
.L871:
	.loc 1 4774 0
	movq	integer_types+40(%rip), %rax	# integer_types, D.25832
	movq	-152(%rbp), %rcx	# hi_index, tmp602
	movq	-384(%rbp), %rdx	# index, tmp603
	movq	%rax, %rsi	# D.25832,
	movl	$97, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdx	#, D.25832
	movq	-96(%rbp), %rax	# loop, tmp604
	movq	%rdx, %rsi	# D.25832,
	movq	%rax, %rdi	# tmp604,
	call	expand_exit_loop_if_false	#
	.loc 1 4778 0
	movq	global_trees+96(%rip), %rcx	# global_trees, D.25832
	movq	-384(%rbp), %rax	# index, tmp605
	movq	8(%rax), %rax	# index_333->common.type, D.25832
	movq	-384(%rbp), %rdx	# index, tmp606
	movq	%rax, %rsi	# D.25832,
	movl	$130, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	expand_increment	#
	.loc 1 4781 0
	call	expand_end_loop	#
	.loc 1 4782 0
	movq	-112(%rbp), %rax	# loop_end, tmp607
	movq	%rax, %rdi	# tmp607,
	call	emit_label	#
.LBE76:
	.loc 1 4690 0
	jmp	.L872	#
.L860:
	.loc 1 4785 0
	cmpq	$0, -384(%rbp)	#, index
	je	.L873	#,
	.loc 1 4785 0 is_stmt 0 discriminator 1
	movq	-384(%rbp), %rax	# index, tmp608
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp608,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L874	#,
.L873:
	.loc 1 4786 0 is_stmt 1
	movq	-208(%rbp), %rax	# elttype, tmp609
	movq	32(%rax), %rax	# elttype_216->type.size, D.25832
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	jne	.L875	#,
.L874:
.LBB77:
	.loc 1 4790 0
	cmpq	$0, -384(%rbp)	#, index
	jne	.L876	#,
	.loc 1 4791 0
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	call	size_int_wide	#
	movq	%rax, -384(%rbp)	# tmp610, index
.L876:
	.loc 1 4793 0
	cmpq	$0, -440(%rbp)	#, minelt
	je	.L877	#,
	.loc 1 4794 0
	movq	-448(%rbp), %rax	# domain, tmp611
	movq	104(%rax), %rdx	# domain_26->type.minval, D.25832
	movq	-384(%rbp), %rax	# index, tmp612
	movq	%rax, %rsi	# tmp612,
	movl	$60, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25832,
	call	fold	#
	movq	%rax, %rdx	#, D.25832
	movq	sizetype_tab+8(%rip), %rax	# sizetype_tab, D.25832
	movq	%rdx, %rsi	# D.25832,
	movq	%rax, %rdi	# D.25832,
	call	convert	#
	movq	%rax, -384(%rbp)	# tmp613, index
.L877:
	.loc 1 4798 0
	movq	-208(%rbp), %rax	# elttype, tmp614
	movq	40(%rax), %rdx	# elttype_216->type.size_unit, D.25832
	movq	sizetype_tab+8(%rip), %rax	# sizetype_tab, D.25832
	movq	%rdx, %rsi	# D.25832,
	movq	%rax, %rdi	# D.25832,
	call	convert	#
	movq	%rax, %rdx	#, D.25832
	movq	-384(%rbp), %rax	# index, tmp615
	movq	%rax, %rsi	# tmp615,
	movl	$61, %edi	#,
	call	size_binop	#
	movq	%rax, -72(%rbp)	# tmp616, position
	.loc 1 4801 0
	movq	-72(%rbp), %rax	# position, tmp617
	movq	%rax, %rdi	# tmp617,
	call	highest_pow2_factor	#
	movq	%rax, %rbx	#, D.25830
	movq	-72(%rbp), %rax	# position, tmp618
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp618,
	call	expand_expr	#
	movq	%rax, %rcx	#, D.25831
	movq	-576(%rbp), %rax	# target, tmp619
	movq	%rbx, %rdx	# D.25830,
	movq	%rcx, %rsi	# D.25831,
	movq	%rax, %rdi	# tmp619,
	call	offset_address	#
	movq	%rax, -168(%rbp)	# tmp620, xtarget
	.loc 1 4804 0
	movl	-512(%rbp), %esi	# mode, tmp621
	movq	-168(%rbp), %rax	# xtarget, tmp622
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp622,
	call	adjust_address_1	#
	movq	%rax, -168(%rbp)	# tmp623, xtarget
	.loc 1 4805 0
	movq	-168(%rbp), %rcx	# xtarget, tmp624
	movq	-176(%rbp), %rax	# value, tmp625
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp624,
	movq	%rax, %rdi	# tmp625,
	call	store_expr	#
.LBE77:
	.loc 1 4787 0
	jmp	.L872	#
.L875:
	.loc 1 4809 0
	cmpq	$0, -384(%rbp)	#, index
	je	.L878	#,
	.loc 1 4810 0
	movq	-384(%rbp), %rax	# index, tmp626
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp626,
	call	tree_low_cst	#
	subq	-440(%rbp), %rax	# minelt, D.25830
	movq	%rax, %rbx	# D.25830, D.25830
	.loc 1 4811 0
	movq	-208(%rbp), %rax	# elttype, tmp627
	movq	32(%rax), %rax	# elttype_216->type.size, D.25832
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	.loc 1 4810 0
	imulq	%rbx, %rax	# D.25830, tmp628
	movq	%rax, -392(%rbp)	# tmp628, bitpos
	jmp	.L879	#
.L878:
	.loc 1 4813 0
	movl	-544(%rbp), %eax	# i, tmp629
	movslq	%eax, %rbx	# tmp629, D.25830
	movq	-208(%rbp), %rax	# elttype, tmp630
	movq	32(%rax), %rax	# elttype_216->type.size, D.25832
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	imulq	%rbx, %rax	# D.25830, tmp631
	movq	%rax, -392(%rbp)	# tmp631, bitpos
.L879:
	.loc 1 4815 0
	movq	-576(%rbp), %rax	# target, tmp632
	movzwl	(%rax), %eax	# target_7->code, D.25839
	cmpw	$66, %ax	#, D.25839
	jne	.L880	#,
	.loc 1 4815 0 is_stmt 0 discriminator 1
	movq	-576(%rbp), %rax	# target, tmp633
	movzbl	3(%rax), %eax	# *target_7, D.25829
	andl	$1, %eax	#, D.25829
	testb	%al, %al	# D.25829
	jne	.L880	#,
	.loc 1 4816 0 is_stmt 1
	movq	-320(%rbp), %rax	# type, tmp634
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$18, %al	#, D.25829
	jne	.L880	#,
	.loc 1 4817 0
	movq	-320(%rbp), %rax	# type, tmp635
	movzbl	62(%rax), %eax	# *type_64, D.25829
	andl	$8, %eax	#, D.25829
	testb	%al, %al	# D.25829
	je	.L880	#,
	.loc 1 4819 0
	movq	-576(%rbp), %rax	# target, tmp636
	movq	%rax, %rdi	# tmp636,
	call	copy_rtx	#
	movq	%rax, -576(%rbp)	# tmp637, target
	.loc 1 4820 0
	movq	-576(%rbp), %rax	# target, tmp638
	movzbl	3(%rax), %edx	# target_382->jump, tmp641
	orl	$1, %edx	#, tmp642
	movb	%dl, 3(%rax)	# tmp642, target_382->jump
.L880:
	.loc 1 4824 0
	movq	-208(%rbp), %rax	# elttype, tmp643
	movq	%rax, %rdi	# tmp643,
	call	get_alias_set	#
	.loc 1 4823 0
	movl	%eax, %edi	# D.25830, D.25833
	movq	-400(%rbp), %rsi	# bitsize, bitsize.492
	movq	-320(%rbp), %r9	# type, tmp644
	movq	-176(%rbp), %r8	# value, tmp645
	movl	-512(%rbp), %ecx	# mode, tmp646
	movq	-392(%rbp), %rdx	# bitpos, tmp647
	movq	-576(%rbp), %rax	# target, tmp648
	movl	%edi, 8(%rsp)	# D.25833,
	movl	-580(%rbp), %edi	# cleared, tmp649
	movl	%edi, (%rsp)	# tmp649,
	movq	%rax, %rdi	# tmp648,
	call	store_constructor_field	#
	jmp	.L855	#
.L872:
.L855:
.LBE74:
	.loc 1 4667 0
	movq	-456(%rbp), %rax	# elt, tmp650
	movq	(%rax), %rax	# elt_22->common.chain, tmp651
	movq	%rax, -456(%rbp)	# tmp651, elt
	addl	$1, -544(%rbp)	#, i
.L853:
	.loc 1 4665 0 discriminator 1
	cmpq	$0, -456(%rbp)	#, elt
	jne	.L881	#,
.LBE70:
	.loc 1 4564 0
	jmp	.L801	#
.L832:
	.loc 1 4831 0
	movq	-320(%rbp), %rax	# type, tmp652
	movzbl	16(%rax), %eax	# type_64->common.code, D.25829
	cmpb	$19, %al	#, D.25829
	jne	.L882	#,
.LBB78:
	.loc 1 4833 0
	movq	-568(%rbp), %rax	# exp, tmp653
	movq	40(%rax), %rax	# exp_63(D)->exp.operands, tmp654
	movq	%rax, -368(%rbp)	# tmp654, elt
	.loc 1 4834 0
	movq	-320(%rbp), %rax	# type, tmp655
	movq	%rax, %rdi	# tmp655,
	call	int_size_in_bytes	#
	movq	%rax, -312(%rbp)	# D.25830, nbytes
	.loc 1 4835 0
	movq	-320(%rbp), %rax	# type, tmp656
	movq	24(%rax), %rax	# type_64->type.values, tmp657
	movq	%rax, -304(%rbp)	# tmp657, domain
	.loc 1 4849 0
	cmpq	$0, -368(%rbp)	#, elt
	jne	.L883	#,
	.loc 1 4849 0 is_stmt 0 discriminator 1
	cmpq	$0, -592(%rbp)	#, size
	jle	.L883	#,
	.loc 1 4851 0 is_stmt 1
	cmpl	$0, -580(%rbp)	#, cleared
	jne	.L884	#,
	.loc 1 4852 0
	movq	-592(%rbp), %rax	# size, tmp658
	movq	%rax, %rsi	# tmp658,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.25831
	movq	-576(%rbp), %rax	# target, tmp659
	movq	%rdx, %rsi	# D.25831,
	movq	%rax, %rdi	# tmp659,
	call	clear_storage	#
	.loc 1 4853 0
	jmp	.L801	#
.L884:
	jmp	.L801	#
.L883:
	.loc 1 4856 0
	movq	-304(%rbp), %rax	# domain, tmp660
	movq	104(%rax), %rdx	# domain_74->type.minval, D.25832
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25832
	movq	%rdx, %rsi	# D.25832,
	movq	%rax, %rdi	# D.25832,
	call	convert	#
	movq	%rax, -296(%rbp)	# tmp661, domain_min
	.loc 1 4857 0
	movq	-304(%rbp), %rax	# domain, tmp662
	movq	112(%rax), %rdx	# domain_74->type.maxval, D.25832
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25832
	movq	%rdx, %rsi	# D.25832,
	movq	%rax, %rdi	# D.25832,
	call	convert	#
	movq	%rax, -288(%rbp)	# tmp663, domain_max
	.loc 1 4858 0
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	call	size_int_wide	#
	movq	%rax, %rbx	#, D.25832
	movq	-296(%rbp), %rdx	# domain_min, tmp664
	movq	-288(%rbp), %rax	# domain_max, tmp665
	movq	%rdx, %rsi	# tmp664,
	movq	%rax, %rdi	# tmp665,
	call	size_diffop	#
	movq	%rbx, %rdx	# D.25832,
	movq	%rax, %rsi	# D.25832,
	movl	$59, %edi	#,
	call	size_binop	#
	movq	%rax, -280(%rbp)	# tmp666, bitlength
	.loc 1 4862 0
	movq	-280(%rbp), %rax	# bitlength, tmp667
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp667,
	call	tree_low_cst	#
	movq	%rax, -272(%rbp)	# D.25830, nbits
	.loc 1 4867 0
	movq	-576(%rbp), %rax	# target, tmp668
	movzbl	2(%rax), %eax	# target_78(D)->mode, D.25829
	cmpb	$51, %al	#, D.25829
	jne	.L885	#,
	.loc 1 4867 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.494
	andl	$33554432, %eax	#, D.25833
	testl	%eax, %eax	# D.25833
	je	.L886	#,
	movl	$128, %eax	#, iftmp.493
	jmp	.L887	#
.L886:
	.loc 1 4867 0 discriminator 2
	movl	$64, %eax	#, iftmp.493
.L887:
	.loc 1 4867 0 discriminator 3
	cmpq	-272(%rbp), %rax	# nbits, iftmp.493
	jae	.L885	#,
	.loc 1 4868 0 is_stmt 1
	cmpq	$32, -312(%rbp)	#, nbytes
	ja	.L888	#,
	.loc 1 4868 0 is_stmt 0 discriminator 1
	movq	-368(%rbp), %rax	# elt, tmp669
	movq	(%rax), %rax	# elt_71->common.chain, D.25832
	testq	%rax, %rax	# D.25832
	je	.L888	#,
.L885:
.LBB79:
	.loc 1 4870 0 is_stmt 1
	movq	-568(%rbp), %rax	# exp, tmp670
	movq	8(%rax), %rax	# exp_63(D)->common.type, D.25832
	movl	64(%rax), %eax	# _113->type.align, tmp671
	movl	%eax, -524(%rbp)	# tmp671, set_word_size
	.loc 1 4871 0
	movl	-524(%rbp), %eax	# set_word_size, tmp672
	movl	$1, %edx	#,
	movl	$1, %esi	#,
	movl	%eax, %edi	# tmp672,
	call	mode_for_size	#
	movl	%eax, -520(%rbp)	# tmp673, mode
	.loc 1 4872 0
	movq	-272(%rbp), %rax	# nbits, tmp675
	leaq	15(%rax), %rdx	#, tmp674
	movl	$16, %eax	#, tmp780
	subq	$1, %rax	#, tmp676
	addq	%rdx, %rax	# tmp674, tmp677
	movl	$16, %ebx	#, tmp781
	movl	$0, %edx	#, tmp680
	divq	%rbx	# tmp781
	imulq	$16, %rax, %rax	#, tmp679, tmp681
	subq	%rax, %rsp	# tmp681,
	leaq	48(%rsp), %rax	#, tmp682
	addq	$15, %rax	#, tmp683
	shrq	$4, %rax	#, tmp684
	salq	$4, %rax	#, tmp685
	movq	%rax, -264(%rbp)	# tmp685, bit_buffer
	.loc 1 4873 0
	movq	$0, -360(%rbp)	#, word
	.loc 1 4874 0
	movl	$0, -536(%rbp)	#, bit_pos
	.loc 1 4875 0
	movl	$0, -532(%rbp)	#, ibit
	.loc 1 4876 0
	movl	$0, -528(%rbp)	#, offset
	.loc 1 4878 0
	movq	-272(%rbp), %rax	# nbits, tmp686
	movl	%eax, %edx	# tmp686, D.25833
	movq	-264(%rbp), %rcx	# bit_buffer, tmp687
	movq	-568(%rbp), %rax	# exp, tmp688
	movq	%rcx, %rsi	# tmp687,
	movq	%rax, %rdi	# tmp688,
	call	get_set_constructor_bits	#
	movq	%rax, -368(%rbp)	# tmp689, elt
.L899:
	.loc 1 4881 0
	movl	-532(%rbp), %edx	# ibit, D.25835
	movq	-264(%rbp), %rax	# bit_buffer, tmp690
	addq	%rdx, %rax	# D.25835, D.25836
	movzbl	(%rax), %eax	# *_124, D.25837
	testb	%al, %al	# D.25837
	je	.L889	#,
	.loc 1 4886 0
	movl	-536(%rbp), %eax	# bit_pos, bit_pos.495
	movl	$1, %edx	#, tmp691
	movl	%eax, %ecx	# bit_pos.495, tmp788
	sall	%cl, %edx	# tmp788, D.25833
	movl	%edx, %eax	# D.25833, D.25833
	cltq
	orq	%rax, -360(%rbp)	# D.25830, word
.L889:
	.loc 1 4889 0
	addl	$1, -536(%rbp)	#, bit_pos
	addl	$1, -532(%rbp)	#, ibit
	.loc 1 4890 0
	movl	-536(%rbp), %eax	# bit_pos, tmp692
	cmpl	-524(%rbp), %eax	# set_word_size, tmp692
	jae	.L890	#,
	.loc 1 4890 0 is_stmt 0 discriminator 1
	movl	-532(%rbp), %eax	# ibit, D.25838
	cmpq	-272(%rbp), %rax	# nbits, D.25838
	jne	.L891	#,
.L890:
	.loc 1 4892 0 is_stmt 1
	cmpq	$0, -360(%rbp)	#, word
	jne	.L892	#,
	.loc 1 4892 0 is_stmt 0 discriminator 1
	cmpl	$0, -580(%rbp)	#, cleared
	jne	.L893	#,
.L892:
.LBB80:
	.loc 1 4894 0 is_stmt 1
	movq	-360(%rbp), %rax	# word, tmp693
	movq	%rax, %rsi	# tmp693,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -256(%rbp)	# tmp694, datum
	.loc 1 4900 0
	movq	-576(%rbp), %rax	# target, tmp695
	movzwl	(%rax), %eax	# target_78(D)->code, D.25839
	cmpw	$66, %ax	#, D.25839
	jne	.L894	#,
	.loc 1 4901 0
	movl	-528(%rbp), %edx	# offset, D.25830
	movl	-520(%rbp), %esi	# mode, tmp696
	movq	-576(%rbp), %rax	# target, tmp697
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp697,
	call	adjust_address_1	#
	movq	%rax, -352(%rbp)	# tmp698, to_rtx
	jmp	.L895	#
.L894:
	.loc 1 4902 0
	cmpl	$0, -528(%rbp)	#, offset
	jne	.L896	#,
	.loc 1 4903 0
	movq	-576(%rbp), %rax	# target, tmp699
	movq	%rax, -352(%rbp)	# tmp699, to_rtx
	jmp	.L895	#
.L896:
	.loc 1 4905 0
	movl	$__FUNCTION__.14784, %edx	#,
	movl	$4905, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L895:
	.loc 1 4906 0
	movq	-256(%rbp), %rdx	# datum, tmp700
	movq	-352(%rbp), %rax	# to_rtx, tmp701
	movq	%rdx, %rsi	# tmp700,
	movq	%rax, %rdi	# tmp701,
	call	emit_move_insn	#
.L893:
.LBE80:
	.loc 1 4909 0
	movl	-532(%rbp), %eax	# ibit, D.25838
	cmpq	-272(%rbp), %rax	# nbits, D.25838
	jne	.L897	#,
	.loc 1 4910 0
	nop
.LBE79:
	.loc 1 4869 0
	jmp	.L900	#
.L897:
.LBB81:
	.loc 1 4911 0
	movq	$0, -360(%rbp)	#, word
	.loc 1 4912 0
	movl	$0, -536(%rbp)	#, bit_pos
	.loc 1 4913 0
	movl	-524(%rbp), %eax	# set_word_size, tmp702
	shrl	$3, %eax	#, D.25840
	addl	%eax, -528(%rbp)	# D.25840, offset
	.loc 1 4915 0
	jmp	.L899	#
.L891:
	jmp	.L899	#
.L888:
.LBE81:
	.loc 1 4917 0
	cmpl	$0, -580(%rbp)	#, cleared
	jne	.L900	#,
	.loc 1 4919 0
	movq	-368(%rbp), %rax	# elt, tmp703
	movq	(%rax), %rax	# elt_71->common.chain, D.25832
	testq	%rax, %rax	# D.25832
	jne	.L901	#,
	.loc 1 4920 0 discriminator 1
	movq	-368(%rbp), %rax	# elt, tmp704
	movq	24(%rax), %rax	# elt_71->list.purpose, D.25832
	.loc 1 4919 0 discriminator 1
	testq	%rax, %rax	# D.25832
	jne	.L902	#,
	.loc 1 4920 0
	cmpq	$1, -272(%rbp)	#, nbits
	jne	.L901	#,
	.loc 1 4929 0
	jmp	.L906	#
.L902:
	.loc 1 4922 0
	movq	-368(%rbp), %rax	# elt, tmp705
	movq	32(%rax), %rax	# elt_71->list.value, D.25832
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	host_integerp	#
	.loc 1 4924 0
	testl	%eax, %eax	# D.25833
	je	.L903	#,
	.loc 1 4923 0
	movq	-368(%rbp), %rax	# elt, tmp706
	movq	24(%rax), %rax	# elt_71->list.purpose, D.25832
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	host_integerp	#
	testl	%eax, %eax	# D.25833
	je	.L903	#,
	.loc 1 4924 0
	movq	-368(%rbp), %rax	# elt, tmp707
	movq	32(%rax), %rax	# elt_71->list.value, D.25832
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	movq	%rax, %rbx	#, D.25830
	.loc 1 4925 0
	movq	-368(%rbp), %rax	# elt, tmp708
	movq	24(%rax), %rax	# elt_71->list.purpose, D.25832
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	tree_low_cst	#
	subq	%rax, %rbx	# D.25830, D.25830
	movq	%rbx, %rax	# D.25830, D.25830
	leaq	1(%rax), %rdx	#, D.25830
	.loc 1 4926 0
	movq	-272(%rbp), %rax	# nbits, nbits.497
	.loc 1 4924 0
	cmpq	%rax, %rdx	# nbits.497, D.25830
	je	.L904	#,
.L903:
	.loc 1 4924 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.496
	jmp	.L905	#
.L904:
	.loc 1 4924 0 discriminator 2
	movl	$0, %eax	#, iftmp.496
.L905:
	.loc 1 4920 0 is_stmt 1
	andl	$1, %eax	#, D.25834
	testb	%al, %al	# D.25834
	je	.L900	#,
.L901:
	.loc 1 4927 0
	movq	-568(%rbp), %rax	# exp, tmp709
	movq	%rax, %rdi	# tmp709,
	call	expr_size	#
	movq	%rax, %rdx	#, D.25831
	movq	-576(%rbp), %rax	# target, tmp710
	movq	%rdx, %rsi	# D.25831,
	movq	%rax, %rdi	# tmp710,
	call	clear_storage	#
	.loc 1 4929 0
	jmp	.L906	#
.L900:
	jmp	.L906	#
.L921:
.LBB82:
	.loc 1 4932 0
	movq	-368(%rbp), %rax	# elt, tmp711
	movq	24(%rax), %rax	# elt_39->list.purpose, tmp712
	movq	%rax, -344(%rbp)	# tmp712, startbit
	.loc 1 4934 0
	movq	-368(%rbp), %rax	# elt, tmp713
	movq	32(%rax), %rax	# elt_39->list.value, tmp714
	movq	%rax, -336(%rbp)	# tmp714, endbit
	.loc 1 4940 0
	movq	-280(%rbp), %rax	# bitlength, tmp715
	movl	$2, %ecx	#,
	movl	$66, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp715,
	call	expand_expr	#
	movq	%rax, -248(%rbp)	# tmp716, bitlength_rtx
	.loc 1 4944 0
	cmpq	$0, -344(%rbp)	#, startbit
	jne	.L907	#,
	.loc 1 4946 0
	movq	-336(%rbp), %rax	# endbit, tmp717
	movq	%rax, %rdi	# tmp717,
	call	save_expr	#
	movq	%rax, -344(%rbp)	# tmp718, startbit
	.loc 1 4947 0
	movq	-344(%rbp), %rax	# startbit, tmp719
	movq	%rax, -336(%rbp)	# tmp719, endbit
.L907:
	.loc 1 4950 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25832
	movq	-344(%rbp), %rdx	# startbit, tmp720
	movq	%rdx, %rsi	# tmp720,
	movq	%rax, %rdi	# D.25832,
	call	convert	#
	movq	%rax, -344(%rbp)	# tmp721, startbit
	.loc 1 4951 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25832
	movq	-336(%rbp), %rdx	# endbit, tmp722
	movq	%rdx, %rsi	# tmp722,
	movq	%rax, %rdi	# D.25832,
	call	convert	#
	movq	%rax, -336(%rbp)	# tmp723, endbit
	.loc 1 4952 0
	movq	-296(%rbp), %rax	# domain_min, tmp724
	movq	%rax, %rdi	# tmp724,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25833
	jne	.L908	#,
	.loc 1 4954 0
	movq	-296(%rbp), %rdx	# domain_min, tmp725
	movq	-344(%rbp), %rax	# startbit, tmp726
	movq	%rax, %rsi	# tmp726,
	movl	$60, %edi	#,
	call	size_binop	#
	movq	%rax, -344(%rbp)	# tmp727, startbit
	.loc 1 4955 0
	movq	-296(%rbp), %rdx	# domain_min, tmp728
	movq	-336(%rbp), %rax	# endbit, tmp729
	movq	%rax, %rsi	# tmp729,
	movl	$60, %edi	#,
	call	size_binop	#
	movq	%rax, -336(%rbp)	# tmp730, endbit
.L908:
	.loc 1 4957 0
	movq	-344(%rbp), %rax	# startbit, tmp731
	movl	$2, %ecx	#,
	movl	$66, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp731,
	call	expand_expr	#
	movq	%rax, -240(%rbp)	# tmp732, startbit_rtx
	.loc 1 4959 0
	movq	-336(%rbp), %rax	# endbit, tmp733
	movl	$2, %ecx	#,
	movl	$66, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp733,
	call	expand_expr	#
	movq	%rax, -232(%rbp)	# tmp734, endbit_rtx
	.loc 1 4962 0
	movq	-576(%rbp), %rax	# target, tmp735
	movzwl	(%rax), %eax	# target_78(D)->code, D.25839
	cmpw	$61, %ax	#, D.25839
	jne	.L909	#,
	.loc 1 4966 0
	movq	-576(%rbp), %rax	# target, tmp736
	movzbl	2(%rax), %eax	# target_78(D)->mode, D.25829
	movzbl	%al, %eax	# D.25829, D.25841
	movl	$0, %esi	#,
	movl	%eax, %edi	# D.25841,
	call	type_for_mode	#
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	build_qualified_type	#
	.loc 1 4965 0
	movl	$1, %ecx	#,
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25832,
	call	assign_temp	#
	movq	%rax, -328(%rbp)	# tmp737, targetx
	.loc 1 4969 0
	movq	-576(%rbp), %rdx	# target, tmp738
	movq	-328(%rbp), %rax	# targetx, tmp739
	movq	%rdx, %rsi	# tmp738,
	movq	%rax, %rdi	# tmp739,
	call	emit_move_insn	#
	jmp	.L910	#
.L909:
	.loc 1 4972 0
	movq	-576(%rbp), %rax	# target, tmp740
	movzwl	(%rax), %eax	# target_78(D)->code, D.25839
	cmpw	$66, %ax	#, D.25839
	jne	.L911	#,
	.loc 1 4973 0
	movq	-576(%rbp), %rax	# target, tmp741
	movq	%rax, -328(%rbp)	# tmp741, targetx
	jmp	.L910	#
.L911:
	.loc 1 4975 0
	movl	$__FUNCTION__.14784, %edx	#,
	movl	$4975, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L910:
	.loc 1 4981 0
	movq	-344(%rbp), %rax	# startbit, tmp742
	movzbl	16(%rax), %eax	# startbit_50->common.code, D.25829
	cmpb	$25, %al	#, D.25829
	jne	.L912	#,
	.loc 1 4982 0
	movq	-336(%rbp), %rax	# endbit, tmp743
	movzbl	16(%rax), %eax	# endbit_52->common.code, D.25829
	cmpb	$25, %al	#, D.25829
	jne	.L912	#,
	.loc 1 4983 0
	movq	-344(%rbp), %rax	# startbit, tmp744
	movq	32(%rax), %rax	# startbit_50->int_cst.int_cst.low, D.25838
	movq	%rax, -224(%rbp)	# D.25838, startb
	movq	-224(%rbp), %rax	# startb, startb.498
	andl	$7, %eax	#, D.25842
	testq	%rax, %rax	# D.25842
	jne	.L912	#,
	.loc 1 4984 0
	movq	-336(%rbp), %rax	# endbit, tmp745
	movq	32(%rax), %rax	# endbit_52->int_cst.int_cst.low, D.25838
	addq	$1, %rax	#, D.25838
	movq	%rax, -216(%rbp)	# D.25838, endb
	movq	-216(%rbp), %rax	# endb, endb.499
	andl	$7, %eax	#, D.25842
	testq	%rax, %rax	# D.25842
	jne	.L912	#,
	.loc 1 4993 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25832
	movzbl	61(%rax), %eax	# *_176, tmp748
	shrb	%al	# D.25843
	.loc 1 4986 0
	movzbl	%al, %r15d	# D.25843, D.25833
	.loc 1 4992 0
	movq	-224(%rbp), %rax	# startb, tmp749
	movq	-216(%rbp), %rdx	# endb, tmp750
	subq	%rax, %rdx	# tmp749, D.25830
	movq	%rdx, %rax	# D.25830, D.25830
	.loc 1 4986 0
	leaq	7(%rax), %rdx	#, tmp752
	testq	%rax, %rax	# tmp751
	cmovs	%rdx, %rax	# tmp752,, tmp751
	sarq	$3, %rax	#, tmp753
	movq	%rax, %rsi	# D.25830,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %r12	#, D.25831
	.loc 1 4991 0
	movq	integer_types+40(%rip), %rax	# integer_types, D.25832
	movzbl	61(%rax), %eax	# *_182, tmp756
	shrb	%al	# D.25843
	.loc 1 4986 0
	movzbl	%al, %r14d	# D.25843, D.25833
	movq	const_int_rtx+504(%rip), %r13	# const_int_rtx, D.25831
	.loc 1 4990 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.501
	andl	$33554432, %eax	#, D.25833
	.loc 1 4986 0
	testl	%eax, %eax	# D.25833
	je	.L913	#,
	.loc 1 4986 0 is_stmt 0 discriminator 1
	movl	$5, %ebx	#, iftmp.500
	jmp	.L914	#
.L913:
	.loc 1 4986 0 discriminator 2
	movl	$4, %ebx	#, iftmp.500
.L914:
	.loc 1 4986 0 discriminator 3
	movq	-224(%rbp), %rax	# startb, tmp757
	leaq	7(%rax), %rdx	#, tmp759
	testq	%rax, %rax	# tmp758
	cmovs	%rdx, %rax	# tmp759,, tmp758
	sarq	$3, %rax	#, tmp760
	movq	%rax, %rdx	# tmp760, D.25830
	movq	-328(%rbp), %rax	# targetx, tmp761
	movq	8(%rax), %rax	# targetx_53->fld[0].rtx, D.25831
	movq	%rdx, %rsi	# D.25830,
	movq	%rax, %rdi	# D.25831,
	call	plus_constant_wide	#
	movq	%rax, %rdx	#, D.25831
	movq	libfunc_table+128(%rip), %rax	# libfunc_table, D.25831
	movl	%r15d, 24(%rsp)	# D.25833,
	movq	%r12, 16(%rsp)	# D.25831,
	movl	%r14d, 8(%rsp)	# D.25833,
	movq	%r13, (%rsp)	# D.25831,
	movl	%ebx, %r9d	# iftmp.500,
	movq	%rdx, %r8	# D.25831,
	movl	$3, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25831,
	movl	$0, %eax	#,
	call	emit_library_call	#
	jmp	.L915	#
.L912:
	.loc 1 5001 0 is_stmt 1
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25832
	movzbl	61(%rax), %eax	# *_194, tmp764
	shrb	%al	# D.25843
	.loc 1 4997 0
	movzbl	%al, %r14d	# D.25843, D.25833
	.loc 1 5000 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25832
	movzbl	61(%rax), %eax	# *_197, tmp767
	shrb	%al	# D.25843
	.loc 1 4997 0
	movzbl	%al, %r13d	# D.25843, D.25833
	.loc 1 4999 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25832
	movzbl	61(%rax), %eax	# *_200, tmp770
	shrb	%al	# D.25843
	.loc 1 4997 0
	movzbl	%al, %r12d	# D.25843, D.25833
	.loc 1 4999 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.503
	andl	$33554432, %eax	#, D.25833
	.loc 1 4997 0
	testl	%eax, %eax	# D.25833
	je	.L916	#,
	.loc 1 4997 0 is_stmt 0 discriminator 1
	movl	$5, %ebx	#, iftmp.502
	jmp	.L917	#
.L916:
	.loc 1 4997 0 discriminator 2
	movl	$4, %ebx	#, iftmp.502
.L917:
	.loc 1 4997 0 discriminator 3
	movq	-328(%rbp), %rax	# targetx, tmp771
	movq	8(%rax), %r15	# targetx_53->fld[0].rtx, D.25831
	movl	target_flags(%rip), %eax	# target_flags, target_flags.505
	andl	$33554432, %eax	#, D.25833
	testl	%eax, %eax	# D.25833
	je	.L918	#,
	.loc 1 4997 0 discriminator 4
	movl	$5, %eax	#, iftmp.504
	jmp	.L919	#
.L918:
	.loc 1 4997 0 discriminator 5
	movl	$4, %eax	#, iftmp.504
.L919:
	.loc 1 4997 0 discriminator 6
	movl	$.LC4, %edx	#,
	movl	%eax, %esi	# iftmp.504,
	movl	$68, %edi	#,
	call	gen_rtx_fmt_s	#
	movl	%r14d, 40(%rsp)	# D.25833,
	movq	-232(%rbp), %rdx	# endbit_rtx, tmp772
	movq	%rdx, 32(%rsp)	# tmp772,
	movl	%r13d, 24(%rsp)	# D.25833,
	movq	-240(%rbp), %rdx	# startbit_rtx, tmp773
	movq	%rdx, 16(%rsp)	# tmp773,
	movl	%r12d, 8(%rsp)	# D.25833,
	movq	-248(%rbp), %rdx	# bitlength_rtx, tmp774
	movq	%rdx, (%rsp)	# tmp774,
	movl	%ebx, %r9d	# iftmp.502,
	movq	%r15, %r8	# D.25831,
	movl	$4, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25831,
	movl	$0, %eax	#,
	call	emit_library_call	#
.L915:
	.loc 1 5003 0 is_stmt 1
	movq	-576(%rbp), %rax	# target, tmp775
	movzwl	(%rax), %eax	# target_78(D)->code, D.25839
	cmpw	$61, %ax	#, D.25839
	jne	.L920	#,
	.loc 1 5004 0
	movq	-328(%rbp), %rdx	# targetx, tmp776
	movq	-576(%rbp), %rax	# target, tmp777
	movq	%rdx, %rsi	# tmp776,
	movq	%rax, %rdi	# tmp777,
	call	emit_move_insn	#
.L920:
.LBE82:
	.loc 1 4929 0
	movq	-368(%rbp), %rax	# elt, tmp778
	movq	(%rax), %rax	# elt_39->common.chain, tmp779
	movq	%rax, -368(%rbp)	# tmp779, elt
.L906:
	.loc 1 4929 0 is_stmt 0 discriminator 1
	cmpq	$0, -368(%rbp)	#, elt
	jne	.L921	#,
.LBE78:
	jmp	.L801	#
.L882:
	.loc 1 5009 0 is_stmt 1
	movl	$__FUNCTION__.14784, %edx	#,
	movl	$5009, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L801:
	.loc 1 5010 0
	leaq	-40(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE44:
	.size	store_constructor, .-store_constructor
	.type	store_field, @function
store_field:
.LFB45:
	.loc 1 5042 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	addq	$-128, %rsp	#,
	movq	%rdi, -72(%rbp)	# target, target
	movq	%rsi, -80(%rbp)	# bitsize, bitsize
	movq	%rdx, -88(%rbp)	# bitpos, bitpos
	movl	%ecx, -92(%rbp)	# mode, mode
	movq	%r8, -104(%rbp)	# exp, exp
	movl	%r9d, -96(%rbp)	# value_mode, value_mode
	.loc 1 5043 0
	movq	$0, -56(%rbp)	#, width_mask
	.loc 1 5045 0
	movq	-104(%rbp), %rax	# exp, tmp161
	movzbl	16(%rax), %eax	# exp_9(D)->common.code, D.25848
	testb	%al, %al	# D.25848
	jne	.L923	#,
	.loc 1 5046 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25847
	jmp	.L924	#
.L923:
	.loc 1 5050 0
	cmpq	$0, -80(%rbp)	#, bitsize
	jne	.L925	#,
	.loc 1 5051 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25849
	movq	-104(%rbp), %rax	# exp, tmp162
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp162,
	call	expand_expr	#
	jmp	.L924	#
.L925:
	.loc 1 5052 0
	cmpq	$0, -80(%rbp)	#, bitsize
	js	.L926	#,
	.loc 1 5052 0 is_stmt 0 discriminator 1
	cmpq	$63, -80(%rbp)	#, bitsize
	jg	.L926	#,
	.loc 1 5053 0 is_stmt 1
	movq	-80(%rbp), %rax	# bitsize, tmp163
	movl	$1, %edx	#, tmp164
	movl	%eax, %ecx	# D.25850, tmp308
	salq	%cl, %rdx	# tmp308, D.25851
	movq	%rdx, %rax	# D.25851, D.25851
	subq	$1, %rax	#, tmp165
	movq	%rax, -56(%rbp)	# tmp165, width_mask
.L926:
	.loc 1 5066 0
	cmpl	$51, -92(%rbp)	#, mode
	jne	.L927	#,
	.loc 1 5067 0
	movq	-72(%rbp), %rax	# target, tmp166
	movzwl	(%rax), %eax	# target_19(D)->code, D.25852
	cmpw	$61, %ax	#, D.25852
	je	.L928	#,
	.loc 1 5067 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# target, tmp167
	movzwl	(%rax), %eax	# target_19(D)->code, D.25852
	cmpw	$63, %ax	#, D.25852
	jne	.L927	#,
.L928:
.LBB83:
	.loc 1 5071 0 is_stmt 1
	movq	24(%rbp), %rax	# type, tmp168
	movzbl	17(%rax), %eax	# *type_22(D), tmp171
	shrb	$4, %al	#, D.25853
	andl	$1, %eax	#, D.25853
	movzbl	%al, %edx	# D.25853, D.25850
	movq	24(%rbp), %rax	# type, tmp172
	movzbl	17(%rax), %eax	# *type_22(D), tmp175
	shrb	$3, %al	#, D.25853
	andl	$1, %eax	#, D.25853
	movzbl	%al, %eax	# D.25853, D.25850
	addl	%eax, %eax	# D.25850
	orl	%eax, %edx	# D.25850, D.25850
	movq	24(%rbp), %rax	# type, tmp176
	movzbl	62(%rax), %eax	# *type_22(D), tmp179
	shrb	$5, %al	#, D.25853
	andl	$1, %eax	#, D.25853
	movzbl	%al, %eax	# D.25853, D.25850
	sall	$2, %eax	#, D.25850
	orl	%eax, %edx	# D.25850, D.25850
	movq	24(%rbp), %rax	# type, tmp180
	movzbl	16(%rax), %eax	# type_22(D)->common.code, D.25848
	cmpb	$20, %al	#, D.25848
	jne	.L929	#,
	.loc 1 5071 0 is_stmt 0 discriminator 1
	movq	24(%rbp), %rax	# type, tmp181
	movq	8(%rax), %rax	# type_22(D)->common.type, D.25854
	testq	%rax, %rax	# D.25854
	je	.L929	#,
	.loc 1 5071 0 discriminator 3
	movl	$1, %eax	#, iftmp.506
	jmp	.L930	#
.L929:
	.loc 1 5071 0 discriminator 2
	movl	$0, %eax	#, iftmp.506
.L930:
	.loc 1 5071 0 discriminator 4
	sall	$3, %eax	#, D.25850
	orl	%edx, %eax	# D.25850, D.25850
	orl	$1, %eax	#, D.25850
	movl	%eax, %edx	# D.25850, D.25850
	movq	24(%rbp), %rax	# type, tmp182
	movl	%edx, %esi	# D.25850,
	movq	%rax, %rdi	# tmp182,
	call	build_qualified_type	#
	.loc 1 5069 0 is_stmt 1 discriminator 4
	movl	$1, %ecx	#,
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25854,
	call	assign_temp	#
	movq	%rax, -32(%rbp)	# tmp183, object
	.loc 1 5073 0 discriminator 4
	movq	-32(%rbp), %rax	# object, tmp184
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$51, %esi	#,
	movq	%rax, %rdi	# tmp184,
	call	adjust_address_1	#
	movq	%rax, -24(%rbp)	# tmp185, blk_object
	.loc 1 5075 0 discriminator 4
	movq	-72(%rbp), %rax	# target, tmp186
	movzbl	2(%rax), %eax	# target_19(D)->mode, D.25848
	movzbl	%al, %eax	# D.25848, D.25850
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25852
	movzwl	%ax, %eax	# D.25852, D.25851
	cmpq	-80(%rbp), %rax	# bitsize, D.25851
	je	.L931	#,
	.loc 1 5076 0
	movq	-72(%rbp), %rdx	# target, tmp188
	movq	-32(%rbp), %rax	# object, tmp189
	movq	%rdx, %rsi	# tmp188,
	movq	%rax, %rdi	# tmp189,
	call	emit_move_insn	#
.L931:
	.loc 1 5078 0
	movq	-104(%rbp), %r8	# exp, tmp190
	movl	-92(%rbp), %ecx	# mode, tmp191
	movq	-88(%rbp), %rdx	# bitpos, tmp192
	movq	-80(%rbp), %rsi	# bitsize, tmp193
	movq	-24(%rbp), %rax	# blk_object, tmp194
	movl	32(%rbp), %edi	# alias_set, tmp195
	movl	%edi, 16(%rsp)	# tmp195,
	movq	24(%rbp), %rdi	# type, tmp196
	movq	%rdi, 8(%rsp)	# tmp196,
	movl	$0, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%rax, %rdi	# tmp194,
	call	store_field	#
	.loc 1 5081 0
	movq	-32(%rbp), %rdx	# object, tmp197
	movq	-72(%rbp), %rax	# target, tmp198
	movq	%rdx, %rsi	# tmp197,
	movq	%rax, %rdi	# tmp198,
	call	emit_move_insn	#
	.loc 1 5084 0
	movq	-24(%rbp), %rax	# blk_object, D.25847
	jmp	.L924	#
.L927:
.LBE83:
	.loc 1 5087 0
	movq	-72(%rbp), %rax	# target, tmp199
	movzwl	(%rax), %eax	# target_19(D)->code, D.25852
	cmpw	$65, %ax	#, D.25852
	jne	.L932	#,
	.loc 1 5091 0
	cmpq	$0, -88(%rbp)	#, bitpos
	je	.L933	#,
	.loc 1 5092 0
	movl	$__FUNCTION__.14875, %edx	#,
	movl	$5092, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L933:
	.loc 1 5093 0
	movq	-72(%rbp), %rcx	# target, tmp200
	movq	-104(%rbp), %rax	# exp, tmp201
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp200,
	movq	%rax, %rdi	# tmp201,
	call	store_expr	#
	jmp	.L924	#
.L932:
	.loc 1 5100 0
	cmpl	$0, -92(%rbp)	#, mode
	je	.L934	#,
	.loc 1 5101 0
	cmpl	$51, -92(%rbp)	#, mode
	je	.L935	#,
	.loc 1 5101 0 is_stmt 0 discriminator 1
	movl	-92(%rbp), %eax	# mode, mode.507
	cltq
	movzbl	direct_store(%rax), %eax	# direct_store, D.25855
	testb	%al, %al	# D.25855
	jne	.L935	#,
	.loc 1 5102 0 is_stmt 1
	movl	-92(%rbp), %eax	# mode, mode.508
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25856
	cmpl	$5, %eax	#, D.25856
	je	.L935	#,
	.loc 1 5103 0
	movl	-92(%rbp), %eax	# mode, mode.509
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25856
	cmpl	$6, %eax	#, D.25856
	jne	.L934	#,
.L935:
	.loc 1 5104 0
	movq	-72(%rbp), %rax	# target, tmp205
	movzwl	(%rax), %eax	# target_19(D)->code, D.25852
	cmpw	$61, %ax	#, D.25852
	je	.L934	#,
	.loc 1 5105 0
	movq	-72(%rbp), %rax	# target, tmp206
	movzwl	(%rax), %eax	# target_19(D)->code, D.25852
	.loc 1 5108 0
	cmpw	$63, %ax	#, D.25852
	je	.L934	#,
	.loc 1 5114 0
	cmpq	$0, -80(%rbp)	#, bitsize
	js	.L936	#,
	.loc 1 5115 0
	movq	-104(%rbp), %rax	# exp, tmp207
	movq	8(%rax), %rax	# exp_9(D)->common.type, D.25854
	movq	32(%rax), %rax	# _60->type.size, D.25854
	movzbl	16(%rax), %eax	# _61->common.code, D.25848
	cmpb	$25, %al	#, D.25848
	jne	.L936	#,
	.loc 1 5116 0
	movq	-80(%rbp), %rdx	# bitsize, bitsize.510
	movq	-104(%rbp), %rax	# exp, tmp208
	movq	8(%rax), %rax	# exp_9(D)->common.type, D.25854
	movq	32(%rax), %rax	# _64->type.size, D.25854
	movq	%rdx, %rsi	# bitsize.510,
	movq	%rax, %rdi	# D.25854,
	call	compare_tree_int	#
	testl	%eax, %eax	# D.25850
	je	.L936	#,
.L934:
.LBB84:
	.loc 1 5118 0
	movq	-104(%rbp), %rax	# exp, tmp209
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp209,
	call	expand_expr	#
	movq	%rax, -48(%rbp)	# tmp210, temp
	.loc 1 5134 0
	cmpl	$0, -92(%rbp)	#, mode
	je	.L937	#,
	.loc 1 5134 0 is_stmt 0 discriminator 1
	cmpl	$51, -92(%rbp)	#, mode
	je	.L937	#,
	.loc 1 5135 0 is_stmt 1
	movq	-104(%rbp), %rax	# exp, tmp211
	movq	8(%rax), %rax	# exp_9(D)->common.type, D.25854
	movzbl	61(%rax), %eax	# *_98, tmp214
	shrb	%al	# D.25859
	movzbl	%al, %eax	# D.25859, D.25860
	cmpl	-92(%rbp), %eax	# mode, D.25860
	je	.L937	#,
	.loc 1 5136 0
	movq	-104(%rbp), %rax	# exp, tmp215
	movq	8(%rax), %rax	# exp_9(D)->common.type, D.25854
	movzbl	61(%rax), %eax	# *_101, tmp218
	shrb	%al	# D.25859
	movzbl	%al, %esi	# D.25859, D.25861
	movq	-48(%rbp), %rdx	# temp, tmp219
	movl	-92(%rbp), %eax	# mode, tmp220
	movl	$1, %ecx	#,
	movl	%eax, %edi	# tmp220,
	call	convert_modes	#
	movq	%rax, -48(%rbp)	# tmp221, temp
.L937:
	.loc 1 5141 0
	movq	-72(%rbp), %rax	# target, tmp222
	movzbl	2(%rax), %eax	# target_19(D)->mode, D.25848
	cmpb	$51, %al	#, D.25848
	jne	.L938	#,
	.loc 1 5141 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# temp, tmp223
	movzbl	2(%rax), %eax	# temp_2->mode, D.25848
	cmpb	$51, %al	#, D.25848
	jne	.L938	#,
	.loc 1 5143 0 is_stmt 1
	movq	-72(%rbp), %rax	# target, tmp224
	movzwl	(%rax), %eax	# target_19(D)->code, D.25852
	cmpw	$66, %ax	#, D.25852
	jne	.L939	#,
	.loc 1 5143 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# temp, tmp225
	movzwl	(%rax), %eax	# temp_2->code, D.25852
	cmpw	$66, %ax	#, D.25852
	jne	.L939	#,
	.loc 1 5144 0 is_stmt 1
	movq	-88(%rbp), %rax	# bitpos, bitpos.511
	andl	$7, %eax	#, D.25862
	testq	%rax, %rax	# D.25862
	je	.L940	#,
.L939:
	.loc 1 5145 0
	movl	$__FUNCTION__.14875, %edx	#,
	movl	$5145, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L940:
	.loc 1 5147 0
	movq	-88(%rbp), %rax	# bitpos, tmp226
	leaq	7(%rax), %rdx	#, tmp228
	testq	%rax, %rax	# tmp227
	cmovs	%rdx, %rax	# tmp228,, tmp227
	sarq	$3, %rax	#, tmp229
	movq	%rax, %rdx	# tmp229, D.25851
	movq	-72(%rbp), %rax	# target, tmp230
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp230,
	call	adjust_address_1	#
	movq	%rax, -72(%rbp)	# tmp231, target
	.loc 1 5149 0
	movq	-80(%rbp), %rax	# bitsize, tmp232
	addq	$7, %rax	#, D.25851
	.loc 1 5148 0
	leaq	7(%rax), %rdx	#, tmp234
	testq	%rax, %rax	# tmp233
	cmovs	%rdx, %rax	# tmp234,, tmp233
	sarq	$3, %rax	#, tmp235
	movq	%rax, %rsi	# D.25851,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.25849
	movq	-48(%rbp), %rcx	# temp, tmp236
	movq	-72(%rbp), %rax	# target, tmp237
	movq	%rcx, %rsi	# tmp236,
	movq	%rax, %rdi	# tmp237,
	call	emit_block_move	#
	.loc 1 5152 0
	cmpl	$0, -96(%rbp)	#, value_mode
	jne	.L941	#,
	.loc 1 5152 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.512
	jmp	.L942	#
.L941:
	.loc 1 5152 0 discriminator 2
	movq	-72(%rbp), %rax	# target, iftmp.512
.L942:
	.loc 1 5152 0 discriminator 3
	jmp	.L924	#
.L938:
	.loc 1 5156 0 is_stmt 1
	movq	24(%rbp), %rax	# type, tmp238
	movq	%rax, %rdi	# tmp238,
	call	int_size_in_bytes	#
	movq	%rax, %rdi	#, D.25851
	movq	-88(%rbp), %rdx	# bitpos, bitpos.513
	movq	-80(%rbp), %rsi	# bitsize, bitsize.514
	movq	-48(%rbp), %r8	# temp, tmp239
	movl	-92(%rbp), %ecx	# mode, tmp240
	movq	-72(%rbp), %rax	# target, tmp241
	movq	%rdi, %r9	# D.25851,
	movq	%rax, %rdi	# tmp241,
	call	store_bit_field	#
	.loc 1 5159 0
	cmpl	$0, -96(%rbp)	#, value_mode
	je	.L943	#,
	.loc 1 5163 0
	cmpq	$0, -56(%rbp)	#, width_mask
	je	.L944	#,
	.loc 1 5164 0
	movq	-72(%rbp), %rax	# target, tmp242
	movzwl	(%rax), %eax	# target_19(D)->code, D.25852
	cmpw	$66, %ax	#, D.25852
	jne	.L945	#,
	.loc 1 5164 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# target, tmp243
	movzbl	3(%rax), %eax	# *target_19(D), D.25848
	andl	$8, %eax	#, D.25848
	testb	%al, %al	# D.25848
	jne	.L944	#,
.L945:
.LBB85:
	.loc 1 5169 0 is_stmt 1
	movq	-48(%rbp), %rax	# temp, tmp244
	movzbl	2(%rax), %eax	# temp_2->mode, D.25848
	movzbl	%al, %eax	# D.25848, tmp245
	movl	%eax, -60(%rbp)	# tmp245, tmode
	.loc 1 5170 0
	cmpl	$0, -60(%rbp)	#, tmode
	jne	.L946	#,
	.loc 1 5171 0
	movl	-96(%rbp), %eax	# value_mode, tmp246
	movl	%eax, -60(%rbp)	# tmp246, tmode
.L946:
	.loc 1 5173 0
	cmpl	$0, 16(%rbp)	#, unsignedp
	je	.L947	#,
	.loc 1 5174 0
	movl	-60(%rbp), %edx	# tmode, tmp247
	movq	-56(%rbp), %rax	# width_mask, tmp248
	movl	%edx, %esi	# tmp247,
	movq	%rax, %rdi	# tmp248,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.25851,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.25849
	movq	-48(%rbp), %rsi	# temp, tmp249
	movl	-60(%rbp), %eax	# tmode, tmp250
	movl	$0, %ecx	#,
	movl	%eax, %edi	# tmp250,
	call	expand_and	#
	jmp	.L924	#
.L947:
	.loc 1 5179 0
	movl	-60(%rbp), %eax	# tmode, tmode.515
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25852
	movzwl	%ax, %eax	# D.25852, D.25851
	subq	-80(%rbp), %rax	# bitsize, D.25851
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25863,
	call	build_int_2_wide	#
	movq	%rax, -8(%rbp)	# tmp252, count
	.loc 1 5180 0
	movq	-8(%rbp), %rcx	# count, tmp253
	movq	-48(%rbp), %rdx	# temp, tmp254
	movl	-60(%rbp), %eax	# tmode, tmp255
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movl	%eax, %esi	# tmp255,
	movl	$82, %edi	#,
	call	expand_shift	#
	movq	%rax, -48(%rbp)	# tmp256, temp
	.loc 1 5181 0
	movq	-8(%rbp), %rcx	# count, tmp257
	movq	-48(%rbp), %rdx	# temp, tmp258
	movl	-60(%rbp), %eax	# tmode, tmp259
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movl	%eax, %esi	# tmp259,
	movl	$83, %edi	#,
	call	expand_shift	#
	jmp	.L924	#
.L944:
.LBE85:
	.loc 1 5184 0
	movq	24(%rbp), %rax	# type, tmp260
	movq	%rax, %rdi	# tmp260,
	call	int_size_in_bytes	#
	movq	-88(%rbp), %rdx	# bitpos, bitpos.516
	movq	-80(%rbp), %rsi	# bitsize, bitsize.517
	movl	-96(%rbp), %ecx	# value_mode, tmp261
	movq	-72(%rbp), %rdi	# target, tmp262
	movq	%rax, 8(%rsp)	# D.25851,
	movl	$0, (%rsp)	#,
	movl	%ecx, %r9d	# tmp261,
	movl	$0, %r8d	#,
	movl	16(%rbp), %ecx	# unsignedp,
	call	extract_bit_field	#
	jmp	.L924	#
.L943:
	.loc 1 5188 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25847
	jmp	.L924	#
.L936:
.LBE84:
.LBB86:
	.loc 1 5192 0
	movq	-72(%rbp), %rax	# target, tmp263
	movq	8(%rax), %rax	# target_19(D)->fld[0].rtx, tmp264
	movq	%rax, -16(%rbp)	# tmp264, addr
	.loc 1 5193 0
	movq	-72(%rbp), %rax	# target, tmp265
	movq	%rax, -40(%rbp)	# tmp265, to_rtx
	.loc 1 5198 0
	cmpl	$0, -96(%rbp)	#, value_mode
	je	.L948	#,
	.loc 1 5198 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# addr, tmp266
	movzwl	(%rax), %eax	# addr_67->code, D.25852
	cmpw	$61, %ax	#, D.25852
	je	.L948	#,
	.loc 1 5199 0 is_stmt 1
	movq	-16(%rbp), %rax	# addr, tmp267
	movzwl	(%rax), %eax	# addr_67->code, D.25852
	cmpw	$67, %ax	#, D.25852
	je	.L948	#,
	.loc 1 5199 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# addr, tmp268
	movzwl	(%rax), %eax	# addr_67->code, D.25852
	cmpw	$68, %ax	#, D.25852
	je	.L948	#,
	movq	-16(%rbp), %rax	# addr, tmp269
	movzwl	(%rax), %eax	# addr_67->code, D.25852
	cmpw	$54, %ax	#, D.25852
	je	.L948	#,
	movq	-16(%rbp), %rax	# addr, tmp270
	movzwl	(%rax), %eax	# addr_67->code, D.25852
	cmpw	$58, %ax	#, D.25852
	je	.L948	#,
	movq	-16(%rbp), %rax	# addr, tmp271
	movzwl	(%rax), %eax	# addr_67->code, D.25852
	cmpw	$55, %ax	#, D.25852
	je	.L948	#,
	.loc 1 5201 0 is_stmt 1
	movq	-16(%rbp), %rax	# addr, tmp272
	movzwl	(%rax), %eax	# addr_67->code, D.25852
	cmpw	$75, %ax	#, D.25852
	jne	.L949	#,
	.loc 1 5202 0
	movq	-16(%rbp), %rax	# addr, tmp273
	movq	16(%rax), %rax	# addr_67->fld[1].rtx, D.25849
	movzwl	(%rax), %eax	# _77->code, D.25852
	cmpw	$54, %ax	#, D.25852
	jne	.L949	#,
	.loc 1 5203 0
	movq	-16(%rbp), %rax	# addr, tmp274
	movq	8(%rax), %rdx	# addr_67->fld[0].rtx, D.25849
	movq	global_rtl+48(%rip), %rax	# global_rtl, D.25849
	.loc 1 5201 0
	cmpq	%rax, %rdx	# D.25849, D.25849
	je	.L948	#,
	.loc 1 5204 0
	movq	-16(%rbp), %rax	# addr, tmp275
	movq	8(%rax), %rdx	# addr_67->fld[0].rtx, D.25849
	movq	global_rtl+56(%rip), %rax	# global_rtl, D.25849
	cmpq	%rax, %rdx	# D.25849, D.25849
	je	.L948	#,
.L949:
	.loc 1 5205 0
	movq	-16(%rbp), %rax	# addr, tmp276
	movq	%rax, %rdi	# tmp276,
	call	copy_to_reg	#
	movq	%rax, %rdx	#, D.25849
	movq	-40(%rbp), %rax	# to_rtx, tmp277
	movq	%rdx, %rsi	# D.25849,
	movq	%rax, %rdi	# tmp277,
	call	replace_equiv_address	#
	movq	%rax, -40(%rbp)	# tmp278, to_rtx
.L948:
	.loc 1 5209 0
	movq	-88(%rbp), %rax	# bitpos, tmp279
	leaq	7(%rax), %rdx	#, tmp281
	testq	%rax, %rax	# tmp280
	cmovs	%rdx, %rax	# tmp281,, tmp280
	sarq	$3, %rax	#, tmp282
	movq	%rax, %rdx	# tmp282, D.25851
	movl	-92(%rbp), %esi	# mode, tmp283
	movq	-72(%rbp), %rax	# target, tmp284
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp284,
	call	adjust_address_1	#
	movq	%rax, -40(%rbp)	# tmp285, to_rtx
	.loc 1 5211 0
	movq	-40(%rbp), %rax	# to_rtx, tmp286
	cmpq	-72(%rbp), %rax	# target, tmp286
	jne	.L952	#,
	.loc 1 5212 0
	movq	-40(%rbp), %rax	# to_rtx, tmp287
	movq	%rax, %rdi	# tmp287,
	call	copy_rtx	#
	movq	%rax, -40(%rbp)	# tmp288, to_rtx
.L952:
	.loc 1 5214 0 discriminator 1
	movq	-40(%rbp), %rax	# to_rtx, tmp289
	movzbl	3(%rax), %edx	# to_rtx_4->in_struct, tmp292
	orl	$16, %edx	#, tmp293
	movb	%dl, 3(%rax)	# tmp293, to_rtx_4->in_struct
	movq	-40(%rbp), %rax	# to_rtx, tmp294
	movzbl	3(%rax), %edx	# to_rtx_4->frame_related, tmp297
	andl	$127, %edx	#, tmp298
	movb	%dl, 3(%rax)	# tmp298, to_rtx_4->frame_related
	.loc 1 5215 0 discriminator 1
	movq	-40(%rbp), %rax	# to_rtx, tmp299
	movzbl	3(%rax), %eax	# *to_rtx_4, D.25848
	andl	$1, %eax	#, D.25848
	testb	%al, %al	# D.25848
	jne	.L951	#,
	movq	-40(%rbp), %rax	# to_rtx, tmp300
	movq	16(%rax), %rax	# to_rtx_4->fld[1].rtmem, D.25857
	testq	%rax, %rax	# D.25857
	je	.L951	#,
	movq	-40(%rbp), %rax	# to_rtx, tmp301
	movq	16(%rax), %rax	# to_rtx_4->fld[1].rtmem, D.25857
	movq	(%rax), %rax	# _91->alias, D.25851
	testq	%rax, %rax	# D.25851
	je	.L951	#,
	.loc 1 5216 0
	movl	32(%rbp), %eax	# alias_set, tmp302
	movslq	%eax, %rdx	# tmp302, D.25851
	movq	-40(%rbp), %rax	# to_rtx, tmp303
	movq	%rdx, %rsi	# D.25851,
	movq	%rax, %rdi	# tmp303,
	call	set_mem_alias_set	#
.L951:
	.loc 1 5218 0
	cmpl	$0, -96(%rbp)	#, value_mode
	setne	%al	#, D.25858
	movzbl	%al, %edx	# D.25858, D.25850
	movq	-40(%rbp), %rcx	# to_rtx, tmp304
	movq	-104(%rbp), %rax	# exp, tmp305
	movq	%rcx, %rsi	# tmp304,
	movq	%rax, %rdi	# tmp305,
	call	store_expr	#
.L924:
.LBE86:
	.loc 1 5220 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE45:
	.size	store_field, .-store_field
	.globl	get_inner_reference
	.type	get_inner_reference, @function
get_inner_reference:
.LFB46:
	.loc 1 5254 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$168, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -136(%rbp)	# exp, exp
	movq	%rsi, -144(%rbp)	# pbitsize, pbitsize
	movq	%rdx, -152(%rbp)	# pbitpos, pbitpos
	movq	%rcx, -160(%rbp)	# poffset, poffset
	movq	%r8, -168(%rbp)	# pmode, pmode
	movq	%r9, -176(%rbp)	# punsignedp, punsignedp
	.loc 1 5255 0
	movq	$0, -112(%rbp)	#, size_tree
	.loc 1 5256 0
	movl	$0, -124(%rbp)	#, mode
	.loc 1 5257 0
	movq	global_trees+120(%rip), %rax	# global_trees, tmp132
	movq	%rax, -104(%rbp)	# tmp132, offset
	.loc 1 5258 0
	movq	global_trees+136(%rip), %rax	# global_trees, tmp133
	movq	%rax, -96(%rbp)	# tmp133, bit_offset
	.loc 1 5259 0
	movq	$0, -120(%rbp)	#, placeholder_ptr
	.loc 1 5264 0
	movq	-136(%rbp), %rax	# exp, tmp134
	movzbl	16(%rax), %eax	# exp_22(D)->common.code, D.25864
	cmpb	$39, %al	#, D.25864
	jne	.L954	#,
	.loc 1 5266 0
	movq	-136(%rbp), %rax	# exp, tmp135
	movq	40(%rax), %rax	# exp_22(D)->exp.operands, D.25865
	movq	40(%rax), %rax	# _24->decl.size, tmp136
	movq	%rax, -112(%rbp)	# tmp136, size_tree
	.loc 1 5267 0
	movq	-136(%rbp), %rax	# exp, tmp137
	movq	40(%rax), %rax	# exp_22(D)->exp.operands, D.25865
	movzbl	49(%rax), %eax	# *_26, D.25864
	andl	$16, %eax	#, D.25864
	testb	%al, %al	# D.25864
	jne	.L955	#,
	.loc 1 5268 0
	movq	-136(%rbp), %rax	# exp, tmp138
	movq	40(%rax), %rax	# exp_22(D)->exp.operands, D.25865
	movzbl	48(%rax), %eax	# _29->decl.mode, D.25864
	movzbl	%al, %eax	# D.25864, tmp139
	movl	%eax, -124(%rbp)	# tmp139, mode
.L955:
	.loc 1 5270 0
	movq	-136(%rbp), %rax	# exp, tmp140
	movq	40(%rax), %rax	# exp_22(D)->exp.operands, D.25865
	movzbl	17(%rax), %eax	# *_32, tmp143
	shrb	$5, %al	#, D.25866
	andl	$1, %eax	#, D.25866
	movzbl	%al, %edx	# D.25866, D.25867
	movq	-176(%rbp), %rax	# punsignedp, tmp144
	movl	%edx, (%rax)	# D.25867, *punsignedp_35(D)
	jmp	.L956	#
.L954:
	.loc 1 5272 0
	movq	-136(%rbp), %rax	# exp, tmp145
	movzbl	16(%rax), %eax	# exp_22(D)->common.code, D.25864
	cmpb	$40, %al	#, D.25864
	jne	.L957	#,
	.loc 1 5274 0
	movq	-136(%rbp), %rax	# exp, tmp146
	movq	40(%rax), %rax	# exp_22(D)->exp.operands, tmp147
	movq	%rax, -112(%rbp)	# tmp147, size_tree
	.loc 1 5275 0
	movq	-136(%rbp), %rax	# exp, tmp148
	movzbl	17(%rax), %eax	# *exp_22(D), tmp151
	shrb	$5, %al	#, D.25866
	andl	$1, %eax	#, D.25866
	movzbl	%al, %edx	# D.25866, D.25867
	movq	-176(%rbp), %rax	# punsignedp, tmp152
	movl	%edx, (%rax)	# D.25867, *punsignedp_35(D)
	jmp	.L956	#
.L957:
	.loc 1 5279 0
	movq	-136(%rbp), %rax	# exp, tmp153
	movq	8(%rax), %rax	# exp_22(D)->common.type, D.25865
	movzbl	61(%rax), %eax	# *_40, tmp156
	shrb	%al	# D.25868
	movzbl	%al, %eax	# D.25868, tmp157
	movl	%eax, -124(%rbp)	# tmp157, mode
	.loc 1 5280 0
	movq	-136(%rbp), %rax	# exp, tmp158
	movq	8(%rax), %rax	# exp_22(D)->common.type, D.25865
	movzbl	17(%rax), %eax	# *_43, tmp161
	shrb	$5, %al	#, D.25866
	andl	$1, %eax	#, D.25866
	movzbl	%al, %edx	# D.25866, D.25867
	movq	-176(%rbp), %rax	# punsignedp, tmp162
	movl	%edx, (%rax)	# D.25867, *punsignedp_35(D)
	.loc 1 5282 0
	cmpl	$51, -124(%rbp)	#, mode
	jne	.L958	#,
	.loc 1 5283 0
	movq	-136(%rbp), %rax	# exp, tmp163
	movq	8(%rax), %rax	# exp_22(D)->common.type, D.25865
	movq	32(%rax), %rax	# _46->type.size, tmp164
	movq	%rax, -112(%rbp)	# tmp164, size_tree
	jmp	.L956	#
.L958:
	.loc 1 5285 0
	movl	-124(%rbp), %eax	# mode, mode.518
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25869
	movzwl	%ax, %edx	# D.25869, D.25870
	movq	-144(%rbp), %rax	# pbitsize, tmp166
	movq	%rdx, (%rax)	# D.25870, *pbitsize_51(D)
.L956:
	.loc 1 5288 0
	cmpq	$0, -112(%rbp)	#, size_tree
	je	.L959	#,
	.loc 1 5290 0
	movq	-112(%rbp), %rax	# size_tree, tmp167
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp167,
	call	host_integerp	#
	testl	%eax, %eax	# D.25867
	jne	.L960	#,
	.loc 1 5291 0
	movl	$51, -124(%rbp)	#, mode
	movq	-144(%rbp), %rax	# pbitsize, tmp168
	movq	$-1, (%rax)	#, *pbitsize_51(D)
	jmp	.L959	#
.L960:
	.loc 1 5293 0
	movq	-112(%rbp), %rax	# size_tree, tmp169
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp169,
	call	tree_low_cst	#
	movq	-144(%rbp), %rdx	# pbitsize, tmp170
	movq	%rax, (%rdx)	# D.25870, *pbitsize_51(D)
.L959:
	.loc 1 5300 0
	movq	-136(%rbp), %rax	# exp, tmp171
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25864
	cmpb	$40, %al	#, D.25864
	jne	.L961	#,
	.loc 1 5301 0
	movq	-136(%rbp), %rax	# exp, tmp172
	movq	48(%rax), %rdx	# exp_1->exp.operands, D.25865
	movq	-96(%rbp), %rax	# bit_offset, tmp173
	movq	%rax, %rsi	# tmp173,
	movl	$59, %edi	#,
	call	size_binop	#
	movq	%rax, -96(%rbp)	# tmp174, bit_offset
	jmp	.L962	#
.L961:
	.loc 1 5302 0
	movq	-136(%rbp), %rax	# exp, tmp175
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25864
	cmpb	$39, %al	#, D.25864
	jne	.L963	#,
.LBB87:
	.loc 1 5304 0
	movq	-136(%rbp), %rax	# exp, tmp176
	movq	40(%rax), %rax	# exp_1->exp.operands, tmp177
	movq	%rax, -64(%rbp)	# tmp177, field
	.loc 1 5305 0
	movq	-64(%rbp), %rax	# field, tmp178
	movq	88(%rax), %rax	# field_59->decl.arguments, tmp179
	movq	%rax, -88(%rbp)	# tmp179, this_offset
	.loc 1 5310 0
	cmpq	$0, -88(%rbp)	#, this_offset
	jne	.L964	#,
	.loc 1 5311 0
	jmp	.L965	#
.L964:
	.loc 1 5312 0
	movq	-88(%rbp), %rax	# this_offset, tmp180
	movzbl	17(%rax), %eax	# *this_offset_60, D.25864
	andl	$2, %eax	#, D.25864
	testb	%al, %al	# D.25864
	jne	.L966	#,
	.loc 1 5313 0
	movq	-88(%rbp), %rax	# this_offset, tmp181
	movq	%rax, %rdi	# tmp181,
	call	contains_placeholder_p	#
	testl	%eax, %eax	# D.25867
	je	.L966	#,
	.loc 1 5314 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25865
	movq	-136(%rbp), %rcx	# exp, tmp182
	movq	-88(%rbp), %rdx	# this_offset, tmp183
	movq	%rax, %rsi	# D.25865,
	movl	$58, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -88(%rbp)	# tmp184, this_offset
.L966:
	.loc 1 5316 0
	movq	-88(%rbp), %rdx	# this_offset, tmp185
	movq	-104(%rbp), %rax	# offset, tmp186
	movq	%rax, %rsi	# tmp186,
	movl	$59, %edi	#,
	call	size_binop	#
	movq	%rax, -104(%rbp)	# tmp187, offset
	.loc 1 5317 0
	movq	-64(%rbp), %rax	# field, tmp188
	movq	160(%rax), %rdx	# field_59->decl.u2.t, D.25865
	movq	-96(%rbp), %rax	# bit_offset, tmp189
	movq	%rax, %rsi	# tmp189,
	movl	$59, %edi	#,
	call	size_binop	#
	movq	%rax, -96(%rbp)	# tmp190, bit_offset
.LBE87:
	jmp	.L962	#
.L963:
	.loc 1 5323 0
	movq	-136(%rbp), %rax	# exp, tmp191
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25864
	cmpb	$43, %al	#, D.25864
	je	.L967	#,
	.loc 1 5324 0
	movq	-136(%rbp), %rax	# exp, tmp192
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25864
	cmpb	$44, %al	#, D.25864
	jne	.L968	#,
.L967:
.LBB88:
	.loc 1 5326 0
	movq	-136(%rbp), %rax	# exp, tmp193
	movq	40(%rax), %rax	# exp_1->exp.operands, tmp194
	movq	%rax, -80(%rbp)	# tmp194, index
	.loc 1 5327 0
	movq	-136(%rbp), %rax	# exp, tmp195
	movq	32(%rax), %rax	# exp_1->exp.operands, tmp196
	movq	%rax, -48(%rbp)	# tmp196, array
	.loc 1 5328 0
	movq	-48(%rbp), %rax	# array, tmp197
	movq	8(%rax), %rax	# array_84->common.type, D.25865
	movq	24(%rax), %rax	# _85->type.values, tmp198
	movq	%rax, -40(%rbp)	# tmp198, domain
	.loc 1 5329 0
	cmpq	$0, -40(%rbp)	#, domain
	je	.L969	#,
	.loc 1 5329 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# domain, tmp199
	movq	104(%rax), %rax	# domain_86->type.minval, iftmp.519
	jmp	.L970	#
.L969:
	.loc 1 5329 0 discriminator 2
	movl	$0, %eax	#, iftmp.519
.L970:
	.loc 1 5329 0 discriminator 3
	movq	%rax, -32(%rbp)	# iftmp.519, low_bound
	.loc 1 5330 0 is_stmt 1 discriminator 3
	movq	-48(%rbp), %rax	# array, tmp200
	movq	8(%rax), %rax	# array_84->common.type, D.25865
	movq	8(%rax), %rax	# _90->common.type, D.25865
	movq	40(%rax), %rax	# _91->type.size_unit, tmp201
	movq	%rax, -72(%rbp)	# tmp201, unit_size
	.loc 1 5336 0 discriminator 3
	cmpq	$0, -32(%rbp)	#, low_bound
	je	.L971	#,
	.loc 1 5336 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# low_bound, tmp202
	movq	%rax, %rdi	# tmp202,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25867
	jne	.L971	#,
	.loc 1 5337 0 is_stmt 1
	movq	-80(%rbp), %rax	# index, tmp203
	movq	8(%rax), %rax	# index_83->common.type, D.25865
	movq	-32(%rbp), %rcx	# low_bound, tmp204
	movq	-80(%rbp), %rdx	# index, tmp205
	movq	%rax, %rsi	# D.25865,
	movl	$60, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25865,
	call	fold	#
	movq	%rax, -80(%rbp)	# tmp206, index
.L971:
	.loc 1 5343 0
	movq	-80(%rbp), %rax	# index, tmp207
	movzbl	17(%rax), %eax	# *index_14, D.25864
	andl	$2, %eax	#, D.25864
	testb	%al, %al	# D.25864
	jne	.L972	#,
	.loc 1 5344 0
	movq	-80(%rbp), %rax	# index, tmp208
	movq	%rax, %rdi	# tmp208,
	call	contains_placeholder_p	#
	testl	%eax, %eax	# D.25867
	je	.L972	#,
	.loc 1 5345 0
	movq	-80(%rbp), %rax	# index, tmp209
	movq	8(%rax), %rax	# index_14->common.type, D.25865
	movq	-136(%rbp), %rcx	# exp, tmp210
	movq	-80(%rbp), %rdx	# index, tmp211
	movq	%rax, %rsi	# D.25865,
	movl	$58, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -80(%rbp)	# tmp212, index
.L972:
	.loc 1 5346 0
	movq	-72(%rbp), %rax	# unit_size, tmp213
	movzbl	17(%rax), %eax	# *unit_size_92, D.25864
	andl	$2, %eax	#, D.25864
	testb	%al, %al	# D.25864
	jne	.L973	#,
	.loc 1 5347 0
	movq	-72(%rbp), %rax	# unit_size, tmp214
	movq	%rax, %rdi	# tmp214,
	call	contains_placeholder_p	#
	testl	%eax, %eax	# D.25867
	je	.L973	#,
	.loc 1 5348 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25865
	movq	-48(%rbp), %rcx	# array, tmp215
	movq	-72(%rbp), %rdx	# unit_size, tmp216
	movq	%rax, %rsi	# D.25865,
	movl	$58, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -72(%rbp)	# tmp217, unit_size
.L973:
	.loc 1 5350 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25865
	movq	-80(%rbp), %rdx	# index, tmp218
	movq	%rdx, %rsi	# tmp218,
	movq	%rax, %rdi	# D.25865,
	call	convert	#
	movq	-72(%rbp), %rdx	# unit_size, tmp219
	movq	%rax, %rsi	# D.25865,
	movl	$61, %edi	#,
	call	size_binop	#
	movq	%rax, %rdx	#, D.25865
	movq	-104(%rbp), %rax	# offset, tmp220
	movq	%rax, %rsi	# tmp220,
	movl	$59, %edi	#,
	call	size_binop	#
	movq	%rax, -104(%rbp)	# tmp221, offset
.LBE88:
	.loc 1 5325 0
	jmp	.L962	#
.L968:
	.loc 1 5356 0
	movq	-136(%rbp), %rax	# exp, tmp222
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25864
	cmpb	$57, %al	#, D.25864
	jne	.L974	#,
.LBB89:
	.loc 1 5358 0
	leaq	-120(%rbp), %rdx	#, tmp223
	movq	-136(%rbp), %rax	# exp, tmp224
	movq	%rdx, %rsi	# tmp223,
	movq	%rax, %rdi	# tmp224,
	call	find_placeholder	#
	movq	%rax, -56(%rbp)	# tmp225, new
	.loc 1 5363 0
	cmpq	$0, -56(%rbp)	#, new
	jne	.L975	#,
	.loc 1 5364 0
	jmp	.L965	#
.L975:
	.loc 1 5366 0
	movq	-56(%rbp), %rax	# new, tmp226
	movq	%rax, -136(%rbp)	# tmp226, exp
	.loc 1 5368 0
	nop
.LBE89:
	.loc 1 5383 0
	jmp	.L959	#
.L974:
	.loc 1 5370 0
	movq	-136(%rbp), %rax	# exp, tmp227
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25864
	cmpb	$116, %al	#, D.25864
	je	.L962	#,
	.loc 1 5371 0
	movq	-136(%rbp), %rax	# exp, tmp228
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25864
	cmpb	$117, %al	#, D.25864
	je	.L962	#,
	.loc 1 5372 0
	movq	-136(%rbp), %rax	# exp, tmp229
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25864
	cmpb	$115, %al	#, D.25864
	je	.L977	#,
	.loc 1 5373 0
	movq	-136(%rbp), %rax	# exp, tmp230
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25864
	cmpb	$114, %al	#, D.25864
	jne	.L965	#,
.L977:
	.loc 1 5374 0 discriminator 1
	movq	-136(%rbp), %rax	# exp, tmp231
	movq	8(%rax), %rax	# exp_1->common.type, D.25865
	movzbl	61(%rax), %eax	# *_78, tmp234
	shrb	%al	# D.25868
	movl	%eax, %edx	# D.25868, D.25868
	.loc 1 5375 0 discriminator 1
	movq	-136(%rbp), %rax	# exp, tmp235
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25865
	movq	8(%rax), %rax	# _80->common.type, D.25865
	movzbl	61(%rax), %eax	# *_81, tmp238
	shrb	%al	# D.25868
	.loc 1 5372 0 discriminator 1
	cmpb	%al, %dl	# D.25868, D.25868
	jne	.L965	#,
.L962:
	.loc 1 5379 0
	movq	-136(%rbp), %rax	# exp, tmp239
	movzbl	17(%rax), %eax	# *exp_1, D.25864
	andl	$8, %eax	#, D.25864
	testb	%al, %al	# D.25864
	je	.L978	#,
	.loc 1 5380 0
	movq	16(%rbp), %rax	# pvolatilep, tmp240
	movl	$1, (%rax)	#, *pvolatilep_126(D)
.L978:
	.loc 1 5382 0
	movq	-136(%rbp), %rax	# exp, tmp241
	movq	32(%rax), %rax	# exp_1->exp.operands, tmp242
	movq	%rax, -136(%rbp)	# tmp242, exp
	.loc 1 5383 0
	jmp	.L959	#
.L965:
	.loc 1 5387 0
	movq	-104(%rbp), %rax	# offset, tmp243
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp243,
	call	host_integerp	#
	testl	%eax, %eax	# D.25867
	je	.L979	#,
	.loc 1 5388 0
	movq	global_trees+152(%rip), %rbx	# global_trees, D.25865
	movq	sizetype_tab+24(%rip), %rax	# sizetype_tab, D.25865
	movq	-104(%rbp), %rdx	# offset, tmp244
	movq	%rdx, %rsi	# tmp244,
	movq	%rax, %rdi	# D.25865,
	call	convert	#
	movq	%rbx, %rdx	# D.25865,
	movq	%rax, %rsi	# D.25865,
	movl	$61, %edi	#,
	call	size_binop	#
	movq	%rax, -24(%rbp)	# tmp245, tem
	cmpq	$0, -24(%rbp)	#, tem
	je	.L979	#,
	.loc 1 5390 0
	movq	-96(%rbp), %rdx	# bit_offset, tmp246
	movq	-24(%rbp), %rax	# tem, tmp247
	movq	%rax, %rsi	# tmp247,
	movl	$59, %edi	#,
	call	size_binop	#
	movq	%rax, -24(%rbp)	# tmp248, tem
	cmpq	$0, -24(%rbp)	#, tem
	je	.L979	#,
	.loc 1 5391 0
	movq	-24(%rbp), %rax	# tem, tmp249
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp249,
	call	host_integerp	#
	testl	%eax, %eax	# D.25867
	je	.L979	#,
	.loc 1 5392 0
	movq	-24(%rbp), %rax	# tem, tmp250
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp250,
	call	tree_low_cst	#
	movq	-152(%rbp), %rdx	# pbitpos, tmp251
	movq	%rax, (%rdx)	# D.25870, *pbitpos_119(D)
	movq	-160(%rbp), %rax	# poffset, tmp252
	movq	$0, (%rax)	#, *poffset_120(D)
	jmp	.L980	#
.L979:
	.loc 1 5394 0
	movq	-96(%rbp), %rax	# bit_offset, tmp253
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp253,
	call	tree_low_cst	#
	movq	-152(%rbp), %rdx	# pbitpos, tmp254
	movq	%rax, (%rdx)	# D.25870, *pbitpos_119(D)
	movq	-160(%rbp), %rax	# poffset, tmp255
	movq	-104(%rbp), %rdx	# offset, tmp256
	movq	%rdx, (%rax)	# tmp256, *poffset_120(D)
.L980:
	.loc 1 5396 0
	movq	-168(%rbp), %rax	# pmode, tmp257
	movl	-124(%rbp), %edx	# mode, tmp258
	movl	%edx, (%rax)	# tmp258, *pmode_122(D)
	.loc 1 5397 0
	movq	-136(%rbp), %rax	# exp, D.25871
	.loc 1 5398 0
	addq	$168, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE46:
	.size	get_inner_reference, .-get_inner_reference
	.globl	handled_component_p
	.type	handled_component_p, @function
handled_component_p:
.LFB47:
	.loc 1 5405 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# t, t
	.loc 1 5406 0
	movq	-8(%rbp), %rax	# t, tmp69
	movzbl	16(%rax), %eax	# t_2(D)->common.code, D.25873
	movzbl	%al, %eax	# D.25873, D.25874
	subl	$39, %eax	#, tmp70
	cmpl	$78, %eax	#, tmp70
	ja	.L983	#,
	movl	%eax, %eax	# tmp70, tmp71
	movq	.L985(,%rax,8), %rax	#, tmp72
	jmp	*%rax	# tmp72
	.section	.rodata
	.align 8
	.align 4
.L985:
	.quad	.L984
	.quad	.L984
	.quad	.L983
	.quad	.L983
	.quad	.L984
	.quad	.L984
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L983
	.quad	.L986
	.quad	.L986
	.quad	.L984
	.quad	.L984
	.text
.L984:
	.loc 1 5414 0
	movl	$1, %eax	#, D.25872
	jmp	.L987	#
.L986:
	.loc 1 5418 0
	movq	-8(%rbp), %rax	# t, tmp73
	movq	8(%rax), %rax	# t_2(D)->common.type, D.25875
	movzbl	61(%rax), %eax	# *_6, tmp76
	shrb	%al	# D.25876
	movl	%eax, %edx	# D.25876, D.25876
	.loc 1 5419 0
	movq	-8(%rbp), %rax	# t, tmp77
	movq	32(%rax), %rax	# t_2(D)->exp.operands, D.25875
	movq	8(%rax), %rax	# _8->common.type, D.25875
	movzbl	61(%rax), %eax	# *_9, tmp80
	shrb	%al	# D.25876
	cmpb	%al, %dl	# D.25876, D.25876
	sete	%al	#, D.25877
	.loc 1 5418 0
	movzbl	%al, %eax	# D.25877, D.25872
	jmp	.L987	#
.L983:
	.loc 1 5422 0
	movl	$0, %eax	#, D.25872
.L987:
	.loc 1 5424 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE47:
	.size	handled_component_p, .-handled_component_p
	.globl	force_operand
	.type	force_operand, @function
force_operand:
.LFB48:
	.loc 1 5436 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$80, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -72(%rbp)	# value, value
	movq	%rsi, -80(%rbp)	# target, target
	.loc 1 5437 0
	movq	$0, -56(%rbp)	#, binoptab
	.loc 1 5443 0
	movq	-80(%rbp), %rax	# target, tmp150
	movq	%rax, %rdi	# tmp150,
	call	get_subtarget	#
	movq	%rax, -40(%rbp)	# tmp151, subtarget
	.loc 1 5446 0
	movq	-72(%rbp), %rax	# value, tmp152
	movzwl	(%rax), %eax	# value_12(D)->code, D.25879
	cmpw	$75, %ax	#, D.25879
	je	.L989	#,
	.loc 1 5446 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# value, tmp153
	movzwl	(%rax), %eax	# value_12(D)->code, D.25879
	cmpw	$76, %ax	#, D.25879
	jne	.L990	#,
.L989:
	.loc 1 5447 0 is_stmt 1
	movq	-72(%rbp), %rax	# value, tmp154
	movq	8(%rax), %rdx	# value_12(D)->fld[0].rtx, D.25880
	movq	pic_offset_table_rtx(%rip), %rax	# pic_offset_table_rtx, pic_offset_table_rtx.520
	cmpq	%rax, %rdx	# pic_offset_table_rtx.520, D.25880
	jne	.L990	#,
	.loc 1 5448 0
	movq	-72(%rbp), %rax	# value, tmp155
	movq	16(%rax), %rax	# value_12(D)->fld[1].rtx, D.25880
	movzwl	(%rax), %eax	# _17->code, D.25879
	cmpw	$68, %ax	#, D.25879
	je	.L991	#,
	.loc 1 5449 0
	movq	-72(%rbp), %rax	# value, tmp156
	movq	16(%rax), %rax	# value_12(D)->fld[1].rtx, D.25880
	movzwl	(%rax), %eax	# _19->code, D.25879
	cmpw	$67, %ax	#, D.25879
	je	.L991	#,
	.loc 1 5450 0
	movq	-72(%rbp), %rax	# value, tmp157
	movq	16(%rax), %rax	# value_12(D)->fld[1].rtx, D.25880
	movzwl	(%rax), %eax	# _21->code, D.25879
	cmpw	$58, %ax	#, D.25879
	jne	.L990	#,
.L991:
	.loc 1 5452 0
	cmpq	$0, -40(%rbp)	#, subtarget
	jne	.L992	#,
	.loc 1 5453 0
	movq	-72(%rbp), %rax	# value, tmp158
	movzbl	2(%rax), %eax	# value_12(D)->mode, D.25881
	movzbl	%al, %eax	# D.25881, D.25882
	movl	%eax, %edi	# D.25882,
	call	gen_reg_rtx	#
	movq	%rax, -40(%rbp)	# tmp159, subtarget
.L992:
	.loc 1 5454 0
	movq	-72(%rbp), %rdx	# value, tmp160
	movq	-40(%rbp), %rax	# subtarget, tmp161
	movq	%rdx, %rsi	# tmp160,
	movq	%rax, %rdi	# tmp161,
	call	emit_move_insn	#
	.loc 1 5455 0
	movq	-40(%rbp), %rax	# subtarget, D.25878
	jmp	.L993	#
.L990:
	.loc 1 5458 0
	movq	-72(%rbp), %rax	# value, tmp162
	movzwl	(%rax), %eax	# value_12(D)->code, D.25879
	cmpw	$75, %ax	#, D.25879
	jne	.L994	#,
	.loc 1 5459 0
	movq	optab_table(%rip), %rax	# optab_table, tmp163
	movq	%rax, -56(%rbp)	# tmp163, binoptab
	jmp	.L995	#
.L994:
	.loc 1 5460 0
	movq	-72(%rbp), %rax	# value, tmp164
	movzwl	(%rax), %eax	# value_12(D)->code, D.25879
	cmpw	$76, %ax	#, D.25879
	jne	.L996	#,
	.loc 1 5461 0
	movq	optab_table+16(%rip), %rax	# optab_table, tmp165
	movq	%rax, -56(%rbp)	# tmp165, binoptab
	jmp	.L995	#
.L996:
	.loc 1 5462 0
	movq	-72(%rbp), %rax	# value, tmp166
	movzwl	(%rax), %eax	# value_12(D)->code, D.25879
	cmpw	$78, %ax	#, D.25879
	jne	.L995	#,
	.loc 1 5464 0
	movq	-72(%rbp), %rax	# value, tmp167
	movq	16(%rax), %rax	# value_12(D)->fld[1].rtx, tmp168
	movq	%rax, -48(%rbp)	# tmp168, op2
	.loc 1 5465 0
	movq	-48(%rbp), %rax	# op2, tmp169
	movzwl	(%rax), %eax	# op2_32->code, D.25879
	cmpw	$67, %ax	#, D.25879
	je	.L997	#,
	.loc 1 5465 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# op2, tmp170
	movzwl	(%rax), %eax	# op2_32->code, D.25879
	cmpw	$68, %ax	#, D.25879
	je	.L997	#,
	movq	-48(%rbp), %rax	# op2, tmp171
	movzwl	(%rax), %eax	# op2_32->code, D.25879
	cmpw	$54, %ax	#, D.25879
	je	.L997	#,
	movq	-48(%rbp), %rax	# op2, tmp172
	movzwl	(%rax), %eax	# op2_32->code, D.25879
	cmpw	$55, %ax	#, D.25879
	je	.L997	#,
	movq	-48(%rbp), %rax	# op2, tmp173
	movzwl	(%rax), %eax	# op2_32->code, D.25879
	cmpw	$58, %ax	#, D.25879
	je	.L997	#,
	movq	-48(%rbp), %rax	# op2, tmp174
	movzwl	(%rax), %eax	# op2_32->code, D.25879
	cmpw	$134, %ax	#, D.25879
	je	.L997	#,
	movq	-48(%rbp), %rax	# op2, tmp175
	movzwl	(%rax), %eax	# op2_32->code, D.25879
	cmpw	$56, %ax	#, D.25879
	je	.L997	#,
	movq	-48(%rbp), %rax	# op2, tmp176
	movzwl	(%rax), %eax	# op2_32->code, D.25879
	cmpw	$140, %ax	#, D.25879
	je	.L997	#,
	.loc 1 5466 0 is_stmt 1
	movq	-48(%rbp), %rax	# op2, tmp177
	movzwl	(%rax), %eax	# op2_32->code, D.25879
	cmpw	$61, %ax	#, D.25879
	jne	.L998	#,
	.loc 1 5466 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# op2, tmp178
	cmpq	-40(%rbp), %rax	# subtarget, tmp178
	jne	.L997	#,
.L998:
	.loc 1 5467 0 is_stmt 1
	movq	$0, -40(%rbp)	#, subtarget
.L997:
	.loc 1 5468 0
	movq	-72(%rbp), %rax	# value, tmp179
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movq	-40(%rbp), %rdx	# subtarget, tmp180
	movq	%rdx, %rsi	# tmp180,
	movq	%rax, %rdi	# D.25880,
	call	force_operand	#
	movq	%rax, -32(%rbp)	# tmp181, tmp
	.loc 1 5469 0
	movq	-48(%rbp), %rax	# op2, tmp182
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp182,
	call	force_operand	#
	movq	%rax, %rdx	#, D.25880
	movq	-72(%rbp), %rax	# value, tmp183
	movzbl	2(%rax), %eax	# value_12(D)->mode, D.25881
	movzbl	%al, %eax	# D.25881, D.25882
	movq	-80(%rbp), %rcx	# target, tmp184
	movq	-32(%rbp), %rsi	# tmp, tmp185
	movl	$1, %r8d	#,
	movl	%eax, %edi	# D.25882,
	call	expand_mult	#
	jmp	.L993	#
.L995:
	.loc 1 5474 0
	cmpq	$0, -56(%rbp)	#, binoptab
	je	.L999	#,
	.loc 1 5476 0
	movq	-72(%rbp), %rax	# value, tmp186
	movq	16(%rax), %rax	# value_12(D)->fld[1].rtx, tmp187
	movq	%rax, -48(%rbp)	# tmp187, op2
	.loc 1 5477 0
	movq	-48(%rbp), %rax	# op2, tmp188
	movzwl	(%rax), %eax	# op2_49->code, D.25879
	cmpw	$67, %ax	#, D.25879
	je	.L1000	#,
	.loc 1 5477 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# op2, tmp189
	movzwl	(%rax), %eax	# op2_49->code, D.25879
	cmpw	$68, %ax	#, D.25879
	je	.L1000	#,
	movq	-48(%rbp), %rax	# op2, tmp190
	movzwl	(%rax), %eax	# op2_49->code, D.25879
	cmpw	$54, %ax	#, D.25879
	je	.L1000	#,
	movq	-48(%rbp), %rax	# op2, tmp191
	movzwl	(%rax), %eax	# op2_49->code, D.25879
	cmpw	$55, %ax	#, D.25879
	je	.L1000	#,
	movq	-48(%rbp), %rax	# op2, tmp192
	movzwl	(%rax), %eax	# op2_49->code, D.25879
	cmpw	$58, %ax	#, D.25879
	je	.L1000	#,
	movq	-48(%rbp), %rax	# op2, tmp193
	movzwl	(%rax), %eax	# op2_49->code, D.25879
	cmpw	$134, %ax	#, D.25879
	je	.L1000	#,
	movq	-48(%rbp), %rax	# op2, tmp194
	movzwl	(%rax), %eax	# op2_49->code, D.25879
	cmpw	$56, %ax	#, D.25879
	je	.L1000	#,
	movq	-48(%rbp), %rax	# op2, tmp195
	movzwl	(%rax), %eax	# op2_49->code, D.25879
	cmpw	$140, %ax	#, D.25879
	je	.L1000	#,
	.loc 1 5478 0 is_stmt 1
	movq	-48(%rbp), %rax	# op2, tmp196
	movzwl	(%rax), %eax	# op2_49->code, D.25879
	cmpw	$61, %ax	#, D.25879
	jne	.L1001	#,
	.loc 1 5478 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# op2, tmp197
	cmpq	-40(%rbp), %rax	# subtarget, tmp197
	jne	.L1000	#,
.L1001:
	.loc 1 5479 0 is_stmt 1
	movq	$0, -40(%rbp)	#, subtarget
.L1000:
	.loc 1 5480 0
	movq	optab_table+16(%rip), %rax	# optab_table, D.25883
	cmpq	-56(%rbp), %rax	# binoptab, D.25883
	jne	.L1002	#,
	.loc 1 5480 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# op2, tmp198
	movzwl	(%rax), %eax	# op2_49->code, D.25879
	cmpw	$54, %ax	#, D.25879
	jne	.L1002	#,
	.loc 1 5482 0 is_stmt 1
	movq	optab_table(%rip), %rax	# optab_table, tmp199
	movq	%rax, -56(%rbp)	# tmp199, binoptab
	.loc 1 5483 0
	movq	-72(%rbp), %rax	# value, tmp200
	movzbl	2(%rax), %eax	# value_12(D)->mode, D.25881
	movzbl	%al, %eax	# D.25881, D.25882
	movq	-48(%rbp), %rdx	# op2, tmp201
	movq	%rdx, %rsi	# tmp201,
	movl	%eax, %edi	# D.25882,
	call	negate_rtx	#
	movq	%rax, -48(%rbp)	# tmp202, op2
.L1002:
	.loc 1 5492 0
	movq	optab_table(%rip), %rax	# optab_table, D.25883
	cmpq	-56(%rbp), %rax	# binoptab, D.25883
	jne	.L1003	#,
	.loc 1 5492 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# op2, tmp203
	movzwl	(%rax), %eax	# op2_4->code, D.25879
	cmpw	$54, %ax	#, D.25879
	jne	.L1003	#,
	.loc 1 5493 0 is_stmt 1
	movq	-72(%rbp), %rax	# value, tmp204
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movzwl	(%rax), %eax	# _68->code, D.25879
	cmpw	$75, %ax	#, D.25879
	jne	.L1003	#,
	.loc 1 5494 0
	movq	-72(%rbp), %rax	# value, tmp205
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movq	8(%rax), %rax	# _70->fld[0].rtx, D.25880
	movzwl	(%rax), %eax	# _71->code, D.25879
	cmpw	$61, %ax	#, D.25879
	jne	.L1003	#,
	.loc 1 5495 0
	movq	-72(%rbp), %rax	# value, tmp206
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movq	8(%rax), %rax	# _73->fld[0].rtx, D.25880
	movl	8(%rax), %eax	# _74->fld[0].rtuint, D.25884
	cmpl	$52, %eax	#, D.25884
	jbe	.L1003	#,
	.loc 1 5496 0
	movq	-72(%rbp), %rax	# value, tmp207
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movq	8(%rax), %rax	# _76->fld[0].rtx, D.25880
	movl	8(%rax), %eax	# _77->fld[0].rtuint, D.25884
	cmpl	$57, %eax	#, D.25884
	ja	.L1003	#,
.LBB90:
	.loc 1 5499 0
	movq	-72(%rbp), %rax	# value, tmp208
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	.loc 1 5498 0
	movq	8(%rax), %rdx	# _79->fld[0].rtx, D.25880
	movq	-72(%rbp), %rax	# value, tmp209
	movzbl	2(%rax), %eax	# value_12(D)->mode, D.25881
	movzbl	%al, %eax	# D.25881, D.25882
	movq	-40(%rbp), %rdi	# subtarget, tmp210
	movq	-48(%rbp), %rcx	# op2, tmp211
	movq	-56(%rbp), %rsi	# binoptab, tmp212
	movl	$3, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%rdi, %r8	# tmp210,
	movl	%eax, %edi	# D.25882,
	call	expand_binop	#
	movq	%rax, -24(%rbp)	# tmp213, temp
	.loc 1 5502 0
	movq	-72(%rbp), %rax	# value, tmp214
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	.loc 1 5501 0
	movq	16(%rax), %rax	# _84->fld[1].rtx, D.25880
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25880,
	call	force_operand	#
	movq	%rax, %rcx	#, D.25880
	movq	-72(%rbp), %rax	# value, tmp215
	movzbl	2(%rax), %eax	# value_12(D)->mode, D.25881
	movzbl	%al, %eax	# D.25881, D.25882
	movq	-80(%rbp), %rdi	# target, tmp216
	movq	-24(%rbp), %rdx	# temp, tmp217
	movq	-56(%rbp), %rsi	# binoptab, tmp218
	movl	$3, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%rdi, %r8	# tmp216,
	movl	%eax, %edi	# D.25882,
	call	expand_binop	#
	jmp	.L993	#
.L1003:
.LBE90:
	.loc 1 5506 0
	movq	-72(%rbp), %rax	# value, tmp219
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movq	-40(%rbp), %rdx	# subtarget, tmp220
	movq	%rdx, %rsi	# tmp220,
	movq	%rax, %rdi	# D.25880,
	call	force_operand	#
	movq	%rax, -32(%rbp)	# tmp221, tmp
	.loc 1 5507 0
	movq	-48(%rbp), %rax	# op2, tmp222
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp222,
	call	force_operand	#
	movq	%rax, %rcx	#, D.25880
	movq	-72(%rbp), %rax	# value, tmp223
	movzbl	2(%rax), %eax	# value_12(D)->mode, D.25881
	movzbl	%al, %eax	# D.25881, D.25882
	movq	-80(%rbp), %rdi	# target, tmp224
	movq	-32(%rbp), %rdx	# tmp, tmp225
	movq	-56(%rbp), %rsi	# binoptab, tmp226
	movl	$3, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%rdi, %r8	# tmp224,
	movl	%eax, %edi	# D.25882,
	call	expand_binop	#
	jmp	.L993	#
.L999:
	.loc 1 5517 0
	movq	-72(%rbp), %rax	# value, tmp227
	movzwl	(%rax), %eax	# value_12(D)->code, D.25879
	cmpw	$63, %ax	#, D.25879
	jne	.L1004	#,
	.loc 1 5517 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# value, tmp228
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movzwl	(%rax), %eax	# _97->code, D.25879
	cmpw	$66, %ax	#, D.25879
	jne	.L1004	#,
	.loc 1 5518 0 is_stmt 1
	movq	-72(%rbp), %rax	# value, tmp229
	movzbl	2(%rax), %eax	# value_12(D)->mode, D.25881
	movzbl	%al, %eax	# D.25881, D.25885
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.25881
	.loc 1 5519 0
	movq	-72(%rbp), %rax	# value, tmp231
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movzbl	2(%rax), %eax	# _102->mode, D.25881
	movzbl	%al, %eax	# D.25881, D.25885
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25881
	.loc 1 5518 0
	cmpb	%al, %dl	# D.25881, D.25881
	jbe	.L1004	#,
	.loc 1 5521 0
	movq	-72(%rbp), %rax	# value, tmp233
	movl	16(%rax), %r12d	# value_12(D)->fld[1].rtuint, D.25884
	.loc 1 5525 0
	movq	-72(%rbp), %rax	# value, tmp234
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movzbl	2(%rax), %eax	# _107->mode, D.25881
	.loc 1 5521 0
	movzbl	%al, %ebx	# D.25881, D.25882
	movq	-72(%rbp), %rax	# value, tmp235
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25880,
	call	force_operand	#
	movq	%rax, %rdx	#, D.25880
	.loc 1 5522 0
	movq	-72(%rbp), %rax	# value, tmp236
	movq	8(%rax), %rax	# value_12(D)->fld[0].rtx, D.25880
	movzbl	2(%rax), %eax	# _112->mode, D.25881
	.loc 1 5521 0
	movzbl	%al, %eax	# D.25881, D.25882
	movq	%rdx, %rsi	# D.25880,
	movl	%eax, %edi	# D.25882,
	call	force_reg	#
	movq	%rax, %rsi	#, D.25880
	movq	-72(%rbp), %rax	# value, tmp237
	movzbl	2(%rax), %eax	# value_12(D)->mode, D.25881
	movzbl	%al, %eax	# D.25881, D.25882
	movl	%r12d, %ecx	# D.25884,
	movl	%ebx, %edx	# D.25882,
	movl	%eax, %edi	# D.25882,
	call	simplify_gen_subreg	#
	movq	%rax, -72(%rbp)	# tmp238, value
.L1004:
	.loc 1 5529 0
	movq	-72(%rbp), %rax	# value, D.25878
.L993:
	.loc 1 5530 0
	addq	$80, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE48:
	.size	force_operand, .-force_operand
	.globl	safe_from_p
	.type	safe_from_p, @function
safe_from_p:
.LFB49:
	.loc 1 5545 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# exp, exp
	movl	%edx, -52(%rbp)	# top_p, top_p
	.loc 1 5546 0
	movq	$0, -16(%rbp)	#, exp_rtl
	.loc 1 5550 0
	cmpq	$0, -40(%rbp)	#, x
	je	.L1006	#,
	.loc 1 5557 0
	cmpl	$0, -52(%rbp)	#, top_p
	je	.L1007	#,
	.loc 1 5557 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# exp, tmp162
	movq	8(%rax), %rax	# exp_21(D)->common.type, D.25887
	testq	%rax, %rax	# D.25887
	je	.L1007	#,
	movq	-48(%rbp), %rax	# exp, tmp163
	movq	8(%rax), %rax	# exp_21(D)->common.type, D.25887
	movq	32(%rax), %rax	# _23->type.size, D.25887
	testq	%rax, %rax	# D.25887
	je	.L1007	#,
	.loc 1 5558 0 is_stmt 1
	movq	-48(%rbp), %rax	# exp, tmp164
	movq	8(%rax), %rax	# exp_21(D)->common.type, D.25887
	movq	32(%rax), %rax	# _25->type.size, D.25887
	movzbl	16(%rax), %eax	# _26->common.code, D.25888
	cmpb	$25, %al	#, D.25888
	je	.L1007	#,
	.loc 1 5559 0
	movq	-48(%rbp), %rax	# exp, tmp165
	movq	8(%rax), %rax	# exp_21(D)->common.type, D.25887
	movzbl	16(%rax), %eax	# _28->common.code, D.25888
	cmpb	$18, %al	#, D.25888
	jne	.L1008	#,
	.loc 1 5560 0
	movq	-48(%rbp), %rax	# exp, tmp166
	movq	8(%rax), %rax	# exp_21(D)->common.type, D.25887
	movq	112(%rax), %rax	# _30->type.maxval, D.25887
	testq	%rax, %rax	# D.25887
	je	.L1008	#,
	.loc 1 5561 0
	movq	-48(%rbp), %rax	# exp, tmp167
	movq	8(%rax), %rax	# exp_21(D)->common.type, D.25887
	movq	112(%rax), %rax	# _32->type.maxval, D.25887
	movzbl	16(%rax), %eax	# _33->common.code, D.25888
	cmpb	$25, %al	#, D.25888
	je	.L1007	#,
.L1008:
	.loc 1 5563 0
	movq	-40(%rbp), %rax	# x, tmp168
	movzbl	2(%rax), %eax	# x_19(D)->mode, D.25888
	cmpb	$51, %al	#, D.25888
	je	.L1006	#,
.L1007:
	.loc 1 5565 0
	movq	-40(%rbp), %rax	# x, tmp169
	movzwl	(%rax), %eax	# x_19(D)->code, D.25889
	cmpw	$66, %ax	#, D.25889
	jne	.L1009	#,
	.loc 1 5566 0
	movq	-40(%rbp), %rax	# x, tmp170
	movq	8(%rax), %rdx	# x_19(D)->fld[0].rtx, D.25890
	movq	global_rtl+72(%rip), %rax	# global_rtl, D.25890
	cmpq	%rax, %rdx	# D.25890, D.25890
	je	.L1006	#,
	.loc 1 5567 0
	movq	-40(%rbp), %rax	# x, tmp171
	movq	8(%rax), %rax	# x_19(D)->fld[0].rtx, D.25890
	movzwl	(%rax), %eax	# _39->code, D.25889
	cmpw	$75, %ax	#, D.25889
	jne	.L1009	#,
	.loc 1 5568 0
	movq	-40(%rbp), %rax	# x, tmp172
	movq	8(%rax), %rax	# x_19(D)->fld[0].rtx, D.25890
	movq	8(%rax), %rdx	# _41->fld[0].rtx, D.25890
	movq	global_rtl+72(%rip), %rax	# global_rtl, D.25890
	cmpq	%rax, %rdx	# D.25890, D.25890
	jne	.L1009	#,
.L1006:
	.loc 1 5569 0
	movl	$1, %eax	#, D.25886
	jmp	.L1010	#
.L1009:
	.loc 1 5573 0
	movq	-40(%rbp), %rax	# x, tmp173
	movzwl	(%rax), %eax	# x_19(D)->code, D.25889
	cmpw	$63, %ax	#, D.25889
	jne	.L1011	#,
	.loc 1 5575 0
	movq	-40(%rbp), %rax	# x, tmp174
	movq	8(%rax), %rax	# x_19(D)->fld[0].rtx, tmp175
	movq	%rax, -40(%rbp)	# tmp175, x
	.loc 1 5576 0
	movq	-40(%rbp), %rax	# x, tmp176
	movzwl	(%rax), %eax	# x_45->code, D.25889
	cmpw	$61, %ax	#, D.25889
	jne	.L1011	#,
	.loc 1 5576 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp177
	movl	8(%rax), %eax	# x_45->fld[0].rtuint, D.25891
	cmpl	$52, %eax	#, D.25891
	ja	.L1011	#,
	.loc 1 5577 0 is_stmt 1
	movl	$0, %eax	#, D.25886
	jmp	.L1010	#
.L1011:
	.loc 1 5589 0
	cmpl	$0, -52(%rbp)	#, top_p
	je	.L1012	#,
.LBB91:
	.loc 1 5594 0
	movq	$0, save_expr_list.14936(%rip)	#, save_expr_list
	.loc 1 5596 0
	movq	-48(%rbp), %rcx	# exp, tmp178
	movq	-40(%rbp), %rax	# x, tmp179
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp178,
	movq	%rax, %rdi	# tmp179,
	call	safe_from_p	#
	movl	%eax, -24(%rbp)	# tmp180, rtn
	.loc 1 5598 0
	movq	save_expr_list.14936(%rip), %rax	# save_expr_list, tmp181
	movq	%rax, -8(%rbp)	# tmp181, t
	jmp	.L1013	#
.L1014:
	.loc 1 5599 0 discriminator 2
	movq	-8(%rbp), %rax	# t, tmp182
	movq	24(%rax), %rax	# t_8->list.purpose, D.25887
	movzbl	18(%rax), %edx	#, tmp185
	andl	$-17, %edx	#, tmp186
	movb	%dl, 18(%rax)	# tmp186,
	.loc 1 5598 0 discriminator 2
	movq	-8(%rbp), %rax	# t, tmp187
	movq	(%rax), %rax	# t_8->common.chain, tmp188
	movq	%rax, -8(%rbp)	# tmp188, t
.L1013:
	.loc 1 5598 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, t
	jne	.L1014	#,
	.loc 1 5601 0 is_stmt 1
	movl	-24(%rbp), %eax	# rtn, D.25886
	jmp	.L1010	#
.L1012:
.LBE91:
	.loc 1 5605 0
	movq	-48(%rbp), %rax	# exp, tmp189
	movzbl	16(%rax), %eax	# exp_21(D)->common.code, D.25888
	movzbl	%al, %eax	# D.25888, D.25886
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25892
	movsbl	%al, %eax	# D.25892, D.25886
	subl	$49, %eax	#, tmp191
	cmpl	$71, %eax	#, tmp191
	ja	.L1015	#,
	movl	%eax, %eax	# tmp191, tmp192
	movq	.L1017(,%rax,8), %rax	#, tmp193
	jmp	*%rax	# tmp193
	.section	.rodata
	.align 8
	.align 4
.L1017:
	.quad	.L1016
	.quad	.L1018
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1018
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1019
	.quad	.L1020
	.quad	.L1021
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1021
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1015
	.quad	.L1022
	.text
.L1020:
	.loc 1 5608 0
	movq	-48(%rbp), %rax	# exp, tmp194
	movq	144(%rax), %rax	# exp_21(D)->decl.rtl, D.25890
	testq	%rax, %rax	# D.25890
	je	.L1023	#,
	.loc 1 5608 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# exp, tmp195
	movq	144(%rax), %rax	# exp_21(D)->decl.rtl, D.25890
	testq	%rax, %rax	# D.25890
	je	.L1024	#,
	movq	-48(%rbp), %rax	# exp, tmp196
	movq	144(%rax), %rax	# exp_21(D)->decl.rtl, iftmp.522
	jmp	.L1026	#
.L1024:
	.loc 1 5608 0 discriminator 2
	movq	-48(%rbp), %rax	# exp, tmp197
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp197,
	call	make_decl_rtl	#
	movq	-48(%rbp), %rax	# exp, tmp198
	movq	144(%rax), %rax	# exp_21(D)->decl.rtl, iftmp.522
	jmp	.L1026	#
.L1023:
	movl	$0, %eax	#, iftmp.521
.L1026:
	.loc 1 5608 0 discriminator 3
	movq	%rax, -16(%rbp)	# iftmp.521, exp_rtl
	.loc 1 5609 0 is_stmt 1 discriminator 3
	jmp	.L1015	#
.L1019:
	.loc 1 5612 0
	movl	$1, %eax	#, D.25886
	jmp	.L1010	#
.L1022:
	.loc 1 5615 0
	movq	-48(%rbp), %rax	# exp, tmp199
	movzbl	16(%rax), %eax	# exp_21(D)->common.code, D.25888
	cmpb	$2, %al	#, D.25888
	jne	.L1027	#,
	.loc 1 5616 0
	movq	-48(%rbp), %rax	# exp, tmp200
	movq	32(%rax), %rax	# exp_21(D)->list.value, D.25887
	.loc 1 5618 0
	testq	%rax, %rax	# D.25887
	je	.L1028	#,
	.loc 1 5617 0
	movq	-48(%rbp), %rax	# exp, tmp201
	movq	32(%rax), %rcx	# exp_21(D)->list.value, D.25887
	movq	-40(%rbp), %rax	# x, tmp202
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25887,
	movq	%rax, %rdi	# tmp202,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25886
	je	.L1029	#,
.L1028:
	.loc 1 5618 0 discriminator 1
	movq	-48(%rbp), %rax	# exp, tmp203
	movq	(%rax), %rax	# exp_21(D)->common.chain, D.25887
	testq	%rax, %rax	# D.25887
	je	.L1030	#,
	.loc 1 5619 0
	movq	-48(%rbp), %rax	# exp, tmp204
	movq	(%rax), %rcx	# exp_21(D)->common.chain, D.25887
	movq	-40(%rbp), %rax	# x, tmp205
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25887,
	movq	%rax, %rdi	# tmp205,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25886
	je	.L1029	#,
.L1030:
	.loc 1 5618 0 discriminator 2
	movl	$1, %eax	#, iftmp.523
	jmp	.L1031	#
.L1029:
	.loc 1 5618 0 is_stmt 0
	movl	$0, %eax	#, iftmp.523
.L1031:
	.loc 1 5616 0 is_stmt 1
	jmp	.L1010	#
.L1027:
	.loc 1 5620 0
	movq	-48(%rbp), %rax	# exp, tmp206
	movzbl	16(%rax), %eax	# exp_21(D)->common.code, D.25888
	testb	%al, %al	# D.25888
	jne	.L1032	#,
	.loc 1 5621 0
	movl	$1, %eax	#, D.25886
	jmp	.L1010	#
.L1032:
	.loc 1 5623 0
	movl	$0, %eax	#, D.25886
	jmp	.L1010	#
.L1016:
	.loc 1 5626 0
	movq	-48(%rbp), %rax	# exp, tmp207
	movq	32(%rax), %rcx	# exp_21(D)->exp.operands, D.25887
	movq	-40(%rbp), %rax	# x, tmp208
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25887,
	movq	%rax, %rdi	# tmp208,
	call	safe_from_p	#
	jmp	.L1010	#
.L1018:
	.loc 1 5630 0
	movq	-48(%rbp), %rax	# exp, tmp209
	movq	32(%rax), %rcx	# exp_21(D)->exp.operands, D.25887
	movq	-40(%rbp), %rax	# x, tmp210
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25887,
	movq	%rax, %rdi	# tmp210,
	call	safe_from_p	#
	.loc 1 5631 0
	testl	%eax, %eax	# D.25886
	je	.L1033	#,
	.loc 1 5631 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# exp, tmp211
	movq	40(%rax), %rcx	# exp_21(D)->exp.operands, D.25887
	movq	-40(%rbp), %rax	# x, tmp212
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25887,
	movq	%rax, %rdi	# tmp212,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25886
	je	.L1033	#,
	.loc 1 5631 0 discriminator 3
	movl	$1, %eax	#, iftmp.524
	jmp	.L1034	#
.L1033:
	.loc 1 5631 0 discriminator 2
	movl	$0, %eax	#, iftmp.524
.L1034:
	.loc 1 5630 0 is_stmt 1
	jmp	.L1010	#
.L1021:
	.loc 1 5640 0
	movq	-48(%rbp), %rax	# exp, tmp213
	movzbl	16(%rax), %eax	# exp_21(D)->common.code, D.25888
	movzbl	%al, %eax	# D.25888, D.25891
	subl	$41, %eax	#, tmp214
	cmpl	$80, %eax	#, tmp214
	ja	.L1075	#,
	movl	%eax, %eax	# tmp214, tmp215
	movq	.L1037(,%rax,8), %rax	#, tmp216
	jmp	*%rax	# tmp216
	.section	.rodata
	.align 8
	.align 4
.L1037:
	.quad	.L1036
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1038
	.quad	.L1039
	.quad	.L1040
	.quad	.L1041
	.quad	.L1042
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1075
	.quad	.L1043
	.quad	.L1075
	.quad	.L1044
	.quad	.L1045
	.text
.L1045:
	.loc 1 5645 0
	movq	-48(%rbp), %rax	# exp, tmp217
	movq	32(%rax), %rax	# exp_21(D)->exp.operands, D.25887
	movq	%rax, %rdi	# D.25887,
	call	staticp	#
	testl	%eax, %eax	# D.25886
	jne	.L1046	#,
	.loc 1 5646 0
	movq	-48(%rbp), %rax	# exp, tmp218
	movzbl	18(%rax), %eax	# *exp_21(D), D.25888
	andl	$4, %eax	#, D.25888
	testb	%al, %al	# D.25888
	jne	.L1046	#,
	.loc 1 5647 0
	movq	-48(%rbp), %rax	# exp, tmp219
	movq	32(%rax), %rcx	# exp_21(D)->exp.operands, D.25887
	movq	-40(%rbp), %rax	# x, tmp220
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25887,
	movq	%rax, %rdi	# tmp220,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25886
	je	.L1047	#,
.L1046:
	.loc 1 5648 0
	movl	$1, %eax	#, D.25886
	jmp	.L1010	#
.L1047:
	.loc 1 5653 0
	movq	-48(%rbp), %rax	# exp, tmp221
	movq	32(%rax), %rax	# exp_21(D)->exp.operands, tmp222
	movq	%rax, -48(%rbp)	# tmp222, exp
	.loc 1 5654 0
	movq	-48(%rbp), %rax	# exp, tmp223
	movzbl	16(%rax), %eax	# exp_96->common.code, D.25888
	movzbl	%al, %eax	# D.25888, D.25886
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25892
	cmpb	$100, %al	#, D.25892
	jne	.L1048	#,
	.loc 1 5656 0
	movq	-48(%rbp), %rax	# exp, tmp225
	movq	144(%rax), %rax	# exp_96->decl.rtl, D.25890
	testq	%rax, %rax	# D.25890
	je	.L1049	#,
	.loc 1 5657 0
	movq	-48(%rbp), %rax	# exp, tmp226
	movq	144(%rax), %rax	# exp_96->decl.rtl, D.25890
	testq	%rax, %rax	# D.25890
	je	.L1050	#,
	.loc 1 5657 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# exp, tmp227
	movq	144(%rax), %rax	# exp_96->decl.rtl, iftmp.525
	jmp	.L1051	#
.L1050:
	.loc 1 5657 0 discriminator 2
	movq	-48(%rbp), %rax	# exp, tmp228
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp228,
	call	make_decl_rtl	#
	movq	-48(%rbp), %rax	# exp, tmp229
	movq	144(%rax), %rax	# exp_96->decl.rtl, iftmp.525
.L1051:
	.loc 1 5657 0 discriminator 3
	movzwl	(%rax), %eax	# iftmp.525_14->code, D.25889
	cmpw	$66, %ax	#, D.25889
	je	.L1052	#,
.L1049:
	.loc 1 5658 0 is_stmt 1
	movl	$0, %eax	#, D.25886
	jmp	.L1010	#
.L1052:
	.loc 1 5660 0
	movq	-48(%rbp), %rax	# exp, tmp230
	movq	144(%rax), %rax	# exp_96->decl.rtl, D.25890
	testq	%rax, %rax	# D.25890
	je	.L1053	#,
	.loc 1 5660 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# exp, tmp231
	movq	144(%rax), %rax	# exp_96->decl.rtl, iftmp.526
	jmp	.L1054	#
.L1053:
	.loc 1 5660 0 discriminator 2
	movq	-48(%rbp), %rax	# exp, tmp232
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp232,
	call	make_decl_rtl	#
	movq	-48(%rbp), %rax	# exp, tmp233
	movq	144(%rax), %rax	# exp_96->decl.rtl, iftmp.526
.L1054:
	.loc 1 5660 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.526_15->fld[0].rtx, tmp234
	movq	%rax, -16(%rbp)	# tmp234, exp_rtl
	.loc 1 5662 0 is_stmt 1 discriminator 3
	jmp	.L1055	#
.L1048:
	.loc 1 5662 0 is_stmt 0
	jmp	.L1055	#
.L1036:
	.loc 1 5665 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp235
	movzwl	(%rax), %eax	# x_1->code, D.25889
	cmpw	$66, %ax	#, D.25889
	jne	.L1056	#,
	.loc 1 5666 0
	movq	-48(%rbp), %rax	# exp, tmp236
	movq	%rax, %rdi	# tmp236,
	call	get_alias_set	#
	movq	%rax, %rdx	#, D.25893
	movq	-40(%rbp), %rax	# x, tmp237
	movq	16(%rax), %rax	# x_1->fld[1].rtmem, D.25894
	testq	%rax, %rax	# D.25894
	je	.L1057	#,
	.loc 1 5666 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp238
	movq	16(%rax), %rax	# x_1->fld[1].rtmem, D.25894
	movq	(%rax), %rax	# _114->alias, iftmp.527
	jmp	.L1058	#
.L1057:
	.loc 1 5666 0 discriminator 2
	movl	$0, %eax	#, iftmp.527
.L1058:
	.loc 1 5666 0 discriminator 3
	movq	%rdx, %rsi	# D.25893,
	movq	%rax, %rdi	# iftmp.527,
	call	alias_sets_conflict_p	#
	testl	%eax, %eax	# D.25886
	je	.L1056	#,
	.loc 1 5668 0 is_stmt 1
	movl	$0, %eax	#, D.25886
	jmp	.L1010	#
.L1056:
	.loc 1 5669 0
	jmp	.L1055	#
.L1039:
	.loc 1 5674 0
	movq	-40(%rbp), %rax	# x, tmp239
	movzwl	(%rax), %eax	# x_1->code, D.25889
	cmpw	$61, %ax	#, D.25889
	jne	.L1059	#,
	.loc 1 5674 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp240
	movl	8(%rax), %eax	# x_1->fld[0].rtuint, D.25891
	cmpl	$52, %eax	#, D.25891
	jbe	.L1060	#,
.L1059:
	.loc 1 5675 0 is_stmt 1
	movq	-40(%rbp), %rax	# x, tmp241
	movzwl	(%rax), %eax	# x_1->code, D.25889
	cmpw	$66, %ax	#, D.25889
	jne	.L1061	#,
.L1060:
	.loc 1 5676 0
	movl	$0, %eax	#, D.25886
	jmp	.L1010	#
.L1061:
	.loc 1 5677 0
	jmp	.L1055	#
.L1044:
	.loc 1 5683 0
	movq	-48(%rbp), %rax	# exp, tmp242
	addq	$32, %rax	#, D.25895
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_123], D.25890
	testq	%rax, %rax	# D.25890
	je	.L1062	#,
	.loc 1 5684 0
	movl	$0, %eax	#, D.25886
	jmp	.L1010	#
.L1062:
	.loc 1 5686 0
	movq	-48(%rbp), %rax	# exp, tmp243
	movq	40(%rax), %rax	# exp_21(D)->exp.operands, tmp244
	movq	%rax, -16(%rbp)	# tmp244, exp_rtl
	.loc 1 5687 0
	jmp	.L1055	#
.L1041:
	.loc 1 5690 0
	movq	-48(%rbp), %rax	# exp, tmp245
	movq	48(%rax), %rax	# exp_21(D)->exp.operands, tmp246
	movq	%rax, -16(%rbp)	# tmp246, exp_rtl
	.loc 1 5691 0
	jmp	.L1055	#
.L1042:
	.loc 1 5694 0
	movq	-48(%rbp), %rax	# exp, tmp247
	movq	32(%rax), %rcx	# exp_21(D)->exp.operands, D.25887
	movq	-40(%rbp), %rax	# x, tmp248
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25887,
	movq	%rax, %rdi	# tmp248,
	call	safe_from_p	#
	jmp	.L1010	#
.L1043:
	.loc 1 5697 0
	movq	-48(%rbp), %rax	# exp, tmp249
	movq	48(%rax), %rax	# exp_21(D)->exp.operands, tmp250
	movq	%rax, -16(%rbp)	# tmp250, exp_rtl
	.loc 1 5698 0
	cmpq	$0, -16(%rbp)	#, exp_rtl
	je	.L1063	#,
	.loc 1 5699 0
	jmp	.L1055	#
.L1063:
	.loc 1 5704 0
	movq	-48(%rbp), %rax	# exp, tmp251
	movzbl	18(%rax), %eax	# *exp_21(D), D.25888
	andl	$16, %eax	#, D.25888
	testb	%al, %al	# D.25888
	je	.L1064	#,
	.loc 1 5705 0
	movl	$1, %eax	#, D.25886
	jmp	.L1010	#
.L1064:
	.loc 1 5707 0
	movq	-48(%rbp), %rax	# exp, tmp252
	movzbl	18(%rax), %edx	#, tmp255
	orl	$16, %edx	#, tmp256
	movb	%dl, 18(%rax)	# tmp256,
	.loc 1 5708 0
	movq	-48(%rbp), %rax	# exp, tmp257
	movq	32(%rax), %rcx	# exp_21(D)->exp.operands, D.25887
	movq	-40(%rbp), %rax	# x, tmp258
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25887,
	movq	%rax, %rdi	# tmp258,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25886
	jne	.L1065	#,
	.loc 1 5710 0
	movq	-48(%rbp), %rax	# exp, tmp259
	movzbl	18(%rax), %edx	#, tmp262
	andl	$-17, %edx	#, tmp263
	movb	%dl, 18(%rax)	# tmp263,
	.loc 1 5711 0
	movl	$0, %eax	#, D.25886
	jmp	.L1010	#
.L1065:
	.loc 1 5714 0
	movq	save_expr_list.14936(%rip), %rdx	# save_expr_list, save_expr_list.528
	movq	-48(%rbp), %rax	# exp, tmp264
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp264,
	call	tree_cons	#
	movq	%rax, save_expr_list.14936(%rip)	# save_expr_list.529, save_expr_list
	.loc 1 5715 0
	movl	$1, %eax	#, D.25886
	jmp	.L1010	#
.L1038:
	.loc 1 5720 0
	movq	-48(%rbp), %rax	# exp, tmp265
	movq	40(%rax), %rcx	# exp_21(D)->exp.operands, D.25887
	movq	-40(%rbp), %rax	# x, tmp266
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25887,
	movq	%rax, %rdi	# tmp266,
	call	safe_from_p	#
	jmp	.L1010	#
.L1040:
	.loc 1 5724 0
	movl	$__FUNCTION__.14961, %edx	#,
	movl	$5724, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1075:
	.loc 1 5727 0
	nop
.L1055:
	.loc 1 5731 0
	cmpq	$0, -16(%rbp)	#, exp_rtl
	je	.L1066	#,
	.loc 1 5732 0
	jmp	.L1015	#
.L1066:
	.loc 1 5734 0
	movq	-48(%rbp), %rax	# exp, tmp267
	movzbl	16(%rax), %eax	# exp_2->common.code, D.25888
	movzbl	%al, %eax	# D.25888, D.25896
	movl	%eax, %edi	# D.25896,
	call	first_rtl_op	#
	movl	%eax, -20(%rbp)	# tmp268, nops
	.loc 1 5735 0
	movl	$0, -28(%rbp)	#, i
	jmp	.L1067	#
.L1069:
	.loc 1 5736 0
	movq	-48(%rbp), %rax	# exp, tmp269
	movl	-28(%rbp), %edx	# i, tmp271
	movslq	%edx, %rdx	# tmp271, tmp270
	addq	$4, %rdx	#, tmp272
	movq	(%rax,%rdx,8), %rax	# exp_2->exp.operands, D.25887
	testq	%rax, %rax	# D.25887
	je	.L1068	#,
	.loc 1 5737 0
	movq	-48(%rbp), %rax	# exp, tmp273
	movl	-28(%rbp), %edx	# i, tmp275
	movslq	%edx, %rdx	# tmp275, tmp274
	addq	$4, %rdx	#, tmp276
	movq	(%rax,%rdx,8), %rcx	# exp_2->exp.operands, D.25887
	movq	-40(%rbp), %rax	# x, tmp277
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25887,
	movq	%rax, %rdi	# tmp277,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25886
	jne	.L1068	#,
	.loc 1 5738 0
	movl	$0, %eax	#, D.25886
	jmp	.L1010	#
.L1068:
	.loc 1 5735 0
	addl	$1, -28(%rbp)	#, i
.L1067:
	.loc 1 5735 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# i, tmp278
	cmpl	-20(%rbp), %eax	# nops, tmp278
	jl	.L1069	#,
	.loc 1 5742 0 is_stmt 1
	movq	-48(%rbp), %rax	# exp, tmp279
	movzbl	16(%rax), %eax	# exp_2->common.code, D.25888
	cmpb	$-110, %al	#, D.25888
	jbe	.L1015	#,
	.loc 1 5744 0
	movq	lang_hooks+80(%rip), %rax	# lang_hooks.safe_from_p, D.25897
	movq	-48(%rbp), %rcx	# exp, tmp280
	movq	-40(%rbp), %rdx	# x, tmp281
	movq	%rcx, %rsi	# tmp280,
	movq	%rdx, %rdi	# tmp281,
	call	*%rax	# D.25897
	testl	%eax, %eax	# D.25886
	jne	.L1015	#,
	.loc 1 5745 0
	movl	$0, %eax	#, D.25886
	jmp	.L1010	#
.L1015:
	.loc 1 5750 0
	cmpq	$0, -16(%rbp)	#, exp_rtl
	je	.L1070	#,
	.loc 1 5752 0
	movq	-16(%rbp), %rax	# exp_rtl, tmp282
	movzwl	(%rax), %eax	# exp_rtl_5->code, D.25889
	cmpw	$63, %ax	#, D.25889
	jne	.L1071	#,
	.loc 1 5754 0
	movq	-16(%rbp), %rax	# exp_rtl, tmp283
	movq	8(%rax), %rax	# exp_rtl_5->fld[0].rtx, tmp284
	movq	%rax, -16(%rbp)	# tmp284, exp_rtl
	.loc 1 5755 0
	movq	-16(%rbp), %rax	# exp_rtl, tmp285
	movzwl	(%rax), %eax	# exp_rtl_156->code, D.25889
	cmpw	$61, %ax	#, D.25889
	jne	.L1071	#,
	.loc 1 5756 0
	movq	-16(%rbp), %rax	# exp_rtl, tmp286
	movl	8(%rax), %eax	# exp_rtl_156->fld[0].rtuint, D.25891
	cmpl	$52, %eax	#, D.25891
	ja	.L1071	#,
	.loc 1 5757 0
	movl	$0, %eax	#, D.25886
	jmp	.L1010	#
.L1071:
	.loc 1 5762 0
	movq	-16(%rbp), %rdx	# exp_rtl, tmp287
	movq	-40(%rbp), %rax	# x, tmp288
	movq	%rdx, %rsi	# tmp287,
	movq	%rax, %rdi	# tmp288,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.25886
	jne	.L1072	#,
	.loc 1 5763 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp289
	movzwl	(%rax), %eax	# x_1->code, D.25889
	.loc 1 5762 0 discriminator 1
	cmpw	$66, %ax	#, D.25889
	jne	.L1073	#,
	.loc 1 5763 0
	movq	-16(%rbp), %rax	# exp_rtl, tmp290
	movzwl	(%rax), %eax	# exp_rtl_6->code, D.25889
	cmpw	$66, %ax	#, D.25889
	jne	.L1073	#,
	.loc 1 5764 0
	movq	-40(%rbp), %rdx	# x, tmp291
	movq	-16(%rbp), %rax	# exp_rtl, tmp292
	movl	$rtx_addr_varies_p, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp292,
	call	true_dependence	#
	testl	%eax, %eax	# D.25886
	jne	.L1072	#,
.L1073:
	.loc 1 5762 0 discriminator 3
	movl	$1, %eax	#, iftmp.530
	jmp	.L1074	#
.L1072:
	.loc 1 5762 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.530
.L1074:
	.loc 1 5762 0 discriminator 4
	jmp	.L1010	#
.L1070:
	.loc 1 5769 0 is_stmt 1
	movl	$1, %eax	#, D.25886
.L1010:
	.loc 1 5770 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE49:
	.size	safe_from_p, .-safe_from_p
	.type	var_rtx, @function
var_rtx:
.LFB50:
	.loc 1 5778 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# exp, exp
	.loc 1 5779 0
	jmp	.L1077	#
.L1080:
	.loc 1 5779 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# exp, tmp75
	movq	32(%rax), %rax	# exp_1->exp.operands, tmp76
	movq	%rax, -8(%rbp)	# tmp76, exp
.L1077:
	movq	-8(%rbp), %rax	# exp, tmp77
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25899
	cmpb	$115, %al	#, D.25899
	je	.L1078	#,
	.loc 1 5779 0 discriminator 3
	movq	-8(%rbp), %rax	# exp, tmp78
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25899
	cmpb	$114, %al	#, D.25899
	je	.L1078	#,
	.loc 1 5779 0 discriminator 1
	movq	-8(%rbp), %rax	# exp, tmp79
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25899
	cmpb	$116, %al	#, D.25899
	jne	.L1079	#,
.L1078:
	.loc 1 5779 0 discriminator 2
	movq	-8(%rbp), %rax	# exp, tmp80
	movq	32(%rax), %rdx	# exp_1->exp.operands, D.25900
	movq	global_trees(%rip), %rax	# global_trees, D.25900
	cmpq	%rax, %rdx	# D.25900, D.25900
	je	.L1079	#,
	.loc 1 5779 0 discriminator 1
	movq	-8(%rbp), %rax	# exp, tmp81
	movq	8(%rax), %rax	# exp_1->common.type, D.25900
	movzbl	61(%rax), %eax	# *_10, tmp84
	shrb	%al	# D.25901
	movl	%eax, %edx	# D.25901, D.25901
	movq	-8(%rbp), %rax	# exp, tmp85
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25900
	movq	8(%rax), %rax	# _12->common.type, D.25900
	movzbl	61(%rax), %eax	# *_13, tmp88
	shrb	%al	# D.25901
	cmpb	%al, %dl	# D.25901, D.25901
	je	.L1080	#,
.L1079:
	.loc 1 5780 0 is_stmt 1
	movq	-8(%rbp), %rax	# exp, tmp89
	movzbl	16(%rax), %eax	# exp_1->common.code, D.25899
	movzbl	%al, %eax	# D.25899, D.25902
	subl	$34, %eax	#, tmp90
	cmpl	$1, %eax	#, tmp90
	ja	.L1081	#,
	.loc 1 5784 0
	movq	-8(%rbp), %rax	# exp, tmp91
	movq	144(%rax), %rax	# exp_1->decl.rtl, D.25903
	testq	%rax, %rax	# D.25903
	je	.L1083	#,
	.loc 1 5784 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# exp, tmp92
	movq	144(%rax), %rax	# exp_1->decl.rtl, iftmp.531
	jmp	.L1084	#
.L1083:
	.loc 1 5784 0 discriminator 2
	movq	-8(%rbp), %rax	# exp, tmp93
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp93,
	call	make_decl_rtl	#
	movq	-8(%rbp), %rax	# exp, tmp94
	movq	144(%rax), %rax	# exp_1->decl.rtl, iftmp.531
.L1084:
	.loc 1 5784 0 discriminator 3
	jmp	.L1085	#
.L1081:
	.loc 1 5786 0 is_stmt 1
	movl	$0, %eax	#, D.25898
.L1085:
	.loc 1 5788 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE50:
	.size	var_rtx, .-var_rtx
	.type	highest_pow2_factor, @function
highest_pow2_factor:
.LFB51:
	.loc 1 5851 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# exp, exp
	.loc 1 5854 0
	movq	-24(%rbp), %rax	# exp, tmp83
	movzbl	16(%rax), %eax	# exp_3(D)->common.code, D.25905
	movzbl	%al, %eax	# D.25905, D.25906
	subl	$25, %eax	#, tmp84
	cmpl	$93, %eax	#, tmp84
	ja	.L1102	#,
	movl	%eax, %eax	# tmp84, tmp85
	movq	.L1089(,%rax,8), %rax	#, tmp86
	jmp	*%rax	# tmp86
	.section	.rodata
	.align 8
	.align 4
.L1089:
	.quad	.L1088
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1090
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1091
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1092
	.quad	.L1093
	.quad	.L1093
	.quad	.L1094
	.quad	.L1095
	.quad	.L1095
	.quad	.L1095
	.quad	.L1095
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1093
	.quad	.L1093
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1102
	.quad	.L1092
	.quad	.L1092
	.quad	.L1092
	.quad	.L1102
	.quad	.L1092
	.text
.L1088:
	.loc 1 5863 0
	movq	-24(%rbp), %rax	# exp, tmp87
	movzbl	18(%rax), %eax	# *exp_3(D), D.25905
	andl	$4, %eax	#, D.25905
	testb	%al, %al	# D.25905
	je	.L1096	#,
	.loc 1 5864 0
	movl	$128, %eax	#, D.25904
	jmp	.L1097	#
.L1096:
	.loc 1 5869 0
	movq	-24(%rbp), %rax	# exp, tmp88
	movq	32(%rax), %rax	# exp_3(D)->int_cst.int_cst.low, D.25907
	movq	%rax, -16(%rbp)	# D.25907, c0
	.loc 1 5870 0
	movq	-16(%rbp), %rax	# c0, tmp89
	negq	%rax	# D.25904
	andq	%rax, -16(%rbp)	# D.25904, c0
	.loc 1 5871 0
	cmpq	$0, -16(%rbp)	#, c0
	je	.L1098	#,
	.loc 1 5871 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# c0, iftmp.532
	jmp	.L1099	#
.L1098:
	.loc 1 5871 0 discriminator 2
	movl	$128, %eax	#, iftmp.532
.L1099:
	.loc 1 5871 0 discriminator 3
	jmp	.L1097	#
.L1093:
	.loc 1 5876 0 is_stmt 1
	movq	-24(%rbp), %rax	# exp, tmp90
	movq	32(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movq	%rax, %rdi	# D.25908,
	call	highest_pow2_factor	#
	movq	%rax, -16(%rbp)	# tmp91, c0
	.loc 1 5877 0
	movq	-24(%rbp), %rax	# exp, tmp92
	movq	40(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movq	%rax, %rdi	# D.25908,
	call	highest_pow2_factor	#
	movq	%rax, -8(%rbp)	# tmp93, c1
	.loc 1 5878 0
	movq	-16(%rbp), %rax	# c0, tmp94
	cmpq	%rax, -8(%rbp)	# tmp94, c1
	cmovle	-8(%rbp), %rax	# c1,, D.25904
	jmp	.L1097	#
.L1094:
	.loc 1 5881 0
	movq	-24(%rbp), %rax	# exp, tmp95
	movq	32(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movq	%rax, %rdi	# D.25908,
	call	highest_pow2_factor	#
	movq	%rax, -16(%rbp)	# tmp96, c0
	.loc 1 5882 0
	movq	-24(%rbp), %rax	# exp, tmp97
	movq	40(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movq	%rax, %rdi	# D.25908,
	call	highest_pow2_factor	#
	movq	%rax, -8(%rbp)	# tmp98, c1
	.loc 1 5883 0
	movq	-16(%rbp), %rax	# c0, tmp99
	imulq	-8(%rbp), %rax	# c1, D.25904
	jmp	.L1097	#
.L1095:
	.loc 1 5887 0
	movq	-24(%rbp), %rax	# exp, tmp100
	movq	40(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movq	%rax, %rdi	# D.25908,
	call	integer_pow2p	#
	testl	%eax, %eax	# D.25909
	je	.L1100	#,
	.loc 1 5888 0
	movq	-24(%rbp), %rax	# exp, tmp101
	movq	40(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25908,
	call	host_integerp	#
	testl	%eax, %eax	# D.25909
	je	.L1100	#,
	.loc 1 5890 0
	movq	-24(%rbp), %rax	# exp, tmp102
	movq	32(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movq	%rax, %rdi	# D.25908,
	call	highest_pow2_factor	#
	movq	%rax, -16(%rbp)	# tmp103, c0
	.loc 1 5891 0
	movq	-24(%rbp), %rax	# exp, tmp104
	movq	40(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25908,
	call	tree_low_cst	#
	movq	%rax, -8(%rbp)	# tmp105, c1
	.loc 1 5892 0
	movq	-16(%rbp), %rax	# c0, tmp108
	cqto
	idivq	-8(%rbp)	# c1
	movl	$1, %edx	#, tmp109
	testq	%rax, %rax	# D.25904
	cmovle	%rdx, %rax	# D.25904,, tmp109, D.25904
	jmp	.L1097	#
.L1100:
	.loc 1 5894 0
	jmp	.L1101	#
.L1092:
	.loc 1 5898 0
	movq	-24(%rbp), %rax	# exp, tmp110
	movq	32(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movq	%rax, %rdi	# D.25908,
	call	highest_pow2_factor	#
	jmp	.L1097	#
.L1090:
	.loc 1 5901 0
	movq	-24(%rbp), %rax	# exp, tmp111
	movq	40(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movq	%rax, %rdi	# D.25908,
	call	highest_pow2_factor	#
	jmp	.L1097	#
.L1091:
	.loc 1 5904 0
	movq	-24(%rbp), %rax	# exp, tmp112
	movq	40(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movq	%rax, %rdi	# D.25908,
	call	highest_pow2_factor	#
	movq	%rax, -16(%rbp)	# tmp113, c0
	.loc 1 5905 0
	movq	-24(%rbp), %rax	# exp, tmp114
	movq	48(%rax), %rax	# exp_3(D)->exp.operands, D.25908
	movq	%rax, %rdi	# D.25908,
	call	highest_pow2_factor	#
	movq	%rax, -8(%rbp)	# tmp115, c1
	.loc 1 5906 0
	movq	-16(%rbp), %rax	# c0, tmp116
	cmpq	%rax, -8(%rbp)	# tmp116, c1
	cmovle	-8(%rbp), %rax	# c1,, D.25904
	jmp	.L1097	#
.L1102:
	.loc 1 5909 0
	nop
.L1101:
	.loc 1 5912 0
	movl	$1, %eax	#, D.25904
.L1097:
	.loc 1 5913 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE51:
	.size	highest_pow2_factor, .-highest_pow2_factor
	.type	highest_pow2_factor_for_type, @function
highest_pow2_factor_for_type:
.LFB52:
	.loc 1 5922 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# type, type
	movq	%rsi, -32(%rbp)	# exp, exp
	.loc 1 5925 0
	movq	-32(%rbp), %rax	# exp, tmp63
	movq	%rax, %rdi	# tmp63,
	call	highest_pow2_factor	#
	movq	%rax, -16(%rbp)	# tmp64, factor
	.loc 1 5926 0
	movq	-24(%rbp), %rax	# type, tmp65
	movl	64(%rax), %eax	# type_3(D)->type.align, D.25913
	shrl	$3, %eax	#, D.25913
	movl	%eax, %eax	# D.25913, tmp68
	movq	%rax, -8(%rbp)	# tmp68, type_align
	.loc 1 5927 0
	movq	-16(%rbp), %rax	# factor, tmp66
	cmpq	%rax, -8(%rbp)	# tmp66, type_align
	cmovge	-8(%rbp), %rax	# type_align,, D.25914
	.loc 1 5928 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE52:
	.size	highest_pow2_factor_for_type, .-highest_pow2_factor_for_type
	.globl	find_placeholder
	.type	find_placeholder, @function
find_placeholder:
.LFB53:
	.loc 1 5942 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# exp, exp
	movq	%rsi, -48(%rbp)	# plist, plist
	.loc 1 5943 0
	movq	-40(%rbp), %rax	# exp, tmp105
	movq	8(%rax), %rax	# exp_10(D)->common.type, tmp106
	movq	%rax, -16(%rbp)	# tmp106, type
	.loc 1 5947 0
	cmpq	$0, -48(%rbp)	#, plist
	je	.L1106	#,
	.loc 1 5947 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# plist, tmp107
	movq	(%rax), %rax	# *plist_12(D), D.25916
	testq	%rax, %rax	# D.25916
	je	.L1106	#,
	movq	-48(%rbp), %rax	# plist, tmp108
	movq	(%rax), %rax	# *plist_12(D), D.25916
	movq	(%rax), %rax	# _14->common.chain, iftmp.533
	jmp	.L1107	#
.L1106:
	.loc 1 5947 0 discriminator 2
	movq	placeholder_list(%rip), %rax	# placeholder_list, iftmp.533
.L1107:
	.loc 1 5947 0 discriminator 3
	movq	%rax, -32(%rbp)	# iftmp.533, placeholder_expr
	.loc 1 5946 0 is_stmt 1 discriminator 3
	jmp	.L1108	#
.L1131:
.LBB92:
	.loc 1 5951 0
	movq	-16(%rbp), %rax	# type, tmp109
	movq	128(%rax), %rax	# type_11->type.main_variant, tmp110
	movq	%rax, -8(%rbp)	# tmp110, need_type
	.loc 1 5957 0
	movq	-32(%rbp), %rax	# placeholder_expr, tmp111
	movq	24(%rax), %rax	# placeholder_expr_1->list.purpose, tmp112
	movq	%rax, -24(%rbp)	# tmp112, elt
	jmp	.L1109	#
.L1119:
	.loc 1 5966 0
	movq	-24(%rbp), %rax	# elt, tmp113
	movq	8(%rax), %rax	# elt_2->common.type, D.25916
	movq	128(%rax), %rax	# _20->type.main_variant, D.25916
	cmpq	-8(%rbp), %rax	# need_type, D.25916
	jne	.L1110	#,
	.loc 1 5968 0
	cmpq	$0, -48(%rbp)	#, plist
	je	.L1111	#,
	.loc 1 5969 0
	movq	-48(%rbp), %rax	# plist, tmp114
	movq	-32(%rbp), %rdx	# placeholder_expr, tmp115
	movq	%rdx, (%rax)	# tmp115, *plist_12(D)
.L1111:
	.loc 1 5970 0
	movq	-24(%rbp), %rax	# elt, D.25915
	jmp	.L1112	#
.L1110:
	.loc 1 5958 0
	movq	-24(%rbp), %rax	# elt, tmp116
	movzbl	16(%rax), %eax	# elt_2->common.code, D.25917
	.loc 1 5961 0
	cmpb	$47, %al	#, D.25917
	je	.L1113	#,
	.loc 1 5959 0
	movq	-24(%rbp), %rax	# elt, tmp117
	movzbl	16(%rax), %eax	# elt_2->common.code, D.25917
	cmpb	$51, %al	#, D.25917
	jne	.L1114	#,
.L1113:
	.loc 1 5961 0 discriminator 1
	movq	-24(%rbp), %rax	# elt, tmp118
	movq	40(%rax), %rax	# elt_2->exp.operands, iftmp.534
	jmp	.L1115	#
.L1114:
	.loc 1 5961 0 is_stmt 0
	movq	-24(%rbp), %rax	# elt, tmp119
	movzbl	16(%rax), %eax	# elt_2->common.code, D.25917
	movzbl	%al, %eax	# D.25917, D.25918
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25919
	.loc 1 5965 0 is_stmt 1
	cmpb	$114, %al	#, D.25919
	je	.L1116	#,
	.loc 1 5962 0
	movq	-24(%rbp), %rax	# elt, tmp121
	movzbl	16(%rax), %eax	# elt_2->common.code, D.25917
	movzbl	%al, %eax	# D.25917, D.25918
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25919
	cmpb	$49, %al	#, D.25919
	je	.L1116	#,
	.loc 1 5963 0
	movq	-24(%rbp), %rax	# elt, tmp123
	movzbl	16(%rax), %eax	# elt_2->common.code, D.25917
	movzbl	%al, %eax	# D.25917, D.25918
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25919
	cmpb	$50, %al	#, D.25919
	je	.L1116	#,
	.loc 1 5964 0
	movq	-24(%rbp), %rax	# elt, tmp125
	movzbl	16(%rax), %eax	# elt_2->common.code, D.25917
	movzbl	%al, %eax	# D.25917, D.25918
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25919
	cmpb	$101, %al	#, D.25919
	jne	.L1117	#,
.L1116:
	.loc 1 5965 0 discriminator 1
	movq	-24(%rbp), %rax	# elt, tmp127
	movq	32(%rax), %rax	# elt_2->exp.operands, iftmp.535
	jmp	.L1115	#
.L1117:
	.loc 1 5965 0 is_stmt 0
	movl	$0, %eax	#, iftmp.535
.L1115:
	.loc 1 5958 0 is_stmt 1
	movq	%rax, -24(%rbp)	# iftmp.534, elt
.L1109:
	.loc 1 5957 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, elt
	jne	.L1119	#,
	.loc 1 5973 0
	movq	-32(%rbp), %rax	# placeholder_expr, tmp128
	movq	24(%rax), %rax	# placeholder_expr_1->list.purpose, tmp129
	movq	%rax, -24(%rbp)	# tmp129, elt
	jmp	.L1120	#
.L1130:
	.loc 1 5983 0
	movq	-24(%rbp), %rax	# elt, tmp130
	movq	8(%rax), %rax	# elt_3->common.type, D.25916
	movzbl	16(%rax), %eax	# _43->common.code, D.25917
	cmpb	$13, %al	#, D.25917
	je	.L1121	#,
	.loc 1 5983 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# elt, tmp131
	movq	8(%rax), %rax	# elt_3->common.type, D.25916
	movzbl	16(%rax), %eax	# _45->common.code, D.25917
	cmpb	$15, %al	#, D.25917
	jne	.L1122	#,
.L1121:
	.loc 1 5984 0 is_stmt 1
	movq	-24(%rbp), %rax	# elt, tmp132
	movq	8(%rax), %rax	# elt_3->common.type, D.25916
	movq	8(%rax), %rax	# _47->common.type, D.25916
	movq	128(%rax), %rax	# _48->type.main_variant, D.25916
	cmpq	-8(%rbp), %rax	# need_type, D.25916
	jne	.L1122	#,
	.loc 1 5987 0
	cmpq	$0, -48(%rbp)	#, plist
	je	.L1123	#,
	.loc 1 5988 0
	movq	-48(%rbp), %rax	# plist, tmp133
	movq	-32(%rbp), %rdx	# placeholder_expr, tmp134
	movq	%rdx, (%rax)	# tmp134, *plist_12(D)
.L1123:
	.loc 1 5989 0
	movq	-24(%rbp), %rdx	# elt, tmp135
	movq	-8(%rbp), %rax	# need_type, tmp136
	movq	%rax, %rsi	# tmp136,
	movl	$41, %edi	#,
	call	build1	#
	jmp	.L1112	#
.L1122:
	.loc 1 5975 0
	movq	-24(%rbp), %rax	# elt, tmp137
	movzbl	16(%rax), %eax	# elt_3->common.code, D.25917
	.loc 1 5978 0
	cmpb	$47, %al	#, D.25917
	je	.L1124	#,
	.loc 1 5976 0
	movq	-24(%rbp), %rax	# elt, tmp138
	movzbl	16(%rax), %eax	# elt_3->common.code, D.25917
	cmpb	$51, %al	#, D.25917
	jne	.L1125	#,
.L1124:
	.loc 1 5978 0 discriminator 1
	movq	-24(%rbp), %rax	# elt, tmp139
	movq	40(%rax), %rax	# elt_3->exp.operands, iftmp.536
	jmp	.L1126	#
.L1125:
	.loc 1 5978 0 is_stmt 0
	movq	-24(%rbp), %rax	# elt, tmp140
	movzbl	16(%rax), %eax	# elt_3->common.code, D.25917
	movzbl	%al, %eax	# D.25917, D.25918
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25919
	.loc 1 5982 0 is_stmt 1
	cmpb	$114, %al	#, D.25919
	je	.L1127	#,
	.loc 1 5979 0
	movq	-24(%rbp), %rax	# elt, tmp142
	movzbl	16(%rax), %eax	# elt_3->common.code, D.25917
	movzbl	%al, %eax	# D.25917, D.25918
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25919
	cmpb	$49, %al	#, D.25919
	je	.L1127	#,
	.loc 1 5980 0
	movq	-24(%rbp), %rax	# elt, tmp144
	movzbl	16(%rax), %eax	# elt_3->common.code, D.25917
	movzbl	%al, %eax	# D.25917, D.25918
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25919
	cmpb	$50, %al	#, D.25919
	je	.L1127	#,
	.loc 1 5981 0
	movq	-24(%rbp), %rax	# elt, tmp146
	movzbl	16(%rax), %eax	# elt_3->common.code, D.25917
	movzbl	%al, %eax	# D.25917, D.25918
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25919
	cmpb	$101, %al	#, D.25919
	jne	.L1128	#,
.L1127:
	.loc 1 5982 0 discriminator 1
	movq	-24(%rbp), %rax	# elt, tmp148
	movq	32(%rax), %rax	# elt_3->exp.operands, iftmp.537
	jmp	.L1126	#
.L1128:
	.loc 1 5982 0 is_stmt 0
	movl	$0, %eax	#, iftmp.537
.L1126:
	.loc 1 5975 0 is_stmt 1
	movq	%rax, -24(%rbp)	# iftmp.536, elt
.L1120:
	.loc 1 5973 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, elt
	jne	.L1130	#,
.LBE92:
	.loc 1 5949 0
	movq	-32(%rbp), %rax	# placeholder_expr, tmp149
	movq	(%rax), %rax	# placeholder_expr_1->common.chain, tmp150
	movq	%rax, -32(%rbp)	# tmp150, placeholder_expr
.L1108:
	.loc 1 5946 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, placeholder_expr
	jne	.L1131	#,
	.loc 1 5993 0
	movl	$0, %eax	#, D.25915
.L1112:
	.loc 1 5994 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE53:
	.size	find_placeholder, .-find_placeholder
	.section	.rodata
	.align 8
.LC5:
	.string	"prior parameter's size depends on `%s'"
	.align 8
.LC6:
	.string	"returned value in block_exit_expr"
	.text
	.globl	expand_expr
	.type	expand_expr, @function
expand_expr:
.LFB54:
	.loc 1 6037 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$976, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -952(%rbp)	# exp, exp
	movq	%rsi, -960(%rbp)	# target, target
	movl	%edx, -964(%rbp)	# tmode, tmode
	movl	%ecx, -968(%rbp)	# modifier, modifier
	.loc 1 6039 0
	movq	-952(%rbp), %rax	# exp, tmp1734
	movq	8(%rax), %rax	# exp_194(D)->common.type, tmp1735
	movq	%rax, -648(%rbp)	# tmp1735, type
	.loc 1 6040 0
	movq	-648(%rbp), %rax	# type, tmp1736
	movzbl	17(%rax), %eax	# *type_195, tmp1739
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %eax	# D.25921, unsignedp.538
	movl	%eax, -936(%rbp)	# unsignedp.538, unsignedp
	.loc 1 6042 0
	movq	-952(%rbp), %rax	# exp, tmp1740
	movzbl	16(%rax), %eax	# exp_194(D)->common.code, D.25922
	movzbl	%al, %eax	# D.25922, tmp1741
	movl	%eax, -916(%rbp)	# tmp1741, code
	.loc 1 6049 0
	movq	-952(%rbp), %rax	# exp, tmp1742
	movzbl	16(%rax), %eax	# exp_194(D)->common.code, D.25922
	testb	%al, %al	# D.25922
	je	.L1133	#,
	.loc 1 6049 0 is_stmt 0 discriminator 1
	movq	-648(%rbp), %rax	# type, tmp1743
	movzbl	16(%rax), %eax	# type_195->common.code, D.25922
	testb	%al, %al	# D.25922
	jne	.L1134	#,
.L1133:
	.loc 1 6051 0 is_stmt 1
	movl	-964(%rbp), %eax	# tmode, tmode.539
	cltq
	movq	const_tiny_rtx(,%rax,8), %rax	# const_tiny_rtx, tmp1745
	movq	%rax, -832(%rbp)	# tmp1745, op0
	.loc 1 6052 0
	cmpq	$0, -832(%rbp)	#, op0
	je	.L1135	#,
	.loc 1 6053 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1135:
	.loc 1 6054 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1134:
	.loc 1 6057 0
	movq	-648(%rbp), %rax	# type, tmp1746
	movzbl	61(%rax), %eax	# *type_195, tmp1749
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, tmp1750
	movl	%eax, -912(%rbp)	# tmp1750, mode
	.loc 1 6059 0
	movq	-960(%rbp), %rax	# target, tmp1751
	movq	%rax, %rdi	# tmp1751,
	call	get_subtarget	#
	movq	%rax, -800(%rbp)	# tmp1752, subtarget
	.loc 1 6060 0
	movq	-960(%rbp), %rax	# target, tmp1753
	movq	%rax, -640(%rbp)	# tmp1753, original_target
	.loc 1 6061 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25924
	.loc 1 6062 0
	cmpq	-960(%rbp), %rax	# target, D.25924
	je	.L1137	#,
	.loc 1 6062 0 is_stmt 0 discriminator 2
	cmpl	$116, -916(%rbp)	#, code
	je	.L1138	#,
	.loc 1 6062 0 discriminator 3
	cmpl	$115, -916(%rbp)	#, code
	je	.L1138	#,
	.loc 1 6063 0 is_stmt 1
	cmpl	$114, -916(%rbp)	#, code
	je	.L1138	#,
	.loc 1 6063 0 is_stmt 0 discriminator 1
	cmpl	$122, -916(%rbp)	#, code
	je	.L1138	#,
	.loc 1 6064 0 is_stmt 1
	cmpl	$51, -916(%rbp)	#, code
	je	.L1138	#,
	.loc 1 6064 0 is_stmt 0 discriminator 1
	cmpl	$117, -916(%rbp)	#, code
	jne	.L1139	#,
.L1138:
	.loc 1 6065 0 is_stmt 1
	movq	-648(%rbp), %rax	# type, tmp1754
	movzbl	16(%rax), %eax	# type_195->common.code, D.25922
	cmpb	$5, %al	#, D.25922
	jne	.L1139	#,
.L1137:
	.loc 1 6062 0 discriminator 1
	movl	$1, %eax	#, iftmp.540
	jmp	.L1140	#
.L1139:
	.loc 1 6062 0 is_stmt 0
	movl	$0, %eax	#, iftmp.540
.L1140:
	.loc 1 6061 0 is_stmt 1
	movl	%eax, -908(%rbp)	# iftmp.540, ignore
	.loc 1 6073 0
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1141	#,
	.loc 1 6075 0
	movq	-952(%rbp), %rax	# exp, tmp1755
	movzbl	17(%rax), %eax	# *exp_194(D), D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1142	#,
	.loc 1 6076 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1142:
	.loc 1 6080 0
	movq	-952(%rbp), %rax	# exp, tmp1756
	movzbl	17(%rax), %eax	# *exp_194(D), D.25922
	andl	$8, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1143	#,
	.loc 1 6081 0
	movq	-952(%rbp), %rax	# exp, tmp1757
	movzbl	16(%rax), %eax	# exp_194(D)->common.code, D.25922
	cmpb	$30, %al	#, D.25922
	je	.L1143	#,
	.loc 1 6082 0
	cmpl	$0, -912(%rbp)	#, mode
	je	.L1143	#,
	.loc 1 6082 0 is_stmt 0 discriminator 1
	cmpl	$51, -912(%rbp)	#, mode
	je	.L1143	#,
	.loc 1 6083 0 is_stmt 1
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1143	#,
	.loc 1 6085 0
	movl	-968(%rbp), %edx	# modifier, tmp1758
	movq	-952(%rbp), %rax	# exp, tmp1759
	movl	%edx, %ecx	# tmp1758,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1759,
	call	expand_expr	#
	movq	%rax, -816(%rbp)	# tmp1760, temp
	.loc 1 6086 0
	movq	-816(%rbp), %rax	# temp, tmp1761
	movzwl	(%rax), %eax	# temp_219->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1144	#,
	.loc 1 6087 0
	movq	-816(%rbp), %rax	# temp, tmp1762
	movq	%rax, %rdi	# tmp1762,
	call	copy_to_reg	#
	movq	%rax, -816(%rbp)	# tmp1763, temp
.L1144:
	.loc 1 6088 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1143:
	.loc 1 6091 0
	movl	-916(%rbp), %eax	# code, code.541
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$49, %al	#, D.25926
	je	.L1145	#,
	.loc 1 6091 0 is_stmt 0 discriminator 1
	cmpl	$39, -916(%rbp)	#, code
	je	.L1145	#,
	.loc 1 6092 0 is_stmt 1
	cmpl	$41, -916(%rbp)	#, code
	je	.L1145	#,
	.loc 1 6092 0 is_stmt 0 discriminator 1
	cmpl	$42, -916(%rbp)	#, code
	jne	.L1146	#,
.L1145:
	.loc 1 6093 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1765
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp1766
	movl	%edx, %ecx	# tmp1766,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	jmp	.L1735	#
.L1146:
	.loc 1 6096 0
	movl	-916(%rbp), %eax	# code, code.542
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$50, %al	#, D.25926
	je	.L1147	#,
	.loc 1 6096 0 is_stmt 0 discriminator 1
	movl	-916(%rbp), %eax	# code, code.543
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$60, %al	#, D.25926
	je	.L1147	#,
	.loc 1 6097 0 is_stmt 1
	cmpl	$43, -916(%rbp)	#, code
	je	.L1147	#,
	.loc 1 6097 0 is_stmt 0 discriminator 1
	cmpl	$44, -916(%rbp)	#, code
	jne	.L1148	#,
.L1147:
	.loc 1 6099 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1769
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp1770
	movl	%edx, %ecx	# tmp1770,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	.loc 1 6100 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1771
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp1772
	movl	%edx, %ecx	# tmp1772,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	.loc 1 6101 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1148:
	.loc 1 6103 0
	cmpl	$91, -916(%rbp)	#, code
	je	.L1149	#,
	.loc 1 6103 0 is_stmt 0 discriminator 1
	cmpl	$92, -916(%rbp)	#, code
	jne	.L1150	#,
.L1149:
	.loc 1 6104 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1773
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	17(%rax), %eax	# *_229, D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1150	#,
	.loc 1 6107 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1774
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp1775
	movl	%edx, %ecx	# tmp1775,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	jmp	.L1735	#
.L1150:
	.loc 1 6109 0
	cmpl	$40, -916(%rbp)	#, code
	jne	.L1151	#,
	.loc 1 6111 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1776
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp1777
	movl	%edx, %ecx	# tmp1777,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	.loc 1 6112 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1778
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp1779
	movl	%edx, %ecx	# tmp1779,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	.loc 1 6113 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1780
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp1781
	movl	%edx, %ecx	# tmp1781,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	.loc 1 6114 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1151:
	.loc 1 6117 0
	movq	$0, -960(%rbp)	#, target
.L1141:
	.loc 1 6169 0
	movl	cse_not_expected(%rip), %eax	# cse_not_expected, cse_not_expected.544
	testl	%eax, %eax	# cse_not_expected.544
	jne	.L1152	#,
	.loc 1 6169 0 is_stmt 0 discriminator 1
	cmpl	$51, -912(%rbp)	#, mode
	je	.L1152	#,
	cmpq	$0, -960(%rbp)	#, target
	je	.L1152	#,
	.loc 1 6170 0 is_stmt 1
	movq	-960(%rbp), %rax	# target, tmp1782
	movzwl	(%rax), %eax	# target_3->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1153	#,
	.loc 1 6170 0 is_stmt 0 discriminator 1
	movq	-960(%rbp), %rax	# target, tmp1783
	movl	8(%rax), %eax	# target_3->fld[0].rtuint, D.25928
	cmpl	$52, %eax	#, D.25928
	ja	.L1152	#,
.L1153:
	.loc 1 6171 0 is_stmt 1
	cmpl	$46, -916(%rbp)	#, code
	jne	.L1154	#,
	.loc 1 6171 0 is_stmt 0 discriminator 1
	movl	-912(%rbp), %eax	# mode, mode.545
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25922
	movzbl	%al, %edx	# D.25922, D.25929
	movl	target_flags(%rip), %eax	# target_flags, target_flags.547
	andl	$33554432, %eax	#, D.25929
	testl	%eax, %eax	# D.25929
	je	.L1155	#,
	movl	$8, %eax	#, iftmp.546
	jmp	.L1156	#
.L1155:
	.loc 1 6171 0 discriminator 2
	movl	$4, %eax	#, iftmp.546
.L1156:
	.loc 1 6171 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.546, D.25929
	jg	.L1152	#,
.L1154:
	.loc 1 6172 0 is_stmt 1
	movq	-800(%rbp), %rax	# subtarget, tmp1785
	movq	%rax, -960(%rbp)	# tmp1785, target
.L1152:
	.loc 1 6174 0
	movl	-916(%rbp), %eax	# code, tmp1787
	subl	$25, %eax	#, tmp1786
	cmpl	$121, %eax	#, tmp1786
	ja	.L1157	#,
	movl	%eax, %eax	# tmp1786, tmp1788
	movq	.L1159(,%rax,8), %rax	#, tmp1789
	jmp	*%rax	# tmp1789
	.section	.rodata
	.align 8
	.align 4
.L1159:
	.quad	.L1158
	.quad	.L1160
	.quad	.L1161
	.quad	.L1157
	.quad	.L1161
	.quad	.L1162
	.quad	.L1163
	.quad	.L1164
	.quad	.L1157
	.quad	.L1165
	.quad	.L1166
	.quad	.L1162
	.quad	.L1157
	.quad	.L1157
	.quad	.L1167
	.quad	.L1167
	.quad	.L1168
	.quad	.L1169
	.quad	.L1170
	.quad	.L1167
	.quad	.L1171
	.quad	.L1172
	.quad	.L1173
	.quad	.L1174
	.quad	.L1175
	.quad	.L1176
	.quad	.L1177
	.quad	.L1178
	.quad	.L1179
	.quad	.L1157
	.quad	.L1180
	.quad	.L1181
	.quad	.L1182
	.quad	.L1183
	.quad	.L1184
	.quad	.L1185
	.quad	.L1186
	.quad	.L1187
	.quad	.L1187
	.quad	.L1187
	.quad	.L1187
	.quad	.L1188
	.quad	.L1188
	.quad	.L1188
	.quad	.L1188
	.quad	.L1189
	.quad	.L1187
	.quad	.L1190
	.quad	.L1191
	.quad	.L1191
	.quad	.L1191
	.quad	.L1192
	.quad	.L1193
	.quad	.L1194
	.quad	.L1194
	.quad	.L1195
	.quad	.L1196
	.quad	.L1197
	.quad	.L1197
	.quad	.L1197
	.quad	.L1197
	.quad	.L1198
	.quad	.L1199
	.quad	.L1200
	.quad	.L1157
	.quad	.L1201
	.quad	.L1202
	.quad	.L1202
	.quad	.L1200
	.quad	.L1198
	.quad	.L1199
	.quad	.L1203
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1204
	.quad	.L1205
	.quad	.L1157
	.quad	.L1157
	.quad	.L1157
	.quad	.L1206
	.quad	.L1206
	.quad	.L1206
	.quad	.L1207
	.quad	.L1208
	.quad	.L1209
	.quad	.L1210
	.quad	.L1211
	.quad	.L1206
	.quad	.L1212
	.quad	.L1213
	.quad	.L1214
	.quad	.L1215
	.quad	.L1216
	.quad	.L1217
	.quad	.L1218
	.quad	.L1218
	.quad	.L1219
	.quad	.L1219
	.quad	.L1220
	.quad	.L1221
	.quad	.L1222
	.quad	.L1223
	.quad	.L1157
	.quad	.L1224
	.quad	.L1225
	.quad	.L1226
	.quad	.L1227
	.quad	.L1228
	.quad	.L1229
	.quad	.L1230
	.quad	.L1157
	.quad	.L1231
	.text
.L1163:
.LBB93:
	.loc 1 6178 0
	movq	-952(%rbp), %rax	# exp, tmp1790
	movq	%rax, %rdi	# tmp1790,
	call	decl_function_context	#
	movq	%rax, -632(%rbp)	# tmp1791, function
	.loc 1 6180 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.548
	cmpq	%rax, -632(%rbp)	# current_function_decl.548, function
	je	.L1232	#,
	.loc 1 6181 0
	movq	inline_function_decl(%rip), %rax	# inline_function_decl, inline_function_decl.549
	cmpq	%rax, -632(%rbp)	# inline_function_decl.549, function
	je	.L1232	#,
	.loc 1 6181 0 is_stmt 0 discriminator 1
	cmpq	$0, -632(%rbp)	#, function
	je	.L1232	#,
.LBB94:
	.loc 1 6183 0 is_stmt 1
	movq	-632(%rbp), %rax	# function, tmp1792
	movq	%rax, %rdi	# tmp1792,
	call	find_function_data	#
	movq	%rax, -624(%rbp)	# tmp1793, p
	.loc 1 6184 0
	movq	-624(%rbp), %rax	# p, tmp1794
	movq	16(%rax), %rbx	# p_265->expr, D.25930
	.loc 1 6185 0
	movq	-624(%rbp), %rax	# p, tmp1795
	movq	16(%rax), %rax	# p_265->expr, D.25930
	movq	32(%rax), %r12	# _267->x_forced_labels, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1796
	movq	%rax, %rdi	# tmp1796,
	call	label_rtx	#
	movq	%r12, %rcx	# D.25924,
	movq	%rax, %rdx	# D.25924,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, 32(%rbx)	# D.25924, _266->x_forced_labels
.LBE94:
	.loc 1 6182 0
	jmp	.L1233	#
.L1232:
	.loc 1 6190 0
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1233	#,
	.loc 1 6191 0
	movq	cfun(%rip), %rax	# cfun, cfun.550
	movq	16(%rax), %rbx	# cfun.550_271->expr, D.25930
	movq	cfun(%rip), %rax	# cfun, cfun.551
	movq	16(%rax), %rax	# cfun.551_273->expr, D.25930
	movq	32(%rax), %r12	# _274->x_forced_labels, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1797
	movq	%rax, %rdi	# tmp1797,
	call	label_rtx	#
	movq	%r12, %rcx	# D.25924,
	movq	%rax, %rdx	# D.25924,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, 32(%rbx)	# D.25924, _272->x_forced_labels
.L1233:
	.loc 1 6196 0
	movq	-952(%rbp), %rax	# exp, tmp1798
	movq	%rax, %rdi	# tmp1798,
	call	label_rtx	#
	movq	%rax, %rdx	#, D.25924
	.loc 1 6197 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.553
	andl	$33554432, %eax	#, D.25929
	.loc 1 6196 0
	testl	%eax, %eax	# D.25929
	je	.L1234	#,
	.loc 1 6196 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.552
	jmp	.L1235	#
.L1234:
	.loc 1 6196 0 discriminator 2
	movl	$4, %eax	#, iftmp.552
.L1235:
	.loc 1 6196 0 discriminator 3
	movl	%eax, %esi	# iftmp.552,
	movl	$67, %edi	#,
	call	gen_rtx_fmt_u00	#
	movq	%rax, %rsi	# D.25924,
	movl	$2, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -816(%rbp)	# tmp1799, temp
	.loc 1 6198 0 is_stmt 1 discriminator 3
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.554
	cmpq	%rax, -632(%rbp)	# current_function_decl.554, function
	je	.L1236	#,
	.loc 1 6199 0
	movq	inline_function_decl(%rip), %rax	# inline_function_decl, inline_function_decl.555
	cmpq	%rax, -632(%rbp)	# inline_function_decl.555, function
	je	.L1236	#,
	.loc 1 6199 0 is_stmt 0 discriminator 1
	cmpq	$0, -632(%rbp)	#, function
	je	.L1236	#,
	.loc 1 6200 0 is_stmt 1
	movq	-816(%rbp), %rax	# temp, tmp1800
	movq	8(%rax), %rax	# temp_284->fld[0].rtx, D.25924
	movzbl	3(%rax), %edx	# _287->volatil, tmp1803
	orl	$8, %edx	#, tmp1804
	movb	%dl, 3(%rax)	# tmp1804, _287->volatil
.L1236:
	.loc 1 6201 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1166:
.LBE93:
	.loc 1 6205 0
	movq	-952(%rbp), %rax	# exp, tmp1805
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1237	#,
	.loc 1 6205 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1806
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	sete	%al	#, iftmp.556
	jmp	.L1238	#
.L1237:
	.loc 1 6205 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1807
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1807,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1808
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	sete	%al	#, iftmp.556
.L1238:
	.loc 1 6205 0 discriminator 3
	testb	%al, %al	# iftmp.556
	je	.L1165	#,
	.loc 1 6207 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1809
	movl	$.LC5, %esi	#,
	movq	%rax, %rdi	# tmp1809,
	movl	$0, %eax	#,
	call	error_with_decl	#
	.loc 1 6208 0
	movl	-912(%rbp), %eax	# mode, mode.557
	cltq
	movq	const_tiny_rtx(,%rax,8), %rax	# const_tiny_rtx, D.25920
	jmp	.L1735	#
.L1165:
	.loc 1 6216 0
	movq	-952(%rbp), %rax	# exp, tmp1811
	movq	40(%rax), %rax	# exp_194(D)->decl.size, D.25927
	testq	%rax, %rax	# D.25927
	jne	.L1162	#,
	.loc 1 6216 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1812
	movq	8(%rax), %rax	# exp_194(D)->common.type, D.25927
	movq	32(%rax), %rax	# _297->type.size, D.25927
	testq	%rax, %rax	# D.25927
	je	.L1162	#,
	.loc 1 6217 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1813
	movzbl	18(%rax), %eax	# *exp_194(D), D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1239	#,
	.loc 1 6217 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1814
	movzbl	49(%rax), %eax	# *exp_194(D), D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1162	#,
.L1239:
.LBB95:
	.loc 1 6219 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1815
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1240	#,
	.loc 1 6219 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1816
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1241	#,
	movq	-952(%rbp), %rax	# exp, tmp1817
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.559
	jmp	.L1243	#
.L1241:
	.loc 1 6219 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1818
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1818,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1819
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.559
	jmp	.L1243	#
.L1240:
	movl	$0, %eax	#, iftmp.558
.L1243:
	.loc 1 6219 0 discriminator 3
	movq	%rax, -616(%rbp)	# iftmp.558, value
	.loc 1 6221 0 is_stmt 1 discriminator 3
	movq	-952(%rbp), %rax	# exp, tmp1820
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1820,
	call	layout_decl	#
	.loc 1 6225 0 discriminator 3
	cmpq	$0, -616(%rbp)	#, value
	je	.L1162	#,
	.loc 1 6227 0
	movq	-952(%rbp), %rax	# exp, tmp1821
	movzbl	48(%rax), %edx	# exp_194(D)->decl.mode, D.25922
	movq	-616(%rbp), %rax	# value, tmp1822
	movb	%dl, 2(%rax)	# D.25922, value_309->mode
	.loc 1 6228 0
	movq	-952(%rbp), %rax	# exp, tmp1823
	movq	$0, 144(%rax)	#, exp_194(D)->decl.rtl
	.loc 1 6229 0
	movq	-952(%rbp), %rcx	# exp, tmp1824
	movq	-616(%rbp), %rax	# value, tmp1825
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp1824,
	movq	%rax, %rdi	# tmp1825,
	call	set_mem_attributes	#
	.loc 1 6230 0
	movq	-952(%rbp), %rax	# exp, tmp1826
	movq	-616(%rbp), %rdx	# value, tmp1827
	movq	%rdx, 144(%rax)	# tmp1827, exp_194(D)->decl.rtl
.L1162:
.LBE95:
	.loc 1 6238 0
	movq	-952(%rbp), %rax	# exp, tmp1828
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1244	#,
	.loc 1 6238 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1829
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	sete	%al	#, iftmp.560
	jmp	.L1245	#
.L1244:
	.loc 1 6238 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1830
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1830,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1831
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	sete	%al	#, iftmp.560
.L1245:
	.loc 1 6238 0 discriminator 3
	testb	%al, %al	# iftmp.560
	je	.L1246	#,
	.loc 1 6239 0 is_stmt 1
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6239, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1246:
	.loc 1 6244 0
	movq	-952(%rbp), %rax	# exp, tmp1832
	movzbl	18(%rax), %eax	# *exp_194(D), D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1247	#,
	.loc 1 6246 0
	movq	-952(%rbp), %rax	# exp, tmp1833
	movq	%rax, %rdi	# tmp1833,
	call	assemble_external	#
	.loc 1 6247 0
	movq	-952(%rbp), %rax	# exp, tmp1834
	movzbl	18(%rax), %edx	#, tmp1837
	orl	$1, %edx	#, tmp1838
	movb	%dl, 18(%rax)	# tmp1838,
.L1247:
	.loc 1 6251 0
	movq	$0, -816(%rbp)	#, temp
	.loc 1 6254 0
	movq	-952(%rbp), %rax	# exp, tmp1839
	movq	%rax, %rdi	# tmp1839,
	call	decl_function_context	#
	movq	%rax, -792(%rbp)	# tmp1840, context
	.loc 1 6261 0
	cmpq	$0, -792(%rbp)	#, context
	je	.L1248	#,
	.loc 1 6261 0 is_stmt 0 discriminator 1
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.561
	cmpq	%rax, -792(%rbp)	# current_function_decl.561, context
	je	.L1248	#,
	.loc 1 6262 0 is_stmt 1
	movq	inline_function_decl(%rip), %rax	# inline_function_decl, inline_function_decl.562
	cmpq	%rax, -792(%rbp)	# inline_function_decl.562, context
	je	.L1248	#,
	.loc 1 6264 0
	movq	-952(%rbp), %rax	# exp, tmp1841
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1249	#,
	.loc 1 6264 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1842
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.563
	jmp	.L1250	#
.L1249:
	.loc 1 6264 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1843
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1843,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1844
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.563
.L1250:
	.loc 1 6264 0 discriminator 3
	movzwl	(%rax), %eax	# iftmp.563_111->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1251	#,
	.loc 1 6265 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1845
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1252	#,
	.loc 1 6265 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1846
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.564
	jmp	.L1253	#
.L1252:
	.loc 1 6265 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1847
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1847,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1848
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.564
.L1253:
	.loc 1 6265 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.564_112->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _329->code, D.25925
	.loc 1 6264 0 is_stmt 1 discriminator 3
	cmpw	$67, %ax	#, D.25925
	je	.L1248	#,
	.loc 1 6265 0
	movq	-952(%rbp), %rax	# exp, tmp1849
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1254	#,
	.loc 1 6265 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1850
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.565
	jmp	.L1255	#
.L1254:
	.loc 1 6265 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1851
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1851,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1852
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.565
.L1255:
	.loc 1 6265 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.565_113->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _334->code, D.25925
	cmpw	$68, %ax	#, D.25925
	je	.L1248	#,
	.loc 1 6265 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1853
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1256	#,
	movq	-952(%rbp), %rax	# exp, tmp1854
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.566
	jmp	.L1257	#
.L1256:
	.loc 1 6265 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1855
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1855,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1856
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.566
.L1257:
	.loc 1 6265 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.566_114->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _339->code, D.25925
	cmpw	$54, %ax	#, D.25925
	je	.L1248	#,
	.loc 1 6265 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1857
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1258	#,
	movq	-952(%rbp), %rax	# exp, tmp1858
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.567
	jmp	.L1259	#
.L1258:
	.loc 1 6265 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1859
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1859,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1860
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.567
.L1259:
	.loc 1 6265 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.567_115->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _344->code, D.25925
	cmpw	$55, %ax	#, D.25925
	je	.L1248	#,
	.loc 1 6265 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1861
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1260	#,
	movq	-952(%rbp), %rax	# exp, tmp1862
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.568
	jmp	.L1261	#
.L1260:
	.loc 1 6265 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1863
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1863,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1864
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.568
.L1261:
	.loc 1 6265 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.568_116->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _349->code, D.25925
	cmpw	$58, %ax	#, D.25925
	je	.L1248	#,
	.loc 1 6265 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1865
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1262	#,
	movq	-952(%rbp), %rax	# exp, tmp1866
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.569
	jmp	.L1263	#
.L1262:
	.loc 1 6265 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1867
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1867,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1868
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.569
.L1263:
	.loc 1 6265 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.569_117->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _354->code, D.25925
	cmpw	$134, %ax	#, D.25925
	je	.L1248	#,
	.loc 1 6265 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1869
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1264	#,
	movq	-952(%rbp), %rax	# exp, tmp1870
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.570
	jmp	.L1265	#
.L1264:
	.loc 1 6265 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1871
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1871,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1872
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.570
.L1265:
	.loc 1 6265 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.570_118->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _359->code, D.25925
	cmpw	$56, %ax	#, D.25925
	je	.L1248	#,
	.loc 1 6265 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1873
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1266	#,
	movq	-952(%rbp), %rax	# exp, tmp1874
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.571
	jmp	.L1267	#
.L1266:
	.loc 1 6265 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1875
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1875,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1876
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.571
.L1267:
	.loc 1 6265 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.571_119->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _364->code, D.25925
	cmpw	$140, %ax	#, D.25925
	je	.L1248	#,
.L1251:
.LBB96:
	.loc 1 6270 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1877
	movzbl	49(%rax), %edx	#, tmp1880
	orl	$2, %edx	#, tmp1881
	movb	%dl, 49(%rax)	# tmp1881,
	.loc 1 6271 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.572
	movzbl	49(%rax), %eax	# *current_function_decl.572_366, D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1268	#,
	.loc 1 6272 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6272, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1268:
	.loc 1 6273 0
	movq	-952(%rbp), %rax	# exp, tmp1882
	movq	%rax, %rdi	# tmp1882,
	call	mark_addressable	#
	.loc 1 6274 0
	movq	-952(%rbp), %rax	# exp, tmp1883
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1269	#,
	.loc 1 6274 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1884
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.573
	jmp	.L1270	#
.L1269:
	.loc 1 6274 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1885
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1885,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1886
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.573
.L1270:
	.loc 1 6274 0 discriminator 3
	movzwl	(%rax), %eax	# iftmp.573_120->code, D.25925
	cmpw	$66, %ax	#, D.25925
	je	.L1271	#,
	.loc 1 6275 0 is_stmt 1
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6275, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1271:
	.loc 1 6276 0
	movq	-952(%rbp), %rax	# exp, tmp1887
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1272	#,
	.loc 1 6276 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1888
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.574
	jmp	.L1273	#
.L1272:
	.loc 1 6276 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1889
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1889,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1890
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.574
.L1273:
	.loc 1 6276 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.574_121->fld[0].rtx, tmp1891
	movq	%rax, -784(%rbp)	# tmp1891, addr
	.loc 1 6277 0 is_stmt 1 discriminator 3
	movq	-784(%rbp), %rax	# addr, tmp1892
	movzwl	(%rax), %eax	# addr_376->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1274	#,
	.loc 1 6279 0
	movq	-784(%rbp), %rax	# addr, tmp1893
	movq	8(%rax), %rax	# addr_376->fld[0].rtx, D.25924
	movq	-952(%rbp), %rdx	# exp, tmp1894
	movq	%rdx, %rsi	# tmp1894,
	movq	%rax, %rdi	# D.25924,
	call	fix_lexical_addr	#
	movq	%rax, %rdx	#, D.25924
	movq	-784(%rbp), %rax	# addr, tmp1895
	movq	%rdx, %rsi	# D.25924,
	movq	%rax, %rdi	# tmp1895,
	call	replace_equiv_address	#
	movq	%rax, -784(%rbp)	# tmp1896, addr
	jmp	.L1275	#
.L1274:
	.loc 1 6282 0
	movq	-952(%rbp), %rdx	# exp, tmp1897
	movq	-784(%rbp), %rax	# addr, tmp1898
	movq	%rdx, %rsi	# tmp1897,
	movq	%rax, %rdi	# tmp1898,
	call	fix_lexical_addr	#
	movq	%rax, -784(%rbp)	# tmp1899, addr
.L1275:
	.loc 1 6284 0
	movq	-952(%rbp), %rax	# exp, tmp1900
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1276	#,
	.loc 1 6284 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1901
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.575
	jmp	.L1277	#
.L1276:
	.loc 1 6284 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1902
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1902,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1903
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.575
.L1277:
	.loc 1 6284 0 discriminator 3
	movq	-784(%rbp), %rdx	# addr, tmp1904
	movq	%rdx, %rsi	# tmp1904,
	movq	%rax, %rdi	# iftmp.575,
	call	replace_equiv_address	#
	movq	%rax, -816(%rbp)	# tmp1905, temp
.LBE96:
	.loc 1 6266 0 is_stmt 1 discriminator 3
	jmp	.L1278	#
.L1248:
	.loc 1 6291 0
	movq	-952(%rbp), %rax	# exp, tmp1906
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1279	#,
	.loc 1 6291 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1907
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.576
	jmp	.L1280	#
.L1279:
	.loc 1 6291 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1908
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1908,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1909
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.576
.L1280:
	.loc 1 6291 0 discriminator 3
	movzwl	(%rax), %eax	# iftmp.576_123->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1281	#,
	.loc 1 6292 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1910
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1282	#,
	.loc 1 6292 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1911
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.577
	jmp	.L1283	#
.L1282:
	.loc 1 6292 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1912
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1912,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1913
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.577
.L1283:
	.loc 1 6292 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.577_124->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _393->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1281	#,
	.loc 1 6293 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1914
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1284	#,
	.loc 1 6293 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1915
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.578
	jmp	.L1285	#
.L1284:
	.loc 1 6293 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1916
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1916,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1917
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.578
.L1285:
	.loc 1 6293 0 discriminator 3
	movq	%rax, %rdi	# iftmp.578,
	call	validize_mem	#
	movq	%rax, -816(%rbp)	# tmp1918, temp
	jmp	.L1278	#
.L1281:
	.loc 1 6299 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1919
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1286	#,
	.loc 1 6299 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1920
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.579
	jmp	.L1287	#
.L1286:
	.loc 1 6299 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1921
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1921,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1922
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.579
.L1287:
	.loc 1 6299 0 discriminator 3
	movzwl	(%rax), %eax	# iftmp.579_126->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1278	#,
	.loc 1 6300 0 is_stmt 1
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1278	#,
	.loc 1 6301 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1278	#,
	.loc 1 6302 0
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1278	#,
	.loc 1 6304 0
	movq	-952(%rbp), %rax	# exp, tmp1923
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1288	#,
	.loc 1 6304 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1924
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.580
	jmp	.L1289	#
.L1288:
	.loc 1 6304 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1925
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1925,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1926
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.580
.L1289:
	.loc 1 6303 0 is_stmt 1
	movq	8(%rax), %rdx	# iftmp.580_127->fld[0].rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1927
	movzbl	48(%rax), %eax	# exp_194(D)->decl.mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25931
	movq	%rdx, %rsi	# D.25924,
	movl	%eax, %edi	# D.25931,
	call	memory_address_p	#
	testl	%eax, %eax	# D.25929
	je	.L1290	#,
	.loc 1 6305 0
	movl	flag_force_addr(%rip), %eax	# flag_force_addr, flag_force_addr.581
	testl	%eax, %eax	# flag_force_addr.581
	je	.L1278	#,
	.loc 1 6306 0
	movq	-952(%rbp), %rax	# exp, tmp1928
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1291	#,
	.loc 1 6306 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1929
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.582
	jmp	.L1292	#
.L1291:
	.loc 1 6306 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1930
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1930,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1931
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.582
.L1292:
	.loc 1 6306 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.582_128->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _414->code, D.25925
	cmpw	$61, %ax	#, D.25925
	je	.L1278	#,
.L1290:
	.loc 1 6308 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1932
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1293	#,
	.loc 1 6308 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1933
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.583
	jmp	.L1294	#
.L1293:
	.loc 1 6308 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1934
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1934,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1935
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.583
.L1294:
	.loc 1 6307 0 is_stmt 1
	movq	8(%rax), %rax	# iftmp.583_129->fld[0].rtx, D.25924
	movq	%rax, %rdi	# D.25924,
	call	copy_rtx	#
	movq	%rax, %rbx	#, D.25924
	movq	-952(%rbp), %rax	# exp, tmp1936
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1295	#,
	.loc 1 6307 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1937
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.584
	jmp	.L1296	#
.L1295:
	.loc 1 6307 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1938
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1938,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1939
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.584
.L1296:
	.loc 1 6307 0 discriminator 3
	movq	%rbx, %rsi	# D.25924,
	movq	%rax, %rdi	# iftmp.584,
	call	replace_equiv_address	#
	movq	%rax, -816(%rbp)	# tmp1940, temp
.L1278:
	.loc 1 6312 0 is_stmt 1
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1297	#,
	.loc 1 6314 0
	movq	-816(%rbp), %rax	# temp, tmp1941
	movzwl	(%rax), %eax	# temp_59->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1298	#,
	.loc 1 6314 0 is_stmt 0 discriminator 1
	movq	-816(%rbp), %rax	# temp, tmp1942
	movq	8(%rax), %rax	# temp_59->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _426->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1298	#,
	.loc 1 6315 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1943
	movl	56(%rax), %eax	# *exp_194(D), tmp1946
	andl	$16777215, %eax	#, D.25932
	movl	%eax, %edx	# D.25932, D.25929
	movq	-816(%rbp), %rax	# temp, tmp1947
	movq	8(%rax), %rax	# temp_59->fld[0].rtx, D.25924
	movl	%edx, %esi	# D.25929,
	movq	%rax, %rdi	# D.25924,
	call	mark_reg_pointer	#
.L1298:
	.loc 1 6317 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1297:
	.loc 1 6324 0
	movq	-952(%rbp), %rax	# exp, tmp1948
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1299	#,
	.loc 1 6324 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1949
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.585
	jmp	.L1300	#
.L1299:
	.loc 1 6324 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1950
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1950,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1951
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.585
.L1300:
	.loc 1 6324 0 discriminator 3
	movzwl	(%rax), %eax	# iftmp.585_131->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1301	#,
	.loc 1 6325 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1952
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1302	#,
	.loc 1 6325 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1953
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.586
	jmp	.L1303	#
.L1302:
	.loc 1 6325 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1954
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1954,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1955
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.586
.L1303:
	.loc 1 6325 0 discriminator 3
	movzbl	2(%rax), %edx	# iftmp.586_132->mode, D.25922
	movq	-952(%rbp), %rax	# exp, tmp1956
	movzbl	48(%rax), %eax	# exp_194(D)->decl.mode, D.25922
	cmpb	%al, %dl	# D.25922, D.25922
	je	.L1301	#,
	.loc 1 6329 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1957
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1304	#,
	.loc 1 6329 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1958
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.587
	jmp	.L1305	#
.L1304:
	.loc 1 6329 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1959
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1959,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1960
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.587
.L1305:
	.loc 1 6329 0 discriminator 3
	movzbl	2(%rax), %eax	# iftmp.587_133->mode, D.25922
	.loc 1 6330 0 is_stmt 1 discriminator 3
	movzbl	%al, %ebx	# D.25922, D.25928
	.loc 1 6331 0 discriminator 3
	movq	-952(%rbp), %rax	# exp, tmp1961
	movzbl	16(%rax), %eax	# exp_194(D)->common.code, D.25922
	.loc 1 6330 0 discriminator 3
	cmpb	$36, %al	#, D.25922
	sete	%al	#, D.25933
	movzbl	%al, %ecx	# D.25933, D.25929
	movq	-952(%rbp), %rax	# exp, tmp1962
	movzbl	48(%rax), %eax	# exp_194(D)->decl.mode, D.25922
	movzbl	%al, %esi	# D.25922, D.25931
	leaq	-936(%rbp), %rdx	#, tmp1963
	movq	-648(%rbp), %rax	# type, tmp1964
	movq	%rax, %rdi	# tmp1964,
	call	promote_mode	#
	.loc 1 6329 0 discriminator 3
	cmpl	%eax, %ebx	# D.25931, D.25928
	je	.L1306	#,
	.loc 1 6332 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6332, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1306:
	.loc 1 6334 0
	movq	-952(%rbp), %rax	# exp, tmp1965
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1307	#,
	.loc 1 6334 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1966
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.588
	jmp	.L1308	#
.L1307:
	.loc 1 6334 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1967
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1967,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1968
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.588
.L1308:
	.loc 1 6334 0 discriminator 3
	movl	-912(%rbp), %edx	# mode, tmp1969
	movq	%rax, %rsi	# iftmp.588,
	movl	%edx, %edi	# tmp1969,
	call	gen_lowpart_SUBREG	#
	movq	%rax, -816(%rbp)	# tmp1970, temp
	.loc 1 6335 0 is_stmt 1 discriminator 3
	movq	-816(%rbp), %rax	# temp, tmp1971
	movzbl	3(%rax), %edx	# temp_455->in_struct, tmp1974
	orl	$16, %edx	#, tmp1975
	movb	%dl, 3(%rax)	# tmp1975, temp_455->in_struct
	.loc 1 6336 0 discriminator 3
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.589
	andl	$1, %eax	#, D.25921
	movl	%eax, %edx	# D.25921, D.25921
	movq	-816(%rbp), %rax	# temp, tmp1976
	andl	$1, %edx	#, tmp1978
	leal	0(,%rdx,4), %ecx	#, tmp1979
	movzbl	3(%rax), %edx	# temp_455->unchanging, tmp1980
	andl	$-5, %edx	#, tmp1981
	orl	%ecx, %edx	# tmp1979, tmp1982
	movb	%dl, 3(%rax)	# tmp1982, temp_455->unchanging
	.loc 1 6337 0 discriminator 3
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1301:
	.loc 1 6340 0
	movq	-952(%rbp), %rax	# exp, tmp1983
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1309	#,
	.loc 1 6340 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp1984
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.590
	jmp	.L1310	#
.L1309:
	.loc 1 6340 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp1985
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp1985,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp1986
	movq	144(%rax), %rax	# exp_194(D)->decl.rtl, iftmp.590
.L1310:
	.loc 1 6340 0 discriminator 3
	jmp	.L1735	#
.L1158:
	.loc 1 6343 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp1987
	movq	40(%rax), %rcx	# exp_194(D)->int_cst.int_cst.high, D.25934
	movq	-952(%rbp), %rax	# exp, tmp1988
	movq	32(%rax), %rax	# exp_194(D)->int_cst.int_cst.low, D.25935
	movl	-912(%rbp), %edx	# mode, tmp1989
	movq	%rcx, %rsi	# D.25934,
	movq	%rax, %rdi	# D.25934,
	call	immed_double_const	#
	movq	%rax, -816(%rbp)	# tmp1990, temp
	.loc 1 6351 0
	movq	-952(%rbp), %rax	# exp, tmp1991
	movzbl	18(%rax), %eax	# *exp_194(D), D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1311	#,
	.loc 1 6352 0
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1311	#,
	.loc 1 6353 0
	movq	-816(%rbp), %rdx	# temp, tmp1992
	movl	-912(%rbp), %eax	# mode, tmp1993
	movq	%rdx, %rsi	# tmp1992,
	movl	%eax, %edi	# tmp1993,
	call	force_reg	#
	movq	%rax, -816(%rbp)	# tmp1994, temp
.L1311:
	.loc 1 6355 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1164:
	.loc 1 6358 0
	movq	-952(%rbp), %rax	# exp, tmp1995
	movq	104(%rax), %rax	# exp_194(D)->decl.initial, D.25927
	movq	-960(%rbp), %rsi	# target, tmp1996
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	jmp	.L1735	#
.L1160:
	.loc 1 6371 0
	movq	-952(%rbp), %rax	# exp, tmp1997
	movq	%rax, %rdi	# tmp1997,
	call	immed_real_const	#
	jmp	.L1735	#
.L1161:
	.loc 1 6375 0
	movq	-952(%rbp), %rax	# exp, tmp1998
	movq	24(%rax), %rax	# exp_194(D)->real_cst.rtl, D.25924
	testq	%rax, %rax	# D.25924
	jne	.L1312	#,
	.loc 1 6376 0
	movq	-952(%rbp), %rax	# exp, tmp1999
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp1999,
	call	output_constant_def	#
.L1312:
	.loc 1 6381 0
	movq	-952(%rbp), %rax	# exp, tmp2000
	movq	24(%rax), %rax	# exp_194(D)->real_cst.rtl, D.25924
	movzwl	(%rax), %eax	# _476->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1313	#,
	.loc 1 6382 0
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1313	#,
	.loc 1 6383 0
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1313	#,
	.loc 1 6384 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1313	#,
	.loc 1 6385 0
	movq	-952(%rbp), %rax	# exp, tmp2001
	movq	24(%rax), %rax	# exp_194(D)->real_cst.rtl, D.25924
	movq	8(%rax), %rdx	# _478->fld[0].rtx, D.25924
	movl	-912(%rbp), %eax	# mode, tmp2002
	movq	%rdx, %rsi	# D.25924,
	movl	%eax, %edi	# tmp2002,
	call	memory_address_p	#
	testl	%eax, %eax	# D.25929
	je	.L1314	#,
	.loc 1 6386 0
	movl	flag_force_addr(%rip), %eax	# flag_force_addr, flag_force_addr.591
	testl	%eax, %eax	# flag_force_addr.591
	je	.L1313	#,
	.loc 1 6387 0
	movq	-952(%rbp), %rax	# exp, tmp2003
	movq	24(%rax), %rax	# exp_194(D)->real_cst.rtl, D.25924
	movq	8(%rax), %rax	# _482->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _483->code, D.25925
	cmpw	$61, %ax	#, D.25925
	je	.L1313	#,
.L1314:
	.loc 1 6389 0
	movq	-952(%rbp), %rax	# exp, tmp2004
	movq	24(%rax), %rax	# exp_194(D)->real_cst.rtl, D.25924
	.loc 1 6388 0
	movq	8(%rax), %rax	# _485->fld[0].rtx, D.25924
	movq	%rax, %rdi	# D.25924,
	call	copy_rtx	#
	movq	%rax, %rdx	#, D.25924
	movq	-952(%rbp), %rax	# exp, tmp2005
	movq	24(%rax), %rax	# exp_194(D)->real_cst.rtl, D.25924
	movq	%rdx, %rsi	# D.25924,
	movq	%rax, %rdi	# D.25924,
	call	replace_equiv_address	#
	jmp	.L1735	#
.L1313:
	.loc 1 6390 0
	movq	-952(%rbp), %rax	# exp, tmp2006
	movq	24(%rax), %rax	# exp_194(D)->real_cst.rtl, D.25920
	jmp	.L1735	#
.L1230:
.LBB97:
	.loc 1 6395 0
	movq	input_filename(%rip), %rax	# input_filename, tmp2007
	movq	%rax, -608(%rbp)	# tmp2007, saved_input_filename
	.loc 1 6396 0
	movl	lineno(%rip), %eax	# lineno, tmp2008
	movl	%eax, -904(%rbp)	# tmp2008, saved_lineno
	.loc 1 6397 0
	movq	-952(%rbp), %rax	# exp, tmp2009
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _493->identifier.id.str, input_filename.592
	movq	%rax, input_filename(%rip)	# input_filename.592, input_filename
	.loc 1 6398 0
	movq	-952(%rbp), %rax	# exp, tmp2010
	movl	24(%rax), %eax	# exp_194(D)->exp.complexity, D.25929
	sarl	$12, %eax	#, lineno.593
	movl	%eax, lineno(%rip)	# lineno.593, lineno
	.loc 1 6399 0
	movq	-952(%rbp), %rax	# exp, tmp2011
	movzbl	18(%rax), %eax	# *exp_194(D), D.25922
	andl	$8, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1315	#,
	.loc 1 6400 0
	movl	lineno(%rip), %edx	# lineno, lineno.594
	movq	input_filename(%rip), %rax	# input_filename, input_filename.595
	movl	%edx, %esi	# lineno.594,
	movq	%rax, %rdi	# input_filename.595,
	call	emit_line_note	#
.L1315:
	.loc 1 6402 0
	movq	-952(%rbp), %rax	# exp, tmp2012
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2013
	movl	-964(%rbp), %edx	# tmode, tmp2014
	movq	-960(%rbp), %rsi	# target, tmp2015
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -600(%rbp)	# tmp2016, to_return
	.loc 1 6403 0
	movq	-608(%rbp), %rax	# saved_input_filename, tmp2017
	movq	%rax, input_filename(%rip)	# tmp2017, input_filename
	.loc 1 6404 0
	movl	-904(%rbp), %eax	# saved_lineno, tmp2018
	movl	%eax, lineno(%rip)	# tmp2018, lineno
	.loc 1 6405 0
	movq	-600(%rbp), %rax	# to_return, D.25920
	jmp	.L1735	#
.L1208:
.LBE97:
	.loc 1 6409 0
	movq	-952(%rbp), %rax	# exp, tmp2019
	movq	%rax, %rdi	# tmp2019,
	call	decl_function_context	#
	movq	%rax, -792(%rbp)	# tmp2020, context
	.loc 1 6413 0
	cmpq	$0, -792(%rbp)	#, context
	jne	.L1316	#,
	.loc 1 6414 0
	movq	current_function_decl(%rip), %rdx	# current_function_decl, current_function_decl.596
	movq	-952(%rbp), %rax	# exp, tmp2021
	movq	%rdx, 40(%rax)	# current_function_decl.596, exp_194(D)->exp.operands
.L1316:
	.loc 1 6420 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.597
	cmpq	%rax, -792(%rbp)	# current_function_decl.597, context
	je	.L1317	#,
	.loc 1 6420 0 is_stmt 0 discriminator 1
	movq	inline_function_decl(%rip), %rax	# inline_function_decl, inline_function_decl.598
	cmpq	%rax, -792(%rbp)	# inline_function_decl.598, context
	jne	.L1318	#,
.L1317:
	.loc 1 6421 0 is_stmt 1
	movq	$0, -792(%rbp)	#, context
.L1318:
	.loc 1 6424 0
	cmpq	$0, -792(%rbp)	#, context
	je	.L1319	#,
	.loc 1 6428 0
	movq	-792(%rbp), %rax	# context, tmp2022
	movq	%rax, %rdi	# tmp2022,
	call	find_function_data	#
	.loc 1 6430 0
	movq	-952(%rbp), %rax	# exp, tmp2023
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, tmp2024
	movq	%rax, -816(%rbp)	# tmp2024, temp
	.loc 1 6431 0
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1320	#,
	.loc 1 6431 0 is_stmt 0 discriminator 1
	movq	-816(%rbp), %rax	# temp, tmp2025
	movzwl	(%rax), %eax	# temp_510->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1320	#,
	.loc 1 6433 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2026
	movq	%rax, %rdi	# tmp2026,
	call	put_var_into_stack	#
	.loc 1 6434 0
	movq	-952(%rbp), %rax	# exp, tmp2027
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, tmp2028
	movq	%rax, -816(%rbp)	# tmp2028, temp
.L1320:
	.loc 1 6436 0
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1321	#,
	.loc 1 6436 0 is_stmt 0 discriminator 1
	movq	-816(%rbp), %rax	# temp, tmp2029
	movzwl	(%rax), %eax	# temp_61->code, D.25925
	cmpw	$66, %ax	#, D.25925
	je	.L1322	#,
.L1321:
	.loc 1 6437 0 is_stmt 1
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6437, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1322:
	.loc 1 6439 0
	movq	-816(%rbp), %rax	# temp, tmp2030
	movq	8(%rax), %rax	# temp_61->fld[0].rtx, D.25924
	movq	-952(%rbp), %rdx	# exp, tmp2031
	movq	%rdx, %rsi	# tmp2031,
	movq	%rax, %rdi	# D.25924,
	call	fix_lexical_addr	#
	movq	%rax, %rdx	#, D.25924
	.loc 1 6438 0
	movq	-816(%rbp), %rax	# temp, tmp2032
	movq	%rdx, %rsi	# D.25924,
	movq	%rax, %rdi	# tmp2032,
	call	replace_equiv_address	#
	jmp	.L1735	#
.L1319:
	.loc 1 6442 0
	movq	-952(%rbp), %rax	# exp, tmp2033
	addq	$48, %rax	#, D.25936
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_517], D.25924
	testq	%rax, %rax	# D.25924
	jne	.L1323	#,
	.loc 1 6444 0
	cmpl	$0, -912(%rbp)	#, mode
	jne	.L1324	#,
	.loc 1 6445 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, tmp2034
	movq	%rax, -816(%rbp)	# tmp2034, temp
	jmp	.L1325	#
.L1324:
	.loc 1 6448 0
	movq	-648(%rbp), %rax	# type, tmp2035
	movzbl	17(%rax), %eax	# *type_195, tmp2038
	shrb	$4, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %edx	# D.25921, D.25929
	movq	-648(%rbp), %rax	# type, tmp2039
	movzbl	17(%rax), %eax	# *type_195, tmp2042
	shrb	$3, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %eax	# D.25921, D.25929
	addl	%eax, %eax	# D.25929
	orl	%eax, %edx	# D.25929, D.25929
	movq	-648(%rbp), %rax	# type, tmp2043
	movzbl	62(%rax), %eax	# *type_195, tmp2046
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %eax	# D.25921, D.25929
	sall	$2, %eax	#, D.25929
	orl	%eax, %edx	# D.25929, D.25929
	movq	-648(%rbp), %rax	# type, tmp2047
	movzbl	16(%rax), %eax	# type_195->common.code, D.25922
	cmpb	$20, %al	#, D.25922
	jne	.L1326	#,
	.loc 1 6448 0 is_stmt 0 discriminator 1
	movq	-648(%rbp), %rax	# type, tmp2048
	movq	8(%rax), %rax	# type_195->common.type, D.25927
	testq	%rax, %rax	# D.25927
	je	.L1326	#,
	.loc 1 6448 0 discriminator 3
	movl	$1, %eax	#, iftmp.599
	jmp	.L1327	#
.L1326:
	.loc 1 6448 0 discriminator 2
	movl	$0, %eax	#, iftmp.599
.L1327:
	.loc 1 6448 0 discriminator 4
	sall	$3, %eax	#, D.25929
	orl	%edx, %eax	# D.25929, D.25929
	.loc 1 6447 0 is_stmt 1 discriminator 4
	orl	$1, %eax	#, D.25929
	movl	%eax, %edx	# D.25929, D.25929
	movq	-648(%rbp), %rax	# type, tmp2049
	movl	%edx, %esi	# D.25929,
	movq	%rax, %rdi	# tmp2049,
	call	build_qualified_type	#
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$3, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	assign_temp	#
	movq	%rax, -816(%rbp)	# tmp2050, temp
.L1325:
	.loc 1 6452 0
	movq	-952(%rbp), %rax	# exp, tmp2051
	leaq	48(%rax), %rdx	#, D.25936
	movq	-816(%rbp), %rax	# temp, tmp2052
	movq	%rax, (%rdx)	# tmp2052, MEM[(struct rtx_def * *)_539]
	.loc 1 6453 0
	movl	optimize(%rip), %eax	# optimize, optimize.600
	testl	%eax, %eax	# optimize.600
	jne	.L1328	#,
	.loc 1 6453 0 is_stmt 0 discriminator 1
	movq	-816(%rbp), %rax	# temp, tmp2053
	movzwl	(%rax), %eax	# temp_62->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1328	#,
	.loc 1 6454 0 is_stmt 1
	movq	cfun(%rip), %rbx	# cfun, cfun.601
	movq	cfun(%rip), %rax	# cfun, cfun.602
	movq	208(%rax), %rdx	# cfun.602_543->x_save_expr_regs, D.25924
	movq	-816(%rbp), %rax	# temp, tmp2054
	movq	%rdx, %rcx	# D.25924,
	movq	%rax, %rdx	# tmp2054,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, 208(%rbx)	# D.25924, cfun.601_542->x_save_expr_regs
.L1328:
	.loc 1 6463 0
	movq	-816(%rbp), %rax	# temp, tmp2055
	movzwl	(%rax), %eax	# temp_62->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1329	#,
	.loc 1 6463 0 is_stmt 0 discriminator 1
	movq	-816(%rbp), %rax	# temp, tmp2056
	movzbl	2(%rax), %eax	# temp_62->mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25928
	cmpl	-912(%rbp), %eax	# mode, D.25928
	je	.L1329	#,
	.loc 1 6465 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2057
	addq	$48, %rax	#, D.25936
	movq	(%rax), %rdx	# MEM[(struct rtx_def * *)_549], D.25924
	movl	-912(%rbp), %eax	# mode, tmp2058
	movq	%rdx, %rsi	# D.25924,
	movl	%eax, %edi	# tmp2058,
	call	gen_lowpart_SUBREG	#
	movq	%rax, -816(%rbp)	# tmp2059, temp
	.loc 1 6466 0
	movq	-816(%rbp), %rax	# temp, tmp2060
	movzbl	3(%rax), %edx	# temp_551->in_struct, tmp2063
	orl	$16, %edx	#, tmp2064
	movb	%dl, 3(%rax)	# tmp2064, temp_551->in_struct
	.loc 1 6467 0
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.603
	andl	$1, %eax	#, D.25921
	movl	%eax, %edx	# D.25921, D.25921
	movq	-816(%rbp), %rax	# temp, tmp2065
	andl	$1, %edx	#, tmp2067
	leal	0(,%rdx,4), %ecx	#, tmp2068
	movzbl	3(%rax), %edx	# temp_551->unchanging, tmp2069
	andl	$-5, %edx	#, tmp2070
	orl	%ecx, %edx	# tmp2068, tmp2071
	movb	%dl, 3(%rax)	# tmp2071, temp_551->unchanging
.L1329:
	.loc 1 6470 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25924
	cmpq	-816(%rbp), %rax	# temp, D.25924
	jne	.L1330	#,
	.loc 1 6471 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp2072
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	jmp	.L1331	#
.L1330:
	.loc 1 6473 0
	movq	-952(%rbp), %rax	# exp, tmp2073
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-816(%rbp), %rcx	# temp, tmp2074
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp2074,
	movq	%rax, %rdi	# D.25927,
	call	store_expr	#
.L1331:
	.loc 1 6475 0
	movq	-952(%rbp), %rax	# exp, tmp2075
	movzbl	18(%rax), %edx	#, tmp2078
	orl	$1, %edx	#, tmp2079
	movb	%dl, 18(%rax)	# tmp2079,
.L1323:
	.loc 1 6482 0
	movq	-952(%rbp), %rax	# exp, tmp2080
	addq	$48, %rax	#, D.25936
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_559], D.25924
	movzwl	(%rax), %eax	# _560->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1332	#,
	.loc 1 6483 0
	movq	-952(%rbp), %rax	# exp, tmp2081
	addq	$48, %rax	#, D.25936
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_562], D.25924
	movzbl	2(%rax), %eax	# _563->mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25928
	cmpl	-912(%rbp), %eax	# mode, D.25928
	je	.L1332	#,
	.loc 1 6486 0
	leaq	-936(%rbp), %rdx	#, tmp2082
	movl	-912(%rbp), %esi	# mode, tmp2083
	movq	-648(%rbp), %rax	# type, tmp2084
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp2084,
	call	promote_mode	#
	.loc 1 6487 0
	movq	-952(%rbp), %rax	# exp, tmp2085
	addq	$48, %rax	#, D.25936
	movq	(%rax), %rdx	# MEM[(struct rtx_def * *)_566], D.25924
	movl	-912(%rbp), %eax	# mode, tmp2086
	movq	%rdx, %rsi	# D.25924,
	movl	%eax, %edi	# tmp2086,
	call	gen_lowpart_SUBREG	#
	movq	%rax, -816(%rbp)	# tmp2087, temp
	.loc 1 6488 0
	movq	-816(%rbp), %rax	# temp, tmp2088
	movzbl	3(%rax), %edx	# temp_568->in_struct, tmp2091
	orl	$16, %edx	#, tmp2092
	movb	%dl, 3(%rax)	# tmp2092, temp_568->in_struct
	.loc 1 6489 0
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.604
	andl	$1, %eax	#, D.25921
	movl	%eax, %edx	# D.25921, D.25921
	movq	-816(%rbp), %rax	# temp, tmp2093
	andl	$1, %edx	#, tmp2095
	leal	0(,%rdx,4), %ecx	#, tmp2096
	movzbl	3(%rax), %edx	# temp_568->unchanging, tmp2097
	andl	$-5, %edx	#, tmp2098
	orl	%ecx, %edx	# tmp2096, tmp2099
	movb	%dl, 3(%rax)	# tmp2099, temp_568->unchanging
	.loc 1 6490 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1332:
	.loc 1 6493 0
	movq	-952(%rbp), %rax	# exp, tmp2100
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25920
	jmp	.L1735	#
.L1209:
.LBB98:
	.loc 1 6498 0
	movq	-952(%rbp), %rax	# exp, tmp2101
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2102
	movl	-964(%rbp), %edx	# tmode, tmp2103
	movq	-960(%rbp), %rsi	# target, tmp2104
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -592(%rbp)	# tmp2105, temp
	.loc 1 6499 0
	movq	-952(%rbp), %rax	# exp, tmp2106
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	unsave_expr_now	#
	movq	-952(%rbp), %rdx	# exp, tmp2107
	movq	%rax, 32(%rdx)	# D.25927, exp_194(D)->exp.operands
	.loc 1 6500 0
	movq	-592(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1182:
.LBE98:
.LBB99:
	.loc 1 6505 0
	movq	placeholder_list(%rip), %rax	# placeholder_list, tmp2108
	movq	%rax, -584(%rbp)	# tmp2108, old_list
	.loc 1 6506 0
	movq	$0, -840(%rbp)	#, placeholder_expr
	.loc 1 6508 0
	leaq	-840(%rbp), %rdx	#, tmp2109
	movq	-952(%rbp), %rax	# exp, tmp2110
	movq	%rdx, %rsi	# tmp2109,
	movq	%rax, %rdi	# tmp2110,
	call	find_placeholder	#
	movq	%rax, -952(%rbp)	# tmp2111, exp
	.loc 1 6509 0
	cmpq	$0, -952(%rbp)	#, exp
	jne	.L1333	#,
	.loc 1 6510 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6510, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1333:
	.loc 1 6512 0
	movq	-840(%rbp), %rax	# placeholder_expr, placeholder_expr.605
	movq	(%rax), %rax	# placeholder_expr.605_581->common.chain, placeholder_list.606
	movq	%rax, placeholder_list(%rip)	# placeholder_list.606, placeholder_list
	.loc 1 6513 0
	movl	-968(%rbp), %ecx	# modifier, tmp2112
	movl	-964(%rbp), %edx	# tmode, tmp2113
	movq	-640(%rbp), %rsi	# original_target, tmp2114
	movq	-952(%rbp), %rax	# exp, tmp2115
	movq	%rax, %rdi	# tmp2115,
	call	expand_expr	#
	movq	%rax, -816(%rbp)	# tmp2116, temp
	.loc 1 6514 0
	movq	-584(%rbp), %rax	# old_list, tmp2117
	movq	%rax, placeholder_list(%rip)	# tmp2117, placeholder_list
	.loc 1 6515 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1183:
.LBE99:
	.loc 1 6524 0
	movq	placeholder_list(%rip), %rdx	# placeholder_list, placeholder_list.607
	movq	-952(%rbp), %rax	# exp, tmp2118
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	tree_cons	#
	movq	%rax, placeholder_list(%rip)	# placeholder_list.608, placeholder_list
	.loc 1 6526 0
	movq	-952(%rbp), %rax	# exp, tmp2119
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2120
	movl	-964(%rbp), %edx	# tmode, tmp2121
	movq	-640(%rbp), %rsi	# original_target, tmp2122
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -960(%rbp)	# tmp2123, target
	.loc 1 6528 0
	movq	placeholder_list(%rip), %rax	# placeholder_list, placeholder_list.609
	movq	(%rax), %rax	# placeholder_list.609_590->common.chain, placeholder_list.610
	movq	%rax, placeholder_list(%rip)	# placeholder_list.610, placeholder_list
	.loc 1 6529 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1224:
	.loc 1 6532 0
	movq	-952(%rbp), %rax	# exp, tmp2124
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _593->common.code, D.25922
	cmpb	$31, %al	#, D.25922
	jne	.L1334	#,
	.loc 1 6533 0
	movq	-952(%rbp), %rax	# exp, tmp2125
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	expand_goto	#
	jmp	.L1335	#
.L1334:
	.loc 1 6535 0
	movq	-952(%rbp), %rax	# exp, tmp2126
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	expand_computed_goto	#
.L1335:
	.loc 1 6536 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1226:
	.loc 1 6539 0
	movq	-952(%rbp), %rax	# exp, tmp2127
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	invert_truthvalue	#
	movq	%rax, %rsi	# D.25927,
	movl	$0, %edi	#,
	call	expand_exit_loop_if_false	#
	.loc 1 6541 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1228:
	.loc 1 6544 0
	movq	-952(%rbp), %rax	# exp, tmp2128
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	testq	%rax, %rax	# D.25927
	je	.L1336	#,
	.loc 1 6545 0
	movq	-952(%rbp), %rax	# exp, tmp2129
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr_stmt_value	#
.L1336:
	.loc 1 6547 0
	call	do_pending_stack_adjust	#
	.loc 1 6548 0
	movq	-952(%rbp), %rax	# exp, tmp2130
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	label_rtx	#
	movq	%rax, %rdi	# D.25924,
	call	emit_label	#
	.loc 1 6549 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1229:
	.loc 1 6552 0
	movq	-952(%rbp), %rax	# exp, tmp2131
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	testq	%rax, %rax	# D.25927
	je	.L1337	#,
	.loc 1 6553 0
	movl	$.LC6, %edi	#,
	movl	$0, %eax	#,
	call	sorry	#
.L1337:
	.loc 1 6554 0
	movq	-952(%rbp), %rax	# exp, tmp2132
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _607->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	expand_goto	#
	.loc 1 6555 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1227:
	.loc 1 6558 0
	call	push_temp_slots	#
	.loc 1 6559 0
	movl	$1, %edi	#,
	call	expand_start_loop	#
	.loc 1 6560 0
	movq	-952(%rbp), %rax	# exp, tmp2133
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr_stmt_value	#
	.loc 1 6561 0
	call	expand_end_loop	#
	.loc 1 6562 0
	call	pop_temp_slots	#
	.loc 1 6564 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1178:
.LBB100:
	.loc 1 6568 0
	movq	-952(%rbp), %rax	# exp, tmp2134
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, tmp2135
	movq	%rax, -776(%rbp)	# tmp2135, vars
	.loc 1 6569 0
	movl	$0, -900(%rbp)	#, vars_need_expansion
	.loc 1 6573 0
	movl	$0, %esi	#,
	movl	$2, %edi	#,
	call	expand_start_bindings_and_block	#
	.loc 1 6576 0
	movq	-952(%rbp), %rax	# exp, tmp2136
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	testq	%rax, %rax	# D.25927
	je	.L1338	#,
	.loc 1 6577 0
	movq	-952(%rbp), %rax	# exp, tmp2137
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	18(%rax), %eax	# *_615, D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1338	#,
	.loc 1 6578 0
	movq	-952(%rbp), %rax	# exp, tmp2138
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	insert_block	#
	.loc 1 6581 0
	jmp	.L1339	#
.L1338:
	jmp	.L1339	#
.L1341:
	.loc 1 6583 0
	movq	-776(%rbp), %rax	# vars, tmp2139
	movq	144(%rax), %rax	# vars_81->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	jne	.L1340	#,
	.loc 1 6585 0
	movl	$1, -900(%rbp)	#, vars_need_expansion
	.loc 1 6586 0
	movq	-776(%rbp), %rax	# vars, tmp2140
	movq	%rax, %rdi	# tmp2140,
	call	expand_decl	#
.L1340:
	.loc 1 6588 0
	movq	-776(%rbp), %rax	# vars, tmp2141
	movq	%rax, %rdi	# tmp2141,
	call	expand_decl_init	#
	.loc 1 6589 0
	movq	-776(%rbp), %rax	# vars, tmp2142
	movq	(%rax), %rax	# vars_81->common.chain, tmp2143
	movq	%rax, -776(%rbp)	# tmp2143, vars
.L1339:
	.loc 1 6581 0 discriminator 1
	cmpq	$0, -776(%rbp)	#, vars
	jne	.L1341	#,
	.loc 1 6592 0
	movq	-952(%rbp), %rax	# exp, tmp2144
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2145
	movl	-964(%rbp), %edx	# tmode, tmp2146
	movq	-960(%rbp), %rsi	# target, tmp2147
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -816(%rbp)	# tmp2148, temp
	.loc 1 6594 0
	movq	-952(%rbp), %rax	# exp, tmp2149
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_end_bindings	#
	.loc 1 6596 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1210:
.LBE100:
	.loc 1 6600 0
	movq	-952(%rbp), %rax	# exp, tmp2150
	addq	$32, %rax	#, D.25936
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_626], D.25924
	testq	%rax, %rax	# D.25924
	je	.L1342	#,
	.loc 1 6602 0
	movq	-952(%rbp), %rax	# exp, tmp2151
	addq	$32, %rax	#, D.25936
	movq	(%rax), %rdx	# MEM[(struct rtx_def * *)_628], D.25924
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25924
	cmpq	%rax, %rdx	# D.25924, D.25924
	jne	.L1343	#,
	.loc 1 6603 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6603, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1343:
	.loc 1 6604 0
	movq	-952(%rbp), %rax	# exp, tmp2152
	addq	$32, %rax	#, D.25936
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_631], D.25924
	movq	%rax, %rdi	# D.25924,
	call	emit_insns	#
	.loc 1 6605 0
	movq	-952(%rbp), %rax	# exp, tmp2153
	leaq	32(%rax), %rdx	#, D.25936
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25924
	movq	%rax, (%rdx)	# D.25924, MEM[(struct rtx_def * *)_633]
.L1342:
	.loc 1 6607 0
	movq	-952(%rbp), %rax	# exp, tmp2154
	addq	$40, %rax	#, D.25936
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_635], D.25924
	movq	%rax, %rdi	# D.25924,
	call	preserve_rtl_expr_result	#
	.loc 1 6608 0
	movq	-952(%rbp), %rax	# exp, tmp2155
	movq	%rax, %rdi	# tmp2155,
	call	free_temps_for_rtl_expr	#
	.loc 1 6609 0
	movq	-952(%rbp), %rax	# exp, tmp2156
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25920
	jmp	.L1735	#
.L1172:
	.loc 1 6614 0
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1344	#,
.LBB101:
	.loc 1 6618 0
	movq	-952(%rbp), %rax	# exp, tmp2157
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp2158
	movq	%rax, -768(%rbp)	# tmp2158, elt
	jmp	.L1345	#
.L1346:
	.loc 1 6619 0 discriminator 2
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-768(%rbp), %rax	# elt, tmp2159
	movq	32(%rax), %rax	# elt_82->list.value, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	.loc 1 6618 0 discriminator 2
	movq	-768(%rbp), %rax	# elt, tmp2160
	movq	(%rax), %rax	# elt_82->common.chain, tmp2161
	movq	%rax, -768(%rbp)	# tmp2161, elt
.L1345:
	.loc 1 6618 0 is_stmt 0 discriminator 1
	cmpq	$0, -768(%rbp)	#, elt
	jne	.L1346	#,
	.loc 1 6621 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1344:
.LBE101:
	.loc 1 6631 0
	movq	-952(%rbp), %rax	# exp, tmp2162
	movzbl	18(%rax), %eax	# *exp_194(D), D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1347	#,
	.loc 1 6632 0
	cmpl	$51, -912(%rbp)	#, mode
	jne	.L1348	#,
	.loc 1 6633 0
	cmpq	$0, -960(%rbp)	#, target
	je	.L1349	#,
	.loc 1 6633 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rcx	# exp, tmp2163
	movq	-960(%rbp), %rax	# target, tmp2164
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp2163,
	movq	%rax, %rdi	# tmp2164,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	je	.L1349	#,
.L1348:
	.loc 1 6634 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2165
	movzbl	17(%rax), %eax	# *exp_194(D), D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1349	#,
	.loc 1 6635 0
	movq	-648(%rbp), %rax	# type, tmp2166
	movq	40(%rax), %rax	# type_195->type.size_unit, D.25927
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	host_integerp	#
	testl	%eax, %eax	# D.25929
	je	.L1347	#,
	.loc 1 6636 0
	movq	-648(%rbp), %rax	# type, tmp2167
	movl	64(%rax), %ebx	# type_195->type.align, D.25928
	movq	-648(%rbp), %rax	# type, tmp2168
	movq	40(%rax), %rax	# type_195->type.size_unit, D.25927
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	tree_low_cst	#
	movl	%ebx, %esi	# D.25928,
	movq	%rax, %rdi	# D.25935,
	call	move_by_pieces_ninsns	#
	movq	%rax, %rdx	#, D.25935
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.612
	testl	%eax, %eax	# optimize_size.612
	jne	.L1350	#,
	.loc 1 6636 0 is_stmt 0 discriminator 1
	movq	ix86_cost(%rip), %rax	# ix86_cost, ix86_cost.613
	movl	40(%rax), %eax	# ix86_cost.613_656->move_ratio, D.25929
	movl	%eax, %eax	# D.25928, iftmp.611
	jmp	.L1351	#
.L1350:
	.loc 1 6636 0 discriminator 2
	movl	$3, %eax	#, iftmp.611
.L1351:
	.loc 1 6636 0 discriminator 3
	cmpq	%rax, %rdx	# iftmp.611, D.25935
	jb	.L1347	#,
	.loc 1 6639 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2169
	movq	%rax, %rdi	# tmp2169,
	call	mostly_zeros_p	#
	testl	%eax, %eax	# D.25929
	je	.L1349	#,
.L1347:
	.loc 1 6640 0
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1352	#,
	.loc 1 6640 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp2170
	movzbl	17(%rax), %eax	# *exp_194(D), D.25922
	andl	$2, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1352	#,
.L1349:
.LBB102:
	.loc 1 6642 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2171
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp2171,
	call	output_constant_def	#
	movq	%rax, -760(%rbp)	# tmp2172, constructor
	.loc 1 6644 0
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1353	#,
	.loc 1 6645 0
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1353	#,
	.loc 1 6646 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1353	#,
	.loc 1 6647 0
	movq	-760(%rbp), %rax	# constructor, tmp2173
	movq	%rax, %rdi	# tmp2173,
	call	validize_mem	#
	movq	%rax, -760(%rbp)	# tmp2174, constructor
.L1353:
	.loc 1 6649 0
	movq	-760(%rbp), %rax	# constructor, D.25920
	jmp	.L1735	#
.L1352:
.LBE102:
	.loc 1 6655 0
	cmpq	$0, -960(%rbp)	#, target
	je	.L1354	#,
	.loc 1 6655 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rcx	# exp, tmp2175
	movq	-960(%rbp), %rax	# target, tmp2176
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp2175,
	movq	%rax, %rdi	# tmp2176,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	je	.L1354	#,
	.loc 1 6656 0 is_stmt 1
	movq	-960(%rbp), %rax	# target, tmp2177
	movzwl	(%rax), %eax	# target_4->code, D.25925
	cmpw	$39, %ax	#, D.25925
	jne	.L1355	#,
.L1354:
	.loc 1 6662 0
	movq	-952(%rbp), %rax	# exp, tmp2178
	movzbl	17(%rax), %eax	# *exp_194(D), tmp2181
	shrb	$2, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	.loc 1 6658 0
	movzbl	%al, %ebx	# D.25921, D.25929
	.loc 1 6659 0
	movq	-648(%rbp), %rax	# type, tmp2182
	movzbl	17(%rax), %eax	# *type_195, tmp2185
	shrb	$4, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %edx	# D.25921, D.25929
	movq	-648(%rbp), %rax	# type, tmp2186
	movzbl	17(%rax), %eax	# *type_195, tmp2189
	shrb	$3, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %eax	# D.25921, D.25929
	addl	%eax, %eax	# D.25929
	orl	%eax, %edx	# D.25929, D.25929
	movq	-648(%rbp), %rax	# type, tmp2190
	movzbl	62(%rax), %eax	# *type_195, tmp2193
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %eax	# D.25921, D.25929
	sall	$2, %eax	#, D.25929
	orl	%eax, %edx	# D.25929, D.25929
	movq	-648(%rbp), %rax	# type, tmp2194
	movzbl	16(%rax), %eax	# type_195->common.code, D.25922
	cmpb	$20, %al	#, D.25922
	jne	.L1356	#,
	.loc 1 6659 0 is_stmt 0 discriminator 1
	movq	-648(%rbp), %rax	# type, tmp2195
	movq	8(%rax), %rax	# type_195->common.type, D.25927
	testq	%rax, %rax	# D.25927
	je	.L1356	#,
	.loc 1 6659 0 discriminator 3
	movl	$1, %eax	#, iftmp.614
	jmp	.L1357	#
.L1356:
	.loc 1 6659 0 discriminator 2
	movl	$0, %eax	#, iftmp.614
.L1357:
	.loc 1 6659 0 discriminator 4
	sall	$3, %eax	#, D.25929
	orl	%eax, %edx	# D.25929, D.25929
	.loc 1 6660 0 is_stmt 1 discriminator 4
	movq	-952(%rbp), %rax	# exp, tmp2196
	movzbl	17(%rax), %eax	# *exp_194(D), tmp2199
	shrb	$4, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	.loc 1 6661 0 discriminator 4
	movzbl	%al, %eax	# D.25921, D.25929
	.loc 1 6658 0 discriminator 4
	orl	%eax, %edx	# D.25929, D.25929
	movq	-648(%rbp), %rax	# type, tmp2200
	movl	%edx, %esi	# D.25929,
	movq	%rax, %rdi	# tmp2200,
	call	build_qualified_type	#
	movl	$1, %ecx	#,
	movl	%ebx, %edx	# D.25929,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	assign_temp	#
	movq	%rax, -960(%rbp)	# tmp2201, target
.L1355:
	.loc 1 6664 0
	movq	-952(%rbp), %rax	# exp, tmp2202
	movq	8(%rax), %rax	# exp_194(D)->common.type, D.25927
	movq	%rax, %rdi	# D.25927,
	call	int_size_in_bytes	#
	movq	%rax, %rdx	#, D.25934
	movq	-960(%rbp), %rsi	# target, tmp2203
	movq	-952(%rbp), %rax	# exp, tmp2204
	movq	%rdx, %rcx	# D.25934,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp2204,
	call	store_constructor	#
	.loc 1 6666 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1168:
.LBB103:
	.loc 1 6671 0
	movq	-952(%rbp), %rax	# exp, tmp2205
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, tmp2206
	movq	%rax, -576(%rbp)	# tmp2206, exp1
	.loc 1 6673 0
	leaq	-840(%rbp), %rdx	#, tmp2207
	movq	-576(%rbp), %rax	# exp1, tmp2208
	movq	%rdx, %rsi	# tmp2207,
	movq	%rax, %rdi	# tmp2208,
	call	string_constant	#
	movq	%rax, -568(%rbp)	# tmp2209, string
	.loc 1 6676 0
	cmpq	$0, -568(%rbp)	#, string
	je	.L1358	#,
	.loc 1 6677 0
	movq	-568(%rbp), %rax	# string, tmp2210
	movzbl	16(%rax), %eax	# string_696->common.code, D.25922
	cmpb	$29, %al	#, D.25922
	jne	.L1358	#,
	.loc 1 6678 0
	movq	-840(%rbp), %rax	# index, index.615
	movzbl	16(%rax), %eax	# index.615_698->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1358	#,
	.loc 1 6679 0
	movq	-568(%rbp), %rax	# string, tmp2211
	movl	32(%rax), %eax	# string_696->string.length, D.25929
	movslq	%eax, %rdx	# D.25929, D.25935
	movq	-840(%rbp), %rax	# index, index.616
	movq	%rdx, %rsi	# D.25935,
	movq	%rax, %rdi	# index.616,
	call	compare_tree_int	#
	testl	%eax, %eax	# D.25929
	jns	.L1358	#,
	.loc 1 6680 0
	movl	-912(%rbp), %eax	# mode, mode.617
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$1, %eax	#, D.25937
	jne	.L1358	#,
	.loc 1 6681 0
	movl	-912(%rbp), %eax	# mode, mode.618
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25922
	cmpb	$1, %al	#, D.25922
	jne	.L1358	#,
	.loc 1 6682 0
	cmpl	$4, -968(%rbp)	#, modifier
	je	.L1358	#,
	.loc 1 6684 0
	movq	-568(%rbp), %rax	# string, tmp2214
	movq	40(%rax), %rdx	# string_696->string.pointer, D.25938
	movq	-840(%rbp), %rax	# index, index.619
	movq	32(%rax), %rax	# index.619_709->int_cst.int_cst.low, D.25935
	addq	%rdx, %rax	# D.25938, D.25938
	movzbl	(%rax), %eax	# *_711, D.25926
	movsbq	%al, %rax	# D.25926, D.25934
	movl	-912(%rbp), %edx	# mode, tmp2215
	movl	%edx, %esi	# tmp2215,
	movq	%rax, %rdi	# D.25934,
	call	trunc_int_for_mode	#
	.loc 1 6683 0
	movq	%rax, %rsi	# D.25934,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	jmp	.L1735	#
.L1358:
	.loc 1 6687 0
	movq	-576(%rbp), %rax	# exp1, tmp2216
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp2216,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp2217, op0
	.loc 1 6688 0
	movq	-832(%rbp), %rdx	# op0, tmp2218
	movl	-912(%rbp), %eax	# mode, tmp2219
	movq	%rdx, %rsi	# tmp2218,
	movl	%eax, %edi	# tmp2219,
	call	memory_address	#
	movq	%rax, -832(%rbp)	# tmp2220, op0
	.loc 1 6689 0
	movq	-832(%rbp), %rdx	# op0, tmp2221
	movl	-912(%rbp), %eax	# mode, tmp2222
	movq	%rdx, %rsi	# tmp2221,
	movl	%eax, %edi	# tmp2222,
	call	gen_rtx_MEM	#
	movq	%rax, -816(%rbp)	# tmp2223, temp
	.loc 1 6690 0
	movq	-952(%rbp), %rcx	# exp, tmp2224
	movq	-816(%rbp), %rax	# temp, tmp2225
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp2224,
	movq	%rax, %rdi	# tmp2225,
	call	set_mem_attributes	#
	.loc 1 6695 0
	cmpl	$4, -968(%rbp)	#, modifier
	jne	.L1360	#,
	.loc 1 6695 0 is_stmt 0 discriminator 1
	movq	-648(%rbp), %rax	# type, tmp2226
	movq	%rax, %rdi	# tmp2226,
	call	readonly_fields_p	#
	testl	%eax, %eax	# D.25929
	je	.L1360	#,
	.loc 1 6696 0 is_stmt 1
	movq	-816(%rbp), %rax	# temp, tmp2227
	movzbl	3(%rax), %edx	# temp_718->unchanging, tmp2230
	orl	$4, %edx	#, tmp2231
	movb	%dl, 3(%rax)	# tmp2231, temp_718->unchanging
.L1360:
	.loc 1 6698 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1170:
.LBE103:
	.loc 1 6702 0
	movq	-952(%rbp), %rax	# exp, tmp2232
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _721->common.type, D.25927
	movzbl	16(%rax), %eax	# _722->common.code, D.25922
	cmpb	$18, %al	#, D.25922
	je	.L1361	#,
	.loc 1 6703 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6703, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1361:
.LBB104:
	.loc 1 6706 0
	movq	-952(%rbp), %rax	# exp, tmp2233
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, tmp2234
	movq	%rax, -560(%rbp)	# tmp2234, array
	.loc 1 6707 0
	movq	-560(%rbp), %rax	# array, tmp2235
	movq	8(%rax), %rax	# array_724->common.type, D.25927
	movq	24(%rax), %rax	# _725->type.values, tmp2236
	movq	%rax, -552(%rbp)	# tmp2236, domain
	.loc 1 6708 0
	cmpq	$0, -552(%rbp)	#, domain
	je	.L1362	#,
	.loc 1 6708 0 is_stmt 0 discriminator 1
	movq	-552(%rbp), %rax	# domain, tmp2237
	movq	104(%rax), %rax	# domain_726->type.minval, iftmp.620
	jmp	.L1363	#
.L1362:
	.loc 1 6708 0 discriminator 2
	movq	global_trees+88(%rip), %rax	# global_trees, iftmp.620
.L1363:
	.loc 1 6708 0 discriminator 3
	movq	%rax, -544(%rbp)	# iftmp.620, low_bound
	.loc 1 6709 0 is_stmt 1 discriminator 3
	movq	-952(%rbp), %rax	# exp, tmp2238
	movq	40(%rax), %rdx	# exp_194(D)->exp.operands, D.25927
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25927
	movq	%rdx, %rsi	# D.25927,
	movq	%rax, %rdi	# D.25927,
	call	convert	#
	movq	%rax, -752(%rbp)	# tmp2239, index
	.loc 1 6720 0 discriminator 3
	movq	-544(%rbp), %rax	# low_bound, tmp2240
	movq	%rax, %rdi	# tmp2240,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25929
	jne	.L1364	#,
	.loc 1 6721 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25927
	movq	-544(%rbp), %rdx	# low_bound, tmp2241
	movq	%rdx, %rsi	# tmp2241,
	movq	%rax, %rdi	# D.25927,
	call	convert	#
	movq	%rax, %rdx	#, D.25927
	movq	-752(%rbp), %rax	# index, tmp2242
	movq	%rdx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp2242,
	call	size_diffop	#
	movq	%rax, -752(%rbp)	# tmp2243, index
.L1364:
	.loc 1 6728 0
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1365	#,
	.loc 1 6728 0 is_stmt 0 discriminator 1
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1365	#,
	.loc 1 6729 0 is_stmt 1
	movq	-560(%rbp), %rax	# array, tmp2244
	movzbl	16(%rax), %eax	# array_724->common.code, D.25922
	cmpb	$29, %al	#, D.25922
	jne	.L1365	#,
	.loc 1 6730 0
	movq	-752(%rbp), %rax	# index, tmp2245
	movzbl	16(%rax), %eax	# index_84->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1365	#,
	.loc 1 6731 0
	movq	-560(%rbp), %rax	# array, tmp2246
	movl	32(%rax), %eax	# array_724->string.length, D.25929
	movslq	%eax, %rdx	# D.25929, D.25935
	movq	-752(%rbp), %rax	# index, tmp2247
	movq	%rdx, %rsi	# D.25935,
	movq	%rax, %rdi	# tmp2247,
	call	compare_tree_int	#
	testl	%eax, %eax	# D.25929
	jns	.L1365	#,
	.loc 1 6732 0
	movl	-912(%rbp), %eax	# mode, mode.621
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$1, %eax	#, D.25937
	jne	.L1365	#,
	.loc 1 6733 0
	movl	-912(%rbp), %eax	# mode, mode.622
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25922
	cmpb	$1, %al	#, D.25922
	jne	.L1365	#,
	.loc 1 6735 0
	movq	-560(%rbp), %rax	# array, tmp2250
	movq	40(%rax), %rdx	# array_724->string.pointer, D.25938
	movq	-752(%rbp), %rax	# index, tmp2251
	movq	32(%rax), %rax	# index_84->int_cst.int_cst.low, D.25935
	addq	%rdx, %rax	# D.25938, D.25938
	movzbl	(%rax), %eax	# *_748, D.25926
	movsbq	%al, %rax	# D.25926, D.25934
	movl	-912(%rbp), %edx	# mode, tmp2252
	movl	%edx, %esi	# tmp2252,
	movq	%rax, %rdi	# D.25934,
	call	trunc_int_for_mode	#
	.loc 1 6734 0
	movq	%rax, %rsi	# D.25934,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	jmp	.L1735	#
.L1365:
	.loc 1 6743 0
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1366	#,
	.loc 1 6743 0 is_stmt 0 discriminator 1
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1366	#,
	.loc 1 6744 0 is_stmt 1
	movq	-560(%rbp), %rax	# array, tmp2253
	movzbl	16(%rax), %eax	# array_724->common.code, D.25922
	cmpb	$46, %al	#, D.25922
	jne	.L1366	#,
	.loc 1 6744 0 is_stmt 0 discriminator 1
	movq	-560(%rbp), %rax	# array, tmp2254
	movzbl	17(%rax), %eax	# *array_724, D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1366	#,
	.loc 1 6745 0 is_stmt 1
	movq	-752(%rbp), %rax	# index, tmp2255
	movzbl	16(%rax), %eax	# index_84->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1366	#,
	.loc 1 6747 0
	movq	-952(%rbp), %rax	# exp, tmp2256
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	40(%rax), %rax	# _757->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	list_length	#
	.loc 1 6746 0
	movslq	%eax, %rdx	# D.25929, D.25935
	movq	-752(%rbp), %rax	# index, tmp2257
	movq	%rdx, %rsi	# D.25935,
	movq	%rax, %rdi	# tmp2257,
	call	compare_tree_int	#
	testl	%eax, %eax	# D.25929
	jns	.L1366	#,
.LBB105:
	.loc 1 6752 0
	movq	-952(%rbp), %rax	# exp, tmp2258
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	40(%rax), %rax	# _762->exp.operands, tmp2259
	movq	%rax, -736(%rbp)	# tmp2259, elem
	.loc 1 6753 0
	movq	-752(%rbp), %rax	# index, tmp2260
	movq	32(%rax), %rax	# index_84->int_cst.int_cst.low, D.25935
	movq	%rax, -744(%rbp)	# D.25935, i
	.loc 1 6752 0
	jmp	.L1367	#
.L1369:
	.loc 1 6754 0 discriminator 1
	subq	$1, -744(%rbp)	#, i
	movq	-736(%rbp), %rax	# elem, tmp2261
	movq	(%rax), %rax	# elem_86->common.chain, tmp2262
	movq	%rax, -736(%rbp)	# tmp2262, elem
.L1367:
	.loc 1 6752 0 discriminator 1
	cmpq	$0, -736(%rbp)	#, elem
	je	.L1368	#,
	.loc 1 6754 0
	cmpq	$0, -744(%rbp)	#, i
	jne	.L1369	#,
.L1368:
	.loc 1 6757 0
	cmpq	$0, -736(%rbp)	#, elem
	je	.L1370	#,
	.loc 1 6758 0
	movq	-736(%rbp), %rax	# elem, tmp2263
	movq	32(%rax), %rax	# elem_86->list.value, D.25927
	movq	%rax, %rdi	# D.25927,
	call	fold	#
	movl	-968(%rbp), %ecx	# modifier, tmp2264
	movl	-964(%rbp), %edx	# tmode, tmp2265
	movq	-960(%rbp), %rsi	# target, tmp2266
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	jmp	.L1735	#
.L1370:
.LBE105:
	.loc 1 6749 0
	jmp	.L1167	#
.L1366:
	.loc 1 6762 0
	movl	optimize(%rip), %eax	# optimize, optimize.623
	testl	%eax, %eax	# optimize.623
	jle	.L1167	#,
	.loc 1 6763 0
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1167	#,
	.loc 1 6764 0
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1167	#,
	.loc 1 6765 0
	movq	-560(%rbp), %rax	# array, tmp2267
	movzbl	17(%rax), %eax	# *array_724, D.25922
	andl	$16, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1167	#,
	.loc 1 6765 0 is_stmt 0 discriminator 1
	movq	-560(%rbp), %rax	# array, tmp2268
	movzbl	17(%rax), %eax	# *array_724, D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1167	#,
	.loc 1 6766 0 is_stmt 1
	movq	-560(%rbp), %rax	# array, tmp2269
	movzbl	16(%rax), %eax	# array_724->common.code, D.25922
	cmpb	$34, %al	#, D.25922
	jne	.L1167	#,
	.loc 1 6766 0 is_stmt 0 discriminator 1
	movq	-560(%rbp), %rax	# array, tmp2270
	movq	104(%rax), %rax	# array_724->decl.initial, D.25927
	testq	%rax, %rax	# D.25927
	je	.L1167	#,
	.loc 1 6767 0 is_stmt 1
	movq	-560(%rbp), %rax	# array, tmp2271
	movq	104(%rax), %rax	# array_724->decl.initial, D.25927
	movzbl	16(%rax), %eax	# _778->common.code, D.25922
	testb	%al, %al	# D.25922
	je	.L1167	#,
	.loc 1 6769 0
	movq	-752(%rbp), %rax	# index, tmp2272
	movzbl	16(%rax), %eax	# index_84->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1167	#,
.LBB106:
	.loc 1 6771 0
	movq	-560(%rbp), %rax	# array, tmp2273
	movq	104(%rax), %rax	# array_724->decl.initial, tmp2274
	movq	%rax, -536(%rbp)	# tmp2274, init
	.loc 1 6773 0
	movq	-536(%rbp), %rax	# init, tmp2275
	movzbl	16(%rax), %eax	# init_781->common.code, D.25922
	cmpb	$46, %al	#, D.25922
	jne	.L1371	#,
.LBB107:
	.loc 1 6777 0
	movq	-536(%rbp), %rax	# init, tmp2276
	movq	40(%rax), %rax	# init_781->exp.operands, tmp2277
	movq	%rax, -728(%rbp)	# tmp2277, elem
	jmp	.L1372	#
.L1374:
	.loc 1 6780 0
	movq	-728(%rbp), %rax	# elem, tmp2278
	movq	(%rax), %rax	# elem_87->common.chain, tmp2279
	movq	%rax, -728(%rbp)	# tmp2279, elem
.L1372:
	.loc 1 6777 0 discriminator 1
	cmpq	$0, -728(%rbp)	#, elem
	je	.L1373	#,
	.loc 1 6779 0
	movq	-728(%rbp), %rax	# elem, tmp2280
	movq	24(%rax), %rax	# elem_87->list.purpose, D.25927
	movq	-752(%rbp), %rdx	# index, tmp2281
	movq	%rdx, %rsi	# tmp2281,
	movq	%rax, %rdi	# D.25927,
	call	tree_int_cst_equal	#
	testl	%eax, %eax	# D.25929
	je	.L1374	#,
.L1373:
	.loc 1 6783 0
	cmpq	$0, -728(%rbp)	#, elem
	je	.L1375	#,
	.loc 1 6783 0 is_stmt 0 discriminator 1
	movq	-728(%rbp), %rax	# elem, tmp2282
	movq	32(%rax), %rax	# elem_87->list.value, D.25927
	movzbl	17(%rax), %eax	# *_787, D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1375	#,
	.loc 1 6784 0 is_stmt 1
	movq	-728(%rbp), %rax	# elem, tmp2283
	movq	32(%rax), %rax	# elem_87->list.value, D.25927
	movq	%rax, %rdi	# D.25927,
	call	fold	#
	movl	-968(%rbp), %ecx	# modifier, tmp2284
	movl	-964(%rbp), %edx	# tmode, tmp2285
	movq	-960(%rbp), %rsi	# target, tmp2286
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	jmp	.L1735	#
.L1375:
.LBE107:
	jmp	.L1167	#
.L1371:
	.loc 1 6787 0
	movq	-536(%rbp), %rax	# init, tmp2287
	movzbl	16(%rax), %eax	# init_781->common.code, D.25922
	cmpb	$29, %al	#, D.25922
	jne	.L1167	#,
	.loc 1 6789 0
	movq	-536(%rbp), %rax	# init, tmp2288
	movl	32(%rax), %eax	# init_781->string.length, D.25929
	.loc 1 6788 0
	movslq	%eax, %rdx	# D.25929, D.25935
	movq	-752(%rbp), %rax	# index, tmp2289
	movq	%rdx, %rsi	# D.25935,
	movq	%rax, %rdi	# tmp2289,
	call	compare_tree_int	#
	testl	%eax, %eax	# D.25929
	jns	.L1167	#,
.LBB108:
	.loc 1 6791 0
	movq	-536(%rbp), %rax	# init, tmp2290
	movq	8(%rax), %rax	# init_781->common.type, D.25927
	movq	8(%rax), %rax	# _797->common.type, tmp2291
	movq	%rax, -528(%rbp)	# tmp2291, type
	.loc 1 6792 0
	movq	-528(%rbp), %rax	# type, tmp2292
	movzbl	61(%rax), %eax	# *type_798, tmp2295
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, tmp2296
	movl	%eax, -896(%rbp)	# tmp2296, mode
	.loc 1 6794 0
	movl	-896(%rbp), %eax	# mode, mode.624
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$1, %eax	#, D.25937
	jne	.L1167	#,
	.loc 1 6795 0
	movl	-896(%rbp), %eax	# mode, mode.625
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25922
	cmpb	$1, %al	#, D.25922
	jne	.L1167	#,
	.loc 1 6796 0
	movq	-536(%rbp), %rax	# init, tmp2299
	movq	40(%rax), %rdx	# init_781->string.pointer, D.25938
	movq	-752(%rbp), %rax	# index, tmp2300
	movq	32(%rax), %rax	# index_84->int_cst.int_cst.low, D.25935
	addq	%rdx, %rax	# D.25938, D.25938
	movzbl	(%rax), %eax	# *_807, D.25926
	movsbq	%al, %rax	# D.25926, D.25934
	movl	-896(%rbp), %edx	# mode, tmp2301
	movl	%edx, %esi	# tmp2301,
	movq	%rax, %rdi	# D.25934,
	call	trunc_int_for_mode	#
	movq	%rax, %rsi	# D.25934,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	jmp	.L1735	#
.L1167:
.LBE108:
.LBE106:
.LBE104:
	.loc 1 6812 0
	cmpl	$39, -916(%rbp)	#, code
	jne	.L1376	#,
	.loc 1 6813 0
	movq	-952(%rbp), %rax	# exp, tmp2302
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _812->common.code, D.25922
	cmpb	$46, %al	#, D.25922
	jne	.L1376	#,
	.loc 1 6814 0
	movq	-952(%rbp), %rax	# exp, tmp2303
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	24(%rax), %rax	# _814->real_cst.rtl, D.25924
	testq	%rax, %rax	# D.25924
	jne	.L1376	#,
.LBB109:
	.loc 1 6818 0
	movq	-952(%rbp), %rax	# exp, tmp2304
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	40(%rax), %rax	# _816->exp.operands, tmp2305
	movq	%rax, -720(%rbp)	# tmp2305, elt
	jmp	.L1377	#
.L1382:
	.loc 1 6820 0
	movq	-720(%rbp), %rax	# elt, tmp2306
	movq	24(%rax), %rdx	# elt_88->list.purpose, D.25927
	movq	-952(%rbp), %rax	# exp, tmp2307
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	cmpq	%rax, %rdx	# D.25927, D.25927
	jne	.L1378	#,
	.loc 1 6828 0
	movq	-720(%rbp), %rax	# elt, tmp2308
	movq	24(%rax), %rax	# elt_88->list.purpose, D.25927
	movzbl	49(%rax), %eax	# *_820, D.25922
	andl	$16, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1379	#,
	.loc 1 6829 0
	movq	-720(%rbp), %rax	# elt, tmp2309
	movq	24(%rax), %rax	# elt_88->list.purpose, D.25927
	movzbl	48(%rax), %eax	# _823->decl.mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$1, %eax	#, D.25937
	jne	.L1378	#,
	.loc 1 6831 0
	movq	-720(%rbp), %rax	# elt, tmp2311
	movq	24(%rax), %rax	# elt_88->list.purpose, D.25927
	movzbl	48(%rax), %eax	# _827->decl.mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25925
	cmpw	$64, %ax	#, D.25925
	ja	.L1378	#,
.L1379:
	.loc 1 6834 0
	movq	-720(%rbp), %rax	# elt, tmp2313
	movq	32(%rax), %rax	# elt_88->list.value, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2314
	movl	-964(%rbp), %edx	# tmode, tmp2315
	movq	-960(%rbp), %rsi	# target, tmp2316
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp2317, op0
	.loc 1 6835 0
	movq	-720(%rbp), %rax	# elt, tmp2318
	movq	24(%rax), %rax	# elt_88->list.purpose, D.25927
	movzbl	49(%rax), %eax	# *_833, D.25922
	andl	$16, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1380	#,
.LBB110:
	.loc 1 6838 0
	movq	-720(%rbp), %rax	# elt, tmp2319
	movq	24(%rax), %rax	# elt_88->list.purpose, D.25927
	movq	40(%rax), %rax	# _836->decl.size, D.25927
	movq	32(%rax), %rax	# _837->int_cst.int_cst.low, D.25935
	.loc 1 6837 0
	movq	%rax, -520(%rbp)	# D.25935, bitsize
	.loc 1 6840 0
	movq	-720(%rbp), %rax	# elt, tmp2320
	movq	24(%rax), %rax	# elt_88->list.purpose, D.25927
	movq	8(%rax), %rax	# _840->common.type, D.25927
	movzbl	61(%rax), %eax	# *_841, tmp2323
	shrb	%al	# D.25923
	.loc 1 6839 0
	movzbl	%al, %eax	# D.25923, tmp2324
	movl	%eax, -892(%rbp)	# tmp2324, imode
	.loc 1 6842 0
	movq	-720(%rbp), %rax	# elt, tmp2325
	movq	24(%rax), %rax	# elt_88->list.purpose, D.25927
	movq	8(%rax), %rax	# _844->common.type, D.25927
	movzbl	17(%rax), %eax	# *_845, D.25922
	andl	$32, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1381	#,
	.loc 1 6844 0
	movq	-520(%rbp), %rax	# bitsize, tmp2326
	movl	$1, %edx	#, tmp2327
	movl	%eax, %ecx	# D.25929, tmp3840
	salq	%cl, %rdx	# tmp3840, D.25934
	movq	%rdx, %rax	# D.25934, D.25934
	subq	$1, %rax	#, D.25934
	movq	%rax, %rsi	# D.25934,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -824(%rbp)	# tmp2328, op1
	.loc 1 6845 0
	movq	-960(%rbp), %rcx	# target, tmp2329
	movq	-824(%rbp), %rdx	# op1, tmp2330
	movq	-832(%rbp), %rsi	# op0, tmp2331
	movl	-892(%rbp), %eax	# imode, tmp2332
	movl	%eax, %edi	# tmp2332,
	call	expand_and	#
	movq	%rax, -832(%rbp)	# tmp2333, op0
	jmp	.L1380	#
.L1381:
.LBB111:
	.loc 1 6850 0
	movl	-892(%rbp), %eax	# imode, imode.626
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25925
	movzwl	%ax, %eax	# D.25925, D.25934
	subq	-520(%rbp), %rax	# bitsize, D.25934
	.loc 1 6849 0
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25935,
	call	build_int_2_wide	#
	movq	%rax, -512(%rbp)	# tmp2335, count
	.loc 1 6853 0
	movq	-960(%rbp), %rsi	# target, tmp2336
	movq	-512(%rbp), %rcx	# count, tmp2337
	movq	-832(%rbp), %rdx	# op0, tmp2338
	movl	-892(%rbp), %eax	# imode, tmp2339
	movl	$0, %r9d	#,
	movq	%rsi, %r8	# tmp2336,
	movl	%eax, %esi	# tmp2339,
	movl	$82, %edi	#,
	call	expand_shift	#
	movq	%rax, -832(%rbp)	# tmp2340, op0
	.loc 1 6855 0
	movq	-960(%rbp), %rsi	# target, tmp2341
	movq	-512(%rbp), %rcx	# count, tmp2342
	movq	-832(%rbp), %rdx	# op0, tmp2343
	movl	-892(%rbp), %eax	# imode, tmp2344
	movl	$0, %r9d	#,
	movq	%rsi, %r8	# tmp2341,
	movl	%eax, %esi	# tmp2344,
	movl	$83, %edi	#,
	call	expand_shift	#
	movq	%rax, -832(%rbp)	# tmp2345, op0
.L1380:
.LBE111:
.LBE110:
	.loc 1 6860 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1378:
	.loc 1 6819 0
	movq	-720(%rbp), %rax	# elt, tmp2346
	movq	(%rax), %rax	# elt_88->common.chain, tmp2347
	movq	%rax, -720(%rbp)	# tmp2347, elt
.L1377:
	.loc 1 6818 0 discriminator 1
	cmpq	$0, -720(%rbp)	#, elt
	jne	.L1382	#,
.L1376:
.LBE109:
.LBB112:
	.loc 1 6868 0
	movl	$0, -928(%rbp)	#, volatilep
	.loc 1 6869 0
	leaq	-936(%rbp), %r9	#, tmp2348
	leaq	-932(%rbp), %r8	#, tmp2349
	leaq	-840(%rbp), %rcx	#, tmp2350
	leaq	-848(%rbp), %rdx	#, tmp2351
	leaq	-856(%rbp), %rsi	#, tmp2352
	movq	-952(%rbp), %rax	# exp, tmp2353
	leaq	-928(%rbp), %rdi	#, tmp2354
	movq	%rdi, (%rsp)	# tmp2354,
	movq	%rax, %rdi	# tmp2353,
	call	get_inner_reference	#
	movq	%rax, -504(%rbp)	# tmp2355, tem
	.loc 1 6876 0
	movq	-504(%rbp), %rax	# tem, tmp2356
	cmpq	-952(%rbp), %rax	# exp, tmp2356
	jne	.L1383	#,
	.loc 1 6877 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6877, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1383:
	.loc 1 6884 0
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1384	#,
	.loc 1 6891 0
	cmpl	$2, -968(%rbp)	#, modifier
	jne	.L1385	#,
.L1384:
	.loc 1 6884 0 discriminator 1
	movl	-968(%rbp), %edx	# modifier, iftmp.627
	jmp	.L1386	#
.L1385:
	.loc 1 6884 0 is_stmt 0
	movl	$0, %edx	#, iftmp.627
.L1386:
	.loc 1 6885 0 is_stmt 1 discriminator 2
	movq	-504(%rbp), %rax	# tem, tmp2357
	movq	8(%rax), %rax	# tem_863->common.type, D.25927
	movzbl	16(%rax), %eax	# _866->common.code, D.25922
	.loc 1 6884 0 discriminator 2
	cmpb	$21, %al	#, D.25922
	jne	.L1387	#,
	.loc 1 6886 0
	movq	-504(%rbp), %rax	# tem, tmp2358
	movq	8(%rax), %rax	# tem_863->common.type, D.25927
	movq	32(%rax), %rax	# _868->type.size, D.25927
	movzbl	16(%rax), %eax	# _869->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	je	.L1387	#,
	.loc 1 6884 0
	movq	-960(%rbp), %rax	# target, iftmp.628
	jmp	.L1388	#
.L1387:
	.loc 1 6884 0 is_stmt 0 discriminator 3
	movl	$0, %eax	#, iftmp.628
.L1388:
	.loc 1 6883 0 is_stmt 1
	movq	-504(%rbp), %rdi	# tem, tmp2359
	movl	%edx, %ecx	# iftmp.627,
	movl	$0, %edx	#,
	movq	%rax, %rsi	# iftmp.628,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp2360, op0
	movq	-832(%rbp), %rax	# op0, tmp2361
	movq	%rax, -496(%rbp)	# tmp2361, orig_op0
	.loc 1 6896 0
	movq	-832(%rbp), %rax	# op0, tmp2362
	movzwl	(%rax), %eax	# op0_873->code, D.25925
	cmpw	$67, %ax	#, D.25925
	je	.L1389	#,
	.loc 1 6896 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2363
	movzwl	(%rax), %eax	# op0_873->code, D.25925
	cmpw	$68, %ax	#, D.25925
	je	.L1389	#,
	movq	-832(%rbp), %rax	# op0, tmp2364
	movzwl	(%rax), %eax	# op0_873->code, D.25925
	cmpw	$54, %ax	#, D.25925
	je	.L1389	#,
	movq	-832(%rbp), %rax	# op0, tmp2365
	movzwl	(%rax), %eax	# op0_873->code, D.25925
	cmpw	$55, %ax	#, D.25925
	je	.L1389	#,
	movq	-832(%rbp), %rax	# op0, tmp2366
	movzwl	(%rax), %eax	# op0_873->code, D.25925
	cmpw	$58, %ax	#, D.25925
	je	.L1389	#,
	movq	-832(%rbp), %rax	# op0, tmp2367
	movzwl	(%rax), %eax	# op0_873->code, D.25925
	cmpw	$134, %ax	#, D.25925
	je	.L1389	#,
	movq	-832(%rbp), %rax	# op0, tmp2368
	movzwl	(%rax), %eax	# op0_873->code, D.25925
	cmpw	$56, %ax	#, D.25925
	je	.L1389	#,
	movq	-832(%rbp), %rax	# op0, tmp2369
	movzwl	(%rax), %eax	# op0_873->code, D.25925
	cmpw	$140, %ax	#, D.25925
	jne	.L1390	#,
.L1389:
.LBB113:
	.loc 1 6898 0 is_stmt 1
	movq	-504(%rbp), %rax	# tem, tmp2370
	movq	8(%rax), %rax	# tem_863->common.type, D.25927
	movzbl	61(%rax), %eax	# *_883, tmp2373
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, tmp2374
	movl	%eax, -888(%rbp)	# tmp2374, mode
	.loc 1 6899 0
	cmpl	$51, -888(%rbp)	#, mode
	je	.L1391	#,
	.loc 1 6900 0
	movq	-840(%rbp), %rax	# offset, offset.629
	testq	%rax, %rax	# offset.629
	jne	.L1391	#,
	.loc 1 6901 0
	movq	-832(%rbp), %rdx	# op0, tmp2375
	movl	-888(%rbp), %eax	# mode, tmp2376
	movq	%rdx, %rsi	# tmp2375,
	movl	%eax, %edi	# tmp2376,
	call	force_reg	#
	movq	%rax, -832(%rbp)	# tmp2377, op0
	jmp	.L1390	#
.L1391:
	.loc 1 6903 0
	movq	-832(%rbp), %rdx	# op0, tmp2378
	movl	-888(%rbp), %eax	# mode, tmp2379
	movq	%rdx, %rsi	# tmp2378,
	movl	%eax, %edi	# tmp2379,
	call	force_const_mem	#
	movq	%rax, %rdi	# D.25924,
	call	validize_mem	#
	movq	%rax, -832(%rbp)	# tmp2380, op0
.L1390:
.LBE113:
	.loc 1 6906 0
	movq	-840(%rbp), %rax	# offset, offset.630
	testq	%rax, %rax	# offset.630
	je	.L1392	#,
.LBB114:
	.loc 1 6908 0
	movq	-840(%rbp), %rax	# offset, offset.631
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# offset.631,
	call	expand_expr	#
	movq	%rax, -712(%rbp)	# tmp2381, offset_rtx
	.loc 1 6914 0
	movq	-832(%rbp), %rax	# op0, tmp2382
	movzwl	(%rax), %eax	# op0_24->code, D.25925
	cmpw	$61, %ax	#, D.25925
	je	.L1393	#,
	.loc 1 6914 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2383
	movzwl	(%rax), %eax	# op0_24->code, D.25925
	cmpw	$63, %ax	#, D.25925
	je	.L1393	#,
	.loc 1 6915 0 is_stmt 1
	movq	-832(%rbp), %rax	# op0, tmp2384
	movzwl	(%rax), %eax	# op0_24->code, D.25925
	cmpw	$65, %ax	#, D.25925
	je	.L1393	#,
	.loc 1 6915 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2385
	movzwl	(%rax), %eax	# op0_24->code, D.25925
	cmpw	$70, %ax	#, D.25925
	jne	.L1394	#,
.L1393:
	.loc 1 6919 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2386
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _897->common.code, D.25922
	cmpb	$118, %al	#, D.25922
	jne	.L1395	#,
	.loc 1 6921 0
	movq	-952(%rbp), %rax	# exp, tmp2387
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	put_var_into_stack	#
	.loc 1 6922 0
	movq	-952(%rbp), %rax	# exp, tmp2388
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	48(%rax), %rax	# _900->exp.operands, tmp2389
	movq	%rax, -832(%rbp)	# tmp2389, op0
	jmp	.L1394	#
.L1395:
.LBB115:
	.loc 1 6928 0
	movq	-504(%rbp), %rax	# tem, tmp2390
	movq	8(%rax), %rax	# tem_863->common.type, D.25927
	movzbl	17(%rax), %eax	# *_902, tmp2393
	shrb	$4, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %edx	# D.25921, D.25929
	movq	-504(%rbp), %rax	# tem, tmp2394
	movq	8(%rax), %rax	# tem_863->common.type, D.25927
	movzbl	17(%rax), %eax	# *_905, tmp2397
	shrb	$3, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %eax	# D.25921, D.25929
	addl	%eax, %eax	# D.25929
	orl	%eax, %edx	# D.25929, D.25929
	movq	-504(%rbp), %rax	# tem, tmp2398
	movq	8(%rax), %rax	# tem_863->common.type, D.25927
	movzbl	62(%rax), %eax	# *_910, tmp2401
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %eax	# D.25921, D.25929
	sall	$2, %eax	#, D.25929
	orl	%eax, %edx	# D.25929, D.25929
	movq	-504(%rbp), %rax	# tem, tmp2402
	movq	8(%rax), %rax	# tem_863->common.type, D.25927
	movzbl	16(%rax), %eax	# _915->common.code, D.25922
	cmpb	$20, %al	#, D.25922
	jne	.L1396	#,
	.loc 1 6928 0 is_stmt 0 discriminator 1
	movq	-504(%rbp), %rax	# tem, tmp2403
	movq	8(%rax), %rax	# tem_863->common.type, D.25927
	movq	8(%rax), %rax	# _917->common.type, D.25927
	testq	%rax, %rax	# D.25927
	je	.L1396	#,
	.loc 1 6928 0 discriminator 3
	movl	$1, %eax	#, iftmp.632
	jmp	.L1397	#
.L1396:
	.loc 1 6928 0 discriminator 2
	movl	$0, %eax	#, iftmp.632
.L1397:
	.loc 1 6928 0 discriminator 4
	sall	$3, %eax	#, D.25929
	orl	%edx, %eax	# D.25929, D.25929
	.loc 1 6927 0 is_stmt 1 discriminator 4
	orl	$1, %eax	#, D.25929
	movl	%eax, %edx	# D.25929, D.25929
	movq	-504(%rbp), %rax	# tem, tmp2404
	movq	8(%rax), %rax	# tem_863->common.type, D.25927
	.loc 1 6926 0 discriminator 4
	movl	%edx, %esi	# D.25929,
	movq	%rax, %rdi	# D.25927,
	call	build_qualified_type	#
	movq	%rax, -488(%rbp)	# tmp2405, nt
	.loc 1 6930 0 discriminator 4
	movq	-488(%rbp), %rax	# nt, tmp2406
	movl	$1, %ecx	#,
	movl	$1, %edx	#,
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp2406,
	call	assign_temp	#
	movq	%rax, -480(%rbp)	# tmp2407, memloc
	.loc 1 6932 0 discriminator 4
	movq	-832(%rbp), %rdx	# op0, tmp2408
	movq	-480(%rbp), %rax	# memloc, tmp2409
	movq	%rdx, %rsi	# tmp2408,
	movq	%rax, %rdi	# tmp2409,
	call	emit_move_insn	#
	.loc 1 6933 0 discriminator 4
	movq	-480(%rbp), %rax	# memloc, tmp2410
	movq	%rax, -832(%rbp)	# tmp2410, op0
.L1394:
.LBE115:
	.loc 1 6937 0
	movq	-832(%rbp), %rax	# op0, tmp2411
	movzwl	(%rax), %eax	# op0_25->code, D.25925
	cmpw	$66, %ax	#, D.25925
	je	.L1398	#,
	.loc 1 6938 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6938, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1398:
	.loc 1 6944 0
	movq	-712(%rbp), %rax	# offset_rtx, tmp2412
	movzbl	2(%rax), %eax	# offset_rtx_892->mode, D.25922
	movzbl	%al, %edx	# D.25922, D.25928
	movl	ptr_mode(%rip), %eax	# ptr_mode, ptr_mode.633
	cmpl	%eax, %edx	# ptr_mode.633, D.25928
	je	.L1399	#,
	.loc 1 6945 0
	movl	ptr_mode(%rip), %eax	# ptr_mode, ptr_mode.634
	movq	-712(%rbp), %rcx	# offset_rtx, tmp2413
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp2413,
	movl	%eax, %edi	# ptr_mode.634,
	call	convert_to_mode	#
	movq	%rax, -712(%rbp)	# tmp2414, offset_rtx
.L1399:
	.loc 1 6950 0
	movq	-832(%rbp), %rax	# op0, tmp2415
	movzwl	(%rax), %eax	# op0_25->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1400	#,
	.loc 1 6951 0
	movq	-832(%rbp), %rax	# op0, tmp2416
	movzbl	2(%rax), %eax	# op0_25->mode, D.25922
	cmpb	$51, %al	#, D.25922
	jne	.L1400	#,
	.loc 1 6952 0
	movq	-832(%rbp), %rax	# op0, tmp2417
	movq	8(%rax), %rax	# op0_25->fld[0].rtx, D.25924
	movzbl	2(%rax), %eax	# _936->mode, D.25922
	testb	%al, %al	# D.25922
	je	.L1400	#,
	.loc 1 6953 0
	movq	-856(%rbp), %rax	# bitsize, bitsize.635
	testq	%rax, %rax	# bitsize.635
	je	.L1400	#,
	.loc 1 6954 0
	movq	-848(%rbp), %rax	# bitpos, bitpos.636
	movq	-856(%rbp), %rcx	# bitsize, bitsize.637
	cqto
	idivq	%rcx	# bitsize.637
	movq	%rdx, %rax	# tmp2418, D.25934
	testq	%rax, %rax	# D.25934
	jne	.L1400	#,
	.loc 1 6955 0
	movq	-856(%rbp), %rbx	# bitsize, bitsize.638
	movl	-932(%rbp), %eax	# mode1, mode1.639
	movl	%eax, %edi	# mode1.639,
	call	get_mode_alignment	#
	movl	%eax, %ecx	# D.25928, D.25934
	movq	%rbx, %rax	# bitsize.638, tmp2421
	cqto
	idivq	%rcx	# D.25934
	movq	%rdx, %rax	# tmp2420, D.25934
	testq	%rax, %rax	# D.25934
	jne	.L1400	#,
	.loc 1 6956 0
	movq	-832(%rbp), %rax	# op0, tmp2422
	movq	16(%rax), %rax	# op0_25->fld[1].rtmem, D.25939
	testq	%rax, %rax	# D.25939
	je	.L1401	#,
	.loc 1 6956 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2423
	movq	16(%rax), %rax	# op0_25->fld[1].rtmem, D.25939
	movl	32(%rax), %ebx	# _948->align, iftmp.640
	jmp	.L1402	#
.L1401:
	.loc 1 6956 0 discriminator 2
	movl	$8, %ebx	#, iftmp.640
.L1402:
	.loc 1 6956 0 discriminator 3
	movl	-932(%rbp), %eax	# mode1, mode1.641
	movl	%eax, %edi	# mode1.641,
	call	get_mode_alignment	#
	cmpl	%eax, %ebx	# D.25928, iftmp.640
	jne	.L1400	#,
	.loc 1 6958 0 is_stmt 1
	movq	-848(%rbp), %rax	# bitpos, bitpos.642
	leaq	7(%rax), %rdx	#, tmp2425
	testq	%rax, %rax	# tmp2424
	cmovs	%rdx, %rax	# tmp2425,, tmp2424
	sarq	$3, %rax	#, tmp2426
	movq	%rax, %rdx	# tmp2426, D.25934
	movl	-932(%rbp), %esi	# mode1, mode1.643
	movq	-832(%rbp), %rax	# op0, tmp2427
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp2427,
	call	adjust_address_1	#
	movq	%rax, -832(%rbp)	# tmp2428, op0
	.loc 1 6959 0
	movq	$0, -848(%rbp)	#, bitpos
.L1400:
	.loc 1 6962 0
	movq	-840(%rbp), %rax	# offset, offset.644
	movq	%rax, %rdi	# offset.644,
	call	highest_pow2_factor	#
	movq	%rax, %rdx	#, D.25934
	movq	-712(%rbp), %rcx	# offset_rtx, tmp2429
	movq	-832(%rbp), %rax	# op0, tmp2430
	movq	%rcx, %rsi	# tmp2429,
	movq	%rax, %rdi	# tmp2430,
	call	offset_address	#
	movq	%rax, -832(%rbp)	# tmp2431, op0
.L1392:
.LBE114:
	.loc 1 6968 0
	movq	-832(%rbp), %rax	# op0, tmp2432
	movzwl	(%rax), %eax	# op0_27->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1403	#,
	.loc 1 6968 0 is_stmt 0 discriminator 1
	movq	-848(%rbp), %rax	# bitpos, bitpos.645
	testq	%rax, %rax	# bitpos.645
	jne	.L1403	#,
	movq	-840(%rbp), %rax	# offset, offset.646
	testq	%rax, %rax	# offset.646
	je	.L1403	#,
	.loc 1 6969 0 is_stmt 1
	movq	-840(%rbp), %rax	# offset, offset.647
	movq	-504(%rbp), %rdx	# tem, tmp2433
	movq	%rdx, %rsi	# tmp2433,
	movq	%rax, %rdi	# offset.647,
	call	is_aligning_offset	#
	testl	%eax, %eax	# D.25929
	je	.L1403	#,
	.loc 1 6970 0
	movq	-832(%rbp), %rax	# op0, tmp2434
	movl	$128, %esi	#,
	movq	%rax, %rdi	# tmp2434,
	call	set_mem_align	#
.L1403:
	.loc 1 6973 0
	movq	-832(%rbp), %rax	# op0, tmp2435
	movzwl	(%rax), %eax	# op0_27->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1404	#,
	.loc 1 6973 0 is_stmt 0 discriminator 1
	movl	-928(%rbp), %eax	# volatilep, volatilep.648
	testl	%eax, %eax	# volatilep.648
	je	.L1404	#,
	movq	-832(%rbp), %rax	# op0, tmp2436
	movzbl	3(%rax), %eax	# *op0_27, D.25922
	andl	$8, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1404	#,
	.loc 1 6975 0 is_stmt 1
	movq	-832(%rbp), %rax	# op0, tmp2437
	cmpq	-496(%rbp), %rax	# orig_op0, tmp2437
	jne	.L1405	#,
	.loc 1 6976 0
	movq	-832(%rbp), %rax	# op0, tmp2438
	movq	%rax, %rdi	# tmp2438,
	call	copy_rtx	#
	movq	%rax, -832(%rbp)	# tmp2439, op0
.L1405:
	.loc 1 6978 0
	movq	-832(%rbp), %rax	# op0, tmp2440
	movzbl	3(%rax), %edx	# op0_28->volatil, tmp2443
	orl	$8, %edx	#, tmp2444
	movb	%dl, 3(%rax)	# tmp2444, op0_28->volatil
.L1404:
	.loc 1 6984 0
	movq	-832(%rbp), %rax	# op0, tmp2445
	movzwl	(%rax), %eax	# op0_29->code, D.25925
	cmpw	$65, %ax	#, D.25925
	jne	.L1406	#,
	.loc 1 6986 0
	movq	-848(%rbp), %rax	# bitpos, bitpos.649
	testq	%rax, %rax	# bitpos.649
	jne	.L1407	#,
	.loc 1 6986 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2446
	movzbl	2(%rax), %eax	# op0_29->mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25925
	movzwl	%ax, %edx	# D.25925, D.25934
	movq	-856(%rbp), %rax	# bitsize, bitsize.650
	cmpq	%rax, %rdx	# bitsize.650, D.25934
	je	.L1408	#,
.L1407:
	.loc 1 6987 0 is_stmt 1
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$6987, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1408:
	.loc 1 6988 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1406:
	.loc 1 6997 0
	movl	-932(%rbp), %eax	# mode1, mode1.651
	testl	%eax, %eax	# mode1.651
	je	.L1410	#,
	.loc 1 6998 0
	movq	-832(%rbp), %rax	# op0, tmp2448
	movzwl	(%rax), %eax	# op0_29->code, D.25925
	cmpw	$61, %ax	#, D.25925
	je	.L1410	#,
	.loc 1 6998 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2449
	movzwl	(%rax), %eax	# op0_29->code, D.25925
	cmpw	$63, %ax	#, D.25925
	je	.L1410	#,
	.loc 1 6999 0 is_stmt 1
	movl	-932(%rbp), %eax	# mode1, mode1.652
	.loc 1 7006 0
	cmpl	$51, %eax	#, mode1.652
	je	.L1411	#,
	.loc 1 6999 0
	movl	-932(%rbp), %eax	# mode1, mode1.653
	cltq
	movzbl	direct_load(%rax), %eax	# direct_load, D.25926
	testb	%al, %al	# D.25926
	jne	.L1411	#,
	.loc 1 7000 0
	movl	-912(%rbp), %eax	# mode, mode.655
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$5, %eax	#, D.25937
	je	.L1411	#,
	.loc 1 7001 0
	movl	-912(%rbp), %eax	# mode, mode.656
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$6, %eax	#, D.25937
	je	.L1411	#,
	.loc 1 7002 0
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1411	#,
	.loc 1 7003 0
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1410	#,
.L1411:
	.loc 1 7014 0
	movq	-856(%rbp), %rax	# bitsize, bitsize.657
	testq	%rax, %rax	# bitsize.657
	js	.L1412	#,
	.loc 1 7015 0
	movq	-952(%rbp), %rax	# exp, tmp2453
	movq	8(%rax), %rax	# exp_194(D)->common.type, D.25927
	movq	32(%rax), %rax	# _990->type.size, D.25927
	movzbl	16(%rax), %eax	# _991->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1412	#,
	.loc 1 7017 0
	movq	-856(%rbp), %rax	# bitsize, bitsize.658
	movq	%rax, %rdx	# bitsize.658, bitsize.659
	movq	-952(%rbp), %rax	# exp, tmp2454
	movq	8(%rax), %rax	# exp_194(D)->common.type, D.25927
	movq	32(%rax), %rax	# _995->type.size, D.25927
	movq	%rdx, %rsi	# bitsize.659,
	movq	%rax, %rdi	# D.25927,
	call	compare_tree_int	#
	testl	%eax, %eax	# D.25929
	je	.L1412	#,
.L1410:
.LBB116:
	.loc 1 7020 0
	movl	-912(%rbp), %eax	# mode, tmp2455
	movl	%eax, -924(%rbp)	# tmp2455, ext_mode
	.loc 1 7022 0
	cmpl	$51, -924(%rbp)	#, ext_mode
	jne	.L1413	#,
	.loc 1 7023 0
	cmpq	$0, -960(%rbp)	#, target
	je	.L1414	#,
	.loc 1 7023 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2456
	movzwl	(%rax), %eax	# op0_29->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1414	#,
	.loc 1 7024 0 is_stmt 1
	movq	-960(%rbp), %rax	# target, tmp2457
	movzwl	(%rax), %eax	# target_4->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1414	#,
	.loc 1 7025 0
	movq	-848(%rbp), %rax	# bitpos, bitpos.660
	andl	$7, %eax	#, D.25941
	.loc 1 7023 0
	testq	%rax, %rax	# D.25941
	je	.L1413	#,
.L1414:
	.loc 1 7026 0
	movq	-856(%rbp), %rax	# bitsize, bitsize.662
	movl	$1, %edx	#,
	movl	$1, %esi	#,
	movl	%eax, %edi	# D.25928,
	call	mode_for_size	#
	movl	%eax, -924(%rbp)	# tmp2458, ext_mode
.L1413:
	.loc 1 7028 0
	cmpl	$51, -924(%rbp)	#, ext_mode
	jne	.L1415	#,
	.loc 1 7032 0
	movq	-832(%rbp), %rax	# op0, tmp2459
	movzwl	(%rax), %eax	# op0_29->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1416	#,
	.loc 1 7033 0
	cmpq	$0, -960(%rbp)	#, target
	je	.L1417	#,
	.loc 1 7033 0 is_stmt 0 discriminator 1
	movq	-960(%rbp), %rax	# target, tmp2460
	movzwl	(%rax), %eax	# target_4->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1416	#,
.L1417:
	.loc 1 7034 0 is_stmt 1
	movq	-848(%rbp), %rax	# bitpos, bitpos.663
	andl	$7, %eax	#, D.25941
	testq	%rax, %rax	# D.25941
	je	.L1418	#,
.L1416:
	.loc 1 7035 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$7035, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1418:
	.loc 1 7037 0
	movq	-848(%rbp), %rax	# bitpos, bitpos.665
	leaq	7(%rax), %rdx	#, tmp2462
	testq	%rax, %rax	# tmp2461
	cmovs	%rdx, %rax	# tmp2462,, tmp2461
	sarq	$3, %rax	#, tmp2463
	movq	%rax, %rdx	# tmp2463, D.25934
	movq	-832(%rbp), %rax	# op0, tmp2464
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp2464,
	call	adjust_address_1	#
	movq	%rax, -832(%rbp)	# tmp2465, op0
	.loc 1 7038 0
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1419	#,
	.loc 1 7039 0
	movq	-648(%rbp), %rax	# type, tmp2466
	movl	$1, %ecx	#,
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp2466,
	call	assign_temp	#
	movq	%rax, -960(%rbp)	# tmp2467, target
.L1419:
	.loc 1 7042 0
	movq	-856(%rbp), %rax	# bitsize, bitsize.666
	addq	$7, %rax	#, D.25934
	.loc 1 7041 0
	leaq	7(%rax), %rdx	#, tmp2469
	testq	%rax, %rax	# tmp2468
	cmovs	%rdx, %rax	# tmp2469,, tmp2468
	sarq	$3, %rax	#, tmp2470
	movq	%rax, %rsi	# D.25934,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.25924
	movq	-832(%rbp), %rcx	# op0, tmp2471
	movq	-960(%rbp), %rax	# target, tmp2472
	movq	%rcx, %rsi	# tmp2471,
	movq	%rax, %rdi	# tmp2472,
	call	emit_block_move	#
	.loc 1 7045 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1415:
	.loc 1 7048 0
	movq	-832(%rbp), %rax	# op0, tmp2473
	movq	%rax, %rdi	# tmp2473,
	call	validize_mem	#
	movq	%rax, -832(%rbp)	# tmp2474, op0
	.loc 1 7050 0
	movq	-832(%rbp), %rax	# op0, tmp2475
	movzwl	(%rax), %eax	# op0_1054->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1420	#,
	.loc 1 7050 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2476
	movq	8(%rax), %rax	# op0_1054->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _1056->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1420	#,
	.loc 1 7051 0 is_stmt 1
	movq	-832(%rbp), %rax	# op0, tmp2477
	movq	16(%rax), %rax	# op0_1054->fld[1].rtmem, D.25939
	testq	%rax, %rax	# D.25939
	je	.L1421	#,
	.loc 1 7051 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2478
	movq	16(%rax), %rax	# op0_1054->fld[1].rtmem, D.25939
	movl	32(%rax), %eax	# _1059->align, D.25928
	jmp	.L1422	#
.L1421:
	.loc 1 7051 0 discriminator 2
	movl	$8, %eax	#, iftmp.667
.L1422:
	.loc 1 7051 0 discriminator 3
	movq	-832(%rbp), %rdx	# op0, tmp2479
	movq	8(%rdx), %rdx	# op0_1054->fld[0].rtx, D.25924
	movl	%eax, %esi	# iftmp.667,
	movq	%rdx, %rdi	# D.25924,
	call	mark_reg_pointer	#
.L1420:
	.loc 1 7053 0 is_stmt 1
	movq	-504(%rbp), %rax	# tem, tmp2480
	movq	8(%rax), %rax	# tem_863->common.type, D.25927
	movq	%rax, %rdi	# D.25927,
	call	int_size_in_bytes	#
	movl	-936(%rbp), %ecx	# unsignedp, unsignedp.668
	movq	-848(%rbp), %rdx	# bitpos, bitpos.669
	movq	-856(%rbp), %rsi	# bitsize, bitsize.671
	movl	-924(%rbp), %r9d	# ext_mode, tmp2481
	movq	-960(%rbp), %r8	# target, tmp2482
	movq	-832(%rbp), %rdi	# op0, tmp2483
	movq	%rax, 8(%rsp)	# D.25934,
	movl	-924(%rbp), %eax	# ext_mode, tmp2484
	movl	%eax, (%rsp)	# tmp2484,
	call	extract_bit_field	#
	movq	%rax, -832(%rbp)	# tmp2485, op0
	.loc 1 7068 0
	cmpl	$51, -912(%rbp)	#, mode
	jne	.L1423	#,
.LBB117:
	.loc 1 7070 0
	movl	-924(%rbp), %eax	# ext_mode, tmp2486
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp2486,
	call	type_for_mode	#
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	build_qualified_type	#
	movl	$1, %ecx	#,
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	assign_temp	#
	movq	%rax, -472(%rbp)	# tmp2487, new
	.loc 1 7074 0
	movq	-832(%rbp), %rdx	# op0, tmp2488
	movq	-472(%rbp), %rax	# new, tmp2489
	movq	%rdx, %rsi	# tmp2488,
	movq	%rax, %rdi	# tmp2489,
	call	emit_move_insn	#
	.loc 1 7075 0
	movq	-472(%rbp), %rax	# new, tmp2490
	movq	%rax, %rdi	# tmp2490,
	call	copy_rtx	#
	movq	%rax, -832(%rbp)	# tmp2491, op0
	.loc 1 7076 0
	movq	-832(%rbp), %rax	# op0, tmp2492
	movb	$51, 2(%rax)	#, op0_1075->mode
	.loc 1 7077 0
	movq	-952(%rbp), %rcx	# exp, tmp2493
	movq	-832(%rbp), %rax	# op0, tmp2494
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp2493,
	movq	%rax, %rdi	# tmp2494,
	call	set_mem_attributes	#
.L1423:
.LBE117:
	.loc 1 7080 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1412:
.LBE116:
	.loc 1 7085 0
	cmpl	$51, -912(%rbp)	#, mode
	jne	.L1424	#,
	.loc 1 7086 0
	movl	$51, -932(%rbp)	#, mode1
.L1424:
	.loc 1 7089 0
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1425	#,
	.loc 1 7090 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1425	#,
	.loc 1 7090 0 is_stmt 0 discriminator 1
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1426	#,
.L1425:
	.loc 1 7091 0 is_stmt 1
	movq	-848(%rbp), %rax	# bitpos, bitpos.674
	leaq	7(%rax), %rdx	#, tmp2496
	testq	%rax, %rax	# tmp2495
	cmovs	%rdx, %rax	# tmp2496,, tmp2495
	sarq	$3, %rax	#, tmp2497
	movq	%rax, %rdx	# tmp2497, D.25934
	movl	-932(%rbp), %esi	# mode1, mode1.675
	movq	-832(%rbp), %rax	# op0, tmp2498
	movl	$1, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp2498,
	call	adjust_address_1	#
	movq	%rax, -832(%rbp)	# tmp2499, op0
	jmp	.L1427	#
.L1426:
	.loc 1 7093 0
	movq	-848(%rbp), %rax	# bitpos, bitpos.676
	leaq	7(%rax), %rdx	#, tmp2501
	testq	%rax, %rax	# tmp2500
	cmovs	%rdx, %rax	# tmp2501,, tmp2500
	sarq	$3, %rax	#, tmp2502
	movq	%rax, %rdx	# tmp2502, D.25934
	movl	-932(%rbp), %esi	# mode1, mode1.677
	movq	-832(%rbp), %rax	# op0, tmp2503
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp2503,
	call	adjust_address_1	#
	movq	%rax, -832(%rbp)	# tmp2504, op0
.L1427:
	.loc 1 7095 0
	movq	-832(%rbp), %rax	# op0, tmp2505
	cmpq	-496(%rbp), %rax	# orig_op0, tmp2505
	jne	.L1428	#,
	.loc 1 7096 0
	movq	-832(%rbp), %rax	# op0, tmp2506
	movq	%rax, %rdi	# tmp2506,
	call	copy_rtx	#
	movq	%rax, -832(%rbp)	# tmp2507, op0
.L1428:
	.loc 1 7098 0
	movq	-952(%rbp), %rcx	# exp, tmp2508
	movq	-832(%rbp), %rax	# op0, tmp2509
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp2508,
	movq	%rax, %rdi	# tmp2509,
	call	set_mem_attributes	#
	.loc 1 7099 0
	movq	-832(%rbp), %rax	# op0, tmp2510
	movq	8(%rax), %rax	# op0_32->fld[0].rtx, D.25924
	movzwl	(%rax), %eax	# _1007->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1429	#,
	.loc 1 7100 0
	movq	-832(%rbp), %rax	# op0, tmp2511
	movq	16(%rax), %rax	# op0_32->fld[1].rtmem, D.25939
	testq	%rax, %rax	# D.25939
	je	.L1430	#,
	.loc 1 7100 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2512
	movq	16(%rax), %rax	# op0_32->fld[1].rtmem, D.25939
	movl	32(%rax), %eax	# _1010->align, D.25928
	jmp	.L1431	#
.L1430:
	.loc 1 7100 0 discriminator 2
	movl	$8, %eax	#, iftmp.678
.L1431:
	.loc 1 7100 0 discriminator 3
	movq	-832(%rbp), %rdx	# op0, tmp2513
	movq	8(%rdx), %rdx	# op0_32->fld[0].rtx, D.25924
	movl	%eax, %esi	# iftmp.678,
	movq	%rdx, %rdi	# D.25924,
	call	mark_reg_pointer	#
.L1429:
	.loc 1 7102 0 is_stmt 1
	movq	-832(%rbp), %rax	# op0, tmp2514
	movzbl	3(%rax), %eax	# *op0_32, tmp2517
	shrb	$3, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movl	%eax, %edx	# D.25921, D.25940
	movl	-928(%rbp), %eax	# volatilep, volatilep.679
	orl	%edx, %eax	# D.25940, D.25940
	andl	$1, %eax	#, D.25921
	movl	%eax, %edx	# D.25921, D.25921
	movq	-832(%rbp), %rax	# op0, tmp2518
	andl	$1, %edx	#, tmp2520
	leal	0(,%rdx,8), %ecx	#, tmp2521
	movzbl	3(%rax), %edx	# op0_32->volatil, tmp2522
	andl	$-9, %edx	#, tmp2523
	orl	%ecx, %edx	# tmp2521, tmp2524
	movb	%dl, 3(%rax)	# tmp2524, op0_32->volatil
	.loc 1 7103 0
	movl	-932(%rbp), %eax	# mode1, mode1.680
	cmpl	%eax, -912(%rbp)	# mode1.680, mode
	je	.L1432	#,
	.loc 1 7103 0 is_stmt 0 discriminator 1
	movl	-932(%rbp), %eax	# mode1, mode1.681
	cmpl	$51, %eax	#, mode1.681
	je	.L1432	#,
	movl	-932(%rbp), %eax	# mode1, mode1.682
	cmpl	-964(%rbp), %eax	# tmode, mode1.682
	je	.L1432	#,
	.loc 1 7104 0 is_stmt 1
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1432	#,
	.loc 1 7105 0
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1433	#,
.L1432:
	.loc 1 7106 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1433:
	.loc 1 7107 0
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1434	#,
	.loc 1 7108 0
	cmpl	$0, -964(%rbp)	#, tmode
	je	.L1435	#,
	.loc 1 7108 0 is_stmt 0 discriminator 1
	movl	-964(%rbp), %eax	# tmode, iftmp.683
	jmp	.L1436	#
.L1435:
	.loc 1 7108 0 discriminator 2
	movl	-912(%rbp), %eax	# mode, iftmp.683
.L1436:
	.loc 1 7108 0 discriminator 3
	movl	%eax, %edi	# iftmp.683,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp2525, target
.L1434:
	.loc 1 7110 0 is_stmt 1
	movl	-936(%rbp), %edx	# unsignedp, unsignedp.684
	movq	-832(%rbp), %rcx	# op0, tmp2526
	movq	-960(%rbp), %rax	# target, tmp2527
	movq	%rcx, %rsi	# tmp2526,
	movq	%rax, %rdi	# tmp2527,
	call	convert_move	#
	.loc 1 7111 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1171:
.LBE112:
.LBB118:
	.loc 1 7116 0
	call	get_last_insn	#
	movq	%rax, -464(%rbp)	# tmp2528, before
	.loc 1 7119 0
	movq	-952(%rbp), %rax	# exp, tmp2529
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2530
	movl	-964(%rbp), %edx	# tmode, tmp2531
	movq	-960(%rbp), %rsi	# target, tmp2532
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -800(%rbp)	# tmp2533, subtarget
	.loc 1 7123 0
	movq	-800(%rbp), %rax	# subtarget, tmp2534
	movzwl	(%rax), %eax	# subtarget_1079->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1437	#,
	.loc 1 7125 0
	movq	-800(%rbp), %rax	# subtarget, tmp2535
	movq	%rax, -960(%rbp)	# tmp2535, target
	.loc 1 7126 0
	call	get_last_insn	#
	movq	%rax, -704(%rbp)	# tmp2536, insn
	.loc 1 7127 0
	movq	-704(%rbp), %rax	# insn, tmp2537
	cmpq	-464(%rbp), %rax	# before, tmp2537
	jne	.L1438	#,
	.loc 1 7128 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$7128, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1438:
	.loc 1 7129 0
	movq	-704(%rbp), %rax	# insn, tmp2538
	movzwl	(%rax), %eax	# insn_1082->code, D.25925
	movzwl	%ax, %eax	# D.25925, D.25929
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.25926
	cmpb	$105, %al	#, D.25926
	je	.L1440	#,
	.loc 1 7130 0
	movq	-704(%rbp), %rax	# insn, tmp2540
	movq	%rax, %rdi	# tmp2540,
	call	prev_nonnote_insn	#
	movq	%rax, -704(%rbp)	# tmp2541, insn
	jmp	.L1440	#
.L1437:
	.loc 1 7134 0
	movq	-800(%rbp), %rax	# subtarget, tmp2542
	movzbl	2(%rax), %eax	# subtarget_1079->mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25931
	movl	%eax, %edi	# D.25931,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp2543, target
	.loc 1 7135 0
	movq	-800(%rbp), %rdx	# subtarget, tmp2544
	movq	-960(%rbp), %rax	# target, tmp2545
	movq	%rdx, %rsi	# tmp2544,
	movq	%rax, %rdi	# tmp2545,
	call	emit_move_insn	#
	movq	%rax, -704(%rbp)	# tmp2546, insn
.L1440:
	.loc 1 7139 0
	movq	-952(%rbp), %rax	# exp, tmp2547
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	144(%rax), %rax	# _1091->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1441	#,
	.loc 1 7139 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp2548
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	144(%rax), %rax	# _1093->decl.rtl, iftmp.685
	jmp	.L1442	#
.L1441:
	.loc 1 7139 0 discriminator 2
	movq	-952(%rbp), %rax	# exp, tmp2549
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	make_decl_rtl	#
	movq	-952(%rbp), %rax	# exp, tmp2550
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	144(%rax), %rax	# _1096->decl.rtl, iftmp.685
.L1442:
	.loc 1 7139 0 discriminator 3
	movq	8(%rax), %rax	# iftmp.685_147->fld[0].rtx, tmp2551
	movq	%rax, -456(%rbp)	# tmp2551, vtbl_ref
	.loc 1 7140 0 is_stmt 1 discriminator 3
	movq	-952(%rbp), %rax	# exp, tmp2552
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	tree_low_cst	#
	movq	%rax, %rdx	#, D.25934
	movq	-456(%rbp), %rax	# vtbl_ref, tmp2553
	movq	%rdx, %rsi	# D.25934,
	movq	%rax, %rdi	# tmp2553,
	call	plus_constant_wide	#
	movq	%rax, -456(%rbp)	# tmp2554, vtbl_ref
	.loc 1 7143 0 discriminator 3
	movq	-456(%rbp), %rax	# vtbl_ref, tmp2555
	movq	8(%rax), %rax	# vtbl_ref_1101->fld[0].rtx, tmp2556
	movq	%rax, -456(%rbp)	# tmp2556, vtbl_ref
	.loc 1 7146 0 discriminator 3
	movq	-704(%rbp), %rax	# insn, tmp2557
	movq	56(%rax), %rdx	# insn_92->fld[6].rtx, D.25924
	movq	-456(%rbp), %rax	# vtbl_ref, tmp2558
	movq	%rdx, %rcx	# D.25924,
	movq	%rax, %rdx	# tmp2558,
	movl	$30, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-704(%rbp), %rdx	# insn, tmp2559
	movq	%rax, 56(%rdx)	# D.25924, insn_92->fld[6].rtx
	.loc 1 7148 0 discriminator 3
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1169:
.LBE118:
	.loc 1 7155 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$7155, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1205:
.LBB119:
	.loc 1 7168 0
	movq	-952(%rbp), %rax	# exp, tmp2560
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, tmp2561
	movq	%rax, -448(%rbp)	# tmp2561, set
	.loc 1 7169 0
	movq	-952(%rbp), %rax	# exp, tmp2562
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp2563
	movq	%rax, -440(%rbp)	# tmp2563, index
	.loc 1 7170 0
	movq	-440(%rbp), %rax	# index, tmp2564
	movq	8(%rax), %rax	# index_1107->common.type, D.25927
	movzbl	17(%rax), %eax	# *_1108, tmp2567
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %eax	# D.25921, tmp2568
	movl	%eax, -884(%rbp)	# tmp2568, iunsignedp
	.loc 1 7171 0
	movq	-448(%rbp), %rax	# set, tmp2569
	movq	8(%rax), %rax	# set_1106->common.type, tmp2570
	movq	%rax, -432(%rbp)	# tmp2570, set_type
	.loc 1 7172 0
	movq	-432(%rbp), %rax	# set_type, tmp2571
	movq	24(%rax), %rax	# set_type_1111->type.values, D.25927
	movq	104(%rax), %rax	# _1112->type.minval, tmp2572
	movq	%rax, -424(%rbp)	# tmp2572, set_low_bound
	.loc 1 7173 0
	movq	-432(%rbp), %rax	# set_type, tmp2573
	movq	24(%rax), %rax	# set_type_1111->type.values, D.25927
	movq	112(%rax), %rax	# _1114->type.maxval, tmp2574
	movq	%rax, -416(%rbp)	# tmp2574, set_high_bound
	.loc 1 7174 0
	movq	-440(%rbp), %rax	# index, tmp2575
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp2575,
	call	expand_expr	#
	movq	%rax, -408(%rbp)	# tmp2576, index_val
	.loc 1 7175 0
	movq	-424(%rbp), %rax	# set_low_bound, tmp2577
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp2577,
	call	expand_expr	#
	movq	%rax, -400(%rbp)	# tmp2578, lo_r
	.loc 1 7176 0
	movq	-416(%rbp), %rax	# set_high_bound, tmp2579
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp2579,
	call	expand_expr	#
	movq	%rax, -392(%rbp)	# tmp2580, hi_r
	.loc 1 7177 0
	movq	-448(%rbp), %rax	# set, tmp2581
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp2581,
	call	expand_expr	#
	movq	%rax, -384(%rbp)	# tmp2582, setval
	.loc 1 7178 0
	movq	-384(%rbp), %rax	# setval, tmp2583
	movq	8(%rax), %rax	# setval_1119->fld[0].rtx, tmp2584
	movq	%rax, -376(%rbp)	# tmp2584, setaddr
	.loc 1 7179 0
	movq	-440(%rbp), %rax	# index, tmp2585
	movq	8(%rax), %rax	# index_1107->common.type, D.25927
	movzbl	61(%rax), %eax	# *_1121, tmp2588
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, tmp2589
	movl	%eax, -880(%rbp)	# tmp2589, index_mode
	.loc 1 7185 0
	movq	-416(%rbp), %rax	# set_high_bound, tmp2590
	movzbl	16(%rax), %eax	# set_high_bound_1115->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1443	#,
	.loc 1 7186 0
	movq	-424(%rbp), %rax	# set_low_bound, tmp2591
	movzbl	16(%rax), %eax	# set_low_bound_1113->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1443	#,
	.loc 1 7187 0
	movq	-424(%rbp), %rdx	# set_low_bound, tmp2592
	movq	-416(%rbp), %rax	# set_high_bound, tmp2593
	movq	%rdx, %rsi	# tmp2592,
	movq	%rax, %rdi	# tmp2593,
	call	tree_int_cst_lt	#
	testl	%eax, %eax	# D.25929
	jne	.L1444	#,
.L1443:
	.loc 1 7188 0
	movq	-440(%rbp), %rax	# index, tmp2594
	movzbl	16(%rax), %eax	# index_1107->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1445	#,
	.loc 1 7189 0
	movq	-424(%rbp), %rax	# set_low_bound, tmp2595
	movzbl	16(%rax), %eax	# set_low_bound_1113->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1445	#,
	.loc 1 7190 0
	movq	-424(%rbp), %rdx	# set_low_bound, tmp2596
	movq	-440(%rbp), %rax	# index, tmp2597
	movq	%rdx, %rsi	# tmp2596,
	movq	%rax, %rdi	# tmp2597,
	call	tree_int_cst_lt	#
	testl	%eax, %eax	# D.25929
	jne	.L1444	#,
.L1445:
	.loc 1 7191 0
	movq	-416(%rbp), %rax	# set_high_bound, tmp2598
	movzbl	16(%rax), %eax	# set_high_bound_1115->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1446	#,
	.loc 1 7192 0
	movq	-440(%rbp), %rax	# index, tmp2599
	movzbl	16(%rax), %eax	# index_1107->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1446	#,
	.loc 1 7193 0
	movq	-440(%rbp), %rdx	# index, tmp2600
	movq	-416(%rbp), %rax	# set_high_bound, tmp2601
	movq	%rdx, %rsi	# tmp2600,
	movq	%rax, %rdi	# tmp2601,
	call	tree_int_cst_lt	#
	testl	%eax, %eax	# D.25929
	je	.L1446	#,
.L1444:
	.loc 1 7194 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1446:
	.loc 1 7196 0
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1447	#,
	.loc 1 7197 0
	cmpl	$0, -964(%rbp)	#, tmode
	je	.L1448	#,
	.loc 1 7197 0 is_stmt 0 discriminator 1
	movl	-964(%rbp), %eax	# tmode, iftmp.686
	jmp	.L1449	#
.L1448:
	.loc 1 7197 0 discriminator 2
	movl	-912(%rbp), %eax	# mode, iftmp.686
.L1449:
	.loc 1 7197 0 discriminator 3
	movl	%eax, %edi	# iftmp.686,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp2602, target
.L1447:
	.loc 1 7202 0 is_stmt 1
	call	gen_label_rtx	#
	movq	%rax, -832(%rbp)	# tmp2603, op0
	.loc 1 7203 0
	call	gen_label_rtx	#
	movq	%rax, -824(%rbp)	# tmp2604, op1
	.loc 1 7205 0
	movq	-408(%rbp), %rax	# index_val, tmp2605
	movzwl	(%rax), %eax	# index_val_1116->code, D.25925
	cmpw	$54, %ax	#, D.25925
	jne	.L1450	#,
	.loc 1 7206 0 discriminator 1
	movq	-400(%rbp), %rax	# lo_r, tmp2606
	movzwl	(%rax), %eax	# lo_r_1117->code, D.25925
	.loc 1 7205 0 discriminator 1
	cmpw	$54, %ax	#, D.25925
	je	.L1451	#,
.L1450:
	.loc 1 7208 0
	movq	-408(%rbp), %rax	# index_val, tmp2607
	movzbl	2(%rax), %eax	# index_val_1116->mode, D.25922
	.loc 1 7207 0
	movzbl	%al, %ecx	# D.25922, D.25931
	movl	-884(%rbp), %edi	# iunsignedp, tmp2608
	movq	-400(%rbp), %rsi	# lo_r, tmp2609
	movq	-408(%rbp), %rax	# index_val, tmp2610
	movq	-824(%rbp), %rdx	# op1, tmp2611
	movq	%rdx, (%rsp)	# tmp2611,
	movl	%edi, %r9d	# tmp2608,
	movl	%ecx, %r8d	# D.25931,
	movl	$0, %ecx	#,
	movl	$107, %edx	#,
	movq	%rax, %rdi	# tmp2610,
	call	emit_cmp_and_jump_insns	#
.L1451:
	.loc 1 7210 0
	movq	-408(%rbp), %rax	# index_val, tmp2612
	movzwl	(%rax), %eax	# index_val_1116->code, D.25925
	cmpw	$54, %ax	#, D.25925
	jne	.L1452	#,
	.loc 1 7211 0 discriminator 1
	movq	-392(%rbp), %rax	# hi_r, tmp2613
	movzwl	(%rax), %eax	# hi_r_1118->code, D.25925
	.loc 1 7210 0 discriminator 1
	cmpw	$54, %ax	#, D.25925
	je	.L1453	#,
.L1452:
	.loc 1 7213 0
	movq	-408(%rbp), %rax	# index_val, tmp2614
	movzbl	2(%rax), %eax	# index_val_1116->mode, D.25922
	.loc 1 7212 0
	movzbl	%al, %ecx	# D.25922, D.25931
	movl	-884(%rbp), %edi	# iunsignedp, tmp2615
	movq	-392(%rbp), %rsi	# hi_r, tmp2616
	movq	-408(%rbp), %rax	# index_val, tmp2617
	movq	-824(%rbp), %rdx	# op1, tmp2618
	movq	%rdx, (%rsp)	# tmp2618,
	movl	%edi, %r9d	# tmp2615,
	movl	%ecx, %r8d	# D.25931,
	movl	$0, %ecx	#,
	movl	$105, %edx	#,
	movq	%rax, %rdi	# tmp2617,
	call	emit_cmp_and_jump_insns	#
.L1453:
	.loc 1 7217 0
	movq	-400(%rbp), %rax	# lo_r, tmp2619
	movzwl	(%rax), %eax	# lo_r_1117->code, D.25925
	cmpw	$54, %ax	#, D.25925
	jne	.L1454	#,
	.loc 1 7218 0
	movq	-400(%rbp), %rax	# lo_r, tmp2620
	movq	8(%rax), %rax	# lo_r_1117->fld[0].rtwint, D.25934
	andb	$254, %ah	#, D.25934
	movq	%rax, %rsi	# D.25934,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -696(%rbp)	# tmp2621, rlow
	jmp	.L1455	#
.L1454:
	.loc 1 7221 0
	movq	$-257, %rsi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25924
	movq	optab_table+144(%rip), %rsi	# optab_table, D.25942
	movl	-884(%rbp), %edi	# iunsignedp, tmp2622
	movq	-400(%rbp), %rdx	# lo_r, tmp2623
	movl	-880(%rbp), %eax	# index_mode, tmp2624
	movl	$3, (%rsp)	#,
	movl	%edi, %r9d	# tmp2622,
	movl	$0, %r8d	#,
	movl	%eax, %edi	# tmp2624,
	call	expand_binop	#
	movq	%rax, -696(%rbp)	# tmp2625, rlow
.L1455:
	.loc 1 7225 0
	movq	optab_table+16(%rip), %rsi	# optab_table, D.25942
	movl	-884(%rbp), %edi	# iunsignedp, tmp2626
	movq	-696(%rbp), %rcx	# rlow, tmp2627
	movq	-408(%rbp), %rdx	# index_val, tmp2628
	movl	-880(%rbp), %eax	# index_mode, tmp2629
	movl	$3, (%rsp)	#,
	movl	%edi, %r9d	# tmp2626,
	movl	$0, %r8d	#,
	movl	%eax, %edi	# tmp2629,
	call	expand_binop	#
	movq	%rax, -368(%rbp)	# tmp2630, diff
	.loc 1 7228 0
	movl	$8, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25924
	movq	-368(%rbp), %rdx	# diff, tmp2631
	movl	-880(%rbp), %eax	# index_mode, tmp2632
	movl	-884(%rbp), %esi	# iunsignedp, tmp2633
	movl	%esi, (%rsp)	# tmp2633,
	movl	$0, %r9d	#,
	movq	%rcx, %r8	# D.25924,
	movq	%rdx, %rcx	# tmp2631,
	movl	%eax, %edx	# tmp2632,
	movl	$62, %esi	#,
	movl	$0, %edi	#,
	call	expand_divmod	#
	movq	%rax, -360(%rbp)	# tmp2634, quo
	.loc 1 7230 0
	movl	$8, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25924
	movq	-408(%rbp), %rdx	# index_val, tmp2635
	movl	-880(%rbp), %eax	# index_mode, tmp2636
	movl	-884(%rbp), %esi	# iunsignedp, tmp2637
	movl	%esi, (%rsp)	# tmp2637,
	movl	$0, %r9d	#,
	movq	%rcx, %r8	# D.25924,
	movq	%rdx, %rcx	# tmp2635,
	movl	%eax, %edx	# tmp2636,
	movl	$66, %esi	#,
	movl	$1, %edi	#,
	call	expand_divmod	#
	movq	%rax, -352(%rbp)	# tmp2638, rem
	.loc 1 7233 0
	movq	optab_table(%rip), %rsi	# optab_table, D.25942
	movl	-884(%rbp), %edi	# iunsignedp, tmp2639
	movq	-376(%rbp), %rcx	# setaddr, tmp2640
	movq	-368(%rbp), %rdx	# diff, tmp2641
	movl	-880(%rbp), %eax	# index_mode, tmp2642
	movl	$3, (%rsp)	#,
	movl	%edi, %r9d	# tmp2639,
	movl	$0, %r8d	#,
	movl	%eax, %edi	# tmp2642,
	call	expand_binop	#
	movq	%rax, %rdx	#, D.25924
	movl	byte_mode(%rip), %eax	# byte_mode, byte_mode.687
	movq	%rdx, %rsi	# D.25924,
	movl	%eax, %edi	# byte_mode.687,
	call	memory_address	#
	movq	%rax, -344(%rbp)	# tmp2643, addr
	.loc 1 7239 0
	movq	-440(%rbp), %rax	# index, tmp2644
	movq	8(%rax), %rax	# index_1107->common.type, D.25927
	movq	-352(%rbp), %rdx	# rem, tmp2645
	movq	%rdx, %rsi	# tmp2645,
	movq	%rax, %rdi	# D.25927,
	call	make_tree	#
	movq	%rax, %rbx	#, D.25927
	movl	byte_mode(%rip), %eax	# byte_mode, byte_mode.688
	movq	-344(%rbp), %rdx	# addr, tmp2646
	movq	%rdx, %rsi	# tmp2646,
	movl	%eax, %edi	# byte_mode.688,
	call	gen_rtx_MEM	#
	movq	%rax, %rdx	#, D.25924
	movl	byte_mode(%rip), %eax	# byte_mode, byte_mode.689
	movl	$1, %r9d	#,
	movl	$0, %r8d	#,
	movq	%rbx, %rcx	# D.25927,
	movl	%eax, %esi	# byte_mode.689,
	movl	$83, %edi	#,
	call	expand_shift	#
	movq	%rax, -336(%rbp)	# tmp2647, bit
	.loc 1 7244 0
	movq	-960(%rbp), %rax	# target, tmp2648
	movzbl	2(%rax), %eax	# target_9->mode, D.25922
	movzbl	%al, %edx	# D.25922, D.25928
	movl	byte_mode(%rip), %eax	# byte_mode, byte_mode.691
	.loc 1 7243 0
	cmpl	%eax, %edx	# byte_mode.691, D.25928
	jne	.L1456	#,
	.loc 1 7243 0 is_stmt 0 discriminator 1
	movq	-960(%rbp), %rax	# target, iftmp.690
	jmp	.L1457	#
.L1456:
	.loc 1 7243 0 discriminator 2
	movl	$0, %eax	#, iftmp.690
.L1457:
	.loc 1 7243 0 discriminator 3
	movq	const_int_rtx+520(%rip), %rcx	# const_int_rtx, D.25924
	movq	optab_table+144(%rip), %rsi	# optab_table, D.25942
	movl	byte_mode(%rip), %edi	# byte_mode, byte_mode.692
	movq	-336(%rbp), %rdx	# bit, tmp2649
	movl	$3, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rax, %r8	# iftmp.690,
	call	expand_binop	#
	movq	%rax, -328(%rbp)	# tmp2650, result
	.loc 1 7247 0 is_stmt 1 discriminator 3
	movq	-328(%rbp), %rax	# result, tmp2651
	cmpq	-960(%rbp), %rax	# target, tmp2651
	je	.L1458	#,
	.loc 1 7248 0
	movq	-328(%rbp), %rcx	# result, tmp2652
	movq	-960(%rbp), %rax	# target, tmp2653
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp2652,
	movq	%rax, %rdi	# tmp2653,
	call	convert_move	#
.L1458:
	.loc 1 7251 0
	movq	-832(%rbp), %rax	# op0, tmp2654
	movq	%rax, %rdi	# tmp2654,
	call	emit_jump	#
	.loc 1 7252 0
	movq	-824(%rbp), %rax	# op1, tmp2655
	movq	%rax, %rdi	# tmp2655,
	call	emit_label	#
	.loc 1 7253 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.25924
	movq	-960(%rbp), %rax	# target, tmp2656
	movq	%rdx, %rsi	# D.25924,
	movq	%rax, %rdi	# tmp2656,
	call	emit_move_insn	#
	.loc 1 7254 0
	movq	-832(%rbp), %rax	# op0, tmp2657
	movq	%rax, %rdi	# tmp2657,
	call	emit_label	#
	.loc 1 7255 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1180:
.LBE119:
	.loc 1 7259 0
	movq	-952(%rbp), %rax	# exp, tmp2658
	addq	$48, %rax	#, D.25936
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_1181], D.25924
	testq	%rax, %rax	# D.25924
	jne	.L1459	#,
	.loc 1 7261 0
	movq	-952(%rbp), %rax	# exp, tmp2659
	leaq	48(%rax), %rbx	#, D.25936
	.loc 1 7262 0
	movq	-952(%rbp), %rax	# exp, tmp2660
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2661
	movl	-964(%rbp), %edx	# tmode, tmp2662
	movq	-960(%rbp), %rsi	# target, tmp2663
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, (%rbx)	# D.25924, MEM[(struct rtx_def * *)_1183]
	.loc 1 7263 0
	movq	-952(%rbp), %rax	# exp, tmp2664
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rsi	# D.25927,
	movl	$0, %edi	#,
	call	expand_decl_cleanup	#
	.loc 1 7266 0
	movq	-952(%rbp), %rax	# exp, tmp2665
	movq	$0, 40(%rax)	#, exp_194(D)->exp.operands
.L1459:
	.loc 1 7268 0
	movq	-952(%rbp), %rax	# exp, tmp2666
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25920
	jmp	.L1735	#
.L1181:
	.loc 1 7274 0
	movl	$0, %esi	#,
	movl	$2, %edi	#,
	call	expand_start_bindings_and_block	#
	.loc 1 7276 0
	movq	cfun(%rip), %rax	# cfun, cfun.693
	movq	cfun(%rip), %rdx	# cfun, cfun.694
	movl	328(%rdx), %edx	# cfun.694_1189->x_temp_slot_level, D.25929
	movl	%edx, 336(%rax)	# D.25929, cfun.693_1188->x_target_temp_slot_level
	.loc 1 7278 0
	movq	-952(%rbp), %rax	# exp, tmp2667
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2668
	movl	-964(%rbp), %edx	# tmode, tmp2669
	movq	-960(%rbp), %rsi	# target, tmp2670
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp2671, op0
	.loc 1 7280 0
	cmpl	$0, -908(%rbp)	#, ignore
	jne	.L1460	#,
	.loc 1 7281 0
	movq	-832(%rbp), %rax	# op0, tmp2672
	movq	%rax, %rdi	# tmp2672,
	call	force_not_mem	#
	movq	%rax, -832(%rbp)	# tmp2673, op0
.L1460:
	.loc 1 7282 0
	movq	-832(%rbp), %rax	# op0, tmp2674
	movq	%rax, %rdi	# tmp2674,
	call	preserve_temp_slots	#
	.loc 1 7283 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$0, %edi	#,
	call	expand_end_bindings	#
	.loc 1 7285 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1179:
	.loc 1 7289 0
	movq	-952(%rbp), %rax	# exp, tmp2675
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1195->common.code, D.25922
	cmpb	$121, %al	#, D.25922
	jne	.L1461	#,
	.loc 1 7290 0
	movq	-952(%rbp), %rax	# exp, tmp2676
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1197->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1198->common.code, D.25922
	cmpb	$30, %al	#, D.25922
	jne	.L1461	#,
	.loc 1 7292 0
	movq	-952(%rbp), %rax	# exp, tmp2677
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1200->exp.operands, D.25927
	movzbl	51(%rax), %eax	# *_1201, D.25922
	andl	$96, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1461	#,
	.loc 1 7294 0
	movq	-952(%rbp), %rax	# exp, tmp2678
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1204->exp.operands, D.25927
	.loc 1 7295 0
	movzbl	51(%rax), %eax	# *_1205, D.25922
	andl	$96, %eax	#, D.25922
	.loc 1 7294 0
	cmpb	$32, %al	#, D.25922
	jne	.L1462	#,
	.loc 1 7296 0
	movq	lang_expand_expr(%rip), %rax	# lang_expand_expr, lang_expand_expr.695
	movl	-968(%rbp), %ecx	# modifier, tmp2679
	movl	-964(%rbp), %edx	# tmode, tmp2680
	movq	-640(%rbp), %rsi	# original_target, tmp2681
	movq	-952(%rbp), %rdi	# exp, tmp2682
	call	*%rax	# lang_expand_expr.695
	jmp	.L1735	#
.L1462:
	.loc 1 7298 0
	movl	-908(%rbp), %edi	# ignore, tmp2683
	movl	-964(%rbp), %ecx	# tmode, tmp2684
	movq	-800(%rbp), %rdx	# subtarget, tmp2685
	movq	-960(%rbp), %rsi	# target, tmp2686
	movq	-952(%rbp), %rax	# exp, tmp2687
	movl	%edi, %r8d	# tmp2683,
	movq	%rax, %rdi	# tmp2687,
	call	expand_builtin	#
	jmp	.L1735	#
.L1461:
	.loc 1 7301 0
	movl	-908(%rbp), %edx	# ignore, tmp2688
	movq	-960(%rbp), %rcx	# target, tmp2689
	movq	-952(%rbp), %rax	# exp, tmp2690
	movq	%rcx, %rsi	# tmp2689,
	movq	%rax, %rdi	# tmp2690,
	call	expand_call	#
	jmp	.L1735	#
.L1206:
	.loc 1 7307 0
	movq	-952(%rbp), %rax	# exp, tmp2691
	movq	32(%rax), %rdx	# exp_194(D)->exp.operands, D.25927
	movq	global_trees(%rip), %rax	# global_trees, D.25927
	cmpq	%rax, %rdx	# D.25927, D.25927
	jne	.L1463	#,
	.loc 1 7308 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1463:
	.loc 1 7310 0
	movq	-648(%rbp), %rax	# type, tmp2692
	movzbl	16(%rax), %eax	# type_195->common.code, D.25922
	cmpb	$21, %al	#, D.25922
	jne	.L1464	#,
.LBB120:
	.loc 1 7312 0
	movq	-952(%rbp), %rax	# exp, tmp2693
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1216->common.type, tmp2694
	movq	%rax, -320(%rbp)	# tmp2694, valtype
	.loc 1 7316 0
	cmpl	$51, -912(%rbp)	#, mode
	jne	.L1465	#,
	.loc 1 7316 0 is_stmt 0 discriminator 1
	movq	-320(%rbp), %rax	# valtype, tmp2695
	movzbl	61(%rax), %eax	# *valtype_1217, D.25922
	andl	$-2, %eax	#, D.25922
	cmpb	$102, %al	#, D.25922
	jne	.L1465	#,
.LBB121:
	.loc 1 7318 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2696
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2697
	movl	-964(%rbp), %edx	# tmode, tmp2698
	movq	-960(%rbp), %rsi	# target, tmp2699
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -312(%rbp)	# tmp2700, result
	.loc 1 7321 0
	movq	-312(%rbp), %rax	# result, tmp2701
	movq	%rax, %rdi	# tmp2701,
	call	copy_rtx	#
	movq	%rax, -312(%rbp)	# tmp2702, result
	.loc 1 7322 0
	movq	-952(%rbp), %rcx	# exp, tmp2703
	movq	-312(%rbp), %rax	# result, tmp2704
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp2703,
	movq	%rax, %rdi	# tmp2704,
	call	set_mem_attributes	#
	.loc 1 7323 0
	movq	-312(%rbp), %rax	# result, D.25920
	jmp	.L1735	#
.L1465:
.LBE121:
	.loc 1 7326 0
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1466	#,
	.loc 1 7327 0
	movq	-648(%rbp), %rax	# type, tmp2705
	movl	$1, %ecx	#,
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp2705,
	call	assign_temp	#
	movq	%rax, -960(%rbp)	# tmp2706, target
.L1466:
	.loc 1 7329 0
	movq	-960(%rbp), %rax	# target, tmp2707
	movzwl	(%rax), %eax	# target_10->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1467	#,
	.loc 1 7332 0
	movq	-320(%rbp), %rax	# valtype, tmp2708
	movzbl	61(%rax), %eax	# *valtype_1217, tmp2711
	shrb	%al	# D.25923
	.loc 1 7331 0
	movzbl	%al, %esi	# D.25923, D.25931
	movq	-960(%rbp), %rax	# target, tmp2712
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp2712,
	call	adjust_address_1	#
	movq	%rax, %rcx	#, D.25924
	movq	-952(%rbp), %rax	# exp, tmp2713
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25924,
	movq	%rax, %rdi	# D.25927,
	call	store_expr	#
	jmp	.L1468	#
.L1467:
	.loc 1 7334 0
	movq	-960(%rbp), %rax	# target, tmp2714
	movzwl	(%rax), %eax	# target_10->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1469	#,
	.loc 1 7336 0
	movq	-952(%rbp), %rax	# exp, tmp2715
	movq	32(%rax), %r12	# exp_194(D)->exp.operands, D.25927
	.loc 1 7341 0
	movq	-320(%rbp), %rax	# valtype, tmp2716
	movzbl	61(%rax), %eax	# *valtype_1217, tmp2719
	shrb	%al	# D.25923
	.loc 1 7336 0
	movzbl	%al, %ebx	# D.25923, D.25931
	.loc 1 7337 0
	movq	-952(%rbp), %rax	# exp, tmp2720
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1234->common.type, D.25927
	movq	%rax, %rdi	# D.25927,
	call	int_size_in_bytes	#
	leaq	0(,%rax,8), %rdx	#, D.25934
	movl	-912(%rbp), %eax	# mode, mode.697
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25925
	movzwl	%ax, %eax	# D.25925, D.25934
	.loc 1 7336 0
	cmpq	%rax, %rdx	# D.25934, D.25934
	jge	.L1470	#,
	.loc 1 7337 0
	movq	-952(%rbp), %rax	# exp, tmp2722
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1241->common.type, D.25927
	movq	%rax, %rdi	# D.25927,
	call	int_size_in_bytes	#
	.loc 1 7336 0
	salq	$3, %rax	#, iftmp.696
	jmp	.L1471	#
.L1470:
	.loc 1 7337 0 discriminator 1
	movl	-912(%rbp), %eax	# mode, mode.698
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25925
	.loc 1 7336 0 discriminator 1
	movzwl	%ax, %eax	# D.25925, iftmp.696
.L1471:
	movq	-960(%rbp), %rdi	# target, tmp2724
	movl	$0, 16(%rsp)	#,
	movq	-648(%rbp), %rdx	# type, tmp2725
	movq	%rdx, 8(%rsp)	# tmp2725,
	movl	$0, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%r12, %r8	# D.25927,
	movl	%ebx, %ecx	# D.25931,
	movl	$0, %edx	#,
	movq	%rax, %rsi	# iftmp.696,
	call	store_field	#
	jmp	.L1468	#
.L1469:
	.loc 1 7344 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$7344, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1468:
	.loc 1 7347 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1464:
.LBE120:
	.loc 1 7350 0
	movq	-952(%rbp), %rax	# exp, tmp2726
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1249->common.type, D.25927
	movzbl	61(%rax), %eax	# *_1250, tmp2729
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, D.25928
	cmpl	-912(%rbp), %eax	# mode, D.25928
	jne	.L1472	#,
	.loc 1 7352 0
	movq	-952(%rbp), %rax	# exp, tmp2730
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp2731
	movq	-960(%rbp), %rsi	# target, tmp2732
	movl	%edx, %ecx	# tmp2731,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp2733, op0
	.loc 1 7358 0
	movq	-952(%rbp), %rax	# exp, tmp2734
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1255->common.type, D.25927
	movzbl	17(%rax), %eax	# *_1256, tmp2737
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %edx	# D.25921, D.25929
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.699
	cmpl	%eax, %edx	# unsignedp.699, D.25929
	je	.L1473	#,
	.loc 1 7359 0
	movq	-832(%rbp), %rax	# op0, tmp2738
	movzwl	(%rax), %eax	# op0_1254->code, D.25925
	cmpw	$63, %ax	#, D.25925
	jne	.L1473	#,
	.loc 1 7360 0
	movq	-832(%rbp), %rax	# op0, tmp2739
	movzbl	3(%rax), %edx	# op0_1254->in_struct, tmp2742
	andl	$-17, %edx	#, tmp2743
	movb	%dl, 3(%rax)	# tmp2743, op0_1254->in_struct
.L1473:
	.loc 1 7362 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1472:
	.loc 1 7365 0
	movq	-952(%rbp), %rax	# exp, tmp2744
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2745
	movl	-912(%rbp), %edx	# mode, tmp2746
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp2747, op0
	.loc 1 7366 0
	movq	-832(%rbp), %rax	# op0, tmp2748
	movzbl	2(%rax), %eax	# op0_1263->mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25928
	cmpl	-912(%rbp), %eax	# mode, D.25928
	jne	.L1474	#,
	.loc 1 7367 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1474:
	.loc 1 7370 0
	movq	-832(%rbp), %rax	# op0, tmp2749
	movzwl	(%rax), %eax	# op0_1263->code, D.25925
	cmpw	$67, %ax	#, D.25925
	je	.L1475	#,
	.loc 1 7370 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2750
	movzwl	(%rax), %eax	# op0_1263->code, D.25925
	cmpw	$68, %ax	#, D.25925
	je	.L1475	#,
	movq	-832(%rbp), %rax	# op0, tmp2751
	movzwl	(%rax), %eax	# op0_1263->code, D.25925
	cmpw	$54, %ax	#, D.25925
	je	.L1475	#,
	movq	-832(%rbp), %rax	# op0, tmp2752
	movzwl	(%rax), %eax	# op0_1263->code, D.25925
	cmpw	$55, %ax	#, D.25925
	je	.L1475	#,
	movq	-832(%rbp), %rax	# op0, tmp2753
	movzwl	(%rax), %eax	# op0_1263->code, D.25925
	cmpw	$58, %ax	#, D.25925
	je	.L1475	#,
	movq	-832(%rbp), %rax	# op0, tmp2754
	movzwl	(%rax), %eax	# op0_1263->code, D.25925
	cmpw	$134, %ax	#, D.25925
	je	.L1475	#,
	movq	-832(%rbp), %rax	# op0, tmp2755
	movzwl	(%rax), %eax	# op0_1263->code, D.25925
	cmpw	$56, %ax	#, D.25925
	je	.L1475	#,
	movq	-832(%rbp), %rax	# op0, tmp2756
	movzwl	(%rax), %eax	# op0_1263->code, D.25925
	cmpw	$140, %ax	#, D.25925
	jne	.L1476	#,
.L1475:
.LBB122:
	.loc 1 7372 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2757
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1289->common.type, tmp2758
	movq	%rax, -304(%rbp)	# tmp2758, inner_type
	.loc 1 7373 0
	movq	-304(%rbp), %rax	# inner_type, tmp2759
	movzbl	61(%rax), %eax	# *inner_type_1290, tmp2762
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, tmp2763
	movl	%eax, -876(%rbp)	# tmp2763, inner_mode
	.loc 1 7375 0
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1477	#,
	.loc 1 7376 0
	movl	-876(%rbp), %edx	# inner_mode, tmp2764
	movl	-912(%rbp), %eax	# mode, tmp2765
	movl	%edx, %esi	# tmp2764,
	movl	%eax, %edi	# tmp2765,
	call	subreg_lowpart_offset	#
	movl	%eax, %ecx	#, D.25928
	movl	-876(%rbp), %edx	# inner_mode, tmp2766
	movq	-832(%rbp), %rsi	# op0, tmp2767
	movl	-912(%rbp), %eax	# mode, tmp2768
	movl	%eax, %edi	# tmp2768,
	call	simplify_gen_subreg	#
	jmp	.L1735	#
.L1477:
	.loc 1 7381 0
	movq	-304(%rbp), %rax	# inner_type, tmp2769
	movzbl	17(%rax), %eax	# *inner_type_1290, tmp2772
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	.loc 1 7380 0
	movzbl	%al, %ecx	# D.25921, D.25929
	movq	-832(%rbp), %rdx	# op0, tmp2773
	movl	-876(%rbp), %esi	# inner_mode, tmp2774
	movl	-912(%rbp), %eax	# mode, tmp2775
	movl	%eax, %edi	# tmp2775,
	call	convert_modes	#
	jmp	.L1735	#
.L1476:
.LBE122:
	.loc 1 7384 0
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1478	#,
	.loc 1 7385 0
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.701
	testl	%eax, %eax	# unsignedp.701
	je	.L1479	#,
	.loc 1 7385 0 is_stmt 0 discriminator 1
	movl	$121, %eax	#, iftmp.700
	jmp	.L1480	#
.L1479:
	.loc 1 7385 0 discriminator 2
	movl	$120, %eax	#, iftmp.700
.L1480:
	.loc 1 7385 0 discriminator 3
	movq	-832(%rbp), %rdx	# op0, tmp2776
	movl	-912(%rbp), %ecx	# mode, tmp2777
	movl	%ecx, %esi	# tmp2777,
	movl	%eax, %edi	# iftmp.700,
	call	gen_rtx_fmt_e	#
	jmp	.L1735	#
.L1478:
	.loc 1 7387 0 is_stmt 1
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1481	#,
	.loc 1 7390 0
	movq	-952(%rbp), %rax	# exp, tmp2778
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1279->common.type, D.25927
	movzbl	17(%rax), %eax	# *_1280, tmp2781
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	.loc 1 7389 0
	movzbl	%al, %edx	# D.25921, D.25929
	.loc 1 7388 0
	movq	-832(%rbp), %rcx	# op0, tmp2782
	movl	-912(%rbp), %eax	# mode, tmp2783
	movq	%rcx, %rsi	# tmp2782,
	movl	%eax, %edi	# tmp2783,
	call	convert_to_mode	#
	jmp	.L1735	#
.L1481:
	.loc 1 7393 0
	movq	-952(%rbp), %rax	# exp, tmp2784
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1284->common.type, D.25927
	movzbl	17(%rax), %eax	# *_1285, tmp2787
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	.loc 1 7392 0
	movzbl	%al, %edx	# D.25921, D.25929
	movq	-832(%rbp), %rcx	# op0, tmp2788
	movq	-960(%rbp), %rax	# target, tmp2789
	movq	%rcx, %rsi	# tmp2788,
	movq	%rax, %rdi	# tmp2789,
	call	convert_move	#
	.loc 1 7394 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1207:
	.loc 1 7397 0
	movq	-952(%rbp), %rax	# exp, tmp2790
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp2791
	movl	-912(%rbp), %edx	# mode, tmp2792
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp2793, op0
	.loc 1 7403 0
	movq	-648(%rbp), %rax	# type, tmp2794
	movzbl	61(%rax), %eax	# *type_195, tmp2797
	shrb	%al	# D.25923
	movzbl	%al, %edx	# D.25923, D.25928
	movq	-832(%rbp), %rax	# op0, tmp2798
	movzbl	2(%rax), %eax	# op0_1299->mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25928
	cmpl	%eax, %edx	# D.25928, D.25928
	je	.L1482	#,
	.loc 1 7405 0
	movq	-648(%rbp), %rax	# type, tmp2799
	movzbl	61(%rax), %eax	# *type_195, D.25922
	andl	$-2, %eax	#, D.25922
	cmpb	$102, %al	#, D.25922
	je	.L1483	#,
	.loc 1 7405 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2800
	movzbl	2(%rax), %eax	# op0_1299->mode, D.25922
	cmpb	$51, %al	#, D.25922
	je	.L1483	#,
	.loc 1 7406 0 is_stmt 1
	movq	-648(%rbp), %rax	# type, tmp2801
	movzbl	61(%rax), %eax	# *type_195, tmp2804
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, D.25929
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25922
	movzbl	%al, %edx	# D.25922, D.25929
	movl	target_flags(%rip), %eax	# target_flags, target_flags.703
	andl	$33554432, %eax	#, D.25929
	testl	%eax, %eax	# D.25929
	je	.L1484	#,
	.loc 1 7406 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.702
	jmp	.L1485	#
.L1484:
	.loc 1 7406 0 discriminator 2
	movl	$4, %eax	#, iftmp.702
.L1485:
	.loc 1 7406 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.702, D.25929
	jg	.L1483	#,
	.loc 1 7407 0 is_stmt 1
	movq	-832(%rbp), %rax	# op0, tmp2806
	movzbl	2(%rax), %eax	# op0_1299->mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25922
	movzbl	%al, %edx	# D.25922, D.25929
	movl	target_flags(%rip), %eax	# target_flags, target_flags.705
	andl	$33554432, %eax	#, D.25929
	testl	%eax, %eax	# D.25929
	je	.L1486	#,
	.loc 1 7407 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.704
	jmp	.L1487	#
.L1486:
	.loc 1 7407 0 discriminator 2
	movl	$4, %eax	#, iftmp.704
.L1487:
	.loc 1 7407 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.704, D.25929
	jg	.L1483	#,
	.loc 1 7408 0 is_stmt 1
	movq	-648(%rbp), %rax	# type, tmp2808
	movzbl	61(%rax), %eax	# *type_195, tmp2811
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, D.25931
	movq	-832(%rbp), %rdx	# op0, tmp2812
	movq	%rdx, %rsi	# tmp2812,
	movl	%eax, %edi	# D.25931,
	call	gen_lowpart	#
	movq	%rax, -832(%rbp)	# tmp2813, op0
	jmp	.L1482	#
.L1483:
	.loc 1 7409 0
	movq	-832(%rbp), %rax	# op0, tmp2814
	movzwl	(%rax), %eax	# op0_1299->code, D.25925
	cmpw	$66, %ax	#, D.25925
	je	.L1482	#,
.LBB123:
	.loc 1 7415 0
	movq	-952(%rbp), %rax	# exp, tmp2815
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1327->common.type, tmp2816
	movq	%rax, -296(%rbp)	# tmp2816, inner_type
	.loc 1 7417 0
	movq	-952(%rbp), %rax	# exp, tmp2817
	movzbl	17(%rax), %eax	# *exp_194(D), D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1488	#,
	.loc 1 7418 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$7418, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1488:
	.loc 1 7420 0
	cmpq	$0, -960(%rbp)	#, target
	je	.L1489	#,
	.loc 1 7420 0 is_stmt 0 discriminator 1
	movq	-960(%rbp), %rax	# target, tmp2818
	movzbl	2(%rax), %edx	# target_4->mode, D.25922
	movq	-296(%rbp), %rax	# inner_type, tmp2819
	movzbl	61(%rax), %eax	# *inner_type_1328, tmp2822
	shrb	%al	# D.25923
	cmpb	%al, %dl	# D.25922, D.25922
	je	.L1490	#,
.L1489:
	.loc 1 7424 0 is_stmt 1
	movq	-296(%rbp), %rax	# inner_type, tmp2823
	movzbl	61(%rax), %eax	# *inner_type_1328, tmp2826
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, D.25929
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.25922
	.loc 1 7423 0
	movzbl	%al, %esi	# D.25922, D.25934
	movq	-296(%rbp), %rax	# inner_type, tmp2828
	movzbl	61(%rax), %eax	# *inner_type_1328, tmp2831
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, D.25931
	.loc 1 7422 0
	movq	-296(%rbp), %rdx	# inner_type, tmp2832
	movq	%rdx, %rcx	# tmp2832,
	movl	$0, %edx	#,
	movl	%eax, %edi	# D.25931,
	call	assign_stack_temp_for_type	#
	movq	%rax, -960(%rbp)	# tmp2833, target
.L1490:
	.loc 1 7426 0
	movq	-832(%rbp), %rdx	# op0, tmp2834
	movq	-960(%rbp), %rax	# target, tmp2835
	movq	%rdx, %rsi	# tmp2834,
	movq	%rax, %rdi	# tmp2835,
	call	emit_move_insn	#
	.loc 1 7427 0
	movq	-960(%rbp), %rax	# target, tmp2836
	movq	%rax, -832(%rbp)	# tmp2836, op0
.L1482:
.LBE123:
	.loc 1 7434 0
	movq	-832(%rbp), %rax	# op0, tmp2837
	movzwl	(%rax), %eax	# op0_34->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1491	#,
	.loc 1 7436 0
	movq	-832(%rbp), %rax	# op0, tmp2838
	movq	%rax, %rdi	# tmp2838,
	call	copy_rtx	#
	movq	%rax, -832(%rbp)	# tmp2839, op0
	.loc 1 7438 0
	movq	-648(%rbp), %rax	# type, tmp2840
	movzbl	18(%rax), %eax	# *type_195, D.25922
	andl	$2, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1492	#,
	.loc 1 7439 0
	movq	-648(%rbp), %rax	# type, tmp2841
	movl	64(%rax), %edx	# type_195->type.align, D.25928
	movq	-832(%rbp), %rax	# op0, tmp2842
	movq	16(%rax), %rax	# op0_1343->fld[1].rtmem, D.25939
	testq	%rax, %rax	# D.25939
	je	.L1493	#,
	.loc 1 7439 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2843
	movq	16(%rax), %rax	# op0_1343->fld[1].rtmem, D.25939
	movl	32(%rax), %eax	# _1348->align, iftmp.706
	jmp	.L1494	#
.L1493:
	.loc 1 7439 0 discriminator 2
	movl	$8, %eax	#, iftmp.706
.L1494:
	.loc 1 7439 0 discriminator 1
	cmpl	%eax, %edx	# iftmp.706, D.25928
	cmovb	%eax, %edx	# D.25928,, iftmp.706, D.25928
	movq	-832(%rbp), %rax	# op0, tmp2844
	movl	%edx, %esi	# D.25928,
	movq	%rax, %rdi	# tmp2844,
	call	set_mem_align	#
.L1492:
	.loc 1 7463 0 is_stmt 1
	movq	-648(%rbp), %rax	# type, tmp2845
	movzbl	61(%rax), %eax	# *type_195, tmp2848
	shrb	%al	# D.25923
	movzbl	%al, %esi	# D.25923, D.25931
	movq	-832(%rbp), %rax	# op0, tmp2849
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp2849,
	call	adjust_address_1	#
	movq	%rax, -832(%rbp)	# tmp2850, op0
.L1491:
	.loc 1 7466 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1184:
	.loc 1 7472 0
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.709
	.loc 1 7474 0
	testl	%eax, %eax	# unsignedp.709
	jne	.L1495	#,
	.loc 1 7472 0
	movl	flag_trapv(%rip), %eax	# flag_trapv, flag_trapv.710
	testl	%eax, %eax	# flag_trapv.710
	je	.L1495	#,
	.loc 1 7473 0
	movl	-912(%rbp), %eax	# mode, mode.711
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$1, %eax	#, D.25937
	jne	.L1495	#,
	.loc 1 7474 0
	movq	optab_table+8(%rip), %rax	# optab_table, iftmp.708
	jmp	.L1496	#
.L1495:
	.loc 1 7474 0 is_stmt 0 discriminator 1
	movq	optab_table(%rip), %rax	# optab_table, iftmp.708
.L1496:
	.loc 1 7472 0 is_stmt 1
	movq	%rax, -808(%rbp)	# iftmp.708, this_optab
	.loc 1 7487 0
	movq	-952(%rbp), %rax	# exp, tmp2852
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1394->common.code, D.25922
	cmpb	$59, %al	#, D.25922
	jne	.L1497	#,
	.loc 1 7488 0
	movq	-952(%rbp), %rax	# exp, tmp2853
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25927
	movq	40(%rax), %rax	# _1396->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1397->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1497	#,
	.loc 1 7489 0
	movq	-952(%rbp), %rax	# exp, tmp2854
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1399->common.code, D.25922
	cmpb	$120, %al	#, D.25922
	jne	.L1497	#,
	.loc 1 7490 0
	movq	-952(%rbp), %rax	# exp, tmp2855
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	addq	$40, %rax	#, D.25936
	movq	(%rax), %rdx	# MEM[(struct rtx_def * *)_1402], D.25924
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.25924
	cmpq	%rax, %rdx	# D.25924, D.25924
	je	.L1498	#,
	.loc 1 7491 0
	movq	-952(%rbp), %rax	# exp, tmp2856
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	addq	$40, %rax	#, D.25936
	movq	(%rax), %rdx	# MEM[(struct rtx_def * *)_1406], D.25924
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.25924
	cmpq	%rax, %rdx	# D.25924, D.25924
	je	.L1498	#,
	.loc 1 7492 0
	movq	-952(%rbp), %rax	# exp, tmp2857
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	addq	$40, %rax	#, D.25936
	movq	(%rax), %rdx	# MEM[(struct rtx_def * *)_1410], D.25924
	movq	global_rtl+40(%rip), %rax	# global_rtl, D.25924
	cmpq	%rax, %rdx	# D.25924, D.25924
	jne	.L1497	#,
.L1498:
.LBB124:
	.loc 1 7494 0
	movq	-952(%rbp), %rax	# exp, tmp2858
	movq	40(%rax), %rax	# exp_1->exp.operands, tmp2859
	movq	%rax, -264(%rbp)	# tmp2859, t
	.loc 1 7496 0
	movq	-952(%rbp), %rax	# exp, tmp2860
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25927
	movq	32(%rax), %rdx	# _1414->exp.operands, D.25927
	movq	-952(%rbp), %rax	# exp, tmp2861
	movq	%rdx, 40(%rax)	# D.25927, exp_1->exp.operands
	.loc 1 7497 0
	movq	-952(%rbp), %rax	# exp, tmp2862
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25927
	movq	-264(%rbp), %rdx	# t, tmp2863
	movq	%rdx, 32(%rax)	# tmp2863, _1416->exp.operands
.L1497:
.LBE124:
	.loc 1 7508 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1499	#,
	.loc 1 7508 0 is_stmt 0 discriminator 1
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1499	#,
	.loc 1 7509 0 is_stmt 1
	movl	ptr_mode(%rip), %eax	# ptr_mode, ptr_mode.712
	cmpl	%eax, -912(%rbp)	# ptr_mode.712, mode
	jne	.L1500	#,
	.loc 1 7509 0 is_stmt 0 discriminator 1
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.713
	testl	%eax, %eax	# unsignedp.713
	jne	.L1499	#,
	movl	flag_trapv(%rip), %eax	# flag_trapv, flag_trapv.714
	testl	%eax, %eax	# flag_trapv.714
	jne	.L1500	#,
.L1499:
	.loc 1 7511 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2864
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1420->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1501	#,
	.loc 1 7512 0
	movl	-912(%rbp), %eax	# mode, mode.715
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25925
	cmpw	$64, %ax	#, D.25925
	ja	.L1501	#,
	.loc 1 7513 0
	movq	-952(%rbp), %rax	# exp, tmp2866
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	movzbl	17(%rax), %eax	# *_1424, D.25922
	andl	$2, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1501	#,
.LBB125:
	.loc 1 7517 0
	movq	-952(%rbp), %rax	# exp, tmp2867
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp2868
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp2869, op1
	.loc 1 7526 0
	movq	-952(%rbp), %rax	# exp, tmp2870
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	movq	8(%rax), %rax	# _1429->common.type, D.25927
	movzbl	61(%rax), %eax	# *_1430, tmp2873
	shrb	%al	# D.25923
	.loc 1 7524 0
	movzbl	%al, %edx	# D.25923, D.25931
	movq	-952(%rbp), %rax	# exp, tmp2874
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25927
	movq	32(%rax), %rax	# _1433->int_cst.int_cst.low, D.25935
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25934,
	call	immed_double_const	#
	movq	%rax, -256(%rbp)	# tmp2875, constant_part
	.loc 1 7527 0
	movq	-256(%rbp), %rax	# constant_part, tmp2876
	movq	8(%rax), %rdx	# constant_part_1436->fld[0].rtwint, D.25934
	movq	-824(%rbp), %rax	# op1, tmp2877
	movq	%rdx, %rsi	# D.25934,
	movq	%rax, %rdi	# tmp2877,
	call	plus_constant_wide	#
	movq	%rax, -824(%rbp)	# tmp2878, op1
	.loc 1 7528 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1502	#,
	.loc 1 7528 0 is_stmt 0 discriminator 1
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1502	#,
	.loc 1 7529 0 is_stmt 1
	movq	-960(%rbp), %rdx	# target, tmp2879
	movq	-824(%rbp), %rax	# op1, tmp2880
	movq	%rdx, %rsi	# tmp2879,
	movq	%rax, %rdi	# tmp2880,
	call	force_operand	#
	movq	%rax, -824(%rbp)	# tmp2881, op1
.L1502:
	.loc 1 7530 0
	movq	-824(%rbp), %rax	# op1, D.25920
	jmp	.L1735	#
.L1501:
.LBE125:
	.loc 1 7533 0
	movq	-952(%rbp), %rax	# exp, tmp2882
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1441->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1500	#,
	.loc 1 7534 0
	movl	-912(%rbp), %eax	# mode, mode.716
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25925
	cmpw	$32, %ax	#, D.25925
	ja	.L1500	#,
	.loc 1 7535 0
	movq	-952(%rbp), %rax	# exp, tmp2884
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25927
	movzbl	17(%rax), %eax	# *_1445, D.25922
	andl	$2, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1500	#,
.LBB126:
	.loc 1 7539 0
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1503	#,
	.loc 1 7539 0 is_stmt 0 discriminator 1
	movl	$3, %eax	#, iftmp.717
	jmp	.L1504	#
.L1503:
	.loc 1 7539 0 discriminator 2
	movl	$1, %eax	#, iftmp.717
.L1504:
	.loc 1 7539 0 discriminator 3
	movq	-952(%rbp), %rdx	# exp, tmp2885
	movq	32(%rdx), %rdi	# exp_1->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp2886
	movl	%eax, %ecx	# iftmp.717,
	movl	$0, %edx	#,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp2887, op0
	.loc 1 7542 0 is_stmt 1 discriminator 3
	movq	-832(%rbp), %rax	# op0, tmp2888
	movzwl	(%rax), %eax	# op0_1451->code, D.25925
	cmpw	$67, %ax	#, D.25925
	je	.L1505	#,
	.loc 1 7542 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2889
	movzwl	(%rax), %eax	# op0_1451->code, D.25925
	cmpw	$68, %ax	#, D.25925
	je	.L1505	#,
	movq	-832(%rbp), %rax	# op0, tmp2890
	movzwl	(%rax), %eax	# op0_1451->code, D.25925
	cmpw	$54, %ax	#, D.25925
	je	.L1505	#,
	movq	-832(%rbp), %rax	# op0, tmp2891
	movzwl	(%rax), %eax	# op0_1451->code, D.25925
	cmpw	$55, %ax	#, D.25925
	je	.L1505	#,
	movq	-832(%rbp), %rax	# op0, tmp2892
	movzwl	(%rax), %eax	# op0_1451->code, D.25925
	cmpw	$58, %ax	#, D.25925
	je	.L1505	#,
	movq	-832(%rbp), %rax	# op0, tmp2893
	movzwl	(%rax), %eax	# op0_1451->code, D.25925
	cmpw	$134, %ax	#, D.25925
	je	.L1505	#,
	movq	-832(%rbp), %rax	# op0, tmp2894
	movzwl	(%rax), %eax	# op0_1451->code, D.25925
	cmpw	$56, %ax	#, D.25925
	je	.L1505	#,
	movq	-832(%rbp), %rax	# op0, tmp2895
	movzwl	(%rax), %eax	# op0_1451->code, D.25925
	cmpw	$140, %ax	#, D.25925
	je	.L1505	#,
	.loc 1 7544 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2896
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp2897
	movl	%edx, %ecx	# tmp2897,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp2898, op1
	.loc 1 7548 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1506	#,
	.loc 1 7548 0 is_stmt 0 discriminator 1
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1506	#,
	.loc 1 7549 0 is_stmt 1
	jmp	.L1507	#
.L1506:
	.loc 1 7550 0
	jmp	.L1508	#
.L1505:
	.loc 1 7559 0
	movq	-952(%rbp), %rax	# exp, tmp2899
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25927
	movq	8(%rax), %rax	# _1462->common.type, D.25927
	movzbl	61(%rax), %eax	# *_1463, tmp2902
	shrb	%al	# D.25923
	.loc 1 7557 0
	movzbl	%al, %edx	# D.25923, D.25931
	movq	-952(%rbp), %rax	# exp, tmp2903
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	movq	32(%rax), %rax	# _1466->int_cst.int_cst.low, D.25935
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25934,
	call	immed_double_const	#
	movq	%rax, -248(%rbp)	# tmp2904, constant_part
	.loc 1 7560 0
	movq	-248(%rbp), %rax	# constant_part, tmp2905
	movq	8(%rax), %rdx	# constant_part_1469->fld[0].rtwint, D.25934
	movq	-832(%rbp), %rax	# op0, tmp2906
	movq	%rdx, %rsi	# D.25934,
	movq	%rax, %rdi	# tmp2906,
	call	plus_constant_wide	#
	movq	%rax, -832(%rbp)	# tmp2907, op0
	.loc 1 7561 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1509	#,
	.loc 1 7561 0 is_stmt 0 discriminator 1
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1509	#,
	.loc 1 7562 0 is_stmt 1
	movq	-960(%rbp), %rdx	# target, tmp2908
	movq	-832(%rbp), %rax	# op0, tmp2909
	movq	%rdx, %rsi	# tmp2908,
	movq	%rax, %rdi	# tmp2909,
	call	force_operand	#
	movq	%rax, -832(%rbp)	# tmp2910, op0
.L1509:
	.loc 1 7563 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1500:
.LBE126:
	.loc 1 7571 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1510	#,
	.loc 1 7571 0 is_stmt 0 discriminator 1
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1511	#,
.L1510:
	.loc 1 7572 0 is_stmt 1
	movl	ptr_mode(%rip), %eax	# ptr_mode, ptr_mode.718
	cmpl	%eax, -912(%rbp)	# ptr_mode.718, mode
	jne	.L1511	#,
	.loc 1 7575 0
	movq	-952(%rbp), %rax	# exp, tmp2911
	movq	40(%rax), %rcx	# exp_1->exp.operands, D.25927
	movq	-800(%rbp), %rax	# subtarget, tmp2912
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp2912,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1512	#,
	.loc 1 7576 0
	movq	$0, -800(%rbp)	#, subtarget
.L1512:
	.loc 1 7578 0
	movq	-952(%rbp), %rax	# exp, tmp2913
	movq	32(%rax), %rax	# exp_1->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp2914
	movq	-800(%rbp), %rsi	# subtarget, tmp2915
	movl	%edx, %ecx	# tmp2914,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp2916, op0
	.loc 1 7579 0
	movq	-952(%rbp), %rax	# exp, tmp2917
	movq	40(%rax), %rax	# exp_1->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp2918
	movl	%edx, %ecx	# tmp2918,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp2919, op1
.L1508:
	.loc 1 7583 0
	movq	-832(%rbp), %rax	# op0, tmp2920
	movzwl	(%rax), %eax	# op0_37->code, D.25925
	cmpw	$75, %ax	#, D.25925
	jne	.L1513	#,
	.loc 1 7584 0
	movq	-832(%rbp), %rax	# op0, tmp2921
	movq	16(%rax), %rax	# op0_37->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1483->code, D.25925
	cmpw	$67, %ax	#, D.25925
	je	.L1514	#,
	.loc 1 7584 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2922
	movq	16(%rax), %rax	# op0_37->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1485->code, D.25925
	cmpw	$68, %ax	#, D.25925
	je	.L1514	#,
	movq	-832(%rbp), %rax	# op0, tmp2923
	movq	16(%rax), %rax	# op0_37->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1487->code, D.25925
	cmpw	$54, %ax	#, D.25925
	je	.L1514	#,
	movq	-832(%rbp), %rax	# op0, tmp2924
	movq	16(%rax), %rax	# op0_37->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1489->code, D.25925
	cmpw	$55, %ax	#, D.25925
	je	.L1514	#,
	movq	-832(%rbp), %rax	# op0, tmp2925
	movq	16(%rax), %rax	# op0_37->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1491->code, D.25925
	cmpw	$58, %ax	#, D.25925
	je	.L1514	#,
	movq	-832(%rbp), %rax	# op0, tmp2926
	movq	16(%rax), %rax	# op0_37->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1493->code, D.25925
	cmpw	$134, %ax	#, D.25925
	je	.L1514	#,
	movq	-832(%rbp), %rax	# op0, tmp2927
	movq	16(%rax), %rax	# op0_37->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1495->code, D.25925
	cmpw	$56, %ax	#, D.25925
	je	.L1514	#,
	movq	-832(%rbp), %rax	# op0, tmp2928
	movq	16(%rax), %rax	# op0_37->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1497->code, D.25925
	cmpw	$140, %ax	#, D.25925
	jne	.L1513	#,
.L1514:
	.loc 1 7586 0 is_stmt 1
	movq	-832(%rbp), %rax	# op0, tmp2929
	movq	%rax, -816(%rbp)	# tmp2929, temp
	.loc 1 7587 0
	movq	-824(%rbp), %rax	# op1, tmp2930
	movq	%rax, -832(%rbp)	# tmp2930, op0
	.loc 1 7588 0
	movq	-816(%rbp), %rax	# temp, tmp2931
	movq	%rax, -824(%rbp)	# tmp2931, op1
.L1513:
	.loc 1 7592 0
	movq	-824(%rbp), %rax	# op1, tmp2932
	movzwl	(%rax), %eax	# op1_51->code, D.25925
	cmpw	$75, %ax	#, D.25925
	jne	.L1515	#,
	.loc 1 7593 0
	movq	-824(%rbp), %rax	# op1, tmp2933
	movq	16(%rax), %rax	# op1_51->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1503->code, D.25925
	cmpw	$67, %ax	#, D.25925
	je	.L1516	#,
	.loc 1 7593 0 is_stmt 0 discriminator 1
	movq	-824(%rbp), %rax	# op1, tmp2934
	movq	16(%rax), %rax	# op1_51->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1505->code, D.25925
	cmpw	$68, %ax	#, D.25925
	je	.L1516	#,
	movq	-824(%rbp), %rax	# op1, tmp2935
	movq	16(%rax), %rax	# op1_51->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1507->code, D.25925
	cmpw	$54, %ax	#, D.25925
	je	.L1516	#,
	movq	-824(%rbp), %rax	# op1, tmp2936
	movq	16(%rax), %rax	# op1_51->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1509->code, D.25925
	cmpw	$55, %ax	#, D.25925
	je	.L1516	#,
	movq	-824(%rbp), %rax	# op1, tmp2937
	movq	16(%rax), %rax	# op1_51->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1511->code, D.25925
	cmpw	$58, %ax	#, D.25925
	je	.L1516	#,
	movq	-824(%rbp), %rax	# op1, tmp2938
	movq	16(%rax), %rax	# op1_51->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1513->code, D.25925
	cmpw	$134, %ax	#, D.25925
	je	.L1516	#,
	movq	-824(%rbp), %rax	# op1, tmp2939
	movq	16(%rax), %rax	# op1_51->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1515->code, D.25925
	cmpw	$56, %ax	#, D.25925
	je	.L1516	#,
	movq	-824(%rbp), %rax	# op1, tmp2940
	movq	16(%rax), %rax	# op1_51->fld[1].rtx, D.25924
	movzwl	(%rax), %eax	# _1517->code, D.25925
	cmpw	$140, %ax	#, D.25925
	jne	.L1515	#,
.L1516:
.LBB127:
	.loc 1 7595 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, constant_term.719
	movq	%rax, -840(%rbp)	# constant_term.719, constant_term
	.loc 1 7597 0
	movq	-824(%rbp), %rax	# op1, tmp2941
	movq	8(%rax), %rdx	# op1_51->fld[0].rtx, D.25924
	movq	-832(%rbp), %rcx	# op0, tmp2942
	movl	-912(%rbp), %eax	# mode, tmp2943
	movl	%eax, %esi	# tmp2943,
	movl	$75, %edi	#,
	call	simplify_binary_operation	#
	movq	%rax, -816(%rbp)	# tmp2944, temp
	.loc 1 7598 0
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1517	#,
	.loc 1 7599 0
	movq	-816(%rbp), %rax	# temp, tmp2945
	movq	%rax, -832(%rbp)	# tmp2945, op0
	jmp	.L1518	#
.L1517:
	.loc 1 7601 0
	movq	-832(%rbp), %rax	# op0, tmp2946
	movzwl	(%rax), %eax	# op0_38->code, D.25925
	cmpw	$78, %ax	#, D.25925
	jne	.L1519	#,
	.loc 1 7602 0
	movq	-824(%rbp), %rax	# op1, tmp2947
	movq	8(%rax), %rcx	# op1_51->fld[0].rtx, D.25924
	movq	-832(%rbp), %rdx	# op0, tmp2948
	movl	-912(%rbp), %eax	# mode, tmp2949
	movl	%eax, %esi	# tmp2949,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -832(%rbp)	# tmp2950, op0
	jmp	.L1518	#
.L1519:
	.loc 1 7604 0
	movq	-824(%rbp), %rax	# op1, tmp2951
	movq	8(%rax), %rdx	# op1_51->fld[0].rtx, D.25924
	movq	-832(%rbp), %rcx	# op0, tmp2952
	movl	-912(%rbp), %eax	# mode, tmp2953
	movl	%eax, %esi	# tmp2953,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -832(%rbp)	# tmp2954, op0
.L1518:
	.loc 1 7607 0
	leaq	-840(%rbp), %rdx	#, tmp2955
	movq	-832(%rbp), %rax	# op0, tmp2956
	movq	%rdx, %rsi	# tmp2955,
	movq	%rax, %rdi	# tmp2956,
	call	eliminate_constant_term	#
	movq	%rax, -832(%rbp)	# tmp2957, op0
	.loc 1 7613 0
	movq	-824(%rbp), %rax	# op1, tmp2958
	movq	16(%rax), %rcx	# op1_51->fld[1].rtx, D.25924
	movq	-840(%rbp), %rdx	# constant_term, constant_term.720
	movl	-912(%rbp), %eax	# mode, tmp2959
	movl	%eax, %esi	# tmp2959,
	movl	$75, %edi	#,
	call	simplify_binary_operation	#
	movq	%rax, -816(%rbp)	# tmp2960, temp
	.loc 1 7615 0
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1520	#,
	.loc 1 7616 0
	movq	-816(%rbp), %rax	# temp, tmp2961
	movq	%rax, -824(%rbp)	# tmp2961, op1
	jmp	.L1515	#
.L1520:
	.loc 1 7618 0
	movq	-824(%rbp), %rax	# op1, tmp2962
	movq	16(%rax), %rcx	# op1_51->fld[1].rtx, D.25924
	movq	-840(%rbp), %rdx	# constant_term, constant_term.721
	movl	-912(%rbp), %eax	# mode, tmp2963
	movl	%eax, %esi	# tmp2963,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -824(%rbp)	# tmp2964, op1
.L1515:
.LBE127:
	.loc 1 7622 0
	movq	-832(%rbp), %rax	# op0, tmp2965
	movzwl	(%rax), %eax	# op0_40->code, D.25925
	cmpw	$67, %ax	#, D.25925
	je	.L1522	#,
	.loc 1 7622 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp2966
	movzwl	(%rax), %eax	# op0_40->code, D.25925
	cmpw	$68, %ax	#, D.25925
	je	.L1522	#,
	movq	-832(%rbp), %rax	# op0, tmp2967
	movzwl	(%rax), %eax	# op0_40->code, D.25925
	cmpw	$54, %ax	#, D.25925
	je	.L1522	#,
	movq	-832(%rbp), %rax	# op0, tmp2968
	movzwl	(%rax), %eax	# op0_40->code, D.25925
	cmpw	$55, %ax	#, D.25925
	je	.L1522	#,
	movq	-832(%rbp), %rax	# op0, tmp2969
	movzwl	(%rax), %eax	# op0_40->code, D.25925
	cmpw	$58, %ax	#, D.25925
	je	.L1522	#,
	movq	-832(%rbp), %rax	# op0, tmp2970
	movzwl	(%rax), %eax	# op0_40->code, D.25925
	cmpw	$134, %ax	#, D.25925
	je	.L1522	#,
	movq	-832(%rbp), %rax	# op0, tmp2971
	movzwl	(%rax), %eax	# op0_40->code, D.25925
	cmpw	$56, %ax	#, D.25925
	je	.L1522	#,
	movq	-832(%rbp), %rax	# op0, tmp2972
	movzwl	(%rax), %eax	# op0_40->code, D.25925
	cmpw	$140, %ax	#, D.25925
	je	.L1522	#,
	movq	-824(%rbp), %rax	# op1, tmp2973
	movzwl	(%rax), %eax	# op1_53->code, D.25925
	cmpw	$78, %ax	#, D.25925
	jne	.L1523	#,
.L1522:
	.loc 1 7623 0 is_stmt 1
	movq	-824(%rbp), %rax	# op1, tmp2974
	movq	%rax, -816(%rbp)	# tmp2974, temp
	movq	-832(%rbp), %rax	# op0, tmp2975
	movq	%rax, -824(%rbp)	# tmp2975, op1
	movq	-816(%rbp), %rax	# temp, tmp2976
	movq	%rax, -832(%rbp)	# tmp2976, op0
.L1523:
	.loc 1 7625 0
	movq	-824(%rbp), %rcx	# op1, tmp2977
	movq	-832(%rbp), %rdx	# op0, tmp2978
	movl	-912(%rbp), %eax	# mode, tmp2979
	movl	%eax, %esi	# tmp2979,
	movl	$75, %edi	#,
	call	simplify_binary_operation	#
	movq	%rax, -816(%rbp)	# tmp2980, temp
	.loc 1 7626 0
	cmpq	$0, -816(%rbp)	#, temp
	jne	.L1524	#,
	.loc 1 7626 0 is_stmt 0 discriminator 1
	movq	-824(%rbp), %rcx	# op1, tmp2981
	movq	-832(%rbp), %rdx	# op0, tmp2982
	movl	-912(%rbp), %eax	# mode, tmp2983
	movl	%eax, %esi	# tmp2983,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1525	#
.L1524:
	.loc 1 7626 0 discriminator 2
	movq	-816(%rbp), %rax	# temp, iftmp.722
.L1525:
	.loc 1 7626 0 discriminator 3
	jmp	.L1735	#
.L1185:
	.loc 1 7634 0 is_stmt 1
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1526	#,
	.loc 1 7634 0 is_stmt 0 discriminator 1
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1527	#,
.L1526:
	.loc 1 7635 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp2984
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	really_constant_p	#
	testl	%eax, %eax	# D.25929
	je	.L1527	#,
	.loc 1 7636 0
	movq	-952(%rbp), %rax	# exp, tmp2985
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	really_constant_p	#
	testl	%eax, %eax	# D.25929
	je	.L1527	#,
.LBB128:
	.loc 1 7638 0
	movq	-952(%rbp), %rax	# exp, tmp2986
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp2987
	movl	%edx, %ecx	# tmp2987,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -288(%rbp)	# tmp2988, op0
	.loc 1 7640 0
	movq	-952(%rbp), %rax	# exp, tmp2989
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp2990
	movl	%edx, %ecx	# tmp2990,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -280(%rbp)	# tmp2991, op1
	.loc 1 7645 0
	movq	-280(%rbp), %rax	# op1, tmp2992
	movzwl	(%rax), %eax	# op1_1363->code, D.25925
	cmpw	$54, %ax	#, D.25925
	jne	.L1528	#,
	.loc 1 7646 0
	movq	-280(%rbp), %rax	# op1, tmp2993
	movq	8(%rax), %rax	# op1_1363->fld[0].rtwint, D.25934
	negq	%rax	# D.25934
	movq	%rax, %rdx	# D.25934, D.25934
	movq	-288(%rbp), %rax	# op0, tmp2994
	movq	%rdx, %rsi	# D.25934,
	movq	%rax, %rdi	# tmp2994,
	call	plus_constant_wide	#
	jmp	.L1735	#
.L1528:
	.loc 1 7648 0
	movq	-280(%rbp), %rcx	# op1, tmp2995
	movq	-288(%rbp), %rdx	# op0, tmp2996
	movl	-912(%rbp), %eax	# mode, tmp2997
	movl	%eax, %esi	# tmp2997,
	movl	$76, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1735	#
.L1527:
.LBE128:
	.loc 1 7651 0
	movq	-952(%rbp), %rax	# exp, tmp2998
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1369->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1529	#,
.LBB129:
	.loc 1 7653 0
	movq	-952(%rbp), %rax	# exp, tmp2999
	movq	40(%rax), %rdx	# exp_194(D)->exp.operands, D.25927
	movq	-648(%rbp), %rax	# type, tmp3000
	movq	%rax, %rsi	# tmp3000,
	movl	$77, %edi	#,
	call	build1	#
	movq	%rax, %rdi	# D.25927,
	call	fold	#
	movq	%rax, -272(%rbp)	# tmp3001, negated
	.loc 1 7656 0
	movq	-648(%rbp), %rax	# type, tmp3002
	movzbl	17(%rax), %eax	# *type_195, D.25922
	andl	$32, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1529	#,
	.loc 1 7656 0 is_stmt 0 discriminator 1
	movq	-272(%rbp), %rax	# negated, tmp3003
	movzbl	18(%rax), %eax	# *negated_1373, D.25922
	andl	$8, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1529	#,
	.loc 1 7663 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp3004
	movq	32(%rax), %rdx	# exp_194(D)->exp.operands, D.25927
	movq	-272(%rbp), %rcx	# negated, tmp3005
	movq	-648(%rbp), %rax	# type, tmp3006
	movq	%rax, %rsi	# tmp3006,
	movl	$59, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -952(%rbp)	# tmp3007, exp
	.loc 1 7664 0
	jmp	.L1184	#
.L1529:
.LBE129:
	.loc 1 7667 0
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.724
	.loc 1 7669 0
	testl	%eax, %eax	# unsignedp.724
	jne	.L1530	#,
	.loc 1 7667 0
	movl	flag_trapv(%rip), %eax	# flag_trapv, flag_trapv.725
	testl	%eax, %eax	# flag_trapv.725
	je	.L1530	#,
	.loc 1 7668 0
	movl	-912(%rbp), %eax	# mode, mode.726
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$1, %eax	#, D.25937
	jne	.L1530	#,
	.loc 1 7669 0
	movq	optab_table+24(%rip), %rax	# optab_table, iftmp.723
	jmp	.L1531	#
.L1530:
	.loc 1 7669 0 is_stmt 0 discriminator 1
	movq	optab_table+16(%rip), %rax	# optab_table, iftmp.723
.L1531:
	.loc 1 7667 0 is_stmt 1
	movq	%rax, -808(%rbp)	# iftmp.723, this_optab
	.loc 1 7670 0
	jmp	.L1511	#
.L1186:
	.loc 1 7676 0
	movq	-952(%rbp), %rax	# exp, tmp3009
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1552->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1532	#,
.LBB130:
	.loc 1 7678 0
	movq	-952(%rbp), %rax	# exp, tmp3010
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, tmp3011
	movq	%rax, -240(%rbp)	# tmp3011, t1
	.loc 1 7679 0
	movq	-952(%rbp), %rax	# exp, tmp3012
	movq	40(%rax), %rdx	# exp_194(D)->exp.operands, D.25927
	movq	-952(%rbp), %rax	# exp, tmp3013
	movq	%rdx, 32(%rax)	# D.25927, exp_194(D)->exp.operands
	.loc 1 7680 0
	movq	-952(%rbp), %rax	# exp, tmp3014
	movq	-240(%rbp), %rdx	# t1, tmp3015
	movq	%rdx, 40(%rax)	# tmp3015, exp_194(D)->exp.operands
.L1532:
.LBE130:
	.loc 1 7686 0
	cmpl	$1, -968(%rbp)	#, modifier
	jne	.L1533	#,
	.loc 1 7686 0 is_stmt 0 discriminator 1
	movl	ptr_mode(%rip), %eax	# ptr_mode, ptr_mode.727
	cmpl	%eax, -912(%rbp)	# ptr_mode.727, mode
	jne	.L1533	#,
	.loc 1 7687 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp3016
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	host_integerp	#
	testl	%eax, %eax	# D.25929
	je	.L1533	#,
	.loc 1 7689 0
	movq	-952(%rbp), %rax	# exp, tmp3017
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp3018
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3019, op0
	.loc 1 7702 0
	movq	-832(%rbp), %rax	# op0, tmp3020
	movzwl	(%rax), %eax	# op0_1560->code, D.25925
	cmpw	$61, %ax	#, D.25925
	je	.L1534	#,
	.loc 1 7703 0
	movq	-832(%rbp), %rax	# op0, tmp3021
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp3021,
	call	force_operand	#
	movq	%rax, -832(%rbp)	# tmp3022, op0
.L1534:
	.loc 1 7704 0
	movq	-832(%rbp), %rax	# op0, tmp3023
	movzwl	(%rax), %eax	# op0_42->code, D.25925
	cmpw	$61, %ax	#, D.25925
	je	.L1535	#,
	.loc 1 7705 0
	movq	-832(%rbp), %rdx	# op0, tmp3024
	movl	-912(%rbp), %eax	# mode, tmp3025
	movq	%rdx, %rsi	# tmp3024,
	movl	%eax, %edi	# tmp3025,
	call	copy_to_mode_reg	#
	movq	%rax, -832(%rbp)	# tmp3026, op0
.L1535:
	.loc 1 7708 0
	movq	-952(%rbp), %rax	# exp, tmp3027
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	tree_low_cst	#
	movq	%rax, %rsi	# D.25934,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.25924
	.loc 1 7707 0
	movq	-832(%rbp), %rdx	# op0, tmp3028
	movl	-912(%rbp), %eax	# mode, tmp3029
	movl	%eax, %esi	# tmp3029,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L1735	#
.L1533:
	.loc 1 7712 0
	movq	-952(%rbp), %rax	# exp, tmp3030
	movq	40(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rax	# subtarget, tmp3031
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3031,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1536	#,
	.loc 1 7713 0
	movq	$0, -800(%rbp)	#, subtarget
.L1536:
	.loc 1 7719 0
	movq	-952(%rbp), %rax	# exp, tmp3032
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1572->common.code, D.25922
	cmpb	$115, %al	#, D.25922
	jne	.L1537	#,
	.loc 1 7720 0
	movq	-648(%rbp), %rax	# type, tmp3033
	movzbl	16(%rax), %eax	# type_195->common.code, D.25922
	cmpb	$6, %al	#, D.25922
	jne	.L1537	#,
	.loc 1 7721 0
	movq	-952(%rbp), %rax	# exp, tmp3034
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1575->exp.operands, D.25927
	movq	8(%rax), %rax	# _1576->common.type, D.25927
	movzwl	60(%rax), %eax	# *_1577, tmp3037
	andw	$511, %ax	#, D.25943
	.loc 1 7722 0
	movzwl	%ax, %edx	# D.25943, D.25929
	movq	-952(%rbp), %rax	# exp, tmp3038
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1580->common.type, D.25927
	movzwl	60(%rax), %eax	# *_1581, tmp3041
	andw	$511, %ax	#, D.25943
	movzwl	%ax, %eax	# D.25943, D.25929
	.loc 1 7721 0
	cmpl	%eax, %edx	# D.25929, D.25929
	jge	.L1537	#,
	.loc 1 7723 0
	movq	-952(%rbp), %rax	# exp, tmp3042
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1584->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1538	#,
	.loc 1 7725 0
	movq	-952(%rbp), %rax	# exp, tmp3043
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1586->exp.operands, D.25927
	.loc 1 7724 0
	movq	8(%rax), %rdx	# _1587->common.type, D.25927
	movq	-952(%rbp), %rax	# exp, tmp3044
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rdx, %rsi	# D.25927,
	movq	%rax, %rdi	# D.25927,
	call	int_fits_type_p	#
	testl	%eax, %eax	# D.25929
	je	.L1538	#,
	.loc 1 7727 0
	movq	-952(%rbp), %rax	# exp, tmp3045
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1591->common.type, D.25927
	movzbl	61(%rax), %eax	# *_1592, tmp3048
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, D.25929
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25925
	cmpw	$64, %ax	#, D.25925
	ja	.L1539	#,
	.loc 1 7729 0
	movq	-952(%rbp), %rax	# exp, tmp3050
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1596->int_cst.int_cst.low, D.25935
	movq	%rax, %rdi	# D.25935,
	call	exact_log2_wide	#
	testl	%eax, %eax	# D.25929
	js	.L1539	#,
.L1538:
	.loc 1 7731 0
	movq	-952(%rbp), %rax	# exp, tmp3051
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1599->common.code, D.25922
	.loc 1 7730 0
	cmpb	$115, %al	#, D.25922
	jne	.L1537	#,
	.loc 1 7732 0
	movq	-952(%rbp), %rax	# exp, tmp3052
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1601->exp.operands, D.25927
	movq	8(%rax), %rax	# _1602->common.type, D.25927
	movzwl	60(%rax), %eax	# *_1603, tmp3055
	andw	$511, %ax	#, D.25943
	movl	%eax, %edx	# D.25943, D.25943
	.loc 1 7734 0
	movq	-952(%rbp), %rax	# exp, tmp3056
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1605->exp.operands, D.25927
	movq	8(%rax), %rax	# _1606->common.type, D.25927
	movzwl	60(%rax), %eax	# *_1607, tmp3059
	andw	$511, %ax	#, D.25943
	.loc 1 7732 0
	cmpw	%ax, %dx	# D.25943, D.25943
	jne	.L1537	#,
	.loc 1 7737 0
	movq	-952(%rbp), %rax	# exp, tmp3060
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1609->exp.operands, D.25927
	movq	8(%rax), %rax	# _1610->common.type, D.25927
	movzbl	17(%rax), %eax	# *_1611, tmp3063
	shrb	$5, %al	#, D.25921
	movl	%eax, %edx	# D.25921, D.25921
	andl	$1, %edx	#, D.25921
	.loc 1 7739 0
	movq	-952(%rbp), %rax	# exp, tmp3064
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1613->exp.operands, D.25927
	movq	8(%rax), %rax	# _1614->common.type, D.25927
	movzbl	17(%rax), %eax	# *_1615, tmp3067
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	.loc 1 7737 0
	cmpb	%al, %dl	# D.25921, D.25921
	jne	.L1537	#,
.L1539:
.LBB131:
	.loc 1 7742 0
	movq	-952(%rbp), %rax	# exp, tmp3068
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1617->exp.operands, D.25927
	movq	8(%rax), %rax	# _1618->common.type, D.25927
	movzbl	61(%rax), %eax	# *_1619, tmp3071
	shrb	%al	# D.25923
	.loc 1 7741 0
	movzbl	%al, %eax	# D.25923, tmp3072
	movl	%eax, -872(%rbp)	# tmp3072, innermode
	.loc 1 7743 0
	movq	-952(%rbp), %rax	# exp, tmp3073
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1622->exp.operands, D.25927
	movq	8(%rax), %rax	# _1623->common.type, D.25927
	.loc 1 7744 0
	movzbl	17(%rax), %eax	# *_1624, D.25922
	andl	$32, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1540	#,
	.loc 1 7744 0 is_stmt 0 discriminator 1
	movq	optab_table+64(%rip), %rax	# optab_table, iftmp.728
	jmp	.L1541	#
.L1540:
	.loc 1 7744 0 discriminator 2
	movq	optab_table+72(%rip), %rax	# optab_table, iftmp.728
.L1541:
	.loc 1 7743 0 is_stmt 1
	movq	%rax, -232(%rbp)	# iftmp.728, other_optab
	.loc 1 7745 0
	movq	-952(%rbp), %rax	# exp, tmp3074
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1630->exp.operands, D.25927
	movq	8(%rax), %rax	# _1631->common.type, D.25927
	.loc 1 7746 0
	movzbl	17(%rax), %eax	# *_1632, D.25922
	andl	$32, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1542	#,
	.loc 1 7746 0 is_stmt 0 discriminator 1
	movq	optab_table+72(%rip), %rax	# optab_table, iftmp.729
	jmp	.L1543	#
.L1542:
	.loc 1 7746 0 discriminator 2
	movq	optab_table+64(%rip), %rax	# optab_table, iftmp.729
.L1543:
	.loc 1 7745 0 is_stmt 1
	movq	%rax, -808(%rbp)	# iftmp.729, this_optab
	.loc 1 7747 0
	movl	-872(%rbp), %eax	# innermode, innermode.730
	cltq
	movzbl	mode_wider_mode(%rax), %eax	# mode_wider_mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25928
	cmpl	-912(%rbp), %eax	# mode, D.25928
	jne	.L1537	#,
	.loc 1 7749 0
	movl	-912(%rbp), %edx	# mode, mode.731
	movq	-808(%rbp), %rax	# this_optab, tmp3076
	movslq	%edx, %rdx	# mode.731, tmp3077
	salq	$4, %rdx	#, tmp3078
	addq	%rdx, %rax	# tmp3078, tmp3079
	movl	8(%rax), %eax	# this_optab_1637->handlers[mode.731_1641].insn_code, D.25944
	cmpl	$1317, %eax	#, D.25944
	je	.L1544	#,
	.loc 1 7751 0
	movq	-952(%rbp), %rax	# exp, tmp3080
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1643->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3081, op0
	.loc 1 7753 0
	movq	-952(%rbp), %rax	# exp, tmp3082
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1646->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1545	#,
	.loc 1 7754 0
	movq	-952(%rbp), %rax	# exp, tmp3083
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp3084, op1
	.loc 1 7759 0
	jmp	.L1507	#
.L1545:
	.loc 1 7757 0
	movq	-952(%rbp), %rax	# exp, tmp3085
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1650->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp3086, op1
	.loc 1 7759 0
	jmp	.L1507	#
.L1544:
	.loc 1 7761 0
	movl	-912(%rbp), %edx	# mode, mode.732
	movq	-232(%rbp), %rax	# other_optab, tmp3087
	movslq	%edx, %rdx	# mode.732, tmp3088
	salq	$4, %rdx	#, tmp3089
	addq	%rdx, %rax	# tmp3089, tmp3090
	movl	8(%rax), %eax	# other_optab_1629->handlers[mode.732_1653].insn_code, D.25944
	cmpl	$1317, %eax	#, D.25944
	je	.L1537	#,
	.loc 1 7762 0
	movl	word_mode(%rip), %eax	# word_mode, word_mode.733
	cmpl	%eax, -872(%rbp)	# word_mode.733, innermode
	jne	.L1537	#,
.LBB132:
	.loc 1 7765 0
	movq	-952(%rbp), %rax	# exp, tmp3091
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1656->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3092, op0
	.loc 1 7767 0
	movq	-952(%rbp), %rax	# exp, tmp3093
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1659->common.code, D.25922
	cmpb	$25, %al	#, D.25922
	jne	.L1547	#,
	.loc 1 7768 0
	movl	-936(%rbp), %ebx	# unsignedp, unsignedp.734
	movq	-952(%rbp), %rax	# exp, tmp3094
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, %rdx	#, D.25924
	movl	-912(%rbp), %esi	# mode, tmp3095
	movl	-872(%rbp), %eax	# innermode, tmp3096
	movl	%ebx, %ecx	# unsignedp.734,
	movl	%eax, %edi	# tmp3096,
	call	convert_modes	#
	movq	%rax, -824(%rbp)	# tmp3097, op1
	jmp	.L1548	#
.L1547:
	.loc 1 7773 0
	movq	-952(%rbp), %rax	# exp, tmp3098
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1665->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp3099, op1
.L1548:
	.loc 1 7775 0
	movl	-936(%rbp), %r8d	# unsignedp, unsignedp.735
	movq	-960(%rbp), %rdi	# target, tmp3100
	movq	-824(%rbp), %rcx	# op1, tmp3101
	movq	-832(%rbp), %rdx	# op0, tmp3102
	movq	-232(%rbp), %rsi	# other_optab, tmp3103
	movl	-912(%rbp), %eax	# mode, tmp3104
	movl	$3, (%rsp)	#,
	movl	%r8d, %r9d	# unsignedp.735,
	movq	%rdi, %r8	# tmp3100,
	movl	%eax, %edi	# tmp3104,
	call	expand_binop	#
	movq	%rax, -816(%rbp)	# tmp3105, temp
	.loc 1 7777 0
	movl	-936(%rbp), %r12d	# unsignedp, unsignedp.736
	movq	-816(%rbp), %rdx	# temp, tmp3106
	movl	-872(%rbp), %eax	# innermode, tmp3107
	movq	%rdx, %rsi	# tmp3106,
	movl	%eax, %edi	# tmp3107,
	call	gen_highpart	#
	movq	%rax, %rbx	#, D.25924
	movq	-816(%rbp), %rdx	# temp, tmp3108
	movl	-872(%rbp), %eax	# innermode, tmp3109
	movq	%rdx, %rsi	# tmp3108,
	movl	%eax, %edi	# tmp3109,
	call	gen_highpart	#
	movq	%rax, %rsi	#, D.25924
	movq	-824(%rbp), %rcx	# op1, tmp3110
	movq	-832(%rbp), %rdx	# op0, tmp3111
	movl	-872(%rbp), %eax	# innermode, tmp3112
	movl	%r12d, %r9d	# unsignedp.736,
	movq	%rbx, %r8	# D.25924,
	movl	%eax, %edi	# tmp3112,
	call	expand_mult_highpart_adjust	#
	movq	%rax, -224(%rbp)	# tmp3113, htem
	.loc 1 7782 0
	movq	-816(%rbp), %rdx	# temp, tmp3114
	movl	-872(%rbp), %eax	# innermode, tmp3115
	movq	%rdx, %rsi	# tmp3114,
	movl	%eax, %edi	# tmp3115,
	call	gen_highpart	#
	movq	-224(%rbp), %rdx	# htem, tmp3116
	movq	%rdx, %rsi	# tmp3116,
	movq	%rax, %rdi	# D.25924,
	call	emit_move_insn	#
	.loc 1 7783 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1537:
.LBE132:
.LBE131:
	.loc 1 7787 0
	movq	-952(%rbp), %rax	# exp, tmp3117
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp3118
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3119, op0
	.loc 1 7788 0
	movq	-952(%rbp), %rax	# exp, tmp3120
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp3121, op1
	.loc 1 7789 0
	movl	-936(%rbp), %edi	# unsignedp, unsignedp.737
	movq	-960(%rbp), %rcx	# target, tmp3122
	movq	-824(%rbp), %rdx	# op1, tmp3123
	movq	-832(%rbp), %rsi	# op0, tmp3124
	movl	-912(%rbp), %eax	# mode, tmp3125
	movl	%edi, %r8d	# unsignedp.737,
	movl	%eax, %edi	# tmp3125,
	call	expand_mult	#
	jmp	.L1735	#
.L1187:
	.loc 1 7796 0
	movq	-952(%rbp), %rax	# exp, tmp3126
	movq	40(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rax	# subtarget, tmp3127
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3127,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1549	#,
	.loc 1 7797 0
	movq	$0, -800(%rbp)	#, subtarget
.L1549:
	.loc 1 7801 0
	movq	-952(%rbp), %rax	# exp, tmp3128
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp3129
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3130, op0
	.loc 1 7802 0
	movq	-952(%rbp), %rax	# exp, tmp3131
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp3132, op1
	.loc 1 7803 0
	movl	-936(%rbp), %esi	# unsignedp, unsignedp.738
	movq	-960(%rbp), %r8	# target, tmp3133
	movq	-824(%rbp), %rdi	# op1, tmp3134
	movq	-832(%rbp), %rcx	# op0, tmp3135
	movl	-912(%rbp), %edx	# mode, tmp3136
	movl	-916(%rbp), %eax	# code, tmp3137
	movl	%esi, (%rsp)	# unsignedp.738,
	movq	%r8, %r9	# tmp3133,
	movq	%rdi, %r8	# tmp3134,
	movl	%eax, %esi	# tmp3137,
	movl	$0, %edi	#,
	call	expand_divmod	#
	jmp	.L1735	#
.L1189:
	.loc 1 7809 0
	movl	flag_unsafe_math_optimizations(%rip), %eax	# flag_unsafe_math_optimizations, flag_unsafe_math_optimizations.739
	testl	%eax, %eax	# flag_unsafe_math_optimizations.739
	je	.L1550	#,
	.loc 1 7809 0 is_stmt 0 discriminator 1
	movl	optimize(%rip), %eax	# optimize, optimize.740
	testl	%eax, %eax	# optimize.740
	je	.L1550	#,
	movl	optimize_size(%rip), %eax	# optimize_size, optimize_size.741
	testl	%eax, %eax	# optimize_size.741
	jne	.L1550	#,
	.loc 1 7810 0 is_stmt 1
	movq	-648(%rbp), %rax	# type, tmp3138
	movzbl	16(%rax), %eax	# type_195->common.code, D.25922
	cmpb	$7, %al	#, D.25922
	jne	.L1550	#,
	.loc 1 7811 0
	movq	-952(%rbp), %rax	# exp, tmp3139
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	real_onep	#
	testl	%eax, %eax	# D.25929
	jne	.L1550	#,
	.loc 1 7812 0
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.742
	movl	%eax, %ebx	# unsignedp.742, unsignedp.743
	movq	-952(%rbp), %rax	# exp, tmp3140
	movq	40(%rax), %r12	# exp_194(D)->exp.operands, D.25927
	movq	-648(%rbp), %rax	# type, tmp3141
	movq	dconst1(%rip), %rdx	# dconst1, tmp3143
	movq	%rdx, (%rsp)	# tmp3143,
	movq	dconst1+8(%rip), %rdx	# dconst1, tmp3144
	movq	%rdx, 8(%rsp)	# tmp3144,
	movq	dconst1+16(%rip), %rdx	# dconst1, tmp3145
	movq	%rdx, 16(%rsp)	# tmp3145,
	movq	%rax, %rdi	# tmp3141,
	call	build_real	#
	movq	%rax, %rdx	#, D.25927
	movq	-648(%rbp), %rax	# type, tmp3146
	movq	%r12, %rcx	# D.25927,
	movq	%rax, %rsi	# tmp3146,
	movl	$70, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rcx	#, D.25927
	movq	-952(%rbp), %rax	# exp, tmp3147
	movq	32(%rax), %rdx	# exp_194(D)->exp.operands, D.25927
	movq	-648(%rbp), %rax	# type, tmp3148
	movq	%rax, %rsi	# tmp3148,
	movl	$61, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movl	-964(%rbp), %edx	# tmode, tmp3149
	movq	-960(%rbp), %rsi	# target, tmp3150
	movl	%ebx, %ecx	# unsignedp.743,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	jmp	.L1735	#
.L1550:
	.loc 1 7817 0
	movq	optab_table+80(%rip), %rax	# optab_table, tmp3151
	movq	%rax, -808(%rbp)	# tmp3151, this_optab
	.loc 1 7818 0
	jmp	.L1511	#
.L1188:
	.loc 1 7824 0
	movq	-952(%rbp), %rax	# exp, tmp3152
	movq	40(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rax	# subtarget, tmp3153
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3153,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1551	#,
	.loc 1 7825 0
	movq	$0, -800(%rbp)	#, subtarget
.L1551:
	.loc 1 7826 0
	movq	-952(%rbp), %rax	# exp, tmp3154
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp3155
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3156, op0
	.loc 1 7827 0
	movq	-952(%rbp), %rax	# exp, tmp3157
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp3158, op1
	.loc 1 7828 0
	movl	-936(%rbp), %esi	# unsignedp, unsignedp.744
	movq	-960(%rbp), %r8	# target, tmp3159
	movq	-824(%rbp), %rdi	# op1, tmp3160
	movq	-832(%rbp), %rcx	# op0, tmp3161
	movl	-912(%rbp), %edx	# mode, tmp3162
	movl	-916(%rbp), %eax	# code, tmp3163
	movl	%esi, (%rsp)	# unsignedp.744,
	movq	%r8, %r9	# tmp3159,
	movq	%rdi, %r8	# tmp3160,
	movl	%eax, %esi	# tmp3163,
	movl	$1, %edi	#,
	call	expand_divmod	#
	jmp	.L1735	#
.L1191:
	.loc 1 7833 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$7833, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1190:
	.loc 1 7836 0
	movq	-952(%rbp), %rax	# exp, tmp3164
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3165, op0
	.loc 1 7837 0
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1552	#,
	.loc 1 7838 0
	movl	-912(%rbp), %eax	# mode, tmp3166
	movl	%eax, %edi	# tmp3166,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp3167, target
.L1552:
	.loc 1 7839 0
	movl	-936(%rbp), %edx	# unsignedp, unsignedp.745
	movq	-832(%rbp), %rcx	# op0, tmp3168
	movq	-960(%rbp), %rax	# target, tmp3169
	movq	%rcx, %rsi	# tmp3168,
	movq	%rax, %rdi	# tmp3169,
	call	expand_fix	#
	.loc 1 7840 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1192:
	.loc 1 7843 0
	movq	-952(%rbp), %rax	# exp, tmp3170
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3171, op0
	.loc 1 7844 0
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1553	#,
	.loc 1 7845 0
	movl	-912(%rbp), %eax	# mode, tmp3172
	movl	%eax, %edi	# tmp3172,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp3173, target
.L1553:
	.loc 1 7848 0
	movq	-832(%rbp), %rax	# op0, tmp3174
	movzbl	2(%rax), %eax	# op0_1721->mode, D.25922
	testb	%al, %al	# D.25922
	jne	.L1554	#,
	.loc 1 7849 0
	movq	-952(%rbp), %rax	# exp, tmp3175
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1724->common.type, D.25927
	movzbl	61(%rax), %eax	# *_1725, tmp3178
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, D.25931
	movq	-832(%rbp), %rdx	# op0, tmp3179
	movq	%rdx, %rsi	# tmp3179,
	movl	%eax, %edi	# D.25931,
	call	copy_to_mode_reg	#
	movq	%rax, -832(%rbp)	# tmp3180, op0
.L1554:
	.loc 1 7852 0
	movq	-952(%rbp), %rax	# exp, tmp3181
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1729->common.type, D.25927
	movzbl	17(%rax), %eax	# *_1730, tmp3184
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	.loc 1 7851 0
	movzbl	%al, %edx	# D.25921, D.25929
	movq	-832(%rbp), %rcx	# op0, tmp3185
	movq	-960(%rbp), %rax	# target, tmp3186
	movq	%rcx, %rsi	# tmp3185,
	movq	%rax, %rdi	# tmp3186,
	call	expand_float	#
	.loc 1 7853 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1193:
	.loc 1 7856 0
	movq	-952(%rbp), %rax	# exp, tmp3187
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp3188
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3189, op0
	.loc 1 7858 0
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.747
	.loc 1 7857 0
	testl	%eax, %eax	# unsignedp.747
	jne	.L1555	#,
	.loc 1 7858 0
	movl	flag_trapv(%rip), %eax	# flag_trapv, flag_trapv.748
	testl	%eax, %eax	# flag_trapv.748
	je	.L1555	#,
	.loc 1 7859 0
	movl	-912(%rbp), %eax	# mode, mode.749
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$1, %eax	#, D.25937
	jne	.L1555	#,
	.loc 1 7857 0
	movq	optab_table+264(%rip), %rax	# optab_table, iftmp.746
	jmp	.L1556	#
.L1555:
	.loc 1 7857 0 is_stmt 0 discriminator 1
	movq	optab_table+256(%rip), %rax	# optab_table, iftmp.746
.L1556:
	.loc 1 7857 0 discriminator 2
	movq	-960(%rbp), %rcx	# target, tmp3191
	movq	-832(%rbp), %rdx	# op0, tmp3192
	movl	-912(%rbp), %edi	# mode, tmp3193
	movl	$0, %r8d	#,
	movq	%rax, %rsi	# iftmp.746,
	call	expand_unop	#
	movq	%rax, -816(%rbp)	# tmp3194, temp
	.loc 1 7861 0 is_stmt 1 discriminator 2
	cmpq	$0, -816(%rbp)	#, temp
	jne	.L1557	#,
	.loc 1 7862 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$7862, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1557:
	.loc 1 7863 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1195:
	.loc 1 7866 0
	movq	-952(%rbp), %rax	# exp, tmp3195
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp3196
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3197, op0
	.loc 1 7869 0
	movl	-912(%rbp), %eax	# mode, mode.750
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$5, %eax	#, D.25937
	je	.L1558	#,
	.loc 1 7870 0
	movl	-912(%rbp), %eax	# mode, mode.751
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$6, %eax	#, D.25937
	jne	.L1559	#,
.L1558:
	.loc 1 7871 0
	movl	-936(%rbp), %ecx	# unsignedp, unsignedp.752
	movq	-960(%rbp), %rdx	# target, tmp3200
	movq	-832(%rbp), %rsi	# op0, tmp3201
	movl	-912(%rbp), %eax	# mode, tmp3202
	movl	%eax, %edi	# tmp3202,
	call	expand_complex_abs	#
	jmp	.L1735	#
.L1559:
	.loc 1 7875 0
	movq	-648(%rbp), %rax	# type, tmp3203
	movzbl	17(%rax), %eax	# *type_195, D.25922
	andl	$32, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1560	#,
	.loc 1 7876 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1560:
	.loc 1 7878 0
	movq	-952(%rbp), %rax	# exp, tmp3204
	movq	32(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-960(%rbp), %rax	# target, tmp3205
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3205,
	call	safe_from_p	#
	movl	%eax, %edi	#, D.25929
	movl	-936(%rbp), %ecx	# unsignedp, unsignedp.753
	movq	-960(%rbp), %rdx	# target, tmp3206
	movq	-832(%rbp), %rsi	# op0, tmp3207
	movl	-912(%rbp), %eax	# mode, tmp3208
	movl	%edi, %r8d	# D.25929,
	movl	%eax, %edi	# tmp3208,
	call	expand_abs	#
	jmp	.L1735	#
.L1194:
	.loc 1 7883 0
	movq	-640(%rbp), %rax	# original_target, tmp3209
	movq	%rax, -960(%rbp)	# tmp3209, target
	.loc 1 7884 0
	cmpq	$0, -960(%rbp)	#, target
	je	.L1561	#,
	.loc 1 7884 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp3210
	movq	40(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-960(%rbp), %rax	# target, tmp3211
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3211,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	je	.L1561	#,
	.loc 1 7885 0 is_stmt 1
	movq	-960(%rbp), %rax	# target, tmp3212
	movzwl	(%rax), %eax	# target_1759->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1562	#,
	.loc 1 7885 0 is_stmt 0 discriminator 1
	movq	-960(%rbp), %rax	# target, tmp3213
	movzbl	3(%rax), %eax	# *target_1759, D.25922
	andl	$8, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1561	#,
.L1562:
	.loc 1 7886 0 is_stmt 1
	movq	-960(%rbp), %rax	# target, tmp3214
	movzbl	2(%rax), %eax	# target_1759->mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25928
	cmpl	-912(%rbp), %eax	# mode, D.25928
	jne	.L1561	#,
	.loc 1 7887 0
	movq	-960(%rbp), %rax	# target, tmp3215
	movzwl	(%rax), %eax	# target_1759->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1563	#,
	.loc 1 7888 0
	movq	-960(%rbp), %rax	# target, tmp3216
	movl	8(%rax), %eax	# target_1759->fld[0].rtuint, D.25928
	cmpl	$52, %eax	#, D.25928
	ja	.L1563	#,
.L1561:
	.loc 1 7889 0
	movl	-912(%rbp), %eax	# mode, tmp3217
	movl	%eax, %edi	# tmp3217,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp3218, target
.L1563:
	.loc 1 7890 0
	movq	-952(%rbp), %rax	# exp, tmp3219
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp3220, op1
	.loc 1 7891 0
	movq	-952(%rbp), %rax	# exp, tmp3221
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-960(%rbp), %rsi	# target, tmp3222
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3223, op0
	.loc 1 7897 0
	movq	-648(%rbp), %rax	# type, tmp3224
	movzbl	17(%rax), %eax	# *type_195, D.25922
	andl	$32, %eax	#, D.25922
	.loc 1 7898 0
	testb	%al, %al	# D.25922
	je	.L1564	#,
	.loc 1 7897 0
	cmpl	$78, -916(%rbp)	#, code
	jne	.L1565	#,
	.loc 1 7897 0 is_stmt 0 discriminator 1
	movq	optab_table+224(%rip), %rax	# optab_table, iftmp.755
	jmp	.L1567	#
.L1565:
	.loc 1 7897 0 discriminator 2
	movq	optab_table+232(%rip), %rax	# optab_table, iftmp.755
	jmp	.L1567	#
.L1564:
	.loc 1 7898 0 is_stmt 1 discriminator 1
	cmpl	$78, -916(%rbp)	#, code
	jne	.L1568	#,
	movq	optab_table+208(%rip), %rax	# optab_table, iftmp.756
	jmp	.L1567	#
.L1568:
	.loc 1 7898 0 is_stmt 0 discriminator 2
	movq	optab_table+216(%rip), %rax	# optab_table, iftmp.756
.L1567:
	.loc 1 7896 0 is_stmt 1
	movq	%rax, -808(%rbp)	# iftmp.754, this_optab
	.loc 1 7900 0
	movl	-936(%rbp), %r8d	# unsignedp, unsignedp.757
	movq	-960(%rbp), %rdi	# target, tmp3225
	movq	-824(%rbp), %rcx	# op1, tmp3226
	movq	-832(%rbp), %rdx	# op0, tmp3227
	movq	-808(%rbp), %rsi	# this_optab, tmp3228
	movl	-912(%rbp), %eax	# mode, tmp3229
	movl	$2, (%rsp)	#,
	movl	%r8d, %r9d	# unsignedp.757,
	movq	%rdi, %r8	# tmp3225,
	movl	%eax, %edi	# tmp3229,
	call	expand_binop	#
	movq	%rax, -816(%rbp)	# tmp3230, temp
	.loc 1 7902 0
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1570	#,
	.loc 1 7903 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1570:
	.loc 1 7908 0
	movq	-960(%rbp), %rax	# target, tmp3231
	movzwl	(%rax), %eax	# target_14->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1571	#,
	.loc 1 7909 0
	movl	-912(%rbp), %eax	# mode, tmp3232
	movl	%eax, %edi	# tmp3232,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp3233, target
.L1571:
	.loc 1 7911 0
	movq	-960(%rbp), %rax	# target, tmp3234
	cmpq	-832(%rbp), %rax	# op0, tmp3234
	je	.L1572	#,
	.loc 1 7912 0
	movq	-832(%rbp), %rdx	# op0, tmp3235
	movq	-960(%rbp), %rax	# target, tmp3236
	movq	%rdx, %rsi	# tmp3235,
	movq	%rax, %rdi	# tmp3236,
	call	emit_move_insn	#
.L1572:
	.loc 1 7914 0
	call	gen_label_rtx	#
	movq	%rax, -832(%rbp)	# tmp3237, op0
	.loc 1 7918 0
	movl	-912(%rbp), %eax	# mode, mode.758
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$1, %eax	#, D.25937
	jne	.L1573	#,
	.loc 1 7919 0
	movl	-912(%rbp), %eax	# mode, tmp3239
	movl	$0, %edx	#,
	movl	%eax, %esi	# tmp3239,
	movl	$104, %edi	#,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1573	#,
	.loc 1 7921 0
	cmpl	$79, -916(%rbp)	#, code
	jne	.L1574	#,
	.loc 1 7922 0
	movq	-648(%rbp), %rax	# type, tmp3240
	movzbl	17(%rax), %eax	# *type_195, tmp3243
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %esi	# D.25921, D.25929
	movq	-832(%rbp), %rdi	# op0, tmp3244
	movq	-824(%rbp), %rcx	# op1, tmp3245
	movq	-960(%rbp), %rdx	# target, tmp3246
	movl	-912(%rbp), %eax	# mode, tmp3247
	movq	%rdi, %r9	# tmp3244,
	movl	$0, %r8d	#,
	movl	%eax, %edi	# tmp3247,
	call	do_jump_by_parts_greater_rtx	#
	.loc 1 7921 0
	jmp	.L1576	#
.L1574:
	.loc 1 7925 0
	movq	-648(%rbp), %rax	# type, tmp3248
	movzbl	17(%rax), %eax	# *type_195, tmp3251
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %esi	# D.25921, D.25929
	movq	-832(%rbp), %rdi	# op0, tmp3252
	movq	-960(%rbp), %rcx	# target, tmp3253
	movq	-824(%rbp), %rdx	# op1, tmp3254
	movl	-912(%rbp), %eax	# mode, tmp3255
	movq	%rdi, %r9	# tmp3252,
	movl	$0, %r8d	#,
	movl	%eax, %edi	# tmp3255,
	call	do_jump_by_parts_greater_rtx	#
	.loc 1 7921 0
	jmp	.L1576	#
.L1573:
.LBB133:
	.loc 1 7930 0
	movq	-952(%rbp), %rax	# exp, tmp3256
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1796->common.type, D.25927
	movzbl	17(%rax), %eax	# *_1797, tmp3259
	shrb	$5, %al	#, D.25921
	andl	$1, %eax	#, D.25921
	movzbl	%al, %eax	# D.25921, tmp3260
	movl	%eax, -868(%rbp)	# tmp3260, unsignedp
	.loc 1 7931 0
	cmpl	$79, -916(%rbp)	#, code
	jne	.L1577	#,
	.loc 1 7931 0 is_stmt 0 discriminator 1
	movl	$104, %eax	#, iftmp.759
	jmp	.L1578	#
.L1577:
	.loc 1 7931 0 discriminator 2
	movl	$106, %eax	#, iftmp.759
.L1578:
	.loc 1 7931 0 discriminator 3
	movl	-912(%rbp), %r8d	# mode, tmp3261
	movl	-868(%rbp), %edx	# unsignedp, tmp3262
	movq	-824(%rbp), %rsi	# op1, tmp3263
	movq	-960(%rbp), %rdi	# target, tmp3264
	movq	-832(%rbp), %rcx	# op0, tmp3265
	movq	%rcx, 8(%rsp)	# tmp3265,
	movq	$0, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	%edx, %ecx	# tmp3262,
	movl	%eax, %edx	# iftmp.759,
	call	do_compare_rtx_and_jump	#
.L1576:
.LBE133:
	.loc 1 7935 0 is_stmt 1
	movq	-824(%rbp), %rdx	# op1, tmp3266
	movq	-960(%rbp), %rax	# target, tmp3267
	movq	%rdx, %rsi	# tmp3266,
	movq	%rax, %rdi	# tmp3267,
	call	emit_move_insn	#
	.loc 1 7936 0
	movq	-832(%rbp), %rax	# op0, tmp3268
	movq	%rax, %rdi	# tmp3268,
	call	emit_label	#
	.loc 1 7937 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1201:
	.loc 1 7940 0
	movq	-952(%rbp), %rax	# exp, tmp3269
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp3270
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3271, op0
	.loc 1 7941 0
	movq	optab_table+288(%rip), %rsi	# optab_table, D.25942
	movq	-960(%rbp), %rcx	# target, tmp3272
	movq	-832(%rbp), %rdx	# op0, tmp3273
	movl	-912(%rbp), %eax	# mode, tmp3274
	movl	$1, %r8d	#,
	movl	%eax, %edi	# tmp3274,
	call	expand_unop	#
	movq	%rax, -816(%rbp)	# tmp3275, temp
	.loc 1 7942 0
	cmpq	$0, -816(%rbp)	#, temp
	jne	.L1579	#,
	.loc 1 7943 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$7943, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1579:
	.loc 1 7944 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1196:
	.loc 1 7947 0
	movq	-952(%rbp), %rax	# exp, tmp3276
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp3277
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3278, op0
	.loc 1 7948 0
	movq	optab_table+296(%rip), %rsi	# optab_table, D.25942
	movq	-960(%rbp), %rcx	# target, tmp3279
	movq	-832(%rbp), %rdx	# op0, tmp3280
	movl	-912(%rbp), %eax	# mode, tmp3281
	movl	$1, %r8d	#,
	movl	%eax, %edi	# tmp3281,
	call	expand_unop	#
	movq	%rax, -816(%rbp)	# tmp3282, temp
	.loc 1 7949 0
	cmpq	$0, -816(%rbp)	#, temp
	jne	.L1580	#,
	.loc 1 7950 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$7950, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1580:
	.loc 1 7951 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1200:
	.loc 1 7968 0
	movq	optab_table+144(%rip), %rax	# optab_table, tmp3283
	movq	%rax, -808(%rbp)	# tmp3283, this_optab
	.loc 1 7969 0
	jmp	.L1511	#
.L1198:
	.loc 1 7973 0
	movq	optab_table+152(%rip), %rax	# optab_table, tmp3284
	movq	%rax, -808(%rbp)	# tmp3284, this_optab
	.loc 1 7974 0
	jmp	.L1511	#
.L1199:
	.loc 1 7978 0
	movq	optab_table+160(%rip), %rax	# optab_table, tmp3285
	movq	%rax, -808(%rbp)	# tmp3285, this_optab
	.loc 1 7979 0
	jmp	.L1511	#
.L1197:
	.loc 1 7985 0
	movq	-952(%rbp), %rax	# exp, tmp3286
	movq	40(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rax	# subtarget, tmp3287
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3287,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1581	#,
	.loc 1 7986 0
	movq	$0, -800(%rbp)	#, subtarget
.L1581:
	.loc 1 7987 0
	movq	-952(%rbp), %rax	# exp, tmp3288
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp3289
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3290, op0
	.loc 1 7988 0
	movl	-936(%rbp), %r8d	# unsignedp, unsignedp.760
	movq	-952(%rbp), %rax	# exp, tmp3291
	movq	40(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-960(%rbp), %rdi	# target, tmp3292
	movq	-832(%rbp), %rdx	# op0, tmp3293
	movl	-912(%rbp), %esi	# mode, tmp3294
	movl	-916(%rbp), %eax	# code, tmp3295
	movl	%r8d, %r9d	# unsignedp.760,
	movq	%rdi, %r8	# tmp3292,
	movl	%eax, %edi	# tmp3295,
	call	expand_shift	#
	jmp	.L1735	#
.L1204:
	.loc 1 8006 0
	cmpl	$0, -964(%rbp)	#, tmode
	je	.L1582	#,
	.loc 1 8006 0 is_stmt 0 discriminator 1
	movl	-964(%rbp), %eax	# tmode, iftmp.761
	jmp	.L1583	#
.L1582:
	.loc 1 8006 0 discriminator 2
	movl	-912(%rbp), %eax	# mode, iftmp.761
.L1583:
	.loc 1 8006 0 discriminator 3
	movq	-960(%rbp), %rsi	# target, tmp3296
	movq	-952(%rbp), %rdi	# exp, tmp3297
	movl	$0, %ecx	#,
	movl	%eax, %edx	# iftmp.761,
	call	do_store_flag	#
	movq	%rax, -816(%rbp)	# tmp3298, temp
	.loc 1 8007 0 is_stmt 1 discriminator 3
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1584	#,
	.loc 1 8008 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1584:
	.loc 1 8011 0
	cmpl	$102, -916(%rbp)	#, code
	jne	.L1202	#,
	.loc 1 8011 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp3299
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25929
	je	.L1202	#,
	.loc 1 8012 0 is_stmt 1
	cmpq	$0, -640(%rbp)	#, original_target
	je	.L1202	#,
	.loc 1 8013 0
	movq	-640(%rbp), %rax	# original_target, tmp3300
	movzwl	(%rax), %eax	# original_target_206->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1202	#,
	.loc 1 8014 0
	movq	-640(%rbp), %rax	# original_target, tmp3301
	movzbl	2(%rax), %edx	# original_target_206->mode, D.25922
	.loc 1 8015 0
	movq	-952(%rbp), %rax	# exp, tmp3302
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _1832->common.type, D.25927
	movzbl	61(%rax), %eax	# *_1833, tmp3305
	shrb	%al	# D.25923
	.loc 1 8014 0
	cmpb	%al, %dl	# D.25922, D.25922
	jne	.L1202	#,
	.loc 1 8017 0
	movq	-952(%rbp), %rax	# exp, tmp3306
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-640(%rbp), %rsi	# original_target, tmp3307
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -816(%rbp)	# tmp3308, temp
	.loc 1 8021 0
	movq	-816(%rbp), %rax	# temp, tmp3309
	movzwl	(%rax), %eax	# temp_1837->code, D.25925
	cmpw	$54, %ax	#, D.25925
	jne	.L1585	#,
	.loc 1 8023 0
	movq	-816(%rbp), %rax	# temp, tmp3310
	movq	8(%rax), %rax	# temp_1837->fld[0].rtwint, D.25934
	testq	%rax, %rax	# D.25934
	je	.L1586	#,
	.loc 1 8024 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.25924
	movq	-960(%rbp), %rax	# target, tmp3311
	movq	%rdx, %rsi	# D.25924,
	movq	%rax, %rdi	# tmp3311,
	call	emit_move_insn	#
	jmp	.L1587	#
.L1586:
	.loc 1 8026 0
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.25924
	movq	-960(%rbp), %rax	# target, tmp3312
	movq	%rdx, %rsi	# D.25924,
	movq	%rax, %rdi	# tmp3312,
	call	emit_move_insn	#
.L1587:
	.loc 1 8028 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1585:
	.loc 1 8031 0
	movq	-816(%rbp), %rax	# temp, tmp3313
	cmpq	-640(%rbp), %rax	# original_target, tmp3313
	je	.L1588	#,
.LBB134:
	.loc 1 8033 0
	movq	-816(%rbp), %rax	# temp, tmp3314
	movzbl	2(%rax), %eax	# temp_1837->mode, D.25922
	movzbl	%al, %eax	# D.25922, tmp3315
	movl	%eax, -920(%rbp)	# tmp3315, mode1
	.loc 1 8034 0
	cmpl	$0, -920(%rbp)	#, mode1
	jne	.L1589	#,
	.loc 1 8035 0
	cmpl	$0, -964(%rbp)	#, tmode
	je	.L1590	#,
	.loc 1 8035 0 is_stmt 0 discriminator 1
	movl	-964(%rbp), %eax	# tmode, iftmp.762
	jmp	.L1591	#
.L1590:
	.loc 1 8035 0 discriminator 2
	movl	-912(%rbp), %eax	# mode, iftmp.762
.L1591:
	.loc 1 8035 0 discriminator 3
	movl	%eax, -920(%rbp)	# iftmp.762, mode1
.L1589:
	.loc 1 8037 0 is_stmt 1
	movq	-816(%rbp), %rdx	# temp, tmp3316
	movl	-920(%rbp), %eax	# mode1, tmp3317
	movq	%rdx, %rsi	# tmp3316,
	movl	%eax, %edi	# tmp3317,
	call	copy_to_mode_reg	#
	movq	%rax, -816(%rbp)	# tmp3318, temp
.L1588:
.LBE134:
	.loc 1 8040 0
	call	gen_label_rtx	#
	movq	%rax, -824(%rbp)	# tmp3319, op1
	.loc 1 8041 0
	movl	-936(%rbp), %edi	# unsignedp, unsignedp.763
	.loc 1 8042 0
	movq	-816(%rbp), %rax	# temp, tmp3320
	movzbl	2(%rax), %eax	# temp_64->mode, D.25922
	.loc 1 8041 0
	movzbl	%al, %ecx	# D.25922, D.25931
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-816(%rbp), %rax	# temp, tmp3321
	movq	-824(%rbp), %rdx	# op1, tmp3322
	movq	%rdx, (%rsp)	# tmp3322,
	movl	%edi, %r9d	# unsignedp.763,
	movl	%ecx, %r8d	# D.25931,
	movl	$0, %ecx	#,
	movl	$103, %edx	#,
	movq	%rax, %rdi	# tmp3321,
	call	emit_cmp_and_jump_insns	#
	.loc 1 8043 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.25924
	movq	-816(%rbp), %rax	# temp, tmp3323
	movq	%rdx, %rsi	# D.25924,
	movq	%rax, %rdi	# tmp3323,
	call	emit_move_insn	#
	.loc 1 8044 0
	movq	-824(%rbp), %rax	# op1, tmp3324
	movq	%rax, %rdi	# tmp3324,
	call	emit_label	#
	.loc 1 8045 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1202:
	.loc 1 8054 0
	cmpl	$0, -908(%rbp)	#, ignore
	jne	.L1592	#,
	.loc 1 8055 0
	cmpq	$0, -960(%rbp)	#, target
	je	.L1593	#,
	.loc 1 8055 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rcx	# exp, tmp3325
	movq	-960(%rbp), %rax	# target, tmp3326
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp3325,
	movq	%rax, %rdi	# tmp3326,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	je	.L1593	#,
	.loc 1 8058 0 is_stmt 1
	movl	optimize(%rip), %eax	# optimize, optimize.764
	testl	%eax, %eax	# optimize.764
	jne	.L1592	#,
	.loc 1 8058 0 is_stmt 0 discriminator 1
	movq	-960(%rbp), %rax	# target, tmp3327
	movzwl	(%rax), %eax	# target_4->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1592	#,
	.loc 1 8059 0 is_stmt 1
	movq	-960(%rbp), %rax	# target, tmp3328
	movl	8(%rax), %eax	# target_4->fld[0].rtuint, D.25928
	cmpl	$52, %eax	#, D.25928
	ja	.L1592	#,
.L1593:
	.loc 1 8060 0
	cmpl	$0, -964(%rbp)	#, tmode
	je	.L1594	#,
	.loc 1 8060 0 is_stmt 0 discriminator 1
	movl	-964(%rbp), %eax	# tmode, iftmp.765
	jmp	.L1595	#
.L1594:
	.loc 1 8060 0 discriminator 2
	movl	-912(%rbp), %eax	# mode, iftmp.765
.L1595:
	.loc 1 8060 0 discriminator 3
	movl	%eax, %edi	# iftmp.765,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp3329, target
.L1592:
	.loc 1 8062 0 is_stmt 1
	cmpq	$0, -960(%rbp)	#, target
	je	.L1596	#,
	.loc 1 8063 0
	movq	-960(%rbp), %rax	# target, tmp3330
	movq	%rax, %rdi	# tmp3330,
	call	emit_clr_insn	#
.L1596:
	.loc 1 8065 0
	call	gen_label_rtx	#
	movq	%rax, -824(%rbp)	# tmp3331, op1
	.loc 1 8066 0
	movq	-824(%rbp), %rdx	# op1, tmp3332
	movq	-952(%rbp), %rax	# exp, tmp3333
	movq	%rdx, %rsi	# tmp3332,
	movq	%rax, %rdi	# tmp3333,
	call	jumpifnot	#
	.loc 1 8068 0
	cmpq	$0, -960(%rbp)	#, target
	je	.L1597	#,
	.loc 1 8069 0
	movq	-960(%rbp), %rax	# target, tmp3334
	movq	%rax, %rdi	# tmp3334,
	call	emit_0_to_1_insn	#
.L1597:
	.loc 1 8071 0
	movq	-824(%rbp), %rax	# op1, tmp3335
	movq	%rax, %rdi	# tmp3335,
	call	emit_label	#
	.loc 1 8072 0
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1598	#,
	.loc 1 8072 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.766
	jmp	.L1599	#
.L1598:
	.loc 1 8072 0 discriminator 2
	movq	-960(%rbp), %rax	# target, iftmp.766
.L1599:
	.loc 1 8072 0 discriminator 3
	jmp	.L1735	#
.L1203:
	.loc 1 8075 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp3336
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-960(%rbp), %rsi	# target, tmp3337
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3338, op0
	.loc 1 8078 0
	movq	const_int_rtx+520(%rip), %rcx	# const_int_rtx, D.25924
	movq	optab_table+160(%rip), %rsi	# optab_table, D.25942
	movq	-960(%rbp), %rdi	# target, tmp3339
	movq	-832(%rbp), %rdx	# op0, tmp3340
	movl	-912(%rbp), %eax	# mode, tmp3341
	movl	$3, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rdi, %r8	# tmp3339,
	movl	%eax, %edi	# tmp3341,
	call	expand_binop	#
	movq	%rax, -816(%rbp)	# tmp3342, temp
	.loc 1 8080 0
	cmpq	$0, -816(%rbp)	#, temp
	jne	.L1600	#,
	.loc 1 8081 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$8081, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1600:
	.loc 1 8082 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1173:
	.loc 1 8085 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp3343
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	.loc 1 8086 0
	call	emit_queue	#
	.loc 1 8087 0
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1601	#,
	.loc 1 8087 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.767
	jmp	.L1602	#
.L1601:
	.loc 1 8087 0 discriminator 2
	movq	-960(%rbp), %rax	# target, iftmp.767
.L1602:
	.loc 1 8087 0 discriminator 3
	movq	-952(%rbp), %rdx	# exp, tmp3344
	movq	40(%rdx), %rdi	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rsi	# iftmp.767,
	call	expand_expr	#
	jmp	.L1735	#
.L1177:
	.loc 1 8094 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp3345
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1879->common.code, D.25922
	cmpb	$115, %al	#, D.25922
	jne	.L1603	#,
	.loc 1 8095 0
	movq	-952(%rbp), %rax	# exp, tmp3346
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1881->common.code, D.25922
	cmpb	$115, %al	#, D.25922
	jne	.L1603	#,
	.loc 1 8096 0
	movq	-952(%rbp), %rax	# exp, tmp3347
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1883->exp.operands, D.25927
	movq	8(%rax), %rdx	# _1884->common.type, D.25927
	.loc 1 8097 0
	movq	-952(%rbp), %rax	# exp, tmp3348
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1886->exp.operands, D.25927
	movq	8(%rax), %rax	# _1887->common.type, D.25927
	.loc 1 8096 0
	cmpq	%rax, %rdx	# D.25927, D.25927
	jne	.L1603	#,
.LBB135:
	.loc 1 8099 0
	movq	-952(%rbp), %rax	# exp, tmp3349
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1889->exp.operands, tmp3350
	movq	%rax, -216(%rbp)	# tmp3350, iftrue
	.loc 1 8100 0
	movq	-952(%rbp), %rax	# exp, tmp3351
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _1891->exp.operands, tmp3352
	movq	%rax, -208(%rbp)	# tmp3352, iffalse
	.loc 1 8102 0
	movq	-216(%rbp), %rax	# iftrue, tmp3353
	movzbl	16(%rax), %eax	# iftrue_1890->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$50, %al	#, D.25926
	jne	.L1604	#,
	.loc 1 8103 0
	movq	-216(%rbp), %rax	# iftrue, tmp3355
	movq	32(%rax), %rcx	# iftrue_1890->exp.operands, D.25927
	movq	-208(%rbp), %rax	# iffalse, tmp3356
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3356,
	call	operand_equal_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1605	#,
.L1604:
	.loc 1 8104 0
	movq	-208(%rbp), %rax	# iffalse, tmp3357
	movzbl	16(%rax), %eax	# iffalse_1892->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$50, %al	#, D.25926
	jne	.L1606	#,
	.loc 1 8105 0
	movq	-208(%rbp), %rax	# iffalse, tmp3359
	movq	32(%rax), %rcx	# iffalse_1892->exp.operands, D.25927
	movq	-216(%rbp), %rax	# iftrue, tmp3360
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3360,
	call	operand_equal_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1605	#,
.L1606:
	.loc 1 8106 0
	movq	-216(%rbp), %rax	# iftrue, tmp3361
	movzbl	16(%rax), %eax	# iftrue_1890->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$49, %al	#, D.25926
	jne	.L1607	#,
	.loc 1 8107 0
	movq	-216(%rbp), %rax	# iftrue, tmp3363
	movq	32(%rax), %rcx	# iftrue_1890->exp.operands, D.25927
	movq	-208(%rbp), %rax	# iffalse, tmp3364
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3364,
	call	operand_equal_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1605	#,
.L1607:
	.loc 1 8108 0
	movq	-208(%rbp), %rax	# iffalse, tmp3365
	movzbl	16(%rax), %eax	# iffalse_1892->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$49, %al	#, D.25926
	jne	.L1603	#,
	.loc 1 8109 0
	movq	-208(%rbp), %rax	# iffalse, tmp3367
	movq	32(%rax), %rcx	# iffalse_1892->exp.operands, D.25927
	movq	-216(%rbp), %rax	# iftrue, tmp3368
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3368,
	call	operand_equal_p	#
	testl	%eax, %eax	# D.25929
	je	.L1603	#,
.L1605:
	.loc 1 8110 0
	movq	-952(%rbp), %rax	# exp, tmp3369
	movq	32(%rax), %rdx	# exp_194(D)->exp.operands, D.25927
	movq	-216(%rbp), %rax	# iftrue, tmp3370
	movq	8(%rax), %rax	# iftrue_1890->common.type, D.25927
	movq	-208(%rbp), %rsi	# iffalse, tmp3371
	movq	-216(%rbp), %rcx	# iftrue, tmp3372
	movq	%rsi, %r8	# tmp3371,
	movq	%rax, %rsi	# D.25927,
	movl	$51, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdx	#, D.25927
	movq	-648(%rbp), %rax	# type, tmp3373
	movq	%rax, %rsi	# tmp3373,
	movl	$115, %edi	#,
	call	build1	#
	movl	-968(%rbp), %ecx	# modifier, tmp3374
	movl	-964(%rbp), %edx	# tmode, tmp3375
	movq	-960(%rbp), %rsi	# target, tmp3376
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	jmp	.L1735	#
.L1603:
.LBE135:
.LBB136:
	.loc 1 8126 0
	movq	$0, -688(%rbp)	#, singleton
	.loc 1 8127 0
	movq	$0, -680(%rbp)	#, binary_op
	movq	$0, -672(%rbp)	#, unary_op
	.loc 1 8131 0
	movq	-952(%rbp), %rax	# exp, tmp3377
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	integer_onep	#
	testl	%eax, %eax	# D.25929
	je	.L1608	#,
	.loc 1 8132 0
	movq	-952(%rbp), %rax	# exp, tmp3378
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25929
	je	.L1608	#,
	.loc 1 8133 0
	movq	-952(%rbp), %rax	# exp, tmp3379
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1925->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$60, %al	#, D.25926
	jne	.L1608	#,
	.loc 1 8135 0
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1609	#,
	.loc 1 8137 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-952(%rbp), %rax	# exp, tmp3381
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %edx	# modifier, tmp3382
	movl	%edx, %ecx	# tmp3382,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	.loc 1 8139 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1609:
	.loc 1 8142 0
	movq	-952(%rbp), %rax	# exp, tmp3383
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	-968(%rbp), %ecx	# modifier, tmp3384
	movl	-912(%rbp), %edx	# mode, tmp3385
	movq	-960(%rbp), %rsi	# target, tmp3386
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3387, op0
	.loc 1 8143 0
	movq	-832(%rbp), %rax	# op0, tmp3388
	movzbl	2(%rax), %eax	# op0_1933->mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25928
	cmpl	-912(%rbp), %eax	# mode, D.25928
	jne	.L1610	#,
	.loc 1 8144 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1610:
	.loc 1 8146 0
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1611	#,
	.loc 1 8147 0
	movl	-912(%rbp), %eax	# mode, tmp3389
	movl	%eax, %edi	# tmp3389,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp3390, target
.L1611:
	.loc 1 8148 0
	movl	-936(%rbp), %edx	# unsignedp, unsignedp.768
	movq	-832(%rbp), %rcx	# op0, tmp3391
	movq	-960(%rbp), %rax	# target, tmp3392
	movq	%rcx, %rsi	# tmp3391,
	movq	%rax, %rdi	# tmp3392,
	call	convert_move	#
	.loc 1 8149 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1608:
	.loc 1 8158 0
	movq	-952(%rbp), %rax	# exp, tmp3393
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1940->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$50, %al	#, D.25926
	jne	.L1612	#,
	.loc 1 8160 0
	movq	-952(%rbp), %rax	# exp, tmp3395
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	.loc 1 8159 0
	movq	32(%rax), %rcx	# _1944->exp.operands, D.25927
	movq	-952(%rbp), %rax	# exp, tmp3396
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# D.25927,
	call	operand_equal_p	#
	testl	%eax, %eax	# D.25929
	je	.L1612	#,
	.loc 1 8161 0
	movq	-952(%rbp), %rax	# exp, tmp3397
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, tmp3398
	movq	%rax, -688(%rbp)	# tmp3398, singleton
	movq	-952(%rbp), %rax	# exp, tmp3399
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp3400
	movq	%rax, -680(%rbp)	# tmp3400, binary_op
	jmp	.L1613	#
.L1612:
	.loc 1 8162 0
	movq	-952(%rbp), %rax	# exp, tmp3401
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1950->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$50, %al	#, D.25926
	jne	.L1614	#,
	.loc 1 8164 0
	movq	-952(%rbp), %rax	# exp, tmp3403
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	.loc 1 8163 0
	movq	32(%rax), %rcx	# _1954->exp.operands, D.25927
	movq	-952(%rbp), %rax	# exp, tmp3404
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# D.25927,
	call	operand_equal_p	#
	testl	%eax, %eax	# D.25929
	je	.L1614	#,
	.loc 1 8165 0
	movq	-952(%rbp), %rax	# exp, tmp3405
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp3406
	movq	%rax, -688(%rbp)	# tmp3406, singleton
	movq	-952(%rbp), %rax	# exp, tmp3407
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, tmp3408
	movq	%rax, -680(%rbp)	# tmp3408, binary_op
	jmp	.L1613	#
.L1614:
	.loc 1 8166 0
	movq	-952(%rbp), %rax	# exp, tmp3409
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1960->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$49, %al	#, D.25926
	jne	.L1615	#,
	.loc 1 8168 0
	movq	-952(%rbp), %rax	# exp, tmp3411
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	.loc 1 8167 0
	movq	32(%rax), %rcx	# _1964->exp.operands, D.25927
	movq	-952(%rbp), %rax	# exp, tmp3412
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# D.25927,
	call	operand_equal_p	#
	testl	%eax, %eax	# D.25929
	je	.L1615	#,
	.loc 1 8169 0
	movq	-952(%rbp), %rax	# exp, tmp3413
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, tmp3414
	movq	%rax, -688(%rbp)	# tmp3414, singleton
	movq	-952(%rbp), %rax	# exp, tmp3415
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp3416
	movq	%rax, -672(%rbp)	# tmp3416, unary_op
	jmp	.L1613	#
.L1615:
	.loc 1 8170 0
	movq	-952(%rbp), %rax	# exp, tmp3417
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _1970->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$49, %al	#, D.25926
	jne	.L1613	#,
	.loc 1 8172 0
	movq	-952(%rbp), %rax	# exp, tmp3419
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	.loc 1 8171 0
	movq	32(%rax), %rcx	# _1974->exp.operands, D.25927
	movq	-952(%rbp), %rax	# exp, tmp3420
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# D.25927,
	call	operand_equal_p	#
	testl	%eax, %eax	# D.25929
	je	.L1613	#,
	.loc 1 8173 0
	movq	-952(%rbp), %rax	# exp, tmp3421
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp3422
	movq	%rax, -688(%rbp)	# tmp3422, singleton
	movq	-952(%rbp), %rax	# exp, tmp3423
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, tmp3424
	movq	%rax, -672(%rbp)	# tmp3424, unary_op
.L1613:
	.loc 1 8180 0
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1616	#,
	.loc 1 8181 0
	movq	$0, -816(%rbp)	#, temp
	jmp	.L1617	#
.L1616:
	.loc 1 8182 0
	cmpq	$0, -640(%rbp)	#, original_target
	je	.L1618	#,
	.loc 1 8183 0
	movq	-952(%rbp), %rax	# exp, tmp3425
	movq	32(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-640(%rbp), %rax	# original_target, tmp3426
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3426,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1619	#,
	.loc 1 8184 0
	cmpq	$0, -688(%rbp)	#, singleton
	je	.L1618	#,
	.loc 1 8184 0 is_stmt 0 discriminator 1
	movq	-640(%rbp), %rax	# original_target, tmp3427
	movzwl	(%rax), %eax	# original_target_206->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1618	#,
	.loc 1 8185 0 is_stmt 1
	movq	-640(%rbp), %rax	# original_target, tmp3428
	movl	8(%rax), %eax	# original_target_206->fld[0].rtuint, D.25928
	cmpl	$52, %eax	#, D.25928
	jbe	.L1618	#,
	.loc 1 8186 0
	movq	-688(%rbp), %rax	# singleton, tmp3429
	movq	%rax, %rdi	# tmp3429,
	call	var_rtx	#
	cmpq	-640(%rbp), %rax	# original_target, D.25924
	jne	.L1618	#,
.L1619:
	.loc 1 8187 0
	movq	-640(%rbp), %rax	# original_target, tmp3430
	movzbl	2(%rax), %eax	# original_target_206->mode, D.25922
	movzbl	%al, %eax	# D.25922, D.25928
	cmpl	-912(%rbp), %eax	# mode, D.25928
	jne	.L1618	#,
	.loc 1 8189 0
	movl	-912(%rbp), %eax	# mode, tmp3431
	movl	%eax, %edi	# tmp3431,
	call	can_conditionally_move_p	#
	testl	%eax, %eax	# D.25929
	je	.L1620	#,
	.loc 1 8190 0
	movq	-640(%rbp), %rax	# original_target, tmp3432
	movzwl	(%rax), %eax	# original_target_206->code, D.25925
	cmpw	$61, %ax	#, D.25925
	je	.L1620	#,
	.loc 1 8191 0
	movq	-648(%rbp), %rax	# type, tmp3433
	movzbl	17(%rax), %eax	# *type_195, D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1618	#,
.L1620:
	.loc 1 8193 0
	movq	-640(%rbp), %rax	# original_target, tmp3434
	movzwl	(%rax), %eax	# original_target_206->code, D.25925
	cmpw	$66, %ax	#, D.25925
	jne	.L1621	#,
	.loc 1 8194 0
	movq	-648(%rbp), %rax	# type, tmp3435
	movzbl	17(%rax), %eax	# *type_195, D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1618	#,
.L1621:
	.loc 1 8195 0
	movq	-640(%rbp), %rax	# original_target, tmp3436
	movq	%rax, -816(%rbp)	# tmp3436, temp
	jmp	.L1617	#
.L1618:
	.loc 1 8196 0
	movq	-648(%rbp), %rax	# type, tmp3437
	movzbl	17(%rax), %eax	# *type_195, D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1622	#,
	.loc 1 8197 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$8197, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1622:
	.loc 1 8199 0
	movq	-648(%rbp), %rax	# type, tmp3438
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp3438,
	call	assign_temp	#
	movq	%rax, -816(%rbp)	# tmp3439, temp
.L1617:
	.loc 1 8205 0
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1623	#,
	.loc 1 8205 0 is_stmt 0 discriminator 1
	cmpq	$0, -688(%rbp)	#, singleton
	je	.L1623	#,
	cmpq	$0, -680(%rbp)	#, binary_op
	je	.L1623	#,
	.loc 1 8206 0 is_stmt 1
	movq	-680(%rbp), %rax	# binary_op, tmp3440
	movzbl	16(%rax), %eax	# binary_op_96->common.code, D.25922
	cmpb	$59, %al	#, D.25922
	je	.L1624	#,
	.loc 1 8207 0
	movq	-680(%rbp), %rax	# binary_op, tmp3441
	movzbl	16(%rax), %eax	# binary_op_96->common.code, D.25922
	cmpb	$60, %al	#, D.25922
	je	.L1624	#,
	.loc 1 8208 0
	movq	-680(%rbp), %rax	# binary_op, tmp3442
	movzbl	16(%rax), %eax	# binary_op_96->common.code, D.25922
	cmpb	$86, %al	#, D.25922
	je	.L1624	#,
	.loc 1 8209 0
	movq	-680(%rbp), %rax	# binary_op, tmp3443
	movzbl	16(%rax), %eax	# binary_op_96->common.code, D.25922
	cmpb	$87, %al	#, D.25922
	jne	.L1623	#,
.L1624:
	.loc 1 8210 0
	movl	ix86_branch_cost(%rip), %eax	# ix86_branch_cost, ix86_branch_cost.770
	cmpl	$2, %eax	#, ix86_branch_cost.770
	jle	.L1625	#,
	.loc 1 8210 0 is_stmt 0 discriminator 1
	movq	-680(%rbp), %rax	# binary_op, tmp3444
	movq	40(%rax), %rax	# binary_op_96->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	integer_pow2p	#
	testl	%eax, %eax	# D.25929
	setne	%al	#, iftmp.769
	jmp	.L1626	#
.L1625:
	.loc 1 8211 0 is_stmt 1 discriminator 2
	movq	-680(%rbp), %rax	# binary_op, tmp3445
	movq	40(%rax), %rax	# binary_op_96->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	integer_onep	#
	.loc 1 8210 0 discriminator 2
	testl	%eax, %eax	# D.25929
	setne	%al	#, iftmp.769
.L1626:
	.loc 1 8210 0 is_stmt 0 discriminator 3
	testb	%al, %al	# iftmp.769
	je	.L1623	#,
	.loc 1 8212 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp3446
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2010->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$60, %al	#, D.25926
	jne	.L1623	#,
.LBB137:
	.loc 1 8215 0
	movq	-680(%rbp), %rax	# binary_op, tmp3448
	movzbl	16(%rax), %eax	# binary_op_96->common.code, D.25922
	.loc 1 8218 0
	cmpb	$59, %al	#, D.25922
	jne	.L1627	#,
	.loc 1 8216 0
	movl	flag_trapv(%rip), %eax	# flag_trapv, flag_trapv.773
	.loc 1 8217 0
	testl	%eax, %eax	# flag_trapv.773
	je	.L1628	#,
	.loc 1 8216 0
	movq	-680(%rbp), %rax	# binary_op, tmp3449
	movq	8(%rax), %rax	# binary_op_96->common.type, D.25927
	movzbl	17(%rax), %eax	# *_2016, D.25922
	andl	$32, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1628	#,
	.loc 1 8217 0
	movq	optab_table+8(%rip), %rax	# optab_table, iftmp.772
	jmp	.L1629	#
.L1628:
	.loc 1 8217 0 is_stmt 0 discriminator 1
	movq	optab_table(%rip), %rax	# optab_table, iftmp.772
.L1629:
	jmp	.L1630	#
.L1627:
	.loc 1 8218 0 is_stmt 1 discriminator 1
	movq	-680(%rbp), %rax	# binary_op, tmp3450
	movzbl	16(%rax), %eax	# binary_op_96->common.code, D.25922
	.loc 1 8221 0 discriminator 1
	cmpb	$60, %al	#, D.25922
	jne	.L1631	#,
	.loc 1 8219 0
	movl	flag_trapv(%rip), %eax	# flag_trapv, flag_trapv.776
	.loc 1 8220 0
	testl	%eax, %eax	# flag_trapv.776
	je	.L1632	#,
	.loc 1 8219 0
	movq	-680(%rbp), %rax	# binary_op, tmp3451
	movq	8(%rax), %rax	# binary_op_96->common.type, D.25927
	movzbl	17(%rax), %eax	# *_2024, D.25922
	andl	$32, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1632	#,
	.loc 1 8220 0
	movq	optab_table+24(%rip), %rax	# optab_table, iftmp.775
	jmp	.L1633	#
.L1632:
	.loc 1 8220 0 is_stmt 0 discriminator 1
	movq	optab_table+16(%rip), %rax	# optab_table, iftmp.775
.L1633:
	jmp	.L1630	#
.L1631:
	.loc 1 8221 0 is_stmt 1 discriminator 1
	movq	-680(%rbp), %rax	# binary_op, tmp3452
	movzbl	16(%rax), %eax	# binary_op_96->common.code, D.25922
	.loc 1 8222 0 discriminator 1
	cmpb	$86, %al	#, D.25922
	jne	.L1635	#,
	movq	optab_table+152(%rip), %rax	# optab_table, iftmp.777
	jmp	.L1630	#
.L1635:
	.loc 1 8222 0 is_stmt 0 discriminator 2
	movq	optab_table+160(%rip), %rax	# optab_table, iftmp.777
.L1630:
	.loc 1 8215 0 is_stmt 1
	movq	%rax, -200(%rbp)	# iftmp.771, boptab
	.loc 1 8231 0
	movq	-952(%rbp), %rax	# exp, tmp3453
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	cmpq	-688(%rbp), %rax	# singleton, D.25927
	jne	.L1637	#,
	.loc 1 8233 0
	movq	-952(%rbp), %rax	# exp, tmp3454
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	invert_truthvalue	#
	movq	-952(%rbp), %rdx	# exp, tmp3455
	movq	%rax, 32(%rdx)	# D.25927, exp_194(D)->exp.operands
.L1637:
	.loc 1 8235 0
	movl	ix86_branch_cost(%rip), %eax	# ix86_branch_cost, ix86_branch_cost.778
	cmpl	$1, %eax	#, ix86_branch_cost.778
	setle	%al	#, D.25933
	movzbl	%al, %ebx	# D.25933, D.25929
	.loc 1 8236 0
	movq	-688(%rbp), %rcx	# singleton, tmp3456
	movq	-816(%rbp), %rax	# temp, tmp3457
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp3456,
	movq	%rax, %rdi	# tmp3457,
	call	safe_from_p	#
	.loc 1 8235 0
	testl	%eax, %eax	# D.25929
	je	.L1638	#,
	.loc 1 8235 0 is_stmt 0 discriminator 1
	movq	-816(%rbp), %rax	# temp, iftmp.779
	jmp	.L1639	#
.L1638:
	.loc 1 8235 0 discriminator 2
	movl	$0, %eax	#, iftmp.779
.L1639:
	.loc 1 8235 0 discriminator 3
	movq	-952(%rbp), %rdx	# exp, tmp3458
	movq	32(%rdx), %rdi	# exp_194(D)->exp.operands, D.25927
	movl	-912(%rbp), %edx	# mode, tmp3459
	movl	%ebx, %ecx	# D.25929,
	movq	%rax, %rsi	# iftmp.779,
	call	do_store_flag	#
	movq	%rax, -664(%rbp)	# tmp3460, result
	.loc 1 8240 0 is_stmt 1 discriminator 3
	cmpq	$0, -664(%rbp)	#, result
	je	.L1640	#,
	.loc 1 8240 0 is_stmt 0 discriminator 1
	movq	-680(%rbp), %rax	# binary_op, tmp3461
	movq	40(%rax), %rax	# binary_op_96->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	integer_onep	#
	testl	%eax, %eax	# D.25929
	jne	.L1640	#,
	.loc 1 8246 0 is_stmt 1
	movq	-688(%rbp), %rcx	# singleton, tmp3462
	movq	-816(%rbp), %rax	# temp, tmp3463
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp3462,
	movq	%rax, %rdi	# tmp3463,
	call	safe_from_p	#
	.loc 1 8241 0
	testl	%eax, %eax	# D.25929
	je	.L1641	#,
	.loc 1 8241 0 is_stmt 0 discriminator 1
	movq	-816(%rbp), %rbx	# temp, iftmp.780
	jmp	.L1642	#
.L1641:
	.loc 1 8241 0 discriminator 2
	movl	$0, %ebx	#, iftmp.780
.L1642:
	.loc 1 8242 0 is_stmt 1 discriminator 3
	movq	-680(%rbp), %rax	# binary_op, tmp3464
	movq	40(%rax), %rax	# binary_op_96->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	tree_log2	#
	.loc 1 8241 0 discriminator 3
	cltq
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25935,
	call	build_int_2_wide	#
	movq	%rax, %rcx	#, D.25927
	movq	-664(%rbp), %rdx	# result, tmp3465
	movl	-912(%rbp), %eax	# mode, tmp3466
	movl	$0, %r9d	#,
	movq	%rbx, %r8	# iftmp.780,
	movl	%eax, %esi	# tmp3466,
	movl	$82, %edi	#,
	call	expand_shift	#
	movq	%rax, -664(%rbp)	# tmp3467, result
.L1640:
	.loc 1 8249 0
	cmpq	$0, -664(%rbp)	#, result
	je	.L1643	#,
	.loc 1 8251 0
	movq	-688(%rbp), %rax	# singleton, tmp3468
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp3468,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp3469, op1
	.loc 1 8252 0
	movl	-936(%rbp), %r8d	# unsignedp, unsignedp.781
	movq	-816(%rbp), %rdi	# temp, tmp3470
	movq	-664(%rbp), %rcx	# result, tmp3471
	movq	-824(%rbp), %rdx	# op1, tmp3472
	movq	-200(%rbp), %rsi	# boptab, tmp3473
	movl	-912(%rbp), %eax	# mode, tmp3474
	movl	$3, (%rsp)	#,
	movl	%r8d, %r9d	# unsignedp.781,
	movq	%rdi, %r8	# tmp3470,
	movl	%eax, %edi	# tmp3474,
	call	expand_binop	#
	jmp	.L1735	#
.L1643:
	.loc 1 8255 0
	movq	-952(%rbp), %rax	# exp, tmp3475
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	cmpq	-688(%rbp), %rax	# singleton, D.25927
	jne	.L1623	#,
	.loc 1 8257 0
	movq	-952(%rbp), %rax	# exp, tmp3476
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	invert_truthvalue	#
	movq	-952(%rbp), %rdx	# exp, tmp3477
	movq	%rax, 32(%rdx)	# D.25927, exp_194(D)->exp.operands
.L1623:
.LBE137:
	.loc 1 8260 0
	call	do_pending_stack_adjust	#
	.loc 1 8261 0
	movq	cfun(%rip), %rax	# cfun, cfun.782
	movq	16(%rax), %rax	# cfun.782_2063->expr, D.25930
	movq	cfun(%rip), %rdx	# cfun, cfun.783
	movq	16(%rdx), %rdx	# cfun.783_2065->expr, D.25930
	movl	4(%rdx), %edx	# _2066->x_inhibit_defer_pop, D.25929
	addl	$1, %edx	#, D.25929
	movl	%edx, 4(%rax)	# D.25929, _2064->x_inhibit_defer_pop
	.loc 1 8262 0
	call	gen_label_rtx	#
	movq	%rax, -832(%rbp)	# tmp3478, op0
	.loc 1 8264 0
	cmpq	$0, -688(%rbp)	#, singleton
	je	.L1644	#,
	.loc 1 8264 0 is_stmt 0 discriminator 1
	movq	-952(%rbp), %rax	# exp, tmp3479
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	17(%rax), %eax	# *_2070, D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1644	#,
	.loc 1 8266 0 is_stmt 1
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1645	#,
	.loc 1 8272 0
	cmpq	$0, -680(%rbp)	#, binary_op
	je	.L1646	#,
	.loc 1 8273 0
	movq	-680(%rbp), %rax	# binary_op, tmp3480
	movq	40(%rax), %rcx	# binary_op_96->exp.operands, D.25927
	movq	-816(%rbp), %rax	# temp, tmp3481
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3481,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	je	.L1647	#,
.L1646:
	.loc 1 8274 0
	movq	-816(%rbp), %rax	# temp, tmp3482
	movzwl	(%rax), %eax	# temp_65->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1648	#,
	.loc 1 8275 0
	movq	-816(%rbp), %rax	# temp, tmp3483
	movl	8(%rax), %eax	# temp_65->fld[0].rtuint, D.25928
	cmpl	$52, %eax	#, D.25928
	ja	.L1648	#,
.L1647:
	.loc 1 8276 0
	movl	-912(%rbp), %eax	# mode, tmp3484
	movl	%eax, %edi	# tmp3484,
	call	gen_reg_rtx	#
	movq	%rax, -816(%rbp)	# tmp3485, temp
.L1648:
	.loc 1 8277 0
	movq	-816(%rbp), %rcx	# temp, tmp3486
	movq	-688(%rbp), %rax	# singleton, tmp3487
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp3486,
	movq	%rax, %rdi	# tmp3487,
	call	store_expr	#
	jmp	.L1649	#
.L1645:
	.loc 1 8280 0
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1650	#,
	.loc 1 8280 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.784
	jmp	.L1651	#
.L1650:
	.loc 1 8280 0 discriminator 2
	movl	$0, %eax	#, iftmp.784
.L1651:
	.loc 1 8280 0 discriminator 3
	movq	-688(%rbp), %rdi	# singleton, tmp3488
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rsi	# iftmp.784,
	call	expand_expr	#
.L1649:
	.loc 1 8282 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp3489
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	cmpq	-688(%rbp), %rax	# singleton, D.25927
	jne	.L1652	#,
	.loc 1 8283 0
	movq	-952(%rbp), %rax	# exp, tmp3490
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-832(%rbp), %rdx	# op0, tmp3491
	movq	%rdx, %rsi	# tmp3491,
	movq	%rax, %rdi	# D.25927,
	call	jumpif	#
	jmp	.L1653	#
.L1652:
	.loc 1 8285 0
	movq	-952(%rbp), %rax	# exp, tmp3492
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-832(%rbp), %rdx	# op0, tmp3493
	movq	%rdx, %rsi	# tmp3493,
	movq	%rax, %rdi	# D.25927,
	call	jumpifnot	#
.L1653:
	.loc 1 8287 0
	call	start_cleanup_deferral	#
	.loc 1 8288 0
	cmpq	$0, -680(%rbp)	#, binary_op
	je	.L1654	#,
	.loc 1 8288 0 is_stmt 0 discriminator 1
	cmpq	$0, -816(%rbp)	#, temp
	jne	.L1654	#,
	.loc 1 8290 0 is_stmt 1
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1655	#,
	.loc 1 8290 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.785
	jmp	.L1656	#
.L1655:
	.loc 1 8290 0 discriminator 2
	movl	$0, %eax	#, iftmp.785
.L1656:
	.loc 1 8290 0 discriminator 3
	movq	-680(%rbp), %rdx	# binary_op, tmp3494
	movq	40(%rdx), %rdi	# binary_op_96->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rsi	# iftmp.785,
	call	expand_expr	#
	jmp	.L1657	#
.L1654:
	.loc 1 8292 0 is_stmt 1
	cmpq	$0, -680(%rbp)	#, binary_op
	je	.L1658	#,
	.loc 1 8293 0
	movq	-680(%rbp), %rax	# binary_op, tmp3495
	movq	40(%rax), %rbx	# binary_op_96->exp.operands, D.25927
	movq	-816(%rbp), %rdx	# temp, tmp3496
	movq	-648(%rbp), %rax	# type, tmp3497
	movq	%rdx, %rsi	# tmp3496,
	movq	%rax, %rdi	# tmp3497,
	call	make_tree	#
	movq	%rax, %rdx	#, D.25927
	movq	-680(%rbp), %rax	# binary_op, tmp3498
	movzbl	16(%rax), %eax	# binary_op_96->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25945
	movq	-648(%rbp), %rsi	# type, tmp3499
	movq	%rbx, %rcx	# D.25927,
	movl	%eax, %edi	# D.25945,
	movl	$0, %eax	#,
	call	build	#
	movq	-816(%rbp), %rcx	# temp, tmp3500
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp3500,
	movq	%rax, %rdi	# D.25927,
	call	store_expr	#
	jmp	.L1657	#
.L1658:
	.loc 1 8298 0
	movq	-816(%rbp), %rdx	# temp, tmp3501
	movq	-648(%rbp), %rax	# type, tmp3502
	movq	%rdx, %rsi	# tmp3501,
	movq	%rax, %rdi	# tmp3502,
	call	make_tree	#
	movq	%rax, %rdx	#, D.25927
	movq	-672(%rbp), %rax	# unary_op, tmp3503
	movzbl	16(%rax), %eax	# unary_op_97->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25945
	movq	-648(%rbp), %rcx	# type, tmp3504
	movq	%rcx, %rsi	# tmp3504,
	movl	%eax, %edi	# D.25945,
	call	build1	#
	movq	-816(%rbp), %rcx	# temp, tmp3505
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp3505,
	movq	%rax, %rdi	# D.25927,
	call	store_expr	#
.L1657:
	.loc 1 8301 0
	movq	-832(%rbp), %rax	# op0, tmp3506
	movq	%rax, -824(%rbp)	# tmp3506, op1
	jmp	.L1659	#
.L1644:
	.loc 1 8307 0
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1660	#,
	.loc 1 8308 0
	movq	-952(%rbp), %rax	# exp, tmp3507
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2096->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$60, %al	#, D.25926
	jne	.L1660	#,
	.loc 1 8309 0
	movq	-952(%rbp), %rax	# exp, tmp3509
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	40(%rax), %rax	# _2100->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25929
	je	.L1660	#,
	.loc 1 8310 0
	movq	-952(%rbp), %rax	# exp, tmp3510
	movq	40(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-952(%rbp), %rax	# exp, tmp3511
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _2104->exp.operands, D.25927
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# D.25927,
	call	operand_equal_p	#
	testl	%eax, %eax	# D.25929
	je	.L1660	#,
	.loc 1 8312 0
	movq	-952(%rbp), %rax	# exp, tmp3512
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	17(%rax), %eax	# *_2107, D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1661	#,
	.loc 1 8313 0
	movq	-952(%rbp), %rax	# exp, tmp3513
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2110->common.code, D.25922
	cmpb	$118, %al	#, D.25922
	jne	.L1660	#,
.L1661:
	.loc 1 8314 0
	movq	-952(%rbp), %rax	# exp, tmp3514
	movq	48(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-816(%rbp), %rax	# temp, tmp3515
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3515,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	je	.L1660	#,
	.loc 1 8316 0
	movq	-816(%rbp), %rax	# temp, tmp3516
	movzwl	(%rax), %eax	# temp_65->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1662	#,
	.loc 1 8317 0
	movq	-816(%rbp), %rax	# temp, tmp3517
	movl	8(%rax), %eax	# temp_65->fld[0].rtuint, D.25928
	cmpl	$52, %eax	#, D.25928
	ja	.L1662	#,
	.loc 1 8318 0
	movl	-912(%rbp), %eax	# mode, tmp3518
	movl	%eax, %edi	# tmp3518,
	call	gen_reg_rtx	#
	movq	%rax, -816(%rbp)	# tmp3519, temp
.L1662:
	.loc 1 8319 0
	movq	-952(%rbp), %rax	# exp, tmp3520
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-816(%rbp), %rcx	# temp, tmp3521
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp3521,
	movq	%rax, %rdi	# D.25927,
	call	store_expr	#
	.loc 1 8320 0
	movq	-952(%rbp), %rax	# exp, tmp3522
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-832(%rbp), %rdx	# op0, tmp3523
	movq	%rdx, %rsi	# tmp3523,
	movq	%rax, %rdi	# D.25927,
	call	jumpif	#
	.loc 1 8322 0
	call	start_cleanup_deferral	#
	.loc 1 8323 0
	movq	-952(%rbp), %rax	# exp, tmp3524
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-816(%rbp), %rcx	# temp, tmp3525
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp3525,
	movq	%rax, %rdi	# D.25927,
	call	store_expr	#
	.loc 1 8324 0
	movq	-832(%rbp), %rax	# op0, tmp3526
	movq	%rax, -824(%rbp)	# tmp3526, op1
	jmp	.L1659	#
.L1660:
	.loc 1 8326 0
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1663	#,
	.loc 1 8327 0
	movq	-952(%rbp), %rax	# exp, tmp3527
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2121->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$60, %al	#, D.25926
	jne	.L1663	#,
	.loc 1 8328 0
	movq	-952(%rbp), %rax	# exp, tmp3529
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	40(%rax), %rax	# _2125->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25929
	je	.L1663	#,
	.loc 1 8329 0
	movq	-952(%rbp), %rax	# exp, tmp3530
	movq	48(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-952(%rbp), %rax	# exp, tmp3531
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	32(%rax), %rax	# _2129->exp.operands, D.25927
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# D.25927,
	call	operand_equal_p	#
	testl	%eax, %eax	# D.25929
	je	.L1663	#,
	.loc 1 8331 0
	movq	-952(%rbp), %rax	# exp, tmp3532
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	17(%rax), %eax	# *_2132, D.25922
	andl	$1, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1664	#,
	.loc 1 8332 0
	movq	-952(%rbp), %rax	# exp, tmp3533
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2135->common.code, D.25922
	cmpb	$118, %al	#, D.25922
	jne	.L1663	#,
.L1664:
	.loc 1 8333 0
	movq	-952(%rbp), %rax	# exp, tmp3534
	movq	40(%rax), %rcx	# exp_194(D)->exp.operands, D.25927
	movq	-816(%rbp), %rax	# temp, tmp3535
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3535,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	je	.L1663	#,
	.loc 1 8335 0
	movq	-816(%rbp), %rax	# temp, tmp3536
	movzwl	(%rax), %eax	# temp_65->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1665	#,
	.loc 1 8336 0
	movq	-816(%rbp), %rax	# temp, tmp3537
	movl	8(%rax), %eax	# temp_65->fld[0].rtuint, D.25928
	cmpl	$52, %eax	#, D.25928
	ja	.L1665	#,
	.loc 1 8337 0
	movl	-912(%rbp), %eax	# mode, tmp3538
	movl	%eax, %edi	# tmp3538,
	call	gen_reg_rtx	#
	movq	%rax, -816(%rbp)	# tmp3539, temp
.L1665:
	.loc 1 8338 0
	movq	-952(%rbp), %rax	# exp, tmp3540
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-816(%rbp), %rcx	# temp, tmp3541
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp3541,
	movq	%rax, %rdi	# D.25927,
	call	store_expr	#
	.loc 1 8339 0
	movq	-952(%rbp), %rax	# exp, tmp3542
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-832(%rbp), %rdx	# op0, tmp3543
	movq	%rdx, %rsi	# tmp3543,
	movq	%rax, %rdi	# D.25927,
	call	jumpifnot	#
	.loc 1 8341 0
	call	start_cleanup_deferral	#
	.loc 1 8342 0
	movq	-952(%rbp), %rax	# exp, tmp3544
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-816(%rbp), %rcx	# temp, tmp3545
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp3545,
	movq	%rax, %rdi	# D.25927,
	call	store_expr	#
	.loc 1 8343 0
	movq	-832(%rbp), %rax	# op0, tmp3546
	movq	%rax, -824(%rbp)	# tmp3546, op1
	jmp	.L1659	#
.L1663:
	.loc 1 8347 0
	call	gen_label_rtx	#
	movq	%rax, -824(%rbp)	# tmp3547, op1
	.loc 1 8348 0
	movq	-952(%rbp), %rax	# exp, tmp3548
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-832(%rbp), %rdx	# op0, tmp3549
	movq	%rdx, %rsi	# tmp3549,
	movq	%rax, %rdi	# D.25927,
	call	jumpifnot	#
	.loc 1 8350 0
	call	start_cleanup_deferral	#
	.loc 1 8354 0
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1666	#,
	.loc 1 8355 0
	movq	-952(%rbp), %rax	# exp, tmp3550
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rdx	# _2148->common.type, D.25927
	movq	global_trees+216(%rip), %rax	# global_trees, D.25927
	cmpq	%rax, %rdx	# D.25927, D.25927
	je	.L1666	#,
	.loc 1 8356 0
	movq	-952(%rbp), %rax	# exp, tmp3551
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-816(%rbp), %rcx	# temp, tmp3552
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp3552,
	movq	%rax, %rdi	# D.25927,
	call	store_expr	#
	jmp	.L1667	#
.L1666:
	.loc 1 8358 0
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1668	#,
	.loc 1 8358 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.786
	jmp	.L1669	#
.L1668:
	.loc 1 8358 0 discriminator 2
	movl	$0, %eax	#, iftmp.786
.L1669:
	.loc 1 8358 0 discriminator 3
	movq	-952(%rbp), %rdx	# exp, tmp3553
	movq	40(%rdx), %rdi	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rsi	# iftmp.786,
	call	expand_expr	#
.L1667:
	.loc 1 8360 0 is_stmt 1
	call	end_cleanup_deferral	#
	.loc 1 8361 0
	call	emit_queue	#
	.loc 1 8362 0
	movq	-824(%rbp), %rax	# op1, tmp3554
	movq	%rax, %rdi	# tmp3554,
	call	gen_jump	#
	movq	%rax, %rdi	# D.25924,
	call	emit_jump_insn	#
	.loc 1 8363 0
	call	emit_barrier	#
	.loc 1 8364 0
	movq	-832(%rbp), %rax	# op0, tmp3555
	movq	%rax, %rdi	# tmp3555,
	call	emit_label	#
	.loc 1 8365 0
	call	start_cleanup_deferral	#
	.loc 1 8366 0
	cmpq	$0, -816(%rbp)	#, temp
	je	.L1670	#,
	.loc 1 8367 0
	movq	-952(%rbp), %rax	# exp, tmp3556
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rdx	# _2156->common.type, D.25927
	movq	global_trees+216(%rip), %rax	# global_trees, D.25927
	cmpq	%rax, %rdx	# D.25927, D.25927
	je	.L1670	#,
	.loc 1 8368 0
	movq	-952(%rbp), %rax	# exp, tmp3557
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-816(%rbp), %rcx	# temp, tmp3558
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp3558,
	movq	%rax, %rdi	# D.25927,
	call	store_expr	#
	jmp	.L1659	#
.L1670:
	.loc 1 8370 0
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1671	#,
	.loc 1 8370 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.787
	jmp	.L1672	#
.L1671:
	.loc 1 8370 0 discriminator 2
	movl	$0, %eax	#, iftmp.787
.L1672:
	.loc 1 8370 0 discriminator 3
	movq	-952(%rbp), %rdx	# exp, tmp3559
	movq	48(%rdx), %rdi	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rsi	# iftmp.787,
	call	expand_expr	#
.L1659:
	.loc 1 8374 0 is_stmt 1
	call	end_cleanup_deferral	#
	.loc 1 8376 0
	call	emit_queue	#
	.loc 1 8377 0
	movq	-824(%rbp), %rax	# op1, tmp3560
	movq	%rax, %rdi	# tmp3560,
	call	emit_label	#
	.loc 1 8378 0
	movq	cfun(%rip), %rax	# cfun, cfun.788
	movq	16(%rax), %rax	# cfun.788_2163->expr, D.25930
	movq	cfun(%rip), %rdx	# cfun, cfun.789
	movq	16(%rdx), %rdx	# cfun.789_2165->expr, D.25930
	movl	4(%rdx), %edx	# _2166->x_inhibit_defer_pop, D.25929
	subl	$1, %edx	#, D.25929
	movl	%edx, 4(%rax)	# D.25929, _2164->x_inhibit_defer_pop
	.loc 1 8380 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1176:
.LBE136:
.LBB138:
	.loc 1 8394 0
	movq	-952(%rbp), %rax	# exp, tmp3561
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, tmp3562
	movq	%rax, -192(%rbp)	# tmp3562, slot
	.loc 1 8395 0
	movq	$0, -656(%rbp)	#, cleanups
	.loc 1 8398 0
	movq	-192(%rbp), %rax	# slot, tmp3563
	movzbl	16(%rax), %eax	# slot_2170->common.code, D.25922
	cmpb	$34, %al	#, D.25922
	je	.L1673	#,
	.loc 1 8399 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$8399, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1673:
	.loc 1 8401 0
	cmpl	$0, -908(%rbp)	#, ignore
	jne	.L1674	#,
	.loc 1 8402 0
	movq	-640(%rbp), %rax	# original_target, tmp3564
	movq	%rax, -960(%rbp)	# tmp3564, target
.L1674:
	.loc 1 8407 0
	movq	-192(%rbp), %rax	# slot, tmp3565
	movzbl	18(%rax), %edx	#, tmp3568
	orl	$1, %edx	#, tmp3569
	movb	%dl, 18(%rax)	# tmp3569,
	.loc 1 8409 0
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1675	#,
	.loc 1 8411 0
	movq	-192(%rbp), %rax	# slot, tmp3570
	movq	144(%rax), %rax	# slot_2170->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1676	#,
	.loc 1 8413 0
	movq	-192(%rbp), %rax	# slot, tmp3571
	movq	144(%rax), %rax	# slot_2170->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1677	#,
	.loc 1 8413 0 is_stmt 0 discriminator 1
	movq	-192(%rbp), %rax	# slot, tmp3572
	movq	144(%rax), %rax	# slot_2170->decl.rtl, iftmp.790
	jmp	.L1678	#
.L1677:
	.loc 1 8413 0 discriminator 2
	movq	-192(%rbp), %rax	# slot, tmp3573
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp3573,
	call	make_decl_rtl	#
	movq	-192(%rbp), %rax	# slot, tmp3574
	movq	144(%rax), %rax	# slot_2170->decl.rtl, iftmp.790
.L1678:
	.loc 1 8413 0 discriminator 3
	movq	%rax, -960(%rbp)	# iftmp.790, target
	.loc 1 8416 0 is_stmt 1 discriminator 3
	movq	-952(%rbp), %rax	# exp, tmp3575
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	testq	%rax, %rax	# D.25927
	jne	.L1682	#,
	.loc 1 8417 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1676:
	.loc 1 8421 0
	movq	-648(%rbp), %rax	# type, tmp3576
	movl	$1, %ecx	#,
	movl	$0, %edx	#,
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp3576,
	call	assign_temp	#
	movq	%rax, -960(%rbp)	# tmp3577, target
	.loc 1 8423 0
	movq	-960(%rbp), %rax	# target, tmp3578
	movq	%rax, %rdi	# tmp3578,
	call	preserve_temp_slots	#
	.loc 1 8424 0
	movq	-192(%rbp), %rax	# slot, tmp3579
	movq	-960(%rbp), %rdx	# target, tmp3580
	movq	%rdx, 144(%rax)	# tmp3580, slot_2170->decl.rtl
	.loc 1 8425 0
	movq	-192(%rbp), %rax	# slot, tmp3581
	movzbl	17(%rax), %eax	# *slot_2170, D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1680	#,
	.loc 1 8426 0
	movq	-192(%rbp), %rax	# slot, tmp3582
	movq	%rax, %rdi	# tmp3582,
	call	put_var_into_stack	#
.L1680:
	.loc 1 8435 0
	movq	-952(%rbp), %rax	# exp, tmp3583
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	testq	%rax, %rax	# D.25927
	jne	.L1681	#,
	.loc 1 8436 0
	movq	-192(%rbp), %rax	# slot, tmp3584
	movq	%rax, %rdi	# tmp3584,
	call	maybe_build_cleanup	#
	movq	-952(%rbp), %rdx	# exp, tmp3585
	movq	%rax, 48(%rdx)	# D.25927, exp_194(D)->exp.operands
.L1681:
	.loc 1 8437 0
	movq	-952(%rbp), %rax	# exp, tmp3586
	movq	48(%rax), %rax	# exp_194(D)->exp.operands, tmp3587
	movq	%rax, -656(%rbp)	# tmp3587, cleanups
	jmp	.L1682	#
.L1675:
	.loc 1 8450 0
	movq	-192(%rbp), %rax	# slot, tmp3588
	movq	144(%rax), %rax	# slot_2170->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1683	#,
	.loc 1 8452 0
	movq	-192(%rbp), %rax	# slot, tmp3589
	movq	144(%rax), %rax	# slot_2170->decl.rtl, D.25924
	testq	%rax, %rax	# D.25924
	je	.L1684	#,
	.loc 1 8452 0 is_stmt 0 discriminator 1
	movq	-192(%rbp), %rax	# slot, tmp3590
	movq	144(%rax), %rax	# slot_2170->decl.rtl, iftmp.791
	jmp	.L1685	#
.L1684:
	.loc 1 8452 0 discriminator 2
	movq	-192(%rbp), %rax	# slot, tmp3591
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp3591,
	call	make_decl_rtl	#
	movq	-192(%rbp), %rax	# slot, tmp3592
	movq	144(%rax), %rax	# slot_2170->decl.rtl, iftmp.791
.L1685:
	.loc 1 8452 0 discriminator 3
	movq	%rax, -960(%rbp)	# iftmp.791, target
	.loc 1 8455 0 is_stmt 1 discriminator 3
	movq	-952(%rbp), %rax	# exp, tmp3593
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	testq	%rax, %rax	# D.25927
	jne	.L1682	#,
	.loc 1 8456 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1683:
	.loc 1 8460 0
	movq	-192(%rbp), %rax	# slot, tmp3594
	movq	-960(%rbp), %rdx	# target, tmp3595
	movq	%rdx, 144(%rax)	# tmp3595, slot_2170->decl.rtl
	.loc 1 8463 0
	movq	-192(%rbp), %rax	# slot, tmp3596
	movzbl	17(%rax), %eax	# *slot_2170, D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	je	.L1682	#,
	.loc 1 8464 0
	movq	-192(%rbp), %rax	# slot, tmp3597
	movq	%rax, %rdi	# tmp3597,
	call	put_var_into_stack	#
.L1682:
	.loc 1 8468 0
	movq	-952(%rbp), %rax	# exp, tmp3598
	movq	40(%rax), %rdx	# exp_194(D)->exp.operands, D.25927
	movq	-952(%rbp), %rax	# exp, tmp3599
	movq	%rdx, 56(%rax)	# D.25927, exp_194(D)->exp.operands
	movq	-952(%rbp), %rax	# exp, tmp3600
	movq	56(%rax), %rax	# exp_194(D)->exp.operands, tmp3601
	movq	%rax, -184(%rbp)	# tmp3601, exp1
	.loc 1 8470 0
	movq	-952(%rbp), %rax	# exp, tmp3602
	movq	$0, 40(%rax)	#, exp_194(D)->exp.operands
	.loc 1 8472 0
	movq	-960(%rbp), %rcx	# target, tmp3603
	movq	-184(%rbp), %rax	# exp1, tmp3604
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp3603,
	movq	%rax, %rdi	# tmp3604,
	call	store_expr	#
	.loc 1 8474 0
	movq	-656(%rbp), %rax	# cleanups, tmp3605
	movq	%rax, %rsi	# tmp3605,
	movl	$0, %edi	#,
	call	expand_decl_cleanup	#
	.loc 1 8476 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1175:
.LBE138:
.LBB139:
	.loc 1 8481 0
	movq	-952(%rbp), %rax	# exp, tmp3606
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, tmp3607
	movq	%rax, -176(%rbp)	# tmp3607, lhs
	.loc 1 8482 0
	movq	-952(%rbp), %rax	# exp, tmp3608
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp3609
	movq	%rax, -168(%rbp)	# tmp3609, rhs
	.loc 1 8484 0
	cmpq	$0, -640(%rbp)	#, original_target
	setne	%al	#, D.25933
	movzbl	%al, %ecx	# D.25933, D.25929
	cmpl	$0, -908(%rbp)	#, ignore
	sete	%al	#, D.25933
	movzbl	%al, %edx	# D.25933, D.25929
	movq	-168(%rbp), %rsi	# rhs, tmp3610
	movq	-176(%rbp), %rax	# lhs, tmp3611
	movq	%rax, %rdi	# tmp3611,
	call	expand_assignment	#
	movq	%rax, -816(%rbp)	# tmp3612, temp
	.loc 1 8485 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1174:
.LBE139:
.LBB140:
	.loc 1 8498 0
	movq	-952(%rbp), %rax	# exp, tmp3613
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, tmp3614
	movq	%rax, -160(%rbp)	# tmp3614, lhs
	.loc 1 8499 0
	movq	-952(%rbp), %rax	# exp, tmp3615
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp3616
	movq	%rax, -152(%rbp)	# tmp3616, rhs
	.loc 1 8501 0
	movq	$0, -816(%rbp)	#, temp
	.loc 1 8511 0
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1686	#,
	.loc 1 8512 0
	movq	-160(%rbp), %rax	# lhs, tmp3617
	movzbl	16(%rax), %eax	# lhs_2207->common.code, D.25922
	cmpb	$39, %al	#, D.25922
	jne	.L1686	#,
	.loc 1 8513 0
	movq	-152(%rbp), %rax	# rhs, tmp3618
	movzbl	16(%rax), %eax	# rhs_2208->common.code, D.25922
	cmpb	$86, %al	#, D.25922
	je	.L1687	#,
	.loc 1 8514 0
	movq	-152(%rbp), %rax	# rhs, tmp3619
	movzbl	16(%rax), %eax	# rhs_2208->common.code, D.25922
	cmpb	$88, %al	#, D.25922
	jne	.L1686	#,
.L1687:
	.loc 1 8515 0
	movq	-152(%rbp), %rax	# rhs, tmp3620
	movq	32(%rax), %rax	# rhs_2208->exp.operands, D.25927
	cmpq	-160(%rbp), %rax	# lhs, D.25927
	jne	.L1686	#,
	.loc 1 8516 0
	movq	-152(%rbp), %rax	# rhs, tmp3621
	movq	40(%rax), %rax	# rhs_2208->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2214->common.code, D.25922
	cmpb	$39, %al	#, D.25922
	jne	.L1686	#,
	.loc 1 8517 0
	movq	-160(%rbp), %rax	# lhs, tmp3622
	movq	40(%rax), %rax	# lhs_2207->exp.operands, D.25927
	movq	40(%rax), %rax	# _2216->decl.size, D.25927
	movq	%rax, %rdi	# D.25927,
	call	integer_onep	#
	testl	%eax, %eax	# D.25929
	je	.L1686	#,
	.loc 1 8518 0
	movq	-152(%rbp), %rax	# rhs, tmp3623
	movq	40(%rax), %rax	# rhs_2208->exp.operands, D.25927
	movq	40(%rax), %rax	# _2219->exp.operands, D.25927
	movq	40(%rax), %rax	# _2220->decl.size, D.25927
	movq	%rax, %rdi	# D.25927,
	call	integer_onep	#
	testl	%eax, %eax	# D.25929
	je	.L1686	#,
.LBB141:
	.loc 1 8520 0
	call	gen_label_rtx	#
	movq	%rax, -144(%rbp)	# tmp3624, label
	.loc 1 8524 0
	movq	-152(%rbp), %rax	# rhs, tmp3625
	movzbl	16(%rax), %eax	# rhs_2208->common.code, D.25922
	.loc 1 8522 0
	cmpb	$88, %al	#, D.25922
	jne	.L1688	#,
	.loc 1 8522 0 is_stmt 0 discriminator 1
	movq	-144(%rbp), %rdx	# label, iftmp.792
	jmp	.L1689	#
.L1688:
	.loc 1 8522 0 discriminator 2
	movl	$0, %edx	#, iftmp.792
.L1689:
	.loc 1 8523 0 is_stmt 1 discriminator 3
	movq	-152(%rbp), %rax	# rhs, tmp3626
	movzbl	16(%rax), %eax	# rhs_2208->common.code, D.25922
	.loc 1 8522 0 discriminator 3
	cmpb	$86, %al	#, D.25922
	jne	.L1690	#,
	.loc 1 8522 0 is_stmt 0 discriminator 4
	movq	-144(%rbp), %rax	# label, iftmp.793
	jmp	.L1691	#
.L1690:
	.loc 1 8522 0 discriminator 5
	movl	$0, %eax	#, iftmp.793
.L1691:
	.loc 1 8522 0 discriminator 6
	movq	-152(%rbp), %rcx	# rhs, tmp3627
	movq	40(%rcx), %rcx	# rhs_2208->exp.operands, D.25927
	movq	%rax, %rsi	# iftmp.793,
	movq	%rcx, %rdi	# D.25927,
	call	do_jump	#
	.loc 1 8526 0 is_stmt 1 discriminator 6
	movq	-152(%rbp), %rax	# rhs, tmp3628
	movzbl	16(%rax), %eax	# rhs_2208->common.code, D.25922
	.loc 1 8525 0 discriminator 6
	cmpb	$86, %al	#, D.25922
	jne	.L1692	#,
	.loc 1 8525 0 is_stmt 0 discriminator 1
	movq	global_trees+96(%rip), %rax	# global_trees, iftmp.794
	jmp	.L1693	#
.L1692:
	.loc 1 8525 0 discriminator 2
	movq	global_trees+88(%rip), %rax	# global_trees, iftmp.794
.L1693:
	.loc 1 8525 0 discriminator 3
	movq	-152(%rbp), %rdx	# rhs, tmp3629
	movq	8(%rdx), %rdx	# rhs_2208->common.type, D.25927
	movq	%rax, %rsi	# iftmp.794,
	movq	%rdx, %rdi	# D.25927,
	call	convert	#
	movq	%rax, %rsi	#, D.25927
	movq	-160(%rbp), %rax	# lhs, tmp3630
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp3630,
	call	expand_assignment	#
	.loc 1 8530 0 is_stmt 1 discriminator 3
	call	do_pending_stack_adjust	#
	.loc 1 8531 0 discriminator 3
	movq	-144(%rbp), %rax	# label, tmp3631
	movq	%rax, %rdi	# tmp3631,
	call	emit_label	#
	.loc 1 8532 0 discriminator 3
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1686:
.LBE141:
	.loc 1 8535 0
	cmpq	$0, -640(%rbp)	#, original_target
	setne	%al	#, D.25933
	movzbl	%al, %ecx	# D.25933, D.25929
	cmpl	$0, -908(%rbp)	#, ignore
	sete	%al	#, D.25933
	movzbl	%al, %edx	# D.25933, D.25929
	movq	-152(%rbp), %rsi	# rhs, tmp3632
	movq	-160(%rbp), %rax	# lhs, tmp3633
	movq	%rax, %rdi	# tmp3633,
	call	expand_assignment	#
	movq	%rax, -816(%rbp)	# tmp3634, temp
	.loc 1 8537 0
	movq	-816(%rbp), %rax	# temp, D.25920
	jmp	.L1735	#
.L1225:
.LBE140:
	.loc 1 8541 0
	movq	-952(%rbp), %rax	# exp, tmp3635
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	testq	%rax, %rax	# D.25927
	jne	.L1694	#,
	.loc 1 8542 0
	call	expand_null_return	#
	jmp	.L1695	#
.L1694:
	.loc 1 8544 0
	movq	-952(%rbp), %rax	# exp, tmp3636
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	expand_return	#
.L1695:
	.loc 1 8545 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1218:
	.loc 1 8549 0
	movl	-908(%rbp), %edx	# ignore, tmp3637
	movq	-952(%rbp), %rax	# exp, tmp3638
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp3638,
	call	expand_increment	#
	jmp	.L1735	#
.L1219:
	.loc 1 8554 0
	cmpl	$0, -908(%rbp)	#, ignore
	sete	%al	#, D.25933
	movzbl	%al, %ecx	# D.25933, D.25929
	movl	-908(%rbp), %edx	# ignore, tmp3639
	movq	-952(%rbp), %rax	# exp, tmp3640
	movl	%ecx, %esi	# D.25929,
	movq	%rax, %rdi	# tmp3640,
	call	expand_increment	#
	jmp	.L1735	#
.L1211:
	.loc 1 8558 0
	movq	-952(%rbp), %rax	# exp, tmp3641
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2250->common.code, D.25922
	cmpb	$30, %al	#, D.25922
	jne	.L1696	#,
	.loc 1 8559 0
	movq	-952(%rbp), %rax	# exp, tmp3642
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	decl_function_context	#
	testq	%rax, %rax	# D.25927
	je	.L1696	#,
	.loc 1 8560 0
	movq	-952(%rbp), %rax	# exp, tmp3643
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	49(%rax), %eax	# *_2254, D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1696	#,
	.loc 1 8561 0
	movq	-952(%rbp), %rax	# exp, tmp3644
	movzbl	18(%rax), %eax	# *exp_194(D), D.25922
	andl	$4, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1696	#,
	.loc 1 8563 0
	movq	-952(%rbp), %rax	# exp, tmp3645
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	trampoline_address	#
	movq	%rax, -832(%rbp)	# tmp3646, op0
	.loc 1 8564 0
	movq	-960(%rbp), %rdx	# target, tmp3647
	movq	-832(%rbp), %rax	# op0, tmp3648
	movq	%rdx, %rsi	# tmp3647,
	movq	%rax, %rdi	# tmp3648,
	call	force_operand	#
	movq	%rax, -832(%rbp)	# tmp3649, op0
	jmp	.L1697	#
.L1696:
	.loc 1 8568 0
	movq	-952(%rbp), %rax	# exp, tmp3650
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2262->common.code, D.25922
	testb	%al, %al	# D.25922
	jne	.L1698	#,
	.loc 1 8569 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1698:
	.loc 1 8573 0
	movq	cfun(%rip), %rax	# cfun, cfun.795
	testq	%rax, %rax	# cfun.795
	jne	.L1699	#,
	.loc 1 8574 0
	movq	-952(%rbp), %rax	# exp, tmp3651
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2266->common.code, D.25922
	cmpb	$46, %al	#, D.25922
	je	.L1700	#,
	.loc 1 8575 0
	movq	-952(%rbp), %rax	# exp, tmp3652
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2268->common.code, D.25922
	movzbl	%al, %eax	# D.25922, D.25929
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.25926
	cmpb	$99, %al	#, D.25926
	jne	.L1699	#,
.L1700:
	.loc 1 8577 0
	movq	-952(%rbp), %rax	# exp, tmp3654
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	output_constant_def	#
	movq	8(%rax), %rax	# _2273->fld[0].rtx, tmp3655
	movq	%rax, -832(%rbp)	# tmp3655, op0
	jmp	.L1697	#
.L1699:
	.loc 1 8582 0
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1701	#,
	.loc 1 8582 0 is_stmt 0 discriminator 1
	movl	$3, %edx	#, iftmp.796
	jmp	.L1702	#
.L1701:
	.loc 1 8582 0 discriminator 2
	movl	$2, %edx	#, iftmp.796
.L1702:
	.loc 1 8582 0 discriminator 3
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1703	#,
	.loc 1 8582 0 discriminator 4
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.797
	jmp	.L1704	#
.L1703:
	.loc 1 8582 0 discriminator 5
	movl	$0, %eax	#, iftmp.797
.L1704:
	.loc 1 8582 0 discriminator 6
	movq	-952(%rbp), %rcx	# exp, tmp3656
	movq	32(%rcx), %rdi	# exp_194(D)->exp.operands, D.25927
	movl	%edx, %ecx	# iftmp.796,
	movl	$0, %edx	#,
	movq	%rax, %rsi	# iftmp.797,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3657, op0
	.loc 1 8590 0 is_stmt 1 discriminator 6
	cmpl	$0, -908(%rbp)	#, ignore
	je	.L1705	#,
	.loc 1 8591 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1705:
	.loc 1 8595 0
	movq	-832(%rbp), %rax	# op0, tmp3658
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp3658,
	call	protect_from_queue	#
	movq	%rax, -832(%rbp)	# tmp3659, op0
	.loc 1 8601 0
	movq	-832(%rbp), %rax	# op0, tmp3660
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$67, %ax	#, D.25925
	je	.L1706	#,
	.loc 1 8601 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp3661
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$68, %ax	#, D.25925
	je	.L1706	#,
	movq	-832(%rbp), %rax	# op0, tmp3662
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$54, %ax	#, D.25925
	je	.L1706	#,
	movq	-832(%rbp), %rax	# op0, tmp3663
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$55, %ax	#, D.25925
	je	.L1706	#,
	movq	-832(%rbp), %rax	# op0, tmp3664
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$58, %ax	#, D.25925
	je	.L1706	#,
	movq	-832(%rbp), %rax	# op0, tmp3665
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$134, %ax	#, D.25925
	je	.L1706	#,
	movq	-832(%rbp), %rax	# op0, tmp3666
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$56, %ax	#, D.25925
	je	.L1706	#,
	movq	-832(%rbp), %rax	# op0, tmp3667
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$140, %ax	#, D.25925
	jne	.L1707	#,
.L1706:
	.loc 1 8602 0 is_stmt 1
	movq	-952(%rbp), %rax	# exp, tmp3668
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _2308->common.type, D.25927
	movzbl	61(%rax), %eax	# *_2309, tmp3671
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, D.25931
	movq	-832(%rbp), %rdx	# op0, tmp3672
	movq	%rdx, %rsi	# tmp3672,
	movl	%eax, %edi	# D.25931,
	call	force_const_mem	#
	movq	%rax, -832(%rbp)	# tmp3673, op0
	jmp	.L1708	#
.L1707:
	.loc 1 8604 0
	movq	-832(%rbp), %rax	# op0, tmp3674
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$61, %ax	#, D.25925
	je	.L1709	#,
	.loc 1 8604 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp3675
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$63, %ax	#, D.25925
	je	.L1709	#,
	.loc 1 8605 0 is_stmt 1
	movq	-832(%rbp), %rax	# op0, tmp3676
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$65, %ax	#, D.25925
	je	.L1709	#,
	.loc 1 8605 0 is_stmt 0 discriminator 1
	movq	-832(%rbp), %rax	# op0, tmp3677
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$70, %ax	#, D.25925
	je	.L1709	#,
	.loc 1 8606 0 is_stmt 1
	movq	-832(%rbp), %rax	# op0, tmp3678
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$39, %ax	#, D.25925
	jne	.L1708	#,
.L1709:
	.loc 1 8610 0
	movq	-952(%rbp), %rax	# exp, tmp3679
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movzbl	16(%rax), %eax	# _2296->common.code, D.25922
	cmpb	$118, %al	#, D.25922
	jne	.L1710	#,
	.loc 1 8612 0
	movq	-952(%rbp), %rax	# exp, tmp3680
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	%rax, %rdi	# D.25927,
	call	put_var_into_stack	#
	.loc 1 8613 0
	movq	-952(%rbp), %rax	# exp, tmp3681
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	48(%rax), %rax	# _2299->exp.operands, tmp3682
	movq	%rax, -832(%rbp)	# tmp3682, op0
	jmp	.L1708	#
.L1710:
.LBB142:
	.loc 1 8618 0
	movq	-952(%rbp), %rax	# exp, tmp3683
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	8(%rax), %rax	# _2301->common.type, tmp3684
	movq	%rax, -136(%rbp)	# tmp3684, inner_type
	.loc 1 8619 0
	movq	-136(%rbp), %rax	# inner_type, tmp3685
	movl	$1, %ecx	#,
	movl	$1, %edx	#,
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp3685,
	call	assign_temp	#
	movq	%rax, -128(%rbp)	# tmp3686, memloc
	.loc 1 8621 0
	movq	-832(%rbp), %rax	# op0, tmp3687
	movzwl	(%rax), %eax	# op0_2282->code, D.25925
	cmpw	$39, %ax	#, D.25925
	jne	.L1711	#,
	.loc 1 8626 0
	movq	-136(%rbp), %rax	# inner_type, tmp3688
	movq	%rax, %rdi	# tmp3688,
	call	int_size_in_bytes	#
	.loc 1 8625 0
	movl	%eax, %edx	# D.25934, D.25929
	movq	-832(%rbp), %rcx	# op0, tmp3689
	movq	-128(%rbp), %rax	# memloc, tmp3690
	movq	%rcx, %rsi	# tmp3689,
	movq	%rax, %rdi	# tmp3690,
	call	emit_group_store	#
	jmp	.L1712	#
.L1711:
	.loc 1 8628 0
	movq	-832(%rbp), %rdx	# op0, tmp3691
	movq	-128(%rbp), %rax	# memloc, tmp3692
	movq	%rdx, %rsi	# tmp3691,
	movq	%rax, %rdi	# tmp3692,
	call	emit_move_insn	#
.L1712:
	.loc 1 8630 0
	movq	-128(%rbp), %rax	# memloc, tmp3693
	movq	%rax, -832(%rbp)	# tmp3693, op0
.L1708:
.LBE142:
	.loc 1 8634 0
	movq	-832(%rbp), %rax	# op0, tmp3694
	movzwl	(%rax), %eax	# op0_45->code, D.25925
	cmpw	$66, %ax	#, D.25925
	je	.L1713	#,
	.loc 1 8635 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$8635, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1713:
	.loc 1 8637 0
	movq	-832(%rbp), %rax	# op0, tmp3695
	movq	%rax, %rdi	# tmp3695,
	call	mark_temp_addr_taken	#
	.loc 1 8638 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1714	#,
	.loc 1 8638 0 is_stmt 0 discriminator 1
	cmpl	$3, -968(%rbp)	#, modifier
	jne	.L1715	#,
.L1714:
	.loc 1 8640 0 is_stmt 1
	movq	-832(%rbp), %rax	# op0, tmp3696
	movq	8(%rax), %rax	# op0_45->fld[0].rtx, tmp3697
	movq	%rax, -832(%rbp)	# tmp3697, op0
	.loc 1 8646 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1715:
	.loc 1 8681 0
	movq	-832(%rbp), %rax	# op0, tmp3698
	movq	8(%rax), %rax	# op0_45->fld[0].rtx, D.25924
	movq	-960(%rbp), %rdx	# target, tmp3699
	movq	%rdx, %rsi	# tmp3699,
	movq	%rax, %rdi	# D.25924,
	call	force_operand	#
	movq	%rax, -832(%rbp)	# tmp3700, op0
.L1697:
	.loc 1 8684 0
	movl	flag_force_addr(%rip), %eax	# flag_force_addr, flag_force_addr.804
	testl	%eax, %eax	# flag_force_addr.804
	je	.L1716	#,
	.loc 1 8685 0
	movq	-832(%rbp), %rax	# op0, tmp3701
	movzwl	(%rax), %eax	# op0_46->code, D.25925
	cmpw	$61, %ax	#, D.25925
	je	.L1716	#,
	.loc 1 8686 0
	cmpl	$2, -968(%rbp)	#, modifier
	je	.L1716	#,
	.loc 1 8687 0
	cmpl	$3, -968(%rbp)	#, modifier
	je	.L1716	#,
	.loc 1 8688 0
	cmpl	$1, -968(%rbp)	#, modifier
	je	.L1716	#,
	.loc 1 8689 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.806
	andl	$33554432, %eax	#, D.25929
	testl	%eax, %eax	# D.25929
	je	.L1717	#,
	.loc 1 8689 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.805
	jmp	.L1718	#
.L1717:
	.loc 1 8689 0 discriminator 2
	movl	$4, %eax	#, iftmp.805
.L1718:
	.loc 1 8689 0 discriminator 3
	movq	-832(%rbp), %rdx	# op0, tmp3702
	movq	%rdx, %rsi	# tmp3702,
	movl	%eax, %edi	# iftmp.805,
	call	force_reg	#
	movq	%rax, -832(%rbp)	# tmp3703, op0
.L1716:
	.loc 1 8691 0 is_stmt 1
	movq	-832(%rbp), %rax	# op0, tmp3704
	movzwl	(%rax), %eax	# op0_47->code, D.25925
	cmpw	$61, %ax	#, D.25925
	jne	.L1719	#,
	.loc 1 8692 0
	movq	-832(%rbp), %rax	# op0, tmp3705
	movzbl	3(%rax), %eax	# *op0_47, D.25922
	andl	$8, %eax	#, D.25922
	testb	%al, %al	# D.25922
	jne	.L1719	#,
	.loc 1 8693 0
	movq	-648(%rbp), %rax	# type, tmp3706
	movq	8(%rax), %rax	# type_195->common.type, D.25927
	movl	64(%rax), %eax	# _2328->type.align, D.25928
	movl	%eax, %edx	# D.25928, D.25929
	movq	-832(%rbp), %rax	# op0, tmp3707
	movl	%edx, %esi	# D.25929,
	movq	%rax, %rdi	# tmp3707,
	call	mark_reg_pointer	#
.L1719:
	.loc 1 8701 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1212:
	.loc 1 8704 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$8704, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1214:
.LBB143:
	.loc 1 8709 0
	movq	-952(%rbp), %rax	# exp, tmp3708
	movq	8(%rax), %rax	# exp_194(D)->common.type, D.25927
	movq	8(%rax), %rax	# _2332->common.type, D.25927
	movzbl	61(%rax), %eax	# *_2333, tmp3711
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, tmp3712
	movl	%eax, -864(%rbp)	# tmp3712, mode
	.loc 1 8713 0
	movq	-952(%rbp), %rax	# exp, tmp3713
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3714, op0
	.loc 1 8714 0
	movq	-952(%rbp), %rax	# exp, tmp3715
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp3716, op1
	.loc 1 8716 0
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1720	#,
	.loc 1 8717 0
	movq	-952(%rbp), %rax	# exp, tmp3717
	movq	8(%rax), %rax	# exp_194(D)->common.type, D.25927
	movzbl	61(%rax), %eax	# *_2340, tmp3720
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, D.25931
	movl	%eax, %edi	# D.25931,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp3721, target
.L1720:
	.loc 1 8719 0
	call	start_sequence	#
	.loc 1 8722 0
	movq	-960(%rbp), %rdx	# target, tmp3722
	movl	-864(%rbp), %eax	# mode, tmp3723
	movq	%rdx, %rsi	# tmp3722,
	movl	%eax, %edi	# tmp3723,
	call	gen_realpart	#
	movq	-832(%rbp), %rdx	# op0, tmp3724
	movq	%rdx, %rsi	# tmp3724,
	movq	%rax, %rdi	# D.25924,
	call	emit_move_insn	#
	.loc 1 8723 0
	movq	-960(%rbp), %rdx	# target, tmp3725
	movl	-864(%rbp), %eax	# mode, tmp3726
	movq	%rdx, %rsi	# tmp3725,
	movl	%eax, %edi	# tmp3726,
	call	gen_imagpart	#
	movq	-824(%rbp), %rdx	# op1, tmp3727
	movq	%rdx, %rsi	# tmp3727,
	movq	%rax, %rdi	# D.25924,
	call	emit_move_insn	#
	.loc 1 8725 0
	call	get_insns	#
	movq	%rax, -120(%rbp)	# tmp3728, insns
	.loc 1 8726 0
	call	end_sequence	#
	.loc 1 8732 0
	movq	-960(%rbp), %rax	# target, tmp3729
	movzwl	(%rax), %eax	# target_21->code, D.25925
	cmpw	$65, %ax	#, D.25925
	je	.L1721	#,
	.loc 1 8733 0
	movq	-824(%rbp), %rcx	# op1, tmp3730
	movq	-832(%rbp), %rdx	# op0, tmp3731
	movq	-960(%rbp), %rsi	# target, tmp3732
	movq	-120(%rbp), %rax	# insns, tmp3733
	movl	$0, %r8d	#,
	movq	%rax, %rdi	# tmp3733,
	call	emit_no_conflict_block	#
	jmp	.L1722	#
.L1721:
	.loc 1 8735 0
	movq	-120(%rbp), %rax	# insns, tmp3734
	movq	%rax, %rdi	# tmp3734,
	call	emit_insns	#
.L1722:
	.loc 1 8737 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1216:
.LBE143:
	.loc 1 8741 0
	movq	-952(%rbp), %rax	# exp, tmp3735
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3736, op0
	.loc 1 8742 0
	movq	-832(%rbp), %rdx	# op0, tmp3737
	movl	-912(%rbp), %eax	# mode, tmp3738
	movq	%rdx, %rsi	# tmp3737,
	movl	%eax, %edi	# tmp3738,
	call	gen_realpart	#
	jmp	.L1735	#
.L1217:
	.loc 1 8745 0
	movq	-952(%rbp), %rax	# exp, tmp3739
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3740, op0
	.loc 1 8746 0
	movq	-832(%rbp), %rdx	# op0, tmp3741
	movl	-912(%rbp), %eax	# mode, tmp3742
	movq	%rdx, %rsi	# tmp3741,
	movl	%eax, %edi	# tmp3742,
	call	gen_imagpart	#
	jmp	.L1735	#
.L1215:
.LBB144:
	.loc 1 8750 0
	movq	-952(%rbp), %rax	# exp, tmp3743
	movq	8(%rax), %rax	# exp_194(D)->common.type, D.25927
	movq	8(%rax), %rax	# _2355->common.type, D.25927
	movzbl	61(%rax), %eax	# *_2356, tmp3746
	shrb	%al	# D.25923
	movzbl	%al, %eax	# D.25923, tmp3747
	movl	%eax, -860(%rbp)	# tmp3747, partmode
	.loc 1 8754 0
	movq	-952(%rbp), %rax	# exp, tmp3748
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3749, op0
	.loc 1 8756 0
	cmpq	$0, -960(%rbp)	#, target
	jne	.L1723	#,
	.loc 1 8757 0
	movl	-912(%rbp), %eax	# mode, tmp3750
	movl	%eax, %edi	# tmp3750,
	call	gen_reg_rtx	#
	movq	%rax, -960(%rbp)	# tmp3751, target
.L1723:
	.loc 1 8759 0
	call	start_sequence	#
	.loc 1 8762 0
	movq	-832(%rbp), %rdx	# op0, tmp3752
	movl	-860(%rbp), %eax	# partmode, tmp3753
	movq	%rdx, %rsi	# tmp3752,
	movl	%eax, %edi	# tmp3753,
	call	gen_realpart	#
	movq	%rax, %rbx	#, D.25924
	movq	-960(%rbp), %rdx	# target, tmp3754
	movl	-860(%rbp), %eax	# partmode, tmp3755
	movq	%rdx, %rsi	# tmp3754,
	movl	%eax, %edi	# tmp3755,
	call	gen_realpart	#
	movq	%rbx, %rsi	# D.25924,
	movq	%rax, %rdi	# D.25924,
	call	emit_move_insn	#
	.loc 1 8765 0
	movq	-960(%rbp), %rdx	# target, tmp3756
	movl	-860(%rbp), %eax	# partmode, tmp3757
	movq	%rdx, %rsi	# tmp3756,
	movl	%eax, %edi	# tmp3757,
	call	gen_imagpart	#
	movq	%rax, -112(%rbp)	# tmp3758, imag_t
	.loc 1 8766 0
	movq	-832(%rbp), %rdx	# op0, tmp3759
	movl	-860(%rbp), %eax	# partmode, tmp3760
	movq	%rdx, %rsi	# tmp3759,
	movl	%eax, %edi	# tmp3760,
	call	gen_imagpart	#
	movq	%rax, %rdx	#, D.25924
	.loc 1 8767 0
	movl	-936(%rbp), %eax	# unsignedp, unsignedp.808
	.loc 1 8766 0
	testl	%eax, %eax	# unsignedp.808
	jne	.L1724	#,
	.loc 1 8767 0
	movl	flag_trapv(%rip), %eax	# flag_trapv, flag_trapv.809
	testl	%eax, %eax	# flag_trapv.809
	je	.L1724	#,
	.loc 1 8768 0
	movl	-860(%rbp), %eax	# partmode, partmode.810
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25937
	cmpl	$1, %eax	#, D.25937
	jne	.L1724	#,
	.loc 1 8766 0
	movq	optab_table+264(%rip), %rax	# optab_table, iftmp.807
	jmp	.L1725	#
.L1724:
	.loc 1 8766 0 is_stmt 0 discriminator 1
	movq	optab_table+256(%rip), %rax	# optab_table, iftmp.807
.L1725:
	.loc 1 8766 0 discriminator 2
	movq	-112(%rbp), %rcx	# imag_t, tmp3762
	movl	-860(%rbp), %edi	# partmode, tmp3763
	movl	$0, %r8d	#,
	movq	%rax, %rsi	# iftmp.807,
	call	expand_unop	#
	movq	%rax, -816(%rbp)	# tmp3764, temp
	.loc 1 8771 0 is_stmt 1 discriminator 2
	movq	-816(%rbp), %rax	# temp, tmp3765
	cmpq	-112(%rbp), %rax	# imag_t, tmp3765
	je	.L1726	#,
	.loc 1 8772 0
	movq	-816(%rbp), %rdx	# temp, tmp3766
	movq	-112(%rbp), %rax	# imag_t, tmp3767
	movq	%rdx, %rsi	# tmp3766,
	movq	%rax, %rdi	# tmp3767,
	call	emit_move_insn	#
.L1726:
	.loc 1 8774 0
	call	get_insns	#
	movq	%rax, -104(%rbp)	# tmp3768, insns
	.loc 1 8775 0
	call	end_sequence	#
	.loc 1 8781 0
	movq	-960(%rbp), %rax	# target, tmp3769
	movzwl	(%rax), %eax	# target_22->code, D.25925
	cmpw	$65, %ax	#, D.25925
	je	.L1727	#,
	.loc 1 8782 0
	movq	-832(%rbp), %rdx	# op0, tmp3770
	movq	-960(%rbp), %rsi	# target, tmp3771
	movq	-104(%rbp), %rax	# insns, tmp3772
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp3772,
	call	emit_no_conflict_block	#
	jmp	.L1728	#
.L1727:
	.loc 1 8784 0
	movq	-104(%rbp), %rax	# insns, tmp3773
	movq	%rax, %rdi	# tmp3773,
	call	emit_insns	#
.L1728:
	.loc 1 8786 0
	movq	-960(%rbp), %rax	# target, D.25920
	jmp	.L1735	#
.L1221:
.LBE144:
.LBB145:
	.loc 1 8791 0
	movq	-952(%rbp), %rax	# exp, tmp3774
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp3775
	movq	%rax, -96(%rbp)	# tmp3775, handler
	.loc 1 8793 0
	call	expand_eh_region_start	#
	.loc 1 8795 0
	movq	-952(%rbp), %rax	# exp, tmp3776
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3777, op0
	.loc 1 8797 0
	movq	-96(%rbp), %rax	# handler, tmp3778
	movq	%rax, %rdi	# tmp3778,
	call	expand_eh_region_end_cleanup	#
	.loc 1 8799 0
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1222:
.LBE145:
.LBB146:
	.loc 1 8804 0
	movq	-952(%rbp), %rax	# exp, tmp3779
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, tmp3780
	movq	%rax, -88(%rbp)	# tmp3780, try_block
	.loc 1 8805 0
	movq	-952(%rbp), %rax	# exp, tmp3781
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp3782
	movq	%rax, -80(%rbp)	# tmp3782, finally_block
	.loc 1 8806 0
	call	gen_label_rtx	#
	movq	%rax, -72(%rbp)	# tmp3783, finally_label
	.loc 1 8807 0
	call	gen_label_rtx	#
	movq	%rax, -64(%rbp)	# tmp3784, done_label
	.loc 1 8808 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.812
	andl	$33554432, %eax	#, D.25929
	testl	%eax, %eax	# D.25929
	je	.L1729	#,
	.loc 1 8808 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.811
	jmp	.L1730	#
.L1729:
	.loc 1 8808 0 discriminator 2
	movl	$4, %eax	#, iftmp.811
.L1730:
	.loc 1 8808 0 discriminator 3
	movl	%eax, %edi	# iftmp.811,
	call	gen_reg_rtx	#
	movq	%rax, -56(%rbp)	# tmp3785, return_link
	.loc 1 8809 0 is_stmt 1 discriminator 3
	movq	global_trees+216(%rip), %rax	# global_trees, D.25927
	movq	-56(%rbp), %rcx	# return_link, tmp3786
	movq	-72(%rbp), %rdx	# finally_label, tmp3787
	movq	%rax, %rsi	# D.25927,
	movl	$136, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -48(%rbp)	# tmp3788, cleanup
	.loc 1 8811 0 discriminator 3
	movq	-48(%rbp), %rax	# cleanup, tmp3789
	movzbl	17(%rax), %edx	#, tmp3792
	orl	$1, %edx	#, tmp3793
	movb	%dl, 17(%rax)	# tmp3793,
	.loc 1 8815 0 discriminator 3
	movl	$0, %esi	#,
	movl	$2, %edi	#,
	call	expand_start_bindings_and_block	#
	.loc 1 8817 0 discriminator 3
	movq	cfun(%rip), %rax	# cfun, cfun.813
	movq	cfun(%rip), %rdx	# cfun, cfun.814
	movl	328(%rdx), %edx	# cfun.814_2392->x_temp_slot_level, D.25929
	movl	%edx, 336(%rax)	# D.25929, cfun.813_2391->x_target_temp_slot_level
	.loc 1 8819 0 discriminator 3
	movq	-48(%rbp), %rax	# cleanup, tmp3794
	movq	%rax, %rsi	# tmp3794,
	movl	$0, %edi	#,
	call	expand_decl_cleanup	#
	.loc 1 8820 0 discriminator 3
	movl	-968(%rbp), %ecx	# modifier, tmp3795
	movl	-964(%rbp), %edx	# tmode, tmp3796
	movq	-960(%rbp), %rsi	# target, tmp3797
	movq	-88(%rbp), %rax	# try_block, tmp3798
	movq	%rax, %rdi	# tmp3798,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3799, op0
	.loc 1 8822 0 discriminator 3
	movq	-832(%rbp), %rax	# op0, tmp3800
	movq	%rax, %rdi	# tmp3800,
	call	preserve_temp_slots	#
	.loc 1 8823 0 discriminator 3
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$0, %edi	#,
	call	expand_end_bindings	#
	.loc 1 8824 0 discriminator 3
	movq	-64(%rbp), %rax	# done_label, tmp3801
	movq	%rax, %rdi	# tmp3801,
	call	emit_jump	#
	.loc 1 8825 0 discriminator 3
	movq	-72(%rbp), %rax	# finally_label, tmp3802
	movq	%rax, %rdi	# tmp3802,
	call	emit_label	#
	.loc 1 8826 0 discriminator 3
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25924
	movq	-80(%rbp), %rax	# finally_block, tmp3803
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp3803,
	call	expand_expr	#
	.loc 1 8827 0 discriminator 3
	movq	-56(%rbp), %rax	# return_link, tmp3804
	movq	%rax, %rdi	# tmp3804,
	call	emit_indirect_jump	#
	.loc 1 8828 0 discriminator 3
	movq	-64(%rbp), %rax	# done_label, tmp3805
	movq	%rax, %rdi	# tmp3805,
	call	emit_label	#
	.loc 1 8829 0 discriminator 3
	movq	-832(%rbp), %rax	# op0, D.25920
	jmp	.L1735	#
.L1223:
.LBE146:
.LBB147:
	.loc 1 8834 0
	movq	-952(%rbp), %rax	# exp, tmp3806
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, tmp3807
	movq	%rax, -40(%rbp)	# tmp3807, subr
	.loc 1 8835 0
	movq	-952(%rbp), %rax	# exp, tmp3808
	movq	40(%rax), %rax	# exp_194(D)->exp.operands, tmp3809
	movq	%rax, -32(%rbp)	# tmp3809, return_link
	.loc 1 8836 0
	call	gen_label_rtx	#
	movq	%rax, -24(%rbp)	# tmp3810, return_address
	.loc 1 8838 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.816
	andl	$33554432, %eax	#, D.25929
	.loc 1 8837 0
	testl	%eax, %eax	# D.25929
	je	.L1731	#,
	.loc 1 8837 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.815
	jmp	.L1732	#
.L1731:
	.loc 1 8837 0 discriminator 2
	movl	$4, %eax	#, iftmp.815
.L1732:
	.loc 1 8837 0 discriminator 3
	movq	-24(%rbp), %rdx	# return_address, tmp3811
	movl	%eax, %esi	# iftmp.815,
	movl	$67, %edi	#,
	call	gen_rtx_fmt_u00	#
	movq	%rax, %rdx	#, D.25924
	movq	-32(%rbp), %rax	# return_link, tmp3812
	movq	%rdx, %rsi	# D.25924,
	movq	%rax, %rdi	# tmp3812,
	call	emit_move_insn	#
	.loc 1 8839 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rax	# subr, tmp3813
	movq	%rax, %rdi	# tmp3813,
	call	emit_jump	#
	.loc 1 8840 0 discriminator 3
	movq	-24(%rbp), %rax	# return_address, tmp3814
	movq	%rax, %rdi	# tmp3814,
	call	emit_label	#
	.loc 1 8841 0 discriminator 3
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25920
	jmp	.L1735	#
.L1220:
.LBE147:
	.loc 1 8845 0
	movq	-952(%rbp), %rax	# exp, tmp3815
	movq	32(%rax), %rax	# exp_194(D)->exp.operands, D.25927
	movq	-648(%rbp), %rdx	# type, tmp3816
	movq	%rdx, %rsi	# tmp3816,
	movq	%rax, %rdi	# D.25927,
	call	expand_builtin_va_arg	#
	jmp	.L1735	#
.L1231:
	.loc 1 8848 0
	movq	cfun(%rip), %rax	# cfun, cfun.817
	movq	%rax, %rdi	# cfun.817,
	call	get_exception_pointer	#
	jmp	.L1735	#
.L1213:
	.loc 1 8853 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$8853, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1157:
	.loc 1 8856 0
	movq	lang_expand_expr(%rip), %rax	# lang_expand_expr, lang_expand_expr.818
	movl	-968(%rbp), %ecx	# modifier, tmp3817
	movl	-964(%rbp), %edx	# tmode, tmp3818
	movq	-640(%rbp), %rsi	# original_target, tmp3819
	movq	-952(%rbp), %rdi	# exp, tmp3820
	call	*%rax	# lang_expand_expr.818
	jmp	.L1735	#
.L1511:
	.loc 1 8862 0
	movq	-952(%rbp), %rax	# exp, tmp3821
	movq	40(%rax), %rcx	# exp_2->exp.operands, D.25927
	movq	-800(%rbp), %rax	# subtarget, tmp3822
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# D.25927,
	movq	%rax, %rdi	# tmp3822,
	call	safe_from_p	#
	testl	%eax, %eax	# D.25929
	jne	.L1733	#,
	.loc 1 8863 0
	movq	$0, -800(%rbp)	#, subtarget
.L1733:
	.loc 1 8864 0
	movq	-952(%rbp), %rax	# exp, tmp3823
	movq	32(%rax), %rax	# exp_2->exp.operands, D.25927
	movq	-800(%rbp), %rsi	# subtarget, tmp3824
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -832(%rbp)	# tmp3825, op0
	.loc 1 8865 0
	movq	-952(%rbp), %rax	# exp, tmp3826
	movq	40(%rax), %rax	# exp_2->exp.operands, D.25927
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25927,
	call	expand_expr	#
	movq	%rax, -824(%rbp)	# tmp3827, op1
.L1507:
	.loc 1 8867 0
	movl	-936(%rbp), %r8d	# unsignedp, unsignedp.819
	movq	-960(%rbp), %rdi	# target, tmp3828
	movq	-824(%rbp), %rcx	# op1, tmp3829
	movq	-832(%rbp), %rdx	# op0, tmp3830
	movq	-808(%rbp), %rsi	# this_optab, tmp3831
	movl	-912(%rbp), %eax	# mode, tmp3832
	movl	$3, (%rsp)	#,
	movl	%r8d, %r9d	# unsignedp.819,
	movq	%rdi, %r8	# tmp3828,
	movl	%eax, %edi	# tmp3832,
	call	expand_binop	#
	movq	%rax, -816(%rbp)	# tmp3833, temp
	.loc 1 8869 0
	cmpq	$0, -816(%rbp)	#, temp
	jne	.L1734	#,
	.loc 1 8870 0
	movl	$__FUNCTION__.15048, %edx	#,
	movl	$8870, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1734:
	.loc 1 8871 0
	movq	-816(%rbp), %rax	# temp, D.25920
.L1735:
	.loc 1 8872 0
	addq	$976, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE54:
	.size	expand_expr, .-expand_expr
	.type	is_aligning_offset, @function
is_aligning_offset:
.LFB55:
	.loc 1 8882 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# offset, offset
	movq	%rsi, -16(%rbp)	# exp, exp
	.loc 1 8884 0
	jmp	.L1737	#
.L1738:
	.loc 1 8888 0
	movq	-8(%rbp), %rax	# offset, tmp89
	movq	32(%rax), %rax	# offset_1->exp.operands, tmp90
	movq	%rax, -8(%rbp)	# tmp90, offset
.L1737:
	.loc 1 8884 0 discriminator 1
	movq	-8(%rbp), %rax	# offset, tmp91
	movzbl	16(%rax), %eax	# offset_1->common.code, D.25951
	cmpb	$116, %al	#, D.25951
	je	.L1738	#,
	.loc 1 8885 0
	movq	-8(%rbp), %rax	# offset, tmp92
	movzbl	16(%rax), %eax	# offset_1->common.code, D.25951
	cmpb	$115, %al	#, D.25951
	je	.L1738	#,
	.loc 1 8886 0
	movq	-8(%rbp), %rax	# offset, tmp93
	movzbl	16(%rax), %eax	# offset_1->common.code, D.25951
	cmpb	$114, %al	#, D.25951
	je	.L1738	#,
	.loc 1 8887 0
	movq	-8(%rbp), %rax	# offset, tmp94
	movzbl	16(%rax), %eax	# offset_1->common.code, D.25951
	cmpb	$58, %al	#, D.25951
	je	.L1738	#,
	.loc 1 8892 0
	movq	-8(%rbp), %rax	# offset, tmp95
	movzbl	16(%rax), %eax	# offset_1->common.code, D.25951
	cmpb	$88, %al	#, D.25951
	jne	.L1739	#,
	.loc 1 8893 0
	movq	-8(%rbp), %rax	# offset, tmp96
	movq	40(%rax), %rax	# offset_1->exp.operands, D.25952
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25952,
	call	host_integerp	#
	testl	%eax, %eax	# D.25950
	je	.L1739	#,
	.loc 1 8894 0
	movq	-8(%rbp), %rax	# offset, tmp97
	movq	40(%rax), %rax	# offset_1->exp.operands, D.25952
	movl	$128, %esi	#,
	movq	%rax, %rdi	# D.25952,
	call	compare_tree_int	#
	testl	%eax, %eax	# D.25950
	jle	.L1739	#,
	.loc 1 8895 0
	movq	-8(%rbp), %rax	# offset, tmp98
	movq	40(%rax), %rax	# offset_1->exp.operands, D.25952
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.25952,
	call	tree_low_cst	#
	addq	$1, %rax	#, D.25953
	movq	%rax, %rdi	# D.25954,
	call	exact_log2_wide	#
	.loc 1 8900 0
	movq	-8(%rbp), %rax	# offset, tmp99
	movq	32(%rax), %rax	# offset_1->exp.operands, tmp100
	movq	%rax, -8(%rbp)	# tmp100, offset
	.loc 1 8901 0
	jmp	.L1742	#
.L1739:
	.loc 1 8896 0
	movl	$0, %eax	#, D.25950
	jmp	.L1741	#
.L1743:
	.loc 1 8904 0
	movq	-8(%rbp), %rax	# offset, tmp101
	movq	32(%rax), %rax	# offset_2->exp.operands, tmp102
	movq	%rax, -8(%rbp)	# tmp102, offset
.L1742:
	.loc 1 8901 0 discriminator 1
	movq	-8(%rbp), %rax	# offset, tmp103
	movzbl	16(%rax), %eax	# offset_2->common.code, D.25951
	cmpb	$116, %al	#, D.25951
	je	.L1743	#,
	.loc 1 8902 0
	movq	-8(%rbp), %rax	# offset, tmp104
	movzbl	16(%rax), %eax	# offset_2->common.code, D.25951
	cmpb	$115, %al	#, D.25951
	je	.L1743	#,
	.loc 1 8903 0
	movq	-8(%rbp), %rax	# offset, tmp105
	movzbl	16(%rax), %eax	# offset_2->common.code, D.25951
	cmpb	$114, %al	#, D.25951
	je	.L1743	#,
	.loc 1 8906 0
	movq	-8(%rbp), %rax	# offset, tmp106
	movzbl	16(%rax), %eax	# offset_2->common.code, D.25951
	cmpb	$77, %al	#, D.25951
	je	.L1744	#,
	.loc 1 8907 0
	movl	$0, %eax	#, D.25950
	jmp	.L1741	#
.L1744:
	.loc 1 8909 0
	movq	-8(%rbp), %rax	# offset, tmp107
	movq	32(%rax), %rax	# offset_2->exp.operands, tmp108
	movq	%rax, -8(%rbp)	# tmp108, offset
	.loc 1 8910 0
	jmp	.L1745	#
.L1746:
	.loc 1 8913 0
	movq	-8(%rbp), %rax	# offset, tmp109
	movq	32(%rax), %rax	# offset_3->exp.operands, tmp110
	movq	%rax, -8(%rbp)	# tmp110, offset
.L1745:
	.loc 1 8910 0 discriminator 1
	movq	-8(%rbp), %rax	# offset, tmp111
	movzbl	16(%rax), %eax	# offset_3->common.code, D.25951
	cmpb	$116, %al	#, D.25951
	je	.L1746	#,
	.loc 1 8911 0
	movq	-8(%rbp), %rax	# offset, tmp112
	movzbl	16(%rax), %eax	# offset_3->common.code, D.25951
	cmpb	$115, %al	#, D.25951
	je	.L1746	#,
	.loc 1 8912 0
	movq	-8(%rbp), %rax	# offset, tmp113
	movzbl	16(%rax), %eax	# offset_3->common.code, D.25951
	cmpb	$114, %al	#, D.25951
	je	.L1746	#,
	.loc 1 8917 0
	movq	-8(%rbp), %rax	# offset, tmp114
	movzbl	16(%rax), %eax	# offset_3->common.code, D.25951
	.loc 1 8918 0
	cmpb	$121, %al	#, D.25951
	jne	.L1747	#,
	.loc 1 8918 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# offset, tmp115
	movq	32(%rax), %rax	# offset_3->exp.operands, D.25952
	cmpq	-16(%rbp), %rax	# exp, D.25952
	je	.L1748	#,
	.loc 1 8919 0 is_stmt 1
	movq	-8(%rbp), %rax	# offset, tmp116
	movq	32(%rax), %rax	# offset_3->exp.operands, D.25952
	movzbl	16(%rax), %eax	# _33->common.code, D.25951
	cmpb	$57, %al	#, D.25951
	jne	.L1747	#,
	.loc 1 8920 0
	movq	-8(%rbp), %rax	# offset, tmp117
	movq	32(%rax), %rax	# offset_3->exp.operands, D.25952
	movq	8(%rax), %rdx	# _35->common.type, D.25952
	.loc 1 8921 0
	movq	-16(%rbp), %rax	# exp, tmp118
	movq	8(%rax), %rax	# exp_32(D)->common.type, D.25952
	.loc 1 8920 0
	cmpq	%rax, %rdx	# D.25952, D.25952
	jne	.L1747	#,
.L1748:
	.loc 1 8918 0 discriminator 3
	movl	$1, %eax	#, iftmp.820
	jmp	.L1749	#
.L1747:
	.loc 1 8918 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.820
.L1749:
.L1741:
	.loc 1 8922 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE55:
	.size	is_aligning_offset, .-is_aligning_offset
	.globl	string_constant
	.type	string_constant, @function
string_constant:
.LFB56:
	.loc 1 8933 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# arg, arg
	movq	%rsi, -32(%rbp)	# ptr_offset, ptr_offset
	.loc 1 8934 0
	jmp	.L1751	#
.L1754:
	.loc 1 8934 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# arg, tmp106
	movq	32(%rax), %rax	# arg_1->exp.operands, tmp107
	movq	%rax, -24(%rbp)	# tmp107, arg
.L1751:
	movq	-24(%rbp), %rax	# arg, tmp108
	movzbl	16(%rax), %eax	# arg_1->common.code, D.25956
	cmpb	$115, %al	#, D.25956
	je	.L1752	#,
	.loc 1 8934 0 discriminator 3
	movq	-24(%rbp), %rax	# arg, tmp109
	movzbl	16(%rax), %eax	# arg_1->common.code, D.25956
	cmpb	$114, %al	#, D.25956
	je	.L1752	#,
	.loc 1 8934 0 discriminator 1
	movq	-24(%rbp), %rax	# arg, tmp110
	movzbl	16(%rax), %eax	# arg_1->common.code, D.25956
	cmpb	$116, %al	#, D.25956
	jne	.L1753	#,
.L1752:
	.loc 1 8934 0 discriminator 2
	movq	-24(%rbp), %rax	# arg, tmp111
	movq	32(%rax), %rdx	# arg_1->exp.operands, D.25957
	movq	global_trees(%rip), %rax	# global_trees, D.25957
	cmpq	%rax, %rdx	# D.25957, D.25957
	je	.L1753	#,
	.loc 1 8934 0 discriminator 1
	movq	-24(%rbp), %rax	# arg, tmp112
	movq	8(%rax), %rax	# arg_1->common.type, D.25957
	movzbl	61(%rax), %eax	# *_11, tmp115
	shrb	%al	# D.25958
	movl	%eax, %edx	# D.25958, D.25958
	movq	-24(%rbp), %rax	# arg, tmp116
	movq	32(%rax), %rax	# arg_1->exp.operands, D.25957
	movq	8(%rax), %rax	# _13->common.type, D.25957
	movzbl	61(%rax), %eax	# *_14, tmp119
	shrb	%al	# D.25958
	cmpb	%al, %dl	# D.25958, D.25958
	je	.L1754	#,
.L1753:
	.loc 1 8936 0 is_stmt 1
	movq	-24(%rbp), %rax	# arg, tmp120
	movzbl	16(%rax), %eax	# arg_1->common.code, D.25956
	cmpb	$121, %al	#, D.25956
	jne	.L1755	#,
	.loc 1 8937 0
	movq	-24(%rbp), %rax	# arg, tmp121
	movq	32(%rax), %rax	# arg_1->exp.operands, D.25957
	movzbl	16(%rax), %eax	# _18->common.code, D.25956
	cmpb	$29, %al	#, D.25956
	jne	.L1755	#,
	.loc 1 8939 0
	movq	global_trees+120(%rip), %rdx	# global_trees, D.25957
	movq	-32(%rbp), %rax	# ptr_offset, tmp122
	movq	%rdx, (%rax)	# D.25957, *ptr_offset_21(D)
	.loc 1 8940 0
	movq	-24(%rbp), %rax	# arg, tmp123
	movq	32(%rax), %rax	# arg_1->exp.operands, D.25955
	jmp	.L1756	#
.L1755:
	.loc 1 8942 0
	movq	-24(%rbp), %rax	# arg, tmp124
	movzbl	16(%rax), %eax	# arg_1->common.code, D.25956
	cmpb	$59, %al	#, D.25956
	jne	.L1757	#,
.LBB148:
	.loc 1 8944 0
	movq	-24(%rbp), %rax	# arg, tmp125
	movq	32(%rax), %rax	# arg_1->exp.operands, tmp126
	movq	%rax, -16(%rbp)	# tmp126, arg0
	.loc 1 8945 0
	movq	-24(%rbp), %rax	# arg, tmp127
	movq	40(%rax), %rax	# arg_1->exp.operands, tmp128
	movq	%rax, -8(%rbp)	# tmp128, arg1
	.loc 1 8947 0
	jmp	.L1758	#
.L1761:
	.loc 1 8947 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# arg0, tmp129
	movq	32(%rax), %rax	# arg0_2->exp.operands, tmp130
	movq	%rax, -16(%rbp)	# tmp130, arg0
.L1758:
	movq	-16(%rbp), %rax	# arg0, tmp131
	movzbl	16(%rax), %eax	# arg0_2->common.code, D.25956
	cmpb	$115, %al	#, D.25956
	je	.L1759	#,
	.loc 1 8947 0 discriminator 3
	movq	-16(%rbp), %rax	# arg0, tmp132
	movzbl	16(%rax), %eax	# arg0_2->common.code, D.25956
	cmpb	$114, %al	#, D.25956
	je	.L1759	#,
	.loc 1 8947 0 discriminator 1
	movq	-16(%rbp), %rax	# arg0, tmp133
	movzbl	16(%rax), %eax	# arg0_2->common.code, D.25956
	cmpb	$116, %al	#, D.25956
	jne	.L1760	#,
.L1759:
	.loc 1 8947 0 discriminator 2
	movq	-16(%rbp), %rax	# arg0, tmp134
	movq	32(%rax), %rdx	# arg0_2->exp.operands, D.25957
	movq	global_trees(%rip), %rax	# global_trees, D.25957
	cmpq	%rax, %rdx	# D.25957, D.25957
	je	.L1760	#,
	.loc 1 8947 0 discriminator 1
	movq	-16(%rbp), %rax	# arg0, tmp135
	movq	8(%rax), %rax	# arg0_2->common.type, D.25957
	movzbl	61(%rax), %eax	# *_31, tmp138
	shrb	%al	# D.25958
	movl	%eax, %edx	# D.25958, D.25958
	movq	-16(%rbp), %rax	# arg0, tmp139
	movq	32(%rax), %rax	# arg0_2->exp.operands, D.25957
	movq	8(%rax), %rax	# _33->common.type, D.25957
	movzbl	61(%rax), %eax	# *_34, tmp142
	shrb	%al	# D.25958
	cmpb	%al, %dl	# D.25958, D.25958
	je	.L1761	#,
.L1760:
	.loc 1 8948 0 is_stmt 1
	jmp	.L1762	#
.L1765:
	.loc 1 8948 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# arg1, tmp143
	movq	32(%rax), %rax	# arg1_3->exp.operands, tmp144
	movq	%rax, -8(%rbp)	# tmp144, arg1
.L1762:
	movq	-8(%rbp), %rax	# arg1, tmp145
	movzbl	16(%rax), %eax	# arg1_3->common.code, D.25956
	cmpb	$115, %al	#, D.25956
	je	.L1763	#,
	.loc 1 8948 0 discriminator 3
	movq	-8(%rbp), %rax	# arg1, tmp146
	movzbl	16(%rax), %eax	# arg1_3->common.code, D.25956
	cmpb	$114, %al	#, D.25956
	je	.L1763	#,
	.loc 1 8948 0 discriminator 1
	movq	-8(%rbp), %rax	# arg1, tmp147
	movzbl	16(%rax), %eax	# arg1_3->common.code, D.25956
	cmpb	$116, %al	#, D.25956
	jne	.L1764	#,
.L1763:
	.loc 1 8948 0 discriminator 2
	movq	-8(%rbp), %rax	# arg1, tmp148
	movq	32(%rax), %rdx	# arg1_3->exp.operands, D.25957
	movq	global_trees(%rip), %rax	# global_trees, D.25957
	cmpq	%rax, %rdx	# D.25957, D.25957
	je	.L1764	#,
	.loc 1 8948 0 discriminator 1
	movq	-8(%rbp), %rax	# arg1, tmp149
	movq	8(%rax), %rax	# arg1_3->common.type, D.25957
	movzbl	61(%rax), %eax	# *_42, tmp152
	shrb	%al	# D.25958
	movl	%eax, %edx	# D.25958, D.25958
	movq	-8(%rbp), %rax	# arg1, tmp153
	movq	32(%rax), %rax	# arg1_3->exp.operands, D.25957
	movq	8(%rax), %rax	# _44->common.type, D.25957
	movzbl	61(%rax), %eax	# *_45, tmp156
	shrb	%al	# D.25958
	cmpb	%al, %dl	# D.25958, D.25958
	je	.L1765	#,
.L1764:
	.loc 1 8950 0 is_stmt 1
	movq	-16(%rbp), %rax	# arg0, tmp157
	movzbl	16(%rax), %eax	# arg0_2->common.code, D.25956
	cmpb	$121, %al	#, D.25956
	jne	.L1766	#,
	.loc 1 8951 0
	movq	-16(%rbp), %rax	# arg0, tmp158
	movq	32(%rax), %rax	# arg0_2->exp.operands, D.25957
	movzbl	16(%rax), %eax	# _49->common.code, D.25956
	cmpb	$29, %al	#, D.25956
	jne	.L1766	#,
	.loc 1 8953 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25957
	movq	-8(%rbp), %rdx	# arg1, tmp159
	movq	%rdx, %rsi	# tmp159,
	movq	%rax, %rdi	# D.25957,
	call	convert	#
	movq	-32(%rbp), %rdx	# ptr_offset, tmp160
	movq	%rax, (%rdx)	# D.25957, *ptr_offset_21(D)
	.loc 1 8954 0
	movq	-16(%rbp), %rax	# arg0, tmp161
	movq	32(%rax), %rax	# arg0_2->exp.operands, D.25955
	jmp	.L1756	#
.L1766:
	.loc 1 8956 0
	movq	-8(%rbp), %rax	# arg1, tmp162
	movzbl	16(%rax), %eax	# arg1_3->common.code, D.25956
	cmpb	$121, %al	#, D.25956
	jne	.L1757	#,
	.loc 1 8957 0
	movq	-8(%rbp), %rax	# arg1, tmp163
	movq	32(%rax), %rax	# arg1_3->exp.operands, D.25957
	movzbl	16(%rax), %eax	# _55->common.code, D.25956
	cmpb	$29, %al	#, D.25956
	jne	.L1757	#,
	.loc 1 8959 0
	movq	sizetype_tab(%rip), %rax	# sizetype_tab, D.25957
	movq	-16(%rbp), %rdx	# arg0, tmp164
	movq	%rdx, %rsi	# tmp164,
	movq	%rax, %rdi	# D.25957,
	call	convert	#
	movq	-32(%rbp), %rdx	# ptr_offset, tmp165
	movq	%rax, (%rdx)	# D.25957, *ptr_offset_21(D)
	.loc 1 8960 0
	movq	-8(%rbp), %rax	# arg1, tmp166
	movq	32(%rax), %rax	# arg1_3->exp.operands, D.25955
	jmp	.L1756	#
.L1757:
.LBE148:
	.loc 1 8964 0
	movl	$0, %eax	#, D.25955
.L1756:
	.loc 1 8965 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE56:
	.size	string_constant, .-string_constant
	.type	expand_increment, @function
expand_increment:
.LFB57:
	.loc 1 8975 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$144, %rsp	#,
	movq	%rdi, -120(%rbp)	# exp, exp
	movl	%esi, -124(%rbp)	# post, post
	movl	%edx, -128(%rbp)	# ignore, ignore
	.loc 1 8978 0
	movq	-120(%rbp), %rax	# exp, tmp161
	movq	32(%rax), %rax	# exp_26(D)->exp.operands, tmp162
	movq	%rax, -48(%rbp)	# tmp162, incremented
	.loc 1 8979 0
	movq	optab_table(%rip), %rax	# optab_table, tmp163
	movq	%rax, -40(%rbp)	# tmp163, this_optab
	.loc 1 8981 0
	movq	-120(%rbp), %rax	# exp, tmp164
	movq	8(%rax), %rax	# exp_26(D)->common.type, D.25960
	movzbl	61(%rax), %eax	# *_29, tmp167
	shrb	%al	# D.25961
	movzbl	%al, %eax	# D.25961, tmp168
	movl	%eax, -92(%rbp)	# tmp168, mode
	.loc 1 8982 0
	movl	$0, -88(%rbp)	#, op0_is_copy
	.loc 1 8983 0
	movl	$0, -100(%rbp)	#, single_insn
	.loc 1 8987 0
	movl	$0, -96(%rbp)	#, bad_subreg
	.loc 1 8991 0
	cmpl	$0, -124(%rbp)	#, post
	je	.L1768	#,
	.loc 1 8992 0
	movq	-48(%rbp), %rax	# incremented, tmp169
	movzbl	16(%rax), %eax	# incremented_27->common.code, D.25962
	cmpb	$40, %al	#, D.25962
	je	.L1768	#,
	.loc 1 8993 0
	movq	-48(%rbp), %rax	# incremented, tmp170
	movzbl	16(%rax), %eax	# incremented_27->common.code, D.25962
	cmpb	$39, %al	#, D.25962
	jne	.L1769	#,
	.loc 1 8994 0
	movq	-48(%rbp), %rax	# incremented, tmp171
	movq	32(%rax), %rax	# incremented_27->exp.operands, D.25960
	movzbl	16(%rax), %eax	# _38->common.code, D.25962
	cmpb	$41, %al	#, D.25962
	jne	.L1768	#,
	.loc 1 8995 0
	movq	-48(%rbp), %rax	# incremented, tmp172
	movq	40(%rax), %rax	# incremented_27->exp.operands, D.25960
	movzbl	49(%rax), %eax	# *_40, D.25962
	andl	$16, %eax	#, D.25962
	testb	%al, %al	# D.25962
	je	.L1769	#,
.L1768:
	.loc 1 8996 0
	movq	-48(%rbp), %rax	# incremented, tmp173
	movq	%rax, %rdi	# tmp173,
	call	stabilize_reference	#
	movq	%rax, -48(%rbp)	# tmp174, incremented
.L1769:
	.loc 1 9000 0
	movq	-48(%rbp), %rax	# incremented, tmp175
	movzbl	16(%rax), %eax	# incremented_7->common.code, D.25962
	cmpb	$-126, %al	#, D.25962
	je	.L1770	#,
	.loc 1 9001 0
	movq	-48(%rbp), %rax	# incremented, tmp176
	movzbl	16(%rax), %eax	# incremented_7->common.code, D.25962
	cmpb	$-127, %al	#, D.25962
	jne	.L1771	#,
.L1770:
	.loc 1 9002 0
	movq	-48(%rbp), %rax	# incremented, tmp177
	movq	%rax, %rdi	# tmp177,
	call	save_expr	#
	movq	%rax, -48(%rbp)	# tmp178, incremented
.L1771:
	.loc 1 9009 0
	call	get_last_insn	#
	movq	%rax, -64(%rbp)	# tmp179, temp
	.loc 1 9010 0
	movq	-48(%rbp), %rax	# incremented, tmp180
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp180,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp181, op0
	.loc 1 9020 0
	movq	-80(%rbp), %rax	# op0, tmp182
	movzwl	(%rax), %eax	# op0_48->code, D.25963
	cmpw	$63, %ax	#, D.25963
	jne	.L1772	#,
	.loc 1 9020 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# op0, tmp183
	movzbl	3(%rax), %eax	# *op0_48, D.25962
	andl	$16, %eax	#, D.25962
	testb	%al, %al	# D.25962
	je	.L1772	#,
	.loc 1 9022 0 is_stmt 1
	cmpl	$0, -124(%rbp)	#, post
	je	.L1773	#,
	.loc 1 9023 0
	movq	-80(%rbp), %rax	# op0, tmp184
	movq	8(%rax), %rax	# op0_48->fld[0].rtx, D.25964
	movq	%rax, %rdi	# D.25964,
	call	copy_to_reg	#
	movq	-80(%rbp), %rdx	# op0, tmp185
	movq	%rax, 8(%rdx)	# D.25964, op0_48->fld[0].rtx
	.loc 1 9022 0
	jmp	.L1775	#
.L1773:
	.loc 1 9025 0
	movl	$1, -96(%rbp)	#, bad_subreg
	.loc 1 9022 0
	jmp	.L1775	#
.L1772:
	.loc 1 9027 0
	movq	-80(%rbp), %rax	# op0, tmp186
	movzwl	(%rax), %eax	# op0_48->code, D.25963
	cmpw	$63, %ax	#, D.25963
	jne	.L1775	#,
	.loc 1 9028 0
	movq	-80(%rbp), %rax	# op0, tmp187
	movzbl	2(%rax), %eax	# op0_48->mode, D.25962
	movzbl	%al, %eax	# D.25962, D.25965
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.25963
	movzwl	%ax, %edx	# D.25963, D.25965
	movl	target_flags(%rip), %eax	# target_flags, target_flags.822
	andl	$33554432, %eax	#, D.25965
	testl	%eax, %eax	# D.25965
	je	.L1776	#,
	.loc 1 9028 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.821
	jmp	.L1777	#
.L1776:
	.loc 1 9028 0 discriminator 2
	movl	$32, %eax	#, iftmp.821
.L1777:
	.loc 1 9028 0 discriminator 3
	cmpl	%eax, %edx	# iftmp.821, D.25965
	jge	.L1775	#,
	.loc 1 9033 0 is_stmt 1
	cmpl	$0, -124(%rbp)	#, post
	je	.L1778	#,
	.loc 1 9034 0
	movq	-80(%rbp), %rax	# op0, tmp189
	movq	%rax, %rdi	# tmp189,
	call	copy_to_reg	#
	movq	%rax, -80(%rbp)	# tmp190, op0
	jmp	.L1775	#
.L1778:
	.loc 1 9036 0
	movl	$1, -96(%rbp)	#, bad_subreg
.L1775:
	.loc 1 9039 0
	movq	-80(%rbp), %rax	# op0, tmp191
	movzwl	(%rax), %eax	# op0_1->code, D.25963
	.loc 1 9040 0
	cmpw	$63, %ax	#, D.25963
	je	.L1779	#,
	.loc 1 9039 0
	movq	-80(%rbp), %rax	# op0, tmp192
	movzwl	(%rax), %eax	# op0_1->code, D.25963
	cmpw	$61, %ax	#, D.25963
	jne	.L1780	#,
.L1779:
	.loc 1 9040 0 discriminator 1
	call	get_last_insn	#
	cmpq	-64(%rbp), %rax	# temp, D.25964
	je	.L1780	#,
	.loc 1 9040 0 is_stmt 0 discriminator 2
	movl	$1, %eax	#, iftmp.823
	jmp	.L1781	#
.L1780:
	.loc 1 9040 0 discriminator 3
	movl	$0, %eax	#, iftmp.823
.L1781:
	.loc 1 9039 0 is_stmt 1
	movl	%eax, -88(%rbp)	# iftmp.823, op0_is_copy
	.loc 1 9041 0
	movq	-120(%rbp), %rax	# exp, tmp193
	movq	40(%rax), %rax	# exp_26(D)->exp.operands, D.25960
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25960,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp194, op1
	.loc 1 9044 0
	movq	-120(%rbp), %rax	# exp, tmp195
	movzbl	16(%rax), %eax	# exp_26(D)->common.code, D.25962
	cmpb	$-125, %al	#, D.25962
	je	.L1782	#,
	.loc 1 9045 0
	movq	-120(%rbp), %rax	# exp, tmp196
	movzbl	16(%rax), %eax	# exp_26(D)->common.code, D.25962
	cmpb	$-127, %al	#, D.25962
	jne	.L1783	#,
.L1782:
	.loc 1 9046 0
	movq	optab_table+16(%rip), %rax	# optab_table, tmp197
	movq	%rax, -40(%rbp)	# tmp197, this_optab
.L1783:
	.loc 1 9049 0
	movq	optab_table+16(%rip), %rax	# optab_table, D.25966
	cmpq	-40(%rbp), %rax	# this_optab, D.25966
	jne	.L1784	#,
	.loc 1 9050 0
	movq	-72(%rbp), %rax	# op1, tmp198
	movzwl	(%rax), %eax	# op1_73->code, D.25963
	cmpw	$54, %ax	#, D.25963
	jne	.L1784	#,
	.loc 1 9052 0
	movq	-72(%rbp), %rax	# op1, tmp199
	movq	8(%rax), %rax	# op1_73->fld[0].rtwint, D.25967
	negq	%rax	# D.25967
	movq	%rax, %rsi	# D.25967,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -72(%rbp)	# tmp200, op1
	.loc 1 9053 0
	movq	optab_table(%rip), %rax	# optab_table, tmp201
	movq	%rax, -40(%rbp)	# tmp201, this_optab
.L1784:
	.loc 1 9056 0
	movl	flag_trapv(%rip), %eax	# flag_trapv, flag_trapv.824
	testl	%eax, %eax	# flag_trapv.824
	je	.L1785	#,
	.loc 1 9056 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# exp, tmp202
	movq	8(%rax), %rax	# exp_26(D)->common.type, D.25960
	movzbl	17(%rax), %eax	# *_84, D.25962
	andl	$32, %eax	#, D.25962
	testb	%al, %al	# D.25962
	jne	.L1785	#,
	.loc 1 9057 0 is_stmt 1
	movq	optab_table(%rip), %rax	# optab_table, D.25966
	cmpq	-40(%rbp), %rax	# this_optab, D.25966
	jne	.L1786	#,
	.loc 1 9057 0 is_stmt 0 discriminator 1
	movq	optab_table+8(%rip), %rax	# optab_table, iftmp.825
	jmp	.L1787	#
.L1786:
	.loc 1 9057 0 discriminator 2
	movq	optab_table+24(%rip), %rax	# optab_table, iftmp.825
.L1787:
	.loc 1 9057 0 discriminator 3
	movq	%rax, -40(%rbp)	# iftmp.825, this_optab
.L1785:
	.loc 1 9060 0 is_stmt 1
	cmpl	$0, -124(%rbp)	#, post
	jne	.L1788	#,
	.loc 1 9062 0
	movl	-92(%rbp), %edx	# mode, mode.826
	movq	-40(%rbp), %rax	# this_optab, tmp203
	movslq	%edx, %rdx	# mode.826, tmp204
	salq	$4, %rdx	#, tmp205
	addq	%rdx, %rax	# tmp205, tmp206
	movl	8(%rax), %eax	# this_optab_12->handlers[mode.826_91].insn_code, D.25968
	movl	%eax, -84(%rbp)	# D.25968, icode
	.loc 1 9063 0
	cmpl	$1317, -84(%rbp)	#, icode
	je	.L1788	#,
	.loc 1 9066 0
	movl	-84(%rbp), %eax	# icode, tmp208
	movslq	%eax, %rdx	# tmp208, tmp207
	movq	%rdx, %rax	# tmp207, tmp209
	salq	$2, %rax	#, tmp209
	addq	%rdx, %rax	# tmp207, tmp209
	salq	$3, %rax	#, tmp210
	addq	$insn_data+24, %rax	#, tmp211
	movq	(%rax), %rax	# insn_data[icode_93].operand, D.25969
	movq	(%rax), %rax	# _94->predicate, D.25970
	movl	-92(%rbp), %ecx	# mode, tmp212
	movq	-80(%rbp), %rdx	# op0, tmp213
	movl	%ecx, %esi	# tmp212,
	movq	%rdx, %rdi	# tmp213,
	call	*%rax	# D.25970
	testl	%eax, %eax	# D.25965
	je	.L1788	#,
	.loc 1 9067 0
	movl	-84(%rbp), %eax	# icode, tmp215
	movslq	%eax, %rdx	# tmp215, tmp214
	movq	%rdx, %rax	# tmp214, tmp216
	salq	$2, %rax	#, tmp216
	addq	%rdx, %rax	# tmp214, tmp216
	salq	$3, %rax	#, tmp217
	addq	$insn_data+24, %rax	#, tmp218
	movq	(%rax), %rax	# insn_data[icode_93].operand, D.25969
	addq	$24, %rax	#, D.25969
	movq	(%rax), %rax	# _98->predicate, D.25970
	movl	-92(%rbp), %ecx	# mode, tmp219
	movq	-80(%rbp), %rdx	# op0, tmp220
	movl	%ecx, %esi	# tmp219,
	movq	%rdx, %rdi	# tmp220,
	call	*%rax	# D.25970
	testl	%eax, %eax	# D.25965
	je	.L1788	#,
	.loc 1 9068 0
	movl	-84(%rbp), %eax	# icode, tmp222
	movslq	%eax, %rdx	# tmp222, tmp221
	movq	%rdx, %rax	# tmp221, tmp223
	salq	$2, %rax	#, tmp223
	addq	%rdx, %rax	# tmp221, tmp223
	salq	$3, %rax	#, tmp224
	addq	$insn_data+24, %rax	#, tmp225
	movq	(%rax), %rax	# insn_data[icode_93].operand, D.25969
	addq	$48, %rax	#, D.25969
	movq	(%rax), %rax	# _102->predicate, D.25970
	movl	-92(%rbp), %ecx	# mode, tmp226
	movq	-72(%rbp), %rdx	# op1, tmp227
	movl	%ecx, %esi	# tmp226,
	movq	%rdx, %rdi	# tmp227,
	call	*%rax	# D.25970
	testl	%eax, %eax	# D.25965
	je	.L1788	#,
	.loc 1 9069 0
	movl	$1, -100(%rbp)	#, single_insn
.L1788:
	.loc 1 9080 0
	cmpl	$0, -88(%rbp)	#, op0_is_copy
	jne	.L1789	#,
	.loc 1 9080 0 is_stmt 0 discriminator 1
	cmpl	$0, -124(%rbp)	#, post
	jne	.L1790	#,
	cmpl	$0, -100(%rbp)	#, single_insn
	je	.L1789	#,
.L1790:
	.loc 1 9080 0 discriminator 2
	cmpl	$0, -96(%rbp)	#, bad_subreg
	je	.L1791	#,
.L1789:
.LBB149:
	.loc 1 9088 0 is_stmt 1
	movq	-120(%rbp), %rax	# exp, tmp228
	movq	40(%rax), %rcx	# exp_26(D)->exp.operands, D.25960
	movq	-120(%rbp), %rax	# exp, tmp229
	movq	8(%rax), %rsi	# exp_26(D)->common.type, D.25960
	movq	-120(%rbp), %rax	# exp, tmp230
	movzbl	16(%rax), %eax	# exp_26(D)->common.code, D.25962
	cmpb	$-125, %al	#, D.25962
	je	.L1792	#,
	.loc 1 9089 0
	movq	-120(%rbp), %rax	# exp, tmp231
	movzbl	16(%rax), %eax	# exp_26(D)->common.code, D.25962
	cmpb	$-127, %al	#, D.25962
	jne	.L1793	#,
.L1792:
	.loc 1 9088 0 discriminator 1
	movl	$60, %eax	#, iftmp.827
	jmp	.L1794	#
.L1793:
	.loc 1 9088 0 is_stmt 0
	movl	$59, %eax	#, iftmp.827
.L1794:
	.loc 1 9088 0 discriminator 2
	movq	-48(%rbp), %rdx	# incremented, tmp232
	movl	%eax, %edi	# iftmp.827,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -32(%rbp)	# tmp233, newexp
	.loc 1 9095 0 is_stmt 1 discriminator 2
	jmp	.L1795	#
.L1796:
	.loc 1 9098 0
	movq	-48(%rbp), %rax	# incremented, tmp234
	movq	8(%rax), %rax	# incremented_9->common.type, D.25960
	movq	-32(%rbp), %rdx	# newexp, tmp235
	movq	%rdx, %rsi	# tmp235,
	movq	%rax, %rdi	# D.25960,
	call	convert	#
	movq	%rax, -32(%rbp)	# tmp236, newexp
	.loc 1 9099 0
	movq	-48(%rbp), %rax	# incremented, tmp237
	movq	32(%rax), %rax	# incremented_9->exp.operands, tmp238
	movq	%rax, -48(%rbp)	# tmp238, incremented
.L1795:
	.loc 1 9095 0 discriminator 1
	movq	-48(%rbp), %rax	# incremented, tmp239
	movzbl	16(%rax), %eax	# incremented_9->common.code, D.25962
	cmpb	$115, %al	#, D.25962
	je	.L1796	#,
	.loc 1 9096 0
	movq	-48(%rbp), %rax	# incremented, tmp240
	movzbl	16(%rax), %eax	# incremented_9->common.code, D.25962
	cmpb	$114, %al	#, D.25962
	je	.L1796	#,
	.loc 1 9102 0
	cmpl	$0, -124(%rbp)	#, post
	jne	.L1797	#,
	.loc 1 9102 0 is_stmt 0 discriminator 1
	cmpl	$0, -128(%rbp)	#, ignore
	jne	.L1797	#,
	.loc 1 9102 0 discriminator 3
	movl	$1, %eax	#, iftmp.828
	jmp	.L1798	#
.L1797:
	.loc 1 9102 0 discriminator 2
	movl	$0, %eax	#, iftmp.828
.L1798:
	.loc 1 9102 0 discriminator 4
	movq	-32(%rbp), %rsi	# newexp, tmp241
	movq	-48(%rbp), %rdi	# incremented, tmp242
	movl	$0, %ecx	#,
	movl	%eax, %edx	# iftmp.828,
	call	expand_assignment	#
	movq	%rax, -64(%rbp)	# tmp243, temp
	.loc 1 9103 0 is_stmt 1 discriminator 4
	cmpl	$0, -124(%rbp)	#, post
	je	.L1799	#,
	.loc 1 9103 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# op0, iftmp.829
	jmp	.L1800	#
.L1799:
	.loc 1 9103 0 discriminator 2
	movq	-64(%rbp), %rax	# temp, iftmp.829
.L1800:
	.loc 1 9103 0 discriminator 3
	jmp	.L1801	#
.L1791:
.LBE149:
	.loc 1 9106 0 is_stmt 1
	cmpl	$0, -124(%rbp)	#, post
	je	.L1802	#,
	.loc 1 9118 0
	movl	-92(%rbp), %edx	# mode, mode.830
	movq	-40(%rbp), %rax	# this_optab, tmp244
	movslq	%edx, %rdx	# mode.830, tmp245
	salq	$4, %rdx	#, tmp246
	addq	%rdx, %rax	# tmp246, tmp247
	movl	8(%rax), %eax	# this_optab_12->handlers[mode.830_106].insn_code, D.25968
	movl	%eax, -84(%rbp)	# D.25968, icode
	.loc 1 9119 0
	cmpl	$1317, -84(%rbp)	#, icode
	je	.L1803	#,
	.loc 1 9122 0
	movl	-84(%rbp), %eax	# icode, tmp249
	movslq	%eax, %rdx	# tmp249, tmp248
	movq	%rdx, %rax	# tmp248, tmp250
	salq	$2, %rax	#, tmp250
	addq	%rdx, %rax	# tmp248, tmp250
	salq	$3, %rax	#, tmp251
	addq	$insn_data+24, %rax	#, tmp252
	movq	(%rax), %rax	# insn_data[icode_108].operand, D.25969
	movq	(%rax), %rax	# _109->predicate, D.25970
	movl	-92(%rbp), %ecx	# mode, tmp253
	movq	-80(%rbp), %rdx	# op0, tmp254
	movl	%ecx, %esi	# tmp253,
	movq	%rdx, %rdi	# tmp254,
	call	*%rax	# D.25970
	testl	%eax, %eax	# D.25965
	je	.L1803	#,
	.loc 1 9123 0
	movl	-84(%rbp), %eax	# icode, tmp256
	movslq	%eax, %rdx	# tmp256, tmp255
	movq	%rdx, %rax	# tmp255, tmp257
	salq	$2, %rax	#, tmp257
	addq	%rdx, %rax	# tmp255, tmp257
	salq	$3, %rax	#, tmp258
	addq	$insn_data+24, %rax	#, tmp259
	movq	(%rax), %rax	# insn_data[icode_108].operand, D.25969
	addq	$24, %rax	#, D.25969
	movq	(%rax), %rax	# _113->predicate, D.25970
	movl	-92(%rbp), %ecx	# mode, tmp260
	movq	-80(%rbp), %rdx	# op0, tmp261
	movl	%ecx, %esi	# tmp260,
	movq	%rdx, %rdi	# tmp261,
	call	*%rax	# D.25970
	testl	%eax, %eax	# D.25965
	je	.L1803	#,
	.loc 1 9125 0
	movl	-84(%rbp), %eax	# icode, tmp263
	movslq	%eax, %rdx	# tmp263, tmp262
	movq	%rdx, %rax	# tmp262, tmp264
	salq	$2, %rax	#, tmp264
	addq	%rdx, %rax	# tmp262, tmp264
	salq	$3, %rax	#, tmp265
	addq	$insn_data+24, %rax	#, tmp266
	movq	(%rax), %rax	# insn_data[icode_108].operand, D.25969
	addq	$48, %rax	#, D.25969
	movq	(%rax), %rax	# _117->predicate, D.25970
	movl	-92(%rbp), %ecx	# mode, tmp267
	movq	-72(%rbp), %rdx	# op1, tmp268
	movl	%ecx, %esi	# tmp267,
	movq	%rdx, %rdi	# tmp268,
	call	*%rax	# D.25970
	testl	%eax, %eax	# D.25965
	jne	.L1804	#,
	.loc 1 9126 0
	movq	-72(%rbp), %rdx	# op1, tmp269
	movl	-92(%rbp), %eax	# mode, tmp270
	movq	%rdx, %rsi	# tmp269,
	movl	%eax, %edi	# tmp270,
	call	force_reg	#
	movq	%rax, -72(%rbp)	# tmp271, op1
.L1804:
	.loc 1 9128 0
	movl	-84(%rbp), %eax	# icode, tmp273
	movslq	%eax, %rdx	# tmp273, tmp272
	movq	%rdx, %rax	# tmp272, tmp274
	salq	$2, %rax	#, tmp274
	addq	%rdx, %rax	# tmp272, tmp274
	salq	$3, %rax	#, tmp275
	addq	$insn_data+16, %rax	#, tmp276
	movq	(%rax), %rcx	# insn_data[icode_108].genfun, D.25971
	movq	-72(%rbp), %rdx	# op1, tmp277
	movq	-80(%rbp), %rsi	# op0, tmp278
	movq	-80(%rbp), %rax	# op0, tmp279
	movq	%rax, %rdi	# tmp279,
	movl	$0, %eax	#,
	call	*%rcx	# D.25971
	movq	%rax, %rdx	#, D.25964
	movq	-80(%rbp), %rax	# op0, tmp280
	movq	%rdx, %rsi	# D.25964,
	movq	%rax, %rdi	# tmp280,
	call	enqueue_insn	#
	jmp	.L1801	#
.L1803:
	.loc 1 9130 0
	cmpl	$1317, -84(%rbp)	#, icode
	je	.L1802	#,
	.loc 1 9130 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# op0, tmp281
	movzwl	(%rax), %eax	# op0_1->code, D.25963
	cmpw	$66, %ax	#, D.25963
	jne	.L1802	#,
.LBB150:
	.loc 1 9132 0 is_stmt 1
	movq	-80(%rbp), %rax	# op0, tmp282
	movq	8(%rax), %rax	# op0_1->fld[0].rtx, D.25964
	movl	-92(%rbp), %edx	# mode, tmp283
	movl	%edx, %esi	# tmp283,
	movq	%rax, %rdi	# D.25964,
	call	general_operand	#
	.loc 1 9134 0
	testl	%eax, %eax	# D.25965
	je	.L1805	#,
	.loc 1 9133 0
	movq	-80(%rbp), %rax	# op0, tmp284
	movq	8(%rax), %rdx	# op0_1->fld[0].rtx, D.25964
	movl	target_flags(%rip), %eax	# target_flags, target_flags.833
	andl	$33554432, %eax	#, D.25965
	testl	%eax, %eax	# D.25965
	je	.L1806	#,
	.loc 1 9133 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.832
	jmp	.L1807	#
.L1806:
	.loc 1 9133 0 discriminator 2
	movl	$4, %eax	#, iftmp.832
.L1807:
	.loc 1 9134 0 is_stmt 1 discriminator 1
	movq	%rdx, %rsi	# D.25964,
	movl	%eax, %edi	# iftmp.832,
	call	force_reg	#
	jmp	.L1808	#
.L1805:
	movq	-80(%rbp), %rax	# op0, tmp285
	movq	8(%rax), %rax	# op0_1->fld[0].rtx, D.25964
	movq	%rax, %rdi	# D.25964,
	call	copy_to_reg	#
.L1808:
	.loc 1 9132 0
	movq	%rax, -24(%rbp)	# iftmp.831, addr
	.loc 1 9137 0
	movq	-24(%rbp), %rdx	# addr, tmp286
	movq	-80(%rbp), %rax	# op0, tmp287
	movq	%rdx, %rsi	# tmp286,
	movq	%rax, %rdi	# tmp287,
	call	replace_equiv_address	#
	movq	%rax, -80(%rbp)	# tmp288, op0
	.loc 1 9138 0
	movq	-80(%rbp), %rax	# op0, tmp289
	movzbl	2(%rax), %eax	# op0_136->mode, D.25962
	movzbl	%al, %eax	# D.25962, D.25972
	movq	-80(%rbp), %rdx	# op0, tmp290
	movq	%rdx, %rsi	# tmp290,
	movl	%eax, %edi	# D.25972,
	call	force_reg	#
	movq	%rax, -16(%rbp)	# tmp291, temp
	.loc 1 9139 0
	movl	-84(%rbp), %eax	# icode, tmp293
	movslq	%eax, %rdx	# tmp293, tmp292
	movq	%rdx, %rax	# tmp292, tmp294
	salq	$2, %rax	#, tmp294
	addq	%rdx, %rax	# tmp292, tmp294
	salq	$3, %rax	#, tmp295
	addq	$insn_data+24, %rax	#, tmp296
	movq	(%rax), %rax	# insn_data[icode_108].operand, D.25969
	addq	$48, %rax	#, D.25969
	movq	(%rax), %rax	# _141->predicate, D.25970
	movl	-92(%rbp), %ecx	# mode, tmp297
	movq	-72(%rbp), %rdx	# op1, tmp298
	movl	%ecx, %esi	# tmp297,
	movq	%rdx, %rdi	# tmp298,
	call	*%rax	# D.25970
	testl	%eax, %eax	# D.25965
	jne	.L1809	#,
	.loc 1 9140 0
	movq	-72(%rbp), %rdx	# op1, tmp299
	movl	-92(%rbp), %eax	# mode, tmp300
	movq	%rdx, %rsi	# tmp299,
	movl	%eax, %edi	# tmp300,
	call	force_reg	#
	movq	%rax, -72(%rbp)	# tmp301, op1
.L1809:
	.loc 1 9144 0
	movq	-16(%rbp), %rdx	# temp, tmp302
	movq	-80(%rbp), %rax	# op0, tmp303
	movq	%rdx, %rsi	# tmp302,
	movq	%rax, %rdi	# tmp303,
	call	gen_move_insn	#
	movq	%rax, %rdx	#, D.25964
	movq	-80(%rbp), %rax	# op0, tmp304
	movq	%rdx, %rsi	# D.25964,
	movq	%rax, %rdi	# tmp304,
	call	enqueue_insn	#
	.loc 1 9145 0
	movl	-84(%rbp), %eax	# icode, tmp306
	movslq	%eax, %rdx	# tmp306, tmp305
	movq	%rdx, %rax	# tmp305, tmp307
	salq	$2, %rax	#, tmp307
	addq	%rdx, %rax	# tmp305, tmp307
	salq	$3, %rax	#, tmp308
	addq	$insn_data+16, %rax	#, tmp309
	movq	(%rax), %rcx	# insn_data[icode_108].genfun, D.25971
	movq	-72(%rbp), %rdx	# op1, tmp310
	movq	-16(%rbp), %rsi	# temp, tmp311
	movq	-16(%rbp), %rax	# temp, tmp312
	movq	%rax, %rdi	# tmp312,
	movl	$0, %eax	#,
	call	*%rcx	# D.25971
	movq	%rax, %rdx	#, D.25964
	movq	-16(%rbp), %rax	# temp, tmp313
	movq	%rdx, %rsi	# D.25964,
	movq	%rax, %rdi	# tmp313,
	call	enqueue_insn	#
	movq	%rax, -8(%rbp)	# tmp314, result
	.loc 1 9146 0
	movq	-8(%rbp), %rax	# result, D.25959
	jmp	.L1801	#
.L1802:
.LBE150:
	.loc 1 9151 0
	cmpl	$0, -124(%rbp)	#, post
	je	.L1810	#,
	.loc 1 9153 0
	movq	-80(%rbp), %rax	# op0, tmp315
	movq	%rax, %rdi	# tmp315,
	call	copy_to_reg	#
	movq	%rax, -56(%rbp)	# tmp316, value
	movq	-56(%rbp), %rax	# value, tmp317
	movq	%rax, -64(%rbp)	# tmp317, temp
	jmp	.L1811	#
.L1810:
	.loc 1 9159 0
	movq	-80(%rbp), %rax	# op0, tmp318
	movq	%rax, -56(%rbp)	# tmp318, value
	movq	-56(%rbp), %rax	# value, tmp319
	movq	%rax, %rdi	# tmp319,
	call	copy_rtx	#
	movq	%rax, -64(%rbp)	# tmp320, temp
.L1811:
	.loc 1 9163 0
	movq	-120(%rbp), %rax	# exp, tmp321
	movq	8(%rax), %rax	# exp_26(D)->common.type, D.25960
	movzbl	17(%rax), %eax	# *_154, tmp324
	shrb	$5, %al	#, D.25973
	andl	$1, %eax	#, D.25973
	.loc 1 9162 0
	movzbl	%al, %r8d	# D.25973, D.25965
	movq	-80(%rbp), %rdi	# op0, tmp325
	movq	-72(%rbp), %rcx	# op1, tmp326
	movq	-56(%rbp), %rdx	# value, tmp327
	movq	-40(%rbp), %rsi	# this_optab, tmp328
	movl	-92(%rbp), %eax	# mode, tmp329
	movl	$3, (%rsp)	#,
	movl	%r8d, %r9d	# D.25965,
	movq	%rdi, %r8	# tmp325,
	movl	%eax, %edi	# tmp329,
	call	expand_binop	#
	movq	%rax, -72(%rbp)	# tmp330, op1
	.loc 1 9166 0
	movq	-72(%rbp), %rax	# op1, tmp331
	cmpq	-80(%rbp), %rax	# op0, tmp331
	je	.L1812	#,
	.loc 1 9167 0
	movq	-72(%rbp), %rdx	# op1, tmp332
	movq	-80(%rbp), %rax	# op0, tmp333
	movq	%rdx, %rsi	# tmp332,
	movq	%rax, %rdi	# tmp333,
	call	emit_move_insn	#
.L1812:
	.loc 1 9169 0
	movq	-64(%rbp), %rax	# temp, D.25959
.L1801:
	.loc 1 9170 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE57:
	.size	expand_increment, .-expand_increment
	.globl	init_pending_stack_adjust
	.type	init_pending_stack_adjust, @function
init_pending_stack_adjust:
.LFB58:
	.loc 1 9177 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 9178 0
	movq	cfun(%rip), %rax	# cfun, cfun.834
	movq	16(%rax), %rax	# cfun.834_1->expr, D.25974
	movl	$0, (%rax)	#, _2->x_pending_stack_adjust
	.loc 1 9179 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE58:
	.size	init_pending_stack_adjust, .-init_pending_stack_adjust
	.globl	clear_pending_stack_adjust
	.type	clear_pending_stack_adjust, @function
clear_pending_stack_adjust:
.LFB59:
	.loc 1 9189 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 9191 0
	movl	optimize(%rip), %eax	# optimize, optimize.835
	testl	%eax, %eax	# optimize.835
	jle	.L1814	#,
	.loc 1 9192 0
	movl	flag_omit_frame_pointer(%rip), %eax	# flag_omit_frame_pointer, flag_omit_frame_pointer.836
	.loc 1 9193 0
	testl	%eax, %eax	# flag_omit_frame_pointer.836
	je	.L1816	#,
	.loc 1 9192 0
	movq	cfun(%rip), %rax	# cfun, cfun.837
	movzbl	424(%rax), %eax	# *cfun.837_3, D.25975
	andl	$64, %eax	#, D.25975
	testb	%al, %al	# D.25975
	je	.L1814	#,
.L1816:
	.loc 1 9194 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.838
	movzbl	49(%rax), %eax	# *current_function_decl.838_6, D.25975
	andl	$8, %eax	#, D.25975
	testb	%al, %al	# D.25975
	je	.L1817	#,
	.loc 1 9194 0 is_stmt 0 discriminator 1
	movl	flag_no_inline(%rip), %eax	# flag_no_inline, flag_no_inline.839
	testl	%eax, %eax	# flag_no_inline.839
	je	.L1814	#,
.L1817:
	.loc 1 9195 0 is_stmt 1
	movl	flag_inline_functions(%rip), %eax	# flag_inline_functions, flag_inline_functions.840
	testl	%eax, %eax	# flag_inline_functions.840
	jne	.L1814	#,
	.loc 1 9197 0
	movq	cfun(%rip), %rax	# cfun, cfun.841
	movq	16(%rax), %rax	# cfun.841_11->expr, D.25976
	movq	cfun(%rip), %rdx	# cfun, cfun.842
	movq	16(%rdx), %rdx	# cfun.842_13->expr, D.25976
	movl	8(%rdx), %ecx	# _14->x_stack_pointer_delta, D.25977
	movq	cfun(%rip), %rdx	# cfun, cfun.843
	movq	16(%rdx), %rdx	# cfun.843_16->expr, D.25976
	movl	(%rdx), %edx	# _17->x_pending_stack_adjust, D.25977
	subl	%edx, %ecx	# D.25977, D.25977
	movl	%ecx, %edx	# D.25977, D.25977
	movl	%edx, 8(%rax)	# D.25977, _12->x_stack_pointer_delta
	.loc 1 9198 0
	movq	cfun(%rip), %rax	# cfun, cfun.844
	movq	16(%rax), %rax	# cfun.844_20->expr, D.25976
	movl	$0, (%rax)	#, _21->x_pending_stack_adjust
.L1814:
	.loc 1 9201 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE59:
	.size	clear_pending_stack_adjust, .-clear_pending_stack_adjust
	.globl	do_pending_stack_adjust
	.type	do_pending_stack_adjust, @function
do_pending_stack_adjust:
.LFB60:
	.loc 1 9207 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 9208 0
	movq	cfun(%rip), %rax	# cfun, cfun.845
	movq	16(%rax), %rax	# cfun.845_1->expr, D.25978
	movl	4(%rax), %eax	# _2->x_inhibit_defer_pop, D.25979
	testl	%eax, %eax	# D.25979
	jne	.L1818	#,
	.loc 1 9210 0
	movq	cfun(%rip), %rax	# cfun, cfun.846
	movq	16(%rax), %rax	# cfun.846_4->expr, D.25978
	movl	(%rax), %eax	# _5->x_pending_stack_adjust, D.25979
	testl	%eax, %eax	# D.25979
	je	.L1820	#,
	.loc 1 9211 0
	movq	cfun(%rip), %rax	# cfun, cfun.847
	movq	16(%rax), %rax	# cfun.847_7->expr, D.25978
	movl	(%rax), %eax	# _8->x_pending_stack_adjust, D.25979
	cltq
	movq	%rax, %rsi	# D.25980,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdi	# D.25981,
	call	adjust_stack	#
.L1820:
	.loc 1 9212 0
	movq	cfun(%rip), %rax	# cfun, cfun.848
	movq	16(%rax), %rax	# cfun.848_12->expr, D.25978
	movl	$0, (%rax)	#, _13->x_pending_stack_adjust
.L1818:
	.loc 1 9214 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE60:
	.size	do_pending_stack_adjust, .-do_pending_stack_adjust
	.globl	jumpifnot
	.type	jumpifnot, @function
jumpifnot:
.LFB61:
	.loc 1 9226 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# exp, exp
	movq	%rsi, -16(%rbp)	# label, label
	.loc 1 9227 0
	movq	-16(%rbp), %rcx	# label, tmp59
	movq	-8(%rbp), %rax	# exp, tmp60
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp59,
	movq	%rax, %rdi	# tmp60,
	call	do_jump	#
	.loc 1 9228 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE61:
	.size	jumpifnot, .-jumpifnot
	.globl	jumpif
	.type	jumpif, @function
jumpif:
.LFB62:
	.loc 1 9236 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# exp, exp
	movq	%rsi, -16(%rbp)	# label, label
	.loc 1 9237 0
	movq	-16(%rbp), %rdx	# label, tmp59
	movq	-8(%rbp), %rax	# exp, tmp60
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp60,
	call	do_jump	#
	.loc 1 9238 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE62:
	.size	jumpif, .-jumpif
	.globl	do_jump
	.type	do_jump, @function
do_jump:
.LFB63:
	.loc 1 9256 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$272, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -248(%rbp)	# exp, exp
	movq	%rsi, -256(%rbp)	# if_false_label, if_false_label
	movq	%rdx, -264(%rbp)	# if_true_label, if_true_label
	.loc 1 9257 0
	movq	-248(%rbp), %rax	# exp, tmp292
	movzbl	16(%rax), %eax	# exp_18(D)->common.code, D.25982
	movzbl	%al, %eax	# D.25982, tmp293
	movl	%eax, -204(%rbp)	# tmp293, code
	.loc 1 9261 0
	movq	$0, -168(%rbp)	#, drop_through_label
	.loc 1 9271 0
	call	emit_queue	#
	.loc 1 9273 0
	cmpl	$122, -204(%rbp)	#, code
	ja	.L1824	#,
	movl	-204(%rbp), %eax	# code, tmp294
	movq	.L1826(,%rax,8), %rax	#, tmp295
	jmp	*%rax	# tmp295
	.section	.rodata
	.align 8
	.align 4
.L1826:
	.quad	.L1908
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1827
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1828
	.quad	.L1828
	.quad	.L1824
	.quad	.L1824
	.quad	.L1828
	.quad	.L1828
	.quad	.L1824
	.quad	.L1824
	.quad	.L1829
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1830
	.quad	.L1824
	.quad	.L1831
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1832
	.quad	.L1824
	.quad	.L1833
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1834
	.quad	.L1824
	.quad	.L1824
	.quad	.L1834
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1834
	.quad	.L1834
	.quad	.L1824
	.quad	.L1824
	.quad	.L1835
	.quad	.L1824
	.quad	.L1824
	.quad	.L1836
	.quad	.L1837
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1838
	.quad	.L1839
	.quad	.L1840
	.quad	.L1841
	.quad	.L1842
	.quad	.L1843
	.quad	.L1844
	.quad	.L1845
	.quad	.L1845
	.quad	.L1846
	.quad	.L1847
	.quad	.L1848
	.quad	.L1849
	.quad	.L1850
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1851
	.quad	.L1852
	.quad	.L1834
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1824
	.quad	.L1834
	.text
.L1827:
	.loc 1 9279 0
	movq	-248(%rbp), %rax	# exp, tmp296
	movq	%rax, %rdi	# tmp296,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25983
	je	.L1854	#,
	.loc 1 9279 0 is_stmt 0 discriminator 1
	movq	-256(%rbp), %rax	# if_false_label, iftmp.849
	jmp	.L1855	#
.L1854:
	.loc 1 9279 0 discriminator 2
	movq	-264(%rbp), %rax	# if_true_label, iftmp.849
.L1855:
	.loc 1 9279 0 discriminator 3
	movq	%rax, -160(%rbp)	# iftmp.849, temp
	.loc 1 9280 0 is_stmt 1 discriminator 3
	cmpq	$0, -160(%rbp)	#, temp
	je	.L1856	#,
	.loc 1 9281 0
	movq	-160(%rbp), %rax	# temp, tmp297
	movq	%rax, %rdi	# tmp297,
	call	emit_jump	#
	.loc 1 9282 0
	jmp	.L1853	#
.L1856:
	jmp	.L1853	#
.L1852:
	.loc 1 9294 0
	movq	-248(%rbp), %rax	# exp, tmp298
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movzbl	16(%rax), %eax	# _28->common.code, D.25982
	cmpb	$39, %al	#, D.25982
	je	.L1824	#,
	.loc 1 9295 0
	movq	-248(%rbp), %rax	# exp, tmp299
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movzbl	16(%rax), %eax	# _30->common.code, D.25982
	cmpb	$40, %al	#, D.25982
	je	.L1824	#,
	.loc 1 9296 0
	movq	-248(%rbp), %rax	# exp, tmp300
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movzbl	16(%rax), %eax	# _32->common.code, D.25982
	cmpb	$43, %al	#, D.25982
	je	.L1824	#,
	.loc 1 9297 0
	movq	-248(%rbp), %rax	# exp, tmp301
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movzbl	16(%rax), %eax	# _34->common.code, D.25982
	cmpb	$44, %al	#, D.25982
	je	.L1824	#,
.L1851:
	.loc 1 9302 0
	movq	-248(%rbp), %rax	# exp, tmp302
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movzwl	60(%rax), %eax	# *_36, tmp305
	andw	$511, %ax	#, D.25985
	.loc 1 9303 0
	movzwl	%ax, %edx	# D.25985, D.25983
	movq	-248(%rbp), %rax	# exp, tmp306
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	8(%rax), %rax	# _39->common.type, D.25984
	movzwl	60(%rax), %eax	# *_40, tmp309
	andw	$511, %ax	#, D.25985
	movzwl	%ax, %eax	# D.25985, D.25983
	.loc 1 9302 0
	cmpl	%eax, %edx	# D.25983, D.25983
	jge	.L1834	#,
	.loc 1 9304 0
	jmp	.L1824	#
.L1834:
	.loc 1 9312 0
	movq	-248(%rbp), %rax	# exp, tmp310
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-264(%rbp), %rdx	# if_true_label, tmp311
	movq	-256(%rbp), %rcx	# if_false_label, tmp312
	movq	%rcx, %rsi	# tmp312,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9313 0
	jmp	.L1853	#
.L1832:
	.loc 1 9318 0
	movq	placeholder_list(%rip), %rdx	# placeholder_list, placeholder_list.850
	movq	-248(%rbp), %rax	# exp, tmp313
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25984,
	call	tree_cons	#
	movq	%rax, placeholder_list(%rip)	# placeholder_list.851, placeholder_list
	.loc 1 9320 0
	movq	-248(%rbp), %rax	# exp, tmp314
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-264(%rbp), %rdx	# if_true_label, tmp315
	movq	-256(%rbp), %rcx	# if_false_label, tmp316
	movq	%rcx, %rsi	# tmp316,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9321 0
	movq	placeholder_list(%rip), %rax	# placeholder_list, placeholder_list.852
	movq	(%rax), %rax	# placeholder_list.852_48->common.chain, placeholder_list.853
	movq	%rax, placeholder_list(%rip)	# placeholder_list.853, placeholder_list
	.loc 1 9322 0
	jmp	.L1853	#
.L1833:
	.loc 1 9338 0
	movq	-248(%rbp), %rax	# exp, tmp317
	movq	40(%rax), %rcx	# exp_18(D)->exp.operands, D.25984
	movq	-248(%rbp), %rax	# exp, tmp318
	movq	32(%rax), %rdx	# exp_18(D)->exp.operands, D.25984
	movq	-248(%rbp), %rax	# exp, tmp319
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movq	%rax, %rsi	# D.25984,
	movl	$102, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	-264(%rbp), %rcx	# if_true_label, tmp320
	movq	-256(%rbp), %rdx	# if_false_label, tmp321
	movq	%rcx, %r8	# tmp320,
	movq	%rdx, %rcx	# tmp321,
	movl	$102, %edx	#,
	movl	$102, %esi	#,
	movq	%rax, %rdi	# D.25984,
	call	do_compare_and_jump	#
	.loc 1 9342 0
	jmp	.L1853	#
.L1835:
	.loc 1 9353 0
	movq	-248(%rbp), %rax	# exp, tmp322
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movzbl	16(%rax), %eax	# _54->common.code, D.25982
	.loc 1 9352 0
	cmpb	$25, %al	#, D.25982
	jne	.L1857	#,
	.loc 1 9354 0
	movq	-248(%rbp), %rax	# exp, tmp323
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movzwl	60(%rax), %eax	# *_56, tmp326
	andw	$511, %ax	#, D.25985
	movzwl	%ax, %eax	# D.25985, D.25983
	cmpl	$64, %eax	#, D.25983
	jg	.L1857	#,
	.loc 1 9355 0
	movq	-248(%rbp), %rax	# exp, tmp327
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	tree_floor_log2	#
	movl	%eax, -200(%rbp)	# tmp328, i
	cmpl	$0, -200(%rbp)	#, i
	js	.L1857	#,
	.loc 1 9356 0
	movl	-200(%rbp), %eax	# i, tmp329
	addl	$1, %eax	#, D.25983
	movl	$0, %edx	#,
	movl	$1, %esi	#,
	movl	%eax, %edi	# D.25986,
	call	mode_for_size	#
	movl	%eax, -196(%rbp)	# tmp330, mode
	cmpl	$51, -196(%rbp)	#, mode
	je	.L1857	#,
	.loc 1 9357 0
	movl	-196(%rbp), %eax	# mode, tmp331
	movl	$1, %esi	#,
	movl	%eax, %edi	# tmp331,
	call	type_for_mode	#
	movq	%rax, -152(%rbp)	# tmp332, type
	cmpq	$0, -152(%rbp)	#, type
	je	.L1857	#,
	.loc 1 9358 0
	movq	-152(%rbp), %rax	# type, tmp333
	movzwl	60(%rax), %eax	# *type_64, tmp336
	andw	$511, %ax	#, D.25985
	movzwl	%ax, %edx	# D.25985, D.25983
	movq	-248(%rbp), %rax	# exp, tmp337
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movzwl	60(%rax), %eax	# *_67, tmp340
	andw	$511, %ax	#, D.25985
	movzwl	%ax, %eax	# D.25985, D.25983
	cmpl	%eax, %edx	# D.25983, D.25983
	jge	.L1857	#,
	.loc 1 9359 0
	movq	optab_table+328(%rip), %rdx	# optab_table, D.25987
	movq	-152(%rbp), %rax	# type, tmp341
	movzbl	61(%rax), %eax	# *type_64, tmp344
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, D.25983
	cltq
	salq	$4, %rax	#, tmp346
	addq	%rdx, %rax	# D.25987, tmp347
	movl	8(%rax), %eax	# _70->handlers[_72].insn_code, D.25989
	cmpl	$1317, %eax	#, D.25989
	je	.L1857	#,
	.loc 1 9362 0
	movq	-248(%rbp), %rdx	# exp, tmp348
	movq	-152(%rbp), %rax	# type, tmp349
	movq	%rdx, %rsi	# tmp348,
	movq	%rax, %rdi	# tmp349,
	call	convert	#
	movq	-264(%rbp), %rdx	# if_true_label, tmp350
	movq	-256(%rbp), %rcx	# if_false_label, tmp351
	movq	%rcx, %rsi	# tmp351,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9363 0
	jmp	.L1853	#
.L1857:
	.loc 1 9365 0
	jmp	.L1824	#
.L1838:
	.loc 1 9368 0
	movq	-248(%rbp), %rax	# exp, tmp352
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-256(%rbp), %rdx	# if_false_label, tmp353
	movq	-264(%rbp), %rcx	# if_true_label, tmp354
	movq	%rcx, %rsi	# tmp354,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9369 0
	jmp	.L1853	#
.L1836:
	.loc 1 9372 0
	cmpq	$0, -256(%rbp)	#, if_false_label
	jne	.L1858	#,
	.loc 1 9373 0
	call	gen_label_rtx	#
	movq	%rax, -168(%rbp)	# tmp355, drop_through_label
	movq	-168(%rbp), %rax	# drop_through_label, tmp356
	movq	%rax, -256(%rbp)	# tmp356, if_false_label
.L1858:
	.loc 1 9374 0
	movq	-248(%rbp), %rax	# exp, tmp357
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-256(%rbp), %rcx	# if_false_label, tmp358
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp358,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9375 0
	call	start_cleanup_deferral	#
	.loc 1 9376 0
	movq	-248(%rbp), %rax	# exp, tmp359
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-264(%rbp), %rdx	# if_true_label, tmp360
	movq	-256(%rbp), %rcx	# if_false_label, tmp361
	movq	%rcx, %rsi	# tmp361,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9377 0
	call	end_cleanup_deferral	#
	.loc 1 9378 0
	jmp	.L1853	#
.L1837:
	.loc 1 9381 0
	cmpq	$0, -264(%rbp)	#, if_true_label
	jne	.L1859	#,
	.loc 1 9382 0
	call	gen_label_rtx	#
	movq	%rax, -168(%rbp)	# tmp362, drop_through_label
	movq	-168(%rbp), %rax	# drop_through_label, tmp363
	movq	%rax, -264(%rbp)	# tmp363, if_true_label
.L1859:
	.loc 1 9383 0
	movq	-248(%rbp), %rax	# exp, tmp364
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-264(%rbp), %rdx	# if_true_label, tmp365
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9384 0
	call	start_cleanup_deferral	#
	.loc 1 9385 0
	movq	-248(%rbp), %rax	# exp, tmp366
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-264(%rbp), %rdx	# if_true_label, tmp367
	movq	-256(%rbp), %rcx	# if_false_label, tmp368
	movq	%rcx, %rsi	# tmp368,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9386 0
	call	end_cleanup_deferral	#
	.loc 1 9387 0
	jmp	.L1853	#
.L1829:
	.loc 1 9390 0
	call	push_temp_slots	#
	.loc 1 9391 0
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.25990
	movq	-248(%rbp), %rax	# exp, tmp369
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# D.25984,
	call	expand_expr	#
	.loc 1 9392 0
	movl	$0, %edi	#,
	call	preserve_temp_slots	#
	.loc 1 9393 0
	call	free_temp_slots	#
	.loc 1 9394 0
	call	pop_temp_slots	#
	.loc 1 9395 0
	call	emit_queue	#
	.loc 1 9396 0
	call	do_pending_stack_adjust	#
	.loc 1 9397 0
	movq	-248(%rbp), %rax	# exp, tmp370
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-264(%rbp), %rdx	# if_true_label, tmp371
	movq	-256(%rbp), %rcx	# if_false_label, tmp372
	movq	%rcx, %rsi	# tmp372,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9398 0
	jmp	.L1853	#
.L1828:
.LBB151:
	.loc 1 9410 0
	movl	$0, -228(%rbp)	#, volatilep
	.loc 1 9414 0
	leaq	-236(%rbp), %r9	#, tmp373
	leaq	-232(%rbp), %r8	#, tmp374
	leaq	-176(%rbp), %rcx	#, tmp375
	leaq	-184(%rbp), %rdx	#, tmp376
	leaq	-192(%rbp), %rsi	#, tmp377
	movq	-248(%rbp), %rax	# exp, tmp378
	leaq	-228(%rbp), %rdi	#, tmp379
	movq	%rdi, (%rsp)	# tmp379,
	movq	%rax, %rdi	# tmp378,
	call	get_inner_reference	#
	.loc 1 9417 0
	movl	-236(%rbp), %edx	# unsignedp, unsignedp.854
	movq	-192(%rbp), %rax	# bitsize, bitsize.855
	movl	%edx, %esi	# unsignedp.854,
	movl	%eax, %edi	# D.25986,
	call	type_for_size	#
	movq	%rax, -144(%rbp)	# tmp380, type
	.loc 1 9418 0
	cmpq	$0, -144(%rbp)	#, type
	je	.L1824	#,
	.loc 1 9419 0
	movq	-192(%rbp), %rax	# bitsize, bitsize.856
	testq	%rax, %rax	# bitsize.856
	js	.L1824	#,
	.loc 1 9420 0
	movq	-144(%rbp), %rax	# type, tmp381
	movzwl	60(%rax), %eax	# *type_90, tmp384
	andw	$511, %ax	#, D.25985
	movzwl	%ax, %edx	# D.25985, D.25983
	movq	-248(%rbp), %rax	# exp, tmp385
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movzwl	60(%rax), %eax	# *_94, tmp388
	andw	$511, %ax	#, D.25985
	movzwl	%ax, %eax	# D.25985, D.25983
	cmpl	%eax, %edx	# D.25983, D.25983
	jge	.L1824	#,
	.loc 1 9421 0
	movq	optab_table+328(%rip), %rdx	# optab_table, D.25987
	movq	-144(%rbp), %rax	# type, tmp389
	movzbl	61(%rax), %eax	# *type_90, tmp392
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, D.25983
	cltq
	salq	$4, %rax	#, tmp394
	addq	%rdx, %rax	# D.25987, tmp395
	movl	8(%rax), %eax	# _97->handlers[_99].insn_code, D.25989
	cmpl	$1317, %eax	#, D.25989
	je	.L1824	#,
	.loc 1 9424 0
	movq	-248(%rbp), %rdx	# exp, tmp396
	movq	-144(%rbp), %rax	# type, tmp397
	movq	%rdx, %rsi	# tmp396,
	movq	%rax, %rdi	# tmp397,
	call	convert	#
	movq	-264(%rbp), %rdx	# if_true_label, tmp398
	movq	-256(%rbp), %rcx	# if_false_label, tmp399
	movq	%rcx, %rsi	# tmp399,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	jmp	.L1853	#
.L1830:
.LBE151:
	.loc 1 9432 0
	movq	-248(%rbp), %rax	# exp, tmp400
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	integer_onep	#
	testl	%eax, %eax	# D.25983
	je	.L1861	#,
	.loc 1 9433 0
	movq	-248(%rbp), %rax	# exp, tmp401
	movq	48(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25983
	je	.L1861	#,
	.loc 1 9434 0
	movq	-248(%rbp), %rax	# exp, tmp402
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-264(%rbp), %rdx	# if_true_label, tmp403
	movq	-256(%rbp), %rcx	# if_false_label, tmp404
	movq	%rcx, %rsi	# tmp404,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	jmp	.L1862	#
.L1861:
	.loc 1 9436 0
	movq	-248(%rbp), %rax	# exp, tmp405
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25983
	je	.L1863	#,
	.loc 1 9437 0
	movq	-248(%rbp), %rax	# exp, tmp406
	movq	48(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	integer_onep	#
	testl	%eax, %eax	# D.25983
	je	.L1863	#,
	.loc 1 9438 0
	movq	-248(%rbp), %rax	# exp, tmp407
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-256(%rbp), %rdx	# if_false_label, tmp408
	movq	-264(%rbp), %rcx	# if_true_label, tmp409
	movq	%rcx, %rsi	# tmp409,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	jmp	.L1862	#
.L1863:
.LBB152:
	.loc 1 9442 0
	call	gen_label_rtx	#
	movq	%rax, -136(%rbp)	# tmp410, label1
	.loc 1 9443 0
	call	gen_label_rtx	#
	movq	%rax, -168(%rbp)	# tmp411, drop_through_label
	.loc 1 9445 0
	movq	-248(%rbp), %rax	# exp, tmp412
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-136(%rbp), %rcx	# label1, tmp413
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp413,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9447 0
	call	start_cleanup_deferral	#
	.loc 1 9449 0
	cmpq	$0, -264(%rbp)	#, if_true_label
	je	.L1864	#,
	.loc 1 9449 0 is_stmt 0 discriminator 1
	movq	-264(%rbp), %rdx	# if_true_label, iftmp.857
	jmp	.L1865	#
.L1864:
	.loc 1 9449 0 discriminator 2
	movq	-168(%rbp), %rdx	# drop_through_label, iftmp.857
.L1865:
	.loc 1 9449 0 discriminator 3
	cmpq	$0, -256(%rbp)	#, if_false_label
	je	.L1866	#,
	.loc 1 9449 0 discriminator 4
	movq	-256(%rbp), %rax	# if_false_label, iftmp.858
	jmp	.L1867	#
.L1866:
	.loc 1 9449 0 discriminator 5
	movq	-168(%rbp), %rax	# drop_through_label, iftmp.858
.L1867:
	.loc 1 9449 0 discriminator 6
	movq	-248(%rbp), %rcx	# exp, tmp414
	movq	40(%rcx), %rcx	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rsi	# iftmp.858,
	movq	%rcx, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9453 0 is_stmt 1 discriminator 6
	call	do_pending_stack_adjust	#
	.loc 1 9454 0 discriminator 6
	movq	-136(%rbp), %rax	# label1, tmp415
	movq	%rax, %rdi	# tmp415,
	call	emit_label	#
	.loc 1 9457 0 discriminator 6
	cmpq	$0, -264(%rbp)	#, if_true_label
	je	.L1868	#,
	.loc 1 9457 0 is_stmt 0 discriminator 1
	movq	-264(%rbp), %rdx	# if_true_label, iftmp.859
	jmp	.L1869	#
.L1868:
	.loc 1 9457 0 discriminator 2
	movq	-168(%rbp), %rdx	# drop_through_label, iftmp.859
.L1869:
	.loc 1 9457 0 discriminator 3
	cmpq	$0, -256(%rbp)	#, if_false_label
	je	.L1870	#,
	.loc 1 9457 0 discriminator 4
	movq	-256(%rbp), %rax	# if_false_label, iftmp.860
	jmp	.L1871	#
.L1870:
	.loc 1 9457 0 discriminator 5
	movq	-168(%rbp), %rax	# drop_through_label, iftmp.860
.L1871:
	.loc 1 9457 0 discriminator 6
	movq	-248(%rbp), %rcx	# exp, tmp416
	movq	48(%rcx), %rcx	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rsi	# iftmp.860,
	movq	%rcx, %rdi	# D.25984,
	call	do_jump	#
	.loc 1 9460 0 is_stmt 1 discriminator 6
	call	end_cleanup_deferral	#
.LBE152:
	.loc 1 9462 0 discriminator 6
	jmp	.L1853	#
.L1862:
	.loc 1 9462 0 is_stmt 0
	jmp	.L1853	#
.L1843:
.LBB153:
	.loc 1 9466 0 is_stmt 1
	movq	-248(%rbp), %rax	# exp, tmp417
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	8(%rax), %rax	# _125->common.type, tmp418
	movq	%rax, -128(%rbp)	# tmp418, inner_type
	.loc 1 9468 0
	movq	-128(%rbp), %rax	# inner_type, tmp419
	movzbl	61(%rax), %eax	# *inner_type_126, tmp422
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, D.25983
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$6, %eax	#, D.25991
	je	.L1872	#,
	.loc 1 9469 0
	movq	-128(%rbp), %rax	# inner_type, tmp424
	movzbl	61(%rax), %eax	# *inner_type_126, tmp427
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, D.25983
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$5, %eax	#, D.25991
	jne	.L1873	#,
.L1872:
.LBB154:
	.loc 1 9471 0
	movq	-248(%rbp), %rax	# exp, tmp429
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	save_expr	#
	movq	%rax, -120(%rbp)	# tmp430, exp0
	.loc 1 9472 0
	movq	-248(%rbp), %rax	# exp, tmp431
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	save_expr	#
	movq	%rax, -112(%rbp)	# tmp432, exp1
	.loc 1 9474 0
	movq	-128(%rbp), %rax	# inner_type, tmp433
	movq	8(%rax), %rax	# inner_type_126->common.type, D.25984
	movq	-112(%rbp), %rdx	# exp1, tmp434
	movq	%rax, %rsi	# D.25984,
	movl	$128, %edi	#,
	call	build1	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %rbx	#, D.25984
	movq	-128(%rbp), %rax	# inner_type, tmp435
	movq	8(%rax), %rax	# inner_type_126->common.type, D.25984
	movq	-120(%rbp), %rdx	# exp0, tmp436
	movq	%rax, %rsi	# D.25984,
	movl	$128, %edi	#,
	call	build1	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %rdx	#, D.25984
	movq	-248(%rbp), %rax	# exp, tmp437
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movq	%rbx, %rcx	# D.25984,
	movq	%rax, %rsi	# D.25984,
	movl	$101, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %rbx	#, D.25984
	movq	-128(%rbp), %rax	# inner_type, tmp438
	movq	8(%rax), %rax	# inner_type_126->common.type, D.25984
	movq	-112(%rbp), %rdx	# exp1, tmp439
	movq	%rax, %rsi	# D.25984,
	movl	$127, %edi	#,
	call	build1	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %r12	#, D.25984
	movq	-128(%rbp), %rax	# inner_type, tmp440
	movq	8(%rax), %rax	# inner_type_126->common.type, D.25984
	movq	-120(%rbp), %rdx	# exp0, tmp441
	movq	%rax, %rsi	# D.25984,
	movl	$127, %edi	#,
	call	build1	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %rdx	#, D.25984
	movq	-248(%rbp), %rax	# exp, tmp442
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movq	%r12, %rcx	# D.25984,
	movq	%rax, %rsi	# D.25984,
	movl	$101, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %rdx	#, D.25984
	movq	-248(%rbp), %rax	# exp, tmp443
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movq	%rbx, %rcx	# D.25984,
	movq	%rax, %rsi	# D.25984,
	movl	$91, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	-264(%rbp), %rdx	# if_true_label, tmp444
	movq	-256(%rbp), %rcx	# if_false_label, tmp445
	movq	%rcx, %rsi	# tmp445,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
.LBE154:
	.loc 1 9470 0
	jmp	.L1874	#
.L1873:
	.loc 1 9493 0
	movq	-248(%rbp), %rax	# exp, tmp446
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25983
	je	.L1875	#,
	.loc 1 9494 0
	movq	-248(%rbp), %rax	# exp, tmp447
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-256(%rbp), %rdx	# if_false_label, tmp448
	movq	-264(%rbp), %rcx	# if_true_label, tmp449
	movq	%rcx, %rsi	# tmp449,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	jmp	.L1874	#
.L1875:
	.loc 1 9496 0
	movq	-128(%rbp), %rax	# inner_type, tmp450
	movzbl	61(%rax), %eax	# *inner_type_126, tmp453
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, D.25983
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$1, %eax	#, D.25991
	jne	.L1876	#,
	.loc 1 9497 0
	movq	-128(%rbp), %rax	# inner_type, tmp455
	movzbl	61(%rax), %eax	# *inner_type_126, tmp458
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, D.25992
	movl	$0, %edx	#,
	movl	%eax, %esi	# D.25992,
	movl	$103, %edi	#,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25983
	jne	.L1876	#,
	.loc 1 9498 0
	movq	-264(%rbp), %rdx	# if_true_label, tmp459
	movq	-256(%rbp), %rcx	# if_false_label, tmp460
	movq	-248(%rbp), %rax	# exp, tmp461
	movq	%rcx, %rsi	# tmp460,
	movq	%rax, %rdi	# tmp461,
	call	do_jump_by_parts_equality	#
	jmp	.L1874	#
.L1876:
	.loc 1 9500 0
	movq	-264(%rbp), %rcx	# if_true_label, tmp462
	movq	-256(%rbp), %rdx	# if_false_label, tmp463
	movq	-248(%rbp), %rax	# exp, tmp464
	movq	%rcx, %r8	# tmp462,
	movq	%rdx, %rcx	# tmp463,
	movl	$103, %edx	#,
	movl	$103, %esi	#,
	movq	%rax, %rdi	# tmp464,
	call	do_compare_and_jump	#
	.loc 1 9501 0
	jmp	.L1853	#
.L1874:
	jmp	.L1853	#
.L1844:
.LBE153:
.LBB155:
	.loc 1 9506 0
	movq	-248(%rbp), %rax	# exp, tmp465
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	8(%rax), %rax	# _167->common.type, tmp466
	movq	%rax, -104(%rbp)	# tmp466, inner_type
	.loc 1 9508 0
	movq	-104(%rbp), %rax	# inner_type, tmp467
	movzbl	61(%rax), %eax	# *inner_type_168, tmp470
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, D.25983
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$6, %eax	#, D.25991
	je	.L1877	#,
	.loc 1 9509 0
	movq	-104(%rbp), %rax	# inner_type, tmp472
	movzbl	61(%rax), %eax	# *inner_type_168, tmp475
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, D.25983
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$5, %eax	#, D.25991
	jne	.L1878	#,
.L1877:
.LBB156:
	.loc 1 9511 0
	movq	-248(%rbp), %rax	# exp, tmp477
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	save_expr	#
	movq	%rax, -96(%rbp)	# tmp478, exp0
	.loc 1 9512 0
	movq	-248(%rbp), %rax	# exp, tmp479
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	save_expr	#
	movq	%rax, -88(%rbp)	# tmp480, exp1
	.loc 1 9514 0
	movq	-104(%rbp), %rax	# inner_type, tmp481
	movq	8(%rax), %rax	# inner_type_168->common.type, D.25984
	movq	-88(%rbp), %rdx	# exp1, tmp482
	movq	%rax, %rsi	# D.25984,
	movl	$128, %edi	#,
	call	build1	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %rbx	#, D.25984
	movq	-104(%rbp), %rax	# inner_type, tmp483
	movq	8(%rax), %rax	# inner_type_168->common.type, D.25984
	movq	-96(%rbp), %rdx	# exp0, tmp484
	movq	%rax, %rsi	# D.25984,
	movl	$128, %edi	#,
	call	build1	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %rdx	#, D.25984
	movq	-248(%rbp), %rax	# exp, tmp485
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movq	%rbx, %rcx	# D.25984,
	movq	%rax, %rsi	# D.25984,
	movl	$102, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %rbx	#, D.25984
	movq	-104(%rbp), %rax	# inner_type, tmp486
	movq	8(%rax), %rax	# inner_type_168->common.type, D.25984
	movq	-88(%rbp), %rdx	# exp1, tmp487
	movq	%rax, %rsi	# D.25984,
	movl	$127, %edi	#,
	call	build1	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %r12	#, D.25984
	movq	-104(%rbp), %rax	# inner_type, tmp488
	movq	8(%rax), %rax	# inner_type_168->common.type, D.25984
	movq	-96(%rbp), %rdx	# exp0, tmp489
	movq	%rax, %rsi	# D.25984,
	movl	$127, %edi	#,
	call	build1	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %rdx	#, D.25984
	movq	-248(%rbp), %rax	# exp, tmp490
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movq	%r12, %rcx	# D.25984,
	movq	%rax, %rsi	# D.25984,
	movl	$102, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, %rdx	#, D.25984
	movq	-248(%rbp), %rax	# exp, tmp491
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movq	%rbx, %rcx	# D.25984,
	movq	%rax, %rsi	# D.25984,
	movl	$92, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	-264(%rbp), %rdx	# if_true_label, tmp492
	movq	-256(%rbp), %rcx	# if_false_label, tmp493
	movq	%rcx, %rsi	# tmp493,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
.LBE156:
	.loc 1 9510 0
	jmp	.L1879	#
.L1878:
	.loc 1 9533 0
	movq	-248(%rbp), %rax	# exp, tmp494
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	integer_zerop	#
	testl	%eax, %eax	# D.25983
	je	.L1880	#,
	.loc 1 9534 0
	movq	-248(%rbp), %rax	# exp, tmp495
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	-264(%rbp), %rdx	# if_true_label, tmp496
	movq	-256(%rbp), %rcx	# if_false_label, tmp497
	movq	%rcx, %rsi	# tmp497,
	movq	%rax, %rdi	# D.25984,
	call	do_jump	#
	jmp	.L1879	#
.L1880:
	.loc 1 9536 0
	movq	-104(%rbp), %rax	# inner_type, tmp498
	movzbl	61(%rax), %eax	# *inner_type_168, tmp501
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, D.25983
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$1, %eax	#, D.25991
	jne	.L1881	#,
	.loc 1 9537 0
	movq	-104(%rbp), %rax	# inner_type, tmp503
	movzbl	61(%rax), %eax	# *inner_type_168, tmp506
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, D.25992
	movl	$0, %edx	#,
	movl	%eax, %esi	# D.25992,
	movl	$102, %edi	#,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25983
	jne	.L1881	#,
	.loc 1 9538 0
	movq	-256(%rbp), %rdx	# if_false_label, tmp507
	movq	-264(%rbp), %rcx	# if_true_label, tmp508
	movq	-248(%rbp), %rax	# exp, tmp509
	movq	%rcx, %rsi	# tmp508,
	movq	%rax, %rdi	# tmp509,
	call	do_jump_by_parts_equality	#
	jmp	.L1879	#
.L1881:
	.loc 1 9540 0
	movq	-264(%rbp), %rcx	# if_true_label, tmp510
	movq	-256(%rbp), %rdx	# if_false_label, tmp511
	movq	-248(%rbp), %rax	# exp, tmp512
	movq	%rcx, %r8	# tmp510,
	movq	%rdx, %rcx	# tmp511,
	movl	$102, %edx	#,
	movl	$102, %esi	#,
	movq	%rax, %rdi	# tmp512,
	call	do_compare_and_jump	#
	.loc 1 9541 0
	jmp	.L1853	#
.L1879:
	jmp	.L1853	#
.L1839:
.LBE155:
	.loc 1 9545 0
	movq	-248(%rbp), %rax	# exp, tmp513
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	8(%rax), %rax	# _209->common.type, D.25984
	movzbl	61(%rax), %eax	# *_210, tmp516
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, tmp517
	movl	%eax, -196(%rbp)	# tmp517, mode
	.loc 1 9546 0
	movl	-196(%rbp), %eax	# mode, mode.861
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$1, %eax	#, D.25991
	jne	.L1882	#,
	.loc 1 9547 0
	movl	-196(%rbp), %eax	# mode, tmp519
	movl	$0, %edx	#,
	movl	%eax, %esi	# tmp519,
	movl	$107, %edi	#,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25983
	jne	.L1882	#,
	.loc 1 9548 0
	movq	-264(%rbp), %rcx	# if_true_label, tmp520
	movq	-256(%rbp), %rdx	# if_false_label, tmp521
	movq	-248(%rbp), %rax	# exp, tmp522
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp522,
	call	do_jump_by_parts_greater	#
	.loc 1 9551 0
	jmp	.L1853	#
.L1882:
	.loc 1 9550 0
	movq	-264(%rbp), %rcx	# if_true_label, tmp523
	movq	-256(%rbp), %rdx	# if_false_label, tmp524
	movq	-248(%rbp), %rax	# exp, tmp525
	movq	%rcx, %r8	# tmp523,
	movq	%rdx, %rcx	# tmp524,
	movl	$111, %edx	#,
	movl	$107, %esi	#,
	movq	%rax, %rdi	# tmp525,
	call	do_compare_and_jump	#
	.loc 1 9551 0
	jmp	.L1853	#
.L1840:
	.loc 1 9554 0
	movq	-248(%rbp), %rax	# exp, tmp526
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	8(%rax), %rax	# _216->common.type, D.25984
	movzbl	61(%rax), %eax	# *_217, tmp529
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, tmp530
	movl	%eax, -196(%rbp)	# tmp530, mode
	.loc 1 9555 0
	movl	-196(%rbp), %eax	# mode, mode.862
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$1, %eax	#, D.25991
	jne	.L1884	#,
	.loc 1 9556 0
	movl	-196(%rbp), %eax	# mode, tmp532
	movl	$0, %edx	#,
	movl	%eax, %esi	# tmp532,
	movl	$106, %edi	#,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25983
	jne	.L1884	#,
	.loc 1 9557 0
	movq	-256(%rbp), %rcx	# if_false_label, tmp533
	movq	-264(%rbp), %rdx	# if_true_label, tmp534
	movq	-248(%rbp), %rax	# exp, tmp535
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp535,
	call	do_jump_by_parts_greater	#
	.loc 1 9560 0
	jmp	.L1853	#
.L1884:
	.loc 1 9559 0
	movq	-264(%rbp), %rcx	# if_true_label, tmp536
	movq	-256(%rbp), %rdx	# if_false_label, tmp537
	movq	-248(%rbp), %rax	# exp, tmp538
	movq	%rcx, %r8	# tmp536,
	movq	%rdx, %rcx	# tmp537,
	movl	$110, %edx	#,
	movl	$106, %esi	#,
	movq	%rax, %rdi	# tmp538,
	call	do_compare_and_jump	#
	.loc 1 9560 0
	jmp	.L1853	#
.L1841:
	.loc 1 9563 0
	movq	-248(%rbp), %rax	# exp, tmp539
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	8(%rax), %rax	# _223->common.type, D.25984
	movzbl	61(%rax), %eax	# *_224, tmp542
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, tmp543
	movl	%eax, -196(%rbp)	# tmp543, mode
	.loc 1 9564 0
	movl	-196(%rbp), %eax	# mode, mode.863
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$1, %eax	#, D.25991
	jne	.L1886	#,
	.loc 1 9565 0
	movl	-196(%rbp), %eax	# mode, tmp545
	movl	$0, %edx	#,
	movl	%eax, %esi	# tmp545,
	movl	$105, %edi	#,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25983
	jne	.L1886	#,
	.loc 1 9566 0
	movq	-264(%rbp), %rcx	# if_true_label, tmp546
	movq	-256(%rbp), %rdx	# if_false_label, tmp547
	movq	-248(%rbp), %rax	# exp, tmp548
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp548,
	call	do_jump_by_parts_greater	#
	.loc 1 9569 0
	jmp	.L1853	#
.L1886:
	.loc 1 9568 0
	movq	-264(%rbp), %rcx	# if_true_label, tmp549
	movq	-256(%rbp), %rdx	# if_false_label, tmp550
	movq	-248(%rbp), %rax	# exp, tmp551
	movq	%rcx, %r8	# tmp549,
	movq	%rdx, %rcx	# tmp550,
	movl	$109, %edx	#,
	movl	$105, %esi	#,
	movq	%rax, %rdi	# tmp551,
	call	do_compare_and_jump	#
	.loc 1 9569 0
	jmp	.L1853	#
.L1842:
	.loc 1 9572 0
	movq	-248(%rbp), %rax	# exp, tmp552
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	8(%rax), %rax	# _230->common.type, D.25984
	movzbl	61(%rax), %eax	# *_231, tmp555
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, tmp556
	movl	%eax, -196(%rbp)	# tmp556, mode
	.loc 1 9573 0
	movl	-196(%rbp), %eax	# mode, mode.864
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$1, %eax	#, D.25991
	jne	.L1888	#,
	.loc 1 9574 0
	movl	-196(%rbp), %eax	# mode, tmp558
	movl	$0, %edx	#,
	movl	%eax, %esi	# tmp558,
	movl	$104, %edi	#,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25983
	jne	.L1888	#,
	.loc 1 9575 0
	movq	-256(%rbp), %rcx	# if_false_label, tmp559
	movq	-264(%rbp), %rdx	# if_true_label, tmp560
	movq	-248(%rbp), %rax	# exp, tmp561
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp561,
	call	do_jump_by_parts_greater	#
	.loc 1 9578 0
	jmp	.L1853	#
.L1888:
	.loc 1 9577 0
	movq	-264(%rbp), %rcx	# if_true_label, tmp562
	movq	-256(%rbp), %rdx	# if_false_label, tmp563
	movq	-248(%rbp), %rax	# exp, tmp564
	movq	%rcx, %r8	# tmp562,
	movq	%rdx, %rcx	# tmp563,
	movl	$108, %edx	#,
	movl	$104, %esi	#,
	movq	%rax, %rdi	# tmp564,
	call	do_compare_and_jump	#
	.loc 1 9578 0
	jmp	.L1853	#
.L1845:
.LBB157:
	.loc 1 9586 0
	cmpl	$103, -204(%rbp)	#, code
	jne	.L1890	#,
	.loc 1 9587 0
	movl	$112, -224(%rbp)	#, cmp
	movl	$113, -220(%rbp)	#, rcmp
	jmp	.L1891	#
.L1890:
	.loc 1 9589 0
	movl	$113, -224(%rbp)	#, cmp
	movl	$112, -220(%rbp)	#, rcmp
.L1891:
	.loc 1 9590 0
	movq	-248(%rbp), %rax	# exp, tmp565
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	8(%rax), %rax	# _241->common.type, D.25984
	movzbl	61(%rax), %eax	# *_242, tmp568
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, tmp569
	movl	%eax, -196(%rbp)	# tmp569, mode
	.loc 1 9592 0
	movl	$0, -216(%rbp)	#, do_rev
	.loc 1 9593 0
	movl	-196(%rbp), %ecx	# mode, tmp570
	movl	-224(%rbp), %eax	# cmp, tmp571
	movl	$0, %edx	#,
	movl	%ecx, %esi	# tmp570,
	movl	%eax, %edi	# tmp571,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25983
	jne	.L1892	#,
	.loc 1 9594 0
	movl	-196(%rbp), %ecx	# mode, tmp572
	movl	-220(%rbp), %eax	# rcmp, tmp573
	movl	$0, %edx	#,
	movl	%ecx, %esi	# tmp572,
	movl	%eax, %edi	# tmp573,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25983
	jne	.L1893	#,
	.loc 1 9597 0
	cmpl	$112, -220(%rbp)	#, rcmp
	jne	.L1892	#,
.L1893:
	.loc 1 9598 0
	movl	$1, -216(%rbp)	#, do_rev
.L1892:
	.loc 1 9600 0
	cmpl	$0, -216(%rbp)	#, do_rev
	jne	.L1894	#,
	.loc 1 9601 0
	movq	-264(%rbp), %rdi	# if_true_label, tmp574
	movq	-256(%rbp), %rcx	# if_false_label, tmp575
	movl	-224(%rbp), %edx	# cmp, tmp576
	movl	-224(%rbp), %esi	# cmp, tmp577
	movq	-248(%rbp), %rax	# exp, tmp578
	movq	%rdi, %r8	# tmp574,
	movq	%rax, %rdi	# tmp578,
	call	do_compare_and_jump	#
.LBE157:
	.loc 1 9605 0
	jmp	.L1853	#
.L1894:
.LBB158:
	.loc 1 9603 0
	movq	-256(%rbp), %rdi	# if_false_label, tmp579
	movq	-264(%rbp), %rcx	# if_true_label, tmp580
	movl	-220(%rbp), %edx	# rcmp, tmp581
	movl	-220(%rbp), %esi	# rcmp, tmp582
	movq	-248(%rbp), %rax	# exp, tmp583
	movq	%rdi, %r8	# tmp579,
	movq	%rax, %rdi	# tmp583,
	call	do_compare_and_jump	#
.LBE158:
	.loc 1 9605 0
	jmp	.L1853	#
.L1846:
.LBB159:
	.loc 1 9612 0
	movl	$118, -212(%rbp)	#, rcode1
	.loc 1 9613 0
	movl	$97, -208(%rbp)	#, tcode2
	.loc 1 9614 0
	jmp	.L1896	#
.L1847:
	.loc 1 9616 0
	movl	$117, -212(%rbp)	#, rcode1
	.loc 1 9617 0
	movl	$98, -208(%rbp)	#, tcode2
	.loc 1 9618 0
	jmp	.L1896	#
.L1848:
	.loc 1 9620 0
	movl	$116, -212(%rbp)	#, rcode1
	.loc 1 9621 0
	movl	$99, -208(%rbp)	#, tcode2
	.loc 1 9622 0
	jmp	.L1896	#
.L1849:
	.loc 1 9624 0
	movl	$115, -212(%rbp)	#, rcode1
	.loc 1 9625 0
	movl	$100, -208(%rbp)	#, tcode2
	.loc 1 9626 0
	jmp	.L1896	#
.L1850:
	.loc 1 9628 0
	movl	$114, -212(%rbp)	#, rcode1
	.loc 1 9629 0
	movl	$101, -208(%rbp)	#, tcode2
	.loc 1 9630 0
	nop
.L1896:
	.loc 1 9633 0
	movq	-248(%rbp), %rax	# exp, tmp584
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	8(%rax), %rax	# _259->common.type, D.25984
	movzbl	61(%rax), %eax	# *_260, tmp587
	shrb	%al	# D.25988
	movzbl	%al, %eax	# D.25988, tmp588
	movl	%eax, -196(%rbp)	# tmp588, mode
	.loc 1 9634 0
	movl	-196(%rbp), %ecx	# mode, tmp589
	movl	-212(%rbp), %eax	# rcode1, tmp590
	movl	$0, %edx	#,
	movl	%ecx, %esi	# tmp589,
	movl	%eax, %edi	# tmp590,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25983
	je	.L1897	#,
	.loc 1 9635 0
	movq	-264(%rbp), %rdi	# if_true_label, tmp591
	movq	-256(%rbp), %rcx	# if_false_label, tmp592
	movl	-212(%rbp), %edx	# rcode1, tmp593
	movl	-212(%rbp), %esi	# rcode1, tmp594
	movq	-248(%rbp), %rax	# exp, tmp595
	movq	%rdi, %r8	# tmp591,
	movq	%rax, %rdi	# tmp595,
	call	do_compare_and_jump	#
.LBE159:
	.loc 1 9651 0
	jmp	.L1853	#
.L1897:
.LBB161:
.LBB160:
	.loc 1 9639 0
	movq	-248(%rbp), %rax	# exp, tmp596
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	save_expr	#
	movq	%rax, -80(%rbp)	# tmp597, op0
	.loc 1 9640 0
	movq	-248(%rbp), %rax	# exp, tmp598
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	%rax, %rdi	# D.25984,
	call	save_expr	#
	movq	%rax, -72(%rbp)	# tmp599, op1
	.loc 1 9645 0
	movq	-248(%rbp), %rax	# exp, tmp600
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movq	-72(%rbp), %rcx	# op1, tmp601
	movq	-80(%rbp), %rdx	# op0, tmp602
	movq	%rax, %rsi	# D.25984,
	movl	$103, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, -64(%rbp)	# tmp603, cmp0
	.loc 1 9646 0
	movq	-248(%rbp), %rax	# exp, tmp604
	movq	8(%rax), %rsi	# exp_18(D)->common.type, D.25984
	movq	-72(%rbp), %rcx	# op1, tmp605
	movq	-80(%rbp), %rdx	# op0, tmp606
	movl	-208(%rbp), %eax	# tcode2, tmp607
	movl	%eax, %edi	# tmp607,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.25984,
	call	fold	#
	movq	%rax, -56(%rbp)	# tmp608, cmp1
	.loc 1 9647 0
	movq	-248(%rbp), %rax	# exp, tmp609
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movq	-56(%rbp), %rcx	# cmp1, tmp610
	movq	-64(%rbp), %rdx	# cmp0, tmp611
	movq	%rax, %rsi	# D.25984,
	movl	$92, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -248(%rbp)	# tmp612, exp
	.loc 1 9648 0
	movq	-264(%rbp), %rdx	# if_true_label, tmp613
	movq	-256(%rbp), %rcx	# if_false_label, tmp614
	movq	-248(%rbp), %rax	# exp, tmp615
	movq	%rcx, %rsi	# tmp614,
	movq	%rax, %rdi	# tmp615,
	call	do_jump	#
.LBE160:
.LBE161:
	.loc 1 9651 0
	jmp	.L1853	#
.L1831:
	.loc 1 9663 0
	movq	-248(%rbp), %rax	# exp, tmp616
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movzbl	16(%rax), %eax	# _276->common.code, D.25982
	cmpb	$121, %al	#, D.25982
	jne	.L1824	#,
.LBB162:
	.loc 1 9665 0
	movq	-248(%rbp), %rax	# exp, tmp617
	movq	32(%rax), %rax	# exp_18(D)->exp.operands, D.25984
	movq	32(%rax), %rax	# _278->exp.operands, tmp618
	movq	%rax, -48(%rbp)	# tmp618, fndecl
	.loc 1 9666 0
	movq	-248(%rbp), %rax	# exp, tmp619
	movq	40(%rax), %rax	# exp_18(D)->exp.operands, tmp620
	movq	%rax, -40(%rbp)	# tmp620, arglist
	.loc 1 9668 0
	movq	-48(%rbp), %rax	# fndecl, tmp621
	movzbl	16(%rax), %eax	# fndecl_279->common.code, D.25982
	cmpb	$30, %al	#, D.25982
	jne	.L1824	#,
	.loc 1 9669 0
	movq	-48(%rbp), %rax	# fndecl, tmp622
	movzbl	51(%rax), %eax	# *fndecl_279, D.25982
	andl	$96, %eax	#, D.25982
	testb	%al, %al	# D.25982
	je	.L1824	#,
	.loc 1 9670 0
	movq	-48(%rbp), %rax	# fndecl, tmp623
	movl	56(%rax), %eax	# fndecl_279->decl.u1.f, D.25993
	cmpl	$94, %eax	#, D.25993
	jne	.L1824	#,
	.loc 1 9671 0
	cmpq	$0, -40(%rbp)	#, arglist
	je	.L1824	#,
	.loc 1 9672 0
	movq	-40(%rbp), %rax	# arglist, tmp624
	movq	(%rax), %rax	# arglist_280->common.chain, D.25984
	testq	%rax, %rax	# D.25984
	je	.L1824	#,
.LBB163:
	.loc 1 9674 0
	movq	-264(%rbp), %rdx	# if_true_label, tmp625
	movq	-256(%rbp), %rcx	# if_false_label, tmp626
	movq	-248(%rbp), %rax	# exp, tmp627
	movq	%rcx, %rsi	# tmp626,
	movq	%rax, %rdi	# tmp627,
	call	expand_builtin_expect_jump	#
	movq	%rax, -32(%rbp)	# tmp628, seq
	.loc 1 9677 0
	cmpq	$0, -32(%rbp)	#, seq
	je	.L1824	#,
	.loc 1 9679 0
	movq	-32(%rbp), %rax	# seq, tmp629
	movq	%rax, %rdi	# tmp629,
	call	emit_insn	#
	.loc 1 9680 0
	jmp	.L1823	#
.L1824:
.LBE163:
.LBE162:
	.loc 1 9688 0
	movq	-248(%rbp), %rax	# exp, tmp630
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp630,
	call	expand_expr	#
	movq	%rax, -160(%rbp)	# tmp631, temp
	.loc 1 9698 0
	call	do_pending_stack_adjust	#
	.loc 1 9700 0
	call	emit_queue	#
	.loc 1 9702 0
	movq	-160(%rbp), %rax	# temp, tmp632
	movzwl	(%rax), %eax	# temp_287->code, D.25994
	cmpw	$54, %ax	#, D.25994
	je	.L1900	#,
	.loc 1 9703 0
	movq	-160(%rbp), %rax	# temp, tmp633
	movzwl	(%rax), %eax	# temp_287->code, D.25994
	cmpw	$55, %ax	#, D.25994
	jne	.L1901	#,
	.loc 1 9703 0 is_stmt 0 discriminator 1
	movq	-160(%rbp), %rax	# temp, tmp634
	movzbl	2(%rax), %eax	# temp_287->mode, D.25982
	testb	%al, %al	# D.25982
	je	.L1900	#,
.L1901:
	.loc 1 9704 0 is_stmt 1
	movq	-160(%rbp), %rax	# temp, tmp635
	movzwl	(%rax), %eax	# temp_287->code, D.25994
	cmpw	$67, %ax	#, D.25994
	jne	.L1902	#,
.L1900:
.LBB164:
	.loc 1 9706 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.25990
	cmpq	-160(%rbp), %rax	# temp, D.25990
	jne	.L1903	#,
	.loc 1 9706 0 is_stmt 0 discriminator 1
	movq	-256(%rbp), %rax	# if_false_label, iftmp.865
	jmp	.L1904	#
.L1903:
	.loc 1 9706 0 discriminator 2
	movq	-264(%rbp), %rax	# if_true_label, iftmp.865
.L1904:
	.loc 1 9706 0 discriminator 3
	movq	%rax, -24(%rbp)	# iftmp.865, target
	.loc 1 9707 0 is_stmt 1 discriminator 3
	cmpq	$0, -24(%rbp)	#, target
	je	.L1905	#,
	.loc 1 9708 0
	movq	-24(%rbp), %rax	# target, tmp636
	movq	%rax, %rdi	# tmp636,
	call	emit_jump	#
.LBE164:
	.loc 1 9705 0
	jmp	.L1853	#
.L1905:
	jmp	.L1853	#
.L1902:
	.loc 1 9710 0
	movq	-160(%rbp), %rax	# temp, tmp637
	movzbl	2(%rax), %eax	# temp_287->mode, D.25982
	movzbl	%al, %eax	# D.25982, D.25983
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.25991
	cmpl	$1, %eax	#, D.25991
	jne	.L1906	#,
	.loc 1 9711 0
	movq	-160(%rbp), %rax	# temp, tmp639
	movzbl	2(%rax), %eax	# temp_287->mode, D.25982
	movzbl	%al, %eax	# D.25982, D.25992
	movl	$0, %edx	#,
	movl	%eax, %esi	# D.25992,
	movl	$102, %edi	#,
	call	can_compare_p	#
	testl	%eax, %eax	# D.25983
	jne	.L1906	#,
	.loc 1 9713 0
	movq	-256(%rbp), %rdx	# if_false_label, tmp640
	movq	-264(%rbp), %rcx	# if_true_label, tmp641
	movq	-160(%rbp), %rax	# temp, tmp642
	movq	%rcx, %rsi	# tmp641,
	movq	%rax, %rdi	# tmp642,
	call	do_jump_by_parts_equality_rtx	#
	jmp	.L1853	#
.L1906:
	.loc 1 9714 0
	movq	-160(%rbp), %rax	# temp, tmp643
	movzbl	2(%rax), %eax	# temp_287->mode, D.25982
	testb	%al, %al	# D.25982
	je	.L1907	#,
	.loc 1 9717 0
	movq	-160(%rbp), %rax	# temp, tmp644
	movzbl	2(%rax), %eax	# temp_287->mode, D.25982
	.loc 1 9715 0
	movzbl	%al, %edi	# D.25982, D.25992
	.loc 1 9716 0
	movq	-248(%rbp), %rax	# exp, tmp645
	movq	8(%rax), %rax	# exp_18(D)->common.type, D.25984
	movzbl	17(%rax), %eax	# *_301, tmp648
	shrb	$5, %al	#, D.25995
	andl	$1, %eax	#, D.25995
	.loc 1 9715 0
	movzbl	%al, %edx	# D.25995, D.25983
	movq	-160(%rbp), %rax	# temp, tmp649
	movzbl	2(%rax), %eax	# temp_287->mode, D.25982
	movzbl	%al, %eax	# D.25982, D.25983
	cltq
	movq	const_tiny_rtx(,%rax,8), %rsi	# const_tiny_rtx, D.25990
	movq	-160(%rbp), %rax	# temp, tmp651
	movq	-264(%rbp), %rcx	# if_true_label, tmp652
	movq	%rcx, 8(%rsp)	# tmp652,
	movq	-256(%rbp), %rcx	# if_false_label, tmp653
	movq	%rcx, (%rsp)	# tmp653,
	movl	$0, %r9d	#,
	movl	%edi, %r8d	# D.25992,
	movl	%edx, %ecx	# D.25983,
	movl	$102, %edx	#,
	movq	%rax, %rdi	# tmp651,
	call	do_compare_rtx_and_jump	#
	jmp	.L1853	#
.L1907:
	.loc 1 9720 0
	movl	$__FUNCTION__.15437, %edx	#,
	movl	$9720, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1908:
	.loc 1 9276 0
	nop
.L1853:
	.loc 1 9723 0
	cmpq	$0, -168(%rbp)	#, drop_through_label
	je	.L1823	#,
	.loc 1 9728 0
	call	do_pending_stack_adjust	#
	.loc 1 9729 0
	movq	-168(%rbp), %rax	# drop_through_label, tmp654
	movq	%rax, %rdi	# tmp654,
	call	emit_label	#
.L1823:
	.loc 1 9731 0
	addq	$272, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE63:
	.size	do_jump, .-do_jump
	.type	do_jump_by_parts_greater, @function
do_jump_by_parts_greater:
.LFB64:
	.loc 1 9743 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# exp, exp
	movl	%esi, -44(%rbp)	# swap, swap
	movq	%rdx, -56(%rbp)	# if_false_label, if_false_label
	movq	%rcx, -64(%rbp)	# if_true_label, if_true_label
	.loc 1 9744 0
	movq	-40(%rbp), %rax	# exp, tmp69
	movl	-44(%rbp), %edx	# swap, tmp71
	movslq	%edx, %rdx	# tmp71, tmp70
	addq	$4, %rdx	#, tmp72
	movq	(%rax,%rdx,8), %rax	# exp_1(D)->exp.operands, D.25996
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25996,
	call	expand_expr	#
	movq	%rax, -16(%rbp)	# tmp73, op0
	.loc 1 9745 0
	cmpl	$0, -44(%rbp)	#, swap
	sete	%al	#, D.25997
	movzbl	%al, %edx	# D.25997, D.25998
	movq	-40(%rbp), %rax	# exp, tmp74
	movslq	%edx, %rdx	# D.25998, tmp75
	addq	$4, %rdx	#, tmp76
	movq	(%rax,%rdx,8), %rax	# exp_1(D)->exp.operands, D.25996
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.25996,
	call	expand_expr	#
	movq	%rax, -8(%rbp)	# tmp77, op1
	.loc 1 9746 0
	movq	-40(%rbp), %rax	# exp, tmp78
	movq	32(%rax), %rax	# exp_1(D)->exp.operands, D.25996
	movq	8(%rax), %rax	# _9->common.type, D.25996
	movzbl	61(%rax), %eax	# *_10, tmp81
	shrb	%al	# D.25999
	movzbl	%al, %eax	# D.25999, tmp82
	movl	%eax, -24(%rbp)	# tmp82, mode
	.loc 1 9747 0
	movq	-40(%rbp), %rax	# exp, tmp83
	movq	32(%rax), %rax	# exp_1(D)->exp.operands, D.25996
	movq	8(%rax), %rax	# _13->common.type, D.25996
	movzbl	17(%rax), %eax	# *_14, tmp86
	shrb	$5, %al	#, D.26000
	andl	$1, %eax	#, D.26000
	movzbl	%al, %eax	# D.26000, tmp87
	movl	%eax, -20(%rbp)	# tmp87, unsignedp
	.loc 1 9749 0
	movq	-64(%rbp), %r8	# if_true_label, tmp88
	movq	-56(%rbp), %rdi	# if_false_label, tmp89
	movq	-8(%rbp), %rcx	# op1, tmp90
	movq	-16(%rbp), %rdx	# op0, tmp91
	movl	-20(%rbp), %esi	# unsignedp, tmp92
	movl	-24(%rbp), %eax	# mode, tmp93
	movq	%r8, %r9	# tmp88,
	movq	%rdi, %r8	# tmp89,
	movl	%eax, %edi	# tmp93,
	call	do_jump_by_parts_greater_rtx	#
	.loc 1 9750 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE64:
	.size	do_jump_by_parts_greater, .-do_jump_by_parts_greater
	.globl	do_jump_by_parts_greater_rtx
	.type	do_jump_by_parts_greater_rtx, @function
do_jump_by_parts_greater_rtx:
.LFB65:
	.loc 1 9762 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -52(%rbp)	# mode, mode
	movl	%esi, -56(%rbp)	# unsignedp, unsignedp
	movq	%rdx, -64(%rbp)	# op0, op0
	movq	%rcx, -72(%rbp)	# op1, op1
	movq	%r8, -80(%rbp)	# if_false_label, if_false_label
	movq	%r9, -88(%rbp)	# if_true_label, if_true_label
	.loc 1 9763 0
	movl	-52(%rbp), %eax	# mode, mode.866
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.26001
	movzbl	%al, %eax	# D.26001, D.26002
	movl	target_flags(%rip), %edx	# target_flags, target_flags.868
	andl	$33554432, %edx	#, D.26002
	testl	%edx, %edx	# D.26002
	je	.L1911	#,
	.loc 1 9763 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.867
	jmp	.L1912	#
.L1911:
	.loc 1 9763 0 discriminator 2
	movl	$4, %ebx	#, iftmp.867
.L1912:
	.loc 1 9763 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.867
	movl	%eax, -44(%rbp)	# tmp75, nwords
	.loc 1 9764 0 is_stmt 1 discriminator 3
	movq	$0, -40(%rbp)	#, drop_through_label
	.loc 1 9767 0 discriminator 3
	cmpq	$0, -88(%rbp)	#, if_true_label
	je	.L1913	#,
	.loc 1 9767 0 is_stmt 0 discriminator 1
	cmpq	$0, -80(%rbp)	#, if_false_label
	jne	.L1914	#,
.L1913:
	.loc 1 9768 0 is_stmt 1
	call	gen_label_rtx	#
	movq	%rax, -40(%rbp)	# tmp77, drop_through_label
.L1914:
	.loc 1 9769 0
	cmpq	$0, -88(%rbp)	#, if_true_label
	jne	.L1915	#,
	.loc 1 9770 0
	movq	-40(%rbp), %rax	# drop_through_label, tmp78
	movq	%rax, -88(%rbp)	# tmp78, if_true_label
.L1915:
	.loc 1 9771 0
	cmpq	$0, -80(%rbp)	#, if_false_label
	jne	.L1916	#,
	.loc 1 9772 0
	movq	-40(%rbp), %rax	# drop_through_label, tmp79
	movq	%rax, -80(%rbp)	# tmp79, if_false_label
.L1916:
	.loc 1 9775 0
	movl	$0, -48(%rbp)	#, i
	jmp	.L1917	#
.L1921:
.LBB165:
	.loc 1 9786 0
	movl	-44(%rbp), %eax	# nwords, tmp80
	subl	$1, %eax	#, D.26002
	subl	-48(%rbp), %eax	# i, D.26002
	movl	%eax, %ecx	# D.26002, D.26003
	movl	-52(%rbp), %edx	# mode, tmp81
	movq	-64(%rbp), %rax	# op0, tmp82
	movl	%ecx, %esi	# D.26003,
	movq	%rax, %rdi	# tmp82,
	call	operand_subword_force	#
	movq	%rax, -32(%rbp)	# tmp83, op0_word
	.loc 1 9787 0
	movl	-44(%rbp), %eax	# nwords, tmp84
	subl	$1, %eax	#, D.26002
	subl	-48(%rbp), %eax	# i, D.26002
	movl	%eax, %ecx	# D.26002, D.26003
	movl	-52(%rbp), %edx	# mode, tmp85
	movq	-72(%rbp), %rax	# op1, tmp86
	movl	%ecx, %esi	# D.26003,
	movq	%rax, %rdi	# tmp86,
	call	operand_subword_force	#
	movq	%rax, -24(%rbp)	# tmp87, op1_word
	.loc 1 9791 0
	movl	word_mode(%rip), %ecx	# word_mode, word_mode.871
	cmpl	$0, -56(%rbp)	#, unsignedp
	jne	.L1918	#,
	.loc 1 9791 0 is_stmt 0 discriminator 2
	cmpl	$0, -48(%rbp)	#, i
	jle	.L1919	#,
.L1918:
	.loc 1 9791 0 discriminator 1
	movl	$1, %eax	#, iftmp.872
	jmp	.L1920	#
.L1919:
	.loc 1 9791 0 discriminator 3
	movl	$0, %eax	#, iftmp.872
.L1920:
	.loc 1 9791 0 discriminator 4
	movq	-24(%rbp), %rsi	# op1_word, tmp88
	movq	-32(%rbp), %rdi	# op0_word, tmp89
	movq	-88(%rbp), %rdx	# if_true_label, tmp90
	movq	%rdx, 8(%rsp)	# tmp90,
	movq	$0, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	%ecx, %r8d	# word_mode.871,
	movl	%eax, %ecx	# iftmp.872,
	movl	$105, %edx	#,
	call	do_compare_rtx_and_jump	#
	.loc 1 9796 0 is_stmt 1 discriminator 4
	movl	word_mode(%rip), %edi	# word_mode, word_mode.873
	movl	-56(%rbp), %edx	# unsignedp, tmp91
	movq	-24(%rbp), %rsi	# op1_word, tmp92
	movq	-32(%rbp), %rax	# op0_word, tmp93
	movq	-80(%rbp), %rcx	# if_false_label, tmp94
	movq	%rcx, 8(%rsp)	# tmp94,
	movq	$0, (%rsp)	#,
	movl	$0, %r9d	#,
	movl	%edi, %r8d	# word_mode.873,
	movl	%edx, %ecx	# tmp91,
	movl	$102, %edx	#,
	movq	%rax, %rdi	# tmp93,
	call	do_compare_rtx_and_jump	#
.LBE165:
	.loc 1 9775 0 discriminator 4
	addl	$1, -48(%rbp)	#, i
.L1917:
	.loc 1 9775 0 is_stmt 0 discriminator 1
	movl	-48(%rbp), %eax	# i, tmp95
	cmpl	-44(%rbp), %eax	# nwords, tmp95
	jl	.L1921	#,
	.loc 1 9800 0 is_stmt 1
	cmpq	$0, -80(%rbp)	#, if_false_label
	je	.L1922	#,
	.loc 1 9801 0
	movq	-80(%rbp), %rax	# if_false_label, tmp96
	movq	%rax, %rdi	# tmp96,
	call	emit_jump	#
.L1922:
	.loc 1 9802 0
	cmpq	$0, -40(%rbp)	#, drop_through_label
	je	.L1910	#,
	.loc 1 9803 0
	movq	-40(%rbp), %rax	# drop_through_label, tmp97
	movq	%rax, %rdi	# tmp97,
	call	emit_label	#
.L1910:
	.loc 1 9804 0
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE65:
	.size	do_jump_by_parts_greater_rtx, .-do_jump_by_parts_greater_rtx
	.type	do_jump_by_parts_equality, @function
do_jump_by_parts_equality:
.LFB66:
	.loc 1 9813 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -88(%rbp)	# exp, exp
	movq	%rsi, -96(%rbp)	# if_false_label, if_false_label
	movq	%rdx, -104(%rbp)	# if_true_label, if_true_label
	.loc 1 9814 0
	movq	-88(%rbp), %rax	# exp, tmp78
	movq	32(%rax), %rax	# exp_5(D)->exp.operands, D.26004
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.26004,
	call	expand_expr	#
	movq	%rax, -48(%rbp)	# tmp79, op0
	.loc 1 9815 0
	movq	-88(%rbp), %rax	# exp, tmp80
	movq	40(%rax), %rax	# exp_5(D)->exp.operands, D.26004
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.26004,
	call	expand_expr	#
	movq	%rax, -40(%rbp)	# tmp81, op1
	.loc 1 9816 0
	movq	-88(%rbp), %rax	# exp, tmp82
	movq	32(%rax), %rax	# exp_5(D)->exp.operands, D.26004
	movq	8(%rax), %rax	# _10->common.type, D.26004
	movzbl	61(%rax), %eax	# *_11, tmp85
	shrb	%al	# D.26005
	movzbl	%al, %eax	# D.26005, tmp86
	movl	%eax, -64(%rbp)	# tmp86, mode
	.loc 1 9817 0
	movl	-64(%rbp), %eax	# mode, mode.874
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.26006
	movzbl	%al, %eax	# D.26006, D.26007
	movl	target_flags(%rip), %edx	# target_flags, target_flags.876
	andl	$33554432, %edx	#, D.26007
	testl	%edx, %edx	# D.26007
	je	.L1925	#,
	.loc 1 9817 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.875
	jmp	.L1926	#
.L1925:
	.loc 1 9817 0 discriminator 2
	movl	$4, %ebx	#, iftmp.875
.L1926:
	.loc 1 9817 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.875
	movl	%eax, -60(%rbp)	# tmp88, nwords
	.loc 1 9819 0 is_stmt 1 discriminator 3
	movq	$0, -56(%rbp)	#, drop_through_label
	.loc 1 9821 0 discriminator 3
	cmpq	$0, -96(%rbp)	#, if_false_label
	jne	.L1927	#,
	.loc 1 9822 0
	call	gen_label_rtx	#
	movq	%rax, -96(%rbp)	# tmp90, if_false_label
	movq	-96(%rbp), %rax	# if_false_label, tmp91
	movq	%rax, -56(%rbp)	# tmp91, drop_through_label
.L1927:
	.loc 1 9824 0
	movl	$0, -68(%rbp)	#, i
	jmp	.L1928	#
.L1929:
	.loc 1 9825 0 discriminator 2
	movl	word_mode(%rip), %r13d	# word_mode, word_mode.877
	.loc 1 9827 0 discriminator 2
	movq	-88(%rbp), %rax	# exp, tmp92
	movq	8(%rax), %rax	# exp_5(D)->common.type, D.26004
	movzbl	17(%rax), %eax	# *_28, tmp95
	shrb	$5, %al	#, D.26008
	andl	$1, %eax	#, D.26008
	.loc 1 9825 0 discriminator 2
	movzbl	%al, %r12d	# D.26008, D.26007
	movl	-68(%rbp), %ecx	# i, i.878
	movl	-64(%rbp), %edx	# mode, tmp96
	movq	-40(%rbp), %rax	# op1, tmp97
	movl	%ecx, %esi	# i.878,
	movq	%rax, %rdi	# tmp97,
	call	operand_subword_force	#
	movq	%rax, %rbx	#, D.26009
	movl	-68(%rbp), %ecx	# i, i.879
	movl	-64(%rbp), %edx	# mode, tmp98
	movq	-48(%rbp), %rax	# op0, tmp99
	movl	%ecx, %esi	# i.879,
	movq	%rax, %rdi	# tmp99,
	call	operand_subword_force	#
	movq	$0, 8(%rsp)	#,
	movq	-96(%rbp), %rdx	# if_false_label, tmp100
	movq	%rdx, (%rsp)	# tmp100,
	movl	$0, %r9d	#,
	movl	%r13d, %r8d	# word_mode.877,
	movl	%r12d, %ecx	# D.26007,
	movl	$103, %edx	#,
	movq	%rbx, %rsi	# D.26009,
	movq	%rax, %rdi	# D.26009,
	call	do_compare_rtx_and_jump	#
	.loc 1 9824 0 discriminator 2
	addl	$1, -68(%rbp)	#, i
.L1928:
	.loc 1 9824 0 is_stmt 0 discriminator 1
	movl	-68(%rbp), %eax	# i, tmp101
	cmpl	-60(%rbp), %eax	# nwords, tmp101
	jl	.L1929	#,
	.loc 1 9830 0 is_stmt 1
	cmpq	$0, -104(%rbp)	#, if_true_label
	je	.L1930	#,
	.loc 1 9831 0
	movq	-104(%rbp), %rax	# if_true_label, tmp102
	movq	%rax, %rdi	# tmp102,
	call	emit_jump	#
.L1930:
	.loc 1 9832 0
	cmpq	$0, -56(%rbp)	#, drop_through_label
	je	.L1924	#,
	.loc 1 9833 0
	movq	-56(%rbp), %rax	# drop_through_label, tmp103
	movq	%rax, %rdi	# tmp103,
	call	emit_label	#
.L1924:
	.loc 1 9834 0
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE66:
	.size	do_jump_by_parts_equality, .-do_jump_by_parts_equality
	.globl	do_jump_by_parts_equality_rtx
	.type	do_jump_by_parts_equality_rtx, @function
do_jump_by_parts_equality_rtx:
.LFB67:
	.loc 1 9844 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$80, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -56(%rbp)	# op0, op0
	movq	%rsi, -64(%rbp)	# if_false_label, if_false_label
	movq	%rdx, -72(%rbp)	# if_true_label, if_true_label
	.loc 1 9845 0
	movq	-56(%rbp), %rax	# op0, tmp84
	movzbl	2(%rax), %eax	# op0_7(D)->mode, D.26010
	movzbl	%al, %eax	# D.26010, D.26011
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.26010
	movzbl	%al, %eax	# D.26010, D.26011
	movl	target_flags(%rip), %edx	# target_flags, target_flags.881
	andl	$33554432, %edx	#, D.26011
	testl	%edx, %edx	# D.26011
	je	.L1933	#,
	.loc 1 9845 0 is_stmt 0 discriminator 1
	movl	$8, %ebx	#, iftmp.880
	jmp	.L1934	#
.L1933:
	.loc 1 9845 0 discriminator 2
	movl	$4, %ebx	#, iftmp.880
.L1934:
	.loc 1 9845 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.880
	movl	%eax, -36(%rbp)	# tmp86, nwords
	.loc 1 9848 0 is_stmt 1 discriminator 3
	movq	$0, -24(%rbp)	#, drop_through_label
	.loc 1 9855 0 discriminator 3
	movl	word_mode(%rip), %eax	# word_mode, word_mode.882
	movl	%eax, %edi	# word_mode.882,
	call	gen_reg_rtx	#
	movq	%rax, -32(%rbp)	# tmp88, part
	.loc 1 9856 0 discriminator 3
	movq	-56(%rbp), %rax	# op0, tmp89
	movzbl	2(%rax), %eax	# op0_7(D)->mode, D.26010
	movzbl	%al, %edx	# D.26010, D.26012
	movq	-56(%rbp), %rax	# op0, tmp90
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp90,
	call	operand_subword_force	#
	movq	%rax, %rdx	#, D.26013
	movq	-32(%rbp), %rax	# part, tmp91
	movq	%rdx, %rsi	# D.26013,
	movq	%rax, %rdi	# tmp91,
	call	emit_move_insn	#
	.loc 1 9857 0 discriminator 3
	movl	$1, -40(%rbp)	#, i
	jmp	.L1935	#
.L1937:
	.loc 1 9859 0 discriminator 1
	movq	-56(%rbp), %rax	# op0, tmp92
	movzbl	2(%rax), %eax	# op0_7(D)->mode, D.26010
	.loc 1 9858 0 discriminator 1
	movzbl	%al, %edx	# D.26010, D.26012
	movl	-40(%rbp), %ecx	# i, i.883
	movq	-56(%rbp), %rax	# op0, tmp93
	movl	%ecx, %esi	# i.883,
	movq	%rax, %rdi	# tmp93,
	call	operand_subword_force	#
	movq	%rax, %rcx	#, D.26013
	movq	optab_table+152(%rip), %rsi	# optab_table, D.26014
	movl	word_mode(%rip), %eax	# word_mode, word_mode.884
	movq	-32(%rbp), %rdi	# part, tmp94
	movq	-32(%rbp), %rdx	# part, tmp95
	movl	$2, (%rsp)	#,
	movl	$1, %r9d	#,
	movq	%rdi, %r8	# tmp94,
	movl	%eax, %edi	# word_mode.884,
	call	expand_binop	#
	movq	%rax, -32(%rbp)	# tmp96, part
	.loc 1 9857 0 discriminator 1
	addl	$1, -40(%rbp)	#, i
.L1935:
	movl	-40(%rbp), %eax	# i, tmp97
	cmpl	-36(%rbp), %eax	# nwords, tmp97
	jge	.L1936	#,
	.loc 1 9857 0 is_stmt 0 discriminator 2
	cmpq	$0, -32(%rbp)	#, part
	jne	.L1937	#,
.L1936:
	.loc 1 9862 0 is_stmt 1
	cmpq	$0, -32(%rbp)	#, part
	je	.L1938	#,
	.loc 1 9864 0
	movl	word_mode(%rip), %ecx	# word_mode, word_mode.885
	movq	const_int_rtx+512(%rip), %rsi	# const_int_rtx, D.26013
	movq	-32(%rbp), %rax	# part, tmp98
	movq	-72(%rbp), %rdx	# if_true_label, tmp99
	movq	%rdx, 8(%rsp)	# tmp99,
	movq	-64(%rbp), %rdx	# if_false_label, tmp100
	movq	%rdx, (%rsp)	# tmp100,
	movl	$0, %r9d	#,
	movl	%ecx, %r8d	# word_mode.885,
	movl	$1, %ecx	#,
	movl	$103, %edx	#,
	movq	%rax, %rdi	# tmp98,
	call	do_compare_rtx_and_jump	#
	.loc 1 9867 0
	jmp	.L1932	#
.L1938:
	.loc 1 9871 0
	cmpq	$0, -64(%rbp)	#, if_false_label
	jne	.L1940	#,
	.loc 1 9872 0
	call	gen_label_rtx	#
	movq	%rax, -64(%rbp)	# tmp101, if_false_label
	movq	-64(%rbp), %rax	# if_false_label, tmp102
	movq	%rax, -24(%rbp)	# tmp102, drop_through_label
.L1940:
	.loc 1 9874 0
	movl	$0, -40(%rbp)	#, i
	jmp	.L1941	#
.L1942:
	.loc 1 9875 0 discriminator 2
	movl	word_mode(%rip), %r12d	# word_mode, word_mode.886
	movq	const_int_rtx+512(%rip), %rbx	# const_int_rtx, D.26013
	movq	-56(%rbp), %rax	# op0, tmp103
	movzbl	2(%rax), %eax	# op0_7(D)->mode, D.26010
	movzbl	%al, %edx	# D.26010, D.26012
	movl	-40(%rbp), %ecx	# i, i.887
	movq	-56(%rbp), %rax	# op0, tmp104
	movl	%ecx, %esi	# i.887,
	movq	%rax, %rdi	# tmp104,
	call	operand_subword_force	#
	movq	$0, 8(%rsp)	#,
	movq	-64(%rbp), %rdx	# if_false_label, tmp105
	movq	%rdx, (%rsp)	# tmp105,
	movl	$0, %r9d	#,
	movl	%r12d, %r8d	# word_mode.886,
	movl	$1, %ecx	#,
	movl	$103, %edx	#,
	movq	%rbx, %rsi	# D.26013,
	movq	%rax, %rdi	# D.26013,
	call	do_compare_rtx_and_jump	#
	.loc 1 9874 0 discriminator 2
	addl	$1, -40(%rbp)	#, i
.L1941:
	.loc 1 9874 0 is_stmt 0 discriminator 1
	movl	-40(%rbp), %eax	# i, tmp106
	cmpl	-36(%rbp), %eax	# nwords, tmp106
	jl	.L1942	#,
	.loc 1 9879 0 is_stmt 1
	cmpq	$0, -72(%rbp)	#, if_true_label
	je	.L1943	#,
	.loc 1 9880 0
	movq	-72(%rbp), %rax	# if_true_label, tmp107
	movq	%rax, %rdi	# tmp107,
	call	emit_jump	#
.L1943:
	.loc 1 9882 0
	cmpq	$0, -24(%rbp)	#, drop_through_label
	je	.L1932	#,
	.loc 1 9883 0
	movq	-24(%rbp), %rax	# drop_through_label, tmp108
	movq	%rax, %rdi	# tmp108,
	call	emit_label	#
.L1932:
	.loc 1 9884 0
	addq	$80, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE67:
	.size	do_jump_by_parts_equality_rtx, .-do_jump_by_parts_equality_rtx
	.globl	compare_from_rtx
	.type	compare_from_rtx, @function
compare_from_rtx:
.LFB68:
	.loc 1 9904 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -24(%rbp)	# op0, op0
	movq	%rsi, -32(%rbp)	# op1, op1
	movl	%edx, -36(%rbp)	# code, code
	movl	%ecx, -40(%rbp)	# unsignedp, unsignedp
	movl	%r8d, -44(%rbp)	# mode, mode
	movq	%r9, -56(%rbp)	# size, size
	.loc 1 9910 0
	movq	-32(%rbp), %rdx	# op1, tmp67
	movq	-24(%rbp), %rax	# op0, tmp68
	movq	%rdx, %rsi	# tmp67,
	movq	%rax, %rdi	# tmp68,
	call	swap_commutative_operands_p	#
	testl	%eax, %eax	# D.26016
	je	.L1945	#,
	.loc 1 9912 0
	movq	-24(%rbp), %rax	# op0, tmp69
	movq	%rax, -8(%rbp)	# tmp69, tem
	.loc 1 9913 0
	movq	-32(%rbp), %rax	# op1, tmp70
	movq	%rax, -24(%rbp)	# tmp70, op0
	.loc 1 9914 0
	movq	-8(%rbp), %rax	# tem, tmp71
	movq	%rax, -32(%rbp)	# tmp71, op1
	.loc 1 9915 0
	movl	-36(%rbp), %eax	# code, tmp72
	movl	%eax, %edi	# tmp72,
	call	swap_condition	#
	movl	%eax, -36(%rbp)	# tmp73, code
.L1945:
	.loc 1 9918 0
	movl	flag_force_mem(%rip), %eax	# flag_force_mem, flag_force_mem.888
	testl	%eax, %eax	# flag_force_mem.888
	je	.L1946	#,
	.loc 1 9920 0
	movq	-24(%rbp), %rax	# op0, tmp74
	movq	%rax, %rdi	# tmp74,
	call	force_not_mem	#
	movq	%rax, -24(%rbp)	# tmp75, op0
	.loc 1 9921 0
	movq	-32(%rbp), %rax	# op1, tmp76
	movq	%rax, %rdi	# tmp76,
	call	force_not_mem	#
	movq	%rax, -32(%rbp)	# tmp77, op1
.L1946:
	.loc 1 9924 0
	call	do_pending_stack_adjust	#
	.loc 1 9926 0
	movq	-24(%rbp), %rax	# op0, tmp78
	movzwl	(%rax), %eax	# op0_2->code, D.26017
	cmpw	$54, %ax	#, D.26017
	jne	.L1947	#,
	.loc 1 9926 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# op1, tmp79
	movzwl	(%rax), %eax	# op1_4->code, D.26017
	cmpw	$54, %ax	#, D.26017
	jne	.L1947	#,
	.loc 1 9927 0 is_stmt 1
	movq	-32(%rbp), %rcx	# op1, tmp80
	movq	-24(%rbp), %rdx	# op0, tmp81
	movl	-44(%rbp), %esi	# mode, tmp82
	movl	-36(%rbp), %eax	# code, tmp83
	movl	%eax, %edi	# tmp83,
	call	simplify_relational_operation	#
	movq	%rax, -8(%rbp)	# tmp84, tem
	cmpq	$0, -8(%rbp)	#, tem
	je	.L1947	#,
	.loc 1 9928 0
	movq	-8(%rbp), %rax	# tem, D.26015
	jmp	.L1948	#
.L1947:
	.loc 1 9952 0
	movl	-40(%rbp), %r8d	# unsignedp, tmp85
	movl	-44(%rbp), %edi	# mode, tmp86
	movq	-56(%rbp), %rcx	# size, tmp87
	movl	-36(%rbp), %edx	# code, tmp88
	movq	-32(%rbp), %rsi	# op1, tmp89
	movq	-24(%rbp), %rax	# op0, tmp90
	movl	%r8d, %r9d	# tmp85,
	movl	%edi, %r8d	# tmp86,
	movq	%rax, %rdi	# tmp90,
	call	emit_cmp_insn	#
	.loc 1 9954 0
	movq	const_int_rtx+512(%rip), %rcx	# const_int_rtx, D.26018
	movq	global_rtl+8(%rip), %rdx	# global_rtl, D.26018
	movl	-36(%rbp), %eax	# code, tmp91
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp91,
	call	gen_rtx_fmt_ee	#
.L1948:
	.loc 1 9955 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE68:
	.size	compare_from_rtx, .-compare_from_rtx
	.globl	do_compare_rtx_and_jump
	.type	do_compare_rtx_and_jump, @function
do_compare_rtx_and_jump:
.LFB69:
	.loc 1 9972 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -24(%rbp)	# op0, op0
	movq	%rsi, -32(%rbp)	# op1, op1
	movl	%edx, -36(%rbp)	# code, code
	movl	%ecx, -40(%rbp)	# unsignedp, unsignedp
	movl	%r8d, -44(%rbp)	# mode, mode
	movq	%r9, -56(%rbp)	# size, size
	.loc 1 9974 0
	movl	$0, -12(%rbp)	#, dummy_true_label
	.loc 1 9978 0
	cmpq	$0, 24(%rbp)	#, if_true_label
	jne	.L1950	#,
	.loc 1 9978 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# mode, mode.889
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.26019
	cmpl	$2, %eax	#, D.26019
	je	.L1950	#,
	movl	-44(%rbp), %eax	# mode, mode.890
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.26019
	cmpl	$6, %eax	#, D.26019
	je	.L1950	#,
	movl	-44(%rbp), %eax	# mode, mode.891
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.26019
	cmpl	$8, %eax	#, D.26019
	je	.L1950	#,
	.loc 1 9980 0 is_stmt 1
	movq	16(%rbp), %rax	# if_false_label, tmp73
	movq	%rax, 24(%rbp)	# tmp73, if_true_label
	.loc 1 9981 0
	movq	$0, 16(%rbp)	#, if_false_label
	.loc 1 9982 0
	movl	-36(%rbp), %eax	# code, tmp74
	movl	%eax, %edi	# tmp74,
	call	reverse_condition	#
	movl	%eax, -36(%rbp)	# tmp75, code
.L1950:
	.loc 1 9988 0
	movq	-32(%rbp), %rdx	# op1, tmp76
	movq	-24(%rbp), %rax	# op0, tmp77
	movq	%rdx, %rsi	# tmp76,
	movq	%rax, %rdi	# tmp77,
	call	swap_commutative_operands_p	#
	testl	%eax, %eax	# D.26020
	je	.L1951	#,
	.loc 1 9990 0
	movq	-24(%rbp), %rax	# op0, tmp78
	movq	%rax, -8(%rbp)	# tmp78, tem
	.loc 1 9991 0
	movq	-32(%rbp), %rax	# op1, tmp79
	movq	%rax, -24(%rbp)	# tmp79, op0
	.loc 1 9992 0
	movq	-8(%rbp), %rax	# tem, tmp80
	movq	%rax, -32(%rbp)	# tmp80, op1
	.loc 1 9993 0
	movl	-36(%rbp), %eax	# code, tmp81
	movl	%eax, %edi	# tmp81,
	call	swap_condition	#
	movl	%eax, -36(%rbp)	# tmp82, code
.L1951:
	.loc 1 9996 0
	movl	flag_force_mem(%rip), %eax	# flag_force_mem, flag_force_mem.892
	testl	%eax, %eax	# flag_force_mem.892
	je	.L1952	#,
	.loc 1 9998 0
	movq	-24(%rbp), %rax	# op0, tmp83
	movq	%rax, %rdi	# tmp83,
	call	force_not_mem	#
	movq	%rax, -24(%rbp)	# tmp84, op0
	.loc 1 9999 0
	movq	-32(%rbp), %rax	# op1, tmp85
	movq	%rax, %rdi	# tmp85,
	call	force_not_mem	#
	movq	%rax, -32(%rbp)	# tmp86, op1
.L1952:
	.loc 1 10002 0
	call	do_pending_stack_adjust	#
	.loc 1 10004 0
	movq	-24(%rbp), %rax	# op0, tmp87
	movzwl	(%rax), %eax	# op0_2->code, D.26021
	cmpw	$54, %ax	#, D.26021
	jne	.L1953	#,
	.loc 1 10004 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# op1, tmp88
	movzwl	(%rax), %eax	# op1_4->code, D.26021
	cmpw	$54, %ax	#, D.26021
	jne	.L1953	#,
	.loc 1 10005 0 is_stmt 1
	movq	-32(%rbp), %rcx	# op1, tmp89
	movq	-24(%rbp), %rdx	# op0, tmp90
	movl	-44(%rbp), %esi	# mode, tmp91
	movl	-36(%rbp), %eax	# code, tmp92
	movl	%eax, %edi	# tmp92,
	call	simplify_relational_operation	#
	movq	%rax, -8(%rbp)	# tmp93, tem
	cmpq	$0, -8(%rbp)	#, tem
	je	.L1953	#,
	.loc 1 10007 0
	movq	const_true_rtx(%rip), %rax	# const_true_rtx, const_true_rtx.893
	cmpq	%rax, -8(%rbp)	# const_true_rtx.893, tem
	jne	.L1954	#,
	.loc 1 10009 0
	cmpq	$0, 24(%rbp)	#, if_true_label
	je	.L1956	#,
	.loc 1 10010 0
	movq	24(%rbp), %rax	# if_true_label, tmp94
	movq	%rax, %rdi	# tmp94,
	call	emit_jump	#
	.loc 1 10017 0
	jmp	.L1949	#
.L1954:
	.loc 1 10014 0
	cmpq	$0, 16(%rbp)	#, if_false_label
	je	.L1956	#,
	.loc 1 10015 0
	movq	16(%rbp), %rdi	# if_false_label,
	call	emit_jump	#
	.loc 1 10017 0
	jmp	.L1949	#
.L1956:
	jmp	.L1949	#
.L1953:
	.loc 1 10042 0
	cmpq	$0, 24(%rbp)	#, if_true_label
	jne	.L1958	#,
	.loc 1 10044 0
	movl	$1, -12(%rbp)	#, dummy_true_label
	.loc 1 10045 0
	call	gen_label_rtx	#
	movq	%rax, 24(%rbp)	# tmp95, if_true_label
.L1958:
	.loc 1 10048 0
	movl	-40(%rbp), %r9d	# unsignedp, tmp96
	movl	-44(%rbp), %r8d	# mode, tmp97
	movq	-56(%rbp), %rcx	# size, tmp98
	movl	-36(%rbp), %edx	# code, tmp99
	movq	-32(%rbp), %rsi	# op1, tmp100
	movq	-24(%rbp), %rax	# op0, tmp101
	movq	24(%rbp), %rdi	# if_true_label, tmp102
	movq	%rdi, (%rsp)	# tmp102,
	movq	%rax, %rdi	# tmp101,
	call	emit_cmp_and_jump_insns	#
	.loc 1 10051 0
	cmpq	$0, 16(%rbp)	#, if_false_label
	je	.L1959	#,
	.loc 1 10052 0
	movq	16(%rbp), %rdi	# if_false_label,
	call	emit_jump	#
.L1959:
	.loc 1 10053 0
	cmpl	$0, -12(%rbp)	#, dummy_true_label
	je	.L1949	#,
	.loc 1 10054 0
	movq	24(%rbp), %rax	# if_true_label, tmp103
	movq	%rax, %rdi	# tmp103,
	call	emit_label	#
.L1949:
	.loc 1 10055 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE69:
	.size	do_compare_rtx_and_jump, .-do_compare_rtx_and_jump
	.type	do_compare_and_jump, @function
do_compare_and_jump:
.LFB70:
	.loc 1 10073 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -56(%rbp)	# exp, exp
	movl	%esi, -60(%rbp)	# signed_code, signed_code
	movl	%edx, -64(%rbp)	# unsigned_code, unsigned_code
	movq	%rcx, -72(%rbp)	# if_false_label, if_false_label
	movq	%r8, -80(%rbp)	# if_true_label, if_true_label
	.loc 1 10081 0
	movq	-56(%rbp), %rax	# exp, tmp84
	movq	32(%rax), %rax	# exp_5(D)->exp.operands, D.26022
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.26022,
	call	expand_expr	#
	movq	%rax, -16(%rbp)	# tmp85, op0
	.loc 1 10082 0
	movq	-56(%rbp), %rax	# exp, tmp86
	movq	32(%rax), %rax	# exp_5(D)->exp.operands, D.26022
	movzbl	16(%rax), %eax	# _8->common.code, D.26023
	testb	%al, %al	# D.26023
	jne	.L1961	#,
	.loc 1 10083 0
	jmp	.L1960	#
.L1961:
	.loc 1 10085 0
	movq	-56(%rbp), %rax	# exp, tmp87
	movq	40(%rax), %rax	# exp_5(D)->exp.operands, D.26022
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.26022,
	call	expand_expr	#
	movq	%rax, -8(%rbp)	# tmp88, op1
	.loc 1 10086 0
	movq	-56(%rbp), %rax	# exp, tmp89
	movq	40(%rax), %rax	# exp_5(D)->exp.operands, D.26022
	movzbl	16(%rax), %eax	# _12->common.code, D.26023
	testb	%al, %al	# D.26023
	jne	.L1963	#,
	.loc 1 10087 0
	jmp	.L1960	#
.L1963:
	.loc 1 10089 0
	movq	-56(%rbp), %rax	# exp, tmp90
	movq	32(%rax), %rax	# exp_5(D)->exp.operands, D.26022
	movq	8(%rax), %rax	# _14->common.type, tmp91
	movq	%rax, -24(%rbp)	# tmp91, type
	.loc 1 10090 0
	movq	-24(%rbp), %rax	# type, tmp92
	movzbl	61(%rax), %eax	# *type_15, tmp95
	shrb	%al	# D.26024
	movzbl	%al, %eax	# D.26024, tmp96
	movl	%eax, -36(%rbp)	# tmp96, mode
	.loc 1 10091 0
	movq	-56(%rbp), %rax	# exp, tmp97
	movq	32(%rax), %rax	# exp_5(D)->exp.operands, D.26022
	movzbl	16(%rax), %eax	# _18->common.code, D.26023
	cmpb	$25, %al	#, D.26023
	jne	.L1964	#,
	.loc 1 10092 0
	movq	-56(%rbp), %rax	# exp, tmp98
	movq	40(%rax), %rax	# exp_5(D)->exp.operands, D.26022
	movzbl	16(%rax), %eax	# _20->common.code, D.26023
	cmpb	$25, %al	#, D.26023
	jne	.L1965	#,
	.loc 1 10093 0
	movl	-36(%rbp), %eax	# mode, mode.894
	cltq
	movzwl	mode_bitsize(%rax,%rax), %edx	# mode_bitsize, D.26025
	.loc 1 10094 0
	movq	-56(%rbp), %rax	# exp, tmp100
	movq	40(%rax), %rax	# exp_5(D)->exp.operands, D.26022
	movq	8(%rax), %rax	# _24->common.type, D.26022
	movzbl	61(%rax), %eax	# *_25, tmp103
	shrb	%al	# D.26024
	movzbl	%al, %eax	# D.26024, D.26026
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.26025
	.loc 1 10093 0
	cmpw	%ax, %dx	# D.26025, D.26025
	jbe	.L1964	#,
.L1965:
	.loc 1 10099 0
	movq	-56(%rbp), %rax	# exp, tmp105
	movq	40(%rax), %rax	# exp_5(D)->exp.operands, D.26022
	movq	8(%rax), %rax	# _29->common.type, tmp106
	movq	%rax, -24(%rbp)	# tmp106, type
	.loc 1 10100 0
	movq	-24(%rbp), %rax	# type, tmp107
	movzbl	61(%rax), %eax	# *type_30, tmp110
	shrb	%al	# D.26024
	movzbl	%al, %eax	# D.26024, tmp111
	movl	%eax, -36(%rbp)	# tmp111, mode
.L1964:
	.loc 1 10102 0
	movq	-24(%rbp), %rax	# type, tmp112
	movzbl	17(%rax), %eax	# *type_1, tmp115
	shrb	$5, %al	#, D.26027
	andl	$1, %eax	#, D.26027
	movzbl	%al, %eax	# D.26027, tmp116
	movl	%eax, -32(%rbp)	# tmp116, unsignedp
	.loc 1 10103 0
	cmpl	$0, -32(%rbp)	#, unsignedp
	je	.L1966	#,
	.loc 1 10103 0 is_stmt 0 discriminator 1
	movl	-64(%rbp), %eax	# unsigned_code, iftmp.895
	jmp	.L1967	#
.L1966:
	.loc 1 10103 0 discriminator 2
	movl	-60(%rbp), %eax	# signed_code, iftmp.895
.L1967:
	.loc 1 10103 0 discriminator 3
	movl	%eax, -28(%rbp)	# iftmp.895, code
	.loc 1 10132 0 is_stmt 1 discriminator 3
	call	emit_queue	#
	.loc 1 10134 0 discriminator 3
	cmpl	$51, -36(%rbp)	#, mode
	jne	.L1968	#,
	.loc 1 10136 0
	movq	-56(%rbp), %rax	# exp, tmp117
	movq	32(%rax), %rax	# exp_5(D)->exp.operands, D.26022
	.loc 1 10134 0
	movq	%rax, %rdi	# D.26022,
	call	expr_size	#
	jmp	.L1969	#
.L1968:
	.loc 1 10134 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.896
.L1969:
	.loc 1 10134 0 discriminator 2
	movl	-36(%rbp), %r10d	# mode, tmp118
	movl	-32(%rbp), %ecx	# unsignedp, tmp119
	movl	-28(%rbp), %edx	# code, tmp120
	movq	-8(%rbp), %rsi	# op1, tmp121
	movq	-16(%rbp), %rdi	# op0, tmp122
	movq	-80(%rbp), %r8	# if_true_label, tmp123
	movq	%r8, 8(%rsp)	# tmp123,
	movq	-72(%rbp), %r8	# if_false_label, tmp124
	movq	%r8, (%rsp)	# tmp124,
	movq	%rax, %r9	# iftmp.896,
	movl	%r10d, %r8d	# tmp118,
	call	do_compare_rtx_and_jump	#
.L1960:
	.loc 1 10138 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE70:
	.size	do_compare_and_jump, .-do_compare_and_jump
	.type	do_store_flag, @function
do_store_flag:
.LFB71:
	.loc 1 10166 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$152, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -136(%rbp)	# exp, exp
	movq	%rsi, -144(%rbp)	# target, target
	movl	%edx, -148(%rbp)	# mode, mode
	movl	%ecx, -152(%rbp)	# only_cheap, only_cheap
	.loc 1 10171 0
	movl	$0, -120(%rbp)	#, invert
	.loc 1 10175 0
	movq	-144(%rbp), %rax	# target, tmp180
	movq	%rax, -72(%rbp)	# tmp180, subtarget
	.loc 1 10183 0
	movq	-136(%rbp), %rax	# exp, tmp181
	movzbl	16(%rax), %eax	# exp_44(D)->common.code, D.26029
	cmpb	$96, %al	#, D.26029
	jne	.L1971	#,
	.loc 1 10184 0
	movl	$1, -120(%rbp)	#, invert
	movq	-136(%rbp), %rax	# exp, tmp182
	movq	32(%rax), %rax	# exp_44(D)->exp.operands, tmp183
	movq	%rax, -136(%rbp)	# tmp183, exp
.L1971:
	.loc 1 10186 0
	movq	-136(%rbp), %rax	# exp, tmp184
	movq	32(%rax), %rax	# exp_1->exp.operands, tmp185
	movq	%rax, -96(%rbp)	# tmp185, arg0
	.loc 1 10187 0
	movq	-136(%rbp), %rax	# exp, tmp186
	movq	40(%rax), %rax	# exp_1->exp.operands, tmp187
	movq	%rax, -88(%rbp)	# tmp187, arg1
	.loc 1 10190 0
	movq	global_trees(%rip), %rax	# global_trees, D.26030
	cmpq	-96(%rbp), %rax	# arg0, D.26030
	je	.L1972	#,
	.loc 1 10190 0 is_stmt 0 discriminator 1
	movq	global_trees(%rip), %rax	# global_trees, D.26030
	cmpq	-88(%rbp), %rax	# arg1, D.26030
	jne	.L1973	#,
.L1972:
	.loc 1 10191 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.26028
	jmp	.L1974	#
.L1973:
	.loc 1 10193 0
	movq	-96(%rbp), %rax	# arg0, tmp188
	movq	8(%rax), %rax	# arg0_48->common.type, tmp189
	movq	%rax, -48(%rbp)	# tmp189, type
	.loc 1 10194 0
	movq	-48(%rbp), %rax	# type, tmp190
	movzbl	61(%rax), %eax	# *type_52, tmp193
	shrb	%al	# D.26031
	movzbl	%al, %eax	# D.26031, tmp194
	movl	%eax, -112(%rbp)	# tmp194, operand_mode
	.loc 1 10195 0
	movq	-48(%rbp), %rax	# type, tmp195
	movzbl	17(%rax), %eax	# *type_52, tmp198
	shrb	$5, %al	#, D.26032
	andl	$1, %eax	#, D.26032
	movzbl	%al, %eax	# D.26032, tmp199
	movl	%eax, -108(%rbp)	# tmp199, unsignedp
	.loc 1 10199 0
	cmpl	$51, -112(%rbp)	#, operand_mode
	jne	.L1975	#,
	.loc 1 10200 0
	movl	$0, %eax	#, D.26028
	jmp	.L1974	#
.L1975:
	.loc 1 10215 0
	jmp	.L1976	#
.L1979:
	.loc 1 10215 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# arg0, tmp200
	movq	32(%rax), %rax	# arg0_10->exp.operands, tmp201
	movq	%rax, -96(%rbp)	# tmp201, arg0
.L1976:
	movq	-96(%rbp), %rax	# arg0, tmp202
	movzbl	16(%rax), %eax	# arg0_10->common.code, D.26029
	cmpb	$115, %al	#, D.26029
	je	.L1977	#,
	.loc 1 10215 0 discriminator 3
	movq	-96(%rbp), %rax	# arg0, tmp203
	movzbl	16(%rax), %eax	# arg0_10->common.code, D.26029
	cmpb	$114, %al	#, D.26029
	je	.L1977	#,
	.loc 1 10215 0 discriminator 1
	movq	-96(%rbp), %rax	# arg0, tmp204
	movzbl	16(%rax), %eax	# arg0_10->common.code, D.26029
	cmpb	$116, %al	#, D.26029
	jne	.L1978	#,
.L1977:
	.loc 1 10215 0 discriminator 2
	movq	-96(%rbp), %rax	# arg0, tmp205
	movq	32(%rax), %rdx	# arg0_10->exp.operands, D.26030
	movq	global_trees(%rip), %rax	# global_trees, D.26030
	cmpq	%rax, %rdx	# D.26030, D.26030
	je	.L1978	#,
	.loc 1 10215 0 discriminator 1
	movq	-96(%rbp), %rax	# arg0, tmp206
	movq	8(%rax), %rax	# arg0_10->common.type, D.26030
	movzbl	61(%rax), %eax	# *_63, tmp209
	shrb	%al	# D.26031
	movl	%eax, %edx	# D.26031, D.26031
	movq	-96(%rbp), %rax	# arg0, tmp210
	movq	32(%rax), %rax	# arg0_10->exp.operands, D.26030
	movq	8(%rax), %rax	# _65->common.type, D.26030
	movzbl	61(%rax), %eax	# *_66, tmp213
	shrb	%al	# D.26031
	cmpb	%al, %dl	# D.26031, D.26031
	je	.L1979	#,
.L1978:
	.loc 1 10216 0 is_stmt 1
	jmp	.L1980	#
.L1983:
	.loc 1 10216 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# arg1, tmp214
	movq	32(%rax), %rax	# arg1_12->exp.operands, tmp215
	movq	%rax, -88(%rbp)	# tmp215, arg1
.L1980:
	movq	-88(%rbp), %rax	# arg1, tmp216
	movzbl	16(%rax), %eax	# arg1_12->common.code, D.26029
	cmpb	$115, %al	#, D.26029
	je	.L1981	#,
	.loc 1 10216 0 discriminator 3
	movq	-88(%rbp), %rax	# arg1, tmp217
	movzbl	16(%rax), %eax	# arg1_12->common.code, D.26029
	cmpb	$114, %al	#, D.26029
	je	.L1981	#,
	.loc 1 10216 0 discriminator 1
	movq	-88(%rbp), %rax	# arg1, tmp218
	movzbl	16(%rax), %eax	# arg1_12->common.code, D.26029
	cmpb	$116, %al	#, D.26029
	jne	.L1982	#,
.L1981:
	.loc 1 10216 0 discriminator 2
	movq	-88(%rbp), %rax	# arg1, tmp219
	movq	32(%rax), %rdx	# arg1_12->exp.operands, D.26030
	movq	global_trees(%rip), %rax	# global_trees, D.26030
	cmpq	%rax, %rdx	# D.26030, D.26030
	je	.L1982	#,
	.loc 1 10216 0 discriminator 1
	movq	-88(%rbp), %rax	# arg1, tmp220
	movq	8(%rax), %rax	# arg1_12->common.type, D.26030
	movzbl	61(%rax), %eax	# *_74, tmp223
	shrb	%al	# D.26031
	movl	%eax, %edx	# D.26031, D.26031
	movq	-88(%rbp), %rax	# arg1, tmp224
	movq	32(%rax), %rax	# arg1_12->exp.operands, D.26030
	movq	8(%rax), %rax	# _76->common.type, D.26030
	movzbl	61(%rax), %eax	# *_77, tmp227
	shrb	%al	# D.26031
	cmpb	%al, %dl	# D.26031, D.26031
	je	.L1983	#,
.L1982:
	.loc 1 10225 0 is_stmt 1
	movq	-136(%rbp), %rax	# exp, tmp228
	movzbl	16(%rax), %eax	# exp_1->common.code, D.26029
	movzbl	%al, %eax	# D.26029, D.26033
	subl	$97, %eax	#, tmp229
	cmpl	$12, %eax	#, tmp229
	ja	.L1984	#,
	movl	%eax, %eax	# tmp229, tmp230
	movq	.L1986(,%rax,8), %rax	#, tmp231
	jmp	*%rax	# tmp231
	.section	.rodata
	.align 8
	.align 4
.L1986:
	.quad	.L1985
	.quad	.L1987
	.quad	.L1988
	.quad	.L1989
	.quad	.L1990
	.quad	.L1991
	.quad	.L1992
	.quad	.L1993
	.quad	.L1994
	.quad	.L1995
	.quad	.L1996
	.quad	.L1997
	.quad	.L1998
	.text
.L1990:
	.loc 1 10228 0
	movl	$103, -124(%rbp)	#, code
	.loc 1 10229 0
	jmp	.L1999	#
.L1991:
	.loc 1 10231 0
	movl	$102, -124(%rbp)	#, code
	.loc 1 10232 0
	jmp	.L1999	#
.L1985:
	.loc 1 10234 0
	movq	-88(%rbp), %rax	# arg1, tmp232
	movq	%rax, %rdi	# tmp232,
	call	integer_onep	#
	testl	%eax, %eax	# D.26034
	je	.L2000	#,
	.loc 1 10235 0
	movq	global_trees+88(%rip), %rax	# global_trees, tmp233
	movq	%rax, -88(%rbp)	# tmp233, arg1
	cmpl	$0, -108(%rbp)	#, unsignedp
	je	.L2001	#,
	.loc 1 10235 0 is_stmt 0 discriminator 1
	movl	$110, %eax	#, iftmp.897
	jmp	.L2002	#
.L2001:
	.loc 1 10235 0 discriminator 2
	movl	$106, %eax	#, iftmp.897
.L2002:
	.loc 1 10235 0 discriminator 1
	movl	%eax, -124(%rbp)	# iftmp.897, code
	.loc 1 10238 0 is_stmt 1 discriminator 1
	jmp	.L1999	#
.L2000:
	.loc 1 10237 0
	cmpl	$0, -108(%rbp)	#, unsignedp
	je	.L2004	#,
	.loc 1 10237 0 is_stmt 0 discriminator 1
	movl	$111, %eax	#, iftmp.898
	jmp	.L2005	#
.L2004:
	.loc 1 10237 0 discriminator 2
	movl	$107, %eax	#, iftmp.898
.L2005:
	.loc 1 10237 0 discriminator 3
	movl	%eax, -124(%rbp)	# iftmp.898, code
	.loc 1 10238 0 is_stmt 1 discriminator 3
	jmp	.L1999	#
.L1987:
	.loc 1 10240 0
	cmpl	$0, -108(%rbp)	#, unsignedp
	jne	.L2006	#,
	.loc 1 10240 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# arg1, tmp234
	movq	%rax, %rdi	# tmp234,
	call	integer_all_onesp	#
	testl	%eax, %eax	# D.26034
	je	.L2006	#,
	.loc 1 10241 0 is_stmt 1
	movq	global_trees+88(%rip), %rax	# global_trees, tmp235
	movq	%rax, -88(%rbp)	# tmp235, arg1
	movl	$107, -124(%rbp)	#, code
	nop
	.loc 1 10244 0
	jmp	.L1999	#
.L2006:
	.loc 1 10243 0
	cmpl	$0, -108(%rbp)	#, unsignedp
	je	.L2008	#,
	.loc 1 10243 0 is_stmt 0 discriminator 1
	movl	$110, %eax	#, iftmp.899
	jmp	.L2009	#
.L2008:
	.loc 1 10243 0 discriminator 2
	movl	$106, %eax	#, iftmp.899
.L2009:
	.loc 1 10243 0 discriminator 3
	movl	%eax, -124(%rbp)	# iftmp.899, code
	.loc 1 10244 0 is_stmt 1 discriminator 3
	jmp	.L1999	#
.L1988:
	.loc 1 10246 0
	cmpl	$0, -108(%rbp)	#, unsignedp
	jne	.L2010	#,
	.loc 1 10246 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# arg1, tmp236
	movq	%rax, %rdi	# tmp236,
	call	integer_all_onesp	#
	testl	%eax, %eax	# D.26034
	je	.L2010	#,
	.loc 1 10247 0 is_stmt 1
	movq	global_trees+88(%rip), %rax	# global_trees, tmp237
	movq	%rax, -88(%rbp)	# tmp237, arg1
	movl	$104, -124(%rbp)	#, code
	nop
	.loc 1 10250 0
	jmp	.L1999	#
.L2010:
	.loc 1 10249 0
	cmpl	$0, -108(%rbp)	#, unsignedp
	je	.L2012	#,
	.loc 1 10249 0 is_stmt 0 discriminator 1
	movl	$109, %eax	#, iftmp.900
	jmp	.L2013	#
.L2012:
	.loc 1 10249 0 discriminator 2
	movl	$105, %eax	#, iftmp.900
.L2013:
	.loc 1 10249 0 discriminator 3
	movl	%eax, -124(%rbp)	# iftmp.900, code
	.loc 1 10250 0 is_stmt 1 discriminator 3
	jmp	.L1999	#
.L1989:
	.loc 1 10252 0
	movq	-88(%rbp), %rax	# arg1, tmp238
	movq	%rax, %rdi	# tmp238,
	call	integer_onep	#
	testl	%eax, %eax	# D.26034
	je	.L2014	#,
	.loc 1 10253 0
	movq	global_trees+88(%rip), %rax	# global_trees, tmp239
	movq	%rax, -88(%rbp)	# tmp239, arg1
	cmpl	$0, -108(%rbp)	#, unsignedp
	je	.L2015	#,
	.loc 1 10253 0 is_stmt 0 discriminator 1
	movl	$109, %eax	#, iftmp.901
	jmp	.L2016	#
.L2015:
	.loc 1 10253 0 discriminator 2
	movl	$105, %eax	#, iftmp.901
.L2016:
	movl	%eax, -124(%rbp)	# iftmp.901, code
	.loc 1 10256 0 is_stmt 1 discriminator 2
	jmp	.L1999	#
.L2014:
	.loc 1 10255 0
	cmpl	$0, -108(%rbp)	#, unsignedp
	je	.L2018	#,
	.loc 1 10255 0 is_stmt 0 discriminator 1
	movl	$108, %eax	#, iftmp.902
	jmp	.L2019	#
.L2018:
	.loc 1 10255 0 discriminator 2
	movl	$104, %eax	#, iftmp.902
.L2019:
	.loc 1 10255 0 discriminator 3
	movl	%eax, -124(%rbp)	# iftmp.902, code
	.loc 1 10256 0 is_stmt 1 discriminator 3
	jmp	.L1999	#
.L1992:
	.loc 1 10259 0
	movl	$112, -124(%rbp)	#, code
	.loc 1 10260 0
	jmp	.L1999	#
.L1993:
	.loc 1 10262 0
	movl	$113, -124(%rbp)	#, code
	.loc 1 10263 0
	jmp	.L1999	#
.L1994:
	.loc 1 10265 0
	movl	$118, -124(%rbp)	#, code
	.loc 1 10266 0
	jmp	.L1999	#
.L1995:
	.loc 1 10268 0
	movl	$117, -124(%rbp)	#, code
	.loc 1 10269 0
	jmp	.L1999	#
.L1996:
	.loc 1 10271 0
	movl	$116, -124(%rbp)	#, code
	.loc 1 10272 0
	jmp	.L1999	#
.L1997:
	.loc 1 10274 0
	movl	$115, -124(%rbp)	#, code
	.loc 1 10275 0
	jmp	.L1999	#
.L1998:
	.loc 1 10277 0
	movl	$114, -124(%rbp)	#, code
	.loc 1 10278 0
	jmp	.L1999	#
.L1984:
	.loc 1 10281 0
	movl	$__FUNCTION__.15568, %edx	#,
	movl	$10281, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L1999:
	.loc 1 10285 0
	movq	-96(%rbp), %rax	# arg0, tmp240
	movzbl	16(%rax), %eax	# arg0_10->common.code, D.26029
	cmpb	$26, %al	#, D.26029
	je	.L2020	#,
	.loc 1 10285 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# arg0, tmp241
	movzbl	16(%rax), %eax	# arg0_10->common.code, D.26029
	cmpb	$25, %al	#, D.26029
	jne	.L2021	#,
.L2020:
	.loc 1 10287 0 is_stmt 1
	movq	-96(%rbp), %rax	# arg0, tmp242
	movq	%rax, -40(%rbp)	# tmp242, tem
	movq	-88(%rbp), %rax	# arg1, tmp243
	movq	%rax, -96(%rbp)	# tmp243, arg0
	movq	-40(%rbp), %rax	# tem, tmp244
	movq	%rax, -88(%rbp)	# tmp244, arg1
	.loc 1 10288 0
	movl	-124(%rbp), %eax	# code, tmp245
	movl	%eax, %edi	# tmp245,
	call	swap_condition	#
	movl	%eax, -124(%rbp)	# tmp246, code
.L2021:
	.loc 1 10297 0
	cmpl	$102, -124(%rbp)	#, code
	je	.L2022	#,
	.loc 1 10297 0 is_stmt 0 discriminator 1
	cmpl	$103, -124(%rbp)	#, code
	jne	.L2023	#,
.L2022:
	.loc 1 10298 0 is_stmt 1
	movq	-96(%rbp), %rax	# arg0, tmp247
	movzbl	16(%rax), %eax	# arg0_11->common.code, D.26029
	cmpb	$88, %al	#, D.26029
	jne	.L2023	#,
	.loc 1 10298 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# arg1, tmp248
	movq	%rax, %rdi	# tmp248,
	call	integer_zerop	#
	testl	%eax, %eax	# D.26034
	je	.L2023	#,
	.loc 1 10299 0 is_stmt 1
	movq	-96(%rbp), %rax	# arg0, tmp249
	movq	40(%rax), %rax	# arg0_11->exp.operands, D.26030
	movq	%rax, %rdi	# D.26030,
	call	integer_pow2p	#
	testl	%eax, %eax	# D.26034
	je	.L2023	#,
.LBB166:
	.loc 1 10301 0
	movq	-96(%rbp), %rax	# arg0, tmp250
	movq	32(%rax), %rax	# arg0_11->exp.operands, tmp251
	movq	%rax, -56(%rbp)	# tmp251, inner
	.loc 1 10302 0
	movq	-96(%rbp), %rax	# arg0, tmp252
	movq	40(%rax), %rax	# arg0_11->exp.operands, D.26030
	movq	%rax, %rdi	# D.26030,
	call	tree_log2	#
	movl	%eax, -116(%rbp)	# tmp253, bitnum
	.loc 1 10308 0
	movq	-56(%rbp), %rax	# inner, tmp254
	movzbl	16(%rax), %eax	# inner_129->common.code, D.26029
	cmpb	$83, %al	#, D.26029
	jne	.L2024	#,
	.loc 1 10309 0
	movq	-56(%rbp), %rax	# inner, tmp255
	movq	40(%rax), %rax	# inner_129->exp.operands, D.26030
	movzbl	16(%rax), %eax	# _133->common.code, D.26029
	cmpb	$25, %al	#, D.26029
	jne	.L2024	#,
	.loc 1 10310 0
	movq	-56(%rbp), %rax	# inner, tmp256
	movq	40(%rax), %rax	# inner_129->exp.operands, D.26030
	movq	40(%rax), %rax	# _135->int_cst.int_cst.high, D.26035
	testq	%rax, %rax	# D.26035
	jne	.L2024	#,
	.loc 1 10311 0
	movq	-48(%rbp), %rax	# type, tmp257
	movzwl	60(%rax), %eax	# *type_52, tmp260
	andw	$511, %ax	#, D.26036
	movzwl	%ax, %eax	# D.26036, D.26034
	cmpl	-116(%rbp), %eax	# bitnum, D.26034
	jle	.L2024	#,
	.loc 1 10313 0
	movq	-48(%rbp), %rax	# type, tmp261
	movzwl	60(%rax), %eax	# *type_52, tmp264
	andw	$511, %ax	#, D.26036
	movzwl	%ax, %eax	# D.26036, D.26034
	movl	-116(%rbp), %edx	# bitnum, tmp265
	subl	%eax, %edx	# D.26034, D.26034
	movl	%edx, %eax	# D.26034, D.26034
	.loc 1 10312 0
	movslq	%eax, %rdx	# D.26034, D.26037
	movq	-56(%rbp), %rax	# inner, tmp266
	movq	40(%rax), %rax	# inner_129->exp.operands, D.26030
	movq	%rdx, %rsi	# D.26037,
	movq	%rax, %rdi	# D.26030,
	call	compare_tree_int	#
	testl	%eax, %eax	# D.26034
	jns	.L2024	#,
	.loc 1 10315 0
	movq	-56(%rbp), %rax	# inner, tmp267
	movq	40(%rax), %rax	# inner_129->exp.operands, D.26030
	movq	32(%rax), %rax	# _145->int_cst.int_cst.low, D.26037
	movl	%eax, %edx	# D.26037, D.26038
	movl	-116(%rbp), %eax	# bitnum, bitnum.903
	addl	%edx, %eax	# D.26038, D.26038
	movl	%eax, -116(%rbp)	# D.26038, bitnum
	.loc 1 10316 0
	movq	-56(%rbp), %rax	# inner, tmp268
	movq	32(%rax), %rax	# inner_129->exp.operands, tmp269
	movq	%rax, -56(%rbp)	# tmp269, inner
.L2024:
	.loc 1 10322 0
	movl	$1, -104(%rbp)	#, ops_unsignedp
	.loc 1 10330 0
	movq	-72(%rbp), %rax	# subtarget, tmp270
	movq	%rax, %rdi	# tmp270,
	call	get_subtarget	#
	testq	%rax, %rax	# D.26039
	je	.L2025	#,
	.loc 1 10331 0
	movq	-72(%rbp), %rax	# subtarget, tmp271
	movzbl	2(%rax), %eax	# subtarget_43->mode, D.26029
	movzbl	%al, %eax	# D.26029, D.26033
	cmpl	-112(%rbp), %eax	# operand_mode, D.26033
	jne	.L2025	#,
	.loc 1 10332 0
	movq	-56(%rbp), %rcx	# inner, tmp272
	movq	-72(%rbp), %rax	# subtarget, tmp273
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp272,
	movq	%rax, %rdi	# tmp273,
	call	safe_from_p	#
	testl	%eax, %eax	# D.26034
	jne	.L2026	#,
.L2025:
	.loc 1 10333 0
	movq	$0, -72(%rbp)	#, subtarget
.L2026:
	.loc 1 10335 0
	movq	-72(%rbp), %rsi	# subtarget, tmp274
	movq	-56(%rbp), %rax	# inner, tmp275
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp275,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp276, op0
	.loc 1 10337 0
	cmpl	$0, -116(%rbp)	#, bitnum
	je	.L2027	#,
	.loc 1 10338 0
	movl	-116(%rbp), %eax	# bitnum, tmp277
	cltq
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.26035,
	call	size_int_wide	#
	movq	%rax, %rcx	#, D.26030
	movl	-104(%rbp), %edi	# ops_unsignedp, tmp278
	movq	-72(%rbp), %rsi	# subtarget, tmp279
	movq	-80(%rbp), %rdx	# op0, tmp280
	movl	-112(%rbp), %eax	# operand_mode, tmp281
	movl	%edi, %r9d	# tmp278,
	movq	%rsi, %r8	# tmp279,
	movl	%eax, %esi	# tmp281,
	movl	$83, %edi	#,
	call	expand_shift	#
	movq	%rax, -80(%rbp)	# tmp282, op0
.L2027:
	.loc 1 10341 0
	movq	-80(%rbp), %rax	# op0, tmp283
	movzbl	2(%rax), %eax	# op0_20->mode, D.26029
	movzbl	%al, %eax	# D.26029, D.26033
	cmpl	-148(%rbp), %eax	# mode, D.26033
	je	.L2028	#,
	.loc 1 10342 0
	movl	-104(%rbp), %edx	# ops_unsignedp, tmp284
	movq	-80(%rbp), %rcx	# op0, tmp285
	movl	-148(%rbp), %eax	# mode, tmp286
	movq	%rcx, %rsi	# tmp285,
	movl	%eax, %edi	# tmp286,
	call	convert_to_mode	#
	movq	%rax, -80(%rbp)	# tmp287, op0
.L2028:
	.loc 1 10344 0
	cmpl	$103, -124(%rbp)	#, code
	jne	.L2029	#,
	.loc 1 10344 0 is_stmt 0 discriminator 1
	cmpl	$0, -120(%rbp)	#, invert
	je	.L2030	#,
.L2029:
	.loc 1 10344 0 discriminator 2
	cmpl	$102, -124(%rbp)	#, code
	jne	.L2031	#,
	.loc 1 10344 0 discriminator 1
	cmpl	$0, -120(%rbp)	#, invert
	je	.L2031	#,
.L2030:
	.loc 1 10345 0 is_stmt 1
	movq	const_int_rtx+520(%rip), %rcx	# const_int_rtx, D.26039
	movq	optab_table+160(%rip), %rsi	# optab_table, D.26040
	movl	-104(%rbp), %r8d	# ops_unsignedp, tmp288
	movq	-72(%rbp), %rdi	# subtarget, tmp289
	movq	-80(%rbp), %rdx	# op0, tmp290
	movl	-148(%rbp), %eax	# mode, tmp291
	movl	$3, (%rsp)	#,
	movl	%r8d, %r9d	# tmp288,
	movq	%rdi, %r8	# tmp289,
	movl	%eax, %edi	# tmp291,
	call	expand_binop	#
	movq	%rax, -80(%rbp)	# tmp292, op0
.L2031:
	.loc 1 10349 0
	movq	-48(%rbp), %rax	# type, tmp293
	movzwl	60(%rax), %eax	# *type_52, tmp296
	andw	$511, %ax	#, D.26036
	movzwl	%ax, %eax	# D.26036, D.26034
	subl	$1, %eax	#, D.26034
	cmpl	-116(%rbp), %eax	# bitnum, D.26034
	je	.L2032	#,
	.loc 1 10350 0
	movq	const_int_rtx+520(%rip), %rdx	# const_int_rtx, D.26039
	movq	-72(%rbp), %rcx	# subtarget, tmp297
	movq	-80(%rbp), %rsi	# op0, tmp298
	movl	-148(%rbp), %eax	# mode, tmp299
	movl	%eax, %edi	# tmp299,
	call	expand_and	#
	movq	%rax, -80(%rbp)	# tmp300, op0
.L2032:
	.loc 1 10352 0
	movq	-80(%rbp), %rax	# op0, D.26028
	jmp	.L1974	#
.L2023:
.LBE166:
	.loc 1 10356 0
	movl	-112(%rbp), %ecx	# operand_mode, tmp301
	movl	-124(%rbp), %eax	# code, tmp302
	movl	$2, %edx	#,
	movl	%ecx, %esi	# tmp301,
	movl	%eax, %edi	# tmp302,
	call	can_compare_p	#
	testl	%eax, %eax	# D.26034
	jne	.L2033	#,
	.loc 1 10357 0
	movl	$0, %eax	#, D.26028
	jmp	.L1974	#
.L2033:
	.loc 1 10359 0
	movl	-124(%rbp), %eax	# code, code.904
	cltq
	movl	setcc_gen_code(,%rax,4), %eax	# setcc_gen_code, tmp304
	movl	%eax, -100(%rbp)	# tmp304, icode
	.loc 1 10360 0
	cmpl	$1317, -100(%rbp)	#, icode
	je	.L2034	#,
	.loc 1 10361 0
	cmpl	$0, -152(%rbp)	#, only_cheap
	je	.L2035	#,
	.loc 1 10361 0 is_stmt 0 discriminator 1
	movl	-100(%rbp), %eax	# icode, icode.905
	movslq	%eax, %rdx	# icode.905, tmp305
	movq	%rdx, %rax	# tmp305, tmp306
	salq	$2, %rax	#, tmp306
	addq	%rdx, %rax	# tmp305, tmp306
	salq	$3, %rax	#, tmp307
	addq	$insn_data+24, %rax	#, tmp308
	movq	(%rax), %rax	# insn_data[icode.905_180].operand, D.26041
	movzwl	16(%rax), %eax	# _181->mode, D.26042
	movzwl	%ax, %eax	# D.26042, D.26033
	cmpl	-148(%rbp), %eax	# mode, D.26033
	je	.L2035	#,
.L2034:
	.loc 1 10365 0 is_stmt 1
	cmpl	$107, -124(%rbp)	#, code
	jne	.L2036	#,
	.loc 1 10365 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# arg1, tmp309
	movq	%rax, %rdi	# tmp309,
	call	integer_zerop	#
	testl	%eax, %eax	# D.26034
	je	.L2036	#,
	jmp	.L2035	#
.L2036:
	.loc 1 10366 0 is_stmt 1
	cmpl	$0, -152(%rbp)	#, only_cheap
	jne	.L2037	#,
	.loc 1 10366 0 is_stmt 0 discriminator 1
	cmpl	$104, -124(%rbp)	#, code
	jne	.L2037	#,
	movq	-88(%rbp), %rax	# arg1, tmp310
	movq	%rax, %rdi	# tmp310,
	call	integer_zerop	#
	testl	%eax, %eax	# D.26034
	je	.L2037	#,
	jmp	.L2035	#
.L2037:
	.loc 1 10368 0 is_stmt 1
	movl	ix86_branch_cost(%rip), %eax	# ix86_branch_cost, ix86_branch_cost.906
	testl	%eax, %eax	# ix86_branch_cost.906
	js	.L2038	#,
	.loc 1 10369 0
	cmpl	$0, -152(%rbp)	#, only_cheap
	jne	.L2038	#,
	.loc 1 10369 0 is_stmt 0 discriminator 1
	cmpl	$102, -124(%rbp)	#, code
	je	.L2039	#,
	cmpl	$103, -124(%rbp)	#, code
	jne	.L2038	#,
.L2039:
	.loc 1 10370 0 is_stmt 1
	movq	-48(%rbp), %rax	# type, tmp311
	movzbl	16(%rax), %eax	# type_52->common.code, D.26029
	cmpb	$7, %al	#, D.26029
	je	.L2038	#,
	.loc 1 10371 0
	movq	optab_table+272(%rip), %rax	# optab_table, D.26040
	movl	-112(%rbp), %edx	# operand_mode, operand_mode.907
	movslq	%edx, %rdx	# operand_mode.907, tmp312
	salq	$4, %rdx	#, tmp313
	addq	%rdx, %rax	# tmp313, tmp314
	movl	8(%rax), %eax	# _188->handlers[operand_mode.907_189].insn_code, D.26043
	cmpl	$1317, %eax	#, D.26043
	jne	.L2040	#,
	.loc 1 10373 0
	movq	optab_table+296(%rip), %rax	# optab_table, D.26040
	movl	-112(%rbp), %edx	# operand_mode, operand_mode.908
	movslq	%edx, %rdx	# operand_mode.908, tmp315
	salq	$4, %rdx	#, tmp316
	addq	%rdx, %rax	# tmp316, tmp317
	movl	8(%rax), %eax	# _191->handlers[operand_mode.908_192].insn_code, D.26043
	cmpl	$1317, %eax	#, D.26043
	je	.L2038	#,
.L2040:
	.loc 1 10368 0
	jmp	.L2035	#
.L2038:
	.loc 1 10377 0
	movl	$0, %eax	#, D.26028
	jmp	.L1974	#
.L2035:
	.loc 1 10380 0
	movq	-144(%rbp), %rax	# target, tmp318
	movq	%rax, %rdi	# tmp318,
	call	get_subtarget	#
	testq	%rax, %rax	# D.26039
	je	.L2041	#,
	.loc 1 10381 0
	movq	-72(%rbp), %rax	# subtarget, tmp319
	movzbl	2(%rax), %eax	# subtarget_43->mode, D.26029
	movzbl	%al, %eax	# D.26029, D.26033
	cmpl	-112(%rbp), %eax	# operand_mode, D.26033
	jne	.L2041	#,
	.loc 1 10382 0
	movq	-88(%rbp), %rcx	# arg1, tmp320
	movq	-72(%rbp), %rax	# subtarget, tmp321
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp320,
	movq	%rax, %rdi	# tmp321,
	call	safe_from_p	#
	testl	%eax, %eax	# D.26034
	jne	.L2042	#,
.L2041:
	.loc 1 10383 0
	movq	$0, -72(%rbp)	#, subtarget
.L2042:
	.loc 1 10385 0
	movq	-72(%rbp), %rsi	# subtarget, tmp322
	movq	-96(%rbp), %rax	# arg0, tmp323
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp323,
	call	expand_expr	#
	movq	%rax, -80(%rbp)	# tmp324, op0
	.loc 1 10386 0
	movq	-88(%rbp), %rax	# arg1, tmp325
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp325,
	call	expand_expr	#
	movq	%rax, -32(%rbp)	# tmp326, op1
	.loc 1 10388 0
	cmpq	$0, -144(%rbp)	#, target
	jne	.L2043	#,
	.loc 1 10389 0
	movl	-148(%rbp), %eax	# mode, tmp327
	movl	%eax, %edi	# tmp327,
	call	gen_reg_rtx	#
	movq	%rax, -144(%rbp)	# tmp328, target
.L2043:
	.loc 1 10397 0
	movq	-32(%rbp), %rax	# op1, tmp329
	movq	%rax, %rdi	# tmp329,
	call	queued_subexp_p	#
	.loc 1 10395 0
	testl	%eax, %eax	# D.26034
	je	.L2044	#,
	.loc 1 10395 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# op1, tmp330
	movq	%rax, %rdi	# tmp330,
	call	copy_rtx	#
	movq	%rax, %rbx	#, iftmp.909
	jmp	.L2045	#
.L2044:
	.loc 1 10395 0 discriminator 2
	movq	-32(%rbp), %rbx	# op1, iftmp.909
.L2045:
	.loc 1 10396 0 is_stmt 1 discriminator 3
	movq	-80(%rbp), %rax	# op0, tmp331
	movq	%rax, %rdi	# tmp331,
	call	queued_subexp_p	#
	.loc 1 10395 0 discriminator 3
	testl	%eax, %eax	# D.26034
	je	.L2046	#,
	.loc 1 10395 0 is_stmt 0 discriminator 4
	movq	-80(%rbp), %rax	# op0, tmp332
	movq	%rax, %rdi	# tmp332,
	call	copy_rtx	#
	jmp	.L2047	#
.L2046:
	.loc 1 10395 0 discriminator 5
	movq	-80(%rbp), %rax	# op0, iftmp.910
.L2047:
	.loc 1 10395 0 discriminator 6
	movl	-108(%rbp), %ecx	# unsignedp, tmp333
	movl	-112(%rbp), %edx	# operand_mode, tmp334
	movl	-124(%rbp), %esi	# code, tmp335
	movq	-144(%rbp), %rdi	# target, tmp336
	movl	$1, (%rsp)	#,
	movl	%ecx, %r9d	# tmp333,
	movl	%edx, %r8d	# tmp334,
	movq	%rbx, %rcx	# iftmp.909,
	movq	%rax, %rdx	# iftmp.910,
	call	emit_store_flag	#
	movq	%rax, -64(%rbp)	# tmp337, result
	.loc 1 10400 0 is_stmt 1 discriminator 6
	cmpq	$0, -64(%rbp)	#, result
	je	.L2048	#,
	.loc 1 10402 0
	cmpl	$0, -120(%rbp)	#, invert
	je	.L2049	#,
	.loc 1 10403 0
	movq	const_int_rtx+520(%rip), %rcx	# const_int_rtx, D.26039
	movq	optab_table+160(%rip), %rsi	# optab_table, D.26040
	movq	-64(%rbp), %rdi	# result, tmp338
	movq	-64(%rbp), %rdx	# result, tmp339
	movl	-148(%rbp), %eax	# mode, tmp340
	movl	$3, (%rsp)	#,
	movl	$0, %r9d	#,
	movq	%rdi, %r8	# tmp338,
	movl	%eax, %edi	# tmp340,
	call	expand_binop	#
	movq	%rax, -64(%rbp)	# tmp341, result
.L2049:
	.loc 1 10405 0
	movq	-64(%rbp), %rax	# result, D.26028
	jmp	.L1974	#
.L2048:
	.loc 1 10409 0
	movq	-144(%rbp), %rax	# target, tmp342
	movzwl	(%rax), %eax	# target_2->code, D.26042
	cmpw	$61, %ax	#, D.26042
	jne	.L2050	#,
	.loc 1 10410 0
	movq	-80(%rbp), %rdx	# op0, tmp343
	movq	-144(%rbp), %rax	# target, tmp344
	movq	%rdx, %rsi	# tmp343,
	movq	%rax, %rdi	# tmp344,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.26034
	jne	.L2050	#,
	.loc 1 10410 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rdx	# op1, tmp345
	movq	-144(%rbp), %rax	# target, tmp346
	movq	%rdx, %rsi	# tmp345,
	movq	%rax, %rdi	# tmp346,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.26034
	je	.L2051	#,
.L2050:
	.loc 1 10411 0 is_stmt 1
	movq	-144(%rbp), %rax	# target, tmp347
	movzbl	2(%rax), %eax	# target_2->mode, D.26029
	movzbl	%al, %eax	# D.26029, D.26044
	movl	%eax, %edi	# D.26044,
	call	gen_reg_rtx	#
	movq	%rax, -144(%rbp)	# tmp348, target
.L2051:
	.loc 1 10413 0
	cmpl	$0, -120(%rbp)	#, invert
	je	.L2052	#,
	.loc 1 10413 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.911
	jmp	.L2053	#
.L2052:
	.loc 1 10413 0 discriminator 2
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, iftmp.911
.L2053:
	.loc 1 10413 0 discriminator 3
	movq	-144(%rbp), %rdx	# target, tmp349
	movq	%rax, %rsi	# iftmp.911,
	movq	%rdx, %rdi	# tmp349,
	call	emit_move_insn	#
	.loc 1 10414 0 is_stmt 1 discriminator 3
	movl	-112(%rbp), %edi	# operand_mode, tmp350
	movl	-108(%rbp), %ecx	# unsignedp, tmp351
	movl	-124(%rbp), %edx	# code, tmp352
	movq	-32(%rbp), %rsi	# op1, tmp353
	movq	-80(%rbp), %rax	# op0, tmp354
	movl	$0, %r9d	#,
	movl	%edi, %r8d	# tmp350,
	movq	%rax, %rdi	# tmp354,
	call	compare_from_rtx	#
	movq	%rax, -64(%rbp)	# tmp355, result
	.loc 1 10416 0 discriminator 3
	movq	-64(%rbp), %rax	# result, tmp356
	movzwl	(%rax), %eax	# result_222->code, D.26042
	cmpw	$54, %ax	#, D.26042
	jne	.L2054	#,
	.loc 1 10417 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.26039
	.loc 1 10419 0
	cmpq	-64(%rbp), %rax	# result, D.26039
	jne	.L2055	#,
	.loc 1 10417 0
	cmpl	$0, -120(%rbp)	#, invert
	je	.L2056	#,
.L2055:
	.loc 1 10418 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.26039
	cmpq	-64(%rbp), %rax	# result, D.26039
	je	.L2057	#,
	.loc 1 10418 0 is_stmt 0 discriminator 1
	cmpl	$0, -120(%rbp)	#, invert
	je	.L2057	#,
.L2056:
	.loc 1 10419 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.912
	jmp	.L2058	#
.L2057:
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, iftmp.912
.L2058:
	.loc 1 10417 0
	jmp	.L1974	#
.L2054:
	.loc 1 10427 0
	movq	-64(%rbp), %rax	# result, tmp357
	movzwl	(%rax), %eax	# result_222->code, D.26042
	movzwl	%ax, %eax	# D.26042, tmp358
	movl	%eax, -124(%rbp)	# tmp358, code
	.loc 1 10429 0
	call	gen_label_rtx	#
	movq	%rax, -24(%rbp)	# tmp359, label
	.loc 1 10430 0
	movl	-124(%rbp), %eax	# code, code.913
	cltq
	movq	bcc_gen_fctn(,%rax,8), %rax	# bcc_gen_fctn, D.26045
	testq	%rax, %rax	# D.26045
	jne	.L2059	#,
	.loc 1 10431 0
	movl	$__FUNCTION__.15568, %edx	#,
	movl	$10431, %esi	#,
	movl	$.LC0, %edi	#,
	call	fancy_abort	#
.L2059:
	.loc 1 10433 0
	movl	-124(%rbp), %eax	# code, code.914
	cltq
	movq	bcc_gen_fctn(,%rax,8), %rax	# bcc_gen_fctn, D.26045
	movq	-24(%rbp), %rdx	# label, tmp362
	movq	%rdx, %rdi	# tmp362,
	call	*%rax	# D.26045
	movq	%rax, %rdi	# D.26039,
	call	emit_jump_insn	#
	.loc 1 10434 0
	cmpl	$0, -120(%rbp)	#, invert
	je	.L2060	#,
	.loc 1 10434 0 is_stmt 0 discriminator 1
	movq	const_int_rtx+520(%rip), %rax	# const_int_rtx, iftmp.915
	jmp	.L2061	#
.L2060:
	.loc 1 10434 0 discriminator 2
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, iftmp.915
.L2061:
	.loc 1 10434 0 discriminator 3
	movq	-144(%rbp), %rdx	# target, tmp363
	movq	%rax, %rsi	# iftmp.915,
	movq	%rdx, %rdi	# tmp363,
	call	emit_move_insn	#
	.loc 1 10435 0 is_stmt 1 discriminator 3
	movq	-24(%rbp), %rax	# label, tmp364
	movq	%rax, %rdi	# tmp364,
	call	emit_label	#
	.loc 1 10437 0 discriminator 3
	movq	-144(%rbp), %rax	# target, D.26028
.L1974:
	.loc 1 10438 0
	addq	$152, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE71:
	.size	do_store_flag, .-do_store_flag
	.globl	case_values_threshold
	.type	case_values_threshold, @function
case_values_threshold:
.LFB72:
	.loc 1 10457 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 10458 0
	movl	$5, %eax	#, D.26046
	.loc 1 10459 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE72:
	.size	case_values_threshold, .-case_values_threshold
	.globl	try_casesi
	.type	try_casesi, @function
try_casesi:
.LFB73:
	.loc 1 10469 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# index_type, index_type
	movq	%rsi, -32(%rbp)	# index_expr, index_expr
	movq	%rdx, -40(%rbp)	# minval, minval
	movq	%rcx, -48(%rbp)	# range, range
	movq	%r8, -56(%rbp)	# table_label, table_label
	movq	%r9, -64(%rbp)	# default_label, default_label
	.loc 1 10470 0
	movl	$4, -8(%rbp)	#, index_mode
	.loc 1 10471 0
	movl	-8(%rbp), %eax	# index_mode, index_mode.916
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.26047
	movzwl	%ax, %eax	# D.26047, tmp64
	movl	%eax, -4(%rbp)	# tmp64, index_bits
	.loc 1 10476 0
	movl	$0, %eax	#, D.26048
	.loc 1 10535 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE73:
	.size	try_casesi, .-try_casesi
	.type	do_tablejump, @function
do_tablejump:
.LFB74:
	.loc 1 10558 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# index, index
	movl	%esi, -44(%rbp)	# mode, mode
	movq	%rdx, -56(%rbp)	# range, range
	movq	%rcx, -64(%rbp)	# table_label, table_label
	movq	%r8, -72(%rbp)	# default_label, default_label
	.loc 1 10569 0
	movl	-44(%rbp), %ecx	# mode, tmp97
	movq	-56(%rbp), %rsi	# range, tmp98
	movq	-40(%rbp), %rax	# index, tmp99
	movq	-72(%rbp), %rdx	# default_label, tmp100
	movq	%rdx, (%rsp)	# tmp100,
	movl	$1, %r9d	#,
	movl	%ecx, %r8d	# tmp97,
	movl	$0, %ecx	#,
	movl	$109, %edx	#,
	movq	%rax, %rdi	# tmp99,
	call	emit_cmp_and_jump_insns	#
	.loc 1 10574 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.920
	andl	$33554432, %eax	#, D.26049
	testl	%eax, %eax	# D.26049
	je	.L2067	#,
	.loc 1 10574 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.919
	jmp	.L2068	#
.L2067:
	.loc 1 10574 0 discriminator 2
	movl	$4, %eax	#, iftmp.919
.L2068:
	.loc 1 10574 0 discriminator 3
	cmpl	-44(%rbp), %eax	# mode, iftmp.919
	je	.L2069	#,
	.loc 1 10575 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.922
	andl	$33554432, %eax	#, D.26049
	testl	%eax, %eax	# D.26049
	je	.L2070	#,
	.loc 1 10575 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.921
	jmp	.L2071	#
.L2070:
	.loc 1 10575 0 discriminator 2
	movl	$4, %eax	#, iftmp.921
.L2071:
	.loc 1 10575 0 discriminator 3
	movq	-40(%rbp), %rcx	# index, tmp101
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp101,
	movl	%eax, %edi	# iftmp.921,
	call	convert_to_mode	#
	movq	%rax, -40(%rbp)	# tmp102, index
.L2069:
	.loc 1 10593 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.924
	andl	$33554432, %eax	#, D.26049
	testl	%eax, %eax	# D.26049
	je	.L2072	#,
	.loc 1 10593 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.923
	jmp	.L2073	#
.L2072:
	.loc 1 10593 0 discriminator 2
	movl	$4, %eax	#, iftmp.923
.L2073:
	.loc 1 10593 0 discriminator 3
	movq	-64(%rbp), %rdx	# table_label, tmp103
	movl	%eax, %esi	# iftmp.923,
	movl	$67, %edi	#,
	call	gen_rtx_fmt_u00	#
	movq	%rax, %rbx	#, D.26050
	movl	target_flags(%rip), %eax	# target_flags, target_flags.926
	andl	$33554432, %eax	#, D.26049
	testl	%eax, %eax	# D.26049
	je	.L2074	#,
	.loc 1 10593 0 discriminator 2
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.927
	testl	%eax, %eax	# flag_pic.927
	je	.L2075	#,
.L2074:
	.loc 1 10593 0 discriminator 1
	movl	$4, %eax	#, iftmp.925
	jmp	.L2076	#
.L2075:
	movl	$5, %eax	#, iftmp.925
.L2076:
	.loc 1 10593 0 discriminator 3
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.26051
	movzbl	%al, %eax	# D.26051, D.26052
	movq	%rax, %rsi	# D.26052,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.26050
	movl	target_flags(%rip), %eax	# target_flags, target_flags.929
	andl	$33554432, %eax	#, D.26049
	testl	%eax, %eax	# D.26049
	je	.L2077	#,
	.loc 1 10593 0 discriminator 4
	movl	$5, %eax	#, iftmp.928
	jmp	.L2078	#
.L2077:
	.loc 1 10593 0 discriminator 5
	movl	$4, %eax	#, iftmp.928
.L2078:
	.loc 1 10593 0 discriminator 6
	movq	-40(%rbp), %rdx	# index, tmp105
	movl	%eax, %esi	# iftmp.928,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.26050
	movl	target_flags(%rip), %eax	# target_flags, target_flags.931
	andl	$33554432, %eax	#, D.26049
	testl	%eax, %eax	# D.26049
	je	.L2079	#,
	.loc 1 10593 0 discriminator 7
	movl	$5, %eax	#, iftmp.930
	jmp	.L2080	#
.L2079:
	.loc 1 10593 0 discriminator 8
	movl	$4, %eax	#, iftmp.930
.L2080:
	.loc 1 10593 0 discriminator 9
	movq	%rbx, %rcx	# D.26050,
	movl	%eax, %esi	# iftmp.930,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -40(%rbp)	# tmp106, index
	.loc 1 10602 0 is_stmt 1 discriminator 9
	movl	target_flags(%rip), %eax	# target_flags, target_flags.933
	andl	$33554432, %eax	#, D.26049
	testl	%eax, %eax	# D.26049
	je	.L2081	#,
	.loc 1 10602 0 is_stmt 0 discriminator 2
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.934
	testl	%eax, %eax	# flag_pic.934
	je	.L2082	#,
.L2081:
	.loc 1 10602 0 discriminator 1
	movl	$4, %eax	#, iftmp.932
	jmp	.L2083	#
.L2082:
	movl	$5, %eax	#, iftmp.932
.L2083:
	.loc 1 10602 0 discriminator 3
	movq	-40(%rbp), %rdx	# index, tmp107
	movq	%rdx, %rsi	# tmp107,
	movl	%eax, %edi	# iftmp.932,
	call	memory_address_noforce	#
	movq	%rax, -40(%rbp)	# tmp108, index
	.loc 1 10603 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.936
	andl	$33554432, %eax	#, D.26049
	testl	%eax, %eax	# D.26049
	je	.L2084	#,
	.loc 1 10603 0 is_stmt 0 discriminator 2
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.937
	testl	%eax, %eax	# flag_pic.937
	je	.L2085	#,
.L2084:
	.loc 1 10603 0 discriminator 1
	movl	$4, %eax	#, iftmp.935
	jmp	.L2086	#
.L2085:
	movl	$5, %eax	#, iftmp.935
.L2086:
	.loc 1 10603 0 discriminator 3
	movl	%eax, %edi	# iftmp.935,
	call	gen_reg_rtx	#
	movq	%rax, -32(%rbp)	# tmp109, temp
	.loc 1 10604 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.939
	andl	$33554432, %eax	#, D.26049
	testl	%eax, %eax	# D.26049
	je	.L2087	#,
	.loc 1 10604 0 is_stmt 0 discriminator 2
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.940
	testl	%eax, %eax	# flag_pic.940
	je	.L2088	#,
.L2087:
	.loc 1 10604 0 discriminator 1
	movl	$4, %eax	#, iftmp.938
	jmp	.L2089	#
.L2088:
	movl	$5, %eax	#, iftmp.938
.L2089:
	.loc 1 10604 0 discriminator 3
	movq	-40(%rbp), %rdx	# index, tmp110
	movq	%rdx, %rsi	# tmp110,
	movl	%eax, %edi	# iftmp.938,
	call	gen_rtx_MEM	#
	movq	%rax, -24(%rbp)	# tmp111, vector
	.loc 1 10605 0 is_stmt 1 discriminator 3
	movq	-24(%rbp), %rax	# vector, tmp112
	movzbl	3(%rax), %edx	# vector_65->unchanging, tmp115
	orl	$4, %edx	#, tmp116
	movb	%dl, 3(%rax)	# tmp116, vector_65->unchanging
	.loc 1 10606 0 discriminator 3
	movq	-24(%rbp), %rcx	# vector, tmp117
	movq	-32(%rbp), %rax	# temp, tmp118
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp117,
	movq	%rax, %rdi	# tmp118,
	call	convert_move	#
	.loc 1 10608 0 discriminator 3
	movq	-64(%rbp), %rdx	# table_label, tmp119
	movq	-32(%rbp), %rax	# temp, tmp120
	movq	%rdx, %rsi	# tmp119,
	movq	%rax, %rdi	# tmp120,
	call	gen_tablejump	#
	movq	%rax, %rdi	# D.26050,
	call	emit_jump_insn	#
	.loc 1 10612 0 discriminator 3
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.941
	testl	%eax, %eax	# flag_pic.941
	jne	.L2066	#,
	.loc 1 10613 0
	call	emit_barrier	#
.L2066:
	.loc 1 10614 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE74:
	.size	do_tablejump, .-do_tablejump
	.globl	try_tablejump
	.type	try_tablejump, @function
try_tablejump:
.LFB75:
	.loc 1 10621 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# index_type, index_type
	movq	%rsi, -48(%rbp)	# index_expr, index_expr
	movq	%rdx, -56(%rbp)	# minval, minval
	movq	%rcx, -64(%rbp)	# range, range
	movq	%r8, -72(%rbp)	# table_label, table_label
	movq	%r9, -80(%rbp)	# default_label, default_label
	.loc 1 10627 0
	movq	-56(%rbp), %rdx	# minval, tmp76
	movq	-40(%rbp), %rax	# index_type, tmp77
	movq	%rdx, %rsi	# tmp76,
	movq	%rax, %rdi	# tmp77,
	call	convert	#
	movq	%rax, %rbx	#, D.26053
	movq	-48(%rbp), %rdx	# index_expr, tmp78
	movq	-40(%rbp), %rax	# index_type, tmp79
	movq	%rdx, %rsi	# tmp78,
	movq	%rax, %rdi	# tmp79,
	call	convert	#
	movq	%rax, %rdx	#, D.26053
	movq	-40(%rbp), %rax	# index_type, tmp80
	movq	%rbx, %rcx	# D.26053,
	movq	%rax, %rsi	# tmp80,
	movl	$60, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdi	# D.26053,
	call	fold	#
	movq	%rax, -48(%rbp)	# tmp81, index_expr
	.loc 1 10630 0
	movq	-48(%rbp), %rax	# index_expr, tmp82
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp82,
	call	expand_expr	#
	movq	%rax, -24(%rbp)	# tmp83, index
	.loc 1 10631 0
	call	emit_queue	#
	.loc 1 10632 0
	movq	-24(%rbp), %rax	# index, tmp84
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp84,
	call	protect_from_queue	#
	movq	%rax, -24(%rbp)	# tmp85, index
	.loc 1 10633 0
	call	do_pending_stack_adjust	#
	.loc 1 10640 0
	movq	-64(%rbp), %rax	# range, tmp86
	movq	8(%rax), %rax	# range_10(D)->common.type, D.26053
	movzbl	17(%rax), %eax	# *_11, tmp89
	shrb	$5, %al	#, D.26054
	andl	$1, %eax	#, D.26054
	.loc 1 10635 0
	movzbl	%al, %ebx	# D.26054, D.26055
	movq	-64(%rbp), %rax	# range, tmp90
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp90,
	call	expand_expr	#
	movq	%rax, %rdx	#, D.26056
	.loc 1 10637 0
	movq	-64(%rbp), %rax	# range, tmp91
	movq	8(%rax), %rax	# range_10(D)->common.type, D.26053
	movzbl	61(%rax), %eax	# *_15, tmp94
	shrb	%al	# D.26057
	.loc 1 10635 0
	movzbl	%al, %esi	# D.26057, D.26058
	.loc 1 10636 0
	movq	-40(%rbp), %rax	# index_type, tmp95
	movzbl	61(%rax), %eax	# *index_type_1(D), tmp98
	shrb	%al	# D.26057
	.loc 1 10635 0
	movzbl	%al, %eax	# D.26057, D.26058
	movl	%ebx, %ecx	# D.26055,
	movl	%eax, %edi	# D.26058,
	call	convert_modes	#
	movq	%rax, %rdx	#, D.26056
	movq	-40(%rbp), %rax	# index_type, tmp99
	movzbl	61(%rax), %eax	# *index_type_1(D), tmp102
	shrb	%al	# D.26057
	movzbl	%al, %esi	# D.26057, D.26058
	movq	-80(%rbp), %rdi	# default_label, tmp103
	movq	-72(%rbp), %rcx	# table_label, tmp104
	movq	-24(%rbp), %rax	# index, tmp105
	movq	%rdi, %r8	# tmp103,
	movq	%rax, %rdi	# tmp105,
	call	do_tablejump	#
	.loc 1 10642 0
	movl	$1, %eax	#, D.26055
	.loc 1 10643 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE75:
	.size	try_tablejump, .-try_tablejump
	.section	.rodata
	.align 16
	.type	__FUNCTION__.14186, @object
	.size	__FUNCTION__.14186, 25
__FUNCTION__.14186:
	.string	"finish_expr_for_function"
	.type	__FUNCTION__.14231, @object
	.size	__FUNCTION__.14231, 13
__FUNCTION__.14231:
	.string	"convert_move"
	.type	__FUNCTION__.14315, @object
	.size	__FUNCTION__.14315, 15
__FUNCTION__.14315:
	.string	"move_by_pieces"
	.align 16
	.type	__FUNCTION__.14331, @object
	.size	__FUNCTION__.14331, 22
__FUNCTION__.14331:
	.string	"move_by_pieces_ninsns"
	.align 16
	.type	__FUNCTION__.14354, @object
	.size	__FUNCTION__.14354, 16
__FUNCTION__.14354:
	.string	"emit_block_move"
	.local	fn.14350
	.comm	fn.14350,8,8
	.align 16
	.type	__FUNCTION__.14386, @object
	.size	__FUNCTION__.14386, 20
__FUNCTION__.14386:
	.string	"move_block_from_reg"
	.align 16
	.type	__FUNCTION__.14400, @object
	.size	__FUNCTION__.14400, 16
__FUNCTION__.14400:
	.string	"emit_group_load"
	.align 16
	.type	__FUNCTION__.14421, @object
	.size	__FUNCTION__.14421, 17
__FUNCTION__.14421:
	.string	"emit_group_store"
	.type	__FUNCTION__.14454, @object
	.size	__FUNCTION__.14454, 8
__FUNCTION__.14454:
	.string	"use_reg"
	.type	__FUNCTION__.14461, @object
	.size	__FUNCTION__.14461, 9
__FUNCTION__.14461:
	.string	"use_regs"
	.align 16
	.type	__FUNCTION__.14501, @object
	.size	__FUNCTION__.14501, 20
__FUNCTION__.14501:
	.string	"can_store_by_pieces"
	.align 16
	.type	__FUNCTION__.14516, @object
	.size	__FUNCTION__.14516, 16
__FUNCTION__.14516:
	.string	"store_by_pieces"
	.align 16
	.type	__FUNCTION__.14546, @object
	.size	__FUNCTION__.14546, 18
__FUNCTION__.14546:
	.string	"store_by_pieces_1"
	.local	fn.14563
	.comm	fn.14563,8,8
	.type	__FUNCTION__.14586, @object
	.size	__FUNCTION__.14586, 15
__FUNCTION__.14586:
	.string	"emit_move_insn"
	.align 16
	.type	__FUNCTION__.14594, @object
	.size	__FUNCTION__.14594, 17
__FUNCTION__.14594:
	.string	"emit_move_insn_1"
	.type	__FUNCTION__.14660, @object
	.size	__FUNCTION__.14660, 15
__FUNCTION__.14660:
	.string	"emit_push_insn"
	.align 16
	.type	__FUNCTION__.14705, @object
	.size	__FUNCTION__.14705, 18
__FUNCTION__.14705:
	.string	"expand_assignment"
	.align 16
	.type	__FUNCTION__.14784, @object
	.size	__FUNCTION__.14784, 18
__FUNCTION__.14784:
	.string	"store_constructor"
	.type	__FUNCTION__.14875, @object
	.size	__FUNCTION__.14875, 12
__FUNCTION__.14875:
	.string	"store_field"
	.local	save_expr_list.14936
	.comm	save_expr_list.14936,8,8
	.type	__FUNCTION__.14961, @object
	.size	__FUNCTION__.14961, 12
__FUNCTION__.14961:
	.string	"safe_from_p"
	.type	__FUNCTION__.15048, @object
	.size	__FUNCTION__.15048, 12
__FUNCTION__.15048:
	.string	"expand_expr"
	.type	__FUNCTION__.15437, @object
	.size	__FUNCTION__.15437, 8
__FUNCTION__.15437:
	.string	"do_jump"
	.type	__FUNCTION__.15568, @object
	.size	__FUNCTION__.15568, 14
__FUNCTION__.15568:
	.string	"do_store_flag"
	.text
.Letext0:
	.file 2 "rtl.h"
	.file 3 "config.h"
	.file 4 "tree.h"
	.file 5 "i386.h"
	.file 6 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
	.file 7 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 8 "/usr/include/stdio.h"
	.file 9 "/usr/include/libio.h"
	.file 10 "machmode.h"
	.file 11 "real.h"
	.file 12 "hashtable.h"
	.file 13 "function.h"
	.file 14 "expr.h"
	.file 15 "insn-codes.h"
	.file 16 "optabs.h"
	.file 17 "libfuncs.h"
	.file 18 "recog.h"
	.file 19 "langhooks.h"
	.file 20 "flags.h"
	.file 21 "regs.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x9224
	.value	0x4
	.long	.Ldebug_abbrev0
	.byte	0x8
	.uleb128 0x1
	.long	.LASF2201
	.byte	0x1
	.long	.LASF2202
	.long	.LASF2203
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.string	"rtx"
	.byte	0x3
	.byte	0x8
	.long	0x38
	.uleb128 0x3
	.byte	0x8
	.long	0x3e
	.uleb128 0x4
	.long	.LASF11
	.byte	0x10
	.byte	0x2
	.byte	0x7a
	.long	0xed
	.uleb128 0x5
	.long	.LASF0
	.byte	0x2
	.byte	0x7d
	.long	0x49d
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0
	.uleb128 0x5
	.long	.LASF1
	.byte	0x2
	.byte	0x80
	.long	0x49d
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.uleb128 0x5
	.long	.LASF2
	.byte	0x2
	.byte	0x87
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0
	.uleb128 0x5
	.long	.LASF3
	.byte	0x2
	.byte	0x8a
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0
	.uleb128 0x5
	.long	.LASF4
	.byte	0x2
	.byte	0x95
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0
	.uleb128 0x5
	.long	.LASF5
	.byte	0x2
	.byte	0x9d
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0
	.uleb128 0x5
	.long	.LASF6
	.byte	0x2
	.byte	0xaf
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0
	.uleb128 0x5
	.long	.LASF7
	.byte	0x2
	.byte	0xb6
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0
	.uleb128 0x5
	.long	.LASF8
	.byte	0x2
	.byte	0xbb
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0
	.uleb128 0x5
	.long	.LASF9
	.byte	0x2
	.byte	0xc4
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0
	.uleb128 0x6
	.string	"fld"
	.byte	0x2
	.byte	0xc9
	.long	0xe8d
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF10
	.byte	0x3
	.byte	0xa
	.long	0xf8
	.uleb128 0x3
	.byte	0x8
	.long	0xfe
	.uleb128 0x4
	.long	.LASF12
	.byte	0x10
	.byte	0x2
	.byte	0xde
	.long	0x123
	.uleb128 0x8
	.long	.LASF13
	.byte	0x2
	.byte	0xdf
	.long	0x328
	.byte	0
	.uleb128 0x8
	.long	.LASF14
	.byte	0x2
	.byte	0xe0
	.long	0xe9d
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF15
	.byte	0x3
	.byte	0xc
	.long	0x12e
	.uleb128 0x3
	.byte	0x8
	.long	0x134
	.uleb128 0x9
	.long	.LASF351
	.byte	0xd0
	.byte	0x4
	.value	0x744
	.long	0x1de
	.uleb128 0xa
	.long	.LASF16
	.byte	0x4
	.value	0x746
	.long	0x1729
	.uleb128 0xa
	.long	.LASF17
	.byte	0x4
	.value	0x747
	.long	0x18e9
	.uleb128 0xa
	.long	.LASF18
	.byte	0x4
	.value	0x748
	.long	0x194c
	.uleb128 0xa
	.long	.LASF19
	.byte	0x4
	.value	0x749
	.long	0x1a05
	.uleb128 0xa
	.long	.LASF20
	.byte	0x4
	.value	0x74a
	.long	0x1981
	.uleb128 0xa
	.long	.LASF21
	.byte	0x4
	.value	0x74b
	.long	0x19c3
	.uleb128 0xa
	.long	.LASF22
	.byte	0x4
	.value	0x74c
	.long	0x1a6a
	.uleb128 0xa
	.long	.LASF23
	.byte	0x4
	.value	0x74d
	.long	0x2323
	.uleb128 0xa
	.long	.LASF24
	.byte	0x4
	.value	0x74e
	.long	0x1bf9
	.uleb128 0xa
	.long	.LASF25
	.byte	0x4
	.value	0x74f
	.long	0x1a91
	.uleb128 0xb
	.string	"vec"
	.byte	0x4
	.value	0x750
	.long	0x1ac6
	.uleb128 0xb
	.string	"exp"
	.byte	0x4
	.value	0x751
	.long	0x1b09
	.uleb128 0xa
	.long	.LASF26
	.byte	0x4
	.value	0x752
	.long	0x1b3e
	.byte	0
	.uleb128 0x4
	.long	.LASF27
	.byte	0xa0
	.byte	0x5
	.byte	0x35
	.long	0x323
	.uleb128 0x6
	.string	"add"
	.byte	0x5
	.byte	0x36
	.long	0x323
	.byte	0
	.uleb128 0x6
	.string	"lea"
	.byte	0x5
	.byte	0x37
	.long	0x323
	.byte	0x4
	.uleb128 0x8
	.long	.LASF28
	.byte	0x5
	.byte	0x38
	.long	0x323
	.byte	0x8
	.uleb128 0x8
	.long	.LASF29
	.byte	0x5
	.byte	0x39
	.long	0x323
	.byte	0xc
	.uleb128 0x8
	.long	.LASF30
	.byte	0x5
	.byte	0x3a
	.long	0x323
	.byte	0x10
	.uleb128 0x8
	.long	.LASF31
	.byte	0x5
	.byte	0x3b
	.long	0x323
	.byte	0x14
	.uleb128 0x8
	.long	.LASF32
	.byte	0x5
	.byte	0x3c
	.long	0x323
	.byte	0x18
	.uleb128 0x8
	.long	.LASF33
	.byte	0x5
	.byte	0x3d
	.long	0x328
	.byte	0x1c
	.uleb128 0x8
	.long	.LASF34
	.byte	0x5
	.byte	0x3e
	.long	0x328
	.byte	0x20
	.uleb128 0x8
	.long	.LASF35
	.byte	0x5
	.byte	0x3f
	.long	0x323
	.byte	0x24
	.uleb128 0x8
	.long	.LASF36
	.byte	0x5
	.byte	0x40
	.long	0x323
	.byte	0x28
	.uleb128 0x8
	.long	.LASF37
	.byte	0x5
	.byte	0x42
	.long	0x323
	.byte	0x2c
	.uleb128 0x8
	.long	.LASF38
	.byte	0x5
	.byte	0x43
	.long	0x346
	.byte	0x30
	.uleb128 0x8
	.long	.LASF39
	.byte	0x5
	.byte	0x46
	.long	0x34b
	.byte	0x3c
	.uleb128 0x8
	.long	.LASF40
	.byte	0x5
	.byte	0x48
	.long	0x323
	.byte	0x48
	.uleb128 0x8
	.long	.LASF41
	.byte	0x5
	.byte	0x49
	.long	0x350
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF42
	.byte	0x5
	.byte	0x4b
	.long	0x355
	.byte	0x58
	.uleb128 0x8
	.long	.LASF43
	.byte	0x5
	.byte	0x4d
	.long	0x323
	.byte	0x64
	.uleb128 0x8
	.long	.LASF44
	.byte	0x5
	.byte	0x4e
	.long	0x36a
	.byte	0x68
	.uleb128 0x8
	.long	.LASF45
	.byte	0x5
	.byte	0x50
	.long	0x36f
	.byte	0x70
	.uleb128 0x8
	.long	.LASF46
	.byte	0x5
	.byte	0x52
	.long	0x323
	.byte	0x78
	.uleb128 0x8
	.long	.LASF47
	.byte	0x5
	.byte	0x53
	.long	0x374
	.byte	0x7c
	.uleb128 0x8
	.long	.LASF48
	.byte	0x5
	.byte	0x55
	.long	0x379
	.byte	0x88
	.uleb128 0x8
	.long	.LASF49
	.byte	0x5
	.byte	0x57
	.long	0x323
	.byte	0x94
	.uleb128 0x8
	.long	.LASF50
	.byte	0x5
	.byte	0x59
	.long	0x323
	.byte	0x98
	.uleb128 0x8
	.long	.LASF51
	.byte	0x5
	.byte	0x5a
	.long	0x323
	.byte	0x9c
	.byte	0
	.uleb128 0xc
	.long	0x328
	.uleb128 0xd
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0xe
	.long	0x328
	.long	0x33f
	.uleb128 0xf
	.long	0x33f
	.byte	0x2
	.byte	0
	.uleb128 0x10
	.byte	0x8
	.byte	0x7
	.long	.LASF52
	.uleb128 0xc
	.long	0x32f
	.uleb128 0xc
	.long	0x32f
	.uleb128 0xc
	.long	0x32f
	.uleb128 0xc
	.long	0x32f
	.uleb128 0xe
	.long	0x328
	.long	0x36a
	.uleb128 0xf
	.long	0x33f
	.byte	0x1
	.byte	0
	.uleb128 0xc
	.long	0x35a
	.uleb128 0xc
	.long	0x35a
	.uleb128 0xc
	.long	0x32f
	.uleb128 0xc
	.long	0x32f
	.uleb128 0x11
	.long	.LASF136
	.byte	0x4
	.byte	0x5
	.value	0x4b2
	.long	0x428
	.uleb128 0x12
	.long	.LASF53
	.sleb128 0
	.uleb128 0x12
	.long	.LASF54
	.sleb128 1
	.uleb128 0x12
	.long	.LASF55
	.sleb128 2
	.uleb128 0x12
	.long	.LASF56
	.sleb128 3
	.uleb128 0x12
	.long	.LASF57
	.sleb128 4
	.uleb128 0x12
	.long	.LASF58
	.sleb128 5
	.uleb128 0x12
	.long	.LASF59
	.sleb128 6
	.uleb128 0x12
	.long	.LASF60
	.sleb128 7
	.uleb128 0x12
	.long	.LASF61
	.sleb128 8
	.uleb128 0x12
	.long	.LASF62
	.sleb128 9
	.uleb128 0x12
	.long	.LASF63
	.sleb128 10
	.uleb128 0x12
	.long	.LASF64
	.sleb128 11
	.uleb128 0x12
	.long	.LASF65
	.sleb128 12
	.uleb128 0x12
	.long	.LASF66
	.sleb128 13
	.uleb128 0x12
	.long	.LASF67
	.sleb128 14
	.uleb128 0x12
	.long	.LASF68
	.sleb128 15
	.uleb128 0x12
	.long	.LASF69
	.sleb128 16
	.uleb128 0x12
	.long	.LASF70
	.sleb128 17
	.uleb128 0x12
	.long	.LASF71
	.sleb128 18
	.uleb128 0x12
	.long	.LASF72
	.sleb128 19
	.uleb128 0x12
	.long	.LASF73
	.sleb128 20
	.uleb128 0x12
	.long	.LASF74
	.sleb128 21
	.uleb128 0x12
	.long	.LASF75
	.sleb128 22
	.uleb128 0x12
	.long	.LASF76
	.sleb128 23
	.uleb128 0x12
	.long	.LASF77
	.sleb128 24
	.uleb128 0x12
	.long	.LASF78
	.sleb128 25
	.byte	0
	.uleb128 0x13
	.long	.LASF79
	.byte	0x1c
	.byte	0x5
	.value	0x683
	.long	0x491
	.uleb128 0x14
	.long	.LASF80
	.byte	0x5
	.value	0x684
	.long	0x328
	.byte	0
	.uleb128 0x14
	.long	.LASF81
	.byte	0x5
	.value	0x685
	.long	0x328
	.byte	0x4
	.uleb128 0x14
	.long	.LASF82
	.byte	0x5
	.value	0x686
	.long	0x328
	.byte	0x8
	.uleb128 0x14
	.long	.LASF83
	.byte	0x5
	.value	0x687
	.long	0x328
	.byte	0xc
	.uleb128 0x14
	.long	.LASF84
	.byte	0x5
	.value	0x688
	.long	0x328
	.byte	0x10
	.uleb128 0x14
	.long	.LASF85
	.byte	0x5
	.value	0x689
	.long	0x328
	.byte	0x14
	.uleb128 0x14
	.long	.LASF86
	.byte	0x5
	.value	0x68a
	.long	0x328
	.byte	0x18
	.byte	0
	.uleb128 0x15
	.long	.LASF87
	.byte	0x5
	.value	0x68b
	.long	0x428
	.uleb128 0x10
	.byte	0x4
	.byte	0x7
	.long	.LASF88
	.uleb128 0x16
	.byte	0x8
	.uleb128 0x10
	.byte	0x8
	.byte	0x5
	.long	.LASF89
	.uleb128 0x7
	.long	.LASF90
	.byte	0x6
	.byte	0xd4
	.long	0x4b8
	.uleb128 0x10
	.byte	0x8
	.byte	0x7
	.long	.LASF91
	.uleb128 0x10
	.byte	0x1
	.byte	0x8
	.long	.LASF92
	.uleb128 0x10
	.byte	0x2
	.byte	0x7
	.long	.LASF93
	.uleb128 0x10
	.byte	0x1
	.byte	0x6
	.long	.LASF94
	.uleb128 0x10
	.byte	0x2
	.byte	0x5
	.long	.LASF95
	.uleb128 0x7
	.long	.LASF96
	.byte	0x7
	.byte	0x8c
	.long	0x4a6
	.uleb128 0x7
	.long	.LASF97
	.byte	0x7
	.byte	0x8d
	.long	0x4a6
	.uleb128 0x3
	.byte	0x8
	.long	0x4f7
	.uleb128 0x10
	.byte	0x1
	.byte	0x6
	.long	.LASF98
	.uleb128 0x7
	.long	.LASF99
	.byte	0x8
	.byte	0x30
	.long	0x509
	.uleb128 0x4
	.long	.LASF100
	.byte	0xd8
	.byte	0x9
	.byte	0xf6
	.long	0x68a
	.uleb128 0x8
	.long	.LASF101
	.byte	0x9
	.byte	0xf7
	.long	0x328
	.byte	0
	.uleb128 0x8
	.long	.LASF102
	.byte	0x9
	.byte	0xfc
	.long	0x4f1
	.byte	0x8
	.uleb128 0x8
	.long	.LASF103
	.byte	0x9
	.byte	0xfd
	.long	0x4f1
	.byte	0x10
	.uleb128 0x8
	.long	.LASF104
	.byte	0x9
	.byte	0xfe
	.long	0x4f1
	.byte	0x18
	.uleb128 0x8
	.long	.LASF105
	.byte	0x9
	.byte	0xff
	.long	0x4f1
	.byte	0x20
	.uleb128 0x14
	.long	.LASF106
	.byte	0x9
	.value	0x100
	.long	0x4f1
	.byte	0x28
	.uleb128 0x14
	.long	.LASF107
	.byte	0x9
	.value	0x101
	.long	0x4f1
	.byte	0x30
	.uleb128 0x14
	.long	.LASF108
	.byte	0x9
	.value	0x102
	.long	0x4f1
	.byte	0x38
	.uleb128 0x14
	.long	.LASF109
	.byte	0x9
	.value	0x103
	.long	0x4f1
	.byte	0x40
	.uleb128 0x14
	.long	.LASF110
	.byte	0x9
	.value	0x105
	.long	0x4f1
	.byte	0x48
	.uleb128 0x14
	.long	.LASF111
	.byte	0x9
	.value	0x106
	.long	0x4f1
	.byte	0x50
	.uleb128 0x14
	.long	.LASF112
	.byte	0x9
	.value	0x107
	.long	0x4f1
	.byte	0x58
	.uleb128 0x14
	.long	.LASF113
	.byte	0x9
	.value	0x109
	.long	0x6c2
	.byte	0x60
	.uleb128 0x14
	.long	.LASF114
	.byte	0x9
	.value	0x10b
	.long	0x6c8
	.byte	0x68
	.uleb128 0x14
	.long	.LASF115
	.byte	0x9
	.value	0x10d
	.long	0x328
	.byte	0x70
	.uleb128 0x14
	.long	.LASF116
	.byte	0x9
	.value	0x111
	.long	0x328
	.byte	0x74
	.uleb128 0x14
	.long	.LASF117
	.byte	0x9
	.value	0x113
	.long	0x4db
	.byte	0x78
	.uleb128 0x14
	.long	.LASF118
	.byte	0x9
	.value	0x117
	.long	0x4c6
	.byte	0x80
	.uleb128 0x14
	.long	.LASF119
	.byte	0x9
	.value	0x118
	.long	0x4cd
	.byte	0x82
	.uleb128 0x14
	.long	.LASF120
	.byte	0x9
	.value	0x119
	.long	0x6ce
	.byte	0x83
	.uleb128 0x14
	.long	.LASF121
	.byte	0x9
	.value	0x11d
	.long	0x6de
	.byte	0x88
	.uleb128 0x14
	.long	.LASF122
	.byte	0x9
	.value	0x126
	.long	0x4e6
	.byte	0x90
	.uleb128 0x14
	.long	.LASF123
	.byte	0x9
	.value	0x12f
	.long	0x4a4
	.byte	0x98
	.uleb128 0x14
	.long	.LASF124
	.byte	0x9
	.value	0x130
	.long	0x4a4
	.byte	0xa0
	.uleb128 0x14
	.long	.LASF125
	.byte	0x9
	.value	0x131
	.long	0x4a4
	.byte	0xa8
	.uleb128 0x14
	.long	.LASF126
	.byte	0x9
	.value	0x132
	.long	0x4a4
	.byte	0xb0
	.uleb128 0x14
	.long	.LASF127
	.byte	0x9
	.value	0x133
	.long	0x4ad
	.byte	0xb8
	.uleb128 0x14
	.long	.LASF128
	.byte	0x9
	.value	0x135
	.long	0x328
	.byte	0xc0
	.uleb128 0x14
	.long	.LASF129
	.byte	0x9
	.value	0x137
	.long	0x6e4
	.byte	0xc4
	.byte	0
	.uleb128 0x17
	.long	.LASF2204
	.byte	0x9
	.byte	0x9b
	.uleb128 0x4
	.long	.LASF130
	.byte	0x18
	.byte	0x9
	.byte	0xa1
	.long	0x6c2
	.uleb128 0x8
	.long	.LASF131
	.byte	0x9
	.byte	0xa2
	.long	0x6c2
	.byte	0
	.uleb128 0x8
	.long	.LASF132
	.byte	0x9
	.byte	0xa3
	.long	0x6c8
	.byte	0x8
	.uleb128 0x8
	.long	.LASF133
	.byte	0x9
	.byte	0xa7
	.long	0x328
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x691
	.uleb128 0x3
	.byte	0x8
	.long	0x509
	.uleb128 0xe
	.long	0x4f7
	.long	0x6de
	.uleb128 0xf
	.long	0x33f
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x68a
	.uleb128 0xe
	.long	0x4f7
	.long	0x6f4
	.uleb128 0xf
	.long	0x33f
	.byte	0x13
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x6fa
	.uleb128 0xc
	.long	0x4f7
	.uleb128 0x10
	.byte	0x8
	.byte	0x7
	.long	.LASF134
	.uleb128 0x10
	.byte	0x8
	.byte	0x5
	.long	.LASF135
	.uleb128 0xe
	.long	0x4f7
	.long	0x71d
	.uleb128 0xf
	.long	0x33f
	.byte	0x7
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x328
	.uleb128 0x3
	.byte	0x8
	.long	0x729
	.uleb128 0x18
	.uleb128 0x19
	.long	.LASF137
	.byte	0x4
	.byte	0xa
	.byte	0x1d
	.long	0x89f
	.uleb128 0x12
	.long	.LASF138
	.sleb128 0
	.uleb128 0x12
	.long	.LASF139
	.sleb128 1
	.uleb128 0x12
	.long	.LASF140
	.sleb128 2
	.uleb128 0x12
	.long	.LASF141
	.sleb128 3
	.uleb128 0x12
	.long	.LASF142
	.sleb128 4
	.uleb128 0x12
	.long	.LASF143
	.sleb128 5
	.uleb128 0x12
	.long	.LASF144
	.sleb128 6
	.uleb128 0x12
	.long	.LASF145
	.sleb128 7
	.uleb128 0x12
	.long	.LASF146
	.sleb128 8
	.uleb128 0x12
	.long	.LASF147
	.sleb128 9
	.uleb128 0x12
	.long	.LASF148
	.sleb128 10
	.uleb128 0x12
	.long	.LASF149
	.sleb128 11
	.uleb128 0x12
	.long	.LASF150
	.sleb128 12
	.uleb128 0x12
	.long	.LASF151
	.sleb128 13
	.uleb128 0x12
	.long	.LASF152
	.sleb128 14
	.uleb128 0x12
	.long	.LASF153
	.sleb128 15
	.uleb128 0x12
	.long	.LASF154
	.sleb128 16
	.uleb128 0x12
	.long	.LASF155
	.sleb128 17
	.uleb128 0x12
	.long	.LASF156
	.sleb128 18
	.uleb128 0x12
	.long	.LASF157
	.sleb128 19
	.uleb128 0x12
	.long	.LASF158
	.sleb128 20
	.uleb128 0x12
	.long	.LASF159
	.sleb128 21
	.uleb128 0x12
	.long	.LASF160
	.sleb128 22
	.uleb128 0x12
	.long	.LASF161
	.sleb128 23
	.uleb128 0x12
	.long	.LASF162
	.sleb128 24
	.uleb128 0x12
	.long	.LASF163
	.sleb128 25
	.uleb128 0x12
	.long	.LASF164
	.sleb128 26
	.uleb128 0x12
	.long	.LASF165
	.sleb128 27
	.uleb128 0x12
	.long	.LASF166
	.sleb128 28
	.uleb128 0x12
	.long	.LASF167
	.sleb128 29
	.uleb128 0x12
	.long	.LASF168
	.sleb128 30
	.uleb128 0x12
	.long	.LASF169
	.sleb128 31
	.uleb128 0x12
	.long	.LASF170
	.sleb128 32
	.uleb128 0x12
	.long	.LASF171
	.sleb128 33
	.uleb128 0x12
	.long	.LASF172
	.sleb128 34
	.uleb128 0x12
	.long	.LASF173
	.sleb128 35
	.uleb128 0x12
	.long	.LASF174
	.sleb128 36
	.uleb128 0x12
	.long	.LASF175
	.sleb128 37
	.uleb128 0x12
	.long	.LASF176
	.sleb128 38
	.uleb128 0x12
	.long	.LASF177
	.sleb128 39
	.uleb128 0x12
	.long	.LASF178
	.sleb128 40
	.uleb128 0x12
	.long	.LASF179
	.sleb128 41
	.uleb128 0x12
	.long	.LASF180
	.sleb128 42
	.uleb128 0x12
	.long	.LASF181
	.sleb128 43
	.uleb128 0x12
	.long	.LASF182
	.sleb128 44
	.uleb128 0x12
	.long	.LASF183
	.sleb128 45
	.uleb128 0x12
	.long	.LASF184
	.sleb128 46
	.uleb128 0x12
	.long	.LASF185
	.sleb128 47
	.uleb128 0x12
	.long	.LASF186
	.sleb128 48
	.uleb128 0x12
	.long	.LASF187
	.sleb128 49
	.uleb128 0x12
	.long	.LASF188
	.sleb128 50
	.uleb128 0x12
	.long	.LASF189
	.sleb128 51
	.uleb128 0x12
	.long	.LASF190
	.sleb128 52
	.uleb128 0x12
	.long	.LASF191
	.sleb128 53
	.uleb128 0x12
	.long	.LASF192
	.sleb128 54
	.uleb128 0x12
	.long	.LASF193
	.sleb128 55
	.uleb128 0x12
	.long	.LASF194
	.sleb128 56
	.uleb128 0x12
	.long	.LASF195
	.sleb128 57
	.uleb128 0x12
	.long	.LASF196
	.sleb128 58
	.uleb128 0x12
	.long	.LASF197
	.sleb128 59
	.byte	0
	.uleb128 0x19
	.long	.LASF198
	.byte	0x4
	.byte	0xa
	.byte	0x2c
	.long	0x8e8
	.uleb128 0x12
	.long	.LASF199
	.sleb128 0
	.uleb128 0x12
	.long	.LASF200
	.sleb128 1
	.uleb128 0x12
	.long	.LASF201
	.sleb128 2
	.uleb128 0x12
	.long	.LASF202
	.sleb128 3
	.uleb128 0x12
	.long	.LASF203
	.sleb128 4
	.uleb128 0x12
	.long	.LASF204
	.sleb128 5
	.uleb128 0x12
	.long	.LASF205
	.sleb128 6
	.uleb128 0x12
	.long	.LASF206
	.sleb128 7
	.uleb128 0x12
	.long	.LASF207
	.sleb128 8
	.uleb128 0x12
	.long	.LASF208
	.sleb128 9
	.byte	0
	.uleb128 0x19
	.long	.LASF209
	.byte	0x4
	.byte	0x2
	.byte	0x29
	.long	0xce4
	.uleb128 0x12
	.long	.LASF210
	.sleb128 0
	.uleb128 0x1a
	.string	"NIL"
	.sleb128 1
	.uleb128 0x12
	.long	.LASF211
	.sleb128 2
	.uleb128 0x12
	.long	.LASF212
	.sleb128 3
	.uleb128 0x12
	.long	.LASF213
	.sleb128 4
	.uleb128 0x12
	.long	.LASF214
	.sleb128 5
	.uleb128 0x12
	.long	.LASF215
	.sleb128 6
	.uleb128 0x12
	.long	.LASF216
	.sleb128 7
	.uleb128 0x12
	.long	.LASF217
	.sleb128 8
	.uleb128 0x12
	.long	.LASF218
	.sleb128 9
	.uleb128 0x12
	.long	.LASF219
	.sleb128 10
	.uleb128 0x12
	.long	.LASF220
	.sleb128 11
	.uleb128 0x12
	.long	.LASF221
	.sleb128 12
	.uleb128 0x12
	.long	.LASF222
	.sleb128 13
	.uleb128 0x12
	.long	.LASF223
	.sleb128 14
	.uleb128 0x12
	.long	.LASF224
	.sleb128 15
	.uleb128 0x12
	.long	.LASF225
	.sleb128 16
	.uleb128 0x12
	.long	.LASF226
	.sleb128 17
	.uleb128 0x12
	.long	.LASF227
	.sleb128 18
	.uleb128 0x12
	.long	.LASF228
	.sleb128 19
	.uleb128 0x12
	.long	.LASF229
	.sleb128 20
	.uleb128 0x12
	.long	.LASF230
	.sleb128 21
	.uleb128 0x12
	.long	.LASF231
	.sleb128 22
	.uleb128 0x12
	.long	.LASF232
	.sleb128 23
	.uleb128 0x12
	.long	.LASF233
	.sleb128 24
	.uleb128 0x12
	.long	.LASF234
	.sleb128 25
	.uleb128 0x12
	.long	.LASF235
	.sleb128 26
	.uleb128 0x12
	.long	.LASF236
	.sleb128 27
	.uleb128 0x12
	.long	.LASF237
	.sleb128 28
	.uleb128 0x12
	.long	.LASF238
	.sleb128 29
	.uleb128 0x12
	.long	.LASF239
	.sleb128 30
	.uleb128 0x12
	.long	.LASF240
	.sleb128 31
	.uleb128 0x12
	.long	.LASF241
	.sleb128 32
	.uleb128 0x12
	.long	.LASF242
	.sleb128 33
	.uleb128 0x12
	.long	.LASF243
	.sleb128 34
	.uleb128 0x12
	.long	.LASF244
	.sleb128 35
	.uleb128 0x12
	.long	.LASF245
	.sleb128 36
	.uleb128 0x12
	.long	.LASF246
	.sleb128 37
	.uleb128 0x12
	.long	.LASF247
	.sleb128 38
	.uleb128 0x12
	.long	.LASF248
	.sleb128 39
	.uleb128 0x12
	.long	.LASF249
	.sleb128 40
	.uleb128 0x12
	.long	.LASF250
	.sleb128 41
	.uleb128 0x12
	.long	.LASF251
	.sleb128 42
	.uleb128 0x12
	.long	.LASF252
	.sleb128 43
	.uleb128 0x12
	.long	.LASF253
	.sleb128 44
	.uleb128 0x12
	.long	.LASF254
	.sleb128 45
	.uleb128 0x12
	.long	.LASF255
	.sleb128 46
	.uleb128 0x1a
	.string	"SET"
	.sleb128 47
	.uleb128 0x1a
	.string	"USE"
	.sleb128 48
	.uleb128 0x12
	.long	.LASF256
	.sleb128 49
	.uleb128 0x12
	.long	.LASF257
	.sleb128 50
	.uleb128 0x12
	.long	.LASF258
	.sleb128 51
	.uleb128 0x12
	.long	.LASF259
	.sleb128 52
	.uleb128 0x12
	.long	.LASF260
	.sleb128 53
	.uleb128 0x12
	.long	.LASF261
	.sleb128 54
	.uleb128 0x12
	.long	.LASF262
	.sleb128 55
	.uleb128 0x12
	.long	.LASF263
	.sleb128 56
	.uleb128 0x12
	.long	.LASF264
	.sleb128 57
	.uleb128 0x12
	.long	.LASF265
	.sleb128 58
	.uleb128 0x1a
	.string	"PC"
	.sleb128 59
	.uleb128 0x12
	.long	.LASF266
	.sleb128 60
	.uleb128 0x1a
	.string	"REG"
	.sleb128 61
	.uleb128 0x12
	.long	.LASF267
	.sleb128 62
	.uleb128 0x12
	.long	.LASF268
	.sleb128 63
	.uleb128 0x12
	.long	.LASF269
	.sleb128 64
	.uleb128 0x12
	.long	.LASF270
	.sleb128 65
	.uleb128 0x1a
	.string	"MEM"
	.sleb128 66
	.uleb128 0x12
	.long	.LASF271
	.sleb128 67
	.uleb128 0x12
	.long	.LASF272
	.sleb128 68
	.uleb128 0x1a
	.string	"CC0"
	.sleb128 69
	.uleb128 0x12
	.long	.LASF273
	.sleb128 70
	.uleb128 0x12
	.long	.LASF274
	.sleb128 71
	.uleb128 0x12
	.long	.LASF275
	.sleb128 72
	.uleb128 0x12
	.long	.LASF276
	.sleb128 73
	.uleb128 0x12
	.long	.LASF277
	.sleb128 74
	.uleb128 0x12
	.long	.LASF278
	.sleb128 75
	.uleb128 0x12
	.long	.LASF279
	.sleb128 76
	.uleb128 0x1a
	.string	"NEG"
	.sleb128 77
	.uleb128 0x12
	.long	.LASF280
	.sleb128 78
	.uleb128 0x1a
	.string	"DIV"
	.sleb128 79
	.uleb128 0x1a
	.string	"MOD"
	.sleb128 80
	.uleb128 0x12
	.long	.LASF281
	.sleb128 81
	.uleb128 0x12
	.long	.LASF282
	.sleb128 82
	.uleb128 0x1a
	.string	"AND"
	.sleb128 83
	.uleb128 0x1a
	.string	"IOR"
	.sleb128 84
	.uleb128 0x1a
	.string	"XOR"
	.sleb128 85
	.uleb128 0x1a
	.string	"NOT"
	.sleb128 86
	.uleb128 0x12
	.long	.LASF283
	.sleb128 87
	.uleb128 0x12
	.long	.LASF284
	.sleb128 88
	.uleb128 0x12
	.long	.LASF285
	.sleb128 89
	.uleb128 0x12
	.long	.LASF286
	.sleb128 90
	.uleb128 0x12
	.long	.LASF287
	.sleb128 91
	.uleb128 0x12
	.long	.LASF288
	.sleb128 92
	.uleb128 0x12
	.long	.LASF289
	.sleb128 93
	.uleb128 0x12
	.long	.LASF290
	.sleb128 94
	.uleb128 0x12
	.long	.LASF291
	.sleb128 95
	.uleb128 0x12
	.long	.LASF292
	.sleb128 96
	.uleb128 0x12
	.long	.LASF293
	.sleb128 97
	.uleb128 0x12
	.long	.LASF294
	.sleb128 98
	.uleb128 0x12
	.long	.LASF295
	.sleb128 99
	.uleb128 0x12
	.long	.LASF296
	.sleb128 100
	.uleb128 0x12
	.long	.LASF297
	.sleb128 101
	.uleb128 0x1a
	.string	"NE"
	.sleb128 102
	.uleb128 0x1a
	.string	"EQ"
	.sleb128 103
	.uleb128 0x1a
	.string	"GE"
	.sleb128 104
	.uleb128 0x1a
	.string	"GT"
	.sleb128 105
	.uleb128 0x1a
	.string	"LE"
	.sleb128 106
	.uleb128 0x1a
	.string	"LT"
	.sleb128 107
	.uleb128 0x1a
	.string	"GEU"
	.sleb128 108
	.uleb128 0x1a
	.string	"GTU"
	.sleb128 109
	.uleb128 0x1a
	.string	"LEU"
	.sleb128 110
	.uleb128 0x1a
	.string	"LTU"
	.sleb128 111
	.uleb128 0x12
	.long	.LASF298
	.sleb128 112
	.uleb128 0x12
	.long	.LASF299
	.sleb128 113
	.uleb128 0x12
	.long	.LASF300
	.sleb128 114
	.uleb128 0x12
	.long	.LASF301
	.sleb128 115
	.uleb128 0x12
	.long	.LASF302
	.sleb128 116
	.uleb128 0x12
	.long	.LASF303
	.sleb128 117
	.uleb128 0x12
	.long	.LASF304
	.sleb128 118
	.uleb128 0x12
	.long	.LASF305
	.sleb128 119
	.uleb128 0x12
	.long	.LASF306
	.sleb128 120
	.uleb128 0x12
	.long	.LASF307
	.sleb128 121
	.uleb128 0x12
	.long	.LASF308
	.sleb128 122
	.uleb128 0x12
	.long	.LASF309
	.sleb128 123
	.uleb128 0x12
	.long	.LASF310
	.sleb128 124
	.uleb128 0x12
	.long	.LASF311
	.sleb128 125
	.uleb128 0x1a
	.string	"FIX"
	.sleb128 126
	.uleb128 0x12
	.long	.LASF312
	.sleb128 127
	.uleb128 0x12
	.long	.LASF313
	.sleb128 128
	.uleb128 0x1a
	.string	"ABS"
	.sleb128 129
	.uleb128 0x12
	.long	.LASF314
	.sleb128 130
	.uleb128 0x1a
	.string	"FFS"
	.sleb128 131
	.uleb128 0x12
	.long	.LASF315
	.sleb128 132
	.uleb128 0x12
	.long	.LASF316
	.sleb128 133
	.uleb128 0x12
	.long	.LASF317
	.sleb128 134
	.uleb128 0x12
	.long	.LASF318
	.sleb128 135
	.uleb128 0x12
	.long	.LASF319
	.sleb128 136
	.uleb128 0x12
	.long	.LASF320
	.sleb128 137
	.uleb128 0x12
	.long	.LASF321
	.sleb128 138
	.uleb128 0x12
	.long	.LASF322
	.sleb128 139
	.uleb128 0x12
	.long	.LASF323
	.sleb128 140
	.uleb128 0x12
	.long	.LASF324
	.sleb128 141
	.uleb128 0x12
	.long	.LASF325
	.sleb128 142
	.uleb128 0x12
	.long	.LASF326
	.sleb128 143
	.uleb128 0x12
	.long	.LASF327
	.sleb128 144
	.uleb128 0x12
	.long	.LASF328
	.sleb128 145
	.uleb128 0x12
	.long	.LASF329
	.sleb128 146
	.uleb128 0x12
	.long	.LASF330
	.sleb128 147
	.uleb128 0x12
	.long	.LASF331
	.sleb128 148
	.uleb128 0x12
	.long	.LASF332
	.sleb128 149
	.uleb128 0x12
	.long	.LASF333
	.sleb128 150
	.uleb128 0x12
	.long	.LASF334
	.sleb128 151
	.uleb128 0x1a
	.string	"PHI"
	.sleb128 152
	.uleb128 0x12
	.long	.LASF335
	.sleb128 153
	.byte	0
	.uleb128 0x1b
	.byte	0x4
	.byte	0x2
	.byte	0x44
	.long	0xd65
	.uleb128 0x5
	.long	.LASF336
	.byte	0x2
	.byte	0x47
	.long	0x49d
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0
	.uleb128 0x5
	.long	.LASF337
	.byte	0x2
	.byte	0x49
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0
	.uleb128 0x5
	.long	.LASF338
	.byte	0x2
	.byte	0x4a
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0
	.uleb128 0x5
	.long	.LASF339
	.byte	0x2
	.byte	0x4c
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0
	.uleb128 0x5
	.long	.LASF340
	.byte	0x2
	.byte	0x4e
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0
	.uleb128 0x5
	.long	.LASF341
	.byte	0x2
	.byte	0x50
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0
	.uleb128 0x5
	.long	.LASF342
	.byte	0x2
	.byte	0x53
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0
	.uleb128 0x5
	.long	.LASF343
	.byte	0x2
	.byte	0x55
	.long	0x49d
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.long	.LASF344
	.byte	0x2
	.byte	0x56
	.long	0xce4
	.uleb128 0x1b
	.byte	0x28
	.byte	0x2
	.byte	0x5c
	.long	0xdb5
	.uleb128 0x8
	.long	.LASF345
	.byte	0x2
	.byte	0x5e
	.long	0x4a6
	.byte	0
	.uleb128 0x8
	.long	.LASF346
	.byte	0x2
	.byte	0x5f
	.long	0x123
	.byte	0x8
	.uleb128 0x8
	.long	.LASF347
	.byte	0x2
	.byte	0x60
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF348
	.byte	0x2
	.byte	0x61
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF349
	.byte	0x2
	.byte	0x62
	.long	0x49d
	.byte	0x20
	.byte	0
	.uleb128 0x7
	.long	.LASF350
	.byte	0x2
	.byte	0x63
	.long	0xd70
	.uleb128 0x1c
	.long	.LASF352
	.byte	0x8
	.byte	0x2
	.byte	0x67
	.long	0xe5b
	.uleb128 0x1d
	.long	.LASF353
	.byte	0x2
	.byte	0x69
	.long	0x4a6
	.uleb128 0x1d
	.long	.LASF354
	.byte	0x2
	.byte	0x6a
	.long	0x328
	.uleb128 0x1d
	.long	.LASF355
	.byte	0x2
	.byte	0x6b
	.long	0x49d
	.uleb128 0x1d
	.long	.LASF356
	.byte	0x2
	.byte	0x6c
	.long	0x6f4
	.uleb128 0x1e
	.string	"rtx"
	.byte	0x2
	.byte	0x6d
	.long	0x2d
	.uleb128 0x1d
	.long	.LASF10
	.byte	0x2
	.byte	0x6e
	.long	0xed
	.uleb128 0x1d
	.long	.LASF357
	.byte	0x2
	.byte	0x6f
	.long	0x72a
	.uleb128 0x1d
	.long	.LASF358
	.byte	0x2
	.byte	0x70
	.long	0xd65
	.uleb128 0x1d
	.long	.LASF359
	.byte	0x2
	.byte	0x71
	.long	0xe60
	.uleb128 0x1d
	.long	.LASF360
	.byte	0x2
	.byte	0x72
	.long	0xe6b
	.uleb128 0x1d
	.long	.LASF361
	.byte	0x2
	.byte	0x73
	.long	0x123
	.uleb128 0x1e
	.string	"bb"
	.byte	0x2
	.byte	0x74
	.long	0xe76
	.uleb128 0x1d
	.long	.LASF362
	.byte	0x2
	.byte	0x75
	.long	0xe7c
	.byte	0
	.uleb128 0x1f
	.long	.LASF363
	.uleb128 0x3
	.byte	0x8
	.long	0xe5b
	.uleb128 0x1f
	.long	.LASF364
	.uleb128 0x3
	.byte	0x8
	.long	0xe66
	.uleb128 0x1f
	.long	.LASF365
	.uleb128 0x3
	.byte	0x8
	.long	0xe71
	.uleb128 0x3
	.byte	0x8
	.long	0xdb5
	.uleb128 0x7
	.long	.LASF366
	.byte	0x2
	.byte	0x76
	.long	0xdc0
	.uleb128 0xe
	.long	0xe82
	.long	0xe9d
	.uleb128 0xf
	.long	0x33f
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x2d
	.long	0xead
	.uleb128 0xf
	.long	0x33f
	.byte	0
	.byte	0
	.uleb128 0x11
	.long	.LASF367
	.byte	0x4
	.byte	0x2
	.value	0x1c3
	.long	0xf6f
	.uleb128 0x12
	.long	.LASF368
	.sleb128 1
	.uleb128 0x12
	.long	.LASF369
	.sleb128 2
	.uleb128 0x12
	.long	.LASF370
	.sleb128 3
	.uleb128 0x12
	.long	.LASF371
	.sleb128 4
	.uleb128 0x12
	.long	.LASF372
	.sleb128 5
	.uleb128 0x12
	.long	.LASF373
	.sleb128 6
	.uleb128 0x12
	.long	.LASF374
	.sleb128 7
	.uleb128 0x12
	.long	.LASF375
	.sleb128 8
	.uleb128 0x12
	.long	.LASF376
	.sleb128 9
	.uleb128 0x12
	.long	.LASF377
	.sleb128 10
	.uleb128 0x12
	.long	.LASF378
	.sleb128 11
	.uleb128 0x12
	.long	.LASF379
	.sleb128 12
	.uleb128 0x12
	.long	.LASF380
	.sleb128 13
	.uleb128 0x12
	.long	.LASF381
	.sleb128 14
	.uleb128 0x12
	.long	.LASF382
	.sleb128 15
	.uleb128 0x12
	.long	.LASF383
	.sleb128 16
	.uleb128 0x12
	.long	.LASF384
	.sleb128 17
	.uleb128 0x12
	.long	.LASF385
	.sleb128 18
	.uleb128 0x12
	.long	.LASF386
	.sleb128 19
	.uleb128 0x12
	.long	.LASF387
	.sleb128 20
	.uleb128 0x12
	.long	.LASF388
	.sleb128 21
	.uleb128 0x12
	.long	.LASF389
	.sleb128 22
	.uleb128 0x12
	.long	.LASF390
	.sleb128 23
	.uleb128 0x12
	.long	.LASF391
	.sleb128 24
	.uleb128 0x12
	.long	.LASF392
	.sleb128 25
	.uleb128 0x12
	.long	.LASF393
	.sleb128 26
	.uleb128 0x12
	.long	.LASF394
	.sleb128 27
	.uleb128 0x12
	.long	.LASF395
	.sleb128 28
	.uleb128 0x12
	.long	.LASF396
	.sleb128 29
	.uleb128 0x12
	.long	.LASF397
	.sleb128 30
	.byte	0
	.uleb128 0x11
	.long	.LASF398
	.byte	0x4
	.byte	0x2
	.value	0x297
	.long	0x101e
	.uleb128 0x12
	.long	.LASF399
	.sleb128 -100
	.uleb128 0x12
	.long	.LASF400
	.sleb128 -99
	.uleb128 0x12
	.long	.LASF401
	.sleb128 -98
	.uleb128 0x12
	.long	.LASF402
	.sleb128 -97
	.uleb128 0x12
	.long	.LASF403
	.sleb128 -96
	.uleb128 0x12
	.long	.LASF404
	.sleb128 -95
	.uleb128 0x12
	.long	.LASF405
	.sleb128 -94
	.uleb128 0x12
	.long	.LASF406
	.sleb128 -93
	.uleb128 0x12
	.long	.LASF407
	.sleb128 -92
	.uleb128 0x12
	.long	.LASF408
	.sleb128 -91
	.uleb128 0x12
	.long	.LASF409
	.sleb128 -90
	.uleb128 0x12
	.long	.LASF410
	.sleb128 -89
	.uleb128 0x12
	.long	.LASF411
	.sleb128 -88
	.uleb128 0x12
	.long	.LASF412
	.sleb128 -87
	.uleb128 0x12
	.long	.LASF413
	.sleb128 -86
	.uleb128 0x12
	.long	.LASF414
	.sleb128 -85
	.uleb128 0x12
	.long	.LASF415
	.sleb128 -84
	.uleb128 0x12
	.long	.LASF416
	.sleb128 -83
	.uleb128 0x12
	.long	.LASF417
	.sleb128 -82
	.uleb128 0x12
	.long	.LASF418
	.sleb128 -81
	.uleb128 0x12
	.long	.LASF419
	.sleb128 -80
	.uleb128 0x12
	.long	.LASF420
	.sleb128 -79
	.uleb128 0x12
	.long	.LASF421
	.sleb128 -78
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2d
	.uleb128 0x11
	.long	.LASF422
	.byte	0x4
	.byte	0x2
	.value	0x630
	.long	0x107a
	.uleb128 0x12
	.long	.LASF423
	.sleb128 0
	.uleb128 0x12
	.long	.LASF424
	.sleb128 1
	.uleb128 0x12
	.long	.LASF425
	.sleb128 2
	.uleb128 0x12
	.long	.LASF426
	.sleb128 3
	.uleb128 0x12
	.long	.LASF427
	.sleb128 4
	.uleb128 0x12
	.long	.LASF428
	.sleb128 5
	.uleb128 0x12
	.long	.LASF429
	.sleb128 6
	.uleb128 0x12
	.long	.LASF430
	.sleb128 7
	.uleb128 0x12
	.long	.LASF431
	.sleb128 8
	.uleb128 0x12
	.long	.LASF432
	.sleb128 9
	.uleb128 0x12
	.long	.LASF433
	.sleb128 10
	.uleb128 0x12
	.long	.LASF434
	.sleb128 11
	.byte	0
	.uleb128 0x11
	.long	.LASF435
	.byte	0x4
	.byte	0x2
	.value	0x7f5
	.long	0x10be
	.uleb128 0x12
	.long	.LASF436
	.sleb128 0
	.uleb128 0x12
	.long	.LASF437
	.sleb128 1
	.uleb128 0x12
	.long	.LASF438
	.sleb128 2
	.uleb128 0x12
	.long	.LASF439
	.sleb128 3
	.uleb128 0x12
	.long	.LASF440
	.sleb128 4
	.uleb128 0x12
	.long	.LASF441
	.sleb128 5
	.uleb128 0x12
	.long	.LASF442
	.sleb128 6
	.uleb128 0x12
	.long	.LASF443
	.sleb128 7
	.uleb128 0x12
	.long	.LASF444
	.sleb128 8
	.byte	0
	.uleb128 0x19
	.long	.LASF445
	.byte	0x4
	.byte	0x4
	.byte	0x1d
	.long	0x1497
	.uleb128 0x12
	.long	.LASF446
	.sleb128 0
	.uleb128 0x12
	.long	.LASF447
	.sleb128 1
	.uleb128 0x12
	.long	.LASF448
	.sleb128 2
	.uleb128 0x12
	.long	.LASF449
	.sleb128 3
	.uleb128 0x12
	.long	.LASF450
	.sleb128 4
	.uleb128 0x12
	.long	.LASF451
	.sleb128 5
	.uleb128 0x12
	.long	.LASF452
	.sleb128 6
	.uleb128 0x12
	.long	.LASF453
	.sleb128 7
	.uleb128 0x12
	.long	.LASF454
	.sleb128 8
	.uleb128 0x12
	.long	.LASF455
	.sleb128 9
	.uleb128 0x12
	.long	.LASF456
	.sleb128 10
	.uleb128 0x12
	.long	.LASF457
	.sleb128 11
	.uleb128 0x12
	.long	.LASF458
	.sleb128 12
	.uleb128 0x12
	.long	.LASF459
	.sleb128 13
	.uleb128 0x12
	.long	.LASF460
	.sleb128 14
	.uleb128 0x12
	.long	.LASF461
	.sleb128 15
	.uleb128 0x12
	.long	.LASF462
	.sleb128 16
	.uleb128 0x12
	.long	.LASF463
	.sleb128 17
	.uleb128 0x12
	.long	.LASF464
	.sleb128 18
	.uleb128 0x12
	.long	.LASF465
	.sleb128 19
	.uleb128 0x12
	.long	.LASF466
	.sleb128 20
	.uleb128 0x12
	.long	.LASF467
	.sleb128 21
	.uleb128 0x12
	.long	.LASF468
	.sleb128 22
	.uleb128 0x12
	.long	.LASF469
	.sleb128 23
	.uleb128 0x12
	.long	.LASF470
	.sleb128 24
	.uleb128 0x12
	.long	.LASF471
	.sleb128 25
	.uleb128 0x12
	.long	.LASF472
	.sleb128 26
	.uleb128 0x12
	.long	.LASF473
	.sleb128 27
	.uleb128 0x12
	.long	.LASF474
	.sleb128 28
	.uleb128 0x12
	.long	.LASF475
	.sleb128 29
	.uleb128 0x12
	.long	.LASF476
	.sleb128 30
	.uleb128 0x12
	.long	.LASF477
	.sleb128 31
	.uleb128 0x12
	.long	.LASF478
	.sleb128 32
	.uleb128 0x12
	.long	.LASF479
	.sleb128 33
	.uleb128 0x12
	.long	.LASF480
	.sleb128 34
	.uleb128 0x12
	.long	.LASF481
	.sleb128 35
	.uleb128 0x12
	.long	.LASF482
	.sleb128 36
	.uleb128 0x12
	.long	.LASF483
	.sleb128 37
	.uleb128 0x12
	.long	.LASF484
	.sleb128 38
	.uleb128 0x12
	.long	.LASF485
	.sleb128 39
	.uleb128 0x12
	.long	.LASF486
	.sleb128 40
	.uleb128 0x12
	.long	.LASF487
	.sleb128 41
	.uleb128 0x12
	.long	.LASF488
	.sleb128 42
	.uleb128 0x12
	.long	.LASF489
	.sleb128 43
	.uleb128 0x12
	.long	.LASF490
	.sleb128 44
	.uleb128 0x12
	.long	.LASF491
	.sleb128 45
	.uleb128 0x12
	.long	.LASF492
	.sleb128 46
	.uleb128 0x12
	.long	.LASF493
	.sleb128 47
	.uleb128 0x12
	.long	.LASF494
	.sleb128 48
	.uleb128 0x12
	.long	.LASF495
	.sleb128 49
	.uleb128 0x12
	.long	.LASF496
	.sleb128 50
	.uleb128 0x12
	.long	.LASF497
	.sleb128 51
	.uleb128 0x12
	.long	.LASF498
	.sleb128 52
	.uleb128 0x12
	.long	.LASF499
	.sleb128 53
	.uleb128 0x12
	.long	.LASF500
	.sleb128 54
	.uleb128 0x12
	.long	.LASF501
	.sleb128 55
	.uleb128 0x12
	.long	.LASF502
	.sleb128 56
	.uleb128 0x12
	.long	.LASF503
	.sleb128 57
	.uleb128 0x12
	.long	.LASF504
	.sleb128 58
	.uleb128 0x12
	.long	.LASF505
	.sleb128 59
	.uleb128 0x12
	.long	.LASF506
	.sleb128 60
	.uleb128 0x12
	.long	.LASF507
	.sleb128 61
	.uleb128 0x12
	.long	.LASF508
	.sleb128 62
	.uleb128 0x12
	.long	.LASF509
	.sleb128 63
	.uleb128 0x12
	.long	.LASF510
	.sleb128 64
	.uleb128 0x12
	.long	.LASF511
	.sleb128 65
	.uleb128 0x12
	.long	.LASF512
	.sleb128 66
	.uleb128 0x12
	.long	.LASF513
	.sleb128 67
	.uleb128 0x12
	.long	.LASF514
	.sleb128 68
	.uleb128 0x12
	.long	.LASF515
	.sleb128 69
	.uleb128 0x12
	.long	.LASF516
	.sleb128 70
	.uleb128 0x12
	.long	.LASF517
	.sleb128 71
	.uleb128 0x12
	.long	.LASF518
	.sleb128 72
	.uleb128 0x12
	.long	.LASF519
	.sleb128 73
	.uleb128 0x12
	.long	.LASF520
	.sleb128 74
	.uleb128 0x12
	.long	.LASF521
	.sleb128 75
	.uleb128 0x12
	.long	.LASF522
	.sleb128 76
	.uleb128 0x12
	.long	.LASF523
	.sleb128 77
	.uleb128 0x12
	.long	.LASF524
	.sleb128 78
	.uleb128 0x12
	.long	.LASF525
	.sleb128 79
	.uleb128 0x12
	.long	.LASF526
	.sleb128 80
	.uleb128 0x12
	.long	.LASF527
	.sleb128 81
	.uleb128 0x12
	.long	.LASF528
	.sleb128 82
	.uleb128 0x12
	.long	.LASF529
	.sleb128 83
	.uleb128 0x12
	.long	.LASF530
	.sleb128 84
	.uleb128 0x12
	.long	.LASF531
	.sleb128 85
	.uleb128 0x12
	.long	.LASF532
	.sleb128 86
	.uleb128 0x12
	.long	.LASF533
	.sleb128 87
	.uleb128 0x12
	.long	.LASF534
	.sleb128 88
	.uleb128 0x12
	.long	.LASF535
	.sleb128 89
	.uleb128 0x12
	.long	.LASF536
	.sleb128 90
	.uleb128 0x12
	.long	.LASF537
	.sleb128 91
	.uleb128 0x12
	.long	.LASF538
	.sleb128 92
	.uleb128 0x12
	.long	.LASF539
	.sleb128 93
	.uleb128 0x12
	.long	.LASF540
	.sleb128 94
	.uleb128 0x12
	.long	.LASF541
	.sleb128 95
	.uleb128 0x12
	.long	.LASF542
	.sleb128 96
	.uleb128 0x12
	.long	.LASF543
	.sleb128 97
	.uleb128 0x12
	.long	.LASF544
	.sleb128 98
	.uleb128 0x12
	.long	.LASF545
	.sleb128 99
	.uleb128 0x12
	.long	.LASF546
	.sleb128 100
	.uleb128 0x12
	.long	.LASF547
	.sleb128 101
	.uleb128 0x12
	.long	.LASF548
	.sleb128 102
	.uleb128 0x12
	.long	.LASF549
	.sleb128 103
	.uleb128 0x12
	.long	.LASF550
	.sleb128 104
	.uleb128 0x12
	.long	.LASF551
	.sleb128 105
	.uleb128 0x12
	.long	.LASF552
	.sleb128 106
	.uleb128 0x12
	.long	.LASF553
	.sleb128 107
	.uleb128 0x12
	.long	.LASF554
	.sleb128 108
	.uleb128 0x12
	.long	.LASF555
	.sleb128 109
	.uleb128 0x12
	.long	.LASF556
	.sleb128 110
	.uleb128 0x12
	.long	.LASF557
	.sleb128 111
	.uleb128 0x12
	.long	.LASF558
	.sleb128 112
	.uleb128 0x12
	.long	.LASF559
	.sleb128 113
	.uleb128 0x12
	.long	.LASF560
	.sleb128 114
	.uleb128 0x12
	.long	.LASF561
	.sleb128 115
	.uleb128 0x12
	.long	.LASF562
	.sleb128 116
	.uleb128 0x12
	.long	.LASF563
	.sleb128 117
	.uleb128 0x12
	.long	.LASF564
	.sleb128 118
	.uleb128 0x12
	.long	.LASF565
	.sleb128 119
	.uleb128 0x12
	.long	.LASF566
	.sleb128 120
	.uleb128 0x12
	.long	.LASF567
	.sleb128 121
	.uleb128 0x12
	.long	.LASF568
	.sleb128 122
	.uleb128 0x12
	.long	.LASF569
	.sleb128 123
	.uleb128 0x12
	.long	.LASF570
	.sleb128 124
	.uleb128 0x12
	.long	.LASF571
	.sleb128 125
	.uleb128 0x12
	.long	.LASF572
	.sleb128 126
	.uleb128 0x12
	.long	.LASF573
	.sleb128 127
	.uleb128 0x12
	.long	.LASF574
	.sleb128 128
	.uleb128 0x12
	.long	.LASF575
	.sleb128 129
	.uleb128 0x12
	.long	.LASF576
	.sleb128 130
	.uleb128 0x12
	.long	.LASF577
	.sleb128 131
	.uleb128 0x12
	.long	.LASF578
	.sleb128 132
	.uleb128 0x12
	.long	.LASF579
	.sleb128 133
	.uleb128 0x12
	.long	.LASF580
	.sleb128 134
	.uleb128 0x12
	.long	.LASF581
	.sleb128 135
	.uleb128 0x12
	.long	.LASF582
	.sleb128 136
	.uleb128 0x12
	.long	.LASF583
	.sleb128 137
	.uleb128 0x12
	.long	.LASF584
	.sleb128 138
	.uleb128 0x12
	.long	.LASF585
	.sleb128 139
	.uleb128 0x12
	.long	.LASF586
	.sleb128 140
	.uleb128 0x12
	.long	.LASF587
	.sleb128 141
	.uleb128 0x12
	.long	.LASF588
	.sleb128 142
	.uleb128 0x12
	.long	.LASF589
	.sleb128 143
	.uleb128 0x12
	.long	.LASF590
	.sleb128 144
	.uleb128 0x12
	.long	.LASF591
	.sleb128 145
	.uleb128 0x12
	.long	.LASF592
	.sleb128 146
	.uleb128 0x12
	.long	.LASF593
	.sleb128 147
	.byte	0
	.uleb128 0x19
	.long	.LASF594
	.byte	0x4
	.byte	0x4
	.byte	0x45
	.long	0x14bc
	.uleb128 0x12
	.long	.LASF595
	.sleb128 0
	.uleb128 0x12
	.long	.LASF596
	.sleb128 1
	.uleb128 0x12
	.long	.LASF597
	.sleb128 2
	.uleb128 0x12
	.long	.LASF598
	.sleb128 3
	.byte	0
	.uleb128 0x19
	.long	.LASF599
	.byte	0x4
	.byte	0x4
	.byte	0x54
	.long	0x1729
	.uleb128 0x12
	.long	.LASF600
	.sleb128 0
	.uleb128 0x12
	.long	.LASF601
	.sleb128 1
	.uleb128 0x12
	.long	.LASF602
	.sleb128 2
	.uleb128 0x12
	.long	.LASF603
	.sleb128 3
	.uleb128 0x12
	.long	.LASF604
	.sleb128 4
	.uleb128 0x12
	.long	.LASF605
	.sleb128 5
	.uleb128 0x12
	.long	.LASF606
	.sleb128 6
	.uleb128 0x12
	.long	.LASF607
	.sleb128 7
	.uleb128 0x12
	.long	.LASF608
	.sleb128 8
	.uleb128 0x12
	.long	.LASF609
	.sleb128 9
	.uleb128 0x12
	.long	.LASF610
	.sleb128 10
	.uleb128 0x12
	.long	.LASF611
	.sleb128 11
	.uleb128 0x12
	.long	.LASF612
	.sleb128 12
	.uleb128 0x12
	.long	.LASF613
	.sleb128 13
	.uleb128 0x12
	.long	.LASF614
	.sleb128 14
	.uleb128 0x12
	.long	.LASF615
	.sleb128 15
	.uleb128 0x12
	.long	.LASF616
	.sleb128 16
	.uleb128 0x12
	.long	.LASF617
	.sleb128 17
	.uleb128 0x12
	.long	.LASF618
	.sleb128 18
	.uleb128 0x12
	.long	.LASF619
	.sleb128 19
	.uleb128 0x12
	.long	.LASF620
	.sleb128 20
	.uleb128 0x12
	.long	.LASF621
	.sleb128 21
	.uleb128 0x12
	.long	.LASF622
	.sleb128 22
	.uleb128 0x12
	.long	.LASF623
	.sleb128 23
	.uleb128 0x12
	.long	.LASF624
	.sleb128 24
	.uleb128 0x12
	.long	.LASF625
	.sleb128 25
	.uleb128 0x12
	.long	.LASF626
	.sleb128 26
	.uleb128 0x12
	.long	.LASF627
	.sleb128 27
	.uleb128 0x12
	.long	.LASF628
	.sleb128 28
	.uleb128 0x12
	.long	.LASF629
	.sleb128 29
	.uleb128 0x12
	.long	.LASF630
	.sleb128 30
	.uleb128 0x12
	.long	.LASF631
	.sleb128 31
	.uleb128 0x12
	.long	.LASF632
	.sleb128 32
	.uleb128 0x12
	.long	.LASF633
	.sleb128 33
	.uleb128 0x12
	.long	.LASF634
	.sleb128 34
	.uleb128 0x12
	.long	.LASF635
	.sleb128 35
	.uleb128 0x12
	.long	.LASF636
	.sleb128 36
	.uleb128 0x12
	.long	.LASF637
	.sleb128 37
	.uleb128 0x12
	.long	.LASF638
	.sleb128 38
	.uleb128 0x12
	.long	.LASF639
	.sleb128 39
	.uleb128 0x12
	.long	.LASF640
	.sleb128 40
	.uleb128 0x12
	.long	.LASF641
	.sleb128 41
	.uleb128 0x12
	.long	.LASF642
	.sleb128 42
	.uleb128 0x12
	.long	.LASF643
	.sleb128 43
	.uleb128 0x12
	.long	.LASF644
	.sleb128 44
	.uleb128 0x12
	.long	.LASF645
	.sleb128 45
	.uleb128 0x12
	.long	.LASF646
	.sleb128 46
	.uleb128 0x12
	.long	.LASF647
	.sleb128 47
	.uleb128 0x12
	.long	.LASF648
	.sleb128 48
	.uleb128 0x12
	.long	.LASF649
	.sleb128 49
	.uleb128 0x12
	.long	.LASF650
	.sleb128 50
	.uleb128 0x12
	.long	.LASF651
	.sleb128 51
	.uleb128 0x12
	.long	.LASF652
	.sleb128 52
	.uleb128 0x12
	.long	.LASF653
	.sleb128 53
	.uleb128 0x12
	.long	.LASF654
	.sleb128 54
	.uleb128 0x12
	.long	.LASF655
	.sleb128 55
	.uleb128 0x12
	.long	.LASF656
	.sleb128 56
	.uleb128 0x12
	.long	.LASF657
	.sleb128 57
	.uleb128 0x12
	.long	.LASF658
	.sleb128 58
	.uleb128 0x12
	.long	.LASF659
	.sleb128 59
	.uleb128 0x12
	.long	.LASF660
	.sleb128 60
	.uleb128 0x12
	.long	.LASF661
	.sleb128 61
	.uleb128 0x12
	.long	.LASF662
	.sleb128 62
	.uleb128 0x12
	.long	.LASF663
	.sleb128 63
	.uleb128 0x12
	.long	.LASF664
	.sleb128 64
	.uleb128 0x12
	.long	.LASF665
	.sleb128 65
	.uleb128 0x12
	.long	.LASF666
	.sleb128 66
	.uleb128 0x12
	.long	.LASF667
	.sleb128 67
	.uleb128 0x12
	.long	.LASF668
	.sleb128 68
	.uleb128 0x12
	.long	.LASF669
	.sleb128 69
	.uleb128 0x12
	.long	.LASF670
	.sleb128 70
	.uleb128 0x12
	.long	.LASF671
	.sleb128 71
	.uleb128 0x12
	.long	.LASF672
	.sleb128 72
	.uleb128 0x12
	.long	.LASF673
	.sleb128 73
	.uleb128 0x12
	.long	.LASF674
	.sleb128 74
	.uleb128 0x12
	.long	.LASF675
	.sleb128 75
	.uleb128 0x12
	.long	.LASF676
	.sleb128 76
	.uleb128 0x12
	.long	.LASF677
	.sleb128 77
	.uleb128 0x12
	.long	.LASF678
	.sleb128 78
	.uleb128 0x12
	.long	.LASF679
	.sleb128 79
	.uleb128 0x12
	.long	.LASF680
	.sleb128 80
	.uleb128 0x12
	.long	.LASF681
	.sleb128 81
	.uleb128 0x12
	.long	.LASF682
	.sleb128 82
	.uleb128 0x12
	.long	.LASF683
	.sleb128 83
	.uleb128 0x12
	.long	.LASF684
	.sleb128 84
	.uleb128 0x12
	.long	.LASF685
	.sleb128 85
	.uleb128 0x12
	.long	.LASF686
	.sleb128 86
	.uleb128 0x12
	.long	.LASF687
	.sleb128 87
	.uleb128 0x12
	.long	.LASF688
	.sleb128 88
	.uleb128 0x12
	.long	.LASF689
	.sleb128 89
	.uleb128 0x12
	.long	.LASF690
	.sleb128 90
	.uleb128 0x12
	.long	.LASF691
	.sleb128 91
	.uleb128 0x12
	.long	.LASF692
	.sleb128 92
	.uleb128 0x12
	.long	.LASF693
	.sleb128 93
	.uleb128 0x12
	.long	.LASF694
	.sleb128 94
	.uleb128 0x12
	.long	.LASF695
	.sleb128 95
	.byte	0
	.uleb128 0x4
	.long	.LASF696
	.byte	0x18
	.byte	0x4
	.byte	0x79
	.long	0x18c5
	.uleb128 0x8
	.long	.LASF697
	.byte	0x4
	.byte	0x7b
	.long	0x123
	.byte	0
	.uleb128 0x8
	.long	.LASF24
	.byte	0x4
	.byte	0x7c
	.long	0x123
	.byte	0x8
	.uleb128 0x5
	.long	.LASF0
	.byte	0x4
	.byte	0x7e
	.long	0x49d
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x10
	.uleb128 0x5
	.long	.LASF698
	.byte	0x4
	.byte	0x80
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x10
	.uleb128 0x5
	.long	.LASF699
	.byte	0x4
	.byte	0x81
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x10
	.uleb128 0x5
	.long	.LASF700
	.byte	0x4
	.byte	0x82
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x10
	.uleb128 0x5
	.long	.LASF701
	.byte	0x4
	.byte	0x83
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x10
	.uleb128 0x5
	.long	.LASF702
	.byte	0x4
	.byte	0x84
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x10
	.uleb128 0x5
	.long	.LASF703
	.byte	0x4
	.byte	0x85
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x10
	.uleb128 0x5
	.long	.LASF704
	.byte	0x4
	.byte	0x86
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x10
	.uleb128 0x5
	.long	.LASF705
	.byte	0x4
	.byte	0x87
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x10
	.uleb128 0x5
	.long	.LASF706
	.byte	0x4
	.byte	0x89
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x10
	.uleb128 0x5
	.long	.LASF707
	.byte	0x4
	.byte	0x8a
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x10
	.uleb128 0x5
	.long	.LASF708
	.byte	0x4
	.byte	0x8b
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x10
	.uleb128 0x5
	.long	.LASF709
	.byte	0x4
	.byte	0x8c
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x10
	.uleb128 0x5
	.long	.LASF710
	.byte	0x4
	.byte	0x8d
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x10
	.uleb128 0x5
	.long	.LASF711
	.byte	0x4
	.byte	0x8e
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x10
	.uleb128 0x5
	.long	.LASF712
	.byte	0x4
	.byte	0x8f
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x10
	.uleb128 0x5
	.long	.LASF713
	.byte	0x4
	.byte	0x90
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.uleb128 0x5
	.long	.LASF714
	.byte	0x4
	.byte	0x92
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x10
	.uleb128 0x5
	.long	.LASF715
	.byte	0x4
	.byte	0x93
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x10
	.uleb128 0x5
	.long	.LASF716
	.byte	0x4
	.byte	0x94
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x10
	.uleb128 0x5
	.long	.LASF717
	.byte	0x4
	.byte	0x95
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x10
	.uleb128 0x5
	.long	.LASF718
	.byte	0x4
	.byte	0x96
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x10
	.uleb128 0x5
	.long	.LASF719
	.byte	0x4
	.byte	0x97
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x10
	.uleb128 0x5
	.long	.LASF720
	.byte	0x4
	.byte	0x98
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x10
	.uleb128 0x5
	.long	.LASF721
	.byte	0x4
	.byte	0x99
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x10
	.byte	0
	.uleb128 0x20
	.byte	0x10
	.byte	0x4
	.value	0x2c9
	.long	0x18e9
	.uleb128 0x21
	.string	"low"
	.byte	0x4
	.value	0x2ca
	.long	0x4b8
	.byte	0
	.uleb128 0x14
	.long	.LASF722
	.byte	0x4
	.value	0x2cb
	.long	0x4a6
	.byte	0x8
	.byte	0
	.uleb128 0x13
	.long	.LASF723
	.byte	0x30
	.byte	0x4
	.value	0x2c1
	.long	0x191e
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x2c3
	.long	0x1729
	.byte	0
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x2c4
	.long	0x2d
	.byte	0x18
	.uleb128 0x14
	.long	.LASF17
	.byte	0x4
	.value	0x2cc
	.long	0x18c5
	.byte	0x20
	.byte	0
	.uleb128 0x1b
	.byte	0x18
	.byte	0xb
	.byte	0x6b
	.long	0x1931
	.uleb128 0x6
	.string	"r"
	.byte	0xb
	.byte	0x6c
	.long	0x1931
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x4a6
	.long	0x1941
	.uleb128 0xf
	.long	0x33f
	.byte	0x2
	.byte	0
	.uleb128 0x7
	.long	.LASF724
	.byte	0xb
	.byte	0x6d
	.long	0x191e
	.uleb128 0x13
	.long	.LASF725
	.byte	0x38
	.byte	0x4
	.value	0x2de
	.long	0x1981
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x2e0
	.long	0x1729
	.byte	0
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x2e1
	.long	0x2d
	.byte	0x18
	.uleb128 0x14
	.long	.LASF18
	.byte	0x4
	.value	0x2e2
	.long	0x1941
	.byte	0x20
	.byte	0
	.uleb128 0x13
	.long	.LASF726
	.byte	0x30
	.byte	0x4
	.value	0x2e9
	.long	0x19c3
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x2eb
	.long	0x1729
	.byte	0
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x2ec
	.long	0x2d
	.byte	0x18
	.uleb128 0x14
	.long	.LASF727
	.byte	0x4
	.value	0x2ed
	.long	0x328
	.byte	0x20
	.uleb128 0x14
	.long	.LASF728
	.byte	0x4
	.value	0x2ee
	.long	0x6f4
	.byte	0x28
	.byte	0
	.uleb128 0x13
	.long	.LASF729
	.byte	0x30
	.byte	0x4
	.value	0x2f5
	.long	0x1a05
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x2f7
	.long	0x1729
	.byte	0
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x2f8
	.long	0x2d
	.byte	0x18
	.uleb128 0x14
	.long	.LASF730
	.byte	0x4
	.value	0x2f9
	.long	0x123
	.byte	0x20
	.uleb128 0x14
	.long	.LASF731
	.byte	0x4
	.value	0x2fa
	.long	0x123
	.byte	0x28
	.byte	0
	.uleb128 0x13
	.long	.LASF732
	.byte	0x28
	.byte	0x4
	.value	0x300
	.long	0x1a3a
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x302
	.long	0x1729
	.byte	0
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x303
	.long	0x2d
	.byte	0x18
	.uleb128 0x14
	.long	.LASF733
	.byte	0x4
	.value	0x304
	.long	0x123
	.byte	0x20
	.byte	0
	.uleb128 0x4
	.long	.LASF734
	.byte	0x10
	.byte	0xc
	.byte	0x1a
	.long	0x1a5f
	.uleb128 0x6
	.string	"len"
	.byte	0xc
	.byte	0x1c
	.long	0x49d
	.byte	0
	.uleb128 0x6
	.string	"str"
	.byte	0xc
	.byte	0x1d
	.long	0x1a5f
	.byte	0x8
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1a65
	.uleb128 0xc
	.long	0x4bf
	.uleb128 0x13
	.long	.LASF735
	.byte	0x28
	.byte	0x4
	.value	0x317
	.long	0x1a91
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x319
	.long	0x1729
	.byte	0
	.uleb128 0x21
	.string	"id"
	.byte	0x4
	.value	0x31a
	.long	0x1a3a
	.byte	0x18
	.byte	0
	.uleb128 0x13
	.long	.LASF736
	.byte	0x28
	.byte	0x4
	.value	0x321
	.long	0x1ac6
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x323
	.long	0x1729
	.byte	0
	.uleb128 0x14
	.long	.LASF737
	.byte	0x4
	.value	0x324
	.long	0x123
	.byte	0x18
	.uleb128 0x14
	.long	.LASF738
	.byte	0x4
	.value	0x325
	.long	0x123
	.byte	0x20
	.byte	0
	.uleb128 0x13
	.long	.LASF739
	.byte	0x28
	.byte	0x4
	.value	0x32e
	.long	0x1af9
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x330
	.long	0x1729
	.byte	0
	.uleb128 0x14
	.long	.LASF727
	.byte	0x4
	.value	0x331
	.long	0x328
	.byte	0x18
	.uleb128 0x21
	.string	"a"
	.byte	0x4
	.value	0x332
	.long	0x1af9
	.byte	0x20
	.byte	0
	.uleb128 0xe
	.long	0x123
	.long	0x1b09
	.uleb128 0xf
	.long	0x33f
	.byte	0
	.byte	0
	.uleb128 0x13
	.long	.LASF740
	.byte	0x28
	.byte	0x4
	.value	0x36f
	.long	0x1b3e
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x371
	.long	0x1729
	.byte	0
	.uleb128 0x14
	.long	.LASF741
	.byte	0x4
	.value	0x372
	.long	0x328
	.byte	0x18
	.uleb128 0x14
	.long	.LASF742
	.byte	0x4
	.value	0x373
	.long	0x1af9
	.byte	0x20
	.byte	0
	.uleb128 0x13
	.long	.LASF743
	.byte	0x50
	.byte	0x4
	.value	0x3a3
	.long	0x1bd7
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x3a5
	.long	0x1729
	.byte	0
	.uleb128 0x22
	.long	.LASF744
	.byte	0x4
	.value	0x3a7
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x18
	.uleb128 0x22
	.long	.LASF745
	.byte	0x4
	.value	0x3a8
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x18
	.uleb128 0x22
	.long	.LASF746
	.byte	0x4
	.value	0x3a9
	.long	0x49d
	.byte	0x4
	.byte	0x1e
	.byte	0
	.byte	0x18
	.uleb128 0x14
	.long	.LASF747
	.byte	0x4
	.value	0x3ab
	.long	0x123
	.byte	0x20
	.uleb128 0x14
	.long	.LASF748
	.byte	0x4
	.value	0x3ac
	.long	0x123
	.byte	0x28
	.uleb128 0x14
	.long	.LASF749
	.byte	0x4
	.value	0x3ad
	.long	0x123
	.byte	0x30
	.uleb128 0x14
	.long	.LASF750
	.byte	0x4
	.value	0x3ae
	.long	0x123
	.byte	0x38
	.uleb128 0x14
	.long	.LASF751
	.byte	0x4
	.value	0x3af
	.long	0x123
	.byte	0x40
	.uleb128 0x14
	.long	.LASF752
	.byte	0x4
	.value	0x3b0
	.long	0x123
	.byte	0x48
	.byte	0
	.uleb128 0x23
	.byte	0x8
	.byte	0x4
	.value	0x4d8
	.long	0x1bf9
	.uleb128 0xa
	.long	.LASF753
	.byte	0x4
	.value	0x4d8
	.long	0x328
	.uleb128 0xa
	.long	.LASF728
	.byte	0x4
	.value	0x4d8
	.long	0x4f1
	.byte	0
	.uleb128 0x13
	.long	.LASF754
	.byte	0xa8
	.byte	0x4
	.value	0x4b8
	.long	0x1e0e
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x4ba
	.long	0x1729
	.byte	0
	.uleb128 0x14
	.long	.LASF755
	.byte	0x4
	.value	0x4bb
	.long	0x123
	.byte	0x18
	.uleb128 0x14
	.long	.LASF348
	.byte	0x4
	.value	0x4bc
	.long	0x123
	.byte	0x20
	.uleb128 0x14
	.long	.LASF756
	.byte	0x4
	.value	0x4bd
	.long	0x123
	.byte	0x28
	.uleb128 0x14
	.long	.LASF757
	.byte	0x4
	.value	0x4be
	.long	0x123
	.byte	0x30
	.uleb128 0x21
	.string	"uid"
	.byte	0x4
	.value	0x4bf
	.long	0x49d
	.byte	0x38
	.uleb128 0x22
	.long	.LASF758
	.byte	0x4
	.value	0x4c1
	.long	0x49d
	.byte	0x4
	.byte	0x9
	.byte	0x17
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF1
	.byte	0x4
	.value	0x4c2
	.long	0x49d
	.byte	0x4
	.byte	0x7
	.byte	0x10
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF759
	.byte	0x4
	.value	0x4c4
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF760
	.byte	0x4
	.value	0x4c5
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF761
	.byte	0x4
	.value	0x4c6
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF762
	.byte	0x4
	.value	0x4c7
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF763
	.byte	0x4
	.value	0x4c8
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF764
	.byte	0x4
	.value	0x4c9
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF765
	.byte	0x4
	.value	0x4ca
	.long	0x49d
	.byte	0x4
	.byte	0x2
	.byte	0x8
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF714
	.byte	0x4
	.value	0x4cc
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF715
	.byte	0x4
	.value	0x4cd
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF716
	.byte	0x4
	.value	0x4ce
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF717
	.byte	0x4
	.value	0x4cf
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF718
	.byte	0x4
	.value	0x4d0
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF719
	.byte	0x4
	.value	0x4d1
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF720
	.byte	0x4
	.value	0x4d2
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF766
	.byte	0x4
	.value	0x4d3
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x3c
	.uleb128 0x14
	.long	.LASF349
	.byte	0x4
	.value	0x4d5
	.long	0x49d
	.byte	0x40
	.uleb128 0x14
	.long	.LASF767
	.byte	0x4
	.value	0x4d6
	.long	0x123
	.byte	0x48
	.uleb128 0x14
	.long	.LASF768
	.byte	0x4
	.value	0x4d7
	.long	0x123
	.byte	0x50
	.uleb128 0x14
	.long	.LASF769
	.byte	0x4
	.value	0x4d8
	.long	0x1bd7
	.byte	0x58
	.uleb128 0x14
	.long	.LASF770
	.byte	0x4
	.value	0x4d9
	.long	0x123
	.byte	0x60
	.uleb128 0x14
	.long	.LASF771
	.byte	0x4
	.value	0x4da
	.long	0x123
	.byte	0x68
	.uleb128 0x14
	.long	.LASF772
	.byte	0x4
	.value	0x4db
	.long	0x123
	.byte	0x70
	.uleb128 0x14
	.long	.LASF773
	.byte	0x4
	.value	0x4dc
	.long	0x123
	.byte	0x78
	.uleb128 0x14
	.long	.LASF774
	.byte	0x4
	.value	0x4dd
	.long	0x123
	.byte	0x80
	.uleb128 0x14
	.long	.LASF775
	.byte	0x4
	.value	0x4de
	.long	0x123
	.byte	0x88
	.uleb128 0x14
	.long	.LASF776
	.byte	0x4
	.value	0x4df
	.long	0x123
	.byte	0x90
	.uleb128 0x14
	.long	.LASF777
	.byte	0x4
	.value	0x4e0
	.long	0x4a6
	.byte	0x98
	.uleb128 0x14
	.long	.LASF778
	.byte	0x4
	.value	0x4e2
	.long	0x1e13
	.byte	0xa0
	.byte	0
	.uleb128 0x1f
	.long	.LASF779
	.uleb128 0x3
	.byte	0x8
	.long	0x1e0e
	.uleb128 0x20
	.byte	0x4
	.byte	0x4
	.value	0x717
	.long	0x1e43
	.uleb128 0x22
	.long	.LASF349
	.byte	0x4
	.value	0x717
	.long	0x49d
	.byte	0x4
	.byte	0x18
	.byte	0x8
	.byte	0
	.uleb128 0x22
	.long	.LASF780
	.byte	0x4
	.value	0x717
	.long	0x49d
	.byte	0x4
	.byte	0x8
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x23
	.byte	0x8
	.byte	0x4
	.value	0x70e
	.long	0x1e6b
	.uleb128 0xb
	.string	"f"
	.byte	0x4
	.value	0x711
	.long	0x14bc
	.uleb128 0xb
	.string	"i"
	.byte	0x4
	.value	0x714
	.long	0x4a6
	.uleb128 0xb
	.string	"a"
	.byte	0x4
	.value	0x717
	.long	0x1e19
	.byte	0
	.uleb128 0x23
	.byte	0x8
	.byte	0x4
	.value	0x72c
	.long	0x1e9d
	.uleb128 0xb
	.string	"f"
	.byte	0x4
	.value	0x72d
	.long	0x231d
	.uleb128 0xb
	.string	"r"
	.byte	0x4
	.value	0x72e
	.long	0x2d
	.uleb128 0xb
	.string	"t"
	.byte	0x4
	.value	0x72f
	.long	0x123
	.uleb128 0xb
	.string	"i"
	.byte	0x4
	.value	0x730
	.long	0x328
	.byte	0
	.uleb128 0x24
	.long	.LASF781
	.value	0x1b0
	.byte	0xd
	.byte	0xae
	.long	0x231d
	.uleb128 0x6
	.string	"eh"
	.byte	0xd
	.byte	0xb0
	.long	0x2a33
	.byte	0
	.uleb128 0x8
	.long	.LASF782
	.byte	0xd
	.byte	0xb1
	.long	0x2a3e
	.byte	0x8
	.uleb128 0x8
	.long	.LASF346
	.byte	0xd
	.byte	0xb2
	.long	0x2a44
	.byte	0x10
	.uleb128 0x8
	.long	.LASF783
	.byte	0xd
	.byte	0xb3
	.long	0x2a4a
	.byte	0x18
	.uleb128 0x8
	.long	.LASF784
	.byte	0xd
	.byte	0xb4
	.long	0x2a55
	.byte	0x20
	.uleb128 0x8
	.long	.LASF770
	.byte	0xd
	.byte	0xb9
	.long	0x6f4
	.byte	0x28
	.uleb128 0x8
	.long	.LASF23
	.byte	0xd
	.byte	0xbc
	.long	0x123
	.byte	0x30
	.uleb128 0x8
	.long	.LASF785
	.byte	0xd
	.byte	0xbf
	.long	0x231d
	.byte	0x38
	.uleb128 0x8
	.long	.LASF786
	.byte	0xd
	.byte	0xc4
	.long	0x328
	.byte	0x40
	.uleb128 0x8
	.long	.LASF787
	.byte	0xd
	.byte	0xc9
	.long	0x328
	.byte	0x44
	.uleb128 0x8
	.long	.LASF788
	.byte	0xd
	.byte	0xce
	.long	0x328
	.byte	0x48
	.uleb128 0x8
	.long	.LASF789
	.byte	0xd
	.byte	0xd2
	.long	0x328
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF790
	.byte	0xd
	.byte	0xd6
	.long	0x2d
	.byte	0x50
	.uleb128 0x8
	.long	.LASF791
	.byte	0xd
	.byte	0xda
	.long	0x491
	.byte	0x58
	.uleb128 0x8
	.long	.LASF792
	.byte	0xd
	.byte	0xe0
	.long	0x2d
	.byte	0x78
	.uleb128 0x8
	.long	.LASF793
	.byte	0xd
	.byte	0xe3
	.long	0x2d
	.byte	0x80
	.uleb128 0x8
	.long	.LASF794
	.byte	0xd
	.byte	0xe7
	.long	0x6f4
	.byte	0x88
	.uleb128 0x8
	.long	.LASF795
	.byte	0xd
	.byte	0xeb
	.long	0x2a60
	.byte	0x90
	.uleb128 0x8
	.long	.LASF796
	.byte	0xd
	.byte	0xee
	.long	0x328
	.byte	0x98
	.uleb128 0x8
	.long	.LASF797
	.byte	0xd
	.byte	0xf3
	.long	0x123
	.byte	0xa0
	.uleb128 0x8
	.long	.LASF798
	.byte	0xd
	.byte	0xf9
	.long	0x2d
	.byte	0xa8
	.uleb128 0x8
	.long	.LASF799
	.byte	0xd
	.byte	0xfd
	.long	0x2d
	.byte	0xb0
	.uleb128 0x14
	.long	.LASF800
	.byte	0xd
	.value	0x102
	.long	0x2d
	.byte	0xb8
	.uleb128 0x14
	.long	.LASF801
	.byte	0xd
	.value	0x108
	.long	0x2d
	.byte	0xc0
	.uleb128 0x14
	.long	.LASF802
	.byte	0xd
	.value	0x10d
	.long	0x2d
	.byte	0xc8
	.uleb128 0x14
	.long	.LASF803
	.byte	0xd
	.value	0x111
	.long	0x2d
	.byte	0xd0
	.uleb128 0x14
	.long	.LASF804
	.byte	0xd
	.value	0x115
	.long	0x2d
	.byte	0xd8
	.uleb128 0x14
	.long	.LASF805
	.byte	0xd
	.value	0x118
	.long	0x123
	.byte	0xe0
	.uleb128 0x14
	.long	.LASF806
	.byte	0xd
	.value	0x11c
	.long	0x2d
	.byte	0xe8
	.uleb128 0x14
	.long	.LASF807
	.byte	0xd
	.value	0x11f
	.long	0x2d
	.byte	0xf0
	.uleb128 0x14
	.long	.LASF808
	.byte	0xd
	.value	0x125
	.long	0x2d
	.byte	0xf8
	.uleb128 0x25
	.long	.LASF809
	.byte	0xd
	.value	0x12a
	.long	0x2d
	.value	0x100
	.uleb128 0x25
	.long	.LASF810
	.byte	0xd
	.value	0x12f
	.long	0x4a6
	.value	0x108
	.uleb128 0x25
	.long	.LASF811
	.byte	0xd
	.value	0x134
	.long	0x123
	.value	0x110
	.uleb128 0x25
	.long	.LASF812
	.byte	0xd
	.value	0x13d
	.long	0x123
	.value	0x118
	.uleb128 0x25
	.long	.LASF813
	.byte	0xd
	.value	0x140
	.long	0x2d
	.value	0x120
	.uleb128 0x25
	.long	.LASF814
	.byte	0xd
	.value	0x144
	.long	0x2d
	.value	0x128
	.uleb128 0x25
	.long	.LASF815
	.byte	0xd
	.value	0x148
	.long	0x49d
	.value	0x130
	.uleb128 0x25
	.long	.LASF816
	.byte	0xd
	.value	0x14e
	.long	0x101e
	.value	0x138
	.uleb128 0x25
	.long	.LASF817
	.byte	0xd
	.value	0x151
	.long	0x2a6b
	.value	0x140
	.uleb128 0x25
	.long	.LASF818
	.byte	0xd
	.value	0x154
	.long	0x328
	.value	0x148
	.uleb128 0x25
	.long	.LASF819
	.byte	0xd
	.value	0x157
	.long	0x328
	.value	0x14c
	.uleb128 0x25
	.long	.LASF820
	.byte	0xd
	.value	0x15d
	.long	0x328
	.value	0x150
	.uleb128 0x25
	.long	.LASF821
	.byte	0xd
	.value	0x161
	.long	0x28d5
	.value	0x158
	.uleb128 0x25
	.long	.LASF822
	.byte	0xd
	.value	0x164
	.long	0x328
	.value	0x160
	.uleb128 0x25
	.long	.LASF823
	.byte	0xd
	.value	0x165
	.long	0x328
	.value	0x164
	.uleb128 0x25
	.long	.LASF824
	.byte	0xd
	.value	0x167
	.long	0x4a4
	.value	0x168
	.uleb128 0x25
	.long	.LASF825
	.byte	0xd
	.value	0x168
	.long	0x123
	.value	0x170
	.uleb128 0x25
	.long	.LASF826
	.byte	0xd
	.value	0x16b
	.long	0x2d
	.value	0x178
	.uleb128 0x25
	.long	.LASF827
	.byte	0xd
	.value	0x16d
	.long	0x328
	.value	0x180
	.uleb128 0x25
	.long	.LASF828
	.byte	0xd
	.value	0x170
	.long	0x328
	.value	0x184
	.uleb128 0x25
	.long	.LASF829
	.byte	0xd
	.value	0x175
	.long	0x2a76
	.value	0x188
	.uleb128 0x25
	.long	.LASF830
	.byte	0xd
	.value	0x177
	.long	0x328
	.value	0x190
	.uleb128 0x25
	.long	.LASF831
	.byte	0xd
	.value	0x179
	.long	0x328
	.value	0x194
	.uleb128 0x25
	.long	.LASF832
	.byte	0xd
	.value	0x17c
	.long	0x2a81
	.value	0x198
	.uleb128 0x25
	.long	.LASF833
	.byte	0xd
	.value	0x182
	.long	0x2d
	.value	0x1a0
	.uleb128 0x26
	.long	.LASF834
	.byte	0xd
	.value	0x188
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF835
	.byte	0xd
	.value	0x18c
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF836
	.byte	0xd
	.value	0x18f
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF837
	.byte	0xd
	.value	0x192
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF838
	.byte	0xd
	.value	0x195
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF839
	.byte	0xd
	.value	0x198
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF840
	.byte	0xd
	.value	0x19c
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF841
	.byte	0xd
	.value	0x19f
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF842
	.byte	0xd
	.value	0x1a3
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF843
	.byte	0xd
	.value	0x1a7
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF844
	.byte	0xd
	.value	0x1aa
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF845
	.byte	0xd
	.value	0x1ad
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF846
	.byte	0xd
	.value	0x1b2
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF847
	.byte	0xd
	.value	0x1b6
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF848
	.byte	0xd
	.value	0x1b9
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF849
	.byte	0xd
	.value	0x1bd
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF850
	.byte	0xd
	.value	0x1c1
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF851
	.byte	0xd
	.value	0x1c5
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF852
	.byte	0xd
	.value	0x1cb
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF853
	.byte	0xd
	.value	0x1d4
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF854
	.byte	0xd
	.value	0x1d7
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF855
	.byte	0xd
	.value	0x1da
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF856
	.byte	0xd
	.value	0x1dd
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF857
	.byte	0xd
	.value	0x1e0
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.value	0x1a8
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1e9d
	.uleb128 0x13
	.long	.LASF858
	.byte	0xd0
	.byte	0x4
	.value	0x6dc
	.long	0x26a7
	.uleb128 0x14
	.long	.LASF16
	.byte	0x4
	.value	0x6de
	.long	0x1729
	.byte	0
	.uleb128 0x14
	.long	.LASF859
	.byte	0x4
	.value	0x6df
	.long	0x6f4
	.byte	0x18
	.uleb128 0x14
	.long	.LASF860
	.byte	0x4
	.value	0x6e0
	.long	0x328
	.byte	0x20
	.uleb128 0x21
	.string	"uid"
	.byte	0x4
	.value	0x6e1
	.long	0x49d
	.byte	0x24
	.uleb128 0x14
	.long	.LASF348
	.byte	0x4
	.value	0x6e2
	.long	0x123
	.byte	0x28
	.uleb128 0x22
	.long	.LASF1
	.byte	0x4
	.value	0x6e3
	.long	0x49d
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x30
	.uleb128 0x22
	.long	.LASF861
	.byte	0x4
	.value	0x6e5
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x30
	.uleb128 0x22
	.long	.LASF862
	.byte	0x4
	.value	0x6e6
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x30
	.uleb128 0x22
	.long	.LASF863
	.byte	0x4
	.value	0x6e7
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x30
	.uleb128 0x22
	.long	.LASF864
	.byte	0x4
	.value	0x6e8
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x30
	.uleb128 0x22
	.long	.LASF865
	.byte	0x4
	.value	0x6e9
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x30
	.uleb128 0x22
	.long	.LASF866
	.byte	0x4
	.value	0x6ea
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x30
	.uleb128 0x22
	.long	.LASF867
	.byte	0x4
	.value	0x6eb
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x30
	.uleb128 0x22
	.long	.LASF745
	.byte	0x4
	.value	0x6ec
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x30
	.uleb128 0x22
	.long	.LASF868
	.byte	0x4
	.value	0x6ee
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x30
	.uleb128 0x22
	.long	.LASF869
	.byte	0x4
	.value	0x6ef
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x30
	.uleb128 0x22
	.long	.LASF870
	.byte	0x4
	.value	0x6f0
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x30
	.uleb128 0x22
	.long	.LASF871
	.byte	0x4
	.value	0x6f1
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x30
	.uleb128 0x22
	.long	.LASF872
	.byte	0x4
	.value	0x6f2
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x30
	.uleb128 0x22
	.long	.LASF873
	.byte	0x4
	.value	0x6f3
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x30
	.uleb128 0x22
	.long	.LASF874
	.byte	0x4
	.value	0x6f4
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x30
	.uleb128 0x22
	.long	.LASF875
	.byte	0x4
	.value	0x6f5
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x30
	.uleb128 0x22
	.long	.LASF876
	.byte	0x4
	.value	0x6f7
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x30
	.uleb128 0x22
	.long	.LASF877
	.byte	0x4
	.value	0x6f8
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x30
	.uleb128 0x22
	.long	.LASF878
	.byte	0x4
	.value	0x6f9
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x30
	.uleb128 0x22
	.long	.LASF879
	.byte	0x4
	.value	0x6fa
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x30
	.uleb128 0x22
	.long	.LASF880
	.byte	0x4
	.value	0x6fb
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x30
	.uleb128 0x22
	.long	.LASF594
	.byte	0x4
	.value	0x6fc
	.long	0x49d
	.byte	0x4
	.byte	0x2
	.byte	0x1
	.byte	0x30
	.uleb128 0x22
	.long	.LASF881
	.byte	0x4
	.value	0x6fd
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x30
	.uleb128 0x22
	.long	.LASF765
	.byte	0x4
	.value	0x6ff
	.long	0x49d
	.byte	0x4
	.byte	0x2
	.byte	0x1e
	.byte	0x34
	.uleb128 0x22
	.long	.LASF882
	.byte	0x4
	.value	0x700
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x34
	.uleb128 0x22
	.long	.LASF766
	.byte	0x4
	.value	0x701
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x34
	.uleb128 0x22
	.long	.LASF883
	.byte	0x4
	.value	0x702
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x34
	.uleb128 0x22
	.long	.LASF714
	.byte	0x4
	.value	0x705
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.byte	0x34
	.uleb128 0x22
	.long	.LASF715
	.byte	0x4
	.value	0x706
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.byte	0x34
	.uleb128 0x22
	.long	.LASF716
	.byte	0x4
	.value	0x707
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x34
	.uleb128 0x22
	.long	.LASF717
	.byte	0x4
	.value	0x708
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x34
	.uleb128 0x22
	.long	.LASF718
	.byte	0x4
	.value	0x709
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x34
	.uleb128 0x22
	.long	.LASF719
	.byte	0x4
	.value	0x70a
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x34
	.uleb128 0x22
	.long	.LASF720
	.byte	0x4
	.value	0x70b
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x34
	.uleb128 0x22
	.long	.LASF884
	.byte	0x4
	.value	0x70c
	.long	0x49d
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x34
	.uleb128 0x21
	.string	"u1"
	.byte	0x4
	.value	0x718
	.long	0x1e43
	.byte	0x38
	.uleb128 0x14
	.long	.LASF756
	.byte	0x4
	.value	0x71a
	.long	0x123
	.byte	0x40
	.uleb128 0x14
	.long	.LASF770
	.byte	0x4
	.value	0x71b
	.long	0x123
	.byte	0x48
	.uleb128 0x14
	.long	.LASF776
	.byte	0x4
	.value	0x71c
	.long	0x123
	.byte	0x50
	.uleb128 0x14
	.long	.LASF885
	.byte	0x4
	.value	0x71d
	.long	0x123
	.byte	0x58
	.uleb128 0x14
	.long	.LASF886
	.byte	0x4
	.value	0x71e
	.long	0x123
	.byte	0x60
	.uleb128 0x14
	.long	.LASF887
	.byte	0x4
	.value	0x71f
	.long	0x123
	.byte	0x68
	.uleb128 0x14
	.long	.LASF750
	.byte	0x4
	.value	0x720
	.long	0x123
	.byte	0x70
	.uleb128 0x14
	.long	.LASF888
	.byte	0x4
	.value	0x721
	.long	0x123
	.byte	0x78
	.uleb128 0x14
	.long	.LASF889
	.byte	0x4
	.value	0x722
	.long	0x123
	.byte	0x80
	.uleb128 0x14
	.long	.LASF757
	.byte	0x4
	.value	0x723
	.long	0x123
	.byte	0x88
	.uleb128 0x21
	.string	"rtl"
	.byte	0x4
	.value	0x724
	.long	0x2d
	.byte	0x90
	.uleb128 0x14
	.long	.LASF890
	.byte	0x4
	.value	0x725
	.long	0x2d
	.byte	0x98
	.uleb128 0x21
	.string	"u2"
	.byte	0x4
	.value	0x731
	.long	0x1e6b
	.byte	0xa0
	.uleb128 0x14
	.long	.LASF891
	.byte	0x4
	.value	0x734
	.long	0x123
	.byte	0xa8
	.uleb128 0x14
	.long	.LASF892
	.byte	0x4
	.value	0x738
	.long	0x123
	.byte	0xb0
	.uleb128 0x14
	.long	.LASF893
	.byte	0x4
	.value	0x73a
	.long	0x123
	.byte	0xb8
	.uleb128 0x14
	.long	.LASF894
	.byte	0x4
	.value	0x73b
	.long	0x4a6
	.byte	0xc0
	.uleb128 0x14
	.long	.LASF778
	.byte	0x4
	.value	0x73d
	.long	0x26ac
	.byte	0xc8
	.byte	0
	.uleb128 0x1f
	.long	.LASF895
	.uleb128 0x3
	.byte	0x8
	.long	0x26a7
	.uleb128 0x11
	.long	.LASF896
	.byte	0x4
	.byte	0x4
	.value	0x757
	.long	0x27f8
	.uleb128 0x12
	.long	.LASF897
	.sleb128 0
	.uleb128 0x12
	.long	.LASF898
	.sleb128 1
	.uleb128 0x12
	.long	.LASF899
	.sleb128 2
	.uleb128 0x12
	.long	.LASF900
	.sleb128 3
	.uleb128 0x12
	.long	.LASF901
	.sleb128 4
	.uleb128 0x12
	.long	.LASF902
	.sleb128 5
	.uleb128 0x12
	.long	.LASF903
	.sleb128 6
	.uleb128 0x12
	.long	.LASF904
	.sleb128 7
	.uleb128 0x12
	.long	.LASF905
	.sleb128 8
	.uleb128 0x12
	.long	.LASF906
	.sleb128 9
	.uleb128 0x12
	.long	.LASF907
	.sleb128 10
	.uleb128 0x12
	.long	.LASF908
	.sleb128 11
	.uleb128 0x12
	.long	.LASF909
	.sleb128 12
	.uleb128 0x12
	.long	.LASF910
	.sleb128 13
	.uleb128 0x12
	.long	.LASF911
	.sleb128 14
	.uleb128 0x12
	.long	.LASF912
	.sleb128 15
	.uleb128 0x12
	.long	.LASF913
	.sleb128 16
	.uleb128 0x12
	.long	.LASF914
	.sleb128 17
	.uleb128 0x12
	.long	.LASF915
	.sleb128 18
	.uleb128 0x12
	.long	.LASF916
	.sleb128 19
	.uleb128 0x12
	.long	.LASF917
	.sleb128 20
	.uleb128 0x12
	.long	.LASF918
	.sleb128 21
	.uleb128 0x12
	.long	.LASF919
	.sleb128 22
	.uleb128 0x12
	.long	.LASF920
	.sleb128 23
	.uleb128 0x12
	.long	.LASF921
	.sleb128 24
	.uleb128 0x12
	.long	.LASF922
	.sleb128 25
	.uleb128 0x12
	.long	.LASF923
	.sleb128 26
	.uleb128 0x12
	.long	.LASF924
	.sleb128 27
	.uleb128 0x12
	.long	.LASF925
	.sleb128 28
	.uleb128 0x12
	.long	.LASF926
	.sleb128 29
	.uleb128 0x12
	.long	.LASF927
	.sleb128 30
	.uleb128 0x12
	.long	.LASF928
	.sleb128 31
	.uleb128 0x12
	.long	.LASF929
	.sleb128 32
	.uleb128 0x12
	.long	.LASF930
	.sleb128 33
	.uleb128 0x12
	.long	.LASF931
	.sleb128 34
	.uleb128 0x12
	.long	.LASF932
	.sleb128 35
	.uleb128 0x12
	.long	.LASF933
	.sleb128 36
	.uleb128 0x12
	.long	.LASF934
	.sleb128 37
	.uleb128 0x12
	.long	.LASF935
	.sleb128 38
	.uleb128 0x12
	.long	.LASF936
	.sleb128 39
	.uleb128 0x12
	.long	.LASF937
	.sleb128 40
	.uleb128 0x12
	.long	.LASF938
	.sleb128 41
	.uleb128 0x12
	.long	.LASF939
	.sleb128 42
	.uleb128 0x12
	.long	.LASF940
	.sleb128 43
	.uleb128 0x12
	.long	.LASF941
	.sleb128 44
	.uleb128 0x12
	.long	.LASF942
	.sleb128 45
	.uleb128 0x12
	.long	.LASF943
	.sleb128 46
	.uleb128 0x12
	.long	.LASF944
	.sleb128 47
	.uleb128 0x12
	.long	.LASF945
	.sleb128 48
	.uleb128 0x12
	.long	.LASF946
	.sleb128 49
	.uleb128 0x12
	.long	.LASF947
	.sleb128 50
	.uleb128 0x12
	.long	.LASF948
	.sleb128 51
	.byte	0
	.uleb128 0x11
	.long	.LASF949
	.byte	0x4
	.byte	0x4
	.value	0x7e4
	.long	0x284e
	.uleb128 0x12
	.long	.LASF950
	.sleb128 0
	.uleb128 0x12
	.long	.LASF951
	.sleb128 1
	.uleb128 0x12
	.long	.LASF952
	.sleb128 2
	.uleb128 0x12
	.long	.LASF953
	.sleb128 3
	.uleb128 0x12
	.long	.LASF954
	.sleb128 4
	.uleb128 0x12
	.long	.LASF955
	.sleb128 5
	.uleb128 0x12
	.long	.LASF956
	.sleb128 6
	.uleb128 0x12
	.long	.LASF957
	.sleb128 7
	.uleb128 0x12
	.long	.LASF958
	.sleb128 8
	.uleb128 0x12
	.long	.LASF959
	.sleb128 9
	.uleb128 0x12
	.long	.LASF960
	.sleb128 10
	.uleb128 0x12
	.long	.LASF961
	.sleb128 11
	.byte	0
	.uleb128 0xc
	.long	0x6f4
	.uleb128 0x10
	.byte	0x1
	.byte	0x2
	.long	.LASF962
	.uleb128 0x3
	.byte	0x8
	.long	0x123
	.uleb128 0x11
	.long	.LASF963
	.byte	0x4
	.byte	0x4
	.value	0x972
	.long	0x2898
	.uleb128 0x12
	.long	.LASF964
	.sleb128 0
	.uleb128 0x12
	.long	.LASF965
	.sleb128 1
	.uleb128 0x12
	.long	.LASF966
	.sleb128 2
	.uleb128 0x12
	.long	.LASF967
	.sleb128 3
	.uleb128 0x12
	.long	.LASF968
	.sleb128 4
	.uleb128 0x12
	.long	.LASF969
	.sleb128 5
	.uleb128 0x12
	.long	.LASF970
	.sleb128 6
	.byte	0
	.uleb128 0x4
	.long	.LASF971
	.byte	0x18
	.byte	0xd
	.byte	0x16
	.long	0x28d5
	.uleb128 0x8
	.long	.LASF972
	.byte	0xd
	.byte	0x18
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF973
	.byte	0xd
	.byte	0x19
	.long	0x72a
	.byte	0x8
	.uleb128 0x8
	.long	.LASF974
	.byte	0xd
	.byte	0x1a
	.long	0x328
	.byte	0xc
	.uleb128 0x8
	.long	.LASF975
	.byte	0xd
	.byte	0x1b
	.long	0x28d5
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2898
	.uleb128 0x4
	.long	.LASF976
	.byte	0x20
	.byte	0xd
	.byte	0x23
	.long	0x2918
	.uleb128 0x8
	.long	.LASF977
	.byte	0xd
	.byte	0x26
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF978
	.byte	0xd
	.byte	0x26
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF979
	.byte	0xd
	.byte	0x27
	.long	0x123
	.byte	0x10
	.uleb128 0x8
	.long	.LASF975
	.byte	0xd
	.byte	0x28
	.long	0x2918
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x28db
	.uleb128 0x4
	.long	.LASF980
	.byte	0x58
	.byte	0xd
	.byte	0x35
	.long	0x29c7
	.uleb128 0x8
	.long	.LASF981
	.byte	0xd
	.byte	0x39
	.long	0x328
	.byte	0
	.uleb128 0x8
	.long	.LASF982
	.byte	0xd
	.byte	0x3c
	.long	0x328
	.byte	0x4
	.uleb128 0x8
	.long	.LASF983
	.byte	0xd
	.byte	0x43
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF984
	.byte	0xd
	.byte	0x44
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF979
	.byte	0xd
	.byte	0x49
	.long	0x123
	.byte	0x18
	.uleb128 0x8
	.long	.LASF976
	.byte	0xd
	.byte	0x4f
	.long	0x2918
	.byte	0x20
	.uleb128 0x8
	.long	.LASF985
	.byte	0xd
	.byte	0x53
	.long	0x328
	.byte	0x28
	.uleb128 0x8
	.long	.LASF986
	.byte	0xd
	.byte	0x57
	.long	0x328
	.byte	0x2c
	.uleb128 0x8
	.long	.LASF987
	.byte	0xd
	.byte	0x58
	.long	0x6f4
	.byte	0x30
	.uleb128 0x8
	.long	.LASF988
	.byte	0xd
	.byte	0x5e
	.long	0x328
	.byte	0x38
	.uleb128 0x8
	.long	.LASF989
	.byte	0xd
	.byte	0x63
	.long	0x29c7
	.byte	0x40
	.uleb128 0x8
	.long	.LASF990
	.byte	0xd
	.byte	0x67
	.long	0x285a
	.byte	0x48
	.uleb128 0x8
	.long	.LASF991
	.byte	0xd
	.byte	0x6b
	.long	0x101e
	.byte	0x50
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4bf
	.uleb128 0x4
	.long	.LASF992
	.byte	0x30
	.byte	0xd
	.byte	0x77
	.long	0x2a2e
	.uleb128 0x8
	.long	.LASF993
	.byte	0xd
	.byte	0x7b
	.long	0x328
	.byte	0
	.uleb128 0x8
	.long	.LASF994
	.byte	0xd
	.byte	0x8c
	.long	0x328
	.byte	0x4
	.uleb128 0x8
	.long	.LASF995
	.byte	0xd
	.byte	0x92
	.long	0x328
	.byte	0x8
	.uleb128 0x8
	.long	.LASF996
	.byte	0xd
	.byte	0x97
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF997
	.byte	0xd
	.byte	0x9a
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF998
	.byte	0xd
	.byte	0x9d
	.long	0x2d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF999
	.byte	0xd
	.byte	0xa0
	.long	0x2d
	.byte	0x28
	.byte	0
	.uleb128 0x1f
	.long	.LASF1000
	.uleb128 0x3
	.byte	0x8
	.long	0x2a2e
	.uleb128 0x1f
	.long	.LASF1001
	.uleb128 0x3
	.byte	0x8
	.long	0x2a39
	.uleb128 0x3
	.byte	0x8
	.long	0x29cd
	.uleb128 0x3
	.byte	0x8
	.long	0x291e
	.uleb128 0x1f
	.long	.LASF1002
	.uleb128 0x3
	.byte	0x8
	.long	0x2a50
	.uleb128 0x1f
	.long	.LASF1003
	.uleb128 0x3
	.byte	0x8
	.long	0x2a5b
	.uleb128 0x1f
	.long	.LASF1004
	.uleb128 0x3
	.byte	0x8
	.long	0x2a66
	.uleb128 0x1f
	.long	.LASF1005
	.uleb128 0x3
	.byte	0x8
	.long	0x2a71
	.uleb128 0x1f
	.long	.LASF1006
	.uleb128 0x3
	.byte	0x8
	.long	0x2a7c
	.uleb128 0x19
	.long	.LASF1007
	.byte	0x4
	.byte	0xe
	.byte	0x34
	.long	0x2ab2
	.uleb128 0x12
	.long	.LASF1008
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1009
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1010
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1011
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1012
	.sleb128 4
	.byte	0
	.uleb128 0x19
	.long	.LASF1013
	.byte	0x4
	.byte	0xe
	.byte	0x77
	.long	0x2ad1
	.uleb128 0x12
	.long	.LASF1014
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1015
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1016
	.sleb128 2
	.byte	0
	.uleb128 0x11
	.long	.LASF1017
	.byte	0x4
	.byte	0xe
	.value	0x100
	.long	0x2afd
	.uleb128 0x12
	.long	.LASF1018
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1019
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1020
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1021
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1022
	.sleb128 4
	.byte	0
	.uleb128 0x19
	.long	.LASF1023
	.byte	0x4
	.byte	0xf
	.byte	0x7
	.long	0x39ea
	.uleb128 0x12
	.long	.LASF1024
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1025
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1026
	.sleb128 15
	.uleb128 0x12
	.long	.LASF1027
	.sleb128 16
	.uleb128 0x12
	.long	.LASF1028
	.sleb128 30
	.uleb128 0x12
	.long	.LASF1029
	.sleb128 31
	.uleb128 0x12
	.long	.LASF1030
	.sleb128 42
	.uleb128 0x12
	.long	.LASF1031
	.sleb128 73
	.uleb128 0x12
	.long	.LASF1032
	.sleb128 77
	.uleb128 0x12
	.long	.LASF1033
	.sleb128 80
	.uleb128 0x12
	.long	.LASF1034
	.sleb128 105
	.uleb128 0x12
	.long	.LASF1035
	.sleb128 106
	.uleb128 0x12
	.long	.LASF1036
	.sleb128 107
	.uleb128 0x12
	.long	.LASF1037
	.sleb128 115
	.uleb128 0x12
	.long	.LASF1038
	.sleb128 116
	.uleb128 0x12
	.long	.LASF1039
	.sleb128 117
	.uleb128 0x12
	.long	.LASF1040
	.sleb128 118
	.uleb128 0x12
	.long	.LASF1041
	.sleb128 120
	.uleb128 0x12
	.long	.LASF1042
	.sleb128 121
	.uleb128 0x12
	.long	.LASF1043
	.sleb128 122
	.uleb128 0x12
	.long	.LASF1044
	.sleb128 123
	.uleb128 0x12
	.long	.LASF1045
	.sleb128 125
	.uleb128 0x12
	.long	.LASF1046
	.sleb128 126
	.uleb128 0x12
	.long	.LASF1047
	.sleb128 142
	.uleb128 0x12
	.long	.LASF1048
	.sleb128 143
	.uleb128 0x12
	.long	.LASF1049
	.sleb128 153
	.uleb128 0x12
	.long	.LASF1050
	.sleb128 154
	.uleb128 0x12
	.long	.LASF1051
	.sleb128 155
	.uleb128 0x12
	.long	.LASF1052
	.sleb128 156
	.uleb128 0x12
	.long	.LASF1053
	.sleb128 158
	.uleb128 0x12
	.long	.LASF1054
	.sleb128 159
	.uleb128 0x12
	.long	.LASF1055
	.sleb128 160
	.uleb128 0x12
	.long	.LASF1056
	.sleb128 161
	.uleb128 0x12
	.long	.LASF1057
	.sleb128 163
	.uleb128 0x12
	.long	.LASF1058
	.sleb128 164
	.uleb128 0x12
	.long	.LASF1059
	.sleb128 165
	.uleb128 0x12
	.long	.LASF1060
	.sleb128 166
	.uleb128 0x12
	.long	.LASF1061
	.sleb128 167
	.uleb128 0x12
	.long	.LASF1062
	.sleb128 173
	.uleb128 0x12
	.long	.LASF1063
	.sleb128 179
	.uleb128 0x12
	.long	.LASF1064
	.sleb128 180
	.uleb128 0x12
	.long	.LASF1065
	.sleb128 181
	.uleb128 0x12
	.long	.LASF1066
	.sleb128 182
	.uleb128 0x12
	.long	.LASF1067
	.sleb128 183
	.uleb128 0x12
	.long	.LASF1068
	.sleb128 184
	.uleb128 0x12
	.long	.LASF1069
	.sleb128 191
	.uleb128 0x12
	.long	.LASF1070
	.sleb128 208
	.uleb128 0x12
	.long	.LASF1071
	.sleb128 227
	.uleb128 0x12
	.long	.LASF1072
	.sleb128 231
	.uleb128 0x12
	.long	.LASF1073
	.sleb128 235
	.uleb128 0x12
	.long	.LASF1074
	.sleb128 236
	.uleb128 0x12
	.long	.LASF1075
	.sleb128 266
	.uleb128 0x12
	.long	.LASF1076
	.sleb128 267
	.uleb128 0x12
	.long	.LASF1077
	.sleb128 274
	.uleb128 0x12
	.long	.LASF1078
	.sleb128 275
	.uleb128 0x12
	.long	.LASF1079
	.sleb128 277
	.uleb128 0x12
	.long	.LASF1080
	.sleb128 281
	.uleb128 0x12
	.long	.LASF1081
	.sleb128 302
	.uleb128 0x12
	.long	.LASF1082
	.sleb128 355
	.uleb128 0x12
	.long	.LASF1083
	.sleb128 356
	.uleb128 0x12
	.long	.LASF1084
	.sleb128 358
	.uleb128 0x12
	.long	.LASF1085
	.sleb128 359
	.uleb128 0x12
	.long	.LASF1086
	.sleb128 374
	.uleb128 0x12
	.long	.LASF1087
	.sleb128 375
	.uleb128 0x12
	.long	.LASF1088
	.sleb128 377
	.uleb128 0x12
	.long	.LASF1089
	.sleb128 378
	.uleb128 0x12
	.long	.LASF1090
	.sleb128 405
	.uleb128 0x12
	.long	.LASF1091
	.sleb128 407
	.uleb128 0x12
	.long	.LASF1092
	.sleb128 418
	.uleb128 0x12
	.long	.LASF1093
	.sleb128 423
	.uleb128 0x12
	.long	.LASF1094
	.sleb128 425
	.uleb128 0x12
	.long	.LASF1095
	.sleb128 426
	.uleb128 0x12
	.long	.LASF1096
	.sleb128 448
	.uleb128 0x12
	.long	.LASF1097
	.sleb128 487
	.uleb128 0x12
	.long	.LASF1098
	.sleb128 502
	.uleb128 0x12
	.long	.LASF1099
	.sleb128 507
	.uleb128 0x12
	.long	.LASF1100
	.sleb128 513
	.uleb128 0x12
	.long	.LASF1101
	.sleb128 514
	.uleb128 0x12
	.long	.LASF1102
	.sleb128 515
	.uleb128 0x12
	.long	.LASF1103
	.sleb128 516
	.uleb128 0x12
	.long	.LASF1104
	.sleb128 517
	.uleb128 0x12
	.long	.LASF1105
	.sleb128 518
	.uleb128 0x12
	.long	.LASF1106
	.sleb128 519
	.uleb128 0x12
	.long	.LASF1107
	.sleb128 520
	.uleb128 0x12
	.long	.LASF1108
	.sleb128 521
	.uleb128 0x12
	.long	.LASF1109
	.sleb128 522
	.uleb128 0x12
	.long	.LASF1110
	.sleb128 523
	.uleb128 0x12
	.long	.LASF1111
	.sleb128 524
	.uleb128 0x12
	.long	.LASF1112
	.sleb128 559
	.uleb128 0x12
	.long	.LASF1113
	.sleb128 560
	.uleb128 0x12
	.long	.LASF1114
	.sleb128 561
	.uleb128 0x12
	.long	.LASF1115
	.sleb128 562
	.uleb128 0x12
	.long	.LASF1116
	.sleb128 563
	.uleb128 0x12
	.long	.LASF1117
	.sleb128 564
	.uleb128 0x12
	.long	.LASF1118
	.sleb128 566
	.uleb128 0x12
	.long	.LASF1119
	.sleb128 567
	.uleb128 0x12
	.long	.LASF1120
	.sleb128 572
	.uleb128 0x12
	.long	.LASF1121
	.sleb128 573
	.uleb128 0x12
	.long	.LASF1122
	.sleb128 575
	.uleb128 0x12
	.long	.LASF1123
	.sleb128 576
	.uleb128 0x12
	.long	.LASF1124
	.sleb128 577
	.uleb128 0x12
	.long	.LASF1125
	.sleb128 578
	.uleb128 0x12
	.long	.LASF1126
	.sleb128 580
	.uleb128 0x12
	.long	.LASF1127
	.sleb128 581
	.uleb128 0x12
	.long	.LASF1128
	.sleb128 582
	.uleb128 0x12
	.long	.LASF1129
	.sleb128 583
	.uleb128 0x12
	.long	.LASF1130
	.sleb128 584
	.uleb128 0x12
	.long	.LASF1131
	.sleb128 585
	.uleb128 0x12
	.long	.LASF1132
	.sleb128 586
	.uleb128 0x12
	.long	.LASF1133
	.sleb128 587
	.uleb128 0x12
	.long	.LASF1134
	.sleb128 588
	.uleb128 0x12
	.long	.LASF1135
	.sleb128 589
	.uleb128 0x12
	.long	.LASF1136
	.sleb128 590
	.uleb128 0x12
	.long	.LASF1137
	.sleb128 591
	.uleb128 0x12
	.long	.LASF1138
	.sleb128 592
	.uleb128 0x12
	.long	.LASF1139
	.sleb128 593
	.uleb128 0x12
	.long	.LASF1140
	.sleb128 594
	.uleb128 0x12
	.long	.LASF1141
	.sleb128 595
	.uleb128 0x12
	.long	.LASF1142
	.sleb128 596
	.uleb128 0x12
	.long	.LASF1143
	.sleb128 597
	.uleb128 0x12
	.long	.LASF1144
	.sleb128 598
	.uleb128 0x12
	.long	.LASF1145
	.sleb128 599
	.uleb128 0x12
	.long	.LASF1146
	.sleb128 600
	.uleb128 0x12
	.long	.LASF1147
	.sleb128 601
	.uleb128 0x12
	.long	.LASF1148
	.sleb128 602
	.uleb128 0x12
	.long	.LASF1149
	.sleb128 603
	.uleb128 0x12
	.long	.LASF1150
	.sleb128 604
	.uleb128 0x12
	.long	.LASF1151
	.sleb128 605
	.uleb128 0x12
	.long	.LASF1152
	.sleb128 606
	.uleb128 0x12
	.long	.LASF1153
	.sleb128 607
	.uleb128 0x12
	.long	.LASF1154
	.sleb128 608
	.uleb128 0x12
	.long	.LASF1155
	.sleb128 609
	.uleb128 0x12
	.long	.LASF1156
	.sleb128 610
	.uleb128 0x12
	.long	.LASF1157
	.sleb128 611
	.uleb128 0x12
	.long	.LASF1158
	.sleb128 612
	.uleb128 0x12
	.long	.LASF1159
	.sleb128 613
	.uleb128 0x12
	.long	.LASF1160
	.sleb128 615
	.uleb128 0x12
	.long	.LASF1161
	.sleb128 636
	.uleb128 0x12
	.long	.LASF1162
	.sleb128 637
	.uleb128 0x12
	.long	.LASF1163
	.sleb128 638
	.uleb128 0x12
	.long	.LASF1164
	.sleb128 639
	.uleb128 0x12
	.long	.LASF1165
	.sleb128 640
	.uleb128 0x12
	.long	.LASF1166
	.sleb128 649
	.uleb128 0x12
	.long	.LASF1167
	.sleb128 650
	.uleb128 0x12
	.long	.LASF1168
	.sleb128 657
	.uleb128 0x12
	.long	.LASF1169
	.sleb128 659
	.uleb128 0x12
	.long	.LASF1170
	.sleb128 660
	.uleb128 0x12
	.long	.LASF1171
	.sleb128 661
	.uleb128 0x12
	.long	.LASF1172
	.sleb128 662
	.uleb128 0x12
	.long	.LASF1173
	.sleb128 663
	.uleb128 0x12
	.long	.LASF1174
	.sleb128 664
	.uleb128 0x12
	.long	.LASF1175
	.sleb128 672
	.uleb128 0x12
	.long	.LASF1176
	.sleb128 674
	.uleb128 0x12
	.long	.LASF1177
	.sleb128 675
	.uleb128 0x12
	.long	.LASF1178
	.sleb128 676
	.uleb128 0x12
	.long	.LASF1179
	.sleb128 677
	.uleb128 0x12
	.long	.LASF1180
	.sleb128 678
	.uleb128 0x12
	.long	.LASF1181
	.sleb128 679
	.uleb128 0x12
	.long	.LASF1182
	.sleb128 680
	.uleb128 0x12
	.long	.LASF1183
	.sleb128 681
	.uleb128 0x12
	.long	.LASF1184
	.sleb128 682
	.uleb128 0x12
	.long	.LASF1185
	.sleb128 683
	.uleb128 0x12
	.long	.LASF1186
	.sleb128 684
	.uleb128 0x12
	.long	.LASF1187
	.sleb128 685
	.uleb128 0x12
	.long	.LASF1188
	.sleb128 686
	.uleb128 0x12
	.long	.LASF1189
	.sleb128 687
	.uleb128 0x12
	.long	.LASF1190
	.sleb128 688
	.uleb128 0x12
	.long	.LASF1191
	.sleb128 689
	.uleb128 0x12
	.long	.LASF1192
	.sleb128 690
	.uleb128 0x12
	.long	.LASF1193
	.sleb128 691
	.uleb128 0x12
	.long	.LASF1194
	.sleb128 692
	.uleb128 0x12
	.long	.LASF1195
	.sleb128 693
	.uleb128 0x12
	.long	.LASF1196
	.sleb128 694
	.uleb128 0x12
	.long	.LASF1197
	.sleb128 695
	.uleb128 0x12
	.long	.LASF1198
	.sleb128 696
	.uleb128 0x12
	.long	.LASF1199
	.sleb128 697
	.uleb128 0x12
	.long	.LASF1200
	.sleb128 698
	.uleb128 0x12
	.long	.LASF1201
	.sleb128 699
	.uleb128 0x12
	.long	.LASF1202
	.sleb128 700
	.uleb128 0x12
	.long	.LASF1203
	.sleb128 701
	.uleb128 0x12
	.long	.LASF1204
	.sleb128 702
	.uleb128 0x12
	.long	.LASF1205
	.sleb128 703
	.uleb128 0x12
	.long	.LASF1206
	.sleb128 708
	.uleb128 0x12
	.long	.LASF1207
	.sleb128 712
	.uleb128 0x12
	.long	.LASF1208
	.sleb128 718
	.uleb128 0x12
	.long	.LASF1209
	.sleb128 724
	.uleb128 0x12
	.long	.LASF1210
	.sleb128 726
	.uleb128 0x12
	.long	.LASF1211
	.sleb128 727
	.uleb128 0x12
	.long	.LASF1212
	.sleb128 728
	.uleb128 0x12
	.long	.LASF1213
	.sleb128 729
	.uleb128 0x12
	.long	.LASF1214
	.sleb128 730
	.uleb128 0x12
	.long	.LASF1215
	.sleb128 731
	.uleb128 0x12
	.long	.LASF1216
	.sleb128 732
	.uleb128 0x12
	.long	.LASF1217
	.sleb128 733
	.uleb128 0x12
	.long	.LASF1218
	.sleb128 734
	.uleb128 0x12
	.long	.LASF1219
	.sleb128 735
	.uleb128 0x12
	.long	.LASF1220
	.sleb128 736
	.uleb128 0x12
	.long	.LASF1221
	.sleb128 737
	.uleb128 0x12
	.long	.LASF1222
	.sleb128 738
	.uleb128 0x12
	.long	.LASF1223
	.sleb128 739
	.uleb128 0x12
	.long	.LASF1224
	.sleb128 740
	.uleb128 0x12
	.long	.LASF1225
	.sleb128 741
	.uleb128 0x12
	.long	.LASF1226
	.sleb128 742
	.uleb128 0x12
	.long	.LASF1227
	.sleb128 743
	.uleb128 0x12
	.long	.LASF1228
	.sleb128 744
	.uleb128 0x12
	.long	.LASF1229
	.sleb128 745
	.uleb128 0x12
	.long	.LASF1230
	.sleb128 746
	.uleb128 0x12
	.long	.LASF1231
	.sleb128 747
	.uleb128 0x12
	.long	.LASF1232
	.sleb128 748
	.uleb128 0x12
	.long	.LASF1233
	.sleb128 749
	.uleb128 0x12
	.long	.LASF1234
	.sleb128 750
	.uleb128 0x12
	.long	.LASF1235
	.sleb128 751
	.uleb128 0x12
	.long	.LASF1236
	.sleb128 752
	.uleb128 0x12
	.long	.LASF1237
	.sleb128 753
	.uleb128 0x12
	.long	.LASF1238
	.sleb128 754
	.uleb128 0x12
	.long	.LASF1239
	.sleb128 755
	.uleb128 0x12
	.long	.LASF1240
	.sleb128 756
	.uleb128 0x12
	.long	.LASF1241
	.sleb128 757
	.uleb128 0x12
	.long	.LASF1242
	.sleb128 758
	.uleb128 0x12
	.long	.LASF1243
	.sleb128 759
	.uleb128 0x12
	.long	.LASF1244
	.sleb128 760
	.uleb128 0x12
	.long	.LASF1245
	.sleb128 761
	.uleb128 0x12
	.long	.LASF1246
	.sleb128 762
	.uleb128 0x12
	.long	.LASF1247
	.sleb128 763
	.uleb128 0x12
	.long	.LASF1248
	.sleb128 764
	.uleb128 0x12
	.long	.LASF1249
	.sleb128 765
	.uleb128 0x12
	.long	.LASF1250
	.sleb128 766
	.uleb128 0x12
	.long	.LASF1251
	.sleb128 767
	.uleb128 0x12
	.long	.LASF1252
	.sleb128 768
	.uleb128 0x12
	.long	.LASF1253
	.sleb128 769
	.uleb128 0x12
	.long	.LASF1254
	.sleb128 770
	.uleb128 0x12
	.long	.LASF1255
	.sleb128 771
	.uleb128 0x12
	.long	.LASF1256
	.sleb128 772
	.uleb128 0x12
	.long	.LASF1257
	.sleb128 773
	.uleb128 0x12
	.long	.LASF1258
	.sleb128 774
	.uleb128 0x12
	.long	.LASF1259
	.sleb128 775
	.uleb128 0x12
	.long	.LASF1260
	.sleb128 776
	.uleb128 0x12
	.long	.LASF1261
	.sleb128 777
	.uleb128 0x12
	.long	.LASF1262
	.sleb128 778
	.uleb128 0x12
	.long	.LASF1263
	.sleb128 779
	.uleb128 0x12
	.long	.LASF1264
	.sleb128 780
	.uleb128 0x12
	.long	.LASF1265
	.sleb128 781
	.uleb128 0x12
	.long	.LASF1266
	.sleb128 782
	.uleb128 0x12
	.long	.LASF1267
	.sleb128 783
	.uleb128 0x12
	.long	.LASF1268
	.sleb128 784
	.uleb128 0x12
	.long	.LASF1269
	.sleb128 785
	.uleb128 0x12
	.long	.LASF1270
	.sleb128 786
	.uleb128 0x12
	.long	.LASF1271
	.sleb128 787
	.uleb128 0x12
	.long	.LASF1272
	.sleb128 788
	.uleb128 0x12
	.long	.LASF1273
	.sleb128 789
	.uleb128 0x12
	.long	.LASF1274
	.sleb128 790
	.uleb128 0x12
	.long	.LASF1275
	.sleb128 791
	.uleb128 0x12
	.long	.LASF1276
	.sleb128 792
	.uleb128 0x12
	.long	.LASF1277
	.sleb128 793
	.uleb128 0x12
	.long	.LASF1278
	.sleb128 794
	.uleb128 0x12
	.long	.LASF1279
	.sleb128 795
	.uleb128 0x12
	.long	.LASF1280
	.sleb128 796
	.uleb128 0x12
	.long	.LASF1281
	.sleb128 797
	.uleb128 0x12
	.long	.LASF1282
	.sleb128 798
	.uleb128 0x12
	.long	.LASF1283
	.sleb128 799
	.uleb128 0x12
	.long	.LASF1284
	.sleb128 800
	.uleb128 0x12
	.long	.LASF1285
	.sleb128 801
	.uleb128 0x12
	.long	.LASF1286
	.sleb128 802
	.uleb128 0x12
	.long	.LASF1287
	.sleb128 803
	.uleb128 0x12
	.long	.LASF1288
	.sleb128 806
	.uleb128 0x12
	.long	.LASF1289
	.sleb128 807
	.uleb128 0x12
	.long	.LASF1290
	.sleb128 808
	.uleb128 0x12
	.long	.LASF1291
	.sleb128 809
	.uleb128 0x12
	.long	.LASF1292
	.sleb128 810
	.uleb128 0x12
	.long	.LASF1293
	.sleb128 811
	.uleb128 0x12
	.long	.LASF1294
	.sleb128 812
	.uleb128 0x12
	.long	.LASF1295
	.sleb128 813
	.uleb128 0x12
	.long	.LASF1296
	.sleb128 814
	.uleb128 0x12
	.long	.LASF1297
	.sleb128 815
	.uleb128 0x12
	.long	.LASF1298
	.sleb128 816
	.uleb128 0x12
	.long	.LASF1299
	.sleb128 817
	.uleb128 0x12
	.long	.LASF1300
	.sleb128 818
	.uleb128 0x12
	.long	.LASF1301
	.sleb128 819
	.uleb128 0x12
	.long	.LASF1302
	.sleb128 820
	.uleb128 0x12
	.long	.LASF1303
	.sleb128 821
	.uleb128 0x12
	.long	.LASF1304
	.sleb128 822
	.uleb128 0x12
	.long	.LASF1305
	.sleb128 823
	.uleb128 0x12
	.long	.LASF1306
	.sleb128 824
	.uleb128 0x12
	.long	.LASF1307
	.sleb128 825
	.uleb128 0x12
	.long	.LASF1308
	.sleb128 826
	.uleb128 0x12
	.long	.LASF1309
	.sleb128 827
	.uleb128 0x12
	.long	.LASF1310
	.sleb128 828
	.uleb128 0x12
	.long	.LASF1311
	.sleb128 829
	.uleb128 0x12
	.long	.LASF1312
	.sleb128 830
	.uleb128 0x12
	.long	.LASF1313
	.sleb128 831
	.uleb128 0x12
	.long	.LASF1314
	.sleb128 834
	.uleb128 0x12
	.long	.LASF1315
	.sleb128 835
	.uleb128 0x12
	.long	.LASF1316
	.sleb128 836
	.uleb128 0x12
	.long	.LASF1317
	.sleb128 837
	.uleb128 0x12
	.long	.LASF1318
	.sleb128 838
	.uleb128 0x12
	.long	.LASF1319
	.sleb128 839
	.uleb128 0x12
	.long	.LASF1320
	.sleb128 840
	.uleb128 0x12
	.long	.LASF1321
	.sleb128 841
	.uleb128 0x12
	.long	.LASF1322
	.sleb128 842
	.uleb128 0x12
	.long	.LASF1323
	.sleb128 843
	.uleb128 0x12
	.long	.LASF1324
	.sleb128 844
	.uleb128 0x12
	.long	.LASF1325
	.sleb128 846
	.uleb128 0x12
	.long	.LASF1326
	.sleb128 847
	.uleb128 0x12
	.long	.LASF1327
	.sleb128 848
	.uleb128 0x12
	.long	.LASF1328
	.sleb128 849
	.uleb128 0x12
	.long	.LASF1329
	.sleb128 850
	.uleb128 0x12
	.long	.LASF1330
	.sleb128 851
	.uleb128 0x12
	.long	.LASF1331
	.sleb128 852
	.uleb128 0x12
	.long	.LASF1332
	.sleb128 861
	.uleb128 0x12
	.long	.LASF1333
	.sleb128 865
	.uleb128 0x12
	.long	.LASF1334
	.sleb128 870
	.uleb128 0x12
	.long	.LASF1335
	.sleb128 871
	.uleb128 0x12
	.long	.LASF1336
	.sleb128 878
	.uleb128 0x12
	.long	.LASF1337
	.sleb128 880
	.uleb128 0x12
	.long	.LASF1338
	.sleb128 884
	.uleb128 0x12
	.long	.LASF1339
	.sleb128 888
	.uleb128 0x12
	.long	.LASF1340
	.sleb128 892
	.uleb128 0x12
	.long	.LASF1341
	.sleb128 904
	.uleb128 0x12
	.long	.LASF1342
	.sleb128 905
	.uleb128 0x12
	.long	.LASF1343
	.sleb128 906
	.uleb128 0x12
	.long	.LASF1344
	.sleb128 907
	.uleb128 0x12
	.long	.LASF1345
	.sleb128 908
	.uleb128 0x12
	.long	.LASF1346
	.sleb128 909
	.uleb128 0x12
	.long	.LASF1347
	.sleb128 913
	.uleb128 0x12
	.long	.LASF1348
	.sleb128 916
	.uleb128 0x12
	.long	.LASF1349
	.sleb128 919
	.uleb128 0x12
	.long	.LASF1350
	.sleb128 922
	.uleb128 0x12
	.long	.LASF1351
	.sleb128 925
	.uleb128 0x12
	.long	.LASF1352
	.sleb128 926
	.uleb128 0x12
	.long	.LASF1353
	.sleb128 927
	.uleb128 0x12
	.long	.LASF1354
	.sleb128 928
	.uleb128 0x12
	.long	.LASF1355
	.sleb128 932
	.uleb128 0x12
	.long	.LASF1356
	.sleb128 933
	.uleb128 0x12
	.long	.LASF1357
	.sleb128 934
	.uleb128 0x12
	.long	.LASF1358
	.sleb128 935
	.uleb128 0x12
	.long	.LASF1359
	.sleb128 939
	.uleb128 0x12
	.long	.LASF1360
	.sleb128 940
	.uleb128 0x12
	.long	.LASF1361
	.sleb128 941
	.uleb128 0x12
	.long	.LASF1362
	.sleb128 942
	.uleb128 0x12
	.long	.LASF1363
	.sleb128 946
	.uleb128 0x12
	.long	.LASF1364
	.sleb128 947
	.uleb128 0x12
	.long	.LASF1365
	.sleb128 948
	.uleb128 0x12
	.long	.LASF1366
	.sleb128 949
	.uleb128 0x12
	.long	.LASF1367
	.sleb128 951
	.uleb128 0x12
	.long	.LASF1368
	.sleb128 953
	.uleb128 0x12
	.long	.LASF1369
	.sleb128 963
	.uleb128 0x12
	.long	.LASF1370
	.sleb128 964
	.uleb128 0x12
	.long	.LASF1371
	.sleb128 965
	.uleb128 0x12
	.long	.LASF1372
	.sleb128 966
	.uleb128 0x12
	.long	.LASF1373
	.sleb128 967
	.uleb128 0x12
	.long	.LASF1374
	.sleb128 968
	.uleb128 0x12
	.long	.LASF1375
	.sleb128 969
	.uleb128 0x12
	.long	.LASF1376
	.sleb128 971
	.uleb128 0x12
	.long	.LASF1377
	.sleb128 972
	.uleb128 0x12
	.long	.LASF1378
	.sleb128 973
	.uleb128 0x12
	.long	.LASF1379
	.sleb128 974
	.uleb128 0x12
	.long	.LASF1380
	.sleb128 975
	.uleb128 0x12
	.long	.LASF1381
	.sleb128 976
	.uleb128 0x12
	.long	.LASF1382
	.sleb128 977
	.uleb128 0x12
	.long	.LASF1383
	.sleb128 978
	.uleb128 0x12
	.long	.LASF1384
	.sleb128 979
	.uleb128 0x12
	.long	.LASF1385
	.sleb128 980
	.uleb128 0x12
	.long	.LASF1386
	.sleb128 981
	.uleb128 0x12
	.long	.LASF1387
	.sleb128 982
	.uleb128 0x12
	.long	.LASF1388
	.sleb128 983
	.uleb128 0x12
	.long	.LASF1389
	.sleb128 984
	.uleb128 0x12
	.long	.LASF1390
	.sleb128 985
	.uleb128 0x12
	.long	.LASF1391
	.sleb128 986
	.uleb128 0x12
	.long	.LASF1392
	.sleb128 987
	.uleb128 0x12
	.long	.LASF1393
	.sleb128 988
	.uleb128 0x12
	.long	.LASF1394
	.sleb128 989
	.uleb128 0x12
	.long	.LASF1395
	.sleb128 990
	.uleb128 0x12
	.long	.LASF1396
	.sleb128 991
	.uleb128 0x12
	.long	.LASF1397
	.sleb128 992
	.uleb128 0x12
	.long	.LASF1398
	.sleb128 993
	.uleb128 0x12
	.long	.LASF1399
	.sleb128 994
	.uleb128 0x12
	.long	.LASF1400
	.sleb128 995
	.uleb128 0x12
	.long	.LASF1401
	.sleb128 996
	.uleb128 0x12
	.long	.LASF1402
	.sleb128 997
	.uleb128 0x12
	.long	.LASF1403
	.sleb128 998
	.uleb128 0x12
	.long	.LASF1404
	.sleb128 999
	.uleb128 0x12
	.long	.LASF1405
	.sleb128 1000
	.uleb128 0x12
	.long	.LASF1406
	.sleb128 1002
	.uleb128 0x12
	.long	.LASF1407
	.sleb128 1006
	.uleb128 0x12
	.long	.LASF1408
	.sleb128 1007
	.uleb128 0x12
	.long	.LASF1409
	.sleb128 1008
	.uleb128 0x12
	.long	.LASF1410
	.sleb128 1009
	.uleb128 0x12
	.long	.LASF1411
	.sleb128 1011
	.uleb128 0x12
	.long	.LASF1412
	.sleb128 1012
	.uleb128 0x12
	.long	.LASF1413
	.sleb128 1016
	.uleb128 0x12
	.long	.LASF1414
	.sleb128 1017
	.uleb128 0x12
	.long	.LASF1415
	.sleb128 1018
	.uleb128 0x12
	.long	.LASF1416
	.sleb128 1019
	.uleb128 0x12
	.long	.LASF1417
	.sleb128 1020
	.uleb128 0x12
	.long	.LASF1418
	.sleb128 1021
	.uleb128 0x12
	.long	.LASF1419
	.sleb128 1022
	.uleb128 0x12
	.long	.LASF1420
	.sleb128 1023
	.uleb128 0x12
	.long	.LASF1421
	.sleb128 1024
	.uleb128 0x12
	.long	.LASF1422
	.sleb128 1025
	.uleb128 0x12
	.long	.LASF1423
	.sleb128 1026
	.uleb128 0x12
	.long	.LASF1424
	.sleb128 1027
	.uleb128 0x12
	.long	.LASF1425
	.sleb128 1029
	.uleb128 0x12
	.long	.LASF1426
	.sleb128 1030
	.uleb128 0x12
	.long	.LASF1427
	.sleb128 1031
	.uleb128 0x12
	.long	.LASF1428
	.sleb128 1032
	.uleb128 0x12
	.long	.LASF1429
	.sleb128 1039
	.uleb128 0x12
	.long	.LASF1430
	.sleb128 1046
	.uleb128 0x12
	.long	.LASF1431
	.sleb128 1047
	.uleb128 0x12
	.long	.LASF1432
	.sleb128 1052
	.uleb128 0x12
	.long	.LASF1433
	.sleb128 1059
	.uleb128 0x12
	.long	.LASF1434
	.sleb128 1065
	.uleb128 0x12
	.long	.LASF1435
	.sleb128 1066
	.uleb128 0x12
	.long	.LASF1436
	.sleb128 1071
	.uleb128 0x12
	.long	.LASF1437
	.sleb128 1073
	.uleb128 0x12
	.long	.LASF1438
	.sleb128 1076
	.uleb128 0x12
	.long	.LASF1439
	.sleb128 1078
	.uleb128 0x12
	.long	.LASF1440
	.sleb128 1080
	.uleb128 0x12
	.long	.LASF1441
	.sleb128 1084
	.uleb128 0x12
	.long	.LASF1442
	.sleb128 1085
	.uleb128 0x12
	.long	.LASF1443
	.sleb128 1086
	.uleb128 0x12
	.long	.LASF1444
	.sleb128 1089
	.uleb128 0x12
	.long	.LASF1445
	.sleb128 1090
	.uleb128 0x12
	.long	.LASF1446
	.sleb128 1091
	.uleb128 0x12
	.long	.LASF1447
	.sleb128 1094
	.uleb128 0x12
	.long	.LASF1448
	.sleb128 1095
	.uleb128 0x12
	.long	.LASF1449
	.sleb128 1096
	.uleb128 0x12
	.long	.LASF1450
	.sleb128 1097
	.uleb128 0x12
	.long	.LASF1451
	.sleb128 1098
	.uleb128 0x12
	.long	.LASF1452
	.sleb128 1101
	.uleb128 0x12
	.long	.LASF1453
	.sleb128 1102
	.uleb128 0x12
	.long	.LASF1454
	.sleb128 1103
	.uleb128 0x12
	.long	.LASF1455
	.sleb128 1104
	.uleb128 0x12
	.long	.LASF1456
	.sleb128 1105
	.uleb128 0x12
	.long	.LASF1457
	.sleb128 1106
	.uleb128 0x12
	.long	.LASF1458
	.sleb128 1107
	.uleb128 0x12
	.long	.LASF1459
	.sleb128 1108
	.uleb128 0x12
	.long	.LASF1460
	.sleb128 1109
	.uleb128 0x12
	.long	.LASF1461
	.sleb128 1110
	.uleb128 0x12
	.long	.LASF1462
	.sleb128 1111
	.uleb128 0x12
	.long	.LASF1463
	.sleb128 1112
	.uleb128 0x12
	.long	.LASF1464
	.sleb128 1113
	.uleb128 0x12
	.long	.LASF1465
	.sleb128 1114
	.uleb128 0x12
	.long	.LASF1466
	.sleb128 1115
	.uleb128 0x12
	.long	.LASF1467
	.sleb128 1116
	.uleb128 0x12
	.long	.LASF1468
	.sleb128 1117
	.uleb128 0x12
	.long	.LASF1469
	.sleb128 1118
	.uleb128 0x12
	.long	.LASF1470
	.sleb128 1119
	.uleb128 0x12
	.long	.LASF1471
	.sleb128 1120
	.uleb128 0x12
	.long	.LASF1472
	.sleb128 1121
	.uleb128 0x12
	.long	.LASF1473
	.sleb128 1122
	.uleb128 0x12
	.long	.LASF1474
	.sleb128 1123
	.uleb128 0x12
	.long	.LASF1475
	.sleb128 1124
	.uleb128 0x12
	.long	.LASF1476
	.sleb128 1125
	.uleb128 0x12
	.long	.LASF1477
	.sleb128 1126
	.uleb128 0x12
	.long	.LASF1478
	.sleb128 1127
	.uleb128 0x12
	.long	.LASF1479
	.sleb128 1128
	.uleb128 0x12
	.long	.LASF1480
	.sleb128 1129
	.uleb128 0x12
	.long	.LASF1481
	.sleb128 1130
	.uleb128 0x12
	.long	.LASF1482
	.sleb128 1131
	.uleb128 0x12
	.long	.LASF1483
	.sleb128 1132
	.uleb128 0x12
	.long	.LASF1484
	.sleb128 1137
	.uleb128 0x12
	.long	.LASF1485
	.sleb128 1138
	.uleb128 0x12
	.long	.LASF1486
	.sleb128 1139
	.uleb128 0x12
	.long	.LASF1487
	.sleb128 1140
	.uleb128 0x12
	.long	.LASF1488
	.sleb128 1141
	.uleb128 0x12
	.long	.LASF1489
	.sleb128 1142
	.uleb128 0x12
	.long	.LASF1490
	.sleb128 1143
	.uleb128 0x12
	.long	.LASF1491
	.sleb128 1144
	.uleb128 0x12
	.long	.LASF1492
	.sleb128 1145
	.uleb128 0x12
	.long	.LASF1493
	.sleb128 1146
	.uleb128 0x12
	.long	.LASF1494
	.sleb128 1147
	.uleb128 0x12
	.long	.LASF1495
	.sleb128 1148
	.uleb128 0x12
	.long	.LASF1496
	.sleb128 1149
	.uleb128 0x12
	.long	.LASF1497
	.sleb128 1150
	.uleb128 0x12
	.long	.LASF1498
	.sleb128 1151
	.uleb128 0x12
	.long	.LASF1499
	.sleb128 1152
	.uleb128 0x12
	.long	.LASF1500
	.sleb128 1153
	.uleb128 0x12
	.long	.LASF1501
	.sleb128 1154
	.uleb128 0x12
	.long	.LASF1502
	.sleb128 1159
	.uleb128 0x12
	.long	.LASF1503
	.sleb128 1160
	.uleb128 0x12
	.long	.LASF1504
	.sleb128 1161
	.uleb128 0x12
	.long	.LASF1505
	.sleb128 1166
	.uleb128 0x12
	.long	.LASF1506
	.sleb128 1167
	.uleb128 0x12
	.long	.LASF1507
	.sleb128 1168
	.uleb128 0x12
	.long	.LASF1508
	.sleb128 1169
	.uleb128 0x12
	.long	.LASF1509
	.sleb128 1170
	.uleb128 0x12
	.long	.LASF1510
	.sleb128 1171
	.uleb128 0x12
	.long	.LASF1511
	.sleb128 1172
	.uleb128 0x12
	.long	.LASF1512
	.sleb128 1173
	.uleb128 0x12
	.long	.LASF1513
	.sleb128 1174
	.uleb128 0x12
	.long	.LASF1514
	.sleb128 1175
	.uleb128 0x12
	.long	.LASF1515
	.sleb128 1176
	.uleb128 0x12
	.long	.LASF1516
	.sleb128 1177
	.uleb128 0x12
	.long	.LASF1517
	.sleb128 1180
	.uleb128 0x12
	.long	.LASF1518
	.sleb128 1183
	.uleb128 0x12
	.long	.LASF1519
	.sleb128 1184
	.uleb128 0x12
	.long	.LASF1520
	.sleb128 1185
	.uleb128 0x12
	.long	.LASF1521
	.sleb128 1186
	.uleb128 0x12
	.long	.LASF1522
	.sleb128 1187
	.uleb128 0x12
	.long	.LASF1523
	.sleb128 1188
	.uleb128 0x12
	.long	.LASF1524
	.sleb128 1189
	.uleb128 0x12
	.long	.LASF1525
	.sleb128 1190
	.uleb128 0x12
	.long	.LASF1526
	.sleb128 1191
	.uleb128 0x12
	.long	.LASF1527
	.sleb128 1192
	.uleb128 0x12
	.long	.LASF1528
	.sleb128 1193
	.uleb128 0x12
	.long	.LASF1529
	.sleb128 1194
	.uleb128 0x12
	.long	.LASF1530
	.sleb128 1195
	.uleb128 0x12
	.long	.LASF1531
	.sleb128 1196
	.uleb128 0x12
	.long	.LASF1532
	.sleb128 1197
	.uleb128 0x12
	.long	.LASF1533
	.sleb128 1198
	.uleb128 0x12
	.long	.LASF1534
	.sleb128 1199
	.uleb128 0x12
	.long	.LASF1535
	.sleb128 1200
	.uleb128 0x12
	.long	.LASF1536
	.sleb128 1201
	.uleb128 0x12
	.long	.LASF1537
	.sleb128 1202
	.uleb128 0x12
	.long	.LASF1538
	.sleb128 1203
	.uleb128 0x12
	.long	.LASF1539
	.sleb128 1204
	.uleb128 0x12
	.long	.LASF1540
	.sleb128 1205
	.uleb128 0x12
	.long	.LASF1541
	.sleb128 1206
	.uleb128 0x12
	.long	.LASF1542
	.sleb128 1209
	.uleb128 0x12
	.long	.LASF1543
	.sleb128 1210
	.uleb128 0x12
	.long	.LASF1544
	.sleb128 1211
	.uleb128 0x12
	.long	.LASF1545
	.sleb128 1212
	.uleb128 0x12
	.long	.LASF1546
	.sleb128 1213
	.uleb128 0x12
	.long	.LASF1547
	.sleb128 1215
	.uleb128 0x12
	.long	.LASF1548
	.sleb128 1216
	.uleb128 0x12
	.long	.LASF1549
	.sleb128 1217
	.uleb128 0x12
	.long	.LASF1550
	.sleb128 1220
	.uleb128 0x12
	.long	.LASF1551
	.sleb128 1223
	.uleb128 0x12
	.long	.LASF1552
	.sleb128 1226
	.uleb128 0x12
	.long	.LASF1553
	.sleb128 1229
	.uleb128 0x12
	.long	.LASF1554
	.sleb128 1233
	.uleb128 0x12
	.long	.LASF1555
	.sleb128 1234
	.uleb128 0x12
	.long	.LASF1556
	.sleb128 1235
	.uleb128 0x12
	.long	.LASF1557
	.sleb128 1298
	.uleb128 0x12
	.long	.LASF1558
	.sleb128 1299
	.uleb128 0x12
	.long	.LASF1559
	.sleb128 1300
	.uleb128 0x12
	.long	.LASF1560
	.sleb128 1301
	.uleb128 0x12
	.long	.LASF1561
	.sleb128 1302
	.uleb128 0x12
	.long	.LASF1562
	.sleb128 1303
	.uleb128 0x12
	.long	.LASF1563
	.sleb128 1304
	.uleb128 0x12
	.long	.LASF1564
	.sleb128 1305
	.uleb128 0x12
	.long	.LASF1565
	.sleb128 1314
	.uleb128 0x12
	.long	.LASF1566
	.sleb128 1315
	.uleb128 0x12
	.long	.LASF1567
	.sleb128 1316
	.uleb128 0x12
	.long	.LASF1568
	.sleb128 1317
	.byte	0
	.uleb128 0x1b
	.byte	0x10
	.byte	0x10
	.byte	0x2c
	.long	0x3a0b
	.uleb128 0x8
	.long	.LASF1023
	.byte	0x10
	.byte	0x2d
	.long	0x2afd
	.byte	0
	.uleb128 0x8
	.long	.LASF1569
	.byte	0x10
	.byte	0x2e
	.long	0x2d
	.byte	0x8
	.byte	0
	.uleb128 0x24
	.long	.LASF1570
	.value	0x3b8
	.byte	0x10
	.byte	0x29
	.long	0x3a31
	.uleb128 0x8
	.long	.LASF0
	.byte	0x10
	.byte	0x2b
	.long	0x8e8
	.byte	0
	.uleb128 0x8
	.long	.LASF1571
	.byte	0x10
	.byte	0x2f
	.long	0x3a31
	.byte	0x8
	.byte	0
	.uleb128 0xe
	.long	0x39ea
	.long	0x3a41
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x7
	.long	.LASF1570
	.byte	0x10
	.byte	0x30
	.long	0x3a4c
	.uleb128 0x3
	.byte	0x8
	.long	0x3a0b
	.uleb128 0x19
	.long	.LASF1572
	.byte	0x4
	.byte	0x10
	.byte	0x37
	.long	0x3b8b
	.uleb128 0x12
	.long	.LASF1573
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1574
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1575
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1576
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1577
	.sleb128 4
	.uleb128 0x12
	.long	.LASF1578
	.sleb128 5
	.uleb128 0x12
	.long	.LASF1579
	.sleb128 6
	.uleb128 0x12
	.long	.LASF1580
	.sleb128 7
	.uleb128 0x12
	.long	.LASF1581
	.sleb128 8
	.uleb128 0x12
	.long	.LASF1582
	.sleb128 9
	.uleb128 0x12
	.long	.LASF1583
	.sleb128 10
	.uleb128 0x12
	.long	.LASF1584
	.sleb128 11
	.uleb128 0x12
	.long	.LASF1585
	.sleb128 12
	.uleb128 0x12
	.long	.LASF1586
	.sleb128 13
	.uleb128 0x12
	.long	.LASF1587
	.sleb128 14
	.uleb128 0x12
	.long	.LASF1588
	.sleb128 15
	.uleb128 0x12
	.long	.LASF1589
	.sleb128 16
	.uleb128 0x12
	.long	.LASF1590
	.sleb128 17
	.uleb128 0x12
	.long	.LASF1591
	.sleb128 18
	.uleb128 0x12
	.long	.LASF1592
	.sleb128 19
	.uleb128 0x12
	.long	.LASF1593
	.sleb128 20
	.uleb128 0x12
	.long	.LASF1594
	.sleb128 21
	.uleb128 0x12
	.long	.LASF1595
	.sleb128 22
	.uleb128 0x12
	.long	.LASF1596
	.sleb128 23
	.uleb128 0x12
	.long	.LASF1597
	.sleb128 24
	.uleb128 0x12
	.long	.LASF1598
	.sleb128 25
	.uleb128 0x12
	.long	.LASF1599
	.sleb128 26
	.uleb128 0x12
	.long	.LASF1600
	.sleb128 27
	.uleb128 0x12
	.long	.LASF1601
	.sleb128 28
	.uleb128 0x12
	.long	.LASF1602
	.sleb128 29
	.uleb128 0x12
	.long	.LASF1603
	.sleb128 30
	.uleb128 0x12
	.long	.LASF1604
	.sleb128 31
	.uleb128 0x12
	.long	.LASF1605
	.sleb128 32
	.uleb128 0x12
	.long	.LASF1606
	.sleb128 33
	.uleb128 0x12
	.long	.LASF1607
	.sleb128 34
	.uleb128 0x12
	.long	.LASF1608
	.sleb128 35
	.uleb128 0x12
	.long	.LASF1609
	.sleb128 36
	.uleb128 0x12
	.long	.LASF1610
	.sleb128 37
	.uleb128 0x12
	.long	.LASF1611
	.sleb128 38
	.uleb128 0x12
	.long	.LASF1612
	.sleb128 39
	.uleb128 0x12
	.long	.LASF1613
	.sleb128 40
	.uleb128 0x12
	.long	.LASF1614
	.sleb128 41
	.uleb128 0x12
	.long	.LASF1615
	.sleb128 42
	.uleb128 0x12
	.long	.LASF1616
	.sleb128 43
	.uleb128 0x12
	.long	.LASF1617
	.sleb128 44
	.uleb128 0x12
	.long	.LASF1618
	.sleb128 45
	.uleb128 0x12
	.long	.LASF1619
	.sleb128 46
	.uleb128 0x12
	.long	.LASF1620
	.sleb128 47
	.uleb128 0x12
	.long	.LASF1621
	.sleb128 48
	.uleb128 0x12
	.long	.LASF1622
	.sleb128 49
	.byte	0
	.uleb128 0x7
	.long	.LASF1623
	.byte	0x10
	.byte	0xe6
	.long	0x3b96
	.uleb128 0x3
	.byte	0x8
	.long	0x3b9c
	.uleb128 0x27
	.long	0x2d
	.long	0x3bab
	.uleb128 0x28
	.long	0x2d
	.byte	0
	.uleb128 0x11
	.long	.LASF1624
	.byte	0x4
	.byte	0x10
	.value	0x12a
	.long	0x3bcb
	.uleb128 0x12
	.long	.LASF1625
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1626
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1627
	.sleb128 2
	.byte	0
	.uleb128 0x19
	.long	.LASF1628
	.byte	0x4
	.byte	0x11
	.byte	0x19
	.long	0x3e46
	.uleb128 0x12
	.long	.LASF1629
	.sleb128 0
	.uleb128 0x12
	.long	.LASF1630
	.sleb128 1
	.uleb128 0x12
	.long	.LASF1631
	.sleb128 2
	.uleb128 0x12
	.long	.LASF1632
	.sleb128 3
	.uleb128 0x12
	.long	.LASF1633
	.sleb128 4
	.uleb128 0x12
	.long	.LASF1634
	.sleb128 5
	.uleb128 0x12
	.long	.LASF1635
	.sleb128 6
	.uleb128 0x12
	.long	.LASF1636
	.sleb128 7
	.uleb128 0x12
	.long	.LASF1637
	.sleb128 8
	.uleb128 0x12
	.long	.LASF1638
	.sleb128 9
	.uleb128 0x12
	.long	.LASF1639
	.sleb128 10
	.uleb128 0x12
	.long	.LASF1640
	.sleb128 11
	.uleb128 0x12
	.long	.LASF1641
	.sleb128 12
	.uleb128 0x12
	.long	.LASF1642
	.sleb128 13
	.uleb128 0x12
	.long	.LASF1643
	.sleb128 14
	.uleb128 0x12
	.long	.LASF1644
	.sleb128 15
	.uleb128 0x12
	.long	.LASF1645
	.sleb128 16
	.uleb128 0x12
	.long	.LASF1646
	.sleb128 17
	.uleb128 0x12
	.long	.LASF1647
	.sleb128 18
	.uleb128 0x12
	.long	.LASF1648
	.sleb128 19
	.uleb128 0x12
	.long	.LASF1649
	.sleb128 20
	.uleb128 0x12
	.long	.LASF1650
	.sleb128 21
	.uleb128 0x12
	.long	.LASF1651
	.sleb128 22
	.uleb128 0x12
	.long	.LASF1652
	.sleb128 23
	.uleb128 0x12
	.long	.LASF1653
	.sleb128 24
	.uleb128 0x12
	.long	.LASF1654
	.sleb128 25
	.uleb128 0x12
	.long	.LASF1655
	.sleb128 26
	.uleb128 0x12
	.long	.LASF1656
	.sleb128 27
	.uleb128 0x12
	.long	.LASF1657
	.sleb128 28
	.uleb128 0x12
	.long	.LASF1658
	.sleb128 29
	.uleb128 0x12
	.long	.LASF1659
	.sleb128 30
	.uleb128 0x12
	.long	.LASF1660
	.sleb128 31
	.uleb128 0x12
	.long	.LASF1661
	.sleb128 32
	.uleb128 0x12
	.long	.LASF1662
	.sleb128 33
	.uleb128 0x12
	.long	.LASF1663
	.sleb128 34
	.uleb128 0x12
	.long	.LASF1664
	.sleb128 35
	.uleb128 0x12
	.long	.LASF1665
	.sleb128 36
	.uleb128 0x12
	.long	.LASF1666
	.sleb128 37
	.uleb128 0x12
	.long	.LASF1667
	.sleb128 38
	.uleb128 0x12
	.long	.LASF1668
	.sleb128 39
	.uleb128 0x12
	.long	.LASF1669
	.sleb128 40
	.uleb128 0x12
	.long	.LASF1670
	.sleb128 41
	.uleb128 0x12
	.long	.LASF1671
	.sleb128 42
	.uleb128 0x12
	.long	.LASF1672
	.sleb128 43
	.uleb128 0x12
	.long	.LASF1673
	.sleb128 44
	.uleb128 0x12
	.long	.LASF1674
	.sleb128 45
	.uleb128 0x12
	.long	.LASF1675
	.sleb128 46
	.uleb128 0x12
	.long	.LASF1676
	.sleb128 47
	.uleb128 0x12
	.long	.LASF1677
	.sleb128 48
	.uleb128 0x12
	.long	.LASF1678
	.sleb128 49
	.uleb128 0x12
	.long	.LASF1679
	.sleb128 50
	.uleb128 0x12
	.long	.LASF1680
	.sleb128 51
	.uleb128 0x12
	.long	.LASF1681
	.sleb128 52
	.uleb128 0x12
	.long	.LASF1682
	.sleb128 53
	.uleb128 0x12
	.long	.LASF1683
	.sleb128 54
	.uleb128 0x12
	.long	.LASF1684
	.sleb128 55
	.uleb128 0x12
	.long	.LASF1685
	.sleb128 56
	.uleb128 0x12
	.long	.LASF1686
	.sleb128 57
	.uleb128 0x12
	.long	.LASF1687
	.sleb128 58
	.uleb128 0x12
	.long	.LASF1688
	.sleb128 59
	.uleb128 0x12
	.long	.LASF1689
	.sleb128 60
	.uleb128 0x12
	.long	.LASF1690
	.sleb128 61
	.uleb128 0x12
	.long	.LASF1691
	.sleb128 62
	.uleb128 0x12
	.long	.LASF1692
	.sleb128 63
	.uleb128 0x12
	.long	.LASF1693
	.sleb128 64
	.uleb128 0x12
	.long	.LASF1694
	.sleb128 65
	.uleb128 0x12
	.long	.LASF1695
	.sleb128 66
	.uleb128 0x12
	.long	.LASF1696
	.sleb128 67
	.uleb128 0x12
	.long	.LASF1697
	.sleb128 68
	.uleb128 0x12
	.long	.LASF1698
	.sleb128 69
	.uleb128 0x12
	.long	.LASF1699
	.sleb128 70
	.uleb128 0x12
	.long	.LASF1700
	.sleb128 71
	.uleb128 0x12
	.long	.LASF1701
	.sleb128 72
	.uleb128 0x12
	.long	.LASF1702
	.sleb128 73
	.uleb128 0x12
	.long	.LASF1703
	.sleb128 74
	.uleb128 0x12
	.long	.LASF1704
	.sleb128 75
	.uleb128 0x12
	.long	.LASF1705
	.sleb128 76
	.uleb128 0x12
	.long	.LASF1706
	.sleb128 77
	.uleb128 0x12
	.long	.LASF1707
	.sleb128 78
	.uleb128 0x12
	.long	.LASF1708
	.sleb128 79
	.uleb128 0x12
	.long	.LASF1709
	.sleb128 80
	.uleb128 0x12
	.long	.LASF1710
	.sleb128 81
	.uleb128 0x12
	.long	.LASF1711
	.sleb128 82
	.uleb128 0x12
	.long	.LASF1712
	.sleb128 83
	.uleb128 0x12
	.long	.LASF1713
	.sleb128 84
	.uleb128 0x12
	.long	.LASF1714
	.sleb128 85
	.uleb128 0x12
	.long	.LASF1715
	.sleb128 86
	.uleb128 0x12
	.long	.LASF1716
	.sleb128 87
	.uleb128 0x12
	.long	.LASF1717
	.sleb128 88
	.uleb128 0x12
	.long	.LASF1718
	.sleb128 89
	.uleb128 0x12
	.long	.LASF1719
	.sleb128 90
	.uleb128 0x12
	.long	.LASF1720
	.sleb128 91
	.uleb128 0x12
	.long	.LASF1721
	.sleb128 92
	.uleb128 0x12
	.long	.LASF1722
	.sleb128 93
	.uleb128 0x12
	.long	.LASF1723
	.sleb128 94
	.uleb128 0x12
	.long	.LASF1724
	.sleb128 95
	.uleb128 0x12
	.long	.LASF1725
	.sleb128 96
	.uleb128 0x12
	.long	.LASF1726
	.sleb128 97
	.byte	0
	.uleb128 0x7
	.long	.LASF1727
	.byte	0x12
	.byte	0xd4
	.long	0x3e51
	.uleb128 0x3
	.byte	0x8
	.long	0x3e57
	.uleb128 0x27
	.long	0x328
	.long	0x3e6b
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0x72a
	.byte	0
	.uleb128 0x7
	.long	.LASF1728
	.byte	0x12
	.byte	0xd6
	.long	0x3e76
	.uleb128 0x3
	.byte	0x8
	.long	0x3e7c
	.uleb128 0x27
	.long	0x2d
	.long	0x3e8c
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x29
	.byte	0
	.uleb128 0x4
	.long	.LASF1729
	.byte	0x18
	.byte	0x12
	.byte	0xd8
	.long	0x3ed8
	.uleb128 0x8
	.long	.LASF1730
	.byte	0x12
	.byte	0xda
	.long	0x3ed8
	.byte	0
	.uleb128 0x8
	.long	.LASF1731
	.byte	0x12
	.byte	0xdc
	.long	0x284e
	.byte	0x8
	.uleb128 0x5
	.long	.LASF1
	.byte	0x12
	.byte	0xde
	.long	0x3edd
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1732
	.byte	0x12
	.byte	0xe0
	.long	0x6fa
	.byte	0x12
	.uleb128 0x8
	.long	.LASF1733
	.byte	0x12
	.byte	0xe2
	.long	0x6fa
	.byte	0x13
	.byte	0
	.uleb128 0xc
	.long	0x3e46
	.uleb128 0xc
	.long	0x49d
	.uleb128 0x4
	.long	.LASF1734
	.byte	0x28
	.byte	0x12
	.byte	0xec
	.long	0x3f4f
	.uleb128 0x8
	.long	.LASF770
	.byte	0x12
	.byte	0xee
	.long	0x284e
	.byte	0
	.uleb128 0x8
	.long	.LASF1735
	.byte	0x12
	.byte	0xef
	.long	0x723
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1736
	.byte	0x12
	.byte	0xf0
	.long	0x3f4f
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1737
	.byte	0x12
	.byte	0xf1
	.long	0x3f54
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1738
	.byte	0x12
	.byte	0xf3
	.long	0x6fa
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1739
	.byte	0x12
	.byte	0xf4
	.long	0x6fa
	.byte	0x21
	.uleb128 0x8
	.long	.LASF1740
	.byte	0x12
	.byte	0xf5
	.long	0x6fa
	.byte	0x22
	.uleb128 0x8
	.long	.LASF1741
	.byte	0x12
	.byte	0xf6
	.long	0x6fa
	.byte	0x23
	.byte	0
	.uleb128 0xc
	.long	0x3e6b
	.uleb128 0xc
	.long	0x3f59
	.uleb128 0x3
	.byte	0x8
	.long	0x3f5f
	.uleb128 0xc
	.long	0x3e8c
	.uleb128 0x7
	.long	.LASF1742
	.byte	0x13
	.byte	0x19
	.long	0x3f6f
	.uleb128 0x3
	.byte	0x8
	.long	0x3f75
	.uleb128 0x2a
	.long	0x3f8a
	.uleb128 0x28
	.long	0x3f8a
	.uleb128 0x28
	.long	0x123
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4fe
	.uleb128 0x4
	.long	.LASF1743
	.byte	0x58
	.byte	0x13
	.byte	0x1e
	.long	0x4021
	.uleb128 0x8
	.long	.LASF1744
	.byte	0x13
	.byte	0x20
	.long	0x4069
	.byte	0
	.uleb128 0x8
	.long	.LASF1745
	.byte	0x13
	.byte	0x25
	.long	0x407e
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1746
	.byte	0x13
	.byte	0x26
	.long	0x4093
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1747
	.byte	0x13
	.byte	0x27
	.long	0x40ad
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1748
	.byte	0x13
	.byte	0x29
	.long	0x4093
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1749
	.byte	0x13
	.byte	0x2a
	.long	0x40c7
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1750
	.byte	0x13
	.byte	0x2b
	.long	0x40f5
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1751
	.byte	0x13
	.byte	0x30
	.long	0x4093
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1752
	.byte	0x13
	.byte	0x31
	.long	0x4093
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1753
	.byte	0x13
	.byte	0x32
	.long	0x4106
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1754
	.byte	0x13
	.byte	0x33
	.long	0x4125
	.byte	0x50
	.byte	0
	.uleb128 0x27
	.long	0x12e
	.long	0x4044
	.uleb128 0x28
	.long	0x4044
	.uleb128 0x28
	.long	0x71d
	.uleb128 0x28
	.long	0x404a
	.uleb128 0x28
	.long	0x4a4
	.uleb128 0x28
	.long	0x4a4
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x12e
	.uleb128 0x3
	.byte	0x8
	.long	0x4050
	.uleb128 0x27
	.long	0x12e
	.long	0x4069
	.uleb128 0x28
	.long	0x4044
	.uleb128 0x28
	.long	0x71d
	.uleb128 0x28
	.long	0x4a4
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4021
	.uleb128 0x27
	.long	0x328
	.long	0x407e
	.uleb128 0x28
	.long	0x4044
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x406f
	.uleb128 0x27
	.long	0x328
	.long	0x4093
	.uleb128 0x28
	.long	0x12e
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4084
	.uleb128 0x27
	.long	0x12e
	.long	0x40ad
	.uleb128 0x28
	.long	0x4a4
	.uleb128 0x28
	.long	0x12e
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4099
	.uleb128 0x27
	.long	0x328
	.long	0x40c7
	.uleb128 0x28
	.long	0x12e
	.uleb128 0x28
	.long	0x12e
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x40b3
	.uleb128 0x27
	.long	0x12e
	.long	0x40f5
	.uleb128 0x28
	.long	0x12e
	.uleb128 0x28
	.long	0x12e
	.uleb128 0x28
	.long	0x12e
	.uleb128 0x28
	.long	0x4a4
	.uleb128 0x28
	.long	0x71d
	.uleb128 0x28
	.long	0x4a4
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x40cd
	.uleb128 0x2a
	.long	0x4106
	.uleb128 0x28
	.long	0x12e
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x40fb
	.uleb128 0x27
	.long	0x12e
	.long	0x4125
	.uleb128 0x28
	.long	0x12e
	.uleb128 0x28
	.long	0x12e
	.uleb128 0x28
	.long	0x12e
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x410c
	.uleb128 0x4
	.long	.LASF1755
	.byte	0x10
	.byte	0x13
	.byte	0x3a
	.long	0x4150
	.uleb128 0x8
	.long	.LASF1756
	.byte	0x13
	.byte	0x3e
	.long	0x4164
	.byte	0
	.uleb128 0x8
	.long	.LASF1757
	.byte	0x13
	.byte	0x41
	.long	0x4179
	.byte	0x8
	.byte	0
	.uleb128 0x27
	.long	0x328
	.long	0x4164
	.uleb128 0x28
	.long	0x4a4
	.uleb128 0x28
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4150
	.uleb128 0x27
	.long	0x328
	.long	0x4179
	.uleb128 0x28
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x416a
	.uleb128 0x24
	.long	.LASF1758
	.value	0x100
	.byte	0x13
	.byte	0x46
	.long	0x4289
	.uleb128 0x8
	.long	.LASF770
	.byte	0x13
	.byte	0x49
	.long	0x6f4
	.byte	0
	.uleb128 0x8
	.long	.LASF1759
	.byte	0x13
	.byte	0x4d
	.long	0x4ad
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1760
	.byte	0x13
	.byte	0x51
	.long	0x428a
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1761
	.byte	0x13
	.byte	0x5b
	.long	0x42aa
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1762
	.byte	0x13
	.byte	0x64
	.long	0x428a
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1763
	.byte	0x13
	.byte	0x6c
	.long	0x42bf
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1764
	.byte	0x13
	.byte	0x6f
	.long	0x428a
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1765
	.byte	0x13
	.byte	0x72
	.long	0x428a
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1766
	.byte	0x13
	.byte	0x76
	.long	0x42d4
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1767
	.byte	0x13
	.byte	0x7b
	.long	0x42e9
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1768
	.byte	0x13
	.byte	0x84
	.long	0x4303
	.byte	0x50
	.uleb128 0x8
	.long	.LASF1769
	.byte	0x13
	.byte	0x87
	.long	0x4179
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1770
	.byte	0x13
	.byte	0x8a
	.long	0x2853
	.byte	0x60
	.uleb128 0x8
	.long	.LASF1771
	.byte	0x13
	.byte	0x8e
	.long	0x428a
	.byte	0x68
	.uleb128 0x8
	.long	.LASF1772
	.byte	0x13
	.byte	0x92
	.long	0x3f64
	.byte	0x70
	.uleb128 0x8
	.long	.LASF1773
	.byte	0x13
	.byte	0x96
	.long	0x3f64
	.byte	0x78
	.uleb128 0x8
	.long	.LASF1774
	.byte	0x13
	.byte	0x97
	.long	0x3f64
	.byte	0x80
	.uleb128 0x8
	.long	.LASF1775
	.byte	0x13
	.byte	0x98
	.long	0x3f64
	.byte	0x88
	.uleb128 0x8
	.long	.LASF1776
	.byte	0x13
	.byte	0x9d
	.long	0x4314
	.byte	0x90
	.uleb128 0x8
	.long	.LASF1777
	.byte	0x13
	.byte	0x9f
	.long	0x3f90
	.byte	0x98
	.uleb128 0x8
	.long	.LASF1778
	.byte	0x13
	.byte	0xa1
	.long	0x412b
	.byte	0xf0
	.byte	0
	.uleb128 0x2b
	.uleb128 0x3
	.byte	0x8
	.long	0x4289
	.uleb128 0x27
	.long	0x328
	.long	0x42a4
	.uleb128 0x28
	.long	0x328
	.uleb128 0x28
	.long	0x42a4
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4f1
	.uleb128 0x3
	.byte	0x8
	.long	0x4290
	.uleb128 0x27
	.long	0x6f4
	.long	0x42bf
	.uleb128 0x28
	.long	0x6f4
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x42b0
	.uleb128 0x27
	.long	0x4a6
	.long	0x42d4
	.uleb128 0x28
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x42c5
	.uleb128 0x27
	.long	0x123
	.long	0x42e9
	.uleb128 0x28
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x42da
	.uleb128 0x27
	.long	0x328
	.long	0x4303
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x42ef
	.uleb128 0x2a
	.long	0x4314
	.uleb128 0x28
	.long	0x328
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4309
	.uleb128 0x4
	.long	.LASF1779
	.byte	0x48
	.byte	0x1
	.byte	0x59
	.long	0x43aa
	.uleb128 0x6
	.string	"to"
	.byte	0x1
	.byte	0x5b
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF1780
	.byte	0x1
	.byte	0x5c
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1781
	.byte	0x1
	.byte	0x5d
	.long	0x328
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1782
	.byte	0x1
	.byte	0x5e
	.long	0x328
	.byte	0x14
	.uleb128 0x8
	.long	.LASF1783
	.byte	0x1
	.byte	0x5f
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1784
	.byte	0x1
	.byte	0x60
	.long	0x2d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1785
	.byte	0x1
	.byte	0x61
	.long	0x328
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1786
	.byte	0x1
	.byte	0x62
	.long	0x328
	.byte	0x2c
	.uleb128 0x6
	.string	"len"
	.byte	0x1
	.byte	0x63
	.long	0x4b8
	.byte	0x30
	.uleb128 0x8
	.long	.LASF347
	.byte	0x1
	.byte	0x64
	.long	0x4a6
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1787
	.byte	0x1
	.byte	0x65
	.long	0x328
	.byte	0x40
	.byte	0
	.uleb128 0x4
	.long	.LASF1788
	.byte	0x40
	.byte	0x1
	.byte	0x6b
	.long	0x4422
	.uleb128 0x6
	.string	"to"
	.byte	0x1
	.byte	0x6d
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF1780
	.byte	0x1
	.byte	0x6e
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1781
	.byte	0x1
	.byte	0x6f
	.long	0x328
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1782
	.byte	0x1
	.byte	0x70
	.long	0x328
	.byte	0x14
	.uleb128 0x6
	.string	"len"
	.byte	0x1
	.byte	0x71
	.long	0x4b8
	.byte	0x18
	.uleb128 0x8
	.long	.LASF347
	.byte	0x1
	.byte	0x72
	.long	0x4a6
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1789
	.byte	0x1
	.byte	0x73
	.long	0x443b
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1790
	.byte	0x1
	.byte	0x74
	.long	0x4a4
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1787
	.byte	0x1
	.byte	0x75
	.long	0x328
	.byte	0x38
	.byte	0
	.uleb128 0x27
	.long	0x2d
	.long	0x443b
	.uleb128 0x28
	.long	0x4a4
	.uleb128 0x28
	.long	0x4a6
	.uleb128 0x28
	.long	0x72a
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4422
	.uleb128 0x2c
	.long	.LASF1794
	.byte	0x1
	.byte	0xcd
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.uleb128 0x1
	.byte	0x9c
	.long	0x44e2
	.uleb128 0x2d
	.long	.LASF1791
	.byte	0x1
	.byte	0xcf
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"pat"
	.byte	0x1
	.byte	0xcf
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2d
	.long	.LASF1
	.byte	0x1
	.byte	0xd0
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2d
	.long	.LASF1792
	.byte	0x1
	.byte	0xd1
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2e
	.string	"mem"
	.byte	0x1
	.byte	0xd2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2d
	.long	.LASF1793
	.byte	0x1
	.byte	0xd2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.quad	.LBB2
	.quad	.LBE2-.LBB2
	.uleb128 0x2d
	.long	.LASF82
	.byte	0x1
	.byte	0xe2
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.byte	0xe3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x30
	.long	.LASF2094
	.byte	0x1
	.value	0x112
	.quad	.LFB3
	.quad	.LFE3-.LFB3
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x31
	.long	.LASF1795
	.byte	0x1
	.value	0x120
	.quad	.LFB4
	.quad	.LFE4-.LFB4
	.uleb128 0x1
	.byte	0x9c
	.long	0x4593
	.uleb128 0x32
	.string	"p"
	.byte	0x1
	.value	0x121
	.long	0x2a44
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x33
	.quad	.LBB3
	.quad	.LBE3-.LBB3
	.long	0x454c
	.uleb128 0x34
	.string	"r__"
	.byte	0x1
	.value	0x126
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x33
	.quad	.LBB4
	.quad	.LBE4-.LBB4
	.long	0x4571
	.uleb128 0x34
	.string	"r__"
	.byte	0x1
	.value	0x127
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x2f
	.quad	.LBB5
	.quad	.LBE5-.LBB5
	.uleb128 0x34
	.string	"r__"
	.byte	0x1
	.value	0x128
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1796
	.byte	0x1
	.value	0x12c
	.quad	.LFB5
	.quad	.LFE5-.LFB5
	.uleb128 0x1
	.byte	0x9c
	.long	0x45bf
	.uleb128 0x32
	.string	"f"
	.byte	0x1
	.value	0x12d
	.long	0x231d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF1797
	.byte	0x1
	.value	0x136
	.quad	.LFB6
	.quad	.LFE6-.LFB6
	.uleb128 0x1
	.byte	0x9c
	.long	0x45f1
	.uleb128 0x35
	.long	.LASF1813
	.long	0x4601
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14186
	.byte	0
	.uleb128 0xe
	.long	0x4f7
	.long	0x4601
	.uleb128 0xf
	.long	0x33f
	.byte	0x18
	.byte	0
	.uleb128 0xc
	.long	0x45f1
	.uleb128 0x36
	.long	.LASF1832
	.byte	0x1
	.value	0x147
	.long	0x2d
	.quad	.LFB7
	.quad	.LFE7-.LFB7
	.uleb128 0x1
	.byte	0x9c
	.long	0x4647
	.uleb128 0x32
	.string	"var"
	.byte	0x1
	.value	0x148
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.long	.LASF1798
	.byte	0x1
	.value	0x148
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x38
	.long	.LASF1803
	.byte	0x1
	.value	0x15f
	.long	0x2d
	.quad	.LFB8
	.quad	.LFE8-.LFB8
	.uleb128 0x1
	.byte	0x9c
	.long	0x4742
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0x160
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x37
	.long	.LASF1799
	.byte	0x1
	.value	0x161
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0x163
	.long	0x8e8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x33
	.quad	.LBB6
	.quad	.LBE6-.LBB6
	.long	0x46ec
	.uleb128 0x34
	.string	"y"
	.byte	0x1
	.value	0x175
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x34
	.string	"new"
	.byte	0x1
	.value	0x176
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.quad	.LBB7
	.quad	.LBE7-.LBB7
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x17a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB8
	.quad	.LBE8-.LBB8
	.long	0x4711
	.uleb128 0x34
	.string	"tem"
	.byte	0x1
	.value	0x18a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x2f
	.quad	.LBB9
	.quad	.LBE9-.LBB9
	.uleb128 0x39
	.long	.LASF1801
	.byte	0x1
	.value	0x193
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1802
	.byte	0x1
	.value	0x194
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF1804
	.byte	0x1
	.value	0x1b5
	.long	0x328
	.quad	.LFB9
	.quad	.LFE9-.LFB9
	.uleb128 0x1
	.byte	0x9c
	.long	0x4781
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0x1b6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0x1b8
	.long	0x8e8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x31
	.long	.LASF1805
	.byte	0x1
	.value	0x1cc
	.quad	.LFB10
	.quad	.LFE10-.LFB10
	.uleb128 0x1
	.byte	0x9c
	.long	0x47ce
	.uleb128 0x34
	.string	"p"
	.byte	0x1
	.value	0x1ce
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.quad	.LBB10
	.quad	.LBE10-.LBB10
	.uleb128 0x39
	.long	.LASF1798
	.byte	0x1
	.value	0x1d1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1806
	.byte	0x1
	.value	0x1e4
	.quad	.LFB11
	.quad	.LFE11-.LFB11
	.uleb128 0x1
	.byte	0x9c
	.long	0x49ef
	.uleb128 0x32
	.string	"to"
	.byte	0x1
	.value	0x1e5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x37
	.long	.LASF1783
	.byte	0x1
	.value	0x1e5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x37
	.long	.LASF974
	.byte	0x1
	.value	0x1e6
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x39
	.long	.LASF1807
	.byte	0x1
	.value	0x1e8
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x39
	.long	.LASF1808
	.byte	0x1
	.value	0x1e9
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x39
	.long	.LASF1809
	.byte	0x1
	.value	0x1ea
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x39
	.long	.LASF1810
	.byte	0x1
	.value	0x1eb
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0x1ec
	.long	0x2afd
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x39
	.long	.LASF1811
	.byte	0x1
	.value	0x1ed
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x39
	.long	.LASF1812
	.byte	0x1
	.value	0x1f0
	.long	0x8e8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x35
	.long	.LASF1813
	.long	0x49ff
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14231
	.uleb128 0x33
	.quad	.LBB11
	.quad	.LBE11-.LBB11
	.long	0x48d4
	.uleb128 0x39
	.long	.LASF738
	.byte	0x1
	.value	0x21f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x39
	.long	.LASF1814
	.byte	0x1
	.value	0x21f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.uleb128 0x33
	.quad	.LBB12
	.quad	.LBE12-.LBB12
	.long	0x4989
	.uleb128 0x39
	.long	.LASF1814
	.byte	0x1
	.value	0x31f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF1815
	.byte	0x1
	.value	0x320
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF1816
	.byte	0x1
	.value	0x321
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x39
	.long	.LASF1817
	.byte	0x1
	.value	0x322
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x323
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x39
	.long	.LASF1818
	.byte	0x1
	.value	0x324
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x39
	.long	.LASF1819
	.byte	0x1
	.value	0x325
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2f
	.quad	.LBB13
	.quad	.LBE13-.LBB13
	.uleb128 0x39
	.long	.LASF1820
	.byte	0x1
	.value	0x372
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x39
	.long	.LASF1821
	.byte	0x1
	.value	0x373
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB14
	.quad	.LBE14-.LBB14
	.long	0x49cd
	.uleb128 0x39
	.long	.LASF1822
	.byte	0x1
	.value	0x429
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x34
	.string	"tmp"
	.byte	0x1
	.value	0x42a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1823
	.byte	0x1
	.value	0x42b
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x2f
	.quad	.LBB15
	.quad	.LBE15-.LBB15
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x4d5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x4f7
	.long	0x49ff
	.uleb128 0xf
	.long	0x33f
	.byte	0xc
	.byte	0
	.uleb128 0xc
	.long	0x49ef
	.uleb128 0x38
	.long	.LASF1824
	.byte	0x1
	.value	0x4e9
	.long	0x2d
	.quad	.LFB12
	.quad	.LFE12-.LFB12
	.uleb128 0x1
	.byte	0x9c
	.long	0x4a52
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x4ea
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0x4eb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.long	.LASF974
	.byte	0x1
	.value	0x4ec
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF1825
	.byte	0x1
	.value	0x4ff
	.long	0x2d
	.quad	.LFB13
	.quad	.LFE13-.LFB13
	.uleb128 0x1
	.byte	0x9c
	.long	0x4b35
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x500
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x37
	.long	.LASF1826
	.byte	0x1
	.value	0x500
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0x501
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x37
	.long	.LASF974
	.byte	0x1
	.value	0x502
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x504
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x33
	.quad	.LBB16
	.quad	.LBE16-.LBB16
	.long	0x4b04
	.uleb128 0x34
	.string	"val"
	.byte	0x1
	.value	0x51e
	.long	0x4a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.quad	.LBB17
	.quad	.LBE17-.LBB17
	.uleb128 0x39
	.long	.LASF1827
	.byte	0x1
	.value	0x523
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x2f
	.quad	.LBB18
	.quad	.LBE18-.LBB18
	.uleb128 0x34
	.string	"val"
	.byte	0x1
	.value	0x543
	.long	0x4a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.long	.LASF1827
	.byte	0x1
	.value	0x544
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.byte	0
	.uleb128 0x31
	.long	.LASF1779
	.byte	0x1
	.value	0x56d
	.quad	.LFB14
	.quad	.LFE14-.LFB14
	.uleb128 0x1
	.byte	0x9c
	.long	0x4c16
	.uleb128 0x32
	.string	"to"
	.byte	0x1
	.value	0x56e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x37
	.long	.LASF1783
	.byte	0x1
	.value	0x56e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.string	"len"
	.byte	0x1
	.value	0x56f
	.long	0x4b8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x37
	.long	.LASF349
	.byte	0x1
	.value	0x570
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x39
	.long	.LASF1828
	.byte	0x1
	.value	0x572
	.long	0x431a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.long	.LASF1780
	.byte	0x1
	.value	0x573
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x39
	.long	.LASF1784
	.byte	0x1
	.value	0x573
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x39
	.long	.LASF1829
	.byte	0x1
	.value	0x574
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x575
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x39
	.long	.LASF1830
	.byte	0x1
	.value	0x575
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x39
	.long	.LASF1831
	.byte	0x1
	.value	0x576
	.long	0x2afd
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x35
	.long	.LASF1813
	.long	0x4c26
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14315
	.byte	0
	.uleb128 0xe
	.long	0x4f7
	.long	0x4c26
	.uleb128 0xf
	.long	0x33f
	.byte	0xe
	.byte	0
	.uleb128 0xc
	.long	0x4c16
	.uleb128 0x36
	.long	.LASF1833
	.byte	0x1
	.value	0x5e6
	.long	0x4b8
	.quad	.LFB15
	.quad	.LFE15-.LFB15
	.uleb128 0x1
	.byte	0x9c
	.long	0x4cdc
	.uleb128 0x32
	.string	"l"
	.byte	0x1
	.value	0x5e7
	.long	0x4b8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x37
	.long	.LASF349
	.byte	0x1
	.value	0x5e8
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x39
	.long	.LASF1834
	.byte	0x1
	.value	0x5ea
	.long	0x4b8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1829
	.byte	0x1
	.value	0x5eb
	.long	0x4b8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF1813
	.long	0x4cec
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14331
	.uleb128 0x2f
	.quad	.LBB19
	.quad	.LBE19-.LBB19
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x5f3
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF1830
	.byte	0x1
	.value	0x5f3
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x39
	.long	.LASF1831
	.byte	0x1
	.value	0x5f4
	.long	0x2afd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x4f7
	.long	0x4cec
	.uleb128 0xf
	.long	0x33f
	.byte	0x15
	.byte	0
	.uleb128 0xc
	.long	0x4cdc
	.uleb128 0x3a
	.long	.LASF1870
	.byte	0x1
	.value	0x60f
	.quad	.LFB16
	.quad	.LFE16-.LFB16
	.uleb128 0x1
	.byte	0x9c
	.long	0x4d6b
	.uleb128 0x37
	.long	.LASF1736
	.byte	0x1
	.value	0x610
	.long	0x3e76
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x611
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x37
	.long	.LASF1828
	.byte	0x1
	.value	0x612
	.long	0x4d6b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF348
	.byte	0x1
	.value	0x614
	.long	0x49d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x34
	.string	"to1"
	.byte	0x1
	.value	0x615
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.long	.LASF1835
	.byte	0x1
	.value	0x615
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x431a
	.uleb128 0x38
	.long	.LASF1836
	.byte	0x1
	.value	0x656
	.long	0x2d
	.quad	.LFB17
	.quad	.LFE17-.LFB17
	.uleb128 0x1
	.byte	0x9c
	.long	0x4ef0
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0x657
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.string	"y"
	.byte	0x1
	.value	0x657
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x37
	.long	.LASF348
	.byte	0x1
	.value	0x658
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x39
	.long	.LASF1837
	.byte	0x1
	.value	0x65a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x34
	.string	"fn"
	.byte	0x1
	.value	0x65c
	.long	0x123
	.uleb128 0x9
	.byte	0x3
	.quad	fn.14350
	.uleb128 0x39
	.long	.LASF1838
	.byte	0x1
	.value	0x65d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF1839
	.byte	0x1
	.value	0x65d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF349
	.byte	0x1
	.value	0x65f
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x35
	.long	.LASF1813
	.long	0x4f00
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14354
	.uleb128 0x2f
	.quad	.LBB20
	.quad	.LBE20-.LBB20
	.uleb128 0x39
	.long	.LASF1840
	.byte	0x1
	.value	0x67a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x67b
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x33
	.quad	.LBB21
	.quad	.LBE21-.LBB21
	.long	0x4ecd
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0x683
	.long	0x2afd
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x39
	.long	.LASF1841
	.byte	0x1
	.value	0x684
	.long	0x3e46
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.quad	.LBB22
	.quad	.LBE22-.LBB22
	.uleb128 0x34
	.string	"op2"
	.byte	0x1
	.value	0x696
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.long	.LASF978
	.byte	0x1
	.value	0x697
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.string	"pat"
	.byte	0x1
	.value	0x698
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0x2f
	.quad	.LBB23
	.quad	.LBE23-.LBB23
	.uleb128 0x39
	.long	.LASF1842
	.byte	0x1
	.value	0x6da
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x4f7
	.long	0x4f00
	.uleb128 0xf
	.long	0x33f
	.byte	0xf
	.byte	0
	.uleb128 0xc
	.long	0x4ef0
	.uleb128 0x31
	.long	.LASF1843
	.byte	0x1
	.value	0x716
	.quad	.LFB18
	.quad	.LFE18-.LFB18
	.uleb128 0x1
	.byte	0x9c
	.long	0x4f6c
	.uleb128 0x37
	.long	.LASF82
	.byte	0x1
	.value	0x717
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0x718
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x37
	.long	.LASF81
	.byte	0x1
	.value	0x719
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x71a
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x71c
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x31
	.long	.LASF1844
	.byte	0x1
	.value	0x743
	.quad	.LFB19
	.quad	.LFE19-.LFB19
	.uleb128 0x1
	.byte	0x9c
	.long	0x5016
	.uleb128 0x37
	.long	.LASF82
	.byte	0x1
	.value	0x744
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0x745
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x37
	.long	.LASF81
	.byte	0x1
	.value	0x746
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF348
	.byte	0x1
	.value	0x747
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x749
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x74e
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.long	.LASF1813
	.long	0x5016
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14386
	.uleb128 0x2f
	.quad	.LBB24
	.quad	.LBE24-.LBB24
	.uleb128 0x34
	.string	"tem"
	.byte	0x1
	.value	0x785
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x6e4
	.uleb128 0x31
	.long	.LASF1845
	.byte	0x1
	.value	0x799
	.quad	.LFB20
	.quad	.LFE20-.LFB20
	.uleb128 0x1
	.byte	0x9c
	.long	0x512b
	.uleb128 0x32
	.string	"dst"
	.byte	0x1
	.value	0x79a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x37
	.long	.LASF1846
	.byte	0x1
	.value	0x79a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x37
	.long	.LASF1847
	.byte	0x1
	.value	0x79b
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x39
	.long	.LASF1848
	.byte	0x1
	.value	0x79d
	.long	0x101e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.string	"src"
	.byte	0x1
	.value	0x79d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF1849
	.byte	0x1
	.value	0x79e
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x79e
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.long	.LASF1813
	.long	0x512b
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14400
	.uleb128 0x2f
	.quad	.LBB25
	.quad	.LBE25-.LBB25
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x7af
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF1850
	.byte	0x1
	.value	0x7b0
	.long	0x4a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1851
	.byte	0x1
	.value	0x7b1
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x39
	.long	.LASF1852
	.byte	0x1
	.value	0x7b2
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2f
	.quad	.LBB26
	.quad	.LBE26-.LBB26
	.uleb128 0x34
	.string	"mem"
	.byte	0x1
	.value	0x7e6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x4ef0
	.uleb128 0x31
	.long	.LASF1853
	.byte	0x1
	.value	0x807
	.quad	.LFB21
	.quad	.LFE21-.LFB21
	.uleb128 0x1
	.byte	0x9c
	.long	0x526a
	.uleb128 0x37
	.long	.LASF1854
	.byte	0x1
	.value	0x808
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.string	"src"
	.byte	0x1
	.value	0x808
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x37
	.long	.LASF1847
	.byte	0x1
	.value	0x809
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x39
	.long	.LASF1848
	.byte	0x1
	.value	0x80b
	.long	0x101e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.string	"dst"
	.byte	0x1
	.value	0x80b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF1849
	.byte	0x1
	.value	0x80c
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x80c
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x35
	.long	.LASF1813
	.long	0x527a
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14421
	.uleb128 0x33
	.quad	.LBB27
	.quad	.LBE27-.LBB27
	.long	0x51f3
	.uleb128 0x34
	.string	"reg"
	.byte	0x1
	.value	0x81d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x33
	.quad	.LBB28
	.quad	.LBE28-.LBB28
	.long	0x5218
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x828
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x2f
	.quad	.LBB29
	.quad	.LBE29-.LBB29
	.uleb128 0x39
	.long	.LASF1850
	.byte	0x1
	.value	0x843
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x844
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x39
	.long	.LASF1851
	.byte	0x1
	.value	0x845
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x39
	.long	.LASF1855
	.byte	0x1
	.value	0x846
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x4f7
	.long	0x527a
	.uleb128 0xf
	.long	0x33f
	.byte	0x10
	.byte	0
	.uleb128 0xc
	.long	0x526a
	.uleb128 0x38
	.long	.LASF1856
	.byte	0x1
	.value	0x87d
	.long	0x2d
	.quad	.LFB22
	.quad	.LFE22-.LFB22
	.uleb128 0x1
	.byte	0x9c
	.long	0x533e
	.uleb128 0x37
	.long	.LASF1857
	.byte	0x1
	.value	0x87e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x37
	.long	.LASF1858
	.byte	0x1
	.value	0x87f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x37
	.long	.LASF24
	.byte	0x1
	.value	0x880
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x39
	.long	.LASF1859
	.byte	0x1
	.value	0x882
	.long	0x4b8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.string	"src"
	.byte	0x1
	.value	0x883
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.string	"dst"
	.byte	0x1
	.value	0x883
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF1860
	.byte	0x1
	.value	0x884
	.long	0x4b8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1861
	.byte	0x1
	.value	0x885
	.long	0x4b8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF1862
	.byte	0x1
	.value	0x885
	.long	0x4b8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF1863
	.byte	0x1
	.value	0x885
	.long	0x4b8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x31
	.long	.LASF1864
	.byte	0x1
	.value	0x8d0
	.quad	.LFB23
	.quad	.LFE23-.LFB23
	.uleb128 0x1
	.byte	0x9c
	.long	0x538e
	.uleb128 0x37
	.long	.LASF1865
	.byte	0x1
	.value	0x8d1
	.long	0x101e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.string	"reg"
	.byte	0x1
	.value	0x8d1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.long	.LASF1813
	.long	0x538e
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14454
	.byte	0
	.uleb128 0xc
	.long	0x70d
	.uleb128 0x31
	.long	.LASF1866
	.byte	0x1
	.value	0x8e0
	.quad	.LFB24
	.quad	.LFE24-.LFB24
	.uleb128 0x1
	.byte	0x9c
	.long	0x53ff
	.uleb128 0x37
	.long	.LASF1865
	.byte	0x1
	.value	0x8e1
	.long	0x101e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.long	.LASF82
	.byte	0x1
	.value	0x8e2
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x37
	.long	.LASF81
	.byte	0x1
	.value	0x8e3
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x8e5
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x35
	.long	.LASF1813
	.long	0x540f
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14461
	.byte	0
	.uleb128 0xe
	.long	0x4f7
	.long	0x540f
	.uleb128 0xf
	.long	0x33f
	.byte	0x8
	.byte	0
	.uleb128 0xc
	.long	0x53ff
	.uleb128 0x31
	.long	.LASF1867
	.byte	0x1
	.value	0x8f3
	.quad	.LFB25
	.quad	.LFE25-.LFB25
	.uleb128 0x1
	.byte	0x9c
	.long	0x547f
	.uleb128 0x37
	.long	.LASF1865
	.byte	0x1
	.value	0x8f4
	.long	0x101e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.long	.LASF1868
	.byte	0x1
	.value	0x8f5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x8f7
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.quad	.LBB30
	.quad	.LBE30-.LBB30
	.uleb128 0x34
	.string	"reg"
	.byte	0x1
	.value	0x8fb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF1869
	.byte	0x1
	.value	0x907
	.long	0x328
	.quad	.LFB26
	.quad	.LFE26-.LFB26
	.uleb128 0x1
	.byte	0x9c
	.long	0x558d
	.uleb128 0x32
	.string	"len"
	.byte	0x1
	.value	0x908
	.long	0x4b8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x37
	.long	.LASF1789
	.byte	0x1
	.value	0x909
	.long	0x443b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x37
	.long	.LASF1790
	.byte	0x1
	.value	0x90a
	.long	0x4a4
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x37
	.long	.LASF349
	.byte	0x1
	.value	0x90b
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x39
	.long	.LASF1829
	.byte	0x1
	.value	0x90d
	.long	0x4b8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x34
	.string	"l"
	.byte	0x1
	.value	0x90d
	.long	0x4b8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF347
	.byte	0x1
	.value	0x90e
	.long	0x4a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x90f
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x39
	.long	.LASF1830
	.byte	0x1
	.value	0x90f
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF1831
	.byte	0x1
	.value	0x910
	.long	0x2afd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.long	.LASF1787
	.byte	0x1
	.value	0x911
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x34
	.string	"cst"
	.byte	0x1
	.value	0x912
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1813
	.long	0x558d
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14501
	.uleb128 0x2f
	.quad	.LBB31
	.quad	.LBE31-.LBB31
	.uleb128 0x39
	.long	.LASF348
	.byte	0x1
	.value	0x933
	.long	0x49d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x6e4
	.uleb128 0x31
	.long	.LASF1788
	.byte	0x1
	.value	0x956
	.quad	.LFB27
	.quad	.LFE27-.LFB27
	.uleb128 0x1
	.byte	0x9c
	.long	0x5623
	.uleb128 0x32
	.string	"to"
	.byte	0x1
	.value	0x957
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.string	"len"
	.byte	0x1
	.value	0x958
	.long	0x4b8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x37
	.long	.LASF1789
	.byte	0x1
	.value	0x959
	.long	0x443b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x37
	.long	.LASF1790
	.byte	0x1
	.value	0x95a
	.long	0x4a4
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x37
	.long	.LASF349
	.byte	0x1
	.value	0x95b
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x39
	.long	.LASF1828
	.byte	0x1
	.value	0x95d
	.long	0x43aa
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.long	.LASF1813
	.long	0x5623
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14516
	.byte	0
	.uleb128 0xc
	.long	0x4ef0
	.uleb128 0x3a
	.long	.LASF1871
	.byte	0x1
	.value	0x96e
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.uleb128 0x1
	.byte	0x9c
	.long	0x5686
	.uleb128 0x32
	.string	"to"
	.byte	0x1
	.value	0x96f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.string	"len"
	.byte	0x1
	.value	0x970
	.long	0x4b8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x37
	.long	.LASF349
	.byte	0x1
	.value	0x971
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x39
	.long	.LASF1828
	.byte	0x1
	.value	0x973
	.long	0x43aa
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x3b
	.long	.LASF1872
	.byte	0x1
	.value	0x980
	.long	0x2d
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.uleb128 0x1
	.byte	0x9c
	.long	0x56d6
	.uleb128 0x37
	.long	.LASF1828
	.byte	0x1
	.value	0x981
	.long	0x4a4
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x37
	.long	.LASF347
	.byte	0x1
	.value	0x982
	.long	0x4a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x983
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x3a
	.long	.LASF1873
	.byte	0x1
	.value	0x98e
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.uleb128 0x1
	.byte	0x9c
	.long	0x5771
	.uleb128 0x37
	.long	.LASF1828
	.byte	0x1
	.value	0x98f
	.long	0x5771
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF349
	.byte	0x1
	.value	0x990
	.long	0x49d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x39
	.long	.LASF1780
	.byte	0x1
	.value	0x992
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x39
	.long	.LASF1829
	.byte	0x1
	.value	0x993
	.long	0x4b8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x994
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x39
	.long	.LASF1830
	.byte	0x1
	.value	0x994
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF1831
	.byte	0x1
	.value	0x995
	.long	0x2afd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x35
	.long	.LASF1813
	.long	0x5787
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14546
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x43aa
	.uleb128 0xe
	.long	0x4f7
	.long	0x5787
	.uleb128 0xf
	.long	0x33f
	.byte	0x11
	.byte	0
	.uleb128 0xc
	.long	0x5777
	.uleb128 0x3a
	.long	.LASF1874
	.byte	0x1
	.value	0x9e4
	.quad	.LFB31
	.quad	.LFE31-.LFB31
	.uleb128 0x1
	.byte	0x9c
	.long	0x5806
	.uleb128 0x37
	.long	.LASF1736
	.byte	0x1
	.value	0x9e5
	.long	0x3e76
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x9e6
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x37
	.long	.LASF1828
	.byte	0x1
	.value	0x9e7
	.long	0x5771
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF348
	.byte	0x1
	.value	0x9e9
	.long	0x49d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x34
	.string	"to1"
	.byte	0x1
	.value	0x9ea
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x34
	.string	"cst"
	.byte	0x1
	.value	0x9ea
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF1875
	.byte	0x1
	.value	0xa0c
	.long	0x2d
	.quad	.LFB32
	.quad	.LFE32-.LFB32
	.uleb128 0x1
	.byte	0x9c
	.long	0x5966
	.uleb128 0x37
	.long	.LASF1876
	.byte	0x1
	.value	0xa0d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x37
	.long	.LASF348
	.byte	0x1
	.value	0xa0e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x34
	.string	"fn"
	.byte	0x1
	.value	0xa11
	.long	0x123
	.uleb128 0x9
	.byte	0x3
	.quad	fn.14563
	.uleb128 0x39
	.long	.LASF1838
	.byte	0x1
	.value	0xa12
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF1839
	.byte	0x1
	.value	0xa12
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1837
	.byte	0x1
	.value	0xa14
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x39
	.long	.LASF349
	.byte	0x1
	.value	0xa15
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2f
	.quad	.LBB32
	.quad	.LBE32-.LBB32
	.uleb128 0x39
	.long	.LASF1840
	.byte	0x1
	.value	0xa2c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0xa2d
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x33
	.quad	.LBB33
	.quad	.LBE33-.LBB33
	.long	0x5943
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0xa32
	.long	0x2afd
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x39
	.long	.LASF1841
	.byte	0x1
	.value	0xa33
	.long	0x3e46
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.quad	.LBB34
	.quad	.LBE34-.LBB34
	.uleb128 0x34
	.string	"op1"
	.byte	0x1
	.value	0xa43
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.long	.LASF978
	.byte	0x1
	.value	0xa44
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.string	"pat"
	.byte	0x1
	.value	0xa45
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0x2f
	.quad	.LBB35
	.quad	.LBE35-.LBB35
	.uleb128 0x39
	.long	.LASF1842
	.byte	0x1
	.value	0xa84
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF1877
	.byte	0x1
	.value	0xac6
	.long	0x2d
	.quad	.LFB33
	.quad	.LFE33-.LFB33
	.uleb128 0x1
	.byte	0x9c
	.long	0x59e3
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0xac7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.string	"y"
	.byte	0x1
	.value	0xac7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0xac9
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x39
	.long	.LASF1878
	.byte	0x1
	.value	0xaca
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.long	.LASF1879
	.byte	0x1
	.value	0xacb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1813
	.long	0x59e3
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14586
	.byte	0
	.uleb128 0xc
	.long	0x4c16
	.uleb128 0x38
	.long	.LASF1880
	.byte	0x1
	.value	0xafb
	.long	0x2d
	.quad	.LFB34
	.quad	.LFE34-.LFB34
	.uleb128 0x1
	.byte	0x9c
	.long	0x5cca
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0xafc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x32
	.string	"y"
	.byte	0x1
	.value	0xafc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0xafe
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -204
	.uleb128 0x39
	.long	.LASF1881
	.byte	0x1
	.value	0xaff
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x39
	.long	.LASF1882
	.byte	0x1
	.value	0xb00
	.long	0x89f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x35
	.long	.LASF1813
	.long	0x5cca
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14594
	.uleb128 0x33
	.quad	.LBB36
	.quad	.LBE36-.LBB36
	.long	0x5c04
	.uleb128 0x39
	.long	.LASF1883
	.byte	0x1
	.value	0xb14
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x33
	.quad	.LBB37
	.quad	.LBE37-.LBB37
	.long	0x5ad4
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0xb1d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x39
	.long	.LASF1884
	.byte	0x1
	.value	0xb1e
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x39
	.long	.LASF1885
	.byte	0x1
	.value	0xb1e
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.byte	0
	.uleb128 0x2f
	.quad	.LBB38
	.quad	.LBE38-.LBB38
	.uleb128 0x39
	.long	.LASF1886
	.byte	0x1
	.value	0xb62
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x39
	.long	.LASF1887
	.byte	0x1
	.value	0xb62
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF1888
	.byte	0x1
	.value	0xb63
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF1889
	.byte	0x1
	.value	0xb63
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.quad	.LBB39
	.quad	.LBE39-.LBB39
	.uleb128 0x39
	.long	.LASF1890
	.byte	0x1
	.value	0xb71
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -188
	.uleb128 0x39
	.long	.LASF1891
	.byte	0x1
	.value	0xb73
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x2f
	.quad	.LBB40
	.quad	.LBE40-.LBB40
	.uleb128 0x39
	.long	.LASF136
	.byte	0x1
	.value	0xb78
	.long	0x89f
	.uleb128 0x3
	.byte	0x91
	.sleb128 -180
	.uleb128 0x39
	.long	.LASF1892
	.byte	0x1
	.value	0xb7b
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x2f
	.quad	.LBB41
	.quad	.LBE41-.LBB41
	.uleb128 0x34
	.string	"mem"
	.byte	0x1
	.value	0xb80
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x39
	.long	.LASF1893
	.byte	0x1
	.value	0xb82
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x33
	.quad	.LBB42
	.quad	.LBE42-.LBB42
	.long	0x5bdd
	.uleb128 0x39
	.long	.LASF1894
	.byte	0x1
	.value	0xb89
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.byte	0
	.uleb128 0x2f
	.quad	.LBB43
	.quad	.LBE43-.LBB43
	.uleb128 0x39
	.long	.LASF1894
	.byte	0x1
	.value	0xb90
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2f
	.quad	.LBB44
	.quad	.LBE44-.LBB44
	.uleb128 0x39
	.long	.LASF1879
	.byte	0x1
	.value	0xbb6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x34
	.string	"seq"
	.byte	0x1
	.value	0xbb7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF1895
	.byte	0x1
	.value	0xbb7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.long	.LASF1896
	.byte	0x1
	.value	0xbb8
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0xbb9
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x33
	.quad	.LBB45
	.quad	.LBE45-.LBB45
	.long	0x5c97
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0xbc1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0xbc2
	.long	0x8e8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -172
	.byte	0
	.uleb128 0x2f
	.quad	.LBB46
	.quad	.LBE46-.LBB46
	.uleb128 0x39
	.long	.LASF1897
	.byte	0x1
	.value	0xbf6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1898
	.byte	0x1
	.value	0xbf7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x526a
	.uleb128 0x38
	.long	.LASF1899
	.byte	0x1
	.value	0xc2c
	.long	0x2d
	.quad	.LFB35
	.quad	.LFE35-.LFB35
	.uleb128 0x1
	.byte	0x9c
	.long	0x5d2e
	.uleb128 0x37
	.long	.LASF348
	.byte	0x1
	.value	0xc2d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.long	.LASF1900
	.byte	0x1
	.value	0xc2e
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x37
	.long	.LASF1901
	.byte	0x1
	.value	0xc2e
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0xc30
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3a
	.long	.LASF1902
	.byte	0x1
	.value	0xc5f
	.quad	.LFB36
	.quad	.LFE36-.LFB36
	.uleb128 0x1
	.byte	0x9c
	.long	0x5dc4
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0xc61
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0xc60
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x37
	.long	.LASF24
	.byte	0x1
	.value	0xc62
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF1903
	.byte	0x1
	.value	0xc64
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF1904
	.byte	0x1
	.value	0xc65
	.long	0x49d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1855
	.byte	0x1
	.value	0xc66
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x39
	.long	.LASF1831
	.byte	0x1
	.value	0xc67
	.long	0x2afd
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x39
	.long	.LASF1841
	.byte	0x1
	.value	0xc68
	.long	0x3e46
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF1905
	.byte	0x1
	.value	0xcb6
	.quad	.LFB37
	.quad	.LFE37-.LFB37
	.uleb128 0x1
	.byte	0x9c
	.long	0x60be
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0xcb9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0xcba
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -188
	.uleb128 0x37
	.long	.LASF24
	.byte	0x1
	.value	0xcbb
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x37
	.long	.LASF348
	.byte	0x1
	.value	0xcbc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x37
	.long	.LASF349
	.byte	0x1
	.value	0xcbd
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x37
	.long	.LASF1906
	.byte	0x1
	.value	0xcbe
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x32
	.string	"reg"
	.byte	0x1
	.value	0xcbf
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x37
	.long	.LASF1900
	.byte	0x1
	.value	0xcc0
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x37
	.long	.LASF1907
	.byte	0x1
	.value	0xcc1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x37
	.long	.LASF1908
	.byte	0x1
	.value	0xcc2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x37
	.long	.LASF1909
	.byte	0x1
	.value	0xcc3
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 32
	.uleb128 0x37
	.long	.LASF1910
	.byte	0x1
	.value	0xcc4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 40
	.uleb128 0x39
	.long	.LASF1911
	.byte	0x1
	.value	0xcc6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x39
	.long	.LASF1912
	.byte	0x1
	.value	0xcc7
	.long	0x2ab2
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x39
	.long	.LASF1913
	.byte	0x1
	.value	0xcd1
	.long	0x2ab2
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x35
	.long	.LASF1813
	.long	0x60be
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14660
	.uleb128 0x3c
	.string	"ret"
	.byte	0x1
	.value	0xdff
	.quad	.L603
	.uleb128 0x33
	.quad	.LBB47
	.quad	.LBE47-.LBB47
	.long	0x6009
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0xcdf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x39
	.long	.LASF7
	.byte	0x1
	.value	0xce0
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x39
	.long	.LASF347
	.byte	0x1
	.value	0xce1
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x39
	.long	.LASF1914
	.byte	0x1
	.value	0xce2
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2f
	.quad	.LBB48
	.quad	.LBE48-.LBB48
	.uleb128 0x39
	.long	.LASF1915
	.byte	0x1
	.value	0xd13
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2f
	.quad	.LBB49
	.quad	.LBE49-.LBB49
	.uleb128 0x39
	.long	.LASF1840
	.byte	0x1
	.value	0xd4c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0xd4d
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x2f
	.quad	.LBB50
	.quad	.LBE50-.LBB50
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0xd53
	.long	0x2afd
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x39
	.long	.LASF1841
	.byte	0x1
	.value	0xd54
	.long	0x3e46
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.quad	.LBB51
	.quad	.LBE51-.LBB51
	.uleb128 0x34
	.string	"op2"
	.byte	0x1
	.value	0xd62
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x39
	.long	.LASF978
	.byte	0x1
	.value	0xd63
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x34
	.string	"pat"
	.byte	0x1
	.value	0xd64
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB52
	.quad	.LBE52-.LBB52
	.long	0x607d
	.uleb128 0x39
	.long	.LASF348
	.byte	0x1
	.value	0xd9a
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0xd9b
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x39
	.long	.LASF1916
	.byte	0x1
	.value	0xd9c
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x39
	.long	.LASF347
	.byte	0x1
	.value	0xd9f
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x39
	.long	.LASF1917
	.byte	0x1
	.value	0xda0
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x39
	.long	.LASF1914
	.byte	0x1
	.value	0xda1
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.byte	0
	.uleb128 0x2f
	.quad	.LBB53
	.quad	.LBE53-.LBB53
	.uleb128 0x39
	.long	.LASF1918
	.byte	0x1
	.value	0xdd5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.long	.LASF1915
	.byte	0x1
	.value	0xdd6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1855
	.byte	0x1
	.value	0xdd7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x4c16
	.uleb128 0x36
	.long	.LASF1919
	.byte	0x1
	.value	0xe18
	.long	0x2d
	.quad	.LFB38
	.quad	.LFE38-.LFB38
	.uleb128 0x1
	.byte	0x9c
	.long	0x60f3
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0xe19
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF1920
	.byte	0x1
	.value	0xe34
	.long	0x2d
	.quad	.LFB39
	.quad	.LFE39-.LFB39
	.uleb128 0x1
	.byte	0x9c
	.long	0x62e0
	.uleb128 0x32
	.string	"to"
	.byte	0x1
	.value	0xe35
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x37
	.long	.LASF1783
	.byte	0x1
	.value	0xe35
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x37
	.long	.LASF1921
	.byte	0x1
	.value	0xe36
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -180
	.uleb128 0x37
	.long	.LASF1922
	.byte	0x1
	.value	0xe37
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x39
	.long	.LASF1923
	.byte	0x1
	.value	0xe39
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x39
	.long	.LASF886
	.byte	0x1
	.value	0xe3a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.long	.LASF1813
	.long	0x62e0
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14705
	.uleb128 0x33
	.quad	.LBB54
	.quad	.LBE54-.LBB54
	.long	0x6263
	.uleb128 0x39
	.long	.LASF1924
	.byte	0x1
	.value	0xe4d
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x39
	.long	.LASF1860
	.byte	0x1
	.value	0xe4e
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x39
	.long	.LASF1861
	.byte	0x1
	.value	0xe4e
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x39
	.long	.LASF1925
	.byte	0x1
	.value	0xe4f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF347
	.byte	0x1
	.value	0xe50
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x39
	.long	.LASF974
	.byte	0x1
	.value	0xe51
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x39
	.long	.LASF1926
	.byte	0x1
	.value	0xe52
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x34
	.string	"tem"
	.byte	0x1
	.value	0xe53
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x33
	.quad	.LBB55
	.quad	.LBE55-.LBB55
	.long	0x6241
	.uleb128 0x39
	.long	.LASF1927
	.byte	0x1
	.value	0xe63
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.uleb128 0x2f
	.quad	.LBB56
	.quad	.LBE56-.LBB56
	.uleb128 0x39
	.long	.LASF1928
	.byte	0x1
	.value	0xe85
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB57
	.quad	.LBE57-.LBB57
	.long	0x6289
	.uleb128 0x39
	.long	.LASF738
	.byte	0x1
	.value	0xed4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x33
	.quad	.LBB58
	.quad	.LBE58-.LBB58
	.long	0x62af
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0xefa
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x2f
	.quad	.LBB59
	.quad	.LBE59-.LBB59
	.uleb128 0x39
	.long	.LASF1929
	.byte	0x1
	.value	0xf11
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.long	.LASF348
	.byte	0x1
	.value	0xf11
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x5777
	.uleb128 0x38
	.long	.LASF1930
	.byte	0x1
	.value	0xf4f
	.long	0x2d
	.quad	.LFB40
	.quad	.LFE40-.LFB40
	.uleb128 0x1
	.byte	0x9c
	.long	0x643e
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0xf50
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x37
	.long	.LASF1915
	.byte	0x1
	.value	0xf51
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x37
	.long	.LASF1921
	.byte	0x1
	.value	0xf52
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0xf54
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.long	.LASF1931
	.byte	0x1
	.value	0xf55
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x39
	.long	.LASF1932
	.byte	0x1
	.value	0xf56
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x33
	.quad	.LBB60
	.quad	.LBE60-.LBB60
	.long	0x639b
	.uleb128 0x39
	.long	.LASF1933
	.byte	0x1
	.value	0xf67
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF1934
	.byte	0x1
	.value	0xf67
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x33
	.quad	.LBB61
	.quad	.LBE61-.LBB61
	.long	0x63c1
	.uleb128 0x39
	.long	.LASF1935
	.byte	0x1
	.value	0xfae
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.uleb128 0x3d
	.long	.Ldebug_ranges0+0
	.long	0x63db
	.uleb128 0x39
	.long	.LASF974
	.byte	0x1
	.value	0x102e
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.byte	0
	.uleb128 0x2f
	.quad	.LBB64
	.quad	.LBE64-.LBB64
	.uleb128 0x39
	.long	.LASF348
	.byte	0x1
	.value	0x1041
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.quad	.LBB65
	.quad	.LBE65-.LBB65
	.uleb128 0x39
	.long	.LASF1936
	.byte	0x1
	.value	0x1049
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1937
	.byte	0x1
	.value	0x104d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF1938
	.byte	0x1
	.value	0x104f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x36
	.long	.LASF1939
	.byte	0x1
	.value	0x1097
	.long	0x328
	.quad	.LFB41
	.quad	.LFE41-.LFB41
	.uleb128 0x1
	.byte	0x9c
	.long	0x647f
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x1098
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.string	"elt"
	.byte	0x1
	.value	0x109a
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x36
	.long	.LASF1940
	.byte	0x1
	.value	0x10c7
	.long	0x328
	.quad	.LFB42
	.quad	.LFE42-.LFB42
	.uleb128 0x1
	.byte	0x9c
	.long	0x64f0
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x10c8
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.quad	.LBB66
	.quad	.LBE66-.LBB66
	.uleb128 0x39
	.long	.LASF1941
	.byte	0x1
	.value	0x10cc
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.long	.LASF1942
	.byte	0x1
	.value	0x10cc
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x34
	.string	"elt"
	.byte	0x1
	.value	0x10cd
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3a
	.long	.LASF1943
	.byte	0x1
	.value	0x10f1
	.quad	.LFB43
	.quad	.LFE43-.LFB43
	.uleb128 0x1
	.byte	0x9c
	.long	0x6589
	.uleb128 0x37
	.long	.LASF1915
	.byte	0x1
	.value	0x10f3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.long	.LASF1860
	.byte	0x1
	.value	0x10f4
	.long	0x4b8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.long	.LASF1861
	.byte	0x1
	.value	0x10f5
	.long	0x4a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x10f6
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x10f7
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x37
	.long	.LASF24
	.byte	0x1
	.value	0x10f7
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x37
	.long	.LASF1944
	.byte	0x1
	.value	0x10f8
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x37
	.long	.LASF777
	.byte	0x1
	.value	0x10f9
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.byte	0
	.uleb128 0x3a
	.long	.LASF1945
	.byte	0x1
	.value	0x1123
	.quad	.LFB44
	.quad	.LFE44-.LFB44
	.uleb128 0x1
	.byte	0x9c
	.long	0x6b3f
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x1124
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -584
	.uleb128 0x37
	.long	.LASF1915
	.byte	0x1
	.value	0x1125
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -592
	.uleb128 0x37
	.long	.LASF1944
	.byte	0x1
	.value	0x1126
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -596
	.uleb128 0x37
	.long	.LASF348
	.byte	0x1
	.value	0x1127
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -608
	.uleb128 0x39
	.long	.LASF24
	.byte	0x1
	.value	0x1129
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -336
	.uleb128 0x35
	.long	.LASF1813
	.long	0x6b3f
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14784
	.uleb128 0x33
	.quad	.LBB67
	.quad	.LBE67-.LBB67
	.long	0x66e4
	.uleb128 0x34
	.string	"elt"
	.byte	0x1
	.value	0x1131
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -520
	.uleb128 0x2f
	.quad	.LBB68
	.quad	.LBE68-.LBB68
	.uleb128 0x39
	.long	.LASF1946
	.byte	0x1
	.value	0x1162
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF738
	.byte	0x1
	.value	0x1163
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x1164
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -564
	.uleb128 0x39
	.long	.LASF1860
	.byte	0x1
	.value	0x1165
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -512
	.uleb128 0x39
	.long	.LASF1861
	.byte	0x1
	.value	0x1166
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -504
	.uleb128 0x39
	.long	.LASF974
	.byte	0x1
	.value	0x1167
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -524
	.uleb128 0x39
	.long	.LASF347
	.byte	0x1
	.value	0x1168
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -496
	.uleb128 0x39
	.long	.LASF1923
	.byte	0x1
	.value	0x1169
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -488
	.uleb128 0x2f
	.quad	.LBB69
	.quad	.LBE69-.LBB69
	.uleb128 0x39
	.long	.LASF1927
	.byte	0x1
	.value	0x118a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -480
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB70
	.quad	.LBE70-.LBB70
	.long	0x697e
	.uleb128 0x34
	.string	"elt"
	.byte	0x1
	.value	0x11d5
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -472
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x11d6
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -560
	.uleb128 0x39
	.long	.LASF1947
	.byte	0x1
	.value	0x11d7
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -556
	.uleb128 0x39
	.long	.LASF1948
	.byte	0x1
	.value	0x11d8
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -464
	.uleb128 0x39
	.long	.LASF1949
	.byte	0x1
	.value	0x11d9
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x39
	.long	.LASF1950
	.byte	0x1
	.value	0x11da
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -532
	.uleb128 0x39
	.long	.LASF1951
	.byte	0x1
	.value	0x11db
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -456
	.uleb128 0x39
	.long	.LASF1952
	.byte	0x1
	.value	0x11dc
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -448
	.uleb128 0x33
	.quad	.LBB71
	.quad	.LBE71-.LBB71
	.long	0x6811
	.uleb128 0x39
	.long	.LASF1953
	.byte	0x1
	.value	0x11fc
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -440
	.uleb128 0x39
	.long	.LASF1954
	.byte	0x1
	.value	0x11fc
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -432
	.uleb128 0x2f
	.quad	.LBB72
	.quad	.LBE72-.LBB72
	.uleb128 0x39
	.long	.LASF1820
	.byte	0x1
	.value	0x1206
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x39
	.long	.LASF1955
	.byte	0x1
	.value	0x1207
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -424
	.uleb128 0x2f
	.quad	.LBB73
	.quad	.LBE73-.LBB73
	.uleb128 0x39
	.long	.LASF1956
	.byte	0x1
	.value	0x120b
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x39
	.long	.LASF1957
	.byte	0x1
	.value	0x120c
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2f
	.quad	.LBB74
	.quad	.LBE74-.LBB74
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x123d
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -528
	.uleb128 0x39
	.long	.LASF1860
	.byte	0x1
	.value	0x123e
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -416
	.uleb128 0x39
	.long	.LASF1861
	.byte	0x1
	.value	0x123f
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -408
	.uleb128 0x39
	.long	.LASF974
	.byte	0x1
	.value	0x1240
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -568
	.uleb128 0x39
	.long	.LASF738
	.byte	0x1
	.value	0x1241
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x39
	.long	.LASF1820
	.byte	0x1
	.value	0x1242
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -400
	.uleb128 0x39
	.long	.LASF1958
	.byte	0x1
	.value	0x1243
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x3d
	.long	.Ldebug_ranges0+0x30
	.long	0x695a
	.uleb128 0x39
	.long	.LASF1956
	.byte	0x1
	.value	0x1253
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x39
	.long	.LASF1957
	.byte	0x1
	.value	0x1254
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x39
	.long	.LASF1959
	.byte	0x1
	.value	0x1255
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x39
	.long	.LASF1960
	.byte	0x1
	.value	0x1255
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.long	.LASF1961
	.byte	0x1
	.value	0x1255
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x39
	.long	.LASF1962
	.byte	0x1
	.value	0x1255
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x39
	.long	.LASF1963
	.byte	0x1
	.value	0x1255
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x39
	.long	.LASF1964
	.byte	0x1
	.value	0x1256
	.long	0x6b49
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x34
	.string	"lo"
	.byte	0x1
	.value	0x1257
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -392
	.uleb128 0x34
	.string	"hi"
	.byte	0x1
	.value	0x1257
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x39
	.long	.LASF1953
	.byte	0x1
	.value	0x1257
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x39
	.long	.LASF1965
	.byte	0x1
	.value	0x1258
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.byte	0
	.uleb128 0x2f
	.quad	.LBB77
	.quad	.LBE77-.LBB77
	.uleb128 0x39
	.long	.LASF1965
	.byte	0x1
	.value	0x12b4
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2f
	.quad	.LBB78
	.quad	.LBE78-.LBB78
	.uleb128 0x34
	.string	"elt"
	.byte	0x1
	.value	0x12e1
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -384
	.uleb128 0x39
	.long	.LASF1966
	.byte	0x1
	.value	0x12e2
	.long	0x4b8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -328
	.uleb128 0x39
	.long	.LASF1967
	.byte	0x1
	.value	0x12e2
	.long	0x4b8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x39
	.long	.LASF1948
	.byte	0x1
	.value	0x12e3
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -320
	.uleb128 0x39
	.long	.LASF1968
	.byte	0x1
	.value	0x12e4
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -312
	.uleb128 0x39
	.long	.LASF1969
	.byte	0x1
	.value	0x12e4
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x39
	.long	.LASF1970
	.byte	0x1
	.value	0x12e4
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x3d
	.long	.Ldebug_ranges0+0x60
	.long	0x6aab
	.uleb128 0x39
	.long	.LASF1971
	.byte	0x1
	.value	0x1306
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -540
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x1307
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -536
	.uleb128 0x39
	.long	.LASF1972
	.byte	0x1
	.value	0x1308
	.long	0x4f1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x39
	.long	.LASF1973
	.byte	0x1
	.value	0x1309
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -376
	.uleb128 0x39
	.long	.LASF1974
	.byte	0x1
	.value	0x130a
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -552
	.uleb128 0x39
	.long	.LASF1975
	.byte	0x1
	.value	0x130b
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -548
	.uleb128 0x39
	.long	.LASF347
	.byte	0x1
	.value	0x130c
	.long	0x49d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -544
	.uleb128 0x2f
	.quad	.LBB80
	.quad	.LBE80-.LBB80
	.uleb128 0x39
	.long	.LASF1976
	.byte	0x1
	.value	0x131e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x39
	.long	.LASF1923
	.byte	0x1
	.value	0x131f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -368
	.byte	0
	.byte	0
	.uleb128 0x2f
	.quad	.LBB82
	.quad	.LBE82-.LBB82
	.uleb128 0x39
	.long	.LASF1977
	.byte	0x1
	.value	0x1344
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -360
	.uleb128 0x39
	.long	.LASF1978
	.byte	0x1
	.value	0x1346
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -352
	.uleb128 0x39
	.long	.LASF1979
	.byte	0x1
	.value	0x1348
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x39
	.long	.LASF1980
	.byte	0x1
	.value	0x1348
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x39
	.long	.LASF1981
	.byte	0x1
	.value	0x134a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x39
	.long	.LASF1982
	.byte	0x1
	.value	0x134a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x39
	.long	.LASF1983
	.byte	0x1
	.value	0x134a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x39
	.long	.LASF1984
	.byte	0x1
	.value	0x134a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -344
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x5777
	.uleb128 0x1f
	.long	.LASF1985
	.uleb128 0x3
	.byte	0x8
	.long	0x6b44
	.uleb128 0x36
	.long	.LASF1986
	.byte	0x1
	.value	0x13a7
	.long	0x2d
	.quad	.LFB45
	.quad	.LFE45-.LFB45
	.uleb128 0x1
	.byte	0x9c
	.long	0x6cdc
	.uleb128 0x37
	.long	.LASF1915
	.byte	0x1
	.value	0x13a9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x37
	.long	.LASF1860
	.byte	0x1
	.value	0x13aa
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x37
	.long	.LASF1861
	.byte	0x1
	.value	0x13ab
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x13ac
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x13ad
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x37
	.long	.LASF1987
	.byte	0x1
	.value	0x13ae
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x37
	.long	.LASF974
	.byte	0x1
	.value	0x13af
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x37
	.long	.LASF24
	.byte	0x1
	.value	0x13b0
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x37
	.long	.LASF777
	.byte	0x1
	.value	0x13b1
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x39
	.long	.LASF1988
	.byte	0x1
	.value	0x13b3
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF1813
	.long	0x6cec
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14875
	.uleb128 0x33
	.quad	.LBB83
	.quad	.LBE83-.LBB83
	.long	0x6c55
	.uleb128 0x39
	.long	.LASF1876
	.byte	0x1
	.value	0x13cd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1989
	.byte	0x1
	.value	0x13d1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x33
	.quad	.LBB84
	.quad	.LBE84-.LBB84
	.long	0x6cab
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x13fe
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.quad	.LBB85
	.quad	.LBE85-.LBB85
	.uleb128 0x39
	.long	.LASF1953
	.byte	0x1
	.value	0x142e
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x39
	.long	.LASF1830
	.byte	0x1
	.value	0x142f
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.byte	0
	.byte	0
	.uleb128 0x2f
	.quad	.LBB86
	.quad	.LBE86-.LBB86
	.uleb128 0x39
	.long	.LASF1918
	.byte	0x1
	.value	0x1448
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.long	.LASF1923
	.byte	0x1
	.value	0x1449
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x4f7
	.long	0x6cec
	.uleb128 0xf
	.long	0x33f
	.byte	0xb
	.byte	0
	.uleb128 0xc
	.long	0x6cdc
	.uleb128 0x38
	.long	.LASF1990
	.byte	0x1
	.value	0x147d
	.long	0x123
	.quad	.LFB46
	.quad	.LFE46-.LFB46
	.uleb128 0x1
	.byte	0x9c
	.long	0x6e9d
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x147f
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x37
	.long	.LASF1991
	.byte	0x1
	.value	0x1480
	.long	0x6e9d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x37
	.long	.LASF1992
	.byte	0x1
	.value	0x1481
	.long	0x6e9d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x37
	.long	.LASF1993
	.byte	0x1
	.value	0x1482
	.long	0x285a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x37
	.long	.LASF1994
	.byte	0x1
	.value	0x1483
	.long	0x6ea3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x37
	.long	.LASF1995
	.byte	0x1
	.value	0x1484
	.long	0x71d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x37
	.long	.LASF1996
	.byte	0x1
	.value	0x1485
	.long	0x71d
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x39
	.long	.LASF1997
	.byte	0x1
	.value	0x1487
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x1488
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x39
	.long	.LASF347
	.byte	0x1
	.value	0x1489
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x39
	.long	.LASF1998
	.byte	0x1
	.value	0x148a
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x39
	.long	.LASF1999
	.byte	0x1
	.value	0x148b
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x34
	.string	"tem"
	.byte	0x1
	.value	0x148c
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x33
	.quad	.LBB87
	.quad	.LBE87-.LBB87
	.long	0x6e17
	.uleb128 0x39
	.long	.LASF1946
	.byte	0x1
	.value	0x14b8
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF2000
	.byte	0x1
	.value	0x14b9
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.byte	0
	.uleb128 0x33
	.quad	.LBB88
	.quad	.LBE88-.LBB88
	.long	0x6e7a
	.uleb128 0x39
	.long	.LASF1820
	.byte	0x1
	.value	0x14ce
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.long	.LASF2001
	.byte	0x1
	.value	0x14cf
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF1948
	.byte	0x1
	.value	0x14d0
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.long	.LASF2002
	.byte	0x1
	.value	0x14d1
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF2003
	.byte	0x1
	.value	0x14d2
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.uleb128 0x2f
	.quad	.LBB89
	.quad	.LBE89-.LBB89
	.uleb128 0x34
	.string	"new"
	.byte	0x1
	.value	0x14ee
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4a6
	.uleb128 0x3
	.byte	0x8
	.long	0x72a
	.uleb128 0x3e
	.long	.LASF2004
	.byte	0x1
	.value	0x151b
	.long	0x328
	.quad	.LFB47
	.quad	.LFE47-.LFB47
	.uleb128 0x1
	.byte	0x9c
	.long	0x6ed9
	.uleb128 0x32
	.string	"t"
	.byte	0x1
	.value	0x151c
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF2005
	.byte	0x1
	.value	0x153a
	.long	0x2d
	.quad	.LFB48
	.quad	.LFE48-.LFB48
	.uleb128 0x1
	.byte	0x9c
	.long	0x6f7a
	.uleb128 0x37
	.long	.LASF738
	.byte	0x1
	.value	0x153b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x37
	.long	.LASF1915
	.byte	0x1
	.value	0x153b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.long	.LASF2006
	.byte	0x1
	.value	0x153d
	.long	0x3a41
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.string	"tmp"
	.byte	0x1
	.value	0x1540
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x34
	.string	"op2"
	.byte	0x1
	.value	0x1541
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF2007
	.byte	0x1
	.value	0x1543
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.quad	.LBB90
	.quad	.LBE90-.LBB90
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x157a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF1768
	.byte	0x1
	.value	0x15a5
	.long	0x328
	.quad	.LFB49
	.quad	.LFE49-.LFB49
	.uleb128 0x1
	.byte	0x9c
	.long	0x704b
	.uleb128 0x32
	.string	"x"
	.byte	0x1
	.value	0x15a6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x15a7
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x37
	.long	.LASF2008
	.byte	0x1
	.value	0x15a8
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x39
	.long	.LASF2009
	.byte	0x1
	.value	0x15aa
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x15ab
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x39
	.long	.LASF2010
	.byte	0x1
	.value	0x15ab
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x39
	.long	.LASF2011
	.byte	0x1
	.value	0x15ac
	.long	0x123
	.uleb128 0x9
	.byte	0x3
	.quad	save_expr_list.14936
	.uleb128 0x35
	.long	.LASF1813
	.long	0x704b
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14961
	.uleb128 0x2f
	.quad	.LBB91
	.quad	.LBE91-.LBB91
	.uleb128 0x34
	.string	"rtn"
	.byte	0x1
	.value	0x15d7
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.string	"t"
	.byte	0x1
	.value	0x15d8
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x6cdc
	.uleb128 0x36
	.long	.LASF2012
	.byte	0x1
	.value	0x1690
	.long	0x2d
	.quad	.LFB50
	.quad	.LFE50-.LFB50
	.uleb128 0x1
	.byte	0x9c
	.long	0x7082
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x1691
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x36
	.long	.LASF2013
	.byte	0x1
	.value	0x16d9
	.long	0x4a6
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x70d0
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x16da
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.string	"c0"
	.byte	0x1
	.value	0x16dc
	.long	0x4a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x34
	.string	"c1"
	.byte	0x1
	.value	0x16dc
	.long	0x4a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x36
	.long	.LASF2014
	.byte	0x1
	.value	0x171f
	.long	0x4a6
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x712f
	.uleb128 0x37
	.long	.LASF24
	.byte	0x1
	.value	0x1720
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x1721
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF2015
	.byte	0x1
	.value	0x1723
	.long	0x4a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x39
	.long	.LASF2016
	.byte	0x1
	.value	0x1723
	.long	0x4a6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x38
	.long	.LASF2017
	.byte	0x1
	.value	0x1733
	.long	0x123
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x71be
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x1734
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF2018
	.byte	0x1
	.value	0x1735
	.long	0x285a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF24
	.byte	0x1
	.value	0x1737
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.long	.LASF2019
	.byte	0x1
	.value	0x1738
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.quad	.LBB92
	.quad	.LBE92-.LBB92
	.uleb128 0x39
	.long	.LASF2020
	.byte	0x1
	.value	0x173f
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.string	"elt"
	.byte	0x1
	.value	0x1740
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF2021
	.byte	0x1
	.value	0x1790
	.long	0x2d
	.quad	.LFB54
	.quad	.LFE54-.LFB54
	.uleb128 0x1
	.byte	0x9c
	.long	0x7eee
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x1791
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -968
	.uleb128 0x37
	.long	.LASF1915
	.byte	0x1
	.value	0x1792
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -976
	.uleb128 0x37
	.long	.LASF1830
	.byte	0x1
	.value	0x1793
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -980
	.uleb128 0x37
	.long	.LASF2022
	.byte	0x1
	.value	0x1794
	.long	0x2a87
	.uleb128 0x3
	.byte	0x91
	.sleb128 -984
	.uleb128 0x34
	.string	"op0"
	.byte	0x1
	.value	0x1796
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -848
	.uleb128 0x34
	.string	"op1"
	.byte	0x1
	.value	0x1796
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -840
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x1796
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -832
	.uleb128 0x39
	.long	.LASF24
	.byte	0x1
	.value	0x1797
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -664
	.uleb128 0x39
	.long	.LASF974
	.byte	0x1
	.value	0x1798
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -952
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x1799
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -928
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0x179a
	.long	0x10be
	.uleb128 0x3
	.byte	0x91
	.sleb128 -932
	.uleb128 0x39
	.long	.LASF2023
	.byte	0x1
	.value	0x179b
	.long	0x3a41
	.uleb128 0x3
	.byte	0x91
	.sleb128 -824
	.uleb128 0x39
	.long	.LASF2007
	.byte	0x1
	.value	0x179c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -816
	.uleb128 0x39
	.long	.LASF2024
	.byte	0x1
	.value	0x179c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -656
	.uleb128 0x39
	.long	.LASF2025
	.byte	0x1
	.value	0x179d
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -924
	.uleb128 0x39
	.long	.LASF776
	.byte	0x1
	.value	0x179e
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -808
	.uleb128 0x35
	.long	.LASF1813
	.long	0x7eee
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15048
	.uleb128 0x3f
	.long	.LASF2026
	.byte	0x1
	.value	0x1d2f
	.quad	.L1184
	.uleb128 0x3f
	.long	.LASF2027
	.byte	0x1
	.value	0x22a2
	.quad	.L1507
	.uleb128 0x3f
	.long	.LASF2028
	.byte	0x1
	.value	0x1d9d
	.quad	.L1508
	.uleb128 0x3f
	.long	.LASF2029
	.byte	0x1
	.value	0x229d
	.quad	.L1511
	.uleb128 0x33
	.quad	.LBB93
	.quad	.LBE93-.LBB93
	.long	0x7379
	.uleb128 0x39
	.long	.LASF781
	.byte	0x1
	.value	0x1822
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -648
	.uleb128 0x2f
	.quad	.LBB94
	.quad	.LBE94-.LBB94
	.uleb128 0x34
	.string	"p"
	.byte	0x1
	.value	0x1827
	.long	0x231d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -640
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB95
	.quad	.LBE95-.LBB95
	.long	0x739f
	.uleb128 0x39
	.long	.LASF738
	.byte	0x1
	.value	0x184b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -632
	.byte	0
	.uleb128 0x33
	.quad	.LBB96
	.quad	.LBE96-.LBB96
	.long	0x73c5
	.uleb128 0x39
	.long	.LASF1918
	.byte	0x1
	.value	0x187b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -800
	.byte	0
	.uleb128 0x33
	.quad	.LBB97
	.quad	.LBE97-.LBB97
	.long	0x740b
	.uleb128 0x39
	.long	.LASF2030
	.byte	0x1
	.value	0x18fa
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -616
	.uleb128 0x39
	.long	.LASF2031
	.byte	0x1
	.value	0x18fb
	.long	0x6f4
	.uleb128 0x3
	.byte	0x91
	.sleb128 -624
	.uleb128 0x39
	.long	.LASF2032
	.byte	0x1
	.value	0x18fc
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -920
	.byte	0
	.uleb128 0x33
	.quad	.LBB98
	.quad	.LBE98-.LBB98
	.long	0x7431
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x1961
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -608
	.byte	0
	.uleb128 0x33
	.quad	.LBB99
	.quad	.LBE99-.LBB99
	.long	0x7467
	.uleb128 0x39
	.long	.LASF2033
	.byte	0x1
	.value	0x1969
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -600
	.uleb128 0x39
	.long	.LASF2019
	.byte	0x1
	.value	0x196a
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -856
	.byte	0
	.uleb128 0x33
	.quad	.LBB100
	.quad	.LBE100-.LBB100
	.long	0x749d
	.uleb128 0x39
	.long	.LASF747
	.byte	0x1
	.value	0x19a8
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -792
	.uleb128 0x39
	.long	.LASF2034
	.byte	0x1
	.value	0x19a9
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -916
	.byte	0
	.uleb128 0x33
	.quad	.LBB101
	.quad	.LBE101-.LBB101
	.long	0x74c3
	.uleb128 0x34
	.string	"elt"
	.byte	0x1
	.value	0x19d8
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -784
	.byte	0
	.uleb128 0x33
	.quad	.LBB102
	.quad	.LBE102-.LBB102
	.long	0x74e9
	.uleb128 0x39
	.long	.LASF2035
	.byte	0x1
	.value	0x19f2
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -776
	.byte	0
	.uleb128 0x33
	.quad	.LBB103
	.quad	.LBE103-.LBB103
	.long	0x752f
	.uleb128 0x39
	.long	.LASF2036
	.byte	0x1
	.value	0x1a0f
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -592
	.uleb128 0x39
	.long	.LASF1820
	.byte	0x1
	.value	0x1a10
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -856
	.uleb128 0x39
	.long	.LASF20
	.byte	0x1
	.value	0x1a11
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -584
	.byte	0
	.uleb128 0x33
	.quad	.LBB104
	.quad	.LBE104-.LBB104
	.long	0x7633
	.uleb128 0x39
	.long	.LASF2001
	.byte	0x1
	.value	0x1a32
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -576
	.uleb128 0x39
	.long	.LASF1948
	.byte	0x1
	.value	0x1a33
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -568
	.uleb128 0x39
	.long	.LASF2002
	.byte	0x1
	.value	0x1a34
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -560
	.uleb128 0x39
	.long	.LASF1820
	.byte	0x1
	.value	0x1a35
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -768
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x1a36
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -760
	.uleb128 0x33
	.quad	.LBB105
	.quad	.LBE105-.LBB105
	.long	0x75b8
	.uleb128 0x39
	.long	.LASF14
	.byte	0x1
	.value	0x1a5e
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -752
	.byte	0
	.uleb128 0x2f
	.quad	.LBB106
	.quad	.LBE106-.LBB106
	.uleb128 0x39
	.long	.LASF1763
	.byte	0x1
	.value	0x1a73
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -552
	.uleb128 0x33
	.quad	.LBB107
	.quad	.LBE107-.LBB107
	.long	0x75ff
	.uleb128 0x39
	.long	.LASF14
	.byte	0x1
	.value	0x1a77
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -744
	.byte	0
	.uleb128 0x2f
	.quad	.LBB108
	.quad	.LBE108-.LBB108
	.uleb128 0x39
	.long	.LASF24
	.byte	0x1
	.value	0x1a87
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -544
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x1a88
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -912
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB109
	.quad	.LBE109-.LBB109
	.long	0x76ad
	.uleb128 0x34
	.string	"elt"
	.byte	0x1
	.value	0x1aa0
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -736
	.uleb128 0x2f
	.quad	.LBB110
	.quad	.LBE110-.LBB110
	.uleb128 0x39
	.long	.LASF1860
	.byte	0x1
	.value	0x1ab5
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -536
	.uleb128 0x39
	.long	.LASF2037
	.byte	0x1
	.value	0x1ab7
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -908
	.uleb128 0x2f
	.quad	.LBB111
	.quad	.LBE111-.LBB111
	.uleb128 0x39
	.long	.LASF1953
	.byte	0x1
	.value	0x1ac1
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -528
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB112
	.quad	.LBE112-.LBB112
	.long	0x77f4
	.uleb128 0x39
	.long	.LASF1924
	.byte	0x1
	.value	0x1ad1
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -948
	.uleb128 0x39
	.long	.LASF1860
	.byte	0x1
	.value	0x1ad2
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -872
	.uleb128 0x39
	.long	.LASF1861
	.byte	0x1
	.value	0x1ad2
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -864
	.uleb128 0x39
	.long	.LASF347
	.byte	0x1
	.value	0x1ad3
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -856
	.uleb128 0x39
	.long	.LASF1926
	.byte	0x1
	.value	0x1ad4
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -944
	.uleb128 0x34
	.string	"tem"
	.byte	0x1
	.value	0x1ad5
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -520
	.uleb128 0x39
	.long	.LASF2038
	.byte	0x1
	.value	0x1ad7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -512
	.uleb128 0x33
	.quad	.LBB113
	.quad	.LBE113-.LBB113
	.long	0x7758
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x1af2
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -904
	.byte	0
	.uleb128 0x33
	.quad	.LBB114
	.quad	.LBE114-.LBB114
	.long	0x77af
	.uleb128 0x39
	.long	.LASF1927
	.byte	0x1
	.value	0x1afc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -728
	.uleb128 0x2f
	.quad	.LBB115
	.quad	.LBE115-.LBB115
	.uleb128 0x34
	.string	"nt"
	.byte	0x1
	.value	0x1b0e
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -504
	.uleb128 0x39
	.long	.LASF2039
	.byte	0x1
	.value	0x1b12
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -496
	.byte	0
	.byte	0
	.uleb128 0x2f
	.quad	.LBB116
	.quad	.LBE116-.LBB116
	.uleb128 0x39
	.long	.LASF2040
	.byte	0x1
	.value	0x1b6c
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -940
	.uleb128 0x2f
	.quad	.LBB117
	.quad	.LBE117-.LBB117
	.uleb128 0x34
	.string	"new"
	.byte	0x1
	.value	0x1b9e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -488
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB118
	.quad	.LBE118-.LBB118
	.long	0x783a
	.uleb128 0x39
	.long	.LASF1791
	.byte	0x1
	.value	0x1bcc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -720
	.uleb128 0x39
	.long	.LASF2041
	.byte	0x1
	.value	0x1bcc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -480
	.uleb128 0x39
	.long	.LASF2042
	.byte	0x1
	.value	0x1bcc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -472
	.byte	0
	.uleb128 0x33
	.quad	.LBB119
	.quad	.LBE119-.LBB119
	.long	0x7980
	.uleb128 0x34
	.string	"set"
	.byte	0x1
	.value	0x1c00
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -464
	.uleb128 0x39
	.long	.LASF1820
	.byte	0x1
	.value	0x1c01
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -456
	.uleb128 0x39
	.long	.LASF2043
	.byte	0x1
	.value	0x1c02
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -900
	.uleb128 0x39
	.long	.LASF2044
	.byte	0x1
	.value	0x1c03
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -448
	.uleb128 0x39
	.long	.LASF2045
	.byte	0x1
	.value	0x1c04
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -440
	.uleb128 0x39
	.long	.LASF2046
	.byte	0x1
	.value	0x1c05
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -432
	.uleb128 0x39
	.long	.LASF2047
	.byte	0x1
	.value	0x1c06
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -424
	.uleb128 0x39
	.long	.LASF2048
	.byte	0x1
	.value	0x1c07
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -416
	.uleb128 0x39
	.long	.LASF1961
	.byte	0x1
	.value	0x1c08
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -408
	.uleb128 0x39
	.long	.LASF2049
	.byte	0x1
	.value	0x1c09
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -400
	.uleb128 0x39
	.long	.LASF2050
	.byte	0x1
	.value	0x1c0a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -392
	.uleb128 0x39
	.long	.LASF2051
	.byte	0x1
	.value	0x1c0b
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -896
	.uleb128 0x39
	.long	.LASF2052
	.byte	0x1
	.value	0x1c0c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -712
	.uleb128 0x39
	.long	.LASF2053
	.byte	0x1
	.value	0x1c0d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -384
	.uleb128 0x34
	.string	"quo"
	.byte	0x1
	.value	0x1c0d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -376
	.uleb128 0x34
	.string	"rem"
	.byte	0x1
	.value	0x1c0d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -368
	.uleb128 0x39
	.long	.LASF1918
	.byte	0x1
	.value	0x1c0d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -360
	.uleb128 0x34
	.string	"bit"
	.byte	0x1
	.value	0x1c0d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -352
	.uleb128 0x39
	.long	.LASF886
	.byte	0x1
	.value	0x1c0d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -344
	.byte	0
	.uleb128 0x33
	.quad	.LBB120
	.quad	.LBE120-.LBB120
	.long	0x79c8
	.uleb128 0x39
	.long	.LASF2054
	.byte	0x1
	.value	0x1c90
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -336
	.uleb128 0x2f
	.quad	.LBB121
	.quad	.LBE121-.LBB121
	.uleb128 0x39
	.long	.LASF886
	.byte	0x1
	.value	0x1c96
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -328
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB122
	.quad	.LBE122-.LBB122
	.long	0x79fe
	.uleb128 0x39
	.long	.LASF2055
	.byte	0x1
	.value	0x1ccc
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -320
	.uleb128 0x39
	.long	.LASF2056
	.byte	0x1
	.value	0x1ccd
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -892
	.byte	0
	.uleb128 0x33
	.quad	.LBB123
	.quad	.LBE123-.LBB123
	.long	0x7a24
	.uleb128 0x39
	.long	.LASF2055
	.byte	0x1
	.value	0x1cf7
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -312
	.byte	0
	.uleb128 0x33
	.quad	.LBB124
	.quad	.LBE124-.LBB124
	.long	0x7a48
	.uleb128 0x34
	.string	"t"
	.byte	0x1
	.value	0x1d46
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.byte	0
	.uleb128 0x33
	.quad	.LBB125
	.quad	.LBE125-.LBB125
	.long	0x7a6e
	.uleb128 0x39
	.long	.LASF2057
	.byte	0x1
	.value	0x1d5b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.byte	0
	.uleb128 0x33
	.quad	.LBB126
	.quad	.LBE126-.LBB126
	.long	0x7a94
	.uleb128 0x39
	.long	.LASF2057
	.byte	0x1
	.value	0x1d71
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -264
	.byte	0
	.uleb128 0x33
	.quad	.LBB127
	.quad	.LBE127-.LBB127
	.long	0x7aba
	.uleb128 0x39
	.long	.LASF2058
	.byte	0x1
	.value	0x1dab
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -856
	.byte	0
	.uleb128 0x33
	.quad	.LBB128
	.quad	.LBE128-.LBB128
	.long	0x7af0
	.uleb128 0x34
	.string	"op0"
	.byte	0x1
	.value	0x1dd6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x34
	.string	"op1"
	.byte	0x1
	.value	0x1dd8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -296
	.byte	0
	.uleb128 0x33
	.quad	.LBB129
	.quad	.LBE129-.LBB129
	.long	0x7b16
	.uleb128 0x39
	.long	.LASF2059
	.byte	0x1
	.value	0x1de5
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -288
	.byte	0
	.uleb128 0x33
	.quad	.LBB130
	.quad	.LBE130-.LBB130
	.long	0x7b3b
	.uleb128 0x34
	.string	"t1"
	.byte	0x1
	.value	0x1dfe
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.byte	0
	.uleb128 0x33
	.quad	.LBB131
	.quad	.LBE131-.LBB131
	.long	0x7b93
	.uleb128 0x39
	.long	.LASF2060
	.byte	0x1
	.value	0x1e3d
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -888
	.uleb128 0x39
	.long	.LASF2061
	.byte	0x1
	.value	0x1e3f
	.long	0x3a41
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x2f
	.quad	.LBB132
	.quad	.LBE132-.LBB132
	.uleb128 0x39
	.long	.LASF2062
	.byte	0x1
	.value	0x1e54
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB133
	.quad	.LBE133-.LBB133
	.long	0x7bb9
	.uleb128 0x39
	.long	.LASF974
	.byte	0x1
	.value	0x1efa
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -884
	.byte	0
	.uleb128 0x33
	.quad	.LBB134
	.quad	.LBE134-.LBB134
	.long	0x7bdf
	.uleb128 0x39
	.long	.LASF1924
	.byte	0x1
	.value	0x1f61
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -936
	.byte	0
	.uleb128 0x33
	.quad	.LBB135
	.quad	.LBE135-.LBB135
	.long	0x7c15
	.uleb128 0x39
	.long	.LASF2063
	.byte	0x1
	.value	0x1fa3
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x39
	.long	.LASF2064
	.byte	0x1
	.value	0x1fa4
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.byte	0
	.uleb128 0x33
	.quad	.LBB136
	.quad	.LBE136-.LBB136
	.long	0x7c8d
	.uleb128 0x39
	.long	.LASF2065
	.byte	0x1
	.value	0x1fbe
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -704
	.uleb128 0x39
	.long	.LASF2066
	.byte	0x1
	.value	0x1fbf
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -696
	.uleb128 0x39
	.long	.LASF2067
	.byte	0x1
	.value	0x1fbf
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -688
	.uleb128 0x2f
	.quad	.LBB137
	.quad	.LBE137-.LBB137
	.uleb128 0x39
	.long	.LASF886
	.byte	0x1
	.value	0x2016
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -680
	.uleb128 0x39
	.long	.LASF2068
	.byte	0x1
	.value	0x2017
	.long	0x3a41
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB138
	.quad	.LBE138-.LBB138
	.long	0x7cd3
	.uleb128 0x39
	.long	.LASF2069
	.byte	0x1
	.value	0x20ca
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x39
	.long	.LASF2070
	.byte	0x1
	.value	0x20cb
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -672
	.uleb128 0x39
	.long	.LASF2036
	.byte	0x1
	.value	0x20cc
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.byte	0
	.uleb128 0x33
	.quad	.LBB139
	.quad	.LBE139-.LBB139
	.long	0x7d09
	.uleb128 0x34
	.string	"lhs"
	.byte	0x1
	.value	0x2121
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x34
	.string	"rhs"
	.byte	0x1
	.value	0x2122
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.byte	0
	.uleb128 0x33
	.quad	.LBB140
	.quad	.LBE140-.LBB140
	.long	0x7d61
	.uleb128 0x34
	.string	"lhs"
	.byte	0x1
	.value	0x2132
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x34
	.string	"rhs"
	.byte	0x1
	.value	0x2133
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2f
	.quad	.LBB141
	.quad	.LBE141-.LBB141
	.uleb128 0x39
	.long	.LASF1938
	.byte	0x1
	.value	0x2148
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB142
	.quad	.LBE142-.LBB142
	.long	0x7d97
	.uleb128 0x39
	.long	.LASF2055
	.byte	0x1
	.value	0x21aa
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x39
	.long	.LASF2039
	.byte	0x1
	.value	0x21ab
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.byte	0
	.uleb128 0x33
	.quad	.LBB143
	.quad	.LBE143-.LBB143
	.long	0x7dcd
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x2205
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -880
	.uleb128 0x39
	.long	.LASF1814
	.byte	0x1
	.value	0x2206
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.byte	0
	.uleb128 0x33
	.quad	.LBB144
	.quad	.LBE144-.LBB144
	.long	0x7e13
	.uleb128 0x39
	.long	.LASF2071
	.byte	0x1
	.value	0x222e
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -876
	.uleb128 0x39
	.long	.LASF2072
	.byte	0x1
	.value	0x222f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x39
	.long	.LASF1814
	.byte	0x1
	.value	0x2230
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.byte	0
	.uleb128 0x33
	.quad	.LBB145
	.quad	.LBE145-.LBB145
	.long	0x7e39
	.uleb128 0x39
	.long	.LASF2073
	.byte	0x1
	.value	0x2257
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.uleb128 0x33
	.quad	.LBB146
	.quad	.LBE146-.LBB146
	.long	0x7eae
	.uleb128 0x39
	.long	.LASF2074
	.byte	0x1
	.value	0x2264
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x39
	.long	.LASF2075
	.byte	0x1
	.value	0x2265
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.long	.LASF2076
	.byte	0x1
	.value	0x2266
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x39
	.long	.LASF2077
	.byte	0x1
	.value	0x2267
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF2078
	.byte	0x1
	.value	0x2268
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF2079
	.byte	0x1
	.value	0x2269
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x2f
	.quad	.LBB147
	.quad	.LBE147-.LBB147
	.uleb128 0x39
	.long	.LASF2080
	.byte	0x1
	.value	0x2282
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.long	.LASF2078
	.byte	0x1
	.value	0x2283
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF2081
	.byte	0x1
	.value	0x2284
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x6cdc
	.uleb128 0x36
	.long	.LASF2082
	.byte	0x1
	.value	0x22af
	.long	0x328
	.quad	.LFB55
	.quad	.LFE55-.LFB55
	.uleb128 0x1
	.byte	0x9c
	.long	0x7f34
	.uleb128 0x37
	.long	.LASF347
	.byte	0x1
	.value	0x22b0
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x22b1
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x38
	.long	.LASF2083
	.byte	0x1
	.value	0x22e2
	.long	0x123
	.quad	.LFB56
	.quad	.LFE56-.LFB56
	.uleb128 0x1
	.byte	0x9c
	.long	0x7fa5
	.uleb128 0x32
	.string	"arg"
	.byte	0x1
	.value	0x22e3
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.long	.LASF2084
	.byte	0x1
	.value	0x22e4
	.long	0x285a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.quad	.LBB148
	.quad	.LBE148-.LBB148
	.uleb128 0x39
	.long	.LASF2085
	.byte	0x1
	.value	0x22f0
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.long	.LASF2086
	.byte	0x1
	.value	0x22f1
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x36
	.long	.LASF2087
	.byte	0x1
	.value	0x230c
	.long	0x2d
	.quad	.LFB57
	.quad	.LFE57-.LFB57
	.uleb128 0x1
	.byte	0x9c
	.long	0x810a
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x230d
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x37
	.long	.LASF2088
	.byte	0x1
	.value	0x230e
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x37
	.long	.LASF2025
	.byte	0x1
	.value	0x230e
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x34
	.string	"op0"
	.byte	0x1
	.value	0x2310
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x34
	.string	"op1"
	.byte	0x1
	.value	0x2310
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x2311
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF738
	.byte	0x1
	.value	0x2311
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF2089
	.byte	0x1
	.value	0x2312
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF2023
	.byte	0x1
	.value	0x2313
	.long	0x3a41
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.long	.LASF1831
	.byte	0x1
	.value	0x2314
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x2315
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x39
	.long	.LASF2090
	.byte	0x1
	.value	0x2316
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x39
	.long	.LASF2091
	.byte	0x1
	.value	0x2317
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x39
	.long	.LASF2092
	.byte	0x1
	.value	0x231b
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x33
	.quad	.LBB149
	.quad	.LBE149-.LBB149
	.long	0x80ca
	.uleb128 0x39
	.long	.LASF2093
	.byte	0x1
	.value	0x2380
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x2f
	.quad	.LBB150
	.quad	.LBE150-.LBB150
	.uleb128 0x39
	.long	.LASF1918
	.byte	0x1
	.value	0x23ac
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x23af
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x39
	.long	.LASF886
	.byte	0x1
	.value	0x23af
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x40
	.long	.LASF2095
	.byte	0x1
	.value	0x23d8
	.quad	.LFB58
	.quad	.LFE58-.LFB58
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x40
	.long	.LASF2096
	.byte	0x1
	.value	0x23e4
	.quad	.LFB59
	.quad	.LFE59-.LFB59
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x30
	.long	.LASF2097
	.byte	0x1
	.value	0x23f6
	.quad	.LFB60
	.quad	.LFE60-.LFB60
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x31
	.long	.LASF2098
	.byte	0x1
	.value	0x2407
	.quad	.LFB61
	.quad	.LFE61-.LFB61
	.uleb128 0x1
	.byte	0x9c
	.long	0x8195
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x2408
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x37
	.long	.LASF1938
	.byte	0x1
	.value	0x2409
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF2099
	.byte	0x1
	.value	0x2411
	.quad	.LFB62
	.quad	.LFE62-.LFB62
	.uleb128 0x1
	.byte	0x9c
	.long	0x81d2
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x2412
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x37
	.long	.LASF1938
	.byte	0x1
	.value	0x2413
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x31
	.long	.LASF2100
	.byte	0x1
	.value	0x2425
	.quad	.LFB63
	.quad	.LFE63-.LFB63
	.uleb128 0x1
	.byte	0x9c
	.long	0x853a
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x2426
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x37
	.long	.LASF2101
	.byte	0x1
	.value	0x2427
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x37
	.long	.LASF2102
	.byte	0x1
	.value	0x2427
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0x2429
	.long	0x10be
	.uleb128 0x3
	.byte	0x91
	.sleb128 -220
	.uleb128 0x39
	.long	.LASF2103
	.byte	0x1
	.value	0x242d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x242e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x242f
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x39
	.long	.LASF24
	.byte	0x1
	.value	0x2430
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x2431
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x3f
	.long	.LASF2104
	.byte	0x1
	.value	0x25d7
	.quad	.L1824
	.uleb128 0x3f
	.long	.LASF2105
	.byte	0x1
	.value	0x25a0
	.quad	.L1896
	.uleb128 0x35
	.long	.LASF1813
	.long	0x853a
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15437
	.uleb128 0x33
	.quad	.LBB151
	.quad	.LBE151-.LBB151
	.long	0x8337
	.uleb128 0x39
	.long	.LASF1860
	.byte	0x1
	.value	0x24bd
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x39
	.long	.LASF1861
	.byte	0x1
	.value	0x24bd
	.long	0x4a6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x39
	.long	.LASF974
	.byte	0x1
	.value	0x24be
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -252
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x24bf
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x39
	.long	.LASF24
	.byte	0x1
	.value	0x24c0
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x39
	.long	.LASF347
	.byte	0x1
	.value	0x24c1
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x39
	.long	.LASF1926
	.byte	0x1
	.value	0x24c2
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -244
	.byte	0
	.uleb128 0x33
	.quad	.LBB152
	.quad	.LBE152-.LBB152
	.long	0x835d
	.uleb128 0x39
	.long	.LASF2106
	.byte	0x1
	.value	0x24e2
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.byte	0
	.uleb128 0x33
	.quad	.LBB153
	.quad	.LBE153-.LBB153
	.long	0x83b5
	.uleb128 0x39
	.long	.LASF2055
	.byte	0x1
	.value	0x24fa
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2f
	.quad	.LBB154
	.quad	.LBE154-.LBB154
	.uleb128 0x39
	.long	.LASF2107
	.byte	0x1
	.value	0x24ff
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x39
	.long	.LASF2036
	.byte	0x1
	.value	0x2500
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB155
	.quad	.LBE155-.LBB155
	.long	0x840d
	.uleb128 0x39
	.long	.LASF2055
	.byte	0x1
	.value	0x2522
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2f
	.quad	.LBB156
	.quad	.LBE156-.LBB156
	.uleb128 0x39
	.long	.LASF2107
	.byte	0x1
	.value	0x2527
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x39
	.long	.LASF2036
	.byte	0x1
	.value	0x2528
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.Ldebug_ranges0+0x90
	.long	0x8447
	.uleb128 0x34
	.string	"cmp"
	.byte	0x1
	.value	0x256f
	.long	0x8e8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x39
	.long	.LASF2108
	.byte	0x1
	.value	0x256f
	.long	0x8e8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -236
	.uleb128 0x39
	.long	.LASF2109
	.byte	0x1
	.value	0x2570
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.byte	0
	.uleb128 0x3d
	.long	.Ldebug_ranges0+0xc0
	.long	0x84c3
	.uleb128 0x39
	.long	.LASF2110
	.byte	0x1
	.value	0x2588
	.long	0x8e8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -228
	.uleb128 0x39
	.long	.LASF2111
	.byte	0x1
	.value	0x2589
	.long	0x10be
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x2f
	.quad	.LBB160
	.quad	.LBE160-.LBB160
	.uleb128 0x34
	.string	"op0"
	.byte	0x1
	.value	0x25a7
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x34
	.string	"op1"
	.byte	0x1
	.value	0x25a8
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x39
	.long	.LASF2112
	.byte	0x1
	.value	0x25a9
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF2113
	.byte	0x1
	.value	0x25a9
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.byte	0
	.uleb128 0x33
	.quad	.LBB162
	.quad	.LBE162-.LBB162
	.long	0x8518
	.uleb128 0x39
	.long	.LASF2114
	.byte	0x1
	.value	0x25c1
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x39
	.long	.LASF2115
	.byte	0x1
	.value	0x25c2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.quad	.LBB163
	.quad	.LBE163-.LBB163
	.uleb128 0x34
	.string	"seq"
	.byte	0x1
	.value	0x25ca
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x2f
	.quad	.LBB164
	.quad	.LBE164-.LBB164
	.uleb128 0x39
	.long	.LASF1915
	.byte	0x1
	.value	0x25ea
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x70d
	.uleb128 0x3a
	.long	.LASF2116
	.byte	0x1
	.value	0x260b
	.quad	.LFB64
	.quad	.LFE64-.LFB64
	.uleb128 0x1
	.byte	0x9c
	.long	0x85d8
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x260c
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF2117
	.byte	0x1
	.value	0x260d
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x37
	.long	.LASF2101
	.byte	0x1
	.value	0x260e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x37
	.long	.LASF2102
	.byte	0x1
	.value	0x260e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x34
	.string	"op0"
	.byte	0x1
	.value	0x2610
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x34
	.string	"op1"
	.byte	0x1
	.value	0x2611
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x2612
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF974
	.byte	0x1
	.value	0x2613
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x31
	.long	.LASF2118
	.byte	0x1
	.value	0x261d
	.quad	.LFB65
	.quad	.LFE65-.LFB65
	.uleb128 0x1
	.byte	0x9c
	.long	0x86b2
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x261e
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x37
	.long	.LASF974
	.byte	0x1
	.value	0x261f
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.string	"op0"
	.byte	0x1
	.value	0x2620
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.string	"op1"
	.byte	0x1
	.value	0x2620
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x37
	.long	.LASF2101
	.byte	0x1
	.value	0x2621
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x37
	.long	.LASF2102
	.byte	0x1
	.value	0x2621
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x39
	.long	.LASF1819
	.byte	0x1
	.value	0x2623
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x39
	.long	.LASF2103
	.byte	0x1
	.value	0x2624
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x2625
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.quad	.LBB165
	.quad	.LBE165-.LBB165
	.uleb128 0x39
	.long	.LASF2119
	.byte	0x1
	.value	0x2631
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF2120
	.byte	0x1
	.value	0x2631
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x3a
	.long	.LASF2121
	.byte	0x1
	.value	0x2652
	.quad	.LFB66
	.quad	.LFE66-.LFB66
	.uleb128 0x1
	.byte	0x9c
	.long	0x875d
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x2653
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x37
	.long	.LASF2101
	.byte	0x1
	.value	0x2654
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x37
	.long	.LASF2102
	.byte	0x1
	.value	0x2654
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x34
	.string	"op0"
	.byte	0x1
	.value	0x2656
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x34
	.string	"op1"
	.byte	0x1
	.value	0x2657
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x2658
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF1819
	.byte	0x1
	.value	0x2659
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x265a
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x39
	.long	.LASF2103
	.byte	0x1
	.value	0x265b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x31
	.long	.LASF2122
	.byte	0x1
	.value	0x2671
	.quad	.LFB67
	.quad	.LFE67-.LFB67
	.uleb128 0x1
	.byte	0x9c
	.long	0x87e6
	.uleb128 0x32
	.string	"op0"
	.byte	0x1
	.value	0x2672
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x37
	.long	.LASF2101
	.byte	0x1
	.value	0x2673
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x37
	.long	.LASF2102
	.byte	0x1
	.value	0x2673
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x39
	.long	.LASF1819
	.byte	0x1
	.value	0x2675
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x39
	.long	.LASF2123
	.byte	0x1
	.value	0x2676
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x2677
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.long	.LASF2103
	.byte	0x1
	.value	0x2678
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x38
	.long	.LASF2124
	.byte	0x1
	.value	0x26aa
	.long	0x2d
	.quad	.LFB68
	.quad	.LFE68-.LFB68
	.uleb128 0x1
	.byte	0x9c
	.long	0x8873
	.uleb128 0x32
	.string	"op0"
	.byte	0x1
	.value	0x26ab
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.string	"op1"
	.byte	0x1
	.value	0x26ab
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.long	.LASF0
	.byte	0x1
	.value	0x26ac
	.long	0x8e8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x37
	.long	.LASF974
	.byte	0x1
	.value	0x26ad
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x26ae
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x37
	.long	.LASF348
	.byte	0x1
	.value	0x26af
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.string	"tem"
	.byte	0x1
	.value	0x26b1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.long	.LASF2125
	.byte	0x1
	.value	0x26ec
	.quad	.LFB69
	.quad	.LFE69-.LFB69
	.uleb128 0x1
	.byte	0x9c
	.long	0x8929
	.uleb128 0x32
	.string	"op0"
	.byte	0x1
	.value	0x26ee
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.string	"op1"
	.byte	0x1
	.value	0x26ee
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.long	.LASF0
	.byte	0x1
	.value	0x26ef
	.long	0x8e8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x37
	.long	.LASF974
	.byte	0x1
	.value	0x26f0
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x26f1
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x37
	.long	.LASF348
	.byte	0x1
	.value	0x26f2
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x37
	.long	.LASF2101
	.byte	0x1
	.value	0x26f3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x37
	.long	.LASF2102
	.byte	0x1
	.value	0x26f3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x34
	.string	"tem"
	.byte	0x1
	.value	0x26f5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x39
	.long	.LASF2126
	.byte	0x1
	.value	0x26f6
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x3a
	.long	.LASF2127
	.byte	0x1
	.value	0x2754
	.quad	.LFB70
	.quad	.LFE70-.LFB70
	.uleb128 0x1
	.byte	0x9c
	.long	0x89f2
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x2756
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x37
	.long	.LASF2128
	.byte	0x1
	.value	0x2757
	.long	0x8e8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x37
	.long	.LASF2129
	.byte	0x1
	.value	0x2757
	.long	0x8e8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x37
	.long	.LASF2101
	.byte	0x1
	.value	0x2758
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x37
	.long	.LASF2102
	.byte	0x1
	.value	0x2758
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x34
	.string	"op0"
	.byte	0x1
	.value	0x275a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x34
	.string	"op1"
	.byte	0x1
	.value	0x275a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x39
	.long	.LASF24
	.byte	0x1
	.value	0x275b
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x39
	.long	.LASF1
	.byte	0x1
	.value	0x275c
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x39
	.long	.LASF974
	.byte	0x1
	.value	0x275d
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0x275e
	.long	0x8e8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.uleb128 0x36
	.long	.LASF2130
	.byte	0x1
	.value	0x27b1
	.long	0x2d
	.quad	.LFB71
	.quad	.LFE71-.LFB71
	.uleb128 0x1
	.byte	0x9c
	.long	0x8b86
	.uleb128 0x32
	.string	"exp"
	.byte	0x1
	.value	0x27b2
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x37
	.long	.LASF1915
	.byte	0x1
	.value	0x27b3
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x27b4
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x37
	.long	.LASF2131
	.byte	0x1
	.value	0x27b5
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x39
	.long	.LASF0
	.byte	0x1
	.value	0x27b7
	.long	0x8e8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x39
	.long	.LASF2085
	.byte	0x1
	.value	0x27b8
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x39
	.long	.LASF2086
	.byte	0x1
	.value	0x27b8
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x39
	.long	.LASF24
	.byte	0x1
	.value	0x27b8
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x34
	.string	"tem"
	.byte	0x1
	.value	0x27b9
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x39
	.long	.LASF2132
	.byte	0x1
	.value	0x27ba
	.long	0x72a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x39
	.long	.LASF2133
	.byte	0x1
	.value	0x27bb
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x39
	.long	.LASF974
	.byte	0x1
	.value	0x27bc
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x34
	.string	"op0"
	.byte	0x1
	.value	0x27bd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x34
	.string	"op1"
	.byte	0x1
	.value	0x27bd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF1831
	.byte	0x1
	.value	0x27be
	.long	0x2afd
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x39
	.long	.LASF2007
	.byte	0x1
	.value	0x27bf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x39
	.long	.LASF886
	.byte	0x1
	.value	0x27c0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF1938
	.byte	0x1
	.value	0x27c0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF1813
	.long	0x8b96
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15568
	.uleb128 0x2f
	.quad	.LBB166
	.quad	.LBE166-.LBB166
	.uleb128 0x39
	.long	.LASF1895
	.byte	0x1
	.value	0x283d
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x39
	.long	.LASF2134
	.byte	0x1
	.value	0x283e
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x39
	.long	.LASF2135
	.byte	0x1
	.value	0x283f
	.long	0x328
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	0x4f7
	.long	0x8b96
	.uleb128 0xf
	.long	0x33f
	.byte	0xd
	.byte	0
	.uleb128 0xc
	.long	0x8b86
	.uleb128 0x41
	.long	.LASF2205
	.byte	0x1
	.value	0x28d8
	.long	0x49d
	.quad	.LFB72
	.quad	.LFE72-.LFB72
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3e
	.long	.LASF2136
	.byte	0x1
	.value	0x28e0
	.long	0x328
	.quad	.LFB73
	.quad	.LFE73-.LFB73
	.uleb128 0x1
	.byte	0x9c
	.long	0x8c86
	.uleb128 0x37
	.long	.LASF2137
	.byte	0x1
	.value	0x28e2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.long	.LASF2138
	.byte	0x1
	.value	0x28e2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.long	.LASF771
	.byte	0x1
	.value	0x28e2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF2139
	.byte	0x1
	.value	0x28e2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x37
	.long	.LASF2140
	.byte	0x1
	.value	0x28e3
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x37
	.long	.LASF2141
	.byte	0x1
	.value	0x28e4
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x39
	.long	.LASF2051
	.byte	0x1
	.value	0x28e6
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x39
	.long	.LASF2142
	.byte	0x1
	.value	0x28e7
	.long	0x328
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x42
	.string	"op1"
	.byte	0x1
	.value	0x28e8
	.long	0x2d
	.uleb128 0x42
	.string	"op2"
	.byte	0x1
	.value	0x28e8
	.long	0x2d
	.uleb128 0x43
	.long	.LASF1820
	.byte	0x1
	.value	0x28e8
	.long	0x2d
	.uleb128 0x43
	.long	.LASF2143
	.byte	0x1
	.value	0x28e9
	.long	0x72a
	.byte	0
	.uleb128 0x3a
	.long	.LASF2144
	.byte	0x1
	.value	0x293b
	.quad	.LFB74
	.quad	.LFE74-.LFB74
	.uleb128 0x1
	.byte	0x9c
	.long	0x8d11
	.uleb128 0x37
	.long	.LASF1820
	.byte	0x1
	.value	0x293c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF1
	.byte	0x1
	.value	0x293d
	.long	0x72a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x37
	.long	.LASF2139
	.byte	0x1
	.value	0x293c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x37
	.long	.LASF2140
	.byte	0x1
	.value	0x293c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x37
	.long	.LASF2141
	.byte	0x1
	.value	0x293c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x39
	.long	.LASF1800
	.byte	0x1
	.value	0x293f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x39
	.long	.LASF19
	.byte	0x1
	.value	0x293f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x38
	.long	.LASF2145
	.byte	0x1
	.value	0x2979
	.long	0x328
	.quad	.LFB75
	.quad	.LFE75-.LFB75
	.uleb128 0x1
	.byte	0x9c
	.long	0x8da1
	.uleb128 0x37
	.long	.LASF2137
	.byte	0x1
	.value	0x297b
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.long	.LASF2138
	.byte	0x1
	.value	0x297b
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x37
	.long	.LASF771
	.byte	0x1
	.value	0x297b
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x37
	.long	.LASF2139
	.byte	0x1
	.value	0x297b
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x37
	.long	.LASF2140
	.byte	0x1
	.value	0x297c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x37
	.long	.LASF2141
	.byte	0x1
	.value	0x297c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x39
	.long	.LASF1820
	.byte	0x1
	.value	0x297e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x2d
	.long	.LASF2146
	.byte	0x1
	.byte	0x55
	.long	0x123
	.uleb128 0x9
	.byte	0x3
	.quad	placeholder_list
	.uleb128 0xe
	.long	0x4f7
	.long	0x8dc6
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x2d
	.long	.LASF2147
	.byte	0x1
	.byte	0xa7
	.long	0x8db6
	.uleb128 0x9
	.byte	0x3
	.quad	direct_load
	.uleb128 0x2d
	.long	.LASF2148
	.byte	0x1
	.byte	0xa8
	.long	0x8db6
	.uleb128 0x9
	.byte	0x3
	.quad	direct_store
	.uleb128 0x44
	.long	.LASF2149
	.byte	0x5
	.byte	0x5e
	.long	0x8dfb
	.uleb128 0x3
	.byte	0x8
	.long	0x8e01
	.uleb128 0xc
	.long	0x1de
	.uleb128 0x44
	.long	.LASF2150
	.byte	0x5
	.byte	0x62
	.long	0x328
	.uleb128 0x45
	.long	.LASF2151
	.byte	0x5
	.value	0xc39
	.long	0x328
	.uleb128 0xe
	.long	0x89f
	.long	0x8e2d
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x44
	.long	.LASF198
	.byte	0xa
	.byte	0x34
	.long	0x8e38
	.uleb128 0xc
	.long	0x8e1d
	.uleb128 0xe
	.long	0x4bf
	.long	0x8e4d
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x44
	.long	.LASF2152
	.byte	0xa
	.byte	0x50
	.long	0x8e58
	.uleb128 0xc
	.long	0x8e3d
	.uleb128 0x44
	.long	.LASF2153
	.byte	0xa
	.byte	0x55
	.long	0x8e68
	.uleb128 0xc
	.long	0x8e3d
	.uleb128 0xe
	.long	0x4c6
	.long	0x8e7d
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x44
	.long	.LASF2154
	.byte	0xa
	.byte	0x60
	.long	0x8e88
	.uleb128 0xc
	.long	0x8e6d
	.uleb128 0xe
	.long	0x4b8
	.long	0x8e9d
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x44
	.long	.LASF2155
	.byte	0xa
	.byte	0x6a
	.long	0x8ea8
	.uleb128 0xc
	.long	0x8e8d
	.uleb128 0x44
	.long	.LASF2156
	.byte	0xa
	.byte	0x7b
	.long	0x8eb8
	.uleb128 0xc
	.long	0x8e3d
	.uleb128 0xe
	.long	0x72a
	.long	0x8ecd
	.uleb128 0xf
	.long	0x33f
	.byte	0x8
	.byte	0
	.uleb128 0x44
	.long	.LASF2157
	.byte	0xa
	.byte	0x9d
	.long	0x8ed8
	.uleb128 0xc
	.long	0x8ebd
	.uleb128 0x44
	.long	.LASF2158
	.byte	0xa
	.byte	0xa3
	.long	0x72a
	.uleb128 0x44
	.long	.LASF2159
	.byte	0xa
	.byte	0xa4
	.long	0x72a
	.uleb128 0x44
	.long	.LASF2160
	.byte	0xa
	.byte	0xa5
	.long	0x72a
	.uleb128 0xe
	.long	0x4f7
	.long	0x8f0e
	.uleb128 0xf
	.long	0x33f
	.byte	0x98
	.byte	0
	.uleb128 0x44
	.long	.LASF2161
	.byte	0x2
	.byte	0x3f
	.long	0x8f19
	.uleb128 0xc
	.long	0x8efe
	.uleb128 0xe
	.long	0x2d
	.long	0x8f2e
	.uleb128 0xf
	.long	0x33f
	.byte	0x80
	.byte	0
	.uleb128 0x45
	.long	.LASF2162
	.byte	0x2
	.value	0x611
	.long	0x8f1e
	.uleb128 0x45
	.long	.LASF2163
	.byte	0x2
	.value	0x617
	.long	0x2d
	.uleb128 0xe
	.long	0x2d
	.long	0x8f5c
	.uleb128 0xf
	.long	0x33f
	.byte	0x2
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x45
	.long	.LASF2164
	.byte	0x2
	.value	0x619
	.long	0x8f46
	.uleb128 0xe
	.long	0x2d
	.long	0x8f78
	.uleb128 0xf
	.long	0x33f
	.byte	0xa
	.byte	0
	.uleb128 0x45
	.long	.LASF2165
	.byte	0x2
	.value	0x652
	.long	0x8f68
	.uleb128 0x45
	.long	.LASF2166
	.byte	0x2
	.value	0x660
	.long	0x2d
	.uleb128 0x45
	.long	.LASF2167
	.byte	0x2
	.value	0x6d2
	.long	0x328
	.uleb128 0x45
	.long	.LASF2168
	.byte	0x2
	.value	0x6d7
	.long	0x328
	.uleb128 0x46
	.long	.LASF2169
	.byte	0x1
	.byte	0x52
	.long	0x328
	.uleb128 0x9
	.byte	0x3
	.quad	cse_not_expected
	.uleb128 0xe
	.long	0x4f7
	.long	0x8fcd
	.uleb128 0xf
	.long	0x33f
	.byte	0xff
	.byte	0
	.uleb128 0x44
	.long	.LASF2170
	.byte	0x4
	.byte	0x31
	.long	0x8fbd
	.uleb128 0x45
	.long	.LASF2171
	.byte	0xb
	.value	0x1b5
	.long	0x1941
	.uleb128 0x45
	.long	.LASF2172
	.byte	0xb
	.value	0x1b6
	.long	0x1941
	.uleb128 0xe
	.long	0x123
	.long	0x9000
	.uleb128 0xf
	.long	0x33f
	.byte	0x32
	.byte	0
	.uleb128 0x45
	.long	.LASF2173
	.byte	0x4
	.value	0x79b
	.long	0x8ff0
	.uleb128 0xe
	.long	0x123
	.long	0x901c
	.uleb128 0xf
	.long	0x33f
	.byte	0xa
	.byte	0
	.uleb128 0x45
	.long	.LASF2174
	.byte	0x4
	.value	0x7f8
	.long	0x900c
	.uleb128 0xe
	.long	0x123
	.long	0x9038
	.uleb128 0xf
	.long	0x33f
	.byte	0x5
	.byte	0
	.uleb128 0x45
	.long	.LASF2175
	.byte	0x4
	.value	0x97c
	.long	0x9028
	.uleb128 0x45
	.long	.LASF2176
	.byte	0x4
	.value	0xa87
	.long	0x6f4
	.uleb128 0x45
	.long	.LASF2177
	.byte	0x4
	.value	0xa8a
	.long	0x328
	.uleb128 0x45
	.long	.LASF2178
	.byte	0x4
	.value	0xa98
	.long	0x123
	.uleb128 0x44
	.long	.LASF2179
	.byte	0x14
	.byte	0x3d
	.long	0x328
	.uleb128 0x44
	.long	.LASF2180
	.byte	0x14
	.byte	0x41
	.long	0x328
	.uleb128 0x44
	.long	.LASF2181
	.byte	0x14
	.byte	0xef
	.long	0x328
	.uleb128 0x44
	.long	.LASF2182
	.byte	0x14
	.byte	0xf4
	.long	0x328
	.uleb128 0x45
	.long	.LASF2183
	.byte	0x14
	.value	0x13a
	.long	0x328
	.uleb128 0x45
	.long	.LASF2184
	.byte	0x14
	.value	0x14e
	.long	0x328
	.uleb128 0x45
	.long	.LASF2185
	.byte	0x14
	.value	0x15a
	.long	0x328
	.uleb128 0x45
	.long	.LASF2186
	.byte	0x14
	.value	0x16f
	.long	0x328
	.uleb128 0x45
	.long	.LASF2187
	.byte	0x14
	.value	0x17d
	.long	0x328
	.uleb128 0x45
	.long	.LASF2188
	.byte	0x14
	.value	0x1c8
	.long	0x328
	.uleb128 0x45
	.long	.LASF2189
	.byte	0x14
	.value	0x248
	.long	0x328
	.uleb128 0xe
	.long	0x72a
	.long	0x90f8
	.uleb128 0xf
	.long	0x33f
	.byte	0x34
	.byte	0
	.uleb128 0x44
	.long	.LASF2190
	.byte	0x15
	.byte	0xad
	.long	0x90e8
	.uleb128 0x45
	.long	.LASF2191
	.byte	0xd
	.value	0x1e4
	.long	0x231d
	.uleb128 0x45
	.long	.LASF2192
	.byte	0xd
	.value	0x225
	.long	0x123
	.uleb128 0x27
	.long	0x2d
	.long	0x9139
	.uleb128 0x28
	.long	0x12e
	.uleb128 0x28
	.long	0x2d
	.uleb128 0x28
	.long	0x72a
	.uleb128 0x28
	.long	0x2a87
	.byte	0
	.uleb128 0x45
	.long	.LASF2193
	.byte	0xe
	.value	0x301
	.long	0x9145
	.uleb128 0x3
	.byte	0x8
	.long	0x911b
	.uleb128 0xe
	.long	0x3a41
	.long	0x915b
	.uleb128 0xf
	.long	0x33f
	.byte	0x30
	.byte	0
	.uleb128 0x44
	.long	.LASF2194
	.byte	0x10
	.byte	0x9b
	.long	0x914b
	.uleb128 0xe
	.long	0x3b8b
	.long	0x9176
	.uleb128 0xf
	.long	0x33f
	.byte	0x98
	.byte	0
	.uleb128 0x44
	.long	.LASF2195
	.byte	0x10
	.byte	0xeb
	.long	0x9166
	.uleb128 0xe
	.long	0x2afd
	.long	0x9191
	.uleb128 0xf
	.long	0x33f
	.byte	0x98
	.byte	0
	.uleb128 0x44
	.long	.LASF2196
	.byte	0x10
	.byte	0xf1
	.long	0x9181
	.uleb128 0xe
	.long	0x2afd
	.long	0x91ac
	.uleb128 0xf
	.long	0x33f
	.byte	0x3a
	.byte	0
	.uleb128 0x46
	.long	.LASF2197
	.byte	0x1
	.byte	0xbe
	.long	0x919c
	.uleb128 0x9
	.byte	0x3
	.quad	movstr_optab
	.uleb128 0x46
	.long	.LASF2198
	.byte	0x1
	.byte	0xc1
	.long	0x919c
	.uleb128 0x9
	.byte	0x3
	.quad	clrstr_optab
	.uleb128 0xe
	.long	0x2d
	.long	0x91e6
	.uleb128 0xf
	.long	0x33f
	.byte	0x60
	.byte	0
	.uleb128 0x44
	.long	.LASF2199
	.byte	0x11
	.byte	0x97
	.long	0x91d6
	.uleb128 0x44
	.long	.LASF2200
	.byte	0x12
	.byte	0x8d
	.long	0x328
	.uleb128 0xe
	.long	0x3ee2
	.long	0x9207
	.uleb128 0x47
	.byte	0
	.uleb128 0x44
	.long	.LASF1734
	.byte	0x12
	.byte	0xf9
	.long	0x9212
	.uleb128 0xc
	.long	0x91fc
	.uleb128 0x44
	.long	.LASF1758
	.byte	0x13
	.byte	0xa8
	.long	0x9222
	.uleb128 0xc
	.long	0x417f
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x21
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x22
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x23
	.uleb128 0x17
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x24
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x25
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x26
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x27
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x28
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x29
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2a
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2b
	.uleb128 0x15
	.byte	0
	.uleb128 0x27
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x2c
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2d
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2e
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.byte	0
	.byte	0
	.uleb128 0x30
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x31
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x32
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x33
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x34
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x35
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x34
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x36
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x37
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x38
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x39
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3a
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3b
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3c
	.uleb128 0xa
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x3d
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3e
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3f
	.uleb128 0xa
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x40
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x41
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x42
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x43
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x44
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x45
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x46
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x47
	.uleb128 0x21
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.LBB62-.Ltext0
	.quad	.LBE62-.Ltext0
	.quad	.LBB63-.Ltext0
	.quad	.LBE63-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB75-.Ltext0
	.quad	.LBE75-.Ltext0
	.quad	.LBB76-.Ltext0
	.quad	.LBE76-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB79-.Ltext0
	.quad	.LBE79-.Ltext0
	.quad	.LBB81-.Ltext0
	.quad	.LBE81-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB157-.Ltext0
	.quad	.LBE157-.Ltext0
	.quad	.LBB158-.Ltext0
	.quad	.LBE158-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB159-.Ltext0
	.quad	.LBE159-.Ltext0
	.quad	.LBB161-.Ltext0
	.quad	.LBE161-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF1684:
	.string	"LTI_getf2"
.LASF1356:
	.string	"CODE_FOR_fix_trunctfsi2"
.LASF135:
	.string	"long long int"
.LASF939:
	.string	"TI_V16SF_TYPE"
.LASF824:
	.string	"original_arg_vector"
.LASF138:
	.string	"VOIDmode"
.LASF635:
	.string	"BUILT_IN_STRCSPN"
.LASF1758:
	.string	"lang_hooks"
.LASF331:
	.string	"SS_MINUS"
.LASF1672:
	.string	"LTI_ledf2"
.LASF879:
	.string	"malloc_flag"
.LASF1961:
	.string	"hi_r"
.LASF1465:
	.string	"CODE_FOR_insv"
.LASF531:
	.string	"RROTATE_EXPR"
.LASF320:
	.string	"RANGE_REG"
.LASF447:
	.string	"IDENTIFIER_NODE"
.LASF730:
	.string	"real"
.LASF1631:
	.string	"LTI_extendsftf2"
.LASF123:
	.string	"__pad1"
.LASF124:
	.string	"__pad2"
.LASF125:
	.string	"__pad3"
.LASF126:
	.string	"__pad4"
.LASF127:
	.string	"__pad5"
.LASF705:
	.string	"unused_0"
.LASF721:
	.string	"unused_1"
.LASF91:
	.string	"long unsigned int"
.LASF1340:
	.string	"CODE_FOR_extendsidi2"
.LASF2120:
	.string	"op1_word"
.LASF536:
	.string	"BIT_NOT_EXPR"
.LASF1958:
	.string	"xtarget"
.LASF1659:
	.string	"LTI_unordhf2"
.LASF923:
	.string	"TI_LONG_DOUBLE_TYPE"
.LASF362:
	.string	"rtmem"
.LASF626:
	.string	"BUILT_IN_STRNCAT"
.LASF1441:
	.string	"CODE_FOR_x86_shift_adj_1"
.LASF941:
	.string	"TI_V8HI_TYPE"
.LASF1447:
	.string	"CODE_FOR_x86_shift_adj_3"
.LASF1389:
	.string	"CODE_FOR_umulditi3"
.LASF276:
	.string	"COND"
.LASF1439:
	.string	"CODE_FOR_one_cmplqi2"
.LASF277:
	.string	"COMPARE"
.LASF2136:
	.string	"try_casesi"
.LASF1820:
	.string	"index"
.LASF2059:
	.string	"negated"
.LASF82:
	.string	"regno"
.LASF360:
	.string	"rtbit"
.LASF391:
	.string	"REG_SAVE_NOTE"
.LASF191:
	.string	"CCGCmode"
.LASF532:
	.string	"BIT_IOR_EXPR"
.LASF1564:
	.string	"CODE_FOR_movv2sf"
.LASF1114:
	.string	"CODE_FOR_sqrtsf2_i387"
.LASF1561:
	.string	"CODE_FOR_movv2si"
.LASF1910:
	.string	"alignment_pad"
.LASF1133:
	.string	"CODE_FOR_strmovhi_rex_1"
.LASF570:
	.string	"FDESC_EXPR"
.LASF1134:
	.string	"CODE_FOR_strmovqi_1"
.LASF2040:
	.string	"ext_mode"
.LASF1597:
	.string	"OTI_rotl"
.LASF2174:
	.string	"integer_types"
.LASF1530:
	.string	"CODE_FOR_clrstrdi"
.LASF513:
	.string	"CEIL_MOD_EXPR"
.LASF903:
	.string	"TI_UINTQI_TYPE"
.LASF2047:
	.string	"index_val"
.LASF1562:
	.string	"CODE_FOR_movv4hi"
.LASF1313:
	.string	"CODE_FOR_pswapdv2sf2"
.LASF867:
	.string	"ignored_flag"
.LASF2108:
	.string	"rcmp"
.LASF1307:
	.string	"CODE_FOR_pfrcpit1v2sf3"
.LASF2175:
	.string	"sizetype_tab"
.LASF330:
	.string	"US_PLUS"
.LASF233:
	.string	"SEQUENCE"
.LASF2092:
	.string	"bad_subreg"
.LASF889:
	.string	"section_name"
.LASF2111:
	.string	"tcode2"
.LASF2030:
	.string	"to_return"
.LASF249:
	.string	"ASM_INPUT"
.LASF849:
	.string	"limit_stack"
.LASF1008:
	.string	"EXPAND_NORMAL"
.LASF538:
	.string	"TRUTH_ORIF_EXPR"
.LASF271:
	.string	"LABEL_REF"
.LASF988:
	.string	"regno_pointer_align_length"
.LASF41:
	.string	"fp_load"
.LASF764:
	.string	"restrict_flag"
.LASF552:
	.string	"UNLE_EXPR"
.LASF1692:
	.string	"LTI_floatdidf"
.LASF2189:
	.string	"flag_trapv"
.LASF47:
	.string	"sse_load"
.LASF161:
	.string	"XCmode"
.LASF788:
	.string	"pretend_args_size"
.LASF525:
	.string	"MAX_EXPR"
.LASF2144:
	.string	"do_tablejump"
.LASF1861:
	.string	"bitpos"
.LASF2135:
	.string	"ops_unsignedp"
.LASF25:
	.string	"list"
.LASF657:
	.string	"BUILT_IN_RETURN"
.LASF633:
	.string	"BUILT_IN_STRPBRK"
.LASF1965:
	.string	"position"
.LASF220:
	.string	"MATCH_PAR_DUP"
.LASF1666:
	.string	"LTI_unordsf2"
.LASF1037:
	.string	"CODE_FOR_zero_extendsidi2_32"
.LASF736:
	.string	"tree_list"
.LASF770:
	.string	"name"
.LASF566:
	.string	"RTL_EXPR"
.LASF782:
	.string	"stmt"
.LASF200:
	.string	"MODE_INT"
.LASF158:
	.string	"HCmode"
.LASF36:
	.string	"move_ratio"
.LASF1310:
	.string	"CODE_FOR_pfrsqit1v2sf3"
.LASF1292:
	.string	"CODE_FOR_gev2sf3"
.LASF1391:
	.string	"CODE_FOR_mulditi3"
.LASF1167:
	.string	"CODE_FOR_allocate_stack_worker_rex64"
.LASF584:
	.string	"GOTO_EXPR"
.LASF926:
	.string	"TI_CONST_PTR_TYPE"
.LASF1131:
	.string	"CODE_FOR_strmovsi_rex_1"
.LASF2090:
	.string	"op0_is_copy"
.LASF1615:
	.string	"OTI_ucmp"
.LASF514:
	.string	"FLOOR_MOD_EXPR"
.LASF1751:
	.string	"anon_aggr_type_p"
.LASF185:
	.string	"V4DFmode"
.LASF638:
	.string	"BUILT_IN_SQRT"
.LASF886:
	.string	"result"
.LASF505:
	.string	"PLUS_EXPR"
.LASF1850:
	.string	"bytepos"
.LASF596:
	.string	"BUILT_IN_FRONTEND"
.LASF1378:
	.string	"CODE_FOR_subqi3"
.LASF1312:
	.string	"CODE_FOR_pswapdv2si2"
.LASF1158:
	.string	"CODE_FOR_strlenqi_rex_1"
.LASF912:
	.string	"TI_SIZE_ZERO"
.LASF1966:
	.string	"nbytes"
.LASF1614:
	.string	"OTI_cmp"
.LASF2179:
	.string	"optimize"
.LASF963:
	.string	"size_type_kind"
.LASF265:
	.string	"CONST"
.LASF193:
	.string	"CCNOmode"
.LASF1868:
	.string	"regs"
.LASF669:
	.string	"BUILT_IN_PUTCHAR_UNLOCKED"
.LASF434:
	.string	"GR_MAX"
.LASF2102:
	.string	"if_true_label"
.LASF75:
	.string	"INT_SSE_REGS"
.LASF1215:
	.string	"CODE_FOR_sse_comi"
.LASF405:
	.string	"NOTE_INSN_LOOP_CONT"
.LASF1796:
	.string	"free_expr_status"
.LASF460:
	.string	"OFFSET_TYPE"
.LASF313:
	.string	"UNSIGNED_FIX"
.LASF1599:
	.string	"OTI_smin"
.LASF226:
	.string	"DEFINE_PEEPHOLE2"
.LASF544:
	.string	"LE_EXPR"
.LASF1371:
	.string	"CODE_FOR_addxf3"
.LASF1419:
	.string	"CODE_FOR_xordi3"
.LASF237:
	.string	"SET_ATTR"
.LASF418:
	.string	"NOTE_INSN_LIVE"
.LASF1080:
	.string	"CODE_FOR_testsi_1"
.LASF784:
	.string	"varasm"
.LASF2061:
	.string	"other_optab"
.LASF1704:
	.string	"LTI_fixdfdi"
.LASF1231:
	.string	"CODE_FOR_addv2si3"
.LASF2133:
	.string	"invert"
.LASF1606:
	.string	"OTI_negv"
.LASF1047:
	.string	"CODE_FOR_truncdfsf2_3"
.LASF794:
	.string	"cannot_inline"
.LASF722:
	.string	"high"
.LASF1827:
	.string	"width"
.LASF2032:
	.string	"saved_lineno"
.LASF1320:
	.string	"CODE_FOR_cmpqi_ext_3"
.LASF1116:
	.string	"CODE_FOR_sqrtdf2_1_sse_only"
.LASF479:
	.string	"TYPE_DECL"
.LASF1085:
	.string	"CODE_FOR_negdf2_ifs"
.LASF667:
	.string	"BUILT_IN_FWRITE"
.LASF1054:
	.string	"CODE_FOR_fix_truncsi_memory"
.LASF1613:
	.string	"OTI_cos"
.LASF869:
	.string	"common_flag"
.LASF801:
	.string	"x_cleanup_label"
.LASF388:
	.string	"REG_FRAME_RELATED_EXPR"
.LASF469:
	.string	"FUNCTION_TYPE"
.LASF1002:
	.string	"varasm_status"
.LASF592:
	.string	"EXC_PTR_EXPR"
.LASF1641:
	.string	"LTI_memmove"
.LASF2069:
	.string	"slot"
.LASF542:
	.string	"TRUTH_NOT_EXPR"
.LASF1840:
	.string	"opalign"
.LASF1279:
	.string	"CODE_FOR_mmx_punpckhbw"
.LASF449:
	.string	"TREE_VEC"
.LASF69:
	.string	"SSE_REGS"
.LASF1762:
	.string	"post_options"
.LASF1853:
	.string	"emit_group_store"
.LASF1141:
	.string	"CODE_FOR_strsetdi_rex_1"
.LASF714:
	.string	"lang_flag_0"
.LASF715:
	.string	"lang_flag_1"
.LASF716:
	.string	"lang_flag_2"
.LASF717:
	.string	"lang_flag_3"
.LASF413:
	.string	"NOTE_INSN_EH_REGION_BEG"
.LASF719:
	.string	"lang_flag_5"
.LASF720:
	.string	"lang_flag_6"
.LASF884:
	.string	"lang_flag_7"
.LASF1152:
	.string	"CODE_FOR_rep_stosqi_rex64"
.LASF1130:
	.string	"CODE_FOR_strmovsi_1"
.LASF1914:
	.string	"skip"
.LASF1745:
	.string	"cannot_inline_tree_fn"
.LASF168:
	.string	"COImode"
.LASF2062:
	.string	"htem"
.LASF947:
	.string	"TI_MAIN_IDENTIFIER"
.LASF1862:
	.string	"xbitpos"
.LASF1930:
	.string	"store_expr"
.LASF728:
	.string	"pointer"
.LASF199:
	.string	"MODE_RANDOM"
.LASF2074:
	.string	"try_block"
.LASF1970:
	.string	"bitlength"
.LASF1248:
	.string	"CODE_FOR_mmx_xordi3"
.LASF1270:
	.string	"CODE_FOR_lshrv4hi3"
.LASF1146:
	.string	"CODE_FOR_strsetqi_1"
.LASF1438:
	.string	"CODE_FOR_one_cmplhi2"
.LASF1477:
	.string	"CODE_FOR_sordered"
.LASF2033:
	.string	"old_list"
.LASF868:
	.string	"in_system_header_flag"
.LASF1255:
	.string	"CODE_FOR_mmx_pinsrw"
.LASF495:
	.string	"INIT_EXPR"
.LASF377:
	.string	"REG_UNUSED"
.LASF802:
	.string	"x_return_label"
.LASF139:
	.string	"BImode"
.LASF836:
	.string	"returns_pointer"
.LASF1281:
	.string	"CODE_FOR_mmx_punpckhdq"
.LASF1084:
	.string	"CODE_FOR_negdf2_memory"
.LASF1534:
	.string	"CODE_FOR_strsethi"
.LASF315:
	.string	"SIGN_EXTRACT"
.LASF956:
	.string	"itk_unsigned_int"
.LASF565:
	.string	"UNSAVE_EXPR"
.LASF875:
	.string	"weak_flag"
.LASF1207:
	.string	"CODE_FOR_sse_nandti3"
.LASF262:
	.string	"CONST_DOUBLE"
.LASF1991:
	.string	"pbitsize"
.LASF1542:
	.string	"CODE_FOR_movdicc"
.LASF1128:
	.string	"CODE_FOR_cld"
.LASF526:
	.string	"ABS_EXPR"
.LASF1150:
	.string	"CODE_FOR_rep_stossi_rex64"
.LASF1452:
	.string	"CODE_FOR_lshrsi3"
.LASF1520:
	.string	"CODE_FOR_movstrsi"
.LASF577:
	.string	"POSTDECREMENT_EXPR"
.LASF87:
	.string	"CUMULATIVE_ARGS"
.LASF211:
	.string	"INCLUDE"
.LASF1373:
	.string	"CODE_FOR_adddf3"
.LASF1855:
	.string	"dest"
.LASF1318:
	.string	"CODE_FOR_cmpdi_1_rex64"
.LASF258:
	.string	"RETURN"
.LASF202:
	.string	"MODE_PARTIAL_INT"
.LASF1095:
	.string	"CODE_FOR_ashrsi3_31"
.LASF1097:
	.string	"CODE_FOR_setcc_2"
.LASF2170:
	.string	"tree_code_type"
.LASF1747:
	.string	"add_pending_fn_decls"
.LASF663:
	.string	"BUILT_IN_PUTS"
.LASF1905:
	.string	"emit_push_insn"
.LASF1363:
	.string	"CODE_FOR_floatsisf2"
.LASF1679:
	.string	"LTI_lexf2"
.LASF272:
	.string	"SYMBOL_REF"
.LASF1645:
	.string	"LTI_memset"
.LASF685:
	.string	"BUILT_IN_INIT_DWARF_REG_SIZES"
.LASF934:
	.string	"TI_UV4HI_TYPE"
.LASF1397:
	.string	"CODE_FOR_mulxf3"
.LASF1588:
	.string	"OTI_smod"
.LASF1954:
	.string	"zero_count"
.LASF999:
	.string	"x_pending_chain"
.LASF1890:
	.string	"packed_dest_p"
.LASF1245:
	.string	"CODE_FOR_umulv4hi3_highpart"
.LASF946:
	.string	"TI_V16QI_TYPE"
.LASF2006:
	.string	"binoptab"
.LASF488:
	.string	"BUFFER_REF"
.LASF72:
	.string	"FP_SECOND_SSE_REGS"
.LASF1437:
	.string	"CODE_FOR_one_cmplsi2"
.LASF811:
	.string	"x_context_display"
.LASF537:
	.string	"TRUTH_ANDIF_EXPR"
.LASF909:
	.string	"TI_INTEGER_ONE"
.LASF634:
	.string	"BUILT_IN_STRSPN"
.LASF785:
	.string	"outer"
.LASF2155:
	.string	"mode_mask_array"
.LASF1676:
	.string	"LTI_gtxf2"
.LASF1166:
	.string	"CODE_FOR_allocate_stack_worker_1"
.LASF423:
	.string	"GR_PC"
.LASF1657:
	.string	"LTI_lthf2"
.LASF1559:
	.string	"CODE_FOR_movv4sf"
.LASF1560:
	.string	"CODE_FOR_movv4si"
.LASF1208:
	.string	"CODE_FOR_sse_iorti3"
.LASF1728:
	.string	"insn_gen_fn"
.LASF618:
	.string	"BUILT_IN_BCMP"
.LASF2176:
	.string	"input_filename"
.LASF51:
	.string	"simultaneous_prefetches"
.LASF991:
	.string	"x_regno_reg_rtx"
.LASF348:
	.string	"size"
.LASF602:
	.string	"BUILT_IN_LABS"
.LASF783:
	.string	"emit"
.LASF1217:
	.string	"CODE_FOR_sse_unpckhps"
.LASF556:
	.string	"IN_EXPR"
.LASF2145:
	.string	"try_tablejump"
.LASF582:
	.string	"GOTO_SUBROUTINE_EXPR"
.LASF1382:
	.string	"CODE_FOR_subsf3"
.LASF1367:
	.string	"CODE_FOR_adddi3"
.LASF977:
	.string	"first"
.LASF263:
	.string	"CONST_VECTOR"
.LASF1583:
	.string	"OTI_sdiv"
.LASF527:
	.string	"FFS_EXPR"
.LASF709:
	.string	"public_flag"
.LASF1227:
	.string	"CODE_FOR_cvtss2si"
.LASF216:
	.string	"MATCH_DUP"
.LASF2073:
	.string	"handler"
.LASF688:
	.string	"BUILT_IN_EH_RETURN"
.LASF1724:
	.string	"LTI_profile_function_entry"
.LASF404:
	.string	"NOTE_INSN_LOOP_END"
.LASF3:
	.string	"call"
.LASF206:
	.string	"MODE_VECTOR_INT"
.LASF2:
	.string	"jump"
.LASF2046:
	.string	"set_high_bound"
.LASF408:
	.string	"NOTE_INSN_FUNCTION_END"
.LASF535:
	.string	"BIT_ANDTC_EXPR"
.LASF1508:
	.string	"CODE_FOR_call_value_pop"
.LASF129:
	.string	"_unused2"
.LASF1511:
	.string	"CODE_FOR_untyped_call"
.LASF1739:
	.string	"n_dups"
.LASF2195:
	.string	"bcc_gen_fctn"
.LASF1078:
	.string	"CODE_FOR_udivmoddi4"
.LASF90:
	.string	"size_t"
.LASF628:
	.string	"BUILT_IN_STRNCPY"
.LASF1006:
	.string	"language_function"
.LASF2056:
	.string	"inner_mode"
.LASF906:
	.string	"TI_UINTDI_TYPE"
.LASF1182:
	.string	"CODE_FOR_sse_movntv4sf"
.LASF1912:
	.string	"stack_direction"
.LASF533:
	.string	"BIT_XOR_EXPR"
.LASF1021:
	.string	"OPTAB_LIB_WIDEN"
.LASF1649:
	.string	"LTI_setjmp"
.LASF1319:
	.string	"CODE_FOR_cmpsi_1"
.LASF694:
	.string	"BUILT_IN_EXPECT"
.LASF350:
	.string	"mem_attrs"
.LASF316:
	.string	"ZERO_EXTRACT"
.LASF484:
	.string	"NAMESPACE_DECL"
.LASF553:
	.string	"UNGT_EXPR"
.LASF2081:
	.string	"return_address"
.LASF1173:
	.string	"CODE_FOR_movv2si_internal"
.LASF1831:
	.string	"icode"
.LASF1664:
	.string	"LTI_ltsf2"
.LASF1995:
	.string	"punsignedp"
.LASF2104:
	.string	"normal"
.LASF1171:
	.string	"CODE_FOR_movv8qi_internal"
.LASF48:
	.string	"sse_store"
.LASF1719:
	.string	"LTI_fixunsxfdi"
.LASF145:
	.string	"OImode"
.LASF1203:
	.string	"CODE_FOR_vmrsqrtv4sf2"
.LASF763:
	.string	"packed_flag"
.LASF1156:
	.string	"CODE_FOR_cmpstrqi_rex_1"
.LASF1023:
	.string	"insn_code"
.LASF632:
	.string	"BUILT_IN_STRSTR"
.LASF997:
	.string	"x_apply_args_value"
.LASF2093:
	.string	"newexp"
.LASF817:
	.string	"x_temp_slots"
.LASF1574:
	.string	"OTI_addv"
.LASF1529:
	.string	"CODE_FOR_clrstrsi"
.LASF1099:
	.string	"CODE_FOR_doloop_end_internal"
.LASF54:
	.string	"AREG"
.LASF500:
	.string	"METHOD_CALL_EXPR"
.LASF680:
	.string	"BUILT_IN_ISLESSGREATER"
.LASF1635:
	.string	"LTI_truncxfsf2"
.LASF1732:
	.string	"strict_low"
.LASF838:
	.string	"calls_setjmp"
.LASF797:
	.string	"x_nonlocal_labels"
.LASF967:
	.string	"BITSIZETYPE"
.LASF984:
	.string	"x_last_insn"
.LASF128:
	.string	"_mode"
.LASF1196:
	.string	"CODE_FOR_mulv4sf3"
.LASF1917:
	.string	"args_offset"
.LASF897:
	.string	"TI_ERROR_MARK"
.LASF887:
	.string	"initial"
.LASF1669:
	.string	"LTI_gtdf2"
.LASF1105:
	.string	"CODE_FOR_prologue_set_got"
.LASF74:
	.string	"FLOAT_INT_REGS"
.LASF1025:
	.string	"CODE_FOR_cmpdi_1_insn_rex64"
.LASF1823:
	.string	"shift_amount"
.LASF1577:
	.string	"OTI_smul"
.LASF830:
	.string	"stack_alignment_needed"
.LASF1188:
	.string	"CODE_FOR_sse_loadss"
.LASF1489:
	.string	"CODE_FOR_bltu"
.LASF372:
	.string	"REG_WAS_0"
.LASF1394:
	.string	"CODE_FOR_umulsi3_highpart"
.LASF1204:
	.string	"CODE_FOR_sqrtv4sf2"
.LASF835:
	.string	"returns_pcc_struct"
.LASF651:
	.string	"BUILT_IN_CONSTANT_P"
.LASF902:
	.string	"TI_INTTI_TYPE"
.LASF450:
	.string	"BLOCK"
.LASF1984:
	.string	"targetx"
.LASF1887:
	.string	"realpart_y"
.LASF1528:
	.string	"CODE_FOR_strmovqi_rex64"
.LASF1111:
	.string	"CODE_FOR_ffssi_1"
.LASF1140:
	.string	"CODE_FOR_rep_movqi_rex64"
.LASF1178:
	.string	"CODE_FOR_sse_movmskps"
.LASF1126:
	.string	"CODE_FOR_cosxf2"
.LASF448:
	.string	"TREE_LIST"
.LASF695:
	.string	"END_BUILTINS"
.LASF545:
	.string	"GT_EXPR"
.LASF1858:
	.string	"srcreg"
.LASF321:
	.string	"RANGE_VAR"
.LASF209:
	.string	"rtx_code"
.LASF2048:
	.string	"lo_r"
.LASF515:
	.string	"ROUND_MOD_EXPR"
.LASF472:
	.string	"REAL_CST"
.LASF420:
	.string	"NOTE_INSN_EXPECTED_VALUE"
.LASF607:
	.string	"BUILT_IN_IMAXABS"
.LASF1262:
	.string	"CODE_FOR_gtv4hi3"
.LASF1805:
	.string	"emit_queue"
.LASF205:
	.string	"MODE_COMPLEX_FLOAT"
.LASF1088:
	.string	"CODE_FOR_absdf2_memory"
.LASF305:
	.string	"LTGT"
.LASF777:
	.string	"alias_set"
.LASF1289:
	.string	"CODE_FOR_subv2sf3"
.LASF931:
	.string	"TI_UV4SI_TYPE"
.LASF481:
	.string	"PARM_DECL"
.LASF846:
	.string	"is_thunk"
.LASF751:
	.string	"fragment_origin"
.LASF390:
	.string	"REG_EH_REGION"
.LASF575:
	.string	"PREDECREMENT_EXPR"
.LASF180:
	.string	"V8DImode"
.LASF1766:
	.string	"get_alias_set"
.LASF508:
	.string	"TRUNC_DIV_EXPR"
.LASF367:
	.string	"reg_note"
.LASF1608:
	.string	"OTI_absv"
.LASF1294:
	.string	"CODE_FOR_pfmaxv2sf3"
.LASF796:
	.string	"x_function_call_count"
.LASF1304:
	.string	"CODE_FOR_floatv2si2"
.LASF1190:
	.string	"CODE_FOR_sse_storess"
.LASF660:
	.string	"BUILT_IN_TRAP"
.LASF1145:
	.string	"CODE_FOR_strsethi_rex_1"
.LASF899:
	.string	"TI_INTHI_TYPE"
.LASF1510:
	.string	"CODE_FOR_call_value_exp"
.LASF1532:
	.string	"CODE_FOR_strsetsi"
.LASF1879:
	.string	"last_insn"
.LASF2058:
	.string	"constant_term"
.LASF1693:
	.string	"LTI_floattidf"
.LASF71:
	.string	"FP_TOP_SSE_REGS"
.LASF2053:
	.string	"diff"
.LASF957:
	.string	"itk_long"
.LASF580:
	.string	"TRY_CATCH_EXPR"
.LASF478:
	.string	"CONST_DECL"
.LASF1836:
	.string	"emit_block_move"
.LASF1422:
	.string	"CODE_FOR_xorqi3"
.LASF1392:
	.string	"CODE_FOR_mulsidi3"
.LASF1703:
	.string	"LTI_fixdfsi"
.LASF574:
	.string	"IMAGPART_EXPR"
.LASF1927:
	.string	"offset_rtx"
.LASF2153:
	.string	"mode_unit_size"
.LASF631:
	.string	"BUILT_IN_STRLEN"
.LASF1035:
	.string	"CODE_FOR_swaptf"
.LASF268:
	.string	"SUBREG"
.LASF1041:
	.string	"CODE_FOR_extendsidi2_rex64"
.LASF1062:
	.string	"CODE_FOR_floathidf2"
.LASF65:
	.string	"GENERAL_REGS"
.LASF1199:
	.string	"CODE_FOR_vmdivv4sf3"
.LASF2131:
	.string	"only_cheap"
.LASF175:
	.string	"V4SImode"
.LASF1624:
	.string	"can_compare_purpose"
.LASF541:
	.string	"TRUTH_XOR_EXPR"
.LASF446:
	.string	"ERROR_MARK"
.LASF1269:
	.string	"CODE_FOR_ashrv2si3"
.LASF1705:
	.string	"LTI_fixdfti"
.LASF1143:
	.string	"CODE_FOR_strsetsi_rex_1"
.LASF1931:
	.string	"dont_return_target"
.LASF640:
	.string	"BUILT_IN_COS"
.LASF2183:
	.string	"flag_omit_frame_pointer"
.LASF386:
	.string	"REG_SAVE_AREA"
.LASF1838:
	.string	"call_expr"
.LASF1630:
	.string	"LTI_extendsfxf2"
.LASF2107:
	.string	"exp0"
.LASF2036:
	.string	"exp1"
.LASF1790:
	.string	"constfundata"
.LASF683:
	.string	"BUILT_IN_DWARF_CFA"
.LASF119:
	.string	"_vtable_offset"
.LASF273:
	.string	"ADDRESSOF"
.LASF329:
	.string	"SS_PLUS"
.LASF698:
	.string	"side_effects_flag"
.LASF1517:
	.string	"CODE_FOR_ffssi2"
.LASF2013:
	.string	"highest_pow2_factor"
.LASF1124:
	.string	"CODE_FOR_cosdf2"
.LASF1792:
	.string	"num_clobbers"
.LASF2088:
	.string	"post"
.LASF1256:
	.string	"CODE_FOR_mmx_pextrw"
.LASF586:
	.string	"EXIT_EXPR"
.LASF346:
	.string	"expr"
.LASF1349:
	.string	"CODE_FOR_truncxfdf2"
.LASF2149:
	.string	"ix86_cost"
.LASF437:
	.string	"LCT_CONST"
.LASF1055:
	.string	"CODE_FOR_fix_truncsfsi_sse"
.LASF1627:
	.string	"ccp_store_flag"
.LASF932:
	.string	"TI_UV8HI_TYPE"
.LASF1005:
	.string	"machine_function"
.LASF2020:
	.string	"need_type"
.LASF953:
	.string	"itk_short"
.LASF775:
	.string	"binfo"
.LASF2192:
	.string	"inline_function_decl"
.LASF1399:
	.string	"CODE_FOR_muldf3"
.LASF2163:
	.string	"const_true_rtx"
.LASF1565:
	.string	"CODE_FOR_sfence"
.LASF2178:
	.string	"current_function_decl"
.LASF1483:
	.string	"CODE_FOR_sltgt"
.LASF86:
	.string	"maybe_vaarg"
.LASF461:
	.string	"REFERENCE_TYPE"
.LASF1174:
	.string	"CODE_FOR_movv2sf_internal"
.LASF293:
	.string	"PRE_INC"
.LASF1108:
	.string	"CODE_FOR_eh_return_di"
.LASF1784:
	.string	"from_addr"
.LASF2138:
	.string	"index_expr"
.LASF1070:
	.string	"CODE_FOR_addsi_1_zext"
.LASF148:
	.string	"PSImode"
.LASF1973:
	.string	"word"
.LASF2201:
	.string	"GNU C 4.8.1 -mtune=generic -march=x86-64 -g -fno-strict-aliasing -fstack-protector"
.LASF983:
	.string	"x_first_insn"
.LASF296:
	.string	"PRE_MODIFY"
.LASF2095:
	.string	"init_pending_stack_adjust"
.LASF183:
	.string	"V2DFmode"
.LASF1682:
	.string	"LTI_netf2"
.LASF1033:
	.string	"CODE_FOR_popdi1"
.LASF1241:
	.string	"CODE_FOR_ussubv8qi3"
.LASF1034:
	.string	"CODE_FOR_swapxf"
.LASF50:
	.string	"prefetch_block"
.LASF1797:
	.string	"finish_expr_for_function"
.LASF625:
	.string	"BUILT_IN_STRCAT"
.LASF387:
	.string	"REG_BR_PRED"
.LASF676:
	.string	"BUILT_IN_ISGREATER"
.LASF1168:
	.string	"CODE_FOR_trap"
.LASF1837:
	.string	"retval"
.LASF860:
	.string	"linenum"
.LASF2116:
	.string	"do_jump_by_parts_greater"
.LASF2143:
	.string	"op_mode"
.LASF1266:
	.string	"CODE_FOR_uminv8qi3"
.LASF2075:
	.string	"finally_block"
.LASF524:
	.string	"MIN_EXPR"
.LASF306:
	.string	"SIGN_EXTEND"
.LASF335:
	.string	"LAST_AND_UNUSED_RTX_CODE"
.LASF1545:
	.string	"CODE_FOR_movsfcc"
.LASF620:
	.string	"BUILT_IN_INDEX"
.LASF454:
	.string	"COMPLEX_TYPE"
.LASF891:
	.string	"saved_tree"
.LASF31:
	.string	"mult_bit"
.LASF2158:
	.string	"byte_mode"
.LASF2106:
	.string	"label1"
.LASF1690:
	.string	"LTI_floattisf"
.LASF1383:
	.string	"CODE_FOR_muldi3"
.LASF930:
	.string	"TI_UV4SF_TYPE"
.LASF181:
	.string	"V16QImode"
.LASF1629:
	.string	"LTI_extendsfdf2"
.LASF16:
	.string	"common"
.LASF1052:
	.string	"CODE_FOR_fix_truncdfdi_sse"
.LASF1777:
	.string	"tree_inlining"
.LASF322:
	.string	"RANGE_LIVE"
.LASF502:
	.string	"CLEANUP_POINT_EXPR"
.LASF1893:
	.string	"cmem"
.LASF101:
	.string	"_flags"
.LASF2004:
	.string	"handled_component_p"
.LASF1699:
	.string	"LTI_floattitf"
.LASF1815:
	.string	"lowpart"
.LASF242:
	.string	"JUMP_INSN"
.LASF1280:
	.string	"CODE_FOR_mmx_punpckhwd"
.LASF1165:
	.string	"CODE_FOR_sse_movdfcc_eq"
.LASF256:
	.string	"CLOBBER"
.LASF1673:
	.string	"LTI_unorddf2"
.LASF735:
	.string	"tree_identifier"
.LASF900:
	.string	"TI_INTSI_TYPE"
.LASF422:
	.string	"global_rtl_index"
.LASF2193:
	.string	"lang_expand_expr"
.LASF1370:
	.string	"CODE_FOR_addqi3"
.LASF895:
	.string	"lang_decl"
.LASF1039:
	.string	"CODE_FOR_zero_extendhidi2"
.LASF1059:
	.string	"CODE_FOR_x86_fnstcw_1"
.LASF1323:
	.string	"CODE_FOR_cmpdf"
.LASF1928:
	.string	"old_expr"
.LASF778:
	.string	"lang_specific"
.LASF1314:
	.string	"CODE_FOR_cmpdi"
.LASF156:
	.string	"TFmode"
.LASF1278:
	.string	"CODE_FOR_mmx_packuswb"
.LASF1101:
	.string	"CODE_FOR_return_internal"
.LASF624:
	.string	"BUILT_IN_MEMSET"
.LASF111:
	.string	"_IO_backup_base"
.LASF1475:
	.string	"CODE_FOR_sleu"
.LASF1421:
	.string	"CODE_FOR_xorhi3"
.LASF78:
	.string	"LIM_REG_CLASSES"
.LASF1872:
	.string	"clear_by_pieces_1"
.LASF729:
	.string	"tree_complex"
.LASF154:
	.string	"DFmode"
.LASF5:
	.string	"volatil"
.LASF979:
	.string	"sequence_rtl_expr"
.LASF2188:
	.string	"flag_pic"
.LASF1765:
	.string	"clear_binding_stack"
.LASF1642:
	.string	"LTI_bcopy"
.LASF1007:
	.string	"expand_modifier"
.LASF656:
	.string	"BUILT_IN_APPLY"
.LASF207:
	.string	"MODE_VECTOR_FLOAT"
.LASF444:
	.string	"LCT_RETURNS_TWICE"
.LASF1661:
	.string	"LTI_nesf2"
.LASF1159:
	.string	"CODE_FOR_x86_movdicc_0_m1_rex64"
.LASF2051:
	.string	"index_mode"
.LASF1195:
	.string	"CODE_FOR_vmsubv4sf3"
.LASF1440:
	.string	"CODE_FOR_ashldi3"
.LASF317:
	.string	"HIGH"
.LASF844:
	.string	"contains_functions"
.LASF1040:
	.string	"CODE_FOR_zero_extendqidi2"
.LASF1282:
	.string	"CODE_FOR_mmx_punpcklbw"
.LASF540:
	.string	"TRUTH_OR_EXPR"
.LASF700:
	.string	"addressable_flag"
.LASF1807:
	.string	"to_mode"
.LASF466:
	.string	"RECORD_TYPE"
.LASF743:
	.string	"tree_block"
.LASF1718:
	.string	"LTI_fixunsxfsi"
.LASF1729:
	.string	"insn_operand_data"
.LASF1554:
	.string	"CODE_FOR_allocate_stack_worker"
.LASF828:
	.string	"profile_label_no"
.LASF1238:
	.string	"CODE_FOR_subv2si3"
.LASF1722:
	.string	"LTI_fixunstfdi"
.LASF1824:
	.string	"convert_to_mode"
.LASF1918:
	.string	"addr"
.LASF35:
	.string	"large_insn"
.LASF1013:
	.string	"direction"
.LASF1696:
	.string	"LTI_floattixf"
.LASF1096:
	.string	"CODE_FOR_lshrdi3_1"
.LASF103:
	.string	"_IO_read_end"
.LASF2038:
	.string	"orig_op0"
.LASF359:
	.string	"rt_cselib"
.LASF1720:
	.string	"LTI_fixunsxfti"
.LASF681:
	.string	"BUILT_IN_ISUNORDERED"
.LASF392:
	.string	"REG_MAYBE_DEAD"
.LASF759:
	.string	"string_flag"
.LASF877:
	.string	"no_instrument_function_entry_exit"
.LASF19:
	.string	"vector"
.LASF1369:
	.string	"CODE_FOR_addhi3"
.LASF1986:
	.string	"store_field"
.LASF222:
	.string	"DEFINE_INSN"
.LASF1112:
	.string	"CODE_FOR_sqrtsf2_1"
.LASF1854:
	.string	"orig_dst"
.LASF58:
	.string	"SIREG"
.LASF1420:
	.string	"CODE_FOR_xorsi3"
.LASF1284:
	.string	"CODE_FOR_mmx_punpckldq"
.LASF636:
	.string	"BUILT_IN_STRCHR"
.LASF110:
	.string	"_IO_save_base"
.LASF1298:
	.string	"CODE_FOR_pf2id"
.LASF1316:
	.string	"CODE_FOR_cmphi"
.LASF2029:
	.string	"binop"
.LASF375:
	.string	"REG_NONNEG"
.LASF336:
	.string	"min_align"
.LASF1749:
	.string	"auto_var_in_fn_p"
.LASF1299:
	.string	"CODE_FOR_pf2iw"
.LASF1579:
	.string	"OTI_smul_highpart"
.LASF2057:
	.string	"constant_part"
.LASF49:
	.string	"mmxsse_to_integer"
.LASF976:
	.string	"sequence_stack"
.LASF1345:
	.string	"CODE_FOR_extenddftf2"
.LASF658:
	.string	"BUILT_IN_SETJMP"
.LASF2194:
	.string	"optab_table"
.LASF1942:
	.string	"zeros"
.LASF944:
	.string	"TI_V2SI_TYPE"
.LASF221:
	.string	"MATCH_INSN"
.LASF1857:
	.string	"tgtblk"
.LASF107:
	.string	"_IO_write_end"
.LASF1563:
	.string	"CODE_FOR_movv8qi"
.LASF859:
	.string	"filename"
.LASF1491:
	.string	"CODE_FOR_bgeu"
.LASF369:
	.string	"REG_INC"
.LASF1955:
	.string	"this_node_count"
.LASF1556:
	.string	"CODE_FOR_builtin_setjmp_receiver"
.LASF1964:
	.string	"loop"
.LASF63:
	.string	"INDEX_REGS"
.LASF279:
	.string	"MINUS"
.LASF1211:
	.string	"CODE_FOR_maskcmpv4sf3"
.LASF1651:
	.string	"LTI_unwind_sjlj_register"
.LASF1170:
	.string	"CODE_FOR_movv4si_internal"
.LASF1755:
	.string	"lang_hooks_for_tree_dump"
.LASF781:
	.string	"function"
.LASF357:
	.string	"rttype"
.LASF989:
	.string	"regno_pointer_align"
.LASF365:
	.string	"basic_block_def"
.LASF749:
	.string	"supercontext"
.LASF876:
	.string	"non_addr_const_p"
.LASF588:
	.string	"LABELED_BLOCK_EXPR"
.LASF298:
	.string	"UNORDERED"
.LASF579:
	.string	"VA_ARG_EXPR"
.LASF55:
	.string	"DREG"
.LASF108:
	.string	"_IO_buf_base"
.LASF383:
	.string	"REG_BR_PROB"
.LASF558:
	.string	"CARD_EXPR"
.LASF1327:
	.string	"CODE_FOR_movstricthi"
.LASF1595:
	.string	"OTI_lshr"
.LASF1650:
	.string	"LTI_longjmp"
.LASF122:
	.string	"_offset"
.LASF1773:
	.string	"print_decl"
.LASF1257:
	.string	"CODE_FOR_mmx_pshufw"
.LASF1801:
	.string	"new0"
.LASF1802:
	.string	"new1"
.LASF996:
	.string	"x_saveregs_value"
.LASF490:
	.string	"ARRAY_RANGE_REF"
.LASF201:
	.string	"MODE_FLOAT"
.LASF881:
	.string	"pure_flag"
.LASF1353:
	.string	"CODE_FOR_fix_truncdfdi2"
.LASF761:
	.string	"needs_constructing_flag"
.LASF1901:
	.string	"below"
.LASF829:
	.string	"machine"
.LASF441:
	.string	"LCT_NORETURN"
.LASF1638:
	.string	"LTI_trunctfdf2"
.LASF1087:
	.string	"CODE_FOR_abssf2_ifs"
.LASF150:
	.string	"QFmode"
.LASF1042:
	.string	"CODE_FOR_extendhidi2"
.LASF493:
	.string	"COMPOUND_EXPR"
.LASF79:
	.string	"ix86_args"
.LASF1350:
	.string	"CODE_FOR_trunctfdf2"
.LASF1249:
	.string	"CODE_FOR_mmx_clrdi"
.LASF289:
	.string	"SMAX"
.LASF1537:
	.string	"CODE_FOR_strsetqi_rex64"
.LASF1757:
	.string	"type_quals"
.LASF856:
	.string	"uses_eh_lsda"
.LASF1834:
	.string	"n_insns"
.LASF871:
	.string	"transparent_union"
.LASF499:
	.string	"CALL_EXPR"
.LASF2205:
	.string	"case_values_threshold"
.LASF675:
	.string	"BUILT_IN_FPRINTF_UNLOCKED"
.LASF1200:
	.string	"CODE_FOR_rcpv4sf2"
.LASF1374:
	.string	"CODE_FOR_addsf3"
.LASF1929:
	.string	"from_rtx"
.LASF1977:
	.string	"startbit"
.LASF1418:
	.string	"CODE_FOR_iorqi3"
.LASF530:
	.string	"LROTATE_EXPR"
.LASF504:
	.string	"WITH_RECORD_EXPR"
.LASF1873:
	.string	"store_by_pieces_1"
.LASF1874:
	.string	"store_by_pieces_2"
.LASF1274:
	.string	"CODE_FOR_ashlv2si3"
.LASF629:
	.string	"BUILT_IN_STRCMP"
.LASF1717:
	.string	"LTI_fixunsdfti"
.LASF1053:
	.string	"CODE_FOR_fix_truncsi_nomemory"
.LASF2008:
	.string	"top_p"
.LASF1611:
	.string	"OTI_sqrt"
.LASF1892:
	.string	"reg_mode"
.LASF1409:
	.string	"CODE_FOR_testqi_ccz_1"
.LASF299:
	.string	"ORDERED"
.LASF255:
	.string	"PREFETCH"
.LASF975:
	.string	"next"
.LASF257:
	.string	"CALL"
.LASF1407:
	.string	"CODE_FOR_udivmodhi4"
.LASF687:
	.string	"BUILT_IN_EXTRACT_RETURN_ADDR"
.LASF2127:
	.string	"do_compare_and_jump"
.LASF1118:
	.string	"CODE_FOR_sqrtxf2"
.LASF165:
	.string	"CSImode"
.LASF1305:
	.string	"CODE_FOR_pavgusb"
.LASF2164:
	.string	"const_tiny_rtx"
.LASF2184:
	.string	"flag_optimize_sibling_calls"
.LASF928:
	.string	"TI_VA_LIST_TYPE"
.LASF1567:
	.string	"CODE_FOR_prefetch"
.LASF300:
	.string	"UNEQ"
.LASF1753:
	.string	"end_inlining"
.LASF6:
	.string	"in_struct"
.LASF130:
	.string	"_IO_marker"
.LASF1677:
	.string	"LTI_gexf2"
.LASF1943:
	.string	"store_constructor_field"
.LASF968:
	.string	"SBITSIZETYPE"
.LASF2054:
	.string	"valtype"
.LASF1658:
	.string	"LTI_lehf2"
.LASF1308:
	.string	"CODE_FOR_pfrcpit2v2sf3"
.LASF2130:
	.string	"do_store_flag"
.LASF2045:
	.string	"set_low_bound"
.LASF518:
	.string	"FIX_TRUNC_EXPR"
.LASF774:
	.string	"main_variant"
.LASF659:
	.string	"BUILT_IN_LONGJMP"
.LASF2128:
	.string	"signed_code"
.LASF1803:
	.string	"protect_from_queue"
.LASF684:
	.string	"BUILT_IN_DWARF_FP_REGNUM"
.LASF1731:
	.string	"constraint"
.LASF1435:
	.string	"CODE_FOR_abstf2"
.LASF1076:
	.string	"CODE_FOR_udivqi3"
.LASF1162:
	.string	"CODE_FOR_sse_movsfcc"
.LASF2147:
	.string	"direct_load"
.LASF1876:
	.string	"object"
.LASF1068:
	.string	"CODE_FOR_floatditf2"
.LASF243:
	.string	"CALL_INSN"
.LASF1368:
	.string	"CODE_FOR_addsi3"
.LASF1817:
	.string	"lowfrom"
.LASF1655:
	.string	"LTI_gthf2"
.LASF301:
	.string	"UNGE"
.LASF1346:
	.string	"CODE_FOR_truncdfsf2"
.LASF872:
	.string	"static_ctor_flag"
.LASF955:
	.string	"itk_int"
.LASF302:
	.string	"UNGT"
.LASF1030:
	.string	"CODE_FOR_popsi1"
.LASF13:
	.string	"num_elem"
.LASF1618:
	.string	"OTI_cbranch"
.LASF1900:
	.string	"extra"
.LASF1752:
	.string	"start_inlining"
.LASF1646:
	.string	"LTI_bzero"
.LASF560:
	.string	"CONVERT_EXPR"
.LASF1566:
	.string	"CODE_FOR_sse_prologue_save"
.LASF384:
	.string	"REG_EXEC_COUNT"
.LASF1515:
	.string	"CODE_FOR_sibcall_epilogue"
.LASF334:
	.string	"US_TRUNCATE"
.LASF2157:
	.string	"class_narrowest_mode"
.LASF985:
	.string	"x_cur_insn_uid"
.LASF245:
	.string	"CODE_LABEL"
.LASF2204:
	.string	"_IO_lock_t"
.LASF1863:
	.string	"big_endian_correction"
.LASF474:
	.string	"VECTOR_CST"
.LASF102:
	.string	"_IO_read_ptr"
.LASF1742:
	.string	"lang_print_tree_hook"
.LASF1234:
	.string	"CODE_FOR_usaddv8qi3"
.LASF1317:
	.string	"CODE_FOR_cmpqi"
.LASF358:
	.string	"rt_addr_diff_vec_flags"
.LASF1079:
	.string	"CODE_FOR_udivmodsi4"
.LASF1809:
	.string	"to_real"
.LASF1051:
	.string	"CODE_FOR_fix_truncsfdi_sse"
.LASF1592:
	.string	"OTI_ior"
.LASF1502:
	.string	"CODE_FOR_indirect_jump"
.LASF223:
	.string	"DEFINE_PEEPHOLE"
.LASF1107:
	.string	"CODE_FOR_eh_return_si"
.LASF673:
	.string	"BUILT_IN_FPUTS_UNLOCKED"
.LASF260:
	.string	"RESX"
.LASF1852:
	.string	"shift"
.LASF414:
	.string	"NOTE_INSN_EH_REGION_END"
.LASF2014:
	.string	"highest_pow2_factor_for_type"
.LASF116:
	.string	"_flags2"
.LASF171:
	.string	"V2SImode"
.LASF750:
	.string	"abstract_origin"
.LASF285:
	.string	"ASHIFTRT"
.LASF239:
	.string	"EQ_ATTR"
.LASF2186:
	.string	"flag_inline_functions"
.LASF880:
	.string	"no_limit_stack"
.LASF1492:
	.string	"CODE_FOR_ble"
.LASF198:
	.string	"mode_class"
.LASF1665:
	.string	"LTI_lesf2"
.LASF2012:
	.string	"var_rtx"
.LASF799:
	.string	"x_nonlocal_goto_handler_labels"
.LASF1999:
	.string	"placeholder_ptr"
.LASF349:
	.string	"align"
.LASF419:
	.string	"NOTE_INSN_BASIC_BLOCK"
.LASF1413:
	.string	"CODE_FOR_andhi3"
.LASF1621:
	.string	"OTI_push"
.LASF2017:
	.string	"find_placeholder"
.LASF2132:
	.string	"operand_mode"
.LASF274:
	.string	"QUEUED"
.LASF1937:
	.string	"copy_size_rtx"
.LASF1519:
	.string	"CODE_FOR_sqrtdf2"
.LASF1700:
	.string	"LTI_fixsfsi"
.LASF236:
	.string	"ATTR"
.LASF572:
	.string	"CONJ_EXPR"
.LASF482:
	.string	"RESULT_DECL"
.LASF84:
	.string	"sse_nregs"
.LASF792:
	.string	"return_rtx"
.LASF1782:
	.string	"explicit_inc_to"
.LASF106:
	.string	"_IO_write_ptr"
.LASF1315:
	.string	"CODE_FOR_cmpsi"
.LASF798:
	.string	"x_nonlocal_goto_handler_slots"
.LASF1295:
	.string	"CODE_FOR_pfminv2sf3"
.LASF1947:
	.string	"need_to_clear"
.LASF1288:
	.string	"CODE_FOR_addv2sf3"
.LASF1670:
	.string	"LTI_gedf2"
.LASF1471:
	.string	"CODE_FOR_sltu"
.LASF361:
	.string	"rttree"
.LASF1478:
	.string	"CODE_FOR_suneq"
.LASF2190:
	.string	"reg_raw_mode"
.LASF1252:
	.string	"CODE_FOR_mmx_uavgv8qi3"
.LASF1264:
	.string	"CODE_FOR_umaxv8qi3"
.LASF598:
	.string	"BUILT_IN_NORMAL"
.LASF555:
	.string	"UNEQ_EXPR"
.LASF1830:
	.string	"tmode"
.LASF506:
	.string	"MINUS_EXPR"
.LASF1770:
	.string	"honor_readonly"
.LASF1189:
	.string	"CODE_FOR_sse_movss"
.LASF1154:
	.string	"CODE_FOR_cmpstrqi_nz_rex_1"
.LASF529:
	.string	"RSHIFT_EXPR"
.LASF137:
	.string	"machine_mode"
.LASF2067:
	.string	"unary_op"
.LASF288:
	.string	"SMIN"
.LASF1415:
	.string	"CODE_FOR_iordi3"
.LASF1322:
	.string	"CODE_FOR_cmptf"
.LASF1330:
	.string	"CODE_FOR_movstrictqi"
.LASF765:
	.string	"pointer_depth"
.LASF559:
	.string	"RANGE_EXPR"
.LASF2203:
	.string	"/home/yunqi/SPEC2006/benchspec/CPU2006/403.gcc/build/build_base_amd64-m64-gcc43-nn.0000"
.LASF458:
	.string	"CHAR_TYPE"
.LASF507:
	.string	"MULT_EXPR"
.LASF468:
	.string	"QUAL_UNION_TYPE"
.LASF393:
	.string	"REG_NORETURN"
.LASF519:
	.string	"FIX_CEIL_EXPR"
.LASF1891:
	.string	"packed_src_p"
.LASF1576:
	.string	"OTI_subv"
.LASF1505:
	.string	"CODE_FOR_call_pop"
.LASF557:
	.string	"SET_LE_EXPR"
.LASF1445:
	.string	"CODE_FOR_ashlqi3"
.LASF2118:
	.string	"do_jump_by_parts_greater_rtx"
.LASF647:
	.string	"BUILT_IN_SAVEREGS"
.LASF286:
	.string	"LSHIFTRT"
.LASF303:
	.string	"UNLE"
.LASF971:
	.string	"var_refs_queue"
.LASF938:
	.string	"TI_V4SF_TYPE"
.LASF972:
	.string	"modified"
.LASF2171:
	.string	"dconst0"
.LASF2172:
	.string	"dconst1"
.LASF186:
	.string	"V8SFmode"
.LASF1479:
	.string	"CODE_FOR_sunge"
.LASF1503:
	.string	"CODE_FOR_tablejump"
.LASF2022:
	.string	"modifier"
.LASF581:
	.string	"TRY_FINALLY_EXPR"
.LASF1628:
	.string	"libfunc_index"
.LASF1480:
	.string	"CODE_FOR_sungt"
.LASF1297:
	.string	"CODE_FOR_femms"
.LASF1691:
	.string	"LTI_floatsidf"
.LASF20:
	.string	"string"
.LASF1721:
	.string	"LTI_fixunstfsi"
.LASF1247:
	.string	"CODE_FOR_mmx_iordi3"
.LASF471:
	.string	"INTEGER_CST"
.LASF8:
	.string	"integrated"
.LASF188:
	.string	"V16SFmode"
.LASF1012:
	.string	"EXPAND_WRITE"
.LASF2070:
	.string	"cleanups"
.LASF1193:
	.string	"CODE_FOR_vmaddv4sf3"
.LASF741:
	.string	"complexity"
.LASF142:
	.string	"SImode"
.LASF597:
	.string	"BUILT_IN_MD"
.LASF547:
	.string	"EQ_EXPR"
.LASF837:
	.string	"needs_context"
.LASF381:
	.string	"REG_DEP_ANTI"
.LASF1060:
	.string	"CODE_FOR_x86_fldcw_1"
.LASF21:
	.string	"complex"
.LASF813:
	.string	"x_parm_birth_insn"
.LASF1967:
	.string	"nbits"
.LASF1259:
	.string	"CODE_FOR_eqv4hi3"
.LASF1594:
	.string	"OTI_ashl"
.LASF292:
	.string	"PRE_DEC"
.LASF724:
	.string	"realvaluetype"
.LASF1596:
	.string	"OTI_ashr"
.LASF480:
	.string	"VAR_DECL"
.LASF864:
	.string	"inline_flag"
.LASF1089:
	.string	"CODE_FOR_absdf2_ifs"
.LASF38:
	.string	"int_load"
.LASF655:
	.string	"BUILT_IN_APPLY_ARGS"
.LASF1701:
	.string	"LTI_fixsfdi"
.LASF1740:
	.string	"n_alternatives"
.LASF228:
	.string	"DEFINE_EXPAND"
.LASF1329:
	.string	"CODE_FOR_reload_outqi"
.LASF1877:
	.string	"emit_move_insn"
.LASF1212:
	.string	"CODE_FOR_maskncmpv4sf3"
.LASF1151:
	.string	"CODE_FOR_rep_stosqi"
.LASF2112:
	.string	"cmp0"
.LASF247:
	.string	"COND_EXEC"
.LASF812:
	.string	"x_trampoline_list"
.LASF853:
	.string	"x_dont_save_pending_sizes_p"
.LASF808:
	.string	"x_arg_pointer_save_area"
.LASF167:
	.string	"CTImode"
.LASF1455:
	.string	"CODE_FOR_rotldi3"
.LASF1206:
	.string	"CODE_FOR_sse_andti3"
.LASF252:
	.string	"UNSPEC_VOLATILE"
.LASF1512:
	.string	"CODE_FOR_return"
.LASF1082:
	.string	"CODE_FOR_negsf2_memory"
.LASF772:
	.string	"maxval"
.LASF1061:
	.string	"CODE_FOR_floathisf2"
.LASF403:
	.string	"NOTE_INSN_LOOP_BEG"
.LASF352:
	.string	"rtunion_def"
.LASF2181:
	.string	"flag_force_mem"
.LASF39:
	.string	"int_store"
.LASF1321:
	.string	"CODE_FOR_cmpxf"
.LASF1242:
	.string	"CODE_FOR_ussubv4hi3"
.LASF1938:
	.string	"label"
.LASF898:
	.string	"TI_INTQI_TYPE"
.LASF412:
	.string	"NOTE_INSN_FUNCTION_BEG"
.LASF1569:
	.string	"libfunc"
.LASF496:
	.string	"TARGET_EXPR"
.LASF178:
	.string	"V8HImode"
.LASF1303:
	.string	"CODE_FOR_pi2fw"
.LASF1487:
	.string	"CODE_FOR_bgtu"
.LASF1616:
	.string	"OTI_tst"
.LASF1198:
	.string	"CODE_FOR_divv4sf3"
.LASF608:
	.string	"BUILT_IN_CONJ"
.LASF1149:
	.string	"CODE_FOR_rep_stossi"
.LASF2064:
	.string	"iffalse"
.LASF465:
	.string	"SET_TYPE"
.LASF1125:
	.string	"CODE_FOR_cossf2"
.LASF238:
	.string	"SET_ATTR_ALTERNATIVE"
.LASF1609:
	.string	"OTI_one_cmpl"
.LASF356:
	.string	"rtstr"
.LASF1410:
	.string	"CODE_FOR_testqi_ext_ccno_0"
.LASF121:
	.string	"_lock"
.LASF45:
	.string	"mmx_store"
.LASF190:
	.string	"CCmode"
.LASF1385:
	.string	"CODE_FOR_mulhi3"
.LASF1640:
	.string	"LTI_memcpy"
.LASF1347:
	.string	"CODE_FOR_truncxfsf2"
.LASF691:
	.string	"BUILT_IN_STDARG_START"
.LASF1847:
	.string	"ssize"
.LASF486:
	.string	"BIT_FIELD_REF"
.LASF1430:
	.string	"CODE_FOR_negxf2"
.LASF1639:
	.string	"LTI_abort"
.LASF343:
	.string	"scale"
.LASF1183:
	.string	"CODE_FOR_sse_movntdi"
.LASF2077:
	.string	"done_label"
.LASF345:
	.string	"alias"
.LASF1776:
	.string	"set_yydebug"
.LASF1988:
	.string	"width_mask"
.LASF1602:
	.string	"OTI_umax"
.LASF712:
	.string	"bounded_flag"
.LASF1481:
	.string	"CODE_FOR_sunle"
.LASF617:
	.string	"BUILT_IN_BZERO"
.LASF1867:
	.string	"use_group_regs"
.LASF1482:
	.string	"CODE_FOR_sunlt"
.LASF854:
	.string	"uses_const_pool"
.LASF1283:
	.string	"CODE_FOR_mmx_punpcklwd"
.LASF933:
	.string	"TI_UV8QI_TYPE"
.LASF1652:
	.string	"LTI_unwind_sjlj_unregister"
.LASF1707:
	.string	"LTI_fixxfdi"
.LASF1063:
	.string	"CODE_FOR_floathixf2"
.LASF1169:
	.string	"CODE_FOR_movv4sf_internal"
.LASF432:
	.string	"GR_VIRTUAL_OUTGOING_ARGS"
.LASF192:
	.string	"CCGOCmode"
.LASF805:
	.string	"x_rtl_expr_chain"
.LASF986:
	.string	"x_last_linenum"
.LASF1000:
	.string	"eh_status"
.LASF1387:
	.string	"CODE_FOR_umulqihi3"
.LASF839:
	.string	"calls_longjmp"
.LASF109:
	.string	"_IO_buf_end"
.LASF766:
	.string	"user_align"
.LASF1538:
	.string	"CODE_FOR_cmpstrsi"
.LASF604:
	.string	"BUILT_IN_FABSF"
.LASF93:
	.string	"short unsigned int"
.LASF1940:
	.string	"mostly_zeros_p"
.LASF605:
	.string	"BUILT_IN_FABSL"
.LASF498:
	.string	"BIND_EXPR"
.LASF1509:
	.string	"CODE_FOR_call_value"
.LASF1605:
	.string	"OTI_neg"
.LASF1155:
	.string	"CODE_FOR_cmpstrqi_1"
.LASF1218:
	.string	"CODE_FOR_sse_unpcklps"
.LASF1582:
	.string	"OTI_umul_widen"
.LASF2177:
	.string	"lineno"
.LASF1123:
	.string	"CODE_FOR_sintf2"
.LASF1525:
	.string	"CODE_FOR_strmovhi"
.LASF1546:
	.string	"CODE_FOR_movdfcc"
.LASF197:
	.string	"MAX_MACHINE_MODE"
.LASF229:
	.string	"DEFINE_DELAY"
.LASF1668:
	.string	"LTI_nedf2"
.LASF328:
	.string	"VEC_DUPLICATE"
.LASF2043:
	.string	"iunsignedp"
.LASF104:
	.string	"_IO_read_base"
.LASF1444:
	.string	"CODE_FOR_ashlhi3"
.LASF1384:
	.string	"CODE_FOR_mulsi3"
.LASF1223:
	.string	"CODE_FOR_cvtpi2ps"
.LASF1493:
	.string	"CODE_FOR_bleu"
.LASF845:
	.string	"has_computed_jump"
.LASF1949:
	.string	"elttype"
.LASF562:
	.string	"NON_LVALUE_EXPR"
.LASF943:
	.string	"TI_V4HI_TYPE"
.LASF994:
	.string	"x_inhibit_defer_pop"
.LASF1683:
	.string	"LTI_gttf2"
.LASF1681:
	.string	"LTI_eqtf2"
.LASF1175:
	.string	"CODE_FOR_movti_internal"
.LASF1781:
	.string	"autinc_to"
.LASF406:
	.string	"NOTE_INSN_LOOP_VTOP"
.LASF701:
	.string	"volatile_flag"
.LASF1741:
	.string	"output_format"
.LASF643:
	.string	"BUILT_IN_COSF"
.LASF646:
	.string	"BUILT_IN_COSL"
.LASF779:
	.string	"lang_type"
.LASF554:
	.string	"UNGE_EXPR"
.LASF1748:
	.string	"tree_chain_matters_p"
.LASF1634:
	.string	"LTI_truncdfsf2"
.LASF668:
	.string	"BUILT_IN_FPRINTF"
.LASF890:
	.string	"live_range_rtl"
.LASF1723:
	.string	"LTI_fixunstfti"
.LASF215:
	.string	"MATCH_SCRATCH"
.LASF1775:
	.string	"print_identifier"
.LASF1429:
	.string	"CODE_FOR_negdf2"
.LASF713:
	.string	"deprecated_flag"
.LASF753:
	.string	"address"
.LASF1336:
	.string	"CODE_FOR_zero_extendhisi2"
.LASF1976:
	.string	"datum"
.LASF1180:
	.string	"CODE_FOR_mmx_maskmovq"
.LASF650:
	.string	"BUILT_IN_ARGS_INFO"
.LASF723:
	.string	"tree_int_cst"
.LASF1388:
	.string	"CODE_FOR_mulqihi3"
.LASF866:
	.string	"virtual_flag"
.LASF1925:
	.string	"orig_to_rtx"
.LASF1866:
	.string	"use_regs"
.LASF1362:
	.string	"CODE_FOR_fix_truncsfhi2"
.LASF1001:
	.string	"stmt_status"
.LASF159:
	.string	"SCmode"
.LASF477:
	.string	"LABEL_DECL"
.LASF2121:
	.string	"do_jump_by_parts_equality"
.LASF1024:
	.string	"CODE_FOR_cmpdi_ccno_1_rex64"
.LASF280:
	.string	"MULT"
.LASF710:
	.string	"private_flag"
.LASF1344:
	.string	"CODE_FOR_extenddfxf2"
.LASF120:
	.string	"_shortbuf"
.LASF132:
	.string	"_sbuf"
.LASF1871:
	.string	"clear_by_pieces"
.LASF990:
	.string	"regno_decl"
.LASF1386:
	.string	"CODE_FOR_mulqi3"
.LASF1869:
	.string	"can_store_by_pieces"
.LASF725:
	.string	"tree_real_cst"
.LASF1443:
	.string	"CODE_FOR_ashlsi3"
.LASF546:
	.string	"GE_EXPR"
.LASF425:
	.string	"GR_STACK_POINTER"
.LASF1969:
	.string	"domain_max"
.LASF927:
	.string	"TI_PTRDIFF_TYPE"
.LASF234:
	.string	"ADDRESS"
.LASF323:
	.string	"CONSTANT_P_RTX"
.LASF2110:
	.string	"rcode1"
.LASF2168:
	.string	"reload_in_progress"
.LASF1395:
	.string	"CODE_FOR_smuldi3_highpart"
.LASF76:
	.string	"FLOAT_INT_SSE_REGS"
.LASF62:
	.string	"NON_Q_REGS"
.LASF1570:
	.string	"optab"
.LASF1236:
	.string	"CODE_FOR_subv8qi3"
.LASF1032:
	.string	"CODE_FOR_pushdi2_rex64"
.LASF800:
	.string	"x_nonlocal_goto_stack_level"
.LASF2096:
	.string	"clear_pending_stack_adjust"
.LASF1086:
	.string	"CODE_FOR_abssf2_memory"
.LASF2024:
	.string	"original_target"
.LASF945:
	.string	"TI_V2SF_TYPE"
.LASF1846:
	.string	"orig_src"
.LASF92:
	.string	"unsigned char"
.LASF1979:
	.string	"startb"
.LASF769:
	.string	"symtab"
.LASF1484:
	.string	"CODE_FOR_beq"
.LASF1424:
	.string	"CODE_FOR_negdi2"
.LASF455:
	.string	"VECTOR_TYPE"
.LASF960:
	.string	"itk_unsigned_long_long"
.LASF1393:
	.string	"CODE_FOR_umuldi3_highpart"
.LASF1738:
	.string	"n_operands"
.LASF259:
	.string	"TRAP_IF"
.LASF395:
	.string	"REG_SETJMP"
.LASF1601:
	.string	"OTI_umin"
.LASF814:
	.string	"x_last_parm_insn"
.LASF1135:
	.string	"CODE_FOR_strmovqi_rex_1"
.LASF679:
	.string	"BUILT_IN_ISLESSEQUAL"
.LASF756:
	.string	"size_unit"
.LASF497:
	.string	"COND_EXPR"
.LASF2200:
	.string	"volatile_ok"
.LASF1258:
	.string	"CODE_FOR_eqv8qi3"
.LASF1091:
	.string	"CODE_FOR_x86_shld_1"
.LASF1843:
	.string	"move_block_to_reg"
.LASF2142:
	.string	"index_bits"
.LASF61:
	.string	"Q_REGS"
.LASF374:
	.string	"REG_LIBCALL"
.LASF155:
	.string	"XFmode"
.LASF133:
	.string	"_pos"
.LASF1882:
	.string	"class"
.LASF2080:
	.string	"subr"
.LASF473:
	.string	"COMPLEX_CST"
.LASF2060:
	.string	"innermode"
.LASF1996:
	.string	"pvolatilep"
.LASF1361:
	.string	"CODE_FOR_fix_truncdfhi2"
.LASF264:
	.string	"CONST_STRING"
.LASF368:
	.string	"REG_DEAD"
.LASF1744:
	.string	"walk_subtrees"
.LASF476:
	.string	"FUNCTION_DECL"
.LASF151:
	.string	"HFmode"
.LASF2182:
	.string	"flag_force_addr"
.LASF1490:
	.string	"CODE_FOR_bge"
.LASF962:
	.string	"_Bool"
.LASF1875:
	.string	"clear_storage"
.LASF1486:
	.string	"CODE_FOR_bgt"
.LASF2124:
	.string	"compare_from_rtx"
.LASF2161:
	.string	"rtx_class"
.LASF1933:
	.string	"lab1"
.LASF1934:
	.string	"lab2"
.LASF1402:
	.string	"CODE_FOR_divtf3"
.LASF707:
	.string	"nothrow_flag"
.LASF517:
	.string	"EXACT_DIV_EXPR"
.LASF1473:
	.string	"CODE_FOR_sgeu"
.LASF176:
	.string	"V4DImode"
.LASF512:
	.string	"TRUNC_MOD_EXPR"
.LASF250:
	.string	"ASM_OPERANDS"
.LASF1845:
	.string	"emit_group_load"
.LASF1333:
	.string	"CODE_FOR_movdf"
.LASF1185:
	.string	"CODE_FOR_sse_movlhps"
.LASF1331:
	.string	"CODE_FOR_movdi"
.LASF1822:
	.string	"intermediate"
.LASF1688:
	.string	"LTI_floatsisf"
.LASF2082:
	.string	"is_aligning_offset"
.LASF1603:
	.string	"OTI_mov"
.LASF1228:
	.string	"CODE_FOR_cvttss2si"
.LASF840:
	.string	"calls_alloca"
.LASF690:
	.string	"BUILT_IN_VARARGS_START"
.LASF1142:
	.string	"CODE_FOR_strsetsi_1"
.LASF980:
	.string	"emit_status"
.LASF1804:
	.string	"queued_subexp_p"
.LASF1841:
	.string	"pred"
.LASF733:
	.string	"elements"
.LASF2123:
	.string	"part"
.LASF1697:
	.string	"LTI_floatsitf"
.LASF550:
	.string	"ORDERED_EXPR"
.LASF24:
	.string	"type"
.LASF1598:
	.string	"OTI_rotr"
.LASF427:
	.string	"GR_HARD_FRAME_POINTER"
.LASF96:
	.string	"__off_t"
.LASF1960:
	.string	"pos_rtx"
.LASF1826:
	.string	"oldmode"
.LASF901:
	.string	"TI_INTDI_TYPE"
.LASF703:
	.string	"unsigned_flag"
.LASF2039:
	.string	"memloc"
.LASF1103:
	.string	"CODE_FOR_return_indirect_internal"
.LASF1358:
	.string	"CODE_FOR_fix_truncsfsi2"
.LASF1458:
	.string	"CODE_FOR_rotlqi3"
.LASF1357:
	.string	"CODE_FOR_fix_truncdfsi2"
.LASF987:
	.string	"x_last_filename"
.LASF1434:
	.string	"CODE_FOR_absxf2"
.LASF1275:
	.string	"CODE_FOR_mmx_ashldi3"
.LASF528:
	.string	"LSHIFT_EXPR"
.LASF1636:
	.string	"LTI_trunctfsf2"
.LASF534:
	.string	"BIT_AND_EXPR"
.LASF754:
	.string	"tree_type"
.LASF1067:
	.string	"CODE_FOR_floatdixf2"
.LASF189:
	.string	"BLKmode"
.LASF803:
	.string	"x_save_expr_regs"
.LASF2152:
	.string	"mode_size"
.LASF149:
	.string	"PDImode"
.LASF863:
	.string	"regdecl_flag"
.LASF487:
	.string	"INDIRECT_REF"
.LASF768:
	.string	"reference_to"
.LASF832:
	.string	"language"
.LASF14:
	.string	"elem"
.LASF376:
	.string	"REG_NO_CONFLICT"
.LASF1523:
	.string	"CODE_FOR_strmovsi"
.LASF914:
	.string	"TI_BITSIZE_ZERO"
.LASF2021:
	.string	"expand_expr"
.LASF1647:
	.string	"LTI_unwind_resume"
.LASF2049:
	.string	"setval"
.LASF1800:
	.string	"temp"
.LASF2063:
	.string	"iftrue"
.LASF1763:
	.string	"init"
.LASF1589:
	.string	"OTI_umod"
.LASF952:
	.string	"itk_unsigned_char"
.LASF60:
	.string	"AD_REGS"
.LASF217:
	.string	"MATCH_OPERATOR"
.LASF809:
	.string	"x_clobber_return_insn"
.LASF609:
	.string	"BUILT_IN_CONJF"
.LASF225:
	.string	"DEFINE_INSN_AND_SPLIT"
.LASF610:
	.string	"BUILT_IN_CONJL"
.LASF2140:
	.string	"table_label"
.LASF623:
	.string	"BUILT_IN_MEMCMP"
.LASF1326:
	.string	"CODE_FOR_movhi"
.LASF966:
	.string	"USIZETYPE"
.LASF1210:
	.string	"CODE_FOR_sse_clrv4sf"
.LASF1235:
	.string	"CODE_FOR_usaddv4hi3"
.LASF1968:
	.string	"domain_min"
.LASF1488:
	.string	"CODE_FOR_blt"
.LASF1405:
	.string	"CODE_FOR_divmoddi4"
.LASF841:
	.string	"calls_eh_return"
.LASF332:
	.string	"US_MINUS"
.LASF682:
	.string	"BUILT_IN_UNWIND_INIT"
.LASF1920:
	.string	"expand_assignment"
.LASF1553:
	.string	"CODE_FOR_pro_epilogue_adjust_stack"
.LASF708:
	.string	"static_flag"
.LASF1713:
	.string	"LTI_fixunssfdi"
.LASF1746:
	.string	"disregard_inline_limits"
.LASF1680:
	.string	"LTI_unordxf2"
.LASF1580:
	.string	"OTI_umul_highpart"
.LASF1132:
	.string	"CODE_FOR_strmovhi_1"
.LASF738:
	.string	"value"
.LASF131:
	.string	"_next"
.LASF27:
	.string	"processor_costs"
.LASF1694:
	.string	"LTI_floatsixf"
.LASF1016:
	.string	"downward"
.LASF818:
	.string	"x_temp_slot_level"
.LASF1998:
	.string	"bit_offset"
.LASF1865:
	.string	"call_fusage"
.LASF569:
	.string	"ENTRY_VALUE_EXPR"
.LASF1985:
	.string	"nesting"
.LASF793:
	.string	"internal_arg_pointer"
.LASF1706:
	.string	"LTI_fixxfsi"
.LASF1164:
	.string	"CODE_FOR_sse_movdfcc"
.LASF806:
	.string	"x_tail_recursion_label"
.LASF1290:
	.string	"CODE_FOR_subrv2sf3"
.LASF549:
	.string	"UNORDERED_EXPR"
.LASF1710:
	.string	"LTI_fixtfdi"
.LASF831:
	.string	"preferred_stack_boundary"
.LASF843:
	.string	"has_nonlocal_goto"
.LASF1485:
	.string	"CODE_FOR_bne"
.LASF1586:
	.string	"OTI_udiv"
.LASF1816:
	.string	"fill_value"
.LASF1644:
	.string	"LTI_bcmp"
.LASF64:
	.string	"LEGACY_REGS"
.LASF2089:
	.string	"incremented"
.LASF1516:
	.string	"CODE_FOR_eh_return"
.LASF1656:
	.string	"LTI_gehf2"
.LASF1578:
	.string	"OTI_smulv"
.LASF911:
	.string	"TI_NULL_POINTER"
.LASF822:
	.string	"inlinable"
.LASF1625:
	.string	"ccp_jump"
.LASF1956:
	.string	"lo_index"
.LASF1074:
	.string	"CODE_FOR_subsi3_carry_zext"
.LASF1708:
	.string	"LTI_fixxfti"
.LASF1253:
	.string	"CODE_FOR_mmx_uavgv4hi3"
.LASF459:
	.string	"POINTER_TYPE"
.LASF1104:
	.string	"CODE_FOR_nop"
.LASF612:
	.string	"BUILT_IN_CREALF"
.LASF173:
	.string	"V4QImode"
.LASF1909:
	.string	"reg_parm_stack_space"
.LASF954:
	.string	"itk_unsigned_short"
.LASF613:
	.string	"BUILT_IN_CREALL"
.LASF1433:
	.string	"CODE_FOR_absdf2"
.LASF2173:
	.string	"global_trees"
.LASF1417:
	.string	"CODE_FOR_iorhi3"
.LASF622:
	.string	"BUILT_IN_MEMCPY"
.LASF417:
	.string	"NOTE_INSN_RANGE_END"
.LASF355:
	.string	"rtuint"
.LASF795:
	.string	"hard_reg_initial_vals"
.LASF1883:
	.string	"stack"
.LASF1366:
	.string	"CODE_FOR_floatdidf2"
.LASF1446:
	.string	"CODE_FOR_ashrdi3"
.LASF1978:
	.string	"endbit"
.LASF2198:
	.string	"clrstr_optab"
.LASF1286:
	.string	"CODE_FOR_ldmxcsr"
.LASF294:
	.string	"POST_DEC"
.LASF1536:
	.string	"CODE_FOR_strsetqi"
.LASF1953:
	.string	"count"
.LASF213:
	.string	"INSN_LIST"
.LASF1593:
	.string	"OTI_xor"
.LASF429:
	.string	"GR_VIRTUAL_INCOMING_ARGS"
.LASF1359:
	.string	"CODE_FOR_fix_truncxfhi2"
.LASF470:
	.string	"LANG_TYPE"
.LASF913:
	.string	"TI_SIZE_ONE"
.LASF378:
	.string	"REG_CC_SETTER"
.LASF389:
	.string	"REG_EH_CONTEXT"
.LASF748:
	.string	"subblocks"
.LASF424:
	.string	"GR_CC0"
.LASF787:
	.string	"args_size"
.LASF56:
	.string	"CREG"
.LASF117:
	.string	"_old_offset"
.LASF1760:
	.string	"init_options"
.LASF1513:
	.string	"CODE_FOR_prologue"
.LASF409:
	.string	"NOTE_INSN_PROLOGUE_END"
.LASF2117:
	.string	"swap"
.LASF1518:
	.string	"CODE_FOR_sqrtsf2"
.LASF1058:
	.string	"CODE_FOR_fix_trunchi_memory"
.LASF1687:
	.string	"LTI_unordtf2"
.LASF865:
	.string	"bit_field_flag"
.LASF942:
	.string	"TI_V8QI_TYPE"
.LASF1100:
	.string	"CODE_FOR_blockage"
.LASF1946:
	.string	"field"
.LASF1793:
	.string	"mem1"
.LASF834:
	.string	"returns_struct"
.LASF1522:
	.string	"CODE_FOR_strmovdi_rex64"
.LASF1897:
	.string	"xpart"
.LASF615:
	.string	"BUILT_IN_CIMAGF"
.LASF304:
	.string	"UNLT"
.LASF1136:
	.string	"CODE_FOR_rep_movdi_rex64"
.LASF1795:
	.string	"mark_expr_status"
.LASF464:
	.string	"ARRAY_TYPE"
.LASF1663:
	.string	"LTI_gesf2"
.LASF1427:
	.string	"CODE_FOR_negqi2"
.LASF1501:
	.string	"CODE_FOR_bltgt"
.LASF539:
	.string	"TRUTH_AND_EXPR"
.LASF862:
	.string	"nonlocal_flag"
.LASF146:
	.string	"PQImode"
.LASF1343:
	.string	"CODE_FOR_extendsftf2"
.LASF755:
	.string	"values"
.LASF1880:
	.string	"emit_move_insn_1"
.LASF30:
	.string	"mult_init"
.LASF15:
	.string	"tree"
.LASF2097:
	.string	"do_pending_stack_adjust"
.LASF1457:
	.string	"CODE_FOR_rotlhi3"
.LASF1291:
	.string	"CODE_FOR_gtv2sf3"
.LASF1908:
	.string	"args_so_far"
.LASF1416:
	.string	"CODE_FOR_iorsi3"
.LASF81:
	.string	"nregs"
.LASF318:
	.string	"LO_SUM"
.LASF230:
	.string	"DEFINE_FUNCTION_UNIT"
.LASF379:
	.string	"REG_CC_USER"
.LASF1268:
	.string	"CODE_FOR_ashrv4hi3"
.LASF762:
	.string	"transparent_union_flag"
.LASF1584:
	.string	"OTI_sdivv"
.LASF1251:
	.string	"CODE_FOR_mmx_nanddi3"
.LASF112:
	.string	"_IO_save_end"
.LASF436:
	.string	"LCT_NORMAL"
.LASF309:
	.string	"FLOAT_EXTEND"
.LASF2202:
	.string	"expr.c"
.LASF2167:
	.string	"reload_completed"
.LASF1818:
	.string	"lowpart_mode"
.LASF456:
	.string	"ENUMERAL_TYPE"
.LASF210:
	.string	"UNKNOWN"
.LASF1619:
	.string	"OTI_cmov"
.LASF196:
	.string	"CCFPUmode"
.LASF489:
	.string	"ARRAY_REF"
.LASF1355:
	.string	"CODE_FOR_fix_truncxfsi2"
.LASF1072:
	.string	"CODE_FOR_subdi3_carry_rex64"
.LASF614:
	.string	"BUILT_IN_CIMAG"
.LASF1549:
	.string	"CODE_FOR_minsf3"
.LASF2148:
	.string	"direct_store"
.LASF922:
	.string	"TI_DOUBLE_TYPE"
.LASF1229:
	.string	"CODE_FOR_addv8qi3"
.LASF1990:
	.string	"get_inner_reference"
.LASF17:
	.string	"int_cst"
.LASF1144:
	.string	"CODE_FOR_strsethi_1"
.LASF1915:
	.string	"target"
.LASF561:
	.string	"NOP_EXPR"
.LASF760:
	.string	"no_force_blk_flag"
.LASF1780:
	.string	"to_addr"
.LASF421:
	.string	"NOTE_INSN_MAX"
.LASF2044:
	.string	"set_type"
.LASF1301:
	.string	"CODE_FOR_pfnacc"
.LASF935:
	.string	"TI_UV2SI_TYPE"
.LASF438:
	.string	"LCT_PURE"
.LASF961:
	.string	"itk_none"
.LASF1354:
	.string	"CODE_FOR_fix_truncsfdi2"
.LASF1328:
	.string	"CODE_FOR_movqi"
.LASF1825:
	.string	"convert_modes"
.LASF1648:
	.string	"LTI_eh_personality"
.LASF494:
	.string	"MODIFY_EXPR"
.LASF467:
	.string	"UNION_TYPE"
.LASF693:
	.string	"BUILT_IN_VA_COPY"
.LASF595:
	.string	"NOT_BUILT_IN"
.LASF917:
	.string	"TI_COMPLEX_INTEGER_TYPE"
.LASF1791:
	.string	"insn"
.LASF491:
	.string	"VTABLE_REF"
.LASF1923:
	.string	"to_rtx"
.LASF758:
	.string	"precision"
.LASF1980:
	.string	"endb"
.LASF1983:
	.string	"endbit_rtx"
.LASF1750:
	.string	"copy_res_decl_for_inlining"
.LASF807:
	.string	"x_tail_recursion_reentry"
.LASF411:
	.string	"NOTE_INSN_DELETED_LABEL"
.LASF2134:
	.string	"bitnum"
.LASF1799:
	.string	"modify"
.LASF1783:
	.string	"from"
.LASF1456:
	.string	"CODE_FOR_rotlsi3"
.LASF704:
	.string	"asm_written_flag"
.LASF2034:
	.string	"vars_need_expansion"
.LASF1735:
	.string	"output"
.LASF523:
	.string	"NEGATE_EXPR"
.LASF516:
	.string	"RDIV_EXPR"
.LASF1351:
	.string	"CODE_FOR_fix_truncxfdi2"
.LASF642:
	.string	"BUILT_IN_SINF"
.LASF645:
	.string	"BUILT_IN_SINL"
.LASF1878:
	.string	"y_cst"
.LASF1622:
	.string	"OTI_MAX"
.LASF1842:
	.string	"fntype"
.LASF585:
	.string	"RETURN_EXPR"
.LASF827:
	.string	"inl_max_label_num"
.LASF873:
	.string	"static_dtor_flag"
.LASF1243:
	.string	"CODE_FOR_mulv4hi3"
.LASF1332:
	.string	"CODE_FOR_movsf"
.LASF1325:
	.string	"CODE_FOR_movsi"
.LASF742:
	.string	"operands"
.LASF1213:
	.string	"CODE_FOR_vmmaskcmpv4sf3"
.LASF1727:
	.string	"insn_operand_predicate_fn"
.LASF1451:
	.string	"CODE_FOR_lshrdi3"
.LASF1122:
	.string	"CODE_FOR_sinxf2"
.LASF1224:
	.string	"CODE_FOR_cvtps2pi"
.LASF1015:
	.string	"upward"
.LASF177:
	.string	"V8QImode"
.LASF1029:
	.string	"CODE_FOR_x86_sahf_1"
.LASF2115:
	.string	"arglist"
.LASF254:
	.string	"ADDR_DIFF_VEC"
.LASF1115:
	.string	"CODE_FOR_sqrtdf2_1"
.LASF2162:
	.string	"const_int_rtx"
.LASF1654:
	.string	"LTI_nehf2"
.LASF270:
	.string	"CONCAT"
.LASF351:
	.string	"tree_node"
.LASF665:
	.string	"BUILT_IN_FPUTC"
.LASF825:
	.string	"original_decl_initial"
.LASF1922:
	.string	"suggest_reg"
.LASF29:
	.string	"shift_const"
.LASF1335:
	.string	"CODE_FOR_movtf"
.LASF1239:
	.string	"CODE_FOR_sssubv8qi3"
.LASF1558:
	.string	"CODE_FOR_movti"
.LASF951:
	.string	"itk_signed_char"
.LASF666:
	.string	"BUILT_IN_FPUTS"
.LASF314:
	.string	"SQRT"
.LASF654:
	.string	"BUILT_IN_AGGREGATE_INCOMING_ADDRESS"
.LASF2125:
	.string	"do_compare_rtx_and_jump"
.LASF2099:
	.string	"jumpif"
.LASF2005:
	.string	"force_operand"
.LASF166:
	.string	"CDImode"
.LASF2114:
	.string	"fndecl"
.LASF1423:
	.string	"CODE_FOR_xorqi_cc_ext_1"
.LASF2042:
	.string	"vtbl_ref"
.LASF874:
	.string	"artificial_flag"
.LASF9:
	.string	"frame_related"
.LASF1147:
	.string	"CODE_FOR_strsetqi_rex_1"
.LASF949:
	.string	"integer_type_kind"
.LASF1066:
	.string	"CODE_FOR_floatsitf2"
.LASF921:
	.string	"TI_FLOAT_TYPE"
.LASF1020:
	.string	"OPTAB_WIDEN"
.LASF600:
	.string	"BUILT_IN_ALLOCA"
.LASF283:
	.string	"ASHIFT"
.LASF475:
	.string	"STRING_CST"
.LASF1377:
	.string	"CODE_FOR_subhi3"
.LASF978:
	.string	"last"
.LASF1643:
	.string	"LTI_memcmp"
.LASF95:
	.string	"short int"
.LASF1048:
	.string	"CODE_FOR_truncdfsf2_sse_only"
.LASF1860:
	.string	"bitsize"
.LASF373:
	.string	"REG_RETVAL"
.LASF267:
	.string	"SCRATCH"
.LASF1010:
	.string	"EXPAND_CONST_ADDRESS"
.LASF2076:
	.string	"finally_label"
.LASF2141:
	.string	"default_label"
.LASF1119:
	.string	"CODE_FOR_sqrttf2"
.LASF310:
	.string	"FLOAT_TRUNCATE"
.LASF1941:
	.string	"elts"
.LASF1411:
	.string	"CODE_FOR_anddi3"
.LASF1225:
	.string	"CODE_FOR_cvttps2pi"
.LASF2098:
	.string	"jumpifnot"
.LASF1324:
	.string	"CODE_FOR_cmpsf"
.LASF1160:
	.string	"CODE_FOR_x86_movsicc_0_m1"
.LASF878:
	.string	"comdat_flag"
.LASF2126:
	.string	"dummy_true_label"
.LASF1839:
	.string	"arg_list"
.LASF1568:
	.string	"CODE_FOR_nothing"
.LASF2016:
	.string	"factor"
.LASF203:
	.string	"MODE_CC"
.LASF1756:
	.string	"dump_tree"
.LASF402:
	.string	"NOTE_INSN_BLOCK_END"
.LASF1539:
	.string	"CODE_FOR_cmpintqi"
.LASF590:
	.string	"EXPR_WITH_FILE_LOCATION"
.LASF1380:
	.string	"CODE_FOR_subtf3"
.LASF1246:
	.string	"CODE_FOR_mmx_pmaddwd"
.LASF1903:
	.string	"dest_addr"
.LASF599:
	.string	"built_in_function"
.LASF885:
	.string	"arguments"
.LASF2105:
	.string	"unordered_bcc"
.LASF1271:
	.string	"CODE_FOR_lshrv2si3"
.LASF1725:
	.string	"LTI_profile_function_exit"
.LASF2031:
	.string	"saved_input_filename"
.LASF113:
	.string	"_markers"
.LASF353:
	.string	"rtwint"
.LASF816:
	.string	"x_parm_reg_stack_loc"
.LASF1712:
	.string	"LTI_fixunssfsi"
.LASF1277:
	.string	"CODE_FOR_mmx_packssdw"
.LASF115:
	.string	"_fileno"
.LASF2001:
	.string	"array"
.LASF2079:
	.string	"cleanup"
.LASF435:
	.string	"libcall_type"
.LASF1904:
	.string	"rounded_size"
.LASF1779:
	.string	"move_by_pieces"
.LASF1334:
	.string	"CODE_FOR_movxf"
.LASF22:
	.string	"identifier"
.LASF1120:
	.string	"CODE_FOR_sindf2"
.LASF1448:
	.string	"CODE_FOR_ashrsi3"
.LASF1237:
	.string	"CODE_FOR_subv4hi3"
.LASF2035:
	.string	"constructor"
.LASF1936:
	.string	"copy_size"
.LASF172:
	.string	"V2DImode"
.LASF936:
	.string	"TI_UV2SF_TYPE"
.LASF1714:
	.string	"LTI_fixunssfti"
.LASF810:
	.string	"x_frame_offset"
.LASF1194:
	.string	"CODE_FOR_subv4sf3"
.LASF737:
	.string	"purpose"
.LASF1426:
	.string	"CODE_FOR_neghi2"
.LASF2165:
	.string	"global_rtl"
.LASF1106:
	.string	"CODE_FOR_prologue_get_pc"
.LASF674:
	.string	"BUILT_IN_FWRITE_UNLOCKED"
.LASF1250:
	.string	"CODE_FOR_mmx_anddi3"
.LASF1709:
	.string	"LTI_fixtfsi"
.LASF1814:
	.string	"insns"
.LASF1476:
	.string	"CODE_FOR_sunordered"
.LASF1881:
	.string	"submode"
.LASF509:
	.string	"CEIL_DIV_EXPR"
.LASF1526:
	.string	"CODE_FOR_strmovhi_rex64"
.LASF1428:
	.string	"CODE_FOR_negsf2"
.LASF718:
	.string	"lang_flag_4"
.LASF740:
	.string	"tree_exp"
.LASF924:
	.string	"TI_VOID_TYPE"
.LASF2009:
	.string	"exp_rtl"
.LASF745:
	.string	"abstract_flag"
.LASF1786:
	.string	"explicit_inc_from"
.LASF1667:
	.string	"LTI_eqdf2"
.LASF1541:
	.string	"CODE_FOR_strlendi"
.LASF2037:
	.string	"imode"
.LASF2023:
	.string	"this_optab"
.LASF1036:
	.string	"CODE_FOR_zero_extendhisi2_and"
.LASF1685:
	.string	"LTI_lttf2"
.LASF319:
	.string	"RANGE_INFO"
.LASF89:
	.string	"long int"
.LASF284:
	.string	"ROTATE"
.LASF664:
	.string	"BUILT_IN_PRINTF"
.LASF2166:
	.string	"pic_offset_table_rtx"
.LASF1610:
	.string	"OTI_ffs"
.LASF1396:
	.string	"CODE_FOR_smulsi3_highpart"
.LASF1113:
	.string	"CODE_FOR_sqrtsf2_1_sse_only"
.LASF850:
	.string	"varargs"
.LASF1633:
	.string	"LTI_extenddftf2"
.LASF920:
	.string	"TI_COMPLEX_LONG_DOUBLE_TYPE"
.LASF611:
	.string	"BUILT_IN_CREAL"
.LASF244:
	.string	"BARRIER"
.LASF1849:
	.string	"start"
.LASF1587:
	.string	"OTI_udivmod"
.LASF1450:
	.string	"CODE_FOR_ashrqi3"
.LASF83:
	.string	"sse_words"
.LASF1043:
	.string	"CODE_FOR_extendqidi2"
.LASF2002:
	.string	"low_bound"
.LASF706:
	.string	"used_flag"
.LASF2199:
	.string	"libfunc_table"
.LASF510:
	.string	"FLOOR_DIV_EXPR"
.LASF1401:
	.string	"CODE_FOR_divxf3"
.LASF1972:
	.string	"bit_buffer"
.LASF1768:
	.string	"safe_from_p"
.LASF399:
	.string	"NOTE_INSN_BIAS"
.LASF1555:
	.string	"CODE_FOR_allocate_stack"
.LASF689:
	.string	"BUILT_IN_EH_RETURN_DATA_REGNO"
.LASF33:
	.string	"movsx"
.LASF195:
	.string	"CCFPmode"
.LASF269:
	.string	"STRICT_LOW_PART"
.LASF163:
	.string	"CQImode"
.LASF1018:
	.string	"OPTAB_DIRECT"
.LASF1962:
	.string	"loop_top"
.LASF1009:
	.string	"EXPAND_SUM"
.LASF433:
	.string	"GR_VIRTUAL_CFA"
.LASF1049:
	.string	"CODE_FOR_fix_truncdi_nomemory"
.LASF187:
	.string	"V8DFmode"
.LASF852:
	.string	"x_whole_function_mode_p"
.LASF870:
	.string	"defer_output"
.LASF1939:
	.string	"is_zeros_p"
.LASF1191:
	.string	"CODE_FOR_sse_shufps"
.LASF144:
	.string	"TImode"
.LASF1524:
	.string	"CODE_FOR_strmovsi_rex64"
.LASF583:
	.string	"LABEL_EXPR"
.LASF641:
	.string	"BUILT_IN_SQRTF"
.LASF1138:
	.string	"CODE_FOR_rep_movsi_rex64"
.LASF644:
	.string	"BUILT_IN_SQRTL"
.LASF1296:
	.string	"CODE_FOR_mulv2sf3"
.LASF2025:
	.string	"ignore"
.LASF382:
	.string	"REG_DEP_OUTPUT"
.LASF1982:
	.string	"startbit_rtx"
.LASF1027:
	.string	"CODE_FOR_cmpqi_ext_3_insn_rex64"
.LASF105:
	.string	"_IO_write_base"
.LASF143:
	.string	"DImode"
.LASF1902:
	.string	"emit_single_push_insn"
.LASF1715:
	.string	"LTI_fixunsdfsi"
.LASF551:
	.string	"UNLT_EXPR"
.LASF1924:
	.string	"mode1"
.LASF66:
	.string	"FP_TOP_REG"
.LASF1459:
	.string	"CODE_FOR_rotrdi3"
.LASF325:
	.string	"VEC_MERGE"
.LASF324:
	.string	"CALL_PLACEHOLDER"
.LASF2154:
	.string	"mode_bitsize"
.LASF937:
	.string	"TI_UV16QI_TYPE"
.LASF43:
	.string	"mmx_move"
.LASF2146:
	.string	"placeholder_list"
.LASF1014:
	.string	"none"
.LASF52:
	.string	"sizetype"
.LASF1161:
	.string	"CODE_FOR_pro_epilogue_adjust_stack_rex64"
.LASF662:
	.string	"BUILT_IN_PUTCHAR"
.LASF790:
	.string	"arg_offset_rtx"
.LASF28:
	.string	"shift_var"
.LASF948:
	.string	"TI_MAX"
.LASF1844:
	.string	"move_block_from_reg"
.LASF1870:
	.string	"move_by_pieces_1"
.LASF184:
	.string	"V4SFmode"
.LASF1273:
	.string	"CODE_FOR_ashlv4hi3"
.LASF1907:
	.string	"args_addr"
.LASF224:
	.string	"DEFINE_SPLIT"
.LASF248:
	.string	"PARALLEL"
.LASF1186:
	.string	"CODE_FOR_sse_movhps"
.LASF2113:
	.string	"cmp1"
.LASF965:
	.string	"SSIZETYPE"
.LASF68:
	.string	"FLOAT_REGS"
.LASF396:
	.string	"REG_ALWAYS_RETURN"
.LASF1689:
	.string	"LTI_floatdisf"
.LASF287:
	.string	"ROTATERT"
.LASF1944:
	.string	"cleared"
.LASF253:
	.string	"ADDR_VEC"
.LASF0:
	.string	"code"
.LASF2041:
	.string	"before"
.LASF1197:
	.string	"CODE_FOR_vmmulv4sf3"
.LASF483:
	.string	"FIELD_DECL"
.LASF1408:
	.string	"CODE_FOR_testsi_ccno_1"
.LASF445:
	.string	"tree_code"
.LASF543:
	.string	"LT_EXPR"
.LASF371:
	.string	"REG_EQUAL"
.LASF333:
	.string	"SS_TRUNCATE"
.LASF1531:
	.string	"CODE_FOR_strsetdi_rex64"
.LASF169:
	.string	"V2QImode"
.LASF789:
	.string	"outgoing_args_size"
.LASF1675:
	.string	"LTI_nexf2"
.LASF1403:
	.string	"CODE_FOR_divdf3"
.LASF1077:
	.string	"CODE_FOR_divmodhi4"
.LASF2010:
	.string	"nops"
.LASF1971:
	.string	"set_word_size"
.LASF1698:
	.string	"LTI_floatditf"
.LASF12:
	.string	"rtvec_def"
.LASF672:
	.string	"BUILT_IN_FPUTC_UNLOCKED"
.LASF1974:
	.string	"bit_pos"
.LASF1811:
	.string	"libcall"
.LASF919:
	.string	"TI_COMPLEX_DOUBLE_TYPE"
.LASF1376:
	.string	"CODE_FOR_subsi3"
.LASF2180:
	.string	"optimize_size"
.LASF776:
	.string	"context"
.LASF819:
	.string	"x_var_temp_slot_level"
.LASF400:
	.string	"NOTE_INSN_DELETED"
.LASF1951:
	.string	"minelt"
.LASF1898:
	.string	"ypart"
.LASF2055:
	.string	"inner_type"
.LASF1028:
	.string	"CODE_FOR_x86_fnstsw_1"
.LASF1153:
	.string	"CODE_FOR_cmpstrqi_nz_1"
.LASF338:
	.string	"min_after_vec"
.LASF118:
	.string	"_cur_column"
.LASF291:
	.string	"UMAX"
.LASF915:
	.string	"TI_BITSIZE_ONE"
.LASF848:
	.string	"profile"
.LASF1026:
	.string	"CODE_FOR_cmpqi_ext_3_insn"
.LASF857:
	.string	"arg_pointer_save_area_init"
.LASF1265:
	.string	"CODE_FOR_smaxv4hi3"
.LASF1157:
	.string	"CODE_FOR_strlenqi_1"
.LASF734:
	.string	"ht_identifier"
.LASF847:
	.string	"instrument_entry_exit"
.LASF1771:
	.string	"print_statistics"
.LASF1263:
	.string	"CODE_FOR_gtv2si3"
.LASF1017:
	.string	"optab_methods"
.LASF2072:
	.string	"imag_t"
.LASF1219:
	.string	"CODE_FOR_smaxv4sf3"
.LASF1496:
	.string	"CODE_FOR_buneq"
.LASF1743:
	.string	"lang_hooks_for_tree_inlining"
.LASF214:
	.string	"MATCH_OPERAND"
.LASF1216:
	.string	"CODE_FOR_sse_ucomi"
.LASF1992:
	.string	"pbitpos"
.LASF311:
	.string	"FLOAT"
.LASF826:
	.string	"inl_last_parm_insn"
.LASF394:
	.string	"REG_NON_LOCAL_GOTO"
.LASF11:
	.string	"rtx_def"
.LASF174:
	.string	"V4HImode"
.LASF1552:
	.string	"CODE_FOR_maxdf3"
.LASF1963:
	.string	"loop_end"
.LASF34:
	.string	"movzx"
.LASF833:
	.string	"epilogue_delay_list"
.LASF1454:
	.string	"CODE_FOR_lshrqi3"
.LASF397:
	.string	"REG_VTABLE_REF"
.LASF619:
	.string	"BUILT_IN_FFS"
.LASF1022:
	.string	"OPTAB_MUST_WIDEN"
.LASF1449:
	.string	"CODE_FOR_ashrhi3"
.LASF1244:
	.string	"CODE_FOR_smulv4hi3_highpart"
.LASF1994:
	.string	"pmode"
.LASF1073:
	.string	"CODE_FOR_subsi3_carry"
.LASF1406:
	.string	"CODE_FOR_divmodsi4"
.LASF1521:
	.string	"CODE_FOR_movstrdi"
.LASF907:
	.string	"TI_UINTTI_TYPE"
.LASF347:
	.string	"offset"
.LASF1716:
	.string	"LTI_fixunsdfdi"
.LASF410:
	.string	"NOTE_INSN_EPILOGUE_BEG"
.LASF950:
	.string	"itk_char"
.LASF337:
	.string	"base_after_vec"
.LASF2003:
	.string	"unit_size"
.LASF278:
	.string	"PLUS"
.LASF995:
	.string	"x_stack_pointer_delta"
.LASF1352:
	.string	"CODE_FOR_fix_trunctfdi2"
.LASF1498:
	.string	"CODE_FOR_bungt"
.LASF1604:
	.string	"OTI_movstrict"
.LASF1695:
	.string	"LTI_floatdixf"
.LASF140:
	.string	"QImode"
.LASF752:
	.string	"fragment_chain"
.LASF1220:
	.string	"CODE_FOR_vmsmaxv4sf3"
.LASF1851:
	.string	"bytelen"
.LASF697:
	.string	"chain"
.LASF692:
	.string	"BUILT_IN_VA_END"
.LASF918:
	.string	"TI_COMPLEX_FLOAT_TYPE"
.LASF1232:
	.string	"CODE_FOR_ssaddv8qi3"
.LASF1098:
	.string	"CODE_FOR_jump"
.LASF1527:
	.string	"CODE_FOR_strmovqi"
.LASF219:
	.string	"MATCH_OP_DUP"
.LASF591:
	.string	"SWITCH_EXPR"
.LASF959:
	.string	"itk_long_long"
.LASF97:
	.string	"__off64_t"
.LASF2071:
	.string	"partmode"
.LASF443:
	.string	"LCT_ALWAYS_RETURN"
.LASF998:
	.string	"x_forced_labels"
.LASF686:
	.string	"BUILT_IN_FROB_RETURN_ADDR"
.LASF1083:
	.string	"CODE_FOR_negsf2_ifs"
.LASF1414:
	.string	"CODE_FOR_andqi3"
.LASF147:
	.string	"PHImode"
.LASF1342:
	.string	"CODE_FOR_extendsfxf2"
.LASF162:
	.string	"TCmode"
.LASF94:
	.string	"signed char"
.LASF823:
	.string	"no_debugging_symbols"
.LASF1926:
	.string	"volatilep"
.LASF883:
	.string	"uninlinable"
.LASF1494:
	.string	"CODE_FOR_bunordered"
.LASF453:
	.string	"REAL_TYPE"
.LASF73:
	.string	"FLOAT_SSE_REGS"
.LASF1432:
	.string	"CODE_FOR_abssf2"
.LASF1730:
	.string	"predicate"
.LASF160:
	.string	"DCmode"
.LASF1019:
	.string	"OPTAB_LIB"
.LASF152:
	.string	"TQFmode"
.LASF208:
	.string	"MAX_MODE_CLASS"
.LASF1364:
	.string	"CODE_FOR_floatdisf2"
.LASF1093:
	.string	"CODE_FOR_ashrdi3_1"
.LASF85:
	.string	"sse_regno"
.LASF744:
	.string	"handler_block_flag"
.LASF661:
	.string	"BUILT_IN_PREFETCH"
.LASF711:
	.string	"protected_flag"
.LASF894:
	.string	"pointer_alias_set"
.LASF1571:
	.string	"handlers"
.LASF4:
	.string	"unchanging"
.LASF564:
	.string	"SAVE_EXPR"
.LASF342:
	.string	"offset_unsigned"
.LASF1390:
	.string	"CODE_FOR_umulsidi3"
.LASF2068:
	.string	"boptab"
.LASF904:
	.string	"TI_UINTHI_TYPE"
.LASF1550:
	.string	"CODE_FOR_mindf3"
.LASF842:
	.string	"has_nonlocal_label"
.LASF1932:
	.string	"dont_store_target"
.LASF1285:
	.string	"CODE_FOR_emms"
.LASF1832:
	.string	"enqueue_insn"
.LASF696:
	.string	"tree_common"
.LASF492:
	.string	"CONSTRUCTOR"
.LASF916:
	.string	"TI_BITSIZE_UNIT"
.LASF1623:
	.string	"rtxfun"
.LASF370:
	.string	"REG_EQUIV"
.LASF1230:
	.string	"CODE_FOR_addv4hi3"
.LASF603:
	.string	"BUILT_IN_FABS"
.LASF1829:
	.string	"max_size"
.LASF1764:
	.string	"finish"
.LASF2028:
	.string	"both_summands"
.LASF1466:
	.string	"CODE_FOR_seq"
.LASF1959:
	.string	"index_r"
.LASF1469:
	.string	"CODE_FOR_sgtu"
.LASF2103:
	.string	"drop_through_label"
.LASF520:
	.string	"FIX_FLOOR_EXPR"
.LASF398:
	.string	"insn_note"
.LASF1094:
	.string	"CODE_FOR_x86_shrd_1"
.LASF1348:
	.string	"CODE_FOR_trunctfsf2"
.LASF1192:
	.string	"CODE_FOR_addv4sf3"
.LASF1109:
	.string	"CODE_FOR_leave"
.LASF1044:
	.string	"CODE_FOR_extendhisi2"
.LASF2050:
	.string	"setaddr"
.LASF1856:
	.string	"copy_blkmode_from_reg"
.LASF385:
	.string	"REG_NOALIAS"
.LASF1179:
	.string	"CODE_FOR_mmx_pmovmskb"
.LASF1276:
	.string	"CODE_FOR_mmx_packsswb"
.LASF1205:
	.string	"CODE_FOR_vmsqrtv4sf2"
.LASF1069:
	.string	"CODE_FOR_addqi3_cc"
.LASF32:
	.string	"divide"
.LASF428:
	.string	"GR_ARG_POINTER"
.LASF1540:
	.string	"CODE_FOR_strlensi"
.LASF1499:
	.string	"CODE_FOR_bunle"
.LASF2027:
	.string	"binop2"
.LASF1662:
	.string	"LTI_gtsf2"
.LASF1806:
	.string	"convert_move"
.LASF463:
	.string	"FILE_TYPE"
.LASF1500:
	.string	"CODE_FOR_bunlt"
.LASF212:
	.string	"EXPR_LIST"
.LASF2083:
	.string	"string_constant"
.LASF290:
	.string	"UMIN"
.LASF1919:
	.string	"get_subtarget"
.LASF1400:
	.string	"CODE_FOR_mulsf3"
.LASF1778:
	.string	"tree_dump"
.LASF2119:
	.string	"op0_word"
.LASF648:
	.string	"BUILT_IN_CLASSIFY_TYPE"
.LASF42:
	.string	"fp_store"
.LASF1945:
	.string	"store_constructor"
.LASF1788:
	.string	"store_by_pieces"
.LASF241:
	.string	"INSN"
.LASF587:
	.string	"LOOP_EXPR"
.LASF2150:
	.string	"target_flags"
.LASF1472:
	.string	"CODE_FOR_sge"
.LASF1038:
	.string	"CODE_FOR_zero_extendsidi2_rex64"
.LASF1547:
	.string	"CODE_FOR_movxfcc"
.LASF1468:
	.string	"CODE_FOR_sgt"
.LASF2156:
	.string	"mode_wider_mode"
.LASF511:
	.string	"ROUND_DIV_EXPR"
.LASF1337:
	.string	"CODE_FOR_zero_extendqihi2"
.LASF882:
	.string	"non_addressable"
.LASF2151:
	.string	"ix86_branch_cost"
.LASF1341:
	.string	"CODE_FOR_extendsfdf2"
.LASF235:
	.string	"DEFINE_ATTR"
.LASF747:
	.string	"vars"
.LASF1139:
	.string	"CODE_FOR_rep_movqi"
.LASF1214:
	.string	"CODE_FOR_vmmaskncmpv4sf3"
.LASF37:
	.string	"movzbl_load"
.LASF134:
	.string	"long long unsigned int"
.LASF1711:
	.string	"LTI_fixtfti"
.LASF1184:
	.string	"CODE_FOR_sse_movhlps"
.LASF1453:
	.string	"CODE_FOR_lshrhi3"
.LASF44:
	.string	"mmx_load"
.LASF1431:
	.string	"CODE_FOR_negtf2"
.LASF501:
	.string	"WITH_CLEANUP_EXPR"
.LASF266:
	.string	"VALUE"
.LASF340:
	.string	"min_after_base"
.LASF702:
	.string	"readonly_flag"
.LASF973:
	.string	"promoted_mode"
.LASF1813:
	.string	"__FUNCTION__"
.LASF204:
	.string	"MODE_COMPLEX_INT"
.LASF297:
	.string	"POST_MODIFY"
.LASF1240:
	.string	"CODE_FOR_sssubv4hi3"
.LASF649:
	.string	"BUILT_IN_NEXT_ARG"
.LASF327:
	.string	"VEC_CONCAT"
.LASF1148:
	.string	"CODE_FOR_rep_stosdi_rex64"
.LASF1935:
	.string	"inner_target"
.LASF136:
	.string	"reg_class"
.LASF1913:
	.string	"where_pad"
.LASF2100:
	.string	"do_jump"
.LASF1535:
	.string	"CODE_FOR_strsethi_rex64"
.LASF1462:
	.string	"CODE_FOR_rotrqi3"
.LASF1137:
	.string	"CODE_FOR_rep_movsi"
.LASF1065:
	.string	"CODE_FOR_floatsixf2"
.LASF974:
	.string	"unsignedp"
.LASF732:
	.string	"tree_vector"
.LASF746:
	.string	"block_num"
.LASF2085:
	.string	"arg0"
.LASF1031:
	.string	"CODE_FOR_movsi_insv_1"
.LASF2086:
	.string	"arg1"
.LASF1812:
	.string	"equiv_code"
.LASF2187:
	.string	"flag_no_inline"
.LASF739:
	.string	"tree_vec"
.LASF594:
	.string	"built_in_class"
.LASF312:
	.string	"UNSIGNED_FLOAT"
.LASF1590:
	.string	"OTI_ftrunc"
.LASF1092:
	.string	"CODE_FOR_ashrdi3_63_rex64"
.LASF157:
	.string	"QCmode"
.LASF179:
	.string	"V8SImode"
.LASF1789:
	.string	"constfun"
.LASF630:
	.string	"BUILT_IN_STRNCMP"
.LASF1338:
	.string	"CODE_FOR_zero_extendqisi2"
.LASF251:
	.string	"UNSPEC"
.LASF430:
	.string	"GR_VIRTUAL_STACK_ARGS"
.LASF1081:
	.string	"CODE_FOR_andqi_ext_0"
.LASF521:
	.string	"FIX_ROUND_EXPR"
.LASF416:
	.string	"NOTE_INSN_RANGE_BEG"
.LASF1177:
	.string	"CODE_FOR_sse_movups"
.LASF905:
	.string	"TI_UINTSI_TYPE"
.LASF1993:
	.string	"poffset"
.LASF295:
	.string	"POST_INC"
.LASF1981:
	.string	"bitlength_rtx"
.LASF1533:
	.string	"CODE_FOR_strsetsi_rex64"
.LASF275:
	.string	"IF_THEN_ELSE"
.LASF53:
	.string	"NO_REGS"
.LASF457:
	.string	"BOOLEAN_TYPE"
.LASF606:
	.string	"BUILT_IN_LLABS"
.LASF1110:
	.string	"CODE_FOR_leave_rex64"
.LASF1425:
	.string	"CODE_FOR_negsi2"
.LASF993:
	.string	"x_pending_stack_adjust"
.LASF1379:
	.string	"CODE_FOR_subxf3"
.LASF231:
	.string	"DEFINE_ASM_ATTRIBUTES"
.LASF1474:
	.string	"CODE_FOR_sle"
.LASF282:
	.string	"UMOD"
.LASF7:
	.string	"used"
.LASF1470:
	.string	"CODE_FOR_slt"
.LASF1004:
	.string	"temp_slot"
.LASF1808:
	.string	"from_mode"
.LASF1607:
	.string	"OTI_abs"
.LASF1372:
	.string	"CODE_FOR_addtf3"
.LASF99:
	.string	"FILE"
.LASF57:
	.string	"BREG"
.LASF981:
	.string	"x_reg_rtx_no"
.LASF2101:
	.string	"if_false_label"
.LASF1514:
	.string	"CODE_FOR_epilogue"
.LASF70:
	.string	"MMX_REGS"
.LASF1585:
	.string	"OTI_sdivmod"
.LASF652:
	.string	"BUILT_IN_FRAME_ADDRESS"
.LASF2137:
	.string	"index_type"
.LASF1886:
	.string	"realpart_x"
.LASF589:
	.string	"EXIT_BLOCK_EXPR"
.LASF2196:
	.string	"setcc_gen_code"
.LASF1309:
	.string	"CODE_FOR_pfrsqrtv2sf2"
.LASF1581:
	.string	"OTI_smul_widen"
.LASF1787:
	.string	"reverse"
.LASF1774:
	.string	"print_type"
.LASF2091:
	.string	"single_insn"
.LASF1543:
	.string	"CODE_FOR_movsicc"
.LASF1989:
	.string	"blk_object"
.LASF522:
	.string	"FLOAT_EXPR"
.LASF440:
	.string	"LCT_PURE_MAKE_BLOCK"
.LASF98:
	.string	"char"
.LASF678:
	.string	"BUILT_IN_ISLESS"
.LASF1011:
	.string	"EXPAND_INITIALIZER"
.LASF1736:
	.string	"genfun"
.LASF1894:
	.string	"sreg"
.LASF1467:
	.string	"CODE_FOR_sne"
.LASF1573:
	.string	"OTI_add"
.LASF567:
	.string	"ADDR_EXPR"
.LASF1202:
	.string	"CODE_FOR_rsqrtv4sf2"
.LASF1306:
	.string	"CODE_FOR_pfrcpv2sf2"
.LASF1653:
	.string	"LTI_eqhf2"
.LASF1412:
	.string	"CODE_FOR_andsi3"
.LASF1365:
	.string	"CODE_FOR_floatsidf2"
.LASF1987:
	.string	"value_mode"
.LASF1678:
	.string	"LTI_ltxf2"
.LASF1575:
	.string	"OTI_sub"
.LASF281:
	.string	"UDIV"
.LASF568:
	.string	"REFERENCE_EXPR"
.LASF1906:
	.string	"partial"
.LASF2018:
	.string	"plist"
.LASF1181:
	.string	"CODE_FOR_mmx_maskmovq_rex"
.LASF671:
	.string	"BUILT_IN_PRINTF_UNLOCKED"
.LASF26:
	.string	"block"
.LASF1726:
	.string	"LTI_MAX"
.LASF1632:
	.string	"LTI_extenddfxf2"
.LASF341:
	.string	"max_after_base"
.LASF548:
	.string	"NE_EXPR"
.LASF1463:
	.string	"CODE_FOR_extv"
.LASF821:
	.string	"fixup_var_refs_queue"
.LASF1075:
	.string	"CODE_FOR_divqi3"
.LASF1835:
	.string	"from1"
.LASF1436:
	.string	"CODE_FOR_one_cmpldi2"
.LASF1045:
	.string	"CODE_FOR_extendqihi2"
.LASF164:
	.string	"CHImode"
.LASF2129:
	.string	"unsigned_code"
.LASF485:
	.string	"COMPONENT_REF"
.LASF452:
	.string	"INTEGER_TYPE"
.LASF855:
	.string	"uses_pic_offset_table"
.LASF616:
	.string	"BUILT_IN_CIMAGL"
.LASF439:
	.string	"LCT_CONST_MAKE_BLOCK"
.LASF1754:
	.string	"convert_parm_for_inlining"
.LASF1176:
	.string	"CODE_FOR_sse_movaps"
.LASF578:
	.string	"POSTINCREMENT_EXPR"
.LASF354:
	.string	"rtint"
.LASF1201:
	.string	"CODE_FOR_vmrcpv4sf2"
.LASF503:
	.string	"PLACEHOLDER_EXPR"
.LASF2084:
	.string	"ptr_offset"
.LASF1121:
	.string	"CODE_FOR_sinsf2"
.LASF182:
	.string	"V2SFmode"
.LASF2159:
	.string	"word_mode"
.LASF1117:
	.string	"CODE_FOR_sqrtdf2_i387"
.LASF1761:
	.string	"decode_option"
.LASF910:
	.string	"TI_INTEGER_MINUS_ONE"
.LASF1381:
	.string	"CODE_FOR_subdf3"
.LASF1302:
	.string	"CODE_FOR_pfpnacc"
.LASF366:
	.string	"rtunion"
.LASF1950:
	.string	"const_bounds_p"
.LASF571:
	.string	"COMPLEX_EXPR"
.LASF1617:
	.string	"OTI_strlen"
.LASF363:
	.string	"cselib_val_struct"
.LASF77:
	.string	"ALL_REGS"
.LASF2007:
	.string	"subtarget"
.LASF1833:
	.string	"move_by_pieces_ninsns"
.LASF67:
	.string	"FP_SECOND_REG"
.LASF1272:
	.string	"CODE_FOR_mmx_lshrdi3"
.LASF1660:
	.string	"LTI_eqsf2"
.LASF1461:
	.string	"CODE_FOR_rotrhi3"
.LASF1686:
	.string	"LTI_letf2"
.LASF1828:
	.string	"data"
.LASF431:
	.string	"GR_VIRTUAL_STACK_DYNAMIC"
.LASF925:
	.string	"TI_PTR_TYPE"
.LASF1495:
	.string	"CODE_FOR_bordered"
.LASF639:
	.string	"BUILT_IN_SIN"
.LASF339:
	.string	"max_after_vec"
.LASF1848:
	.string	"tmps"
.LASF1772:
	.string	"print_xnode"
.LASF2078:
	.string	"return_link"
.LASF1056:
	.string	"CODE_FOR_fix_truncdfsi_sse"
.LASF2109:
	.string	"do_rev"
.LASF1884:
	.string	"offset1"
.LASF1885:
	.string	"offset2"
.LASF1504:
	.string	"CODE_FOR_doloop_end"
.LASF1674:
	.string	"LTI_eqxf2"
.LASF114:
	.string	"_chain"
.LASF563:
	.string	"VIEW_CONVERT_EXPR"
.LASF1046:
	.string	"CODE_FOR_extendqisi2"
.LASF1172:
	.string	"CODE_FOR_movv4hi_internal"
.LASF2139:
	.string	"range"
.LASF1899:
	.string	"push_block"
.LASF80:
	.string	"words"
.LASF621:
	.string	"BUILT_IN_RINDEX"
.LASF820:
	.string	"x_target_temp_slot_level"
.LASF1:
	.string	"mode"
.LASF1090:
	.string	"CODE_FOR_ashldi3_1"
.LASF1767:
	.string	"expand_constant"
.LASF1187:
	.string	"CODE_FOR_sse_movlps"
.LASF767:
	.string	"pointer_to"
.LASF1671:
	.string	"LTI_ltdf2"
.LASF1733:
	.string	"eliminable"
.LASF2015:
	.string	"type_align"
.LASF1948:
	.string	"domain"
.LASF364:
	.string	"bitmap_head_def"
.LASF1375:
	.string	"CODE_FOR_subdi3"
.LASF896:
	.string	"tree_index"
.LASF40:
	.string	"fp_move"
.LASF1129:
	.string	"CODE_FOR_strmovdi_rex_1"
.LASF232:
	.string	"DEFINE_COND_EXEC"
.LASF731:
	.string	"imag"
.LASF2160:
	.string	"ptr_mode"
.LASF46:
	.string	"sse_move"
.LASF2000:
	.string	"this_offset"
.LASF1637:
	.string	"LTI_truncxfdf2"
.LASF1254:
	.string	"CODE_FOR_mmx_psadbw"
.LASF1916:
	.string	"not_stack"
.LASF2026:
	.string	"plus_expr"
.LASF170:
	.string	"V2HImode"
.LASF426:
	.string	"GR_FRAME_POINTER"
.LASF982:
	.string	"x_first_label_num"
.LASF1737:
	.string	"operand"
.LASF261:
	.string	"CONST_INT"
.LASF573:
	.string	"REALPART_EXPR"
.LASF153:
	.string	"SFmode"
.LASF240:
	.string	"ATTR_FLAG"
.LASF1997:
	.string	"size_tree"
.LASF1921:
	.string	"want_value"
.LASF380:
	.string	"REG_LABEL"
.LASF1497:
	.string	"CODE_FOR_bunge"
.LASF1460:
	.string	"CODE_FOR_rotrsi3"
.LASF18:
	.string	"real_cst"
.LASF1226:
	.string	"CODE_FOR_cvtsi2ss"
.LASF1339:
	.string	"CODE_FOR_zero_extendsidi2"
.LASF1057:
	.string	"CODE_FOR_fix_trunchi_nomemory"
.LASF1311:
	.string	"CODE_FOR_pmulhrwv4hi3"
.LASF1620:
	.string	"OTI_cstore"
.LASF2191:
	.string	"cfun"
.LASF1911:
	.string	"xinner"
.LASF308:
	.string	"TRUNCATE"
.LASF2011:
	.string	"save_expr_list"
.LASF10:
	.string	"rtvec"
.LASF888:
	.string	"assembler_name"
.LASF637:
	.string	"BUILT_IN_STRRCHR"
.LASF786:
	.string	"pops_args"
.LASF627:
	.string	"BUILT_IN_STRCPY"
.LASF773:
	.string	"next_variant"
.LASF1864:
	.string	"use_reg"
.LASF893:
	.string	"vindex"
.LASF1548:
	.string	"CODE_FOR_movtfcc"
.LASF929:
	.string	"TI_VOID_LIST_NODE"
.LASF1734:
	.string	"insn_data"
.LASF964:
	.string	"SIZETYPE"
.LASF194:
	.string	"CCZmode"
.LASF401:
	.string	"NOTE_INSN_BLOCK_BEG"
.LASF1267:
	.string	"CODE_FOR_sminv4hi3"
.LASF442:
	.string	"LCT_THROW"
.LASF958:
	.string	"itk_unsigned_long"
.LASF100:
	.string	"_IO_FILE"
.LASF804:
	.string	"x_stack_slot_list"
.LASF1003:
	.string	"initial_value_struct"
.LASF1221:
	.string	"CODE_FOR_sminv4sf3"
.LASF1506:
	.string	"CODE_FOR_call"
.LASF1464:
	.string	"CODE_FOR_extzv"
.LASF1810:
	.string	"from_real"
.LASF1952:
	.string	"maxelt"
.LASF2052:
	.string	"rlow"
.LASF2169:
	.string	"cse_not_expected"
.LASF969:
	.string	"UBITSIZETYPE"
.LASF780:
	.string	"off_align"
.LASF1064:
	.string	"CODE_FOR_floathitf2"
.LASF1293:
	.string	"CODE_FOR_eqv2sf3"
.LASF1557:
	.string	"CODE_FOR_conditional_trap"
.LASF815:
	.string	"x_max_parm_reg"
.LASF892:
	.string	"inlined_fns"
.LASF1050:
	.string	"CODE_FOR_fix_truncdi_memory"
.LASF757:
	.string	"attributes"
.LASF1163:
	.string	"CODE_FOR_sse_movsfcc_eq"
.LASF1209:
	.string	"CODE_FOR_sse_xorti3"
.LASF726:
	.string	"tree_string"
.LASF1404:
	.string	"CODE_FOR_divsf3"
.LASF1769:
	.string	"staticp"
.LASF670:
	.string	"BUILT_IN_PUTS_UNLOCKED"
.LASF2122:
	.string	"do_jump_by_parts_equality_rtx"
.LASF1591:
	.string	"OTI_and"
.LASF2087:
	.string	"expand_increment"
.LASF2094:
	.string	"init_expr"
.LASF1794:
	.string	"init_expr_once"
.LASF1507:
	.string	"CODE_FOR_call_exp"
.LASF1888:
	.string	"imagpart_x"
.LASF1889:
	.string	"imagpart_y"
.LASF1975:
	.string	"ibit"
.LASF1360:
	.string	"CODE_FOR_fix_trunctfhi2"
.LASF23:
	.string	"decl"
.LASF861:
	.string	"external_flag"
.LASF141:
	.string	"HImode"
.LASF858:
	.string	"tree_decl"
.LASF576:
	.string	"PREINCREMENT_EXPR"
.LASF1544:
	.string	"CODE_FOR_movhicc"
.LASF1442:
	.string	"CODE_FOR_x86_shift_adj_2"
.LASF1127:
	.string	"CODE_FOR_costf2"
.LASF246:
	.string	"NOTE"
.LASF326:
	.string	"VEC_SELECT"
.LASF59:
	.string	"DIREG"
.LASF1600:
	.string	"OTI_smax"
.LASF771:
	.string	"minval"
.LASF1071:
	.string	"CODE_FOR_addqi_ext_1"
.LASF1798:
	.string	"body"
.LASF1233:
	.string	"CODE_FOR_ssaddv4hi3"
.LASF1222:
	.string	"CODE_FOR_vmsminv4sf3"
.LASF1261:
	.string	"CODE_FOR_gtv8qi3"
.LASF908:
	.string	"TI_INTEGER_ZERO"
.LASF1702:
	.string	"LTI_fixsfti"
.LASF1287:
	.string	"CODE_FOR_stmxcsr"
.LASF727:
	.string	"length"
.LASF791:
	.string	"args_info"
.LASF940:
	.string	"TI_V4SI_TYPE"
.LASF1572:
	.string	"optab_index"
.LASF2066:
	.string	"binary_op"
.LASF677:
	.string	"BUILT_IN_ISGREATEREQUAL"
.LASF1398:
	.string	"CODE_FOR_multf3"
.LASF1895:
	.string	"inner"
.LASF2185:
	.string	"flag_unsafe_math_optimizations"
.LASF851:
	.string	"stdarg"
.LASF307:
	.string	"ZERO_EXTEND"
.LASF218:
	.string	"MATCH_PARALLEL"
.LASF462:
	.string	"METHOD_TYPE"
.LASF1957:
	.string	"hi_index"
.LASF1551:
	.string	"CODE_FOR_maxsf3"
.LASF2065:
	.string	"singleton"
.LASF227:
	.string	"DEFINE_COMBINE"
.LASF699:
	.string	"constant_flag"
.LASF1819:
	.string	"nwords"
.LASF653:
	.string	"BUILT_IN_RETURN_ADDRESS"
.LASF2019:
	.string	"placeholder_expr"
.LASF451:
	.string	"VOID_TYPE"
.LASF1821:
	.string	"subword"
.LASF1859:
	.string	"bytes"
.LASF1785:
	.string	"autinc_from"
.LASF88:
	.string	"unsigned int"
.LASF2197:
	.string	"movstr_optab"
.LASF1300:
	.string	"CODE_FOR_pfacc"
.LASF407:
	.string	"NOTE_INSN_LOOP_END_TOP_COND"
.LASF1759:
	.string	"identifier_size"
.LASF992:
	.string	"expr_status"
.LASF1260:
	.string	"CODE_FOR_eqv2si3"
.LASF1102:
	.string	"CODE_FOR_return_pop_internal"
.LASF1626:
	.string	"ccp_cmov"
.LASF970:
	.string	"TYPE_KIND_LAST"
.LASF593:
	.string	"LAST_AND_UNUSED_TREE_CODE"
.LASF601:
	.string	"BUILT_IN_ABS"
.LASF1896:
	.string	"need_clobber"
.LASF1612:
	.string	"OTI_sin"
.LASF344:
	.string	"addr_diff_vec_flags"
.LASF415:
	.string	"NOTE_INSN_REPEATED_LINE_NUMBER"
	.ident	"GCC: (Ubuntu/Linaro 4.8.1-10ubuntu9) 4.8.1"
	.section	.note.GNU-stack,"",@progbits
