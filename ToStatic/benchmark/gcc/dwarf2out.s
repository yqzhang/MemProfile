	.file	"dwarf2out.c"
# GNU C (Ubuntu/Linaro 4.8.1-10ubuntu9) version 4.8.1 (x86_64-linux-gnu)
#	compiled by GNU C version 4.8.1, GMP version 5.1.2, MPFR version 3.1.1-p2, MPC version 1.0.1
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed:  -I . -imultiarch x86_64-linux-gnu -D SPEC_CPU -D NDEBUG
# -D SPEC_CPU_LP64 dwarf2out.c -mtune=generic -march=x86-64 -g
# -fverbose-asm -fno-strict-aliasing -fstack-protector -Wformat
# -Wformat-security
# options enabled:  -faggressive-loop-optimizations
# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg -fcommon
# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
# -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fgnu-runtime
# -fident -finline-atomics -fira-hoist-pressure -fira-share-save-slots
# -fira-share-spill-slots -fivopts -fkeep-static-consts
# -fleading-underscore -fmath-errno -fmerge-debug-strings
# -fmove-loop-invariants -fpeephole -fprefetch-loop-arrays
# -freg-struct-return -fsched-critical-path-heuristic
# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fshow-column
# -fsigned-zeros -fsplit-ivs-in-unroller -fstack-protector
# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
# -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
# -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
# -ftree-parallelize-loops= -ftree-phiprop -ftree-pta -ftree-reassoc
# -ftree-scev-cprop -ftree-slp-vectorize -ftree-vect-loop-version
# -funit-at-a-time -funwind-tables -fverbose-asm -fzero-initialized-in-bss
# -m128bit-long-double -m64 -m80387 -maccumulate-outgoing-args
# -malign-stringops -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc
# -mieee-fp -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse
# -msse2 -mtls-direct-seg-refs

	.text
.Ltext0:
	.globl	dwarf2out_do_frame
	.type	dwarf2out_do_frame, @function
dwarf2out_do_frame:
.LFB2:
	.file 1 "dwarf2out.c"
	.loc 1 92 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 93 0
	movl	write_symbols(%rip), %eax	# write_symbols, write_symbols.1
	.loc 1 100 0
	cmpl	$4, %eax	#, write_symbols.1
	je	.L2	#,
	.loc 1 94 0
	movl	write_symbols(%rip), %eax	# write_symbols, write_symbols.2
	cmpl	$7, %eax	#, write_symbols.2
	je	.L2	#,
	.loc 1 99 0
	movl	flag_unwind_tables(%rip), %eax	# flag_unwind_tables, flag_unwind_tables.3
	testl	%eax, %eax	# flag_unwind_tables.3
	jne	.L2	#,
	.loc 1 100 0
	movl	flag_exceptions(%rip), %eax	# flag_exceptions, flag_exceptions.4
	testl	%eax, %eax	# flag_exceptions.4
	je	.L3	#,
.L2:
	.loc 1 100 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.0
	jmp	.L4	#
.L3:
	.loc 1 100 0 discriminator 2
	movl	$0, %eax	#, iftmp.0
.L4:
	.loc 1 103 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	dwarf2out_do_frame, .-dwarf2out_do_frame
	.globl	current_funcdef_number
	.bss
	.align 4
	.type	current_funcdef_number, @object
	.size	current_funcdef_number, 4
current_funcdef_number:
	.zero	4
	.section	.rodata
.LC0:
	.string	".eh_frame"
	.text
	.globl	default_eh_frame_section
	.type	default_eh_frame_section, @function
default_eh_frame_section:
.LFB3:
	.loc 1 123 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 125 0
	movl	$512, %esi	#,
	movl	$.LC0, %edi	#,
	call	named_section_flags	#
	.loc 1 134 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	default_eh_frame_section, .-default_eh_frame_section
	.local	fde_table
	.comm	fde_table,8,8
	.local	fde_table_allocated
	.comm	fde_table_allocated,4,4
	.local	fde_table_in_use
	.comm	fde_table_in_use,4,4
	.local	cie_cfi_head
	.comm	cie_cfi_head,8,8
	.local	current_funcdef_fde
	.comm	current_funcdef_fde,4,4
	.comm	debug_str_hash,8,8
	.globl	expand_builtin_dwarf_fp_regnum
	.type	expand_builtin_dwarf_fp_regnum, @function
expand_builtin_dwarf_fp_regnum:
.LFB4:
	.loc 1 386 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 387 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.6
	andl	$33554432, %eax	#, D.23209
	testl	%eax, %eax	# D.23209
	je	.L8	#,
	.loc 1 387 0 is_stmt 0 discriminator 1
	movl	dbx64_register_map+24(%rip), %eax	# dbx64_register_map, D.23209
	cltq
	jmp	.L9	#
.L8:
	.loc 1 387 0 discriminator 2
	movl	svr4_dbx_register_map+24(%rip), %eax	# svr4_dbx_register_map, D.23209
	cltq
.L9:
	.loc 1 387 0 discriminator 3
	movq	%rax, %rsi	# iftmp.5,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	.loc 1 388 0 is_stmt 1 discriminator 3
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	expand_builtin_dwarf_fp_regnum, .-expand_builtin_dwarf_fp_regnum
	.globl	expand_builtin_init_dwarf_reg_sizes
	.type	expand_builtin_init_dwarf_reg_sizes, @function
expand_builtin_init_dwarf_reg_sizes:
.LFB6:
	.loc 1 414 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# address, address
	.loc 1 416 0
	movq	integer_types(%rip), %rax	# integer_types, D.23211
	movzbl	61(%rax), %eax	# *_4, tmp80
	shrb	%al	# D.23212
	movzbl	%al, %eax	# D.23212, tmp81
	movl	%eax, -52(%rbp)	# tmp81, mode
	.loc 1 417 0
	movq	-72(%rbp), %rax	# address, tmp82
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp82,
	call	expand_expr	#
	movq	%rax, -48(%rbp)	# tmp83, addr
	.loc 1 418 0
	movq	-48(%rbp), %rax	# addr, tmp84
	movq	%rax, %rsi	# tmp84,
	movl	$51, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, -40(%rbp)	# tmp85, mem
	.loc 1 420 0
	movl	$0, -56(%rbp)	#, i
	jmp	.L12	#
.L19:
	.loc 1 421 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.8
	andl	$33554432, %eax	#, D.23213
	testl	%eax, %eax	# D.23213
	je	.L13	#,
	.loc 1 421 0 is_stmt 0 discriminator 1
	movl	-56(%rbp), %eax	# i, tmp87
	cltq
	movl	dbx64_register_map(,%rax,4), %eax	# dbx64_register_map, D.23213
	cmpl	$16, %eax	#, D.23213
	setle	%al	#, iftmp.7
	jmp	.L14	#
.L13:
	.loc 1 421 0 discriminator 2
	movl	-56(%rbp), %eax	# i, tmp89
	cltq
	movl	svr4_dbx_register_map(,%rax,4), %eax	# svr4_dbx_register_map, D.23213
	cmpl	$16, %eax	#, D.23213
	setle	%al	#, iftmp.7
.L14:
	.loc 1 421 0 discriminator 3
	testb	%al, %al	# iftmp.7
	je	.L15	#,
.LBB2:
	.loc 1 423 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.10
	andl	$33554432, %eax	#, D.23213
	testl	%eax, %eax	# D.23213
	je	.L16	#,
	.loc 1 423 0 is_stmt 0 discriminator 1
	movl	-56(%rbp), %eax	# i, tmp91
	cltq
	movl	dbx64_register_map(,%rax,4), %eax	# dbx64_register_map, iftmp.9
	jmp	.L17	#
.L16:
	.loc 1 423 0 discriminator 2
	movl	-56(%rbp), %eax	# i, tmp93
	cltq
	movl	svr4_dbx_register_map(,%rax,4), %eax	# svr4_dbx_register_map, iftmp.9
.L17:
	.loc 1 423 0 discriminator 3
	movl	-52(%rbp), %edx	# mode, mode.11
	movslq	%edx, %rdx	# mode.11, tmp94
	movzbl	mode_size(%rdx), %edx	# mode_size, D.23214
	movzbl	%dl, %edx	# D.23214, D.23213
	imull	%edx, %eax	# D.23213, D.23213
	cltq
	movq	%rax, -32(%rbp)	# tmp95, offset
	.loc 1 424 0 is_stmt 1 discriminator 3
	movl	-56(%rbp), %eax	# i, tmp97
	cltq
	movl	reg_raw_mode(,%rax,4), %eax	# reg_raw_mode, D.23215
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23214
	movzbl	%al, %eax	# D.23214, tmp99
	movq	%rax, -24(%rbp)	# tmp99, size
	.loc 1 426 0 discriminator 3
	cmpq	$0, -32(%rbp)	#, offset
	jns	.L18	#,
	.loc 1 427 0
	jmp	.L15	#
.L18:
	.loc 1 429 0
	movq	-24(%rbp), %rax	# size, tmp100
	movq	%rax, %rsi	# tmp100,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.23216
	movq	-32(%rbp), %rdx	# offset, tmp101
	movl	-52(%rbp), %esi	# mode, tmp102
	movq	-40(%rbp), %rax	# mem, tmp103
	movl	$1, %r8d	#,
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp103,
	call	adjust_address_1	#
	movq	%rbx, %rsi	# D.23216,
	movq	%rax, %rdi	# D.23216,
	call	emit_move_insn	#
.L15:
.LBE2:
	.loc 1 420 0
	addl	$1, -56(%rbp)	#, i
.L12:
	.loc 1 420 0 is_stmt 0 discriminator 1
	cmpl	$52, -56(%rbp)	#, i
	jle	.L19	#,
	.loc 1 431 0 is_stmt 1
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	expand_builtin_init_dwarf_reg_sizes, .-expand_builtin_init_dwarf_reg_sizes
	.section	.rodata
.LC1:
	.string	"DW_CFA_advance_loc"
.LC2:
	.string	"DW_CFA_offset"
.LC3:
	.string	"DW_CFA_restore"
.LC4:
	.string	"DW_CFA_nop"
.LC5:
	.string	"DW_CFA_set_loc"
.LC6:
	.string	"DW_CFA_advance_loc1"
.LC7:
	.string	"DW_CFA_advance_loc2"
.LC8:
	.string	"DW_CFA_advance_loc4"
.LC9:
	.string	"DW_CFA_offset_extended"
.LC10:
	.string	"DW_CFA_restore_extended"
.LC11:
	.string	"DW_CFA_undefined"
.LC12:
	.string	"DW_CFA_same_value"
.LC13:
	.string	"DW_CFA_register"
.LC14:
	.string	"DW_CFA_remember_state"
.LC15:
	.string	"DW_CFA_restore_state"
.LC16:
	.string	"DW_CFA_def_cfa"
.LC17:
	.string	"DW_CFA_def_cfa_register"
.LC18:
	.string	"DW_CFA_def_cfa_offset"
.LC19:
	.string	"DW_CFA_def_cfa_expression"
.LC20:
	.string	"DW_CFA_expression"
.LC21:
	.string	"DW_CFA_offset_extended_sf"
.LC22:
	.string	"DW_CFA_def_cfa_sf"
.LC23:
	.string	"DW_CFA_def_cfa_offset_sf"
.LC24:
	.string	"DW_CFA_MIPS_advance_loc8"
.LC25:
	.string	"DW_CFA_GNU_window_save"
.LC26:
	.string	"DW_CFA_GNU_args_size"
	.align 8
.LC27:
	.string	"DW_CFA_GNU_negative_offset_extended"
.LC28:
	.string	"DW_CFA_<unknown>"
	.text
	.type	dwarf_cfi_name, @function
dwarf_cfi_name:
.LFB7:
	.loc 1 438 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# cfi_opc, cfi_opc
	.loc 1 439 0
	cmpl	$192, -4(%rbp)	#, cfi_opc
	ja	.L21	#,
	movl	-4(%rbp), %eax	# cfi_opc, tmp61
	movq	.L23(,%rax,8), %rax	#, tmp62
	jmp	*%rax	# tmp62
	.section	.rodata
	.align 8
	.align 4
.L23:
	.quad	.L22
	.quad	.L24
	.quad	.L25
	.quad	.L26
	.quad	.L27
	.quad	.L28
	.quad	.L29
	.quad	.L30
	.quad	.L31
	.quad	.L32
	.quad	.L33
	.quad	.L34
	.quad	.L35
	.quad	.L36
	.quad	.L37
	.quad	.L38
	.quad	.L39
	.quad	.L40
	.quad	.L41
	.quad	.L42
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L43
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L44
	.quad	.L45
	.quad	.L46
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L47
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L48
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L21
	.quad	.L49
	.text
.L47:
	.loc 1 442 0
	movl	$.LC1, %eax	#, D.23217
	jmp	.L50	#
.L48:
	.loc 1 444 0
	movl	$.LC2, %eax	#, D.23217
	jmp	.L50	#
.L49:
	.loc 1 446 0
	movl	$.LC3, %eax	#, D.23217
	jmp	.L50	#
.L22:
	.loc 1 448 0
	movl	$.LC4, %eax	#, D.23217
	jmp	.L50	#
.L24:
	.loc 1 450 0
	movl	$.LC5, %eax	#, D.23217
	jmp	.L50	#
.L25:
	.loc 1 452 0
	movl	$.LC6, %eax	#, D.23217
	jmp	.L50	#
.L26:
	.loc 1 454 0
	movl	$.LC7, %eax	#, D.23217
	jmp	.L50	#
.L27:
	.loc 1 456 0
	movl	$.LC8, %eax	#, D.23217
	jmp	.L50	#
.L28:
	.loc 1 458 0
	movl	$.LC9, %eax	#, D.23217
	jmp	.L50	#
.L29:
	.loc 1 460 0
	movl	$.LC10, %eax	#, D.23217
	jmp	.L50	#
.L30:
	.loc 1 462 0
	movl	$.LC11, %eax	#, D.23217
	jmp	.L50	#
.L31:
	.loc 1 464 0
	movl	$.LC12, %eax	#, D.23217
	jmp	.L50	#
.L32:
	.loc 1 466 0
	movl	$.LC13, %eax	#, D.23217
	jmp	.L50	#
.L33:
	.loc 1 468 0
	movl	$.LC14, %eax	#, D.23217
	jmp	.L50	#
.L34:
	.loc 1 470 0
	movl	$.LC15, %eax	#, D.23217
	jmp	.L50	#
.L35:
	.loc 1 472 0
	movl	$.LC16, %eax	#, D.23217
	jmp	.L50	#
.L36:
	.loc 1 474 0
	movl	$.LC17, %eax	#, D.23217
	jmp	.L50	#
.L37:
	.loc 1 476 0
	movl	$.LC18, %eax	#, D.23217
	jmp	.L50	#
.L38:
	.loc 1 480 0
	movl	$.LC19, %eax	#, D.23217
	jmp	.L50	#
.L39:
	.loc 1 482 0
	movl	$.LC20, %eax	#, D.23217
	jmp	.L50	#
.L40:
	.loc 1 484 0
	movl	$.LC21, %eax	#, D.23217
	jmp	.L50	#
.L41:
	.loc 1 486 0
	movl	$.LC22, %eax	#, D.23217
	jmp	.L50	#
.L42:
	.loc 1 488 0
	movl	$.LC23, %eax	#, D.23217
	jmp	.L50	#
.L43:
	.loc 1 492 0
	movl	$.LC24, %eax	#, D.23217
	jmp	.L50	#
.L44:
	.loc 1 496 0
	movl	$.LC25, %eax	#, D.23217
	jmp	.L50	#
.L45:
	.loc 1 498 0
	movl	$.LC26, %eax	#, D.23217
	jmp	.L50	#
.L46:
	.loc 1 500 0
	movl	$.LC27, %eax	#, D.23217
	jmp	.L50	#
.L21:
	.loc 1 503 0
	movl	$.LC28, %eax	#, D.23217
.L50:
	.loc 1 505 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	dwarf_cfi_name, .-dwarf_cfi_name
	.type	new_cfi, @function
new_cfi:
.LFB8:
	.loc 1 511 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 512 0
	movl	$32, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp61, cfi
	.loc 1 514 0
	movq	-8(%rbp), %rax	# cfi, tmp62
	movq	$0, (%rax)	#, cfi_1->dw_cfi_next
	.loc 1 515 0
	movq	-8(%rbp), %rax	# cfi, tmp63
	movq	$0, 16(%rax)	#, cfi_1->dw_cfi_oprnd1.dw_cfi_reg_num
	.loc 1 516 0
	movq	-8(%rbp), %rax	# cfi, tmp64
	movq	$0, 24(%rax)	#, cfi_1->dw_cfi_oprnd2.dw_cfi_reg_num
	.loc 1 518 0
	movq	-8(%rbp), %rax	# cfi, D.23246
	.loc 1 519 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	new_cfi, .-new_cfi
	.type	add_cfi, @function
add_cfi:
.LFB9:
	.loc 1 527 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# list_head, list_head
	movq	%rsi, -32(%rbp)	# cfi, cfi
	.loc 1 531 0
	movq	-24(%rbp), %rax	# list_head, tmp61
	movq	%rax, -8(%rbp)	# tmp61, p
	jmp	.L54	#
.L55:
	.loc 1 531 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# p, tmp62
	movq	(%rax), %rax	# *p_1, D.23247
	movq	%rax, -8(%rbp)	# D.23247, p
.L54:
	.loc 1 531 0 discriminator 1
	movq	-8(%rbp), %rax	# p, tmp63
	movq	(%rax), %rax	# *p_1, D.23247
	testq	%rax, %rax	# D.23247
	jne	.L55	#,
	.loc 1 534 0 is_stmt 1
	movq	-8(%rbp), %rax	# p, tmp64
	movq	-32(%rbp), %rdx	# cfi, tmp65
	movq	%rdx, (%rax)	# tmp65, *p_1
	.loc 1 535 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	add_cfi, .-add_cfi
	.section	.rodata
.LC29:
	.string	"LCFI"
.LC30:
	.string	"*.%s%u"
.LC31:
	.string	":\n"
	.text
	.globl	dwarf2out_cfi_label
	.type	dwarf2out_cfi_label, @function
dwarf2out_cfi_label:
.LFB10:
	.loc 1 541 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 545 0
	movq	label_num.13911(%rip), %rax	# label_num, label_num.12
	leaq	1(%rax), %rdx	#, label_num.14
	movq	%rdx, label_num.13911(%rip)	# label_num.14, label_num
	movl	%eax, %ecx	# D.23248,
	movl	$.LC29, %edx	#,
	movl	$.LC30, %esi	#,
	movl	$label.13910, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 546 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.15
	movl	$label.13910, %esi	#,
	movq	%rax, %rdi	# asm_out_file.15,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.16
	movq	%rax, %rcx	# asm_out_file.16,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 547 0
	movl	$label.13910, %eax	#, D.23249
	.loc 1 548 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	dwarf2out_cfi_label, .-dwarf2out_cfi_label
	.type	add_fde_cfi, @function
add_fde_cfi:
.LFB11:
	.loc 1 557 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# label, label
	movq	%rsi, -32(%rbp)	# cfi, cfi
	.loc 1 558 0
	cmpq	$0, -24(%rbp)	#, label
	je	.L59	#,
.LBB3:
	.loc 1 560 0
	movq	fde_table(%rip), %rcx	# fde_table, fde_table.17
	movl	fde_table_in_use(%rip), %eax	# fde_table_in_use, fde_table_in_use.18
	subl	$1, %eax	#, D.23253
	movl	%eax, %edx	# D.23253, D.23254
	movq	%rdx, %rax	# D.23254, tmp70
	salq	$2, %rax	#, tmp70
	addq	%rdx, %rax	# D.23254, tmp70
	salq	$3, %rax	#, tmp71
	addq	%rcx, %rax	# fde_table.17, tmp72
	movq	%rax, -16(%rbp)	# tmp72, fde
	.loc 1 562 0
	movq	-24(%rbp), %rax	# label, tmp73
	movzbl	(%rax), %eax	# *label_2(D), D.23255
	testb	%al, %al	# D.23255
	jne	.L60	#,
	.loc 1 563 0
	call	dwarf2out_cfi_label	#
	movq	%rax, -24(%rbp)	# tmp74, label
.L60:
	.loc 1 565 0
	movq	-16(%rbp), %rax	# fde, tmp75
	movq	8(%rax), %rax	# fde_8->dw_fde_current_label, D.23256
	testq	%rax, %rax	# D.23256
	je	.L61	#,
	.loc 1 566 0
	movq	-16(%rbp), %rax	# fde, tmp76
	movq	8(%rax), %rdx	# fde_8->dw_fde_current_label, D.23256
	movq	-24(%rbp), %rax	# label, tmp77
	movq	%rdx, %rsi	# D.23256,
	movq	%rax, %rdi	# tmp77,
	call	strcmp	#
	testl	%eax, %eax	# D.23257
	je	.L62	#,
.L61:
.LBB4:
	.loc 1 570 0
	movq	-24(%rbp), %rax	# label, tmp78
	movq	%rax, %rdi	# tmp78,
	call	xstrdup	#
	movq	%rax, -24(%rbp)	# tmp79, label
	movq	-16(%rbp), %rax	# fde, tmp80
	movq	-24(%rbp), %rdx	# label, tmp81
	movq	%rdx, 8(%rax)	# tmp81, fde_8->dw_fde_current_label
	.loc 1 573 0
	call	new_cfi	#
	movq	%rax, -8(%rbp)	# tmp82, xcfi
	.loc 1 574 0
	movq	-8(%rbp), %rax	# xcfi, tmp83
	movl	$4, 8(%rax)	#, xcfi_15->dw_cfi_opc
	.loc 1 575 0
	movq	-8(%rbp), %rax	# xcfi, tmp84
	movq	-24(%rbp), %rdx	# label, tmp85
	movq	%rdx, 16(%rax)	# tmp85, xcfi_15->dw_cfi_oprnd1.dw_cfi_addr
	.loc 1 576 0
	movq	-16(%rbp), %rax	# fde, tmp86
	leaq	24(%rax), %rdx	#, D.23258
	movq	-8(%rbp), %rax	# xcfi, tmp87
	movq	%rax, %rsi	# tmp87,
	movq	%rdx, %rdi	# D.23258,
	call	add_cfi	#
.L62:
.LBE4:
	.loc 1 579 0
	movq	-16(%rbp), %rax	# fde, tmp88
	leaq	24(%rax), %rdx	#, D.23258
	movq	-32(%rbp), %rax	# cfi, tmp89
	movq	%rax, %rsi	# tmp89,
	movq	%rdx, %rdi	# D.23258,
	call	add_cfi	#
.LBE3:
	jmp	.L58	#
.L59:
	.loc 1 583 0
	movq	-32(%rbp), %rax	# cfi, tmp90
	movq	%rax, %rsi	# tmp90,
	movl	$cie_cfi_head, %edi	#,
	call	add_cfi	#
.L58:
	.loc 1 584 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	add_fde_cfi, .-add_fde_cfi
	.type	lookup_cfa_1, @function
lookup_cfa_1:
.LFB12:
	.loc 1 592 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# cfi, cfi
	movq	%rsi, -16(%rbp)	# loc, loc
	.loc 1 593 0
	movq	-8(%rbp), %rax	# cfi, tmp65
	movl	8(%rax), %eax	# cfi_1(D)->dw_cfi_opc, D.23259
	cmpl	$13, %eax	#, D.23259
	je	.L66	#,
	cmpl	$13, %eax	#, D.23259
	ja	.L67	#,
	cmpl	$12, %eax	#, D.23259
	je	.L68	#,
	.loc 1 609 0
	jmp	.L64	#
.L67:
	.loc 1 593 0
	cmpl	$14, %eax	#, D.23259
	je	.L69	#,
	cmpl	$15, %eax	#, D.23259
	je	.L70	#,
	.loc 1 609 0
	jmp	.L64	#
.L69:
	.loc 1 596 0
	movq	-8(%rbp), %rax	# cfi, tmp66
	movq	16(%rax), %rdx	# cfi_1(D)->dw_cfi_oprnd1.dw_cfi_offset, D.23260
	movq	-16(%rbp), %rax	# loc, tmp67
	movq	%rdx, 8(%rax)	# D.23260, loc_4(D)->offset
	.loc 1 597 0
	jmp	.L64	#
.L66:
	.loc 1 599 0
	movq	-8(%rbp), %rax	# cfi, tmp68
	movq	16(%rax), %rdx	# cfi_1(D)->dw_cfi_oprnd1.dw_cfi_reg_num, D.23261
	movq	-16(%rbp), %rax	# loc, tmp69
	movq	%rdx, (%rax)	# D.23261, loc_4(D)->reg
	.loc 1 600 0
	jmp	.L64	#
.L68:
	.loc 1 602 0
	movq	-8(%rbp), %rax	# cfi, tmp70
	movq	16(%rax), %rdx	# cfi_1(D)->dw_cfi_oprnd1.dw_cfi_reg_num, D.23261
	movq	-16(%rbp), %rax	# loc, tmp71
	movq	%rdx, (%rax)	# D.23261, loc_4(D)->reg
	.loc 1 603 0
	movq	-8(%rbp), %rax	# cfi, tmp72
	movq	24(%rax), %rdx	# cfi_1(D)->dw_cfi_oprnd2.dw_cfi_offset, D.23260
	movq	-16(%rbp), %rax	# loc, tmp73
	movq	%rdx, 8(%rax)	# D.23260, loc_4(D)->offset
	.loc 1 604 0
	jmp	.L64	#
.L70:
	.loc 1 606 0
	movq	-8(%rbp), %rax	# cfi, tmp74
	movq	16(%rax), %rdx	# cfi_1(D)->dw_cfi_oprnd1.dw_cfi_loc, D.23262
	movq	-16(%rbp), %rax	# loc, tmp75
	movq	%rdx, %rsi	# D.23262,
	movq	%rax, %rdi	# tmp75,
	call	get_cfa_from_loc_descr	#
	.loc 1 607 0
	nop
.L64:
	.loc 1 611 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE12:
	.size	lookup_cfa_1, .-lookup_cfa_1
	.type	lookup_cfa, @function
lookup_cfa:
.LFB13:
	.loc 1 618 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# loc, loc
	.loc 1 621 0
	movq	-24(%rbp), %rax	# loc, tmp65
	movq	$-1, (%rax)	#, loc_3(D)->reg
	.loc 1 622 0
	movq	-24(%rbp), %rax	# loc, tmp66
	movq	$0, 8(%rax)	#, loc_3(D)->offset
	.loc 1 623 0
	movq	-24(%rbp), %rax	# loc, tmp67
	movl	$0, 24(%rax)	#, loc_3(D)->indirect
	.loc 1 624 0
	movq	-24(%rbp), %rax	# loc, tmp68
	movq	$0, 16(%rax)	#, loc_3(D)->base_offset
	.loc 1 626 0
	movq	cie_cfi_head(%rip), %rax	# cie_cfi_head, tmp69
	movq	%rax, -16(%rbp)	# tmp69, cfi
	jmp	.L73	#
.L74:
	.loc 1 627 0 discriminator 2
	movq	-24(%rbp), %rdx	# loc, tmp70
	movq	-16(%rbp), %rax	# cfi, tmp71
	movq	%rdx, %rsi	# tmp70,
	movq	%rax, %rdi	# tmp71,
	call	lookup_cfa_1	#
	.loc 1 626 0 discriminator 2
	movq	-16(%rbp), %rax	# cfi, tmp72
	movq	(%rax), %rax	# cfi_1->dw_cfi_next, tmp73
	movq	%rax, -16(%rbp)	# tmp73, cfi
.L73:
	.loc 1 626 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, cfi
	jne	.L74	#,
	.loc 1 629 0 is_stmt 1
	movl	fde_table_in_use(%rip), %eax	# fde_table_in_use, fde_table_in_use.19
	testl	%eax, %eax	# fde_table_in_use.19
	je	.L72	#,
.LBB5:
	.loc 1 631 0
	movq	fde_table(%rip), %rcx	# fde_table, fde_table.20
	movl	fde_table_in_use(%rip), %eax	# fde_table_in_use, fde_table_in_use.21
	subl	$1, %eax	#, D.23264
	movl	%eax, %edx	# D.23264, D.23265
	movq	%rdx, %rax	# D.23265, tmp74
	salq	$2, %rax	#, tmp74
	addq	%rdx, %rax	# D.23265, tmp74
	salq	$3, %rax	#, tmp75
	addq	%rcx, %rax	# fde_table.20, tmp76
	movq	%rax, -8(%rbp)	# tmp76, fde
	.loc 1 632 0
	movq	-8(%rbp), %rax	# fde, tmp77
	movq	24(%rax), %rax	# fde_12->dw_fde_cfi, tmp78
	movq	%rax, -16(%rbp)	# tmp78, cfi
	jmp	.L76	#
.L77:
	.loc 1 633 0 discriminator 2
	movq	-24(%rbp), %rdx	# loc, tmp79
	movq	-16(%rbp), %rax	# cfi, tmp80
	movq	%rdx, %rsi	# tmp79,
	movq	%rax, %rdi	# tmp80,
	call	lookup_cfa_1	#
	.loc 1 632 0 discriminator 2
	movq	-16(%rbp), %rax	# cfi, tmp81
	movq	(%rax), %rax	# cfi_2->dw_cfi_next, tmp82
	movq	%rax, -16(%rbp)	# tmp82, cfi
.L76:
	.loc 1 632 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, cfi
	jne	.L77	#,
.L72:
.LBE5:
	.loc 1 635 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE13:
	.size	lookup_cfa, .-lookup_cfa
	.local	cfa
	.comm	cfa,32,32
	.local	cfa_store
	.comm	cfa_store,32,32
	.local	args_size
	.comm	args_size,8,8
	.local	old_args_size
	.comm	old_args_size,8,8
	.globl	dwarf2out_def_cfa
	.type	dwarf2out_def_cfa, @function
dwarf2out_def_cfa:
.LFB14:
	.loc 1 659 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# label, label
	movl	%esi, -44(%rbp)	# reg, reg
	movq	%rdx, -56(%rbp)	# offset, offset
	.loc 1 661 0
	movl	$0, -8(%rbp)	#, loc.indirect
	.loc 1 662 0
	movq	$0, -16(%rbp)	#, loc.base_offset
	.loc 1 663 0
	movl	-44(%rbp), %eax	# reg, D.23266
	movq	%rax, -32(%rbp)	# D.23266, loc.reg
	.loc 1 664 0
	movq	-56(%rbp), %rax	# offset, tmp60
	movq	%rax, -24(%rbp)	# tmp60, loc.offset
	.loc 1 665 0
	leaq	-32(%rbp), %rdx	#, tmp61
	movq	-40(%rbp), %rax	# label, tmp62
	movq	%rdx, %rsi	# tmp61,
	movq	%rax, %rdi	# tmp62,
	call	def_cfa_1	#
	.loc 1 666 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE14:
	.size	dwarf2out_def_cfa, .-dwarf2out_def_cfa
	.type	def_cfa_1, @function
def_cfa_1:
.LFB15:
	.loc 1 675 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# label, label
	movq	%rsi, -96(%rbp)	# loc_p, loc_p
	.loc 1 679 0
	movq	-96(%rbp), %rax	# loc_p, tmp91
	movq	(%rax), %rdx	# *loc_p_2(D), tmp93
	movq	%rdx, cfa(%rip)	# tmp93, cfa
	movq	8(%rax), %rdx	# *loc_p_2(D), tmp94
	movq	%rdx, cfa+8(%rip)	# tmp94, cfa
	movq	16(%rax), %rdx	# *loc_p_2(D), tmp95
	movq	%rdx, cfa+16(%rip)	# tmp95, cfa
	movq	24(%rax), %rax	# *loc_p_2(D), tmp96
	movq	%rax, cfa+24(%rip)	# tmp96, cfa
	.loc 1 680 0
	movq	-96(%rbp), %rax	# loc_p, tmp97
	movq	(%rax), %rdx	# *loc_p_2(D), tmp98
	movq	%rdx, -32(%rbp)	# tmp98, loc
	movq	8(%rax), %rdx	# *loc_p_2(D), tmp99
	movq	%rdx, -24(%rbp)	# tmp99, loc
	movq	16(%rax), %rdx	# *loc_p_2(D), tmp100
	movq	%rdx, -16(%rbp)	# tmp100, loc
	movq	24(%rax), %rax	# *loc_p_2(D), tmp101
	movq	%rax, -8(%rbp)	# tmp101, loc
	.loc 1 682 0
	movq	cfa_store(%rip), %rdx	# cfa_store.reg, D.23267
	movq	-32(%rbp), %rax	# loc.reg, D.23267
	cmpq	%rax, %rdx	# D.23267, D.23267
	jne	.L80	#,
	.loc 1 682 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %eax	# loc.indirect, D.23268
	testl	%eax, %eax	# D.23268
	jne	.L80	#,
	.loc 1 683 0 is_stmt 1
	movq	-24(%rbp), %rax	# loc.offset, D.23269
	movq	%rax, cfa_store+8(%rip)	# D.23269, cfa_store.offset
.L80:
	.loc 1 685 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.23
	andl	$33554432, %eax	#, D.23268
	testl	%eax, %eax	# D.23268
	je	.L81	#,
	.loc 1 685 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# loc.reg, D.23267
	movl	dbx64_register_map(,%rax,4), %eax	# dbx64_register_map, D.23268
	cltq
	jmp	.L82	#
.L81:
	.loc 1 685 0 discriminator 2
	movq	-32(%rbp), %rax	# loc.reg, D.23267
	movl	svr4_dbx_register_map(,%rax,4), %eax	# svr4_dbx_register_map, D.23268
	cltq
.L82:
	.loc 1 685 0 discriminator 3
	movq	%rax, -32(%rbp)	# iftmp.22, loc.reg
	.loc 1 686 0 is_stmt 1 discriminator 3
	leaq	-64(%rbp), %rax	#, tmp102
	movq	%rax, %rdi	# tmp102,
	call	lookup_cfa	#
	.loc 1 689 0 discriminator 3
	movq	-32(%rbp), %rdx	# loc.reg, D.23267
	movq	-64(%rbp), %rax	# old_cfa.reg, D.23267
	cmpq	%rax, %rdx	# D.23267, D.23267
	jne	.L83	#,
	.loc 1 689 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rdx	# loc.offset, D.23269
	movq	-56(%rbp), %rax	# old_cfa.offset, D.23269
	cmpq	%rax, %rdx	# D.23269, D.23269
	jne	.L83	#,
	.loc 1 690 0 is_stmt 1
	movl	-8(%rbp), %edx	# loc.indirect, D.23268
	movl	-40(%rbp), %eax	# old_cfa.indirect, D.23268
	cmpl	%eax, %edx	# D.23268, D.23268
	jne	.L83	#,
	.loc 1 691 0
	movl	-8(%rbp), %eax	# loc.indirect, D.23268
	testl	%eax, %eax	# D.23268
	je	.L79	#,
	.loc 1 691 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rdx	# loc.base_offset, D.23269
	movq	-48(%rbp), %rax	# old_cfa.base_offset, D.23269
	cmpq	%rax, %rdx	# D.23269, D.23269
	je	.L79	#,
.L83:
	.loc 1 694 0 is_stmt 1
	call	new_cfi	#
	movq	%rax, -80(%rbp)	# tmp103, cfi
	.loc 1 696 0
	movq	-32(%rbp), %rdx	# loc.reg, D.23267
	movq	-64(%rbp), %rax	# old_cfa.reg, D.23267
	cmpq	%rax, %rdx	# D.23267, D.23267
	jne	.L86	#,
	.loc 1 696 0 is_stmt 0 discriminator 1
	movl	-8(%rbp), %eax	# loc.indirect, D.23268
	testl	%eax, %eax	# D.23268
	jne	.L86	#,
	.loc 1 701 0 is_stmt 1
	movq	-80(%rbp), %rax	# cfi, tmp104
	movl	$14, 8(%rax)	#, cfi_24->dw_cfi_opc
	.loc 1 702 0
	movq	-24(%rbp), %rdx	# loc.offset, D.23269
	movq	-80(%rbp), %rax	# cfi, tmp105
	movq	%rdx, 16(%rax)	# D.23269, cfi_24->dw_cfi_oprnd1.dw_cfi_offset
	jmp	.L87	#
.L86:
	.loc 1 706 0
	movq	-24(%rbp), %rdx	# loc.offset, D.23269
	movq	-56(%rbp), %rax	# old_cfa.offset, D.23269
	cmpq	%rax, %rdx	# D.23269, D.23269
	jne	.L88	#,
	.loc 1 706 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# old_cfa.reg, D.23267
	cmpq	$-1, %rax	#, D.23267
	je	.L88	#,
	.loc 1 707 0 is_stmt 1
	movl	-8(%rbp), %eax	# loc.indirect, D.23268
	testl	%eax, %eax	# D.23268
	jne	.L88	#,
	.loc 1 712 0
	movq	-80(%rbp), %rax	# cfi, tmp106
	movl	$13, 8(%rax)	#, cfi_24->dw_cfi_opc
	.loc 1 713 0
	movq	-32(%rbp), %rdx	# loc.reg, D.23267
	movq	-80(%rbp), %rax	# cfi, tmp107
	movq	%rdx, 16(%rax)	# D.23267, cfi_24->dw_cfi_oprnd1.dw_cfi_reg_num
	jmp	.L87	#
.L88:
	.loc 1 717 0
	movl	-8(%rbp), %eax	# loc.indirect, D.23268
	testl	%eax, %eax	# D.23268
	jne	.L89	#,
	.loc 1 722 0
	movq	-80(%rbp), %rax	# cfi, tmp108
	movl	$12, 8(%rax)	#, cfi_24->dw_cfi_opc
	.loc 1 723 0
	movq	-32(%rbp), %rdx	# loc.reg, D.23267
	movq	-80(%rbp), %rax	# cfi, tmp109
	movq	%rdx, 16(%rax)	# D.23267, cfi_24->dw_cfi_oprnd1.dw_cfi_reg_num
	.loc 1 724 0
	movq	-24(%rbp), %rdx	# loc.offset, D.23269
	movq	-80(%rbp), %rax	# cfi, tmp110
	movq	%rdx, 24(%rax)	# D.23269, cfi_24->dw_cfi_oprnd2.dw_cfi_offset
	jmp	.L87	#
.L89:
.LBB6:
	.loc 1 733 0
	movq	-80(%rbp), %rax	# cfi, tmp111
	movl	$15, 8(%rax)	#, cfi_24->dw_cfi_opc
	.loc 1 734 0
	leaq	-32(%rbp), %rax	#, tmp112
	movq	%rax, %rdi	# tmp112,
	call	build_cfa_loc	#
	movq	%rax, -72(%rbp)	# tmp113, loc_list
	.loc 1 735 0
	movq	-80(%rbp), %rax	# cfi, tmp114
	movq	-72(%rbp), %rdx	# loc_list, tmp115
	movq	%rdx, 16(%rax)	# tmp115, cfi_24->dw_cfi_oprnd1.dw_cfi_loc
.L87:
.LBE6:
	.loc 1 738 0 discriminator 1
	movq	-80(%rbp), %rdx	# cfi, tmp116
	movq	-88(%rbp), %rax	# label, tmp117
	movq	%rdx, %rsi	# tmp116,
	movq	%rax, %rdi	# tmp117,
	call	add_fde_cfi	#
.L79:
	.loc 1 739 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE15:
	.size	def_cfa_1, .-def_cfa_1
	.type	reg_save, @function
reg_save:
.LFB16:
	.loc 1 752 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# label, label
	movl	%esi, -44(%rbp)	# reg, reg
	movl	%edx, -48(%rbp)	# sreg, sreg
	movq	%rcx, -56(%rbp)	# offset, offset
	.loc 1 753 0
	call	new_cfi	#
	movq	%rax, -24(%rbp)	# tmp65, cfi
	.loc 1 755 0
	movl	-44(%rbp), %edx	# reg, D.23270
	movq	-24(%rbp), %rax	# cfi, tmp66
	movq	%rdx, 16(%rax)	# D.23270, cfi_2->dw_cfi_oprnd1.dw_cfi_reg_num
	.loc 1 759 0
	cmpl	$-1, -48(%rbp)	#, sreg
	jne	.L91	#,
	.loc 1 761 0
	movl	-44(%rbp), %eax	# reg, tmp67
	andl	$-64, %eax	#, D.23271
	testl	%eax, %eax	# D.23271
	je	.L92	#,
	.loc 1 764 0
	movq	-24(%rbp), %rax	# cfi, tmp68
	movl	$5, 8(%rax)	#, cfi_2->dw_cfi_opc
	jmp	.L93	#
.L92:
	.loc 1 766 0
	movq	-24(%rbp), %rax	# cfi, tmp69
	movl	$128, 8(%rax)	#, cfi_2->dw_cfi_opc
.L93:
	.loc 1 780 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.25
	andl	$33554432, %eax	#, D.23272
	testl	%eax, %eax	# D.23272
	je	.L94	#,
	.loc 1 780 0 is_stmt 0 discriminator 1
	movq	$-8, %rbx	#, iftmp.24
	jmp	.L95	#
.L94:
	.loc 1 780 0 discriminator 2
	movq	$-4, %rbx	#, iftmp.24
.L95:
	.loc 1 780 0 discriminator 3
	movq	-56(%rbp), %rax	# offset, tmp72
	cqto
	idivq	%rbx	# iftmp.24
	movq	%rax, -56(%rbp)	# tmp70, offset
	.loc 1 781 0 is_stmt 1 discriminator 3
	cmpq	$0, -56(%rbp)	#, offset
	jns	.L96	#,
	.loc 1 782 0
	movq	-24(%rbp), %rax	# cfi, tmp73
	movl	$17, 8(%rax)	#, cfi_2->dw_cfi_opc
.L96:
	.loc 1 784 0
	movq	-24(%rbp), %rax	# cfi, tmp74
	movq	-56(%rbp), %rdx	# offset, tmp75
	movq	%rdx, 24(%rax)	# tmp75, cfi_2->dw_cfi_oprnd2.dw_cfi_offset
	jmp	.L97	#
.L91:
	.loc 1 786 0
	movl	-48(%rbp), %eax	# sreg, tmp76
	cmpl	-44(%rbp), %eax	# reg, tmp76
	jne	.L98	#,
	.loc 1 788 0
	jmp	.L90	#
.L98:
	.loc 1 791 0
	movq	-24(%rbp), %rax	# cfi, tmp77
	movl	$9, 8(%rax)	#, cfi_2->dw_cfi_opc
	.loc 1 792 0
	movl	-48(%rbp), %edx	# sreg, D.23270
	movq	-24(%rbp), %rax	# cfi, tmp78
	movq	%rdx, 24(%rax)	# D.23270, cfi_2->dw_cfi_oprnd2.dw_cfi_reg_num
.L97:
	.loc 1 795 0
	movq	-24(%rbp), %rdx	# cfi, tmp79
	movq	-40(%rbp), %rax	# label, tmp80
	movq	%rdx, %rsi	# tmp79,
	movq	%rax, %rdi	# tmp80,
	call	add_fde_cfi	#
.L90:
	.loc 1 796 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE16:
	.size	reg_save, .-reg_save
	.globl	dwarf2out_window_save
	.type	dwarf2out_window_save, @function
dwarf2out_window_save:
.LFB17:
	.loc 1 808 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# label, label
	.loc 1 809 0
	call	new_cfi	#
	movq	%rax, -8(%rbp)	# tmp59, cfi
	.loc 1 811 0
	movq	-8(%rbp), %rax	# cfi, tmp60
	movl	$45, 8(%rax)	#, cfi_1->dw_cfi_opc
	.loc 1 812 0
	movq	-8(%rbp), %rdx	# cfi, tmp61
	movq	-24(%rbp), %rax	# label, tmp62
	movq	%rdx, %rsi	# tmp61,
	movq	%rax, %rdi	# tmp62,
	call	add_fde_cfi	#
	.loc 1 813 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE17:
	.size	dwarf2out_window_save, .-dwarf2out_window_save
	.globl	dwarf2out_args_size
	.type	dwarf2out_args_size, @function
dwarf2out_args_size:
.LFB18:
	.loc 1 822 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# label, label
	movq	%rsi, -32(%rbp)	# size, size
	.loc 1 825 0
	movq	old_args_size(%rip), %rax	# old_args_size, old_args_size.26
	cmpq	%rax, -32(%rbp)	# old_args_size.26, size
	jne	.L102	#,
	.loc 1 826 0
	jmp	.L101	#
.L102:
	.loc 1 828 0
	movq	-32(%rbp), %rax	# size, tmp60
	movq	%rax, old_args_size(%rip)	# tmp60, old_args_size
	.loc 1 830 0
	call	new_cfi	#
	movq	%rax, -8(%rbp)	# tmp61, cfi
	.loc 1 831 0
	movq	-8(%rbp), %rax	# cfi, tmp62
	movl	$46, 8(%rax)	#, cfi_3->dw_cfi_opc
	.loc 1 832 0
	movq	-8(%rbp), %rax	# cfi, tmp63
	movq	-32(%rbp), %rdx	# size, tmp64
	movq	%rdx, 16(%rax)	# tmp64, cfi_3->dw_cfi_oprnd1.dw_cfi_offset
	.loc 1 833 0
	movq	-8(%rbp), %rdx	# cfi, tmp65
	movq	-24(%rbp), %rax	# label, tmp66
	movq	%rdx, %rsi	# tmp65,
	movq	%rax, %rdi	# tmp66,
	call	add_fde_cfi	#
.L101:
	.loc 1 834 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE18:
	.size	dwarf2out_args_size, .-dwarf2out_args_size
	.globl	dwarf2out_reg_save
	.type	dwarf2out_reg_save, @function
dwarf2out_reg_save:
.LFB19:
	.loc 1 844 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# label, label
	movl	%esi, -12(%rbp)	# reg, reg
	movq	%rdx, -24(%rbp)	# offset, offset
	.loc 1 845 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.28
	andl	$33554432, %eax	#, D.23274
	testl	%eax, %eax	# D.23274
	je	.L105	#,
	.loc 1 845 0 is_stmt 0 discriminator 1
	movl	-12(%rbp), %eax	# reg, tmp64
	movl	dbx64_register_map(,%rax,4), %eax	# dbx64_register_map, D.23274
	jmp	.L106	#
.L105:
	.loc 1 845 0 discriminator 2
	movl	-12(%rbp), %eax	# reg, tmp65
	movl	svr4_dbx_register_map(,%rax,4), %eax	# svr4_dbx_register_map, D.23274
.L106:
	.loc 1 845 0 discriminator 3
	movq	-24(%rbp), %rdx	# offset, tmp66
	movq	-8(%rbp), %rdi	# label, tmp67
	movq	%rdx, %rcx	# tmp66,
	movl	$-1, %edx	#,
	movl	%eax, %esi	# iftmp.27,
	call	reg_save	#
	.loc 1 846 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE19:
	.size	dwarf2out_reg_save, .-dwarf2out_reg_save
	.globl	dwarf2out_return_save
	.type	dwarf2out_return_save, @function
dwarf2out_return_save:
.LFB20:
	.loc 1 855 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# label, label
	movq	%rsi, -16(%rbp)	# offset, offset
	.loc 1 856 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.30
	andl	$33554432, %eax	#, D.23275
	testl	%eax, %eax	# D.23275
	je	.L108	#,
	.loc 1 856 0 is_stmt 0 discriminator 1
	movl	$16, %eax	#, iftmp.29
	jmp	.L109	#
.L108:
	.loc 1 856 0 discriminator 2
	movl	$8, %eax	#, iftmp.29
.L109:
	.loc 1 856 0 discriminator 3
	movq	-16(%rbp), %rdx	# offset, tmp62
	movq	-8(%rbp), %rdi	# label, tmp63
	movq	%rdx, %rcx	# tmp62,
	movl	$-1, %edx	#,
	movl	%eax, %esi	# iftmp.29,
	call	reg_save	#
	.loc 1 857 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE20:
	.size	dwarf2out_return_save, .-dwarf2out_return_save
	.globl	dwarf2out_return_reg
	.type	dwarf2out_return_reg, @function
dwarf2out_return_reg:
.LFB21:
	.loc 1 866 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# label, label
	movl	%esi, -12(%rbp)	# sreg, sreg
	.loc 1 867 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.32
	andl	$33554432, %eax	#, D.23276
	testl	%eax, %eax	# D.23276
	je	.L111	#,
	.loc 1 867 0 is_stmt 0 discriminator 1
	movl	$16, %eax	#, iftmp.31
	jmp	.L112	#
.L111:
	.loc 1 867 0 discriminator 2
	movl	$8, %eax	#, iftmp.31
.L112:
	.loc 1 867 0 discriminator 3
	movl	-12(%rbp), %edx	# sreg, tmp62
	movq	-8(%rbp), %rdi	# label, tmp63
	movl	$0, %ecx	#,
	movl	%eax, %esi	# iftmp.31,
	call	reg_save	#
	.loc 1 868 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE21:
	.size	dwarf2out_return_reg, .-dwarf2out_return_reg
	.section	.rodata
.LC32:
	.string	"dwarf2out.c"
	.text
	.type	initial_return_save, @function
initial_return_save:
.LFB22:
	.loc 1 876 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# rtl, rtl
	.loc 1 877 0
	movl	$-1, -12(%rbp)	#, reg
	.loc 1 878 0
	movq	$0, -8(%rbp)	#, offset
	.loc 1 880 0
	movq	-24(%rbp), %rax	# rtl, tmp86
	movzwl	(%rax), %eax	# rtl_8(D)->code, D.23277
	movzwl	%ax, %eax	# D.23277, D.23278
	cmpl	$66, %eax	#, D.23278
	je	.L115	#,
	cmpl	$75, %eax	#, D.23278
	je	.L116	#,
	cmpl	$61, %eax	#, D.23278
	jne	.L133	#,
	.loc 1 884 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.34
	andl	$33554432, %eax	#, D.23279
	testl	%eax, %eax	# D.23279
	je	.L118	#,
	.loc 1 884 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# rtl, tmp87
	movl	8(%rax), %eax	# rtl_8(D)->fld[0].rtuint, D.23278
	movl	%eax, %eax	# D.23278, tmp88
	movl	dbx64_register_map(,%rax,4), %eax	# dbx64_register_map, D.23279
	jmp	.L119	#
.L118:
	.loc 1 884 0 discriminator 2
	movq	-24(%rbp), %rax	# rtl, tmp89
	movl	8(%rax), %eax	# rtl_8(D)->fld[0].rtuint, D.23278
	movl	%eax, %eax	# D.23278, tmp90
	movl	svr4_dbx_register_map(,%rax,4), %eax	# svr4_dbx_register_map, D.23279
.L119:
	.loc 1 884 0 discriminator 3
	movl	%eax, -12(%rbp)	# iftmp.33, reg
	.loc 1 885 0 is_stmt 1 discriminator 3
	jmp	.L120	#
.L115:
	.loc 1 889 0
	movq	-24(%rbp), %rax	# rtl, tmp91
	movq	8(%rax), %rax	# rtl_8(D)->fld[0].rtx, tmp92
	movq	%rax, -24(%rbp)	# tmp92, rtl
	.loc 1 890 0
	movq	-24(%rbp), %rax	# rtl, tmp93
	movzwl	(%rax), %eax	# rtl_20->code, D.23277
	movzwl	%ax, %eax	# D.23277, D.23278
	cmpl	$75, %eax	#, D.23278
	je	.L122	#,
	cmpl	$76, %eax	#, D.23278
	je	.L123	#,
	cmpl	$61, %eax	#, D.23278
	jne	.L134	#,
	.loc 1 893 0
	movq	-24(%rbp), %rax	# rtl, tmp94
	movl	8(%rax), %eax	# rtl_20->fld[0].rtuint, D.23278
	cmpl	$7, %eax	#, D.23278
	je	.L125	#,
	.loc 1 894 0
	movl	$__FUNCTION__.13995, %edx	#,
	movl	$894, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L125:
	.loc 1 895 0
	movq	$0, -8(%rbp)	#, offset
	.loc 1 896 0
	jmp	.L126	#
.L122:
	.loc 1 899 0
	movq	-24(%rbp), %rax	# rtl, tmp95
	movq	8(%rax), %rax	# rtl_20->fld[0].rtx, D.23280
	movl	8(%rax), %eax	# _25->fld[0].rtuint, D.23278
	cmpl	$7, %eax	#, D.23278
	je	.L127	#,
	.loc 1 900 0
	movl	$__FUNCTION__.13995, %edx	#,
	movl	$900, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L127:
	.loc 1 901 0
	movq	-24(%rbp), %rax	# rtl, tmp96
	movq	16(%rax), %rax	# rtl_20->fld[1].rtx, D.23280
	movq	8(%rax), %rax	# _27->fld[0].rtwint, tmp97
	movq	%rax, -8(%rbp)	# tmp97, offset
	.loc 1 902 0
	jmp	.L126	#
.L123:
	.loc 1 905 0
	movq	-24(%rbp), %rax	# rtl, tmp98
	movq	8(%rax), %rax	# rtl_20->fld[0].rtx, D.23280
	movl	8(%rax), %eax	# _29->fld[0].rtuint, D.23278
	cmpl	$7, %eax	#, D.23278
	je	.L128	#,
	.loc 1 906 0
	movl	$__FUNCTION__.13995, %edx	#,
	movl	$906, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L128:
	.loc 1 907 0
	movq	-24(%rbp), %rax	# rtl, tmp99
	movq	16(%rax), %rax	# rtl_20->fld[1].rtx, D.23280
	movq	8(%rax), %rax	# _31->fld[0].rtwint, D.23281
	negq	%rax	# tmp100
	movq	%rax, -8(%rbp)	# tmp100, offset
	.loc 1 908 0
	jmp	.L126	#
.L134:
	.loc 1 911 0
	movl	$__FUNCTION__.13995, %edx	#,
	movl	$911, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L126:
	.loc 1 914 0
	jmp	.L120	#
.L116:
	.loc 1 920 0
	movq	-24(%rbp), %rax	# rtl, tmp101
	movq	16(%rax), %rax	# rtl_8(D)->fld[1].rtx, D.23280
	movzwl	(%rax), %eax	# _34->code, D.23277
	cmpw	$54, %ax	#, D.23277
	je	.L129	#,
	.loc 1 921 0
	movl	$__FUNCTION__.13995, %edx	#,
	movl	$921, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L129:
	.loc 1 922 0
	movq	-24(%rbp), %rax	# rtl, tmp102
	movq	8(%rax), %rax	# rtl_8(D)->fld[0].rtx, D.23280
	movq	%rax, %rdi	# D.23280,
	call	initial_return_save	#
	.loc 1 923 0
	jmp	.L113	#
.L133:
	.loc 1 926 0
	movl	$__FUNCTION__.13995, %edx	#,
	movl	$926, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L120:
	.loc 1 929 0
	movq	cfa+8(%rip), %rax	# cfa.offset, D.23281
	movq	-8(%rbp), %rdx	# offset, tmp103
	movq	%rdx, %rcx	# tmp103, D.23281
	subq	%rax, %rcx	# D.23281, D.23281
	movl	target_flags(%rip), %eax	# target_flags, target_flags.36
	andl	$33554432, %eax	#, D.23279
	testl	%eax, %eax	# D.23279
	je	.L131	#,
	.loc 1 929 0 is_stmt 0 discriminator 1
	movl	$16, %eax	#, iftmp.35
	jmp	.L132	#
.L131:
	.loc 1 929 0 discriminator 2
	movl	$8, %eax	#, iftmp.35
.L132:
	.loc 1 929 0 discriminator 3
	movl	-12(%rbp), %edx	# reg, tmp104
	movl	%eax, %esi	# iftmp.35,
	movl	$0, %edi	#,
	call	reg_save	#
.L113:
	.loc 1 930 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE22:
	.size	initial_return_save, .-initial_return_save
	.type	stack_adjust_offset, @function
stack_adjust_offset:
.LFB23:
	.loc 1 938 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# pattern, pattern
	.loc 1 939 0
	movq	-56(%rbp), %rax	# pattern, tmp80
	movq	16(%rax), %rax	# pattern_6(D)->fld[1].rtx, tmp81
	movq	%rax, -24(%rbp)	# tmp81, src
	.loc 1 940 0
	movq	-56(%rbp), %rax	# pattern, tmp82
	movq	8(%rax), %rax	# pattern_6(D)->fld[0].rtx, tmp83
	movq	%rax, -16(%rbp)	# tmp83, dest
	.loc 1 941 0
	movq	$0, -32(%rbp)	#, offset
	.loc 1 944 0
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23284
	cmpq	-16(%rbp), %rax	# dest, D.23284
	jne	.L136	#,
	.loc 1 947 0
	movq	-24(%rbp), %rax	# src, tmp84
	movzwl	(%rax), %eax	# src_7->code, D.23285
	movzwl	%ax, %eax	# D.23285, tmp85
	movl	%eax, -36(%rbp)	# tmp85, code
	.loc 1 948 0
	cmpl	$75, -36(%rbp)	#, code
	je	.L137	#,
	.loc 1 948 0 is_stmt 0 discriminator 1
	cmpl	$76, -36(%rbp)	#, code
	jne	.L138	#,
.L137:
	.loc 1 949 0 is_stmt 1
	movq	-24(%rbp), %rax	# src, tmp86
	movq	8(%rax), %rdx	# src_7->fld[0].rtx, D.23284
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23284
	cmpq	%rax, %rdx	# D.23284, D.23284
	jne	.L138	#,
	.loc 1 950 0
	movq	-24(%rbp), %rax	# src, tmp87
	movq	16(%rax), %rax	# src_7->fld[1].rtx, D.23284
	movzwl	(%rax), %eax	# _15->code, D.23285
	cmpw	$54, %ax	#, D.23285
	je	.L139	#,
.L138:
	.loc 1 951 0
	movl	$0, %eax	#, D.23283
	jmp	.L140	#
.L139:
	.loc 1 953 0
	movq	-24(%rbp), %rax	# src, tmp88
	movq	16(%rax), %rax	# src_7->fld[1].rtx, D.23284
	movq	8(%rax), %rax	# _17->fld[0].rtwint, tmp89
	movq	%rax, -32(%rbp)	# tmp89, offset
	jmp	.L141	#
.L136:
	.loc 1 955 0
	movq	-16(%rbp), %rax	# dest, tmp90
	movzwl	(%rax), %eax	# dest_8->code, D.23285
	cmpw	$66, %ax	#, D.23285
	jne	.L142	#,
	.loc 1 958 0
	movq	-16(%rbp), %rax	# dest, tmp91
	movq	8(%rax), %rax	# dest_8->fld[0].rtx, tmp92
	movq	%rax, -24(%rbp)	# tmp92, src
	.loc 1 959 0
	movq	-24(%rbp), %rax	# src, tmp93
	movzwl	(%rax), %eax	# src_21->code, D.23285
	movzwl	%ax, %eax	# D.23285, tmp94
	movl	%eax, -36(%rbp)	# tmp94, code
	.loc 1 961 0
	cmpl	$96, -36(%rbp)	#, code
	je	.L143	#,
	.loc 1 961 0 is_stmt 0 discriminator 1
	cmpl	$97, -36(%rbp)	#, code
	je	.L143	#,
	cmpl	$100, -36(%rbp)	#, code
	jne	.L144	#,
.L143:
	.loc 1 962 0 is_stmt 1
	movq	-24(%rbp), %rax	# src, tmp95
	movq	8(%rax), %rdx	# src_21->fld[0].rtx, D.23284
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23284
	cmpq	%rax, %rdx	# D.23284, D.23284
	je	.L145	#,
.L144:
	.loc 1 963 0
	movl	$0, %eax	#, D.23283
	jmp	.L140	#
.L145:
	.loc 1 965 0
	cmpl	$100, -36(%rbp)	#, code
	jne	.L146	#,
.LBB7:
	.loc 1 967 0
	movq	-24(%rbp), %rax	# src, tmp96
	movq	16(%rax), %rax	# src_21->fld[1].rtx, D.23284
	movq	16(%rax), %rax	# _26->fld[1].rtx, tmp97
	movq	%rax, -8(%rbp)	# tmp97, val
	.loc 1 970 0
	movq	-24(%rbp), %rax	# src, tmp98
	movq	16(%rax), %rax	# src_21->fld[1].rtx, D.23284
	movzwl	(%rax), %eax	# _28->code, D.23285
	cmpw	$75, %ax	#, D.23285
	jne	.L147	#,
	.loc 1 971 0 discriminator 1
	movq	-8(%rbp), %rax	# val, tmp99
	movzwl	(%rax), %eax	# val_27->code, D.23285
	.loc 1 970 0 discriminator 1
	cmpw	$54, %ax	#, D.23285
	je	.L148	#,
.L147:
	.loc 1 972 0
	movl	$__FUNCTION__.14010, %edx	#,
	movl	$972, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L148:
	.loc 1 974 0
	movq	-8(%rbp), %rax	# val, tmp100
	movq	8(%rax), %rax	# val_27->fld[0].rtwint, D.23283
	negq	%rax	# tmp101
	movq	%rax, -32(%rbp)	# tmp101, offset
.LBE7:
	jmp	.L141	#
.L146:
	.loc 1 977 0
	movq	-16(%rbp), %rax	# dest, tmp102
	movzbl	2(%rax), %eax	# dest_8->mode, D.23286
	movzbl	%al, %eax	# D.23286, D.23287
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23286
	movzbl	%al, %eax	# D.23286, tmp104
	movq	%rax, -32(%rbp)	# tmp104, offset
	jmp	.L141	#
.L142:
	.loc 1 980 0
	movl	$0, %eax	#, D.23283
	jmp	.L140	#
.L141:
	.loc 1 982 0
	cmpl	$75, -36(%rbp)	#, code
	je	.L150	#,
	.loc 1 982 0 is_stmt 0 discriminator 1
	cmpl	$97, -36(%rbp)	#, code
	jne	.L151	#,
.L150:
	.loc 1 983 0 is_stmt 1
	negq	-32(%rbp)	# offset
.L151:
	.loc 1 985 0
	movq	-32(%rbp), %rax	# offset, D.23283
.L140:
	.loc 1 986 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE23:
	.size	stack_adjust_offset, .-stack_adjust_offset
	.section	.rodata
.LC33:
	.string	""
	.text
	.type	dwarf2out_stack_adjust, @function
dwarf2out_stack_adjust:
.LFB24:
	.loc 1 995 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# insn, insn
	.loc 1 1000 0
	movl	flag_asynchronous_unwind_tables(%rip), %eax	# flag_asynchronous_unwind_tables, flag_asynchronous_unwind_tables.37
	testl	%eax, %eax	# flag_asynchronous_unwind_tables.37
	jne	.L153	#,
	.loc 1 1000 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# insn, tmp96
	movzwl	(%rax), %eax	# insn_8(D)->code, D.23288
	cmpw	$34, %ax	#, D.23288
	jne	.L153	#,
	.loc 1 1003 0 is_stmt 1
	movq	-40(%rbp), %rax	# insn, tmp97
	movq	32(%rax), %rax	# insn_8(D)->fld[3].rtx, tmp98
	movq	%rax, -40(%rbp)	# tmp98, insn
	.loc 1 1004 0
	movq	-40(%rbp), %rax	# insn, tmp99
	movzwl	(%rax), %eax	# insn_10->code, D.23288
	cmpw	$39, %ax	#, D.23288
	jne	.L154	#,
	.loc 1 1005 0
	movq	-40(%rbp), %rax	# insn, tmp100
	movq	8(%rax), %rax	# insn_10->fld[0].rtvec, D.23289
	movq	8(%rax), %rax	# _12->elem, tmp101
	movq	%rax, -40(%rbp)	# tmp101, insn
.L154:
	.loc 1 1006 0
	movq	-40(%rbp), %rax	# insn, tmp102
	movzwl	(%rax), %eax	# insn_1->code, D.23288
	cmpw	$47, %ax	#, D.23288
	jne	.L155	#,
	.loc 1 1007 0
	movq	-40(%rbp), %rax	# insn, tmp103
	movq	16(%rax), %rax	# insn_1->fld[1].rtx, tmp104
	movq	%rax, -40(%rbp)	# tmp104, insn
.L155:
	.loc 1 1008 0
	movq	-40(%rbp), %rax	# insn, tmp105
	movzwl	(%rax), %eax	# insn_2->code, D.23288
	cmpw	$50, %ax	#, D.23288
	je	.L156	#,
	.loc 1 1009 0
	movl	$__FUNCTION__.14017, %edx	#,
	movl	$1009, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L156:
	.loc 1 1011 0
	movq	-40(%rbp), %rax	# insn, tmp106
	movq	16(%rax), %rax	# insn_2->fld[1].rtx, D.23290
	movq	8(%rax), %rax	# _17->fld[0].rtwint, D.23291
	movq	%rax, %rsi	# D.23291,
	movl	$.LC33, %edi	#,
	call	dwarf2out_args_size	#
	.loc 1 1012 0
	jmp	.L152	#
.L153:
	.loc 1 1017 0
	movl	flag_asynchronous_unwind_tables(%rip), %eax	# flag_asynchronous_unwind_tables, flag_asynchronous_unwind_tables.38
	testl	%eax, %eax	# flag_asynchronous_unwind_tables.38
	jne	.L158	#,
	.loc 1 1017 0 is_stmt 0 discriminator 1
	movq	cfa(%rip), %rax	# cfa.reg, D.23292
	cmpq	$7, %rax	#, D.23292
	je	.L158	#,
	.loc 1 1018 0 is_stmt 1
	jmp	.L152	#
.L158:
	.loc 1 1020 0
	movq	-40(%rbp), %rax	# insn, tmp107
	movzwl	(%rax), %eax	# insn_8(D)->code, D.23288
	cmpw	$35, %ax	#, D.23288
	jne	.L159	#,
	.loc 1 1026 0
	movq	args_size(%rip), %rax	# args_size, args_size.39
	negq	%rax	# tmp108
	movq	%rax, -16(%rbp)	# tmp108, offset
	jmp	.L160	#
.L159:
	.loc 1 1031 0
	movq	-40(%rbp), %rax	# insn, tmp109
	movq	32(%rax), %rax	# insn_8(D)->fld[3].rtx, D.23290
	movzwl	(%rax), %eax	# _24->code, D.23288
	cmpw	$47, %ax	#, D.23288
	jne	.L161	#,
	.loc 1 1032 0
	movq	-40(%rbp), %rax	# insn, tmp110
	movq	32(%rax), %rax	# insn_8(D)->fld[3].rtx, D.23290
	movq	%rax, %rdi	# D.23290,
	call	stack_adjust_offset	#
	movq	%rax, -16(%rbp)	# tmp111, offset
	jmp	.L160	#
.L161:
	.loc 1 1033 0
	movq	-40(%rbp), %rax	# insn, tmp112
	movq	32(%rax), %rax	# insn_8(D)->fld[3].rtx, D.23290
	movzwl	(%rax), %eax	# _28->code, D.23288
	cmpw	$39, %ax	#, D.23288
	je	.L162	#,
	.loc 1 1034 0
	movq	-40(%rbp), %rax	# insn, tmp113
	movq	32(%rax), %rax	# insn_8(D)->fld[3].rtx, D.23290
	movzwl	(%rax), %eax	# _30->code, D.23288
	cmpw	$24, %ax	#, D.23288
	jne	.L163	#,
.L162:
	.loc 1 1038 0
	movq	$0, -16(%rbp)	#, offset
	movq	-40(%rbp), %rax	# insn, tmp114
	movq	32(%rax), %rax	# insn_8(D)->fld[3].rtx, D.23290
	movq	8(%rax), %rax	# _33->fld[0].rtvec, D.23289
	movl	(%rax), %eax	# _34->num_elem, D.23293
	subl	$1, %eax	#, tmp115
	movl	%eax, -20(%rbp)	# tmp115, i
	jmp	.L164	#
.L166:
	.loc 1 1039 0
	movq	-40(%rbp), %rax	# insn, tmp116
	movq	32(%rax), %rax	# insn_8(D)->fld[3].rtx, D.23290
	movq	8(%rax), %rax	# _37->fld[0].rtvec, D.23289
	movl	-20(%rbp), %edx	# i, tmp118
	movslq	%edx, %rdx	# tmp118, tmp117
	movq	8(%rax,%rdx,8), %rax	# _38->elem, D.23290
	movzwl	(%rax), %eax	# _39->code, D.23288
	cmpw	$47, %ax	#, D.23288
	jne	.L165	#,
	.loc 1 1040 0
	movq	-40(%rbp), %rax	# insn, tmp119
	movq	32(%rax), %rax	# insn_8(D)->fld[3].rtx, D.23290
	movq	8(%rax), %rax	# _41->fld[0].rtvec, D.23289
	movl	-20(%rbp), %edx	# i, tmp121
	movslq	%edx, %rdx	# tmp121, tmp120
	movq	8(%rax,%rdx,8), %rax	# _42->elem, D.23290
	movq	%rax, %rdi	# D.23290,
	call	stack_adjust_offset	#
	addq	%rax, -16(%rbp)	# D.23291, offset
.L165:
	.loc 1 1038 0
	subl	$1, -20(%rbp)	#, i
.L164:
	.loc 1 1038 0 is_stmt 0 discriminator 1
	cmpl	$0, -20(%rbp)	#, i
	jns	.L166	#,
	.loc 1 1033 0 is_stmt 1
	jmp	.L160	#
.L163:
	.loc 1 1043 0
	jmp	.L152	#
.L160:
	.loc 1 1045 0
	cmpq	$0, -16(%rbp)	#, offset
	jne	.L167	#,
	.loc 1 1046 0
	jmp	.L152	#
.L167:
	.loc 1 1048 0
	movq	cfa(%rip), %rax	# cfa.reg, D.23292
	cmpq	$7, %rax	#, D.23292
	jne	.L168	#,
	.loc 1 1049 0
	movq	cfa+8(%rip), %rdx	# cfa.offset, D.23291
	movq	-16(%rbp), %rax	# offset, tmp122
	addq	%rdx, %rax	# D.23291, D.23291
	movq	%rax, cfa+8(%rip)	# D.23291, cfa.offset
.L168:
	.loc 1 1055 0
	movq	args_size(%rip), %rdx	# args_size, args_size.40
	movq	-16(%rbp), %rax	# offset, tmp123
	addq	%rdx, %rax	# args_size.40, args_size.41
	movq	%rax, args_size(%rip)	# args_size.41, args_size
	.loc 1 1056 0
	movq	args_size(%rip), %rax	# args_size, args_size.42
	testq	%rax, %rax	# args_size.42
	jns	.L169	#,
	.loc 1 1057 0
	movq	$0, args_size(%rip)	#, args_size
.L169:
	.loc 1 1059 0
	call	dwarf2out_cfi_label	#
	movq	%rax, -8(%rbp)	# tmp124, label
	.loc 1 1060 0
	movq	-8(%rbp), %rax	# label, tmp125
	movl	$cfa, %esi	#,
	movq	%rax, %rdi	# tmp125,
	call	def_cfa_1	#
	.loc 1 1061 0
	movq	args_size(%rip), %rdx	# args_size, args_size.43
	movq	-8(%rbp), %rax	# label, tmp126
	movq	%rdx, %rsi	# args_size.43,
	movq	%rax, %rdi	# tmp126,
	call	dwarf2out_args_size	#
.L152:
	.loc 1 1062 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE24:
	.size	dwarf2out_stack_adjust, .-dwarf2out_stack_adjust
	.local	queued_reg_saves
	.comm	queued_reg_saves,8,8
	.local	last_reg_save_label
	.comm	last_reg_save_label,8,8
	.type	queue_reg_save, @function
queue_reg_save:
.LFB25:
	.loc 1 1083 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# label, label
	movq	%rsi, -32(%rbp)	# reg, reg
	movq	%rdx, -40(%rbp)	# offset, offset
	.loc 1 1084 0
	movl	$24, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp60, q
	.loc 1 1086 0
	movq	queued_reg_saves(%rip), %rdx	# queued_reg_saves, queued_reg_saves.44
	movq	-8(%rbp), %rax	# q, tmp61
	movq	%rdx, (%rax)	# queued_reg_saves.44, q_1->next
	.loc 1 1087 0
	movq	-8(%rbp), %rax	# q, tmp62
	movq	-32(%rbp), %rdx	# reg, tmp63
	movq	%rdx, 8(%rax)	# tmp63, q_1->reg
	.loc 1 1088 0
	movq	-8(%rbp), %rax	# q, tmp64
	movq	-40(%rbp), %rdx	# offset, tmp65
	movq	%rdx, 16(%rax)	# tmp65, q_1->cfa_offset
	.loc 1 1089 0
	movq	-8(%rbp), %rax	# q, tmp66
	movq	%rax, queued_reg_saves(%rip)	# tmp66, queued_reg_saves
	.loc 1 1091 0
	movq	-24(%rbp), %rax	# label, tmp67
	movq	%rax, last_reg_save_label(%rip)	# tmp67, last_reg_save_label
	.loc 1 1092 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE25:
	.size	queue_reg_save, .-queue_reg_save
	.type	flush_queued_reg_saves, @function
flush_queued_reg_saves:
.LFB26:
	.loc 1 1096 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 1099 0
	movq	queued_reg_saves(%rip), %rax	# queued_reg_saves, tmp63
	movq	%rax, -16(%rbp)	# tmp63, q
	jmp	.L172	#
.L173:
	.loc 1 1101 0 discriminator 2
	movq	-16(%rbp), %rax	# q, tmp64
	movq	16(%rax), %rdx	# q_1->cfa_offset, D.23295
	movq	-16(%rbp), %rax	# q, tmp65
	movq	8(%rax), %rax	# q_1->reg, D.23296
	movl	8(%rax), %ecx	# _4->fld[0].rtuint, D.23297
	movq	last_reg_save_label(%rip), %rax	# last_reg_save_label, last_reg_save_label.45
	movl	%ecx, %esi	# D.23297,
	movq	%rax, %rdi	# last_reg_save_label.45,
	call	dwarf2out_reg_save	#
	.loc 1 1102 0 discriminator 2
	movq	-16(%rbp), %rax	# q, tmp66
	movq	(%rax), %rax	# q_1->next, tmp67
	movq	%rax, -8(%rbp)	# tmp67, next
	.loc 1 1103 0 discriminator 2
	movq	-16(%rbp), %rax	# q, tmp68
	movq	%rax, %rdi	# tmp68,
	call	free	#
	.loc 1 1099 0 discriminator 2
	movq	-8(%rbp), %rax	# next, tmp69
	movq	%rax, -16(%rbp)	# tmp69, q
.L172:
	.loc 1 1099 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, q
	jne	.L173	#,
	.loc 1 1106 0 is_stmt 1
	movq	$0, queued_reg_saves(%rip)	#, queued_reg_saves
	.loc 1 1107 0
	movq	$0, last_reg_save_label(%rip)	#, last_reg_save_label
	.loc 1 1108 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE26:
	.size	flush_queued_reg_saves, .-flush_queued_reg_saves
	.type	clobbers_queued_reg_save, @function
clobbers_queued_reg_save:
.LFB27:
	.loc 1 1113 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	.loc 1 1116 0
	movq	queued_reg_saves(%rip), %rax	# queued_reg_saves, tmp63
	movq	%rax, -8(%rbp)	# tmp63, q
	jmp	.L175	#
.L178:
	.loc 1 1117 0
	movq	-8(%rbp), %rax	# q, tmp64
	movq	8(%rax), %rax	# q_1->reg, D.23299
	movq	-24(%rbp), %rdx	# insn, tmp65
	movq	%rdx, %rsi	# tmp65,
	movq	%rax, %rdi	# D.23299,
	call	modified_in_p	#
	testl	%eax, %eax	# D.23300
	je	.L176	#,
	.loc 1 1118 0
	movl	$1, %eax	#, D.23298
	jmp	.L177	#
.L176:
	.loc 1 1116 0
	movq	-8(%rbp), %rax	# q, tmp66
	movq	(%rax), %rax	# q_1->next, tmp67
	movq	%rax, -8(%rbp)	# tmp67, q
.L175:
	.loc 1 1116 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, q
	jne	.L178	#,
	.loc 1 1120 0 is_stmt 1
	movl	$0, %eax	#, D.23298
.L177:
	.loc 1 1121 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE27:
	.size	clobbers_queued_reg_save, .-clobbers_queued_reg_save
	.local	cfa_temp
	.comm	cfa_temp,32,32
	.type	dwarf2out_frame_debug_expr, @function
dwarf2out_frame_debug_expr:
.LFB28:
	.loc 1 1285 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# expr, expr
	movq	%rsi, -64(%rbp)	# label, label
	.loc 1 1294 0
	movq	-56(%rbp), %rax	# expr, tmp264
	movzwl	(%rax), %eax	# expr_11(D)->code, D.23301
	cmpw	$39, %ax	#, D.23301
	je	.L180	#,
	.loc 1 1294 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# expr, tmp265
	movzwl	(%rax), %eax	# expr_11(D)->code, D.23301
	cmpw	$24, %ax	#, D.23301
	jne	.L181	#,
.L180:
.LBB8:
	.loc 1 1297 0 is_stmt 1
	movq	-56(%rbp), %rax	# expr, tmp266
	movq	8(%rax), %rax	# expr_11(D)->fld[0].rtvec, D.23308
	movl	(%rax), %eax	# _230->num_elem, tmp267
	movl	%eax, -36(%rbp)	# tmp267, limit
	.loc 1 1299 0
	movl	$0, -40(%rbp)	#, par_index
	jmp	.L182	#
.L185:
	.loc 1 1300 0
	movq	-56(%rbp), %rax	# expr, tmp268
	movq	8(%rax), %rax	# expr_11(D)->fld[0].rtvec, D.23308
	movl	-40(%rbp), %edx	# par_index, tmp270
	movslq	%edx, %rdx	# tmp270, tmp269
	movq	8(%rax,%rdx,8), %rax	# _233->elem, D.23305
	movzwl	(%rax), %eax	# _234->code, D.23301
	cmpw	$47, %ax	#, D.23301
	jne	.L183	#,
	.loc 1 1301 0
	movq	-56(%rbp), %rax	# expr, tmp271
	movq	8(%rax), %rax	# expr_11(D)->fld[0].rtvec, D.23308
	movl	-40(%rbp), %edx	# par_index, tmp273
	movslq	%edx, %rdx	# tmp273, tmp272
	movq	8(%rax,%rdx,8), %rax	# _236->elem, D.23305
	movzbl	3(%rax), %eax	# *_237, D.23306
	andl	$-128, %eax	#, D.23306
	testb	%al, %al	# D.23306
	jne	.L184	#,
	.loc 1 1302 0
	cmpl	$0, -40(%rbp)	#, par_index
	jne	.L183	#,
.L184:
	.loc 1 1303 0
	movq	-56(%rbp), %rax	# expr, tmp274
	movq	8(%rax), %rax	# expr_11(D)->fld[0].rtvec, D.23308
	movl	-40(%rbp), %edx	# par_index, tmp276
	movslq	%edx, %rdx	# tmp276, tmp275
	movq	8(%rax,%rdx,8), %rax	# _240->elem, D.23305
	movq	-64(%rbp), %rdx	# label, tmp277
	movq	%rdx, %rsi	# tmp277,
	movq	%rax, %rdi	# D.23305,
	call	dwarf2out_frame_debug_expr	#
.L183:
	.loc 1 1299 0
	addl	$1, -40(%rbp)	#, par_index
.L182:
	.loc 1 1299 0 is_stmt 0 discriminator 1
	movl	-40(%rbp), %eax	# par_index, tmp278
	cmpl	-36(%rbp), %eax	# limit, tmp278
	jl	.L185	#,
	.loc 1 1305 0 is_stmt 1
	jmp	.L179	#
.L181:
.LBE8:
	.loc 1 1308 0
	movq	-56(%rbp), %rax	# expr, tmp279
	movzwl	(%rax), %eax	# expr_11(D)->code, D.23301
	cmpw	$47, %ax	#, D.23301
	je	.L187	#,
	.loc 1 1309 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1309, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L187:
	.loc 1 1311 0
	movq	-56(%rbp), %rax	# expr, tmp280
	movq	16(%rax), %rax	# expr_11(D)->fld[1].rtx, tmp281
	movq	%rax, -16(%rbp)	# tmp281, src
	.loc 1 1312 0
	movq	-56(%rbp), %rax	# expr, tmp282
	movq	8(%rax), %rax	# expr_11(D)->fld[0].rtx, tmp283
	movq	%rax, -8(%rbp)	# tmp283, dest
	.loc 1 1314 0
	movq	-8(%rbp), %rax	# dest, tmp284
	movzwl	(%rax), %eax	# dest_16->code, D.23301
	movzwl	%ax, %eax	# D.23301, D.23302
	cmpl	$61, %eax	#, D.23302
	je	.L189	#,
	cmpl	$66, %eax	#, D.23302
	je	.L190	#,
	jmp	.L255	#
.L189:
	.loc 1 1320 0
	movq	-16(%rbp), %rax	# src, tmp285
	movzwl	(%rax), %eax	# src_15->code, D.23301
	movzwl	%ax, %eax	# D.23301, D.23302
	cmpl	$76, %eax	#, D.23302
	ja	.L192	#,
	cmpl	$75, %eax	#, D.23302
	jae	.L193	#,
	cmpl	$54, %eax	#, D.23302
	je	.L194	#,
	cmpl	$61, %eax	#, D.23302
	je	.L195	#,
	jmp	.L191	#
.L192:
	cmpl	$134, %eax	#, D.23302
	je	.L257	#,
	cmpl	$135, %eax	#, D.23302
	je	.L193	#,
	cmpl	$84, %eax	#, D.23302
	je	.L197	#,
	jmp	.L191	#
.L195:
	.loc 1 1324 0
	movq	cfa(%rip), %rdx	# cfa.reg, D.23303
	movq	-16(%rbp), %rax	# src, tmp286
	movl	8(%rax), %eax	# src_15->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	je	.L198	#,
	.loc 1 1328 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1328, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L198:
	.loc 1 1334 0
	movq	-8(%rbp), %rax	# dest, tmp287
	movl	8(%rax), %eax	# dest_16->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	movq	%rax, cfa(%rip)	# D.23303, cfa.reg
	.loc 1 1335 0
	movq	cfa(%rip), %rax	# cfa.reg, D.23303
	movq	%rax, cfa_temp(%rip)	# D.23303, cfa_temp.reg
	.loc 1 1336 0
	movq	cfa+8(%rip), %rax	# cfa.offset, D.23304
	movq	%rax, cfa_temp+8(%rip)	# D.23304, cfa_temp.offset
	.loc 1 1337 0
	jmp	.L199	#
.L193:
	.loc 1 1342 0
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23305
	cmpq	-8(%rbp), %rax	# dest, D.23305
	jne	.L200	#,
	.loc 1 1346 0
	movq	-16(%rbp), %rax	# src, tmp288
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movzwl	(%rax), %eax	# _29->code, D.23301
	movzwl	%ax, %eax	# D.23301, D.23302
	cmpl	$54, %eax	#, D.23302
	je	.L202	#,
	cmpl	$61, %eax	#, D.23302
	je	.L203	#,
	jmp	.L256	#
.L202:
	.loc 1 1349 0
	movq	-16(%rbp), %rax	# src, tmp289
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movq	8(%rax), %rax	# _32->fld[0].rtwint, tmp290
	movq	%rax, -32(%rbp)	# tmp290, offset
	.loc 1 1350 0
	jmp	.L204	#
.L203:
	.loc 1 1352 0
	movq	-16(%rbp), %rax	# src, tmp291
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movl	8(%rax), %eax	# _34->fld[0].rtuint, D.23302
	movl	%eax, %edx	# D.23302, D.23303
	movq	cfa_temp(%rip), %rax	# cfa_temp.reg, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	je	.L205	#,
	.loc 1 1353 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1353, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L205:
	.loc 1 1354 0
	movq	cfa_temp+8(%rip), %rax	# cfa_temp.offset, tmp292
	movq	%rax, -32(%rbp)	# tmp292, offset
	.loc 1 1355 0
	jmp	.L204	#
.L256:
	.loc 1 1357 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1357, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L204:
	.loc 1 1360 0
	movq	-16(%rbp), %rax	# src, tmp293
	movq	8(%rax), %rdx	# src_15->fld[0].rtx, D.23305
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.23305
	cmpq	%rax, %rdx	# D.23305, D.23305
	jne	.L206	#,
	.loc 1 1363 0
	movq	cfa(%rip), %rax	# cfa.reg, D.23303
	cmpq	$6, %rax	#, D.23303
	je	.L207	#,
	.loc 1 1364 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1364, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L207:
	.loc 1 1365 0
	movq	$7, cfa(%rip)	#, cfa.reg
	jmp	.L208	#
.L206:
	.loc 1 1367 0
	movq	-16(%rbp), %rax	# src, tmp294
	movzwl	(%rax), %eax	# src_15->code, D.23301
	cmpw	$135, %ax	#, D.23301
	je	.L208	#,
	.loc 1 1370 0
	movq	-16(%rbp), %rax	# src, tmp295
	movq	8(%rax), %rdx	# src_15->fld[0].rtx, D.23305
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23305
	cmpq	%rax, %rdx	# D.23305, D.23305
	je	.L208	#,
	.loc 1 1371 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1371, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L208:
	.loc 1 1373 0
	movq	-16(%rbp), %rax	# src, tmp296
	movzwl	(%rax), %eax	# src_15->code, D.23301
	cmpw	$76, %ax	#, D.23301
	je	.L209	#,
	.loc 1 1374 0
	negq	-32(%rbp)	# offset
.L209:
	.loc 1 1375 0
	movq	cfa(%rip), %rax	# cfa.reg, D.23303
	cmpq	$7, %rax	#, D.23303
	jne	.L210	#,
	.loc 1 1376 0
	movq	cfa+8(%rip), %rdx	# cfa.offset, D.23304
	movq	-32(%rbp), %rax	# offset, tmp297
	addq	%rdx, %rax	# D.23304, D.23304
	movq	%rax, cfa+8(%rip)	# D.23304, cfa.offset
.L210:
	.loc 1 1377 0
	movq	cfa_store(%rip), %rax	# cfa_store.reg, D.23303
	cmpq	$7, %rax	#, D.23303
	jne	.L212	#,
	.loc 1 1378 0
	movq	cfa_store+8(%rip), %rdx	# cfa_store.offset, D.23304
	movq	-32(%rbp), %rax	# offset, tmp298
	addq	%rdx, %rax	# D.23304, D.23304
	movq	%rax, cfa_store+8(%rip)	# D.23304, cfa_store.offset
	.loc 1 1444 0
	jmp	.L199	#
.L200:
	.loc 1 1380 0
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.23305
	cmpq	-8(%rbp), %rax	# dest, D.23305
	jne	.L213	#,
	.loc 1 1385 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.46
	testl	%eax, %eax	# frame_pointer_needed.46
	jne	.L214	#,
	.loc 1 1386 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1386, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L214:
	.loc 1 1388 0
	movq	-16(%rbp), %rax	# src, tmp299
	movq	8(%rax), %rax	# src_15->fld[0].rtx, D.23305
	movzwl	(%rax), %eax	# _55->code, D.23301
	cmpw	$61, %ax	#, D.23301
	jne	.L215	#,
	.loc 1 1389 0
	movq	-16(%rbp), %rax	# src, tmp300
	movq	8(%rax), %rax	# src_15->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _57->fld[0].rtuint, D.23302
	movl	%eax, %edx	# D.23302, D.23303
	movq	cfa(%rip), %rax	# cfa.reg, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	jne	.L215	#,
	.loc 1 1390 0
	movq	-16(%rbp), %rax	# src, tmp301
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movzwl	(%rax), %eax	# _61->code, D.23301
	cmpw	$54, %ax	#, D.23301
	jne	.L215	#,
	.loc 1 1392 0
	movq	-16(%rbp), %rax	# src, tmp302
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movq	8(%rax), %rax	# _63->fld[0].rtwint, tmp303
	movq	%rax, -32(%rbp)	# tmp303, offset
	.loc 1 1393 0
	movq	-16(%rbp), %rax	# src, tmp304
	movzwl	(%rax), %eax	# src_15->code, D.23301
	cmpw	$76, %ax	#, D.23301
	je	.L216	#,
	.loc 1 1394 0
	negq	-32(%rbp)	# offset
.L216:
	.loc 1 1395 0
	movq	cfa+8(%rip), %rdx	# cfa.offset, D.23304
	movq	-32(%rbp), %rax	# offset, tmp305
	addq	%rdx, %rax	# D.23304, D.23304
	movq	%rax, cfa+8(%rip)	# D.23304, cfa.offset
	.loc 1 1396 0
	movq	$6, cfa(%rip)	#, cfa.reg
	jmp	.L212	#
.L215:
	.loc 1 1399 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1399, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L213:
	.loc 1 1403 0
	movq	-16(%rbp), %rax	# src, tmp306
	movzwl	(%rax), %eax	# src_15->code, D.23301
	cmpw	$76, %ax	#, D.23301
	jne	.L217	#,
	.loc 1 1404 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1404, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L217:
	.loc 1 1407 0
	movq	-16(%rbp), %rax	# src, tmp307
	movq	8(%rax), %rax	# src_15->fld[0].rtx, D.23305
	movzwl	(%rax), %eax	# _70->code, D.23301
	cmpw	$61, %ax	#, D.23301
	jne	.L218	#,
	.loc 1 1408 0
	movq	-16(%rbp), %rax	# src, tmp308
	movq	8(%rax), %rax	# src_15->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _72->fld[0].rtuint, D.23302
	movl	%eax, %edx	# D.23302, D.23303
	movq	cfa(%rip), %rax	# cfa.reg, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	jne	.L218	#,
	.loc 1 1409 0
	movq	-16(%rbp), %rax	# src, tmp309
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movzwl	(%rax), %eax	# _76->code, D.23301
	cmpw	$54, %ax	#, D.23301
	jne	.L218	#,
	.loc 1 1413 0
	movq	-16(%rbp), %rax	# src, tmp310
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movq	8(%rax), %rax	# _78->fld[0].rtwint, D.23304
	negq	%rax	# tmp311
	movq	%rax, -32(%rbp)	# tmp311, offset
	.loc 1 1414 0
	movq	cfa+8(%rip), %rdx	# cfa.offset, D.23304
	movq	-32(%rbp), %rax	# offset, tmp312
	addq	%rdx, %rax	# D.23304, D.23304
	movq	%rax, cfa+8(%rip)	# D.23304, cfa.offset
	.loc 1 1415 0
	movq	-8(%rbp), %rax	# dest, tmp313
	movl	8(%rax), %eax	# dest_16->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	movq	%rax, cfa(%rip)	# D.23303, cfa.reg
	.loc 1 1417 0
	movq	cfa(%rip), %rax	# cfa.reg, D.23303
	movq	%rax, cfa_temp(%rip)	# D.23303, cfa_temp.reg
	.loc 1 1418 0
	movq	cfa+8(%rip), %rax	# cfa.offset, D.23304
	movq	%rax, cfa_temp+8(%rip)	# D.23304, cfa_temp.offset
	jmp	.L212	#
.L218:
	.loc 1 1422 0
	movq	-16(%rbp), %rax	# src, tmp314
	movq	8(%rax), %rax	# src_15->fld[0].rtx, D.23305
	movzwl	(%rax), %eax	# _87->code, D.23301
	cmpw	$61, %ax	#, D.23301
	jne	.L219	#,
	.loc 1 1423 0
	movq	-16(%rbp), %rax	# src, tmp315
	movq	8(%rax), %rax	# src_15->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _89->fld[0].rtuint, D.23302
	movl	%eax, %edx	# D.23302, D.23303
	movq	cfa_temp(%rip), %rax	# cfa_temp.reg, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	jne	.L219	#,
	.loc 1 1424 0
	movq	-16(%rbp), %rax	# src, tmp316
	movq	16(%rax), %rdx	# src_15->fld[1].rtx, D.23305
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.23305
	cmpq	%rax, %rdx	# D.23305, D.23305
	jne	.L219	#,
	.loc 1 1428 0
	movq	cfa(%rip), %rax	# cfa.reg, D.23303
	cmpq	$7, %rax	#, D.23303
	je	.L220	#,
	.loc 1 1429 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1429, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L220:
	.loc 1 1430 0
	movq	-8(%rbp), %rax	# dest, tmp317
	movl	8(%rax), %eax	# dest_16->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	movq	%rax, cfa_store(%rip)	# D.23303, cfa_store.reg
	.loc 1 1431 0
	movq	cfa+8(%rip), %rdx	# cfa.offset, D.23304
	movq	cfa_temp+8(%rip), %rax	# cfa_temp.offset, D.23304
	subq	%rax, %rdx	# D.23304, D.23304
	movq	%rdx, %rax	# D.23304, D.23304
	movq	%rax, cfa_store+8(%rip)	# D.23304, cfa_store.offset
	jmp	.L212	#
.L219:
	.loc 1 1435 0
	movq	-16(%rbp), %rax	# src, tmp318
	movzwl	(%rax), %eax	# src_15->code, D.23301
	cmpw	$135, %ax	#, D.23301
	jne	.L221	#,
	.loc 1 1436 0
	movq	-16(%rbp), %rax	# src, tmp319
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movzwl	(%rax), %eax	# _102->code, D.23301
	cmpw	$54, %ax	#, D.23301
	jne	.L221	#,
	.loc 1 1438 0
	movq	-8(%rbp), %rax	# dest, tmp320
	movl	8(%rax), %eax	# dest_16->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	movq	%rax, cfa_temp(%rip)	# D.23303, cfa_temp.reg
	.loc 1 1439 0
	movq	-16(%rbp), %rax	# src, tmp321
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movq	8(%rax), %rax	# _106->fld[0].rtwint, D.23304
	movq	%rax, cfa_temp+8(%rip)	# D.23304, cfa_temp.offset
	jmp	.L212	#
.L221:
	.loc 1 1442 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1442, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L212:
	.loc 1 1444 0
	jmp	.L199	#
.L194:
	.loc 1 1448 0
	movq	-8(%rbp), %rax	# dest, tmp322
	movl	8(%rax), %eax	# dest_16->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	movq	%rax, cfa_temp(%rip)	# D.23303, cfa_temp.reg
	.loc 1 1449 0
	movq	-16(%rbp), %rax	# src, tmp323
	movq	8(%rax), %rax	# src_15->fld[0].rtwint, D.23304
	movq	%rax, cfa_temp+8(%rip)	# D.23304, cfa_temp.offset
	.loc 1 1450 0
	jmp	.L199	#
.L197:
	.loc 1 1454 0
	movq	-16(%rbp), %rax	# src, tmp324
	movq	8(%rax), %rax	# src_15->fld[0].rtx, D.23305
	movzwl	(%rax), %eax	# _111->code, D.23301
	cmpw	$61, %ax	#, D.23301
	jne	.L222	#,
	.loc 1 1455 0
	movq	-16(%rbp), %rax	# src, tmp325
	movq	8(%rax), %rax	# src_15->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _113->fld[0].rtuint, D.23302
	movl	%eax, %edx	# D.23302, D.23303
	movq	cfa_temp(%rip), %rax	# cfa_temp.reg, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	jne	.L222	#,
	.loc 1 1456 0
	movq	-16(%rbp), %rax	# src, tmp326
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movzwl	(%rax), %eax	# _117->code, D.23301
	cmpw	$54, %ax	#, D.23301
	je	.L223	#,
.L222:
	.loc 1 1457 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1457, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L223:
	.loc 1 1459 0
	movq	-8(%rbp), %rax	# dest, tmp327
	movl	8(%rax), %eax	# dest_16->fld[0].rtuint, D.23302
	movl	%eax, %edx	# D.23302, D.23303
	movq	cfa_temp(%rip), %rax	# cfa_temp.reg, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	je	.L224	#,
	.loc 1 1460 0
	movq	-8(%rbp), %rax	# dest, tmp328
	movl	8(%rax), %eax	# dest_16->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	movq	%rax, cfa_temp(%rip)	# D.23303, cfa_temp.reg
.L224:
	.loc 1 1461 0
	movq	cfa_temp+8(%rip), %rdx	# cfa_temp.offset, D.23304
	movq	-16(%rbp), %rax	# src, tmp329
	movq	16(%rax), %rax	# src_15->fld[1].rtx, D.23305
	movq	8(%rax), %rax	# _125->fld[0].rtwint, D.23304
	orq	%rdx, %rax	# D.23304, D.23304
	movq	%rax, cfa_temp+8(%rip)	# D.23304, cfa_temp.offset
	.loc 1 1462 0
	jmp	.L199	#
.L191:
	.loc 1 1471 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1471, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L257:
	.loc 1 1468 0
	nop
.L199:
	.loc 1 1474 0
	movq	-64(%rbp), %rax	# label, tmp330
	movl	$cfa, %esi	#,
	movq	%rax, %rdi	# tmp330,
	call	def_cfa_1	#
	.loc 1 1475 0
	jmp	.L179	#
.L190:
	.loc 1 1478 0
	movq	-16(%rbp), %rax	# src, tmp331
	movzwl	(%rax), %eax	# src_15->code, D.23301
	cmpw	$61, %ax	#, D.23301
	je	.L225	#,
	.loc 1 1479 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1479, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L225:
	.loc 1 1483 0
	movq	-8(%rbp), %rax	# dest, tmp332
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movzwl	(%rax), %eax	# _130->code, D.23301
	movzwl	%ax, %eax	# D.23301, D.23302
	subl	$61, %eax	#, tmp333
	cmpl	$74, %eax	#, tmp333
	ja	.L226	#,
	movl	%eax, %eax	# tmp333, tmp334
	movq	.L228(,%rax,8), %rax	#, tmp335
	jmp	*%rax	# tmp335
	.section	.rodata
	.align 8
	.align 4
.L228:
	.quad	.L227
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L229
	.quad	.L229
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L230
	.quad	.L230
	.quad	.L226
	.quad	.L231
	.quad	.L232
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L226
	.quad	.L229
	.text
.L232:
	.loc 1 1489 0
	movq	-8(%rbp), %rax	# dest, tmp336
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movq	16(%rax), %rax	# _133->fld[1].rtx, D.23305
	movq	16(%rax), %rax	# _134->fld[1].rtx, D.23305
	movzwl	(%rax), %eax	# _135->code, D.23301
	cmpw	$54, %ax	#, D.23301
	je	.L233	#,
	.loc 1 1490 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1490, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L233:
	.loc 1 1491 0
	movq	-8(%rbp), %rax	# dest, tmp337
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movq	16(%rax), %rax	# _137->fld[1].rtx, D.23305
	movq	16(%rax), %rax	# _138->fld[1].rtx, D.23305
	movq	8(%rax), %rax	# _139->fld[0].rtwint, D.23304
	negq	%rax	# tmp338
	movq	%rax, -32(%rbp)	# tmp338, offset
	.loc 1 1493 0
	movq	-8(%rbp), %rax	# dest, tmp339
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movq	8(%rax), %rax	# _142->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _143->fld[0].rtuint, D.23302
	cmpl	$7, %eax	#, D.23302
	jne	.L234	#,
	.loc 1 1494 0
	movq	cfa_store(%rip), %rax	# cfa_store.reg, D.23303
	cmpq	$7, %rax	#, D.23303
	je	.L235	#,
.L234:
	.loc 1 1495 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1495, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L235:
	.loc 1 1497 0
	movq	cfa_store+8(%rip), %rdx	# cfa_store.offset, D.23304
	movq	-32(%rbp), %rax	# offset, tmp340
	addq	%rdx, %rax	# D.23304, D.23304
	movq	%rax, cfa_store+8(%rip)	# D.23304, cfa_store.offset
	.loc 1 1498 0
	movq	cfa(%rip), %rax	# cfa.reg, D.23303
	cmpq	$7, %rax	#, D.23303
	jne	.L236	#,
	.loc 1 1499 0
	movq	cfa_store+8(%rip), %rax	# cfa_store.offset, D.23304
	movq	%rax, cfa+8(%rip)	# D.23304, cfa.offset
.L236:
	.loc 1 1501 0
	movq	cfa_store+8(%rip), %rax	# cfa_store.offset, D.23304
	negq	%rax	# tmp341
	movq	%rax, -32(%rbp)	# tmp341, offset
	.loc 1 1502 0
	jmp	.L237	#
.L230:
	.loc 1 1507 0
	movq	-8(%rbp), %rax	# dest, tmp342
	movzbl	2(%rax), %eax	# dest_16->mode, D.23306
	movzbl	%al, %eax	# D.23306, D.23307
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23306
	movzbl	%al, %eax	# D.23306, tmp344
	movq	%rax, -32(%rbp)	# tmp344, offset
	.loc 1 1508 0
	movq	-8(%rbp), %rax	# dest, tmp345
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movzwl	(%rax), %eax	# _156->code, D.23301
	cmpw	$97, %ax	#, D.23301
	jne	.L238	#,
	.loc 1 1509 0
	negq	-32(%rbp)	# offset
.L238:
	.loc 1 1511 0
	movq	-8(%rbp), %rax	# dest, tmp346
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movq	8(%rax), %rax	# _159->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _160->fld[0].rtuint, D.23302
	cmpl	$7, %eax	#, D.23302
	jne	.L239	#,
	.loc 1 1512 0
	movq	cfa_store(%rip), %rax	# cfa_store.reg, D.23303
	cmpq	$7, %rax	#, D.23303
	je	.L240	#,
.L239:
	.loc 1 1513 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1513, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L240:
	.loc 1 1515 0
	movq	cfa_store+8(%rip), %rdx	# cfa_store.offset, D.23304
	movq	-32(%rbp), %rax	# offset, tmp347
	addq	%rdx, %rax	# D.23304, D.23304
	movq	%rax, cfa_store+8(%rip)	# D.23304, cfa_store.offset
	.loc 1 1516 0
	movq	cfa(%rip), %rax	# cfa.reg, D.23303
	cmpq	$7, %rax	#, D.23303
	jne	.L241	#,
	.loc 1 1517 0
	movq	cfa_store+8(%rip), %rax	# cfa_store.offset, D.23304
	movq	%rax, cfa+8(%rip)	# D.23304, cfa.offset
.L241:
	.loc 1 1519 0
	movq	cfa_store+8(%rip), %rax	# cfa_store.offset, D.23304
	negq	%rax	# tmp348
	movq	%rax, -32(%rbp)	# tmp348, offset
	.loc 1 1520 0
	jmp	.L237	#
.L229:
	.loc 1 1527 0
	movq	-8(%rbp), %rax	# dest, tmp349
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movq	16(%rax), %rax	# _169->fld[1].rtx, D.23305
	movzwl	(%rax), %eax	# _170->code, D.23301
	cmpw	$54, %ax	#, D.23301
	je	.L242	#,
	.loc 1 1528 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1528, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L242:
	.loc 1 1529 0
	movq	-8(%rbp), %rax	# dest, tmp350
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movq	16(%rax), %rax	# _172->fld[1].rtx, D.23305
	movq	8(%rax), %rax	# _173->fld[0].rtwint, tmp351
	movq	%rax, -32(%rbp)	# tmp351, offset
	.loc 1 1530 0
	movq	-8(%rbp), %rax	# dest, tmp352
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movzwl	(%rax), %eax	# _175->code, D.23301
	cmpw	$76, %ax	#, D.23301
	jne	.L243	#,
	.loc 1 1531 0
	negq	-32(%rbp)	# offset
.L243:
	.loc 1 1533 0
	movq	cfa_store(%rip), %rdx	# cfa_store.reg, D.23303
	movq	-8(%rbp), %rax	# dest, tmp353
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movq	8(%rax), %rax	# _179->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _180->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	jne	.L244	#,
	.loc 1 1534 0
	movq	cfa_store+8(%rip), %rax	# cfa_store.offset, D.23304
	subq	%rax, -32(%rbp)	# D.23304, offset
	jmp	.L245	#
.L244:
	.loc 1 1535 0
	movq	cfa_temp(%rip), %rdx	# cfa_temp.reg, D.23303
	movq	-8(%rbp), %rax	# dest, tmp354
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movq	8(%rax), %rax	# _186->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _187->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	jne	.L246	#,
	.loc 1 1536 0
	movq	cfa_temp+8(%rip), %rax	# cfa_temp.offset, D.23304
	subq	%rax, -32(%rbp)	# D.23304, offset
	jmp	.L245	#
.L246:
	.loc 1 1538 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1538, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L245:
	.loc 1 1539 0
	jmp	.L237	#
.L227:
	.loc 1 1544 0
	movq	cfa_store(%rip), %rdx	# cfa_store.reg, D.23303
	movq	-8(%rbp), %rax	# dest, tmp355
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _193->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	jne	.L247	#,
	.loc 1 1545 0
	movq	cfa_store+8(%rip), %rax	# cfa_store.offset, D.23304
	negq	%rax	# tmp356
	movq	%rax, -32(%rbp)	# tmp356, offset
	jmp	.L248	#
.L247:
	.loc 1 1546 0
	movq	cfa_temp(%rip), %rdx	# cfa_temp.reg, D.23303
	movq	-8(%rbp), %rax	# dest, tmp357
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _199->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	jne	.L249	#,
	.loc 1 1547 0
	movq	cfa_temp+8(%rip), %rax	# cfa_temp.offset, D.23304
	negq	%rax	# tmp358
	movq	%rax, -32(%rbp)	# tmp358, offset
	jmp	.L248	#
.L249:
	.loc 1 1549 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1549, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L248:
	.loc 1 1550 0
	jmp	.L237	#
.L231:
	.loc 1 1554 0
	movq	cfa_temp(%rip), %rdx	# cfa_temp.reg, D.23303
	movq	-8(%rbp), %rax	# dest, tmp359
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, D.23305
	movq	8(%rax), %rax	# _205->fld[0].rtx, D.23305
	movl	8(%rax), %eax	# _206->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	je	.L250	#,
	.loc 1 1555 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1555, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L250:
	.loc 1 1556 0
	movq	cfa_temp+8(%rip), %rax	# cfa_temp.offset, D.23304
	negq	%rax	# tmp360
	movq	%rax, -32(%rbp)	# tmp360, offset
	.loc 1 1557 0
	movq	cfa_temp+8(%rip), %rdx	# cfa_temp.offset, D.23304
	movq	-8(%rbp), %rax	# dest, tmp361
	movzbl	2(%rax), %eax	# dest_16->mode, D.23306
	movzbl	%al, %eax	# D.23306, D.23307
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.23306
	movzbl	%al, %eax	# D.23306, D.23304
	subq	%rax, %rdx	# D.23304, D.23304
	movq	%rdx, %rax	# D.23304, D.23304
	movq	%rax, cfa_temp+8(%rip)	# D.23304, cfa_temp.offset
	.loc 1 1558 0
	jmp	.L237	#
.L226:
	.loc 1 1561 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1561, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L237:
	.loc 1 1564 0
	movq	-16(%rbp), %rax	# src, tmp363
	movl	8(%rax), %eax	# src_15->fld[0].rtuint, D.23302
	cmpl	$7, %eax	#, D.23302
	je	.L251	#,
	.loc 1 1565 0
	movq	-16(%rbp), %rax	# src, tmp364
	movl	8(%rax), %eax	# src_15->fld[0].rtuint, D.23302
	cmpl	$6, %eax	#, D.23302
	je	.L251	#,
	.loc 1 1566 0
	movq	-16(%rbp), %rax	# src, tmp365
	movl	8(%rax), %eax	# src_15->fld[0].rtuint, D.23302
	movl	%eax, %edx	# D.23302, D.23303
	movq	cfa(%rip), %rax	# cfa.reg, D.23303
	cmpq	%rax, %rdx	# D.23303, D.23303
	jne	.L251	#,
	.loc 1 1570 0
	movq	cfa+8(%rip), %rax	# cfa.offset, D.23304
	testq	%rax, %rax	# D.23304
	jne	.L252	#,
	.loc 1 1575 0
	movq	-64(%rbp), %rax	# label, tmp366
	movl	$cfa, %esi	#,
	movq	%rax, %rdi	# tmp366,
	call	def_cfa_1	#
	.loc 1 1576 0
	movq	global_rtl+16(%rip), %rcx	# global_rtl, D.23305
	movq	-32(%rbp), %rdx	# offset, tmp367
	movq	-64(%rbp), %rax	# label, tmp368
	movq	%rcx, %rsi	# D.23305,
	movq	%rax, %rdi	# tmp368,
	call	queue_reg_save	#
	.loc 1 1577 0
	jmp	.L179	#
.L252:
.LBB9:
	.loc 1 1583 0
	movq	-8(%rbp), %rax	# dest, tmp369
	movq	8(%rax), %rax	# dest_16->fld[0].rtx, tmp370
	movq	%rax, -24(%rbp)	# tmp370, x
	.loc 1 1585 0
	movq	-24(%rbp), %rax	# x, tmp371
	movzwl	(%rax), %eax	# x_224->code, D.23301
	cmpw	$61, %ax	#, D.23301
	je	.L253	#,
	.loc 1 1586 0
	movq	-24(%rbp), %rax	# x, tmp372
	movq	8(%rax), %rax	# x_224->fld[0].rtx, tmp373
	movq	%rax, -24(%rbp)	# tmp373, x
.L253:
	.loc 1 1587 0
	movq	-24(%rbp), %rax	# x, tmp374
	movzwl	(%rax), %eax	# x_10->code, D.23301
	cmpw	$61, %ax	#, D.23301
	je	.L254	#,
	.loc 1 1588 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1588, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L254:
	.loc 1 1590 0
	movq	-24(%rbp), %rax	# x, tmp375
	movl	8(%rax), %eax	# x_10->fld[0].rtuint, D.23302
	movl	%eax, %eax	# D.23302, D.23303
	movq	%rax, cfa(%rip)	# D.23303, cfa.reg
	.loc 1 1591 0
	movq	-32(%rbp), %rax	# offset, tmp376
	movq	%rax, cfa+16(%rip)	# tmp376, cfa.base_offset
	.loc 1 1592 0
	movl	$1, cfa+24(%rip)	#, cfa.indirect
	.loc 1 1593 0
	movq	-64(%rbp), %rax	# label, tmp377
	movl	$cfa, %esi	#,
	movq	%rax, %rdi	# tmp377,
	call	def_cfa_1	#
	.loc 1 1594 0
	jmp	.L179	#
.L251:
.LBE9:
	.loc 1 1598 0
	movq	-64(%rbp), %rax	# label, tmp378
	movl	$cfa, %esi	#,
	movq	%rax, %rdi	# tmp378,
	call	def_cfa_1	#
	.loc 1 1599 0
	movq	-32(%rbp), %rdx	# offset, tmp379
	movq	-16(%rbp), %rcx	# src, tmp380
	movq	-64(%rbp), %rax	# label, tmp381
	movq	%rcx, %rsi	# tmp380,
	movq	%rax, %rdi	# tmp381,
	call	queue_reg_save	#
	.loc 1 1600 0
	jmp	.L179	#
.L255:
	.loc 1 1603 0
	movl	$__FUNCTION__.14060, %edx	#,
	movl	$1603, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L179:
	.loc 1 1605 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE28:
	.size	dwarf2out_frame_debug_expr, .-dwarf2out_frame_debug_expr
	.globl	dwarf2out_frame_debug
	.type	dwarf2out_frame_debug, @function
dwarf2out_frame_debug:
.LFB29:
	.loc 1 1614 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	.loc 1 1618 0
	cmpq	$0, -24(%rbp)	#, insn
	jne	.L259	#,
	.loc 1 1621 0
	call	flush_queued_reg_saves	#
	.loc 1 1624 0
	movl	$cfa, %edi	#,
	call	lookup_cfa	#
	.loc 1 1625 0
	movq	cfa(%rip), %rdx	# cfa.reg, D.23310
	movl	target_flags(%rip), %eax	# target_flags, target_flags.48
	andl	$33554432, %eax	#, D.23311
	testl	%eax, %eax	# D.23311
	je	.L260	#,
	.loc 1 1625 0 is_stmt 0 discriminator 1
	movl	dbx64_register_map+28(%rip), %eax	# dbx64_register_map, D.23311
	cltq
	jmp	.L261	#
.L260:
	.loc 1 1625 0 discriminator 2
	movl	svr4_dbx_register_map+28(%rip), %eax	# svr4_dbx_register_map, D.23311
	cltq
.L261:
	.loc 1 1625 0 discriminator 3
	cmpq	%rax, %rdx	# iftmp.47, D.23310
	je	.L262	#,
	.loc 1 1626 0 is_stmt 1
	movl	$__FUNCTION__.14094, %edx	#,
	movl	$1626, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L262:
	.loc 1 1628 0
	movq	$7, cfa(%rip)	#, cfa.reg
	.loc 1 1629 0
	movq	cfa(%rip), %rax	# cfa, tmp73
	movq	%rax, cfa_store(%rip)	# tmp73, cfa_store
	movq	cfa+8(%rip), %rax	# cfa, tmp74
	movq	%rax, cfa_store+8(%rip)	# tmp74, cfa_store
	movq	cfa+16(%rip), %rax	# cfa, tmp75
	movq	%rax, cfa_store+16(%rip)	# tmp75, cfa_store
	movq	cfa+24(%rip), %rax	# cfa, tmp76
	movq	%rax, cfa_store+24(%rip)	# tmp76, cfa_store
	.loc 1 1630 0
	movq	$-1, cfa_temp(%rip)	#, cfa_temp.reg
	.loc 1 1631 0
	movq	$0, cfa_temp+8(%rip)	#, cfa_temp.offset
	.loc 1 1632 0
	jmp	.L258	#
.L259:
	.loc 1 1635 0
	movq	-24(%rbp), %rax	# insn, tmp77
	movzwl	(%rax), %eax	# insn_3(D)->code, D.23312
	cmpw	$32, %ax	#, D.23312
	jne	.L264	#,
	.loc 1 1635 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# insn, tmp78
	movq	%rax, %rdi	# tmp78,
	call	clobbers_queued_reg_save	#
	testb	%al, %al	# D.23313
	je	.L265	#,
.L264:
	.loc 1 1636 0 is_stmt 1
	call	flush_queued_reg_saves	#
.L265:
	.loc 1 1638 0
	movq	-24(%rbp), %rax	# insn, tmp79
	movzbl	3(%rax), %eax	# *insn_3(D), D.23314
	andl	$-128, %eax	#, D.23314
	testb	%al, %al	# D.23314
	jne	.L266	#,
	.loc 1 1640 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.49
	andl	$4096, %eax	#, D.23311
	testl	%eax, %eax	# D.23311
	jne	.L267	#,
	.loc 1 1641 0
	movq	-24(%rbp), %rax	# insn, tmp80
	movq	%rax, %rdi	# tmp80,
	call	dwarf2out_stack_adjust	#
	.loc 1 1643 0
	jmp	.L258	#
.L267:
	jmp	.L258	#
.L266:
	.loc 1 1646 0
	call	dwarf2out_cfi_label	#
	movq	%rax, -16(%rbp)	# tmp81, label
	.loc 1 1647 0
	movq	-24(%rbp), %rax	# insn, tmp82
	movl	$0, %edx	#,
	movl	$21, %esi	#,
	movq	%rax, %rdi	# tmp82,
	call	find_reg_note	#
	movq	%rax, -8(%rbp)	# tmp83, src
	.loc 1 1648 0
	cmpq	$0, -8(%rbp)	#, src
	je	.L268	#,
	.loc 1 1649 0
	movq	-8(%rbp), %rax	# src, tmp84
	movq	8(%rax), %rax	# src_18->fld[0].rtx, tmp85
	movq	%rax, -24(%rbp)	# tmp85, insn
	jmp	.L269	#
.L268:
	.loc 1 1651 0
	movq	-24(%rbp), %rax	# insn, tmp86
	movq	32(%rax), %rax	# insn_3(D)->fld[3].rtx, tmp87
	movq	%rax, -24(%rbp)	# tmp87, insn
.L269:
	.loc 1 1653 0
	movq	-16(%rbp), %rdx	# label, tmp88
	movq	-24(%rbp), %rax	# insn, tmp89
	movq	%rdx, %rsi	# tmp88,
	movq	%rax, %rdi	# tmp89,
	call	dwarf2out_frame_debug_expr	#
.L258:
	.loc 1 1654 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE29:
	.size	dwarf2out_frame_debug, .-dwarf2out_frame_debug
	.section	.rodata
.LC34:
	.string	"DW_CFA_advance_loc 0x%lx"
.LC35:
	.string	"DW_CFA_offset, column 0x%lx"
.LC36:
	.string	"DW_CFA_restore, column 0x%lx"
.LC37:
	.string	"%s"
	.text
	.type	output_cfi, @function
output_cfi:
.LFB30:
	.loc 1 1663 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# cfi, cfi
	movq	%rsi, -16(%rbp)	# fde, fde
	movl	%edx, -20(%rbp)	# for_eh, for_eh
	.loc 1 1664 0
	movq	-8(%rbp), %rax	# cfi, tmp122
	movl	8(%rax), %eax	# cfi_4(D)->dw_cfi_opc, D.23315
	cmpl	$64, %eax	#, D.23315
	jne	.L271	#,
	.loc 1 1665 0
	movq	-8(%rbp), %rax	# cfi, tmp123
	movq	16(%rax), %rdx	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_offset, D.23316
	movq	-8(%rbp), %rax	# cfi, tmp124
	movl	8(%rax), %eax	# cfi_4(D)->dw_cfi_opc, D.23315
	.loc 1 1666 0
	movl	%eax, %ecx	# D.23315, D.23316
	movq	-8(%rbp), %rax	# cfi, tmp125
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_offset, D.23316
	andl	$63, %eax	#, D.23316
	orq	%rcx, %rax	# D.23316, D.23316
	.loc 1 1665 0
	movq	%rdx, %rcx	# D.23316,
	movl	$.LC34, %edx	#,
	movq	%rax, %rsi	# D.23317,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	jmp	.L270	#
.L271:
	.loc 1 1669 0
	movq	-8(%rbp), %rax	# cfi, tmp126
	movl	8(%rax), %eax	# cfi_4(D)->dw_cfi_opc, D.23315
	cmpl	$128, %eax	#, D.23315
	jne	.L273	#,
	.loc 1 1671 0
	movq	-8(%rbp), %rax	# cfi, tmp127
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_reg_num, D.23317
	movq	-8(%rbp), %rdx	# cfi, tmp128
	movl	8(%rdx), %edx	# cfi_4(D)->dw_cfi_opc, D.23315
	movl	%edx, %ecx	# D.23315, D.23317
	.loc 1 1672 0
	movq	-8(%rbp), %rdx	# cfi, tmp129
	movq	16(%rdx), %rdx	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_reg_num, D.23317
	andl	$63, %edx	#, D.23317
	.loc 1 1671 0
	orq	%rdx, %rcx	# D.23317, D.23317
	movq	%rcx, %rsi	# D.23317, D.23317
	movq	%rax, %rcx	# D.23317,
	movl	$.LC35, %edx	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 1675 0
	movq	-8(%rbp), %rax	# cfi, tmp130
	movq	24(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd2.dw_cfi_offset, D.23316
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23317,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	jmp	.L270	#
.L273:
	.loc 1 1677 0
	movq	-8(%rbp), %rax	# cfi, tmp131
	movl	8(%rax), %eax	# cfi_4(D)->dw_cfi_opc, D.23315
	cmpl	$192, %eax	#, D.23315
	jne	.L274	#,
	.loc 1 1678 0
	movq	-8(%rbp), %rax	# cfi, tmp132
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_reg_num, D.23317
	movq	-8(%rbp), %rdx	# cfi, tmp133
	movl	8(%rdx), %edx	# cfi_4(D)->dw_cfi_opc, D.23315
	movl	%edx, %ecx	# D.23315, D.23317
	.loc 1 1679 0
	movq	-8(%rbp), %rdx	# cfi, tmp134
	movq	16(%rdx), %rdx	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_reg_num, D.23317
	andl	$63, %edx	#, D.23317
	.loc 1 1678 0
	orq	%rdx, %rcx	# D.23317, D.23317
	movq	%rcx, %rsi	# D.23317, D.23317
	movq	%rax, %rcx	# D.23317,
	movl	$.LC36, %edx	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	jmp	.L270	#
.L274:
	.loc 1 1685 0
	movq	-8(%rbp), %rax	# cfi, tmp135
	movl	8(%rax), %eax	# cfi_4(D)->dw_cfi_opc, D.23315
	.loc 1 1684 0
	movl	%eax, %edi	# D.23315,
	call	dwarf_cfi_name	#
	movq	%rax, %rdx	#, D.23318
	movq	-8(%rbp), %rax	# cfi, tmp136
	movl	8(%rax), %eax	# cfi_4(D)->dw_cfi_opc, D.23315
	movl	%eax, %eax	# D.23315, D.23317
	movq	%rdx, %rcx	# D.23318,
	movl	$.LC37, %edx	#,
	movq	%rax, %rsi	# D.23317,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 1687 0
	movq	-8(%rbp), %rax	# cfi, tmp137
	movl	8(%rax), %eax	# cfi_4(D)->dw_cfi_opc, D.23315
	cmpl	$47, %eax	#, D.23315
	ja	.L299	#,
	movl	%eax, %eax	# D.23315, tmp138
	movq	.L277(,%rax,8), %rax	#, tmp139
	jmp	*%rax	# tmp139
	.section	.rodata
	.align 8
	.align 4
.L277:
	.quad	.L299
	.quad	.L276
	.quad	.L278
	.quad	.L279
	.quad	.L280
	.quad	.L281
	.quad	.L282
	.quad	.L282
	.quad	.L282
	.quad	.L283
	.quad	.L299
	.quad	.L299
	.quad	.L281
	.quad	.L282
	.quad	.L284
	.quad	.L285
	.quad	.L285
	.quad	.L286
	.quad	.L286
	.quad	.L287
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L288
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L299
	.quad	.L284
	.quad	.L290
	.text
.L276:
	.loc 1 1690 0
	cmpl	$0, -20(%rbp)	#, for_eh
	je	.L291	#,
	.loc 1 1691 0
	movq	-8(%rbp), %rax	# cfi, tmp140
	movq	16(%rax), %rdx	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_addr, D.23318
	.loc 1 1693 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.51
	andl	$33554432, %eax	#, D.23319
	.loc 1 1691 0
	testl	%eax, %eax	# D.23319
	je	.L292	#,
	.loc 1 1691 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.50
	jmp	.L293	#
.L292:
	.loc 1 1691 0 discriminator 2
	movl	$4, %eax	#, iftmp.50
.L293:
	.loc 1 1691 0 discriminator 3
	movl	%eax, %esi	# iftmp.50,
	movl	$68, %edi	#,
	call	gen_rtx_fmt_s	#
	movq	%rax, %rcx	#, D.23320
	.loc 1 1692 0 is_stmt 1 discriminator 3
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.53
	.loc 1 1691 0 discriminator 3
	testl	%eax, %eax	# flag_pic.53
	je	.L294	#,
	.loc 1 1691 0 is_stmt 0 discriminator 4
	movl	$27, %eax	#, iftmp.52
	jmp	.L295	#
.L294:
	.loc 1 1691 0 discriminator 5
	movl	$0, %eax	#, iftmp.52
.L295:
	.loc 1 1691 0 discriminator 1
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.23320,
	movl	%eax, %edi	# iftmp.52,
	movl	$0, %eax	#,
	call	dw2_asm_output_encoded_addr_rtx	#
	.loc 1 1698 0 is_stmt 1 discriminator 1
	jmp	.L270	#
.L291:
	.loc 1 1696 0
	movq	-8(%rbp), %rax	# cfi, tmp141
	movq	16(%rax), %rcx	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_addr, D.23318
	movl	target_flags(%rip), %eax	# target_flags, target_flags.55
	andl	$33554432, %eax	#, D.23319
	testl	%eax, %eax	# D.23319
	je	.L297	#,
	.loc 1 1696 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.54
	jmp	.L298	#
.L297:
	.loc 1 1696 0 discriminator 2
	movl	$4, %eax	#, iftmp.54
.L298:
	.loc 1 1696 0 discriminator 3
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.23318,
	movl	%eax, %edi	# iftmp.54,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
	.loc 1 1698 0 is_stmt 1 discriminator 3
	jmp	.L270	#
.L278:
	.loc 1 1701 0
	movq	-16(%rbp), %rax	# fde, tmp142
	movq	8(%rax), %rdx	# fde_49(D)->dw_fde_current_label, D.23318
	movq	-8(%rbp), %rax	# cfi, tmp143
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_addr, D.23318
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# D.23318,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 1703 0
	movq	-8(%rbp), %rax	# cfi, tmp144
	movq	16(%rax), %rdx	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_addr, D.23318
	movq	-16(%rbp), %rax	# fde, tmp145
	movq	%rdx, 8(%rax)	# D.23318, fde_49(D)->dw_fde_current_label
	.loc 1 1704 0
	jmp	.L270	#
.L279:
	.loc 1 1707 0
	movq	-16(%rbp), %rax	# fde, tmp146
	movq	8(%rax), %rdx	# fde_49(D)->dw_fde_current_label, D.23318
	movq	-8(%rbp), %rax	# cfi, tmp147
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_addr, D.23318
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# D.23318,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 1709 0
	movq	-8(%rbp), %rax	# cfi, tmp148
	movq	16(%rax), %rdx	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_addr, D.23318
	movq	-16(%rbp), %rax	# fde, tmp149
	movq	%rdx, 8(%rax)	# D.23318, fde_49(D)->dw_fde_current_label
	.loc 1 1710 0
	jmp	.L270	#
.L280:
	.loc 1 1713 0
	movq	-16(%rbp), %rax	# fde, tmp150
	movq	8(%rax), %rdx	# fde_49(D)->dw_fde_current_label, D.23318
	movq	-8(%rbp), %rax	# cfi, tmp151
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_addr, D.23318
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# D.23318,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 1715 0
	movq	-8(%rbp), %rax	# cfi, tmp152
	movq	16(%rax), %rdx	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_addr, D.23318
	movq	-16(%rbp), %rax	# fde, tmp153
	movq	%rdx, 8(%rax)	# D.23318, fde_49(D)->dw_fde_current_label
	.loc 1 1716 0
	jmp	.L270	#
.L288:
	.loc 1 1719 0
	movq	-16(%rbp), %rax	# fde, tmp154
	movq	8(%rax), %rdx	# fde_49(D)->dw_fde_current_label, D.23318
	movq	-8(%rbp), %rax	# cfi, tmp155
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_addr, D.23318
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# D.23318,
	movl	$8, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 1721 0
	movq	-8(%rbp), %rax	# cfi, tmp156
	movq	16(%rax), %rdx	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_addr, D.23318
	movq	-16(%rbp), %rax	# fde, tmp157
	movq	%rdx, 8(%rax)	# D.23318, fde_49(D)->dw_fde_current_label
	.loc 1 1722 0
	jmp	.L270	#
.L281:
	.loc 1 1726 0
	movq	-8(%rbp), %rax	# cfi, tmp158
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_reg_num, D.23317
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23317,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 1728 0
	movq	-8(%rbp), %rax	# cfi, tmp159
	movq	24(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd2.dw_cfi_offset, D.23316
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23317,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 1729 0
	jmp	.L270	#
.L286:
	.loc 1 1733 0
	movq	-8(%rbp), %rax	# cfi, tmp160
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_reg_num, D.23317
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23317,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 1735 0
	movq	-8(%rbp), %rax	# cfi, tmp161
	movq	24(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd2.dw_cfi_offset, D.23316
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23316,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_sleb128	#
	.loc 1 1736 0
	jmp	.L270	#
.L282:
	.loc 1 1742 0
	movq	-8(%rbp), %rax	# cfi, tmp162
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_reg_num, D.23317
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23317,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 1744 0
	jmp	.L270	#
.L283:
	.loc 1 1747 0
	movq	-8(%rbp), %rax	# cfi, tmp163
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_reg_num, D.23317
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23317,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 1749 0
	movq	-8(%rbp), %rax	# cfi, tmp164
	movq	24(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd2.dw_cfi_reg_num, D.23317
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23317,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 1751 0
	jmp	.L270	#
.L284:
	.loc 1 1755 0
	movq	-8(%rbp), %rax	# cfi, tmp165
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_offset, D.23316
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23317,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 1756 0
	jmp	.L270	#
.L287:
	.loc 1 1759 0
	movq	-8(%rbp), %rax	# cfi, tmp166
	movq	16(%rax), %rax	# cfi_4(D)->dw_cfi_oprnd1.dw_cfi_offset, D.23316
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23316,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_sleb128	#
	.loc 1 1760 0
	jmp	.L270	#
.L285:
	.loc 1 1767 0
	movq	-8(%rbp), %rax	# cfi, tmp167
	movq	%rax, %rdi	# tmp167,
	call	output_cfa_loc	#
	.loc 1 1768 0
	jmp	.L270	#
.L290:
	.loc 1 1772 0
	movl	$__FUNCTION__.14122, %edx	#,
	movl	$1772, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L299:
	.loc 1 1775 0
	nop
.L270:
	.loc 1 1778 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE30:
	.size	output_cfi, .-output_cfi
	.section	.rodata
.LC38:
	.string	".debug_frame"
.LC39:
	.string	"Lframe"
.LC40:
	.string	"LSCIE"
.LC41:
	.string	"LECIE"
	.align 8
.LC42:
	.string	"Length of Common Information Entry"
.LC43:
	.string	"CIE Identifier Tag"
.LC44:
	.string	"CIE Version"
.LC45:
	.string	"CIE Augmentation"
.LC46:
	.string	"CIE Code Alignment Factor"
.LC47:
	.string	"CIE Data Alignment Factor"
.LC48:
	.string	"CIE RA Column"
.LC49:
	.string	"Augmentation size"
.LC50:
	.string	"Personality (%s)"
.LC51:
	.string	"LSDA Encoding (%s)"
.LC52:
	.string	"FDE Encoding (%s)"
.LC53:
	.string	"\t.align %d\n"
.LC54:
	.string	"LSFDE"
.LC55:
	.string	".%s%u:\n"
.LC56:
	.string	"LASFDE"
.LC57:
	.string	"LEFDE"
.LC58:
	.string	"FDE Length"
.LC59:
	.string	"FDE CIE offset"
.LC60:
	.string	"FDE initial location"
.LC61:
	.string	"FDE address range"
.LC62:
	.string	"LLSDA"
.LC63:
	.string	"Language Specific Data Area"
	.align 8
.LC64:
	.string	"Language Specific Data Area (none)"
	.text
	.type	output_call_frame_info, @function
output_call_frame_info:
.LFB31:
	.loc 1 1787 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$208, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movl	%edi, -212(%rbp)	# for_eh, for_eh
	.loc 1 1787 0
	movq	%fs:40, %rax	#, tmp316
	movq	%rax, -24(%rbp)	# tmp316, D.23335
	xorl	%eax, %eax	# tmp316
	.loc 1 1792 0
	movl	$0, -196(%rbp)	#, any_lsda_needed
	.loc 1 1795 0
	movl	$0, -188(%rbp)	#, fde_encoding
	.loc 1 1796 0
	movl	$0, -184(%rbp)	#, per_encoding
	.loc 1 1797 0
	movl	$0, -180(%rbp)	#, lsda_encoding
	.loc 1 1801 0
	cmpl	$0, -212(%rbp)	#, for_eh
	je	.L301	#,
.LBB10:
	.loc 1 1803 0
	movl	flag_asynchronous_unwind_tables(%rip), %eax	# flag_asynchronous_unwind_tables, tmp222
	movl	%eax, -176(%rbp)	# tmp222, any_eh_needed
	.loc 1 1805 0
	movl	$0, -200(%rbp)	#, i
	jmp	.L302	#
.L305:
	.loc 1 1806 0
	movq	fde_table(%rip), %rcx	# fde_table, fde_table.56
	movl	-200(%rbp), %edx	# i, D.23325
	movq	%rdx, %rax	# D.23325, tmp223
	salq	$2, %rax	#, tmp223
	addq	%rdx, %rax	# D.23325, tmp223
	salq	$3, %rax	#, tmp224
	addq	%rcx, %rax	# fde_table.56, D.23326
	movzbl	36(%rax), %eax	# *_51, D.23327
	andl	$2, %eax	#, D.23327
	testb	%al, %al	# D.23327
	je	.L303	#,
	.loc 1 1807 0
	movl	$1, -196(%rbp)	#, any_lsda_needed
	movl	-196(%rbp), %eax	# any_lsda_needed, tmp225
	movl	%eax, -176(%rbp)	# tmp225, any_eh_needed
	jmp	.L304	#
.L303:
	.loc 1 1808 0
	movq	fde_table(%rip), %rcx	# fde_table, fde_table.57
	movl	-200(%rbp), %edx	# i, D.23325
	movq	%rdx, %rax	# D.23325, tmp226
	salq	$2, %rax	#, tmp226
	addq	%rdx, %rax	# D.23325, tmp226
	salq	$3, %rax	#, tmp227
	addq	%rcx, %rax	# fde_table.57, D.23326
	movzbl	36(%rax), %eax	# *_59, D.23327
	andl	$1, %eax	#, D.23327
	testb	%al, %al	# D.23327
	jne	.L304	#,
	.loc 1 1809 0
	movl	$1, -176(%rbp)	#, any_eh_needed
.L304:
	.loc 1 1805 0
	addl	$1, -200(%rbp)	#, i
.L302:
	.loc 1 1805 0 is_stmt 0 discriminator 1
	movl	fde_table_in_use(%rip), %eax	# fde_table_in_use, fde_table_in_use.58
	cmpl	%eax, -200(%rbp)	# fde_table_in_use.58, i
	jb	.L305	#,
	.loc 1 1811 0 is_stmt 1
	cmpl	$0, -176(%rbp)	#, any_eh_needed
	jne	.L301	#,
	.loc 1 1812 0
	jmp	.L300	#
.L301:
.LBE10:
	.loc 1 1816 0
	movl	flag_debug_asm(%rip), %eax	# flag_debug_asm, flag_debug_asm.59
	testl	%eax, %eax	# flag_debug_asm.59
	je	.L307	#,
	.loc 1 1817 0
	call	app_enable	#
.L307:
	.loc 1 1819 0
	cmpl	$0, -212(%rbp)	#, for_eh
	je	.L308	#,
	.loc 1 1820 0
	movq	targetm+144(%rip), %rax	# targetm.asm_out.eh_frame_section, D.23328
	call	*%rax	# D.23328
	jmp	.L309	#
.L308:
	.loc 1 1822 0
	movl	$1024, %esi	#,
	movl	$.LC38, %edi	#,
	call	named_section_flags	#
.L309:
	.loc 1 1824 0
	movl	-212(%rbp), %edx	# for_eh, for_eh.60
	leaq	-48(%rbp), %rax	#, tmp228
	movl	%edx, %ecx	# for_eh.60,
	movl	$.LC39, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp228,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 1825 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.61
	leaq	-48(%rbp), %rdx	#, tmp229
	movq	%rdx, %rsi	# tmp229,
	movq	%rax, %rdi	# asm_out_file.61,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.62
	movq	%rax, %rcx	# asm_out_file.62,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 1828 0
	movl	-212(%rbp), %edx	# for_eh, for_eh.63
	leaq	-112(%rbp), %rax	#, tmp230
	movl	%edx, %ecx	# for_eh.63,
	movl	$.LC40, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp230,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 1829 0
	movl	-212(%rbp), %edx	# for_eh, for_eh.64
	leaq	-80(%rbp), %rax	#, tmp231
	movl	%edx, %ecx	# for_eh.64,
	movl	$.LC41, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp231,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 1830 0
	leaq	-112(%rbp), %rdx	#, tmp232
	leaq	-80(%rbp), %rax	#, tmp233
	movl	$.LC42, %ecx	#,
	movq	%rax, %rsi	# tmp233,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 1832 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.65
	leaq	-112(%rbp), %rdx	#, tmp234
	movq	%rdx, %rsi	# tmp234,
	movq	%rax, %rdi	# asm_out_file.65,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.66
	movq	%rax, %rcx	# asm_out_file.66,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 1836 0
	cmpl	$0, -212(%rbp)	#, for_eh
	je	.L310	#,
	.loc 1 1836 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.67
	jmp	.L311	#
.L310:
	.loc 1 1836 0 discriminator 2
	movl	$4294967295, %eax	#, iftmp.67
.L311:
	.loc 1 1836 0 discriminator 3
	movl	$.LC43, %edx	#,
	movq	%rax, %rsi	# iftmp.67,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 1840 0 is_stmt 1 discriminator 3
	movl	$.LC44, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 1842 0 discriminator 3
	movb	$0, -128(%rbp)	#, augmentation
	.loc 1 1843 0 discriminator 3
	movl	$0, -192(%rbp)	#, augmentation_size
	.loc 1 1844 0 discriminator 3
	cmpl	$0, -212(%rbp)	#, for_eh
	je	.L312	#,
.LBB11:
	.loc 1 1858 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.69
	testl	%eax, %eax	# flag_pic.69
	je	.L313	#,
	.loc 1 1858 0 is_stmt 0 discriminator 1
	movl	$27, %eax	#, iftmp.68
	jmp	.L314	#
.L313:
	.loc 1 1858 0 discriminator 2
	movl	$0, %eax	#, iftmp.68
.L314:
	.loc 1 1858 0 discriminator 3
	movl	%eax, -188(%rbp)	# iftmp.68, fde_encoding
	.loc 1 1859 0 is_stmt 1 discriminator 3
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.71
	testl	%eax, %eax	# flag_pic.71
	je	.L315	#,
	.loc 1 1859 0 is_stmt 0 discriminator 1
	movl	$155, %eax	#, iftmp.70
	jmp	.L316	#
.L315:
	.loc 1 1859 0 discriminator 2
	movl	$0, %eax	#, iftmp.70
.L316:
	.loc 1 1859 0 discriminator 3
	movl	%eax, -184(%rbp)	# iftmp.70, per_encoding
	.loc 1 1860 0 is_stmt 1 discriminator 3
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.73
	testl	%eax, %eax	# flag_pic.73
	je	.L317	#,
	.loc 1 1860 0 is_stmt 0 discriminator 1
	movl	$27, %eax	#, iftmp.72
	jmp	.L318	#
.L317:
	.loc 1 1860 0 discriminator 2
	movl	$0, %eax	#, iftmp.72
.L318:
	.loc 1 1860 0 discriminator 3
	movl	%eax, -180(%rbp)	# iftmp.72, lsda_encoding
	.loc 1 1862 0 is_stmt 1 discriminator 3
	leaq	-128(%rbp), %rax	#, tmp235
	addq	$1, %rax	#, tmp236
	movq	%rax, -144(%rbp)	# tmp236, p
	.loc 1 1863 0 discriminator 3
	movq	libfunc_table+152(%rip), %rax	# libfunc_table, D.23329
	testq	%rax, %rax	# D.23329
	je	.L319	#,
	.loc 1 1865 0
	movq	-144(%rbp), %rax	# p, p.74
	leaq	1(%rax), %rdx	#, tmp237
	movq	%rdx, -144(%rbp)	# tmp237, p
	movb	$80, (%rax)	#, *p.74_90
	.loc 1 1866 0
	movl	-184(%rbp), %eax	# per_encoding, tmp238
	movl	%eax, %edi	# tmp238,
	call	size_of_encoded_value	#
	addl	$1, %eax	#, D.23330
	addl	%eax, -192(%rbp)	# D.23330, augmentation_size
.L319:
	.loc 1 1868 0
	cmpl	$0, -196(%rbp)	#, any_lsda_needed
	je	.L320	#,
	.loc 1 1870 0
	movq	-144(%rbp), %rax	# p, p.75
	leaq	1(%rax), %rdx	#, tmp239
	movq	%rdx, -144(%rbp)	# tmp239, p
	movb	$76, (%rax)	#, *p.75_95
	.loc 1 1871 0
	addl	$1, -192(%rbp)	#, augmentation_size
.L320:
	.loc 1 1873 0
	cmpl	$0, -188(%rbp)	#, fde_encoding
	je	.L321	#,
	.loc 1 1875 0
	movq	-144(%rbp), %rax	# p, p.76
	leaq	1(%rax), %rdx	#, tmp240
	movq	%rdx, -144(%rbp)	# tmp240, p
	movb	$82, (%rax)	#, *p.76_98
	.loc 1 1876 0
	addl	$1, -192(%rbp)	#, augmentation_size
.L321:
	.loc 1 1878 0
	leaq	-128(%rbp), %rax	#, tmp241
	addq	$1, %rax	#, tmp242
	cmpq	%rax, -144(%rbp)	# tmp242, p
	jbe	.L322	#,
	.loc 1 1880 0
	movb	$122, -128(%rbp)	#, augmentation
	.loc 1 1881 0
	movq	-144(%rbp), %rax	# p, tmp243
	movb	$0, (%rax)	#, *p_19
.L322:
	.loc 1 1885 0
	movq	libfunc_table+152(%rip), %rax	# libfunc_table, D.23329
	testq	%rax, %rax	# D.23329
	je	.L312	#,
	.loc 1 1885 0 is_stmt 0 discriminator 1
	cmpl	$80, -184(%rbp)	#, per_encoding
	jne	.L312	#,
.LBB12:
	.loc 1 1890 0 is_stmt 1
	leaq	-128(%rbp), %rax	#, tmp244
	movq	%rax, %rdi	# tmp244,
	call	strlen	#
	.loc 1 1887 0
	movl	%eax, %ebx	# D.23325, D.23331
	.loc 1 1891 0
	movl	$1, %edi	#,
	call	size_of_uleb128	#
	.loc 1 1887 0
	addl	%eax, %ebx	# D.23331, D.23331
	.loc 1 1892 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.78
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L323	#,
	.loc 1 1892 0 is_stmt 0 discriminator 1
	movq	$-8, %rax	#, iftmp.77
	jmp	.L324	#
.L323:
	.loc 1 1892 0 discriminator 2
	movq	$-4, %rax	#, iftmp.77
.L324:
	.loc 1 1892 0 discriminator 3
	movq	%rax, %rdi	# iftmp.77,
	call	size_of_sleb128	#
	.loc 1 1887 0 is_stmt 1 discriminator 3
	addl	%ebx, %eax	# D.23331, D.23331
	addl	$13, %eax	#, D.23331
	movl	%eax, -168(%rbp)	# D.23331, offset
	.loc 1 1896 0 discriminator 3
	movl	-168(%rbp), %eax	# offset, tmp245
	negl	%eax	# D.23330
	movl	%eax, %edx	# D.23330, D.23330
	movl	target_flags(%rip), %eax	# target_flags, target_flags.80
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L325	#,
	.loc 1 1896 0 is_stmt 0 discriminator 1
	movl	$7, %eax	#, iftmp.79
	jmp	.L326	#
.L325:
	.loc 1 1896 0 discriminator 2
	movl	$3, %eax	#, iftmp.79
.L326:
	.loc 1 1896 0 discriminator 3
	andl	%edx, %eax	# D.23330, tmp246
	movl	%eax, -164(%rbp)	# tmp246, pad
	.loc 1 1898 0 is_stmt 1 discriminator 3
	movl	-164(%rbp), %eax	# pad, tmp247
	addl	%eax, -192(%rbp)	# tmp247, augmentation_size
	.loc 1 1902 0 discriminator 3
	movl	-192(%rbp), %eax	# augmentation_size, tmp248
	cltq
	movq	%rax, %rdi	# D.23325,
	call	size_of_uleb128	#
	cmpl	$1, %eax	#, D.23330
	je	.L312	#,
	.loc 1 1903 0
	movl	$__FUNCTION__.14146, %edx	#,
	movl	$1903, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L312:
.LBE12:
.LBE11:
	.loc 1 1907 0
	leaq	-128(%rbp), %rax	#, tmp249
	movl	$.LC45, %edx	#,
	movq	$-1, %rsi	#,
	movq	%rax, %rdi	# tmp249,
	movl	$0, %eax	#,
	call	dw2_asm_output_nstring	#
	.loc 1 1908 0
	movl	$.LC46, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 1909 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.82
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L327	#,
	.loc 1 1909 0 is_stmt 0 discriminator 1
	movq	$-8, %rax	#, iftmp.81
	jmp	.L328	#
.L327:
	.loc 1 1909 0 discriminator 2
	movq	$-4, %rax	#, iftmp.81
.L328:
	.loc 1 1909 0 discriminator 3
	movl	$.LC47, %esi	#,
	movq	%rax, %rdi	# iftmp.81,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_sleb128	#
	.loc 1 1911 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.84
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L329	#,
	.loc 1 1911 0 is_stmt 0 discriminator 1
	movl	$16, %eax	#, iftmp.83
	jmp	.L330	#
.L329:
	.loc 1 1911 0 discriminator 2
	movl	$8, %eax	#, iftmp.83
.L330:
	.loc 1 1911 0 discriminator 3
	movl	$.LC48, %edx	#,
	movq	%rax, %rsi	# iftmp.83,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 1913 0 is_stmt 1 discriminator 3
	movzbl	-128(%rbp), %eax	# augmentation, D.23332
	testb	%al, %al	# D.23332
	je	.L331	#,
	.loc 1 1915 0
	movl	-192(%rbp), %eax	# augmentation_size, tmp250
	cltq
	movl	$.LC49, %esi	#,
	movq	%rax, %rdi	# D.23325,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 1916 0
	movq	libfunc_table+152(%rip), %rax	# libfunc_table, D.23329
	testq	%rax, %rax	# D.23329
	je	.L332	#,
	.loc 1 1918 0
	movl	-184(%rbp), %eax	# per_encoding, tmp251
	movl	%eax, %edi	# tmp251,
	call	eh_data_format_name	#
	movq	%rax, %rdx	#, D.23333
	movl	-184(%rbp), %eax	# per_encoding, tmp252
	cltq
	movq	%rdx, %rcx	# D.23333,
	movl	$.LC50, %edx	#,
	movq	%rax, %rsi	# D.23325,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 1920 0
	movq	libfunc_table+152(%rip), %rcx	# libfunc_table, D.23329
	movl	-184(%rbp), %eax	# per_encoding, tmp253
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.23329,
	movl	%eax, %edi	# tmp253,
	movl	$0, %eax	#,
	call	dw2_asm_output_encoded_addr_rtx	#
.L332:
	.loc 1 1924 0
	cmpl	$0, -196(%rbp)	#, any_lsda_needed
	je	.L333	#,
	.loc 1 1925 0
	movl	-180(%rbp), %eax	# lsda_encoding, tmp254
	movl	%eax, %edi	# tmp254,
	call	eh_data_format_name	#
	movq	%rax, %rdx	#, D.23333
	movl	-180(%rbp), %eax	# lsda_encoding, tmp255
	cltq
	movq	%rdx, %rcx	# D.23333,
	movl	$.LC51, %edx	#,
	movq	%rax, %rsi	# D.23325,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.L333:
	.loc 1 1928 0
	cmpl	$0, -188(%rbp)	#, fde_encoding
	je	.L331	#,
	.loc 1 1929 0
	movl	-188(%rbp), %eax	# fde_encoding, tmp256
	movl	%eax, %edi	# tmp256,
	call	eh_data_format_name	#
	movq	%rax, %rdx	#, D.23333
	movl	-188(%rbp), %eax	# fde_encoding, tmp257
	cltq
	movq	%rdx, %rcx	# D.23333,
	movl	$.LC52, %edx	#,
	movq	%rax, %rsi	# D.23325,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.L331:
	.loc 1 1933 0
	movq	cie_cfi_head(%rip), %rax	# cie_cfi_head, tmp258
	movq	%rax, -152(%rbp)	# tmp258, cfi
	jmp	.L334	#
.L335:
	.loc 1 1934 0 discriminator 2
	movl	-212(%rbp), %edx	# for_eh, tmp259
	movq	-152(%rbp), %rax	# cfi, tmp260
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp260,
	call	output_cfi	#
	.loc 1 1933 0 discriminator 2
	movq	-152(%rbp), %rax	# cfi, tmp261
	movq	(%rax), %rax	# cfi_3->dw_cfi_next, tmp262
	movq	%rax, -152(%rbp)	# tmp262, cfi
.L334:
	.loc 1 1933 0 is_stmt 0 discriminator 1
	cmpq	$0, -152(%rbp)	#, cfi
	jne	.L335	#,
	.loc 1 1937 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.86
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L336	#,
	.loc 1 1937 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.85
	jmp	.L337	#
.L336:
	.loc 1 1937 0 discriminator 2
	movl	$4, %eax	#, iftmp.85
.L337:
	.loc 1 1937 0 discriminator 3
	movq	%rax, %rdi	# iftmp.85,
	call	floor_log2_wide	#
	testl	%eax, %eax	# D.23330
	je	.L338	#,
	.loc 1 1937 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.88
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L339	#,
	movl	$8, %eax	#, iftmp.87
	jmp	.L340	#
.L339:
	.loc 1 1937 0 discriminator 2
	movl	$4, %eax	#, iftmp.87
.L340:
	.loc 1 1937 0 discriminator 3
	movq	%rax, %rdi	# iftmp.87,
	call	floor_log2_wide	#
	movl	$1, %edx	#, tmp263
	movl	%eax, %ecx	# D.23330, tmp319
	sall	%cl, %edx	# tmp319, D.23330
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.89
	movl	$.LC53, %esi	#,
	movq	%rax, %rdi	# asm_out_file.89,
	movl	$0, %eax	#,
	call	fprintf	#
.L338:
	.loc 1 1939 0 is_stmt 1
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.90
	leaq	-80(%rbp), %rdx	#, tmp264
	movq	%rdx, %rsi	# tmp264,
	movq	%rax, %rdi	# asm_out_file.90,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.91
	movq	%rax, %rcx	# asm_out_file.91,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 1942 0
	movl	$0, -200(%rbp)	#, i
	jmp	.L341	#
.L375:
	.loc 1 1944 0
	movq	fde_table(%rip), %rcx	# fde_table, fde_table.92
	movl	-200(%rbp), %edx	# i, D.23325
	movq	%rdx, %rax	# D.23325, tmp265
	salq	$2, %rax	#, tmp265
	addq	%rdx, %rax	# D.23325, tmp265
	salq	$3, %rax	#, tmp266
	addq	%rcx, %rax	# fde_table.92, tmp267
	movq	%rax, -136(%rbp)	# tmp267, fde
	.loc 1 1947 0
	movl	flag_asynchronous_unwind_tables(%rip), %eax	# flag_asynchronous_unwind_tables, flag_asynchronous_unwind_tables.93
	testl	%eax, %eax	# flag_asynchronous_unwind_tables.93
	jne	.L342	#,
	.loc 1 1947 0 is_stmt 0 discriminator 1
	cmpl	$0, -212(%rbp)	#, for_eh
	je	.L342	#,
	movq	-136(%rbp), %rax	# fde, tmp268
	movzbl	36(%rax), %eax	# *fde_164, D.23327
	andl	$1, %eax	#, D.23327
	testb	%al, %al	# D.23327
	je	.L342	#,
	.loc 1 1948 0 is_stmt 1
	movq	-136(%rbp), %rax	# fde, tmp269
	movzbl	36(%rax), %eax	# *fde_164, D.23327
	andl	$2, %eax	#, D.23327
	testb	%al, %al	# D.23327
	jne	.L342	#,
	.loc 1 1949 0
	jmp	.L343	#
.L342:
	.loc 1 1951 0
	movl	-200(%rbp), %eax	# i, tmp270
	leal	(%rax,%rax), %edx	#, D.23334
	movl	-212(%rbp), %eax	# for_eh, for_eh.94
	addl	%eax, %edx	# for_eh.94, D.23334
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.95
	movl	%edx, %ecx	# D.23334,
	movl	$.LC54, %edx	#,
	movl	$.LC55, %esi	#,
	movq	%rax, %rdi	# asm_out_file.95,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 1952 0
	movl	-200(%rbp), %eax	# i, tmp271
	leal	(%rax,%rax), %edx	#, D.23334
	movl	-212(%rbp), %eax	# for_eh, for_eh.96
	addl	%eax, %edx	# for_eh.96, D.23334
	leaq	-112(%rbp), %rax	#, tmp272
	movl	%edx, %ecx	# D.23334,
	movl	$.LC56, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp272,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 1953 0
	movl	-200(%rbp), %eax	# i, tmp273
	leal	(%rax,%rax), %edx	#, D.23334
	movl	-212(%rbp), %eax	# for_eh, for_eh.97
	addl	%eax, %edx	# for_eh.97, D.23334
	leaq	-80(%rbp), %rax	#, tmp274
	movl	%edx, %ecx	# D.23334,
	movl	$.LC57, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp274,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 1954 0
	leaq	-112(%rbp), %rdx	#, tmp275
	leaq	-80(%rbp), %rax	#, tmp276
	movl	$.LC58, %ecx	#,
	movq	%rax, %rsi	# tmp276,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 1956 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.98
	leaq	-112(%rbp), %rdx	#, tmp277
	movq	%rdx, %rsi	# tmp277,
	movq	%rax, %rdi	# asm_out_file.98,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.99
	movq	%rax, %rcx	# asm_out_file.99,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 1958 0
	cmpl	$0, -212(%rbp)	#, for_eh
	je	.L344	#,
	.loc 1 1959 0
	leaq	-48(%rbp), %rdx	#, tmp278
	leaq	-112(%rbp), %rax	#, tmp279
	movl	$.LC59, %ecx	#,
	movq	%rax, %rsi	# tmp279,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	jmp	.L345	#
.L344:
	.loc 1 1961 0
	leaq	-48(%rbp), %rax	#, tmp280
	movl	$.LC59, %edx	#,
	movq	%rax, %rsi	# tmp280,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_offset	#
.L345:
	.loc 1 1964 0
	cmpl	$0, -212(%rbp)	#, for_eh
	je	.L346	#,
	.loc 1 1966 0
	movq	-136(%rbp), %rax	# fde, tmp281
	movq	(%rax), %rdx	# fde_164->dw_fde_begin, D.23333
	.loc 1 1967 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.101
	andl	$33554432, %eax	#, D.23330
	.loc 1 1966 0
	testl	%eax, %eax	# D.23330
	je	.L347	#,
	.loc 1 1966 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.100
	jmp	.L348	#
.L347:
	.loc 1 1966 0 discriminator 2
	movl	$4, %eax	#, iftmp.100
.L348:
	.loc 1 1966 0 discriminator 1
	movl	%eax, %esi	# iftmp.100,
	movl	$68, %edi	#,
	call	gen_rtx_fmt_s	#
	movq	%rax, %rcx	#, D.23329
	movl	-188(%rbp), %eax	# fde_encoding, tmp282
	movl	$.LC60, %edx	#,
	movq	%rcx, %rsi	# D.23329,
	movl	%eax, %edi	# tmp282,
	movl	$0, %eax	#,
	call	dw2_asm_output_encoded_addr_rtx	#
	.loc 1 1969 0 is_stmt 1 discriminator 1
	movq	-136(%rbp), %rax	# fde, tmp283
	movq	(%rax), %r12	# fde_164->dw_fde_begin, D.23333
	movq	-136(%rbp), %rax	# fde, tmp284
	movq	16(%rax), %rbx	# fde_164->dw_fde_end, D.23333
	movl	-188(%rbp), %eax	# fde_encoding, tmp285
	movl	%eax, %edi	# tmp285,
	call	size_of_encoded_value	#
	movl	$.LC61, %ecx	#,
	movq	%r12, %rdx	# D.23333,
	movq	%rbx, %rsi	# D.23333,
	movl	%eax, %edi	# D.23330,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	jmp	.L349	#
.L346:
	.loc 1 1975 0
	movq	-136(%rbp), %rax	# fde, tmp286
	movq	(%rax), %rcx	# fde_164->dw_fde_begin, D.23333
	movl	target_flags(%rip), %eax	# target_flags, target_flags.103
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L350	#,
	.loc 1 1975 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.102
	jmp	.L351	#
.L350:
	.loc 1 1975 0 discriminator 2
	movl	$4, %eax	#, iftmp.102
.L351:
	.loc 1 1975 0 discriminator 3
	movl	$.LC60, %edx	#,
	movq	%rcx, %rsi	# D.23333,
	movl	%eax, %edi	# iftmp.102,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
	.loc 1 1977 0 is_stmt 1 discriminator 3
	movq	-136(%rbp), %rax	# fde, tmp287
	movq	(%rax), %rdx	# fde_164->dw_fde_begin, D.23333
	movq	-136(%rbp), %rax	# fde, tmp288
	movq	16(%rax), %rsi	# fde_164->dw_fde_end, D.23333
	movl	target_flags(%rip), %eax	# target_flags, target_flags.105
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L352	#,
	.loc 1 1977 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.104
	jmp	.L353	#
.L352:
	.loc 1 1977 0 discriminator 2
	movl	$4, %eax	#, iftmp.104
.L353:
	.loc 1 1977 0 discriminator 3
	movl	$.LC61, %ecx	#,
	movl	%eax, %edi	# iftmp.104,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
.L349:
	.loc 1 1982 0 is_stmt 1
	movzbl	-128(%rbp), %eax	# augmentation, D.23332
	testb	%al, %al	# D.23332
	je	.L354	#,
	.loc 1 1984 0
	cmpl	$0, -196(%rbp)	#, any_lsda_needed
	je	.L355	#,
.LBB13:
	.loc 1 1986 0
	movl	-180(%rbp), %eax	# lsda_encoding, tmp289
	movl	%eax, %edi	# tmp289,
	call	size_of_encoded_value	#
	movl	%eax, -172(%rbp)	# tmp290, size
	.loc 1 1988 0
	cmpl	$80, -180(%rbp)	#, lsda_encoding
	jne	.L356	#,
.LBB14:
	.loc 1 1992 0
	movl	-188(%rbp), %eax	# fde_encoding, tmp291
	movl	%eax, %edi	# tmp291,
	call	size_of_encoded_value	#
	addl	$4, %eax	#, D.23330
	addl	%eax, %eax	# D.23330
	.loc 1 1990 0
	addl	$1, %eax	#, tmp292
	movl	%eax, -160(%rbp)	# tmp292, offset
	.loc 1 1994 0
	movl	-160(%rbp), %eax	# offset, tmp293
	negl	%eax	# D.23330
	movl	%eax, %edx	# D.23330, D.23330
	movl	target_flags(%rip), %eax	# target_flags, target_flags.107
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L357	#,
	.loc 1 1994 0 is_stmt 0 discriminator 1
	movl	$7, %eax	#, iftmp.106
	jmp	.L358	#
.L357:
	.loc 1 1994 0 discriminator 2
	movl	$3, %eax	#, iftmp.106
.L358:
	.loc 1 1994 0 discriminator 3
	andl	%edx, %eax	# D.23330, tmp294
	movl	%eax, -156(%rbp)	# tmp294, pad
	.loc 1 1996 0 is_stmt 1 discriminator 3
	movl	-156(%rbp), %eax	# pad, tmp295
	addl	%eax, -172(%rbp)	# tmp295, size
	.loc 1 1997 0 discriminator 3
	movl	-172(%rbp), %eax	# size, tmp296
	cltq
	movq	%rax, %rdi	# D.23325,
	call	size_of_uleb128	#
	cmpl	$1, %eax	#, D.23330
	je	.L356	#,
	.loc 1 1998 0
	movl	$__FUNCTION__.14146, %edx	#,
	movl	$1998, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L356:
.LBE14:
	.loc 1 2001 0
	movl	-172(%rbp), %eax	# size, tmp297
	cltq
	movl	$.LC49, %esi	#,
	movq	%rax, %rdi	# D.23325,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 2003 0
	movq	-136(%rbp), %rax	# fde, tmp298
	movzbl	36(%rax), %eax	# *fde_164, D.23327
	andl	$2, %eax	#, D.23327
	testb	%al, %al	# D.23327
	je	.L359	#,
	.loc 1 2005 0
	movq	-136(%rbp), %rax	# fde, tmp299
	movl	32(%rax), %edx	# fde_164->funcdef_number, D.23334
	leaq	-112(%rbp), %rax	#, tmp300
	movl	%edx, %ecx	# D.23334,
	movl	$.LC62, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp300,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 2008 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.109
	andl	$33554432, %eax	#, D.23330
	.loc 1 2007 0
	testl	%eax, %eax	# D.23330
	je	.L360	#,
	.loc 1 2007 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.108
	jmp	.L361	#
.L360:
	.loc 1 2007 0 discriminator 2
	movl	$4, %eax	#, iftmp.108
.L361:
	.loc 1 2007 0 discriminator 1
	leaq	-112(%rbp), %rdx	#, tmp301
	movl	%eax, %esi	# iftmp.108,
	movl	$68, %edi	#,
	call	gen_rtx_fmt_s	#
	movq	%rax, %rcx	#, D.23329
	movl	-180(%rbp), %eax	# lsda_encoding, tmp302
	movl	$.LC63, %edx	#,
	movq	%rcx, %rsi	# D.23329,
	movl	%eax, %edi	# tmp302,
	movl	$0, %eax	#,
	call	dw2_asm_output_encoded_addr_rtx	#
	jmp	.L354	#
.L359:
	.loc 1 2013 0 is_stmt 1
	cmpl	$80, -180(%rbp)	#, lsda_encoding
	jne	.L363	#,
	.loc 1 2014 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.111
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L364	#,
	.loc 1 2014 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.110
	jmp	.L365	#
.L364:
	.loc 1 2014 0 discriminator 2
	movl	$4, %eax	#, iftmp.110
.L365:
	.loc 1 2014 0 discriminator 3
	movq	%rax, %rdi	# iftmp.110,
	call	floor_log2_wide	#
	testl	%eax, %eax	# D.23330
	je	.L363	#,
	.loc 1 2014 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.113
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L366	#,
	movl	$8, %eax	#, iftmp.112
	jmp	.L367	#
.L366:
	.loc 1 2014 0 discriminator 2
	movl	$4, %eax	#, iftmp.112
.L367:
	.loc 1 2014 0 discriminator 3
	movq	%rax, %rdi	# iftmp.112,
	call	floor_log2_wide	#
	movl	$1, %edx	#, tmp303
	movl	%eax, %ecx	# D.23330, tmp321
	sall	%cl, %edx	# tmp321, D.23330
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.114
	movl	$.LC53, %esi	#,
	movq	%rax, %rdi	# asm_out_file.114,
	movl	$0, %eax	#,
	call	fprintf	#
.L363:
	.loc 1 2016 0 is_stmt 1
	movl	-180(%rbp), %eax	# lsda_encoding, tmp304
	movl	%eax, %edi	# tmp304,
	call	size_of_encoded_value	#
	movl	$.LC64, %edx	#,
	movl	$0, %esi	#,
	movl	%eax, %edi	# D.23330,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.LBE13:
	jmp	.L354	#
.L355:
	.loc 1 2021 0
	movl	$.LC49, %esi	#,
	movl	$0, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
.L354:
	.loc 1 2026 0
	movq	-136(%rbp), %rax	# fde, tmp305
	movq	(%rax), %rdx	# fde_164->dw_fde_begin, D.23333
	movq	-136(%rbp), %rax	# fde, tmp306
	movq	%rdx, 8(%rax)	# D.23333, fde_164->dw_fde_current_label
	.loc 1 2027 0
	movq	-136(%rbp), %rax	# fde, tmp307
	movq	24(%rax), %rax	# fde_164->dw_fde_cfi, tmp308
	movq	%rax, -152(%rbp)	# tmp308, cfi
	jmp	.L368	#
.L369:
	.loc 1 2028 0 discriminator 2
	movl	-212(%rbp), %edx	# for_eh, tmp309
	movq	-136(%rbp), %rcx	# fde, tmp310
	movq	-152(%rbp), %rax	# cfi, tmp311
	movq	%rcx, %rsi	# tmp310,
	movq	%rax, %rdi	# tmp311,
	call	output_cfi	#
	.loc 1 2027 0 discriminator 2
	movq	-152(%rbp), %rax	# cfi, tmp312
	movq	(%rax), %rax	# cfi_4->dw_cfi_next, tmp313
	movq	%rax, -152(%rbp)	# tmp313, cfi
.L368:
	.loc 1 2027 0 is_stmt 0 discriminator 1
	cmpq	$0, -152(%rbp)	#, cfi
	jne	.L369	#,
	.loc 1 2031 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.116
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L370	#,
	.loc 1 2031 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.115
	jmp	.L371	#
.L370:
	.loc 1 2031 0 discriminator 2
	movl	$4, %eax	#, iftmp.115
.L371:
	.loc 1 2031 0 discriminator 3
	movq	%rax, %rdi	# iftmp.115,
	call	floor_log2_wide	#
	testl	%eax, %eax	# D.23330
	je	.L372	#,
	.loc 1 2031 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.118
	andl	$33554432, %eax	#, D.23330
	testl	%eax, %eax	# D.23330
	je	.L373	#,
	movl	$8, %eax	#, iftmp.117
	jmp	.L374	#
.L373:
	.loc 1 2031 0 discriminator 2
	movl	$4, %eax	#, iftmp.117
.L374:
	.loc 1 2031 0 discriminator 3
	movq	%rax, %rdi	# iftmp.117,
	call	floor_log2_wide	#
	movl	$1, %edx	#, tmp314
	movl	%eax, %ecx	# D.23330, tmp322
	sall	%cl, %edx	# tmp322, D.23330
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.119
	movl	$.LC53, %esi	#,
	movq	%rax, %rdi	# asm_out_file.119,
	movl	$0, %eax	#,
	call	fprintf	#
.L372:
	.loc 1 2033 0 is_stmt 1
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.120
	leaq	-80(%rbp), %rdx	#, tmp315
	movq	%rdx, %rsi	# tmp315,
	movq	%rax, %rdi	# asm_out_file.120,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.121
	movq	%rax, %rcx	# asm_out_file.121,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
.L343:
	.loc 1 1942 0
	addl	$1, -200(%rbp)	#, i
.L341:
	.loc 1 1942 0 is_stmt 0 discriminator 1
	movl	fde_table_in_use(%rip), %eax	# fde_table_in_use, fde_table_in_use.122
	cmpl	%eax, -200(%rbp)	# fde_table_in_use.122, i
	jb	.L375	#,
	.loc 1 2047 0 is_stmt 1
	movl	flag_debug_asm(%rip), %eax	# flag_debug_asm, flag_debug_asm.123
	testl	%eax, %eax	# flag_debug_asm.123
	je	.L300	#,
	.loc 1 2048 0
	call	app_disable	#
.L300:
	.loc 1 2049 0
	movq	-24(%rbp), %rax	# D.23335, tmp317
	xorq	%fs:40, %rax	#, tmp317
	je	.L378	#,
	call	__stack_chk_fail	#
.L378:
	addq	$208, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE31:
	.size	output_call_frame_info, .-output_call_frame_info
	.section	.rodata
.LC65:
	.string	"LFB"
	.text
	.globl	dwarf2out_begin_prologue
	.type	dwarf2out_begin_prologue, @function
dwarf2out_begin_prologue:
.LFB32:
	.loc 1 2058 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movl	%edi, -68(%rbp)	# line, line
	movq	%rsi, -80(%rbp)	# file, file
	.loc 1 2058 0
	movq	%fs:40, %rax	#, tmp123
	movq	%rax, -8(%rbp)	# tmp123, D.23370
	xorl	%eax, %eax	# tmp123
	.loc 1 2062 0
	movq	$0, current_function_func_begin_label(%rip)	#, current_function_func_begin_label
	.loc 1 2072 0
	call	dwarf2out_do_frame	#
	testl	%eax, %eax	# D.23365
	je	.L379	#,
	.loc 1 2076 0
	movl	current_funcdef_number(%rip), %eax	# current_funcdef_number, current_funcdef_number.124
	addl	$1, %eax	#, current_funcdef_number.125
	movl	%eax, current_funcdef_number(%rip)	# current_funcdef_number.125, current_funcdef_number
	.loc 1 2077 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.126
	movq	%rax, %rdi	# current_function_decl.126,
	call	function_section	#
	.loc 1 2078 0
	movl	current_funcdef_number(%rip), %edx	# current_funcdef_number, current_funcdef_number.127
	leaq	-48(%rbp), %rax	#, tmp91
	movl	%edx, %ecx	# current_funcdef_number.127,
	movl	$.LC65, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp91,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 2080 0
	movl	current_funcdef_number(%rip), %edx	# current_funcdef_number, current_funcdef_number.128
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.129
	movl	%edx, %ecx	# current_funcdef_number.128,
	movl	$.LC65, %edx	#,
	movl	$.LC55, %esi	#,
	movq	%rax, %rdi	# asm_out_file.129,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 2082 0
	leaq	-48(%rbp), %rax	#, tmp92
	movq	%rax, %rdi	# tmp92,
	call	get_identifier	#
	movq	%rax, current_function_func_begin_label(%rip)	# current_function_func_begin_label.130, current_function_func_begin_label
	.loc 1 2091 0
	movl	fde_table_in_use(%rip), %edx	# fde_table_in_use, fde_table_in_use.131
	movl	fde_table_allocated(%rip), %eax	# fde_table_allocated, fde_table_allocated.132
	cmpl	%eax, %edx	# fde_table_allocated.132, fde_table_in_use.131
	jne	.L382	#,
	.loc 1 2093 0
	movl	fde_table_allocated(%rip), %eax	# fde_table_allocated, fde_table_allocated.133
	addl	$256, %eax	#, fde_table_allocated.134
	movl	%eax, fde_table_allocated(%rip)	# fde_table_allocated.134, fde_table_allocated
	.loc 1 2095 0
	movl	fde_table_allocated(%rip), %eax	# fde_table_allocated, fde_table_allocated.135
	movl	%eax, %edx	# fde_table_allocated.135, D.23366
	movq	%rdx, %rax	# D.23366, tmp93
	salq	$2, %rax	#, tmp93
	addq	%rdx, %rax	# D.23366, tmp93
	salq	$3, %rax	#, tmp94
	movq	%rax, %rdx	# tmp93, D.23366
	movq	fde_table(%rip), %rax	# fde_table, fde_table.136
	movq	%rdx, %rsi	# D.23366,
	movq	%rax, %rdi	# fde_table.136,
	call	xrealloc	#
	movq	%rax, fde_table(%rip)	# fde_table.137, fde_table
.L382:
	.loc 1 2100 0
	movl	fde_table_in_use(%rip), %eax	# fde_table_in_use, fde_table_in_use.138
	movl	%eax, current_funcdef_fde(%rip)	# fde_table_in_use.138, current_funcdef_fde
	.loc 1 2103 0
	movq	fde_table(%rip), %rcx	# fde_table, fde_table.139
	movl	fde_table_in_use(%rip), %eax	# fde_table_in_use, fde_table_in_use.140
	leal	1(%rax), %edx	#, fde_table_in_use.142
	movl	%edx, fde_table_in_use(%rip)	# fde_table_in_use.142, fde_table_in_use
	movl	%eax, %edx	# fde_table_in_use.141, D.23366
	movq	%rdx, %rax	# D.23366, tmp95
	salq	$2, %rax	#, tmp95
	addq	%rdx, %rax	# D.23366, tmp95
	salq	$3, %rax	#, tmp96
	addq	%rcx, %rax	# fde_table.139, tmp97
	movq	%rax, -56(%rbp)	# tmp97, fde
	.loc 1 2104 0
	leaq	-48(%rbp), %rax	#, tmp98
	movq	%rax, %rdi	# tmp98,
	call	xstrdup	#
	movq	%rax, %rdx	# tmp99, D.23367
	movq	-56(%rbp), %rax	# fde, tmp100
	movq	%rdx, (%rax)	# D.23367, fde_25->dw_fde_begin
	.loc 1 2105 0
	movq	-56(%rbp), %rax	# fde, tmp101
	movq	$0, 8(%rax)	#, fde_25->dw_fde_current_label
	.loc 1 2106 0
	movq	-56(%rbp), %rax	# fde, tmp102
	movq	$0, 16(%rax)	#, fde_25->dw_fde_end
	.loc 1 2107 0
	movq	-56(%rbp), %rax	# fde, tmp103
	movq	$0, 24(%rax)	#, fde_25->dw_fde_cfi
	.loc 1 2108 0
	movl	current_funcdef_number(%rip), %edx	# current_funcdef_number, current_funcdef_number.143
	movq	-56(%rbp), %rax	# fde, tmp104
	movl	%edx, 32(%rax)	# current_funcdef_number.143, fde_25->funcdef_number
	.loc 1 2109 0
	movl	current_function_nothrow(%rip), %eax	# current_function_nothrow, current_function_nothrow.144
	andl	$1, %eax	#, D.23369
	movl	%eax, %edx	# D.23369, D.23369
	movq	-56(%rbp), %rax	# fde, tmp105
	movl	%edx, %ecx	# D.23369, tmp107
	andl	$1, %ecx	#, tmp107
	movzbl	36(%rax), %edx	# fde_25->nothrow, tmp108
	andl	$-2, %edx	#, tmp109
	orl	%ecx, %edx	# tmp107, tmp110
	movb	%dl, 36(%rax)	# tmp110, fde_25->nothrow
	.loc 1 2110 0
	movq	cfun(%rip), %rax	# cfun, cfun.145
	movzbl	426(%rax), %eax	# *cfun.145_31, tmp113
	shrb	$6, %al	#, D.23369
	andl	$1, %eax	#, D.23369
	movq	-56(%rbp), %rdx	# fde, tmp114
	andl	$1, %eax	#, tmp116
	leal	(%rax,%rax), %ecx	#, tmp117
	movzbl	36(%rdx), %eax	# fde_25->uses_eh_lsda, tmp118
	andl	$-3, %eax	#, tmp119
	orl	%ecx, %eax	# tmp117, tmp120
	movb	%al, 36(%rdx)	# tmp120, fde_25->uses_eh_lsda
	.loc 1 2112 0
	movq	$0, old_args_size(%rip)	#, old_args_size
	movq	old_args_size(%rip), %rax	# old_args_size, old_args_size.146
	movq	%rax, args_size(%rip)	# old_args_size.146, args_size
	.loc 1 2117 0
	cmpq	$0, -80(%rbp)	#, file
	je	.L379	#,
	.loc 1 2118 0
	movq	-80(%rbp), %rdx	# file, tmp121
	movl	-68(%rbp), %eax	# line, tmp122
	movq	%rdx, %rsi	# tmp121,
	movl	%eax, %edi	# tmp122,
	call	dwarf2out_source_line	#
.L379:
	.loc 1 2120 0
	movq	-8(%rbp), %rax	# D.23370, tmp124
	xorq	%fs:40, %rax	#, tmp124
	je	.L384	#,
	call	__stack_chk_fail	#
.L384:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE32:
	.size	dwarf2out_begin_prologue, .-dwarf2out_begin_prologue
	.section	.rodata
.LC66:
	.string	"LFE"
	.text
	.globl	dwarf2out_end_epilogue
	.type	dwarf2out_end_epilogue, @function
dwarf2out_end_epilogue:
.LFB33:
	.loc 1 2128 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	.loc 1 2128 0
	movq	%fs:40, %rax	#, tmp76
	movq	%rax, -8(%rbp)	# tmp76, D.23375
	xorl	%eax, %eax	# tmp76
	.loc 1 2134 0
	movl	current_funcdef_number(%rip), %edx	# current_funcdef_number, current_funcdef_number.147
	leaq	-48(%rbp), %rax	#, tmp68
	movl	%edx, %ecx	# current_funcdef_number.147,
	movl	$.LC66, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp68,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 2135 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.148
	leaq	-48(%rbp), %rdx	#, tmp69
	movq	%rdx, %rsi	# tmp69,
	movq	%rax, %rdi	# asm_out_file.148,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.149
	movq	%rax, %rcx	# asm_out_file.149,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 2136 0
	movq	fde_table(%rip), %rcx	# fde_table, fde_table.150
	movl	fde_table_in_use(%rip), %eax	# fde_table_in_use, fde_table_in_use.151
	subl	$1, %eax	#, D.23372
	movl	%eax, %edx	# D.23372, D.23373
	movq	%rdx, %rax	# D.23373, tmp70
	salq	$2, %rax	#, tmp70
	addq	%rdx, %rax	# D.23373, tmp70
	salq	$3, %rax	#, tmp71
	addq	%rcx, %rax	# fde_table.150, tmp72
	movq	%rax, -56(%rbp)	# tmp72, fde
	.loc 1 2137 0
	leaq	-48(%rbp), %rax	#, tmp73
	movq	%rax, %rdi	# tmp73,
	call	xstrdup	#
	movq	%rax, %rdx	# tmp74, D.23374
	movq	-56(%rbp), %rax	# fde, tmp75
	movq	%rdx, 16(%rax)	# D.23374, fde_9->dw_fde_end
	.loc 1 2138 0
	movq	-8(%rbp), %rax	# D.23375, tmp77
	xorq	%fs:40, %rax	#, tmp77
	je	.L386	#,
	call	__stack_chk_fail	#
.L386:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE33:
	.size	dwarf2out_end_epilogue, .-dwarf2out_end_epilogue
	.globl	dwarf2out_frame_init
	.type	dwarf2out_frame_init, @function
dwarf2out_frame_init:
.LFB34:
	.loc 1 2142 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 2144 0
	movl	$40, %esi	#,
	movl	$256, %edi	#,
	call	xcalloc	#
	movq	%rax, fde_table(%rip)	# fde_table.152, fde_table
	.loc 1 2145 0
	movl	$256, fde_table_allocated(%rip)	#, fde_table_allocated
	.loc 1 2146 0
	movl	$0, fde_table_in_use(%rip)	#, fde_table_in_use
	.loc 1 2153 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.154
	andl	$33554432, %eax	#, D.23377
	testl	%eax, %eax	# D.23377
	je	.L388	#,
	.loc 1 2153 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.153
	jmp	.L389	#
.L388:
	.loc 1 2153 0 discriminator 2
	movl	$4, %eax	#, iftmp.153
.L389:
	.loc 1 2153 0 discriminator 3
	movq	%rax, %rdx	# iftmp.153,
	movl	$7, %esi	#,
	movl	$0, %edi	#,
	call	dwarf2out_def_cfa	#
	.loc 1 2154 0 is_stmt 1 discriminator 3
	movl	$7, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, %rsi	# D.23378,
	movl	$0, %edi	#,
	call	gen_rtx_MEM	#
	movq	%rax, %rdi	# D.23378,
	call	initial_return_save	#
	.loc 1 2156 0 discriminator 3
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE34:
	.size	dwarf2out_frame_init, .-dwarf2out_frame_init
	.globl	dwarf2out_frame_finish
	.type	dwarf2out_frame_finish, @function
dwarf2out_frame_finish:
.LFB35:
	.loc 1 2160 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 2162 0
	movl	write_symbols(%rip), %eax	# write_symbols, write_symbols.155
	cmpl	$4, %eax	#, write_symbols.155
	je	.L391	#,
	.loc 1 2162 0 is_stmt 0 discriminator 1
	movl	write_symbols(%rip), %eax	# write_symbols, write_symbols.156
	cmpl	$7, %eax	#, write_symbols.156
	jne	.L392	#,
.L391:
	.loc 1 2163 0 is_stmt 1
	movl	$0, %edi	#,
	call	output_call_frame_info	#
.L392:
	.loc 1 2165 0
	movl	flag_unwind_tables(%rip), %eax	# flag_unwind_tables, flag_unwind_tables.157
	testl	%eax, %eax	# flag_unwind_tables.157
	jne	.L393	#,
	.loc 1 2165 0 is_stmt 0 discriminator 1
	movl	flag_exceptions(%rip), %eax	# flag_exceptions, flag_exceptions.158
	testl	%eax, %eax	# flag_exceptions.158
	je	.L390	#,
.L393:
	.loc 1 2166 0 is_stmt 1
	movl	$1, %edi	#,
	call	output_call_frame_info	#
.L390:
	.loc 1 2167 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE35:
	.size	dwarf2out_frame_finish, .-dwarf2out_frame_finish
	.section	.rodata
.LC67:
	.string	"DW_OP_addr"
.LC68:
	.string	"DW_OP_deref"
.LC69:
	.string	"DW_OP_const1u"
.LC70:
	.string	"DW_OP_const1s"
.LC71:
	.string	"DW_OP_const2u"
.LC72:
	.string	"DW_OP_const2s"
.LC73:
	.string	"DW_OP_const4u"
.LC74:
	.string	"DW_OP_const4s"
.LC75:
	.string	"DW_OP_const8u"
.LC76:
	.string	"DW_OP_const8s"
.LC77:
	.string	"DW_OP_constu"
.LC78:
	.string	"DW_OP_consts"
.LC79:
	.string	"DW_OP_dup"
.LC80:
	.string	"DW_OP_drop"
.LC81:
	.string	"DW_OP_over"
.LC82:
	.string	"DW_OP_pick"
.LC83:
	.string	"DW_OP_swap"
.LC84:
	.string	"DW_OP_rot"
.LC85:
	.string	"DW_OP_xderef"
.LC86:
	.string	"DW_OP_abs"
.LC87:
	.string	"DW_OP_and"
.LC88:
	.string	"DW_OP_div"
.LC89:
	.string	"DW_OP_minus"
.LC90:
	.string	"DW_OP_mod"
.LC91:
	.string	"DW_OP_mul"
.LC92:
	.string	"DW_OP_neg"
.LC93:
	.string	"DW_OP_not"
.LC94:
	.string	"DW_OP_or"
.LC95:
	.string	"DW_OP_plus"
.LC96:
	.string	"DW_OP_plus_uconst"
.LC97:
	.string	"DW_OP_shl"
.LC98:
	.string	"DW_OP_shr"
.LC99:
	.string	"DW_OP_shra"
.LC100:
	.string	"DW_OP_xor"
.LC101:
	.string	"DW_OP_bra"
.LC102:
	.string	"DW_OP_eq"
.LC103:
	.string	"DW_OP_ge"
.LC104:
	.string	"DW_OP_gt"
.LC105:
	.string	"DW_OP_le"
.LC106:
	.string	"DW_OP_lt"
.LC107:
	.string	"DW_OP_ne"
.LC108:
	.string	"DW_OP_skip"
.LC109:
	.string	"DW_OP_lit0"
.LC110:
	.string	"DW_OP_lit1"
.LC111:
	.string	"DW_OP_lit2"
.LC112:
	.string	"DW_OP_lit3"
.LC113:
	.string	"DW_OP_lit4"
.LC114:
	.string	"DW_OP_lit5"
.LC115:
	.string	"DW_OP_lit6"
.LC116:
	.string	"DW_OP_lit7"
.LC117:
	.string	"DW_OP_lit8"
.LC118:
	.string	"DW_OP_lit9"
.LC119:
	.string	"DW_OP_lit10"
.LC120:
	.string	"DW_OP_lit11"
.LC121:
	.string	"DW_OP_lit12"
.LC122:
	.string	"DW_OP_lit13"
.LC123:
	.string	"DW_OP_lit14"
.LC124:
	.string	"DW_OP_lit15"
.LC125:
	.string	"DW_OP_lit16"
.LC126:
	.string	"DW_OP_lit17"
.LC127:
	.string	"DW_OP_lit18"
.LC128:
	.string	"DW_OP_lit19"
.LC129:
	.string	"DW_OP_lit20"
.LC130:
	.string	"DW_OP_lit21"
.LC131:
	.string	"DW_OP_lit22"
.LC132:
	.string	"DW_OP_lit23"
.LC133:
	.string	"DW_OP_lit24"
.LC134:
	.string	"DW_OP_lit25"
.LC135:
	.string	"DW_OP_lit26"
.LC136:
	.string	"DW_OP_lit27"
.LC137:
	.string	"DW_OP_lit28"
.LC138:
	.string	"DW_OP_lit29"
.LC139:
	.string	"DW_OP_lit30"
.LC140:
	.string	"DW_OP_lit31"
.LC141:
	.string	"DW_OP_reg0"
.LC142:
	.string	"DW_OP_reg1"
.LC143:
	.string	"DW_OP_reg2"
.LC144:
	.string	"DW_OP_reg3"
.LC145:
	.string	"DW_OP_reg4"
.LC146:
	.string	"DW_OP_reg5"
.LC147:
	.string	"DW_OP_reg6"
.LC148:
	.string	"DW_OP_reg7"
.LC149:
	.string	"DW_OP_reg8"
.LC150:
	.string	"DW_OP_reg9"
.LC151:
	.string	"DW_OP_reg10"
.LC152:
	.string	"DW_OP_reg11"
.LC153:
	.string	"DW_OP_reg12"
.LC154:
	.string	"DW_OP_reg13"
.LC155:
	.string	"DW_OP_reg14"
.LC156:
	.string	"DW_OP_reg15"
.LC157:
	.string	"DW_OP_reg16"
.LC158:
	.string	"DW_OP_reg17"
.LC159:
	.string	"DW_OP_reg18"
.LC160:
	.string	"DW_OP_reg19"
.LC161:
	.string	"DW_OP_reg20"
.LC162:
	.string	"DW_OP_reg21"
.LC163:
	.string	"DW_OP_reg22"
.LC164:
	.string	"DW_OP_reg23"
.LC165:
	.string	"DW_OP_reg24"
.LC166:
	.string	"DW_OP_reg25"
.LC167:
	.string	"DW_OP_reg26"
.LC168:
	.string	"DW_OP_reg27"
.LC169:
	.string	"DW_OP_reg28"
.LC170:
	.string	"DW_OP_reg29"
.LC171:
	.string	"DW_OP_reg30"
.LC172:
	.string	"DW_OP_reg31"
.LC173:
	.string	"DW_OP_breg0"
.LC174:
	.string	"DW_OP_breg1"
.LC175:
	.string	"DW_OP_breg2"
.LC176:
	.string	"DW_OP_breg3"
.LC177:
	.string	"DW_OP_breg4"
.LC178:
	.string	"DW_OP_breg5"
.LC179:
	.string	"DW_OP_breg6"
.LC180:
	.string	"DW_OP_breg7"
.LC181:
	.string	"DW_OP_breg8"
.LC182:
	.string	"DW_OP_breg9"
.LC183:
	.string	"DW_OP_breg10"
.LC184:
	.string	"DW_OP_breg11"
.LC185:
	.string	"DW_OP_breg12"
.LC186:
	.string	"DW_OP_breg13"
.LC187:
	.string	"DW_OP_breg14"
.LC188:
	.string	"DW_OP_breg15"
.LC189:
	.string	"DW_OP_breg16"
.LC190:
	.string	"DW_OP_breg17"
.LC191:
	.string	"DW_OP_breg18"
.LC192:
	.string	"DW_OP_breg19"
.LC193:
	.string	"DW_OP_breg20"
.LC194:
	.string	"DW_OP_breg21"
.LC195:
	.string	"DW_OP_breg22"
.LC196:
	.string	"DW_OP_breg23"
.LC197:
	.string	"DW_OP_breg24"
.LC198:
	.string	"DW_OP_breg25"
.LC199:
	.string	"DW_OP_breg26"
.LC200:
	.string	"DW_OP_breg27"
.LC201:
	.string	"DW_OP_breg28"
.LC202:
	.string	"DW_OP_breg29"
.LC203:
	.string	"DW_OP_breg30"
.LC204:
	.string	"DW_OP_breg31"
.LC205:
	.string	"DW_OP_regx"
.LC206:
	.string	"DW_OP_fbreg"
.LC207:
	.string	"DW_OP_bregx"
.LC208:
	.string	"DW_OP_piece"
.LC209:
	.string	"DW_OP_deref_size"
.LC210:
	.string	"DW_OP_xderef_size"
.LC211:
	.string	"DW_OP_nop"
.LC212:
	.string	"OP_<unknown>"
	.text
	.type	dwarf_stack_op_name, @function
dwarf_stack_op_name:
.LFB36:
	.loc 1 2293 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# op, op
	.loc 1 2294 0
	movl	-4(%rbp), %eax	# op, tmp62
	subl	$3, %eax	#, tmp61
	cmpl	$147, %eax	#, tmp61
	ja	.L396	#,
	movl	%eax, %eax	# tmp61, tmp63
	movq	.L398(,%rax,8), %rax	#, tmp64
	jmp	*%rax	# tmp64
	.section	.rodata
	.align 8
	.align 4
.L398:
	.quad	.L397
	.quad	.L396
	.quad	.L396
	.quad	.L399
	.quad	.L396
	.quad	.L400
	.quad	.L401
	.quad	.L402
	.quad	.L403
	.quad	.L404
	.quad	.L405
	.quad	.L406
	.quad	.L407
	.quad	.L408
	.quad	.L409
	.quad	.L410
	.quad	.L411
	.quad	.L412
	.quad	.L413
	.quad	.L414
	.quad	.L415
	.quad	.L416
	.quad	.L417
	.quad	.L418
	.quad	.L419
	.quad	.L420
	.quad	.L421
	.quad	.L422
	.quad	.L423
	.quad	.L424
	.quad	.L425
	.quad	.L426
	.quad	.L427
	.quad	.L428
	.quad	.L429
	.quad	.L430
	.quad	.L431
	.quad	.L432
	.quad	.L433
	.quad	.L434
	.quad	.L435
	.quad	.L436
	.quad	.L437
	.quad	.L438
	.quad	.L439
	.quad	.L440
	.quad	.L441
	.quad	.L442
	.quad	.L443
	.quad	.L444
	.quad	.L445
	.quad	.L446
	.quad	.L447
	.quad	.L448
	.quad	.L449
	.quad	.L450
	.quad	.L451
	.quad	.L452
	.quad	.L453
	.quad	.L454
	.quad	.L455
	.quad	.L456
	.quad	.L457
	.quad	.L458
	.quad	.L459
	.quad	.L460
	.quad	.L461
	.quad	.L462
	.quad	.L463
	.quad	.L464
	.quad	.L465
	.quad	.L466
	.quad	.L467
	.quad	.L468
	.quad	.L469
	.quad	.L470
	.quad	.L471
	.quad	.L472
	.quad	.L473
	.quad	.L474
	.quad	.L475
	.quad	.L476
	.quad	.L477
	.quad	.L478
	.quad	.L479
	.quad	.L480
	.quad	.L481
	.quad	.L482
	.quad	.L483
	.quad	.L484
	.quad	.L485
	.quad	.L486
	.quad	.L487
	.quad	.L488
	.quad	.L489
	.quad	.L490
	.quad	.L491
	.quad	.L492
	.quad	.L493
	.quad	.L494
	.quad	.L495
	.quad	.L496
	.quad	.L497
	.quad	.L498
	.quad	.L499
	.quad	.L500
	.quad	.L501
	.quad	.L502
	.quad	.L503
	.quad	.L504
	.quad	.L505
	.quad	.L506
	.quad	.L507
	.quad	.L508
	.quad	.L509
	.quad	.L510
	.quad	.L511
	.quad	.L512
	.quad	.L513
	.quad	.L514
	.quad	.L515
	.quad	.L516
	.quad	.L517
	.quad	.L518
	.quad	.L519
	.quad	.L520
	.quad	.L521
	.quad	.L522
	.quad	.L523
	.quad	.L524
	.quad	.L525
	.quad	.L526
	.quad	.L527
	.quad	.L528
	.quad	.L529
	.quad	.L530
	.quad	.L531
	.quad	.L532
	.quad	.L533
	.quad	.L534
	.quad	.L535
	.quad	.L536
	.quad	.L537
	.quad	.L538
	.quad	.L539
	.quad	.L540
	.quad	.L541
	.quad	.L542
	.text
.L397:
	.loc 1 2297 0
	movl	$.LC67, %eax	#, D.23379
	jmp	.L543	#
.L399:
	.loc 1 2299 0
	movl	$.LC68, %eax	#, D.23379
	jmp	.L543	#
.L400:
	.loc 1 2301 0
	movl	$.LC69, %eax	#, D.23379
	jmp	.L543	#
.L401:
	.loc 1 2303 0
	movl	$.LC70, %eax	#, D.23379
	jmp	.L543	#
.L402:
	.loc 1 2305 0
	movl	$.LC71, %eax	#, D.23379
	jmp	.L543	#
.L403:
	.loc 1 2307 0
	movl	$.LC72, %eax	#, D.23379
	jmp	.L543	#
.L404:
	.loc 1 2309 0
	movl	$.LC73, %eax	#, D.23379
	jmp	.L543	#
.L405:
	.loc 1 2311 0
	movl	$.LC74, %eax	#, D.23379
	jmp	.L543	#
.L406:
	.loc 1 2313 0
	movl	$.LC75, %eax	#, D.23379
	jmp	.L543	#
.L407:
	.loc 1 2315 0
	movl	$.LC76, %eax	#, D.23379
	jmp	.L543	#
.L408:
	.loc 1 2317 0
	movl	$.LC77, %eax	#, D.23379
	jmp	.L543	#
.L409:
	.loc 1 2319 0
	movl	$.LC78, %eax	#, D.23379
	jmp	.L543	#
.L410:
	.loc 1 2321 0
	movl	$.LC79, %eax	#, D.23379
	jmp	.L543	#
.L411:
	.loc 1 2323 0
	movl	$.LC80, %eax	#, D.23379
	jmp	.L543	#
.L412:
	.loc 1 2325 0
	movl	$.LC81, %eax	#, D.23379
	jmp	.L543	#
.L413:
	.loc 1 2327 0
	movl	$.LC82, %eax	#, D.23379
	jmp	.L543	#
.L414:
	.loc 1 2329 0
	movl	$.LC83, %eax	#, D.23379
	jmp	.L543	#
.L415:
	.loc 1 2331 0
	movl	$.LC84, %eax	#, D.23379
	jmp	.L543	#
.L416:
	.loc 1 2333 0
	movl	$.LC85, %eax	#, D.23379
	jmp	.L543	#
.L417:
	.loc 1 2335 0
	movl	$.LC86, %eax	#, D.23379
	jmp	.L543	#
.L418:
	.loc 1 2337 0
	movl	$.LC87, %eax	#, D.23379
	jmp	.L543	#
.L419:
	.loc 1 2339 0
	movl	$.LC88, %eax	#, D.23379
	jmp	.L543	#
.L420:
	.loc 1 2341 0
	movl	$.LC89, %eax	#, D.23379
	jmp	.L543	#
.L421:
	.loc 1 2343 0
	movl	$.LC90, %eax	#, D.23379
	jmp	.L543	#
.L422:
	.loc 1 2345 0
	movl	$.LC91, %eax	#, D.23379
	jmp	.L543	#
.L423:
	.loc 1 2347 0
	movl	$.LC92, %eax	#, D.23379
	jmp	.L543	#
.L424:
	.loc 1 2349 0
	movl	$.LC93, %eax	#, D.23379
	jmp	.L543	#
.L425:
	.loc 1 2351 0
	movl	$.LC94, %eax	#, D.23379
	jmp	.L543	#
.L426:
	.loc 1 2353 0
	movl	$.LC95, %eax	#, D.23379
	jmp	.L543	#
.L427:
	.loc 1 2355 0
	movl	$.LC96, %eax	#, D.23379
	jmp	.L543	#
.L428:
	.loc 1 2357 0
	movl	$.LC97, %eax	#, D.23379
	jmp	.L543	#
.L429:
	.loc 1 2359 0
	movl	$.LC98, %eax	#, D.23379
	jmp	.L543	#
.L430:
	.loc 1 2361 0
	movl	$.LC99, %eax	#, D.23379
	jmp	.L543	#
.L431:
	.loc 1 2363 0
	movl	$.LC100, %eax	#, D.23379
	jmp	.L543	#
.L432:
	.loc 1 2365 0
	movl	$.LC101, %eax	#, D.23379
	jmp	.L543	#
.L433:
	.loc 1 2367 0
	movl	$.LC102, %eax	#, D.23379
	jmp	.L543	#
.L434:
	.loc 1 2369 0
	movl	$.LC103, %eax	#, D.23379
	jmp	.L543	#
.L435:
	.loc 1 2371 0
	movl	$.LC104, %eax	#, D.23379
	jmp	.L543	#
.L436:
	.loc 1 2373 0
	movl	$.LC105, %eax	#, D.23379
	jmp	.L543	#
.L437:
	.loc 1 2375 0
	movl	$.LC106, %eax	#, D.23379
	jmp	.L543	#
.L438:
	.loc 1 2377 0
	movl	$.LC107, %eax	#, D.23379
	jmp	.L543	#
.L439:
	.loc 1 2379 0
	movl	$.LC108, %eax	#, D.23379
	jmp	.L543	#
.L440:
	.loc 1 2381 0
	movl	$.LC109, %eax	#, D.23379
	jmp	.L543	#
.L441:
	.loc 1 2383 0
	movl	$.LC110, %eax	#, D.23379
	jmp	.L543	#
.L442:
	.loc 1 2385 0
	movl	$.LC111, %eax	#, D.23379
	jmp	.L543	#
.L443:
	.loc 1 2387 0
	movl	$.LC112, %eax	#, D.23379
	jmp	.L543	#
.L444:
	.loc 1 2389 0
	movl	$.LC113, %eax	#, D.23379
	jmp	.L543	#
.L445:
	.loc 1 2391 0
	movl	$.LC114, %eax	#, D.23379
	jmp	.L543	#
.L446:
	.loc 1 2393 0
	movl	$.LC115, %eax	#, D.23379
	jmp	.L543	#
.L447:
	.loc 1 2395 0
	movl	$.LC116, %eax	#, D.23379
	jmp	.L543	#
.L448:
	.loc 1 2397 0
	movl	$.LC117, %eax	#, D.23379
	jmp	.L543	#
.L449:
	.loc 1 2399 0
	movl	$.LC118, %eax	#, D.23379
	jmp	.L543	#
.L450:
	.loc 1 2401 0
	movl	$.LC119, %eax	#, D.23379
	jmp	.L543	#
.L451:
	.loc 1 2403 0
	movl	$.LC120, %eax	#, D.23379
	jmp	.L543	#
.L452:
	.loc 1 2405 0
	movl	$.LC121, %eax	#, D.23379
	jmp	.L543	#
.L453:
	.loc 1 2407 0
	movl	$.LC122, %eax	#, D.23379
	jmp	.L543	#
.L454:
	.loc 1 2409 0
	movl	$.LC123, %eax	#, D.23379
	jmp	.L543	#
.L455:
	.loc 1 2411 0
	movl	$.LC124, %eax	#, D.23379
	jmp	.L543	#
.L456:
	.loc 1 2413 0
	movl	$.LC125, %eax	#, D.23379
	jmp	.L543	#
.L457:
	.loc 1 2415 0
	movl	$.LC126, %eax	#, D.23379
	jmp	.L543	#
.L458:
	.loc 1 2417 0
	movl	$.LC127, %eax	#, D.23379
	jmp	.L543	#
.L459:
	.loc 1 2419 0
	movl	$.LC128, %eax	#, D.23379
	jmp	.L543	#
.L460:
	.loc 1 2421 0
	movl	$.LC129, %eax	#, D.23379
	jmp	.L543	#
.L461:
	.loc 1 2423 0
	movl	$.LC130, %eax	#, D.23379
	jmp	.L543	#
.L462:
	.loc 1 2425 0
	movl	$.LC131, %eax	#, D.23379
	jmp	.L543	#
.L463:
	.loc 1 2427 0
	movl	$.LC132, %eax	#, D.23379
	jmp	.L543	#
.L464:
	.loc 1 2429 0
	movl	$.LC133, %eax	#, D.23379
	jmp	.L543	#
.L465:
	.loc 1 2431 0
	movl	$.LC134, %eax	#, D.23379
	jmp	.L543	#
.L466:
	.loc 1 2433 0
	movl	$.LC135, %eax	#, D.23379
	jmp	.L543	#
.L467:
	.loc 1 2435 0
	movl	$.LC136, %eax	#, D.23379
	jmp	.L543	#
.L468:
	.loc 1 2437 0
	movl	$.LC137, %eax	#, D.23379
	jmp	.L543	#
.L469:
	.loc 1 2439 0
	movl	$.LC138, %eax	#, D.23379
	jmp	.L543	#
.L470:
	.loc 1 2441 0
	movl	$.LC139, %eax	#, D.23379
	jmp	.L543	#
.L471:
	.loc 1 2443 0
	movl	$.LC140, %eax	#, D.23379
	jmp	.L543	#
.L472:
	.loc 1 2445 0
	movl	$.LC141, %eax	#, D.23379
	jmp	.L543	#
.L473:
	.loc 1 2447 0
	movl	$.LC142, %eax	#, D.23379
	jmp	.L543	#
.L474:
	.loc 1 2449 0
	movl	$.LC143, %eax	#, D.23379
	jmp	.L543	#
.L475:
	.loc 1 2451 0
	movl	$.LC144, %eax	#, D.23379
	jmp	.L543	#
.L476:
	.loc 1 2453 0
	movl	$.LC145, %eax	#, D.23379
	jmp	.L543	#
.L477:
	.loc 1 2455 0
	movl	$.LC146, %eax	#, D.23379
	jmp	.L543	#
.L478:
	.loc 1 2457 0
	movl	$.LC147, %eax	#, D.23379
	jmp	.L543	#
.L479:
	.loc 1 2459 0
	movl	$.LC148, %eax	#, D.23379
	jmp	.L543	#
.L480:
	.loc 1 2461 0
	movl	$.LC149, %eax	#, D.23379
	jmp	.L543	#
.L481:
	.loc 1 2463 0
	movl	$.LC150, %eax	#, D.23379
	jmp	.L543	#
.L482:
	.loc 1 2465 0
	movl	$.LC151, %eax	#, D.23379
	jmp	.L543	#
.L483:
	.loc 1 2467 0
	movl	$.LC152, %eax	#, D.23379
	jmp	.L543	#
.L484:
	.loc 1 2469 0
	movl	$.LC153, %eax	#, D.23379
	jmp	.L543	#
.L485:
	.loc 1 2471 0
	movl	$.LC154, %eax	#, D.23379
	jmp	.L543	#
.L486:
	.loc 1 2473 0
	movl	$.LC155, %eax	#, D.23379
	jmp	.L543	#
.L487:
	.loc 1 2475 0
	movl	$.LC156, %eax	#, D.23379
	jmp	.L543	#
.L488:
	.loc 1 2477 0
	movl	$.LC157, %eax	#, D.23379
	jmp	.L543	#
.L489:
	.loc 1 2479 0
	movl	$.LC158, %eax	#, D.23379
	jmp	.L543	#
.L490:
	.loc 1 2481 0
	movl	$.LC159, %eax	#, D.23379
	jmp	.L543	#
.L491:
	.loc 1 2483 0
	movl	$.LC160, %eax	#, D.23379
	jmp	.L543	#
.L492:
	.loc 1 2485 0
	movl	$.LC161, %eax	#, D.23379
	jmp	.L543	#
.L493:
	.loc 1 2487 0
	movl	$.LC162, %eax	#, D.23379
	jmp	.L543	#
.L494:
	.loc 1 2489 0
	movl	$.LC163, %eax	#, D.23379
	jmp	.L543	#
.L495:
	.loc 1 2491 0
	movl	$.LC164, %eax	#, D.23379
	jmp	.L543	#
.L496:
	.loc 1 2493 0
	movl	$.LC165, %eax	#, D.23379
	jmp	.L543	#
.L497:
	.loc 1 2495 0
	movl	$.LC166, %eax	#, D.23379
	jmp	.L543	#
.L498:
	.loc 1 2497 0
	movl	$.LC167, %eax	#, D.23379
	jmp	.L543	#
.L499:
	.loc 1 2499 0
	movl	$.LC168, %eax	#, D.23379
	jmp	.L543	#
.L500:
	.loc 1 2501 0
	movl	$.LC169, %eax	#, D.23379
	jmp	.L543	#
.L501:
	.loc 1 2503 0
	movl	$.LC170, %eax	#, D.23379
	jmp	.L543	#
.L502:
	.loc 1 2505 0
	movl	$.LC171, %eax	#, D.23379
	jmp	.L543	#
.L503:
	.loc 1 2507 0
	movl	$.LC172, %eax	#, D.23379
	jmp	.L543	#
.L504:
	.loc 1 2509 0
	movl	$.LC173, %eax	#, D.23379
	jmp	.L543	#
.L505:
	.loc 1 2511 0
	movl	$.LC174, %eax	#, D.23379
	jmp	.L543	#
.L506:
	.loc 1 2513 0
	movl	$.LC175, %eax	#, D.23379
	jmp	.L543	#
.L507:
	.loc 1 2515 0
	movl	$.LC176, %eax	#, D.23379
	jmp	.L543	#
.L508:
	.loc 1 2517 0
	movl	$.LC177, %eax	#, D.23379
	jmp	.L543	#
.L509:
	.loc 1 2519 0
	movl	$.LC178, %eax	#, D.23379
	jmp	.L543	#
.L510:
	.loc 1 2521 0
	movl	$.LC179, %eax	#, D.23379
	jmp	.L543	#
.L511:
	.loc 1 2523 0
	movl	$.LC180, %eax	#, D.23379
	jmp	.L543	#
.L512:
	.loc 1 2525 0
	movl	$.LC181, %eax	#, D.23379
	jmp	.L543	#
.L513:
	.loc 1 2527 0
	movl	$.LC182, %eax	#, D.23379
	jmp	.L543	#
.L514:
	.loc 1 2529 0
	movl	$.LC183, %eax	#, D.23379
	jmp	.L543	#
.L515:
	.loc 1 2531 0
	movl	$.LC184, %eax	#, D.23379
	jmp	.L543	#
.L516:
	.loc 1 2533 0
	movl	$.LC185, %eax	#, D.23379
	jmp	.L543	#
.L517:
	.loc 1 2535 0
	movl	$.LC186, %eax	#, D.23379
	jmp	.L543	#
.L518:
	.loc 1 2537 0
	movl	$.LC187, %eax	#, D.23379
	jmp	.L543	#
.L519:
	.loc 1 2539 0
	movl	$.LC188, %eax	#, D.23379
	jmp	.L543	#
.L520:
	.loc 1 2541 0
	movl	$.LC189, %eax	#, D.23379
	jmp	.L543	#
.L521:
	.loc 1 2543 0
	movl	$.LC190, %eax	#, D.23379
	jmp	.L543	#
.L522:
	.loc 1 2545 0
	movl	$.LC191, %eax	#, D.23379
	jmp	.L543	#
.L523:
	.loc 1 2547 0
	movl	$.LC192, %eax	#, D.23379
	jmp	.L543	#
.L524:
	.loc 1 2549 0
	movl	$.LC193, %eax	#, D.23379
	jmp	.L543	#
.L525:
	.loc 1 2551 0
	movl	$.LC194, %eax	#, D.23379
	jmp	.L543	#
.L526:
	.loc 1 2553 0
	movl	$.LC195, %eax	#, D.23379
	jmp	.L543	#
.L527:
	.loc 1 2555 0
	movl	$.LC196, %eax	#, D.23379
	jmp	.L543	#
.L528:
	.loc 1 2557 0
	movl	$.LC197, %eax	#, D.23379
	jmp	.L543	#
.L529:
	.loc 1 2559 0
	movl	$.LC198, %eax	#, D.23379
	jmp	.L543	#
.L530:
	.loc 1 2561 0
	movl	$.LC199, %eax	#, D.23379
	jmp	.L543	#
.L531:
	.loc 1 2563 0
	movl	$.LC200, %eax	#, D.23379
	jmp	.L543	#
.L532:
	.loc 1 2565 0
	movl	$.LC201, %eax	#, D.23379
	jmp	.L543	#
.L533:
	.loc 1 2567 0
	movl	$.LC202, %eax	#, D.23379
	jmp	.L543	#
.L534:
	.loc 1 2569 0
	movl	$.LC203, %eax	#, D.23379
	jmp	.L543	#
.L535:
	.loc 1 2571 0
	movl	$.LC204, %eax	#, D.23379
	jmp	.L543	#
.L536:
	.loc 1 2573 0
	movl	$.LC205, %eax	#, D.23379
	jmp	.L543	#
.L537:
	.loc 1 2575 0
	movl	$.LC206, %eax	#, D.23379
	jmp	.L543	#
.L538:
	.loc 1 2577 0
	movl	$.LC207, %eax	#, D.23379
	jmp	.L543	#
.L539:
	.loc 1 2579 0
	movl	$.LC208, %eax	#, D.23379
	jmp	.L543	#
.L540:
	.loc 1 2581 0
	movl	$.LC209, %eax	#, D.23379
	jmp	.L543	#
.L541:
	.loc 1 2583 0
	movl	$.LC210, %eax	#, D.23379
	jmp	.L543	#
.L542:
	.loc 1 2585 0
	movl	$.LC211, %eax	#, D.23379
	jmp	.L543	#
.L396:
	.loc 1 2587 0
	movl	$.LC212, %eax	#, D.23379
.L543:
	.loc 1 2589 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE36:
	.size	dwarf_stack_op_name, .-dwarf_stack_op_name
	.type	new_loc_descr, @function
new_loc_descr:
.LFB37:
	.loc 1 2600 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movl	%edi, -20(%rbp)	# op, op
	movq	%rsi, -32(%rbp)	# oprnd1, oprnd1
	movq	%rdx, -40(%rbp)	# oprnd2, oprnd2
	.loc 1 2603 0
	movl	$72, %esi	#,
	movl	$1, %edi	#,
	call	xcalloc	#
	movq	%rax, -8(%rbp)	# tmp61, descr
	.loc 1 2606 0
	movq	-8(%rbp), %rax	# descr, tmp62
	movl	-20(%rbp), %edx	# op, tmp63
	movl	%edx, 8(%rax)	# tmp63, descr_1->dw_loc_opc
	.loc 1 2607 0
	movq	-8(%rbp), %rax	# descr, tmp64
	movl	$6, 16(%rax)	#, descr_1->dw_loc_oprnd1.val_class
	.loc 1 2608 0
	movq	-8(%rbp), %rax	# descr, tmp65
	movq	-32(%rbp), %rdx	# oprnd1, tmp66
	movq	%rdx, 24(%rax)	# tmp66, descr_1->dw_loc_oprnd1.v.val_unsigned
	.loc 1 2609 0
	movq	-8(%rbp), %rax	# descr, tmp67
	movl	$6, 40(%rax)	#, descr_1->dw_loc_oprnd2.val_class
	.loc 1 2610 0
	movq	-8(%rbp), %rax	# descr, tmp68
	movq	-40(%rbp), %rdx	# oprnd2, tmp69
	movq	%rdx, 48(%rax)	# tmp69, descr_1->dw_loc_oprnd2.v.val_unsigned
	.loc 1 2612 0
	movq	-8(%rbp), %rax	# descr, D.23526
	.loc 1 2613 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE37:
	.size	new_loc_descr, .-new_loc_descr
	.type	add_loc_descr, @function
add_loc_descr:
.LFB38:
	.loc 1 2622 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# list_head, list_head
	movq	%rsi, -32(%rbp)	# descr, descr
	.loc 1 2626 0
	movq	-24(%rbp), %rax	# list_head, tmp61
	movq	%rax, -8(%rbp)	# tmp61, d
	jmp	.L547	#
.L548:
	.loc 1 2626 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# d, tmp62
	movq	(%rax), %rax	# *d_1, D.23527
	movq	%rax, -8(%rbp)	# D.23527, d
.L547:
	.loc 1 2626 0 discriminator 1
	movq	-8(%rbp), %rax	# d, tmp63
	movq	(%rax), %rax	# *d_1, D.23527
	testq	%rax, %rax	# D.23527
	jne	.L548	#,
	.loc 1 2629 0 is_stmt 1
	movq	-8(%rbp), %rax	# d, tmp64
	movq	-32(%rbp), %rdx	# descr, tmp65
	movq	%rdx, (%rax)	# tmp65, *d_1
	.loc 1 2630 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE38:
	.size	add_loc_descr, .-add_loc_descr
	.type	size_of_loc_descr, @function
size_of_loc_descr:
.LFB39:
	.loc 1 2637 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# loc, loc
	.loc 1 2638 0
	movq	$1, -8(%rbp)	#, size
	.loc 1 2640 0
	movq	-24(%rbp), %rax	# loc, tmp92
	movl	8(%rax), %eax	# loc_4(D)->dw_loc_opc, D.23528
	subl	$3, %eax	#, tmp93
	cmpl	$146, %eax	#, tmp93
	ja	.L572	#,
	movl	%eax, %eax	# tmp93, tmp94
	movq	.L552(,%rax,8), %rax	#, tmp95
	jmp	*%rax	# tmp95
	.section	.rodata
	.align 8
	.align 4
.L552:
	.quad	.L551
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L553
	.quad	.L553
	.quad	.L554
	.quad	.L554
	.quad	.L555
	.quad	.L555
	.quad	.L556
	.quad	.L556
	.quad	.L557
	.quad	.L558
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L559
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L560
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L561
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L561
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L572
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L562
	.quad	.L563
	.quad	.L564
	.quad	.L565
	.quad	.L566
	.quad	.L567
	.quad	.L567
	.text
.L551:
	.loc 1 2643 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.160
	andl	$33554432, %eax	#, D.23529
	testl	%eax, %eax	# D.23529
	je	.L568	#,
	.loc 1 2643 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.159
	jmp	.L569	#
.L568:
	.loc 1 2643 0 discriminator 2
	movl	$4, %eax	#, iftmp.159
.L569:
	.loc 1 2643 0 discriminator 3
	addq	%rax, -8(%rbp)	# iftmp.159, size
	.loc 1 2644 0 is_stmt 1 discriminator 3
	jmp	.L570	#
.L553:
	.loc 1 2647 0
	addq	$1, -8(%rbp)	#, size
	.loc 1 2648 0
	jmp	.L570	#
.L554:
	.loc 1 2651 0
	addq	$2, -8(%rbp)	#, size
	.loc 1 2652 0
	jmp	.L570	#
.L555:
	.loc 1 2655 0
	addq	$4, -8(%rbp)	#, size
	.loc 1 2656 0
	jmp	.L570	#
.L556:
	.loc 1 2659 0
	addq	$8, -8(%rbp)	#, size
	.loc 1 2660 0
	jmp	.L570	#
.L557:
	.loc 1 2662 0
	movq	-24(%rbp), %rax	# loc, tmp96
	movq	24(%rax), %rax	# loc_4(D)->dw_loc_oprnd1.v.val_unsigned, D.23530
	movq	%rax, %rdi	# D.23530,
	call	size_of_uleb128	#
	cltq
	addq	%rax, -8(%rbp)	# D.23530, size
	.loc 1 2663 0
	jmp	.L570	#
.L558:
	.loc 1 2665 0
	movq	-24(%rbp), %rax	# loc, tmp97
	movq	24(%rax), %rax	# loc_4(D)->dw_loc_oprnd1.v.val_int, D.23531
	movq	%rax, %rdi	# D.23531,
	call	size_of_sleb128	#
	cltq
	addq	%rax, -8(%rbp)	# D.23530, size
	.loc 1 2666 0
	jmp	.L570	#
.L559:
	.loc 1 2668 0
	addq	$1, -8(%rbp)	#, size
	.loc 1 2669 0
	jmp	.L570	#
.L560:
	.loc 1 2671 0
	movq	-24(%rbp), %rax	# loc, tmp98
	movq	24(%rax), %rax	# loc_4(D)->dw_loc_oprnd1.v.val_unsigned, D.23530
	movq	%rax, %rdi	# D.23530,
	call	size_of_uleb128	#
	cltq
	addq	%rax, -8(%rbp)	# D.23530, size
	.loc 1 2672 0
	jmp	.L570	#
.L561:
	.loc 1 2675 0
	addq	$2, -8(%rbp)	#, size
	.loc 1 2676 0
	jmp	.L570	#
.L562:
	.loc 1 2709 0
	movq	-24(%rbp), %rax	# loc, tmp99
	movq	24(%rax), %rax	# loc_4(D)->dw_loc_oprnd1.v.val_int, D.23531
	movq	%rax, %rdi	# D.23531,
	call	size_of_sleb128	#
	cltq
	addq	%rax, -8(%rbp)	# D.23530, size
	.loc 1 2710 0
	jmp	.L570	#
.L563:
	.loc 1 2712 0
	movq	-24(%rbp), %rax	# loc, tmp100
	movq	24(%rax), %rax	# loc_4(D)->dw_loc_oprnd1.v.val_unsigned, D.23530
	movq	%rax, %rdi	# D.23530,
	call	size_of_uleb128	#
	cltq
	addq	%rax, -8(%rbp)	# D.23530, size
	.loc 1 2713 0
	jmp	.L570	#
.L564:
	.loc 1 2715 0
	movq	-24(%rbp), %rax	# loc, tmp101
	movq	24(%rax), %rax	# loc_4(D)->dw_loc_oprnd1.v.val_int, D.23531
	movq	%rax, %rdi	# D.23531,
	call	size_of_sleb128	#
	cltq
	addq	%rax, -8(%rbp)	# D.23530, size
	.loc 1 2716 0
	jmp	.L570	#
.L565:
	.loc 1 2718 0
	movq	-24(%rbp), %rax	# loc, tmp102
	movq	24(%rax), %rax	# loc_4(D)->dw_loc_oprnd1.v.val_unsigned, D.23530
	movq	%rax, %rdi	# D.23530,
	call	size_of_uleb128	#
	cltq
	addq	%rax, -8(%rbp)	# D.23530, size
	.loc 1 2719 0
	movq	-24(%rbp), %rax	# loc, tmp103
	movq	48(%rax), %rax	# loc_4(D)->dw_loc_oprnd2.v.val_int, D.23531
	movq	%rax, %rdi	# D.23531,
	call	size_of_sleb128	#
	cltq
	addq	%rax, -8(%rbp)	# D.23530, size
	.loc 1 2720 0
	jmp	.L570	#
.L566:
	.loc 1 2722 0
	movq	-24(%rbp), %rax	# loc, tmp104
	movq	24(%rax), %rax	# loc_4(D)->dw_loc_oprnd1.v.val_unsigned, D.23530
	movq	%rax, %rdi	# D.23530,
	call	size_of_uleb128	#
	cltq
	addq	%rax, -8(%rbp)	# D.23530, size
	.loc 1 2723 0
	jmp	.L570	#
.L567:
	.loc 1 2726 0
	addq	$1, -8(%rbp)	#, size
	.loc 1 2727 0
	jmp	.L570	#
.L572:
	.loc 1 2729 0
	nop
.L570:
	.loc 1 2732 0
	movq	-8(%rbp), %rax	# size, D.23530
	.loc 1 2733 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE39:
	.size	size_of_loc_descr, .-size_of_loc_descr
	.type	size_of_locs, @function
size_of_locs:
.LFB40:
	.loc 1 2740 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# loc, loc
	.loc 1 2743 0
	movq	$0, -8(%rbp)	#, size
	jmp	.L574	#
.L575:
	.loc 1 2745 0 discriminator 2
	movq	-8(%rbp), %rax	# size, tmp63
	movl	%eax, %edx	# tmp63, D.23532
	movq	-24(%rbp), %rax	# loc, tmp64
	movl	%edx, 64(%rax)	# D.23532, loc_1->dw_loc_addr
	.loc 1 2746 0 discriminator 2
	movq	-24(%rbp), %rax	# loc, tmp65
	movq	%rax, %rdi	# tmp65,
	call	size_of_loc_descr	#
	addq	%rax, -8(%rbp)	# D.23533, size
	.loc 1 2743 0 discriminator 2
	movq	-24(%rbp), %rax	# loc, tmp66
	movq	(%rax), %rax	# loc_1->dw_loc_next, tmp67
	movq	%rax, -24(%rbp)	# tmp67, loc
.L574:
	.loc 1 2743 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, loc
	jne	.L575	#,
	.loc 1 2749 0 is_stmt 1
	movq	-8(%rbp), %rax	# size, D.23533
	.loc 1 2750 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE40:
	.size	size_of_locs, .-size_of_locs
	.type	output_loc_operands, @function
output_loc_operands:
.LFB41:
	.loc 1 2757 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# loc, loc
	.loc 1 2758 0
	movq	-40(%rbp), %rax	# loc, tmp94
	addq	$16, %rax	#, tmp93
	movq	%rax, -16(%rbp)	# tmp93, val1
	.loc 1 2759 0
	movq	-40(%rbp), %rax	# loc, tmp98
	addq	$40, %rax	#, tmp97
	movq	%rax, -8(%rbp)	# tmp97, val2
	.loc 1 2761 0
	movq	-40(%rbp), %rax	# loc, tmp99
	movl	8(%rax), %eax	# loc_2(D)->dw_loc_opc, D.23534
	subl	$3, %eax	#, tmp100
	cmpl	$146, %eax	#, tmp100
	ja	.L601	#,
	movl	%eax, %eax	# tmp100, tmp101
	movq	.L580(,%rax,8), %rax	#, tmp102
	jmp	*%rax	# tmp102
	.section	.rodata
	.align 8
	.align 4
.L580:
	.quad	.L579
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L581
	.quad	.L581
	.quad	.L582
	.quad	.L582
	.quad	.L583
	.quad	.L583
	.quad	.L584
	.quad	.L584
	.quad	.L585
	.quad	.L586
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L587
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L588
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L589
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L589
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L601
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L590
	.quad	.L591
	.quad	.L592
	.quad	.L593
	.quad	.L594
	.quad	.L595
	.quad	.L595
	.text
.L579:
	.loc 1 2765 0
	movq	-16(%rbp), %rax	# val1, tmp103
	movq	8(%rax), %rcx	# val1_3->v.val_addr, D.23535
	movl	target_flags(%rip), %eax	# target_flags, target_flags.162
	andl	$33554432, %eax	#, D.23536
	testl	%eax, %eax	# D.23536
	je	.L596	#,
	.loc 1 2765 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.161
	jmp	.L597	#
.L596:
	.loc 1 2765 0 discriminator 2
	movl	$4, %eax	#, iftmp.161
.L597:
	.loc 1 2765 0 discriminator 3
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.23535,
	movl	%eax, %edi	# iftmp.161,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr_rtx	#
	.loc 1 2766 0 is_stmt 1 discriminator 3
	jmp	.L577	#
.L582:
	.loc 1 2769 0
	movq	-16(%rbp), %rax	# val1, tmp104
	movq	8(%rax), %rax	# val1_3->v.val_int, D.23537
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.23538,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 2770 0
	jmp	.L577	#
.L583:
	.loc 1 2773 0
	movq	-16(%rbp), %rax	# val1, tmp105
	movq	8(%rax), %rax	# val1_3->v.val_int, D.23537
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.23538,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 2774 0
	jmp	.L577	#
.L584:
	.loc 1 2779 0
	movq	-16(%rbp), %rax	# val1, tmp106
	movq	8(%rax), %rax	# val1_3->v.val_int, D.23537
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.23538,
	movl	$8, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 2780 0
	jmp	.L577	#
.L589:
.LBB15:
	.loc 1 2786 0
	movq	-16(%rbp), %rax	# val1, tmp107
	movl	(%rax), %eax	# val1_3->val_class, D.23539
	cmpl	$2, %eax	#, D.23539
	jne	.L599	#,
	.loc 1 2787 0
	movq	-16(%rbp), %rax	# val1, tmp108
	movq	8(%rax), %rax	# val1_3->v.val_loc, D.23540
	movl	64(%rax), %edx	# _18->dw_loc_addr, D.23536
	movq	-40(%rbp), %rax	# loc, tmp109
	movl	64(%rax), %eax	# loc_2(D)->dw_loc_addr, D.23536
	movl	$-3, %ecx	#, tmp110
	subl	%eax, %ecx	# D.23536, D.23536
	movl	%ecx, %eax	# D.23536, D.23536
	addl	%edx, %eax	# D.23536, tmp111
	movl	%eax, -20(%rbp)	# tmp111, offset
	.loc 1 2791 0
	movl	-20(%rbp), %eax	# offset, tmp112
	cltq
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.23538,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.LBE15:
	.loc 1 2793 0
	jmp	.L577	#
.L599:
.LBB16:
	.loc 1 2789 0
	movl	$__FUNCTION__.14497, %edx	#,
	movl	$2789, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L581:
.LBE16:
	.loc 1 2812 0
	movq	-16(%rbp), %rax	# val1, tmp113
	movq	8(%rax), %rax	# val1_3->v.val_int, D.23537
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.23538,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 2813 0
	jmp	.L577	#
.L585:
	.loc 1 2815 0
	movq	-16(%rbp), %rax	# val1, tmp114
	movq	8(%rax), %rax	# val1_3->v.val_unsigned, D.23538
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23538,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 2816 0
	jmp	.L577	#
.L586:
	.loc 1 2818 0
	movq	-16(%rbp), %rax	# val1, tmp115
	movq	8(%rax), %rax	# val1_3->v.val_int, D.23537
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23537,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_sleb128	#
	.loc 1 2819 0
	jmp	.L577	#
.L587:
	.loc 1 2821 0
	movq	-16(%rbp), %rax	# val1, tmp116
	movq	8(%rax), %rax	# val1_3->v.val_int, D.23537
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.23538,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 2822 0
	jmp	.L577	#
.L588:
	.loc 1 2824 0
	movq	-16(%rbp), %rax	# val1, tmp117
	movq	8(%rax), %rax	# val1_3->v.val_unsigned, D.23538
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23538,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 2825 0
	jmp	.L577	#
.L590:
	.loc 1 2858 0
	movq	-16(%rbp), %rax	# val1, tmp118
	movq	8(%rax), %rax	# val1_3->v.val_int, D.23537
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23537,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_sleb128	#
	.loc 1 2859 0
	jmp	.L577	#
.L591:
	.loc 1 2861 0
	movq	-16(%rbp), %rax	# val1, tmp119
	movq	8(%rax), %rax	# val1_3->v.val_unsigned, D.23538
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23538,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 2862 0
	jmp	.L577	#
.L592:
	.loc 1 2864 0
	movq	-16(%rbp), %rax	# val1, tmp120
	movq	8(%rax), %rax	# val1_3->v.val_int, D.23537
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23537,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_sleb128	#
	.loc 1 2865 0
	jmp	.L577	#
.L593:
	.loc 1 2867 0
	movq	-16(%rbp), %rax	# val1, tmp121
	movq	8(%rax), %rax	# val1_3->v.val_unsigned, D.23538
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23538,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 2868 0
	movq	-8(%rbp), %rax	# val2, tmp122
	movq	8(%rax), %rax	# val2_4->v.val_int, D.23537
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23537,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_sleb128	#
	.loc 1 2869 0
	jmp	.L577	#
.L594:
	.loc 1 2871 0
	movq	-16(%rbp), %rax	# val1, tmp123
	movq	8(%rax), %rax	# val1_3->v.val_unsigned, D.23538
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23538,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 2872 0
	jmp	.L577	#
.L595:
	.loc 1 2875 0
	movq	-16(%rbp), %rax	# val1, tmp124
	movq	8(%rax), %rax	# val1_3->v.val_int, D.23537
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.23538,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 2876 0
	jmp	.L577	#
.L601:
	.loc 1 2879 0
	nop
.L577:
	.loc 1 2881 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE41:
	.size	output_loc_operands, .-output_loc_operands
	.type	output_loc_sequence, @function
output_loc_sequence:
.LFB42:
	.loc 1 2888 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# loc, loc
	.loc 1 2889 0
	jmp	.L603	#
.L604:
	.loc 1 2893 0 discriminator 2
	movq	-8(%rbp), %rax	# loc, tmp63
	movl	8(%rax), %eax	# loc_1->dw_loc_opc, D.23541
	.loc 1 2892 0 discriminator 2
	movl	%eax, %edi	# D.23541,
	call	dwarf_stack_op_name	#
	movq	%rax, %rdx	#, D.23542
	movq	-8(%rbp), %rax	# loc, tmp64
	movl	8(%rax), %eax	# loc_1->dw_loc_opc, D.23541
	movl	%eax, %eax	# D.23541, D.23543
	movq	%rdx, %rcx	# D.23542,
	movl	$.LC37, %edx	#,
	movq	%rax, %rsi	# D.23543,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 2896 0 discriminator 2
	movq	-8(%rbp), %rax	# loc, tmp65
	movq	%rax, %rdi	# tmp65,
	call	output_loc_operands	#
	.loc 1 2889 0 discriminator 2
	movq	-8(%rbp), %rax	# loc, tmp66
	movq	(%rax), %rax	# loc_1->dw_loc_next, tmp67
	movq	%rax, -8(%rbp)	# tmp67, loc
.L603:
	.loc 1 2889 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, loc
	jne	.L604	#,
	.loc 1 2898 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE42:
	.size	output_loc_sequence, .-output_loc_sequence
	.type	output_cfa_loc, @function
output_cfa_loc:
.LFB43:
	.loc 1 2906 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# cfi, cfi
	.loc 1 2911 0
	movq	-24(%rbp), %rax	# cfi, tmp59
	movq	16(%rax), %rax	# cfi_1(D)->dw_cfi_oprnd1.dw_cfi_loc, tmp60
	movq	%rax, -16(%rbp)	# tmp60, loc
	.loc 1 2912 0
	movq	-16(%rbp), %rax	# loc, tmp61
	movq	%rax, %rdi	# tmp61,
	call	size_of_locs	#
	movq	%rax, -8(%rbp)	# tmp62, size
	.loc 1 2913 0
	movq	-8(%rbp), %rax	# size, tmp63
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp63,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 2916 0
	movq	-16(%rbp), %rax	# loc, tmp64
	movq	%rax, %rdi	# tmp64,
	call	output_loc_sequence	#
	.loc 1 2917 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE43:
	.size	output_cfa_loc, .-output_cfa_loc
	.type	build_cfa_loc, @function
build_cfa_loc:
.LFB44:
	.loc 1 2925 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# cfa, cfa
	.loc 1 2928 0
	movq	-24(%rbp), %rax	# cfa, tmp85
	movl	24(%rax), %eax	# cfa_1(D)->indirect, D.23544
	testl	%eax, %eax	# D.23544
	jne	.L607	#,
	.loc 1 2929 0
	movl	$__FUNCTION__.14562, %edx	#,
	movl	$2929, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L607:
	.loc 1 2931 0
	movq	-24(%rbp), %rax	# cfa, tmp86
	movq	16(%rax), %rax	# cfa_1(D)->base_offset, D.23545
	testq	%rax, %rax	# D.23545
	je	.L608	#,
	.loc 1 2933 0
	movq	-24(%rbp), %rax	# cfa, tmp87
	movq	(%rax), %rax	# cfa_1(D)->reg, D.23546
	cmpq	$31, %rax	#, D.23546
	ja	.L609	#,
	.loc 1 2934 0
	movq	-24(%rbp), %rax	# cfa, tmp88
	movq	16(%rax), %rax	# cfa_1(D)->base_offset, D.23545
	movq	-24(%rbp), %rdx	# cfa, tmp89
	movq	(%rdx), %rdx	# cfa_1(D)->reg, D.23546
	leal	112(%rdx), %ecx	#, D.23547
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.23546,
	movl	%ecx, %edi	# D.23547,
	call	new_loc_descr	#
	movq	%rax, -16(%rbp)	# head.163, head
	jmp	.L611	#
.L609:
	.loc 1 2936 0
	movq	-24(%rbp), %rax	# cfa, tmp90
	movq	16(%rax), %rax	# cfa_1(D)->base_offset, D.23545
	movq	%rax, %rdx	# D.23545, D.23546
	movq	-24(%rbp), %rax	# cfa, tmp91
	movq	(%rax), %rax	# cfa_1(D)->reg, D.23546
	movq	%rax, %rsi	# D.23546,
	movl	$146, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -16(%rbp)	# head.164, head
	jmp	.L611	#
.L608:
	.loc 1 2938 0
	movq	-24(%rbp), %rax	# cfa, tmp92
	movq	(%rax), %rax	# cfa_1(D)->reg, D.23546
	cmpq	$31, %rax	#, D.23546
	ja	.L612	#,
	.loc 1 2939 0
	movq	-24(%rbp), %rax	# cfa, tmp93
	movq	(%rax), %rax	# cfa_1(D)->reg, D.23546
	addl	$80, %eax	#, D.23547
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	%eax, %edi	# D.23547,
	call	new_loc_descr	#
	movq	%rax, -16(%rbp)	# head.165, head
	jmp	.L611	#
.L612:
	.loc 1 2941 0
	movq	-24(%rbp), %rax	# cfa, tmp94
	movq	(%rax), %rax	# cfa_1(D)->reg, D.23546
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.23546,
	movl	$144, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -16(%rbp)	# head.166, head
.L611:
	.loc 1 2943 0
	movq	-16(%rbp), %rax	# head, head.167
	movl	$5, 16(%rax)	#, head.167_22->dw_loc_oprnd1.val_class
	.loc 1 2944 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$6, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp95, tmp
	.loc 1 2945 0
	movq	-8(%rbp), %rdx	# tmp, tmp96
	leaq	-16(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
	call	add_loc_descr	#
	.loc 1 2946 0
	movq	-24(%rbp), %rax	# cfa, tmp98
	movq	8(%rax), %rax	# cfa_1(D)->offset, D.23545
	testq	%rax, %rax	# D.23545
	je	.L613	#,
	.loc 1 2948 0
	movq	-24(%rbp), %rax	# cfa, tmp99
	movq	8(%rax), %rax	# cfa_1(D)->offset, D.23545
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.23546,
	movl	$35, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp100, tmp
	.loc 1 2949 0
	movq	-8(%rbp), %rdx	# tmp, tmp101
	leaq	-16(%rbp), %rax	#, tmp102
	movq	%rdx, %rsi	# tmp101,
	movq	%rax, %rdi	# tmp102,
	call	add_loc_descr	#
.L613:
	.loc 1 2952 0
	movq	-16(%rbp), %rax	# head, D.23548
	.loc 1 2953 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE44:
	.size	build_cfa_loc, .-build_cfa_loc
	.section	.rodata
.LC213:
	.string	"DW_LOC_OP %s not implemented\n"
	.text
	.type	get_cfa_from_loc_descr, @function
get_cfa_from_loc_descr:
.LFB45:
	.loc 1 2962 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# cfa, cfa
	movq	%rsi, -32(%rbp)	# loc, loc
	.loc 1 2964 0
	movq	-24(%rbp), %rax	# cfa, tmp73
	movq	$0, 8(%rax)	#, cfa_2(D)->offset
	.loc 1 2965 0
	movq	-24(%rbp), %rax	# cfa, tmp74
	movq	$0, 16(%rax)	#, cfa_2(D)->base_offset
	.loc 1 2966 0
	movq	-24(%rbp), %rax	# cfa, tmp75
	movl	$0, 24(%rax)	#, cfa_2(D)->indirect
	.loc 1 2967 0
	movq	-24(%rbp), %rax	# cfa, tmp76
	movq	$-1, (%rax)	#, cfa_2(D)->reg
	.loc 1 2969 0
	movq	-32(%rbp), %rax	# loc, tmp77
	movq	%rax, -8(%rbp)	# tmp77, ptr
	jmp	.L616	#
.L626:
.LBB17:
	.loc 1 2971 0
	movq	-8(%rbp), %rax	# ptr, tmp78
	movl	8(%rax), %eax	# ptr_1->dw_loc_opc, tmp79
	movl	%eax, -12(%rbp)	# tmp79, op
	.loc 1 2973 0
	movl	-12(%rbp), %eax	# op, op
	cmpl	$111, %eax	#, op
	ja	.L618	#,
	cmpl	$80, %eax	#, op
	jae	.L619	#,
	cmpl	$6, %eax	#, op
	je	.L620	#,
	cmpl	$35, %eax	#, op
	je	.L621	#,
	jmp	.L617	#
.L618:
	cmpl	$144, %eax	#, op
	je	.L622	#,
	cmpl	$144, %eax	#, op
	jb	.L623	#,
	cmpl	$146, %eax	#, op
	je	.L624	#,
	jmp	.L617	#
.L619:
	.loc 1 3007 0
	movl	-12(%rbp), %eax	# op, tmp81
	subl	$80, %eax	#, D.23549
	movl	%eax, %edx	# D.23549, D.23550
	movq	-24(%rbp), %rax	# cfa, tmp82
	movq	%rdx, (%rax)	# D.23550, cfa_2(D)->reg
	.loc 1 3008 0
	jmp	.L625	#
.L622:
	.loc 1 3010 0
	movq	-8(%rbp), %rax	# ptr, tmp83
	movq	24(%rax), %rax	# ptr_1->dw_loc_oprnd1.v.val_int, D.23551
	movq	%rax, %rdx	# D.23551, D.23550
	movq	-24(%rbp), %rax	# cfa, tmp84
	movq	%rdx, (%rax)	# D.23550, cfa_2(D)->reg
	.loc 1 3011 0
	jmp	.L625	#
.L623:
	.loc 1 3044 0
	movl	-12(%rbp), %eax	# op, tmp85
	subl	$112, %eax	#, D.23549
	movl	%eax, %edx	# D.23549, D.23550
	movq	-24(%rbp), %rax	# cfa, tmp86
	movq	%rdx, (%rax)	# D.23550, cfa_2(D)->reg
	.loc 1 3045 0
	movq	-8(%rbp), %rax	# ptr, tmp87
	movq	24(%rax), %rdx	# ptr_1->dw_loc_oprnd1.v.val_int, D.23551
	movq	-24(%rbp), %rax	# cfa, tmp88
	movq	%rdx, 16(%rax)	# D.23551, cfa_2(D)->base_offset
	.loc 1 3046 0
	jmp	.L625	#
.L624:
	.loc 1 3048 0
	movq	-8(%rbp), %rax	# ptr, tmp89
	movq	24(%rax), %rax	# ptr_1->dw_loc_oprnd1.v.val_int, D.23551
	movq	%rax, %rdx	# D.23551, D.23550
	movq	-24(%rbp), %rax	# cfa, tmp90
	movq	%rdx, (%rax)	# D.23550, cfa_2(D)->reg
	.loc 1 3049 0
	movq	-8(%rbp), %rax	# ptr, tmp91
	movq	48(%rax), %rdx	# ptr_1->dw_loc_oprnd2.v.val_int, D.23551
	movq	-24(%rbp), %rax	# cfa, tmp92
	movq	%rdx, 16(%rax)	# D.23551, cfa_2(D)->base_offset
	.loc 1 3050 0
	jmp	.L625	#
.L620:
	.loc 1 3052 0
	movq	-24(%rbp), %rax	# cfa, tmp93
	movl	$1, 24(%rax)	#, cfa_2(D)->indirect
	.loc 1 3053 0
	jmp	.L625	#
.L621:
	.loc 1 3055 0
	movq	-8(%rbp), %rax	# ptr, tmp94
	movq	24(%rax), %rax	# ptr_1->dw_loc_oprnd1.v.val_unsigned, D.23550
	movq	%rax, %rdx	# D.23550, D.23551
	movq	-24(%rbp), %rax	# cfa, tmp95
	movq	%rdx, 8(%rax)	# D.23551, cfa_2(D)->offset
	.loc 1 3056 0
	jmp	.L625	#
.L617:
	.loc 1 3059 0
	movq	-8(%rbp), %rax	# ptr, tmp96
	movl	8(%rax), %eax	# ptr_1->dw_loc_opc, D.23552
	.loc 1 3058 0
	movl	%eax, %edi	# D.23552,
	call	dwarf_stack_op_name	#
	movq	%rax, %rsi	# D.23553,
	movl	$.LC213, %edi	#,
	movl	$0, %eax	#,
	call	internal_error	#
.L625:
.LBE17:
	.loc 1 2969 0
	movq	-8(%rbp), %rax	# ptr, tmp97
	movq	(%rax), %rax	# ptr_1->dw_loc_next, tmp98
	movq	%rax, -8(%rbp)	# tmp98, ptr
.L616:
	.loc 1 2969 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, ptr
	jne	.L626	#,
	.loc 1 3062 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE45:
	.size	get_cfa_from_loc_descr, .-get_cfa_from_loc_descr
	.globl	dwarf2_debug_hooks
	.data
	.align 32
	.type	dwarf2_debug_hooks, @object
	.size	dwarf2_debug_hooks, 160
dwarf2_debug_hooks:
# init:
	.quad	dwarf2out_init
# finish:
	.quad	dwarf2out_finish
# define:
	.quad	dwarf2out_define
# undef:
	.quad	dwarf2out_undef
# start_source_file:
	.quad	dwarf2out_start_source_file
# end_source_file:
	.quad	dwarf2out_end_source_file
# begin_block:
	.quad	dwarf2out_begin_block
# end_block:
	.quad	dwarf2out_end_block
# ignore_block:
	.quad	dwarf2out_ignore_block
# source_line:
	.quad	dwarf2out_source_line
# begin_prologue:
	.quad	dwarf2out_begin_prologue
# end_prologue:
	.quad	debug_nothing_int
# end_epilogue:
	.quad	dwarf2out_end_epilogue
# begin_function:
	.quad	debug_nothing_tree
# end_function:
	.quad	debug_nothing_int
# function_decl:
	.quad	dwarf2out_decl
# global_decl:
	.quad	dwarf2out_global_decl
# deferred_inline_function:
	.quad	debug_nothing_tree
# outlining_inline_function:
	.quad	dwarf2out_abstract_function
# label:
	.quad	debug_nothing_rtx
	.local	next_die_offset
	.comm	next_die_offset,8,8
	.local	comp_unit_die
	.comm	comp_unit_die,8,8
	.local	limbo_die_list
	.comm	limbo_die_list,8,8
	.local	file_table
	.comm	file_table,24,16
	.local	primary_filename
	.comm	primary_filename,8,8
	.local	decl_die_table
	.comm	decl_die_table,8,8
	.local	decl_die_table_allocated
	.comm	decl_die_table_allocated,4,4
	.local	decl_die_table_in_use
	.comm	decl_die_table_in_use,4,4
	.comm	decl_scope_table,8,8
	.local	abbrev_die_table
	.comm	abbrev_die_table,8,8
	.local	abbrev_die_table_allocated
	.comm	abbrev_die_table_allocated,4,4
	.local	abbrev_die_table_in_use
	.comm	abbrev_die_table_in_use,4,4
	.local	line_info_table
	.comm	line_info_table,8,8
	.local	line_info_table_allocated
	.comm	line_info_table_allocated,4,4
	.local	separate_line_info_table_in_use
	.comm	separate_line_info_table_in_use,4,4
	.local	separate_line_info_table
	.comm	separate_line_info_table,8,8
	.local	separate_line_info_table_allocated
	.comm	separate_line_info_table_allocated,4,4
	.local	line_info_table_in_use
	.comm	line_info_table_in_use,4,4
	.local	pubname_table
	.comm	pubname_table,8,8
	.local	pubname_table_allocated
	.comm	pubname_table_allocated,4,4
	.local	pubname_table_in_use
	.comm	pubname_table_in_use,4,4
	.local	arange_table
	.comm	arange_table,8,8
	.local	arange_table_allocated
	.comm	arange_table_allocated,4,4
	.local	arange_table_in_use
	.comm	arange_table_in_use,4,4
	.local	ranges_table
	.comm	ranges_table,8,8
	.local	ranges_table_allocated
	.comm	ranges_table_allocated,4,4
	.local	ranges_table_in_use
	.comm	ranges_table_in_use,4,4
	.local	have_location_lists
	.comm	have_location_lists,4,4
	.comm	incomplete_types,8,8
	.local	current_function_has_inlines
	.comm	current_function_has_inlines,4,4
	.local	used_rtx_varray
	.comm	used_rtx_varray,8,8
	.local	text_end_label
	.comm	text_end_label,30,16
	.local	text_section_label
	.comm	text_section_label,30,16
	.local	abbrev_section_label
	.comm	abbrev_section_label,30,16
	.local	debug_info_section_label
	.comm	debug_info_section_label,30,16
	.local	debug_line_section_label
	.comm	debug_line_section_label,30,16
	.local	macinfo_section_label
	.comm	macinfo_section_label,30,16
	.local	loc_section_label
	.comm	loc_section_label,30,16
	.local	ranges_section_label
	.comm	ranges_section_label,60,32
	.local	demangle_name_func
	.comm	demangle_name_func,8,8
	.text
	.globl	dwarf2out_set_demangle_name_func
	.type	dwarf2out_set_demangle_name_func, @function
dwarf2out_set_demangle_name_func:
.LFB46:
	.loc 1 3797 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# func, func
	.loc 1 3798 0
	movq	-8(%rbp), %rax	# func, tmp59
	movq	%rax, demangle_name_func(%rip)	# tmp59, demangle_name_func
	.loc 1 3799 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE46:
	.size	dwarf2out_set_demangle_name_func, .-dwarf2out_set_demangle_name_func
	.type	is_pseudo_reg, @function
is_pseudo_reg:
.LFB47:
	.loc 1 3806 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# rtl, rtl
	.loc 1 3807 0
	movq	-8(%rbp), %rax	# rtl, tmp67
	movzwl	(%rax), %eax	# rtl_2(D)->code, D.23556
	.loc 1 3808 0
	cmpw	$61, %ax	#, D.23556
	jne	.L629	#,
	.loc 1 3807 0
	movq	-8(%rbp), %rax	# rtl, tmp68
	movl	8(%rax), %eax	# rtl_2(D)->fld[0].rtuint, D.23557
	cmpl	$52, %eax	#, D.23557
	ja	.L630	#,
.L629:
	.loc 1 3808 0 discriminator 1
	movq	-8(%rbp), %rax	# rtl, tmp69
	movzwl	(%rax), %eax	# rtl_2(D)->code, D.23556
	cmpw	$63, %ax	#, D.23556
	jne	.L631	#,
	.loc 1 3809 0
	movq	-8(%rbp), %rax	# rtl, tmp70
	movq	8(%rax), %rax	# rtl_2(D)->fld[0].rtx, D.23558
	movl	8(%rax), %eax	# _6->fld[0].rtuint, D.23557
	cmpl	$52, %eax	#, D.23557
	jbe	.L631	#,
.L630:
	.loc 1 3808 0
	movl	$1, %eax	#, iftmp.521
	jmp	.L632	#
.L631:
	.loc 1 3808 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.521
.L632:
	.loc 1 3810 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE47:
	.size	is_pseudo_reg, .-is_pseudo_reg
	.type	type_main_variant, @function
type_main_variant:
.LFB48:
	.loc 1 3818 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# type, type
	.loc 1 3819 0
	movq	-8(%rbp), %rax	# type, tmp63
	movq	128(%rax), %rax	# type_3(D)->type.main_variant, tmp64
	movq	%rax, -8(%rbp)	# tmp64, type
	.loc 1 3826 0
	movq	-8(%rbp), %rax	# type, tmp65
	movzbl	16(%rax), %eax	# type_4->common.code, D.23560
	cmpb	$18, %al	#, D.23560
	jne	.L635	#,
	.loc 1 3827 0
	jmp	.L636	#
.L637:
	.loc 1 3828 0
	movq	-8(%rbp), %rax	# type, tmp66
	movq	128(%rax), %rax	# type_1->type.main_variant, tmp67
	movq	%rax, -8(%rbp)	# tmp67, type
.L636:
	.loc 1 3827 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp68
	movq	128(%rax), %rax	# type_1->type.main_variant, D.23561
	cmpq	-8(%rbp), %rax	# type, D.23561
	jne	.L637	#,
.L635:
	.loc 1 3830 0
	movq	-8(%rbp), %rax	# type, D.23562
	.loc 1 3831 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE48:
	.size	type_main_variant, .-type_main_variant
	.type	is_tagged_type, @function
is_tagged_type:
.LFB49:
	.loc 1 3838 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# type, type
	.loc 1 3839 0
	movq	-24(%rbp), %rax	# type, tmp63
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.23563
	movzbl	%al, %eax	# D.23563, tmp64
	movl	%eax, -4(%rbp)	# tmp64, code
	.loc 1 3842 0
	cmpl	$20, -4(%rbp)	#, code
	je	.L640	#,
	.loc 1 3841 0
	cmpl	$21, -4(%rbp)	#, code
	je	.L640	#,
	.loc 1 3842 0
	cmpl	$22, -4(%rbp)	#, code
	je	.L640	#,
	.loc 1 3842 0 is_stmt 0 discriminator 1
	cmpl	$10, -4(%rbp)	#, code
	jne	.L641	#,
.L640:
	movl	$1, %eax	#, iftmp.594
	jmp	.L642	#
.L641:
	.loc 1 3842 0 discriminator 2
	movl	$0, %eax	#, iftmp.594
.L642:
	.loc 1 3843 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE49:
	.size	is_tagged_type, .-is_tagged_type
	.section	.rodata
.LC214:
	.string	"DW_TAG_padding"
.LC215:
	.string	"DW_TAG_array_type"
.LC216:
	.string	"DW_TAG_class_type"
.LC217:
	.string	"DW_TAG_entry_point"
.LC218:
	.string	"DW_TAG_enumeration_type"
.LC219:
	.string	"DW_TAG_formal_parameter"
.LC220:
	.string	"DW_TAG_imported_declaration"
.LC221:
	.string	"DW_TAG_label"
.LC222:
	.string	"DW_TAG_lexical_block"
.LC223:
	.string	"DW_TAG_member"
.LC224:
	.string	"DW_TAG_pointer_type"
.LC225:
	.string	"DW_TAG_reference_type"
.LC226:
	.string	"DW_TAG_compile_unit"
.LC227:
	.string	"DW_TAG_string_type"
.LC228:
	.string	"DW_TAG_structure_type"
.LC229:
	.string	"DW_TAG_subroutine_type"
.LC230:
	.string	"DW_TAG_typedef"
.LC231:
	.string	"DW_TAG_union_type"
.LC232:
	.string	"DW_TAG_unspecified_parameters"
.LC233:
	.string	"DW_TAG_variant"
.LC234:
	.string	"DW_TAG_common_block"
.LC235:
	.string	"DW_TAG_common_inclusion"
.LC236:
	.string	"DW_TAG_inheritance"
.LC237:
	.string	"DW_TAG_inlined_subroutine"
.LC238:
	.string	"DW_TAG_module"
.LC239:
	.string	"DW_TAG_ptr_to_member_type"
.LC240:
	.string	"DW_TAG_set_type"
.LC241:
	.string	"DW_TAG_subrange_type"
.LC242:
	.string	"DW_TAG_with_stmt"
.LC243:
	.string	"DW_TAG_access_declaration"
.LC244:
	.string	"DW_TAG_base_type"
.LC245:
	.string	"DW_TAG_catch_block"
.LC246:
	.string	"DW_TAG_const_type"
.LC247:
	.string	"DW_TAG_constant"
.LC248:
	.string	"DW_TAG_enumerator"
.LC249:
	.string	"DW_TAG_file_type"
.LC250:
	.string	"DW_TAG_friend"
.LC251:
	.string	"DW_TAG_namelist"
.LC252:
	.string	"DW_TAG_namelist_item"
.LC253:
	.string	"DW_TAG_packed_type"
.LC254:
	.string	"DW_TAG_subprogram"
.LC255:
	.string	"DW_TAG_template_type_param"
.LC256:
	.string	"DW_TAG_template_value_param"
.LC257:
	.string	"DW_TAG_thrown_type"
.LC258:
	.string	"DW_TAG_try_block"
.LC259:
	.string	"DW_TAG_variant_part"
.LC260:
	.string	"DW_TAG_variable"
.LC261:
	.string	"DW_TAG_volatile_type"
.LC262:
	.string	"DW_TAG_MIPS_loop"
.LC263:
	.string	"DW_TAG_format_label"
.LC264:
	.string	"DW_TAG_function_template"
.LC265:
	.string	"DW_TAG_class_template"
.LC266:
	.string	"DW_TAG_GNU_BINCL"
.LC267:
	.string	"DW_TAG_GNU_EINCL"
.LC268:
	.string	"DW_TAG_<unknown>"
	.text
	.type	dwarf_tag_name, @function
dwarf_tag_name:
.LFB50:
	.loc 1 3850 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# tag, tag
	.loc 1 3851 0
	movl	-4(%rbp), %eax	# tag, tag
	cmpl	$32, %eax	#, tag
	je	.L646	#,
	cmpl	$32, %eax	#, tag
	ja	.L647	#,
	cmpl	$17, %eax	#, tag
	je	.L648	#,
	cmpl	$17, %eax	#, tag
	ja	.L649	#,
	cmpl	$5, %eax	#, tag
	je	.L650	#,
	cmpl	$5, %eax	#, tag
	ja	.L651	#,
	cmpl	$2, %eax	#, tag
	je	.L652	#,
	cmpl	$2, %eax	#, tag
	ja	.L653	#,
	testl	%eax, %eax	# tag
	je	.L654	#,
	cmpl	$1, %eax	#, tag
	je	.L655	#,
	jmp	.L645	#
.L653:
	cmpl	$3, %eax	#, tag
	je	.L656	#,
	cmpl	$4, %eax	#, tag
	je	.L657	#,
	jmp	.L645	#
.L651:
	cmpl	$11, %eax	#, tag
	je	.L658	#,
	cmpl	$11, %eax	#, tag
	ja	.L659	#,
	cmpl	$8, %eax	#, tag
	je	.L660	#,
	cmpl	$10, %eax	#, tag
	je	.L661	#,
	jmp	.L645	#
.L659:
	cmpl	$15, %eax	#, tag
	je	.L662	#,
	cmpl	$15, %eax	#, tag
	ja	.L663	#,
	cmpl	$13, %eax	#, tag
	je	.L664	#,
	jmp	.L645	#
.L649:
	cmpl	$25, %eax	#, tag
	je	.L665	#,
	cmpl	$25, %eax	#, tag
	ja	.L666	#,
	cmpl	$21, %eax	#, tag
	je	.L667	#,
	cmpl	$21, %eax	#, tag
	ja	.L668	#,
	cmpl	$18, %eax	#, tag
	je	.L669	#,
	cmpl	$19, %eax	#, tag
	je	.L670	#,
	jmp	.L645	#
.L668:
	cmpl	$23, %eax	#, tag
	je	.L671	#,
	cmpl	$23, %eax	#, tag
	ja	.L672	#,
	jmp	.L716	#
.L666:
	cmpl	$28, %eax	#, tag
	je	.L674	#,
	cmpl	$28, %eax	#, tag
	ja	.L675	#,
	cmpl	$26, %eax	#, tag
	je	.L676	#,
	cmpl	$27, %eax	#, tag
	je	.L677	#,
	jmp	.L645	#
.L675:
	cmpl	$30, %eax	#, tag
	je	.L678	#,
	cmpl	$30, %eax	#, tag
	ja	.L679	#,
	jmp	.L717	#
.L647:
	cmpl	$46, %eax	#, tag
	je	.L681	#,
	cmpl	$46, %eax	#, tag
	ja	.L682	#,
	cmpl	$39, %eax	#, tag
	je	.L683	#,
	cmpl	$39, %eax	#, tag
	ja	.L684	#,
	cmpl	$35, %eax	#, tag
	je	.L685	#,
	cmpl	$35, %eax	#, tag
	ja	.L686	#,
	cmpl	$33, %eax	#, tag
	je	.L687	#,
	cmpl	$34, %eax	#, tag
	je	.L688	#,
	jmp	.L645	#
.L686:
	cmpl	$37, %eax	#, tag
	je	.L689	#,
	cmpl	$37, %eax	#, tag
	ja	.L690	#,
	jmp	.L718	#
.L684:
	cmpl	$42, %eax	#, tag
	je	.L692	#,
	cmpl	$42, %eax	#, tag
	ja	.L693	#,
	cmpl	$40, %eax	#, tag
	je	.L694	#,
	cmpl	$41, %eax	#, tag
	je	.L695	#,
	jmp	.L645	#
.L693:
	cmpl	$44, %eax	#, tag
	je	.L696	#,
	cmpl	$44, %eax	#, tag
	ja	.L697	#,
	jmp	.L719	#
.L682:
	cmpl	$53, %eax	#, tag
	je	.L699	#,
	cmpl	$53, %eax	#, tag
	ja	.L700	#,
	cmpl	$49, %eax	#, tag
	je	.L701	#,
	cmpl	$49, %eax	#, tag
	ja	.L702	#,
	cmpl	$47, %eax	#, tag
	je	.L703	#,
	cmpl	$48, %eax	#, tag
	je	.L704	#,
	jmp	.L645	#
.L702:
	cmpl	$51, %eax	#, tag
	je	.L705	#,
	cmpl	$51, %eax	#, tag
	ja	.L706	#,
	jmp	.L720	#
.L700:
	cmpl	$16642, %eax	#, tag
	je	.L708	#,
	cmpl	$16642, %eax	#, tag
	ja	.L709	#,
	cmpl	$16513, %eax	#, tag
	je	.L710	#,
	cmpl	$16641, %eax	#, tag
	je	.L711	#,
	jmp	.L645	#
.L709:
	cmpl	$16644, %eax	#, tag
	je	.L712	#,
	cmpl	$16644, %eax	#, tag
	jb	.L713	#,
	cmpl	$16645, %eax	#, tag
	je	.L714	#,
	jmp	.L645	#
.L654:
	.loc 1 3854 0
	movl	$.LC214, %eax	#, D.23565
	jmp	.L715	#
.L655:
	.loc 1 3856 0
	movl	$.LC215, %eax	#, D.23565
	jmp	.L715	#
.L652:
	.loc 1 3858 0
	movl	$.LC216, %eax	#, D.23565
	jmp	.L715	#
.L656:
	.loc 1 3860 0
	movl	$.LC217, %eax	#, D.23565
	jmp	.L715	#
.L657:
	.loc 1 3862 0
	movl	$.LC218, %eax	#, D.23565
	jmp	.L715	#
.L650:
	.loc 1 3864 0
	movl	$.LC219, %eax	#, D.23565
	jmp	.L715	#
.L660:
	.loc 1 3866 0
	movl	$.LC220, %eax	#, D.23565
	jmp	.L715	#
.L661:
	.loc 1 3868 0
	movl	$.LC221, %eax	#, D.23565
	jmp	.L715	#
.L658:
	.loc 1 3870 0
	movl	$.LC222, %eax	#, D.23565
	jmp	.L715	#
.L664:
	.loc 1 3872 0
	movl	$.LC223, %eax	#, D.23565
	jmp	.L715	#
.L662:
	.loc 1 3874 0
	movl	$.LC224, %eax	#, D.23565
	jmp	.L715	#
.L663:
	.loc 1 3876 0
	movl	$.LC225, %eax	#, D.23565
	jmp	.L715	#
.L648:
	.loc 1 3878 0
	movl	$.LC226, %eax	#, D.23565
	jmp	.L715	#
.L669:
	.loc 1 3880 0
	movl	$.LC227, %eax	#, D.23565
	jmp	.L715	#
.L670:
	.loc 1 3882 0
	movl	$.LC228, %eax	#, D.23565
	jmp	.L715	#
.L667:
	.loc 1 3884 0
	movl	$.LC229, %eax	#, D.23565
	jmp	.L715	#
.L716:
	.loc 1 3886 0
	movl	$.LC230, %eax	#, D.23565
	jmp	.L715	#
.L671:
	.loc 1 3888 0
	movl	$.LC231, %eax	#, D.23565
	jmp	.L715	#
.L672:
	.loc 1 3890 0
	movl	$.LC232, %eax	#, D.23565
	jmp	.L715	#
.L665:
	.loc 1 3892 0
	movl	$.LC233, %eax	#, D.23565
	jmp	.L715	#
.L676:
	.loc 1 3894 0
	movl	$.LC234, %eax	#, D.23565
	jmp	.L715	#
.L677:
	.loc 1 3896 0
	movl	$.LC235, %eax	#, D.23565
	jmp	.L715	#
.L674:
	.loc 1 3898 0
	movl	$.LC236, %eax	#, D.23565
	jmp	.L715	#
.L717:
	.loc 1 3900 0
	movl	$.LC237, %eax	#, D.23565
	jmp	.L715	#
.L678:
	.loc 1 3902 0
	movl	$.LC238, %eax	#, D.23565
	jmp	.L715	#
.L679:
	.loc 1 3904 0
	movl	$.LC239, %eax	#, D.23565
	jmp	.L715	#
.L646:
	.loc 1 3906 0
	movl	$.LC240, %eax	#, D.23565
	jmp	.L715	#
.L687:
	.loc 1 3908 0
	movl	$.LC241, %eax	#, D.23565
	jmp	.L715	#
.L688:
	.loc 1 3910 0
	movl	$.LC242, %eax	#, D.23565
	jmp	.L715	#
.L685:
	.loc 1 3912 0
	movl	$.LC243, %eax	#, D.23565
	jmp	.L715	#
.L718:
	.loc 1 3914 0
	movl	$.LC244, %eax	#, D.23565
	jmp	.L715	#
.L689:
	.loc 1 3916 0
	movl	$.LC245, %eax	#, D.23565
	jmp	.L715	#
.L690:
	.loc 1 3918 0
	movl	$.LC246, %eax	#, D.23565
	jmp	.L715	#
.L683:
	.loc 1 3920 0
	movl	$.LC247, %eax	#, D.23565
	jmp	.L715	#
.L694:
	.loc 1 3922 0
	movl	$.LC248, %eax	#, D.23565
	jmp	.L715	#
.L695:
	.loc 1 3924 0
	movl	$.LC249, %eax	#, D.23565
	jmp	.L715	#
.L692:
	.loc 1 3926 0
	movl	$.LC250, %eax	#, D.23565
	jmp	.L715	#
.L719:
	.loc 1 3928 0
	movl	$.LC251, %eax	#, D.23565
	jmp	.L715	#
.L696:
	.loc 1 3930 0
	movl	$.LC252, %eax	#, D.23565
	jmp	.L715	#
.L697:
	.loc 1 3932 0
	movl	$.LC253, %eax	#, D.23565
	jmp	.L715	#
.L681:
	.loc 1 3934 0
	movl	$.LC254, %eax	#, D.23565
	jmp	.L715	#
.L703:
	.loc 1 3936 0
	movl	$.LC255, %eax	#, D.23565
	jmp	.L715	#
.L704:
	.loc 1 3938 0
	movl	$.LC256, %eax	#, D.23565
	jmp	.L715	#
.L701:
	.loc 1 3940 0
	movl	$.LC257, %eax	#, D.23565
	jmp	.L715	#
.L720:
	.loc 1 3942 0
	movl	$.LC258, %eax	#, D.23565
	jmp	.L715	#
.L705:
	.loc 1 3944 0
	movl	$.LC259, %eax	#, D.23565
	jmp	.L715	#
.L706:
	.loc 1 3946 0
	movl	$.LC260, %eax	#, D.23565
	jmp	.L715	#
.L699:
	.loc 1 3948 0
	movl	$.LC261, %eax	#, D.23565
	jmp	.L715	#
.L710:
	.loc 1 3950 0
	movl	$.LC262, %eax	#, D.23565
	jmp	.L715	#
.L711:
	.loc 1 3952 0
	movl	$.LC263, %eax	#, D.23565
	jmp	.L715	#
.L708:
	.loc 1 3954 0
	movl	$.LC264, %eax	#, D.23565
	jmp	.L715	#
.L713:
	.loc 1 3956 0
	movl	$.LC265, %eax	#, D.23565
	jmp	.L715	#
.L712:
	.loc 1 3958 0
	movl	$.LC266, %eax	#, D.23565
	jmp	.L715	#
.L714:
	.loc 1 3960 0
	movl	$.LC267, %eax	#, D.23565
	jmp	.L715	#
.L645:
	.loc 1 3962 0
	movl	$.LC268, %eax	#, D.23565
.L715:
	.loc 1 3964 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE50:
	.size	dwarf_tag_name, .-dwarf_tag_name
	.section	.rodata
.LC269:
	.string	"DW_AT_sibling"
.LC270:
	.string	"DW_AT_location"
.LC271:
	.string	"DW_AT_name"
.LC272:
	.string	"DW_AT_ordering"
.LC273:
	.string	"DW_AT_subscr_data"
.LC274:
	.string	"DW_AT_byte_size"
.LC275:
	.string	"DW_AT_bit_offset"
.LC276:
	.string	"DW_AT_bit_size"
.LC277:
	.string	"DW_AT_element_list"
.LC278:
	.string	"DW_AT_stmt_list"
.LC279:
	.string	"DW_AT_low_pc"
.LC280:
	.string	"DW_AT_high_pc"
.LC281:
	.string	"DW_AT_language"
.LC282:
	.string	"DW_AT_member"
.LC283:
	.string	"DW_AT_discr"
.LC284:
	.string	"DW_AT_discr_value"
.LC285:
	.string	"DW_AT_visibility"
.LC286:
	.string	"DW_AT_import"
.LC287:
	.string	"DW_AT_string_length"
.LC288:
	.string	"DW_AT_common_reference"
.LC289:
	.string	"DW_AT_comp_dir"
.LC290:
	.string	"DW_AT_const_value"
.LC291:
	.string	"DW_AT_containing_type"
.LC292:
	.string	"DW_AT_default_value"
.LC293:
	.string	"DW_AT_inline"
.LC294:
	.string	"DW_AT_is_optional"
.LC295:
	.string	"DW_AT_lower_bound"
.LC296:
	.string	"DW_AT_producer"
.LC297:
	.string	"DW_AT_prototyped"
.LC298:
	.string	"DW_AT_return_addr"
.LC299:
	.string	"DW_AT_start_scope"
.LC300:
	.string	"DW_AT_stride_size"
.LC301:
	.string	"DW_AT_upper_bound"
.LC302:
	.string	"DW_AT_abstract_origin"
.LC303:
	.string	"DW_AT_accessibility"
.LC304:
	.string	"DW_AT_address_class"
.LC305:
	.string	"DW_AT_artificial"
.LC306:
	.string	"DW_AT_base_types"
.LC307:
	.string	"DW_AT_calling_convention"
.LC308:
	.string	"DW_AT_count"
.LC309:
	.string	"DW_AT_data_member_location"
.LC310:
	.string	"DW_AT_decl_column"
.LC311:
	.string	"DW_AT_decl_file"
.LC312:
	.string	"DW_AT_decl_line"
.LC313:
	.string	"DW_AT_declaration"
.LC314:
	.string	"DW_AT_discr_list"
.LC315:
	.string	"DW_AT_encoding"
.LC316:
	.string	"DW_AT_external"
.LC317:
	.string	"DW_AT_frame_base"
.LC318:
	.string	"DW_AT_friend"
.LC319:
	.string	"DW_AT_identifier_case"
.LC320:
	.string	"DW_AT_macro_info"
.LC321:
	.string	"DW_AT_namelist_items"
.LC322:
	.string	"DW_AT_priority"
.LC323:
	.string	"DW_AT_segment"
.LC324:
	.string	"DW_AT_specification"
.LC325:
	.string	"DW_AT_static_link"
.LC326:
	.string	"DW_AT_type"
.LC327:
	.string	"DW_AT_use_location"
.LC328:
	.string	"DW_AT_variable_parameter"
.LC329:
	.string	"DW_AT_virtuality"
.LC330:
	.string	"DW_AT_vtable_elem_location"
.LC331:
	.string	"DW_AT_allocated"
.LC332:
	.string	"DW_AT_associated"
.LC333:
	.string	"DW_AT_data_location"
.LC334:
	.string	"DW_AT_stride"
.LC335:
	.string	"DW_AT_entry_pc"
.LC336:
	.string	"DW_AT_use_UTF8"
.LC337:
	.string	"DW_AT_extension"
.LC338:
	.string	"DW_AT_ranges"
.LC339:
	.string	"DW_AT_trampoline"
.LC340:
	.string	"DW_AT_call_column"
.LC341:
	.string	"DW_AT_call_file"
.LC342:
	.string	"DW_AT_call_line"
.LC343:
	.string	"DW_AT_MIPS_fde"
.LC344:
	.string	"DW_AT_MIPS_loop_begin"
.LC345:
	.string	"DW_AT_MIPS_tail_loop_begin"
.LC346:
	.string	"DW_AT_MIPS_epilog_begin"
.LC347:
	.string	"DW_AT_MIPS_loop_unroll_factor"
	.align 8
.LC348:
	.string	"DW_AT_MIPS_software_pipeline_depth"
.LC349:
	.string	"DW_AT_MIPS_linkage_name"
.LC350:
	.string	"DW_AT_MIPS_stride"
.LC351:
	.string	"DW_AT_MIPS_abstract_name"
.LC352:
	.string	"DW_AT_MIPS_clone_origin"
.LC353:
	.string	"DW_AT_MIPS_has_inlines"
.LC354:
	.string	"DW_AT_sf_names"
.LC355:
	.string	"DW_AT_src_info"
.LC356:
	.string	"DW_AT_mac_info"
.LC357:
	.string	"DW_AT_src_coords"
.LC358:
	.string	"DW_AT_body_begin"
.LC359:
	.string	"DW_AT_body_end"
.LC360:
	.string	"DW_AT_GNU_vector"
.LC361:
	.string	"DW_AT_VMS_rtnbeg_pd_address"
.LC362:
	.string	"DW_AT_<unknown>"
	.text
	.type	dwarf_attr_name, @function
dwarf_attr_name:
.LFB51:
	.loc 1 3971 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# attr, attr
	.loc 1 3972 0
	movl	-4(%rbp), %eax	# attr, attr
	cmpl	$62, %eax	#, attr
	je	.L723	#,
	cmpl	$62, %eax	#, attr
	ja	.L724	#,
	cmpl	$29, %eax	#, attr
	je	.L725	#,
	cmpl	$29, %eax	#, attr
	ja	.L726	#,
	cmpl	$17, %eax	#, attr
	je	.L727	#,
	cmpl	$17, %eax	#, attr
	ja	.L728	#,
	cmpl	$10, %eax	#, attr
	je	.L729	#,
	cmpl	$10, %eax	#, attr
	ja	.L730	#,
	cmpl	$2, %eax	#, attr
	je	.L731	#,
	cmpl	$2, %eax	#, attr
	ja	.L732	#,
	cmpl	$1, %eax	#, attr
	je	.L733	#,
	jmp	.L722	#
.L732:
	cmpl	$3, %eax	#, attr
	je	.L734	#,
	cmpl	$9, %eax	#, attr
	je	.L735	#,
	jmp	.L722	#
.L730:
	cmpl	$13, %eax	#, attr
	je	.L736	#,
	cmpl	$13, %eax	#, attr
	ja	.L737	#,
	cmpl	$11, %eax	#, attr
	je	.L738	#,
	cmpl	$12, %eax	#, attr
	je	.L739	#,
	jmp	.L722	#
.L737:
	cmpl	$15, %eax	#, attr
	je	.L740	#,
	cmpl	$16, %eax	#, attr
	je	.L741	#,
	jmp	.L722	#
.L728:
	cmpl	$23, %eax	#, attr
	je	.L742	#,
	cmpl	$23, %eax	#, attr
	ja	.L743	#,
	cmpl	$20, %eax	#, attr
	je	.L744	#,
	cmpl	$20, %eax	#, attr
	ja	.L745	#,
	cmpl	$18, %eax	#, attr
	je	.L746	#,
	cmpl	$19, %eax	#, attr
	je	.L747	#,
	jmp	.L722	#
.L745:
	cmpl	$21, %eax	#, attr
	je	.L748	#,
	cmpl	$22, %eax	#, attr
	je	.L749	#,
	jmp	.L722	#
.L743:
	cmpl	$26, %eax	#, attr
	je	.L750	#,
	cmpl	$26, %eax	#, attr
	ja	.L751	#,
	cmpl	$24, %eax	#, attr
	je	.L752	#,
	cmpl	$25, %eax	#, attr
	je	.L753	#,
	jmp	.L722	#
.L751:
	cmpl	$27, %eax	#, attr
	je	.L754	#,
	cmpl	$28, %eax	#, attr
	je	.L755	#,
	jmp	.L722	#
.L726:
	cmpl	$50, %eax	#, attr
	je	.L756	#,
	cmpl	$50, %eax	#, attr
	ja	.L757	#,
	cmpl	$39, %eax	#, attr
	je	.L758	#,
	cmpl	$39, %eax	#, attr
	ja	.L759	#,
	cmpl	$33, %eax	#, attr
	je	.L760	#,
	cmpl	$33, %eax	#, attr
	ja	.L761	#,
	cmpl	$30, %eax	#, attr
	je	.L762	#,
	cmpl	$32, %eax	#, attr
	je	.L763	#,
	jmp	.L722	#
.L761:
	cmpl	$34, %eax	#, attr
	je	.L764	#,
	cmpl	$37, %eax	#, attr
	je	.L765	#,
	jmp	.L722	#
.L759:
	cmpl	$46, %eax	#, attr
	je	.L766	#,
	cmpl	$46, %eax	#, attr
	ja	.L767	#,
	cmpl	$42, %eax	#, attr
	je	.L768	#,
	cmpl	$44, %eax	#, attr
	je	.L769	#,
	jmp	.L722	#
.L767:
	cmpl	$47, %eax	#, attr
	je	.L770	#,
	cmpl	$49, %eax	#, attr
	je	.L771	#,
	jmp	.L722	#
.L757:
	cmpl	$56, %eax	#, attr
	je	.L772	#,
	cmpl	$56, %eax	#, attr
	ja	.L773	#,
	cmpl	$53, %eax	#, attr
	je	.L774	#,
	cmpl	$53, %eax	#, attr
	ja	.L775	#,
	cmpl	$51, %eax	#, attr
	je	.L776	#,
	cmpl	$52, %eax	#, attr
	je	.L777	#,
	jmp	.L722	#
.L775:
	cmpl	$54, %eax	#, attr
	je	.L778	#,
	cmpl	$55, %eax	#, attr
	je	.L779	#,
	jmp	.L722	#
.L773:
	cmpl	$59, %eax	#, attr
	je	.L780	#,
	cmpl	$59, %eax	#, attr
	ja	.L781	#,
	cmpl	$57, %eax	#, attr
	je	.L782	#,
	cmpl	$58, %eax	#, attr
	je	.L783	#,
	jmp	.L722	#
.L781:
	cmpl	$60, %eax	#, attr
	je	.L784	#,
	cmpl	$61, %eax	#, attr
	je	.L785	#,
	jmp	.L722	#
.L724:
	cmpl	$85, %eax	#, attr
	je	.L786	#,
	cmpl	$85, %eax	#, attr
	ja	.L787	#,
	cmpl	$73, %eax	#, attr
	je	.L788	#,
	cmpl	$73, %eax	#, attr
	ja	.L789	#,
	cmpl	$67, %eax	#, attr
	je	.L790	#,
	cmpl	$67, %eax	#, attr
	ja	.L791	#,
	cmpl	$64, %eax	#, attr
	je	.L792	#,
	cmpl	$64, %eax	#, attr
	jb	.L793	#,
	cmpl	$65, %eax	#, attr
	je	.L794	#,
	cmpl	$66, %eax	#, attr
	je	.L795	#,
	jmp	.L722	#
.L791:
	cmpl	$70, %eax	#, attr
	je	.L796	#,
	cmpl	$70, %eax	#, attr
	ja	.L797	#,
	cmpl	$68, %eax	#, attr
	je	.L798	#,
	cmpl	$69, %eax	#, attr
	je	.L799	#,
	jmp	.L722	#
.L797:
	cmpl	$71, %eax	#, attr
	je	.L800	#,
	cmpl	$72, %eax	#, attr
	je	.L801	#,
	jmp	.L722	#
.L789:
	cmpl	$79, %eax	#, attr
	je	.L802	#,
	cmpl	$79, %eax	#, attr
	ja	.L803	#,
	cmpl	$76, %eax	#, attr
	je	.L804	#,
	cmpl	$76, %eax	#, attr
	ja	.L805	#,
	cmpl	$74, %eax	#, attr
	je	.L806	#,
	cmpl	$75, %eax	#, attr
	je	.L807	#,
	jmp	.L722	#
.L805:
	cmpl	$77, %eax	#, attr
	je	.L808	#,
	cmpl	$78, %eax	#, attr
	je	.L809	#,
	jmp	.L722	#
.L803:
	cmpl	$82, %eax	#, attr
	je	.L810	#,
	cmpl	$82, %eax	#, attr
	ja	.L811	#,
	cmpl	$80, %eax	#, attr
	je	.L812	#,
	cmpl	$81, %eax	#, attr
	je	.L813	#,
	jmp	.L722	#
.L811:
	cmpl	$83, %eax	#, attr
	je	.L814	#,
	cmpl	$84, %eax	#, attr
	je	.L815	#,
	jmp	.L722	#
.L787:
	cmpl	$8200, %eax	#, attr
	je	.L816	#,
	cmpl	$8200, %eax	#, attr
	ja	.L817	#,
	cmpl	$8194, %eax	#, attr
	je	.L818	#,
	cmpl	$8194, %eax	#, attr
	ja	.L819	#,
	cmpl	$88, %eax	#, attr
	je	.L820	#,
	cmpl	$88, %eax	#, attr
	ja	.L821	#,
	cmpl	$86, %eax	#, attr
	je	.L822	#,
	cmpl	$87, %eax	#, attr
	je	.L823	#,
	jmp	.L722	#
.L821:
	cmpl	$89, %eax	#, attr
	je	.L824	#,
	cmpl	$8193, %eax	#, attr
	je	.L825	#,
	jmp	.L722	#
.L819:
	cmpl	$8197, %eax	#, attr
	je	.L826	#,
	cmpl	$8197, %eax	#, attr
	ja	.L827	#,
	cmpl	$8195, %eax	#, attr
	je	.L828	#,
	cmpl	$8196, %eax	#, attr
	je	.L829	#,
	jmp	.L722	#
.L827:
	cmpl	$8198, %eax	#, attr
	je	.L830	#,
	cmpl	$8199, %eax	#, attr
	je	.L831	#,
	jmp	.L722	#
.L817:
	cmpl	$8451, %eax	#, attr
	je	.L832	#,
	cmpl	$8451, %eax	#, attr
	ja	.L833	#,
	cmpl	$8203, %eax	#, attr
	je	.L834	#,
	cmpl	$8203, %eax	#, attr
	ja	.L835	#,
	cmpl	$8201, %eax	#, attr
	je	.L836	#,
	cmpl	$8202, %eax	#, attr
	je	.L837	#,
	jmp	.L722	#
.L835:
	cmpl	$8449, %eax	#, attr
	je	.L838	#,
	cmpl	$8450, %eax	#, attr
	je	.L839	#,
	jmp	.L722	#
.L833:
	cmpl	$8454, %eax	#, attr
	je	.L840	#,
	cmpl	$8454, %eax	#, attr
	ja	.L841	#,
	cmpl	$8452, %eax	#, attr
	je	.L842	#,
	cmpl	$8453, %eax	#, attr
	je	.L843	#,
	jmp	.L722	#
.L841:
	cmpl	$8455, %eax	#, attr
	je	.L844	#,
	cmpl	$8705, %eax	#, attr
	je	.L845	#,
	jmp	.L722	#
.L733:
	.loc 1 3975 0
	movl	$.LC269, %eax	#, D.23636
	jmp	.L846	#
.L731:
	.loc 1 3977 0
	movl	$.LC270, %eax	#, D.23636
	jmp	.L846	#
.L734:
	.loc 1 3979 0
	movl	$.LC271, %eax	#, D.23636
	jmp	.L846	#
.L735:
	.loc 1 3981 0
	movl	$.LC272, %eax	#, D.23636
	jmp	.L846	#
.L729:
	.loc 1 3983 0
	movl	$.LC273, %eax	#, D.23636
	jmp	.L846	#
.L738:
	.loc 1 3985 0
	movl	$.LC274, %eax	#, D.23636
	jmp	.L846	#
.L739:
	.loc 1 3987 0
	movl	$.LC275, %eax	#, D.23636
	jmp	.L846	#
.L736:
	.loc 1 3989 0
	movl	$.LC276, %eax	#, D.23636
	jmp	.L846	#
.L740:
	.loc 1 3991 0
	movl	$.LC277, %eax	#, D.23636
	jmp	.L846	#
.L741:
	.loc 1 3993 0
	movl	$.LC278, %eax	#, D.23636
	jmp	.L846	#
.L727:
	.loc 1 3995 0
	movl	$.LC279, %eax	#, D.23636
	jmp	.L846	#
.L746:
	.loc 1 3997 0
	movl	$.LC280, %eax	#, D.23636
	jmp	.L846	#
.L747:
	.loc 1 3999 0
	movl	$.LC281, %eax	#, D.23636
	jmp	.L846	#
.L744:
	.loc 1 4001 0
	movl	$.LC282, %eax	#, D.23636
	jmp	.L846	#
.L748:
	.loc 1 4003 0
	movl	$.LC283, %eax	#, D.23636
	jmp	.L846	#
.L749:
	.loc 1 4005 0
	movl	$.LC284, %eax	#, D.23636
	jmp	.L846	#
.L742:
	.loc 1 4007 0
	movl	$.LC285, %eax	#, D.23636
	jmp	.L846	#
.L752:
	.loc 1 4009 0
	movl	$.LC286, %eax	#, D.23636
	jmp	.L846	#
.L753:
	.loc 1 4011 0
	movl	$.LC287, %eax	#, D.23636
	jmp	.L846	#
.L750:
	.loc 1 4013 0
	movl	$.LC288, %eax	#, D.23636
	jmp	.L846	#
.L754:
	.loc 1 4015 0
	movl	$.LC289, %eax	#, D.23636
	jmp	.L846	#
.L755:
	.loc 1 4017 0
	movl	$.LC290, %eax	#, D.23636
	jmp	.L846	#
.L725:
	.loc 1 4019 0
	movl	$.LC291, %eax	#, D.23636
	jmp	.L846	#
.L762:
	.loc 1 4021 0
	movl	$.LC292, %eax	#, D.23636
	jmp	.L846	#
.L763:
	.loc 1 4023 0
	movl	$.LC293, %eax	#, D.23636
	jmp	.L846	#
.L760:
	.loc 1 4025 0
	movl	$.LC294, %eax	#, D.23636
	jmp	.L846	#
.L764:
	.loc 1 4027 0
	movl	$.LC295, %eax	#, D.23636
	jmp	.L846	#
.L765:
	.loc 1 4029 0
	movl	$.LC296, %eax	#, D.23636
	jmp	.L846	#
.L758:
	.loc 1 4031 0
	movl	$.LC297, %eax	#, D.23636
	jmp	.L846	#
.L768:
	.loc 1 4033 0
	movl	$.LC298, %eax	#, D.23636
	jmp	.L846	#
.L769:
	.loc 1 4035 0
	movl	$.LC299, %eax	#, D.23636
	jmp	.L846	#
.L766:
	.loc 1 4037 0
	movl	$.LC300, %eax	#, D.23636
	jmp	.L846	#
.L770:
	.loc 1 4039 0
	movl	$.LC301, %eax	#, D.23636
	jmp	.L846	#
.L771:
	.loc 1 4041 0
	movl	$.LC302, %eax	#, D.23636
	jmp	.L846	#
.L756:
	.loc 1 4043 0
	movl	$.LC303, %eax	#, D.23636
	jmp	.L846	#
.L776:
	.loc 1 4045 0
	movl	$.LC304, %eax	#, D.23636
	jmp	.L846	#
.L777:
	.loc 1 4047 0
	movl	$.LC305, %eax	#, D.23636
	jmp	.L846	#
.L774:
	.loc 1 4049 0
	movl	$.LC306, %eax	#, D.23636
	jmp	.L846	#
.L778:
	.loc 1 4051 0
	movl	$.LC307, %eax	#, D.23636
	jmp	.L846	#
.L779:
	.loc 1 4053 0
	movl	$.LC308, %eax	#, D.23636
	jmp	.L846	#
.L772:
	.loc 1 4055 0
	movl	$.LC309, %eax	#, D.23636
	jmp	.L846	#
.L782:
	.loc 1 4057 0
	movl	$.LC310, %eax	#, D.23636
	jmp	.L846	#
.L783:
	.loc 1 4059 0
	movl	$.LC311, %eax	#, D.23636
	jmp	.L846	#
.L780:
	.loc 1 4061 0
	movl	$.LC312, %eax	#, D.23636
	jmp	.L846	#
.L784:
	.loc 1 4063 0
	movl	$.LC313, %eax	#, D.23636
	jmp	.L846	#
.L785:
	.loc 1 4065 0
	movl	$.LC314, %eax	#, D.23636
	jmp	.L846	#
.L723:
	.loc 1 4067 0
	movl	$.LC315, %eax	#, D.23636
	jmp	.L846	#
.L793:
	.loc 1 4069 0
	movl	$.LC316, %eax	#, D.23636
	jmp	.L846	#
.L792:
	.loc 1 4071 0
	movl	$.LC317, %eax	#, D.23636
	jmp	.L846	#
.L794:
	.loc 1 4073 0
	movl	$.LC318, %eax	#, D.23636
	jmp	.L846	#
.L795:
	.loc 1 4075 0
	movl	$.LC319, %eax	#, D.23636
	jmp	.L846	#
.L790:
	.loc 1 4077 0
	movl	$.LC320, %eax	#, D.23636
	jmp	.L846	#
.L798:
	.loc 1 4079 0
	movl	$.LC321, %eax	#, D.23636
	jmp	.L846	#
.L799:
	.loc 1 4081 0
	movl	$.LC322, %eax	#, D.23636
	jmp	.L846	#
.L796:
	.loc 1 4083 0
	movl	$.LC323, %eax	#, D.23636
	jmp	.L846	#
.L800:
	.loc 1 4085 0
	movl	$.LC324, %eax	#, D.23636
	jmp	.L846	#
.L801:
	.loc 1 4087 0
	movl	$.LC325, %eax	#, D.23636
	jmp	.L846	#
.L788:
	.loc 1 4089 0
	movl	$.LC326, %eax	#, D.23636
	jmp	.L846	#
.L806:
	.loc 1 4091 0
	movl	$.LC327, %eax	#, D.23636
	jmp	.L846	#
.L807:
	.loc 1 4093 0
	movl	$.LC328, %eax	#, D.23636
	jmp	.L846	#
.L804:
	.loc 1 4095 0
	movl	$.LC329, %eax	#, D.23636
	jmp	.L846	#
.L808:
	.loc 1 4097 0
	movl	$.LC330, %eax	#, D.23636
	jmp	.L846	#
.L809:
	.loc 1 4100 0
	movl	$.LC331, %eax	#, D.23636
	jmp	.L846	#
.L802:
	.loc 1 4102 0
	movl	$.LC332, %eax	#, D.23636
	jmp	.L846	#
.L812:
	.loc 1 4104 0
	movl	$.LC333, %eax	#, D.23636
	jmp	.L846	#
.L813:
	.loc 1 4106 0
	movl	$.LC334, %eax	#, D.23636
	jmp	.L846	#
.L810:
	.loc 1 4108 0
	movl	$.LC335, %eax	#, D.23636
	jmp	.L846	#
.L814:
	.loc 1 4110 0
	movl	$.LC336, %eax	#, D.23636
	jmp	.L846	#
.L815:
	.loc 1 4112 0
	movl	$.LC337, %eax	#, D.23636
	jmp	.L846	#
.L786:
	.loc 1 4114 0
	movl	$.LC338, %eax	#, D.23636
	jmp	.L846	#
.L822:
	.loc 1 4116 0
	movl	$.LC339, %eax	#, D.23636
	jmp	.L846	#
.L823:
	.loc 1 4118 0
	movl	$.LC340, %eax	#, D.23636
	jmp	.L846	#
.L820:
	.loc 1 4120 0
	movl	$.LC341, %eax	#, D.23636
	jmp	.L846	#
.L824:
	.loc 1 4122 0
	movl	$.LC342, %eax	#, D.23636
	jmp	.L846	#
.L825:
	.loc 1 4125 0
	movl	$.LC343, %eax	#, D.23636
	jmp	.L846	#
.L818:
	.loc 1 4127 0
	movl	$.LC344, %eax	#, D.23636
	jmp	.L846	#
.L828:
	.loc 1 4129 0
	movl	$.LC345, %eax	#, D.23636
	jmp	.L846	#
.L829:
	.loc 1 4131 0
	movl	$.LC346, %eax	#, D.23636
	jmp	.L846	#
.L826:
	.loc 1 4133 0
	movl	$.LC347, %eax	#, D.23636
	jmp	.L846	#
.L830:
	.loc 1 4135 0
	movl	$.LC348, %eax	#, D.23636
	jmp	.L846	#
.L831:
	.loc 1 4137 0
	movl	$.LC349, %eax	#, D.23636
	jmp	.L846	#
.L816:
	.loc 1 4139 0
	movl	$.LC350, %eax	#, D.23636
	jmp	.L846	#
.L836:
	.loc 1 4141 0
	movl	$.LC351, %eax	#, D.23636
	jmp	.L846	#
.L837:
	.loc 1 4143 0
	movl	$.LC352, %eax	#, D.23636
	jmp	.L846	#
.L834:
	.loc 1 4145 0
	movl	$.LC353, %eax	#, D.23636
	jmp	.L846	#
.L838:
	.loc 1 4148 0
	movl	$.LC354, %eax	#, D.23636
	jmp	.L846	#
.L839:
	.loc 1 4150 0
	movl	$.LC355, %eax	#, D.23636
	jmp	.L846	#
.L832:
	.loc 1 4152 0
	movl	$.LC356, %eax	#, D.23636
	jmp	.L846	#
.L842:
	.loc 1 4154 0
	movl	$.LC357, %eax	#, D.23636
	jmp	.L846	#
.L843:
	.loc 1 4156 0
	movl	$.LC358, %eax	#, D.23636
	jmp	.L846	#
.L840:
	.loc 1 4158 0
	movl	$.LC359, %eax	#, D.23636
	jmp	.L846	#
.L844:
	.loc 1 4160 0
	movl	$.LC360, %eax	#, D.23636
	jmp	.L846	#
.L845:
	.loc 1 4163 0
	movl	$.LC361, %eax	#, D.23636
	jmp	.L846	#
.L722:
	.loc 1 4166 0
	movl	$.LC362, %eax	#, D.23636
.L846:
	.loc 1 4168 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE51:
	.size	dwarf_attr_name, .-dwarf_attr_name
	.section	.rodata
.LC363:
	.string	"DW_FORM_addr"
.LC364:
	.string	"DW_FORM_block2"
.LC365:
	.string	"DW_FORM_block4"
.LC366:
	.string	"DW_FORM_data2"
.LC367:
	.string	"DW_FORM_data4"
.LC368:
	.string	"DW_FORM_data8"
.LC369:
	.string	"DW_FORM_string"
.LC370:
	.string	"DW_FORM_block"
.LC371:
	.string	"DW_FORM_block1"
.LC372:
	.string	"DW_FORM_data1"
.LC373:
	.string	"DW_FORM_flag"
.LC374:
	.string	"DW_FORM_sdata"
.LC375:
	.string	"DW_FORM_strp"
.LC376:
	.string	"DW_FORM_udata"
.LC377:
	.string	"DW_FORM_ref_addr"
.LC378:
	.string	"DW_FORM_ref1"
.LC379:
	.string	"DW_FORM_ref2"
.LC380:
	.string	"DW_FORM_ref4"
.LC381:
	.string	"DW_FORM_ref8"
.LC382:
	.string	"DW_FORM_ref_udata"
.LC383:
	.string	"DW_FORM_indirect"
.LC384:
	.string	"DW_FORM_<unknown>"
	.text
	.type	dwarf_form_name, @function
dwarf_form_name:
.LFB52:
	.loc 1 4175 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)	# form, form
	.loc 1 4176 0
	cmpl	$22, -4(%rbp)	#, form
	ja	.L848	#,
	movl	-4(%rbp), %eax	# form, tmp61
	movq	.L850(,%rax,8), %rax	#, tmp62
	jmp	*%rax	# tmp62
	.section	.rodata
	.align 8
	.align 4
.L850:
	.quad	.L848
	.quad	.L849
	.quad	.L848
	.quad	.L851
	.quad	.L852
	.quad	.L853
	.quad	.L854
	.quad	.L855
	.quad	.L856
	.quad	.L857
	.quad	.L858
	.quad	.L859
	.quad	.L860
	.quad	.L861
	.quad	.L862
	.quad	.L863
	.quad	.L864
	.quad	.L865
	.quad	.L866
	.quad	.L867
	.quad	.L868
	.quad	.L869
	.quad	.L870
	.text
.L849:
	.loc 1 4179 0
	movl	$.LC363, %eax	#, D.23761
	jmp	.L871	#
.L851:
	.loc 1 4181 0
	movl	$.LC364, %eax	#, D.23761
	jmp	.L871	#
.L852:
	.loc 1 4183 0
	movl	$.LC365, %eax	#, D.23761
	jmp	.L871	#
.L853:
	.loc 1 4185 0
	movl	$.LC366, %eax	#, D.23761
	jmp	.L871	#
.L854:
	.loc 1 4187 0
	movl	$.LC367, %eax	#, D.23761
	jmp	.L871	#
.L855:
	.loc 1 4189 0
	movl	$.LC368, %eax	#, D.23761
	jmp	.L871	#
.L856:
	.loc 1 4191 0
	movl	$.LC369, %eax	#, D.23761
	jmp	.L871	#
.L857:
	.loc 1 4193 0
	movl	$.LC370, %eax	#, D.23761
	jmp	.L871	#
.L858:
	.loc 1 4195 0
	movl	$.LC371, %eax	#, D.23761
	jmp	.L871	#
.L859:
	.loc 1 4197 0
	movl	$.LC372, %eax	#, D.23761
	jmp	.L871	#
.L860:
	.loc 1 4199 0
	movl	$.LC373, %eax	#, D.23761
	jmp	.L871	#
.L861:
	.loc 1 4201 0
	movl	$.LC374, %eax	#, D.23761
	jmp	.L871	#
.L862:
	.loc 1 4203 0
	movl	$.LC375, %eax	#, D.23761
	jmp	.L871	#
.L863:
	.loc 1 4205 0
	movl	$.LC376, %eax	#, D.23761
	jmp	.L871	#
.L864:
	.loc 1 4207 0
	movl	$.LC377, %eax	#, D.23761
	jmp	.L871	#
.L865:
	.loc 1 4209 0
	movl	$.LC378, %eax	#, D.23761
	jmp	.L871	#
.L866:
	.loc 1 4211 0
	movl	$.LC379, %eax	#, D.23761
	jmp	.L871	#
.L867:
	.loc 1 4213 0
	movl	$.LC380, %eax	#, D.23761
	jmp	.L871	#
.L868:
	.loc 1 4215 0
	movl	$.LC381, %eax	#, D.23761
	jmp	.L871	#
.L869:
	.loc 1 4217 0
	movl	$.LC382, %eax	#, D.23761
	jmp	.L871	#
.L870:
	.loc 1 4219 0
	movl	$.LC383, %eax	#, D.23761
	jmp	.L871	#
.L848:
	.loc 1 4221 0
	movl	$.LC384, %eax	#, D.23761
.L871:
	.loc 1 4223 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE52:
	.size	dwarf_form_name, .-dwarf_form_name
	.type	decl_ultimate_origin, @function
decl_ultimate_origin:
.LFB53:
	.loc 1 4265 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# decl, decl
	.loc 1 4269 0
	movq	-8(%rbp), %rax	# decl, tmp64
	movzbl	49(%rax), %eax	# *decl_2(D), D.23785
	andl	$-128, %eax	#, D.23785
	testb	%al, %al	# D.23785
	je	.L873	#,
	.loc 1 4269 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# decl, tmp65
	movq	112(%rax), %rax	# decl_2(D)->decl.abstract_origin, D.23786
	cmpq	-8(%rbp), %rax	# decl, D.23786
	jne	.L873	#,
	.loc 1 4270 0 is_stmt 1
	movl	$0, %eax	#, D.23784
	jmp	.L874	#
.L873:
	.loc 1 4279 0
	movq	-8(%rbp), %rax	# decl, tmp66
	movq	112(%rax), %rax	# decl_2(D)->decl.abstract_origin, D.23784
.L874:
	.loc 1 4280 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE53:
	.size	decl_ultimate_origin, .-decl_ultimate_origin
	.type	block_ultimate_origin, @function
block_ultimate_origin:
.LFB54:
	.loc 1 4291 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)	# block, block
	.loc 1 4292 0
	movq	-40(%rbp), %rax	# block, tmp65
	movq	56(%rax), %rax	# block_4(D)->block.abstract_origin, tmp66
	movq	%rax, -16(%rbp)	# tmp66, immediate_origin
	.loc 1 4297 0
	movq	-40(%rbp), %rax	# block, tmp67
	movzbl	24(%rax), %eax	# *block_4(D), D.23788
	andl	$2, %eax	#, D.23788
	testb	%al, %al	# D.23788
	je	.L876	#,
	.loc 1 4297 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# immediate_origin, tmp68
	cmpq	-40(%rbp), %rax	# block, tmp68
	jne	.L876	#,
	.loc 1 4298 0 is_stmt 1
	movl	$0, %eax	#, D.23787
	jmp	.L877	#
.L876:
	.loc 1 4300 0
	cmpq	$0, -16(%rbp)	#, immediate_origin
	jne	.L878	#,
	.loc 1 4301 0
	movl	$0, %eax	#, D.23787
	jmp	.L877	#
.L878:
.LBB18:
	.loc 1 4305 0
	movq	-16(%rbp), %rax	# immediate_origin, tmp69
	movq	%rax, -24(%rbp)	# tmp69, lookahead
.L882:
	.loc 1 4309 0
	movq	-24(%rbp), %rax	# lookahead, tmp70
	movq	%rax, -8(%rbp)	# tmp70, ret_val
	.loc 1 4310 0
	movq	-8(%rbp), %rax	# ret_val, tmp71
	movzbl	16(%rax), %eax	# ret_val_11->common.code, D.23788
	.loc 1 4311 0
	cmpb	$4, %al	#, D.23788
	jne	.L879	#,
	.loc 1 4311 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# ret_val, tmp72
	movq	56(%rax), %rax	# ret_val_11->block.abstract_origin, iftmp.168
	jmp	.L880	#
.L879:
	.loc 1 4311 0 discriminator 2
	movl	$0, %eax	#, iftmp.168
.L880:
	.loc 1 4310 0 is_stmt 1
	movq	%rax, -24(%rbp)	# iftmp.168, lookahead
	.loc 1 4313 0
	cmpq	$0, -24(%rbp)	#, lookahead
	je	.L881	#,
	.loc 1 4313 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# lookahead, tmp73
	cmpq	-8(%rbp), %rax	# ret_val, tmp73
	jne	.L882	#,
.L881:
	.loc 1 4315 0 is_stmt 1
	movq	-8(%rbp), %rax	# ret_val, D.23787
.L877:
.LBE18:
	.loc 1 4317 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE54:
	.size	block_ultimate_origin, .-block_ultimate_origin
	.type	decl_class_context, @function
decl_class_context:
.LFB55:
	.loc 1 4326 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# decl, decl
	.loc 1 4327 0
	movq	$0, -8(%rbp)	#, context
	.loc 1 4329 0
	movq	-24(%rbp), %rax	# decl, tmp70
	movzbl	16(%rax), %eax	# decl_4(D)->common.code, D.23789
	cmpb	$30, %al	#, D.23789
	jne	.L884	#,
	.loc 1 4329 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# decl, tmp71
	movq	184(%rax), %rax	# decl_4(D)->decl.vindex, D.23790
	testq	%rax, %rax	# D.23790
	jne	.L885	#,
.L884:
	.loc 1 4330 0 is_stmt 1
	movq	-24(%rbp), %rax	# decl, tmp72
	movq	80(%rax), %rax	# decl_4(D)->decl.context, tmp73
	movq	%rax, -8(%rbp)	# tmp73, context
	jmp	.L886	#
.L885:
	.loc 1 4332 0
	movq	-24(%rbp), %rax	# decl, tmp74
	movq	8(%rax), %rax	# decl_4(D)->common.type, D.23790
	movq	24(%rax), %rax	# _7->type.values, D.23790
	movq	32(%rax), %rax	# _8->list.value, D.23790
	movq	8(%rax), %rax	# _9->common.type, D.23790
	movq	128(%rax), %rax	# _10->type.main_variant, tmp75
	movq	%rax, -8(%rbp)	# tmp75, context
.L886:
	.loc 1 4335 0
	cmpq	$0, -8(%rbp)	#, context
	je	.L887	#,
	.loc 1 4335 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# context, tmp76
	movzbl	16(%rax), %eax	# context_1->common.code, D.23789
	movzbl	%al, %eax	# D.23789, D.23791
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.23792
	cmpb	$116, %al	#, D.23792
	je	.L887	#,
	.loc 1 4336 0 is_stmt 1
	movq	$0, -8(%rbp)	#, context
.L887:
	.loc 1 4338 0
	movq	-8(%rbp), %rax	# context, D.23793
	.loc 1 4339 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE55:
	.size	decl_class_context, .-decl_class_context
	.type	add_dwarf_attr, @function
add_dwarf_attr:
.LFB56:
	.loc 1 4348 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# die, die
	movq	%rsi, -16(%rbp)	# attr, attr
	.loc 1 4349 0
	cmpq	$0, -8(%rbp)	#, die
	je	.L889	#,
	.loc 1 4349 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, attr
	je	.L889	#,
	.loc 1 4351 0 is_stmt 1
	movq	-8(%rbp), %rax	# die, tmp60
	movq	16(%rax), %rdx	# die_1(D)->die_attr, D.23794
	movq	-16(%rbp), %rax	# attr, tmp61
	movq	%rdx, 8(%rax)	# D.23794, attr_2(D)->dw_attr_next
	.loc 1 4352 0
	movq	-8(%rbp), %rax	# die, tmp62
	movq	-16(%rbp), %rdx	# attr, tmp63
	movq	%rdx, 16(%rax)	# tmp63, die_1(D)->die_attr
.L889:
	.loc 1 4354 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE56:
	.size	add_dwarf_attr, .-add_dwarf_attr
	.type	AT_class, @function
AT_class:
.LFB57:
	.loc 1 4359 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4360 0
	movq	-8(%rbp), %rax	# a, tmp61
	movl	16(%rax), %eax	# a_1(D)->dw_attr_val.val_class, D.23795
	.loc 1 4361 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE57:
	.size	AT_class, .-AT_class
	.type	add_AT_flag, @function
add_AT_flag:
.LFB58:
	.loc 1 4370 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movl	%edx, -32(%rbp)	# flag, flag
	.loc 1 4371 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp60, attr
	.loc 1 4373 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4374 0
	movq	-8(%rbp), %rax	# attr, tmp62
	movl	-28(%rbp), %edx	# attr_kind, tmp63
	movl	%edx, (%rax)	# tmp63, attr_1->dw_attr
	.loc 1 4375 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movl	$9, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4376 0
	movl	-32(%rbp), %eax	# flag, tmp65
	movl	%eax, %edx	# tmp65, D.23796
	movq	-8(%rbp), %rax	# attr, tmp66
	movb	%dl, 24(%rax)	# D.23796, attr_1->dw_attr_val.v.val_flag
	.loc 1 4377 0
	movq	-8(%rbp), %rdx	# attr, tmp67
	movq	-24(%rbp), %rax	# die, tmp68
	movq	%rdx, %rsi	# tmp67,
	movq	%rax, %rdi	# tmp68,
	call	add_dwarf_attr	#
	.loc 1 4378 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE58:
	.size	add_AT_flag, .-add_AT_flag
	.type	AT_flag, @function
AT_flag:
.LFB59:
	.loc 1 4383 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4384 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L895	#,
	.loc 1 4384 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp63
	movq	%rax, %rdi	# tmp63,
	call	AT_class	#
	cmpl	$9, %eax	#, D.23797
	jne	.L895	#,
	.loc 1 4385 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp64
	movzbl	24(%rax), %eax	# a_1(D)->dw_attr_val.v.val_flag, D.23798
	movzbl	%al, %eax	# D.23798, D.23799
	jmp	.L897	#
.L895:
	.loc 1 4387 0
	movl	$__FUNCTION__.15489, %edx	#,
	movl	$4387, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L897:
	.loc 1 4388 0 discriminator 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE59:
	.size	AT_flag, .-AT_flag
	.type	add_AT_int, @function
add_AT_int:
.LFB60:
	.loc 1 4397 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# int_val, int_val
	.loc 1 4398 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp59, attr
	.loc 1 4400 0
	movq	-8(%rbp), %rax	# attr, tmp60
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4401 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movl	-28(%rbp), %edx	# attr_kind, tmp62
	movl	%edx, (%rax)	# tmp62, attr_1->dw_attr
	.loc 1 4402 0
	movq	-8(%rbp), %rax	# attr, tmp63
	movl	$5, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4403 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movq	-40(%rbp), %rdx	# int_val, tmp65
	movq	%rdx, 24(%rax)	# tmp65, attr_1->dw_attr_val.v.val_int
	.loc 1 4404 0
	movq	-8(%rbp), %rdx	# attr, tmp66
	movq	-24(%rbp), %rax	# die, tmp67
	movq	%rdx, %rsi	# tmp66,
	movq	%rax, %rdi	# tmp67,
	call	add_dwarf_attr	#
	.loc 1 4405 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE60:
	.size	add_AT_int, .-add_AT_int
	.type	AT_int, @function
AT_int:
.LFB61:
	.loc 1 4410 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4411 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L900	#,
	.loc 1 4411 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp62
	movq	%rax, %rdi	# tmp62,
	call	AT_class	#
	cmpl	$5, %eax	#, D.23800
	jne	.L900	#,
	.loc 1 4412 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp63
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_int, D.23801
	jmp	.L902	#
.L900:
	.loc 1 4414 0
	movl	$__FUNCTION__.15499, %edx	#,
	movl	$4414, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L902:
	.loc 1 4415 0 discriminator 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE61:
	.size	AT_int, .-AT_int
	.type	add_AT_unsigned, @function
add_AT_unsigned:
.LFB62:
	.loc 1 4424 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# unsigned_val, unsigned_val
	.loc 1 4425 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp59, attr
	.loc 1 4427 0
	movq	-8(%rbp), %rax	# attr, tmp60
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4428 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movl	-28(%rbp), %edx	# attr_kind, tmp62
	movl	%edx, (%rax)	# tmp62, attr_1->dw_attr
	.loc 1 4429 0
	movq	-8(%rbp), %rax	# attr, tmp63
	movl	$6, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4430 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movq	-40(%rbp), %rdx	# unsigned_val, tmp65
	movq	%rdx, 24(%rax)	# tmp65, attr_1->dw_attr_val.v.val_unsigned
	.loc 1 4431 0
	movq	-8(%rbp), %rdx	# attr, tmp66
	movq	-24(%rbp), %rax	# die, tmp67
	movq	%rdx, %rsi	# tmp66,
	movq	%rax, %rdi	# tmp67,
	call	add_dwarf_attr	#
	.loc 1 4432 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE62:
	.size	add_AT_unsigned, .-add_AT_unsigned
	.type	AT_unsigned, @function
AT_unsigned:
.LFB63:
	.loc 1 4437 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4438 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L905	#,
	.loc 1 4438 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp62
	movq	%rax, %rdi	# tmp62,
	call	AT_class	#
	cmpl	$6, %eax	#, D.23802
	jne	.L905	#,
	.loc 1 4439 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp63
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_unsigned, D.23803
	jmp	.L907	#
.L905:
	.loc 1 4441 0
	movl	$__FUNCTION__.15509, %edx	#,
	movl	$4441, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L907:
	.loc 1 4442 0 discriminator 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE63:
	.size	AT_unsigned, .-AT_unsigned
	.type	add_AT_long_long, @function
add_AT_long_long:
.LFB64:
	.loc 1 4452 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# val_hi, val_hi
	movq	%rcx, -48(%rbp)	# val_low, val_low
	.loc 1 4453 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp59, attr
	.loc 1 4455 0
	movq	-8(%rbp), %rax	# attr, tmp60
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4456 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movl	-28(%rbp), %edx	# attr_kind, tmp62
	movl	%edx, (%rax)	# tmp62, attr_1->dw_attr
	.loc 1 4457 0
	movq	-8(%rbp), %rax	# attr, tmp63
	movl	$7, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4458 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movq	-40(%rbp), %rdx	# val_hi, tmp65
	movq	%rdx, 24(%rax)	# tmp65, attr_1->dw_attr_val.v.val_long_long.hi
	.loc 1 4459 0
	movq	-8(%rbp), %rax	# attr, tmp66
	movq	-48(%rbp), %rdx	# val_low, tmp67
	movq	%rdx, 32(%rax)	# tmp67, attr_1->dw_attr_val.v.val_long_long.low
	.loc 1 4460 0
	movq	-8(%rbp), %rdx	# attr, tmp68
	movq	-24(%rbp), %rax	# die, tmp69
	movq	%rdx, %rsi	# tmp68,
	movq	%rax, %rdi	# tmp69,
	call	add_dwarf_attr	#
	.loc 1 4461 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE64:
	.size	add_AT_long_long, .-add_AT_long_long
	.type	add_AT_float, @function
add_AT_float:
.LFB65:
	.loc 1 4471 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movl	%edx, -32(%rbp)	# length, length
	movq	%rcx, -40(%rbp)	# array, array
	.loc 1 4472 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp59, attr
	.loc 1 4474 0
	movq	-8(%rbp), %rax	# attr, tmp60
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4475 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movl	-28(%rbp), %edx	# attr_kind, tmp62
	movl	%edx, (%rax)	# tmp62, attr_1->dw_attr
	.loc 1 4476 0
	movq	-8(%rbp), %rax	# attr, tmp63
	movl	$8, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4477 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movl	-32(%rbp), %edx	# length, tmp65
	movl	%edx, 32(%rax)	# tmp65, attr_1->dw_attr_val.v.val_float.length
	.loc 1 4478 0
	movq	-8(%rbp), %rax	# attr, tmp66
	movq	-40(%rbp), %rdx	# array, tmp67
	movq	%rdx, 24(%rax)	# tmp67, attr_1->dw_attr_val.v.val_float.array
	.loc 1 4479 0
	movq	-8(%rbp), %rdx	# attr, tmp68
	movq	-24(%rbp), %rax	# die, tmp69
	movq	%rdx, %rsi	# tmp68,
	movq	%rax, %rdi	# tmp69,
	call	add_dwarf_attr	#
	.loc 1 4480 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE65:
	.size	add_AT_float, .-add_AT_float
	.type	add_AT_string, @function
add_AT_string:
.LFB66:
	.loc 1 4489 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# str, str
	.loc 1 4490 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -16(%rbp)	# tmp67, attr
	.loc 1 4493 0
	movq	debug_str_hash(%rip), %rax	# debug_str_hash, debug_str_hash.403
	testq	%rax, %rax	# debug_str_hash.403
	jne	.L911	#,
	.loc 1 4495 0
	movl	$10, %edi	#,
	call	ht_create	#
	movq	%rax, debug_str_hash(%rip)	# debug_str_hash.404, debug_str_hash
	.loc 1 4496 0
	movq	debug_str_hash(%rip), %rax	# debug_str_hash, debug_str_hash.405
	movq	$indirect_string_alloc, 96(%rax)	#, debug_str_hash.405_4->alloc_node
.L911:
	.loc 1 4501 0
	movq	-40(%rbp), %rax	# str, tmp68
	movq	%rax, %rdi	# tmp68,
	call	strlen	#
	.loc 1 4500 0
	movl	%eax, %edx	# D.23804, D.23805
	movq	debug_str_hash(%rip), %rax	# debug_str_hash, debug_str_hash.406
	.loc 1 4499 0
	movq	-40(%rbp), %rsi	# str, tmp69
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# debug_str_hash.406,
	call	ht_lookup	#
	movq	%rax, -8(%rbp)	# tmp70, node
	.loc 1 4502 0
	movq	-8(%rbp), %rax	# node, tmp71
	movl	16(%rax), %eax	# node_9->refcount, D.23805
	leal	1(%rax), %edx	#, D.23805
	movq	-8(%rbp), %rax	# node, tmp72
	movl	%edx, 16(%rax)	# D.23805, node_9->refcount
	.loc 1 4504 0
	movq	-16(%rbp), %rax	# attr, tmp73
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4505 0
	movq	-16(%rbp), %rax	# attr, tmp74
	movl	-28(%rbp), %edx	# attr_kind, tmp75
	movl	%edx, (%rax)	# tmp75, attr_1->dw_attr
	.loc 1 4506 0
	movq	-16(%rbp), %rax	# attr, tmp76
	movl	$14, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4507 0
	movq	-16(%rbp), %rax	# attr, tmp77
	movq	-8(%rbp), %rdx	# node, tmp78
	movq	%rdx, 24(%rax)	# tmp78, attr_1->dw_attr_val.v.val_str
	.loc 1 4508 0
	movq	-16(%rbp), %rdx	# attr, tmp79
	movq	-24(%rbp), %rax	# die, tmp80
	movq	%rdx, %rsi	# tmp79,
	movq	%rax, %rdi	# tmp80,
	call	add_dwarf_attr	#
	.loc 1 4509 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE66:
	.size	add_AT_string, .-add_AT_string
	.type	AT_string, @function
AT_string:
.LFB67:
	.loc 1 4514 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4515 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L913	#,
	.loc 1 4515 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp63
	movq	%rax, %rdi	# tmp63,
	call	AT_class	#
	cmpl	$14, %eax	#, D.23806
	jne	.L913	#,
	.loc 1 4516 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp64
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_str, D.23807
	movq	8(%rax), %rax	# _3->id.str, D.23808
	jmp	.L915	#
.L913:
	.loc 1 4518 0
	movl	$__FUNCTION__.15534, %edx	#,
	movl	$4518, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L915:
	.loc 1 4519 0 discriminator 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE67:
	.size	AT_string, .-AT_string
	.section	.rodata
.LC385:
	.string	"LC"
	.text
	.type	AT_string_form, @function
AT_string_form:
.LFB68:
	.loc 1 4527 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# a, a
	.loc 1 4527 0
	movq	%fs:40, %rax	#, tmp86
	movq	%rax, -24(%rbp)	# tmp86, D.23813
	xorl	%eax, %eax	# tmp86
	.loc 1 4528 0
	cmpq	$0, -88(%rbp)	#, a
	je	.L917	#,
	.loc 1 4528 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# a, tmp71
	movq	%rax, %rdi	# tmp71,
	call	AT_class	#
	cmpl	$14, %eax	#, D.23810
	jne	.L917	#,
.LBB19:
	.loc 1 4535 0 is_stmt 1
	movq	-88(%rbp), %rax	# a, tmp72
	movq	24(%rax), %rax	# a_2(D)->dw_attr_val.v.val_str, tmp73
	movq	%rax, -72(%rbp)	# tmp73, node
	.loc 1 4536 0
	movq	-72(%rbp), %rax	# node, tmp74
	movl	20(%rax), %eax	# node_4->form, D.23811
	testl	%eax, %eax	# D.23811
	je	.L918	#,
	.loc 1 4537 0
	movq	-72(%rbp), %rax	# node, tmp75
	movl	20(%rax), %eax	# node_4->form, D.23811
	jmp	.L919	#
.L918:
	.loc 1 4539 0
	movq	-72(%rbp), %rax	# node, tmp76
	movl	(%rax), %eax	# node_4->id.len, D.23811
	addl	$1, %eax	#, tmp77
	movl	%eax, -76(%rbp)	# tmp77, len
	.loc 1 4543 0
	cmpl	$4, -76(%rbp)	#, len
	jbe	.L920	#,
	.loc 1 4543 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# node, tmp78
	movl	16(%rax), %eax	# node_4->refcount, D.23811
	testl	%eax, %eax	# D.23811
	jne	.L921	#,
.L920:
	.loc 1 4544 0 is_stmt 1
	movq	-72(%rbp), %rax	# node, tmp79
	movl	$8, 20(%rax)	#, node_4->form
	movl	$8, %eax	#, D.23809
	jmp	.L919	#
.L921:
	.loc 1 4553 0
	movl	const_labelno(%rip), %eax	# const_labelno, const_labelno.169
	movl	%eax, %edx	# const_labelno.169, const_labelno.170
	leaq	-64(%rbp), %rax	#, tmp80
	movl	%edx, %ecx	# const_labelno.170,
	movl	$.LC385, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp80,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 4554 0
	movl	const_labelno(%rip), %eax	# const_labelno, const_labelno.171
	addl	$1, %eax	#, const_labelno.172
	movl	%eax, const_labelno(%rip)	# const_labelno.172, const_labelno
	.loc 1 4555 0
	leaq	-64(%rbp), %rax	#, tmp81
	movq	%rax, %rdi	# tmp81,
	call	xstrdup	#
	movq	%rax, %rdx	# tmp82, D.23812
	movq	-72(%rbp), %rax	# node, tmp83
	movq	%rdx, 24(%rax)	# D.23812, node_4->label
	.loc 1 4557 0
	movq	-72(%rbp), %rax	# node, tmp84
	movl	$14, 20(%rax)	#, node_4->form
	movl	$14, %eax	#, D.23809
.L919:
.LBE19:
	.loc 1 4561 0
	movq	-24(%rbp), %rbx	# D.23813, tmp87
	xorq	%fs:40, %rbx	#, tmp87
	je	.L923	#,
	jmp	.L924	#
.L917:
	.loc 1 4560 0
	movl	$__FUNCTION__.15543, %edx	#,
	movl	$4560, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L924:
	.loc 1 4561 0
	call	__stack_chk_fail	#
.L923:
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE68:
	.size	AT_string_form, .-AT_string_form
	.type	add_AT_die_ref, @function
add_AT_die_ref:
.LFB69:
	.loc 1 4570 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# targ_die, targ_die
	.loc 1 4571 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp59, attr
	.loc 1 4573 0
	movq	-8(%rbp), %rax	# attr, tmp60
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4574 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movl	-28(%rbp), %edx	# attr_kind, tmp62
	movl	%edx, (%rax)	# tmp62, attr_1->dw_attr
	.loc 1 4575 0
	movq	-8(%rbp), %rax	# attr, tmp63
	movl	$10, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4576 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movq	-40(%rbp), %rdx	# targ_die, tmp65
	movq	%rdx, 24(%rax)	# tmp65, attr_1->dw_attr_val.v.val_die_ref.die
	.loc 1 4577 0
	movq	-8(%rbp), %rax	# attr, tmp66
	movl	$0, 32(%rax)	#, attr_1->dw_attr_val.v.val_die_ref.external
	.loc 1 4578 0
	movq	-8(%rbp), %rdx	# attr, tmp67
	movq	-24(%rbp), %rax	# die, tmp68
	movq	%rdx, %rsi	# tmp67,
	movq	%rax, %rdi	# tmp68,
	call	add_dwarf_attr	#
	.loc 1 4579 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE69:
	.size	add_AT_die_ref, .-add_AT_die_ref
	.type	AT_ref, @function
AT_ref:
.LFB70:
	.loc 1 4584 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4585 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L927	#,
	.loc 1 4585 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp62
	movq	%rax, %rdi	# tmp62,
	call	AT_class	#
	cmpl	$10, %eax	#, D.23815
	jne	.L927	#,
	.loc 1 4586 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp63
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_die_ref.die, D.23816
	jmp	.L929	#
.L927:
	.loc 1 4588 0
	movl	$__FUNCTION__.15553, %edx	#,
	movl	$4588, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L929:
	.loc 1 4589 0 discriminator 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE70:
	.size	AT_ref, .-AT_ref
	.type	AT_ref_external, @function
AT_ref_external:
.LFB71:
	.loc 1 4594 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$8, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4595 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L931	#,
	.loc 1 4595 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp62
	movq	%rax, %rdi	# tmp62,
	call	AT_class	#
	cmpl	$10, %eax	#, D.23818
	jne	.L931	#,
	.loc 1 4596 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp63
	movl	32(%rax), %eax	# a_2(D)->dw_attr_val.v.val_die_ref.external, D.23817
	jmp	.L932	#
.L931:
	.loc 1 4598 0
	movl	$0, %eax	#, D.23817
.L932:
	.loc 1 4599 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE71:
	.size	AT_ref_external, .-AT_ref_external
	.type	set_AT_ref_external, @function
set_AT_ref_external:
.LFB72:
	.loc 1 4605 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	movl	%esi, -12(%rbp)	# i, i
	.loc 1 4606 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L934	#,
	.loc 1 4606 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp60
	movq	%rax, %rdi	# tmp60,
	call	AT_class	#
	cmpl	$10, %eax	#, D.23819
	jne	.L934	#,
	.loc 1 4607 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp61
	movl	-12(%rbp), %edx	# i, tmp62
	movl	%edx, 32(%rax)	# tmp62, a_1(D)->dw_attr_val.v.val_die_ref.external
	jmp	.L935	#
.L934:
	.loc 1 4609 0
	movl	$__FUNCTION__.15561, %edx	#,
	movl	$4609, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L935:
	.loc 1 4610 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE72:
	.size	set_AT_ref_external, .-set_AT_ref_external
	.type	add_AT_loc, @function
add_AT_loc:
.LFB74:
	.loc 1 4636 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# loc, loc
	.loc 1 4637 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp59, attr
	.loc 1 4639 0
	movq	-8(%rbp), %rax	# attr, tmp60
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4640 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movl	-28(%rbp), %edx	# attr_kind, tmp62
	movl	%edx, (%rax)	# tmp62, attr_1->dw_attr
	.loc 1 4641 0
	movq	-8(%rbp), %rax	# attr, tmp63
	movl	$2, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4642 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movq	-40(%rbp), %rdx	# loc, tmp65
	movq	%rdx, 24(%rax)	# tmp65, attr_1->dw_attr_val.v.val_loc
	.loc 1 4643 0
	movq	-8(%rbp), %rdx	# attr, tmp66
	movq	-24(%rbp), %rax	# die, tmp67
	movq	%rdx, %rsi	# tmp66,
	movq	%rax, %rdi	# tmp67,
	call	add_dwarf_attr	#
	.loc 1 4644 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE74:
	.size	add_AT_loc, .-add_AT_loc
	.type	AT_loc, @function
AT_loc:
.LFB75:
	.loc 1 4649 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4650 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L938	#,
	.loc 1 4650 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp62
	movq	%rax, %rdi	# tmp62,
	call	AT_class	#
	cmpl	$2, %eax	#, D.23820
	jne	.L938	#,
	.loc 1 4651 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp63
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_loc, D.23821
	jmp	.L940	#
.L938:
	.loc 1 4653 0
	movl	$__FUNCTION__.15577, %edx	#,
	movl	$4653, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L940:
	.loc 1 4654 0 discriminator 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE75:
	.size	AT_loc, .-AT_loc
	.type	AT_loc_list, @function
AT_loc_list:
.LFB77:
	.loc 1 4675 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4676 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L942	#,
	.loc 1 4676 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp62
	movq	%rax, %rdi	# tmp62,
	call	AT_class	#
	cmpl	$3, %eax	#, D.23822
	jne	.L942	#,
	.loc 1 4677 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp63
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_loc_list, D.23823
	jmp	.L944	#
.L942:
	.loc 1 4679 0
	movl	$__FUNCTION__.15587, %edx	#,
	movl	$4679, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L944:
	.loc 1 4680 0 discriminator 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE77:
	.size	AT_loc_list, .-AT_loc_list
	.type	add_AT_addr, @function
add_AT_addr:
.LFB78:
	.loc 1 4689 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# addr, addr
	.loc 1 4690 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp59, attr
	.loc 1 4692 0
	movq	-8(%rbp), %rax	# attr, tmp60
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4693 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movl	-28(%rbp), %edx	# attr_kind, tmp62
	movl	%edx, (%rax)	# tmp62, attr_1->dw_attr
	.loc 1 4694 0
	movq	-8(%rbp), %rax	# attr, tmp63
	movl	$0, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4695 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movq	-40(%rbp), %rdx	# addr, tmp65
	movq	%rdx, 24(%rax)	# tmp65, attr_1->dw_attr_val.v.val_addr
	.loc 1 4696 0
	movq	-8(%rbp), %rdx	# attr, tmp66
	movq	-24(%rbp), %rax	# die, tmp67
	movq	%rdx, %rsi	# tmp66,
	movq	%rax, %rdi	# tmp67,
	call	add_dwarf_attr	#
	.loc 1 4697 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE78:
	.size	add_AT_addr, .-add_AT_addr
	.type	AT_addr, @function
AT_addr:
.LFB79:
	.loc 1 4702 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4703 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L947	#,
	.loc 1 4703 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp62
	movq	%rax, %rdi	# tmp62,
	call	AT_class	#
	testl	%eax, %eax	# D.23824
	jne	.L947	#,
	.loc 1 4704 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp63
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_addr, D.23825
	jmp	.L949	#
.L947:
	.loc 1 4706 0
	movl	$__FUNCTION__.15597, %edx	#,
	movl	$4706, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L949:
	.loc 1 4707 0 discriminator 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE79:
	.size	AT_addr, .-AT_addr
	.type	add_AT_lbl_id, @function
add_AT_lbl_id:
.LFB80:
	.loc 1 4716 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# lbl_id, lbl_id
	.loc 1 4717 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp60, attr
	.loc 1 4719 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4720 0
	movq	-8(%rbp), %rax	# attr, tmp62
	movl	-28(%rbp), %edx	# attr_kind, tmp63
	movl	%edx, (%rax)	# tmp63, attr_1->dw_attr
	.loc 1 4721 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movl	$12, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4722 0
	movq	-40(%rbp), %rax	# lbl_id, tmp65
	movq	%rax, %rdi	# tmp65,
	call	xstrdup	#
	movq	%rax, %rdx	# tmp66, D.23826
	movq	-8(%rbp), %rax	# attr, tmp67
	movq	%rdx, 24(%rax)	# D.23826, attr_1->dw_attr_val.v.val_lbl_id
	.loc 1 4723 0
	movq	-8(%rbp), %rdx	# attr, tmp68
	movq	-24(%rbp), %rax	# die, tmp69
	movq	%rdx, %rsi	# tmp68,
	movq	%rax, %rdi	# tmp69,
	call	add_dwarf_attr	#
	.loc 1 4724 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE80:
	.size	add_AT_lbl_id, .-add_AT_lbl_id
	.type	add_AT_lbl_offset, @function
add_AT_lbl_offset:
.LFB81:
	.loc 1 4733 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# label, label
	.loc 1 4734 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp60, attr
	.loc 1 4736 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4737 0
	movq	-8(%rbp), %rax	# attr, tmp62
	movl	-28(%rbp), %edx	# attr_kind, tmp63
	movl	%edx, (%rax)	# tmp63, attr_1->dw_attr
	.loc 1 4738 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movl	$13, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4739 0
	movq	-40(%rbp), %rax	# label, tmp65
	movq	%rax, %rdi	# tmp65,
	call	xstrdup	#
	movq	%rax, %rdx	# tmp66, D.23827
	movq	-8(%rbp), %rax	# attr, tmp67
	movq	%rdx, 24(%rax)	# D.23827, attr_1->dw_attr_val.v.val_lbl_id
	.loc 1 4740 0
	movq	-8(%rbp), %rdx	# attr, tmp68
	movq	-24(%rbp), %rax	# die, tmp69
	movq	%rdx, %rsi	# tmp68,
	movq	%rax, %rdi	# tmp69,
	call	add_dwarf_attr	#
	.loc 1 4741 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE81:
	.size	add_AT_lbl_offset, .-add_AT_lbl_offset
	.type	add_AT_range_list, @function
add_AT_range_list:
.LFB83:
	.loc 1 4767 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# offset, offset
	.loc 1 4768 0
	movl	$40, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp59, attr
	.loc 1 4770 0
	movq	-8(%rbp), %rax	# attr, tmp60
	movq	$0, 8(%rax)	#, attr_1->dw_attr_next
	.loc 1 4771 0
	movq	-8(%rbp), %rax	# attr, tmp61
	movl	-28(%rbp), %edx	# attr_kind, tmp62
	movl	%edx, (%rax)	# tmp62, attr_1->dw_attr
	.loc 1 4772 0
	movq	-8(%rbp), %rax	# attr, tmp63
	movl	$4, 16(%rax)	#, attr_1->dw_attr_val.val_class
	.loc 1 4773 0
	movq	-8(%rbp), %rax	# attr, tmp64
	movq	-40(%rbp), %rdx	# offset, tmp65
	movq	%rdx, 24(%rax)	# tmp65, attr_1->dw_attr_val.v.val_offset
	.loc 1 4774 0
	movq	-8(%rbp), %rdx	# attr, tmp66
	movq	-24(%rbp), %rax	# die, tmp67
	movq	%rdx, %rsi	# tmp66,
	movq	%rax, %rdi	# tmp67,
	call	add_dwarf_attr	#
	.loc 1 4775 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE83:
	.size	add_AT_range_list, .-add_AT_range_list
	.type	AT_lbl, @function
AT_lbl:
.LFB84:
	.loc 1 4780 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4781 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L954	#,
	.loc 1 4781 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp63
	movq	%rax, %rdi	# tmp63,
	call	AT_class	#
	cmpl	$12, %eax	#, D.23828
	je	.L955	#,
	.loc 1 4782 0 is_stmt 1
	movq	-8(%rbp), %rax	# a, tmp64
	movq	%rax, %rdi	# tmp64,
	call	AT_class	#
	cmpl	$13, %eax	#, D.23828
	jne	.L954	#,
.L955:
	.loc 1 4783 0
	movq	-8(%rbp), %rax	# a, tmp65
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_lbl_id, D.23829
	jmp	.L957	#
.L954:
	.loc 1 4785 0
	movl	$__FUNCTION__.15625, %edx	#,
	movl	$4785, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L957:
	.loc 1 4786 0 discriminator 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE84:
	.size	AT_lbl, .-AT_lbl
	.type	get_AT, @function
get_AT:
.LFB85:
	.loc 1 4794 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	.loc 1 4796 0
	movq	$0, -8(%rbp)	#, spec
	.loc 1 4798 0
	cmpq	$0, -24(%rbp)	#, die
	je	.L959	#,
	.loc 1 4800 0
	movq	-24(%rbp), %rax	# die, tmp64
	movq	16(%rax), %rax	# die_6(D)->die_attr, tmp65
	movq	%rax, -16(%rbp)	# tmp65, a
	jmp	.L960	#
.L965:
	.loc 1 4801 0
	movq	-16(%rbp), %rax	# a, tmp66
	movl	(%rax), %eax	# a_1->dw_attr, D.23831
	cmpl	-28(%rbp), %eax	# attr_kind, D.23831
	jne	.L961	#,
	.loc 1 4802 0
	movq	-16(%rbp), %rax	# a, D.23830
	jmp	.L962	#
.L961:
	.loc 1 4803 0
	movq	-16(%rbp), %rax	# a, tmp67
	movl	(%rax), %eax	# a_1->dw_attr, D.23831
	cmpl	$71, %eax	#, D.23831
	je	.L963	#,
	.loc 1 4804 0
	movq	-16(%rbp), %rax	# a, tmp68
	movl	(%rax), %eax	# a_1->dw_attr, D.23831
	cmpl	$49, %eax	#, D.23831
	jne	.L964	#,
.L963:
	.loc 1 4805 0
	movq	-16(%rbp), %rax	# a, tmp69
	movq	%rax, %rdi	# tmp69,
	call	AT_ref	#
	movq	%rax, -8(%rbp)	# tmp70, spec
.L964:
	.loc 1 4800 0
	movq	-16(%rbp), %rax	# a, tmp71
	movq	8(%rax), %rax	# a_1->dw_attr_next, tmp72
	movq	%rax, -16(%rbp)	# tmp72, a
.L960:
	.loc 1 4800 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, a
	jne	.L965	#,
	.loc 1 4807 0 is_stmt 1
	cmpq	$0, -8(%rbp)	#, spec
	je	.L959	#,
	.loc 1 4808 0
	movl	-28(%rbp), %edx	# attr_kind, tmp73
	movq	-8(%rbp), %rax	# spec, tmp74
	movl	%edx, %esi	# tmp73,
	movq	%rax, %rdi	# tmp74,
	call	get_AT	#
	jmp	.L962	#
.L959:
	.loc 1 4811 0
	movl	$0, %eax	#, D.23830
.L962:
	.loc 1 4812 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE85:
	.size	get_AT, .-get_AT
	.type	get_AT_low_pc, @function
get_AT_low_pc:
.LFB86:
	.loc 1 4821 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	.loc 1 4822 0
	movq	-24(%rbp), %rax	# die, tmp62
	movl	$17, %esi	#,
	movq	%rax, %rdi	# tmp62,
	call	get_AT	#
	movq	%rax, -8(%rbp)	# tmp63, a
	.loc 1 4824 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L967	#,
	.loc 1 4824 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp64
	movq	%rax, %rdi	# tmp64,
	call	AT_lbl	#
	jmp	.L968	#
.L967:
	.loc 1 4824 0 discriminator 2
	movl	$0, %eax	#, iftmp.328
.L968:
	.loc 1 4825 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE86:
	.size	get_AT_low_pc, .-get_AT_low_pc
	.type	get_AT_hi_pc, @function
get_AT_hi_pc:
.LFB87:
	.loc 1 4834 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	.loc 1 4835 0
	movq	-24(%rbp), %rax	# die, tmp62
	movl	$18, %esi	#,
	movq	%rax, %rdi	# tmp62,
	call	get_AT	#
	movq	%rax, -8(%rbp)	# tmp63, a
	.loc 1 4837 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L971	#,
	.loc 1 4837 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp64
	movq	%rax, %rdi	# tmp64,
	call	AT_lbl	#
	jmp	.L972	#
.L971:
	.loc 1 4837 0 discriminator 2
	movl	$0, %eax	#, iftmp.329
.L972:
	.loc 1 4838 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE87:
	.size	get_AT_hi_pc, .-get_AT_hi_pc
	.type	get_AT_string, @function
get_AT_string:
.LFB88:
	.loc 1 4847 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	.loc 1 4848 0
	movl	-28(%rbp), %edx	# attr_kind, tmp62
	movq	-24(%rbp), %rax	# die, tmp63
	movl	%edx, %esi	# tmp62,
	movq	%rax, %rdi	# tmp63,
	call	get_AT	#
	movq	%rax, -8(%rbp)	# tmp64, a
	.loc 1 4850 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L975	#,
	.loc 1 4850 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp65
	movq	%rax, %rdi	# tmp65,
	call	AT_string	#
	jmp	.L976	#
.L975:
	.loc 1 4850 0 discriminator 2
	movl	$0, %eax	#, iftmp.195
.L976:
	.loc 1 4851 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE88:
	.size	get_AT_string, .-get_AT_string
	.type	get_AT_flag, @function
get_AT_flag:
.LFB89:
	.loc 1 4860 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	.loc 1 4861 0
	movl	-28(%rbp), %edx	# attr_kind, tmp63
	movq	-24(%rbp), %rax	# die, tmp64
	movl	%edx, %esi	# tmp63,
	movq	%rax, %rdi	# tmp64,
	call	get_AT	#
	movq	%rax, -8(%rbp)	# tmp65, a
	.loc 1 4863 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L979	#,
	.loc 1 4863 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp66
	movq	%rax, %rdi	# tmp66,
	call	AT_flag	#
	jmp	.L980	#
.L979:
	.loc 1 4863 0 discriminator 2
	movl	$0, %eax	#, iftmp.572
.L980:
	.loc 1 4864 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE89:
	.size	get_AT_flag, .-get_AT_flag
	.type	get_AT_unsigned, @function
get_AT_unsigned:
.LFB90:
	.loc 1 4873 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	.loc 1 4874 0
	movl	-28(%rbp), %edx	# attr_kind, tmp63
	movq	-24(%rbp), %rax	# die, tmp64
	movl	%edx, %esi	# tmp63,
	movq	%rax, %rdi	# tmp64,
	call	get_AT	#
	movq	%rax, -8(%rbp)	# tmp65, a
	.loc 1 4876 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L983	#,
	.loc 1 4876 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp66
	movq	%rax, %rdi	# tmp66,
	call	AT_unsigned	#
	jmp	.L984	#
.L983:
	.loc 1 4876 0 discriminator 2
	movl	$0, %eax	#, iftmp.330
.L984:
	.loc 1 4877 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE90:
	.size	get_AT_unsigned, .-get_AT_unsigned
	.type	get_AT_ref, @function
get_AT_ref:
.LFB91:
	.loc 1 4883 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	.loc 1 4884 0
	movl	-28(%rbp), %edx	# attr_kind, tmp62
	movq	-24(%rbp), %rax	# die, tmp63
	movl	%edx, %esi	# tmp62,
	movq	%rax, %rdi	# tmp63,
	call	get_AT	#
	movq	%rax, -8(%rbp)	# tmp64, a
	.loc 1 4886 0
	cmpq	$0, -8(%rbp)	#, a
	je	.L987	#,
	.loc 1 4886 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# a, tmp65
	movq	%rax, %rdi	# tmp65,
	call	AT_ref	#
	jmp	.L988	#
.L987:
	.loc 1 4886 0 discriminator 2
	movl	$0, %eax	#, iftmp.173
.L988:
	.loc 1 4887 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE91:
	.size	get_AT_ref, .-get_AT_ref
	.type	is_c_family, @function
is_c_family:
.LFB92:
	.loc 1 4891 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 4892 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.527
	movl	$19, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.527,
	call	get_AT_unsigned	#
	movl	%eax, -4(%rbp)	# tmp63, lang
	.loc 1 4895 0
	cmpl	$2, -4(%rbp)	#, lang
	je	.L991	#,
	.loc 1 4894 0
	cmpl	$1, -4(%rbp)	#, lang
	je	.L991	#,
	.loc 1 4895 0
	cmpl	$4, -4(%rbp)	#, lang
	jne	.L992	#,
.L991:
	.loc 1 4895 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.528
	jmp	.L993	#
.L992:
	.loc 1 4895 0 discriminator 2
	movl	$0, %eax	#, iftmp.528
.L993:
	.loc 1 4896 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE92:
	.size	is_c_family, .-is_c_family
	.type	is_cxx, @function
is_cxx:
.LFB93:
	.loc 1 4900 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 4901 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.501
	movl	$19, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.501,
	call	get_AT_unsigned	#
	.loc 1 4902 0
	cmpl	$4, %eax	#, D.23841
	sete	%al	#, D.23842
	.loc 1 4901 0
	movzbl	%al, %eax	# D.23842, D.23843
	.loc 1 4903 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE93:
	.size	is_cxx, .-is_cxx
	.type	is_fortran, @function
is_fortran:
.LFB94:
	.loc 1 4907 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 4908 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.530
	movl	$19, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.530,
	call	get_AT_unsigned	#
	movl	%eax, -4(%rbp)	# tmp63, lang
	.loc 1 4910 0
	cmpl	$7, -4(%rbp)	#, lang
	je	.L998	#,
	.loc 1 4910 0 is_stmt 0 discriminator 2
	cmpl	$8, -4(%rbp)	#, lang
	jne	.L999	#,
.L998:
	.loc 1 4910 0 discriminator 1
	movl	$1, %eax	#, iftmp.531
	jmp	.L1000	#
.L999:
	.loc 1 4910 0 discriminator 3
	movl	$0, %eax	#, iftmp.531
.L1000:
	.loc 1 4911 0 is_stmt 1 discriminator 4
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE94:
	.size	is_fortran, .-is_fortran
	.type	is_java, @function
is_java:
.LFB95:
	.loc 1 4915 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 4916 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.529
	movl	$19, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.529,
	call	get_AT_unsigned	#
	movl	%eax, -4(%rbp)	# tmp63, lang
	.loc 1 4918 0
	cmpl	$11, -4(%rbp)	#, lang
	sete	%al	#, D.23845
	movzbl	%al, %eax	# D.23845, D.23846
	.loc 1 4919 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE95:
	.size	is_java, .-is_java
	.type	free_AT, @function
free_AT:
.LFB96:
	.loc 1 4927 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 4928 0
	movq	-8(%rbp), %rax	# a, tmp67
	movq	%rax, %rdi	# tmp67,
	call	AT_class	#
	cmpl	$13, %eax	#, D.23847
	ja	.L1006	#,
	cmpl	$12, %eax	#, D.23847
	jae	.L1007	#,
	cmpl	$8, %eax	#, D.23847
	je	.L1008	#,
	.loc 1 4945 0
	jmp	.L1011	#
.L1006:
	.loc 1 4928 0
	cmpl	$14, %eax	#, D.23847
	je	.L1009	#,
	.loc 1 4945 0
	jmp	.L1011	#
.L1009:
	.loc 1 4931 0
	movq	-8(%rbp), %rax	# a, tmp68
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_str, D.23848
	movl	16(%rax), %eax	# _3->refcount, D.23849
	testl	%eax, %eax	# D.23849
	je	.L1010	#,
	.loc 1 4932 0
	movq	-8(%rbp), %rax	# a, tmp69
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_str, D.23848
	movl	16(%rax), %edx	# _5->refcount, D.23849
	subl	$1, %edx	#, D.23849
	movl	%edx, 16(%rax)	# D.23849, _5->refcount
	.loc 1 4933 0
	jmp	.L1011	#
.L1010:
	jmp	.L1011	#
.L1007:
	.loc 1 4937 0
	movq	-8(%rbp), %rax	# a, tmp70
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_lbl_id, D.23850
	movq	%rax, %rdi	# D.23850,
	call	free	#
	.loc 1 4938 0
	jmp	.L1011	#
.L1008:
	.loc 1 4941 0
	movq	-8(%rbp), %rax	# a, tmp71
	movq	24(%rax), %rax	# a_1(D)->dw_attr_val.v.val_float.array, D.23851
	movq	%rax, %rdi	# D.23851,
	call	free	#
	.loc 1 4942 0
	nop
.L1011:
	.loc 1 4948 0
	movq	-8(%rbp), %rax	# a, tmp72
	movq	%rax, %rdi	# tmp72,
	call	free	#
	.loc 1 4949 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE96:
	.size	free_AT, .-free_AT
	.type	remove_AT, @function
remove_AT:
.LFB97:
	.loc 1 4957 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	.loc 1 4959 0
	movq	$0, -8(%rbp)	#, removed
	.loc 1 4961 0
	cmpq	$0, -24(%rbp)	#, die
	je	.L1012	#,
	.loc 1 4963 0
	movq	-24(%rbp), %rax	# die, tmp68
	addq	$16, %rax	#, tmp67
	movq	%rax, -16(%rbp)	# tmp67, p
	jmp	.L1014	#
.L1017:
	.loc 1 4964 0
	movq	-16(%rbp), %rax	# p, tmp69
	movq	(%rax), %rax	# *p_1, D.23853
	movl	(%rax), %eax	# _7->dw_attr, D.23854
	cmpl	-28(%rbp), %eax	# attr_kind, D.23854
	jne	.L1015	#,
	.loc 1 4966 0
	movq	-16(%rbp), %rax	# p, tmp70
	movq	(%rax), %rax	# *p_1, tmp71
	movq	%rax, -8(%rbp)	# tmp71, removed
	.loc 1 4967 0
	movq	-16(%rbp), %rax	# p, tmp72
	movq	(%rax), %rax	# *p_1, D.23853
	movq	8(%rax), %rdx	# _11->dw_attr_next, D.23853
	movq	-16(%rbp), %rax	# p, tmp73
	movq	%rdx, (%rax)	# D.23853, *p_1
	.loc 1 4968 0
	jmp	.L1016	#
.L1015:
	.loc 1 4963 0
	movq	-16(%rbp), %rax	# p, tmp74
	movq	(%rax), %rax	# *p_1, D.23853
	addq	$8, %rax	#, tmp75
	movq	%rax, -16(%rbp)	# tmp75, p
.L1014:
	.loc 1 4963 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# p, tmp76
	movq	(%rax), %rax	# *p_1, D.23853
	testq	%rax, %rax	# D.23853
	jne	.L1017	#,
.L1016:
	.loc 1 4971 0 is_stmt 1
	cmpq	$0, -8(%rbp)	#, removed
	je	.L1012	#,
	.loc 1 4972 0
	movq	-8(%rbp), %rax	# removed, tmp77
	movq	%rax, %rdi	# tmp77,
	call	free_AT	#
.L1012:
	.loc 1 4974 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE97:
	.size	remove_AT, .-remove_AT
	.type	free_die, @function
free_die:
.LFB98:
	.loc 1 4981 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# die, die
	.loc 1 4982 0
	movq	-8(%rbp), %rax	# die, tmp59
	movq	%rax, %rdi	# tmp59,
	call	remove_children	#
	.loc 1 4983 0
	movq	-8(%rbp), %rax	# die, tmp60
	movq	%rax, %rdi	# tmp60,
	call	free	#
	.loc 1 4984 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE98:
	.size	free_die, .-free_die
	.type	remove_children, @function
remove_children:
.LFB99:
	.loc 1 4991 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# die, die
	.loc 1 4992 0
	movq	-40(%rbp), %rax	# die, tmp59
	movq	32(%rax), %rax	# die_3(D)->die_child, tmp60
	movq	%rax, -32(%rbp)	# tmp60, child_die
	.loc 1 4994 0
	movq	-40(%rbp), %rax	# die, tmp61
	movq	$0, 32(%rax)	#, die_3(D)->die_child
	.loc 1 4996 0
	jmp	.L1020	#
.L1023:
.LBB20:
	.loc 1 4998 0
	movq	-32(%rbp), %rax	# child_die, tmp62
	movq	%rax, -16(%rbp)	# tmp62, tmp_die
	.loc 1 5001 0
	movq	-32(%rbp), %rax	# child_die, tmp63
	movq	40(%rax), %rax	# child_die_1->die_sib, tmp64
	movq	%rax, -32(%rbp)	# tmp64, child_die
	.loc 1 5003 0
	movq	-16(%rbp), %rax	# tmp_die, tmp65
	movq	16(%rax), %rax	# tmp_die_5->die_attr, tmp66
	movq	%rax, -24(%rbp)	# tmp66, a
	jmp	.L1021	#
.L1022:
.LBB21:
	.loc 1 5005 0
	movq	-24(%rbp), %rax	# a, tmp67
	movq	%rax, -8(%rbp)	# tmp67, tmp_a
	.loc 1 5007 0
	movq	-24(%rbp), %rax	# a, tmp68
	movq	8(%rax), %rax	# a_2->dw_attr_next, tmp69
	movq	%rax, -24(%rbp)	# tmp69, a
	.loc 1 5008 0
	movq	-8(%rbp), %rax	# tmp_a, tmp70
	movq	%rax, %rdi	# tmp70,
	call	free_AT	#
.L1021:
.LBE21:
	.loc 1 5003 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, a
	jne	.L1022	#,
	.loc 1 5011 0
	movq	-16(%rbp), %rax	# tmp_die, tmp71
	movq	%rax, %rdi	# tmp71,
	call	free_die	#
.L1020:
.LBE20:
	.loc 1 4996 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, child_die
	jne	.L1023	#,
	.loc 1 5013 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE99:
	.size	remove_children, .-remove_children
	.type	add_child_die, @function
add_child_die:
.LFB100:
	.loc 1 5022 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# die, die
	movq	%rsi, -16(%rbp)	# child_die, child_die
	.loc 1 5023 0
	cmpq	$0, -8(%rbp)	#, die
	je	.L1024	#,
	.loc 1 5023 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, child_die
	je	.L1024	#,
	.loc 1 5025 0 is_stmt 1
	movq	-8(%rbp), %rax	# die, tmp60
	cmpq	-16(%rbp), %rax	# child_die, tmp60
	jne	.L1026	#,
	.loc 1 5026 0
	movl	$__FUNCTION__.15714, %edx	#,
	movl	$5026, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1026:
	.loc 1 5028 0
	movq	-16(%rbp), %rax	# child_die, tmp61
	movq	-8(%rbp), %rdx	# die, tmp62
	movq	%rdx, 24(%rax)	# tmp62, child_die_2(D)->die_parent
	.loc 1 5029 0
	movq	-8(%rbp), %rax	# die, tmp63
	movq	32(%rax), %rdx	# die_1(D)->die_child, D.23855
	movq	-16(%rbp), %rax	# child_die, tmp64
	movq	%rdx, 40(%rax)	# D.23855, child_die_2(D)->die_sib
	.loc 1 5030 0
	movq	-8(%rbp), %rax	# die, tmp65
	movq	-16(%rbp), %rdx	# child_die, tmp66
	movq	%rdx, 32(%rax)	# tmp66, die_1(D)->die_child
.L1024:
	.loc 1 5032 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE100:
	.size	add_child_die, .-add_child_die
	.type	splice_child_die, @function
splice_child_die:
.LFB101:
	.loc 1 5040 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# parent, parent
	movq	%rsi, -48(%rbp)	# child, child
	.loc 1 5045 0
	movq	-48(%rbp), %rax	# child, tmp69
	movq	24(%rax), %rax	# child_3(D)->die_parent, D.23856
	cmpq	-40(%rbp), %rax	# parent, D.23856
	je	.L1028	#,
.LBB22:
	.loc 1 5047 0
	movq	-48(%rbp), %rax	# child, tmp70
	movl	$71, %esi	#,
	movq	%rax, %rdi	# tmp70,
	call	get_AT_ref	#
	movq	%rax, -24(%rbp)	# tmp71, tmp
	.loc 1 5049 0
	cmpq	$0, -24(%rbp)	#, tmp
	je	.L1028	#,
	.loc 1 5050 0
	movq	-24(%rbp), %rax	# tmp, tmp72
	movq	%rax, -48(%rbp)	# tmp72, child
.L1028:
.LBE22:
	.loc 1 5053 0
	movq	-48(%rbp), %rax	# child, tmp73
	movq	24(%rax), %rax	# child_1->die_parent, D.23856
	cmpq	-40(%rbp), %rax	# parent, D.23856
	je	.L1029	#,
	.loc 1 5054 0
	movq	-48(%rbp), %rax	# child, tmp74
	movq	24(%rax), %rbx	# child_1->die_parent, D.23856
	movq	-40(%rbp), %rax	# parent, tmp75
	movl	$71, %esi	#,
	movq	%rax, %rdi	# tmp75,
	call	get_AT_ref	#
	cmpq	%rax, %rbx	# D.23856, D.23856
	je	.L1029	#,
	.loc 1 5055 0
	movl	$__FUNCTION__.15721, %edx	#,
	movl	$5055, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1029:
	.loc 1 5057 0
	movq	-48(%rbp), %rax	# child, tmp76
	movq	24(%rax), %rax	# child_1->die_parent, D.23856
	addq	$32, %rax	#, tmp77
	movq	%rax, -32(%rbp)	# tmp77, p
	jmp	.L1030	#
.L1033:
	.loc 1 5058 0
	movq	-32(%rbp), %rax	# p, tmp78
	movq	(%rax), %rax	# *p_2, D.23856
	cmpq	-48(%rbp), %rax	# child, D.23856
	jne	.L1031	#,
	.loc 1 5060 0
	movq	-48(%rbp), %rax	# child, tmp79
	movq	40(%rax), %rdx	# child_1->die_sib, D.23856
	movq	-32(%rbp), %rax	# p, tmp80
	movq	%rdx, (%rax)	# D.23856, *p_2
	.loc 1 5061 0
	jmp	.L1032	#
.L1031:
	.loc 1 5057 0
	movq	-32(%rbp), %rax	# p, tmp81
	movq	(%rax), %rax	# *p_2, D.23856
	addq	$40, %rax	#, tmp82
	movq	%rax, -32(%rbp)	# tmp82, p
.L1030:
	.loc 1 5057 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# p, tmp83
	movq	(%rax), %rax	# *p_2, D.23856
	testq	%rax, %rax	# D.23856
	jne	.L1033	#,
.L1032:
	.loc 1 5064 0 is_stmt 1
	movq	-40(%rbp), %rax	# parent, tmp84
	movq	32(%rax), %rdx	# parent_5(D)->die_child, D.23856
	movq	-48(%rbp), %rax	# child, tmp85
	movq	%rdx, 40(%rax)	# D.23856, child_1->die_sib
	.loc 1 5065 0
	movq	-40(%rbp), %rax	# parent, tmp86
	movq	-48(%rbp), %rdx	# child, tmp87
	movq	%rdx, 32(%rax)	# tmp87, parent_5(D)->die_child
	.loc 1 5066 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE101:
	.size	splice_child_die, .-splice_child_die
	.type	new_die, @function
new_die:
.LFB102:
	.loc 1 5075 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movl	%edi, -20(%rbp)	# tag_value, tag_value
	movq	%rsi, -32(%rbp)	# parent_die, parent_die
	movq	%rdx, -40(%rbp)	# t, t
	.loc 1 5076 0
	movl	$72, %esi	#,
	movl	$1, %edi	#,
	call	xcalloc	#
	movq	%rax, -16(%rbp)	# tmp62, die
	.loc 1 5078 0
	movq	-16(%rbp), %rax	# die, tmp63
	movl	-20(%rbp), %edx	# tag_value, tmp64
	movl	%edx, (%rax)	# tmp64, die_1->die_tag
	.loc 1 5080 0
	cmpq	$0, -32(%rbp)	#, parent_die
	je	.L1035	#,
	.loc 1 5081 0
	movq	-16(%rbp), %rdx	# die, tmp65
	movq	-32(%rbp), %rax	# parent_die, tmp66
	movq	%rdx, %rsi	# tmp65,
	movq	%rax, %rdi	# tmp66,
	call	add_child_die	#
	jmp	.L1036	#
.L1035:
.LBB23:
	.loc 1 5086 0
	movl	$24, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp67, limbo_node
	.loc 1 5087 0
	movq	-8(%rbp), %rax	# limbo_node, tmp68
	movq	-16(%rbp), %rdx	# die, tmp69
	movq	%rdx, (%rax)	# tmp69, limbo_node_4->die
	.loc 1 5088 0
	movq	-8(%rbp), %rax	# limbo_node, tmp70
	movq	-40(%rbp), %rdx	# t, tmp71
	movq	%rdx, 8(%rax)	# tmp71, limbo_node_4->created_for
	.loc 1 5089 0
	movq	limbo_die_list(%rip), %rdx	# limbo_die_list, limbo_die_list.402
	movq	-8(%rbp), %rax	# limbo_node, tmp72
	movq	%rdx, 16(%rax)	# limbo_die_list.402, limbo_node_4->next
	.loc 1 5090 0
	movq	-8(%rbp), %rax	# limbo_node, tmp73
	movq	%rax, limbo_die_list(%rip)	# tmp73, limbo_die_list
.L1036:
.LBE23:
	.loc 1 5093 0
	movq	-16(%rbp), %rax	# die, D.23857
	.loc 1 5094 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE102:
	.size	new_die, .-new_die
	.type	lookup_type_die, @function
lookup_type_die:
.LFB103:
	.loc 1 5101 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# type, type
	.loc 1 5102 0
	movq	-8(%rbp), %rax	# type, tmp61
	movq	88(%rax), %rax	# type_1(D)->type.symtab.pointer, D.23858
	.loc 1 5103 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE103:
	.size	lookup_type_die, .-lookup_type_die
	.type	equate_type_number_to_die, @function
equate_type_number_to_die:
.LFB104:
	.loc 1 5111 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# type, type
	movq	%rsi, -16(%rbp)	# type_die, type_die
	.loc 1 5112 0
	movq	-8(%rbp), %rax	# type, tmp59
	movq	-16(%rbp), %rdx	# type_die, tmp60
	movq	%rdx, 88(%rax)	# tmp60, type_1(D)->type.symtab.pointer
	.loc 1 5113 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE104:
	.size	equate_type_number_to_die, .-equate_type_number_to_die
	.type	lookup_decl_die, @function
lookup_decl_die:
.LFB105:
	.loc 1 5120 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# decl, decl
	.loc 1 5121 0
	movq	-24(%rbp), %rax	# decl, tmp67
	movl	36(%rax), %eax	# decl_2(D)->decl.uid, tmp68
	movl	%eax, -4(%rbp)	# tmp68, decl_id
	.loc 1 5123 0
	movl	decl_die_table_in_use(%rip), %eax	# decl_die_table_in_use, decl_die_table_in_use.533
	cmpl	%eax, -4(%rbp)	# decl_die_table_in_use.533, decl_id
	jae	.L1042	#,
	.loc 1 5123 0 is_stmt 0 discriminator 1
	movq	decl_die_table(%rip), %rax	# decl_die_table, decl_die_table.534
	movl	-4(%rbp), %edx	# decl_id, D.23859
	salq	$3, %rdx	#, D.23859
	addq	%rdx, %rax	# D.23859, D.23860
	movq	(%rax), %rax	# *_8, iftmp.532
	jmp	.L1043	#
.L1042:
	.loc 1 5123 0 discriminator 2
	movl	$0, %eax	#, iftmp.532
.L1043:
	.loc 1 5124 0 is_stmt 1 discriminator 3
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE105:
	.size	lookup_decl_die, .-lookup_decl_die
	.type	equate_decl_number_to_die, @function
equate_decl_number_to_die:
.LFB106:
	.loc 1 5132 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# decl, decl
	movq	%rsi, -32(%rbp)	# decl_die, decl_die
	.loc 1 5133 0
	movq	-24(%rbp), %rax	# decl, tmp81
	movl	36(%rax), %eax	# decl_1(D)->decl.uid, tmp82
	movl	%eax, -8(%rbp)	# tmp82, decl_id
	.loc 1 5136 0
	movl	decl_die_table_allocated(%rip), %eax	# decl_die_table_allocated, decl_die_table_allocated.174
	cmpl	%eax, -8(%rbp)	# decl_die_table_allocated.174, decl_id
	jb	.L1046	#,
	.loc 1 5139 0
	movl	-8(%rbp), %eax	# decl_id, tmp83
	addl	$256, %eax	#, D.23862
	.loc 1 5140 0
	shrl	$8, %eax	#, D.23862
	.loc 1 5139 0
	sall	$8, %eax	#, tmp84
	movl	%eax, -4(%rbp)	# tmp84, num_allocated
	.loc 1 5144 0
	movl	-4(%rbp), %eax	# num_allocated, D.23863
	leaq	0(,%rax,8), %rdx	#, D.23863
	movq	decl_die_table(%rip), %rax	# decl_die_table, decl_die_table.175
	movq	%rdx, %rsi	# D.23863,
	movq	%rax, %rdi	# decl_die_table.175,
	call	xrealloc	#
	movq	%rax, decl_die_table(%rip)	# decl_die_table.176, decl_die_table
	.loc 1 5148 0
	movl	decl_die_table_allocated(%rip), %eax	# decl_die_table_allocated, decl_die_table_allocated.177
	movl	-4(%rbp), %edx	# num_allocated, tmp85
	subl	%eax, %edx	# decl_die_table_allocated.177, D.23862
	movl	%edx, %eax	# D.23862, D.23862
	.loc 1 5147 0
	movl	%eax, %eax	# D.23862, D.23863
	leaq	0(,%rax,8), %rdx	#, D.23863
	movq	decl_die_table(%rip), %rax	# decl_die_table, decl_die_table.178
	movl	decl_die_table_allocated(%rip), %ecx	# decl_die_table_allocated, decl_die_table_allocated.179
	movl	%ecx, %ecx	# decl_die_table_allocated.179, D.23863
	salq	$3, %rcx	#, D.23863
	addq	%rcx, %rax	# D.23863, D.23864
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23864,
	call	memset	#
	.loc 1 5149 0
	movl	-4(%rbp), %eax	# num_allocated, tmp86
	movl	%eax, decl_die_table_allocated(%rip)	# tmp86, decl_die_table_allocated
.L1046:
	.loc 1 5152 0
	movl	decl_die_table_in_use(%rip), %eax	# decl_die_table_in_use, decl_die_table_in_use.180
	cmpl	%eax, -8(%rbp)	# decl_die_table_in_use.180, decl_id
	jb	.L1047	#,
	.loc 1 5153 0
	movl	-8(%rbp), %eax	# decl_id, tmp87
	addl	$1, %eax	#, decl_die_table_in_use.181
	movl	%eax, decl_die_table_in_use(%rip)	# decl_die_table_in_use.181, decl_die_table_in_use
.L1047:
	.loc 1 5155 0
	movq	decl_die_table(%rip), %rax	# decl_die_table, decl_die_table.182
	movl	-8(%rbp), %edx	# decl_id, D.23863
	salq	$3, %rdx	#, D.23863
	addq	%rax, %rdx	# decl_die_table.182, D.23865
	movq	-32(%rbp), %rax	# decl_die, tmp88
	movq	%rax, (%rdx)	# tmp88, *_25
	.loc 1 5156 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE106:
	.size	equate_decl_number_to_die, .-equate_decl_number_to_die
	.local	print_indent
	.comm	print_indent,4,4
	.section	.rodata
.LC386:
	.string	"%*s"
	.text
	.type	print_spaces, @function
print_spaces:
.LFB107:
	.loc 1 5168 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# outfile, outfile
	.loc 1 5169 0
	movl	print_indent(%rip), %edx	# print_indent, print_indent.188
	movq	-8(%rbp), %rax	# outfile, tmp60
	movl	$.LC33, %ecx	#,
	movl	$.LC386, %esi	#,
	movq	%rax, %rdi	# tmp60,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5170 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE107:
	.size	print_spaces, .-print_spaces
	.section	.rodata
.LC387:
	.string	"DIE %4lu: %s\n"
.LC388:
	.string	"  abbrev id: %lu"
.LC389:
	.string	" offset: %lu\n"
.LC390:
	.string	"  %s: "
.LC391:
	.string	"address"
.LC392:
	.string	"offset"
.LC393:
	.string	"location descriptor"
.LC394:
	.string	"location list -> label:%s"
.LC395:
	.string	"range list"
.LC396:
	.string	"%ld"
.LC397:
	.string	"%lu"
.LC398:
	.string	"constant (%lu,%lu)"
.LC399:
	.string	"floating-point constant"
.LC400:
	.string	"%u"
.LC401:
	.string	"die -> label: %s"
.LC402:
	.string	"die -> %lu"
.LC403:
	.string	"die -> <null>"
.LC404:
	.string	"label: %s"
.LC405:
	.string	"\"%s\""
.LC406:
	.string	"<null>"
	.text
	.type	print_die, @function
print_die:
.LFB108:
	.loc 1 5179 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movq	%rsi, -32(%rbp)	# outfile, outfile
	.loc 1 5183 0
	movq	-32(%rbp), %rax	# outfile, tmp90
	movq	%rax, %rdi	# tmp90,
	call	print_spaces	#
	.loc 1 5185 0
	movq	-24(%rbp), %rax	# die, tmp91
	movl	(%rax), %eax	# die_4(D)->die_tag, D.23867
	.loc 1 5184 0
	movl	%eax, %edi	# D.23867,
	call	dwarf_tag_name	#
	movq	%rax, %rcx	#, D.23868
	movq	-24(%rbp), %rax	# die, tmp92
	movq	48(%rax), %rdx	# die_4(D)->die_offset, D.23869
	movq	-32(%rbp), %rax	# outfile, tmp93
	movl	$.LC387, %esi	#,
	movq	%rax, %rdi	# tmp93,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5186 0
	movq	-32(%rbp), %rax	# outfile, tmp94
	movq	%rax, %rdi	# tmp94,
	call	print_spaces	#
	.loc 1 5187 0
	movq	-24(%rbp), %rax	# die, tmp95
	movq	56(%rax), %rdx	# die_4(D)->die_abbrev, D.23870
	movq	-32(%rbp), %rax	# outfile, tmp96
	movl	$.LC388, %esi	#,
	movq	%rax, %rdi	# tmp96,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5188 0
	movq	-24(%rbp), %rax	# die, tmp97
	movq	48(%rax), %rdx	# die_4(D)->die_offset, D.23869
	movq	-32(%rbp), %rax	# outfile, tmp98
	movl	$.LC389, %esi	#,
	movq	%rax, %rdi	# tmp98,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5190 0
	movq	-24(%rbp), %rax	# die, tmp99
	movq	16(%rax), %rax	# die_4(D)->die_attr, tmp100
	movq	%rax, -16(%rbp)	# tmp100, a
	jmp	.L1050	#
.L1073:
	.loc 1 5192 0
	movq	-32(%rbp), %rax	# outfile, tmp101
	movq	%rax, %rdi	# tmp101,
	call	print_spaces	#
	.loc 1 5193 0
	movq	-16(%rbp), %rax	# a, tmp102
	movl	(%rax), %eax	# a_1->dw_attr, D.23871
	movl	%eax, %edi	# D.23871,
	call	dwarf_attr_name	#
	movq	%rax, %rdx	#, D.23868
	movq	-32(%rbp), %rax	# outfile, tmp103
	movl	$.LC390, %esi	#,
	movq	%rax, %rdi	# tmp103,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5195 0
	movq	-16(%rbp), %rax	# a, tmp104
	movq	%rax, %rdi	# tmp104,
	call	AT_class	#
	cmpl	$14, %eax	#, D.23872
	ja	.L1078	#,
	movl	%eax, %eax	# D.23872, tmp105
	movq	.L1053(,%rax,8), %rax	#, tmp106
	jmp	*%rax	# tmp106
	.section	.rodata
	.align 8
	.align 4
.L1053:
	.quad	.L1052
	.quad	.L1054
	.quad	.L1055
	.quad	.L1056
	.quad	.L1057
	.quad	.L1058
	.quad	.L1059
	.quad	.L1060
	.quad	.L1061
	.quad	.L1062
	.quad	.L1063
	.quad	.L1078
	.quad	.L1064
	.quad	.L1064
	.quad	.L1065
	.text
.L1052:
	.loc 1 5198 0
	movq	-32(%rbp), %rax	# outfile, tmp107
	movq	%rax, %rcx	# tmp107,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC391, %edi	#,
	call	fwrite	#
	.loc 1 5199 0
	jmp	.L1066	#
.L1054:
	.loc 1 5201 0
	movq	-32(%rbp), %rax	# outfile, tmp108
	movq	%rax, %rcx	# tmp108,
	movl	$6, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC392, %edi	#,
	call	fwrite	#
	.loc 1 5202 0
	jmp	.L1066	#
.L1055:
	.loc 1 5204 0
	movq	-32(%rbp), %rax	# outfile, tmp109
	movq	%rax, %rcx	# tmp109,
	movl	$19, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC393, %edi	#,
	call	fwrite	#
	.loc 1 5205 0
	jmp	.L1066	#
.L1056:
	.loc 1 5208 0
	movq	-16(%rbp), %rax	# a, tmp110
	movq	%rax, %rdi	# tmp110,
	call	AT_loc_list	#
	.loc 1 5207 0
	movq	24(%rax), %rdx	# _14->ll_symbol, D.23874
	movq	-32(%rbp), %rax	# outfile, tmp111
	movl	$.LC394, %esi	#,
	movq	%rax, %rdi	# tmp111,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5209 0
	jmp	.L1066	#
.L1057:
	.loc 1 5211 0
	movq	-32(%rbp), %rax	# outfile, tmp112
	movq	%rax, %rcx	# tmp112,
	movl	$10, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC395, %edi	#,
	call	fwrite	#
	.loc 1 5212 0
	jmp	.L1066	#
.L1058:
	.loc 1 5214 0
	movq	-16(%rbp), %rax	# a, tmp113
	movq	%rax, %rdi	# tmp113,
	call	AT_int	#
	movq	%rax, %rdx	#, D.23869
	movq	-32(%rbp), %rax	# outfile, tmp114
	movl	$.LC396, %esi	#,
	movq	%rax, %rdi	# tmp114,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5215 0
	jmp	.L1066	#
.L1059:
	.loc 1 5217 0
	movq	-16(%rbp), %rax	# a, tmp115
	movq	%rax, %rdi	# tmp115,
	call	AT_unsigned	#
	movq	%rax, %rdx	#, D.23870
	movq	-32(%rbp), %rax	# outfile, tmp116
	movl	$.LC397, %esi	#,
	movq	%rax, %rdi	# tmp116,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5218 0
	jmp	.L1066	#
.L1060:
	.loc 1 5220 0
	movq	-16(%rbp), %rax	# a, tmp117
	movq	32(%rax), %rcx	# a_1->dw_attr_val.v.val_long_long.low, D.23870
	movq	-16(%rbp), %rax	# a, tmp118
	movq	24(%rax), %rdx	# a_1->dw_attr_val.v.val_long_long.hi, D.23870
	movq	-32(%rbp), %rax	# outfile, tmp119
	movl	$.LC398, %esi	#,
	movq	%rax, %rdi	# tmp119,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5223 0
	jmp	.L1066	#
.L1061:
	.loc 1 5225 0
	movq	-32(%rbp), %rax	# outfile, tmp120
	movq	%rax, %rcx	# tmp120,
	movl	$23, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC399, %edi	#,
	call	fwrite	#
	.loc 1 5226 0
	jmp	.L1066	#
.L1062:
	.loc 1 5228 0
	movq	-16(%rbp), %rax	# a, tmp121
	movq	%rax, %rdi	# tmp121,
	call	AT_flag	#
	movl	%eax, %edx	#, D.23875
	movq	-32(%rbp), %rax	# outfile, tmp122
	movl	$.LC400, %esi	#,
	movq	%rax, %rdi	# tmp122,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5229 0
	jmp	.L1066	#
.L1063:
	.loc 1 5231 0
	movq	-16(%rbp), %rax	# a, tmp123
	movq	%rax, %rdi	# tmp123,
	call	AT_ref	#
	testq	%rax, %rax	# D.23876
	je	.L1067	#,
	.loc 1 5233 0
	movq	-16(%rbp), %rax	# a, tmp124
	movq	%rax, %rdi	# tmp124,
	call	AT_ref	#
	movq	8(%rax), %rax	# _22->die_symbol, D.23874
	testq	%rax, %rax	# D.23874
	je	.L1068	#,
	.loc 1 5234 0
	movq	-16(%rbp), %rax	# a, tmp125
	movq	%rax, %rdi	# tmp125,
	call	AT_ref	#
	movq	8(%rax), %rdx	# _24->die_symbol, D.23874
	movq	-32(%rbp), %rax	# outfile, tmp126
	movl	$.LC401, %esi	#,
	movq	%rax, %rdi	# tmp126,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5240 0
	jmp	.L1066	#
.L1068:
	.loc 1 5236 0
	movq	-16(%rbp), %rax	# a, tmp127
	movq	%rax, %rdi	# tmp127,
	call	AT_ref	#
	movq	48(%rax), %rdx	# _26->die_offset, D.23869
	movq	-32(%rbp), %rax	# outfile, tmp128
	movl	$.LC402, %esi	#,
	movq	%rax, %rdi	# tmp128,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5240 0
	jmp	.L1066	#
.L1067:
	.loc 1 5239 0
	movq	-32(%rbp), %rax	# outfile, tmp129
	movq	%rax, %rcx	# tmp129,
	movl	$13, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC403, %edi	#,
	call	fwrite	#
	.loc 1 5240 0
	jmp	.L1066	#
.L1064:
	.loc 1 5243 0
	movq	-16(%rbp), %rax	# a, tmp130
	movq	%rax, %rdi	# tmp130,
	call	AT_lbl	#
	movq	%rax, %rdx	#, D.23868
	movq	-32(%rbp), %rax	# outfile, tmp131
	movl	$.LC404, %esi	#,
	movq	%rax, %rdi	# tmp131,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5244 0
	jmp	.L1066	#
.L1065:
	.loc 1 5246 0
	movq	-16(%rbp), %rax	# a, tmp132
	movq	%rax, %rdi	# tmp132,
	call	AT_string	#
	testq	%rax, %rax	# D.23868
	je	.L1071	#,
	.loc 1 5247 0
	movq	-16(%rbp), %rax	# a, tmp133
	movq	%rax, %rdi	# tmp133,
	call	AT_string	#
	movq	%rax, %rdx	#, D.23868
	movq	-32(%rbp), %rax	# outfile, tmp134
	movl	$.LC405, %esi	#,
	movq	%rax, %rdi	# tmp134,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5250 0
	jmp	.L1066	#
.L1071:
	.loc 1 5249 0
	movq	-32(%rbp), %rax	# outfile, tmp135
	movq	%rax, %rcx	# tmp135,
	movl	$6, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC406, %edi	#,
	call	fwrite	#
	.loc 1 5250 0
	jmp	.L1066	#
.L1078:
	.loc 1 5252 0
	nop
.L1066:
	.loc 1 5255 0
	movq	-32(%rbp), %rax	# outfile, tmp136
	movq	%rax, %rsi	# tmp136,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 5190 0
	movq	-16(%rbp), %rax	# a, tmp137
	movq	8(%rax), %rax	# a_1->dw_attr_next, tmp138
	movq	%rax, -16(%rbp)	# tmp138, a
.L1050:
	.loc 1 5190 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, a
	jne	.L1073	#,
	.loc 1 5258 0 is_stmt 1
	movq	-24(%rbp), %rax	# die, tmp139
	movq	32(%rax), %rax	# die_4(D)->die_child, D.23876
	testq	%rax, %rax	# D.23876
	je	.L1074	#,
	.loc 1 5260 0
	movl	print_indent(%rip), %eax	# print_indent, print_indent.183
	addl	$4, %eax	#, print_indent.184
	movl	%eax, print_indent(%rip)	# print_indent.184, print_indent
	.loc 1 5261 0
	movq	-24(%rbp), %rax	# die, tmp140
	movq	32(%rax), %rax	# die_4(D)->die_child, tmp141
	movq	%rax, -8(%rbp)	# tmp141, c
	jmp	.L1075	#
.L1076:
	.loc 1 5262 0 discriminator 2
	movq	-32(%rbp), %rdx	# outfile, tmp142
	movq	-8(%rbp), %rax	# c, tmp143
	movq	%rdx, %rsi	# tmp142,
	movq	%rax, %rdi	# tmp143,
	call	print_die	#
	.loc 1 5261 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp144
	movq	40(%rax), %rax	# c_2->die_sib, tmp145
	movq	%rax, -8(%rbp)	# tmp145, c
.L1075:
	.loc 1 5261 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, c
	jne	.L1076	#,
	.loc 1 5264 0 is_stmt 1
	movl	print_indent(%rip), %eax	# print_indent, print_indent.185
	subl	$4, %eax	#, print_indent.186
	movl	%eax, print_indent(%rip)	# print_indent.186, print_indent
.L1074:
	.loc 1 5266 0
	movl	print_indent(%rip), %eax	# print_indent, print_indent.187
	testl	%eax, %eax	# print_indent.187
	jne	.L1049	#,
	.loc 1 5267 0
	movq	-32(%rbp), %rax	# outfile, tmp146
	movq	%rax, %rsi	# tmp146,
	movl	$10, %edi	#,
	call	fputc	#
.L1049:
	.loc 1 5268 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE108:
	.size	print_die, .-print_die
	.section	.rodata
	.align 8
.LC407:
	.string	"\n\nDWARF source line information\n"
.LC408:
	.string	"%5d: "
.LC409:
	.string	"%-20s"
.LC410:
	.string	"%6ld"
.LC411:
	.string	"\n\n"
	.text
	.type	print_dwarf_line_table, @function
print_dwarf_line_table:
.LFB109:
	.loc 1 5276 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# outfile, outfile
	.loc 1 5280 0
	movq	-24(%rbp), %rax	# outfile, tmp69
	movq	%rax, %rcx	# tmp69,
	movl	$32, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC407, %edi	#,
	call	fwrite	#
	.loc 1 5281 0
	movl	$1, -12(%rbp)	#, i
	jmp	.L1080	#
.L1081:
	.loc 1 5283 0 discriminator 2
	movq	line_info_table(%rip), %rax	# line_info_table, line_info_table.189
	movl	-12(%rbp), %edx	# i, D.23897
	salq	$4, %rdx	#, D.23897
	addq	%rdx, %rax	# D.23897, tmp70
	movq	%rax, -8(%rbp)	# tmp70, line_info
	.loc 1 5284 0 discriminator 2
	movl	-12(%rbp), %edx	# i, tmp71
	movq	-24(%rbp), %rax	# outfile, tmp72
	movl	$.LC408, %esi	#,
	movq	%rax, %rdi	# tmp72,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5285 0 discriminator 2
	movq	file_table(%rip), %rdx	# file_table.table, D.23898
	movq	-8(%rbp), %rax	# line_info, tmp73
	movq	(%rax), %rax	# line_info_8->dw_file_num, D.23897
	salq	$3, %rax	#, D.23897
	addq	%rdx, %rax	# D.23898, D.23898
	movq	(%rax), %rdx	# *_12, D.23899
	movq	-24(%rbp), %rax	# outfile, tmp74
	movl	$.LC409, %esi	#,
	movq	%rax, %rdi	# tmp74,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5286 0 discriminator 2
	movq	-8(%rbp), %rax	# line_info, tmp75
	movq	8(%rax), %rdx	# line_info_8->dw_line_num, D.23897
	movq	-24(%rbp), %rax	# outfile, tmp76
	movl	$.LC410, %esi	#,
	movq	%rax, %rdi	# tmp76,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 5287 0 discriminator 2
	movq	-24(%rbp), %rax	# outfile, tmp77
	movq	%rax, %rsi	# tmp77,
	movl	$10, %edi	#,
	call	fputc	#
	.loc 1 5281 0 discriminator 2
	addl	$1, -12(%rbp)	#, i
.L1080:
	.loc 1 5281 0 is_stmt 0 discriminator 1
	movl	line_info_table_in_use(%rip), %eax	# line_info_table_in_use, line_info_table_in_use.190
	cmpl	%eax, -12(%rbp)	# line_info_table_in_use.190, i
	jb	.L1081	#,
	.loc 1 5290 0 is_stmt 1
	movq	-24(%rbp), %rax	# outfile, tmp78
	movq	%rax, %rcx	# tmp78,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC411, %edi	#,
	call	fwrite	#
	.loc 1 5291 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE109:
	.size	print_dwarf_line_table, .-print_dwarf_line_table
	.globl	debug_dwarf_die
	.type	debug_dwarf_die, @function
debug_dwarf_die:
.LFB110:
	.loc 1 5298 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# die, die
	.loc 1 5299 0
	movq	stderr(%rip), %rdx	# stderr, stderr.191
	movq	-8(%rbp), %rax	# die, tmp60
	movq	%rdx, %rsi	# stderr.191,
	movq	%rax, %rdi	# tmp60,
	call	print_die	#
	.loc 1 5300 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE110:
	.size	debug_dwarf_die, .-debug_dwarf_die
	.globl	debug_dwarf
	.type	debug_dwarf, @function
debug_dwarf:
.LFB111:
	.loc 1 5307 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 5308 0
	movl	$0, print_indent(%rip)	#, print_indent
	.loc 1 5309 0
	movq	stderr(%rip), %rdx	# stderr, stderr.192
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.193
	movq	%rdx, %rsi	# stderr.192,
	movq	%rax, %rdi	# comp_unit_die.193,
	call	print_die	#
	.loc 1 5312 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE111:
	.size	debug_dwarf, .-debug_dwarf
	.type	reverse_die_lists, @function
reverse_die_lists:
.LFB112:
	.loc 1 5321 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -56(%rbp)	# die, die
	.loc 1 5325 0
	movq	-56(%rbp), %rax	# die, tmp59
	movq	16(%rax), %rax	# die_5(D)->die_attr, tmp60
	movq	%rax, -32(%rbp)	# tmp60, a
	movq	$0, -24(%rbp)	#, ap
	jmp	.L1085	#
.L1086:
	.loc 1 5327 0 discriminator 2
	movq	-32(%rbp), %rax	# a, tmp61
	movq	8(%rax), %rax	# a_3->dw_attr_next, tmp62
	movq	%rax, -16(%rbp)	# tmp62, an
	.loc 1 5328 0 discriminator 2
	movq	-32(%rbp), %rax	# a, tmp63
	movq	-24(%rbp), %rdx	# ap, tmp64
	movq	%rdx, 8(%rax)	# tmp64, a_3->dw_attr_next
	.loc 1 5329 0 discriminator 2
	movq	-32(%rbp), %rax	# a, tmp65
	movq	%rax, -24(%rbp)	# tmp65, ap
	.loc 1 5325 0 discriminator 2
	movq	-16(%rbp), %rax	# an, tmp66
	movq	%rax, -32(%rbp)	# tmp66, a
.L1085:
	.loc 1 5325 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, a
	jne	.L1086	#,
	.loc 1 5332 0 is_stmt 1
	movq	-56(%rbp), %rax	# die, tmp67
	movq	-24(%rbp), %rdx	# ap, tmp68
	movq	%rdx, 16(%rax)	# tmp68, die_5(D)->die_attr
	.loc 1 5334 0
	movq	-56(%rbp), %rax	# die, tmp69
	movq	32(%rax), %rax	# die_5(D)->die_child, tmp70
	movq	%rax, -48(%rbp)	# tmp70, c
	movq	$0, -40(%rbp)	#, cp
	jmp	.L1087	#
.L1088:
	.loc 1 5336 0 discriminator 2
	movq	-48(%rbp), %rax	# c, tmp71
	movq	40(%rax), %rax	# c_1->die_sib, tmp72
	movq	%rax, -8(%rbp)	# tmp72, cn
	.loc 1 5337 0 discriminator 2
	movq	-48(%rbp), %rax	# c, tmp73
	movq	-40(%rbp), %rdx	# cp, tmp74
	movq	%rdx, 40(%rax)	# tmp74, c_1->die_sib
	.loc 1 5338 0 discriminator 2
	movq	-48(%rbp), %rax	# c, tmp75
	movq	%rax, -40(%rbp)	# tmp75, cp
	.loc 1 5334 0 discriminator 2
	movq	-8(%rbp), %rax	# cn, tmp76
	movq	%rax, -48(%rbp)	# tmp76, c
.L1087:
	.loc 1 5334 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, c
	jne	.L1088	#,
	.loc 1 5341 0 is_stmt 1
	movq	-56(%rbp), %rax	# die, tmp77
	movq	-40(%rbp), %rdx	# cp, tmp78
	movq	%rdx, 32(%rax)	# tmp78, die_5(D)->die_child
	.loc 1 5342 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE112:
	.size	reverse_die_lists, .-reverse_die_lists
	.type	reverse_all_dies, @function
reverse_all_dies:
.LFB113:
	.loc 1 5353 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	.loc 1 5356 0
	movq	-24(%rbp), %rax	# die, tmp59
	movq	%rax, %rdi	# tmp59,
	call	reverse_die_lists	#
	.loc 1 5358 0
	movq	-24(%rbp), %rax	# die, tmp60
	movq	32(%rax), %rax	# die_2(D)->die_child, tmp61
	movq	%rax, -8(%rbp)	# tmp61, c
	jmp	.L1090	#
.L1091:
	.loc 1 5359 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp62
	movq	%rax, %rdi	# tmp62,
	call	reverse_all_dies	#
	.loc 1 5358 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp63
	movq	40(%rax), %rax	# c_1->die_sib, tmp64
	movq	%rax, -8(%rbp)	# tmp64, c
.L1090:
	.loc 1 5358 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, c
	jne	.L1091	#,
	.loc 1 5360 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE113:
	.size	reverse_all_dies, .-reverse_all_dies
	.type	push_new_compile_unit, @function
push_new_compile_unit:
.LFB114:
	.loc 1 5369 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# old_unit, old_unit
	movq	%rsi, -32(%rbp)	# bincl_die, bincl_die
	.loc 1 5370 0
	movq	-32(%rbp), %rax	# bincl_die, tmp61
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp61,
	call	get_AT_string	#
	movq	%rax, -16(%rbp)	# tmp62, filename
	.loc 1 5371 0
	movq	-16(%rbp), %rax	# filename, tmp63
	movq	%rax, %rdi	# tmp63,
	call	gen_compile_unit_die	#
	movq	%rax, -8(%rbp)	# tmp64, new_unit
	.loc 1 5373 0
	movq	-8(%rbp), %rax	# new_unit, tmp65
	movq	-24(%rbp), %rdx	# old_unit, tmp66
	movq	%rdx, 40(%rax)	# tmp66, new_unit_3->die_sib
	.loc 1 5374 0
	movq	-8(%rbp), %rax	# new_unit, D.23905
	.loc 1 5375 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE114:
	.size	push_new_compile_unit, .-push_new_compile_unit
	.type	pop_compile_unit, @function
pop_compile_unit:
.LFB115:
	.loc 1 5382 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# old_unit, old_unit
	.loc 1 5383 0
	movq	-24(%rbp), %rax	# old_unit, tmp61
	movq	40(%rax), %rax	# old_unit_1(D)->die_sib, tmp62
	movq	%rax, -8(%rbp)	# tmp62, new_unit
	.loc 1 5385 0
	movq	-24(%rbp), %rax	# old_unit, tmp63
	movq	$0, 40(%rax)	#, old_unit_1(D)->die_sib
	.loc 1 5386 0
	movq	-8(%rbp), %rax	# new_unit, D.23906
	.loc 1 5387 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE115:
	.size	pop_compile_unit, .-pop_compile_unit
	.type	loc_checksum, @function
loc_checksum:
.LFB116:
	.loc 1 5398 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# loc, loc
	movq	%rsi, -16(%rbp)	# ctx, ctx
	.loc 1 5399 0
	movq	-8(%rbp), %rax	# loc, tmp62
	leaq	8(%rax), %rcx	#, D.23907
	movq	-16(%rbp), %rax	# ctx, tmp63
	movq	%rax, %rdx	# tmp63,
	movl	$4, %esi	#,
	movq	%rcx, %rdi	# D.23907,
	call	md5_process_bytes	#
	.loc 1 5400 0
	movq	-8(%rbp), %rax	# loc, tmp64
	leaq	16(%rax), %rcx	#, D.23908
	movq	-16(%rbp), %rax	# ctx, tmp65
	movq	%rax, %rdx	# tmp65,
	movl	$24, %esi	#,
	movq	%rcx, %rdi	# D.23908,
	call	md5_process_bytes	#
	.loc 1 5401 0
	movq	-8(%rbp), %rax	# loc, tmp66
	leaq	40(%rax), %rcx	#, D.23908
	movq	-16(%rbp), %rax	# ctx, tmp67
	movq	%rax, %rdx	# tmp67,
	movl	$24, %esi	#,
	movq	%rcx, %rdi	# D.23908,
	call	md5_process_bytes	#
	.loc 1 5402 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE116:
	.size	loc_checksum, .-loc_checksum
	.type	attr_checksum, @function
attr_checksum:
.LFB117:
	.loc 1 5410 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# at, at
	movq	%rsi, -48(%rbp)	# ctx, ctx
	.loc 1 5414 0
	movq	-40(%rbp), %rax	# at, D.23909
	movq	-48(%rbp), %rdx	# ctx, tmp81
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.23909,
	call	md5_process_bytes	#
	.loc 1 5417 0
	movq	-40(%rbp), %rax	# at, tmp82
	movl	(%rax), %eax	# at_2(D)->dw_attr, D.23910
	cmpl	$58, %eax	#, D.23910
	je	.L1098	#,
	.loc 1 5420 0
	movq	-40(%rbp), %rax	# at, tmp83
	movl	(%rax), %eax	# at_2(D)->dw_attr, D.23910
	cmpl	$37, %eax	#, D.23910
	jne	.L1099	#,
.L1098:
	.loc 1 5421 0
	jmp	.L1097	#
.L1099:
	.loc 1 5423 0
	movq	-40(%rbp), %rax	# at, tmp84
	movq	%rax, %rdi	# tmp84,
	call	AT_class	#
	cmpl	$14, %eax	#, D.23911
	ja	.L1120	#,
	movl	%eax, %eax	# D.23911, tmp85
	movq	.L1103(,%rax,8), %rax	#, tmp86
	jmp	*%rax	# tmp86
	.section	.rodata
	.align 8
	.align 4
.L1103:
	.quad	.L1102
	.quad	.L1104
	.quad	.L1105
	.quad	.L1120
	.quad	.L1120
	.quad	.L1106
	.quad	.L1107
	.quad	.L1108
	.quad	.L1109
	.quad	.L1110
	.quad	.L1111
	.quad	.L1120
	.quad	.L1120
	.quad	.L1120
	.quad	.L1113
	.text
.L1106:
	.loc 1 5426 0
	movq	-40(%rbp), %rax	# at, tmp87
	leaq	24(%rax), %rcx	#, D.23912
	movq	-48(%rbp), %rax	# ctx, tmp88
	movq	%rax, %rdx	# tmp88,
	movl	$8, %esi	#,
	movq	%rcx, %rdi	# D.23912,
	call	md5_process_bytes	#
	.loc 1 5427 0
	jmp	.L1097	#
.L1107:
	.loc 1 5429 0
	movq	-40(%rbp), %rax	# at, tmp89
	leaq	24(%rax), %rcx	#, D.23913
	movq	-48(%rbp), %rax	# ctx, tmp90
	movq	%rax, %rdx	# tmp90,
	movl	$8, %esi	#,
	movq	%rcx, %rdi	# D.23913,
	call	md5_process_bytes	#
	.loc 1 5430 0
	jmp	.L1097	#
.L1108:
	.loc 1 5432 0
	movq	-40(%rbp), %rax	# at, tmp91
	leaq	24(%rax), %rcx	#, D.23914
	movq	-48(%rbp), %rax	# ctx, tmp92
	movq	%rax, %rdx	# tmp92,
	movl	$16, %esi	#,
	movq	%rcx, %rdi	# D.23914,
	call	md5_process_bytes	#
	.loc 1 5433 0
	jmp	.L1097	#
.L1109:
	.loc 1 5435 0
	movq	-40(%rbp), %rax	# at, tmp93
	leaq	24(%rax), %rcx	#, D.23915
	movq	-48(%rbp), %rax	# ctx, tmp94
	movq	%rax, %rdx	# tmp94,
	movl	$16, %esi	#,
	movq	%rcx, %rdi	# D.23915,
	call	md5_process_bytes	#
	.loc 1 5436 0
	jmp	.L1097	#
.L1110:
	.loc 1 5438 0
	movq	-40(%rbp), %rax	# at, tmp95
	leaq	24(%rax), %rcx	#, D.23916
	movq	-48(%rbp), %rax	# ctx, tmp96
	movq	%rax, %rdx	# tmp96,
	movl	$1, %esi	#,
	movq	%rcx, %rdi	# D.23916,
	call	md5_process_bytes	#
	.loc 1 5439 0
	jmp	.L1097	#
.L1113:
	.loc 1 5441 0
	movq	-40(%rbp), %rax	# at, tmp97
	movq	%rax, %rdi	# tmp97,
	call	AT_string	#
	movq	%rax, %rdi	# D.23917,
	call	strlen	#
	movq	%rax, %rbx	#, D.23918
	movq	-40(%rbp), %rax	# at, tmp98
	movq	%rax, %rdi	# tmp98,
	call	AT_string	#
	movq	-48(%rbp), %rdx	# ctx, tmp99
	movq	%rbx, %rsi	# D.23918,
	movq	%rax, %rdi	# D.23917,
	call	md5_process_bytes	#
	.loc 1 5442 0
	jmp	.L1097	#
.L1102:
	.loc 1 5445 0
	movq	-40(%rbp), %rax	# at, tmp100
	movq	%rax, %rdi	# tmp100,
	call	AT_addr	#
	movq	%rax, -24(%rbp)	# tmp101, r
	.loc 1 5446 0
	movq	-24(%rbp), %rax	# r, tmp102
	movzwl	(%rax), %eax	# r_16->code, D.23919
	movzwl	%ax, %eax	# D.23919, D.23920
	cmpl	$68, %eax	#, D.23920
	jne	.L1119	#,
	.loc 1 5449 0
	movq	-24(%rbp), %rax	# r, tmp103
	movq	8(%rax), %rax	# r_16->fld[0].rtstr, D.23917
	movq	%rax, %rdi	# D.23917,
	call	strlen	#
	movq	%rax, %rcx	#, D.23918
	movq	-24(%rbp), %rax	# r, tmp104
	movq	8(%rax), %rax	# r_16->fld[0].rtstr, D.23917
	movq	-48(%rbp), %rdx	# ctx, tmp105
	movq	%rcx, %rsi	# D.23918,
	movq	%rax, %rdi	# D.23917,
	call	md5_process_bytes	#
	.loc 1 5450 0
	nop
	.loc 1 5455 0
	jmp	.L1097	#
.L1119:
	.loc 1 5453 0
	movl	$__FUNCTION__.15847, %edx	#,
	movl	$5453, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1104:
	.loc 1 5458 0
	movq	-40(%rbp), %rax	# at, tmp106
	leaq	24(%rax), %rcx	#, D.23913
	movq	-48(%rbp), %rax	# ctx, tmp107
	movq	%rax, %rdx	# tmp107,
	movl	$8, %esi	#,
	movq	%rcx, %rdi	# D.23913,
	call	md5_process_bytes	#
	.loc 1 5459 0
	jmp	.L1097	#
.L1105:
	.loc 1 5462 0
	movq	-40(%rbp), %rax	# at, tmp108
	movq	%rax, %rdi	# tmp108,
	call	AT_loc	#
	movq	%rax, -32(%rbp)	# tmp109, loc
	jmp	.L1117	#
.L1118:
	.loc 1 5463 0 discriminator 2
	movq	-48(%rbp), %rdx	# ctx, tmp110
	movq	-32(%rbp), %rax	# loc, tmp111
	movq	%rdx, %rsi	# tmp110,
	movq	%rax, %rdi	# tmp111,
	call	loc_checksum	#
	.loc 1 5462 0 discriminator 2
	movq	-32(%rbp), %rax	# loc, tmp112
	movq	(%rax), %rax	# loc_1->dw_loc_next, tmp113
	movq	%rax, -32(%rbp)	# tmp113, loc
.L1117:
	.loc 1 5462 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, loc
	jne	.L1118	#,
	.loc 1 5464 0 is_stmt 1
	jmp	.L1097	#
.L1111:
	.loc 1 5467 0
	movq	-40(%rbp), %rax	# at, tmp114
	movq	%rax, %rdi	# tmp114,
	call	AT_ref	#
	movq	48(%rax), %rax	# _25->die_offset, D.23922
	testq	%rax, %rax	# D.23922
	je	.L1112	#,
	.loc 1 5468 0
	movq	-40(%rbp), %rax	# at, tmp115
	movq	%rax, %rdi	# tmp115,
	call	AT_ref	#
	leaq	48(%rax), %rcx	#, D.23923
	movq	-48(%rbp), %rax	# ctx, tmp116
	movq	%rax, %rdx	# tmp116,
	movl	$8, %esi	#,
	movq	%rcx, %rdi	# D.23923,
	call	md5_process_bytes	#
	.loc 1 5474 0
	jmp	.L1097	#
.L1112:
	jmp	.L1097	#
.L1120:
	.loc 1 5477 0
	nop
.L1097:
	.loc 1 5479 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE117:
	.size	attr_checksum, .-attr_checksum
	.type	die_checksum, @function
die_checksum:
.LFB118:
	.loc 1 5487 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movq	%rsi, -32(%rbp)	# ctx, ctx
	.loc 1 5491 0
	movq	-24(%rbp), %rax	# die, D.23924
	movq	-32(%rbp), %rdx	# ctx, tmp60
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.23924,
	call	md5_process_bytes	#
	.loc 1 5493 0
	movq	-24(%rbp), %rax	# die, tmp61
	movq	16(%rax), %rax	# die_3(D)->die_attr, tmp62
	movq	%rax, -8(%rbp)	# tmp62, a
	jmp	.L1122	#
.L1123:
	.loc 1 5494 0 discriminator 2
	movq	-32(%rbp), %rdx	# ctx, tmp63
	movq	-8(%rbp), %rax	# a, tmp64
	movq	%rdx, %rsi	# tmp63,
	movq	%rax, %rdi	# tmp64,
	call	attr_checksum	#
	.loc 1 5493 0 discriminator 2
	movq	-8(%rbp), %rax	# a, tmp65
	movq	8(%rax), %rax	# a_2->dw_attr_next, tmp66
	movq	%rax, -8(%rbp)	# tmp66, a
.L1122:
	.loc 1 5493 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, a
	jne	.L1123	#,
	.loc 1 5496 0 is_stmt 1
	movq	-24(%rbp), %rax	# die, tmp67
	movq	32(%rax), %rax	# die_3(D)->die_child, tmp68
	movq	%rax, -16(%rbp)	# tmp68, c
	jmp	.L1124	#
.L1125:
	.loc 1 5497 0 discriminator 2
	movq	-32(%rbp), %rdx	# ctx, tmp69
	movq	-16(%rbp), %rax	# c, tmp70
	movq	%rdx, %rsi	# tmp69,
	movq	%rax, %rdi	# tmp70,
	call	die_checksum	#
	.loc 1 5496 0 discriminator 2
	movq	-16(%rbp), %rax	# c, tmp71
	movq	40(%rax), %rax	# c_1->die_sib, tmp72
	movq	%rax, -16(%rbp)	# tmp72, c
.L1124:
	.loc 1 5496 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, c
	jne	.L1125	#,
	.loc 1 5498 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE118:
	.size	die_checksum, .-die_checksum
	.local	comdat_symbol_id
	.comm	comdat_symbol_id,8,8
	.local	comdat_symbol_number
	.comm	comdat_symbol_number,4,4
	.section	.rodata
.LC412:
	.string	"%s."
.LC413:
	.string	"%.2x"
	.text
	.type	compute_section_prefix, @function
compute_section_prefix:
.LFB119:
	.loc 1 5516 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$240, %rsp	#,
	movq	%rdi, -232(%rbp)	# unit_die, unit_die
	.loc 1 5516 0
	movq	%fs:40, %rax	#, tmp103
	movq	%rax, -8(%rbp)	# tmp103, D.23930
	xorl	%eax, %eax	# tmp103
	.loc 1 5517 0
	movq	-232(%rbp), %rax	# unit_die, tmp67
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp67,
	call	get_AT_string	#
	movq	%rax, %rdi	# D.23925,
	call	lbasename	#
	movq	%rax, -208(%rbp)	# tmp68, base
	.loc 1 5518 0
	movq	-208(%rbp), %rax	# base, tmp69
	movq	%rax, %rdi	# tmp69,
	call	strlen	#
	addq	$64, %rax	#, D.23926
	leaq	15(%rax), %rdx	#, tmp70
	movl	$16, %eax	#, tmp101
	subq	$1, %rax	#, tmp71
	addq	%rdx, %rax	# tmp70, tmp72
	movl	$16, %ecx	#, tmp102
	movl	$0, %edx	#, tmp75
	divq	%rcx	# tmp102
	imulq	$16, %rax, %rax	#, tmp74, tmp76
	subq	%rax, %rsp	# tmp76,
	movq	%rsp, %rax	#, tmp77
	addq	$15, %rax	#, tmp78
	shrq	$4, %rax	#, tmp79
	salq	$4, %rax	#, tmp80
	movq	%rax, -200(%rbp)	# tmp80, name
	.loc 1 5527 0
	leaq	-176(%rbp), %rax	#, tmp81
	movq	%rax, %rdi	# tmp81,
	call	md5_init_ctx	#
	.loc 1 5528 0
	leaq	-176(%rbp), %rdx	#, tmp82
	movq	-232(%rbp), %rax	# unit_die, tmp83
	movq	%rdx, %rsi	# tmp82,
	movq	%rax, %rdi	# tmp83,
	call	die_checksum	#
	.loc 1 5529 0
	leaq	-192(%rbp), %rdx	#, tmp84
	leaq	-176(%rbp), %rax	#, tmp85
	movq	%rdx, %rsi	# tmp84,
	movq	%rax, %rdi	# tmp85,
	call	md5_finish_ctx	#
	.loc 1 5531 0
	movq	-208(%rbp), %rdx	# base, tmp86
	movq	-200(%rbp), %rax	# name, tmp87
	movl	$.LC412, %esi	#,
	movq	%rax, %rdi	# tmp87,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 5532 0
	movq	-200(%rbp), %rax	# name, tmp88
	movq	%rax, %rdi	# tmp88,
	call	clean_symbol_name	#
	.loc 1 5534 0
	movq	-200(%rbp), %rax	# name, tmp89
	movq	%rax, %rdi	# tmp89,
	call	strlen	#
	movq	-200(%rbp), %rdx	# name, tmp93
	addq	%rdx, %rax	# tmp93, tmp92
	movq	%rax, -216(%rbp)	# tmp92, p
	.loc 1 5535 0
	movl	$0, -220(%rbp)	#, i
	jmp	.L1127	#
.L1128:
	.loc 1 5537 0 discriminator 2
	movl	-220(%rbp), %eax	# i, tmp95
	cltq
	movzbl	-192(%rbp,%rax), %eax	# checksum, D.23927
	movzbl	%al, %edx	# D.23927, D.23928
	movq	-216(%rbp), %rax	# p, tmp96
	movl	$.LC413, %esi	#,
	movq	%rax, %rdi	# tmp96,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 5538 0 discriminator 2
	addq	$2, -216(%rbp)	#, p
	.loc 1 5535 0 discriminator 2
	addl	$1, -220(%rbp)	#, i
.L1127:
	.loc 1 5535 0 is_stmt 0 discriminator 1
	cmpl	$3, -220(%rbp)	#, i
	jle	.L1128	#,
	.loc 1 5541 0 is_stmt 1
	movq	-200(%rbp), %rax	# name, tmp97
	movq	%rax, %rdi	# tmp97,
	call	xstrdup	#
	movq	%rax, %rdx	# tmp98, D.23929
	movq	-232(%rbp), %rax	# unit_die, tmp99
	movq	%rdx, 8(%rax)	# D.23929, unit_die_3(D)->die_symbol
	movq	-232(%rbp), %rax	# unit_die, tmp100
	movq	8(%rax), %rax	# unit_die_3(D)->die_symbol, comdat_symbol_id.196
	movq	%rax, comdat_symbol_id(%rip)	# comdat_symbol_id.196, comdat_symbol_id
	.loc 1 5542 0
	movl	$0, comdat_symbol_number(%rip)	#, comdat_symbol_number
	.loc 1 5543 0
	movq	-8(%rbp), %rax	# D.23930, tmp104
	xorq	%fs:40, %rax	#, tmp104
	je	.L1129	#,
	call	__stack_chk_fail	#
.L1129:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE119:
	.size	compute_section_prefix, .-compute_section_prefix
	.type	is_type_die, @function
is_type_die:
.LFB120:
	.loc 1 5550 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# die, die
	.loc 1 5551 0
	movq	-8(%rbp), %rax	# die, tmp62
	movl	(%rax), %eax	# die_2(D)->die_tag, D.23935
	cmpl	$53, %eax	#, D.23935
	ja	.L1131	#,
	movl	%eax, %eax	# D.23935, tmp63
	movq	.L1133(,%rax,8), %rax	#, tmp64
	jmp	*%rax	# tmp64
	.section	.rodata
	.align 8
	.align 4
.L1133:
	.quad	.L1131
	.quad	.L1132
	.quad	.L1132
	.quad	.L1131
	.quad	.L1132
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1132
	.quad	.L1132
	.quad	.L1131
	.quad	.L1132
	.quad	.L1132
	.quad	.L1131
	.quad	.L1132
	.quad	.L1131
	.quad	.L1132
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1132
	.quad	.L1132
	.quad	.L1132
	.quad	.L1131
	.quad	.L1131
	.quad	.L1132
	.quad	.L1131
	.quad	.L1132
	.quad	.L1131
	.quad	.L1131
	.quad	.L1132
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1132
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1131
	.quad	.L1132
	.text
.L1132:
	.loc 1 5570 0
	movl	$1, %eax	#, D.23934
	jmp	.L1134	#
.L1131:
	.loc 1 5572 0
	movl	$0, %eax	#, D.23934
.L1134:
	.loc 1 5574 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE120:
	.size	is_type_die, .-is_type_die
	.type	is_comdat_die, @function
is_comdat_die:
.LFB121:
	.loc 1 5584 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# c, c
	.loc 1 5590 0
	movq	-24(%rbp), %rax	# c, tmp67
	movl	(%rax), %eax	# c_3(D)->die_tag, D.23937
	cmpl	$36, %eax	#, D.23937
	jne	.L1136	#,
	.loc 1 5591 0
	movl	$0, %eax	#, D.23936
	jmp	.L1137	#
.L1136:
	.loc 1 5593 0
	movq	-24(%rbp), %rax	# c, tmp68
	movl	(%rax), %eax	# c_3(D)->die_tag, D.23937
	cmpl	$15, %eax	#, D.23937
	je	.L1138	#,
	.loc 1 5594 0
	movq	-24(%rbp), %rax	# c, tmp69
	movl	(%rax), %eax	# c_3(D)->die_tag, D.23937
	cmpl	$16, %eax	#, D.23937
	je	.L1138	#,
	.loc 1 5595 0
	movq	-24(%rbp), %rax	# c, tmp70
	movl	(%rax), %eax	# c_3(D)->die_tag, D.23937
	cmpl	$38, %eax	#, D.23937
	je	.L1138	#,
	.loc 1 5596 0
	movq	-24(%rbp), %rax	# c, tmp71
	movl	(%rax), %eax	# c_3(D)->die_tag, D.23937
	cmpl	$53, %eax	#, D.23937
	jne	.L1139	#,
.L1138:
.LBB24:
	.loc 1 5598 0
	movq	-24(%rbp), %rax	# c, tmp72
	movl	$73, %esi	#,
	movq	%rax, %rdi	# tmp72,
	call	get_AT_ref	#
	movq	%rax, -8(%rbp)	# tmp73, t
	.loc 1 5600 0
	cmpq	$0, -8(%rbp)	#, t
	je	.L1140	#,
	.loc 1 5600 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# t, tmp74
	movq	%rax, %rdi	# tmp74,
	call	is_comdat_die	#
	jmp	.L1141	#
.L1140:
	.loc 1 5600 0 discriminator 2
	movl	$0, %eax	#, iftmp.197
.L1141:
	.loc 1 5600 0 discriminator 3
	jmp	.L1137	#
.L1139:
.LBE24:
	.loc 1 5603 0 is_stmt 1
	movq	-24(%rbp), %rax	# c, tmp75
	movq	%rax, %rdi	# tmp75,
	call	is_type_die	#
.L1137:
	.loc 1 5604 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE121:
	.size	is_comdat_die, .-is_comdat_die
	.type	is_symbol_die, @function
is_symbol_die:
.LFB122:
	.loc 1 5612 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# c, c
	.loc 1 5613 0
	movq	-8(%rbp), %rax	# c, tmp65
	movq	%rax, %rdi	# tmp65,
	call	is_type_die	#
	.loc 1 5614 0
	testl	%eax, %eax	# D.23938
	jne	.L1143	#,
	.loc 1 5614 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp66
	movl	$60, %esi	#,
	movq	%rax, %rdi	# tmp66,
	call	get_AT	#
	testq	%rax, %rax	# D.23939
	je	.L1144	#,
	.loc 1 5615 0 is_stmt 1
	movq	-8(%rbp), %rax	# c, tmp67
	movl	$71, %esi	#,
	movq	%rax, %rdi	# tmp67,
	call	get_AT	#
	testq	%rax, %rax	# D.23939
	jne	.L1144	#,
.L1143:
	.loc 1 5614 0 discriminator 1
	movl	$1, %eax	#, iftmp.198
	jmp	.L1145	#
.L1144:
	.loc 1 5614 0 is_stmt 0 discriminator 3
	movl	$0, %eax	#, iftmp.198
.L1145:
	.loc 1 5616 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE122:
	.size	is_symbol_die, .-is_symbol_die
	.type	gen_internal_sym, @function
gen_internal_sym:
.LFB123:
	.loc 1 5621 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$296, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -296(%rbp)	# prefix, prefix
	.loc 1 5621 0
	movq	%fs:40, %rax	#, tmp70
	movq	%rax, -24(%rbp)	# tmp70, D.23941
	xorl	%eax, %eax	# tmp70
	.loc 1 5625 0
	movl	label_num.15916(%rip), %eax	# label_num, label_num.199
	leal	1(%rax), %edx	#, label_num.201
	movl	%edx, label_num.15916(%rip)	# label_num.201, label_num
	movl	%eax, %ecx	# label_num.200, label_num.202
	movq	-296(%rbp), %rdx	# prefix, tmp65
	leaq	-288(%rbp), %rax	#, tmp66
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp66,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 5626 0
	leaq	-288(%rbp), %rax	#, tmp67
	movq	%rax, %rdi	# tmp67,
	call	xstrdup	#
	.loc 1 5627 0
	movq	-24(%rbp), %rbx	# D.23941, tmp71
	xorq	%fs:40, %rbx	#, tmp71
	je	.L1149	#,
	call	__stack_chk_fail	#
.L1149:
	addq	$296, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE123:
	.size	gen_internal_sym, .-gen_internal_sym
	.section	.rodata
.LC414:
	.string	"DW"
.LC415:
	.string	"%s.%s.%x"
.LC416:
	.string	"LDIE"
	.text
	.type	assign_symbol_names, @function
assign_symbol_names:
.LFB124:
	.loc 1 5634 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# die, die
	.loc 1 5637 0
	movq	-40(%rbp), %rax	# die, tmp70
	movq	%rax, %rdi	# tmp70,
	call	is_symbol_die	#
	testl	%eax, %eax	# D.23942
	je	.L1151	#,
	.loc 1 5639 0
	movq	comdat_symbol_id(%rip), %rax	# comdat_symbol_id, comdat_symbol_id.203
	testq	%rax, %rax	# comdat_symbol_id.203
	je	.L1152	#,
.LBB25:
	.loc 1 5641 0
	movq	comdat_symbol_id(%rip), %rax	# comdat_symbol_id, comdat_symbol_id.204
	movq	%rax, %rdi	# comdat_symbol_id.204,
	call	strlen	#
	addq	$64, %rax	#, D.23943
	leaq	15(%rax), %rdx	#, tmp71
	movl	$16, %eax	#, tmp92
	subq	$1, %rax	#, tmp72
	addq	%rdx, %rax	# tmp71, tmp73
	movl	$16, %ebx	#, tmp93
	movl	$0, %edx	#, tmp76
	divq	%rbx	# tmp93
	imulq	$16, %rax, %rax	#, tmp75, tmp77
	subq	%rax, %rsp	# tmp77,
	movq	%rsp, %rax	#, tmp78
	addq	$15, %rax	#, tmp79
	shrq	$4, %rax	#, tmp80
	salq	$4, %rax	#, tmp81
	movq	%rax, -24(%rbp)	# tmp81, p
	.loc 1 5643 0
	movl	comdat_symbol_number(%rip), %eax	# comdat_symbol_number, comdat_symbol_number.205
	leal	1(%rax), %edx	#, comdat_symbol_number.207
	movl	%edx, comdat_symbol_number(%rip)	# comdat_symbol_number.207, comdat_symbol_number
	movq	comdat_symbol_id(%rip), %rdx	# comdat_symbol_id, comdat_symbol_id.208
	movq	-24(%rbp), %rdi	# p, tmp82
	movl	%eax, %r8d	# comdat_symbol_number.206,
	movq	%rdx, %rcx	# comdat_symbol_id.208,
	movl	$.LC414, %edx	#,
	movl	$.LC415, %esi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 5645 0
	movq	-24(%rbp), %rax	# p, tmp83
	movq	%rax, %rdi	# tmp83,
	call	xstrdup	#
	movq	%rax, %rdx	# tmp84, D.23944
	movq	-40(%rbp), %rax	# die, tmp85
	movq	%rdx, 8(%rax)	# D.23944, die_2(D)->die_symbol
.LBE25:
	jmp	.L1151	#
.L1152:
	.loc 1 5648 0
	movl	$.LC416, %edi	#,
	call	gen_internal_sym	#
	movq	-40(%rbp), %rdx	# die, tmp86
	movq	%rax, 8(%rdx)	# D.23944, die_2(D)->die_symbol
.L1151:
	.loc 1 5651 0
	movq	-40(%rbp), %rax	# die, tmp87
	movq	32(%rax), %rax	# die_2(D)->die_child, tmp88
	movq	%rax, -32(%rbp)	# tmp88, c
	jmp	.L1153	#
.L1154:
	.loc 1 5652 0 discriminator 2
	movq	-32(%rbp), %rax	# c, tmp89
	movq	%rax, %rdi	# tmp89,
	call	assign_symbol_names	#
	.loc 1 5651 0 discriminator 2
	movq	-32(%rbp), %rax	# c, tmp90
	movq	40(%rax), %rax	# c_1->die_sib, tmp91
	movq	%rax, -32(%rbp)	# tmp91, c
.L1153:
	.loc 1 5651 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, c
	jne	.L1154	#,
	.loc 1 5653 0 is_stmt 1
	movq	-8(%rbp), %rbx	#,
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE124:
	.size	assign_symbol_names, .-assign_symbol_names
	.type	break_out_includes, @function
break_out_includes:
.LFB125:
	.loc 1 5662 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# die, die
	.loc 1 5664 0
	movq	$0, -24(%rbp)	#, unit
	.loc 1 5667 0
	movq	-40(%rbp), %rax	# die, tmp71
	addq	$32, %rax	#, tmp70
	movq	%rax, -32(%rbp)	# tmp70, ptr
	jmp	.L1156	#
.L1162:
.LBB26:
	.loc 1 5669 0
	movq	-32(%rbp), %rax	# ptr, tmp72
	movq	(%rax), %rax	# *ptr_1, tmp73
	movq	%rax, -8(%rbp)	# tmp73, c
	.loc 1 5671 0
	movq	-8(%rbp), %rax	# c, tmp74
	movl	(%rax), %eax	# c_9->die_tag, D.23949
	cmpl	$16644, %eax	#, D.23949
	je	.L1157	#,
	.loc 1 5671 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# c, tmp75
	movl	(%rax), %eax	# c_9->die_tag, D.23949
	cmpl	$16645, %eax	#, D.23949
	je	.L1157	#,
	.loc 1 5672 0 is_stmt 1
	cmpq	$0, -24(%rbp)	#, unit
	je	.L1158	#,
	.loc 1 5672 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# c, tmp76
	movq	%rax, %rdi	# tmp76,
	call	is_comdat_die	#
	testl	%eax, %eax	# D.23950
	je	.L1158	#,
.L1157:
	.loc 1 5675 0 is_stmt 1
	movq	-8(%rbp), %rax	# c, tmp77
	movq	40(%rax), %rdx	# c_9->die_sib, D.23948
	movq	-32(%rbp), %rax	# ptr, tmp78
	movq	%rdx, (%rax)	# D.23948, *ptr_1
	.loc 1 5677 0
	movq	-8(%rbp), %rax	# c, tmp79
	movl	(%rax), %eax	# c_9->die_tag, D.23949
	cmpl	$16644, %eax	#, D.23949
	jne	.L1159	#,
	.loc 1 5679 0
	movq	-8(%rbp), %rdx	# c, tmp80
	movq	-24(%rbp), %rax	# unit, tmp81
	movq	%rdx, %rsi	# tmp80,
	movq	%rax, %rdi	# tmp81,
	call	push_new_compile_unit	#
	movq	%rax, -24(%rbp)	# tmp82, unit
	.loc 1 5680 0
	movq	-8(%rbp), %rax	# c, tmp83
	movq	%rax, %rdi	# tmp83,
	call	free_die	#
	jmp	.L1160	#
.L1159:
	.loc 1 5682 0
	movq	-8(%rbp), %rax	# c, tmp84
	movl	(%rax), %eax	# c_9->die_tag, D.23949
	cmpl	$16645, %eax	#, D.23949
	jne	.L1161	#,
	.loc 1 5684 0
	movq	-24(%rbp), %rax	# unit, tmp85
	movq	%rax, %rdi	# tmp85,
	call	pop_compile_unit	#
	movq	%rax, -24(%rbp)	# tmp86, unit
	.loc 1 5685 0
	movq	-8(%rbp), %rax	# c, tmp87
	movq	%rax, %rdi	# tmp87,
	call	free_die	#
	jmp	.L1160	#
.L1161:
	.loc 1 5688 0
	movq	-8(%rbp), %rdx	# c, tmp88
	movq	-24(%rbp), %rax	# unit, tmp89
	movq	%rdx, %rsi	# tmp88,
	movq	%rax, %rdi	# tmp89,
	call	add_child_die	#
	.loc 1 5677 0
	jmp	.L1156	#
.L1160:
	jmp	.L1156	#
.L1158:
	.loc 1 5693 0
	movq	-8(%rbp), %rax	# c, tmp93
	addq	$40, %rax	#, tmp92
	movq	%rax, -32(%rbp)	# tmp92, ptr
	.loc 1 5694 0
	nop
.L1156:
.LBE26:
	.loc 1 5667 0 discriminator 1
	movq	-32(%rbp), %rax	# ptr, tmp94
	movq	(%rax), %rax	# *ptr_1, D.23948
	testq	%rax, %rax	# D.23948
	jne	.L1162	#,
	.loc 1 5705 0
	movq	-40(%rbp), %rax	# die, tmp95
	movq	%rax, %rdi	# tmp95,
	call	assign_symbol_names	#
	.loc 1 5706 0
	movq	limbo_die_list(%rip), %rax	# limbo_die_list, tmp96
	movq	%rax, -16(%rbp)	# tmp96, node
	jmp	.L1163	#
.L1164:
	.loc 1 5708 0 discriminator 2
	movq	-16(%rbp), %rax	# node, tmp97
	movq	(%rax), %rax	# node_4->die, D.23948
	movq	%rax, %rdi	# D.23948,
	call	compute_section_prefix	#
	.loc 1 5709 0 discriminator 2
	movq	-16(%rbp), %rax	# node, tmp98
	movq	(%rax), %rax	# node_4->die, D.23948
	movq	%rax, %rdi	# D.23948,
	call	assign_symbol_names	#
	.loc 1 5706 0 discriminator 2
	movq	-16(%rbp), %rax	# node, tmp99
	movq	16(%rax), %rax	# node_4->next, tmp100
	movq	%rax, -16(%rbp)	# tmp100, node
.L1163:
	.loc 1 5706 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, node
	jne	.L1164	#,
	.loc 1 5711 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE125:
	.size	break_out_includes, .-break_out_includes
	.type	add_sibling_attributes, @function
add_sibling_attributes:
.LFB126:
	.loc 1 5720 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	.loc 1 5723 0
	movq	-24(%rbp), %rax	# die, tmp63
	movl	(%rax), %eax	# die_2(D)->die_tag, D.23951
	cmpl	$17, %eax	#, D.23951
	je	.L1166	#,
	.loc 1 5724 0
	movq	-24(%rbp), %rax	# die, tmp64
	movq	40(%rax), %rax	# die_2(D)->die_sib, D.23952
	testq	%rax, %rax	# D.23952
	je	.L1166	#,
	.loc 1 5724 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# die, tmp65
	movq	32(%rax), %rax	# die_2(D)->die_child, D.23952
	testq	%rax, %rax	# D.23952
	je	.L1166	#,
	.loc 1 5726 0 is_stmt 1
	movq	-24(%rbp), %rax	# die, tmp66
	movq	40(%rax), %rdx	# die_2(D)->die_sib, D.23952
	movq	-24(%rbp), %rax	# die, tmp67
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp67,
	call	add_AT_die_ref	#
.L1166:
	.loc 1 5728 0
	movq	-24(%rbp), %rax	# die, tmp68
	movq	32(%rax), %rax	# die_2(D)->die_child, tmp69
	movq	%rax, -8(%rbp)	# tmp69, c
	jmp	.L1167	#
.L1168:
	.loc 1 5729 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp70
	movq	%rax, %rdi	# tmp70,
	call	add_sibling_attributes	#
	.loc 1 5728 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp71
	movq	40(%rax), %rax	# c_1->die_sib, tmp72
	movq	%rax, -8(%rbp)	# tmp72, c
.L1167:
	.loc 1 5728 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, c
	jne	.L1168	#,
	.loc 1 5730 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE126:
	.size	add_sibling_attributes, .-add_sibling_attributes
	.type	output_location_lists, @function
output_location_lists:
.LFB127:
	.loc 1 5737 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	.loc 1 5741 0
	movq	-24(%rbp), %rax	# die, tmp61
	movq	16(%rax), %rax	# die_3(D)->die_attr, tmp62
	movq	%rax, -8(%rbp)	# tmp62, d_attr
	jmp	.L1170	#
.L1172:
	.loc 1 5742 0
	movq	-8(%rbp), %rax	# d_attr, tmp63
	movq	%rax, %rdi	# tmp63,
	call	AT_class	#
	cmpl	$3, %eax	#, D.23953
	jne	.L1171	#,
	.loc 1 5743 0
	movq	-8(%rbp), %rax	# d_attr, tmp64
	movq	%rax, %rdi	# tmp64,
	call	AT_loc_list	#
	movq	%rax, %rdi	# D.23954,
	call	output_loc_list	#
.L1171:
	.loc 1 5741 0
	movq	-8(%rbp), %rax	# d_attr, tmp65
	movq	8(%rax), %rax	# d_attr_2->dw_attr_next, tmp66
	movq	%rax, -8(%rbp)	# tmp66, d_attr
.L1170:
	.loc 1 5741 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, d_attr
	jne	.L1172	#,
	.loc 1 5745 0 is_stmt 1
	movq	-24(%rbp), %rax	# die, tmp67
	movq	32(%rax), %rax	# die_3(D)->die_child, tmp68
	movq	%rax, -16(%rbp)	# tmp68, c
	jmp	.L1173	#
.L1174:
	.loc 1 5746 0 discriminator 2
	movq	-16(%rbp), %rax	# c, tmp69
	movq	%rax, %rdi	# tmp69,
	call	output_location_lists	#
	.loc 1 5745 0 discriminator 2
	movq	-16(%rbp), %rax	# c, tmp70
	movq	40(%rax), %rax	# c_1->die_sib, tmp71
	movq	%rax, -16(%rbp)	# tmp71, c
.L1173:
	.loc 1 5745 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, c
	jne	.L1174	#,
	.loc 1 5748 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE127:
	.size	output_location_lists, .-output_location_lists
	.type	build_abbrev_table, @function
build_abbrev_table:
.LFB128:
	.loc 1 5757 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# die, die
	.loc 1 5765 0
	movq	-72(%rbp), %rax	# die, tmp103
	movq	16(%rax), %rax	# die_6(D)->die_attr, tmp104
	movq	%rax, -40(%rbp)	# tmp104, d_attr
	jmp	.L1176	#
.L1179:
	.loc 1 5766 0
	movq	-40(%rbp), %rax	# d_attr, tmp105
	movq	%rax, %rdi	# tmp105,
	call	AT_class	#
	cmpl	$10, %eax	#, D.23955
	jne	.L1177	#,
	.loc 1 5767 0
	movq	-40(%rbp), %rax	# d_attr, tmp106
	movq	%rax, %rdi	# tmp106,
	call	AT_ref	#
	movl	64(%rax), %eax	# _9->die_mark, D.23957
	testl	%eax, %eax	# D.23957
	jne	.L1177	#,
	.loc 1 5769 0
	movq	-40(%rbp), %rax	# d_attr, tmp107
	movq	%rax, %rdi	# tmp107,
	call	AT_ref	#
	movq	8(%rax), %rax	# _11->die_symbol, D.23958
	testq	%rax, %rax	# D.23958
	jne	.L1178	#,
	.loc 1 5770 0
	movl	$__FUNCTION__.15964, %edx	#,
	movl	$5770, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1178:
	.loc 1 5772 0
	movq	-40(%rbp), %rax	# d_attr, tmp108
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp108,
	call	set_AT_ref_external	#
.L1177:
	.loc 1 5765 0
	movq	-40(%rbp), %rax	# d_attr, tmp109
	movq	8(%rax), %rax	# d_attr_3->dw_attr_next, tmp110
	movq	%rax, -40(%rbp)	# tmp110, d_attr
.L1176:
	.loc 1 5765 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, d_attr
	jne	.L1179	#,
	.loc 1 5775 0 is_stmt 1
	movq	$1, -56(%rbp)	#, abbrev_id
	jmp	.L1180	#
.L1186:
.LBB27:
	.loc 1 5777 0
	movq	abbrev_die_table(%rip), %rax	# abbrev_die_table, abbrev_die_table.209
	movq	-56(%rbp), %rdx	# abbrev_id, tmp111
	salq	$3, %rdx	#, D.23959
	addq	%rdx, %rax	# D.23959, D.23960
	movq	(%rax), %rax	# *_19, tmp112
	movq	%rax, -24(%rbp)	# tmp112, abbrev
	.loc 1 5779 0
	movq	-24(%rbp), %rax	# abbrev, tmp113
	movl	(%rax), %edx	# abbrev_20->die_tag, D.23961
	movq	-72(%rbp), %rax	# die, tmp114
	movl	(%rax), %eax	# die_6(D)->die_tag, D.23961
	cmpl	%eax, %edx	# D.23961, D.23961
	jne	.L1181	#,
	.loc 1 5781 0
	movq	-24(%rbp), %rax	# abbrev, tmp115
	movq	32(%rax), %rax	# abbrev_20->die_child, D.23956
	testq	%rax, %rax	# D.23956
	sete	%dl	#, D.23962
	movq	-72(%rbp), %rax	# die, tmp116
	movq	32(%rax), %rax	# die_6(D)->die_child, D.23956
	testq	%rax, %rax	# D.23956
	setne	%al	#, D.23962
	xorl	%edx, %eax	# D.23962, D.23962
	testb	%al, %al	# D.23962
	je	.L1181	#,
	.loc 1 5783 0
	movq	-24(%rbp), %rax	# abbrev, tmp117
	movq	16(%rax), %rax	# abbrev_20->die_attr, tmp118
	movq	%rax, -32(%rbp)	# tmp118, a_attr
	.loc 1 5784 0
	movq	-72(%rbp), %rax	# die, tmp119
	movq	16(%rax), %rax	# die_6(D)->die_attr, tmp120
	movq	%rax, -40(%rbp)	# tmp120, d_attr
	.loc 1 5786 0
	jmp	.L1182	#
.L1184:
	.loc 1 5788 0
	movq	-32(%rbp), %rax	# a_attr, tmp121
	movl	(%rax), %edx	# a_attr_5->dw_attr, D.23963
	movq	-40(%rbp), %rax	# d_attr, tmp122
	movl	(%rax), %eax	# d_attr_4->dw_attr, D.23963
	cmpl	%eax, %edx	# D.23963, D.23963
	jne	.L1183	#,
	.loc 1 5789 0
	movq	-32(%rbp), %rax	# a_attr, tmp123
	movq	%rax, %rdi	# tmp123,
	call	value_format	#
	movl	%eax, %ebx	#, D.23964
	movq	-40(%rbp), %rax	# d_attr, tmp124
	movq	%rax, %rdi	# tmp124,
	call	value_format	#
	cmpl	%eax, %ebx	# D.23964, D.23964
	jne	.L1183	#,
	.loc 1 5792 0
	movq	-32(%rbp), %rax	# a_attr, tmp125
	movq	8(%rax), %rax	# a_attr_5->dw_attr_next, tmp126
	movq	%rax, -32(%rbp)	# tmp126, a_attr
	.loc 1 5793 0
	movq	-40(%rbp), %rax	# d_attr, tmp127
	movq	8(%rax), %rax	# d_attr_4->dw_attr_next, tmp128
	movq	%rax, -40(%rbp)	# tmp128, d_attr
.L1182:
	.loc 1 5786 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, a_attr
	je	.L1183	#,
	.loc 1 5786 0 is_stmt 0 discriminator 2
	cmpq	$0, -40(%rbp)	#, d_attr
	jne	.L1184	#,
.L1183:
	.loc 1 5796 0 is_stmt 1
	cmpq	$0, -32(%rbp)	#, a_attr
	jne	.L1181	#,
	.loc 1 5796 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, d_attr
	jne	.L1181	#,
	.loc 1 5797 0 is_stmt 1
	jmp	.L1185	#
.L1181:
.LBE27:
	.loc 1 5775 0
	addq	$1, -56(%rbp)	#, abbrev_id
.L1180:
	.loc 1 5775 0 is_stmt 0 discriminator 1
	movl	abbrev_die_table_in_use(%rip), %eax	# abbrev_die_table_in_use, abbrev_die_table_in_use.210
	movl	%eax, %eax	# abbrev_die_table_in_use.210, D.23959
	cmpq	-56(%rbp), %rax	# abbrev_id, D.23959
	ja	.L1186	#,
.L1185:
	.loc 1 5802 0 is_stmt 1
	movl	abbrev_die_table_in_use(%rip), %eax	# abbrev_die_table_in_use, abbrev_die_table_in_use.211
	movl	%eax, %eax	# abbrev_die_table_in_use.211, D.23959
	cmpq	-56(%rbp), %rax	# abbrev_id, D.23959
	ja	.L1187	#,
	.loc 1 5804 0
	movl	abbrev_die_table_in_use(%rip), %edx	# abbrev_die_table_in_use, abbrev_die_table_in_use.212
	movl	abbrev_die_table_allocated(%rip), %eax	# abbrev_die_table_allocated, abbrev_die_table_allocated.213
	cmpl	%eax, %edx	# abbrev_die_table_allocated.213, abbrev_die_table_in_use.212
	jb	.L1188	#,
	.loc 1 5806 0
	movl	abbrev_die_table_allocated(%rip), %eax	# abbrev_die_table_allocated, abbrev_die_table_allocated.214
	addl	$256, %eax	#, tmp129
	movl	%eax, -60(%rbp)	# tmp129, n_alloc
	.loc 1 5808 0
	movl	-60(%rbp), %eax	# n_alloc, D.23959
	leaq	0(,%rax,8), %rdx	#, D.23959
	movq	abbrev_die_table(%rip), %rax	# abbrev_die_table, abbrev_die_table.215
	movq	%rdx, %rsi	# D.23959,
	movq	%rax, %rdi	# abbrev_die_table.215,
	call	xrealloc	#
	movq	%rax, abbrev_die_table(%rip)	# abbrev_die_table.216, abbrev_die_table
	.loc 1 5812 0
	movl	abbrev_die_table_allocated(%rip), %eax	# abbrev_die_table_allocated, abbrev_die_table_allocated.217
	movl	-60(%rbp), %edx	# n_alloc, tmp130
	subl	%eax, %edx	# abbrev_die_table_allocated.217, D.23965
	movl	%edx, %eax	# D.23965, D.23965
	.loc 1 5811 0
	movl	%eax, %eax	# D.23965, D.23959
	leaq	0(,%rax,8), %rdx	#, D.23959
	movq	abbrev_die_table(%rip), %rax	# abbrev_die_table, abbrev_die_table.218
	movl	abbrev_die_table_allocated(%rip), %ecx	# abbrev_die_table_allocated, abbrev_die_table_allocated.219
	movl	%ecx, %ecx	# abbrev_die_table_allocated.219, D.23959
	salq	$3, %rcx	#, D.23959
	addq	%rcx, %rax	# D.23959, D.23966
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.23966,
	call	memset	#
	.loc 1 5813 0
	movl	-60(%rbp), %eax	# n_alloc, tmp131
	movl	%eax, abbrev_die_table_allocated(%rip)	# tmp131, abbrev_die_table_allocated
.L1188:
	.loc 1 5816 0
	movl	abbrev_die_table_in_use(%rip), %eax	# abbrev_die_table_in_use, abbrev_die_table_in_use.220
	addl	$1, %eax	#, abbrev_die_table_in_use.221
	movl	%eax, abbrev_die_table_in_use(%rip)	# abbrev_die_table_in_use.221, abbrev_die_table_in_use
	.loc 1 5817 0
	movq	abbrev_die_table(%rip), %rax	# abbrev_die_table, abbrev_die_table.222
	movq	-56(%rbp), %rdx	# abbrev_id, tmp132
	salq	$3, %rdx	#, D.23959
	addq	%rax, %rdx	# abbrev_die_table.222, D.23960
	movq	-72(%rbp), %rax	# die, tmp133
	movq	%rax, (%rdx)	# tmp133, *_60
.L1187:
	.loc 1 5820 0
	movq	-72(%rbp), %rax	# die, tmp134
	movq	-56(%rbp), %rdx	# abbrev_id, tmp135
	movq	%rdx, 56(%rax)	# tmp135, die_6(D)->die_abbrev
	.loc 1 5821 0
	movq	-72(%rbp), %rax	# die, tmp136
	movq	32(%rax), %rax	# die_6(D)->die_child, tmp137
	movq	%rax, -48(%rbp)	# tmp137, c
	jmp	.L1189	#
.L1190:
	.loc 1 5822 0 discriminator 2
	movq	-48(%rbp), %rax	# c, tmp138
	movq	%rax, %rdi	# tmp138,
	call	build_abbrev_table	#
	.loc 1 5821 0 discriminator 2
	movq	-48(%rbp), %rax	# c, tmp139
	movq	40(%rax), %rax	# c_2->die_sib, tmp140
	movq	%rax, -48(%rbp)	# tmp140, c
.L1189:
	.loc 1 5821 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, c
	jne	.L1190	#,
	.loc 1 5823 0 is_stmt 1
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE128:
	.size	build_abbrev_table, .-build_abbrev_table
	.type	constant_size, @function
constant_size:
.LFB129:
	.loc 1 5830 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# value, value
	.loc 1 5833 0
	cmpq	$0, -24(%rbp)	#, value
	jne	.L1192	#,
	.loc 1 5834 0
	movl	$0, -4(%rbp)	#, log
	jmp	.L1193	#
.L1192:
	.loc 1 5836 0
	movq	-24(%rbp), %rax	# value, tmp64
	movq	%rax, %rdi	# tmp64,
	call	floor_log2_wide	#
	movl	%eax, -4(%rbp)	# tmp65, log
.L1193:
	.loc 1 5838 0
	movl	-4(%rbp), %eax	# log, tmp67
	leal	7(%rax), %edx	#, tmp69
	testl	%eax, %eax	# tmp68
	cmovs	%edx, %eax	# tmp69,, tmp68
	sarl	$3, %eax	#, tmp70
	movl	%eax, -4(%rbp)	# tmp70, log
	.loc 1 5839 0
	movl	-4(%rbp), %eax	# log, tmp71
	cltq
	movq	%rax, %rdi	# D.23967,
	call	floor_log2_wide	#
	addl	$1, %eax	#, D.23968
	movl	$1, %edx	#, tmp72
	movl	%eax, %ecx	# D.23968, tmp76
	sall	%cl, %edx	# tmp76, tmp73
	movl	%edx, %eax	# tmp73, tmp73
	movl	%eax, -4(%rbp)	# tmp73, log
	.loc 1 5841 0
	movl	-4(%rbp), %eax	# log, D.23968
	.loc 1 5842 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE129:
	.size	constant_size, .-constant_size
	.type	size_of_die, @function
size_of_die:
.LFB130:
	.loc 1 5850 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# die, die
	.loc 1 5851 0
	movq	$0, -24(%rbp)	#, size
	.loc 1 5854 0
	movq	-40(%rbp), %rax	# die, tmp89
	movq	56(%rax), %rax	# die_8(D)->die_abbrev, D.23969
	movq	%rax, %rdi	# D.23969,
	call	size_of_uleb128	#
	cltq
	addq	%rax, -24(%rbp)	# D.23969, size
	.loc 1 5855 0
	movq	-40(%rbp), %rax	# die, tmp90
	movq	16(%rax), %rax	# die_8(D)->die_attr, tmp91
	movq	%rax, -16(%rbp)	# tmp91, a
	jmp	.L1196	#
.L1221:
	.loc 1 5857 0
	movq	-16(%rbp), %rax	# a, tmp92
	movq	%rax, %rdi	# tmp92,
	call	AT_class	#
	cmpl	$14, %eax	#, D.23971
	ja	.L1197	#,
	movl	%eax, %eax	# D.23971, tmp93
	movq	.L1199(,%rax,8), %rax	#, tmp94
	jmp	*%rax	# tmp94
	.section	.rodata
	.align 8
	.align 4
.L1199:
	.quad	.L1198
	.quad	.L1200
	.quad	.L1201
	.quad	.L1202
	.quad	.L1203
	.quad	.L1204
	.quad	.L1205
	.quad	.L1206
	.quad	.L1207
	.quad	.L1208
	.quad	.L1209
	.quad	.L1210
	.quad	.L1211
	.quad	.L1212
	.quad	.L1213
	.text
.L1198:
	.loc 1 5860 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.224
	andl	$33554432, %eax	#, D.23970
	testl	%eax, %eax	# D.23970
	je	.L1214	#,
	.loc 1 5860 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.223
	jmp	.L1215	#
.L1214:
	.loc 1 5860 0 discriminator 2
	movl	$4, %eax	#, iftmp.223
.L1215:
	.loc 1 5860 0 discriminator 3
	addq	%rax, -24(%rbp)	# iftmp.223, size
	.loc 1 5861 0 is_stmt 1 discriminator 3
	jmp	.L1216	#
.L1200:
	.loc 1 5863 0
	addq	$4, -24(%rbp)	#, size
	.loc 1 5864 0
	jmp	.L1216	#
.L1201:
.LBB28:
	.loc 1 5867 0
	movq	-16(%rbp), %rax	# a, tmp95
	movq	%rax, %rdi	# tmp95,
	call	AT_loc	#
	movq	%rax, %rdi	# D.23972,
	call	size_of_locs	#
	movq	%rax, -8(%rbp)	# tmp96, lsize
	.loc 1 5870 0
	movq	-8(%rbp), %rax	# lsize, tmp97
	movq	%rax, %rdi	# tmp97,
	call	constant_size	#
	cltq
	addq	%rax, -24(%rbp)	# D.23969, size
	.loc 1 5871 0
	movq	-8(%rbp), %rax	# lsize, tmp98
	addq	%rax, -24(%rbp)	# tmp98, size
.LBE28:
	.loc 1 5873 0
	jmp	.L1216	#
.L1202:
	.loc 1 5875 0
	addq	$4, -24(%rbp)	#, size
	.loc 1 5876 0
	jmp	.L1216	#
.L1203:
	.loc 1 5878 0
	addq	$4, -24(%rbp)	#, size
	.loc 1 5879 0
	jmp	.L1216	#
.L1204:
	.loc 1 5881 0
	movq	-16(%rbp), %rax	# a, tmp99
	movq	%rax, %rdi	# tmp99,
	call	AT_int	#
	movq	%rax, %rdi	# D.23973,
	call	size_of_sleb128	#
	cltq
	addq	%rax, -24(%rbp)	# D.23969, size
	.loc 1 5882 0
	jmp	.L1216	#
.L1205:
	.loc 1 5884 0
	movq	-16(%rbp), %rax	# a, tmp100
	movq	%rax, %rdi	# tmp100,
	call	AT_unsigned	#
	movq	%rax, %rdi	# D.23969,
	call	constant_size	#
	cltq
	addq	%rax, -24(%rbp)	# D.23969, size
	.loc 1 5885 0
	jmp	.L1216	#
.L1206:
	.loc 1 5887 0
	addq	$17, -24(%rbp)	#, size
	.loc 1 5888 0
	jmp	.L1216	#
.L1207:
	.loc 1 5890 0
	movq	-16(%rbp), %rax	# a, tmp101
	movl	32(%rax), %eax	# a_4->dw_attr_val.v.val_float.length, D.23974
	sall	$2, %eax	#, D.23974
	addl	$1, %eax	#, D.23974
	movl	%eax, %eax	# D.23974, D.23969
	addq	%rax, -24(%rbp)	# D.23969, size
	.loc 1 5891 0
	jmp	.L1216	#
.L1208:
	.loc 1 5893 0
	addq	$1, -24(%rbp)	#, size
	.loc 1 5894 0
	jmp	.L1216	#
.L1209:
	.loc 1 5896 0
	addq	$4, -24(%rbp)	#, size
	.loc 1 5897 0
	jmp	.L1216	#
.L1210:
	.loc 1 5899 0
	addq	$4, -24(%rbp)	#, size
	.loc 1 5900 0
	jmp	.L1216	#
.L1211:
	.loc 1 5902 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.226
	andl	$33554432, %eax	#, D.23970
	testl	%eax, %eax	# D.23970
	je	.L1217	#,
	.loc 1 5902 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.225
	jmp	.L1218	#
.L1217:
	.loc 1 5902 0 discriminator 2
	movl	$4, %eax	#, iftmp.225
.L1218:
	.loc 1 5902 0 discriminator 3
	addq	%rax, -24(%rbp)	# iftmp.225, size
	.loc 1 5903 0 is_stmt 1 discriminator 3
	jmp	.L1216	#
.L1212:
	.loc 1 5905 0
	addq	$4, -24(%rbp)	#, size
	.loc 1 5906 0
	jmp	.L1216	#
.L1213:
	.loc 1 5908 0
	movq	-16(%rbp), %rax	# a, tmp102
	movq	%rax, %rdi	# tmp102,
	call	AT_string_form	#
	cmpl	$14, %eax	#, D.23970
	jne	.L1219	#,
	.loc 1 5909 0
	addq	$4, -24(%rbp)	#, size
	.loc 1 5912 0
	jmp	.L1216	#
.L1219:
	.loc 1 5911 0
	movq	-16(%rbp), %rax	# a, tmp103
	movq	24(%rax), %rax	# a_4->dw_attr_val.v.val_str, D.23975
	movl	(%rax), %eax	# _54->id.len, D.23974
	addl	$1, %eax	#, D.23974
	movl	%eax, %eax	# D.23974, D.23969
	addq	%rax, -24(%rbp)	# D.23969, size
	.loc 1 5912 0
	jmp	.L1216	#
.L1197:
	.loc 1 5914 0
	movl	$__FUNCTION__.16005, %edx	#,
	movl	$5914, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1216:
	.loc 1 5855 0
	movq	-16(%rbp), %rax	# a, tmp104
	movq	8(%rax), %rax	# a_4->dw_attr_next, tmp105
	movq	%rax, -16(%rbp)	# tmp105, a
.L1196:
	.loc 1 5855 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, a
	jne	.L1221	#,
	.loc 1 5918 0 is_stmt 1
	movq	-24(%rbp), %rax	# size, D.23969
	.loc 1 5919 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE130:
	.size	size_of_die, .-size_of_die
	.type	calc_die_sizes, @function
calc_die_sizes:
.LFB131:
	.loc 1 5929 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	.loc 1 5932 0
	movq	next_die_offset(%rip), %rax	# next_die_offset, next_die_offset.227
	movq	%rax, %rdx	# next_die_offset.227, next_die_offset.228
	movq	-24(%rbp), %rax	# die, tmp67
	movq	%rdx, 48(%rax)	# next_die_offset.228, die_4(D)->die_offset
	.loc 1 5933 0
	movq	-24(%rbp), %rax	# die, tmp68
	movq	%rax, %rdi	# tmp68,
	call	size_of_die	#
	movq	next_die_offset(%rip), %rdx	# next_die_offset, next_die_offset.229
	addq	%rdx, %rax	# next_die_offset.229, next_die_offset.230
	movq	%rax, next_die_offset(%rip)	# next_die_offset.230, next_die_offset
	.loc 1 5935 0
	movq	-24(%rbp), %rax	# die, tmp69
	movq	32(%rax), %rax	# die_4(D)->die_child, tmp70
	movq	%rax, -8(%rbp)	# tmp70, c
	jmp	.L1224	#
.L1225:
	.loc 1 5936 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp71
	movq	%rax, %rdi	# tmp71,
	call	calc_die_sizes	#
	.loc 1 5935 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp72
	movq	40(%rax), %rax	# c_1->die_sib, tmp73
	movq	%rax, -8(%rbp)	# tmp73, c
.L1224:
	.loc 1 5935 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, c
	jne	.L1225	#,
	.loc 1 5938 0 is_stmt 1
	movq	-24(%rbp), %rax	# die, tmp74
	movq	32(%rax), %rax	# die_4(D)->die_child, D.23977
	testq	%rax, %rax	# D.23977
	je	.L1223	#,
	.loc 1 5940 0
	movq	next_die_offset(%rip), %rax	# next_die_offset, next_die_offset.231
	addq	$1, %rax	#, next_die_offset.232
	movq	%rax, next_die_offset(%rip)	# next_die_offset.232, next_die_offset
.L1223:
	.loc 1 5941 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE131:
	.size	calc_die_sizes, .-calc_die_sizes
	.type	mark_dies, @function
mark_dies:
.LFB132:
	.loc 1 5951 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	.loc 1 5954 0
	movq	-24(%rbp), %rax	# die, tmp59
	movl	$1, 64(%rax)	#, die_2(D)->die_mark
	.loc 1 5955 0
	movq	-24(%rbp), %rax	# die, tmp60
	movq	32(%rax), %rax	# die_2(D)->die_child, tmp61
	movq	%rax, -8(%rbp)	# tmp61, c
	jmp	.L1228	#
.L1229:
	.loc 1 5956 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp62
	movq	%rax, %rdi	# tmp62,
	call	mark_dies	#
	.loc 1 5955 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp63
	movq	40(%rax), %rax	# c_1->die_sib, tmp64
	movq	%rax, -8(%rbp)	# tmp64, c
.L1228:
	.loc 1 5955 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, c
	jne	.L1229	#,
	.loc 1 5957 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE132:
	.size	mark_dies, .-mark_dies
	.type	unmark_dies, @function
unmark_dies:
.LFB133:
	.loc 1 5964 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	.loc 1 5967 0
	movq	-24(%rbp), %rax	# die, tmp59
	movl	$0, 64(%rax)	#, die_2(D)->die_mark
	.loc 1 5968 0
	movq	-24(%rbp), %rax	# die, tmp60
	movq	32(%rax), %rax	# die_2(D)->die_child, tmp61
	movq	%rax, -8(%rbp)	# tmp61, c
	jmp	.L1231	#
.L1232:
	.loc 1 5969 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp62
	movq	%rax, %rdi	# tmp62,
	call	unmark_dies	#
	.loc 1 5968 0 discriminator 2
	movq	-8(%rbp), %rax	# c, tmp63
	movq	40(%rax), %rax	# c_1->die_sib, tmp64
	movq	%rax, -8(%rbp)	# tmp64, c
.L1231:
	.loc 1 5968 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, c
	jne	.L1232	#,
	.loc 1 5970 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE133:
	.size	unmark_dies, .-unmark_dies
	.type	size_of_pubnames, @function
size_of_pubnames:
.LFB134:
	.loc 1 5977 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	.loc 1 5981 0
	movq	$10, -16(%rbp)	#, size
	.loc 1 5982 0
	movl	$0, -20(%rbp)	#, i
	jmp	.L1234	#
.L1235:
.LBB29:
	.loc 1 5984 0 discriminator 2
	movq	pubname_table(%rip), %rax	# pubname_table, pubname_table.233
	movl	-20(%rbp), %edx	# i, D.23978
	salq	$4, %rdx	#, D.23978
	addq	%rdx, %rax	# D.23978, tmp68
	movq	%rax, -8(%rbp)	# tmp68, p
	.loc 1 5985 0 discriminator 2
	movq	-8(%rbp), %rax	# p, tmp69
	movq	8(%rax), %rax	# p_9->name, D.23979
	movq	%rax, %rdi	# D.23979,
	call	strlen	#
	movq	-16(%rbp), %rdx	# size, tmp70
	addq	%rdx, %rax	# tmp70, D.23978
	addq	$5, %rax	#, tmp71
	movq	%rax, -16(%rbp)	# tmp71, size
.LBE29:
	.loc 1 5982 0 discriminator 2
	addl	$1, -20(%rbp)	#, i
.L1234:
	.loc 1 5982 0 is_stmt 0 discriminator 1
	movl	pubname_table_in_use(%rip), %eax	# pubname_table_in_use, pubname_table_in_use.234
	cmpl	%eax, -20(%rbp)	# pubname_table_in_use.234, i
	jb	.L1235	#,
	.loc 1 5988 0 is_stmt 1
	addq	$4, -16(%rbp)	#, size
	.loc 1 5989 0
	movq	-16(%rbp), %rax	# size, D.23978
	.loc 1 5990 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE134:
	.size	size_of_pubnames, .-size_of_pubnames
	.type	size_of_aranges, @function
size_of_aranges:
.LFB135:
	.loc 1 5996 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 5999 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.236
	andl	$33554432, %eax	#, D.23980
	testl	%eax, %eax	# D.23980
	je	.L1238	#,
	.loc 1 5999 0 is_stmt 0 discriminator 1
	movl	$27, %eax	#, iftmp.235
	jmp	.L1239	#
.L1238:
	.loc 1 5999 0 discriminator 2
	movl	$19, %eax	#, iftmp.235
.L1239:
	.loc 1 5999 0 discriminator 3
	movl	target_flags(%rip), %edx	# target_flags, target_flags.238
	andl	$33554432, %edx	#, D.23980
	testl	%edx, %edx	# D.23980
	je	.L1240	#,
	.loc 1 5999 0 discriminator 1
	movl	$16, %ecx	#, iftmp.237
	jmp	.L1241	#
.L1240:
	.loc 1 5999 0 discriminator 2
	movl	$8, %ecx	#, iftmp.237
.L1241:
	.loc 1 5999 0 discriminator 3
	cltd
	idivl	%ecx	# iftmp.237
	movl	%eax, %edx	# tmp85, D.23980
	movl	target_flags(%rip), %eax	# target_flags, target_flags.240
	andl	$33554432, %eax	#, D.23980
	testl	%eax, %eax	# D.23980
	je	.L1242	#,
	.loc 1 5999 0 discriminator 1
	movl	$16, %eax	#, iftmp.239
	jmp	.L1243	#
.L1242:
	.loc 1 5999 0 discriminator 2
	movl	$8, %eax	#, iftmp.239
.L1243:
	.loc 1 5999 0 discriminator 3
	imull	%edx, %eax	# D.23980, D.23980
	subl	$4, %eax	#, D.23980
	cltq
	movq	%rax, -8(%rbp)	# tmp87, size
	.loc 1 6002 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.242
	andl	$33554432, %eax	#, D.23980
	testl	%eax, %eax	# D.23980
	je	.L1244	#,
	.loc 1 6002 0 is_stmt 0 discriminator 1
	movl	$16, %eax	#, iftmp.241
	jmp	.L1245	#
.L1244:
	.loc 1 6002 0 discriminator 2
	movl	$8, %eax	#, iftmp.241
.L1245:
	.loc 1 6002 0 discriminator 3
	addq	%rax, -8(%rbp)	# iftmp.241, size
	.loc 1 6003 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.244
	andl	$33554432, %eax	#, D.23980
	testl	%eax, %eax	# D.23980
	je	.L1246	#,
	.loc 1 6003 0 is_stmt 0 discriminator 1
	movl	$16, %eax	#, iftmp.243
	jmp	.L1247	#
.L1246:
	.loc 1 6003 0 discriminator 2
	movl	$8, %eax	#, iftmp.243
.L1247:
	.loc 1 6003 0 discriminator 3
	movl	arange_table_in_use(%rip), %edx	# arange_table_in_use, arange_table_in_use.245
	imull	%edx, %eax	# arange_table_in_use.245, D.23981
	movl	%eax, %eax	# D.23981, D.23982
	addq	%rax, -8(%rbp)	# D.23982, size
	.loc 1 6006 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.247
	andl	$33554432, %eax	#, D.23980
	testl	%eax, %eax	# D.23980
	je	.L1248	#,
	.loc 1 6006 0 is_stmt 0 discriminator 1
	movl	$16, %eax	#, iftmp.246
	jmp	.L1249	#
.L1248:
	.loc 1 6006 0 discriminator 2
	movl	$8, %eax	#, iftmp.246
.L1249:
	.loc 1 6006 0 discriminator 3
	addq	%rax, -8(%rbp)	# iftmp.246, size
	.loc 1 6007 0 is_stmt 1 discriminator 3
	movq	-8(%rbp), %rax	# size, D.23982
	.loc 1 6008 0 discriminator 3
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE135:
	.size	size_of_aranges, .-size_of_aranges
	.type	value_format, @function
value_format:
.LFB136:
	.loc 1 6015 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# a, a
	.loc 1 6016 0
	movq	-8(%rbp), %rax	# a, tmp69
	movl	16(%rax), %eax	# a_2(D)->dw_attr_val.val_class, D.23984
	cmpl	$14, %eax	#, D.23984
	ja	.L1252	#,
	movl	%eax, %eax	# D.23984, tmp70
	movq	.L1254(,%rax,8), %rax	#, tmp71
	jmp	*%rax	# tmp71
	.section	.rodata
	.align 8
	.align 4
.L1254:
	.quad	.L1253
	.quad	.L1255
	.quad	.L1256
	.quad	.L1257
	.quad	.L1255
	.quad	.L1258
	.quad	.L1259
	.quad	.L1260
	.quad	.L1261
	.quad	.L1262
	.quad	.L1263
	.quad	.L1264
	.quad	.L1265
	.quad	.L1266
	.quad	.L1267
	.text
.L1253:
	.loc 1 6019 0
	movl	$1, %eax	#, D.23983
	jmp	.L1268	#
.L1255:
	.loc 1 6023 0
	movl	$6, %eax	#, D.23983
	jmp	.L1268	#
.L1257:
	.loc 1 6030 0
	movl	$6, %eax	#, D.23983
	jmp	.L1268	#
.L1256:
	.loc 1 6032 0
	movq	-8(%rbp), %rax	# a, tmp72
	movq	%rax, %rdi	# tmp72,
	call	AT_loc	#
	movq	%rax, %rdi	# D.23985,
	call	size_of_locs	#
	movq	%rax, %rdi	# D.23986,
	call	constant_size	#
	cmpl	$1, %eax	#, D.23987
	je	.L1270	#,
	cmpl	$2, %eax	#, D.23987
	je	.L1271	#,
	jmp	.L1279	#
.L1270:
	.loc 1 6035 0
	movl	$10, %eax	#, D.23983
	jmp	.L1268	#
.L1271:
	.loc 1 6037 0
	movl	$3, %eax	#, D.23983
	jmp	.L1268	#
.L1279:
	.loc 1 6039 0
	movl	$__FUNCTION__.16047, %edx	#,
	movl	$6039, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1258:
	.loc 1 6042 0
	movl	$13, %eax	#, D.23983
	jmp	.L1268	#
.L1259:
	.loc 1 6044 0
	movq	-8(%rbp), %rax	# a, tmp73
	movq	%rax, %rdi	# tmp73,
	call	AT_unsigned	#
	movq	%rax, %rdi	# D.23986,
	call	constant_size	#
	cmpl	$2, %eax	#, D.23987
	je	.L1273	#,
	cmpl	$2, %eax	#, D.23987
	jg	.L1274	#,
	cmpl	$1, %eax	#, D.23987
	je	.L1275	#,
	jmp	.L1272	#
.L1274:
	cmpl	$4, %eax	#, D.23987
	je	.L1276	#,
	cmpl	$8, %eax	#, D.23987
	je	.L1277	#,
	jmp	.L1272	#
.L1275:
	.loc 1 6047 0
	movl	$11, %eax	#, D.23983
	jmp	.L1268	#
.L1273:
	.loc 1 6049 0
	movl	$5, %eax	#, D.23983
	jmp	.L1268	#
.L1276:
	.loc 1 6051 0
	movl	$6, %eax	#, D.23983
	jmp	.L1268	#
.L1277:
	.loc 1 6053 0
	movl	$7, %eax	#, D.23983
	jmp	.L1268	#
.L1272:
	.loc 1 6055 0
	movl	$__FUNCTION__.16047, %edx	#,
	movl	$6055, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1260:
	.loc 1 6058 0
	movl	$10, %eax	#, D.23983
	jmp	.L1268	#
.L1261:
	.loc 1 6060 0
	movl	$10, %eax	#, D.23983
	jmp	.L1268	#
.L1262:
	.loc 1 6062 0
	movl	$12, %eax	#, D.23983
	jmp	.L1268	#
.L1263:
	.loc 1 6064 0
	movq	-8(%rbp), %rax	# a, tmp74
	movq	%rax, %rdi	# tmp74,
	call	AT_ref_external	#
	testl	%eax, %eax	# D.23987
	je	.L1278	#,
	.loc 1 6065 0
	movl	$16, %eax	#, D.23983
	jmp	.L1268	#
.L1278:
	.loc 1 6067 0
	movl	$19, %eax	#, D.23983
	jmp	.L1268	#
.L1264:
	.loc 1 6069 0
	movl	$6, %eax	#, D.23983
	jmp	.L1268	#
.L1265:
	.loc 1 6071 0
	movl	$1, %eax	#, D.23983
	jmp	.L1268	#
.L1266:
	.loc 1 6073 0
	movl	$6, %eax	#, D.23983
	jmp	.L1268	#
.L1267:
	.loc 1 6075 0
	movq	-8(%rbp), %rax	# a, tmp75
	movq	%rax, %rdi	# tmp75,
	call	AT_string_form	#
	jmp	.L1268	#
.L1252:
	.loc 1 6078 0
	movl	$__FUNCTION__.16047, %edx	#,
	movl	$6078, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1268:
	.loc 1 6080 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE136:
	.size	value_format, .-value_format
	.section	.rodata
.LC417:
	.string	"(%s)"
	.text
	.type	output_value_format, @function
output_value_format:
.LFB137:
	.loc 1 6087 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# a, a
	.loc 1 6088 0
	movq	-24(%rbp), %rax	# a, tmp61
	movq	%rax, %rdi	# tmp61,
	call	value_format	#
	movl	%eax, -4(%rbp)	# tmp62, form
	.loc 1 6090 0
	movl	-4(%rbp), %eax	# form, tmp63
	movl	%eax, %edi	# tmp63,
	call	dwarf_form_name	#
	movq	%rax, %rdx	#, D.23989
	movl	-4(%rbp), %eax	# form, D.23990
	movl	$.LC417, %esi	#,
	movq	%rax, %rdi	# D.23990,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 6091 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE137:
	.size	output_value_format, .-output_value_format
	.section	.rodata
.LC418:
	.string	"(abbrev code)"
.LC419:
	.string	"(TAG: %s)"
.LC420:
	.string	"DW_children_yes"
.LC421:
	.string	"DW_children_no"
	.text
	.type	output_abbrev_section, @function
output_abbrev_section:
.LFB138:
	.loc 1 6098 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	.loc 1 6103 0
	movq	$1, -24(%rbp)	#, abbrev_id
	jmp	.L1282	#
.L1287:
.LBB30:
	.loc 1 6105 0
	movq	abbrev_die_table(%rip), %rax	# abbrev_die_table, abbrev_die_table.248
	movq	-24(%rbp), %rdx	# abbrev_id, tmp73
	salq	$3, %rdx	#, D.23992
	addq	%rdx, %rax	# D.23992, D.23993
	movq	(%rax), %rax	# *_8, tmp74
	movq	%rax, -8(%rbp)	# tmp74, abbrev
	.loc 1 6107 0
	movq	-24(%rbp), %rax	# abbrev_id, tmp75
	movl	$.LC418, %esi	#,
	movq	%rax, %rdi	# tmp75,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 6109 0
	movq	-8(%rbp), %rax	# abbrev, tmp76
	movl	(%rax), %eax	# abbrev_9->die_tag, D.23994
	.loc 1 6108 0
	movl	%eax, %edi	# D.23994,
	call	dwarf_tag_name	#
	movq	%rax, %rdx	#, D.23995
	movq	-8(%rbp), %rax	# abbrev, tmp77
	movl	(%rax), %eax	# abbrev_9->die_tag, D.23994
	movl	%eax, %eax	# D.23994, D.23992
	movl	$.LC419, %esi	#,
	movq	%rax, %rdi	# D.23992,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 6111 0
	movq	-8(%rbp), %rax	# abbrev, tmp78
	movq	32(%rax), %rax	# abbrev_9->die_child, D.23996
	testq	%rax, %rax	# D.23996
	je	.L1283	#,
	.loc 1 6112 0
	movl	$.LC420, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	jmp	.L1284	#
.L1283:
	.loc 1 6114 0
	movl	$.LC421, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.L1284:
	.loc 1 6116 0
	movq	-8(%rbp), %rax	# abbrev, tmp79
	movq	16(%rax), %rax	# abbrev_9->die_attr, tmp80
	movq	%rax, -16(%rbp)	# tmp80, a_attr
	jmp	.L1285	#
.L1286:
	.loc 1 6120 0
	movq	-16(%rbp), %rax	# a_attr, tmp81
	movl	(%rax), %eax	# a_attr_2->dw_attr, D.23997
	.loc 1 6119 0
	movl	%eax, %edi	# D.23997,
	call	dwarf_attr_name	#
	movq	%rax, %rdx	#, D.23995
	movq	-16(%rbp), %rax	# a_attr, tmp82
	movl	(%rax), %eax	# a_attr_2->dw_attr, D.23997
	movl	%eax, %eax	# D.23997, D.23992
	movl	$.LC417, %esi	#,
	movq	%rax, %rdi	# D.23992,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 6121 0
	movq	-16(%rbp), %rax	# a_attr, tmp83
	movq	%rax, %rdi	# tmp83,
	call	output_value_format	#
	.loc 1 6117 0
	movq	-16(%rbp), %rax	# a_attr, tmp84
	movq	8(%rax), %rax	# a_attr_2->dw_attr_next, tmp85
	movq	%rax, -16(%rbp)	# tmp85, a_attr
.L1285:
	.loc 1 6116 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, a_attr
	jne	.L1286	#,
	.loc 1 6124 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6125 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.LBE30:
	.loc 1 6103 0
	addq	$1, -24(%rbp)	#, abbrev_id
.L1282:
	.loc 1 6103 0 is_stmt 0 discriminator 1
	movl	abbrev_die_table_in_use(%rip), %eax	# abbrev_die_table_in_use, abbrev_die_table_in_use.249
	movl	%eax, %eax	# abbrev_die_table_in_use.249, D.23992
	cmpq	-24(%rbp), %rax	# abbrev_id, D.23992
	ja	.L1287	#,
	.loc 1 6129 0 is_stmt 1
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6130 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE138:
	.size	output_abbrev_section, .-output_abbrev_section
	.section	.rodata
.LC422:
	.string	".globl "
	.text
	.type	output_die_symbol, @function
output_die_symbol:
.LFB139:
	.loc 1 6137 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	.loc 1 6138 0
	movq	-24(%rbp), %rax	# die, tmp65
	movq	8(%rax), %rax	# die_1(D)->die_symbol, tmp66
	movq	%rax, -8(%rbp)	# tmp66, sym
	.loc 1 6140 0
	cmpq	$0, -8(%rbp)	#, sym
	jne	.L1289	#,
	.loc 1 6141 0
	jmp	.L1288	#
.L1289:
	.loc 1 6143 0
	movq	-8(%rbp), %rax	# sym, tmp67
	movl	$2, %edx	#,
	movl	$.LC414, %esi	#,
	movq	%rax, %rdi	# tmp67,
	call	strncmp	#
	testl	%eax, %eax	# D.24002
	jne	.L1291	#,
	.loc 1 6147 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.266
	movq	%rax, %rcx	# asm_out_file.266,
	movl	$7, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC422, %edi	#,
	call	fwrite	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.267
	movq	-8(%rbp), %rdx	# sym, tmp68
	movq	%rdx, %rsi	# tmp68,
	movq	%rax, %rdi	# asm_out_file.267,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.268
	movq	%rax, %rsi	# asm_out_file.268,
	movl	$10, %edi	#,
	call	fputc	#
.L1291:
	.loc 1 6149 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.269
	movq	-8(%rbp), %rdx	# sym, tmp69
	movq	%rdx, %rsi	# tmp69,
	movq	%rax, %rdi	# asm_out_file.269,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.270
	movq	%rax, %rcx	# asm_out_file.270,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
.L1288:
	.loc 1 6150 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE139:
	.size	output_die_symbol, .-output_die_symbol
	.section	.rodata
.LC423:
	.string	".text"
	.align 8
.LC424:
	.string	"Location list base address specifier fake entry"
	.align 8
.LC425:
	.string	"Location list base address specifier base"
	.align 8
.LC426:
	.string	"Location list begin address (%s)"
	.align 8
.LC427:
	.string	"Location list end address (%s)"
.LC428:
	.string	"Location expression size"
	.align 8
.LC429:
	.string	"Location list terminator begin (%s)"
	.align 8
.LC430:
	.string	"Location list terminator end (%s)"
	.text
	.type	output_loc_list, @function
output_loc_list:
.LFB142:
	.loc 1 6202 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# list_head, list_head
	.loc 1 6203 0
	movq	-24(%rbp), %rax	# list_head, tmp87
	movq	%rax, -16(%rbp)	# tmp87, curr
	.loc 1 6205 0
	movq	-24(%rbp), %rax	# list_head, tmp88
	movq	24(%rax), %rdx	# list_head_6(D)->ll_symbol, D.24004
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.250
	movq	%rdx, %rsi	# D.24004,
	movq	%rax, %rdi	# asm_out_file.250,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.251
	movq	%rax, %rcx	# asm_out_file.251,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 6210 0
	movq	-16(%rbp), %rax	# curr, tmp89
	movq	32(%rax), %rax	# curr_7->section, D.24005
	movl	$.LC423, %esi	#,
	movq	%rax, %rdi	# D.24005,
	call	strcmp	#
	testl	%eax, %eax	# D.24006
	jne	.L1293	#,
	.loc 1 6213 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.253
	andl	$33554432, %eax	#, D.24006
	testl	%eax, %eax	# D.24006
	je	.L1294	#,
	.loc 1 6213 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.252
	jmp	.L1295	#
.L1294:
	.loc 1 6213 0 discriminator 2
	movl	$4, %eax	#, iftmp.252
.L1295:
	.loc 1 6213 0 discriminator 3
	movl	$.LC424, %edx	#,
	movq	$-1, %rsi	#,
	movl	%eax, %edi	# iftmp.252,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6215 0 is_stmt 1 discriminator 3
	movq	-16(%rbp), %rax	# curr, tmp90
	movq	32(%rax), %rcx	# curr_7->section, D.24005
	movl	target_flags(%rip), %eax	# target_flags, target_flags.255
	andl	$33554432, %eax	#, D.24006
	testl	%eax, %eax	# D.24006
	je	.L1296	#,
	.loc 1 6215 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.254
	jmp	.L1297	#
.L1296:
	.loc 1 6215 0 discriminator 2
	movl	$4, %eax	#, iftmp.254
.L1297:
	.loc 1 6215 0 discriminator 3
	movl	$.LC425, %edx	#,
	movq	%rcx, %rsi	# D.24005,
	movl	%eax, %edi	# iftmp.254,
	movl	$0, %eax	#,
	call	dw2_asm_output_offset	#
.L1293:
	.loc 1 6219 0 is_stmt 1
	movq	-24(%rbp), %rax	# list_head, tmp91
	movq	%rax, -16(%rbp)	# tmp91, curr
	jmp	.L1298	#
.L1304:
.LBB31:
	.loc 1 6223 0
	movq	-24(%rbp), %rax	# list_head, tmp92
	movq	24(%rax), %rcx	# list_head_6(D)->ll_symbol, D.24004
	movq	-16(%rbp), %rax	# curr, tmp93
	movq	32(%rax), %rdx	# curr_1->section, D.24005
	movq	-16(%rbp), %rax	# curr, tmp94
	movq	8(%rax), %rsi	# curr_1->begin, D.24005
	movl	target_flags(%rip), %eax	# target_flags, target_flags.257
	andl	$33554432, %eax	#, D.24006
	testl	%eax, %eax	# D.24006
	je	.L1299	#,
	.loc 1 6223 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.256
	jmp	.L1300	#
.L1299:
	.loc 1 6223 0 discriminator 2
	movl	$4, %eax	#, iftmp.256
.L1300:
	.loc 1 6223 0 discriminator 3
	movq	%rcx, %r8	# D.24004,
	movl	$.LC426, %ecx	#,
	movl	%eax, %edi	# iftmp.256,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 6226 0 is_stmt 1 discriminator 3
	movq	-24(%rbp), %rax	# list_head, tmp95
	movq	24(%rax), %rcx	# list_head_6(D)->ll_symbol, D.24004
	movq	-16(%rbp), %rax	# curr, tmp96
	movq	32(%rax), %rdx	# curr_1->section, D.24005
	movq	-16(%rbp), %rax	# curr, tmp97
	movq	16(%rax), %rsi	# curr_1->end, D.24005
	movl	target_flags(%rip), %eax	# target_flags, target_flags.259
	andl	$33554432, %eax	#, D.24006
	testl	%eax, %eax	# D.24006
	je	.L1301	#,
	.loc 1 6226 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.258
	jmp	.L1302	#
.L1301:
	.loc 1 6226 0 discriminator 2
	movl	$4, %eax	#, iftmp.258
.L1302:
	.loc 1 6226 0 discriminator 3
	movq	%rcx, %r8	# D.24004,
	movl	$.LC427, %ecx	#,
	movl	%eax, %edi	# iftmp.258,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 6229 0 is_stmt 1 discriminator 3
	movq	-16(%rbp), %rax	# curr, tmp98
	movq	40(%rax), %rax	# curr_1->expr, D.24007
	movq	%rax, %rdi	# D.24007,
	call	size_of_locs	#
	movq	%rax, -8(%rbp)	# tmp99, size
	.loc 1 6232 0 discriminator 3
	cmpq	$65535, -8(%rbp)	#, size
	jbe	.L1303	#,
	.loc 1 6233 0
	movl	$__FUNCTION__.16112, %edx	#,
	movl	$6233, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1303:
	.loc 1 6234 0
	movq	-8(%rbp), %rax	# size, tmp100
	movl	$.LC428, %ecx	#,
	movl	$.LC37, %edx	#,
	movq	%rax, %rsi	# tmp100,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6236 0
	movq	-16(%rbp), %rax	# curr, tmp101
	movq	40(%rax), %rax	# curr_1->expr, D.24007
	movq	%rax, %rdi	# D.24007,
	call	output_loc_sequence	#
.LBE31:
	.loc 1 6219 0
	movq	-16(%rbp), %rax	# curr, tmp102
	movq	(%rax), %rax	# curr_1->dw_loc_next, tmp103
	movq	%rax, -16(%rbp)	# tmp103, curr
.L1298:
	.loc 1 6219 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, curr
	jne	.L1304	#,
	.loc 1 6239 0 is_stmt 1
	movq	-24(%rbp), %rax	# list_head, tmp104
	movq	24(%rax), %rax	# list_head_6(D)->ll_symbol, D.24004
	movq	%rax, %rcx	# D.24004,
	movl	$.LC429, %edx	#,
	movl	$0, %esi	#,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6242 0
	movq	-24(%rbp), %rax	# list_head, tmp105
	movq	24(%rax), %rax	# list_head_6(D)->ll_symbol, D.24004
	movq	%rax, %rcx	# D.24004,
	movl	$.LC430, %edx	#,
	movl	$0, %esi	#,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6245 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE142:
	.size	output_loc_list, .-output_loc_list
	.section	.rodata
.LC431:
	.string	"(DIE (0x%lx) %s)"
.LC432:
	.string	"+0x%lx"
.LC433:
	.string	"long long constant"
.LC434:
	.string	"fp constant word %u"
.LC435:
	.string	"%s: \"%s\""
.LC436:
	.string	"end of children of DIE 0x%lx"
	.text
	.type	output_die, @function
output_die:
.LFB143:
	.loc 1 6253 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -136(%rbp)	# die, die
	.loc 1 6253 0
	movq	%fs:40, %rax	#, tmp197
	movq	%rax, -24(%rbp)	# tmp197, D.24031
	xorl	%eax, %eax	# tmp197
	.loc 1 6260 0
	movq	-136(%rbp), %rax	# die, tmp116
	movq	8(%rax), %rax	# die_7(D)->die_symbol, D.24016
	testq	%rax, %rax	# D.24016
	je	.L1306	#,
	.loc 1 6261 0
	movq	-136(%rbp), %rax	# die, tmp117
	movq	%rax, %rdi	# tmp117,
	call	output_die_symbol	#
.L1306:
	.loc 1 6264 0
	movq	-136(%rbp), %rax	# die, tmp118
	movl	(%rax), %eax	# die_7(D)->die_tag, D.24017
	.loc 1 6263 0
	movl	%eax, %edi	# D.24017,
	call	dwarf_tag_name	#
	movq	%rax, %rcx	#, D.24018
	movq	-136(%rbp), %rax	# die, tmp119
	movq	48(%rax), %rdx	# die_7(D)->die_offset, D.24019
	movq	-136(%rbp), %rax	# die, tmp120
	movq	56(%rax), %rax	# die_7(D)->die_abbrev, D.24020
	movl	$.LC431, %esi	#,
	movq	%rax, %rdi	# D.24020,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 6266 0
	movq	-136(%rbp), %rax	# die, tmp121
	movq	16(%rax), %rax	# die_7(D)->die_attr, tmp122
	movq	%rax, -120(%rbp)	# tmp122, a
	jmp	.L1307	#
.L1341:
.LBB32:
	.loc 1 6268 0
	movq	-120(%rbp), %rax	# a, tmp123
	movl	(%rax), %eax	# a_1->dw_attr, D.24021
	movl	%eax, %edi	# D.24021,
	call	dwarf_attr_name	#
	movq	%rax, -104(%rbp)	# tmp124, name
	.loc 1 6270 0
	movq	-120(%rbp), %rax	# a, tmp125
	movq	%rax, %rdi	# tmp125,
	call	AT_class	#
	cmpl	$14, %eax	#, D.24022
	ja	.L1308	#,
	movl	%eax, %eax	# D.24022, tmp126
	movq	.L1310(,%rax,8), %rax	#, tmp127
	jmp	*%rax	# tmp127
	.section	.rodata
	.align 8
	.align 4
.L1310:
	.quad	.L1309
	.quad	.L1311
	.quad	.L1312
	.quad	.L1313
	.quad	.L1314
	.quad	.L1315
	.quad	.L1316
	.quad	.L1317
	.quad	.L1318
	.quad	.L1319
	.quad	.L1320
	.quad	.L1321
	.quad	.L1322
	.quad	.L1323
	.quad	.L1324
	.text
.L1309:
	.loc 1 6273 0
	movq	-120(%rbp), %rax	# a, tmp128
	movq	%rax, %rdi	# tmp128,
	call	AT_addr	#
	movq	%rax, %rsi	#, D.24023
	movl	target_flags(%rip), %eax	# target_flags, target_flags.261
	andl	$33554432, %eax	#, D.24024
	testl	%eax, %eax	# D.24024
	je	.L1325	#,
	.loc 1 6273 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.260
	jmp	.L1326	#
.L1325:
	.loc 1 6273 0 discriminator 2
	movl	$4, %eax	#, iftmp.260
.L1326:
	.loc 1 6273 0 discriminator 3
	movq	-104(%rbp), %rdx	# name, tmp129
	movq	%rdx, %rcx	# tmp129,
	movl	$.LC37, %edx	#,
	movl	%eax, %edi	# iftmp.260,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr_rtx	#
	.loc 1 6274 0 is_stmt 1 discriminator 3
	jmp	.L1327	#
.L1311:
	.loc 1 6277 0
	movq	-120(%rbp), %rax	# a, tmp130
	movq	24(%rax), %rax	# a_1->dw_attr_val.v.val_offset, D.24020
	movq	-104(%rbp), %rdx	# name, tmp131
	movq	%rdx, %rcx	# tmp131,
	movl	$.LC37, %edx	#,
	movq	%rax, %rsi	# D.24020,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6279 0
	jmp	.L1327	#
.L1314:
.LBB33:
	.loc 1 6283 0
	movl	$0, %esi	#,
	movl	$ranges_section_label, %edi	#,
	call	strchr	#
	movq	%rax, -96(%rbp)	# tmp132, p
	.loc 1 6285 0
	movq	-120(%rbp), %rax	# a, tmp133
	movq	24(%rax), %rdx	# a_1->dw_attr_val.v.val_offset, D.24020
	movq	-96(%rbp), %rax	# p, tmp134
	movl	$.LC432, %esi	#,
	movq	%rax, %rdi	# tmp134,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 6286 0
	movq	-104(%rbp), %rax	# name, tmp135
	movq	%rax, %rcx	# tmp135,
	movl	$.LC37, %edx	#,
	movl	$ranges_section_label, %esi	#,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_offset	#
	.loc 1 6288 0
	movq	-96(%rbp), %rax	# p, tmp136
	movb	$0, (%rax)	#, *p_23
.LBE33:
	.loc 1 6290 0
	jmp	.L1327	#
.L1312:
	.loc 1 6293 0
	movq	-120(%rbp), %rax	# a, tmp137
	movq	%rax, %rdi	# tmp137,
	call	AT_loc	#
	movq	%rax, %rdi	# D.24025,
	call	size_of_locs	#
	movq	%rax, -88(%rbp)	# tmp138, size
	.loc 1 6296 0
	movq	-88(%rbp), %rax	# size, tmp139
	movq	%rax, %rdi	# tmp139,
	call	constant_size	#
	movq	-104(%rbp), %rdx	# name, tmp140
	movq	-88(%rbp), %rsi	# size, tmp141
	movq	%rdx, %rcx	# tmp140,
	movl	$.LC37, %edx	#,
	movl	%eax, %edi	# D.24024,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6298 0
	movq	-120(%rbp), %rax	# a, tmp142
	movq	%rax, %rdi	# tmp142,
	call	AT_loc	#
	movq	%rax, %rdi	# D.24025,
	call	output_loc_sequence	#
	.loc 1 6299 0
	jmp	.L1327	#
.L1315:
	.loc 1 6305 0
	movq	-120(%rbp), %rax	# a, tmp143
	movq	%rax, %rdi	# tmp143,
	call	AT_int	#
	movq	-104(%rbp), %rdx	# name, tmp144
	movl	$.LC37, %esi	#,
	movq	%rax, %rdi	# D.24019,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_sleb128	#
	.loc 1 6306 0
	jmp	.L1327	#
.L1316:
	.loc 1 6309 0
	movq	-120(%rbp), %rax	# a, tmp145
	movq	%rax, %rdi	# tmp145,
	call	AT_unsigned	#
	movq	%rax, %rbx	#, D.24020
	movq	-120(%rbp), %rax	# a, tmp146
	movq	%rax, %rdi	# tmp146,
	call	AT_unsigned	#
	movq	%rax, %rdi	# D.24020,
	call	constant_size	#
	movq	-104(%rbp), %rdx	# name, tmp147
	movq	%rdx, %rcx	# tmp147,
	movl	$.LC37, %edx	#,
	movq	%rbx, %rsi	# D.24020,
	movl	%eax, %edi	# D.24024,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6311 0
	jmp	.L1327	#
.L1317:
.LBB34:
	.loc 1 6317 0
	movq	-104(%rbp), %rax	# name, tmp148
	movq	%rax, %rcx	# tmp148,
	movl	$.LC37, %edx	#,
	movl	$16, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6328 0
	movq	-120(%rbp), %rax	# a, tmp149
	movq	32(%rax), %rax	# a_1->dw_attr_val.v.val_long_long.low, tmp150
	movq	%rax, -80(%rbp)	# tmp150, first
	.loc 1 6329 0
	movq	-120(%rbp), %rax	# a, tmp151
	movq	24(%rax), %rax	# a_1->dw_attr_val.v.val_long_long.hi, tmp152
	movq	%rax, -72(%rbp)	# tmp152, second
	.loc 1 6332 0
	movq	-80(%rbp), %rax	# first, tmp153
	movl	$.LC433, %edx	#,
	movq	%rax, %rsi	# tmp153,
	movl	$8, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6334 0
	movq	-72(%rbp), %rax	# second, tmp154
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp154,
	movl	$8, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.LBE34:
	.loc 1 6337 0
	jmp	.L1327	#
.L1318:
.LBB35:
	.loc 1 6343 0
	movq	-120(%rbp), %rax	# a, tmp155
	movl	32(%rax), %eax	# a_1->dw_attr_val.v.val_float.length, D.24026
	sall	$2, %eax	#, D.24026
	movl	%eax, %eax	# D.24026, D.24020
	movq	-104(%rbp), %rdx	# name, tmp156
	movq	%rdx, %rcx	# tmp156,
	movl	$.LC37, %edx	#,
	movq	%rax, %rsi	# D.24020,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6346 0
	movl	$0, -124(%rbp)	#, i
	jmp	.L1328	#
.L1329:
	.loc 1 6347 0 discriminator 2
	movq	-120(%rbp), %rax	# a, tmp157
	movq	24(%rax), %rax	# a_1->dw_attr_val.v.val_float.array, D.24027
	movl	-124(%rbp), %edx	# i, D.24020
	salq	$3, %rdx	#, D.24020
	addq	%rdx, %rax	# D.24020, D.24027
	movq	(%rax), %rax	# *_43, D.24019
	movl	-124(%rbp), %edx	# i, tmp158
	movl	%edx, %ecx	# tmp158,
	movl	$.LC434, %edx	#,
	movq	%rax, %rsi	# D.24020,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6346 0 discriminator 2
	addl	$1, -124(%rbp)	#, i
.L1328:
	.loc 1 6346 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# a, tmp159
	movl	32(%rax), %eax	# a_1->dw_attr_val.v.val_float.length, D.24026
	cmpl	-124(%rbp), %eax	# i, D.24026
	ja	.L1329	#,
	.loc 1 6349 0 is_stmt 1
	jmp	.L1327	#
.L1319:
.LBE35:
	.loc 1 6353 0
	movq	-120(%rbp), %rax	# a, tmp160
	movq	%rax, %rdi	# tmp160,
	call	AT_flag	#
	movl	%eax, %eax	# D.24026, D.24020
	movq	-104(%rbp), %rdx	# name, tmp161
	movq	%rdx, %rcx	# tmp161,
	movl	$.LC37, %edx	#,
	movq	%rax, %rsi	# D.24020,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6354 0
	jmp	.L1327	#
.L1313:
.LBB36:
	.loc 1 6358 0
	movq	-120(%rbp), %rax	# a, tmp162
	movq	%rax, %rdi	# tmp162,
	call	AT_loc_list	#
	movq	24(%rax), %rax	# _49->ll_symbol, tmp163
	movq	%rax, -64(%rbp)	# tmp163, sym
	.loc 1 6360 0
	cmpq	$0, -64(%rbp)	#, sym
	jne	.L1330	#,
	.loc 1 6361 0
	movl	$__FUNCTION__.16142, %edx	#,
	movl	$6361, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1330:
	.loc 1 6362 0
	movq	-104(%rbp), %rdx	# name, tmp164
	movq	-64(%rbp), %rax	# sym, tmp165
	movq	%rdx, %r8	# tmp164,
	movl	$.LC37, %ecx	#,
	movl	$loc_section_label, %edx	#,
	movq	%rax, %rsi	# tmp165,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
.LBE36:
	.loc 1 6365 0
	jmp	.L1327	#
.L1320:
	.loc 1 6368 0
	movq	-120(%rbp), %rax	# a, tmp166
	movq	%rax, %rdi	# tmp166,
	call	AT_ref_external	#
	testl	%eax, %eax	# D.24024
	je	.L1331	#,
.LBB37:
	.loc 1 6370 0
	movq	-120(%rbp), %rax	# a, tmp167
	movq	%rax, %rdi	# tmp167,
	call	AT_ref	#
	movq	8(%rax), %rax	# _52->die_symbol, tmp168
	movq	%rax, -56(%rbp)	# tmp168, sym
	.loc 1 6372 0
	cmpq	$0, -56(%rbp)	#, sym
	jne	.L1332	#,
	.loc 1 6373 0
	movl	$__FUNCTION__.16142, %edx	#,
	movl	$6373, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1332:
	.loc 1 6374 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.263
	andl	$33554432, %eax	#, D.24024
	testl	%eax, %eax	# D.24024
	je	.L1333	#,
	.loc 1 6374 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.262
	jmp	.L1334	#
.L1333:
	.loc 1 6374 0 discriminator 2
	movl	$4, %eax	#, iftmp.262
.L1334:
	.loc 1 6374 0 discriminator 1
	movq	-104(%rbp), %rdx	# name, tmp169
	movq	-56(%rbp), %rsi	# sym, tmp170
	movq	%rdx, %rcx	# tmp169,
	movl	$.LC37, %edx	#,
	movl	%eax, %edi	# iftmp.262,
	movl	$0, %eax	#,
	call	dw2_asm_output_offset	#
.LBE37:
	.loc 1 6381 0 is_stmt 1 discriminator 1
	jmp	.L1327	#
.L1331:
	.loc 1 6376 0
	movq	-120(%rbp), %rax	# a, tmp171
	movq	%rax, %rdi	# tmp171,
	call	AT_ref	#
	movq	48(%rax), %rax	# _58->die_offset, D.24019
	testq	%rax, %rax	# D.24019
	jne	.L1336	#,
	.loc 1 6377 0
	movl	$__FUNCTION__.16142, %edx	#,
	movl	$6377, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1336:
	.loc 1 6379 0
	movq	-120(%rbp), %rax	# a, tmp172
	movq	%rax, %rdi	# tmp172,
	call	AT_ref	#
	movq	48(%rax), %rax	# _60->die_offset, D.24019
	movq	-104(%rbp), %rdx	# name, tmp173
	movq	%rdx, %rcx	# tmp173,
	movl	$.LC37, %edx	#,
	movq	%rax, %rsi	# D.24020,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6381 0
	jmp	.L1327	#
.L1321:
.LBB38:
	.loc 1 6387 0
	movq	-120(%rbp), %rax	# a, tmp174
	movl	24(%rax), %eax	# a_1->dw_attr_val.v.val_fde_index, D.24026
	leal	(%rax,%rax), %edx	#, D.24026
	leaq	-48(%rbp), %rax	#, tmp175
	movl	%edx, %ecx	# D.24026,
	movl	$.LC54, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp175,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 6389 0
	movq	-104(%rbp), %rdx	# name, tmp176
	leaq	-48(%rbp), %rax	#, tmp177
	movq	%rdx, %rcx	# tmp176,
	movl	$.LC37, %edx	#,
	movq	%rax, %rsi	# tmp177,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_offset	#
.LBE38:
	.loc 1 6391 0
	jmp	.L1327	#
.L1322:
	.loc 1 6394 0
	movq	-120(%rbp), %rax	# a, tmp178
	movq	%rax, %rdi	# tmp178,
	call	AT_lbl	#
	movq	%rax, %rsi	#, D.24018
	movl	target_flags(%rip), %eax	# target_flags, target_flags.265
	andl	$33554432, %eax	#, D.24024
	testl	%eax, %eax	# D.24024
	je	.L1337	#,
	.loc 1 6394 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.264
	jmp	.L1338	#
.L1337:
	.loc 1 6394 0 discriminator 2
	movl	$4, %eax	#, iftmp.264
.L1338:
	.loc 1 6394 0 discriminator 3
	movq	-104(%rbp), %rdx	# name, tmp179
	movq	%rdx, %rcx	# tmp179,
	movl	$.LC37, %edx	#,
	movl	%eax, %edi	# iftmp.264,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
	.loc 1 6395 0 is_stmt 1 discriminator 3
	jmp	.L1327	#
.L1323:
	.loc 1 6398 0
	movq	-120(%rbp), %rax	# a, tmp180
	movq	%rax, %rdi	# tmp180,
	call	AT_lbl	#
	movq	-104(%rbp), %rdx	# name, tmp181
	movq	%rdx, %rcx	# tmp181,
	movl	$.LC37, %edx	#,
	movq	%rax, %rsi	# D.24018,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_offset	#
	.loc 1 6399 0
	jmp	.L1327	#
.L1324:
	.loc 1 6402 0
	movq	-120(%rbp), %rax	# a, tmp182
	movq	%rax, %rdi	# tmp182,
	call	AT_string_form	#
	cmpl	$14, %eax	#, D.24024
	jne	.L1339	#,
	.loc 1 6403 0
	movq	-120(%rbp), %rax	# a, tmp183
	movq	%rax, %rdi	# tmp183,
	call	AT_string	#
	movq	%rax, %rcx	#, D.24018
	.loc 1 6404 0
	movq	-120(%rbp), %rax	# a, tmp184
	movq	24(%rax), %rax	# a_1->dw_attr_val.v.val_str, D.24030
	movq	24(%rax), %rax	# _73->label, D.24016
	.loc 1 6403 0
	movq	-104(%rbp), %rdx	# name, tmp185
	movq	%rcx, %r8	# D.24018,
	movq	%rdx, %rcx	# tmp185,
	movl	$.LC435, %edx	#,
	movq	%rax, %rsi	# D.24016,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_offset	#
	.loc 1 6408 0
	jmp	.L1327	#
.L1339:
	.loc 1 6407 0
	movq	-120(%rbp), %rax	# a, tmp186
	movq	%rax, %rdi	# tmp186,
	call	AT_string	#
	movq	-104(%rbp), %rdx	# name, tmp187
	movq	%rdx, %rcx	# tmp187,
	movl	$.LC37, %edx	#,
	movq	$-1, %rsi	#,
	movq	%rax, %rdi	# D.24018,
	movl	$0, %eax	#,
	call	dw2_asm_output_nstring	#
	.loc 1 6408 0
	jmp	.L1327	#
.L1308:
	.loc 1 6411 0
	movl	$__FUNCTION__.16142, %edx	#,
	movl	$6411, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1327:
.LBE32:
	.loc 1 6266 0
	movq	-120(%rbp), %rax	# a, tmp188
	movq	8(%rax), %rax	# a_1->dw_attr_next, tmp189
	movq	%rax, -120(%rbp)	# tmp189, a
.L1307:
	.loc 1 6266 0 is_stmt 0 discriminator 1
	cmpq	$0, -120(%rbp)	#, a
	jne	.L1341	#,
	.loc 1 6415 0 is_stmt 1
	movq	-136(%rbp), %rax	# die, tmp190
	movq	32(%rax), %rax	# die_7(D)->die_child, tmp191
	movq	%rax, -112(%rbp)	# tmp191, c
	jmp	.L1342	#
.L1343:
	.loc 1 6416 0 discriminator 2
	movq	-112(%rbp), %rax	# c, tmp192
	movq	%rax, %rdi	# tmp192,
	call	output_die	#
	.loc 1 6415 0 discriminator 2
	movq	-112(%rbp), %rax	# c, tmp193
	movq	40(%rax), %rax	# c_2->die_sib, tmp194
	movq	%rax, -112(%rbp)	# tmp194, c
.L1342:
	.loc 1 6415 0 is_stmt 0 discriminator 1
	cmpq	$0, -112(%rbp)	#, c
	jne	.L1343	#,
	.loc 1 6419 0 is_stmt 1
	movq	-136(%rbp), %rax	# die, tmp195
	movq	32(%rax), %rax	# die_7(D)->die_child, D.24029
	testq	%rax, %rax	# D.24029
	je	.L1305	#,
	.loc 1 6420 0
	movq	-136(%rbp), %rax	# die, tmp196
	movq	48(%rax), %rax	# die_7(D)->die_offset, D.24019
	movq	%rax, %rcx	# D.24019,
	movl	$.LC436, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.L1305:
	.loc 1 6422 0
	movq	-24(%rbp), %rax	# D.24031, tmp198
	xorq	%fs:40, %rax	#, tmp198
	je	.L1345	#,
	call	__stack_chk_fail	#
.L1345:
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE143:
	.size	output_die, .-output_die
	.section	.rodata
	.align 8
.LC437:
	.string	"Length of Compilation Unit Info"
.LC438:
	.string	"DWARF version number"
.LC439:
	.string	"Offset Into Abbrev. Section"
.LC440:
	.string	"Pointer Size (in bytes)"
	.text
	.type	output_compilation_unit_header, @function
output_compilation_unit_header:
.LFB144:
	.loc 1 6429 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 6430 0
	movq	next_die_offset(%rip), %rax	# next_die_offset, next_die_offset.271
	subq	$4, %rax	#, D.24038
	movl	$.LC437, %edx	#,
	movq	%rax, %rsi	# D.24038,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6432 0
	movl	$.LC438, %edx	#,
	movl	$2, %esi	#,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6433 0
	movl	$.LC439, %edx	#,
	movl	$abbrev_section_label, %esi	#,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_offset	#
	.loc 1 6435 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.273
	andl	$33554432, %eax	#, D.24039
	testl	%eax, %eax	# D.24039
	je	.L1347	#,
	.loc 1 6435 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.272
	jmp	.L1348	#
.L1347:
	.loc 1 6435 0 discriminator 2
	movl	$4, %eax	#, iftmp.272
.L1348:
	.loc 1 6435 0 discriminator 3
	movl	$.LC440, %edx	#,
	movq	%rax, %rsi	# iftmp.272,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6436 0 is_stmt 1 discriminator 3
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE144:
	.size	output_compilation_unit_header, .-output_compilation_unit_header
	.section	.rodata
.LC441:
	.string	".gnu.linkonce.wi.%s"
.LC442:
	.string	".debug_info"
	.text
	.type	output_comp_unit, @function
output_comp_unit:
.LFB145:
	.loc 1 6443 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	.loc 1 6451 0
	movq	-24(%rbp), %rax	# die, tmp65
	movq	%rax, %rdi	# tmp65,
	call	mark_dies	#
	.loc 1 6453 0
	movq	-24(%rbp), %rax	# die, tmp66
	movq	%rax, %rdi	# tmp66,
	call	build_abbrev_table	#
	.loc 1 6456 0
	movq	$11, next_die_offset(%rip)	#, next_die_offset
	.loc 1 6457 0
	movq	-24(%rbp), %rax	# die, tmp67
	movq	%rax, %rdi	# tmp67,
	call	calc_die_sizes	#
	.loc 1 6459 0
	movq	-24(%rbp), %rax	# die, tmp68
	movq	8(%rax), %rax	# die_2(D)->die_symbol, D.24044
	testq	%rax, %rax	# D.24044
	je	.L1350	#,
.LBB39:
	.loc 1 6461 0
	movq	-24(%rbp), %rax	# die, tmp69
	movq	8(%rax), %rax	# die_2(D)->die_symbol, D.24044
	movq	%rax, %rdi	# D.24044,
	call	strlen	#
	addq	$24, %rax	#, D.24045
	leaq	15(%rax), %rdx	#, tmp70
	movl	$16, %eax	#, tmp89
	subq	$1, %rax	#, tmp71
	addq	%rdx, %rax	# tmp70, tmp72
	movl	$16, %ecx	#, tmp90
	movl	$0, %edx	#, tmp75
	divq	%rcx	# tmp90
	imulq	$16, %rax, %rax	#, tmp74, tmp76
	subq	%rax, %rsp	# tmp76,
	movq	%rsp, %rax	#, tmp77
	addq	$15, %rax	#, tmp78
	shrq	$4, %rax	#, tmp79
	salq	$4, %rax	#, tmp80
	movq	%rax, -8(%rbp)	# tmp80, tmp
	.loc 1 6463 0
	movq	-24(%rbp), %rax	# die, tmp81
	movq	8(%rax), %rdx	# die_2(D)->die_symbol, D.24044
	movq	-8(%rbp), %rax	# tmp, tmp82
	movl	$.LC441, %esi	#,
	movq	%rax, %rdi	# tmp82,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 6464 0
	movq	-8(%rbp), %rax	# tmp, tmp83
	movq	%rax, -16(%rbp)	# tmp83, secname
	.loc 1 6465 0
	movq	-24(%rbp), %rax	# die, tmp84
	movq	$0, 8(%rax)	#, die_2(D)->die_symbol
.LBE39:
	jmp	.L1351	#
.L1350:
	.loc 1 6468 0
	movq	$.LC442, -16(%rbp)	#, secname
.L1351:
	.loc 1 6471 0
	movq	-16(%rbp), %rax	# secname, tmp85
	movl	$1024, %esi	#,
	movq	%rax, %rdi	# tmp85,
	call	named_section_flags	#
	.loc 1 6472 0
	call	output_compilation_unit_header	#
	.loc 1 6473 0
	movq	-24(%rbp), %rax	# die, tmp86
	movq	%rax, %rdi	# tmp86,
	call	output_die	#
	.loc 1 6477 0
	movq	-24(%rbp), %rax	# die, tmp87
	movq	8(%rax), %rax	# die_2(D)->die_symbol, D.24044
	testq	%rax, %rax	# D.24044
	je	.L1349	#,
	.loc 1 6478 0
	movq	-24(%rbp), %rax	# die, tmp88
	movq	%rax, %rdi	# tmp88,
	call	unmark_dies	#
.L1349:
	.loc 1 6479 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE145:
	.size	output_comp_unit, .-output_comp_unit
	.type	dwarf2_name, @function
dwarf2_name:
.LFB146:
	.loc 1 6489 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# decl, decl
	movl	%esi, -12(%rbp)	# scope, scope
	.loc 1 6490 0
	movq	decl_printable_name(%rip), %rax	# decl_printable_name, decl_printable_name.274
	cmpl	$0, -12(%rbp)	#, scope
	setne	%dl	#, D.24048
	movzbl	%dl, %ecx	# D.24048, D.24049
	movq	-8(%rbp), %rdx	# decl, tmp64
	movl	%ecx, %esi	# D.24049,
	movq	%rdx, %rdi	# tmp64,
	call	*%rax	# decl_printable_name.274
	.loc 1 6491 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE146:
	.size	dwarf2_name, .-dwarf2_name
	.type	add_pubname, @function
add_pubname:
.LFB147:
	.loc 1 6499 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# decl, decl
	movq	%rsi, -32(%rbp)	# die, die
	.loc 1 6502 0
	movq	-24(%rbp), %rax	# decl, tmp78
	movzbl	18(%rax), %eax	# *decl_1(D), D.24051
	andl	$8, %eax	#, D.24051
	testb	%al, %al	# D.24051
	jne	.L1356	#,
	.loc 1 6503 0
	jmp	.L1355	#
.L1356:
	.loc 1 6505 0
	movl	pubname_table_in_use(%rip), %edx	# pubname_table_in_use, pubname_table_in_use.275
	movl	pubname_table_allocated(%rip), %eax	# pubname_table_allocated, pubname_table_allocated.276
	cmpl	%eax, %edx	# pubname_table_allocated.276, pubname_table_in_use.275
	jne	.L1358	#,
	.loc 1 6507 0
	movl	pubname_table_allocated(%rip), %eax	# pubname_table_allocated, pubname_table_allocated.277
	addl	$64, %eax	#, pubname_table_allocated.278
	movl	%eax, pubname_table_allocated(%rip)	# pubname_table_allocated.278, pubname_table_allocated
	.loc 1 6509 0
	movl	pubname_table_allocated(%rip), %eax	# pubname_table_allocated, pubname_table_allocated.279
	movl	%eax, %eax	# pubname_table_allocated.279, D.24052
	salq	$4, %rax	#, D.24052
	movq	%rax, %rdx	# D.24052, D.24052
	movq	pubname_table(%rip), %rax	# pubname_table, pubname_table.280
	movq	%rdx, %rsi	# D.24052,
	movq	%rax, %rdi	# pubname_table.280,
	call	xrealloc	#
	movq	%rax, pubname_table(%rip)	# pubname_table.281, pubname_table
.L1358:
	.loc 1 6514 0
	movq	pubname_table(%rip), %rcx	# pubname_table, pubname_table.282
	movl	pubname_table_in_use(%rip), %eax	# pubname_table_in_use, pubname_table_in_use.283
	leal	1(%rax), %edx	#, pubname_table_in_use.285
	movl	%edx, pubname_table_in_use(%rip)	# pubname_table_in_use.285, pubname_table_in_use
	movl	%eax, %eax	# pubname_table_in_use.284, D.24052
	salq	$4, %rax	#, D.24052
	addq	%rcx, %rax	# pubname_table.282, tmp79
	movq	%rax, -8(%rbp)	# tmp79, p
	.loc 1 6515 0
	movq	-8(%rbp), %rax	# p, tmp80
	movq	-32(%rbp), %rdx	# die, tmp81
	movq	%rdx, (%rax)	# tmp81, p_19->die
	.loc 1 6516 0
	movq	-24(%rbp), %rax	# decl, tmp82
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp82,
	call	dwarf2_name	#
	movq	%rax, %rdi	# D.24053,
	call	xstrdup	#
	movq	%rax, %rdx	# tmp83, D.24054
	movq	-8(%rbp), %rax	# p, tmp84
	movq	%rdx, 8(%rax)	# D.24054, p_19->name
.L1355:
	.loc 1 6517 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE147:
	.size	add_pubname, .-add_pubname
	.section	.rodata
.LC443:
	.string	"Length of Public Names Info"
.LC444:
	.string	"DWARF Version"
	.align 8
.LC445:
	.string	"Offset of Compilation Unit Info"
.LC446:
	.string	"Compilation Unit Length"
.LC447:
	.string	"DIE offset"
.LC448:
	.string	"external name"
	.text
	.type	output_pubnames, @function
output_pubnames:
.LFB148:
	.loc 1 6525 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	.loc 1 6527 0
	call	size_of_pubnames	#
	movq	%rax, -16(%rbp)	# tmp70, pubnames_length
	.loc 1 6529 0
	movq	-16(%rbp), %rax	# pubnames_length, tmp71
	movl	$.LC443, %edx	#,
	movq	%rax, %rsi	# tmp71,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6531 0
	movl	$.LC444, %edx	#,
	movl	$2, %esi	#,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6532 0
	movl	$.LC445, %edx	#,
	movl	$debug_info_section_label, %esi	#,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_offset	#
	.loc 1 6534 0
	movq	next_die_offset(%rip), %rax	# next_die_offset, next_die_offset.286
	movl	$.LC446, %edx	#,
	movq	%rax, %rsi	# next_die_offset.286,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6537 0
	movl	$0, -20(%rbp)	#, i
	jmp	.L1360	#
.L1362:
.LBB40:
	.loc 1 6539 0
	movq	pubname_table(%rip), %rax	# pubname_table, pubname_table.287
	movl	-20(%rbp), %edx	# i, D.24055
	salq	$4, %rdx	#, D.24055
	addq	%rdx, %rax	# D.24055, tmp72
	movq	%rax, -8(%rbp)	# tmp72, pub
	.loc 1 6542 0
	movq	-8(%rbp), %rax	# pub, tmp73
	movq	(%rax), %rax	# pub_9->die, D.24056
	movl	64(%rax), %eax	# _10->die_mark, D.24057
	testl	%eax, %eax	# D.24057
	jne	.L1361	#,
	.loc 1 6543 0
	movl	$__FUNCTION__.16178, %edx	#,
	movl	$6543, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1361:
	.loc 1 6545 0
	movq	-8(%rbp), %rax	# pub, tmp74
	movq	(%rax), %rax	# pub_9->die, D.24056
	movq	48(%rax), %rax	# _12->die_offset, D.24058
	movl	$.LC447, %edx	#,
	movq	%rax, %rsi	# D.24055,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6548 0
	movq	-8(%rbp), %rax	# pub, tmp75
	movq	8(%rax), %rax	# pub_9->name, D.24059
	movl	$.LC448, %edx	#,
	movq	$-1, %rsi	#,
	movq	%rax, %rdi	# D.24059,
	movl	$0, %eax	#,
	call	dw2_asm_output_nstring	#
.LBE40:
	.loc 1 6537 0
	addl	$1, -20(%rbp)	#, i
.L1360:
	.loc 1 6537 0 is_stmt 0 discriminator 1
	movl	pubname_table_in_use(%rip), %eax	# pubname_table_in_use, pubname_table_in_use.288
	cmpl	%eax, -20(%rbp)	# pubname_table_in_use.288, i
	jb	.L1362	#,
	.loc 1 6551 0 is_stmt 1
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6552 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE148:
	.size	output_pubnames, .-output_pubnames
	.type	add_arange, @function
add_arange:
.LFB149:
	.loc 1 6560 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# decl, decl
	movq	%rsi, -16(%rbp)	# die, die
	.loc 1 6561 0
	movq	-8(%rbp), %rax	# decl, tmp76
	movq	128(%rax), %rax	# decl_1(D)->decl.section_name, D.24066
	testq	%rax, %rax	# D.24066
	jne	.L1364	#,
	.loc 1 6562 0
	jmp	.L1363	#
.L1364:
	.loc 1 6564 0
	movl	arange_table_in_use(%rip), %edx	# arange_table_in_use, arange_table_in_use.289
	movl	arange_table_allocated(%rip), %eax	# arange_table_allocated, arange_table_allocated.290
	cmpl	%eax, %edx	# arange_table_allocated.290, arange_table_in_use.289
	jne	.L1366	#,
	.loc 1 6566 0
	movl	arange_table_allocated(%rip), %eax	# arange_table_allocated, arange_table_allocated.291
	addl	$64, %eax	#, arange_table_allocated.292
	movl	%eax, arange_table_allocated(%rip)	# arange_table_allocated.292, arange_table_allocated
	.loc 1 6568 0
	movl	arange_table_allocated(%rip), %eax	# arange_table_allocated, arange_table_allocated.293
	movl	%eax, %eax	# arange_table_allocated.293, D.24067
	leaq	0(,%rax,8), %rdx	#, D.24067
	movq	arange_table(%rip), %rax	# arange_table, arange_table.294
	movq	%rdx, %rsi	# D.24067,
	movq	%rax, %rdi	# arange_table.294,
	call	xrealloc	#
	.loc 1 6567 0
	movq	%rax, arange_table(%rip)	# arange_table.295, arange_table
.L1366:
	.loc 1 6571 0
	movq	arange_table(%rip), %rcx	# arange_table, arange_table.296
	movl	arange_table_in_use(%rip), %eax	# arange_table_in_use, arange_table_in_use.297
	leal	1(%rax), %edx	#, arange_table_in_use.299
	movl	%edx, arange_table_in_use(%rip)	# arange_table_in_use.299, arange_table_in_use
	movl	%eax, %eax	# arange_table_in_use.298, D.24067
	salq	$3, %rax	#, D.24067
	leaq	(%rcx,%rax), %rdx	#, D.24068
	movq	-16(%rbp), %rax	# die, tmp77
	movq	%rax, (%rdx)	# tmp77, *_18
.L1363:
	.loc 1 6572 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE149:
	.size	add_arange, .-add_arange
	.section	.rodata
.LC449:
	.string	"Length of Address Ranges Info"
.LC450:
	.string	"Size of Address"
.LC451:
	.string	"Size of Segment Descriptor"
.LC452:
	.string	"Pad to %d byte boundary"
.LC453:
	.string	"Address"
.LC454:
	.string	"Length"
	.text
	.type	output_aranges, @function
output_aranges:
.LFB150:
	.loc 1 6580 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	.loc 1 6582 0
	call	size_of_aranges	#
	movq	%rax, -48(%rbp)	# tmp117, aranges_length
	.loc 1 6584 0
	movq	-48(%rbp), %rax	# aranges_length, tmp118
	movl	$.LC449, %edx	#,
	movq	%rax, %rsi	# tmp118,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6586 0
	movl	$.LC444, %edx	#,
	movl	$2, %esi	#,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6587 0
	movl	$.LC445, %edx	#,
	movl	$debug_info_section_label, %esi	#,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_offset	#
	.loc 1 6589 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.301
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1368	#,
	.loc 1 6589 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.300
	jmp	.L1369	#
.L1368:
	.loc 1 6589 0 discriminator 2
	movl	$4, %eax	#, iftmp.300
.L1369:
	.loc 1 6589 0 discriminator 3
	movl	$.LC450, %edx	#,
	movq	%rax, %rsi	# iftmp.300,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6590 0 is_stmt 1 discriminator 3
	movl	$.LC451, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6598 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.303
	andl	$33554432, %eax	#, D.24069
	.loc 1 6597 0 discriminator 3
	testl	%eax, %eax	# D.24069
	je	.L1370	#,
	.loc 1 6597 0 is_stmt 0 discriminator 1
	movl	$16, %eax	#, iftmp.302
	jmp	.L1371	#
.L1370:
	.loc 1 6597 0 discriminator 2
	movl	$8, %eax	#, iftmp.302
.L1371:
	.loc 1 6597 0 discriminator 3
	movl	%eax, %ecx	# iftmp.302,
	movl	$.LC452, %edx	#,
	movl	$0, %esi	#,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6599 0 is_stmt 1 discriminator 3
	movl	$2, -52(%rbp)	#, i
	jmp	.L1372	#
.L1379:
	.loc 1 6600 0 discriminator 2
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6599 0 discriminator 2
	addl	$2, -52(%rbp)	#, i
.L1372:
	.loc 1 6599 0 is_stmt 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.305
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1373	#,
	movl	$27, %eax	#, iftmp.304
	jmp	.L1374	#
.L1373:
	.loc 1 6599 0 discriminator 2
	movl	$19, %eax	#, iftmp.304
.L1374:
	.loc 1 6599 0 discriminator 3
	movl	target_flags(%rip), %edx	# target_flags, target_flags.307
	andl	$33554432, %edx	#, D.24069
	testl	%edx, %edx	# D.24069
	je	.L1375	#,
	.loc 1 6599 0 discriminator 1
	movl	$16, %ebx	#, iftmp.306
	jmp	.L1376	#
.L1375:
	.loc 1 6599 0 discriminator 2
	movl	$8, %ebx	#, iftmp.306
.L1376:
	.loc 1 6599 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.306
	movl	%eax, %edx	# tmp119, D.24069
	movl	target_flags(%rip), %eax	# target_flags, target_flags.309
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1377	#,
	.loc 1 6599 0 discriminator 1
	movl	$16, %eax	#, iftmp.308
	jmp	.L1378	#
.L1377:
	.loc 1 6599 0 discriminator 2
	movl	$8, %eax	#, iftmp.308
.L1378:
	.loc 1 6599 0 discriminator 3
	imull	%edx, %eax	# D.24069, D.24069
	subl	$12, %eax	#, D.24069
	cmpl	-52(%rbp), %eax	# i, D.24070
	ja	.L1379	#,
	.loc 1 6603 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.311
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1380	#,
	.loc 1 6603 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.310
	jmp	.L1381	#
.L1380:
	.loc 1 6603 0 discriminator 2
	movl	$4, %eax	#, iftmp.310
.L1381:
	.loc 1 6603 0 discriminator 3
	movl	$.LC453, %edx	#,
	movl	$text_section_label, %esi	#,
	movl	%eax, %edi	# iftmp.310,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
	.loc 1 6604 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.313
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1382	#,
	.loc 1 6604 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.312
	jmp	.L1383	#
.L1382:
	.loc 1 6604 0 discriminator 2
	movl	$4, %eax	#, iftmp.312
.L1383:
	.loc 1 6604 0 discriminator 3
	movl	$.LC454, %ecx	#,
	movl	$text_section_label, %edx	#,
	movl	$text_end_label, %esi	#,
	movl	%eax, %edi	# iftmp.312,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 6607 0 is_stmt 1 discriminator 3
	movl	$0, -52(%rbp)	#, i
	jmp	.L1384	#
.L1399:
.LBB41:
	.loc 1 6609 0
	movq	arange_table(%rip), %rax	# arange_table, arange_table.314
	movl	-52(%rbp), %edx	# i, D.24071
	salq	$3, %rdx	#, D.24071
	addq	%rdx, %rax	# D.24071, D.24072
	movq	(%rax), %rax	# *_56, tmp121
	movq	%rax, -40(%rbp)	# tmp121, die
	.loc 1 6612 0
	movq	-40(%rbp), %rax	# die, tmp122
	movl	64(%rax), %eax	# die_57->die_mark, D.24069
	testl	%eax, %eax	# D.24069
	jne	.L1385	#,
	.loc 1 6613 0
	movl	$__FUNCTION__.16194, %edx	#,
	movl	$6613, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1385:
	.loc 1 6615 0
	movq	-40(%rbp), %rax	# die, tmp123
	movl	(%rax), %eax	# die_57->die_tag, D.24073
	cmpl	$46, %eax	#, D.24073
	jne	.L1386	#,
	.loc 1 6617 0
	movq	-40(%rbp), %rax	# die, tmp124
	movq	%rax, %rdi	# tmp124,
	call	get_AT_low_pc	#
	movq	%rax, %rcx	#, D.24074
	movl	target_flags(%rip), %eax	# target_flags, target_flags.316
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1387	#,
	.loc 1 6617 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.315
	jmp	.L1388	#
.L1387:
	.loc 1 6617 0 discriminator 2
	movl	$4, %eax	#, iftmp.315
.L1388:
	.loc 1 6617 0 discriminator 3
	movl	$.LC453, %edx	#,
	movq	%rcx, %rsi	# D.24074,
	movl	%eax, %edi	# iftmp.315,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
	.loc 1 6619 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rax	# die, tmp125
	movq	%rax, %rdi	# tmp125,
	call	get_AT_low_pc	#
	movq	%rax, %rbx	#, D.24074
	movq	-40(%rbp), %rax	# die, tmp126
	movq	%rax, %rdi	# tmp126,
	call	get_AT_hi_pc	#
	movq	%rax, %rsi	#, D.24074
	movl	target_flags(%rip), %eax	# target_flags, target_flags.318
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1389	#,
	.loc 1 6619 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.317
	jmp	.L1390	#
.L1389:
	.loc 1 6619 0 discriminator 2
	movl	$4, %eax	#, iftmp.317
.L1390:
	.loc 1 6619 0 discriminator 1
	movl	$.LC454, %ecx	#,
	movq	%rbx, %rdx	# D.24074,
	movl	%eax, %edi	# iftmp.317,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	jmp	.L1391	#
.L1386:
.LBB42:
	.loc 1 6627 0 is_stmt 1
	movq	-40(%rbp), %rax	# die, tmp127
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp127,
	call	get_AT	#
	movq	%rax, -32(%rbp)	# tmp128, a
	.loc 1 6630 0
	cmpq	$0, -32(%rbp)	#, a
	je	.L1392	#,
	.loc 1 6630 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# a, tmp129
	movq	%rax, %rdi	# tmp129,
	call	AT_class	#
	cmpl	$2, %eax	#, D.24075
	je	.L1393	#,
.L1392:
	.loc 1 6631 0 is_stmt 1
	movl	$__FUNCTION__.16194, %edx	#,
	movl	$6631, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1393:
	.loc 1 6633 0
	movq	-32(%rbp), %rax	# a, tmp130
	movq	%rax, %rdi	# tmp130,
	call	AT_loc	#
	movq	%rax, -24(%rbp)	# tmp131, loc
	.loc 1 6634 0
	movq	-24(%rbp), %rax	# loc, tmp132
	movl	8(%rax), %eax	# loc_73->dw_loc_opc, D.24076
	cmpl	$3, %eax	#, D.24076
	je	.L1394	#,
	.loc 1 6635 0
	movl	$__FUNCTION__.16194, %edx	#,
	movl	$6635, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1394:
	.loc 1 6637 0
	movq	-24(%rbp), %rax	# loc, tmp133
	movq	24(%rax), %rcx	# loc_73->dw_loc_oprnd1.v.val_addr, D.24077
	movl	target_flags(%rip), %eax	# target_flags, target_flags.320
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1395	#,
	.loc 1 6637 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.319
	jmp	.L1396	#
.L1395:
	.loc 1 6637 0 discriminator 2
	movl	$4, %eax	#, iftmp.319
.L1396:
	.loc 1 6637 0 discriminator 3
	movl	$.LC453, %edx	#,
	movq	%rcx, %rsi	# D.24077,
	movl	%eax, %edi	# iftmp.319,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr_rtx	#
	.loc 1 6640 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rax	# die, tmp134
	movl	$11, %esi	#,
	movq	%rax, %rdi	# tmp134,
	call	get_AT_unsigned	#
	.loc 1 6639 0 discriminator 3
	movl	%eax, %ecx	# D.24070, D.24071
	movl	target_flags(%rip), %eax	# target_flags, target_flags.322
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1397	#,
	.loc 1 6639 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.321
	jmp	.L1398	#
.L1397:
	.loc 1 6639 0 discriminator 2
	movl	$4, %eax	#, iftmp.321
.L1398:
	.loc 1 6639 0 discriminator 3
	movl	$.LC454, %edx	#,
	movq	%rcx, %rsi	# D.24071,
	movl	%eax, %edi	# iftmp.321,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.L1391:
.LBE42:
.LBE41:
	.loc 1 6607 0 is_stmt 1
	addl	$1, -52(%rbp)	#, i
.L1384:
	.loc 1 6607 0 is_stmt 0 discriminator 1
	movl	arange_table_in_use(%rip), %eax	# arange_table_in_use, arange_table_in_use.323
	cmpl	%eax, -52(%rbp)	# arange_table_in_use.323, i
	jb	.L1399	#,
	.loc 1 6646 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.325
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1400	#,
	.loc 1 6646 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.324
	jmp	.L1401	#
.L1400:
	.loc 1 6646 0 discriminator 2
	movl	$4, %eax	#, iftmp.324
.L1401:
	.loc 1 6646 0 discriminator 3
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	%eax, %edi	# iftmp.324,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6647 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.327
	andl	$33554432, %eax	#, D.24069
	testl	%eax, %eax	# D.24069
	je	.L1402	#,
	.loc 1 6647 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.326
	jmp	.L1403	#
.L1402:
	.loc 1 6647 0 discriminator 2
	movl	$4, %eax	#, iftmp.326
.L1403:
	.loc 1 6647 0 discriminator 3
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	%eax, %edi	# iftmp.326,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6648 0 is_stmt 1 discriminator 3
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE150:
	.size	output_aranges, .-output_aranges
	.type	add_ranges, @function
add_ranges:
.LFB151:
	.loc 1 6656 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# block, block
	.loc 1 6657 0
	movl	ranges_table_in_use(%rip), %eax	# ranges_table_in_use, tmp80
	movl	%eax, -4(%rbp)	# tmp80, in_use
	.loc 1 6659 0
	movl	ranges_table_allocated(%rip), %eax	# ranges_table_allocated, ranges_table_allocated.331
	cmpl	%eax, -4(%rbp)	# ranges_table_allocated.331, in_use
	jne	.L1405	#,
	.loc 1 6661 0
	movl	ranges_table_allocated(%rip), %eax	# ranges_table_allocated, ranges_table_allocated.332
	addl	$64, %eax	#, ranges_table_allocated.333
	movl	%eax, ranges_table_allocated(%rip)	# ranges_table_allocated.333, ranges_table_allocated
	.loc 1 6663 0
	movl	ranges_table_allocated(%rip), %eax	# ranges_table_allocated, ranges_table_allocated.334
	movl	%eax, %eax	# ranges_table_allocated.334, D.24084
	leaq	0(,%rax,4), %rdx	#, D.24084
	movq	ranges_table(%rip), %rax	# ranges_table, ranges_table.335
	movq	%rdx, %rsi	# D.24084,
	movq	%rax, %rdi	# ranges_table.335,
	call	xrealloc	#
	.loc 1 6662 0
	movq	%rax, ranges_table(%rip)	# ranges_table.336, ranges_table
.L1405:
	.loc 1 6667 0
	movq	ranges_table(%rip), %rax	# ranges_table, ranges_table.337
	movl	-4(%rbp), %edx	# in_use, D.24084
	salq	$2, %rdx	#, D.24084
	addq	%rax, %rdx	# ranges_table.337, D.24085
	cmpq	$0, -24(%rbp)	#, block
	je	.L1406	#,
	.loc 1 6667 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# block, tmp81
	movl	24(%rax), %eax	# *block_16(D), tmp84
	shrl	$2, %eax	#, D.24086
	jmp	.L1407	#
.L1406:
	.loc 1 6667 0 discriminator 2
	movl	$0, %eax	#, iftmp.338
.L1407:
	.loc 1 6667 0 discriminator 3
	movl	%eax, (%rdx)	# iftmp.338, _15->block_num
	.loc 1 6668 0 is_stmt 1 discriminator 3
	movl	-4(%rbp), %eax	# in_use, tmp85
	addl	$1, %eax	#, ranges_table_in_use.339
	movl	%eax, ranges_table_in_use(%rip)	# ranges_table_in_use.339, ranges_table_in_use
	.loc 1 6670 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.341
	andl	$33554432, %eax	#, D.24087
	testl	%eax, %eax	# D.24087
	je	.L1408	#,
	.loc 1 6670 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.340
	jmp	.L1409	#
.L1408:
	.loc 1 6670 0 discriminator 2
	movl	$4, %eax	#, iftmp.340
.L1409:
	.loc 1 6670 0 discriminator 3
	imull	-4(%rbp), %eax	# in_use, D.24088
	addl	%eax, %eax	# D.24088
	.loc 1 6671 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE151:
	.size	add_ranges, .-add_ranges
	.section	.rodata
.LC455:
	.string	"Offset 0x%x"
.LC456:
	.string	"LBB"
.LC457:
	.string	"LBE"
	.text
	.type	output_ranges, @function
output_ranges:
.LFB152:
	.loc 1 6675 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	.loc 1 6675 0
	movq	%fs:40, %rax	#, tmp104
	movq	%rax, -8(%rbp)	# tmp104, D.24093
	xorl	%eax, %eax	# tmp104
	.loc 1 6678 0
	movq	$.LC455, -88(%rbp)	#, fmt
	.loc 1 6680 0
	movl	$0, -96(%rbp)	#, i
	jmp	.L1412	#
.L1433:
.LBB43:
	.loc 1 6682 0
	movq	ranges_table(%rip), %rax	# ranges_table, ranges_table.342
	movl	-96(%rbp), %edx	# i, D.24089
	salq	$2, %rdx	#, D.24089
	addq	%rdx, %rax	# D.24089, D.24090
	movl	(%rax), %eax	# _18->block_num, tmp95
	movl	%eax, -92(%rbp)	# tmp95, block_num
	.loc 1 6684 0
	cmpl	$0, -92(%rbp)	#, block_num
	je	.L1413	#,
.LBB44:
	.loc 1 6689 0
	movl	-92(%rbp), %edx	# block_num, block_num.343
	leaq	-80(%rbp), %rax	#, tmp96
	movl	%edx, %ecx	# block_num.343,
	movl	$.LC456, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp96,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 6690 0
	movl	-92(%rbp), %edx	# block_num, block_num.344
	leaq	-48(%rbp), %rax	#, tmp97
	movl	%edx, %ecx	# block_num.344,
	movl	$.LC457, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp97,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 6695 0
	movl	separate_line_info_table_in_use(%rip), %eax	# separate_line_info_table_in_use, separate_line_info_table_in_use.345
	testl	%eax, %eax	# separate_line_info_table_in_use.345
	jne	.L1414	#,
	.loc 1 6699 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.347
	andl	$33554432, %eax	#, D.24091
	testl	%eax, %eax	# D.24091
	je	.L1415	#,
	.loc 1 6699 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.346
	jmp	.L1416	#
.L1415:
	.loc 1 6699 0 discriminator 2
	movl	$4, %eax	#, iftmp.346
.L1416:
	.loc 1 6699 0 discriminator 3
	imull	-96(%rbp), %eax	# i, D.24092
	.loc 1 6697 0 is_stmt 1 discriminator 3
	leal	(%rax,%rax), %ecx	#, D.24092
	movl	target_flags(%rip), %eax	# target_flags, target_flags.349
	andl	$33554432, %eax	#, D.24091
	testl	%eax, %eax	# D.24091
	je	.L1417	#,
	.loc 1 6697 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.348
	jmp	.L1418	#
.L1417:
	.loc 1 6697 0 discriminator 2
	movl	$4, %eax	#, iftmp.348
.L1418:
	.loc 1 6697 0 discriminator 3
	movq	-88(%rbp), %rdx	# fmt, tmp98
	leaq	-80(%rbp), %rsi	#, tmp99
	movl	%ecx, %r8d	# D.24092,
	movq	%rdx, %rcx	# tmp98,
	movl	$text_section_label, %edx	#,
	movl	%eax, %edi	# iftmp.348,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 6700 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.351
	andl	$33554432, %eax	#, D.24091
	testl	%eax, %eax	# D.24091
	je	.L1419	#,
	.loc 1 6700 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.350
	jmp	.L1420	#
.L1419:
	.loc 1 6700 0 discriminator 2
	movl	$4, %eax	#, iftmp.350
.L1420:
	.loc 1 6700 0 discriminator 1
	leaq	-48(%rbp), %rsi	#, tmp100
	movl	$0, %ecx	#,
	movl	$text_section_label, %edx	#,
	movl	%eax, %edi	# iftmp.350,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	jmp	.L1421	#
.L1414:
	.loc 1 6711 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.353
	andl	$33554432, %eax	#, D.24091
	testl	%eax, %eax	# D.24091
	je	.L1422	#,
	.loc 1 6711 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.352
	jmp	.L1423	#
.L1422:
	.loc 1 6711 0 discriminator 2
	movl	$4, %eax	#, iftmp.352
.L1423:
	.loc 1 6711 0 discriminator 3
	imull	-96(%rbp), %eax	# i, D.24092
	.loc 1 6710 0 is_stmt 1 discriminator 3
	leal	(%rax,%rax), %ecx	#, D.24092
	movl	target_flags(%rip), %eax	# target_flags, target_flags.355
	andl	$33554432, %eax	#, D.24091
	testl	%eax, %eax	# D.24091
	je	.L1424	#,
	.loc 1 6710 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.354
	jmp	.L1425	#
.L1424:
	.loc 1 6710 0 discriminator 2
	movl	$4, %eax	#, iftmp.354
.L1425:
	.loc 1 6710 0 discriminator 3
	movq	-88(%rbp), %rdx	# fmt, tmp101
	leaq	-80(%rbp), %rsi	#, tmp102
	movl	%eax, %edi	# iftmp.354,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
	.loc 1 6712 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.357
	andl	$33554432, %eax	#, D.24091
	testl	%eax, %eax	# D.24091
	je	.L1426	#,
	.loc 1 6712 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.356
	jmp	.L1427	#
.L1426:
	.loc 1 6712 0 discriminator 2
	movl	$4, %eax	#, iftmp.356
.L1427:
	.loc 1 6712 0 discriminator 3
	leaq	-48(%rbp), %rcx	#, tmp103
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp103,
	movl	%eax, %edi	# iftmp.356,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
.L1421:
	.loc 1 6715 0 is_stmt 1 discriminator 2
	movq	$0, -88(%rbp)	#, fmt
.LBE44:
	jmp	.L1428	#
.L1413:
	.loc 1 6719 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.359
	andl	$33554432, %eax	#, D.24091
	testl	%eax, %eax	# D.24091
	je	.L1429	#,
	.loc 1 6719 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.358
	jmp	.L1430	#
.L1429:
	.loc 1 6719 0 discriminator 2
	movl	$4, %eax	#, iftmp.358
.L1430:
	.loc 1 6719 0 discriminator 3
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	%eax, %edi	# iftmp.358,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6720 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.361
	andl	$33554432, %eax	#, D.24091
	testl	%eax, %eax	# D.24091
	je	.L1431	#,
	.loc 1 6720 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.360
	jmp	.L1432	#
.L1431:
	.loc 1 6720 0 discriminator 2
	movl	$4, %eax	#, iftmp.360
.L1432:
	.loc 1 6720 0 discriminator 3
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	%eax, %edi	# iftmp.360,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6721 0 is_stmt 1 discriminator 3
	movq	$.LC455, -88(%rbp)	#, fmt
.L1428:
.LBE43:
	.loc 1 6680 0
	addl	$1, -96(%rbp)	#, i
.L1412:
	.loc 1 6680 0 is_stmt 0 discriminator 1
	movl	ranges_table_in_use(%rip), %eax	# ranges_table_in_use, ranges_table_in_use.362
	cmpl	%eax, -96(%rbp)	# ranges_table_in_use.362, i
	jb	.L1433	#,
	.loc 1 6724 0 is_stmt 1
	movq	-8(%rbp), %rax	# D.24093, tmp105
	xorq	%fs:40, %rax	#, tmp105
	je	.L1434	#,
	call	__stack_chk_fail	#
.L1434:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE152:
	.size	output_ranges, .-output_ranges
	.type	file_info_cmp, @function
file_info_cmp:
.LFB153:
	.loc 1 6755 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)	# p1, p1
	movq	%rsi, -48(%rbp)	# p2, p2
	.loc 1 6756 0
	movq	-40(%rbp), %rax	# p1, tmp87
	movq	%rax, -16(%rbp)	# tmp87, s1
	.loc 1 6757 0
	movq	-48(%rbp), %rax	# p2, tmp88
	movq	%rax, -8(%rbp)	# tmp88, s2
	.loc 1 6766 0
	movq	-16(%rbp), %rax	# s1, tmp89
	movq	(%rax), %rdx	# s1_5->path, D.24098
	movq	-16(%rbp), %rax	# s1, tmp90
	movq	8(%rax), %rax	# s1_5->fname, D.24098
	cmpq	%rax, %rdx	# D.24098, D.24098
	je	.L1436	#,
	.loc 1 6766 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# s2, tmp91
	movq	(%rax), %rdx	# s2_7->path, D.24098
	movq	-8(%rbp), %rax	# s2, tmp92
	movq	8(%rax), %rax	# s2_7->fname, D.24098
	cmpq	%rax, %rdx	# D.24098, D.24098
	jne	.L1437	#,
.L1436:
	.loc 1 6767 0 is_stmt 1
	movq	-8(%rbp), %rax	# s2, tmp93
	movq	(%rax), %rdx	# s2_7->path, D.24098
	movq	-8(%rbp), %rax	# s2, tmp94
	movq	8(%rax), %rax	# s2_7->fname, D.24098
	cmpq	%rax, %rdx	# D.24098, D.24098
	sete	%al	#, D.24100
	movzbl	%al, %edx	# D.24100, D.24097
	movq	-16(%rbp), %rax	# s1, tmp95
	movq	(%rax), %rcx	# s1_5->path, D.24098
	movq	-16(%rbp), %rax	# s1, tmp96
	movq	8(%rax), %rax	# s1_5->fname, D.24098
	cmpq	%rax, %rcx	# D.24098, D.24098
	sete	%al	#, D.24100
	movzbl	%al, %eax	# D.24100, D.24097
	subl	%eax, %edx	# D.24097, D.24097
	movl	%edx, %eax	# D.24097, D.24097
	jmp	.L1438	#
.L1437:
	.loc 1 6769 0
	movq	-16(%rbp), %rax	# s1, tmp97
	movq	(%rax), %rax	# s1_5->path, tmp98
	movq	%rax, -32(%rbp)	# tmp98, cp1
	.loc 1 6770 0
	movq	-8(%rbp), %rax	# s2, tmp99
	movq	(%rax), %rax	# s2_7->path, tmp100
	movq	%rax, -24(%rbp)	# tmp100, cp2
.L1442:
	.loc 1 6774 0
	addq	$1, -32(%rbp)	#, cp1
	.loc 1 6775 0
	addq	$1, -24(%rbp)	#, cp2
	.loc 1 6777 0
	movq	-16(%rbp), %rax	# s1, tmp101
	movq	8(%rax), %rax	# s1_5->fname, D.24098
	cmpq	-32(%rbp), %rax	# cp1, D.24098
	je	.L1439	#,
	.loc 1 6778 0
	movq	-8(%rbp), %rax	# s2, tmp102
	movq	8(%rax), %rax	# s2_7->fname, D.24098
	cmpq	-24(%rbp), %rax	# cp2, D.24098
	jne	.L1440	#,
.L1439:
	.loc 1 6779 0
	movq	-8(%rbp), %rax	# s2, tmp103
	movq	8(%rax), %rax	# s2_7->fname, D.24098
	cmpq	-24(%rbp), %rax	# cp2, D.24098
	sete	%al	#, D.24100
	movzbl	%al, %edx	# D.24100, D.24097
	.loc 1 6780 0
	movq	-16(%rbp), %rax	# s1, tmp104
	movq	8(%rax), %rax	# s1_5->fname, D.24098
	cmpq	-32(%rbp), %rax	# cp1, D.24098
	sete	%al	#, D.24100
	movzbl	%al, %eax	# D.24100, D.24097
	.loc 1 6779 0
	subl	%eax, %edx	# D.24097, D.24097
	movl	%edx, %eax	# D.24097, D.24097
	jmp	.L1438	#
.L1440:
	.loc 1 6783 0
	movq	-32(%rbp), %rax	# cp1, tmp105
	movzbl	(%rax), %edx	# *cp1_14, D.24099
	movq	-24(%rbp), %rax	# cp2, tmp106
	movzbl	(%rax), %eax	# *cp2_15, D.24099
	cmpb	%al, %dl	# D.24099, D.24099
	je	.L1441	#,
	.loc 1 6784 0
	movq	-32(%rbp), %rax	# cp1, tmp107
	movzbl	(%rax), %eax	# *cp1_14, D.24099
	movzbl	%al, %edx	# D.24099, D.24097
	movq	-24(%rbp), %rax	# cp2, tmp108
	movzbl	(%rax), %eax	# *cp2_15, D.24099
	movzbl	%al, %eax	# D.24099, D.24097
	subl	%eax, %edx	# D.24097, D.24097
	movl	%edx, %eax	# D.24097, D.24097
	jmp	.L1438	#
.L1441:
	.loc 1 6785 0
	jmp	.L1442	#
.L1438:
	.loc 1 6786 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE153:
	.size	file_info_cmp, .-file_info_cmp
	.section	.rodata
.LC458:
	.string	"Directory Entry: 0x%x"
.LC459:
	.string	"End directory table"
.LC460:
	.string	"File Entry: 0x%x"
.LC461:
	.string	"End file name table"
	.text
	.type	output_file_names, @function
output_file_names:
.LFB154:
	.loc 1 6794 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	.loc 1 6806 0
	movl	file_table+12(%rip), %eax	# file_table.in_use, D.24101
	movl	%eax, %eax	# D.24101, D.24102
	salq	$5, %rax	#, D.24102
	leaq	15(%rax), %rdx	#, tmp391
	movl	$16, %eax	#, tmp638
	subq	$1, %rax	#, tmp392
	addq	%rdx, %rax	# tmp391, tmp393
	movl	$16, %ebx	#, tmp639
	movl	$0, %edx	#, tmp396
	divq	%rbx	# tmp639
	imulq	$16, %rax, %rax	#, tmp395, tmp397
	subq	%rax, %rsp	# tmp397,
	movq	%rsp, %rax	#, tmp398
	addq	$15, %rax	#, tmp399
	shrq	$4, %rax	#, tmp400
	salq	$4, %rax	#, tmp401
	movq	%rax, -56(%rbp)	# tmp401, files
	.loc 1 6808 0
	movl	file_table+12(%rip), %eax	# file_table.in_use, D.24101
	movl	%eax, %eax	# D.24101, D.24102
	salq	$5, %rax	#, D.24102
	leaq	15(%rax), %rdx	#, tmp402
	movl	$16, %eax	#, tmp640
	subq	$1, %rax	#, tmp403
	addq	%rdx, %rax	# tmp402, tmp404
	movl	$16, %ebx	#, tmp641
	movl	$0, %edx	#, tmp407
	divq	%rbx	# tmp641
	imulq	$16, %rax, %rax	#, tmp406, tmp408
	subq	%rax, %rsp	# tmp408,
	movq	%rsp, %rax	#, tmp409
	addq	$15, %rax	#, tmp410
	shrq	$4, %rax	#, tmp411
	salq	$4, %rax	#, tmp412
	movq	%rax, -48(%rbp)	# tmp412, dirs
	.loc 1 6812 0
	movl	$1, -100(%rbp)	#, i
	jmp	.L1444	#
.L1450:
.LBB45:
	.loc 1 6817 0
	movq	file_table(%rip), %rax	# file_table.table, D.24104
	movl	-100(%rbp), %edx	# i, tmp413
	movslq	%edx, %rdx	# tmp413, D.24102
	salq	$3, %rdx	#, D.24102
	addq	%rdx, %rax	# D.24102, D.24104
	movq	(%rax), %rax	# *_33, tmp414
	movq	%rax, -64(%rbp)	# tmp414, f
	.loc 1 6818 0
	jmp	.L1445	#
.L1447:
	.loc 1 6819 0
	addq	$2, -64(%rbp)	#, f
.L1445:
	.loc 1 6818 0 discriminator 1
	movq	-64(%rbp), %rax	# f, tmp415
	movzbl	(%rax), %eax	# *f_11, D.24105
	cmpb	$46, %al	#, D.24105
	jne	.L1446	#,
	.loc 1 6818 0 is_stmt 0 discriminator 2
	movq	-64(%rbp), %rax	# f, tmp416
	addq	$1, %rax	#, D.24106
	movzbl	(%rax), %eax	# *_36, D.24105
	cmpb	$47, %al	#, D.24105
	je	.L1447	#,
.L1446:
	.loc 1 6822 0 is_stmt 1
	movl	-100(%rbp), %eax	# i, tmp417
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp418
	addq	%rax, %rdx	# tmp418, D.24107
	movq	-64(%rbp), %rax	# f, tmp419
	movq	%rax, (%rdx)	# tmp419, _41->path
	.loc 1 6823 0
	movl	-100(%rbp), %eax	# i, tmp420
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp421
	leaq	(%rdx,%rax), %rbx	#, D.24107
	movq	-64(%rbp), %rax	# f, tmp422
	movq	%rax, %rdi	# tmp422,
	call	strlen	#
	movl	%eax, 16(%rbx)	# D.24103, _44->length
	.loc 1 6824 0
	movl	-100(%rbp), %eax	# i, tmp423
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp424
	addq	%rax, %rdx	# tmp424, D.24107
	movl	-100(%rbp), %eax	# i, tmp425
	movl	%eax, 20(%rdx)	# tmp425, _49->file_idx
	.loc 1 6827 0
	movq	-64(%rbp), %rax	# f, tmp426
	movl	$47, %esi	#,
	movq	%rax, %rdi	# tmp426,
	call	strrchr	#
	movq	%rax, -64(%rbp)	# tmp427, f
	.loc 1 6828 0
	movl	-100(%rbp), %eax	# i, tmp428
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp429
	addq	%rax, %rdx	# tmp429, D.24107
	cmpq	$0, -64(%rbp)	#, f
	jne	.L1448	#,
	.loc 1 6828 0 is_stmt 0 discriminator 1
	movl	-100(%rbp), %eax	# i, tmp430
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp431
	addq	%rcx, %rax	# D.24102, D.24107
	movq	(%rax), %rax	# _56->path, iftmp.363
	jmp	.L1449	#
.L1448:
	.loc 1 6828 0 discriminator 2
	movq	-64(%rbp), %rax	# f, tmp432
	addq	$1, %rax	#, iftmp.363
.L1449:
	.loc 1 6828 0 discriminator 3
	movq	%rax, 8(%rdx)	# iftmp.363, _53->fname
.LBE45:
	.loc 1 6812 0 is_stmt 1 discriminator 3
	addl	$1, -100(%rbp)	#, i
.L1444:
	.loc 1 6812 0 is_stmt 0 discriminator 1
	movl	file_table+12(%rip), %eax	# file_table.in_use, D.24101
	cmpl	-100(%rbp), %eax	# i, D.24103
	jg	.L1450	#,
	.loc 1 6831 0 is_stmt 1
	movl	file_table+12(%rip), %eax	# file_table.in_use, D.24101
	subl	$1, %eax	#, D.24101
	movq	-56(%rbp), %rdx	# files, tmp433
	leaq	32(%rdx), %rdi	#, D.24108
	movl	$file_info_cmp, %ecx	#,
	movl	$32, %edx	#,
	movl	%eax, %esi	# D.24103,
	call	specqsort	#
	.loc 1 6835 0
	movq	-56(%rbp), %rax	# files, tmp434
	addq	$32, %rax	#, D.24107
	movq	(%rax), %rdx	# _64->path, D.24106
	movq	-48(%rbp), %rax	# dirs, tmp435
	movq	%rdx, (%rax)	# D.24106, dirs_26->path
	.loc 1 6836 0
	movq	-56(%rbp), %rax	# files, tmp436
	addq	$32, %rax	#, D.24107
	movq	8(%rax), %rax	# _66->fname, D.24106
	movq	%rax, %rdx	# D.24106, D.24109
	movq	-56(%rbp), %rax	# files, tmp437
	addq	$32, %rax	#, D.24107
	movq	(%rax), %rax	# _69->path, D.24106
	subq	%rax, %rdx	# D.24109, D.24109
	movq	%rdx, %rax	# D.24109, D.24109
	movl	%eax, %edx	# D.24109, D.24103
	movq	-48(%rbp), %rax	# dirs, tmp438
	movl	%edx, 8(%rax)	# D.24103, dirs_26->length
	.loc 1 6837 0
	movq	-48(%rbp), %rax	# dirs, tmp439
	movl	$-1, 12(%rax)	#, dirs_26->prefix
	.loc 1 6838 0
	movq	-48(%rbp), %rax	# dirs, tmp440
	movl	$1, 16(%rax)	#, dirs_26->count
	.loc 1 6839 0
	movq	-48(%rbp), %rax	# dirs, tmp441
	movl	$0, 20(%rax)	#, dirs_26->dir_idx
	.loc 1 6840 0
	movq	-48(%rbp), %rax	# dirs, tmp442
	movl	$0, 24(%rax)	#, dirs_26->used
	.loc 1 6841 0
	movq	-56(%rbp), %rax	# files, tmp443
	addq	$32, %rax	#, D.24107
	movl	$0, 24(%rax)	#, _74->dir_idx
	.loc 1 6842 0
	movl	$1, -104(%rbp)	#, ndirs
	.loc 1 6844 0
	movl	$2, -100(%rbp)	#, i
	jmp	.L1451	#
.L1458:
	.loc 1 6845 0
	movl	-100(%rbp), %eax	# i, tmp444
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp445
	addq	%rdx, %rax	# D.24102, D.24107
	movq	8(%rax), %rax	# _81->fname, D.24106
	movq	%rax, %rdx	# D.24106, D.24109
	movl	-100(%rbp), %eax	# i, tmp446
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp447
	addq	%rcx, %rax	# D.24102, D.24107
	movq	(%rax), %rax	# _86->path, D.24106
	subq	%rax, %rdx	# D.24109, D.24109
	movl	-104(%rbp), %eax	# ndirs, tmp448
	cltq
	salq	$5, %rax	#, D.24102
	leaq	-32(%rax), %rcx	#, D.24110
	movq	-48(%rbp), %rax	# dirs, tmp449
	addq	%rcx, %rax	# D.24110, D.24111
	movl	8(%rax), %eax	# _93->length, D.24103
	cltq
	cmpq	%rax, %rdx	# D.24109, D.24109
	jne	.L1452	#,
	.loc 1 6847 0
	movl	-104(%rbp), %eax	# ndirs, tmp450
	cltq
	salq	$5, %rax	#, D.24102
	leaq	-32(%rax), %rdx	#, D.24110
	movq	-48(%rbp), %rax	# dirs, tmp451
	addq	%rdx, %rax	# D.24110, D.24111
	movl	8(%rax), %eax	# _99->length, D.24103
	.loc 1 6846 0
	movslq	%eax, %rdx	# D.24103, D.24102
	movl	-100(%rbp), %eax	# i, tmp452
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp453
	addq	%rcx, %rax	# D.24102, D.24107
	movq	(%rax), %rcx	# _104->path, D.24106
	movl	-104(%rbp), %eax	# ndirs, tmp454
	cltq
	salq	$5, %rax	#, D.24102
	leaq	-32(%rax), %rsi	#, D.24110
	movq	-48(%rbp), %rax	# dirs, tmp455
	addq	%rsi, %rax	# D.24110, D.24111
	movq	(%rax), %rax	# _109->path, D.24106
	movq	%rcx, %rsi	# D.24106,
	movq	%rax, %rdi	# D.24106,
	call	memcmp	#
	testl	%eax, %eax	# D.24103
	jne	.L1452	#,
	.loc 1 6850 0
	movl	-100(%rbp), %eax	# i, tmp456
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp457
	addq	%rdx, %rax	# D.24102, D.24107
	movl	-104(%rbp), %edx	# ndirs, tmp458
	subl	$1, %edx	#, D.24103
	movl	%edx, 24(%rax)	# D.24103, _114->dir_idx
	.loc 1 6851 0
	movl	-104(%rbp), %eax	# ndirs, tmp459
	cltq
	salq	$5, %rax	#, D.24102
	leaq	-32(%rax), %rdx	#, D.24110
	movq	-48(%rbp), %rax	# dirs, tmp460
	addq	%rdx, %rax	# D.24110, D.24111
	movl	16(%rax), %edx	# _119->count, D.24103
	addl	$1, %edx	#, D.24103
	movl	%edx, 16(%rax)	# D.24103, _119->count
	jmp	.L1453	#
.L1452:
.LBB46:
	.loc 1 6858 0
	movl	-104(%rbp), %eax	# ndirs, tmp461
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp462
	addq	%rax, %rdx	# tmp462, D.24111
	movl	-100(%rbp), %eax	# i, tmp463
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp464
	addq	%rcx, %rax	# D.24102, D.24107
	movq	(%rax), %rax	# _127->path, D.24106
	movq	%rax, (%rdx)	# D.24106, _124->path
	.loc 1 6859 0
	movl	-104(%rbp), %eax	# ndirs, tmp465
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp466
	addq	%rax, %rdx	# tmp466, D.24111
	movl	-100(%rbp), %eax	# i, tmp467
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp468
	addq	%rcx, %rax	# D.24102, D.24107
	movq	8(%rax), %rax	# _134->fname, D.24106
	movq	%rax, %rcx	# D.24106, D.24109
	movl	-100(%rbp), %eax	# i, tmp469
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rsi	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp470
	addq	%rsi, %rax	# D.24102, D.24107
	movq	(%rax), %rax	# _139->path, D.24106
	subq	%rax, %rcx	# D.24109, D.24109
	movq	%rcx, %rax	# D.24109, D.24109
	movl	%eax, 8(%rdx)	# D.24103, _131->length
	.loc 1 6860 0
	movl	-104(%rbp), %eax	# ndirs, tmp471
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp472
	addq	%rdx, %rax	# D.24102, D.24111
	movl	$1, 16(%rax)	#, _146->count
	.loc 1 6861 0
	movl	-104(%rbp), %eax	# ndirs, tmp473
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp474
	addq	%rax, %rdx	# tmp474, D.24111
	movl	-104(%rbp), %eax	# ndirs, tmp475
	movl	%eax, 20(%rdx)	# tmp475, _149->dir_idx
	.loc 1 6862 0
	movl	-104(%rbp), %eax	# ndirs, tmp476
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp477
	addq	%rdx, %rax	# D.24102, D.24111
	movl	$0, 24(%rax)	#, _152->used
	.loc 1 6863 0
	movl	-100(%rbp), %eax	# i, tmp478
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp479
	addq	%rax, %rdx	# tmp479, D.24107
	movl	-104(%rbp), %eax	# ndirs, tmp480
	movl	%eax, 24(%rdx)	# tmp480, _155->dir_idx
	.loc 1 6866 0
	movl	-104(%rbp), %eax	# ndirs, tmp481
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp482
	addq	%rdx, %rax	# D.24102, D.24111
	movl	$-1, 12(%rax)	#, _158->prefix
	.loc 1 6867 0
	movl	$0, -92(%rbp)	#, j
	jmp	.L1454	#
.L1457:
	.loc 1 6868 0
	movl	-92(%rbp), %eax	# j, tmp483
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp484
	addq	%rdx, %rax	# D.24102, D.24111
	movl	8(%rax), %edx	# _162->length, D.24103
	movl	-104(%rbp), %eax	# ndirs, tmp485
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp486
	addq	%rcx, %rax	# D.24102, D.24111
	movl	8(%rax), %eax	# _166->length, D.24103
	cmpl	%eax, %edx	# D.24103, D.24103
	jge	.L1455	#,
	.loc 1 6869 0
	movl	-92(%rbp), %eax	# j, tmp487
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp488
	addq	%rdx, %rax	# D.24102, D.24111
	movl	8(%rax), %eax	# _170->length, D.24103
	cmpl	$1, %eax	#, D.24103
	jle	.L1455	#,
	.loc 1 6870 0
	movl	-104(%rbp), %eax	# ndirs, tmp489
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp490
	addq	%rdx, %rax	# D.24102, D.24111
	movl	12(%rax), %eax	# _174->prefix, D.24103
	cmpl	$-1, %eax	#, D.24103
	je	.L1456	#,
	.loc 1 6871 0
	movl	-92(%rbp), %eax	# j, tmp491
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp492
	addq	%rdx, %rax	# D.24102, D.24111
	movl	8(%rax), %edx	# _178->length, D.24103
	movl	-104(%rbp), %eax	# ndirs, tmp493
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp494
	addq	%rcx, %rax	# D.24102, D.24111
	movl	12(%rax), %eax	# _182->prefix, D.24103
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp495
	addq	%rcx, %rax	# D.24102, D.24111
	movl	8(%rax), %eax	# _186->length, D.24103
	cmpl	%eax, %edx	# D.24103, D.24103
	jle	.L1455	#,
.L1456:
	.loc 1 6872 0
	movl	-92(%rbp), %eax	# j, tmp496
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp497
	addq	%rdx, %rax	# D.24102, D.24111
	movl	8(%rax), %eax	# _190->length, D.24103
	movslq	%eax, %rdx	# D.24103, D.24102
	movl	-104(%rbp), %eax	# ndirs, tmp498
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp499
	addq	%rcx, %rax	# D.24102, D.24111
	movq	(%rax), %rcx	# _195->path, D.24106
	movl	-92(%rbp), %eax	# j, tmp500
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rsi	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp501
	addq	%rsi, %rax	# D.24102, D.24111
	movq	(%rax), %rax	# _199->path, D.24106
	movq	%rcx, %rsi	# D.24106,
	movq	%rax, %rdi	# D.24106,
	call	memcmp	#
	testl	%eax, %eax	# D.24103
	jne	.L1455	#,
	.loc 1 6873 0
	movl	-104(%rbp), %eax	# ndirs, tmp502
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp503
	addq	%rax, %rdx	# tmp503, D.24111
	movl	-92(%rbp), %eax	# j, tmp504
	movl	%eax, 12(%rdx)	# tmp504, _204->prefix
.L1455:
	.loc 1 6867 0
	addl	$1, -92(%rbp)	#, j
.L1454:
	.loc 1 6867 0 is_stmt 0 discriminator 1
	movl	-92(%rbp), %eax	# j, tmp505
	cmpl	-104(%rbp), %eax	# ndirs, tmp505
	jl	.L1457	#,
	.loc 1 6875 0 is_stmt 1
	addl	$1, -104(%rbp)	#, ndirs
.L1453:
.LBE46:
	.loc 1 6844 0
	addl	$1, -100(%rbp)	#, i
.L1451:
	.loc 1 6844 0 is_stmt 0 discriminator 1
	movl	file_table+12(%rip), %eax	# file_table.in_use, D.24101
	cmpl	-100(%rbp), %eax	# i, D.24103
	jg	.L1458	#,
	.loc 1 6884 0 is_stmt 1
	movl	-104(%rbp), %eax	# ndirs, tmp506
	cltq
	salq	$2, %rax	#, D.24102
	leaq	15(%rax), %rdx	#, tmp507
	movl	$16, %eax	#, tmp642
	subq	$1, %rax	#, tmp508
	addq	%rdx, %rax	# tmp507, tmp509
	movl	$16, %ebx	#, tmp643
	movl	$0, %edx	#, tmp512
	divq	%rbx	# tmp643
	imulq	$16, %rax, %rax	#, tmp511, tmp513
	subq	%rax, %rsp	# tmp513,
	movq	%rsp, %rax	#, tmp514
	addq	$15, %rax	#, tmp515
	shrq	$4, %rax	#, tmp516
	salq	$4, %rax	#, tmp517
	movq	%rax, -40(%rbp)	# tmp517, saved
	.loc 1 6885 0
	movl	-104(%rbp), %eax	# ndirs, tmp518
	cltq
	salq	$2, %rax	#, D.24102
	leaq	15(%rax), %rdx	#, tmp519
	movl	$16, %eax	#, tmp644
	subq	$1, %rax	#, tmp520
	addq	%rdx, %rax	# tmp519, tmp521
	movl	$16, %ebx	#, tmp645
	movl	$0, %edx	#, tmp524
	divq	%rbx	# tmp645
	imulq	$16, %rax, %rax	#, tmp523, tmp525
	subq	%rax, %rsp	# tmp525,
	movq	%rsp, %rax	#, tmp526
	addq	$15, %rax	#, tmp527
	shrq	$4, %rax	#, tmp528
	salq	$4, %rax	#, tmp529
	movq	%rax, -32(%rbp)	# tmp529, savehere
	.loc 1 6887 0
	movl	-104(%rbp), %eax	# ndirs, tmp530
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-40(%rbp), %rax	# saved, tmp531
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp531,
	call	memset	#
	.loc 1 6888 0
	movl	$0, -100(%rbp)	#, i
	jmp	.L1459	#
.L1470:
.LBB47:
	.loc 1 6895 0
	movl	-100(%rbp), %eax	# i, tmp532
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-32(%rbp), %rax	# savehere, tmp533
	addq	%rax, %rdx	# tmp533, D.24112
	movl	-100(%rbp), %eax	# i, tmp534
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp535
	addq	%rcx, %rax	# D.24102, D.24111
	movl	8(%rax), %eax	# _222->length, D.24103
	movl	%eax, (%rdx)	# D.24103, *_219
	.loc 1 6896 0
	movl	-100(%rbp), %eax	# i, tmp536
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-32(%rbp), %rax	# savehere, tmp537
	addq	%rdx, %rax	# D.24102, D.24112
	movl	(%rax), %edx	# *_226, D.24103
	movl	-100(%rbp), %eax	# i, tmp538
	cltq
	leaq	0(,%rax,4), %rcx	#, D.24102
	movq	-40(%rbp), %rax	# saved, tmp539
	addq	%rcx, %rax	# D.24102, D.24112
	movl	(%rax), %eax	# *_230, D.24103
	subl	%eax, %edx	# D.24103, D.24103
	movl	-100(%rbp), %eax	# i, tmp540
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp541
	addq	%rcx, %rax	# D.24102, D.24111
	movl	16(%rax), %eax	# _235->count, D.24103
	imull	%edx, %eax	# D.24103, tmp542
	movl	%eax, -84(%rbp)	# tmp542, total
	.loc 1 6898 0
	movl	-100(%rbp), %eax	# i, tmp546
	addl	$1, %eax	#, tmp545
	movl	%eax, -88(%rbp)	# tmp545, j
	jmp	.L1460	#
.L1465:
	.loc 1 6900 0
	movl	-88(%rbp), %eax	# j, tmp547
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-32(%rbp), %rax	# savehere, tmp548
	addq	%rdx, %rax	# D.24102, D.24112
	movl	$0, (%rax)	#, *_241
	.loc 1 6901 0
	movl	-88(%rbp), %eax	# j, tmp549
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-40(%rbp), %rax	# saved, tmp550
	addq	%rdx, %rax	# D.24102, D.24112
	movl	(%rax), %edx	# *_244, D.24103
	movl	-100(%rbp), %eax	# i, tmp551
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp552
	addq	%rcx, %rax	# D.24102, D.24111
	movl	8(%rax), %eax	# _248->length, D.24103
	cmpl	%eax, %edx	# D.24103, D.24103
	jge	.L1461	#,
.LBB48:
	.loc 1 6907 0
	movl	-88(%rbp), %eax	# j, tmp553
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp554
	addq	%rdx, %rax	# D.24102, D.24111
	movl	12(%rax), %eax	# _252->prefix, tmp555
	movl	%eax, -80(%rbp)	# tmp555, k
	.loc 1 6908 0
	jmp	.L1462	#
.L1464:
	.loc 1 6909 0
	movl	-80(%rbp), %eax	# k, tmp556
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp557
	addq	%rdx, %rax	# D.24102, D.24111
	movl	12(%rax), %eax	# _256->prefix, tmp558
	movl	%eax, -80(%rbp)	# tmp558, k
.L1462:
	.loc 1 6908 0 discriminator 1
	cmpl	$-1, -80(%rbp)	#, k
	je	.L1463	#,
	.loc 1 6908 0 is_stmt 0 discriminator 2
	movl	-80(%rbp), %eax	# k, tmp559
	cmpl	-100(%rbp), %eax	# i, tmp559
	jne	.L1464	#,
.L1463:
	.loc 1 6911 0 is_stmt 1
	movl	-80(%rbp), %eax	# k, tmp560
	cmpl	-100(%rbp), %eax	# i, tmp560
	jne	.L1461	#,
	.loc 1 6916 0
	movl	-88(%rbp), %eax	# j, tmp561
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-32(%rbp), %rax	# savehere, tmp562
	addq	%rax, %rdx	# tmp562, D.24112
	movl	-100(%rbp), %eax	# i, tmp563
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp564
	addq	%rcx, %rax	# D.24102, D.24111
	movl	8(%rax), %eax	# _263->length, D.24103
	movl	%eax, (%rdx)	# D.24103, *_260
	.loc 1 6917 0
	movl	-88(%rbp), %eax	# j, tmp565
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-32(%rbp), %rax	# savehere, tmp566
	addq	%rdx, %rax	# D.24102, D.24112
	movl	(%rax), %edx	# *_267, D.24103
	movl	-88(%rbp), %eax	# j, tmp567
	cltq
	leaq	0(,%rax,4), %rcx	#, D.24102
	movq	-40(%rbp), %rax	# saved, tmp568
	addq	%rcx, %rax	# D.24102, D.24112
	movl	(%rax), %eax	# *_271, D.24103
	subl	%eax, %edx	# D.24103, D.24103
	movl	-88(%rbp), %eax	# j, tmp569
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp570
	addq	%rcx, %rax	# D.24102, D.24111
	movl	16(%rax), %eax	# _276->count, D.24103
	imull	%edx, %eax	# D.24103, D.24103
	addl	%eax, -84(%rbp)	# D.24103, total
.L1461:
.LBE48:
	.loc 1 6898 0
	addl	$1, -88(%rbp)	#, j
.L1460:
	.loc 1 6898 0 is_stmt 0 discriminator 1
	movl	-88(%rbp), %eax	# j, tmp571
	cmpl	-104(%rbp), %eax	# ndirs, tmp571
	jl	.L1465	#,
	.loc 1 6924 0 is_stmt 1
	movl	-100(%rbp), %eax	# i, tmp572
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp573
	addq	%rdx, %rax	# D.24102, D.24111
	movl	8(%rax), %eax	# _283->length, D.24103
	addl	$1, %eax	#, D.24103
	cmpl	-84(%rbp), %eax	# total, D.24103
	jge	.L1466	#,
	.loc 1 6927 0
	movl	-100(%rbp), %eax	# i, tmp574
	movl	%eax, -88(%rbp)	# tmp574, j
	jmp	.L1467	#
.L1469:
	.loc 1 6928 0
	movl	-88(%rbp), %eax	# j, tmp575
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-32(%rbp), %rax	# savehere, tmp576
	addq	%rdx, %rax	# D.24102, D.24112
	movl	(%rax), %eax	# *_289, D.24103
	testl	%eax, %eax	# D.24103
	jle	.L1468	#,
	.loc 1 6931 0
	movl	-88(%rbp), %eax	# j, tmp577
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-40(%rbp), %rax	# saved, tmp578
	addq	%rax, %rdx	# tmp578, D.24112
	movl	-88(%rbp), %eax	# j, tmp579
	cltq
	leaq	0(,%rax,4), %rcx	#, D.24102
	movq	-32(%rbp), %rax	# savehere, tmp580
	addq	%rcx, %rax	# D.24102, D.24112
	movl	(%rax), %eax	# *_296, D.24103
	movl	%eax, (%rdx)	# D.24103, *_293
	.loc 1 6934 0
	movl	-88(%rbp), %eax	# j, tmp581
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp582
	addq	%rax, %rdx	# tmp582, D.24111
	movl	-100(%rbp), %eax	# i, tmp583
	movl	%eax, 20(%rdx)	# tmp583, _300->dir_idx
.L1468:
	.loc 1 6927 0
	addl	$1, -88(%rbp)	#, j
.L1467:
	.loc 1 6927 0 is_stmt 0 discriminator 1
	movl	-88(%rbp), %eax	# j, tmp584
	cmpl	-104(%rbp), %eax	# ndirs, tmp584
	jl	.L1469	#,
.L1466:
.LBE47:
	.loc 1 6888 0 is_stmt 1
	addl	$1, -100(%rbp)	#, i
.L1459:
	.loc 1 6888 0 is_stmt 0 discriminator 1
	movl	-100(%rbp), %eax	# i, tmp585
	cmpl	-104(%rbp), %eax	# ndirs, tmp585
	jl	.L1470	#,
	.loc 1 6942 0 is_stmt 1
	movl	file_table+12(%rip), %eax	# file_table.in_use, D.24101
	movl	%eax, %eax	# D.24101, D.24102
	salq	$2, %rax	#, D.24102
	leaq	15(%rax), %rdx	#, tmp586
	movl	$16, %eax	#, tmp646
	subq	$1, %rax	#, tmp587
	addq	%rdx, %rax	# tmp586, tmp588
	movl	$16, %ebx	#, tmp647
	movl	$0, %edx	#, tmp591
	divq	%rbx	# tmp647
	imulq	$16, %rax, %rax	#, tmp590, tmp592
	subq	%rax, %rsp	# tmp592,
	movq	%rsp, %rax	#, tmp593
	addq	$15, %rax	#, tmp594
	shrq	$4, %rax	#, tmp595
	salq	$4, %rax	#, tmp596
	movq	%rax, -24(%rbp)	# tmp596, backmap
	.loc 1 6943 0
	movl	$1, -100(%rbp)	#, i
	jmp	.L1471	#
.L1472:
	.loc 1 6945 0 discriminator 2
	movl	-100(%rbp), %eax	# i, tmp597
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp598
	addq	%rdx, %rax	# D.24102, D.24107
	movl	20(%rax), %eax	# _312->file_idx, D.24103
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-24(%rbp), %rax	# backmap, tmp599
	addq	%rax, %rdx	# tmp599, D.24112
	movl	-100(%rbp), %eax	# i, tmp600
	movl	%eax, (%rdx)	# tmp600, *_316
	.loc 1 6948 0 discriminator 2
	movl	-100(%rbp), %eax	# i, tmp601
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp602
	addq	%rdx, %rax	# D.24102, D.24107
	movl	24(%rax), %eax	# _319->dir_idx, D.24103
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp603
	addq	%rdx, %rax	# D.24102, D.24111
	movl	20(%rax), %eax	# _323->dir_idx, D.24103
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp604
	addq	%rdx, %rax	# D.24102, D.24111
	movl	$1, 24(%rax)	#, _327->used
	.loc 1 6943 0 discriminator 2
	addl	$1, -100(%rbp)	#, i
.L1471:
	.loc 1 6943 0 is_stmt 0 discriminator 1
	movl	file_table+12(%rip), %eax	# file_table.in_use, D.24101
	cmpl	-100(%rbp), %eax	# i, D.24103
	jg	.L1472	#,
	.loc 1 6956 0 is_stmt 1
	movl	$1, -96(%rbp)	#, idx
	.loc 1 6957 0
	movq	-48(%rbp), %rax	# dirs, tmp605
	movl	8(%rax), %eax	# dirs_26->length, D.24103
	testl	%eax, %eax	# D.24103
	setg	%al	#, D.24113
	movzbl	%al, %eax	# D.24113, tmp606
	movl	%eax, -76(%rbp)	# tmp606, idx_offset
	.loc 1 6958 0
	movl	$1, %eax	#, tmp610
	subl	-76(%rbp), %eax	# idx_offset, tmp609
	movl	%eax, -100(%rbp)	# tmp609, i
	jmp	.L1473	#
.L1475:
	.loc 1 6959 0
	movl	-100(%rbp), %eax	# i, tmp611
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp612
	addq	%rdx, %rax	# D.24102, D.24111
	movl	24(%rax), %eax	# _336->used, D.24103
	testl	%eax, %eax	# D.24103
	je	.L1474	#,
	.loc 1 6961 0
	movl	-100(%rbp), %eax	# i, tmp613
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp614
	leaq	(%rdx,%rax), %rcx	#, D.24111
	movl	-96(%rbp), %eax	# idx, idx.364
	leal	1(%rax), %edx	#, tmp615
	movl	%edx, -96(%rbp)	# tmp615, idx
	movl	%eax, 24(%rcx)	# idx.364, _340->used
	.loc 1 6963 0
	movl	-100(%rbp), %eax	# i, tmp616
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp617
	addq	%rdx, %rax	# D.24102, D.24111
	.loc 1 6962 0
	movl	24(%rax), %edx	# _345->used, D.24103
	movl	-100(%rbp), %eax	# i, tmp618
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp619
	addq	%rcx, %rax	# D.24102, D.24111
	movl	8(%rax), %eax	# _349->length, D.24103
	subl	$1, %eax	#, D.24103
	movslq	%eax, %rsi	# D.24103, D.24102
	movl	-100(%rbp), %eax	# i, tmp620
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp621
	addq	%rcx, %rax	# D.24102, D.24111
	movq	(%rax), %rax	# _355->path, D.24106
	movl	%edx, %ecx	# D.24103,
	movl	$.LC458, %edx	#,
	movq	%rax, %rdi	# D.24106,
	movl	$0, %eax	#,
	call	dw2_asm_output_nstring	#
.L1474:
	.loc 1 6958 0
	addl	$1, -100(%rbp)	#, i
.L1473:
	.loc 1 6958 0 is_stmt 0 discriminator 1
	movl	-100(%rbp), %eax	# i, tmp622
	cmpl	-104(%rbp), %eax	# ndirs, tmp622
	jl	.L1475	#,
	.loc 1 6966 0 is_stmt 1
	movl	$.LC459, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6970 0
	cmpl	$0, -76(%rbp)	#, idx_offset
	jne	.L1476	#,
	.loc 1 6971 0
	movq	-48(%rbp), %rax	# dirs, tmp623
	movl	$0, 24(%rax)	#, dirs_26->used
.L1476:
	.loc 1 6974 0
	movl	$1, -100(%rbp)	#, i
	jmp	.L1477	#
.L1478:
.LBB49:
	.loc 1 6976 0 discriminator 2
	movl	-100(%rbp), %eax	# i, tmp624
	cltq
	leaq	0(,%rax,4), %rdx	#, D.24102
	movq	-24(%rbp), %rax	# backmap, tmp625
	addq	%rdx, %rax	# D.24102, D.24112
	movl	(%rax), %eax	# *_363, tmp626
	movl	%eax, -72(%rbp)	# tmp626, file_idx
	.loc 1 6977 0 discriminator 2
	movl	-72(%rbp), %eax	# file_idx, tmp627
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp628
	addq	%rdx, %rax	# D.24102, D.24107
	movl	24(%rax), %eax	# _367->dir_idx, D.24103
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp629
	addq	%rdx, %rax	# D.24102, D.24111
	movl	20(%rax), %eax	# _371->dir_idx, tmp630
	movl	%eax, -68(%rbp)	# tmp630, dir_idx
	.loc 1 6979 0 discriminator 2
	movl	-72(%rbp), %eax	# file_idx, tmp631
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-56(%rbp), %rax	# files, tmp632
	addq	%rdx, %rax	# D.24102, D.24107
	movq	(%rax), %rdx	# _375->path, D.24106
	movl	-68(%rbp), %eax	# dir_idx, tmp633
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rcx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp634
	addq	%rcx, %rax	# D.24102, D.24111
	movl	8(%rax), %eax	# _379->length, D.24103
	cltq
	leaq	(%rdx,%rax), %rdi	#, D.24114
	movl	-100(%rbp), %eax	# i, tmp635
	movl	%eax, %ecx	# tmp635,
	movl	$.LC460, %edx	#,
	movq	$-1, %rsi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_nstring	#
	.loc 1 6983 0 discriminator 2
	movl	-68(%rbp), %eax	# dir_idx, tmp636
	cltq
	salq	$5, %rax	#, D.24102
	movq	%rax, %rdx	# D.24102, D.24102
	movq	-48(%rbp), %rax	# dirs, tmp637
	addq	%rdx, %rax	# D.24102, D.24111
	movl	24(%rax), %eax	# _385->used, D.24103
	cltq
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24102,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 6986 0 discriminator 2
	movl	$0, %esi	#,
	movl	$0, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 6989 0 discriminator 2
	movl	$0, %esi	#,
	movl	$0, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
.LBE49:
	.loc 1 6974 0 discriminator 2
	addl	$1, -100(%rbp)	#, i
.L1477:
	.loc 1 6974 0 is_stmt 0 discriminator 1
	movl	file_table+12(%rip), %eax	# file_table.in_use, D.24101
	cmpl	-100(%rbp), %eax	# i, D.24103
	jg	.L1478	#,
	.loc 1 6992 0 is_stmt 1
	movl	$.LC461, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 6993 0
	movq	-8(%rbp), %rbx	#,
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE154:
	.size	output_file_names, .-output_file_names
	.section	.rodata
.LC462:
	.string	"LSLT"
.LC463:
	.string	"LELT"
.LC464:
	.string	"LASLTP"
.LC465:
	.string	"LELTP"
.LC466:
	.string	"Length of Source Line Info"
.LC467:
	.string	"Prolog Length"
.LC468:
	.string	"Minimum Instruction Length"
.LC469:
	.string	"Default is_stmt_start flag"
	.align 8
.LC470:
	.string	"Line Base Value (Special Opcodes)"
	.align 8
.LC471:
	.string	"Line Range Value (Special Opcodes)"
.LC472:
	.string	"Special Opcode Base"
.LC473:
	.string	"opcode: 0x%x has %d args"
.LC474:
	.string	"LM"
.LC475:
	.string	"DW_LNE_set_address"
.LC476:
	.string	"DW_LNS_set_file"
.LC477:
	.string	"(\"%s\")"
.LC478:
	.string	"line %lu"
.LC479:
	.string	"advance to line %lu"
.LC480:
	.string	"DW_LNS_copy"
.LC481:
	.string	"DW_LNE_end_sequence"
.LC482:
	.string	"LSM"
	.text
	.type	output_line_info, @function
output_line_info:
.LFB155:
	.loc 1 7001 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$288, %rsp	#,
	.loc 1 7001 0
	movq	%fs:40, %rax	#, tmp212
	movq	%rax, -8(%rbp)	# tmp212, D.24126
	xorl	%eax, %eax	# tmp212
	.loc 1 7014 0
	leaq	-208(%rbp), %rax	#, tmp136
	movl	$0, %ecx	#,
	movl	$.LC462, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp136,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 7015 0
	leaq	-176(%rbp), %rax	#, tmp137
	movl	$0, %ecx	#,
	movl	$.LC463, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp137,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 7016 0
	leaq	-144(%rbp), %rax	#, tmp138
	movl	$0, %ecx	#,
	movl	$.LC464, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp138,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 7017 0
	leaq	-112(%rbp), %rax	#, tmp139
	movl	$0, %ecx	#,
	movl	$.LC465, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp139,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 7019 0
	leaq	-208(%rbp), %rdx	#, tmp140
	leaq	-176(%rbp), %rax	#, tmp141
	movl	$.LC466, %ecx	#,
	movq	%rax, %rsi	# tmp141,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 7021 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.365
	leaq	-208(%rbp), %rdx	#, tmp142
	movq	%rdx, %rsi	# tmp142,
	movq	%rax, %rdi	# asm_out_file.365,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.366
	movq	%rax, %rcx	# asm_out_file.366,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 7023 0
	movl	$.LC444, %edx	#,
	movl	$2, %esi	#,
	movl	$2, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7024 0
	leaq	-144(%rbp), %rdx	#, tmp143
	leaq	-112(%rbp), %rax	#, tmp144
	movl	$.LC467, %ecx	#,
	movq	%rax, %rsi	# tmp144,
	movl	$4, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_delta	#
	.loc 1 7025 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.367
	leaq	-144(%rbp), %rdx	#, tmp145
	movq	%rdx, %rsi	# tmp145,
	movq	%rax, %rdi	# asm_out_file.367,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.368
	movq	%rax, %rcx	# asm_out_file.368,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 7035 0
	movl	$.LC468, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7038 0
	movl	$.LC469, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7040 0
	movl	$.LC470, %edx	#,
	movq	$-10, %rsi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7042 0
	movl	$.LC471, %edx	#,
	movl	$245, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7044 0
	movl	$.LC472, %edx	#,
	movl	$10, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7047 0
	movl	$1, -280(%rbp)	#, opc
	jmp	.L1480	#
.L1484:
	.loc 1 7049 0
	movl	-280(%rbp), %eax	# opc, opc
	cmpl	$2, %eax	#, opc
	jb	.L1481	#,
	cmpl	$5, %eax	#, opc
	jbe	.L1482	#,
	cmpl	$9, %eax	#, opc
	jne	.L1481	#,
.L1482:
	.loc 1 7056 0
	movl	$1, -276(%rbp)	#, n_op_args
	.loc 1 7057 0
	jmp	.L1483	#
.L1481:
	.loc 1 7059 0
	movl	$0, -276(%rbp)	#, n_op_args
	.loc 1 7060 0
	nop
.L1483:
	.loc 1 7063 0
	movl	-276(%rbp), %eax	# n_op_args, D.24119
	movl	-276(%rbp), %ecx	# n_op_args, tmp147
	movl	-280(%rbp), %edx	# opc, tmp148
	movl	%ecx, %r8d	# tmp147,
	movl	%edx, %ecx	# tmp148,
	movl	$.LC473, %edx	#,
	movq	%rax, %rsi	# D.24119,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7047 0
	addl	$1, -280(%rbp)	#, opc
.L1480:
	.loc 1 7047 0 is_stmt 0 discriminator 1
	cmpl	$9, -280(%rbp)	#, opc
	jbe	.L1484	#,
	.loc 1 7068 0 is_stmt 1
	call	output_file_names	#
	.loc 1 7069 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.369
	leaq	-112(%rbp), %rdx	#, tmp149
	movq	%rdx, %rsi	# tmp149,
	movq	%rax, %rdi	# asm_out_file.369,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.370
	movq	%rax, %rcx	# asm_out_file.370,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 7077 0
	movq	$1, -256(%rbp)	#, current_file
	.loc 1 7078 0
	movq	$1, -264(%rbp)	#, current_line
	.loc 1 7079 0
	leaq	-48(%rbp), %rax	#, tmp150
	movl	$text_section_label, %esi	#,
	movq	%rax, %rdi	# tmp150,
	call	strcpy	#
	.loc 1 7080 0
	movq	$1, -272(%rbp)	#, lt_index
	jmp	.L1485	#
.L1495:
.LBB50:
	.loc 1 7082 0
	movq	line_info_table(%rip), %rax	# line_info_table, line_info_table.371
	movq	-272(%rbp), %rdx	# lt_index, tmp151
	salq	$4, %rdx	#, D.24119
	addq	%rdx, %rax	# D.24119, tmp152
	movq	%rax, -240(%rbp)	# tmp152, line_info
	.loc 1 7106 0
	movq	-272(%rbp), %rax	# lt_index, tmp153
	movl	%eax, %edx	# tmp153, D.24120
	leaq	-80(%rbp), %rax	#, tmp154
	movl	%edx, %ecx	# D.24120,
	movl	$.LC474, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp154,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 7118 0
	movl	$.LC475, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7119 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.373
	andl	$33554432, %eax	#, D.24121
	testl	%eax, %eax	# D.24121
	je	.L1486	#,
	.loc 1 7119 0 is_stmt 0 discriminator 1
	movl	$9, %eax	#, iftmp.372
	jmp	.L1487	#
.L1486:
	.loc 1 7119 0 discriminator 2
	movl	$5, %eax	#, iftmp.372
.L1487:
	.loc 1 7119 0 discriminator 3
	movl	$0, %esi	#,
	movq	%rax, %rdi	# iftmp.372,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 7120 0 is_stmt 1 discriminator 3
	movl	$0, %edx	#,
	movl	$2, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7121 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.375
	andl	$33554432, %eax	#, D.24121
	testl	%eax, %eax	# D.24121
	je	.L1488	#,
	.loc 1 7121 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.374
	jmp	.L1489	#
.L1488:
	.loc 1 7121 0 discriminator 2
	movl	$4, %eax	#, iftmp.374
.L1489:
	.loc 1 7121 0 discriminator 3
	leaq	-80(%rbp), %rcx	#, tmp155
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp155,
	movl	%eax, %edi	# iftmp.374,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
	.loc 1 7124 0 is_stmt 1 discriminator 3
	leaq	-80(%rbp), %rdx	#, tmp156
	leaq	-48(%rbp), %rax	#, tmp157
	movq	%rdx, %rsi	# tmp156,
	movq	%rax, %rdi	# tmp157,
	call	strcpy	#
	.loc 1 7128 0 discriminator 3
	movq	-240(%rbp), %rax	# line_info, tmp158
	movq	(%rax), %rax	# line_info_43->dw_file_num, D.24119
	cmpq	-256(%rbp), %rax	# current_file, D.24119
	je	.L1490	#,
	.loc 1 7130 0
	movq	-240(%rbp), %rax	# line_info, tmp159
	movq	(%rax), %rax	# line_info_43->dw_file_num, tmp160
	movq	%rax, -256(%rbp)	# tmp160, current_file
	.loc 1 7131 0
	movl	$.LC476, %edx	#,
	movl	$4, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7133 0
	movq	file_table(%rip), %rax	# file_table.table, D.24122
	movq	-256(%rbp), %rdx	# current_file, tmp161
	salq	$3, %rdx	#, D.24119
	addq	%rdx, %rax	# D.24119, D.24122
	.loc 1 7132 0
	movq	(%rax), %rdx	# *_57, D.24123
	movq	-256(%rbp), %rax	# current_file, tmp162
	movl	$.LC477, %esi	#,
	movq	%rax, %rdi	# tmp162,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
.L1490:
	.loc 1 7138 0
	movq	-240(%rbp), %rax	# line_info, tmp163
	movq	8(%rax), %rax	# line_info_43->dw_line_num, D.24119
	cmpq	-264(%rbp), %rax	# current_line, D.24119
	je	.L1491	#,
	.loc 1 7140 0
	movq	-240(%rbp), %rax	# line_info, tmp164
	movq	8(%rax), %rax	# line_info_43->dw_line_num, D.24119
	subq	-264(%rbp), %rax	# current_line, D.24119
	movq	%rax, -232(%rbp)	# D.24119, line_offset
	.loc 1 7141 0
	movq	-232(%rbp), %rax	# line_offset, tmp168
	addq	$10, %rax	#, tmp167
	movq	%rax, -224(%rbp)	# tmp167, line_delta
	.loc 1 7142 0
	movq	-240(%rbp), %rax	# line_info, tmp169
	movq	8(%rax), %rax	# line_info_43->dw_line_num, tmp170
	movq	%rax, -264(%rbp)	# tmp170, current_line
	.loc 1 7143 0
	cmpq	$0, -224(%rbp)	#, line_delta
	js	.L1492	#,
	.loc 1 7143 0 is_stmt 0 discriminator 1
	cmpq	$243, -224(%rbp)	#, line_delta
	jg	.L1492	#,
	.loc 1 7147 0 is_stmt 1
	movq	-224(%rbp), %rax	# line_delta, tmp171
	addq	$10, %rax	#, D.24124
	movq	-264(%rbp), %rdx	# current_line, tmp172
	movq	%rdx, %rcx	# tmp172,
	movl	$.LC478, %edx	#,
	movq	%rax, %rsi	# D.24119,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	jmp	.L1494	#
.L1492:
	.loc 1 7153 0
	movq	-264(%rbp), %rax	# current_line, tmp173
	movq	%rax, %rcx	# tmp173,
	movl	$.LC479, %edx	#,
	movl	$3, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7155 0
	movq	-232(%rbp), %rax	# line_offset, tmp174
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp174,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_sleb128	#
	.loc 1 7156 0
	movl	$.LC480, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	jmp	.L1494	#
.L1491:
	.loc 1 7161 0
	movl	$.LC480, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.L1494:
.LBE50:
	.loc 1 7080 0
	addq	$1, -272(%rbp)	#, lt_index
.L1485:
	.loc 1 7080 0 is_stmt 0 discriminator 1
	movl	line_info_table_in_use(%rip), %eax	# line_info_table_in_use, line_info_table_in_use.376
	movl	%eax, %eax	# line_info_table_in_use.376, D.24119
	cmpq	-272(%rbp), %rax	# lt_index, D.24119
	ja	.L1495	#,
	.loc 1 7173 0 is_stmt 1
	movl	$.LC475, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7174 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.378
	andl	$33554432, %eax	#, D.24121
	testl	%eax, %eax	# D.24121
	je	.L1496	#,
	.loc 1 7174 0 is_stmt 0 discriminator 1
	movl	$9, %eax	#, iftmp.377
	jmp	.L1497	#
.L1496:
	.loc 1 7174 0 discriminator 2
	movl	$5, %eax	#, iftmp.377
.L1497:
	.loc 1 7174 0 discriminator 3
	movl	$0, %esi	#,
	movq	%rax, %rdi	# iftmp.377,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 7175 0 is_stmt 1 discriminator 3
	movl	$0, %edx	#,
	movl	$2, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7176 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.380
	andl	$33554432, %eax	#, D.24121
	testl	%eax, %eax	# D.24121
	je	.L1498	#,
	.loc 1 7176 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.379
	jmp	.L1499	#
.L1498:
	.loc 1 7176 0 discriminator 2
	movl	$4, %eax	#, iftmp.379
.L1499:
	.loc 1 7176 0 discriminator 3
	movl	$0, %edx	#,
	movl	$text_end_label, %esi	#,
	movl	%eax, %edi	# iftmp.379,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
	.loc 1 7179 0 is_stmt 1 discriminator 3
	movl	$.LC481, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7180 0 discriminator 3
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 7181 0 discriminator 3
	movl	$0, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7183 0 discriminator 3
	movq	$0, -248(%rbp)	#, function
	.loc 1 7184 0 discriminator 3
	movq	$1, -256(%rbp)	#, current_file
	.loc 1 7185 0 discriminator 3
	movq	$1, -264(%rbp)	#, current_line
	.loc 1 7186 0 discriminator 3
	movq	$0, -272(%rbp)	#, lt_index
	jmp	.L1500	#
.L1521:
.LBB51:
	.loc 1 7189 0
	movq	separate_line_info_table(%rip), %rcx	# separate_line_info_table, separate_line_info_table.381
	movq	-272(%rbp), %rdx	# lt_index, tmp175
	movq	%rdx, %rax	# tmp175, tmp176
	addq	%rax, %rax	# tmp176
	addq	%rdx, %rax	# tmp175, tmp176
	salq	$3, %rax	#, tmp177
	.loc 1 7188 0
	addq	%rcx, %rax	# separate_line_info_table.381, tmp178
	movq	%rax, -216(%rbp)	# tmp178, line_info
	.loc 1 7202 0
	movq	-272(%rbp), %rax	# lt_index, tmp179
	movl	%eax, %edx	# tmp179, D.24120
	leaq	-80(%rbp), %rax	#, tmp180
	movl	%edx, %ecx	# D.24120,
	movl	$.LC482, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp180,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 7204 0
	movq	-216(%rbp), %rax	# line_info, tmp181
	movq	16(%rax), %rax	# line_info_84->function, D.24119
	cmpq	-248(%rbp), %rax	# function, D.24119
	je	.L1501	#,
	.loc 1 7206 0
	movq	-216(%rbp), %rax	# line_info, tmp182
	movq	16(%rax), %rax	# line_info_84->function, tmp183
	movq	%rax, -248(%rbp)	# tmp183, function
	.loc 1 7209 0
	movl	$.LC475, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7210 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.383
	andl	$33554432, %eax	#, D.24121
	testl	%eax, %eax	# D.24121
	je	.L1502	#,
	.loc 1 7210 0 is_stmt 0 discriminator 1
	movl	$9, %eax	#, iftmp.382
	jmp	.L1503	#
.L1502:
	.loc 1 7210 0 discriminator 2
	movl	$5, %eax	#, iftmp.382
.L1503:
	.loc 1 7210 0 discriminator 3
	movl	$0, %esi	#,
	movq	%rax, %rdi	# iftmp.382,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 7211 0 is_stmt 1 discriminator 3
	movl	$0, %edx	#,
	movl	$2, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7212 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.385
	andl	$33554432, %eax	#, D.24121
	testl	%eax, %eax	# D.24121
	je	.L1504	#,
	.loc 1 7212 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.384
	jmp	.L1505	#
.L1504:
	.loc 1 7212 0 discriminator 2
	movl	$4, %eax	#, iftmp.384
.L1505:
	.loc 1 7212 0 discriminator 1
	leaq	-80(%rbp), %rcx	#, tmp184
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp184,
	movl	%eax, %edi	# iftmp.384,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
	jmp	.L1506	#
.L1501:
	.loc 1 7225 0 is_stmt 1
	movl	$.LC475, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7226 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.387
	andl	$33554432, %eax	#, D.24121
	testl	%eax, %eax	# D.24121
	je	.L1507	#,
	.loc 1 7226 0 is_stmt 0 discriminator 1
	movl	$9, %eax	#, iftmp.386
	jmp	.L1508	#
.L1507:
	.loc 1 7226 0 discriminator 2
	movl	$5, %eax	#, iftmp.386
.L1508:
	.loc 1 7226 0 discriminator 3
	movl	$0, %esi	#,
	movq	%rax, %rdi	# iftmp.386,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 7227 0 is_stmt 1 discriminator 3
	movl	$0, %edx	#,
	movl	$2, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7228 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.389
	andl	$33554432, %eax	#, D.24121
	testl	%eax, %eax	# D.24121
	je	.L1509	#,
	.loc 1 7228 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.388
	jmp	.L1510	#
.L1509:
	.loc 1 7228 0 discriminator 2
	movl	$4, %eax	#, iftmp.388
.L1510:
	.loc 1 7228 0 discriminator 3
	leaq	-80(%rbp), %rcx	#, tmp185
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp185,
	movl	%eax, %edi	# iftmp.388,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
.L1506:
	.loc 1 7232 0 is_stmt 1
	leaq	-80(%rbp), %rdx	#, tmp186
	leaq	-48(%rbp), %rax	#, tmp187
	movq	%rdx, %rsi	# tmp186,
	movq	%rax, %rdi	# tmp187,
	call	strcpy	#
	.loc 1 7236 0
	movq	-216(%rbp), %rax	# line_info, tmp188
	movq	(%rax), %rax	# line_info_84->dw_file_num, D.24119
	cmpq	-256(%rbp), %rax	# current_file, D.24119
	je	.L1511	#,
	.loc 1 7238 0
	movq	-216(%rbp), %rax	# line_info, tmp189
	movq	(%rax), %rax	# line_info_84->dw_file_num, tmp190
	movq	%rax, -256(%rbp)	# tmp190, current_file
	.loc 1 7239 0
	movl	$.LC476, %edx	#,
	movl	$4, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7241 0
	movq	file_table(%rip), %rax	# file_table.table, D.24122
	movq	-256(%rbp), %rdx	# current_file, tmp191
	salq	$3, %rdx	#, D.24119
	addq	%rdx, %rax	# D.24119, D.24122
	.loc 1 7240 0
	movq	(%rax), %rdx	# *_108, D.24123
	movq	-256(%rbp), %rax	# current_file, tmp192
	movl	$.LC477, %esi	#,
	movq	%rax, %rdi	# tmp192,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
.L1511:
	.loc 1 7246 0
	movq	-216(%rbp), %rax	# line_info, tmp193
	movq	8(%rax), %rax	# line_info_84->dw_line_num, D.24119
	cmpq	-264(%rbp), %rax	# current_line, D.24119
	je	.L1512	#,
	.loc 1 7248 0
	movq	-216(%rbp), %rax	# line_info, tmp194
	movq	8(%rax), %rax	# line_info_84->dw_line_num, D.24119
	subq	-264(%rbp), %rax	# current_line, D.24119
	movq	%rax, -232(%rbp)	# D.24119, line_offset
	.loc 1 7249 0
	movq	-232(%rbp), %rax	# line_offset, tmp198
	addq	$10, %rax	#, tmp197
	movq	%rax, -224(%rbp)	# tmp197, line_delta
	.loc 1 7250 0
	movq	-216(%rbp), %rax	# line_info, tmp199
	movq	8(%rax), %rax	# line_info_84->dw_line_num, tmp200
	movq	%rax, -264(%rbp)	# tmp200, current_line
	.loc 1 7251 0
	cmpq	$0, -224(%rbp)	#, line_delta
	js	.L1513	#,
	.loc 1 7251 0 is_stmt 0 discriminator 1
	cmpq	$243, -224(%rbp)	#, line_delta
	jg	.L1513	#,
	.loc 1 7252 0 is_stmt 1
	movq	-224(%rbp), %rax	# line_delta, tmp201
	addq	$10, %rax	#, D.24124
	movq	-264(%rbp), %rdx	# current_line, tmp202
	movq	%rdx, %rcx	# tmp202,
	movl	$.LC478, %edx	#,
	movq	%rax, %rsi	# D.24119,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	jmp	.L1515	#
.L1513:
	.loc 1 7256 0
	movq	-264(%rbp), %rax	# current_line, tmp203
	movq	%rax, %rcx	# tmp203,
	movl	$.LC479, %edx	#,
	movl	$3, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7258 0
	movq	-232(%rbp), %rax	# line_offset, tmp204
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp204,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_sleb128	#
	.loc 1 7259 0
	movl	$.LC480, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	jmp	.L1515	#
.L1512:
	.loc 1 7263 0
	movl	$.LC480, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.L1515:
	.loc 1 7269 0
	addq	$1, -272(%rbp)	#, lt_index
	.loc 1 7272 0
	movl	separate_line_info_table_in_use(%rip), %eax	# separate_line_info_table_in_use, separate_line_info_table_in_use.390
	movl	%eax, %eax	# separate_line_info_table_in_use.390, D.24119
	cmpq	-272(%rbp), %rax	# lt_index, D.24119
	je	.L1516	#,
	.loc 1 7273 0
	movq	separate_line_info_table(%rip), %rcx	# separate_line_info_table, separate_line_info_table.391
	movq	-272(%rbp), %rdx	# lt_index, tmp205
	movq	%rdx, %rax	# tmp205, tmp206
	addq	%rax, %rax	# tmp206
	addq	%rdx, %rax	# tmp205, tmp206
	salq	$3, %rax	#, tmp207
	addq	%rcx, %rax	# separate_line_info_table.391, D.24125
	movq	16(%rax), %rax	# _123->function, D.24119
	cmpq	-248(%rbp), %rax	# function, D.24119
	je	.L1500	#,
.L1516:
	.loc 1 7275 0
	movq	$1, -256(%rbp)	#, current_file
	.loc 1 7276 0
	movq	$1, -264(%rbp)	#, current_line
	.loc 1 7279 0
	movq	-248(%rbp), %rax	# function, tmp208
	movl	%eax, %edx	# tmp208, D.24120
	leaq	-80(%rbp), %rax	#, tmp209
	movl	%edx, %ecx	# D.24120,
	movl	$.LC66, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp209,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 7288 0
	movl	$.LC475, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7289 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.393
	andl	$33554432, %eax	#, D.24121
	testl	%eax, %eax	# D.24121
	je	.L1517	#,
	.loc 1 7289 0 is_stmt 0 discriminator 1
	movl	$9, %eax	#, iftmp.392
	jmp	.L1518	#
.L1517:
	.loc 1 7289 0 discriminator 2
	movl	$5, %eax	#, iftmp.392
.L1518:
	.loc 1 7289 0 discriminator 3
	movl	$0, %esi	#,
	movq	%rax, %rdi	# iftmp.392,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 7290 0 is_stmt 1 discriminator 3
	movl	$0, %edx	#,
	movl	$2, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7291 0 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.395
	andl	$33554432, %eax	#, D.24121
	testl	%eax, %eax	# D.24121
	je	.L1519	#,
	.loc 1 7291 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.394
	jmp	.L1520	#
.L1519:
	.loc 1 7291 0 discriminator 2
	movl	$4, %eax	#, iftmp.394
.L1520:
	.loc 1 7291 0 discriminator 3
	leaq	-80(%rbp), %rcx	#, tmp210
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp210,
	movl	%eax, %edi	# iftmp.394,
	movl	$0, %eax	#,
	call	dw2_asm_output_addr	#
	.loc 1 7295 0 is_stmt 1 discriminator 3
	movl	$.LC481, %edx	#,
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 7296 0 discriminator 3
	movl	$0, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 7297 0 discriminator 3
	movl	$0, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.L1500:
.LBE51:
	.loc 1 7186 0 discriminator 1
	movl	separate_line_info_table_in_use(%rip), %eax	# separate_line_info_table_in_use, separate_line_info_table_in_use.396
	movl	%eax, %eax	# separate_line_info_table_in_use.396, D.24119
	cmpq	-272(%rbp), %rax	# lt_index, D.24119
	ja	.L1521	#,
	.loc 1 7302 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.397
	leaq	-176(%rbp), %rdx	#, tmp211
	movq	%rdx, %rsi	# tmp211,
	movq	%rax, %rdi	# asm_out_file.397,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.398
	movq	%rax, %rcx	# asm_out_file.398,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 7303 0
	movq	-8(%rbp), %rax	# D.24126, tmp213
	xorq	%fs:40, %rax	#, tmp213
	je	.L1522	#,
	call	__stack_chk_fail	#
.L1522:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE155:
	.size	output_line_info, .-output_line_info
	.section	.rodata
.LC483:
	.string	"__unknown__"
.LC484:
	.string	"signed char"
.LC485:
	.string	"unsigned char"
	.text
	.type	base_type_die, @function
base_type_die:
.LFB156:
	.loc 1 7314 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# type, type
	.loc 1 7318 0
	movq	-40(%rbp), %rax	# type, tmp83
	movq	96(%rax), %rax	# type_9(D)->type.name, tmp84
	movq	%rax, -16(%rbp)	# tmp84, name
	.loc 1 7320 0
	movq	-40(%rbp), %rax	# type, tmp85
	movzbl	16(%rax), %eax	# type_9(D)->common.code, D.24149
	testb	%al, %al	# D.24149
	je	.L1524	#,
	.loc 1 7320 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# type, tmp86
	movzbl	16(%rax), %eax	# type_9(D)->common.code, D.24149
	cmpb	$5, %al	#, D.24149
	jne	.L1525	#,
.L1524:
	.loc 1 7321 0 is_stmt 1
	movl	$0, %eax	#, D.24148
	jmp	.L1526	#
.L1525:
	.loc 1 7323 0
	cmpq	$0, -16(%rbp)	#, name
	je	.L1527	#,
	.loc 1 7325 0
	movq	-16(%rbp), %rax	# name, tmp87
	movzbl	16(%rax), %eax	# name_10->common.code, D.24149
	cmpb	$33, %al	#, D.24149
	jne	.L1528	#,
	.loc 1 7326 0
	movq	-16(%rbp), %rax	# name, tmp88
	movq	72(%rax), %rax	# name_10->decl.name, tmp89
	movq	%rax, -16(%rbp)	# tmp89, name
.L1528:
	.loc 1 7328 0
	movq	-16(%rbp), %rax	# name, tmp90
	movq	32(%rax), %rax	# name_7->identifier.id.str, tmp91
	movq	%rax, -24(%rbp)	# tmp91, type_name
	jmp	.L1529	#
.L1527:
	.loc 1 7331 0
	movq	$.LC483, -24(%rbp)	#, type_name
.L1529:
	.loc 1 7333 0
	movq	-40(%rbp), %rax	# type, tmp92
	movzbl	16(%rax), %eax	# type_9(D)->common.code, D.24149
	movzbl	%al, %eax	# D.24149, D.24150
	subl	$6, %eax	#, tmp93
	cmpl	$6, %eax	#, tmp93
	ja	.L1530	#,
	movl	%eax, %eax	# tmp93, tmp94
	movq	.L1532(,%rax,8), %rax	#, tmp95
	jmp	*%rax	# tmp95
	.section	.rodata
	.align 8
	.align 4
.L1532:
	.quad	.L1531
	.quad	.L1533
	.quad	.L1534
	.quad	.L1530
	.quad	.L1530
	.quad	.L1535
	.quad	.L1536
	.text
.L1531:
	.loc 1 7340 0
	movq	-40(%rbp), %rax	# type, tmp96
	movzwl	60(%rax), %eax	# *type_9(D), D.24151
	andw	$511, %ax	#, D.24151
	cmpw	$8, %ax	#, D.24151
	jne	.L1537	#,
	.loc 1 7341 0 discriminator 1
	movq	integer_types(%rip), %rax	# integer_types, D.24152
	.loc 1 7340 0 discriminator 1
	cmpq	-40(%rbp), %rax	# type, D.24152
	je	.L1536	#,
	.loc 1 7342 0
	movq	-24(%rbp), %rax	# type_name, tmp97
	movl	$.LC484, %esi	#,
	movq	%rax, %rdi	# tmp97,
	call	strcmp	#
	testl	%eax, %eax	# D.24153
	je	.L1536	#,
	.loc 1 7343 0
	movq	-24(%rbp), %rax	# type_name, tmp98
	movl	$.LC485, %esi	#,
	movq	%rax, %rdi	# tmp98,
	call	strcmp	#
	testl	%eax, %eax	# D.24153
	je	.L1536	#,
.L1537:
	.loc 1 7345 0
	movq	-40(%rbp), %rax	# type, tmp99
	movzbl	17(%rax), %eax	# *type_9(D), D.24149
	andl	$32, %eax	#, D.24149
	testb	%al, %al	# D.24149
	je	.L1538	#,
	.loc 1 7346 0
	movl	$7, -28(%rbp)	#, encoding
	.loc 1 7349 0
	jmp	.L1540	#
.L1538:
	.loc 1 7348 0
	movl	$5, -28(%rbp)	#, encoding
	.loc 1 7349 0
	jmp	.L1540	#
.L1536:
	.loc 1 7355 0
	movq	-40(%rbp), %rax	# type, tmp100
	movzbl	17(%rax), %eax	# *type_9(D), D.24149
	andl	$32, %eax	#, D.24149
	testb	%al, %al	# D.24149
	je	.L1541	#,
	.loc 1 7356 0
	movl	$8, -28(%rbp)	#, encoding
	.loc 1 7359 0
	jmp	.L1540	#
.L1541:
	.loc 1 7358 0
	movl	$6, -28(%rbp)	#, encoding
	.loc 1 7359 0
	jmp	.L1540	#
.L1533:
	.loc 1 7362 0
	movl	$4, -28(%rbp)	#, encoding
	.loc 1 7363 0
	jmp	.L1540	#
.L1534:
	.loc 1 7368 0
	movq	-40(%rbp), %rax	# type, tmp101
	movq	8(%rax), %rax	# type_9(D)->common.type, D.24152
	movzbl	16(%rax), %eax	# _33->common.code, D.24149
	cmpb	$7, %al	#, D.24149
	jne	.L1543	#,
	.loc 1 7369 0
	movl	$3, -28(%rbp)	#, encoding
	.loc 1 7372 0
	jmp	.L1540	#
.L1543:
	.loc 1 7371 0
	movl	$128, -28(%rbp)	#, encoding
	.loc 1 7372 0
	jmp	.L1540	#
.L1535:
	.loc 1 7376 0
	movl	$2, -28(%rbp)	#, encoding
	.loc 1 7377 0
	jmp	.L1540	#
.L1530:
	.loc 1 7381 0
	movl	$__FUNCTION__.16336, %edx	#,
	movl	$7381, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1540:
	.loc 1 7384 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.399
	movq	-40(%rbp), %rdx	# type, tmp102
	movq	%rax, %rsi	# comp_unit_die.399,
	movl	$36, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp103, base_type_result
	.loc 1 7385 0
	movq	demangle_name_func(%rip), %rax	# demangle_name_func, demangle_name_func.400
	testq	%rax, %rax	# demangle_name_func.400
	je	.L1545	#,
	.loc 1 7386 0
	movq	demangle_name_func(%rip), %rax	# demangle_name_func, demangle_name_func.401
	movq	-24(%rbp), %rdx	# type_name, tmp104
	movq	%rdx, %rdi	# tmp104,
	call	*%rax	# demangle_name_func.401
	movq	%rax, -24(%rbp)	# tmp105, type_name
.L1545:
	.loc 1 7388 0
	movq	-24(%rbp), %rdx	# type_name, tmp106
	movq	-8(%rbp), %rax	# base_type_result, tmp107
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp107,
	call	add_AT_string	#
	.loc 1 7390 0
	movq	-40(%rbp), %rax	# type, tmp108
	movq	%rax, %rdi	# tmp108,
	call	int_size_in_bytes	#
	.loc 1 7389 0
	movq	%rax, %rdx	# D.24154, D.24155
	movq	-8(%rbp), %rax	# base_type_result, tmp109
	movl	$11, %esi	#,
	movq	%rax, %rdi	# tmp109,
	call	add_AT_unsigned	#
	.loc 1 7391 0
	movl	-28(%rbp), %edx	# encoding, D.24155
	movq	-8(%rbp), %rax	# base_type_result, tmp110
	movl	$62, %esi	#,
	movq	%rax, %rdi	# tmp110,
	call	add_AT_unsigned	#
	.loc 1 7393 0
	movq	-8(%rbp), %rax	# base_type_result, D.24148
.L1526:
	.loc 1 7394 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE156:
	.size	base_type_die, .-base_type_die
	.type	root_type, @function
root_type:
.LFB157:
	.loc 1 7408 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# type, type
	.loc 1 7409 0
	movq	-8(%rbp), %rax	# type, tmp66
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.24160
	testb	%al, %al	# D.24160
	jne	.L1547	#,
	.loc 1 7410 0
	movq	global_trees(%rip), %rax	# global_trees, D.24159
	jmp	.L1548	#
.L1547:
	.loc 1 7412 0
	movq	-8(%rbp), %rax	# type, tmp67
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.24160
	movzbl	%al, %eax	# D.24160, D.24161
	cmpl	$13, %eax	#, D.24161
	je	.L1550	#,
	cmpl	$15, %eax	#, D.24161
	je	.L1550	#,
	testl	%eax, %eax	# D.24161
	jne	.L1552	#,
	.loc 1 7415 0
	movq	global_trees(%rip), %rax	# global_trees, D.24159
	jmp	.L1548	#
.L1550:
	.loc 1 7419 0
	movq	-8(%rbp), %rax	# type, tmp68
	movq	8(%rax), %rax	# type_2(D)->common.type, D.24162
	movq	%rax, %rdi	# D.24162,
	call	root_type	#
	movq	%rax, %rdi	# D.24162,
	call	type_main_variant	#
	jmp	.L1548	#
.L1552:
	.loc 1 7422 0
	movq	-8(%rbp), %rax	# type, tmp69
	movq	%rax, %rdi	# tmp69,
	call	type_main_variant	#
.L1548:
	.loc 1 7424 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE157:
	.size	root_type, .-root_type
	.type	is_base_type, @function
is_base_type:
.LFB158:
	.loc 1 7432 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# type, type
	.loc 1 7433 0
	movq	-8(%rbp), %rax	# type, tmp63
	movzbl	16(%rax), %eax	# type_2(D)->common.code, D.24164
	movzbl	%al, %eax	# D.24164, D.24165
	cmpl	$24, %eax	#, D.24165
	ja	.L1554	#,
	movl	%eax, %eax	# D.24165, tmp64
	movq	.L1556(,%rax,8), %rax	#, tmp65
	jmp	*%rax	# tmp65
	.section	.rodata
	.align 8
	.align 4
.L1556:
	.quad	.L1555
	.quad	.L1554
	.quad	.L1554
	.quad	.L1554
	.quad	.L1554
	.quad	.L1555
	.quad	.L1555
	.quad	.L1555
	.quad	.L1555
	.quad	.L1557
	.quad	.L1557
	.quad	.L1555
	.quad	.L1555
	.quad	.L1557
	.quad	.L1557
	.quad	.L1557
	.quad	.L1557
	.quad	.L1557
	.quad	.L1557
	.quad	.L1557
	.quad	.L1557
	.quad	.L1557
	.quad	.L1557
	.quad	.L1557
	.quad	.L1557
	.text
.L1555:
	.loc 1 7442 0
	movl	$1, %eax	#, D.24163
	jmp	.L1558	#
.L1557:
	.loc 1 7458 0
	movl	$0, %eax	#, D.24163
	jmp	.L1558	#
.L1554:
	.loc 1 7461 0
	movl	$__FUNCTION__.16369, %edx	#,
	movl	$7461, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1558:
	.loc 1 7465 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE158:
	.size	is_base_type, .-is_base_type
	.type	modified_type_die, @function
modified_type_die:
.LFB159:
	.loc 1 7476 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -72(%rbp)	# type, type
	movl	%esi, -76(%rbp)	# is_const_type, is_const_type
	movl	%edx, -80(%rbp)	# is_volatile_type, is_volatile_type
	movq	%rcx, -88(%rbp)	# context_die, context_die
	.loc 1 7477 0
	movq	-72(%rbp), %rax	# type, tmp92
	movzbl	16(%rax), %eax	# type_15(D)->common.code, D.24167
	movzbl	%al, %eax	# D.24167, tmp93
	movl	%eax, -52(%rbp)	# tmp93, code
	.loc 1 7478 0
	movq	$0, -48(%rbp)	#, mod_type_die
	.loc 1 7479 0
	movq	$0, -40(%rbp)	#, sub_die
	.loc 1 7480 0
	movq	$0, -32(%rbp)	#, item_type
	.loc 1 7482 0
	cmpl	$0, -52(%rbp)	#, code
	je	.L1560	#,
.LBB52:
	.loc 1 7490 0
	cmpl	$0, -76(%rbp)	#, is_const_type
	setne	%al	#, D.24168
	movzbl	%al, %edx	# D.24168, D.24169
	.loc 1 7492 0
	cmpl	$0, -80(%rbp)	#, is_volatile_type
	je	.L1561	#,
	.loc 1 7492 0 is_stmt 0 discriminator 1
	movl	$2, %eax	#, iftmp.407
	jmp	.L1562	#
.L1561:
	.loc 1 7492 0 discriminator 2
	movl	$0, %eax	#, iftmp.407
.L1562:
	.loc 1 7489 0 is_stmt 1
	orl	%eax, %edx	# iftmp.407, D.24169
	movq	-72(%rbp), %rax	# type, tmp94
	movl	%edx, %esi	# D.24169,
	movq	%rax, %rdi	# tmp94,
	call	get_qualified_type	#
	movq	%rax, -24(%rbp)	# tmp95, qualified_type
	.loc 1 7495 0
	cmpq	$0, -24(%rbp)	#, qualified_type
	je	.L1563	#,
	.loc 1 7497 0
	movq	-24(%rbp), %rax	# qualified_type, tmp96
	movq	%rax, %rdi	# tmp96,
	call	lookup_type_die	#
	movq	%rax, -48(%rbp)	# tmp97, mod_type_die
	.loc 1 7498 0
	cmpq	$0, -48(%rbp)	#, mod_type_die
	je	.L1563	#,
	.loc 1 7499 0
	movq	-48(%rbp), %rax	# mod_type_die, D.24166
	jmp	.L1564	#
.L1563:
	.loc 1 7503 0
	cmpq	$0, -24(%rbp)	#, qualified_type
	je	.L1565	#,
	.loc 1 7503 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# qualified_type, tmp98
	movq	96(%rax), %rax	# qualified_type_28->type.name, D.24170
	testq	%rax, %rax	# D.24170
	je	.L1565	#,
	.loc 1 7504 0 is_stmt 1
	movq	-24(%rbp), %rax	# qualified_type, tmp99
	movq	96(%rax), %rax	# qualified_type_28->type.name, D.24170
	movzbl	16(%rax), %eax	# _32->common.code, D.24167
	cmpb	$33, %al	#, D.24167
	jne	.L1565	#,
	.loc 1 7505 0
	movq	-24(%rbp), %rax	# qualified_type, tmp100
	movq	96(%rax), %rax	# qualified_type_28->type.name, D.24170
	movq	96(%rax), %rax	# _34->decl.result, D.24170
	testq	%rax, %rax	# D.24170
	je	.L1565	#,
.LBB53:
	.loc 1 7507 0
	movq	-24(%rbp), %rax	# qualified_type, tmp101
	movq	96(%rax), %rax	# qualified_type_28->type.name, tmp102
	movq	%rax, -16(%rbp)	# tmp102, type_name
	.loc 1 7508 0
	movq	-16(%rbp), %rax	# type_name, tmp103
	movq	8(%rax), %rax	# type_name_36->common.type, tmp104
	movq	%rax, -8(%rbp)	# tmp104, dtype
	.loc 1 7510 0
	movq	-24(%rbp), %rax	# qualified_type, tmp105
	cmpq	-8(%rbp), %rax	# dtype, tmp105
	jne	.L1566	#,
	.loc 1 7513 0
	movq	-88(%rbp), %rdx	# context_die, tmp106
	movq	-24(%rbp), %rax	# qualified_type, tmp107
	movq	%rdx, %rsi	# tmp106,
	movq	%rax, %rdi	# tmp107,
	call	gen_type_die	#
	.loc 1 7514 0
	movq	-24(%rbp), %rax	# qualified_type, tmp108
	movq	%rax, %rdi	# tmp108,
	call	lookup_type_die	#
	movq	%rax, -48(%rbp)	# tmp109, mod_type_die
	jmp	.L1565	#
.L1566:
	.loc 1 7516 0
	movq	-8(%rbp), %rax	# dtype, tmp110
	movzbl	17(%rax), %eax	# *dtype_37, tmp113
	shrb	$4, %al	#, D.24171
	andl	$1, %eax	#, D.24171
	movzbl	%al, %eax	# D.24171, D.24169
	cmpl	-76(%rbp), %eax	# is_const_type, D.24169
	jg	.L1567	#,
	.loc 1 7517 0
	movq	-8(%rbp), %rax	# dtype, tmp114
	movzbl	17(%rax), %eax	# *dtype_37, tmp117
	shrb	$3, %al	#, D.24171
	andl	$1, %eax	#, D.24171
	movzbl	%al, %eax	# D.24171, D.24169
	cmpl	-80(%rbp), %eax	# is_volatile_type, D.24169
	jle	.L1565	#,
.L1567:
	.loc 1 7521 0
	movq	-16(%rbp), %rax	# type_name, tmp118
	movq	96(%rax), %rax	# type_name_36->decl.result, D.24170
	movq	-88(%rbp), %rcx	# context_die, tmp119
	movl	-80(%rbp), %edx	# is_volatile_type, tmp120
	movl	-76(%rbp), %esi	# is_const_type, tmp121
	movq	%rax, %rdi	# D.24170,
	call	modified_type_die	#
	movq	%rax, -48(%rbp)	# tmp122, mod_type_die
.L1565:
.LBE53:
	.loc 1 7528 0
	cmpq	$0, -48(%rbp)	#, mod_type_die
	jne	.L1568	#,
	.loc 1 7531 0
	cmpl	$0, -76(%rbp)	#, is_const_type
	je	.L1569	#,
	.loc 1 7533 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.408
	movq	-72(%rbp), %rdx	# type, tmp123
	movq	%rax, %rsi	# comp_unit_die.408,
	movl	$38, %edi	#,
	call	new_die	#
	movq	%rax, -48(%rbp)	# tmp124, mod_type_die
	.loc 1 7534 0
	movq	-88(%rbp), %rcx	# context_die, tmp125
	movl	-80(%rbp), %edx	# is_volatile_type, tmp126
	movq	-72(%rbp), %rax	# type, tmp127
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp127,
	call	modified_type_die	#
	movq	%rax, -40(%rbp)	# tmp128, sub_die
	jmp	.L1568	#
.L1569:
	.loc 1 7536 0
	cmpl	$0, -80(%rbp)	#, is_volatile_type
	je	.L1570	#,
	.loc 1 7538 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.409
	movq	-72(%rbp), %rdx	# type, tmp129
	movq	%rax, %rsi	# comp_unit_die.409,
	movl	$53, %edi	#,
	call	new_die	#
	movq	%rax, -48(%rbp)	# tmp130, mod_type_die
	.loc 1 7539 0
	movq	-88(%rbp), %rdx	# context_die, tmp131
	movq	-72(%rbp), %rax	# type, tmp132
	movq	%rdx, %rcx	# tmp131,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp132,
	call	modified_type_die	#
	movq	%rax, -40(%rbp)	# tmp133, sub_die
	jmp	.L1568	#
.L1570:
	.loc 1 7541 0
	cmpl	$13, -52(%rbp)	#, code
	jne	.L1571	#,
	.loc 1 7543 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.410
	movq	-72(%rbp), %rdx	# type, tmp134
	movq	%rax, %rsi	# comp_unit_die.410,
	movl	$15, %edi	#,
	call	new_die	#
	movq	%rax, -48(%rbp)	# tmp135, mod_type_die
	.loc 1 7544 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.412
	andl	$33554432, %eax	#, D.24169
	testl	%eax, %eax	# D.24169
	je	.L1572	#,
	.loc 1 7544 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.411
	jmp	.L1573	#
.L1572:
	.loc 1 7544 0 discriminator 2
	movl	$4, %eax	#, iftmp.411
.L1573:
	.loc 1 7544 0 discriminator 1
	movq	-48(%rbp), %rcx	# mod_type_die, tmp136
	movq	%rax, %rdx	# iftmp.411,
	movl	$11, %esi	#,
	movq	%rcx, %rdi	# tmp136,
	call	add_AT_unsigned	#
	.loc 1 7548 0 is_stmt 1 discriminator 1
	movq	-72(%rbp), %rax	# type, tmp137
	movq	8(%rax), %rax	# type_15(D)->common.type, tmp138
	movq	%rax, -32(%rbp)	# tmp138, item_type
	jmp	.L1568	#
.L1571:
	.loc 1 7550 0
	cmpl	$15, -52(%rbp)	#, code
	jne	.L1574	#,
	.loc 1 7552 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.413
	movq	-72(%rbp), %rdx	# type, tmp139
	movq	%rax, %rsi	# comp_unit_die.413,
	movl	$16, %edi	#,
	call	new_die	#
	movq	%rax, -48(%rbp)	# tmp140, mod_type_die
	.loc 1 7553 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.415
	andl	$33554432, %eax	#, D.24169
	testl	%eax, %eax	# D.24169
	je	.L1575	#,
	.loc 1 7553 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.414
	jmp	.L1576	#
.L1575:
	.loc 1 7553 0 discriminator 2
	movl	$4, %eax	#, iftmp.414
.L1576:
	movq	-48(%rbp), %rcx	# mod_type_die, tmp141
	movq	%rax, %rdx	# iftmp.414,
	movl	$11, %esi	#,
	movq	%rcx, %rdi	# tmp141,
	call	add_AT_unsigned	#
	.loc 1 7557 0 is_stmt 1 discriminator 2
	movq	-72(%rbp), %rax	# type, tmp142
	movq	8(%rax), %rax	# type_15(D)->common.type, tmp143
	movq	%rax, -32(%rbp)	# tmp143, item_type
	jmp	.L1568	#
.L1574:
	.loc 1 7559 0
	movq	-72(%rbp), %rax	# type, tmp144
	movq	%rax, %rdi	# tmp144,
	call	is_base_type	#
	testl	%eax, %eax	# D.24169
	je	.L1577	#,
	.loc 1 7560 0
	movq	-72(%rbp), %rax	# type, tmp145
	movq	%rax, %rdi	# tmp145,
	call	base_type_die	#
	movq	%rax, -48(%rbp)	# tmp146, mod_type_die
	jmp	.L1568	#
.L1577:
	.loc 1 7563 0
	movq	-88(%rbp), %rdx	# context_die, tmp147
	movq	-72(%rbp), %rax	# type, tmp148
	movq	%rdx, %rsi	# tmp147,
	movq	%rax, %rdi	# tmp148,
	call	gen_type_die	#
	.loc 1 7571 0
	movq	-72(%rbp), %rax	# type, tmp149
	movq	%rax, %rdi	# tmp149,
	call	type_main_variant	#
	movq	%rax, %rdi	# D.24170,
	call	lookup_type_die	#
	movq	%rax, -48(%rbp)	# tmp150, mod_type_die
	.loc 1 7572 0
	cmpq	$0, -48(%rbp)	#, mod_type_die
	jne	.L1568	#,
	.loc 1 7573 0
	movl	$__FUNCTION__.16383, %edx	#,
	movl	$7573, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1568:
	.loc 1 7577 0
	movq	-24(%rbp), %rax	# qualified_type, tmp151
	movq	%rax, -72(%rbp)	# tmp151, type
.L1560:
.LBE52:
	.loc 1 7580 0
	cmpq	$0, -72(%rbp)	#, type
	je	.L1578	#,
	.loc 1 7581 0
	movq	-48(%rbp), %rdx	# mod_type_die, tmp152
	movq	-72(%rbp), %rax	# type, tmp153
	movq	%rdx, %rsi	# tmp152,
	movq	%rax, %rdi	# tmp153,
	call	equate_type_number_to_die	#
.L1578:
	.loc 1 7582 0
	cmpq	$0, -32(%rbp)	#, item_type
	je	.L1579	#,
	.loc 1 7589 0
	movq	-32(%rbp), %rax	# item_type, tmp154
	movzbl	17(%rax), %eax	# *item_type_10, tmp157
	shrb	$3, %al	#, D.24171
	andl	$1, %eax	#, D.24171
	.loc 1 7587 0
	movzbl	%al, %edx	# D.24171, D.24169
	.loc 1 7588 0
	movq	-32(%rbp), %rax	# item_type, tmp158
	movzbl	17(%rax), %eax	# *item_type_10, tmp161
	shrb	$4, %al	#, D.24171
	andl	$1, %eax	#, D.24171
	.loc 1 7587 0
	movzbl	%al, %esi	# D.24171, D.24169
	movq	-88(%rbp), %rcx	# context_die, tmp162
	movq	-32(%rbp), %rax	# item_type, tmp163
	movq	%rax, %rdi	# tmp163,
	call	modified_type_die	#
	movq	%rax, -40(%rbp)	# tmp164, sub_die
.L1579:
	.loc 1 7592 0
	cmpq	$0, -40(%rbp)	#, sub_die
	je	.L1580	#,
	.loc 1 7593 0
	movq	-40(%rbp), %rdx	# sub_die, tmp165
	movq	-48(%rbp), %rax	# mod_type_die, tmp166
	movl	$73, %esi	#,
	movq	%rax, %rdi	# tmp166,
	call	add_AT_die_ref	#
.L1580:
	.loc 1 7595 0
	movq	-48(%rbp), %rax	# mod_type_die, D.24166
.L1564:
	.loc 1 7596 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE159:
	.size	modified_type_die, .-modified_type_die
	.type	reg_number, @function
reg_number:
.LFB161:
	.loc 1 7613 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# rtl, rtl
	.loc 1 7614 0
	movq	-24(%rbp), %rax	# rtl, tmp66
	movl	8(%rax), %eax	# rtl_2(D)->fld[0].rtuint, tmp67
	movl	%eax, -4(%rbp)	# tmp67, regno
	.loc 1 7616 0
	cmpl	$52, -4(%rbp)	#, regno
	jbe	.L1582	#,
	.loc 1 7617 0
	movl	$__FUNCTION__.16391, %edx	#,
	movl	$7617, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1582:
	.loc 1 7619 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.417
	andl	$33554432, %eax	#, D.24172
	testl	%eax, %eax	# D.24172
	je	.L1583	#,
	.loc 1 7619 0 is_stmt 0 discriminator 1
	movl	-4(%rbp), %eax	# regno, tmp68
	movl	dbx64_register_map(,%rax,4), %eax	# dbx64_register_map, D.24172
	jmp	.L1584	#
.L1583:
	.loc 1 7619 0 discriminator 2
	movl	-4(%rbp), %eax	# regno, tmp69
	movl	svr4_dbx_register_map(,%rax,4), %eax	# svr4_dbx_register_map, D.24172
.L1584:
	.loc 1 7620 0 is_stmt 1 discriminator 3
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE161:
	.size	reg_number, .-reg_number
	.type	reg_loc_descriptor, @function
reg_loc_descriptor:
.LFB162:
	.loc 1 7628 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# rtl, rtl
	.loc 1 7629 0
	movq	$0, -8(%rbp)	#, loc_result
	.loc 1 7632 0
	movq	-24(%rbp), %rax	# rtl, tmp64
	movl	8(%rax), %eax	# rtl_4(D)->fld[0].rtuint, D.24175
	cmpl	$52, %eax	#, D.24175
	jbe	.L1587	#,
	.loc 1 7633 0
	movl	$0, %eax	#, D.24174
	jmp	.L1588	#
.L1587:
	.loc 1 7635 0
	movq	-24(%rbp), %rax	# rtl, tmp65
	movq	%rax, %rdi	# tmp65,
	call	reg_number	#
	movl	%eax, -12(%rbp)	# tmp66, reg
	.loc 1 7636 0
	cmpl	$31, -12(%rbp)	#, reg
	ja	.L1589	#,
	.loc 1 7637 0
	movl	-12(%rbp), %eax	# reg, tmp67
	addl	$80, %eax	#, D.24175
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	%eax, %edi	# D.24175,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp68, loc_result
	jmp	.L1590	#
.L1589:
	.loc 1 7639 0
	movl	-12(%rbp), %eax	# reg, D.24176
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.24176,
	movl	$144, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp69, loc_result
.L1590:
	.loc 1 7641 0
	movq	-8(%rbp), %rax	# loc_result, D.24174
.L1588:
	.loc 1 7642 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE162:
	.size	reg_loc_descriptor, .-reg_loc_descriptor
	.type	int_loc_descriptor, @function
int_loc_descriptor:
.LFB163:
	.loc 1 7649 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# i, i
	.loc 1 7654 0
	cmpq	$0, -24(%rbp)	#, i
	js	.L1592	#,
	.loc 1 7656 0
	cmpq	$31, -24(%rbp)	#, i
	jg	.L1593	#,
	.loc 1 7657 0
	movq	-24(%rbp), %rax	# i, tmp63
	addl	$48, %eax	#, tmp64
	movl	%eax, -4(%rbp)	# tmp64, op
	jmp	.L1598	#
.L1593:
	.loc 1 7658 0
	cmpq	$255, -24(%rbp)	#, i
	jg	.L1595	#,
	.loc 1 7659 0
	movl	$8, -4(%rbp)	#, op
	jmp	.L1598	#
.L1595:
	.loc 1 7660 0
	cmpq	$65535, -24(%rbp)	#, i
	jg	.L1596	#,
	.loc 1 7661 0
	movl	$10, -4(%rbp)	#, op
	jmp	.L1598	#
.L1596:
	.loc 1 7662 0
	movl	$4294967295, %eax	#, tmp65
	cmpq	%rax, -24(%rbp)	# tmp65, i
	jg	.L1597	#,
	.loc 1 7664 0
	movl	$12, -4(%rbp)	#, op
	jmp	.L1598	#
.L1597:
	.loc 1 7666 0
	movl	$16, -4(%rbp)	#, op
	jmp	.L1598	#
.L1592:
	.loc 1 7670 0
	cmpq	$-128, -24(%rbp)	#, i
	jl	.L1599	#,
	.loc 1 7671 0
	movl	$9, -4(%rbp)	#, op
	jmp	.L1598	#
.L1599:
	.loc 1 7672 0
	cmpq	$-32768, -24(%rbp)	#, i
	jl	.L1600	#,
	.loc 1 7673 0
	movl	$11, -4(%rbp)	#, op
	jmp	.L1598	#
.L1600:
	.loc 1 7674 0
	cmpq	$2147483647, -24(%rbp)	#, i
	jle	.L1601	#,
	.loc 1 7676 0
	movl	$13, -4(%rbp)	#, op
	jmp	.L1598	#
.L1601:
	.loc 1 7678 0
	movl	$17, -4(%rbp)	#, op
.L1598:
	.loc 1 7681 0
	movq	-24(%rbp), %rcx	# i, i.418
	movl	-4(%rbp), %eax	# op, tmp66
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# i.418,
	movl	%eax, %edi	# tmp66,
	call	new_loc_descr	#
	.loc 1 7682 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE163:
	.size	int_loc_descriptor, .-int_loc_descriptor
	.type	based_loc_descr, @function
based_loc_descr:
.LFB164:
	.loc 1 7690 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# reg, reg
	movq	%rsi, -32(%rbp)	# offset, offset
	.loc 1 7695 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.420
	andl	$33554432, %eax	#, D.24179
	testl	%eax, %eax	# D.24179
	je	.L1604	#,
	.loc 1 7695 0 is_stmt 0 discriminator 1
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.422
	testl	%eax, %eax	# frame_pointer_needed.422
	je	.L1605	#,
	movl	$6, %eax	#, iftmp.421
	jmp	.L1606	#
.L1605:
	.loc 1 7695 0 discriminator 2
	movl	$7, %eax	#, iftmp.421
.L1606:
	.loc 1 7695 0 discriminator 1
	cltq
	movl	dbx64_register_map(,%rax,4), %eax	# dbx64_register_map, D.24179
	jmp	.L1607	#
.L1604:
	.loc 1 7695 0 discriminator 2
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.424
	testl	%eax, %eax	# frame_pointer_needed.424
	je	.L1608	#,
	.loc 1 7695 0 discriminator 1
	movl	$6, %eax	#, iftmp.423
	jmp	.L1609	#
.L1608:
	.loc 1 7695 0 discriminator 2
	movl	$7, %eax	#, iftmp.423
.L1609:
	.loc 1 7695 0 discriminator 3
	cltq
	movl	svr4_dbx_register_map(,%rax,4), %eax	# svr4_dbx_register_map, D.24179
.L1607:
	movl	%eax, -12(%rbp)	# iftmp.419, fp_reg
	.loc 1 7699 0 is_stmt 1 discriminator 3
	movl	-20(%rbp), %eax	# reg, tmp77
	cmpl	-12(%rbp), %eax	# fp_reg, tmp77
	jne	.L1610	#,
	.loc 1 7700 0
	movq	-32(%rbp), %rax	# offset, offset.425
	movl	$0, %edx	#,
	movq	%rax, %rsi	# offset.425,
	movl	$145, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp78, loc_result
	jmp	.L1611	#
.L1610:
	.loc 1 7701 0
	cmpl	$31, -20(%rbp)	#, reg
	ja	.L1612	#,
	.loc 1 7702 0
	movq	-32(%rbp), %rax	# offset, offset.426
	movl	-20(%rbp), %edx	# reg, tmp79
	leal	112(%rdx), %ecx	#, D.24180
	movl	$0, %edx	#,
	movq	%rax, %rsi	# offset.426,
	movl	%ecx, %edi	# D.24180,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp80, loc_result
	jmp	.L1611	#
.L1612:
	.loc 1 7704 0
	movq	-32(%rbp), %rdx	# offset, offset.427
	movl	-20(%rbp), %eax	# reg, D.24181
	movq	%rax, %rsi	# D.24181,
	movl	$146, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp81, loc_result
.L1611:
	.loc 1 7706 0
	movq	-8(%rbp), %rax	# loc_result, D.24182
	.loc 1 7707 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE164:
	.size	based_loc_descr, .-based_loc_descr
	.type	is_based_loc, @function
is_based_loc:
.LFB165:
	.loc 1 7714 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# rtl, rtl
	.loc 1 7715 0
	movq	-8(%rbp), %rax	# rtl, tmp69
	movzwl	(%rax), %eax	# rtl_2(D)->code, D.24183
	.loc 1 7716 0
	cmpw	$75, %ax	#, D.24183
	jne	.L1615	#,
	.loc 1 7716 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# rtl, tmp70
	movq	8(%rax), %rax	# rtl_2(D)->fld[0].rtx, D.24184
	movzwl	(%rax), %eax	# _4->code, D.24183
	cmpw	$61, %ax	#, D.24183
	jne	.L1615	#,
	.loc 1 7717 0 is_stmt 1
	movq	-8(%rbp), %rax	# rtl, tmp71
	movq	8(%rax), %rax	# rtl_2(D)->fld[0].rtx, D.24184
	movl	8(%rax), %eax	# _6->fld[0].rtuint, D.24185
	cmpl	$52, %eax	#, D.24185
	ja	.L1615	#,
	.loc 1 7718 0
	movq	-8(%rbp), %rax	# rtl, tmp72
	movq	16(%rax), %rax	# rtl_2(D)->fld[1].rtx, D.24184
	movzwl	(%rax), %eax	# _8->code, D.24183
	cmpw	$54, %ax	#, D.24183
	jne	.L1615	#,
	.loc 1 7716 0
	movl	$1, %eax	#, iftmp.450
	jmp	.L1616	#
.L1615:
	.loc 1 7716 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.450
.L1616:
	.loc 1 7719 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE165:
	.size	is_based_loc, .-is_based_loc
	.type	mem_loc_descriptor, @function
mem_loc_descriptor:
.LFB166:
	.loc 1 7740 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# rtl, rtl
	movl	%esi, -76(%rbp)	# mode, mode
	.loc 1 7741 0
	movq	$0, -48(%rbp)	#, mem_loc_result
	.loc 1 7749 0
	movq	-72(%rbp), %rax	# rtl, tmp136
	movq	%rax, %rdi	# tmp136,
	call	i386_simplify_dwarf_addr	#
	movq	%rax, -72(%rbp)	# tmp137, rtl
	.loc 1 7752 0
	movq	-72(%rbp), %rax	# rtl, tmp138
	movzwl	(%rax), %eax	# rtl_8->code, D.24188
	movzwl	%ax, %eax	# D.24188, D.24189
	subl	$54, %eax	#, tmp139
	cmpl	$47, %eax	#, tmp139
	ja	.L1619	#,
	movl	%eax, %eax	# tmp139, tmp140
	movq	.L1621(,%rax,8), %rax	#, tmp141
	jmp	*%rax	# tmp141
	.section	.rodata
	.align 8
	.align 4
.L1621:
	.quad	.L1620
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1622
	.quad	.L1619
	.quad	.L1619
	.quad	.L1623
	.quad	.L1619
	.quad	.L1624
	.quad	.L1619
	.quad	.L1619
	.quad	.L1625
	.quad	.L1622
	.quad	.L1622
	.quad	.L1619
	.quad	.L1626
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1627
	.quad	.L1619
	.quad	.L1619
	.quad	.L1628
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1619
	.quad	.L1629
	.quad	.L1629
	.quad	.L1624
	.quad	.L1624
	.quad	.L1630
	.quad	.L1624
	.text
.L1624:
	.loc 1 7768 0
	movq	-72(%rbp), %rax	# rtl, tmp142
	movq	8(%rax), %rax	# rtl_8->fld[0].rtx, tmp143
	movq	%rax, -72(%rbp)	# tmp143, rtl
.L1623:
	.loc 1 7786 0
	movq	-72(%rbp), %rax	# rtl, tmp144
	movl	8(%rax), %eax	# rtl_1->fld[0].rtuint, D.24189
	cmpl	$52, %eax	#, D.24189
	ja	.L1631	#,
	.loc 1 7787 0
	movq	-72(%rbp), %rax	# rtl, tmp145
	movq	%rax, %rdi	# tmp145,
	call	reg_number	#
	movl	$0, %esi	#,
	movl	%eax, %edi	# D.24189,
	call	based_loc_descr	#
	movq	%rax, -48(%rbp)	# mem_loc_result.428, mem_loc_result
	.loc 1 7788 0
	jmp	.L1632	#
.L1631:
	jmp	.L1632	#
.L1625:
	.loc 1 7791 0
	movq	-72(%rbp), %rax	# rtl, tmp146
	movzbl	2(%rax), %eax	# rtl_8->mode, D.24190
	movzbl	%al, %edx	# D.24190, D.24191
	movq	-72(%rbp), %rax	# rtl, tmp147
	movq	8(%rax), %rax	# rtl_8->fld[0].rtx, D.24192
	movl	%edx, %esi	# D.24191,
	movq	%rax, %rdi	# D.24192,
	call	mem_loc_descriptor	#
	movq	%rax, -48(%rbp)	# mem_loc_result.429, mem_loc_result
	.loc 1 7792 0
	movq	-48(%rbp), %rax	# mem_loc_result, mem_loc_result.430
	testq	%rax, %rax	# mem_loc_result.430
	je	.L1633	#,
	.loc 1 7793 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$6, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24193
	leaq	-48(%rbp), %rax	#, tmp148
	movq	%rdx, %rsi	# D.24193,
	movq	%rax, %rdi	# tmp148,
	call	add_loc_descr	#
	.loc 1 7794 0
	jmp	.L1632	#
.L1633:
	jmp	.L1632	#
.L1622:
	.loc 1 7804 0
	movq	-72(%rbp), %rax	# rtl, tmp149
	movzwl	(%rax), %eax	# rtl_8->code, D.24188
	cmpw	$68, %ax	#, D.24188
	jne	.L1634	#,
	.loc 1 7804 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# rtl, tmp150
	movzbl	3(%rax), %eax	# *rtl_8, D.24190
	andl	$4, %eax	#, D.24190
	testb	%al, %al	# D.24190
	je	.L1634	#,
.LBB54:
	.loc 1 7807 0 is_stmt 1
	leaq	-49(%rbp), %rdx	#, tmp151
	movq	-72(%rbp), %rax	# rtl, tmp152
	movq	%rdx, %rsi	# tmp151,
	movq	%rax, %rdi	# tmp152,
	call	get_pool_constant_mark	#
	movq	%rax, -40(%rbp)	# tmp153, tmp
	.loc 1 7809 0
	movq	-40(%rbp), %rax	# tmp, tmp154
	movzwl	(%rax), %eax	# tmp_24->code, D.24188
	cmpw	$68, %ax	#, D.24188
	jne	.L1635	#,
	.loc 1 7811 0
	movq	-40(%rbp), %rax	# tmp, tmp155
	movq	%rax, -72(%rbp)	# tmp155, rtl
	.loc 1 7812 0
	movq	-40(%rbp), %rax	# tmp, tmp156
	movzbl	3(%rax), %eax	# *tmp_24, D.24190
	andl	$4, %eax	#, D.24190
	testb	%al, %al	# D.24190
	je	.L1636	#,
	.loc 1 7813 0
	leaq	-49(%rbp), %rdx	#, tmp157
	movq	-40(%rbp), %rax	# tmp, tmp158
	movq	%rdx, %rsi	# tmp157,
	movq	%rax, %rdi	# tmp158,
	call	get_pool_constant_mark	#
	jmp	.L1635	#
.L1636:
	.loc 1 7815 0
	movb	$1, -49(%rbp)	#, marked
.L1635:
	.loc 1 7822 0
	movzbl	-49(%rbp), %eax	# marked, marked.431
	xorl	$1, %eax	#, D.24194
	testb	%al, %al	# D.24194
	je	.L1634	#,
	.loc 1 7823 0
	movl	$0, %eax	#, D.24187
	jmp	.L1647	#
.L1634:
.LBE54:
	.loc 1 7826 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -48(%rbp)	# mem_loc_result.432, mem_loc_result
	.loc 1 7827 0
	movq	-48(%rbp), %rax	# mem_loc_result, mem_loc_result.433
	movl	$0, 16(%rax)	#, mem_loc_result.433_33->dw_loc_oprnd1.val_class
	.loc 1 7828 0
	movq	-48(%rbp), %rax	# mem_loc_result, mem_loc_result.434
	movq	-72(%rbp), %rdx	# rtl, tmp159
	movq	%rdx, 24(%rax)	# tmp159, mem_loc_result.434_34->dw_loc_oprnd1.v.val_addr
	.loc 1 7829 0
	movq	used_rtx_varray(%rip), %rax	# used_rtx_varray, used_rtx_varray.435
	movq	8(%rax), %rdx	# used_rtx_varray.435_35->elements_used, D.24195
	movq	used_rtx_varray(%rip), %rax	# used_rtx_varray, used_rtx_varray.436
	movq	(%rax), %rax	# used_rtx_varray.436_37->num_elements, D.24195
	cmpq	%rax, %rdx	# D.24195, D.24195
	jb	.L1639	#,
	.loc 1 7829 0 is_stmt 0 discriminator 1
	movq	used_rtx_varray(%rip), %rax	# used_rtx_varray, used_rtx_varray.437
	movq	(%rax), %rax	# used_rtx_varray.437_39->num_elements, D.24195
	leaq	(%rax,%rax), %rdx	#, D.24195
	movq	used_rtx_varray(%rip), %rax	# used_rtx_varray, used_rtx_varray.438
	movq	%rdx, %rsi	# D.24195,
	movq	%rax, %rdi	# used_rtx_varray.438,
	call	varray_grow	#
	movq	%rax, used_rtx_varray(%rip)	# used_rtx_varray.439, used_rtx_varray
.L1639:
	.loc 1 7829 0 discriminator 2
	movq	used_rtx_varray(%rip), %rcx	# used_rtx_varray, used_rtx_varray.440
	movq	used_rtx_varray(%rip), %rax	# used_rtx_varray, used_rtx_varray.441
	movq	8(%rax), %rdx	# used_rtx_varray.441_45->elements_used, D.24195
	leaq	1(%rdx), %rsi	#, D.24195
	movq	%rsi, 8(%rax)	# D.24195, used_rtx_varray.441_45->elements_used
	addq	$4, %rdx	#, tmp160
	movq	-72(%rbp), %rax	# rtl, tmp161
	movq	%rax, (%rcx,%rdx,8)	# tmp161, used_rtx_varray.440_44->data.rtx
	.loc 1 7830 0 is_stmt 1 discriminator 2
	jmp	.L1632	#
.L1630:
	.loc 1 7835 0
	movq	-72(%rbp), %rax	# rtl, tmp162
	movq	16(%rax), %rax	# rtl_8->fld[1].rtx, tmp163
	movq	%rax, -72(%rbp)	# tmp163, rtl
	.loc 1 7836 0
	jmp	.L1627	#
.L1629:
	.loc 1 7842 0
	movq	-72(%rbp), %rax	# rtl, tmp164
	movzwl	(%rax), %eax	# rtl_8->code, D.24188
	cmpw	$97, %ax	#, D.24188
	jne	.L1640	#,
	.loc 1 7842 0 is_stmt 0 discriminator 1
	movl	-76(%rbp), %eax	# mode, mode.443
	cltq
	movzbl	mode_unit_size(%rax), %eax	# mode_unit_size, D.24190
	movzbl	%al, %eax	# D.24190, iftmp.442
	jmp	.L1641	#
.L1640:
	.loc 1 7842 0 discriminator 2
	movl	-76(%rbp), %eax	# mode, mode.444
	cltq
	movzbl	mode_unit_size(%rax), %eax	# mode_unit_size, D.24190
	movzbl	%al, %eax	# D.24190, D.24196
	negl	%eax	# D.24196
	cltq
.L1641:
	.loc 1 7842 0 discriminator 3
	movq	%rax, %rsi	# iftmp.442,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rcx	#, D.24192
	movq	-72(%rbp), %rax	# rtl, tmp167
	movq	8(%rax), %rdx	# rtl_8->fld[0].rtx, D.24192
	movl	word_mode(%rip), %eax	# word_mode, word_mode.445
	movl	%eax, %esi	# word_mode.445,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -72(%rbp)	# tmp168, rtl
.L1627:
	.loc 1 7851 0 is_stmt 1
	movq	-72(%rbp), %rax	# rtl, tmp169
	movq	%rax, %rdi	# tmp169,
	call	is_based_loc	#
	testl	%eax, %eax	# D.24196
	je	.L1642	#,
	.loc 1 7853 0
	movq	-72(%rbp), %rax	# rtl, tmp170
	movq	16(%rax), %rax	# rtl_4->fld[1].rtx, D.24192
	.loc 1 7852 0
	movq	8(%rax), %rbx	# _65->fld[0].rtwint, D.24197
	movq	-72(%rbp), %rax	# rtl, tmp171
	movq	8(%rax), %rax	# rtl_4->fld[0].rtx, D.24192
	movq	%rax, %rdi	# D.24192,
	call	reg_number	#
	movq	%rbx, %rsi	# D.24197,
	movl	%eax, %edi	# D.24189,
	call	based_loc_descr	#
	movq	%rax, -48(%rbp)	# mem_loc_result.446, mem_loc_result
	jmp	.L1643	#
.L1642:
	.loc 1 7856 0
	movq	-72(%rbp), %rax	# rtl, tmp172
	movq	8(%rax), %rax	# rtl_4->fld[0].rtx, D.24192
	movl	-76(%rbp), %edx	# mode, tmp173
	movl	%edx, %esi	# tmp173,
	movq	%rax, %rdi	# D.24192,
	call	mem_loc_descriptor	#
	movq	%rax, -48(%rbp)	# mem_loc_result.447, mem_loc_result
	.loc 1 7857 0
	movq	-48(%rbp), %rax	# mem_loc_result, mem_loc_result.448
	testq	%rax, %rax	# mem_loc_result.448
	jne	.L1644	#,
	.loc 1 7858 0
	jmp	.L1632	#
.L1644:
	.loc 1 7860 0
	movq	-72(%rbp), %rax	# rtl, tmp174
	movq	16(%rax), %rax	# rtl_4->fld[1].rtx, D.24192
	movzwl	(%rax), %eax	# _73->code, D.24188
	cmpw	$54, %ax	#, D.24188
	jne	.L1645	#,
	.loc 1 7861 0
	movq	-72(%rbp), %rax	# rtl, tmp175
	movq	16(%rax), %rax	# rtl_4->fld[1].rtx, D.24192
	movq	8(%rax), %rax	# _75->fld[0].rtwint, D.24197
	testq	%rax, %rax	# D.24197
	js	.L1645	#,
	.loc 1 7864 0
	movq	-72(%rbp), %rax	# rtl, tmp176
	movq	16(%rax), %rax	# rtl_4->fld[1].rtx, D.24192
	movq	8(%rax), %rax	# _77->fld[0].rtwint, D.24197
	.loc 1 7862 0
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.24195,
	movl	$35, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24193
	leaq	-48(%rbp), %rax	#, tmp177
	movq	%rdx, %rsi	# D.24193,
	movq	%rax, %rdi	# tmp177,
	call	add_loc_descr	#
	jmp	.L1643	#
.L1645:
	.loc 1 7867 0
	movq	-72(%rbp), %rax	# rtl, tmp178
	movq	16(%rax), %rax	# rtl_4->fld[1].rtx, D.24192
	movl	-76(%rbp), %edx	# mode, tmp179
	movl	%edx, %esi	# tmp179,
	movq	%rax, %rdi	# D.24192,
	call	mem_loc_descriptor	#
	movq	%rax, %rdx	#, D.24193
	leaq	-48(%rbp), %rax	#, tmp180
	movq	%rdx, %rsi	# D.24193,
	movq	%rax, %rdi	# tmp180,
	call	add_loc_descr	#
	.loc 1 7869 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$34, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24193
	leaq	-48(%rbp), %rax	#, tmp181
	movq	%rdx, %rsi	# D.24193,
	movq	%rax, %rdi	# tmp181,
	call	add_loc_descr	#
	.loc 1 7873 0
	jmp	.L1632	#
.L1643:
	jmp	.L1632	#
.L1628:
.LBB55:
	.loc 1 7879 0
	movq	-72(%rbp), %rax	# rtl, tmp182
	movq	8(%rax), %rax	# rtl_8->fld[0].rtx, D.24192
	movl	-76(%rbp), %edx	# mode, tmp183
	movl	%edx, %esi	# tmp183,
	movq	%rax, %rdi	# D.24192,
	call	mem_loc_descriptor	#
	movq	%rax, -32(%rbp)	# tmp184, op0
	.loc 1 7880 0
	movq	-72(%rbp), %rax	# rtl, tmp185
	movq	16(%rax), %rax	# rtl_8->fld[1].rtx, D.24192
	movl	-76(%rbp), %edx	# mode, tmp186
	movl	%edx, %esi	# tmp186,
	movq	%rax, %rdi	# D.24192,
	call	mem_loc_descriptor	#
	movq	%rax, -24(%rbp)	# tmp187, op1
	.loc 1 7882 0
	cmpq	$0, -32(%rbp)	#, op0
	je	.L1632	#,
	.loc 1 7882 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, op1
	je	.L1632	#,
	.loc 1 7885 0 is_stmt 1
	movq	-32(%rbp), %rax	# op0, tmp188
	movq	%rax, -48(%rbp)	# tmp188, mem_loc_result
	.loc 1 7886 0
	movq	-24(%rbp), %rdx	# op1, tmp189
	leaq	-48(%rbp), %rax	#, tmp190
	movq	%rdx, %rsi	# tmp189,
	movq	%rax, %rdi	# tmp190,
	call	add_loc_descr	#
	.loc 1 7887 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$30, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24193
	leaq	-48(%rbp), %rax	#, tmp191
	movq	%rdx, %rsi	# D.24193,
	movq	%rax, %rdi	# tmp191,
	call	add_loc_descr	#
	.loc 1 7888 0
	jmp	.L1632	#
.L1620:
.LBE55:
	.loc 1 7892 0
	movq	-72(%rbp), %rax	# rtl, tmp192
	movq	8(%rax), %rax	# rtl_8->fld[0].rtwint, D.24197
	movq	%rax, %rdi	# D.24197,
	call	int_loc_descriptor	#
	movq	%rax, -48(%rbp)	# mem_loc_result.449, mem_loc_result
	.loc 1 7893 0
	jmp	.L1632	#
.L1626:
	.loc 1 7898 0
	movq	-72(%rbp), %rax	# rtl, tmp193
	movq	8(%rax), %rax	# rtl_8->fld[0].rtx, D.24192
	movzwl	(%rax), %eax	# _91->code, D.24188
	cmpw	$66, %ax	#, D.24188
	jne	.L1646	#,
	.loc 1 7899 0
	movq	-72(%rbp), %rax	# rtl, tmp194
	movq	8(%rax), %rax	# rtl_8->fld[0].rtx, D.24192
	movq	8(%rax), %rax	# _93->fld[0].rtx, D.24192
	movl	-76(%rbp), %edx	# mode, tmp195
	movl	%edx, %esi	# tmp195,
	movq	%rax, %rdi	# D.24192,
	call	mem_loc_descriptor	#
	jmp	.L1647	#
.L1646:
	.loc 1 7901 0
	movl	$0, %eax	#, D.24187
	jmp	.L1647	#
.L1619:
	.loc 1 7904 0
	movl	$__FUNCTION__.16438, %edx	#,
	movl	$7904, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1632:
	.loc 1 7907 0
	movq	-48(%rbp), %rax	# mem_loc_result, D.24187
.L1647:
	.loc 1 7908 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE166:
	.size	mem_loc_descriptor, .-mem_loc_descriptor
	.type	concat_loc_descriptor, @function
concat_loc_descriptor:
.LFB167:
	.loc 1 7916 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# x0, x0
	movq	%rsi, -48(%rbp)	# x1, x1
	.loc 1 7917 0
	movq	$0, -24(%rbp)	#, cc_loc_result
	.loc 1 7918 0
	movq	-40(%rbp), %rax	# x0, tmp71
	movq	%rax, %rdi	# tmp71,
	call	loc_descriptor	#
	movq	%rax, -16(%rbp)	# tmp72, x0_ref
	.loc 1 7919 0
	movq	-48(%rbp), %rax	# x1, tmp73
	movq	%rax, %rdi	# tmp73,
	call	loc_descriptor	#
	movq	%rax, -8(%rbp)	# tmp74, x1_ref
	.loc 1 7921 0
	cmpq	$0, -16(%rbp)	#, x0_ref
	je	.L1649	#,
	.loc 1 7921 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, x1_ref
	jne	.L1650	#,
.L1649:
	.loc 1 7922 0 is_stmt 1
	movl	$0, %eax	#, D.24198
	jmp	.L1652	#
.L1650:
	.loc 1 7924 0
	movq	-16(%rbp), %rax	# x0_ref, tmp75
	movq	%rax, -24(%rbp)	# tmp75, cc_loc_result
	.loc 1 7927 0
	movq	-40(%rbp), %rax	# x0, tmp76
	movzbl	2(%rax), %eax	# x0_2(D)->mode, D.24199
	movzbl	%al, %eax	# D.24199, D.24200
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24199
	.loc 1 7925 0
	movzbl	%al, %eax	# D.24199, D.24201
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.24201,
	movl	$147, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24202
	leaq	-24(%rbp), %rax	#, tmp78
	movq	%rdx, %rsi	# D.24202,
	movq	%rax, %rdi	# tmp78,
	call	add_loc_descr	#
	.loc 1 7929 0
	movq	-8(%rbp), %rdx	# x1_ref, tmp79
	leaq	-24(%rbp), %rax	#, tmp80
	movq	%rdx, %rsi	# tmp79,
	movq	%rax, %rdi	# tmp80,
	call	add_loc_descr	#
	.loc 1 7932 0
	movq	-48(%rbp), %rax	# x1, tmp81
	movzbl	2(%rax), %eax	# x1_4(D)->mode, D.24199
	movzbl	%al, %eax	# D.24199, D.24200
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24199
	.loc 1 7930 0
	movzbl	%al, %eax	# D.24199, D.24201
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.24201,
	movl	$147, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24202
	leaq	-24(%rbp), %rax	#, tmp83
	movq	%rdx, %rsi	# D.24202,
	movq	%rax, %rdi	# tmp83,
	call	add_loc_descr	#
	.loc 1 7934 0
	movq	-24(%rbp), %rax	# cc_loc_result, D.24198
.L1652:
	.loc 1 7935 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE167:
	.size	concat_loc_descriptor, .-concat_loc_descriptor
	.type	loc_descriptor, @function
loc_descriptor:
.LFB168:
	.loc 1 7948 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# rtl, rtl
	.loc 1 7949 0
	movq	$0, -8(%rbp)	#, loc_result
	.loc 1 7951 0
	movq	-24(%rbp), %rax	# rtl, tmp68
	movzwl	(%rax), %eax	# rtl_4(D)->code, D.24203
	movzwl	%ax, %eax	# D.24203, D.24204
	cmpl	$63, %eax	#, D.24204
	je	.L1655	#,
	cmpl	$63, %eax	#, D.24204
	ja	.L1656	#,
	cmpl	$61, %eax	#, D.24204
	je	.L1657	#,
	jmp	.L1654	#
.L1656:
	cmpl	$65, %eax	#, D.24204
	je	.L1658	#,
	cmpl	$66, %eax	#, D.24204
	je	.L1659	#,
	jmp	.L1654	#
.L1655:
	.loc 1 7959 0
	movq	-24(%rbp), %rax	# rtl, tmp69
	movq	8(%rax), %rax	# rtl_4(D)->fld[0].rtx, tmp70
	movq	%rax, -24(%rbp)	# tmp70, rtl
.L1657:
	.loc 1 7964 0
	movq	-24(%rbp), %rax	# rtl, tmp71
	movq	%rax, %rdi	# tmp71,
	call	reg_loc_descriptor	#
	movq	%rax, -8(%rbp)	# tmp72, loc_result
	.loc 1 7965 0
	jmp	.L1660	#
.L1659:
	.loc 1 7968 0
	movq	-24(%rbp), %rax	# rtl, tmp73
	movzbl	2(%rax), %eax	# rtl_4(D)->mode, D.24205
	movzbl	%al, %edx	# D.24205, D.24206
	movq	-24(%rbp), %rax	# rtl, tmp74
	movq	8(%rax), %rax	# rtl_4(D)->fld[0].rtx, D.24207
	movl	%edx, %esi	# D.24206,
	movq	%rax, %rdi	# D.24207,
	call	mem_loc_descriptor	#
	movq	%rax, -8(%rbp)	# tmp75, loc_result
	.loc 1 7969 0
	jmp	.L1660	#
.L1658:
	.loc 1 7972 0
	movq	-24(%rbp), %rax	# rtl, tmp76
	movq	16(%rax), %rdx	# rtl_4(D)->fld[1].rtx, D.24207
	movq	-24(%rbp), %rax	# rtl, tmp77
	movq	8(%rax), %rax	# rtl_4(D)->fld[0].rtx, D.24207
	movq	%rdx, %rsi	# D.24207,
	movq	%rax, %rdi	# D.24207,
	call	concat_loc_descriptor	#
	movq	%rax, -8(%rbp)	# tmp78, loc_result
	.loc 1 7973 0
	jmp	.L1660	#
.L1654:
	.loc 1 7976 0
	movl	$__FUNCTION__.16456, %edx	#,
	movl	$7976, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1660:
	.loc 1 7979 0
	movq	-8(%rbp), %rax	# loc_result, D.24208
	.loc 1 7980 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE168:
	.size	loc_descriptor, .-loc_descriptor
	.type	loc_descriptor_from_tree, @function
loc_descriptor_from_tree:
.LFB169:
	.loc 1 7991 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$176, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -168(%rbp)	# loc, loc
	movl	%esi, -172(%rbp)	# addressp, addressp
	.loc 1 7993 0
	movl	$0, -140(%rbp)	#, indirect_p
	.loc 1 7994 0
	movq	-168(%rbp), %rax	# loc, tmp171
	movq	8(%rax), %rax	# loc_19(D)->common.type, D.24211
	movzbl	17(%rax), %eax	# *_20, tmp174
	shrb	$5, %al	#, D.24212
	andl	$1, %eax	#, D.24212
	movzbl	%al, %eax	# D.24212, unsignedp.451
	movl	%eax, -152(%rbp)	# unsignedp.451, unsignedp
	.loc 1 8001 0
	movq	-168(%rbp), %rax	# loc, tmp175
	movzbl	16(%rax), %eax	# loc_19(D)->common.code, D.24213
	movzbl	%al, %eax	# D.24213, D.24214
	cmpl	$121, %eax	#, D.24214
	ja	.L1663	#,
	movl	%eax, %eax	# D.24214, tmp176
	movq	.L1665(,%rax,8), %rax	#, tmp177
	jmp	*%rax	# tmp177
	.section	.rodata
	.align 8
	.align 4
.L1665:
	.quad	.L1664
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1666
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1667
	.quad	.L1667
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1668
	.quad	.L1668
	.quad	.L1669
	.quad	.L1663
	.quad	.L1668
	.quad	.L1668
	.quad	.L1663
	.quad	.L1663
	.quad	.L1670
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1671
	.quad	.L1663
	.quad	.L1672
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1673
	.quad	.L1673
	.quad	.L1674
	.quad	.L1675
	.quad	.L1676
	.quad	.L1677
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1678
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1679
	.quad	.L1663
	.quad	.L1680
	.quad	.L1681
	.quad	.L1663
	.quad	.L1682
	.quad	.L1683
	.quad	.L1663
	.quad	.L1663
	.quad	.L1684
	.quad	.L1685
	.quad	.L1686
	.quad	.L1663
	.quad	.L1687
	.quad	.L1686
	.quad	.L1684
	.quad	.L1686
	.quad	.L1684
	.quad	.L1685
	.quad	.L1687
	.quad	.L1688
	.quad	.L1689
	.quad	.L1690
	.quad	.L1691
	.quad	.L1692
	.quad	.L1693
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1663
	.quad	.L1694
	.quad	.L1694
	.quad	.L1694
	.quad	.L1694
	.quad	.L1694
	.quad	.L1663
	.quad	.L1663
	.quad	.L1695
	.text
.L1664:
	.loc 1 8004 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1673:
	.loc 1 8012 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1672:
	.loc 1 8015 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1695:
	.loc 1 8020 0
	movq	-168(%rbp), %rax	# loc, tmp178
	movq	32(%rax), %rax	# loc_19(D)->exp.operands, tmp179
	movq	%rax, -168(%rbp)	# tmp179, loc
	jmp	.L1697	#
.L1698:
	.loc 1 8025 0
	movq	-168(%rbp), %rax	# loc, tmp180
	movq	32(%rax), %rax	# loc_1->exp.operands, tmp181
	movq	%rax, -168(%rbp)	# tmp181, loc
.L1697:
	.loc 1 8021 0 discriminator 1
	movq	-168(%rbp), %rax	# loc, tmp182
	movzbl	16(%rax), %eax	# loc_1->common.code, D.24213
	.loc 1 8020 0 discriminator 1
	cmpb	$114, %al	#, D.24213
	je	.L1698	#,
	.loc 1 8021 0
	movq	-168(%rbp), %rax	# loc, tmp183
	movzbl	16(%rax), %eax	# loc_1->common.code, D.24213
	cmpb	$115, %al	#, D.24213
	je	.L1698	#,
	.loc 1 8022 0
	movq	-168(%rbp), %rax	# loc, tmp184
	movzbl	16(%rax), %eax	# loc_1->common.code, D.24213
	cmpb	$116, %al	#, D.24213
	je	.L1698	#,
	.loc 1 8023 0
	movq	-168(%rbp), %rax	# loc, tmp185
	movzbl	16(%rax), %eax	# loc_1->common.code, D.24213
	cmpb	$117, %al	#, D.24213
	je	.L1698	#,
	.loc 1 8024 0
	movq	-168(%rbp), %rax	# loc, tmp186
	movzbl	16(%rax), %eax	# loc_1->common.code, D.24213
	cmpb	$118, %al	#, D.24213
	je	.L1698	#,
	.loc 1 8028 0
	movq	-168(%rbp), %rax	# loc, tmp187
	movzbl	16(%rax), %eax	# loc_1->common.code, D.24213
	.loc 1 8030 0
	cmpb	$41, %al	#, D.24213
	jne	.L1699	#,
	.loc 1 8029 0
	movq	-168(%rbp), %rax	# loc, tmp188
	movq	32(%rax), %rax	# loc_1->exp.operands, D.24211
	.loc 1 8030 0
	movl	-172(%rbp), %edx	# addressp, tmp189
	movl	%edx, %esi	# tmp189,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	jmp	.L1700	#
.L1699:
	.loc 1 8030 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.452
.L1700:
	.loc 1 8028 0 is_stmt 1
	jmp	.L1742	#
.L1667:
.LBB56:
	.loc 1 8035 0
	movq	-168(%rbp), %rax	# loc, tmp190
	movq	%rax, %rdi	# tmp190,
	call	rtl_for_decl_location	#
	movq	%rax, -96(%rbp)	# tmp191, rtl
	.loc 1 8037 0
	cmpq	$0, -96(%rbp)	#, rtl
	jne	.L1701	#,
	.loc 1 8038 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1701:
	.loc 1 8039 0
	movq	-96(%rbp), %rax	# rtl, tmp192
	movzwl	(%rax), %eax	# rtl_41->code, D.24215
	cmpw	$67, %ax	#, D.24215
	je	.L1702	#,
	.loc 1 8039 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# rtl, tmp193
	movzwl	(%rax), %eax	# rtl_41->code, D.24215
	cmpw	$68, %ax	#, D.24215
	je	.L1702	#,
	movq	-96(%rbp), %rax	# rtl, tmp194
	movzwl	(%rax), %eax	# rtl_41->code, D.24215
	cmpw	$54, %ax	#, D.24215
	je	.L1702	#,
	movq	-96(%rbp), %rax	# rtl, tmp195
	movzwl	(%rax), %eax	# rtl_41->code, D.24215
	cmpw	$55, %ax	#, D.24215
	je	.L1702	#,
	movq	-96(%rbp), %rax	# rtl, tmp196
	movzwl	(%rax), %eax	# rtl_41->code, D.24215
	cmpw	$58, %ax	#, D.24215
	je	.L1702	#,
	movq	-96(%rbp), %rax	# rtl, tmp197
	movzwl	(%rax), %eax	# rtl_41->code, D.24215
	cmpw	$134, %ax	#, D.24215
	je	.L1702	#,
	movq	-96(%rbp), %rax	# rtl, tmp198
	movzwl	(%rax), %eax	# rtl_41->code, D.24215
	cmpw	$56, %ax	#, D.24215
	je	.L1702	#,
	movq	-96(%rbp), %rax	# rtl, tmp199
	movzwl	(%rax), %eax	# rtl_41->code, D.24215
	cmpw	$140, %ax	#, D.24215
	jne	.L1703	#,
.L1702:
	.loc 1 8041 0 is_stmt 1
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$3, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -128(%rbp)	# ret.453, ret
	.loc 1 8042 0
	movq	-128(%rbp), %rax	# ret, ret.454
	movl	$0, 16(%rax)	#, ret.454_58->dw_loc_oprnd1.val_class
	.loc 1 8043 0
	movq	-128(%rbp), %rax	# ret, ret.455
	movq	-96(%rbp), %rdx	# rtl, tmp200
	movq	%rdx, 24(%rax)	# tmp200, ret.455_59->dw_loc_oprnd1.v.val_addr
	.loc 1 8044 0
	movl	$1, -140(%rbp)	#, indirect_p
.LBE56:
	.loc 1 8059 0
	jmp	.L1706	#
.L1703:
.LBB58:
.LBB57:
	.loc 1 8048 0
	movq	-96(%rbp), %rax	# rtl, tmp201
	movzbl	2(%rax), %eax	# rtl_41->mode, D.24213
	movzbl	%al, %eax	# D.24213, tmp202
	movl	%eax, -132(%rbp)	# tmp202, mode
	.loc 1 8050 0
	movq	-96(%rbp), %rax	# rtl, tmp203
	movzwl	(%rax), %eax	# rtl_41->code, D.24215
	cmpw	$66, %ax	#, D.24215
	jne	.L1705	#,
	.loc 1 8052 0
	movl	$1, -140(%rbp)	#, indirect_p
	.loc 1 8053 0
	movq	-96(%rbp), %rax	# rtl, tmp204
	movq	8(%rax), %rax	# rtl_41->fld[0].rtx, tmp205
	movq	%rax, -96(%rbp)	# tmp205, rtl
.L1705:
	.loc 1 8056 0
	movl	-132(%rbp), %edx	# mode, tmp206
	movq	-96(%rbp), %rax	# rtl, tmp207
	movl	%edx, %esi	# tmp206,
	movq	%rax, %rdi	# tmp207,
	call	mem_loc_descriptor	#
	movq	%rax, -128(%rbp)	# ret.456, ret
.LBE57:
.LBE58:
	.loc 1 8059 0
	jmp	.L1706	#
.L1669:
	.loc 1 8062 0
	movq	-168(%rbp), %rax	# loc, tmp208
	movq	32(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	movq	%rax, -128(%rbp)	# ret.457, ret
	.loc 1 8063 0
	movl	$1, -140(%rbp)	#, indirect_p
	.loc 1 8064 0
	jmp	.L1706	#
.L1670:
	.loc 1 8067 0
	movq	-168(%rbp), %rax	# loc, tmp209
	movq	40(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movl	-172(%rbp), %edx	# addressp, tmp210
	movl	%edx, %esi	# tmp210,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	jmp	.L1742	#
.L1694:
	.loc 1 8074 0
	movq	-168(%rbp), %rax	# loc, tmp211
	movq	32(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movl	-172(%rbp), %edx	# addressp, tmp212
	movl	%edx, %esi	# tmp212,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	jmp	.L1742	#
.L1668:
.LBB59:
	.loc 1 8086 0
	leaq	-152(%rbp), %r9	#, tmp213
	leaq	-148(%rbp), %r8	#, tmp214
	leaq	-120(%rbp), %rcx	#, tmp215
	leaq	-104(%rbp), %rdx	#, tmp216
	leaq	-112(%rbp), %rsi	#, tmp217
	movq	-168(%rbp), %rax	# loc, tmp218
	leaq	-144(%rbp), %rdi	#, tmp219
	movq	%rdi, (%rsp)	# tmp219,
	movq	%rax, %rdi	# tmp218,
	call	get_inner_reference	#
	movq	%rax, -88(%rbp)	# tmp220, obj
	.loc 1 8089 0
	movq	-88(%rbp), %rax	# obj, tmp221
	cmpq	-168(%rbp), %rax	# loc, tmp221
	jne	.L1707	#,
	.loc 1 8090 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1707:
	.loc 1 8092 0
	movq	-88(%rbp), %rax	# obj, tmp222
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp222,
	call	loc_descriptor_from_tree	#
	movq	%rax, -128(%rbp)	# ret.458, ret
	.loc 1 8093 0
	movq	-128(%rbp), %rax	# ret, ret.459
	testq	%rax, %rax	# ret.459
	je	.L1709	#,
	.loc 1 8094 0
	movq	-104(%rbp), %rax	# bitpos, bitpos.460
	andl	$7, %eax	#, D.24216
	testq	%rax, %rax	# D.24216
	jne	.L1709	#,
	.loc 1 8094 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# bitsize, bitsize.462
	andl	$7, %eax	#, D.24216
	testq	%rax, %rax	# D.24216
	je	.L1710	#,
.L1709:
	.loc 1 8095 0 is_stmt 1
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1710:
	.loc 1 8097 0
	movq	-120(%rbp), %rax	# offset, offset.464
	testq	%rax, %rax	# offset.464
	je	.L1711	#,
	.loc 1 8100 0
	movq	-120(%rbp), %rax	# offset, offset.465
	movl	$0, %esi	#,
	movq	%rax, %rdi	# offset.465,
	call	loc_descriptor_from_tree	#
	movq	%rax, %rdx	#, D.24217
	leaq	-128(%rbp), %rax	#, tmp223
	movq	%rdx, %rsi	# D.24217,
	movq	%rax, %rdi	# tmp223,
	call	add_loc_descr	#
	.loc 1 8101 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$34, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24217
	leaq	-128(%rbp), %rax	#, tmp224
	movq	%rdx, %rsi	# D.24217,
	movq	%rax, %rdi	# tmp224,
	call	add_loc_descr	#
.L1711:
	.loc 1 8104 0
	cmpl	$0, -172(%rbp)	#, addressp
	jne	.L1712	#,
	.loc 1 8105 0
	movl	$1, -140(%rbp)	#, indirect_p
.L1712:
	.loc 1 8107 0
	movq	-104(%rbp), %rax	# bitpos, bitpos.466
	leaq	7(%rax), %rdx	#, tmp226
	testq	%rax, %rax	# tmp225
	cmovs	%rdx, %rax	# tmp226,, tmp225
	sarq	$3, %rax	#, tmp227
	movq	%rax, -80(%rbp)	# tmp227, bytepos
	.loc 1 8108 0
	cmpq	$0, -80(%rbp)	#, bytepos
	jle	.L1713	#,
	.loc 1 8109 0
	movq	-80(%rbp), %rax	# bytepos, bytepos.467
	movl	$0, %edx	#,
	movq	%rax, %rsi	# bytepos.467,
	movl	$35, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24217
	leaq	-128(%rbp), %rax	#, tmp228
	movq	%rdx, %rsi	# D.24217,
	movq	%rax, %rdi	# tmp228,
	call	add_loc_descr	#
	jmp	.L1706	#
.L1713:
	.loc 1 8110 0
	cmpq	$0, -80(%rbp)	#, bytepos
	jns	.L1706	#,
	.loc 1 8112 0
	movq	-80(%rbp), %rax	# bytepos, tmp229
	movq	%rax, %rdi	# tmp229,
	call	int_loc_descriptor	#
	movq	%rax, %rdx	#, D.24217
	leaq	-128(%rbp), %rax	#, tmp230
	movq	%rdx, %rsi	# D.24217,
	movq	%rax, %rdi	# tmp230,
	call	add_loc_descr	#
	.loc 1 8113 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$34, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24217
	leaq	-128(%rbp), %rax	#, tmp231
	movq	%rdx, %rsi	# D.24217,
	movq	%rax, %rdi	# tmp231,
	call	add_loc_descr	#
	.loc 1 8115 0
	jmp	.L1706	#
.L1666:
.LBE59:
	.loc 1 8119 0
	movq	-168(%rbp), %rax	# loc, tmp232
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp232,
	call	host_integerp	#
	testl	%eax, %eax	# D.24218
	je	.L1715	#,
	.loc 1 8120 0
	movq	-168(%rbp), %rax	# loc, tmp233
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp233,
	call	tree_low_cst	#
	movq	%rax, %rdi	# D.24219,
	call	int_loc_descriptor	#
	movq	%rax, -128(%rbp)	# ret.468, ret
	.loc 1 8123 0
	jmp	.L1706	#
.L1715:
	.loc 1 8122 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1686:
	.loc 1 8128 0
	movl	$26, -136(%rbp)	#, op
	.loc 1 8129 0
	jmp	.L1717	#
.L1685:
	.loc 1 8133 0
	movl	$39, -136(%rbp)	#, op
	.loc 1 8134 0
	jmp	.L1717	#
.L1684:
	.loc 1 8139 0
	movl	$33, -136(%rbp)	#, op
	.loc 1 8140 0
	jmp	.L1717	#
.L1677:
	.loc 1 8143 0
	movl	$27, -136(%rbp)	#, op
	.loc 1 8144 0
	jmp	.L1717	#
.L1675:
	.loc 1 8147 0
	movl	$28, -136(%rbp)	#, op
	.loc 1 8148 0
	jmp	.L1717	#
.L1678:
	.loc 1 8151 0
	movl	$29, -136(%rbp)	#, op
	.loc 1 8152 0
	jmp	.L1717	#
.L1676:
	.loc 1 8155 0
	movl	$30, -136(%rbp)	#, op
	.loc 1 8156 0
	jmp	.L1717	#
.L1682:
	.loc 1 8159 0
	movl	$36, -136(%rbp)	#, op
	.loc 1 8160 0
	jmp	.L1717	#
.L1683:
	.loc 1 8163 0
	movl	-152(%rbp), %eax	# unsignedp, unsignedp.470
	testl	%eax, %eax	# unsignedp.470
	je	.L1718	#,
	.loc 1 8163 0 is_stmt 0 discriminator 1
	movl	$37, %eax	#, iftmp.469
	jmp	.L1719	#
.L1718:
	.loc 1 8163 0 discriminator 2
	movl	$38, %eax	#, iftmp.469
.L1719:
	.loc 1 8163 0 discriminator 3
	movl	%eax, -136(%rbp)	# iftmp.469, op
	.loc 1 8164 0 is_stmt 1 discriminator 3
	jmp	.L1717	#
.L1674:
	.loc 1 8167 0
	movq	-168(%rbp), %rax	# loc, tmp234
	movq	40(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movzbl	16(%rax), %eax	# _106->common.code, D.24213
	cmpb	$25, %al	#, D.24213
	jne	.L1720	#,
	.loc 1 8168 0
	movq	-168(%rbp), %rax	# loc, tmp235
	movq	40(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24211,
	call	host_integerp	#
	testl	%eax, %eax	# D.24218
	je	.L1720	#,
	.loc 1 8170 0
	movq	-168(%rbp), %rax	# loc, tmp236
	movq	32(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	movq	%rax, -128(%rbp)	# ret.471, ret
	.loc 1 8171 0
	movq	-128(%rbp), %rax	# ret, ret.472
	testq	%rax, %rax	# ret.472
	jne	.L1721	#,
	.loc 1 8172 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1721:
	.loc 1 8176 0
	movq	-168(%rbp), %rax	# loc, tmp237
	movq	40(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24211,
	call	tree_low_cst	#
	.loc 1 8174 0
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.24220,
	movl	$35, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24217
	leaq	-128(%rbp), %rax	#, tmp238
	movq	%rdx, %rsi	# D.24217,
	movq	%rax, %rdi	# tmp238,
	call	add_loc_descr	#
	.loc 1 8179 0
	jmp	.L1706	#
.L1720:
	.loc 1 8182 0
	movl	$34, -136(%rbp)	#, op
	.loc 1 8183 0
	jmp	.L1717	#
.L1689:
	.loc 1 8186 0
	movq	-168(%rbp), %rax	# loc, tmp239
	movq	32(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movq	8(%rax), %rax	# _119->common.type, D.24211
	movzbl	17(%rax), %eax	# *_120, D.24213
	andl	$32, %eax	#, D.24213
	testb	%al, %al	# D.24213
	je	.L1722	#,
	.loc 1 8187 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1722:
	.loc 1 8189 0
	movl	$44, -136(%rbp)	#, op
	.loc 1 8190 0
	jmp	.L1717	#
.L1691:
	.loc 1 8193 0
	movq	-168(%rbp), %rax	# loc, tmp240
	movq	32(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movq	8(%rax), %rax	# _125->common.type, D.24211
	movzbl	17(%rax), %eax	# *_126, D.24213
	andl	$32, %eax	#, D.24213
	testb	%al, %al	# D.24213
	je	.L1723	#,
	.loc 1 8194 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1723:
	.loc 1 8196 0
	movl	$42, -136(%rbp)	#, op
	.loc 1 8197 0
	jmp	.L1717	#
.L1688:
	.loc 1 8200 0
	movq	-168(%rbp), %rax	# loc, tmp241
	movq	32(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movq	8(%rax), %rax	# _131->common.type, D.24211
	movzbl	17(%rax), %eax	# *_132, D.24213
	andl	$32, %eax	#, D.24213
	testb	%al, %al	# D.24213
	je	.L1724	#,
	.loc 1 8201 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1724:
	.loc 1 8203 0
	movl	$45, -136(%rbp)	#, op
	.loc 1 8204 0
	jmp	.L1717	#
.L1690:
	.loc 1 8207 0
	movq	-168(%rbp), %rax	# loc, tmp242
	movq	32(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movq	8(%rax), %rax	# _137->common.type, D.24211
	movzbl	17(%rax), %eax	# *_138, D.24213
	andl	$32, %eax	#, D.24213
	testb	%al, %al	# D.24213
	je	.L1725	#,
	.loc 1 8208 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1725:
	.loc 1 8210 0
	movl	$43, -136(%rbp)	#, op
	.loc 1 8211 0
	jmp	.L1717	#
.L1692:
	.loc 1 8214 0
	movl	$41, -136(%rbp)	#, op
	.loc 1 8215 0
	jmp	.L1717	#
.L1693:
	.loc 1 8218 0
	movl	$46, -136(%rbp)	#, op
	.loc 1 8219 0
	nop
.L1717:
	.loc 1 8222 0
	movq	-168(%rbp), %rax	# loc, tmp243
	movq	32(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	movq	%rax, -128(%rbp)	# ret.473, ret
	.loc 1 8223 0
	movq	-168(%rbp), %rax	# loc, tmp244
	movq	40(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	movq	%rax, -72(%rbp)	# tmp245, ret1
	.loc 1 8224 0
	movq	-128(%rbp), %rax	# ret, ret.474
	testq	%rax, %rax	# ret.474
	je	.L1726	#,
	.loc 1 8224 0 is_stmt 0 discriminator 1
	cmpq	$0, -72(%rbp)	#, ret1
	jne	.L1727	#,
.L1726:
	.loc 1 8225 0 is_stmt 1
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1727:
	.loc 1 8227 0
	movq	-72(%rbp), %rdx	# ret1, tmp246
	leaq	-128(%rbp), %rax	#, tmp247
	movq	%rdx, %rsi	# tmp246,
	movq	%rax, %rdi	# tmp247,
	call	add_loc_descr	#
	.loc 1 8228 0
	movl	-136(%rbp), %eax	# op, tmp248
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp248,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24217
	leaq	-128(%rbp), %rax	#, tmp249
	movq	%rdx, %rsi	# D.24217,
	movq	%rax, %rdi	# tmp249,
	call	add_loc_descr	#
	.loc 1 8229 0
	jmp	.L1706	#
.L1687:
	.loc 1 8233 0
	movl	$32, -136(%rbp)	#, op
	.loc 1 8234 0
	jmp	.L1728	#
.L1681:
	.loc 1 8237 0
	movl	$25, -136(%rbp)	#, op
	.loc 1 8238 0
	jmp	.L1728	#
.L1679:
	.loc 1 8241 0
	movl	$31, -136(%rbp)	#, op
	.loc 1 8242 0
	nop
.L1728:
	.loc 1 8245 0
	movq	-168(%rbp), %rax	# loc, tmp250
	movq	32(%rax), %rax	# loc_19(D)->exp.operands, D.24211
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	movq	%rax, -128(%rbp)	# ret.475, ret
	.loc 1 8246 0
	movq	-128(%rbp), %rax	# ret, ret.476
	testq	%rax, %rax	# ret.476
	jne	.L1729	#,
	.loc 1 8247 0
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1729:
	.loc 1 8249 0
	movl	-136(%rbp), %eax	# op, tmp251
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	%eax, %edi	# tmp251,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24217
	leaq	-128(%rbp), %rax	#, tmp252
	movq	%rdx, %rsi	# D.24217,
	movq	%rax, %rdi	# tmp252,
	call	add_loc_descr	#
	.loc 1 8250 0
	jmp	.L1706	#
.L1680:
	.loc 1 8253 0
	movq	-168(%rbp), %rax	# loc, tmp253
	movq	32(%rax), %r12	# loc_19(D)->exp.operands, D.24211
	movq	-168(%rbp), %rax	# loc, tmp254
	movq	40(%rax), %rbx	# loc_19(D)->exp.operands, D.24211
	movq	-168(%rbp), %rax	# loc, tmp255
	movq	40(%rax), %rcx	# loc_19(D)->exp.operands, D.24211
	movq	-168(%rbp), %rax	# loc, tmp256
	movq	32(%rax), %rdx	# loc_19(D)->exp.operands, D.24211
	movq	integer_types+40(%rip), %rax	# integer_types, D.24211
	movq	%rax, %rsi	# D.24211,
	movl	$97, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, %rdx	#, D.24211
	movq	-168(%rbp), %rax	# loc, tmp257
	movq	8(%rax), %rax	# loc_19(D)->common.type, D.24211
	movq	%r12, %r8	# D.24211,
	movq	%rbx, %rcx	# D.24211,
	movq	%rax, %rsi	# D.24211,
	movl	$51, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -168(%rbp)	# tmp258, loc
.L1671:
.LBB60:
	.loc 1 8263 0
	movq	-168(%rbp), %rax	# loc, tmp259
	movq	40(%rax), %rax	# loc_2->exp.operands, D.24211
	.loc 1 8262 0
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	movq	%rax, -64(%rbp)	# tmp260, lhs
	.loc 1 8265 0
	movq	-168(%rbp), %rax	# loc, tmp261
	movq	48(%rax), %rax	# loc_2->exp.operands, D.24211
	.loc 1 8264 0
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	movq	%rax, -56(%rbp)	# tmp262, rhs
	.loc 1 8268 0
	movq	-168(%rbp), %rax	# loc, tmp263
	movq	32(%rax), %rax	# loc_2->exp.operands, D.24211
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24211,
	call	loc_descriptor_from_tree	#
	movq	%rax, -128(%rbp)	# ret.477, ret
	.loc 1 8269 0
	movq	-128(%rbp), %rax	# ret, ret.478
	testq	%rax, %rax	# ret.478
	je	.L1730	#,
	.loc 1 8269 0 is_stmt 0 discriminator 1
	cmpq	$0, -64(%rbp)	#, lhs
	je	.L1730	#,
	cmpq	$0, -56(%rbp)	#, rhs
	jne	.L1731	#,
.L1730:
	.loc 1 8270 0 is_stmt 1
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1731:
	.loc 1 8272 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$40, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -48(%rbp)	# tmp264, bra_node
	.loc 1 8273 0
	movq	-48(%rbp), %rdx	# bra_node, tmp265
	leaq	-128(%rbp), %rax	#, tmp266
	movq	%rdx, %rsi	# tmp265,
	movq	%rax, %rdi	# tmp266,
	call	add_loc_descr	#
	.loc 1 8275 0
	movq	-56(%rbp), %rdx	# rhs, tmp267
	leaq	-128(%rbp), %rax	#, tmp268
	movq	%rdx, %rsi	# tmp267,
	movq	%rax, %rdi	# tmp268,
	call	add_loc_descr	#
	.loc 1 8276 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -40(%rbp)	# tmp269, jump_node
	.loc 1 8277 0
	movq	-40(%rbp), %rdx	# jump_node, tmp270
	leaq	-128(%rbp), %rax	#, tmp271
	movq	%rdx, %rsi	# tmp270,
	movq	%rax, %rdi	# tmp271,
	call	add_loc_descr	#
	.loc 1 8279 0
	movq	-64(%rbp), %rdx	# lhs, tmp272
	leaq	-128(%rbp), %rax	#, tmp273
	movq	%rdx, %rsi	# tmp272,
	movq	%rax, %rdi	# tmp273,
	call	add_loc_descr	#
	.loc 1 8280 0
	movq	-48(%rbp), %rax	# bra_node, tmp274
	movl	$2, 16(%rax)	#, bra_node_175->dw_loc_oprnd1.val_class
	.loc 1 8281 0
	movq	-48(%rbp), %rax	# bra_node, tmp275
	movq	-64(%rbp), %rdx	# lhs, tmp276
	movq	%rdx, 24(%rax)	# tmp276, bra_node_175->dw_loc_oprnd1.v.val_loc
	.loc 1 8284 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$150, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -32(%rbp)	# tmp277, tmp
	.loc 1 8285 0
	movq	-32(%rbp), %rdx	# tmp, tmp278
	leaq	-128(%rbp), %rax	#, tmp279
	movq	%rdx, %rsi	# tmp278,
	movq	%rax, %rdi	# tmp279,
	call	add_loc_descr	#
	.loc 1 8286 0
	movq	-40(%rbp), %rax	# jump_node, tmp280
	movl	$2, 16(%rax)	#, jump_node_176->dw_loc_oprnd1.val_class
	.loc 1 8287 0
	movq	-40(%rbp), %rax	# jump_node, tmp281
	movq	-32(%rbp), %rdx	# tmp, tmp282
	movq	%rdx, 24(%rax)	# tmp282, jump_node_176->dw_loc_oprnd1.v.val_loc
.LBE60:
	.loc 1 8289 0
	jmp	.L1706	#
.L1663:
	.loc 1 8292 0
	movl	$__FUNCTION__.16533, %edx	#,
	movl	$8292, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1706:
	.loc 1 8296 0
	cmpl	$0, -172(%rbp)	#, addressp
	je	.L1732	#,
	.loc 1 8296 0 is_stmt 0 discriminator 1
	cmpl	$0, -140(%rbp)	#, indirect_p
	jne	.L1732	#,
	.loc 1 8297 0 is_stmt 1
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1732:
	.loc 1 8300 0
	cmpl	$0, -172(%rbp)	#, addressp
	jne	.L1733	#,
	.loc 1 8300 0 is_stmt 0 discriminator 1
	cmpl	$0, -140(%rbp)	#, indirect_p
	jle	.L1733	#,
.LBB61:
	.loc 1 8302 0 is_stmt 1
	movq	-168(%rbp), %rax	# loc, tmp283
	movq	8(%rax), %rax	# loc_3->common.type, D.24211
	movq	%rax, %rdi	# D.24211,
	call	int_size_in_bytes	#
	movq	%rax, -24(%rbp)	# tmp284, size
	.loc 1 8304 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.480
	andl	$33554432, %eax	#, D.24218
	testl	%eax, %eax	# D.24218
	je	.L1734	#,
	.loc 1 8304 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.479
	jmp	.L1735	#
.L1734:
	.loc 1 8304 0 discriminator 2
	movl	$4, %eax	#, iftmp.479
.L1735:
	.loc 1 8304 0 discriminator 3
	cmpq	-24(%rbp), %rax	# size, iftmp.479
	jl	.L1736	#,
	.loc 1 8304 0 discriminator 1
	cmpq	$-1, -24(%rbp)	#, size
	jne	.L1737	#,
.L1736:
	.loc 1 8305 0 is_stmt 1
	movl	$0, %eax	#, D.24210
	jmp	.L1742	#
.L1737:
	.loc 1 8306 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.482
	andl	$33554432, %eax	#, D.24218
	testl	%eax, %eax	# D.24218
	je	.L1738	#,
	.loc 1 8306 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.481
	jmp	.L1739	#
.L1738:
	.loc 1 8306 0 discriminator 2
	movl	$4, %eax	#, iftmp.481
.L1739:
	.loc 1 8306 0 discriminator 3
	cmpq	-24(%rbp), %rax	# size, iftmp.481
	jne	.L1740	#,
	.loc 1 8307 0 is_stmt 1
	movl	$6, -136(%rbp)	#, op
	jmp	.L1741	#
.L1740:
	.loc 1 8309 0
	movl	$148, -136(%rbp)	#, op
.L1741:
	.loc 1 8311 0
	movq	-24(%rbp), %rcx	# size, size.483
	movl	-136(%rbp), %eax	# op, tmp285
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# size.483,
	movl	%eax, %edi	# tmp285,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24217
	leaq	-128(%rbp), %rax	#, tmp286
	movq	%rdx, %rsi	# D.24217,
	movq	%rax, %rdi	# tmp286,
	call	add_loc_descr	#
.L1733:
.LBE61:
	.loc 1 8314 0
	movq	-128(%rbp), %rax	# ret, D.24210
.L1742:
	.loc 1 8315 0
	addq	$176, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE169:
	.size	loc_descriptor_from_tree, .-loc_descriptor_from_tree
	.type	field_type, @function
field_type:
.LFB171:
	.loc 1 8336 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# decl, decl
	.loc 1 8339 0
	movq	-24(%rbp), %rax	# decl, tmp62
	movzbl	16(%rax), %eax	# decl_3(D)->common.code, D.24222
	testb	%al, %al	# D.24222
	jne	.L1744	#,
	.loc 1 8340 0
	movq	integer_types+40(%rip), %rax	# integer_types, D.24221
	jmp	.L1745	#
.L1744:
	.loc 1 8342 0
	movq	-24(%rbp), %rax	# decl, tmp63
	movq	96(%rax), %rax	# decl_3(D)->decl.result, tmp64
	movq	%rax, -8(%rbp)	# tmp64, type
	.loc 1 8343 0
	cmpq	$0, -8(%rbp)	#, type
	jne	.L1746	#,
	.loc 1 8344 0
	movq	-24(%rbp), %rax	# decl, tmp65
	movq	8(%rax), %rax	# decl_3(D)->common.type, tmp66
	movq	%rax, -8(%rbp)	# tmp66, type
.L1746:
	.loc 1 8346 0
	movq	-8(%rbp), %rax	# type, D.24221
.L1745:
	.loc 1 8347 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE171:
	.size	field_type, .-field_type
	.type	simple_type_align_in_bits, @function
simple_type_align_in_bits:
.LFB172:
	.loc 1 8356 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# type, type
	.loc 1 8357 0
	movq	-8(%rbp), %rax	# type, tmp66
	movzbl	16(%rax), %eax	# type_3(D)->common.code, D.24223
	testb	%al, %al	# D.24223
	je	.L1748	#,
	.loc 1 8357 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp67
	movl	64(%rax), %eax	# type_3(D)->type.align, iftmp.491
	jmp	.L1749	#
.L1748:
	.loc 1 8357 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.493
	andl	$33554432, %eax	#, D.24224
	testl	%eax, %eax	# D.24224
	je	.L1750	#,
	.loc 1 8357 0 discriminator 3
	movl	$64, %eax	#, iftmp.492
	jmp	.L1749	#
.L1750:
	.loc 1 8357 0 discriminator 4
	movl	$32, %eax	#, iftmp.492
.L1749:
	.loc 1 8358 0 is_stmt 1 discriminator 6
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE172:
	.size	simple_type_align_in_bits, .-simple_type_align_in_bits
	.type	simple_field_decl_align_in_bits, @function
simple_field_decl_align_in_bits:
.LFB173:
	.loc 1 8363 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# field, field
	.loc 1 8366 0
	movq	-24(%rbp), %rax	# field, tmp68
	movzbl	16(%rax), %eax	# field_3(D)->common.code, D.24227
	testb	%al, %al	# D.24227
	jne	.L1754	#,
	.loc 1 8367 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.495
	andl	$33554432, %eax	#, D.24228
	testl	%eax, %eax	# D.24228
	je	.L1755	#,
	.loc 1 8367 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.494
	jmp	.L1756	#
.L1755:
	.loc 1 8367 0 discriminator 2
	movl	$32, %eax	#, iftmp.494
.L1756:
	.loc 1 8367 0 discriminator 3
	jmp	.L1757	#
.L1754:
	.loc 1 8369 0 is_stmt 1
	movq	-24(%rbp), %rax	# field, tmp69
	movl	56(%rax), %eax	# *field_3(D), tmp72
	andl	$16777215, %eax	#, D.24229
	movl	%eax, -4(%rbp)	# D.24229, align
	.loc 1 8380 0
	movl	-4(%rbp), %edx	# align, align.496
	movq	-24(%rbp), %rax	# field, tmp73
	movl	%edx, %esi	# align.496,
	movq	%rax, %rdi	# tmp73,
	call	x86_field_alignment	#
	movl	%eax, -4(%rbp)	# D.24228, align
	.loc 1 8382 0
	movl	-4(%rbp), %eax	# align, D.24226
.L1757:
	.loc 1 8383 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE173:
	.size	simple_field_decl_align_in_bits, .-simple_field_decl_align_in_bits
	.type	simple_type_size_in_bits, @function
simple_type_size_in_bits:
.LFB174:
	.loc 1 8394 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# type, type
	.loc 1 8396 0
	movq	-8(%rbp), %rax	# type, tmp71
	movzbl	16(%rax), %eax	# type_3(D)->common.code, D.24231
	testb	%al, %al	# D.24231
	jne	.L1759	#,
	.loc 1 8397 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.490
	andl	$33554432, %eax	#, D.24232
	testl	%eax, %eax	# D.24232
	je	.L1760	#,
	.loc 1 8397 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.489
	jmp	.L1761	#
.L1760:
	.loc 1 8397 0 discriminator 2
	movl	$32, %eax	#, iftmp.489
.L1761:
	.loc 1 8397 0 discriminator 3
	jmp	.L1762	#
.L1759:
	.loc 1 8398 0 is_stmt 1
	movq	-8(%rbp), %rax	# type, tmp72
	movq	32(%rax), %rax	# type_3(D)->type.size, D.24233
	testq	%rax, %rax	# D.24233
	jne	.L1763	#,
	.loc 1 8399 0
	movl	$0, %eax	#, D.24230
	jmp	.L1762	#
.L1763:
	.loc 1 8400 0
	movq	-8(%rbp), %rax	# type, tmp73
	movq	32(%rax), %rax	# type_3(D)->type.size, D.24233
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.24233,
	call	host_integerp	#
	testl	%eax, %eax	# D.24232
	je	.L1764	#,
	.loc 1 8401 0
	movq	-8(%rbp), %rax	# type, tmp74
	movq	32(%rax), %rax	# type_3(D)->type.size, D.24233
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.24233,
	call	tree_low_cst	#
	jmp	.L1762	#
.L1764:
	.loc 1 8403 0
	movq	-8(%rbp), %rax	# type, tmp75
	movl	64(%rax), %eax	# type_3(D)->type.align, D.24235
	movl	%eax, %eax	# D.24235, D.24230
.L1762:
	.loc 1 8404 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE174:
	.size	simple_type_size_in_bits, .-simple_type_size_in_bits
	.type	field_byte_offset, @function
field_byte_offset:
.LFB175:
	.loc 1 8416 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# decl, decl
	.loc 1 8427 0
	movq	-88(%rbp), %rax	# decl, tmp84
	movzbl	16(%rax), %eax	# decl_6(D)->common.code, D.24237
	testb	%al, %al	# D.24237
	jne	.L1766	#,
	.loc 1 8428 0
	movl	$0, %eax	#, D.24236
	jmp	.L1767	#
.L1766:
	.loc 1 8429 0
	movq	-88(%rbp), %rax	# decl, tmp85
	movzbl	16(%rax), %eax	# decl_6(D)->common.code, D.24237
	cmpb	$37, %al	#, D.24237
	je	.L1768	#,
	.loc 1 8430 0
	movl	$__FUNCTION__.16565, %edx	#,
	movl	$8430, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1768:
	.loc 1 8432 0
	movq	-88(%rbp), %rax	# decl, tmp86
	movq	%rax, %rdi	# tmp86,
	call	field_type	#
	movq	%rax, -48(%rbp)	# tmp87, type
	.loc 1 8433 0
	movq	-88(%rbp), %rax	# decl, tmp88
	movq	40(%rax), %rax	# decl_6(D)->decl.size, tmp89
	movq	%rax, -64(%rbp)	# tmp89, field_size_tree
	.loc 1 8437 0
	cmpq	$0, -64(%rbp)	#, field_size_tree
	jne	.L1769	#,
	.loc 1 8438 0
	movq	global_trees+136(%rip), %rax	# global_trees, tmp90
	movq	%rax, -64(%rbp)	# tmp90, field_size_tree
.L1769:
	.loc 1 8443 0
	movq	-88(%rbp), %rax	# decl, tmp91
	movq	%rax, %rdi	# tmp91,
	call	bit_position	#
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24238,
	call	host_integerp	#
	testl	%eax, %eax	# D.24239
	jne	.L1770	#,
	.loc 1 8444 0
	movl	$0, %eax	#, D.24236
	jmp	.L1767	#
.L1770:
	.loc 1 8446 0
	movq	-88(%rbp), %rax	# decl, tmp92
	movq	%rax, %rdi	# tmp92,
	call	int_bit_position	#
	movq	%rax, -40(%rbp)	# tmp93, bitpos_int
	.loc 1 8449 0
	movq	-64(%rbp), %rax	# field_size_tree, tmp94
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp94,
	call	host_integerp	#
	testl	%eax, %eax	# D.24239
	je	.L1771	#,
	.loc 1 8450 0
	movq	-64(%rbp), %rax	# field_size_tree, tmp95
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp95,
	call	tree_low_cst	#
	movq	%rax, -56(%rbp)	# D.24236, field_size_in_bits
	jmp	.L1772	#
.L1771:
	.loc 1 8452 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.485
	andl	$33554432, %eax	#, D.24239
	testl	%eax, %eax	# D.24239
	je	.L1773	#,
	.loc 1 8452 0 is_stmt 0 discriminator 1
	movl	$64, %eax	#, iftmp.484
	jmp	.L1774	#
.L1773:
	.loc 1 8452 0 discriminator 2
	movl	$32, %eax	#, iftmp.484
.L1774:
	.loc 1 8452 0 discriminator 3
	movq	%rax, -56(%rbp)	# iftmp.484, field_size_in_bits
.L1772:
	.loc 1 8454 0 is_stmt 1
	movq	-48(%rbp), %rax	# type, tmp96
	movq	%rax, %rdi	# tmp96,
	call	simple_type_size_in_bits	#
	movq	%rax, -32(%rbp)	# tmp97, type_size_in_bits
	.loc 1 8455 0
	movq	-48(%rbp), %rax	# type, tmp98
	movq	%rax, %rdi	# tmp98,
	call	simple_type_align_in_bits	#
	movl	%eax, -80(%rbp)	# tmp99, type_align_in_bits
	.loc 1 8456 0
	movq	-88(%rbp), %rax	# decl, tmp100
	movq	%rax, %rdi	# tmp100,
	call	simple_field_decl_align_in_bits	#
	movl	%eax, -76(%rbp)	# tmp101, decl_align_in_bits
	.loc 1 8499 0
	movq	-40(%rbp), %rdx	# bitpos_int, bitpos_int.486
	movq	-56(%rbp), %rax	# field_size_in_bits, tmp102
	addq	%rdx, %rax	# bitpos_int.486, D.24240
	movq	%rax, -24(%rbp)	# D.24240, deepest_bitpos
	.loc 1 8503 0
	movq	-24(%rbp), %rax	# deepest_bitpos, deepest_bitpos.487
	subq	-32(%rbp), %rax	# type_size_in_bits, D.24240
	movq	%rax, -72(%rbp)	# D.24240, object_offset_in_bits
	.loc 1 8506 0
	movl	-80(%rbp), %eax	# type_align_in_bits, tmp103
	subl	$1, %eax	#, D.24241
	movl	%eax, %eax	# D.24241, D.24236
	addq	%rax, -72(%rbp)	# D.24236, object_offset_in_bits
	.loc 1 8507 0
	movl	-80(%rbp), %ecx	# type_align_in_bits, D.24236
	movq	-72(%rbp), %rax	# object_offset_in_bits, tmp106
	cqto
	idivq	%rcx	# D.24236
	movq	%rax, -72(%rbp)	# tmp104, object_offset_in_bits
	.loc 1 8508 0
	movl	-80(%rbp), %eax	# type_align_in_bits, D.24236
	movq	-72(%rbp), %rdx	# object_offset_in_bits, tmp108
	imulq	%rdx, %rax	# tmp108, tmp107
	movq	%rax, -72(%rbp)	# tmp107, object_offset_in_bits
	.loc 1 8510 0
	movq	-72(%rbp), %rax	# object_offset_in_bits, tmp109
	cmpq	-40(%rbp), %rax	# bitpos_int, tmp109
	jle	.L1775	#,
	.loc 1 8513 0
	movq	-24(%rbp), %rax	# deepest_bitpos, deepest_bitpos.488
	subq	-32(%rbp), %rax	# type_size_in_bits, D.24240
	movq	%rax, -72(%rbp)	# D.24240, object_offset_in_bits
	.loc 1 8516 0
	movl	-76(%rbp), %eax	# decl_align_in_bits, tmp110
	subl	$1, %eax	#, D.24241
	movl	%eax, %eax	# D.24241, D.24236
	addq	%rax, -72(%rbp)	# D.24236, object_offset_in_bits
	.loc 1 8517 0
	movl	-76(%rbp), %ebx	# decl_align_in_bits, D.24236
	movq	-72(%rbp), %rax	# object_offset_in_bits, tmp113
	cqto
	idivq	%rbx	# D.24236
	movq	%rax, -72(%rbp)	# tmp111, object_offset_in_bits
	.loc 1 8518 0
	movl	-76(%rbp), %eax	# decl_align_in_bits, D.24236
	movq	-72(%rbp), %rdx	# object_offset_in_bits, tmp115
	imulq	%rdx, %rax	# tmp115, tmp114
	movq	%rax, -72(%rbp)	# tmp114, object_offset_in_bits
.L1775:
	.loc 1 8521 0
	movq	-72(%rbp), %rax	# object_offset_in_bits, tmp116
	leaq	7(%rax), %rdx	#, tmp118
	testq	%rax, %rax	# tmp117
	cmovs	%rdx, %rax	# tmp118,, tmp117
	sarq	$3, %rax	#, tmp119
.L1767:
	.loc 1 8522 0
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE175:
	.size	field_byte_offset, .-field_byte_offset
	.type	add_AT_location_description, @function
add_AT_location_description:
.LFB176:
	.loc 1 8538 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movl	%esi, -28(%rbp)	# attr_kind, attr_kind
	movq	%rdx, -40(%rbp)	# rtl, rtl
	.loc 1 8539 0
	movq	-40(%rbp), %rax	# rtl, tmp59
	movq	%rax, %rdi	# tmp59,
	call	loc_descriptor	#
	movq	%rax, -8(%rbp)	# tmp60, descr
	.loc 1 8541 0
	cmpq	$0, -8(%rbp)	#, descr
	je	.L1776	#,
	.loc 1 8542 0
	movq	-8(%rbp), %rdx	# descr, tmp61
	movl	-28(%rbp), %ecx	# attr_kind, tmp62
	movq	-24(%rbp), %rax	# die, tmp63
	movl	%ecx, %esi	# tmp62,
	movq	%rax, %rdi	# tmp63,
	call	add_AT_loc	#
.L1776:
	.loc 1 8543 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE176:
	.size	add_AT_location_description, .-add_AT_location_description
	.type	add_data_member_location_attribute, @function
add_data_member_location_attribute:
.LFB177:
	.loc 1 8568 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# die, die
	movq	%rsi, -48(%rbp)	# decl, decl
	.loc 1 8570 0
	movq	$0, -24(%rbp)	#, loc_descr
	.loc 1 8572 0
	movq	-48(%rbp), %rax	# decl, tmp70
	movzbl	16(%rax), %eax	# decl_3(D)->common.code, D.24242
	cmpb	$3, %al	#, D.24242
	jne	.L1779	#,
	.loc 1 8575 0
	movq	-48(%rbp), %rax	# decl, tmp71
	movzbl	18(%rax), %eax	# *decl_3(D), D.24242
	andl	$4, %eax	#, D.24242
	testb	%al, %al	# D.24242
	je	.L1780	#,
	.loc 1 8575 0 is_stmt 0 discriminator 1
	call	is_cxx	#
	testl	%eax, %eax	# D.24243
	je	.L1780	#,
.LBB62:
	.loc 1 8589 0 is_stmt 1
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$18, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp72, tmp
	.loc 1 8590 0
	movq	-8(%rbp), %rdx	# tmp, tmp73
	leaq	-24(%rbp), %rax	#, tmp74
	movq	%rdx, %rsi	# tmp73,
	movq	%rax, %rdi	# tmp74,
	call	add_loc_descr	#
	.loc 1 8593 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$6, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp75, tmp
	.loc 1 8594 0
	movq	-8(%rbp), %rdx	# tmp, tmp76
	leaq	-24(%rbp), %rax	#, tmp77
	movq	%rdx, %rsi	# tmp76,
	movq	%rax, %rdi	# tmp77,
	call	add_loc_descr	#
	.loc 1 8597 0
	movq	-48(%rbp), %rax	# decl, tmp78
	movq	72(%rax), %rax	# decl_3(D)->vec.a, D.24244
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24244,
	call	tree_low_cst	#
	movq	%rax, -16(%rbp)	# tmp79, offset
	.loc 1 8598 0
	cmpq	$0, -16(%rbp)	#, offset
	js	.L1781	#,
	.loc 1 8599 0
	movl	$__FUNCTION__.16579, %edx	#,
	movl	$8599, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1781:
	.loc 1 8601 0
	movq	-16(%rbp), %rax	# offset, tmp80
	negq	%rax	# D.24245
	movq	%rax, %rdi	# D.24245,
	call	int_loc_descriptor	#
	movq	%rax, -8(%rbp)	# tmp81, tmp
	.loc 1 8602 0
	movq	-8(%rbp), %rdx	# tmp, tmp82
	leaq	-24(%rbp), %rax	#, tmp83
	movq	%rdx, %rsi	# tmp82,
	movq	%rax, %rdi	# tmp83,
	call	add_loc_descr	#
	.loc 1 8603 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$28, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp84, tmp
	.loc 1 8604 0
	movq	-8(%rbp), %rdx	# tmp, tmp85
	leaq	-24(%rbp), %rax	#, tmp86
	movq	%rdx, %rsi	# tmp85,
	movq	%rax, %rdi	# tmp86,
	call	add_loc_descr	#
	.loc 1 8607 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$6, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp87, tmp
	.loc 1 8608 0
	movq	-8(%rbp), %rdx	# tmp, tmp88
	leaq	-24(%rbp), %rax	#, tmp89
	movq	%rdx, %rsi	# tmp88,
	movq	%rax, %rdi	# tmp89,
	call	add_loc_descr	#
	.loc 1 8611 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$34, %edi	#,
	call	new_loc_descr	#
	movq	%rax, -8(%rbp)	# tmp90, tmp
	.loc 1 8612 0
	movq	-8(%rbp), %rdx	# tmp, tmp91
	leaq	-24(%rbp), %rax	#, tmp92
	movq	%rdx, %rsi	# tmp91,
	movq	%rax, %rdi	# tmp92,
	call	add_loc_descr	#
.LBE62:
	.loc 1 8576 0
	nop
	jmp	.L1783	#
.L1780:
	.loc 1 8615 0
	movq	-48(%rbp), %rax	# decl, tmp93
	movq	40(%rax), %rax	# decl_3(D)->vec.a, D.24244
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24244,
	call	tree_low_cst	#
	movq	%rax, -16(%rbp)	# tmp94, offset
	jmp	.L1783	#
.L1779:
	.loc 1 8618 0
	movq	-48(%rbp), %rax	# decl, tmp95
	movq	%rax, %rdi	# tmp95,
	call	field_byte_offset	#
	movq	%rax, -16(%rbp)	# tmp96, offset
.L1783:
	.loc 1 8620 0
	movq	-24(%rbp), %rax	# loc_descr, loc_descr.497
	testq	%rax, %rax	# loc_descr.497
	jne	.L1784	#,
.LBB63:
	.loc 1 8634 0
	movl	$35, -28(%rbp)	#, op
	.loc 1 8637 0
	movq	-16(%rbp), %rcx	# offset, offset.498
	movl	-28(%rbp), %eax	# op, tmp97
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# offset.498,
	movl	%eax, %edi	# tmp97,
	call	new_loc_descr	#
	movq	%rax, -24(%rbp)	# loc_descr.499, loc_descr
.L1784:
.LBE63:
	.loc 1 8640 0
	movq	-24(%rbp), %rdx	# loc_descr, loc_descr.500
	movq	-40(%rbp), %rax	# die, tmp98
	movl	$56, %esi	#,
	movq	%rax, %rdi	# tmp98,
	call	add_AT_loc	#
	.loc 1 8641 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE177:
	.size	add_data_member_location_attribute, .-add_data_member_location_attribute
	.type	add_const_value_attribute, @function
add_const_value_attribute:
.LFB178:
	.loc 1 8653 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$144, %rsp	#,
	movq	%rdi, -104(%rbp)	# die, die
	movq	%rsi, -112(%rbp)	# rtl, rtl
	.loc 1 8654 0
	movq	-112(%rbp), %rax	# rtl, tmp94
	movzwl	(%rax), %eax	# rtl_1(D)->code, D.24246
	movzwl	%ax, %eax	# D.24246, D.24247
	subl	$54, %eax	#, tmp95
	cmpl	$21, %eax	#, tmp95
	ja	.L1786	#,
	movl	%eax, %eax	# tmp95, tmp96
	movq	.L1788(,%rax,8), %rax	#, tmp97
	jmp	*%rax	# tmp97
	.section	.rodata
	.align 8
	.align 4
.L1788:
	.quad	.L1787
	.quad	.L1789
	.quad	.L1786
	.quad	.L1790
	.quad	.L1791
	.quad	.L1786
	.quad	.L1786
	.quad	.L1786
	.quad	.L1786
	.quad	.L1786
	.quad	.L1786
	.quad	.L1786
	.quad	.L1786
	.quad	.L1791
	.quad	.L1791
	.quad	.L1786
	.quad	.L1786
	.quad	.L1786
	.quad	.L1786
	.quad	.L1786
	.quad	.L1786
	.quad	.L1809
	.text
.L1787:
.LBB64:
	.loc 1 8663 0
	movq	-112(%rbp), %rax	# rtl, tmp98
	movq	8(%rax), %rax	# rtl_1(D)->fld[0].rtwint, tmp99
	movq	%rax, -80(%rbp)	# tmp99, val
	.loc 1 8666 0
	cmpq	$0, -80(%rbp)	#, val
	jns	.L1793	#,
	.loc 1 8667 0
	movq	-80(%rbp), %rdx	# val, tmp100
	movq	-104(%rbp), %rax	# die, tmp101
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp101,
	call	add_AT_int	#
	jmp	.L1794	#
.L1793:
	.loc 1 8669 0
	movq	-80(%rbp), %rdx	# val, val.502
	movq	-104(%rbp), %rax	# die, tmp102
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp102,
	call	add_AT_unsigned	#
.L1794:
.LBE64:
	.loc 1 8680 0
	jmp	.L1785	#
.L1789:
.LBB65:
	.loc 1 8688 0
	movq	-112(%rbp), %rax	# rtl, tmp103
	movzbl	2(%rax), %eax	# rtl_1(D)->mode, D.24248
	movzbl	%al, %eax	# D.24248, tmp104
	movl	%eax, -88(%rbp)	# tmp104, mode
	.loc 1 8690 0
	movl	-88(%rbp), %eax	# mode, mode.503
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24249
	cmpl	$2, %eax	#, D.24249
	jne	.L1796	#,
.LBB66:
	.loc 1 8692 0
	movl	-88(%rbp), %eax	# mode, mode.504
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24248
	shrb	$2, %al	#, D.24248
	movzbl	%al, %eax	# D.24248, tmp107
	movl	%eax, -84(%rbp)	# tmp107, length
	.loc 1 8693 0
	movl	-84(%rbp), %eax	# length, D.24250
	salq	$3, %rax	#, D.24250
	movq	%rax, %rdi	# D.24250,
	call	xmalloc	#
	movq	%rax, -72(%rbp)	# tmp108, array
.LBB67:
	.loc 1 8696 0
	movq	-112(%rbp), %rax	# rtl, tmp109
	leaq	16(%rax), %rcx	#, D.24251
	leaq	-32(%rbp), %rax	#, tmp110
	movl	$24, %edx	#,
	movq	%rcx, %rsi	# D.24251,
	movq	%rax, %rdi	# tmp110,
	call	memcpy	#
	movq	-32(%rbp), %rax	# u.d, tmp111
	movq	%rax, -64(%rbp)	# tmp111, rv
	movq	-24(%rbp), %rax	# u.d, tmp112
	movq	%rax, -56(%rbp)	# tmp112, rv
	movq	-16(%rbp), %rax	# u.d, tmp113
	movq	%rax, -48(%rbp)	# tmp113, rv
.LBE67:
	.loc 1 8697 0
	movl	-88(%rbp), %eax	# mode, mode
	cmpl	$16, %eax	#, mode
	je	.L1798	#,
	cmpl	$16, %eax	#, mode
	ja	.L1799	#,
	cmpl	$15, %eax	#, mode
	je	.L1800	#,
	jmp	.L1797	#
.L1799:
	cmpl	$18, %eax	#, mode
	ja	.L1797	#,
	jmp	.L1808	#
.L1800:
	.loc 1 8700 0
	movq	-64(%rbp), %rax	# rv, tmp115
	movq	%rax, (%rsp)	# tmp115,
	movq	-56(%rbp), %rax	# rv, tmp116
	movq	%rax, 8(%rsp)	# tmp116,
	movq	-48(%rbp), %rax	# rv, tmp117
	movq	%rax, 16(%rsp)	# tmp117,
	call	etarsingle	#
	movq	-72(%rbp), %rdx	# array, tmp118
	movq	%rax, (%rdx)	# D.24252, *array_17
	.loc 1 8701 0
	jmp	.L1802	#
.L1798:
	.loc 1 8704 0
	movq	-72(%rbp), %rax	# array, tmp119
	movq	-64(%rbp), %rdx	# rv, tmp120
	movq	%rdx, (%rsp)	# tmp120,
	movq	-56(%rbp), %rdx	# rv, tmp121
	movq	%rdx, 8(%rsp)	# tmp121,
	movq	-48(%rbp), %rdx	# rv, tmp122
	movq	%rdx, 16(%rsp)	# tmp122,
	movq	%rax, %rdi	# tmp119,
	call	etardouble	#
	.loc 1 8705 0
	jmp	.L1802	#
.L1808:
	.loc 1 8709 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.505
	andl	$16777216, %eax	#, D.24253
	testl	%eax, %eax	# D.24253
	jne	.L1803	#,
	.loc 1 8709 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# array, tmp123
	movq	-64(%rbp), %rdx	# rv, tmp124
	movq	%rdx, (%rsp)	# tmp124,
	movq	-56(%rbp), %rdx	# rv, tmp125
	movq	%rdx, 8(%rsp)	# tmp125,
	movq	-48(%rbp), %rdx	# rv, tmp126
	movq	%rdx, 16(%rsp)	# tmp126,
	movq	%rax, %rdi	# tmp123,
	call	etarldouble	#
	jmp	.L1804	#
.L1803:
	.loc 1 8709 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.506
	andl	$16777216, %eax	#, D.24253
	testl	%eax, %eax	# D.24253
	je	.L1805	#,
	.loc 1 8709 0 discriminator 1
	movq	-72(%rbp), %rax	# array, tmp127
	movq	-64(%rbp), %rdx	# rv, tmp128
	movq	%rdx, (%rsp)	# tmp128,
	movq	-56(%rbp), %rdx	# rv, tmp129
	movq	%rdx, 8(%rsp)	# tmp129,
	movq	-48(%rbp), %rdx	# rv, tmp130
	movq	%rdx, 16(%rsp)	# tmp130,
	movq	%rax, %rdi	# tmp127,
	call	etartdouble	#
	jmp	.L1804	#
.L1805:
	.loc 1 8709 0 discriminator 2
	movl	$__FUNCTION__.16587, %edx	#,
	movl	$8709, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1804:
	.loc 1 8710 0 is_stmt 1
	jmp	.L1802	#
.L1797:
	.loc 1 8713 0
	movl	$__FUNCTION__.16587, %edx	#,
	movl	$8713, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1802:
	.loc 1 8716 0
	movq	-72(%rbp), %rcx	# array, tmp131
	movl	-84(%rbp), %edx	# length, tmp132
	movq	-104(%rbp), %rax	# die, tmp133
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp133,
	call	add_AT_float	#
.LBE66:
.LBE65:
	.loc 1 8728 0
	jmp	.L1785	#
.L1796:
.LBB68:
	.loc 1 8725 0
	movq	-112(%rbp), %rax	# rtl, tmp134
	movq	16(%rax), %rax	# rtl_1(D)->fld[1].rtwint, D.24252
	.loc 1 8724 0
	movq	%rax, %rcx	# D.24252, D.24250
	.loc 1 8725 0
	movq	-112(%rbp), %rax	# rtl, tmp135
	movq	24(%rax), %rax	# rtl_1(D)->fld[2].rtwint, D.24252
	.loc 1 8724 0
	movq	%rax, %rdx	# D.24252, D.24250
	movq	-104(%rbp), %rax	# die, tmp136
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp136,
	call	add_AT_long_long	#
.LBE68:
	.loc 1 8728 0
	jmp	.L1785	#
.L1790:
	.loc 1 8731 0
	movq	-112(%rbp), %rax	# rtl, tmp137
	movq	8(%rax), %rdx	# rtl_1(D)->fld[0].rtstr, D.24254
	movq	-104(%rbp), %rax	# die, tmp138
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp138,
	call	add_AT_string	#
	.loc 1 8732 0
	jmp	.L1785	#
.L1791:
	.loc 1 8737 0
	movq	-112(%rbp), %rdx	# rtl, tmp139
	movq	-104(%rbp), %rax	# die, tmp140
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp140,
	call	add_AT_addr	#
	.loc 1 8738 0
	movq	used_rtx_varray(%rip), %rax	# used_rtx_varray, used_rtx_varray.507
	movq	8(%rax), %rdx	# used_rtx_varray.507_29->elements_used, D.24250
	movq	used_rtx_varray(%rip), %rax	# used_rtx_varray, used_rtx_varray.508
	movq	(%rax), %rax	# used_rtx_varray.508_31->num_elements, D.24250
	cmpq	%rax, %rdx	# D.24250, D.24250
	jb	.L1807	#,
	.loc 1 8738 0 is_stmt 0 discriminator 1
	movq	used_rtx_varray(%rip), %rax	# used_rtx_varray, used_rtx_varray.509
	movq	(%rax), %rax	# used_rtx_varray.509_33->num_elements, D.24250
	leaq	(%rax,%rax), %rdx	#, D.24250
	movq	used_rtx_varray(%rip), %rax	# used_rtx_varray, used_rtx_varray.510
	movq	%rdx, %rsi	# D.24250,
	movq	%rax, %rdi	# used_rtx_varray.510,
	call	varray_grow	#
	movq	%rax, used_rtx_varray(%rip)	# used_rtx_varray.511, used_rtx_varray
.L1807:
	.loc 1 8738 0 discriminator 2
	movq	used_rtx_varray(%rip), %rcx	# used_rtx_varray, used_rtx_varray.512
	movq	used_rtx_varray(%rip), %rax	# used_rtx_varray, used_rtx_varray.513
	movq	8(%rax), %rdx	# used_rtx_varray.513_39->elements_used, D.24250
	leaq	1(%rdx), %rsi	#, D.24250
	movq	%rsi, 8(%rax)	# D.24250, used_rtx_varray.513_39->elements_used
	addq	$4, %rdx	#, tmp141
	movq	-112(%rbp), %rax	# rtl, tmp142
	movq	%rax, (%rcx,%rdx,8)	# tmp142, used_rtx_varray.512_38->data.rtx
	.loc 1 8739 0 is_stmt 1 discriminator 2
	jmp	.L1785	#
.L1786:
	.loc 1 8757 0
	movl	$__FUNCTION__.16587, %edx	#,
	movl	$8757, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1809:
	.loc 1 8753 0
	nop
.L1785:
	.loc 1 8760 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE178:
	.size	add_const_value_attribute, .-add_const_value_attribute
	.type	rtl_for_decl_location, @function
rtl_for_decl_location:
.LFB179:
	.loc 1 8765 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# decl, decl
	.loc 1 8842 0
	movq	-88(%rbp), %rax	# decl, tmp132
	movq	144(%rax), %rax	# decl_9(D)->decl.rtl, D.24258
	testq	%rax, %rax	# D.24258
	je	.L1811	#,
	.loc 1 8842 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# decl, tmp133
	movq	144(%rax), %rax	# decl_9(D)->decl.rtl, D.24258
	testq	%rax, %rax	# D.24258
	je	.L1812	#,
	movq	-88(%rbp), %rax	# decl, tmp134
	movq	144(%rax), %rax	# decl_9(D)->decl.rtl, iftmp.515
	jmp	.L1814	#
.L1812:
	.loc 1 8842 0 discriminator 2
	movq	-88(%rbp), %rax	# decl, tmp135
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp135,
	call	make_decl_rtl	#
	movq	-88(%rbp), %rax	# decl, tmp136
	movq	144(%rax), %rax	# decl_9(D)->decl.rtl, iftmp.515
	jmp	.L1814	#
.L1811:
	movl	$0, %eax	#, iftmp.514
.L1814:
	.loc 1 8842 0 discriminator 3
	movq	%rax, -72(%rbp)	# iftmp.514, rtl
	.loc 1 8846 0 is_stmt 1 discriminator 3
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.516
	testl	%eax, %eax	# reload_completed.516
	jne	.L1815	#,
	.loc 1 8848 0
	cmpq	$0, -72(%rbp)	#, rtl
	je	.L1816	#,
	.loc 1 8849 0
	movq	-72(%rbp), %rax	# rtl, tmp137
	movzwl	(%rax), %eax	# rtl_16->code, D.24259
	cmpw	$67, %ax	#, D.24259
	je	.L1817	#,
	.loc 1 8849 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# rtl, tmp138
	movzwl	(%rax), %eax	# rtl_16->code, D.24259
	cmpw	$68, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp139
	movzwl	(%rax), %eax	# rtl_16->code, D.24259
	cmpw	$54, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp140
	movzwl	(%rax), %eax	# rtl_16->code, D.24259
	cmpw	$55, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp141
	movzwl	(%rax), %eax	# rtl_16->code, D.24259
	cmpw	$58, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp142
	movzwl	(%rax), %eax	# rtl_16->code, D.24259
	cmpw	$134, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp143
	movzwl	(%rax), %eax	# rtl_16->code, D.24259
	cmpw	$56, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp144
	movzwl	(%rax), %eax	# rtl_16->code, D.24259
	cmpw	$140, %ax	#, D.24259
	je	.L1817	#,
	.loc 1 8850 0 is_stmt 1
	movq	-72(%rbp), %rax	# rtl, tmp145
	movzwl	(%rax), %eax	# rtl_16->code, D.24259
	cmpw	$66, %ax	#, D.24259
	jne	.L1816	#,
	.loc 1 8851 0
	movq	-72(%rbp), %rax	# rtl, tmp146
	movq	8(%rax), %rax	# rtl_16->fld[0].rtx, D.24258
	movzwl	(%rax), %eax	# _27->code, D.24259
	cmpw	$67, %ax	#, D.24259
	je	.L1817	#,
	.loc 1 8851 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# rtl, tmp147
	movq	8(%rax), %rax	# rtl_16->fld[0].rtx, D.24258
	movzwl	(%rax), %eax	# _29->code, D.24259
	cmpw	$68, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp148
	movq	8(%rax), %rax	# rtl_16->fld[0].rtx, D.24258
	movzwl	(%rax), %eax	# _31->code, D.24259
	cmpw	$54, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp149
	movq	8(%rax), %rax	# rtl_16->fld[0].rtx, D.24258
	movzwl	(%rax), %eax	# _33->code, D.24259
	cmpw	$55, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp150
	movq	8(%rax), %rax	# rtl_16->fld[0].rtx, D.24258
	movzwl	(%rax), %eax	# _35->code, D.24259
	cmpw	$58, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp151
	movq	8(%rax), %rax	# rtl_16->fld[0].rtx, D.24258
	movzwl	(%rax), %eax	# _37->code, D.24259
	cmpw	$134, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp152
	movq	8(%rax), %rax	# rtl_16->fld[0].rtx, D.24258
	movzwl	(%rax), %eax	# _39->code, D.24259
	cmpw	$56, %ax	#, D.24259
	je	.L1817	#,
	movq	-72(%rbp), %rax	# rtl, tmp153
	movq	8(%rax), %rax	# rtl_16->fld[0].rtx, D.24258
	movzwl	(%rax), %eax	# _41->code, D.24259
	cmpw	$140, %ax	#, D.24259
	jne	.L1816	#,
.L1817:
	.loc 1 8854 0 is_stmt 1
	movq	-72(%rbp), %rax	# rtl, tmp154
	movq	%rax, %rdi	# tmp154,
	call	i386_simplify_dwarf_addr	#
	movq	%rax, -72(%rbp)	# tmp155, rtl
	.loc 1 8856 0
	movq	-72(%rbp), %rax	# rtl, D.24257
	jmp	.L1818	#
.L1816:
	.loc 1 8858 0
	movq	$0, -72(%rbp)	#, rtl
	jmp	.L1819	#
.L1815:
	.loc 1 8860 0
	movq	-88(%rbp), %rax	# decl, tmp156
	movzbl	16(%rax), %eax	# decl_9(D)->common.code, D.24260
	cmpb	$35, %al	#, D.24260
	jne	.L1819	#,
	.loc 1 8862 0
	cmpq	$0, -72(%rbp)	#, rtl
	je	.L1820	#,
	.loc 1 8862 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# rtl, tmp157
	movq	%rax, %rdi	# tmp157,
	call	is_pseudo_reg	#
	testl	%eax, %eax	# D.24261
	je	.L1819	#,
.L1820:
.LBB69:
	.loc 1 8864 0 is_stmt 1
	movq	-88(%rbp), %rax	# decl, tmp158
	movq	8(%rax), %rax	# decl_9(D)->common.type, D.24262
	movq	%rax, %rdi	# D.24262,
	call	type_main_variant	#
	movq	%rax, -64(%rbp)	# tmp159, declared_type
	.loc 1 8865 0
	movq	-88(%rbp), %rax	# decl, tmp160
	movq	104(%rax), %rax	# decl_9(D)->decl.initial, D.24262
	movq	%rax, %rdi	# D.24262,
	call	type_main_variant	#
	movq	%rax, -56(%rbp)	# tmp161, passed_type
	.loc 1 8870 0
	movq	-64(%rbp), %rax	# declared_type, tmp162
	cmpq	-56(%rbp), %rax	# passed_type, tmp162
	jne	.L1821	#,
	.loc 1 8871 0
	movq	-88(%rbp), %rax	# decl, tmp163
	movq	160(%rax), %rax	# decl_9(D)->decl.u2.r, tmp164
	movq	%rax, -72(%rbp)	# tmp164, rtl
	jmp	.L1822	#
.L1821:
	.loc 1 8873 0
	movq	-64(%rbp), %rax	# declared_type, tmp165
	movzbl	16(%rax), %eax	# declared_type_49->common.code, D.24260
	.loc 1 8872 0
	cmpb	$6, %al	#, D.24260
	jne	.L1822	#,
	.loc 1 8874 0
	movq	-64(%rbp), %rax	# declared_type, tmp166
	movzbl	61(%rax), %eax	# *declared_type_49, tmp169
	shrb	%al	# D.24263
	movzbl	%al, %eax	# D.24263, D.24261
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.24260
	.loc 1 8875 0
	movq	-56(%rbp), %rax	# passed_type, tmp171
	movzbl	61(%rax), %eax	# *passed_type_51, tmp174
	shrb	%al	# D.24263
	movzbl	%al, %eax	# D.24263, D.24261
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24260
	.loc 1 8874 0
	cmpb	%al, %dl	# D.24260, D.24260
	ja	.L1822	#,
	.loc 1 8876 0
	movq	-88(%rbp), %rax	# decl, tmp176
	movq	160(%rax), %rax	# decl_9(D)->decl.u2.r, tmp177
	movq	%rax, -72(%rbp)	# tmp177, rtl
.LBE69:
	.loc 1 8863 0
	jmp	.L1829	#
.L1822:
.L1829:
	nop
.L1819:
	.loc 1 8913 0
	cmpq	$0, -72(%rbp)	#, rtl
	je	.L1823	#,
	.loc 1 8915 0
	movq	-72(%rbp), %rax	# rtl, tmp178
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp178,
	call	eliminate_regs	#
	movq	%rax, -72(%rbp)	# tmp179, rtl
	jmp	.L1824	#
.L1823:
	.loc 1 8925 0
	movq	-88(%rbp), %rax	# decl, tmp180
	movzbl	16(%rax), %eax	# decl_9(D)->common.code, D.24260
	cmpb	$34, %al	#, D.24260
	jne	.L1824	#,
	.loc 1 8925 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# decl, tmp181
	movq	104(%rax), %rax	# decl_9(D)->decl.initial, D.24262
	testq	%rax, %rax	# D.24262
	je	.L1824	#,
	.loc 1 8929 0 is_stmt 1
	movq	-88(%rbp), %rax	# decl, tmp182
	movq	104(%rax), %rax	# decl_9(D)->decl.initial, D.24262
	movzbl	16(%rax), %eax	# _64->common.code, D.24260
	cmpb	$29, %al	#, D.24260
	jne	.L1825	#,
	.loc 1 8930 0
	movq	-88(%rbp), %rax	# decl, tmp183
	movq	8(%rax), %rax	# decl_9(D)->common.type, D.24262
	movzbl	16(%rax), %eax	# _66->common.code, D.24260
	cmpb	$18, %al	#, D.24260
	jne	.L1825	#,
.LBB70:
	.loc 1 8932 0
	movq	-88(%rbp), %rax	# decl, tmp184
	movq	8(%rax), %rax	# decl_9(D)->common.type, tmp185
	movq	%rax, -48(%rbp)	# tmp185, arrtype
	.loc 1 8933 0
	movq	-48(%rbp), %rax	# arrtype, tmp186
	movq	8(%rax), %rax	# arrtype_68->common.type, tmp187
	movq	%rax, -40(%rbp)	# tmp187, enttype
	.loc 1 8934 0
	movq	-48(%rbp), %rax	# arrtype, tmp188
	movq	24(%rax), %rax	# arrtype_68->type.values, tmp189
	movq	%rax, -32(%rbp)	# tmp189, domain
	.loc 1 8935 0
	movq	-88(%rbp), %rax	# decl, tmp190
	movq	104(%rax), %rax	# decl_9(D)->decl.initial, tmp191
	movq	%rax, -24(%rbp)	# tmp191, init
	.loc 1 8936 0
	movq	-40(%rbp), %rax	# enttype, tmp192
	movzbl	61(%rax), %eax	# *enttype_69, tmp195
	shrb	%al	# D.24263
	movzbl	%al, %eax	# D.24263, tmp196
	movl	%eax, -76(%rbp)	# tmp196, mode
	.loc 1 8938 0
	movl	-76(%rbp), %eax	# mode, mode.519
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.24264
	cmpl	$1, %eax	#, D.24264
	jne	.L1826	#,
	.loc 1 8938 0 is_stmt 0 discriminator 1
	movl	-76(%rbp), %eax	# mode, mode.520
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.24260
	cmpb	$1, %al	#, D.24260
	jne	.L1826	#,
	.loc 1 8939 0 is_stmt 1
	cmpq	$0, -32(%rbp)	#, domain
	je	.L1826	#,
	.loc 1 8940 0
	movq	-32(%rbp), %rax	# domain, tmp199
	movq	104(%rax), %rax	# domain_70->type.minval, D.24262
	movq	%rax, %rdi	# D.24262,
	call	integer_zerop	#
	testl	%eax, %eax	# D.24261
	je	.L1826	#,
	.loc 1 8942 0
	movq	-24(%rbp), %rax	# init, tmp200
	movl	32(%rax), %eax	# init_71->string.length, D.24261
	subl	$1, %eax	#, D.24261
	.loc 1 8941 0
	movslq	%eax, %rdx	# D.24261, D.24265
	movq	-32(%rbp), %rax	# domain, tmp201
	movq	112(%rax), %rax	# domain_70->type.maxval, D.24262
	movq	%rdx, %rsi	# D.24265,
	movq	%rax, %rdi	# D.24262,
	call	compare_tree_int	#
	testl	%eax, %eax	# D.24261
	jne	.L1826	#,
	.loc 1 8943 0
	movq	-24(%rbp), %rax	# init, tmp202
	movl	32(%rax), %eax	# init_71->string.length, D.24261
	movslq	%eax, %rbx	# D.24261, D.24265
	.loc 1 8944 0
	movq	-24(%rbp), %rax	# init, tmp203
	movq	40(%rax), %rax	# init_71->string.pointer, D.24266
	movq	%rax, %rdi	# D.24266,
	call	strlen	#
	addq	$1, %rax	#, D.24265
	.loc 1 8943 0
	cmpq	%rax, %rbx	# D.24265, D.24265
	jne	.L1826	#,
	.loc 1 8945 0
	movq	-24(%rbp), %rax	# init, tmp204
	movq	40(%rax), %rax	# init_71->string.pointer, D.24266
	movq	%rax, %rdx	# D.24266,
	movl	$0, %esi	#,
	movl	$57, %edi	#,
	call	gen_rtx_fmt_s	#
	movq	%rax, -72(%rbp)	# tmp205, rtl
.LBE70:
	.loc 1 8931 0
	jmp	.L1824	#
.L1826:
	jmp	.L1824	#
.L1825:
	.loc 1 8950 0
	movq	-88(%rbp), %rax	# decl, tmp206
	movq	104(%rax), %rax	# decl_9(D)->decl.initial, D.24262
	movzbl	16(%rax), %eax	# _92->common.code, D.24260
	cmpb	$25, %al	#, D.24260
	je	.L1827	#,
	.loc 1 8951 0
	movq	-88(%rbp), %rax	# decl, tmp207
	movq	104(%rax), %rax	# decl_9(D)->decl.initial, D.24262
	movzbl	16(%rax), %eax	# _94->common.code, D.24260
	cmpb	$26, %al	#, D.24260
	jne	.L1824	#,
.L1827:
	.loc 1 8953 0
	movq	-88(%rbp), %rax	# decl, tmp208
	movq	104(%rax), %rax	# decl_9(D)->decl.initial, D.24262
	movl	$3, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24262,
	call	expand_expr	#
	movq	%rax, -72(%rbp)	# tmp209, rtl
	.loc 1 8956 0
	cmpq	$0, -72(%rbp)	#, rtl
	je	.L1824	#,
	.loc 1 8956 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# rtl, tmp210
	movzwl	(%rax), %eax	# rtl_97->code, D.24259
	cmpw	$66, %ax	#, D.24259
	jne	.L1824	#,
	.loc 1 8957 0 is_stmt 1
	movl	$__FUNCTION__.16619, %edx	#,
	movl	$8957, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1824:
	.loc 1 8962 0
	cmpq	$0, -72(%rbp)	#, rtl
	je	.L1828	#,
	.loc 1 8963 0
	movq	-72(%rbp), %rax	# rtl, tmp211
	movq	%rax, %rdi	# tmp211,
	call	i386_simplify_dwarf_addr	#
	movq	%rax, -72(%rbp)	# tmp212, rtl
.L1828:
	.loc 1 8965 0
	movq	-72(%rbp), %rax	# rtl, D.24257
.L1818:
	.loc 1 8966 0
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE179:
	.size	rtl_for_decl_location, .-rtl_for_decl_location
	.type	add_location_or_const_value_attribute, @function
add_location_or_const_value_attribute:
.LFB180:
	.loc 1 8983 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movq	%rsi, -32(%rbp)	# decl, decl
	.loc 1 8986 0
	movq	-32(%rbp), %rax	# decl, tmp64
	movzbl	16(%rax), %eax	# decl_1(D)->common.code, D.24267
	testb	%al, %al	# D.24267
	jne	.L1831	#,
	.loc 1 8987 0
	jmp	.L1830	#
.L1831:
	.loc 1 8988 0
	movq	-32(%rbp), %rax	# decl, tmp65
	movzbl	16(%rax), %eax	# decl_1(D)->common.code, D.24267
	cmpb	$34, %al	#, D.24267
	je	.L1833	#,
	.loc 1 8988 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# decl, tmp66
	movzbl	16(%rax), %eax	# decl_1(D)->common.code, D.24267
	cmpb	$35, %al	#, D.24267
	je	.L1833	#,
	.loc 1 8989 0 is_stmt 1
	movl	$__FUNCTION__.16625, %edx	#,
	movl	$8989, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1833:
	.loc 1 8991 0
	movq	-32(%rbp), %rax	# decl, tmp67
	movq	%rax, %rdi	# tmp67,
	call	rtl_for_decl_location	#
	movq	%rax, -8(%rbp)	# tmp68, rtl
	.loc 1 8992 0
	cmpq	$0, -8(%rbp)	#, rtl
	jne	.L1834	#,
	.loc 1 8993 0
	jmp	.L1830	#
.L1834:
	.loc 1 8998 0
	movq	-8(%rbp), %rax	# rtl, tmp69
	movq	%rax, %rdi	# tmp69,
	call	avoid_constant_pool_reference	#
	movq	%rax, -8(%rbp)	# tmp70, rtl
	.loc 1 9000 0
	movq	-8(%rbp), %rax	# rtl, tmp71
	movzwl	(%rax), %eax	# rtl_6->code, D.24268
	movzwl	%ax, %eax	# D.24268, D.24269
	subl	$54, %eax	#, tmp72
	cmpl	$21, %eax	#, tmp72
	ja	.L1835	#,
	movl	%eax, %eax	# tmp72, tmp73
	movq	.L1837(,%rax,8), %rax	#, tmp74
	jmp	*%rax	# tmp74
	.section	.rodata
	.align 8
	.align 4
.L1837:
	.quad	.L1836
	.quad	.L1836
	.quad	.L1835
	.quad	.L1836
	.quad	.L1836
	.quad	.L1835
	.quad	.L1835
	.quad	.L1838
	.quad	.L1835
	.quad	.L1838
	.quad	.L1835
	.quad	.L1838
	.quad	.L1838
	.quad	.L1836
	.quad	.L1836
	.quad	.L1835
	.quad	.L1840
	.quad	.L1835
	.quad	.L1835
	.quad	.L1835
	.quad	.L1835
	.quad	.L1836
	.text
.L1836:
	.loc 1 9015 0
	movq	-8(%rbp), %rdx	# rtl, tmp75
	movq	-24(%rbp), %rax	# die, tmp76
	movq	%rdx, %rsi	# tmp75,
	movq	%rax, %rdi	# tmp76,
	call	add_const_value_attribute	#
	.loc 1 9016 0
	jmp	.L1830	#
.L1838:
	.loc 1 9022 0
	movq	-8(%rbp), %rdx	# rtl, tmp77
	movq	-24(%rbp), %rax	# die, tmp78
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp78,
	call	add_AT_location_description	#
	.loc 1 9023 0
	jmp	.L1830	#
.L1835:
	.loc 1 9026 0
	movl	$__FUNCTION__.16625, %edx	#,
	movl	$9026, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1840:
	.loc 1 9005 0
	nop
.L1830:
	.loc 1 9028 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE180:
	.size	add_location_or_const_value_attribute, .-add_location_or_const_value_attribute
	.type	tree_add_const_value_attribute, @function
tree_add_const_value_attribute:
.LFB181:
	.loc 1 9038 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# var_die, var_die
	movq	%rsi, -32(%rbp)	# decl, decl
	.loc 1 9039 0
	movq	-32(%rbp), %rax	# decl, tmp73
	movq	104(%rax), %rax	# decl_1(D)->decl.initial, tmp74
	movq	%rax, -16(%rbp)	# tmp74, init
	.loc 1 9040 0
	movq	-32(%rbp), %rax	# decl, tmp75
	movq	8(%rax), %rax	# decl_1(D)->common.type, tmp76
	movq	%rax, -8(%rbp)	# tmp76, type
	.loc 1 9042 0
	movq	-32(%rbp), %rax	# decl, tmp77
	movzbl	17(%rax), %eax	# *decl_1(D), D.24270
	andl	$16, %eax	#, D.24270
	testb	%al, %al	# D.24270
	je	.L1842	#,
	.loc 1 9042 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# decl, tmp78
	movzbl	17(%rax), %eax	# *decl_1(D), D.24270
	andl	$8, %eax	#, D.24270
	testb	%al, %al	# D.24270
	jne	.L1842	#,
	cmpq	$0, -16(%rbp)	#, init
	je	.L1842	#,
	.loc 1 9043 0 is_stmt 1
	movq	-8(%rbp), %rdx	# type, tmp79
	movq	-16(%rbp), %rax	# init, tmp80
	movq	%rdx, %rsi	# tmp79,
	movq	%rax, %rdi	# tmp80,
	call	initializer_constant_valid_p	#
	movq	global_trees+112(%rip), %rdx	# global_trees, D.24271
	cmpq	%rdx, %rax	# D.24271, D.24271
	jne	.L1842	#,
	.loc 1 9043 0 is_stmt 0 discriminator 1
	nop
	.loc 1 9048 0 is_stmt 1 discriminator 1
	movq	-8(%rbp), %rax	# type, tmp81
	movzbl	16(%rax), %eax	# type_3->common.code, D.24270
	movzbl	%al, %eax	# D.24270, D.24272
	cmpl	$6, %eax	#, D.24272
	je	.L1845	#,
	.loc 1 9048 0 is_stmt 0
	jmp	.L1841	#
.L1842:
	.loc 1 9046 0 is_stmt 1
	jmp	.L1841	#
.L1845:
	.loc 1 9051 0
	movq	-16(%rbp), %rax	# init, tmp82
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp82,
	call	host_integerp	#
	testl	%eax, %eax	# D.24273
	je	.L1846	#,
	.loc 1 9053 0
	movq	-16(%rbp), %rax	# init, tmp83
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	tree_low_cst	#
	.loc 1 9052 0
	movq	%rax, %rdx	# D.24274, D.24275
	movq	-24(%rbp), %rax	# var_die, tmp84
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp84,
	call	add_AT_unsigned	#
	jmp	.L1847	#
.L1846:
	.loc 1 9055 0
	movq	-16(%rbp), %rax	# init, tmp85
	movq	32(%rax), %rcx	# init_2->int_cst.int_cst.low, D.24275
	.loc 1 9056 0
	movq	-16(%rbp), %rax	# init, tmp86
	movq	40(%rax), %rax	# init_2->int_cst.int_cst.high, D.24274
	.loc 1 9055 0
	movq	%rax, %rdx	# D.24274, D.24275
	movq	-24(%rbp), %rax	# var_die, tmp87
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	add_AT_long_long	#
.L1847:
	.loc 1 9058 0
	nop
.L1841:
	.loc 1 9062 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE181:
	.size	tree_add_const_value_attribute, .-tree_add_const_value_attribute
	.type	add_name_attribute, @function
add_name_attribute:
.LFB182:
	.loc 1 9071 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# die, die
	movq	%rsi, -16(%rbp)	# name_string, name_string
	.loc 1 9072 0
	cmpq	$0, -16(%rbp)	#, name_string
	je	.L1848	#,
	.loc 1 9072 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# name_string, tmp62
	movzbl	(%rax), %eax	# *name_string_2(D), D.24276
	testb	%al, %al	# D.24276
	je	.L1848	#,
	.loc 1 9074 0 is_stmt 1
	movq	demangle_name_func(%rip), %rax	# demangle_name_func, demangle_name_func.537
	testq	%rax, %rax	# demangle_name_func.537
	je	.L1850	#,
	.loc 1 9075 0
	movq	demangle_name_func(%rip), %rax	# demangle_name_func, demangle_name_func.538
	movq	-16(%rbp), %rdx	# name_string, tmp63
	movq	%rdx, %rdi	# tmp63,
	call	*%rax	# demangle_name_func.538
	movq	%rax, -16(%rbp)	# tmp64, name_string
.L1850:
	.loc 1 9077 0
	movq	-16(%rbp), %rdx	# name_string, tmp65
	movq	-8(%rbp), %rax	# die, tmp66
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp66,
	call	add_AT_string	#
.L1848:
	.loc 1 9079 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE182:
	.size	add_name_attribute, .-add_name_attribute
	.type	add_bound_info, @function
add_bound_info:
.LFB183:
	.loc 1 9089 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -72(%rbp)	# subrange_die, subrange_die
	movl	%esi, -76(%rbp)	# bound_attr, bound_attr
	movq	%rdx, -88(%rbp)	# bound, bound
	.loc 1 9090 0
	movq	-88(%rbp), %rax	# bound, tmp88
	movzbl	16(%rax), %eax	# bound_4(D)->common.code, D.24277
	movzbl	%al, %eax	# D.24277, D.24278
	cmpl	$35, %eax	#, D.24278
	ja	.L1853	#,
	cmpl	$34, %eax	#, D.24278
	jae	.L1854	#,
	testl	%eax, %eax	# D.24278
	je	.L1873	#,
	cmpl	$25, %eax	#, D.24278
	je	.L1856	#,
	jmp	.L1852	#
.L1853:
	cmpl	$114, %eax	#, D.24278
	jb	.L1852	#,
	cmpl	$117, %eax	#, D.24278
	jbe	.L1857	#,
	cmpl	$118, %eax	#, D.24278
	je	.L1858	#,
	jmp	.L1852	#
.L1856:
	.loc 1 9097 0
	movq	-88(%rbp), %rax	# bound, tmp89
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp89,
	call	host_integerp	#
	testl	%eax, %eax	# D.24279
	je	.L1860	#,
	.loc 1 9098 0
	cmpl	$34, -76(%rbp)	#, bound_attr
	jne	.L1861	#,
	.loc 1 9099 0
	call	is_c_family	#
	testl	%eax, %eax	# D.24279
	jne	.L1862	#,
	.loc 1 9099 0 is_stmt 0 discriminator 2
	call	is_java	#
	testl	%eax, %eax	# D.24279
	je	.L1863	#,
.L1862:
	.loc 1 9099 0 discriminator 1
	movq	-88(%rbp), %rax	# bound, tmp90
	movq	%rax, %rdi	# tmp90,
	call	integer_zerop	#
	testl	%eax, %eax	# D.24279
	jne	.L1864	#,
.L1863:
	.loc 1 9100 0 is_stmt 1
	call	is_fortran	#
	testl	%eax, %eax	# D.24279
	je	.L1861	#,
	.loc 1 9100 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# bound, tmp91
	movq	%rax, %rdi	# tmp91,
	call	integer_onep	#
	testl	%eax, %eax	# D.24279
	je	.L1861	#,
.L1864:
	.loc 1 9097 0 is_stmt 1
	jmp	.L1860	#
.L1861:
	.loc 1 9104 0
	movq	-88(%rbp), %rax	# bound, tmp92
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp92,
	call	tree_low_cst	#
	movq	%rax, %rdx	# D.24280, D.24281
	movl	-76(%rbp), %ecx	# bound_attr, tmp93
	movq	-72(%rbp), %rax	# subrange_die, tmp94
	movl	%ecx, %esi	# tmp93,
	movq	%rax, %rdi	# tmp94,
	call	add_AT_unsigned	#
	.loc 1 9105 0
	jmp	.L1851	#
.L1860:
	jmp	.L1851	#
.L1857:
	.loc 1 9111 0
	movq	-88(%rbp), %rax	# bound, tmp95
	movq	32(%rax), %rdx	# bound_4(D)->exp.operands, D.24282
	movl	-76(%rbp), %ecx	# bound_attr, tmp96
	movq	-72(%rbp), %rax	# subrange_die, tmp97
	movl	%ecx, %esi	# tmp96,
	movq	%rax, %rdi	# tmp97,
	call	add_bound_info	#
	.loc 1 9112 0
	jmp	.L1851	#
.L1858:
	.loc 1 9137 0
	movq	-88(%rbp), %rax	# bound, tmp98
	addq	$48, %rax	#, D.24283
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_18], D.24284
	testq	%rax, %rax	# D.24284
	je	.L1865	#,
	.loc 1 9138 0
	movl	optimize(%rip), %eax	# optimize, optimize.522
	testl	%eax, %eax	# optimize.522
	je	.L1866	#,
	.loc 1 9138 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# bound, tmp99
	addq	$48, %rax	#, D.24283
	movq	(%rax), %rax	# MEM[(struct rtx_def * *)_21], D.24284
	movzwl	(%rax), %eax	# _22->code, D.24285
	cmpw	$66, %ax	#, D.24285
	jne	.L1865	#,
.L1866:
.LBB71:
	.loc 1 9140 0 is_stmt 1
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.523
	movq	%rax, %rdi	# current_function_decl.523,
	call	lookup_decl_die	#
	movq	%rax, -48(%rbp)	# tmp100, ctx
	.loc 1 9141 0
	movq	-88(%rbp), %rdx	# bound, tmp101
	movq	-48(%rbp), %rax	# ctx, tmp102
	movq	%rax, %rsi	# tmp102,
	movl	$52, %edi	#,
	call	new_die	#
	movq	%rax, -40(%rbp)	# tmp103, decl_die
	.loc 1 9142 0
	movq	-88(%rbp), %rax	# bound, tmp104
	movq	48(%rax), %rax	# bound_4(D)->exp.operands, tmp105
	movq	%rax, -64(%rbp)	# tmp105, loc
	.loc 1 9146 0
	movq	-64(%rbp), %rax	# loc, tmp106
	movzwl	(%rax), %eax	# loc_27->code, D.24285
	cmpw	$66, %ax	#, D.24285
	jne	.L1867	#,
.LBB72:
	.loc 1 9148 0
	movq	-64(%rbp), %rax	# loc, tmp107
	movq	8(%rax), %rax	# loc_27->fld[0].rtx, D.24284
	movq	-88(%rbp), %rdx	# bound, tmp108
	movq	%rdx, %rsi	# tmp108,
	movq	%rax, %rdi	# D.24284,
	call	fix_lexical_addr	#
	movq	%rax, -32(%rbp)	# tmp109, new_addr
	.loc 1 9150 0
	movq	-64(%rbp), %rax	# loc, tmp110
	movq	8(%rax), %rax	# loc_27->fld[0].rtx, D.24284
	cmpq	-32(%rbp), %rax	# new_addr, D.24284
	je	.L1867	#,
	.loc 1 9151 0
	movq	-64(%rbp), %rax	# loc, tmp111
	movzbl	2(%rax), %eax	# loc_27->mode, D.24277
	movzbl	%al, %eax	# D.24277, D.24286
	movq	-32(%rbp), %rdx	# new_addr, tmp112
	movq	%rdx, %rsi	# tmp112,
	movl	%eax, %edi	# D.24286,
	call	gen_rtx_MEM	#
	movq	%rax, -64(%rbp)	# tmp113, loc
.L1867:
.LBE72:
	.loc 1 9154 0
	movq	-40(%rbp), %rax	# decl_die, tmp114
	movl	$1, %edx	#,
	movl	$52, %esi	#,
	movq	%rax, %rdi	# tmp114,
	call	add_AT_flag	#
	.loc 1 9155 0
	movq	-88(%rbp), %rax	# bound, tmp115
	movq	8(%rax), %rsi	# bound_4(D)->common.type, D.24282
	movq	-48(%rbp), %rdx	# ctx, tmp116
	movq	-40(%rbp), %rax	# decl_die, tmp117
	movq	%rdx, %r8	# tmp116,
	movl	$0, %ecx	#,
	movl	$1, %edx	#,
	movq	%rax, %rdi	# tmp117,
	call	add_type_attribute	#
	.loc 1 9156 0
	movq	-64(%rbp), %rdx	# loc, tmp118
	movq	-40(%rbp), %rax	# decl_die, tmp119
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp119,
	call	add_AT_location_description	#
	.loc 1 9157 0
	movq	-40(%rbp), %rdx	# decl_die, tmp120
	movl	-76(%rbp), %ecx	# bound_attr, tmp121
	movq	-72(%rbp), %rax	# subrange_die, tmp122
	movl	%ecx, %esi	# tmp121,
	movq	%rax, %rdi	# tmp122,
	call	add_AT_die_ref	#
.LBE71:
	.loc 1 9161 0
	jmp	.L1851	#
.L1865:
	jmp	.L1851	#
.L1854:
.LBB73:
	.loc 1 9166 0
	movq	-88(%rbp), %rax	# bound, tmp123
	movq	%rax, %rdi	# tmp123,
	call	lookup_decl_die	#
	movq	%rax, -24(%rbp)	# tmp124, decl_die
	.loc 1 9173 0
	cmpq	$0, -24(%rbp)	#, decl_die
	je	.L1868	#,
	.loc 1 9174 0
	movq	-24(%rbp), %rdx	# decl_die, tmp125
	movl	-76(%rbp), %ecx	# bound_attr, tmp126
	movq	-72(%rbp), %rax	# subrange_die, tmp127
	movl	%ecx, %esi	# tmp126,
	movq	%rax, %rdi	# tmp127,
	call	add_AT_die_ref	#
	.loc 1 9175 0
	jmp	.L1851	#
.L1868:
	jmp	.L1851	#
.L1852:
.LBE73:
.LBB74:
	.loc 1 9186 0
	movq	-88(%rbp), %rax	# bound, tmp128
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp128,
	call	loc_descriptor_from_tree	#
	movq	%rax, -16(%rbp)	# tmp129, loc
	.loc 1 9187 0
	cmpq	$0, -16(%rbp)	#, loc
	jne	.L1869	#,
	.loc 1 9188 0
	jmp	.L1851	#
.L1869:
	.loc 1 9190 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.524
	testq	%rax, %rax	# current_function_decl.524
	jne	.L1870	#,
	.loc 1 9191 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, tmp130
	movq	%rax, -56(%rbp)	# tmp130, ctx
	jmp	.L1871	#
.L1870:
	.loc 1 9193 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.525
	movq	%rax, %rdi	# current_function_decl.525,
	call	lookup_decl_die	#
	movq	%rax, -56(%rbp)	# tmp131, ctx
.L1871:
	.loc 1 9200 0
	cmpq	$0, -56(%rbp)	#, ctx
	jne	.L1872	#,
	.loc 1 9201 0
	movq	current_function_decl(%rip), %rcx	# current_function_decl, current_function_decl.526
	movq	-88(%rbp), %rax	# bound, tmp132
	movq	8(%rax), %rax	# bound_4(D)->common.type, D.24282
	movq	-88(%rbp), %rdx	# bound, tmp133
	movl	$0, %r8d	#,
	movq	%rax, %rsi	# D.24282,
	movl	$118, %edi	#,
	movl	$0, %eax	#,
	call	build	#
	movq	%rax, -88(%rbp)	# tmp134, bound
.L1872:
	.loc 1 9204 0
	movq	-88(%rbp), %rdx	# bound, tmp135
	movq	-56(%rbp), %rax	# ctx, tmp136
	movq	%rax, %rsi	# tmp136,
	movl	$52, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp137, decl_die
	.loc 1 9205 0
	movq	-8(%rbp), %rax	# decl_die, tmp138
	movl	$1, %edx	#,
	movl	$52, %esi	#,
	movq	%rax, %rdi	# tmp138,
	call	add_AT_flag	#
	.loc 1 9206 0
	movq	-88(%rbp), %rax	# bound, tmp139
	movq	8(%rax), %rsi	# bound_1->common.type, D.24282
	movq	-56(%rbp), %rdx	# ctx, tmp140
	movq	-8(%rbp), %rax	# decl_die, tmp141
	movq	%rdx, %r8	# tmp140,
	movl	$0, %ecx	#,
	movl	$1, %edx	#,
	movq	%rax, %rdi	# tmp141,
	call	add_type_attribute	#
	.loc 1 9207 0
	movq	-16(%rbp), %rdx	# loc, tmp142
	movq	-8(%rbp), %rax	# decl_die, tmp143
	movl	$2, %esi	#,
	movq	%rax, %rdi	# tmp143,
	call	add_AT_loc	#
	.loc 1 9209 0
	movq	-8(%rbp), %rdx	# decl_die, tmp144
	movl	-76(%rbp), %ecx	# bound_attr, tmp145
	movq	-72(%rbp), %rax	# subrange_die, tmp146
	movl	%ecx, %esi	# tmp145,
	movq	%rax, %rdi	# tmp146,
	call	add_AT_die_ref	#
	.loc 1 9210 0
	nop
	jmp	.L1851	#
.L1873:
.LBE74:
	.loc 1 9093 0
	nop
.L1851:
	.loc 1 9213 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE183:
	.size	add_bound_info, .-add_bound_info
	.type	add_subscript_info, @function
add_subscript_info:
.LFB184:
	.loc 1 9222 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# type_die, type_die
	movq	%rsi, -64(%rbp)	# type, type
	.loc 1 9243 0
	movl	$0, -36(%rbp)	#, dimension_number
	jmp	.L1875	#
.L1879:
.LBB75:
	.loc 1 9248 0
	movq	-64(%rbp), %rax	# type, tmp68
	movq	24(%rax), %rax	# type_1->type.values, tmp69
	movq	%rax, -32(%rbp)	# tmp69, domain
	.loc 1 9253 0
	movq	-56(%rbp), %rax	# type_die, tmp70
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp70,
	movl	$33, %edi	#,
	call	new_die	#
	movq	%rax, -24(%rbp)	# tmp71, subrange_die
	.loc 1 9254 0
	cmpq	$0, -32(%rbp)	#, domain
	je	.L1876	#,
	.loc 1 9257 0
	movq	-32(%rbp), %rax	# domain, tmp72
	movq	104(%rax), %rax	# domain_6->type.minval, tmp73
	movq	%rax, -16(%rbp)	# tmp73, lower
	.loc 1 9258 0
	movq	-32(%rbp), %rax	# domain, tmp74
	movq	112(%rax), %rax	# domain_6->type.maxval, tmp75
	movq	%rax, -8(%rbp)	# tmp75, upper
	.loc 1 9261 0
	movq	-32(%rbp), %rax	# domain, tmp76
	movq	8(%rax), %rax	# domain_6->common.type, D.24289
	testq	%rax, %rax	# D.24289
	je	.L1877	#,
	.loc 1 9266 0
	movq	-32(%rbp), %rax	# domain, tmp77
	movzbl	16(%rax), %eax	# domain_6->common.code, D.24288
	cmpb	$6, %al	#, D.24288
	jne	.L1878	#,
	.loc 1 9267 0
	movq	-32(%rbp), %rax	# domain, tmp78
	movq	96(%rax), %rax	# domain_6->type.name, D.24289
	testq	%rax, %rax	# D.24289
	jne	.L1878	#,
	.loc 1 9268 0
	movq	-32(%rbp), %rax	# domain, tmp79
	movq	8(%rax), %rax	# domain_6->common.type, D.24289
	movzbl	16(%rax), %eax	# _14->common.code, D.24288
	cmpb	$6, %al	#, D.24288
	jne	.L1878	#,
	.loc 1 9269 0
	movq	-32(%rbp), %rax	# domain, tmp80
	movq	8(%rax), %rax	# domain_6->common.type, D.24289
	movq	96(%rax), %rax	# _16->type.name, D.24289
	testq	%rax, %rax	# D.24289
	jne	.L1878	#,
	.loc 1 9269 0 is_stmt 0 discriminator 1
	jmp	.L1877	#
.L1878:
	.loc 1 9272 0 is_stmt 1
	movq	-32(%rbp), %rax	# domain, tmp81
	movq	8(%rax), %rsi	# domain_6->common.type, D.24289
	movq	-56(%rbp), %rdx	# type_die, tmp82
	movq	-24(%rbp), %rax	# subrange_die, tmp83
	movq	%rdx, %r8	# tmp82,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp83,
	call	add_type_attribute	#
.L1877:
	.loc 1 9283 0
	movq	-16(%rbp), %rdx	# lower, tmp84
	movq	-24(%rbp), %rax	# subrange_die, tmp85
	movl	$34, %esi	#,
	movq	%rax, %rdi	# tmp85,
	call	add_bound_info	#
	.loc 1 9284 0
	cmpq	$0, -8(%rbp)	#, upper
	je	.L1876	#,
	.loc 1 9285 0
	movq	-8(%rbp), %rdx	# upper, tmp86
	movq	-24(%rbp), %rax	# subrange_die, tmp87
	movl	$47, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	add_bound_info	#
.L1876:
.LBE75:
	.loc 1 9245 0
	movq	-64(%rbp), %rax	# type, tmp88
	movq	8(%rax), %rax	# type_1->common.type, tmp89
	movq	%rax, -64(%rbp)	# tmp89, type
	addl	$1, -36(%rbp)	#, dimension_number
.L1875:
	.loc 1 9244 0 discriminator 1
	movq	-64(%rbp), %rax	# type, tmp90
	movzbl	16(%rax), %eax	# type_1->common.code, D.24288
	.loc 1 9243 0 discriminator 1
	cmpb	$18, %al	#, D.24288
	je	.L1879	#,
	.loc 1 9292 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE184:
	.size	add_subscript_info, .-add_subscript_info
	.type	add_byte_size_attribute, @function
add_byte_size_attribute:
.LFB185:
	.loc 1 9298 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movq	%rsi, -32(%rbp)	# tree_node, tree_node
	.loc 1 9301 0
	movq	-32(%rbp), %rax	# tree_node, tmp66
	movzbl	16(%rax), %eax	# tree_node_2(D)->common.code, D.24290
	movzbl	%al, %eax	# D.24290, D.24291
	cmpl	$37, %eax	#, D.24291
	ja	.L1881	#,
	movl	%eax, %eax	# D.24291, tmp67
	movq	.L1883(,%rax,8), %rax	#, tmp68
	jmp	*%rax	# tmp68
	.section	.rodata
	.align 8
	.align 4
.L1883:
	.quad	.L1882
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1884
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1884
	.quad	.L1884
	.quad	.L1884
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1881
	.quad	.L1885
	.text
.L1882:
	.loc 1 9304 0
	movl	$0, -4(%rbp)	#, size
	.loc 1 9305 0
	jmp	.L1886	#
.L1884:
	.loc 1 9310 0
	movq	-32(%rbp), %rax	# tree_node, tmp69
	movq	%rax, %rdi	# tmp69,
	call	int_size_in_bytes	#
	movl	%eax, -4(%rbp)	# D.24292, size
	.loc 1 9311 0
	jmp	.L1886	#
.L1885:
	.loc 1 9317 0
	movq	-32(%rbp), %rax	# tree_node, tmp70
	movq	%rax, %rdi	# tmp70,
	call	field_type	#
	movq	%rax, %rdi	# D.24293,
	call	simple_type_size_in_bits	#
	shrq	$3, %rax	#, D.24294
	movl	%eax, -4(%rbp)	# D.24294, size
	.loc 1 9318 0
	jmp	.L1886	#
.L1881:
	.loc 1 9320 0
	movl	$__FUNCTION__.16702, %edx	#,
	movl	$9320, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1886:
	.loc 1 9327 0
	movl	-4(%rbp), %edx	# size, D.24294
	movq	-24(%rbp), %rax	# die, tmp71
	movl	$11, %esi	#,
	movq	%rax, %rdi	# tmp71,
	call	add_AT_unsigned	#
	.loc 1 9328 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE185:
	.size	add_byte_size_attribute, .-add_byte_size_attribute
	.type	add_bit_offset_attribute, @function
add_bit_offset_attribute:
.LFB186:
	.loc 1 9350 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# die, die
	movq	%rsi, -64(%rbp)	# decl, decl
	.loc 1 9351 0
	movq	-64(%rbp), %rax	# decl, tmp70
	movq	%rax, %rdi	# tmp70,
	call	field_byte_offset	#
	movq	%rax, -48(%rbp)	# tmp71, object_offset_in_bytes
	.loc 1 9352 0
	movq	-64(%rbp), %rax	# decl, tmp72
	movq	96(%rax), %rax	# decl_1(D)->decl.result, tmp73
	movq	%rax, -40(%rbp)	# tmp73, type
	.loc 1 9359 0
	cmpq	$0, -40(%rbp)	#, type
	je	.L1888	#,
	.loc 1 9360 0
	movq	-64(%rbp), %rax	# decl, tmp74
	movzbl	16(%rax), %eax	# decl_1(D)->common.code, D.24295
	cmpb	$37, %al	#, D.24295
	je	.L1889	#,
.L1888:
	.loc 1 9361 0
	movl	$__FUNCTION__.16713, %edx	#,
	movl	$9361, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1889:
	.loc 1 9366 0
	movq	-64(%rbp), %rax	# decl, tmp75
	movq	%rax, %rdi	# tmp75,
	call	bit_position	#
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24296,
	call	host_integerp	#
	testl	%eax, %eax	# D.24297
	je	.L1890	#,
	.loc 1 9367 0
	movq	-64(%rbp), %rax	# decl, tmp76
	movq	40(%rax), %rax	# decl_1(D)->decl.size, D.24296
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.24296,
	call	host_integerp	#
	testl	%eax, %eax	# D.24297
	jne	.L1891	#,
.L1890:
	.loc 1 9368 0
	jmp	.L1887	#
.L1891:
	.loc 1 9370 0
	movq	-64(%rbp), %rax	# decl, tmp77
	movq	%rax, %rdi	# tmp77,
	call	int_bit_position	#
	movq	%rax, -32(%rbp)	# tmp78, bitpos_int
	.loc 1 9377 0
	movq	-48(%rbp), %rax	# object_offset_in_bytes, tmp82
	salq	$3, %rax	#, tmp81
	movq	%rax, -24(%rbp)	# tmp81, highest_order_object_bit_offset
	.loc 1 9378 0
	movq	-32(%rbp), %rax	# bitpos_int, tmp83
	movq	%rax, -16(%rbp)	# tmp83, highest_order_field_bit_offset
	.loc 1 9382 0
	movq	-64(%rbp), %rax	# decl, tmp84
	movq	40(%rax), %rax	# decl_1(D)->decl.size, D.24296
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24296,
	call	tree_low_cst	#
	addq	%rax, -16(%rbp)	# D.24298, highest_order_field_bit_offset
	.loc 1 9383 0
	movq	-40(%rbp), %rax	# type, tmp85
	movq	%rax, %rdi	# tmp85,
	call	simple_type_size_in_bits	#
	movq	-24(%rbp), %rdx	# highest_order_object_bit_offset, highest_order_object_bit_offset.578
	addq	%rdx, %rax	# highest_order_object_bit_offset.578, D.24299
	movq	%rax, -24(%rbp)	# D.24299, highest_order_object_bit_offset
	.loc 1 9389 0
	movq	-16(%rbp), %rax	# highest_order_field_bit_offset, tmp86
	movq	-24(%rbp), %rdx	# highest_order_object_bit_offset, tmp87
	subq	%rax, %rdx	# tmp86, D.24298
	movq	%rdx, %rax	# D.24298, D.24298
	.loc 1 9387 0
	movq	%rax, -8(%rbp)	# D.24298, bit_offset
	.loc 1 9391 0
	movq	-8(%rbp), %rdx	# bit_offset, tmp88
	movq	-56(%rbp), %rax	# die, tmp89
	movl	$12, %esi	#,
	movq	%rax, %rdi	# tmp89,
	call	add_AT_unsigned	#
.L1887:
	.loc 1 9392 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE186:
	.size	add_bit_offset_attribute, .-add_bit_offset_attribute
	.type	add_bit_size_attribute, @function
add_bit_size_attribute:
.LFB187:
	.loc 1 9401 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# die, die
	movq	%rsi, -16(%rbp)	# decl, decl
	.loc 1 9403 0
	movq	-16(%rbp), %rax	# decl, tmp66
	movzbl	16(%rax), %eax	# decl_1(D)->common.code, D.24300
	cmpb	$37, %al	#, D.24300
	jne	.L1894	#,
	.loc 1 9404 0
	movq	-16(%rbp), %rax	# decl, tmp67
	movq	96(%rax), %rax	# decl_1(D)->decl.result, D.24301
	testq	%rax, %rax	# D.24301
	jne	.L1895	#,
.L1894:
	.loc 1 9405 0
	movl	$__FUNCTION__.16718, %edx	#,
	movl	$9405, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1895:
	.loc 1 9407 0
	movq	-16(%rbp), %rax	# decl, tmp68
	movq	40(%rax), %rax	# decl_1(D)->decl.size, D.24301
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.24301,
	call	host_integerp	#
	testl	%eax, %eax	# D.24302
	je	.L1893	#,
	.loc 1 9408 0
	movq	-16(%rbp), %rax	# decl, tmp69
	movq	40(%rax), %rax	# decl_1(D)->decl.size, D.24301
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.24301,
	call	tree_low_cst	#
	movq	%rax, %rdx	# D.24303, D.24304
	movq	-8(%rbp), %rax	# die, tmp70
	movl	$13, %esi	#,
	movq	%rax, %rdi	# tmp70,
	call	add_AT_unsigned	#
.L1893:
	.loc 1 9409 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE187:
	.size	add_bit_size_attribute, .-add_bit_size_attribute
	.type	add_prototyped_attribute, @function
add_prototyped_attribute:
.LFB188:
	.loc 1 9418 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# die, die
	movq	%rsi, -16(%rbp)	# func_type, func_type
	.loc 1 9419 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.573
	movl	$19, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.573,
	call	get_AT_unsigned	#
	cmpl	$1, %eax	#, D.24305
	jne	.L1897	#,
	.loc 1 9420 0
	movq	-16(%rbp), %rax	# func_type, tmp62
	movq	24(%rax), %rax	# func_type_3(D)->type.values, D.24306
	testq	%rax, %rax	# D.24306
	je	.L1897	#,
	.loc 1 9421 0
	movq	-8(%rbp), %rax	# die, tmp63
	movl	$1, %edx	#,
	movl	$39, %esi	#,
	movq	%rax, %rdi	# tmp63,
	call	add_AT_flag	#
.L1897:
	.loc 1 9422 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE188:
	.size	add_prototyped_attribute, .-add_prototyped_attribute
	.type	add_abstract_origin_attribute, @function
add_abstract_origin_attribute:
.LFB189:
	.loc 1 9432 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movq	%rsi, -32(%rbp)	# origin, origin
	.loc 1 9433 0
	movq	$0, -16(%rbp)	#, origin_die
	.loc 1 9435 0
	movq	-32(%rbp), %rax	# origin, tmp69
	movzbl	16(%rax), %eax	# origin_4(D)->common.code, D.24307
	cmpb	$30, %al	#, D.24307
	je	.L1900	#,
.LBB76:
	.loc 1 9443 0
	movq	-32(%rbp), %rax	# origin, tmp70
	movq	%rax, -8(%rbp)	# tmp70, fn
	.loc 1 9445 0
	movq	-8(%rbp), %rax	# fn, tmp71
	movzbl	16(%rax), %eax	# fn_6->common.code, D.24307
	movzbl	%al, %eax	# D.24307, D.24308
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.24309
	cmpb	$116, %al	#, D.24309
	jne	.L1901	#,
	.loc 1 9446 0
	movq	-8(%rbp), %rax	# fn, tmp73
	movq	(%rax), %rax	# fn_6->common.chain, tmp74
	movq	%rax, -8(%rbp)	# tmp74, fn
.L1901:
	.loc 1 9448 0
	movq	-8(%rbp), %rax	# fn, tmp75
	movq	%rax, %rdi	# tmp75,
	call	decl_function_context	#
	movq	%rax, -8(%rbp)	# tmp76, fn
	.loc 1 9449 0
	cmpq	$0, -8(%rbp)	#, fn
	je	.L1900	#,
	.loc 1 9450 0
	movq	-8(%rbp), %rax	# fn, tmp77
	movq	%rax, %rdi	# tmp77,
	call	dwarf2out_abstract_function	#
.L1900:
.LBE76:
	.loc 1 9453 0
	movq	-32(%rbp), %rax	# origin, tmp78
	movzbl	16(%rax), %eax	# origin_4(D)->common.code, D.24307
	movzbl	%al, %eax	# D.24307, D.24308
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.24309
	cmpb	$100, %al	#, D.24309
	jne	.L1902	#,
	.loc 1 9454 0
	movq	-32(%rbp), %rax	# origin, tmp80
	movq	%rax, %rdi	# tmp80,
	call	lookup_decl_die	#
	movq	%rax, -16(%rbp)	# tmp81, origin_die
	jmp	.L1903	#
.L1902:
	.loc 1 9455 0
	movq	-32(%rbp), %rax	# origin, tmp82
	movzbl	16(%rax), %eax	# origin_4(D)->common.code, D.24307
	movzbl	%al, %eax	# D.24307, D.24308
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.24309
	cmpb	$116, %al	#, D.24309
	jne	.L1903	#,
	.loc 1 9456 0
	movq	-32(%rbp), %rax	# origin, tmp84
	movq	%rax, %rdi	# tmp84,
	call	lookup_type_die	#
	movq	%rax, -16(%rbp)	# tmp85, origin_die
.L1903:
	.loc 1 9458 0
	cmpq	$0, -16(%rbp)	#, origin_die
	jne	.L1904	#,
	.loc 1 9459 0
	movl	$__FUNCTION__.16729, %edx	#,
	movl	$9459, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1904:
	.loc 1 9461 0
	movq	-16(%rbp), %rdx	# origin_die, tmp86
	movq	-24(%rbp), %rax	# die, tmp87
	movl	$49, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	add_AT_die_ref	#
	.loc 1 9462 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE189:
	.size	add_abstract_origin_attribute, .-add_abstract_origin_attribute
	.type	add_pure_or_virtual_attribute, @function
add_pure_or_virtual_attribute:
.LFB190:
	.loc 1 9470 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# die, die
	movq	%rsi, -16(%rbp)	# func_decl, func_decl
	.loc 1 9471 0
	movq	-16(%rbp), %rax	# func_decl, tmp69
	movq	184(%rax), %rax	# func_decl_1(D)->decl.vindex, D.24310
	testq	%rax, %rax	# D.24310
	je	.L1905	#,
	.loc 1 9473 0
	movq	-8(%rbp), %rax	# die, tmp70
	movl	$1, %edx	#,
	movl	$76, %esi	#,
	movq	%rax, %rdi	# tmp70,
	call	add_AT_unsigned	#
	.loc 1 9475 0
	movq	-16(%rbp), %rax	# func_decl, tmp71
	movq	184(%rax), %rax	# func_decl_1(D)->decl.vindex, D.24310
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24310,
	call	host_integerp	#
	testl	%eax, %eax	# D.24311
	je	.L1907	#,
	.loc 1 9478 0
	movq	-16(%rbp), %rax	# func_decl, tmp72
	movq	184(%rax), %rax	# func_decl_1(D)->decl.vindex, D.24310
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24310,
	call	tree_low_cst	#
	.loc 1 9476 0
	movl	$0, %edx	#,
	movq	%rax, %rsi	# D.24313,
	movl	$16, %edi	#,
	call	new_loc_descr	#
	movq	%rax, %rdx	#, D.24314
	movq	-8(%rbp), %rax	# die, tmp73
	movl	$77, %esi	#,
	movq	%rax, %rdi	# tmp73,
	call	add_AT_loc	#
.L1907:
	.loc 1 9482 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.574
	cmpl	$1, %eax	#, debug_info_level.574
	jbe	.L1905	#,
	.loc 1 9483 0
	movq	-16(%rbp), %rax	# func_decl, tmp74
	movq	80(%rax), %rax	# func_decl_1(D)->decl.context, D.24310
	movq	%rax, %rdi	# D.24310,
	call	lookup_type_die	#
	movq	%rax, %rdx	#, D.24315
	movq	-8(%rbp), %rax	# die, tmp75
	movl	$29, %esi	#,
	movq	%rax, %rdi	# tmp75,
	call	add_AT_die_ref	#
.L1905:
	.loc 1 9486 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE190:
	.size	add_pure_or_virtual_attribute, .-add_pure_or_virtual_attribute
	.type	add_src_coords_attributes, @function
add_src_coords_attributes:
.LFB191:
	.loc 1 9494 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movq	%rsi, -32(%rbp)	# decl, decl
	.loc 1 9495 0
	movq	-32(%rbp), %rax	# decl, tmp63
	movq	24(%rax), %rax	# decl_1(D)->decl.filename, D.24316
	movq	%rax, %rdi	# D.24316,
	call	lookup_filename	#
	movl	%eax, -4(%rbp)	# tmp64, file_index
	.loc 1 9497 0
	movl	-4(%rbp), %edx	# file_index, D.24317
	movq	-24(%rbp), %rax	# die, tmp65
	movl	$58, %esi	#,
	movq	%rax, %rdi	# tmp65,
	call	add_AT_unsigned	#
	.loc 1 9498 0
	movq	-32(%rbp), %rax	# decl, tmp66
	movl	32(%rax), %eax	# decl_1(D)->decl.linenum, D.24318
	movslq	%eax, %rdx	# D.24318, D.24317
	movq	-24(%rbp), %rax	# die, tmp67
	movl	$59, %esi	#,
	movq	%rax, %rdi	# tmp67,
	call	add_AT_unsigned	#
	.loc 1 9499 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE191:
	.size	add_src_coords_attributes, .-add_src_coords_attributes
	.type	add_name_and_src_coords_attributes, @function
add_name_and_src_coords_attributes:
.LFB192:
	.loc 1 9508 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# die, die
	movq	%rsi, -32(%rbp)	# decl, decl
	.loc 1 9511 0
	movq	-32(%rbp), %rax	# decl, tmp77
	movq	72(%rax), %rax	# decl_1(D)->decl.name, tmp78
	movq	%rax, -8(%rbp)	# tmp78, decl_name
	.loc 1 9512 0
	cmpq	$0, -8(%rbp)	#, decl_name
	je	.L1909	#,
	.loc 1 9512 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# decl_name, tmp79
	movq	32(%rax), %rax	# decl_name_2->identifier.id.str, D.24319
	testq	%rax, %rax	# D.24319
	je	.L1909	#,
	.loc 1 9514 0 is_stmt 1
	movq	-32(%rbp), %rax	# decl, tmp80
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp80,
	call	dwarf2_name	#
	movq	%rax, %rdx	#, D.24320
	movq	-24(%rbp), %rax	# die, tmp81
	movq	%rdx, %rsi	# D.24320,
	movq	%rax, %rdi	# tmp81,
	call	add_name_attribute	#
	.loc 1 9515 0
	movq	-32(%rbp), %rax	# decl, tmp82
	movzbl	50(%rax), %eax	# *decl_1(D), D.24321
	andl	$64, %eax	#, D.24321
	testb	%al, %al	# D.24321
	jne	.L1911	#,
	.loc 1 9516 0
	movq	-32(%rbp), %rdx	# decl, tmp83
	movq	-24(%rbp), %rax	# die, tmp84
	movq	%rdx, %rsi	# tmp83,
	movq	%rax, %rdi	# tmp84,
	call	add_src_coords_attributes	#
.L1911:
	.loc 1 9518 0
	movq	-32(%rbp), %rax	# decl, tmp85
	movzbl	16(%rax), %eax	# decl_1(D)->common.code, D.24321
	cmpb	$30, %al	#, D.24321
	je	.L1912	#,
	.loc 1 9518 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# decl, tmp86
	movzbl	16(%rax), %eax	# decl_1(D)->common.code, D.24321
	cmpb	$34, %al	#, D.24321
	jne	.L1909	#,
.L1912:
	.loc 1 9519 0 is_stmt 1
	movq	-32(%rbp), %rax	# decl, tmp87
	movzbl	18(%rax), %eax	# *decl_1(D), D.24321
	andl	$8, %eax	#, D.24321
	testb	%al, %al	# D.24321
	je	.L1909	#,
	.loc 1 9520 0
	movq	-32(%rbp), %rax	# decl, tmp88
	movq	120(%rax), %rax	# decl_1(D)->decl.assembler_name, D.24322
	testq	%rax, %rax	# D.24322
	jne	.L1913	#,
	.loc 1 9520 0 is_stmt 0 discriminator 1
	movq	lang_set_decl_assembler_name(%rip), %rax	# lang_set_decl_assembler_name, lang_set_decl_assembler_name.535
	movq	-32(%rbp), %rdx	# decl, tmp89
	movq	%rdx, %rdi	# tmp89,
	call	*%rax	# lang_set_decl_assembler_name.535
.L1913:
	.loc 1 9520 0 discriminator 2
	movq	-32(%rbp), %rax	# decl, tmp90
	movq	120(%rax), %rdx	# decl_1(D)->decl.assembler_name, D.24322
	movq	-32(%rbp), %rax	# decl, tmp91
	movq	72(%rax), %rax	# decl_1(D)->decl.name, D.24322
	cmpq	%rax, %rdx	# D.24322, D.24322
	je	.L1909	#,
	.loc 1 9521 0 is_stmt 1
	movq	-32(%rbp), %rax	# decl, tmp92
	movzbl	49(%rax), %eax	# *decl_1(D), D.24321
	andl	$-128, %eax	#, D.24321
	testb	%al, %al	# D.24321
	jne	.L1909	#,
	.loc 1 9523 0
	movq	-32(%rbp), %rax	# decl, tmp93
	movq	120(%rax), %rax	# decl_1(D)->decl.assembler_name, D.24322
	testq	%rax, %rax	# D.24322
	jne	.L1914	#,
	.loc 1 9523 0 is_stmt 0 discriminator 1
	movq	lang_set_decl_assembler_name(%rip), %rax	# lang_set_decl_assembler_name, lang_set_decl_assembler_name.536
	movq	-32(%rbp), %rdx	# decl, tmp94
	movq	%rdx, %rdi	# tmp94,
	call	*%rax	# lang_set_decl_assembler_name.536
.L1914:
	.loc 1 9523 0 discriminator 2
	movq	-32(%rbp), %rax	# decl, tmp95
	movq	120(%rax), %rax	# decl_1(D)->decl.assembler_name, D.24322
	movq	32(%rax), %rdx	# _20->identifier.id.str, D.24319
	.loc 1 9522 0 is_stmt 1 discriminator 2
	movq	-24(%rbp), %rax	# die, tmp96
	movl	$8199, %esi	#,
	movq	%rax, %rdi	# tmp96,
	call	add_AT_string	#
.L1909:
	.loc 1 9536 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE192:
	.size	add_name_and_src_coords_attributes, .-add_name_and_src_coords_attributes
	.type	push_decl_scope, @function
push_decl_scope:
.LFB193:
	.loc 1 9543 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# scope, scope
	.loc 1 9544 0
	movq	decl_scope_table(%rip), %rax	# decl_scope_table, decl_scope_table.539
	movq	8(%rax), %rdx	# decl_scope_table.539_1->elements_used, D.24323
	movq	decl_scope_table(%rip), %rax	# decl_scope_table, decl_scope_table.540
	movq	(%rax), %rax	# decl_scope_table.540_3->num_elements, D.24323
	cmpq	%rax, %rdx	# D.24323, D.24323
	jb	.L1916	#,
	.loc 1 9544 0 is_stmt 0 discriminator 1
	movq	decl_scope_table(%rip), %rax	# decl_scope_table, decl_scope_table.541
	movq	(%rax), %rax	# decl_scope_table.541_5->num_elements, D.24323
	leaq	(%rax,%rax), %rdx	#, D.24323
	movq	decl_scope_table(%rip), %rax	# decl_scope_table, decl_scope_table.542
	movq	%rdx, %rsi	# D.24323,
	movq	%rax, %rdi	# decl_scope_table.542,
	call	varray_grow	#
	movq	%rax, decl_scope_table(%rip)	# decl_scope_table.543, decl_scope_table
.L1916:
	.loc 1 9544 0 discriminator 2
	movq	decl_scope_table(%rip), %rcx	# decl_scope_table, decl_scope_table.544
	movq	decl_scope_table(%rip), %rax	# decl_scope_table, decl_scope_table.545
	movq	8(%rax), %rdx	# decl_scope_table.545_11->elements_used, D.24323
	leaq	1(%rdx), %rsi	#, D.24323
	movq	%rsi, 8(%rax)	# D.24323, decl_scope_table.545_11->elements_used
	addq	$4, %rdx	#, tmp72
	movq	-8(%rbp), %rax	# scope, tmp73
	movq	%rax, (%rcx,%rdx,8)	# tmp73, decl_scope_table.544_10->data.tree
	.loc 1 9545 0 is_stmt 1 discriminator 2
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE193:
	.size	push_decl_scope, .-push_decl_scope
	.type	pop_decl_scope, @function
pop_decl_scope:
.LFB194:
	.loc 1 9551 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 9552 0
	movq	decl_scope_table(%rip), %rax	# decl_scope_table, decl_scope_table.555
	movq	8(%rax), %rax	# decl_scope_table.555_1->elements_used, D.24324
	testq	%rax, %rax	# D.24324
	jne	.L1918	#,
	.loc 1 9553 0
	movl	$__FUNCTION__.16749, %edx	#,
	movl	$9553, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1918:
	.loc 1 9555 0
	movq	decl_scope_table(%rip), %rax	# decl_scope_table, decl_scope_table.556
	movq	8(%rax), %rdx	# decl_scope_table.556_3->elements_used, D.24324
	subq	$1, %rdx	#, D.24324
	movq	%rdx, 8(%rax)	# D.24324, decl_scope_table.556_3->elements_used
	.loc 1 9556 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE194:
	.size	pop_decl_scope, .-pop_decl_scope
	.type	scope_die_for, @function
scope_die_for:
.LFB195:
	.loc 1 9568 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# t, t
	movq	%rsi, -48(%rbp)	# context_die, context_die
	.loc 1 9569 0
	movq	$0, -16(%rbp)	#, scope_die
	.loc 1 9574 0
	movq	-40(%rbp), %rax	# t, tmp78
	movzbl	16(%rax), %eax	# t_7(D)->common.code, D.24325
	movzbl	%al, %eax	# D.24325, D.24326
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.24327
	cmpb	$116, %al	#, D.24327
	je	.L1920	#,
	.loc 1 9575 0
	movl	$__FUNCTION__.16757, %edx	#,
	movl	$9575, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1920:
	.loc 1 9577 0
	movq	-40(%rbp), %rax	# t, tmp80
	movq	144(%rax), %rax	# t_7(D)->type.context, tmp81
	movq	%rax, -8(%rbp)	# tmp81, containing_scope
	.loc 1 9580 0
	cmpq	$0, -8(%rbp)	#, containing_scope
	je	.L1921	#,
	.loc 1 9580 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# containing_scope, tmp82
	movzbl	16(%rax), %eax	# containing_scope_11->common.code, D.24325
	cmpb	$38, %al	#, D.24325
	jne	.L1921	#,
	.loc 1 9581 0 is_stmt 1
	movq	$0, -8(%rbp)	#, containing_scope
.L1921:
	.loc 1 9586 0
	cmpq	$0, -8(%rbp)	#, containing_scope
	je	.L1922	#,
	.loc 1 9586 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# containing_scope, tmp83
	movzbl	16(%rax), %eax	# containing_scope_3->common.code, D.24325
	cmpb	$23, %al	#, D.24325
	jne	.L1922	#,
	.loc 1 9587 0 is_stmt 1
	movq	$0, -8(%rbp)	#, containing_scope
.L1922:
	.loc 1 9589 0
	cmpq	$0, -8(%rbp)	#, containing_scope
	jne	.L1923	#,
	.loc 1 9590 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, tmp84
	movq	%rax, -16(%rbp)	# tmp84, scope_die
	jmp	.L1924	#
.L1923:
	.loc 1 9591 0
	movq	-8(%rbp), %rax	# containing_scope, tmp85
	movzbl	16(%rax), %eax	# containing_scope_4->common.code, D.24325
	movzbl	%al, %eax	# D.24325, D.24326
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.24327
	cmpb	$116, %al	#, D.24327
	jne	.L1925	#,
	.loc 1 9596 0
	movq	decl_scope_table(%rip), %rax	# decl_scope_table, decl_scope_table.546
	movq	8(%rax), %rax	# decl_scope_table.546_20->elements_used, D.24328
	subl	$1, %eax	#, D.24329
	movl	%eax, -20(%rbp)	# D.24329, i
	jmp	.L1926	#
.L1929:
	.loc 1 9597 0
	movq	decl_scope_table(%rip), %rax	# decl_scope_table, decl_scope_table.547
	movl	-20(%rbp), %edx	# i, tmp88
	movslq	%edx, %rdx	# tmp88, tmp87
	addq	$4, %rdx	#, tmp89
	movq	(%rax,%rdx,8), %rax	# decl_scope_table.547_25->data.tree, D.24330
	cmpq	-8(%rbp), %rax	# containing_scope, D.24330
	jne	.L1927	#,
	.loc 1 9598 0
	jmp	.L1928	#
.L1927:
	.loc 1 9596 0
	subl	$1, -20(%rbp)	#, i
.L1926:
	.loc 1 9596 0 is_stmt 0 discriminator 1
	cmpl	$0, -20(%rbp)	#, i
	jns	.L1929	#,
.L1928:
	.loc 1 9600 0 is_stmt 1
	cmpl	$0, -20(%rbp)	#, i
	jns	.L1930	#,
	.loc 1 9602 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.548
	cmpl	$1, %eax	#, debug_info_level.548
	jbe	.L1931	#,
	.loc 1 9603 0
	movq	-8(%rbp), %rax	# containing_scope, tmp90
	movzbl	17(%rax), %eax	# *containing_scope_4, D.24325
	andl	$64, %eax	#, D.24325
	testb	%al, %al	# D.24325
	jne	.L1931	#,
	.loc 1 9604 0
	movl	$__FUNCTION__.16757, %edx	#,
	movl	$9604, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1931:
	.loc 1 9607 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, tmp91
	movq	%rax, -16(%rbp)	# tmp91, scope_die
	jmp	.L1924	#
.L1930:
	.loc 1 9610 0
	movq	-8(%rbp), %rax	# containing_scope, tmp92
	movq	%rax, %rdi	# tmp92,
	call	lookup_type_die	#
	movq	%rax, -16(%rbp)	# tmp93, scope_die
	jmp	.L1924	#
.L1925:
	.loc 1 9613 0
	movq	-48(%rbp), %rax	# context_die, tmp94
	movq	%rax, -16(%rbp)	# tmp94, scope_die
.L1924:
	.loc 1 9615 0
	movq	-16(%rbp), %rax	# scope_die, D.24331
	.loc 1 9616 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE195:
	.size	scope_die_for, .-scope_die_for
	.type	local_scope_p, @function
local_scope_p:
.LFB196:
	.loc 1 9623 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# context_die, context_die
	.loc 1 9624 0
	jmp	.L1935	#
.L1939:
	.loc 1 9625 0
	movq	-8(%rbp), %rax	# context_die, tmp63
	movl	(%rax), %eax	# context_die_1->die_tag, D.24333
	cmpl	$29, %eax	#, D.24333
	je	.L1936	#,
	.loc 1 9626 0
	movq	-8(%rbp), %rax	# context_die, tmp64
	movl	(%rax), %eax	# context_die_1->die_tag, D.24333
	cmpl	$46, %eax	#, D.24333
	jne	.L1937	#,
.L1936:
	.loc 1 9627 0
	movl	$1, %eax	#, D.24332
	jmp	.L1938	#
.L1937:
	.loc 1 9624 0
	movq	-8(%rbp), %rax	# context_die, tmp65
	movq	24(%rax), %rax	# context_die_1->die_parent, tmp66
	movq	%rax, -8(%rbp)	# tmp66, context_die
.L1935:
	.loc 1 9624 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, context_die
	jne	.L1939	#,
	.loc 1 9629 0 is_stmt 1
	movl	$0, %eax	#, D.24332
.L1938:
	.loc 1 9630 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE196:
	.size	local_scope_p, .-local_scope_p
	.type	class_scope_p, @function
class_scope_p:
.LFB197:
	.loc 1 9637 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# context_die, context_die
	.loc 1 9639 0
	cmpq	$0, -8(%rbp)	#, context_die
	je	.L1941	#,
	.loc 1 9639 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# context_die, tmp64
	movl	(%rax), %eax	# context_die_2(D)->die_tag, D.24334
	cmpl	$19, %eax	#, D.24334
	je	.L1942	#,
	.loc 1 9640 0 is_stmt 1
	movq	-8(%rbp), %rax	# context_die, tmp65
	movl	(%rax), %eax	# context_die_2(D)->die_tag, D.24334
	cmpl	$23, %eax	#, D.24334
	jne	.L1941	#,
.L1942:
	.loc 1 9639 0 discriminator 3
	movl	$1, %eax	#, iftmp.571
	jmp	.L1943	#
.L1941:
	.loc 1 9639 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.571
.L1943:
	.loc 1 9641 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE197:
	.size	class_scope_p, .-class_scope_p
	.type	add_type_attribute, @function
add_type_attribute:
.LFB198:
	.loc 1 9654 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# object_die, object_die
	movq	%rsi, -32(%rbp)	# type, type
	movl	%edx, -36(%rbp)	# decl_const, decl_const
	movl	%ecx, -40(%rbp)	# decl_volatile, decl_volatile
	movq	%r8, -48(%rbp)	# context_die, context_die
	.loc 1 9655 0
	movq	-32(%rbp), %rax	# type, tmp69
	movzbl	16(%rax), %eax	# type_5(D)->common.code, D.24336
	movzbl	%al, %eax	# D.24336, tmp70
	movl	%eax, -12(%rbp)	# tmp70, code
	.loc 1 9656 0
	movq	$0, -8(%rbp)	#, type_die
	.loc 1 9662 0
	cmpl	$6, -12(%rbp)	#, code
	je	.L1946	#,
	.loc 1 9662 0 is_stmt 0 discriminator 1
	cmpl	$7, -12(%rbp)	#, code
	jne	.L1947	#,
.L1946:
	.loc 1 9663 0 is_stmt 1
	movq	-32(%rbp), %rax	# type, tmp71
	movq	8(%rax), %rax	# type_5(D)->common.type, D.24337
	testq	%rax, %rax	# D.24337
	je	.L1947	#,
	.loc 1 9663 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# type, tmp72
	movq	96(%rax), %rax	# type_5(D)->type.name, D.24337
	testq	%rax, %rax	# D.24337
	jne	.L1947	#,
	.loc 1 9664 0 is_stmt 1
	movq	-32(%rbp), %rax	# type, tmp73
	movq	8(%rax), %rax	# type_5(D)->common.type, tmp74
	movq	%rax, -32(%rbp)	# tmp74, type
	movq	-32(%rbp), %rax	# type, tmp75
	movzbl	16(%rax), %eax	# type_11->common.code, D.24336
	movzbl	%al, %eax	# D.24336, tmp76
	movl	%eax, -12(%rbp)	# tmp76, code
.L1947:
	.loc 1 9666 0
	cmpl	$0, -12(%rbp)	#, code
	je	.L1948	#,
	.loc 1 9670 0
	cmpl	$5, -12(%rbp)	#, code
	jne	.L1949	#,
.L1948:
	.loc 1 9671 0
	jmp	.L1945	#
.L1949:
	.loc 1 9673 0
	cmpl	$0, -40(%rbp)	#, decl_volatile
	jne	.L1951	#,
	.loc 1 9675 0 discriminator 2
	movq	-32(%rbp), %rax	# type, tmp77
	movzbl	17(%rax), %eax	# *type_1, D.24336
	andl	$8, %eax	#, D.24336
	.loc 1 9673 0 discriminator 2
	testb	%al, %al	# D.24336
	je	.L1952	#,
.L1951:
	.loc 1 9673 0 is_stmt 0 discriminator 1
	movl	$1, %edx	#, iftmp.549
	jmp	.L1953	#
.L1952:
	.loc 1 9673 0 discriminator 3
	movl	$0, %edx	#, iftmp.549
.L1953:
	.loc 1 9673 0 discriminator 4
	cmpl	$0, -36(%rbp)	#, decl_const
	jne	.L1954	#,
	.loc 1 9674 0 is_stmt 1 discriminator 6
	movq	-32(%rbp), %rax	# type, tmp78
	movzbl	17(%rax), %eax	# *type_1, D.24336
	andl	$16, %eax	#, D.24336
	.loc 1 9673 0 discriminator 6
	testb	%al, %al	# D.24336
	je	.L1955	#,
.L1954:
	.loc 1 9673 0 is_stmt 0 discriminator 5
	movl	$1, %eax	#, iftmp.550
	jmp	.L1956	#
.L1955:
	.loc 1 9673 0 discriminator 7
	movl	$0, %eax	#, iftmp.550
.L1956:
	.loc 1 9673 0 discriminator 8
	movq	-48(%rbp), %rcx	# context_die, tmp79
	movq	-32(%rbp), %rdi	# type, tmp80
	movl	%eax, %esi	# iftmp.550,
	call	modified_type_die	#
	movq	%rax, -8(%rbp)	# tmp81, type_die
	.loc 1 9678 0 is_stmt 1 discriminator 8
	cmpq	$0, -8(%rbp)	#, type_die
	je	.L1945	#,
	.loc 1 9679 0
	movq	-8(%rbp), %rdx	# type_die, tmp82
	movq	-24(%rbp), %rax	# object_die, tmp83
	movl	$73, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	add_AT_die_ref	#
.L1945:
	.loc 1 9680 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE198:
	.size	add_type_attribute, .-add_type_attribute
	.type	type_tag, @function
type_tag:
.LFB199:
	.loc 1 9689 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# type, type
	.loc 1 9690 0
	movq	$0, -16(%rbp)	#, name
	.loc 1 9692 0
	movq	-24(%rbp), %rax	# type, tmp72
	movq	96(%rax), %rax	# type_5(D)->type.name, D.24338
	testq	%rax, %rax	# D.24338
	je	.L1958	#,
.LBB77:
	.loc 1 9694 0
	movq	$0, -8(%rbp)	#, t
	.loc 1 9697 0
	movq	-24(%rbp), %rax	# type, tmp73
	movq	96(%rax), %rax	# type_5(D)->type.name, D.24338
	movzbl	16(%rax), %eax	# _8->common.code, D.24339
	cmpb	$1, %al	#, D.24339
	jne	.L1959	#,
	.loc 1 9698 0
	movq	-24(%rbp), %rax	# type, tmp74
	movq	96(%rax), %rax	# type_5(D)->type.name, tmp75
	movq	%rax, -8(%rbp)	# tmp75, t
	jmp	.L1960	#
.L1959:
	.loc 1 9703 0
	movq	-24(%rbp), %rax	# type, tmp76
	movq	96(%rax), %rax	# type_5(D)->type.name, D.24338
	movzbl	16(%rax), %eax	# _11->common.code, D.24339
	cmpb	$33, %al	#, D.24339
	jne	.L1960	#,
	.loc 1 9704 0
	movq	-24(%rbp), %rax	# type, tmp77
	movq	96(%rax), %rax	# type_5(D)->type.name, D.24338
	movzbl	49(%rax), %eax	# *_13, D.24339
	andl	$64, %eax	#, D.24339
	testb	%al, %al	# D.24339
	jne	.L1960	#,
	.loc 1 9705 0
	movq	-24(%rbp), %rax	# type, tmp78
	movq	96(%rax), %rax	# type_5(D)->type.name, D.24338
	movq	72(%rax), %rax	# _16->decl.name, tmp79
	movq	%rax, -8(%rbp)	# tmp79, t
.L1960:
	.loc 1 9708 0
	cmpq	$0, -8(%rbp)	#, t
	je	.L1958	#,
	.loc 1 9709 0
	movq	-8(%rbp), %rax	# t, tmp80
	movq	32(%rax), %rax	# t_2->identifier.id.str, tmp81
	movq	%rax, -16(%rbp)	# tmp81, name
.L1958:
.LBE77:
	.loc 1 9712 0
	cmpq	$0, -16(%rbp)	#, name
	je	.L1961	#,
	.loc 1 9712 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# name, tmp82
	movzbl	(%rax), %eax	# *name_1, D.24340
	testb	%al, %al	# D.24340
	je	.L1961	#,
	movq	-16(%rbp), %rax	# name, iftmp.551
	jmp	.L1962	#
.L1961:
	.loc 1 9712 0 discriminator 2
	movl	$0, %eax	#, iftmp.551
.L1962:
	.loc 1 9713 0 is_stmt 1 discriminator 3
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE199:
	.size	type_tag, .-type_tag
	.type	member_declared_type, @function
member_declared_type:
.LFB200:
	.loc 1 9721 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# member, member
	.loc 1 9722 0
	movq	-8(%rbp), %rax	# member, tmp63
	movq	96(%rax), %rax	# member_2(D)->decl.result, D.24342
	.loc 1 9723 0
	testq	%rax, %rax	# D.24342
	je	.L1965	#,
	.loc 1 9723 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# member, tmp64
	movq	96(%rax), %rax	# member_2(D)->decl.result, iftmp.577
	jmp	.L1966	#
.L1965:
	.loc 1 9723 0 discriminator 2
	movq	-8(%rbp), %rax	# member, tmp65
	movq	8(%rax), %rax	# member_2(D)->common.type, iftmp.577
.L1966:
	.loc 1 9724 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE200:
	.size	member_declared_type, .-member_declared_type
	.type	gen_array_type_die, @function
gen_array_type_die:
.LFB201:
	.loc 1 9758 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# type, type
	movq	%rsi, -48(%rbp)	# context_die, context_die
	.loc 1 9759 0
	movq	-48(%rbp), %rdx	# context_die, tmp64
	movq	-40(%rbp), %rax	# type, tmp65
	movq	%rdx, %rsi	# tmp64,
	movq	%rax, %rdi	# tmp65,
	call	scope_die_for	#
	movq	%rax, -16(%rbp)	# tmp66, scope_die
	.loc 1 9770 0
	movq	-40(%rbp), %rdx	# type, tmp67
	movq	-16(%rbp), %rax	# scope_die, tmp68
	movq	%rax, %rsi	# tmp68,
	movl	$1, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp69, array_die
	.loc 1 9771 0
	movq	-40(%rbp), %rax	# type, tmp70
	movq	%rax, %rdi	# tmp70,
	call	type_tag	#
	movq	%rax, %rdx	#, D.24344
	movq	-8(%rbp), %rax	# array_die, tmp71
	movq	%rdx, %rsi	# D.24344,
	movq	%rax, %rdi	# tmp71,
	call	add_name_attribute	#
	.loc 1 9772 0
	movq	-8(%rbp), %rdx	# array_die, tmp72
	movq	-40(%rbp), %rax	# type, tmp73
	movq	%rdx, %rsi	# tmp72,
	movq	%rax, %rdi	# tmp73,
	call	equate_type_number_to_die	#
	.loc 1 9774 0
	movq	-40(%rbp), %rax	# type, tmp74
	movzbl	16(%rax), %eax	# type_3(D)->common.code, D.24345
	cmpb	$9, %al	#, D.24345
	jne	.L1969	#,
	.loc 1 9778 0
	movq	-40(%rbp), %rax	# type, tmp75
	movq	24(%rax), %rax	# type_3(D)->type.values, D.24346
	movq	24(%rax), %rax	# _9->type.values, D.24346
	movq	8(%rax), %rax	# _10->common.type, tmp76
	movq	%rax, -40(%rbp)	# tmp76, type
	.loc 1 9779 0
	movq	-8(%rbp), %rax	# array_die, tmp77
	movl	$1, %edx	#,
	movl	$8455, %esi	#,
	movq	%rax, %rdi	# tmp77,
	call	add_AT_flag	#
.L1969:
	.loc 1 9800 0
	movq	-40(%rbp), %rdx	# type, tmp78
	movq	-8(%rbp), %rax	# array_die, tmp79
	movq	%rdx, %rsi	# tmp78,
	movq	%rax, %rdi	# tmp79,
	call	add_subscript_info	#
	.loc 1 9803 0
	movq	-40(%rbp), %rax	# type, tmp80
	movq	8(%rax), %rax	# type_1->common.type, tmp81
	movq	%rax, -24(%rbp)	# tmp81, element_type
	.loc 1 9810 0
	jmp	.L1970	#
.L1971:
	.loc 1 9811 0
	movq	-24(%rbp), %rax	# element_type, tmp82
	movq	8(%rax), %rax	# element_type_2->common.type, tmp83
	movq	%rax, -24(%rbp)	# tmp83, element_type
.L1970:
	.loc 1 9810 0 discriminator 1
	movq	-24(%rbp), %rax	# element_type, tmp84
	movzbl	16(%rax), %eax	# element_type_2->common.code, D.24345
	cmpb	$18, %al	#, D.24345
	je	.L1971	#,
	.loc 1 9813 0
	movq	-48(%rbp), %rdx	# context_die, tmp85
	movq	-24(%rbp), %rax	# element_type, tmp86
	movq	%rdx, %rsi	# tmp85,
	movq	%rax, %rdi	# tmp86,
	call	gen_type_die	#
	.loc 1 9816 0
	movq	-48(%rbp), %rdx	# context_die, tmp87
	movq	-24(%rbp), %rsi	# element_type, tmp88
	movq	-8(%rbp), %rax	# array_die, tmp89
	movq	%rdx, %r8	# tmp87,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp89,
	call	add_type_attribute	#
	.loc 1 9817 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE201:
	.size	gen_array_type_die, .-gen_array_type_die
	.type	gen_set_type_die, @function
gen_set_type_die:
.LFB202:
	.loc 1 9823 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# type, type
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 9825 0
	movq	-32(%rbp), %rdx	# context_die, tmp61
	movq	-24(%rbp), %rax	# type, tmp62
	movq	%rdx, %rsi	# tmp61,
	movq	%rax, %rdi	# tmp62,
	call	scope_die_for	#
	.loc 1 9824 0
	movq	-24(%rbp), %rdx	# type, tmp63
	movq	%rax, %rsi	# D.24347,
	movl	$32, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp64, type_die
	.loc 1 9827 0
	movq	-8(%rbp), %rdx	# type_die, tmp65
	movq	-24(%rbp), %rax	# type, tmp66
	movq	%rdx, %rsi	# tmp65,
	movq	%rax, %rdi	# tmp66,
	call	equate_type_number_to_die	#
	.loc 1 9828 0
	movq	-24(%rbp), %rax	# type, tmp67
	movq	8(%rax), %rsi	# type_1(D)->common.type, D.24348
	movq	-32(%rbp), %rdx	# context_die, tmp68
	movq	-8(%rbp), %rax	# type_die, tmp69
	movq	%rdx, %r8	# tmp68,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp69,
	call	add_type_attribute	#
	.loc 1 9829 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE202:
	.size	gen_set_type_die, .-gen_set_type_die
	.type	retry_incomplete_types, @function
retry_incomplete_types:
.LFB203:
	.loc 1 9861 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 9864 0
	movq	incomplete_types(%rip), %rax	# incomplete_types, incomplete_types.552
	movq	8(%rax), %rax	# incomplete_types.552_2->elements_used, D.24349
	subl	$1, %eax	#, D.24350
	movl	%eax, -4(%rbp)	# D.24350, i
	jmp	.L1974	#
.L1975:
	.loc 1 9865 0 discriminator 2
	movq	comp_unit_die(%rip), %rdx	# comp_unit_die, comp_unit_die.553
	movq	incomplete_types(%rip), %rax	# incomplete_types, incomplete_types.554
	movl	-4(%rbp), %ecx	# i, tmp67
	movslq	%ecx, %rcx	# tmp67, tmp66
	addq	$4, %rcx	#, tmp68
	movq	(%rax,%rcx,8), %rax	# incomplete_types.554_8->data.tree, D.24351
	movq	%rdx, %rsi	# comp_unit_die.553,
	movq	%rax, %rdi	# D.24351,
	call	gen_type_die	#
	.loc 1 9864 0 discriminator 2
	subl	$1, -4(%rbp)	#, i
.L1974:
	.loc 1 9864 0 is_stmt 0 discriminator 1
	cmpl	$0, -4(%rbp)	#, i
	jns	.L1975	#,
	.loc 1 9866 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE203:
	.size	retry_incomplete_types, .-retry_incomplete_types
	.type	gen_inlined_enumeration_type_die, @function
gen_inlined_enumeration_type_die:
.LFB204:
	.loc 1 9874 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# type, type
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 9875 0
	movq	-24(%rbp), %rdx	# type, tmp59
	movq	-32(%rbp), %rax	# context_die, tmp60
	movq	%rax, %rsi	# tmp60,
	movl	$4, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp61, type_die
	.loc 1 9879 0
	movq	-24(%rbp), %rdx	# type, tmp62
	movq	-8(%rbp), %rax	# type_die, tmp63
	movq	%rdx, %rsi	# tmp62,
	movq	%rax, %rdi	# tmp63,
	call	add_abstract_origin_attribute	#
	.loc 1 9880 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE204:
	.size	gen_inlined_enumeration_type_die, .-gen_inlined_enumeration_type_die
	.type	gen_inlined_structure_type_die, @function
gen_inlined_structure_type_die:
.LFB205:
	.loc 1 9888 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# type, type
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 9889 0
	movq	-24(%rbp), %rdx	# type, tmp59
	movq	-32(%rbp), %rax	# context_die, tmp60
	movq	%rax, %rsi	# tmp60,
	movl	$19, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp61, type_die
	.loc 1 9893 0
	movq	-24(%rbp), %rdx	# type, tmp62
	movq	-8(%rbp), %rax	# type_die, tmp63
	movq	%rdx, %rsi	# tmp62,
	movq	%rax, %rdi	# tmp63,
	call	add_abstract_origin_attribute	#
	.loc 1 9894 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE205:
	.size	gen_inlined_structure_type_die, .-gen_inlined_structure_type_die
	.type	gen_inlined_union_type_die, @function
gen_inlined_union_type_die:
.LFB206:
	.loc 1 9902 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# type, type
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 9903 0
	movq	-24(%rbp), %rdx	# type, tmp59
	movq	-32(%rbp), %rax	# context_die, tmp60
	movq	%rax, %rsi	# tmp60,
	movl	$23, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp61, type_die
	.loc 1 9907 0
	movq	-24(%rbp), %rdx	# type, tmp62
	movq	-8(%rbp), %rax	# type_die, tmp63
	movq	%rdx, %rsi	# tmp62,
	movq	%rax, %rdi	# tmp63,
	call	add_abstract_origin_attribute	#
	.loc 1 9908 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE206:
	.size	gen_inlined_union_type_die, .-gen_inlined_union_type_die
	.type	gen_enumeration_type_die, @function
gen_enumeration_type_die:
.LFB207:
	.loc 1 9919 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# type, type
	movq	%rsi, -48(%rbp)	# context_die, context_die
	.loc 1 9920 0
	movq	-40(%rbp), %rax	# type, tmp78
	movq	%rax, %rdi	# tmp78,
	call	lookup_type_die	#
	movq	%rax, -24(%rbp)	# tmp79, type_die
	.loc 1 9922 0
	cmpq	$0, -24(%rbp)	#, type_die
	jne	.L1980	#,
	.loc 1 9924 0
	movq	-48(%rbp), %rdx	# context_die, tmp80
	movq	-40(%rbp), %rax	# type, tmp81
	movq	%rdx, %rsi	# tmp80,
	movq	%rax, %rdi	# tmp81,
	call	scope_die_for	#
	movq	-40(%rbp), %rdx	# type, tmp82
	movq	%rax, %rsi	# D.24352,
	movl	$4, %edi	#,
	call	new_die	#
	movq	%rax, -24(%rbp)	# tmp83, type_die
	.loc 1 9926 0
	movq	-24(%rbp), %rdx	# type_die, tmp84
	movq	-40(%rbp), %rax	# type, tmp85
	movq	%rdx, %rsi	# tmp84,
	movq	%rax, %rdi	# tmp85,
	call	equate_type_number_to_die	#
	.loc 1 9927 0
	movq	-40(%rbp), %rax	# type, tmp86
	movq	%rax, %rdi	# tmp86,
	call	type_tag	#
	movq	%rax, %rdx	#, D.24353
	movq	-24(%rbp), %rax	# type_die, tmp87
	movq	%rdx, %rsi	# D.24353,
	movq	%rax, %rdi	# tmp87,
	call	add_name_attribute	#
	jmp	.L1981	#
.L1980:
	.loc 1 9929 0
	movq	-40(%rbp), %rax	# type, tmp88
	movq	32(%rax), %rax	# type_3(D)->type.size, D.24354
	testq	%rax, %rax	# D.24354
	jne	.L1982	#,
	.loc 1 9930 0
	jmp	.L1979	#
.L1982:
	.loc 1 9932 0
	movq	-24(%rbp), %rax	# type_die, tmp89
	movl	$60, %esi	#,
	movq	%rax, %rdi	# tmp89,
	call	remove_AT	#
.L1981:
	.loc 1 9937 0
	movq	-40(%rbp), %rax	# type, tmp90
	movq	32(%rax), %rax	# type_3(D)->type.size, D.24354
	testq	%rax, %rax	# D.24354
	je	.L1984	#,
.LBB78:
	.loc 1 9941 0
	movq	-40(%rbp), %rax	# type, tmp91
	movzbl	17(%rax), %edx	#, tmp94
	orl	$64, %edx	#, tmp95
	movb	%dl, 17(%rax)	# tmp95,
	.loc 1 9942 0
	movq	-40(%rbp), %rdx	# type, tmp96
	movq	-24(%rbp), %rax	# type_die, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
	call	add_byte_size_attribute	#
	.loc 1 9943 0
	movq	-40(%rbp), %rax	# type, tmp98
	movq	(%rax), %rax	# type_3(D)->common.chain, D.24354
	testq	%rax, %rax	# D.24354
	je	.L1985	#,
	.loc 1 9944 0
	movq	-40(%rbp), %rax	# type, tmp99
	movq	(%rax), %rdx	# type_3(D)->common.chain, D.24354
	movq	-24(%rbp), %rax	# type_die, tmp100
	movq	%rdx, %rsi	# D.24354,
	movq	%rax, %rdi	# tmp100,
	call	add_src_coords_attributes	#
.L1985:
	.loc 1 9948 0
	movq	-24(%rbp), %rax	# type_die, tmp101
	movq	24(%rax), %rax	# type_die_1->die_parent, D.24352
	testq	%rax, %rax	# D.24352
	jne	.L1986	#,
	.loc 1 9949 0
	movq	-48(%rbp), %rdx	# context_die, tmp102
	movq	-40(%rbp), %rax	# type, tmp103
	movq	%rdx, %rsi	# tmp102,
	movq	%rax, %rdi	# tmp103,
	call	scope_die_for	#
	movq	-24(%rbp), %rdx	# type_die, tmp104
	movq	%rdx, %rsi	# tmp104,
	movq	%rax, %rdi	# D.24352,
	call	add_child_die	#
.L1986:
	.loc 1 9951 0
	movq	-40(%rbp), %rax	# type, tmp105
	movq	24(%rax), %rax	# type_3(D)->type.values, tmp106
	movq	%rax, -16(%rbp)	# tmp106, link
	jmp	.L1987	#
.L1990:
.LBB79:
	.loc 1 9954 0
	movq	-16(%rbp), %rdx	# link, tmp107
	movq	-24(%rbp), %rax	# type_die, tmp108
	movq	%rax, %rsi	# tmp108,
	movl	$40, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp109, enum_die
	.loc 1 9957 0
	movq	-16(%rbp), %rax	# link, tmp110
	movq	24(%rax), %rax	# link_2->list.purpose, D.24354
	movq	32(%rax), %rdx	# _17->identifier.id.str, D.24355
	.loc 1 9956 0
	movq	-8(%rbp), %rax	# enum_die, tmp111
	movq	%rdx, %rsi	# D.24355,
	movq	%rax, %rdi	# tmp111,
	call	add_name_attribute	#
	.loc 1 9959 0
	movq	-16(%rbp), %rax	# link, tmp112
	movq	32(%rax), %rax	# link_2->list.value, D.24354
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24354,
	call	host_integerp	#
	testl	%eax, %eax	# D.24356
	je	.L1988	#,
	.loc 1 9961 0
	movq	-16(%rbp), %rax	# link, tmp113
	movq	32(%rax), %rax	# link_2->list.value, D.24354
	movq	%rax, %rdi	# D.24354,
	call	tree_int_cst_sgn	#
	testl	%eax, %eax	# D.24356
	jns	.L1989	#,
	.loc 1 9962 0
	movq	-16(%rbp), %rax	# link, tmp114
	movq	32(%rax), %rax	# link_2->list.value, D.24354
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24354,
	call	tree_low_cst	#
	movq	%rax, %rdx	#, D.24357
	movq	-8(%rbp), %rax	# enum_die, tmp115
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp115,
	call	add_AT_int	#
	jmp	.L1988	#
.L1989:
	.loc 1 9966 0
	movq	-16(%rbp), %rax	# link, tmp116
	movq	32(%rax), %rax	# link_2->list.value, D.24354
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24354,
	call	tree_low_cst	#
	.loc 1 9965 0
	movq	%rax, %rdx	# D.24357, D.24358
	movq	-8(%rbp), %rax	# enum_die, tmp117
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp117,
	call	add_AT_unsigned	#
.L1988:
.LBE79:
	.loc 1 9952 0
	movq	-16(%rbp), %rax	# link, tmp118
	movq	(%rax), %rax	# link_2->common.chain, tmp119
	movq	%rax, -16(%rbp)	# tmp119, link
.L1987:
	.loc 1 9951 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, link
	jne	.L1990	#,
.LBE78:
	jmp	.L1979	#
.L1984:
	.loc 1 9971 0
	movq	-24(%rbp), %rax	# type_die, tmp120
	movl	$1, %edx	#,
	movl	$60, %esi	#,
	movq	%rax, %rdi	# tmp120,
	call	add_AT_flag	#
.L1979:
	.loc 1 9972 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE207:
	.size	gen_enumeration_type_die, .-gen_enumeration_type_die
	.type	gen_formal_parameter_die, @function
gen_formal_parameter_die:
.LFB208:
	.loc 1 9991 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# node, node
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 9992 0
	movq	-24(%rbp), %rdx	# node, tmp74
	movq	-32(%rbp), %rax	# context_die, tmp75
	movq	%rax, %rsi	# tmp75,
	movl	$5, %edi	#,
	call	new_die	#
	movq	%rax, -16(%rbp)	# tmp76, parm_die
	.loc 1 9996 0
	movq	-24(%rbp), %rax	# node, tmp77
	movzbl	16(%rax), %eax	# node_2(D)->common.code, D.24359
	movzbl	%al, %eax	# D.24359, D.24360
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.24361
	movsbl	%al, %eax	# D.24361, D.24360
	cmpl	$100, %eax	#, D.24360
	je	.L1993	#,
	cmpl	$116, %eax	#, D.24360
	je	.L1994	#,
	jmp	.L2000	#
.L1993:
	.loc 1 9999 0
	movq	-24(%rbp), %rax	# node, tmp79
	movq	%rax, %rdi	# tmp79,
	call	decl_ultimate_origin	#
	movq	%rax, -8(%rbp)	# tmp80, origin
	.loc 1 10000 0
	cmpq	$0, -8(%rbp)	#, origin
	je	.L1995	#,
	.loc 1 10001 0
	movq	-8(%rbp), %rdx	# origin, tmp81
	movq	-16(%rbp), %rax	# parm_die, tmp82
	movq	%rdx, %rsi	# tmp81,
	movq	%rax, %rdi	# tmp82,
	call	add_abstract_origin_attribute	#
	jmp	.L1996	#
.L1995:
	.loc 1 10004 0
	movq	-24(%rbp), %rdx	# node, tmp83
	movq	-16(%rbp), %rax	# parm_die, tmp84
	movq	%rdx, %rsi	# tmp83,
	movq	%rax, %rdi	# tmp84,
	call	add_name_and_src_coords_attributes	#
	.loc 1 10007 0
	movq	-24(%rbp), %rax	# node, tmp85
	movzbl	17(%rax), %eax	# *node_2(D), tmp88
	shrb	$3, %al	#, D.24362
	andl	$1, %eax	#, D.24362
	.loc 1 10005 0
	movzbl	%al, %ecx	# D.24362, D.24360
	.loc 1 10006 0
	movq	-24(%rbp), %rax	# node, tmp89
	movzbl	17(%rax), %eax	# *node_2(D), tmp92
	shrb	$4, %al	#, D.24362
	andl	$1, %eax	#, D.24362
	.loc 1 10005 0
	movzbl	%al, %edx	# D.24362, D.24360
	movq	-24(%rbp), %rax	# node, tmp93
	movq	8(%rax), %rsi	# node_2(D)->common.type, D.24363
	movq	-32(%rbp), %rdi	# context_die, tmp94
	movq	-16(%rbp), %rax	# parm_die, tmp95
	movq	%rdi, %r8	# tmp94,
	movq	%rax, %rdi	# tmp95,
	call	add_type_attribute	#
	.loc 1 10009 0
	movq	-24(%rbp), %rax	# node, tmp96
	movzbl	50(%rax), %eax	# *node_2(D), D.24359
	andl	$64, %eax	#, D.24359
	testb	%al, %al	# D.24359
	je	.L1996	#,
	.loc 1 10010 0
	movq	-16(%rbp), %rax	# parm_die, tmp97
	movl	$1, %edx	#,
	movl	$52, %esi	#,
	movq	%rax, %rdi	# tmp97,
	call	add_AT_flag	#
.L1996:
	.loc 1 10013 0
	movq	-16(%rbp), %rdx	# parm_die, tmp98
	movq	-24(%rbp), %rax	# node, tmp99
	movq	%rdx, %rsi	# tmp98,
	movq	%rax, %rdi	# tmp99,
	call	equate_decl_number_to_die	#
	.loc 1 10014 0
	movq	-24(%rbp), %rax	# node, tmp100
	movzbl	49(%rax), %eax	# *node_2(D), D.24359
	andl	$-128, %eax	#, D.24359
	testb	%al, %al	# D.24359
	jne	.L1997	#,
	.loc 1 10015 0
	movq	-24(%rbp), %rdx	# node, tmp101
	movq	-16(%rbp), %rax	# parm_die, tmp102
	movq	%rdx, %rsi	# tmp101,
	movq	%rax, %rdi	# tmp102,
	call	add_location_or_const_value_attribute	#
	.loc 1 10017 0
	jmp	.L1998	#
.L1997:
	jmp	.L1998	#
.L1994:
	.loc 1 10021 0
	movq	-32(%rbp), %rdx	# context_die, tmp103
	movq	-24(%rbp), %rsi	# node, tmp104
	movq	-16(%rbp), %rax	# parm_die, tmp105
	movq	%rdx, %r8	# tmp103,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp105,
	call	add_type_attribute	#
	.loc 1 10022 0
	jmp	.L1998	#
.L2000:
	.loc 1 10025 0
	movl	$__FUNCTION__.16843, %edx	#,
	movl	$10025, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L1998:
	.loc 1 10028 0
	movq	-16(%rbp), %rax	# parm_die, D.24364
	.loc 1 10029 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE208:
	.size	gen_formal_parameter_die, .-gen_formal_parameter_die
	.type	gen_unspecified_parameters_die, @function
gen_unspecified_parameters_die:
.LFB209:
	.loc 1 10038 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# decl_or_type, decl_or_type
	movq	%rsi, -16(%rbp)	# context_die, context_die
	.loc 1 10039 0
	movq	-8(%rbp), %rdx	# decl_or_type, tmp59
	movq	-16(%rbp), %rax	# context_die, tmp60
	movq	%rax, %rsi	# tmp60,
	movl	$24, %edi	#,
	call	new_die	#
	.loc 1 10040 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE209:
	.size	gen_unspecified_parameters_die, .-gen_unspecified_parameters_die
	.type	gen_formal_types_die, @function
gen_formal_types_die:
.LFB210:
	.loc 1 10051 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# function_or_method_type, function_or_method_type
	movq	%rsi, -64(%rbp)	# context_die, context_die
	.loc 1 10053 0
	movq	$0, -32(%rbp)	#, formal_type
	.loc 1 10057 0
	movq	-56(%rbp), %rax	# function_or_method_type, tmp67
	movzbl	16(%rax), %eax	# function_or_method_type_9(D)->common.code, D.24365
	cmpb	$30, %al	#, D.24365
	jne	.L2003	#,
	.loc 1 10059 0
	movq	-56(%rbp), %rax	# function_or_method_type, tmp68
	movq	88(%rax), %rax	# function_or_method_type_9(D)->decl.arguments, tmp69
	movq	%rax, -24(%rbp)	# tmp69, arg
	.loc 1 10060 0
	movq	-56(%rbp), %rax	# function_or_method_type, tmp70
	movq	8(%rax), %rax	# function_or_method_type_9(D)->common.type, tmp71
	movq	%rax, -56(%rbp)	# tmp71, function_or_method_type
	jmp	.L2004	#
.L2003:
	.loc 1 10063 0
	movq	$0, -24(%rbp)	#, arg
.L2004:
	.loc 1 10065 0
	movq	-56(%rbp), %rax	# function_or_method_type, tmp72
	movq	24(%rax), %rax	# function_or_method_type_1->type.values, tmp73
	movq	%rax, -16(%rbp)	# tmp73, first_parm_type
	.loc 1 10069 0
	movq	-16(%rbp), %rax	# first_parm_type, tmp74
	movq	%rax, -40(%rbp)	# tmp74, link
	jmp	.L2005	#
.L2011:
.LBB80:
	.loc 1 10073 0
	movq	-40(%rbp), %rax	# link, tmp75
	movq	32(%rax), %rax	# link_2->list.value, tmp76
	movq	%rax, -32(%rbp)	# tmp76, formal_type
	.loc 1 10074 0
	movq	global_trees+216(%rip), %rax	# global_trees, D.24366
	cmpq	-32(%rbp), %rax	# formal_type, D.24366
	jne	.L2006	#,
	.loc 1 10075 0
	jmp	.L2007	#
.L2006:
	.loc 1 10078 0
	movq	-64(%rbp), %rdx	# context_die, tmp77
	movq	-32(%rbp), %rax	# formal_type, tmp78
	movq	%rdx, %rsi	# tmp77,
	movq	%rax, %rdi	# tmp78,
	call	gen_formal_parameter_die	#
	movq	%rax, -8(%rbp)	# tmp79, parm_die
	.loc 1 10079 0
	movq	-56(%rbp), %rax	# function_or_method_type, tmp80
	movzbl	16(%rax), %eax	# function_or_method_type_1->common.code, D.24365
	cmpb	$16, %al	#, D.24365
	jne	.L2008	#,
	.loc 1 10080 0
	movq	-40(%rbp), %rax	# link, tmp81
	cmpq	-16(%rbp), %rax	# first_parm_type, tmp81
	je	.L2009	#,
.L2008:
	.loc 1 10081 0
	cmpq	$0, -24(%rbp)	#, arg
	je	.L2010	#,
	.loc 1 10081 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# arg, tmp82
	movzbl	50(%rax), %eax	# *arg_7, D.24365
	andl	$64, %eax	#, D.24365
	testb	%al, %al	# D.24365
	je	.L2010	#,
.L2009:
	.loc 1 10082 0 is_stmt 1
	movq	-8(%rbp), %rax	# parm_die, tmp83
	movl	$1, %edx	#,
	movl	$52, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	add_AT_flag	#
.L2010:
	.loc 1 10084 0
	movq	-40(%rbp), %rax	# link, tmp84
	movq	(%rax), %rax	# link_2->common.chain, tmp85
	movq	%rax, -40(%rbp)	# tmp85, link
	.loc 1 10085 0
	cmpq	$0, -24(%rbp)	#, arg
	je	.L2005	#,
	.loc 1 10086 0
	movq	-24(%rbp), %rax	# arg, tmp86
	movq	(%rax), %rax	# arg_7->common.chain, tmp87
	movq	%rax, -24(%rbp)	# tmp87, arg
.L2005:
.LBE80:
	.loc 1 10069 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, link
	jne	.L2011	#,
.L2007:
	.loc 1 10091 0
	movq	global_trees+216(%rip), %rax	# global_trees, D.24366
	cmpq	-32(%rbp), %rax	# formal_type, D.24366
	je	.L2012	#,
	.loc 1 10092 0
	movq	-64(%rbp), %rdx	# context_die, tmp88
	movq	-56(%rbp), %rax	# function_or_method_type, tmp89
	movq	%rdx, %rsi	# tmp88,
	movq	%rax, %rdi	# tmp89,
	call	gen_unspecified_parameters_die	#
.L2012:
	.loc 1 10096 0
	movq	-56(%rbp), %rax	# function_or_method_type, tmp90
	movq	24(%rax), %rax	# function_or_method_type_1->type.values, tmp91
	movq	%rax, -40(%rbp)	# tmp91, link
	jmp	.L2013	#
.L2015:
	.loc 1 10099 0
	movq	-40(%rbp), %rax	# link, tmp92
	movq	32(%rax), %rax	# link_3->list.value, D.24366
	movq	-64(%rbp), %rdx	# context_die, tmp93
	movq	%rdx, %rsi	# tmp93,
	movq	%rax, %rdi	# D.24366,
	call	gen_type_die	#
	.loc 1 10098 0
	movq	-40(%rbp), %rax	# link, tmp94
	movq	(%rax), %rax	# link_3->common.chain, tmp95
	movq	%rax, -40(%rbp)	# tmp95, link
.L2013:
	.loc 1 10096 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, link
	je	.L2002	#,
	.loc 1 10097 0
	movq	-40(%rbp), %rax	# link, tmp96
	movq	32(%rax), %rax	# link_3->list.value, D.24366
	testq	%rax, %rax	# D.24366
	jne	.L2015	#,
.L2002:
	.loc 1 10100 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE210:
	.size	gen_formal_types_die, .-gen_formal_types_die
	.type	gen_type_die_for_member, @function
gen_type_die_for_member:
.LFB211:
	.loc 1 10112 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# type, type
	movq	%rsi, -16(%rbp)	# member, member
	movq	%rdx, -24(%rbp)	# context_die, context_die
	.loc 1 10113 0
	movq	-24(%rbp), %rdx	# context_die, tmp67
	movq	-8(%rbp), %rax	# type, tmp68
	movq	%rdx, %rsi	# tmp67,
	movq	%rax, %rdi	# tmp68,
	call	gen_type_die	#
	.loc 1 10117 0
	movq	-8(%rbp), %rax	# type, tmp69
	movq	(%rax), %rax	# type_1(D)->common.chain, D.24367
	movzbl	49(%rax), %eax	# *_3, D.24368
	andl	$1, %eax	#, D.24368
	testb	%al, %al	# D.24368
	je	.L2016	#,
	.loc 1 10118 0
	movq	-16(%rbp), %rax	# member, tmp70
	movq	%rax, %rdi	# tmp70,
	call	lookup_decl_die	#
	testq	%rax, %rax	# D.24369
	jne	.L2016	#,
	.loc 1 10120 0
	movq	-16(%rbp), %rax	# member, tmp71
	movq	%rax, %rdi	# tmp71,
	call	decl_ultimate_origin	#
	testq	%rax, %rax	# D.24367
	je	.L2018	#,
	.loc 1 10121 0
	movl	$__FUNCTION__.16868, %edx	#,
	movl	$10121, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2018:
	.loc 1 10123 0
	movq	-8(%rbp), %rax	# type, tmp72
	movq	%rax, %rdi	# tmp72,
	call	push_decl_scope	#
	.loc 1 10124 0
	movq	-16(%rbp), %rax	# member, tmp73
	movzbl	16(%rax), %eax	# member_6(D)->common.code, D.24368
	cmpb	$30, %al	#, D.24368
	jne	.L2019	#,
	.loc 1 10125 0
	movq	-8(%rbp), %rax	# type, tmp74
	movq	%rax, %rdi	# tmp74,
	call	lookup_type_die	#
	movq	%rax, %rdx	#, D.24369
	movq	-16(%rbp), %rax	# member, tmp75
	movq	%rdx, %rsi	# D.24369,
	movq	%rax, %rdi	# tmp75,
	call	gen_subprogram_die	#
	jmp	.L2020	#
.L2019:
	.loc 1 10127 0
	movq	-8(%rbp), %rax	# type, tmp76
	movq	%rax, %rdi	# tmp76,
	call	lookup_type_die	#
	movq	%rax, %rdx	#, D.24369
	movq	-16(%rbp), %rax	# member, tmp77
	movq	%rdx, %rsi	# D.24369,
	movq	%rax, %rdi	# tmp77,
	call	gen_variable_die	#
.L2020:
	.loc 1 10129 0
	call	pop_decl_scope	#
.L2016:
	.loc 1 10131 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE211:
	.size	gen_type_die_for_member, .-gen_type_die_for_member
	.type	dwarf2out_abstract_function, @function
dwarf2out_abstract_function:
.LFB212:
	.loc 1 10139 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# decl, decl
	.loc 1 10143 0
	movq	-40(%rbp), %rax	# decl, tmp66
	movzbl	49(%rax), %eax	# *decl_3(D), tmp69
	shrb	$7, %al	#, D.24370
	movzbl	%al, %eax	# D.24370, tmp70
	movl	%eax, -28(%rbp)	# tmp70, was_abstract
	.loc 1 10146 0
	movq	-40(%rbp), %rax	# decl, tmp71
	movq	112(%rax), %rax	# decl_3(D)->decl.abstract_origin, D.24371
	testq	%rax, %rax	# D.24371
	je	.L2022	#,
	.loc 1 10146 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# decl, tmp72
	movq	112(%rax), %rax	# decl_3(D)->decl.abstract_origin, iftmp.557
	jmp	.L2023	#
.L2022:
	.loc 1 10146 0 discriminator 2
	movq	-40(%rbp), %rax	# decl, iftmp.557
.L2023:
	.loc 1 10146 0 discriminator 3
	movq	%rax, -40(%rbp)	# iftmp.557, decl
	.loc 1 10148 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rax	# decl, tmp73
	movq	%rax, %rdi	# tmp73,
	call	lookup_decl_die	#
	movq	%rax, -24(%rbp)	# tmp74, old_die
	.loc 1 10149 0 discriminator 3
	cmpq	$0, -24(%rbp)	#, old_die
	je	.L2024	#,
	.loc 1 10149 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# old_die, tmp75
	movl	$32, %esi	#,
	movq	%rax, %rdi	# tmp75,
	call	get_AT_unsigned	#
	testl	%eax, %eax	# D.24372
	je	.L2024	#,
	.loc 1 10151 0 is_stmt 1
	jmp	.L2021	#
.L2024:
	.loc 1 10155 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.558
	cmpl	$1, %eax	#, debug_info_level.558
	jbe	.L2026	#,
	.loc 1 10157 0
	movq	-40(%rbp), %rax	# decl, tmp76
	movq	%rax, %rdi	# tmp76,
	call	decl_class_context	#
	movq	%rax, -16(%rbp)	# tmp77, context
	.loc 1 10158 0
	cmpq	$0, -16(%rbp)	#, context
	je	.L2026	#,
	.loc 1 10160 0
	movq	-40(%rbp), %rax	# decl, tmp78
	movq	%rax, %rdi	# tmp78,
	call	decl_function_context	#
	testq	%rax, %rax	# D.24371
	jne	.L2027	#,
	.loc 1 10160 0 is_stmt 0 discriminator 1
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, iftmp.559
	jmp	.L2028	#
.L2027:
	.loc 1 10160 0 discriminator 2
	movl	$0, %eax	#, iftmp.559
.L2028:
	.loc 1 10160 0 discriminator 3
	movq	-40(%rbp), %rsi	# decl, tmp79
	movq	-16(%rbp), %rcx	# context, tmp80
	movq	%rax, %rdx	# iftmp.559,
	movq	%rcx, %rdi	# tmp80,
	call	gen_type_die_for_member	#
.L2026:
	.loc 1 10164 0 is_stmt 1
	movq	current_function_decl(%rip), %rax	# current_function_decl, tmp81
	movq	%rax, -8(%rbp)	# tmp81, save_fn
	.loc 1 10165 0
	movq	-40(%rbp), %rax	# decl, tmp82
	movq	%rax, current_function_decl(%rip)	# tmp82, current_function_decl
	.loc 1 10167 0
	movq	-40(%rbp), %rax	# decl, tmp83
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	set_decl_abstract_flags	#
	.loc 1 10168 0
	movq	-40(%rbp), %rax	# decl, tmp84
	movq	%rax, %rdi	# tmp84,
	call	dwarf2out_decl	#
	.loc 1 10169 0
	cmpl	$0, -28(%rbp)	#, was_abstract
	jne	.L2029	#,
	.loc 1 10170 0
	movq	-40(%rbp), %rax	# decl, tmp85
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp85,
	call	set_decl_abstract_flags	#
.L2029:
	.loc 1 10172 0
	movq	-8(%rbp), %rax	# save_fn, tmp86
	movq	%rax, current_function_decl(%rip)	# tmp86, current_function_decl
.L2021:
	.loc 1 10173 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE212:
	.size	dwarf2out_abstract_function, .-dwarf2out_abstract_function
	.section	.rodata
.LC486:
	.string	"__builtin_va_alist"
	.text
	.type	gen_subprogram_die, @function
gen_subprogram_die:
.LFB213:
	.loc 1 10182 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$144, %rsp	#,
	movq	%rdi, -136(%rbp)	# decl, decl
	movq	%rsi, -144(%rbp)	# context_die, context_die
	.loc 1 10182 0
	movq	%fs:40, %rax	#, tmp243
	movq	%rax, -8(%rbp)	# tmp243, D.24382
	xorl	%eax, %eax	# tmp243
	.loc 1 10184 0
	movq	-136(%rbp), %rax	# decl, tmp128
	movq	%rax, %rdi	# tmp128,
	call	decl_ultimate_origin	#
	movq	%rax, -112(%rbp)	# tmp129, origin
	.loc 1 10189 0
	movq	-136(%rbp), %rax	# decl, tmp130
	movq	%rax, %rdi	# tmp130,
	call	lookup_decl_die	#
	movq	%rax, -88(%rbp)	# tmp131, old_die
	.loc 1 10190 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.561
	.loc 1 10191 0
	cmpq	-136(%rbp), %rax	# decl, current_function_decl.561
	jne	.L2031	#,
	.loc 1 10191 0 is_stmt 0 discriminator 2
	movq	-144(%rbp), %rax	# context_die, tmp132
	movq	%rax, %rdi	# tmp132,
	call	class_scope_p	#
	testl	%eax, %eax	# D.24373
	je	.L2032	#,
.L2031:
	.loc 1 10191 0 discriminator 1
	movl	$1, %eax	#, iftmp.560
	jmp	.L2033	#
.L2032:
	.loc 1 10191 0 discriminator 3
	movl	$0, %eax	#, iftmp.560
.L2033:
	.loc 1 10190 0 is_stmt 1
	movl	%eax, -120(%rbp)	# iftmp.560, declaration
	.loc 1 10200 0
	cmpq	$0, -112(%rbp)	#, origin
	je	.L2034	#,
	.loc 1 10200 0 is_stmt 0 discriminator 1
	cmpl	$0, -120(%rbp)	#, declaration
	je	.L2034	#,
	movq	-144(%rbp), %rax	# context_die, tmp133
	movq	%rax, %rdi	# tmp133,
	call	class_scope_p	#
	testl	%eax, %eax	# D.24373
	je	.L2034	#,
	.loc 1 10202 0 is_stmt 1
	movq	$0, -112(%rbp)	#, origin
	.loc 1 10203 0
	cmpq	$0, -88(%rbp)	#, old_die
	je	.L2034	#,
	.loc 1 10204 0
	movl	$__FUNCTION__.16888, %edx	#,
	movl	$10204, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2034:
	.loc 1 10207 0
	cmpq	$0, -112(%rbp)	#, origin
	je	.L2035	#,
	.loc 1 10209 0
	cmpl	$0, -120(%rbp)	#, declaration
	je	.L2036	#,
	.loc 1 10209 0 is_stmt 0 discriminator 1
	movq	-144(%rbp), %rax	# context_die, tmp134
	movq	%rax, %rdi	# tmp134,
	call	local_scope_p	#
	testl	%eax, %eax	# D.24373
	jne	.L2036	#,
	.loc 1 10210 0 is_stmt 1
	movl	$__FUNCTION__.16888, %edx	#,
	movl	$10210, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2036:
	.loc 1 10214 0
	cmpq	$0, -88(%rbp)	#, old_die
	je	.L2037	#,
	.loc 1 10214 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# old_die, tmp135
	movq	24(%rax), %rax	# old_die_9->die_parent, D.24374
	testq	%rax, %rax	# D.24374
	jne	.L2037	#,
	.loc 1 10215 0 is_stmt 1
	movq	-88(%rbp), %rdx	# old_die, tmp136
	movq	-144(%rbp), %rax	# context_die, tmp137
	movq	%rdx, %rsi	# tmp136,
	movq	%rax, %rdi	# tmp137,
	call	add_child_die	#
.L2037:
	.loc 1 10217 0
	movq	-136(%rbp), %rdx	# decl, tmp138
	movq	-144(%rbp), %rax	# context_die, tmp139
	movq	%rax, %rsi	# tmp139,
	movl	$46, %edi	#,
	call	new_die	#
	movq	%rax, -104(%rbp)	# tmp140, subr_die
	.loc 1 10218 0
	movq	-112(%rbp), %rdx	# origin, tmp141
	movq	-104(%rbp), %rax	# subr_die, tmp142
	movq	%rdx, %rsi	# tmp141,
	movq	%rax, %rdi	# tmp142,
	call	add_abstract_origin_attribute	#
	jmp	.L2038	#
.L2035:
	.loc 1 10220 0
	cmpq	$0, -88(%rbp)	#, old_die
	je	.L2039	#,
.LBB81:
	.loc 1 10222 0
	movq	-136(%rbp), %rax	# decl, tmp143
	movq	24(%rax), %rax	# decl_7(D)->decl.filename, D.24375
	movq	%rax, %rdi	# D.24375,
	call	lookup_filename	#
	movl	%eax, -116(%rbp)	# tmp144, file_index
	.loc 1 10224 0
	movq	-88(%rbp), %rax	# old_die, tmp145
	movl	$60, %esi	#,
	movq	%rax, %rdi	# tmp145,
	call	get_AT_flag	#
	testl	%eax, %eax	# D.24373
	jne	.L2040	#,
	.loc 1 10228 0
	movq	-88(%rbp), %rax	# old_die, tmp146
	movl	$32, %esi	#,
	movq	%rax, %rdi	# tmp146,
	call	get_AT_unsigned	#
	testl	%eax, %eax	# D.24376
	jne	.L2040	#,
	.loc 1 10235 0
	movq	global_dc(%rip), %rax	# global_dc, global_dc.562
	movl	60(%rax), %eax	# MEM[(struct output_buffer *)global_dc.562_25].state.diagnostic_count, D.24373
	testl	%eax, %eax	# D.24373
	je	.L2041	#,
	.loc 1 10236 0
	jmp	.L2030	#
.L2041:
	.loc 1 10237 0
	movl	$__FUNCTION__.16888, %edx	#,
	movl	$10237, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2040:
	.loc 1 10247 0
	movq	-88(%rbp), %rax	# old_die, tmp147
	movq	24(%rax), %rdx	# old_die_9->die_parent, D.24374
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.563
	cmpq	%rax, %rdx	# comp_unit_die.563, D.24374
	je	.L2043	#,
	.loc 1 10247 0 is_stmt 0 discriminator 1
	cmpq	$0, -144(%rbp)	#, context_die
	jne	.L2044	#,
.L2043:
	.loc 1 10248 0 is_stmt 1
	movq	-136(%rbp), %rax	# decl, tmp148
	movzbl	50(%rax), %eax	# *decl_7(D), D.24377
	andl	$64, %eax	#, D.24377
	testb	%al, %al	# D.24377
	jne	.L2045	#,
	.loc 1 10249 0
	movq	-88(%rbp), %rax	# old_die, tmp149
	movl	$58, %esi	#,
	movq	%rax, %rdi	# tmp149,
	call	get_AT_unsigned	#
	cmpl	-116(%rbp), %eax	# file_index, D.24376
	jne	.L2044	#,
	.loc 1 10250 0
	movq	-88(%rbp), %rax	# old_die, tmp150
	movl	$59, %esi	#,
	movq	%rax, %rdi	# tmp150,
	call	get_AT_unsigned	#
	.loc 1 10251 0
	movq	-136(%rbp), %rdx	# decl, tmp151
	movl	32(%rdx), %edx	# decl_7(D)->decl.linenum, D.24373
	.loc 1 10250 0
	cmpl	%edx, %eax	# D.24376, D.24376
	jne	.L2044	#,
.L2045:
	.loc 1 10253 0
	movq	-88(%rbp), %rax	# old_die, tmp152
	movq	%rax, -104(%rbp)	# tmp152, subr_die
	.loc 1 10256 0
	movq	-104(%rbp), %rax	# subr_die, tmp153
	movl	$60, %esi	#,
	movq	%rax, %rdi	# tmp153,
	call	remove_AT	#
	.loc 1 10257 0
	movq	-104(%rbp), %rax	# subr_die, tmp154
	movq	%rax, %rdi	# tmp154,
	call	remove_children	#
	jmp	.L2046	#
.L2044:
	.loc 1 10261 0
	movq	-136(%rbp), %rdx	# decl, tmp155
	movq	-144(%rbp), %rax	# context_die, tmp156
	movq	%rax, %rsi	# tmp156,
	movl	$46, %edi	#,
	call	new_die	#
	movq	%rax, -104(%rbp)	# tmp157, subr_die
	.loc 1 10262 0
	movq	-88(%rbp), %rdx	# old_die, tmp158
	movq	-104(%rbp), %rax	# subr_die, tmp159
	movl	$71, %esi	#,
	movq	%rax, %rdi	# tmp159,
	call	add_AT_die_ref	#
	.loc 1 10263 0
	movq	-88(%rbp), %rax	# old_die, tmp160
	movl	$58, %esi	#,
	movq	%rax, %rdi	# tmp160,
	call	get_AT_unsigned	#
	cmpl	-116(%rbp), %eax	# file_index, D.24376
	je	.L2047	#,
	.loc 1 10264 0
	movl	-116(%rbp), %edx	# file_index, D.24378
	movq	-104(%rbp), %rax	# subr_die, tmp161
	movl	$58, %esi	#,
	movq	%rax, %rdi	# tmp161,
	call	add_AT_unsigned	#
.L2047:
	.loc 1 10265 0
	movq	-88(%rbp), %rax	# old_die, tmp162
	movl	$59, %esi	#,
	movq	%rax, %rdi	# tmp162,
	call	get_AT_unsigned	#
	.loc 1 10266 0
	movq	-136(%rbp), %rdx	# decl, tmp163
	movl	32(%rdx), %edx	# decl_7(D)->decl.linenum, D.24373
	.loc 1 10265 0
	cmpl	%edx, %eax	# D.24376, D.24376
	je	.L2046	#,
	.loc 1 10268 0
	movq	-136(%rbp), %rax	# decl, tmp164
	movl	32(%rax), %eax	# decl_7(D)->decl.linenum, D.24373
	movslq	%eax, %rdx	# D.24373, D.24378
	movq	-104(%rbp), %rax	# subr_die, tmp165
	movl	$59, %esi	#,
	movq	%rax, %rdi	# tmp165,
	call	add_AT_unsigned	#
.LBE81:
	jmp	.L2038	#
.L2046:
	jmp	.L2038	#
.L2039:
	.loc 1 10273 0
	movq	-136(%rbp), %rdx	# decl, tmp166
	movq	-144(%rbp), %rax	# context_die, tmp167
	movq	%rax, %rsi	# tmp167,
	movl	$46, %edi	#,
	call	new_die	#
	movq	%rax, -104(%rbp)	# tmp168, subr_die
	.loc 1 10275 0
	movq	-136(%rbp), %rax	# decl, tmp169
	movzbl	18(%rax), %eax	# *decl_7(D), D.24377
	andl	$8, %eax	#, D.24377
	testb	%al, %al	# D.24377
	je	.L2048	#,
	.loc 1 10276 0
	movq	-104(%rbp), %rax	# subr_die, tmp170
	movl	$1, %edx	#,
	movl	$63, %esi	#,
	movq	%rax, %rdi	# tmp170,
	call	add_AT_flag	#
.L2048:
	.loc 1 10278 0
	movq	-136(%rbp), %rdx	# decl, tmp171
	movq	-104(%rbp), %rax	# subr_die, tmp172
	movq	%rdx, %rsi	# tmp171,
	movq	%rax, %rdi	# tmp172,
	call	add_name_and_src_coords_attributes	#
	.loc 1 10279 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.564
	cmpl	$1, %eax	#, debug_info_level.564
	jbe	.L2049	#,
	.loc 1 10281 0
	movq	-136(%rbp), %rax	# decl, tmp173
	movq	8(%rax), %rdx	# decl_7(D)->common.type, D.24379
	movq	-104(%rbp), %rax	# subr_die, tmp174
	movq	%rdx, %rsi	# D.24379,
	movq	%rax, %rdi	# tmp174,
	call	add_prototyped_attribute	#
	.loc 1 10282 0
	movq	-136(%rbp), %rax	# decl, tmp175
	movq	8(%rax), %rax	# decl_7(D)->common.type, D.24379
	movq	8(%rax), %rsi	# _49->common.type, D.24379
	movq	-144(%rbp), %rdx	# context_die, tmp176
	movq	-104(%rbp), %rax	# subr_die, tmp177
	movq	%rdx, %r8	# tmp176,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp177,
	call	add_type_attribute	#
.L2049:
	.loc 1 10286 0
	movq	-136(%rbp), %rdx	# decl, tmp178
	movq	-104(%rbp), %rax	# subr_die, tmp179
	movq	%rdx, %rsi	# tmp178,
	movq	%rax, %rdi	# tmp179,
	call	add_pure_or_virtual_attribute	#
	.loc 1 10287 0
	movq	-136(%rbp), %rax	# decl, tmp180
	movzbl	50(%rax), %eax	# *decl_7(D), D.24377
	andl	$64, %eax	#, D.24377
	testb	%al, %al	# D.24377
	je	.L2050	#,
	.loc 1 10288 0
	movq	-104(%rbp), %rax	# subr_die, tmp181
	movl	$1, %edx	#,
	movl	$52, %esi	#,
	movq	%rax, %rdi	# tmp181,
	call	add_AT_flag	#
.L2050:
	.loc 1 10290 0
	movq	-136(%rbp), %rax	# decl, tmp182
	movzbl	18(%rax), %eax	# *decl_7(D), D.24377
	andl	$32, %eax	#, D.24377
	testb	%al, %al	# D.24377
	je	.L2051	#,
	.loc 1 10291 0
	movq	-104(%rbp), %rax	# subr_die, tmp183
	movl	$2, %edx	#,
	movl	$50, %esi	#,
	movq	%rax, %rdi	# tmp183,
	call	add_AT_unsigned	#
	jmp	.L2038	#
.L2051:
	.loc 1 10292 0
	movq	-136(%rbp), %rax	# decl, tmp184
	movzbl	18(%rax), %eax	# *decl_7(D), D.24377
	andl	$16, %eax	#, D.24377
	testb	%al, %al	# D.24377
	je	.L2038	#,
	.loc 1 10293 0
	movq	-104(%rbp), %rax	# subr_die, tmp185
	movl	$3, %edx	#,
	movl	$50, %esi	#,
	movq	%rax, %rdi	# tmp185,
	call	add_AT_unsigned	#
.L2038:
	.loc 1 10296 0
	cmpl	$0, -120(%rbp)	#, declaration
	je	.L2052	#,
	.loc 1 10298 0
	cmpq	$0, -88(%rbp)	#, old_die
	je	.L2053	#,
	.loc 1 10298 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# old_die, tmp186
	movl	$32, %esi	#,
	movq	%rax, %rdi	# tmp186,
	call	get_AT_unsigned	#
	testl	%eax, %eax	# D.24376
	jne	.L2056	#,
.L2053:
	.loc 1 10300 0 is_stmt 1
	movq	-104(%rbp), %rax	# subr_die, tmp187
	movl	$1, %edx	#,
	movl	$60, %esi	#,
	movq	%rax, %rdi	# tmp187,
	call	add_AT_flag	#
	.loc 1 10306 0
	movq	-136(%rbp), %rax	# decl, tmp188
	movq	80(%rax), %rax	# decl_7(D)->decl.context, D.24379
	testq	%rax, %rax	# D.24379
	jne	.L2055	#,
	.loc 1 10306 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# decl, tmp189
	movzbl	49(%rax), %eax	# *decl_7(D), D.24377
	andl	$-128, %eax	#, D.24377
	testb	%al, %al	# D.24377
	je	.L2056	#,
.L2055:
	.loc 1 10307 0 is_stmt 1
	movq	-104(%rbp), %rdx	# subr_die, tmp190
	movq	-136(%rbp), %rax	# decl, tmp191
	movq	%rdx, %rsi	# tmp190,
	movq	%rax, %rdi	# tmp191,
	call	equate_decl_number_to_die	#
	jmp	.L2056	#
.L2052:
	.loc 1 10310 0
	movq	-136(%rbp), %rax	# decl, tmp192
	movzbl	49(%rax), %eax	# *decl_7(D), D.24377
	andl	$-128, %eax	#, D.24377
	testb	%al, %al	# D.24377
	je	.L2057	#,
	.loc 1 10312 0
	movq	-136(%rbp), %rax	# decl, tmp193
	movzbl	49(%rax), %eax	# *decl_7(D), D.24377
	andl	$8, %eax	#, D.24377
	testb	%al, %al	# D.24377
	je	.L2058	#,
	.loc 1 10312 0 is_stmt 0 discriminator 1
	movl	flag_no_inline(%rip), %eax	# flag_no_inline, flag_no_inline.565
	testl	%eax, %eax	# flag_no_inline.565
	jne	.L2058	#,
	.loc 1 10319 0 is_stmt 1
	movq	-136(%rbp), %rax	# decl, tmp194
	movzbl	50(%rax), %eax	# *decl_7(D), D.24377
	andl	$4, %eax	#, D.24377
	testb	%al, %al	# D.24377
	je	.L2059	#,
	.loc 1 10320 0
	movq	-104(%rbp), %rax	# subr_die, tmp195
	movl	$3, %edx	#,
	movl	$32, %esi	#,
	movq	%rax, %rdi	# tmp195,
	call	add_AT_unsigned	#
	.loc 1 10319 0
	jmp	.L2061	#
.L2059:
	.loc 1 10322 0
	movq	-104(%rbp), %rax	# subr_die, tmp196
	movl	$1, %edx	#,
	movl	$32, %esi	#,
	movq	%rax, %rdi	# tmp196,
	call	add_AT_unsigned	#
	.loc 1 10319 0
	jmp	.L2061	#
.L2058:
	.loc 1 10325 0
	movq	-104(%rbp), %rax	# subr_die, tmp197
	movl	$2, %edx	#,
	movl	$32, %esi	#,
	movq	%rax, %rdi	# tmp197,
	call	add_AT_unsigned	#
.L2061:
	.loc 1 10327 0
	movq	-104(%rbp), %rdx	# subr_die, tmp198
	movq	-136(%rbp), %rax	# decl, tmp199
	movq	%rdx, %rsi	# tmp198,
	movq	%rax, %rdi	# tmp199,
	call	equate_decl_number_to_die	#
	jmp	.L2056	#
.L2057:
	.loc 1 10329 0
	movq	-136(%rbp), %rax	# decl, tmp200
	movzbl	49(%rax), %eax	# *decl_7(D), D.24377
	andl	$1, %eax	#, D.24377
	testb	%al, %al	# D.24377
	jne	.L2056	#,
	.loc 1 10331 0
	cmpq	$0, -88(%rbp)	#, old_die
	je	.L2062	#,
	.loc 1 10331 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# old_die, tmp201
	movl	$32, %esi	#,
	movq	%rax, %rdi	# tmp201,
	call	get_AT_unsigned	#
	testl	%eax, %eax	# D.24376
	jne	.L2063	#,
.L2062:
	.loc 1 10332 0 is_stmt 1
	movq	-104(%rbp), %rdx	# subr_die, tmp202
	movq	-136(%rbp), %rax	# decl, tmp203
	movq	%rdx, %rsi	# tmp202,
	movq	%rax, %rdi	# tmp203,
	call	equate_decl_number_to_die	#
.L2063:
	.loc 1 10334 0
	movl	current_funcdef_number(%rip), %edx	# current_funcdef_number, current_funcdef_number.566
	leaq	-48(%rbp), %rax	#, tmp204
	movl	%edx, %ecx	# current_funcdef_number.566,
	movl	$.LC65, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp204,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 10336 0
	leaq	-48(%rbp), %rdx	#, tmp205
	movq	-104(%rbp), %rax	# subr_die, tmp206
	movl	$17, %esi	#,
	movq	%rax, %rdi	# tmp206,
	call	add_AT_lbl_id	#
	.loc 1 10337 0
	movl	current_funcdef_number(%rip), %edx	# current_funcdef_number, current_funcdef_number.567
	leaq	-48(%rbp), %rax	#, tmp207
	movl	%edx, %ecx	# current_funcdef_number.567,
	movl	$.LC66, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp207,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 10339 0
	leaq	-48(%rbp), %rdx	#, tmp208
	movq	-104(%rbp), %rax	# subr_die, tmp209
	movl	$18, %esi	#,
	movq	%rax, %rdi	# tmp209,
	call	add_AT_lbl_id	#
	.loc 1 10341 0
	movq	-104(%rbp), %rdx	# subr_die, tmp210
	movq	-136(%rbp), %rax	# decl, tmp211
	movq	%rdx, %rsi	# tmp210,
	movq	%rax, %rdi	# tmp211,
	call	add_pubname	#
	.loc 1 10342 0
	movq	-104(%rbp), %rdx	# subr_die, tmp212
	movq	-136(%rbp), %rax	# decl, tmp213
	movq	%rdx, %rsi	# tmp212,
	movq	%rax, %rdi	# tmp213,
	call	add_arange	#
	.loc 1 10353 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.569
	testl	%eax, %eax	# frame_pointer_needed.569
	je	.L2064	#,
	.loc 1 10353 0 is_stmt 0 discriminator 1
	movq	global_rtl+32(%rip), %rax	# global_rtl, iftmp.568
	jmp	.L2065	#
.L2064:
	.loc 1 10353 0 discriminator 2
	movq	global_rtl+16(%rip), %rax	# global_rtl, iftmp.568
.L2065:
	.loc 1 10353 0 discriminator 3
	movq	%rax, -80(%rbp)	# iftmp.568, fp_reg
	.loc 1 10354 0 is_stmt 1 discriminator 3
	movq	-80(%rbp), %rax	# fp_reg, tmp214
	movq	%rax, %rdi	# tmp214,
	call	reg_loc_descriptor	#
	movq	%rax, %rdx	#, D.24380
	movq	-104(%rbp), %rax	# subr_die, tmp215
	movl	$64, %esi	#,
	movq	%rax, %rdi	# tmp215,
	call	add_AT_loc	#
.L2056:
	.loc 1 10378 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.570
	cmpl	$1, %eax	#, debug_info_level.570
	jbe	.L2066	#,
	.loc 1 10380 0
	cmpl	$0, -120(%rbp)	#, declaration
	je	.L2067	#,
	.loc 1 10381 0
	movq	-104(%rbp), %rdx	# subr_die, tmp216
	movq	-136(%rbp), %rax	# decl, tmp217
	movq	%rdx, %rsi	# tmp216,
	movq	%rax, %rdi	# tmp217,
	call	gen_formal_types_die	#
	jmp	.L2066	#
.L2067:
.LBB82:
	.loc 1 10385 0
	movq	-136(%rbp), %rax	# decl, tmp218
	movq	88(%rax), %rax	# decl_7(D)->decl.arguments, tmp219
	movq	%rax, -72(%rbp)	# tmp219, arg_decls
	.loc 1 10390 0
	movq	-72(%rbp), %rax	# arg_decls, tmp220
	movq	%rax, -96(%rbp)	# tmp220, parm
	jmp	.L2068	#
.L2071:
	.loc 1 10391 0
	movq	-96(%rbp), %rax	# parm, tmp221
	movzbl	16(%rax), %eax	# parm_4->common.code, D.24377
	cmpb	$35, %al	#, D.24377
	jne	.L2069	#,
	.loc 1 10393 0
	movq	-96(%rbp), %rax	# parm, tmp222
	movq	72(%rax), %rax	# parm_4->decl.name, D.24379
	testq	%rax, %rax	# D.24379
	je	.L2070	#,
	.loc 1 10394 0
	movq	-96(%rbp), %rax	# parm, tmp223
	movq	72(%rax), %rax	# parm_4->decl.name, D.24379
	movq	32(%rax), %rax	# _83->identifier.id.str, D.24381
	movl	$.LC486, %esi	#,
	movq	%rax, %rdi	# D.24381,
	call	strcmp	#
	testl	%eax, %eax	# D.24373
	jne	.L2070	#,
	.loc 1 10396 0
	movq	-104(%rbp), %rdx	# subr_die, tmp224
	movq	-96(%rbp), %rax	# parm, tmp225
	movq	%rdx, %rsi	# tmp224,
	movq	%rax, %rdi	# tmp225,
	call	gen_unspecified_parameters_die	#
	jmp	.L2069	#
.L2070:
	.loc 1 10398 0
	movq	-104(%rbp), %rdx	# subr_die, tmp226
	movq	-96(%rbp), %rax	# parm, tmp227
	movq	%rdx, %rsi	# tmp226,
	movq	%rax, %rdi	# tmp227,
	call	gen_decl_die	#
.L2069:
	.loc 1 10390 0
	movq	-96(%rbp), %rax	# parm, tmp228
	movq	(%rax), %rax	# parm_4->common.chain, tmp229
	movq	%rax, -96(%rbp)	# tmp229, parm
.L2068:
	.loc 1 10390 0 is_stmt 0 discriminator 1
	cmpq	$0, -96(%rbp)	#, parm
	jne	.L2071	#,
	.loc 1 10407 0 is_stmt 1
	movq	-136(%rbp), %rax	# decl, tmp230
	movq	8(%rax), %rax	# decl_7(D)->common.type, D.24379
	movq	24(%rax), %rax	# _87->type.values, tmp231
	movq	%rax, -64(%rbp)	# tmp231, fn_arg_types
	.loc 1 10408 0
	cmpq	$0, -64(%rbp)	#, fn_arg_types
	je	.L2072	#,
	.loc 1 10411 0
	movq	-64(%rbp), %rax	# fn_arg_types, tmp232
	movq	%rax, %rdi	# tmp232,
	call	tree_last	#
	movq	32(%rax), %rdx	# _89->list.value, D.24379
	movq	global_trees+216(%rip), %rax	# global_trees, D.24379
	cmpq	%rax, %rdx	# D.24379, D.24379
	je	.L2066	#,
	.loc 1 10412 0
	movq	-104(%rbp), %rdx	# subr_die, tmp233
	movq	-136(%rbp), %rax	# decl, tmp234
	movq	%rdx, %rsi	# tmp233,
	movq	%rax, %rdi	# tmp234,
	call	gen_unspecified_parameters_die	#
	jmp	.L2066	#
.L2072:
	.loc 1 10414 0
	movq	-136(%rbp), %rax	# decl, tmp235
	movq	104(%rax), %rax	# decl_7(D)->decl.initial, D.24379
	testq	%rax, %rax	# D.24379
	jne	.L2066	#,
	.loc 1 10415 0
	movq	-104(%rbp), %rdx	# subr_die, tmp236
	movq	-136(%rbp), %rax	# decl, tmp237
	movq	%rdx, %rsi	# tmp236,
	movq	%rax, %rdi	# tmp237,
	call	gen_unspecified_parameters_die	#
.L2066:
.LBE82:
	.loc 1 10420 0
	movq	-136(%rbp), %rax	# decl, tmp238
	movq	104(%rax), %rax	# decl_7(D)->decl.initial, tmp239
	movq	%rax, -56(%rbp)	# tmp239, outer_scope
	.loc 1 10436 0
	cmpl	$0, -120(%rbp)	#, declaration
	jne	.L2030	#,
	.loc 1 10436 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# outer_scope, tmp240
	movzbl	16(%rax), %eax	# outer_scope_93->common.code, D.24377
	testb	%al, %al	# D.24377
	je	.L2030	#,
	.loc 1 10438 0 is_stmt 1
	movl	$0, current_function_has_inlines(%rip)	#, current_function_has_inlines
	.loc 1 10439 0
	movq	-104(%rbp), %rcx	# subr_die, tmp241
	movq	-56(%rbp), %rax	# outer_scope, tmp242
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp241,
	movq	%rax, %rdi	# tmp242,
	call	decls_for_scope	#
.L2030:
	.loc 1 10453 0
	movq	-8(%rbp), %rax	# D.24382, tmp244
	xorq	%fs:40, %rax	#, tmp244
	je	.L2076	#,
	call	__stack_chk_fail	#
.L2076:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE213:
	.size	gen_subprogram_die, .-gen_subprogram_die
	.type	gen_variable_die, @function
gen_variable_die:
.LFB214:
	.loc 1 10461 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# decl, decl
	movq	%rsi, -48(%rbp)	# context_die, context_die
	.loc 1 10462 0
	movq	-40(%rbp), %rax	# decl, tmp93
	movq	%rax, %rdi	# tmp93,
	call	decl_ultimate_origin	#
	movq	%rax, -24(%rbp)	# tmp94, origin
	.loc 1 10463 0
	movq	-40(%rbp), %rdx	# decl, tmp95
	movq	-48(%rbp), %rax	# context_die, tmp96
	movq	%rax, %rsi	# tmp96,
	movl	$52, %edi	#,
	call	new_die	#
	movq	%rax, -16(%rbp)	# tmp97, var_die
	.loc 1 10465 0
	movq	-40(%rbp), %rax	# decl, tmp98
	movq	%rax, %rdi	# tmp98,
	call	lookup_decl_die	#
	movq	%rax, -8(%rbp)	# tmp99, old_die
	.loc 1 10466 0
	movq	-40(%rbp), %rax	# decl, tmp100
	movzbl	49(%rax), %eax	# *decl_2(D), D.24384
	andl	$1, %eax	#, D.24384
	.loc 1 10467 0
	testb	%al, %al	# D.24384
	jne	.L2078	#,
	.loc 1 10467 0 is_stmt 0 discriminator 2
	movq	-48(%rbp), %rax	# context_die, tmp101
	movq	%rax, %rdi	# tmp101,
	call	class_scope_p	#
	testl	%eax, %eax	# D.24385
	je	.L2079	#,
.L2078:
	.loc 1 10467 0 discriminator 1
	movl	$1, %eax	#, iftmp.575
	jmp	.L2080	#
.L2079:
	.loc 1 10467 0 discriminator 3
	movl	$0, %eax	#, iftmp.575
.L2080:
	.loc 1 10466 0 is_stmt 1
	movl	%eax, -32(%rbp)	# iftmp.575, declaration
	.loc 1 10469 0
	cmpq	$0, -24(%rbp)	#, origin
	je	.L2081	#,
	.loc 1 10470 0
	movq	-24(%rbp), %rdx	# origin, tmp102
	movq	-16(%rbp), %rax	# var_die, tmp103
	movq	%rdx, %rsi	# tmp102,
	movq	%rax, %rdi	# tmp103,
	call	add_abstract_origin_attribute	#
	jmp	.L2082	#
.L2081:
	.loc 1 10480 0
	cmpq	$0, -8(%rbp)	#, old_die
	je	.L2083	#,
	.loc 1 10480 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# decl, tmp104
	movzbl	18(%rax), %eax	# *decl_2(D), D.24384
	andl	$4, %eax	#, D.24384
	testb	%al, %al	# D.24384
	je	.L2083	#,
	.loc 1 10481 0 is_stmt 1
	movq	-8(%rbp), %rax	# old_die, tmp105
	movl	$60, %esi	#,
	movq	%rax, %rdi	# tmp105,
	call	get_AT_flag	#
	cmpl	$1, %eax	#, D.24385
	jne	.L2083	#,
	.loc 1 10484 0
	movq	-8(%rbp), %rdx	# old_die, tmp106
	movq	-16(%rbp), %rax	# var_die, tmp107
	movl	$71, %esi	#,
	movq	%rax, %rdi	# tmp107,
	call	add_AT_die_ref	#
	.loc 1 10485 0
	movq	-40(%rbp), %rax	# decl, tmp108
	movq	72(%rax), %rax	# decl_2(D)->decl.name, D.24386
	testq	%rax, %rax	# D.24386
	je	.L2084	#,
.LBB83:
	.loc 1 10487 0
	movq	-40(%rbp), %rax	# decl, tmp109
	movq	24(%rax), %rax	# decl_2(D)->decl.filename, D.24387
	movq	%rax, %rdi	# D.24387,
	call	lookup_filename	#
	movl	%eax, -28(%rbp)	# tmp110, file_index
	.loc 1 10489 0
	movq	-8(%rbp), %rax	# old_die, tmp111
	movl	$58, %esi	#,
	movq	%rax, %rdi	# tmp111,
	call	get_AT_unsigned	#
	cmpl	-28(%rbp), %eax	# file_index, D.24388
	je	.L2085	#,
	.loc 1 10490 0
	movl	-28(%rbp), %edx	# file_index, D.24389
	movq	-16(%rbp), %rax	# var_die, tmp112
	movl	$58, %esi	#,
	movq	%rax, %rdi	# tmp112,
	call	add_AT_unsigned	#
.L2085:
	.loc 1 10492 0
	movq	-8(%rbp), %rax	# old_die, tmp113
	movl	$59, %esi	#,
	movq	%rax, %rdi	# tmp113,
	call	get_AT_unsigned	#
	.loc 1 10493 0
	movq	-40(%rbp), %rdx	# decl, tmp114
	movl	32(%rdx), %edx	# decl_2(D)->decl.linenum, D.24385
	.loc 1 10492 0
	cmpl	%edx, %eax	# D.24388, D.24388
	je	.L2084	#,
	.loc 1 10496 0
	movq	-40(%rbp), %rax	# decl, tmp115
	movl	32(%rax), %eax	# decl_2(D)->decl.linenum, D.24385
	.loc 1 10495 0
	movslq	%eax, %rdx	# D.24385, D.24389
	movq	-16(%rbp), %rax	# var_die, tmp116
	movl	$59, %esi	#,
	movq	%rax, %rdi	# tmp116,
	call	add_AT_unsigned	#
.LBE83:
	.loc 1 10485 0
	jmp	.L2082	#
.L2084:
	.loc 1 10485 0 is_stmt 0 discriminator 1
	jmp	.L2082	#
.L2083:
	.loc 1 10501 0 is_stmt 1
	movq	-40(%rbp), %rdx	# decl, tmp117
	movq	-16(%rbp), %rax	# var_die, tmp118
	movq	%rdx, %rsi	# tmp117,
	movq	%rax, %rdi	# tmp118,
	call	add_name_and_src_coords_attributes	#
	.loc 1 10503 0
	movq	-40(%rbp), %rax	# decl, tmp119
	movzbl	17(%rax), %eax	# *decl_2(D), tmp122
	shrb	$3, %al	#, D.24390
	andl	$1, %eax	#, D.24390
	.loc 1 10502 0
	movzbl	%al, %ecx	# D.24390, D.24385
	movq	-40(%rbp), %rax	# decl, tmp123
	movzbl	17(%rax), %eax	# *decl_2(D), tmp126
	shrb	$4, %al	#, D.24390
	andl	$1, %eax	#, D.24390
	movzbl	%al, %edx	# D.24390, D.24385
	movq	-40(%rbp), %rax	# decl, tmp127
	movq	8(%rax), %rsi	# decl_2(D)->common.type, D.24386
	movq	-48(%rbp), %rdi	# context_die, tmp128
	movq	-16(%rbp), %rax	# var_die, tmp129
	movq	%rdi, %r8	# tmp128,
	movq	%rax, %rdi	# tmp129,
	call	add_type_attribute	#
	.loc 1 10505 0
	movq	-40(%rbp), %rax	# decl, tmp130
	movzbl	18(%rax), %eax	# *decl_2(D), D.24384
	andl	$8, %eax	#, D.24384
	testb	%al, %al	# D.24384
	je	.L2086	#,
	.loc 1 10506 0
	movq	-16(%rbp), %rax	# var_die, tmp131
	movl	$1, %edx	#,
	movl	$63, %esi	#,
	movq	%rax, %rdi	# tmp131,
	call	add_AT_flag	#
.L2086:
	.loc 1 10508 0
	movq	-40(%rbp), %rax	# decl, tmp132
	movzbl	50(%rax), %eax	# *decl_2(D), D.24384
	andl	$64, %eax	#, D.24384
	testb	%al, %al	# D.24384
	je	.L2087	#,
	.loc 1 10509 0
	movq	-16(%rbp), %rax	# var_die, tmp133
	movl	$1, %edx	#,
	movl	$52, %esi	#,
	movq	%rax, %rdi	# tmp133,
	call	add_AT_flag	#
.L2087:
	.loc 1 10511 0
	movq	-40(%rbp), %rax	# decl, tmp134
	movzbl	18(%rax), %eax	# *decl_2(D), D.24384
	andl	$32, %eax	#, D.24384
	testb	%al, %al	# D.24384
	je	.L2088	#,
	.loc 1 10512 0
	movq	-16(%rbp), %rax	# var_die, tmp135
	movl	$2, %edx	#,
	movl	$50, %esi	#,
	movq	%rax, %rdi	# tmp135,
	call	add_AT_unsigned	#
	jmp	.L2082	#
.L2088:
	.loc 1 10513 0
	movq	-40(%rbp), %rax	# decl, tmp136
	movzbl	18(%rax), %eax	# *decl_2(D), D.24384
	andl	$16, %eax	#, D.24384
	testb	%al, %al	# D.24384
	je	.L2082	#,
	.loc 1 10514 0
	movq	-16(%rbp), %rax	# var_die, tmp137
	movl	$3, %edx	#,
	movl	$50, %esi	#,
	movq	%rax, %rdi	# tmp137,
	call	add_AT_unsigned	#
.L2082:
	.loc 1 10517 0
	cmpl	$0, -32(%rbp)	#, declaration
	je	.L2089	#,
	.loc 1 10518 0
	movq	-16(%rbp), %rax	# var_die, tmp138
	movl	$1, %edx	#,
	movl	$60, %esi	#,
	movq	%rax, %rdi	# tmp138,
	call	add_AT_flag	#
.L2089:
	.loc 1 10520 0
	movq	-48(%rbp), %rax	# context_die, tmp139
	movq	%rax, %rdi	# tmp139,
	call	class_scope_p	#
	testl	%eax, %eax	# D.24385
	jne	.L2090	#,
	.loc 1 10520 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# decl, tmp140
	movzbl	49(%rax), %eax	# *decl_2(D), D.24384
	andl	$-128, %eax	#, D.24384
	testb	%al, %al	# D.24384
	je	.L2091	#,
.L2090:
	.loc 1 10521 0 is_stmt 1
	movq	-16(%rbp), %rdx	# var_die, tmp141
	movq	-40(%rbp), %rax	# decl, tmp142
	movq	%rdx, %rsi	# tmp141,
	movq	%rax, %rdi	# tmp142,
	call	equate_decl_number_to_die	#
.L2091:
	.loc 1 10523 0
	cmpl	$0, -32(%rbp)	#, declaration
	jne	.L2092	#,
	.loc 1 10523 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# decl, tmp143
	movzbl	49(%rax), %eax	# *decl_2(D), D.24384
	andl	$-128, %eax	#, D.24384
	testb	%al, %al	# D.24384
	jne	.L2092	#,
	.loc 1 10525 0 is_stmt 1
	movq	-40(%rbp), %rdx	# decl, tmp144
	movq	-16(%rbp), %rax	# var_die, tmp145
	movq	%rdx, %rsi	# tmp144,
	movq	%rax, %rdi	# tmp145,
	call	add_location_or_const_value_attribute	#
	.loc 1 10526 0
	movq	-16(%rbp), %rdx	# var_die, tmp146
	movq	-40(%rbp), %rax	# decl, tmp147
	movq	%rdx, %rsi	# tmp146,
	movq	%rax, %rdi	# tmp147,
	call	add_pubname	#
	jmp	.L2077	#
.L2092:
	.loc 1 10529 0
	movq	-40(%rbp), %rdx	# decl, tmp148
	movq	-16(%rbp), %rax	# var_die, tmp149
	movq	%rdx, %rsi	# tmp148,
	movq	%rax, %rdi	# tmp149,
	call	tree_add_const_value_attribute	#
.L2077:
	.loc 1 10530 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE214:
	.size	gen_variable_die, .-gen_variable_die
	.section	.rodata
.LC487:
	.string	"L"
	.text
	.type	gen_label_die, @function
gen_label_die:
.LFB215:
	.loc 1 10538 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# decl, decl
	movq	%rsi, -96(%rbp)	# context_die, context_die
	.loc 1 10538 0
	movq	%fs:40, %rax	#, tmp94
	movq	%rax, -8(%rbp)	# tmp94, D.24396
	xorl	%eax, %eax	# tmp94
	.loc 1 10539 0
	movq	-88(%rbp), %rax	# decl, tmp70
	movq	%rax, %rdi	# tmp70,
	call	decl_ultimate_origin	#
	movq	%rax, -72(%rbp)	# tmp71, origin
	.loc 1 10540 0
	movq	-88(%rbp), %rdx	# decl, tmp72
	movq	-96(%rbp), %rax	# context_die, tmp73
	movq	%rax, %rsi	# tmp73,
	movl	$10, %edi	#,
	call	new_die	#
	movq	%rax, -64(%rbp)	# tmp74, lbl_die
	.loc 1 10544 0
	cmpq	$0, -72(%rbp)	#, origin
	je	.L2095	#,
	.loc 1 10545 0
	movq	-72(%rbp), %rdx	# origin, tmp75
	movq	-64(%rbp), %rax	# lbl_die, tmp76
	movq	%rdx, %rsi	# tmp75,
	movq	%rax, %rdi	# tmp76,
	call	add_abstract_origin_attribute	#
	jmp	.L2096	#
.L2095:
	.loc 1 10547 0
	movq	-88(%rbp), %rdx	# decl, tmp77
	movq	-64(%rbp), %rax	# lbl_die, tmp78
	movq	%rdx, %rsi	# tmp77,
	movq	%rax, %rdi	# tmp78,
	call	add_name_and_src_coords_attributes	#
.L2096:
	.loc 1 10549 0
	movq	-88(%rbp), %rax	# decl, tmp79
	movzbl	49(%rax), %eax	# *decl_2(D), D.24391
	andl	$-128, %eax	#, D.24391
	testb	%al, %al	# D.24391
	je	.L2097	#,
	.loc 1 10550 0
	movq	-64(%rbp), %rdx	# lbl_die, tmp80
	movq	-88(%rbp), %rax	# decl, tmp81
	movq	%rdx, %rsi	# tmp80,
	movq	%rax, %rdi	# tmp81,
	call	equate_decl_number_to_die	#
	jmp	.L2094	#
.L2097:
	.loc 1 10553 0
	movq	-88(%rbp), %rax	# decl, tmp82
	movq	144(%rax), %rax	# decl_2(D)->decl.rtl, D.24392
	testq	%rax, %rax	# D.24392
	je	.L2099	#,
	.loc 1 10553 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# decl, tmp83
	movq	144(%rax), %rax	# decl_2(D)->decl.rtl, iftmp.576
	jmp	.L2100	#
.L2099:
	.loc 1 10553 0 discriminator 2
	movq	-88(%rbp), %rax	# decl, tmp84
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp84,
	call	make_decl_rtl	#
	movq	-88(%rbp), %rax	# decl, tmp85
	movq	144(%rax), %rax	# decl_2(D)->decl.rtl, iftmp.576
.L2100:
	.loc 1 10553 0 discriminator 3
	movq	%rax, -56(%rbp)	# iftmp.576, insn
	.loc 1 10558 0 is_stmt 1 discriminator 3
	movq	-56(%rbp), %rax	# insn, tmp86
	movzwl	(%rax), %eax	# insn_11->code, D.24393
	cmpw	$36, %ax	#, D.24393
	je	.L2101	#,
	.loc 1 10559 0
	movq	-56(%rbp), %rax	# insn, tmp87
	movzwl	(%rax), %eax	# insn_11->code, D.24393
	cmpw	$37, %ax	#, D.24393
	jne	.L2094	#,
	.loc 1 10560 0
	movq	-56(%rbp), %rax	# insn, tmp88
	movl	40(%rax), %eax	# insn_11->fld[4].rtint, D.24394
	cmpl	$-88, %eax	#, D.24394
	jne	.L2094	#,
.L2101:
	.loc 1 10567 0
	movq	-56(%rbp), %rax	# insn, tmp89
	movzbl	3(%rax), %eax	# *insn_11, D.24391
	andl	$8, %eax	#, D.24391
	testb	%al, %al	# D.24391
	je	.L2102	#,
	.loc 1 10568 0
	movl	$__FUNCTION__.16912, %edx	#,
	movl	$10568, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2102:
	.loc 1 10570 0
	movq	-56(%rbp), %rax	# insn, tmp90
	movl	48(%rax), %eax	# insn_11->fld[5].rtint, D.24394
	movl	%eax, %edx	# D.24394, D.24395
	leaq	-48(%rbp), %rax	#, tmp91
	movl	%edx, %ecx	# D.24395,
	movl	$.LC487, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp91,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 10571 0
	leaq	-48(%rbp), %rdx	#, tmp92
	movq	-64(%rbp), %rax	# lbl_die, tmp93
	movl	$17, %esi	#,
	movq	%rax, %rdi	# tmp93,
	call	add_AT_lbl_id	#
.L2094:
	.loc 1 10574 0
	movq	-8(%rbp), %rax	# D.24396, tmp95
	xorq	%fs:40, %rax	#, tmp95
	je	.L2103	#,
	call	__stack_chk_fail	#
.L2103:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE215:
	.size	gen_label_die, .-gen_label_die
	.type	gen_lexical_block_die, @function
gen_lexical_block_die:
.LFB216:
	.loc 1 10583 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -72(%rbp)	# stmt, stmt
	movq	%rsi, -80(%rbp)	# context_die, context_die
	movl	%edx, -84(%rbp)	# depth, depth
	.loc 1 10583 0
	movq	%fs:40, %rax	#, tmp97
	movq	%rax, -8(%rbp)	# tmp97, D.24403
	xorl	%eax, %eax	# tmp97
	.loc 1 10584 0
	movq	-72(%rbp), %rdx	# stmt, tmp68
	movq	-80(%rbp), %rax	# context_die, tmp69
	movq	%rax, %rsi	# tmp69,
	movl	$11, %edi	#,
	call	new_die	#
	movq	%rax, -56(%rbp)	# tmp70, stmt_die
	.loc 1 10587 0
	movq	-72(%rbp), %rax	# stmt, tmp71
	movzbl	24(%rax), %eax	# *stmt_3(D), D.24398
	andl	$2, %eax	#, D.24398
	testb	%al, %al	# D.24398
	jne	.L2105	#,
	.loc 1 10589 0
	movq	-72(%rbp), %rax	# stmt, tmp72
	movq	72(%rax), %rax	# stmt_3(D)->block.fragment_chain, D.24399
	testq	%rax, %rax	# D.24399
	je	.L2106	#,
.LBB84:
	.loc 1 10593 0
	movq	-72(%rbp), %rax	# stmt, tmp73
	movq	%rax, %rdi	# tmp73,
	call	add_ranges	#
	movl	%eax, %edx	# D.24400, D.24401
	movq	-56(%rbp), %rax	# stmt_die, tmp74
	movl	$85, %esi	#,
	movq	%rax, %rdi	# tmp74,
	call	add_AT_range_list	#
	.loc 1 10595 0
	movq	-72(%rbp), %rax	# stmt, tmp75
	movq	72(%rax), %rax	# stmt_3(D)->block.fragment_chain, tmp76
	movq	%rax, -64(%rbp)	# tmp76, chain
.L2107:
	.loc 1 10598 0 discriminator 1
	movq	-64(%rbp), %rax	# chain, tmp77
	movq	%rax, %rdi	# tmp77,
	call	add_ranges	#
	.loc 1 10599 0 discriminator 1
	movq	-64(%rbp), %rax	# chain, tmp78
	movq	72(%rax), %rax	# chain_1->block.fragment_chain, tmp79
	movq	%rax, -64(%rbp)	# tmp79, chain
	.loc 1 10601 0 discriminator 1
	cmpq	$0, -64(%rbp)	#, chain
	jne	.L2107	#,
	.loc 1 10602 0
	movl	$0, %edi	#,
	call	add_ranges	#
.LBE84:
	jmp	.L2105	#
.L2106:
	.loc 1 10606 0
	movq	-72(%rbp), %rax	# stmt, tmp80
	movl	24(%rax), %eax	# *stmt_3(D), tmp83
	shrl	$2, %eax	#, D.24402
	movl	%eax, %edx	# D.24402, D.24400
	leaq	-48(%rbp), %rax	#, tmp84
	movl	%edx, %ecx	# D.24400,
	movl	$.LC456, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp84,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 10608 0
	leaq	-48(%rbp), %rdx	#, tmp85
	movq	-56(%rbp), %rax	# stmt_die, tmp86
	movl	$17, %esi	#,
	movq	%rax, %rdi	# tmp86,
	call	add_AT_lbl_id	#
	.loc 1 10609 0
	movq	-72(%rbp), %rax	# stmt, tmp87
	movl	24(%rax), %eax	# *stmt_3(D), tmp90
	shrl	$2, %eax	#, D.24402
	movl	%eax, %edx	# D.24402, D.24400
	leaq	-48(%rbp), %rax	#, tmp91
	movl	%edx, %ecx	# D.24400,
	movl	$.LC457, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp91,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 10611 0
	leaq	-48(%rbp), %rdx	#, tmp92
	movq	-56(%rbp), %rax	# stmt_die, tmp93
	movl	$18, %esi	#,
	movq	%rax, %rdi	# tmp93,
	call	add_AT_lbl_id	#
.L2105:
	.loc 1 10615 0
	movl	-84(%rbp), %edx	# depth, tmp94
	movq	-56(%rbp), %rcx	# stmt_die, tmp95
	movq	-72(%rbp), %rax	# stmt, tmp96
	movq	%rcx, %rsi	# tmp95,
	movq	%rax, %rdi	# tmp96,
	call	decls_for_scope	#
	.loc 1 10616 0
	movq	-8(%rbp), %rax	# D.24403, tmp98
	xorq	%fs:40, %rax	#, tmp98
	je	.L2108	#,
	call	__stack_chk_fail	#
.L2108:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE216:
	.size	gen_lexical_block_die, .-gen_lexical_block_die
	.type	gen_inlined_subroutine_die, @function
gen_inlined_subroutine_die:
.LFB217:
	.loc 1 10625 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -72(%rbp)	# stmt, stmt
	movq	%rsi, -80(%rbp)	# context_die, context_die
	movl	%edx, -84(%rbp)	# depth, depth
	.loc 1 10625 0
	movq	%fs:40, %rax	#, tmp94
	movq	%rax, -8(%rbp)	# tmp94, D.24407
	xorl	%eax, %eax	# tmp94
	.loc 1 10626 0
	movq	-72(%rbp), %rax	# stmt, tmp65
	movzbl	24(%rax), %eax	# *stmt_1(D), D.24404
	andl	$2, %eax	#, D.24404
	testb	%al, %al	# D.24404
	jne	.L2110	#,
.LBB85:
	.loc 1 10628 0
	movq	-72(%rbp), %rdx	# stmt, tmp66
	movq	-80(%rbp), %rax	# context_die, tmp67
	movq	%rax, %rsi	# tmp67,
	movl	$29, %edi	#,
	call	new_die	#
	movq	%rax, -64(%rbp)	# tmp68, subr_die
	.loc 1 10630 0
	movq	-72(%rbp), %rax	# stmt, tmp69
	movq	%rax, %rdi	# tmp69,
	call	block_ultimate_origin	#
	movq	%rax, -56(%rbp)	# tmp70, decl
	.loc 1 10634 0
	movq	-56(%rbp), %rax	# decl, tmp71
	movq	%rax, %rdi	# tmp71,
	call	dwarf2out_abstract_function	#
	.loc 1 10636 0
	movq	-56(%rbp), %rdx	# decl, tmp72
	movq	-64(%rbp), %rax	# subr_die, tmp73
	movq	%rdx, %rsi	# tmp72,
	movq	%rax, %rdi	# tmp73,
	call	add_abstract_origin_attribute	#
	.loc 1 10637 0
	movq	-72(%rbp), %rax	# stmt, tmp74
	movl	24(%rax), %eax	# *stmt_1(D), tmp77
	shrl	$2, %eax	#, D.24405
	movl	%eax, %edx	# D.24405, D.24406
	leaq	-48(%rbp), %rax	#, tmp78
	movl	%edx, %ecx	# D.24406,
	movl	$.LC456, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp78,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 10639 0
	leaq	-48(%rbp), %rdx	#, tmp79
	movq	-64(%rbp), %rax	# subr_die, tmp80
	movl	$17, %esi	#,
	movq	%rax, %rdi	# tmp80,
	call	add_AT_lbl_id	#
	.loc 1 10640 0
	movq	-72(%rbp), %rax	# stmt, tmp81
	movl	24(%rax), %eax	# *stmt_1(D), tmp84
	shrl	$2, %eax	#, D.24405
	movl	%eax, %edx	# D.24405, D.24406
	leaq	-48(%rbp), %rax	#, tmp85
	movl	%edx, %ecx	# D.24406,
	movl	$.LC457, %edx	#,
	movl	$.LC30, %esi	#,
	movq	%rax, %rdi	# tmp85,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 10642 0
	leaq	-48(%rbp), %rdx	#, tmp86
	movq	-64(%rbp), %rax	# subr_die, tmp87
	movl	$18, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	add_AT_lbl_id	#
	.loc 1 10643 0
	movl	-84(%rbp), %edx	# depth, tmp88
	movq	-64(%rbp), %rcx	# subr_die, tmp89
	movq	-72(%rbp), %rax	# stmt, tmp90
	movq	%rcx, %rsi	# tmp89,
	movq	%rax, %rdi	# tmp90,
	call	decls_for_scope	#
	.loc 1 10644 0
	movl	$1, current_function_has_inlines(%rip)	#, current_function_has_inlines
.LBE85:
	jmp	.L2109	#
.L2110:
	.loc 1 10659 0
	movl	-84(%rbp), %edx	# depth, tmp91
	movq	-80(%rbp), %rcx	# context_die, tmp92
	movq	-72(%rbp), %rax	# stmt, tmp93
	movq	%rcx, %rsi	# tmp92,
	movq	%rax, %rdi	# tmp93,
	call	gen_lexical_block_die	#
.L2109:
	.loc 1 10660 0
	movq	-8(%rbp), %rax	# D.24407, tmp95
	xorq	%fs:40, %rax	#, tmp95
	je	.L2112	#,
	call	__stack_chk_fail	#
.L2112:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE217:
	.size	gen_inlined_subroutine_die, .-gen_inlined_subroutine_die
	.type	gen_field_die, @function
gen_field_die:
.LFB218:
	.loc 1 10668 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$32, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -40(%rbp)	# decl, decl
	movq	%rsi, -48(%rbp)	# context_die, context_die
	.loc 1 10669 0
	movq	-40(%rbp), %rdx	# decl, tmp73
	movq	-48(%rbp), %rax	# context_die, tmp74
	movq	%rax, %rsi	# tmp74,
	movl	$13, %edi	#,
	call	new_die	#
	movq	%rax, -24(%rbp)	# tmp75, decl_die
	.loc 1 10671 0
	movq	-40(%rbp), %rdx	# decl, tmp76
	movq	-24(%rbp), %rax	# decl_die, tmp77
	movq	%rdx, %rsi	# tmp76,
	movq	%rax, %rdi	# tmp77,
	call	add_name_and_src_coords_attributes	#
	.loc 1 10673 0
	movq	-40(%rbp), %rax	# decl, tmp78
	movzbl	17(%rax), %eax	# *decl_2(D), tmp81
	shrb	$3, %al	#, D.24408
	andl	$1, %eax	#, D.24408
	.loc 1 10672 0
	movzbl	%al, %r12d	# D.24408, D.24409
	.loc 1 10673 0
	movq	-40(%rbp), %rax	# decl, tmp82
	movzbl	17(%rax), %eax	# *decl_2(D), tmp85
	shrb	$4, %al	#, D.24408
	andl	$1, %eax	#, D.24408
	.loc 1 10672 0
	movzbl	%al, %ebx	# D.24408, D.24409
	movq	-40(%rbp), %rax	# decl, tmp86
	movq	%rax, %rdi	# tmp86,
	call	member_declared_type	#
	movq	%rax, %rsi	#, D.24410
	movq	-48(%rbp), %rdx	# context_die, tmp87
	movq	-24(%rbp), %rax	# decl_die, tmp88
	movq	%rdx, %r8	# tmp87,
	movl	%r12d, %ecx	# D.24409,
	movl	%ebx, %edx	# D.24409,
	movq	%rax, %rdi	# tmp88,
	call	add_type_attribute	#
	.loc 1 10676 0
	movq	-40(%rbp), %rax	# decl, tmp89
	movq	96(%rax), %rax	# decl_2(D)->decl.result, D.24410
	testq	%rax, %rax	# D.24410
	je	.L2114	#,
	.loc 1 10678 0
	movq	-40(%rbp), %rdx	# decl, tmp90
	movq	-24(%rbp), %rax	# decl_die, tmp91
	movq	%rdx, %rsi	# tmp90,
	movq	%rax, %rdi	# tmp91,
	call	add_byte_size_attribute	#
	.loc 1 10679 0
	movq	-40(%rbp), %rdx	# decl, tmp92
	movq	-24(%rbp), %rax	# decl_die, tmp93
	movq	%rdx, %rsi	# tmp92,
	movq	%rax, %rdi	# tmp93,
	call	add_bit_size_attribute	#
	.loc 1 10680 0
	movq	-40(%rbp), %rdx	# decl, tmp94
	movq	-24(%rbp), %rax	# decl_die, tmp95
	movq	%rdx, %rsi	# tmp94,
	movq	%rax, %rdi	# tmp95,
	call	add_bit_offset_attribute	#
.L2114:
	.loc 1 10683 0
	movq	-40(%rbp), %rax	# decl, tmp96
	movq	80(%rax), %rax	# decl_2(D)->decl.context, D.24410
	movzbl	16(%rax), %eax	# _10->common.code, D.24411
	cmpb	$21, %al	#, D.24411
	je	.L2115	#,
	.loc 1 10684 0
	movq	-40(%rbp), %rdx	# decl, tmp97
	movq	-24(%rbp), %rax	# decl_die, tmp98
	movq	%rdx, %rsi	# tmp97,
	movq	%rax, %rdi	# tmp98,
	call	add_data_member_location_attribute	#
.L2115:
	.loc 1 10686 0
	movq	-40(%rbp), %rax	# decl, tmp99
	movzbl	50(%rax), %eax	# *decl_2(D), D.24411
	andl	$64, %eax	#, D.24411
	testb	%al, %al	# D.24411
	je	.L2116	#,
	.loc 1 10687 0
	movq	-24(%rbp), %rax	# decl_die, tmp100
	movl	$1, %edx	#,
	movl	$52, %esi	#,
	movq	%rax, %rdi	# tmp100,
	call	add_AT_flag	#
.L2116:
	.loc 1 10689 0
	movq	-40(%rbp), %rax	# decl, tmp101
	movzbl	18(%rax), %eax	# *decl_2(D), D.24411
	andl	$32, %eax	#, D.24411
	testb	%al, %al	# D.24411
	je	.L2117	#,
	.loc 1 10690 0
	movq	-24(%rbp), %rax	# decl_die, tmp102
	movl	$2, %edx	#,
	movl	$50, %esi	#,
	movq	%rax, %rdi	# tmp102,
	call	add_AT_unsigned	#
	jmp	.L2113	#
.L2117:
	.loc 1 10691 0
	movq	-40(%rbp), %rax	# decl, tmp103
	movzbl	18(%rax), %eax	# *decl_2(D), D.24411
	andl	$16, %eax	#, D.24411
	testb	%al, %al	# D.24411
	je	.L2113	#,
	.loc 1 10692 0
	movq	-24(%rbp), %rax	# decl_die, tmp104
	movl	$3, %edx	#,
	movl	$50, %esi	#,
	movq	%rax, %rdi	# tmp104,
	call	add_AT_unsigned	#
.L2113:
	.loc 1 10693 0
	addq	$32, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE218:
	.size	gen_field_die, .-gen_field_die
	.type	gen_ptr_to_mbr_type_die, @function
gen_ptr_to_mbr_type_die:
.LFB219:
	.loc 1 10739 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# type, type
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 10741 0
	movq	-32(%rbp), %rdx	# context_die, tmp63
	movq	-24(%rbp), %rax	# type, tmp64
	movq	%rdx, %rsi	# tmp63,
	movq	%rax, %rdi	# tmp64,
	call	scope_die_for	#
	.loc 1 10740 0
	movq	-24(%rbp), %rdx	# type, tmp65
	movq	%rax, %rsi	# D.24412,
	movl	$31, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp66, ptr_die
	.loc 1 10744 0
	movq	-8(%rbp), %rdx	# ptr_die, tmp67
	movq	-24(%rbp), %rax	# type, tmp68
	movq	%rdx, %rsi	# tmp67,
	movq	%rax, %rdi	# tmp68,
	call	equate_type_number_to_die	#
	.loc 1 10745 0
	movq	-24(%rbp), %rax	# type, tmp69
	movq	112(%rax), %rax	# type_1(D)->type.maxval, D.24413
	movq	%rax, %rdi	# D.24413,
	call	lookup_type_die	#
	movq	%rax, %rdx	#, D.24412
	movq	-8(%rbp), %rax	# ptr_die, tmp70
	movl	$29, %esi	#,
	movq	%rax, %rdi	# tmp70,
	call	add_AT_die_ref	#
	.loc 1 10747 0
	movq	-24(%rbp), %rax	# type, tmp71
	movq	8(%rax), %rsi	# type_1(D)->common.type, D.24413
	movq	-32(%rbp), %rdx	# context_die, tmp72
	movq	-8(%rbp), %rax	# ptr_die, tmp73
	movq	%rdx, %r8	# tmp72,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp73,
	call	add_type_attribute	#
	.loc 1 10748 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE219:
	.size	gen_ptr_to_mbr_type_die, .-gen_ptr_to_mbr_type_die
	.section	.rodata
.LC488:
	.string	"%s %s"
.LC489:
	.string	"GNU C++"
.LC490:
	.string	"GNU Ada"
.LC491:
	.string	"GNU F77"
.LC492:
	.string	"GNU Pascal"
.LC493:
	.string	"GNU Java"
	.text
	.type	gen_compile_unit_die, @function
gen_compile_unit_die:
.LFB220:
	.loc 1 10755 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$328, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -328(%rbp)	# filename, filename
	.loc 1 10755 0
	movq	%fs:40, %rax	#, tmp90
	movq	%rax, -24(%rbp)	# tmp90, D.24418
	xorl	%eax, %eax	# tmp90
	.loc 1 10758 0
	call	getpwd	#
	movq	%rax, -312(%rbp)	# tmp70, wd
	.loc 1 10759 0
	movq	lang_hooks(%rip), %rax	# lang_hooks.name, tmp71
	movq	%rax, -304(%rbp)	# tmp71, language_string
	.loc 1 10762 0
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movl	$17, %edi	#,
	call	new_die	#
	movq	%rax, -296(%rbp)	# tmp72, die
	.loc 1 10763 0
	movq	-328(%rbp), %rdx	# filename, tmp73
	movq	-296(%rbp), %rax	# die, tmp74
	movq	%rdx, %rsi	# tmp73,
	movq	%rax, %rdi	# tmp74,
	call	add_name_attribute	#
	.loc 1 10765 0
	cmpq	$0, -312(%rbp)	#, wd
	je	.L2121	#,
	.loc 1 10765 0 is_stmt 0 discriminator 1
	movq	-328(%rbp), %rax	# filename, tmp75
	movzbl	(%rax), %eax	# *filename_5(D), D.24414
	cmpb	$47, %al	#, D.24414
	je	.L2121	#,
	.loc 1 10766 0 is_stmt 1
	movq	-312(%rbp), %rdx	# wd, tmp76
	movq	-296(%rbp), %rax	# die, tmp77
	movl	$27, %esi	#,
	movq	%rax, %rdi	# tmp77,
	call	add_AT_string	#
.L2121:
	.loc 1 10768 0
	movq	version_string(%rip), %rcx	# version_string, version_string.579
	movq	-304(%rbp), %rdx	# language_string, tmp78
	leaq	-288(%rbp), %rax	#, tmp79
	movl	$.LC488, %esi	#,
	movq	%rax, %rdi	# tmp79,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 10781 0
	leaq	-288(%rbp), %rdx	#, tmp80
	movq	-296(%rbp), %rax	# die, tmp81
	movl	$37, %esi	#,
	movq	%rax, %rdi	# tmp81,
	call	add_AT_string	#
	.loc 1 10783 0
	movq	-304(%rbp), %rax	# language_string, tmp82
	movl	$.LC489, %esi	#,
	movq	%rax, %rdi	# tmp82,
	call	strcmp	#
	testl	%eax, %eax	# D.24415
	jne	.L2122	#,
	.loc 1 10784 0
	movl	$4, -316(%rbp)	#, language
	jmp	.L2123	#
.L2122:
	.loc 1 10785 0
	movq	-304(%rbp), %rax	# language_string, tmp83
	movl	$.LC490, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	strcmp	#
	testl	%eax, %eax	# D.24415
	jne	.L2124	#,
	.loc 1 10786 0
	movl	$3, -316(%rbp)	#, language
	jmp	.L2123	#
.L2124:
	.loc 1 10787 0
	movq	-304(%rbp), %rax	# language_string, tmp84
	movl	$.LC491, %esi	#,
	movq	%rax, %rdi	# tmp84,
	call	strcmp	#
	testl	%eax, %eax	# D.24415
	jne	.L2125	#,
	.loc 1 10788 0
	movl	$7, -316(%rbp)	#, language
	jmp	.L2123	#
.L2125:
	.loc 1 10789 0
	movq	-304(%rbp), %rax	# language_string, tmp85
	movl	$.LC492, %esi	#,
	movq	%rax, %rdi	# tmp85,
	call	strcmp	#
	testl	%eax, %eax	# D.24415
	jne	.L2126	#,
	.loc 1 10790 0
	movl	$9, -316(%rbp)	#, language
	jmp	.L2123	#
.L2126:
	.loc 1 10791 0
	movq	-304(%rbp), %rax	# language_string, tmp86
	movl	$.LC493, %esi	#,
	movq	%rax, %rdi	# tmp86,
	call	strcmp	#
	testl	%eax, %eax	# D.24415
	jne	.L2127	#,
	.loc 1 10792 0
	movl	$11, -316(%rbp)	#, language
	jmp	.L2123	#
.L2127:
	.loc 1 10793 0
	movl	flag_traditional(%rip), %eax	# flag_traditional, flag_traditional.580
	testl	%eax, %eax	# flag_traditional.580
	je	.L2128	#,
	.loc 1 10794 0
	movl	$2, -316(%rbp)	#, language
	jmp	.L2123	#
.L2128:
	.loc 1 10796 0
	movl	$1, -316(%rbp)	#, language
.L2123:
	.loc 1 10798 0
	movl	-316(%rbp), %eax	# language, tmp87
	movslq	%eax, %rdx	# tmp87, D.24416
	movq	-296(%rbp), %rax	# die, tmp88
	movl	$19, %esi	#,
	movq	%rax, %rdi	# tmp88,
	call	add_AT_unsigned	#
	.loc 1 10799 0
	movq	-296(%rbp), %rax	# die, D.24417
	.loc 1 10800 0
	movq	-24(%rbp), %rbx	# D.24418, tmp91
	xorq	%fs:40, %rbx	#, tmp91
	je	.L2130	#,
	call	__stack_chk_fail	#
.L2130:
	addq	$328, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE220:
	.size	gen_compile_unit_die, .-gen_compile_unit_die
	.type	gen_string_type_die, @function
gen_string_type_die:
.LFB221:
	.loc 1 10808 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# type, type
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 10810 0
	movq	-32(%rbp), %rdx	# context_die, tmp60
	movq	-24(%rbp), %rax	# type, tmp61
	movq	%rdx, %rsi	# tmp60,
	movq	%rax, %rdi	# tmp61,
	call	scope_die_for	#
	.loc 1 10809 0
	movq	-24(%rbp), %rdx	# type, tmp62
	movq	%rax, %rsi	# D.24425,
	movl	$18, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp63, type_die
	.loc 1 10812 0
	movq	-8(%rbp), %rdx	# type_die, tmp64
	movq	-24(%rbp), %rax	# type, tmp65
	movq	%rdx, %rsi	# tmp64,
	movq	%rax, %rdi	# tmp65,
	call	equate_type_number_to_die	#
	.loc 1 10820 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE221:
	.size	gen_string_type_die, .-gen_string_type_die
	.type	gen_inheritance_die, @function
gen_inheritance_die:
.LFB222:
	.loc 1 10828 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# binfo, binfo
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 10829 0
	movq	-24(%rbp), %rdx	# binfo, tmp66
	movq	-32(%rbp), %rax	# context_die, tmp67
	movq	%rax, %rsi	# tmp67,
	movl	$28, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp68, die
	.loc 1 10831 0
	movq	-24(%rbp), %rax	# binfo, tmp69
	movq	8(%rax), %rsi	# binfo_2(D)->common.type, D.24426
	movq	-32(%rbp), %rdx	# context_die, tmp70
	movq	-8(%rbp), %rax	# die, tmp71
	movq	%rdx, %r8	# tmp70,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp71,
	call	add_type_attribute	#
	.loc 1 10832 0
	movq	-24(%rbp), %rdx	# binfo, tmp72
	movq	-8(%rbp), %rax	# die, tmp73
	movq	%rdx, %rsi	# tmp72,
	movq	%rax, %rdi	# tmp73,
	call	add_data_member_location_attribute	#
	.loc 1 10834 0
	movq	-24(%rbp), %rax	# binfo, tmp74
	movzbl	18(%rax), %eax	# *binfo_2(D), D.24427
	andl	$4, %eax	#, D.24427
	testb	%al, %al	# D.24427
	je	.L2133	#,
	.loc 1 10835 0
	movq	-8(%rbp), %rax	# die, tmp75
	movl	$1, %edx	#,
	movl	$76, %esi	#,
	movq	%rax, %rdi	# tmp75,
	call	add_AT_unsigned	#
.L2133:
	.loc 1 10837 0
	movq	-24(%rbp), %rax	# binfo, tmp76
	movzbl	18(%rax), %eax	# *binfo_2(D), D.24427
	andl	$8, %eax	#, D.24427
	testb	%al, %al	# D.24427
	je	.L2134	#,
	.loc 1 10838 0
	movq	-8(%rbp), %rax	# die, tmp77
	movl	$1, %edx	#,
	movl	$50, %esi	#,
	movq	%rax, %rdi	# tmp77,
	call	add_AT_unsigned	#
	jmp	.L2132	#
.L2134:
	.loc 1 10839 0
	movq	-24(%rbp), %rax	# binfo, tmp78
	movzbl	18(%rax), %eax	# *binfo_2(D), D.24427
	andl	$32, %eax	#, D.24427
	testb	%al, %al	# D.24427
	je	.L2132	#,
	.loc 1 10840 0
	movq	-8(%rbp), %rax	# die, tmp79
	movl	$2, %edx	#,
	movl	$50, %esi	#,
	movq	%rax, %rdi	# tmp79,
	call	add_AT_unsigned	#
.L2132:
	.loc 1 10841 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE222:
	.size	gen_inheritance_die, .-gen_inheritance_die
	.type	gen_member_die, @function
gen_member_die:
.LFB223:
	.loc 1 10849 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# type, type
	movq	%rsi, -48(%rbp)	# context_die, context_die
	.loc 1 10866 0
	movq	-40(%rbp), %rax	# type, tmp65
	movq	136(%rax), %rax	# type_4(D)->type.binfo, D.24428
	testq	%rax, %rax	# D.24428
	je	.L2137	#,
	.loc 1 10866 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# type, tmp66
	movq	136(%rax), %rax	# type_4(D)->type.binfo, D.24428
	movq	64(%rax), %rax	# _6->vec.a, D.24428
	testq	%rax, %rax	# D.24428
	je	.L2137	#,
.LBB86:
	.loc 1 10868 0 is_stmt 1
	movq	-40(%rbp), %rax	# type, tmp67
	movq	136(%rax), %rax	# type_4(D)->type.binfo, D.24428
	movq	64(%rax), %rax	# _8->vec.a, tmp68
	movq	%rax, -16(%rbp)	# tmp68, bases
	.loc 1 10869 0
	movq	-16(%rbp), %rax	# bases, tmp69
	movl	24(%rax), %eax	# bases_9->vec.length, tmp70
	movl	%eax, -28(%rbp)	# tmp70, n_bases
	.loc 1 10872 0
	movl	$0, -32(%rbp)	#, i
	jmp	.L2138	#
.L2139:
	.loc 1 10873 0 discriminator 2
	movq	-16(%rbp), %rax	# bases, tmp71
	movl	-32(%rbp), %edx	# i, tmp73
	movslq	%edx, %rdx	# tmp73, tmp72
	addq	$4, %rdx	#, tmp74
	movq	(%rax,%rdx,8), %rax	# bases_9->vec.a, D.24428
	movq	-48(%rbp), %rdx	# context_die, tmp75
	movq	%rdx, %rsi	# tmp75,
	movq	%rax, %rdi	# D.24428,
	call	gen_inheritance_die	#
	.loc 1 10872 0 discriminator 2
	addl	$1, -32(%rbp)	#, i
.L2138:
	.loc 1 10872 0 is_stmt 0 discriminator 1
	movl	-32(%rbp), %eax	# i, tmp76
	cmpl	-28(%rbp), %eax	# n_bases, tmp76
	jl	.L2139	#,
.L2137:
.LBE86:
	.loc 1 10877 0 is_stmt 1
	movq	-40(%rbp), %rax	# type, tmp77
	movq	24(%rax), %rax	# type_4(D)->type.values, tmp78
	movq	%rax, -24(%rbp)	# tmp78, member
	jmp	.L2140	#
.L2143:
	.loc 1 10884 0
	movq	-24(%rbp), %rax	# member, tmp79
	movq	%rax, %rdi	# tmp79,
	call	lookup_decl_die	#
	movq	%rax, -8(%rbp)	# tmp80, child
	.loc 1 10885 0
	cmpq	$0, -8(%rbp)	#, child
	je	.L2141	#,
	.loc 1 10886 0
	movq	-8(%rbp), %rdx	# child, tmp81
	movq	-48(%rbp), %rax	# context_die, tmp82
	movq	%rdx, %rsi	# tmp81,
	movq	%rax, %rdi	# tmp82,
	call	splice_child_die	#
	jmp	.L2142	#
.L2141:
	.loc 1 10888 0
	movq	-48(%rbp), %rdx	# context_die, tmp83
	movq	-24(%rbp), %rax	# member, tmp84
	movq	%rdx, %rsi	# tmp83,
	movq	%rax, %rdi	# tmp84,
	call	gen_decl_die	#
.L2142:
	.loc 1 10877 0
	movq	-24(%rbp), %rax	# member, tmp85
	movq	(%rax), %rax	# member_1->common.chain, tmp86
	movq	%rax, -24(%rbp)	# tmp86, member
.L2140:
	.loc 1 10877 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, member
	jne	.L2143	#,
	.loc 1 10892 0 is_stmt 1
	movq	-40(%rbp), %rax	# type, tmp87
	movq	112(%rax), %rax	# type_4(D)->type.maxval, tmp88
	movq	%rax, -24(%rbp)	# tmp88, member
	jmp	.L2144	#
.L2148:
	.loc 1 10895 0
	movq	-24(%rbp), %rax	# member, tmp89
	movq	112(%rax), %rax	# member_2->decl.abstract_origin, D.24428
	testq	%rax, %rax	# D.24428
	je	.L2145	#,
	.loc 1 10896 0
	jmp	.L2146	#
.L2145:
	.loc 1 10898 0
	movq	-24(%rbp), %rax	# member, tmp90
	movq	%rax, %rdi	# tmp90,
	call	lookup_decl_die	#
	movq	%rax, -8(%rbp)	# tmp91, child
	.loc 1 10899 0
	cmpq	$0, -8(%rbp)	#, child
	je	.L2147	#,
	.loc 1 10900 0
	movq	-8(%rbp), %rdx	# child, tmp92
	movq	-48(%rbp), %rax	# context_die, tmp93
	movq	%rdx, %rsi	# tmp92,
	movq	%rax, %rdi	# tmp93,
	call	splice_child_die	#
	jmp	.L2146	#
.L2147:
	.loc 1 10902 0
	movq	-48(%rbp), %rdx	# context_die, tmp94
	movq	-24(%rbp), %rax	# member, tmp95
	movq	%rdx, %rsi	# tmp94,
	movq	%rax, %rdi	# tmp95,
	call	gen_decl_die	#
.L2146:
	.loc 1 10892 0
	movq	-24(%rbp), %rax	# member, tmp96
	movq	(%rax), %rax	# member_2->common.chain, tmp97
	movq	%rax, -24(%rbp)	# tmp97, member
.L2144:
	.loc 1 10892 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, member
	jne	.L2148	#,
	.loc 1 10904 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE223:
	.size	gen_member_die, .-gen_member_die
	.type	gen_struct_or_union_type_die, @function
gen_struct_or_union_type_die:
.LFB224:
	.loc 1 10914 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# type, type
	movq	%rsi, -64(%rbp)	# context_die, context_die
	.loc 1 10915 0
	movq	-56(%rbp), %rax	# type, tmp102
	movq	%rax, %rdi	# tmp102,
	call	lookup_type_die	#
	movq	%rax, -32(%rbp)	# tmp103, type_die
	.loc 1 10916 0
	movq	$0, -24(%rbp)	#, scope_die
	.loc 1 10917 0
	movl	$0, -40(%rbp)	#, nested
	.loc 1 10918 0
	movq	-56(%rbp), %rax	# type, tmp104
	movq	32(%rax), %rax	# type_5(D)->type.size, D.24429
	.loc 1 10919 0
	testq	%rax, %rax	# D.24429
	je	.L2150	#,
	.loc 1 10919 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# type, tmp105
	movq	(%rax), %rax	# type_5(D)->common.chain, D.24429
	testq	%rax, %rax	# D.24429
	je	.L2151	#,
	.loc 1 10920 0 is_stmt 1
	movq	-56(%rbp), %rax	# type, tmp106
	movq	(%rax), %rax	# type_5(D)->common.chain, D.24429
	movzbl	49(%rax), %eax	# *_11, D.24430
	andl	$1, %eax	#, D.24430
	testb	%al, %al	# D.24430
	jne	.L2150	#,
.L2151:
	.loc 1 10919 0 discriminator 3
	movl	$1, %eax	#, iftmp.581
	jmp	.L2152	#
.L2150:
	.loc 1 10919 0 is_stmt 0 discriminator 2
	movl	$0, %eax	#, iftmp.581
.L2152:
	.loc 1 10918 0 is_stmt 1
	movl	%eax, -36(%rbp)	# iftmp.581, complete
	.loc 1 10922 0
	cmpq	$0, -32(%rbp)	#, type_die
	je	.L2153	#,
	.loc 1 10922 0 is_stmt 0 discriminator 1
	cmpl	$0, -36(%rbp)	#, complete
	jne	.L2153	#,
	.loc 1 10923 0 is_stmt 1
	jmp	.L2149	#
.L2153:
	.loc 1 10925 0
	movq	-56(%rbp), %rax	# type, tmp107
	movq	144(%rax), %rax	# type_5(D)->type.context, D.24429
	testq	%rax, %rax	# D.24429
	je	.L2155	#,
	.loc 1 10926 0
	movq	-56(%rbp), %rax	# type, tmp108
	movq	144(%rax), %rax	# type_5(D)->type.context, D.24429
	movzbl	16(%rax), %eax	# _18->common.code, D.24430
	cmpb	$18, %al	#, D.24430
	je	.L2156	#,
	.loc 1 10926 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# type, tmp109
	movq	144(%rax), %rax	# type_5(D)->type.context, D.24429
	movzbl	16(%rax), %eax	# _20->common.code, D.24430
	cmpb	$20, %al	#, D.24430
	je	.L2156	#,
	movq	-56(%rbp), %rax	# type, tmp110
	movq	144(%rax), %rax	# type_5(D)->type.context, D.24429
	movzbl	16(%rax), %eax	# _22->common.code, D.24430
	cmpb	$21, %al	#, D.24430
	je	.L2156	#,
	movq	-56(%rbp), %rax	# type, tmp111
	movq	144(%rax), %rax	# type_5(D)->type.context, D.24429
	movzbl	16(%rax), %eax	# _24->common.code, D.24430
	cmpb	$22, %al	#, D.24430
	je	.L2156	#,
	movq	-56(%rbp), %rax	# type, tmp112
	movq	144(%rax), %rax	# type_5(D)->type.context, D.24429
	movzbl	16(%rax), %eax	# _26->common.code, D.24430
	cmpb	$19, %al	#, D.24430
	jne	.L2155	#,
.L2156:
	.loc 1 10927 0 is_stmt 1
	movl	$1, -40(%rbp)	#, nested
.L2155:
	.loc 1 10929 0
	movq	-64(%rbp), %rdx	# context_die, tmp113
	movq	-56(%rbp), %rax	# type, tmp114
	movq	%rdx, %rsi	# tmp113,
	movq	%rax, %rdi	# tmp114,
	call	scope_die_for	#
	movq	%rax, -24(%rbp)	# tmp115, scope_die
	.loc 1 10931 0
	cmpq	$0, -32(%rbp)	#, type_die
	je	.L2157	#,
	.loc 1 10931 0 is_stmt 0 discriminator 1
	cmpl	$0, -40(%rbp)	#, nested
	je	.L2158	#,
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.582
	cmpq	%rax, -24(%rbp)	# comp_unit_die.582, scope_die
	jne	.L2158	#,
.L2157:
.LBB87:
	.loc 1 10934 0 is_stmt 1
	movq	-32(%rbp), %rax	# type_die, tmp116
	movq	%rax, -16(%rbp)	# tmp116, old_die
	.loc 1 10936 0
	movq	-56(%rbp), %rax	# type, tmp117
	movzbl	16(%rax), %eax	# type_5(D)->common.code, D.24430
	cmpb	$20, %al	#, D.24430
	jne	.L2159	#,
	.loc 1 10936 0 is_stmt 0 discriminator 1
	movl	$19, %eax	#, iftmp.583
	jmp	.L2160	#
.L2159:
	.loc 1 10936 0 discriminator 2
	movl	$23, %eax	#, iftmp.583
.L2160:
	.loc 1 10936 0 discriminator 3
	movq	-56(%rbp), %rdx	# type, tmp118
	movq	-24(%rbp), %rcx	# scope_die, tmp119
	movq	%rcx, %rsi	# tmp119,
	movl	%eax, %edi	# iftmp.583,
	call	new_die	#
	movq	%rax, -32(%rbp)	# tmp120, type_die
	.loc 1 10939 0 is_stmt 1 discriminator 3
	movq	-32(%rbp), %rdx	# type_die, tmp121
	movq	-56(%rbp), %rax	# type, tmp122
	movq	%rdx, %rsi	# tmp121,
	movq	%rax, %rdi	# tmp122,
	call	equate_type_number_to_die	#
	.loc 1 10940 0 discriminator 3
	cmpq	$0, -16(%rbp)	#, old_die
	je	.L2161	#,
	.loc 1 10941 0
	movq	-16(%rbp), %rdx	# old_die, tmp123
	movq	-32(%rbp), %rax	# type_die, tmp124
	movl	$71, %esi	#,
	movq	%rax, %rdi	# tmp124,
	call	add_AT_die_ref	#
.LBE87:
	.loc 1 10933 0
	jmp	.L2163	#
.L2161:
.LBB88:
	.loc 1 10943 0
	movq	-56(%rbp), %rax	# type, tmp125
	movq	%rax, %rdi	# tmp125,
	call	type_tag	#
	movq	%rax, %rdx	#, D.24431
	movq	-32(%rbp), %rax	# type_die, tmp126
	movq	%rdx, %rsi	# D.24431,
	movq	%rax, %rdi	# tmp126,
	call	add_name_attribute	#
.LBE88:
	.loc 1 10933 0
	jmp	.L2163	#
.L2158:
	.loc 1 10946 0
	movq	-32(%rbp), %rax	# type_die, tmp127
	movl	$60, %esi	#,
	movq	%rax, %rdi	# tmp127,
	call	remove_AT	#
.L2163:
	.loc 1 10950 0
	cmpl	$0, -36(%rbp)	#, complete
	je	.L2164	#,
	.loc 1 10954 0
	movq	-56(%rbp), %rax	# type, tmp128
	movzbl	17(%rax), %edx	#, tmp131
	orl	$64, %edx	#, tmp132
	movb	%dl, 17(%rax)	# tmp132,
	.loc 1 10955 0
	movq	-56(%rbp), %rdx	# type, tmp133
	movq	-32(%rbp), %rax	# type_die, tmp134
	movq	%rdx, %rsi	# tmp133,
	movq	%rax, %rdi	# tmp134,
	call	add_byte_size_attribute	#
	.loc 1 10956 0
	movq	-56(%rbp), %rax	# type, tmp135
	movq	(%rax), %rax	# type_5(D)->common.chain, D.24429
	testq	%rax, %rax	# D.24429
	je	.L2165	#,
	.loc 1 10957 0
	movq	-56(%rbp), %rax	# type, tmp136
	movq	(%rax), %rdx	# type_5(D)->common.chain, D.24429
	movq	-32(%rbp), %rax	# type_die, tmp137
	movq	%rdx, %rsi	# D.24429,
	movq	%rax, %rdi	# tmp137,
	call	add_src_coords_attributes	#
.L2165:
	.loc 1 10961 0
	movq	-32(%rbp), %rax	# type_die, tmp138
	movq	24(%rax), %rax	# type_die_1->die_parent, D.24432
	testq	%rax, %rax	# D.24432
	jne	.L2166	#,
	.loc 1 10962 0
	movq	-32(%rbp), %rdx	# type_die, tmp139
	movq	-24(%rbp), %rax	# scope_die, tmp140
	movq	%rdx, %rsi	# tmp139,
	movq	%rax, %rdi	# tmp140,
	call	add_child_die	#
.L2166:
	.loc 1 10964 0
	movq	-56(%rbp), %rax	# type, tmp141
	movq	%rax, %rdi	# tmp141,
	call	push_decl_scope	#
	.loc 1 10965 0
	movq	-32(%rbp), %rdx	# type_die, tmp142
	movq	-56(%rbp), %rax	# type, tmp143
	movq	%rdx, %rsi	# tmp142,
	movq	%rax, %rdi	# tmp143,
	call	gen_member_die	#
	.loc 1 10966 0
	call	pop_decl_scope	#
	.loc 1 10969 0
	movq	-56(%rbp), %rax	# type, tmp144
	movq	104(%rax), %rax	# type_5(D)->type.minval, D.24429
	testq	%rax, %rax	# D.24429
	je	.L2149	#,
.LBB89:
	.loc 1 10971 0
	movq	-56(%rbp), %rax	# type, tmp145
	movq	104(%rax), %rax	# type_5(D)->type.minval, D.24429
	movq	184(%rax), %rax	# _42->decl.vindex, tmp146
	movq	%rax, -8(%rbp)	# tmp146, vtype
	.loc 1 10973 0
	movq	-64(%rbp), %rdx	# context_die, tmp147
	movq	-8(%rbp), %rax	# vtype, tmp148
	movq	%rdx, %rsi	# tmp147,
	movq	%rax, %rdi	# tmp148,
	call	gen_type_die	#
	.loc 1 10974 0
	movq	-8(%rbp), %rax	# vtype, tmp149
	movq	%rax, %rdi	# tmp149,
	call	lookup_type_die	#
	movq	%rax, %rdx	#, D.24432
	movq	-32(%rbp), %rax	# type_die, tmp150
	movl	$29, %esi	#,
	movq	%rax, %rdi	# tmp150,
	call	add_AT_die_ref	#
	jmp	.L2149	#
.L2164:
.LBE89:
	.loc 1 10980 0
	movq	-32(%rbp), %rax	# type_die, tmp151
	movl	$1, %edx	#,
	movl	$60, %esi	#,
	movq	%rax, %rdi	# tmp151,
	call	add_AT_flag	#
	.loc 1 10983 0
	movq	-56(%rbp), %rax	# type, tmp152
	movq	(%rax), %rax	# type_5(D)->common.chain, D.24429
	testq	%rax, %rax	# D.24429
	je	.L2149	#,
	.loc 1 10984 0
	movq	-56(%rbp), %rax	# type, tmp153
	movq	(%rax), %rax	# type_5(D)->common.chain, D.24429
	movq	%rax, %rdi	# D.24429,
	call	decl_function_context	#
	testq	%rax, %rax	# D.24429
	jne	.L2149	#,
	.loc 1 10985 0
	movq	incomplete_types(%rip), %rax	# incomplete_types, incomplete_types.584
	movq	8(%rax), %rdx	# incomplete_types.584_48->elements_used, D.24433
	movq	incomplete_types(%rip), %rax	# incomplete_types, incomplete_types.585
	movq	(%rax), %rax	# incomplete_types.585_50->num_elements, D.24433
	cmpq	%rax, %rdx	# D.24433, D.24433
	jb	.L2168	#,
	.loc 1 10985 0 is_stmt 0 discriminator 1
	movq	incomplete_types(%rip), %rax	# incomplete_types, incomplete_types.586
	movq	(%rax), %rax	# incomplete_types.586_52->num_elements, D.24433
	leaq	(%rax,%rax), %rdx	#, D.24433
	movq	incomplete_types(%rip), %rax	# incomplete_types, incomplete_types.587
	movq	%rdx, %rsi	# D.24433,
	movq	%rax, %rdi	# incomplete_types.587,
	call	varray_grow	#
	movq	%rax, incomplete_types(%rip)	# incomplete_types.588, incomplete_types
.L2168:
	.loc 1 10985 0 discriminator 2
	movq	incomplete_types(%rip), %rcx	# incomplete_types, incomplete_types.589
	movq	incomplete_types(%rip), %rax	# incomplete_types, incomplete_types.590
	movq	8(%rax), %rdx	# incomplete_types.590_58->elements_used, D.24433
	leaq	1(%rdx), %rsi	#, D.24433
	movq	%rsi, 8(%rax)	# D.24433, incomplete_types.590_58->elements_used
	addq	$4, %rdx	#, tmp154
	movq	-56(%rbp), %rax	# type, tmp155
	movq	%rax, (%rcx,%rdx,8)	# tmp155, incomplete_types.589_57->data.tree
.L2149:
	.loc 1 10987 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE224:
	.size	gen_struct_or_union_type_die, .-gen_struct_or_union_type_die
	.type	gen_subroutine_type_die, @function
gen_subroutine_type_die:
.LFB225:
	.loc 1 10995 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# type, type
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 10996 0
	movq	-24(%rbp), %rax	# type, tmp60
	movq	8(%rax), %rax	# type_1(D)->common.type, tmp61
	movq	%rax, -16(%rbp)	# tmp61, return_type
	.loc 1 10998 0
	movq	-32(%rbp), %rdx	# context_die, tmp62
	movq	-24(%rbp), %rax	# type, tmp63
	movq	%rdx, %rsi	# tmp62,
	movq	%rax, %rdi	# tmp63,
	call	scope_die_for	#
	.loc 1 10997 0
	movq	-24(%rbp), %rdx	# type, tmp64
	movq	%rax, %rsi	# D.24434,
	movl	$21, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp65, subr_die
	.loc 1 11001 0
	movq	-8(%rbp), %rdx	# subr_die, tmp66
	movq	-24(%rbp), %rax	# type, tmp67
	movq	%rdx, %rsi	# tmp66,
	movq	%rax, %rdi	# tmp67,
	call	equate_type_number_to_die	#
	.loc 1 11002 0
	movq	-24(%rbp), %rdx	# type, tmp68
	movq	-8(%rbp), %rax	# subr_die, tmp69
	movq	%rdx, %rsi	# tmp68,
	movq	%rax, %rdi	# tmp69,
	call	add_prototyped_attribute	#
	.loc 1 11003 0
	movq	-32(%rbp), %rdx	# context_die, tmp70
	movq	-16(%rbp), %rsi	# return_type, tmp71
	movq	-8(%rbp), %rax	# subr_die, tmp72
	movq	%rdx, %r8	# tmp70,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp72,
	call	add_type_attribute	#
	.loc 1 11004 0
	movq	-8(%rbp), %rdx	# subr_die, tmp73
	movq	-24(%rbp), %rax	# type, tmp74
	movq	%rdx, %rsi	# tmp73,
	movq	%rax, %rdi	# tmp74,
	call	gen_formal_types_die	#
	.loc 1 11005 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE225:
	.size	gen_subroutine_type_die, .-gen_subroutine_type_die
	.type	gen_typedef_die, @function
gen_typedef_die:
.LFB226:
	.loc 1 11013 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# decl, decl
	movq	%rsi, -48(%rbp)	# context_die, context_die
	.loc 1 11017 0
	movq	-40(%rbp), %rax	# decl, tmp70
	movzbl	17(%rax), %eax	# *decl_2(D), D.24435
	andl	$64, %eax	#, D.24435
	testb	%al, %al	# D.24435
	je	.L2171	#,
	.loc 1 11018 0
	jmp	.L2170	#
.L2171:
	.loc 1 11020 0
	movq	-40(%rbp), %rax	# decl, tmp71
	movzbl	17(%rax), %edx	#, tmp74
	orl	$64, %edx	#, tmp75
	movb	%dl, 17(%rax)	# tmp75,
	.loc 1 11021 0
	movq	-40(%rbp), %rdx	# decl, tmp76
	movq	-48(%rbp), %rax	# context_die, tmp77
	movq	%rax, %rsi	# tmp77,
	movl	$22, %edi	#,
	call	new_die	#
	movq	%rax, -16(%rbp)	# tmp78, type_die
	.loc 1 11022 0
	movq	-40(%rbp), %rax	# decl, tmp79
	movq	%rax, %rdi	# tmp79,
	call	decl_ultimate_origin	#
	movq	%rax, -8(%rbp)	# tmp80, origin
	.loc 1 11023 0
	cmpq	$0, -8(%rbp)	#, origin
	je	.L2173	#,
	.loc 1 11024 0
	movq	-8(%rbp), %rdx	# origin, tmp81
	movq	-16(%rbp), %rax	# type_die, tmp82
	movq	%rdx, %rsi	# tmp81,
	movq	%rax, %rdi	# tmp82,
	call	add_abstract_origin_attribute	#
	jmp	.L2174	#
.L2173:
.LBB90:
	.loc 1 11029 0
	movq	-40(%rbp), %rdx	# decl, tmp83
	movq	-16(%rbp), %rax	# type_die, tmp84
	movq	%rdx, %rsi	# tmp83,
	movq	%rax, %rdi	# tmp84,
	call	add_name_and_src_coords_attributes	#
	.loc 1 11030 0
	movq	-40(%rbp), %rax	# decl, tmp85
	movq	96(%rax), %rax	# decl_2(D)->decl.result, D.24436
	testq	%rax, %rax	# D.24436
	je	.L2175	#,
	.loc 1 11032 0
	movq	-40(%rbp), %rax	# decl, tmp86
	movq	96(%rax), %rax	# decl_2(D)->decl.result, tmp87
	movq	%rax, -24(%rbp)	# tmp87, type
	.loc 1 11034 0
	movq	-40(%rbp), %rax	# decl, tmp88
	movq	8(%rax), %rax	# decl_2(D)->common.type, D.24436
	cmpq	-24(%rbp), %rax	# type, D.24436
	jne	.L2176	#,
	.loc 1 11035 0
	movl	$__FUNCTION__.17001, %edx	#,
	movl	$11035, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2176:
	.loc 1 11037 0
	movq	-40(%rbp), %rax	# decl, tmp89
	movq	8(%rax), %rax	# decl_2(D)->common.type, D.24436
	movq	-16(%rbp), %rdx	# type_die, tmp90
	movq	%rdx, %rsi	# tmp90,
	movq	%rax, %rdi	# D.24436,
	call	equate_type_number_to_die	#
	jmp	.L2177	#
.L2175:
	.loc 1 11040 0
	movq	-40(%rbp), %rax	# decl, tmp91
	movq	8(%rax), %rax	# decl_2(D)->common.type, tmp92
	movq	%rax, -24(%rbp)	# tmp92, type
.L2177:
	.loc 1 11043 0
	movq	-40(%rbp), %rax	# decl, tmp93
	movzbl	17(%rax), %eax	# *decl_2(D), tmp96
	shrb	$3, %al	#, D.24437
	andl	$1, %eax	#, D.24437
	.loc 1 11042 0
	movzbl	%al, %ecx	# D.24437, D.24438
	movq	-40(%rbp), %rax	# decl, tmp97
	movzbl	17(%rax), %eax	# *decl_2(D), tmp100
	shrb	$4, %al	#, D.24437
	andl	$1, %eax	#, D.24437
	movzbl	%al, %edx	# D.24437, D.24438
	movq	-48(%rbp), %rdi	# context_die, tmp101
	movq	-24(%rbp), %rsi	# type, tmp102
	movq	-16(%rbp), %rax	# type_die, tmp103
	movq	%rdi, %r8	# tmp101,
	movq	%rax, %rdi	# tmp103,
	call	add_type_attribute	#
.L2174:
.LBE90:
	.loc 1 11046 0
	movq	-40(%rbp), %rax	# decl, tmp104
	movzbl	49(%rax), %eax	# *decl_2(D), D.24435
	andl	$-128, %eax	#, D.24435
	testb	%al, %al	# D.24435
	je	.L2170	#,
	.loc 1 11047 0
	movq	-16(%rbp), %rdx	# type_die, tmp105
	movq	-40(%rbp), %rax	# decl, tmp106
	movq	%rdx, %rsi	# tmp105,
	movq	%rax, %rdi	# tmp106,
	call	equate_decl_number_to_die	#
.L2170:
	.loc 1 11048 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE226:
	.size	gen_typedef_die, .-gen_typedef_die
	.type	gen_type_die, @function
gen_type_die:
.LFB227:
	.loc 1 11056 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# type, type
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 11059 0
	cmpq	$0, -24(%rbp)	#, type
	je	.L2179	#,
	.loc 1 11059 0 is_stmt 0 discriminator 1
	movq	global_trees(%rip), %rax	# global_trees, D.24439
	cmpq	-24(%rbp), %rax	# type, D.24439
	jne	.L2180	#,
.L2179:
	.loc 1 11060 0 is_stmt 1
	jmp	.L2178	#
.L2180:
	.loc 1 11065 0
	movq	-24(%rbp), %rax	# type, tmp102
	movq	%rax, %rdi	# tmp102,
	call	type_main_variant	#
	movq	%rax, -24(%rbp)	# tmp103, type
	.loc 1 11067 0
	movq	-24(%rbp), %rax	# type, tmp104
	movzbl	17(%rax), %eax	# *type_5, D.24440
	andl	$64, %eax	#, D.24440
	testb	%al, %al	# D.24440
	je	.L2182	#,
	.loc 1 11068 0
	jmp	.L2178	#
.L2182:
	.loc 1 11070 0
	movq	-24(%rbp), %rax	# type, tmp105
	movq	96(%rax), %rax	# type_5->type.name, D.24439
	testq	%rax, %rax	# D.24439
	je	.L2183	#,
	.loc 1 11070 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# type, tmp106
	movq	96(%rax), %rax	# type_5->type.name, D.24439
	movzbl	16(%rax), %eax	# _9->common.code, D.24440
	cmpb	$33, %al	#, D.24440
	jne	.L2183	#,
	.loc 1 11071 0 is_stmt 1
	movq	-24(%rbp), %rax	# type, tmp107
	movq	96(%rax), %rax	# type_5->type.name, D.24439
	movq	96(%rax), %rax	# _11->decl.result, D.24439
	testq	%rax, %rax	# D.24439
	je	.L2183	#,
	.loc 1 11073 0
	movq	-24(%rbp), %rax	# type, tmp108
	movzbl	17(%rax), %edx	#, tmp111
	orl	$64, %edx	#, tmp112
	movb	%dl, 17(%rax)	# tmp112,
	.loc 1 11074 0
	movq	-24(%rbp), %rax	# type, tmp113
	movq	96(%rax), %rax	# type_5->type.name, D.24439
	movq	-32(%rbp), %rdx	# context_die, tmp114
	movq	%rdx, %rsi	# tmp114,
	movq	%rax, %rdi	# D.24439,
	call	gen_decl_die	#
	.loc 1 11075 0
	jmp	.L2178	#
.L2183:
	.loc 1 11078 0
	movq	-24(%rbp), %rax	# type, tmp115
	movzbl	16(%rax), %eax	# type_5->common.code, D.24440
	movzbl	%al, %eax	# D.24440, D.24441
	cmpl	$24, %eax	#, D.24441
	ja	.L2184	#,
	movl	%eax, %eax	# D.24441, tmp116
	movq	.L2186(,%rax,8), %rax	#, tmp117
	jmp	*%rax	# tmp117
	.section	.rodata
	.align 8
	.align 4
.L2186:
	.quad	.L2208
	.quad	.L2184
	.quad	.L2184
	.quad	.L2184
	.quad	.L2184
	.quad	.L2208
	.quad	.L2208
	.quad	.L2208
	.quad	.L2208
	.quad	.L2188
	.quad	.L2189
	.quad	.L2208
	.quad	.L2208
	.quad	.L2190
	.quad	.L2191
	.quad	.L2190
	.quad	.L2192
	.quad	.L2193
	.quad	.L2194
	.quad	.L2195
	.quad	.L2189
	.quad	.L2189
	.quad	.L2189
	.quad	.L2196
	.quad	.L2208
	.text
.L2190:
	.loc 1 11090 0
	movq	-24(%rbp), %rax	# type, tmp118
	movzbl	17(%rax), %edx	#, tmp121
	orl	$64, %edx	#, tmp122
	movb	%dl, 17(%rax)	# tmp122,
	.loc 1 11094 0
	movq	-24(%rbp), %rax	# type, tmp123
	movq	8(%rax), %rax	# type_5->common.type, D.24439
	movq	-32(%rbp), %rdx	# context_die, tmp124
	movq	%rdx, %rsi	# tmp124,
	movq	%rax, %rdi	# D.24439,
	call	gen_type_die	#
	.loc 1 11095 0
	jmp	.L2198	#
.L2191:
	.loc 1 11100 0
	movq	-24(%rbp), %rax	# type, tmp125
	movq	112(%rax), %rax	# type_5->type.maxval, D.24439
	movq	-32(%rbp), %rdx	# context_die, tmp126
	movq	%rdx, %rsi	# tmp126,
	movq	%rax, %rdi	# D.24439,
	call	gen_type_die	#
	.loc 1 11103 0
	movq	-24(%rbp), %rax	# type, tmp127
	movq	8(%rax), %rax	# type_5->common.type, D.24439
	movq	-32(%rbp), %rdx	# context_die, tmp128
	movq	%rdx, %rsi	# tmp128,
	movq	%rax, %rdi	# D.24439,
	call	gen_type_die	#
	.loc 1 11107 0
	movq	-32(%rbp), %rdx	# context_die, tmp129
	movq	-24(%rbp), %rax	# type, tmp130
	movq	%rdx, %rsi	# tmp129,
	movq	%rax, %rdi	# tmp130,
	call	gen_ptr_to_mbr_type_die	#
	.loc 1 11108 0
	jmp	.L2198	#
.L2195:
	.loc 1 11111 0
	movq	-24(%rbp), %rax	# type, tmp131
	movq	24(%rax), %rax	# type_5->type.values, D.24439
	movq	-32(%rbp), %rdx	# context_die, tmp132
	movq	%rdx, %rsi	# tmp132,
	movq	%rax, %rdi	# D.24439,
	call	gen_type_die	#
	.loc 1 11112 0
	movq	-32(%rbp), %rdx	# context_die, tmp133
	movq	-24(%rbp), %rax	# type, tmp134
	movq	%rdx, %rsi	# tmp133,
	movq	%rax, %rdi	# tmp134,
	call	gen_set_type_die	#
	.loc 1 11113 0
	jmp	.L2198	#
.L2193:
	.loc 1 11116 0
	movq	-24(%rbp), %rax	# type, tmp135
	movq	8(%rax), %rax	# type_5->common.type, D.24439
	movq	-32(%rbp), %rdx	# context_die, tmp136
	movq	%rdx, %rsi	# tmp136,
	movq	%rax, %rdi	# D.24439,
	call	gen_type_die	#
	.loc 1 11117 0
	movl	$__FUNCTION__.17014, %edx	#,
	movl	$11117, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2196:
	.loc 1 11122 0
	movq	-24(%rbp), %rax	# type, tmp137
	movq	8(%rax), %rax	# type_5->common.type, D.24439
	movq	-32(%rbp), %rdx	# context_die, tmp138
	movq	%rdx, %rsi	# tmp138,
	movq	%rax, %rdi	# D.24439,
	call	gen_type_die	#
	.loc 1 11123 0
	movq	-32(%rbp), %rdx	# context_die, tmp139
	movq	-24(%rbp), %rax	# type, tmp140
	movq	%rdx, %rsi	# tmp139,
	movq	%rax, %rdi	# tmp140,
	call	gen_subroutine_type_die	#
	.loc 1 11124 0
	jmp	.L2198	#
.L2192:
	.loc 1 11128 0
	movq	-24(%rbp), %rax	# type, tmp141
	movq	8(%rax), %rax	# type_5->common.type, D.24439
	movq	-32(%rbp), %rdx	# context_die, tmp142
	movq	%rdx, %rsi	# tmp142,
	movq	%rax, %rdi	# D.24439,
	call	gen_type_die	#
	.loc 1 11129 0
	movq	-32(%rbp), %rdx	# context_die, tmp143
	movq	-24(%rbp), %rax	# type, tmp144
	movq	%rdx, %rsi	# tmp143,
	movq	%rax, %rdi	# tmp144,
	call	gen_subroutine_type_die	#
	.loc 1 11130 0
	jmp	.L2198	#
.L2194:
	.loc 1 11133 0
	movq	-24(%rbp), %rax	# type, tmp145
	movzbl	62(%rax), %eax	# *type_5, D.24440
	andl	$1, %eax	#, D.24440
	testb	%al, %al	# D.24440
	je	.L2199	#,
	.loc 1 11133 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# type, tmp146
	movq	8(%rax), %rax	# type_5->common.type, D.24439
	movzbl	16(%rax), %eax	# _26->common.code, D.24440
	cmpb	$12, %al	#, D.24440
	jne	.L2199	#,
	.loc 1 11135 0 is_stmt 1
	movq	-24(%rbp), %rax	# type, tmp147
	movq	8(%rax), %rax	# type_5->common.type, D.24439
	movq	-32(%rbp), %rdx	# context_die, tmp148
	movq	%rdx, %rsi	# tmp148,
	movq	%rax, %rdi	# D.24439,
	call	gen_type_die	#
	.loc 1 11136 0
	movq	-32(%rbp), %rdx	# context_die, tmp149
	movq	-24(%rbp), %rax	# type, tmp150
	movq	%rdx, %rsi	# tmp149,
	movq	%rax, %rdi	# tmp150,
	call	gen_string_type_die	#
	.loc 1 11140 0
	jmp	.L2198	#
.L2199:
	.loc 1 11139 0
	movq	-32(%rbp), %rdx	# context_die, tmp151
	movq	-24(%rbp), %rax	# type, tmp152
	movq	%rdx, %rsi	# tmp151,
	movq	%rax, %rdi	# tmp152,
	call	gen_array_type_die	#
	.loc 1 11140 0
	jmp	.L2198	#
.L2188:
	.loc 1 11143 0
	movq	-32(%rbp), %rdx	# context_die, tmp153
	movq	-24(%rbp), %rax	# type, tmp154
	movq	%rdx, %rsi	# tmp153,
	movq	%rax, %rdi	# tmp154,
	call	gen_array_type_die	#
	.loc 1 11144 0
	jmp	.L2198	#
.L2189:
	.loc 1 11156 0
	movq	-24(%rbp), %rax	# type, tmp155
	movq	144(%rax), %rax	# type_5->type.context, D.24439
	testq	%rax, %rax	# D.24439
	je	.L2201	#,
	.loc 1 11157 0
	movq	-24(%rbp), %rax	# type, tmp156
	movq	144(%rax), %rax	# type_5->type.context, D.24439
	movzbl	16(%rax), %eax	# _30->common.code, D.24440
	cmpb	$18, %al	#, D.24440
	je	.L2202	#,
	.loc 1 11157 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# type, tmp157
	movq	144(%rax), %rax	# type_5->type.context, D.24439
	movzbl	16(%rax), %eax	# _32->common.code, D.24440
	cmpb	$20, %al	#, D.24440
	je	.L2202	#,
	movq	-24(%rbp), %rax	# type, tmp158
	movq	144(%rax), %rax	# type_5->type.context, D.24439
	movzbl	16(%rax), %eax	# _34->common.code, D.24440
	cmpb	$21, %al	#, D.24440
	je	.L2202	#,
	movq	-24(%rbp), %rax	# type, tmp159
	movq	144(%rax), %rax	# type_5->type.context, D.24439
	movzbl	16(%rax), %eax	# _36->common.code, D.24440
	cmpb	$22, %al	#, D.24440
	je	.L2202	#,
	movq	-24(%rbp), %rax	# type, tmp160
	movq	144(%rax), %rax	# type_5->type.context, D.24439
	movzbl	16(%rax), %eax	# _38->common.code, D.24440
	cmpb	$19, %al	#, D.24440
	jne	.L2201	#,
.L2202:
	.loc 1 11158 0 is_stmt 1
	movq	-24(%rbp), %rax	# type, tmp161
	movq	144(%rax), %rax	# type_5->type.context, D.24439
	movzbl	17(%rax), %eax	# *_40, D.24440
	andl	$64, %eax	#, D.24440
	testb	%al, %al	# D.24440
	jne	.L2201	#,
	.loc 1 11160 0
	movq	-24(%rbp), %rax	# type, tmp162
	movq	144(%rax), %rax	# type_5->type.context, D.24439
	movq	-32(%rbp), %rdx	# context_die, tmp163
	movq	%rdx, %rsi	# tmp163,
	movq	%rax, %rdi	# D.24439,
	call	gen_type_die	#
	.loc 1 11162 0
	movq	-24(%rbp), %rax	# type, tmp164
	movzbl	17(%rax), %eax	# *type_5, D.24440
	andl	$64, %eax	#, D.24440
	testb	%al, %al	# D.24440
	je	.L2203	#,
	.loc 1 11163 0
	jmp	.L2178	#
.L2203:
	.loc 1 11166 0
	movq	-24(%rbp), %rax	# type, tmp165
	movq	144(%rax), %rax	# type_5->type.context, D.24439
	movq	%rax, %rdi	# D.24439,
	call	push_decl_scope	#
	.loc 1 11167 0
	movq	-24(%rbp), %rax	# type, tmp166
	movq	144(%rax), %rax	# type_5->type.context, D.24439
	movq	%rax, %rdi	# D.24439,
	call	lookup_type_die	#
	movq	%rax, -32(%rbp)	# tmp167, context_die
	.loc 1 11168 0
	movl	$1, -4(%rbp)	#, need_pop
	jmp	.L2204	#
.L2201:
	.loc 1 11171 0
	movl	$0, -4(%rbp)	#, need_pop
.L2204:
	.loc 1 11173 0
	movq	-24(%rbp), %rax	# type, tmp168
	movzbl	16(%rax), %eax	# type_5->common.code, D.24440
	cmpb	$10, %al	#, D.24440
	jne	.L2205	#,
	.loc 1 11174 0
	movq	-32(%rbp), %rdx	# context_die, tmp169
	movq	-24(%rbp), %rax	# type, tmp170
	movq	%rdx, %rsi	# tmp169,
	movq	%rax, %rdi	# tmp170,
	call	gen_enumeration_type_die	#
	jmp	.L2206	#
.L2205:
	.loc 1 11176 0
	movq	-32(%rbp), %rdx	# context_die, tmp171
	movq	-24(%rbp), %rax	# type, tmp172
	movq	%rdx, %rsi	# tmp171,
	movq	%rax, %rdi	# tmp172,
	call	gen_struct_or_union_type_die	#
.L2206:
	.loc 1 11178 0
	cmpl	$0, -4(%rbp)	#, need_pop
	je	.L2207	#,
	.loc 1 11179 0
	call	pop_decl_scope	#
	.loc 1 11184 0
	jmp	.L2178	#
.L2207:
	jmp	.L2178	#
.L2184:
	.loc 1 11200 0
	movl	$__FUNCTION__.17014, %edx	#,
	movl	$11200, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2208:
	.loc 1 11081 0
	nop
.L2198:
	.loc 1 11203 0
	movq	-24(%rbp), %rax	# type, tmp173
	movzbl	17(%rax), %edx	#, tmp176
	orl	$64, %edx	#, tmp177
	movb	%dl, 17(%rax)	# tmp177,
.L2178:
	.loc 1 11204 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE227:
	.size	gen_type_die, .-gen_type_die
	.type	gen_tagged_type_instantiation_die, @function
gen_tagged_type_instantiation_die:
.LFB228:
	.loc 1 11212 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# type, type
	movq	%rsi, -16(%rbp)	# context_die, context_die
	.loc 1 11213 0
	cmpq	$0, -8(%rbp)	#, type
	je	.L2210	#,
	.loc 1 11213 0 is_stmt 0 discriminator 1
	movq	global_trees(%rip), %rax	# global_trees, D.24442
	cmpq	-8(%rbp), %rax	# type, D.24442
	jne	.L2211	#,
.L2210:
	.loc 1 11214 0 is_stmt 1
	jmp	.L2209	#
.L2211:
	.loc 1 11220 0
	movq	-8(%rbp), %rax	# type, tmp63
	movq	%rax, %rdi	# tmp63,
	call	type_main_variant	#
	cmpq	-8(%rbp), %rax	# type, D.24442
	je	.L2213	#,
	.loc 1 11221 0
	movl	$__FUNCTION__.17035, %edx	#,
	movl	$11221, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2213:
	.loc 1 11226 0
	movq	-8(%rbp), %rax	# type, tmp64
	movzbl	16(%rax), %eax	# type_1(D)->common.code, D.24443
	movzbl	%al, %eax	# D.24443, D.24444
	cmpl	$22, %eax	#, D.24444
	ja	.L2214	#,
	movl	%eax, %eax	# D.24444, tmp65
	movq	.L2216(,%rax,8), %rax	#, tmp66
	jmp	*%rax	# tmp66
	.section	.rodata
	.align 8
	.align 4
.L2216:
	.quad	.L2220
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2217
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2214
	.quad	.L2218
	.quad	.L2219
	.quad	.L2219
	.text
.L2217:
	.loc 1 11232 0
	movq	-16(%rbp), %rdx	# context_die, tmp67
	movq	-8(%rbp), %rax	# type, tmp68
	movq	%rdx, %rsi	# tmp67,
	movq	%rax, %rdi	# tmp68,
	call	gen_inlined_enumeration_type_die	#
	.loc 1 11233 0
	jmp	.L2209	#
.L2218:
	.loc 1 11236 0
	movq	-16(%rbp), %rdx	# context_die, tmp69
	movq	-8(%rbp), %rax	# type, tmp70
	movq	%rdx, %rsi	# tmp69,
	movq	%rax, %rdi	# tmp70,
	call	gen_inlined_structure_type_die	#
	.loc 1 11237 0
	jmp	.L2209	#
.L2219:
	.loc 1 11241 0
	movq	-16(%rbp), %rdx	# context_die, tmp71
	movq	-8(%rbp), %rax	# type, tmp72
	movq	%rdx, %rsi	# tmp71,
	movq	%rax, %rdi	# tmp72,
	call	gen_inlined_union_type_die	#
	.loc 1 11242 0
	jmp	.L2209	#
.L2214:
	.loc 1 11245 0
	movl	$__FUNCTION__.17035, %edx	#,
	movl	$11245, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2220:
	.loc 1 11229 0
	nop
.L2209:
	.loc 1 11247 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE228:
	.size	gen_tagged_type_instantiation_die, .-gen_tagged_type_instantiation_die
	.type	gen_block_die, @function
gen_block_die:
.LFB229:
	.loc 1 11257 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# stmt, stmt
	movq	%rsi, -48(%rbp)	# context_die, context_die
	movl	%edx, -52(%rbp)	# depth, depth
	.loc 1 11258 0
	movl	$0, -32(%rbp)	#, must_output_die
	.loc 1 11264 0
	cmpq	$0, -40(%rbp)	#, stmt
	je	.L2222	#,
	.loc 1 11264 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# stmt, tmp76
	movzbl	18(%rax), %eax	# *stmt_7(D), D.24445
	andl	$1, %eax	#, D.24445
	testb	%al, %al	# D.24445
	je	.L2222	#,
	.loc 1 11265 0 is_stmt 1
	movq	-40(%rbp), %rax	# stmt, tmp77
	movzbl	17(%rax), %eax	# *stmt_7(D), D.24445
	andl	$64, %eax	#, D.24445
	testb	%al, %al	# D.24445
	jne	.L2223	#,
	.loc 1 11265 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# stmt, tmp78
	movzbl	24(%rax), %eax	# *stmt_7(D), D.24445
	andl	$2, %eax	#, D.24445
	testb	%al, %al	# D.24445
	jne	.L2223	#,
.L2222:
	.loc 1 11266 0 is_stmt 1
	jmp	.L2221	#
.L2223:
	.loc 1 11271 0
	movq	-40(%rbp), %rax	# stmt, tmp79
	movq	64(%rax), %rax	# stmt_7(D)->block.fragment_origin, D.24446
	testq	%rax, %rax	# D.24446
	je	.L2225	#,
.LBB91:
	.loc 1 11275 0
	movq	-40(%rbp), %rax	# stmt, tmp80
	movq	40(%rax), %rax	# stmt_7(D)->block.subblocks, tmp81
	movq	%rax, -16(%rbp)	# tmp81, sub
	jmp	.L2226	#
.L2227:
	.loc 1 11276 0 discriminator 2
	movl	-52(%rbp), %eax	# depth, tmp82
	leal	1(%rax), %edx	#, D.24447
	movq	-48(%rbp), %rcx	# context_die, tmp83
	movq	-16(%rbp), %rax	# sub, tmp84
	movq	%rcx, %rsi	# tmp83,
	movq	%rax, %rdi	# tmp84,
	call	gen_block_die	#
	.loc 1 11275 0 discriminator 2
	movq	-16(%rbp), %rax	# sub, tmp85
	movq	(%rax), %rax	# sub_3->common.chain, tmp86
	movq	%rax, -16(%rbp)	# tmp86, sub
.L2226:
	.loc 1 11275 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, sub
	jne	.L2227	#,
	.loc 1 11278 0 is_stmt 1
	jmp	.L2221	#
.L2225:
.LBE91:
	.loc 1 11286 0
	movq	-40(%rbp), %rax	# stmt, tmp87
	movq	%rax, %rdi	# tmp87,
	call	block_ultimate_origin	#
	movq	%rax, -8(%rbp)	# tmp88, origin
	.loc 1 11287 0
	cmpq	$0, -8(%rbp)	#, origin
	je	.L2228	#,
	.loc 1 11287 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# origin, tmp89
	movzbl	16(%rax), %eax	# origin_20->common.code, D.24445
	movzbl	%al, %eax	# D.24445, iftmp.591
	jmp	.L2229	#
.L2228:
	.loc 1 11287 0 discriminator 2
	movl	$0, %eax	#, iftmp.591
.L2229:
	.loc 1 11287 0 discriminator 3
	movl	%eax, -28(%rbp)	# iftmp.591, origin_code
	.loc 1 11291 0 is_stmt 1 discriminator 3
	cmpl	$30, -28(%rbp)	#, origin_code
	jne	.L2230	#,
	.loc 1 11294 0
	movl	$1, -32(%rbp)	#, must_output_die
	jmp	.L2231	#
.L2230:
	.loc 1 11304 0
	cmpq	$0, -8(%rbp)	#, origin
	je	.L2232	#,
	.loc 1 11304 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# origin, iftmp.592
	jmp	.L2233	#
.L2232:
	.loc 1 11304 0 discriminator 2
	movq	-40(%rbp), %rax	# stmt, iftmp.592
.L2233:
	.loc 1 11304 0 discriminator 3
	movq	%rax, %rdi	# iftmp.592,
	call	is_body_block	#
	testl	%eax, %eax	# D.24447
	jne	.L2231	#,
	.loc 1 11308 0 is_stmt 1
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.593
	cmpl	$1, %eax	#, debug_info_level.593
	jbe	.L2234	#,
	.loc 1 11311 0
	movq	-40(%rbp), %rax	# stmt, tmp90
	movq	32(%rax), %rax	# stmt_7(D)->block.vars, D.24446
	testq	%rax, %rax	# D.24446
	setne	%al	#, D.24448
	movzbl	%al, %eax	# D.24448, tmp91
	movl	%eax, -32(%rbp)	# tmp91, must_output_die
	jmp	.L2231	#
.L2234:
	.loc 1 11315 0
	movq	-40(%rbp), %rax	# stmt, tmp92
	movq	32(%rax), %rax	# stmt_7(D)->block.vars, tmp93
	movq	%rax, -24(%rbp)	# tmp93, decl
	jmp	.L2235	#
.L2237:
	.loc 1 11317 0
	movq	-24(%rbp), %rax	# decl, tmp94
	movzbl	16(%rax), %eax	# decl_2->common.code, D.24445
	cmpb	$30, %al	#, D.24445
	jne	.L2236	#,
	.loc 1 11318 0
	movq	-24(%rbp), %rax	# decl, tmp95
	movq	104(%rax), %rax	# decl_2->decl.initial, D.24446
	testq	%rax, %rax	# D.24446
	je	.L2236	#,
	.loc 1 11320 0
	movl	$1, -32(%rbp)	#, must_output_die
	.loc 1 11321 0
	jmp	.L2231	#
.L2236:
	.loc 1 11316 0
	movq	-24(%rbp), %rax	# decl, tmp96
	movq	(%rax), %rax	# decl_2->common.chain, tmp97
	movq	%rax, -24(%rbp)	# tmp97, decl
.L2235:
	.loc 1 11315 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, decl
	jne	.L2237	#,
.L2231:
	.loc 1 11333 0
	cmpl	$0, -32(%rbp)	#, must_output_die
	je	.L2238	#,
	.loc 1 11335 0
	cmpl	$30, -28(%rbp)	#, origin_code
	jne	.L2239	#,
	.loc 1 11336 0
	movl	-52(%rbp), %edx	# depth, tmp98
	movq	-48(%rbp), %rcx	# context_die, tmp99
	movq	-40(%rbp), %rax	# stmt, tmp100
	movq	%rcx, %rsi	# tmp99,
	movq	%rax, %rdi	# tmp100,
	call	gen_inlined_subroutine_die	#
	jmp	.L2221	#
.L2239:
	.loc 1 11338 0
	movl	-52(%rbp), %edx	# depth, tmp101
	movq	-48(%rbp), %rcx	# context_die, tmp102
	movq	-40(%rbp), %rax	# stmt, tmp103
	movq	%rcx, %rsi	# tmp102,
	movq	%rax, %rdi	# tmp103,
	call	gen_lexical_block_die	#
	jmp	.L2221	#
.L2238:
	.loc 1 11341 0
	movl	-52(%rbp), %edx	# depth, tmp104
	movq	-48(%rbp), %rcx	# context_die, tmp105
	movq	-40(%rbp), %rax	# stmt, tmp106
	movq	%rcx, %rsi	# tmp105,
	movq	%rax, %rdi	# tmp106,
	call	decls_for_scope	#
.L2221:
	.loc 1 11342 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE229:
	.size	gen_block_die, .-gen_block_die
	.type	decls_for_scope, @function
decls_for_scope:
.LFB230:
	.loc 1 11352 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# stmt, stmt
	movq	%rsi, -48(%rbp)	# context_die, context_die
	movl	%edx, -52(%rbp)	# depth, depth
	.loc 1 11357 0
	cmpq	$0, -40(%rbp)	#, stmt
	je	.L2242	#,
	.loc 1 11357 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# stmt, tmp77
	movzbl	18(%rax), %eax	# *stmt_4(D), D.24449
	andl	$1, %eax	#, D.24449
	testb	%al, %al	# D.24449
	jne	.L2243	#,
.L2242:
	.loc 1 11358 0 is_stmt 1
	jmp	.L2241	#
.L2243:
	.loc 1 11364 0
	movq	-40(%rbp), %rax	# stmt, tmp78
	movq	32(%rax), %rax	# stmt_4(D)->block.vars, tmp79
	movq	%rax, -24(%rbp)	# tmp79, decl
	jmp	.L2245	#
.L2252:
.LBB92:
	.loc 1 11368 0
	movq	-24(%rbp), %rax	# decl, tmp80
	movzbl	16(%rax), %eax	# decl_1->common.code, D.24449
	cmpb	$30, %al	#, D.24449
	jne	.L2246	#,
	.loc 1 11369 0
	movq	-24(%rbp), %rax	# decl, tmp81
	movq	%rax, %rdi	# tmp81,
	call	lookup_decl_die	#
	movq	%rax, -8(%rbp)	# tmp82, die
	jmp	.L2247	#
.L2246:
	.loc 1 11370 0
	movq	-24(%rbp), %rax	# decl, tmp83
	movzbl	16(%rax), %eax	# decl_1->common.code, D.24449
	cmpb	$33, %al	#, D.24449
	jne	.L2248	#,
	.loc 1 11370 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# decl, tmp84
	movq	72(%rax), %rax	# decl_1->decl.name, D.24450
	testq	%rax, %rax	# D.24450
	je	.L2249	#,
	movq	-24(%rbp), %rax	# decl, tmp85
	movzbl	50(%rax), %eax	# *decl_1, D.24449
	andl	$64, %eax	#, D.24449
	testb	%al, %al	# D.24449
	je	.L2248	#,
	movq	-24(%rbp), %rax	# decl, tmp86
	movq	8(%rax), %rax	# decl_1->common.type, D.24450
	movq	%rax, %rdi	# D.24450,
	call	is_tagged_type	#
	testl	%eax, %eax	# D.24451
	je	.L2248	#,
	movq	-24(%rbp), %rax	# decl, tmp87
	movq	8(%rax), %rax	# decl_1->common.type, D.24450
	movq	(%rax), %rax	# _16->common.chain, D.24450
	cmpq	-24(%rbp), %rax	# decl, D.24450
	je	.L2249	#,
	movq	-24(%rbp), %rax	# decl, tmp88
	movq	112(%rax), %rax	# decl_1->decl.abstract_origin, D.24450
	testq	%rax, %rax	# D.24450
	je	.L2248	#,
	movq	-24(%rbp), %rax	# decl, tmp89
	movq	%rax, %rdi	# tmp89,
	call	decl_ultimate_origin	#
	movq	-24(%rbp), %rdx	# decl, tmp90
	movq	8(%rdx), %rdx	# decl_1->common.type, D.24450
	movq	(%rdx), %rdx	# _20->common.chain, D.24450
	cmpq	%rdx, %rax	# D.24450, D.24450
	jne	.L2248	#,
.L2249:
	.loc 1 11371 0 is_stmt 1
	movq	-24(%rbp), %rax	# decl, tmp91
	movq	8(%rax), %rax	# decl_1->common.type, D.24450
	movq	%rax, %rdi	# D.24450,
	call	lookup_type_die	#
	movq	%rax, -8(%rbp)	# tmp92, die
	jmp	.L2247	#
.L2248:
	.loc 1 11373 0
	movq	$0, -8(%rbp)	#, die
.L2247:
	.loc 1 11375 0
	cmpq	$0, -8(%rbp)	#, die
	je	.L2250	#,
	.loc 1 11375 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# die, tmp93
	movq	24(%rax), %rax	# die_3->die_parent, D.24452
	testq	%rax, %rax	# D.24452
	jne	.L2250	#,
	.loc 1 11376 0 is_stmt 1
	movq	-8(%rbp), %rdx	# die, tmp94
	movq	-48(%rbp), %rax	# context_die, tmp95
	movq	%rdx, %rsi	# tmp94,
	movq	%rax, %rdi	# tmp95,
	call	add_child_die	#
	jmp	.L2251	#
.L2250:
	.loc 1 11378 0
	movq	-48(%rbp), %rdx	# context_die, tmp96
	movq	-24(%rbp), %rax	# decl, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
	call	gen_decl_die	#
.L2251:
.LBE92:
	.loc 1 11364 0
	movq	-24(%rbp), %rax	# decl, tmp98
	movq	(%rax), %rax	# decl_1->common.chain, tmp99
	movq	%rax, -24(%rbp)	# tmp99, decl
.L2245:
	.loc 1 11364 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, decl
	jne	.L2252	#,
	.loc 1 11383 0 is_stmt 1
	movq	-40(%rbp), %rax	# stmt, tmp100
	movq	40(%rax), %rax	# stmt_4(D)->block.subblocks, tmp101
	movq	%rax, -16(%rbp)	# tmp101, subblocks
	jmp	.L2253	#
.L2254:
	.loc 1 11386 0
	movl	-52(%rbp), %eax	# depth, tmp102
	leal	1(%rax), %edx	#, D.24451
	movq	-48(%rbp), %rcx	# context_die, tmp103
	movq	-16(%rbp), %rax	# subblocks, tmp104
	movq	%rcx, %rsi	# tmp103,
	movq	%rax, %rdi	# tmp104,
	call	gen_block_die	#
	.loc 1 11385 0
	movq	-16(%rbp), %rax	# subblocks, tmp105
	movq	(%rax), %rax	# subblocks_2->common.chain, tmp106
	movq	%rax, -16(%rbp)	# tmp106, subblocks
.L2253:
	.loc 1 11383 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, subblocks
	jne	.L2254	#,
.L2241:
	.loc 1 11387 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE230:
	.size	decls_for_scope, .-decls_for_scope
	.type	is_redundant_typedef, @function
is_redundant_typedef:
.LFB231:
	.loc 1 11394 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$8, %rsp	#,
	movq	%rdi, -8(%rbp)	# decl, decl
	.loc 1 11395 0
	movq	-8(%rbp), %rax	# decl, tmp84
	movq	72(%rax), %rax	# decl_2(D)->decl.name, D.24454
	testq	%rax, %rax	# D.24454
	je	.L2256	#,
	.loc 1 11395 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# decl, tmp85
	movzbl	50(%rax), %eax	# *decl_2(D), D.24455
	andl	$64, %eax	#, D.24455
	testb	%al, %al	# D.24455
	je	.L2257	#,
	movq	-8(%rbp), %rax	# decl, tmp86
	movq	8(%rax), %rax	# decl_2(D)->common.type, D.24454
	movq	%rax, %rdi	# D.24454,
	call	is_tagged_type	#
	testl	%eax, %eax	# D.24453
	je	.L2257	#,
	movq	-8(%rbp), %rax	# decl, tmp87
	movq	8(%rax), %rax	# decl_2(D)->common.type, D.24454
	movq	(%rax), %rax	# _8->common.chain, D.24454
	cmpq	-8(%rbp), %rax	# decl, D.24454
	je	.L2256	#,
	movq	-8(%rbp), %rax	# decl, tmp88
	movq	112(%rax), %rax	# decl_2(D)->decl.abstract_origin, D.24454
	testq	%rax, %rax	# D.24454
	je	.L2257	#,
	movq	-8(%rbp), %rax	# decl, tmp89
	movq	%rax, %rdi	# tmp89,
	call	decl_ultimate_origin	#
	movq	-8(%rbp), %rdx	# decl, tmp90
	movq	8(%rdx), %rdx	# decl_2(D)->common.type, D.24454
	movq	(%rdx), %rdx	# _12->common.chain, D.24454
	cmpq	%rdx, %rax	# D.24454, D.24454
	jne	.L2257	#,
.L2256:
	.loc 1 11396 0 is_stmt 1
	movl	$1, %eax	#, D.24453
	jmp	.L2258	#
.L2257:
	.loc 1 11398 0
	movq	-8(%rbp), %rax	# decl, tmp91
	movzbl	50(%rax), %eax	# *decl_2(D), D.24455
	andl	$64, %eax	#, D.24455
	testb	%al, %al	# D.24455
	je	.L2259	#,
	.loc 1 11399 0
	movq	-8(%rbp), %rax	# decl, tmp92
	movq	80(%rax), %rax	# decl_2(D)->decl.context, D.24454
	testq	%rax, %rax	# D.24454
	je	.L2259	#,
	.loc 1 11400 0
	movq	-8(%rbp), %rax	# decl, tmp93
	movq	80(%rax), %rax	# decl_2(D)->decl.context, D.24454
	movq	%rax, %rdi	# D.24454,
	call	is_tagged_type	#
	testl	%eax, %eax	# D.24453
	je	.L2259	#,
	.loc 1 11401 0
	movq	-8(%rbp), %rax	# decl, tmp94
	movq	80(%rax), %rax	# decl_2(D)->decl.context, D.24454
	movq	96(%rax), %rax	# _19->type.name, D.24454
	movzbl	16(%rax), %eax	# _20->common.code, D.24455
	cmpb	$33, %al	#, D.24455
	jne	.L2259	#,
	.loc 1 11402 0
	movq	-8(%rbp), %rax	# decl, tmp95
	movq	72(%rax), %rdx	# decl_2(D)->decl.name, D.24454
	movq	-8(%rbp), %rax	# decl, tmp96
	movq	80(%rax), %rax	# decl_2(D)->decl.context, D.24454
	movq	96(%rax), %rax	# _23->type.name, D.24454
	movq	72(%rax), %rax	# _24->decl.name, D.24454
	cmpq	%rax, %rdx	# D.24454, D.24454
	jne	.L2259	#,
	.loc 1 11404 0
	movl	$1, %eax	#, D.24453
	jmp	.L2258	#
.L2259:
	.loc 1 11406 0
	movl	$0, %eax	#, D.24453
.L2258:
	.loc 1 11407 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE231:
	.size	is_redundant_typedef, .-is_redundant_typedef
	.type	gen_decl_die, @function
gen_decl_die:
.LFB232:
	.loc 1 11415 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# decl, decl
	movq	%rsi, -32(%rbp)	# context_die, context_die
	.loc 1 11418 0
	movq	-24(%rbp), %rax	# decl, tmp110
	movzbl	16(%rax), %eax	# decl_1(D)->common.code, D.24456
	movzbl	%al, %eax	# D.24456, D.24457
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.24458
	cmpb	$100, %al	#, D.24458
	jne	.L2261	#,
	.loc 1 11418 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# decl, tmp112
	movzbl	49(%rax), %eax	# *decl_1(D), D.24456
	andl	$64, %eax	#, D.24456
	testb	%al, %al	# D.24456
	je	.L2261	#,
	.loc 1 11419 0 is_stmt 1
	jmp	.L2260	#
.L2261:
	.loc 1 11421 0
	movq	-24(%rbp), %rax	# decl, tmp113
	movzbl	16(%rax), %eax	# decl_1(D)->common.code, D.24456
	movzbl	%al, %eax	# D.24456, D.24459
	cmpl	$38, %eax	#, D.24459
	ja	.L2263	#,
	movl	%eax, %eax	# D.24459, tmp114
	movq	.L2265(,%rax,8), %rax	#, tmp115
	jmp	*%rax	# tmp115
	.section	.rodata
	.align 8
	.align 4
.L2265:
	.quad	.L2291
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2263
	.quad	.L2266
	.quad	.L2267
	.quad	.L2291
	.quad	.L2269
	.quad	.L2270
	.quad	.L2271
	.quad	.L2263
	.quad	.L2272
	.quad	.L2291
	.text
.L2266:
	.loc 1 11434 0
	movq	-24(%rbp), %rax	# decl, tmp116
	movq	104(%rax), %rax	# decl_1(D)->decl.initial, D.24460
	testq	%rax, %rax	# D.24460
	jne	.L2274	#,
	.loc 1 11434 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# decl, tmp117
	movq	80(%rax), %rax	# decl_1(D)->decl.context, D.24460
	testq	%rax, %rax	# D.24460
	jne	.L2274	#,
	.loc 1 11435 0 is_stmt 1
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.595
	testq	%rax, %rax	# current_function_decl.595
	je	.L2260	#,
	.loc 1 11435 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# decl, tmp118
	movzbl	50(%rax), %eax	# *decl_1(D), D.24456
	andl	$64, %eax	#, D.24456
	testb	%al, %al	# D.24456
	jne	.L2260	#,
.L2274:
	.loc 1 11439 0 is_stmt 1
	movq	-24(%rbp), %rax	# decl, tmp119
	movq	112(%rax), %rax	# decl_1(D)->decl.abstract_origin, D.24460
	testq	%rax, %rax	# D.24460
	je	.L2275	#,
	.loc 1 11439 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# decl, tmp120
	movq	112(%rax), %rax	# decl_1(D)->decl.abstract_origin, D.24460
	cmpq	-24(%rbp), %rax	# decl, D.24460
	je	.L2275	#,
	.loc 1 11440 0 is_stmt 1
	movq	-24(%rbp), %rax	# decl, tmp121
	movq	112(%rax), %rax	# decl_1(D)->decl.abstract_origin, D.24460
	movq	%rax, %rdi	# D.24460,
	call	dwarf2out_abstract_function	#
	jmp	.L2276	#
.L2275:
	.loc 1 11444 0
	movq	-24(%rbp), %rax	# decl, tmp122
	movzbl	49(%rax), %eax	# *decl_1(D), D.24456
	andl	$8, %eax	#, D.24456
	testb	%al, %al	# D.24456
	je	.L2277	#,
	.loc 1 11444 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# decl, tmp123
	movzbl	49(%rax), %eax	# *decl_1(D), D.24456
	andl	$-128, %eax	#, D.24456
	testb	%al, %al	# D.24456
	jne	.L2277	#,
	.loc 1 11445 0 is_stmt 1
	movq	-32(%rbp), %rax	# context_die, tmp124
	movq	%rax, %rdi	# tmp124,
	call	class_scope_p	#
	testl	%eax, %eax	# D.24457
	jne	.L2277	#,
	.loc 1 11449 0
	movq	-24(%rbp), %rax	# decl, tmp125
	movq	104(%rax), %rax	# decl_1(D)->decl.initial, D.24460
	testq	%rax, %rax	# D.24460
	je	.L2277	#,
	.loc 1 11451 0
	movq	-24(%rbp), %rax	# decl, tmp126
	movq	%rax, %rdi	# tmp126,
	call	dwarf2out_abstract_function	#
	.loc 1 11452 0
	movq	-24(%rbp), %rax	# decl, tmp127
	movq	%rax, %rdi	# tmp127,
	call	set_decl_origin_self	#
	jmp	.L2276	#
.L2277:
	.loc 1 11456 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.596
	cmpl	$1, %eax	#, debug_info_level.596
	jbe	.L2276	#,
	.loc 1 11460 0
	movq	-24(%rbp), %rax	# decl, tmp128
	movq	8(%rax), %rax	# decl_1(D)->common.type, D.24460
	movq	8(%rax), %rax	# _25->common.type, D.24460
	movq	-32(%rbp), %rdx	# context_die, tmp129
	movq	%rdx, %rsi	# tmp129,
	movq	%rax, %rdi	# D.24460,
	call	gen_type_die	#
	.loc 1 11463 0
	movq	-24(%rbp), %rax	# decl, tmp130
	movq	184(%rax), %rax	# decl_1(D)->decl.vindex, D.24460
	testq	%rax, %rax	# D.24460
	je	.L2278	#,
	.loc 1 11464 0
	movq	-24(%rbp), %rax	# decl, tmp131
	movq	80(%rax), %rax	# decl_1(D)->decl.context, D.24460
	movq	-32(%rbp), %rdx	# context_die, tmp132
	movq	%rdx, %rsi	# tmp132,
	movq	%rax, %rdi	# D.24460,
	call	gen_type_die	#
.L2278:
	.loc 1 11467 0
	movq	-24(%rbp), %rax	# decl, tmp133
	movq	%rax, %rdi	# tmp133,
	call	decl_class_context	#
	movq	%rax, -8(%rbp)	# tmp134, origin
	.loc 1 11468 0
	cmpq	$0, -8(%rbp)	#, origin
	je	.L2276	#,
	.loc 1 11469 0
	movq	-32(%rbp), %rdx	# context_die, tmp135
	movq	-24(%rbp), %rcx	# decl, tmp136
	movq	-8(%rbp), %rax	# origin, tmp137
	movq	%rcx, %rsi	# tmp136,
	movq	%rax, %rdi	# tmp137,
	call	gen_type_die_for_member	#
.L2276:
	.loc 1 11473 0
	movq	-32(%rbp), %rdx	# context_die, tmp138
	movq	-24(%rbp), %rax	# decl, tmp139
	movq	%rdx, %rsi	# tmp138,
	movq	%rax, %rdi	# tmp139,
	call	gen_subprogram_die	#
	.loc 1 11474 0
	jmp	.L2260	#
.L2269:
	.loc 1 11479 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.597
	cmpl	$1, %eax	#, debug_info_level.597
	ja	.L2279	#,
	.loc 1 11480 0
	jmp	.L2260	#
.L2279:
	.loc 1 11488 0
	movq	-24(%rbp), %rax	# decl, tmp140
	movq	72(%rax), %rax	# decl_1(D)->decl.name, D.24460
	testq	%rax, %rax	# D.24460
	je	.L2280	#,
	.loc 1 11488 0 is_stmt 0 discriminator 2
	movq	-24(%rbp), %rax	# decl, tmp141
	movzbl	50(%rax), %eax	# *decl_1(D), D.24456
	andl	$64, %eax	#, D.24456
	testb	%al, %al	# D.24456
	je	.L2281	#,
	.loc 1 11488 0 discriminator 1
	movq	-24(%rbp), %rax	# decl, tmp142
	movq	8(%rax), %rax	# decl_1(D)->common.type, D.24460
	movq	%rax, %rdi	# D.24460,
	call	is_tagged_type	#
	testl	%eax, %eax	# D.24457
	je	.L2281	#,
	movq	-24(%rbp), %rax	# decl, tmp143
	movq	8(%rax), %rax	# decl_1(D)->common.type, D.24460
	movq	(%rax), %rax	# _36->common.chain, D.24460
	cmpq	-24(%rbp), %rax	# decl, D.24460
	je	.L2280	#,
	movq	-24(%rbp), %rax	# decl, tmp144
	movq	112(%rax), %rax	# decl_1(D)->decl.abstract_origin, D.24460
	testq	%rax, %rax	# D.24460
	je	.L2281	#,
	movq	-24(%rbp), %rax	# decl, tmp145
	movq	%rax, %rdi	# tmp145,
	call	decl_ultimate_origin	#
	movq	-24(%rbp), %rdx	# decl, tmp146
	movq	8(%rdx), %rdx	# decl_1(D)->common.type, D.24460
	movq	(%rdx), %rdx	# _40->common.chain, D.24460
	cmpq	%rdx, %rax	# D.24460, D.24460
	jne	.L2281	#,
.L2280:
	movq	-24(%rbp), %rax	# decl, tmp147
	movq	%rax, %rdi	# tmp147,
	call	decl_ultimate_origin	#
	testq	%rax, %rax	# D.24460
	je	.L2281	#,
	.loc 1 11490 0 is_stmt 1
	movq	-24(%rbp), %rax	# decl, tmp148
	movq	8(%rax), %rax	# decl_1(D)->common.type, D.24460
	movq	-32(%rbp), %rdx	# context_die, tmp149
	movq	%rdx, %rsi	# tmp149,
	movq	%rax, %rdi	# D.24460,
	call	gen_tagged_type_instantiation_die	#
	.loc 1 11491 0
	jmp	.L2260	#
.L2281:
	.loc 1 11494 0
	movq	-24(%rbp), %rax	# decl, tmp150
	movq	%rax, %rdi	# tmp150,
	call	is_redundant_typedef	#
	testl	%eax, %eax	# D.24457
	je	.L2282	#,
	.loc 1 11495 0
	movq	-24(%rbp), %rax	# decl, tmp151
	movq	8(%rax), %rax	# decl_1(D)->common.type, D.24460
	movq	-32(%rbp), %rdx	# context_die, tmp152
	movq	%rdx, %rsi	# tmp152,
	movq	%rax, %rdi	# D.24460,
	call	gen_type_die	#
	.loc 1 11499 0
	jmp	.L2260	#
.L2282:
	.loc 1 11498 0
	movq	-32(%rbp), %rdx	# context_die, tmp153
	movq	-24(%rbp), %rax	# decl, tmp154
	movq	%rdx, %rsi	# tmp153,
	movq	%rax, %rdi	# tmp154,
	call	gen_typedef_die	#
	.loc 1 11499 0
	jmp	.L2260	#
.L2267:
	.loc 1 11502 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.598
	cmpl	$1, %eax	#, debug_info_level.598
	jbe	.L2284	#,
	.loc 1 11503 0
	movq	-32(%rbp), %rdx	# context_die, tmp155
	movq	-24(%rbp), %rax	# decl, tmp156
	movq	%rdx, %rsi	# tmp155,
	movq	%rax, %rdi	# tmp156,
	call	gen_label_die	#
	.loc 1 11504 0
	jmp	.L2260	#
.L2284:
	jmp	.L2260	#
.L2270:
	.loc 1 11509 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.599
	cmpl	$1, %eax	#, debug_info_level.599
	ja	.L2285	#,
	.loc 1 11510 0
	jmp	.L2260	#
.L2285:
	.loc 1 11514 0
	movq	-24(%rbp), %rax	# decl, tmp157
	movq	8(%rax), %rax	# decl_1(D)->common.type, D.24460
	movq	-32(%rbp), %rdx	# context_die, tmp158
	movq	%rdx, %rsi	# tmp158,
	movq	%rax, %rdi	# D.24460,
	call	gen_type_die	#
	.loc 1 11517 0
	movq	-24(%rbp), %rax	# decl, tmp159
	movq	%rax, %rdi	# tmp159,
	call	decl_class_context	#
	movq	%rax, -8(%rbp)	# tmp160, origin
	.loc 1 11518 0
	cmpq	$0, -8(%rbp)	#, origin
	je	.L2286	#,
	.loc 1 11519 0
	movq	-32(%rbp), %rdx	# context_die, tmp161
	movq	-24(%rbp), %rcx	# decl, tmp162
	movq	-8(%rbp), %rax	# origin, tmp163
	movq	%rcx, %rsi	# tmp162,
	movq	%rax, %rdi	# tmp163,
	call	gen_type_die_for_member	#
.L2286:
	.loc 1 11525 0
	movq	-24(%rbp), %rax	# decl, tmp164
	movq	%rax, %rdi	# tmp164,
	call	decl_ultimate_origin	#
	movq	%rax, -8(%rbp)	# tmp165, origin
	.loc 1 11526 0
	cmpq	$0, -8(%rbp)	#, origin
	je	.L2287	#,
	.loc 1 11526 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# origin, tmp166
	movzbl	16(%rax), %eax	# origin_50->common.code, D.24456
	cmpb	$35, %al	#, D.24456
	jne	.L2287	#,
	.loc 1 11527 0 is_stmt 1
	movq	-32(%rbp), %rdx	# context_die, tmp167
	movq	-24(%rbp), %rax	# decl, tmp168
	movq	%rdx, %rsi	# tmp167,
	movq	%rax, %rdi	# tmp168,
	call	gen_formal_parameter_die	#
	.loc 1 11530 0
	jmp	.L2260	#
.L2287:
	.loc 1 11529 0
	movq	-32(%rbp), %rdx	# context_die, tmp169
	movq	-24(%rbp), %rax	# decl, tmp170
	movq	%rdx, %rsi	# tmp169,
	movq	%rax, %rdi	# tmp170,
	call	gen_variable_die	#
	.loc 1 11530 0
	jmp	.L2260	#
.L2272:
	.loc 1 11535 0
	movq	-24(%rbp), %rax	# decl, tmp171
	movq	72(%rax), %rax	# decl_1(D)->decl.name, D.24460
	testq	%rax, %rax	# D.24460
	jne	.L2289	#,
	.loc 1 11536 0
	movq	-24(%rbp), %rax	# decl, tmp172
	movq	8(%rax), %rax	# decl_1(D)->common.type, D.24460
	movzbl	16(%rax), %eax	# _53->common.code, D.24456
	cmpb	$21, %al	#, D.24456
	jne	.L2290	#,
.L2289:
	.loc 1 11538 0
	movq	-24(%rbp), %rax	# decl, tmp173
	movq	%rax, %rdi	# tmp173,
	call	member_declared_type	#
	movq	-32(%rbp), %rdx	# context_die, tmp174
	movq	%rdx, %rsi	# tmp174,
	movq	%rax, %rdi	# D.24460,
	call	gen_type_die	#
	.loc 1 11539 0
	movq	-32(%rbp), %rdx	# context_die, tmp175
	movq	-24(%rbp), %rax	# decl, tmp176
	movq	%rdx, %rsi	# tmp175,
	movq	%rax, %rdi	# tmp176,
	call	gen_field_die	#
	.loc 1 11541 0
	jmp	.L2260	#
.L2290:
	jmp	.L2260	#
.L2271:
	.loc 1 11544 0
	movq	-24(%rbp), %rax	# decl, tmp177
	movq	8(%rax), %rax	# decl_1(D)->common.type, D.24460
	movq	-32(%rbp), %rdx	# context_die, tmp178
	movq	%rdx, %rsi	# tmp178,
	movq	%rax, %rdi	# D.24460,
	call	gen_type_die	#
	.loc 1 11545 0
	movq	-32(%rbp), %rdx	# context_die, tmp179
	movq	-24(%rbp), %rax	# decl, tmp180
	movq	%rdx, %rsi	# tmp179,
	movq	%rax, %rdi	# tmp180,
	call	gen_formal_parameter_die	#
	.loc 1 11546 0
	jmp	.L2260	#
.L2263:
	.loc 1 11553 0
	movl	$__FUNCTION__.17092, %edx	#,
	movl	$11553, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2291:
	.loc 1 11424 0
	nop
.L2260:
	.loc 1 11555 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE232:
	.size	gen_decl_die, .-gen_decl_die
	.type	mark_limbo_die_list, @function
mark_limbo_die_list:
.LFB233:
	.loc 1 11560 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# ptr, ptr
	.loc 1 11562 0
	movq	limbo_die_list(%rip), %rax	# limbo_die_list, tmp73
	movq	%rax, -16(%rbp)	# tmp73, node
	jmp	.L2293	#
.L2296:
.LBB93:
	.loc 1 11563 0
	movq	-16(%rbp), %rax	# node, tmp74
	movq	8(%rax), %rax	# node_1->created_for, tmp75
	movq	%rax, -8(%rbp)	# tmp75, t__
	cmpq	$0, -8(%rbp)	#, t__
	je	.L2294	#,
	.loc 1 11563 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# t__, tmp76
	movq	%rax, %rdi	# tmp76,
	call	ggc_set_mark	#
	testl	%eax, %eax	# D.24461
	jne	.L2294	#,
	movq	ggc_pending_trees(%rip), %rax	# ggc_pending_trees, ggc_pending_trees.600
	movq	8(%rax), %rdx	# ggc_pending_trees.600_5->elements_used, D.24462
	movq	ggc_pending_trees(%rip), %rax	# ggc_pending_trees, ggc_pending_trees.601
	movq	(%rax), %rax	# ggc_pending_trees.601_7->num_elements, D.24462
	cmpq	%rax, %rdx	# D.24462, D.24462
	jb	.L2295	#,
	movq	ggc_pending_trees(%rip), %rax	# ggc_pending_trees, ggc_pending_trees.602
	movq	(%rax), %rax	# ggc_pending_trees.602_9->num_elements, D.24462
	leaq	(%rax,%rax), %rdx	#, D.24462
	movq	ggc_pending_trees(%rip), %rax	# ggc_pending_trees, ggc_pending_trees.603
	movq	%rdx, %rsi	# D.24462,
	movq	%rax, %rdi	# ggc_pending_trees.603,
	call	varray_grow	#
	movq	%rax, ggc_pending_trees(%rip)	# ggc_pending_trees.604, ggc_pending_trees
.L2295:
	.loc 1 11563 0 discriminator 2
	movq	ggc_pending_trees(%rip), %rcx	# ggc_pending_trees, ggc_pending_trees.605
	movq	ggc_pending_trees(%rip), %rax	# ggc_pending_trees, ggc_pending_trees.606
	movq	8(%rax), %rdx	# ggc_pending_trees.606_15->elements_used, D.24462
	leaq	1(%rdx), %rsi	#, D.24462
	movq	%rsi, 8(%rax)	# D.24462, ggc_pending_trees.606_15->elements_used
	addq	$4, %rdx	#, tmp77
	movq	-8(%rbp), %rax	# t__, tmp78
	movq	%rax, (%rcx,%rdx,8)	# tmp78, ggc_pending_trees.605_14->data.tree
.L2294:
.LBE93:
	.loc 1 11562 0 is_stmt 1
	movq	-16(%rbp), %rax	# node, tmp79
	movq	16(%rax), %rax	# node_1->next, tmp80
	movq	%rax, -16(%rbp)	# tmp80, node
.L2293:
	.loc 1 11562 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, node
	jne	.L2296	#,
	.loc 1 11564 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE233:
	.size	mark_limbo_die_list, .-mark_limbo_die_list
	.globl	dwarf2out_add_library_unit_info
	.type	dwarf2out_add_library_unit_info, @function
dwarf2out_add_library_unit_info:
.LFB234:
	.loc 1 11572 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# filename, filename
	movq	%rsi, -64(%rbp)	# context_list, context_list
	.loc 1 11575 0
	cmpq	$0, -56(%rbp)	#, filename
	je	.L2297	#,
.LBB94:
	.loc 1 11577 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.607
	movl	$0, %edx	#,
	movq	%rax, %rsi	# comp_unit_die.607,
	movl	$30, %edi	#,
	call	new_die	#
	movq	%rax, -32(%rbp)	# tmp63, unit_die
	.loc 1 11579 0
	movq	global_trees+216(%rip), %rbx	# global_trees, D.24463
	movq	-64(%rbp), %rax	# context_list, tmp64
	movq	%rax, %rdi	# tmp64,
	call	get_identifier	#
	.loc 1 11578 0
	movq	%rbx, %rdx	# D.24463,
	movq	%rax, %rsi	# D.24463,
	movl	$31, %edi	#,
	call	build_decl	#
	movq	%rax, -24(%rbp)	# tmp65, context_list_decl
	.loc 1 11582 0
	movq	-24(%rbp), %rax	# context_list_decl, tmp66
	movzbl	18(%rax), %edx	#, tmp69
	orl	$8, %edx	#, tmp70
	movb	%dl, 18(%rax)	# tmp70,
	.loc 1 11583 0
	movq	-64(%rbp), %rdx	# context_list, tmp71
	movq	-32(%rbp), %rax	# unit_die, tmp72
	movq	%rdx, %rsi	# tmp71,
	movq	%rax, %rdi	# tmp72,
	call	add_name_attribute	#
	.loc 1 11584 0
	movq	-56(%rbp), %rax	# filename, tmp73
	movq	%rax, %rdi	# tmp73,
	call	lookup_filename	#
	movl	%eax, -36(%rbp)	# tmp74, file_index
	.loc 1 11585 0
	movl	-36(%rbp), %edx	# file_index, D.24464
	movq	-32(%rbp), %rax	# unit_die, tmp75
	movl	$58, %esi	#,
	movq	%rax, %rdi	# tmp75,
	call	add_AT_unsigned	#
	.loc 1 11586 0
	movq	-32(%rbp), %rdx	# unit_die, tmp76
	movq	-24(%rbp), %rax	# context_list_decl, tmp77
	movq	%rdx, %rsi	# tmp76,
	movq	%rax, %rdi	# tmp77,
	call	add_pubname	#
.L2297:
.LBE94:
	.loc 1 11588 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE234:
	.size	dwarf2out_add_library_unit_info, .-dwarf2out_add_library_unit_info
	.type	dwarf2out_global_decl, @function
dwarf2out_global_decl:
.LFB235:
	.loc 1 11596 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# decl, decl
	.loc 1 11601 0
	movq	-8(%rbp), %rax	# decl, tmp61
	movzbl	16(%rax), %eax	# decl_1(D)->common.code, D.24465
	cmpb	$30, %al	#, D.24465
	jne	.L2300	#,
	.loc 1 11601 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# decl, tmp62
	movq	104(%rax), %rax	# decl_1(D)->decl.initial, D.24466
	testq	%rax, %rax	# D.24466
	jne	.L2299	#,
.L2300:
	.loc 1 11602 0 is_stmt 1
	movq	-8(%rbp), %rax	# decl, tmp63
	movq	%rax, %rdi	# tmp63,
	call	dwarf2out_decl	#
.L2299:
	.loc 1 11603 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE235:
	.size	dwarf2out_global_decl, .-dwarf2out_global_decl
	.globl	dwarf2out_decl
	.type	dwarf2out_decl, @function
dwarf2out_decl:
.LFB236:
	.loc 1 11610 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# decl, decl
	.loc 1 11611 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, tmp84
	movq	%rax, -8(%rbp)	# tmp84, context_die
	.loc 1 11613 0
	movq	-24(%rbp), %rax	# decl, tmp85
	movzbl	16(%rax), %eax	# decl_5(D)->common.code, D.24467
	movzbl	%al, %eax	# D.24467, D.24468
	cmpl	$30, %eax	#, D.24468
	je	.L2304	#,
	cmpl	$30, %eax	#, D.24468
	ja	.L2305	#,
	testl	%eax, %eax	# D.24468
	je	.L2321	#,
	.loc 1 11712 0
	jmp	.L2302	#
.L2305:
	.loc 1 11613 0
	cmpl	$33, %eax	#, D.24468
	je	.L2307	#,
	cmpl	$34, %eax	#, D.24468
	je	.L2308	#,
	.loc 1 11712 0
	jmp	.L2302	#
.L2304:
	.loc 1 11622 0
	movq	-24(%rbp), %rax	# decl, tmp86
	movzbl	49(%rax), %eax	# *decl_5(D), D.24467
	andl	$1, %eax	#, D.24467
	testb	%al, %al	# D.24467
	je	.L2310	#,
	.loc 1 11622 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# decl, tmp87
	movzbl	51(%rax), %eax	# *decl_5(D), D.24467
	andl	$96, %eax	#, D.24467
	testb	%al, %al	# D.24467
	je	.L2310	#,
	.loc 1 11623 0 is_stmt 1
	jmp	.L2302	#
.L2310:
	.loc 1 11652 0
	movq	-24(%rbp), %rax	# decl, tmp88
	movq	104(%rax), %rax	# decl_5(D)->decl.initial, D.24469
	testq	%rax, %rax	# D.24469
	jne	.L2311	#,
	.loc 1 11653 0
	jmp	.L2302	#
.L2311:
	.loc 1 11658 0
	movq	-24(%rbp), %rax	# decl, tmp89
	movq	%rax, %rdi	# tmp89,
	call	decl_function_context	#
	testq	%rax, %rax	# D.24469
	je	.L2312	#,
	.loc 1 11659 0
	movq	$0, -8(%rbp)	#, context_die
	.loc 1 11660 0
	jmp	.L2313	#
.L2312:
	jmp	.L2313	#
.L2308:
	.loc 1 11671 0
	movq	-24(%rbp), %rax	# decl, tmp90
	movzbl	49(%rax), %eax	# *decl_5(D), D.24467
	andl	$1, %eax	#, D.24467
	testb	%al, %al	# D.24467
	je	.L2314	#,
	.loc 1 11671 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# decl, tmp91
	movzbl	18(%rax), %eax	# *decl_5(D), D.24467
	andl	$1, %eax	#, D.24467
	testb	%al, %al	# D.24467
	jne	.L2314	#,
	.loc 1 11672 0 is_stmt 1
	jmp	.L2302	#
.L2314:
	.loc 1 11676 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.608
	cmpl	$1, %eax	#, debug_info_level.608
	ja	.L2315	#,
	.loc 1 11677 0
	jmp	.L2302	#
.L2315:
	.loc 1 11678 0
	jmp	.L2313	#
.L2307:
	.loc 1 11682 0
	movq	-24(%rbp), %rax	# decl, tmp92
	movzbl	49(%rax), %eax	# *decl_5(D), D.24467
	andl	$1, %eax	#, D.24467
	testb	%al, %al	# D.24467
	je	.L2316	#,
	.loc 1 11683 0
	jmp	.L2302	#
.L2316:
	.loc 1 11687 0
	movq	-24(%rbp), %rax	# decl, tmp93
	movl	32(%rax), %eax	# decl_5(D)->decl.linenum, D.24470
	testl	%eax, %eax	# D.24470
	jne	.L2317	#,
	.loc 1 11691 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.609
	movl	$19, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.609,
	call	get_AT_unsigned	#
	cmpl	$4, %eax	#, D.24468
	jne	.L2318	#,
	.loc 1 11693 0
	movq	-24(%rbp), %rax	# decl, tmp94
	movq	8(%rax), %rax	# decl_5(D)->common.type, D.24469
	movzbl	16(%rax), %eax	# _25->common.code, D.24467
	cmpb	$11, %al	#, D.24467
	jne	.L2318	#,
	.loc 1 11694 0
	movq	-24(%rbp), %rax	# decl, tmp95
	movzbl	49(%rax), %eax	# *decl_5(D), D.24467
	andl	$64, %eax	#, D.24467
	testb	%al, %al	# D.24467
	jne	.L2318	#,
	.loc 1 11695 0
	movq	-24(%rbp), %rax	# decl, tmp96
	movq	8(%rax), %rax	# decl_5(D)->common.type, D.24469
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.24469,
	call	modified_type_die	#
	.loc 1 11697 0
	jmp	.L2302	#
.L2318:
	jmp	.L2302	#
.L2317:
	.loc 1 11701 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.610
	cmpl	$1, %eax	#, debug_info_level.610
	ja	.L2319	#,
	.loc 1 11702 0
	jmp	.L2302	#
.L2319:
	.loc 1 11706 0
	movq	-24(%rbp), %rax	# decl, tmp97
	movq	%rax, %rdi	# tmp97,
	call	decl_function_context	#
	testq	%rax, %rax	# D.24469
	je	.L2320	#,
	.loc 1 11707 0
	movq	$0, -8(%rbp)	#, context_die
	.loc 1 11709 0
	jmp	.L2322	#
.L2320:
.L2322:
	nop
.L2313:
	.loc 1 11715 0
	movq	-8(%rbp), %rdx	# context_die, tmp98
	movq	-24(%rbp), %rax	# decl, tmp99
	movq	%rdx, %rsi	# tmp98,
	movq	%rax, %rdi	# tmp99,
	call	gen_decl_die	#
	jmp	.L2302	#
.L2321:
	.loc 1 11616 0
	nop
.L2302:
	.loc 1 11716 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE236:
	.size	dwarf2out_decl, .-dwarf2out_decl
	.type	dwarf2out_begin_block, @function
dwarf2out_begin_block:
.LFB237:
	.loc 1 11725 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# line, line
	movl	%esi, -8(%rbp)	# blocknum, blocknum
	.loc 1 11726 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.611
	movq	%rax, %rdi	# current_function_decl.611,
	call	function_section	#
	.loc 1 11727 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.612
	movl	-8(%rbp), %edx	# blocknum, tmp61
	movl	%edx, %ecx	# tmp61,
	movl	$.LC456, %edx	#,
	movl	$.LC55, %esi	#,
	movq	%rax, %rdi	# asm_out_file.612,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 11728 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE237:
	.size	dwarf2out_begin_block, .-dwarf2out_begin_block
	.type	dwarf2out_end_block, @function
dwarf2out_end_block:
.LFB238:
	.loc 1 11737 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# line, line
	movl	%esi, -8(%rbp)	# blocknum, blocknum
	.loc 1 11738 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.613
	movq	%rax, %rdi	# current_function_decl.613,
	call	function_section	#
	.loc 1 11739 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.614
	movl	-8(%rbp), %edx	# blocknum, tmp61
	movl	%edx, %ecx	# tmp61,
	movl	$.LC457, %edx	#,
	movl	$.LC55, %esi	#,
	movq	%rax, %rdi	# asm_out_file.614,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 11740 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE238:
	.size	dwarf2out_end_block, .-dwarf2out_end_block
	.type	dwarf2out_ignore_block, @function
dwarf2out_ignore_block:
.LFB239:
	.loc 1 11752 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$24, %rsp	#,
	movq	%rdi, -24(%rbp)	# block, block
	.loc 1 11755 0
	movq	-24(%rbp), %rax	# block, tmp74
	movq	32(%rax), %rax	# block_3(D)->block.vars, tmp75
	movq	%rax, -8(%rbp)	# tmp75, decl
	jmp	.L2326	#
.L2330:
	.loc 1 11756 0
	movq	-8(%rbp), %rax	# decl, tmp76
	movzbl	16(%rax), %eax	# decl_1->common.code, D.24473
	cmpb	$30, %al	#, D.24473
	je	.L2327	#,
	.loc 1 11757 0
	movq	-8(%rbp), %rax	# decl, tmp77
	movzbl	16(%rax), %eax	# decl_1->common.code, D.24473
	cmpb	$33, %al	#, D.24473
	jne	.L2328	#,
	.loc 1 11757 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# decl, tmp78
	movq	72(%rax), %rax	# decl_1->decl.name, D.24474
	testq	%rax, %rax	# D.24474
	je	.L2327	#,
	movq	-8(%rbp), %rax	# decl, tmp79
	movzbl	50(%rax), %eax	# *decl_1, D.24473
	andl	$64, %eax	#, D.24473
	testb	%al, %al	# D.24473
	je	.L2328	#,
	movq	-8(%rbp), %rax	# decl, tmp80
	movq	8(%rax), %rax	# decl_1->common.type, D.24474
	movq	%rax, %rdi	# D.24474,
	call	is_tagged_type	#
	testl	%eax, %eax	# D.24475
	je	.L2328	#,
	movq	-8(%rbp), %rax	# decl, tmp81
	movq	8(%rax), %rax	# decl_1->common.type, D.24474
	movq	(%rax), %rax	# _12->common.chain, D.24474
	cmpq	-8(%rbp), %rax	# decl, D.24474
	je	.L2327	#,
	movq	-8(%rbp), %rax	# decl, tmp82
	movq	112(%rax), %rax	# decl_1->decl.abstract_origin, D.24474
	testq	%rax, %rax	# D.24474
	je	.L2328	#,
	movq	-8(%rbp), %rax	# decl, tmp83
	movq	%rax, %rdi	# tmp83,
	call	decl_ultimate_origin	#
	movq	-8(%rbp), %rdx	# decl, tmp84
	movq	8(%rdx), %rdx	# decl_1->common.type, D.24474
	movq	(%rdx), %rdx	# _16->common.chain, D.24474
	cmpq	%rdx, %rax	# D.24474, D.24474
	jne	.L2328	#,
.L2327:
	.loc 1 11758 0 is_stmt 1
	movl	$0, %eax	#, D.24472
	jmp	.L2329	#
.L2328:
	.loc 1 11755 0
	movq	-8(%rbp), %rax	# decl, tmp85
	movq	(%rax), %rax	# decl_1->common.chain, tmp86
	movq	%rax, -8(%rbp)	# tmp86, decl
.L2326:
	.loc 1 11755 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, decl
	jne	.L2330	#,
	.loc 1 11760 0 is_stmt 1
	movl	$1, %eax	#, D.24472
.L2329:
	.loc 1 11761 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE239:
	.size	dwarf2out_ignore_block, .-dwarf2out_ignore_block
	.section	.rodata
.LC494:
	.string	"<internal>"
.LC495:
	.string	"<built-in>"
.LC496:
	.string	"\t.file %u \"%s\"\n"
	.text
	.type	lookup_filename, @function
lookup_filename:
.LFB240:
	.loc 1 11777 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# file_name, file_name
	.loc 1 11781 0
	movq	-40(%rbp), %rax	# file_name, tmp92
	movl	$.LC494, %esi	#,
	movq	%rax, %rdi	# tmp92,
	call	strcmp	#
	testl	%eax, %eax	# D.24477
	je	.L2332	#,
	.loc 1 11782 0
	movq	-40(%rbp), %rax	# file_name, tmp93
	movl	$.LC495, %esi	#,
	movq	%rax, %rdi	# tmp93,
	call	strcmp	#
	testl	%eax, %eax	# D.24477
	jne	.L2333	#,
.L2332:
	.loc 1 11783 0
	movl	$0, %eax	#, D.24476
	jmp	.L2334	#
.L2333:
	.loc 1 11787 0
	movl	file_table+16(%rip), %eax	# file_table.last_lookup_index, D.24476
	testl	%eax, %eax	# D.24476
	je	.L2335	#,
	.loc 1 11789 0
	movq	file_table(%rip), %rax	# file_table.table, D.24478
	movl	file_table+16(%rip), %edx	# file_table.last_lookup_index, D.24476
	movl	%edx, %edx	# D.24476, D.24479
	salq	$3, %rdx	#, D.24479
	addq	%rdx, %rax	# D.24479, D.24478
	.loc 1 11788 0
	movq	(%rax), %rdx	# *_11, D.24480
	movq	-40(%rbp), %rax	# file_name, tmp94
	movq	%rdx, %rsi	# D.24480,
	movq	%rax, %rdi	# tmp94,
	call	strcmp	#
	testl	%eax, %eax	# D.24477
	jne	.L2335	#,
	.loc 1 11790 0
	movl	file_table+16(%rip), %eax	# file_table.last_lookup_index, D.24476
	jmp	.L2334	#
.L2335:
	.loc 1 11793 0
	movl	$1, -20(%rbp)	#, i
	jmp	.L2336	#
.L2338:
	.loc 1 11794 0
	movq	file_table(%rip), %rax	# file_table.table, D.24478
	movl	-20(%rbp), %edx	# i, D.24479
	salq	$3, %rdx	#, D.24479
	addq	%rdx, %rax	# D.24479, D.24478
	movq	(%rax), %rdx	# *_20, D.24480
	movq	-40(%rbp), %rax	# file_name, tmp95
	movq	%rdx, %rsi	# D.24480,
	movq	%rax, %rdi	# tmp95,
	call	strcmp	#
	testl	%eax, %eax	# D.24477
	jne	.L2337	#,
	.loc 1 11796 0
	movl	-20(%rbp), %eax	# i, tmp96
	movl	%eax, file_table+16(%rip)	# tmp96, file_table.last_lookup_index
	.loc 1 11797 0
	movl	-20(%rbp), %eax	# i, D.24476
	jmp	.L2334	#
.L2337:
	.loc 1 11793 0
	addl	$1, -20(%rbp)	#, i
.L2336:
	.loc 1 11793 0 is_stmt 0 discriminator 1
	movl	file_table+12(%rip), %eax	# file_table.in_use, D.24476
	cmpl	-20(%rbp), %eax	# i, D.24476
	ja	.L2338	#,
	.loc 1 11802 0 is_stmt 1
	movl	file_table+8(%rip), %eax	# file_table.allocated, D.24476
	cmpl	-20(%rbp), %eax	# i, D.24476
	jne	.L2339	#,
	.loc 1 11804 0
	movl	-20(%rbp), %eax	# i, tmp97
	addl	$64, %eax	#, D.24476
	movl	%eax, file_table+8(%rip)	# D.24476, file_table.allocated
	.loc 1 11806 0
	movl	file_table+8(%rip), %eax	# file_table.allocated, D.24476
	movl	%eax, %eax	# D.24476, D.24479
	leaq	0(,%rax,8), %rdx	#, D.24479
	movq	file_table(%rip), %rax	# file_table.table, D.24478
	movq	%rdx, %rsi	# D.24479,
	movq	%rax, %rdi	# D.24478,
	call	xrealloc	#
	.loc 1 11805 0
	movq	%rax, file_table(%rip)	# D.24481, file_table.table
.L2339:
	.loc 1 11810 0
	movq	file_table(%rip), %rax	# file_table.table, D.24478
	movl	-20(%rbp), %edx	# i, D.24479
	salq	$3, %rdx	#, D.24479
	leaq	(%rax,%rdx), %rbx	#, D.24478
	movq	-40(%rbp), %rax	# file_name, tmp98
	movq	%rax, %rdi	# tmp98,
	call	xstrdup	#
	movq	%rax, (%rbx)	# D.24480, *_35
	.loc 1 11811 0
	movl	-20(%rbp), %eax	# i, tmp100
	addl	$1, %eax	#, D.24476
	movl	%eax, file_table+12(%rip)	# D.24476, file_table.in_use
	.loc 1 11812 0
	movl	-20(%rbp), %eax	# i, tmp101
	movl	%eax, file_table+16(%rip)	# tmp101, file_table.last_lookup_index
	.loc 1 11815 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.615
	movq	-40(%rbp), %rcx	# file_name, tmp102
	movl	-20(%rbp), %edx	# i, tmp103
	movl	$.LC496, %esi	#,
	movq	%rax, %rdi	# asm_out_file.615,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 11817 0
	movl	-20(%rbp), %eax	# i, D.24476
.L2334:
	.loc 1 11818 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE240:
	.size	lookup_filename, .-lookup_filename
	.type	init_file_table, @function
init_file_table:
.LFB241:
	.loc 1 11822 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 11824 0
	movl	$8, %esi	#,
	movl	$64, %edi	#,
	call	xcalloc	#
	movq	%rax, file_table(%rip)	# D.24485, file_table.table
	.loc 1 11825 0
	movl	$64, file_table+8(%rip)	#, file_table.allocated
	.loc 1 11828 0
	movl	$1, file_table+12(%rip)	#, file_table.in_use
	.loc 1 11829 0
	movl	$0, file_table+16(%rip)	#, file_table.last_lookup_index
	.loc 1 11830 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE241:
	.size	init_file_table, .-init_file_table
	.section	.rodata
.LC497:
	.string	"#"
.LC498:
	.string	"\t%s %s:%d\n"
.LC499:
	.string	"\t.loc %d %d 0\n"
	.text
	.type	dwarf2out_source_line, @function
dwarf2out_source_line:
.LFB242:
	.loc 1 11840 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# line, line
	movq	%rsi, -32(%rbp)	# filename, filename
	.loc 1 11841 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.616
	cmpl	$1, %eax	#, debug_info_level.616
	jbe	.L2341	#,
	.loc 1 11843 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.617
	movq	%rax, %rdi	# current_function_decl.617,
	call	function_section	#
	.loc 1 11846 0
	movl	flag_debug_asm(%rip), %eax	# flag_debug_asm, flag_debug_asm.618
	testl	%eax, %eax	# flag_debug_asm.618
	je	.L2345	#,
	.loc 1 11847 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.619
	movl	-20(%rbp), %ecx	# line, tmp70
	movq	-32(%rbp), %rdx	# filename, tmp71
	movl	%ecx, %r8d	# tmp70,
	movq	%rdx, %rcx	# tmp71,
	movl	$.LC497, %edx	#,
	movl	$.LC498, %esi	#,
	movq	%rax, %rdi	# asm_out_file.619,
	movl	$0, %eax	#,
	call	fprintf	#
.L2345:
.LBB95:
	.loc 1 11852 0
	movq	-32(%rbp), %rax	# filename, tmp72
	movq	%rax, %rdi	# tmp72,
	call	lookup_filename	#
	movl	%eax, -4(%rbp)	# tmp73, file_num
	.loc 1 11855 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.620
	movl	-20(%rbp), %ecx	# line, tmp74
	movl	-4(%rbp), %edx	# file_num, tmp75
	movl	$.LC499, %esi	#,
	movq	%rax, %rdi	# asm_out_file.620,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 11858 0
	movl	line_info_table_in_use(%rip), %eax	# line_info_table_in_use, line_info_table_in_use.621
	addl	$1, %eax	#, line_info_table_in_use.622
	movl	%eax, line_info_table_in_use(%rip)	# line_info_table_in_use.622, line_info_table_in_use
	.loc 1 11861 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.623
	movq	128(%rax), %rax	# current_function_decl.623_11->decl.section_name, D.24486
	testq	%rax, %rax	# D.24486
	je	.L2344	#,
	.loc 1 11862 0
	movl	separate_line_info_table_in_use(%rip), %eax	# separate_line_info_table_in_use, separate_line_info_table_in_use.624
	addl	$1, %eax	#, separate_line_info_table_in_use.625
	movl	%eax, separate_line_info_table_in_use(%rip)	# separate_line_info_table_in_use.625, separate_line_info_table_in_use
.LBE95:
	jmp	.L2341	#
.L2344:
.L2341:
	.loc 1 11913 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE242:
	.size	dwarf2out_source_line, .-dwarf2out_source_line
	.section	.rodata
.LC500:
	.string	".debug_macinfo"
.LC501:
	.string	"Start new file"
.LC502:
	.string	"Included from line number %d"
.LC503:
	.string	"Filename we just started"
	.text
	.type	dwarf2out_start_source_file, @function
dwarf2out_start_source_file:
.LFB243:
	.loc 1 11921 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# lineno, lineno
	movq	%rsi, -32(%rbp)	# filename, filename
	.loc 1 11922 0
	movl	flag_eliminate_dwarf2_dups(%rip), %eax	# flag_eliminate_dwarf2_dups, flag_eliminate_dwarf2_dups.654
	testl	%eax, %eax	# flag_eliminate_dwarf2_dups.654
	je	.L2347	#,
.LBB96:
	.loc 1 11925 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.655
	movl	$0, %edx	#,
	movq	%rax, %rsi	# comp_unit_die.655,
	movl	$16644, %edi	#,
	call	new_die	#
	movq	%rax, -8(%rbp)	# tmp65, bincl_die
	.loc 1 11926 0
	movq	-32(%rbp), %rdx	# filename, tmp66
	movq	-8(%rbp), %rax	# bincl_die, tmp67
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp67,
	call	add_AT_string	#
.L2347:
.LBE96:
	.loc 1 11929 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.656
	cmpl	$2, %eax	#, debug_info_level.656
	jbe	.L2346	#,
	.loc 1 11931 0
	movl	$1024, %esi	#,
	movl	$.LC500, %edi	#,
	call	named_section_flags	#
	.loc 1 11932 0
	movl	$.LC501, %edx	#,
	movl	$3, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 11933 0
	movl	-20(%rbp), %eax	# lineno, D.24490
	movl	-20(%rbp), %edx	# lineno, tmp68
	movl	$.LC502, %esi	#,
	movq	%rax, %rdi	# D.24490,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 11935 0
	movq	-32(%rbp), %rax	# filename, tmp69
	movq	%rax, %rdi	# tmp69,
	call	lookup_filename	#
	movl	%eax, %eax	# D.24491, D.24490
	movl	$.LC503, %esi	#,
	movq	%rax, %rdi	# D.24490,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
.L2346:
	.loc 1 11938 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE243:
	.size	dwarf2out_start_source_file, .-dwarf2out_start_source_file
	.section	.rodata
.LC504:
	.string	"End file"
	.text
	.type	dwarf2out_end_source_file, @function
dwarf2out_end_source_file:
.LFB244:
	.loc 1 11945 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# lineno, lineno
	.loc 1 11946 0
	movl	flag_eliminate_dwarf2_dups(%rip), %eax	# flag_eliminate_dwarf2_dups, flag_eliminate_dwarf2_dups.657
	testl	%eax, %eax	# flag_eliminate_dwarf2_dups.657
	je	.L2350	#,
	.loc 1 11948 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.658
	movl	$0, %edx	#,
	movq	%rax, %rsi	# comp_unit_die.658,
	movl	$16645, %edi	#,
	call	new_die	#
.L2350:
	.loc 1 11950 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.659
	cmpl	$2, %eax	#, debug_info_level.659
	jbe	.L2349	#,
	.loc 1 11952 0
	movl	$1024, %esi	#,
	movl	$.LC500, %edi	#,
	call	named_section_flags	#
	.loc 1 11953 0
	movl	$.LC504, %edx	#,
	movl	$4, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.L2349:
	.loc 1 11955 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE244:
	.size	dwarf2out_end_source_file, .-dwarf2out_end_source_file
	.section	.rodata
.LC505:
	.string	"Define macro"
.LC506:
	.string	"At line number %d"
.LC507:
	.string	"The macro"
	.text
	.type	dwarf2out_define, @function
dwarf2out_define:
.LFB245:
	.loc 1 11965 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# lineno, lineno
	movq	%rsi, -16(%rbp)	# buffer, buffer
	.loc 1 11966 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.660
	cmpl	$2, %eax	#, debug_info_level.660
	jbe	.L2352	#,
	.loc 1 11968 0
	movl	$1024, %esi	#,
	movl	$.LC500, %edi	#,
	call	named_section_flags	#
	.loc 1 11969 0
	movl	$.LC505, %edx	#,
	movl	$1, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 11970 0
	movl	-4(%rbp), %eax	# lineno, D.24497
	movl	-4(%rbp), %edx	# lineno, tmp61
	movl	$.LC506, %esi	#,
	movq	%rax, %rdi	# D.24497,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 11971 0
	movq	-16(%rbp), %rax	# buffer, tmp62
	movl	$.LC507, %edx	#,
	movq	$-1, %rsi	#,
	movq	%rax, %rdi	# tmp62,
	movl	$0, %eax	#,
	call	dw2_asm_output_nstring	#
.L2352:
	.loc 1 11973 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE245:
	.size	dwarf2out_define, .-dwarf2out_define
	.section	.rodata
.LC508:
	.string	"Undefine macro"
	.text
	.type	dwarf2out_undef, @function
dwarf2out_undef:
.LFB246:
	.loc 1 11983 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# lineno, lineno
	movq	%rsi, -16(%rbp)	# buffer, buffer
	.loc 1 11984 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.661
	cmpl	$2, %eax	#, debug_info_level.661
	jbe	.L2354	#,
	.loc 1 11986 0
	movl	$1024, %esi	#,
	movl	$.LC500, %edi	#,
	call	named_section_flags	#
	.loc 1 11987 0
	movl	$.LC508, %edx	#,
	movl	$2, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
	.loc 1 11988 0
	movl	-4(%rbp), %eax	# lineno, D.24501
	movl	-4(%rbp), %edx	# lineno, tmp61
	movl	$.LC506, %esi	#,
	movq	%rax, %rdi	# D.24501,
	movl	$0, %eax	#,
	call	dw2_asm_output_data_uleb128	#
	.loc 1 11989 0
	movq	-16(%rbp), %rax	# buffer, tmp62
	movl	$.LC507, %edx	#,
	movq	$-1, %rsi	#,
	movq	%rax, %rdi	# tmp62,
	movl	$0, %eax	#,
	call	dw2_asm_output_nstring	#
.L2354:
	.loc 1 11991 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE246:
	.size	dwarf2out_undef, .-dwarf2out_undef
	.section	.rodata
.LC509:
	.string	"decl_scope_table"
.LC510:
	.string	"incomplete_types"
.LC511:
	.string	"used_rtx_varray"
.LC512:
	.string	"Letext"
.LC513:
	.string	"Ldebug_abbrev"
.LC514:
	.string	"Ltext"
.LC515:
	.string	"Ldebug_info"
.LC516:
	.string	"Ldebug_line"
.LC517:
	.string	"Ldebug_ranges"
.LC518:
	.string	".debug_abbrev"
.LC519:
	.string	".debug_line"
.LC520:
	.string	"Ldebug_macinfo"
	.text
	.type	dwarf2out_init, @function
dwarf2out_init:
.LFB247:
	.loc 1 11998 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# main_input_filename, main_input_filename
	.loc 1 11999 0
	call	init_file_table	#
	.loc 1 12002 0
	movq	-8(%rbp), %rax	# main_input_filename, tmp77
	movq	%rax, primary_filename(%rip)	# tmp77, primary_filename
	.loc 1 12007 0
	movq	-8(%rbp), %rax	# main_input_filename, tmp78
	movq	%rax, %rdi	# tmp78,
	call	lookup_filename	#
	.loc 1 12011 0
	movl	$8, %esi	#,
	movl	$256, %edi	#,
	call	xcalloc	#
	movq	%rax, decl_die_table(%rip)	# decl_die_table.662, decl_die_table
	.loc 1 12012 0
	movl	$256, decl_die_table_allocated(%rip)	#, decl_die_table_allocated
	.loc 1 12013 0
	movl	$0, decl_die_table_in_use(%rip)	#, decl_die_table_in_use
	.loc 1 12016 0
	movl	$.LC509, %edx	#,
	movl	$8, %esi	#,
	movl	$256, %edi	#,
	call	varray_init	#
	movq	%rax, decl_scope_table(%rip)	# decl_scope_table.663, decl_scope_table
	.loc 1 12017 0
	movl	$1, %esi	#,
	movl	$decl_scope_table, %edi	#,
	call	ggc_add_tree_varray_root	#
	.loc 1 12021 0
	movl	$8, %esi	#,
	movl	$256, %edi	#,
	call	xcalloc	#
	movq	%rax, abbrev_die_table(%rip)	# abbrev_die_table.664, abbrev_die_table
	.loc 1 12023 0
	movl	$256, abbrev_die_table_allocated(%rip)	#, abbrev_die_table_allocated
	.loc 1 12025 0
	movl	$1, abbrev_die_table_in_use(%rip)	#, abbrev_die_table_in_use
	.loc 1 12029 0
	movl	$16, %esi	#,
	movl	$1024, %edi	#,
	call	xcalloc	#
	movq	%rax, line_info_table(%rip)	# line_info_table.665, line_info_table
	.loc 1 12031 0
	movl	$1024, line_info_table_allocated(%rip)	#, line_info_table_allocated
	.loc 1 12034 0
	movl	$1, line_info_table_in_use(%rip)	#, line_info_table_in_use
	.loc 1 12041 0
	movq	-8(%rbp), %rax	# main_input_filename, tmp82
	movq	%rax, %rdi	# tmp82,
	call	gen_compile_unit_die	#
	movq	%rax, comp_unit_die(%rip)	# comp_unit_die.666, comp_unit_die
	.loc 1 12043 0
	movl	$.LC510, %edx	#,
	movl	$8, %esi	#,
	movl	$64, %edi	#,
	call	varray_init	#
	movq	%rax, incomplete_types(%rip)	# incomplete_types.667, incomplete_types
	.loc 1 12044 0
	movl	$1, %esi	#,
	movl	$incomplete_types, %edi	#,
	call	ggc_add_tree_varray_root	#
	.loc 1 12046 0
	movl	$.LC511, %edx	#,
	movl	$8, %esi	#,
	movl	$32, %edi	#,
	call	varray_init	#
	movq	%rax, used_rtx_varray(%rip)	# used_rtx_varray.668, used_rtx_varray
	.loc 1 12047 0
	movl	$1, %esi	#,
	movl	$used_rtx_varray, %edi	#,
	call	ggc_add_rtx_varray_root	#
	.loc 1 12049 0
	movl	$mark_limbo_die_list, %ecx	#,
	movl	$1, %edx	#,
	movl	$1, %esi	#,
	movl	$limbo_die_list, %edi	#,
	call	ggc_add_root	#
	.loc 1 12051 0
	movl	$0, %ecx	#,
	movl	$.LC512, %edx	#,
	movl	$.LC30, %esi	#,
	movl	$text_end_label, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 12052 0
	movl	$0, %ecx	#,
	movl	$.LC513, %edx	#,
	movl	$.LC30, %esi	#,
	movl	$abbrev_section_label, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 12055 0
	movl	$0, %ecx	#,
	movl	$.LC514, %edx	#,
	movl	$.LC30, %esi	#,
	movl	$text_section_label, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 12059 0
	movl	$0, %ecx	#,
	movl	$.LC515, %edx	#,
	movl	$.LC30, %esi	#,
	movl	$debug_info_section_label, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 12061 0
	movl	$0, %ecx	#,
	movl	$.LC516, %edx	#,
	movl	$.LC30, %esi	#,
	movl	$debug_line_section_label, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 12063 0
	movl	$0, %ecx	#,
	movl	$.LC517, %edx	#,
	movl	$.LC30, %esi	#,
	movl	$ranges_section_label, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 12065 0
	movl	$1024, %esi	#,
	movl	$.LC518, %edi	#,
	call	named_section_flags	#
	.loc 1 12066 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.669
	movl	$abbrev_section_label, %esi	#,
	movq	%rax, %rdi	# asm_out_file.669,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.670
	movq	%rax, %rcx	# asm_out_file.670,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 12067 0
	movl	$1024, %esi	#,
	movl	$.LC442, %edi	#,
	call	named_section_flags	#
	.loc 1 12068 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.671
	movl	$debug_info_section_label, %esi	#,
	movq	%rax, %rdi	# asm_out_file.671,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.672
	movq	%rax, %rcx	# asm_out_file.672,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 12069 0
	movl	$1024, %esi	#,
	movl	$.LC519, %edi	#,
	call	named_section_flags	#
	.loc 1 12070 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.673
	movl	$debug_line_section_label, %esi	#,
	movq	%rax, %rdi	# asm_out_file.673,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.674
	movq	%rax, %rcx	# asm_out_file.674,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 12072 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.675
	cmpl	$2, %eax	#, debug_info_level.675
	jbe	.L2358	#,
	.loc 1 12074 0
	movl	$1024, %esi	#,
	movl	$.LC500, %edi	#,
	call	named_section_flags	#
	.loc 1 12075 0
	movl	$0, %ecx	#,
	movl	$.LC520, %edx	#,
	movl	$.LC30, %esi	#,
	movl	$macinfo_section_label, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 12077 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.676
	movl	$macinfo_section_label, %esi	#,
	movq	%rax, %rdi	# asm_out_file.676,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.677
	movq	%rax, %rcx	# asm_out_file.677,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
.L2358:
	.loc 1 12082 0
	call	text_section	#
	.loc 1 12083 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.678
	movl	$text_section_label, %esi	#,
	movq	%rax, %rdi	# asm_out_file.678,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.679
	movq	%rax, %rcx	# asm_out_file.679,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 12085 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE247:
	.size	dwarf2out_init, .-dwarf2out_init
	.type	indirect_string_alloc, @function
indirect_string_alloc:
.LFB248:
	.loc 1 12092 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# tab, tab
	.loc 1 12095 0
	movl	$32, %edi	#,
	call	xmalloc	#
	movq	%rax, -8(%rbp)	# tmp61, node
	.loc 1 12096 0
	movq	-8(%rbp), %rax	# node, tmp62
	movl	$0, 16(%rax)	#, node_1->refcount
	.loc 1 12097 0
	movq	-8(%rbp), %rax	# node, tmp63
	movl	$0, 20(%rax)	#, node_1->form
	.loc 1 12098 0
	movq	-8(%rbp), %rax	# node, tmp64
	movq	$0, 24(%rax)	#, node_1->label
	.loc 1 12100 0
	movq	-8(%rbp), %rax	# node, D.24515
	.loc 1 12101 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE248:
	.size	indirect_string_alloc, .-indirect_string_alloc
	.section	.rodata
.LC521:
	.string	".debug_str"
	.text
	.type	output_indirect_string, @function
output_indirect_string:
.LFB249:
	.loc 1 12111 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# pfile, pfile
	movq	%rsi, -32(%rbp)	# h, h
	movq	%rdx, -40(%rbp)	# v, v
	.loc 1 12112 0
	movq	-32(%rbp), %rax	# h, tmp69
	movq	%rax, -8(%rbp)	# tmp69, node
	.loc 1 12114 0
	movq	-8(%rbp), %rax	# node, tmp70
	movl	20(%rax), %eax	# node_2->form, D.24516
	cmpl	$14, %eax	#, D.24516
	jne	.L2362	#,
	.loc 1 12116 0
	movl	$99329, %esi	#,
	movl	$.LC521, %edi	#,
	call	named_section_flags	#
	.loc 1 12117 0
	movq	-8(%rbp), %rax	# node, tmp71
	movq	24(%rax), %rdx	# node_2->label, D.24517
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.680
	movq	%rdx, %rsi	# D.24517,
	movq	%rax, %rdi	# asm_out_file.680,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.681
	movq	%rax, %rcx	# asm_out_file.681,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 12119 0
	movq	-8(%rbp), %rax	# node, tmp72
	movl	(%rax), %eax	# node_2->id.len, D.24516
	addl	$1, %eax	#, D.24516
	.loc 1 12118 0
	movl	%eax, %edx	# D.24516, D.24518
	movq	-8(%rbp), %rax	# node, tmp73
	movq	8(%rax), %rax	# node_2->id.str, D.24519
	movl	%edx, %esi	# D.24518,
	movq	%rax, %rdi	# D.24519,
	call	assemble_string	#
.L2362:
	.loc 1 12122 0
	movl	$1, %eax	#, D.24518
	.loc 1 12123 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE249:
	.size	output_indirect_string, .-output_indirect_string
	.section	.rodata
.LC522:
	.string	".debug_loc"
.LC523:
	.string	"Ldebug_loc"
.LC524:
	.string	".debug_pubnames"
.LC525:
	.string	".debug_aranges"
.LC526:
	.string	".debug_ranges"
	.text
	.type	dwarf2out_finish, @function
dwarf2out_finish:
.LFB250:
	.loc 1 12131 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# input_filename, input_filename
	.loc 1 12133 0
	movq	$0, -32(%rbp)	#, die
	.loc 1 12140 0
	movq	limbo_die_list(%rip), %rax	# limbo_die_list, tmp114
	movq	%rax, -40(%rbp)	# tmp114, node
	jmp	.L2365	#
.L2375:
	.loc 1 12142 0
	movq	-40(%rbp), %rax	# node, tmp115
	movq	16(%rax), %rax	# node_1->next, tmp116
	movq	%rax, -16(%rbp)	# tmp116, next_node
	.loc 1 12143 0
	movq	-40(%rbp), %rax	# node, tmp117
	movq	(%rax), %rax	# node_1->die, tmp118
	movq	%rax, -32(%rbp)	# tmp118, die
	.loc 1 12145 0
	movq	-32(%rbp), %rax	# die, tmp119
	movq	24(%rax), %rax	# die_9->die_parent, D.24521
	testq	%rax, %rax	# D.24521
	jne	.L2366	#,
.LBB97:
	.loc 1 12147 0
	movq	-32(%rbp), %rax	# die, tmp120
	movl	$49, %esi	#,
	movq	%rax, %rdi	# tmp120,
	call	get_AT_ref	#
	movq	%rax, -8(%rbp)	# tmp121, origin
	.loc 1 12150 0
	cmpq	$0, -8(%rbp)	#, origin
	je	.L2367	#,
	.loc 1 12151 0
	movq	-8(%rbp), %rax	# origin, tmp122
	movq	24(%rax), %rax	# origin_11->die_parent, D.24521
	movq	-32(%rbp), %rdx	# die, tmp123
	movq	%rdx, %rsi	# tmp123,
	movq	%rax, %rdi	# D.24521,
	call	add_child_die	#
	jmp	.L2366	#
.L2367:
	.loc 1 12152 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.682
	cmpq	%rax, -32(%rbp)	# comp_unit_die.682, die
	je	.L2366	#,
	.loc 1 12157 0
	movq	-40(%rbp), %rax	# node, tmp124
	movq	8(%rax), %rax	# node_1->created_for, D.24522
	testq	%rax, %rax	# D.24522
	je	.L2368	#,
	.loc 1 12158 0
	movq	-40(%rbp), %rax	# node, tmp125
	movq	8(%rax), %rax	# node_1->created_for, D.24522
	movzbl	16(%rax), %eax	# _15->common.code, D.24523
	cmpb	$118, %al	#, D.24523
	jne	.L2368	#,
	.loc 1 12160 0
	movq	-40(%rbp), %rax	# node, tmp126
	movq	8(%rax), %rax	# node_1->created_for, D.24522
	movq	40(%rax), %rax	# _17->exp.operands, D.24522
	.loc 1 12159 0
	movq	%rax, %rdi	# D.24522,
	call	lookup_decl_die	#
	movq	%rax, -8(%rbp)	# tmp127, origin
	cmpq	$0, -8(%rbp)	#, origin
	je	.L2368	#,
	.loc 1 12162 0
	movq	-32(%rbp), %rdx	# die, tmp128
	movq	-8(%rbp), %rax	# origin, tmp129
	movq	%rdx, %rsi	# tmp128,
	movq	%rax, %rdi	# tmp129,
	call	add_child_die	#
	jmp	.L2366	#
.L2368:
	.loc 1 12163 0
	movq	global_dc(%rip), %rax	# global_dc, global_dc.683
	movl	60(%rax), %eax	# MEM[(struct output_buffer *)global_dc.683_20].state.diagnostic_count, D.24524
	testl	%eax, %eax	# D.24524
	jg	.L2369	#,
	.loc 1 12163 0 is_stmt 0 discriminator 1
	movq	global_dc(%rip), %rax	# global_dc, global_dc.684
	movl	56(%rax), %eax	# MEM[(struct output_buffer *)global_dc.684_22].state.diagnostic_count, D.24524
	testl	%eax, %eax	# D.24524
	jle	.L2370	#,
.L2369:
	.loc 1 12165 0 is_stmt 1
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.685
	movq	-32(%rbp), %rdx	# die, tmp130
	movq	%rdx, %rsi	# tmp130,
	movq	%rax, %rdi	# comp_unit_die.685,
	call	add_child_die	#
	jmp	.L2366	#
.L2370:
	.loc 1 12166 0
	movq	-40(%rbp), %rax	# node, tmp131
	movq	8(%rax), %rax	# node_1->created_for, D.24522
	testq	%rax, %rax	# D.24522
	je	.L2371	#,
	.loc 1 12167 0
	movq	-40(%rbp), %rax	# node, tmp132
	movq	8(%rax), %rax	# node_1->created_for, D.24522
	movzbl	16(%rax), %eax	# _25->common.code, D.24523
	movzbl	%al, %eax	# D.24523, D.24524
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.24525
	cmpb	$100, %al	#, D.24525
	jne	.L2372	#,
	.loc 1 12168 0
	movq	-40(%rbp), %rax	# node, tmp134
	movq	8(%rax), %rax	# node_1->created_for, D.24522
	movq	80(%rax), %rax	# _29->decl.context, tmp135
	movq	%rax, -24(%rbp)	# tmp135, context
	cmpq	$0, -24(%rbp)	#, context
	jne	.L2373	#,
.L2372:
	.loc 1 12169 0
	movq	-40(%rbp), %rax	# node, tmp136
	movq	8(%rax), %rax	# node_1->created_for, D.24522
	movzbl	16(%rax), %eax	# _31->common.code, D.24523
	movzbl	%al, %eax	# D.24523, D.24524
	cltq
	movzbl	tree_code_type(%rax), %eax	# tree_code_type, D.24525
	cmpb	$116, %al	#, D.24525
	jne	.L2371	#,
	.loc 1 12170 0
	movq	-40(%rbp), %rax	# node, tmp138
	movq	8(%rax), %rax	# node_1->created_for, D.24522
	movq	144(%rax), %rax	# _35->type.context, tmp139
	movq	%rax, -24(%rbp)	# tmp139, context
	cmpq	$0, -24(%rbp)	#, context
	je	.L2371	#,
.L2373:
	.loc 1 12171 0
	movq	-24(%rbp), %rax	# context, tmp140
	movzbl	16(%rax), %eax	# context_5->common.code, D.24523
	cmpb	$30, %al	#, D.24523
	jne	.L2371	#,
	.loc 1 12178 0
	movq	-24(%rbp), %rax	# context, tmp141
	movq	%rax, %rdi	# tmp141,
	call	lookup_decl_die	#
	movq	%rax, -8(%rbp)	# tmp142, origin
	.loc 1 12179 0
	cmpq	$0, -8(%rbp)	#, origin
	jne	.L2374	#,
	.loc 1 12180 0
	movl	$__FUNCTION__.17189, %edx	#,
	movl	$12180, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2374:
	.loc 1 12181 0
	movq	-32(%rbp), %rdx	# die, tmp143
	movq	-8(%rbp), %rax	# origin, tmp144
	movq	%rdx, %rsi	# tmp143,
	movq	%rax, %rdi	# tmp144,
	call	add_child_die	#
	jmp	.L2366	#
.L2371:
	.loc 1 12184 0
	movl	$__FUNCTION__.17189, %edx	#,
	movl	$12184, %esi	#,
	movl	$.LC32, %edi	#,
	call	fancy_abort	#
.L2366:
.LBE97:
	.loc 1 12187 0
	movq	-40(%rbp), %rax	# node, tmp145
	movq	%rax, %rdi	# tmp145,
	call	free	#
	.loc 1 12140 0
	movq	-16(%rbp), %rax	# next_node, tmp146
	movq	%rax, -40(%rbp)	# tmp146, node
.L2365:
	.loc 1 12140 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, node
	jne	.L2375	#,
	.loc 1 12190 0 is_stmt 1
	movq	$0, limbo_die_list(%rip)	#, limbo_die_list
	.loc 1 12194 0
	call	retry_incomplete_types	#
	.loc 1 12198 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.686
	movq	%rax, %rdi	# comp_unit_die.686,
	call	reverse_all_dies	#
	.loc 1 12202 0
	movl	flag_eliminate_dwarf2_dups(%rip), %eax	# flag_eliminate_dwarf2_dups, flag_eliminate_dwarf2_dups.687
	testl	%eax, %eax	# flag_eliminate_dwarf2_dups.687
	je	.L2376	#,
	.loc 1 12203 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.688
	movq	%rax, %rdi	# comp_unit_die.688,
	call	break_out_includes	#
.L2376:
	.loc 1 12207 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.689
	movq	%rax, %rdi	# comp_unit_die.689,
	call	add_sibling_attributes	#
	.loc 1 12208 0
	movq	limbo_die_list(%rip), %rax	# limbo_die_list, tmp147
	movq	%rax, -40(%rbp)	# tmp147, node
	jmp	.L2377	#
.L2378:
	.loc 1 12209 0 discriminator 2
	movq	-40(%rbp), %rax	# node, tmp148
	movq	(%rax), %rax	# node_2->die, D.24521
	movq	%rax, %rdi	# D.24521,
	call	add_sibling_attributes	#
	.loc 1 12208 0 discriminator 2
	movq	-40(%rbp), %rax	# node, tmp149
	movq	16(%rax), %rax	# node_2->next, tmp150
	movq	%rax, -40(%rbp)	# tmp150, node
.L2377:
	.loc 1 12208 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, node
	jne	.L2378	#,
	.loc 1 12212 0 is_stmt 1
	call	text_section	#
	.loc 1 12213 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.690
	movl	$0, %ecx	#,
	movl	$.LC512, %edx	#,
	movl	$.LC55, %esi	#,
	movq	%rax, %rdi	# asm_out_file.690,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 12227 0
	movl	have_location_lists(%rip), %eax	# have_location_lists, have_location_lists.691
	testl	%eax, %eax	# have_location_lists.691
	je	.L2379	#,
	.loc 1 12230 0
	movl	$1024, %esi	#,
	movl	$.LC522, %edi	#,
	call	named_section_flags	#
	.loc 1 12231 0
	movl	$0, %ecx	#,
	movl	$.LC523, %edx	#,
	movl	$.LC30, %esi	#,
	movl	$loc_section_label, %edi	#,
	movl	$0, %eax	#,
	call	sprintf	#
	.loc 1 12233 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.692
	movl	$loc_section_label, %esi	#,
	movq	%rax, %rdi	# asm_out_file.692,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.693
	movq	%rax, %rcx	# asm_out_file.693,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 12234 0
	movq	-32(%rbp), %rax	# die, tmp151
	movq	%rax, %rdi	# tmp151,
	call	output_location_lists	#
	.loc 1 12235 0
	movl	$0, have_location_lists(%rip)	#, have_location_lists
.L2379:
	.loc 1 12240 0
	movl	separate_line_info_table_in_use(%rip), %eax	# separate_line_info_table_in_use, separate_line_info_table_in_use.694
	testl	%eax, %eax	# separate_line_info_table_in_use.694
	jne	.L2380	#,
	.loc 1 12242 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.695
	movl	$text_section_label, %edx	#,
	movl	$17, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.695,
	call	add_AT_lbl_id	#
	.loc 1 12243 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.696
	movl	$text_end_label, %edx	#,
	movl	$18, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.696,
	call	add_AT_lbl_id	#
	jmp	.L2381	#
.L2380:
	.loc 1 12248 0
	movl	have_location_lists(%rip), %eax	# have_location_lists, have_location_lists.697
	testl	%eax, %eax	# have_location_lists.697
	jne	.L2382	#,
	.loc 1 12248 0 is_stmt 0 discriminator 1
	movl	ranges_table_in_use(%rip), %eax	# ranges_table_in_use, ranges_table_in_use.698
	testl	%eax, %eax	# ranges_table_in_use.698
	je	.L2381	#,
.L2382:
	.loc 1 12249 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rdx	# const_int_rtx, D.24526
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.699
	movl	$82, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.699,
	call	add_AT_addr	#
.L2381:
	.loc 1 12251 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.700
	cmpl	$1, %eax	#, debug_info_level.700
	jbe	.L2383	#,
	.loc 1 12252 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.701
	movl	$debug_line_section_label, %edx	#,
	movl	$16, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.701,
	call	add_AT_lbl_offset	#
.L2383:
	.loc 1 12255 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.702
	cmpl	$2, %eax	#, debug_info_level.702
	jbe	.L2384	#,
	.loc 1 12256 0
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.703
	movl	$macinfo_section_label, %edx	#,
	movl	$67, %esi	#,
	movq	%rax, %rdi	# comp_unit_die.703,
	call	add_AT_lbl_offset	#
.L2384:
	.loc 1 12260 0
	movq	limbo_die_list(%rip), %rax	# limbo_die_list, tmp152
	movq	%rax, -40(%rbp)	# tmp152, node
	jmp	.L2385	#
.L2386:
	.loc 1 12261 0 discriminator 2
	movq	-40(%rbp), %rax	# node, tmp153
	movq	(%rax), %rax	# node_3->die, D.24521
	movq	%rax, %rdi	# D.24521,
	call	output_comp_unit	#
	.loc 1 12260 0 discriminator 2
	movq	-40(%rbp), %rax	# node, tmp154
	movq	16(%rax), %rax	# node_3->next, tmp155
	movq	%rax, -40(%rbp)	# tmp155, node
.L2385:
	.loc 1 12260 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, node
	jne	.L2386	#,
	.loc 1 12263 0 is_stmt 1
	movq	comp_unit_die(%rip), %rax	# comp_unit_die, comp_unit_die.704
	movq	%rax, %rdi	# comp_unit_die.704,
	call	output_comp_unit	#
	.loc 1 12266 0
	movl	$1024, %esi	#,
	movl	$.LC518, %edi	#,
	call	named_section_flags	#
	.loc 1 12267 0
	call	output_abbrev_section	#
	.loc 1 12270 0
	movl	pubname_table_in_use(%rip), %eax	# pubname_table_in_use, pubname_table_in_use.705
	testl	%eax, %eax	# pubname_table_in_use.705
	je	.L2387	#,
	.loc 1 12272 0
	movl	$1024, %esi	#,
	movl	$.LC524, %edi	#,
	call	named_section_flags	#
	.loc 1 12273 0
	call	output_pubnames	#
.L2387:
	.loc 1 12278 0
	movl	fde_table_in_use(%rip), %eax	# fde_table_in_use, fde_table_in_use.706
	testl	%eax, %eax	# fde_table_in_use.706
	je	.L2388	#,
	.loc 1 12280 0
	movl	$1024, %esi	#,
	movl	$.LC525, %edi	#,
	call	named_section_flags	#
	.loc 1 12281 0
	call	output_aranges	#
.L2388:
	.loc 1 12285 0
	movl	ranges_table_in_use(%rip), %eax	# ranges_table_in_use, ranges_table_in_use.707
	testl	%eax, %eax	# ranges_table_in_use.707
	je	.L2389	#,
	.loc 1 12287 0
	movl	$1024, %esi	#,
	movl	$.LC526, %edi	#,
	call	named_section_flags	#
	.loc 1 12288 0
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.708
	movl	$ranges_section_label, %esi	#,
	movq	%rax, %rdi	# asm_out_file.708,
	call	assemble_name	#
	movq	asm_out_file(%rip), %rax	# asm_out_file, asm_out_file.709
	movq	%rax, %rcx	# asm_out_file.709,
	movl	$2, %edx	#,
	movl	$1, %esi	#,
	movl	$.LC31, %edi	#,
	call	fwrite	#
	.loc 1 12289 0
	call	output_ranges	#
.L2389:
	.loc 1 12293 0
	movl	debug_info_level(%rip), %eax	# debug_info_level, debug_info_level.710
	cmpl	$2, %eax	#, debug_info_level.710
	jbe	.L2390	#,
	.loc 1 12295 0
	movl	$1024, %esi	#,
	movl	$.LC500, %edi	#,
	call	named_section_flags	#
	.loc 1 12296 0
	movl	$.LC504, %edx	#,
	movl	$4, %esi	#,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	dw2_asm_output_data	#
.L2390:
	.loc 1 12301 0
	movq	debug_str_hash(%rip), %rax	# debug_str_hash, debug_str_hash.711
	testq	%rax, %rax	# debug_str_hash.711
	je	.L2364	#,
	.loc 1 12302 0
	movq	debug_str_hash(%rip), %rax	# debug_str_hash, debug_str_hash.712
	movl	$0, %edx	#,
	movl	$output_indirect_string, %esi	#,
	movq	%rax, %rdi	# debug_str_hash.712,
	call	ht_forall	#
.L2364:
	.loc 1 12303 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE250:
	.size	dwarf2out_finish, .-dwarf2out_finish
	.local	label_num.13911
	.comm	label_num.13911,8,8
	.local	label.13910
	.comm	label.13910,20,16
	.section	.rodata
	.align 16
	.type	__FUNCTION__.13995, @object
	.size	__FUNCTION__.13995, 20
__FUNCTION__.13995:
	.string	"initial_return_save"
	.align 16
	.type	__FUNCTION__.14010, @object
	.size	__FUNCTION__.14010, 20
__FUNCTION__.14010:
	.string	"stack_adjust_offset"
	.align 16
	.type	__FUNCTION__.14017, @object
	.size	__FUNCTION__.14017, 23
__FUNCTION__.14017:
	.string	"dwarf2out_stack_adjust"
	.align 16
	.type	__FUNCTION__.14060, @object
	.size	__FUNCTION__.14060, 27
__FUNCTION__.14060:
	.string	"dwarf2out_frame_debug_expr"
	.align 16
	.type	__FUNCTION__.14094, @object
	.size	__FUNCTION__.14094, 22
__FUNCTION__.14094:
	.string	"dwarf2out_frame_debug"
	.type	__FUNCTION__.14122, @object
	.size	__FUNCTION__.14122, 11
__FUNCTION__.14122:
	.string	"output_cfi"
	.align 16
	.type	__FUNCTION__.14146, @object
	.size	__FUNCTION__.14146, 23
__FUNCTION__.14146:
	.string	"output_call_frame_info"
	.align 16
	.type	__FUNCTION__.14497, @object
	.size	__FUNCTION__.14497, 20
__FUNCTION__.14497:
	.string	"output_loc_operands"
	.type	__FUNCTION__.14562, @object
	.size	__FUNCTION__.14562, 14
__FUNCTION__.14562:
	.string	"build_cfa_loc"
	.type	__FUNCTION__.15543, @object
	.size	__FUNCTION__.15543, 15
__FUNCTION__.15543:
	.string	"AT_string_form"
	.align 16
	.type	__FUNCTION__.15721, @object
	.size	__FUNCTION__.15721, 17
__FUNCTION__.15721:
	.string	"splice_child_die"
	.type	__FUNCTION__.15553, @object
	.size	__FUNCTION__.15553, 7
__FUNCTION__.15553:
	.string	"AT_ref"
	.type	__FUNCTION__.15587, @object
	.size	__FUNCTION__.15587, 12
__FUNCTION__.15587:
	.string	"AT_loc_list"
	.type	__FUNCTION__.15499, @object
	.size	__FUNCTION__.15499, 7
__FUNCTION__.15499:
	.string	"AT_int"
	.type	__FUNCTION__.15509, @object
	.size	__FUNCTION__.15509, 12
__FUNCTION__.15509:
	.string	"AT_unsigned"
	.type	__FUNCTION__.15489, @object
	.size	__FUNCTION__.15489, 8
__FUNCTION__.15489:
	.string	"AT_flag"
	.type	__FUNCTION__.15625, @object
	.size	__FUNCTION__.15625, 7
__FUNCTION__.15625:
	.string	"AT_lbl"
	.type	__FUNCTION__.15534, @object
	.size	__FUNCTION__.15534, 10
__FUNCTION__.15534:
	.string	"AT_string"
	.type	__FUNCTION__.15847, @object
	.size	__FUNCTION__.15847, 14
__FUNCTION__.15847:
	.string	"attr_checksum"
	.type	__FUNCTION__.15597, @object
	.size	__FUNCTION__.15597, 8
__FUNCTION__.15597:
	.string	"AT_addr"
	.type	__FUNCTION__.15577, @object
	.size	__FUNCTION__.15577, 7
__FUNCTION__.15577:
	.string	"AT_loc"
	.local	label_num.15916
	.comm	label_num.15916,4,4
	.type	__FUNCTION__.15714, @object
	.size	__FUNCTION__.15714, 14
__FUNCTION__.15714:
	.string	"add_child_die"
	.align 16
	.type	__FUNCTION__.15964, @object
	.size	__FUNCTION__.15964, 19
__FUNCTION__.15964:
	.string	"build_abbrev_table"
	.align 16
	.type	__FUNCTION__.15561, @object
	.size	__FUNCTION__.15561, 20
__FUNCTION__.15561:
	.string	"set_AT_ref_external"
	.type	__FUNCTION__.16005, @object
	.size	__FUNCTION__.16005, 12
__FUNCTION__.16005:
	.string	"size_of_die"
	.type	__FUNCTION__.16047, @object
	.size	__FUNCTION__.16047, 13
__FUNCTION__.16047:
	.string	"value_format"
	.align 16
	.type	__FUNCTION__.16112, @object
	.size	__FUNCTION__.16112, 16
__FUNCTION__.16112:
	.string	"output_loc_list"
	.type	__FUNCTION__.16142, @object
	.size	__FUNCTION__.16142, 11
__FUNCTION__.16142:
	.string	"output_die"
	.align 16
	.type	__FUNCTION__.16178, @object
	.size	__FUNCTION__.16178, 16
__FUNCTION__.16178:
	.string	"output_pubnames"
	.type	__FUNCTION__.16194, @object
	.size	__FUNCTION__.16194, 15
__FUNCTION__.16194:
	.string	"output_aranges"
	.align 8
	.type	start_fmt.16207, @object
	.size	start_fmt.16207, 8
start_fmt.16207:
	.quad	.LC455
	.type	__FUNCTION__.16336, @object
	.size	__FUNCTION__.16336, 14
__FUNCTION__.16336:
	.string	"base_type_die"
	.align 16
	.type	__FUNCTION__.16383, @object
	.size	__FUNCTION__.16383, 18
__FUNCTION__.16383:
	.string	"modified_type_die"
	.type	__FUNCTION__.16369, @object
	.size	__FUNCTION__.16369, 13
__FUNCTION__.16369:
	.string	"is_base_type"
	.type	__FUNCTION__.16391, @object
	.size	__FUNCTION__.16391, 11
__FUNCTION__.16391:
	.string	"reg_number"
	.align 16
	.type	__FUNCTION__.16438, @object
	.size	__FUNCTION__.16438, 19
__FUNCTION__.16438:
	.string	"mem_loc_descriptor"
	.type	__FUNCTION__.16456, @object
	.size	__FUNCTION__.16456, 15
__FUNCTION__.16456:
	.string	"loc_descriptor"
	.align 16
	.type	__FUNCTION__.16533, @object
	.size	__FUNCTION__.16533, 25
__FUNCTION__.16533:
	.string	"loc_descriptor_from_tree"
	.align 16
	.type	__FUNCTION__.16565, @object
	.size	__FUNCTION__.16565, 18
__FUNCTION__.16565:
	.string	"field_byte_offset"
	.align 32
	.type	__FUNCTION__.16579, @object
	.size	__FUNCTION__.16579, 35
__FUNCTION__.16579:
	.string	"add_data_member_location_attribute"
	.align 16
	.type	__FUNCTION__.16587, @object
	.size	__FUNCTION__.16587, 26
__FUNCTION__.16587:
	.string	"add_const_value_attribute"
	.align 16
	.type	__FUNCTION__.16619, @object
	.size	__FUNCTION__.16619, 22
__FUNCTION__.16619:
	.string	"rtl_for_decl_location"
	.align 32
	.type	__FUNCTION__.16625, @object
	.size	__FUNCTION__.16625, 38
__FUNCTION__.16625:
	.string	"add_location_or_const_value_attribute"
	.align 16
	.type	__FUNCTION__.16702, @object
	.size	__FUNCTION__.16702, 24
__FUNCTION__.16702:
	.string	"add_byte_size_attribute"
	.type	__FUNCTION__.16757, @object
	.size	__FUNCTION__.16757, 14
__FUNCTION__.16757:
	.string	"scope_die_for"
	.align 16
	.type	__FUNCTION__.16729, @object
	.size	__FUNCTION__.16729, 30
__FUNCTION__.16729:
	.string	"add_abstract_origin_attribute"
	.align 16
	.type	__FUNCTION__.16843, @object
	.size	__FUNCTION__.16843, 25
__FUNCTION__.16843:
	.string	"gen_formal_parameter_die"
	.align 16
	.type	__FUNCTION__.16868, @object
	.size	__FUNCTION__.16868, 24
__FUNCTION__.16868:
	.string	"gen_type_die_for_member"
	.type	__FUNCTION__.16749, @object
	.size	__FUNCTION__.16749, 15
__FUNCTION__.16749:
	.string	"pop_decl_scope"
	.align 16
	.type	__FUNCTION__.16888, @object
	.size	__FUNCTION__.16888, 19
__FUNCTION__.16888:
	.string	"gen_subprogram_die"
	.type	__FUNCTION__.16912, @object
	.size	__FUNCTION__.16912, 14
__FUNCTION__.16912:
	.string	"gen_label_die"
	.align 16
	.type	__FUNCTION__.16718, @object
	.size	__FUNCTION__.16718, 23
__FUNCTION__.16718:
	.string	"add_bit_size_attribute"
	.align 16
	.type	__FUNCTION__.16713, @object
	.size	__FUNCTION__.16713, 25
__FUNCTION__.16713:
	.string	"add_bit_offset_attribute"
	.align 16
	.type	__FUNCTION__.17001, @object
	.size	__FUNCTION__.17001, 16
__FUNCTION__.17001:
	.string	"gen_typedef_die"
	.type	__FUNCTION__.17014, @object
	.size	__FUNCTION__.17014, 13
__FUNCTION__.17014:
	.string	"gen_type_die"
	.align 32
	.type	__FUNCTION__.17035, @object
	.size	__FUNCTION__.17035, 34
__FUNCTION__.17035:
	.string	"gen_tagged_type_instantiation_die"
	.type	__FUNCTION__.17092, @object
	.size	__FUNCTION__.17092, 13
__FUNCTION__.17092:
	.string	"gen_decl_die"
	.align 16
	.type	__FUNCTION__.17189, @object
	.size	__FUNCTION__.17189, 17
__FUNCTION__.17189:
	.string	"dwarf2out_finish"
	.text
.Letext0:
	.file 2 "rtl.h"
	.file 3 "config.h"
	.file 4 "tree.h"
	.file 5 "i386.h"
	.file 6 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h"
	.file 7 "<built-in>"
	.file 8 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
	.file 9 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 10 "/usr/include/stdio.h"
	.file 11 "/usr/include/libio.h"
	.file 12 "machmode.h"
	.file 13 "real.h"
	.file 14 "obstack.h"
	.file 15 "hashtable.h"
	.file 16 "function.h"
	.file 17 "flags.h"
	.file 18 "varray.h"
	.file 19 "regs.h"
	.file 20 "expr.h"
	.file 21 "libfuncs.h"
	.file 22 "dwarf2.h"
	.file 23 "md5.h"
	.file 24 "diagnostic.h"
	.file 25 "debug.h"
	.file 26 "target.h"
	.file 27 "langhooks.h"
	.file 28 "version.h"
	.file 29 "output.h"
	.file 30 "ggc.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0xb526
	.value	0x4
	.long	.Ldebug_abbrev0
	.byte	0x8
	.uleb128 0x1
	.long	.LASF2395
	.byte	0x1
	.long	.LASF2396
	.long	.LASF2397
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.string	"rtx"
	.byte	0x3
	.byte	0x8
	.long	0x38
	.uleb128 0x3
	.byte	0x8
	.long	0x3e
	.uleb128 0x4
	.long	.LASF11
	.byte	0x10
	.byte	0x2
	.byte	0x7a
	.long	0xed
	.uleb128 0x5
	.long	.LASF0
	.byte	0x2
	.byte	0x7d
	.long	0x368
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0
	.uleb128 0x5
	.long	.LASF1
	.byte	0x2
	.byte	0x80
	.long	0x368
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.uleb128 0x5
	.long	.LASF2
	.byte	0x2
	.byte	0x87
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0
	.uleb128 0x5
	.long	.LASF3
	.byte	0x2
	.byte	0x8a
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0
	.uleb128 0x5
	.long	.LASF4
	.byte	0x2
	.byte	0x95
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0
	.uleb128 0x5
	.long	.LASF5
	.byte	0x2
	.byte	0x9d
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0
	.uleb128 0x5
	.long	.LASF6
	.byte	0x2
	.byte	0xaf
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0
	.uleb128 0x5
	.long	.LASF7
	.byte	0x2
	.byte	0xb6
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0
	.uleb128 0x5
	.long	.LASF8
	.byte	0x2
	.byte	0xbb
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0
	.uleb128 0x5
	.long	.LASF9
	.byte	0x2
	.byte	0xc4
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0
	.uleb128 0x6
	.string	"fld"
	.byte	0x2
	.byte	0xc9
	.long	0x286f
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF10
	.byte	0x3
	.byte	0xa
	.long	0xf8
	.uleb128 0x3
	.byte	0x8
	.long	0xfe
	.uleb128 0x4
	.long	.LASF12
	.byte	0x10
	.byte	0x2
	.byte	0xde
	.long	0x123
	.uleb128 0x8
	.long	.LASF13
	.byte	0x2
	.byte	0xdf
	.long	0x1e3
	.byte	0
	.uleb128 0x8
	.long	.LASF14
	.byte	0x2
	.byte	0xe0
	.long	0x287f
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF15
	.byte	0x3
	.byte	0xc
	.long	0x12e
	.uleb128 0x3
	.byte	0x8
	.long	0x134
	.uleb128 0x9
	.long	.LASF471
	.byte	0xd0
	.byte	0x4
	.value	0x744
	.long	0x1de
	.uleb128 0xa
	.long	.LASF16
	.byte	0x4
	.value	0x746
	.long	0xe49
	.uleb128 0xa
	.long	.LASF17
	.byte	0x4
	.value	0x747
	.long	0x1009
	.uleb128 0xa
	.long	.LASF18
	.byte	0x4
	.value	0x748
	.long	0x108e
	.uleb128 0xa
	.long	.LASF19
	.byte	0x4
	.value	0x749
	.long	0x1147
	.uleb128 0xa
	.long	.LASF20
	.byte	0x4
	.value	0x74a
	.long	0x10c3
	.uleb128 0xa
	.long	.LASF21
	.byte	0x4
	.value	0x74b
	.long	0x1105
	.uleb128 0xa
	.long	.LASF22
	.byte	0x4
	.value	0x74c
	.long	0x1398
	.uleb128 0xa
	.long	.LASF23
	.byte	0x4
	.value	0x74d
	.long	0x1c51
	.uleb128 0xa
	.long	.LASF24
	.byte	0x4
	.value	0x74e
	.long	0x1527
	.uleb128 0xa
	.long	.LASF25
	.byte	0x4
	.value	0x74f
	.long	0x13bf
	.uleb128 0xb
	.string	"vec"
	.byte	0x4
	.value	0x750
	.long	0x13f4
	.uleb128 0xb
	.string	"exp"
	.byte	0x4
	.value	0x751
	.long	0x1437
	.uleb128 0xa
	.long	.LASF26
	.byte	0x4
	.value	0x752
	.long	0x146c
	.byte	0
	.uleb128 0xc
	.long	0x1e3
	.uleb128 0xd
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0xe
	.byte	0x8
	.byte	0x7
	.long	.LASF27
	.uleb128 0xf
	.long	.LASF118
	.byte	0x4
	.byte	0x5
	.value	0x4b2
	.long	0x29b
	.uleb128 0x10
	.long	.LASF28
	.sleb128 0
	.uleb128 0x10
	.long	.LASF29
	.sleb128 1
	.uleb128 0x10
	.long	.LASF30
	.sleb128 2
	.uleb128 0x10
	.long	.LASF31
	.sleb128 3
	.uleb128 0x10
	.long	.LASF32
	.sleb128 4
	.uleb128 0x10
	.long	.LASF33
	.sleb128 5
	.uleb128 0x10
	.long	.LASF34
	.sleb128 6
	.uleb128 0x10
	.long	.LASF35
	.sleb128 7
	.uleb128 0x10
	.long	.LASF36
	.sleb128 8
	.uleb128 0x10
	.long	.LASF37
	.sleb128 9
	.uleb128 0x10
	.long	.LASF38
	.sleb128 10
	.uleb128 0x10
	.long	.LASF39
	.sleb128 11
	.uleb128 0x10
	.long	.LASF40
	.sleb128 12
	.uleb128 0x10
	.long	.LASF41
	.sleb128 13
	.uleb128 0x10
	.long	.LASF42
	.sleb128 14
	.uleb128 0x10
	.long	.LASF43
	.sleb128 15
	.uleb128 0x10
	.long	.LASF44
	.sleb128 16
	.uleb128 0x10
	.long	.LASF45
	.sleb128 17
	.uleb128 0x10
	.long	.LASF46
	.sleb128 18
	.uleb128 0x10
	.long	.LASF47
	.sleb128 19
	.uleb128 0x10
	.long	.LASF48
	.sleb128 20
	.uleb128 0x10
	.long	.LASF49
	.sleb128 21
	.uleb128 0x10
	.long	.LASF50
	.sleb128 22
	.uleb128 0x10
	.long	.LASF51
	.sleb128 23
	.uleb128 0x10
	.long	.LASF52
	.sleb128 24
	.uleb128 0x10
	.long	.LASF53
	.sleb128 25
	.byte	0
	.uleb128 0x11
	.long	.LASF54
	.byte	0x1c
	.byte	0x5
	.value	0x683
	.long	0x304
	.uleb128 0x12
	.long	.LASF55
	.byte	0x5
	.value	0x684
	.long	0x1e3
	.byte	0
	.uleb128 0x12
	.long	.LASF56
	.byte	0x5
	.value	0x685
	.long	0x1e3
	.byte	0x4
	.uleb128 0x12
	.long	.LASF57
	.byte	0x5
	.value	0x686
	.long	0x1e3
	.byte	0x8
	.uleb128 0x12
	.long	.LASF58
	.byte	0x5
	.value	0x687
	.long	0x1e3
	.byte	0xc
	.uleb128 0x12
	.long	.LASF59
	.byte	0x5
	.value	0x688
	.long	0x1e3
	.byte	0x10
	.uleb128 0x12
	.long	.LASF60
	.byte	0x5
	.value	0x689
	.long	0x1e3
	.byte	0x14
	.uleb128 0x12
	.long	.LASF61
	.byte	0x5
	.value	0x68a
	.long	0x1e3
	.byte	0x18
	.byte	0
	.uleb128 0x13
	.long	.LASF62
	.byte	0x5
	.value	0x68b
	.long	0x29b
	.uleb128 0x7
	.long	.LASF63
	.byte	0x6
	.byte	0x28
	.long	0x31b
	.uleb128 0x14
	.long	0x32b
	.long	0x32b
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x4
	.long	.LASF64
	.byte	0x18
	.byte	0x7
	.byte	0
	.long	0x368
	.uleb128 0x8
	.long	.LASF65
	.byte	0x7
	.byte	0
	.long	0x368
	.byte	0
	.uleb128 0x8
	.long	.LASF66
	.byte	0x7
	.byte	0
	.long	0x368
	.byte	0x4
	.uleb128 0x8
	.long	.LASF67
	.byte	0x7
	.byte	0
	.long	0x36f
	.byte	0x8
	.uleb128 0x8
	.long	.LASF68
	.byte	0x7
	.byte	0
	.long	0x36f
	.byte	0x10
	.byte	0
	.uleb128 0xe
	.byte	0x4
	.byte	0x7
	.long	.LASF69
	.uleb128 0x16
	.byte	0x8
	.uleb128 0x7
	.long	.LASF70
	.byte	0x6
	.byte	0x62
	.long	0x310
	.uleb128 0xe
	.byte	0x8
	.byte	0x5
	.long	.LASF71
	.uleb128 0x7
	.long	.LASF72
	.byte	0x8
	.byte	0xd4
	.long	0x38e
	.uleb128 0xe
	.byte	0x8
	.byte	0x7
	.long	.LASF73
	.uleb128 0xe
	.byte	0x1
	.byte	0x8
	.long	.LASF74
	.uleb128 0xe
	.byte	0x2
	.byte	0x7
	.long	.LASF75
	.uleb128 0xe
	.byte	0x1
	.byte	0x6
	.long	.LASF76
	.uleb128 0xe
	.byte	0x2
	.byte	0x5
	.long	.LASF77
	.uleb128 0x7
	.long	.LASF78
	.byte	0x9
	.byte	0x8c
	.long	0x37c
	.uleb128 0x7
	.long	.LASF79
	.byte	0x9
	.byte	0x8d
	.long	0x37c
	.uleb128 0x3
	.byte	0x8
	.long	0x3cd
	.uleb128 0xe
	.byte	0x1
	.byte	0x6
	.long	.LASF80
	.uleb128 0x7
	.long	.LASF81
	.byte	0xa
	.byte	0x30
	.long	0x3df
	.uleb128 0x4
	.long	.LASF82
	.byte	0xd8
	.byte	0xb
	.byte	0xf6
	.long	0x560
	.uleb128 0x8
	.long	.LASF83
	.byte	0xb
	.byte	0xf7
	.long	0x1e3
	.byte	0
	.uleb128 0x8
	.long	.LASF84
	.byte	0xb
	.byte	0xfc
	.long	0x3c7
	.byte	0x8
	.uleb128 0x8
	.long	.LASF85
	.byte	0xb
	.byte	0xfd
	.long	0x3c7
	.byte	0x10
	.uleb128 0x8
	.long	.LASF86
	.byte	0xb
	.byte	0xfe
	.long	0x3c7
	.byte	0x18
	.uleb128 0x8
	.long	.LASF87
	.byte	0xb
	.byte	0xff
	.long	0x3c7
	.byte	0x20
	.uleb128 0x12
	.long	.LASF88
	.byte	0xb
	.value	0x100
	.long	0x3c7
	.byte	0x28
	.uleb128 0x12
	.long	.LASF89
	.byte	0xb
	.value	0x101
	.long	0x3c7
	.byte	0x30
	.uleb128 0x12
	.long	.LASF90
	.byte	0xb
	.value	0x102
	.long	0x3c7
	.byte	0x38
	.uleb128 0x12
	.long	.LASF91
	.byte	0xb
	.value	0x103
	.long	0x3c7
	.byte	0x40
	.uleb128 0x12
	.long	.LASF92
	.byte	0xb
	.value	0x105
	.long	0x3c7
	.byte	0x48
	.uleb128 0x12
	.long	.LASF93
	.byte	0xb
	.value	0x106
	.long	0x3c7
	.byte	0x50
	.uleb128 0x12
	.long	.LASF94
	.byte	0xb
	.value	0x107
	.long	0x3c7
	.byte	0x58
	.uleb128 0x12
	.long	.LASF95
	.byte	0xb
	.value	0x109
	.long	0x5a8
	.byte	0x60
	.uleb128 0x12
	.long	.LASF96
	.byte	0xb
	.value	0x10b
	.long	0x5ae
	.byte	0x68
	.uleb128 0x12
	.long	.LASF97
	.byte	0xb
	.value	0x10d
	.long	0x1e3
	.byte	0x70
	.uleb128 0x12
	.long	.LASF98
	.byte	0xb
	.value	0x111
	.long	0x1e3
	.byte	0x74
	.uleb128 0x12
	.long	.LASF99
	.byte	0xb
	.value	0x113
	.long	0x3b1
	.byte	0x78
	.uleb128 0x12
	.long	.LASF100
	.byte	0xb
	.value	0x117
	.long	0x39c
	.byte	0x80
	.uleb128 0x12
	.long	.LASF101
	.byte	0xb
	.value	0x118
	.long	0x3a3
	.byte	0x82
	.uleb128 0x12
	.long	.LASF102
	.byte	0xb
	.value	0x119
	.long	0x5b4
	.byte	0x83
	.uleb128 0x12
	.long	.LASF103
	.byte	0xb
	.value	0x11d
	.long	0x5c4
	.byte	0x88
	.uleb128 0x12
	.long	.LASF104
	.byte	0xb
	.value	0x126
	.long	0x3bc
	.byte	0x90
	.uleb128 0x12
	.long	.LASF105
	.byte	0xb
	.value	0x12f
	.long	0x36f
	.byte	0x98
	.uleb128 0x12
	.long	.LASF106
	.byte	0xb
	.value	0x130
	.long	0x36f
	.byte	0xa0
	.uleb128 0x12
	.long	.LASF107
	.byte	0xb
	.value	0x131
	.long	0x36f
	.byte	0xa8
	.uleb128 0x12
	.long	.LASF108
	.byte	0xb
	.value	0x132
	.long	0x36f
	.byte	0xb0
	.uleb128 0x12
	.long	.LASF109
	.byte	0xb
	.value	0x133
	.long	0x383
	.byte	0xb8
	.uleb128 0x12
	.long	.LASF110
	.byte	0xb
	.value	0x135
	.long	0x1e3
	.byte	0xc0
	.uleb128 0x12
	.long	.LASF111
	.byte	0xb
	.value	0x137
	.long	0x5ca
	.byte	0xc4
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x570
	.uleb128 0x15
	.long	0x1ea
	.byte	0x3
	.byte	0
	.uleb128 0x17
	.long	.LASF2398
	.byte	0xb
	.byte	0x9b
	.uleb128 0x4
	.long	.LASF112
	.byte	0x18
	.byte	0xb
	.byte	0xa1
	.long	0x5a8
	.uleb128 0x8
	.long	.LASF113
	.byte	0xb
	.byte	0xa2
	.long	0x5a8
	.byte	0
	.uleb128 0x8
	.long	.LASF114
	.byte	0xb
	.byte	0xa3
	.long	0x5ae
	.byte	0x8
	.uleb128 0x8
	.long	.LASF115
	.byte	0xb
	.byte	0xa7
	.long	0x1e3
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x577
	.uleb128 0x3
	.byte	0x8
	.long	0x3df
	.uleb128 0x14
	.long	0x3cd
	.long	0x5c4
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x570
	.uleb128 0x14
	.long	0x3cd
	.long	0x5da
	.uleb128 0x15
	.long	0x1ea
	.byte	0x13
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x5e0
	.uleb128 0xc
	.long	0x3cd
	.uleb128 0xe
	.byte	0x8
	.byte	0x7
	.long	.LASF116
	.uleb128 0xe
	.byte	0x8
	.byte	0x5
	.long	.LASF117
	.uleb128 0x14
	.long	0x3cd
	.long	0x603
	.uleb128 0x15
	.long	0x1ea
	.byte	0x7
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x613
	.uleb128 0x15
	.long	0x1ea
	.byte	0x1f
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1e3
	.uleb128 0x3
	.byte	0x8
	.long	0x61f
	.uleb128 0x18
	.uleb128 0x19
	.long	.LASF119
	.byte	0x4
	.byte	0xc
	.byte	0x1d
	.long	0x795
	.uleb128 0x10
	.long	.LASF120
	.sleb128 0
	.uleb128 0x10
	.long	.LASF121
	.sleb128 1
	.uleb128 0x10
	.long	.LASF122
	.sleb128 2
	.uleb128 0x10
	.long	.LASF123
	.sleb128 3
	.uleb128 0x10
	.long	.LASF124
	.sleb128 4
	.uleb128 0x10
	.long	.LASF125
	.sleb128 5
	.uleb128 0x10
	.long	.LASF126
	.sleb128 6
	.uleb128 0x10
	.long	.LASF127
	.sleb128 7
	.uleb128 0x10
	.long	.LASF128
	.sleb128 8
	.uleb128 0x10
	.long	.LASF129
	.sleb128 9
	.uleb128 0x10
	.long	.LASF130
	.sleb128 10
	.uleb128 0x10
	.long	.LASF131
	.sleb128 11
	.uleb128 0x10
	.long	.LASF132
	.sleb128 12
	.uleb128 0x10
	.long	.LASF133
	.sleb128 13
	.uleb128 0x10
	.long	.LASF134
	.sleb128 14
	.uleb128 0x10
	.long	.LASF135
	.sleb128 15
	.uleb128 0x10
	.long	.LASF136
	.sleb128 16
	.uleb128 0x10
	.long	.LASF137
	.sleb128 17
	.uleb128 0x10
	.long	.LASF138
	.sleb128 18
	.uleb128 0x10
	.long	.LASF139
	.sleb128 19
	.uleb128 0x10
	.long	.LASF140
	.sleb128 20
	.uleb128 0x10
	.long	.LASF141
	.sleb128 21
	.uleb128 0x10
	.long	.LASF142
	.sleb128 22
	.uleb128 0x10
	.long	.LASF143
	.sleb128 23
	.uleb128 0x10
	.long	.LASF144
	.sleb128 24
	.uleb128 0x10
	.long	.LASF145
	.sleb128 25
	.uleb128 0x10
	.long	.LASF146
	.sleb128 26
	.uleb128 0x10
	.long	.LASF147
	.sleb128 27
	.uleb128 0x10
	.long	.LASF148
	.sleb128 28
	.uleb128 0x10
	.long	.LASF149
	.sleb128 29
	.uleb128 0x10
	.long	.LASF150
	.sleb128 30
	.uleb128 0x10
	.long	.LASF151
	.sleb128 31
	.uleb128 0x10
	.long	.LASF152
	.sleb128 32
	.uleb128 0x10
	.long	.LASF153
	.sleb128 33
	.uleb128 0x10
	.long	.LASF154
	.sleb128 34
	.uleb128 0x10
	.long	.LASF155
	.sleb128 35
	.uleb128 0x10
	.long	.LASF156
	.sleb128 36
	.uleb128 0x10
	.long	.LASF157
	.sleb128 37
	.uleb128 0x10
	.long	.LASF158
	.sleb128 38
	.uleb128 0x10
	.long	.LASF159
	.sleb128 39
	.uleb128 0x10
	.long	.LASF160
	.sleb128 40
	.uleb128 0x10
	.long	.LASF161
	.sleb128 41
	.uleb128 0x10
	.long	.LASF162
	.sleb128 42
	.uleb128 0x10
	.long	.LASF163
	.sleb128 43
	.uleb128 0x10
	.long	.LASF164
	.sleb128 44
	.uleb128 0x10
	.long	.LASF165
	.sleb128 45
	.uleb128 0x10
	.long	.LASF166
	.sleb128 46
	.uleb128 0x10
	.long	.LASF167
	.sleb128 47
	.uleb128 0x10
	.long	.LASF168
	.sleb128 48
	.uleb128 0x10
	.long	.LASF169
	.sleb128 49
	.uleb128 0x10
	.long	.LASF170
	.sleb128 50
	.uleb128 0x10
	.long	.LASF171
	.sleb128 51
	.uleb128 0x10
	.long	.LASF172
	.sleb128 52
	.uleb128 0x10
	.long	.LASF173
	.sleb128 53
	.uleb128 0x10
	.long	.LASF174
	.sleb128 54
	.uleb128 0x10
	.long	.LASF175
	.sleb128 55
	.uleb128 0x10
	.long	.LASF176
	.sleb128 56
	.uleb128 0x10
	.long	.LASF177
	.sleb128 57
	.uleb128 0x10
	.long	.LASF178
	.sleb128 58
	.uleb128 0x10
	.long	.LASF179
	.sleb128 59
	.byte	0
	.uleb128 0x19
	.long	.LASF180
	.byte	0x4
	.byte	0xc
	.byte	0x2c
	.long	0x7de
	.uleb128 0x10
	.long	.LASF181
	.sleb128 0
	.uleb128 0x10
	.long	.LASF182
	.sleb128 1
	.uleb128 0x10
	.long	.LASF183
	.sleb128 2
	.uleb128 0x10
	.long	.LASF184
	.sleb128 3
	.uleb128 0x10
	.long	.LASF185
	.sleb128 4
	.uleb128 0x10
	.long	.LASF186
	.sleb128 5
	.uleb128 0x10
	.long	.LASF187
	.sleb128 6
	.uleb128 0x10
	.long	.LASF188
	.sleb128 7
	.uleb128 0x10
	.long	.LASF189
	.sleb128 8
	.uleb128 0x10
	.long	.LASF190
	.sleb128 9
	.byte	0
	.uleb128 0x19
	.long	.LASF191
	.byte	0x4
	.byte	0x4
	.byte	0x1d
	.long	0xbb7
	.uleb128 0x10
	.long	.LASF192
	.sleb128 0
	.uleb128 0x10
	.long	.LASF193
	.sleb128 1
	.uleb128 0x10
	.long	.LASF194
	.sleb128 2
	.uleb128 0x10
	.long	.LASF195
	.sleb128 3
	.uleb128 0x10
	.long	.LASF196
	.sleb128 4
	.uleb128 0x10
	.long	.LASF197
	.sleb128 5
	.uleb128 0x10
	.long	.LASF198
	.sleb128 6
	.uleb128 0x10
	.long	.LASF199
	.sleb128 7
	.uleb128 0x10
	.long	.LASF200
	.sleb128 8
	.uleb128 0x10
	.long	.LASF201
	.sleb128 9
	.uleb128 0x10
	.long	.LASF202
	.sleb128 10
	.uleb128 0x10
	.long	.LASF203
	.sleb128 11
	.uleb128 0x10
	.long	.LASF204
	.sleb128 12
	.uleb128 0x10
	.long	.LASF205
	.sleb128 13
	.uleb128 0x10
	.long	.LASF206
	.sleb128 14
	.uleb128 0x10
	.long	.LASF207
	.sleb128 15
	.uleb128 0x10
	.long	.LASF208
	.sleb128 16
	.uleb128 0x10
	.long	.LASF209
	.sleb128 17
	.uleb128 0x10
	.long	.LASF210
	.sleb128 18
	.uleb128 0x10
	.long	.LASF211
	.sleb128 19
	.uleb128 0x10
	.long	.LASF212
	.sleb128 20
	.uleb128 0x10
	.long	.LASF213
	.sleb128 21
	.uleb128 0x10
	.long	.LASF214
	.sleb128 22
	.uleb128 0x10
	.long	.LASF215
	.sleb128 23
	.uleb128 0x10
	.long	.LASF216
	.sleb128 24
	.uleb128 0x10
	.long	.LASF217
	.sleb128 25
	.uleb128 0x10
	.long	.LASF218
	.sleb128 26
	.uleb128 0x10
	.long	.LASF219
	.sleb128 27
	.uleb128 0x10
	.long	.LASF220
	.sleb128 28
	.uleb128 0x10
	.long	.LASF221
	.sleb128 29
	.uleb128 0x10
	.long	.LASF222
	.sleb128 30
	.uleb128 0x10
	.long	.LASF223
	.sleb128 31
	.uleb128 0x10
	.long	.LASF224
	.sleb128 32
	.uleb128 0x10
	.long	.LASF225
	.sleb128 33
	.uleb128 0x10
	.long	.LASF226
	.sleb128 34
	.uleb128 0x10
	.long	.LASF227
	.sleb128 35
	.uleb128 0x10
	.long	.LASF228
	.sleb128 36
	.uleb128 0x10
	.long	.LASF229
	.sleb128 37
	.uleb128 0x10
	.long	.LASF230
	.sleb128 38
	.uleb128 0x10
	.long	.LASF231
	.sleb128 39
	.uleb128 0x10
	.long	.LASF232
	.sleb128 40
	.uleb128 0x10
	.long	.LASF233
	.sleb128 41
	.uleb128 0x10
	.long	.LASF234
	.sleb128 42
	.uleb128 0x10
	.long	.LASF235
	.sleb128 43
	.uleb128 0x10
	.long	.LASF236
	.sleb128 44
	.uleb128 0x10
	.long	.LASF237
	.sleb128 45
	.uleb128 0x10
	.long	.LASF238
	.sleb128 46
	.uleb128 0x10
	.long	.LASF239
	.sleb128 47
	.uleb128 0x10
	.long	.LASF240
	.sleb128 48
	.uleb128 0x10
	.long	.LASF241
	.sleb128 49
	.uleb128 0x10
	.long	.LASF242
	.sleb128 50
	.uleb128 0x10
	.long	.LASF243
	.sleb128 51
	.uleb128 0x10
	.long	.LASF244
	.sleb128 52
	.uleb128 0x10
	.long	.LASF245
	.sleb128 53
	.uleb128 0x10
	.long	.LASF246
	.sleb128 54
	.uleb128 0x10
	.long	.LASF247
	.sleb128 55
	.uleb128 0x10
	.long	.LASF248
	.sleb128 56
	.uleb128 0x10
	.long	.LASF249
	.sleb128 57
	.uleb128 0x10
	.long	.LASF250
	.sleb128 58
	.uleb128 0x10
	.long	.LASF251
	.sleb128 59
	.uleb128 0x10
	.long	.LASF252
	.sleb128 60
	.uleb128 0x10
	.long	.LASF253
	.sleb128 61
	.uleb128 0x10
	.long	.LASF254
	.sleb128 62
	.uleb128 0x10
	.long	.LASF255
	.sleb128 63
	.uleb128 0x10
	.long	.LASF256
	.sleb128 64
	.uleb128 0x10
	.long	.LASF257
	.sleb128 65
	.uleb128 0x10
	.long	.LASF258
	.sleb128 66
	.uleb128 0x10
	.long	.LASF259
	.sleb128 67
	.uleb128 0x10
	.long	.LASF260
	.sleb128 68
	.uleb128 0x10
	.long	.LASF261
	.sleb128 69
	.uleb128 0x10
	.long	.LASF262
	.sleb128 70
	.uleb128 0x10
	.long	.LASF263
	.sleb128 71
	.uleb128 0x10
	.long	.LASF264
	.sleb128 72
	.uleb128 0x10
	.long	.LASF265
	.sleb128 73
	.uleb128 0x10
	.long	.LASF266
	.sleb128 74
	.uleb128 0x10
	.long	.LASF267
	.sleb128 75
	.uleb128 0x10
	.long	.LASF268
	.sleb128 76
	.uleb128 0x10
	.long	.LASF269
	.sleb128 77
	.uleb128 0x10
	.long	.LASF270
	.sleb128 78
	.uleb128 0x10
	.long	.LASF271
	.sleb128 79
	.uleb128 0x10
	.long	.LASF272
	.sleb128 80
	.uleb128 0x10
	.long	.LASF273
	.sleb128 81
	.uleb128 0x10
	.long	.LASF274
	.sleb128 82
	.uleb128 0x10
	.long	.LASF275
	.sleb128 83
	.uleb128 0x10
	.long	.LASF276
	.sleb128 84
	.uleb128 0x10
	.long	.LASF277
	.sleb128 85
	.uleb128 0x10
	.long	.LASF278
	.sleb128 86
	.uleb128 0x10
	.long	.LASF279
	.sleb128 87
	.uleb128 0x10
	.long	.LASF280
	.sleb128 88
	.uleb128 0x10
	.long	.LASF281
	.sleb128 89
	.uleb128 0x10
	.long	.LASF282
	.sleb128 90
	.uleb128 0x10
	.long	.LASF283
	.sleb128 91
	.uleb128 0x10
	.long	.LASF284
	.sleb128 92
	.uleb128 0x10
	.long	.LASF285
	.sleb128 93
	.uleb128 0x10
	.long	.LASF286
	.sleb128 94
	.uleb128 0x10
	.long	.LASF287
	.sleb128 95
	.uleb128 0x10
	.long	.LASF288
	.sleb128 96
	.uleb128 0x10
	.long	.LASF289
	.sleb128 97
	.uleb128 0x10
	.long	.LASF290
	.sleb128 98
	.uleb128 0x10
	.long	.LASF291
	.sleb128 99
	.uleb128 0x10
	.long	.LASF292
	.sleb128 100
	.uleb128 0x10
	.long	.LASF293
	.sleb128 101
	.uleb128 0x10
	.long	.LASF294
	.sleb128 102
	.uleb128 0x10
	.long	.LASF295
	.sleb128 103
	.uleb128 0x10
	.long	.LASF296
	.sleb128 104
	.uleb128 0x10
	.long	.LASF297
	.sleb128 105
	.uleb128 0x10
	.long	.LASF298
	.sleb128 106
	.uleb128 0x10
	.long	.LASF299
	.sleb128 107
	.uleb128 0x10
	.long	.LASF300
	.sleb128 108
	.uleb128 0x10
	.long	.LASF301
	.sleb128 109
	.uleb128 0x10
	.long	.LASF302
	.sleb128 110
	.uleb128 0x10
	.long	.LASF303
	.sleb128 111
	.uleb128 0x10
	.long	.LASF304
	.sleb128 112
	.uleb128 0x10
	.long	.LASF305
	.sleb128 113
	.uleb128 0x10
	.long	.LASF306
	.sleb128 114
	.uleb128 0x10
	.long	.LASF307
	.sleb128 115
	.uleb128 0x10
	.long	.LASF308
	.sleb128 116
	.uleb128 0x10
	.long	.LASF309
	.sleb128 117
	.uleb128 0x10
	.long	.LASF310
	.sleb128 118
	.uleb128 0x10
	.long	.LASF311
	.sleb128 119
	.uleb128 0x10
	.long	.LASF312
	.sleb128 120
	.uleb128 0x10
	.long	.LASF313
	.sleb128 121
	.uleb128 0x10
	.long	.LASF314
	.sleb128 122
	.uleb128 0x10
	.long	.LASF315
	.sleb128 123
	.uleb128 0x10
	.long	.LASF316
	.sleb128 124
	.uleb128 0x10
	.long	.LASF317
	.sleb128 125
	.uleb128 0x10
	.long	.LASF318
	.sleb128 126
	.uleb128 0x10
	.long	.LASF319
	.sleb128 127
	.uleb128 0x10
	.long	.LASF320
	.sleb128 128
	.uleb128 0x10
	.long	.LASF321
	.sleb128 129
	.uleb128 0x10
	.long	.LASF322
	.sleb128 130
	.uleb128 0x10
	.long	.LASF323
	.sleb128 131
	.uleb128 0x10
	.long	.LASF324
	.sleb128 132
	.uleb128 0x10
	.long	.LASF325
	.sleb128 133
	.uleb128 0x10
	.long	.LASF326
	.sleb128 134
	.uleb128 0x10
	.long	.LASF327
	.sleb128 135
	.uleb128 0x10
	.long	.LASF328
	.sleb128 136
	.uleb128 0x10
	.long	.LASF329
	.sleb128 137
	.uleb128 0x10
	.long	.LASF330
	.sleb128 138
	.uleb128 0x10
	.long	.LASF331
	.sleb128 139
	.uleb128 0x10
	.long	.LASF332
	.sleb128 140
	.uleb128 0x10
	.long	.LASF333
	.sleb128 141
	.uleb128 0x10
	.long	.LASF334
	.sleb128 142
	.uleb128 0x10
	.long	.LASF335
	.sleb128 143
	.uleb128 0x10
	.long	.LASF336
	.sleb128 144
	.uleb128 0x10
	.long	.LASF337
	.sleb128 145
	.uleb128 0x10
	.long	.LASF338
	.sleb128 146
	.uleb128 0x10
	.long	.LASF339
	.sleb128 147
	.byte	0
	.uleb128 0x19
	.long	.LASF340
	.byte	0x4
	.byte	0x4
	.byte	0x45
	.long	0xbdc
	.uleb128 0x10
	.long	.LASF341
	.sleb128 0
	.uleb128 0x10
	.long	.LASF342
	.sleb128 1
	.uleb128 0x10
	.long	.LASF343
	.sleb128 2
	.uleb128 0x10
	.long	.LASF344
	.sleb128 3
	.byte	0
	.uleb128 0x19
	.long	.LASF345
	.byte	0x4
	.byte	0x4
	.byte	0x54
	.long	0xe49
	.uleb128 0x10
	.long	.LASF346
	.sleb128 0
	.uleb128 0x10
	.long	.LASF347
	.sleb128 1
	.uleb128 0x10
	.long	.LASF348
	.sleb128 2
	.uleb128 0x10
	.long	.LASF349
	.sleb128 3
	.uleb128 0x10
	.long	.LASF350
	.sleb128 4
	.uleb128 0x10
	.long	.LASF351
	.sleb128 5
	.uleb128 0x10
	.long	.LASF352
	.sleb128 6
	.uleb128 0x10
	.long	.LASF353
	.sleb128 7
	.uleb128 0x10
	.long	.LASF354
	.sleb128 8
	.uleb128 0x10
	.long	.LASF355
	.sleb128 9
	.uleb128 0x10
	.long	.LASF356
	.sleb128 10
	.uleb128 0x10
	.long	.LASF357
	.sleb128 11
	.uleb128 0x10
	.long	.LASF358
	.sleb128 12
	.uleb128 0x10
	.long	.LASF359
	.sleb128 13
	.uleb128 0x10
	.long	.LASF360
	.sleb128 14
	.uleb128 0x10
	.long	.LASF361
	.sleb128 15
	.uleb128 0x10
	.long	.LASF362
	.sleb128 16
	.uleb128 0x10
	.long	.LASF363
	.sleb128 17
	.uleb128 0x10
	.long	.LASF364
	.sleb128 18
	.uleb128 0x10
	.long	.LASF365
	.sleb128 19
	.uleb128 0x10
	.long	.LASF366
	.sleb128 20
	.uleb128 0x10
	.long	.LASF367
	.sleb128 21
	.uleb128 0x10
	.long	.LASF368
	.sleb128 22
	.uleb128 0x10
	.long	.LASF369
	.sleb128 23
	.uleb128 0x10
	.long	.LASF370
	.sleb128 24
	.uleb128 0x10
	.long	.LASF371
	.sleb128 25
	.uleb128 0x10
	.long	.LASF372
	.sleb128 26
	.uleb128 0x10
	.long	.LASF373
	.sleb128 27
	.uleb128 0x10
	.long	.LASF374
	.sleb128 28
	.uleb128 0x10
	.long	.LASF375
	.sleb128 29
	.uleb128 0x10
	.long	.LASF376
	.sleb128 30
	.uleb128 0x10
	.long	.LASF377
	.sleb128 31
	.uleb128 0x10
	.long	.LASF378
	.sleb128 32
	.uleb128 0x10
	.long	.LASF379
	.sleb128 33
	.uleb128 0x10
	.long	.LASF380
	.sleb128 34
	.uleb128 0x10
	.long	.LASF381
	.sleb128 35
	.uleb128 0x10
	.long	.LASF382
	.sleb128 36
	.uleb128 0x10
	.long	.LASF383
	.sleb128 37
	.uleb128 0x10
	.long	.LASF384
	.sleb128 38
	.uleb128 0x10
	.long	.LASF385
	.sleb128 39
	.uleb128 0x10
	.long	.LASF386
	.sleb128 40
	.uleb128 0x10
	.long	.LASF387
	.sleb128 41
	.uleb128 0x10
	.long	.LASF388
	.sleb128 42
	.uleb128 0x10
	.long	.LASF389
	.sleb128 43
	.uleb128 0x10
	.long	.LASF390
	.sleb128 44
	.uleb128 0x10
	.long	.LASF391
	.sleb128 45
	.uleb128 0x10
	.long	.LASF392
	.sleb128 46
	.uleb128 0x10
	.long	.LASF393
	.sleb128 47
	.uleb128 0x10
	.long	.LASF394
	.sleb128 48
	.uleb128 0x10
	.long	.LASF395
	.sleb128 49
	.uleb128 0x10
	.long	.LASF396
	.sleb128 50
	.uleb128 0x10
	.long	.LASF397
	.sleb128 51
	.uleb128 0x10
	.long	.LASF398
	.sleb128 52
	.uleb128 0x10
	.long	.LASF399
	.sleb128 53
	.uleb128 0x10
	.long	.LASF400
	.sleb128 54
	.uleb128 0x10
	.long	.LASF401
	.sleb128 55
	.uleb128 0x10
	.long	.LASF402
	.sleb128 56
	.uleb128 0x10
	.long	.LASF403
	.sleb128 57
	.uleb128 0x10
	.long	.LASF404
	.sleb128 58
	.uleb128 0x10
	.long	.LASF405
	.sleb128 59
	.uleb128 0x10
	.long	.LASF406
	.sleb128 60
	.uleb128 0x10
	.long	.LASF407
	.sleb128 61
	.uleb128 0x10
	.long	.LASF408
	.sleb128 62
	.uleb128 0x10
	.long	.LASF409
	.sleb128 63
	.uleb128 0x10
	.long	.LASF410
	.sleb128 64
	.uleb128 0x10
	.long	.LASF411
	.sleb128 65
	.uleb128 0x10
	.long	.LASF412
	.sleb128 66
	.uleb128 0x10
	.long	.LASF413
	.sleb128 67
	.uleb128 0x10
	.long	.LASF414
	.sleb128 68
	.uleb128 0x10
	.long	.LASF415
	.sleb128 69
	.uleb128 0x10
	.long	.LASF416
	.sleb128 70
	.uleb128 0x10
	.long	.LASF417
	.sleb128 71
	.uleb128 0x10
	.long	.LASF418
	.sleb128 72
	.uleb128 0x10
	.long	.LASF419
	.sleb128 73
	.uleb128 0x10
	.long	.LASF420
	.sleb128 74
	.uleb128 0x10
	.long	.LASF421
	.sleb128 75
	.uleb128 0x10
	.long	.LASF422
	.sleb128 76
	.uleb128 0x10
	.long	.LASF423
	.sleb128 77
	.uleb128 0x10
	.long	.LASF424
	.sleb128 78
	.uleb128 0x10
	.long	.LASF425
	.sleb128 79
	.uleb128 0x10
	.long	.LASF426
	.sleb128 80
	.uleb128 0x10
	.long	.LASF427
	.sleb128 81
	.uleb128 0x10
	.long	.LASF428
	.sleb128 82
	.uleb128 0x10
	.long	.LASF429
	.sleb128 83
	.uleb128 0x10
	.long	.LASF430
	.sleb128 84
	.uleb128 0x10
	.long	.LASF431
	.sleb128 85
	.uleb128 0x10
	.long	.LASF432
	.sleb128 86
	.uleb128 0x10
	.long	.LASF433
	.sleb128 87
	.uleb128 0x10
	.long	.LASF434
	.sleb128 88
	.uleb128 0x10
	.long	.LASF435
	.sleb128 89
	.uleb128 0x10
	.long	.LASF436
	.sleb128 90
	.uleb128 0x10
	.long	.LASF437
	.sleb128 91
	.uleb128 0x10
	.long	.LASF438
	.sleb128 92
	.uleb128 0x10
	.long	.LASF439
	.sleb128 93
	.uleb128 0x10
	.long	.LASF440
	.sleb128 94
	.uleb128 0x10
	.long	.LASF441
	.sleb128 95
	.byte	0
	.uleb128 0x4
	.long	.LASF442
	.byte	0x18
	.byte	0x4
	.byte	0x79
	.long	0xfe5
	.uleb128 0x8
	.long	.LASF443
	.byte	0x4
	.byte	0x7b
	.long	0x123
	.byte	0
	.uleb128 0x8
	.long	.LASF24
	.byte	0x4
	.byte	0x7c
	.long	0x123
	.byte	0x8
	.uleb128 0x5
	.long	.LASF0
	.byte	0x4
	.byte	0x7e
	.long	0x368
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x10
	.uleb128 0x5
	.long	.LASF444
	.byte	0x4
	.byte	0x80
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x10
	.uleb128 0x5
	.long	.LASF445
	.byte	0x4
	.byte	0x81
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x10
	.uleb128 0x5
	.long	.LASF446
	.byte	0x4
	.byte	0x82
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x10
	.uleb128 0x5
	.long	.LASF447
	.byte	0x4
	.byte	0x83
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x10
	.uleb128 0x5
	.long	.LASF448
	.byte	0x4
	.byte	0x84
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x10
	.uleb128 0x5
	.long	.LASF449
	.byte	0x4
	.byte	0x85
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x10
	.uleb128 0x5
	.long	.LASF450
	.byte	0x4
	.byte	0x86
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x10
	.uleb128 0x5
	.long	.LASF451
	.byte	0x4
	.byte	0x87
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x10
	.uleb128 0x5
	.long	.LASF452
	.byte	0x4
	.byte	0x89
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x10
	.uleb128 0x5
	.long	.LASF453
	.byte	0x4
	.byte	0x8a
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x10
	.uleb128 0x5
	.long	.LASF454
	.byte	0x4
	.byte	0x8b
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x10
	.uleb128 0x5
	.long	.LASF455
	.byte	0x4
	.byte	0x8c
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x10
	.uleb128 0x5
	.long	.LASF456
	.byte	0x4
	.byte	0x8d
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x10
	.uleb128 0x5
	.long	.LASF457
	.byte	0x4
	.byte	0x8e
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x10
	.uleb128 0x5
	.long	.LASF458
	.byte	0x4
	.byte	0x8f
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x10
	.uleb128 0x5
	.long	.LASF459
	.byte	0x4
	.byte	0x90
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.uleb128 0x5
	.long	.LASF460
	.byte	0x4
	.byte	0x92
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x10
	.uleb128 0x5
	.long	.LASF461
	.byte	0x4
	.byte	0x93
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x10
	.uleb128 0x5
	.long	.LASF462
	.byte	0x4
	.byte	0x94
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x10
	.uleb128 0x5
	.long	.LASF463
	.byte	0x4
	.byte	0x95
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x10
	.uleb128 0x5
	.long	.LASF464
	.byte	0x4
	.byte	0x96
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x10
	.uleb128 0x5
	.long	.LASF465
	.byte	0x4
	.byte	0x97
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x10
	.uleb128 0x5
	.long	.LASF466
	.byte	0x4
	.byte	0x98
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x10
	.uleb128 0x5
	.long	.LASF467
	.byte	0x4
	.byte	0x99
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x10
	.byte	0
	.uleb128 0x1a
	.byte	0x10
	.byte	0x4
	.value	0x2c9
	.long	0x1009
	.uleb128 0x1b
	.string	"low"
	.byte	0x4
	.value	0x2ca
	.long	0x38e
	.byte	0
	.uleb128 0x12
	.long	.LASF468
	.byte	0x4
	.value	0x2cb
	.long	0x37c
	.byte	0x8
	.byte	0
	.uleb128 0x11
	.long	.LASF469
	.byte	0x30
	.byte	0x4
	.value	0x2c1
	.long	0x103e
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x2c3
	.long	0xe49
	.byte	0
	.uleb128 0x1b
	.string	"rtl"
	.byte	0x4
	.value	0x2c4
	.long	0x2d
	.byte	0x18
	.uleb128 0x12
	.long	.LASF17
	.byte	0x4
	.value	0x2cc
	.long	0xfe5
	.byte	0x20
	.byte	0
	.uleb128 0x1c
	.byte	0x18
	.byte	0xd
	.byte	0x6b
	.long	0x1051
	.uleb128 0x6
	.string	"r"
	.byte	0xd
	.byte	0x6c
	.long	0x1051
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x37c
	.long	0x1061
	.uleb128 0x15
	.long	0x1ea
	.byte	0x2
	.byte	0
	.uleb128 0x7
	.long	.LASF470
	.byte	0xd
	.byte	0x6d
	.long	0x103e
	.uleb128 0x9
	.long	.LASF472
	.byte	0x18
	.byte	0xd
	.value	0x1bd
	.long	0x108e
	.uleb128 0xb
	.string	"d"
	.byte	0xd
	.value	0x1bf
	.long	0x1061
	.uleb128 0xb
	.string	"i"
	.byte	0xd
	.value	0x1c0
	.long	0x1051
	.byte	0
	.uleb128 0x11
	.long	.LASF473
	.byte	0x38
	.byte	0x4
	.value	0x2de
	.long	0x10c3
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x2e0
	.long	0xe49
	.byte	0
	.uleb128 0x1b
	.string	"rtl"
	.byte	0x4
	.value	0x2e1
	.long	0x2d
	.byte	0x18
	.uleb128 0x12
	.long	.LASF18
	.byte	0x4
	.value	0x2e2
	.long	0x1061
	.byte	0x20
	.byte	0
	.uleb128 0x11
	.long	.LASF474
	.byte	0x30
	.byte	0x4
	.value	0x2e9
	.long	0x1105
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x2eb
	.long	0xe49
	.byte	0
	.uleb128 0x1b
	.string	"rtl"
	.byte	0x4
	.value	0x2ec
	.long	0x2d
	.byte	0x18
	.uleb128 0x12
	.long	.LASF475
	.byte	0x4
	.value	0x2ed
	.long	0x1e3
	.byte	0x20
	.uleb128 0x12
	.long	.LASF476
	.byte	0x4
	.value	0x2ee
	.long	0x5da
	.byte	0x28
	.byte	0
	.uleb128 0x11
	.long	.LASF477
	.byte	0x30
	.byte	0x4
	.value	0x2f5
	.long	0x1147
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x2f7
	.long	0xe49
	.byte	0
	.uleb128 0x1b
	.string	"rtl"
	.byte	0x4
	.value	0x2f8
	.long	0x2d
	.byte	0x18
	.uleb128 0x12
	.long	.LASF478
	.byte	0x4
	.value	0x2f9
	.long	0x123
	.byte	0x20
	.uleb128 0x12
	.long	.LASF479
	.byte	0x4
	.value	0x2fa
	.long	0x123
	.byte	0x28
	.byte	0
	.uleb128 0x11
	.long	.LASF480
	.byte	0x28
	.byte	0x4
	.value	0x300
	.long	0x117c
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x302
	.long	0xe49
	.byte	0
	.uleb128 0x1b
	.string	"rtl"
	.byte	0x4
	.value	0x303
	.long	0x2d
	.byte	0x18
	.uleb128 0x12
	.long	.LASF481
	.byte	0x4
	.value	0x304
	.long	0x123
	.byte	0x20
	.byte	0
	.uleb128 0x4
	.long	.LASF482
	.byte	0x18
	.byte	0xe
	.byte	0xa1
	.long	0x11ad
	.uleb128 0x8
	.long	.LASF483
	.byte	0xe
	.byte	0xa3
	.long	0x3c7
	.byte	0
	.uleb128 0x8
	.long	.LASF484
	.byte	0xe
	.byte	0xa4
	.long	0x11ad
	.byte	0x8
	.uleb128 0x8
	.long	.LASF485
	.byte	0xe
	.byte	0xa5
	.long	0x560
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x117c
	.uleb128 0x4
	.long	.LASF486
	.byte	0x58
	.byte	0xe
	.byte	0xa8
	.long	0x1265
	.uleb128 0x8
	.long	.LASF487
	.byte	0xe
	.byte	0xaa
	.long	0x37c
	.byte	0
	.uleb128 0x8
	.long	.LASF488
	.byte	0xe
	.byte	0xab
	.long	0x11ad
	.byte	0x8
	.uleb128 0x8
	.long	.LASF489
	.byte	0xe
	.byte	0xac
	.long	0x3c7
	.byte	0x10
	.uleb128 0x8
	.long	.LASF490
	.byte	0xe
	.byte	0xad
	.long	0x3c7
	.byte	0x18
	.uleb128 0x8
	.long	.LASF491
	.byte	0xe
	.byte	0xae
	.long	0x3c7
	.byte	0x20
	.uleb128 0x8
	.long	.LASF492
	.byte	0xe
	.byte	0xaf
	.long	0x37c
	.byte	0x28
	.uleb128 0x8
	.long	.LASF493
	.byte	0xe
	.byte	0xb0
	.long	0x1e3
	.byte	0x30
	.uleb128 0x8
	.long	.LASF494
	.byte	0xe
	.byte	0xb5
	.long	0x1279
	.byte	0x38
	.uleb128 0x8
	.long	.LASF495
	.byte	0xe
	.byte	0xb6
	.long	0x128f
	.byte	0x40
	.uleb128 0x8
	.long	.LASF496
	.byte	0xe
	.byte	0xb7
	.long	0x36f
	.byte	0x48
	.uleb128 0x5
	.long	.LASF497
	.byte	0xe
	.byte	0xbd
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x50
	.uleb128 0x5
	.long	.LASF498
	.byte	0xe
	.byte	0xbe
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x50
	.uleb128 0x5
	.long	.LASF499
	.byte	0xe
	.byte	0xc2
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x50
	.byte	0
	.uleb128 0x1d
	.long	0x11ad
	.long	0x1279
	.uleb128 0x1e
	.long	0x36f
	.uleb128 0x1e
	.long	0x37c
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1265
	.uleb128 0x1f
	.long	0x128f
	.uleb128 0x1e
	.long	0x36f
	.uleb128 0x1e
	.long	0x11ad
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x127f
	.uleb128 0x4
	.long	.LASF500
	.byte	0x10
	.byte	0xf
	.byte	0x1a
	.long	0x12ba
	.uleb128 0x6
	.string	"len"
	.byte	0xf
	.byte	0x1c
	.long	0x368
	.byte	0
	.uleb128 0x6
	.string	"str"
	.byte	0xf
	.byte	0x1d
	.long	0x12ba
	.byte	0x8
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x12c0
	.uleb128 0xc
	.long	0x395
	.uleb128 0x7
	.long	.LASF501
	.byte	0xf
	.byte	0x28
	.long	0x12d0
	.uleb128 0x20
	.string	"ht"
	.byte	0x80
	.byte	0xf
	.byte	0x2e
	.long	0x133c
	.uleb128 0x8
	.long	.LASF502
	.byte	0xf
	.byte	0x31
	.long	0x11b3
	.byte	0
	.uleb128 0x8
	.long	.LASF503
	.byte	0xf
	.byte	0x33
	.long	0x136c
	.byte	0x58
	.uleb128 0x8
	.long	.LASF504
	.byte	0xf
	.byte	0x35
	.long	0x1387
	.byte	0x60
	.uleb128 0x8
	.long	.LASF505
	.byte	0xf
	.byte	0x37
	.long	0x368
	.byte	0x68
	.uleb128 0x8
	.long	.LASF506
	.byte	0xf
	.byte	0x38
	.long	0x368
	.byte	0x6c
	.uleb128 0x8
	.long	.LASF507
	.byte	0xf
	.byte	0x3b
	.long	0x1392
	.byte	0x70
	.uleb128 0x8
	.long	.LASF508
	.byte	0xf
	.byte	0x3e
	.long	0x368
	.byte	0x78
	.uleb128 0x8
	.long	.LASF509
	.byte	0xf
	.byte	0x3f
	.long	0x368
	.byte	0x7c
	.byte	0
	.uleb128 0x7
	.long	.LASF510
	.byte	0xf
	.byte	0x29
	.long	0x1347
	.uleb128 0x3
	.byte	0x8
	.long	0x1295
	.uleb128 0x19
	.long	.LASF511
	.byte	0x4
	.byte	0xf
	.byte	0x2b
	.long	0x136c
	.uleb128 0x10
	.long	.LASF512
	.sleb128 0
	.uleb128 0x10
	.long	.LASF513
	.sleb128 1
	.uleb128 0x10
	.long	.LASF514
	.sleb128 2
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x133c
	.uleb128 0x1d
	.long	0x133c
	.long	0x1381
	.uleb128 0x1e
	.long	0x1381
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x12c5
	.uleb128 0x3
	.byte	0x8
	.long	0x1372
	.uleb128 0x21
	.long	.LASF561
	.uleb128 0x3
	.byte	0x8
	.long	0x138d
	.uleb128 0x11
	.long	.LASF515
	.byte	0x28
	.byte	0x4
	.value	0x317
	.long	0x13bf
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x319
	.long	0xe49
	.byte	0
	.uleb128 0x1b
	.string	"id"
	.byte	0x4
	.value	0x31a
	.long	0x1295
	.byte	0x18
	.byte	0
	.uleb128 0x11
	.long	.LASF516
	.byte	0x28
	.byte	0x4
	.value	0x321
	.long	0x13f4
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x323
	.long	0xe49
	.byte	0
	.uleb128 0x12
	.long	.LASF517
	.byte	0x4
	.value	0x324
	.long	0x123
	.byte	0x18
	.uleb128 0x12
	.long	.LASF518
	.byte	0x4
	.value	0x325
	.long	0x123
	.byte	0x20
	.byte	0
	.uleb128 0x11
	.long	.LASF519
	.byte	0x28
	.byte	0x4
	.value	0x32e
	.long	0x1427
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x330
	.long	0xe49
	.byte	0
	.uleb128 0x12
	.long	.LASF475
	.byte	0x4
	.value	0x331
	.long	0x1e3
	.byte	0x18
	.uleb128 0x1b
	.string	"a"
	.byte	0x4
	.value	0x332
	.long	0x1427
	.byte	0x20
	.byte	0
	.uleb128 0x14
	.long	0x123
	.long	0x1437
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x11
	.long	.LASF520
	.byte	0x28
	.byte	0x4
	.value	0x36f
	.long	0x146c
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x371
	.long	0xe49
	.byte	0
	.uleb128 0x12
	.long	.LASF521
	.byte	0x4
	.value	0x372
	.long	0x1e3
	.byte	0x18
	.uleb128 0x12
	.long	.LASF522
	.byte	0x4
	.value	0x373
	.long	0x1427
	.byte	0x20
	.byte	0
	.uleb128 0x11
	.long	.LASF523
	.byte	0x50
	.byte	0x4
	.value	0x3a3
	.long	0x1505
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x3a5
	.long	0xe49
	.byte	0
	.uleb128 0x22
	.long	.LASF524
	.byte	0x4
	.value	0x3a7
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x18
	.uleb128 0x22
	.long	.LASF525
	.byte	0x4
	.value	0x3a8
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x18
	.uleb128 0x22
	.long	.LASF526
	.byte	0x4
	.value	0x3a9
	.long	0x368
	.byte	0x4
	.byte	0x1e
	.byte	0
	.byte	0x18
	.uleb128 0x12
	.long	.LASF527
	.byte	0x4
	.value	0x3ab
	.long	0x123
	.byte	0x20
	.uleb128 0x12
	.long	.LASF528
	.byte	0x4
	.value	0x3ac
	.long	0x123
	.byte	0x28
	.uleb128 0x12
	.long	.LASF529
	.byte	0x4
	.value	0x3ad
	.long	0x123
	.byte	0x30
	.uleb128 0x12
	.long	.LASF530
	.byte	0x4
	.value	0x3ae
	.long	0x123
	.byte	0x38
	.uleb128 0x12
	.long	.LASF531
	.byte	0x4
	.value	0x3af
	.long	0x123
	.byte	0x40
	.uleb128 0x12
	.long	.LASF532
	.byte	0x4
	.value	0x3b0
	.long	0x123
	.byte	0x48
	.byte	0
	.uleb128 0x23
	.byte	0x8
	.byte	0x4
	.value	0x4d8
	.long	0x1527
	.uleb128 0xa
	.long	.LASF533
	.byte	0x4
	.value	0x4d8
	.long	0x1e3
	.uleb128 0xa
	.long	.LASF476
	.byte	0x4
	.value	0x4d8
	.long	0x3c7
	.byte	0
	.uleb128 0x11
	.long	.LASF534
	.byte	0xa8
	.byte	0x4
	.value	0x4b8
	.long	0x173c
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x4ba
	.long	0xe49
	.byte	0
	.uleb128 0x12
	.long	.LASF535
	.byte	0x4
	.value	0x4bb
	.long	0x123
	.byte	0x18
	.uleb128 0x12
	.long	.LASF536
	.byte	0x4
	.value	0x4bc
	.long	0x123
	.byte	0x20
	.uleb128 0x12
	.long	.LASF537
	.byte	0x4
	.value	0x4bd
	.long	0x123
	.byte	0x28
	.uleb128 0x12
	.long	.LASF538
	.byte	0x4
	.value	0x4be
	.long	0x123
	.byte	0x30
	.uleb128 0x1b
	.string	"uid"
	.byte	0x4
	.value	0x4bf
	.long	0x368
	.byte	0x38
	.uleb128 0x22
	.long	.LASF539
	.byte	0x4
	.value	0x4c1
	.long	0x368
	.byte	0x4
	.byte	0x9
	.byte	0x17
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF1
	.byte	0x4
	.value	0x4c2
	.long	0x368
	.byte	0x4
	.byte	0x7
	.byte	0x10
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF540
	.byte	0x4
	.value	0x4c4
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF541
	.byte	0x4
	.value	0x4c5
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF542
	.byte	0x4
	.value	0x4c6
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF543
	.byte	0x4
	.value	0x4c7
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF544
	.byte	0x4
	.value	0x4c8
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF545
	.byte	0x4
	.value	0x4c9
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF546
	.byte	0x4
	.value	0x4ca
	.long	0x368
	.byte	0x4
	.byte	0x2
	.byte	0x8
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF460
	.byte	0x4
	.value	0x4cc
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF461
	.byte	0x4
	.value	0x4cd
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF462
	.byte	0x4
	.value	0x4ce
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF463
	.byte	0x4
	.value	0x4cf
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF464
	.byte	0x4
	.value	0x4d0
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF465
	.byte	0x4
	.value	0x4d1
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF466
	.byte	0x4
	.value	0x4d2
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x3c
	.uleb128 0x22
	.long	.LASF547
	.byte	0x4
	.value	0x4d3
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x3c
	.uleb128 0x12
	.long	.LASF548
	.byte	0x4
	.value	0x4d5
	.long	0x368
	.byte	0x40
	.uleb128 0x12
	.long	.LASF549
	.byte	0x4
	.value	0x4d6
	.long	0x123
	.byte	0x48
	.uleb128 0x12
	.long	.LASF550
	.byte	0x4
	.value	0x4d7
	.long	0x123
	.byte	0x50
	.uleb128 0x12
	.long	.LASF551
	.byte	0x4
	.value	0x4d8
	.long	0x1505
	.byte	0x58
	.uleb128 0x12
	.long	.LASF552
	.byte	0x4
	.value	0x4d9
	.long	0x123
	.byte	0x60
	.uleb128 0x12
	.long	.LASF553
	.byte	0x4
	.value	0x4da
	.long	0x123
	.byte	0x68
	.uleb128 0x12
	.long	.LASF554
	.byte	0x4
	.value	0x4db
	.long	0x123
	.byte	0x70
	.uleb128 0x12
	.long	.LASF555
	.byte	0x4
	.value	0x4dc
	.long	0x123
	.byte	0x78
	.uleb128 0x12
	.long	.LASF556
	.byte	0x4
	.value	0x4dd
	.long	0x123
	.byte	0x80
	.uleb128 0x12
	.long	.LASF557
	.byte	0x4
	.value	0x4de
	.long	0x123
	.byte	0x88
	.uleb128 0x12
	.long	.LASF558
	.byte	0x4
	.value	0x4df
	.long	0x123
	.byte	0x90
	.uleb128 0x12
	.long	.LASF559
	.byte	0x4
	.value	0x4e0
	.long	0x37c
	.byte	0x98
	.uleb128 0x12
	.long	.LASF560
	.byte	0x4
	.value	0x4e2
	.long	0x1741
	.byte	0xa0
	.byte	0
	.uleb128 0x21
	.long	.LASF562
	.uleb128 0x3
	.byte	0x8
	.long	0x173c
	.uleb128 0x1a
	.byte	0x4
	.byte	0x4
	.value	0x717
	.long	0x1771
	.uleb128 0x22
	.long	.LASF548
	.byte	0x4
	.value	0x717
	.long	0x368
	.byte	0x4
	.byte	0x18
	.byte	0x8
	.byte	0
	.uleb128 0x22
	.long	.LASF563
	.byte	0x4
	.value	0x717
	.long	0x368
	.byte	0x4
	.byte	0x8
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x23
	.byte	0x8
	.byte	0x4
	.value	0x70e
	.long	0x1799
	.uleb128 0xb
	.string	"f"
	.byte	0x4
	.value	0x711
	.long	0xbdc
	.uleb128 0xb
	.string	"i"
	.byte	0x4
	.value	0x714
	.long	0x37c
	.uleb128 0xb
	.string	"a"
	.byte	0x4
	.value	0x717
	.long	0x1747
	.byte	0
	.uleb128 0x23
	.byte	0x8
	.byte	0x4
	.value	0x72c
	.long	0x17cb
	.uleb128 0xb
	.string	"f"
	.byte	0x4
	.value	0x72d
	.long	0x1c4b
	.uleb128 0xb
	.string	"r"
	.byte	0x4
	.value	0x72e
	.long	0x2d
	.uleb128 0xb
	.string	"t"
	.byte	0x4
	.value	0x72f
	.long	0x123
	.uleb128 0xb
	.string	"i"
	.byte	0x4
	.value	0x730
	.long	0x1e3
	.byte	0
	.uleb128 0x24
	.long	.LASF564
	.value	0x1b0
	.byte	0x10
	.byte	0xae
	.long	0x1c4b
	.uleb128 0x6
	.string	"eh"
	.byte	0x10
	.byte	0xb0
	.long	0x2f33
	.byte	0
	.uleb128 0x8
	.long	.LASF565
	.byte	0x10
	.byte	0xb1
	.long	0x2f3e
	.byte	0x8
	.uleb128 0x8
	.long	.LASF566
	.byte	0x10
	.byte	0xb2
	.long	0x2f44
	.byte	0x10
	.uleb128 0x8
	.long	.LASF567
	.byte	0x10
	.byte	0xb3
	.long	0x2f4a
	.byte	0x18
	.uleb128 0x8
	.long	.LASF568
	.byte	0x10
	.byte	0xb4
	.long	0x2f55
	.byte	0x20
	.uleb128 0x8
	.long	.LASF552
	.byte	0x10
	.byte	0xb9
	.long	0x5da
	.byte	0x28
	.uleb128 0x8
	.long	.LASF23
	.byte	0x10
	.byte	0xbc
	.long	0x123
	.byte	0x30
	.uleb128 0x8
	.long	.LASF569
	.byte	0x10
	.byte	0xbf
	.long	0x1c4b
	.byte	0x38
	.uleb128 0x8
	.long	.LASF570
	.byte	0x10
	.byte	0xc4
	.long	0x1e3
	.byte	0x40
	.uleb128 0x8
	.long	.LASF571
	.byte	0x10
	.byte	0xc9
	.long	0x1e3
	.byte	0x44
	.uleb128 0x8
	.long	.LASF572
	.byte	0x10
	.byte	0xce
	.long	0x1e3
	.byte	0x48
	.uleb128 0x8
	.long	.LASF573
	.byte	0x10
	.byte	0xd2
	.long	0x1e3
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF574
	.byte	0x10
	.byte	0xd6
	.long	0x2d
	.byte	0x50
	.uleb128 0x8
	.long	.LASF575
	.byte	0x10
	.byte	0xda
	.long	0x304
	.byte	0x58
	.uleb128 0x8
	.long	.LASF576
	.byte	0x10
	.byte	0xe0
	.long	0x2d
	.byte	0x78
	.uleb128 0x8
	.long	.LASF577
	.byte	0x10
	.byte	0xe3
	.long	0x2d
	.byte	0x80
	.uleb128 0x8
	.long	.LASF578
	.byte	0x10
	.byte	0xe7
	.long	0x5da
	.byte	0x88
	.uleb128 0x8
	.long	.LASF579
	.byte	0x10
	.byte	0xeb
	.long	0x2f60
	.byte	0x90
	.uleb128 0x8
	.long	.LASF580
	.byte	0x10
	.byte	0xee
	.long	0x1e3
	.byte	0x98
	.uleb128 0x8
	.long	.LASF581
	.byte	0x10
	.byte	0xf3
	.long	0x123
	.byte	0xa0
	.uleb128 0x8
	.long	.LASF582
	.byte	0x10
	.byte	0xf9
	.long	0x2d
	.byte	0xa8
	.uleb128 0x8
	.long	.LASF583
	.byte	0x10
	.byte	0xfd
	.long	0x2d
	.byte	0xb0
	.uleb128 0x12
	.long	.LASF584
	.byte	0x10
	.value	0x102
	.long	0x2d
	.byte	0xb8
	.uleb128 0x12
	.long	.LASF585
	.byte	0x10
	.value	0x108
	.long	0x2d
	.byte	0xc0
	.uleb128 0x12
	.long	.LASF586
	.byte	0x10
	.value	0x10d
	.long	0x2d
	.byte	0xc8
	.uleb128 0x12
	.long	.LASF587
	.byte	0x10
	.value	0x111
	.long	0x2d
	.byte	0xd0
	.uleb128 0x12
	.long	.LASF588
	.byte	0x10
	.value	0x115
	.long	0x2d
	.byte	0xd8
	.uleb128 0x12
	.long	.LASF589
	.byte	0x10
	.value	0x118
	.long	0x123
	.byte	0xe0
	.uleb128 0x12
	.long	.LASF590
	.byte	0x10
	.value	0x11c
	.long	0x2d
	.byte	0xe8
	.uleb128 0x12
	.long	.LASF591
	.byte	0x10
	.value	0x11f
	.long	0x2d
	.byte	0xf0
	.uleb128 0x12
	.long	.LASF592
	.byte	0x10
	.value	0x125
	.long	0x2d
	.byte	0xf8
	.uleb128 0x25
	.long	.LASF593
	.byte	0x10
	.value	0x12a
	.long	0x2d
	.value	0x100
	.uleb128 0x25
	.long	.LASF594
	.byte	0x10
	.value	0x12f
	.long	0x37c
	.value	0x108
	.uleb128 0x25
	.long	.LASF595
	.byte	0x10
	.value	0x134
	.long	0x123
	.value	0x110
	.uleb128 0x25
	.long	.LASF596
	.byte	0x10
	.value	0x13d
	.long	0x123
	.value	0x118
	.uleb128 0x25
	.long	.LASF597
	.byte	0x10
	.value	0x140
	.long	0x2d
	.value	0x120
	.uleb128 0x25
	.long	.LASF598
	.byte	0x10
	.value	0x144
	.long	0x2d
	.value	0x128
	.uleb128 0x25
	.long	.LASF599
	.byte	0x10
	.value	0x148
	.long	0x368
	.value	0x130
	.uleb128 0x25
	.long	.LASF600
	.byte	0x10
	.value	0x14e
	.long	0x2a00
	.value	0x138
	.uleb128 0x25
	.long	.LASF601
	.byte	0x10
	.value	0x151
	.long	0x2f6b
	.value	0x140
	.uleb128 0x25
	.long	.LASF602
	.byte	0x10
	.value	0x154
	.long	0x1e3
	.value	0x148
	.uleb128 0x25
	.long	.LASF603
	.byte	0x10
	.value	0x157
	.long	0x1e3
	.value	0x14c
	.uleb128 0x25
	.long	.LASF604
	.byte	0x10
	.value	0x15d
	.long	0x1e3
	.value	0x150
	.uleb128 0x25
	.long	.LASF605
	.byte	0x10
	.value	0x161
	.long	0x2dd5
	.value	0x158
	.uleb128 0x25
	.long	.LASF606
	.byte	0x10
	.value	0x164
	.long	0x1e3
	.value	0x160
	.uleb128 0x25
	.long	.LASF607
	.byte	0x10
	.value	0x165
	.long	0x1e3
	.value	0x164
	.uleb128 0x25
	.long	.LASF608
	.byte	0x10
	.value	0x167
	.long	0x36f
	.value	0x168
	.uleb128 0x25
	.long	.LASF609
	.byte	0x10
	.value	0x168
	.long	0x123
	.value	0x170
	.uleb128 0x25
	.long	.LASF610
	.byte	0x10
	.value	0x16b
	.long	0x2d
	.value	0x178
	.uleb128 0x25
	.long	.LASF611
	.byte	0x10
	.value	0x16d
	.long	0x1e3
	.value	0x180
	.uleb128 0x25
	.long	.LASF612
	.byte	0x10
	.value	0x170
	.long	0x1e3
	.value	0x184
	.uleb128 0x25
	.long	.LASF613
	.byte	0x10
	.value	0x175
	.long	0x2f76
	.value	0x188
	.uleb128 0x25
	.long	.LASF614
	.byte	0x10
	.value	0x177
	.long	0x1e3
	.value	0x190
	.uleb128 0x25
	.long	.LASF615
	.byte	0x10
	.value	0x179
	.long	0x1e3
	.value	0x194
	.uleb128 0x25
	.long	.LASF616
	.byte	0x10
	.value	0x17c
	.long	0x2f81
	.value	0x198
	.uleb128 0x25
	.long	.LASF617
	.byte	0x10
	.value	0x182
	.long	0x2d
	.value	0x1a0
	.uleb128 0x26
	.long	.LASF618
	.byte	0x10
	.value	0x188
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF619
	.byte	0x10
	.value	0x18c
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF620
	.byte	0x10
	.value	0x18f
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF621
	.byte	0x10
	.value	0x192
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF622
	.byte	0x10
	.value	0x195
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF623
	.byte	0x10
	.value	0x198
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF624
	.byte	0x10
	.value	0x19c
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF625
	.byte	0x10
	.value	0x19f
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF626
	.byte	0x10
	.value	0x1a3
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF627
	.byte	0x10
	.value	0x1a7
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF628
	.byte	0x10
	.value	0x1aa
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF629
	.byte	0x10
	.value	0x1ad
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF630
	.byte	0x10
	.value	0x1b2
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF631
	.byte	0x10
	.value	0x1b6
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF632
	.byte	0x10
	.value	0x1b9
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF633
	.byte	0x10
	.value	0x1bd
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF634
	.byte	0x10
	.value	0x1c1
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF635
	.byte	0x10
	.value	0x1c5
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF636
	.byte	0x10
	.value	0x1cb
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF637
	.byte	0x10
	.value	0x1d4
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF638
	.byte	0x10
	.value	0x1d7
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF639
	.byte	0x10
	.value	0x1da
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF640
	.byte	0x10
	.value	0x1dd
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.value	0x1a8
	.uleb128 0x26
	.long	.LASF641
	.byte	0x10
	.value	0x1e0
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.value	0x1a8
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x17cb
	.uleb128 0x11
	.long	.LASF642
	.byte	0xd0
	.byte	0x4
	.value	0x6dc
	.long	0x1fd5
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x6de
	.long	0xe49
	.byte	0
	.uleb128 0x12
	.long	.LASF643
	.byte	0x4
	.value	0x6df
	.long	0x5da
	.byte	0x18
	.uleb128 0x12
	.long	.LASF644
	.byte	0x4
	.value	0x6e0
	.long	0x1e3
	.byte	0x20
	.uleb128 0x1b
	.string	"uid"
	.byte	0x4
	.value	0x6e1
	.long	0x368
	.byte	0x24
	.uleb128 0x12
	.long	.LASF536
	.byte	0x4
	.value	0x6e2
	.long	0x123
	.byte	0x28
	.uleb128 0x22
	.long	.LASF1
	.byte	0x4
	.value	0x6e3
	.long	0x368
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x30
	.uleb128 0x22
	.long	.LASF645
	.byte	0x4
	.value	0x6e5
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x30
	.uleb128 0x22
	.long	.LASF646
	.byte	0x4
	.value	0x6e6
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x30
	.uleb128 0x22
	.long	.LASF647
	.byte	0x4
	.value	0x6e7
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x30
	.uleb128 0x22
	.long	.LASF648
	.byte	0x4
	.value	0x6e8
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x30
	.uleb128 0x22
	.long	.LASF649
	.byte	0x4
	.value	0x6e9
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x30
	.uleb128 0x22
	.long	.LASF650
	.byte	0x4
	.value	0x6ea
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x30
	.uleb128 0x22
	.long	.LASF651
	.byte	0x4
	.value	0x6eb
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x30
	.uleb128 0x22
	.long	.LASF525
	.byte	0x4
	.value	0x6ec
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x30
	.uleb128 0x22
	.long	.LASF652
	.byte	0x4
	.value	0x6ee
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x30
	.uleb128 0x22
	.long	.LASF653
	.byte	0x4
	.value	0x6ef
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x30
	.uleb128 0x22
	.long	.LASF654
	.byte	0x4
	.value	0x6f0
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x30
	.uleb128 0x22
	.long	.LASF655
	.byte	0x4
	.value	0x6f1
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x30
	.uleb128 0x22
	.long	.LASF656
	.byte	0x4
	.value	0x6f2
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x30
	.uleb128 0x22
	.long	.LASF657
	.byte	0x4
	.value	0x6f3
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x30
	.uleb128 0x22
	.long	.LASF658
	.byte	0x4
	.value	0x6f4
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x30
	.uleb128 0x22
	.long	.LASF659
	.byte	0x4
	.value	0x6f5
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x30
	.uleb128 0x22
	.long	.LASF660
	.byte	0x4
	.value	0x6f7
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x30
	.uleb128 0x22
	.long	.LASF661
	.byte	0x4
	.value	0x6f8
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x30
	.uleb128 0x22
	.long	.LASF662
	.byte	0x4
	.value	0x6f9
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x30
	.uleb128 0x22
	.long	.LASF663
	.byte	0x4
	.value	0x6fa
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x30
	.uleb128 0x22
	.long	.LASF664
	.byte	0x4
	.value	0x6fb
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x30
	.uleb128 0x22
	.long	.LASF340
	.byte	0x4
	.value	0x6fc
	.long	0x368
	.byte	0x4
	.byte	0x2
	.byte	0x1
	.byte	0x30
	.uleb128 0x22
	.long	.LASF665
	.byte	0x4
	.value	0x6fd
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x30
	.uleb128 0x22
	.long	.LASF546
	.byte	0x4
	.value	0x6ff
	.long	0x368
	.byte	0x4
	.byte	0x2
	.byte	0x1e
	.byte	0x34
	.uleb128 0x22
	.long	.LASF666
	.byte	0x4
	.value	0x700
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x34
	.uleb128 0x22
	.long	.LASF547
	.byte	0x4
	.value	0x701
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x34
	.uleb128 0x22
	.long	.LASF667
	.byte	0x4
	.value	0x702
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x34
	.uleb128 0x22
	.long	.LASF460
	.byte	0x4
	.value	0x705
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.byte	0x34
	.uleb128 0x22
	.long	.LASF461
	.byte	0x4
	.value	0x706
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.byte	0x34
	.uleb128 0x22
	.long	.LASF462
	.byte	0x4
	.value	0x707
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x34
	.uleb128 0x22
	.long	.LASF463
	.byte	0x4
	.value	0x708
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x34
	.uleb128 0x22
	.long	.LASF464
	.byte	0x4
	.value	0x709
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x34
	.uleb128 0x22
	.long	.LASF465
	.byte	0x4
	.value	0x70a
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x34
	.uleb128 0x22
	.long	.LASF466
	.byte	0x4
	.value	0x70b
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x34
	.uleb128 0x22
	.long	.LASF668
	.byte	0x4
	.value	0x70c
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x34
	.uleb128 0x1b
	.string	"u1"
	.byte	0x4
	.value	0x718
	.long	0x1771
	.byte	0x38
	.uleb128 0x12
	.long	.LASF537
	.byte	0x4
	.value	0x71a
	.long	0x123
	.byte	0x40
	.uleb128 0x12
	.long	.LASF552
	.byte	0x4
	.value	0x71b
	.long	0x123
	.byte	0x48
	.uleb128 0x12
	.long	.LASF558
	.byte	0x4
	.value	0x71c
	.long	0x123
	.byte	0x50
	.uleb128 0x12
	.long	.LASF669
	.byte	0x4
	.value	0x71d
	.long	0x123
	.byte	0x58
	.uleb128 0x12
	.long	.LASF670
	.byte	0x4
	.value	0x71e
	.long	0x123
	.byte	0x60
	.uleb128 0x12
	.long	.LASF671
	.byte	0x4
	.value	0x71f
	.long	0x123
	.byte	0x68
	.uleb128 0x12
	.long	.LASF530
	.byte	0x4
	.value	0x720
	.long	0x123
	.byte	0x70
	.uleb128 0x12
	.long	.LASF672
	.byte	0x4
	.value	0x721
	.long	0x123
	.byte	0x78
	.uleb128 0x12
	.long	.LASF673
	.byte	0x4
	.value	0x722
	.long	0x123
	.byte	0x80
	.uleb128 0x12
	.long	.LASF538
	.byte	0x4
	.value	0x723
	.long	0x123
	.byte	0x88
	.uleb128 0x1b
	.string	"rtl"
	.byte	0x4
	.value	0x724
	.long	0x2d
	.byte	0x90
	.uleb128 0x12
	.long	.LASF674
	.byte	0x4
	.value	0x725
	.long	0x2d
	.byte	0x98
	.uleb128 0x1b
	.string	"u2"
	.byte	0x4
	.value	0x731
	.long	0x1799
	.byte	0xa0
	.uleb128 0x12
	.long	.LASF675
	.byte	0x4
	.value	0x734
	.long	0x123
	.byte	0xa8
	.uleb128 0x12
	.long	.LASF676
	.byte	0x4
	.value	0x738
	.long	0x123
	.byte	0xb0
	.uleb128 0x12
	.long	.LASF677
	.byte	0x4
	.value	0x73a
	.long	0x123
	.byte	0xb8
	.uleb128 0x12
	.long	.LASF678
	.byte	0x4
	.value	0x73b
	.long	0x37c
	.byte	0xc0
	.uleb128 0x12
	.long	.LASF560
	.byte	0x4
	.value	0x73d
	.long	0x1fda
	.byte	0xc8
	.byte	0
	.uleb128 0x21
	.long	.LASF679
	.uleb128 0x3
	.byte	0x8
	.long	0x1fd5
	.uleb128 0xf
	.long	.LASF680
	.byte	0x4
	.byte	0x4
	.value	0x757
	.long	0x2126
	.uleb128 0x10
	.long	.LASF681
	.sleb128 0
	.uleb128 0x10
	.long	.LASF682
	.sleb128 1
	.uleb128 0x10
	.long	.LASF683
	.sleb128 2
	.uleb128 0x10
	.long	.LASF684
	.sleb128 3
	.uleb128 0x10
	.long	.LASF685
	.sleb128 4
	.uleb128 0x10
	.long	.LASF686
	.sleb128 5
	.uleb128 0x10
	.long	.LASF687
	.sleb128 6
	.uleb128 0x10
	.long	.LASF688
	.sleb128 7
	.uleb128 0x10
	.long	.LASF689
	.sleb128 8
	.uleb128 0x10
	.long	.LASF690
	.sleb128 9
	.uleb128 0x10
	.long	.LASF691
	.sleb128 10
	.uleb128 0x10
	.long	.LASF692
	.sleb128 11
	.uleb128 0x10
	.long	.LASF693
	.sleb128 12
	.uleb128 0x10
	.long	.LASF694
	.sleb128 13
	.uleb128 0x10
	.long	.LASF695
	.sleb128 14
	.uleb128 0x10
	.long	.LASF696
	.sleb128 15
	.uleb128 0x10
	.long	.LASF697
	.sleb128 16
	.uleb128 0x10
	.long	.LASF698
	.sleb128 17
	.uleb128 0x10
	.long	.LASF699
	.sleb128 18
	.uleb128 0x10
	.long	.LASF700
	.sleb128 19
	.uleb128 0x10
	.long	.LASF701
	.sleb128 20
	.uleb128 0x10
	.long	.LASF702
	.sleb128 21
	.uleb128 0x10
	.long	.LASF703
	.sleb128 22
	.uleb128 0x10
	.long	.LASF704
	.sleb128 23
	.uleb128 0x10
	.long	.LASF705
	.sleb128 24
	.uleb128 0x10
	.long	.LASF706
	.sleb128 25
	.uleb128 0x10
	.long	.LASF707
	.sleb128 26
	.uleb128 0x10
	.long	.LASF708
	.sleb128 27
	.uleb128 0x10
	.long	.LASF709
	.sleb128 28
	.uleb128 0x10
	.long	.LASF710
	.sleb128 29
	.uleb128 0x10
	.long	.LASF711
	.sleb128 30
	.uleb128 0x10
	.long	.LASF712
	.sleb128 31
	.uleb128 0x10
	.long	.LASF713
	.sleb128 32
	.uleb128 0x10
	.long	.LASF714
	.sleb128 33
	.uleb128 0x10
	.long	.LASF715
	.sleb128 34
	.uleb128 0x10
	.long	.LASF716
	.sleb128 35
	.uleb128 0x10
	.long	.LASF717
	.sleb128 36
	.uleb128 0x10
	.long	.LASF718
	.sleb128 37
	.uleb128 0x10
	.long	.LASF719
	.sleb128 38
	.uleb128 0x10
	.long	.LASF720
	.sleb128 39
	.uleb128 0x10
	.long	.LASF721
	.sleb128 40
	.uleb128 0x10
	.long	.LASF722
	.sleb128 41
	.uleb128 0x10
	.long	.LASF723
	.sleb128 42
	.uleb128 0x10
	.long	.LASF724
	.sleb128 43
	.uleb128 0x10
	.long	.LASF725
	.sleb128 44
	.uleb128 0x10
	.long	.LASF726
	.sleb128 45
	.uleb128 0x10
	.long	.LASF727
	.sleb128 46
	.uleb128 0x10
	.long	.LASF728
	.sleb128 47
	.uleb128 0x10
	.long	.LASF729
	.sleb128 48
	.uleb128 0x10
	.long	.LASF730
	.sleb128 49
	.uleb128 0x10
	.long	.LASF731
	.sleb128 50
	.uleb128 0x10
	.long	.LASF732
	.sleb128 51
	.byte	0
	.uleb128 0xf
	.long	.LASF733
	.byte	0x4
	.byte	0x4
	.value	0x7e4
	.long	0x217c
	.uleb128 0x10
	.long	.LASF734
	.sleb128 0
	.uleb128 0x10
	.long	.LASF735
	.sleb128 1
	.uleb128 0x10
	.long	.LASF736
	.sleb128 2
	.uleb128 0x10
	.long	.LASF737
	.sleb128 3
	.uleb128 0x10
	.long	.LASF738
	.sleb128 4
	.uleb128 0x10
	.long	.LASF739
	.sleb128 5
	.uleb128 0x10
	.long	.LASF740
	.sleb128 6
	.uleb128 0x10
	.long	.LASF741
	.sleb128 7
	.uleb128 0x10
	.long	.LASF742
	.sleb128 8
	.uleb128 0x10
	.long	.LASF743
	.sleb128 9
	.uleb128 0x10
	.long	.LASF744
	.sleb128 10
	.uleb128 0x10
	.long	.LASF745
	.sleb128 11
	.byte	0
	.uleb128 0x11
	.long	.LASF746
	.byte	0x20
	.byte	0x4
	.value	0x885
	.long	0x21e5
	.uleb128 0x12
	.long	.LASF552
	.byte	0x4
	.value	0x889
	.long	0x21e5
	.byte	0
	.uleb128 0x12
	.long	.LASF747
	.byte	0x4
	.value	0x88b
	.long	0x1de
	.byte	0x8
	.uleb128 0x12
	.long	.LASF748
	.byte	0x4
	.value	0x88e
	.long	0x1de
	.byte	0xc
	.uleb128 0x12
	.long	.LASF749
	.byte	0x4
	.value	0x896
	.long	0x21ea
	.byte	0x10
	.uleb128 0x12
	.long	.LASF750
	.byte	0x4
	.value	0x899
	.long	0x21ea
	.byte	0x11
	.uleb128 0x12
	.long	.LASF751
	.byte	0x4
	.value	0x89e
	.long	0x21ea
	.byte	0x12
	.uleb128 0x12
	.long	.LASF752
	.byte	0x4
	.value	0x8ad
	.long	0x2225
	.byte	0x18
	.byte	0
	.uleb128 0xc
	.long	0x5da
	.uleb128 0xc
	.long	0x21ef
	.uleb128 0xe
	.byte	0x1
	.byte	0x2
	.long	.LASF753
	.uleb128 0x1d
	.long	0x123
	.long	0x2219
	.uleb128 0x1e
	.long	0x2219
	.uleb128 0x1e
	.long	0x123
	.uleb128 0x1e
	.long	0x123
	.uleb128 0x1e
	.long	0x1e3
	.uleb128 0x1e
	.long	0x221f
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x123
	.uleb128 0x3
	.byte	0x8
	.long	0x21ef
	.uleb128 0xc
	.long	0x222a
	.uleb128 0x3
	.byte	0x8
	.long	0x21f6
	.uleb128 0xf
	.long	.LASF754
	.byte	0x4
	.byte	0x4
	.value	0x972
	.long	0x2268
	.uleb128 0x10
	.long	.LASF755
	.sleb128 0
	.uleb128 0x10
	.long	.LASF756
	.sleb128 1
	.uleb128 0x10
	.long	.LASF757
	.sleb128 2
	.uleb128 0x10
	.long	.LASF758
	.sleb128 3
	.uleb128 0x10
	.long	.LASF759
	.sleb128 4
	.uleb128 0x10
	.long	.LASF760
	.sleb128 5
	.uleb128 0x10
	.long	.LASF761
	.sleb128 6
	.byte	0
	.uleb128 0x19
	.long	.LASF762
	.byte	0x4
	.byte	0x11
	.byte	0x1c
	.long	0x22a5
	.uleb128 0x10
	.long	.LASF763
	.sleb128 0
	.uleb128 0x10
	.long	.LASF764
	.sleb128 1
	.uleb128 0x10
	.long	.LASF765
	.sleb128 2
	.uleb128 0x10
	.long	.LASF766
	.sleb128 3
	.uleb128 0x10
	.long	.LASF767
	.sleb128 4
	.uleb128 0x10
	.long	.LASF768
	.sleb128 5
	.uleb128 0x10
	.long	.LASF769
	.sleb128 6
	.uleb128 0x10
	.long	.LASF770
	.sleb128 7
	.byte	0
	.uleb128 0x19
	.long	.LASF771
	.byte	0x4
	.byte	0x11
	.byte	0x2c
	.long	0x22ca
	.uleb128 0x10
	.long	.LASF772
	.sleb128 0
	.uleb128 0x10
	.long	.LASF773
	.sleb128 1
	.uleb128 0x10
	.long	.LASF774
	.sleb128 2
	.uleb128 0x10
	.long	.LASF775
	.sleb128 3
	.byte	0
	.uleb128 0x19
	.long	.LASF776
	.byte	0x4
	.byte	0x2
	.byte	0x29
	.long	0x26c6
	.uleb128 0x10
	.long	.LASF777
	.sleb128 0
	.uleb128 0x27
	.string	"NIL"
	.sleb128 1
	.uleb128 0x10
	.long	.LASF778
	.sleb128 2
	.uleb128 0x10
	.long	.LASF779
	.sleb128 3
	.uleb128 0x10
	.long	.LASF780
	.sleb128 4
	.uleb128 0x10
	.long	.LASF781
	.sleb128 5
	.uleb128 0x10
	.long	.LASF782
	.sleb128 6
	.uleb128 0x10
	.long	.LASF783
	.sleb128 7
	.uleb128 0x10
	.long	.LASF784
	.sleb128 8
	.uleb128 0x10
	.long	.LASF785
	.sleb128 9
	.uleb128 0x10
	.long	.LASF786
	.sleb128 10
	.uleb128 0x10
	.long	.LASF787
	.sleb128 11
	.uleb128 0x10
	.long	.LASF788
	.sleb128 12
	.uleb128 0x10
	.long	.LASF789
	.sleb128 13
	.uleb128 0x10
	.long	.LASF790
	.sleb128 14
	.uleb128 0x10
	.long	.LASF791
	.sleb128 15
	.uleb128 0x10
	.long	.LASF792
	.sleb128 16
	.uleb128 0x10
	.long	.LASF793
	.sleb128 17
	.uleb128 0x10
	.long	.LASF794
	.sleb128 18
	.uleb128 0x10
	.long	.LASF795
	.sleb128 19
	.uleb128 0x10
	.long	.LASF796
	.sleb128 20
	.uleb128 0x10
	.long	.LASF797
	.sleb128 21
	.uleb128 0x10
	.long	.LASF798
	.sleb128 22
	.uleb128 0x10
	.long	.LASF799
	.sleb128 23
	.uleb128 0x10
	.long	.LASF800
	.sleb128 24
	.uleb128 0x10
	.long	.LASF801
	.sleb128 25
	.uleb128 0x10
	.long	.LASF802
	.sleb128 26
	.uleb128 0x10
	.long	.LASF803
	.sleb128 27
	.uleb128 0x10
	.long	.LASF804
	.sleb128 28
	.uleb128 0x10
	.long	.LASF805
	.sleb128 29
	.uleb128 0x10
	.long	.LASF806
	.sleb128 30
	.uleb128 0x10
	.long	.LASF807
	.sleb128 31
	.uleb128 0x10
	.long	.LASF808
	.sleb128 32
	.uleb128 0x10
	.long	.LASF809
	.sleb128 33
	.uleb128 0x10
	.long	.LASF810
	.sleb128 34
	.uleb128 0x10
	.long	.LASF811
	.sleb128 35
	.uleb128 0x10
	.long	.LASF812
	.sleb128 36
	.uleb128 0x10
	.long	.LASF813
	.sleb128 37
	.uleb128 0x10
	.long	.LASF814
	.sleb128 38
	.uleb128 0x10
	.long	.LASF815
	.sleb128 39
	.uleb128 0x10
	.long	.LASF816
	.sleb128 40
	.uleb128 0x10
	.long	.LASF817
	.sleb128 41
	.uleb128 0x10
	.long	.LASF818
	.sleb128 42
	.uleb128 0x10
	.long	.LASF819
	.sleb128 43
	.uleb128 0x10
	.long	.LASF820
	.sleb128 44
	.uleb128 0x10
	.long	.LASF821
	.sleb128 45
	.uleb128 0x10
	.long	.LASF822
	.sleb128 46
	.uleb128 0x27
	.string	"SET"
	.sleb128 47
	.uleb128 0x27
	.string	"USE"
	.sleb128 48
	.uleb128 0x10
	.long	.LASF823
	.sleb128 49
	.uleb128 0x10
	.long	.LASF824
	.sleb128 50
	.uleb128 0x10
	.long	.LASF825
	.sleb128 51
	.uleb128 0x10
	.long	.LASF826
	.sleb128 52
	.uleb128 0x10
	.long	.LASF827
	.sleb128 53
	.uleb128 0x10
	.long	.LASF828
	.sleb128 54
	.uleb128 0x10
	.long	.LASF829
	.sleb128 55
	.uleb128 0x10
	.long	.LASF830
	.sleb128 56
	.uleb128 0x10
	.long	.LASF831
	.sleb128 57
	.uleb128 0x10
	.long	.LASF832
	.sleb128 58
	.uleb128 0x27
	.string	"PC"
	.sleb128 59
	.uleb128 0x10
	.long	.LASF833
	.sleb128 60
	.uleb128 0x27
	.string	"REG"
	.sleb128 61
	.uleb128 0x10
	.long	.LASF834
	.sleb128 62
	.uleb128 0x10
	.long	.LASF835
	.sleb128 63
	.uleb128 0x10
	.long	.LASF836
	.sleb128 64
	.uleb128 0x10
	.long	.LASF837
	.sleb128 65
	.uleb128 0x27
	.string	"MEM"
	.sleb128 66
	.uleb128 0x10
	.long	.LASF838
	.sleb128 67
	.uleb128 0x10
	.long	.LASF839
	.sleb128 68
	.uleb128 0x27
	.string	"CC0"
	.sleb128 69
	.uleb128 0x10
	.long	.LASF840
	.sleb128 70
	.uleb128 0x10
	.long	.LASF841
	.sleb128 71
	.uleb128 0x10
	.long	.LASF842
	.sleb128 72
	.uleb128 0x10
	.long	.LASF843
	.sleb128 73
	.uleb128 0x10
	.long	.LASF844
	.sleb128 74
	.uleb128 0x10
	.long	.LASF845
	.sleb128 75
	.uleb128 0x10
	.long	.LASF846
	.sleb128 76
	.uleb128 0x27
	.string	"NEG"
	.sleb128 77
	.uleb128 0x10
	.long	.LASF847
	.sleb128 78
	.uleb128 0x27
	.string	"DIV"
	.sleb128 79
	.uleb128 0x27
	.string	"MOD"
	.sleb128 80
	.uleb128 0x10
	.long	.LASF848
	.sleb128 81
	.uleb128 0x10
	.long	.LASF849
	.sleb128 82
	.uleb128 0x27
	.string	"AND"
	.sleb128 83
	.uleb128 0x27
	.string	"IOR"
	.sleb128 84
	.uleb128 0x27
	.string	"XOR"
	.sleb128 85
	.uleb128 0x27
	.string	"NOT"
	.sleb128 86
	.uleb128 0x10
	.long	.LASF850
	.sleb128 87
	.uleb128 0x10
	.long	.LASF851
	.sleb128 88
	.uleb128 0x10
	.long	.LASF852
	.sleb128 89
	.uleb128 0x10
	.long	.LASF853
	.sleb128 90
	.uleb128 0x10
	.long	.LASF854
	.sleb128 91
	.uleb128 0x10
	.long	.LASF855
	.sleb128 92
	.uleb128 0x10
	.long	.LASF856
	.sleb128 93
	.uleb128 0x10
	.long	.LASF857
	.sleb128 94
	.uleb128 0x10
	.long	.LASF858
	.sleb128 95
	.uleb128 0x10
	.long	.LASF859
	.sleb128 96
	.uleb128 0x10
	.long	.LASF860
	.sleb128 97
	.uleb128 0x10
	.long	.LASF861
	.sleb128 98
	.uleb128 0x10
	.long	.LASF862
	.sleb128 99
	.uleb128 0x10
	.long	.LASF863
	.sleb128 100
	.uleb128 0x10
	.long	.LASF864
	.sleb128 101
	.uleb128 0x27
	.string	"NE"
	.sleb128 102
	.uleb128 0x27
	.string	"EQ"
	.sleb128 103
	.uleb128 0x27
	.string	"GE"
	.sleb128 104
	.uleb128 0x27
	.string	"GT"
	.sleb128 105
	.uleb128 0x27
	.string	"LE"
	.sleb128 106
	.uleb128 0x27
	.string	"LT"
	.sleb128 107
	.uleb128 0x27
	.string	"GEU"
	.sleb128 108
	.uleb128 0x27
	.string	"GTU"
	.sleb128 109
	.uleb128 0x27
	.string	"LEU"
	.sleb128 110
	.uleb128 0x27
	.string	"LTU"
	.sleb128 111
	.uleb128 0x10
	.long	.LASF865
	.sleb128 112
	.uleb128 0x10
	.long	.LASF866
	.sleb128 113
	.uleb128 0x10
	.long	.LASF867
	.sleb128 114
	.uleb128 0x10
	.long	.LASF868
	.sleb128 115
	.uleb128 0x10
	.long	.LASF869
	.sleb128 116
	.uleb128 0x10
	.long	.LASF870
	.sleb128 117
	.uleb128 0x10
	.long	.LASF871
	.sleb128 118
	.uleb128 0x10
	.long	.LASF872
	.sleb128 119
	.uleb128 0x10
	.long	.LASF873
	.sleb128 120
	.uleb128 0x10
	.long	.LASF874
	.sleb128 121
	.uleb128 0x10
	.long	.LASF875
	.sleb128 122
	.uleb128 0x10
	.long	.LASF876
	.sleb128 123
	.uleb128 0x10
	.long	.LASF877
	.sleb128 124
	.uleb128 0x10
	.long	.LASF878
	.sleb128 125
	.uleb128 0x27
	.string	"FIX"
	.sleb128 126
	.uleb128 0x10
	.long	.LASF879
	.sleb128 127
	.uleb128 0x10
	.long	.LASF880
	.sleb128 128
	.uleb128 0x27
	.string	"ABS"
	.sleb128 129
	.uleb128 0x10
	.long	.LASF881
	.sleb128 130
	.uleb128 0x27
	.string	"FFS"
	.sleb128 131
	.uleb128 0x10
	.long	.LASF882
	.sleb128 132
	.uleb128 0x10
	.long	.LASF883
	.sleb128 133
	.uleb128 0x10
	.long	.LASF884
	.sleb128 134
	.uleb128 0x10
	.long	.LASF885
	.sleb128 135
	.uleb128 0x10
	.long	.LASF886
	.sleb128 136
	.uleb128 0x10
	.long	.LASF887
	.sleb128 137
	.uleb128 0x10
	.long	.LASF888
	.sleb128 138
	.uleb128 0x10
	.long	.LASF889
	.sleb128 139
	.uleb128 0x10
	.long	.LASF890
	.sleb128 140
	.uleb128 0x10
	.long	.LASF891
	.sleb128 141
	.uleb128 0x10
	.long	.LASF892
	.sleb128 142
	.uleb128 0x10
	.long	.LASF893
	.sleb128 143
	.uleb128 0x10
	.long	.LASF894
	.sleb128 144
	.uleb128 0x10
	.long	.LASF895
	.sleb128 145
	.uleb128 0x10
	.long	.LASF896
	.sleb128 146
	.uleb128 0x10
	.long	.LASF897
	.sleb128 147
	.uleb128 0x10
	.long	.LASF898
	.sleb128 148
	.uleb128 0x10
	.long	.LASF899
	.sleb128 149
	.uleb128 0x10
	.long	.LASF900
	.sleb128 150
	.uleb128 0x10
	.long	.LASF901
	.sleb128 151
	.uleb128 0x27
	.string	"PHI"
	.sleb128 152
	.uleb128 0x10
	.long	.LASF902
	.sleb128 153
	.byte	0
	.uleb128 0x1c
	.byte	0x4
	.byte	0x2
	.byte	0x44
	.long	0x2747
	.uleb128 0x5
	.long	.LASF903
	.byte	0x2
	.byte	0x47
	.long	0x368
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0
	.uleb128 0x5
	.long	.LASF904
	.byte	0x2
	.byte	0x49
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0
	.uleb128 0x5
	.long	.LASF905
	.byte	0x2
	.byte	0x4a
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0
	.uleb128 0x5
	.long	.LASF906
	.byte	0x2
	.byte	0x4c
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0
	.uleb128 0x5
	.long	.LASF907
	.byte	0x2
	.byte	0x4e
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0
	.uleb128 0x5
	.long	.LASF908
	.byte	0x2
	.byte	0x50
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0
	.uleb128 0x5
	.long	.LASF909
	.byte	0x2
	.byte	0x53
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0
	.uleb128 0x5
	.long	.LASF910
	.byte	0x2
	.byte	0x55
	.long	0x368
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.long	.LASF911
	.byte	0x2
	.byte	0x56
	.long	0x26c6
	.uleb128 0x1c
	.byte	0x28
	.byte	0x2
	.byte	0x5c
	.long	0x2797
	.uleb128 0x8
	.long	.LASF912
	.byte	0x2
	.byte	0x5e
	.long	0x37c
	.byte	0
	.uleb128 0x8
	.long	.LASF566
	.byte	0x2
	.byte	0x5f
	.long	0x123
	.byte	0x8
	.uleb128 0x8
	.long	.LASF913
	.byte	0x2
	.byte	0x60
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF536
	.byte	0x2
	.byte	0x61
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF548
	.byte	0x2
	.byte	0x62
	.long	0x368
	.byte	0x20
	.byte	0
	.uleb128 0x7
	.long	.LASF914
	.byte	0x2
	.byte	0x63
	.long	0x2752
	.uleb128 0x28
	.long	.LASF915
	.byte	0x8
	.byte	0x2
	.byte	0x67
	.long	0x283d
	.uleb128 0x29
	.long	.LASF916
	.byte	0x2
	.byte	0x69
	.long	0x37c
	.uleb128 0x29
	.long	.LASF917
	.byte	0x2
	.byte	0x6a
	.long	0x1e3
	.uleb128 0x29
	.long	.LASF918
	.byte	0x2
	.byte	0x6b
	.long	0x368
	.uleb128 0x29
	.long	.LASF919
	.byte	0x2
	.byte	0x6c
	.long	0x5da
	.uleb128 0x2a
	.string	"rtx"
	.byte	0x2
	.byte	0x6d
	.long	0x2d
	.uleb128 0x29
	.long	.LASF10
	.byte	0x2
	.byte	0x6e
	.long	0xed
	.uleb128 0x29
	.long	.LASF920
	.byte	0x2
	.byte	0x6f
	.long	0x620
	.uleb128 0x29
	.long	.LASF921
	.byte	0x2
	.byte	0x70
	.long	0x2747
	.uleb128 0x29
	.long	.LASF922
	.byte	0x2
	.byte	0x71
	.long	0x2842
	.uleb128 0x29
	.long	.LASF923
	.byte	0x2
	.byte	0x72
	.long	0x284d
	.uleb128 0x29
	.long	.LASF924
	.byte	0x2
	.byte	0x73
	.long	0x123
	.uleb128 0x2a
	.string	"bb"
	.byte	0x2
	.byte	0x74
	.long	0x2858
	.uleb128 0x29
	.long	.LASF925
	.byte	0x2
	.byte	0x75
	.long	0x285e
	.byte	0
	.uleb128 0x21
	.long	.LASF926
	.uleb128 0x3
	.byte	0x8
	.long	0x283d
	.uleb128 0x21
	.long	.LASF927
	.uleb128 0x3
	.byte	0x8
	.long	0x2848
	.uleb128 0x21
	.long	.LASF928
	.uleb128 0x3
	.byte	0x8
	.long	0x2853
	.uleb128 0x3
	.byte	0x8
	.long	0x2797
	.uleb128 0x7
	.long	.LASF929
	.byte	0x2
	.byte	0x76
	.long	0x27a2
	.uleb128 0x14
	.long	0x2864
	.long	0x287f
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x2d
	.long	0x288f
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0xf
	.long	.LASF930
	.byte	0x4
	.byte	0x2
	.value	0x1c3
	.long	0x2951
	.uleb128 0x10
	.long	.LASF931
	.sleb128 1
	.uleb128 0x10
	.long	.LASF932
	.sleb128 2
	.uleb128 0x10
	.long	.LASF933
	.sleb128 3
	.uleb128 0x10
	.long	.LASF934
	.sleb128 4
	.uleb128 0x10
	.long	.LASF935
	.sleb128 5
	.uleb128 0x10
	.long	.LASF936
	.sleb128 6
	.uleb128 0x10
	.long	.LASF937
	.sleb128 7
	.uleb128 0x10
	.long	.LASF938
	.sleb128 8
	.uleb128 0x10
	.long	.LASF939
	.sleb128 9
	.uleb128 0x10
	.long	.LASF940
	.sleb128 10
	.uleb128 0x10
	.long	.LASF941
	.sleb128 11
	.uleb128 0x10
	.long	.LASF942
	.sleb128 12
	.uleb128 0x10
	.long	.LASF943
	.sleb128 13
	.uleb128 0x10
	.long	.LASF944
	.sleb128 14
	.uleb128 0x10
	.long	.LASF945
	.sleb128 15
	.uleb128 0x10
	.long	.LASF946
	.sleb128 16
	.uleb128 0x10
	.long	.LASF947
	.sleb128 17
	.uleb128 0x10
	.long	.LASF948
	.sleb128 18
	.uleb128 0x10
	.long	.LASF949
	.sleb128 19
	.uleb128 0x10
	.long	.LASF950
	.sleb128 20
	.uleb128 0x10
	.long	.LASF951
	.sleb128 21
	.uleb128 0x10
	.long	.LASF952
	.sleb128 22
	.uleb128 0x10
	.long	.LASF953
	.sleb128 23
	.uleb128 0x10
	.long	.LASF954
	.sleb128 24
	.uleb128 0x10
	.long	.LASF955
	.sleb128 25
	.uleb128 0x10
	.long	.LASF956
	.sleb128 26
	.uleb128 0x10
	.long	.LASF957
	.sleb128 27
	.uleb128 0x10
	.long	.LASF958
	.sleb128 28
	.uleb128 0x10
	.long	.LASF959
	.sleb128 29
	.uleb128 0x10
	.long	.LASF960
	.sleb128 30
	.byte	0
	.uleb128 0xf
	.long	.LASF961
	.byte	0x4
	.byte	0x2
	.value	0x297
	.long	0x2a00
	.uleb128 0x10
	.long	.LASF962
	.sleb128 -100
	.uleb128 0x10
	.long	.LASF963
	.sleb128 -99
	.uleb128 0x10
	.long	.LASF964
	.sleb128 -98
	.uleb128 0x10
	.long	.LASF965
	.sleb128 -97
	.uleb128 0x10
	.long	.LASF966
	.sleb128 -96
	.uleb128 0x10
	.long	.LASF967
	.sleb128 -95
	.uleb128 0x10
	.long	.LASF968
	.sleb128 -94
	.uleb128 0x10
	.long	.LASF969
	.sleb128 -93
	.uleb128 0x10
	.long	.LASF970
	.sleb128 -92
	.uleb128 0x10
	.long	.LASF971
	.sleb128 -91
	.uleb128 0x10
	.long	.LASF972
	.sleb128 -90
	.uleb128 0x10
	.long	.LASF973
	.sleb128 -89
	.uleb128 0x10
	.long	.LASF974
	.sleb128 -88
	.uleb128 0x10
	.long	.LASF975
	.sleb128 -87
	.uleb128 0x10
	.long	.LASF976
	.sleb128 -86
	.uleb128 0x10
	.long	.LASF977
	.sleb128 -85
	.uleb128 0x10
	.long	.LASF978
	.sleb128 -84
	.uleb128 0x10
	.long	.LASF979
	.sleb128 -83
	.uleb128 0x10
	.long	.LASF980
	.sleb128 -82
	.uleb128 0x10
	.long	.LASF981
	.sleb128 -81
	.uleb128 0x10
	.long	.LASF982
	.sleb128 -80
	.uleb128 0x10
	.long	.LASF983
	.sleb128 -79
	.uleb128 0x10
	.long	.LASF984
	.sleb128 -78
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2d
	.uleb128 0xf
	.long	.LASF985
	.byte	0x4
	.byte	0x2
	.value	0x630
	.long	0x2a5c
	.uleb128 0x10
	.long	.LASF986
	.sleb128 0
	.uleb128 0x10
	.long	.LASF987
	.sleb128 1
	.uleb128 0x10
	.long	.LASF988
	.sleb128 2
	.uleb128 0x10
	.long	.LASF989
	.sleb128 3
	.uleb128 0x10
	.long	.LASF990
	.sleb128 4
	.uleb128 0x10
	.long	.LASF991
	.sleb128 5
	.uleb128 0x10
	.long	.LASF992
	.sleb128 6
	.uleb128 0x10
	.long	.LASF993
	.sleb128 7
	.uleb128 0x10
	.long	.LASF994
	.sleb128 8
	.uleb128 0x10
	.long	.LASF995
	.sleb128 9
	.uleb128 0x10
	.long	.LASF996
	.sleb128 10
	.uleb128 0x10
	.long	.LASF997
	.sleb128 11
	.byte	0
	.uleb128 0x4
	.long	.LASF998
	.byte	0x10
	.byte	0x12
	.byte	0x24
	.long	0x2a81
	.uleb128 0x6
	.string	"rtx"
	.byte	0x12
	.byte	0x32
	.long	0x38
	.byte	0
	.uleb128 0x6
	.string	"age"
	.byte	0x12
	.byte	0x36
	.long	0x368
	.byte	0x8
	.byte	0
	.uleb128 0x28
	.long	.LASF999
	.byte	0x10
	.byte	0x12
	.byte	0x3a
	.long	0x2b66
	.uleb128 0x2a
	.string	"c"
	.byte	0x12
	.byte	0x3b
	.long	0x5b4
	.uleb128 0x2a
	.string	"uc"
	.byte	0x12
	.byte	0x3c
	.long	0x2b66
	.uleb128 0x2a
	.string	"s"
	.byte	0x12
	.byte	0x3d
	.long	0x2b76
	.uleb128 0x2a
	.string	"us"
	.byte	0x12
	.byte	0x3e
	.long	0x2b86
	.uleb128 0x2a
	.string	"i"
	.byte	0x12
	.byte	0x3f
	.long	0x2b96
	.uleb128 0x2a
	.string	"u"
	.byte	0x12
	.byte	0x40
	.long	0x2ba6
	.uleb128 0x2a
	.string	"l"
	.byte	0x12
	.byte	0x41
	.long	0x2bb6
	.uleb128 0x2a
	.string	"ul"
	.byte	0x12
	.byte	0x42
	.long	0x2bc6
	.uleb128 0x29
	.long	.LASF1000
	.byte	0x12
	.byte	0x43
	.long	0x2bb6
	.uleb128 0x29
	.long	.LASF1001
	.byte	0x12
	.byte	0x44
	.long	0x2bc6
	.uleb128 0x29
	.long	.LASF1002
	.byte	0x12
	.byte	0x45
	.long	0x2bd6
	.uleb128 0x29
	.long	.LASF1003
	.byte	0x12
	.byte	0x46
	.long	0x2be6
	.uleb128 0x2a
	.string	"rtx"
	.byte	0x12
	.byte	0x47
	.long	0x2bf6
	.uleb128 0x29
	.long	.LASF10
	.byte	0x12
	.byte	0x48
	.long	0x2c06
	.uleb128 0x29
	.long	.LASF15
	.byte	0x12
	.byte	0x49
	.long	0x2c16
	.uleb128 0x29
	.long	.LASF1004
	.byte	0x12
	.byte	0x4a
	.long	0x2c26
	.uleb128 0x29
	.long	.LASF1005
	.byte	0x12
	.byte	0x4b
	.long	0x2c36
	.uleb128 0x2a
	.string	"reg"
	.byte	0x12
	.byte	0x4c
	.long	0x2c51
	.uleb128 0x29
	.long	.LASF1006
	.byte	0x12
	.byte	0x4d
	.long	0x2cf8
	.uleb128 0x2a
	.string	"bb"
	.byte	0x12
	.byte	0x4e
	.long	0x2d08
	.uleb128 0x2a
	.string	"te"
	.byte	0x12
	.byte	0x4f
	.long	0x2d18
	.byte	0
	.uleb128 0x14
	.long	0x395
	.long	0x2b76
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3aa
	.long	0x2b86
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x39c
	.long	0x2b96
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x1e3
	.long	0x2ba6
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x368
	.long	0x2bb6
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x37c
	.long	0x2bc6
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x38e
	.long	0x2bd6
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x36f
	.long	0x2be6
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3c7
	.long	0x2bf6
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x38
	.long	0x2c06
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0xf8
	.long	0x2c16
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x12e
	.long	0x2c26
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x284d
	.long	0x2c36
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x2c46
	.long	0x2c46
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2c4c
	.uleb128 0x21
	.long	.LASF1007
	.uleb128 0x14
	.long	0x2c61
	.long	0x2c61
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2c67
	.uleb128 0x4
	.long	.LASF1008
	.byte	0x2c
	.byte	0x13
	.byte	0x2d
	.long	0x2cf8
	.uleb128 0x8
	.long	.LASF1009
	.byte	0x13
	.byte	0x2f
	.long	0x1e3
	.byte	0
	.uleb128 0x8
	.long	.LASF1010
	.byte	0x13
	.byte	0x30
	.long	0x1e3
	.byte	0x4
	.uleb128 0x8
	.long	.LASF1011
	.byte	0x13
	.byte	0x31
	.long	0x1e3
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1012
	.byte	0x13
	.byte	0x34
	.long	0x1e3
	.byte	0xc
	.uleb128 0x8
	.long	.LASF1013
	.byte	0x13
	.byte	0x37
	.long	0x1e3
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1014
	.byte	0x13
	.byte	0x38
	.long	0x1e3
	.byte	0x14
	.uleb128 0x8
	.long	.LASF1015
	.byte	0x13
	.byte	0x39
	.long	0x1e3
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1016
	.byte	0x13
	.byte	0x3a
	.long	0x1e3
	.byte	0x1c
	.uleb128 0x8
	.long	.LASF1017
	.byte	0x13
	.byte	0x3b
	.long	0x1e3
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1018
	.byte	0x13
	.byte	0x3c
	.long	0x1e3
	.byte	0x24
	.uleb128 0x8
	.long	.LASF1019
	.byte	0x13
	.byte	0x3d
	.long	0x3cd
	.byte	0x28
	.byte	0
	.uleb128 0x14
	.long	0x2a5c
	.long	0x2d08
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x2858
	.long	0x2d18
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x2d28
	.long	0x2d28
	.uleb128 0x15
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2d2e
	.uleb128 0x21
	.long	.LASF1020
	.uleb128 0x7
	.long	.LASF1021
	.byte	0x12
	.byte	0x50
	.long	0x2a81
	.uleb128 0x4
	.long	.LASF1022
	.byte	0x30
	.byte	0x12
	.byte	0x53
	.long	0x2d87
	.uleb128 0x8
	.long	.LASF1023
	.byte	0x12
	.byte	0x54
	.long	0x383
	.byte	0
	.uleb128 0x8
	.long	.LASF1024
	.byte	0x12
	.byte	0x55
	.long	0x383
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1025
	.byte	0x12
	.byte	0x57
	.long	0x383
	.byte	0x10
	.uleb128 0x8
	.long	.LASF552
	.byte	0x12
	.byte	0x58
	.long	0x5da
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1026
	.byte	0x12
	.byte	0x59
	.long	0x2d33
	.byte	0x20
	.byte	0
	.uleb128 0x7
	.long	.LASF1027
	.byte	0x12
	.byte	0x5a
	.long	0x2d92
	.uleb128 0x3
	.byte	0x8
	.long	0x2d3e
	.uleb128 0x4
	.long	.LASF1028
	.byte	0x18
	.byte	0x10
	.byte	0x16
	.long	0x2dd5
	.uleb128 0x8
	.long	.LASF1029
	.byte	0x10
	.byte	0x18
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF1030
	.byte	0x10
	.byte	0x19
	.long	0x620
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1031
	.byte	0x10
	.byte	0x1a
	.long	0x1e3
	.byte	0xc
	.uleb128 0x8
	.long	.LASF1032
	.byte	0x10
	.byte	0x1b
	.long	0x2dd5
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2d98
	.uleb128 0x4
	.long	.LASF1033
	.byte	0x20
	.byte	0x10
	.byte	0x23
	.long	0x2e18
	.uleb128 0x8
	.long	.LASF1034
	.byte	0x10
	.byte	0x26
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF1035
	.byte	0x10
	.byte	0x26
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1036
	.byte	0x10
	.byte	0x27
	.long	0x123
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1032
	.byte	0x10
	.byte	0x28
	.long	0x2e18
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2ddb
	.uleb128 0x4
	.long	.LASF1037
	.byte	0x58
	.byte	0x10
	.byte	0x35
	.long	0x2ec7
	.uleb128 0x8
	.long	.LASF1038
	.byte	0x10
	.byte	0x39
	.long	0x1e3
	.byte	0
	.uleb128 0x8
	.long	.LASF1039
	.byte	0x10
	.byte	0x3c
	.long	0x1e3
	.byte	0x4
	.uleb128 0x8
	.long	.LASF1040
	.byte	0x10
	.byte	0x43
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1041
	.byte	0x10
	.byte	0x44
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1036
	.byte	0x10
	.byte	0x49
	.long	0x123
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1033
	.byte	0x10
	.byte	0x4f
	.long	0x2e18
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1042
	.byte	0x10
	.byte	0x53
	.long	0x1e3
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1043
	.byte	0x10
	.byte	0x57
	.long	0x1e3
	.byte	0x2c
	.uleb128 0x8
	.long	.LASF1044
	.byte	0x10
	.byte	0x58
	.long	0x5da
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1045
	.byte	0x10
	.byte	0x5e
	.long	0x1e3
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1046
	.byte	0x10
	.byte	0x63
	.long	0x2ec7
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1047
	.byte	0x10
	.byte	0x67
	.long	0x2219
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1048
	.byte	0x10
	.byte	0x6b
	.long	0x2a00
	.byte	0x50
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x395
	.uleb128 0x4
	.long	.LASF1049
	.byte	0x30
	.byte	0x10
	.byte	0x77
	.long	0x2f2e
	.uleb128 0x8
	.long	.LASF1050
	.byte	0x10
	.byte	0x7b
	.long	0x1e3
	.byte	0
	.uleb128 0x8
	.long	.LASF1051
	.byte	0x10
	.byte	0x8c
	.long	0x1e3
	.byte	0x4
	.uleb128 0x8
	.long	.LASF1052
	.byte	0x10
	.byte	0x92
	.long	0x1e3
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1053
	.byte	0x10
	.byte	0x97
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1054
	.byte	0x10
	.byte	0x9a
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1055
	.byte	0x10
	.byte	0x9d
	.long	0x2d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1056
	.byte	0x10
	.byte	0xa0
	.long	0x2d
	.byte	0x28
	.byte	0
	.uleb128 0x21
	.long	.LASF1057
	.uleb128 0x3
	.byte	0x8
	.long	0x2f2e
	.uleb128 0x21
	.long	.LASF1058
	.uleb128 0x3
	.byte	0x8
	.long	0x2f39
	.uleb128 0x3
	.byte	0x8
	.long	0x2ecd
	.uleb128 0x3
	.byte	0x8
	.long	0x2e1e
	.uleb128 0x21
	.long	.LASF1059
	.uleb128 0x3
	.byte	0x8
	.long	0x2f50
	.uleb128 0x21
	.long	.LASF1060
	.uleb128 0x3
	.byte	0x8
	.long	0x2f5b
	.uleb128 0x21
	.long	.LASF1061
	.uleb128 0x3
	.byte	0x8
	.long	0x2f66
	.uleb128 0x21
	.long	.LASF1062
	.uleb128 0x3
	.byte	0x8
	.long	0x2f71
	.uleb128 0x21
	.long	.LASF1063
	.uleb128 0x3
	.byte	0x8
	.long	0x2f7c
	.uleb128 0x19
	.long	.LASF1064
	.byte	0x4
	.byte	0x14
	.byte	0x34
	.long	0x2fb2
	.uleb128 0x10
	.long	.LASF1065
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1066
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1067
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1068
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1069
	.sleb128 4
	.byte	0
	.uleb128 0x19
	.long	.LASF1070
	.byte	0x4
	.byte	0x15
	.byte	0x19
	.long	0x322d
	.uleb128 0x10
	.long	.LASF1071
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1072
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1073
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1074
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1075
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1076
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1077
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1078
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1079
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1080
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1081
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1082
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1083
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1084
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1085
	.sleb128 14
	.uleb128 0x10
	.long	.LASF1086
	.sleb128 15
	.uleb128 0x10
	.long	.LASF1087
	.sleb128 16
	.uleb128 0x10
	.long	.LASF1088
	.sleb128 17
	.uleb128 0x10
	.long	.LASF1089
	.sleb128 18
	.uleb128 0x10
	.long	.LASF1090
	.sleb128 19
	.uleb128 0x10
	.long	.LASF1091
	.sleb128 20
	.uleb128 0x10
	.long	.LASF1092
	.sleb128 21
	.uleb128 0x10
	.long	.LASF1093
	.sleb128 22
	.uleb128 0x10
	.long	.LASF1094
	.sleb128 23
	.uleb128 0x10
	.long	.LASF1095
	.sleb128 24
	.uleb128 0x10
	.long	.LASF1096
	.sleb128 25
	.uleb128 0x10
	.long	.LASF1097
	.sleb128 26
	.uleb128 0x10
	.long	.LASF1098
	.sleb128 27
	.uleb128 0x10
	.long	.LASF1099
	.sleb128 28
	.uleb128 0x10
	.long	.LASF1100
	.sleb128 29
	.uleb128 0x10
	.long	.LASF1101
	.sleb128 30
	.uleb128 0x10
	.long	.LASF1102
	.sleb128 31
	.uleb128 0x10
	.long	.LASF1103
	.sleb128 32
	.uleb128 0x10
	.long	.LASF1104
	.sleb128 33
	.uleb128 0x10
	.long	.LASF1105
	.sleb128 34
	.uleb128 0x10
	.long	.LASF1106
	.sleb128 35
	.uleb128 0x10
	.long	.LASF1107
	.sleb128 36
	.uleb128 0x10
	.long	.LASF1108
	.sleb128 37
	.uleb128 0x10
	.long	.LASF1109
	.sleb128 38
	.uleb128 0x10
	.long	.LASF1110
	.sleb128 39
	.uleb128 0x10
	.long	.LASF1111
	.sleb128 40
	.uleb128 0x10
	.long	.LASF1112
	.sleb128 41
	.uleb128 0x10
	.long	.LASF1113
	.sleb128 42
	.uleb128 0x10
	.long	.LASF1114
	.sleb128 43
	.uleb128 0x10
	.long	.LASF1115
	.sleb128 44
	.uleb128 0x10
	.long	.LASF1116
	.sleb128 45
	.uleb128 0x10
	.long	.LASF1117
	.sleb128 46
	.uleb128 0x10
	.long	.LASF1118
	.sleb128 47
	.uleb128 0x10
	.long	.LASF1119
	.sleb128 48
	.uleb128 0x10
	.long	.LASF1120
	.sleb128 49
	.uleb128 0x10
	.long	.LASF1121
	.sleb128 50
	.uleb128 0x10
	.long	.LASF1122
	.sleb128 51
	.uleb128 0x10
	.long	.LASF1123
	.sleb128 52
	.uleb128 0x10
	.long	.LASF1124
	.sleb128 53
	.uleb128 0x10
	.long	.LASF1125
	.sleb128 54
	.uleb128 0x10
	.long	.LASF1126
	.sleb128 55
	.uleb128 0x10
	.long	.LASF1127
	.sleb128 56
	.uleb128 0x10
	.long	.LASF1128
	.sleb128 57
	.uleb128 0x10
	.long	.LASF1129
	.sleb128 58
	.uleb128 0x10
	.long	.LASF1130
	.sleb128 59
	.uleb128 0x10
	.long	.LASF1131
	.sleb128 60
	.uleb128 0x10
	.long	.LASF1132
	.sleb128 61
	.uleb128 0x10
	.long	.LASF1133
	.sleb128 62
	.uleb128 0x10
	.long	.LASF1134
	.sleb128 63
	.uleb128 0x10
	.long	.LASF1135
	.sleb128 64
	.uleb128 0x10
	.long	.LASF1136
	.sleb128 65
	.uleb128 0x10
	.long	.LASF1137
	.sleb128 66
	.uleb128 0x10
	.long	.LASF1138
	.sleb128 67
	.uleb128 0x10
	.long	.LASF1139
	.sleb128 68
	.uleb128 0x10
	.long	.LASF1140
	.sleb128 69
	.uleb128 0x10
	.long	.LASF1141
	.sleb128 70
	.uleb128 0x10
	.long	.LASF1142
	.sleb128 71
	.uleb128 0x10
	.long	.LASF1143
	.sleb128 72
	.uleb128 0x10
	.long	.LASF1144
	.sleb128 73
	.uleb128 0x10
	.long	.LASF1145
	.sleb128 74
	.uleb128 0x10
	.long	.LASF1146
	.sleb128 75
	.uleb128 0x10
	.long	.LASF1147
	.sleb128 76
	.uleb128 0x10
	.long	.LASF1148
	.sleb128 77
	.uleb128 0x10
	.long	.LASF1149
	.sleb128 78
	.uleb128 0x10
	.long	.LASF1150
	.sleb128 79
	.uleb128 0x10
	.long	.LASF1151
	.sleb128 80
	.uleb128 0x10
	.long	.LASF1152
	.sleb128 81
	.uleb128 0x10
	.long	.LASF1153
	.sleb128 82
	.uleb128 0x10
	.long	.LASF1154
	.sleb128 83
	.uleb128 0x10
	.long	.LASF1155
	.sleb128 84
	.uleb128 0x10
	.long	.LASF1156
	.sleb128 85
	.uleb128 0x10
	.long	.LASF1157
	.sleb128 86
	.uleb128 0x10
	.long	.LASF1158
	.sleb128 87
	.uleb128 0x10
	.long	.LASF1159
	.sleb128 88
	.uleb128 0x10
	.long	.LASF1160
	.sleb128 89
	.uleb128 0x10
	.long	.LASF1161
	.sleb128 90
	.uleb128 0x10
	.long	.LASF1162
	.sleb128 91
	.uleb128 0x10
	.long	.LASF1163
	.sleb128 92
	.uleb128 0x10
	.long	.LASF1164
	.sleb128 93
	.uleb128 0x10
	.long	.LASF1165
	.sleb128 94
	.uleb128 0x10
	.long	.LASF1166
	.sleb128 95
	.uleb128 0x10
	.long	.LASF1167
	.sleb128 96
	.uleb128 0x10
	.long	.LASF1168
	.sleb128 97
	.byte	0
	.uleb128 0x19
	.long	.LASF1169
	.byte	0x4
	.byte	0x16
	.byte	0x2a
	.long	0x33ba
	.uleb128 0x10
	.long	.LASF1170
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1171
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1172
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1173
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1174
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1175
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1176
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1177
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1178
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1179
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1180
	.sleb128 15
	.uleb128 0x10
	.long	.LASF1181
	.sleb128 16
	.uleb128 0x10
	.long	.LASF1182
	.sleb128 17
	.uleb128 0x10
	.long	.LASF1183
	.sleb128 18
	.uleb128 0x10
	.long	.LASF1184
	.sleb128 19
	.uleb128 0x10
	.long	.LASF1185
	.sleb128 21
	.uleb128 0x10
	.long	.LASF1186
	.sleb128 22
	.uleb128 0x10
	.long	.LASF1187
	.sleb128 23
	.uleb128 0x10
	.long	.LASF1188
	.sleb128 24
	.uleb128 0x10
	.long	.LASF1189
	.sleb128 25
	.uleb128 0x10
	.long	.LASF1190
	.sleb128 26
	.uleb128 0x10
	.long	.LASF1191
	.sleb128 27
	.uleb128 0x10
	.long	.LASF1192
	.sleb128 28
	.uleb128 0x10
	.long	.LASF1193
	.sleb128 29
	.uleb128 0x10
	.long	.LASF1194
	.sleb128 30
	.uleb128 0x10
	.long	.LASF1195
	.sleb128 31
	.uleb128 0x10
	.long	.LASF1196
	.sleb128 32
	.uleb128 0x10
	.long	.LASF1197
	.sleb128 33
	.uleb128 0x10
	.long	.LASF1198
	.sleb128 34
	.uleb128 0x10
	.long	.LASF1199
	.sleb128 35
	.uleb128 0x10
	.long	.LASF1200
	.sleb128 36
	.uleb128 0x10
	.long	.LASF1201
	.sleb128 37
	.uleb128 0x10
	.long	.LASF1202
	.sleb128 38
	.uleb128 0x10
	.long	.LASF1203
	.sleb128 39
	.uleb128 0x10
	.long	.LASF1204
	.sleb128 40
	.uleb128 0x10
	.long	.LASF1205
	.sleb128 41
	.uleb128 0x10
	.long	.LASF1206
	.sleb128 42
	.uleb128 0x10
	.long	.LASF1207
	.sleb128 43
	.uleb128 0x10
	.long	.LASF1208
	.sleb128 44
	.uleb128 0x10
	.long	.LASF1209
	.sleb128 45
	.uleb128 0x10
	.long	.LASF1210
	.sleb128 46
	.uleb128 0x10
	.long	.LASF1211
	.sleb128 47
	.uleb128 0x10
	.long	.LASF1212
	.sleb128 48
	.uleb128 0x10
	.long	.LASF1213
	.sleb128 49
	.uleb128 0x10
	.long	.LASF1214
	.sleb128 50
	.uleb128 0x10
	.long	.LASF1215
	.sleb128 51
	.uleb128 0x10
	.long	.LASF1216
	.sleb128 52
	.uleb128 0x10
	.long	.LASF1217
	.sleb128 53
	.uleb128 0x10
	.long	.LASF1218
	.sleb128 54
	.uleb128 0x10
	.long	.LASF1219
	.sleb128 55
	.uleb128 0x10
	.long	.LASF1220
	.sleb128 56
	.uleb128 0x10
	.long	.LASF1221
	.sleb128 57
	.uleb128 0x10
	.long	.LASF1222
	.sleb128 58
	.uleb128 0x10
	.long	.LASF1223
	.sleb128 59
	.uleb128 0x10
	.long	.LASF1224
	.sleb128 60
	.uleb128 0x10
	.long	.LASF1225
	.sleb128 61
	.uleb128 0x10
	.long	.LASF1226
	.sleb128 16513
	.uleb128 0x10
	.long	.LASF1227
	.sleb128 16641
	.uleb128 0x10
	.long	.LASF1228
	.sleb128 16642
	.uleb128 0x10
	.long	.LASF1229
	.sleb128 16643
	.uleb128 0x10
	.long	.LASF1230
	.sleb128 16644
	.uleb128 0x10
	.long	.LASF1231
	.sleb128 16645
	.byte	0
	.uleb128 0x19
	.long	.LASF1232
	.byte	0x4
	.byte	0x16
	.byte	0x77
	.long	0x3445
	.uleb128 0x10
	.long	.LASF1233
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1234
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1235
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1236
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1237
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1238
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1239
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1240
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1241
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1242
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1243
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1244
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1245
	.sleb128 14
	.uleb128 0x10
	.long	.LASF1246
	.sleb128 15
	.uleb128 0x10
	.long	.LASF1247
	.sleb128 16
	.uleb128 0x10
	.long	.LASF1248
	.sleb128 17
	.uleb128 0x10
	.long	.LASF1249
	.sleb128 18
	.uleb128 0x10
	.long	.LASF1250
	.sleb128 19
	.uleb128 0x10
	.long	.LASF1251
	.sleb128 20
	.uleb128 0x10
	.long	.LASF1252
	.sleb128 21
	.uleb128 0x10
	.long	.LASF1253
	.sleb128 22
	.byte	0
	.uleb128 0x19
	.long	.LASF1254
	.byte	0x4
	.byte	0x16
	.byte	0x92
	.long	0x36c0
	.uleb128 0x10
	.long	.LASF1255
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1256
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1257
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1258
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1259
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1260
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1261
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1262
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1263
	.sleb128 15
	.uleb128 0x10
	.long	.LASF1264
	.sleb128 16
	.uleb128 0x10
	.long	.LASF1265
	.sleb128 17
	.uleb128 0x10
	.long	.LASF1266
	.sleb128 18
	.uleb128 0x10
	.long	.LASF1267
	.sleb128 19
	.uleb128 0x10
	.long	.LASF1268
	.sleb128 20
	.uleb128 0x10
	.long	.LASF1269
	.sleb128 21
	.uleb128 0x10
	.long	.LASF1270
	.sleb128 22
	.uleb128 0x10
	.long	.LASF1271
	.sleb128 23
	.uleb128 0x10
	.long	.LASF1272
	.sleb128 24
	.uleb128 0x10
	.long	.LASF1273
	.sleb128 25
	.uleb128 0x10
	.long	.LASF1274
	.sleb128 26
	.uleb128 0x10
	.long	.LASF1275
	.sleb128 27
	.uleb128 0x10
	.long	.LASF1276
	.sleb128 28
	.uleb128 0x10
	.long	.LASF1277
	.sleb128 29
	.uleb128 0x10
	.long	.LASF1278
	.sleb128 30
	.uleb128 0x10
	.long	.LASF1279
	.sleb128 32
	.uleb128 0x10
	.long	.LASF1280
	.sleb128 33
	.uleb128 0x10
	.long	.LASF1281
	.sleb128 34
	.uleb128 0x10
	.long	.LASF1282
	.sleb128 37
	.uleb128 0x10
	.long	.LASF1283
	.sleb128 39
	.uleb128 0x10
	.long	.LASF1284
	.sleb128 42
	.uleb128 0x10
	.long	.LASF1285
	.sleb128 44
	.uleb128 0x10
	.long	.LASF1286
	.sleb128 46
	.uleb128 0x10
	.long	.LASF1287
	.sleb128 47
	.uleb128 0x10
	.long	.LASF1288
	.sleb128 49
	.uleb128 0x10
	.long	.LASF1289
	.sleb128 50
	.uleb128 0x10
	.long	.LASF1290
	.sleb128 51
	.uleb128 0x10
	.long	.LASF1291
	.sleb128 52
	.uleb128 0x10
	.long	.LASF1292
	.sleb128 53
	.uleb128 0x10
	.long	.LASF1293
	.sleb128 54
	.uleb128 0x10
	.long	.LASF1294
	.sleb128 55
	.uleb128 0x10
	.long	.LASF1295
	.sleb128 56
	.uleb128 0x10
	.long	.LASF1296
	.sleb128 57
	.uleb128 0x10
	.long	.LASF1297
	.sleb128 58
	.uleb128 0x10
	.long	.LASF1298
	.sleb128 59
	.uleb128 0x10
	.long	.LASF1299
	.sleb128 60
	.uleb128 0x10
	.long	.LASF1300
	.sleb128 61
	.uleb128 0x10
	.long	.LASF1301
	.sleb128 62
	.uleb128 0x10
	.long	.LASF1302
	.sleb128 63
	.uleb128 0x10
	.long	.LASF1303
	.sleb128 64
	.uleb128 0x10
	.long	.LASF1304
	.sleb128 65
	.uleb128 0x10
	.long	.LASF1305
	.sleb128 66
	.uleb128 0x10
	.long	.LASF1306
	.sleb128 67
	.uleb128 0x10
	.long	.LASF1307
	.sleb128 68
	.uleb128 0x10
	.long	.LASF1308
	.sleb128 69
	.uleb128 0x10
	.long	.LASF1309
	.sleb128 70
	.uleb128 0x10
	.long	.LASF1310
	.sleb128 71
	.uleb128 0x10
	.long	.LASF1311
	.sleb128 72
	.uleb128 0x10
	.long	.LASF1312
	.sleb128 73
	.uleb128 0x10
	.long	.LASF1313
	.sleb128 74
	.uleb128 0x10
	.long	.LASF1314
	.sleb128 75
	.uleb128 0x10
	.long	.LASF1315
	.sleb128 76
	.uleb128 0x10
	.long	.LASF1316
	.sleb128 77
	.uleb128 0x10
	.long	.LASF1317
	.sleb128 78
	.uleb128 0x10
	.long	.LASF1318
	.sleb128 79
	.uleb128 0x10
	.long	.LASF1319
	.sleb128 80
	.uleb128 0x10
	.long	.LASF1320
	.sleb128 81
	.uleb128 0x10
	.long	.LASF1321
	.sleb128 82
	.uleb128 0x10
	.long	.LASF1322
	.sleb128 83
	.uleb128 0x10
	.long	.LASF1323
	.sleb128 84
	.uleb128 0x10
	.long	.LASF1324
	.sleb128 85
	.uleb128 0x10
	.long	.LASF1325
	.sleb128 86
	.uleb128 0x10
	.long	.LASF1326
	.sleb128 87
	.uleb128 0x10
	.long	.LASF1327
	.sleb128 88
	.uleb128 0x10
	.long	.LASF1328
	.sleb128 89
	.uleb128 0x10
	.long	.LASF1329
	.sleb128 8193
	.uleb128 0x10
	.long	.LASF1330
	.sleb128 8194
	.uleb128 0x10
	.long	.LASF1331
	.sleb128 8195
	.uleb128 0x10
	.long	.LASF1332
	.sleb128 8196
	.uleb128 0x10
	.long	.LASF1333
	.sleb128 8197
	.uleb128 0x10
	.long	.LASF1334
	.sleb128 8198
	.uleb128 0x10
	.long	.LASF1335
	.sleb128 8199
	.uleb128 0x10
	.long	.LASF1336
	.sleb128 8200
	.uleb128 0x10
	.long	.LASF1337
	.sleb128 8201
	.uleb128 0x10
	.long	.LASF1338
	.sleb128 8202
	.uleb128 0x10
	.long	.LASF1339
	.sleb128 8203
	.uleb128 0x10
	.long	.LASF1340
	.sleb128 8449
	.uleb128 0x10
	.long	.LASF1341
	.sleb128 8450
	.uleb128 0x10
	.long	.LASF1342
	.sleb128 8451
	.uleb128 0x10
	.long	.LASF1343
	.sleb128 8452
	.uleb128 0x10
	.long	.LASF1344
	.sleb128 8453
	.uleb128 0x10
	.long	.LASF1345
	.sleb128 8454
	.uleb128 0x10
	.long	.LASF1346
	.sleb128 8455
	.uleb128 0x10
	.long	.LASF1347
	.sleb128 8705
	.byte	0
	.uleb128 0x19
	.long	.LASF1348
	.byte	0x4
	.byte	0x16
	.byte	0xfb
	.long	0x3aa6
	.uleb128 0x10
	.long	.LASF1349
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1350
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1351
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1352
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1353
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1354
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1355
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1356
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1357
	.sleb128 14
	.uleb128 0x10
	.long	.LASF1358
	.sleb128 15
	.uleb128 0x10
	.long	.LASF1359
	.sleb128 16
	.uleb128 0x10
	.long	.LASF1360
	.sleb128 17
	.uleb128 0x10
	.long	.LASF1361
	.sleb128 18
	.uleb128 0x10
	.long	.LASF1362
	.sleb128 19
	.uleb128 0x10
	.long	.LASF1363
	.sleb128 20
	.uleb128 0x10
	.long	.LASF1364
	.sleb128 21
	.uleb128 0x10
	.long	.LASF1365
	.sleb128 22
	.uleb128 0x10
	.long	.LASF1366
	.sleb128 23
	.uleb128 0x10
	.long	.LASF1367
	.sleb128 24
	.uleb128 0x10
	.long	.LASF1368
	.sleb128 25
	.uleb128 0x10
	.long	.LASF1369
	.sleb128 26
	.uleb128 0x10
	.long	.LASF1370
	.sleb128 27
	.uleb128 0x10
	.long	.LASF1371
	.sleb128 28
	.uleb128 0x10
	.long	.LASF1372
	.sleb128 29
	.uleb128 0x10
	.long	.LASF1373
	.sleb128 30
	.uleb128 0x10
	.long	.LASF1374
	.sleb128 31
	.uleb128 0x10
	.long	.LASF1375
	.sleb128 32
	.uleb128 0x10
	.long	.LASF1376
	.sleb128 33
	.uleb128 0x10
	.long	.LASF1377
	.sleb128 34
	.uleb128 0x10
	.long	.LASF1378
	.sleb128 35
	.uleb128 0x10
	.long	.LASF1379
	.sleb128 36
	.uleb128 0x10
	.long	.LASF1380
	.sleb128 37
	.uleb128 0x10
	.long	.LASF1381
	.sleb128 38
	.uleb128 0x10
	.long	.LASF1382
	.sleb128 39
	.uleb128 0x10
	.long	.LASF1383
	.sleb128 40
	.uleb128 0x10
	.long	.LASF1384
	.sleb128 41
	.uleb128 0x10
	.long	.LASF1385
	.sleb128 42
	.uleb128 0x10
	.long	.LASF1386
	.sleb128 43
	.uleb128 0x10
	.long	.LASF1387
	.sleb128 44
	.uleb128 0x10
	.long	.LASF1388
	.sleb128 45
	.uleb128 0x10
	.long	.LASF1389
	.sleb128 46
	.uleb128 0x10
	.long	.LASF1390
	.sleb128 47
	.uleb128 0x10
	.long	.LASF1391
	.sleb128 48
	.uleb128 0x10
	.long	.LASF1392
	.sleb128 49
	.uleb128 0x10
	.long	.LASF1393
	.sleb128 50
	.uleb128 0x10
	.long	.LASF1394
	.sleb128 51
	.uleb128 0x10
	.long	.LASF1395
	.sleb128 52
	.uleb128 0x10
	.long	.LASF1396
	.sleb128 53
	.uleb128 0x10
	.long	.LASF1397
	.sleb128 54
	.uleb128 0x10
	.long	.LASF1398
	.sleb128 55
	.uleb128 0x10
	.long	.LASF1399
	.sleb128 56
	.uleb128 0x10
	.long	.LASF1400
	.sleb128 57
	.uleb128 0x10
	.long	.LASF1401
	.sleb128 58
	.uleb128 0x10
	.long	.LASF1402
	.sleb128 59
	.uleb128 0x10
	.long	.LASF1403
	.sleb128 60
	.uleb128 0x10
	.long	.LASF1404
	.sleb128 61
	.uleb128 0x10
	.long	.LASF1405
	.sleb128 62
	.uleb128 0x10
	.long	.LASF1406
	.sleb128 63
	.uleb128 0x10
	.long	.LASF1407
	.sleb128 64
	.uleb128 0x10
	.long	.LASF1408
	.sleb128 65
	.uleb128 0x10
	.long	.LASF1409
	.sleb128 66
	.uleb128 0x10
	.long	.LASF1410
	.sleb128 67
	.uleb128 0x10
	.long	.LASF1411
	.sleb128 68
	.uleb128 0x10
	.long	.LASF1412
	.sleb128 69
	.uleb128 0x10
	.long	.LASF1413
	.sleb128 70
	.uleb128 0x10
	.long	.LASF1414
	.sleb128 71
	.uleb128 0x10
	.long	.LASF1415
	.sleb128 72
	.uleb128 0x10
	.long	.LASF1416
	.sleb128 73
	.uleb128 0x10
	.long	.LASF1417
	.sleb128 74
	.uleb128 0x10
	.long	.LASF1418
	.sleb128 75
	.uleb128 0x10
	.long	.LASF1419
	.sleb128 76
	.uleb128 0x10
	.long	.LASF1420
	.sleb128 77
	.uleb128 0x10
	.long	.LASF1421
	.sleb128 78
	.uleb128 0x10
	.long	.LASF1422
	.sleb128 79
	.uleb128 0x10
	.long	.LASF1423
	.sleb128 80
	.uleb128 0x10
	.long	.LASF1424
	.sleb128 81
	.uleb128 0x10
	.long	.LASF1425
	.sleb128 82
	.uleb128 0x10
	.long	.LASF1426
	.sleb128 83
	.uleb128 0x10
	.long	.LASF1427
	.sleb128 84
	.uleb128 0x10
	.long	.LASF1428
	.sleb128 85
	.uleb128 0x10
	.long	.LASF1429
	.sleb128 86
	.uleb128 0x10
	.long	.LASF1430
	.sleb128 87
	.uleb128 0x10
	.long	.LASF1431
	.sleb128 88
	.uleb128 0x10
	.long	.LASF1432
	.sleb128 89
	.uleb128 0x10
	.long	.LASF1433
	.sleb128 90
	.uleb128 0x10
	.long	.LASF1434
	.sleb128 91
	.uleb128 0x10
	.long	.LASF1435
	.sleb128 92
	.uleb128 0x10
	.long	.LASF1436
	.sleb128 93
	.uleb128 0x10
	.long	.LASF1437
	.sleb128 94
	.uleb128 0x10
	.long	.LASF1438
	.sleb128 95
	.uleb128 0x10
	.long	.LASF1439
	.sleb128 96
	.uleb128 0x10
	.long	.LASF1440
	.sleb128 97
	.uleb128 0x10
	.long	.LASF1441
	.sleb128 98
	.uleb128 0x10
	.long	.LASF1442
	.sleb128 99
	.uleb128 0x10
	.long	.LASF1443
	.sleb128 100
	.uleb128 0x10
	.long	.LASF1444
	.sleb128 101
	.uleb128 0x10
	.long	.LASF1445
	.sleb128 102
	.uleb128 0x10
	.long	.LASF1446
	.sleb128 103
	.uleb128 0x10
	.long	.LASF1447
	.sleb128 104
	.uleb128 0x10
	.long	.LASF1448
	.sleb128 105
	.uleb128 0x10
	.long	.LASF1449
	.sleb128 106
	.uleb128 0x10
	.long	.LASF1450
	.sleb128 107
	.uleb128 0x10
	.long	.LASF1451
	.sleb128 108
	.uleb128 0x10
	.long	.LASF1452
	.sleb128 109
	.uleb128 0x10
	.long	.LASF1453
	.sleb128 110
	.uleb128 0x10
	.long	.LASF1454
	.sleb128 111
	.uleb128 0x10
	.long	.LASF1455
	.sleb128 112
	.uleb128 0x10
	.long	.LASF1456
	.sleb128 113
	.uleb128 0x10
	.long	.LASF1457
	.sleb128 114
	.uleb128 0x10
	.long	.LASF1458
	.sleb128 115
	.uleb128 0x10
	.long	.LASF1459
	.sleb128 116
	.uleb128 0x10
	.long	.LASF1460
	.sleb128 117
	.uleb128 0x10
	.long	.LASF1461
	.sleb128 118
	.uleb128 0x10
	.long	.LASF1462
	.sleb128 119
	.uleb128 0x10
	.long	.LASF1463
	.sleb128 120
	.uleb128 0x10
	.long	.LASF1464
	.sleb128 121
	.uleb128 0x10
	.long	.LASF1465
	.sleb128 122
	.uleb128 0x10
	.long	.LASF1466
	.sleb128 123
	.uleb128 0x10
	.long	.LASF1467
	.sleb128 124
	.uleb128 0x10
	.long	.LASF1468
	.sleb128 125
	.uleb128 0x10
	.long	.LASF1469
	.sleb128 126
	.uleb128 0x10
	.long	.LASF1470
	.sleb128 127
	.uleb128 0x10
	.long	.LASF1471
	.sleb128 128
	.uleb128 0x10
	.long	.LASF1472
	.sleb128 129
	.uleb128 0x10
	.long	.LASF1473
	.sleb128 130
	.uleb128 0x10
	.long	.LASF1474
	.sleb128 131
	.uleb128 0x10
	.long	.LASF1475
	.sleb128 132
	.uleb128 0x10
	.long	.LASF1476
	.sleb128 133
	.uleb128 0x10
	.long	.LASF1477
	.sleb128 134
	.uleb128 0x10
	.long	.LASF1478
	.sleb128 135
	.uleb128 0x10
	.long	.LASF1479
	.sleb128 136
	.uleb128 0x10
	.long	.LASF1480
	.sleb128 137
	.uleb128 0x10
	.long	.LASF1481
	.sleb128 138
	.uleb128 0x10
	.long	.LASF1482
	.sleb128 139
	.uleb128 0x10
	.long	.LASF1483
	.sleb128 140
	.uleb128 0x10
	.long	.LASF1484
	.sleb128 141
	.uleb128 0x10
	.long	.LASF1485
	.sleb128 142
	.uleb128 0x10
	.long	.LASF1486
	.sleb128 143
	.uleb128 0x10
	.long	.LASF1487
	.sleb128 144
	.uleb128 0x10
	.long	.LASF1488
	.sleb128 145
	.uleb128 0x10
	.long	.LASF1489
	.sleb128 146
	.uleb128 0x10
	.long	.LASF1490
	.sleb128 147
	.uleb128 0x10
	.long	.LASF1491
	.sleb128 148
	.uleb128 0x10
	.long	.LASF1492
	.sleb128 149
	.uleb128 0x10
	.long	.LASF1493
	.sleb128 150
	.uleb128 0x10
	.long	.LASF1494
	.sleb128 151
	.uleb128 0x10
	.long	.LASF1495
	.sleb128 152
	.uleb128 0x10
	.long	.LASF1496
	.sleb128 153
	.uleb128 0x10
	.long	.LASF1497
	.sleb128 154
	.byte	0
	.uleb128 0xf
	.long	.LASF1498
	.byte	0x4
	.byte	0x16
	.value	0x199
	.long	0x3af0
	.uleb128 0x10
	.long	.LASF1499
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1500
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1501
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1502
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1503
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1504
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1505
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1506
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1507
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1508
	.sleb128 9
	.byte	0
	.uleb128 0xf
	.long	.LASF1509
	.byte	0x4
	.byte	0x16
	.value	0x1b3
	.long	0x3b10
	.uleb128 0x10
	.long	.LASF1510
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1511
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1512
	.sleb128 3
	.byte	0
	.uleb128 0xf
	.long	.LASF1513
	.byte	0x4
	.byte	0x16
	.value	0x1c3
	.long	0x3b30
	.uleb128 0x10
	.long	.LASF1514
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1515
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1516
	.sleb128 2
	.byte	0
	.uleb128 0xf
	.long	.LASF1517
	.byte	0x4
	.byte	0x16
	.value	0x1df
	.long	0x3b56
	.uleb128 0x10
	.long	.LASF1518
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1519
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1520
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1521
	.sleb128 3
	.byte	0
	.uleb128 0xf
	.long	.LASF1522
	.byte	0x4
	.byte	0x16
	.value	0x1ef
	.long	0x3bb2
	.uleb128 0x10
	.long	.LASF1523
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1524
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1525
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1526
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1527
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1528
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1529
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1530
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1531
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1532
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1533
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1534
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1535
	.sleb128 12
	.byte	0
	.uleb128 0xf
	.long	.LASF1536
	.byte	0x4
	.byte	0x16
	.value	0x202
	.long	0x3bd2
	.uleb128 0x10
	.long	.LASF1537
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1538
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1539
	.sleb128 3
	.byte	0
	.uleb128 0xf
	.long	.LASF1540
	.byte	0x4
	.byte	0x16
	.value	0x20a
	.long	0x3c85
	.uleb128 0x10
	.long	.LASF1541
	.sleb128 64
	.uleb128 0x10
	.long	.LASF1542
	.sleb128 128
	.uleb128 0x10
	.long	.LASF1543
	.sleb128 192
	.uleb128 0x10
	.long	.LASF1544
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1545
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1546
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1547
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1548
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1549
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1550
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1551
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1552
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1553
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1554
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1555
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1556
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1557
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1558
	.sleb128 14
	.uleb128 0x10
	.long	.LASF1559
	.sleb128 15
	.uleb128 0x10
	.long	.LASF1560
	.sleb128 16
	.uleb128 0x10
	.long	.LASF1561
	.sleb128 17
	.uleb128 0x10
	.long	.LASF1562
	.sleb128 18
	.uleb128 0x10
	.long	.LASF1563
	.sleb128 19
	.uleb128 0x10
	.long	.LASF1564
	.sleb128 29
	.uleb128 0x10
	.long	.LASF1565
	.sleb128 45
	.uleb128 0x10
	.long	.LASF1566
	.sleb128 46
	.uleb128 0x10
	.long	.LASF1567
	.sleb128 47
	.byte	0
	.uleb128 0xf
	.long	.LASF1568
	.byte	0x4
	.byte	0x16
	.value	0x23c
	.long	0x3cef
	.uleb128 0x10
	.long	.LASF1569
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1570
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1571
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1572
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1573
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1574
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1575
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1576
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1577
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1578
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1579
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1580
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1581
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1582
	.sleb128 14
	.uleb128 0x10
	.long	.LASF1583
	.sleb128 32769
	.byte	0
	.uleb128 0xf
	.long	.LASF1584
	.byte	0x4
	.byte	0x16
	.value	0x256
	.long	0x3d1c
	.uleb128 0x10
	.long	.LASF1585
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1586
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1587
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1588
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1589
	.sleb128 255
	.byte	0
	.uleb128 0x7
	.long	.LASF1590
	.byte	0x17
	.byte	0x35
	.long	0x368
	.uleb128 0x4
	.long	.LASF1591
	.byte	0x9c
	.byte	0x17
	.byte	0x4d
	.long	0x3d80
	.uleb128 0x6
	.string	"A"
	.byte	0x17
	.byte	0x4f
	.long	0x3d1c
	.byte	0
	.uleb128 0x6
	.string	"B"
	.byte	0x17
	.byte	0x50
	.long	0x3d1c
	.byte	0x4
	.uleb128 0x6
	.string	"C"
	.byte	0x17
	.byte	0x51
	.long	0x3d1c
	.byte	0x8
	.uleb128 0x6
	.string	"D"
	.byte	0x17
	.byte	0x52
	.long	0x3d1c
	.byte	0xc
	.uleb128 0x8
	.long	.LASF1592
	.byte	0x17
	.byte	0x54
	.long	0x3d80
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1593
	.byte	0x17
	.byte	0x55
	.long	0x3d1c
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1594
	.byte	0x17
	.byte	0x56
	.long	0x3d90
	.byte	0x1c
	.byte	0
	.uleb128 0x14
	.long	0x3d1c
	.long	0x3d90
	.uleb128 0x15
	.long	0x1ea
	.byte	0x1
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x3da0
	.uleb128 0x15
	.long	0x1ea
	.byte	0x7f
	.byte	0
	.uleb128 0x7
	.long	.LASF1595
	.byte	0x18
	.byte	0x1c
	.long	0x3dab
	.uleb128 0x24
	.long	.LASF1595
	.value	0x140
	.byte	0x18
	.byte	0x63
	.long	0x3e02
	.uleb128 0x8
	.long	.LASF1596
	.byte	0x18
	.byte	0x69
	.long	0x3fc7
	.byte	0
	.uleb128 0x8
	.long	.LASF1597
	.byte	0x18
	.byte	0x6c
	.long	0x3fd2
	.byte	0x50
	.uleb128 0x8
	.long	.LASF486
	.byte	0x18
	.byte	0x6f
	.long	0x11b3
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1598
	.byte	0x18
	.byte	0x72
	.long	0x1e3
	.byte	0xb0
	.uleb128 0x8
	.long	.LASF1599
	.byte	0x18
	.byte	0x76
	.long	0x3d90
	.byte	0xb4
	.uleb128 0x2b
	.long	.LASF1600
	.byte	0x18
	.byte	0x82
	.long	0x3f10
	.value	0x138
	.byte	0
	.uleb128 0x7
	.long	.LASF1601
	.byte	0x18
	.byte	0x1d
	.long	0x3e0d
	.uleb128 0x24
	.long	.LASF1601
	.value	0x178
	.byte	0x18
	.byte	0xa2
	.long	0x3e8f
	.uleb128 0x8
	.long	.LASF1594
	.byte	0x18
	.byte	0xa7
	.long	0x3da0
	.byte	0
	.uleb128 0x2b
	.long	.LASF1602
	.byte	0x18
	.byte	0xaa
	.long	0x5da
	.value	0x140
	.uleb128 0x2b
	.long	.LASF1603
	.byte	0x18
	.byte	0xae
	.long	0x3fb1
	.value	0x148
	.uleb128 0x2b
	.long	.LASF1604
	.byte	0x18
	.byte	0xb1
	.long	0x5da
	.value	0x150
	.uleb128 0x2b
	.long	.LASF1605
	.byte	0x18
	.byte	0xb4
	.long	0x1e3
	.value	0x158
	.uleb128 0x2b
	.long	.LASF1606
	.byte	0x18
	.byte	0xb7
	.long	0x1e3
	.value	0x15c
	.uleb128 0x2b
	.long	.LASF1607
	.byte	0x18
	.byte	0xc0
	.long	0x3e8f
	.value	0x160
	.uleb128 0x2b
	.long	.LASF1608
	.byte	0x18
	.byte	0xc3
	.long	0x3e8f
	.value	0x168
	.uleb128 0x2b
	.long	.LASF1609
	.byte	0x18
	.byte	0xc6
	.long	0x36f
	.value	0x170
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x3e95
	.uleb128 0x1f
	.long	0x3ea5
	.uleb128 0x1e
	.long	0x3ea5
	.uleb128 0x1e
	.long	0x3eab
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x3da0
	.uleb128 0x3
	.byte	0x8
	.long	0x3e02
	.uleb128 0x2c
	.byte	0x4
	.byte	0x18
	.byte	0x23
	.long	0x3eea
	.uleb128 0x10
	.long	.LASF1610
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1611
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1612
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1613
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1614
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1615
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1616
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1617
	.sleb128 7
	.byte	0
	.uleb128 0x2c
	.byte	0x4
	.byte	0x18
	.byte	0x32
	.long	0x3f05
	.uleb128 0x10
	.long	.LASF1618
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1619
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1620
	.sleb128 2
	.byte	0
	.uleb128 0x7
	.long	.LASF1621
	.byte	0x18
	.byte	0x36
	.long	0x3eea
	.uleb128 0x7
	.long	.LASF1622
	.byte	0x18
	.byte	0x3b
	.long	0x3f1b
	.uleb128 0x3
	.byte	0x8
	.long	0x3f21
	.uleb128 0x1d
	.long	0x1e3
	.long	0x3f30
	.uleb128 0x1e
	.long	0x3ea5
	.byte	0
	.uleb128 0x1c
	.byte	0x50
	.byte	0x18
	.byte	0x3e
	.long	0x3fb1
	.uleb128 0x8
	.long	.LASF1623
	.byte	0x18
	.byte	0x41
	.long	0x5da
	.byte	0
	.uleb128 0x8
	.long	.LASF1624
	.byte	0x18
	.byte	0x45
	.long	0x1e3
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1625
	.byte	0x18
	.byte	0x49
	.long	0x1e3
	.byte	0xc
	.uleb128 0x8
	.long	.LASF1626
	.byte	0x18
	.byte	0x4c
	.long	0x1e3
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1627
	.byte	0x18
	.byte	0x4f
	.long	0x21ef
	.byte	0x14
	.uleb128 0x8
	.long	.LASF1628
	.byte	0x18
	.byte	0x52
	.long	0x21ef
	.byte	0x15
	.uleb128 0x8
	.long	.LASF1629
	.byte	0x18
	.byte	0x55
	.long	0x3f05
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1630
	.byte	0x18
	.byte	0x59
	.long	0x5da
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1631
	.byte	0x18
	.byte	0x5c
	.long	0x3fb1
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1632
	.byte	0x18
	.byte	0x5f
	.long	0x3fb7
	.byte	0x30
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x371
	.uleb128 0x14
	.long	0x1e3
	.long	0x3fc7
	.uleb128 0x15
	.long	0x1ea
	.byte	0x6
	.byte	0
	.uleb128 0x7
	.long	.LASF1633
	.byte	0x18
	.byte	0x60
	.long	0x3f30
	.uleb128 0x3
	.byte	0x8
	.long	0x3d4
	.uleb128 0x4
	.long	.LASF1634
	.byte	0xa0
	.byte	0x19
	.byte	0x18
	.long	0x40d5
	.uleb128 0x8
	.long	.LASF1635
	.byte	0x19
	.byte	0x1c
	.long	0x40e0
	.byte	0
	.uleb128 0x8
	.long	.LASF1636
	.byte	0x19
	.byte	0x1f
	.long	0x40e0
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1637
	.byte	0x19
	.byte	0x22
	.long	0x40f6
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1638
	.byte	0x19
	.byte	0x25
	.long	0x40f6
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1639
	.byte	0x19
	.byte	0x29
	.long	0x40f6
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1640
	.byte	0x19
	.byte	0x2d
	.long	0x4107
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1641
	.byte	0x19
	.byte	0x31
	.long	0x411d
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1642
	.byte	0x19
	.byte	0x34
	.long	0x411d
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1643
	.byte	0x19
	.byte	0x3b
	.long	0x4132
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1644
	.byte	0x19
	.byte	0x3e
	.long	0x40f6
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1645
	.byte	0x19
	.byte	0x43
	.long	0x40f6
	.byte	0x50
	.uleb128 0x8
	.long	.LASF1646
	.byte	0x19
	.byte	0x47
	.long	0x4107
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1647
	.byte	0x19
	.byte	0x4a
	.long	0x4139
	.byte	0x60
	.uleb128 0x8
	.long	.LASF1648
	.byte	0x19
	.byte	0x4d
	.long	0x414a
	.byte	0x68
	.uleb128 0x8
	.long	.LASF1649
	.byte	0x19
	.byte	0x50
	.long	0x4107
	.byte	0x70
	.uleb128 0x8
	.long	.LASF1650
	.byte	0x19
	.byte	0x56
	.long	0x414a
	.byte	0x78
	.uleb128 0x8
	.long	.LASF1651
	.byte	0x19
	.byte	0x5a
	.long	0x414a
	.byte	0x80
	.uleb128 0x8
	.long	.LASF1652
	.byte	0x19
	.byte	0x5e
	.long	0x414a
	.byte	0x88
	.uleb128 0x8
	.long	.LASF1653
	.byte	0x19
	.byte	0x63
	.long	0x414a
	.byte	0x90
	.uleb128 0x8
	.long	.LASF1654
	.byte	0x19
	.byte	0x67
	.long	0x415b
	.byte	0x98
	.byte	0
	.uleb128 0x1f
	.long	0x40e0
	.uleb128 0x1e
	.long	0x5da
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x40d5
	.uleb128 0x1f
	.long	0x40f6
	.uleb128 0x1e
	.long	0x368
	.uleb128 0x1e
	.long	0x5da
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x40e6
	.uleb128 0x1f
	.long	0x4107
	.uleb128 0x1e
	.long	0x368
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x40fc
	.uleb128 0x1f
	.long	0x411d
	.uleb128 0x1e
	.long	0x368
	.uleb128 0x1e
	.long	0x368
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x410d
	.uleb128 0x1d
	.long	0x21ef
	.long	0x4132
	.uleb128 0x1e
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4123
	.uleb128 0x2d
	.uleb128 0x3
	.byte	0x8
	.long	0x4138
	.uleb128 0x1f
	.long	0x414a
	.uleb128 0x1e
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x413f
	.uleb128 0x1f
	.long	0x415b
	.uleb128 0x1e
	.long	0x2d
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4150
	.uleb128 0x4
	.long	.LASF1655
	.byte	0x20
	.byte	0x1a
	.byte	0x39
	.long	0x419a
	.uleb128 0x6
	.string	"hi"
	.byte	0x1a
	.byte	0x3b
	.long	0x5da
	.byte	0
	.uleb128 0x6
	.string	"si"
	.byte	0x1a
	.byte	0x3c
	.long	0x5da
	.byte	0x8
	.uleb128 0x6
	.string	"di"
	.byte	0x1a
	.byte	0x3d
	.long	0x5da
	.byte	0x10
	.uleb128 0x6
	.string	"ti"
	.byte	0x1a
	.byte	0x3e
	.long	0x5da
	.byte	0x18
	.byte	0
	.uleb128 0x4
	.long	.LASF1656
	.byte	0xa8
	.byte	0x1a
	.byte	0x32
	.long	0x425b
	.uleb128 0x8
	.long	.LASF1657
	.byte	0x1a
	.byte	0x35
	.long	0x5da
	.byte	0
	.uleb128 0x8
	.long	.LASF1658
	.byte	0x1a
	.byte	0x35
	.long	0x5da
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1659
	.byte	0x1a
	.byte	0x38
	.long	0x5da
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1660
	.byte	0x1a
	.byte	0x3f
	.long	0x4161
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1661
	.byte	0x1a
	.byte	0x3f
	.long	0x4161
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1662
	.byte	0x1a
	.byte	0x46
	.long	0x4274
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1663
	.byte	0x1a
	.byte	0x49
	.long	0x428a
	.byte	0x60
	.uleb128 0x8
	.long	.LASF1664
	.byte	0x1a
	.byte	0x4c
	.long	0x429b
	.byte	0x68
	.uleb128 0x8
	.long	.LASF1665
	.byte	0x1a
	.byte	0x4f
	.long	0x429b
	.byte	0x70
	.uleb128 0x8
	.long	.LASF1666
	.byte	0x1a
	.byte	0x52
	.long	0x428a
	.byte	0x78
	.uleb128 0x8
	.long	.LASF1667
	.byte	0x1a
	.byte	0x56
	.long	0x42b1
	.byte	0x80
	.uleb128 0x8
	.long	.LASF1668
	.byte	0x1a
	.byte	0x59
	.long	0x4139
	.byte	0x88
	.uleb128 0x8
	.long	.LASF1669
	.byte	0x1a
	.byte	0x5c
	.long	0x4139
	.byte	0x90
	.uleb128 0x8
	.long	.LASF1670
	.byte	0x1a
	.byte	0x5f
	.long	0x42c7
	.byte	0x98
	.uleb128 0x8
	.long	.LASF1671
	.byte	0x1a
	.byte	0x62
	.long	0x42c7
	.byte	0xa0
	.byte	0
	.uleb128 0x1d
	.long	0x21ef
	.long	0x4274
	.uleb128 0x1e
	.long	0x2d
	.uleb128 0x1e
	.long	0x368
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x425b
	.uleb128 0x1f
	.long	0x428a
	.uleb128 0x1e
	.long	0x3fd2
	.uleb128 0x1e
	.long	0x37c
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x427a
	.uleb128 0x1f
	.long	0x429b
	.uleb128 0x1e
	.long	0x3fd2
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4290
	.uleb128 0x1f
	.long	0x42b1
	.uleb128 0x1e
	.long	0x5da
	.uleb128 0x1e
	.long	0x368
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x42a1
	.uleb128 0x1f
	.long	0x42c7
	.uleb128 0x1e
	.long	0x2d
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x42b7
	.uleb128 0x4
	.long	.LASF1005
	.byte	0x48
	.byte	0x1a
	.byte	0x66
	.long	0x4346
	.uleb128 0x8
	.long	.LASF1672
	.byte	0x1a
	.byte	0x6b
	.long	0x4364
	.byte	0
	.uleb128 0x8
	.long	.LASF1673
	.byte	0x1a
	.byte	0x6f
	.long	0x437e
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1674
	.byte	0x1a
	.byte	0x74
	.long	0x4389
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1675
	.byte	0x1a
	.byte	0x78
	.long	0x43ad
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1676
	.byte	0x1a
	.byte	0x7b
	.long	0x43c8
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1677
	.byte	0x1a
	.byte	0x7e
	.long	0x43de
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1678
	.byte	0x1a
	.byte	0x82
	.long	0x4407
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1679
	.byte	0x1a
	.byte	0x83
	.long	0x4407
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1680
	.byte	0x1a
	.byte	0x8a
	.long	0x4421
	.byte	0x40
	.byte	0
	.uleb128 0x1d
	.long	0x1e3
	.long	0x4364
	.uleb128 0x1e
	.long	0x2d
	.uleb128 0x1e
	.long	0x2d
	.uleb128 0x1e
	.long	0x2d
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4346
	.uleb128 0x1d
	.long	0x1e3
	.long	0x437e
	.uleb128 0x1e
	.long	0x2d
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x436a
	.uleb128 0x2e
	.long	0x1e3
	.uleb128 0x3
	.byte	0x8
	.long	0x4384
	.uleb128 0x1d
	.long	0x1e3
	.long	0x43ad
	.uleb128 0x1e
	.long	0x3fd2
	.uleb128 0x1e
	.long	0x1e3
	.uleb128 0x1e
	.long	0x2d
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x438f
	.uleb128 0x1f
	.long	0x43c8
	.uleb128 0x1e
	.long	0x3fd2
	.uleb128 0x1e
	.long	0x1e3
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x43b3
	.uleb128 0x1f
	.long	0x43de
	.uleb128 0x1e
	.long	0x3fd2
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x43ce
	.uleb128 0x1d
	.long	0x1e3
	.long	0x4407
	.uleb128 0x1e
	.long	0x3fd2
	.uleb128 0x1e
	.long	0x1e3
	.uleb128 0x1e
	.long	0x2a00
	.uleb128 0x1e
	.long	0x613
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x43e4
	.uleb128 0x1d
	.long	0x2d
	.long	0x4421
	.uleb128 0x1e
	.long	0x1e3
	.uleb128 0x1e
	.long	0x2d
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x440d
	.uleb128 0x24
	.long	.LASF1681
	.value	0x158
	.byte	0x1a
	.byte	0x2f
	.long	0x4501
	.uleb128 0x8
	.long	.LASF1656
	.byte	0x1a
	.byte	0x63
	.long	0x419a
	.byte	0
	.uleb128 0x8
	.long	.LASF1005
	.byte	0x1a
	.byte	0x8b
	.long	0x42cd
	.byte	0xa8
	.uleb128 0x8
	.long	.LASF1682
	.byte	0x1a
	.byte	0x8e
	.long	0x4515
	.byte	0xf0
	.uleb128 0x8
	.long	.LASF1683
	.byte	0x1a
	.byte	0x91
	.long	0x4515
	.byte	0xf8
	.uleb128 0x2b
	.long	.LASF1684
	.byte	0x1a
	.byte	0x94
	.long	0x451b
	.value	0x100
	.uleb128 0x2b
	.long	.LASF1685
	.byte	0x1a
	.byte	0x99
	.long	0x453a
	.value	0x108
	.uleb128 0x2b
	.long	.LASF1686
	.byte	0x1a
	.byte	0x9c
	.long	0x414a
	.value	0x110
	.uleb128 0x2b
	.long	.LASF1687
	.byte	0x1a
	.byte	0x9f
	.long	0x4550
	.value	0x118
	.uleb128 0x2b
	.long	.LASF1688
	.byte	0x1a
	.byte	0xa3
	.long	0x4132
	.value	0x120
	.uleb128 0x2b
	.long	.LASF1689
	.byte	0x1a
	.byte	0xa7
	.long	0x4132
	.value	0x128
	.uleb128 0x2b
	.long	.LASF1690
	.byte	0x1a
	.byte	0xaa
	.long	0x4139
	.value	0x130
	.uleb128 0x2b
	.long	.LASF1691
	.byte	0x1a
	.byte	0xad
	.long	0x4579
	.value	0x138
	.uleb128 0x2b
	.long	.LASF1692
	.byte	0x1a
	.byte	0xb3
	.long	0x4598
	.value	0x140
	.uleb128 0x2b
	.long	.LASF1693
	.byte	0x1a
	.byte	0xb6
	.long	0x21ef
	.value	0x148
	.uleb128 0x2b
	.long	.LASF1694
	.byte	0x1a
	.byte	0xba
	.long	0x21ef
	.value	0x149
	.uleb128 0x2b
	.long	.LASF1695
	.byte	0x1a
	.byte	0xbe
	.long	0x45a3
	.value	0x150
	.byte	0
	.uleb128 0x1d
	.long	0x123
	.long	0x4515
	.uleb128 0x1e
	.long	0x123
	.uleb128 0x1e
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4501
	.uleb128 0x3
	.byte	0x8
	.long	0x4521
	.uleb128 0xc
	.long	0x217c
	.uleb128 0x1d
	.long	0x1e3
	.long	0x453a
	.uleb128 0x1e
	.long	0x123
	.uleb128 0x1e
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4526
	.uleb128 0x1f
	.long	0x4550
	.uleb128 0x1e
	.long	0x123
	.uleb128 0x1e
	.long	0x2219
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4540
	.uleb128 0x1d
	.long	0x2d
	.long	0x4579
	.uleb128 0x1e
	.long	0x123
	.uleb128 0x1e
	.long	0x2d
	.uleb128 0x1e
	.long	0x2d
	.uleb128 0x1e
	.long	0x620
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4556
	.uleb128 0x1d
	.long	0x368
	.long	0x4598
	.uleb128 0x1e
	.long	0x123
	.uleb128 0x1e
	.long	0x5da
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x457f
	.uleb128 0x2e
	.long	0x21ef
	.uleb128 0x3
	.byte	0x8
	.long	0x459e
	.uleb128 0x7
	.long	.LASF1696
	.byte	0x1b
	.byte	0x19
	.long	0x45b4
	.uleb128 0x3
	.byte	0x8
	.long	0x45ba
	.uleb128 0x1f
	.long	0x45cf
	.uleb128 0x1e
	.long	0x3fd2
	.uleb128 0x1e
	.long	0x123
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x4
	.long	.LASF1697
	.byte	0x58
	.byte	0x1b
	.byte	0x1e
	.long	0x4660
	.uleb128 0x8
	.long	.LASF1698
	.byte	0x1b
	.byte	0x20
	.long	0x46a8
	.byte	0
	.uleb128 0x8
	.long	.LASF1699
	.byte	0x1b
	.byte	0x25
	.long	0x46bd
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1700
	.byte	0x1b
	.byte	0x26
	.long	0x46d2
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1701
	.byte	0x1b
	.byte	0x27
	.long	0x46ec
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1702
	.byte	0x1b
	.byte	0x29
	.long	0x46d2
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1703
	.byte	0x1b
	.byte	0x2a
	.long	0x4706
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1704
	.byte	0x1b
	.byte	0x2b
	.long	0x4734
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1705
	.byte	0x1b
	.byte	0x30
	.long	0x46d2
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1706
	.byte	0x1b
	.byte	0x31
	.long	0x46d2
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1707
	.byte	0x1b
	.byte	0x32
	.long	0x4745
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1708
	.byte	0x1b
	.byte	0x33
	.long	0x4764
	.byte	0x50
	.byte	0
	.uleb128 0x1d
	.long	0x12e
	.long	0x4683
	.uleb128 0x1e
	.long	0x4683
	.uleb128 0x1e
	.long	0x613
	.uleb128 0x1e
	.long	0x4689
	.uleb128 0x1e
	.long	0x36f
	.uleb128 0x1e
	.long	0x36f
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x12e
	.uleb128 0x3
	.byte	0x8
	.long	0x468f
	.uleb128 0x1d
	.long	0x12e
	.long	0x46a8
	.uleb128 0x1e
	.long	0x4683
	.uleb128 0x1e
	.long	0x613
	.uleb128 0x1e
	.long	0x36f
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4660
	.uleb128 0x1d
	.long	0x1e3
	.long	0x46bd
	.uleb128 0x1e
	.long	0x4683
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x46ae
	.uleb128 0x1d
	.long	0x1e3
	.long	0x46d2
	.uleb128 0x1e
	.long	0x12e
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x46c3
	.uleb128 0x1d
	.long	0x12e
	.long	0x46ec
	.uleb128 0x1e
	.long	0x36f
	.uleb128 0x1e
	.long	0x12e
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x46d8
	.uleb128 0x1d
	.long	0x1e3
	.long	0x4706
	.uleb128 0x1e
	.long	0x12e
	.uleb128 0x1e
	.long	0x12e
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x46f2
	.uleb128 0x1d
	.long	0x12e
	.long	0x4734
	.uleb128 0x1e
	.long	0x12e
	.uleb128 0x1e
	.long	0x12e
	.uleb128 0x1e
	.long	0x12e
	.uleb128 0x1e
	.long	0x36f
	.uleb128 0x1e
	.long	0x613
	.uleb128 0x1e
	.long	0x36f
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x470c
	.uleb128 0x1f
	.long	0x4745
	.uleb128 0x1e
	.long	0x12e
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x473a
	.uleb128 0x1d
	.long	0x12e
	.long	0x4764
	.uleb128 0x1e
	.long	0x12e
	.uleb128 0x1e
	.long	0x12e
	.uleb128 0x1e
	.long	0x12e
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x474b
	.uleb128 0x4
	.long	.LASF1709
	.byte	0x10
	.byte	0x1b
	.byte	0x3a
	.long	0x478f
	.uleb128 0x8
	.long	.LASF1710
	.byte	0x1b
	.byte	0x3e
	.long	0x47a3
	.byte	0
	.uleb128 0x8
	.long	.LASF1711
	.byte	0x1b
	.byte	0x41
	.long	0x47b8
	.byte	0x8
	.byte	0
	.uleb128 0x1d
	.long	0x1e3
	.long	0x47a3
	.uleb128 0x1e
	.long	0x36f
	.uleb128 0x1e
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x478f
	.uleb128 0x1d
	.long	0x1e3
	.long	0x47b8
	.uleb128 0x1e
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x47a9
	.uleb128 0x24
	.long	.LASF1712
	.value	0x100
	.byte	0x1b
	.byte	0x46
	.long	0x48c8
	.uleb128 0x8
	.long	.LASF552
	.byte	0x1b
	.byte	0x49
	.long	0x5da
	.byte	0
	.uleb128 0x8
	.long	.LASF1713
	.byte	0x1b
	.byte	0x4d
	.long	0x383
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1714
	.byte	0x1b
	.byte	0x51
	.long	0x4139
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1715
	.byte	0x1b
	.byte	0x5b
	.long	0x48e2
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1716
	.byte	0x1b
	.byte	0x64
	.long	0x4139
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1635
	.byte	0x1b
	.byte	0x6c
	.long	0x48f7
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1636
	.byte	0x1b
	.byte	0x6f
	.long	0x4139
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1717
	.byte	0x1b
	.byte	0x72
	.long	0x4139
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1718
	.byte	0x1b
	.byte	0x76
	.long	0x490c
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1719
	.byte	0x1b
	.byte	0x7b
	.long	0x4921
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1720
	.byte	0x1b
	.byte	0x84
	.long	0x493b
	.byte	0x50
	.uleb128 0x8
	.long	.LASF1721
	.byte	0x1b
	.byte	0x87
	.long	0x47b8
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1722
	.byte	0x1b
	.byte	0x8a
	.long	0x21ef
	.byte	0x60
	.uleb128 0x8
	.long	.LASF1723
	.byte	0x1b
	.byte	0x8e
	.long	0x4139
	.byte	0x68
	.uleb128 0x8
	.long	.LASF1724
	.byte	0x1b
	.byte	0x92
	.long	0x45a9
	.byte	0x70
	.uleb128 0x8
	.long	.LASF1725
	.byte	0x1b
	.byte	0x96
	.long	0x45a9
	.byte	0x78
	.uleb128 0x8
	.long	.LASF1726
	.byte	0x1b
	.byte	0x97
	.long	0x45a9
	.byte	0x80
	.uleb128 0x8
	.long	.LASF1727
	.byte	0x1b
	.byte	0x98
	.long	0x45a9
	.byte	0x88
	.uleb128 0x8
	.long	.LASF1728
	.byte	0x1b
	.byte	0x9d
	.long	0x494c
	.byte	0x90
	.uleb128 0x8
	.long	.LASF1729
	.byte	0x1b
	.byte	0x9f
	.long	0x45cf
	.byte	0x98
	.uleb128 0x8
	.long	.LASF1730
	.byte	0x1b
	.byte	0xa1
	.long	0x476a
	.byte	0xf0
	.byte	0
	.uleb128 0x1d
	.long	0x1e3
	.long	0x48dc
	.uleb128 0x1e
	.long	0x1e3
	.uleb128 0x1e
	.long	0x48dc
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x3c7
	.uleb128 0x3
	.byte	0x8
	.long	0x48c8
	.uleb128 0x1d
	.long	0x5da
	.long	0x48f7
	.uleb128 0x1e
	.long	0x5da
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x48e8
	.uleb128 0x1d
	.long	0x37c
	.long	0x490c
	.uleb128 0x1e
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x48fd
	.uleb128 0x1d
	.long	0x123
	.long	0x4921
	.uleb128 0x1e
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4912
	.uleb128 0x1d
	.long	0x1e3
	.long	0x493b
	.uleb128 0x1e
	.long	0x2d
	.uleb128 0x1e
	.long	0x123
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4927
	.uleb128 0x1f
	.long	0x494c
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4941
	.uleb128 0x7
	.long	.LASF1731
	.byte	0x1
	.byte	0x8f
	.long	0x495d
	.uleb128 0x3
	.byte	0x8
	.long	0x4963
	.uleb128 0x4
	.long	.LASF1732
	.byte	0x20
	.byte	0x1
	.byte	0xa1
	.long	0x49a0
	.uleb128 0x8
	.long	.LASF1733
	.byte	0x1
	.byte	0xa3
	.long	0x4952
	.byte	0
	.uleb128 0x8
	.long	.LASF1734
	.byte	0x1
	.byte	0xa4
	.long	0x3bd2
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1735
	.byte	0x1
	.byte	0xa5
	.long	0x4aa6
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1736
	.byte	0x1
	.byte	0xa6
	.long	0x4aa6
	.byte	0x18
	.byte	0
	.uleb128 0x7
	.long	.LASF1737
	.byte	0x1
	.byte	0x90
	.long	0x49ab
	.uleb128 0x3
	.byte	0x8
	.long	0x49b1
	.uleb128 0x4
	.long	.LASF1738
	.byte	0x28
	.byte	0x1
	.byte	0xbd
	.long	0x4a18
	.uleb128 0x8
	.long	.LASF1739
	.byte	0x1
	.byte	0xbf
	.long	0x5da
	.byte	0
	.uleb128 0x8
	.long	.LASF1740
	.byte	0x1
	.byte	0xc0
	.long	0x5da
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1741
	.byte	0x1
	.byte	0xc1
	.long	0x5da
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1742
	.byte	0x1
	.byte	0xc2
	.long	0x4952
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1743
	.byte	0x1
	.byte	0xc3
	.long	0x368
	.byte	0x20
	.uleb128 0x5
	.long	.LASF1744
	.byte	0x1
	.byte	0xc4
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x24
	.uleb128 0x5
	.long	.LASF640
	.byte	0x1
	.byte	0xc5
	.long	0x368
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x24
	.byte	0
	.uleb128 0x28
	.long	.LASF1745
	.byte	0x8
	.byte	0x1
	.byte	0x98
	.long	0x4a51
	.uleb128 0x29
	.long	.LASF1746
	.byte	0x1
	.byte	0x9a
	.long	0x38e
	.uleb128 0x29
	.long	.LASF1747
	.byte	0x1
	.byte	0x9b
	.long	0x37c
	.uleb128 0x29
	.long	.LASF1748
	.byte	0x1
	.byte	0x9c
	.long	0x5da
	.uleb128 0x29
	.long	.LASF1749
	.byte	0x1
	.byte	0x9d
	.long	0x4aa0
	.byte	0
	.uleb128 0x11
	.long	.LASF1750
	.byte	0x48
	.byte	0x1
	.value	0x8cd
	.long	0x4aa0
	.uleb128 0x12
	.long	.LASF1751
	.byte	0x1
	.value	0x8cf
	.long	0x4c42
	.byte	0
	.uleb128 0x12
	.long	.LASF1752
	.byte	0x1
	.value	0x8d0
	.long	0x36c0
	.byte	0x8
	.uleb128 0x12
	.long	.LASF1753
	.byte	0x1
	.value	0x8d1
	.long	0x4e69
	.byte	0x10
	.uleb128 0x12
	.long	.LASF1754
	.byte	0x1
	.value	0x8d2
	.long	0x4e69
	.byte	0x28
	.uleb128 0x12
	.long	.LASF1755
	.byte	0x1
	.value	0x8d3
	.long	0x1e3
	.byte	0x40
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4a51
	.uleb128 0x7
	.long	.LASF1756
	.byte	0x1
	.byte	0x9f
	.long	0x4a18
	.uleb128 0x4
	.long	.LASF1757
	.byte	0x20
	.byte	0x1
	.byte	0xaf
	.long	0x4aee
	.uleb128 0x6
	.string	"reg"
	.byte	0x1
	.byte	0xb1
	.long	0x38e
	.byte	0
	.uleb128 0x8
	.long	.LASF913
	.byte	0x1
	.byte	0xb2
	.long	0x37c
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1758
	.byte	0x1
	.byte	0xb3
	.long	0x37c
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1759
	.byte	0x1
	.byte	0xb4
	.long	0x1e3
	.byte	0x18
	.byte	0
	.uleb128 0x7
	.long	.LASF1760
	.byte	0x1
	.byte	0xb5
	.long	0x4ab1
	.uleb128 0x11
	.long	.LASF1761
	.byte	0x20
	.byte	0x1
	.value	0x106
	.long	0x4b3a
	.uleb128 0x1b
	.string	"id"
	.byte	0x1
	.value	0x108
	.long	0x1295
	.byte	0
	.uleb128 0x12
	.long	.LASF1762
	.byte	0x1
	.value	0x109
	.long	0x368
	.byte	0x10
	.uleb128 0x12
	.long	.LASF1763
	.byte	0x1
	.value	0x10a
	.long	0x368
	.byte	0x14
	.uleb128 0x12
	.long	.LASF1654
	.byte	0x1
	.value	0x10b
	.long	0x3c7
	.byte	0x18
	.byte	0
	.uleb128 0x11
	.long	.LASF1764
	.byte	0x18
	.byte	0x1
	.value	0x42c
	.long	0x4b6f
	.uleb128 0x12
	.long	.LASF1032
	.byte	0x1
	.value	0x42e
	.long	0x4b6f
	.byte	0
	.uleb128 0x1b
	.string	"reg"
	.byte	0x1
	.value	0x42f
	.long	0x2d
	.byte	0x8
	.uleb128 0x12
	.long	.LASF1765
	.byte	0x1
	.value	0x430
	.long	0x37c
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4b3a
	.uleb128 0x13
	.long	.LASF1766
	.byte	0x1
	.value	0x87c
	.long	0x4b81
	.uleb128 0x3
	.byte	0x8
	.long	0x4b87
	.uleb128 0x11
	.long	.LASF1767
	.byte	0x18
	.byte	0x1
	.value	0x8af
	.long	0x4bad
	.uleb128 0x12
	.long	.LASF1768
	.byte	0x1
	.value	0x8b1
	.long	0x4d20
	.byte	0
	.uleb128 0x1b
	.string	"v"
	.byte	0x1
	.value	0x8c6
	.long	0x4dbd
	.byte	0x8
	.byte	0
	.uleb128 0x13
	.long	.LASF1769
	.byte	0x1
	.value	0x87d
	.long	0x4bb9
	.uleb128 0x3
	.byte	0x8
	.long	0x4bbf
	.uleb128 0x11
	.long	.LASF1770
	.byte	0x48
	.byte	0x1
	.value	0xc65
	.long	0x4c42
	.uleb128 0x12
	.long	.LASF1771
	.byte	0x1
	.value	0xc67
	.long	0x322d
	.byte	0
	.uleb128 0x12
	.long	.LASF1772
	.byte	0x1
	.value	0xc68
	.long	0x3c7
	.byte	0x8
	.uleb128 0x12
	.long	.LASF1773
	.byte	0x1
	.value	0xc69
	.long	0x4e81
	.byte	0x10
	.uleb128 0x12
	.long	.LASF1774
	.byte	0x1
	.value	0xc6a
	.long	0x4bad
	.byte	0x18
	.uleb128 0x12
	.long	.LASF1775
	.byte	0x1
	.value	0xc6b
	.long	0x4bad
	.byte	0x20
	.uleb128 0x12
	.long	.LASF1776
	.byte	0x1
	.value	0xc6c
	.long	0x4bad
	.byte	0x28
	.uleb128 0x12
	.long	.LASF1777
	.byte	0x1
	.value	0xc6d
	.long	0x4e75
	.byte	0x30
	.uleb128 0x12
	.long	.LASF1778
	.byte	0x1
	.value	0xc6e
	.long	0x38e
	.byte	0x38
	.uleb128 0x12
	.long	.LASF1779
	.byte	0x1
	.value	0xc6f
	.long	0x1e3
	.byte	0x40
	.byte	0
	.uleb128 0x13
	.long	.LASF1780
	.byte	0x1
	.value	0x87e
	.long	0x4aa0
	.uleb128 0x13
	.long	.LASF1781
	.byte	0x1
	.value	0x87f
	.long	0x4c5a
	.uleb128 0x3
	.byte	0x8
	.long	0x4c60
	.uleb128 0x11
	.long	.LASF1782
	.byte	0x30
	.byte	0x1
	.value	0x8da
	.long	0x4cbc
	.uleb128 0x12
	.long	.LASF1751
	.byte	0x1
	.value	0x8dc
	.long	0x4c4e
	.byte	0
	.uleb128 0x12
	.long	.LASF1783
	.byte	0x1
	.value	0x8dd
	.long	0x5da
	.byte	0x8
	.uleb128 0x1b
	.string	"end"
	.byte	0x1
	.value	0x8de
	.long	0x5da
	.byte	0x10
	.uleb128 0x12
	.long	.LASF1784
	.byte	0x1
	.value	0x8df
	.long	0x3c7
	.byte	0x18
	.uleb128 0x12
	.long	.LASF1785
	.byte	0x1
	.value	0x8e1
	.long	0x5da
	.byte	0x20
	.uleb128 0x12
	.long	.LASF566
	.byte	0x1
	.value	0x8e2
	.long	0x4c42
	.byte	0x28
	.byte	0
	.uleb128 0x2f
	.byte	0x4
	.byte	0x1
	.value	0x886
	.long	0x4d20
	.uleb128 0x10
	.long	.LASF1786
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1787
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1788
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1789
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1790
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1791
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1792
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1793
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1794
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1795
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1796
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1797
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1798
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1799
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1800
	.sleb128 14
	.byte	0
	.uleb128 0x13
	.long	.LASF1801
	.byte	0x1
	.value	0x897
	.long	0x4cbc
	.uleb128 0x11
	.long	.LASF1802
	.byte	0x10
	.byte	0x1
	.value	0x89c
	.long	0x4d53
	.uleb128 0x1b
	.string	"hi"
	.byte	0x1
	.value	0x89e
	.long	0x38e
	.byte	0
	.uleb128 0x1b
	.string	"low"
	.byte	0x1
	.value	0x89f
	.long	0x38e
	.byte	0x8
	.byte	0
	.uleb128 0x13
	.long	.LASF1803
	.byte	0x1
	.value	0x8a1
	.long	0x4d2c
	.uleb128 0x11
	.long	.LASF1804
	.byte	0x10
	.byte	0x1
	.value	0x8a5
	.long	0x4d87
	.uleb128 0x12
	.long	.LASF1805
	.byte	0x1
	.value	0x8a7
	.long	0x4d87
	.byte	0
	.uleb128 0x12
	.long	.LASF475
	.byte	0x1
	.value	0x8a8
	.long	0x368
	.byte	0x8
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x37c
	.uleb128 0x13
	.long	.LASF1806
	.byte	0x1
	.value	0x8aa
	.long	0x4d5f
	.uleb128 0x1a
	.byte	0x10
	.byte	0x1
	.value	0x8bc
	.long	0x4dbd
	.uleb128 0x1b
	.string	"die"
	.byte	0x1
	.value	0x8be
	.long	0x4bad
	.byte	0
	.uleb128 0x12
	.long	.LASF1807
	.byte	0x1
	.value	0x8bf
	.long	0x1e3
	.byte	0x8
	.byte	0
	.uleb128 0x23
	.byte	0x10
	.byte	0x1
	.value	0x8b2
	.long	0x4e63
	.uleb128 0xa
	.long	.LASF1808
	.byte	0x1
	.value	0x8b4
	.long	0x2d
	.uleb128 0xa
	.long	.LASF1809
	.byte	0x1
	.value	0x8b5
	.long	0x38e
	.uleb128 0xa
	.long	.LASF1810
	.byte	0x1
	.value	0x8b6
	.long	0x4c4e
	.uleb128 0xa
	.long	.LASF1811
	.byte	0x1
	.value	0x8b7
	.long	0x4c42
	.uleb128 0xa
	.long	.LASF1812
	.byte	0x1
	.value	0x8b8
	.long	0x37c
	.uleb128 0xa
	.long	.LASF1813
	.byte	0x1
	.value	0x8b9
	.long	0x38e
	.uleb128 0xa
	.long	.LASF1814
	.byte	0x1
	.value	0x8ba
	.long	0x4d53
	.uleb128 0xa
	.long	.LASF1815
	.byte	0x1
	.value	0x8bb
	.long	0x4d8d
	.uleb128 0xa
	.long	.LASF1816
	.byte	0x1
	.value	0x8c0
	.long	0x4d99
	.uleb128 0xa
	.long	.LASF1817
	.byte	0x1
	.value	0x8c1
	.long	0x368
	.uleb128 0xa
	.long	.LASF1818
	.byte	0x1
	.value	0x8c2
	.long	0x4e63
	.uleb128 0xa
	.long	.LASF1819
	.byte	0x1
	.value	0x8c3
	.long	0x3c7
	.uleb128 0xa
	.long	.LASF1820
	.byte	0x1
	.value	0x8c4
	.long	0x395
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4af9
	.uleb128 0x13
	.long	.LASF1821
	.byte	0x1
	.value	0x8c8
	.long	0x4b87
	.uleb128 0x13
	.long	.LASF1822
	.byte	0x1
	.value	0xc37
	.long	0x37c
	.uleb128 0x13
	.long	.LASF1823
	.byte	0x1
	.value	0xc3b
	.long	0x4e8d
	.uleb128 0x3
	.byte	0x8
	.long	0x4e93
	.uleb128 0x11
	.long	.LASF1824
	.byte	0x28
	.byte	0x1
	.value	0xc5b
	.long	0x4ec8
	.uleb128 0x12
	.long	.LASF1825
	.byte	0x1
	.value	0xc5d
	.long	0x3445
	.byte	0
	.uleb128 0x12
	.long	.LASF1826
	.byte	0x1
	.value	0xc5e
	.long	0x4e81
	.byte	0x8
	.uleb128 0x12
	.long	.LASF1827
	.byte	0x1
	.value	0xc5f
	.long	0x4e69
	.byte	0x10
	.byte	0
	.uleb128 0x13
	.long	.LASF1828
	.byte	0x1
	.value	0xc3c
	.long	0x4ed4
	.uleb128 0x3
	.byte	0x8
	.long	0x4eda
	.uleb128 0x11
	.long	.LASF1829
	.byte	0x10
	.byte	0x1
	.value	0xc46
	.long	0x4f02
	.uleb128 0x12
	.long	.LASF1830
	.byte	0x1
	.value	0xc48
	.long	0x38e
	.byte	0
	.uleb128 0x12
	.long	.LASF1831
	.byte	0x1
	.value	0xc49
	.long	0x38e
	.byte	0x8
	.byte	0
	.uleb128 0x13
	.long	.LASF1832
	.byte	0x1
	.value	0xc3d
	.long	0x4f0e
	.uleb128 0x3
	.byte	0x8
	.long	0x4f14
	.uleb128 0x11
	.long	.LASF1833
	.byte	0x18
	.byte	0x1
	.value	0xc4f
	.long	0x4f49
	.uleb128 0x12
	.long	.LASF1830
	.byte	0x1
	.value	0xc51
	.long	0x38e
	.byte	0
	.uleb128 0x12
	.long	.LASF1831
	.byte	0x1
	.value	0xc52
	.long	0x38e
	.byte	0x8
	.uleb128 0x12
	.long	.LASF564
	.byte	0x1
	.value	0xc53
	.long	0x38e
	.byte	0x10
	.byte	0
	.uleb128 0x13
	.long	.LASF1834
	.byte	0x1
	.value	0xc3e
	.long	0x4f55
	.uleb128 0x3
	.byte	0x8
	.long	0x4f5b
	.uleb128 0x11
	.long	.LASF1835
	.byte	0x10
	.byte	0x1
	.value	0xc75
	.long	0x4f83
	.uleb128 0x1b
	.string	"die"
	.byte	0x1
	.value	0xc77
	.long	0x4bad
	.byte	0
	.uleb128 0x12
	.long	.LASF552
	.byte	0x1
	.value	0xc78
	.long	0x3c7
	.byte	0x8
	.byte	0
	.uleb128 0x13
	.long	.LASF1836
	.byte	0x1
	.value	0xc3f
	.long	0x4f8f
	.uleb128 0x3
	.byte	0x8
	.long	0x4f95
	.uleb128 0x11
	.long	.LASF1837
	.byte	0x4
	.byte	0x1
	.value	0xc7c
	.long	0x4fb0
	.uleb128 0x12
	.long	.LASF526
	.byte	0x1
	.value	0xc7e
	.long	0x1e3
	.byte	0
	.byte	0
	.uleb128 0x11
	.long	.LASF1838
	.byte	0x18
	.byte	0x1
	.value	0xc82
	.long	0x4fe5
	.uleb128 0x1b
	.string	"die"
	.byte	0x1
	.value	0xc84
	.long	0x4bad
	.byte	0
	.uleb128 0x12
	.long	.LASF1839
	.byte	0x1
	.value	0xc85
	.long	0x123
	.byte	0x8
	.uleb128 0x12
	.long	.LASF1032
	.byte	0x1
	.value	0xc86
	.long	0x4fe5
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4fb0
	.uleb128 0x13
	.long	.LASF1840
	.byte	0x1
	.value	0xc88
	.long	0x4fb0
	.uleb128 0x11
	.long	.LASF1841
	.byte	0x18
	.byte	0x1
	.value	0xce1
	.long	0x5039
	.uleb128 0x12
	.long	.LASF1842
	.byte	0x1
	.value	0xce3
	.long	0x48dc
	.byte	0
	.uleb128 0x12
	.long	.LASF1843
	.byte	0x1
	.value	0xce4
	.long	0x368
	.byte	0x8
	.uleb128 0x12
	.long	.LASF1844
	.byte	0x1
	.value	0xce5
	.long	0x368
	.byte	0xc
	.uleb128 0x12
	.long	.LASF1845
	.byte	0x1
	.value	0xce6
	.long	0x368
	.byte	0x10
	.byte	0
	.uleb128 0x11
	.long	.LASF1846
	.byte	0x20
	.byte	0x1
	.value	0x1a47
	.long	0x5088
	.uleb128 0x12
	.long	.LASF1847
	.byte	0x1
	.value	0x1a49
	.long	0x3c7
	.byte	0
	.uleb128 0x12
	.long	.LASF1848
	.byte	0x1
	.value	0x1a4a
	.long	0x3c7
	.byte	0x8
	.uleb128 0x12
	.long	.LASF475
	.byte	0x1
	.value	0x1a4b
	.long	0x1e3
	.byte	0x10
	.uleb128 0x12
	.long	.LASF1849
	.byte	0x1
	.value	0x1a4c
	.long	0x1e3
	.byte	0x14
	.uleb128 0x12
	.long	.LASF1850
	.byte	0x1
	.value	0x1a4d
	.long	0x1e3
	.byte	0x18
	.byte	0
	.uleb128 0x11
	.long	.LASF1851
	.byte	0x20
	.byte	0x1
	.value	0x1a52
	.long	0x50e4
	.uleb128 0x12
	.long	.LASF1847
	.byte	0x1
	.value	0x1a54
	.long	0x3c7
	.byte	0
	.uleb128 0x12
	.long	.LASF475
	.byte	0x1
	.value	0x1a55
	.long	0x1e3
	.byte	0x8
	.uleb128 0x12
	.long	.LASF1623
	.byte	0x1
	.value	0x1a56
	.long	0x1e3
	.byte	0xc
	.uleb128 0x12
	.long	.LASF1852
	.byte	0x1
	.value	0x1a57
	.long	0x1e3
	.byte	0x10
	.uleb128 0x12
	.long	.LASF1850
	.byte	0x1
	.value	0x1a58
	.long	0x1e3
	.byte	0x14
	.uleb128 0x12
	.long	.LASF7
	.byte	0x1
	.value	0x1a59
	.long	0x1e3
	.byte	0x18
	.byte	0
	.uleb128 0x30
	.long	.LASF1853
	.byte	0x1
	.byte	0x5b
	.long	0x1e3
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x31
	.long	.LASF1905
	.byte	0x1
	.byte	0x7a
	.quad	.LFB3
	.quad	.LFE3-.LFB3
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x32
	.long	.LASF1854
	.byte	0x1
	.value	0x181
	.long	0x2d
	.quad	.LFB4
	.quad	.LFE4-.LFB4
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x33
	.long	.LASF1866
	.byte	0x1
	.value	0x19c
	.quad	.LFB6
	.quad	.LFE6-.LFB6
	.uleb128 0x1
	.byte	0x9c
	.long	0x51d3
	.uleb128 0x34
	.long	.LASF533
	.byte	0x1
	.value	0x19d
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x19f
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF1
	.byte	0x1
	.value	0x1a0
	.long	0x620
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x36
	.long	.LASF1855
	.byte	0x1
	.value	0x1a1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.string	"mem"
	.byte	0x1
	.value	0x1a2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.quad	.LBB2
	.quad	.LBE2-.LBB2
	.uleb128 0x36
	.long	.LASF913
	.byte	0x1
	.value	0x1a7
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0x1a8
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF1857
	.byte	0x1
	.value	0x1b4
	.long	0x5da
	.quad	.LFB7
	.quad	.LFE7-.LFB7
	.uleb128 0x1
	.byte	0x9c
	.long	0x5205
	.uleb128 0x34
	.long	.LASF1856
	.byte	0x1
	.value	0x1b5
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x39
	.long	.LASF1858
	.byte	0x1
	.value	0x1fe
	.long	0x4952
	.quad	.LFB8
	.quad	.LFE8-.LFB8
	.uleb128 0x1
	.byte	0x9c
	.long	0x5237
	.uleb128 0x35
	.string	"cfi"
	.byte	0x1
	.value	0x200
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3a
	.long	.LASF1861
	.byte	0x1
	.value	0x20c
	.quad	.LFB9
	.quad	.LFE9-.LFB9
	.uleb128 0x1
	.byte	0x9c
	.long	0x5281
	.uleb128 0x34
	.long	.LASF1859
	.byte	0x1
	.value	0x20d
	.long	0x5281
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.string	"cfi"
	.byte	0x1
	.value	0x20e
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"p"
	.byte	0x1
	.value	0x210
	.long	0x5281
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4952
	.uleb128 0x3c
	.long	.LASF2399
	.byte	0x1
	.value	0x21c
	.long	0x3c7
	.quad	.LFB10
	.quad	.LFE10-.LFB10
	.uleb128 0x1
	.byte	0x9c
	.long	0x52d6
	.uleb128 0x36
	.long	.LASF1654
	.byte	0x1
	.value	0x21e
	.long	0x5ca
	.uleb128 0x9
	.byte	0x3
	.quad	label.13910
	.uleb128 0x36
	.long	.LASF1860
	.byte	0x1
	.value	0x21f
	.long	0x38e
	.uleb128 0x9
	.byte	0x3
	.quad	label_num.13911
	.byte	0
	.uleb128 0x3d
	.long	.LASF1862
	.byte	0x1
	.value	0x22a
	.quad	.LFB11
	.quad	.LFE11-.LFB11
	.uleb128 0x1
	.byte	0x9c
	.long	0x5355
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x22b
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.string	"cfi"
	.byte	0x1
	.value	0x22c
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.quad	.LBB3
	.quad	.LBE3-.LBB3
	.uleb128 0x35
	.string	"fde"
	.byte	0x1
	.value	0x230
	.long	0x49a0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB4
	.quad	.LBE4-.LBB4
	.uleb128 0x36
	.long	.LASF1863
	.byte	0x1
	.value	0x238
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF1864
	.byte	0x1
	.value	0x24d
	.quad	.LFB12
	.quad	.LFE12-.LFB12
	.uleb128 0x1
	.byte	0x9c
	.long	0x5392
	.uleb128 0x3b
	.string	"cfi"
	.byte	0x1
	.value	0x24e
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.string	"loc"
	.byte	0x1
	.value	0x24f
	.long	0x5392
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4aee
	.uleb128 0x3d
	.long	.LASF1865
	.byte	0x1
	.value	0x268
	.quad	.LFB13
	.quad	.LFE13-.LFB13
	.uleb128 0x1
	.byte	0x9c
	.long	0x53f6
	.uleb128 0x3b
	.string	"loc"
	.byte	0x1
	.value	0x269
	.long	0x5392
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"cfi"
	.byte	0x1
	.value	0x26b
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB5
	.quad	.LBE5-.LBB5
	.uleb128 0x35
	.string	"fde"
	.byte	0x1
	.value	0x277
	.long	0x49a0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x33
	.long	.LASF1867
	.byte	0x1
	.value	0x28f
	.quad	.LFB14
	.quad	.LFE14-.LFB14
	.uleb128 0x1
	.byte	0x9c
	.long	0x5452
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x290
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x3b
	.string	"reg"
	.byte	0x1
	.value	0x291
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x34
	.long	.LASF913
	.byte	0x1
	.value	0x292
	.long	0x37c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.string	"loc"
	.byte	0x1
	.value	0x294
	.long	0x4aee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x3d
	.long	.LASF1868
	.byte	0x1
	.value	0x2a0
	.quad	.LFB15
	.quad	.LFE15-.LFB15
	.uleb128 0x1
	.byte	0x9c
	.long	0x54e2
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x2a1
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x34
	.long	.LASF1869
	.byte	0x1
	.value	0x2a2
	.long	0x5392
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x35
	.string	"cfi"
	.byte	0x1
	.value	0x2a4
	.long	0x4952
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.long	.LASF1870
	.byte	0x1
	.value	0x2a5
	.long	0x4aee
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.string	"loc"
	.byte	0x1
	.value	0x2a5
	.long	0x4aee
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.quad	.LBB6
	.quad	.LBE6-.LBB6
	.uleb128 0x36
	.long	.LASF1871
	.byte	0x1
	.value	0x2db
	.long	0x4aa0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF1872
	.byte	0x1
	.value	0x2eb
	.quad	.LFB16
	.quad	.LFE16-.LFB16
	.uleb128 0x1
	.byte	0x9c
	.long	0x554d
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x2ec
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x3b
	.string	"reg"
	.byte	0x1
	.value	0x2ed
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x34
	.long	.LASF1873
	.byte	0x1
	.value	0x2ee
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x34
	.long	.LASF913
	.byte	0x1
	.value	0x2ef
	.long	0x37c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.string	"cfi"
	.byte	0x1
	.value	0x2f1
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x33
	.long	.LASF1874
	.byte	0x1
	.value	0x326
	.quad	.LFB17
	.quad	.LFE17-.LFB17
	.uleb128 0x1
	.byte	0x9c
	.long	0x558a
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x327
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"cfi"
	.byte	0x1
	.value	0x329
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x33
	.long	.LASF1875
	.byte	0x1
	.value	0x333
	.quad	.LFB18
	.quad	.LFE18-.LFB18
	.uleb128 0x1
	.byte	0x9c
	.long	0x55d6
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x334
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF536
	.byte	0x1
	.value	0x335
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"cfi"
	.byte	0x1
	.value	0x337
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x33
	.long	.LASF1876
	.byte	0x1
	.value	0x348
	.quad	.LFB19
	.quad	.LFE19-.LFB19
	.uleb128 0x1
	.byte	0x9c
	.long	0x5622
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x349
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.string	"reg"
	.byte	0x1
	.value	0x34a
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x34
	.long	.LASF913
	.byte	0x1
	.value	0x34b
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x33
	.long	.LASF1877
	.byte	0x1
	.value	0x354
	.quad	.LFB20
	.quad	.LFE20-.LFB20
	.uleb128 0x1
	.byte	0x9c
	.long	0x565f
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x355
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF913
	.byte	0x1
	.value	0x356
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x33
	.long	.LASF1878
	.byte	0x1
	.value	0x35f
	.quad	.LFB21
	.quad	.LFE21-.LFB21
	.uleb128 0x1
	.byte	0x9c
	.long	0x569c
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x360
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF1873
	.byte	0x1
	.value	0x361
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x3d
	.long	.LASF1879
	.byte	0x1
	.value	0x36a
	.quad	.LFB22
	.quad	.LFE22-.LFB22
	.uleb128 0x1
	.byte	0x9c
	.long	0x56fb
	.uleb128 0x3b
	.string	"rtl"
	.byte	0x1
	.value	0x36b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"reg"
	.byte	0x1
	.value	0x36d
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x36
	.long	.LASF913
	.byte	0x1
	.value	0x36e
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x56fb
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.13995
	.byte	0
	.uleb128 0xc
	.long	0x5ca
	.uleb128 0x39
	.long	.LASF1880
	.byte	0x1
	.value	0x3a8
	.long	0x37c
	.quad	.LFB23
	.quad	.LFE23-.LFB23
	.uleb128 0x1
	.byte	0x9c
	.long	0x57a3
	.uleb128 0x34
	.long	.LASF1881
	.byte	0x1
	.value	0x3a9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.string	"src"
	.byte	0x1
	.value	0x3ab
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1882
	.byte	0x1
	.value	0x3ac
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF913
	.byte	0x1
	.value	0x3ad
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF0
	.byte	0x1
	.value	0x3ae
	.long	0x22ca
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x57a3
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14010
	.uleb128 0x37
	.quad	.LBB7
	.quad	.LBE7-.LBB7
	.uleb128 0x35
	.string	"val"
	.byte	0x1
	.value	0x3c7
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x5ca
	.uleb128 0x3d
	.long	.LASF1884
	.byte	0x1
	.value	0x3e1
	.quad	.LFB24
	.quad	.LFE24-.LFB24
	.uleb128 0x1
	.byte	0x9c
	.long	0x5814
	.uleb128 0x34
	.long	.LASF1885
	.byte	0x1
	.value	0x3e2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF913
	.byte	0x1
	.value	0x3e4
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF1654
	.byte	0x1
	.value	0x3e5
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x3e6
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x5824
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14017
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x5824
	.uleb128 0x15
	.long	0x1ea
	.byte	0x16
	.byte	0
	.uleb128 0xc
	.long	0x5814
	.uleb128 0x3d
	.long	.LASF1886
	.byte	0x1
	.value	0x437
	.quad	.LFB25
	.quad	.LFE25-.LFB25
	.uleb128 0x1
	.byte	0x9c
	.long	0x5882
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x438
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.string	"reg"
	.byte	0x1
	.value	0x439
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x34
	.long	.LASF913
	.byte	0x1
	.value	0x43a
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.string	"q"
	.byte	0x1
	.value	0x43c
	.long	0x4b6f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1887
	.byte	0x1
	.value	0x447
	.quad	.LFB26
	.quad	.LFE26-.LFB26
	.uleb128 0x1
	.byte	0x9c
	.long	0x58bd
	.uleb128 0x35
	.string	"q"
	.byte	0x1
	.value	0x449
	.long	0x4b6f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF1032
	.byte	0x1
	.value	0x449
	.long	0x4b6f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1888
	.byte	0x1
	.value	0x457
	.long	0x21ef
	.quad	.LFB27
	.quad	.LFE27-.LFB27
	.uleb128 0x1
	.byte	0x9c
	.long	0x58fc
	.uleb128 0x34
	.long	.LASF1885
	.byte	0x1
	.value	0x458
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"q"
	.byte	0x1
	.value	0x45a
	.long	0x4b6f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1889
	.byte	0x1
	.value	0x502
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.uleb128 0x1
	.byte	0x9c
	.long	0x59ce
	.uleb128 0x34
	.long	.LASF566
	.byte	0x1
	.value	0x503
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x504
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.string	"src"
	.byte	0x1
	.value	0x506
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF1882
	.byte	0x1
	.value	0x506
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF913
	.byte	0x1
	.value	0x507
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x59de
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14060
	.uleb128 0x3f
	.quad	.LBB8
	.quad	.LBE8-.LBB8
	.long	0x59ae
	.uleb128 0x36
	.long	.LASF1890
	.byte	0x1
	.value	0x510
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF483
	.byte	0x1
	.value	0x511
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.uleb128 0x37
	.quad	.LBB9
	.quad	.LBE9-.LBB9
	.uleb128 0x35
	.string	"x"
	.byte	0x1
	.value	0x62f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x59de
	.uleb128 0x15
	.long	0x1ea
	.byte	0x1a
	.byte	0
	.uleb128 0xc
	.long	0x59ce
	.uleb128 0x33
	.long	.LASF1891
	.byte	0x1
	.value	0x64c
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.uleb128 0x1
	.byte	0x9c
	.long	0x5a42
	.uleb128 0x34
	.long	.LASF1885
	.byte	0x1
	.value	0x64d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1654
	.byte	0x1
	.value	0x64f
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.string	"src"
	.byte	0x1
	.value	0x650
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x5a52
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14094
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x5a52
	.uleb128 0x15
	.long	0x1ea
	.byte	0x15
	.byte	0
	.uleb128 0xc
	.long	0x5a42
	.uleb128 0x3d
	.long	.LASF1892
	.byte	0x1
	.value	0x67b
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.uleb128 0x1
	.byte	0x9c
	.long	0x5ab6
	.uleb128 0x3b
	.string	"cfi"
	.byte	0x1
	.value	0x67c
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.string	"fde"
	.byte	0x1
	.value	0x67d
	.long	0x49a0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x34
	.long	.LASF1893
	.byte	0x1
	.value	0x67e
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x5ac6
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14122
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x5ac6
	.uleb128 0x15
	.long	0x1ea
	.byte	0xa
	.byte	0
	.uleb128 0xc
	.long	0x5ab6
	.uleb128 0x3d
	.long	.LASF1894
	.byte	0x1
	.value	0x6f9
	.quad	.LFB31
	.quad	.LFE31-.LFB31
	.uleb128 0x1
	.byte	0x9c
	.long	0x5c98
	.uleb128 0x34
	.long	.LASF1893
	.byte	0x1
	.value	0x6fa
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -228
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x6fc
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x35
	.string	"fde"
	.byte	0x1
	.value	0x6fd
	.long	0x49a0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x35
	.string	"cfi"
	.byte	0x1
	.value	0x6fe
	.long	0x4952
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x35
	.string	"l1"
	.byte	0x1
	.value	0x6ff
	.long	0x5ca
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x35
	.string	"l2"
	.byte	0x1
	.value	0x6ff
	.long	0x5ca
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.long	.LASF1895
	.byte	0x1
	.value	0x6ff
	.long	0x5ca
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF1896
	.byte	0x1
	.value	0x700
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x36
	.long	.LASF1897
	.byte	0x1
	.value	0x701
	.long	0x5c98
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x36
	.long	.LASF1898
	.byte	0x1
	.value	0x702
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x36
	.long	.LASF1899
	.byte	0x1
	.value	0x703
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -204
	.uleb128 0x36
	.long	.LASF1900
	.byte	0x1
	.value	0x704
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x36
	.long	.LASF1901
	.byte	0x1
	.value	0x705
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x5ca8
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14146
	.uleb128 0x3f
	.quad	.LBB10
	.quad	.LBE10-.LBB10
	.long	0x5bed
	.uleb128 0x36
	.long	.LASF1902
	.byte	0x1
	.value	0x70b
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.byte	0
	.uleb128 0x3f
	.quad	.LBB11
	.quad	.LBE11-.LBB11
	.long	0x5c43
	.uleb128 0x35
	.string	"p"
	.byte	0x1
	.value	0x736
	.long	0x3c7
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x37
	.quad	.LBB12
	.quad	.LBE12-.LBB12
	.uleb128 0x36
	.long	.LASF913
	.byte	0x1
	.value	0x75f
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x35
	.string	"pad"
	.byte	0x1
	.value	0x768
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -180
	.byte	0
	.byte	0
	.uleb128 0x37
	.quad	.LBB13
	.quad	.LBE13-.LBB13
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0x7c2
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -188
	.uleb128 0x37
	.quad	.LBB14
	.quad	.LBE14-.LBB14
	.uleb128 0x36
	.long	.LASF913
	.byte	0x1
	.value	0x7c6
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x35
	.string	"pad"
	.byte	0x1
	.value	0x7ca
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -172
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x5ca8
	.uleb128 0x15
	.long	0x1ea
	.byte	0x5
	.byte	0
	.uleb128 0xc
	.long	0x5814
	.uleb128 0x33
	.long	.LASF1903
	.byte	0x1
	.value	0x807
	.quad	.LFB32
	.quad	.LFE32-.LFB32
	.uleb128 0x1
	.byte	0x9c
	.long	0x5d0b
	.uleb128 0x34
	.long	.LASF1605
	.byte	0x1
	.value	0x808
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x34
	.long	.LASF1604
	.byte	0x1
	.value	0x809
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.long	.LASF1654
	.byte	0x1
	.value	0x80b
	.long	0x5d0b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.string	"fde"
	.byte	0x1
	.value	0x80c
	.long	0x49a0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x5d1b
	.uleb128 0x15
	.long	0x1ea
	.byte	0x1d
	.byte	0
	.uleb128 0x33
	.long	.LASF1904
	.byte	0x1
	.value	0x84f
	.quad	.LFB33
	.quad	.LFE33-.LFB33
	.uleb128 0x1
	.byte	0x9c
	.long	0x5d59
	.uleb128 0x35
	.string	"fde"
	.byte	0x1
	.value	0x851
	.long	0x49a0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF1654
	.byte	0x1
	.value	0x852
	.long	0x5d0b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x40
	.long	.LASF1906
	.byte	0x1
	.value	0x85d
	.quad	.LFB34
	.quad	.LFE34-.LFB34
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x40
	.long	.LASF1907
	.byte	0x1
	.value	0x86f
	.quad	.LFB35
	.quad	.LFE35-.LFB35
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x38
	.long	.LASF1908
	.byte	0x1
	.value	0x8f3
	.long	0x5da
	.quad	.LFB36
	.quad	.LFE36-.LFB36
	.uleb128 0x1
	.byte	0x9c
	.long	0x5dbe
	.uleb128 0x3b
	.string	"op"
	.byte	0x1
	.value	0x8f4
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x39
	.long	.LASF1909
	.byte	0x1
	.value	0xa24
	.long	0x4c42
	.quad	.LFB37
	.quad	.LFE37-.LFB37
	.uleb128 0x1
	.byte	0x9c
	.long	0x5e1c
	.uleb128 0x3b
	.string	"op"
	.byte	0x1
	.value	0xa25
	.long	0x36c0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x34
	.long	.LASF1910
	.byte	0x1
	.value	0xa26
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x34
	.long	.LASF1911
	.byte	0x1
	.value	0xa27
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1912
	.byte	0x1
	.value	0xa2b
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3a
	.long	.LASF1913
	.byte	0x1
	.value	0xa3b
	.quad	.LFB38
	.quad	.LFE38-.LFB38
	.uleb128 0x1
	.byte	0x9c
	.long	0x5e66
	.uleb128 0x34
	.long	.LASF1859
	.byte	0x1
	.value	0xa3c
	.long	0x5e66
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1912
	.byte	0x1
	.value	0xa3d
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"d"
	.byte	0x1
	.value	0xa3f
	.long	0x5e66
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4c42
	.uleb128 0x39
	.long	.LASF1914
	.byte	0x1
	.value	0xa4b
	.long	0x38e
	.quad	.LFB39
	.quad	.LFE39-.LFB39
	.uleb128 0x1
	.byte	0x9c
	.long	0x5ead
	.uleb128 0x3b
	.string	"loc"
	.byte	0x1
	.value	0xa4c
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0xa4e
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1915
	.byte	0x1
	.value	0xab2
	.long	0x38e
	.quad	.LFB40
	.quad	.LFE40-.LFB40
	.uleb128 0x1
	.byte	0x9c
	.long	0x5eee
	.uleb128 0x3b
	.string	"loc"
	.byte	0x1
	.value	0xab3
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0xab5
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1916
	.byte	0x1
	.value	0xac3
	.quad	.LFB41
	.quad	.LFE41-.LFB41
	.uleb128 0x1
	.byte	0x9c
	.long	0x5f62
	.uleb128 0x3b
	.string	"loc"
	.byte	0x1
	.value	0xac4
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1917
	.byte	0x1
	.value	0xac6
	.long	0x4b75
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF1918
	.byte	0x1
	.value	0xac7
	.long	0x4b75
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x5f62
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14497
	.uleb128 0x41
	.long	.Ldebug_ranges0+0
	.uleb128 0x36
	.long	.LASF913
	.byte	0x1
	.value	0xae0
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x5ca
	.uleb128 0x3d
	.long	.LASF1919
	.byte	0x1
	.value	0xb46
	.quad	.LFB42
	.quad	.LFE42-.LFB42
	.uleb128 0x1
	.byte	0x9c
	.long	0x5f95
	.uleb128 0x3b
	.string	"loc"
	.byte	0x1
	.value	0xb47
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1920
	.byte	0x1
	.value	0xb58
	.quad	.LFB43
	.quad	.LFE43-.LFB43
	.uleb128 0x1
	.byte	0x9c
	.long	0x5fe1
	.uleb128 0x3b
	.string	"cfi"
	.byte	0x1
	.value	0xb59
	.long	0x4952
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"loc"
	.byte	0x1
	.value	0xb5b
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0xb5c
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1921
	.byte	0x1
	.value	0xb6b
	.long	0x4aa0
	.quad	.LFB44
	.quad	.LFE44-.LFB44
	.uleb128 0x1
	.byte	0x9c
	.long	0x6044
	.uleb128 0x3b
	.string	"cfa"
	.byte	0x1
	.value	0xb6c
	.long	0x5392
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1922
	.byte	0x1
	.value	0xb6e
	.long	0x4aa0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.string	"tmp"
	.byte	0x1
	.value	0xb6e
	.long	0x4aa0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x6054
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14562
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x6054
	.uleb128 0x15
	.long	0x1ea
	.byte	0xd
	.byte	0
	.uleb128 0xc
	.long	0x6044
	.uleb128 0x3d
	.long	.LASF1923
	.byte	0x1
	.value	0xb8f
	.quad	.LFB45
	.quad	.LFE45-.LFB45
	.uleb128 0x1
	.byte	0x9c
	.long	0x60c5
	.uleb128 0x3b
	.string	"cfa"
	.byte	0x1
	.value	0xb90
	.long	0x5392
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.string	"loc"
	.byte	0x1
	.value	0xb91
	.long	0x4aa0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"ptr"
	.byte	0x1
	.value	0xb93
	.long	0x4aa0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x37
	.quad	.LBB17
	.quad	.LBE17-.LBB17
	.uleb128 0x35
	.string	"op"
	.byte	0x1
	.value	0xb9b
	.long	0x36c0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.byte	0
	.uleb128 0x42
	.long	.LASF1924
	.byte	0x1
	.value	0xed3
	.quad	.LFB46
	.quad	.LFE46-.LFB46
	.uleb128 0x1
	.byte	0x9c
	.long	0x60f3
	.uleb128 0x34
	.long	.LASF1925
	.byte	0x1
	.value	0xed4
	.long	0x48f7
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF1926
	.byte	0x1
	.value	0xedc
	.long	0x1e3
	.quad	.LFB47
	.quad	.LFE47-.LFB47
	.uleb128 0x1
	.byte	0x9c
	.long	0x6125
	.uleb128 0x3b
	.string	"rtl"
	.byte	0x1
	.value	0xedd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF1927
	.byte	0x1
	.value	0xee8
	.long	0x123
	.quad	.LFB48
	.quad	.LFE48-.LFB48
	.uleb128 0x1
	.byte	0x9c
	.long	0x6157
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0xee9
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF1928
	.byte	0x1
	.value	0xefc
	.long	0x1e3
	.quad	.LFB49
	.quad	.LFE49-.LFB49
	.uleb128 0x1
	.byte	0x9c
	.long	0x6198
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0xefd
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF0
	.byte	0x1
	.value	0xeff
	.long	0x7de
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF1929
	.byte	0x1
	.value	0xf08
	.long	0x5da
	.quad	.LFB50
	.quad	.LFE50-.LFB50
	.uleb128 0x1
	.byte	0x9c
	.long	0x61ca
	.uleb128 0x3b
	.string	"tag"
	.byte	0x1
	.value	0xf09
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF1930
	.byte	0x1
	.value	0xf81
	.long	0x5da
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x61fc
	.uleb128 0x34
	.long	.LASF1931
	.byte	0x1
	.value	0xf82
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF1932
	.byte	0x1
	.value	0x104d
	.long	0x5da
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x622e
	.uleb128 0x34
	.long	.LASF1763
	.byte	0x1
	.value	0x104e
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x38
	.long	.LASF1933
	.byte	0x1
	.value	0x10a7
	.long	0x123
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x6260
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x10a8
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF1934
	.byte	0x1
	.value	0x10c1
	.long	0x123
	.quad	.LFB54
	.quad	.LFE54-.LFB54
	.uleb128 0x1
	.byte	0x9c
	.long	0x62d1
	.uleb128 0x34
	.long	.LASF26
	.byte	0x1
	.value	0x10c2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1935
	.byte	0x1
	.value	0x10c4
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB18
	.quad	.LBE18-.LBB18
	.uleb128 0x36
	.long	.LASF1936
	.byte	0x1
	.value	0x10d0
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF1937
	.byte	0x1
	.value	0x10d1
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF1938
	.byte	0x1
	.value	0x10e4
	.long	0x123
	.quad	.LFB55
	.quad	.LFE55-.LFB55
	.uleb128 0x1
	.byte	0x9c
	.long	0x6312
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x10e5
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF558
	.byte	0x1
	.value	0x10e7
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3a
	.long	.LASF1939
	.byte	0x1
	.value	0x10f9
	.quad	.LFB56
	.quad	.LFE56-.LFB56
	.uleb128 0x1
	.byte	0x9c
	.long	0x634f
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x10fa
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF1931
	.byte	0x1
	.value	0x10fb
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x38
	.long	.LASF1940
	.byte	0x1
	.value	0x1105
	.long	0x4d20
	.quad	.LFB57
	.quad	.LFE57-.LFB57
	.uleb128 0x1
	.byte	0x9c
	.long	0x637f
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x1106
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1941
	.byte	0x1
	.value	0x110e
	.quad	.LFB58
	.quad	.LFE58-.LFB58
	.uleb128 0x1
	.byte	0x9c
	.long	0x63da
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x110f
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x1110
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x34
	.long	.LASF1943
	.byte	0x1
	.value	0x1111
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x1113
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1944
	.byte	0x1
	.value	0x111d
	.long	0x368
	.quad	.LFB59
	.quad	.LFE59-.LFB59
	.uleb128 0x1
	.byte	0x9c
	.long	0x641d
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x111e
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x641d
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15489
	.byte	0
	.uleb128 0xc
	.long	0x5f3
	.uleb128 0x3d
	.long	.LASF1945
	.byte	0x1
	.value	0x1129
	.quad	.LFB60
	.quad	.LFE60-.LFB60
	.uleb128 0x1
	.byte	0x9c
	.long	0x647d
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x112a
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x112b
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x34
	.long	.LASF1946
	.byte	0x1
	.value	0x112c
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x112e
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1947
	.byte	0x1
	.value	0x1138
	.long	0x37c
	.quad	.LFB61
	.quad	.LFE61-.LFB61
	.uleb128 0x1
	.byte	0x9c
	.long	0x64c0
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x1139
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x64d0
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15499
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x64d0
	.uleb128 0x15
	.long	0x1ea
	.byte	0x6
	.byte	0
	.uleb128 0xc
	.long	0x64c0
	.uleb128 0x3d
	.long	.LASF1948
	.byte	0x1
	.value	0x1144
	.quad	.LFB62
	.quad	.LFE62-.LFB62
	.uleb128 0x1
	.byte	0x9c
	.long	0x6530
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1145
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x1146
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x34
	.long	.LASF1949
	.byte	0x1
	.value	0x1147
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x1149
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1950
	.byte	0x1
	.value	0x1153
	.long	0x38e
	.quad	.LFB63
	.quad	.LFE63-.LFB63
	.uleb128 0x1
	.byte	0x9c
	.long	0x6573
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x1154
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x6583
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15509
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x6583
	.uleb128 0x15
	.long	0x1ea
	.byte	0xb
	.byte	0
	.uleb128 0xc
	.long	0x6573
	.uleb128 0x3d
	.long	.LASF1951
	.byte	0x1
	.value	0x115f
	.quad	.LFB64
	.quad	.LFE64-.LFB64
	.uleb128 0x1
	.byte	0x9c
	.long	0x65f2
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1160
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x1161
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x34
	.long	.LASF1952
	.byte	0x1
	.value	0x1162
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF1953
	.byte	0x1
	.value	0x1163
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x1165
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1954
	.byte	0x1
	.value	0x1172
	.quad	.LFB65
	.quad	.LFE65-.LFB65
	.uleb128 0x1
	.byte	0x9c
	.long	0x665c
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1173
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x1174
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x34
	.long	.LASF475
	.byte	0x1
	.value	0x1175
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x34
	.long	.LASF1805
	.byte	0x1
	.value	0x1176
	.long	0x4d87
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x1178
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1955
	.byte	0x1
	.value	0x1185
	.quad	.LFB66
	.quad	.LFE66-.LFB66
	.uleb128 0x1
	.byte	0x9c
	.long	0x66c6
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1186
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x1187
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x3b
	.string	"str"
	.byte	0x1
	.value	0x1188
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x118a
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF1956
	.byte	0x1
	.value	0x118b
	.long	0x4e63
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1957
	.byte	0x1
	.value	0x11a0
	.long	0x5da
	.quad	.LFB67
	.quad	.LFE67-.LFB67
	.uleb128 0x1
	.byte	0x9c
	.long	0x6709
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x11a1
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x6719
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15534
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x6719
	.uleb128 0x15
	.long	0x1ea
	.byte	0x9
	.byte	0
	.uleb128 0xc
	.long	0x6709
	.uleb128 0x39
	.long	.LASF1958
	.byte	0x1
	.value	0x11ad
	.long	0x1e3
	.quad	.LFB68
	.quad	.LFE68-.LFB68
	.uleb128 0x1
	.byte	0x9c
	.long	0x67b0
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x11ae
	.long	0x4e81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x67c0
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15543
	.uleb128 0x37
	.quad	.LBB19
	.quad	.LBE19-.LBB19
	.uleb128 0x36
	.long	.LASF1956
	.byte	0x1
	.value	0x11b2
	.long	0x4e63
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.string	"len"
	.byte	0x1
	.value	0x11b3
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x43
	.long	.LASF2352
	.byte	0x1
	.value	0x11b4
	.long	0x1e3
	.uleb128 0x36
	.long	.LASF1654
	.byte	0x1
	.value	0x11b5
	.long	0x603
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x67c0
	.uleb128 0x15
	.long	0x1ea
	.byte	0xe
	.byte	0
	.uleb128 0xc
	.long	0x67b0
	.uleb128 0x3d
	.long	.LASF1959
	.byte	0x1
	.value	0x11d6
	.quad	.LFB69
	.quad	.LFE69-.LFB69
	.uleb128 0x1
	.byte	0x9c
	.long	0x6820
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x11d7
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x11d8
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x34
	.long	.LASF1960
	.byte	0x1
	.value	0x11d9
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x11db
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1961
	.byte	0x1
	.value	0x11e6
	.long	0x4bad
	.quad	.LFB70
	.quad	.LFE70-.LFB70
	.uleb128 0x1
	.byte	0x9c
	.long	0x6863
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x11e7
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x6863
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15553
	.byte	0
	.uleb128 0xc
	.long	0x64c0
	.uleb128 0x39
	.long	.LASF1962
	.byte	0x1
	.value	0x11f0
	.long	0x1e3
	.quad	.LFB71
	.quad	.LFE71-.LFB71
	.uleb128 0x1
	.byte	0x9c
	.long	0x6898
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x11f1
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1963
	.byte	0x1
	.value	0x11fa
	.quad	.LFB72
	.quad	.LFE72-.LFB72
	.uleb128 0x1
	.byte	0x9c
	.long	0x68e4
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x11fb
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.string	"i"
	.byte	0x1
	.value	0x11fc
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x68e4
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15561
	.byte	0
	.uleb128 0xc
	.long	0x5ca
	.uleb128 0x3d
	.long	.LASF1964
	.byte	0x1
	.value	0x1218
	.quad	.LFB74
	.quad	.LFE74-.LFB74
	.uleb128 0x1
	.byte	0x9c
	.long	0x6944
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1219
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x121a
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x3b
	.string	"loc"
	.byte	0x1
	.value	0x121b
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x121d
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1965
	.byte	0x1
	.value	0x1227
	.long	0x4c42
	.quad	.LFB75
	.quad	.LFE75-.LFB75
	.uleb128 0x1
	.byte	0x9c
	.long	0x6987
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x1228
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x6987
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15577
	.byte	0
	.uleb128 0xc
	.long	0x64c0
	.uleb128 0x39
	.long	.LASF1966
	.byte	0x1
	.value	0x1241
	.long	0x4c4e
	.quad	.LFB77
	.quad	.LFE77-.LFB77
	.uleb128 0x1
	.byte	0x9c
	.long	0x69cf
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x1242
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x69cf
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15587
	.byte	0
	.uleb128 0xc
	.long	0x6573
	.uleb128 0x3d
	.long	.LASF1967
	.byte	0x1
	.value	0x124d
	.quad	.LFB78
	.quad	.LFE78-.LFB78
	.uleb128 0x1
	.byte	0x9c
	.long	0x6a2f
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x124e
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x124f
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x34
	.long	.LASF1855
	.byte	0x1
	.value	0x1250
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x1252
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1968
	.byte	0x1
	.value	0x125c
	.long	0x2d
	.quad	.LFB79
	.quad	.LFE79-.LFB79
	.uleb128 0x1
	.byte	0x9c
	.long	0x6a72
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x125d
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x6a72
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15597
	.byte	0
	.uleb128 0xc
	.long	0x5f3
	.uleb128 0x3d
	.long	.LASF1969
	.byte	0x1
	.value	0x1268
	.quad	.LFB80
	.quad	.LFE80-.LFB80
	.uleb128 0x1
	.byte	0x9c
	.long	0x6ad2
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1269
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x126a
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x34
	.long	.LASF1970
	.byte	0x1
	.value	0x126b
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x126d
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1971
	.byte	0x1
	.value	0x1279
	.quad	.LFB81
	.quad	.LFE81-.LFB81
	.uleb128 0x1
	.byte	0x9c
	.long	0x6b2d
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x127a
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x127b
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x34
	.long	.LASF1654
	.byte	0x1
	.value	0x127c
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x127e
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1972
	.byte	0x1
	.value	0x129b
	.quad	.LFB83
	.quad	.LFE83-.LFB83
	.uleb128 0x1
	.byte	0x9c
	.long	0x6b88
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x129c
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x129d
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x34
	.long	.LASF913
	.byte	0x1
	.value	0x129e
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1931
	.byte	0x1
	.value	0x12a0
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1973
	.byte	0x1
	.value	0x12aa
	.long	0x5da
	.quad	.LFB84
	.quad	.LFE84-.LFB84
	.uleb128 0x1
	.byte	0x9c
	.long	0x6bcb
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x12ab
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x6bcb
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15625
	.byte	0
	.uleb128 0xc
	.long	0x64c0
	.uleb128 0x39
	.long	.LASF1974
	.byte	0x1
	.value	0x12b7
	.long	0x4e81
	.quad	.LFB85
	.quad	.LFE85-.LFB85
	.uleb128 0x1
	.byte	0x9c
	.long	0x6c2d
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x12b8
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x12b9
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x12bb
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF1975
	.byte	0x1
	.value	0x12bc
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1976
	.byte	0x1
	.value	0x12d3
	.long	0x5da
	.quad	.LFB86
	.quad	.LFE86-.LFB86
	.uleb128 0x1
	.byte	0x9c
	.long	0x6c6c
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x12d4
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x12d6
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1977
	.byte	0x1
	.value	0x12e0
	.long	0x5da
	.quad	.LFB87
	.quad	.LFE87-.LFB87
	.uleb128 0x1
	.byte	0x9c
	.long	0x6cab
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x12e1
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x12e3
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1978
	.byte	0x1
	.value	0x12ec
	.long	0x5da
	.quad	.LFB88
	.quad	.LFE88-.LFB88
	.uleb128 0x1
	.byte	0x9c
	.long	0x6cf9
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x12ed
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x12ee
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x12f0
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1979
	.byte	0x1
	.value	0x12f9
	.long	0x1e3
	.quad	.LFB89
	.quad	.LFE89-.LFB89
	.uleb128 0x1
	.byte	0x9c
	.long	0x6d47
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x12fa
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x12fb
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x12fd
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1980
	.byte	0x1
	.value	0x1306
	.long	0x368
	.quad	.LFB90
	.quad	.LFE90-.LFB90
	.uleb128 0x1
	.byte	0x9c
	.long	0x6d95
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1307
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x1308
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x130a
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1981
	.byte	0x1
	.value	0x1310
	.long	0x4bad
	.quad	.LFB91
	.quad	.LFE91-.LFB91
	.uleb128 0x1
	.byte	0x9c
	.long	0x6de3
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1311
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x1312
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x1314
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF1982
	.byte	0x1
	.value	0x131a
	.long	0x1e3
	.quad	.LFB92
	.quad	.LFE92-.LFB92
	.uleb128 0x1
	.byte	0x9c
	.long	0x6e15
	.uleb128 0x36
	.long	.LASF1983
	.byte	0x1
	.value	0x131c
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x44
	.long	.LASF2400
	.byte	0x1
	.value	0x1323
	.long	0x1e3
	.quad	.LFB93
	.quad	.LFE93-.LFB93
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x39
	.long	.LASF1984
	.byte	0x1
	.value	0x132a
	.long	0x1e3
	.quad	.LFB94
	.quad	.LFE94-.LFB94
	.uleb128 0x1
	.byte	0x9c
	.long	0x6e65
	.uleb128 0x36
	.long	.LASF1983
	.byte	0x1
	.value	0x132c
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x39
	.long	.LASF1985
	.byte	0x1
	.value	0x1332
	.long	0x1e3
	.quad	.LFB95
	.quad	.LFE95-.LFB95
	.uleb128 0x1
	.byte	0x9c
	.long	0x6e97
	.uleb128 0x36
	.long	.LASF1983
	.byte	0x1
	.value	0x1334
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x3d
	.long	.LASF1986
	.byte	0x1
	.value	0x133d
	.quad	.LFB96
	.quad	.LFE96-.LFB96
	.uleb128 0x1
	.byte	0x9c
	.long	0x6ec3
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x133e
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1987
	.byte	0x1
	.value	0x135a
	.quad	.LFB97
	.quad	.LFE97-.LFB97
	.uleb128 0x1
	.byte	0x9c
	.long	0x6f1c
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x135b
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x135c
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.string	"p"
	.byte	0x1
	.value	0x135e
	.long	0x6f1c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF1988
	.byte	0x1
	.value	0x135f
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4e81
	.uleb128 0x3d
	.long	.LASF1989
	.byte	0x1
	.value	0x1373
	.quad	.LFB98
	.quad	.LFE98-.LFB98
	.uleb128 0x1
	.byte	0x9c
	.long	0x6f50
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1374
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF1990
	.byte	0x1
	.value	0x137d
	.quad	.LFB99
	.quad	.LFE99-.LFB99
	.uleb128 0x1
	.byte	0x9c
	.long	0x6fdc
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x137e
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1991
	.byte	0x1
	.value	0x1380
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.quad	.LBB20
	.quad	.LBE20-.LBB20
	.uleb128 0x36
	.long	.LASF1992
	.byte	0x1
	.value	0x1386
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x1387
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.quad	.LBB21
	.quad	.LBE21-.LBB21
	.uleb128 0x36
	.long	.LASF1993
	.byte	0x1
	.value	0x138d
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF1994
	.byte	0x1
	.value	0x139b
	.quad	.LFB100
	.quad	.LFE100-.LFB100
	.uleb128 0x1
	.byte	0x9c
	.long	0x702c
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x139c
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF1991
	.byte	0x1
	.value	0x139d
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x702c
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15714
	.byte	0
	.uleb128 0xc
	.long	0x6044
	.uleb128 0x3d
	.long	.LASF1995
	.byte	0x1
	.value	0x13ae
	.quad	.LFB101
	.quad	.LFE101-.LFB101
	.uleb128 0x1
	.byte	0x9c
	.long	0x70af
	.uleb128 0x34
	.long	.LASF1996
	.byte	0x1
	.value	0x13af
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF1997
	.byte	0x1
	.value	0x13af
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.string	"p"
	.byte	0x1
	.value	0x13b1
	.long	0x70af
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x70c5
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15721
	.uleb128 0x37
	.quad	.LBB22
	.quad	.LBE22-.LBB22
	.uleb128 0x35
	.string	"tmp"
	.byte	0x1
	.value	0x13b7
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4bad
	.uleb128 0x14
	.long	0x3cd
	.long	0x70c5
	.uleb128 0x15
	.long	0x1ea
	.byte	0x10
	.byte	0
	.uleb128 0xc
	.long	0x70b5
	.uleb128 0x39
	.long	.LASF1998
	.byte	0x1
	.value	0x13cf
	.long	0x4bad
	.quad	.LFB102
	.quad	.LFE102-.LFB102
	.uleb128 0x1
	.byte	0x9c
	.long	0x7148
	.uleb128 0x34
	.long	.LASF1999
	.byte	0x1
	.value	0x13d0
	.long	0x322d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x34
	.long	.LASF2000
	.byte	0x1
	.value	0x13d1
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3b
	.string	"t"
	.byte	0x1
	.value	0x13d2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.string	"die"
	.byte	0x1
	.value	0x13d4
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB23
	.quad	.LBE23-.LBB23
	.uleb128 0x36
	.long	.LASF2001
	.byte	0x1
	.value	0x13dc
	.long	0x7148
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4feb
	.uleb128 0x38
	.long	.LASF2002
	.byte	0x1
	.value	0x13eb
	.long	0x4bad
	.quad	.LFB103
	.quad	.LFE103-.LFB103
	.uleb128 0x1
	.byte	0x9c
	.long	0x7180
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x13ec
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3a
	.long	.LASF2003
	.byte	0x1
	.value	0x13f4
	.quad	.LFB104
	.quad	.LFE104-.LFB104
	.uleb128 0x1
	.byte	0x9c
	.long	0x71bd
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x13f5
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF2004
	.byte	0x1
	.value	0x13f6
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x38
	.long	.LASF2005
	.byte	0x1
	.value	0x13fe
	.long	0x4bad
	.quad	.LFB105
	.quad	.LFE105-.LFB105
	.uleb128 0x1
	.byte	0x9c
	.long	0x71fe
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x13ff
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2006
	.byte	0x1
	.value	0x1401
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x3d
	.long	.LASF2007
	.byte	0x1
	.value	0x1409
	.quad	.LFB106
	.quad	.LFE106-.LFB106
	.uleb128 0x1
	.byte	0x9c
	.long	0x7259
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x140a
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2008
	.byte	0x1
	.value	0x140b
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2006
	.byte	0x1
	.value	0x140d
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF2009
	.byte	0x1
	.value	0x140e
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x3d
	.long	.LASF2010
	.byte	0x1
	.value	0x142e
	.quad	.LFB107
	.quad	.LFE107-.LFB107
	.uleb128 0x1
	.byte	0x9c
	.long	0x7287
	.uleb128 0x34
	.long	.LASF2011
	.byte	0x1
	.value	0x142f
	.long	0x3fd2
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2012
	.byte	0x1
	.value	0x1438
	.quad	.LFB108
	.quad	.LFE108-.LFB108
	.uleb128 0x1
	.byte	0x9c
	.long	0x72de
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1439
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2011
	.byte	0x1
	.value	0x143a
	.long	0x3fd2
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x143c
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x143d
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2013
	.byte	0x1
	.value	0x149a
	.quad	.LFB109
	.quad	.LFE109-.LFB109
	.uleb128 0x1
	.byte	0x9c
	.long	0x7328
	.uleb128 0x34
	.long	.LASF2011
	.byte	0x1
	.value	0x149b
	.long	0x3fd2
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x149d
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x36
	.long	.LASF2014
	.byte	0x1
	.value	0x149e
	.long	0x4ec8
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x33
	.long	.LASF2015
	.byte	0x1
	.value	0x14b0
	.quad	.LFB110
	.quad	.LFE110-.LFB110
	.uleb128 0x1
	.byte	0x9c
	.long	0x7356
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x14b1
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x40
	.long	.LASF2016
	.byte	0x1
	.value	0x14ba
	.quad	.LFB111
	.quad	.LFE111-.LFB111
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3a
	.long	.LASF2017
	.byte	0x1
	.value	0x14c7
	.quad	.LFB112
	.quad	.LFE112-.LFB112
	.uleb128 0x1
	.byte	0x9c
	.long	0x73f1
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x14c8
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x14ca
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.string	"cp"
	.byte	0x1
	.value	0x14ca
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.string	"cn"
	.byte	0x1
	.value	0x14ca
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x14cb
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"ap"
	.byte	0x1
	.value	0x14cb
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"an"
	.byte	0x1
	.value	0x14cb
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3d
	.long	.LASF2018
	.byte	0x1
	.value	0x14e7
	.quad	.LFB113
	.quad	.LFE113-.LFB113
	.uleb128 0x1
	.byte	0x9c
	.long	0x742c
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x14e8
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x14ea
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2019
	.byte	0x1
	.value	0x14f7
	.long	0x4bad
	.quad	.LFB114
	.quad	.LFE114-.LFB114
	.uleb128 0x1
	.byte	0x9c
	.long	0x748b
	.uleb128 0x34
	.long	.LASF2020
	.byte	0x1
	.value	0x14f8
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2021
	.byte	0x1
	.value	0x14f8
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF643
	.byte	0x1
	.value	0x14fa
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2022
	.byte	0x1
	.value	0x14fb
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF2023
	.byte	0x1
	.value	0x1504
	.long	0x4bad
	.quad	.LFB115
	.quad	.LFE115-.LFB115
	.uleb128 0x1
	.byte	0x9c
	.long	0x74cc
	.uleb128 0x34
	.long	.LASF2020
	.byte	0x1
	.value	0x1505
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2022
	.byte	0x1
	.value	0x1507
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2024
	.byte	0x1
	.value	0x1513
	.quad	.LFB116
	.quad	.LFE116-.LFB116
	.uleb128 0x1
	.byte	0x9c
	.long	0x7509
	.uleb128 0x3b
	.string	"loc"
	.byte	0x1
	.value	0x1514
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.string	"ctx"
	.byte	0x1
	.value	0x1515
	.long	0x7509
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x3d27
	.uleb128 0x3d
	.long	.LASF2025
	.byte	0x1
	.value	0x151f
	.quad	.LFB117
	.quad	.LFE117-.LFB117
	.uleb128 0x1
	.byte	0x9c
	.long	0x757a
	.uleb128 0x3b
	.string	"at"
	.byte	0x1
	.value	0x1520
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x3b
	.string	"ctx"
	.byte	0x1
	.value	0x1521
	.long	0x7509
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.string	"loc"
	.byte	0x1
	.value	0x1523
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"r"
	.byte	0x1
	.value	0x1524
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x757a
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15847
	.byte	0
	.uleb128 0xc
	.long	0x6044
	.uleb128 0x3d
	.long	.LASF2026
	.byte	0x1
	.value	0x156c
	.quad	.LFB118
	.quad	.LFE118-.LFB118
	.uleb128 0x1
	.byte	0x9c
	.long	0x75d6
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x156d
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.string	"ctx"
	.byte	0x1
	.value	0x156e
	.long	0x7509
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x1570
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x1571
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2027
	.byte	0x1
	.value	0x158a
	.quad	.LFB119
	.quad	.LFE119-.LFB119
	.uleb128 0x1
	.byte	0x9c
	.long	0x7661
	.uleb128 0x34
	.long	.LASF2028
	.byte	0x1
	.value	0x158b
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x36
	.long	.LASF2029
	.byte	0x1
	.value	0x158d
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x36
	.long	.LASF552
	.byte	0x1
	.value	0x158e
	.long	0x3c7
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x35
	.string	"p"
	.byte	0x1
	.value	0x158f
	.long	0x3c7
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x1590
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -236
	.uleb128 0x36
	.long	.LASF2030
	.byte	0x1
	.value	0x1591
	.long	0x7661
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x35
	.string	"ctx"
	.byte	0x1
	.value	0x1592
	.long	0x3d27
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.byte	0
	.uleb128 0x14
	.long	0x395
	.long	0x7671
	.uleb128 0x15
	.long	0x1ea
	.byte	0xf
	.byte	0
	.uleb128 0x38
	.long	.LASF2031
	.byte	0x1
	.value	0x15ac
	.long	0x1e3
	.quad	.LFB120
	.quad	.LFE120-.LFB120
	.uleb128 0x1
	.byte	0x9c
	.long	0x76a3
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x15ad
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2032
	.byte	0x1
	.value	0x15ce
	.long	0x1e3
	.quad	.LFB121
	.quad	.LFE121-.LFB121
	.uleb128 0x1
	.byte	0x9c
	.long	0x76f2
	.uleb128 0x3b
	.string	"c"
	.byte	0x1
	.value	0x15cf
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.quad	.LBB24
	.quad	.LBE24-.LBB24
	.uleb128 0x35
	.string	"t"
	.byte	0x1
	.value	0x15de
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x39
	.long	.LASF2033
	.byte	0x1
	.value	0x15ea
	.long	0x1e3
	.quad	.LFB122
	.quad	.LFE122-.LFB122
	.uleb128 0x1
	.byte	0x9c
	.long	0x7722
	.uleb128 0x3b
	.string	"c"
	.byte	0x1
	.value	0x15eb
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2034
	.byte	0x1
	.value	0x15f3
	.long	0x3c7
	.quad	.LFB123
	.quad	.LFE123-.LFB123
	.uleb128 0x1
	.byte	0x9c
	.long	0x777b
	.uleb128 0x34
	.long	.LASF1623
	.byte	0x1
	.value	0x15f4
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -312
	.uleb128 0x35
	.string	"buf"
	.byte	0x1
	.value	0x15f6
	.long	0x777b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x36
	.long	.LASF1860
	.byte	0x1
	.value	0x15f7
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	label_num.15916
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x778b
	.uleb128 0x15
	.long	0x1ea
	.byte	0xff
	.byte	0
	.uleb128 0x3d
	.long	.LASF2035
	.byte	0x1
	.value	0x1600
	.quad	.LFB124
	.quad	.LFE124-.LFB124
	.uleb128 0x1
	.byte	0x9c
	.long	0x77e5
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1601
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x1603
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.quad	.LBB25
	.quad	.LBE25-.LBB25
	.uleb128 0x35
	.string	"p"
	.byte	0x1
	.value	0x1609
	.long	0x3c7
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2036
	.byte	0x1
	.value	0x161c
	.quad	.LFB125
	.quad	.LFE125-.LFB125
	.uleb128 0x1
	.byte	0x9c
	.long	0x785f
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x161d
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.string	"ptr"
	.byte	0x1
	.value	0x161f
	.long	0x70af
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2037
	.byte	0x1
	.value	0x1620
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1956
	.byte	0x1
	.value	0x1621
	.long	0x7148
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB26
	.quad	.LBE26-.LBB26
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x1625
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2038
	.byte	0x1
	.value	0x1656
	.quad	.LFB126
	.quad	.LFE126-.LFB126
	.uleb128 0x1
	.byte	0x9c
	.long	0x789a
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1657
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x1659
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2039
	.byte	0x1
	.value	0x1667
	.quad	.LFB127
	.quad	.LFE127-.LFB127
	.uleb128 0x1
	.byte	0x9c
	.long	0x78e4
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1668
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x166a
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2040
	.byte	0x1
	.value	0x166b
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2041
	.byte	0x1
	.value	0x167b
	.quad	.LFB128
	.quad	.LFE128-.LFB128
	.uleb128 0x1
	.byte	0x9c
	.long	0x7992
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x167c
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x36
	.long	.LASF2042
	.byte	0x1
	.value	0x167e
	.long	0x38e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF2043
	.byte	0x1
	.value	0x167f
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x1680
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2040
	.byte	0x1
	.value	0x1681
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2044
	.byte	0x1
	.value	0x1681
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x79a2
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15964
	.uleb128 0x37
	.quad	.LBB27
	.quad	.LBE27-.LBB27
	.uleb128 0x36
	.long	.LASF2045
	.byte	0x1
	.value	0x1691
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x79a2
	.uleb128 0x15
	.long	0x1ea
	.byte	0x12
	.byte	0
	.uleb128 0xc
	.long	0x7992
	.uleb128 0x39
	.long	.LASF2046
	.byte	0x1
	.value	0x16c4
	.long	0x1e3
	.quad	.LFB129
	.quad	.LFE129-.LFB129
	.uleb128 0x1
	.byte	0x9c
	.long	0x79e8
	.uleb128 0x34
	.long	.LASF518
	.byte	0x1
	.value	0x16c5
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"log"
	.byte	0x1
	.value	0x16c7
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x39
	.long	.LASF2047
	.byte	0x1
	.value	0x16d8
	.long	0x38e
	.quad	.LFB130
	.quad	.LFE130-.LFB130
	.uleb128 0x1
	.byte	0x9c
	.long	0x7a6a
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x16d9
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0x16db
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x16dc
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x7a6a
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16005
	.uleb128 0x37
	.quad	.LBB28
	.quad	.LBE28-.LBB28
	.uleb128 0x36
	.long	.LASF2048
	.byte	0x1
	.value	0x16eb
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x6573
	.uleb128 0x3d
	.long	.LASF2049
	.byte	0x1
	.value	0x1727
	.quad	.LFB131
	.quad	.LFE131-.LFB131
	.uleb128 0x1
	.byte	0x9c
	.long	0x7aaa
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1728
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x172a
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2050
	.byte	0x1
	.value	0x173d
	.quad	.LFB132
	.quad	.LFE132-.LFB132
	.uleb128 0x1
	.byte	0x9c
	.long	0x7ae5
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x173e
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x1740
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2051
	.byte	0x1
	.value	0x174a
	.quad	.LFB133
	.quad	.LFE133-.LFB133
	.uleb128 0x1
	.byte	0x9c
	.long	0x7b20
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x174b
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x174d
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2052
	.byte	0x1
	.value	0x1758
	.long	0x38e
	.quad	.LFB134
	.quad	.LFE134-.LFB134
	.uleb128 0x1
	.byte	0x9c
	.long	0x7b7e
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0x175a
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x175b
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x37
	.quad	.LBB29
	.quad	.LBE29-.LBB29
	.uleb128 0x35
	.string	"p"
	.byte	0x1
	.value	0x1760
	.long	0x4f49
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF2053
	.byte	0x1
	.value	0x176b
	.long	0x38e
	.quad	.LFB135
	.quad	.LFE135-.LFB135
	.uleb128 0x1
	.byte	0x9c
	.long	0x7bb0
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0x176d
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2054
	.byte	0x1
	.value	0x177d
	.long	0x33ba
	.quad	.LFB136
	.quad	.LFE136-.LFB136
	.uleb128 0x1
	.byte	0x9c
	.long	0x7bf3
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x177e
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x7c03
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16047
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x7c03
	.uleb128 0x15
	.long	0x1ea
	.byte	0xc
	.byte	0
	.uleb128 0xc
	.long	0x7bf3
	.uleb128 0x3d
	.long	.LASF2055
	.byte	0x1
	.value	0x17c5
	.quad	.LFB137
	.quad	.LFE137-.LFB137
	.uleb128 0x1
	.byte	0x9c
	.long	0x7c43
	.uleb128 0x3b
	.string	"a"
	.byte	0x1
	.value	0x17c6
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1763
	.byte	0x1
	.value	0x17c8
	.long	0x33ba
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x3d
	.long	.LASF2056
	.byte	0x1
	.value	0x17d1
	.quad	.LFB138
	.quad	.LFE138-.LFB138
	.uleb128 0x1
	.byte	0x9c
	.long	0x7ca1
	.uleb128 0x36
	.long	.LASF2042
	.byte	0x1
	.value	0x17d3
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2044
	.byte	0x1
	.value	0x17d5
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB30
	.quad	.LBE30-.LBB30
	.uleb128 0x36
	.long	.LASF2045
	.byte	0x1
	.value	0x17d9
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2057
	.byte	0x1
	.value	0x17f7
	.quad	.LFB139
	.quad	.LFE139-.LFB139
	.uleb128 0x1
	.byte	0x9c
	.long	0x7cde
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x17f8
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"sym"
	.byte	0x1
	.value	0x17fa
	.long	0x3c7
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2058
	.byte	0x1
	.value	0x1838
	.quad	.LFB142
	.quad	.LFE142-.LFB142
	.uleb128 0x1
	.byte	0x9c
	.long	0x7d4f
	.uleb128 0x34
	.long	.LASF1859
	.byte	0x1
	.value	0x1839
	.long	0x4c4e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2059
	.byte	0x1
	.value	0x183b
	.long	0x4c4e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x7d5f
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16112
	.uleb128 0x37
	.quad	.LBB31
	.quad	.LBE31-.LBB31
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0x184d
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x7d5f
	.uleb128 0x15
	.long	0x1ea
	.byte	0xf
	.byte	0
	.uleb128 0xc
	.long	0x7d4f
	.uleb128 0x3d
	.long	.LASF2060
	.byte	0x1
	.value	0x186b
	.quad	.LFB143
	.quad	.LFE143-.LFB143
	.uleb128 0x1
	.byte	0x9c
	.long	0x7ede
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x186c
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x186e
	.long	0x4e81
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x35
	.string	"c"
	.byte	0x1
	.value	0x186f
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0x1870
	.long	0x38e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x7ede
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16142
	.uleb128 0x37
	.quad	.LBB32
	.quad	.LBE32-.LBB32
	.uleb128 0x36
	.long	.LASF552
	.byte	0x1
	.value	0x187c
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x3f
	.quad	.LBB33
	.quad	.LBE33-.LBB33
	.long	0x7e16
	.uleb128 0x35
	.string	"p"
	.byte	0x1
	.value	0x188b
	.long	0x3c7
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.uleb128 0x3f
	.quad	.LBB34
	.quad	.LBE34-.LBB34
	.long	0x7e4c
	.uleb128 0x36
	.long	.LASF1034
	.byte	0x1
	.value	0x18ab
	.long	0x38e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.long	.LASF2061
	.byte	0x1
	.value	0x18ab
	.long	0x38e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.uleb128 0x3f
	.quad	.LBB35
	.quad	.LBE35-.LBB35
	.long	0x7e70
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x18c5
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.byte	0
	.uleb128 0x3f
	.quad	.LBB36
	.quad	.LBE36-.LBB36
	.long	0x7e96
	.uleb128 0x35
	.string	"sym"
	.byte	0x1
	.value	0x18d6
	.long	0x3c7
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x3f
	.quad	.LBB37
	.quad	.LBE37-.LBB37
	.long	0x7ebc
	.uleb128 0x35
	.string	"sym"
	.byte	0x1
	.value	0x18e2
	.long	0x3c7
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x37
	.quad	.LBB38
	.quad	.LBE38-.LBB38
	.uleb128 0x35
	.string	"l1"
	.byte	0x1
	.value	0x18f1
	.long	0x5ca
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x5ab6
	.uleb128 0x45
	.long	.LASF2286
	.byte	0x1
	.value	0x191c
	.quad	.LFB144
	.quad	.LFE144-.LFB144
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3d
	.long	.LASF2062
	.byte	0x1
	.value	0x1929
	.quad	.LFB145
	.quad	.LFE145-.LFB145
	.uleb128 0x1
	.byte	0x9c
	.long	0x7f5b
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x192a
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2063
	.byte	0x1
	.value	0x192c
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB39
	.quad	.LBE39-.LBB39
	.uleb128 0x35
	.string	"tmp"
	.byte	0x1
	.value	0x193d
	.long	0x3c7
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x39
	.long	.LASF2064
	.byte	0x1
	.value	0x1956
	.long	0x5da
	.quad	.LFB146
	.quad	.LFE146-.LFB146
	.uleb128 0x1
	.byte	0x9c
	.long	0x7f9c
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x1957
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF2065
	.byte	0x1
	.value	0x1958
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x3d
	.long	.LASF2066
	.byte	0x1
	.value	0x1960
	.quad	.LFB147
	.quad	.LFE147-.LFB147
	.uleb128 0x1
	.byte	0x9c
	.long	0x7fe6
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x1961
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x1962
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"p"
	.byte	0x1
	.value	0x1964
	.long	0x4f49
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2067
	.byte	0x1
	.value	0x197c
	.quad	.LFB148
	.quad	.LFE148-.LFB148
	.uleb128 0x1
	.byte	0x9c
	.long	0x8055
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x197e
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x36
	.long	.LASF2068
	.byte	0x1
	.value	0x197f
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x8055
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16178
	.uleb128 0x37
	.quad	.LBB40
	.quad	.LBE40-.LBB40
	.uleb128 0x35
	.string	"pub"
	.byte	0x1
	.value	0x198b
	.long	0x4f49
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x7d4f
	.uleb128 0x3d
	.long	.LASF2069
	.byte	0x1
	.value	0x199d
	.quad	.LFB149
	.quad	.LFE149-.LFB149
	.uleb128 0x1
	.byte	0x9c
	.long	0x8097
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x199e
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x199f
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3d
	.long	.LASF2070
	.byte	0x1
	.value	0x19b3
	.quad	.LFB150
	.quad	.LFE150-.LFB150
	.uleb128 0x1
	.byte	0x9c
	.long	0x8135
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x19b5
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x36
	.long	.LASF2071
	.byte	0x1
	.value	0x19b6
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x8135
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16194
	.uleb128 0x37
	.quad	.LBB41
	.quad	.LBE41-.LBB41
	.uleb128 0x35
	.string	"die"
	.byte	0x1
	.value	0x19d1
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x37
	.quad	.LBB42
	.quad	.LBE42-.LBB42
	.uleb128 0x35
	.string	"a"
	.byte	0x1
	.value	0x19e3
	.long	0x4e81
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"loc"
	.byte	0x1
	.value	0x19e4
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x67b0
	.uleb128 0x39
	.long	.LASF2072
	.byte	0x1
	.value	0x19fe
	.long	0x368
	.quad	.LFB151
	.quad	.LFE151-.LFB151
	.uleb128 0x1
	.byte	0x9c
	.long	0x817b
	.uleb128 0x34
	.long	.LASF26
	.byte	0x1
	.value	0x19ff
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1844
	.byte	0x1
	.value	0x1a01
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x3d
	.long	.LASF2073
	.byte	0x1
	.value	0x1a12
	.quad	.LFB152
	.quad	.LFE152-.LFB152
	.uleb128 0x1
	.byte	0x9c
	.long	0x8221
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x1a14
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x36
	.long	.LASF2074
	.byte	0x1
	.value	0x1a15
	.long	0x21e5
	.uleb128 0x9
	.byte	0x3
	.quad	start_fmt.16207
	.uleb128 0x35
	.string	"fmt"
	.byte	0x1
	.value	0x1a16
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x37
	.quad	.LBB43
	.quad	.LBE43-.LBB43
	.uleb128 0x36
	.long	.LASF526
	.byte	0x1
	.value	0x1a1a
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x37
	.quad	.LBB44
	.quad	.LBE44-.LBB44
	.uleb128 0x36
	.long	.LASF2075
	.byte	0x1
	.value	0x1a1e
	.long	0x5d0b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.long	.LASF2076
	.byte	0x1
	.value	0x1a1f
	.long	0x5d0b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF2077
	.byte	0x1
	.value	0x1a60
	.long	0x1e3
	.quad	.LFB153
	.quad	.LFE153-.LFB153
	.uleb128 0x1
	.byte	0x9c
	.long	0x829a
	.uleb128 0x3b
	.string	"p1"
	.byte	0x1
	.value	0x1a61
	.long	0x619
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x3b
	.string	"p2"
	.byte	0x1
	.value	0x1a62
	.long	0x619
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.string	"s1"
	.byte	0x1
	.value	0x1a64
	.long	0x829a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.string	"s2"
	.byte	0x1
	.value	0x1a65
	.long	0x829a
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.string	"cp1"
	.byte	0x1
	.value	0x1a66
	.long	0x2ec7
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"cp2"
	.byte	0x1
	.value	0x1a67
	.long	0x2ec7
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x82a0
	.uleb128 0xc
	.long	0x5039
	.uleb128 0x3d
	.long	.LASF2078
	.byte	0x1
	.value	0x1a89
	.quad	.LFB154
	.quad	.LFE154-.LFB154
	.uleb128 0x1
	.byte	0x9c
	.long	0x841c
	.uleb128 0x36
	.long	.LASF2079
	.byte	0x1
	.value	0x1a8b
	.long	0x841c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF2080
	.byte	0x1
	.value	0x1a8c
	.long	0x8422
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2081
	.byte	0x1
	.value	0x1a8d
	.long	0x613
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2082
	.byte	0x1
	.value	0x1a8e
	.long	0x613
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2083
	.byte	0x1
	.value	0x1a8f
	.long	0x613
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2084
	.byte	0x1
	.value	0x1a90
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x36
	.long	.LASF2085
	.byte	0x1
	.value	0x1a91
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x1a92
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x35
	.string	"idx"
	.byte	0x1
	.value	0x1a93
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x3f
	.quad	.LBB45
	.quad	.LBE45-.LBB45
	.long	0x8371
	.uleb128 0x35
	.string	"f"
	.byte	0x1
	.value	0x1a9e
	.long	0x3c7
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x3f
	.quad	.LBB46
	.quad	.LBE46-.LBB46
	.long	0x8395
	.uleb128 0x35
	.string	"j"
	.byte	0x1
	.value	0x1ac7
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.byte	0
	.uleb128 0x3f
	.quad	.LBB47
	.quad	.LBE47-.LBB47
	.long	0x83e9
	.uleb128 0x35
	.string	"j"
	.byte	0x1
	.value	0x1aea
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x36
	.long	.LASF1592
	.byte	0x1
	.value	0x1aeb
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x37
	.quad	.LBB48
	.quad	.LBE48-.LBB48
	.uleb128 0x35
	.string	"k"
	.byte	0x1
	.value	0x1af9
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.byte	0
	.uleb128 0x37
	.quad	.LBB49
	.quad	.LBE49-.LBB49
	.uleb128 0x36
	.long	.LASF1849
	.byte	0x1
	.value	0x1b40
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x36
	.long	.LASF1850
	.byte	0x1
	.value	0x1b41
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x5039
	.uleb128 0x3
	.byte	0x8
	.long	0x5088
	.uleb128 0x3d
	.long	.LASF2086
	.byte	0x1
	.value	0x1b58
	.quad	.LFB155
	.quad	.LFE155-.LFB155
	.uleb128 0x1
	.byte	0x9c
	.long	0x856a
	.uleb128 0x35
	.string	"l1"
	.byte	0x1
	.value	0x1b5a
	.long	0x5ca
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x35
	.string	"l2"
	.byte	0x1
	.value	0x1b5a
	.long	0x5ca
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x35
	.string	"p1"
	.byte	0x1
	.value	0x1b5a
	.long	0x5ca
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x35
	.string	"p2"
	.byte	0x1
	.value	0x1b5a
	.long	0x5ca
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x36
	.long	.LASF2087
	.byte	0x1
	.value	0x1b5b
	.long	0x5d0b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.long	.LASF2088
	.byte	0x1
	.value	0x1b5c
	.long	0x5d0b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.string	"opc"
	.byte	0x1
	.value	0x1b5d
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x36
	.long	.LASF2089
	.byte	0x1
	.value	0x1b5e
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -292
	.uleb128 0x36
	.long	.LASF2090
	.byte	0x1
	.value	0x1b5f
	.long	0x38e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x36
	.long	.LASF2091
	.byte	0x1
	.value	0x1b60
	.long	0x38e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x36
	.long	.LASF2092
	.byte	0x1
	.value	0x1b61
	.long	0x37c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x36
	.long	.LASF2093
	.byte	0x1
	.value	0x1b62
	.long	0x37c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x36
	.long	.LASF2094
	.byte	0x1
	.value	0x1b63
	.long	0x38e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x36
	.long	.LASF564
	.byte	0x1
	.value	0x1b64
	.long	0x38e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x3f
	.quad	.LBB50
	.quad	.LBE50-.LBB50
	.long	0x8547
	.uleb128 0x36
	.long	.LASF2014
	.byte	0x1
	.value	0x1baa
	.long	0x4ec8
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.byte	0
	.uleb128 0x37
	.quad	.LBB51
	.quad	.LBE51-.LBB51
	.uleb128 0x36
	.long	.LASF2014
	.byte	0x1
	.value	0x1c14
	.long	0x4f02
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.byte	0
	.byte	0
	.uleb128 0x39
	.long	.LASF2095
	.byte	0x1
	.value	0x1c90
	.long	0x4bad
	.quad	.LFB156
	.quad	.LFE156-.LFB156
	.uleb128 0x1
	.byte	0x9c
	.long	0x85eb
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x1c91
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2096
	.byte	0x1
	.value	0x1c93
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF2097
	.byte	0x1
	.value	0x1c94
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2098
	.byte	0x1
	.value	0x1c95
	.long	0x3aa6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x36
	.long	.LASF552
	.byte	0x1
	.value	0x1c96
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x85eb
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16336
	.byte	0
	.uleb128 0xc
	.long	0x6044
	.uleb128 0x39
	.long	.LASF2099
	.byte	0x1
	.value	0x1cee
	.long	0x123
	.quad	.LFB157
	.quad	.LFE157-.LFB157
	.uleb128 0x1
	.byte	0x9c
	.long	0x8622
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x1cef
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2100
	.byte	0x1
	.value	0x1d06
	.long	0x1e3
	.quad	.LFB158
	.quad	.LFE158-.LFB158
	.uleb128 0x1
	.byte	0x9c
	.long	0x8667
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x1d07
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x8667
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16369
	.byte	0
	.uleb128 0xc
	.long	0x7bf3
	.uleb128 0x39
	.long	.LASF2101
	.byte	0x1
	.value	0x1d2f
	.long	0x4bad
	.quad	.LFB159
	.quad	.LFE159-.LFB159
	.uleb128 0x1
	.byte	0x9c
	.long	0x8770
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x1d30
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.long	.LASF2102
	.byte	0x1
	.value	0x1d31
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x34
	.long	.LASF2103
	.byte	0x1
	.value	0x1d32
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x1d33
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x36
	.long	.LASF0
	.byte	0x1
	.value	0x1d35
	.long	0x7de
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x36
	.long	.LASF2105
	.byte	0x1
	.value	0x1d36
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2106
	.byte	0x1
	.value	0x1d37
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2107
	.byte	0x1
	.value	0x1d38
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x8780
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16383
	.uleb128 0x37
	.quad	.LBB52
	.quad	.LBE52-.LBB52
	.uleb128 0x36
	.long	.LASF2108
	.byte	0x1
	.value	0x1d3c
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.quad	.LBB53
	.quad	.LBE53-.LBB53
	.uleb128 0x36
	.long	.LASF2097
	.byte	0x1
	.value	0x1d53
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2109
	.byte	0x1
	.value	0x1d54
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x8780
	.uleb128 0x15
	.long	0x1ea
	.byte	0x11
	.byte	0
	.uleb128 0xc
	.long	0x8770
	.uleb128 0x39
	.long	.LASF2110
	.byte	0x1
	.value	0x1dbb
	.long	0x368
	.quad	.LFB161
	.quad	.LFE161-.LFB161
	.uleb128 0x1
	.byte	0x9c
	.long	0x87d9
	.uleb128 0x3b
	.string	"rtl"
	.byte	0x1
	.value	0x1dbc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF57
	.byte	0x1
	.value	0x1dbe
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x87d9
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16391
	.byte	0
	.uleb128 0xc
	.long	0x5ab6
	.uleb128 0x39
	.long	.LASF2111
	.byte	0x1
	.value	0x1dca
	.long	0x4c42
	.quad	.LFB162
	.quad	.LFE162-.LFB162
	.uleb128 0x1
	.byte	0x9c
	.long	0x882e
	.uleb128 0x3b
	.string	"rtl"
	.byte	0x1
	.value	0x1dcb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2112
	.byte	0x1
	.value	0x1dcd
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.string	"reg"
	.byte	0x1
	.value	0x1dce
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x39
	.long	.LASF2113
	.byte	0x1
	.value	0x1ddf
	.long	0x4c42
	.quad	.LFB163
	.quad	.LFE163-.LFB163
	.uleb128 0x1
	.byte	0x9c
	.long	0x886c
	.uleb128 0x3b
	.string	"i"
	.byte	0x1
	.value	0x1de0
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.string	"op"
	.byte	0x1
	.value	0x1de2
	.long	0x36c0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x39
	.long	.LASF2114
	.byte	0x1
	.value	0x1e07
	.long	0x4c42
	.quad	.LFB164
	.quad	.LFE164-.LFB164
	.uleb128 0x1
	.byte	0x9c
	.long	0x88cb
	.uleb128 0x3b
	.string	"reg"
	.byte	0x1
	.value	0x1e08
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x34
	.long	.LASF913
	.byte	0x1
	.value	0x1e09
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2112
	.byte	0x1
	.value	0x1e0b
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF2115
	.byte	0x1
	.value	0x1e0f
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x38
	.long	.LASF2116
	.byte	0x1
	.value	0x1e20
	.long	0x1e3
	.quad	.LFB165
	.quad	.LFE165-.LFB165
	.uleb128 0x1
	.byte	0x9c
	.long	0x88fd
	.uleb128 0x3b
	.string	"rtl"
	.byte	0x1
	.value	0x1e21
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2117
	.byte	0x1
	.value	0x1e39
	.long	0x4c42
	.quad	.LFB166
	.quad	.LFE166-.LFB166
	.uleb128 0x1
	.byte	0x9c
	.long	0x89d7
	.uleb128 0x3b
	.string	"rtl"
	.byte	0x1
	.value	0x1e3a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.long	.LASF1
	.byte	0x1
	.value	0x1e3b
	.long	0x620
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x36
	.long	.LASF2118
	.byte	0x1
	.value	0x1e3d
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x46
	.long	.LASF2129
	.byte	0x1
	.value	0x1eaa
	.quad	.L1627
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x89d7
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16438
	.uleb128 0x3f
	.quad	.LBB54
	.quad	.LBE54-.LBB54
	.long	0x89a6
	.uleb128 0x36
	.long	.LASF2119
	.byte	0x1
	.value	0x1e7e
	.long	0x21ef
	.uleb128 0x3
	.byte	0x91
	.sleb128 -65
	.uleb128 0x35
	.string	"tmp"
	.byte	0x1
	.value	0x1e7f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x37
	.quad	.LBB55
	.quad	.LBE55-.LBB55
	.uleb128 0x35
	.string	"op0"
	.byte	0x1
	.value	0x1ec7
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"op1"
	.byte	0x1
	.value	0x1ec8
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x7992
	.uleb128 0x39
	.long	.LASF2120
	.byte	0x1
	.value	0x1eea
	.long	0x4c42
	.quad	.LFB167
	.quad	.LFE167-.LFB167
	.uleb128 0x1
	.byte	0x9c
	.long	0x8a48
	.uleb128 0x3b
	.string	"x0"
	.byte	0x1
	.value	0x1eeb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x3b
	.string	"x1"
	.byte	0x1
	.value	0x1eeb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2121
	.byte	0x1
	.value	0x1eed
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2122
	.byte	0x1
	.value	0x1eee
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2123
	.byte	0x1
	.value	0x1eef
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2124
	.byte	0x1
	.value	0x1f0a
	.long	0x4c42
	.quad	.LFB168
	.quad	.LFE168-.LFB168
	.uleb128 0x1
	.byte	0x9c
	.long	0x8a9c
	.uleb128 0x3b
	.string	"rtl"
	.byte	0x1
	.value	0x1f0b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2112
	.byte	0x1
	.value	0x1f0d
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x8a9c
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16456
	.byte	0
	.uleb128 0xc
	.long	0x67b0
	.uleb128 0x39
	.long	.LASF2125
	.byte	0x1
	.value	0x1f34
	.long	0x4c42
	.quad	.LFB169
	.quad	.LFE169-.LFB169
	.uleb128 0x1
	.byte	0x9c
	.long	0x8cac
	.uleb128 0x3b
	.string	"loc"
	.byte	0x1
	.value	0x1f35
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x34
	.long	.LASF2126
	.byte	0x1
	.value	0x1f36
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -188
	.uleb128 0x35
	.string	"ret"
	.byte	0x1
	.value	0x1f38
	.long	0x4c42
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x36
	.long	.LASF2127
	.byte	0x1
	.value	0x1f38
	.long	0x4c42
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x36
	.long	.LASF2128
	.byte	0x1
	.value	0x1f39
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x36
	.long	.LASF1031
	.byte	0x1
	.value	0x1f3a
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x35
	.string	"op"
	.byte	0x1
	.value	0x1f3b
	.long	0x36c0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x46
	.long	.LASF2130
	.byte	0x1
	.value	0x201d
	.quad	.L1717
	.uleb128 0x46
	.long	.LASF2131
	.byte	0x1
	.value	0x2034
	.quad	.L1728
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x8cbc
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16533
	.uleb128 0x47
	.long	.Ldebug_ranges0+0x30
	.long	0x8ba1
	.uleb128 0x35
	.string	"rtl"
	.byte	0x1
	.value	0x1f63
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x37
	.quad	.LBB57
	.quad	.LBE57-.LBB57
	.uleb128 0x36
	.long	.LASF1
	.byte	0x1
	.value	0x1f70
	.long	0x620
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.byte	0
	.byte	0
	.uleb128 0x3f
	.quad	.LBB59
	.quad	.LBE59-.LBB59
	.long	0x8c27
	.uleb128 0x35
	.string	"obj"
	.byte	0x1
	.value	0x1f91
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x36
	.long	.LASF913
	.byte	0x1
	.value	0x1f91
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x36
	.long	.LASF2132
	.byte	0x1
	.value	0x1f92
	.long	0x37c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x36
	.long	.LASF2133
	.byte	0x1
	.value	0x1f92
	.long	0x37c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x36
	.long	.LASF2134
	.byte	0x1
	.value	0x1f92
	.long	0x37c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.long	.LASF1
	.byte	0x1
	.value	0x1f93
	.long	0x620
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x36
	.long	.LASF2135
	.byte	0x1
	.value	0x1f94
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.byte	0
	.uleb128 0x3f
	.quad	.LBB60
	.quad	.LBE60-.LBB60
	.long	0x8c8a
	.uleb128 0x35
	.string	"lhs"
	.byte	0x1
	.value	0x2046
	.long	0x4c42
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.string	"rhs"
	.byte	0x1
	.value	0x2048
	.long	0x4c42
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF2136
	.byte	0x1
	.value	0x204a
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2137
	.byte	0x1
	.value	0x204a
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.string	"tmp"
	.byte	0x1
	.value	0x204a
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x37
	.quad	.LBB61
	.quad	.LBE61-.LBB61
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0x206e
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x8cbc
	.uleb128 0x15
	.long	0x1ea
	.byte	0x18
	.byte	0
	.uleb128 0xc
	.long	0x8cac
	.uleb128 0x38
	.long	.LASF2138
	.byte	0x1
	.value	0x208e
	.long	0x123
	.quad	.LFB171
	.quad	.LFE171-.LFB171
	.uleb128 0x1
	.byte	0x9c
	.long	0x8d02
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x208f
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x2091
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF2139
	.byte	0x1
	.value	0x20a2
	.long	0x368
	.quad	.LFB172
	.quad	.LFE172-.LFB172
	.uleb128 0x1
	.byte	0x9c
	.long	0x8d34
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x20a3
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2140
	.byte	0x1
	.value	0x20a9
	.long	0x368
	.quad	.LFB173
	.quad	.LFE173-.LFB173
	.uleb128 0x1
	.byte	0x9c
	.long	0x8d75
	.uleb128 0x34
	.long	.LASF2141
	.byte	0x1
	.value	0x20aa
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF548
	.byte	0x1
	.value	0x20ac
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x39
	.long	.LASF2142
	.byte	0x1
	.value	0x20c8
	.long	0x38e
	.quad	.LFB174
	.quad	.LFE174-.LFB174
	.uleb128 0x1
	.byte	0x9c
	.long	0x8da7
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x20c9
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2143
	.byte	0x1
	.value	0x20de
	.long	0x37c
	.quad	.LFB175
	.quad	.LFE175-.LFB175
	.uleb128 0x1
	.byte	0x9c
	.long	0x8e79
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x20df
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x36
	.long	.LASF2144
	.byte	0x1
	.value	0x20e1
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.long	.LASF2145
	.byte	0x1
	.value	0x20e2
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x36
	.long	.LASF2146
	.byte	0x1
	.value	0x20e3
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2147
	.byte	0x1
	.value	0x20e4
	.long	0x37c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x20e5
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2148
	.byte	0x1
	.value	0x20e6
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x36
	.long	.LASF2149
	.byte	0x1
	.value	0x20e7
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2150
	.byte	0x1
	.value	0x20e8
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2151
	.byte	0x1
	.value	0x20e9
	.long	0x38e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x8e79
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16565
	.byte	0
	.uleb128 0xc
	.long	0x8770
	.uleb128 0x3d
	.long	.LASF2152
	.byte	0x1
	.value	0x2156
	.quad	.LFB176
	.quad	.LFE176-.LFB176
	.uleb128 0x1
	.byte	0x9c
	.long	0x8ed9
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x2157
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF1942
	.byte	0x1
	.value	0x2158
	.long	0x3445
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x3b
	.string	"rtl"
	.byte	0x1
	.value	0x2159
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1912
	.byte	0x1
	.value	0x215b
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2153
	.byte	0x1
	.value	0x2175
	.quad	.LFB177
	.quad	.LFE177-.LFB177
	.uleb128 0x1
	.byte	0x9c
	.long	0x8f8c
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x2176
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2177
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF913
	.byte	0x1
	.value	0x2179
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2154
	.byte	0x1
	.value	0x217a
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x8f9c
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16579
	.uleb128 0x3f
	.quad	.LBB62
	.quad	.LBE62-.LBB62
	.long	0x8f6b
	.uleb128 0x35
	.string	"tmp"
	.byte	0x1
	.value	0x218a
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.quad	.LBB63
	.quad	.LBE63-.LBB63
	.uleb128 0x35
	.string	"op"
	.byte	0x1
	.value	0x21ae
	.long	0x36c0
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x8f9c
	.uleb128 0x15
	.long	0x1ea
	.byte	0x22
	.byte	0
	.uleb128 0xc
	.long	0x8f8c
	.uleb128 0x3d
	.long	.LASF2155
	.byte	0x1
	.value	0x21ca
	.quad	.LFB178
	.quad	.LFE178-.LFB178
	.uleb128 0x1
	.byte	0x9c
	.long	0x908f
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x21cb
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x3b
	.string	"rtl"
	.byte	0x1
	.value	0x21cc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x909f
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16587
	.uleb128 0x3f
	.quad	.LBB64
	.quad	.LBE64-.LBB64
	.long	0x9018
	.uleb128 0x35
	.string	"val"
	.byte	0x1
	.value	0x21d7
	.long	0x37c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.uleb128 0x41
	.long	.Ldebug_ranges0+0x60
	.uleb128 0x36
	.long	.LASF1
	.byte	0x1
	.value	0x21f0
	.long	0x620
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x37
	.quad	.LBB66
	.quad	.LBE66-.LBB66
	.uleb128 0x36
	.long	.LASF475
	.byte	0x1
	.value	0x21f4
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x36
	.long	.LASF1805
	.byte	0x1
	.value	0x21f5
	.long	0x4d87
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.string	"rv"
	.byte	0x1
	.value	0x21f6
	.long	0x1061
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x37
	.quad	.LBB67
	.quad	.LBE67-.LBB67
	.uleb128 0x35
	.string	"u"
	.byte	0x1
	.value	0x21f8
	.long	0x106c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x909f
	.uleb128 0x15
	.long	0x1ea
	.byte	0x19
	.byte	0
	.uleb128 0xc
	.long	0x908f
	.uleb128 0x39
	.long	.LASF2156
	.byte	0x1
	.value	0x223b
	.long	0x2d
	.quad	.LFB179
	.quad	.LFE179-.LFB179
	.uleb128 0x1
	.byte	0x9c
	.long	0x918e
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x223c
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x35
	.string	"rtl"
	.byte	0x1
	.value	0x223e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x918e
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16619
	.uleb128 0x3f
	.quad	.LBB69
	.quad	.LBE69-.LBB69
	.long	0x912f
	.uleb128 0x36
	.long	.LASF2157
	.byte	0x1
	.value	0x22a0
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x36
	.long	.LASF2158
	.byte	0x1
	.value	0x22a1
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x37
	.quad	.LBB70
	.quad	.LBE70-.LBB70
	.uleb128 0x36
	.long	.LASF2159
	.byte	0x1
	.value	0x22e4
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2160
	.byte	0x1
	.value	0x22e5
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2161
	.byte	0x1
	.value	0x22e6
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF1635
	.byte	0x1
	.value	0x22e7
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1
	.byte	0x1
	.value	0x22e8
	.long	0x620
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x5a42
	.uleb128 0x3d
	.long	.LASF2162
	.byte	0x1
	.value	0x2314
	.quad	.LFB180
	.quad	.LFE180-.LFB180
	.uleb128 0x1
	.byte	0x9c
	.long	0x91f2
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x2315
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2316
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"rtl"
	.byte	0x1
	.value	0x2318
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x9202
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16625
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x9202
	.uleb128 0x15
	.long	0x1ea
	.byte	0x25
	.byte	0
	.uleb128 0xc
	.long	0x91f2
	.uleb128 0x3d
	.long	.LASF2163
	.byte	0x1
	.value	0x234b
	.quad	.LFB181
	.quad	.LFE181-.LFB181
	.uleb128 0x1
	.byte	0x9c
	.long	0x9262
	.uleb128 0x34
	.long	.LASF2164
	.byte	0x1
	.value	0x234c
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x234d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF1635
	.byte	0x1
	.value	0x234f
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x2350
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2165
	.byte	0x1
	.value	0x236c
	.quad	.LFB182
	.quad	.LFE182-.LFB182
	.uleb128 0x1
	.byte	0x9c
	.long	0x929f
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x236d
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF2166
	.byte	0x1
	.value	0x236e
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3d
	.long	.LASF2167
	.byte	0x1
	.value	0x237d
	.quad	.LFB183
	.quad	.LFE183-.LFB183
	.uleb128 0x1
	.byte	0x9c
	.long	0x93b8
	.uleb128 0x34
	.long	.LASF2168
	.byte	0x1
	.value	0x237e
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.long	.LASF2169
	.byte	0x1
	.value	0x237f
	.long	0x3445
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x34
	.long	.LASF2170
	.byte	0x1
	.value	0x2380
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x3f
	.quad	.LBB71
	.quad	.LBE71-.LBB71
	.long	0x9352
	.uleb128 0x35
	.string	"ctx"
	.byte	0x1
	.value	0x23b4
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2008
	.byte	0x1
	.value	0x23b5
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.string	"loc"
	.byte	0x1
	.value	0x23b6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x37
	.quad	.LBB72
	.quad	.LBE72-.LBB72
	.uleb128 0x36
	.long	.LASF2171
	.byte	0x1
	.value	0x23bc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x3f
	.quad	.LBB73
	.quad	.LBE73-.LBB73
	.long	0x9377
	.uleb128 0x36
	.long	.LASF2008
	.byte	0x1
	.value	0x23ce
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x37
	.quad	.LBB74
	.quad	.LBE74-.LBB74
	.uleb128 0x35
	.string	"ctx"
	.byte	0x1
	.value	0x23df
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF2008
	.byte	0x1
	.value	0x23df
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.string	"loc"
	.byte	0x1
	.value	0x23e0
	.long	0x4c42
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2172
	.byte	0x1
	.value	0x2403
	.quad	.LFB184
	.quad	.LFE184-.LFB184
	.uleb128 0x1
	.byte	0x9c
	.long	0x9454
	.uleb128 0x34
	.long	.LASF2004
	.byte	0x1
	.value	0x2404
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x2405
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x36
	.long	.LASF2173
	.byte	0x1
	.value	0x2408
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x36
	.long	.LASF2174
	.byte	0x1
	.value	0x240a
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2175
	.byte	0x1
	.value	0x240a
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF2168
	.byte	0x1
	.value	0x240b
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.quad	.LBB75
	.quad	.LBE75-.LBB75
	.uleb128 0x36
	.long	.LASF2161
	.byte	0x1
	.value	0x2420
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2176
	.byte	0x1
	.value	0x244f
	.quad	.LFB185
	.quad	.LFE185-.LFB185
	.uleb128 0x1
	.byte	0x9c
	.long	0x94b3
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x2450
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF471
	.byte	0x1
	.value	0x2451
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF536
	.byte	0x1
	.value	0x2453
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x94c3
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16702
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0x94c3
	.uleb128 0x15
	.long	0x1ea
	.byte	0x17
	.byte	0
	.uleb128 0xc
	.long	0x94b3
	.uleb128 0x3d
	.long	.LASF2177
	.byte	0x1
	.value	0x2483
	.quad	.LFB186
	.quad	.LFE186-.LFB186
	.uleb128 0x1
	.byte	0x9c
	.long	0x9574
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x2484
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2485
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x36
	.long	.LASF2178
	.byte	0x1
	.value	0x2487
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x2488
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2149
	.byte	0x1
	.value	0x2489
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2179
	.byte	0x1
	.value	0x248a
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2180
	.byte	0x1
	.value	0x248b
	.long	0x37c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2181
	.byte	0x1
	.value	0x248c
	.long	0x38e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x9574
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16713
	.byte	0
	.uleb128 0xc
	.long	0x8cac
	.uleb128 0x3d
	.long	.LASF2182
	.byte	0x1
	.value	0x24b6
	.quad	.LFB187
	.quad	.LFE187-.LFB187
	.uleb128 0x1
	.byte	0x9c
	.long	0x95c9
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x24b7
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x24b8
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x95c9
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16718
	.byte	0
	.uleb128 0xc
	.long	0x5814
	.uleb128 0x3d
	.long	.LASF2183
	.byte	0x1
	.value	0x24c7
	.quad	.LFB188
	.quad	.LFE188-.LFB188
	.uleb128 0x1
	.byte	0x9c
	.long	0x960b
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x24c8
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF2184
	.byte	0x1
	.value	0x24c9
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3d
	.long	.LASF2185
	.byte	0x1
	.value	0x24d5
	.quad	.LFB189
	.quad	.LFE189-.LFB189
	.uleb128 0x1
	.byte	0x9c
	.long	0x968a
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x24d6
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2186
	.byte	0x1
	.value	0x24d7
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2187
	.byte	0x1
	.value	0x24d9
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x968a
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16729
	.uleb128 0x37
	.quad	.LBB76
	.quad	.LBE76-.LBB76
	.uleb128 0x35
	.string	"fn"
	.byte	0x1
	.value	0x24e3
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x5d0b
	.uleb128 0x3d
	.long	.LASF2188
	.byte	0x1
	.value	0x24fb
	.quad	.LFB190
	.quad	.LFE190-.LFB190
	.uleb128 0x1
	.byte	0x9c
	.long	0x96cc
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x24fc
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF2189
	.byte	0x1
	.value	0x24fd
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3d
	.long	.LASF2190
	.byte	0x1
	.value	0x2513
	.quad	.LFB191
	.quad	.LFE191-.LFB191
	.uleb128 0x1
	.byte	0x9c
	.long	0x9718
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x2514
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2515
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2191
	.byte	0x1
	.value	0x2517
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x3d
	.long	.LASF2192
	.byte	0x1
	.value	0x2521
	.quad	.LFB192
	.quad	.LFE192-.LFB192
	.uleb128 0x1
	.byte	0x9c
	.long	0x9764
	.uleb128 0x3b
	.string	"die"
	.byte	0x1
	.value	0x2522
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2523
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2193
	.byte	0x1
	.value	0x2525
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2194
	.byte	0x1
	.value	0x2545
	.quad	.LFB193
	.quad	.LFE193-.LFB193
	.uleb128 0x1
	.byte	0x9c
	.long	0x9792
	.uleb128 0x34
	.long	.LASF2065
	.byte	0x1
	.value	0x2546
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2195
	.byte	0x1
	.value	0x254e
	.quad	.LFB194
	.quad	.LFE194-.LFB194
	.uleb128 0x1
	.byte	0x9c
	.long	0x97c4
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x97c4
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16749
	.byte	0
	.uleb128 0xc
	.long	0x67b0
	.uleb128 0x39
	.long	.LASF2196
	.byte	0x1
	.value	0x255d
	.long	0x4bad
	.quad	.LFB195
	.quad	.LFE195-.LFB195
	.uleb128 0x1
	.byte	0x9c
	.long	0x9846
	.uleb128 0x3b
	.string	"t"
	.byte	0x1
	.value	0x255e
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x255f
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2197
	.byte	0x1
	.value	0x2561
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2198
	.byte	0x1
	.value	0x2562
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x2563
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x9846
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16757
	.byte	0
	.uleb128 0xc
	.long	0x6044
	.uleb128 0x38
	.long	.LASF2199
	.byte	0x1
	.value	0x2595
	.long	0x1e3
	.quad	.LFB196
	.quad	.LFE196-.LFB196
	.uleb128 0x1
	.byte	0x9c
	.long	0x987d
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2596
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF2200
	.byte	0x1
	.value	0x25a3
	.long	0x1e3
	.quad	.LFB197
	.quad	.LFE197-.LFB197
	.uleb128 0x1
	.byte	0x9c
	.long	0x98af
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x25a4
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2201
	.byte	0x1
	.value	0x25b0
	.quad	.LFB198
	.quad	.LFE198-.LFB198
	.uleb128 0x1
	.byte	0x9c
	.long	0x9937
	.uleb128 0x34
	.long	.LASF2202
	.byte	0x1
	.value	0x25b1
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x25b2
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x34
	.long	.LASF2203
	.byte	0x1
	.value	0x25b3
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x34
	.long	.LASF2204
	.byte	0x1
	.value	0x25b4
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x25b5
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF0
	.byte	0x1
	.value	0x25b7
	.long	0x7de
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x36
	.long	.LASF2004
	.byte	0x1
	.value	0x25b8
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x38
	.long	.LASF2205
	.byte	0x1
	.value	0x25d7
	.long	0x5da
	.quad	.LFB199
	.quad	.LFE199-.LFB199
	.uleb128 0x1
	.byte	0x9c
	.long	0x9997
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x25d8
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF552
	.byte	0x1
	.value	0x25da
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB77
	.quad	.LBE77-.LBB77
	.uleb128 0x35
	.string	"t"
	.byte	0x1
	.value	0x25de
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x38
	.long	.LASF2206
	.byte	0x1
	.value	0x25f7
	.long	0x123
	.quad	.LFB200
	.quad	.LFE200-.LFB200
	.uleb128 0x1
	.byte	0x9c
	.long	0x99c9
	.uleb128 0x34
	.long	.LASF2207
	.byte	0x1
	.value	0x25f8
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2208
	.byte	0x1
	.value	0x261b
	.quad	.LFB201
	.quad	.LFE201-.LFB201
	.uleb128 0x1
	.byte	0x9c
	.long	0x9a33
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x261c
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x261d
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2197
	.byte	0x1
	.value	0x261f
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2209
	.byte	0x1
	.value	0x2620
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF2210
	.byte	0x1
	.value	0x2621
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x3d
	.long	.LASF2211
	.byte	0x1
	.value	0x265c
	.quad	.LFB202
	.quad	.LFE202-.LFB202
	.uleb128 0x1
	.byte	0x9c
	.long	0x9a7f
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x265d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x265e
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2004
	.byte	0x1
	.value	0x2660
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2212
	.byte	0x1
	.value	0x2684
	.quad	.LFB203
	.quad	.LFE203-.LFB203
	.uleb128 0x1
	.byte	0x9c
	.long	0x9aab
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x2686
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x3d
	.long	.LASF2213
	.byte	0x1
	.value	0x268f
	.quad	.LFB204
	.quad	.LFE204-.LFB204
	.uleb128 0x1
	.byte	0x9c
	.long	0x9af7
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x2690
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2691
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2004
	.byte	0x1
	.value	0x2693
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2214
	.byte	0x1
	.value	0x269d
	.quad	.LFB205
	.quad	.LFE205-.LFB205
	.uleb128 0x1
	.byte	0x9c
	.long	0x9b43
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x269e
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x269f
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2004
	.byte	0x1
	.value	0x26a1
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2215
	.byte	0x1
	.value	0x26ab
	.quad	.LFB206
	.quad	.LFE206-.LFB206
	.uleb128 0x1
	.byte	0x9c
	.long	0x9b8f
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x26ac
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x26ad
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2004
	.byte	0x1
	.value	0x26af
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2216
	.byte	0x1
	.value	0x26bc
	.quad	.LFB207
	.quad	.LFE207-.LFB207
	.uleb128 0x1
	.byte	0x9c
	.long	0x9c1d
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x26bd
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x26be
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2004
	.byte	0x1
	.value	0x26c0
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.quad	.LBB78
	.quad	.LBE78-.LBB78
	.uleb128 0x36
	.long	.LASF2217
	.byte	0x1
	.value	0x26d3
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB79
	.quad	.LBE79-.LBB79
	.uleb128 0x36
	.long	.LASF2218
	.byte	0x1
	.value	0x26e2
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x39
	.long	.LASF2219
	.byte	0x1
	.value	0x2704
	.long	0x4bad
	.quad	.LFB208
	.quad	.LFE208-.LFB208
	.uleb128 0x1
	.byte	0x9c
	.long	0x9c8f
	.uleb128 0x34
	.long	.LASF1956
	.byte	0x1
	.value	0x2705
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2706
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2220
	.byte	0x1
	.value	0x2708
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2186
	.byte	0x1
	.value	0x270a
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x9c8f
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16843
	.byte	0
	.uleb128 0xc
	.long	0x8cac
	.uleb128 0x3d
	.long	.LASF2221
	.byte	0x1
	.value	0x2733
	.quad	.LFB209
	.quad	.LFE209-.LFB209
	.uleb128 0x1
	.byte	0x9c
	.long	0x9cd1
	.uleb128 0x34
	.long	.LASF2222
	.byte	0x1
	.value	0x2734
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2735
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3d
	.long	.LASF2223
	.byte	0x1
	.value	0x2740
	.quad	.LFB210
	.quad	.LFE210-.LFB210
	.uleb128 0x1
	.byte	0x9c
	.long	0x9d6d
	.uleb128 0x34
	.long	.LASF2224
	.byte	0x1
	.value	0x2741
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2742
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x36
	.long	.LASF2217
	.byte	0x1
	.value	0x2744
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2225
	.byte	0x1
	.value	0x2745
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2226
	.byte	0x1
	.value	0x2746
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.string	"arg"
	.byte	0x1
	.value	0x2747
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.quad	.LBB80
	.quad	.LBE80-.LBB80
	.uleb128 0x36
	.long	.LASF2220
	.byte	0x1
	.value	0x2757
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2227
	.byte	0x1
	.value	0x277d
	.quad	.LFB211
	.quad	.LFE211-.LFB211
	.uleb128 0x1
	.byte	0x9c
	.long	0x9dcc
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x277e
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF2207
	.byte	0x1
	.value	0x277e
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x277f
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x9dcc
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16868
	.byte	0
	.uleb128 0xc
	.long	0x94b3
	.uleb128 0x3d
	.long	.LASF2228
	.byte	0x1
	.value	0x2799
	.quad	.LFB212
	.quad	.LFE212-.LFB212
	.uleb128 0x1
	.byte	0x9c
	.long	0x9e3b
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x279a
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2229
	.byte	0x1
	.value	0x279c
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2230
	.byte	0x1
	.value	0x279d
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF558
	.byte	0x1
	.value	0x279e
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2231
	.byte	0x1
	.value	0x279f
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.uleb128 0x3d
	.long	.LASF2232
	.byte	0x1
	.value	0x27c3
	.quad	.LFB213
	.quad	.LFE213-.LFB213
	.uleb128 0x1
	.byte	0x9c
	.long	0x9f64
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x27c4
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x27c5
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x36
	.long	.LASF2233
	.byte	0x1
	.value	0x27c7
	.long	0x5d0b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2186
	.byte	0x1
	.value	0x27c8
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x36
	.long	.LASF2234
	.byte	0x1
	.value	0x27c9
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x36
	.long	.LASF2115
	.byte	0x1
	.value	0x27ca
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.long	.LASF2235
	.byte	0x1
	.value	0x27cb
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x36
	.long	.LASF2236
	.byte	0x1
	.value	0x27cc
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF2229
	.byte	0x1
	.value	0x27cd
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x36
	.long	.LASF2237
	.byte	0x1
	.value	0x27ce
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x3e
	.long	.LASF1883
	.long	0x9f64
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16888
	.uleb128 0x3f
	.quad	.LBB81
	.quad	.LBE81-.LBB81
	.long	0x9f31
	.uleb128 0x36
	.long	.LASF2191
	.byte	0x1
	.value	0x27ee
	.long	0x368
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.byte	0
	.uleb128 0x37
	.quad	.LBB82
	.quad	.LBE82-.LBB82
	.uleb128 0x36
	.long	.LASF2238
	.byte	0x1
	.value	0x2891
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x36
	.long	.LASF2239
	.byte	0x1
	.value	0x2892
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x7992
	.uleb128 0x3d
	.long	.LASF2240
	.byte	0x1
	.value	0x28da
	.quad	.LFB214
	.quad	.LFE214-.LFB214
	.uleb128 0x1
	.byte	0x9c
	.long	0xa003
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x28db
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x28dc
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2186
	.byte	0x1
	.value	0x28de
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2164
	.byte	0x1
	.value	0x28df
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2229
	.byte	0x1
	.value	0x28e1
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF2237
	.byte	0x1
	.value	0x28e2
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.quad	.LBB83
	.quad	.LBE83-.LBB83
	.uleb128 0x36
	.long	.LASF2191
	.byte	0x1
	.value	0x28f7
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2241
	.byte	0x1
	.value	0x2927
	.quad	.LFB215
	.quad	.LFE215-.LFB215
	.uleb128 0x1
	.byte	0x9c
	.long	0xa094
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2928
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2929
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x36
	.long	.LASF2186
	.byte	0x1
	.value	0x292b
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x36
	.long	.LASF2242
	.byte	0x1
	.value	0x292c
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x36
	.long	.LASF1885
	.byte	0x1
	.value	0x292d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF1654
	.byte	0x1
	.value	0x292e
	.long	0x5d0b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x3e
	.long	.LASF1883
	.long	0xa094
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16912
	.byte	0
	.uleb128 0xc
	.long	0x6044
	.uleb128 0x3d
	.long	.LASF2243
	.byte	0x1
	.value	0x2953
	.quad	.LFB216
	.quad	.LFE216-.LFB216
	.uleb128 0x1
	.byte	0x9c
	.long	0xa129
	.uleb128 0x34
	.long	.LASF565
	.byte	0x1
	.value	0x2954
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2955
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x34
	.long	.LASF2244
	.byte	0x1
	.value	0x2956
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x36
	.long	.LASF2245
	.byte	0x1
	.value	0x2958
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF1654
	.byte	0x1
	.value	0x2959
	.long	0x5d0b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x37
	.quad	.LBB84
	.quad	.LBE84-.LBB84
	.uleb128 0x36
	.long	.LASF443
	.byte	0x1
	.value	0x295f
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2246
	.byte	0x1
	.value	0x297d
	.quad	.LFB217
	.quad	.LFE217-.LFB217
	.uleb128 0x1
	.byte	0x9c
	.long	0xa1b9
	.uleb128 0x34
	.long	.LASF565
	.byte	0x1
	.value	0x297e
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x297f
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x34
	.long	.LASF2244
	.byte	0x1
	.value	0x2980
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x37
	.quad	.LBB85
	.quad	.LBE85-.LBB85
	.uleb128 0x36
	.long	.LASF2234
	.byte	0x1
	.value	0x2984
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x2986
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF1654
	.byte	0x1
	.value	0x2987
	.long	0x5d0b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2247
	.byte	0x1
	.value	0x29a9
	.quad	.LFB218
	.quad	.LFE218-.LFB218
	.uleb128 0x1
	.byte	0x9c
	.long	0xa205
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x29aa
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x29ab
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2008
	.byte	0x1
	.value	0x29ad
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x3d
	.long	.LASF2248
	.byte	0x1
	.value	0x29f0
	.quad	.LFB219
	.quad	.LFE219-.LFB219
	.uleb128 0x1
	.byte	0x9c
	.long	0xa251
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x29f1
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x29f2
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2249
	.byte	0x1
	.value	0x29f4
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2250
	.byte	0x1
	.value	0x2a01
	.long	0x4bad
	.quad	.LFB220
	.quad	.LFE220-.LFB220
	.uleb128 0x1
	.byte	0x9c
	.long	0xa2d3
	.uleb128 0x34
	.long	.LASF643
	.byte	0x1
	.value	0x2a02
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -344
	.uleb128 0x35
	.string	"die"
	.byte	0x1
	.value	0x2a04
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -312
	.uleb128 0x36
	.long	.LASF2251
	.byte	0x1
	.value	0x2a05
	.long	0xa2d3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x35
	.string	"wd"
	.byte	0x1
	.value	0x2a06
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -328
	.uleb128 0x36
	.long	.LASF2252
	.byte	0x1
	.value	0x2a07
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -320
	.uleb128 0x36
	.long	.LASF616
	.byte	0x1
	.value	0x2a08
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -332
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0xa2e3
	.uleb128 0x15
	.long	0x1ea
	.byte	0xf9
	.byte	0
	.uleb128 0x3d
	.long	.LASF2253
	.byte	0x1
	.value	0x2a35
	.quad	.LFB221
	.quad	.LFE221-.LFB221
	.uleb128 0x1
	.byte	0x9c
	.long	0xa32f
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x2a36
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2a37
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2004
	.byte	0x1
	.value	0x2a39
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2254
	.byte	0x1
	.value	0x2a49
	.quad	.LFB222
	.quad	.LFE222-.LFB222
	.uleb128 0x1
	.byte	0x9c
	.long	0xa37b
	.uleb128 0x34
	.long	.LASF557
	.byte	0x1
	.value	0x2a4a
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2a4b
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.string	"die"
	.byte	0x1
	.value	0x2a4d
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2255
	.byte	0x1
	.value	0x2a5e
	.quad	.LFB223
	.quad	.LFE223-.LFB223
	.uleb128 0x1
	.byte	0x9c
	.long	0xa413
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x2a5f
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2a60
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2207
	.byte	0x1
	.value	0x2a62
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1997
	.byte	0x1
	.value	0x2a63
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x37
	.quad	.LBB86
	.quad	.LBE86-.LBB86
	.uleb128 0x36
	.long	.LASF2256
	.byte	0x1
	.value	0x2a74
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2257
	.byte	0x1
	.value	0x2a75
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x2a76
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2258
	.byte	0x1
	.value	0x2a9f
	.quad	.LFB224
	.quad	.LFE224-.LFB224
	.uleb128 0x1
	.byte	0x9c
	.long	0xa4c8
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x2aa0
	.long	0x123
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2aa1
	.long	0x4bad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x36
	.long	.LASF2004
	.byte	0x1
	.value	0x2aa3
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2197
	.byte	0x1
	.value	0x2aa4
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2259
	.byte	0x1
	.value	0x2aa5
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2260
	.byte	0x1
	.value	0x2aa6
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x47
	.long	.Ldebug_ranges0+0x90
	.long	0xa4a6
	.uleb128 0x36
	.long	.LASF2229
	.byte	0x1
	.value	0x2ab6
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x37
	.quad	.LBB89
	.quad	.LBE89-.LBB89
	.uleb128 0x36
	.long	.LASF2261
	.byte	0x1
	.value	0x2adb
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2262
	.byte	0x1
	.value	0x2af0
	.quad	.LFB225
	.quad	.LFE225-.LFB225
	.uleb128 0x1
	.byte	0x9c
	.long	0xa523
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x2af1
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2af2
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2263
	.byte	0x1
	.value	0x2af4
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2234
	.byte	0x1
	.value	0x2af5
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2264
	.byte	0x1
	.value	0x2b02
	.quad	.LFB226
	.quad	.LFE226-.LFB226
	.uleb128 0x1
	.byte	0x9c
	.long	0xa5b2
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2b03
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2b04
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF2004
	.byte	0x1
	.value	0x2b06
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF2186
	.byte	0x1
	.value	0x2b07
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0xa5b2
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.17001
	.uleb128 0x37
	.quad	.LBB90
	.quad	.LBE90-.LBB90
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x2b13
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x7d4f
	.uleb128 0x3d
	.long	.LASF2265
	.byte	0x1
	.value	0x2b2d
	.quad	.LFB227
	.quad	.LFE227-.LFB227
	.uleb128 0x1
	.byte	0x9c
	.long	0xa616
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x2b2e
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2b2f
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2266
	.byte	0x1
	.value	0x2b31
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x3e
	.long	.LASF1883
	.long	0xa616
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.17014
	.byte	0
	.uleb128 0xc
	.long	0x7bf3
	.uleb128 0x3d
	.long	.LASF2267
	.byte	0x1
	.value	0x2bc9
	.quad	.LFB228
	.quad	.LFE228-.LFB228
	.uleb128 0x1
	.byte	0x9c
	.long	0xa66b
	.uleb128 0x34
	.long	.LASF24
	.byte	0x1
	.value	0x2bca
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2bcb
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x3e
	.long	.LASF1883
	.long	0xa67b
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.17035
	.byte	0
	.uleb128 0x14
	.long	0x3cd
	.long	0xa67b
	.uleb128 0x15
	.long	0x1ea
	.byte	0x21
	.byte	0
	.uleb128 0xc
	.long	0xa66b
	.uleb128 0x3d
	.long	.LASF2268
	.byte	0x1
	.value	0x2bf5
	.quad	.LFB229
	.quad	.LFE229-.LFB229
	.uleb128 0x1
	.byte	0x9c
	.long	0xa72a
	.uleb128 0x34
	.long	.LASF565
	.byte	0x1
	.value	0x2bf6
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2bf7
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x34
	.long	.LASF2244
	.byte	0x1
	.value	0x2bf8
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x36
	.long	.LASF2269
	.byte	0x1
	.value	0x2bfa
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2186
	.byte	0x1
	.value	0x2bfb
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x2bfc
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2270
	.byte	0x1
	.value	0x2bfd
	.long	0x7de
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x37
	.quad	.LBB91
	.quad	.LBE91-.LBB91
	.uleb128 0x35
	.string	"sub"
	.byte	0x1
	.value	0x2c09
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2271
	.byte	0x1
	.value	0x2c54
	.quad	.LFB230
	.quad	.LFE230-.LFB230
	.uleb128 0x1
	.byte	0x9c
	.long	0xa7b6
	.uleb128 0x34
	.long	.LASF565
	.byte	0x1
	.value	0x2c55
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2c56
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x34
	.long	.LASF2244
	.byte	0x1
	.value	0x2c57
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x2c59
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF528
	.byte	0x1
	.value	0x2c5a
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB92
	.quad	.LBE92-.LBB92
	.uleb128 0x35
	.string	"die"
	.byte	0x1
	.value	0x2c66
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x39
	.long	.LASF2272
	.byte	0x1
	.value	0x2c80
	.long	0x1e3
	.quad	.LFB231
	.quad	.LFE231-.LFB231
	.uleb128 0x1
	.byte	0x9c
	.long	0xa7e8
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2c81
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2273
	.byte	0x1
	.value	0x2c94
	.quad	.LFB232
	.quad	.LFE232-.LFB232
	.uleb128 0x1
	.byte	0x9c
	.long	0xa847
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2c95
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.long	.LASF2104
	.byte	0x1
	.value	0x2c96
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2186
	.byte	0x1
	.value	0x2c98
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x3e
	.long	.LASF1883
	.long	0xa847
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.17092
	.byte	0
	.uleb128 0xc
	.long	0x7bf3
	.uleb128 0x3d
	.long	.LASF2274
	.byte	0x1
	.value	0x2d26
	.quad	.LFB233
	.quad	.LFE233-.LFB233
	.uleb128 0x1
	.byte	0x9c
	.long	0xa8aa
	.uleb128 0x3b
	.string	"ptr"
	.byte	0x1
	.value	0x2d27
	.long	0x36f
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1956
	.byte	0x1
	.value	0x2d29
	.long	0x7148
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x37
	.quad	.LBB93
	.quad	.LBE93-.LBB93
	.uleb128 0x35
	.string	"t__"
	.byte	0x1
	.value	0x2d2b
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x33
	.long	.LASF2275
	.byte	0x1
	.value	0x2d31
	.quad	.LFB234
	.quad	.LFE234-.LFB234
	.uleb128 0x1
	.byte	0x9c
	.long	0xa928
	.uleb128 0x34
	.long	.LASF643
	.byte	0x1
	.value	0x2d32
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.long	.LASF2276
	.byte	0x1
	.value	0x2d33
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x36
	.long	.LASF2191
	.byte	0x1
	.value	0x2d35
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x37
	.quad	.LBB94
	.quad	.LBE94-.LBB94
	.uleb128 0x36
	.long	.LASF2028
	.byte	0x1
	.value	0x2d39
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x36
	.long	.LASF2277
	.byte	0x1
	.value	0x2d3a
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2278
	.byte	0x1
	.value	0x2d4a
	.quad	.LFB235
	.quad	.LFE235-.LFB235
	.uleb128 0x1
	.byte	0x9c
	.long	0xa956
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2d4b
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x33
	.long	.LASF2279
	.byte	0x1
	.value	0x2d58
	.quad	.LFB236
	.quad	.LFE236-.LFB236
	.uleb128 0x1
	.byte	0x9c
	.long	0xa993
	.uleb128 0x34
	.long	.LASF23
	.byte	0x1
	.value	0x2d59
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF2104
	.byte	0x1
	.value	0x2d5b
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2280
	.byte	0x1
	.value	0x2dca
	.quad	.LFB237
	.quad	.LFE237-.LFB237
	.uleb128 0x1
	.byte	0x9c
	.long	0xa9d0
	.uleb128 0x34
	.long	.LASF1605
	.byte	0x1
	.value	0x2dcb
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x34
	.long	.LASF2281
	.byte	0x1
	.value	0x2dcc
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2282
	.byte	0x1
	.value	0x2dd6
	.quad	.LFB238
	.quad	.LFE238-.LFB238
	.uleb128 0x1
	.byte	0x9c
	.long	0xaa0d
	.uleb128 0x34
	.long	.LASF1605
	.byte	0x1
	.value	0x2dd7
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x34
	.long	.LASF2281
	.byte	0x1
	.value	0x2dd8
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2283
	.byte	0x1
	.value	0x2de6
	.long	0x21ef
	.quad	.LFB239
	.quad	.LFE239-.LFB239
	.uleb128 0x1
	.byte	0x9c
	.long	0xaa4e
	.uleb128 0x34
	.long	.LASF26
	.byte	0x1
	.value	0x2de7
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x2de9
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2284
	.byte	0x1
	.value	0x2dff
	.long	0x368
	.quad	.LFB240
	.quad	.LFE240-.LFB240
	.uleb128 0x1
	.byte	0x9c
	.long	0xaa8d
	.uleb128 0x34
	.long	.LASF2285
	.byte	0x1
	.value	0x2e00
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.string	"i"
	.byte	0x1
	.value	0x2e02
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x45
	.long	.LASF2287
	.byte	0x1
	.value	0x2e2d
	.quad	.LFB241
	.quad	.LFE241-.LFB241
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3d
	.long	.LASF2288
	.byte	0x1
	.value	0x2e3d
	.quad	.LFB242
	.quad	.LFE242-.LFB242
	.uleb128 0x1
	.byte	0x9c
	.long	0xab05
	.uleb128 0x34
	.long	.LASF1605
	.byte	0x1
	.value	0x2e3e
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x34
	.long	.LASF643
	.byte	0x1
	.value	0x2e3f
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.quad	.LBB95
	.quad	.LBE95-.LBB95
	.uleb128 0x36
	.long	.LASF2289
	.byte	0x1
	.value	0x2e4c
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2290
	.byte	0x1
	.value	0x2e8e
	.quad	.LFB243
	.quad	.LFE243-.LFB243
	.uleb128 0x1
	.byte	0x9c
	.long	0xab63
	.uleb128 0x34
	.long	.LASF2291
	.byte	0x1
	.value	0x2e8f
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x34
	.long	.LASF643
	.byte	0x1
	.value	0x2e90
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x37
	.quad	.LBB96
	.quad	.LBE96-.LBB96
	.uleb128 0x36
	.long	.LASF2021
	.byte	0x1
	.value	0x2e95
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF2292
	.byte	0x1
	.value	0x2ea7
	.quad	.LFB244
	.quad	.LFE244-.LFB244
	.uleb128 0x1
	.byte	0x9c
	.long	0xab91
	.uleb128 0x34
	.long	.LASF2291
	.byte	0x1
	.value	0x2ea8
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x3d
	.long	.LASF2293
	.byte	0x1
	.value	0x2eba
	.quad	.LFB245
	.quad	.LFE245-.LFB245
	.uleb128 0x1
	.byte	0x9c
	.long	0xabce
	.uleb128 0x34
	.long	.LASF2291
	.byte	0x1
	.value	0x2ebb
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x34
	.long	.LASF1594
	.byte	0x1
	.value	0x2ebc
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3d
	.long	.LASF2294
	.byte	0x1
	.value	0x2ecc
	.quad	.LFB246
	.quad	.LFE246-.LFB246
	.uleb128 0x1
	.byte	0x9c
	.long	0xac0b
	.uleb128 0x34
	.long	.LASF2291
	.byte	0x1
	.value	0x2ecd
	.long	0x368
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x34
	.long	.LASF1594
	.byte	0x1
	.value	0x2ece
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3d
	.long	.LASF2295
	.byte	0x1
	.value	0x2edc
	.quad	.LFB247
	.quad	.LFE247-.LFB247
	.uleb128 0x1
	.byte	0x9c
	.long	0xac39
	.uleb128 0x34
	.long	.LASF2296
	.byte	0x1
	.value	0x2edd
	.long	0x5da
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2297
	.byte	0x1
	.value	0x2f3a
	.long	0x133c
	.quad	.LFB248
	.quad	.LFE248-.LFB248
	.uleb128 0x1
	.byte	0x9c
	.long	0xac7a
	.uleb128 0x3b
	.string	"tab"
	.byte	0x1
	.value	0x2f3b
	.long	0x1381
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1956
	.byte	0x1
	.value	0x2f3d
	.long	0x4e63
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x39
	.long	.LASF2298
	.byte	0x1
	.value	0x2f4b
	.long	0x1e3
	.quad	.LFB249
	.quad	.LFE249-.LFB249
	.uleb128 0x1
	.byte	0x9c
	.long	0xacd5
	.uleb128 0x34
	.long	.LASF507
	.byte	0x1
	.value	0x2f4c
	.long	0x1392
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x3b
	.string	"h"
	.byte	0x1
	.value	0x2f4d
	.long	0x133c
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3b
	.string	"v"
	.byte	0x1
	.value	0x2f4e
	.long	0x619
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1956
	.byte	0x1
	.value	0x2f50
	.long	0x4e63
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3d
	.long	.LASF2299
	.byte	0x1
	.value	0x2f61
	.quad	.LFB250
	.quad	.LFE250-.LFB250
	.uleb128 0x1
	.byte	0x9c
	.long	0xad74
	.uleb128 0x34
	.long	.LASF2300
	.byte	0x1
	.value	0x2f62
	.long	0x5da
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x36
	.long	.LASF1956
	.byte	0x1
	.value	0x2f64
	.long	0x7148
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF2301
	.byte	0x1
	.value	0x2f64
	.long	0x7148
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x35
	.string	"die"
	.byte	0x1
	.value	0x2f65
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x3e
	.long	.LASF1883
	.long	0xad74
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.17189
	.uleb128 0x37
	.quad	.LBB97
	.quad	.LBE97-.LBB97
	.uleb128 0x36
	.long	.LASF2186
	.byte	0x1
	.value	0x2f73
	.long	0x4bad
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF558
	.byte	0x1
	.value	0x2f74
	.long	0x123
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x70b5
	.uleb128 0x48
	.long	.LASF2302
	.byte	0x1
	.byte	0xef
	.long	0x49a0
	.uleb128 0x9
	.byte	0x3
	.quad	fde_table
	.uleb128 0x48
	.long	.LASF2303
	.byte	0x1
	.byte	0xf2
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	fde_table_allocated
	.uleb128 0x48
	.long	.LASF2304
	.byte	0x1
	.byte	0xf5
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	fde_table_in_use
	.uleb128 0x48
	.long	.LASF2305
	.byte	0x1
	.byte	0xfc
	.long	0x4952
	.uleb128 0x9
	.byte	0x3
	.quad	cie_cfi_head
	.uleb128 0x36
	.long	.LASF2306
	.byte	0x1
	.value	0x102
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	current_funcdef_fde
	.uleb128 0x35
	.string	"cfa"
	.byte	0x1
	.value	0x27e
	.long	0x4aee
	.uleb128 0x9
	.byte	0x3
	.quad	cfa
	.uleb128 0x36
	.long	.LASF2307
	.byte	0x1
	.value	0x282
	.long	0x4aee
	.uleb128 0x9
	.byte	0x3
	.quad	cfa_store
	.uleb128 0x36
	.long	.LASF571
	.byte	0x1
	.value	0x285
	.long	0x37c
	.uleb128 0x9
	.byte	0x3
	.quad	args_size
	.uleb128 0x36
	.long	.LASF2308
	.byte	0x1
	.value	0x288
	.long	0x37c
	.uleb128 0x9
	.byte	0x3
	.quad	old_args_size
	.uleb128 0x36
	.long	.LASF2309
	.byte	0x1
	.value	0x433
	.long	0x4b6f
	.uleb128 0x9
	.byte	0x3
	.quad	queued_reg_saves
	.uleb128 0x36
	.long	.LASF2310
	.byte	0x1
	.value	0x434
	.long	0x5da
	.uleb128 0x9
	.byte	0x3
	.quad	last_reg_save_label
	.uleb128 0x36
	.long	.LASF2311
	.byte	0x1
	.value	0x467
	.long	0x4aee
	.uleb128 0x9
	.byte	0x3
	.quad	cfa_temp
	.uleb128 0x36
	.long	.LASF2312
	.byte	0x1
	.value	0xcd8
	.long	0x38e
	.uleb128 0x9
	.byte	0x3
	.quad	next_die_offset
	.uleb128 0x36
	.long	.LASF2313
	.byte	0x1
	.value	0xcdb
	.long	0x4bad
	.uleb128 0x9
	.byte	0x3
	.quad	comp_unit_die
	.uleb128 0x36
	.long	.LASF2314
	.byte	0x1
	.value	0xcde
	.long	0x7148
	.uleb128 0x9
	.byte	0x3
	.quad	limbo_die_list
	.uleb128 0x36
	.long	.LASF1841
	.byte	0x1
	.value	0xcee
	.long	0x4ff7
	.uleb128 0x9
	.byte	0x3
	.quad	file_table
	.uleb128 0x36
	.long	.LASF2315
	.byte	0x1
	.value	0xcf2
	.long	0x5da
	.uleb128 0x9
	.byte	0x3
	.quad	primary_filename
	.uleb128 0x36
	.long	.LASF2316
	.byte	0x1
	.value	0xcf7
	.long	0x70af
	.uleb128 0x9
	.byte	0x3
	.quad	decl_die_table
	.uleb128 0x36
	.long	.LASF2317
	.byte	0x1
	.value	0xcfa
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	decl_die_table_allocated
	.uleb128 0x36
	.long	.LASF2318
	.byte	0x1
	.value	0xcfd
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	decl_die_table_in_use
	.uleb128 0x36
	.long	.LASF2319
	.byte	0x1
	.value	0xd0d
	.long	0x70af
	.uleb128 0x9
	.byte	0x3
	.quad	abbrev_die_table
	.uleb128 0x36
	.long	.LASF2320
	.byte	0x1
	.value	0xd10
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	abbrev_die_table_allocated
	.uleb128 0x36
	.long	.LASF2321
	.byte	0x1
	.value	0xd13
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	abbrev_die_table_in_use
	.uleb128 0x36
	.long	.LASF2322
	.byte	0x1
	.value	0xd1b
	.long	0x4ec8
	.uleb128 0x9
	.byte	0x3
	.quad	line_info_table
	.uleb128 0x36
	.long	.LASF2323
	.byte	0x1
	.value	0xd1e
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	line_info_table_allocated
	.uleb128 0x36
	.long	.LASF2324
	.byte	0x1
	.value	0xd21
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	separate_line_info_table_in_use
	.uleb128 0x36
	.long	.LASF2325
	.byte	0x1
	.value	0xd25
	.long	0x4f02
	.uleb128 0x9
	.byte	0x3
	.quad	separate_line_info_table
	.uleb128 0x36
	.long	.LASF2326
	.byte	0x1
	.value	0xd28
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	separate_line_info_table_allocated
	.uleb128 0x36
	.long	.LASF2327
	.byte	0x1
	.value	0xd2b
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	line_info_table_in_use
	.uleb128 0x36
	.long	.LASF2328
	.byte	0x1
	.value	0xd33
	.long	0x4f49
	.uleb128 0x9
	.byte	0x3
	.quad	pubname_table
	.uleb128 0x36
	.long	.LASF2329
	.byte	0x1
	.value	0xd36
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	pubname_table_allocated
	.uleb128 0x36
	.long	.LASF2330
	.byte	0x1
	.value	0xd39
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	pubname_table_in_use
	.uleb128 0x36
	.long	.LASF2331
	.byte	0x1
	.value	0xd40
	.long	0x70af
	.uleb128 0x9
	.byte	0x3
	.quad	arange_table
	.uleb128 0x36
	.long	.LASF2332
	.byte	0x1
	.value	0xd43
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	arange_table_allocated
	.uleb128 0x36
	.long	.LASF2333
	.byte	0x1
	.value	0xd46
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	arange_table_in_use
	.uleb128 0x36
	.long	.LASF2334
	.byte	0x1
	.value	0xd4d
	.long	0x4f83
	.uleb128 0x9
	.byte	0x3
	.quad	ranges_table
	.uleb128 0x36
	.long	.LASF2335
	.byte	0x1
	.value	0xd50
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	ranges_table_allocated
	.uleb128 0x36
	.long	.LASF2336
	.byte	0x1
	.value	0xd53
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	ranges_table_in_use
	.uleb128 0x36
	.long	.LASF2337
	.byte	0x1
	.value	0xd5a
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	have_location_lists
	.uleb128 0x36
	.long	.LASF2338
	.byte	0x1
	.value	0xd62
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	current_function_has_inlines
	.uleb128 0x36
	.long	.LASF2339
	.byte	0x1
	.value	0xd69
	.long	0x2d87
	.uleb128 0x9
	.byte	0x3
	.quad	used_rtx_varray
	.uleb128 0x36
	.long	.LASF2340
	.byte	0x1
	.value	0xea8
	.long	0x5d0b
	.uleb128 0x9
	.byte	0x3
	.quad	text_end_label
	.uleb128 0x36
	.long	.LASF2341
	.byte	0x1
	.value	0xea9
	.long	0x5d0b
	.uleb128 0x9
	.byte	0x3
	.quad	text_section_label
	.uleb128 0x36
	.long	.LASF2342
	.byte	0x1
	.value	0xeaa
	.long	0x5d0b
	.uleb128 0x9
	.byte	0x3
	.quad	abbrev_section_label
	.uleb128 0x36
	.long	.LASF2343
	.byte	0x1
	.value	0xeab
	.long	0x5d0b
	.uleb128 0x9
	.byte	0x3
	.quad	debug_info_section_label
	.uleb128 0x36
	.long	.LASF2344
	.byte	0x1
	.value	0xeac
	.long	0x5d0b
	.uleb128 0x9
	.byte	0x3
	.quad	debug_line_section_label
	.uleb128 0x36
	.long	.LASF2345
	.byte	0x1
	.value	0xead
	.long	0x5d0b
	.uleb128 0x9
	.byte	0x3
	.quad	macinfo_section_label
	.uleb128 0x36
	.long	.LASF2346
	.byte	0x1
	.value	0xeae
	.long	0x5d0b
	.uleb128 0x9
	.byte	0x3
	.quad	loc_section_label
	.uleb128 0x14
	.long	0x3cd
	.long	0xb1a5
	.uleb128 0x15
	.long	0x1ea
	.byte	0x3b
	.byte	0
	.uleb128 0x36
	.long	.LASF2347
	.byte	0x1
	.value	0xeaf
	.long	0xb195
	.uleb128 0x9
	.byte	0x3
	.quad	ranges_section_label
	.uleb128 0x36
	.long	.LASF2348
	.byte	0x1
	.value	0xed0
	.long	0x48f7
	.uleb128 0x9
	.byte	0x3
	.quad	demangle_name_func
	.uleb128 0x36
	.long	.LASF2349
	.byte	0x1
	.value	0x1429
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	print_indent
	.uleb128 0x36
	.long	.LASF2350
	.byte	0x1
	.value	0x1581
	.long	0x3c7
	.uleb128 0x9
	.byte	0x3
	.quad	comdat_symbol_id
	.uleb128 0x36
	.long	.LASF2351
	.byte	0x1
	.value	0x1584
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	comdat_symbol_number
	.uleb128 0x49
	.long	.LASF2353
	.byte	0x5
	.byte	0x62
	.long	0x1e3
	.uleb128 0x14
	.long	0x1e3
	.long	0xb22e
	.uleb128 0x15
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x43
	.long	.LASF2354
	.byte	0x5
	.value	0xb03
	.long	0xb23a
	.uleb128 0xc
	.long	0xb21e
	.uleb128 0x43
	.long	.LASF2355
	.byte	0x5
	.value	0xb04
	.long	0xb24b
	.uleb128 0xc
	.long	0xb21e
	.uleb128 0x49
	.long	.LASF2356
	.byte	0xa
	.byte	0xaa
	.long	0x5ae
	.uleb128 0x14
	.long	0x795
	.long	0xb26b
	.uleb128 0x15
	.long	0x1ea
	.byte	0x3a
	.byte	0
	.uleb128 0x49
	.long	.LASF180
	.byte	0xc
	.byte	0x34
	.long	0xb276
	.uleb128 0xc
	.long	0xb25b
	.uleb128 0x14
	.long	0x395
	.long	0xb28b
	.uleb128 0x15
	.long	0x1ea
	.byte	0x3a
	.byte	0
	.uleb128 0x49
	.long	.LASF2357
	.byte	0xc
	.byte	0x50
	.long	0xb296
	.uleb128 0xc
	.long	0xb27b
	.uleb128 0x49
	.long	.LASF2358
	.byte	0xc
	.byte	0x55
	.long	0xb2a6
	.uleb128 0xc
	.long	0xb27b
	.uleb128 0x49
	.long	.LASF2359
	.byte	0xc
	.byte	0xa4
	.long	0x620
	.uleb128 0x49
	.long	.LASF2360
	.byte	0x1c
	.byte	0x3
	.long	0x21e5
	.uleb128 0x49
	.long	.LASF2361
	.byte	0x4
	.byte	0x31
	.long	0x777b
	.uleb128 0x14
	.long	0x123
	.long	0xb2dc
	.uleb128 0x15
	.long	0x1ea
	.byte	0x32
	.byte	0
	.uleb128 0x43
	.long	.LASF2362
	.byte	0x4
	.value	0x79b
	.long	0xb2cc
	.uleb128 0x14
	.long	0x123
	.long	0xb2f8
	.uleb128 0x15
	.long	0x1ea
	.byte	0xa
	.byte	0
	.uleb128 0x43
	.long	.LASF2363
	.byte	0x4
	.value	0x7f8
	.long	0xb2e8
	.uleb128 0x43
	.long	.LASF2364
	.byte	0x4
	.value	0xa98
	.long	0x123
	.uleb128 0x43
	.long	.LASF2365
	.byte	0x4
	.value	0xa9b
	.long	0x123
	.uleb128 0x1d
	.long	0x5da
	.long	0xb330
	.uleb128 0x1e
	.long	0x123
	.uleb128 0x1e
	.long	0x1e3
	.byte	0
	.uleb128 0x43
	.long	.LASF2366
	.byte	0x4
	.value	0xaa9
	.long	0xb33c
	.uleb128 0x3
	.byte	0x8
	.long	0xb31c
	.uleb128 0x43
	.long	.LASF2367
	.byte	0x4
	.value	0xb5b
	.long	0x414a
	.uleb128 0x49
	.long	.LASF2368
	.byte	0x11
	.byte	0x2a
	.long	0x2268
	.uleb128 0x49
	.long	.LASF771
	.byte	0x11
	.byte	0x35
	.long	0x22a5
	.uleb128 0x49
	.long	.LASF2369
	.byte	0x11
	.byte	0x3d
	.long	0x1e3
	.uleb128 0x43
	.long	.LASF2370
	.byte	0x11
	.value	0x17d
	.long	0x1e3
	.uleb128 0x43
	.long	.LASF2371
	.byte	0x11
	.value	0x1c8
	.long	0x1e3
	.uleb128 0x43
	.long	.LASF2372
	.byte	0x11
	.value	0x1cd
	.long	0x1e3
	.uleb128 0x43
	.long	.LASF2373
	.byte	0x11
	.value	0x1d1
	.long	0x1e3
	.uleb128 0x43
	.long	.LASF2374
	.byte	0x11
	.value	0x1d5
	.long	0x1e3
	.uleb128 0x43
	.long	.LASF2375
	.byte	0x11
	.value	0x1fb
	.long	0x1e3
	.uleb128 0x43
	.long	.LASF2376
	.byte	0x11
	.value	0x244
	.long	0x1e3
	.uleb128 0x43
	.long	.LASF2377
	.byte	0x11
	.value	0x27b
	.long	0x1e3
	.uleb128 0x14
	.long	0x2d
	.long	0xb3df
	.uleb128 0x15
	.long	0x1ea
	.byte	0x80
	.byte	0
	.uleb128 0x43
	.long	.LASF2378
	.byte	0x2
	.value	0x611
	.long	0xb3cf
	.uleb128 0x14
	.long	0x2d
	.long	0xb3fb
	.uleb128 0x15
	.long	0x1ea
	.byte	0xa
	.byte	0
	.uleb128 0x43
	.long	.LASF2379
	.byte	0x2
	.value	0x652
	.long	0xb3eb
	.uleb128 0x43
	.long	.LASF2380
	.byte	0x2
	.value	0x6d2
	.long	0x1e3
	.uleb128 0x14
	.long	0x620
	.long	0xb423
	.uleb128 0x15
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x49
	.long	.LASF2381
	.byte	0x13
	.byte	0xad
	.long	0xb413
	.uleb128 0x43
	.long	.LASF2382
	.byte	0x10
	.value	0x1e4
	.long	0x1c4b
	.uleb128 0x43
	.long	.LASF2383
	.byte	0x1d
	.value	0x1a7
	.long	0x3fd2
	.uleb128 0x43
	.long	.LASF2384
	.byte	0x1d
	.value	0x1ba
	.long	0x1e3
	.uleb128 0x14
	.long	0x2d
	.long	0xb462
	.uleb128 0x15
	.long	0x1ea
	.byte	0x60
	.byte	0
	.uleb128 0x49
	.long	.LASF2385
	.byte	0x15
	.byte	0x97
	.long	0xb452
	.uleb128 0x4a
	.long	.LASF2386
	.byte	0x1
	.byte	0x6e
	.long	0x368
	.uleb128 0x9
	.byte	0x3
	.quad	current_funcdef_number
	.uleb128 0x49
	.long	.LASF2387
	.byte	0x1e
	.byte	0x2f
	.long	0x2d87
	.uleb128 0x49
	.long	.LASF2388
	.byte	0x18
	.byte	0xf4
	.long	0x3eab
	.uleb128 0x4b
	.long	.LASF2389
	.byte	0x1
	.value	0xc10
	.long	0x3fd8
	.uleb128 0x9
	.byte	0x3
	.quad	dwarf2_debug_hooks
	.uleb128 0x49
	.long	.LASF2390
	.byte	0x1a
	.byte	0xc1
	.long	0x4427
	.uleb128 0x49
	.long	.LASF1712
	.byte	0x1b
	.byte	0xa8
	.long	0xb4c4
	.uleb128 0xc
	.long	0x47be
	.uleb128 0x4b
	.long	.LASF2391
	.byte	0x1
	.value	0x104
	.long	0xb4df
	.uleb128 0x9
	.byte	0x3
	.quad	debug_str_hash
	.uleb128 0x3
	.byte	0x8
	.long	0x12d0
	.uleb128 0x43
	.long	.LASF2392
	.byte	0x1
	.value	0xca7
	.long	0x1e3
	.uleb128 0x4b
	.long	.LASF2393
	.byte	0x1
	.value	0xd08
	.long	0x2d87
	.uleb128 0x9
	.byte	0x3
	.quad	decl_scope_table
	.uleb128 0x4b
	.long	.LASF2394
	.byte	0x1
	.value	0xd5f
	.long	0x2d87
	.uleb128 0x9
	.byte	0x3
	.quad	incomplete_types
	.uleb128 0x43
	.long	.LASF2352
	.byte	0x1
	.value	0x11b4
	.long	0x1e3
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x21
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x22
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x23
	.uleb128 0x17
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x24
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x25
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x26
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x27
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x28
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x29
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2a
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2b
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x2c
	.uleb128 0x4
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2d
	.uleb128 0x15
	.byte	0
	.uleb128 0x27
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x2e
	.uleb128 0x15
	.byte	0
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2f
	.uleb128 0x4
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x30
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x31
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x32
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x33
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x34
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x35
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x36
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x37
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.byte	0
	.byte	0
	.uleb128 0x38
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x39
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3a
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3c
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3d
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3e
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x34
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3f
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x40
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x41
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x42
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x43
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x44
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x45
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x46
	.uleb128 0xa
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x47
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x48
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x49
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x4a
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4b
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.LBB15-.Ltext0
	.quad	.LBE15-.Ltext0
	.quad	.LBB16-.Ltext0
	.quad	.LBE16-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB56-.Ltext0
	.quad	.LBE56-.Ltext0
	.quad	.LBB58-.Ltext0
	.quad	.LBE58-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB65-.Ltext0
	.quad	.LBE65-.Ltext0
	.quad	.LBB68-.Ltext0
	.quad	.LBE68-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB87-.Ltext0
	.quad	.LBE87-.Ltext0
	.quad	.LBB88-.Ltext0
	.quad	.LBE88-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF1869:
	.string	"loc_p"
.LASF1754:
	.string	"dw_loc_oprnd2"
.LASF1126:
	.string	"LTI_getf2"
.LASF1182:
	.string	"DW_TAG_compile_unit"
.LASF117:
	.string	"long long int"
.LASF723:
	.string	"TI_V16SF_TYPE"
.LASF1347:
	.string	"DW_AT_VMS_rtnbeg_pd_address"
.LASF2191:
	.string	"file_index"
.LASF2153:
	.string	"add_data_member_location_attribute"
.LASF608:
	.string	"original_arg_vector"
.LASF120:
	.string	"VOIDmode"
.LASF1605:
	.string	"line"
.LASF381:
	.string	"BUILT_IN_STRCSPN"
.LASF2217:
	.string	"link"
.LASF1712:
	.string	"lang_hooks"
.LASF898:
	.string	"SS_MINUS"
.LASF1627:
	.string	"emitted_prefix_p"
.LASF2320:
	.string	"abbrev_die_table_allocated"
.LASF1308:
	.string	"DW_AT_priority"
.LASF663:
	.string	"malloc_flag"
.LASF1188:
	.string	"DW_TAG_unspecified_parameters"
.LASF277:
	.string	"RROTATE_EXPR"
.LASF887:
	.string	"RANGE_REG"
.LASF193:
	.string	"IDENTIFIER_NODE"
.LASF1662:
	.string	"integer"
.LASF478:
	.string	"real"
.LASF1073:
	.string	"LTI_extendsftf2"
.LASF105:
	.string	"__pad1"
.LASF106:
	.string	"__pad2"
.LASF107:
	.string	"__pad3"
.LASF108:
	.string	"__pad4"
.LASF109:
	.string	"__pad5"
.LASF451:
	.string	"unused_0"
.LASF467:
	.string	"unused_1"
.LASF1192:
	.string	"DW_TAG_inheritance"
.LASF2331:
	.string	"arange_table"
.LASF73:
	.string	"long unsigned int"
.LASF1763:
	.string	"form"
.LASF2388:
	.string	"global_dc"
.LASF1893:
	.string	"for_eh"
.LASF1350:
	.string	"DW_OP_deref"
.LASF282:
	.string	"BIT_NOT_EXPR"
.LASF1248:
	.string	"DW_FORM_ref1"
.LASF1249:
	.string	"DW_FORM_ref2"
.LASF511:
	.string	"ht_lookup_option"
.LASF1250:
	.string	"DW_FORM_ref4"
.LASF482:
	.string	"_obstack_chunk"
.LASF1777:
	.string	"die_offset"
.LASF1101:
	.string	"LTI_unordhf2"
.LASF1251:
	.string	"DW_FORM_ref8"
.LASF925:
	.string	"rtmem"
.LASF372:
	.string	"BUILT_IN_STRNCAT"
.LASF725:
	.string	"TI_V8HI_TYPE"
.LASF1544:
	.string	"DW_CFA_nop"
.LASF491:
	.string	"chunk_limit"
.LASF843:
	.string	"COND"
.LASF2068:
	.string	"pubnames_length"
.LASF844:
	.string	"COMPARE"
.LASF1232:
	.string	"dwarf_form"
.LASF57:
	.string	"regno"
.LASF923:
	.string	"rtbit"
.LASF954:
	.string	"REG_SAVE_NOTE"
.LASF2230:
	.string	"save_fn"
.LASF173:
	.string	"CCGCmode"
.LASF278:
	.string	"BIT_IOR_EXPR"
.LASF908:
	.string	"max_after_base"
.LASF316:
	.string	"FDESC_EXPR"
.LASF1995:
	.string	"splice_child_die"
.LASF1846:
	.string	"file_info"
.LASF1838:
	.string	"limbo_die_struct"
.LASF2151:
	.string	"field_size_in_bits"
.LASF1930:
	.string	"dwarf_attr_name"
.LASF2399:
	.string	"dwarf2out_cfi_label"
.LASF2363:
	.string	"integer_types"
.LASF259:
	.string	"CEIL_MOD_EXPR"
.LASF687:
	.string	"TI_UINTQI_TYPE"
.LASF651:
	.string	"ignored_flag"
.LASF2251:
	.string	"producer"
.LASF1769:
	.string	"dw_die_ref"
.LASF897:
	.string	"US_PLUS"
.LASF1990:
	.string	"remove_children"
.LASF800:
	.string	"SEQUENCE"
.LASF1788:
	.string	"dw_val_class_loc"
.LASF1622:
	.string	"printer_fn"
.LASF673:
	.string	"section_name"
.LASF1287:
	.string	"DW_AT_upper_bound"
.LASF1889:
	.string	"dwarf2out_frame_debug_expr"
.LASF816:
	.string	"ASM_INPUT"
.LASF633:
	.string	"limit_stack"
.LASF1065:
	.string	"EXPAND_NORMAL"
.LASF1304:
	.string	"DW_AT_friend"
.LASF284:
	.string	"TRUTH_ORIF_EXPR"
.LASF2204:
	.string	"decl_volatile"
.LASF838:
	.string	"LABEL_REF"
.LASF1045:
	.string	"regno_pointer_align_length"
.LASF545:
	.string	"restrict_flag"
.LASF298:
	.string	"UNLE_EXPR"
.LASF1134:
	.string	"LTI_floatdidf"
.LASF1665:
	.string	"function_begin_epilogue"
.LASF1462:
	.string	"DW_OP_breg7"
.LASF143:
	.string	"XCmode"
.LASF572:
	.string	"pretend_args_size"
.LASF271:
	.string	"MAX_EXPR"
.LASF2133:
	.string	"bitpos"
.LASF1535:
	.string	"DW_LNS_set_isa"
.LASF25:
	.string	"list"
.LASF403:
	.string	"BUILT_IN_RETURN"
.LASF379:
	.string	"BUILT_IN_STRPBRK"
.LASF722:
	.string	"TI_V4SF_TYPE"
.LASF1108:
	.string	"LTI_unordsf2"
.LASF516:
	.string	"tree_list"
.LASF552:
	.string	"name"
.LASF1987:
	.string	"remove_AT"
.LASF312:
	.string	"RTL_EXPR"
.LASF565:
	.string	"stmt"
.LASF182:
	.string	"MODE_INT"
.LASF140:
	.string	"HCmode"
.LASF330:
	.string	"GOTO_EXPR"
.LASF2366:
	.string	"decl_printable_name"
.LASF1297:
	.string	"DW_AT_decl_file"
.LASF260:
	.string	"FLOOR_MOD_EXPR"
.LASF2249:
	.string	"ptr_die"
.LASF2302:
	.string	"fde_table"
.LASF1705:
	.string	"anon_aggr_type_p"
.LASF1618:
	.string	"DIAGNOSTICS_SHOW_PREFIX_ONCE"
.LASF167:
	.string	"V4DFmode"
.LASF384:
	.string	"BUILT_IN_SQRT"
.LASF670:
	.string	"result"
.LASF1971:
	.string	"add_AT_lbl_offset"
.LASF251:
	.string	"PLUS_EXPR"
.LASF2134:
	.string	"bytepos"
.LASF342:
	.string	"BUILT_IN_FRONTEND"
.LASF513:
	.string	"HT_ALLOC"
.LASF696:
	.string	"TI_SIZE_ZERO"
.LASF2369:
	.string	"optimize"
.LASF1676:
	.string	"md_init"
.LASF754:
	.string	"size_type_kind"
.LASF832:
	.string	"CONST"
.LASF175:
	.string	"CCNOmode"
.LASF1537:
	.string	"DW_LNE_end_sequence"
.LASF2275:
	.string	"dwarf2out_add_library_unit_info"
.LASF997:
	.string	"GR_MAX"
.LASF1829:
	.string	"dw_line_info_struct"
.LASF50:
	.string	"INT_SSE_REGS"
.LASF968:
	.string	"NOTE_INSN_LOOP_CONT"
.LASF206:
	.string	"OFFSET_TYPE"
.LASF880:
	.string	"UNSIGNED_FIX"
.LASF793:
	.string	"DEFINE_PEEPHOLE2"
.LASF290:
	.string	"LE_EXPR"
.LASF1888:
	.string	"clobbers_queued_reg_save"
.LASF1504:
	.string	"DW_ATE_signed"
.LASF1874:
	.string	"dwarf2out_window_save"
.LASF1939:
	.string	"add_dwarf_attr"
.LASF2101:
	.string	"modified_type_die"
.LASF804:
	.string	"SET_ATTR"
.LASF1663:
	.string	"function_prologue"
.LASF981:
	.string	"NOTE_INSN_LIVE"
.LASF568:
	.string	"varasm"
.LASF2279:
	.string	"dwarf2out_decl"
.LASF1146:
	.string	"LTI_fixdfdi"
.LASF2362:
	.string	"global_trees"
.LASF2308:
	.string	"old_args_size"
.LASF486:
	.string	"obstack"
.LASF1961:
	.string	"AT_ref"
.LASF2250:
	.string	"gen_compile_unit_die"
.LASF1620:
	.string	"DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE"
.LASF578:
	.string	"cannot_inline"
.LASF468:
	.string	"high"
.LASF1810:
	.string	"val_loc_list"
.LASF2086:
	.string	"output_line_info"
.LASF2274:
	.string	"mark_limbo_die_list"
.LASF64:
	.string	"__va_list_tag"
.LASF1600:
	.string	"format_decoder"
.LASF1766:
	.string	"dw_val_ref"
.LASF225:
	.string	"TYPE_DECL"
.LASF413:
	.string	"BUILT_IN_FWRITE"
.LASF1955:
	.string	"add_AT_string"
.LASF653:
	.string	"common_flag"
.LASF585:
	.string	"x_cleanup_label"
.LASF2309:
	.string	"queued_reg_saves"
.LASF951:
	.string	"REG_FRAME_RELATED_EXPR"
.LASF215:
	.string	"FUNCTION_TYPE"
.LASF1059:
	.string	"varasm_status"
.LASF338:
	.string	"EXC_PTR_EXPR"
.LASF1937:
	.string	"lookahead"
.LASF1083:
	.string	"LTI_memmove"
.LASF1515:
	.string	"DW_VIRTUALITY_virtual"
.LASF2248:
	.string	"gen_ptr_to_mbr_type_die"
.LASF288:
	.string	"TRUTH_NOT_EXPR"
.LASF1199:
	.string	"DW_TAG_access_declaration"
.LASF195:
	.string	"TREE_VEC"
.LASF44:
	.string	"SSE_REGS"
.LASF1716:
	.string	"post_options"
.LASF1548:
	.string	"DW_CFA_advance_loc4"
.LASF460:
	.string	"lang_flag_0"
.LASF461:
	.string	"lang_flag_1"
.LASF462:
	.string	"lang_flag_2"
.LASF463:
	.string	"lang_flag_3"
.LASF464:
	.string	"lang_flag_4"
.LASF465:
	.string	"lang_flag_5"
.LASF466:
	.string	"lang_flag_6"
.LASF668:
	.string	"lang_flag_7"
.LASF1607:
	.string	"begin_diagnostic"
.LASF1560:
	.string	"DW_CFA_expression"
.LASF1699:
	.string	"cannot_inline_tree_fn"
.LASF2160:
	.string	"enttype"
.LASF150:
	.string	"COImode"
.LASF731:
	.string	"TI_MAIN_IDENTIFIER"
.LASF476:
	.string	"pointer"
.LASF2229:
	.string	"old_die"
.LASF181:
	.string	"MODE_RANDOM"
.LASF1742:
	.string	"dw_fde_cfi"
.LASF1433:
	.string	"DW_OP_reg10"
.LASF2152:
	.string	"add_AT_location_description"
.LASF1732:
	.string	"dw_cfi_struct"
.LASF1897:
	.string	"augmentation"
.LASF1242:
	.string	"DW_FORM_data1"
.LASF1236:
	.string	"DW_FORM_data2"
.LASF1237:
	.string	"DW_FORM_data4"
.LASF1441:
	.string	"DW_OP_reg18"
.LASF2018:
	.string	"reverse_all_dies"
.LASF1238:
	.string	"DW_FORM_data8"
.LASF652:
	.string	"in_system_header_flag"
.LASF241:
	.string	"INIT_EXPR"
.LASF2138:
	.string	"field_type"
.LASF940:
	.string	"REG_UNUSED"
.LASF586:
	.string	"x_return_label"
.LASF121:
	.string	"BImode"
.LASF620:
	.string	"returns_pointer"
.LASF1851:
	.string	"dir_info"
.LASF2342:
	.string	"abbrev_section_label"
.LASF882:
	.string	"SIGN_EXTRACT"
.LASF740:
	.string	"itk_unsigned_int"
.LASF311:
	.string	"UNSAVE_EXPR"
.LASF1360:
	.string	"DW_OP_consts"
.LASF659:
	.string	"weak_flag"
.LASF1359:
	.string	"DW_OP_constu"
.LASF1171:
	.string	"DW_TAG_array_type"
.LASF1624:
	.string	"maximum_length"
.LASF829:
	.string	"CONST_DOUBLE"
.LASF1865:
	.string	"lookup_cfa"
.LASF1597:
	.string	"stream"
.LASF272:
	.string	"ABS_EXPR"
.LASF1830:
	.string	"dw_file_num"
.LASF323:
	.string	"POSTDECREMENT_EXPR"
.LASF62:
	.string	"CUMULATIVE_ARGS"
.LASF778:
	.string	"INCLUDE"
.LASF2033:
	.string	"is_symbol_die"
.LASF2298:
	.string	"output_indirect_string"
.LASF1882:
	.string	"dest"
.LASF2107:
	.string	"item_type"
.LASF825:
	.string	"RETURN"
.LASF184:
	.string	"MODE_PARTIAL_INT"
.LASF1449:
	.string	"DW_OP_reg26"
.LASF1506:
	.string	"DW_ATE_unsigned"
.LASF2361:
	.string	"tree_code_type"
.LASF1701:
	.string	"add_pending_fn_decls"
.LASF1328:
	.string	"DW_AT_call_line"
.LASF409:
	.string	"BUILT_IN_PUTS"
.LASF1121:
	.string	"LTI_lexf2"
.LASF766:
	.string	"DWARF_DEBUG"
.LASF1087:
	.string	"LTI_memset"
.LASF431:
	.string	"BUILT_IN_INIT_DWARF_REG_SIZES"
.LASF718:
	.string	"TI_UV4HI_TYPE"
.LASF1530:
	.string	"DW_LNS_set_basic_block"
.LASF2203:
	.string	"decl_const"
.LASF1013:
	.string	"refs"
.LASF1770:
	.string	"die_struct"
.LASF1056:
	.string	"x_pending_chain"
.LASF1364:
	.string	"DW_OP_pick"
.LASF2038:
	.string	"add_sibling_attributes"
.LASF2304:
	.string	"fde_table_in_use"
.LASF1811:
	.string	"val_loc"
.LASF1886:
	.string	"queue_reg_save"
.LASF730:
	.string	"TI_V16QI_TYPE"
.LASF1531:
	.string	"DW_LNS_const_add_pc"
.LASF234:
	.string	"BUFFER_REF"
.LASF1221:
	.string	"DW_TAG_namespace"
.LASF1872:
	.string	"reg_save"
.LASF47:
	.string	"FP_SECOND_SSE_REGS"
.LASF1953:
	.string	"val_low"
.LASF595:
	.string	"x_context_display"
.LASF283:
	.string	"TRUTH_ANDIF_EXPR"
.LASF693:
	.string	"TI_INTEGER_ONE"
.LASF1348:
	.string	"dwarf_location_atom"
.LASF380:
	.string	"BUILT_IN_STRSPN"
.LASF569:
	.string	"outer"
.LASF1118:
	.string	"LTI_gtxf2"
.LASF986:
	.string	"GR_PC"
.LASF1099:
	.string	"LTI_lthf2"
.LASF2372:
	.string	"flag_exceptions"
.LASF364:
	.string	"BUILT_IN_BCMP"
.LASF2300:
	.string	"input_filename"
.LASF1048:
	.string	"x_regno_reg_rtx"
.LASF536:
	.string	"size"
.LASF348:
	.string	"BUILT_IN_LABS"
.LASF567:
	.string	"emit"
.LASF2211:
	.string	"gen_set_type_die"
.LASF2124:
	.string	"loc_descriptor"
.LASF302:
	.string	"IN_EXPR"
.LASF1187:
	.string	"DW_TAG_union_type"
.LASF328:
	.string	"GOTO_SUBROUTINE_EXPR"
.LASF1034:
	.string	"first"
.LASF1623:
	.string	"prefix"
.LASF830:
	.string	"CONST_VECTOR"
.LASF1000:
	.string	"hint"
.LASF2122:
	.string	"x0_ref"
.LASF1289:
	.string	"DW_AT_accessibility"
.LASF273:
	.string	"FFS_EXPR"
.LASF455:
	.string	"public_flag"
.LASF2143:
	.string	"field_byte_offset"
.LASF783:
	.string	"MATCH_DUP"
.LASF752:
	.string	"handler"
.LASF434:
	.string	"BUILT_IN_EH_RETURN"
.LASF1166:
	.string	"LTI_profile_function_entry"
.LASF967:
	.string	"NOTE_INSN_LOOP_END"
.LASF1901:
	.string	"lsda_encoding"
.LASF1871:
	.string	"loc_list"
.LASF3:
	.string	"call"
.LASF188:
	.string	"MODE_VECTOR_INT"
.LASF763:
	.string	"NO_DEBUG"
.LASF2:
	.string	"jump"
.LASF1795:
	.string	"dw_val_class_flag"
.LASF2067:
	.string	"output_pubnames"
.LASF710:
	.string	"TI_CONST_PTR_TYPE"
.LASF999:
	.string	"varray_data_tag"
.LASF281:
	.string	"BIT_ANDTC_EXPR"
.LASF1532:
	.string	"DW_LNS_fixed_advance_pc"
.LASF2306:
	.string	"current_funcdef_fde"
.LASF2065:
	.string	"scope"
.LASF111:
	.string	"_unused2"
.LASF2032:
	.string	"is_comdat_die"
.LASF487:
	.string	"chunk_size"
.LASF2111:
	.string	"reg_loc_descriptor"
.LASF762:
	.string	"debug_info_type"
.LASF72:
	.string	"size_t"
.LASF374:
	.string	"BUILT_IN_STRNCPY"
.LASF1063:
	.string	"language_function"
.LASF1824:
	.string	"dw_attr_struct"
.LASF1807:
	.string	"external"
.LASF690:
	.string	"TI_UINTDI_TYPE"
.LASF279:
	.string	"BIT_XOR_EXPR"
.LASF1091:
	.string	"LTI_setjmp"
.LASF2041:
	.string	"build_abbrev_table"
.LASF2350:
	.string	"comdat_symbol_id"
.LASF1881:
	.string	"pattern"
.LASF440:
	.string	"BUILT_IN_EXPECT"
.LASF914:
	.string	"mem_attrs"
.LASF2326:
	.string	"separate_line_info_table_allocated"
.LASF883:
	.string	"ZERO_EXTRACT"
.LASF1458:
	.string	"DW_OP_breg3"
.LASF230:
	.string	"NAMESPACE_DECL"
.LASF299:
	.string	"UNGT_EXPR"
.LASF2090:
	.string	"lt_index"
.LASF1114:
	.string	"LTI_ledf2"
.LASF1172:
	.string	"DW_TAG_class_type"
.LASF1106:
	.string	"LTI_ltsf2"
.LASF509:
	.string	"collisions"
.LASF1584:
	.string	"dwarf_macinfo_record_type"
.LASF1700:
	.string	"disregard_inline_limits"
.LASF1161:
	.string	"LTI_fixunsxfdi"
.LASF127:
	.string	"OImode"
.LASF544:
	.string	"packed_flag"
.LASF2137:
	.string	"jump_node"
.LASF1677:
	.string	"md_finish"
.LASF378:
	.string	"BUILT_IN_STRSTR"
.LASF1054:
	.string	"x_apply_args_value"
.LASF1313:
	.string	"DW_AT_use_location"
.LASF29:
	.string	"AREG"
.LASF246:
	.string	"METHOD_CALL_EXPR"
.LASF1273:
	.string	"DW_AT_string_length"
.LASF1077:
	.string	"LTI_truncxfsf2"
.LASF622:
	.string	"calls_setjmp"
.LASF581:
	.string	"x_nonlocal_labels"
.LASF758:
	.string	"BITSIZETYPE"
.LASF2360:
	.string	"version_string"
.LASF1041:
	.string	"x_last_insn"
.LASF110:
	.string	"_mode"
.LASF2066:
	.string	"add_pubname"
.LASF2278:
	.string	"dwarf2out_global_decl"
.LASF1731:
	.string	"dw_cfi_ref"
.LASF681:
	.string	"TI_ERROR_MARK"
.LASF1744:
	.string	"nothrow"
.LASF2322:
	.string	"line_info_table"
.LASF1671:
	.string	"destructor"
.LASF1657:
	.string	"open_paren"
.LASF671:
	.string	"initial"
.LASF1111:
	.string	"LTI_gtdf2"
.LASF49:
	.string	"FLOAT_INT_REGS"
.LASF1315:
	.string	"DW_AT_virtuality"
.LASF1598:
	.string	"line_length"
.LASF935:
	.string	"REG_WAS_0"
.LASF1177:
	.string	"DW_TAG_label"
.LASF1640:
	.string	"end_source_file"
.LASF2390:
	.string	"targetm"
.LASF619:
	.string	"returns_pcc_struct"
.LASF397:
	.string	"BUILT_IN_CONSTANT_P"
.LASF2273:
	.string	"gen_decl_die"
.LASF686:
	.string	"TI_INTTI_TYPE"
.LASF196:
	.string	"BLOCK"
.LASF2037:
	.string	"unit"
.LASF2329:
	.string	"pubname_table_allocated"
.LASF1685:
	.string	"comp_type_attributes"
.LASF1690:
	.string	"init_builtins"
.LASF2144:
	.string	"type_align_in_bits"
.LASF1207:
	.string	"DW_TAG_namelist"
.LASF1536:
	.string	"dwarf_line_number_x_ops"
.LASF194:
	.string	"TREE_LIST"
.LASF441:
	.string	"END_BUILTINS"
.LASF291:
	.string	"GT_EXPR"
.LASF1488:
	.string	"DW_OP_fbreg"
.LASF2383:
	.string	"asm_out_file"
.LASF888:
	.string	"RANGE_VAR"
.LASF776:
	.string	"rtx_code"
.LASF1208:
	.string	"DW_TAG_namelist_item"
.LASF261:
	.string	"ROUND_MOD_EXPR"
.LASF218:
	.string	"REAL_CST"
.LASF983:
	.string	"NOTE_INSN_EXPECTED_VALUE"
.LASF2252:
	.string	"language_string"
.LASF353:
	.string	"BUILT_IN_IMAXABS"
.LASF1015:
	.string	"deaths"
.LASF187:
	.string	"MODE_COMPLEX_FLOAT"
.LASF872:
	.string	"LTGT"
.LASF559:
	.string	"alias_set"
.LASF1839:
	.string	"created_for"
.LASF1201:
	.string	"DW_TAG_catch_block"
.LASF715:
	.string	"TI_UV4SI_TYPE"
.LASF227:
	.string	"PARM_DECL"
.LASF630:
	.string	"is_thunk"
.LASF1931:
	.string	"attr"
.LASF531:
	.string	"fragment_origin"
.LASF953:
	.string	"REG_EH_REGION"
.LASF321:
	.string	"PREDECREMENT_EXPR"
.LASF162:
	.string	"V8DImode"
.LASF1718:
	.string	"get_alias_set"
.LASF1213:
	.string	"DW_TAG_thrown_type"
.LASF254:
	.string	"TRUNC_DIV_EXPR"
.LASF1639:
	.string	"start_source_file"
.LASF2316:
	.string	"decl_die_table"
.LASF930:
	.string	"reg_note"
.LASF580:
	.string	"x_function_call_count"
.LASF1857:
	.string	"dwarf_cfi_name"
.LASF1900:
	.string	"per_encoding"
.LASF1266:
	.string	"DW_AT_high_pc"
.LASF1314:
	.string	"DW_AT_variable_parameter"
.LASF406:
	.string	"BUILT_IN_TRAP"
.LASF1616:
	.string	"DK_NOTE"
.LASF1510:
	.string	"DW_ACCESS_public"
.LASF1641:
	.string	"begin_block"
.LASF683:
	.string	"TI_INTHI_TYPE"
.LASF1910:
	.string	"oprnd1"
.LASF1911:
	.string	"oprnd2"
.LASF1291:
	.string	"DW_AT_artificial"
.LASF1135:
	.string	"LTI_floattidf"
.LASF46:
	.string	"FP_TOP_SSE_REGS"
.LASF1179:
	.string	"DW_TAG_member"
.LASF1786:
	.string	"dw_val_class_addr"
.LASF2008:
	.string	"decl_die"
.LASF1927:
	.string	"type_main_variant"
.LASF741:
	.string	"itk_long"
.LASF326:
	.string	"TRY_CATCH_EXPR"
.LASF224:
	.string	"CONST_DECL"
.LASF1736:
	.string	"dw_cfi_oprnd2"
.LASF1593:
	.string	"buflen"
.LASF1884:
	.string	"dwarf2out_stack_adjust"
.LASF1145:
	.string	"LTI_fixdfsi"
.LASF320:
	.string	"IMAGPART_EXPR"
.LASF2392:
	.string	"flag_traditional"
.LASF2358:
	.string	"mode_unit_size"
.LASF377:
	.string	"BUILT_IN_STRLEN"
.LASF1813:
	.string	"val_unsigned"
.LASF835:
	.string	"SUBREG"
.LASF1243:
	.string	"DW_FORM_flag"
.LASF1658:
	.string	"close_paren"
.LASF40:
	.string	"GENERAL_REGS"
.LASF1556:
	.string	"DW_CFA_def_cfa"
.LASF1814:
	.string	"val_long_long"
.LASF2256:
	.string	"bases"
.LASF1985:
	.string	"is_java"
.LASF157:
	.string	"V4SImode"
.LASF2057:
	.string	"output_die_symbol"
.LASF287:
	.string	"TRUTH_XOR_EXPR"
.LASF192:
	.string	"ERROR_MARK"
.LASF1147:
	.string	"LTI_fixdfti"
.LASF2139:
	.string	"simple_type_align_in_bits"
.LASF386:
	.string	"BUILT_IN_COS"
.LASF1914:
	.string	"size_of_loc_descr"
.LASF2376:
	.string	"frame_pointer_needed"
.LASF1675:
	.string	"variable_issue"
.LASF949:
	.string	"REG_SAVE_AREA"
.LASF1072:
	.string	"LTI_extendsfxf2"
.LASF2145:
	.string	"decl_align_in_bits"
.LASF429:
	.string	"BUILT_IN_DWARF_CFA"
.LASF101:
	.string	"_vtable_offset"
.LASF840:
	.string	"ADDRESSOF"
.LASF2340:
	.string	"text_end_label"
.LASF896:
	.string	"SS_PLUS"
.LASF444:
	.string	"side_effects_flag"
.LASF2146:
	.string	"type_size_in_bits"
.LASF1652:
	.string	"deferred_inline_function"
.LASF1740:
	.string	"dw_fde_current_label"
.LASF2313:
	.string	"comp_unit_die"
.LASF1898:
	.string	"augmentation_size"
.LASF332:
	.string	"EXIT_EXPR"
.LASF1975:
	.string	"spec"
.LASF566:
	.string	"expr"
.LASF716:
	.string	"TI_UV8HI_TYPE"
.LASF1005:
	.string	"sched"
.LASF737:
	.string	"itk_short"
.LASF557:
	.string	"binfo"
.LASF1024:
	.string	"elements_used"
.LASF1276:
	.string	"DW_AT_const_value"
.LASF2020:
	.string	"old_unit"
.LASF61:
	.string	"maybe_vaarg"
.LASF1371:
	.string	"DW_OP_minus"
.LASF2053:
	.string	"size_of_aranges"
.LASF207:
	.string	"REFERENCE_TYPE"
.LASF1220:
	.string	"DW_TAG_interface_type"
.LASF971:
	.string	"NOTE_INSN_FUNCTION_END"
.LASF538:
	.string	"attributes"
.LASF1992:
	.string	"tmp_die"
.LASF2035:
	.string	"assign_symbol_names"
.LASF860:
	.string	"PRE_INC"
.LASF1380:
	.string	"DW_OP_shr"
.LASF1645:
	.string	"begin_prologue"
.LASF2201:
	.string	"add_type_attribute"
.LASF130:
	.string	"PSImode"
.LASF2395:
	.string	"GNU C 4.8.1 -mtune=generic -march=x86-64 -g -fno-strict-aliasing -fstack-protector"
.LASF1383:
	.string	"DW_OP_bra"
.LASF1588:
	.string	"DW_MACINFO_end_file"
.LASF1307:
	.string	"DW_AT_namelist_items"
.LASF1040:
	.string	"x_first_insn"
.LASF863:
	.string	"PRE_MODIFY"
.LASF1854:
	.string	"expand_builtin_dwarf_fp_regnum"
.LASF1565:
	.string	"DW_CFA_GNU_window_save"
.LASF2062:
	.string	"output_comp_unit"
.LASF165:
	.string	"V2DFmode"
.LASF1124:
	.string	"LTI_netf2"
.LASF1691:
	.string	"expand_builtin"
.LASF1224:
	.string	"DW_TAG_partial_unit"
.LASF1816:
	.string	"val_die_ref"
.LASF1372:
	.string	"DW_OP_mod"
.LASF1400:
	.string	"DW_OP_lit9"
.LASF1335:
	.string	"DW_AT_MIPS_linkage_name"
.LASF159:
	.string	"V8QImode"
.LASF1943:
	.string	"flag"
.LASF371:
	.string	"BUILT_IN_STRCAT"
.LASF950:
	.string	"REG_BR_PRED"
.LASF1190:
	.string	"DW_TAG_common_block"
.LASF422:
	.string	"BUILT_IN_ISGREATER"
.LASF483:
	.string	"limit"
.LASF2047:
	.string	"size_of_die"
.LASF1630:
	.string	"cursor"
.LASF2288:
	.string	"dwarf2out_source_line"
.LASF644:
	.string	"linenum"
.LASF1269:
	.string	"DW_AT_discr"
.LASF2054:
	.string	"value_format"
.LASF270:
	.string	"MIN_EXPR"
.LASF873:
	.string	"SIGN_EXTEND"
.LASF1907:
	.string	"dwarf2out_frame_finish"
.LASF1638:
	.string	"undef"
.LASF902:
	.string	"LAST_AND_UNUSED_RTX_CODE"
.LASF2186:
	.string	"origin"
.LASF366:
	.string	"BUILT_IN_INDEX"
.LASF200:
	.string	"COMPLEX_TYPE"
.LASF1027:
	.string	"varray_type"
.LASF1909:
	.string	"new_loc_descr"
.LASF675:
	.string	"saved_tree"
.LASF1132:
	.string	"LTI_floattisf"
.LASF714:
	.string	"TI_UV4SF_TYPE"
.LASF163:
	.string	"V16QImode"
.LASF1601:
	.string	"diagnostic_context"
.LASF1071:
	.string	"LTI_extendsfdf2"
.LASF16:
	.string	"common"
.LASF1233:
	.string	"DW_FORM_addr"
.LASF1729:
	.string	"tree_inlining"
.LASF889:
	.string	"RANGE_LIVE"
.LASF248:
	.string	"CLEANUP_POINT_EXPR"
.LASF1603:
	.string	"args_ptr"
.LASF1734:
	.string	"dw_cfi_opc"
.LASF1632:
	.string	"diagnostic_count"
.LASF83:
	.string	"_flags"
.LASF1979:
	.string	"get_AT_flag"
.LASF1279:
	.string	"DW_AT_inline"
.LASF2338:
	.string	"current_function_has_inlines"
.LASF1141:
	.string	"LTI_floattitf"
.LASF809:
	.string	"JUMP_INSN"
.LASF1741:
	.string	"dw_fde_end"
.LASF823:
	.string	"CLOBBER"
.LASF515:
	.string	"tree_identifier"
.LASF684:
	.string	"TI_INTSI_TYPE"
.LASF2056:
	.string	"output_abbrev_section"
.LASF2175:
	.string	"upper"
.LASF1512:
	.string	"DW_ACCESS_private"
.LASF985:
	.string	"global_rtl_index"
.LASF679:
	.string	"lang_decl"
.LASF1202:
	.string	"DW_TAG_const_type"
.LASF560:
	.string	"lang_specific"
.LASF138:
	.string	"TFmode"
.LASF1583:
	.string	"DW_LANG_Mips_Assembler"
.LASF370:
	.string	"BUILT_IN_MEMSET"
.LASF93:
	.string	"_IO_backup_base"
.LASF1382:
	.string	"DW_OP_xor"
.LASF1303:
	.string	"DW_AT_frame_base"
.LASF53:
	.string	"LIM_REG_CLASSES"
.LASF1025:
	.string	"element_size"
.LASF787:
	.string	"MATCH_PAR_DUP"
.LASF1954:
	.string	"add_AT_float"
.LASF1579:
	.string	"DW_LANG_Java"
.LASF477:
	.string	"tree_complex"
.LASF2200:
	.string	"class_scope_p"
.LASF136:
	.string	"DFmode"
.LASF5:
	.string	"volatil"
.LASF1036:
	.string	"sequence_rtl_expr"
.LASF2400:
	.string	"is_cxx"
.LASF1569:
	.string	"DW_LANG_C89"
.LASF1717:
	.string	"clear_binding_stack"
.LASF1521:
	.string	"DW_INL_declared_inlined"
.LASF1064:
	.string	"expand_modifier"
.LASF402:
	.string	"BUILT_IN_APPLY"
.LASF189:
	.string	"MODE_VECTOR_FLOAT"
.LASF1103:
	.string	"LTI_nesf2"
.LASF1183:
	.string	"DW_TAG_string_type"
.LASF2130:
	.string	"do_binop"
.LASF2295:
	.string	"dwarf2out_init"
.LASF1526:
	.string	"DW_LNS_advance_line"
.LASF1863:
	.string	"xcfi"
.LASF2104:
	.string	"context_die"
.LASF1925:
	.string	"func"
.LASF1010:
	.string	"last_uid"
.LASF1647:
	.string	"end_epilogue"
.LASF1787:
	.string	"dw_val_class_offset"
.LASF884:
	.string	"HIGH"
.LASF628:
	.string	"contains_functions"
.LASF1724:
	.string	"print_xnode"
.LASF1212:
	.string	"DW_TAG_template_value_param"
.LASF1687:
	.string	"insert_attributes"
.LASF1223:
	.string	"DW_TAG_unspecified_type"
.LASF1011:
	.string	"last_note_uid"
.LASF2184:
	.string	"func_type"
.LASF286:
	.string	"TRUTH_OR_EXPR"
.LASF2014:
	.string	"line_info"
.LASF1689:
	.string	"ms_bitfield_layout_p"
.LASF446:
	.string	"addressable_flag"
.LASF2255:
	.string	"gen_member_die"
.LASF1879:
	.string	"initial_return_save"
.LASF212:
	.string	"RECORD_TYPE"
.LASF523:
	.string	"tree_block"
.LASF1160:
	.string	"LTI_fixunsxfsi"
.LASF1966:
	.string	"AT_loc_list"
.LASF612:
	.string	"profile_label_no"
.LASF1791:
	.string	"dw_val_class_const"
.LASF1164:
	.string	"LTI_fixunstfdi"
.LASF1856:
	.string	"cfi_opc"
.LASF1855:
	.string	"addr"
.LASF1373:
	.string	"DW_OP_mul"
.LASF514:
	.string	"HT_ALLOCED"
.LASF2114:
	.string	"based_loc_descr"
.LASF1982:
	.string	"is_c_family"
.LASF1138:
	.string	"LTI_floattixf"
.LASF2285:
	.string	"file_name"
.LASF765:
	.string	"SDB_DEBUG"
.LASF85:
	.string	"_IO_read_end"
.LASF922:
	.string	"rt_cselib"
.LASF1789:
	.string	"dw_val_class_loc_list"
.LASF1533:
	.string	"DW_LNS_set_prologue_end"
.LASF1162:
	.string	"LTI_fixunsxfti"
.LASF427:
	.string	"BUILT_IN_ISUNORDERED"
.LASF426:
	.string	"BUILT_IN_ISLESSGREATER"
.LASF540:
	.string	"string_flag"
.LASF661:
	.string	"no_instrument_function_entry_exit"
.LASF2207:
	.string	"member"
.LASF1969:
	.string	"add_AT_lbl_id"
.LASF19:
	.string	"vector"
.LASF747:
	.string	"min_length"
.LASF1908:
	.string	"dwarf_stack_op_name"
.LASF789:
	.string	"DEFINE_INSN"
.LASF33:
	.string	"SIREG"
.LASF382:
	.string	"BUILT_IN_STRCHR"
.LASF92:
	.string	"_IO_save_base"
.LASF938:
	.string	"REG_NONNEG"
.LASF2080:
	.string	"dirs"
.LASF1517:
	.string	"dwarf_inline_attribute"
.LASF903:
	.string	"min_align"
.LASF1859:
	.string	"list_head"
.LASF1703:
	.string	"auto_var_in_fn_p"
.LASF1272:
	.string	"DW_AT_import"
.LASF1084:
	.string	"LTI_bcopy"
.LASF1033:
	.string	"sequence_stack"
.LASF1949:
	.string	"unsigned_val"
.LASF404:
	.string	"BUILT_IN_SETJMP"
.LASF728:
	.string	"TI_V2SI_TYPE"
.LASF2005:
	.string	"lookup_decl_die"
.LASF501:
	.string	"hash_table"
.LASF1936:
	.string	"ret_val"
.LASF907:
	.string	"min_after_base"
.LASF1264:
	.string	"DW_AT_stmt_list"
.LASF788:
	.string	"MATCH_INSN"
.LASF1278:
	.string	"DW_AT_default_value"
.LASF89:
	.string	"_IO_write_end"
.LASF643:
	.string	"filename"
.LASF932:
	.string	"REG_INC"
.LASF2087:
	.string	"line_label"
.LASF2126:
	.string	"addressp"
.LASF2261:
	.string	"vtype"
.LASF1503:
	.string	"DW_ATE_float"
.LASF38:
	.string	"INDEX_REGS"
.LASF1217:
	.string	"DW_TAG_volatile_type"
.LASF846:
	.string	"MINUS"
.LASF2391:
	.string	"debug_str_hash"
.LASF1244:
	.string	"DW_FORM_sdata"
.LASF1093:
	.string	"LTI_unwind_sjlj_register"
.LASF1998:
	.string	"new_die"
.LASF1176:
	.string	"DW_TAG_imported_declaration"
.LASF506:
	.string	"nelements"
.LASF1709:
	.string	"lang_hooks_for_tree_dump"
.LASF564:
	.string	"function"
.LASF920:
	.string	"rttype"
.LASF1046:
	.string	"regno_pointer_align"
.LASF928:
	.string	"basic_block_def"
.LASF529:
	.string	"supercontext"
.LASF1174:
	.string	"DW_TAG_enumeration_type"
.LASF660:
	.string	"non_addr_const_p"
.LASF334:
	.string	"LABELED_BLOCK_EXPR"
.LASF865:
	.string	"UNORDERED"
.LASF30:
	.string	"DREG"
.LASF1841:
	.string	"file_table"
.LASF90:
	.string	"_IO_buf_base"
.LASF946:
	.string	"REG_BR_PROB"
.LASF304:
	.string	"CARD_EXPR"
.LASF1802:
	.string	"dw_long_long_struct"
.LASF2168:
	.string	"subrange_die"
.LASF2059:
	.string	"curr"
.LASF2223:
	.string	"gen_formal_types_die"
.LASF1092:
	.string	"LTI_longjmp"
.LASF104:
	.string	"_offset"
.LASF1725:
	.string	"print_decl"
.LASF2193:
	.string	"decl_name"
.LASF1173:
	.string	"DW_TAG_entry_point"
.LASF1053:
	.string	"x_saveregs_value"
.LASF236:
	.string	"ARRAY_RANGE_REF"
.LASF183:
	.string	"MODE_FLOAT"
.LASF665:
	.string	"pure_flag"
.LASF542:
	.string	"needs_constructing_flag"
.LASF1316:
	.string	"DW_AT_vtable_elem_location"
.LASF1934:
	.string	"block_ultimate_origin"
.LASF2016:
	.string	"debug_dwarf"
.LASF613:
	.string	"machine"
.LASF1181:
	.string	"DW_TAG_reference_type"
.LASF1080:
	.string	"LTI_trunctfdf2"
.LASF132:
	.string	"QFmode"
.LASF1625:
	.string	"ideal_maximum_length"
.LASF239:
	.string	"COMPOUND_EXPR"
.LASF54:
	.string	"ix86_args"
.LASF856:
	.string	"SMAX"
.LASF2371:
	.string	"flag_pic"
.LASF1711:
	.string	"type_quals"
.LASF2386:
	.string	"current_funcdef_number"
.LASF640:
	.string	"uses_eh_lsda"
.LASF655:
	.string	"transparent_union"
.LASF245:
	.string	"CALL_EXPR"
.LASF1324:
	.string	"DW_AT_ranges"
.LASF421:
	.string	"BUILT_IN_FPRINTF_UNLOCKED"
.LASF1501:
	.string	"DW_ATE_boolean"
.LASF2127:
	.string	"ret1"
.LASF767:
	.string	"DWARF2_DEBUG"
.LASF1892:
	.string	"output_cfi"
.LASF1746:
	.string	"dw_cfi_reg_num"
.LASF1609:
	.string	"x_data"
.LASF276:
	.string	"LROTATE_EXPR"
.LASF1755:
	.string	"dw_loc_addr"
.LASF250:
	.string	"WITH_RECORD_EXPR"
.LASF1509:
	.string	"dwarf_access_attribute"
.LASF375:
	.string	"BUILT_IN_STRCMP"
.LASF1384:
	.string	"DW_OP_eq"
.LASF1159:
	.string	"LTI_fixunsdfti"
.LASF1621:
	.string	"diagnostic_prefixing_rule_t"
.LASF1991:
	.string	"child_die"
.LASF2156:
	.string	"rtl_for_decl_location"
.LASF1956:
	.string	"node"
.LASF1866:
	.string	"expand_builtin_init_dwarf_reg_sizes"
.LASF866:
	.string	"ORDERED"
.LASF2034:
	.string	"gen_internal_sym"
.LASF822:
	.string	"PREFETCH"
.LASF1032:
	.string	"next"
.LASF2027:
	.string	"compute_section_prefix"
.LASF1555:
	.string	"DW_CFA_restore_state"
.LASF824:
	.string	"CALL"
.LASF433:
	.string	"BUILT_IN_EXTRACT_RETURN_ADDR"
.LASF2325:
	.string	"separate_line_info_table"
.LASF1739:
	.string	"dw_fde_begin"
.LASF147:
	.string	"CSImode"
.LASF2328:
	.string	"pubname_table"
.LASF2373:
	.string	"flag_unwind_tables"
.LASF1619:
	.string	"DIAGNOSTICS_SHOW_PREFIX_NEVER"
.LASF1020:
	.string	"elt_list"
.LASF1301:
	.string	"DW_AT_encoding"
.LASF2283:
	.string	"dwarf2out_ignore_block"
.LASF867:
	.string	"UNEQ"
.LASF1707:
	.string	"end_inlining"
.LASF1945:
	.string	"add_AT_int"
.LASF775:
	.string	"DINFO_LEVEL_VERBOSE"
.LASF6:
	.string	"in_struct"
.LASF112:
	.string	"_IO_marker"
.LASF1119:
	.string	"LTI_gexf2"
.LASF2192:
	.string	"add_name_and_src_coords_attributes"
.LASF759:
	.string	"SBITSIZETYPE"
.LASF1100:
	.string	"LTI_lehf2"
.LASF2131:
	.string	"do_unop"
.LASF1385:
	.string	"DW_OP_ge"
.LASF264:
	.string	"FIX_TRUNC_EXPR"
.LASF556:
	.string	"main_variant"
.LASF1919:
	.string	"output_loc_sequence"
.LASF405:
	.string	"BUILT_IN_LONGJMP"
.LASF1519:
	.string	"DW_INL_inlined"
.LASF1386:
	.string	"DW_OP_gt"
.LASF2228:
	.string	"dwarf2out_abstract_function"
.LASF2224:
	.string	"function_or_method_type"
.LASF1361:
	.string	"DW_OP_dup"
.LASF1850:
	.string	"dir_idx"
.LASF2170:
	.string	"bound"
.LASF1771:
	.string	"die_tag"
.LASF1804:
	.string	"dw_fp_struct"
.LASF1577:
	.string	"DW_LANG_Pascal83"
.LASF2335:
	.string	"ranges_table_allocated"
.LASF2040:
	.string	"d_attr"
.LASF1666:
	.string	"function_epilogue"
.LASF1996:
	.string	"parent"
.LASF2154:
	.string	"loc_descr"
.LASF810:
	.string	"CALL_INSN"
.LASF1767:
	.string	"dw_val_struct"
.LASF1329:
	.string	"DW_AT_MIPS_fde"
.LASF1819:
	.string	"val_lbl_id"
.LASF2287:
	.string	"init_file_table"
.LASF1097:
	.string	"LTI_gthf2"
.LASF1267:
	.string	"DW_AT_language"
.LASF373:
	.string	"BUILT_IN_STRCPY"
.LASF1823:
	.string	"dw_attr_ref"
.LASF656:
	.string	"static_ctor_flag"
.LASF739:
	.string	"itk_int"
.LASF869:
	.string	"UNGT"
.LASF1848:
	.string	"fname"
.LASF13:
	.string	"num_elem"
.LASF1706:
	.string	"start_inlining"
.LASF1088:
	.string	"LTI_bzero"
.LASF306:
	.string	"CONVERT_EXPR"
.LASF947:
	.string	"REG_EXEC_COUNT"
.LASF901:
	.string	"US_TRUNCATE"
.LASF2015:
	.string	"debug_dwarf_die"
.LASF1042:
	.string	"x_cur_insn_uid"
.LASF812:
	.string	"CODE_LABEL"
.LASF1678:
	.string	"reorder"
.LASF2398:
	.string	"_IO_lock_t"
.LASF220:
	.string	"VECTOR_CST"
.LASF84:
	.string	"_IO_read_ptr"
.LASF1696:
	.string	"lang_print_tree_hook"
.LASF921:
	.string	"rt_addr_diff_vec_flags"
.LASF2012:
	.string	"print_die"
.LASF2048:
	.string	"lsize"
.LASF1713:
	.string	"identifier_size"
.LASF1912:
	.string	"descr"
.LASF790:
	.string	"DEFINE_PEEPHOLE"
.LASF1950:
	.string	"AT_unsigned"
.LASF1752:
	.string	"dw_loc_opc"
.LASF419:
	.string	"BUILT_IN_FPUTS_UNLOCKED"
.LASF1974:
	.string	"get_AT"
.LASF827:
	.string	"RESX"
.LASF977:
	.string	"NOTE_INSN_EH_REGION_END"
.LASF2159:
	.string	"arrtype"
.LASF98:
	.string	"_flags2"
.LASF1782:
	.string	"dw_loc_list_struct"
.LASF2334:
	.string	"ranges_table"
.LASF153:
	.string	"V2SImode"
.LASF530:
	.string	"abstract_origin"
.LASF852:
	.string	"ASHIFTRT"
.LASF806:
	.string	"EQ_ATTR"
.LASF2332:
	.string	"arange_table_allocated"
.LASF664:
	.string	"no_limit_stack"
.LASF180:
	.string	"mode_class"
.LASF1107:
	.string	"LTI_lesf2"
.LASF1977:
	.string	"get_AT_hi_pc"
.LASF1391:
	.string	"DW_OP_lit0"
.LASF583:
	.string	"x_nonlocal_goto_handler_labels"
.LASF1393:
	.string	"DW_OP_lit2"
.LASF1394:
	.string	"DW_OP_lit3"
.LASF1395:
	.string	"DW_OP_lit4"
.LASF1396:
	.string	"DW_OP_lit5"
.LASF1397:
	.string	"DW_OP_lit6"
.LASF1398:
	.string	"DW_OP_lit7"
.LASF548:
	.string	"align"
.LASF982:
	.string	"NOTE_INSN_BASIC_BLOCK"
.LASF1836:
	.string	"dw_ranges_ref"
.LASF2045:
	.string	"abbrev"
.LASF841:
	.string	"QUEUED"
.LASF1283:
	.string	"DW_AT_prototyped"
.LASF2241:
	.string	"gen_label_die"
.LASF803:
	.string	"ATTR"
.LASF318:
	.string	"CONJ_EXPR"
.LASF228:
	.string	"RESULT_DECL"
.LASF59:
	.string	"sse_nregs"
.LASF576:
	.string	"return_rtx"
.LASF88:
	.string	"_IO_write_ptr"
.LASF1554:
	.string	"DW_CFA_remember_state"
.LASF582:
	.string	"x_nonlocal_goto_handler_slots"
.LASF1831:
	.string	"dw_line_num"
.LASF1552:
	.string	"DW_CFA_same_value"
.LASF2245:
	.string	"stmt_die"
.LASF1112:
	.string	"LTI_gedf2"
.LASF2052:
	.string	"size_of_pubnames"
.LASF1656:
	.string	"asm_out"
.LASF924:
	.string	"rttree"
.LASF2202:
	.string	"object_die"
.LASF1751:
	.string	"dw_loc_next"
.LASF1298:
	.string	"DW_AT_decl_line"
.LASF344:
	.string	"BUILT_IN_NORMAL"
.LASF301:
	.string	"UNEQ_EXPR"
.LASF2270:
	.string	"origin_code"
.LASF1825:
	.string	"dw_attr"
.LASF252:
	.string	"MINUS_EXPR"
.LASF1387:
	.string	"DW_OP_le"
.LASF1722:
	.string	"honor_readonly"
.LASF1933:
	.string	"decl_ultimate_origin"
.LASF275:
	.string	"RSHIFT_EXPR"
.LASF1423:
	.string	"DW_OP_reg0"
.LASF1424:
	.string	"DW_OP_reg1"
.LASF119:
	.string	"machine_mode"
.LASF1426:
	.string	"DW_OP_reg3"
.LASF855:
	.string	"SMIN"
.LASF1388:
	.string	"DW_OP_lt"
.LASF1429:
	.string	"DW_OP_reg6"
.LASF1430:
	.string	"DW_OP_reg7"
.LASF1431:
	.string	"DW_OP_reg8"
.LASF1432:
	.string	"DW_OP_reg9"
.LASF2058:
	.string	"output_loc_list"
.LASF2171:
	.string	"new_addr"
.LASF2336:
	.string	"ranges_table_in_use"
.LASF546:
	.string	"pointer_depth"
.LASF305:
	.string	"RANGE_EXPR"
.LASF2397:
	.string	"/home/yunqi/SPEC2006/benchspec/CPU2006/403.gcc/build/build_base_amd64-m64-gcc43-nn.0000"
.LASF204:
	.string	"CHAR_TYPE"
.LASF253:
	.string	"MULT_EXPR"
.LASF2025:
	.string	"attr_checksum"
.LASF214:
	.string	"QUAL_UNION_TYPE"
.LASF956:
	.string	"REG_NORETURN"
.LASF1494:
	.string	"DW_OP_push_object_address"
.LASF1559:
	.string	"DW_CFA_def_cfa_expression"
.LASF265:
	.string	"FIX_CEIL_EXPR"
.LASF1514:
	.string	"DW_VIRTUALITY_none"
.LASF303:
	.string	"SET_LE_EXPR"
.LASF393:
	.string	"BUILT_IN_SAVEREGS"
.LASF853:
	.string	"LSHIFTRT"
.LASF1487:
	.string	"DW_OP_regx"
.LASF2140:
	.string	"simple_field_decl_align_in_bits"
.LASF870:
	.string	"UNLE"
.LASF1028:
	.string	"var_refs_queue"
.LASF1247:
	.string	"DW_FORM_ref_addr"
.LASF1029:
	.string	"modified"
.LASF2323:
	.string	"line_info_table_allocated"
.LASF168:
	.string	"V8SFmode"
.LASF1906:
	.string	"dwarf2out_frame_init"
.LASF2259:
	.string	"nested"
.LASF327:
	.string	"TRY_FINALLY_EXPR"
.LASF1070:
	.string	"libfunc_index"
.LASF1133:
	.string	"LTI_floatsidf"
.LASF2307:
	.string	"cfa_store"
.LASF20:
	.string	"string"
.LASF1163:
	.string	"LTI_fixunstfsi"
.LASF2116:
	.string	"is_based_loc"
.LASF1389:
	.string	"DW_OP_ne"
.LASF217:
	.string	"INTEGER_CST"
.LASF1674:
	.string	"issue_rate"
.LASF2187:
	.string	"origin_die"
.LASF8:
	.string	"integrated"
.LASF170:
	.string	"V16SFmode"
.LASF1069:
	.string	"EXPAND_WRITE"
.LASF494:
	.string	"chunkfun"
.LASF521:
	.string	"complexity"
.LASF1904:
	.string	"dwarf2out_end_epilogue"
.LASF124:
	.string	"SImode"
.LASF343:
	.string	"BUILT_IN_MD"
.LASF293:
	.string	"EQ_EXPR"
.LASF621:
	.string	"needs_context"
.LASF944:
	.string	"REG_DEP_ANTI"
.LASF21:
	.string	"complex"
.LASF597:
	.string	"x_parm_birth_insn"
.LASF1586:
	.string	"DW_MACINFO_undef"
.LASF1633:
	.string	"output_state"
.LASF1573:
	.string	"DW_LANG_Cobol74"
.LASF2284:
	.string	"lookup_filename"
.LASF859:
	.string	"PRE_DEC"
.LASF470:
	.string	"realvaluetype"
.LASF226:
	.string	"VAR_DECL"
.LASF1693:
	.string	"have_named_sections"
.LASF648:
	.string	"inline_flag"
.LASF1165:
	.string	"LTI_fixunstfti"
.LASF401:
	.string	"BUILT_IN_APPLY_ARGS"
.LASF795:
	.string	"DEFINE_EXPAND"
.LASF2142:
	.string	"simple_type_size_in_bits"
.LASF1376:
	.string	"DW_OP_or"
.LASF2208:
	.string	"gen_array_type_die"
.LASF2337:
	.string	"have_location_lists"
.LASF2044:
	.string	"a_attr"
.LASF814:
	.string	"COND_EXEC"
.LASF596:
	.string	"x_trampoline_list"
.LASF637:
	.string	"x_dont_save_pending_sizes_p"
.LASF592:
	.string	"x_arg_pointer_save_area"
.LASF149:
	.string	"CTImode"
.LASF2225:
	.string	"formal_type"
.LASF1574:
	.string	"DW_LANG_Cobol85"
.LASF2377:
	.string	"flag_eliminate_dwarf2_dups"
.LASF2118:
	.string	"mem_loc_result"
.LASF325:
	.string	"VA_ARG_EXPR"
.LASF1311:
	.string	"DW_AT_static_link"
.LASF1572:
	.string	"DW_LANG_C_plus_plus"
.LASF1390:
	.string	"DW_OP_skip"
.LASF1580:
	.string	"DW_LANG_C99"
.LASF1957:
	.string	"AT_string"
.LASF966:
	.string	"NOTE_INSN_LOOP_BEG"
.LASF915:
	.string	"rtunion_def"
.LASF2147:
	.string	"object_offset_in_bits"
.LASF1305:
	.string	"DW_AT_identifier_case"
.LASF2310:
	.string	"last_reg_save_label"
.LASF2069:
	.string	"add_arange"
.LASF1180:
	.string	"DW_TAG_pointer_type"
.LASF2155:
	.string	"add_const_value_attribute"
.LASF682:
	.string	"TI_INTQI_TYPE"
.LASF975:
	.string	"NOTE_INSN_FUNCTION_BEG"
.LASF1702:
	.string	"tree_chain_matters_p"
.LASF242:
	.string	"TARGET_EXPR"
.LASF160:
	.string	"V8HImode"
.LASF1938:
	.string	"decl_class_context"
.LASF2050:
	.string	"mark_dies"
.LASF1003:
	.string	"cptr"
.LASF2396:
	.string	"dwarf2out.c"
.LASF1796:
	.string	"dw_val_class_die_ref"
.LASF2367:
	.string	"lang_set_decl_assembler_name"
.LASF2019:
	.string	"push_new_compile_unit"
.LASF354:
	.string	"BUILT_IN_CONJ"
.LASF2299:
	.string	"dwarf2out_finish"
.LASF1862:
	.string	"add_fde_cfi"
.LASF1340:
	.string	"DW_AT_sf_names"
.LASF1978:
	.string	"get_AT_string"
.LASF211:
	.string	"SET_TYPE"
.LASF805:
	.string	"SET_ATTR_ALTERNATIVE"
.LASF2100:
	.string	"is_base_type"
.LASF2268:
	.string	"gen_block_die"
.LASF1948:
	.string	"add_AT_unsigned"
.LASF919:
	.string	"rtstr"
.LASF2026:
	.string	"die_checksum"
.LASF103:
	.string	"_lock"
.LASF172:
	.string	"CCmode"
.LASF1022:
	.string	"varray_head_tag"
.LASF1082:
	.string	"LTI_memcpy"
.LASF746:
	.string	"attribute_spec"
.LASF437:
	.string	"BUILT_IN_STDARG_START"
.LASF1332:
	.string	"DW_AT_MIPS_epilog_begin"
.LASF232:
	.string	"BIT_FIELD_REF"
.LASF489:
	.string	"object_base"
.LASF1081:
	.string	"LTI_abort"
.LASF910:
	.string	"scale"
.LASF1023:
	.string	"num_elements"
.LASF1878:
	.string	"dwarf2out_return_reg"
.LASF912:
	.string	"alias"
.LASF1728:
	.string	"set_yydebug"
.LASF2232:
	.string	"gen_subprogram_die"
.LASF1672:
	.string	"adjust_cost"
.LASF363:
	.string	"BUILT_IN_BZERO"
.LASF2036:
	.string	"break_out_includes"
.LASF2221:
	.string	"gen_unspecified_parameters_die"
.LASF2009:
	.string	"num_allocated"
.LASF638:
	.string	"uses_const_pool"
.LASF2055:
	.string	"output_value_format"
.LASF717:
	.string	"TI_UV8QI_TYPE"
.LASF2169:
	.string	"bound_attr"
.LASF1094:
	.string	"LTI_unwind_sjlj_unregister"
.LASF1231:
	.string	"DW_TAG_GNU_EINCL"
.LASF1149:
	.string	"LTI_fixxfdi"
.LASF2237:
	.string	"declaration"
.LASF995:
	.string	"GR_VIRTUAL_OUTGOING_ARGS"
.LASF174:
	.string	"CCGOCmode"
.LASF589:
	.string	"x_rtl_expr_chain"
.LASF1043:
	.string	"x_last_linenum"
.LASF2292:
	.string	"dwarf2out_end_source_file"
.LASF1057:
	.string	"eh_status"
.LASF1300:
	.string	"DW_AT_discr_list"
.LASF2196:
	.string	"scope_die_for"
.LASF623:
	.string	"calls_longjmp"
.LASF91:
	.string	"_IO_buf_end"
.LASF547:
	.string	"user_align"
.LASF350:
	.string	"BUILT_IN_FABSF"
.LASF75:
	.string	"short unsigned int"
.LASF1762:
	.string	"refcount"
.LASF351:
	.string	"BUILT_IN_FABSL"
.LASF244:
	.string	"BIND_EXPR"
.LASF1821:
	.string	"dw_val_node"
.LASF2297:
	.string	"indirect_string_alloc"
.LASF1342:
	.string	"DW_AT_mac_info"
.LASF1880:
	.string	"stack_adjust_offset"
.LASF2291:
	.string	"lineno"
.LASF2121:
	.string	"cc_loc_result"
.LASF2091:
	.string	"current_line"
.LASF1261:
	.string	"DW_AT_bit_offset"
.LASF1295:
	.string	"DW_AT_data_member_location"
.LASF179:
	.string	"MAX_MACHINE_MODE"
.LASF1541:
	.string	"DW_CFA_advance_loc"
.LASF770:
	.string	"VMS_AND_DWARF2_DEBUG"
.LASF796:
	.string	"DEFINE_DELAY"
.LASF1507:
	.string	"DW_ATE_unsigned_char"
.LASF1110:
	.string	"LTI_nedf2"
.LASF1650:
	.string	"function_decl"
.LASF2276:
	.string	"context_list"
.LASF2315:
	.string	"primary_filename"
.LASF1333:
	.string	"DW_AT_MIPS_loop_unroll_factor"
.LASF1379:
	.string	"DW_OP_shl"
.LASF895:
	.string	"VEC_DUPLICATE"
.LASF1546:
	.string	"DW_CFA_advance_loc1"
.LASF1547:
	.string	"DW_CFA_advance_loc2"
.LASF86:
	.string	"_IO_read_base"
.LASF1781:
	.string	"dw_loc_list_ref"
.LASF629:
	.string	"has_computed_jump"
.LASF2102:
	.string	"is_const_type"
.LASF308:
	.string	"NON_LVALUE_EXPR"
.LASF727:
	.string	"TI_V4HI_TYPE"
.LASF1051:
	.string	"x_inhibit_defer_pop"
.LASF1123:
	.string	"LTI_eqtf2"
.LASF1812:
	.string	"val_int"
.LASF969:
	.string	"NOTE_INSN_LOOP_VTOP"
.LASF447:
	.string	"volatile_flag"
.LASF1184:
	.string	"DW_TAG_structure_type"
.LASF1792:
	.string	"dw_val_class_unsigned_const"
.LASF1197:
	.string	"DW_TAG_subrange_type"
.LASF389:
	.string	"BUILT_IN_COSF"
.LASF1518:
	.string	"DW_INL_not_inlined"
.LASF392:
	.string	"BUILT_IN_COSL"
.LASF1591:
	.string	"md5_ctx"
.LASF562:
	.string	"lang_type"
.LASF300:
	.string	"UNGE_EXPR"
.LASF2218:
	.string	"enum_die"
.LASF1076:
	.string	"LTI_truncdfsf2"
.LASF414:
	.string	"BUILT_IN_FPRINTF"
.LASF674:
	.string	"live_range_rtl"
.LASF2333:
	.string	"arange_table_in_use"
.LASF1765:
	.string	"cfa_offset"
.LASF2194:
	.string	"push_decl_scope"
.LASF782:
	.string	"MATCH_SCRATCH"
.LASF2029:
	.string	"base"
.LASF459:
	.string	"deprecated_flag"
.LASF533:
	.string	"address"
.LASF2022:
	.string	"new_unit"
.LASF2303:
	.string	"fde_table_allocated"
.LASF396:
	.string	"BUILT_IN_ARGS_INFO"
.LASF1994:
	.string	"add_child_die"
.LASF469:
	.string	"tree_int_cst"
.LASF1753:
	.string	"dw_loc_oprnd1"
.LASF650:
	.string	"virtual_flag"
.LASF1200:
	.string	"DW_TAG_base_type"
.LASF1058:
	.string	"stmt_status"
.LASF2096:
	.string	"base_type_result"
.LASF141:
	.string	"SCmode"
.LASF223:
	.string	"LABEL_DECL"
.LASF2165:
	.string	"add_name_attribute"
.LASF2345:
	.string	"macinfo_section_label"
.LASF2387:
	.string	"ggc_pending_trees"
.LASF1538:
	.string	"DW_LNE_set_address"
.LASF847:
	.string	"MULT"
.LASF456:
	.string	"private_flag"
.LASF1997:
	.string	"child"
.LASF1688:
	.string	"function_attribute_inlinable_p"
.LASF102:
	.string	"_shortbuf"
.LASF114:
	.string	"_sbuf"
.LASF1495:
	.string	"DW_OP_call2"
.LASF1780:
	.string	"dw_loc_descr_ref"
.LASF1047:
	.string	"regno_decl"
.LASF1951:
	.string	"add_AT_long_long"
.LASF1254:
	.string	"dwarf_attribute"
.LASF473:
	.string	"tree_real_cst"
.LASF292:
	.string	"GE_EXPR"
.LASF988:
	.string	"GR_STACK_POINTER"
.LASF1963:
	.string	"set_AT_ref_external"
.LASF2231:
	.string	"was_abstract"
.LASF711:
	.string	"TI_PTRDIFF_TYPE"
.LASF801:
	.string	"ADDRESS"
.LASF890:
	.string	"CONSTANT_P_RTX"
.LASF1516:
	.string	"DW_VIRTUALITY_pure_virtual"
.LASF2128:
	.string	"indirect_p"
.LASF51:
	.string	"FLOAT_INT_SSE_REGS"
.LASF987:
	.string	"GR_CC0"
.LASF37:
	.string	"NON_Q_REGS"
.LASF1345:
	.string	"DW_AT_body_end"
.LASF584:
	.string	"x_nonlocal_goto_stack_level"
.LASF1318:
	.string	"DW_AT_associated"
.LASF1288:
	.string	"DW_AT_abstract_origin"
.LASF1522:
	.string	"dwarf_line_number_ops"
.LASF2286:
	.string	"output_compilation_unit_header"
.LASF729:
	.string	"TI_V2SF_TYPE"
.LASF74:
	.string	"unsigned char"
.LASF1891:
	.string	"dwarf2out_frame_debug"
.LASF1602:
	.string	"message"
.LASF551:
	.string	"symtab"
.LASF2112:
	.string	"loc_result"
.LASF201:
	.string	"VECTOR_TYPE"
.LASF1748:
	.string	"dw_cfi_addr"
.LASF744:
	.string	"itk_unsigned_long_long"
.LASF1330:
	.string	"DW_AT_MIPS_loop_begin"
.LASF2262:
	.string	"gen_subroutine_type_die"
.LASF2158:
	.string	"passed_type"
.LASF826:
	.string	"TRAP_IF"
.LASF1211:
	.string	"DW_TAG_template_type_param"
.LASF958:
	.string	"REG_SETJMP"
.LASF598:
	.string	"x_last_parm_insn"
.LASF425:
	.string	"BUILT_IN_ISLESSEQUAL"
.LASF537:
	.string	"size_unit"
.LASF2253:
	.string	"gen_string_type_die"
.LASF243:
	.string	"COND_EXPR"
.LASF2226:
	.string	"first_parm_type"
.LASF2083:
	.string	"backmap"
.LASF2293:
	.string	"dwarf2out_define"
.LASF2355:
	.string	"svr4_dbx_register_map"
.LASF1568:
	.string	"dwarf_source_language"
.LASF2003:
	.string	"equate_type_number_to_die"
.LASF36:
	.string	"Q_REGS"
.LASF937:
	.string	"REG_LIBCALL"
.LASF137:
	.string	"XFmode"
.LASF115:
	.string	"_pos"
.LASF1944:
	.string	"AT_flag"
.LASF219:
	.string	"COMPLEX_CST"
.LASF1002:
	.string	"generic"
.LASF1617:
	.string	"DK_LAST_DIAGNOSTIC_KIND"
.LASF493:
	.string	"alignment_mask"
.LASF831:
	.string	"CONST_STRING"
.LASF1366:
	.string	"DW_OP_rot"
.LASF931:
	.string	"REG_DEAD"
.LASF1698:
	.string	"walk_subtrees"
.LASF1745:
	.string	"dw_cfi_oprnd_struct"
.LASF222:
	.string	"FUNCTION_DECL"
.LASF1578:
	.string	"DW_LANG_Modula2"
.LASF133:
	.string	"HFmode"
.LASF2094:
	.string	"current_file"
.LASF1185:
	.string	"DW_TAG_subroutine_type"
.LASF868:
	.string	"UNGE"
.LASF753:
	.string	"_Bool"
.LASF2206:
	.string	"member_declared_type"
.LASF2117:
	.string	"mem_loc_descriptor"
.LASF453:
	.string	"nothrow_flag"
.LASF769:
	.string	"VMS_DEBUG"
.LASF1513:
	.string	"dwarf_virtuality_attribute"
.LASF973:
	.string	"NOTE_INSN_EPILOGUE_BEG"
.LASF263:
	.string	"EXACT_DIV_EXPR"
.LASF2097:
	.string	"type_name"
.LASF158:
	.string	"V4DImode"
.LASF1756:
	.string	"dw_cfi_oprnd"
.LASF258:
	.string	"TRUNC_MOD_EXPR"
.LASF817:
	.string	"ASM_OPERANDS"
.LASF2346:
	.string	"loc_section_label"
.LASF1362:
	.string	"DW_OP_drop"
.LASF2301:
	.string	"next_node"
.LASF1130:
	.string	"LTI_floatsisf"
.LASF507:
	.string	"pfile"
.LASF1500:
	.string	"DW_ATE_address"
.LASF1903:
	.string	"dwarf2out_begin_prologue"
.LASF1760:
	.string	"dw_cfa_location"
.LASF1667:
	.string	"named_section"
.LASF1986:
	.string	"free_AT"
.LASF1320:
	.string	"DW_AT_stride"
.LASF624:
	.string	"calls_alloca"
.LASF1664:
	.string	"function_end_prologue"
.LASF436:
	.string	"BUILT_IN_VARARGS_START"
.LASF1887:
	.string	"flush_queued_reg_saves"
.LASF1299:
	.string	"DW_AT_declaration"
.LASF1928:
	.string	"is_tagged_type"
.LASF1037:
	.string	"emit_status"
.LASF1783:
	.string	"begin"
.LASF1947:
	.string	"AT_int"
.LASF2239:
	.string	"parm"
.LASF481:
	.string	"elements"
.LASF2341:
	.string	"text_section_label"
.LASF2007:
	.string	"equate_decl_number_to_die"
.LASF1139:
	.string	"LTI_floatsitf"
.LASF2085:
	.string	"idx_offset"
.LASF296:
	.string	"ORDERED_EXPR"
.LASF1682:
	.string	"merge_decl_attributes"
.LASF24:
	.string	"type"
.LASF990:
	.string	"GR_HARD_FRAME_POINTER"
.LASF78:
	.string	"__off_t"
.LASF1062:
	.string	"machine_function"
.LASF1575:
	.string	"DW_LANG_Fortran77"
.LASF685:
	.string	"TI_INTDI_TYPE"
.LASF1550:
	.string	"DW_CFA_restore_extended"
.LASF449:
	.string	"unsigned_flag"
.LASF1661:
	.string	"unaligned_op"
.LASF2098:
	.string	"encoding"
.LASF1592:
	.string	"total"
.LASF1363:
	.string	"DW_OP_over"
.LASF2109:
	.string	"dtype"
.LASF1044:
	.string	"x_last_filename"
.LASF2352:
	.string	"const_labelno"
.LASF1803:
	.string	"dw_long_long_const"
.LASF274:
	.string	"LSHIFT_EXPR"
.LASF1078:
	.string	"LTI_trunctfsf2"
.LASF280:
	.string	"BIT_AND_EXPR"
.LASF1827:
	.string	"dw_attr_val"
.LASF534:
	.string	"tree_type"
.LASF2214:
	.string	"gen_inlined_structure_type_die"
.LASF171:
	.string	"BLKmode"
.LASF587:
	.string	"x_save_expr_regs"
.LASF2357:
	.string	"mode_size"
.LASF2381:
	.string	"reg_raw_mode"
.LASF131:
	.string	"PDImode"
.LASF1708:
	.string	"convert_parm_for_inlining"
.LASF647:
	.string	"regdecl_flag"
.LASF233:
	.string	"INDIRECT_REF"
.LASF1847:
	.string	"path"
.LASF616:
	.string	"language"
.LASF14:
	.string	"elem"
.LASF939:
	.string	"REG_NO_CONFLICT"
.LASF415:
	.string	"BUILT_IN_PUTCHAR_UNLOCKED"
.LASF2093:
	.string	"line_delta"
.LASF698:
	.string	"TI_BITSIZE_ZERO"
.LASF1312:
	.string	"DW_AT_type"
.LASF1089:
	.string	"LTI_unwind_resume"
.LASF1368:
	.string	"DW_OP_abs"
.LASF492:
	.string	"temp"
.LASF2354:
	.string	"dbx64_register_map"
.LASF1260:
	.string	"DW_AT_byte_size"
.LASF1571:
	.string	"DW_LANG_Ada83"
.LASF1576:
	.string	"DW_LANG_Fortran90"
.LASF1498:
	.string	"dwarf_type"
.LASF1582:
	.string	"DW_LANG_Fortran95"
.LASF1635:
	.string	"init"
.LASF736:
	.string	"itk_unsigned_char"
.LASF35:
	.string	"AD_REGS"
.LASF443:
	.string	"chain"
.LASF2011:
	.string	"outfile"
.LASF593:
	.string	"x_clobber_return_insn"
.LASF2060:
	.string	"output_die"
.LASF488:
	.string	"chunk"
.LASF1214:
	.string	"DW_TAG_try_block"
.LASF1606:
	.string	"warn"
.LASF355:
	.string	"BUILT_IN_CONJF"
.LASF792:
	.string	"DEFINE_INSN_AND_SPLIT"
.LASF1014:
	.string	"freq"
.LASF356:
	.string	"BUILT_IN_CONJL"
.LASF369:
	.string	"BUILT_IN_MEMCMP"
.LASF1733:
	.string	"dw_cfi_next"
.LASF757:
	.string	"USIZETYPE"
.LASF2222:
	.string	"decl_or_type"
.LASF1651:
	.string	"global_decl"
.LASF1477:
	.string	"DW_OP_breg22"
.LASF1968:
	.string	"AT_addr"
.LASF625:
	.string	"calls_eh_return"
.LASF899:
	.string	"US_MINUS"
.LASF1581:
	.string	"DW_LANG_Ada95"
.LASF2356:
	.string	"stderr"
.LASF2234:
	.string	"subr_die"
.LASF428:
	.string	"BUILT_IN_UNWIND_INIT"
.LASF454:
	.string	"static_flag"
.LASF1155:
	.string	"LTI_fixunssfdi"
.LASF1528:
	.string	"DW_LNS_set_column"
.LASF66:
	.string	"fp_offset"
.LASF1502:
	.string	"DW_ATE_complex_float"
.LASF2205:
	.string	"type_tag"
.LASF2321:
	.string	"abbrev_die_table_in_use"
.LASF1122:
	.string	"LTI_unordxf2"
.LASF518:
	.string	"value"
.LASF113:
	.string	"_next"
.LASF1684:
	.string	"attribute_table"
.LASF1136:
	.string	"LTI_floatsixf"
.LASF1331:
	.string	"DW_AT_MIPS_tail_loop_begin"
.LASF1589:
	.string	"DW_MACINFO_vendor_ext"
.LASF602:
	.string	"x_temp_slot_level"
.LASF2181:
	.string	"bit_offset"
.LASF315:
	.string	"ENTRY_VALUE_EXPR"
.LASF1191:
	.string	"DW_TAG_common_inclusion"
.LASF577:
	.string	"internal_arg_pointer"
.LASF1148:
	.string	"LTI_fixxfsi"
.LASF561:
	.string	"cpp_reader"
.LASF590:
	.string	"x_tail_recursion_label"
.LASF751:
	.string	"function_type_required"
.LASF295:
	.string	"UNORDERED_EXPR"
.LASF1152:
	.string	"LTI_fixtfdi"
.LASF615:
	.string	"preferred_stack_boundary"
.LASF1952:
	.string	"val_hi"
.LASF627:
	.string	"has_nonlocal_goto"
.LASF1086:
	.string	"LTI_bcmp"
.LASF2125:
	.string	"loc_descriptor_from_tree"
.LASF39:
	.string	"LEGACY_REGS"
.LASF1098:
	.string	"LTI_gehf2"
.LASF1540:
	.string	"dwarf_call_frame_info"
.LASF695:
	.string	"TI_NULL_POINTER"
.LASF1959:
	.string	"add_AT_die_ref"
.LASF606:
	.string	"inlinable"
.LASF955:
	.string	"REG_MAYBE_DEAD"
.LASF1150:
	.string	"LTI_fixxfti"
.LASF205:
	.string	"POINTER_TYPE"
.LASF358:
	.string	"BUILT_IN_CREALF"
.LASF155:
	.string	"V4QImode"
.LASF738:
	.string	"itk_unsigned_short"
.LASF359:
	.string	"BUILT_IN_CREALL"
.LASF1913:
	.string	"add_loc_descr"
.LASF368:
	.string	"BUILT_IN_MEMCPY"
.LASF1653:
	.string	"outlining_inline_function"
.LASF980:
	.string	"NOTE_INSN_RANGE_END"
.LASF1294:
	.string	"DW_AT_count"
.LASF918:
	.string	"rtuint"
.LASF579:
	.string	"hard_reg_initial_vals"
.LASF502:
	.string	"stack"
.LASF1774:
	.string	"die_parent"
.LASF861:
	.string	"POST_DEC"
.LASF1415:
	.string	"DW_OP_lit24"
.LASF2129:
	.string	"plus"
.LASF1416:
	.string	"DW_OP_lit25"
.LASF1258:
	.string	"DW_AT_ordering"
.LASF1852:
	.string	"count"
.LASF1209:
	.string	"DW_TAG_packed_type"
.LASF780:
	.string	"INSN_LIST"
.LASF1561:
	.string	"DW_CFA_offset_extended_sf"
.LASF1916:
	.string	"output_loc_operands"
.LASF1558:
	.string	"DW_CFA_def_cfa_offset"
.LASF1274:
	.string	"DW_AT_common_reference"
.LASF992:
	.string	"GR_VIRTUAL_INCOMING_ARGS"
.LASF2179:
	.string	"highest_order_object_bit_offset"
.LASF216:
	.string	"LANG_TYPE"
.LASF1626:
	.string	"indent_skip"
.LASF697:
	.string	"TI_SIZE_ONE"
.LASF941:
	.string	"REG_CC_SETTER"
.LASF952:
	.string	"REG_EH_CONTEXT"
.LASF528:
	.string	"subblocks"
.LASF1470:
	.string	"DW_OP_breg15"
.LASF2351:
	.string	"comdat_symbol_number"
.LASF1471:
	.string	"DW_OP_breg16"
.LASF1472:
	.string	"DW_OP_breg17"
.LASF712:
	.string	"TI_VA_LIST_TYPE"
.LASF571:
	.string	"args_size"
.LASF31:
	.string	"CREG"
.LASF99:
	.string	"_old_offset"
.LASF1749:
	.string	"dw_cfi_loc"
.LASF1714:
	.string	"init_options"
.LASF1285:
	.string	"DW_AT_start_scope"
.LASF972:
	.string	"NOTE_INSN_PROLOGUE_END"
.LASF2264:
	.string	"gen_typedef_die"
.LASF499:
	.string	"alloc_failed"
.LASF1129:
	.string	"LTI_unordtf2"
.LASF649:
	.string	"bit_field_flag"
.LASF1339:
	.string	"DW_AT_MIPS_has_inlines"
.LASF726:
	.string	"TI_V8QI_TYPE"
.LASF1319:
	.string	"DW_AT_data_location"
.LASF1845:
	.string	"last_lookup_index"
.LASF2061:
	.string	"second"
.LASF618:
	.string	"returns_struct"
.LASF2294:
	.string	"dwarf2out_undef"
.LASF1941:
	.string	"add_AT_flag"
.LASF2082:
	.string	"savehere"
.LASF490:
	.string	"next_free"
.LASF361:
	.string	"BUILT_IN_CIMAGF"
.LASF871:
	.string	"UNLT"
.LASF1590:
	.string	"md5_uint32"
.LASF210:
	.string	"ARRAY_TYPE"
.LASF1976:
	.string	"get_AT_low_pc"
.LASF1105:
	.string	"LTI_gesf2"
.LASF1104:
	.string	"LTI_gtsf2"
.LASF285:
	.string	"TRUTH_AND_EXPR"
.LASF1009:
	.string	"first_uid"
.LASF646:
	.string	"nonlocal_flag"
.LASF128:
	.string	"PQImode"
.LASF1826:
	.string	"dw_attr_next"
.LASF1840:
	.string	"limbo_die_node"
.LASF1349:
	.string	"DW_OP_addr"
.LASF2150:
	.string	"deepest_bitpos"
.LASF2157:
	.string	"declared_type"
.LASF535:
	.string	"values"
.LASF1275:
	.string	"DW_AT_comp_dir"
.LASF707:
	.string	"TI_LONG_DOUBLE_TYPE"
.LASF15:
	.string	"tree"
.LASF1634:
	.string	"gcc_debug_hooks"
.LASF1270:
	.string	"DW_AT_discr_value"
.LASF2164:
	.string	"var_die"
.LASF56:
	.string	"nregs"
.LASF1660:
	.string	"aligned_op"
.LASF1778:
	.string	"die_abbrev"
.LASF885:
	.string	"LO_SUM"
.LASF797:
	.string	"DEFINE_FUNCTION_UNIT"
.LASF1970:
	.string	"lbl_id"
.LASF485:
	.string	"contents"
.LASF1984:
	.string	"is_fortran"
.LASF942:
	.string	"REG_CC_USER"
.LASF543:
	.string	"transparent_union_flag"
.LASF1758:
	.string	"base_offset"
.LASF1757:
	.string	"cfa_loc"
.LASF1686:
	.string	"set_default_type_attributes"
.LASF94:
	.string	"_IO_save_end"
.LASF1505:
	.string	"DW_ATE_signed_char"
.LASF550:
	.string	"reference_to"
.LASF2166:
	.string	"name_string"
.LASF876:
	.string	"FLOAT_EXTEND"
.LASF2380:
	.string	"reload_completed"
.LASF202:
	.string	"ENUMERAL_TYPE"
.LASF777:
	.string	"UNKNOWN"
.LASF1326:
	.string	"DW_AT_call_column"
.LASF1861:
	.string	"add_cfi"
.LASF178:
	.string	"CCFPUmode"
.LASF235:
	.string	"ARRAY_REF"
.LASF2364:
	.string	"current_function_decl"
.LASF360:
	.string	"BUILT_IN_CIMAG"
.LASF1021:
	.string	"varray_data"
.LASF1973:
	.string	"AT_lbl"
.LASF706:
	.string	"TI_DOUBLE_TYPE"
.LASF1983:
	.string	"lang"
.LASF1644:
	.string	"source_line"
.LASF17:
	.string	"int_cst"
.LASF307:
	.string	"NOP_EXPR"
.LASF541:
	.string	"no_force_blk_flag"
.LASF984:
	.string	"NOTE_INSN_MAX"
.LASF2119:
	.string	"marked"
.LASF719:
	.string	"TI_UV2SI_TYPE"
.LASF745:
	.string	"itk_none"
.LASF1801:
	.string	"dw_val_class"
.LASF1090:
	.string	"LTI_eh_personality"
.LASF240:
	.string	"MODIFY_EXPR"
.LASF213:
	.string	"UNION_TYPE"
.LASF439:
	.string	"BUILT_IN_VA_COPY"
.LASF1999:
	.string	"tag_value"
.LASF341:
	.string	"NOT_BUILT_IN"
.LASF701:
	.string	"TI_COMPLEX_INTEGER_TYPE"
.LASF1885:
	.string	"insn"
.LASF237:
	.string	"VTABLE_REF"
.LASF539:
	.string	"precision"
.LASF1344:
	.string	"DW_AT_body_begin"
.LASF1704:
	.string	"copy_res_decl_for_inlining"
.LASF591:
	.string	"x_tail_recursion_reentry"
.LASF974:
	.string	"NOTE_INSN_DELETED_LABEL"
.LASF2349:
	.string	"print_indent"
.LASF1764:
	.string	"queued_reg_save"
.LASF1527:
	.string	"DW_LNS_set_file"
.LASF450:
	.string	"asm_written_flag"
.LASF2039:
	.string	"output_location_lists"
.LASF2290:
	.string	"dwarf2out_start_source_file"
.LASF269:
	.string	"NEGATE_EXPR"
.LASF262:
	.string	"RDIV_EXPR"
.LASF388:
	.string	"BUILT_IN_SINF"
.LASF391:
	.string	"BUILT_IN_SINL"
.LASF1820:
	.string	"val_flag"
.LASF331:
	.string	"RETURN_EXPR"
.LASF611:
	.string	"inl_max_label_num"
.LASF1922:
	.string	"head"
.LASF1694:
	.string	"have_ctors_dtors"
.LASF657:
	.string	"static_dtor_flag"
.LASF1534:
	.string	"DW_LNS_set_epilogue_begin"
.LASF1926:
	.string	"is_pseudo_reg"
.LASF1369:
	.string	"DW_OP_and"
.LASF2106:
	.string	"sub_die"
.LASF2031:
	.string	"is_type_die"
.LASF2013:
	.string	"print_dwarf_line_table"
.LASF508:
	.string	"searches"
.LASF1967:
	.string	"add_AT_addr"
.LASF1306:
	.string	"DW_AT_macro_info"
.LASF1241:
	.string	"DW_FORM_block1"
.LASF1234:
	.string	"DW_FORM_block2"
.LASF1235:
	.string	"DW_FORM_block4"
.LASF1743:
	.string	"funcdef_number"
.LASF821:
	.string	"ADDR_DIFF_VEC"
.LASF2378:
	.string	"const_int_rtx"
.LASF1336:
	.string	"DW_AT_MIPS_stride"
.LASF1096:
	.string	"LTI_nehf2"
.LASF837:
	.string	"CONCAT"
.LASF471:
	.string	"tree_node"
.LASF411:
	.string	"BUILT_IN_FPUTC"
.LASF609:
	.string	"original_decl_initial"
.LASF1378:
	.string	"DW_OP_plus_uconst"
.LASF504:
	.string	"alloc_node"
.LASF1465:
	.string	"DW_OP_breg10"
.LASF1466:
	.string	"DW_OP_breg11"
.LASF1467:
	.string	"DW_OP_breg12"
.LASF1468:
	.string	"DW_OP_breg13"
.LASF1469:
	.string	"DW_OP_breg14"
.LASF735:
	.string	"itk_signed_char"
.LASF412:
	.string	"BUILT_IN_FPUTS"
.LASF881:
	.string	"SQRT"
.LASF1473:
	.string	"DW_OP_breg18"
.LASF1474:
	.string	"DW_OP_breg19"
.LASF400:
	.string	"BUILT_IN_AGGREGATE_INCOMING_ADDRESS"
.LASF512:
	.string	"HT_NO_INSERT"
.LASF2243:
	.string	"gen_lexical_block_die"
.LASF1189:
	.string	"DW_TAG_variant"
.LASF1341:
	.string	"DW_AT_src_info"
.LASF148:
	.string	"CDImode"
.LASF1239:
	.string	"DW_FORM_string"
.LASF658:
	.string	"artificial_flag"
.LASF1929:
	.string	"dwarf_tag_name"
.LASF9:
	.string	"frame_related"
.LASF733:
	.string	"integer_type_kind"
.LASF705:
	.string	"TI_FLOAT_TYPE"
.LASF1475:
	.string	"DW_OP_breg20"
.LASF1476:
	.string	"DW_OP_breg21"
.LASF1175:
	.string	"DW_TAG_formal_parameter"
.LASF1478:
	.string	"DW_OP_breg23"
.LASF1479:
	.string	"DW_OP_breg24"
.LASF1480:
	.string	"DW_OP_breg25"
.LASF1481:
	.string	"DW_OP_breg26"
.LASF1482:
	.string	"DW_OP_breg27"
.LASF1483:
	.string	"DW_OP_breg28"
.LASF1484:
	.string	"DW_OP_breg29"
.LASF346:
	.string	"BUILT_IN_ALLOCA"
.LASF850:
	.string	"ASHIFT"
.LASF221:
	.string	"STRING_CST"
.LASF2238:
	.string	"arg_decls"
.LASF2220:
	.string	"parm_die"
.LASF1035:
	.string	"last"
.LASF1085:
	.string	"LTI_memcmp"
.LASF77:
	.string	"short int"
.LASF2132:
	.string	"bitsize"
.LASF936:
	.string	"REG_RETVAL"
.LASF2210:
	.string	"element_type"
.LASF834:
	.string	"SCRATCH"
.LASF1981:
	.string	"get_AT_ref"
.LASF2017:
	.string	"reverse_die_lists"
.LASF1067:
	.string	"EXPAND_CONST_ADDRESS"
.LASF1262:
	.string	"DW_AT_bit_size"
.LASF877:
	.string	"FLOAT_TRUNCATE"
.LASF2076:
	.string	"elabel"
.LASF1485:
	.string	"DW_OP_breg30"
.LASF1486:
	.string	"DW_OP_breg31"
.LASF1642:
	.string	"end_block"
.LASF2136:
	.string	"bra_node"
.LASF1293:
	.string	"DW_AT_calling_convention"
.LASF662:
	.string	"comdat_flag"
.LASF1567:
	.string	"DW_CFA_GNU_negative_offset_extended"
.LASF1867:
	.string	"dwarf2out_def_cfa"
.LASF1271:
	.string	"DW_AT_visibility"
.LASF2216:
	.string	"gen_enumeration_type_die"
.LASF1406:
	.string	"DW_OP_lit15"
.LASF185:
	.string	"MODE_CC"
.LASF1923:
	.string	"get_cfa_from_loc_descr"
.LASF1822:
	.string	"dw_offset"
.LASF2149:
	.string	"bitpos_int"
.LASF1710:
	.string	"dump_tree"
.LASF965:
	.string	"NOTE_INSN_BLOCK_END"
.LASF1566:
	.string	"DW_CFA_GNU_args_size"
.LASF1604:
	.string	"file"
.LASF2103:
	.string	"is_volatile_type"
.LASF336:
	.string	"EXPR_WITH_FILE_LOCATION"
.LASF1692:
	.string	"section_type_flags"
.LASF345:
	.string	"built_in_function"
.LASF2177:
	.string	"add_bit_offset_attribute"
.LASF669:
	.string	"arguments"
.LASF95:
	.string	"_markers"
.LASF916:
	.string	"rtwint"
.LASF600:
	.string	"x_parm_reg_stack_loc"
.LASF2030:
	.string	"checksum"
.LASF1154:
	.string	"LTI_fixunssfsi"
.LASF97:
	.string	"_fileno"
.LASF1222:
	.string	"DW_TAG_imported_module"
.LASF1229:
	.string	"DW_TAG_class_template"
.LASF2110:
	.string	"reg_number"
.LASF2120:
	.string	"concat_loc_descriptor"
.LASF22:
	.string	"identifier"
.LASF2375:
	.string	"flag_debug_asm"
.LASF2021:
	.string	"bincl_die"
.LASF1599:
	.string	"digit_buffer"
.LASF1227:
	.string	"DW_TAG_format_label"
.LASF2183:
	.string	"add_prototyped_attribute"
.LASF1670:
	.string	"constructor"
.LASF1808:
	.string	"val_addr"
.LASF154:
	.string	"V2DImode"
.LASF1374:
	.string	"DW_OP_neg"
.LASF1659:
	.string	"byte_op"
.LASF1412:
	.string	"DW_OP_lit21"
.LASF720:
	.string	"TI_UV2SF_TYPE"
.LASF1156:
	.string	"LTI_fixunssfti"
.LASF594:
	.string	"x_frame_offset"
.LASF517:
	.string	"purpose"
.LASF2379:
	.string	"global_rtl"
.LASF1419:
	.string	"DW_OP_lit28"
.LASF420:
	.string	"BUILT_IN_FWRITE_UNLOCKED"
.LASF1151:
	.string	"LTI_fixtfsi"
.LASF1557:
	.string	"DW_CFA_def_cfa_register"
.LASF255:
	.string	"CEIL_DIV_EXPR"
.LASF520:
	.string	"tree_exp"
.LASF1915:
	.string	"size_of_locs"
.LASF708:
	.string	"TI_VOID_TYPE"
.LASF525:
	.string	"abstract_flag"
.LASF1109:
	.string	"LTI_eqdf2"
.LASF1204:
	.string	"DW_TAG_enumerator"
.LASF1877:
	.string	"dwarf2out_return_save"
.LASF1125:
	.string	"LTI_gttf2"
.LASF1797:
	.string	"dw_val_class_fde_ref"
.LASF1186:
	.string	"DW_TAG_typedef"
.LASF1127:
	.string	"LTI_lttf2"
.LASF886:
	.string	"RANGE_INFO"
.LASF2215:
	.string	"gen_inlined_union_type_die"
.LASF71:
	.string	"long int"
.LASF851:
	.string	"ROTATE"
.LASF410:
	.string	"BUILT_IN_PRINTF"
.LASF2078:
	.string	"output_file_names"
.LASF1834:
	.string	"pubname_ref"
.LASF773:
	.string	"DINFO_LEVEL_TERSE"
.LASF2235:
	.string	"fn_arg_types"
.LASF634:
	.string	"varargs"
.LASF522:
	.string	"operands"
.LASF1075:
	.string	"LTI_extenddftf2"
.LASF704:
	.string	"TI_COMPLEX_LONG_DOUBLE_TYPE"
.LASF357:
	.string	"BUILT_IN_CREAL"
.LASF811:
	.string	"BARRIER"
.LASF1225:
	.string	"DW_TAG_imported_unit"
.LASF2028:
	.string	"unit_die"
.LASF1683:
	.string	"merge_type_attributes"
.LASF1422:
	.string	"DW_OP_lit31"
.LASF58:
	.string	"sse_words"
.LASF2189:
	.string	"func_decl"
.LASF2089:
	.string	"n_op_args"
.LASF1980:
	.string	"get_AT_unsigned"
.LASF452:
	.string	"used_flag"
.LASF2385:
	.string	"libfunc_table"
.LASF505:
	.string	"nslots"
.LASF256:
	.string	"FLOOR_DIV_EXPR"
.LASF1720:
	.string	"safe_from_p"
.LASF2289:
	.string	"file_num"
.LASF962:
	.string	"NOTE_INSN_BIAS"
.LASF2246:
	.string	"gen_inlined_subroutine_die"
.LASF2105:
	.string	"mod_type_die"
.LASF1595:
	.string	"output_buffer"
.LASF435:
	.string	"BUILT_IN_EH_RETURN_DATA_REGNO"
.LASF177:
	.string	"CCFPmode"
.LASF836:
	.string	"STRICT_LOW_PART"
.LASF1434:
	.string	"DW_OP_reg11"
.LASF1435:
	.string	"DW_OP_reg12"
.LASF1436:
	.string	"DW_OP_reg13"
.LASF1437:
	.string	"DW_OP_reg14"
.LASF1438:
	.string	"DW_OP_reg15"
.LASF1439:
	.string	"DW_OP_reg16"
.LASF1440:
	.string	"DW_OP_reg17"
.LASF145:
	.string	"CQImode"
.LASF1442:
	.string	"DW_OP_reg19"
.LASF1066:
	.string	"EXPAND_SUM"
.LASF996:
	.string	"GR_VIRTUAL_CFA"
.LASF169:
	.string	"V8DFmode"
.LASF636:
	.string	"x_whole_function_mode_p"
.LASF654:
	.string	"defer_output"
.LASF1263:
	.string	"DW_AT_element_list"
.LASF126:
	.string	"TImode"
.LASF329:
	.string	"LABEL_EXPR"
.LASF387:
	.string	"BUILT_IN_SQRTF"
.LASF1596:
	.string	"state"
.LASF390:
	.string	"BUILT_IN_SQRTL"
.LASF2281:
	.string	"blocknum"
.LASF2023:
	.string	"pop_compile_unit"
.LASF1443:
	.string	"DW_OP_reg20"
.LASF1444:
	.string	"DW_OP_reg21"
.LASF1445:
	.string	"DW_OP_reg22"
.LASF1446:
	.string	"DW_OP_reg23"
.LASF1447:
	.string	"DW_OP_reg24"
.LASF1448:
	.string	"DW_OP_reg25"
.LASF945:
	.string	"REG_DEP_OUTPUT"
.LASF1450:
	.string	"DW_OP_reg27"
.LASF1451:
	.string	"DW_OP_reg28"
.LASF1452:
	.string	"DW_OP_reg29"
.LASF1323:
	.string	"DW_AT_extension"
.LASF87:
	.string	"_IO_write_base"
.LASF125:
	.string	"DImode"
.LASF1157:
	.string	"LTI_fixunsdfsi"
.LASF297:
	.string	"UNLT_EXPR"
.LASF41:
	.string	"FP_TOP_REG"
.LASF892:
	.string	"VEC_MERGE"
.LASF891:
	.string	"CALL_PLACEHOLDER"
.LASF1194:
	.string	"DW_TAG_module"
.LASF2079:
	.string	"files"
.LASF721:
	.string	"TI_UV16QI_TYPE"
.LASF1790:
	.string	"dw_val_class_range_list"
.LASF1453:
	.string	"DW_OP_reg30"
.LASF1454:
	.string	"DW_OP_reg31"
.LASF2099:
	.string	"root_type"
.LASF2010:
	.string	"print_spaces"
.LASF1681:
	.string	"gcc_target"
.LASF27:
	.string	"sizetype"
.LASF408:
	.string	"BUILT_IN_PUTCHAR"
.LASF2075:
	.string	"blabel"
.LASF2001:
	.string	"limbo_node"
.LASF2348:
	.string	"demangle_name_func"
.LASF574:
	.string	"arg_offset_rtx"
.LASF1858:
	.string	"new_cfi"
.LASF732:
	.string	"TI_MAX"
.LASF1195:
	.string	"DW_TAG_ptr_to_member_type"
.LASF1542:
	.string	"DW_CFA_offset"
.LASF2344:
	.string	"debug_line_section_label"
.LASF764:
	.string	"DBX_DEBUG"
.LASF166:
	.string	"V4SFmode"
.LASF1321:
	.string	"DW_AT_entry_pc"
.LASF1673:
	.string	"adjust_priority"
.LASF1284:
	.string	"DW_AT_return_addr"
.LASF791:
	.string	"DEFINE_SPLIT"
.LASF430:
	.string	"BUILT_IN_DWARF_FP_REGNUM"
.LASF2072:
	.string	"add_ranges"
.LASF1001:
	.string	"uhint"
.LASF756:
	.string	"SSIZETYPE"
.LASF43:
	.string	"FLOAT_REGS"
.LASF2188:
	.string	"add_pure_or_virtual_attribute"
.LASF484:
	.string	"prev"
.LASF959:
	.string	"REG_ALWAYS_RETURN"
.LASF1203:
	.string	"DW_TAG_constant"
.LASF1131:
	.string	"LTI_floatdisf"
.LASF854:
	.string	"ROTATERT"
.LASF820:
	.string	"ADDR_VEC"
.LASF0:
	.string	"code"
.LASF1252:
	.string	"DW_FORM_ref_udata"
.LASF229:
	.string	"FIELD_DECL"
.LASF2393:
	.string	"decl_scope_table"
.LASF191:
	.string	"tree_code"
.LASF289:
	.string	"LT_EXPR"
.LASF934:
	.string	"REG_EQUAL"
.LASF900:
	.string	"SS_TRUNCATE"
.LASF151:
	.string	"V2QImode"
.LASF573:
	.string	"outgoing_args_size"
.LASF1868:
	.string	"def_cfa_1"
.LASF1117:
	.string	"LTI_nexf2"
.LASF1310:
	.string	"DW_AT_specification"
.LASF1140:
	.string	"LTI_floatditf"
.LASF12:
	.string	"rtvec_def"
.LASF418:
	.string	"BUILT_IN_FPUTC_UNLOCKED"
.LASF498:
	.string	"maybe_empty_object"
.LASF703:
	.string	"TI_COMPLEX_DOUBLE_TYPE"
.LASF1654:
	.string	"label"
.LASF558:
	.string	"context"
.LASF603:
	.string	"x_var_temp_slot_level"
.LASF601:
	.string	"x_temp_slots"
.LASF1496:
	.string	"DW_OP_call4"
.LASF1585:
	.string	"DW_MACINFO_define"
.LASF1545:
	.string	"DW_CFA_set_loc"
.LASF905:
	.string	"min_after_vec"
.LASF1988:
	.string	"removed"
.LASF1497:
	.string	"DW_OP_calli"
.LASF100:
	.string	"_cur_column"
.LASF858:
	.string	"UMAX"
.LASF699:
	.string	"TI_BITSIZE_ONE"
.LASF632:
	.string	"profile"
.LASF1680:
	.string	"cycle_display"
.LASF1935:
	.string	"immediate_origin"
.LASF641:
	.string	"arg_pointer_save_area_init"
.LASF500:
	.string	"ht_identifier"
.LASF631:
	.string	"instrument_entry_exit"
.LASF1723:
	.string	"print_statistics"
.LASF2254:
	.string	"gen_inheritance_die"
.LASF1697:
	.string	"lang_hooks_for_tree_inlining"
.LASF781:
	.string	"MATCH_OPERAND"
.LASF1833:
	.string	"dw_separate_line_info_struct"
.LASF1773:
	.string	"die_attr"
.LASF878:
	.string	"FLOAT"
.LASF610:
	.string	"inl_last_parm_insn"
.LASF957:
	.string	"REG_NON_LOCAL_GOTO"
.LASF2070:
	.string	"output_aranges"
.LASF11:
	.string	"rtx_def"
.LASF156:
	.string	"V4HImode"
.LASF1551:
	.string	"DW_CFA_undefined"
.LASF1842:
	.string	"table"
.LASF1543:
	.string	"DW_CFA_restore"
.LASF617:
	.string	"epilogue_delay_list"
.LASF1896:
	.string	"any_lsda_needed"
.LASF960:
	.string	"REG_VTABLE_REF"
.LASF1628:
	.string	"need_newline_p"
.LASF365:
	.string	"BUILT_IN_FFS"
.LASF784:
	.string	"MATCH_OPERATOR"
.LASF1337:
	.string	"DW_AT_MIPS_abstract_name"
.LASF748:
	.string	"max_length"
.LASF2162:
	.string	"add_location_or_const_value_attribute"
.LASF2042:
	.string	"abbrev_id"
.LASF1277:
	.string	"DW_AT_containing_type"
.LASF1917:
	.string	"val1"
.LASF1918:
	.string	"val2"
.LASF1493:
	.string	"DW_OP_nop"
.LASF691:
	.string	"TI_UINTTI_TYPE"
.LASF913:
	.string	"offset"
.LASF1158:
	.string	"LTI_fixunsdfdi"
.LASF510:
	.string	"hashnode"
.LASF1327:
	.string	"DW_AT_call_file"
.LASF1265:
	.string	"DW_AT_low_pc"
.LASF680:
	.string	"tree_index"
.LASF734:
	.string	"itk_char"
.LASF2277:
	.string	"context_list_decl"
.LASF904:
	.string	"base_after_vec"
.LASF845:
	.string	"PLUS"
.LASF1052:
	.string	"x_stack_pointer_delta"
.LASF1137:
	.string	"LTI_floatdixf"
.LASF122:
	.string	"QImode"
.LASF532:
	.string	"fragment_chain"
.LASF63:
	.string	"__gnuc_va_list"
.LASF2260:
	.string	"complete"
.LASF1549:
	.string	"DW_CFA_offset_extended"
.LASF2209:
	.string	"array_die"
.LASF438:
	.string	"BUILT_IN_VA_END"
.LASF1637:
	.string	"define"
.LASF1511:
	.string	"DW_ACCESS_protected"
.LASF702:
	.string	"TI_COMPLEX_FLOAT_TYPE"
.LASF963:
	.string	"NOTE_INSN_DELETED"
.LASF1338:
	.string	"DW_AT_MIPS_clone_origin"
.LASF786:
	.string	"MATCH_OP_DUP"
.LASF337:
	.string	"SWITCH_EXPR"
.LASF2074:
	.string	"start_fmt"
.LASF2167:
	.string	"add_bound_info"
.LASF743:
	.string	"itk_long_long"
.LASF79:
	.string	"__off64_t"
.LASF1860:
	.string	"label_num"
.LASF1401:
	.string	"DW_OP_lit10"
.LASF1402:
	.string	"DW_OP_lit11"
.LASF1403:
	.string	"DW_OP_lit12"
.LASF1404:
	.string	"DW_OP_lit13"
.LASF1405:
	.string	"DW_OP_lit14"
.LASF495:
	.string	"freefun"
.LASF1407:
	.string	"DW_OP_lit16"
.LASF1408:
	.string	"DW_OP_lit17"
.LASF1409:
	.string	"DW_OP_lit18"
.LASF1410:
	.string	"DW_OP_lit19"
.LASF503:
	.string	"entries"
.LASF1055:
	.string	"x_forced_labels"
.LASF1490:
	.string	"DW_OP_piece"
.LASF2024:
	.string	"loc_checksum"
.LASF432:
	.string	"BUILT_IN_FROB_RETURN_ADDR"
.LASF2051:
	.string	"unmark_dies"
.LASF2006:
	.string	"decl_id"
.LASF1799:
	.string	"dw_val_class_lbl_offset"
.LASF129:
	.string	"PHImode"
.LASF839:
	.string	"SYMBOL_REF"
.LASF144:
	.string	"TCmode"
.LASF76:
	.string	"signed char"
.LASF607:
	.string	"no_debugging_symbols"
.LASF1370:
	.string	"DW_OP_div"
.LASF2084:
	.string	"ndirs"
.LASF1226:
	.string	"DW_TAG_MIPS_loop"
.LASF1411:
	.string	"DW_OP_lit20"
.LASF667:
	.string	"uninlinable"
.LASF1413:
	.string	"DW_OP_lit22"
.LASF1414:
	.string	"DW_OP_lit23"
.LASF199:
	.string	"REAL_TYPE"
.LASF48:
	.string	"FLOAT_SSE_REGS"
.LASF1417:
	.string	"DW_OP_lit26"
.LASF1418:
	.string	"DW_OP_lit27"
.LASF1170:
	.string	"DW_TAG_padding"
.LASF1420:
	.string	"DW_OP_lit29"
.LASF1392:
	.string	"DW_OP_lit1"
.LASF142:
	.string	"DCmode"
.LASF1587:
	.string	"DW_MACINFO_start_file"
.LASF799:
	.string	"DEFINE_COND_EXEC"
.LASF134:
	.string	"TQFmode"
.LASF1399:
	.string	"DW_OP_lit8"
.LASF1017:
	.string	"calls_crossed"
.LASF190:
	.string	"MAX_MODE_CLASS"
.LASF60:
	.string	"sse_regno"
.LASF524:
	.string	"handler_block_flag"
.LASF1844:
	.string	"in_use"
.LASF407:
	.string	"BUILT_IN_PREFETCH"
.LASF457:
	.string	"protected_flag"
.LASF1759:
	.string	"indirect"
.LASF4:
	.string	"unchanging"
.LASF310:
	.string	"SAVE_EXPR"
.LASF909:
	.string	"offset_unsigned"
.LASF1421:
	.string	"DW_OP_lit30"
.LASF688:
	.string	"TI_UINTHI_TYPE"
.LASF1614:
	.string	"DK_WARNING"
.LASF2305:
	.string	"cie_cfi_head"
.LASF1843:
	.string	"allocated"
.LASF2318:
	.string	"decl_die_table_in_use"
.LASF626:
	.string	"has_nonlocal_label"
.LASF1902:
	.string	"any_eh_needed"
.LASF2394:
	.string	"incomplete_types"
.LASF1334:
	.string	"DW_AT_MIPS_software_pipeline_depth"
.LASF1210:
	.string	"DW_TAG_subprogram"
.LASF1255:
	.string	"DW_AT_sibling"
.LASF1292:
	.string	"DW_AT_base_types"
.LASF442:
	.string	"tree_common"
.LASF238:
	.string	"CONSTRUCTOR"
.LASF700:
	.string	"TI_BITSIZE_UNIT"
.LASF1894:
	.string	"output_call_frame_info"
.LASF1570:
	.string	"DW_LANG_C"
.LASF933:
	.string	"REG_EQUIV"
.LASF2324:
	.string	"separate_line_info_table_in_use"
.LASF349:
	.string	"BUILT_IN_FABS"
.LASF1636:
	.string	"finish"
.LASF2314:
	.string	"limbo_die_list"
.LASF1669:
	.string	"eh_frame_section"
.LASF2095:
	.string	"base_type_die"
.LASF266:
	.string	"FIX_FLOOR_EXPR"
.LASF961:
	.string	"insn_note"
.LASF2370:
	.string	"flag_no_inline"
.LASF948:
	.string	"REG_NOALIAS"
.LASF991:
	.string	"GR_ARG_POINTER"
.LASF1727:
	.string	"print_identifier"
.LASF2247:
	.string	"gen_field_die"
.LASF1805:
	.string	"array"
.LASF1257:
	.string	"DW_AT_name"
.LASF779:
	.string	"EXPR_LIST"
.LASF857:
	.string	"UMIN"
.LASF1367:
	.string	"DW_OP_xderef"
.LASF2043:
	.string	"n_alloc"
.LASF497:
	.string	"use_extra_arg"
.LASF2280:
	.string	"dwarf2out_begin_block"
.LASF1253:
	.string	"DW_FORM_indirect"
.LASF1932:
	.string	"dwarf_form_name"
.LASF1730:
	.string	"tree_dump"
.LASF2265:
	.string	"gen_type_die"
.LASF394:
	.string	"BUILT_IN_CLASSIFY_TYPE"
.LASF1115:
	.string	"LTI_unorddf2"
.LASF1853:
	.string	"dwarf2out_do_frame"
.LASF808:
	.string	"INSN"
.LASF2257:
	.string	"n_bases"
.LASF333:
	.string	"LOOP_EXPR"
.LASF2353:
	.string	"target_flags"
.LASF1193:
	.string	"DW_TAG_inlined_subroutine"
.LASF749:
	.string	"decl_required"
.LASF1849:
	.string	"file_idx"
.LASF257:
	.string	"ROUND_DIV_EXPR"
.LASF2198:
	.string	"containing_scope"
.LASF666:
	.string	"non_addressable"
.LASF2347:
	.string	"ranges_section_label"
.LASF802:
	.string	"DEFINE_ATTR"
.LASF527:
	.string	"vars"
.LASF1508:
	.string	"DW_ATE_imaginary_float"
.LASF1281:
	.string	"DW_AT_lower_bound"
.LASF2389:
	.string	"dwarf2_debug_hooks"
.LASF2163:
	.string	"tree_add_const_value_attribute"
.LASF116:
	.string	"long long unsigned int"
.LASF2135:
	.string	"volatilep"
.LASF1153:
	.string	"LTI_fixtfti"
.LASF1835:
	.string	"pubname_struct"
.LASF2374:
	.string	"flag_asynchronous_unwind_tables"
.LASF2272:
	.string	"is_redundant_typedef"
.LASF2296:
	.string	"main_input_filename"
.LASF247:
	.string	"WITH_CLEANUP_EXPR"
.LASF833:
	.string	"VALUE"
.LASF1960:
	.string	"targ_die"
.LASF750:
	.string	"type_required"
.LASF448:
	.string	"readonly_flag"
.LASF1030:
	.string	"promoted_mode"
.LASF1206:
	.string	"DW_TAG_friend"
.LASF1883:
	.string	"__FUNCTION__"
.LASF186:
	.string	"MODE_COMPLEX_INT"
.LASF864:
	.string	"POST_MODIFY"
.LASF472:
	.string	"real_extract"
.LASF1381:
	.string	"DW_OP_shra"
.LASF2227:
	.string	"gen_type_die_for_member"
.LASF395:
	.string	"BUILT_IN_NEXT_ARG"
.LASF1286:
	.string	"DW_AT_stride_size"
.LASF894:
	.string	"VEC_CONCAT"
.LASF118:
	.string	"reg_class"
.LASF70:
	.string	"va_list"
.LASF1631:
	.string	"format_args"
.LASF1539:
	.string	"DW_LNE_define_file"
.LASF1143:
	.string	"LTI_fixsfdi"
.LASF1322:
	.string	"DW_AT_use_UTF8"
.LASF1031:
	.string	"unsignedp"
.LASF480:
	.string	"tree_vector"
.LASF772:
	.string	"DINFO_LEVEL_NONE"
.LASF526:
	.string	"block_num"
.LASF2182:
	.string	"add_bit_size_attribute"
.LASF1006:
	.string	"const_equiv"
.LASF2123:
	.string	"x1_ref"
.LASF519:
	.string	"tree_vec"
.LASF340:
	.string	"built_in_class"
.LASF2242:
	.string	"lbl_die"
.LASF879:
	.string	"UNSIGNED_FLOAT"
.LASF1375:
	.string	"DW_OP_not"
.LASF1491:
	.string	"DW_OP_deref_size"
.LASF1256:
	.string	"DW_AT_location"
.LASF1018:
	.string	"basic_block"
.LASF2271:
	.string	"decls_for_scope"
.LASF1019:
	.string	"changes_mode"
.LASF2004:
	.string	"type_die"
.LASF1629:
	.string	"prefixing_rule"
.LASF2244:
	.string	"depth"
.LASF1750:
	.string	"dw_loc_descr_struct"
.LASF1524:
	.string	"DW_LNS_copy"
.LASF479:
	.string	"imag"
.LASF139:
	.string	"QCmode"
.LASF161:
	.string	"V8SImode"
.LASF2197:
	.string	"scope_die"
.LASF1523:
	.string	"DW_LNS_extended_op"
.LASF2071:
	.string	"aranges_length"
.LASF1563:
	.string	"DW_CFA_def_cfa_offset_sf"
.LASF376:
	.string	"BUILT_IN_STRNCMP"
.LASF818:
	.string	"UNSPEC"
.LASF993:
	.string	"GR_VIRTUAL_STACK_ARGS"
.LASF1615:
	.string	"DK_ANACHRONISM"
.LASF267:
	.string	"FIX_ROUND_EXPR"
.LASF979:
	.string	"NOTE_INSN_RANGE_BEG"
.LASF1610:
	.string	"DK_FATAL"
.LASF1352:
	.string	"DW_OP_const1s"
.LASF1351:
	.string	"DW_OP_const1u"
.LASF689:
	.string	"TI_UINTSI_TYPE"
.LASF1776:
	.string	"die_sib"
.LASF862:
	.string	"POST_INC"
.LASF1737:
	.string	"dw_fde_ref"
.LASF1965:
	.string	"AT_loc"
.LASF1309:
	.string	"DW_AT_segment"
.LASF2327:
	.string	"line_info_table_in_use"
.LASF1809:
	.string	"val_offset"
.LASF842:
	.string	"IF_THEN_ELSE"
.LASF28:
	.string	"NO_REGS"
.LASF203:
	.string	"BOOLEAN_TYPE"
.LASF352:
	.string	"BUILT_IN_LLABS"
.LASF1525:
	.string	"DW_LNS_advance_pc"
.LASF1008:
	.string	"reg_info_def"
.LASF1050:
	.string	"x_pending_stack_adjust"
.LASF1775:
	.string	"die_child"
.LASF2219:
	.string	"gen_formal_parameter_die"
.LASF1611:
	.string	"DK_ICE"
.LASF798:
	.string	"DEFINE_ASM_ATTRIBUTES"
.LASF1354:
	.string	"DW_OP_const2s"
.LASF1353:
	.string	"DW_OP_const2u"
.LASF849:
	.string	"UMOD"
.LASF1798:
	.string	"dw_val_class_lbl_id"
.LASF7:
	.string	"used"
.LASF1061:
	.string	"temp_slot"
.LASF1167:
	.string	"LTI_profile_function_exit"
.LASF81:
	.string	"FILE"
.LASF32:
	.string	"BREG"
.LASF1038:
	.string	"x_reg_rtx_no"
.LASF45:
	.string	"MMX_REGS"
.LASF1793:
	.string	"dw_val_class_long_long"
.LASF2330:
	.string	"pubname_table_in_use"
.LASF398:
	.string	"BUILT_IN_FRAME_ADDRESS"
.LASF1942:
	.string	"attr_kind"
.LASF335:
	.string	"EXIT_BLOCK_EXPR"
.LASF1668:
	.string	"exception_section"
.LASF1817:
	.string	"val_fde_index"
.LASF998:
	.string	"const_equiv_data"
.LASF1864:
	.string	"lookup_cfa_1"
.LASF1784:
	.string	"ll_symbol"
.LASF1425:
	.string	"DW_OP_reg2"
.LASF1427:
	.string	"DW_OP_reg4"
.LASF2311:
	.string	"cfa_temp"
.LASF1428:
	.string	"DW_OP_reg5"
.LASF1228:
	.string	"DW_TAG_function_template"
.LASF1921:
	.string	"build_cfa_loc"
.LASF1726:
	.string	"print_type"
.LASF1924:
	.string	"dwarf2out_set_demangle_name_func"
.LASF268:
	.string	"FLOAT_EXPR"
.LASF80:
	.string	"char"
.LASF209:
	.string	"FILE_TYPE"
.LASF2172:
	.string	"add_subscript_info"
.LASF1920:
	.string	"output_cfa_loc"
.LASF2368:
	.string	"write_symbols"
.LASF424:
	.string	"BUILT_IN_ISLESS"
.LASF1068:
	.string	"EXPAND_INITIALIZER"
.LASF1761:
	.string	"indirect_string_node"
.LASF1946:
	.string	"int_val"
.LASF2240:
	.string	"gen_variable_die"
.LASF1012:
	.string	"sets"
.LASF1873:
	.string	"sreg"
.LASF1356:
	.string	"DW_OP_const4s"
.LASF774:
	.string	"DINFO_LEVEL_NORMAL"
.LASF1890:
	.string	"par_index"
.LASF1219:
	.string	"DW_TAG_restrict_type"
.LASF313:
	.string	"ADDR_EXPR"
.LASF1492:
	.string	"DW_OP_xderef_size"
.LASF1095:
	.string	"LTI_eqhf2"
.LASF2365:
	.string	"current_function_func_begin_label"
.LASF1958:
	.string	"AT_string_form"
.LASF1993:
	.string	"tmp_a"
.LASF1346:
	.string	"DW_AT_GNU_vector"
.LASF1875:
	.string	"dwarf2out_args_size"
.LASF1120:
	.string	"LTI_ltxf2"
.LASF848:
	.string	"UDIV"
.LASF314:
	.string	"REFERENCE_EXPR"
.LASF417:
	.string	"BUILT_IN_PRINTF_UNLOCKED"
.LASF26:
	.string	"block"
.LASF1168:
	.string	"LTI_MAX"
.LASF1074:
	.string	"LTI_extenddfxf2"
.LASF614:
	.string	"stack_alignment_needed"
.LASF294:
	.string	"NE_EXPR"
.LASF2046:
	.string	"constant_size"
.LASF605:
	.string	"fixup_var_refs_queue"
.LASF2000:
	.string	"parent_die"
.LASF2384:
	.string	"current_function_nothrow"
.LASF2258:
	.string	"gen_struct_or_union_type_die"
.LASF146:
	.string	"CHImode"
.LASF2236:
	.string	"outer_scope"
.LASF2343:
	.string	"debug_info_section_label"
.LASF231:
	.string	"COMPONENT_REF"
.LASF198:
	.string	"INTEGER_TYPE"
.LASF639:
	.string	"uses_pic_offset_table"
.LASF362:
	.string	"BUILT_IN_CIMAGL"
.LASF678:
	.string	"pointer_alias_set"
.LASF2064:
	.string	"dwarf2_name"
.LASF1648:
	.string	"begin_function"
.LASF324:
	.string	"POSTINCREMENT_EXPR"
.LASF917:
	.string	"rtint"
.LASF1280:
	.string	"DW_AT_is_optional"
.LASF2199:
	.string	"local_scope_p"
.LASF249:
	.string	"PLACEHOLDER_EXPR"
.LASF1594:
	.string	"buffer"
.LASF1643:
	.string	"ignore_block"
.LASF1828:
	.string	"dw_line_info_ref"
.LASF1216:
	.string	"DW_TAG_variable"
.LASF2173:
	.string	"dimension_number"
.LASF1785:
	.string	"section"
.LASF2312:
	.string	"next_die_offset"
.LASF164:
	.string	"V2SFmode"
.LASF1377:
	.string	"DW_OP_plus"
.LASF2359:
	.string	"word_mode"
.LASF1905:
	.string	"default_eh_frame_section"
.LASF1715:
	.string	"decode_option"
.LASF694:
	.string	"TI_INTEGER_MINUS_ONE"
.LASF768:
	.string	"XCOFF_DEBUG"
.LASF929:
	.string	"rtunion"
.LASF1870:
	.string	"old_cfa"
.LASF1317:
	.string	"DW_AT_allocated"
.LASF317:
	.string	"COMPLEX_EXPR"
.LASF926:
	.string	"cselib_val_struct"
.LASF2180:
	.string	"highest_order_field_bit_offset"
.LASF1738:
	.string	"dw_fde_struct"
.LASF1529:
	.string	"DW_LNS_negate_stmt"
.LASF1218:
	.string	"DW_TAG_dwarf_procedure"
.LASF1962:
	.string	"AT_ref_external"
.LASF52:
	.string	"ALL_REGS"
.LASF1169:
	.string	"dwarf_tag"
.LASF2263:
	.string	"return_type"
.LASF42:
	.string	"FP_SECOND_REG"
.LASF1800:
	.string	"dw_val_class_str"
.LASF1679:
	.string	"reorder2"
.LASF1102:
	.string	"LTI_eqsf2"
.LASF1499:
	.string	"DW_ATE_void"
.LASF1128:
	.string	"LTI_letf2"
.LASF1026:
	.string	"data"
.LASF1358:
	.string	"DW_OP_const8s"
.LASF994:
	.string	"GR_VIRTUAL_STACK_DYNAMIC"
.LASF1357:
	.string	"DW_OP_const8u"
.LASF709:
	.string	"TI_PTR_TYPE"
.LASF385:
	.string	"BUILT_IN_SIN"
.LASF906:
	.string	"max_after_vec"
.LASF1004:
	.string	"bitmap"
.LASF1562:
	.string	"DW_CFA_def_cfa_sf"
.LASF1964:
	.string	"add_AT_loc"
.LASF1268:
	.string	"DW_AT_member"
.LASF1007:
	.string	"sched_info_tag"
.LASF1608:
	.string	"end_diagnostic"
.LASF1116:
	.string	"LTI_eqxf2"
.LASF96:
	.string	"_chain"
.LASF309:
	.string	"VIEW_CONVERT_EXPR"
.LASF1365:
	.string	"DW_OP_swap"
.LASF2269:
	.string	"must_output_die"
.LASF2148:
	.string	"field_size_tree"
.LASF55:
	.string	"words"
.LASF2115:
	.string	"fp_reg"
.LASF367:
	.string	"BUILT_IN_RINDEX"
.LASF1695:
	.string	"cannot_modify_jumps_p"
.LASF604:
	.string	"x_target_temp_slot_level"
.LASF1:
	.string	"mode"
.LASF1719:
	.string	"expand_constant"
.LASF1282:
	.string	"DW_AT_producer"
.LASF549:
	.string	"pointer_to"
.LASF1113:
	.string	"LTI_ltdf2"
.LASF976:
	.string	"NOTE_INSN_EH_REGION_BEG"
.LASF2161:
	.string	"domain"
.LASF2267:
	.string	"gen_tagged_type_instantiation_die"
.LASF2178:
	.string	"object_offset_in_bytes"
.LASF496:
	.string	"extra_arg"
.LASF927:
	.string	"bitmap_head_def"
.LASF2073:
	.string	"output_ranges"
.LASF1198:
	.string	"DW_TAG_with_stmt"
.LASF1520:
	.string	"DW_INL_declared_not_inlined"
.LASF554:
	.string	"maxval"
.LASF67:
	.string	"overflow_arg_area"
.LASF2108:
	.string	"qualified_type"
.LASF68:
	.string	"reg_save_area"
.LASF2195:
	.string	"pop_decl_scope"
.LASF1079:
	.string	"LTI_truncxfdf2"
.LASF1564:
	.string	"DW_CFA_MIPS_advance_loc8"
.LASF1649:
	.string	"end_function"
.LASF1815:
	.string	"val_float"
.LASF1178:
	.string	"DW_TAG_lexical_block"
.LASF152:
	.string	"V2HImode"
.LASF1455:
	.string	"DW_OP_breg0"
.LASF1456:
	.string	"DW_OP_breg1"
.LASF1457:
	.string	"DW_OP_breg2"
.LASF989:
	.string	"GR_FRAME_POINTER"
.LASF1459:
	.string	"DW_OP_breg4"
.LASF1460:
	.string	"DW_OP_breg5"
.LASF1461:
	.string	"DW_OP_breg6"
.LASF1039:
	.string	"x_first_label_num"
.LASF1463:
	.string	"DW_OP_breg8"
.LASF1464:
	.string	"DW_OP_breg9"
.LASF2185:
	.string	"add_abstract_origin_attribute"
.LASF2190:
	.string	"add_src_coords_attributes"
.LASF828:
	.string	"CONST_INT"
.LASF319:
	.string	"REALPART_EXPR"
.LASF2088:
	.string	"prev_line_label"
.LASF135:
	.string	"SFmode"
.LASF2339:
	.string	"used_rtx_varray"
.LASF807:
	.string	"ATTR_FLAG"
.LASF943:
	.string	"REG_LABEL"
.LASF2077:
	.string	"file_info_cmp"
.LASF2233:
	.string	"label_id"
.LASF1895:
	.string	"section_start_label"
.LASF1016:
	.string	"live_length"
.LASF1613:
	.string	"DK_ERROR"
.LASF1302:
	.string	"DW_AT_external"
.LASF815:
	.string	"PARALLEL"
.LASF2141:
	.string	"field"
.LASF18:
	.string	"real_cst"
.LASF1259:
	.string	"DW_AT_subscr_data"
.LASF1489:
	.string	"DW_OP_bregx"
.LASF1343:
	.string	"DW_AT_src_coords"
.LASF1246:
	.string	"DW_FORM_udata"
.LASF1768:
	.string	"val_class"
.LASF2382:
	.string	"cfun"
.LASF875:
	.string	"TRUNCATE"
.LASF771:
	.string	"debug_info_level"
.LASF10:
	.string	"rtvec"
.LASF672:
	.string	"assembler_name"
.LASF383:
	.string	"BUILT_IN_STRRCHR"
.LASF570:
	.string	"pops_args"
.LASF555:
	.string	"next_variant"
.LASF1196:
	.string	"DW_TAG_set_type"
.LASF2266:
	.string	"need_pop"
.LASF1806:
	.string	"dw_float_const"
.LASF677:
	.string	"vindex"
.LASF713:
	.string	"TI_VOID_LIST_NODE"
.LASF2081:
	.string	"saved"
.LASF819:
	.string	"UNSPEC_VOLATILE"
.LASF755:
	.string	"SIZETYPE"
.LASF176:
	.string	"CCZmode"
.LASF964:
	.string	"NOTE_INSN_BLOCK_BEG"
.LASF2092:
	.string	"line_offset"
.LASF458:
	.string	"bounded_flag"
.LASF742:
	.string	"itk_unsigned_long"
.LASF82:
	.string	"_IO_FILE"
.LASF1779:
	.string	"die_mark"
.LASF1655:
	.string	"asm_int_op"
.LASF588:
	.string	"x_stack_slot_list"
.LASF1060:
	.string	"initial_value_struct"
.LASF1940:
	.string	"AT_class"
.LASF760:
	.string	"UBITSIZETYPE"
.LASF563:
	.string	"off_align"
.LASF2002:
	.string	"lookup_type_die"
.LASF2049:
	.string	"calc_die_sizes"
.LASF599:
	.string	"x_max_parm_reg"
.LASF676:
	.string	"inlined_fns"
.LASF2282:
	.string	"dwarf2out_end_block"
.LASF65:
	.string	"gp_offset"
.LASF474:
	.string	"tree_string"
.LASF1721:
	.string	"staticp"
.LASF416:
	.string	"BUILT_IN_PUTS_UNLOCKED"
.LASF1612:
	.string	"DK_SORRY"
.LASF1837:
	.string	"dw_ranges_struct"
.LASF1205:
	.string	"DW_TAG_file_type"
.LASF1355:
	.string	"DW_OP_const4u"
.LASF1240:
	.string	"DW_FORM_block"
.LASF2063:
	.string	"secname"
.LASF1142:
	.string	"LTI_fixsfsi"
.LASF23:
	.string	"decl"
.LASF645:
	.string	"external_flag"
.LASF123:
	.string	"HImode"
.LASF642:
	.string	"tree_decl"
.LASF322:
	.string	"PREINCREMENT_EXPR"
.LASF1215:
	.string	"DW_TAG_variant_part"
.LASF1899:
	.string	"fde_encoding"
.LASF813:
	.string	"NOTE"
.LASF893:
	.string	"VEC_SELECT"
.LASF34:
	.string	"DIREG"
.LASF1325:
	.string	"DW_AT_trampoline"
.LASF2212:
	.string	"retry_incomplete_types"
.LASF553:
	.string	"minval"
.LASF1747:
	.string	"dw_cfi_offset"
.LASF1989:
	.string	"free_die"
.LASF692:
	.string	"TI_INTEGER_ZERO"
.LASF1144:
	.string	"LTI_fixsfti"
.LASF1230:
	.string	"DW_TAG_GNU_BINCL"
.LASF2213:
	.string	"gen_inlined_enumeration_type_die"
.LASF1296:
	.string	"DW_AT_decl_column"
.LASF1772:
	.string	"die_symbol"
.LASF475:
	.string	"length"
.LASF1794:
	.string	"dw_val_class_float"
.LASF575:
	.string	"args_info"
.LASF724:
	.string	"TI_V4SI_TYPE"
.LASF423:
	.string	"BUILT_IN_ISGREATEREQUAL"
.LASF635:
	.string	"stdarg"
.LASF1553:
	.string	"DW_CFA_register"
.LASF874:
	.string	"ZERO_EXTEND"
.LASF785:
	.string	"MATCH_PARALLEL"
.LASF208:
	.string	"METHOD_TYPE"
.LASF1876:
	.string	"dwarf2out_reg_save"
.LASF2113:
	.string	"int_loc_descriptor"
.LASF2174:
	.string	"lower"
.LASF1245:
	.string	"DW_FORM_strp"
.LASF794:
	.string	"DEFINE_COMBINE"
.LASF2319:
	.string	"abbrev_die_table"
.LASF1972:
	.string	"add_AT_range_list"
.LASF445:
	.string	"constant_flag"
.LASF399:
	.string	"BUILT_IN_RETURN_ADDRESS"
.LASF197:
	.string	"VOID_TYPE"
.LASF1735:
	.string	"dw_cfi_oprnd1"
.LASF1818:
	.string	"val_str"
.LASF2176:
	.string	"add_byte_size_attribute"
.LASF69:
	.string	"unsigned int"
.LASF2317:
	.string	"decl_die_table_allocated"
.LASF1290:
	.string	"DW_AT_address_class"
.LASF970:
	.string	"NOTE_INSN_LOOP_END_TOP_COND"
.LASF1049:
	.string	"expr_status"
.LASF761:
	.string	"TYPE_KIND_LAST"
.LASF339:
	.string	"LAST_AND_UNUSED_TREE_CODE"
.LASF1646:
	.string	"end_prologue"
.LASF347:
	.string	"BUILT_IN_ABS"
.LASF1832:
	.string	"dw_separate_line_info_ref"
.LASF911:
	.string	"addr_diff_vec_flags"
.LASF978:
	.string	"NOTE_INSN_REPEATED_LINE_NUMBER"
	.ident	"GCC: (Ubuntu/Linaro 4.8.1-10ubuntu9) 4.8.1"
	.section	.note.GNU-stack,"",@progbits
