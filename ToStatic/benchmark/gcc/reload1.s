	.file	"reload1.c"
# GNU C (Ubuntu/Linaro 4.8.1-10ubuntu9) version 4.8.1 (x86_64-linux-gnu)
#	compiled by GNU C version 4.8.1, GMP version 5.1.2, MPFR version 3.1.1-p2, MPC version 1.0.1
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed:  -I . -imultiarch x86_64-linux-gnu -D SPEC_CPU -D NDEBUG
# -D SPEC_CPU_LP64 reload1.c -mtune=generic -march=x86-64 -g -fverbose-asm
# -fno-strict-aliasing -fstack-protector -Wformat -Wformat-security
# options enabled:  -faggressive-loop-optimizations
# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg -fcommon
# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
# -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fgnu-runtime
# -fident -finline-atomics -fira-hoist-pressure -fira-share-save-slots
# -fira-share-spill-slots -fivopts -fkeep-static-consts
# -fleading-underscore -fmath-errno -fmerge-debug-strings
# -fmove-loop-invariants -fpeephole -fprefetch-loop-arrays
# -freg-struct-return -fsched-critical-path-heuristic
# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fshow-column
# -fsigned-zeros -fsplit-ivs-in-unroller -fstack-protector
# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
# -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
# -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
# -ftree-parallelize-loops= -ftree-phiprop -ftree-pta -ftree-reassoc
# -ftree-scev-cprop -ftree-slp-vectorize -ftree-vect-loop-version
# -funit-at-a-time -funwind-tables -fverbose-asm -fzero-initialized-in-bss
# -m128bit-long-double -m64 -m80387 -maccumulate-outgoing-args
# -malign-stringops -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc
# -mieee-fp -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse
# -msse2 -mtls-direct-seg-refs

	.text
.Ltext0:
	.local	reg_last_reload_reg
	.comm	reg_last_reload_reg,8,8
	.local	reg_has_output_reload
	.comm	reg_has_output_reload,8,8
	.local	reg_is_output_reload
	.comm	reg_is_output_reload,8,8
	.comm	reg_equiv_constant,8,8
	.comm	reg_equiv_memory_loc,8,8
	.comm	reg_equiv_address,8,8
	.comm	reg_equiv_mem,8,8
	.local	reg_max_ref_width
	.comm	reg_max_ref_width,8,8
	.local	reg_equiv_init
	.comm	reg_equiv_init,8,8
	.local	reg_old_renumber
	.comm	reg_old_renumber,8,8
	.local	reg_reloaded_contents
	.comm	reg_reloaded_contents,212,32
	.local	reg_reloaded_insn
	.comm	reg_reloaded_insn,424,32
	.local	reg_reloaded_valid
	.comm	reg_reloaded_valid,8,8
	.local	reg_reloaded_dead
	.comm	reg_reloaded_dead,8,8
	.local	n_spills
	.comm	n_spills,4,4
	.local	spill_reg_rtx
	.comm	spill_reg_rtx,424,32
	.local	spill_reg_store
	.comm	spill_reg_store,424,32
	.local	spill_reg_stored_to
	.comm	spill_reg_stored_to,424,32
	.local	spill_reg_order
	.comm	spill_reg_order,106,32
	.local	bad_spill_regs
	.comm	bad_spill_regs,8,8
	.local	bad_spill_regs_global
	.comm	bad_spill_regs_global,8,8
	.local	spill_regs
	.comm	spill_regs,106,32
	.local	pseudo_previous_regs
	.comm	pseudo_previous_regs,8,8
	.local	pseudo_forbidden_regs
	.comm	pseudo_forbidden_regs,8,8
	.local	used_spill_regs
	.comm	used_spill_regs,8,8
	.local	last_spill_reg
	.comm	last_spill_reg,4,4
	.local	spill_indirect_levels
	.comm	spill_indirect_levels,1,1
	.comm	indirect_symref_ok,1,1
	.comm	double_reg_address_ok,1,1
	.local	spill_stack_slot
	.comm	spill_stack_slot,424,32
	.local	spill_stack_slot_width
	.comm	spill_stack_slot_width,212,32
	.local	spilled_pseudos
	.comm	spilled_pseudos,24,16
	.local	pseudos_counted
	.comm	pseudos_counted,24,16
	.comm	reload_first_uid,4,4
	.comm	caller_save_needed,4,4
	.globl	reload_in_progress
	.bss
	.align 4
	.type	reload_in_progress, @object
	.size	reload_in_progress, 4
reload_in_progress:
	.zero	4
	.comm	reload_in_optab,236,32
	.comm	reload_out_optab,236,32
	.comm	reload_obstack,88,32
	.comm	reload_startobj,8,8
	.comm	reload_firstobj,8,8
	.local	reload_insn_firstobj
	.comm	reload_insn_firstobj,8,8
	.comm	reload_insn_chain,8,8
	.local	insns_need_reload
	.comm	insns_need_reload,8,8
	.local	reg_eliminate
	.comm	reg_eliminate,8,8
	.section	.rodata
	.align 32
	.type	reg_eliminate_1, @object
	.size	reg_eliminate_1, 32
reg_eliminate_1:
# from:
	.long	16
# to:
	.long	7
# from:
	.long	16
# to:
	.long	6
# from:
	.long	20
# to:
	.long	7
# from:
	.long	20
# to:
	.long	6
	.comm	num_not_at_initial_offset,4,4
	.local	num_eliminable
	.comm	num_eliminable,4,4
	.local	num_eliminable_invariants
	.comm	num_eliminable_invariants,4,4
	.local	offsets_known_at
	.comm	offsets_known_at,8,8
	.local	offsets_at
	.comm	offsets_at,8,8
	.local	num_labels
	.comm	num_labels,4,4
.LC0:
	.string	"foo"
	.text
	.globl	init_reload
	.type	init_reload, @function
init_reload:
.LFB2:
	.file 1 "reload1.c"
	.loc 1 470 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	.loc 1 478 0
	movl	$4, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rbx	#, D.27925
	.loc 1 479 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1
	andl	$33554432, %eax	#, D.27926
	.loc 1 478 0
	testl	%eax, %eax	# D.27926
	je	.L2	#,
	.loc 1 478 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.0
	jmp	.L3	#
.L2:
	.loc 1 478 0 discriminator 2
	movl	$4, %eax	#, iftmp.0
.L3:
	.loc 1 478 0 discriminator 3
	movl	$58, %esi	#,
	movl	%eax, %edi	# iftmp.0,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.27925
	.loc 1 479 0 is_stmt 1 discriminator 3
	movl	target_flags(%rip), %eax	# target_flags, target_flags.3
	andl	$33554432, %eax	#, D.27926
	.loc 1 478 0 discriminator 3
	testl	%eax, %eax	# D.27926
	je	.L4	#,
	.loc 1 478 0 is_stmt 0 discriminator 4
	movl	$5, %eax	#, iftmp.2
	jmp	.L5	#
.L4:
	.loc 1 478 0 discriminator 5
	movl	$4, %eax	#, iftmp.2
.L5:
	.loc 1 478 0 discriminator 6
	movq	%rbx, %rcx	# D.27925,
	movl	%eax, %esi	# iftmp.2,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.27925
	movl	target_flags(%rip), %eax	# target_flags, target_flags.5
	andl	$33554432, %eax	#, D.27926
	testl	%eax, %eax	# D.27926
	je	.L6	#,
	.loc 1 478 0 discriminator 7
	movl	$5, %eax	#, iftmp.4
	jmp	.L7	#
.L6:
	.loc 1 478 0 discriminator 8
	movl	$4, %eax	#, iftmp.4
.L7:
	.loc 1 477 0 is_stmt 1
	movq	%rdx, %rsi	# D.27925,
	movl	%eax, %edi	# iftmp.4,
	call	gen_rtx_MEM	#
	movq	%rax, -56(%rbp)	# tmp133, tem
	.loc 1 483 0
	movb	$0, spill_indirect_levels(%rip)	#, spill_indirect_levels
	.loc 1 485 0
	jmp	.L8	#
.L11:
	.loc 1 487 0
	movzbl	spill_indirect_levels(%rip), %eax	# spill_indirect_levels, spill_indirect_levels.6
	addl	$1, %eax	#, spill_indirect_levels.8
	movb	%al, spill_indirect_levels(%rip)	# spill_indirect_levels.8, spill_indirect_levels
	.loc 1 488 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.10
	andl	$33554432, %eax	#, D.27926
	testl	%eax, %eax	# D.27926
	je	.L9	#,
	.loc 1 488 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.9
	jmp	.L10	#
.L9:
	.loc 1 488 0 discriminator 2
	movl	$4, %eax	#, iftmp.9
.L10:
	.loc 1 488 0 discriminator 3
	movq	-56(%rbp), %rdx	# tem, tmp134
	movq	%rdx, %rsi	# tmp134,
	movl	%eax, %edi	# iftmp.9,
	call	gen_rtx_MEM	#
	movq	%rax, -56(%rbp)	# tmp135, tem
.L8:
	.loc 1 485 0 is_stmt 1 discriminator 1
	movq	-56(%rbp), %rax	# tem, tmp136
	movq	%rax, %rsi	# tmp136,
	movl	$2, %edi	#,
	call	memory_address_p	#
	testl	%eax, %eax	# D.27926
	jne	.L11	#,
	.loc 1 493 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.12
	andl	$33554432, %eax	#, D.27926
	testl	%eax, %eax	# D.27926
	je	.L12	#,
	.loc 1 493 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.11
	jmp	.L13	#
.L12:
	.loc 1 493 0 discriminator 2
	movl	$4, %eax	#, iftmp.11
.L13:
	.loc 1 493 0 discriminator 3
	movl	$.LC0, %edx	#,
	movl	%eax, %esi	# iftmp.11,
	movl	$68, %edi	#,
	call	gen_rtx_fmt_s	#
	movq	%rax, %rdx	#, D.27925
	movl	target_flags(%rip), %eax	# target_flags, target_flags.14
	andl	$33554432, %eax	#, D.27926
	testl	%eax, %eax	# D.27926
	je	.L14	#,
	.loc 1 493 0 discriminator 4
	movl	$5, %eax	#, iftmp.13
	jmp	.L15	#
.L14:
	.loc 1 493 0 discriminator 5
	movl	$4, %eax	#, iftmp.13
.L15:
	.loc 1 493 0 discriminator 6
	movq	%rdx, %rsi	# D.27925,
	movl	%eax, %edi	# iftmp.13,
	call	gen_rtx_MEM	#
	movq	%rax, -56(%rbp)	# tmp137, tem
	.loc 1 494 0 is_stmt 1 discriminator 6
	movq	-56(%rbp), %rax	# tem, tmp138
	movq	%rax, %rsi	# tmp138,
	movl	$2, %edi	#,
	call	memory_address_p	#
	movb	%al, indirect_symref_ok(%rip)	# indirect_symref_ok.15, indirect_symref_ok
	.loc 1 498 0 discriminator 6
	movl	$0, -64(%rbp)	#, i
	jmp	.L16	#
.L25:
	.loc 1 500 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.17
	andl	$33554432, %eax	#, D.27926
	testl	%eax, %eax	# D.27926
	je	.L17	#,
	.loc 1 500 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.16
	jmp	.L18	#
.L17:
	.loc 1 500 0 discriminator 2
	movl	$4, %eax	#, iftmp.16
.L18:
	.loc 1 500 0 discriminator 3
	movl	-64(%rbp), %edx	# i, tmp139
	movl	%edx, %esi	# tmp139,
	movl	%eax, %edi	# iftmp.16,
	call	gen_rtx_REG	#
	movq	%rax, %rbx	#, D.27925
	movl	target_flags(%rip), %eax	# target_flags, target_flags.19
	andl	$33554432, %eax	#, D.27926
	testl	%eax, %eax	# D.27926
	je	.L19	#,
	.loc 1 500 0 discriminator 4
	movl	$5, %eax	#, iftmp.18
	jmp	.L20	#
.L19:
	.loc 1 500 0 discriminator 5
	movl	$4, %eax	#, iftmp.18
.L20:
	.loc 1 500 0 discriminator 6
	movl	$6, %esi	#,
	movl	%eax, %edi	# iftmp.18,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.27925
	movl	target_flags(%rip), %eax	# target_flags, target_flags.21
	andl	$33554432, %eax	#, D.27926
	testl	%eax, %eax	# D.27926
	je	.L21	#,
	.loc 1 500 0 discriminator 7
	movl	$5, %eax	#, iftmp.20
	jmp	.L22	#
.L21:
	.loc 1 500 0 discriminator 8
	movl	$4, %eax	#, iftmp.20
.L22:
	.loc 1 500 0 discriminator 9
	movq	%rbx, %rcx	# D.27925,
	movl	%eax, %esi	# iftmp.20,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -56(%rbp)	# tmp140, tem
	.loc 1 505 0 is_stmt 1 discriminator 9
	movq	-56(%rbp), %rax	# tem, tmp141
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp141,
	call	plus_constant_wide	#
	movq	%rax, -56(%rbp)	# tmp142, tem
	.loc 1 507 0 discriminator 9
	movq	-56(%rbp), %rax	# tem, tmp143
	movq	%rax, %rsi	# tmp143,
	movl	$2, %edi	#,
	call	memory_address_p	#
	testl	%eax, %eax	# D.27926
	je	.L23	#,
	.loc 1 509 0
	movb	$1, double_reg_address_ok(%rip)	#, double_reg_address_ok
	.loc 1 510 0
	jmp	.L24	#
.L23:
	.loc 1 498 0
	addl	$1, -64(%rbp)	#, i
.L16:
	.loc 1 498 0 is_stmt 0 discriminator 1
	cmpl	$52, -64(%rbp)	#, i
	jle	.L25	#,
.L24:
	.loc 1 515 0 is_stmt 1
	movl	$reload_obstack, %edi	#,
	call	gcc_obstack_init	#
.LBB2:
	.loc 1 516 0
	movq	$reload_obstack, -48(%rbp)	#, __h
.LBB3:
	movq	-48(%rbp), %rax	# __h, tmp144
	movq	%rax, -40(%rbp)	# tmp144, __o
	movl	$0, -60(%rbp)	#, __len
	movq	-40(%rbp), %rax	# __o, tmp145
	movq	32(%rax), %rax	# __o_69->chunk_limit, D.27927
	movq	%rax, %rdx	# D.27927, D.27928
	movq	-40(%rbp), %rax	# __o, tmp146
	movq	24(%rax), %rax	# __o_69->next_free, D.27927
	subq	%rax, %rdx	# D.27928, D.27928
	movl	-60(%rbp), %eax	# __len, tmp147
	cltq
	cmpq	%rax, %rdx	# D.27928, D.27928
	jge	.L26	#,
	.loc 1 516 0 is_stmt 0 discriminator 1
	movl	-60(%rbp), %edx	# __len, tmp148
	movq	-40(%rbp), %rax	# __o, tmp149
	movl	%edx, %esi	# tmp148,
	movq	%rax, %rdi	# tmp149,
	call	_obstack_newchunk	#
.L26:
	.loc 1 516 0 discriminator 2
	movq	-40(%rbp), %rax	# __o, tmp150
	movq	24(%rax), %rdx	# __o_69->next_free, D.27927
	movl	-60(%rbp), %eax	# __len, tmp151
	cltq
	addq	%rax, %rdx	# D.27929, D.27927
	movq	-40(%rbp), %rax	# __o, tmp152
	movq	%rdx, 24(%rax)	# D.27927, __o_69->next_free
.LBE3:
.LBB4:
	movq	-48(%rbp), %rax	# __h, tmp153
	movq	%rax, -32(%rbp)	# tmp153, __o1
	movq	-32(%rbp), %rax	# __o1, tmp154
	movq	16(%rax), %rax	# __o1_80->object_base, tmp155
	movq	%rax, -24(%rbp)	# tmp155, value
	movq	-32(%rbp), %rax	# __o1, tmp156
	movq	24(%rax), %rax	# __o1_80->next_free, D.27927
	cmpq	-24(%rbp), %rax	# value, D.27927
	jne	.L27	#,
	.loc 1 516 0 discriminator 1
	movq	-32(%rbp), %rax	# __o1, tmp157
	movzbl	80(%rax), %edx	# __o1_80->maybe_empty_object, tmp160
	orl	$2, %edx	#, tmp161
	movb	%dl, 80(%rax)	# tmp161, __o1_80->maybe_empty_object
.L27:
	.loc 1 516 0 discriminator 2
	movq	-32(%rbp), %rax	# __o1, tmp162
	movq	24(%rax), %rax	# __o1_80->next_free, D.27927
	movq	%rax, %rdx	# D.27927, D.27928
	movq	-32(%rbp), %rax	# __o1, tmp163
	movl	48(%rax), %eax	# __o1_80->alignment_mask, D.27926
	cltq
	addq	%rax, %rdx	# D.27928, D.27928
	movq	-32(%rbp), %rax	# __o1, tmp164
	movl	48(%rax), %eax	# __o1_80->alignment_mask, D.27926
	notl	%eax	# D.27926
	cltq
	andq	%rdx, %rax	# D.27928, D.27928
	movq	%rax, %rdx	# D.27928, D.27927
	movq	-32(%rbp), %rax	# __o1, tmp165
	movq	%rdx, 24(%rax)	# D.27927, __o1_80->next_free
	movq	-32(%rbp), %rax	# __o1, tmp166
	movq	24(%rax), %rax	# __o1_80->next_free, D.27927
	movq	%rax, %rdx	# D.27927, D.27928
	movq	-32(%rbp), %rax	# __o1, tmp167
	movq	8(%rax), %rax	# __o1_80->chunk, D.27930
	movq	%rdx, %rcx	# D.27928, D.27928
	subq	%rax, %rcx	# D.27928, D.27928
	movq	-32(%rbp), %rax	# __o1, tmp168
	movq	32(%rax), %rax	# __o1_80->chunk_limit, D.27927
	movq	%rax, %rdx	# D.27927, D.27928
	movq	-32(%rbp), %rax	# __o1, tmp169
	movq	8(%rax), %rax	# __o1_80->chunk, D.27930
	subq	%rax, %rdx	# D.27928, D.27928
	movq	%rdx, %rax	# D.27928, D.27928
	cmpq	%rax, %rcx	# D.27928, D.27928
	jle	.L28	#,
	.loc 1 516 0 discriminator 1
	movq	-32(%rbp), %rax	# __o1, tmp170
	movq	32(%rax), %rdx	# __o1_80->chunk_limit, D.27927
	movq	-32(%rbp), %rax	# __o1, tmp171
	movq	%rdx, 24(%rax)	# D.27927, __o1_80->next_free
.L28:
	.loc 1 516 0 discriminator 2
	movq	-32(%rbp), %rax	# __o1, tmp172
	movq	24(%rax), %rdx	# __o1_80->next_free, D.27927
	movq	-32(%rbp), %rax	# __o1, tmp173
	movq	%rdx, 16(%rax)	# D.27927, __o1_80->object_base
	movq	-24(%rbp), %rax	# value, D.27931
.LBE4:
.LBE2:
	movq	%rax, reload_startobj(%rip)	# reload_startobj.22, reload_startobj
	.loc 1 518 0 is_stmt 1 discriminator 2
	movl	$spilled_pseudos, %edi	#,
	call	bitmap_initialize	#
	.loc 1 519 0 discriminator 2
	movl	$pseudos_counted, %edi	#,
	call	bitmap_initialize	#
	.loc 1 520 0 discriminator 2
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	init_reload, .-init_reload
	.local	unused_insn_chains
	.comm	unused_insn_chains,8,8
	.globl	new_insn_chain
	.type	new_insn_chain, @function
new_insn_chain:
.LFB3:
	.loc 1 528 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	.loc 1 531 0
	movq	unused_insn_chains(%rip), %rax	# unused_insn_chains, unused_insn_chains.23
	testq	%rax, %rax	# unused_insn_chains.23
	jne	.L30	#,
.LBB5:
	.loc 1 534 0
	movq	$reload_obstack, -32(%rbp)	#, __h
.LBB6:
	movq	-32(%rbp), %rax	# __h, tmp99
	movq	%rax, -24(%rbp)	# tmp99, __o
	movl	$264, -44(%rbp)	#, __len
	movq	-24(%rbp), %rax	# __o, tmp100
	movq	32(%rax), %rax	# __o_4->chunk_limit, D.27933
	movq	%rax, %rdx	# D.27933, D.27934
	movq	-24(%rbp), %rax	# __o, tmp101
	movq	24(%rax), %rax	# __o_4->next_free, D.27933
	subq	%rax, %rdx	# D.27934, D.27934
	movl	-44(%rbp), %eax	# __len, tmp102
	cltq
	cmpq	%rax, %rdx	# D.27934, D.27934
	jge	.L31	#,
	.loc 1 534 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %edx	# __len, tmp103
	movq	-24(%rbp), %rax	# __o, tmp104
	movl	%edx, %esi	# tmp103,
	movq	%rax, %rdi	# tmp104,
	call	_obstack_newchunk	#
.L31:
	.loc 1 534 0 discriminator 2
	movq	-24(%rbp), %rax	# __o, tmp105
	movq	24(%rax), %rdx	# __o_4->next_free, D.27933
	movl	-44(%rbp), %eax	# __len, tmp106
	cltq
	addq	%rax, %rdx	# D.27935, D.27933
	movq	-24(%rbp), %rax	# __o, tmp107
	movq	%rdx, 24(%rax)	# D.27933, __o_4->next_free
.LBE6:
.LBB7:
	movq	-32(%rbp), %rax	# __h, tmp108
	movq	%rax, -16(%rbp)	# tmp108, __o1
	movq	-16(%rbp), %rax	# __o1, tmp109
	movq	16(%rax), %rax	# __o1_15->object_base, tmp110
	movq	%rax, -8(%rbp)	# tmp110, value
	movq	-16(%rbp), %rax	# __o1, tmp111
	movq	24(%rax), %rax	# __o1_15->next_free, D.27933
	cmpq	-8(%rbp), %rax	# value, D.27933
	jne	.L32	#,
	.loc 1 534 0 discriminator 1
	movq	-16(%rbp), %rax	# __o1, tmp112
	movzbl	80(%rax), %edx	# __o1_15->maybe_empty_object, tmp115
	orl	$2, %edx	#, tmp116
	movb	%dl, 80(%rax)	# tmp116, __o1_15->maybe_empty_object
.L32:
	.loc 1 534 0 discriminator 2
	movq	-16(%rbp), %rax	# __o1, tmp117
	movq	24(%rax), %rax	# __o1_15->next_free, D.27933
	movq	%rax, %rdx	# D.27933, D.27934
	movq	-16(%rbp), %rax	# __o1, tmp118
	movl	48(%rax), %eax	# __o1_15->alignment_mask, D.27936
	cltq
	addq	%rax, %rdx	# D.27934, D.27934
	movq	-16(%rbp), %rax	# __o1, tmp119
	movl	48(%rax), %eax	# __o1_15->alignment_mask, D.27936
	notl	%eax	# D.27936
	cltq
	andq	%rdx, %rax	# D.27934, D.27934
	movq	%rax, %rdx	# D.27934, D.27933
	movq	-16(%rbp), %rax	# __o1, tmp120
	movq	%rdx, 24(%rax)	# D.27933, __o1_15->next_free
	movq	-16(%rbp), %rax	# __o1, tmp121
	movq	24(%rax), %rax	# __o1_15->next_free, D.27933
	movq	%rax, %rdx	# D.27933, D.27934
	movq	-16(%rbp), %rax	# __o1, tmp122
	movq	8(%rax), %rax	# __o1_15->chunk, D.27937
	movq	%rdx, %rcx	# D.27934, D.27934
	subq	%rax, %rcx	# D.27934, D.27934
	movq	-16(%rbp), %rax	# __o1, tmp123
	movq	32(%rax), %rax	# __o1_15->chunk_limit, D.27933
	movq	%rax, %rdx	# D.27933, D.27934
	movq	-16(%rbp), %rax	# __o1, tmp124
	movq	8(%rax), %rax	# __o1_15->chunk, D.27937
	subq	%rax, %rdx	# D.27934, D.27934
	movq	%rdx, %rax	# D.27934, D.27934
	cmpq	%rax, %rcx	# D.27934, D.27934
	jle	.L33	#,
	.loc 1 534 0 discriminator 1
	movq	-16(%rbp), %rax	# __o1, tmp125
	movq	32(%rax), %rdx	# __o1_15->chunk_limit, D.27933
	movq	-16(%rbp), %rax	# __o1, tmp126
	movq	%rdx, 24(%rax)	# D.27933, __o1_15->next_free
.L33:
	.loc 1 534 0 discriminator 2
	movq	-16(%rbp), %rax	# __o1, tmp127
	movq	24(%rax), %rdx	# __o1_15->next_free, D.27933
	movq	-16(%rbp), %rax	# __o1, tmp128
	movq	%rdx, 16(%rax)	# D.27933, __o1_15->object_base
	movq	-8(%rbp), %rax	# value, D.27938
.LBE7:
.LBE5:
	.loc 1 533 0 is_stmt 1 discriminator 2
	movq	%rax, -40(%rbp)	# c.24, c
	.loc 1 535 0 discriminator 2
	movq	-40(%rbp), %rax	# c, tmp129
	addq	$40, %rax	#, D.27939
	movq	%rax, %rdi	# D.27939,
	call	bitmap_initialize	#
	.loc 1 536 0 discriminator 2
	movq	-40(%rbp), %rax	# c, tmp130
	addq	$64, %rax	#, D.27939
	movq	%rax, %rdi	# D.27939,
	call	bitmap_initialize	#
	jmp	.L34	#
.L30:
	.loc 1 540 0
	movq	unused_insn_chains(%rip), %rax	# unused_insn_chains, tmp131
	movq	%rax, -40(%rbp)	# tmp131, c
	.loc 1 541 0
	movq	-40(%rbp), %rax	# c, tmp132
	movq	(%rax), %rax	# c_45->next, unused_insn_chains.25
	movq	%rax, unused_insn_chains(%rip)	# unused_insn_chains.25, unused_insn_chains
.L34:
	.loc 1 543 0
	movq	-40(%rbp), %rax	# c, tmp133
	movzbl	262(%rax), %edx	# c_1->is_caller_save_insn, tmp136
	andl	$-9, %edx	#, tmp137
	movb	%dl, 262(%rax)	# tmp137, c_1->is_caller_save_insn
	.loc 1 544 0
	movq	-40(%rbp), %rax	# c, tmp138
	movzbl	262(%rax), %edx	# c_1->need_operand_change, tmp141
	andl	$-3, %edx	#, tmp142
	movb	%dl, 262(%rax)	# tmp142, c_1->need_operand_change
	.loc 1 545 0
	movq	-40(%rbp), %rax	# c, tmp143
	movzbl	262(%rax), %edx	# c_1->need_reload, tmp146
	andl	$-2, %edx	#, tmp147
	movb	%dl, 262(%rax)	# tmp147, c_1->need_reload
	.loc 1 546 0
	movq	-40(%rbp), %rax	# c, tmp148
	movzbl	262(%rax), %edx	# c_1->need_elim, tmp151
	andl	$-5, %edx	#, tmp152
	movb	%dl, 262(%rax)	# tmp152, c_1->need_elim
	.loc 1 547 0
	movq	-40(%rbp), %rax	# c, D.27940
	.loc 1 548 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	new_insn_chain, .-new_insn_chain
	.section	.rodata
.LC1:
	.string	"reload1.c"
	.text
	.globl	compute_use_by_pseudos
	.type	compute_use_by_pseudos, @function
compute_use_by_pseudos:
.LFB4:
	.loc 1 557 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# to, to
	movq	%rsi, -80(%rbp)	# from, from
.LBB8:
	.loc 1 560 0
	movq	-80(%rbp), %rax	# from, tmp144
	movq	(%rax), %rax	# from_21(D)->first, tmp145
	movq	%rax, -40(%rbp)	# tmp145, ptr_
	movl	$0, -52(%rbp)	#, indx_
	movl	$53, -64(%rbp)	#, bit_num_
	movl	$0, -60(%rbp)	#, word_num_
	jmp	.L37	#
.L39:
	.loc 1 560 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# ptr_, tmp146
	movq	(%rax), %rax	# ptr__1->next, tmp147
	movq	%rax, -40(%rbp)	# tmp147, ptr_
.L37:
	cmpq	$0, -40(%rbp)	#, ptr_
	je	.L38	#,
	.loc 1 560 0 discriminator 2
	movq	-40(%rbp), %rax	# ptr_, tmp148
	movl	16(%rax), %eax	# ptr__1->indx, D.27941
	cmpl	-52(%rbp), %eax	# indx_, D.27941
	jb	.L39	#,
.L38:
	.loc 1 560 0 discriminator 3
	cmpq	$0, -40(%rbp)	#, ptr_
	je	.L40	#,
	.loc 1 560 0 discriminator 1
	movq	-40(%rbp), %rax	# ptr_, tmp149
	movl	16(%rax), %eax	# ptr__1->indx, D.27941
	cmpl	-52(%rbp), %eax	# indx_, D.27941
	je	.L40	#,
	movl	$0, -64(%rbp)	#, bit_num_
	movl	$0, -60(%rbp)	#, word_num_
	jmp	.L41	#
.L40:
	.loc 1 560 0 discriminator 2
	jmp	.L41	#
.L73:
	.loc 1 560 0
	jmp	.L42	#
.L72:
.LBB9:
	.loc 1 560 0 discriminator 2
	movq	-40(%rbp), %rax	# ptr_, tmp150
	movl	-60(%rbp), %edx	# word_num_, tmp151
	addq	$2, %rdx	#, tmp152
	movq	8(%rax,%rdx,8), %rax	# ptr__2->bits, tmp153
	movq	%rax, -32(%rbp)	# tmp153, word_
	cmpq	$0, -32(%rbp)	#, word_
	je	.L43	#,
	.loc 1 560 0 discriminator 1
	jmp	.L44	#
.L71:
.LBB10:
	.loc 1 560 0 discriminator 2
	movl	-64(%rbp), %eax	# bit_num_, bit_num_.26
	movl	$1, %edx	#, tmp154
	movl	%eax, %ecx	# bit_num_.26, tmp180
	salq	%cl, %rdx	# tmp180, tmp155
	movq	%rdx, %rax	# tmp155, tmp155
	movq	%rax, -24(%rbp)	# tmp155, mask_
	movq	-24(%rbp), %rax	# mask_, tmp156
	movq	-32(%rbp), %rdx	# word_, tmp157
	andq	%rdx, %rax	# tmp157, D.27942
	testq	%rax, %rax	# D.27942
	je	.L45	#,
	.loc 1 560 0 discriminator 1
	movq	-24(%rbp), %rax	# mask_, tmp158
	notq	%rax	# D.27942
	andq	%rax, -32(%rbp)	# D.27942, word_
	movq	-40(%rbp), %rax	# ptr_, tmp159
	movl	16(%rax), %eax	# ptr__2->indx, D.27941
	leal	(%rax,%rax), %edx	#, D.27941
	movl	-60(%rbp), %eax	# word_num_, tmp160
	addl	%edx, %eax	# D.27941, D.27941
	sall	$6, %eax	#, D.27941
	movl	%eax, %edx	# D.27941, D.27941
	movl	-64(%rbp), %eax	# bit_num_, tmp164
	addl	%edx, %eax	# D.27941, tmp163
	movl	%eax, -48(%rbp)	# tmp163, regno
.LBB11:
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.27
	movl	-48(%rbp), %edx	# regno, D.27942
	addq	%rdx, %rdx	# D.27942
	addq	%rdx, %rax	# D.27942, D.27943
	movzwl	(%rax), %eax	# *_45, D.27944
	cwtl
	movl	%eax, -44(%rbp)	# tmp165, r
	cmpl	$0, -44(%rbp)	#, r
	jns	.L46	#,
	movl	reload_completed(%rip), %eax	# reload_completed, reload_completed.28
	testl	%eax, %eax	# reload_completed.28
	jne	.L47	#,
	movl	$__FUNCTION__.14287, %edx	#,
	movl	$581, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L46:
	.loc 1 560 0 discriminator 2
	cmpl	$7, -44(%rbp)	#, r
	jle	.L48	#,
	.loc 1 560 0 discriminator 1
	cmpl	$15, -44(%rbp)	#, r
	jle	.L49	#,
.L48:
	.loc 1 560 0 discriminator 2
	cmpl	$20, -44(%rbp)	#, r
	jle	.L50	#,
	.loc 1 560 0 discriminator 1
	cmpl	$28, -44(%rbp)	#, r
	jle	.L49	#,
.L50:
	.loc 1 560 0 discriminator 2
	cmpl	$44, -44(%rbp)	#, r
	jle	.L51	#,
	.loc 1 560 0 discriminator 1
	cmpl	$52, -44(%rbp)	#, r
	jle	.L49	#,
.L51:
	.loc 1 560 0 discriminator 2
	cmpl	$28, -44(%rbp)	#, r
	jle	.L52	#,
	.loc 1 560 0 discriminator 1
	cmpl	$36, -44(%rbp)	#, r
	jg	.L52	#,
.L49:
	movq	cfun(%rip), %rax	# cfun, cfun.31
	movq	24(%rax), %rax	# cfun.31_99->emit, D.27945
	movq	80(%rax), %rax	# _100->x_regno_reg_rtx, D.27946
	movl	-48(%rbp), %edx	# regno, D.27942
	salq	$3, %rdx	#, D.27942
	addq	%rdx, %rax	# D.27942, D.27946
	movq	(%rax), %rax	# *_104, D.27947
	movzbl	2(%rax), %eax	# _105->mode, D.27948
	movzbl	%al, %eax	# D.27948, D.27949
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.27950
	cmpl	$5, %eax	#, D.27950
	je	.L53	#,
	.loc 1 560 0 discriminator 2
	movq	cfun(%rip), %rax	# cfun, cfun.32
	movq	24(%rax), %rax	# cfun.32_109->emit, D.27945
	movq	80(%rax), %rax	# _110->x_regno_reg_rtx, D.27946
	movl	-48(%rbp), %edx	# regno, D.27942
	salq	$3, %rdx	#, D.27942
	addq	%rdx, %rax	# D.27942, D.27946
	movq	(%rax), %rax	# *_114, D.27947
	movzbl	2(%rax), %eax	# _115->mode, D.27948
	movzbl	%al, %eax	# D.27948, D.27949
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.27950
	cmpl	$6, %eax	#, D.27950
	jne	.L54	#,
.L53:
	.loc 1 560 0 discriminator 1
	movl	$2, %eax	#, iftmp.30
	jmp	.L55	#
.L54:
	movl	$1, %eax	#, iftmp.30
.L55:
	.loc 1 560 0 discriminator 3
	jmp	.L56	#
.L52:
	.loc 1 560 0 discriminator 2
	movq	cfun(%rip), %rax	# cfun, cfun.34
	movq	24(%rax), %rax	# cfun.34_49->emit, D.27945
	movq	80(%rax), %rax	# _50->x_regno_reg_rtx, D.27946
	movl	-48(%rbp), %edx	# regno, D.27942
	salq	$3, %rdx	#, D.27942
	addq	%rdx, %rax	# D.27942, D.27946
	movq	(%rax), %rax	# *_54, D.27947
	movzbl	2(%rax), %eax	# _55->mode, D.27948
	cmpb	$18, %al	#, D.27948
	jne	.L57	#,
	.loc 1 560 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.36
	andl	$33554432, %eax	#, D.27949
	testl	%eax, %eax	# D.27949
	je	.L58	#,
	movl	$2, %eax	#, iftmp.35
	jmp	.L56	#
.L58:
	.loc 1 560 0 discriminator 2
	movl	$3, %eax	#, iftmp.35
	jmp	.L56	#
.L57:
	movq	cfun(%rip), %rax	# cfun, cfun.38
	movq	24(%rax), %rax	# cfun.38_62->emit, D.27945
	movq	80(%rax), %rax	# _63->x_regno_reg_rtx, D.27946
	movl	-48(%rbp), %edx	# regno, D.27942
	salq	$3, %rdx	#, D.27942
	addq	%rdx, %rax	# D.27942, D.27946
	movq	(%rax), %rax	# *_67, D.27947
	movzbl	2(%rax), %eax	# _68->mode, D.27948
	cmpb	$24, %al	#, D.27948
	jne	.L61	#,
	.loc 1 560 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.40
	andl	$33554432, %eax	#, D.27949
	testl	%eax, %eax	# D.27949
	je	.L62	#,
	movl	$4, %eax	#, iftmp.39
	jmp	.L56	#
.L62:
	.loc 1 560 0 discriminator 2
	movl	$6, %eax	#, iftmp.39
	jmp	.L56	#
.L61:
	movq	cfun(%rip), %rax	# cfun, cfun.41
	movq	24(%rax), %rax	# cfun.41_75->emit, D.27945
	movq	80(%rax), %rax	# _76->x_regno_reg_rtx, D.27946
	movl	-48(%rbp), %edx	# regno, D.27942
	salq	$3, %rdx	#, D.27942
	addq	%rdx, %rax	# D.27942, D.27946
	movq	(%rax), %rax	# *_80, D.27947
	movzbl	2(%rax), %eax	# _81->mode, D.27948
	movzbl	%al, %eax	# D.27948, D.27949
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.27948
	movzbl	%al, %edx	# D.27948, D.27949
	movl	target_flags(%rip), %eax	# target_flags, target_flags.43
	andl	$33554432, %eax	#, D.27949
	testl	%eax, %eax	# D.27949
	je	.L65	#,
	.loc 1 560 0 discriminator 1
	movl	$8, %eax	#, iftmp.42
	jmp	.L66	#
.L65:
	.loc 1 560 0 discriminator 2
	movl	$4, %eax	#, iftmp.42
.L66:
	.loc 1 560 0 discriminator 3
	addl	%edx, %eax	# D.27949, D.27949
	subl	$1, %eax	#, D.27949
	movl	target_flags(%rip), %edx	# target_flags, target_flags.45
	andl	$33554432, %edx	#, D.27949
	testl	%edx, %edx	# D.27949
	je	.L67	#,
	.loc 1 560 0 discriminator 1
	movl	$8, %ebx	#, iftmp.44
	jmp	.L68	#
.L67:
	.loc 1 560 0 discriminator 2
	movl	$4, %ebx	#, iftmp.44
.L68:
	.loc 1 560 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.44
.L56:
	movl	%eax, -56(%rbp)	# iftmp.29, nregs
	jmp	.L69	#
.L70:
	.loc 1 560 0 discriminator 2
	movq	-72(%rbp), %rax	# to, tmp171
	movq	(%rax), %rax	# *to_125(D), D.27942
	movl	-56(%rbp), %edx	# nregs, tmp172
	movl	-44(%rbp), %ecx	# r, tmp173
	addl	%ecx, %edx	# tmp173, D.27949
	movl	$1, %esi	#, tmp174
	movl	%edx, %ecx	# D.27949, tmp184
	salq	%cl, %rsi	# tmp184, D.27942
	movq	%rsi, %rdx	# D.27942, D.27942
	orq	%rax, %rdx	# D.27942, D.27942
	movq	-72(%rbp), %rax	# to, tmp175
	movq	%rdx, (%rax)	# D.27942, *to_125(D)
.L69:
	.loc 1 560 0 discriminator 1
	movl	-56(%rbp), %eax	# nregs, nregs.46
	leal	-1(%rax), %edx	#, tmp176
	movl	%edx, -56(%rbp)	# tmp176, nregs
	testl	%eax, %eax	# nregs.46
	jg	.L70	#,
.L47:
.LBE11:
	.loc 1 560 0 discriminator 3
	cmpq	$0, -32(%rbp)	#, word_
	jne	.L45	#,
	.loc 1 560 0 discriminator 1
	jmp	.L43	#
.L45:
.LBE10:
	.loc 1 560 0 discriminator 2
	addl	$1, -64(%rbp)	#, bit_num_
.L44:
	.loc 1 560 0 discriminator 1
	cmpl	$63, -64(%rbp)	#, bit_num_
	jbe	.L71	#,
.L43:
	.loc 1 560 0 discriminator 2
	movl	$0, -64(%rbp)	#, bit_num_
.LBE9:
	addl	$1, -60(%rbp)	#, word_num_
.L42:
	.loc 1 560 0 discriminator 1
	cmpl	$1, -60(%rbp)	#, word_num_
	jbe	.L72	#,
	.loc 1 560 0 discriminator 3
	movl	$0, -60(%rbp)	#, word_num_
	movq	-40(%rbp), %rax	# ptr_, tmp177
	movq	(%rax), %rax	# ptr__2->next, tmp178
	movq	%rax, -40(%rbp)	# tmp178, ptr_
.L41:
	.loc 1 560 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, ptr_
	jne	.L73	#,
.LBE8:
	.loc 1 582 0 is_stmt 1
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	compute_use_by_pseudos, .-compute_use_by_pseudos
	.type	replace_pseudos_in_call_usage, @function
replace_pseudos_in_call_usage:
.LFB5:
	.loc 1 592 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# loc, loc
	movl	%esi, -44(%rbp)	# mem_mode, mem_mode
	movq	%rdx, -56(%rbp)	# usage, usage
	.loc 1 593 0
	movq	-40(%rbp), %rax	# loc, tmp131
	movq	(%rax), %rax	# *loc_4(D), tmp132
	movq	%rax, -8(%rbp)	# tmp132, x
	.loc 1 598 0
	cmpq	$0, -8(%rbp)	#, x
	jne	.L75	#,
	.loc 1 599 0
	jmp	.L74	#
.L75:
	.loc 1 601 0
	movq	-8(%rbp), %rax	# x, tmp133
	movzwl	(%rax), %eax	# x_5->code, D.27952
	movzwl	%ax, %eax	# D.27952, tmp134
	movl	%eax, -24(%rbp)	# tmp134, code
	.loc 1 602 0
	cmpl	$61, -24(%rbp)	#, code
	jne	.L77	#,
.LBB12:
	.loc 1 604 0
	movq	-8(%rbp), %rax	# x, tmp135
	movl	8(%rax), %eax	# x_5->fld[0].rtuint, tmp136
	movl	%eax, -20(%rbp)	# tmp136, regno
	.loc 1 606 0
	cmpl	$52, -20(%rbp)	#, regno
	ja	.L78	#,
	.loc 1 607 0
	jmp	.L74	#
.L78:
	.loc 1 609 0
	movq	-56(%rbp), %rdx	# usage, tmp137
	movl	-44(%rbp), %ecx	# mem_mode, tmp138
	movq	-8(%rbp), %rax	# x, tmp139
	movl	%ecx, %esi	# tmp138,
	movq	%rax, %rdi	# tmp139,
	call	eliminate_regs	#
	movq	%rax, -8(%rbp)	# tmp140, x
	.loc 1 610 0
	movq	-40(%rbp), %rax	# loc, tmp141
	movq	(%rax), %rax	# *loc_4(D), D.27953
	cmpq	-8(%rbp), %rax	# x, D.27953
	je	.L79	#,
	.loc 1 612 0
	movq	-40(%rbp), %rax	# loc, tmp142
	movq	-8(%rbp), %rdx	# x, tmp143
	movq	%rdx, (%rax)	# tmp143, *loc_4(D)
	.loc 1 613 0
	movq	-56(%rbp), %rdx	# usage, tmp144
	movl	-44(%rbp), %ecx	# mem_mode, tmp145
	movq	-40(%rbp), %rax	# loc, tmp146
	movl	%ecx, %esi	# tmp145,
	movq	%rax, %rdi	# tmp146,
	call	replace_pseudos_in_call_usage	#
	.loc 1 614 0
	jmp	.L74	#
.L79:
	.loc 1 617 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.47
	movl	-20(%rbp), %edx	# regno, D.27954
	salq	$3, %rdx	#, D.27954
	addq	%rdx, %rax	# D.27954, D.27955
	movq	(%rax), %rax	# *_16, D.27953
	testq	%rax, %rax	# D.27953
	je	.L80	#,
	.loc 1 618 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.48
	movl	-20(%rbp), %edx	# regno, D.27954
	salq	$3, %rdx	#, D.27954
	addq	%rdx, %rax	# D.27954, D.27955
	movq	(%rax), %rdx	# *_21, D.27953
	movq	-40(%rbp), %rax	# loc, tmp147
	movq	%rdx, (%rax)	# D.27953, *loc_4(D)
	jmp	.L81	#
.L80:
	.loc 1 619 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.49
	movl	-20(%rbp), %edx	# regno, D.27954
	salq	$3, %rdx	#, D.27954
	addq	%rdx, %rax	# D.27954, D.27955
	movq	(%rax), %rax	# *_26, D.27953
	testq	%rax, %rax	# D.27953
	je	.L82	#,
	.loc 1 620 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.50
	movl	-20(%rbp), %edx	# regno, D.27954
	salq	$3, %rdx	#, D.27954
	addq	%rdx, %rax	# D.27954, D.27955
	movq	(%rax), %rdx	# *_31, D.27953
	movq	-40(%rbp), %rax	# loc, tmp148
	movq	%rdx, (%rax)	# D.27953, *loc_4(D)
	jmp	.L81	#
.L82:
	.loc 1 621 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.51
	movl	-20(%rbp), %edx	# regno, D.27954
	salq	$3, %rdx	#, D.27954
	addq	%rdx, %rax	# D.27954, D.27955
	movq	(%rax), %rax	# *_36, D.27953
	testq	%rax, %rax	# D.27953
	je	.L83	#,
	.loc 1 622 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.52
	movl	-20(%rbp), %edx	# regno, D.27954
	salq	$3, %rdx	#, D.27954
	addq	%rdx, %rax	# D.27954, D.27955
	movq	(%rax), %rdx	# *_41, D.27953
	movq	-8(%rbp), %rax	# x, tmp149
	movzbl	2(%rax), %eax	# x_11->mode, D.27956
	movzbl	%al, %eax	# D.27956, D.27957
	movq	%rdx, %rsi	# D.27953,
	movl	%eax, %edi	# D.27957,
	call	gen_rtx_MEM	#
	movq	-40(%rbp), %rdx	# loc, tmp150
	movq	%rax, (%rdx)	# D.27953, *loc_4(D)
	jmp	.L81	#
.L83:
	.loc 1 623 0
	movq	cfun(%rip), %rax	# cfun, cfun.53
	movq	24(%rax), %rax	# cfun.53_46->emit, D.27958
	movq	80(%rax), %rax	# _47->x_regno_reg_rtx, D.27955
	movl	-20(%rbp), %edx	# regno, D.27954
	salq	$3, %rdx	#, D.27954
	addq	%rdx, %rax	# D.27954, D.27955
	movq	(%rax), %rax	# *_51, D.27953
	movzwl	(%rax), %eax	# _52->code, D.27952
	cmpw	$61, %ax	#, D.27952
	jne	.L84	#,
	.loc 1 624 0
	movq	cfun(%rip), %rax	# cfun, cfun.54
	movq	24(%rax), %rax	# cfun.54_54->emit, D.27958
	movq	80(%rax), %rax	# _55->x_regno_reg_rtx, D.27955
	movl	-20(%rbp), %edx	# regno, D.27954
	salq	$3, %rdx	#, D.27954
	addq	%rdx, %rax	# D.27954, D.27955
	movq	(%rax), %rax	# *_59, D.27953
	movl	8(%rax), %eax	# _60->fld[0].rtuint, D.27959
	cmpl	-20(%rbp), %eax	# regno, D.27959
	je	.L85	#,
.L84:
	.loc 1 625 0
	movq	cfun(%rip), %rax	# cfun, cfun.55
	movq	24(%rax), %rax	# cfun.55_62->emit, D.27958
	movq	80(%rax), %rax	# _63->x_regno_reg_rtx, D.27955
	movl	-20(%rbp), %edx	# regno, D.27954
	salq	$3, %rdx	#, D.27954
	addq	%rdx, %rax	# D.27954, D.27955
	movq	(%rax), %rdx	# *_67, D.27953
	movq	-40(%rbp), %rax	# loc, tmp151
	movq	%rdx, (%rax)	# D.27953, *loc_4(D)
	jmp	.L81	#
.L85:
	.loc 1 627 0
	movl	$__FUNCTION__.14311, %edx	#,
	movl	$627, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L81:
	.loc 1 629 0
	jmp	.L74	#
.L77:
.LBE12:
	.loc 1 631 0
	cmpl	$66, -24(%rbp)	#, code
	jne	.L86	#,
	.loc 1 633 0
	movq	-8(%rbp), %rax	# x, tmp152
	movzbl	2(%rax), %eax	# x_5->mode, D.27956
	movzbl	%al, %eax	# D.27956, D.27957
	movq	-8(%rbp), %rdx	# x, tmp153
	leaq	8(%rdx), %rcx	#, D.27955
	movq	-56(%rbp), %rdx	# usage, tmp154
	movl	%eax, %esi	# D.27957,
	movq	%rcx, %rdi	# D.27955,
	call	replace_pseudos_in_call_usage	#
	.loc 1 634 0
	jmp	.L74	#
.L86:
	.loc 1 638 0
	movl	-24(%rbp), %eax	# code, code.56
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp156
	movq	%rax, -16(%rbp)	# tmp156, fmt
	.loc 1 639 0
	movl	$0, -32(%rbp)	#, i
	jmp	.L87	#
.L92:
	.loc 1 640 0
	movq	-16(%rbp), %rax	# fmt, tmp157
	movzbl	(%rax), %eax	# *fmt_1, D.27961
	cmpb	$101, %al	#, D.27961
	jne	.L88	#,
	.loc 1 641 0
	movl	-32(%rbp), %eax	# i, tmp159
	cltq
	leaq	0(,%rax,8), %rdx	#, tmp160
	movq	-8(%rbp), %rax	# x, tmp162
	addq	%rdx, %rax	# tmp160, tmp161
	leaq	8(%rax), %rcx	#, D.27955
	movq	-56(%rbp), %rdx	# usage, tmp163
	movl	-44(%rbp), %eax	# mem_mode, tmp164
	movl	%eax, %esi	# tmp164,
	movq	%rcx, %rdi	# D.27955,
	call	replace_pseudos_in_call_usage	#
	jmp	.L89	#
.L88:
	.loc 1 642 0
	movq	-16(%rbp), %rax	# fmt, tmp165
	movzbl	(%rax), %eax	# *fmt_1, D.27961
	cmpb	$69, %al	#, D.27961
	jne	.L89	#,
	.loc 1 643 0
	movl	$0, -28(%rbp)	#, j
	jmp	.L90	#
.L91:
	.loc 1 644 0 discriminator 2
	movq	-8(%rbp), %rax	# x, tmp166
	movl	-32(%rbp), %edx	# i, tmp168
	movslq	%edx, %rdx	# tmp168, tmp167
	movq	8(%rax,%rdx,8), %rax	# x_5->fld[i_2].rtvec, D.27962
	movl	-28(%rbp), %edx	# j, tmp170
	movslq	%edx, %rdx	# tmp170, tmp169
	salq	$3, %rdx	#, tmp171
	addq	%rdx, %rax	# tmp171, tmp172
	leaq	8(%rax), %rcx	#, D.27955
	movq	-56(%rbp), %rdx	# usage, tmp173
	movl	-44(%rbp), %eax	# mem_mode, tmp174
	movl	%eax, %esi	# tmp174,
	movq	%rcx, %rdi	# D.27955,
	call	replace_pseudos_in_call_usage	#
	.loc 1 643 0 discriminator 2
	addl	$1, -28(%rbp)	#, j
.L90:
	.loc 1 643 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# x, tmp175
	movl	-32(%rbp), %edx	# i, tmp177
	movslq	%edx, %rdx	# tmp177, tmp176
	movq	8(%rax,%rdx,8), %rax	# x_5->fld[i_2].rtvec, D.27962
	movl	(%rax), %eax	# _82->num_elem, D.27960
	cmpl	-28(%rbp), %eax	# j, D.27960
	jg	.L91	#,
.L89:
	.loc 1 639 0 is_stmt 1
	addl	$1, -32(%rbp)	#, i
	addq	$1, -16(%rbp)	#, fmt
.L87:
	.loc 1 639 0 is_stmt 0 discriminator 1
	movl	-24(%rbp), %eax	# code, code.57
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.27956
	movzbl	%al, %eax	# D.27956, D.27960
	cmpl	-32(%rbp), %eax	# i, D.27960
	jg	.L92	#,
.L74:
	.loc 1 645 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	replace_pseudos_in_call_usage, .-replace_pseudos_in_call_usage
	.local	something_needs_elimination
	.comm	something_needs_elimination,4,4
	.comm	something_needs_operands_changed,4,4
	.local	failure
	.comm	failure,4,4
	.section	.rodata
	.align 8
.LC2:
	.string	"frame size too large for reliable stack checking"
	.align 8
.LC3:
	.string	"try reducing the number of local variables"
	.text
	.globl	reload
	.type	reload, @function
reload:
.LFB6:
	.loc 1 675 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$280, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -280(%rbp)	# first, first
	movl	%esi, -284(%rbp)	# global, global
	.loc 1 682 0
	movq	$0, -192(%rbp)	#, real_known_ptr
	.loc 1 686 0
	call	init_recog	#
	.loc 1 688 0
	movl	$0, failure(%rip)	#, failure
.LBB13:
	.loc 1 690 0
	movq	$reload_obstack, -184(%rbp)	#, __h
.LBB14:
	movq	-184(%rbp), %rax	# __h, tmp639
	movq	%rax, -176(%rbp)	# tmp639, __o
	movl	$0, -256(%rbp)	#, __len
	movq	-176(%rbp), %rax	# __o, tmp640
	movq	32(%rax), %rax	# __o_36->chunk_limit, D.27963
	movq	%rax, %rdx	# D.27963, D.27964
	movq	-176(%rbp), %rax	# __o, tmp641
	movq	24(%rax), %rax	# __o_36->next_free, D.27963
	subq	%rax, %rdx	# D.27964, D.27964
	movl	-256(%rbp), %eax	# __len, tmp642
	cltq
	cmpq	%rax, %rdx	# D.27964, D.27964
	jge	.L94	#,
	.loc 1 690 0 is_stmt 0 discriminator 1
	movl	-256(%rbp), %edx	# __len, tmp643
	movq	-176(%rbp), %rax	# __o, tmp644
	movl	%edx, %esi	# tmp643,
	movq	%rax, %rdi	# tmp644,
	call	_obstack_newchunk	#
.L94:
	.loc 1 690 0 discriminator 2
	movq	-176(%rbp), %rax	# __o, tmp645
	movq	24(%rax), %rdx	# __o_36->next_free, D.27963
	movl	-256(%rbp), %eax	# __len, tmp646
	cltq
	addq	%rax, %rdx	# D.27965, D.27963
	movq	-176(%rbp), %rax	# __o, tmp647
	movq	%rdx, 24(%rax)	# D.27963, __o_36->next_free
.LBE14:
.LBB15:
	movq	-184(%rbp), %rax	# __h, tmp648
	movq	%rax, -168(%rbp)	# tmp648, __o1
	movq	-168(%rbp), %rax	# __o1, tmp649
	movq	16(%rax), %rax	# __o1_47->object_base, tmp650
	movq	%rax, -160(%rbp)	# tmp650, value
	movq	-168(%rbp), %rax	# __o1, tmp651
	movq	24(%rax), %rax	# __o1_47->next_free, D.27963
	cmpq	-160(%rbp), %rax	# value, D.27963
	jne	.L95	#,
	.loc 1 690 0 discriminator 1
	movq	-168(%rbp), %rax	# __o1, tmp652
	movzbl	80(%rax), %edx	# __o1_47->maybe_empty_object, tmp655
	orl	$2, %edx	#, tmp656
	movb	%dl, 80(%rax)	# tmp656, __o1_47->maybe_empty_object
.L95:
	.loc 1 690 0 discriminator 2
	movq	-168(%rbp), %rax	# __o1, tmp657
	movq	24(%rax), %rax	# __o1_47->next_free, D.27963
	movq	%rax, %rdx	# D.27963, D.27964
	movq	-168(%rbp), %rax	# __o1, tmp658
	movl	48(%rax), %eax	# __o1_47->alignment_mask, D.27966
	cltq
	addq	%rax, %rdx	# D.27964, D.27964
	movq	-168(%rbp), %rax	# __o1, tmp659
	movl	48(%rax), %eax	# __o1_47->alignment_mask, D.27966
	notl	%eax	# D.27966
	cltq
	andq	%rdx, %rax	# D.27964, D.27964
	movq	%rax, %rdx	# D.27964, D.27963
	movq	-168(%rbp), %rax	# __o1, tmp660
	movq	%rdx, 24(%rax)	# D.27963, __o1_47->next_free
	movq	-168(%rbp), %rax	# __o1, tmp661
	movq	24(%rax), %rax	# __o1_47->next_free, D.27963
	movq	%rax, %rdx	# D.27963, D.27964
	movq	-168(%rbp), %rax	# __o1, tmp662
	movq	8(%rax), %rax	# __o1_47->chunk, D.27967
	movq	%rdx, %rcx	# D.27964, D.27964
	subq	%rax, %rcx	# D.27964, D.27964
	movq	-168(%rbp), %rax	# __o1, tmp663
	movq	32(%rax), %rax	# __o1_47->chunk_limit, D.27963
	movq	%rax, %rdx	# D.27963, D.27964
	movq	-168(%rbp), %rax	# __o1, tmp664
	movq	8(%rax), %rax	# __o1_47->chunk, D.27967
	subq	%rax, %rdx	# D.27964, D.27964
	movq	%rdx, %rax	# D.27964, D.27964
	cmpq	%rax, %rcx	# D.27964, D.27964
	jle	.L96	#,
	.loc 1 690 0 discriminator 1
	movq	-168(%rbp), %rax	# __o1, tmp665
	movq	32(%rax), %rdx	# __o1_47->chunk_limit, D.27963
	movq	-168(%rbp), %rax	# __o1, tmp666
	movq	%rdx, 24(%rax)	# D.27963, __o1_47->next_free
.L96:
	.loc 1 690 0 discriminator 2
	movq	-168(%rbp), %rax	# __o1, tmp667
	movq	24(%rax), %rdx	# __o1_47->next_free, D.27963
	movq	-168(%rbp), %rax	# __o1, tmp668
	movq	%rdx, 16(%rax)	# D.27963, __o1_47->object_base
	movq	-160(%rbp), %rax	# value, D.27968
.LBE15:
.LBE13:
	movq	%rax, reload_firstobj(%rip)	# reload_firstobj.58, reload_firstobj
	.loc 1 694 0 is_stmt 1 discriminator 2
	movl	$-99, %esi	#,
	movl	$0, %edi	#,
	call	emit_note	#
	.loc 1 697 0 discriminator 2
	call	get_max_uid	#
	movl	%eax, reload_first_uid(%rip)	# reload_first_uid.59, reload_first_uid
	.loc 1 701 0 discriminator 2
	call	clear_secondary_mem	#
	.loc 1 705 0 discriminator 2
	movl	$424, %edx	#,
	movl	$0, %esi	#,
	movl	$spill_stack_slot, %edi	#,
	call	memset	#
	.loc 1 706 0 discriminator 2
	movl	$212, %edx	#,
	movl	$0, %esi	#,
	movl	$spill_stack_slot_width, %edi	#,
	call	memset	#
	.loc 1 710 0 discriminator 2
	call	init_save_areas	#
	.loc 1 716 0 discriminator 2
	movl	$53, -268(%rbp)	#, i
	jmp	.L97	#
.L98:
	.loc 1 717 0 discriminator 2
	movl	-268(%rbp), %eax	# i, tmp669
	movl	%eax, %edi	# tmp669,
	call	mark_home_live	#
	.loc 1 716 0 discriminator 2
	addl	$1, -268(%rbp)	#, i
.L97:
	.loc 1 716 0 is_stmt 0 discriminator 1
	movl	max_regno(%rip), %eax	# max_regno, max_regno.60
	cmpl	%eax, -268(%rbp)	# max_regno.60, i
	jl	.L98	#,
	.loc 1 721 0 is_stmt 1
	movq	cfun(%rip), %rax	# cfun, cfun.61
	movzbl	425(%rax), %eax	# *cfun.61_78, D.27969
	andl	$1, %eax	#, D.27969
	testb	%al, %al	# D.27969
	je	.L99	#,
	.loc 1 722 0
	movl	$0, -268(%rbp)	#, i
	jmp	.L100	#
.L102:
	.loc 1 723 0
	movl	-268(%rbp), %eax	# i, tmp671
	cltq
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.27970
	testb	%al, %al	# D.27970
	jne	.L101	#,
	.loc 1 723 0 is_stmt 0 discriminator 1
	movl	-268(%rbp), %eax	# i, tmp673
	cltq
	movzbl	fixed_regs(%rax), %eax	# fixed_regs, D.27970
	testb	%al, %al	# D.27970
	jne	.L101	#,
	.loc 1 724 0 is_stmt 1
	movl	-268(%rbp), %eax	# i, tmp675
	cltq
	movb	$1, regs_ever_live(%rax)	#, regs_ever_live
.L101:
	.loc 1 722 0
	addl	$1, -268(%rbp)	#, i
.L100:
	.loc 1 722 0 is_stmt 0 discriminator 1
	cmpl	$52, -268(%rbp)	#, i
	jle	.L102	#,
.L99:
	.loc 1 736 0 is_stmt 1
	movl	max_regno(%rip), %eax	# max_regno, max_regno.62
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.27971,
	call	xcalloc	#
	movq	%rax, reg_equiv_constant(%rip)	# reg_equiv_constant.63, reg_equiv_constant
	.loc 1 737 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.64
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.27971,
	call	xcalloc	#
	movq	%rax, reg_equiv_mem(%rip)	# reg_equiv_mem.65, reg_equiv_mem
	.loc 1 738 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.66
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.27971,
	call	xcalloc	#
	movq	%rax, reg_equiv_init(%rip)	# reg_equiv_init.67, reg_equiv_init
	.loc 1 739 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.68
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.27971,
	call	xcalloc	#
	movq	%rax, reg_equiv_address(%rip)	# reg_equiv_address.69, reg_equiv_address
	.loc 1 740 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.70
	cltq
	movl	$4, %esi	#,
	movq	%rax, %rdi	# D.27971,
	call	xcalloc	#
	movq	%rax, reg_max_ref_width(%rip)	# reg_max_ref_width.71, reg_max_ref_width
	.loc 1 741 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.72
	cltq
	movl	$2, %esi	#,
	movq	%rax, %rdi	# D.27971,
	call	xcalloc	#
	movq	%rax, reg_old_renumber(%rip)	# reg_old_renumber.73, reg_old_renumber
	.loc 1 742 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.74
	cltq
	leaq	(%rax,%rax), %rdx	#, D.27971
	movq	reg_renumber(%rip), %rcx	# reg_renumber, reg_renumber.75
	movq	reg_old_renumber(%rip), %rax	# reg_old_renumber, reg_old_renumber.76
	movq	%rcx, %rsi	# reg_renumber.75,
	movq	%rax, %rdi	# reg_old_renumber.76,
	call	memcpy	#
	.loc 1 744 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.77
	cltq
	salq	$3, %rax	#, D.27971
	movq	%rax, %rdi	# D.27971,
	call	xmalloc	#
	movq	%rax, pseudo_forbidden_regs(%rip)	# pseudo_forbidden_regs.78, pseudo_forbidden_regs
	.loc 1 746 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.79
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.27971,
	call	xcalloc	#
	movq	%rax, pseudo_previous_regs(%rip)	# pseudo_previous_regs.80, pseudo_previous_regs
	.loc 1 748 0
	movq	$0, bad_spill_regs_global(%rip)	#, bad_spill_regs_global
	.loc 1 757 0
	movl	$0, num_eliminable_invariants(%rip)	#, num_eliminable_invariants
	.loc 1 758 0
	movq	-280(%rbp), %rax	# first, tmp684
	movq	%rax, -240(%rbp)	# tmp684, insn
	jmp	.L103	#
.L128:
.LBB16:
	.loc 1 760 0
	movq	-240(%rbp), %rax	# insn, tmp685
	movzwl	(%rax), %eax	# insn_12->code, D.27972
	movzwl	%ax, %eax	# D.27972, D.27966
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.27970
	cmpb	$105, %al	#, D.27970
	jne	.L104	#,
	.loc 1 760 0 is_stmt 0 discriminator 1
	movq	-240(%rbp), %rax	# insn, tmp687
	movq	32(%rax), %rax	# insn_12->fld[3].rtx, D.27973
	movzwl	(%rax), %eax	# _120->code, D.27972
	cmpw	$47, %ax	#, D.27972
	jne	.L105	#,
	.loc 1 760 0 discriminator 3
	movq	-240(%rbp), %rax	# insn, tmp688
	movq	32(%rax), %rax	# insn_12->fld[3].rtx, iftmp.82
	jmp	.L107	#
.L105:
	.loc 1 760 0 discriminator 4
	movq	-240(%rbp), %rax	# insn, tmp689
	movq	32(%rax), %rdx	# insn_12->fld[3].rtx, D.27973
	movq	-240(%rbp), %rax	# insn, tmp690
	movq	%rdx, %rsi	# D.27973,
	movq	%rax, %rdi	# tmp690,
	call	single_set_2	#
	jmp	.L107	#
.L104:
	.loc 1 760 0 discriminator 2
	movl	$0, %eax	#, iftmp.81
.L107:
	.loc 1 760 0 discriminator 5
	movq	%rax, -152(%rbp)	# iftmp.81, set
	.loc 1 765 0 is_stmt 1 discriminator 5
	movq	-240(%rbp), %rax	# insn, tmp691
	movzwl	(%rax), %eax	# insn_12->code, D.27972
	movzwl	%ax, %eax	# D.27972, D.27966
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.27970
	cmpb	$105, %al	#, D.27970
	jne	.L108	#,
	.loc 1 765 0 is_stmt 0 discriminator 1
	movq	-240(%rbp), %rax	# insn, tmp693
	movq	32(%rax), %rax	# insn_12->fld[3].rtx, D.27973
	movzwl	(%rax), %eax	# _131->code, D.27972
	cmpw	$48, %ax	#, D.27972
	jne	.L108	#,
	.loc 1 766 0 is_stmt 1
	movq	-240(%rbp), %rax	# insn, tmp694
	movzbl	2(%rax), %eax	# insn_12->mode, D.27969
	testb	%al, %al	# D.27969
	je	.L108	#,
	.loc 1 767 0
	movq	-240(%rbp), %rax	# insn, tmp695
	movb	$0, 2(%rax)	#, insn_12->mode
.L108:
	.loc 1 769 0
	movq	-240(%rbp), %rax	# insn, tmp696
	movzwl	(%rax), %eax	# insn_12->code, D.27972
	cmpw	$34, %ax	#, D.27972
	jne	.L109	#,
	.loc 1 770 0
	movq	-240(%rbp), %rax	# insn, tmp697
	movl	$0, %edx	#,
	movl	$28, %esi	#,
	movq	%rax, %rdi	# tmp697,
	call	find_reg_note	#
	testq	%rax, %rax	# D.27973
	je	.L109	#,
	.loc 1 771 0
	movl	$0, -268(%rbp)	#, i
	jmp	.L110	#
.L112:
	.loc 1 772 0
	movl	-268(%rbp), %eax	# i, tmp699
	cltq
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.27970
	testb	%al, %al	# D.27970
	jne	.L111	#,
	.loc 1 773 0
	movl	-268(%rbp), %eax	# i, tmp701
	cltq
	movb	$1, regs_ever_live(%rax)	#, regs_ever_live
.L111:
	.loc 1 771 0
	addl	$1, -268(%rbp)	#, i
.L110:
	.loc 1 771 0 is_stmt 0 discriminator 1
	cmpl	$52, -268(%rbp)	#, i
	jle	.L112	#,
.L109:
	.loc 1 775 0 is_stmt 1
	cmpq	$0, -152(%rbp)	#, set
	je	.L113	#,
	.loc 1 775 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# set, tmp702
	movq	8(%rax), %rax	# set_127->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _139->code, D.27972
	cmpw	$61, %ax	#, D.27972
	jne	.L113	#,
.LBB17:
	.loc 1 777 0 is_stmt 1
	movq	-240(%rbp), %rax	# insn, tmp703
	movl	$0, %edx	#,
	movl	$3, %esi	#,
	movq	%rax, %rdi	# tmp703,
	call	find_reg_note	#
	movq	%rax, -144(%rbp)	# tmp704, note
	.loc 1 778 0
	cmpq	$0, -144(%rbp)	#, note
	je	.L114	#,
	.loc 1 780 0
	movq	-144(%rbp), %rax	# note, tmp705
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movq	%rax, %rdi	# D.27973,
	call	function_invariant_p	#
	testl	%eax, %eax	# D.27966
	je	.L115	#,
	.loc 1 781 0
	movl	flag_pic(%rip), %eax	# flag_pic, flag_pic.83
	testl	%eax, %eax	# flag_pic.83
	je	.L115	#,
	.loc 1 785 0
	movq	-144(%rbp), %rax	# note, tmp706
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _145->code, D.27972
	cmpw	$67, %ax	#, D.27972
	je	.L116	#,
	.loc 1 785 0 is_stmt 0 discriminator 1
	movq	-144(%rbp), %rax	# note, tmp707
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _147->code, D.27972
	cmpw	$68, %ax	#, D.27972
	je	.L116	#,
	movq	-144(%rbp), %rax	# note, tmp708
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _149->code, D.27972
	cmpw	$54, %ax	#, D.27972
	je	.L116	#,
	movq	-144(%rbp), %rax	# note, tmp709
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _151->code, D.27972
	cmpw	$55, %ax	#, D.27972
	je	.L116	#,
	movq	-144(%rbp), %rax	# note, tmp710
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _153->code, D.27972
	cmpw	$58, %ax	#, D.27972
	je	.L116	#,
	movq	-144(%rbp), %rax	# note, tmp711
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _155->code, D.27972
	cmpw	$134, %ax	#, D.27972
	je	.L116	#,
	movq	-144(%rbp), %rax	# note, tmp712
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _157->code, D.27972
	cmpw	$56, %ax	#, D.27972
	je	.L116	#,
	movq	-144(%rbp), %rax	# note, tmp713
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _159->code, D.27972
	cmpw	$140, %ax	#, D.27972
	jne	.L114	#,
.L116:
	.loc 1 786 0 is_stmt 1
	movq	-144(%rbp), %rax	# note, tmp714
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _161->code, D.27972
	cmpw	$68, %ax	#, D.27972
	je	.L117	#,
	.loc 1 786 0 is_stmt 0 discriminator 1
	movq	-144(%rbp), %rax	# note, tmp715
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _163->code, D.27972
	cmpw	$67, %ax	#, D.27972
	je	.L117	#,
	movq	-144(%rbp), %rax	# note, tmp716
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _165->code, D.27972
	cmpw	$58, %ax	#, D.27972
	jne	.L115	#,
	movq	-144(%rbp), %rax	# note, tmp717
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movq	%rax, %rdi	# D.27973,
	call	symbolic_reference_mentioned_p	#
	testl	%eax, %eax	# D.27966
	je	.L115	#,
.L117:
	.loc 1 786 0 discriminator 2
	movq	-144(%rbp), %rax	# note, tmp718
	movq	8(%rax), %rax	# note_141->fld[0].rtx, D.27973
	movq	%rax, %rdi	# D.27973,
	call	legitimate_pic_address_disp_p	#
	testl	%eax, %eax	# D.27966
	je	.L114	#,
.L115:
.LBB18:
	.loc 1 790 0 is_stmt 1
	movq	-144(%rbp), %rax	# note, tmp719
	movq	8(%rax), %rax	# note_141->fld[0].rtx, tmp720
	movq	%rax, -136(%rbp)	# tmp720, x
	.loc 1 791 0
	movq	-152(%rbp), %rax	# set, tmp721
	movq	8(%rax), %rax	# set_127->fld[0].rtx, D.27973
	movl	8(%rax), %eax	# _172->fld[0].rtuint, D.27974
	movl	%eax, -268(%rbp)	# D.27974, i
	.loc 1 792 0
	cmpl	$57, -268(%rbp)	#, i
	jle	.L114	#,
	.loc 1 799 0
	movq	-136(%rbp), %rax	# x, tmp722
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp722,
	call	memory_operand	#
	testl	%eax, %eax	# D.27966
	je	.L118	#,
	.loc 1 804 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.84
	movl	-268(%rbp), %edx	# i, tmp723
	movslq	%edx, %rdx	# tmp723, D.27971
	salq	$3, %rdx	#, D.27971
	leaq	(%rax,%rdx), %rbx	#, D.27975
	movq	-136(%rbp), %rax	# x, tmp724
	movq	%rax, %rdi	# tmp724,
	call	copy_rtx	#
	movq	%rax, (%rbx)	# D.27973, *_179
	jmp	.L119	#
.L118:
	.loc 1 806 0
	movq	-136(%rbp), %rax	# x, tmp725
	movq	%rax, %rdi	# tmp725,
	call	function_invariant_p	#
	testl	%eax, %eax	# D.27966
	je	.L120	#,
	.loc 1 808 0
	movq	-136(%rbp), %rax	# x, tmp726
	movzwl	(%rax), %eax	# x_171->code, D.27972
	cmpw	$75, %ax	#, D.27972
	jne	.L121	#,
	.loc 1 812 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.85
	movl	-268(%rbp), %edx	# i, tmp727
	movslq	%edx, %rdx	# tmp727, D.27971
	salq	$3, %rdx	#, D.27971
	leaq	(%rax,%rdx), %rbx	#, D.27975
	movq	-136(%rbp), %rax	# x, tmp728
	movq	%rax, %rdi	# tmp728,
	call	copy_rtx	#
	movq	%rax, (%rbx)	# D.27973, *_186
	.loc 1 813 0
	movl	num_eliminable_invariants(%rip), %eax	# num_eliminable_invariants, num_eliminable_invariants.86
	addl	$1, %eax	#, num_eliminable_invariants.87
	movl	%eax, num_eliminable_invariants(%rip)	# num_eliminable_invariants.87, num_eliminable_invariants
	jmp	.L119	#
.L121:
	.loc 1 815 0
	movq	global_rtl+24(%rip), %rax	# global_rtl, D.27973
	cmpq	-136(%rbp), %rax	# x, D.27973
	je	.L123	#,
	.loc 1 816 0
	movq	global_rtl+40(%rip), %rax	# global_rtl, D.27973
	cmpq	-136(%rbp), %rax	# x, D.27973
	jne	.L124	#,
.L123:
	.loc 1 818 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.88
	movl	-268(%rbp), %edx	# i, tmp729
	movslq	%edx, %rdx	# tmp729, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rax, %rdx	# reg_equiv_constant.88, D.27975
	movq	-136(%rbp), %rax	# x, tmp730
	movq	%rax, (%rdx)	# tmp730, *_199
	.loc 1 819 0
	movl	num_eliminable_invariants(%rip), %eax	# num_eliminable_invariants, num_eliminable_invariants.89
	addl	$1, %eax	#, num_eliminable_invariants.90
	movl	%eax, num_eliminable_invariants(%rip)	# num_eliminable_invariants.90, num_eliminable_invariants
	jmp	.L119	#
.L124:
	.loc 1 822 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.91
	movl	-268(%rbp), %edx	# i, tmp731
	movslq	%edx, %rdx	# tmp731, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rax, %rdx	# reg_equiv_constant.91, D.27975
	movq	-136(%rbp), %rax	# x, tmp732
	movq	%rax, (%rdx)	# tmp732, *_195
	jmp	.L119	#
.L120:
	.loc 1 828 0
	jmp	.L125	#
.L119:
	.loc 1 834 0
	movq	-136(%rbp), %rax	# x, tmp733
	movzwl	(%rax), %eax	# x_171->code, D.27972
	cmpw	$66, %ax	#, D.27972
	jne	.L126	#,
	.loc 1 835 0
	movq	-152(%rbp), %rax	# set, tmp734
	movq	16(%rax), %rax	# set_127->fld[1].rtx, D.27973
	movq	-136(%rbp), %rdx	# x, tmp735
	movq	%rdx, %rsi	# tmp735,
	movq	%rax, %rdi	# D.27973,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.27966
	je	.L114	#,
.L126:
	.loc 1 836 0
	movq	reg_equiv_init(%rip), %rax	# reg_equiv_init, reg_equiv_init.93
	movl	-268(%rbp), %edx	# i, tmp736
	movslq	%edx, %rdx	# tmp736, D.27971
	salq	$3, %rdx	#, D.27971
	leaq	(%rax,%rdx), %rbx	#, D.27975
	.loc 1 837 0
	movq	reg_equiv_init(%rip), %rax	# reg_equiv_init, reg_equiv_init.94
	movl	-268(%rbp), %edx	# i, tmp737
	movslq	%edx, %rdx	# tmp737, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rdx	# *_212, D.27973
	movq	-240(%rbp), %rax	# insn, tmp738
	movq	%rdx, %rcx	# D.27973,
	movq	%rax, %rdx	# tmp738,
	movl	$0, %esi	#,
	movl	$4, %edi	#,
	call	gen_rtx_fmt_ue	#
	movq	%rax, (%rbx)	# D.27973, *_208
.LBE18:
.LBE17:
	.loc 1 776 0
	jmp	.L127	#
.L114:
	jmp	.L127	#
.L113:
	.loc 1 844 0
	cmpq	$0, -152(%rbp)	#, set
	je	.L127	#,
	.loc 1 844 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# set, tmp739
	movq	8(%rax), %rax	# set_127->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _215->code, D.27972
	cmpw	$66, %ax	#, D.27972
	jne	.L127	#,
	.loc 1 845 0 is_stmt 1
	movq	-152(%rbp), %rax	# set, tmp740
	movq	16(%rax), %rax	# set_127->fld[1].rtx, D.27973
	movzwl	(%rax), %eax	# _217->code, D.27972
	cmpw	$61, %ax	#, D.27972
	jne	.L127	#,
	.loc 1 846 0
	movq	reg_equiv_memory_loc(%rip), %rdx	# reg_equiv_memory_loc, reg_equiv_memory_loc.95
	movq	-152(%rbp), %rax	# set, tmp741
	movq	16(%rax), %rax	# set_127->fld[1].rtx, D.27973
	movl	8(%rax), %eax	# _220->fld[0].rtuint, D.27974
	movl	%eax, %eax	# D.27974, D.27971
	salq	$3, %rax	#, D.27971
	addq	%rdx, %rax	# reg_equiv_memory_loc.95, D.27975
	movq	(%rax), %rax	# *_224, D.27973
	testq	%rax, %rax	# D.27973
	je	.L127	#,
	.loc 1 848 0
	movq	reg_equiv_memory_loc(%rip), %rdx	# reg_equiv_memory_loc, reg_equiv_memory_loc.96
	movq	-152(%rbp), %rax	# set, tmp742
	movq	16(%rax), %rax	# set_127->fld[1].rtx, D.27973
	movl	8(%rax), %eax	# _227->fld[0].rtuint, D.27974
	movl	%eax, %eax	# D.27974, D.27971
	salq	$3, %rax	#, D.27971
	addq	%rdx, %rax	# reg_equiv_memory_loc.96, D.27975
	.loc 1 847 0
	movq	(%rax), %rdx	# *_231, D.27973
	movq	-152(%rbp), %rax	# set, tmp743
	movq	8(%rax), %rax	# set_127->fld[0].rtx, D.27973
	movq	%rdx, %rsi	# D.27973,
	movq	%rax, %rdi	# D.27973,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.27966
	je	.L127	#,
	.loc 1 849 0
	movq	reg_equiv_init(%rip), %rdx	# reg_equiv_init, reg_equiv_init.97
	movq	-152(%rbp), %rax	# set, tmp744
	movq	16(%rax), %rax	# set_127->fld[1].rtx, D.27973
	movl	8(%rax), %eax	# _236->fld[0].rtuint, D.27974
	movl	%eax, %eax	# D.27974, D.27971
	salq	$3, %rax	#, D.27971
	leaq	(%rdx,%rax), %rbx	#, D.27975
	.loc 1 850 0
	movq	reg_equiv_init(%rip), %rdx	# reg_equiv_init, reg_equiv_init.98
	movq	-152(%rbp), %rax	# set, tmp745
	movq	16(%rax), %rax	# set_127->fld[1].rtx, D.27973
	movl	8(%rax), %eax	# _242->fld[0].rtuint, D.27974
	movl	%eax, %eax	# D.27974, D.27971
	salq	$3, %rax	#, D.27971
	addq	%rdx, %rax	# reg_equiv_init.98, D.27975
	movq	(%rax), %rdx	# *_246, D.27973
	movq	-240(%rbp), %rax	# insn, tmp746
	movq	%rdx, %rcx	# D.27973,
	movq	%rax, %rdx	# tmp746,
	movl	$0, %esi	#,
	movl	$4, %edi	#,
	call	gen_rtx_fmt_ue	#
	movq	%rax, (%rbx)	# D.27973, *_240
.L127:
	.loc 1 853 0
	movq	-240(%rbp), %rax	# insn, tmp747
	movzwl	(%rax), %eax	# insn_12->code, D.27972
	movzwl	%ax, %eax	# D.27972, D.27966
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.27970
	cmpb	$105, %al	#, D.27970
	jne	.L125	#,
	.loc 1 854 0
	movq	-240(%rbp), %rax	# insn, tmp749
	movq	32(%rax), %rax	# insn_12->fld[3].rtx, D.27973
	movq	%rax, %rdi	# D.27973,
	call	scan_paradoxical_subregs	#
.L125:
.LBE16:
	.loc 1 758 0
	movq	-240(%rbp), %rax	# insn, tmp750
	movq	24(%rax), %rax	# insn_12->fld[2].rtx, tmp751
	movq	%rax, -240(%rbp)	# tmp751, insn
.L103:
	.loc 1 758 0 is_stmt 0 discriminator 1
	cmpq	$0, -240(%rbp)	#, insn
	jne	.L128	#,
	.loc 1 857 0 is_stmt 1
	call	init_elim_table	#
	.loc 1 859 0
	call	max_label_num	#
	movl	%eax, %ebx	#, D.27966
	call	get_first_label_num	#
	subl	%eax, %ebx	# D.27966, num_labels.99
	movl	%ebx, %eax	# num_labels.99, num_labels.99
	movl	%eax, num_labels(%rip)	# num_labels.99, num_labels
	.loc 1 865 0
	movl	num_labels(%rip), %eax	# num_labels, num_labels.100
	cltq
	movq	%rax, %rdi	# D.27971,
	call	xmalloc	#
	movq	%rax, -192(%rbp)	# tmp752, real_known_ptr
	.loc 1 868 0
	movl	num_labels(%rip), %eax	# num_labels, num_labels.101
	cltq
	salq	$4, %rax	#, D.27971
	.loc 1 867 0
	movq	%rax, %rdi	# D.27971,
	call	xmalloc	#
	movq	%rax, -128(%rbp)	# tmp753, real_at_ptr
	.loc 1 870 0
	call	get_first_label_num	#
	cltq
	negq	%rax	# D.27965
	movq	%rax, %rdx	# D.27965, D.27965
	movq	-192(%rbp), %rax	# real_known_ptr, tmp754
	addq	%rdx, %rax	# D.27965, offsets_known_at.102
	movq	%rax, offsets_known_at(%rip)	# offsets_known_at.102, offsets_known_at
	.loc 1 872 0
	call	get_first_label_num	#
	cltq
	salq	$4, %rax	#, D.27971
	negq	%rax	# D.27965
	movq	%rax, %rdx	# D.27965, D.27965
	movq	-128(%rbp), %rax	# real_at_ptr, tmp755
	addq	%rdx, %rax	# D.27965, offsets_at.103
	movq	%rax, offsets_at(%rip)	# offsets_at.103, offsets_at
	.loc 1 878 0
	movl	$58, -268(%rbp)	#, i
	jmp	.L129	#
.L130:
	.loc 1 879 0 discriminator 2
	movl	-268(%rbp), %eax	# i, tmp756
	movl	$-1, %esi	#,
	movl	%eax, %edi	# tmp756,
	call	alter_reg	#
	.loc 1 878 0 discriminator 2
	addl	$1, -268(%rbp)	#, i
.L129:
	.loc 1 878 0 is_stmt 0 discriminator 1
	movl	max_regno(%rip), %eax	# max_regno, max_regno.104
	cmpl	%eax, -268(%rbp)	# max_regno.104, i
	jl	.L130	#,
	.loc 1 887 0 is_stmt 1
	movq	-280(%rbp), %rax	# first, tmp757
	movq	%rax, -240(%rbp)	# tmp757, insn
	jmp	.L131	#
.L135:
	.loc 1 888 0
	movq	-240(%rbp), %rax	# insn, tmp758
	movzwl	(%rax), %eax	# insn_13->code, D.27972
	cmpw	$32, %ax	#, D.27972
	je	.L132	#,
	.loc 1 888 0 is_stmt 0 discriminator 1
	movq	-240(%rbp), %rax	# insn, tmp759
	movzwl	(%rax), %eax	# insn_13->code, D.27972
	cmpw	$33, %ax	#, D.27972
	je	.L132	#,
	.loc 1 889 0 is_stmt 1
	movq	-240(%rbp), %rax	# insn, tmp760
	movzwl	(%rax), %eax	# insn_13->code, D.27972
	cmpw	$34, %ax	#, D.27972
	jne	.L133	#,
.L132:
	.loc 1 890 0
	movq	-240(%rbp), %rax	# insn, tmp761
	movq	32(%rax), %rax	# insn_13->fld[3].rtx, D.27973
	movl	$0, %edx	#,
	movl	$mark_not_eliminable, %esi	#,
	movq	%rax, %rdi	# D.27973,
	call	note_stores	#
.L133:
	.loc 1 887 0
	movq	-240(%rbp), %rax	# insn, tmp762
	movq	24(%rax), %rax	# insn_13->fld[2].rtx, tmp763
	movq	%rax, -240(%rbp)	# tmp763, insn
.L131:
	.loc 1 887 0 is_stmt 0 discriminator 1
	cmpq	$0, -240(%rbp)	#, insn
	je	.L134	#,
	.loc 1 887 0 discriminator 2
	movl	num_eliminable(%rip), %eax	# num_eliminable, num_eliminable.105
	testl	%eax, %eax	# num_eliminable.105
	jne	.L135	#,
.L134:
	.loc 1 892 0 is_stmt 1
	call	maybe_fix_stack_asms	#
	.loc 1 894 0
	movq	$0, insns_need_reload(%rip)	#, insns_need_reload
	.loc 1 895 0
	movl	$0, something_needs_elimination(%rip)	#, something_needs_elimination
	.loc 1 898 0
	movl	$-1, last_spill_reg(%rip)	#, last_spill_reg
	.loc 1 901 0
	movq	$0, used_spill_regs(%rip)	#, used_spill_regs
	.loc 1 902 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp764
	movq	%rax, -232(%rbp)	# tmp764, ep
	jmp	.L136	#
.L138:
	.loc 1 903 0
	movq	-232(%rbp), %rax	# ep, tmp765
	movl	12(%rax), %eax	# ep_15->can_eliminate, D.27966
	testl	%eax, %eax	# D.27966
	jne	.L137	#,
	.loc 1 904 0
	movq	-232(%rbp), %rax	# ep, tmp766
	movl	(%rax), %eax	# ep_15->from, D.27966
	movl	$1, %esi	#,
	movl	%eax, %edi	# D.27974,
	call	spill_hard_reg	#
.L137:
	.loc 1 902 0
	addq	$48, -232(%rbp)	#, ep
.L136:
	.loc 1 902 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.106
	addq	$192, %rax	#, D.27976
	cmpq	-232(%rbp), %rax	# ep, D.27976
	ja	.L138	#,
	.loc 1 907 0 is_stmt 1
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.107
	testl	%eax, %eax	# frame_pointer_needed.107
	je	.L139	#,
	.loc 1 908 0
	movl	$1, %esi	#,
	movl	$6, %edi	#,
	call	spill_hard_reg	#
.L139:
	.loc 1 910 0
	movl	-284(%rbp), %eax	# global, tmp767
	movl	%eax, %edi	# tmp767,
	call	finish_spills	#
	.loc 1 915 0
	movl	$1, reload_in_progress(%rip)	#, reload_in_progress
.L167:
.LBB19:
	.loc 1 930 0
	movq	cfun(%rip), %rax	# cfun, cfun.108
	movl	400(%rax), %eax	# cfun.108_292->stack_alignment_needed, D.27966
	testl	%eax, %eax	# D.27966
	je	.L140	#,
	.loc 1 931 0
	movq	cfun(%rip), %rax	# cfun, cfun.109
	movl	400(%rax), %eax	# cfun.109_294->stack_alignment_needed, D.27966
	movl	%eax, %edx	# D.27966,
	movl	$0, %esi	#,
	movl	$51, %edi	#,
	call	assign_stack_local	#
.L140:
	.loc 1 933 0
	call	get_frame_size	#
	movq	%rax, -120(%rbp)	# tmp768, starting_frame_size
	.loc 1 935 0
	call	set_initial_elim_offsets	#
	.loc 1 936 0
	call	set_initial_label_offsets	#
	.loc 1 962 0
	movl	$53, -268(%rbp)	#, i
	jmp	.L141	#
.L147:
	.loc 1 963 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.110
	movl	-268(%rbp), %edx	# i, tmp769
	movslq	%edx, %rdx	# tmp769, D.27971
	addq	%rdx, %rdx	# D.27971
	addq	%rdx, %rax	# D.27971, D.27977
	movzwl	(%rax), %eax	# *_302, D.27978
	testw	%ax, %ax	# D.27978
	jns	.L142	#,
	.loc 1 963 0 is_stmt 0 discriminator 1
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.111
	movl	-268(%rbp), %edx	# i, tmp770
	movslq	%edx, %rdx	# tmp770, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_307, D.27973
	testq	%rax, %rax	# D.27973
	je	.L142	#,
.LBB20:
	.loc 1 965 0 is_stmt 1
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.112
	movl	-268(%rbp), %edx	# i, tmp771
	movslq	%edx, %rdx	# tmp771, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_312, D.27973
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.27973,
	call	eliminate_regs	#
	movq	%rax, -112(%rbp)	# tmp772, x
	.loc 1 967 0
	movq	-112(%rbp), %rax	# x, tmp773
	movq	8(%rax), %rdx	# x_314->fld[0].rtx, D.27973
	movq	cfun(%rip), %rax	# cfun, cfun.113
	movq	24(%rax), %rax	# cfun.113_316->emit, D.27979
	movq	80(%rax), %rax	# _317->x_regno_reg_rtx, D.27975
	movl	-268(%rbp), %ecx	# i, tmp774
	movslq	%ecx, %rcx	# tmp774, D.27971
	salq	$3, %rcx	#, D.27971
	addq	%rcx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_321, D.27973
	movzbl	2(%rax), %eax	# _322->mode, D.27969
	movzbl	%al, %eax	# D.27969, D.27980
	movq	%rdx, %rsi	# D.27973,
	movl	%eax, %edi	# D.27980,
	call	strict_memory_address_p	#
	testl	%eax, %eax	# D.27966
	je	.L143	#,
	.loc 1 969 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.114
	movl	-268(%rbp), %edx	# i, tmp775
	movslq	%edx, %rdx	# tmp775, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rax, %rdx	# reg_equiv_mem.114, D.27975
	movq	-112(%rbp), %rax	# x, tmp776
	movq	%rax, (%rdx)	# tmp776, *_329
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.115
	movl	-268(%rbp), %edx	# i, tmp777
	movslq	%edx, %rdx	# tmp777, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	$0, (%rax)	#, *_333
	jmp	.L142	#
.L143:
	.loc 1 970 0
	movq	-112(%rbp), %rax	# x, tmp778
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _334->code, D.27972
	cmpw	$67, %ax	#, D.27972
	je	.L144	#,
	.loc 1 970 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# x, tmp779
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _336->code, D.27972
	cmpw	$68, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp780
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _338->code, D.27972
	cmpw	$54, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp781
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _340->code, D.27972
	cmpw	$55, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp782
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _342->code, D.27972
	cmpw	$58, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp783
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _344->code, D.27972
	cmpw	$134, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp784
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _346->code, D.27972
	cmpw	$56, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp785
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _348->code, D.27972
	cmpw	$140, %ax	#, D.27972
	je	.L144	#,
	.loc 1 971 0 is_stmt 1
	movq	-112(%rbp), %rax	# x, tmp786
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _350->code, D.27972
	cmpw	$61, %ax	#, D.27972
	jne	.L145	#,
	.loc 1 972 0
	movq	-112(%rbp), %rax	# x, tmp787
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movl	8(%rax), %eax	# _352->fld[0].rtuint, D.27974
	cmpl	$52, %eax	#, D.27974
	jbe	.L144	#,
.L145:
	.loc 1 973 0
	movq	-112(%rbp), %rax	# x, tmp788
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _354->code, D.27972
	cmpw	$75, %ax	#, D.27972
	jne	.L146	#,
	.loc 1 974 0
	movq	-112(%rbp), %rax	# x, tmp789
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	8(%rax), %rax	# _356->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _357->code, D.27972
	cmpw	$61, %ax	#, D.27972
	jne	.L146	#,
	.loc 1 975 0
	movq	-112(%rbp), %rax	# x, tmp790
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	8(%rax), %rax	# _359->fld[0].rtx, D.27973
	movl	8(%rax), %eax	# _360->fld[0].rtuint, D.27974
	cmpl	$52, %eax	#, D.27974
	ja	.L146	#,
	.loc 1 977 0
	movq	-112(%rbp), %rax	# x, tmp791
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	16(%rax), %rax	# _362->fld[1].rtx, D.27973
	movzwl	(%rax), %eax	# _363->code, D.27972
	cmpw	$67, %ax	#, D.27972
	je	.L144	#,
	.loc 1 977 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# x, tmp792
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	16(%rax), %rax	# _365->fld[1].rtx, D.27973
	movzwl	(%rax), %eax	# _366->code, D.27972
	cmpw	$68, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp793
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	16(%rax), %rax	# _368->fld[1].rtx, D.27973
	movzwl	(%rax), %eax	# _369->code, D.27972
	cmpw	$54, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp794
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	16(%rax), %rax	# _371->fld[1].rtx, D.27973
	movzwl	(%rax), %eax	# _372->code, D.27972
	cmpw	$55, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp795
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	16(%rax), %rax	# _374->fld[1].rtx, D.27973
	movzwl	(%rax), %eax	# _375->code, D.27972
	cmpw	$58, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp796
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	16(%rax), %rax	# _377->fld[1].rtx, D.27973
	movzwl	(%rax), %eax	# _378->code, D.27972
	cmpw	$134, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp797
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	16(%rax), %rax	# _380->fld[1].rtx, D.27973
	movzwl	(%rax), %eax	# _381->code, D.27972
	cmpw	$56, %ax	#, D.27972
	je	.L144	#,
	movq	-112(%rbp), %rax	# x, tmp798
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	16(%rax), %rax	# _383->fld[1].rtx, D.27973
	movzwl	(%rax), %eax	# _384->code, D.27972
	cmpw	$140, %ax	#, D.27972
	jne	.L146	#,
.L144:
	.loc 1 978 0 is_stmt 1
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.116
	movl	-268(%rbp), %edx	# i, tmp799
	movslq	%edx, %rdx	# tmp799, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rax, %rdx	# reg_equiv_address.116, D.27975
	movq	-112(%rbp), %rax	# x, tmp800
	movq	8(%rax), %rax	# x_314->fld[0].rtx, D.27973
	movq	%rax, (%rdx)	# D.27973, *_397
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.117
	movl	-268(%rbp), %edx	# i, tmp801
	movslq	%edx, %rdx	# tmp801, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	$0, (%rax)	#, *_402
	jmp	.L142	#
.L146:
	.loc 1 987 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.118
	movl	-268(%rbp), %edx	# i, tmp802
	movslq	%edx, %rdx	# tmp802, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	$0, (%rax)	#, *_389
	.loc 1 988 0
	movq	reg_equiv_init(%rip), %rax	# reg_equiv_init, reg_equiv_init.119
	movl	-268(%rbp), %edx	# i, tmp803
	movslq	%edx, %rdx	# tmp803, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	$0, (%rax)	#, *_393
	.loc 1 989 0
	movl	-268(%rbp), %eax	# i, tmp804
	movl	$-1, %esi	#,
	movl	%eax, %edi	# tmp804,
	call	alter_reg	#
.L142:
.LBE20:
	.loc 1 962 0
	addl	$1, -268(%rbp)	#, i
.L141:
	.loc 1 962 0 is_stmt 0 discriminator 1
	movl	max_regno(%rip), %eax	# max_regno, max_regno.120
	cmpl	%eax, -268(%rbp)	# max_regno.120, i
	jl	.L147	#,
	.loc 1 993 0 is_stmt 1
	movl	caller_save_needed(%rip), %eax	# caller_save_needed, caller_save_needed.121
	testl	%eax, %eax	# caller_save_needed.121
	je	.L148	#,
	.loc 1 994 0
	call	setup_save_areas	#
.L148:
	.loc 1 997 0
	call	get_frame_size	#
	cmpq	-120(%rbp), %rax	# starting_frame_size, D.27964
	je	.L149	#,
	.loc 1 998 0
	jmp	.L150	#
.L149:
	.loc 1 1000 0
	movl	caller_save_needed(%rip), %eax	# caller_save_needed, caller_save_needed.122
	testl	%eax, %eax	# caller_save_needed.122
	je	.L151	#,
	.loc 1 1002 0
	call	save_call_clobbered_regs	#
.LBB21:
	.loc 1 1004 0
	movq	$reload_obstack, -104(%rbp)	#, __h
.LBB22:
	movq	-104(%rbp), %rax	# __h, tmp805
	movq	%rax, -96(%rbp)	# tmp805, __o
	movl	$0, -252(%rbp)	#, __len
	movq	-96(%rbp), %rax	# __o, tmp806
	movq	32(%rax), %rax	# __o_408->chunk_limit, D.27963
	movq	%rax, %rdx	# D.27963, D.27964
	movq	-96(%rbp), %rax	# __o, tmp807
	movq	24(%rax), %rax	# __o_408->next_free, D.27963
	subq	%rax, %rdx	# D.27964, D.27964
	movl	-252(%rbp), %eax	# __len, tmp808
	cltq
	cmpq	%rax, %rdx	# D.27964, D.27964
	jge	.L152	#,
	.loc 1 1004 0 is_stmt 0 discriminator 1
	movl	-252(%rbp), %edx	# __len, tmp809
	movq	-96(%rbp), %rax	# __o, tmp810
	movl	%edx, %esi	# tmp809,
	movq	%rax, %rdi	# tmp810,
	call	_obstack_newchunk	#
.L152:
	.loc 1 1004 0 discriminator 2
	movq	-96(%rbp), %rax	# __o, tmp811
	movq	24(%rax), %rdx	# __o_408->next_free, D.27963
	movl	-252(%rbp), %eax	# __len, tmp812
	cltq
	addq	%rax, %rdx	# D.27965, D.27963
	movq	-96(%rbp), %rax	# __o, tmp813
	movq	%rdx, 24(%rax)	# D.27963, __o_408->next_free
.LBE22:
.LBB23:
	movq	-104(%rbp), %rax	# __h, tmp814
	movq	%rax, -88(%rbp)	# tmp814, __o1
	movq	-88(%rbp), %rax	# __o1, tmp815
	movq	16(%rax), %rax	# __o1_419->object_base, tmp816
	movq	%rax, -80(%rbp)	# tmp816, value
	movq	-88(%rbp), %rax	# __o1, tmp817
	movq	24(%rax), %rax	# __o1_419->next_free, D.27963
	cmpq	-80(%rbp), %rax	# value, D.27963
	jne	.L153	#,
	.loc 1 1004 0 discriminator 1
	movq	-88(%rbp), %rax	# __o1, tmp818
	movzbl	80(%rax), %edx	# __o1_419->maybe_empty_object, tmp821
	orl	$2, %edx	#, tmp822
	movb	%dl, 80(%rax)	# tmp822, __o1_419->maybe_empty_object
.L153:
	.loc 1 1004 0 discriminator 2
	movq	-88(%rbp), %rax	# __o1, tmp823
	movq	24(%rax), %rax	# __o1_419->next_free, D.27963
	movq	%rax, %rdx	# D.27963, D.27964
	movq	-88(%rbp), %rax	# __o1, tmp824
	movl	48(%rax), %eax	# __o1_419->alignment_mask, D.27966
	cltq
	addq	%rax, %rdx	# D.27964, D.27964
	movq	-88(%rbp), %rax	# __o1, tmp825
	movl	48(%rax), %eax	# __o1_419->alignment_mask, D.27966
	notl	%eax	# D.27966
	cltq
	andq	%rdx, %rax	# D.27964, D.27964
	movq	%rax, %rdx	# D.27964, D.27963
	movq	-88(%rbp), %rax	# __o1, tmp826
	movq	%rdx, 24(%rax)	# D.27963, __o1_419->next_free
	movq	-88(%rbp), %rax	# __o1, tmp827
	movq	24(%rax), %rax	# __o1_419->next_free, D.27963
	movq	%rax, %rdx	# D.27963, D.27964
	movq	-88(%rbp), %rax	# __o1, tmp828
	movq	8(%rax), %rax	# __o1_419->chunk, D.27967
	movq	%rdx, %rcx	# D.27964, D.27964
	subq	%rax, %rcx	# D.27964, D.27964
	movq	-88(%rbp), %rax	# __o1, tmp829
	movq	32(%rax), %rax	# __o1_419->chunk_limit, D.27963
	movq	%rax, %rdx	# D.27963, D.27964
	movq	-88(%rbp), %rax	# __o1, tmp830
	movq	8(%rax), %rax	# __o1_419->chunk, D.27967
	subq	%rax, %rdx	# D.27964, D.27964
	movq	%rdx, %rax	# D.27964, D.27964
	cmpq	%rax, %rcx	# D.27964, D.27964
	jle	.L154	#,
	.loc 1 1004 0 discriminator 1
	movq	-88(%rbp), %rax	# __o1, tmp831
	movq	32(%rax), %rdx	# __o1_419->chunk_limit, D.27963
	movq	-88(%rbp), %rax	# __o1, tmp832
	movq	%rdx, 24(%rax)	# D.27963, __o1_419->next_free
.L154:
	.loc 1 1004 0 discriminator 2
	movq	-88(%rbp), %rax	# __o1, tmp833
	movq	24(%rax), %rdx	# __o1_419->next_free, D.27963
	movq	-88(%rbp), %rax	# __o1, tmp834
	movq	%rdx, 16(%rax)	# D.27963, __o1_419->object_base
	movq	-80(%rbp), %rax	# value, D.27968
.LBE23:
.LBE21:
	movq	%rax, reload_firstobj(%rip)	# reload_firstobj.123, reload_firstobj
.L151:
	.loc 1 1007 0 is_stmt 1
	movl	-284(%rbp), %eax	# global, tmp835
	movl	%eax, %edi	# tmp835,
	call	calculate_needs_all_insns	#
	.loc 1 1009 0
	movl	$spilled_pseudos, %edi	#,
	call	bitmap_clear	#
	.loc 1 1010 0
	movl	$0, -260(%rbp)	#, did_spill
	.loc 1 1012 0
	movl	$0, -264(%rbp)	#, something_changed
	.loc 1 1016 0
	call	get_frame_size	#
	cmpq	-120(%rbp), %rax	# starting_frame_size, D.27964
	je	.L155	#,
	.loc 1 1017 0
	movl	$1, -264(%rbp)	#, something_changed
.L155:
.LBB24:
	.loc 1 1021 0
	movq	$0, -248(%rbp)	#, to_spill
	.loc 1 1022 0
	leaq	-248(%rbp), %rax	#, tmp836
	movq	%rax, %rdi	# tmp836,
	call	update_eliminables	#
	.loc 1 1023 0
	movl	$0, -268(%rbp)	#, i
	jmp	.L156	#
.L158:
	.loc 1 1024 0
	movq	-248(%rbp), %rdx	# to_spill, to_spill.124
	movl	-268(%rbp), %eax	# i, tmp837
	movl	%eax, %ecx	# tmp837, tmp1038
	shrq	%cl, %rdx	# tmp1038, D.27971
	movq	%rdx, %rax	# D.27971, D.27971
	andl	$1, %eax	#, D.27971
	testq	%rax, %rax	# D.27971
	je	.L157	#,
	.loc 1 1026 0
	movl	-268(%rbp), %eax	# i, i.125
	movl	$1, %esi	#,
	movl	%eax, %edi	# i.125,
	call	spill_hard_reg	#
	.loc 1 1027 0
	movl	$1, -260(%rbp)	#, did_spill
	.loc 1 1038 0
	movl	$1, -264(%rbp)	#, something_changed
.L157:
	.loc 1 1023 0
	addl	$1, -268(%rbp)	#, i
.L156:
	.loc 1 1023 0 is_stmt 0 discriminator 1
	cmpl	$52, -268(%rbp)	#, i
	jle	.L158	#,
.LBE24:
	.loc 1 1042 0 is_stmt 1
	call	select_reload_regs	#
	.loc 1 1043 0
	movl	failure(%rip), %eax	# failure, failure.126
	testl	%eax, %eax	# failure.126
	je	.L159	#,
	.loc 1 1044 0
	jmp	.L160	#
.L159:
	.loc 1 1046 0
	movq	insns_need_reload(%rip), %rax	# insns_need_reload, insns_need_reload.127
	testq	%rax, %rax	# insns_need_reload.127
	jne	.L161	#,
	.loc 1 1046 0 is_stmt 0 discriminator 1
	cmpl	$0, -260(%rbp)	#, did_spill
	je	.L162	#,
.L161:
	.loc 1 1047 0 is_stmt 1
	movl	-284(%rbp), %eax	# global, tmp838
	movl	%eax, %edi	# tmp838,
	call	finish_spills	#
	orl	%eax, -264(%rbp)	# D.27966, something_changed
.L162:
	.loc 1 1049 0
	cmpl	$0, -264(%rbp)	#, something_changed
	jne	.L163	#,
	.loc 1 1050 0
	nop
.LBE19:
	.loc 1 1060 0
	cmpl	$0, -284(%rbp)	#, global
	je	.L168	#,
	jmp	.L222	#
.L163:
.LBB26:
	.loc 1 1052 0
	movl	caller_save_needed(%rip), %eax	# caller_save_needed, caller_save_needed.128
	testl	%eax, %eax	# caller_save_needed.128
	je	.L165	#,
	.loc 1 1053 0
	call	delete_caller_save_insns	#
.L165:
.LBB25:
	.loc 1 1055 0
	movq	$reload_obstack, -56(%rbp)	#, __o
	movq	reload_firstobj(%rip), %rax	# reload_firstobj, tmp839
	movq	%rax, -48(%rbp)	# tmp839, __obj
	movq	-56(%rbp), %rax	# __o, tmp840
	movq	8(%rax), %rax	# __o_514->chunk, D.27967
	cmpq	-48(%rbp), %rax	# __obj, D.27967
	jae	.L166	#,
	.loc 1 1055 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# __o, tmp841
	movq	32(%rax), %rax	# __o_514->chunk_limit, D.27963
	cmpq	-48(%rbp), %rax	# __obj, D.27963
	jbe	.L166	#,
	movq	-56(%rbp), %rax	# __o, tmp842
	movq	-48(%rbp), %rdx	# __obj, tmp843
	movq	%rdx, 16(%rax)	# tmp843, __o_514->object_base
	movq	-56(%rbp), %rax	# __o, tmp844
	movq	16(%rax), %rdx	# __o_514->object_base, D.27963
	movq	-56(%rbp), %rax	# __o, tmp845
	movq	%rdx, 24(%rax)	# D.27963, __o_514->next_free
	jmp	.L150	#
.L166:
	.loc 1 1055 0 discriminator 2
	movq	-48(%rbp), %rdx	# __obj, tmp846
	movq	-56(%rbp), %rax	# __o, tmp847
	movq	%rdx, %rsi	# tmp846,
	movq	%rax, %rdi	# tmp847,
	call	obstack_free	#
.LBE25:
.LBE26:
	.loc 1 1056 0 is_stmt 1 discriminator 2
	jmp	.L167	#
.L150:
	.loc 1 1056 0 is_stmt 0
	jmp	.L167	#
.L222:
	.loc 1 1061 0 is_stmt 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp848
	movq	%rax, -232(%rbp)	# tmp848, ep
	jmp	.L169	#
.L171:
	.loc 1 1062 0
	movq	-232(%rbp), %rax	# ep, tmp849
	movl	12(%rax), %eax	# ep_16->can_eliminate, D.27966
	testl	%eax, %eax	# D.27966
	je	.L170	#,
	.loc 1 1063 0
	movq	-232(%rbp), %rax	# ep, tmp850
	movl	4(%rax), %edx	# ep_16->to, D.27966
	movq	-232(%rbp), %rax	# ep, tmp851
	movl	(%rax), %eax	# ep_16->from, D.27966
	movl	%edx, %esi	# D.27966,
	movl	%eax, %edi	# D.27966,
	call	mark_elimination	#
.L170:
	.loc 1 1061 0
	addq	$48, -232(%rbp)	#, ep
.L169:
	.loc 1 1061 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.129
	addq	$192, %rax	#, D.27976
	cmpq	-232(%rbp), %rax	# ep, D.27976
	ja	.L171	#,
.L168:
	.loc 1 1072 0 is_stmt 1
	movl	$53, -268(%rbp)	#, i
	jmp	.L172	#
.L178:
	.loc 1 1074 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.130
	movl	-268(%rbp), %edx	# i, tmp852
	movslq	%edx, %rdx	# tmp852, D.27971
	addq	%rdx, %rdx	# D.27971
	addq	%rdx, %rax	# D.27971, D.27977
	movzwl	(%rax), %eax	# *_474, D.27978
	testw	%ax, %ax	# D.27978
	jns	.L173	#,
	.loc 1 1074 0 is_stmt 0 discriminator 1
	movq	reg_equiv_init(%rip), %rax	# reg_equiv_init, reg_equiv_init.131
	movl	-268(%rbp), %edx	# i, tmp853
	movslq	%edx, %rdx	# tmp853, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_479, D.27973
	testq	%rax, %rax	# D.27973
	je	.L173	#,
.LBB27:
	.loc 1 1077 0 is_stmt 1
	movq	reg_equiv_init(%rip), %rax	# reg_equiv_init, reg_equiv_init.132
	movl	-268(%rbp), %edx	# i, tmp854
	movslq	%edx, %rdx	# tmp854, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_484, tmp855
	movq	%rax, -224(%rbp)	# tmp855, list
	jmp	.L174	#
.L177:
.LBB28:
	.loc 1 1079 0
	movq	-224(%rbp), %rax	# list, tmp856
	movq	8(%rax), %rax	# list_23->fld[0].rtx, tmp857
	movq	%rax, -72(%rbp)	# tmp857, equiv_insn
	.loc 1 1086 0
	movq	-72(%rbp), %rax	# equiv_insn, tmp858
	movzwl	(%rax), %eax	# equiv_insn_486->code, D.27972
	cmpw	$37, %ax	#, D.27972
	je	.L175	#,
	.loc 1 1087 0
	movq	-72(%rbp), %rax	# equiv_insn, tmp859
	movq	%rax, %rdi	# tmp859,
	call	can_throw_internal	#
	testb	%al, %al	# D.27981
	jne	.L175	#,
	.loc 1 1089 0
	movq	-72(%rbp), %rax	# equiv_insn, tmp860
	movq	32(%rax), %rdx	# equiv_insn_486->fld[3].rtx, D.27973
	movq	cfun(%rip), %rax	# cfun, cfun.133
	movq	24(%rax), %rax	# cfun.133_490->emit, D.27979
	movq	80(%rax), %rax	# _491->x_regno_reg_rtx, D.27975
	movl	-268(%rbp), %ecx	# i, tmp861
	movslq	%ecx, %rcx	# tmp861, D.27971
	salq	$3, %rcx	#, D.27971
	addq	%rcx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_495, D.27973
	movq	%rdx, %rsi	# D.27973,
	movq	%rax, %rdi	# D.27973,
	call	reg_set_p	#
	testl	%eax, %eax	# D.27966
	je	.L176	#,
	.loc 1 1090 0
	movq	-72(%rbp), %rax	# equiv_insn, tmp862
	movq	%rax, %rdi	# tmp862,
	call	delete_dead_insn	#
	jmp	.L175	#
.L176:
	.loc 1 1093 0
	movq	-72(%rbp), %rax	# equiv_insn, tmp863
	movw	$37, (%rax)	#, equiv_insn_486->code
	.loc 1 1094 0
	movq	-72(%rbp), %rax	# equiv_insn, tmp864
	movq	$0, 32(%rax)	#, equiv_insn_486->fld[3].rtstr
	.loc 1 1095 0
	movq	-72(%rbp), %rax	# equiv_insn, tmp865
	movl	$-99, 40(%rax)	#, equiv_insn_486->fld[4].rtint
.L175:
.LBE28:
	.loc 1 1077 0
	movq	-224(%rbp), %rax	# list, tmp866
	movq	16(%rax), %rax	# list_23->fld[1].rtx, tmp867
	movq	%rax, -224(%rbp)	# tmp867, list
.L174:
	.loc 1 1077 0 is_stmt 0 discriminator 1
	cmpq	$0, -224(%rbp)	#, list
	jne	.L177	#,
.L173:
.LBE27:
	.loc 1 1072 0 is_stmt 1
	addl	$1, -268(%rbp)	#, i
.L172:
	.loc 1 1072 0 is_stmt 0 discriminator 1
	movl	max_regno(%rip), %eax	# max_regno, max_regno.134
	cmpl	%eax, -268(%rbp)	# max_regno.134, i
	jl	.L178	#,
	.loc 1 1105 0 is_stmt 1
	movq	insns_need_reload(%rip), %rax	# insns_need_reload, insns_need_reload.135
	testq	%rax, %rax	# insns_need_reload.135
	jne	.L179	#,
	.loc 1 1105 0 is_stmt 0 discriminator 1
	movl	something_needs_elimination(%rip), %eax	# something_needs_elimination, something_needs_elimination.136
	testl	%eax, %eax	# something_needs_elimination.136
	jne	.L179	#,
	.loc 1 1106 0 is_stmt 1
	movl	something_needs_operands_changed(%rip), %eax	# something_needs_operands_changed, something_needs_operands_changed.137
	testl	%eax, %eax	# something_needs_operands_changed.137
	je	.L180	#,
.L179:
.LBB29:
	.loc 1 1108 0
	call	get_frame_size	#
	movq	%rax, -64(%rbp)	# tmp868, old_frame_size
	.loc 1 1110 0
	movl	-284(%rbp), %eax	# global, tmp869
	movl	%eax, %edi	# tmp869,
	call	reload_as_needed	#
	.loc 1 1112 0
	call	get_frame_size	#
	cmpq	-64(%rbp), %rax	# old_frame_size, D.27964
	je	.L181	#,
	.loc 1 1113 0
	movl	$__FUNCTION__.14398, %edx	#,
	movl	$1113, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L181:
	.loc 1 1115 0
	movl	num_eliminable(%rip), %eax	# num_eliminable, num_eliminable.138
	testl	%eax, %eax	# num_eliminable.138
	je	.L180	#,
	.loc 1 1116 0
	call	verify_initial_elim_offsets	#
.L180:
.LBE29:
	.loc 1 1125 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.139
	testl	%eax, %eax	# frame_pointer_needed.139
	jne	.L160	#,
	.loc 1 1126 0
	movl	$0, -268(%rbp)	#, i
	jmp	.L182	#
.L183:
	.loc 1 1127 0 discriminator 2
	movq	basic_block_info(%rip), %rax	# basic_block_info, basic_block_info.140
	movl	-268(%rbp), %edx	# i, tmp871
	movslq	%edx, %rdx	# tmp871, tmp870
	addq	$4, %rdx	#, tmp872
	movq	(%rax,%rdx,8), %rax	# basic_block_info.140_509->data.bb, D.27982
	movq	64(%rax), %rax	# _510->global_live_at_start, D.27983
	movl	$6, %esi	#,
	movq	%rax, %rdi	# D.27983,
	call	bitmap_clear_bit	#
	.loc 1 1126 0 discriminator 2
	addl	$1, -268(%rbp)	#, i
.L182:
	.loc 1 1126 0 is_stmt 0 discriminator 1
	movl	n_basic_blocks(%rip), %eax	# n_basic_blocks, n_basic_blocks.141
	cmpl	%eax, -268(%rbp)	# n_basic_blocks.141, i
	jl	.L183	#,
.L160:
	.loc 1 1134 0 is_stmt 1
	movl	$spilled_pseudos, %edi	#,
	call	bitmap_clear	#
	.loc 1 1135 0
	movl	$0, reload_in_progress(%rip)	#, reload_in_progress
	.loc 1 1147 0
	movl	$53, -268(%rbp)	#, i
	jmp	.L184	#
.L191:
.LBB30:
	.loc 1 1149 0
	movq	$0, -216(%rbp)	#, addr
	.loc 1 1151 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.142
	movl	-268(%rbp), %edx	# i, tmp873
	movslq	%edx, %rdx	# tmp873, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_525, D.27973
	testq	%rax, %rax	# D.27973
	je	.L185	#,
	.loc 1 1152 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.143
	movl	-268(%rbp), %edx	# i, tmp874
	movslq	%edx, %rdx	# tmp874, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_530, D.27973
	movq	8(%rax), %rax	# _531->fld[0].rtx, tmp875
	movq	%rax, -216(%rbp)	# tmp875, addr
.L185:
	.loc 1 1154 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.144
	movl	-268(%rbp), %edx	# i, tmp876
	movslq	%edx, %rdx	# tmp876, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_536, D.27973
	testq	%rax, %rax	# D.27973
	je	.L186	#,
	.loc 1 1155 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.145
	movl	-268(%rbp), %edx	# i, tmp877
	movslq	%edx, %rdx	# tmp877, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_541, tmp878
	movq	%rax, -216(%rbp)	# tmp878, addr
.L186:
	.loc 1 1157 0
	cmpq	$0, -216(%rbp)	#, addr
	je	.L187	#,
	.loc 1 1159 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.146
	movl	-268(%rbp), %edx	# i, tmp879
	movslq	%edx, %rdx	# tmp879, D.27971
	addq	%rdx, %rdx	# D.27971
	addq	%rdx, %rax	# D.27971, D.27977
	movzwl	(%rax), %eax	# *_546, D.27978
	testw	%ax, %ax	# D.27978
	jns	.L188	#,
.LBB31:
	.loc 1 1161 0
	movq	cfun(%rip), %rax	# cfun, cfun.147
	movq	24(%rax), %rax	# cfun.147_548->emit, D.27979
	movq	80(%rax), %rax	# _549->x_regno_reg_rtx, D.27975
	movl	-268(%rbp), %edx	# i, tmp880
	movslq	%edx, %rdx	# tmp880, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_553, tmp881
	movq	%rax, -40(%rbp)	# tmp881, reg
	.loc 1 1163 0
	movq	-40(%rbp), %rax	# reg, tmp882
	movw	$66, (%rax)	#, reg_554->code
	.loc 1 1164 0
	movq	-40(%rbp), %rax	# reg, tmp883
	movq	-216(%rbp), %rdx	# addr, tmp884
	movq	%rdx, 8(%rax)	# tmp884, reg_554->fld[0].rtx
	.loc 1 1165 0
	movq	-40(%rbp), %rax	# reg, tmp885
	movzbl	3(%rax), %edx	# reg_554->volatil, tmp888
	andl	$-9, %edx	#, tmp889
	movb	%dl, 3(%rax)	# tmp889, reg_554->volatil
	.loc 1 1166 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.148
	movl	-268(%rbp), %edx	# i, tmp890
	movslq	%edx, %rdx	# tmp890, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_558, D.27973
	testq	%rax, %rax	# D.27973
	je	.L189	#,
	.loc 1 1167 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.149
	movl	-268(%rbp), %edx	# i, tmp891
	movslq	%edx, %rdx	# tmp891, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_563, D.27973
	movzbl	3(%rax), %eax	# *_564, tmp894
	shrb	$3, %al	#, D.27984
	andl	$1, %eax	#, D.27984
	movq	-40(%rbp), %rdx	# reg, tmp895
	andl	$1, %eax	#, tmp897
	leal	0(,%rax,8), %ecx	#, tmp898
	movzbl	3(%rdx), %eax	# reg_554->volatil, tmp899
	andl	$-9, %eax	#, tmp900
	orl	%ecx, %eax	# tmp898, tmp901
	movb	%al, 3(%rdx)	# tmp901, reg_554->volatil
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.150
	movl	-268(%rbp), %edx	# i, tmp902
	movslq	%edx, %rdx	# tmp902, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_569, D.27973
	movzbl	3(%rax), %eax	# *_570, tmp905
	shrb	$4, %al	#, D.27984
	andl	$1, %eax	#, D.27984
	movq	-40(%rbp), %rdx	# reg, tmp906
	andl	$1, %eax	#, tmp908
	sall	$4, %eax	#, tmp909
	movl	%eax, %ecx	# tmp909, tmp909
	movzbl	3(%rdx), %eax	# reg_554->in_struct, tmp910
	andl	$-17, %eax	#, tmp911
	orl	%ecx, %eax	# tmp909, tmp912
	movb	%al, 3(%rdx)	# tmp912, reg_554->in_struct
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.151
	movl	-268(%rbp), %edx	# i, tmp913
	movslq	%edx, %rdx	# tmp913, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_575, D.27973
	movzbl	3(%rax), %eax	# *_576, tmp916
	shrb	$7, %al	#, D.27984
	movl	%eax, %edx	# D.27984, D.27984
	movq	-40(%rbp), %rax	# reg, tmp917
	movl	%edx, %ecx	# D.27984, tmp919
	sall	$7, %ecx	#, tmp919
	movzbl	3(%rax), %edx	# reg_554->frame_related, tmp920
	andl	$127, %edx	#, tmp921
	orl	%ecx, %edx	# tmp919, tmp922
	movb	%dl, 3(%rax)	# tmp922, reg_554->frame_related
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.152
	movl	-268(%rbp), %edx	# i, tmp923
	movslq	%edx, %rdx	# tmp923, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_581, D.27973
	movzbl	3(%rax), %eax	# *_582, tmp926
	shrb	$2, %al	#, D.27984
	andl	$1, %eax	#, D.27984
	movq	-40(%rbp), %rdx	# reg, tmp927
	andl	$1, %eax	#, tmp929
	leal	0(,%rax,4), %ecx	#, tmp930
	movzbl	3(%rdx), %eax	# reg_554->unchanging, tmp931
	andl	$-5, %eax	#, tmp932
	orl	%ecx, %eax	# tmp930, tmp933
	movb	%al, 3(%rdx)	# tmp933, reg_554->unchanging
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.153
	movl	-268(%rbp), %edx	# i, tmp934
	movslq	%edx, %rdx	# tmp934, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_587, D.27973
	movzbl	3(%rax), %eax	# *_588, tmp937
	andl	$1, %eax	#, D.27984
	movl	%eax, %edx	# D.27984, D.27984
	movq	-40(%rbp), %rax	# reg, tmp938
	movl	%edx, %ecx	# D.27984, tmp940
	andl	$1, %ecx	#, tmp940
	movzbl	3(%rax), %edx	# reg_554->jump, tmp941
	andl	$-2, %edx	#, tmp942
	orl	%ecx, %edx	# tmp940, tmp943
	movb	%dl, 3(%rax)	# tmp943, reg_554->jump
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.154
	movl	-268(%rbp), %edx	# i, tmp944
	movslq	%edx, %rdx	# tmp944, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_593, D.27973
	movq	16(%rax), %rdx	# _594->fld[1].rtmem, D.27985
	movq	-40(%rbp), %rax	# reg, tmp945
	movq	%rdx, 16(%rax)	# D.27985, reg_554->fld[1].rtmem
	jmp	.L187	#
.L189:
	.loc 1 1171 0
	movq	-40(%rbp), %rax	# reg, tmp946
	movzbl	3(%rax), %edx	# reg_554->frame_related, tmp949
	andl	$127, %edx	#, tmp950
	movb	%dl, 3(%rax)	# tmp950, reg_554->frame_related
	movq	-40(%rbp), %rax	# reg, tmp951
	movzbl	3(%rax), %eax	# *reg_554, tmp954
	shrb	$7, %al	#, D.27984
	movl	%eax, %edx	# D.27984, D.27984
	movq	-40(%rbp), %rax	# reg, tmp955
	andl	$1, %edx	#, tmp957
	movl	%edx, %ecx	# tmp957, tmp958
	sall	$4, %ecx	#, tmp958
	movzbl	3(%rax), %edx	# reg_554->in_struct, tmp959
	andl	$-17, %edx	#, tmp960
	orl	%ecx, %edx	# tmp958, tmp961
	movb	%dl, 3(%rax)	# tmp961, reg_554->in_struct
	.loc 1 1170 0
	movq	-40(%rbp), %rax	# reg, tmp962
	movzbl	3(%rax), %eax	# *reg_554, tmp965
	shrb	$4, %al	#, D.27984
	andl	$1, %eax	#, D.27984
	movq	-40(%rbp), %rdx	# reg, tmp966
	andl	$1, %eax	#, tmp968
	leal	0(,%rax,4), %ecx	#, tmp969
	movzbl	3(%rdx), %eax	# reg_554->unchanging, tmp970
	andl	$-5, %eax	#, tmp971
	orl	%ecx, %eax	# tmp969, tmp972
	movb	%al, 3(%rdx)	# tmp972, reg_554->unchanging
	.loc 1 1172 0
	movq	-40(%rbp), %rax	# reg, tmp973
	movq	$0, 16(%rax)	#, reg_554->fld[1].rtmem
.LBE31:
	jmp	.L187	#
.L188:
	.loc 1 1175 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.155
	movl	-268(%rbp), %edx	# i, tmp974
	movslq	%edx, %rdx	# tmp974, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_601, D.27973
	testq	%rax, %rax	# D.27973
	je	.L187	#,
	.loc 1 1176 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.156
	movl	-268(%rbp), %edx	# i, tmp975
	movslq	%edx, %rdx	# tmp975, D.27971
	salq	$3, %rdx	#, D.27971
	addq	%rdx, %rax	# D.27971, D.27975
	movq	(%rax), %rax	# *_606, D.27973
	movq	-216(%rbp), %rdx	# addr, tmp976
	movq	%rdx, 8(%rax)	# tmp976, _607->fld[0].rtx
.L187:
.LBE30:
	.loc 1 1147 0
	addl	$1, -268(%rbp)	#, i
.L184:
	.loc 1 1147 0 is_stmt 0 discriminator 1
	movl	max_regno(%rip), %eax	# max_regno, max_regno.157
	cmpl	%eax, -268(%rbp)	# max_regno.157, i
	jl	.L191	#,
	.loc 1 1183 0 is_stmt 1
	movl	$1, reload_completed(%rip)	#, reload_completed
	.loc 1 1192 0
	movq	-280(%rbp), %rax	# first, tmp977
	movq	%rax, -240(%rbp)	# tmp977, insn
	jmp	.L192	#
.L202:
	.loc 1 1193 0
	movq	-240(%rbp), %rax	# insn, tmp978
	movzwl	(%rax), %eax	# insn_14->code, D.27972
	movzwl	%ax, %eax	# D.27972, D.27966
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.27970
	cmpb	$105, %al	#, D.27970
	jne	.L193	#,
.LBB32:
	.loc 1 1197 0
	movq	-240(%rbp), %rax	# insn, tmp980
	movzwl	(%rax), %eax	# insn_14->code, D.27972
	cmpw	$34, %ax	#, D.27972
	jne	.L194	#,
	.loc 1 1198 0
	movq	-240(%rbp), %rax	# insn, tmp981
	movq	64(%rax), %rax	# insn_14->fld[7].rtx, D.27973
	movq	-240(%rbp), %rdx	# insn, tmp982
	leaq	64(%rdx), %rcx	#, D.27975
	movq	%rax, %rdx	# D.27973,
	movl	$0, %esi	#,
	movq	%rcx, %rdi	# D.27975,
	call	replace_pseudos_in_call_usage	#
.L194:
	.loc 1 1202 0
	movq	-240(%rbp), %rax	# insn, tmp983
	movq	32(%rax), %rax	# insn_14->fld[3].rtx, D.27973
	movzwl	(%rax), %eax	# _616->code, D.27972
	cmpw	$48, %ax	#, D.27972
	jne	.L195	#,
	.loc 1 1204 0
	movq	-240(%rbp), %rax	# insn, tmp984
	movzbl	2(%rax), %eax	# insn_14->mode, D.27969
	cmpb	$2, %al	#, D.27969
	je	.L196	#,
	.loc 1 1205 0
	movq	-240(%rbp), %rax	# insn, tmp985
	movl	$0, %edx	#,
	movl	$4, %esi	#,
	movq	%rax, %rdi	# tmp985,
	call	find_reg_note	#
	testq	%rax, %rax	# D.27973
	jne	.L196	#,
.L195:
	.loc 1 1206 0
	movq	-240(%rbp), %rax	# insn, tmp986
	movq	32(%rax), %rax	# insn_14->fld[3].rtx, D.27973
	movzwl	(%rax), %eax	# _620->code, D.27972
	cmpw	$49, %ax	#, D.27972
	jne	.L197	#,
	.loc 1 1207 0
	movq	-240(%rbp), %rax	# insn, tmp987
	movq	32(%rax), %rax	# insn_14->fld[3].rtx, D.27973
	movq	8(%rax), %rax	# _622->fld[0].rtx, D.27973
	movzwl	(%rax), %eax	# _623->code, D.27972
	cmpw	$61, %ax	#, D.27972
	jne	.L196	#,
	.loc 1 1208 0
	movq	-240(%rbp), %rax	# insn, tmp988
	movq	32(%rax), %rax	# insn_14->fld[3].rtx, D.27973
	movq	8(%rax), %rax	# _625->fld[0].rtx, D.27973
	movzbl	3(%rax), %eax	# *_626, D.27969
	andl	$64, %eax	#, D.27969
	testb	%al, %al	# D.27969
	jne	.L197	#,
.L196:
	.loc 1 1210 0
	movq	-240(%rbp), %rax	# insn, tmp989
	movq	%rax, %rdi	# tmp989,
	call	delete_insn	#
	.loc 1 1211 0
	jmp	.L193	#
.L197:
	.loc 1 1214 0
	movq	-240(%rbp), %rax	# insn, tmp993
	addq	$56, %rax	#, tmp992
	movq	%rax, -208(%rbp)	# tmp992, pnote
	.loc 1 1215 0
	jmp	.L198	#
.L201:
	.loc 1 1217 0
	movq	-208(%rbp), %rax	# pnote, tmp994
	movq	(%rax), %rax	# *pnote_26, D.27973
	movzbl	2(%rax), %eax	# _631->mode, D.27969
	cmpb	$1, %al	#, D.27969
	je	.L199	#,
	.loc 1 1218 0
	movq	-208(%rbp), %rax	# pnote, tmp995
	movq	(%rax), %rax	# *pnote_26, D.27973
	movzbl	2(%rax), %eax	# _633->mode, D.27969
	cmpb	$10, %al	#, D.27969
	je	.L199	#,
	.loc 1 1219 0
	movq	-208(%rbp), %rax	# pnote, tmp996
	movq	(%rax), %rax	# *pnote_26, D.27973
	movzbl	2(%rax), %eax	# _635->mode, D.27969
	cmpb	$2, %al	#, D.27969
	je	.L199	#,
	.loc 1 1220 0
	movq	-208(%rbp), %rax	# pnote, tmp997
	movq	(%rax), %rax	# *pnote_26, D.27973
	movzbl	2(%rax), %eax	# _637->mode, D.27969
	cmpb	$6, %al	#, D.27969
	je	.L199	#,
	.loc 1 1221 0
	movq	-208(%rbp), %rax	# pnote, tmp998
	movq	(%rax), %rax	# *pnote_26, D.27973
	movzbl	2(%rax), %eax	# _639->mode, D.27969
	cmpb	$7, %al	#, D.27969
	jne	.L200	#,
.L199:
	.loc 1 1222 0
	movq	-208(%rbp), %rax	# pnote, tmp999
	movq	(%rax), %rax	# *pnote_26, D.27973
	movq	16(%rax), %rdx	# _643->fld[1].rtx, D.27973
	movq	-208(%rbp), %rax	# pnote, tmp1000
	movq	%rdx, (%rax)	# D.27973, *pnote_26
	jmp	.L198	#
.L200:
	.loc 1 1224 0
	movq	-208(%rbp), %rax	# pnote, tmp1001
	movq	(%rax), %rax	# *pnote_26, D.27973
	addq	$16, %rax	#, tmp1002
	movq	%rax, -208(%rbp)	# tmp1002, pnote
.L198:
	.loc 1 1215 0 discriminator 1
	movq	-208(%rbp), %rax	# pnote, tmp1003
	movq	(%rax), %rax	# *pnote_26, D.27973
	testq	%rax, %rax	# D.27973
	jne	.L201	#,
	.loc 1 1232 0
	movq	-240(%rbp), %rax	# insn, tmp1004
	movq	%rax, %rdi	# tmp1004,
	call	cleanup_subreg_operands	#
.L193:
.LBE32:
	.loc 1 1192 0
	movq	-240(%rbp), %rax	# insn, tmp1005
	movq	24(%rax), %rax	# insn_14->fld[2].rtx, tmp1006
	movq	%rax, -240(%rbp)	# tmp1006, insn
.L192:
	.loc 1 1192 0 is_stmt 0 discriminator 1
	cmpq	$0, -240(%rbp)	#, insn
	jne	.L202	#,
	.loc 1 1237 0 is_stmt 1
	movl	flag_stack_check(%rip), %eax	# flag_stack_check, flag_stack_check.158
	testl	%eax, %eax	# flag_stack_check.158
	je	.L203	#,
.LBB33:
	.loc 1 1239 0
	call	get_frame_size	#
	movq	%rax, %rdx	#, D.27964
	movl	target_flags(%rip), %eax	# target_flags, target_flags.160
	andl	$33554432, %eax	#, D.27966
	testl	%eax, %eax	# D.27966
	je	.L204	#,
	.loc 1 1239 0 is_stmt 0 discriminator 1
	movl	$32, %eax	#, iftmp.159
	jmp	.L205	#
.L204:
	.loc 1 1239 0 discriminator 2
	movl	$16, %eax	#, iftmp.159
.L205:
	.loc 1 1239 0 discriminator 3
	addq	%rdx, %rax	# D.27964, tmp1007
	movq	%rax, -200(%rbp)	# tmp1007, size
	.loc 1 1242 0 is_stmt 1 discriminator 3
	movl	$0, -268(%rbp)	#, i
	jmp	.L206	#
.L210:
	.loc 1 1243 0
	movl	-268(%rbp), %eax	# i, tmp1009
	cltq
	movzbl	regs_ever_live(%rax), %eax	# regs_ever_live, D.27970
	testb	%al, %al	# D.27970
	je	.L207	#,
	.loc 1 1243 0 is_stmt 0 discriminator 1
	movl	-268(%rbp), %eax	# i, tmp1011
	cltq
	movzbl	fixed_regs(%rax), %eax	# fixed_regs, D.27970
	testb	%al, %al	# D.27970
	jne	.L207	#,
	movl	-268(%rbp), %eax	# i, tmp1013
	cltq
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.27970
	testb	%al, %al	# D.27970
	je	.L207	#,
	.loc 1 1244 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.162
	andl	$33554432, %eax	#, D.27966
	testl	%eax, %eax	# D.27966
	je	.L208	#,
	.loc 1 1244 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.161
	jmp	.L209	#
.L208:
	.loc 1 1244 0 discriminator 2
	movl	$4, %eax	#, iftmp.161
.L209:
	.loc 1 1244 0 discriminator 3
	addq	%rax, -200(%rbp)	# iftmp.161, size
.L207:
	.loc 1 1242 0 is_stmt 1
	addl	$1, -268(%rbp)	#, i
.L206:
	.loc 1 1242 0 is_stmt 0 discriminator 1
	cmpl	$52, -268(%rbp)	#, i
	jle	.L210	#,
	.loc 1 1246 0 is_stmt 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.164
	andl	$33554432, %eax	#, D.27966
	testl	%eax, %eax	# D.27966
	je	.L211	#,
	.loc 1 1246 0 is_stmt 0 discriminator 1
	movl	$4088, %eax	#, iftmp.163
	jmp	.L212	#
.L211:
	.loc 1 1246 0 discriminator 2
	movl	$4092, %eax	#, iftmp.163
.L212:
	.loc 1 1246 0 discriminator 3
	cmpq	-200(%rbp), %rax	# size, iftmp.163
	jge	.L203	#,
	.loc 1 1248 0 is_stmt 1
	movl	$.LC2, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1249 0
	movl	verbose_warned.14416(%rip), %eax	# verbose_warned, verbose_warned.165
	testl	%eax, %eax	# verbose_warned.165
	jne	.L203	#,
	.loc 1 1251 0
	movl	$.LC3, %edi	#,
	movl	$0, %eax	#,
	call	warning	#
	.loc 1 1252 0
	movl	$1, verbose_warned.14416(%rip)	#, verbose_warned
.L203:
.LBE33:
	.loc 1 1258 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.166
	testq	%rax, %rax	# reg_equiv_constant.166
	je	.L213	#,
	.loc 1 1259 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.167
	movq	%rax, %rdi	# reg_equiv_constant.167,
	call	free	#
.L213:
	.loc 1 1260 0
	movq	$0, reg_equiv_constant(%rip)	#, reg_equiv_constant
	.loc 1 1261 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.168
	testq	%rax, %rax	# reg_equiv_memory_loc.168
	je	.L214	#,
	.loc 1 1262 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.169
	movq	%rax, %rdi	# reg_equiv_memory_loc.169,
	call	free	#
.L214:
	.loc 1 1263 0
	movq	$0, reg_equiv_memory_loc(%rip)	#, reg_equiv_memory_loc
	.loc 1 1265 0
	cmpq	$0, -192(%rbp)	#, real_known_ptr
	je	.L215	#,
	.loc 1 1266 0
	movq	-192(%rbp), %rax	# real_known_ptr, tmp1014
	movq	%rax, %rdi	# tmp1014,
	call	free	#
.L215:
	.loc 1 1267 0
	cmpq	$0, -128(%rbp)	#, real_at_ptr
	je	.L216	#,
	.loc 1 1268 0
	movq	-128(%rbp), %rax	# real_at_ptr, tmp1015
	movq	%rax, %rdi	# tmp1015,
	call	free	#
.L216:
	.loc 1 1270 0
	movq	reg_equiv_mem(%rip), %rax	# reg_equiv_mem, reg_equiv_mem.170
	movq	%rax, %rdi	# reg_equiv_mem.170,
	call	free	#
	.loc 1 1271 0
	movq	reg_equiv_init(%rip), %rax	# reg_equiv_init, reg_equiv_init.171
	movq	%rax, %rdi	# reg_equiv_init.171,
	call	free	#
	.loc 1 1272 0
	movq	reg_equiv_address(%rip), %rax	# reg_equiv_address, reg_equiv_address.172
	movq	%rax, %rdi	# reg_equiv_address.172,
	call	free	#
	.loc 1 1273 0
	movq	reg_max_ref_width(%rip), %rax	# reg_max_ref_width, reg_max_ref_width.173
	movq	%rax, %rdi	# reg_max_ref_width.173,
	call	free	#
	.loc 1 1274 0
	movq	reg_old_renumber(%rip), %rax	# reg_old_renumber, reg_old_renumber.174
	movq	%rax, %rdi	# reg_old_renumber.174,
	call	free	#
	.loc 1 1275 0
	movq	pseudo_previous_regs(%rip), %rax	# pseudo_previous_regs, pseudo_previous_regs.175
	movq	%rax, %rdi	# pseudo_previous_regs.175,
	call	free	#
	.loc 1 1276 0
	movq	pseudo_forbidden_regs(%rip), %rax	# pseudo_forbidden_regs, pseudo_forbidden_regs.176
	movq	%rax, %rdi	# pseudo_forbidden_regs.176,
	call	free	#
	.loc 1 1278 0
	movq	$0, used_spill_regs(%rip)	#, used_spill_regs
	.loc 1 1279 0
	movl	$0, -268(%rbp)	#, i
	jmp	.L217	#
.L218:
	.loc 1 1280 0 discriminator 2
	movl	-268(%rbp), %eax	# i, tmp1017
	cltq
	movzwl	spill_regs(%rax,%rax), %eax	# spill_regs, D.27978
	cwtl
	movl	$1, %edx	#, tmp1018
	movl	%eax, %ecx	# D.27966, tmp1046
	salq	%cl, %rdx	# tmp1046, D.27971
	movq	used_spill_regs(%rip), %rax	# used_spill_regs, used_spill_regs.177
	orq	%rdx, %rax	# D.27971, used_spill_regs.178
	movq	%rax, used_spill_regs(%rip)	# used_spill_regs.178, used_spill_regs
	.loc 1 1279 0 discriminator 2
	addl	$1, -268(%rbp)	#, i
.L217:
	.loc 1 1279 0 is_stmt 0 discriminator 1
	movl	n_spills(%rip), %eax	# n_spills, n_spills.179
	cmpl	%eax, -268(%rbp)	# n_spills.179, i
	jl	.L218	#,
.LBB34:
	.loc 1 1283 0 is_stmt 1
	movq	$reload_obstack, -32(%rbp)	#, __o
	movq	reload_startobj(%rip), %rax	# reload_startobj, tmp1019
	movq	%rax, -24(%rbp)	# tmp1019, __obj
	movq	-32(%rbp), %rax	# __o, tmp1020
	movq	8(%rax), %rax	# __o_687->chunk, D.27967
	cmpq	-24(%rbp), %rax	# __obj, D.27967
	jae	.L219	#,
	.loc 1 1283 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# __o, tmp1021
	movq	32(%rax), %rax	# __o_687->chunk_limit, D.27963
	cmpq	-24(%rbp), %rax	# __obj, D.27963
	jbe	.L219	#,
	movq	-32(%rbp), %rax	# __o, tmp1022
	movq	-24(%rbp), %rdx	# __obj, tmp1023
	movq	%rdx, 16(%rax)	# tmp1023, __o_687->object_base
	movq	-32(%rbp), %rax	# __o, tmp1024
	movq	16(%rax), %rdx	# __o_687->object_base, D.27963
	movq	-32(%rbp), %rax	# __o, tmp1025
	movq	%rdx, 24(%rax)	# D.27963, __o_687->next_free
	jmp	.L220	#
.L219:
	.loc 1 1283 0 discriminator 2
	movq	-24(%rbp), %rdx	# __obj, tmp1026
	movq	-32(%rbp), %rax	# __o, tmp1027
	movq	%rdx, %rsi	# tmp1026,
	movq	%rax, %rdi	# tmp1027,
	call	obstack_free	#
.L220:
.LBE34:
	.loc 1 1284 0 is_stmt 1
	movq	$0, unused_insn_chains(%rip)	#, unused_insn_chains
	.loc 1 1285 0
	call	fixup_abnormal_edges	#
	.loc 1 1290 0
	movq	-280(%rbp), %rax	# first, tmp1028
	movq	%rax, %rdi	# tmp1028,
	call	unshare_all_rtl_again	#
	.loc 1 1292 0
	movl	failure(%rip), %eax	# failure, D.27966
	.loc 1 1293 0
	addq	$280, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	reload, .-reload
	.type	maybe_fix_stack_asms, @function
maybe_fix_stack_asms:
.LFB7:
	.loc 1 1304 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$432, %rsp	#,
	.loc 1 1310 0
	movq	reload_insn_chain(%rip), %rax	# reload_insn_chain, tmp136
	movq	%rax, -416(%rbp)	# tmp136, chain
	jmp	.L224	#
.L301:
.LBB35:
	.loc 1 1316 0
	movq	-416(%rbp), %rax	# chain, tmp137
	movq	32(%rax), %rax	# chain_1->insn, D.27988
	movzwl	(%rax), %eax	# _42->code, D.27989
	movzwl	%ax, %eax	# D.27989, D.27990
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.27991
	cmpb	$105, %al	#, D.27991
	jne	.L225	#,
	.loc 1 1317 0
	movq	-416(%rbp), %rax	# chain, tmp139
	movq	32(%rax), %rax	# chain_1->insn, D.27988
	movq	32(%rax), %rax	# _46->fld[3].rtx, D.27988
	movq	%rax, %rdi	# D.27988,
	call	asm_noperands	#
	movl	%eax, -420(%rbp)	# tmp140, noperands
	cmpl	$0, -420(%rbp)	#, noperands
	jns	.L226	#,
.L225:
	.loc 1 1318 0
	jmp	.L227	#
.L226:
	.loc 1 1319 0
	movq	-416(%rbp), %rax	# chain, tmp141
	movq	32(%rax), %rax	# chain_1->insn, D.27988
	movq	32(%rax), %rax	# _49->fld[3].rtx, tmp142
	movq	%rax, -384(%rbp)	# tmp142, pat
	.loc 1 1320 0
	movq	-384(%rbp), %rax	# pat, tmp143
	movzwl	(%rax), %eax	# pat_50->code, D.27989
	cmpw	$39, %ax	#, D.27989
	je	.L228	#,
	.loc 1 1321 0
	jmp	.L227	#
.L228:
	.loc 1 1323 0
	movq	$0, -408(%rbp)	#, clobbered
	.loc 1 1324 0
	movq	$0, -400(%rbp)	#, allowed
	.loc 1 1327 0
	movl	$0, -428(%rbp)	#, i
	jmp	.L229	#
.L231:
.LBB36:
	.loc 1 1329 0
	movq	-384(%rbp), %rax	# pat, tmp144
	movq	8(%rax), %rax	# pat_50->fld[0].rtvec, D.27992
	movl	-428(%rbp), %edx	# i, tmp146
	movslq	%edx, %rdx	# tmp146, tmp145
	movq	8(%rax,%rdx,8), %rax	# _57->elem, tmp147
	movq	%rax, -376(%rbp)	# tmp147, t
	.loc 1 1330 0
	movq	-376(%rbp), %rax	# t, tmp148
	movzwl	(%rax), %eax	# t_58->code, D.27989
	cmpw	$49, %ax	#, D.27989
	jne	.L230	#,
	.loc 1 1330 0 is_stmt 0 discriminator 1
	movq	-376(%rbp), %rax	# t, tmp149
	movq	8(%rax), %rax	# t_58->fld[0].rtx, D.27988
	movzwl	(%rax), %eax	# _60->code, D.27989
	cmpw	$61, %ax	#, D.27989
	jne	.L230	#,
	movq	-376(%rbp), %rax	# t, tmp150
	movq	8(%rax), %rax	# t_58->fld[0].rtx, D.27988
	movl	8(%rax), %eax	# _62->fld[0].rtuint, D.27993
	cmpl	$7, %eax	#, D.27993
	jbe	.L230	#,
	movq	-376(%rbp), %rax	# t, tmp151
	movq	8(%rax), %rax	# t_58->fld[0].rtx, D.27988
	movl	8(%rax), %eax	# _64->fld[0].rtuint, D.27993
	cmpl	$15, %eax	#, D.27993
	ja	.L230	#,
	.loc 1 1331 0 is_stmt 1
	movq	-376(%rbp), %rax	# t, tmp152
	movq	8(%rax), %rax	# t_58->fld[0].rtx, D.27988
	movl	8(%rax), %eax	# _66->fld[0].rtuint, D.27993
	movl	$1, %edx	#, tmp153
	movl	%eax, %ecx	# D.27990, tmp199
	salq	%cl, %rdx	# tmp199, D.27994
	movq	%rdx, %rax	# D.27994, D.27994
	orq	%rax, -408(%rbp)	# D.27994, clobbered
.L230:
.LBE36:
	.loc 1 1327 0
	addl	$1, -428(%rbp)	#, i
.L229:
	.loc 1 1327 0 is_stmt 0 discriminator 1
	movq	-384(%rbp), %rax	# pat, tmp154
	movq	8(%rax), %rax	# pat_50->fld[0].rtvec, D.27992
	movl	(%rax), %eax	# _55->num_elem, D.27990
	cmpl	-428(%rbp), %eax	# i, D.27990
	jg	.L231	#,
	.loc 1 1335 0 is_stmt 1
	leaq	-368(%rbp), %rcx	#, tmp155
	leaq	-240(%rbp), %rdx	#, tmp156
	movq	-384(%rbp), %rax	# pat, tmp157
	movq	%rcx, %r8	# tmp155,
	movq	%rdx, %rcx	# tmp156,
	movl	$recog_data+240, %edx	#,
	movl	$recog_data, %esi	#,
	movq	%rax, %rdi	# tmp157,
	call	decode_asm_operands	#
	.loc 1 1339 0
	movl	$0, -428(%rbp)	#, i
	jmp	.L232	#
.L297:
.LBB37:
	.loc 1 1341 0
	movl	-428(%rbp), %eax	# i, tmp159
	cltq
	movq	-240(%rbp,%rax,8), %rax	# constraints, tmp160
	movq	%rax, -392(%rbp)	# tmp160, p
	.loc 1 1345 0
	movl	$0, -424(%rbp)	#, cls
.L296:
.LBB38:
	.loc 1 1349 0
	movq	-392(%rbp), %rax	# p, p.180
	leaq	1(%rax), %rdx	#, tmp161
	movq	%rdx, -392(%rbp)	# tmp161, p
	movzbl	(%rax), %eax	# *p.180_75, tmp162
	movb	%al, -429(%rbp)	# tmp162, c
	.loc 1 1351 0
	cmpb	$0, -429(%rbp)	#, c
	je	.L233	#,
	.loc 1 1351 0 is_stmt 0 discriminator 1
	cmpb	$44, -429(%rbp)	#, c
	je	.L233	#,
	cmpb	$35, -429(%rbp)	#, c
	jne	.L234	#,
.L233:
	.loc 1 1355 0 is_stmt 1
	movl	-424(%rbp), %eax	# cls, tmp164
	cltq
	movq	reg_class_contents(,%rax,8), %rax	# reg_class_contents, D.27994
	orq	%rax, -400(%rbp)	# D.27994, allowed
	.loc 1 1356 0
	movl	$0, -424(%rbp)	#, cls
	.loc 1 1357 0
	cmpb	$35, -429(%rbp)	#, c
	jne	.L235	#,
.L236:
	.loc 1 1359 0 discriminator 1
	movq	-392(%rbp), %rax	# p, p.181
	leaq	1(%rax), %rdx	#, tmp165
	movq	%rdx, -392(%rbp)	# tmp165, p
	movzbl	(%rax), %eax	# *p.181_156, tmp166
	movb	%al, -429(%rbp)	# tmp166, c
	.loc 1 1360 0 discriminator 1
	cmpb	$0, -429(%rbp)	#, c
	je	.L235	#,
	cmpb	$44, -429(%rbp)	#, c
	jne	.L236	#,
.L235:
	.loc 1 1361 0
	cmpb	$0, -429(%rbp)	#, c
	jne	.L237	#,
	.loc 1 1362 0
	nop
.LBE38:
.LBE37:
	.loc 1 1339 0
	addl	$1, -428(%rbp)	#, i
	jmp	.L232	#
.L237:
.LBB41:
.LBB39:
	.loc 1 1363 0
	jmp	.L239	#
.L234:
	.loc 1 1366 0
	movsbl	-429(%rbp), %eax	# c, D.27990
	subl	$33, %eax	#, tmp167
	cmpl	$82, %eax	#, tmp167
	ja	.L240	#,
	movl	%eax, %eax	# tmp167, tmp168
	movq	.L242(,%rax,8), %rax	#, tmp169
	jmp	*%rax	# tmp169
	.section	.rodata
	.align 8
	.align 4
.L242:
	.quad	.L302
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L302
	.quad	.L302
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L302
	.quad	.L302
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L302
	.quad	.L302
	.quad	.L240
	.quad	.L240
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L302
	.quad	.L240
	.quad	.L302
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L243
	.quad	.L240
	.quad	.L302
	.quad	.L240
	.quad	.L240
	.quad	.L240
	.quad	.L302
	.quad	.L302
	.quad	.L302
	.quad	.L244
	.quad	.L240
	.quad	.L243
	.quad	.L302
	.text
.L244:
	.loc 1 1378 0
	movl	-424(%rbp), %eax	# cls, tmp171
	movslq	%eax, %rdx	# tmp171, tmp170
	movq	%rdx, %rax	# tmp170, tmp172
	salq	$2, %rax	#, tmp172
	addq	%rdx, %rax	# tmp170, tmp172
	leaq	0(,%rax,4), %rdx	#, tmp173
	addq	%rdx, %rax	# tmp173, tmp172
	salq	$2, %rax	#, tmp174
	addq	$reg_class_subunion+48, %rax	#, tmp175
	movl	(%rax), %eax	# reg_class_subunion, D.27995
	.loc 1 1377 0
	movl	%eax, -424(%rbp)	# D.27995, cls
	.loc 1 1379 0
	jmp	.L239	#
.L243:
	.loc 1 1383 0
	movl	-424(%rbp), %eax	# cls, tmp177
	movslq	%eax, %rdx	# tmp177, tmp176
	movq	%rdx, %rax	# tmp176, tmp178
	salq	$2, %rax	#, tmp178
	addq	%rdx, %rax	# tmp176, tmp178
	leaq	0(,%rax,4), %rdx	#, tmp179
	addq	%rdx, %rax	# tmp179, tmp178
	salq	$2, %rax	#, tmp180
	addq	$reg_class_subunion+48, %rax	#, tmp181
	movl	(%rax), %eax	# reg_class_subunion, D.27995
	movl	%eax, -424(%rbp)	# D.27995, cls
	.loc 1 1384 0
	jmp	.L239	#
.L240:
	.loc 1 1387 0
	cmpb	$114, -429(%rbp)	#, c
	je	.L245	#,
	.loc 1 1387 0 is_stmt 0 discriminator 1
	cmpb	$82, -429(%rbp)	#, c
	je	.L246	#,
	cmpb	$113, -429(%rbp)	#, c
	jne	.L247	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.186
	andl	$33554432, %eax	#, D.27990
	testl	%eax, %eax	# D.27990
	je	.L248	#,
	movl	$12, %eax	#, iftmp.185
	jmp	.L295	#
.L248:
	.loc 1 1387 0 discriminator 2
	movl	$8, %eax	#, iftmp.185
	jmp	.L295	#
.L247:
	cmpb	$81, -429(%rbp)	#, c
	je	.L251	#,
	.loc 1 1387 0 discriminator 1
	cmpb	$102, -429(%rbp)	#, c
	jne	.L252	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.190
	andl	$1, %eax	#, D.27990
	testl	%eax, %eax	# D.27990
	jne	.L253	#,
	.loc 1 1387 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.191
	andl	$32, %eax	#, D.27990
	testl	%eax, %eax	# D.27990
	je	.L254	#,
.L253:
	.loc 1 1387 0 discriminator 1
	movl	$15, %eax	#, iftmp.189
	jmp	.L255	#
.L254:
	movl	$0, %eax	#, iftmp.189
.L255:
	jmp	.L295	#
.L252:
	.loc 1 1387 0 discriminator 2
	cmpb	$116, -429(%rbp)	#, c
	jne	.L257	#,
	.loc 1 1387 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.194
	andl	$1, %eax	#, D.27990
	testl	%eax, %eax	# D.27990
	jne	.L258	#,
	.loc 1 1387 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.195
	andl	$32, %eax	#, D.27990
	testl	%eax, %eax	# D.27990
	je	.L259	#,
.L258:
	.loc 1 1387 0 discriminator 1
	movl	$13, %eax	#, iftmp.193
	jmp	.L260	#
.L259:
	movl	$0, %eax	#, iftmp.193
.L260:
	jmp	.L295	#
.L257:
	.loc 1 1387 0 discriminator 2
	cmpb	$117, -429(%rbp)	#, c
	jne	.L262	#,
	.loc 1 1387 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.198
	andl	$1, %eax	#, D.27990
	testl	%eax, %eax	# D.27990
	jne	.L263	#,
	.loc 1 1387 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.199
	andl	$32, %eax	#, D.27990
	testl	%eax, %eax	# D.27990
	je	.L264	#,
.L263:
	.loc 1 1387 0 discriminator 1
	movl	$14, %eax	#, iftmp.197
	jmp	.L265	#
.L264:
	movl	$0, %eax	#, iftmp.197
.L265:
	jmp	.L295	#
.L262:
	.loc 1 1387 0 discriminator 2
	cmpb	$97, -429(%rbp)	#, c
	je	.L267	#,
	.loc 1 1387 0 discriminator 1
	cmpb	$98, -429(%rbp)	#, c
	je	.L268	#,
	cmpb	$99, -429(%rbp)	#, c
	je	.L269	#,
	cmpb	$100, -429(%rbp)	#, c
	je	.L270	#,
	cmpb	$120, -429(%rbp)	#, c
	jne	.L271	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.206
	andl	$327680, %eax	#, D.27990
	testl	%eax, %eax	# D.27990
	je	.L272	#,
	movl	$16, %eax	#, iftmp.205
	jmp	.L295	#
.L272:
	.loc 1 1387 0 discriminator 2
	movl	$0, %eax	#, iftmp.205
	jmp	.L295	#
.L271:
	cmpb	$89, -429(%rbp)	#, c
	jne	.L275	#,
	.loc 1 1387 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.209
	andl	$262144, %eax	#, D.27990
	testl	%eax, %eax	# D.27990
	je	.L276	#,
	movl	$16, %eax	#, iftmp.208
	jmp	.L295	#
.L276:
	.loc 1 1387 0 discriminator 2
	movl	$0, %eax	#, iftmp.208
	jmp	.L295	#
.L275:
	cmpb	$121, -429(%rbp)	#, c
	jne	.L279	#,
	.loc 1 1387 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.212
	andl	$16384, %eax	#, D.27990
	testl	%eax, %eax	# D.27990
	je	.L280	#,
	movl	$17, %eax	#, iftmp.211
	jmp	.L295	#
.L280:
	.loc 1 1387 0 discriminator 2
	movl	$0, %eax	#, iftmp.211
	jmp	.L295	#
.L279:
	cmpb	$65, -429(%rbp)	#, c
	je	.L283	#,
	.loc 1 1387 0 discriminator 1
	cmpb	$68, -429(%rbp)	#, c
	je	.L284	#,
	cmpb	$83, -429(%rbp)	#, c
	jne	.L285	#,
	movl	$5, %eax	#, iftmp.215
	jmp	.L295	#
.L285:
	.loc 1 1387 0 discriminator 2
	movl	$0, %eax	#, iftmp.215
	jmp	.L295	#
.L284:
	movl	$6, %eax	#, iftmp.214
	jmp	.L295	#
.L283:
	movl	$7, %eax	#, iftmp.213
	jmp	.L295	#
.L270:
	movl	$2, %eax	#, iftmp.203
	jmp	.L295	#
.L269:
	movl	$3, %eax	#, iftmp.202
	jmp	.L295	#
.L268:
	movl	$4, %eax	#, iftmp.201
	jmp	.L295	#
.L267:
	movl	$1, %eax	#, iftmp.200
	jmp	.L295	#
.L251:
	movl	$8, %eax	#, iftmp.187
	jmp	.L295	#
.L246:
	movl	$11, %eax	#, iftmp.183
	jmp	.L295	#
.L245:
	movl	$12, %eax	#, iftmp.182
.L295:
	.loc 1 1387 0 discriminator 3
	movslq	%eax, %rcx	# iftmp.182, tmp182
	movl	-424(%rbp), %eax	# cls, tmp184
	movslq	%eax, %rdx	# tmp184, tmp183
	movq	%rdx, %rax	# tmp183, tmp185
	salq	$2, %rax	#, tmp185
	addq	%rdx, %rax	# tmp183, tmp185
	leaq	0(,%rax,4), %rdx	#, tmp186
	addq	%rdx, %rax	# tmp186, tmp185
	addq	%rcx, %rax	# tmp182, tmp187
	movl	reg_class_subunion(,%rax,4), %eax	# reg_class_subunion, D.27995
	movl	%eax, -424(%rbp)	# D.27995, cls
.LBE39:
	.loc 1 1390 0 is_stmt 1 discriminator 3
	jmp	.L296	#
.L302:
.LBB40:
	.loc 1 1374 0
	nop
.L239:
.LBE40:
	.loc 1 1390 0
	jmp	.L296	#
.L232:
.LBE41:
	.loc 1 1339 0 discriminator 1
	movl	-428(%rbp), %eax	# i, tmp188
	cmpl	-420(%rbp), %eax	# noperands, tmp188
	jl	.L297	#,
	.loc 1 1395 0
	movq	-408(%rbp), %rax	# clobbered, tmp189
	andq	%rax, -400(%rbp)	# tmp189, allowed
	.loc 1 1396 0
	movl	$0, -428(%rbp)	#, i
	jmp	.L298	#
.L300:
	.loc 1 1397 0
	movl	-428(%rbp), %eax	# i, tmp190
	movq	-400(%rbp), %rdx	# allowed, tmp191
	movl	%eax, %ecx	# tmp190, tmp201
	shrq	%cl, %rdx	# tmp201, D.27994
	movq	%rdx, %rax	# D.27994, D.27994
	andl	$1, %eax	#, D.27994
	testq	%rax, %rax	# D.27994
	je	.L299	#,
	.loc 1 1399 0
	movq	-416(%rbp), %rax	# chain, tmp192
	leaq	40(%rax), %rdx	#, D.27996
	movl	-428(%rbp), %eax	# i, tmp193
	movl	%eax, %esi	# tmp193,
	movq	%rdx, %rdi	# D.27996,
	call	bitmap_clear_bit	#
	.loc 1 1400 0
	movq	-416(%rbp), %rax	# chain, tmp194
	leaq	64(%rax), %rdx	#, D.27996
	movl	-428(%rbp), %eax	# i, tmp195
	movl	%eax, %esi	# tmp195,
	movq	%rdx, %rdi	# D.27996,
	call	bitmap_clear_bit	#
.L299:
	.loc 1 1396 0
	addl	$1, -428(%rbp)	#, i
.L298:
	.loc 1 1396 0 is_stmt 0 discriminator 1
	cmpl	$52, -428(%rbp)	#, i
	jle	.L300	#,
.L227:
.LBE35:
	.loc 1 1310 0 is_stmt 1
	movq	-416(%rbp), %rax	# chain, tmp196
	movq	(%rax), %rax	# chain_1->next, tmp197
	movq	%rax, -416(%rbp)	# tmp197, chain
.L224:
	.loc 1 1310 0 is_stmt 0 discriminator 1
	cmpq	$0, -416(%rbp)	#, chain
	jne	.L301	#,
	.loc 1 1405 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	maybe_fix_stack_asms, .-maybe_fix_stack_asms
	.type	copy_reloads, @function
copy_reloads:
.LFB8:
	.loc 1 1412 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# chain, chain
	.loc 1 1413 0
	movl	n_reloads(%rip), %edx	# n_reloads, n_reloads.216
	movq	-88(%rbp), %rax	# chain, tmp134
	movl	%edx, 96(%rax)	# n_reloads.216, chain_2(D)->n_reloads
.LBB42:
	.loc 1 1415 0
	movq	$reload_obstack, -64(%rbp)	#, __h
.LBB43:
	movq	-64(%rbp), %rax	# __h, tmp135
	movq	%rax, -56(%rbp)	# tmp135, __o
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.217
	imull	$104, %eax, %eax	#, n_reloads.218, D.27997
	movl	%eax, -72(%rbp)	# D.27997, __len
	movq	-56(%rbp), %rax	# __o, tmp136
	movq	32(%rax), %rax	# __o_4->chunk_limit, D.27998
	movq	%rax, %rdx	# D.27998, D.27999
	movq	-56(%rbp), %rax	# __o, tmp137
	movq	24(%rax), %rax	# __o_4->next_free, D.27998
	subq	%rax, %rdx	# D.27999, D.27999
	movl	-72(%rbp), %eax	# __len, tmp138
	cltq
	cmpq	%rax, %rdx	# D.27999, D.27999
	jge	.L304	#,
	.loc 1 1415 0 is_stmt 0 discriminator 1
	movl	-72(%rbp), %edx	# __len, tmp139
	movq	-56(%rbp), %rax	# __o, tmp140
	movl	%edx, %esi	# tmp139,
	movq	%rax, %rdi	# tmp140,
	call	_obstack_newchunk	#
.L304:
	.loc 1 1415 0 discriminator 2
	movq	-56(%rbp), %rax	# __o, tmp141
	movq	24(%rax), %rdx	# __o_4->next_free, D.27998
	movl	-72(%rbp), %eax	# __len, tmp142
	cltq
	addq	%rax, %rdx	# D.28000, D.27998
	movq	-56(%rbp), %rax	# __o, tmp143
	movq	%rdx, 24(%rax)	# D.27998, __o_4->next_free
.LBE43:
.LBB44:
	movq	-64(%rbp), %rax	# __h, tmp144
	movq	%rax, -48(%rbp)	# tmp144, __o1
	movq	-48(%rbp), %rax	# __o1, tmp145
	movq	16(%rax), %rax	# __o1_18->object_base, tmp146
	movq	%rax, -40(%rbp)	# tmp146, value
	movq	-48(%rbp), %rax	# __o1, tmp147
	movq	24(%rax), %rax	# __o1_18->next_free, D.27998
	cmpq	-40(%rbp), %rax	# value, D.27998
	jne	.L305	#,
	.loc 1 1415 0 discriminator 1
	movq	-48(%rbp), %rax	# __o1, tmp148
	movzbl	80(%rax), %edx	# __o1_18->maybe_empty_object, tmp151
	orl	$2, %edx	#, tmp152
	movb	%dl, 80(%rax)	# tmp152, __o1_18->maybe_empty_object
.L305:
	.loc 1 1415 0 discriminator 2
	movq	-48(%rbp), %rax	# __o1, tmp153
	movq	24(%rax), %rax	# __o1_18->next_free, D.27998
	movq	%rax, %rdx	# D.27998, D.27999
	movq	-48(%rbp), %rax	# __o1, tmp154
	movl	48(%rax), %eax	# __o1_18->alignment_mask, D.28001
	cltq
	addq	%rax, %rdx	# D.27999, D.27999
	movq	-48(%rbp), %rax	# __o1, tmp155
	movl	48(%rax), %eax	# __o1_18->alignment_mask, D.28001
	notl	%eax	# D.28001
	cltq
	andq	%rdx, %rax	# D.27999, D.27999
	movq	%rax, %rdx	# D.27999, D.27998
	movq	-48(%rbp), %rax	# __o1, tmp156
	movq	%rdx, 24(%rax)	# D.27998, __o1_18->next_free
	movq	-48(%rbp), %rax	# __o1, tmp157
	movq	24(%rax), %rax	# __o1_18->next_free, D.27998
	movq	%rax, %rdx	# D.27998, D.27999
	movq	-48(%rbp), %rax	# __o1, tmp158
	movq	8(%rax), %rax	# __o1_18->chunk, D.28002
	movq	%rdx, %rcx	# D.27999, D.27999
	subq	%rax, %rcx	# D.27999, D.27999
	movq	-48(%rbp), %rax	# __o1, tmp159
	movq	32(%rax), %rax	# __o1_18->chunk_limit, D.27998
	movq	%rax, %rdx	# D.27998, D.27999
	movq	-48(%rbp), %rax	# __o1, tmp160
	movq	8(%rax), %rax	# __o1_18->chunk, D.28002
	subq	%rax, %rdx	# D.27999, D.27999
	movq	%rdx, %rax	# D.27999, D.27999
	cmpq	%rax, %rcx	# D.27999, D.27999
	jle	.L306	#,
	.loc 1 1415 0 discriminator 1
	movq	-48(%rbp), %rax	# __o1, tmp161
	movq	32(%rax), %rdx	# __o1_18->chunk_limit, D.27998
	movq	-48(%rbp), %rax	# __o1, tmp162
	movq	%rdx, 24(%rax)	# D.27998, __o1_18->next_free
.L306:
	.loc 1 1415 0 discriminator 2
	movq	-48(%rbp), %rax	# __o1, tmp163
	movq	24(%rax), %rdx	# __o1_18->next_free, D.27998
	movq	-48(%rbp), %rax	# __o1, tmp164
	movq	%rdx, 16(%rax)	# D.27998, __o1_18->object_base
	movq	-40(%rbp), %rdx	# value, D.28003
.LBE44:
.LBE42:
	movq	-88(%rbp), %rax	# chain, tmp165
	movq	%rdx, 88(%rax)	# D.28003, chain_2(D)->rld
	.loc 1 1417 0 is_stmt 1 discriminator 2
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.219
	movslq	%eax, %rdx	# n_reloads.219, D.28004
	movq	%rdx, %rax	# D.28004, tmp166
	addq	%rax, %rax	# tmp166
	addq	%rdx, %rax	# D.28004, tmp166
	salq	$2, %rax	#, tmp166
	addq	%rdx, %rax	# D.28004, tmp166
	salq	$3, %rax	#, tmp167
	movq	%rax, %rdx	# tmp166, D.28004
	movq	-88(%rbp), %rax	# chain, tmp168
	movq	88(%rax), %rax	# chain_2(D)->rld, D.28005
	movl	$rld, %esi	#,
	movq	%rax, %rdi	# D.28005,
	call	memcpy	#
.LBB45:
	.loc 1 1418 0 discriminator 2
	movq	$reload_obstack, -32(%rbp)	#, __h
.LBB46:
	movq	-32(%rbp), %rax	# __h, tmp169
	movq	%rax, -24(%rbp)	# tmp169, __o
	movl	$0, -68(%rbp)	#, __len
	movq	-24(%rbp), %rax	# __o, tmp170
	movq	32(%rax), %rax	# __o_50->chunk_limit, D.27998
	movq	%rax, %rdx	# D.27998, D.27999
	movq	-24(%rbp), %rax	# __o, tmp171
	movq	24(%rax), %rax	# __o_50->next_free, D.27998
	subq	%rax, %rdx	# D.27999, D.27999
	movl	-68(%rbp), %eax	# __len, tmp172
	cltq
	cmpq	%rax, %rdx	# D.27999, D.27999
	jge	.L307	#,
	.loc 1 1418 0 is_stmt 0 discriminator 1
	movl	-68(%rbp), %edx	# __len, tmp173
	movq	-24(%rbp), %rax	# __o, tmp174
	movl	%edx, %esi	# tmp173,
	movq	%rax, %rdi	# tmp174,
	call	_obstack_newchunk	#
.L307:
	.loc 1 1418 0 discriminator 2
	movq	-24(%rbp), %rax	# __o, tmp175
	movq	24(%rax), %rdx	# __o_50->next_free, D.27998
	movl	-68(%rbp), %eax	# __len, tmp176
	cltq
	addq	%rax, %rdx	# D.28000, D.27998
	movq	-24(%rbp), %rax	# __o, tmp177
	movq	%rdx, 24(%rax)	# D.27998, __o_50->next_free
.LBE46:
.LBB47:
	movq	-32(%rbp), %rax	# __h, tmp178
	movq	%rax, -16(%rbp)	# tmp178, __o1
	movq	-16(%rbp), %rax	# __o1, tmp179
	movq	16(%rax), %rax	# __o1_61->object_base, tmp180
	movq	%rax, -8(%rbp)	# tmp180, value
	movq	-16(%rbp), %rax	# __o1, tmp181
	movq	24(%rax), %rax	# __o1_61->next_free, D.27998
	cmpq	-8(%rbp), %rax	# value, D.27998
	jne	.L308	#,
	.loc 1 1418 0 discriminator 1
	movq	-16(%rbp), %rax	# __o1, tmp182
	movzbl	80(%rax), %edx	# __o1_61->maybe_empty_object, tmp185
	orl	$2, %edx	#, tmp186
	movb	%dl, 80(%rax)	# tmp186, __o1_61->maybe_empty_object
.L308:
	.loc 1 1418 0 discriminator 2
	movq	-16(%rbp), %rax	# __o1, tmp187
	movq	24(%rax), %rax	# __o1_61->next_free, D.27998
	movq	%rax, %rdx	# D.27998, D.27999
	movq	-16(%rbp), %rax	# __o1, tmp188
	movl	48(%rax), %eax	# __o1_61->alignment_mask, D.28001
	cltq
	addq	%rax, %rdx	# D.27999, D.27999
	movq	-16(%rbp), %rax	# __o1, tmp189
	movl	48(%rax), %eax	# __o1_61->alignment_mask, D.28001
	notl	%eax	# D.28001
	cltq
	andq	%rdx, %rax	# D.27999, D.27999
	movq	%rax, %rdx	# D.27999, D.27998
	movq	-16(%rbp), %rax	# __o1, tmp190
	movq	%rdx, 24(%rax)	# D.27998, __o1_61->next_free
	movq	-16(%rbp), %rax	# __o1, tmp191
	movq	24(%rax), %rax	# __o1_61->next_free, D.27998
	movq	%rax, %rdx	# D.27998, D.27999
	movq	-16(%rbp), %rax	# __o1, tmp192
	movq	8(%rax), %rax	# __o1_61->chunk, D.28002
	movq	%rdx, %rcx	# D.27999, D.27999
	subq	%rax, %rcx	# D.27999, D.27999
	movq	-16(%rbp), %rax	# __o1, tmp193
	movq	32(%rax), %rax	# __o1_61->chunk_limit, D.27998
	movq	%rax, %rdx	# D.27998, D.27999
	movq	-16(%rbp), %rax	# __o1, tmp194
	movq	8(%rax), %rax	# __o1_61->chunk, D.28002
	subq	%rax, %rdx	# D.27999, D.27999
	movq	%rdx, %rax	# D.27999, D.27999
	cmpq	%rax, %rcx	# D.27999, D.27999
	jle	.L309	#,
	.loc 1 1418 0 discriminator 1
	movq	-16(%rbp), %rax	# __o1, tmp195
	movq	32(%rax), %rdx	# __o1_61->chunk_limit, D.27998
	movq	-16(%rbp), %rax	# __o1, tmp196
	movq	%rdx, 24(%rax)	# D.27998, __o1_61->next_free
.L309:
	.loc 1 1418 0 discriminator 2
	movq	-16(%rbp), %rax	# __o1, tmp197
	movq	24(%rax), %rdx	# __o1_61->next_free, D.27998
	movq	-16(%rbp), %rax	# __o1, tmp198
	movq	%rdx, 16(%rax)	# D.27998, __o1_61->object_base
	movq	-8(%rbp), %rax	# value, D.28003
.LBE47:
.LBE45:
	movq	%rax, reload_insn_firstobj(%rip)	# reload_insn_firstobj.220, reload_insn_firstobj
	.loc 1 1419 0 is_stmt 1 discriminator 2
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	copy_reloads, .-copy_reloads
	.type	calculate_needs_all_insns, @function
calculate_needs_all_insns:
.LFB9:
	.loc 1 1427 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$144, %rsp	#,
	movl	%edi, -132(%rbp)	# global, global
	.loc 1 1428 0
	movq	$insns_need_reload, -112(%rbp)	#, pprev_reload
	.loc 1 1429 0
	movq	$0, -96(%rbp)	#, next
	.loc 1 1431 0
	movl	$0, something_needs_elimination(%rip)	#, something_needs_elimination
.LBB48:
	.loc 1 1433 0
	movq	$reload_obstack, -88(%rbp)	#, __h
.LBB49:
	movq	-88(%rbp), %rax	# __h, tmp163
	movq	%rax, -80(%rbp)	# tmp163, __o
	movl	$0, -124(%rbp)	#, __len
	movq	-80(%rbp), %rax	# __o, tmp164
	movq	32(%rax), %rax	# __o_12->chunk_limit, D.28006
	movq	%rax, %rdx	# D.28006, D.28007
	movq	-80(%rbp), %rax	# __o, tmp165
	movq	24(%rax), %rax	# __o_12->next_free, D.28006
	subq	%rax, %rdx	# D.28007, D.28007
	movl	-124(%rbp), %eax	# __len, tmp166
	cltq
	cmpq	%rax, %rdx	# D.28007, D.28007
	jge	.L311	#,
	.loc 1 1433 0 is_stmt 0 discriminator 1
	movl	-124(%rbp), %edx	# __len, tmp167
	movq	-80(%rbp), %rax	# __o, tmp168
	movl	%edx, %esi	# tmp167,
	movq	%rax, %rdi	# tmp168,
	call	_obstack_newchunk	#
.L311:
	.loc 1 1433 0 discriminator 2
	movq	-80(%rbp), %rax	# __o, tmp169
	movq	24(%rax), %rdx	# __o_12->next_free, D.28006
	movl	-124(%rbp), %eax	# __len, tmp170
	cltq
	addq	%rax, %rdx	# D.28008, D.28006
	movq	-80(%rbp), %rax	# __o, tmp171
	movq	%rdx, 24(%rax)	# D.28006, __o_12->next_free
.LBE49:
.LBB50:
	movq	-88(%rbp), %rax	# __h, tmp172
	movq	%rax, -72(%rbp)	# tmp172, __o1
	movq	-72(%rbp), %rax	# __o1, tmp173
	movq	16(%rax), %rax	# __o1_23->object_base, tmp174
	movq	%rax, -64(%rbp)	# tmp174, value
	movq	-72(%rbp), %rax	# __o1, tmp175
	movq	24(%rax), %rax	# __o1_23->next_free, D.28006
	cmpq	-64(%rbp), %rax	# value, D.28006
	jne	.L312	#,
	.loc 1 1433 0 discriminator 1
	movq	-72(%rbp), %rax	# __o1, tmp176
	movzbl	80(%rax), %edx	# __o1_23->maybe_empty_object, tmp179
	orl	$2, %edx	#, tmp180
	movb	%dl, 80(%rax)	# tmp180, __o1_23->maybe_empty_object
.L312:
	.loc 1 1433 0 discriminator 2
	movq	-72(%rbp), %rax	# __o1, tmp181
	movq	24(%rax), %rax	# __o1_23->next_free, D.28006
	movq	%rax, %rdx	# D.28006, D.28007
	movq	-72(%rbp), %rax	# __o1, tmp182
	movl	48(%rax), %eax	# __o1_23->alignment_mask, D.28009
	cltq
	addq	%rax, %rdx	# D.28007, D.28007
	movq	-72(%rbp), %rax	# __o1, tmp183
	movl	48(%rax), %eax	# __o1_23->alignment_mask, D.28009
	notl	%eax	# D.28009
	cltq
	andq	%rdx, %rax	# D.28007, D.28007
	movq	%rax, %rdx	# D.28007, D.28006
	movq	-72(%rbp), %rax	# __o1, tmp184
	movq	%rdx, 24(%rax)	# D.28006, __o1_23->next_free
	movq	-72(%rbp), %rax	# __o1, tmp185
	movq	24(%rax), %rax	# __o1_23->next_free, D.28006
	movq	%rax, %rdx	# D.28006, D.28007
	movq	-72(%rbp), %rax	# __o1, tmp186
	movq	8(%rax), %rax	# __o1_23->chunk, D.28010
	movq	%rdx, %rcx	# D.28007, D.28007
	subq	%rax, %rcx	# D.28007, D.28007
	movq	-72(%rbp), %rax	# __o1, tmp187
	movq	32(%rax), %rax	# __o1_23->chunk_limit, D.28006
	movq	%rax, %rdx	# D.28006, D.28007
	movq	-72(%rbp), %rax	# __o1, tmp188
	movq	8(%rax), %rax	# __o1_23->chunk, D.28010
	subq	%rax, %rdx	# D.28007, D.28007
	movq	%rdx, %rax	# D.28007, D.28007
	cmpq	%rax, %rcx	# D.28007, D.28007
	jle	.L313	#,
	.loc 1 1433 0 discriminator 1
	movq	-72(%rbp), %rax	# __o1, tmp189
	movq	32(%rax), %rdx	# __o1_23->chunk_limit, D.28006
	movq	-72(%rbp), %rax	# __o1, tmp190
	movq	%rdx, 24(%rax)	# D.28006, __o1_23->next_free
.L313:
	.loc 1 1433 0 discriminator 2
	movq	-72(%rbp), %rax	# __o1, tmp191
	movq	24(%rax), %rdx	# __o1_23->next_free, D.28006
	movq	-72(%rbp), %rax	# __o1, tmp192
	movq	%rdx, 16(%rax)	# D.28006, __o1_23->object_base
	movq	-64(%rbp), %rax	# value, D.28011
.LBE50:
.LBE48:
	movq	%rax, reload_insn_firstobj(%rip)	# reload_insn_firstobj.221, reload_insn_firstobj
	.loc 1 1434 0 is_stmt 1 discriminator 2
	movq	reload_insn_chain(%rip), %rax	# reload_insn_chain, tmp193
	movq	%rax, -104(%rbp)	# tmp193, chain
	jmp	.L314	#
.L337:
.LBB51:
	.loc 1 1436 0
	movq	-104(%rbp), %rax	# chain, tmp194
	movq	32(%rax), %rax	# chain_3->insn, tmp195
	movq	%rax, -56(%rbp)	# tmp195, insn
	.loc 1 1438 0
	movq	-104(%rbp), %rax	# chain, tmp196
	movq	(%rax), %rax	# chain_3->next, tmp197
	movq	%rax, -96(%rbp)	# tmp197, next
	.loc 1 1441 0
	movq	-104(%rbp), %rax	# chain, tmp198
	movl	$0, 96(%rax)	#, chain_3->n_reloads
	.loc 1 1442 0
	movq	-104(%rbp), %rax	# chain, tmp199
	movzbl	262(%rax), %edx	# chain_3->need_elim, tmp202
	andl	$-5, %edx	#, tmp203
	movb	%dl, 262(%rax)	# tmp203, chain_3->need_elim
	.loc 1 1443 0
	movq	-104(%rbp), %rax	# chain, tmp204
	movzbl	262(%rax), %edx	# chain_3->need_reload, tmp207
	andl	$-2, %edx	#, tmp208
	movb	%dl, 262(%rax)	# tmp208, chain_3->need_reload
	.loc 1 1444 0
	movq	-104(%rbp), %rax	# chain, tmp209
	movzbl	262(%rax), %edx	# chain_3->need_operand_change, tmp212
	andl	$-3, %edx	#, tmp213
	movb	%dl, 262(%rax)	# tmp213, chain_3->need_operand_change
	.loc 1 1450 0
	movq	-56(%rbp), %rax	# insn, tmp214
	movzwl	(%rax), %eax	# insn_51->code, D.28012
	cmpw	$36, %ax	#, D.28012
	je	.L315	#,
	.loc 1 1450 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# insn, tmp215
	movzwl	(%rax), %eax	# insn_51->code, D.28012
	cmpw	$33, %ax	#, D.28012
	je	.L315	#,
	.loc 1 1451 0 is_stmt 1
	movq	-56(%rbp), %rax	# insn, tmp216
	movzwl	(%rax), %eax	# insn_51->code, D.28012
	movzwl	%ax, %eax	# D.28012, D.28009
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28013
	cmpb	$105, %al	#, D.28013
	jne	.L316	#,
	.loc 1 1451 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# insn, tmp218
	movq	56(%rax), %rax	# insn_51->fld[6].rtx, D.28014
	testq	%rax, %rax	# D.28014
	je	.L316	#,
.L315:
	.loc 1 1452 0 is_stmt 1
	movq	-56(%rbp), %rcx	# insn, tmp219
	movq	-56(%rbp), %rax	# insn, tmp220
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp219,
	movq	%rax, %rdi	# tmp220,
	call	set_label_offsets	#
.L316:
	.loc 1 1454 0
	movq	-56(%rbp), %rax	# insn, tmp221
	movzwl	(%rax), %eax	# insn_51->code, D.28012
	movzwl	%ax, %eax	# D.28012, D.28009
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28013
	cmpb	$105, %al	#, D.28013
	jne	.L317	#,
.LBB52:
	.loc 1 1456 0
	movq	-56(%rbp), %rax	# insn, tmp223
	movq	32(%rax), %rax	# insn_51->fld[3].rtx, tmp224
	movq	%rax, -48(%rbp)	# tmp224, old_body
	.loc 1 1457 0
	movq	-56(%rbp), %rax	# insn, tmp225
	movl	40(%rax), %eax	# insn_51->fld[4].rtint, tmp226
	movl	%eax, -120(%rbp)	# tmp226, old_code
	.loc 1 1458 0
	movq	-56(%rbp), %rax	# insn, tmp227
	movq	56(%rax), %rax	# insn_51->fld[6].rtx, tmp228
	movq	%rax, -40(%rbp)	# tmp228, old_notes
	.loc 1 1459 0
	movl	$0, -128(%rbp)	#, did_elimination
	.loc 1 1460 0
	movl	$0, -116(%rbp)	#, operands_changed
	.loc 1 1461 0
	movq	-56(%rbp), %rax	# insn, tmp229
	movzwl	(%rax), %eax	# insn_51->code, D.28012
	movzwl	%ax, %eax	# D.28012, D.28009
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28013
	cmpb	$105, %al	#, D.28013
	jne	.L318	#,
	.loc 1 1461 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# insn, tmp231
	movq	32(%rax), %rax	# insn_51->fld[3].rtx, D.28014
	movzwl	(%rax), %eax	# _70->code, D.28012
	cmpw	$47, %ax	#, D.28012
	jne	.L319	#,
	.loc 1 1461 0 discriminator 3
	movq	-56(%rbp), %rax	# insn, tmp232
	movq	32(%rax), %rax	# insn_51->fld[3].rtx, iftmp.223
	jmp	.L321	#
.L319:
	.loc 1 1461 0 discriminator 4
	movq	-56(%rbp), %rax	# insn, tmp233
	movq	32(%rax), %rdx	# insn_51->fld[3].rtx, D.28014
	movq	-56(%rbp), %rax	# insn, tmp234
	movq	%rdx, %rsi	# D.28014,
	movq	%rax, %rdi	# tmp234,
	call	single_set_2	#
	jmp	.L321	#
.L318:
	.loc 1 1461 0 discriminator 2
	movl	$0, %eax	#, iftmp.222
.L321:
	.loc 1 1461 0 discriminator 5
	movq	%rax, -32(%rbp)	# iftmp.222, set
	.loc 1 1464 0 is_stmt 1 discriminator 5
	cmpq	$0, -32(%rbp)	#, set
	je	.L322	#,
	.loc 1 1464 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# set, tmp235
	movq	8(%rax), %rax	# set_77->fld[0].rtx, D.28014
	movzwl	(%rax), %eax	# _78->code, D.28012
	cmpw	$61, %ax	#, D.28012
	jne	.L322	#,
	.loc 1 1465 0 is_stmt 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.224
	movq	-32(%rbp), %rax	# set, tmp236
	movq	8(%rax), %rax	# set_77->fld[0].rtx, D.28014
	movl	8(%rax), %eax	# _81->fld[0].rtuint, D.28015
	movl	%eax, %eax	# D.28015, D.28016
	addq	%rax, %rax	# D.28016
	addq	%rdx, %rax	# reg_renumber.224, D.28017
	movzwl	(%rax), %eax	# *_85, D.28018
	testw	%ax, %ax	# D.28018
	jns	.L322	#,
	.loc 1 1466 0
	movq	reg_equiv_constant(%rip), %rdx	# reg_equiv_constant, reg_equiv_constant.225
	movq	-32(%rbp), %rax	# set, tmp237
	movq	8(%rax), %rax	# set_77->fld[0].rtx, D.28014
	movl	8(%rax), %eax	# _88->fld[0].rtuint, D.28015
	movl	%eax, %eax	# D.28015, D.28016
	salq	$3, %rax	#, D.28016
	addq	%rdx, %rax	# reg_equiv_constant.225, D.28019
	movq	(%rax), %rax	# *_92, D.28014
	testq	%rax, %rax	# D.28014
	je	.L322	#,
	.loc 1 1467 0
	jmp	.L317	#
.L322:
	.loc 1 1470 0
	movl	num_eliminable(%rip), %eax	# num_eliminable, num_eliminable.226
	testl	%eax, %eax	# num_eliminable.226
	jne	.L323	#,
	.loc 1 1470 0 is_stmt 0 discriminator 1
	movl	num_eliminable_invariants(%rip), %eax	# num_eliminable_invariants, num_eliminable_invariants.227
	testl	%eax, %eax	# num_eliminable_invariants.227
	je	.L324	#,
.L323:
	.loc 1 1471 0 is_stmt 1
	movq	-56(%rbp), %rax	# insn, tmp238
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp238,
	call	eliminate_regs_in_insn	#
	movl	%eax, -128(%rbp)	# tmp239, did_elimination
.L324:
	.loc 1 1474 0
	movzbl	spill_indirect_levels(%rip), %eax	# spill_indirect_levels, spill_indirect_levels.228
	movsbl	%al, %edx	# spill_indirect_levels.228, D.28009
	movl	-132(%rbp), %ecx	# global, tmp240
	movq	-56(%rbp), %rax	# insn, tmp241
	movl	$spill_reg_order, %r8d	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp241,
	call	find_reloads	#
	movl	%eax, -116(%rbp)	# tmp242, operands_changed
	.loc 1 1484 0
	movl	flag_expensive_optimizations(%rip), %eax	# flag_expensive_optimizations, flag_expensive_optimizations.229
	testl	%eax, %eax	# flag_expensive_optimizations.229
	je	.L325	#,
	.loc 1 1484 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.230
	cmpl	$1, %eax	#, n_reloads.230
	jle	.L325	#,
.LBB53:
	.loc 1 1486 0 is_stmt 1
	movq	-56(%rbp), %rax	# insn, tmp243
	movzwl	(%rax), %eax	# insn_51->code, D.28012
	movzwl	%ax, %eax	# D.28012, D.28009
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28013
	cmpb	$105, %al	#, D.28013
	jne	.L326	#,
	.loc 1 1486 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# insn, tmp245
	movq	32(%rax), %rax	# insn_51->fld[3].rtx, D.28014
	movzwl	(%rax), %eax	# _106->code, D.28012
	cmpw	$47, %ax	#, D.28012
	jne	.L327	#,
	.loc 1 1486 0 discriminator 3
	movq	-56(%rbp), %rax	# insn, tmp246
	movq	32(%rax), %rax	# insn_51->fld[3].rtx, iftmp.232
	jmp	.L329	#
.L327:
	.loc 1 1486 0 discriminator 4
	movq	-56(%rbp), %rax	# insn, tmp247
	movq	32(%rax), %rdx	# insn_51->fld[3].rtx, D.28014
	movq	-56(%rbp), %rax	# insn, tmp248
	movq	%rdx, %rsi	# D.28014,
	movq	%rax, %rdi	# tmp248,
	call	single_set_2	#
	jmp	.L329	#
.L326:
	.loc 1 1486 0 discriminator 2
	movl	$0, %eax	#, iftmp.231
.L329:
	.loc 1 1486 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.231, set
	.loc 1 1487 0 is_stmt 1 discriminator 5
	cmpq	$0, -24(%rbp)	#, set
	je	.L325	#,
	.loc 1 1488 0
	movq	-24(%rbp), %rax	# set, tmp249
	movq	16(%rax), %rdx	# set_113->fld[1].rtx, D.28014
	movq	-24(%rbp), %rax	# set, tmp250
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28014
	cmpq	%rax, %rdx	# D.28014, D.28014
	jne	.L325	#,
	.loc 1 1489 0
	movq	-24(%rbp), %rax	# set, tmp251
	movq	16(%rax), %rax	# set_113->fld[1].rtx, D.28014
	movzwl	(%rax), %eax	# _116->code, D.28012
	cmpw	$61, %ax	#, D.28012
	jne	.L325	#,
	.loc 1 1490 0
	movq	-24(%rbp), %rax	# set, tmp252
	movq	16(%rax), %rax	# set_113->fld[1].rtx, D.28014
	movl	8(%rax), %eax	# _118->fld[0].rtuint, D.28015
	cmpl	$52, %eax	#, D.28015
	jbe	.L325	#,
	.loc 1 1492 0
	movq	-56(%rbp), %rax	# insn, tmp253
	movq	%rax, %rdi	# tmp253,
	call	delete_insn	#
	.loc 1 1494 0
	movq	-104(%rbp), %rax	# chain, tmp254
	movq	8(%rax), %rax	# chain_3->prev, D.28020
	testq	%rax, %rax	# D.28020
	je	.L330	#,
	.loc 1 1495 0
	movq	-104(%rbp), %rax	# chain, tmp255
	movq	8(%rax), %rax	# chain_3->prev, D.28020
	movq	-96(%rbp), %rdx	# next, tmp256
	movq	%rdx, (%rax)	# tmp256, _121->next
	jmp	.L331	#
.L330:
	.loc 1 1497 0
	movq	-96(%rbp), %rax	# next, tmp257
	movq	%rax, reload_insn_chain(%rip)	# tmp257, reload_insn_chain
.L331:
	.loc 1 1498 0
	cmpq	$0, -96(%rbp)	#, next
	je	.L332	#,
	.loc 1 1499 0
	movq	-104(%rbp), %rax	# chain, tmp258
	movq	8(%rax), %rdx	# chain_3->prev, D.28020
	movq	-96(%rbp), %rax	# next, tmp259
	movq	%rdx, 8(%rax)	# D.28020, next_52->prev
.L332:
	.loc 1 1500 0
	movq	unused_insn_chains(%rip), %rdx	# unused_insn_chains, unused_insn_chains.233
	movq	-104(%rbp), %rax	# chain, tmp260
	movq	%rdx, (%rax)	# unused_insn_chains.233, chain_3->next
	.loc 1 1501 0
	movq	-104(%rbp), %rax	# chain, tmp261
	movq	%rax, unused_insn_chains(%rip)	# tmp261, unused_insn_chains
	.loc 1 1502 0
	jmp	.L317	#
.L325:
.LBE53:
	.loc 1 1505 0
	movl	num_eliminable(%rip), %eax	# num_eliminable, num_eliminable.234
	testl	%eax, %eax	# num_eliminable.234
	je	.L333	#,
	.loc 1 1506 0
	call	update_eliminable_offsets	#
.L333:
	.loc 1 1510 0
	movl	-128(%rbp), %eax	# did_elimination, tmp262
	andl	$1, %eax	#, D.28022
	movl	%eax, %edx	# D.28022, D.28022
	movq	-104(%rbp), %rax	# chain, tmp263
	andl	$1, %edx	#, tmp265
	leal	0(,%rdx,4), %ecx	#, tmp266
	movzbl	262(%rax), %edx	# chain_3->need_elim, tmp267
	andl	$-5, %edx	#, tmp268
	orl	%ecx, %edx	# tmp266, tmp269
	movb	%dl, 262(%rax)	# tmp269, chain_3->need_elim
	.loc 1 1511 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.235
	testl	%eax, %eax	# n_reloads.235
	setg	%dl	#, D.28023
	movq	-104(%rbp), %rax	# chain, tmp270
	movl	%edx, %ecx	# D.28023, tmp272
	andl	$1, %ecx	#, tmp272
	movzbl	262(%rax), %edx	# chain_3->need_reload, tmp273
	andl	$-2, %edx	#, tmp274
	orl	%ecx, %edx	# tmp272, tmp275
	movb	%dl, 262(%rax)	# tmp275, chain_3->need_reload
	.loc 1 1512 0
	movl	-116(%rbp), %eax	# operands_changed, tmp276
	andl	$1, %eax	#, D.28022
	movl	%eax, %edx	# D.28022, D.28022
	movq	-104(%rbp), %rax	# chain, tmp277
	andl	$1, %edx	#, tmp279
	leal	(%rdx,%rdx), %ecx	#, tmp280
	movzbl	262(%rax), %edx	# chain_3->need_operand_change, tmp281
	andl	$-3, %edx	#, tmp282
	orl	%ecx, %edx	# tmp280, tmp283
	movb	%dl, 262(%rax)	# tmp283, chain_3->need_operand_change
	.loc 1 1515 0
	cmpl	$0, -128(%rbp)	#, did_elimination
	je	.L334	#,
.LBB54:
	.loc 1 1517 0
	movq	$reload_obstack, -16(%rbp)	#, __o
	movq	reload_insn_firstobj(%rip), %rax	# reload_insn_firstobj, tmp284
	movq	%rax, -8(%rbp)	# tmp284, __obj
	movq	-16(%rbp), %rax	# __o, tmp285
	movq	8(%rax), %rax	# __o_131->chunk, D.28010
	cmpq	-8(%rbp), %rax	# __obj, D.28010
	jae	.L335	#,
	.loc 1 1517 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# __o, tmp286
	movq	32(%rax), %rax	# __o_131->chunk_limit, D.28006
	cmpq	-8(%rbp), %rax	# __obj, D.28006
	jbe	.L335	#,
	movq	-16(%rbp), %rax	# __o, tmp287
	movq	-8(%rbp), %rdx	# __obj, tmp288
	movq	%rdx, 16(%rax)	# tmp288, __o_131->object_base
	movq	-16(%rbp), %rax	# __o, tmp289
	movq	16(%rax), %rdx	# __o_131->object_base, D.28006
	movq	-16(%rbp), %rax	# __o, tmp290
	movq	%rdx, 24(%rax)	# D.28006, __o_131->next_free
	jmp	.L336	#
.L335:
	.loc 1 1517 0 discriminator 2
	movq	-8(%rbp), %rdx	# __obj, tmp291
	movq	-16(%rbp), %rax	# __o, tmp292
	movq	%rdx, %rsi	# tmp291,
	movq	%rax, %rdi	# tmp292,
	call	obstack_free	#
.L336:
.LBE54:
	.loc 1 1518 0 is_stmt 1
	movq	-56(%rbp), %rax	# insn, tmp293
	movq	-48(%rbp), %rdx	# old_body, tmp294
	movq	%rdx, 32(%rax)	# tmp294, insn_51->fld[3].rtx
	.loc 1 1519 0
	movq	-56(%rbp), %rax	# insn, tmp295
	movl	-120(%rbp), %edx	# old_code, tmp296
	movl	%edx, 40(%rax)	# tmp296, insn_51->fld[4].rtint
	.loc 1 1520 0
	movq	-56(%rbp), %rax	# insn, tmp297
	movq	-40(%rbp), %rdx	# old_notes, tmp298
	movq	%rdx, 56(%rax)	# tmp298, insn_51->fld[6].rtx
	.loc 1 1521 0
	movl	$1, something_needs_elimination(%rip)	#, something_needs_elimination
.L334:
	.loc 1 1524 0
	movl	something_needs_operands_changed(%rip), %eax	# something_needs_operands_changed, something_needs_operands_changed.236
	orl	-116(%rbp), %eax	# operands_changed, something_needs_operands_changed.237
	movl	%eax, something_needs_operands_changed(%rip)	# something_needs_operands_changed.237, something_needs_operands_changed
	.loc 1 1526 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.238
	testl	%eax, %eax	# n_reloads.238
	je	.L317	#,
	.loc 1 1528 0
	movq	-104(%rbp), %rax	# chain, tmp299
	movq	%rax, %rdi	# tmp299,
	call	copy_reloads	#
	.loc 1 1529 0
	movq	-112(%rbp), %rax	# pprev_reload, tmp300
	movq	-104(%rbp), %rdx	# chain, tmp301
	movq	%rdx, (%rax)	# tmp301, *pprev_reload_2
	.loc 1 1530 0
	movq	-104(%rbp), %rax	# chain, tmp305
	addq	$16, %rax	#, tmp304
	movq	%rax, -112(%rbp)	# tmp304, pprev_reload
.L317:
.LBE52:
.LBE51:
	.loc 1 1434 0
	movq	-96(%rbp), %rax	# next, tmp306
	movq	%rax, -104(%rbp)	# tmp306, chain
.L314:
	.loc 1 1434 0 is_stmt 0 discriminator 1
	cmpq	$0, -104(%rbp)	#, chain
	jne	.L337	#,
	.loc 1 1534 0 is_stmt 1
	movq	-112(%rbp), %rax	# pprev_reload, tmp307
	movq	$0, (%rax)	#, *pprev_reload_2
	.loc 1 1535 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	calculate_needs_all_insns, .-calculate_needs_all_insns
	.type	reload_reg_class_lower, @function
reload_reg_class_lower:
.LFB10:
	.loc 1 1544 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# r1p, r1p
	movq	%rsi, -32(%rbp)	# r2p, r2p
	.loc 1 1545 0
	movq	-24(%rbp), %rax	# r1p, tmp84
	movzwl	(%rax), %eax	# MEM[(const short int *)r1p_2(D)], D.28025
	cwtl
	movl	%eax, -12(%rbp)	# tmp85, r1
	movq	-32(%rbp), %rax	# r2p, tmp86
	movzwl	(%rax), %eax	# MEM[(const short int *)r2p_5(D)], D.28025
	cwtl
	movl	%eax, -8(%rbp)	# tmp87, r2
	.loc 1 1549 0
	movl	-12(%rbp), %eax	# r1, tmp89
	movslq	%eax, %rdx	# tmp89, tmp88
	movq	%rdx, %rax	# tmp88, tmp90
	addq	%rax, %rax	# tmp90
	addq	%rdx, %rax	# tmp88, tmp90
	salq	$2, %rax	#, tmp90
	addq	%rdx, %rax	# tmp88, tmp90
	salq	$3, %rax	#, tmp91
	addq	$rld+96, %rax	#, tmp92
	movzbl	(%rax), %eax	#, tmp95
	andl	$1, %eax	#, D.28026
	movzbl	%al, %ecx	# D.28026, D.28024
	movl	-8(%rbp), %eax	# r2, tmp97
	movslq	%eax, %rdx	# tmp97, tmp96
	movq	%rdx, %rax	# tmp96, tmp98
	addq	%rax, %rax	# tmp98
	addq	%rdx, %rax	# tmp96, tmp98
	salq	$2, %rax	#, tmp98
	addq	%rdx, %rax	# tmp96, tmp98
	salq	$3, %rax	#, tmp99
	addq	$rld+96, %rax	#, tmp100
	movzbl	(%rax), %eax	#, tmp103
	andl	$1, %eax	#, D.28026
	movzbl	%al, %eax	# D.28026, D.28024
	subl	%eax, %ecx	# D.28024, tmp104
	movl	%ecx, %eax	# tmp104, tmp104
	movl	%eax, -4(%rbp)	# tmp104, t
	.loc 1 1550 0
	cmpl	$0, -4(%rbp)	#, t
	je	.L339	#,
	.loc 1 1551 0
	movl	-4(%rbp), %eax	# t, D.28024
	jmp	.L340	#
.L339:
	.loc 1 1554 0
	movl	-8(%rbp), %eax	# r2, tmp106
	movslq	%eax, %rdx	# tmp106, tmp105
	movq	%rdx, %rax	# tmp105, tmp107
	addq	%rax, %rax	# tmp107
	addq	%rdx, %rax	# tmp105, tmp107
	salq	$2, %rax	#, tmp107
	addq	%rdx, %rax	# tmp105, tmp107
	salq	$3, %rax	#, tmp108
	addq	$rld+16, %rax	#, tmp109
	movl	(%rax), %eax	# rld[r2_7].class, D.28027
	cltq
	movl	reg_class_size(,%rax,4), %eax	# reg_class_size, D.28028
	cmpl	$1, %eax	#, D.28028
	sete	%al	#, D.28029
	movzbl	%al, %ecx	# D.28029, D.28024
	.loc 1 1555 0
	movl	-12(%rbp), %eax	# r1, tmp112
	movslq	%eax, %rdx	# tmp112, tmp111
	movq	%rdx, %rax	# tmp111, tmp113
	addq	%rax, %rax	# tmp113
	addq	%rdx, %rax	# tmp111, tmp113
	salq	$2, %rax	#, tmp113
	addq	%rdx, %rax	# tmp111, tmp113
	salq	$3, %rax	#, tmp114
	addq	$rld+16, %rax	#, tmp115
	movl	(%rax), %eax	# rld[r1_4].class, D.28027
	cltq
	movl	reg_class_size(,%rax,4), %eax	# reg_class_size, D.28028
	cmpl	$1, %eax	#, D.28028
	sete	%al	#, D.28029
	movzbl	%al, %eax	# D.28029, D.28024
	.loc 1 1554 0
	subl	%eax, %ecx	# D.28024, tmp117
	movl	%ecx, %eax	# tmp117, tmp117
	movl	%eax, -4(%rbp)	# tmp117, t
	.loc 1 1556 0
	cmpl	$0, -4(%rbp)	#, t
	je	.L341	#,
	.loc 1 1557 0
	movl	-4(%rbp), %eax	# t, D.28024
	jmp	.L340	#
.L341:
	.loc 1 1560 0
	movl	-8(%rbp), %eax	# r2, tmp119
	movslq	%eax, %rdx	# tmp119, tmp118
	movq	%rdx, %rax	# tmp118, tmp120
	addq	%rax, %rax	# tmp120
	addq	%rdx, %rax	# tmp118, tmp120
	salq	$2, %rax	#, tmp120
	addq	%rdx, %rax	# tmp118, tmp120
	salq	$3, %rax	#, tmp121
	addq	$rld+32, %rax	#, tmp122
	movl	(%rax), %ecx	# rld[r2_7].nregs, D.28028
	movl	-12(%rbp), %eax	# r1, tmp124
	movslq	%eax, %rdx	# tmp124, tmp123
	movq	%rdx, %rax	# tmp123, tmp125
	addq	%rax, %rax	# tmp125
	addq	%rdx, %rax	# tmp123, tmp125
	salq	$2, %rax	#, tmp125
	addq	%rdx, %rax	# tmp123, tmp125
	salq	$3, %rax	#, tmp126
	addq	$rld+32, %rax	#, tmp127
	movl	(%rax), %eax	# rld[r1_4].nregs, D.28028
	subl	%eax, %ecx	# D.28028, D.28028
	movl	%ecx, %eax	# D.28028, D.28028
	movl	%eax, -4(%rbp)	# D.28028, t
	.loc 1 1561 0
	cmpl	$0, -4(%rbp)	#, t
	je	.L342	#,
	.loc 1 1562 0
	movl	-4(%rbp), %eax	# t, D.28024
	jmp	.L340	#
.L342:
	.loc 1 1565 0
	movl	-12(%rbp), %eax	# r1, tmp129
	movslq	%eax, %rdx	# tmp129, tmp128
	movq	%rdx, %rax	# tmp128, tmp130
	addq	%rax, %rax	# tmp130
	addq	%rdx, %rax	# tmp128, tmp130
	salq	$2, %rax	#, tmp130
	addq	%rdx, %rax	# tmp128, tmp130
	salq	$3, %rax	#, tmp131
	addq	$rld+16, %rax	#, tmp132
	movl	(%rax), %eax	# rld[r1_4].class, D.28027
	movl	%eax, %ecx	# D.28027, D.28024
	movl	-8(%rbp), %eax	# r2, tmp134
	movslq	%eax, %rdx	# tmp134, tmp133
	movq	%rdx, %rax	# tmp133, tmp135
	addq	%rax, %rax	# tmp135
	addq	%rdx, %rax	# tmp133, tmp135
	salq	$2, %rax	#, tmp135
	addq	%rdx, %rax	# tmp133, tmp135
	salq	$3, %rax	#, tmp136
	addq	$rld+16, %rax	#, tmp137
	movl	(%rax), %eax	# rld[r2_7].class, D.28027
	subl	%eax, %ecx	# D.28024, tmp138
	movl	%ecx, %eax	# tmp138, tmp138
	movl	%eax, -4(%rbp)	# tmp138, t
	.loc 1 1566 0
	cmpl	$0, -4(%rbp)	#, t
	je	.L343	#,
	.loc 1 1567 0
	movl	-4(%rbp), %eax	# t, D.28024
	jmp	.L340	#
.L343:
	.loc 1 1571 0
	movl	-8(%rbp), %eax	# r2, tmp139
	movl	-12(%rbp), %edx	# r1, tmp140
	subl	%eax, %edx	# tmp139, D.28024
	movl	%edx, %eax	# D.28024, D.28024
.L340:
	.loc 1 1572 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	reload_reg_class_lower, .-reload_reg_class_lower
	.local	spill_cost
	.comm	spill_cost,212,32
	.local	spill_add_cost
	.comm	spill_add_cost,212,32
	.type	count_pseudo, @function
count_pseudo:
.LFB11:
	.loc 1 1587 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# reg, reg
	.loc 1 1588 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.239
	movl	-36(%rbp), %edx	# reg, tmp141
	movslq	%edx, %rdx	# tmp141, tmp140
	addq	$4, %rdx	#, tmp142
	movq	(%rax,%rdx,8), %rax	# reg_n_info.239_10->data.reg, D.28030
	movl	20(%rax), %eax	# _12->freq, tmp143
	movl	%eax, -24(%rbp)	# tmp143, freq
	.loc 1 1589 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.240
	movl	-36(%rbp), %edx	# reg, tmp144
	movslq	%edx, %rdx	# tmp144, D.28031
	addq	%rdx, %rdx	# D.28031
	addq	%rdx, %rax	# D.28031, D.28032
	movzwl	(%rax), %eax	# *_17, D.28033
	cwtl
	movl	%eax, -20(%rbp)	# tmp145, r
	.loc 1 1592 0
	movl	-36(%rbp), %eax	# reg, tmp146
	movl	%eax, %esi	# tmp146,
	movl	$pseudos_counted, %edi	#,
	call	bitmap_bit_p	#
	testl	%eax, %eax	# D.28034
	jne	.L345	#,
	.loc 1 1593 0
	movl	-36(%rbp), %eax	# reg, tmp147
	movl	%eax, %esi	# tmp147,
	movl	$spilled_pseudos, %edi	#,
	call	bitmap_bit_p	#
	testl	%eax, %eax	# D.28034
	je	.L346	#,
.L345:
	.loc 1 1594 0
	jmp	.L344	#
.L346:
	.loc 1 1596 0
	movl	-36(%rbp), %eax	# reg, tmp148
	movl	%eax, %esi	# tmp148,
	movl	$pseudos_counted, %edi	#,
	call	bitmap_set_bit	#
	.loc 1 1598 0
	cmpl	$0, -20(%rbp)	#, r
	jns	.L348	#,
	.loc 1 1599 0
	movl	$__FUNCTION__.14552, %edx	#,
	movl	$1599, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L348:
	.loc 1 1601 0
	movl	-20(%rbp), %eax	# r, tmp150
	cltq
	movl	spill_add_cost(,%rax,4), %edx	# spill_add_cost, D.28034
	movl	-24(%rbp), %eax	# freq, tmp151
	addl	%eax, %edx	# tmp151, D.28034
	movl	-20(%rbp), %eax	# r, tmp153
	cltq
	movl	%edx, spill_add_cost(,%rax,4)	# D.28034, spill_add_cost
	.loc 1 1603 0
	cmpl	$7, -20(%rbp)	#, r
	jle	.L349	#,
	.loc 1 1603 0 is_stmt 0 discriminator 1
	cmpl	$15, -20(%rbp)	#, r
	jle	.L350	#,
.L349:
	.loc 1 1603 0 discriminator 2
	cmpl	$20, -20(%rbp)	#, r
	jle	.L351	#,
	.loc 1 1603 0 discriminator 1
	cmpl	$28, -20(%rbp)	#, r
	jle	.L350	#,
.L351:
	.loc 1 1603 0 discriminator 2
	cmpl	$44, -20(%rbp)	#, r
	jle	.L352	#,
	.loc 1 1603 0 discriminator 1
	cmpl	$52, -20(%rbp)	#, r
	jle	.L350	#,
.L352:
	.loc 1 1603 0 discriminator 2
	cmpl	$28, -20(%rbp)	#, r
	jle	.L353	#,
	.loc 1 1603 0 discriminator 1
	cmpl	$36, -20(%rbp)	#, r
	jg	.L353	#,
.L350:
	movq	cfun(%rip), %rax	# cfun, cfun.243
	movq	24(%rax), %rax	# cfun.243_74->emit, D.28035
	movq	80(%rax), %rax	# _75->x_regno_reg_rtx, D.28036
	movl	-36(%rbp), %edx	# reg, tmp154
	movslq	%edx, %rdx	# tmp154, D.28031
	salq	$3, %rdx	#, D.28031
	addq	%rdx, %rax	# D.28031, D.28036
	movq	(%rax), %rax	# *_79, D.28037
	movzbl	2(%rax), %eax	# _80->mode, D.28038
	movzbl	%al, %eax	# D.28038, D.28034
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28039
	cmpl	$5, %eax	#, D.28039
	je	.L354	#,
	.loc 1 1603 0 discriminator 2
	movq	cfun(%rip), %rax	# cfun, cfun.244
	movq	24(%rax), %rax	# cfun.244_84->emit, D.28035
	movq	80(%rax), %rax	# _85->x_regno_reg_rtx, D.28036
	movl	-36(%rbp), %edx	# reg, tmp156
	movslq	%edx, %rdx	# tmp156, D.28031
	salq	$3, %rdx	#, D.28031
	addq	%rdx, %rax	# D.28031, D.28036
	movq	(%rax), %rax	# *_89, D.28037
	movzbl	2(%rax), %eax	# _90->mode, D.28038
	movzbl	%al, %eax	# D.28038, D.28034
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28039
	cmpl	$6, %eax	#, D.28039
	jne	.L355	#,
.L354:
	.loc 1 1603 0 discriminator 1
	movl	$2, %eax	#, iftmp.242
	jmp	.L356	#
.L355:
	movl	$1, %eax	#, iftmp.242
.L356:
	.loc 1 1603 0 discriminator 3
	jmp	.L357	#
.L353:
	.loc 1 1603 0 discriminator 2
	movq	cfun(%rip), %rax	# cfun, cfun.246
	movq	24(%rax), %rax	# cfun.246_24->emit, D.28035
	movq	80(%rax), %rax	# _25->x_regno_reg_rtx, D.28036
	movl	-36(%rbp), %edx	# reg, tmp158
	movslq	%edx, %rdx	# tmp158, D.28031
	salq	$3, %rdx	#, D.28031
	addq	%rdx, %rax	# D.28031, D.28036
	movq	(%rax), %rax	# *_29, D.28037
	movzbl	2(%rax), %eax	# _30->mode, D.28038
	cmpb	$18, %al	#, D.28038
	jne	.L358	#,
	.loc 1 1603 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.248
	andl	$33554432, %eax	#, D.28034
	testl	%eax, %eax	# D.28034
	je	.L359	#,
	movl	$2, %eax	#, iftmp.247
	jmp	.L357	#
.L359:
	.loc 1 1603 0 discriminator 2
	movl	$3, %eax	#, iftmp.247
	jmp	.L357	#
.L358:
	movq	cfun(%rip), %rax	# cfun, cfun.250
	movq	24(%rax), %rax	# cfun.250_37->emit, D.28035
	movq	80(%rax), %rax	# _38->x_regno_reg_rtx, D.28036
	movl	-36(%rbp), %edx	# reg, tmp159
	movslq	%edx, %rdx	# tmp159, D.28031
	salq	$3, %rdx	#, D.28031
	addq	%rdx, %rax	# D.28031, D.28036
	movq	(%rax), %rax	# *_42, D.28037
	movzbl	2(%rax), %eax	# _43->mode, D.28038
	cmpb	$24, %al	#, D.28038
	jne	.L362	#,
	.loc 1 1603 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.252
	andl	$33554432, %eax	#, D.28034
	testl	%eax, %eax	# D.28034
	je	.L363	#,
	movl	$4, %eax	#, iftmp.251
	jmp	.L357	#
.L363:
	.loc 1 1603 0 discriminator 2
	movl	$6, %eax	#, iftmp.251
	jmp	.L357	#
.L362:
	movq	cfun(%rip), %rax	# cfun, cfun.253
	movq	24(%rax), %rax	# cfun.253_50->emit, D.28035
	movq	80(%rax), %rax	# _51->x_regno_reg_rtx, D.28036
	movl	-36(%rbp), %edx	# reg, tmp160
	movslq	%edx, %rdx	# tmp160, D.28031
	salq	$3, %rdx	#, D.28031
	addq	%rdx, %rax	# D.28031, D.28036
	movq	(%rax), %rax	# *_55, D.28037
	movzbl	2(%rax), %eax	# _56->mode, D.28038
	movzbl	%al, %eax	# D.28038, D.28034
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28038
	movzbl	%al, %edx	# D.28038, D.28034
	movl	target_flags(%rip), %eax	# target_flags, target_flags.255
	andl	$33554432, %eax	#, D.28034
	testl	%eax, %eax	# D.28034
	je	.L366	#,
	.loc 1 1603 0 discriminator 1
	movl	$8, %eax	#, iftmp.254
	jmp	.L367	#
.L366:
	.loc 1 1603 0 discriminator 2
	movl	$4, %eax	#, iftmp.254
.L367:
	.loc 1 1603 0 discriminator 3
	addl	%edx, %eax	# D.28034, D.28034
	subl	$1, %eax	#, D.28034
	movl	target_flags(%rip), %edx	# target_flags, target_flags.257
	andl	$33554432, %edx	#, D.28034
	testl	%edx, %edx	# D.28034
	je	.L368	#,
	.loc 1 1603 0 discriminator 1
	movl	$8, %ebx	#, iftmp.256
	jmp	.L369	#
.L368:
	.loc 1 1603 0 discriminator 2
	movl	$4, %ebx	#, iftmp.256
.L369:
	.loc 1 1603 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.256
.L357:
	movl	%eax, -28(%rbp)	# iftmp.241, nregs
	.loc 1 1604 0 is_stmt 1 discriminator 3
	jmp	.L370	#
.L371:
	.loc 1 1605 0
	movl	-28(%rbp), %eax	# nregs, tmp164
	movl	-20(%rbp), %edx	# r, tmp165
	leal	(%rdx,%rax), %ecx	#, D.28034
	movl	-28(%rbp), %eax	# nregs, tmp166
	movl	-20(%rbp), %edx	# r, tmp167
	addl	%edx, %eax	# tmp167, D.28034
	cltq
	movl	spill_cost(,%rax,4), %edx	# spill_cost, D.28034
	movl	-24(%rbp), %eax	# freq, tmp169
	addl	%eax, %edx	# tmp169, D.28034
	movslq	%ecx, %rax	# D.28034, tmp170
	movl	%edx, spill_cost(,%rax,4)	# D.28034, spill_cost
.L370:
	.loc 1 1604 0 discriminator 1
	movl	-28(%rbp), %eax	# nregs, nregs.258
	leal	-1(%rax), %edx	#, tmp171
	movl	%edx, -28(%rbp)	# tmp171, nregs
	testl	%eax, %eax	# nregs.258
	jg	.L371	#,
.L344:
	.loc 1 1606 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	count_pseudo, .-count_pseudo
	.type	order_regs_for_reload, @function
order_regs_for_reload:
.LFB12:
	.loc 1 1614 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$112, %rsp	#,
	movq	%rdi, -104(%rbp)	# chain, chain
	.loc 1 1619 0
	movq	fixed_reg_set(%rip), %rax	# fixed_reg_set, fixed_reg_set.259
	movq	%rax, bad_spill_regs(%rip)	# fixed_reg_set.259, bad_spill_regs
	.loc 1 1621 0
	movl	$212, %edx	#,
	movl	$0, %esi	#,
	movl	$spill_cost, %edi	#,
	call	memset	#
	.loc 1 1622 0
	movl	$212, %edx	#,
	movl	$0, %esi	#,
	movl	$spill_add_cost, %edi	#,
	call	memset	#
	.loc 1 1628 0
	movq	$0, -64(%rbp)	#, used_by_pseudos
	movq	-104(%rbp), %rax	# chain, tmp88
	leaq	40(%rax), %rdx	#, D.28040
	leaq	-64(%rbp), %rax	#, tmp89
	movq	%rdx, %rsi	# D.28040,
	movq	%rax, %rdi	# tmp89,
	call	reg_set_to_hard_reg_set	#
	.loc 1 1629 0
	movq	$0, -56(%rbp)	#, used_by_pseudos2
	movq	-104(%rbp), %rax	# chain, tmp90
	leaq	64(%rax), %rdx	#, D.28040
	leaq	-56(%rbp), %rax	#, tmp91
	movq	%rdx, %rsi	# D.28040,
	movq	%rax, %rdi	# tmp91,
	call	reg_set_to_hard_reg_set	#
	.loc 1 1630 0
	movq	bad_spill_regs(%rip), %rdx	# bad_spill_regs, bad_spill_regs.260
	movq	-64(%rbp), %rax	# used_by_pseudos, used_by_pseudos.261
	orq	%rdx, %rax	# bad_spill_regs.260, bad_spill_regs.262
	movq	%rax, bad_spill_regs(%rip)	# bad_spill_regs.262, bad_spill_regs
	.loc 1 1631 0
	movq	bad_spill_regs(%rip), %rdx	# bad_spill_regs, bad_spill_regs.263
	movq	-56(%rbp), %rax	# used_by_pseudos2, used_by_pseudos2.264
	orq	%rdx, %rax	# bad_spill_regs.263, bad_spill_regs.265
	movq	%rax, bad_spill_regs(%rip)	# bad_spill_regs.265, bad_spill_regs
	.loc 1 1635 0
	movl	$pseudos_counted, %edi	#,
	call	bitmap_clear	#
.LBB55:
	.loc 1 1637 0
	movq	-104(%rbp), %rax	# chain, tmp92
	movq	40(%rax), %rax	# chain_24(D)->live_throughout.first, tmp93
	movq	%rax, -48(%rbp)	# tmp93, ptr_
	movl	$0, -76(%rbp)	#, indx_
	movl	$53, -92(%rbp)	#, bit_num_
	movl	$0, -88(%rbp)	#, word_num_
	jmp	.L373	#
.L375:
	.loc 1 1637 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# ptr_, tmp94
	movq	(%rax), %rax	# ptr__1->next, tmp95
	movq	%rax, -48(%rbp)	# tmp95, ptr_
.L373:
	cmpq	$0, -48(%rbp)	#, ptr_
	je	.L374	#,
	.loc 1 1637 0 discriminator 2
	movq	-48(%rbp), %rax	# ptr_, tmp96
	movl	16(%rax), %eax	# ptr__1->indx, D.28041
	cmpl	-76(%rbp), %eax	# indx_, D.28041
	jb	.L375	#,
.L374:
	.loc 1 1637 0 discriminator 3
	cmpq	$0, -48(%rbp)	#, ptr_
	je	.L376	#,
	.loc 1 1637 0 discriminator 1
	movq	-48(%rbp), %rax	# ptr_, tmp97
	movl	16(%rax), %eax	# ptr__1->indx, D.28041
	cmpl	-76(%rbp), %eax	# indx_, D.28041
	je	.L376	#,
	movl	$0, -92(%rbp)	#, bit_num_
	movl	$0, -88(%rbp)	#, word_num_
	jmp	.L377	#
.L376:
	.loc 1 1637 0 discriminator 2
	jmp	.L377	#
.L384:
	.loc 1 1637 0
	jmp	.L378	#
.L383:
.LBB56:
	.loc 1 1637 0 discriminator 2
	movq	-48(%rbp), %rax	# ptr_, tmp98
	movl	-88(%rbp), %edx	# word_num_, tmp99
	addq	$2, %rdx	#, tmp100
	movq	8(%rax,%rdx,8), %rax	# ptr__2->bits, tmp101
	movq	%rax, -40(%rbp)	# tmp101, word_
	cmpq	$0, -40(%rbp)	#, word_
	je	.L379	#,
	.loc 1 1637 0 discriminator 1
	jmp	.L380	#
.L382:
.LBB57:
	.loc 1 1637 0 discriminator 2
	movl	-92(%rbp), %eax	# bit_num_, bit_num_.266
	movl	$1, %edx	#, tmp102
	movl	%eax, %ecx	# bit_num_.266, tmp135
	salq	%cl, %rdx	# tmp135, tmp103
	movq	%rdx, %rax	# tmp103, tmp103
	movq	%rax, -16(%rbp)	# tmp103, mask_
	movq	-16(%rbp), %rax	# mask_, tmp104
	movq	-40(%rbp), %rdx	# word_, tmp105
	andq	%rdx, %rax	# tmp105, D.28042
	testq	%rax, %rax	# D.28042
	je	.L381	#,
	.loc 1 1637 0 discriminator 1
	movq	-16(%rbp), %rax	# mask_, tmp106
	notq	%rax	# D.28042
	andq	%rax, -40(%rbp)	# D.28042, word_
	movq	-48(%rbp), %rax	# ptr_, tmp107
	movl	16(%rax), %eax	# ptr__2->indx, D.28041
	leal	(%rax,%rax), %edx	#, D.28041
	movl	-88(%rbp), %eax	# word_num_, tmp108
	addl	%edx, %eax	# D.28041, D.28041
	sall	$6, %eax	#, D.28041
	movl	%eax, %edx	# D.28041, D.28041
	movl	-92(%rbp), %eax	# bit_num_, tmp109
	addl	%edx, %eax	# D.28041, D.28041
	movl	%eax, -72(%rbp)	# D.28041, i
	movl	-72(%rbp), %eax	# i, tmp110
	movl	%eax, %edi	# tmp110,
	call	count_pseudo	#
	cmpq	$0, -40(%rbp)	#, word_
	jne	.L381	#,
	jmp	.L379	#
.L381:
.LBE57:
	.loc 1 1637 0 discriminator 2
	addl	$1, -92(%rbp)	#, bit_num_
.L380:
	.loc 1 1637 0 discriminator 1
	cmpl	$63, -92(%rbp)	#, bit_num_
	jbe	.L382	#,
.L379:
	.loc 1 1637 0 discriminator 2
	movl	$0, -92(%rbp)	#, bit_num_
.LBE56:
	addl	$1, -88(%rbp)	#, word_num_
.L378:
	.loc 1 1637 0 discriminator 1
	cmpl	$1, -88(%rbp)	#, word_num_
	jbe	.L383	#,
	.loc 1 1637 0 discriminator 3
	movl	$0, -88(%rbp)	#, word_num_
	movq	-48(%rbp), %rax	# ptr_, tmp111
	movq	(%rax), %rax	# ptr__2->next, tmp112
	movq	%rax, -48(%rbp)	# tmp112, ptr_
.L377:
	.loc 1 1637 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, ptr_
	jne	.L384	#,
.LBE55:
.LBB58:
	.loc 1 1642 0 is_stmt 1
	movq	-104(%rbp), %rax	# chain, tmp113
	movq	64(%rax), %rax	# chain_24(D)->dead_or_set.first, tmp114
	movq	%rax, -32(%rbp)	# tmp114, ptr_
	movl	$0, -68(%rbp)	#, indx_
	movl	$53, -84(%rbp)	#, bit_num_
	movl	$0, -80(%rbp)	#, word_num_
	jmp	.L385	#
.L387:
	.loc 1 1642 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# ptr_, tmp115
	movq	(%rax), %rax	# ptr__12->next, tmp116
	movq	%rax, -32(%rbp)	# tmp116, ptr_
.L385:
	cmpq	$0, -32(%rbp)	#, ptr_
	je	.L386	#,
	.loc 1 1642 0 discriminator 2
	movq	-32(%rbp), %rax	# ptr_, tmp117
	movl	16(%rax), %eax	# ptr__12->indx, D.28041
	cmpl	-68(%rbp), %eax	# indx_, D.28041
	jb	.L387	#,
.L386:
	.loc 1 1642 0 discriminator 3
	cmpq	$0, -32(%rbp)	#, ptr_
	je	.L388	#,
	.loc 1 1642 0 discriminator 1
	movq	-32(%rbp), %rax	# ptr_, tmp118
	movl	16(%rax), %eax	# ptr__12->indx, D.28041
	cmpl	-68(%rbp), %eax	# indx_, D.28041
	je	.L388	#,
	movl	$0, -84(%rbp)	#, bit_num_
	movl	$0, -80(%rbp)	#, word_num_
	jmp	.L389	#
.L388:
	.loc 1 1642 0 discriminator 2
	jmp	.L389	#
.L396:
	.loc 1 1642 0
	jmp	.L390	#
.L395:
.LBB59:
	.loc 1 1642 0 discriminator 2
	movq	-32(%rbp), %rax	# ptr_, tmp119
	movl	-80(%rbp), %edx	# word_num_, tmp120
	addq	$2, %rdx	#, tmp121
	movq	8(%rax,%rdx,8), %rax	# ptr__13->bits, tmp122
	movq	%rax, -24(%rbp)	# tmp122, word_
	cmpq	$0, -24(%rbp)	#, word_
	je	.L391	#,
	.loc 1 1642 0 discriminator 1
	jmp	.L392	#
.L394:
.LBB60:
	.loc 1 1642 0 discriminator 2
	movl	-84(%rbp), %eax	# bit_num_, bit_num_.267
	movl	$1, %edx	#, tmp123
	movl	%eax, %ecx	# bit_num_.267, tmp138
	salq	%cl, %rdx	# tmp138, tmp124
	movq	%rdx, %rax	# tmp124, tmp124
	movq	%rax, -8(%rbp)	# tmp124, mask_
	movq	-8(%rbp), %rax	# mask_, tmp125
	movq	-24(%rbp), %rdx	# word_, tmp126
	andq	%rdx, %rax	# tmp126, D.28042
	testq	%rax, %rax	# D.28042
	je	.L393	#,
	.loc 1 1642 0 discriminator 1
	movq	-8(%rbp), %rax	# mask_, tmp127
	notq	%rax	# D.28042
	andq	%rax, -24(%rbp)	# D.28042, word_
	movq	-32(%rbp), %rax	# ptr_, tmp128
	movl	16(%rax), %eax	# ptr__13->indx, D.28041
	leal	(%rax,%rax), %edx	#, D.28041
	movl	-80(%rbp), %eax	# word_num_, tmp129
	addl	%edx, %eax	# D.28041, D.28041
	sall	$6, %eax	#, D.28041
	movl	%eax, %edx	# D.28041, D.28041
	movl	-84(%rbp), %eax	# bit_num_, tmp130
	addl	%edx, %eax	# D.28041, D.28041
	movl	%eax, -72(%rbp)	# D.28041, i
	movl	-72(%rbp), %eax	# i, tmp131
	movl	%eax, %edi	# tmp131,
	call	count_pseudo	#
	cmpq	$0, -24(%rbp)	#, word_
	jne	.L393	#,
	jmp	.L391	#
.L393:
.LBE60:
	.loc 1 1642 0 discriminator 2
	addl	$1, -84(%rbp)	#, bit_num_
.L392:
	.loc 1 1642 0 discriminator 1
	cmpl	$63, -84(%rbp)	#, bit_num_
	jbe	.L394	#,
.L391:
	.loc 1 1642 0 discriminator 2
	movl	$0, -84(%rbp)	#, bit_num_
.LBE59:
	addl	$1, -80(%rbp)	#, word_num_
.L390:
	.loc 1 1642 0 discriminator 1
	cmpl	$1, -80(%rbp)	#, word_num_
	jbe	.L395	#,
	.loc 1 1642 0 discriminator 3
	movl	$0, -80(%rbp)	#, word_num_
	movq	-32(%rbp), %rax	# ptr_, tmp132
	movq	(%rax), %rax	# ptr__13->next, tmp133
	movq	%rax, -32(%rbp)	# tmp133, ptr_
.L389:
	.loc 1 1642 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, ptr_
	jne	.L396	#,
.LBE58:
	.loc 1 1647 0 is_stmt 1
	movl	$pseudos_counted, %edi	#,
	call	bitmap_clear	#
	.loc 1 1648 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE12:
	.size	order_regs_for_reload, .-order_regs_for_reload
	.local	reload_order
	.comm	reload_order,360,32
	.local	used_spill_regs_local
	.comm	used_spill_regs_local,8,8
	.type	count_spilled_pseudo, @function
count_spilled_pseudo:
.LFB13:
	.loc 1 1665 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# spilled, spilled
	movl	%esi, -40(%rbp)	# spilled_nregs, spilled_nregs
	movl	%edx, -44(%rbp)	# reg, reg
	.loc 1 1666 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.268
	movl	-44(%rbp), %edx	# reg, tmp145
	movslq	%edx, %rdx	# tmp145, D.28043
	addq	%rdx, %rdx	# D.28043
	addq	%rdx, %rax	# D.28043, D.28044
	movzwl	(%rax), %eax	# *_14, D.28045
	cwtl
	movl	%eax, -20(%rbp)	# tmp146, r
	.loc 1 1667 0
	cmpl	$7, -20(%rbp)	#, r
	jle	.L398	#,
	.loc 1 1667 0 is_stmt 0 discriminator 1
	cmpl	$15, -20(%rbp)	#, r
	jle	.L399	#,
.L398:
	.loc 1 1667 0 discriminator 2
	cmpl	$20, -20(%rbp)	#, r
	jle	.L400	#,
	.loc 1 1667 0 discriminator 1
	cmpl	$28, -20(%rbp)	#, r
	jle	.L399	#,
.L400:
	.loc 1 1667 0 discriminator 2
	cmpl	$44, -20(%rbp)	#, r
	jle	.L401	#,
	.loc 1 1667 0 discriminator 1
	cmpl	$52, -20(%rbp)	#, r
	jle	.L399	#,
.L401:
	.loc 1 1667 0 discriminator 2
	cmpl	$28, -20(%rbp)	#, r
	jle	.L402	#,
	.loc 1 1667 0 discriminator 1
	cmpl	$36, -20(%rbp)	#, r
	jg	.L402	#,
.L399:
	movq	cfun(%rip), %rax	# cfun, cfun.271
	movq	24(%rax), %rax	# cfun.271_67->emit, D.28046
	movq	80(%rax), %rax	# _68->x_regno_reg_rtx, D.28047
	movl	-44(%rbp), %edx	# reg, tmp147
	movslq	%edx, %rdx	# tmp147, D.28043
	salq	$3, %rdx	#, D.28043
	addq	%rdx, %rax	# D.28043, D.28047
	movq	(%rax), %rax	# *_72, D.28048
	movzbl	2(%rax), %eax	# _73->mode, D.28049
	movzbl	%al, %eax	# D.28049, D.28050
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28051
	cmpl	$5, %eax	#, D.28051
	je	.L403	#,
	.loc 1 1667 0 discriminator 2
	movq	cfun(%rip), %rax	# cfun, cfun.272
	movq	24(%rax), %rax	# cfun.272_77->emit, D.28046
	movq	80(%rax), %rax	# _78->x_regno_reg_rtx, D.28047
	movl	-44(%rbp), %edx	# reg, tmp149
	movslq	%edx, %rdx	# tmp149, D.28043
	salq	$3, %rdx	#, D.28043
	addq	%rdx, %rax	# D.28043, D.28047
	movq	(%rax), %rax	# *_82, D.28048
	movzbl	2(%rax), %eax	# _83->mode, D.28049
	movzbl	%al, %eax	# D.28049, D.28050
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28051
	cmpl	$6, %eax	#, D.28051
	jne	.L404	#,
.L403:
	.loc 1 1667 0 discriminator 1
	movl	$2, %eax	#, iftmp.270
	jmp	.L405	#
.L404:
	movl	$1, %eax	#, iftmp.270
.L405:
	.loc 1 1667 0 discriminator 3
	jmp	.L406	#
.L402:
	.loc 1 1667 0 discriminator 2
	movq	cfun(%rip), %rax	# cfun, cfun.274
	movq	24(%rax), %rax	# cfun.274_17->emit, D.28046
	movq	80(%rax), %rax	# _18->x_regno_reg_rtx, D.28047
	movl	-44(%rbp), %edx	# reg, tmp151
	movslq	%edx, %rdx	# tmp151, D.28043
	salq	$3, %rdx	#, D.28043
	addq	%rdx, %rax	# D.28043, D.28047
	movq	(%rax), %rax	# *_22, D.28048
	movzbl	2(%rax), %eax	# _23->mode, D.28049
	cmpb	$18, %al	#, D.28049
	jne	.L407	#,
	.loc 1 1667 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.276
	andl	$33554432, %eax	#, D.28050
	testl	%eax, %eax	# D.28050
	je	.L408	#,
	movl	$2, %eax	#, iftmp.275
	jmp	.L406	#
.L408:
	.loc 1 1667 0 discriminator 2
	movl	$3, %eax	#, iftmp.275
	jmp	.L406	#
.L407:
	movq	cfun(%rip), %rax	# cfun, cfun.278
	movq	24(%rax), %rax	# cfun.278_30->emit, D.28046
	movq	80(%rax), %rax	# _31->x_regno_reg_rtx, D.28047
	movl	-44(%rbp), %edx	# reg, tmp152
	movslq	%edx, %rdx	# tmp152, D.28043
	salq	$3, %rdx	#, D.28043
	addq	%rdx, %rax	# D.28043, D.28047
	movq	(%rax), %rax	# *_35, D.28048
	movzbl	2(%rax), %eax	# _36->mode, D.28049
	cmpb	$24, %al	#, D.28049
	jne	.L411	#,
	.loc 1 1667 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.280
	andl	$33554432, %eax	#, D.28050
	testl	%eax, %eax	# D.28050
	je	.L412	#,
	movl	$4, %eax	#, iftmp.279
	jmp	.L406	#
.L412:
	.loc 1 1667 0 discriminator 2
	movl	$6, %eax	#, iftmp.279
	jmp	.L406	#
.L411:
	movq	cfun(%rip), %rax	# cfun, cfun.281
	movq	24(%rax), %rax	# cfun.281_43->emit, D.28046
	movq	80(%rax), %rax	# _44->x_regno_reg_rtx, D.28047
	movl	-44(%rbp), %edx	# reg, tmp153
	movslq	%edx, %rdx	# tmp153, D.28043
	salq	$3, %rdx	#, D.28043
	addq	%rdx, %rax	# D.28043, D.28047
	movq	(%rax), %rax	# *_48, D.28048
	movzbl	2(%rax), %eax	# _49->mode, D.28049
	movzbl	%al, %eax	# D.28049, D.28050
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28049
	movzbl	%al, %edx	# D.28049, D.28050
	movl	target_flags(%rip), %eax	# target_flags, target_flags.283
	andl	$33554432, %eax	#, D.28050
	testl	%eax, %eax	# D.28050
	je	.L415	#,
	.loc 1 1667 0 discriminator 1
	movl	$8, %eax	#, iftmp.282
	jmp	.L416	#
.L415:
	.loc 1 1667 0 discriminator 2
	movl	$4, %eax	#, iftmp.282
.L416:
	.loc 1 1667 0 discriminator 3
	addl	%edx, %eax	# D.28050, D.28050
	subl	$1, %eax	#, D.28050
	movl	target_flags(%rip), %edx	# target_flags, target_flags.285
	andl	$33554432, %edx	#, D.28050
	testl	%edx, %edx	# D.28050
	je	.L417	#,
	.loc 1 1667 0 discriminator 1
	movl	$8, %ebx	#, iftmp.284
	jmp	.L418	#
.L417:
	.loc 1 1667 0 discriminator 2
	movl	$4, %ebx	#, iftmp.284
.L418:
	.loc 1 1667 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.284
.L406:
	movl	%eax, -24(%rbp)	# iftmp.269, nregs
	.loc 1 1669 0 is_stmt 1 discriminator 3
	movl	-44(%rbp), %eax	# reg, tmp157
	movl	%eax, %esi	# tmp157,
	movl	$spilled_pseudos, %edi	#,
	call	bitmap_bit_p	#
	testl	%eax, %eax	# D.28050
	jne	.L419	#,
	.loc 1 1670 0
	movl	-40(%rbp), %eax	# spilled_nregs, tmp158
	movl	-36(%rbp), %edx	# spilled, tmp159
	addl	%edx, %eax	# tmp159, D.28050
	cmpl	-20(%rbp), %eax	# r, D.28050
	jle	.L419	#,
	.loc 1 1670 0 is_stmt 0 discriminator 1
	movl	-24(%rbp), %eax	# nregs, tmp160
	movl	-20(%rbp), %edx	# r, tmp161
	addl	%edx, %eax	# tmp161, D.28050
	cmpl	-36(%rbp), %eax	# spilled, D.28050
	jg	.L420	#,
.L419:
	.loc 1 1671 0 is_stmt 1
	jmp	.L397	#
.L420:
	.loc 1 1673 0
	movl	-44(%rbp), %eax	# reg, tmp162
	movl	%eax, %esi	# tmp162,
	movl	$spilled_pseudos, %edi	#,
	call	bitmap_set_bit	#
	.loc 1 1675 0
	movl	-20(%rbp), %eax	# r, tmp164
	cltq
	movl	spill_add_cost(,%rax,4), %edx	# spill_add_cost, D.28050
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.286
	movl	-44(%rbp), %ecx	# reg, tmp166
	movslq	%ecx, %rcx	# tmp166, tmp165
	addq	$4, %rcx	#, tmp167
	movq	(%rax,%rcx,8), %rax	# reg_n_info.286_97->data.reg, D.28052
	movl	20(%rax), %eax	# _98->freq, D.28050
	subl	%eax, %edx	# D.28050, D.28050
	movl	-20(%rbp), %eax	# r, tmp169
	cltq
	movl	%edx, spill_add_cost(,%rax,4)	# D.28050, spill_add_cost
	.loc 1 1676 0
	jmp	.L422	#
.L423:
	.loc 1 1677 0
	movl	-24(%rbp), %eax	# nregs, tmp170
	movl	-20(%rbp), %edx	# r, tmp171
	leal	(%rdx,%rax), %esi	#, D.28050
	movl	-24(%rbp), %eax	# nregs, tmp172
	movl	-20(%rbp), %edx	# r, tmp173
	addl	%edx, %eax	# tmp173, D.28050
	cltq
	movl	spill_cost(,%rax,4), %edx	# spill_cost, D.28050
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.287
	movl	-44(%rbp), %ecx	# reg, tmp176
	movslq	%ecx, %rcx	# tmp176, tmp175
	addq	$4, %rcx	#, tmp177
	movq	(%rax,%rcx,8), %rax	# reg_n_info.287_106->data.reg, D.28052
	movl	20(%rax), %eax	# _107->freq, D.28050
	subl	%eax, %edx	# D.28050, D.28050
	movslq	%esi, %rax	# D.28050, tmp178
	movl	%edx, spill_cost(,%rax,4)	# D.28050, spill_cost
.L422:
	.loc 1 1676 0 discriminator 1
	movl	-24(%rbp), %eax	# nregs, nregs.288
	leal	-1(%rax), %edx	#, tmp179
	movl	%edx, -24(%rbp)	# tmp179, nregs
	testl	%eax, %eax	# nregs.288
	jg	.L423	#,
.L397:
	.loc 1 1678 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE13:
	.size	count_spilled_pseudo, .-count_spilled_pseudo
	.section	.rodata
.LC4:
	.string	"Using reg %d for reload %d\n"
	.text
	.type	find_reg, @function
find_reg:
.LFB14:
	.loc 1 1686 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$168, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -168(%rbp)	# chain, chain
	movl	%esi, -172(%rbp)	# order, order
	.loc 1 1687 0
	movl	-172(%rbp), %eax	# order, tmp210
	cltq
	movzwl	reload_order(%rax,%rax), %eax	# reload_order, D.28054
	cwtl
	movl	%eax, -112(%rbp)	# tmp211, rnum
	.loc 1 1688 0
	movl	-112(%rbp), %eax	# rnum, tmp212
	movslq	%eax, %rdx	# tmp212, D.28055
	movq	%rdx, %rax	# D.28055, tmp213
	addq	%rax, %rax	# tmp213
	addq	%rdx, %rax	# D.28055, tmp213
	salq	$2, %rax	#, tmp213
	addq	%rdx, %rax	# D.28055, tmp213
	salq	$3, %rax	#, tmp214
	addq	$rld, %rax	#, tmp215
	movq	%rax, -48(%rbp)	# tmp215, rl
	.loc 1 1689 0
	movl	$2147483647, -156(%rbp)	#, best_cost
	.loc 1 1690 0
	movl	$-1, -152(%rbp)	#, best_reg
	.loc 1 1696 0
	movq	bad_spill_regs(%rip), %rax	# bad_spill_regs, tmp216
	movq	%rax, -40(%rbp)	# tmp216, not_usable
	.loc 1 1697 0
	movq	bad_spill_regs_global(%rip), %rax	# bad_spill_regs_global, bad_spill_regs_global.289
	orq	%rax, -40(%rbp)	# bad_spill_regs_global.289, not_usable
	.loc 1 1698 0
	movq	-48(%rbp), %rax	# rl, tmp217
	movl	16(%rax), %eax	# rl_62->class, D.28056
	movl	%eax, %eax	# D.28056, tmp218
	movq	reg_class_contents(,%rax,8), %rax	# reg_class_contents, D.28055
	notq	%rax	# D.28055
	orq	%rax, -40(%rbp)	# D.28055, not_usable
	.loc 1 1700 0
	movq	$0, -88(%rbp)	#, used_by_other_reload
	.loc 1 1701 0
	movl	$0, -140(%rbp)	#, k
	jmp	.L425	#
.L429:
.LBB61:
	.loc 1 1703 0
	movl	-140(%rbp), %eax	# k, tmp220
	cltq
	movzwl	reload_order(%rax,%rax), %eax	# reload_order, D.28054
	cwtl
	movl	%eax, -108(%rbp)	# tmp221, other
	.loc 1 1705 0
	movl	-108(%rbp), %eax	# other, tmp223
	movslq	%eax, %rdx	# tmp223, tmp222
	movq	%rdx, %rax	# tmp222, tmp224
	addq	%rax, %rax	# tmp224
	addq	%rdx, %rax	# tmp222, tmp224
	salq	$2, %rax	#, tmp224
	addq	%rdx, %rax	# tmp222, tmp224
	salq	$3, %rax	#, tmp225
	addq	$rld+48, %rax	#, tmp226
	movl	8(%rax), %eax	# rld[other_75].regno, D.28053
	testl	%eax, %eax	# D.28053
	js	.L426	#,
	.loc 1 1705 0 is_stmt 0 discriminator 1
	movl	-112(%rbp), %edx	# rnum, tmp227
	movl	-108(%rbp), %eax	# other, tmp228
	movl	%edx, %esi	# tmp227,
	movl	%eax, %edi	# tmp228,
	call	reloads_conflict	#
	testl	%eax, %eax	# D.28053
	je	.L426	#,
	.loc 1 1706 0 is_stmt 1
	movl	$0, -144(%rbp)	#, j
	jmp	.L427	#
.L428:
	.loc 1 1707 0 discriminator 2
	movl	-108(%rbp), %eax	# other, tmp230
	movslq	%eax, %rdx	# tmp230, tmp229
	movq	%rdx, %rax	# tmp229, tmp231
	addq	%rax, %rax	# tmp231
	addq	%rdx, %rax	# tmp229, tmp231
	salq	$2, %rax	#, tmp231
	addq	%rdx, %rax	# tmp229, tmp231
	salq	$3, %rax	#, tmp232
	addq	$rld+48, %rax	#, tmp233
	movl	8(%rax), %eax	# rld[other_75].regno, D.28053
	movl	%eax, %edx	# D.28053, D.28057
	movl	-144(%rbp), %eax	# j, tmp234
	addl	%edx, %eax	# D.28057, D.28057
	movl	$1, %edx	#, tmp235
	movl	%eax, %ecx	# D.28053, tmp355
	salq	%cl, %rdx	# tmp355, D.28055
	movq	%rdx, %rax	# D.28055, D.28055
	orq	%rax, -88(%rbp)	# D.28055, used_by_other_reload
	.loc 1 1706 0 discriminator 2
	addl	$1, -144(%rbp)	#, j
.L427:
	.loc 1 1706 0 is_stmt 0 discriminator 1
	movl	-108(%rbp), %eax	# other, tmp237
	movslq	%eax, %rdx	# tmp237, tmp236
	movq	%rdx, %rax	# tmp236, tmp238
	addq	%rax, %rax	# tmp238
	addq	%rdx, %rax	# tmp236, tmp238
	salq	$2, %rax	#, tmp238
	addq	%rdx, %rax	# tmp236, tmp238
	salq	$3, %rax	#, tmp239
	addq	$rld+32, %rax	#, tmp240
	movl	(%rax), %eax	# rld[other_75].nregs, D.28057
	cmpl	-144(%rbp), %eax	# j, D.28057
	ja	.L428	#,
.L426:
.LBE61:
	.loc 1 1701 0 is_stmt 1
	addl	$1, -140(%rbp)	#, k
.L425:
	.loc 1 1701 0 is_stmt 0 discriminator 1
	movl	-140(%rbp), %eax	# k, tmp241
	cmpl	-172(%rbp), %eax	# order, tmp241
	jl	.L429	#,
	.loc 1 1710 0 is_stmt 1
	movl	$0, -148(%rbp)	#, i
	jmp	.L430	#
.L461:
.LBB62:
	.loc 1 1712 0
	movl	-148(%rbp), %eax	# i, tmp242
	movl	%eax, -104(%rbp)	# tmp242, regno
	.loc 1 1714 0
	movl	-104(%rbp), %eax	# regno, regno.290
	movq	-40(%rbp), %rdx	# not_usable, tmp243
	movl	%eax, %ecx	# regno.290, tmp357
	shrq	%cl, %rdx	# tmp357, D.28055
	movq	%rdx, %rax	# D.28055, D.28055
	andl	$1, %eax	#, D.28055
	testq	%rax, %rax	# D.28055
	jne	.L431	#,
	.loc 1 1715 0
	movl	-104(%rbp), %eax	# regno, regno.291
	movq	-88(%rbp), %rdx	# used_by_other_reload, tmp244
	movl	%eax, %ecx	# regno.291, tmp359
	shrq	%cl, %rdx	# tmp359, D.28055
	movq	%rdx, %rax	# D.28055, D.28055
	andl	$1, %eax	#, D.28055
	testq	%rax, %rax	# D.28055
	jne	.L431	#,
	.loc 1 1716 0
	movq	-48(%rbp), %rax	# rl, tmp245
	movl	28(%rax), %edx	# rl_62->mode, D.28058
	movl	-104(%rbp), %eax	# regno, regno.292
	movl	%edx, %esi	# D.28058,
	movl	%eax, %edi	# regno.292,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.28053
	je	.L431	#,
.LBB63:
	.loc 1 1718 0
	movl	-104(%rbp), %eax	# regno, tmp246
	movl	spill_cost(,%rax,4), %eax	# spill_cost, tmp247
	movl	%eax, -136(%rbp)	# tmp247, this_cost
	.loc 1 1719 0
	movl	$1, -132(%rbp)	#, ok
	.loc 1 1720 0
	cmpl	$7, -104(%rbp)	#, regno
	jbe	.L432	#,
	.loc 1 1720 0 is_stmt 0 discriminator 1
	cmpl	$15, -104(%rbp)	#, regno
	jbe	.L433	#,
.L432:
	.loc 1 1720 0 discriminator 2
	cmpl	$20, -104(%rbp)	#, regno
	jbe	.L434	#,
	.loc 1 1720 0 discriminator 1
	cmpl	$28, -104(%rbp)	#, regno
	jbe	.L433	#,
.L434:
	.loc 1 1720 0 discriminator 2
	cmpl	$44, -104(%rbp)	#, regno
	jbe	.L435	#,
	.loc 1 1720 0 discriminator 1
	cmpl	$52, -104(%rbp)	#, regno
	jbe	.L433	#,
.L435:
	.loc 1 1720 0 discriminator 2
	cmpl	$28, -104(%rbp)	#, regno
	jbe	.L436	#,
	.loc 1 1720 0 discriminator 1
	cmpl	$36, -104(%rbp)	#, regno
	ja	.L436	#,
.L433:
	movq	-48(%rbp), %rax	# rl, tmp248
	movl	28(%rax), %eax	# rl_62->mode, D.28058
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28060
	cmpl	$5, %eax	#, D.28060
	je	.L437	#,
	.loc 1 1720 0 discriminator 4
	movq	-48(%rbp), %rax	# rl, tmp250
	movl	28(%rax), %eax	# rl_62->mode, D.28058
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28060
	cmpl	$6, %eax	#, D.28060
	jne	.L438	#,
.L437:
	.loc 1 1720 0 discriminator 3
	movl	$2, %eax	#, iftmp.294
	jmp	.L440	#
.L438:
	.loc 1 1720 0 discriminator 1
	movl	$1, %eax	#, iftmp.294
	jmp	.L440	#
.L436:
	.loc 1 1720 0 discriminator 2
	movq	-48(%rbp), %rax	# rl, tmp252
	movl	28(%rax), %eax	# rl_62->mode, D.28058
	cmpl	$18, %eax	#, D.28058
	jne	.L441	#,
	.loc 1 1720 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.297
	andl	$33554432, %eax	#, D.28053
	testl	%eax, %eax	# D.28053
	je	.L442	#,
	.loc 1 1720 0 discriminator 9
	movl	$2, %eax	#, iftmp.296
	jmp	.L440	#
.L442:
	.loc 1 1720 0 discriminator 10
	movl	$3, %eax	#, iftmp.296
	jmp	.L440	#
.L441:
	.loc 1 1720 0 discriminator 8
	movq	-48(%rbp), %rax	# rl, tmp253
	movl	28(%rax), %eax	# rl_62->mode, D.28058
	cmpl	$24, %eax	#, D.28058
	jne	.L445	#,
	.loc 1 1720 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.300
	andl	$33554432, %eax	#, D.28053
	testl	%eax, %eax	# D.28053
	je	.L446	#,
	.loc 1 1720 0 discriminator 13
	movl	$4, %eax	#, iftmp.299
	jmp	.L440	#
.L446:
	.loc 1 1720 0 discriminator 14
	movl	$6, %eax	#, iftmp.299
	jmp	.L440	#
.L445:
	.loc 1 1720 0 discriminator 12
	movq	-48(%rbp), %rax	# rl, tmp254
	movl	28(%rax), %eax	# rl_62->mode, D.28058
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28059
	movzbl	%al, %edx	# D.28059, D.28053
	movl	target_flags(%rip), %eax	# target_flags, target_flags.302
	andl	$33554432, %eax	#, D.28053
	testl	%eax, %eax	# D.28053
	je	.L449	#,
	.loc 1 1720 0 discriminator 1
	movl	$8, %eax	#, iftmp.301
	jmp	.L450	#
.L449:
	.loc 1 1720 0 discriminator 2
	movl	$4, %eax	#, iftmp.301
.L450:
	.loc 1 1720 0 discriminator 3
	addl	%edx, %eax	# D.28053, D.28053
	subl	$1, %eax	#, D.28053
	movl	target_flags(%rip), %edx	# target_flags, target_flags.304
	andl	$33554432, %edx	#, D.28053
	testl	%edx, %edx	# D.28053
	je	.L451	#,
	.loc 1 1720 0 discriminator 1
	movl	$8, %ebx	#, iftmp.303
	jmp	.L452	#
.L451:
	.loc 1 1720 0 discriminator 2
	movl	$4, %ebx	#, iftmp.303
.L452:
	.loc 1 1720 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.303
.L440:
	.loc 1 1720 0 discriminator 6
	movl	%eax, -100(%rbp)	# iftmp.293, this_nregs
	.loc 1 1722 0 is_stmt 1 discriminator 6
	movl	$1, -144(%rbp)	#, j
	jmp	.L453	#
.L456:
	.loc 1 1724 0
	movl	-144(%rbp), %eax	# j, tmp258
	movl	-104(%rbp), %edx	# regno, tmp259
	addl	%edx, %eax	# tmp259, D.28057
	movl	%eax, %eax	# D.28057, tmp260
	movl	spill_add_cost(,%rax,4), %eax	# spill_add_cost, D.28053
	addl	%eax, -136(%rbp)	# D.28053, this_cost
	.loc 1 1725 0
	movl	-144(%rbp), %eax	# j, tmp261
	movl	-104(%rbp), %edx	# regno, tmp262
	addl	%edx, %eax	# tmp262, D.28057
	movq	-40(%rbp), %rdx	# not_usable, tmp263
	movl	%eax, %ecx	# D.28053, tmp362
	shrq	%cl, %rdx	# tmp362, D.28055
	movq	%rdx, %rax	# D.28055, D.28055
	andl	$1, %eax	#, D.28055
	testq	%rax, %rax	# D.28055
	jne	.L454	#,
	.loc 1 1726 0
	movl	-144(%rbp), %eax	# j, tmp264
	movl	-104(%rbp), %edx	# regno, tmp265
	addl	%edx, %eax	# tmp265, D.28057
	movq	-88(%rbp), %rdx	# used_by_other_reload, tmp266
	movl	%eax, %ecx	# D.28053, tmp364
	shrq	%cl, %rdx	# tmp364, D.28055
	movq	%rdx, %rax	# D.28055, D.28055
	andl	$1, %eax	#, D.28055
	testq	%rax, %rax	# D.28055
	je	.L455	#,
.L454:
	.loc 1 1727 0
	movl	$0, -132(%rbp)	#, ok
.L455:
	.loc 1 1722 0
	addl	$1, -144(%rbp)	#, j
.L453:
	.loc 1 1722 0 is_stmt 0 discriminator 1
	movl	-144(%rbp), %eax	# j, tmp267
	cmpl	-100(%rbp), %eax	# this_nregs, tmp267
	jb	.L456	#,
	.loc 1 1729 0 is_stmt 1
	cmpl	$0, -132(%rbp)	#, ok
	jne	.L457	#,
	.loc 1 1730 0
	jmp	.L431	#
.L457:
	.loc 1 1731 0
	movq	-48(%rbp), %rax	# rl, tmp268
	movq	(%rax), %rax	# rl_62->in, D.28061
	testq	%rax, %rax	# D.28061
	je	.L458	#,
	.loc 1 1731 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# rl, tmp269
	movq	(%rax), %rax	# rl_62->in, D.28061
	movzwl	(%rax), %eax	# _156->code, D.28062
	cmpw	$61, %ax	#, D.28062
	jne	.L458	#,
	movq	-48(%rbp), %rax	# rl, tmp270
	movq	(%rax), %rax	# rl_62->in, D.28061
	movl	8(%rax), %eax	# _158->fld[0].rtuint, D.28057
	cmpl	-104(%rbp), %eax	# regno, D.28057
	jne	.L458	#,
	.loc 1 1732 0 is_stmt 1
	subl	$1, -136(%rbp)	#, this_cost
.L458:
	.loc 1 1733 0
	movq	-48(%rbp), %rax	# rl, tmp271
	movq	8(%rax), %rax	# rl_62->out, D.28061
	testq	%rax, %rax	# D.28061
	je	.L459	#,
	.loc 1 1733 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# rl, tmp272
	movq	8(%rax), %rax	# rl_62->out, D.28061
	movzwl	(%rax), %eax	# _162->code, D.28062
	cmpw	$61, %ax	#, D.28062
	jne	.L459	#,
	movq	-48(%rbp), %rax	# rl, tmp273
	movq	8(%rax), %rax	# rl_62->out, D.28061
	movl	8(%rax), %eax	# _164->fld[0].rtuint, D.28057
	cmpl	-104(%rbp), %eax	# regno, D.28057
	jne	.L459	#,
	.loc 1 1734 0 is_stmt 1
	subl	$1, -136(%rbp)	#, this_cost
.L459:
	.loc 1 1735 0
	movl	-136(%rbp), %eax	# this_cost, tmp274
	cmpl	-156(%rbp), %eax	# best_cost, tmp274
	jl	.L460	#,
	.loc 1 1738 0
	movl	-136(%rbp), %eax	# this_cost, tmp275
	cmpl	-156(%rbp), %eax	# best_cost, tmp275
	jne	.L431	#,
	.loc 1 1740 0
	movl	-104(%rbp), %eax	# regno, tmp276
	movl	inv_reg_alloc_order(,%rax,4), %edx	# inv_reg_alloc_order, D.28053
	.loc 1 1741 0
	movl	-152(%rbp), %eax	# best_reg, tmp278
	cltq
	movl	inv_reg_alloc_order(,%rax,4), %eax	# inv_reg_alloc_order, D.28053
	.loc 1 1740 0
	cmpl	%eax, %edx	# D.28053, D.28053
	jge	.L431	#,
.L460:
	.loc 1 1748 0
	movl	-104(%rbp), %eax	# regno, tmp279
	movl	%eax, -152(%rbp)	# tmp279, best_reg
	.loc 1 1749 0
	movl	-136(%rbp), %eax	# this_cost, tmp280
	movl	%eax, -156(%rbp)	# tmp280, best_cost
.L431:
.LBE63:
.LBE62:
	.loc 1 1710 0
	addl	$1, -148(%rbp)	#, i
.L430:
	.loc 1 1710 0 is_stmt 0 discriminator 1
	cmpl	$52, -148(%rbp)	#, i
	jbe	.L461	#,
	.loc 1 1753 0 is_stmt 1
	cmpl	$-1, -152(%rbp)	#, best_reg
	jne	.L462	#,
	.loc 1 1754 0
	movl	$0, %eax	#, D.28053
	jmp	.L463	#
.L462:
	.loc 1 1756 0
	movq	rtl_dump_file(%rip), %rax	# rtl_dump_file, rtl_dump_file.305
	testq	%rax, %rax	# rtl_dump_file.305
	je	.L464	#,
	.loc 1 1757 0
	movq	rtl_dump_file(%rip), %rax	# rtl_dump_file, rtl_dump_file.306
	movl	-112(%rbp), %ecx	# rnum, tmp281
	movl	-152(%rbp), %edx	# best_reg, tmp282
	movl	$.LC4, %esi	#,
	movq	%rax, %rdi	# rtl_dump_file.306,
	movl	$0, %eax	#,
	call	fprintf	#
.L464:
	.loc 1 1759 0
	cmpl	$7, -152(%rbp)	#, best_reg
	jle	.L465	#,
	.loc 1 1759 0 is_stmt 0 discriminator 1
	cmpl	$15, -152(%rbp)	#, best_reg
	jle	.L466	#,
.L465:
	.loc 1 1759 0 discriminator 2
	cmpl	$20, -152(%rbp)	#, best_reg
	jle	.L467	#,
	.loc 1 1759 0 discriminator 1
	cmpl	$28, -152(%rbp)	#, best_reg
	jle	.L466	#,
.L467:
	.loc 1 1759 0 discriminator 2
	cmpl	$44, -152(%rbp)	#, best_reg
	jle	.L468	#,
	.loc 1 1759 0 discriminator 1
	cmpl	$52, -152(%rbp)	#, best_reg
	jle	.L466	#,
.L468:
	.loc 1 1759 0 discriminator 2
	cmpl	$28, -152(%rbp)	#, best_reg
	jle	.L469	#,
	.loc 1 1759 0 discriminator 1
	cmpl	$36, -152(%rbp)	#, best_reg
	jg	.L469	#,
.L466:
	movq	-48(%rbp), %rax	# rl, tmp283
	movl	28(%rax), %eax	# rl_62->mode, D.28058
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28060
	cmpl	$5, %eax	#, D.28060
	je	.L470	#,
	.loc 1 1759 0 discriminator 4
	movq	-48(%rbp), %rax	# rl, tmp285
	movl	28(%rax), %eax	# rl_62->mode, D.28058
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28060
	cmpl	$6, %eax	#, D.28060
	jne	.L471	#,
.L470:
	.loc 1 1759 0 discriminator 3
	movl	$2, %eax	#, iftmp.308
	jmp	.L473	#
.L471:
	.loc 1 1759 0 discriminator 1
	movl	$1, %eax	#, iftmp.308
	jmp	.L473	#
.L469:
	.loc 1 1759 0 discriminator 2
	movq	-48(%rbp), %rax	# rl, tmp287
	movl	28(%rax), %eax	# rl_62->mode, D.28058
	cmpl	$18, %eax	#, D.28058
	jne	.L474	#,
	.loc 1 1759 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.311
	andl	$33554432, %eax	#, D.28053
	testl	%eax, %eax	# D.28053
	je	.L475	#,
	.loc 1 1759 0 discriminator 9
	movl	$2, %eax	#, iftmp.310
	jmp	.L473	#
.L475:
	.loc 1 1759 0 discriminator 10
	movl	$3, %eax	#, iftmp.310
	jmp	.L473	#
.L474:
	.loc 1 1759 0 discriminator 8
	movq	-48(%rbp), %rax	# rl, tmp288
	movl	28(%rax), %eax	# rl_62->mode, D.28058
	cmpl	$24, %eax	#, D.28058
	jne	.L478	#,
	.loc 1 1759 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.314
	andl	$33554432, %eax	#, D.28053
	testl	%eax, %eax	# D.28053
	je	.L479	#,
	.loc 1 1759 0 discriminator 13
	movl	$4, %eax	#, iftmp.313
	jmp	.L473	#
.L479:
	.loc 1 1759 0 discriminator 14
	movl	$6, %eax	#, iftmp.313
	jmp	.L473	#
.L478:
	.loc 1 1759 0 discriminator 12
	movq	-48(%rbp), %rax	# rl, tmp289
	movl	28(%rax), %eax	# rl_62->mode, D.28058
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28059
	movzbl	%al, %edx	# D.28059, D.28053
	movl	target_flags(%rip), %eax	# target_flags, target_flags.316
	andl	$33554432, %eax	#, D.28053
	testl	%eax, %eax	# D.28053
	je	.L482	#,
	.loc 1 1759 0 discriminator 1
	movl	$8, %eax	#, iftmp.315
	jmp	.L483	#
.L482:
	.loc 1 1759 0 discriminator 2
	movl	$4, %eax	#, iftmp.315
.L483:
	.loc 1 1759 0 discriminator 3
	addl	%edx, %eax	# D.28053, D.28053
	subl	$1, %eax	#, D.28053
	movl	target_flags(%rip), %edx	# target_flags, target_flags.318
	andl	$33554432, %edx	#, D.28053
	testl	%edx, %edx	# D.28053
	je	.L484	#,
	.loc 1 1759 0 discriminator 1
	movl	$8, %ebx	#, iftmp.317
	jmp	.L485	#
.L484:
	.loc 1 1759 0 discriminator 2
	movl	$4, %ebx	#, iftmp.317
.L485:
	.loc 1 1759 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.317
.L473:
	.loc 1 1759 0 discriminator 6
	movq	-48(%rbp), %rdx	# rl, tmp293
	movl	%eax, 32(%rdx)	# iftmp.307, rl_62->nregs
	.loc 1 1760 0 is_stmt 1 discriminator 6
	movq	-48(%rbp), %rax	# rl, tmp294
	movl	-152(%rbp), %edx	# best_reg, tmp295
	movl	%edx, 56(%rax)	# tmp295, rl_62->regno
.LBB64:
	.loc 1 1762 0 discriminator 6
	movq	-168(%rbp), %rax	# chain, tmp296
	movq	40(%rax), %rax	# chain_214(D)->live_throughout.first, tmp297
	movq	%rax, -80(%rbp)	# tmp297, ptr_
	movl	$0, -96(%rbp)	#, indx_
	movl	$53, -128(%rbp)	#, bit_num_
	movl	$0, -124(%rbp)	#, word_num_
	jmp	.L486	#
.L488:
	.loc 1 1762 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# ptr_, tmp298
	movq	(%rax), %rax	# ptr__18->next, tmp299
	movq	%rax, -80(%rbp)	# tmp299, ptr_
.L486:
	cmpq	$0, -80(%rbp)	#, ptr_
	je	.L487	#,
	.loc 1 1762 0 discriminator 2
	movq	-80(%rbp), %rax	# ptr_, tmp300
	movl	16(%rax), %eax	# ptr__18->indx, D.28057
	cmpl	-96(%rbp), %eax	# indx_, D.28057
	jb	.L488	#,
.L487:
	.loc 1 1762 0 discriminator 3
	cmpq	$0, -80(%rbp)	#, ptr_
	je	.L489	#,
	.loc 1 1762 0 discriminator 1
	movq	-80(%rbp), %rax	# ptr_, tmp301
	movl	16(%rax), %eax	# ptr__18->indx, D.28057
	cmpl	-96(%rbp), %eax	# indx_, D.28057
	je	.L489	#,
	movl	$0, -128(%rbp)	#, bit_num_
	movl	$0, -124(%rbp)	#, word_num_
	jmp	.L490	#
.L489:
	.loc 1 1762 0 discriminator 2
	jmp	.L490	#
.L497:
	.loc 1 1762 0
	jmp	.L491	#
.L496:
.LBB65:
	.loc 1 1762 0 discriminator 2
	movq	-80(%rbp), %rax	# ptr_, tmp302
	movl	-124(%rbp), %edx	# word_num_, tmp303
	addq	$2, %rdx	#, tmp304
	movq	8(%rax,%rdx,8), %rax	# ptr__19->bits, tmp305
	movq	%rax, -72(%rbp)	# tmp305, word_
	cmpq	$0, -72(%rbp)	#, word_
	je	.L492	#,
	.loc 1 1762 0 discriminator 1
	jmp	.L493	#
.L495:
.LBB66:
	.loc 1 1762 0 discriminator 2
	movl	-128(%rbp), %eax	# bit_num_, bit_num_.319
	movl	$1, %edx	#, tmp306
	movl	%eax, %ecx	# bit_num_.319, tmp367
	salq	%cl, %rdx	# tmp367, tmp307
	movq	%rdx, %rax	# tmp307, tmp307
	movq	%rax, -32(%rbp)	# tmp307, mask_
	movq	-32(%rbp), %rax	# mask_, tmp308
	movq	-72(%rbp), %rdx	# word_, tmp309
	andq	%rdx, %rax	# tmp309, D.28055
	testq	%rax, %rax	# D.28055
	je	.L494	#,
	.loc 1 1762 0 discriminator 1
	movq	-32(%rbp), %rax	# mask_, tmp310
	notq	%rax	# D.28055
	andq	%rax, -72(%rbp)	# D.28055, word_
	movq	-80(%rbp), %rax	# ptr_, tmp311
	movl	16(%rax), %eax	# ptr__19->indx, D.28057
	leal	(%rax,%rax), %edx	#, D.28057
	movl	-124(%rbp), %eax	# word_num_, tmp312
	addl	%edx, %eax	# D.28057, D.28057
	sall	$6, %eax	#, D.28057
	movl	%eax, %edx	# D.28057, D.28057
	movl	-128(%rbp), %eax	# bit_num_, tmp316
	addl	%edx, %eax	# D.28057, tmp315
	movl	%eax, -144(%rbp)	# tmp315, j
	movl	-144(%rbp), %edx	# j, j.320
	movq	-48(%rbp), %rax	# rl, tmp317
	movl	32(%rax), %eax	# rl_62->nregs, D.28057
	movl	%eax, %ecx	# D.28057, D.28053
	movl	-152(%rbp), %eax	# best_reg, tmp318
	movl	%ecx, %esi	# D.28053,
	movl	%eax, %edi	# tmp318,
	call	count_spilled_pseudo	#
	cmpq	$0, -72(%rbp)	#, word_
	jne	.L494	#,
	jmp	.L492	#
.L494:
.LBE66:
	.loc 1 1762 0 discriminator 2
	addl	$1, -128(%rbp)	#, bit_num_
.L493:
	.loc 1 1762 0 discriminator 1
	cmpl	$63, -128(%rbp)	#, bit_num_
	jbe	.L495	#,
.L492:
	.loc 1 1762 0 discriminator 2
	movl	$0, -128(%rbp)	#, bit_num_
.LBE65:
	addl	$1, -124(%rbp)	#, word_num_
.L491:
	.loc 1 1762 0 discriminator 1
	cmpl	$1, -124(%rbp)	#, word_num_
	jbe	.L496	#,
	.loc 1 1762 0 discriminator 3
	movl	$0, -124(%rbp)	#, word_num_
	movq	-80(%rbp), %rax	# ptr_, tmp319
	movq	(%rax), %rax	# ptr__19->next, tmp320
	movq	%rax, -80(%rbp)	# tmp320, ptr_
.L490:
	.loc 1 1762 0 discriminator 1
	cmpq	$0, -80(%rbp)	#, ptr_
	jne	.L497	#,
.LBE64:
.LBB67:
	.loc 1 1768 0 is_stmt 1
	movq	-168(%rbp), %rax	# chain, tmp321
	movq	64(%rax), %rax	# chain_214(D)->dead_or_set.first, tmp322
	movq	%rax, -64(%rbp)	# tmp322, ptr_
	movl	$0, -92(%rbp)	#, indx_
	movl	$53, -120(%rbp)	#, bit_num_
	movl	$0, -116(%rbp)	#, word_num_
	jmp	.L498	#
.L500:
	.loc 1 1768 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# ptr_, tmp323
	movq	(%rax), %rax	# ptr__29->next, tmp324
	movq	%rax, -64(%rbp)	# tmp324, ptr_
.L498:
	cmpq	$0, -64(%rbp)	#, ptr_
	je	.L499	#,
	.loc 1 1768 0 discriminator 2
	movq	-64(%rbp), %rax	# ptr_, tmp325
	movl	16(%rax), %eax	# ptr__29->indx, D.28057
	cmpl	-92(%rbp), %eax	# indx_, D.28057
	jb	.L500	#,
.L499:
	.loc 1 1768 0 discriminator 3
	cmpq	$0, -64(%rbp)	#, ptr_
	je	.L501	#,
	.loc 1 1768 0 discriminator 1
	movq	-64(%rbp), %rax	# ptr_, tmp326
	movl	16(%rax), %eax	# ptr__29->indx, D.28057
	cmpl	-92(%rbp), %eax	# indx_, D.28057
	je	.L501	#,
	movl	$0, -120(%rbp)	#, bit_num_
	movl	$0, -116(%rbp)	#, word_num_
	jmp	.L502	#
.L501:
	.loc 1 1768 0 discriminator 2
	jmp	.L502	#
.L509:
	.loc 1 1768 0
	jmp	.L503	#
.L508:
.LBB68:
	.loc 1 1768 0 discriminator 2
	movq	-64(%rbp), %rax	# ptr_, tmp327
	movl	-116(%rbp), %edx	# word_num_, tmp328
	addq	$2, %rdx	#, tmp329
	movq	8(%rax,%rdx,8), %rax	# ptr__30->bits, tmp330
	movq	%rax, -56(%rbp)	# tmp330, word_
	cmpq	$0, -56(%rbp)	#, word_
	je	.L504	#,
	.loc 1 1768 0 discriminator 1
	jmp	.L505	#
.L507:
.LBB69:
	.loc 1 1768 0 discriminator 2
	movl	-120(%rbp), %eax	# bit_num_, bit_num_.321
	movl	$1, %edx	#, tmp331
	movl	%eax, %ecx	# bit_num_.321, tmp370
	salq	%cl, %rdx	# tmp370, tmp332
	movq	%rdx, %rax	# tmp332, tmp332
	movq	%rax, -24(%rbp)	# tmp332, mask_
	movq	-24(%rbp), %rax	# mask_, tmp333
	movq	-56(%rbp), %rdx	# word_, tmp334
	andq	%rdx, %rax	# tmp334, D.28055
	testq	%rax, %rax	# D.28055
	je	.L506	#,
	.loc 1 1768 0 discriminator 1
	movq	-24(%rbp), %rax	# mask_, tmp335
	notq	%rax	# D.28055
	andq	%rax, -56(%rbp)	# D.28055, word_
	movq	-64(%rbp), %rax	# ptr_, tmp336
	movl	16(%rax), %eax	# ptr__30->indx, D.28057
	leal	(%rax,%rax), %edx	#, D.28057
	movl	-116(%rbp), %eax	# word_num_, tmp337
	addl	%edx, %eax	# D.28057, D.28057
	sall	$6, %eax	#, D.28057
	movl	%eax, %edx	# D.28057, D.28057
	movl	-120(%rbp), %eax	# bit_num_, tmp341
	addl	%edx, %eax	# D.28057, tmp340
	movl	%eax, -144(%rbp)	# tmp340, j
	movl	-144(%rbp), %edx	# j, j.322
	movq	-48(%rbp), %rax	# rl, tmp342
	movl	32(%rax), %eax	# rl_62->nregs, D.28057
	movl	%eax, %ecx	# D.28057, D.28053
	movl	-152(%rbp), %eax	# best_reg, tmp343
	movl	%ecx, %esi	# D.28053,
	movl	%eax, %edi	# tmp343,
	call	count_spilled_pseudo	#
	cmpq	$0, -56(%rbp)	#, word_
	jne	.L506	#,
	jmp	.L504	#
.L506:
.LBE69:
	.loc 1 1768 0 discriminator 2
	addl	$1, -120(%rbp)	#, bit_num_
.L505:
	.loc 1 1768 0 discriminator 1
	cmpl	$63, -120(%rbp)	#, bit_num_
	jbe	.L507	#,
.L504:
	.loc 1 1768 0 discriminator 2
	movl	$0, -120(%rbp)	#, bit_num_
.LBE68:
	addl	$1, -116(%rbp)	#, word_num_
.L503:
	.loc 1 1768 0 discriminator 1
	cmpl	$1, -116(%rbp)	#, word_num_
	jbe	.L508	#,
	.loc 1 1768 0 discriminator 3
	movl	$0, -116(%rbp)	#, word_num_
	movq	-64(%rbp), %rax	# ptr_, tmp344
	movq	(%rax), %rax	# ptr__30->next, tmp345
	movq	%rax, -64(%rbp)	# tmp345, ptr_
.L502:
	.loc 1 1768 0 discriminator 1
	cmpq	$0, -64(%rbp)	#, ptr_
	jne	.L509	#,
.LBE67:
	.loc 1 1774 0 is_stmt 1
	movl	$0, -148(%rbp)	#, i
	jmp	.L510	#
.L513:
	.loc 1 1776 0
	movl	-152(%rbp), %edx	# best_reg, best_reg.323
	movl	-148(%rbp), %eax	# i, tmp346
	addl	%edx, %eax	# best_reg.323, D.28057
	movl	%eax, %eax	# D.28057, tmp347
	movl	spill_cost(,%rax,4), %eax	# spill_cost, D.28053
	testl	%eax, %eax	# D.28053
	jne	.L511	#,
	.loc 1 1777 0
	movl	-152(%rbp), %edx	# best_reg, best_reg.324
	movl	-148(%rbp), %eax	# i, tmp348
	addl	%edx, %eax	# best_reg.324, D.28057
	movl	%eax, %eax	# D.28057, tmp349
	movl	spill_add_cost(,%rax,4), %eax	# spill_add_cost, D.28053
	testl	%eax, %eax	# D.28053
	je	.L512	#,
.L511:
	.loc 1 1778 0
	movl	$__FUNCTION__.14677, %edx	#,
	movl	$1778, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L512:
	.loc 1 1779 0
	movl	-152(%rbp), %edx	# best_reg, best_reg.325
	movl	-148(%rbp), %eax	# i, tmp350
	addl	%edx, %eax	# best_reg.325, D.28057
	movl	$1, %edx	#, tmp351
	movl	%eax, %ecx	# D.28053, tmp372
	salq	%cl, %rdx	# tmp372, D.28055
	movq	used_spill_regs_local(%rip), %rax	# used_spill_regs_local, used_spill_regs_local.326
	orq	%rdx, %rax	# D.28055, used_spill_regs_local.327
	movq	%rax, used_spill_regs_local(%rip)	# used_spill_regs_local.327, used_spill_regs_local
	.loc 1 1774 0
	addl	$1, -148(%rbp)	#, i
.L510:
	.loc 1 1774 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# rl, tmp352
	movl	32(%rax), %eax	# rl_62->nregs, D.28057
	cmpl	-148(%rbp), %eax	# i, D.28057
	ja	.L513	#,
	.loc 1 1781 0 is_stmt 1
	movl	$1, %eax	#, D.28053
.L463:
	.loc 1 1782 0
	addq	$168, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE14:
	.size	find_reg, .-find_reg
	.section	.rodata
.LC5:
	.string	"Spilling for insn %d.\n"
	.text
	.type	find_reload_regs, @function
find_reload_regs:
.LFB15:
	.loc 1 1793 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# chain, chain
	.loc 1 1800 0
	movl	$0, -28(%rbp)	#, i
	jmp	.L515	#
.L539:
	.loc 1 1803 0
	movq	-40(%rbp), %rax	# chain, tmp168
	movq	88(%rax), %rcx	# chain_12(D)->rld, D.28065
	movl	-28(%rbp), %eax	# i, tmp169
	movslq	%eax, %rdx	# tmp169, D.28066
	movq	%rdx, %rax	# D.28066, tmp170
	addq	%rax, %rax	# tmp170
	addq	%rdx, %rax	# D.28066, tmp170
	salq	$2, %rax	#, tmp170
	addq	%rdx, %rax	# D.28066, tmp170
	salq	$3, %rax	#, tmp171
	addq	%rcx, %rax	# D.28065, D.28065
	movq	64(%rax), %rax	# _17->reg_rtx, D.28067
	testq	%rax, %rax	# D.28067
	je	.L516	#,
.LBB70:
	.loc 1 1805 0
	movq	-40(%rbp), %rax	# chain, tmp172
	movq	88(%rax), %rcx	# chain_12(D)->rld, D.28065
	movl	-28(%rbp), %eax	# i, tmp173
	movslq	%eax, %rdx	# tmp173, D.28066
	movq	%rdx, %rax	# D.28066, tmp174
	addq	%rax, %rax	# tmp174
	addq	%rdx, %rax	# D.28066, tmp174
	salq	$2, %rax	#, tmp174
	addq	%rdx, %rax	# D.28066, tmp174
	salq	$3, %rax	#, tmp175
	addq	%rcx, %rax	# D.28065, D.28065
	movq	64(%rax), %rax	# _22->reg_rtx, D.28067
	movl	8(%rax), %eax	# _23->fld[0].rtuint, D.28068
	movl	%eax, -24(%rbp)	# D.28068, regno
	.loc 1 1806 0
	movq	-40(%rbp), %rax	# chain, tmp176
	movq	88(%rax), %rcx	# chain_12(D)->rld, D.28065
	movl	-28(%rbp), %eax	# i, tmp177
	movslq	%eax, %rdx	# tmp177, D.28066
	movq	%rdx, %rax	# D.28066, tmp178
	addq	%rax, %rax	# tmp178
	addq	%rdx, %rax	# D.28066, tmp178
	salq	$2, %rax	#, tmp178
	addq	%rdx, %rax	# D.28066, tmp178
	salq	$3, %rax	#, tmp179
	leaq	(%rcx,%rax), %rdx	#, D.28065
	movl	-24(%rbp), %eax	# regno, tmp180
	movl	%eax, 56(%rdx)	# tmp180, _29->regno
	.loc 1 1807 0
	movq	-40(%rbp), %rax	# chain, tmp181
	movq	88(%rax), %rcx	# chain_12(D)->rld, D.28065
	movl	-28(%rbp), %eax	# i, tmp182
	movslq	%eax, %rdx	# tmp182, D.28066
	movq	%rdx, %rax	# D.28066, tmp183
	addq	%rax, %rax	# tmp183
	addq	%rdx, %rax	# D.28066, tmp183
	salq	$2, %rax	#, tmp183
	addq	%rdx, %rax	# D.28066, tmp183
	salq	$3, %rax	#, tmp184
	addq	%rax, %rcx	# D.28066, D.28065
	.loc 1 1808 0
	cmpl	$7, -24(%rbp)	#, regno
	jle	.L517	#,
	.loc 1 1808 0 is_stmt 0 discriminator 1
	cmpl	$15, -24(%rbp)	#, regno
	jle	.L518	#,
.L517:
	.loc 1 1808 0 discriminator 2
	cmpl	$20, -24(%rbp)	#, regno
	jle	.L519	#,
	.loc 1 1808 0 discriminator 1
	cmpl	$28, -24(%rbp)	#, regno
	jle	.L518	#,
.L519:
	.loc 1 1808 0 discriminator 2
	cmpl	$44, -24(%rbp)	#, regno
	jle	.L520	#,
	.loc 1 1808 0 discriminator 1
	cmpl	$52, -24(%rbp)	#, regno
	jle	.L518	#,
.L520:
	.loc 1 1808 0 discriminator 2
	cmpl	$28, -24(%rbp)	#, regno
	jle	.L521	#,
	.loc 1 1808 0 discriminator 1
	cmpl	$36, -24(%rbp)	#, regno
	jg	.L521	#,
.L518:
	movq	-40(%rbp), %rax	# chain, tmp185
	movq	88(%rax), %rsi	# chain_12(D)->rld, D.28065
	movl	-28(%rbp), %eax	# i, tmp186
	movslq	%eax, %rdx	# tmp186, D.28066
	movq	%rdx, %rax	# D.28066, tmp187
	addq	%rax, %rax	# tmp187
	addq	%rdx, %rax	# D.28066, tmp187
	salq	$2, %rax	#, tmp187
	addq	%rdx, %rax	# D.28066, tmp187
	salq	$3, %rax	#, tmp188
	addq	%rsi, %rax	# D.28065, D.28065
	movq	64(%rax), %rax	# _82->reg_rtx, D.28067
	movzbl	2(%rax), %eax	# _83->mode, D.28069
	movzbl	%al, %eax	# D.28069, D.28064
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28070
	cmpl	$5, %eax	#, D.28070
	je	.L522	#,
	.loc 1 1808 0 discriminator 4
	movq	-40(%rbp), %rax	# chain, tmp190
	movq	88(%rax), %rsi	# chain_12(D)->rld, D.28065
	movl	-28(%rbp), %eax	# i, tmp191
	movslq	%eax, %rdx	# tmp191, D.28066
	movq	%rdx, %rax	# D.28066, tmp192
	addq	%rax, %rax	# tmp192
	addq	%rdx, %rax	# D.28066, tmp192
	salq	$2, %rax	#, tmp192
	addq	%rdx, %rax	# D.28066, tmp192
	salq	$3, %rax	#, tmp193
	addq	%rsi, %rax	# D.28065, D.28065
	movq	64(%rax), %rax	# _90->reg_rtx, D.28067
	movzbl	2(%rax), %eax	# _91->mode, D.28069
	movzbl	%al, %eax	# D.28069, D.28064
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28070
	cmpl	$6, %eax	#, D.28070
	jne	.L523	#,
.L522:
	.loc 1 1808 0 discriminator 3
	movl	$2, %eax	#, iftmp.329
	jmp	.L525	#
.L523:
	.loc 1 1808 0 discriminator 1
	movl	$1, %eax	#, iftmp.329
	jmp	.L525	#
.L521:
	.loc 1 1808 0 discriminator 2
	movq	-40(%rbp), %rax	# chain, tmp195
	movq	88(%rax), %rsi	# chain_12(D)->rld, D.28065
	movl	-28(%rbp), %eax	# i, tmp196
	movslq	%eax, %rdx	# tmp196, D.28066
	movq	%rdx, %rax	# D.28066, tmp197
	addq	%rax, %rax	# tmp197
	addq	%rdx, %rax	# D.28066, tmp197
	salq	$2, %rax	#, tmp197
	addq	%rdx, %rax	# D.28066, tmp197
	salq	$3, %rax	#, tmp198
	addq	%rsi, %rax	# D.28065, D.28065
	movq	64(%rax), %rax	# _37->reg_rtx, D.28067
	movzbl	2(%rax), %eax	# _38->mode, D.28069
	cmpb	$18, %al	#, D.28069
	jne	.L526	#,
	.loc 1 1808 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.332
	andl	$33554432, %eax	#, D.28064
	testl	%eax, %eax	# D.28064
	je	.L527	#,
	.loc 1 1808 0 discriminator 9
	movl	$2, %eax	#, iftmp.331
	jmp	.L525	#
.L527:
	.loc 1 1808 0 discriminator 10
	movl	$3, %eax	#, iftmp.331
	jmp	.L525	#
.L526:
	.loc 1 1808 0 discriminator 8
	movq	-40(%rbp), %rax	# chain, tmp199
	movq	88(%rax), %rsi	# chain_12(D)->rld, D.28065
	movl	-28(%rbp), %eax	# i, tmp200
	movslq	%eax, %rdx	# tmp200, D.28066
	movq	%rdx, %rax	# D.28066, tmp201
	addq	%rax, %rax	# tmp201
	addq	%rdx, %rax	# D.28066, tmp201
	salq	$2, %rax	#, tmp201
	addq	%rdx, %rax	# D.28066, tmp201
	salq	$3, %rax	#, tmp202
	addq	%rsi, %rax	# D.28065, D.28065
	movq	64(%rax), %rax	# _48->reg_rtx, D.28067
	movzbl	2(%rax), %eax	# _49->mode, D.28069
	cmpb	$24, %al	#, D.28069
	jne	.L530	#,
	.loc 1 1808 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.335
	andl	$33554432, %eax	#, D.28064
	testl	%eax, %eax	# D.28064
	je	.L531	#,
	.loc 1 1808 0 discriminator 13
	movl	$4, %eax	#, iftmp.334
	jmp	.L525	#
.L531:
	.loc 1 1808 0 discriminator 14
	movl	$6, %eax	#, iftmp.334
	jmp	.L525	#
.L530:
	.loc 1 1808 0 discriminator 12
	movq	-40(%rbp), %rax	# chain, tmp203
	movq	88(%rax), %rsi	# chain_12(D)->rld, D.28065
	movl	-28(%rbp), %eax	# i, tmp204
	movslq	%eax, %rdx	# tmp204, D.28066
	movq	%rdx, %rax	# D.28066, tmp205
	addq	%rax, %rax	# tmp205
	addq	%rdx, %rax	# D.28066, tmp205
	salq	$2, %rax	#, tmp205
	addq	%rdx, %rax	# D.28066, tmp205
	salq	$3, %rax	#, tmp206
	addq	%rsi, %rax	# D.28065, D.28065
	movq	64(%rax), %rax	# _59->reg_rtx, D.28067
	movzbl	2(%rax), %eax	# _60->mode, D.28069
	movzbl	%al, %eax	# D.28069, D.28064
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28069
	movzbl	%al, %edx	# D.28069, D.28064
	movl	target_flags(%rip), %eax	# target_flags, target_flags.337
	andl	$33554432, %eax	#, D.28064
	testl	%eax, %eax	# D.28064
	je	.L534	#,
	.loc 1 1808 0 discriminator 1
	movl	$8, %eax	#, iftmp.336
	jmp	.L535	#
.L534:
	.loc 1 1808 0 discriminator 2
	movl	$4, %eax	#, iftmp.336
.L535:
	.loc 1 1808 0 discriminator 3
	addl	%edx, %eax	# D.28064, D.28064
	subl	$1, %eax	#, D.28064
	movl	target_flags(%rip), %edx	# target_flags, target_flags.339
	andl	$33554432, %edx	#, D.28064
	testl	%edx, %edx	# D.28064
	je	.L536	#,
	.loc 1 1808 0 discriminator 1
	movl	$8, %ebx	#, iftmp.338
	jmp	.L537	#
.L536:
	.loc 1 1808 0 discriminator 2
	movl	$4, %ebx	#, iftmp.338
.L537:
	.loc 1 1808 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.338
.L525:
	.loc 1 1808 0 discriminator 6
	movl	%eax, 32(%rcx)	# iftmp.328, _33->nregs
.LBE70:
	jmp	.L538	#
.L516:
	.loc 1 1811 0 is_stmt 1
	movq	-40(%rbp), %rax	# chain, tmp210
	movq	88(%rax), %rcx	# chain_12(D)->rld, D.28065
	movl	-28(%rbp), %eax	# i, tmp211
	movslq	%eax, %rdx	# tmp211, D.28066
	movq	%rdx, %rax	# D.28066, tmp212
	addq	%rax, %rax	# tmp212
	addq	%rdx, %rax	# D.28066, tmp212
	salq	$2, %rax	#, tmp212
	addq	%rdx, %rax	# D.28066, tmp212
	salq	$3, %rax	#, tmp213
	addq	%rcx, %rax	# D.28065, D.28065
	movl	$-1, 56(%rax)	#, _101->regno
.L538:
	.loc 1 1812 0
	movl	-28(%rbp), %eax	# i, tmp214
	movl	%eax, %edx	# tmp214, D.28071
	movl	-28(%rbp), %eax	# i, tmp216
	cltq
	movw	%dx, reload_order(%rax,%rax)	# D.28071, reload_order
	.loc 1 1800 0
	addl	$1, -28(%rbp)	#, i
.L515:
	.loc 1 1800 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# chain, tmp217
	movl	96(%rax), %eax	# chain_12(D)->n_reloads, D.28064
	cmpl	-28(%rbp), %eax	# i, D.28064
	jg	.L539	#,
	.loc 1 1815 0 is_stmt 1
	movq	-40(%rbp), %rax	# chain, tmp218
	movl	96(%rax), %eax	# chain_12(D)->n_reloads, n_reloads.340
	movl	%eax, n_reloads(%rip)	# n_reloads.340, n_reloads
	.loc 1 1816 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.341
	movslq	%eax, %rdx	# n_reloads.341, D.28066
	movq	%rdx, %rax	# D.28066, tmp219
	addq	%rax, %rax	# tmp219
	addq	%rdx, %rax	# D.28066, tmp219
	salq	$2, %rax	#, tmp219
	addq	%rdx, %rax	# D.28066, tmp219
	salq	$3, %rax	#, tmp220
	movq	%rax, %rdx	# tmp219, D.28066
	movq	-40(%rbp), %rax	# chain, tmp221
	movq	88(%rax), %rax	# chain_12(D)->rld, D.28065
	movq	%rax, %rsi	# D.28065,
	movl	$rld, %edi	#,
	call	memcpy	#
	.loc 1 1818 0
	movq	$0, used_spill_regs_local(%rip)	#, used_spill_regs_local
	.loc 1 1820 0
	movq	rtl_dump_file(%rip), %rax	# rtl_dump_file, rtl_dump_file.342
	testq	%rax, %rax	# rtl_dump_file.342
	je	.L540	#,
	.loc 1 1821 0
	movq	-40(%rbp), %rax	# chain, tmp222
	movq	32(%rax), %rax	# chain_12(D)->insn, D.28067
	movl	8(%rax), %edx	# _110->fld[0].rtint, D.28064
	movq	rtl_dump_file(%rip), %rax	# rtl_dump_file, rtl_dump_file.343
	movl	$.LC5, %esi	#,
	movq	%rax, %rdi	# rtl_dump_file.343,
	movl	$0, %eax	#,
	call	fprintf	#
.L540:
	.loc 1 1823 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.344
	movl	$reload_reg_class_lower, %ecx	#,
	movl	$2, %edx	#,
	movl	%eax, %esi	# n_reloads.344,
	movl	$reload_order, %edi	#,
	call	specqsort	#
	.loc 1 1828 0
	movq	-40(%rbp), %rax	# chain, tmp223
	movq	%rax, %rdi	# tmp223,
	call	order_regs_for_reload	#
	.loc 1 1830 0
	movl	$0, -28(%rbp)	#, i
	jmp	.L541	#
.L545:
.LBB71:
	.loc 1 1832 0
	movl	-28(%rbp), %eax	# i, tmp225
	cltq
	movzwl	reload_order(%rax,%rax), %eax	# reload_order, D.28071
	cwtl
	movl	%eax, -20(%rbp)	# tmp226, r
	.loc 1 1835 0
	movl	-20(%rbp), %eax	# r, tmp228
	movslq	%eax, %rdx	# tmp228, tmp227
	movq	%rdx, %rax	# tmp227, tmp229
	addq	%rax, %rax	# tmp229
	addq	%rdx, %rax	# tmp227, tmp229
	salq	$2, %rax	#, tmp229
	addq	%rdx, %rax	# tmp227, tmp229
	salq	$3, %rax	#, tmp230
	addq	$rld+8, %rax	#, tmp231
	movq	(%rax), %rax	# rld[r_117].out, D.28067
	testq	%rax, %rax	# D.28067
	jne	.L542	#,
	.loc 1 1835 0 is_stmt 0 discriminator 1
	movl	-20(%rbp), %eax	# r, tmp233
	movslq	%eax, %rdx	# tmp233, tmp232
	movq	%rdx, %rax	# tmp232, tmp234
	addq	%rax, %rax	# tmp234
	addq	%rdx, %rax	# tmp232, tmp234
	salq	$2, %rax	#, tmp234
	addq	%rdx, %rax	# tmp232, tmp234
	salq	$3, %rax	#, tmp235
	addq	$rld, %rax	#, tmp236
	movq	(%rax), %rax	# rld[r_117].in, D.28067
	testq	%rax, %rax	# D.28067
	jne	.L542	#,
	movl	-20(%rbp), %eax	# r, tmp238
	movslq	%eax, %rdx	# tmp238, tmp237
	movq	%rdx, %rax	# tmp237, tmp239
	addq	%rax, %rax	# tmp239
	addq	%rdx, %rax	# tmp237, tmp239
	salq	$2, %rax	#, tmp239
	addq	%rdx, %rax	# tmp237, tmp239
	salq	$3, %rax	#, tmp240
	addq	$rld+96, %rax	#, tmp241
	movzbl	(%rax), %eax	#, tmp244
	shrb	$2, %al	#, D.28072
	andl	$1, %eax	#, D.28072
	testb	%al, %al	# D.28072
	je	.L543	#,
.L542:
	.loc 1 1836 0 is_stmt 1
	movl	-20(%rbp), %eax	# r, tmp246
	movslq	%eax, %rdx	# tmp246, tmp245
	movq	%rdx, %rax	# tmp245, tmp247
	addq	%rax, %rax	# tmp247
	addq	%rdx, %rax	# tmp245, tmp247
	salq	$2, %rax	#, tmp247
	addq	%rdx, %rax	# tmp245, tmp247
	salq	$3, %rax	#, tmp248
	addq	$rld+96, %rax	#, tmp249
	movzbl	(%rax), %eax	#, tmp252
	andl	$1, %eax	#, D.28072
	testb	%al, %al	# D.28072
	jne	.L543	#,
	.loc 1 1837 0
	movl	-20(%rbp), %eax	# r, tmp254
	movslq	%eax, %rdx	# tmp254, tmp253
	movq	%rdx, %rax	# tmp253, tmp255
	addq	%rax, %rax	# tmp255
	addq	%rdx, %rax	# tmp253, tmp255
	salq	$2, %rax	#, tmp255
	addq	%rdx, %rax	# tmp253, tmp255
	salq	$3, %rax	#, tmp256
	addq	$rld+48, %rax	#, tmp257
	movl	8(%rax), %eax	# rld[r_117].regno, D.28064
	cmpl	$-1, %eax	#, D.28064
	jne	.L543	#,
	.loc 1 1838 0
	movl	-28(%rbp), %edx	# i, tmp258
	movq	-40(%rbp), %rax	# chain, tmp259
	movl	%edx, %esi	# tmp258,
	movq	%rax, %rdi	# tmp259,
	call	find_reg	#
	testl	%eax, %eax	# D.28064
	jne	.L543	#,
	.loc 1 1840 0
	movl	-20(%rbp), %eax	# r, tmp261
	movslq	%eax, %rdx	# tmp261, tmp260
	movq	%rdx, %rax	# tmp260, tmp262
	addq	%rax, %rax	# tmp262
	addq	%rdx, %rax	# tmp260, tmp262
	salq	$2, %rax	#, tmp262
	addq	%rdx, %rax	# tmp260, tmp262
	salq	$3, %rax	#, tmp263
	addq	$rld+16, %rax	#, tmp264
	movl	(%rax), %edx	# rld[r_117].class, D.28073
	movq	-40(%rbp), %rax	# chain, tmp265
	movq	32(%rax), %rax	# chain_12(D)->insn, D.28067
	movl	%edx, %esi	# D.28073,
	movq	%rax, %rdi	# D.28067,
	call	spill_failure	#
	.loc 1 1841 0
	movl	$1, failure(%rip)	#, failure
	.loc 1 1842 0
	jmp	.L514	#
.L543:
.LBE71:
	.loc 1 1830 0
	addl	$1, -28(%rbp)	#, i
.L541:
	.loc 1 1830 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.345
	cmpl	%eax, -28(%rbp)	# n_reloads.345, i
	jl	.L545	#,
	.loc 1 1846 0 is_stmt 1
	movq	used_spill_regs_local(%rip), %rdx	# used_spill_regs_local, used_spill_regs_local.346
	movq	-40(%rbp), %rax	# chain, tmp266
	movq	%rdx, 104(%rax)	# used_spill_regs_local.346, chain_12(D)->used_spill_regs
	.loc 1 1847 0
	movq	used_spill_regs(%rip), %rdx	# used_spill_regs, used_spill_regs.347
	movq	used_spill_regs_local(%rip), %rax	# used_spill_regs_local, used_spill_regs_local.348
	orq	%rdx, %rax	# used_spill_regs.347, used_spill_regs.349
	movq	%rax, used_spill_regs(%rip)	# used_spill_regs.349, used_spill_regs
	.loc 1 1849 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.350
	movslq	%eax, %rdx	# n_reloads.350, D.28066
	movq	%rdx, %rax	# D.28066, tmp267
	addq	%rax, %rax	# tmp267
	addq	%rdx, %rax	# D.28066, tmp267
	salq	$2, %rax	#, tmp267
	addq	%rdx, %rax	# D.28066, tmp267
	salq	$3, %rax	#, tmp268
	movq	%rax, %rdx	# tmp267, D.28066
	movq	-40(%rbp), %rax	# chain, tmp269
	movq	88(%rax), %rax	# chain_12(D)->rld, D.28065
	movl	$rld, %esi	#,
	movq	%rax, %rdi	# D.28065,
	call	memcpy	#
.L514:
	.loc 1 1850 0
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE15:
	.size	find_reload_regs, .-find_reload_regs
	.type	select_reload_regs, @function
select_reload_regs:
.LFB16:
	.loc 1 1854 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 1858 0
	movq	insns_need_reload(%rip), %rax	# insns_need_reload, tmp59
	movq	%rax, -8(%rbp)	# tmp59, chain
	jmp	.L547	#
.L548:
	.loc 1 1860 0
	movq	-8(%rbp), %rax	# chain, tmp60
	movq	%rax, %rdi	# tmp60,
	call	find_reload_regs	#
	.loc 1 1859 0
	movq	-8(%rbp), %rax	# chain, tmp61
	movq	16(%rax), %rax	# chain_1->next_need_reload, tmp62
	movq	%rax, -8(%rbp)	# tmp62, chain
.L547:
	.loc 1 1858 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, chain
	jne	.L548	#,
	.loc 1 1861 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE16:
	.size	select_reload_regs, .-select_reload_regs
	.type	delete_caller_save_insns, @function
delete_caller_save_insns:
.LFB17:
	.loc 1 1867 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	.loc 1 1868 0
	movq	reload_insn_chain(%rip), %rax	# reload_insn_chain, tmp66
	movq	%rax, -24(%rbp)	# tmp66, c
	.loc 1 1870 0
	jmp	.L550	#
.L557:
	.loc 1 1872 0
	jmp	.L551	#
.L556:
.LBB72:
	.loc 1 1874 0
	movq	-24(%rbp), %rax	# c, tmp67
	movq	(%rax), %rax	# c_1->next, tmp68
	movq	%rax, -16(%rbp)	# tmp68, next
	.loc 1 1875 0
	movq	-24(%rbp), %rax	# c, tmp69
	movq	32(%rax), %rax	# c_1->insn, tmp70
	movq	%rax, -8(%rbp)	# tmp70, insn
	.loc 1 1877 0
	movq	reload_insn_chain(%rip), %rax	# reload_insn_chain, reload_insn_chain.351
	cmpq	%rax, -24(%rbp)	# reload_insn_chain.351, c
	jne	.L552	#,
	.loc 1 1878 0
	movq	-16(%rbp), %rax	# next, tmp71
	movq	%rax, reload_insn_chain(%rip)	# tmp71, reload_insn_chain
.L552:
	.loc 1 1879 0
	movq	-8(%rbp), %rax	# insn, tmp72
	movq	%rax, %rdi	# tmp72,
	call	delete_insn	#
	.loc 1 1881 0
	cmpq	$0, -16(%rbp)	#, next
	je	.L553	#,
	.loc 1 1882 0
	movq	-24(%rbp), %rax	# c, tmp73
	movq	8(%rax), %rdx	# c_1->prev, D.28076
	movq	-16(%rbp), %rax	# next, tmp74
	movq	%rdx, 8(%rax)	# D.28076, next_6->prev
.L553:
	.loc 1 1883 0
	movq	-24(%rbp), %rax	# c, tmp75
	movq	8(%rax), %rax	# c_1->prev, D.28076
	testq	%rax, %rax	# D.28076
	je	.L554	#,
	.loc 1 1884 0
	movq	-24(%rbp), %rax	# c, tmp76
	movq	8(%rax), %rax	# c_1->prev, D.28076
	movq	-16(%rbp), %rdx	# next, tmp77
	movq	%rdx, (%rax)	# tmp77, _11->next
.L554:
	.loc 1 1885 0
	movq	unused_insn_chains(%rip), %rdx	# unused_insn_chains, unused_insn_chains.352
	movq	-24(%rbp), %rax	# c, tmp78
	movq	%rdx, (%rax)	# unused_insn_chains.352, c_1->next
	.loc 1 1886 0
	movq	-24(%rbp), %rax	# c, tmp79
	movq	%rax, unused_insn_chains(%rip)	# tmp79, unused_insn_chains
	.loc 1 1887 0
	movq	-16(%rbp), %rax	# next, tmp80
	movq	%rax, -24(%rbp)	# tmp80, c
.L551:
.LBE72:
	.loc 1 1872 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, c
	je	.L555	#,
	.loc 1 1872 0 is_stmt 0 discriminator 2
	movq	-24(%rbp), %rax	# c, tmp81
	movzbl	262(%rax), %eax	# *c_1, D.28075
	andl	$8, %eax	#, D.28075
	testb	%al, %al	# D.28075
	jne	.L556	#,
.L555:
	.loc 1 1889 0 is_stmt 1
	cmpq	$0, -24(%rbp)	#, c
	je	.L550	#,
	.loc 1 1890 0
	movq	-24(%rbp), %rax	# c, tmp82
	movq	(%rax), %rax	# c_1->next, tmp83
	movq	%rax, -24(%rbp)	# tmp83, c
.L550:
	.loc 1 1870 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, c
	jne	.L557	#,
	.loc 1 1892 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE17:
	.size	delete_caller_save_insns, .-delete_caller_save_insns
	.section	.rodata
	.align 8
.LC6:
	.string	"can't find a register in class `%s' while reloading `asm'"
	.align 8
.LC7:
	.string	"unable to find a register to spill in class `%s'"
.LC8:
	.string	"this is the insn:"
	.text
	.type	spill_failure, @function
spill_failure:
.LFB18:
	.loc 1 1901 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# insn, insn
	movl	%esi, -12(%rbp)	# class, class
	.loc 1 1903 0
	movq	-8(%rbp), %rax	# insn, tmp63
	movq	32(%rax), %rax	# insn_1(D)->fld[3].rtx, D.28077
	movq	%rax, %rdi	# D.28077,
	call	asm_noperands	#
	testl	%eax, %eax	# D.28078
	js	.L559	#,
	.loc 1 1904 0
	movl	-12(%rbp), %eax	# class, tmp64
	movq	reg_class_names.14714(,%rax,8), %rdx	# reg_class_names, D.28079
	movq	-8(%rbp), %rax	# insn, tmp65
	movl	$.LC6, %esi	#,
	movq	%rax, %rdi	# tmp65,
	movl	$0, %eax	#,
	call	error_for_asm	#
	jmp	.L561	#
.L559:
	.loc 1 1908 0
	movl	-12(%rbp), %eax	# class, tmp66
	movq	reg_class_names.14714(,%rax,8), %rax	# reg_class_names, D.28079
	movq	%rax, %rsi	# D.28079,
	movl	$.LC7, %edi	#,
	movl	$0, %eax	#,
	call	error	#
	.loc 1 1910 0
	movq	-8(%rbp), %rax	# insn, tmp67
	movl	$__FUNCTION__.14715, %r8d	#,
	movl	$1910, %ecx	#,
	movl	$.LC1, %edx	#,
	movq	%rax, %rsi	# tmp67,
	movl	$.LC8, %edi	#,
	call	_fatal_insn	#
.L561:
	.loc 1 1912 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE18:
	.size	spill_failure, .-spill_failure
	.type	delete_dead_insn, @function
delete_dead_insn:
.LFB19:
	.loc 1 1920 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	.loc 1 1921 0
	movq	-24(%rbp), %rax	# insn, tmp70
	movq	%rax, %rdi	# tmp70,
	call	prev_real_insn	#
	movq	%rax, -16(%rbp)	# tmp71, prev
	.loc 1 1926 0
	cmpq	$0, -16(%rbp)	#, prev
	je	.L563	#,
	.loc 1 1926 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# prev, tmp72
	movq	32(%rax), %rax	# prev_2->fld[3].rtx, D.28083
	movzwl	(%rax), %eax	# _3->code, D.28084
	cmpw	$47, %ax	#, D.28084
	jne	.L563	#,
	.loc 1 1927 0 is_stmt 1
	movq	-16(%rbp), %rax	# prev, tmp73
	movq	32(%rax), %rax	# prev_2->fld[3].rtx, D.28083
	movq	8(%rax), %rax	# _5->fld[0].rtx, tmp74
	movq	%rax, -8(%rbp)	# tmp74, prev_dest
	movq	-8(%rbp), %rax	# prev_dest, tmp75
	movzwl	(%rax), %eax	# prev_dest_6->code, D.28084
	cmpw	$61, %ax	#, D.28084
	jne	.L563	#,
	.loc 1 1928 0
	movq	-24(%rbp), %rax	# insn, tmp76
	movq	32(%rax), %rdx	# insn_1(D)->fld[3].rtx, D.28083
	movq	-8(%rbp), %rax	# prev_dest, tmp77
	movq	%rdx, %rsi	# D.28083,
	movq	%rax, %rdi	# tmp77,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.28085
	je	.L563	#,
	.loc 1 1929 0
	movq	-8(%rbp), %rax	# prev_dest, tmp78
	movl	8(%rax), %edx	# prev_dest_6->fld[0].rtuint, D.28086
	movq	-24(%rbp), %rax	# insn, tmp79
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp79,
	call	find_regno_note	#
	testq	%rax, %rax	# D.28083
	je	.L563	#,
	.loc 1 1930 0
	movq	-16(%rbp), %rax	# prev, tmp80
	movq	32(%rax), %rax	# prev_2->fld[3].rtx, D.28083
	movq	16(%rax), %rax	# _12->fld[1].rtx, D.28083
	movq	%rax, %rdi	# D.28083,
	call	side_effects_p	#
	testl	%eax, %eax	# D.28085
	jne	.L563	#,
	.loc 1 1931 0
	movq	-16(%rbp), %rax	# prev, tmp81
	movq	%rax, %rdi	# tmp81,
	call	delete_dead_insn	#
.L563:
	.loc 1 1933 0
	movq	-24(%rbp), %rax	# insn, tmp82
	movw	$37, (%rax)	#, insn_1(D)->code
	.loc 1 1934 0
	movq	-24(%rbp), %rax	# insn, tmp83
	movl	$-99, 40(%rax)	#, insn_1(D)->fld[4].rtint
	.loc 1 1935 0
	movq	-24(%rbp), %rax	# insn, tmp84
	movq	$0, 32(%rax)	#, insn_1(D)->fld[3].rtstr
	.loc 1 1936 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE19:
	.size	delete_dead_insn, .-delete_dead_insn
	.type	alter_reg, @function
alter_reg:
.LFB20:
	.loc 1 1950 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movl	%edi, -52(%rbp)	# i, i
	movl	%esi, -56(%rbp)	# from_reg, from_reg
	.loc 1 1953 0
	movq	cfun(%rip), %rax	# cfun, cfun.353
	movq	24(%rax), %rax	# cfun.353_13->emit, D.28087
	movq	80(%rax), %rax	# _14->x_regno_reg_rtx, D.28088
	movl	-52(%rbp), %edx	# i, tmp249
	movslq	%edx, %rdx	# tmp249, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28088
	movq	(%rax), %rax	# *_19, D.28090
	testq	%rax, %rax	# D.28090
	jne	.L565	#,
	.loc 1 1954 0
	jmp	.L564	#
.L565:
	.loc 1 1958 0
	movq	cfun(%rip), %rax	# cfun, cfun.354
	movq	24(%rax), %rax	# cfun.354_21->emit, D.28087
	movq	80(%rax), %rax	# _22->x_regno_reg_rtx, D.28088
	movl	-52(%rbp), %edx	# i, tmp250
	movslq	%edx, %rdx	# tmp250, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28088
	movq	(%rax), %rax	# *_26, D.28090
	movzwl	(%rax), %eax	# _27->code, D.28091
	cmpw	$61, %ax	#, D.28091
	je	.L567	#,
	.loc 1 1959 0
	jmp	.L564	#
.L567:
	.loc 1 1963 0
	movq	cfun(%rip), %rax	# cfun, cfun.355
	movq	24(%rax), %rax	# cfun.355_29->emit, D.28087
	movq	80(%rax), %rax	# _30->x_regno_reg_rtx, D.28088
	movl	-52(%rbp), %edx	# i, tmp251
	movslq	%edx, %rdx	# tmp251, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28088
	movq	(%rax), %rdx	# *_34, D.28090
	.loc 1 1964 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.357
	movl	-52(%rbp), %ecx	# i, tmp252
	movslq	%ecx, %rcx	# tmp252, D.28089
	addq	%rcx, %rcx	# D.28089
	addq	%rcx, %rax	# D.28089, D.28092
	movzwl	(%rax), %eax	# *_39, D.28093
	testw	%ax, %ax	# D.28093
	js	.L568	#,
	.loc 1 1964 0 is_stmt 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.358
	movl	-52(%rbp), %ecx	# i, tmp253
	movslq	%ecx, %rcx	# tmp253, D.28089
	addq	%rcx, %rcx	# D.28089
	addq	%rcx, %rax	# D.28089, D.28092
	movzwl	(%rax), %eax	# *_44, D.28093
	cwtl
	jmp	.L569	#
.L568:
	.loc 1 1964 0 discriminator 2
	movl	-52(%rbp), %eax	# i, iftmp.356
.L569:
	.loc 1 1964 0 discriminator 3
	movl	%eax, 8(%rdx)	# iftmp.356, _35->fld[0].rtuint
	.loc 1 1969 0 is_stmt 1 discriminator 3
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.359
	movl	-52(%rbp), %edx	# i, tmp254
	movslq	%edx, %rdx	# tmp254, D.28089
	addq	%rdx, %rdx	# D.28089
	addq	%rdx, %rax	# D.28089, D.28092
	movzwl	(%rax), %eax	# *_51, D.28093
	testw	%ax, %ax	# D.28093
	jns	.L564	#,
	.loc 1 1970 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.360
	movl	-52(%rbp), %edx	# i, tmp256
	movslq	%edx, %rdx	# tmp256, tmp255
	addq	$4, %rdx	#, tmp257
	movq	(%rax,%rdx,8), %rax	# reg_n_info.360_53->data.reg, D.28094
	movl	16(%rax), %eax	# _54->refs, D.28095
	testl	%eax, %eax	# D.28095
	jle	.L564	#,
	.loc 1 1971 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.361
	movl	-52(%rbp), %edx	# i, tmp258
	movslq	%edx, %rdx	# tmp258, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28088
	movq	(%rax), %rax	# *_59, D.28090
	testq	%rax, %rax	# D.28090
	jne	.L564	#,
	.loc 1 1972 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.362
	movl	-52(%rbp), %edx	# i, tmp259
	movslq	%edx, %rdx	# tmp259, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28088
	movq	(%rax), %rax	# *_64, D.28090
	testq	%rax, %rax	# D.28090
	jne	.L564	#,
.LBB73:
	.loc 1 1975 0
	movq	cfun(%rip), %rax	# cfun, cfun.363
	movq	24(%rax), %rax	# cfun.363_66->emit, D.28087
	movq	80(%rax), %rax	# _67->x_regno_reg_rtx, D.28088
	movl	-52(%rbp), %edx	# i, tmp260
	movslq	%edx, %rdx	# tmp260, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28088
	movq	(%rax), %rax	# *_71, D.28090
	movzbl	2(%rax), %eax	# _72->mode, D.28096
	movzbl	%al, %eax	# D.28096, D.28095
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28096
	movzbl	%al, %eax	# D.28096, tmp262
	movl	%eax, -32(%rbp)	# tmp262, inherent_size
	.loc 1 1976 0
	movq	reg_max_ref_width(%rip), %rax	# reg_max_ref_width, reg_max_ref_width.364
	movl	-52(%rbp), %edx	# i, tmp263
	movslq	%edx, %rdx	# tmp263, D.28089
	salq	$2, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28097
	movl	(%rax), %edx	# *_80, D.28098
	movl	-32(%rbp), %eax	# inherent_size, tmp265
	cmpl	%eax, %edx	# tmp265, D.28098
	cmovae	%edx, %eax	# D.28098,, tmp264
	movl	%eax, -40(%rbp)	# tmp264, total_size
	.loc 1 1977 0
	movl	$0, -28(%rbp)	#, adjust
	.loc 1 1987 0
	cmpl	$-1, -56(%rbp)	#, from_reg
	jne	.L570	#,
	.loc 1 1990 0
	movl	-32(%rbp), %eax	# inherent_size, tmp266
	cmpl	-40(%rbp), %eax	# total_size, tmp266
	jne	.L571	#,
	.loc 1 1990 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.365
	jmp	.L572	#
.L571:
	.loc 1 1990 0 discriminator 2
	movl	$-1, %eax	#, iftmp.365
.L572:
	.loc 1 1990 0 discriminator 3
	movl	-40(%rbp), %esi	# total_size, D.28099
	movq	cfun(%rip), %rdx	# cfun, cfun.366
	movq	24(%rdx), %rdx	# cfun.366_88->emit, D.28087
	movq	80(%rdx), %rdx	# _89->x_regno_reg_rtx, D.28088
	movl	-52(%rbp), %ecx	# i, tmp267
	movslq	%ecx, %rcx	# tmp267, D.28089
	salq	$3, %rcx	#, D.28089
	addq	%rcx, %rdx	# D.28089, D.28088
	movq	(%rdx), %rdx	# *_93, D.28090
	movzbl	2(%rdx), %edx	# _94->mode, D.28096
	movzbl	%dl, %ecx	# D.28096, D.28100
	movl	%eax, %edx	# iftmp.365,
	movl	%ecx, %edi	# D.28100,
	call	assign_stack_local	#
	movq	%rax, -24(%rbp)	# tmp268, x
	.loc 1 1999 0 is_stmt 1 discriminator 3
	movq	cfun(%rip), %rax	# cfun, cfun.367
	movq	24(%rax), %rax	# cfun.367_98->emit, D.28087
	movq	80(%rax), %rax	# _99->x_regno_reg_rtx, D.28088
	movl	-52(%rbp), %edx	# i, tmp269
	movslq	%edx, %rdx	# tmp269, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28088
	movq	(%rax), %rax	# *_103, D.28090
	movzbl	3(%rax), %eax	# *_104, tmp272
	shrb	$2, %al	#, D.28101
	andl	$1, %eax	#, D.28101
	movq	-24(%rbp), %rdx	# x, tmp273
	andl	$1, %eax	#, tmp275
	leal	0(,%rax,4), %ecx	#, tmp276
	movzbl	3(%rdx), %eax	# x_97->unchanging, tmp277
	andl	$-5, %eax	#, tmp278
	orl	%ecx, %eax	# tmp276, tmp279
	movb	%al, 3(%rdx)	# tmp279, x_97->unchanging
	.loc 1 2002 0 discriminator 3
	call	new_alias_set	#
	movq	%rax, %rdx	#, D.28099
	movq	-24(%rbp), %rax	# x, tmp280
	movq	%rdx, %rsi	# D.28099,
	movq	%rax, %rdi	# tmp280,
	call	set_mem_alias_set	#
	jmp	.L589	#
.L570:
	.loc 1 2006 0
	movl	-56(%rbp), %eax	# from_reg, tmp282
	cltq
	movq	spill_stack_slot(,%rax,8), %rax	# spill_stack_slot, D.28090
	testq	%rax, %rax	# D.28090
	je	.L574	#,
	.loc 1 2007 0
	movl	-56(%rbp), %eax	# from_reg, tmp284
	cltq
	movl	spill_stack_slot_width(,%rax,4), %eax	# spill_stack_slot_width, D.28098
	cmpl	-40(%rbp), %eax	# total_size, D.28098
	jb	.L574	#,
	.loc 1 2008 0
	movl	-56(%rbp), %eax	# from_reg, tmp286
	cltq
	movq	spill_stack_slot(,%rax,8), %rax	# spill_stack_slot, D.28090
	movzbl	2(%rax), %eax	# _109->mode, D.28096
	movzbl	%al, %eax	# D.28096, D.28095
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28096
	.loc 1 2009 0
	movzbl	%al, %eax	# D.28096, D.28098
	.loc 1 2008 0
	cmpl	-32(%rbp), %eax	# inherent_size, D.28098
	jb	.L574	#,
	.loc 1 2010 0
	movl	-56(%rbp), %eax	# from_reg, tmp289
	cltq
	movq	spill_stack_slot(,%rax,8), %rax	# spill_stack_slot, tmp290
	movq	%rax, -24(%rbp)	# tmp290, x
	jmp	.L589	#
.L574:
.LBB74:
	.loc 1 2017 0
	movq	cfun(%rip), %rax	# cfun, cfun.368
	movq	24(%rax), %rax	# cfun.368_115->emit, D.28087
	movq	80(%rax), %rax	# _116->x_regno_reg_rtx, D.28088
	movl	-52(%rbp), %edx	# i, tmp291
	movslq	%edx, %rdx	# tmp291, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28088
	movq	(%rax), %rax	# *_120, D.28090
	movzbl	2(%rax), %eax	# _121->mode, D.28096
	movzbl	%al, %eax	# D.28096, tmp292
	movl	%eax, -36(%rbp)	# tmp292, mode
	.loc 1 2020 0
	movl	-56(%rbp), %eax	# from_reg, tmp294
	cltq
	movq	spill_stack_slot(,%rax,8), %rax	# spill_stack_slot, D.28090
	testq	%rax, %rax	# D.28090
	je	.L575	#,
	.loc 1 2022 0
	movl	-56(%rbp), %eax	# from_reg, tmp296
	cltq
	movq	spill_stack_slot(,%rax,8), %rax	# spill_stack_slot, D.28090
	movzbl	2(%rax), %eax	# _125->mode, D.28096
	movzbl	%al, %eax	# D.28096, D.28095
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28096
	.loc 1 2023 0
	movzbl	%al, %eax	# D.28096, D.28098
	.loc 1 2022 0
	cmpl	-32(%rbp), %eax	# inherent_size, D.28098
	jbe	.L576	#,
	.loc 1 2024 0
	movl	-56(%rbp), %eax	# from_reg, tmp299
	cltq
	movq	spill_stack_slot(,%rax,8), %rax	# spill_stack_slot, D.28090
	movzbl	2(%rax), %eax	# _130->mode, D.28096
	movzbl	%al, %eax	# D.28096, tmp300
	movl	%eax, -36(%rbp)	# tmp300, mode
.L576:
	.loc 1 2025 0
	movl	-56(%rbp), %eax	# from_reg, tmp302
	cltq
	movl	spill_stack_slot_width(,%rax,4), %eax	# spill_stack_slot_width, D.28098
	cmpl	-40(%rbp), %eax	# total_size, D.28098
	jbe	.L575	#,
	.loc 1 2026 0
	movl	-56(%rbp), %eax	# from_reg, tmp304
	cltq
	movl	spill_stack_slot_width(,%rax,4), %eax	# spill_stack_slot_width, tmp305
	movl	%eax, -40(%rbp)	# tmp305, total_size
.L575:
	.loc 1 2030 0
	movl	-32(%rbp), %eax	# inherent_size, tmp306
	cmpl	-40(%rbp), %eax	# total_size, tmp306
	jne	.L577	#,
	.loc 1 2030 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.369
	jmp	.L578	#
.L577:
	.loc 1 2030 0 discriminator 2
	movl	$-1, %eax	#, iftmp.369
.L578:
	.loc 1 2030 0 discriminator 3
	movl	-40(%rbp), %esi	# total_size, D.28099
	movl	-36(%rbp), %ecx	# mode, tmp307
	movl	%eax, %edx	# iftmp.369,
	movl	%ecx, %edi	# tmp307,
	call	assign_stack_local	#
	movq	%rax, -24(%rbp)	# tmp308, x
	.loc 1 2032 0 is_stmt 1 discriminator 3
	movq	-24(%rbp), %rax	# x, tmp309
	movq	%rax, -16(%rbp)	# tmp309, stack_slot
	.loc 1 2035 0 discriminator 3
	movl	-56(%rbp), %eax	# from_reg, tmp311
	cltq
	movq	spill_stack_slot(,%rax,8), %rax	# spill_stack_slot, D.28090
	testq	%rax, %rax	# D.28090
	je	.L579	#,
	.loc 1 2036 0
	movl	-56(%rbp), %eax	# from_reg, tmp313
	cltq
	movq	spill_stack_slot(,%rax,8), %rax	# spill_stack_slot, D.28090
	movq	16(%rax), %rax	# _141->fld[1].rtmem, D.28102
	testq	%rax, %rax	# D.28102
	je	.L580	#,
	.loc 1 2036 0 is_stmt 0 discriminator 1
	movl	-56(%rbp), %eax	# from_reg, tmp315
	cltq
	movq	spill_stack_slot(,%rax,8), %rax	# spill_stack_slot, D.28090
	movq	16(%rax), %rax	# _143->fld[1].rtmem, D.28102
	movq	(%rax), %rax	# _144->alias, iftmp.370
	jmp	.L581	#
.L580:
	.loc 1 2036 0 discriminator 2
	movl	$0, %eax	#, iftmp.370
.L581:
	.loc 1 2036 0 discriminator 1
	movq	-24(%rbp), %rdx	# x, tmp316
	movq	%rax, %rsi	# iftmp.370,
	movq	%rdx, %rdi	# tmp316,
	call	set_mem_alias_set	#
	jmp	.L590	#
.L579:
	.loc 1 2038 0 is_stmt 1
	call	new_alias_set	#
	movq	%rax, %rdx	#, D.28099
	movq	-24(%rbp), %rax	# x, tmp317
	movq	%rdx, %rsi	# D.28099,
	movq	%rax, %rdi	# tmp317,
	call	set_mem_alias_set	#
.L590:
	.loc 1 2055 0
	movl	-56(%rbp), %eax	# from_reg, tmp319
	cltq
	movq	-16(%rbp), %rdx	# stack_slot, tmp320
	movq	%rdx, spill_stack_slot(,%rax,8)	# tmp320, spill_stack_slot
	.loc 1 2056 0
	movl	-56(%rbp), %eax	# from_reg, tmp322
	cltq
	movl	-40(%rbp), %edx	# total_size, tmp323
	movl	%edx, spill_stack_slot_width(,%rax,4)	# tmp323, spill_stack_slot_width
.L589:
.LBE74:
	.loc 1 2066 0
	movl	-28(%rbp), %eax	# adjust, tmp324
	movslq	%eax, %rdx	# tmp324, D.28099
	movq	cfun(%rip), %rax	# cfun, cfun.373
	movq	24(%rax), %rax	# cfun.373_149->emit, D.28087
	movq	80(%rax), %rax	# _150->x_regno_reg_rtx, D.28088
	movl	-52(%rbp), %ecx	# i, tmp325
	movslq	%ecx, %rcx	# tmp325, D.28089
	salq	$3, %rcx	#, D.28089
	addq	%rcx, %rax	# D.28089, D.28088
	movq	(%rax), %rax	# *_154, D.28090
	movzbl	2(%rax), %eax	# _155->mode, D.28096
	movzbl	%al, %esi	# D.28096, D.28100
	movq	-24(%rbp), %rax	# x, tmp326
	movl	$1, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp326,
	call	adjust_address_1	#
	movq	%rax, -24(%rbp)	# tmp327, x
	.loc 1 2070 0
	movq	cfun(%rip), %rax	# cfun, cfun.374
	movq	24(%rax), %rax	# cfun.374_159->emit, D.28087
	movq	72(%rax), %rax	# _160->regno_decl, D.28103
	movl	-52(%rbp), %edx	# i, tmp328
	movslq	%edx, %rdx	# tmp328, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28103
	movq	(%rax), %rax	# *_164, D.28104
	testq	%rax, %rax	# D.28104
	je	.L583	#,
.LBB75:
	.loc 1 2072 0
	movq	cfun(%rip), %rax	# cfun, cfun.376
	movq	24(%rax), %rax	# cfun.376_166->emit, D.28087
	movq	72(%rax), %rax	# _167->regno_decl, D.28103
	movl	-52(%rbp), %edx	# i, tmp329
	movslq	%edx, %rdx	# tmp329, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28103
	movq	(%rax), %rax	# *_171, D.28104
	movq	144(%rax), %rax	# _172->decl.rtl, D.28090
	testq	%rax, %rax	# D.28090
	je	.L584	#,
	.loc 1 2072 0 is_stmt 0 discriminator 1
	movq	cfun(%rip), %rax	# cfun, cfun.378
	movq	24(%rax), %rax	# cfun.378_174->emit, D.28087
	movq	72(%rax), %rax	# _175->regno_decl, D.28103
	movl	-52(%rbp), %edx	# i, tmp330
	movslq	%edx, %rdx	# tmp330, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28103
	movq	(%rax), %rax	# *_179, D.28104
	movq	144(%rax), %rax	# _180->decl.rtl, D.28090
	testq	%rax, %rax	# D.28090
	je	.L585	#,
	movq	cfun(%rip), %rax	# cfun, cfun.379
	movq	24(%rax), %rax	# cfun.379_182->emit, D.28087
	movq	72(%rax), %rax	# _183->regno_decl, D.28103
	movl	-52(%rbp), %edx	# i, tmp331
	movslq	%edx, %rdx	# tmp331, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28103
	movq	(%rax), %rax	# *_187, D.28104
	movq	144(%rax), %rax	# _188->decl.rtl, iftmp.377
	jmp	.L587	#
.L585:
	.loc 1 2072 0 discriminator 2
	movq	cfun(%rip), %rax	# cfun, cfun.380
	movq	24(%rax), %rax	# cfun.380_190->emit, D.28087
	movq	72(%rax), %rax	# _191->regno_decl, D.28103
	movl	-52(%rbp), %edx	# i, tmp332
	movslq	%edx, %rdx	# tmp332, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28103
	movq	(%rax), %rax	# *_195, D.28104
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.28104,
	call	make_decl_rtl	#
	movq	cfun(%rip), %rax	# cfun, cfun.381
	movq	24(%rax), %rax	# cfun.381_197->emit, D.28087
	movq	72(%rax), %rax	# _198->regno_decl, D.28103
	movl	-52(%rbp), %edx	# i, tmp333
	movslq	%edx, %rdx	# tmp333, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28103
	movq	(%rax), %rax	# *_202, D.28104
	movq	144(%rax), %rax	# _203->decl.rtl, iftmp.377
	jmp	.L587	#
.L584:
	movl	$0, %eax	#, iftmp.375
.L587:
	.loc 1 2072 0 discriminator 3
	movq	%rax, -8(%rbp)	# iftmp.375, decl
	.loc 1 2078 0 is_stmt 1 discriminator 3
	cmpq	$0, -8(%rbp)	#, decl
	je	.L583	#,
	.loc 1 2078 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# decl, tmp334
	movzwl	(%rax), %eax	# decl_207->code, D.28091
	cmpw	$61, %ax	#, D.28091
	jne	.L583	#,
	movq	-8(%rbp), %rax	# decl, tmp335
	movl	8(%rax), %edx	# decl_207->fld[0].rtuint, D.28098
	movl	-52(%rbp), %eax	# i, i.382
	cmpl	%eax, %edx	# i.382, D.28098
	jne	.L583	#,
	.loc 1 2080 0 is_stmt 1
	cmpl	$-1, -56(%rbp)	#, from_reg
	je	.L588	#,
	.loc 1 2080 0 is_stmt 0 discriminator 1
	movl	-56(%rbp), %eax	# from_reg, tmp337
	cltq
	movq	spill_stack_slot(,%rax,8), %rax	# spill_stack_slot, D.28090
	cmpq	-24(%rbp), %rax	# x, D.28090
	jne	.L588	#,
	.loc 1 2081 0 is_stmt 1
	movq	-24(%rbp), %rax	# x, tmp338
	movq	%rax, %rdi	# tmp338,
	call	copy_rtx	#
	movq	%rax, -24(%rbp)	# tmp339, x
.L588:
	.loc 1 2083 0
	movq	cfun(%rip), %rax	# cfun, cfun.383
	movq	24(%rax), %rax	# cfun.383_213->emit, D.28087
	movq	72(%rax), %rax	# _214->regno_decl, D.28103
	movl	-52(%rbp), %edx	# i, tmp340
	movslq	%edx, %rdx	# tmp340, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rdx, %rax	# D.28089, D.28103
	movq	(%rax), %rdx	# *_218, D.28104
	movq	-24(%rbp), %rax	# x, tmp341
	movq	%rdx, %rsi	# D.28104,
	movq	%rax, %rdi	# tmp341,
	call	set_mem_expr	#
.L583:
.LBE75:
	.loc 1 2088 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.384
	movl	-52(%rbp), %edx	# i, tmp342
	movslq	%edx, %rdx	# tmp342, D.28089
	salq	$3, %rdx	#, D.28089
	addq	%rax, %rdx	# reg_equiv_memory_loc.384, D.28088
	movq	-24(%rbp), %rax	# x, tmp343
	movq	%rax, (%rdx)	# tmp343, *_223
.L564:
.LBE73:
	.loc 1 2090 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE20:
	.size	alter_reg, .-alter_reg
	.globl	mark_home_live
	.type	mark_home_live, @function
mark_home_live:
.LFB21:
	.loc 1 2098 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -20(%rbp)	# regno, regno
	.loc 1 2101 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.385
	movl	-20(%rbp), %edx	# regno, tmp130
	movslq	%edx, %rdx	# tmp130, D.28105
	addq	%rdx, %rdx	# D.28105
	addq	%rdx, %rax	# D.28105, D.28106
	movzwl	(%rax), %eax	# *_14, D.28107
	cwtl
	movl	%eax, -8(%rbp)	# tmp131, i
	.loc 1 2102 0
	cmpl	$0, -8(%rbp)	#, i
	jns	.L592	#,
	.loc 1 2103 0
	jmp	.L591	#
.L592:
	.loc 1 2104 0
	cmpl	$7, -8(%rbp)	#, i
	jle	.L594	#,
	.loc 1 2104 0 is_stmt 0 discriminator 1
	cmpl	$15, -8(%rbp)	#, i
	jle	.L595	#,
.L594:
	.loc 1 2104 0 discriminator 2
	cmpl	$20, -8(%rbp)	#, i
	jle	.L596	#,
	.loc 1 2104 0 discriminator 1
	cmpl	$28, -8(%rbp)	#, i
	jle	.L595	#,
.L596:
	.loc 1 2104 0 discriminator 2
	cmpl	$44, -8(%rbp)	#, i
	jle	.L597	#,
	.loc 1 2104 0 discriminator 1
	cmpl	$52, -8(%rbp)	#, i
	jle	.L595	#,
.L597:
	.loc 1 2104 0 discriminator 2
	cmpl	$28, -8(%rbp)	#, i
	jle	.L598	#,
	.loc 1 2104 0 discriminator 1
	cmpl	$36, -8(%rbp)	#, i
	jg	.L598	#,
.L595:
	movq	cfun(%rip), %rax	# cfun, cfun.388
	movq	24(%rax), %rax	# cfun.388_67->emit, D.28108
	movq	80(%rax), %rax	# _68->x_regno_reg_rtx, D.28109
	movl	-20(%rbp), %edx	# regno, tmp132
	movslq	%edx, %rdx	# tmp132, D.28105
	salq	$3, %rdx	#, D.28105
	addq	%rdx, %rax	# D.28105, D.28109
	movq	(%rax), %rax	# *_72, D.28110
	movzbl	2(%rax), %eax	# _73->mode, D.28111
	movzbl	%al, %eax	# D.28111, D.28112
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28113
	cmpl	$5, %eax	#, D.28113
	je	.L599	#,
	.loc 1 2104 0 discriminator 2
	movq	cfun(%rip), %rax	# cfun, cfun.389
	movq	24(%rax), %rax	# cfun.389_77->emit, D.28108
	movq	80(%rax), %rax	# _78->x_regno_reg_rtx, D.28109
	movl	-20(%rbp), %edx	# regno, tmp134
	movslq	%edx, %rdx	# tmp134, D.28105
	salq	$3, %rdx	#, D.28105
	addq	%rdx, %rax	# D.28105, D.28109
	movq	(%rax), %rax	# *_82, D.28110
	movzbl	2(%rax), %eax	# _83->mode, D.28111
	movzbl	%al, %eax	# D.28111, D.28112
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28113
	cmpl	$6, %eax	#, D.28113
	jne	.L600	#,
.L599:
	.loc 1 2104 0 discriminator 1
	movl	$2, %eax	#, iftmp.387
	jmp	.L601	#
.L600:
	movl	$1, %eax	#, iftmp.387
.L601:
	.loc 1 2104 0 discriminator 3
	jmp	.L602	#
.L598:
	.loc 1 2104 0 discriminator 2
	movq	cfun(%rip), %rax	# cfun, cfun.391
	movq	24(%rax), %rax	# cfun.391_17->emit, D.28108
	movq	80(%rax), %rax	# _18->x_regno_reg_rtx, D.28109
	movl	-20(%rbp), %edx	# regno, tmp136
	movslq	%edx, %rdx	# tmp136, D.28105
	salq	$3, %rdx	#, D.28105
	addq	%rdx, %rax	# D.28105, D.28109
	movq	(%rax), %rax	# *_22, D.28110
	movzbl	2(%rax), %eax	# _23->mode, D.28111
	cmpb	$18, %al	#, D.28111
	jne	.L603	#,
	.loc 1 2104 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.393
	andl	$33554432, %eax	#, D.28112
	testl	%eax, %eax	# D.28112
	je	.L604	#,
	movl	$2, %eax	#, iftmp.392
	jmp	.L602	#
.L604:
	.loc 1 2104 0 discriminator 2
	movl	$3, %eax	#, iftmp.392
	jmp	.L602	#
.L603:
	movq	cfun(%rip), %rax	# cfun, cfun.395
	movq	24(%rax), %rax	# cfun.395_30->emit, D.28108
	movq	80(%rax), %rax	# _31->x_regno_reg_rtx, D.28109
	movl	-20(%rbp), %edx	# regno, tmp137
	movslq	%edx, %rdx	# tmp137, D.28105
	salq	$3, %rdx	#, D.28105
	addq	%rdx, %rax	# D.28105, D.28109
	movq	(%rax), %rax	# *_35, D.28110
	movzbl	2(%rax), %eax	# _36->mode, D.28111
	cmpb	$24, %al	#, D.28111
	jne	.L607	#,
	.loc 1 2104 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.397
	andl	$33554432, %eax	#, D.28112
	testl	%eax, %eax	# D.28112
	je	.L608	#,
	movl	$4, %eax	#, iftmp.396
	jmp	.L602	#
.L608:
	.loc 1 2104 0 discriminator 2
	movl	$6, %eax	#, iftmp.396
	jmp	.L602	#
.L607:
	movq	cfun(%rip), %rax	# cfun, cfun.398
	movq	24(%rax), %rax	# cfun.398_43->emit, D.28108
	movq	80(%rax), %rax	# _44->x_regno_reg_rtx, D.28109
	movl	-20(%rbp), %edx	# regno, tmp138
	movslq	%edx, %rdx	# tmp138, D.28105
	salq	$3, %rdx	#, D.28105
	addq	%rdx, %rax	# D.28105, D.28109
	movq	(%rax), %rax	# *_48, D.28110
	movzbl	2(%rax), %eax	# _49->mode, D.28111
	movzbl	%al, %eax	# D.28111, D.28112
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28111
	movzbl	%al, %edx	# D.28111, D.28112
	movl	target_flags(%rip), %eax	# target_flags, target_flags.400
	andl	$33554432, %eax	#, D.28112
	testl	%eax, %eax	# D.28112
	je	.L611	#,
	.loc 1 2104 0 discriminator 1
	movl	$8, %eax	#, iftmp.399
	jmp	.L612	#
.L611:
	.loc 1 2104 0 discriminator 2
	movl	$4, %eax	#, iftmp.399
.L612:
	.loc 1 2104 0 discriminator 3
	addl	%edx, %eax	# D.28112, D.28112
	subl	$1, %eax	#, D.28112
	movl	target_flags(%rip), %edx	# target_flags, target_flags.402
	andl	$33554432, %edx	#, D.28112
	testl	%edx, %edx	# D.28112
	je	.L613	#,
	.loc 1 2104 0 discriminator 1
	movl	$8, %ecx	#, iftmp.401
	jmp	.L614	#
.L613:
	.loc 1 2104 0 discriminator 2
	movl	$4, %ecx	#, iftmp.401
.L614:
	.loc 1 2104 0 discriminator 3
	cltd
	idivl	%ecx	# iftmp.401
.L602:
	movl	-8(%rbp), %edx	# i, tmp145
	addl	%edx, %eax	# tmp145, tmp144
	movl	%eax, -4(%rbp)	# tmp144, lim
	.loc 1 2105 0 is_stmt 1 discriminator 3
	jmp	.L615	#
.L616:
	.loc 1 2106 0
	movl	-8(%rbp), %eax	# i, i.403
	leal	1(%rax), %edx	#, tmp146
	movl	%edx, -8(%rbp)	# tmp146, i
	cltq
	movb	$1, regs_ever_live(%rax)	#, regs_ever_live
.L615:
	.loc 1 2105 0 discriminator 1
	movl	-8(%rbp), %eax	# i, tmp148
	cmpl	-4(%rbp), %eax	# lim, tmp148
	jl	.L616	#,
.L591:
	.loc 1 2107 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE21:
	.size	mark_home_live, .-mark_home_live
	.type	set_label_offsets, @function
set_label_offsets:
.LFB22:
	.loc 1 2124 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# insn, insn
	movl	%edx, -52(%rbp)	# initial_p, initial_p
	.loc 1 2125 0
	movq	-40(%rbp), %rax	# x, tmp138
	movzwl	(%rax), %eax	# x_9(D)->code, D.28114
	movzwl	%ax, %eax	# D.28114, tmp139
	movl	%eax, -20(%rbp)	# tmp139, code
	.loc 1 2130 0
	movl	-20(%rbp), %eax	# code, tmp141
	subl	$32, %eax	#, tmp140
	cmpl	$35, %eax	#, tmp140
	ja	.L659	#,
	movl	%eax, %eax	# tmp140, tmp142
	movq	.L620(,%rax,8), %rax	#, tmp143
	jmp	*%rax	# tmp143
	.section	.rodata
	.align 8
	.align 4
.L620:
	.quad	.L619
	.quad	.L621
	.quad	.L619
	.quad	.L659
	.quad	.L622
	.quad	.L659
	.quad	.L659
	.quad	.L623
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L623
	.quad	.L623
	.quad	.L659
	.quad	.L624
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L659
	.quad	.L625
	.text
.L625:
	.loc 1 2133 0
	movq	-40(%rbp), %rax	# x, tmp144
	movzbl	3(%rax), %eax	# *x_9(D), D.28115
	andl	$8, %eax	#, D.28115
	testb	%al, %al	# D.28115
	je	.L626	#,
	.loc 1 2134 0
	jmp	.L617	#
.L626:
	.loc 1 2136 0
	movq	-40(%rbp), %rax	# x, tmp145
	movq	8(%rax), %rax	# x_9(D)->fld[0].rtx, tmp146
	movq	%rax, -40(%rbp)	# tmp146, x
.L622:
	.loc 1 2148 0
	movq	offsets_known_at(%rip), %rdx	# offsets_known_at, offsets_known_at.404
	movq	-40(%rbp), %rax	# x, tmp147
	movl	48(%rax), %eax	# x_1->fld[5].rtint, D.28116
	cltq
	addq	%rdx, %rax	# offsets_known_at.404, D.28118
	movzbl	(%rax), %eax	# *_18, D.28119
	testb	%al, %al	# D.28119
	jne	.L628	#,
	.loc 1 2150 0
	movl	$0, -24(%rbp)	#, i
	jmp	.L629	#
.L632:
	.loc 1 2151 0
	movq	offsets_at(%rip), %rdx	# offsets_at, offsets_at.405
	movq	-40(%rbp), %rax	# x, tmp148
	movl	48(%rax), %eax	# x_1->fld[5].rtint, D.28116
	cltq
	salq	$4, %rax	#, D.28120
	leaq	(%rdx,%rax), %rcx	#, D.28121
	.loc 1 2153 0
	cmpl	$0, -52(%rbp)	#, initial_p
	je	.L630	#,
	.loc 1 2152 0
	movq	reg_eliminate(%rip), %rsi	# reg_eliminate, reg_eliminate.407
	movl	-24(%rbp), %edx	# i, D.28120
	movq	%rdx, %rax	# D.28120, tmp149
	addq	%rax, %rax	# tmp149
	addq	%rdx, %rax	# D.28120, tmp149
	salq	$4, %rax	#, tmp150
	addq	%rsi, %rax	# reg_eliminate.407, D.28122
	.loc 1 2153 0
	movl	8(%rax), %eax	# _30->initial_offset, iftmp.406
	jmp	.L631	#
.L630:
	.loc 1 2153 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rsi	# reg_eliminate, reg_eliminate.408
	movl	-24(%rbp), %edx	# i, D.28120
	movq	%rdx, %rax	# D.28120, tmp151
	addq	%rax, %rax	# tmp151
	addq	%rdx, %rax	# D.28120, tmp151
	salq	$4, %rax	#, tmp152
	addq	%rsi, %rax	# reg_eliminate.408, D.28122
	movl	20(%rax), %eax	# _35->offset, iftmp.406
.L631:
	.loc 1 2152 0 is_stmt 1
	movl	-24(%rbp), %edx	# i, tmp153
	movl	%eax, (%rcx,%rdx,4)	# iftmp.406, *_25
	.loc 1 2150 0
	addl	$1, -24(%rbp)	#, i
.L629:
	.loc 1 2150 0 is_stmt 0 discriminator 1
	cmpl	$3, -24(%rbp)	#, i
	jbe	.L632	#,
	.loc 1 2154 0 is_stmt 1
	movq	offsets_known_at(%rip), %rdx	# offsets_known_at, offsets_known_at.409
	movq	-40(%rbp), %rax	# x, tmp154
	movl	48(%rax), %eax	# x_1->fld[5].rtint, D.28116
	cltq
	addq	%rdx, %rax	# offsets_known_at.409, D.28118
	movb	$1, (%rax)	#, *_41
	jmp	.L633	#
.L628:
	.loc 1 2161 0
	movq	-40(%rbp), %rax	# x, tmp155
	cmpq	-48(%rbp), %rax	# insn, tmp155
	jne	.L634	#,
	.loc 1 2162 0
	movq	-48(%rbp), %rax	# insn, tmp156
	movq	%rax, %rdi	# tmp156,
	call	prev_nonnote_insn	#
	movq	%rax, -16(%rbp)	# tmp157, tem
	cmpq	$0, -16(%rbp)	#, tem
	je	.L634	#,
	.loc 1 2163 0
	movq	-16(%rbp), %rax	# tem, tmp158
	movzwl	(%rax), %eax	# tem_43->code, D.28114
	cmpw	$35, %ax	#, D.28114
	jne	.L634	#,
	.loc 1 2164 0
	movq	-48(%rbp), %rax	# insn, tmp159
	movq	%rax, %rdi	# tmp159,
	call	set_offsets_for_label	#
	jmp	.L633	#
.L634:
	.loc 1 2170 0
	movl	$0, -24(%rbp)	#, i
	jmp	.L635	#
.L639:
	.loc 1 2171 0
	movq	offsets_at(%rip), %rdx	# offsets_at, offsets_at.410
	movq	-40(%rbp), %rax	# x, tmp160
	movl	48(%rax), %eax	# x_1->fld[5].rtint, D.28116
	cltq
	salq	$4, %rax	#, D.28120
	addq	%rax, %rdx	# D.28120, D.28121
	movl	-24(%rbp), %eax	# i, tmp161
	movl	(%rdx,%rax,4), %ecx	# *_50, D.28116
	.loc 1 2173 0
	cmpl	$0, -52(%rbp)	#, initial_p
	je	.L636	#,
	.loc 1 2172 0
	movq	reg_eliminate(%rip), %rsi	# reg_eliminate, reg_eliminate.412
	movl	-24(%rbp), %edx	# i, D.28120
	movq	%rdx, %rax	# D.28120, tmp162
	addq	%rax, %rax	# tmp162
	addq	%rdx, %rax	# D.28120, tmp162
	salq	$4, %rax	#, tmp163
	addq	%rsi, %rax	# reg_eliminate.412, D.28122
	.loc 1 2173 0
	movl	8(%rax), %eax	# _55->initial_offset, iftmp.411
	jmp	.L637	#
.L636:
	.loc 1 2173 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rsi	# reg_eliminate, reg_eliminate.413
	movl	-24(%rbp), %edx	# i, D.28120
	movq	%rdx, %rax	# D.28120, tmp164
	addq	%rax, %rax	# tmp164
	addq	%rdx, %rax	# D.28120, tmp164
	salq	$4, %rax	#, tmp165
	addq	%rsi, %rax	# reg_eliminate.413, D.28122
	movl	20(%rax), %eax	# _60->offset, iftmp.411
.L637:
	.loc 1 2171 0 is_stmt 1
	cmpl	%eax, %ecx	# iftmp.411, D.28116
	je	.L638	#,
	.loc 1 2174 0
	movq	reg_eliminate(%rip), %rcx	# reg_eliminate, reg_eliminate.414
	movl	-24(%rbp), %edx	# i, D.28120
	movq	%rdx, %rax	# D.28120, tmp166
	addq	%rax, %rax	# tmp166
	addq	%rdx, %rax	# D.28120, tmp166
	salq	$4, %rax	#, tmp167
	addq	%rcx, %rax	# reg_eliminate.414, D.28122
	movl	$0, 12(%rax)	#, _65->can_eliminate
.L638:
	.loc 1 2170 0
	addl	$1, -24(%rbp)	#, i
.L635:
	.loc 1 2170 0 is_stmt 0 discriminator 1
	cmpl	$3, -24(%rbp)	#, i
	jbe	.L639	#,
.L633:
	.loc 1 2176 0 is_stmt 1
	jmp	.L617	#
.L621:
	.loc 1 2179 0
	movq	-48(%rbp), %rax	# insn, tmp168
	movq	32(%rax), %rax	# insn_42(D)->fld[3].rtx, D.28123
	movl	-52(%rbp), %edx	# initial_p, tmp169
	movq	-48(%rbp), %rcx	# insn, tmp170
	movq	%rcx, %rsi	# tmp170,
	movq	%rax, %rdi	# D.28123,
	call	set_label_offsets	#
.L619:
	.loc 1 2187 0
	movq	-40(%rbp), %rax	# x, tmp171
	movq	56(%rax), %rax	# x_9(D)->fld[6].rtx, tmp172
	movq	%rax, -16(%rbp)	# tmp172, tem
	jmp	.L640	#
.L642:
	.loc 1 2188 0
	movq	-16(%rbp), %rax	# tem, tmp173
	movzbl	2(%rax), %eax	# tem_2->mode, D.28115
	cmpb	$13, %al	#, D.28115
	jne	.L641	#,
	.loc 1 2189 0
	movq	-16(%rbp), %rax	# tem, tmp174
	movq	8(%rax), %rax	# tem_2->fld[0].rtx, D.28123
	movq	-48(%rbp), %rcx	# insn, tmp175
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp175,
	movq	%rax, %rdi	# D.28123,
	call	set_label_offsets	#
.L641:
	.loc 1 2187 0
	movq	-16(%rbp), %rax	# tem, tmp176
	movq	16(%rax), %rax	# tem_2->fld[1].rtx, tmp177
	movq	%rax, -16(%rbp)	# tmp177, tem
.L640:
	.loc 1 2187 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, tem
	jne	.L642	#,
	.loc 1 2190 0 is_stmt 1
	jmp	.L617	#
.L623:
	.loc 1 2199 0
	movl	$0, -24(%rbp)	#, i
	jmp	.L643	#
.L644:
	.loc 1 2200 0 discriminator 2
	cmpl	$45, -20(%rbp)	#, code
	sete	%al	#, D.28124
	movzbl	%al, %edx	# D.28124, D.28116
	movq	-40(%rbp), %rax	# x, tmp178
	movslq	%edx, %rdx	# D.28116, tmp179
	movq	8(%rax,%rdx,8), %rax	# x_9(D)->fld[_79].rtvec, D.28125
	movl	-24(%rbp), %edx	# i, tmp180
	movq	8(%rax,%rdx,8), %rax	# _80->elem, D.28123
	movl	-52(%rbp), %edx	# initial_p, tmp181
	movq	-48(%rbp), %rcx	# insn, tmp182
	movq	%rcx, %rsi	# tmp182,
	movq	%rax, %rdi	# D.28123,
	call	set_label_offsets	#
	.loc 1 2199 0 discriminator 2
	addl	$1, -24(%rbp)	#, i
.L643:
	.loc 1 2199 0 is_stmt 0 discriminator 1
	cmpl	$45, -20(%rbp)	#, code
	sete	%al	#, D.28124
	movzbl	%al, %edx	# D.28124, D.28116
	movq	-40(%rbp), %rax	# x, tmp183
	movslq	%edx, %rdx	# D.28116, tmp184
	movq	8(%rax,%rdx,8), %rax	# x_9(D)->fld[_74].rtvec, D.28125
	movl	(%rax), %eax	# _75->num_elem, D.28116
	cmpl	-24(%rbp), %eax	# i, D.28126
	ja	.L644	#,
	.loc 1 2202 0 is_stmt 1
	jmp	.L617	#
.L624:
	.loc 1 2217 0
	movq	-40(%rbp), %rax	# x, tmp185
	movq	8(%rax), %rdx	# x_9(D)->fld[0].rtx, D.28123
	movq	global_rtl(%rip), %rax	# global_rtl, D.28123
	cmpq	%rax, %rdx	# D.28123, D.28123
	je	.L645	#,
	.loc 1 2218 0
	jmp	.L617	#
.L645:
	.loc 1 2220 0
	movq	-40(%rbp), %rax	# x, tmp186
	movq	16(%rax), %rax	# x_9(D)->fld[1].rtx, D.28123
	movzwl	(%rax), %eax	# _85->code, D.28114
	movzwl	%ax, %eax	# D.28114, D.28126
	cmpl	$59, %eax	#, D.28126
	je	.L660	#,
	cmpl	$59, %eax	#, D.28126
	ja	.L648	#,
	cmpl	$51, %eax	#, D.28126
	je	.L660	#,
	.loc 1 2245 0
	jmp	.L653	#
.L648:
	.loc 1 2220 0
	cmpl	$67, %eax	#, D.28126
	je	.L649	#,
	cmpl	$72, %eax	#, D.28126
	je	.L650	#,
	.loc 1 2245 0
	jmp	.L653	#
.L649:
	.loc 1 2227 0
	movq	-40(%rbp), %rax	# x, tmp187
	movq	16(%rax), %rax	# x_9(D)->fld[1].rtx, D.28123
	movq	8(%rax), %rax	# _88->fld[0].rtx, D.28123
	movl	-52(%rbp), %edx	# initial_p, tmp188
	movq	-48(%rbp), %rcx	# insn, tmp189
	movq	%rcx, %rsi	# tmp189,
	movq	%rax, %rdi	# D.28123,
	call	set_label_offsets	#
	.loc 1 2228 0
	jmp	.L617	#
.L650:
	.loc 1 2231 0
	movq	-40(%rbp), %rax	# x, tmp190
	movq	16(%rax), %rax	# x_9(D)->fld[1].rtx, D.28123
	movq	16(%rax), %rax	# _90->fld[1].rtx, tmp191
	movq	%rax, -16(%rbp)	# tmp191, tem
	.loc 1 2232 0
	movq	-16(%rbp), %rax	# tem, tmp192
	movzwl	(%rax), %eax	# tem_91->code, D.28114
	cmpw	$67, %ax	#, D.28114
	jne	.L651	#,
	.loc 1 2233 0
	movq	-16(%rbp), %rax	# tem, tmp193
	movq	8(%rax), %rax	# tem_91->fld[0].rtx, D.28123
	movl	-52(%rbp), %edx	# initial_p, tmp194
	movq	-48(%rbp), %rcx	# insn, tmp195
	movq	%rcx, %rsi	# tmp195,
	movq	%rax, %rdi	# D.28123,
	call	set_label_offsets	#
	jmp	.L652	#
.L651:
	.loc 1 2234 0
	movq	-16(%rbp), %rax	# tem, tmp196
	movzwl	(%rax), %eax	# tem_91->code, D.28114
	cmpw	$59, %ax	#, D.28114
	je	.L652	#,
	.loc 1 2234 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# tem, tmp197
	movzwl	(%rax), %eax	# tem_91->code, D.28114
	cmpw	$51, %ax	#, D.28114
	je	.L652	#,
	.loc 1 2235 0 is_stmt 1
	jmp	.L653	#
.L652:
	.loc 1 2237 0
	movq	-40(%rbp), %rax	# x, tmp198
	movq	16(%rax), %rax	# x_9(D)->fld[1].rtx, D.28123
	movq	24(%rax), %rax	# _96->fld[2].rtx, tmp199
	movq	%rax, -16(%rbp)	# tmp199, tem
	.loc 1 2238 0
	movq	-16(%rbp), %rax	# tem, tmp200
	movzwl	(%rax), %eax	# tem_97->code, D.28114
	cmpw	$67, %ax	#, D.28114
	jne	.L654	#,
	.loc 1 2239 0
	movq	-16(%rbp), %rax	# tem, tmp201
	movq	8(%rax), %rax	# tem_97->fld[0].rtx, D.28123
	movl	-52(%rbp), %edx	# initial_p, tmp202
	movq	-48(%rbp), %rcx	# insn, tmp203
	movq	%rcx, %rsi	# tmp203,
	movq	%rax, %rdi	# D.28123,
	call	set_label_offsets	#
	jmp	.L655	#
.L654:
	.loc 1 2240 0
	movq	-16(%rbp), %rax	# tem, tmp204
	movzwl	(%rax), %eax	# tem_97->code, D.28114
	cmpw	$59, %ax	#, D.28114
	je	.L655	#,
	.loc 1 2240 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# tem, tmp205
	movzwl	(%rax), %eax	# tem_97->code, D.28114
	cmpw	$51, %ax	#, D.28114
	je	.L655	#,
	.loc 1 2241 0 is_stmt 1
	jmp	.L653	#
.L655:
	.loc 1 2242 0
	jmp	.L617	#
.L653:
	.loc 1 2250 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp206
	movq	%rax, -8(%rbp)	# tmp206, p
	jmp	.L656	#
.L658:
	.loc 1 2251 0
	movq	-8(%rbp), %rax	# p, tmp207
	movl	20(%rax), %edx	# p_6->offset, D.28116
	movq	-8(%rbp), %rax	# p, tmp208
	movl	8(%rax), %eax	# p_6->initial_offset, D.28116
	cmpl	%eax, %edx	# D.28116, D.28116
	je	.L657	#,
	.loc 1 2252 0
	movq	-8(%rbp), %rax	# p, tmp209
	movl	$0, 12(%rax)	#, p_6->can_eliminate
.L657:
	.loc 1 2250 0
	addq	$48, -8(%rbp)	#, p
.L656:
	.loc 1 2250 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.415
	addq	$192, %rax	#, D.28122
	cmpq	-8(%rbp), %rax	# p, D.28122
	ja	.L658	#,
	.loc 1 2253 0 is_stmt 1
	jmp	.L617	#
.L659:
	.loc 1 2256 0
	nop
	jmp	.L617	#
.L660:
	.loc 1 2224 0
	nop
.L617:
	.loc 1 2258 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE22:
	.size	set_label_offsets, .-set_label_offsets
	.globl	eliminate_regs
	.type	eliminate_regs, @function
eliminate_regs:
.LFB23:
	.loc 1 2290 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$152, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -136(%rbp)	# x, x
	movl	%esi, -140(%rbp)	# mem_mode, mem_mode
	movq	%rdx, -152(%rbp)	# insn, insn
	.loc 1 2291 0
	movq	-136(%rbp), %rax	# x, tmp358
	movzwl	(%rax), %eax	# x_30(D)->code, D.28129
	movzwl	%ax, %eax	# D.28129, tmp359
	movl	%eax, -112(%rbp)	# tmp359, code
	.loc 1 2297 0
	movl	$0, -120(%rbp)	#, copied
	.loc 1 2299 0
	movq	current_function_decl(%rip), %rax	# current_function_decl, current_function_decl.416
	testq	%rax, %rax	# current_function_decl.416
	jne	.L662	#,
	.loc 1 2300 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L662:
	.loc 1 2302 0
	movl	-112(%rbp), %eax	# code, tmp361
	subl	$3, %eax	#, tmp360
	cmpl	$128, %eax	#, tmp360
	ja	.L731	#,
	movl	%eax, %eax	# tmp360, tmp362
	movq	.L666(,%rax,8), %rax	#, tmp363
	jmp	*%rax	# tmp363
	.section	.rodata
	.align 8
	.align 4
.L666:
	.quad	.L665
	.quad	.L667
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L668
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L668
	.quad	.L669
	.quad	.L731
	.quad	.L731
	.quad	.L668
	.quad	.L668
	.quad	.L731
	.quad	.L669
	.quad	.L670
	.quad	.L669
	.quad	.L671
	.quad	.L668
	.quad	.L731
	.quad	.L731
	.quad	.L668
	.quad	.L668
	.quad	.L668
	.quad	.L731
	.quad	.L668
	.quad	.L668
	.quad	.L731
	.quad	.L672
	.quad	.L731
	.quad	.L673
	.quad	.L674
	.quad	.L731
	.quad	.L675
	.quad	.L731
	.quad	.L668
	.quad	.L668
	.quad	.L676
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L671
	.quad	.L677
	.quad	.L671
	.quad	.L674
	.quad	.L678
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L674
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L731
	.quad	.L731
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L671
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L731
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.quad	.L674
	.text
.L668:
	.loc 1 2316 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L676:
	.loc 1 2322 0
	movq	-136(%rbp), %rax	# x, tmp364
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp365
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -88(%rbp)	# tmp366, new
	.loc 1 2323 0
	movq	-88(%rbp), %rax	# new, tmp367
	movzwl	(%rax), %eax	# new_39->code, D.28129
	cmpw	$66, %ax	#, D.28129
	jne	.L679	#,
	.loc 1 2324 0
	movq	-88(%rbp), %rax	# new, tmp368
	movq	8(%rax), %rax	# new_39->fld[0].rtx, D.28128
	jmp	.L663	#
.L679:
	.loc 1 2325 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L672:
	.loc 1 2328 0
	movq	-136(%rbp), %rax	# x, tmp369
	movl	8(%rax), %eax	# x_30(D)->fld[0].rtuint, D.28131
	movl	%eax, -108(%rbp)	# D.28131, regno
	.loc 1 2332 0
	cmpl	$52, -108(%rbp)	#, regno
	jg	.L680	#,
	.loc 1 2334 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp370
	movq	%rax, -96(%rbp)	# tmp370, ep
	jmp	.L681	#
.L683:
	.loc 1 2336 0
	movq	-96(%rbp), %rax	# ep, tmp371
	movq	32(%rax), %rax	# ep_8->from_rtx, D.28130
	cmpq	-136(%rbp), %rax	# x, D.28130
	jne	.L682	#,
	.loc 1 2336 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# ep, tmp372
	movl	12(%rax), %eax	# ep_8->can_eliminate, D.28133
	testl	%eax, %eax	# D.28133
	je	.L682	#,
	.loc 1 2337 0 is_stmt 1
	movq	-96(%rbp), %rax	# ep, tmp373
	movl	24(%rax), %eax	# ep_8->previous_offset, D.28133
	movslq	%eax, %rdx	# D.28133, D.28134
	movq	-96(%rbp), %rax	# ep, tmp374
	movq	40(%rax), %rax	# ep_8->to_rtx, D.28130
	movq	%rdx, %rsi	# D.28134,
	movq	%rax, %rdi	# D.28130,
	call	plus_constant_wide	#
	jmp	.L663	#
.L682:
	.loc 1 2335 0
	addq	$48, -96(%rbp)	#, ep
.L681:
	.loc 1 2334 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.417
	addq	$192, %rax	#, D.28132
	cmpq	-96(%rbp), %rax	# ep, D.28132
	ja	.L683	#,
	jmp	.L684	#
.L680:
	.loc 1 2340 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.418
	testq	%rax, %rax	# reg_renumber.418
	je	.L684	#,
	.loc 1 2340 0 is_stmt 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.419
	movl	-108(%rbp), %edx	# regno, tmp375
	movslq	%edx, %rdx	# tmp375, D.28135
	addq	%rdx, %rdx	# D.28135
	addq	%rdx, %rax	# D.28135, D.28136
	movzwl	(%rax), %eax	# *_59, D.28137
	testw	%ax, %ax	# D.28137
	jns	.L684	#,
	.loc 1 2341 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.420
	testq	%rax, %rax	# reg_equiv_constant.420
	je	.L684	#,
	.loc 1 2341 0 is_stmt 0 discriminator 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.421
	movl	-108(%rbp), %edx	# regno, tmp376
	movslq	%edx, %rdx	# tmp376, D.28135
	salq	$3, %rdx	#, D.28135
	addq	%rdx, %rax	# D.28135, D.28138
	movq	(%rax), %rax	# *_65, D.28130
	testq	%rax, %rax	# D.28130
	je	.L684	#,
	.loc 1 2342 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.422
	movl	-108(%rbp), %edx	# regno, tmp377
	movslq	%edx, %rdx	# tmp377, D.28135
	salq	$3, %rdx	#, D.28135
	addq	%rdx, %rax	# D.28135, D.28138
	movq	(%rax), %rax	# *_70, D.28130
	movzwl	(%rax), %eax	# _71->code, D.28129
	cmpw	$67, %ax	#, D.28129
	je	.L684	#,
	.loc 1 2342 0 is_stmt 0 discriminator 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.423
	movl	-108(%rbp), %edx	# regno, tmp378
	movslq	%edx, %rdx	# tmp378, D.28135
	salq	$3, %rdx	#, D.28135
	addq	%rdx, %rax	# D.28135, D.28138
	movq	(%rax), %rax	# *_76, D.28130
	movzwl	(%rax), %eax	# _77->code, D.28129
	cmpw	$68, %ax	#, D.28129
	je	.L684	#,
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.424
	movl	-108(%rbp), %edx	# regno, tmp379
	movslq	%edx, %rdx	# tmp379, D.28135
	salq	$3, %rdx	#, D.28135
	addq	%rdx, %rax	# D.28135, D.28138
	movq	(%rax), %rax	# *_82, D.28130
	movzwl	(%rax), %eax	# _83->code, D.28129
	cmpw	$54, %ax	#, D.28129
	je	.L684	#,
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.425
	movl	-108(%rbp), %edx	# regno, tmp380
	movslq	%edx, %rdx	# tmp380, D.28135
	salq	$3, %rdx	#, D.28135
	addq	%rdx, %rax	# D.28135, D.28138
	movq	(%rax), %rax	# *_88, D.28130
	movzwl	(%rax), %eax	# _89->code, D.28129
	cmpw	$55, %ax	#, D.28129
	je	.L684	#,
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.426
	movl	-108(%rbp), %edx	# regno, tmp381
	movslq	%edx, %rdx	# tmp381, D.28135
	salq	$3, %rdx	#, D.28135
	addq	%rdx, %rax	# D.28135, D.28138
	movq	(%rax), %rax	# *_94, D.28130
	movzwl	(%rax), %eax	# _95->code, D.28129
	cmpw	$58, %ax	#, D.28129
	je	.L684	#,
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.427
	movl	-108(%rbp), %edx	# regno, tmp382
	movslq	%edx, %rdx	# tmp382, D.28135
	salq	$3, %rdx	#, D.28135
	addq	%rdx, %rax	# D.28135, D.28138
	movq	(%rax), %rax	# *_100, D.28130
	movzwl	(%rax), %eax	# _101->code, D.28129
	cmpw	$134, %ax	#, D.28129
	je	.L684	#,
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.428
	movl	-108(%rbp), %edx	# regno, tmp383
	movslq	%edx, %rdx	# tmp383, D.28135
	salq	$3, %rdx	#, D.28135
	addq	%rdx, %rax	# D.28135, D.28138
	movq	(%rax), %rax	# *_106, D.28130
	movzwl	(%rax), %eax	# _107->code, D.28129
	cmpw	$56, %ax	#, D.28129
	je	.L684	#,
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.429
	movl	-108(%rbp), %edx	# regno, tmp384
	movslq	%edx, %rdx	# tmp384, D.28135
	salq	$3, %rdx	#, D.28135
	addq	%rdx, %rax	# D.28135, D.28138
	movq	(%rax), %rax	# *_112, D.28130
	movzwl	(%rax), %eax	# _113->code, D.28129
	cmpw	$140, %ax	#, D.28129
	je	.L684	#,
	.loc 1 2343 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.430
	movl	-108(%rbp), %edx	# regno, tmp385
	movslq	%edx, %rdx	# tmp385, D.28135
	salq	$3, %rdx	#, D.28135
	addq	%rdx, %rax	# D.28135, D.28138
	movq	(%rax), %rax	# *_118, D.28130
	movq	%rax, %rdi	# D.28130,
	call	copy_rtx	#
	movq	-152(%rbp), %rdx	# insn, tmp386
	movl	-140(%rbp), %ecx	# mem_mode, tmp387
	movl	%ecx, %esi	# tmp387,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	jmp	.L663	#
.L684:
	.loc 1 2345 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L677:
	.loc 1 2364 0
	movq	-136(%rbp), %rax	# x, tmp388
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movzwl	(%rax), %eax	# _124->code, D.28129
	cmpw	$61, %ax	#, D.28129
	jne	.L685	#,
	.loc 1 2365 0
	movq	-136(%rbp), %rax	# x, tmp389
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movl	8(%rax), %eax	# _126->fld[0].rtuint, D.28131
	cmpl	$52, %eax	#, D.28131
	ja	.L685	#,
	.loc 1 2366 0
	movq	-136(%rbp), %rax	# x, tmp390
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movzwl	(%rax), %eax	# _128->code, D.28129
	cmpw	$67, %ax	#, D.28129
	je	.L686	#,
	.loc 1 2366 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# x, tmp391
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movzwl	(%rax), %eax	# _130->code, D.28129
	cmpw	$68, %ax	#, D.28129
	je	.L686	#,
	movq	-136(%rbp), %rax	# x, tmp392
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movzwl	(%rax), %eax	# _132->code, D.28129
	cmpw	$54, %ax	#, D.28129
	je	.L686	#,
	movq	-136(%rbp), %rax	# x, tmp393
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movzwl	(%rax), %eax	# _134->code, D.28129
	cmpw	$55, %ax	#, D.28129
	je	.L686	#,
	movq	-136(%rbp), %rax	# x, tmp394
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movzwl	(%rax), %eax	# _136->code, D.28129
	cmpw	$58, %ax	#, D.28129
	je	.L686	#,
	movq	-136(%rbp), %rax	# x, tmp395
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movzwl	(%rax), %eax	# _138->code, D.28129
	cmpw	$134, %ax	#, D.28129
	je	.L686	#,
	movq	-136(%rbp), %rax	# x, tmp396
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movzwl	(%rax), %eax	# _140->code, D.28129
	cmpw	$56, %ax	#, D.28129
	je	.L686	#,
	movq	-136(%rbp), %rax	# x, tmp397
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movzwl	(%rax), %eax	# _142->code, D.28129
	cmpw	$140, %ax	#, D.28129
	jne	.L685	#,
.L686:
	.loc 1 2368 0 is_stmt 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp398
	movq	%rax, -96(%rbp)	# tmp398, ep
	jmp	.L687	#
.L692:
	.loc 1 2370 0
	movq	-96(%rbp), %rax	# ep, tmp399
	movq	32(%rax), %rdx	# ep_9->from_rtx, D.28130
	movq	-136(%rbp), %rax	# x, tmp400
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	cmpq	%rax, %rdx	# D.28130, D.28130
	jne	.L688	#,
	.loc 1 2370 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# ep, tmp401
	movl	12(%rax), %eax	# ep_9->can_eliminate, D.28133
	testl	%eax, %eax	# D.28133
	je	.L688	#,
	.loc 1 2380 0 is_stmt 1
	cmpl	$0, -140(%rbp)	#, mem_mode
	je	.L689	#,
	.loc 1 2380 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# x, tmp402
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movzwl	(%rax), %eax	# _150->code, D.28129
	cmpw	$54, %ax	#, D.28129
	jne	.L689	#,
	.loc 1 2381 0 is_stmt 1
	movq	-136(%rbp), %rax	# x, tmp403
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movq	8(%rax), %rdx	# _152->fld[0].rtwint, D.28134
	movq	-96(%rbp), %rax	# ep, tmp404
	movl	24(%rax), %eax	# ep_9->previous_offset, D.28133
	negl	%eax	# D.28133
	cltq
	cmpq	%rax, %rdx	# D.28134, D.28134
	jne	.L689	#,
	.loc 1 2382 0
	movq	-96(%rbp), %rax	# ep, tmp405
	movq	40(%rax), %rax	# ep_9->to_rtx, D.28128
	jmp	.L663	#
.L689:
	.loc 1 2384 0
	movq	-96(%rbp), %rax	# ep, tmp406
	movl	24(%rax), %eax	# ep_9->previous_offset, D.28133
	movslq	%eax, %rdx	# D.28133, D.28134
	movq	-136(%rbp), %rax	# x, tmp407
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movq	%rdx, %rsi	# D.28134,
	movq	%rax, %rdi	# D.28130,
	call	plus_constant_wide	#
	movq	%rax, %rcx	#, D.28130
	movq	-96(%rbp), %rax	# ep, tmp408
	movq	40(%rax), %rdx	# ep_9->to_rtx, D.28130
	movl	target_flags(%rip), %eax	# target_flags, target_flags.432
	andl	$33554432, %eax	#, D.28133
	testl	%eax, %eax	# D.28133
	je	.L690	#,
	.loc 1 2384 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.431
	jmp	.L691	#
.L690:
	.loc 1 2384 0 discriminator 2
	movl	$4, %eax	#, iftmp.431
.L691:
	.loc 1 2384 0 discriminator 3
	movl	%eax, %esi	# iftmp.431,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L663	#
.L688:
	.loc 1 2369 0 is_stmt 1
	addq	$48, -96(%rbp)	#, ep
.L687:
	.loc 1 2368 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.433
	addq	$192, %rax	#, D.28132
	cmpq	-96(%rbp), %rax	# ep, D.28132
	ja	.L692	#,
	.loc 1 2391 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L685:
.LBB76:
	.loc 1 2404 0
	movq	-136(%rbp), %rax	# x, tmp409
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp410
	movl	-140(%rbp), %ecx	# mem_mode, tmp411
	movl	%ecx, %esi	# tmp411,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -72(%rbp)	# tmp412, new0
	.loc 1 2405 0
	movq	-136(%rbp), %rax	# x, tmp413
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp414
	movl	-140(%rbp), %ecx	# mem_mode, tmp415
	movl	%ecx, %esi	# tmp415,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -64(%rbp)	# tmp416, new1
	.loc 1 2407 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.434
	testq	%rax, %rax	# reg_renumber.434
	je	.L693	#,
	.loc 1 2407 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# x, tmp417
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	cmpq	-72(%rbp), %rax	# new0, D.28130
	jne	.L694	#,
	movq	-136(%rbp), %rax	# x, tmp418
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	cmpq	-64(%rbp), %rax	# new1, D.28130
	je	.L693	#,
.L694:
	.loc 1 2413 0 is_stmt 1
	movq	-72(%rbp), %rax	# new0, tmp419
	movzwl	(%rax), %eax	# new0_171->code, D.28129
	cmpw	$75, %ax	#, D.28129
	jne	.L695	#,
	.loc 1 2413 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# new1, tmp420
	movzwl	(%rax), %eax	# new1_173->code, D.28129
	cmpw	$61, %ax	#, D.28129
	jne	.L695	#,
	.loc 1 2414 0 is_stmt 1
	movq	-64(%rbp), %rax	# new1, tmp421
	movl	8(%rax), %eax	# new1_173->fld[0].rtuint, D.28131
	cmpl	$52, %eax	#, D.28131
	jbe	.L695	#,
	.loc 1 2415 0
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.435
	movq	-64(%rbp), %rax	# new1, tmp422
	movl	8(%rax), %eax	# new1_173->fld[0].rtuint, D.28131
	movl	%eax, %eax	# D.28131, D.28135
	addq	%rax, %rax	# D.28135
	addq	%rdx, %rax	# reg_renumber.435, D.28136
	movzwl	(%rax), %eax	# *_184, D.28137
	testw	%ax, %ax	# D.28137
	jns	.L695	#,
	.loc 1 2416 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.436
	testq	%rax, %rax	# reg_equiv_constant.436
	je	.L695	#,
	.loc 1 2417 0
	movq	reg_equiv_constant(%rip), %rdx	# reg_equiv_constant, reg_equiv_constant.437
	movq	-64(%rbp), %rax	# new1, tmp423
	movl	8(%rax), %eax	# new1_173->fld[0].rtuint, D.28131
	movl	%eax, %eax	# D.28131, D.28135
	salq	$3, %rax	#, D.28135
	addq	%rdx, %rax	# reg_equiv_constant.437, D.28138
	movq	(%rax), %rax	# *_191, D.28130
	testq	%rax, %rax	# D.28130
	je	.L695	#,
	.loc 1 2418 0
	movq	reg_equiv_constant(%rip), %rdx	# reg_equiv_constant, reg_equiv_constant.438
	movq	-64(%rbp), %rax	# new1, tmp424
	movl	8(%rax), %eax	# new1_173->fld[0].rtuint, D.28131
	movl	%eax, %eax	# D.28131, D.28135
	salq	$3, %rax	#, D.28135
	addq	%rdx, %rax	# reg_equiv_constant.438, D.28138
	movq	(%rax), %rax	# *_197, tmp425
	movq	%rax, -64(%rbp)	# tmp425, new1
	jmp	.L696	#
.L695:
	.loc 1 2419 0
	movq	-64(%rbp), %rax	# new1, tmp426
	movzwl	(%rax), %eax	# new1_173->code, D.28129
	cmpw	$75, %ax	#, D.28129
	jne	.L696	#,
	.loc 1 2419 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# new0, tmp427
	movzwl	(%rax), %eax	# new0_171->code, D.28129
	cmpw	$61, %ax	#, D.28129
	jne	.L696	#,
	.loc 1 2420 0 is_stmt 1
	movq	-72(%rbp), %rax	# new0, tmp428
	movl	8(%rax), %eax	# new0_171->fld[0].rtuint, D.28131
	cmpl	$52, %eax	#, D.28131
	jbe	.L696	#,
	.loc 1 2421 0
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.439
	movq	-72(%rbp), %rax	# new0, tmp429
	movl	8(%rax), %eax	# new0_171->fld[0].rtuint, D.28131
	movl	%eax, %eax	# D.28131, D.28135
	addq	%rax, %rax	# D.28135
	addq	%rdx, %rax	# reg_renumber.439, D.28136
	movzwl	(%rax), %eax	# *_206, D.28137
	testw	%ax, %ax	# D.28137
	jns	.L696	#,
	.loc 1 2422 0
	movq	reg_equiv_constant(%rip), %rdx	# reg_equiv_constant, reg_equiv_constant.440
	movq	-72(%rbp), %rax	# new0, tmp430
	movl	8(%rax), %eax	# new0_171->fld[0].rtuint, D.28131
	movl	%eax, %eax	# D.28131, D.28135
	salq	$3, %rax	#, D.28135
	addq	%rdx, %rax	# reg_equiv_constant.440, D.28138
	movq	(%rax), %rax	# *_212, D.28130
	testq	%rax, %rax	# D.28130
	je	.L696	#,
	.loc 1 2423 0
	movq	reg_equiv_constant(%rip), %rdx	# reg_equiv_constant, reg_equiv_constant.441
	movq	-72(%rbp), %rax	# new0, tmp431
	movl	8(%rax), %eax	# new0_171->fld[0].rtuint, D.28131
	movl	%eax, %eax	# D.28131, D.28135
	salq	$3, %rax	#, D.28135
	addq	%rdx, %rax	# reg_equiv_constant.441, D.28138
	movq	(%rax), %rax	# *_218, tmp432
	movq	%rax, -72(%rbp)	# tmp432, new0
.L696:
	.loc 1 2425 0
	movq	-64(%rbp), %rdx	# new1, tmp433
	movq	-72(%rbp), %rax	# new0, tmp434
	movq	%rdx, %rsi	# tmp433,
	movq	%rax, %rdi	# tmp434,
	call	form_sum	#
	movq	%rax, -88(%rbp)	# tmp435, new
	.loc 1 2430 0
	cmpl	$0, -140(%rbp)	#, mem_mode
	jne	.L697	#,
	.loc 1 2430 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# new, tmp436
	movzwl	(%rax), %eax	# new_220->code, D.28129
	cmpw	$75, %ax	#, D.28129
	je	.L697	#,
	.loc 1 2431 0 is_stmt 1
	movq	const_int_rtx+512(%rip), %rcx	# const_int_rtx, D.28130
	movq	-136(%rbp), %rax	# x, tmp437
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	movzbl	%al, %eax	# D.28139, D.28140
	movq	-88(%rbp), %rdx	# new, tmp438
	movl	%eax, %esi	# D.28140,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	jmp	.L663	#
.L697:
	.loc 1 2433 0
	movq	-88(%rbp), %rax	# new, D.28128
	jmp	.L663	#
.L693:
.LBE76:
	.loc 1 2436 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L678:
	.loc 1 2444 0
	movq	-136(%rbp), %rax	# x, tmp439
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movzwl	(%rax), %eax	# _228->code, D.28129
	cmpw	$61, %ax	#, D.28129
	jne	.L671	#,
	.loc 1 2445 0
	movq	-136(%rbp), %rax	# x, tmp440
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movl	8(%rax), %eax	# _230->fld[0].rtuint, D.28131
	cmpl	$52, %eax	#, D.28131
	ja	.L671	#,
	.loc 1 2446 0
	movq	-136(%rbp), %rax	# x, tmp441
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movzwl	(%rax), %eax	# _232->code, D.28129
	cmpw	$54, %ax	#, D.28129
	jne	.L671	#,
	.loc 1 2447 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp442
	movq	%rax, -96(%rbp)	# tmp442, ep
	jmp	.L698	#
.L704:
	.loc 1 2449 0
	movq	-96(%rbp), %rax	# ep, tmp443
	movq	32(%rax), %rdx	# ep_10->from_rtx, D.28130
	movq	-136(%rbp), %rax	# x, tmp444
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	cmpq	%rax, %rdx	# D.28130, D.28130
	jne	.L699	#,
	.loc 1 2449 0 is_stmt 0 discriminator 1
	movq	-96(%rbp), %rax	# ep, tmp445
	movl	12(%rax), %eax	# ep_10->can_eliminate, D.28133
	testl	%eax, %eax	# D.28133
	je	.L699	#,
	.loc 1 2451 0 is_stmt 1
	cmpl	$0, -140(%rbp)	#, mem_mode
	jne	.L700	#,
	.loc 1 2453 0
	cmpq	$0, -152(%rbp)	#, insn
	je	.L701	#,
	.loc 1 2453 0 is_stmt 0 discriminator 1
	movq	-152(%rbp), %rax	# insn, tmp446
	movzwl	(%rax), %eax	# insn_38(D)->code, D.28129
	cmpw	$3, %ax	#, D.28129
	je	.L700	#,
	.loc 1 2454 0 is_stmt 1
	movq	-152(%rbp), %rax	# insn, tmp447
	movzwl	(%rax), %eax	# insn_38(D)->code, D.28129
	cmpw	$4, %ax	#, D.28129
	je	.L700	#,
.L701:
	.loc 1 2455 0
	movq	-96(%rbp), %rax	# ep, tmp448
	movl	$1, 28(%rax)	#, ep_10->ref_outside_mem
.L700:
	.loc 1 2458 0
	movq	-96(%rbp), %rax	# ep, tmp449
	movl	24(%rax), %eax	# ep_10->previous_offset, D.28133
	movslq	%eax, %rdx	# D.28133, D.28134
	movq	-136(%rbp), %rax	# x, tmp450
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movq	8(%rax), %rax	# _244->fld[0].rtwint, D.28134
	movq	%rdx, %rbx	# D.28134, D.28134
	imulq	%rax, %rbx	# D.28134, D.28134
	movq	-136(%rbp), %rax	# x, tmp451
	movq	16(%rax), %rcx	# x_30(D)->fld[1].rtx, D.28130
	movq	-96(%rbp), %rax	# ep, tmp452
	movq	40(%rax), %rdx	# ep_10->to_rtx, D.28130
	movl	target_flags(%rip), %eax	# target_flags, target_flags.443
	andl	$33554432, %eax	#, D.28133
	testl	%eax, %eax	# D.28133
	je	.L702	#,
	.loc 1 2458 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.442
	jmp	.L703	#
.L702:
	.loc 1 2458 0 discriminator 2
	movl	$4, %eax	#, iftmp.442
.L703:
	.loc 1 2458 0 discriminator 3
	movl	%eax, %esi	# iftmp.442,
	movl	$78, %edi	#,
	call	gen_rtx_fmt_ee	#
	.loc 1 2457 0 is_stmt 1 discriminator 3
	movq	%rbx, %rsi	# D.28134,
	movq	%rax, %rdi	# D.28130,
	call	plus_constant_wide	#
	jmp	.L663	#
.L699:
	.loc 1 2448 0
	addq	$48, -96(%rbp)	#, ep
.L698:
	.loc 1 2447 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.444
	addq	$192, %rax	#, D.28132
	cmpq	-96(%rbp), %rax	# ep, D.28132
	ja	.L704	#,
.L671:
.LBB77:
	.loc 1 2477 0
	movq	-136(%rbp), %rax	# x, tmp453
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp454
	movl	-140(%rbp), %ecx	# mem_mode, tmp455
	movl	%ecx, %esi	# tmp455,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -56(%rbp)	# tmp456, new0
	.loc 1 2479 0
	movq	-136(%rbp), %rax	# x, tmp457
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	testq	%rax, %rax	# D.28130
	je	.L705	#,
	.loc 1 2479 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# x, tmp458
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp459
	movl	-140(%rbp), %ecx	# mem_mode, tmp460
	movl	%ecx, %esi	# tmp460,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	jmp	.L706	#
.L705:
	.loc 1 2479 0 discriminator 2
	movl	$0, %eax	#, iftmp.445
.L706:
	.loc 1 2478 0 is_stmt 1
	movq	%rax, -48(%rbp)	# iftmp.445, new1
	.loc 1 2481 0
	movq	-136(%rbp), %rax	# x, tmp461
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	cmpq	-56(%rbp), %rax	# new0, D.28130
	jne	.L707	#,
	.loc 1 2481 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# x, tmp462
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	cmpq	-48(%rbp), %rax	# new1, D.28130
	je	.L708	#,
.L707:
	.loc 1 2482 0 is_stmt 1
	movq	-136(%rbp), %rax	# x, tmp463
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	movzbl	%al, %esi	# D.28139, D.28140
	movq	-48(%rbp), %rcx	# new1, tmp464
	movq	-56(%rbp), %rdx	# new0, tmp465
	movl	-112(%rbp), %eax	# code, tmp466
	movl	%eax, %edi	# tmp466,
	call	gen_rtx_fmt_ee	#
	jmp	.L663	#
.L708:
.LBE77:
	.loc 1 2484 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L665:
	.loc 1 2488 0
	movq	-136(%rbp), %rax	# x, tmp467
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	testq	%rax, %rax	# D.28130
	je	.L667	#,
	.loc 1 2490 0
	movq	-136(%rbp), %rax	# x, tmp468
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp469
	movl	-140(%rbp), %ecx	# mem_mode, tmp470
	movl	%ecx, %esi	# tmp470,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -88(%rbp)	# tmp471, new
	.loc 1 2491 0
	movq	-136(%rbp), %rax	# x, tmp472
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	cmpq	-88(%rbp), %rax	# new, D.28130
	je	.L667	#,
	.loc 1 2496 0
	movq	-136(%rbp), %rax	# x, tmp473
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	cmpb	$1, %al	#, D.28139
	jne	.L709	#,
	.loc 1 2497 0
	movq	-136(%rbp), %rax	# x, tmp474
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	.loc 1 2499 0
	testq	%rax, %rax	# D.28130
	je	.L710	#,
	.loc 1 2498 0
	movq	-136(%rbp), %rax	# x, tmp475
	movq	16(%rax), %rax	# x_30(D)->fld[1].rtx, D.28130
	.loc 1 2499 0
	movq	-152(%rbp), %rdx	# insn, tmp476
	movl	-140(%rbp), %ecx	# mem_mode, tmp477
	movl	%ecx, %esi	# tmp477,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	jmp	.L711	#
.L710:
	.loc 1 2499 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.446
.L711:
	.loc 1 2497 0 is_stmt 1
	jmp	.L663	#
.L709:
	.loc 1 2501 0
	movq	-136(%rbp), %rax	# x, tmp478
	movq	16(%rax), %rcx	# x_30(D)->fld[1].rtx, D.28130
	movq	-136(%rbp), %rax	# x, tmp479
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	movzbl	%al, %eax	# D.28139, D.28140
	movq	-88(%rbp), %rdx	# new, tmp480
	movl	%eax, %esi	# D.28140,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -136(%rbp)	# tmp481, x
.L667:
	.loc 1 2511 0
	movq	-136(%rbp), %rax	# x, tmp482
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.28130
	testq	%rax, %rax	# D.28130
	je	.L712	#,
	.loc 1 2513 0
	movq	-136(%rbp), %rax	# x, tmp483
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp484
	movl	-140(%rbp), %ecx	# mem_mode, tmp485
	movl	%ecx, %esi	# tmp485,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -88(%rbp)	# tmp486, new
	.loc 1 2514 0
	movq	-136(%rbp), %rax	# x, tmp487
	movq	16(%rax), %rax	# x_1->fld[1].rtx, D.28130
	cmpq	-88(%rbp), %rax	# new, D.28130
	je	.L712	#,
	.loc 1 2516 0
	movq	-136(%rbp), %rax	# x, tmp488
	movq	8(%rax), %rdx	# x_1->fld[0].rtx, D.28130
	movq	-136(%rbp), %rax	# x, tmp489
	movzbl	2(%rax), %eax	# x_1->mode, D.28139
	movzbl	%al, %esi	# D.28139, D.28140
	movq	-136(%rbp), %rax	# x, tmp490
	movzwl	(%rax), %eax	# x_1->code, D.28129
	movzwl	%ax, %eax	# D.28129, D.28141
	.loc 1 2515 0
	movq	-88(%rbp), %rcx	# new, tmp491
	movl	%eax, %edi	# D.28141,
	call	gen_rtx_fmt_ee	#
	jmp	.L663	#
.L712:
	.loc 1 2518 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L674:
	.loc 1 2533 0
	movq	-136(%rbp), %rax	# x, tmp492
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp493
	movl	-140(%rbp), %ecx	# mem_mode, tmp494
	movl	%ecx, %esi	# tmp494,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -88(%rbp)	# tmp495, new
	.loc 1 2534 0
	movq	-136(%rbp), %rax	# x, tmp496
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	cmpq	-88(%rbp), %rax	# new, D.28130
	je	.L713	#,
	.loc 1 2535 0
	movq	-136(%rbp), %rax	# x, tmp497
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	movzbl	%al, %ecx	# D.28139, D.28140
	movq	-88(%rbp), %rdx	# new, tmp498
	movl	-112(%rbp), %eax	# code, tmp499
	movl	%ecx, %esi	# D.28140,
	movl	%eax, %edi	# tmp499,
	call	gen_rtx_fmt_e	#
	jmp	.L663	#
.L713:
	.loc 1 2536 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L673:
	.loc 1 2545 0
	movq	-136(%rbp), %rax	# x, tmp500
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movzwl	(%rax), %eax	# _301->code, D.28129
	cmpw	$61, %ax	#, D.28129
	jne	.L714	#,
	.loc 1 2546 0
	movq	-136(%rbp), %rax	# x, tmp501
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	movzbl	%al, %eax	# D.28139, D.28133
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28139
	.loc 1 2547 0
	movq	-136(%rbp), %rax	# x, tmp503
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movzbl	2(%rax), %eax	# _306->mode, D.28139
	movzbl	%al, %eax	# D.28139, D.28133
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28139
	.loc 1 2546 0
	cmpb	%al, %dl	# D.28139, D.28139
	ja	.L714	#,
	.loc 1 2548 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.447
	testq	%rax, %rax	# reg_equiv_memory_loc.447
	je	.L714	#,
	.loc 1 2549 0
	movq	reg_equiv_memory_loc(%rip), %rdx	# reg_equiv_memory_loc, reg_equiv_memory_loc.448
	movq	-136(%rbp), %rax	# x, tmp505
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movl	8(%rax), %eax	# _312->fld[0].rtuint, D.28131
	movl	%eax, %eax	# D.28131, D.28135
	salq	$3, %rax	#, D.28135
	addq	%rdx, %rax	# reg_equiv_memory_loc.448, D.28138
	movq	(%rax), %rax	# *_316, D.28130
	testq	%rax, %rax	# D.28130
	je	.L714	#,
	.loc 1 2551 0
	movq	-136(%rbp), %rax	# x, tmp506
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, tmp507
	movq	%rax, -88(%rbp)	# tmp507, new
	jmp	.L715	#
.L714:
	.loc 1 2554 0
	movq	-136(%rbp), %rax	# x, tmp508
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp509
	movl	-140(%rbp), %ecx	# mem_mode, tmp510
	movl	%ecx, %esi	# tmp510,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -88(%rbp)	# tmp511, new
.L715:
	.loc 1 2556 0
	movq	-136(%rbp), %rax	# x, tmp512
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	cmpq	-88(%rbp), %rax	# new, D.28130
	je	.L716	#,
.LBB78:
	.loc 1 2558 0
	movq	-136(%rbp), %rax	# x, tmp513
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	movzbl	%al, %eax	# D.28139, D.28133
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28139
	movzbl	%al, %eax	# D.28139, tmp515
	movl	%eax, -104(%rbp)	# tmp515, x_size
	.loc 1 2559 0
	movq	-88(%rbp), %rax	# new, tmp516
	movzbl	2(%rax), %eax	# new_11->mode, D.28139
	movzbl	%al, %eax	# D.28139, D.28133
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28139
	movzbl	%al, %eax	# D.28139, tmp518
	movl	%eax, -100(%rbp)	# tmp518, new_size
	.loc 1 2561 0
	movq	-88(%rbp), %rax	# new, tmp519
	movzwl	(%rax), %eax	# new_11->code, D.28129
	cmpw	$66, %ax	#, D.28129
	jne	.L717	#,
	.loc 1 2562 0
	movl	-104(%rbp), %eax	# x_size, tmp520
	cmpl	-100(%rbp), %eax	# new_size, tmp520
	jl	.L718	#,
	.loc 1 2575 0
	movl	-104(%rbp), %eax	# x_size, tmp521
	cmpl	-100(%rbp), %eax	# new_size, tmp521
	jne	.L717	#,
.L718:
	.loc 1 2577 0
	movq	-136(%rbp), %rax	# x, tmp522
	movl	16(%rax), %eax	# x_30(D)->fld[1].rtuint, D.28131
	movl	%eax, %edx	# D.28131, D.28134
	movq	-136(%rbp), %rax	# x, tmp523
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	movzbl	%al, %esi	# D.28139, D.28140
	movq	-88(%rbp), %rax	# new, tmp524
	movl	$1, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp524,
	call	adjust_address_1	#
	jmp	.L663	#
.L717:
	.loc 1 2579 0
	movq	-136(%rbp), %rax	# x, tmp525
	movl	16(%rax), %eax	# x_30(D)->fld[1].rtuint, D.28131
	movl	%eax, %edx	# D.28131, D.28133
	movq	-136(%rbp), %rax	# x, tmp526
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	movzbl	%al, %eax	# D.28139, D.28140
	movq	-88(%rbp), %rcx	# new, tmp527
	movq	%rcx, %rsi	# tmp527,
	movl	%eax, %edi	# D.28140,
	call	gen_rtx_SUBREG	#
	jmp	.L663	#
.L716:
.LBE78:
	.loc 1 2582 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L675:
	.loc 1 2588 0
	movq	-136(%rbp), %rax	# x, tmp528
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movzwl	(%rax), %eax	# _342->code, D.28129
	cmpw	$70, %ax	#, D.28129
	jne	.L719	#,
	.loc 1 2589 0
	movq	-136(%rbp), %rax	# x, tmp529
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movq	8(%rax), %rax	# _344->fld[0].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp530
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	jmp	.L663	#
.L719:
	.loc 1 2597 0
	movq	-136(%rbp), %rax	# x, tmp531
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	.loc 1 2595 0
	movzbl	%al, %ecx	# D.28139, D.28140
	movq	-136(%rbp), %rax	# x, tmp532
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp533
	movl	%ecx, %esi	# D.28140,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, %rdx	#, D.28130
	.loc 1 2594 0
	movq	-136(%rbp), %rax	# x, tmp534
	movq	%rdx, %rsi	# D.28130,
	movq	%rax, %rdi	# tmp534,
	call	replace_equiv_address_nv	#
	jmp	.L663	#
.L670:
	.loc 1 2601 0
	movq	-136(%rbp), %rax	# x, tmp535
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp536
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -88(%rbp)	# tmp537, new
	.loc 1 2602 0
	movq	-136(%rbp), %rax	# x, tmp538
	movq	8(%rax), %rax	# x_30(D)->fld[0].rtx, D.28130
	cmpq	-88(%rbp), %rax	# new, D.28130
	je	.L720	#,
	.loc 1 2603 0
	movq	-136(%rbp), %rax	# x, tmp539
	movzbl	2(%rax), %eax	# x_30(D)->mode, D.28139
	movzbl	%al, %eax	# D.28139, D.28140
	movq	-88(%rbp), %rdx	# new, tmp540
	movl	%eax, %esi	# D.28140,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	jmp	.L663	#
.L720:
	.loc 1 2604 0
	movq	-136(%rbp), %rax	# x, D.28128
	jmp	.L663	#
.L669:
	.loc 1 2609 0
	movl	$__FUNCTION__.14877, %edx	#,
	movl	$2609, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L731:
	.loc 1 2612 0
	nop
	.loc 1 2617 0
	movl	-112(%rbp), %eax	# code, code.449
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp542
	movq	%rax, -80(%rbp)	# tmp542, fmt
	.loc 1 2618 0
	movl	$0, -128(%rbp)	#, i
	jmp	.L721	#
.L729:
	.loc 1 2620 0
	movq	-80(%rbp), %rax	# fmt, tmp543
	movzbl	(%rax), %eax	# *fmt_14, D.28142
	cmpb	$101, %al	#, D.28142
	jne	.L722	#,
	.loc 1 2622 0
	movq	-136(%rbp), %rax	# x, tmp544
	movl	-128(%rbp), %edx	# i, tmp546
	movslq	%edx, %rdx	# tmp546, tmp545
	movq	8(%rax,%rdx,8), %rax	# x_7->fld[i_12].rtx, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp547
	movl	-140(%rbp), %ecx	# mem_mode, tmp548
	movl	%ecx, %esi	# tmp548,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -88(%rbp)	# tmp549, new
	.loc 1 2623 0
	movq	-136(%rbp), %rax	# x, tmp550
	movl	-128(%rbp), %edx	# i, tmp552
	movslq	%edx, %rdx	# tmp552, tmp551
	movq	8(%rax,%rdx,8), %rax	# x_7->fld[i_12].rtx, D.28130
	cmpq	-88(%rbp), %rax	# new, D.28130
	je	.L723	#,
	.loc 1 2623 0 is_stmt 0 discriminator 1
	cmpl	$0, -120(%rbp)	#, copied
	jne	.L723	#,
.LBB79:
	.loc 1 2625 0 is_stmt 1
	movl	-112(%rbp), %eax	# code, tmp553
	movl	%eax, %edi	# tmp553,
	call	rtx_alloc	#
	movq	%rax, -40(%rbp)	# tmp554, new_x
	.loc 1 2628 0
	movl	-112(%rbp), %eax	# code, code.450
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.28139
	.loc 1 2626 0
	movzbl	%al, %eax	# D.28139, D.28135
	addq	$1, %rax	#, D.28135
	leaq	0(,%rax,8), %rdx	#, D.28135
	movq	-136(%rbp), %rcx	# x, tmp556
	movq	-40(%rbp), %rax	# new_x, tmp557
	movq	%rcx, %rsi	# tmp556,
	movq	%rax, %rdi	# tmp557,
	call	memcpy	#
	.loc 1 2629 0
	movq	-40(%rbp), %rax	# new_x, tmp558
	movq	%rax, -136(%rbp)	# tmp558, x
	.loc 1 2630 0
	movl	$1, -120(%rbp)	#, copied
.L723:
.LBE79:
	.loc 1 2632 0
	movq	-136(%rbp), %rax	# x, tmp559
	movl	-128(%rbp), %edx	# i, tmp561
	movslq	%edx, %rdx	# tmp561, tmp560
	movq	-88(%rbp), %rcx	# new, tmp562
	movq	%rcx, 8(%rax,%rdx,8)	# tmp562, x_2->fld[i_12].rtx
	jmp	.L724	#
.L722:
	.loc 1 2634 0
	movq	-80(%rbp), %rax	# fmt, tmp563
	movzbl	(%rax), %eax	# *fmt_14, D.28142
	cmpb	$69, %al	#, D.28142
	jne	.L724	#,
.LBB80:
	.loc 1 2636 0
	movl	$0, -116(%rbp)	#, copied_vec
	.loc 1 2637 0
	movl	$0, -124(%rbp)	#, j
	jmp	.L725	#
.L728:
	.loc 1 2639 0
	movq	-136(%rbp), %rax	# x, tmp564
	movl	-128(%rbp), %edx	# i, tmp566
	movslq	%edx, %rdx	# tmp566, tmp565
	movq	8(%rax,%rdx,8), %rax	# x_5->fld[i_12].rtvec, D.28143
	movl	-124(%rbp), %edx	# j, tmp568
	movslq	%edx, %rdx	# tmp568, tmp567
	movq	8(%rax,%rdx,8), %rax	# _382->elem, D.28130
	movq	-152(%rbp), %rdx	# insn, tmp569
	movl	-140(%rbp), %ecx	# mem_mode, tmp570
	movl	%ecx, %esi	# tmp570,
	movq	%rax, %rdi	# D.28130,
	call	eliminate_regs	#
	movq	%rax, -88(%rbp)	# tmp571, new
	.loc 1 2640 0
	movq	-136(%rbp), %rax	# x, tmp572
	movl	-128(%rbp), %edx	# i, tmp574
	movslq	%edx, %rdx	# tmp574, tmp573
	movq	8(%rax,%rdx,8), %rax	# x_5->fld[i_12].rtvec, D.28143
	movl	-124(%rbp), %edx	# j, tmp576
	movslq	%edx, %rdx	# tmp576, tmp575
	movq	8(%rax,%rdx,8), %rax	# _385->elem, D.28130
	cmpq	-88(%rbp), %rax	# new, D.28130
	je	.L726	#,
	.loc 1 2640 0 is_stmt 0 discriminator 1
	cmpl	$0, -116(%rbp)	#, copied_vec
	jne	.L726	#,
.LBB81:
	.loc 1 2643 0 is_stmt 1
	movq	-136(%rbp), %rax	# x, tmp577
	movl	-128(%rbp), %edx	# i, tmp579
	movslq	%edx, %rdx	# tmp579, tmp578
	movq	8(%rax,%rdx,8), %rax	# x_5->fld[i_12].rtvec, D.28143
	leaq	8(%rax), %rcx	#, D.28144
	.loc 1 2642 0
	movq	-136(%rbp), %rax	# x, tmp580
	movl	-128(%rbp), %edx	# i, tmp582
	movslq	%edx, %rdx	# tmp582, tmp581
	movq	8(%rax,%rdx,8), %rax	# x_5->fld[i_12].rtvec, D.28143
	movl	(%rax), %eax	# _389->num_elem, D.28133
	movq	%rcx, %rsi	# D.28144,
	movl	%eax, %edi	# D.28133,
	call	gen_rtvec_v	#
	movq	%rax, -32(%rbp)	# tmp583, new_v
	.loc 1 2644 0
	cmpl	$0, -120(%rbp)	#, copied
	jne	.L727	#,
.LBB82:
	.loc 1 2646 0
	movl	-112(%rbp), %eax	# code, tmp584
	movl	%eax, %edi	# tmp584,
	call	rtx_alloc	#
	movq	%rax, -24(%rbp)	# tmp585, new_x
	.loc 1 2650 0
	movl	-112(%rbp), %eax	# code, code.451
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.28139
	.loc 1 2647 0
	movzbl	%al, %eax	# D.28139, D.28135
	addq	$1, %rax	#, D.28135
	leaq	0(,%rax,8), %rdx	#, D.28135
	movq	-136(%rbp), %rcx	# x, tmp587
	movq	-24(%rbp), %rax	# new_x, tmp588
	movq	%rcx, %rsi	# tmp587,
	movq	%rax, %rdi	# tmp588,
	call	memcpy	#
	.loc 1 2651 0
	movq	-24(%rbp), %rax	# new_x, tmp589
	movq	%rax, -136(%rbp)	# tmp589, x
	.loc 1 2652 0
	movl	$1, -120(%rbp)	#, copied
.L727:
.LBE82:
	.loc 1 2654 0
	movq	-136(%rbp), %rax	# x, tmp590
	movl	-128(%rbp), %edx	# i, tmp592
	movslq	%edx, %rdx	# tmp592, tmp591
	movq	-32(%rbp), %rcx	# new_v, tmp593
	movq	%rcx, 8(%rax,%rdx,8)	# tmp593, x_3->fld[i_12].rtvec
	.loc 1 2655 0
	movl	$1, -116(%rbp)	#, copied_vec
.L726:
.LBE81:
	.loc 1 2657 0
	movq	-136(%rbp), %rax	# x, tmp594
	movl	-128(%rbp), %edx	# i, tmp596
	movslq	%edx, %rdx	# tmp596, tmp595
	movq	8(%rax,%rdx,8), %rax	# x_4->fld[i_12].rtvec, D.28143
	movl	-124(%rbp), %edx	# j, tmp598
	movslq	%edx, %rdx	# tmp598, tmp597
	movq	-88(%rbp), %rcx	# new, tmp599
	movq	%rcx, 8(%rax,%rdx,8)	# tmp599, _401->elem
	.loc 1 2637 0
	addl	$1, -124(%rbp)	#, j
.L725:
	.loc 1 2637 0 is_stmt 0 discriminator 1
	movq	-136(%rbp), %rax	# x, tmp600
	movl	-128(%rbp), %edx	# i, tmp602
	movslq	%edx, %rdx	# tmp602, tmp601
	movq	8(%rax,%rdx,8), %rax	# x_5->fld[i_12].rtvec, D.28143
	movl	(%rax), %eax	# _380->num_elem, D.28133
	cmpl	-124(%rbp), %eax	# j, D.28133
	jg	.L728	#,
.L724:
.LBE80:
	.loc 1 2618 0 is_stmt 1
	addl	$1, -128(%rbp)	#, i
	addq	$1, -80(%rbp)	#, fmt
.L721:
	.loc 1 2618 0 is_stmt 0 discriminator 1
	movl	-112(%rbp), %eax	# code, code.452
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.28139
	movzbl	%al, %eax	# D.28139, D.28133
	cmpl	-128(%rbp), %eax	# i, D.28133
	jg	.L729	#,
	.loc 1 2662 0 is_stmt 1
	movq	-136(%rbp), %rax	# x, D.28128
.L663:
	.loc 1 2663 0
	addq	$152, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE23:
	.size	eliminate_regs, .-eliminate_regs
	.type	elimination_effects, @function
elimination_effects:
.LFB24:
	.loc 1 2674 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# x, x
	movl	%esi, -60(%rbp)	# mem_mode, mem_mode
	.loc 1 2675 0
	movq	-56(%rbp), %rax	# x, tmp208
	movzwl	(%rax), %eax	# x_11(D)->code, D.28145
	movzwl	%ax, %eax	# D.28145, tmp209
	movl	%eax, -32(%rbp)	# tmp209, code
	.loc 1 2681 0
	movl	-32(%rbp), %eax	# code, tmp211
	subl	$36, %eax	#, tmp210
	cmpl	$95, %eax	#, tmp210
	ja	.L784	#,
	movl	%eax, %eax	# tmp210, tmp212
	movq	.L735(,%rax,8), %rax	#, tmp213
	jmp	*%rax	# tmp213
	.section	.rodata
	.align 8
	.align 4
.L735:
	.quad	.L785
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L785
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L785
	.quad	.L785
	.quad	.L784
	.quad	.L736
	.quad	.L737
	.quad	.L738
	.quad	.L784
	.quad	.L785
	.quad	.L784
	.quad	.L784
	.quad	.L785
	.quad	.L785
	.quad	.L785
	.quad	.L784
	.quad	.L785
	.quad	.L785
	.quad	.L784
	.quad	.L739
	.quad	.L784
	.quad	.L740
	.quad	.L741
	.quad	.L784
	.quad	.L742
	.quad	.L784
	.quad	.L785
	.quad	.L785
	.quad	.L743
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L741
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L741
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L744
	.quad	.L744
	.quad	.L744
	.quad	.L744
	.quad	.L744
	.quad	.L744
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L784
	.quad	.L741
	.quad	.L741
	.quad	.L741
	.quad	.L741
	.quad	.L741
	.quad	.L741
	.quad	.L741
	.quad	.L741
	.quad	.L741
	.quad	.L741
	.quad	.L741
	.quad	.L741
	.text
.L743:
	.loc 1 2698 0
	movl	$__FUNCTION__.14913, %edx	#,
	movl	$2698, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L739:
	.loc 1 2701 0
	movq	-56(%rbp), %rax	# x, tmp214
	movl	8(%rax), %eax	# x_11(D)->fld[0].rtuint, D.28146
	movl	%eax, -28(%rbp)	# D.28146, regno
	.loc 1 2705 0
	cmpl	$52, -28(%rbp)	#, regno
	jg	.L746	#,
	.loc 1 2707 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp215
	movq	%rax, -24(%rbp)	# tmp215, ep
	jmp	.L747	#
.L750:
	.loc 1 2709 0
	movq	-24(%rbp), %rax	# ep, tmp216
	movq	32(%rax), %rax	# ep_1->from_rtx, D.28148
	cmpq	-56(%rbp), %rax	# x, D.28148
	jne	.L748	#,
	.loc 1 2709 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# ep, tmp217
	movl	12(%rax), %eax	# ep_1->can_eliminate, D.28149
	testl	%eax, %eax	# D.28149
	je	.L748	#,
	.loc 1 2711 0 is_stmt 1
	cmpl	$0, -60(%rbp)	#, mem_mode
	jne	.L749	#,
	.loc 1 2712 0
	movq	-24(%rbp), %rax	# ep, tmp218
	movl	$1, 28(%rax)	#, ep_1->ref_outside_mem
	.loc 1 2713 0
	jmp	.L732	#
.L749:
	jmp	.L732	#
.L748:
	.loc 1 2708 0
	addq	$48, -24(%rbp)	#, ep
.L747:
	.loc 1 2707 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.453
	addq	$192, %rax	#, D.28147
	cmpq	-24(%rbp), %rax	# ep, D.28147
	ja	.L750	#,
	.loc 1 2721 0
	jmp	.L732	#
.L746:
	.loc 1 2717 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.454
	movl	-28(%rbp), %edx	# regno, tmp219
	movslq	%edx, %rdx	# tmp219, D.28150
	addq	%rdx, %rdx	# D.28150
	addq	%rdx, %rax	# D.28150, D.28151
	movzwl	(%rax), %eax	# *_26, D.28152
	testw	%ax, %ax	# D.28152
	jns	.L751	#,
	.loc 1 2717 0 is_stmt 0 discriminator 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.455
	testq	%rax, %rax	# reg_equiv_constant.455
	je	.L751	#,
	.loc 1 2718 0 is_stmt 1
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.456
	movl	-28(%rbp), %edx	# regno, tmp220
	movslq	%edx, %rdx	# tmp220, D.28150
	salq	$3, %rdx	#, D.28150
	addq	%rdx, %rax	# D.28150, D.28153
	movq	(%rax), %rax	# *_32, D.28148
	testq	%rax, %rax	# D.28148
	je	.L751	#,
	.loc 1 2719 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.457
	movl	-28(%rbp), %edx	# regno, tmp221
	movslq	%edx, %rdx	# tmp221, D.28150
	salq	$3, %rdx	#, D.28150
	addq	%rdx, %rax	# D.28150, D.28153
	movq	(%rax), %rax	# *_37, D.28148
	movq	%rax, %rdi	# D.28148,
	call	function_invariant_p	#
	testl	%eax, %eax	# D.28149
	jne	.L751	#,
	.loc 1 2720 0
	movq	reg_equiv_constant(%rip), %rax	# reg_equiv_constant, reg_equiv_constant.458
	movl	-28(%rbp), %edx	# regno, tmp222
	movslq	%edx, %rdx	# tmp222, D.28150
	salq	$3, %rdx	#, D.28150
	addq	%rdx, %rax	# D.28150, D.28153
	movq	(%rax), %rax	# *_43, D.28148
	movl	-60(%rbp), %edx	# mem_mode, tmp223
	movl	%edx, %esi	# tmp223,
	movq	%rax, %rdi	# D.28148,
	call	elimination_effects	#
	.loc 1 2721 0
	jmp	.L732	#
.L751:
	jmp	.L732	#
.L744:
	.loc 1 2729 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp224
	movq	%rax, -24(%rbp)	# tmp224, ep
	jmp	.L752	#
.L763:
	.loc 1 2730 0
	movq	-24(%rbp), %rax	# ep, tmp225
	movq	40(%rax), %rdx	# ep_2->to_rtx, D.28148
	movq	-56(%rbp), %rax	# x, tmp226
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	cmpq	%rax, %rdx	# D.28148, D.28148
	jne	.L753	#,
.LBB83:
	.loc 1 2732 0
	movl	-60(%rbp), %eax	# mem_mode, mem_mode.459
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28154
	movzbl	%al, %eax	# D.28154, tmp228
	movl	%eax, -36(%rbp)	# tmp228, size
	.loc 1 2736 0
	movq	-24(%rbp), %rax	# ep, tmp229
	movq	40(%rax), %rdx	# ep_2->to_rtx, D.28148
	movq	global_rtl+16(%rip), %rax	# global_rtl, D.28148
	cmpq	%rax, %rdx	# D.28148, D.28148
	jne	.L754	#,
	.loc 1 2737 0
	movl	target_flags(%rip), %eax	# target_flags, target_flags.461
	andl	$33554432, %eax	#, D.28149
	testl	%eax, %eax	# D.28149
	je	.L755	#,
	.loc 1 2737 0 is_stmt 0 discriminator 1
	movl	-36(%rbp), %eax	# size, tmp230
	addl	$7, %eax	#, D.28149
	andl	$-8, %eax	#, iftmp.460
	jmp	.L756	#
.L755:
	.loc 1 2737 0 discriminator 2
	movl	-36(%rbp), %eax	# size, tmp231
	addl	$1, %eax	#, D.28149
	andl	$-2, %eax	#, iftmp.460
.L756:
	.loc 1 2737 0 discriminator 3
	movl	%eax, -36(%rbp)	# iftmp.460, size
.L754:
	.loc 1 2739 0 is_stmt 1
	cmpl	$96, -32(%rbp)	#, code
	je	.L757	#,
	.loc 1 2739 0 is_stmt 0 discriminator 1
	cmpl	$98, -32(%rbp)	#, code
	jne	.L758	#,
.L757:
	.loc 1 2740 0 is_stmt 1
	movq	-24(%rbp), %rax	# ep, tmp232
	movl	20(%rax), %edx	# ep_2->offset, D.28149
	movl	-36(%rbp), %eax	# size, tmp233
	addl	%eax, %edx	# tmp233, D.28149
	movq	-24(%rbp), %rax	# ep, tmp234
	movl	%edx, 20(%rax)	# D.28149, ep_2->offset
	jmp	.L753	#
.L758:
	.loc 1 2741 0
	cmpl	$97, -32(%rbp)	#, code
	je	.L759	#,
	.loc 1 2741 0 is_stmt 0 discriminator 1
	cmpl	$99, -32(%rbp)	#, code
	jne	.L760	#,
.L759:
	.loc 1 2742 0 is_stmt 1
	movq	-24(%rbp), %rax	# ep, tmp235
	movl	20(%rax), %eax	# ep_2->offset, D.28149
	subl	-36(%rbp), %eax	# size, D.28149
	movl	%eax, %edx	# D.28149, D.28149
	movq	-24(%rbp), %rax	# ep, tmp236
	movl	%edx, 20(%rax)	# D.28149, ep_2->offset
	jmp	.L753	#
.L760:
	.loc 1 2743 0
	cmpl	$100, -32(%rbp)	#, code
	je	.L761	#,
	.loc 1 2743 0 is_stmt 0 discriminator 1
	cmpl	$101, -32(%rbp)	#, code
	jne	.L753	#,
.L761:
	.loc 1 2744 0 is_stmt 1
	movq	-56(%rbp), %rax	# x, tmp237
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movzwl	(%rax), %eax	# _62->code, D.28145
	cmpw	$75, %ax	#, D.28145
	jne	.L753	#,
	.loc 1 2745 0
	movq	-56(%rbp), %rax	# x, tmp238
	movq	8(%rax), %rdx	# x_11(D)->fld[0].rtx, D.28148
	movq	-56(%rbp), %rax	# x, tmp239
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movq	8(%rax), %rax	# _65->fld[0].rtx, D.28148
	cmpq	%rax, %rdx	# D.28148, D.28148
	jne	.L753	#,
	.loc 1 2746 0
	movq	-56(%rbp), %rax	# x, tmp240
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movq	16(%rax), %rax	# _67->fld[1].rtx, D.28148
	movzwl	(%rax), %eax	# _68->code, D.28145
	cmpw	$67, %ax	#, D.28145
	je	.L762	#,
	.loc 1 2746 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# x, tmp241
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movq	16(%rax), %rax	# _70->fld[1].rtx, D.28148
	movzwl	(%rax), %eax	# _71->code, D.28145
	cmpw	$68, %ax	#, D.28145
	je	.L762	#,
	movq	-56(%rbp), %rax	# x, tmp242
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movq	16(%rax), %rax	# _73->fld[1].rtx, D.28148
	movzwl	(%rax), %eax	# _74->code, D.28145
	cmpw	$54, %ax	#, D.28145
	je	.L762	#,
	movq	-56(%rbp), %rax	# x, tmp243
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movq	16(%rax), %rax	# _76->fld[1].rtx, D.28148
	movzwl	(%rax), %eax	# _77->code, D.28145
	cmpw	$55, %ax	#, D.28145
	je	.L762	#,
	movq	-56(%rbp), %rax	# x, tmp244
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movq	16(%rax), %rax	# _79->fld[1].rtx, D.28148
	movzwl	(%rax), %eax	# _80->code, D.28145
	cmpw	$58, %ax	#, D.28145
	je	.L762	#,
	movq	-56(%rbp), %rax	# x, tmp245
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movq	16(%rax), %rax	# _82->fld[1].rtx, D.28148
	movzwl	(%rax), %eax	# _83->code, D.28145
	cmpw	$134, %ax	#, D.28145
	je	.L762	#,
	movq	-56(%rbp), %rax	# x, tmp246
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movq	16(%rax), %rax	# _85->fld[1].rtx, D.28148
	movzwl	(%rax), %eax	# _86->code, D.28145
	cmpw	$56, %ax	#, D.28145
	je	.L762	#,
	movq	-56(%rbp), %rax	# x, tmp247
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movq	16(%rax), %rax	# _88->fld[1].rtx, D.28148
	movzwl	(%rax), %eax	# _89->code, D.28145
	cmpw	$140, %ax	#, D.28145
	jne	.L753	#,
.L762:
	.loc 1 2747 0 is_stmt 1
	movq	-24(%rbp), %rax	# ep, tmp248
	movl	20(%rax), %eax	# ep_2->offset, D.28149
	movl	%eax, %edx	# D.28149, D.28155
	movq	-56(%rbp), %rax	# x, tmp249
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movq	16(%rax), %rax	# _93->fld[1].rtx, D.28148
	movq	8(%rax), %rax	# _94->fld[0].rtwint, D.28156
	subl	%eax, %edx	# D.28155, D.28155
	movl	%edx, %eax	# D.28155, D.28155
	movl	%eax, %edx	# D.28155, D.28149
	movq	-24(%rbp), %rax	# ep, tmp250
	movl	%edx, 20(%rax)	# D.28149, ep_2->offset
.L753:
.LBE83:
	.loc 1 2729 0
	addq	$48, -24(%rbp)	#, ep
.L752:
	.loc 1 2729 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.462
	addq	$192, %rax	#, D.28147
	cmpq	-24(%rbp), %rax	# ep, D.28147
	ja	.L763	#,
	.loc 1 2751 0 is_stmt 1
	cmpl	$101, -32(%rbp)	#, code
	je	.L764	#,
	.loc 1 2751 0 is_stmt 0 discriminator 1
	cmpl	$100, -32(%rbp)	#, code
	je	.L764	#,
.L741:
	.loc 1 2764 0 is_stmt 1
	movq	-56(%rbp), %rax	# x, tmp251
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movl	-60(%rbp), %edx	# mem_mode, tmp252
	movl	%edx, %esi	# tmp252,
	movq	%rax, %rdi	# D.28148,
	call	elimination_effects	#
	.loc 1 2765 0
	jmp	.L732	#
.L740:
	.loc 1 2768 0
	movq	-56(%rbp), %rax	# x, tmp253
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movzwl	(%rax), %eax	# _105->code, D.28145
	cmpw	$61, %ax	#, D.28145
	jne	.L765	#,
	.loc 1 2769 0
	movq	-56(%rbp), %rax	# x, tmp254
	movzbl	2(%rax), %eax	# x_11(D)->mode, D.28154
	movzbl	%al, %eax	# D.28154, D.28149
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28154
	.loc 1 2770 0
	movq	-56(%rbp), %rax	# x, tmp256
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movzbl	2(%rax), %eax	# _110->mode, D.28154
	movzbl	%al, %eax	# D.28154, D.28149
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28154
	.loc 1 2769 0
	cmpb	%al, %dl	# D.28154, D.28154
	ja	.L765	#,
	.loc 1 2771 0
	movq	reg_equiv_memory_loc(%rip), %rax	# reg_equiv_memory_loc, reg_equiv_memory_loc.463
	testq	%rax, %rax	# reg_equiv_memory_loc.463
	je	.L765	#,
	.loc 1 2772 0
	movq	reg_equiv_memory_loc(%rip), %rdx	# reg_equiv_memory_loc, reg_equiv_memory_loc.464
	movq	-56(%rbp), %rax	# x, tmp258
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movl	8(%rax), %eax	# _116->fld[0].rtuint, D.28146
	movl	%eax, %eax	# D.28146, D.28150
	salq	$3, %rax	#, D.28150
	addq	%rdx, %rax	# reg_equiv_memory_loc.464, D.28153
	movq	(%rax), %rax	# *_120, D.28148
	testq	%rax, %rax	# D.28148
	je	.L765	#,
	.loc 1 2773 0
	jmp	.L732	#
.L765:
	.loc 1 2775 0
	movq	-56(%rbp), %rax	# x, tmp259
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movl	-60(%rbp), %edx	# mem_mode, tmp260
	movl	%edx, %esi	# tmp260,
	movq	%rax, %rdi	# D.28148,
	call	elimination_effects	#
	.loc 1 2776 0
	jmp	.L732	#
.L737:
	.loc 1 2782 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp261
	movq	%rax, -24(%rbp)	# tmp261, ep
	jmp	.L766	#
.L768:
	.loc 1 2783 0
	movq	-24(%rbp), %rax	# ep, tmp262
	movq	32(%rax), %rdx	# ep_3->from_rtx, D.28148
	movq	-56(%rbp), %rax	# x, tmp263
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	cmpq	%rax, %rdx	# D.28148, D.28148
	jne	.L767	#,
	.loc 1 2784 0
	movq	-24(%rbp), %rax	# ep, tmp264
	movl	$0, 12(%rax)	#, ep_3->can_eliminate
.L767:
	.loc 1 2782 0
	addq	$48, -24(%rbp)	#, ep
.L766:
	.loc 1 2782 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.465
	addq	$192, %rax	#, D.28147
	cmpq	-24(%rbp), %rax	# ep, D.28147
	ja	.L768	#,
	.loc 1 2786 0 is_stmt 1
	movq	-56(%rbp), %rax	# x, tmp265
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movl	-60(%rbp), %edx	# mem_mode, tmp266
	movl	%edx, %esi	# tmp266,
	movq	%rax, %rdi	# D.28148,
	call	elimination_effects	#
	.loc 1 2787 0
	jmp	.L732	#
.L738:
	.loc 1 2793 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp267
	movq	%rax, -24(%rbp)	# tmp267, ep
	jmp	.L769	#
.L771:
	.loc 1 2794 0
	movq	-24(%rbp), %rax	# ep, tmp268
	movq	40(%rax), %rdx	# ep_4->to_rtx, D.28148
	movq	-56(%rbp), %rax	# x, tmp269
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	cmpq	%rax, %rdx	# D.28148, D.28148
	jne	.L770	#,
	.loc 1 2795 0
	movq	-24(%rbp), %rax	# ep, tmp270
	movl	$0, 12(%rax)	#, ep_4->can_eliminate
.L770:
	.loc 1 2793 0
	addq	$48, -24(%rbp)	#, ep
.L769:
	.loc 1 2793 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.466
	addq	$192, %rax	#, D.28147
	cmpq	-24(%rbp), %rax	# ep, D.28147
	ja	.L771	#,
	.loc 1 2797 0 is_stmt 1
	movq	-56(%rbp), %rax	# x, tmp271
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movl	-60(%rbp), %edx	# mem_mode, tmp272
	movl	%edx, %esi	# tmp272,
	movq	%rax, %rdi	# D.28148,
	call	elimination_effects	#
	.loc 1 2798 0
	jmp	.L732	#
.L736:
	.loc 1 2802 0
	movq	-56(%rbp), %rax	# x, tmp273
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movzwl	(%rax), %eax	# _137->code, D.28145
	cmpw	$61, %ax	#, D.28145
	jne	.L772	#,
	.loc 1 2815 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp274
	movq	%rax, -24(%rbp)	# tmp274, ep
	jmp	.L773	#
.L776:
	.loc 1 2817 0
	movq	-24(%rbp), %rax	# ep, tmp275
	movq	40(%rax), %rdx	# ep_5->to_rtx, D.28148
	movq	-56(%rbp), %rax	# x, tmp276
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	cmpq	%rax, %rdx	# D.28148, D.28148
	jne	.L774	#,
	.loc 1 2818 0
	movq	-56(%rbp), %rax	# x, tmp277
	movq	8(%rax), %rdx	# x_11(D)->fld[0].rtx, D.28148
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.28148
	cmpq	%rax, %rdx	# D.28148, D.28148
	je	.L774	#,
.LBB84:
	.loc 1 2822 0
	movq	-56(%rbp), %rax	# x, tmp278
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, tmp279
	movq	%rax, -8(%rbp)	# tmp279, src
	.loc 1 2824 0
	movq	-8(%rbp), %rax	# src, tmp280
	movzwl	(%rax), %eax	# src_146->code, D.28145
	cmpw	$75, %ax	#, D.28145
	jne	.L775	#,
	.loc 1 2825 0
	movq	-8(%rbp), %rax	# src, tmp281
	movq	8(%rax), %rdx	# src_146->fld[0].rtx, D.28148
	movq	-56(%rbp), %rax	# x, tmp282
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	cmpq	%rax, %rdx	# D.28148, D.28148
	jne	.L775	#,
	.loc 1 2826 0
	movq	-8(%rbp), %rax	# src, tmp283
	movq	16(%rax), %rax	# src_146->fld[1].rtx, D.28148
	movzwl	(%rax), %eax	# _150->code, D.28145
	cmpw	$54, %ax	#, D.28145
	jne	.L775	#,
	.loc 1 2827 0
	movq	-24(%rbp), %rax	# ep, tmp284
	movl	20(%rax), %eax	# ep_5->offset, D.28149
	movl	%eax, %edx	# D.28149, D.28155
	movq	-8(%rbp), %rax	# src, tmp285
	movq	16(%rax), %rax	# src_146->fld[1].rtx, D.28148
	movq	8(%rax), %rax	# _154->fld[0].rtwint, D.28156
	subl	%eax, %edx	# D.28155, D.28155
	movl	%edx, %eax	# D.28155, D.28155
	movl	%eax, %edx	# D.28155, D.28149
	movq	-24(%rbp), %rax	# ep, tmp286
	movl	%edx, 20(%rax)	# D.28149, ep_5->offset
	jmp	.L774	#
.L775:
	.loc 1 2829 0
	movq	-24(%rbp), %rax	# ep, tmp287
	movl	$0, 12(%rax)	#, ep_5->can_eliminate
.L774:
.LBE84:
	.loc 1 2816 0
	addq	$48, -24(%rbp)	#, ep
.L773:
	.loc 1 2815 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.467
	addq	$192, %rax	#, D.28147
	cmpq	-24(%rbp), %rax	# ep, D.28147
	ja	.L776	#,
.L772:
	.loc 1 2833 0
	movq	-56(%rbp), %rax	# x, tmp288
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.28148,
	call	elimination_effects	#
	.loc 1 2834 0
	movq	-56(%rbp), %rax	# x, tmp289
	movq	16(%rax), %rax	# x_11(D)->fld[1].rtx, D.28148
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.28148,
	call	elimination_effects	#
	.loc 1 2835 0
	jmp	.L732	#
.L742:
	.loc 1 2838 0
	movq	-56(%rbp), %rax	# x, tmp290
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movzwl	(%rax), %eax	# _162->code, D.28145
	cmpw	$70, %ax	#, D.28145
	jne	.L777	#,
	.loc 1 2839 0
	movl	$__FUNCTION__.14913, %edx	#,
	movl	$2839, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L777:
	.loc 1 2843 0
	movq	-56(%rbp), %rax	# x, tmp291
	movzbl	2(%rax), %eax	# x_11(D)->mode, D.28154
	movzbl	%al, %edx	# D.28154, D.28157
	movq	-56(%rbp), %rax	# x, tmp292
	movq	8(%rax), %rax	# x_11(D)->fld[0].rtx, D.28148
	movl	%edx, %esi	# D.28157,
	movq	%rax, %rdi	# D.28148,
	call	elimination_effects	#
	.loc 1 2844 0
	jmp	.L732	#
.L784:
	.loc 1 2847 0
	nop
.L764:
	.loc 1 2850 0
	movl	-32(%rbp), %eax	# code, code.468
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp294
	movq	%rax, -16(%rbp)	# tmp294, fmt
	.loc 1 2851 0
	movl	$0, -44(%rbp)	#, i
	jmp	.L778	#
.L783:
	.loc 1 2853 0
	movq	-16(%rbp), %rax	# fmt, tmp295
	movzbl	(%rax), %eax	# *fmt_8, D.28158
	cmpb	$101, %al	#, D.28158
	jne	.L779	#,
	.loc 1 2854 0
	movq	-56(%rbp), %rax	# x, tmp296
	movl	-44(%rbp), %edx	# i, tmp298
	movslq	%edx, %rdx	# tmp298, tmp297
	movq	8(%rax,%rdx,8), %rax	# x_11(D)->fld[i_6].rtx, D.28148
	movl	-60(%rbp), %edx	# mem_mode, tmp299
	movl	%edx, %esi	# tmp299,
	movq	%rax, %rdi	# D.28148,
	call	elimination_effects	#
	jmp	.L780	#
.L779:
	.loc 1 2855 0
	movq	-16(%rbp), %rax	# fmt, tmp300
	movzbl	(%rax), %eax	# *fmt_8, D.28158
	cmpb	$69, %al	#, D.28158
	jne	.L780	#,
	.loc 1 2856 0
	movl	$0, -40(%rbp)	#, j
	jmp	.L781	#
.L782:
	.loc 1 2857 0 discriminator 2
	movq	-56(%rbp), %rax	# x, tmp301
	movl	-44(%rbp), %edx	# i, tmp303
	movslq	%edx, %rdx	# tmp303, tmp302
	movq	8(%rax,%rdx,8), %rax	# x_11(D)->fld[i_6].rtvec, D.28159
	movl	-40(%rbp), %edx	# j, tmp305
	movslq	%edx, %rdx	# tmp305, tmp304
	movq	8(%rax,%rdx,8), %rax	# _179->elem, D.28148
	movl	-60(%rbp), %edx	# mem_mode, tmp306
	movl	%edx, %esi	# tmp306,
	movq	%rax, %rdi	# D.28148,
	call	elimination_effects	#
	.loc 1 2856 0 discriminator 2
	addl	$1, -40(%rbp)	#, j
.L781:
	.loc 1 2856 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# x, tmp307
	movl	-44(%rbp), %edx	# i, tmp309
	movslq	%edx, %rdx	# tmp309, tmp308
	movq	8(%rax,%rdx,8), %rax	# x_11(D)->fld[i_6].rtvec, D.28159
	movl	(%rax), %eax	# _177->num_elem, D.28149
	cmpl	-40(%rbp), %eax	# j, D.28149
	jg	.L782	#,
.L780:
	.loc 1 2851 0 is_stmt 1
	addl	$1, -44(%rbp)	#, i
	addq	$1, -16(%rbp)	#, fmt
.L778:
	.loc 1 2851 0 is_stmt 0 discriminator 1
	movl	-32(%rbp), %eax	# code, code.469
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.28154
	movzbl	%al, %eax	# D.28154, D.28149
	cmpl	-44(%rbp), %eax	# i, D.28149
	jg	.L783	#,
	jmp	.L732	#
.L785:
	.loc 1 2695 0 is_stmt 1
	nop
.L732:
	.loc 1 2859 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE24:
	.size	elimination_effects, .-elimination_effects
	.type	check_eliminable_occurrences, @function
check_eliminable_occurrences:
.LFB25:
	.loc 1 2868 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	.loc 1 2873 0
	cmpq	$0, -40(%rbp)	#, x
	jne	.L787	#,
	.loc 1 2874 0
	jmp	.L786	#
.L787:
	.loc 1 2876 0
	movq	-40(%rbp), %rax	# x, tmp76
	movzwl	(%rax), %eax	# x_5(D)->code, D.28160
	movzwl	%ax, %eax	# D.28160, tmp77
	movl	%eax, -20(%rbp)	# tmp77, code
	.loc 1 2878 0
	cmpl	$61, -20(%rbp)	#, code
	jne	.L789	#,
	.loc 1 2878 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp78
	movl	8(%rax), %eax	# x_5(D)->fld[0].rtuint, D.28161
	cmpl	$52, %eax	#, D.28161
	ja	.L789	#,
.LBB85:
	.loc 1 2882 0 is_stmt 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp79
	movq	%rax, -8(%rbp)	# tmp79, ep
	jmp	.L790	#
.L792:
	.loc 1 2883 0
	movq	-8(%rbp), %rax	# ep, tmp80
	movq	32(%rax), %rax	# ep_3->from_rtx, D.28163
	cmpq	-40(%rbp), %rax	# x, D.28163
	jne	.L791	#,
	.loc 1 2883 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# ep, tmp81
	movl	12(%rax), %eax	# ep_3->can_eliminate, D.28164
	testl	%eax, %eax	# D.28164
	je	.L791	#,
	.loc 1 2884 0 is_stmt 1
	movq	-8(%rbp), %rax	# ep, tmp82
	movl	$0, 12(%rax)	#, ep_3->can_eliminate
.L791:
	.loc 1 2882 0
	addq	$48, -8(%rbp)	#, ep
.L790:
	.loc 1 2882 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.470
	addq	$192, %rax	#, D.28162
	cmpq	-8(%rbp), %rax	# ep, D.28162
	ja	.L792	#,
	.loc 1 2885 0 is_stmt 1
	jmp	.L786	#
.L789:
.LBE85:
	.loc 1 2888 0
	movl	-20(%rbp), %eax	# code, code.471
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp84
	movq	%rax, -16(%rbp)	# tmp84, fmt
	.loc 1 2889 0
	movl	$0, -28(%rbp)	#, i
	jmp	.L793	#
.L798:
	.loc 1 2891 0
	movq	-16(%rbp), %rax	# fmt, tmp85
	movzbl	(%rax), %eax	# *fmt_1, D.28166
	cmpb	$101, %al	#, D.28166
	jne	.L794	#,
	.loc 1 2892 0
	movq	-40(%rbp), %rax	# x, tmp86
	movl	-28(%rbp), %edx	# i, tmp88
	movslq	%edx, %rdx	# tmp88, tmp87
	movq	8(%rax,%rdx,8), %rax	# x_5(D)->fld[i_2].rtx, D.28163
	movq	%rax, %rdi	# D.28163,
	call	check_eliminable_occurrences	#
	jmp	.L795	#
.L794:
	.loc 1 2893 0
	movq	-16(%rbp), %rax	# fmt, tmp89
	movzbl	(%rax), %eax	# *fmt_1, D.28166
	cmpb	$69, %al	#, D.28166
	jne	.L795	#,
.LBB86:
	.loc 1 2896 0
	movl	$0, -24(%rbp)	#, j
	jmp	.L796	#
.L797:
	.loc 1 2897 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp90
	movl	-28(%rbp), %edx	# i, tmp92
	movslq	%edx, %rdx	# tmp92, tmp91
	movq	8(%rax,%rdx,8), %rax	# x_5(D)->fld[i_2].rtvec, D.28167
	movl	-24(%rbp), %edx	# j, tmp94
	movslq	%edx, %rdx	# tmp94, tmp93
	movq	8(%rax,%rdx,8), %rax	# _27->elem, D.28163
	movq	%rax, %rdi	# D.28163,
	call	check_eliminable_occurrences	#
	.loc 1 2896 0 discriminator 2
	addl	$1, -24(%rbp)	#, j
.L796:
	.loc 1 2896 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp95
	movl	-28(%rbp), %edx	# i, tmp97
	movslq	%edx, %rdx	# tmp97, tmp96
	movq	8(%rax,%rdx,8), %rax	# x_5(D)->fld[i_2].rtvec, D.28167
	movl	(%rax), %eax	# _25->num_elem, D.28164
	cmpl	-24(%rbp), %eax	# j, D.28164
	jg	.L797	#,
.L795:
.LBE86:
	.loc 1 2889 0 is_stmt 1
	addl	$1, -28(%rbp)	#, i
	addq	$1, -16(%rbp)	#, fmt
.L793:
	.loc 1 2889 0 is_stmt 0 discriminator 1
	movl	-20(%rbp), %eax	# code, code.472
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.28165
	movzbl	%al, %eax	# D.28165, D.28164
	cmpl	-28(%rbp), %eax	# i, D.28164
	jg	.L798	#,
.L786:
	.loc 1 2900 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE25:
	.size	check_eliminable_occurrences, .-check_eliminable_occurrences
	.type	eliminate_regs_in_insn, @function
eliminate_regs_in_insn:
.LFB26:
	.loc 1 2919 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$632, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -632(%rbp)	# insn, insn
	movl	%esi, -636(%rbp)	# replace, replace
	.loc 1 2920 0
	movq	-632(%rbp), %rax	# insn, tmp272
	movl	40(%rax), %eax	# insn_34(D)->fld[4].rtint, D.28168
	testl	%eax, %eax	# D.28168
	js	.L800	#,
	.loc 1 2920 0 is_stmt 0 discriminator 1
	movq	-632(%rbp), %rax	# insn, tmp273
	movl	40(%rax), %eax	# insn_34(D)->fld[4].rtint, iftmp.473
	jmp	.L801	#
.L800:
	.loc 1 2920 0 discriminator 2
	movq	-632(%rbp), %rax	# insn, tmp274
	movq	%rax, %rdi	# tmp274,
	call	recog_memoized_1	#
.L801:
	.loc 1 2920 0 discriminator 3
	movl	%eax, -604(%rbp)	# iftmp.473, icode
	.loc 1 2921 0 is_stmt 1 discriminator 3
	movq	-632(%rbp), %rax	# insn, tmp275
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, tmp276
	movq	%rax, -552(%rbp)	# tmp276, old_body
	.loc 1 2922 0 discriminator 3
	movq	-552(%rbp), %rax	# old_body, tmp277
	movq	%rax, %rdi	# tmp277,
	call	asm_noperands	#
	notl	%eax	# tmp278
	shrl	$31, %eax	#, tmp279
	movzbl	%al, %eax	# D.28169, tmp280
	movl	%eax, -600(%rbp)	# tmp280, insn_is_asm
	.loc 1 2923 0 discriminator 3
	movq	-632(%rbp), %rax	# insn, tmp281
	movzwl	(%rax), %eax	# insn_34(D)->code, D.28170
	movzwl	%ax, %eax	# D.28170, D.28168
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28171
	cmpb	$105, %al	#, D.28171
	jne	.L802	#,
	.loc 1 2923 0 is_stmt 0 discriminator 1
	movq	-632(%rbp), %rax	# insn, tmp283
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	movzwl	(%rax), %eax	# _46->code, D.28170
	cmpw	$47, %ax	#, D.28170
	jne	.L803	#,
	.loc 1 2923 0 discriminator 3
	movq	-632(%rbp), %rax	# insn, tmp284
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, iftmp.475
	jmp	.L805	#
.L803:
	.loc 1 2923 0 discriminator 4
	movq	-632(%rbp), %rax	# insn, tmp285
	movq	32(%rax), %rdx	# insn_34(D)->fld[3].rtx, D.28172
	movq	-632(%rbp), %rax	# insn, tmp286
	movq	%rdx, %rsi	# D.28172,
	movq	%rax, %rdi	# tmp286,
	call	single_set_2	#
	jmp	.L805	#
.L802:
	.loc 1 2923 0 discriminator 2
	movl	$0, %eax	#, iftmp.474
.L805:
	.loc 1 2923 0 discriminator 5
	movq	%rax, -544(%rbp)	# iftmp.474, old_set
	.loc 1 2925 0 is_stmt 1 discriminator 5
	movl	$0, -616(%rbp)	#, val
	.loc 1 2931 0 discriminator 5
	cmpl	$0, -600(%rbp)	#, insn_is_asm
	jne	.L806	#,
	.loc 1 2931 0 is_stmt 0 discriminator 1
	cmpl	$0, -604(%rbp)	#, icode
	jns	.L806	#,
	.loc 1 2933 0 is_stmt 1
	movq	-632(%rbp), %rax	# insn, tmp287
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	movzwl	(%rax), %eax	# _55->code, D.28170
	cmpw	$48, %ax	#, D.28170
	je	.L807	#,
	.loc 1 2934 0
	movq	-632(%rbp), %rax	# insn, tmp288
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	movzwl	(%rax), %eax	# _57->code, D.28170
	cmpw	$49, %ax	#, D.28170
	je	.L807	#,
	.loc 1 2935 0
	movq	-632(%rbp), %rax	# insn, tmp289
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	movzwl	(%rax), %eax	# _59->code, D.28170
	cmpw	$44, %ax	#, D.28170
	je	.L807	#,
	.loc 1 2936 0
	movq	-632(%rbp), %rax	# insn, tmp290
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	movzwl	(%rax), %eax	# _61->code, D.28170
	cmpw	$45, %ax	#, D.28170
	je	.L807	#,
	.loc 1 2937 0
	movq	-632(%rbp), %rax	# insn, tmp291
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	movzwl	(%rax), %eax	# _63->code, D.28170
	cmpw	$40, %ax	#, D.28170
	jne	.L808	#,
.L807:
	.loc 1 2938 0
	movl	$0, %eax	#, D.28168
	jmp	.L877	#
.L808:
	.loc 1 2939 0
	movl	$__FUNCTION__.14998, %edx	#,
	movl	$2939, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L806:
	.loc 1 2942 0
	cmpq	$0, -544(%rbp)	#, old_set
	je	.L810	#,
	.loc 1 2942 0 is_stmt 0 discriminator 1
	movq	-544(%rbp), %rax	# old_set, tmp292
	movq	8(%rax), %rax	# old_set_53->fld[0].rtx, D.28172
	movzwl	(%rax), %eax	# _66->code, D.28170
	cmpw	$61, %ax	#, D.28170
	jne	.L810	#,
	.loc 1 2943 0 is_stmt 1
	movq	-544(%rbp), %rax	# old_set, tmp293
	movq	8(%rax), %rax	# old_set_53->fld[0].rtx, D.28172
	movl	8(%rax), %eax	# _68->fld[0].rtuint, D.28173
	cmpl	$52, %eax	#, D.28173
	ja	.L810	#,
	.loc 1 2946 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp294
	movq	%rax, -576(%rbp)	# tmp294, ep
	jmp	.L811	#
.L830:
	.loc 1 2947 0
	movq	-576(%rbp), %rax	# ep, tmp295
	movq	32(%rax), %rdx	# ep_16->from_rtx, D.28172
	movq	-544(%rbp), %rax	# old_set, tmp296
	movq	8(%rax), %rax	# old_set_53->fld[0].rtx, D.28172
	cmpq	%rax, %rdx	# D.28172, D.28172
	jne	.L812	#,
	.loc 1 2947 0 is_stmt 0 discriminator 1
	movq	-576(%rbp), %rax	# ep, tmp297
	movl	12(%rax), %eax	# ep_16->can_eliminate, D.28168
	testl	%eax, %eax	# D.28168
	je	.L812	#,
	.loc 1 2955 0 is_stmt 1
	movq	-576(%rbp), %rax	# ep, tmp298
	movl	(%rax), %eax	# ep_16->from, D.28168
	cmpl	$20, %eax	#, D.28168
	jne	.L813	#,
	.loc 1 2956 0
	movq	-576(%rbp), %rax	# ep, tmp299
	movl	4(%rax), %eax	# ep_16->to, D.28168
	cmpl	$6, %eax	#, D.28168
	jne	.L813	#,
.LBB87:
	.loc 1 2958 0
	movq	-544(%rbp), %rax	# old_set, tmp300
	movq	16(%rax), %rax	# old_set_53->fld[1].rtx, tmp301
	movq	%rax, -568(%rbp)	# tmp301, base
	.loc 1 2959 0
	movq	-632(%rbp), %rax	# insn, tmp302
	movq	%rax, -560(%rbp)	# tmp302, base_insn
	.loc 1 2960 0
	movl	$0, -608(%rbp)	#, offset
	.loc 1 2962 0
	jmp	.L814	#
.L821:
.LBB88:
	.loc 1 2966 0
	movq	-568(%rbp), %rax	# base, tmp303
	movzwl	(%rax), %eax	# base_20->code, D.28170
	cmpw	$75, %ax	#, D.28170
	jne	.L815	#,
	.loc 1 2967 0
	movq	-568(%rbp), %rax	# base, tmp304
	movq	16(%rax), %rax	# base_20->fld[1].rtx, D.28172
	movzwl	(%rax), %eax	# _83->code, D.28170
	cmpw	$54, %ax	#, D.28170
	jne	.L815	#,
	.loc 1 2969 0
	movq	-568(%rbp), %rax	# base, tmp305
	movq	16(%rax), %rax	# base_20->fld[1].rtx, D.28172
	movq	8(%rax), %rax	# _85->fld[0].rtwint, D.28175
	movl	%eax, %edx	# D.28175, D.28176
	movl	-608(%rbp), %eax	# offset, offset.476
	addl	%edx, %eax	# D.28176, D.28176
	movl	%eax, -608(%rbp)	# D.28176, offset
	.loc 1 2970 0
	movq	-568(%rbp), %rax	# base, tmp306
	movq	8(%rax), %rax	# base_20->fld[0].rtx, tmp307
	movq	%rax, -568(%rbp)	# tmp307, base
	jmp	.L814	#
.L815:
	.loc 1 2972 0
	movq	-560(%rbp), %rax	# base_insn, tmp308
	movq	%rax, %rdi	# tmp308,
	call	prev_nonnote_insn	#
	movq	%rax, -536(%rbp)	# tmp309, prev_insn
	cmpq	$0, -536(%rbp)	#, prev_insn
	je	.L816	#,
	.loc 1 2973 0
	movq	-536(%rbp), %rax	# prev_insn, tmp310
	movzwl	(%rax), %eax	# prev_insn_92->code, D.28170
	movzwl	%ax, %eax	# D.28170, D.28168
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28171
	cmpb	$105, %al	#, D.28171
	jne	.L817	#,
	.loc 1 2973 0 is_stmt 0 discriminator 1
	movq	-536(%rbp), %rax	# prev_insn, tmp312
	movq	32(%rax), %rax	# prev_insn_92->fld[3].rtx, D.28172
	movzwl	(%rax), %eax	# _96->code, D.28170
	cmpw	$47, %ax	#, D.28170
	jne	.L818	#,
	.loc 1 2973 0 discriminator 3
	movq	-536(%rbp), %rax	# prev_insn, tmp313
	movq	32(%rax), %rax	# prev_insn_92->fld[3].rtx, iftmp.478
	jmp	.L820	#
.L818:
	.loc 1 2973 0 discriminator 4
	movq	-536(%rbp), %rax	# prev_insn, tmp314
	movq	32(%rax), %rdx	# prev_insn_92->fld[3].rtx, D.28172
	movq	-536(%rbp), %rax	# prev_insn, tmp315
	movq	%rdx, %rsi	# D.28172,
	movq	%rax, %rdi	# tmp315,
	call	single_set_2	#
	jmp	.L820	#
.L817:
	.loc 1 2973 0 discriminator 2
	movl	$0, %eax	#, iftmp.477
.L820:
	.loc 1 2973 0 discriminator 5
	movq	%rax, -528(%rbp)	# iftmp.477, prev_set
	cmpq	$0, -528(%rbp)	#, prev_set
	je	.L816	#,
	.loc 1 2974 0 is_stmt 1
	movq	-528(%rbp), %rax	# prev_set, tmp316
	movq	8(%rax), %rax	# prev_set_103->fld[0].rtx, D.28172
	movq	-568(%rbp), %rdx	# base, tmp317
	movq	%rdx, %rsi	# tmp317,
	movq	%rax, %rdi	# D.28172,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28168
	je	.L816	#,
	.loc 1 2976 0
	movq	-528(%rbp), %rax	# prev_set, tmp318
	movq	16(%rax), %rax	# prev_set_103->fld[1].rtx, tmp319
	movq	%rax, -568(%rbp)	# tmp319, base
	.loc 1 2977 0
	movq	-536(%rbp), %rax	# prev_insn, tmp320
	movq	%rax, -560(%rbp)	# tmp320, base_insn
.L814:
.LBE88:
	.loc 1 2962 0 discriminator 1
	movq	-576(%rbp), %rax	# ep, tmp321
	movq	40(%rax), %rax	# ep_16->to_rtx, D.28172
	cmpq	-568(%rbp), %rax	# base, D.28172
	jne	.L821	#,
.L816:
	.loc 1 2983 0
	movq	-576(%rbp), %rax	# ep, tmp322
	movq	40(%rax), %rax	# ep_16->to_rtx, D.28172
	cmpq	-568(%rbp), %rax	# base, D.28172
	jne	.L813	#,
.LBB89:
	.loc 1 2986 0
	movq	-576(%rbp), %rax	# ep, tmp323
	movl	20(%rax), %eax	# ep_16->offset, D.28168
	movl	-608(%rbp), %edx	# offset, tmp324
	subl	%eax, %edx	# D.28168, D.28168
	movl	%edx, %eax	# D.28168, D.28168
	movslq	%eax, %rdx	# D.28168, D.28175
	movq	-576(%rbp), %rax	# ep, tmp325
	movq	40(%rax), %rax	# ep_16->to_rtx, D.28172
	.loc 1 2985 0
	movq	%rdx, %rsi	# D.28175,
	movq	%rax, %rdi	# D.28172,
	call	plus_constant_wide	#
	movq	%rax, -520(%rbp)	# tmp326, src
	.loc 1 2988 0
	movq	-552(%rbp), %rax	# old_body, tmp327
	movq	%rax, -584(%rbp)	# tmp327, new_body
	.loc 1 2989 0
	cmpl	$0, -636(%rbp)	#, replace
	jne	.L822	#,
	.loc 1 2991 0
	movq	-552(%rbp), %rax	# old_body, tmp328
	movq	%rax, %rdi	# tmp328,
	call	copy_insn	#
	movq	%rax, -584(%rbp)	# tmp329, new_body
	.loc 1 2992 0
	movq	-632(%rbp), %rax	# insn, tmp330
	movq	56(%rax), %rax	# insn_34(D)->fld[6].rtx, D.28172
	testq	%rax, %rax	# D.28172
	je	.L822	#,
	.loc 1 2993 0
	movq	-632(%rbp), %rax	# insn, tmp331
	movq	56(%rax), %rax	# insn_34(D)->fld[6].rtx, D.28172
	movq	%rax, %rdi	# D.28172,
	call	copy_insn_1	#
	movq	-632(%rbp), %rdx	# insn, tmp332
	movq	%rax, 56(%rdx)	# D.28172, insn_34(D)->fld[6].rtx
.L822:
	.loc 1 2995 0
	movq	-632(%rbp), %rax	# insn, tmp333
	movq	-584(%rbp), %rdx	# new_body, tmp334
	movq	%rdx, 32(%rax)	# tmp334, insn_34(D)->fld[3].rtx
	.loc 1 2996 0
	movq	-632(%rbp), %rax	# insn, tmp335
	movzwl	(%rax), %eax	# insn_34(D)->code, D.28170
	movzwl	%ax, %eax	# D.28170, D.28168
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28171
	cmpb	$105, %al	#, D.28171
	jne	.L823	#,
	.loc 1 2996 0 is_stmt 0 discriminator 1
	movq	-632(%rbp), %rax	# insn, tmp337
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	movzwl	(%rax), %eax	# _123->code, D.28170
	cmpw	$47, %ax	#, D.28170
	jne	.L824	#,
	.loc 1 2996 0 discriminator 3
	movq	-632(%rbp), %rax	# insn, tmp338
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, iftmp.480
	jmp	.L826	#
.L824:
	.loc 1 2996 0 discriminator 4
	movq	-632(%rbp), %rax	# insn, tmp339
	movq	32(%rax), %rdx	# insn_34(D)->fld[3].rtx, D.28172
	movq	-632(%rbp), %rax	# insn, tmp340
	movq	%rdx, %rsi	# D.28172,
	movq	%rax, %rdi	# tmp340,
	call	single_set_2	#
	jmp	.L826	#
.L823:
	.loc 1 2996 0 discriminator 2
	movl	$0, %eax	#, iftmp.479
.L826:
	.loc 1 2996 0 discriminator 5
	movq	%rax, -544(%rbp)	# iftmp.479, old_set
	.loc 1 3001 0 is_stmt 1 discriminator 5
	movq	-544(%rbp), %rax	# old_set, tmp341
	leaq	16(%rax), %rsi	#, D.28177
	movq	-520(%rbp), %rdx	# src, tmp342
	movq	-632(%rbp), %rax	# insn, tmp343
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp343,
	call	validate_change	#
	.loc 1 3002 0 discriminator 5
	movq	-576(%rbp), %rax	# ep, tmp344
	movq	40(%rax), %rdx	# ep_16->to_rtx, D.28172
	movq	-544(%rbp), %rax	# old_set, tmp345
	leaq	8(%rax), %rsi	#, D.28177
	movq	-632(%rbp), %rax	# insn, tmp346
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp346,
	call	validate_change	#
	.loc 1 3004 0 discriminator 5
	call	apply_change_group	#
	testl	%eax, %eax	# D.28168
	jne	.L827	#,
	.loc 1 3006 0
	movq	-544(%rbp), %rax	# old_set, tmp347
	movq	-520(%rbp), %rdx	# src, tmp348
	movq	%rdx, 16(%rax)	# tmp348, old_set_130->fld[1].rtx
	.loc 1 3007 0
	movq	-576(%rbp), %rax	# ep, tmp349
	movq	40(%rax), %rdx	# ep_16->to_rtx, D.28172
	movq	-544(%rbp), %rax	# old_set, tmp350
	movq	%rdx, 8(%rax)	# D.28172, old_set_130->fld[0].rtx
.L827:
	.loc 1 3010 0
	movl	$1, -616(%rbp)	#, val
	.loc 1 3011 0
	jmp	.L828	#
.L813:
.LBE89:
.LBE87:
	.loc 1 3022 0
	cmpl	$0, -636(%rbp)	#, replace
	je	.L829	#,
	.loc 1 3024 0
	movq	-632(%rbp), %rax	# insn, tmp351
	movq	%rax, %rdi	# tmp351,
	call	delete_dead_insn	#
	.loc 1 3025 0
	movl	$1, %eax	#, D.28168
	jmp	.L877	#
.L829:
	.loc 1 3027 0
	movl	$1, -616(%rbp)	#, val
	.loc 1 3028 0
	jmp	.L828	#
.L812:
	.loc 1 2946 0
	addq	$48, -576(%rbp)	#, ep
.L811:
	.loc 1 2946 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.481
	addq	$192, %rax	#, D.28174
	cmpq	-576(%rbp), %rax	# ep, D.28174
	ja	.L830	#,
.L810:
	.loc 1 3035 0 is_stmt 1
	cmpq	$0, -544(%rbp)	#, old_set
	je	.L831	#,
	.loc 1 3036 0
	movq	-544(%rbp), %rax	# old_set, tmp352
	movq	8(%rax), %rax	# old_set_53->fld[0].rtx, D.28172
	movzwl	(%rax), %eax	# _140->code, D.28170
	cmpw	$61, %ax	#, D.28170
	jne	.L831	#,
	.loc 1 3037 0
	movq	-544(%rbp), %rax	# old_set, tmp353
	movq	16(%rax), %rax	# old_set_53->fld[1].rtx, D.28172
	movzwl	(%rax), %eax	# _142->code, D.28170
	cmpw	$75, %ax	#, D.28170
	jne	.L831	#,
	.loc 1 3038 0
	movq	-544(%rbp), %rax	# old_set, tmp354
	movq	16(%rax), %rax	# old_set_53->fld[1].rtx, D.28172
	movq	8(%rax), %rax	# _144->fld[0].rtx, D.28172
	movzwl	(%rax), %eax	# _145->code, D.28170
	cmpw	$61, %ax	#, D.28170
	jne	.L831	#,
	.loc 1 3039 0
	movq	-544(%rbp), %rax	# old_set, tmp355
	movq	16(%rax), %rax	# old_set_53->fld[1].rtx, D.28172
	movq	16(%rax), %rax	# _147->fld[1].rtx, D.28172
	movzwl	(%rax), %eax	# _148->code, D.28170
	cmpw	$54, %ax	#, D.28170
	jne	.L831	#,
	.loc 1 3040 0
	movq	-544(%rbp), %rax	# old_set, tmp356
	movq	16(%rax), %rax	# old_set_53->fld[1].rtx, D.28172
	movq	8(%rax), %rax	# _150->fld[0].rtx, D.28172
	movl	8(%rax), %eax	# _151->fld[0].rtuint, D.28173
	cmpl	$52, %eax	#, D.28173
	ja	.L831	#,
.LBB90:
	.loc 1 3042 0
	movq	-544(%rbp), %rax	# old_set, tmp357
	movq	16(%rax), %rax	# old_set_53->fld[1].rtx, D.28172
	movq	8(%rax), %rax	# _153->fld[0].rtx, tmp358
	movq	%rax, -512(%rbp)	# tmp358, reg
	.loc 1 3043 0
	movq	-544(%rbp), %rax	# old_set, tmp359
	movq	16(%rax), %rax	# old_set_53->fld[1].rtx, D.28172
	movq	16(%rax), %rax	# _155->fld[1].rtx, D.28172
	movq	8(%rax), %rax	# _156->fld[0].rtwint, D.28175
	movl	%eax, -596(%rbp)	# D.28175, offset
	.loc 1 3045 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp360
	movq	%rax, -576(%rbp)	# tmp360, ep
	jmp	.L832	#
.L843:
	.loc 1 3046 0
	movq	-576(%rbp), %rax	# ep, tmp361
	movq	32(%rax), %rax	# ep_17->from_rtx, D.28172
	cmpq	-512(%rbp), %rax	# reg, D.28172
	jne	.L833	#,
	.loc 1 3046 0 is_stmt 0 discriminator 1
	movq	-576(%rbp), %rax	# ep, tmp362
	movl	12(%rax), %eax	# ep_17->can_eliminate, D.28168
	testl	%eax, %eax	# D.28168
	je	.L833	#,
	.loc 1 3048 0 is_stmt 1
	movq	-576(%rbp), %rax	# ep, tmp363
	movl	20(%rax), %eax	# ep_17->offset, D.28168
	addl	%eax, -596(%rbp)	# D.28168, offset
	.loc 1 3050 0
	cmpl	$0, -596(%rbp)	#, offset
	jne	.L834	#,
.LBB91:
	.loc 1 3057 0
	movq	-576(%rbp), %rax	# ep, tmp364
	movq	40(%rax), %rdx	# ep_17->to_rtx, D.28172
	movq	-544(%rbp), %rax	# old_set, tmp365
	movq	8(%rax), %rax	# old_set_53->fld[0].rtx, D.28172
	movq	%rdx, %rcx	# D.28172,
	movq	%rax, %rdx	# D.28172,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-632(%rbp), %rdx	# insn, tmp366
	movq	%rax, 32(%rdx)	# D.28172, insn_34(D)->fld[3].rtx
	.loc 1 3060 0
	movl	$0, -256(%rbp)	#, num_clobbers
	.loc 1 3061 0
	movq	-632(%rbp), %rax	# insn, tmp367
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	leaq	-256(%rbp), %rdx	#, tmp368
	movq	-632(%rbp), %rcx	# insn, tmp369
	movq	%rcx, %rsi	# tmp369,
	movq	%rax, %rdi	# D.28172,
	call	recog	#
	movq	-632(%rbp), %rdx	# insn, tmp370
	movl	%eax, 40(%rdx)	# D.28168, insn_34(D)->fld[4].rtint
	.loc 1 3062 0
	movl	-256(%rbp), %eax	# num_clobbers, num_clobbers.482
	testl	%eax, %eax	# num_clobbers.482
	je	.L835	#,
.LBB92:
	.loc 1 3064 0
	movl	-256(%rbp), %eax	# num_clobbers, num_clobbers.483
	addl	$1, %eax	#, D.28168
	movl	%eax, %edi	# D.28168,
	call	rtvec_alloc	#
	movq	%rax, -504(%rbp)	# tmp371, vec
	.loc 1 3066 0
	movq	-632(%rbp), %rax	# insn, tmp372
	movq	32(%rax), %rdx	# insn_34(D)->fld[3].rtx, D.28172
	movq	-504(%rbp), %rax	# vec, tmp373
	movq	%rdx, 8(%rax)	# D.28172, vec_174->elem
	.loc 1 3067 0
	movq	-504(%rbp), %rax	# vec, tmp374
	movq	%rax, %rdx	# tmp374,
	movl	$0, %esi	#,
	movl	$39, %edi	#,
	call	gen_rtx_fmt_E	#
	movq	-632(%rbp), %rdx	# insn, tmp375
	movq	%rax, 32(%rdx)	# D.28172, insn_34(D)->fld[3].rtx
	.loc 1 3068 0
	movq	-632(%rbp), %rax	# insn, tmp376
	movl	40(%rax), %edx	# insn_34(D)->fld[4].rtint, D.28168
	movq	-632(%rbp), %rax	# insn, tmp377
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	movl	%edx, %esi	# D.28168,
	movq	%rax, %rdi	# D.28172,
	call	add_clobbers	#
.L835:
.LBE92:
	.loc 1 3070 0
	movq	-632(%rbp), %rax	# insn, tmp378
	movl	40(%rax), %eax	# insn_34(D)->fld[4].rtint, D.28168
	testl	%eax, %eax	# D.28168
	jns	.L836	#,
	.loc 1 3071 0
	movl	$__FUNCTION__.14998, %edx	#,
	movl	$3071, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L836:
.LBE91:
	jmp	.L837	#
.L834:
	.loc 1 3075 0
	movq	-552(%rbp), %rax	# old_body, tmp379
	movq	%rax, -584(%rbp)	# tmp379, new_body
	.loc 1 3076 0
	cmpl	$0, -636(%rbp)	#, replace
	jne	.L838	#,
	.loc 1 3078 0
	movq	-552(%rbp), %rax	# old_body, tmp380
	movq	%rax, %rdi	# tmp380,
	call	copy_insn	#
	movq	%rax, -584(%rbp)	# tmp381, new_body
	.loc 1 3079 0
	movq	-632(%rbp), %rax	# insn, tmp382
	movq	56(%rax), %rax	# insn_34(D)->fld[6].rtx, D.28172
	testq	%rax, %rax	# D.28172
	je	.L838	#,
	.loc 1 3080 0
	movq	-632(%rbp), %rax	# insn, tmp383
	movq	56(%rax), %rax	# insn_34(D)->fld[6].rtx, D.28172
	movq	%rax, %rdi	# D.28172,
	call	copy_insn_1	#
	movq	-632(%rbp), %rdx	# insn, tmp384
	movq	%rax, 56(%rdx)	# D.28172, insn_34(D)->fld[6].rtx
.L838:
	.loc 1 3082 0
	movq	-632(%rbp), %rax	# insn, tmp385
	movq	-584(%rbp), %rdx	# new_body, tmp386
	movq	%rdx, 32(%rax)	# tmp386, insn_34(D)->fld[3].rtx
	.loc 1 3083 0
	movq	-632(%rbp), %rax	# insn, tmp387
	movzwl	(%rax), %eax	# insn_34(D)->code, D.28170
	movzwl	%ax, %eax	# D.28170, D.28168
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28171
	cmpb	$105, %al	#, D.28171
	jne	.L839	#,
	.loc 1 3083 0 is_stmt 0 discriminator 1
	movq	-632(%rbp), %rax	# insn, tmp389
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	movzwl	(%rax), %eax	# _188->code, D.28170
	cmpw	$47, %ax	#, D.28170
	jne	.L840	#,
	.loc 1 3083 0 discriminator 3
	movq	-632(%rbp), %rax	# insn, tmp390
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, iftmp.485
	jmp	.L842	#
.L840:
	.loc 1 3083 0 discriminator 4
	movq	-632(%rbp), %rax	# insn, tmp391
	movq	32(%rax), %rdx	# insn_34(D)->fld[3].rtx, D.28172
	movq	-632(%rbp), %rax	# insn, tmp392
	movq	%rdx, %rsi	# D.28172,
	movq	%rax, %rdi	# tmp392,
	call	single_set_2	#
	jmp	.L842	#
.L839:
	.loc 1 3083 0 discriminator 2
	movl	$0, %eax	#, iftmp.484
.L842:
	.loc 1 3083 0 discriminator 5
	movq	%rax, -544(%rbp)	# iftmp.484, old_set
	.loc 1 3085 0 is_stmt 1 discriminator 5
	movq	-544(%rbp), %rax	# old_set, tmp393
	movq	16(%rax), %rax	# old_set_195->fld[1].rtx, D.28172
	movq	-576(%rbp), %rdx	# ep, tmp394
	movq	40(%rdx), %rdx	# ep_17->to_rtx, D.28172
	movq	%rdx, 8(%rax)	# D.28172, _196->fld[0].rtx
	.loc 1 3086 0 discriminator 5
	movq	-544(%rbp), %rax	# old_set, tmp395
	movq	16(%rax), %rbx	# old_set_195->fld[1].rtx, D.28172
	movl	-596(%rbp), %eax	# offset, tmp396
	cltq
	movq	%rax, %rsi	# D.28175,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, 16(%rbx)	# D.28172, _198->fld[1].rtx
.L837:
	.loc 1 3088 0
	movl	$1, -616(%rbp)	#, val
	.loc 1 3091 0
	jmp	.L828	#
.L833:
	.loc 1 3045 0
	addq	$48, -576(%rbp)	#, ep
.L832:
	.loc 1 3045 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.486
	addq	$192, %rax	#, D.28174
	cmpq	-576(%rbp), %rax	# ep, D.28174
	ja	.L843	#,
.L831:
.LBE90:
	.loc 1 3096 0 is_stmt 1
	movq	-552(%rbp), %rax	# old_body, tmp397
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp397,
	call	elimination_effects	#
	.loc 1 3100 0
	movq	-632(%rbp), %rax	# insn, tmp398
	movq	%rax, %rdi	# tmp398,
	call	extract_insn	#
	.loc 1 3101 0
	movl	$0, -592(%rbp)	#, any_changes
	.loc 1 3102 0
	movl	$0, -612(%rbp)	#, i
	jmp	.L844	#
.L854:
	.loc 1 3104 0
	movl	-612(%rbp), %eax	# i, tmp400
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.28172
	movl	-612(%rbp), %eax	# i, tmp402
	cltq
	movq	%rdx, -256(%rbp,%rax,8)	# D.28172, orig_operand
	.loc 1 3105 0
	movl	-612(%rbp), %eax	# i, tmp404
	cltq
	movq	recog_data(,%rax,8), %rdx	# recog_data.operand, D.28172
	movl	-612(%rbp), %eax	# i, tmp406
	cltq
	movq	%rdx, -496(%rbp,%rax,8)	# D.28172, substed_operand
	.loc 1 3108 0
	cmpl	$0, -600(%rbp)	#, insn_is_asm
	jne	.L845	#,
	.loc 1 3108 0 is_stmt 0 discriminator 1
	movl	-604(%rbp), %eax	# icode, tmp408
	movslq	%eax, %rdx	# tmp408, tmp407
	movq	%rdx, %rax	# tmp407, tmp409
	salq	$2, %rax	#, tmp409
	addq	%rdx, %rax	# tmp407, tmp409
	salq	$3, %rax	#, tmp410
	addq	$insn_data+24, %rax	#, tmp411
	movq	(%rax), %rcx	# insn_data[icode_38].operand, D.28178
	movl	-612(%rbp), %eax	# i, tmp412
	movslq	%eax, %rdx	# tmp412, D.28179
	movq	%rdx, %rax	# D.28179, tmp413
	addq	%rax, %rax	# tmp413
	addq	%rdx, %rax	# D.28179, tmp413
	salq	$3, %rax	#, tmp414
	addq	%rcx, %rax	# D.28178, D.28178
	movzbl	19(%rax), %eax	# _212->eliminable, D.28171
	testb	%al, %al	# D.28171
	je	.L846	#,
.L845:
	.loc 1 3111 0 is_stmt 1
	movl	-612(%rbp), %eax	# i, tmp416
	cltq
	addq	$208, %rax	#, tmp417
	movl	recog_data+8(,%rax,4), %eax	# recog_data.operand_type, D.28180
	testl	%eax, %eax	# D.28180
	je	.L847	#,
	.loc 1 3112 0
	movl	-612(%rbp), %eax	# i, tmp419
	cltq
	movq	-256(%rbp,%rax,8), %rax	# orig_operand, D.28172
	movzwl	(%rax), %eax	# _215->code, D.28170
	cmpw	$61, %ax	#, D.28170
	jne	.L847	#,
	.loc 1 3118 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp420
	movq	%rax, -576(%rbp)	# tmp420, ep
	jmp	.L848	#
.L850:
	.loc 1 3120 0
	movq	-576(%rbp), %rax	# ep, tmp421
	movq	32(%rax), %rdx	# ep_18->from_rtx, D.28172
	movl	-612(%rbp), %eax	# i, tmp423
	cltq
	movq	-256(%rbp,%rax,8), %rax	# orig_operand, D.28172
	cmpq	%rax, %rdx	# D.28172, D.28172
	jne	.L849	#,
	.loc 1 3120 0 is_stmt 0 discriminator 1
	movq	-576(%rbp), %rax	# ep, tmp424
	movl	12(%rax), %eax	# ep_18->can_eliminate, D.28168
	testl	%eax, %eax	# D.28168
	je	.L849	#,
	.loc 1 3121 0 is_stmt 1
	movq	-576(%rbp), %rax	# ep, tmp425
	movl	$0, 12(%rax)	#, ep_18->can_eliminate
.L849:
	.loc 1 3119 0
	addq	$48, -576(%rbp)	#, ep
.L848:
	.loc 1 3118 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.487
	addq	$192, %rax	#, D.28174
	cmpq	-576(%rbp), %rax	# ep, D.28174
	ja	.L850	#,
.L847:
	.loc 1 3124 0
	cmpl	$0, -636(%rbp)	#, replace
	je	.L851	#,
	.loc 1 3124 0 is_stmt 0 discriminator 1
	movq	-632(%rbp), %rax	# insn, iftmp.488
	jmp	.L852	#
.L851:
	.loc 1 3124 0 discriminator 2
	movl	$0, %eax	#, iftmp.488
.L852:
	.loc 1 3124 0 discriminator 3
	movl	-612(%rbp), %edx	# i, tmp427
	movslq	%edx, %rdx	# tmp427, tmp426
	movq	recog_data(,%rdx,8), %rcx	# recog_data.operand, D.28172
	movq	%rax, %rdx	# iftmp.488,
	movl	$0, %esi	#,
	movq	%rcx, %rdi	# D.28172,
	call	eliminate_regs	#
	movl	-612(%rbp), %edx	# i, tmp429
	movslq	%edx, %rdx	# tmp429, tmp428
	movq	%rax, -496(%rbp,%rdx,8)	# D.28172, substed_operand
	.loc 1 3126 0 is_stmt 1 discriminator 3
	movl	-612(%rbp), %eax	# i, tmp431
	cltq
	movq	-496(%rbp,%rax,8), %rdx	# substed_operand, D.28172
	movl	-612(%rbp), %eax	# i, tmp433
	cltq
	movq	-256(%rbp,%rax,8), %rax	# orig_operand, D.28172
	cmpq	%rax, %rdx	# D.28172, D.28172
	je	.L853	#,
	.loc 1 3127 0
	movl	$1, -592(%rbp)	#, any_changes
	movl	-592(%rbp), %eax	# any_changes, tmp434
	movl	%eax, -616(%rbp)	# tmp434, val
.L853:
	.loc 1 3130 0
	movl	-612(%rbp), %eax	# i, tmp436
	cltq
	addq	$30, %rax	#, tmp437
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.28177
	movq	$0, (%rax)	#, *_232
	.loc 1 3134 0
	movl	-612(%rbp), %eax	# i, tmp439
	cltq
	addq	$208, %rax	#, tmp440
	movl	recog_data+8(,%rax,4), %eax	# recog_data.operand_type, D.28180
	testl	%eax, %eax	# D.28180
	je	.L846	#,
	.loc 1 3135 0
	movl	-612(%rbp), %eax	# i, tmp442
	cltq
	movq	-256(%rbp,%rax,8), %rax	# orig_operand, D.28172
	movzwl	(%rax), %eax	# _234->code, D.28170
	cmpw	$61, %ax	#, D.28170
	jne	.L846	#,
	.loc 1 3136 0
	movl	-612(%rbp), %eax	# i, tmp444
	cltq
	movq	-496(%rbp,%rax,8), %rax	# substed_operand, D.28172
	movzwl	(%rax), %eax	# _236->code, D.28170
	cmpw	$66, %ax	#, D.28170
	jne	.L846	#,
	.loc 1 3137 0
	cmpl	$0, -636(%rbp)	#, replace
	je	.L846	#,
	.loc 1 3138 0
	movl	-612(%rbp), %eax	# i, tmp446
	cltq
	movq	-256(%rbp,%rax,8), %rax	# orig_operand, D.28172
	movq	%rax, %rdx	# D.28172,
	movl	$0, %esi	#,
	movl	$49, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-632(%rbp), %rdx	# insn, tmp447
	movq	%rdx, %rsi	# tmp447,
	movq	%rax, %rdi	# D.28172,
	call	emit_insn_after	#
.L846:
	.loc 1 3102 0
	addl	$1, -612(%rbp)	#, i
.L844:
	.loc 1 3102 0 is_stmt 0 discriminator 1
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.28171
	movsbl	%al, %eax	# D.28171, D.28168
	cmpl	-612(%rbp), %eax	# i, D.28168
	jg	.L854	#,
	.loc 1 3143 0 is_stmt 1
	movl	$0, -612(%rbp)	#, i
	jmp	.L855	#
.L856:
	.loc 1 3144 0 discriminator 2
	movl	-612(%rbp), %eax	# i, tmp449
	cltq
	addq	$120, %rax	#, tmp450
	movq	recog_data(,%rax,8), %rax	# recog_data.dup_loc, D.28177
	.loc 1 3145 0 discriminator 2
	movl	-612(%rbp), %edx	# i, tmp452
	movslq	%edx, %rdx	# tmp452, tmp451
	movzbl	recog_data+992(%rdx), %edx	# recog_data.dup_num, D.28171
	movsbl	%dl, %edx	# D.28171, D.28168
	movslq	%edx, %rdx	# D.28168, tmp453
	addq	$30, %rdx	#, tmp454
	movq	recog_data(,%rdx,8), %rdx	# recog_data.operand_loc, D.28177
	movq	(%rdx), %rdx	# *_247, D.28172
	movq	%rdx, (%rax)	# D.28172, *_244
	.loc 1 3143 0 discriminator 2
	addl	$1, -612(%rbp)	#, i
.L855:
	.loc 1 3143 0 is_stmt 0 discriminator 1
	movzbl	recog_data+997(%rip), %eax	# recog_data.n_dups, D.28171
	movsbl	%al, %eax	# D.28171, D.28168
	cmpl	-612(%rbp), %eax	# i, D.28168
	jg	.L856	#,
	.loc 1 3148 0 is_stmt 1
	movq	-552(%rbp), %rax	# old_body, tmp455
	movq	%rax, %rdi	# tmp455,
	call	check_eliminable_occurrences	#
	.loc 1 3152 0
	movl	$0, -612(%rbp)	#, i
	jmp	.L857	#
.L858:
	.loc 1 3153 0 discriminator 2
	movl	-612(%rbp), %eax	# i, tmp457
	cltq
	addq	$30, %rax	#, tmp458
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.28177
	movl	-612(%rbp), %edx	# i, tmp460
	movslq	%edx, %rdx	# tmp460, tmp459
	movq	-496(%rbp,%rdx,8), %rdx	# substed_operand, D.28172
	movq	%rdx, (%rax)	# D.28172, *_253
	.loc 1 3152 0 discriminator 2
	addl	$1, -612(%rbp)	#, i
.L857:
	.loc 1 3152 0 is_stmt 0 discriminator 1
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.28171
	movsbl	%al, %eax	# D.28171, D.28168
	cmpl	-612(%rbp), %eax	# i, D.28168
	jg	.L858	#,
	.loc 1 3154 0 is_stmt 1
	movl	$0, -612(%rbp)	#, i
	jmp	.L859	#
.L860:
	.loc 1 3155 0 discriminator 2
	movl	-612(%rbp), %eax	# i, tmp462
	cltq
	addq	$120, %rax	#, tmp463
	movq	recog_data(,%rax,8), %rax	# recog_data.dup_loc, D.28177
	movl	-612(%rbp), %edx	# i, tmp465
	movslq	%edx, %rdx	# tmp465, tmp464
	movzbl	recog_data+992(%rdx), %edx	# recog_data.dup_num, D.28171
	movsbl	%dl, %edx	# D.28171, D.28168
	movslq	%edx, %rdx	# D.28168, tmp466
	movq	-496(%rbp,%rdx,8), %rdx	# substed_operand, D.28172
	movq	%rdx, (%rax)	# D.28172, *_259
	.loc 1 3154 0 discriminator 2
	addl	$1, -612(%rbp)	#, i
.L859:
	.loc 1 3154 0 is_stmt 0 discriminator 1
	movzbl	recog_data+997(%rip), %eax	# recog_data.n_dups, D.28171
	movsbl	%al, %eax	# D.28171, D.28168
	cmpl	-612(%rbp), %eax	# i, D.28168
	jg	.L860	#,
	.loc 1 3166 0 is_stmt 1
	cmpl	$0, -616(%rbp)	#, val
	je	.L861	#,
	.loc 1 3172 0
	movq	-552(%rbp), %rax	# old_body, tmp467
	movq	%rax, -584(%rbp)	# tmp467, new_body
	.loc 1 3173 0
	cmpl	$0, -636(%rbp)	#, replace
	jne	.L862	#,
	.loc 1 3175 0
	movq	-552(%rbp), %rax	# old_body, tmp468
	movq	%rax, %rdi	# tmp468,
	call	copy_insn	#
	movq	%rax, -584(%rbp)	# tmp469, new_body
	.loc 1 3176 0
	movq	-632(%rbp), %rax	# insn, tmp470
	movq	56(%rax), %rax	# insn_34(D)->fld[6].rtx, D.28172
	testq	%rax, %rax	# D.28172
	je	.L862	#,
	.loc 1 3177 0
	movq	-632(%rbp), %rax	# insn, tmp471
	movq	56(%rax), %rax	# insn_34(D)->fld[6].rtx, D.28172
	movq	%rax, %rdi	# D.28172,
	call	copy_insn_1	#
	movq	-632(%rbp), %rdx	# insn, tmp472
	movq	%rax, 56(%rdx)	# D.28172, insn_34(D)->fld[6].rtx
.L862:
	.loc 1 3179 0
	movq	-632(%rbp), %rax	# insn, tmp473
	movq	-584(%rbp), %rdx	# new_body, tmp474
	movq	%rdx, 32(%rax)	# tmp474, insn_34(D)->fld[3].rtx
	.loc 1 3188 0
	cmpl	$0, -600(%rbp)	#, insn_is_asm
	jne	.L861	#,
	.loc 1 3189 0
	cmpq	$0, -544(%rbp)	#, old_set
	je	.L861	#,
	.loc 1 3190 0
	movq	-544(%rbp), %rax	# old_set, tmp475
	movq	16(%rax), %rax	# old_set_53->fld[1].rtx, D.28172
	movzwl	(%rax), %eax	# _269->code, D.28170
	cmpw	$61, %ax	#, D.28170
	jne	.L863	#,
	.loc 1 3191 0
	movq	-584(%rbp), %rax	# new_body, tmp476
	movzwl	(%rax), %eax	# new_body_3->code, D.28170
	cmpw	$47, %ax	#, D.28170
	jne	.L864	#,
	.loc 1 3192 0
	movq	-584(%rbp), %rax	# new_body, tmp477
	movq	16(%rax), %rax	# new_body_3->fld[1].rtx, D.28172
	movzwl	(%rax), %eax	# _272->code, D.28170
	cmpw	$61, %ax	#, D.28170
	jne	.L864	#,
.L863:
	.loc 1 3196 0
	cmpq	$0, -544(%rbp)	#, old_set
	je	.L865	#,
	.loc 1 3197 0
	movq	-544(%rbp), %rax	# old_set, tmp478
	movq	16(%rax), %rax	# old_set_53->fld[1].rtx, D.28172
	movzwl	(%rax), %eax	# _274->code, D.28170
	cmpw	$66, %ax	#, D.28170
	jne	.L866	#,
	.loc 1 3198 0
	movq	-544(%rbp), %rax	# old_set, tmp479
	movq	16(%rax), %rdx	# old_set_53->fld[1].rtx, D.28172
	movq	recog_data+8(%rip), %rax	# recog_data.operand, D.28172
	cmpq	%rax, %rdx	# D.28172, D.28172
	jne	.L864	#,
.L866:
	.loc 1 3199 0
	movq	-544(%rbp), %rax	# old_set, tmp480
	movq	8(%rax), %rax	# old_set_53->fld[0].rtx, D.28172
	movzwl	(%rax), %eax	# _278->code, D.28170
	cmpw	$66, %ax	#, D.28170
	jne	.L865	#,
	.loc 1 3200 0
	movq	-544(%rbp), %rax	# old_set, tmp481
	movq	8(%rax), %rdx	# old_set_53->fld[0].rtx, D.28172
	movq	recog_data(%rip), %rax	# recog_data.operand, D.28172
	cmpq	%rax, %rdx	# D.28172, D.28172
	jne	.L864	#,
.L865:
	.loc 1 3202 0
	movq	-544(%rbp), %rax	# old_set, tmp482
	movq	16(%rax), %rax	# old_set_53->fld[1].rtx, D.28172
	movzwl	(%rax), %eax	# _282->code, D.28170
	cmpw	$75, %ax	#, D.28170
	jne	.L861	#,
.L864:
.LBB93:
	.loc 1 3204 0
	movq	-632(%rbp), %rax	# insn, tmp483
	movq	32(%rax), %rax	# insn_34(D)->fld[3].rtx, D.28172
	movq	-632(%rbp), %rcx	# insn, tmp484
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp484,
	movq	%rax, %rdi	# D.28172,
	call	recog	#
	movl	%eax, -588(%rbp)	# tmp485, new_icode
	.loc 1 3205 0
	cmpl	$0, -588(%rbp)	#, new_icode
	jns	.L861	#,
	.loc 1 3206 0
	movq	-632(%rbp), %rax	# insn, tmp486
	movl	-604(%rbp), %edx	# icode, tmp487
	movl	%edx, 40(%rax)	# tmp487, insn_34(D)->fld[4].rtint
.L861:
.LBE93:
	.loc 1 3213 0
	cmpl	$0, -636(%rbp)	#, replace
	jne	.L867	#,
	.loc 1 3216 0
	movl	$0, -612(%rbp)	#, i
	jmp	.L868	#
.L869:
	.loc 1 3217 0 discriminator 2
	movl	-612(%rbp), %eax	# i, tmp489
	cltq
	addq	$30, %rax	#, tmp490
	movq	recog_data(,%rax,8), %rax	# recog_data.operand_loc, D.28177
	movl	-612(%rbp), %edx	# i, tmp492
	movslq	%edx, %rdx	# tmp492, tmp491
	movq	-256(%rbp,%rdx,8), %rdx	# orig_operand, D.28172
	movq	%rdx, (%rax)	# D.28172, *_289
	.loc 1 3216 0 discriminator 2
	addl	$1, -612(%rbp)	#, i
.L868:
	.loc 1 3216 0 is_stmt 0 discriminator 1
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.28171
	movsbl	%al, %eax	# D.28171, D.28168
	cmpl	-612(%rbp), %eax	# i, D.28168
	jg	.L869	#,
	.loc 1 3218 0 is_stmt 1
	movl	$0, -612(%rbp)	#, i
	jmp	.L870	#
.L871:
	.loc 1 3219 0 discriminator 2
	movl	-612(%rbp), %eax	# i, tmp494
	cltq
	addq	$120, %rax	#, tmp495
	movq	recog_data(,%rax,8), %rax	# recog_data.dup_loc, D.28177
	movl	-612(%rbp), %edx	# i, tmp497
	movslq	%edx, %rdx	# tmp497, tmp496
	movzbl	recog_data+992(%rdx), %edx	# recog_data.dup_num, D.28171
	movsbl	%dl, %edx	# D.28171, D.28168
	movslq	%edx, %rdx	# D.28168, tmp498
	movq	-256(%rbp,%rdx,8), %rdx	# orig_operand, D.28172
	movq	%rdx, (%rax)	# D.28172, *_295
	.loc 1 3218 0 discriminator 2
	addl	$1, -612(%rbp)	#, i
.L870:
	.loc 1 3218 0 is_stmt 0 discriminator 1
	movzbl	recog_data+997(%rip), %eax	# recog_data.n_dups, D.28171
	movsbl	%al, %eax	# D.28171, D.28168
	cmpl	-612(%rbp), %eax	# i, D.28168
	jg	.L871	#,
.L867:
	.loc 1 3235 0 is_stmt 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp499
	movq	%rax, -576(%rbp)	# tmp499, ep
	jmp	.L872	#
.L875:
	.loc 1 3237 0
	movq	-576(%rbp), %rax	# ep, tmp500
	movl	24(%rax), %edx	# ep_19->previous_offset, D.28168
	movq	-576(%rbp), %rax	# ep, tmp501
	movl	20(%rax), %eax	# ep_19->offset, D.28168
	cmpl	%eax, %edx	# D.28168, D.28168
	je	.L873	#,
	.loc 1 3237 0 is_stmt 0 discriminator 1
	movq	-576(%rbp), %rax	# ep, tmp502
	movl	28(%rax), %eax	# ep_19->ref_outside_mem, D.28168
	testl	%eax, %eax	# D.28168
	je	.L873	#,
	.loc 1 3238 0 is_stmt 1
	movq	-576(%rbp), %rax	# ep, tmp503
	movl	$0, 12(%rax)	#, ep_19->can_eliminate
.L873:
	.loc 1 3240 0
	movq	-576(%rbp), %rax	# ep, tmp504
	movl	$0, 28(%rax)	#, ep_19->ref_outside_mem
	.loc 1 3242 0
	movq	-576(%rbp), %rax	# ep, tmp505
	movl	24(%rax), %edx	# ep_19->previous_offset, D.28168
	movq	-576(%rbp), %rax	# ep, tmp506
	movl	20(%rax), %eax	# ep_19->offset, D.28168
	cmpl	%eax, %edx	# D.28168, D.28168
	je	.L874	#,
	.loc 1 3243 0
	movl	$1, -616(%rbp)	#, val
.L874:
	.loc 1 3235 0
	addq	$48, -576(%rbp)	#, ep
.L872:
	.loc 1 3235 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.489
	addq	$192, %rax	#, D.28174
	cmpq	-576(%rbp), %rax	# ep, D.28174
	ja	.L875	#,
.L828:
	.loc 1 3252 0 is_stmt 1
	cmpl	$0, -616(%rbp)	#, val
	je	.L876	#,
	.loc 1 3252 0 is_stmt 0 discriminator 1
	movq	-632(%rbp), %rax	# insn, tmp507
	movq	56(%rax), %rax	# insn_34(D)->fld[6].rtx, D.28172
	testq	%rax, %rax	# D.28172
	je	.L876	#,
	.loc 1 3253 0 is_stmt 1
	movq	-632(%rbp), %rax	# insn, tmp508
	movq	56(%rax), %rdx	# insn_34(D)->fld[6].rtx, D.28172
	movq	-632(%rbp), %rax	# insn, tmp509
	movq	56(%rax), %rax	# insn_34(D)->fld[6].rtx, D.28172
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.28172,
	call	eliminate_regs	#
	movq	-632(%rbp), %rdx	# insn, tmp510
	movq	%rax, 56(%rdx)	# D.28172, insn_34(D)->fld[6].rtx
.L876:
	.loc 1 3255 0
	movl	-616(%rbp), %eax	# val, D.28168
.L877:
	.loc 1 3256 0
	addq	$632, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE26:
	.size	eliminate_regs_in_insn, .-eliminate_regs_in_insn
	.type	update_eliminable_offsets, @function
update_eliminable_offsets:
.LFB27:
	.loc 1 3266 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	.loc 1 3269 0
	movl	$0, num_not_at_initial_offset(%rip)	#, num_not_at_initial_offset
	.loc 1 3270 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp67
	movq	%rax, -8(%rbp)	# tmp67, ep
	jmp	.L879	#
.L881:
	.loc 1 3272 0
	movq	-8(%rbp), %rax	# ep, tmp68
	movl	20(%rax), %edx	# ep_1->offset, D.28183
	movq	-8(%rbp), %rax	# ep, tmp69
	movl	%edx, 24(%rax)	# D.28183, ep_1->previous_offset
	.loc 1 3273 0
	movq	-8(%rbp), %rax	# ep, tmp70
	movl	12(%rax), %eax	# ep_1->can_eliminate, D.28183
	testl	%eax, %eax	# D.28183
	je	.L880	#,
	.loc 1 3273 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# ep, tmp71
	movl	20(%rax), %edx	# ep_1->offset, D.28183
	movq	-8(%rbp), %rax	# ep, tmp72
	movl	8(%rax), %eax	# ep_1->initial_offset, D.28183
	cmpl	%eax, %edx	# D.28183, D.28183
	je	.L880	#,
	.loc 1 3274 0 is_stmt 1
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.490
	addl	$1, %eax	#, num_not_at_initial_offset.491
	movl	%eax, num_not_at_initial_offset(%rip)	# num_not_at_initial_offset.491, num_not_at_initial_offset
.L880:
	.loc 1 3270 0
	addq	$48, -8(%rbp)	#, ep
.L879:
	.loc 1 3270 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.492
	addq	$192, %rax	#, D.28182
	cmpq	-8(%rbp), %rax	# ep, D.28182
	ja	.L881	#,
	.loc 1 3276 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE27:
	.size	update_eliminable_offsets, .-update_eliminable_offsets
	.type	mark_not_eliminable, @function
mark_not_eliminable:
.LFB28:
	.loc 1 3297 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# dest, dest
	movq	%rsi, -32(%rbp)	# x, x
	movq	%rdx, -40(%rbp)	# data, data
	.loc 1 3303 0
	movq	-24(%rbp), %rax	# dest, tmp90
	movzwl	(%rax), %eax	# dest_3(D)->code, D.28184
	cmpw	$63, %ax	#, D.28184
	jne	.L883	#,
	.loc 1 3304 0
	movq	-24(%rbp), %rax	# dest, tmp91
	movq	8(%rax), %rax	# dest_3(D)->fld[0].rtx, tmp92
	movq	%rax, -24(%rbp)	# tmp92, dest
.L883:
	.loc 1 3306 0
	movq	global_rtl+32(%rip), %rax	# global_rtl, D.28185
	cmpq	-24(%rbp), %rax	# dest, D.28185
	jne	.L884	#,
	.loc 1 3307 0
	jmp	.L882	#
.L884:
	.loc 1 3309 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L886	#
.L889:
	.loc 1 3310 0
	movq	reg_eliminate(%rip), %rcx	# reg_eliminate, reg_eliminate.493
	movl	-4(%rbp), %edx	# i, D.28186
	movq	%rdx, %rax	# D.28186, tmp93
	addq	%rax, %rax	# tmp93
	addq	%rdx, %rax	# D.28186, tmp93
	salq	$4, %rax	#, tmp94
	addq	%rcx, %rax	# reg_eliminate.493, D.28187
	movl	12(%rax), %eax	# _11->can_eliminate, D.28188
	testl	%eax, %eax	# D.28188
	je	.L887	#,
	.loc 1 3310 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rcx	# reg_eliminate, reg_eliminate.494
	movl	-4(%rbp), %edx	# i, D.28186
	movq	%rdx, %rax	# D.28186, tmp95
	addq	%rax, %rax	# tmp95
	addq	%rdx, %rax	# D.28186, tmp95
	salq	$4, %rax	#, tmp96
	addq	%rcx, %rax	# reg_eliminate.494, D.28187
	movq	40(%rax), %rax	# _16->to_rtx, D.28185
	cmpq	-24(%rbp), %rax	# dest, D.28185
	jne	.L887	#,
	.loc 1 3311 0 is_stmt 1
	movq	-32(%rbp), %rax	# x, tmp97
	movzwl	(%rax), %eax	# x_18(D)->code, D.28184
	cmpw	$47, %ax	#, D.28184
	jne	.L888	#,
	.loc 1 3312 0
	movq	-32(%rbp), %rax	# x, tmp98
	movq	16(%rax), %rax	# x_18(D)->fld[1].rtx, D.28185
	movzwl	(%rax), %eax	# _20->code, D.28184
	cmpw	$75, %ax	#, D.28184
	jne	.L888	#,
	.loc 1 3313 0
	movq	-32(%rbp), %rax	# x, tmp99
	movq	16(%rax), %rax	# x_18(D)->fld[1].rtx, D.28185
	movq	8(%rax), %rax	# _22->fld[0].rtx, D.28185
	cmpq	-24(%rbp), %rax	# dest, D.28185
	jne	.L888	#,
	.loc 1 3314 0
	movq	-32(%rbp), %rax	# x, tmp100
	movq	16(%rax), %rax	# x_18(D)->fld[1].rtx, D.28185
	movq	16(%rax), %rax	# _24->fld[1].rtx, D.28185
	movzwl	(%rax), %eax	# _25->code, D.28184
	cmpw	$54, %ax	#, D.28184
	je	.L887	#,
.L888:
	.loc 1 3316 0
	movq	reg_eliminate(%rip), %rcx	# reg_eliminate, reg_eliminate.495
	movl	-4(%rbp), %edx	# i, D.28186
	movq	%rdx, %rax	# D.28186, tmp101
	addq	%rax, %rax	# tmp101
	addq	%rdx, %rax	# D.28186, tmp101
	salq	$4, %rax	#, tmp102
	addq	%rax, %rcx	# D.28186, D.28187
	.loc 1 3317 0
	movq	reg_eliminate(%rip), %rsi	# reg_eliminate, reg_eliminate.496
	movl	-4(%rbp), %edx	# i, D.28186
	movq	%rdx, %rax	# D.28186, tmp103
	addq	%rax, %rax	# tmp103
	addq	%rdx, %rax	# D.28186, tmp103
	salq	$4, %rax	#, tmp104
	addq	%rsi, %rax	# reg_eliminate.496, D.28187
	movl	$0, 12(%rax)	#, _34->can_eliminate
	movl	12(%rax), %eax	# _34->can_eliminate, D.28188
	movl	%eax, 16(%rcx)	# D.28188, _30->can_eliminate_previous
	.loc 1 3318 0
	movl	num_eliminable(%rip), %eax	# num_eliminable, num_eliminable.497
	subl	$1, %eax	#, num_eliminable.498
	movl	%eax, num_eliminable(%rip)	# num_eliminable.498, num_eliminable
.L887:
	.loc 1 3309 0
	addl	$1, -4(%rbp)	#, i
.L886:
	.loc 1 3309 0 is_stmt 0 discriminator 1
	cmpl	$3, -4(%rbp)	#, i
	jbe	.L889	#,
.L882:
	.loc 1 3320 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE28:
	.size	mark_not_eliminable, .-mark_not_eliminable
	.type	verify_initial_elim_offsets, @function
verify_initial_elim_offsets:
.LFB29:
	.loc 1 3329 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 3335 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp65
	movq	%rax, -8(%rbp)	# tmp65, ep
	jmp	.L891	#
.L893:
	.loc 1 3337 0
	movq	-8(%rbp), %rax	# ep, tmp66
	movl	4(%rax), %edx	# ep_1->to, D.28190
	movq	-8(%rbp), %rax	# ep, tmp67
	movl	(%rax), %eax	# ep_1->from, D.28190
	movl	%edx, %esi	# D.28190,
	movl	%eax, %edi	# D.28190,
	call	ix86_initial_elimination_offset	#
	movl	%eax, -12(%rbp)	# D.28191, t
	.loc 1 3338 0
	movq	-8(%rbp), %rax	# ep, tmp68
	movl	8(%rax), %eax	# ep_1->initial_offset, D.28190
	cmpl	-12(%rbp), %eax	# t, D.28190
	je	.L892	#,
	.loc 1 3339 0
	movl	$__FUNCTION__.15063, %edx	#,
	movl	$3339, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L892:
	.loc 1 3335 0
	addq	$48, -8(%rbp)	#, ep
.L891:
	.loc 1 3335 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.499
	addq	$192, %rax	#, D.28189
	cmpq	-8(%rbp), %rax	# ep, D.28189
	ja	.L893	#,
	.loc 1 3346 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE29:
	.size	verify_initial_elim_offsets, .-verify_initial_elim_offsets
	.type	set_initial_elim_offsets, @function
set_initial_elim_offsets:
.LFB30:
	.loc 1 3352 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 3353 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp67
	movq	%rax, -8(%rbp)	# tmp67, ep
	.loc 1 3356 0
	jmp	.L895	#
.L896:
	.loc 1 3358 0 discriminator 2
	movq	-8(%rbp), %rax	# ep, tmp68
	movl	4(%rax), %edx	# ep_1->to, D.28193
	movq	-8(%rbp), %rax	# ep, tmp69
	movl	(%rax), %eax	# ep_1->from, D.28193
	movl	%edx, %esi	# D.28193,
	movl	%eax, %edi	# D.28193,
	call	ix86_initial_elimination_offset	#
	movl	%eax, %edx	# D.28194, D.28193
	movq	-8(%rbp), %rax	# ep, tmp70
	movl	%edx, 8(%rax)	# D.28193, ep_1->initial_offset
	.loc 1 3359 0 discriminator 2
	movq	-8(%rbp), %rax	# ep, tmp71
	movl	8(%rax), %edx	# ep_1->initial_offset, D.28193
	movq	-8(%rbp), %rax	# ep, tmp72
	movl	%edx, 20(%rax)	# D.28193, ep_1->offset
	movq	-8(%rbp), %rax	# ep, tmp73
	movl	20(%rax), %edx	# ep_1->offset, D.28193
	movq	-8(%rbp), %rax	# ep, tmp74
	movl	%edx, 24(%rax)	# D.28193, ep_1->previous_offset
	.loc 1 3356 0 discriminator 2
	addq	$48, -8(%rbp)	#, ep
.L895:
	.loc 1 3356 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.500
	addq	$192, %rax	#, D.28192
	cmpq	-8(%rbp), %rax	# ep, D.28192
	ja	.L896	#,
	.loc 1 3366 0 is_stmt 1
	movl	$0, num_not_at_initial_offset(%rip)	#, num_not_at_initial_offset
	.loc 1 3367 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE30:
	.size	set_initial_elim_offsets, .-set_initial_elim_offsets
	.type	set_initial_label_offsets, @function
set_initial_label_offsets:
.LFB31:
	.loc 1 3378 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$16, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	.loc 1 3380 0
	movl	num_labels(%rip), %eax	# num_labels, num_labels.501
	movslq	%eax, %rbx	# num_labels.501, D.28195
	movq	offsets_known_at(%rip), %r12	# offsets_known_at, offsets_known_at.502
	call	get_first_label_num	#
	cltq
	addq	%r12, %rax	# offsets_known_at.502, D.28198
	movq	%rbx, %rdx	# D.28195,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.28198,
	call	memset	#
	.loc 1 3382 0
	movq	cfun(%rip), %rax	# cfun, cfun.503
	movq	16(%rax), %rax	# cfun.503_8->expr, D.28199
	movq	32(%rax), %rax	# _9->x_forced_labels, tmp69
	movq	%rax, -24(%rbp)	# tmp69, x
	jmp	.L898	#
.L900:
	.loc 1 3383 0
	movq	-24(%rbp), %rax	# x, tmp70
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.28200
	testq	%rax, %rax	# D.28200
	je	.L899	#,
	.loc 1 3384 0
	movq	-24(%rbp), %rax	# x, tmp71
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.28200
	movl	$1, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# D.28200,
	call	set_label_offsets	#
.L899:
	.loc 1 3382 0
	movq	-24(%rbp), %rax	# x, tmp72
	movq	16(%rax), %rax	# x_1->fld[1].rtx, tmp73
	movq	%rax, -24(%rbp)	# tmp73, x
.L898:
	.loc 1 3382 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, x
	jne	.L900	#,
	.loc 1 3385 0 is_stmt 1
	addq	$16, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE31:
	.size	set_initial_label_offsets, .-set_initial_label_offsets
	.type	set_offsets_for_label, @function
set_offsets_for_label:
.LFB32:
	.loc 1 3393 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# insn, insn
	.loc 1 3395 0
	movq	-24(%rbp), %rax	# insn, tmp70
	movl	48(%rax), %eax	# insn_3(D)->fld[5].rtint, tmp71
	movl	%eax, -12(%rbp)	# tmp71, label_nr
	.loc 1 3398 0
	movl	$0, num_not_at_initial_offset(%rip)	#, num_not_at_initial_offset
	.loc 1 3399 0
	movl	$0, -16(%rbp)	#, i
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp72
	movq	%rax, -8(%rbp)	# tmp72, ep
	jmp	.L902	#
.L904:
	.loc 1 3401 0
	movq	offsets_at(%rip), %rax	# offsets_at, offsets_at.504
	movl	-12(%rbp), %edx	# label_nr, tmp73
	movslq	%edx, %rdx	# tmp73, D.28201
	salq	$4, %rdx	#, D.28201
	addq	%rax, %rdx	# offsets_at.504, D.28202
	movl	-16(%rbp), %eax	# i, tmp74
	movl	(%rdx,%rax,4), %edx	# *_10, D.28203
	movq	-8(%rbp), %rax	# ep, tmp75
	movl	%edx, 24(%rax)	# D.28203, ep_2->previous_offset
	movq	-8(%rbp), %rax	# ep, tmp76
	movl	24(%rax), %edx	# ep_2->previous_offset, D.28203
	movq	-8(%rbp), %rax	# ep, tmp77
	movl	%edx, 20(%rax)	# D.28203, ep_2->offset
	.loc 1 3402 0
	movq	-8(%rbp), %rax	# ep, tmp78
	movl	12(%rax), %eax	# ep_2->can_eliminate, D.28203
	testl	%eax, %eax	# D.28203
	je	.L903	#,
	.loc 1 3402 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# ep, tmp79
	movl	20(%rax), %edx	# ep_2->offset, D.28203
	movq	-8(%rbp), %rax	# ep, tmp80
	movl	8(%rax), %eax	# ep_2->initial_offset, D.28203
	cmpl	%eax, %edx	# D.28203, D.28203
	je	.L903	#,
	.loc 1 3403 0 is_stmt 1
	movl	num_not_at_initial_offset(%rip), %eax	# num_not_at_initial_offset, num_not_at_initial_offset.505
	addl	$1, %eax	#, num_not_at_initial_offset.506
	movl	%eax, num_not_at_initial_offset(%rip)	# num_not_at_initial_offset.506, num_not_at_initial_offset
.L903:
	.loc 1 3399 0
	addq	$48, -8(%rbp)	#, ep
	addl	$1, -16(%rbp)	#, i
.L902:
	.loc 1 3399 0 is_stmt 0 discriminator 1
	cmpl	$3, -16(%rbp)	#, i
	jbe	.L904	#,
	.loc 1 3405 0 is_stmt 1
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE32:
	.size	set_offsets_for_label, .-set_offsets_for_label
	.type	update_eliminables, @function
update_eliminables:
.LFB33:
	.loc 1 3416 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# pset, pset
	.loc 1 3418 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, tmp95
	movl	%eax, -20(%rbp)	# tmp95, previous_frame_pointer_needed
	.loc 1 3422 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp96
	movq	%rax, -16(%rbp)	# tmp96, ep
	jmp	.L906	#
.L910:
	.loc 1 3423 0
	movq	-16(%rbp), %rax	# ep, tmp97
	movl	(%rax), %eax	# ep_1->from, D.28205
	cmpl	$6, %eax	#, D.28205
	jne	.L907	#,
	.loc 1 3423 0 is_stmt 0 discriminator 1
	call	ix86_frame_pointer_required	#
	testl	%eax, %eax	# D.28205
	jne	.L908	#,
.L907:
	.loc 1 3425 0 is_stmt 1
	movq	-16(%rbp), %rax	# ep, tmp98
	movl	4(%rax), %eax	# ep_1->to, D.28205
	cmpl	$7, %eax	#, D.28205
	jne	.L909	#,
	.loc 1 3425 0 is_stmt 0 discriminator 1
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.507
	testl	%eax, %eax	# frame_pointer_needed.507
	je	.L909	#,
.L908:
	.loc 1 3428 0 is_stmt 1
	movq	-16(%rbp), %rax	# ep, tmp99
	movl	$0, 12(%rax)	#, ep_1->can_eliminate
.L909:
	.loc 1 3422 0
	addq	$48, -16(%rbp)	#, ep
.L906:
	.loc 1 3422 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.508
	addq	$192, %rax	#, D.28204
	cmpq	-16(%rbp), %rax	# ep, D.28204
	ja	.L910	#,
	.loc 1 3437 0 is_stmt 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp100
	movq	%rax, -16(%rbp)	# tmp100, ep
	jmp	.L911	#
.L920:
.LBB94:
	.loc 1 3440 0
	movl	$-1, -24(%rbp)	#, new_to
	.loc 1 3442 0
	movq	-16(%rbp), %rax	# ep, tmp101
	movl	12(%rax), %eax	# ep_2->can_eliminate, D.28205
	testl	%eax, %eax	# D.28205
	jne	.L912	#,
	.loc 1 3442 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# ep, tmp102
	movl	16(%rax), %eax	# ep_2->can_eliminate_previous, D.28205
	testl	%eax, %eax	# D.28205
	je	.L912	#,
	.loc 1 3446 0 is_stmt 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp103
	movq	%rax, -8(%rbp)	# tmp103, op
	jmp	.L913	#
.L916:
	.loc 1 3448 0
	movq	-8(%rbp), %rax	# op, tmp104
	movl	(%rax), %edx	# op_4->from, D.28205
	movq	-16(%rbp), %rax	# ep, tmp105
	movl	(%rax), %eax	# ep_2->from, D.28205
	cmpl	%eax, %edx	# D.28205, D.28205
	jne	.L914	#,
	.loc 1 3448 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# op, tmp106
	movl	12(%rax), %eax	# op_4->can_eliminate, D.28205
	testl	%eax, %eax	# D.28205
	je	.L914	#,
	.loc 1 3450 0 is_stmt 1
	movq	-8(%rbp), %rax	# op, tmp107
	movl	4(%rax), %eax	# op_4->to, tmp108
	movl	%eax, -24(%rbp)	# tmp108, new_to
	.loc 1 3451 0
	jmp	.L915	#
.L914:
	.loc 1 3447 0
	addq	$48, -8(%rbp)	#, op
.L913:
	.loc 1 3447 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.509
	addq	$192, %rax	#, D.28204
	.loc 1 3446 0 is_stmt 1 discriminator 1
	cmpq	-8(%rbp), %rax	# op, D.28204
	ja	.L916	#,
.L915:
	.loc 1 3456 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp109
	movq	%rax, -8(%rbp)	# tmp109, op
	jmp	.L917	#
.L919:
	.loc 1 3458 0
	movq	-8(%rbp), %rax	# op, tmp110
	movl	(%rax), %eax	# op_5->from, D.28205
	cmpl	-24(%rbp), %eax	# new_to, D.28205
	jne	.L918	#,
	.loc 1 3458 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# op, tmp111
	movl	4(%rax), %edx	# op_5->to, D.28205
	movq	-16(%rbp), %rax	# ep, tmp112
	movl	4(%rax), %eax	# ep_2->to, D.28205
	cmpl	%eax, %edx	# D.28205, D.28205
	jne	.L918	#,
	.loc 1 3459 0 is_stmt 1
	movq	-8(%rbp), %rax	# op, tmp113
	movl	$0, 12(%rax)	#, op_5->can_eliminate
.L918:
	.loc 1 3457 0
	addq	$48, -8(%rbp)	#, op
.L917:
	.loc 1 3457 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.510
	addq	$192, %rax	#, D.28204
	.loc 1 3456 0 is_stmt 1 discriminator 1
	cmpq	-8(%rbp), %rax	# op, D.28204
	ja	.L919	#,
.L912:
.LBE94:
	.loc 1 3437 0
	addq	$48, -16(%rbp)	#, ep
.L911:
	.loc 1 3437 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.511
	addq	$192, %rax	#, D.28204
	cmpq	-16(%rbp), %rax	# ep, D.28204
	ja	.L920	#,
	.loc 1 3469 0 is_stmt 1
	movl	$1, frame_pointer_needed(%rip)	#, frame_pointer_needed
	.loc 1 3470 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp114
	movq	%rax, -16(%rbp)	# tmp114, ep
	jmp	.L921	#
.L924:
	.loc 1 3472 0
	movq	-16(%rbp), %rax	# ep, tmp115
	movl	12(%rax), %eax	# ep_3->can_eliminate, D.28205
	testl	%eax, %eax	# D.28205
	je	.L922	#,
	.loc 1 3472 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# ep, tmp116
	movl	(%rax), %eax	# ep_3->from, D.28205
	cmpl	$20, %eax	#, D.28205
	jne	.L922	#,
	.loc 1 3473 0 is_stmt 1
	movq	-16(%rbp), %rax	# ep, tmp117
	movl	4(%rax), %eax	# ep_3->to, D.28205
	cmpl	$6, %eax	#, D.28205
	je	.L922	#,
	.loc 1 3474 0
	movl	$0, frame_pointer_needed(%rip)	#, frame_pointer_needed
.L922:
	.loc 1 3476 0
	movq	-16(%rbp), %rax	# ep, tmp118
	movl	12(%rax), %eax	# ep_3->can_eliminate, D.28205
	testl	%eax, %eax	# D.28205
	jne	.L923	#,
	.loc 1 3476 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# ep, tmp119
	movl	16(%rax), %eax	# ep_3->can_eliminate_previous, D.28205
	testl	%eax, %eax	# D.28205
	je	.L923	#,
	.loc 1 3478 0 is_stmt 1
	movq	-16(%rbp), %rax	# ep, tmp120
	movl	$0, 16(%rax)	#, ep_3->can_eliminate_previous
	.loc 1 3479 0
	movq	-40(%rbp), %rax	# pset, tmp121
	movq	(%rax), %rdx	# *pset_46(D), D.28206
	movq	-16(%rbp), %rax	# ep, tmp122
	movl	(%rax), %eax	# ep_3->from, D.28205
	movl	$1, %esi	#, tmp123
	movl	%eax, %ecx	# D.28205, tmp128
	salq	%cl, %rsi	# tmp128, D.28206
	movq	%rsi, %rax	# D.28206, D.28206
	orq	%rax, %rdx	# D.28206, D.28206
	movq	-40(%rbp), %rax	# pset, tmp124
	movq	%rdx, (%rax)	# D.28206, *pset_46(D)
	.loc 1 3480 0
	movl	num_eliminable(%rip), %eax	# num_eliminable, num_eliminable.512
	subl	$1, %eax	#, num_eliminable.513
	movl	%eax, num_eliminable(%rip)	# num_eliminable.513, num_eliminable
.L923:
	.loc 1 3470 0
	addq	$48, -16(%rbp)	#, ep
.L921:
	.loc 1 3470 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.514
	addq	$192, %rax	#, D.28204
	cmpq	-16(%rbp), %rax	# ep, D.28204
	ja	.L924	#,
	.loc 1 3487 0 is_stmt 1
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.515
	testl	%eax, %eax	# frame_pointer_needed.515
	je	.L905	#,
	.loc 1 3487 0 is_stmt 0 discriminator 1
	cmpl	$0, -20(%rbp)	#, previous_frame_pointer_needed
	jne	.L905	#,
	.loc 1 3488 0 is_stmt 1
	movq	-40(%rbp), %rax	# pset, tmp125
	movq	(%rax), %rax	# *pset_46(D), D.28206
	orq	$64, %rax	#, D.28206
	movq	%rax, %rdx	# D.28206, D.28206
	movq	-40(%rbp), %rax	# pset, tmp126
	movq	%rdx, (%rax)	# D.28206, *pset_46(D)
.L905:
	.loc 1 3490 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE33:
	.size	update_eliminables, .-update_eliminables
	.type	init_elim_table, @function
init_elim_table:
.LFB34:
	.loc 1 3496 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	.loc 1 3502 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.516
	testq	%rax, %rax	# reg_eliminate.516
	jne	.L927	#,
	.loc 1 3504 0
	movl	$4, %esi	#,
	movl	$48, %edi	#,
	call	xcalloc	#
	.loc 1 3503 0
	movq	%rax, reg_eliminate(%rip)	# reg_eliminate.517, reg_eliminate
.L927:
	.loc 1 3508 0
	movl	flag_omit_frame_pointer(%rip), %eax	# flag_omit_frame_pointer, flag_omit_frame_pointer.519
	.loc 1 3518 0
	testl	%eax, %eax	# flag_omit_frame_pointer.519
	je	.L928	#,
	.loc 1 3515 0
	movq	cfun(%rip), %rax	# cfun, cfun.520
	movzbl	424(%rax), %eax	# *cfun.520_11, D.28207
	.loc 1 3516 0
	andl	$64, %eax	#, D.28207
	.loc 1 3515 0
	testb	%al, %al	# D.28207
	jne	.L928	#,
	.loc 1 3518 0
	call	ix86_frame_pointer_required	#
	testl	%eax, %eax	# D.28208
	je	.L929	#,
.L928:
	.loc 1 3518 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.518
	jmp	.L930	#
.L929:
	.loc 1 3518 0 discriminator 2
	movl	$0, %eax	#, iftmp.518
.L930:
	.loc 1 3508 0 is_stmt 1
	movl	%eax, frame_pointer_needed(%rip)	# iftmp.518, frame_pointer_needed
	.loc 1 3520 0
	movl	$0, num_eliminable(%rip)	#, num_eliminable
	.loc 1 3523 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp93
	movq	%rax, -16(%rbp)	# tmp93, ep
	movq	$reg_eliminate_1, -8(%rbp)	#, ep1
	jmp	.L931	#
.L936:
	.loc 1 3526 0
	movq	-8(%rbp), %rax	# ep1, tmp94
	movl	(%rax), %edx	# ep1_3->from, D.28208
	movq	-16(%rbp), %rax	# ep, tmp95
	movl	%edx, (%rax)	# D.28208, ep_1->from
	.loc 1 3527 0
	movq	-8(%rbp), %rax	# ep1, tmp96
	movl	4(%rax), %edx	# ep1_3->to, D.28208
	movq	-16(%rbp), %rax	# ep, tmp97
	movl	%edx, 4(%rax)	# D.28208, ep_1->to
	.loc 1 3529 0
	movq	-16(%rbp), %rax	# ep, tmp98
	movl	4(%rax), %eax	# ep_1->to, D.28208
	.loc 1 3530 0
	cmpl	$7, %eax	#, D.28208
	jne	.L932	#,
	.loc 1 3529 0 discriminator 2
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.522
	.loc 1 3530 0 discriminator 2
	testl	%eax, %eax	# frame_pointer_needed.522
	jne	.L933	#,
.L932:
	.loc 1 3530 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# ep, tmp99
	movl	4(%rax), %eax	# ep_1->to, D.28208
	cmpl	$7, %eax	#, D.28208
	jne	.L934	#,
	.loc 1 3530 0 discriminator 5
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.523
	testl	%eax, %eax	# frame_pointer_needed.523
	jne	.L933	#,
.L934:
	.loc 1 3530 0 discriminator 4
	movl	$1, %eax	#, iftmp.521
	jmp	.L935	#
.L933:
	.loc 1 3530 0 discriminator 3
	movl	$0, %eax	#, iftmp.521
.L935:
	.loc 1 3529 0 is_stmt 1
	movq	-16(%rbp), %rdx	# ep, tmp100
	movl	%eax, 16(%rdx)	# iftmp.521, ep_1->can_eliminate_previous
	.loc 1 3528 0
	movq	-16(%rbp), %rax	# ep, tmp101
	movl	16(%rax), %edx	# ep_1->can_eliminate_previous, D.28208
	movq	-16(%rbp), %rax	# ep, tmp102
	movl	%edx, 12(%rax)	# D.28208, ep_1->can_eliminate
	.loc 1 3524 0
	addq	$48, -16(%rbp)	#, ep
	addq	$8, -8(%rbp)	#, ep1
.L931:
	.loc 1 3524 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.524
	addq	$192, %rax	#, D.28209
	.loc 1 3523 0 is_stmt 1 discriminator 1
	cmpq	-16(%rbp), %rax	# ep, D.28209
	ja	.L936	#,
	.loc 1 3543 0
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, tmp103
	movq	%rax, -16(%rbp)	# tmp103, ep
	jmp	.L937	#
.L942:
	.loc 1 3545 0
	movq	-16(%rbp), %rax	# ep, tmp104
	movl	12(%rax), %edx	# ep_2->can_eliminate, D.28208
	movl	num_eliminable(%rip), %eax	# num_eliminable, num_eliminable.525
	addl	%edx, %eax	# D.28208, num_eliminable.526
	movl	%eax, num_eliminable(%rip)	# num_eliminable.526, num_eliminable
	.loc 1 3546 0
	movq	-16(%rbp), %rax	# ep, tmp105
	movl	(%rax), %edx	# ep_2->from, D.28208
	movl	target_flags(%rip), %eax	# target_flags, target_flags.528
	andl	$33554432, %eax	#, D.28208
	testl	%eax, %eax	# D.28208
	je	.L938	#,
	.loc 1 3546 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.527
	jmp	.L939	#
.L938:
	.loc 1 3546 0 discriminator 2
	movl	$4, %eax	#, iftmp.527
.L939:
	.loc 1 3546 0 discriminator 3
	movl	%edx, %esi	# D.28208,
	movl	%eax, %edi	# iftmp.527,
	call	gen_rtx_REG	#
	movq	-16(%rbp), %rdx	# ep, tmp106
	movq	%rax, 32(%rdx)	# D.28210, ep_2->from_rtx
	.loc 1 3547 0 is_stmt 1 discriminator 3
	movq	-16(%rbp), %rax	# ep, tmp107
	movl	4(%rax), %edx	# ep_2->to, D.28208
	movl	target_flags(%rip), %eax	# target_flags, target_flags.530
	andl	$33554432, %eax	#, D.28208
	testl	%eax, %eax	# D.28208
	je	.L940	#,
	.loc 1 3547 0 is_stmt 0 discriminator 1
	movl	$5, %eax	#, iftmp.529
	jmp	.L941	#
.L940:
	.loc 1 3547 0 discriminator 2
	movl	$4, %eax	#, iftmp.529
.L941:
	.loc 1 3547 0 discriminator 3
	movl	%edx, %esi	# D.28208,
	movl	%eax, %edi	# iftmp.529,
	call	gen_rtx_REG	#
	movq	-16(%rbp), %rdx	# ep, tmp108
	movq	%rax, 40(%rdx)	# D.28210, ep_2->to_rtx
	.loc 1 3543 0 is_stmt 1 discriminator 3
	addq	$48, -16(%rbp)	#, ep
.L937:
	.loc 1 3543 0 is_stmt 0 discriminator 1
	movq	reg_eliminate(%rip), %rax	# reg_eliminate, reg_eliminate.531
	addq	$192, %rax	#, D.28209
	cmpq	-16(%rbp), %rax	# ep, D.28209
	ja	.L942	#,
	.loc 1 3549 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE34:
	.size	init_elim_table, .-init_elim_table
	.type	spill_hard_reg, @function
spill_hard_reg:
.LFB35:
	.loc 1 3565 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# regno, regno
	movl	%esi, -40(%rbp)	# cant_eliminate, cant_eliminate
	.loc 1 3568 0
	cmpl	$0, -40(%rbp)	#, cant_eliminate
	je	.L944	#,
	.loc 1 3570 0
	movl	-36(%rbp), %eax	# regno, regno.532
	movl	$1, %edx	#, tmp196
	movl	%eax, %ecx	# regno.532, tmp220
	salq	%cl, %rdx	# tmp220, D.28211
	movq	bad_spill_regs_global(%rip), %rax	# bad_spill_regs_global, bad_spill_regs_global.533
	orq	%rdx, %rax	# D.28211, bad_spill_regs_global.534
	movq	%rax, bad_spill_regs_global(%rip)	# bad_spill_regs_global.534, bad_spill_regs_global
	.loc 1 3571 0
	movl	-36(%rbp), %eax	# regno, tmp197
	movb	$1, regs_ever_live(%rax)	#, regs_ever_live
.L944:
	.loc 1 3577 0
	movl	$53, -20(%rbp)	#, i
	jmp	.L945	#
.L968:
	.loc 1 3578 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.535
	movl	-20(%rbp), %edx	# i, tmp198
	movslq	%edx, %rdx	# tmp198, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_21, D.28213
	testw	%ax, %ax	# D.28213
	js	.L946	#,
	.loc 1 3579 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.536
	movl	-20(%rbp), %edx	# i, tmp199
	movslq	%edx, %rdx	# tmp199, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_26, D.28213
	cwtl
	cmpl	-36(%rbp), %eax	# regno, D.28214
	ja	.L946	#,
	.loc 1 3580 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.537
	movl	-20(%rbp), %edx	# i, tmp200
	movslq	%edx, %rdx	# tmp200, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_32, D.28213
	movswl	%ax, %ecx	# D.28213, D.28214
	.loc 1 3581 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.539
	movl	-20(%rbp), %edx	# i, tmp201
	movslq	%edx, %rdx	# tmp201, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_38, D.28213
	cmpw	$7, %ax	#, D.28215
	jbe	.L947	#,
	.loc 1 3581 0 is_stmt 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.540
	movl	-20(%rbp), %edx	# i, tmp202
	movslq	%edx, %rdx	# tmp202, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_44, D.28213
	cmpw	$15, %ax	#, D.28215
	jbe	.L948	#,
.L947:
	.loc 1 3581 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.541
	movl	-20(%rbp), %edx	# i, tmp203
	movslq	%edx, %rdx	# tmp203, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_50, D.28213
	cmpw	$20, %ax	#, D.28215
	jbe	.L949	#,
	.loc 1 3581 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.542
	movl	-20(%rbp), %edx	# i, tmp204
	movslq	%edx, %rdx	# tmp204, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_56, D.28213
	cmpw	$28, %ax	#, D.28215
	jbe	.L948	#,
.L949:
	.loc 1 3581 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.543
	movl	-20(%rbp), %edx	# i, tmp205
	movslq	%edx, %rdx	# tmp205, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_62, D.28213
	cmpw	$44, %ax	#, D.28215
	jbe	.L950	#,
	.loc 1 3581 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.544
	movl	-20(%rbp), %edx	# i, tmp206
	movslq	%edx, %rdx	# tmp206, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_68, D.28213
	cmpw	$52, %ax	#, D.28215
	jbe	.L948	#,
.L950:
	.loc 1 3581 0 discriminator 2
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.545
	movl	-20(%rbp), %edx	# i, tmp207
	movslq	%edx, %rdx	# tmp207, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_74, D.28213
	cmpw	$28, %ax	#, D.28215
	jbe	.L951	#,
	.loc 1 3581 0 discriminator 1
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.546
	movl	-20(%rbp), %edx	# i, tmp208
	movslq	%edx, %rdx	# tmp208, D.28211
	addq	%rdx, %rdx	# D.28211
	addq	%rdx, %rax	# D.28211, D.28212
	movzwl	(%rax), %eax	# *_80, D.28213
	cmpw	$36, %ax	#, D.28215
	ja	.L951	#,
.L948:
	movq	cfun(%rip), %rax	# cfun, cfun.548
	movq	24(%rax), %rax	# cfun.548_134->emit, D.28216
	movq	80(%rax), %rax	# _135->x_regno_reg_rtx, D.28217
	movl	-20(%rbp), %edx	# i, tmp209
	movslq	%edx, %rdx	# tmp209, D.28211
	salq	$3, %rdx	#, D.28211
	addq	%rdx, %rax	# D.28211, D.28217
	movq	(%rax), %rax	# *_139, D.28218
	movzbl	2(%rax), %eax	# _140->mode, D.28219
	movzbl	%al, %eax	# D.28219, D.28220
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28221
	cmpl	$5, %eax	#, D.28221
	je	.L952	#,
	.loc 1 3581 0 discriminator 4
	movq	cfun(%rip), %rax	# cfun, cfun.549
	movq	24(%rax), %rax	# cfun.549_144->emit, D.28216
	movq	80(%rax), %rax	# _145->x_regno_reg_rtx, D.28217
	movl	-20(%rbp), %edx	# i, tmp211
	movslq	%edx, %rdx	# tmp211, D.28211
	salq	$3, %rdx	#, D.28211
	addq	%rdx, %rax	# D.28211, D.28217
	movq	(%rax), %rax	# *_149, D.28218
	movzbl	2(%rax), %eax	# _150->mode, D.28219
	movzbl	%al, %eax	# D.28219, D.28220
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28221
	cmpl	$6, %eax	#, D.28221
	jne	.L953	#,
.L952:
	.loc 1 3581 0 discriminator 3
	movl	$2, %eax	#, iftmp.547
	jmp	.L955	#
.L953:
	.loc 1 3581 0 discriminator 1
	movl	$1, %eax	#, iftmp.547
	jmp	.L955	#
.L951:
	.loc 1 3581 0 discriminator 2
	movq	cfun(%rip), %rax	# cfun, cfun.551
	movq	24(%rax), %rax	# cfun.551_83->emit, D.28216
	movq	80(%rax), %rax	# _84->x_regno_reg_rtx, D.28217
	movl	-20(%rbp), %edx	# i, tmp213
	movslq	%edx, %rdx	# tmp213, D.28211
	salq	$3, %rdx	#, D.28211
	addq	%rdx, %rax	# D.28211, D.28217
	movq	(%rax), %rax	# *_88, D.28218
	movzbl	2(%rax), %eax	# _89->mode, D.28219
	cmpb	$18, %al	#, D.28219
	jne	.L956	#,
	.loc 1 3581 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.553
	andl	$33554432, %eax	#, D.28220
	testl	%eax, %eax	# D.28220
	je	.L957	#,
	.loc 1 3581 0 discriminator 9
	movl	$2, %eax	#, iftmp.552
	jmp	.L955	#
.L957:
	.loc 1 3581 0 discriminator 10
	movl	$3, %eax	#, iftmp.552
	jmp	.L955	#
.L956:
	.loc 1 3581 0 discriminator 8
	movq	cfun(%rip), %rax	# cfun, cfun.555
	movq	24(%rax), %rax	# cfun.555_96->emit, D.28216
	movq	80(%rax), %rax	# _97->x_regno_reg_rtx, D.28217
	movl	-20(%rbp), %edx	# i, tmp214
	movslq	%edx, %rdx	# tmp214, D.28211
	salq	$3, %rdx	#, D.28211
	addq	%rdx, %rax	# D.28211, D.28217
	movq	(%rax), %rax	# *_101, D.28218
	movzbl	2(%rax), %eax	# _102->mode, D.28219
	cmpb	$24, %al	#, D.28219
	jne	.L960	#,
	.loc 1 3581 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.557
	andl	$33554432, %eax	#, D.28220
	testl	%eax, %eax	# D.28220
	je	.L961	#,
	.loc 1 3581 0 discriminator 13
	movl	$4, %eax	#, iftmp.556
	jmp	.L955	#
.L961:
	.loc 1 3581 0 discriminator 14
	movl	$6, %eax	#, iftmp.556
	jmp	.L955	#
.L960:
	.loc 1 3581 0 discriminator 12
	movq	cfun(%rip), %rax	# cfun, cfun.558
	movq	24(%rax), %rax	# cfun.558_109->emit, D.28216
	movq	80(%rax), %rax	# _110->x_regno_reg_rtx, D.28217
	movl	-20(%rbp), %edx	# i, tmp215
	movslq	%edx, %rdx	# tmp215, D.28211
	salq	$3, %rdx	#, D.28211
	addq	%rdx, %rax	# D.28211, D.28217
	movq	(%rax), %rax	# *_114, D.28218
	movzbl	2(%rax), %eax	# _115->mode, D.28219
	movzbl	%al, %eax	# D.28219, D.28220
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28219
	movzbl	%al, %edx	# D.28219, D.28220
	movl	target_flags(%rip), %eax	# target_flags, target_flags.560
	andl	$33554432, %eax	#, D.28220
	testl	%eax, %eax	# D.28220
	je	.L964	#,
	.loc 1 3581 0 discriminator 1
	movl	$8, %eax	#, iftmp.559
	jmp	.L965	#
.L964:
	.loc 1 3581 0 discriminator 2
	movl	$4, %eax	#, iftmp.559
.L965:
	.loc 1 3581 0 discriminator 3
	addl	%edx, %eax	# D.28220, D.28220
	subl	$1, %eax	#, D.28220
	movl	target_flags(%rip), %edx	# target_flags, target_flags.562
	andl	$33554432, %edx	#, D.28220
	testl	%edx, %edx	# D.28220
	je	.L966	#,
	.loc 1 3581 0 discriminator 1
	movl	$8, %ebx	#, iftmp.561
	jmp	.L967	#
.L966:
	.loc 1 3581 0 discriminator 2
	movl	$4, %ebx	#, iftmp.561
.L967:
	.loc 1 3581 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.561
.L955:
	.loc 1 3581 0 discriminator 6
	addl	%ecx, %eax	# D.28214, D.28214
	.loc 1 3580 0 is_stmt 1 discriminator 6
	cmpl	-36(%rbp), %eax	# regno, D.28214
	jbe	.L946	#,
	.loc 1 3584 0
	movl	-20(%rbp), %eax	# i, tmp219
	movl	%eax, %esi	# tmp219,
	movl	$spilled_pseudos, %edi	#,
	call	bitmap_set_bit	#
.L946:
	.loc 1 3577 0
	addl	$1, -20(%rbp)	#, i
.L945:
	.loc 1 3577 0 is_stmt 0 discriminator 1
	movl	max_regno(%rip), %eax	# max_regno, max_regno.563
	cmpl	%eax, -20(%rbp)	# max_regno.563, i
	jl	.L968	#,
	.loc 1 3585 0 is_stmt 1
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE35:
	.size	spill_hard_reg, .-spill_hard_reg
	.type	ior_hard_reg_set, @function
ior_hard_reg_set:
.LFB36:
	.loc 1 3593 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# set1, set1
	movq	%rsi, -16(%rbp)	# set2, set2
	.loc 1 3594 0
	movq	-8(%rbp), %rax	# set1, tmp62
	movq	(%rax), %rdx	# *set1_1(D), D.28222
	movq	-16(%rbp), %rax	# set2, tmp63
	movq	(%rax), %rax	# *set2_3(D), D.28222
	orq	%rax, %rdx	# D.28222, D.28222
	movq	-8(%rbp), %rax	# set1, tmp64
	movq	%rdx, (%rax)	# D.28222, *set1_1(D)
	.loc 1 3595 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE36:
	.size	ior_hard_reg_set, .-ior_hard_reg_set
	.section	.rodata
.LC9:
	.string	" Register %d now on stack.\n\n"
.LC10:
	.string	" Register %d now in %d.\n\n"
	.text
	.type	finish_spills, @function
finish_spills:
.LFB37:
	.loc 1 3605 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$176, %rsp	#,
	movl	%edi, -164(%rbp)	# global, global
	.loc 1 3607 0
	movl	$0, -152(%rbp)	#, something_changed
	.loc 1 3622 0
	movl	$0, n_spills(%rip)	#, n_spills
	.loc 1 3623 0
	movl	$0, -148(%rbp)	#, i
	jmp	.L971	#
.L975:
	.loc 1 3624 0
	movq	used_spill_regs(%rip), %rdx	# used_spill_regs, used_spill_regs.564
	movl	-148(%rbp), %eax	# i, tmp223
	movl	%eax, %ecx	# tmp223, tmp348
	shrq	%cl, %rdx	# tmp348, D.28223
	movq	%rdx, %rax	# D.28223, D.28223
	andl	$1, %eax	#, D.28223
	testq	%rax, %rax	# D.28223
	je	.L972	#,
	.loc 1 3626 0
	movl	n_spills(%rip), %eax	# n_spills, n_spills.565
	movl	%eax, %edx	# n_spills.565, D.28224
	movl	-148(%rbp), %eax	# i, tmp225
	cltq
	movw	%dx, spill_reg_order(%rax,%rax)	# D.28224, spill_reg_order
	.loc 1 3627 0
	movl	n_spills(%rip), %eax	# n_spills, n_spills.566
	leal	1(%rax), %edx	#, n_spills.568
	movl	%edx, n_spills(%rip)	# n_spills.568, n_spills
	movl	-148(%rbp), %edx	# i, tmp226
	cltq
	movw	%dx, spill_regs(%rax,%rax)	# D.28224, spill_regs
	.loc 1 3628 0
	movl	num_eliminable(%rip), %eax	# num_eliminable, num_eliminable.569
	testl	%eax, %eax	# num_eliminable.569
	je	.L973	#,
	.loc 1 3628 0 is_stmt 0 discriminator 1
	movl	-148(%rbp), %eax	# i, tmp229
	cltq
	movzbl	regs_ever_live(%rax), %eax	# regs_ever_live, D.28225
	testb	%al, %al	# D.28225
	jne	.L973	#,
	.loc 1 3629 0 is_stmt 1
	movl	$1, -152(%rbp)	#, something_changed
.L973:
	.loc 1 3630 0
	movl	-148(%rbp), %eax	# i, tmp231
	cltq
	movb	$1, regs_ever_live(%rax)	#, regs_ever_live
	jmp	.L974	#
.L972:
	.loc 1 3633 0
	movl	-148(%rbp), %eax	# i, tmp233
	cltq
	movw	$-1, spill_reg_order(%rax,%rax)	#, spill_reg_order
.L974:
	.loc 1 3623 0
	addl	$1, -148(%rbp)	#, i
.L971:
	.loc 1 3623 0 is_stmt 0 discriminator 1
	cmpl	$52, -148(%rbp)	#, i
	jle	.L975	#,
.LBB95:
	.loc 1 3635 0 is_stmt 1
	movq	spilled_pseudos(%rip), %rax	# spilled_pseudos.first, tmp234
	movq	%rax, -80(%rbp)	# tmp234, ptr_
	movl	$0, -120(%rbp)	#, indx_
	movl	$53, -144(%rbp)	#, bit_num_
	movl	$0, -140(%rbp)	#, word_num_
	jmp	.L976	#
.L978:
	.loc 1 3635 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# ptr_, tmp235
	movq	(%rax), %rax	# ptr__14->next, tmp236
	movq	%rax, -80(%rbp)	# tmp236, ptr_
.L976:
	cmpq	$0, -80(%rbp)	#, ptr_
	je	.L977	#,
	.loc 1 3635 0 discriminator 2
	movq	-80(%rbp), %rax	# ptr_, tmp237
	movl	16(%rax), %eax	# ptr__14->indx, D.28226
	cmpl	-120(%rbp), %eax	# indx_, D.28226
	jb	.L978	#,
.L977:
	.loc 1 3635 0 discriminator 3
	cmpq	$0, -80(%rbp)	#, ptr_
	je	.L979	#,
	.loc 1 3635 0 discriminator 1
	movq	-80(%rbp), %rax	# ptr_, tmp238
	movl	16(%rax), %eax	# ptr__14->indx, D.28226
	cmpl	-120(%rbp), %eax	# indx_, D.28226
	je	.L979	#,
	movl	$0, -144(%rbp)	#, bit_num_
	movl	$0, -140(%rbp)	#, word_num_
	jmp	.L980	#
.L979:
	.loc 1 3635 0 discriminator 2
	jmp	.L980	#
.L988:
	.loc 1 3635 0
	jmp	.L981	#
.L987:
.LBB96:
	.loc 1 3635 0 discriminator 2
	movq	-80(%rbp), %rax	# ptr_, tmp239
	movl	-140(%rbp), %edx	# word_num_, tmp240
	addq	$2, %rdx	#, tmp241
	movq	8(%rax,%rdx,8), %rax	# ptr__15->bits, tmp242
	movq	%rax, -72(%rbp)	# tmp242, word_
	cmpq	$0, -72(%rbp)	#, word_
	je	.L982	#,
	.loc 1 3635 0 discriminator 1
	jmp	.L983	#
.L986:
.LBB97:
	.loc 1 3635 0 discriminator 2
	movl	-144(%rbp), %eax	# bit_num_, bit_num_.570
	movl	$1, %edx	#, tmp243
	movl	%eax, %ecx	# bit_num_.570, tmp350
	salq	%cl, %rdx	# tmp350, tmp244
	movq	%rdx, %rax	# tmp244, tmp244
	movq	%rax, -32(%rbp)	# tmp244, mask_
	movq	-32(%rbp), %rax	# mask_, tmp245
	movq	-72(%rbp), %rdx	# word_, tmp246
	andq	%rdx, %rax	# tmp246, D.28223
	testq	%rax, %rax	# D.28223
	je	.L984	#,
	.loc 1 3635 0 discriminator 1
	movq	-32(%rbp), %rax	# mask_, tmp247
	notq	%rax	# D.28223
	andq	%rax, -72(%rbp)	# D.28223, word_
	movq	-80(%rbp), %rax	# ptr_, tmp248
	movl	16(%rax), %eax	# ptr__15->indx, D.28226
	leal	(%rax,%rax), %edx	#, D.28226
	movl	-140(%rbp), %eax	# word_num_, tmp249
	addl	%edx, %eax	# D.28226, D.28226
	sall	$6, %eax	#, D.28226
	movl	%eax, %edx	# D.28226, D.28226
	movl	-144(%rbp), %eax	# bit_num_, tmp250
	addl	%edx, %eax	# D.28226, D.28226
	movl	%eax, -148(%rbp)	# D.28226, i
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.571
	movl	-148(%rbp), %edx	# i, tmp251
	movslq	%edx, %rdx	# tmp251, D.28223
	addq	%rdx, %rdx	# D.28223
	addq	%rdx, %rax	# D.28223, D.28227
	movzwl	(%rax), %eax	# *_86, D.28224
	testw	%ax, %ax	# D.28224
	jns	.L985	#,
	movl	$__FUNCTION__.15150, %edx	#,
	movl	$3649, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L985:
	.loc 1 3635 0 discriminator 2
	movq	pseudo_previous_regs(%rip), %rax	# pseudo_previous_regs, pseudo_previous_regs.572
	movl	-148(%rbp), %edx	# i, tmp252
	movslq	%edx, %rdx	# tmp252, D.28223
	salq	$3, %rdx	#, D.28223
	addq	%rax, %rdx	# pseudo_previous_regs.572, D.28228
	movq	pseudo_previous_regs(%rip), %rax	# pseudo_previous_regs, pseudo_previous_regs.573
	movl	-148(%rbp), %ecx	# i, tmp253
	movslq	%ecx, %rcx	# tmp253, D.28223
	salq	$3, %rcx	#, D.28223
	addq	%rcx, %rax	# D.28223, D.28228
	movq	(%rax), %rsi	# *_95, D.28223
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.574
	movl	-148(%rbp), %ecx	# i, tmp254
	movslq	%ecx, %rcx	# tmp254, D.28223
	addq	%rcx, %rcx	# D.28223
	addq	%rcx, %rax	# D.28223, D.28227
	movzwl	(%rax), %eax	# *_100, D.28224
	cwtl
	movl	$1, %edi	#, tmp255
	movl	%eax, %ecx	# D.28229, tmp353
	salq	%cl, %rdi	# tmp353, D.28223
	movq	%rdi, %rax	# D.28223, D.28223
	orq	%rsi, %rax	# D.28223, D.28223
	movq	%rax, (%rdx)	# D.28223, *_91
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.575
	movl	-148(%rbp), %edx	# i, tmp256
	movslq	%edx, %rdx	# tmp256, D.28223
	addq	%rdx, %rdx	# D.28223
	addq	%rdx, %rax	# D.28223, D.28227
	movw	$-1, (%rax)	#, *_108
	movl	$1, -152(%rbp)	#, something_changed
	cmpq	$0, -72(%rbp)	#, word_
	jne	.L984	#,
	.loc 1 3635 0 discriminator 1
	jmp	.L982	#
.L984:
.LBE97:
	.loc 1 3635 0 discriminator 2
	addl	$1, -144(%rbp)	#, bit_num_
.L983:
	.loc 1 3635 0 discriminator 1
	cmpl	$63, -144(%rbp)	#, bit_num_
	jbe	.L986	#,
.L982:
	.loc 1 3635 0 discriminator 2
	movl	$0, -144(%rbp)	#, bit_num_
.LBE96:
	addl	$1, -140(%rbp)	#, word_num_
.L981:
	.loc 1 3635 0 discriminator 1
	cmpl	$1, -140(%rbp)	#, word_num_
	jbe	.L987	#,
	.loc 1 3635 0 discriminator 3
	movl	$0, -140(%rbp)	#, word_num_
	movq	-80(%rbp), %rax	# ptr_, tmp257
	movq	(%rax), %rax	# ptr__15->next, tmp258
	movq	%rax, -80(%rbp)	# tmp258, ptr_
.L980:
	.loc 1 3635 0 discriminator 1
	cmpq	$0, -80(%rbp)	#, ptr_
	jne	.L988	#,
.LBE95:
	.loc 1 3652 0 is_stmt 1
	cmpl	$0, -164(%rbp)	#, global
	je	.L989	#,
	.loc 1 3654 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.576
	cltq
	leaq	0(,%rax,8), %rdx	#, D.28223
	movq	pseudo_forbidden_regs(%rip), %rax	# pseudo_forbidden_regs, pseudo_forbidden_regs.577
	movl	$0, %esi	#,
	movq	%rax, %rdi	# pseudo_forbidden_regs.577,
	call	memset	#
	.loc 1 3658 0
	movq	insns_need_reload(%rip), %rax	# insns_need_reload, tmp259
	movq	%rax, -88(%rbp)	# tmp259, chain
	jmp	.L990	#
.L1015:
.LBB98:
	.loc 1 3660 0
	movq	-88(%rbp), %rax	# chain, tmp260
	movq	40(%rax), %rax	# chain_1->live_throughout.first, tmp261
	movq	%rax, -64(%rbp)	# tmp261, ptr_
	movl	$0, -116(%rbp)	#, indx_
	movl	$53, -136(%rbp)	#, bit_num_
	movl	$0, -132(%rbp)	#, word_num_
	jmp	.L991	#
.L993:
	.loc 1 3660 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# ptr_, tmp262
	movq	(%rax), %rax	# ptr__25->next, tmp263
	movq	%rax, -64(%rbp)	# tmp263, ptr_
.L991:
	cmpq	$0, -64(%rbp)	#, ptr_
	je	.L992	#,
	.loc 1 3660 0 discriminator 2
	movq	-64(%rbp), %rax	# ptr_, tmp264
	movl	16(%rax), %eax	# ptr__25->indx, D.28226
	cmpl	-116(%rbp), %eax	# indx_, D.28226
	jb	.L993	#,
.L992:
	.loc 1 3660 0 discriminator 3
	cmpq	$0, -64(%rbp)	#, ptr_
	je	.L994	#,
	.loc 1 3660 0 discriminator 1
	movq	-64(%rbp), %rax	# ptr_, tmp265
	movl	16(%rax), %eax	# ptr__25->indx, D.28226
	cmpl	-116(%rbp), %eax	# indx_, D.28226
	je	.L994	#,
	movl	$0, -136(%rbp)	#, bit_num_
	movl	$0, -132(%rbp)	#, word_num_
	jmp	.L995	#
.L994:
	.loc 1 3660 0 discriminator 2
	jmp	.L995	#
.L1002:
	.loc 1 3660 0
	jmp	.L996	#
.L1001:
.LBB99:
	.loc 1 3660 0 discriminator 2
	movq	-64(%rbp), %rax	# ptr_, tmp266
	movl	-132(%rbp), %edx	# word_num_, tmp267
	addq	$2, %rdx	#, tmp268
	movq	8(%rax,%rdx,8), %rax	# ptr__26->bits, tmp269
	movq	%rax, -56(%rbp)	# tmp269, word_
	cmpq	$0, -56(%rbp)	#, word_
	je	.L997	#,
	.loc 1 3660 0 discriminator 1
	jmp	.L998	#
.L1000:
.LBB100:
	.loc 1 3660 0 discriminator 2
	movl	-136(%rbp), %eax	# bit_num_, bit_num_.578
	movl	$1, %edx	#, tmp270
	movl	%eax, %ecx	# bit_num_.578, tmp355
	salq	%cl, %rdx	# tmp355, tmp271
	movq	%rdx, %rax	# tmp271, tmp271
	movq	%rax, -24(%rbp)	# tmp271, mask_
	movq	-24(%rbp), %rax	# mask_, tmp272
	movq	-56(%rbp), %rdx	# word_, tmp273
	andq	%rdx, %rax	# tmp273, D.28223
	testq	%rax, %rax	# D.28223
	je	.L999	#,
	.loc 1 3660 0 discriminator 1
	movq	-24(%rbp), %rax	# mask_, tmp274
	notq	%rax	# D.28223
	andq	%rax, -56(%rbp)	# D.28223, word_
	movq	-64(%rbp), %rax	# ptr_, tmp275
	movl	16(%rax), %eax	# ptr__26->indx, D.28226
	leal	(%rax,%rax), %edx	#, D.28226
	movl	-132(%rbp), %eax	# word_num_, tmp276
	addl	%edx, %eax	# D.28226, D.28226
	sall	$6, %eax	#, D.28226
	movl	%eax, %edx	# D.28226, D.28226
	movl	-136(%rbp), %eax	# bit_num_, tmp277
	addl	%edx, %eax	# D.28226, D.28226
	movl	%eax, -148(%rbp)	# D.28226, i
	movq	-88(%rbp), %rax	# chain, tmp278
	leaq	104(%rax), %rdx	#, D.28228
	movq	pseudo_forbidden_regs(%rip), %rax	# pseudo_forbidden_regs, pseudo_forbidden_regs.579
	movl	-148(%rbp), %ecx	# i, tmp279
	movslq	%ecx, %rcx	# tmp279, D.28223
	salq	$3, %rcx	#, D.28223
	addq	%rcx, %rax	# D.28223, D.28228
	movq	%rdx, %rsi	# D.28228,
	movq	%rax, %rdi	# D.28228,
	call	ior_hard_reg_set	#
	cmpq	$0, -56(%rbp)	#, word_
	jne	.L999	#,
	jmp	.L997	#
.L999:
.LBE100:
	.loc 1 3660 0 discriminator 2
	addl	$1, -136(%rbp)	#, bit_num_
.L998:
	.loc 1 3660 0 discriminator 1
	cmpl	$63, -136(%rbp)	#, bit_num_
	jbe	.L1000	#,
.L997:
	.loc 1 3660 0 discriminator 2
	movl	$0, -136(%rbp)	#, bit_num_
.LBE99:
	addl	$1, -132(%rbp)	#, word_num_
.L996:
	.loc 1 3660 0 discriminator 1
	cmpl	$1, -132(%rbp)	#, word_num_
	jbe	.L1001	#,
	.loc 1 3660 0 discriminator 3
	movl	$0, -132(%rbp)	#, word_num_
	movq	-64(%rbp), %rax	# ptr_, tmp280
	movq	(%rax), %rax	# ptr__26->next, tmp281
	movq	%rax, -64(%rbp)	# tmp281, ptr_
.L995:
	.loc 1 3660 0 discriminator 1
	cmpq	$0, -64(%rbp)	#, ptr_
	jne	.L1002	#,
.LBE98:
.LBB101:
	.loc 1 3666 0 is_stmt 1
	movq	-88(%rbp), %rax	# chain, tmp282
	movq	64(%rax), %rax	# chain_1->dead_or_set.first, tmp283
	movq	%rax, -48(%rbp)	# tmp283, ptr_
	movl	$0, -112(%rbp)	#, indx_
	movl	$53, -128(%rbp)	#, bit_num_
	movl	$0, -124(%rbp)	#, word_num_
	jmp	.L1003	#
.L1005:
	.loc 1 3666 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# ptr_, tmp284
	movq	(%rax), %rax	# ptr__36->next, tmp285
	movq	%rax, -48(%rbp)	# tmp285, ptr_
.L1003:
	cmpq	$0, -48(%rbp)	#, ptr_
	je	.L1004	#,
	.loc 1 3666 0 discriminator 2
	movq	-48(%rbp), %rax	# ptr_, tmp286
	movl	16(%rax), %eax	# ptr__36->indx, D.28226
	cmpl	-112(%rbp), %eax	# indx_, D.28226
	jb	.L1005	#,
.L1004:
	.loc 1 3666 0 discriminator 3
	cmpq	$0, -48(%rbp)	#, ptr_
	je	.L1006	#,
	.loc 1 3666 0 discriminator 1
	movq	-48(%rbp), %rax	# ptr_, tmp287
	movl	16(%rax), %eax	# ptr__36->indx, D.28226
	cmpl	-112(%rbp), %eax	# indx_, D.28226
	je	.L1006	#,
	movl	$0, -128(%rbp)	#, bit_num_
	movl	$0, -124(%rbp)	#, word_num_
	jmp	.L1007	#
.L1006:
	.loc 1 3666 0 discriminator 2
	jmp	.L1007	#
.L1014:
	.loc 1 3666 0
	jmp	.L1008	#
.L1013:
.LBB102:
	.loc 1 3666 0 discriminator 2
	movq	-48(%rbp), %rax	# ptr_, tmp288
	movl	-124(%rbp), %edx	# word_num_, tmp289
	addq	$2, %rdx	#, tmp290
	movq	8(%rax,%rdx,8), %rax	# ptr__37->bits, tmp291
	movq	%rax, -40(%rbp)	# tmp291, word_
	cmpq	$0, -40(%rbp)	#, word_
	je	.L1009	#,
	.loc 1 3666 0 discriminator 1
	jmp	.L1010	#
.L1012:
.LBB103:
	.loc 1 3666 0 discriminator 2
	movl	-128(%rbp), %eax	# bit_num_, bit_num_.580
	movl	$1, %edx	#, tmp292
	movl	%eax, %ecx	# bit_num_.580, tmp358
	salq	%cl, %rdx	# tmp358, tmp293
	movq	%rdx, %rax	# tmp293, tmp293
	movq	%rax, -16(%rbp)	# tmp293, mask_
	movq	-16(%rbp), %rax	# mask_, tmp294
	movq	-40(%rbp), %rdx	# word_, tmp295
	andq	%rdx, %rax	# tmp295, D.28223
	testq	%rax, %rax	# D.28223
	je	.L1011	#,
	.loc 1 3666 0 discriminator 1
	movq	-16(%rbp), %rax	# mask_, tmp296
	notq	%rax	# D.28223
	andq	%rax, -40(%rbp)	# D.28223, word_
	movq	-48(%rbp), %rax	# ptr_, tmp297
	movl	16(%rax), %eax	# ptr__37->indx, D.28226
	leal	(%rax,%rax), %edx	#, D.28226
	movl	-124(%rbp), %eax	# word_num_, tmp298
	addl	%edx, %eax	# D.28226, D.28226
	sall	$6, %eax	#, D.28226
	movl	%eax, %edx	# D.28226, D.28226
	movl	-128(%rbp), %eax	# bit_num_, tmp299
	addl	%edx, %eax	# D.28226, D.28226
	movl	%eax, -148(%rbp)	# D.28226, i
	movq	-88(%rbp), %rax	# chain, tmp300
	leaq	104(%rax), %rdx	#, D.28228
	movq	pseudo_forbidden_regs(%rip), %rax	# pseudo_forbidden_regs, pseudo_forbidden_regs.581
	movl	-148(%rbp), %ecx	# i, tmp301
	movslq	%ecx, %rcx	# tmp301, D.28223
	salq	$3, %rcx	#, D.28223
	addq	%rcx, %rax	# D.28223, D.28228
	movq	%rdx, %rsi	# D.28228,
	movq	%rax, %rdi	# D.28228,
	call	ior_hard_reg_set	#
	cmpq	$0, -40(%rbp)	#, word_
	jne	.L1011	#,
	jmp	.L1009	#
.L1011:
.LBE103:
	.loc 1 3666 0 discriminator 2
	addl	$1, -128(%rbp)	#, bit_num_
.L1010:
	.loc 1 3666 0 discriminator 1
	cmpl	$63, -128(%rbp)	#, bit_num_
	jbe	.L1012	#,
.L1009:
	.loc 1 3666 0 discriminator 2
	movl	$0, -128(%rbp)	#, bit_num_
.LBE102:
	addl	$1, -124(%rbp)	#, word_num_
.L1008:
	.loc 1 3666 0 discriminator 1
	cmpl	$1, -124(%rbp)	#, word_num_
	jbe	.L1013	#,
	.loc 1 3666 0 discriminator 3
	movl	$0, -124(%rbp)	#, word_num_
	movq	-48(%rbp), %rax	# ptr_, tmp302
	movq	(%rax), %rax	# ptr__37->next, tmp303
	movq	%rax, -48(%rbp)	# tmp303, ptr_
.L1007:
	.loc 1 3666 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, ptr_
	jne	.L1014	#,
.LBE101:
	.loc 1 3658 0 is_stmt 1
	movq	-88(%rbp), %rax	# chain, tmp304
	movq	16(%rax), %rax	# chain_1->next_need_reload, tmp305
	movq	%rax, -88(%rbp)	# tmp305, chain
.L990:
	.loc 1 3658 0 is_stmt 0 discriminator 1
	cmpq	$0, -88(%rbp)	#, chain
	jne	.L1015	#,
	.loc 1 3679 0 is_stmt 1
	movl	$53, -148(%rbp)	#, i
	jmp	.L1016	#
.L1018:
	.loc 1 3680 0
	movq	reg_old_renumber(%rip), %rax	# reg_old_renumber, reg_old_renumber.582
	movl	-148(%rbp), %edx	# i, tmp306
	movslq	%edx, %rdx	# tmp306, D.28223
	addq	%rdx, %rdx	# D.28223
	addq	%rdx, %rax	# D.28223, D.28227
	movzwl	(%rax), %edx	# *_189, D.28224
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.583
	movl	-148(%rbp), %ecx	# i, tmp307
	movslq	%ecx, %rcx	# tmp307, D.28223
	addq	%rcx, %rcx	# D.28223
	addq	%rcx, %rax	# D.28223, D.28227
	movzwl	(%rax), %eax	# *_194, D.28224
	cmpw	%ax, %dx	# D.28224, D.28224
	je	.L1017	#,
.LBB104:
	.loc 1 3683 0
	movq	bad_spill_regs_global(%rip), %rax	# bad_spill_regs_global, tmp308
	movq	%rax, -8(%rbp)	# tmp308, forbidden
	.loc 1 3684 0
	movq	pseudo_forbidden_regs(%rip), %rax	# pseudo_forbidden_regs, pseudo_forbidden_regs.584
	movl	-148(%rbp), %edx	# i, tmp309
	movslq	%edx, %rdx	# tmp309, D.28223
	salq	$3, %rdx	#, D.28223
	addq	%rdx, %rax	# D.28223, D.28228
	movq	(%rax), %rax	# *_200, D.28223
	orq	%rax, -8(%rbp)	# D.28223, forbidden
	.loc 1 3685 0
	movq	pseudo_previous_regs(%rip), %rax	# pseudo_previous_regs, pseudo_previous_regs.585
	movl	-148(%rbp), %edx	# i, tmp310
	movslq	%edx, %rdx	# tmp310, D.28223
	salq	$3, %rdx	#, D.28223
	addq	%rdx, %rax	# D.28223, D.28228
	movq	(%rax), %rax	# *_206, D.28223
	orq	%rax, -8(%rbp)	# D.28223, forbidden
	.loc 1 3686 0
	movq	-8(%rbp), %rdx	# forbidden, tmp311
	movl	-148(%rbp), %eax	# i, tmp312
	movq	%rdx, %rsi	# tmp311,
	movl	%eax, %edi	# tmp312,
	call	retry_global_alloc	#
	.loc 1 3687 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.586
	movl	-148(%rbp), %edx	# i, tmp313
	movslq	%edx, %rdx	# tmp313, D.28223
	addq	%rdx, %rdx	# D.28223
	addq	%rdx, %rax	# D.28223, D.28227
	movzwl	(%rax), %eax	# *_212, D.28224
	testw	%ax, %ax	# D.28224
	js	.L1017	#,
	.loc 1 3688 0
	movl	-148(%rbp), %eax	# i, tmp314
	movl	%eax, %esi	# tmp314,
	movl	$spilled_pseudos, %edi	#,
	call	bitmap_clear_bit	#
.L1017:
.LBE104:
	.loc 1 3679 0
	addl	$1, -148(%rbp)	#, i
.L1016:
	.loc 1 3679 0 is_stmt 0 discriminator 1
	movl	max_regno(%rip), %eax	# max_regno, max_regno.587
	cmpl	%eax, -148(%rbp)	# max_regno.587, i
	jl	.L1018	#,
.L989:
	.loc 1 3695 0 is_stmt 1
	movq	reload_insn_chain(%rip), %rax	# reload_insn_chain, tmp315
	movq	%rax, -88(%rbp)	# tmp315, chain
	jmp	.L1019	#
.L1022:
.LBB105:
	.loc 1 3700 0
	movq	-88(%rbp), %rax	# chain, tmp316
	leaq	40(%rax), %rsi	#, D.28230
	movq	-88(%rbp), %rax	# chain, tmp317
	addq	$40, %rax	#, D.28230
	movl	$1, %ecx	#,
	movl	$spilled_pseudos, %edx	#,
	movq	%rax, %rdi	# D.28230,
	call	bitmap_operation	#
	.loc 1 3701 0
	movq	-88(%rbp), %rax	# chain, tmp318
	leaq	64(%rax), %rsi	#, D.28230
	movq	-88(%rbp), %rax	# chain, tmp319
	addq	$64, %rax	#, D.28230
	movl	$1, %ecx	#,
	movl	$spilled_pseudos, %edx	#,
	movq	%rax, %rdi	# D.28230,
	call	bitmap_operation	#
	.loc 1 3705 0
	movq	-88(%rbp), %rax	# chain, tmp320
	movzbl	262(%rax), %eax	# *chain_2, D.28231
	andl	$1, %eax	#, D.28231
	testb	%al, %al	# D.28231
	je	.L1020	#,
	.loc 1 3707 0
	movq	$0, -104(%rbp)	#, used_by_pseudos
	movq	-88(%rbp), %rax	# chain, tmp321
	leaq	40(%rax), %rdx	#, D.28230
	leaq	-104(%rbp), %rax	#, tmp322
	movq	%rdx, %rsi	# D.28230,
	movq	%rax, %rdi	# tmp322,
	call	reg_set_to_hard_reg_set	#
	.loc 1 3708 0
	movq	$0, -96(%rbp)	#, used_by_pseudos2
	movq	-88(%rbp), %rax	# chain, tmp323
	leaq	64(%rax), %rdx	#, D.28230
	leaq	-96(%rbp), %rax	#, tmp324
	movq	%rdx, %rsi	# D.28230,
	movq	%rax, %rdi	# tmp324,
	call	reg_set_to_hard_reg_set	#
	.loc 1 3709 0
	movq	-104(%rbp), %rdx	# used_by_pseudos, used_by_pseudos.588
	movq	-96(%rbp), %rax	# used_by_pseudos2, used_by_pseudos2.589
	orq	%rdx, %rax	# used_by_pseudos.588, used_by_pseudos.590
	movq	%rax, -104(%rbp)	# used_by_pseudos.590, used_by_pseudos
	.loc 1 3712 0
	movq	-88(%rbp), %rax	# chain, tmp325
	movq	104(%rax), %rax	# chain_2->used_spill_regs, used_by_pseudos2.591
	movq	%rax, -96(%rbp)	# used_by_pseudos2.591, used_by_pseudos2
	.loc 1 3714 0
	movq	-88(%rbp), %rax	# chain, tmp326
	leaq	40(%rax), %rdx	#, D.28230
	leaq	-104(%rbp), %rax	#, tmp327
	movq	%rdx, %rsi	# D.28230,
	movq	%rax, %rdi	# tmp327,
	call	compute_use_by_pseudos	#
	.loc 1 3715 0
	movq	-88(%rbp), %rax	# chain, tmp328
	leaq	64(%rax), %rdx	#, D.28230
	leaq	-104(%rbp), %rax	#, tmp329
	movq	%rdx, %rsi	# D.28230,
	movq	%rax, %rdi	# tmp329,
	call	compute_use_by_pseudos	#
	.loc 1 3716 0
	movq	-104(%rbp), %rax	# used_by_pseudos, used_by_pseudos.592
	notq	%rax	# D.28223
	movq	%rax, %rdx	# D.28223, D.28223
	movq	-88(%rbp), %rax	# chain, tmp330
	movq	%rdx, 104(%rax)	# D.28223, chain_2->used_spill_regs
	.loc 1 3717 0
	movq	-88(%rbp), %rax	# chain, tmp331
	movq	104(%rax), %rdx	# chain_2->used_spill_regs, D.28223
	movq	used_spill_regs(%rip), %rax	# used_spill_regs, used_spill_regs.593
	andq	%rax, %rdx	# used_spill_regs.593, D.28223
	movq	-88(%rbp), %rax	# chain, tmp332
	movq	%rdx, 104(%rax)	# D.28223, chain_2->used_spill_regs
	.loc 1 3720 0
	movq	-88(%rbp), %rax	# chain, tmp333
	movq	104(%rax), %rax	# chain_2->used_spill_regs, D.28223
	notq	%rax	# D.28223
	movq	%rax, %rdx	# D.28223, D.28223
	movq	-96(%rbp), %rax	# used_by_pseudos2, used_by_pseudos2.594
	andq	%rdx, %rax	# D.28223, D.28223
	testq	%rax, %rax	# D.28223
	jne	.L1021	#,
	.loc 1 3720 0 is_stmt 0 discriminator 1
	jmp	.L1020	#
.L1021:
	.loc 1 3721 0 is_stmt 1
	movl	$__FUNCTION__.15150, %edx	#,
	movl	$3721, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1020:
.LBE105:
	.loc 1 3695 0
	movq	-88(%rbp), %rax	# chain, tmp334
	movq	(%rax), %rax	# chain_2->next, tmp335
	movq	%rax, -88(%rbp)	# tmp335, chain
.L1019:
	.loc 1 3695 0 is_stmt 0 discriminator 1
	cmpq	$0, -88(%rbp)	#, chain
	jne	.L1022	#,
	.loc 1 3727 0 is_stmt 1
	movl	$53, -148(%rbp)	#, i
	jmp	.L1023	#
.L1027:
.LBB106:
	.loc 1 3729 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.595
	movl	-148(%rbp), %edx	# i, tmp336
	movslq	%edx, %rdx	# tmp336, D.28223
	addq	%rdx, %rdx	# D.28223
	addq	%rdx, %rax	# D.28223, D.28227
	movzwl	(%rax), %eax	# *_245, D.28224
	cwtl
	movl	%eax, -108(%rbp)	# tmp337, regno
	.loc 1 3730 0
	movq	reg_old_renumber(%rip), %rax	# reg_old_renumber, reg_old_renumber.596
	movl	-148(%rbp), %edx	# i, tmp338
	movslq	%edx, %rdx	# tmp338, D.28223
	addq	%rdx, %rdx	# D.28223
	addq	%rdx, %rax	# D.28223, D.28227
	movzwl	(%rax), %eax	# *_251, D.28224
	cwtl
	cmpl	-108(%rbp), %eax	# regno, D.28229
	jne	.L1024	#,
	.loc 1 3731 0
	jmp	.L1025	#
.L1024:
	.loc 1 3733 0
	movq	reg_old_renumber(%rip), %rax	# reg_old_renumber, reg_old_renumber.597
	movl	-148(%rbp), %edx	# i, tmp339
	movslq	%edx, %rdx	# tmp339, D.28223
	addq	%rdx, %rdx	# D.28223
	addq	%rdx, %rax	# D.28223, D.28227
	movzwl	(%rax), %eax	# *_257, D.28224
	movswl	%ax, %edx	# D.28224, D.28229
	movl	-148(%rbp), %eax	# i, tmp340
	movl	%edx, %esi	# D.28229,
	movl	%eax, %edi	# tmp340,
	call	alter_reg	#
	.loc 1 3734 0
	movq	reg_old_renumber(%rip), %rax	# reg_old_renumber, reg_old_renumber.598
	movl	-148(%rbp), %edx	# i, tmp341
	movslq	%edx, %rdx	# tmp341, D.28223
	addq	%rdx, %rdx	# D.28223
	addq	%rax, %rdx	# reg_old_renumber.598, D.28227
	movl	-108(%rbp), %eax	# regno, tmp342
	movw	%ax, (%rdx)	# D.28224, *_263
	.loc 1 3735 0
	movq	rtl_dump_file(%rip), %rax	# rtl_dump_file, rtl_dump_file.599
	testq	%rax, %rax	# rtl_dump_file.599
	je	.L1025	#,
	.loc 1 3737 0
	cmpl	$-1, -108(%rbp)	#, regno
	jne	.L1026	#,
	.loc 1 3738 0
	movq	rtl_dump_file(%rip), %rax	# rtl_dump_file, rtl_dump_file.600
	movl	-148(%rbp), %edx	# i, tmp343
	movl	$.LC9, %esi	#,
	movq	%rax, %rdi	# rtl_dump_file.600,
	movl	$0, %eax	#,
	call	fprintf	#
	jmp	.L1025	#
.L1026:
	.loc 1 3741 0
	movq	reg_renumber(%rip), %rax	# reg_renumber, reg_renumber.601
	movl	-148(%rbp), %edx	# i, tmp344
	movslq	%edx, %rdx	# tmp344, D.28223
	addq	%rdx, %rdx	# D.28223
	addq	%rdx, %rax	# D.28223, D.28227
	movzwl	(%rax), %eax	# *_270, D.28224
	.loc 1 3740 0
	movswl	%ax, %ecx	# D.28224, D.28229
	movq	rtl_dump_file(%rip), %rax	# rtl_dump_file, rtl_dump_file.602
	movl	-148(%rbp), %edx	# i, tmp345
	movl	$.LC10, %esi	#,
	movq	%rax, %rdi	# rtl_dump_file.602,
	movl	$0, %eax	#,
	call	fprintf	#
.L1025:
.LBE106:
	.loc 1 3727 0
	addl	$1, -148(%rbp)	#, i
.L1023:
	.loc 1 3727 0 is_stmt 0 discriminator 1
	movl	max_regno(%rip), %eax	# max_regno, max_regno.603
	cmpl	%eax, -148(%rbp)	# max_regno.603, i
	jl	.L1027	#,
	.loc 1 3745 0 is_stmt 1
	movl	-152(%rbp), %eax	# something_changed, D.28229
	.loc 1 3746 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE37:
	.size	finish_spills, .-finish_spills
	.type	scan_paradoxical_subregs, @function
scan_paradoxical_subregs:
.LFB38:
	.loc 1 3755 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# x, x
	.loc 1 3758 0
	movq	-40(%rbp), %rax	# x, tmp94
	movzwl	(%rax), %eax	# x_3(D)->code, D.28234
	movzwl	%ax, %eax	# D.28234, tmp95
	movl	%eax, -12(%rbp)	# tmp95, code
	.loc 1 3760 0
	movl	-12(%rbp), %eax	# code, tmp97
	subl	$48, %eax	#, tmp96
	cmpl	$21, %eax	#, tmp96
	ja	.L1044	#,
	movl	%eax, %eax	# tmp96, tmp98
	movq	.L1032(,%rax,8), %rax	#, tmp99
	jmp	*%rax	# tmp99
	.section	.rodata
	.align 8
	.align 4
.L1032:
	.quad	.L1045
	.quad	.L1045
	.quad	.L1044
	.quad	.L1044
	.quad	.L1044
	.quad	.L1044
	.quad	.L1045
	.quad	.L1045
	.quad	.L1045
	.quad	.L1044
	.quad	.L1045
	.quad	.L1045
	.quad	.L1044
	.quad	.L1045
	.quad	.L1044
	.quad	.L1034
	.quad	.L1044
	.quad	.L1044
	.quad	.L1044
	.quad	.L1045
	.quad	.L1045
	.quad	.L1045
	.text
.L1034:
	.loc 1 3783 0
	movq	-40(%rbp), %rax	# x, tmp100
	movq	8(%rax), %rax	# x_3(D)->fld[0].rtx, D.28235
	movzwl	(%rax), %eax	# _6->code, D.28234
	cmpw	$61, %ax	#, D.28234
	jne	.L1036	#,
	.loc 1 3784 0
	movq	-40(%rbp), %rax	# x, tmp101
	movzbl	2(%rax), %eax	# x_3(D)->mode, D.28236
	movzbl	%al, %eax	# D.28236, D.28237
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28236
	movq	-40(%rbp), %rax	# x, tmp103
	movq	8(%rax), %rax	# x_3(D)->fld[0].rtx, D.28235
	movzbl	2(%rax), %eax	# _11->mode, D.28236
	movzbl	%al, %eax	# D.28236, D.28237
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28236
	cmpb	%al, %dl	# D.28236, D.28236
	jbe	.L1036	#,
	.loc 1 3785 0
	movq	reg_max_ref_width(%rip), %rdx	# reg_max_ref_width, reg_max_ref_width.604
	movq	-40(%rbp), %rax	# x, tmp105
	movq	8(%rax), %rax	# x_3(D)->fld[0].rtx, D.28235
	movl	8(%rax), %eax	# _16->fld[0].rtuint, D.28238
	movl	%eax, %eax	# D.28238, D.28239
	salq	$2, %rax	#, D.28239
	addq	%rax, %rdx	# D.28239, D.28240
	.loc 1 3786 0
	movq	-40(%rbp), %rax	# x, tmp106
	movzbl	2(%rax), %eax	# x_3(D)->mode, D.28236
	movzbl	%al, %eax	# D.28236, D.28237
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28236
	movzbl	%al, %eax	# D.28236, D.28238
	movl	%eax, (%rdx)	# D.28238, *_20
	.loc 1 3787 0
	jmp	.L1029	#
.L1036:
	jmp	.L1029	#
.L1044:
	.loc 1 3790 0
	nop
	.loc 1 3793 0
	movl	-12(%rbp), %eax	# code, code.605
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp109
	movq	%rax, -8(%rbp)	# tmp109, fmt
	.loc 1 3794 0
	movl	-12(%rbp), %eax	# code, code.606
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.28236
	movzbl	%al, %eax	# D.28236, D.28237
	subl	$1, %eax	#, tmp111
	movl	%eax, -20(%rbp)	# tmp111, i
	jmp	.L1037	#
.L1042:
	.loc 1 3796 0
	movl	-20(%rbp), %eax	# i, tmp112
	movslq	%eax, %rdx	# tmp112, D.28241
	movq	-8(%rbp), %rax	# fmt, tmp113
	addq	%rdx, %rax	# D.28241, D.28242
	movzbl	(%rax), %eax	# *_32, D.28243
	cmpb	$101, %al	#, D.28243
	jne	.L1038	#,
	.loc 1 3797 0
	movq	-40(%rbp), %rax	# x, tmp114
	movl	-20(%rbp), %edx	# i, tmp116
	movslq	%edx, %rdx	# tmp116, tmp115
	movq	8(%rax,%rdx,8), %rax	# x_3(D)->fld[i_1].rtx, D.28235
	movq	%rax, %rdi	# D.28235,
	call	scan_paradoxical_subregs	#
	jmp	.L1039	#
.L1038:
	.loc 1 3798 0
	movl	-20(%rbp), %eax	# i, tmp117
	movslq	%eax, %rdx	# tmp117, D.28241
	movq	-8(%rbp), %rax	# fmt, tmp118
	addq	%rdx, %rax	# D.28241, D.28242
	movzbl	(%rax), %eax	# *_36, D.28243
	cmpb	$69, %al	#, D.28243
	jne	.L1039	#,
.LBB107:
	.loc 1 3801 0
	movq	-40(%rbp), %rax	# x, tmp119
	movl	-20(%rbp), %edx	# i, tmp121
	movslq	%edx, %rdx	# tmp121, tmp120
	movq	8(%rax,%rdx,8), %rax	# x_3(D)->fld[i_1].rtvec, D.28244
	movl	(%rax), %eax	# _38->num_elem, D.28237
	subl	$1, %eax	#, tmp122
	movl	%eax, -16(%rbp)	# tmp122, j
	jmp	.L1040	#
.L1041:
	.loc 1 3802 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp123
	movl	-20(%rbp), %edx	# i, tmp125
	movslq	%edx, %rdx	# tmp125, tmp124
	movq	8(%rax,%rdx,8), %rax	# x_3(D)->fld[i_1].rtvec, D.28244
	movl	-16(%rbp), %edx	# j, tmp127
	movslq	%edx, %rdx	# tmp127, tmp126
	movq	8(%rax,%rdx,8), %rax	# _41->elem, D.28235
	movq	%rax, %rdi	# D.28235,
	call	scan_paradoxical_subregs	#
	.loc 1 3801 0 discriminator 2
	subl	$1, -16(%rbp)	#, j
.L1040:
	.loc 1 3801 0 is_stmt 0 discriminator 1
	cmpl	$0, -16(%rbp)	#, j
	jns	.L1041	#,
.L1039:
.LBE107:
	.loc 1 3794 0 is_stmt 1
	subl	$1, -20(%rbp)	#, i
.L1037:
	.loc 1 3794 0 is_stmt 0 discriminator 1
	cmpl	$0, -20(%rbp)	#, i
	jns	.L1042	#,
	jmp	.L1029	#
.L1045:
	.loc 1 3780 0 is_stmt 1
	nop
.L1029:
	.loc 1 3805 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE38:
	.size	scan_paradoxical_subregs, .-scan_paradoxical_subregs
	.section	.rodata
	.align 8
.LC11:
	.string	"`asm' operand requires impossible reload"
	.text
	.type	reload_as_needed, @function
reload_as_needed:
.LFB39:
	.loc 1 3819 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -84(%rbp)	# live_known, live_known
	.loc 1 3826 0
	movl	$424, %edx	#,
	movl	$0, %esi	#,
	movl	$spill_reg_rtx, %edi	#,
	call	memset	#
	.loc 1 3827 0
	movl	$424, %edx	#,
	movl	$0, %esi	#,
	movl	$spill_reg_store, %edi	#,
	call	memset	#
	.loc 1 3828 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.607
	cltq
	movl	$8, %esi	#,
	movq	%rax, %rdi	# D.28245,
	call	xcalloc	#
	movq	%rax, reg_last_reload_reg(%rip)	# reg_last_reload_reg.608, reg_last_reload_reg
	.loc 1 3829 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.609
	cltq
	movq	%rax, %rdi	# D.28245,
	call	xmalloc	#
	movq	%rax, reg_has_output_reload(%rip)	# reg_has_output_reload.610, reg_has_output_reload
	.loc 1 3830 0
	movq	$0, reg_reloaded_valid(%rip)	#, reg_reloaded_valid
	.loc 1 3832 0
	call	set_initial_elim_offsets	#
	.loc 1 3834 0
	movq	reload_insn_chain(%rip), %rax	# reload_insn_chain, tmp129
	movq	%rax, -80(%rbp)	# tmp129, chain
	jmp	.L1047	#
.L1069:
.LBB108:
	.loc 1 3837 0
	movq	-80(%rbp), %rax	# chain, tmp130
	movq	32(%rax), %rax	# chain_1->insn, tmp131
	movq	%rax, -56(%rbp)	# tmp131, insn
	.loc 1 3838 0
	movq	-56(%rbp), %rax	# insn, tmp132
	movq	24(%rax), %rax	# insn_11->fld[2].rtx, tmp133
	movq	%rax, -48(%rbp)	# tmp133, old_next
	.loc 1 3842 0
	movq	-56(%rbp), %rax	# insn, tmp134
	movzwl	(%rax), %eax	# insn_11->code, D.28246
	cmpw	$36, %ax	#, D.28246
	jne	.L1048	#,
	.loc 1 3843 0
	movq	-56(%rbp), %rax	# insn, tmp135
	movq	%rax, %rdi	# tmp135,
	call	set_offsets_for_label	#
	jmp	.L1049	#
.L1048:
	.loc 1 3845 0
	movq	-56(%rbp), %rax	# insn, tmp136
	movzwl	(%rax), %eax	# insn_11->code, D.28246
	movzwl	%ax, %eax	# D.28246, D.28247
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28248
	cmpb	$105, %al	#, D.28248
	jne	.L1049	#,
.LBB109:
	.loc 1 3847 0
	movq	-56(%rbp), %rax	# insn, tmp138
	movq	32(%rax), %rax	# insn_11->fld[3].rtx, tmp139
	movq	%rax, -40(%rbp)	# tmp139, oldpat
	.loc 1 3852 0
	movq	-56(%rbp), %rax	# insn, tmp140
	movq	32(%rax), %rax	# insn_11->fld[3].rtx, D.28249
	movzwl	(%rax), %eax	# _18->code, D.28246
	cmpw	$48, %ax	#, D.28246
	je	.L1050	#,
	.loc 1 3853 0
	movq	-56(%rbp), %rax	# insn, tmp141
	movq	32(%rax), %rax	# insn_11->fld[3].rtx, D.28249
	movzwl	(%rax), %eax	# _20->code, D.28246
	cmpw	$49, %ax	#, D.28246
	jne	.L1051	#,
.L1050:
	.loc 1 3854 0
	movq	-56(%rbp), %rax	# insn, tmp142
	movq	32(%rax), %rax	# insn_11->fld[3].rtx, D.28249
	movq	8(%rax), %rax	# _22->fld[0].rtx, D.28249
	movzwl	(%rax), %eax	# _23->code, D.28246
	cmpw	$66, %ax	#, D.28246
	jne	.L1051	#,
	.loc 1 3855 0
	movq	-56(%rbp), %rax	# insn, tmp143
	movq	32(%rax), %rax	# insn_11->fld[3].rtx, D.28249
	movq	8(%rax), %rbx	# _25->fld[0].rtx, D.28249
	.loc 1 3857 0
	movq	-56(%rbp), %rax	# insn, tmp144
	movq	32(%rax), %rax	# insn_11->fld[3].rtx, D.28249
	movq	8(%rax), %rax	# _27->fld[0].rtx, D.28249
	movzbl	2(%rax), %eax	# _28->mode, D.28250
	.loc 1 3856 0
	movzbl	%al, %ecx	# D.28250, D.28251
	movq	-56(%rbp), %rax	# insn, tmp145
	movq	32(%rax), %rax	# insn_11->fld[3].rtx, D.28249
	movq	8(%rax), %rax	# _31->fld[0].rtx, D.28249
	movq	8(%rax), %rax	# _32->fld[0].rtx, D.28249
	movl	$0, %edx	#,
	movl	%ecx, %esi	# D.28251,
	movq	%rax, %rdi	# D.28249,
	call	eliminate_regs	#
	movq	%rax, 8(%rbx)	# D.28249, _26->fld[0].rtx
.L1051:
	.loc 1 3862 0
	movl	num_eliminable(%rip), %eax	# num_eliminable, num_eliminable.611
	testl	%eax, %eax	# num_eliminable.611
	jne	.L1052	#,
	.loc 1 3862 0 is_stmt 0 discriminator 2
	movl	num_eliminable_invariants(%rip), %eax	# num_eliminable_invariants, num_eliminable_invariants.612
	testl	%eax, %eax	# num_eliminable_invariants.612
	je	.L1053	#,
.L1052:
	.loc 1 3862 0 discriminator 1
	movq	-80(%rbp), %rax	# chain, tmp146
	movzbl	262(%rax), %eax	# *chain_1, D.28250
	andl	$4, %eax	#, D.28250
	testb	%al, %al	# D.28250
	je	.L1053	#,
	.loc 1 3864 0 is_stmt 1
	movq	-56(%rbp), %rax	# insn, tmp147
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp147,
	call	eliminate_regs_in_insn	#
	.loc 1 3865 0
	movq	-56(%rbp), %rax	# insn, tmp148
	movzwl	(%rax), %eax	# insn_11->code, D.28246
	cmpw	$37, %ax	#, D.28246
	jne	.L1053	#,
	.loc 1 3867 0
	call	update_eliminable_offsets	#
	.loc 1 3868 0
	jmp	.L1054	#
.L1053:
	.loc 1 3879 0
	movq	-80(%rbp), %rax	# chain, tmp149
	movzbl	262(%rax), %eax	# *chain_1, D.28250
	andl	$4, %eax	#, D.28250
	testb	%al, %al	# D.28250
	jne	.L1055	#,
	.loc 1 3879 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# chain, tmp150
	movzbl	262(%rax), %eax	# *chain_1, D.28250
	andl	$1, %eax	#, D.28250
	testb	%al, %al	# D.28250
	jne	.L1055	#,
	.loc 1 3880 0 is_stmt 1
	movq	-80(%rbp), %rax	# chain, tmp151
	movzbl	262(%rax), %eax	# *chain_1, D.28250
	andl	$2, %eax	#, D.28250
	testb	%al, %al	# D.28250
	jne	.L1055	#,
	.loc 1 3881 0
	movl	$0, n_reloads(%rip)	#, n_reloads
	jmp	.L1056	#
.L1055:
	.loc 1 3888 0
	movl	max_regno(%rip), %eax	# max_regno, max_regno.613
	movslq	%eax, %rdx	# max_regno.613, D.28245
	movq	reg_has_output_reload(%rip), %rax	# reg_has_output_reload, reg_has_output_reload.614
	movl	$0, %esi	#,
	movq	%rax, %rdi	# reg_has_output_reload.614,
	call	memset	#
	.loc 1 3889 0
	movq	$0, reg_is_output_reload(%rip)	#, reg_is_output_reload
	.loc 1 3891 0
	movzbl	spill_indirect_levels(%rip), %eax	# spill_indirect_levels, spill_indirect_levels.615
	movsbl	%al, %edx	# spill_indirect_levels.615, D.28247
	movl	-84(%rbp), %ecx	# live_known, tmp152
	movq	-56(%rbp), %rax	# insn, tmp153
	movl	$spill_reg_order, %r8d	#,
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp153,
	call	find_reloads	#
.L1056:
	.loc 1 3895 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.616
	testl	%eax, %eax	# n_reloads.616
	jle	.L1057	#,
.LBB110:
	.loc 1 3897 0
	movq	-56(%rbp), %rax	# insn, tmp154
	movq	24(%rax), %rax	# insn_11->fld[2].rtx, tmp155
	movq	%rax, -32(%rbp)	# tmp155, next
	.loc 1 3900 0
	movq	-56(%rbp), %rax	# insn, tmp156
	movq	16(%rax), %rax	# insn_11->fld[1].rtx, tmp157
	movq	%rax, -24(%rbp)	# tmp157, prev
	.loc 1 3906 0
	movq	-80(%rbp), %rax	# chain, tmp158
	movq	%rax, %rdi	# tmp158,
	call	choose_reload_regs	#
	.loc 1 3912 0
	movq	-56(%rbp), %rax	# insn, tmp159
	movq	%rax, %rdi	# tmp159,
	call	merge_assigned_reloads	#
	.loc 1 3916 0
	movq	-80(%rbp), %rax	# chain, tmp160
	movq	%rax, %rdi	# tmp160,
	call	emit_reload_insns	#
	.loc 1 3922 0
	movq	-56(%rbp), %rax	# insn, tmp161
	movq	%rax, %rdi	# tmp161,
	call	subst_reloads	#
	.loc 1 3928 0
	movq	-56(%rbp), %rax	# insn, tmp162
	movq	32(%rax), %rax	# insn_11->fld[3].rtx, D.28249
	movq	%rax, %rdi	# D.28249,
	call	asm_noperands	#
	testl	%eax, %eax	# D.28247
	js	.L1057	#,
	.loc 1 3929 0
	movq	-24(%rbp), %rax	# prev, tmp163
	movq	24(%rax), %rax	# prev_54->fld[2].rtx, tmp164
	movq	%rax, -64(%rbp)	# tmp164, p
	jmp	.L1058	#
.L1063:
	.loc 1 3930 0
	movq	-64(%rbp), %rax	# p, tmp165
	cmpq	-56(%rbp), %rax	# insn, tmp165
	je	.L1059	#,
	.loc 1 3930 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# p, tmp166
	movzwl	(%rax), %eax	# p_3->code, D.28246
	movzwl	%ax, %eax	# D.28246, D.28247
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28248
	cmpb	$105, %al	#, D.28248
	jne	.L1059	#,
	.loc 1 3931 0 is_stmt 1 discriminator 1
	movq	-64(%rbp), %rax	# p, tmp168
	movl	40(%rax), %eax	# p_3->fld[4].rtint, D.28247
	.loc 1 3930 0 discriminator 1
	testl	%eax, %eax	# D.28247
	js	.L1060	#,
	.loc 1 3931 0
	movq	-64(%rbp), %rax	# p, tmp169
	movl	40(%rax), %eax	# p_3->fld[4].rtint, D.28247
	testl	%eax, %eax	# D.28247
	js	.L1061	#,
	jmp	.L1062	#
.L1060:
	movq	-64(%rbp), %rax	# p, tmp170
	movq	%rax, %rdi	# tmp170,
	call	recog_memoized_1	#
	testl	%eax, %eax	# D.28247
	js	.L1061	#,
.L1062:
	.loc 1 3932 0
	movq	-64(%rbp), %rax	# p, tmp171
	movq	%rax, %rdi	# tmp171,
	call	extract_insn	#
	movl	$1, %edi	#,
	call	constrain_operands	#
	testl	%eax, %eax	# D.28247
	jne	.L1059	#,
.L1061:
	.loc 1 3934 0
	movq	-56(%rbp), %rax	# insn, tmp172
	movl	$.LC11, %esi	#,
	movq	%rax, %rdi	# tmp172,
	movl	$0, %eax	#,
	call	error_for_asm	#
	.loc 1 3936 0
	movq	-64(%rbp), %rax	# p, tmp173
	movq	%rax, %rdi	# tmp173,
	call	delete_insn	#
.L1059:
	.loc 1 3929 0
	movq	-64(%rbp), %rax	# p, tmp174
	movq	24(%rax), %rax	# p_3->fld[2].rtx, tmp175
	movq	%rax, -64(%rbp)	# tmp175, p
.L1058:
	.loc 1 3929 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# p, tmp176
	cmpq	-32(%rbp), %rax	# next, tmp176
	jne	.L1063	#,
.L1057:
.LBE110:
	.loc 1 3940 0 is_stmt 1
	movl	num_eliminable(%rip), %eax	# num_eliminable, num_eliminable.617
	testl	%eax, %eax	# num_eliminable.617
	je	.L1064	#,
	.loc 1 3940 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# chain, tmp177
	movzbl	262(%rax), %eax	# *chain_1, D.28250
	andl	$4, %eax	#, D.28250
	testb	%al, %al	# D.28250
	je	.L1064	#,
	.loc 1 3941 0 is_stmt 1
	call	update_eliminable_offsets	#
.L1064:
	.loc 1 3949 0
	movq	-40(%rbp), %rax	# oldpat, tmp178
	movl	$0, %edx	#,
	movl	$forget_old_reloads_1, %esi	#,
	movq	%rax, %rdi	# tmp178,
	call	note_stores	#
	.loc 1 3953 0
	movq	-56(%rbp), %rax	# insn, tmp179
	movq	24(%rax), %rax	# insn_11->fld[2].rtx, tmp180
	movq	%rax, -72(%rbp)	# tmp180, x
	jmp	.L1065	#
.L1067:
	.loc 1 3954 0
	movq	-72(%rbp), %rax	# x, tmp181
	movzwl	(%rax), %eax	# x_2->code, D.28246
	cmpw	$32, %ax	#, D.28246
	jne	.L1066	#,
	.loc 1 3954 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# x, tmp182
	movq	32(%rax), %rax	# x_2->fld[3].rtx, D.28249
	movzwl	(%rax), %eax	# _71->code, D.28246
	cmpw	$49, %ax	#, D.28246
	jne	.L1066	#,
	.loc 1 3955 0 is_stmt 1
	movq	-72(%rbp), %rax	# x, tmp183
	movq	32(%rax), %rax	# x_2->fld[3].rtx, D.28249
	movl	$0, %edx	#,
	movl	$forget_old_reloads_1, %esi	#,
	movq	%rax, %rdi	# D.28249,
	call	note_stores	#
.L1066:
	.loc 1 3953 0
	movq	-72(%rbp), %rax	# x, tmp184
	movq	24(%rax), %rax	# x_2->fld[2].rtx, tmp185
	movq	%rax, -72(%rbp)	# tmp185, x
.L1065:
	.loc 1 3953 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# x, tmp186
	cmpq	-48(%rbp), %rax	# old_next, tmp186
	jne	.L1067	#,
.L1049:
.LBE109:
	.loc 1 4073 0 is_stmt 1
	movq	-56(%rbp), %rax	# insn, tmp187
	movzwl	(%rax), %eax	# insn_11->code, D.28246
	cmpw	$36, %ax	#, D.28246
	jne	.L1068	#,
	.loc 1 4074 0
	movq	$0, reg_reloaded_valid(%rip)	#, reg_reloaded_valid
	jmp	.L1054	#
.L1068:
	.loc 1 4078 0
	movq	-56(%rbp), %rax	# insn, tmp188
	movzwl	(%rax), %eax	# insn_11->code, D.28246
	cmpw	$34, %ax	#, D.28246
	jne	.L1054	#,
	.loc 1 4079 0
	movq	call_used_reg_set(%rip), %rax	# call_used_reg_set, call_used_reg_set.618
	notq	%rax	# D.28245
	movq	%rax, %rdx	# D.28245, D.28245
	movq	reg_reloaded_valid(%rip), %rax	# reg_reloaded_valid, reg_reloaded_valid.619
	andq	%rdx, %rax	# D.28245, reg_reloaded_valid.620
	movq	%rax, reg_reloaded_valid(%rip)	# reg_reloaded_valid.620, reg_reloaded_valid
.L1054:
.LBE108:
	.loc 1 3834 0
	movq	-80(%rbp), %rax	# chain, tmp189
	movq	(%rax), %rax	# chain_1->next, tmp190
	movq	%rax, -80(%rbp)	# tmp190, chain
.L1047:
	.loc 1 3834 0 is_stmt 0 discriminator 1
	cmpq	$0, -80(%rbp)	#, chain
	jne	.L1069	#,
	.loc 1 4083 0 is_stmt 1
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.621
	movq	%rax, %rdi	# reg_last_reload_reg.621,
	call	free	#
	.loc 1 4084 0
	movq	reg_has_output_reload(%rip), %rax	# reg_has_output_reload, reg_has_output_reload.622
	movq	%rax, %rdi	# reg_has_output_reload.622,
	call	free	#
	.loc 1 4085 0
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE39:
	.size	reload_as_needed, .-reload_as_needed
	.type	forget_old_reloads_1, @function
forget_old_reloads_1:
.LFB40:
	.loc 1 4099 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# x, x
	movq	%rsi, -48(%rbp)	# ignored, ignored
	movq	%rdx, -56(%rbp)	# data, data
	.loc 1 4102 0
	movl	$0, -28(%rbp)	#, offset
	.loc 1 4106 0
	jmp	.L1071	#
.L1072:
	.loc 1 4111 0
	movq	-40(%rbp), %rax	# x, tmp130
	movzbl	2(%rax), %eax	# x_1->mode, D.28254
	.loc 1 4108 0
	movzbl	%al, %ecx	# D.28254, D.28255
	movq	-40(%rbp), %rax	# x, tmp131
	movl	16(%rax), %edx	# x_1->fld[1].rtuint, D.28256
	.loc 1 4109 0
	movq	-40(%rbp), %rax	# x, tmp132
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.28257
	movzbl	2(%rax), %eax	# _20->mode, D.28254
	.loc 1 4108 0
	movzbl	%al, %esi	# D.28254, D.28255
	movq	-40(%rbp), %rax	# x, tmp133
	movq	8(%rax), %rax	# x_1->fld[0].rtx, D.28257
	movl	8(%rax), %eax	# _23->fld[0].rtuint, D.28256
	movl	%eax, %edi	# D.28256,
	call	subreg_regno_offset	#
	movl	-28(%rbp), %edx	# offset, offset.623
	addl	%edx, %eax	# offset.623, D.28256
	movl	%eax, -28(%rbp)	# D.28256, offset
	.loc 1 4112 0
	movq	-40(%rbp), %rax	# x, tmp134
	movq	8(%rax), %rax	# x_1->fld[0].rtx, tmp135
	movq	%rax, -40(%rbp)	# tmp135, x
.L1071:
	.loc 1 4106 0 discriminator 1
	movq	-40(%rbp), %rax	# x, tmp136
	movzwl	(%rax), %eax	# x_1->code, D.28253
	cmpw	$63, %ax	#, D.28253
	je	.L1072	#,
	.loc 1 4115 0
	movq	-40(%rbp), %rax	# x, tmp137
	movzwl	(%rax), %eax	# x_1->code, D.28253
	cmpw	$61, %ax	#, D.28253
	je	.L1073	#,
	.loc 1 4116 0
	jmp	.L1070	#
.L1073:
	.loc 1 4118 0
	movq	-40(%rbp), %rax	# x, tmp138
	movl	8(%rax), %edx	# x_1->fld[0].rtuint, D.28256
	movl	-28(%rbp), %eax	# offset, offset.624
	addl	%edx, %eax	# D.28256, tmp139
	movl	%eax, -20(%rbp)	# tmp139, regno
	.loc 1 4120 0
	cmpl	$52, -20(%rbp)	#, regno
	jbe	.L1075	#,
	.loc 1 4121 0
	movl	$1, -32(%rbp)	#, nr
	jmp	.L1076	#
.L1075:
.LBB111:
	.loc 1 4126 0
	cmpl	$7, -20(%rbp)	#, regno
	jbe	.L1077	#,
	.loc 1 4126 0 is_stmt 0 discriminator 1
	cmpl	$15, -20(%rbp)	#, regno
	jbe	.L1078	#,
.L1077:
	.loc 1 4126 0 discriminator 2
	cmpl	$20, -20(%rbp)	#, regno
	jbe	.L1079	#,
	.loc 1 4126 0 discriminator 1
	cmpl	$28, -20(%rbp)	#, regno
	jbe	.L1078	#,
.L1079:
	.loc 1 4126 0 discriminator 2
	cmpl	$44, -20(%rbp)	#, regno
	jbe	.L1080	#,
	.loc 1 4126 0 discriminator 1
	cmpl	$52, -20(%rbp)	#, regno
	jbe	.L1078	#,
.L1080:
	.loc 1 4126 0 discriminator 2
	cmpl	$28, -20(%rbp)	#, regno
	jbe	.L1081	#,
	.loc 1 4126 0 discriminator 1
	cmpl	$36, -20(%rbp)	#, regno
	ja	.L1081	#,
.L1078:
	movq	-40(%rbp), %rax	# x, tmp140
	movzbl	2(%rax), %eax	# x_1->mode, D.28254
	movzbl	%al, %eax	# D.28254, D.28258
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28259
	cmpl	$5, %eax	#, D.28259
	je	.L1082	#,
	.loc 1 4126 0 discriminator 4
	movq	-40(%rbp), %rax	# x, tmp142
	movzbl	2(%rax), %eax	# x_1->mode, D.28254
	movzbl	%al, %eax	# D.28254, D.28258
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28259
	cmpl	$6, %eax	#, D.28259
	jne	.L1083	#,
.L1082:
	.loc 1 4126 0 discriminator 3
	movl	$2, %eax	#, iftmp.626
	jmp	.L1085	#
.L1083:
	.loc 1 4126 0 discriminator 1
	movl	$1, %eax	#, iftmp.626
	jmp	.L1085	#
.L1081:
	.loc 1 4126 0 discriminator 2
	movq	-40(%rbp), %rax	# x, tmp144
	movzbl	2(%rax), %eax	# x_1->mode, D.28254
	cmpb	$18, %al	#, D.28254
	jne	.L1086	#,
	.loc 1 4126 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.629
	andl	$33554432, %eax	#, D.28258
	testl	%eax, %eax	# D.28258
	je	.L1087	#,
	.loc 1 4126 0 discriminator 9
	movl	$2, %eax	#, iftmp.628
	jmp	.L1085	#
.L1087:
	.loc 1 4126 0 discriminator 10
	movl	$3, %eax	#, iftmp.628
	jmp	.L1085	#
.L1086:
	.loc 1 4126 0 discriminator 8
	movq	-40(%rbp), %rax	# x, tmp145
	movzbl	2(%rax), %eax	# x_1->mode, D.28254
	cmpb	$24, %al	#, D.28254
	jne	.L1090	#,
	.loc 1 4126 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.632
	andl	$33554432, %eax	#, D.28258
	testl	%eax, %eax	# D.28258
	je	.L1091	#,
	.loc 1 4126 0 discriminator 13
	movl	$4, %eax	#, iftmp.631
	jmp	.L1085	#
.L1091:
	.loc 1 4126 0 discriminator 14
	movl	$6, %eax	#, iftmp.631
	jmp	.L1085	#
.L1090:
	.loc 1 4126 0 discriminator 12
	movq	-40(%rbp), %rax	# x, tmp146
	movzbl	2(%rax), %eax	# x_1->mode, D.28254
	movzbl	%al, %eax	# D.28254, D.28258
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28254
	movzbl	%al, %edx	# D.28254, D.28258
	movl	target_flags(%rip), %eax	# target_flags, target_flags.634
	andl	$33554432, %eax	#, D.28258
	testl	%eax, %eax	# D.28258
	je	.L1094	#,
	.loc 1 4126 0 discriminator 1
	movl	$8, %eax	#, iftmp.633
	jmp	.L1095	#
.L1094:
	.loc 1 4126 0 discriminator 2
	movl	$4, %eax	#, iftmp.633
.L1095:
	.loc 1 4126 0 discriminator 3
	addl	%edx, %eax	# D.28258, D.28258
	subl	$1, %eax	#, D.28258
	movl	target_flags(%rip), %edx	# target_flags, target_flags.636
	andl	$33554432, %edx	#, D.28258
	testl	%edx, %edx	# D.28258
	je	.L1096	#,
	.loc 1 4126 0 discriminator 1
	movl	$8, %ebx	#, iftmp.635
	jmp	.L1097	#
.L1096:
	.loc 1 4126 0 discriminator 2
	movl	$4, %ebx	#, iftmp.635
.L1097:
	.loc 1 4126 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.635
.L1085:
	.loc 1 4126 0 discriminator 6
	movl	%eax, -32(%rbp)	# iftmp.625, nr
	.loc 1 4131 0 is_stmt 1 discriminator 6
	movl	$0, -24(%rbp)	#, i
	jmp	.L1098	#
.L1101:
	.loc 1 4134 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.637
	testl	%eax, %eax	# n_reloads.637
	je	.L1099	#,
	.loc 1 4135 0
	movq	reg_is_output_reload(%rip), %rdx	# reg_is_output_reload, reg_is_output_reload.638
	movl	-24(%rbp), %eax	# i, tmp150
	movl	-20(%rbp), %ecx	# regno, tmp151
	addl	%ecx, %eax	# tmp151, D.28256
	movl	%eax, %ecx	# D.28258, tmp166
	shrq	%cl, %rdx	# tmp166, D.28260
	movq	%rdx, %rax	# D.28260, D.28260
	andl	$1, %eax	#, D.28260
	testq	%rax, %rax	# D.28260
	jne	.L1100	#,
.L1099:
	.loc 1 4137 0
	movl	-24(%rbp), %eax	# i, tmp152
	movl	-20(%rbp), %edx	# regno, tmp153
	addl	%edx, %eax	# tmp153, D.28256
	movl	$1, %edx	#, tmp154
	movl	%eax, %ecx	# D.28258, tmp168
	salq	%cl, %rdx	# tmp168, D.28260
	movq	%rdx, %rax	# D.28260, D.28260
	notq	%rax	# D.28260
	movq	%rax, %rdx	# D.28260, D.28260
	movq	reg_reloaded_valid(%rip), %rax	# reg_reloaded_valid, reg_reloaded_valid.639
	andq	%rdx, %rax	# D.28260, reg_reloaded_valid.640
	movq	%rax, reg_reloaded_valid(%rip)	# reg_reloaded_valid.640, reg_reloaded_valid
	.loc 1 4138 0
	movl	-24(%rbp), %eax	# i, tmp155
	movl	-20(%rbp), %edx	# regno, tmp156
	addl	%edx, %eax	# tmp156, D.28256
	movl	%eax, %eax	# D.28256, tmp157
	movq	$0, spill_reg_store(,%rax,8)	#, spill_reg_store
.L1100:
	.loc 1 4131 0
	addl	$1, -24(%rbp)	#, i
.L1098:
	.loc 1 4131 0 is_stmt 0 discriminator 1
	movl	-24(%rbp), %eax	# i, tmp158
	cmpl	-32(%rbp), %eax	# nr, tmp158
	jb	.L1101	#,
.L1076:
.LBE111:
	.loc 1 4145 0 is_stmt 1
	jmp	.L1102	#
.L1104:
	.loc 1 4148 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.641
	testl	%eax, %eax	# n_reloads.641
	je	.L1103	#,
	.loc 1 4148 0 is_stmt 0 discriminator 1
	movq	reg_has_output_reload(%rip), %rdx	# reg_has_output_reload, reg_has_output_reload.642
	movl	-32(%rbp), %eax	# nr, tmp159
	movl	-20(%rbp), %ecx	# regno, tmp160
	addl	%ecx, %eax	# tmp160, D.28256
	movl	%eax, %eax	# D.28256, D.28261
	addq	%rdx, %rax	# reg_has_output_reload.642, D.28262
	movzbl	(%rax), %eax	# *_96, D.28263
	testb	%al, %al	# D.28263
	jne	.L1102	#,
.L1103:
	.loc 1 4149 0 is_stmt 1
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.643
	movl	-32(%rbp), %edx	# nr, tmp161
	movl	-20(%rbp), %ecx	# regno, tmp162
	addl	%ecx, %edx	# tmp162, D.28256
	movl	%edx, %edx	# D.28256, D.28260
	salq	$3, %rdx	#, D.28260
	addq	%rdx, %rax	# D.28260, D.28264
	movq	$0, (%rax)	#, *_102
.L1102:
	.loc 1 4145 0 discriminator 1
	movl	-32(%rbp), %eax	# nr, nr.644
	leal	-1(%rax), %edx	#, tmp163
	movl	%edx, -32(%rbp)	# tmp163, nr
	testl	%eax, %eax	# nr.644
	jne	.L1104	#,
.L1070:
	.loc 1 4150 0
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE40:
	.size	forget_old_reloads_1, .-forget_old_reloads_1
	.local	reload_reg_unavailable
	.comm	reload_reg_unavailable,8,8
	.local	reload_reg_used
	.comm	reload_reg_used,8,8
	.local	reload_reg_used_in_input_addr
	.comm	reload_reg_used_in_input_addr,240,32
	.local	reload_reg_used_in_inpaddr_addr
	.comm	reload_reg_used_in_inpaddr_addr,240,32
	.local	reload_reg_used_in_output_addr
	.comm	reload_reg_used_in_output_addr,240,32
	.local	reload_reg_used_in_outaddr_addr
	.comm	reload_reg_used_in_outaddr_addr,240,32
	.local	reload_reg_used_in_input
	.comm	reload_reg_used_in_input,240,32
	.local	reload_reg_used_in_output
	.comm	reload_reg_used_in_output,240,32
	.local	reload_reg_used_in_op_addr
	.comm	reload_reg_used_in_op_addr,8,8
	.local	reload_reg_used_in_op_addr_reload
	.comm	reload_reg_used_in_op_addr_reload,8,8
	.local	reload_reg_used_in_insn
	.comm	reload_reg_used_in_insn,8,8
	.local	reload_reg_used_in_other_addr
	.comm	reload_reg_used_in_other_addr,8,8
	.local	reload_reg_used_at_all
	.comm	reload_reg_used_at_all,8,8
	.local	reload_reg_used_for_inherit
	.comm	reload_reg_used_for_inherit,8,8
	.local	reg_used_in_insn
	.comm	reg_used_in_insn,8,8
	.type	mark_reload_reg_in_use, @function
mark_reload_reg_in_use:
.LFB41:
	.loc 1 4201 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	.cfi_offset 3, -24
	movl	%edi, -28(%rbp)	# regno, regno
	movl	%esi, -32(%rbp)	# opnum, opnum
	movl	%edx, -36(%rbp)	# type, type
	movl	%ecx, -40(%rbp)	# mode, mode
	.loc 1 4202 0
	cmpl	$7, -28(%rbp)	#, regno
	jbe	.L1106	#,
	.loc 1 4202 0 is_stmt 0 discriminator 1
	cmpl	$15, -28(%rbp)	#, regno
	jbe	.L1107	#,
.L1106:
	.loc 1 4202 0 discriminator 2
	cmpl	$20, -28(%rbp)	#, regno
	jbe	.L1108	#,
	.loc 1 4202 0 discriminator 1
	cmpl	$28, -28(%rbp)	#, regno
	jbe	.L1107	#,
.L1108:
	.loc 1 4202 0 discriminator 2
	cmpl	$44, -28(%rbp)	#, regno
	jbe	.L1109	#,
	.loc 1 4202 0 discriminator 1
	cmpl	$52, -28(%rbp)	#, regno
	jbe	.L1107	#,
.L1109:
	.loc 1 4202 0 discriminator 2
	cmpl	$28, -28(%rbp)	#, regno
	jbe	.L1110	#,
	.loc 1 4202 0 discriminator 1
	cmpl	$36, -28(%rbp)	#, regno
	ja	.L1110	#,
.L1107:
	movl	-40(%rbp), %eax	# mode, mode.647
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28267
	cmpl	$5, %eax	#, D.28267
	je	.L1111	#,
	.loc 1 4202 0 discriminator 4
	movl	-40(%rbp), %eax	# mode, mode.648
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28267
	cmpl	$6, %eax	#, D.28267
	jne	.L1112	#,
.L1111:
	.loc 1 4202 0 discriminator 3
	movl	$2, %eax	#, iftmp.646
	jmp	.L1114	#
.L1112:
	.loc 1 4202 0 discriminator 1
	movl	$1, %eax	#, iftmp.646
	jmp	.L1114	#
.L1110:
	.loc 1 4202 0 discriminator 2
	cmpl	$18, -40(%rbp)	#, mode
	jne	.L1115	#,
	.loc 1 4202 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.651
	andl	$33554432, %eax	#, D.28265
	testl	%eax, %eax	# D.28265
	je	.L1116	#,
	.loc 1 4202 0 discriminator 9
	movl	$2, %eax	#, iftmp.650
	jmp	.L1114	#
.L1116:
	.loc 1 4202 0 discriminator 10
	movl	$3, %eax	#, iftmp.650
	jmp	.L1114	#
.L1115:
	.loc 1 4202 0 discriminator 8
	cmpl	$24, -40(%rbp)	#, mode
	jne	.L1119	#,
	.loc 1 4202 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.654
	andl	$33554432, %eax	#, D.28265
	testl	%eax, %eax	# D.28265
	je	.L1120	#,
	.loc 1 4202 0 discriminator 13
	movl	$4, %eax	#, iftmp.653
	jmp	.L1114	#
.L1120:
	.loc 1 4202 0 discriminator 14
	movl	$6, %eax	#, iftmp.653
	jmp	.L1114	#
.L1119:
	.loc 1 4202 0 discriminator 12
	movl	-40(%rbp), %eax	# mode, mode.655
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28266
	movzbl	%al, %edx	# D.28266, D.28265
	movl	target_flags(%rip), %eax	# target_flags, target_flags.657
	andl	$33554432, %eax	#, D.28265
	testl	%eax, %eax	# D.28265
	je	.L1123	#,
	.loc 1 4202 0 discriminator 1
	movl	$8, %eax	#, iftmp.656
	jmp	.L1124	#
.L1123:
	.loc 1 4202 0 discriminator 2
	movl	$4, %eax	#, iftmp.656
.L1124:
	.loc 1 4202 0 discriminator 3
	addl	%edx, %eax	# D.28265, D.28265
	subl	$1, %eax	#, D.28265
	movl	target_flags(%rip), %edx	# target_flags, target_flags.659
	andl	$33554432, %edx	#, D.28265
	testl	%edx, %edx	# D.28265
	je	.L1125	#,
	.loc 1 4202 0 discriminator 1
	movl	$8, %ebx	#, iftmp.658
	jmp	.L1126	#
.L1125:
	.loc 1 4202 0 discriminator 2
	movl	$4, %ebx	#, iftmp.658
.L1126:
	.loc 1 4202 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.658
.L1114:
	.loc 1 4202 0 discriminator 6
	movl	%eax, -12(%rbp)	# iftmp.645, nregs
	.loc 1 4205 0 is_stmt 1 discriminator 6
	movl	-28(%rbp), %eax	# regno, tmp139
	movl	%eax, -16(%rbp)	# tmp139, i
	jmp	.L1127	#
.L1141:
	.loc 1 4207 0
	cmpl	$10, -36(%rbp)	#, type
	ja	.L1128	#,
	movl	-36(%rbp), %eax	# type, tmp140
	movq	.L1130(,%rax,8), %rax	#, tmp141
	jmp	*%rax	# tmp141
	.section	.rodata
	.align 8
	.align 4
.L1130:
	.quad	.L1129
	.quad	.L1131
	.quad	.L1132
	.quad	.L1133
	.quad	.L1134
	.quad	.L1135
	.quad	.L1136
	.quad	.L1137
	.quad	.L1138
	.quad	.L1139
	.quad	.L1140
	.text
.L1139:
	.loc 1 4210 0
	movl	-16(%rbp), %eax	# i, i.660
	movl	$1, %edx	#, tmp142
	movl	%eax, %ecx	# i.660, tmp181
	salq	%cl, %rdx	# tmp181, D.28269
	movq	reload_reg_used(%rip), %rax	# reload_reg_used, reload_reg_used.661
	orq	%rdx, %rax	# D.28269, reload_reg_used.662
	movq	%rax, reload_reg_used(%rip)	# reload_reg_used.662, reload_reg_used
	.loc 1 4211 0
	jmp	.L1128	#
.L1133:
	.loc 1 4214 0
	movl	-32(%rbp), %eax	# opnum, tmp144
	cltq
	movq	reload_reg_used_in_input_addr(,%rax,8), %rdx	# reload_reg_used_in_input_addr, D.28269
	movl	-16(%rbp), %eax	# i, i.663
	movl	$1, %esi	#, tmp145
	movl	%eax, %ecx	# i.663, tmp183
	salq	%cl, %rsi	# tmp183, D.28269
	movq	%rsi, %rax	# D.28269, D.28269
	orq	%rax, %rdx	# D.28269, D.28269
	movl	-32(%rbp), %eax	# opnum, tmp147
	cltq
	movq	%rdx, reload_reg_used_in_input_addr(,%rax,8)	# D.28269, reload_reg_used_in_input_addr
	.loc 1 4215 0
	jmp	.L1128	#
.L1134:
	.loc 1 4218 0
	movl	-32(%rbp), %eax	# opnum, tmp149
	cltq
	movq	reload_reg_used_in_inpaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_inpaddr_addr, D.28269
	movl	-16(%rbp), %eax	# i, i.664
	movl	$1, %esi	#, tmp150
	movl	%eax, %ecx	# i.664, tmp185
	salq	%cl, %rsi	# tmp185, D.28269
	movq	%rsi, %rax	# D.28269, D.28269
	orq	%rax, %rdx	# D.28269, D.28269
	movl	-32(%rbp), %eax	# opnum, tmp152
	cltq
	movq	%rdx, reload_reg_used_in_inpaddr_addr(,%rax,8)	# D.28269, reload_reg_used_in_inpaddr_addr
	.loc 1 4219 0
	jmp	.L1128	#
.L1135:
	.loc 1 4222 0
	movl	-32(%rbp), %eax	# opnum, tmp154
	cltq
	movq	reload_reg_used_in_output_addr(,%rax,8), %rdx	# reload_reg_used_in_output_addr, D.28269
	movl	-16(%rbp), %eax	# i, i.665
	movl	$1, %esi	#, tmp155
	movl	%eax, %ecx	# i.665, tmp187
	salq	%cl, %rsi	# tmp187, D.28269
	movq	%rsi, %rax	# D.28269, D.28269
	orq	%rax, %rdx	# D.28269, D.28269
	movl	-32(%rbp), %eax	# opnum, tmp157
	cltq
	movq	%rdx, reload_reg_used_in_output_addr(,%rax,8)	# D.28269, reload_reg_used_in_output_addr
	.loc 1 4223 0
	jmp	.L1128	#
.L1136:
	.loc 1 4226 0
	movl	-32(%rbp), %eax	# opnum, tmp159
	cltq
	movq	reload_reg_used_in_outaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_outaddr_addr, D.28269
	movl	-16(%rbp), %eax	# i, i.666
	movl	$1, %esi	#, tmp160
	movl	%eax, %ecx	# i.666, tmp189
	salq	%cl, %rsi	# tmp189, D.28269
	movq	%rsi, %rax	# D.28269, D.28269
	orq	%rax, %rdx	# D.28269, D.28269
	movl	-32(%rbp), %eax	# opnum, tmp162
	cltq
	movq	%rdx, reload_reg_used_in_outaddr_addr(,%rax,8)	# D.28269, reload_reg_used_in_outaddr_addr
	.loc 1 4227 0
	jmp	.L1128	#
.L1137:
	.loc 1 4230 0
	movl	-16(%rbp), %eax	# i, i.667
	movl	$1, %edx	#, tmp163
	movl	%eax, %ecx	# i.667, tmp190
	salq	%cl, %rdx	# tmp190, D.28269
	movq	reload_reg_used_in_op_addr(%rip), %rax	# reload_reg_used_in_op_addr, reload_reg_used_in_op_addr.668
	orq	%rdx, %rax	# D.28269, reload_reg_used_in_op_addr.669
	movq	%rax, reload_reg_used_in_op_addr(%rip)	# reload_reg_used_in_op_addr.669, reload_reg_used_in_op_addr
	.loc 1 4231 0
	jmp	.L1128	#
.L1138:
	.loc 1 4234 0
	movl	-16(%rbp), %eax	# i, i.670
	movl	$1, %edx	#, tmp164
	movl	%eax, %ecx	# i.670, tmp191
	salq	%cl, %rdx	# tmp191, D.28269
	movq	reload_reg_used_in_op_addr_reload(%rip), %rax	# reload_reg_used_in_op_addr_reload, reload_reg_used_in_op_addr_reload.671
	orq	%rdx, %rax	# D.28269, reload_reg_used_in_op_addr_reload.672
	movq	%rax, reload_reg_used_in_op_addr_reload(%rip)	# reload_reg_used_in_op_addr_reload.672, reload_reg_used_in_op_addr_reload
	.loc 1 4235 0
	jmp	.L1128	#
.L1140:
	.loc 1 4238 0
	movl	-16(%rbp), %eax	# i, i.673
	movl	$1, %edx	#, tmp165
	movl	%eax, %ecx	# i.673, tmp192
	salq	%cl, %rdx	# tmp192, D.28269
	movq	reload_reg_used_in_other_addr(%rip), %rax	# reload_reg_used_in_other_addr, reload_reg_used_in_other_addr.674
	orq	%rdx, %rax	# D.28269, reload_reg_used_in_other_addr.675
	movq	%rax, reload_reg_used_in_other_addr(%rip)	# reload_reg_used_in_other_addr.675, reload_reg_used_in_other_addr
	.loc 1 4239 0
	jmp	.L1128	#
.L1129:
	.loc 1 4242 0
	movl	-32(%rbp), %eax	# opnum, tmp167
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28269
	movl	-16(%rbp), %eax	# i, i.676
	movl	$1, %esi	#, tmp168
	movl	%eax, %ecx	# i.676, tmp194
	salq	%cl, %rsi	# tmp194, D.28269
	movq	%rsi, %rax	# D.28269, D.28269
	orq	%rax, %rdx	# D.28269, D.28269
	movl	-32(%rbp), %eax	# opnum, tmp170
	cltq
	movq	%rdx, reload_reg_used_in_input(,%rax,8)	# D.28269, reload_reg_used_in_input
	.loc 1 4243 0
	jmp	.L1128	#
.L1131:
	.loc 1 4246 0
	movl	-32(%rbp), %eax	# opnum, tmp172
	cltq
	movq	reload_reg_used_in_output(,%rax,8), %rdx	# reload_reg_used_in_output, D.28269
	movl	-16(%rbp), %eax	# i, i.677
	movl	$1, %esi	#, tmp173
	movl	%eax, %ecx	# i.677, tmp196
	salq	%cl, %rsi	# tmp196, D.28269
	movq	%rsi, %rax	# D.28269, D.28269
	orq	%rax, %rdx	# D.28269, D.28269
	movl	-32(%rbp), %eax	# opnum, tmp175
	cltq
	movq	%rdx, reload_reg_used_in_output(,%rax,8)	# D.28269, reload_reg_used_in_output
	.loc 1 4247 0
	jmp	.L1128	#
.L1132:
	.loc 1 4250 0
	movl	-16(%rbp), %eax	# i, i.678
	movl	$1, %edx	#, tmp176
	movl	%eax, %ecx	# i.678, tmp197
	salq	%cl, %rdx	# tmp197, D.28269
	movq	reload_reg_used_in_insn(%rip), %rax	# reload_reg_used_in_insn, reload_reg_used_in_insn.679
	orq	%rdx, %rax	# D.28269, reload_reg_used_in_insn.680
	movq	%rax, reload_reg_used_in_insn(%rip)	# reload_reg_used_in_insn.680, reload_reg_used_in_insn
	.loc 1 4251 0
	nop
.L1128:
	.loc 1 4254 0
	movl	-16(%rbp), %eax	# i, i.681
	movl	$1, %edx	#, tmp177
	movl	%eax, %ecx	# i.681, tmp198
	salq	%cl, %rdx	# tmp198, D.28269
	movq	reload_reg_used_at_all(%rip), %rax	# reload_reg_used_at_all, reload_reg_used_at_all.682
	orq	%rdx, %rax	# D.28269, reload_reg_used_at_all.683
	movq	%rax, reload_reg_used_at_all(%rip)	# reload_reg_used_at_all.683, reload_reg_used_at_all
	.loc 1 4205 0
	addl	$1, -16(%rbp)	#, i
.L1127:
	.loc 1 4205 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# regno, tmp178
	movl	-12(%rbp), %edx	# nregs, tmp179
	addl	%edx, %eax	# tmp179, D.28268
	cmpl	-16(%rbp), %eax	# i, D.28268
	ja	.L1141	#,
	.loc 1 4256 0 is_stmt 1
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE41:
	.size	mark_reload_reg_in_use, .-mark_reload_reg_in_use
	.type	clear_reload_reg_in_use, @function
clear_reload_reg_in_use:
.LFB42:
	.loc 1 4266 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -68(%rbp)	# regno, regno
	movl	%esi, -72(%rbp)	# opnum, opnum
	movl	%edx, -76(%rbp)	# type, type
	movl	%ecx, -80(%rbp)	# mode, mode
	.loc 1 4267 0
	cmpl	$7, -68(%rbp)	#, regno
	jbe	.L1143	#,
	.loc 1 4267 0 is_stmt 0 discriminator 1
	cmpl	$15, -68(%rbp)	#, regno
	jbe	.L1144	#,
.L1143:
	.loc 1 4267 0 discriminator 2
	cmpl	$20, -68(%rbp)	#, regno
	jbe	.L1145	#,
	.loc 1 4267 0 discriminator 1
	cmpl	$28, -68(%rbp)	#, regno
	jbe	.L1144	#,
.L1145:
	.loc 1 4267 0 discriminator 2
	cmpl	$44, -68(%rbp)	#, regno
	jbe	.L1146	#,
	.loc 1 4267 0 discriminator 1
	cmpl	$52, -68(%rbp)	#, regno
	jbe	.L1144	#,
.L1146:
	.loc 1 4267 0 discriminator 2
	cmpl	$28, -68(%rbp)	#, regno
	jbe	.L1147	#,
	.loc 1 4267 0 discriminator 1
	cmpl	$36, -68(%rbp)	#, regno
	ja	.L1147	#,
.L1144:
	movl	-80(%rbp), %eax	# mode, mode.686
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28272
	cmpl	$5, %eax	#, D.28272
	je	.L1148	#,
	.loc 1 4267 0 discriminator 4
	movl	-80(%rbp), %eax	# mode, mode.687
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28272
	cmpl	$6, %eax	#, D.28272
	jne	.L1149	#,
.L1148:
	.loc 1 4267 0 discriminator 3
	movl	$2, %eax	#, iftmp.685
	jmp	.L1151	#
.L1149:
	.loc 1 4267 0 discriminator 1
	movl	$1, %eax	#, iftmp.685
	jmp	.L1151	#
.L1147:
	.loc 1 4267 0 discriminator 2
	cmpl	$18, -80(%rbp)	#, mode
	jne	.L1152	#,
	.loc 1 4267 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.690
	andl	$33554432, %eax	#, D.28270
	testl	%eax, %eax	# D.28270
	je	.L1153	#,
	.loc 1 4267 0 discriminator 9
	movl	$2, %eax	#, iftmp.689
	jmp	.L1151	#
.L1153:
	.loc 1 4267 0 discriminator 10
	movl	$3, %eax	#, iftmp.689
	jmp	.L1151	#
.L1152:
	.loc 1 4267 0 discriminator 8
	cmpl	$24, -80(%rbp)	#, mode
	jne	.L1156	#,
	.loc 1 4267 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.693
	andl	$33554432, %eax	#, D.28270
	testl	%eax, %eax	# D.28270
	je	.L1157	#,
	.loc 1 4267 0 discriminator 13
	movl	$4, %eax	#, iftmp.692
	jmp	.L1151	#
.L1157:
	.loc 1 4267 0 discriminator 14
	movl	$6, %eax	#, iftmp.692
	jmp	.L1151	#
.L1156:
	.loc 1 4267 0 discriminator 12
	movl	-80(%rbp), %eax	# mode, mode.694
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28271
	movzbl	%al, %edx	# D.28271, D.28270
	movl	target_flags(%rip), %eax	# target_flags, target_flags.696
	andl	$33554432, %eax	#, D.28270
	testl	%eax, %eax	# D.28270
	je	.L1160	#,
	.loc 1 4267 0 discriminator 1
	movl	$8, %eax	#, iftmp.695
	jmp	.L1161	#
.L1160:
	.loc 1 4267 0 discriminator 2
	movl	$4, %eax	#, iftmp.695
.L1161:
	.loc 1 4267 0 discriminator 3
	addl	%edx, %eax	# D.28270, D.28270
	subl	$1, %eax	#, D.28270
	movl	target_flags(%rip), %edx	# target_flags, target_flags.698
	andl	$33554432, %edx	#, D.28270
	testl	%edx, %edx	# D.28270
	je	.L1162	#,
	.loc 1 4267 0 discriminator 1
	movl	$8, %ebx	#, iftmp.697
	jmp	.L1163	#
.L1162:
	.loc 1 4267 0 discriminator 2
	movl	$4, %ebx	#, iftmp.697
.L1163:
	.loc 1 4267 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.697
.L1151:
	.loc 1 4267 0 discriminator 6
	movl	%eax, -36(%rbp)	# iftmp.684, nregs
	.loc 1 4274 0 is_stmt 1 discriminator 6
	movl	$0, -44(%rbp)	#, check_opnum
	.loc 1 4275 0 discriminator 6
	movl	$0, -40(%rbp)	#, check_any
	.loc 1 4278 0 discriminator 6
	cmpl	$10, -76(%rbp)	#, type
	ja	.L1164	#,
	movl	-76(%rbp), %eax	# type, tmp132
	movq	.L1166(,%rax,8), %rax	#, tmp133
	jmp	*%rax	# tmp133
	.section	.rodata
	.align 8
	.align 4
.L1166:
	.quad	.L1165
	.quad	.L1167
	.quad	.L1168
	.quad	.L1169
	.quad	.L1170
	.quad	.L1171
	.quad	.L1172
	.quad	.L1173
	.quad	.L1174
	.quad	.L1175
	.quad	.L1176
	.text
.L1175:
	.loc 1 4281 0
	movq	$reload_reg_used, -24(%rbp)	#, used_in_set
	.loc 1 4282 0
	jmp	.L1177	#
.L1169:
	.loc 1 4285 0
	movl	-72(%rbp), %eax	# opnum, tmp135
	cltq
	salq	$3, %rax	#, tmp136
	addq	$reload_reg_used_in_input_addr, %rax	#, tmp137
	movq	%rax, -24(%rbp)	# tmp137, used_in_set
	.loc 1 4286 0
	jmp	.L1177	#
.L1170:
	.loc 1 4289 0
	movl	$1, -44(%rbp)	#, check_opnum
	.loc 1 4290 0
	movl	-72(%rbp), %eax	# opnum, tmp139
	cltq
	salq	$3, %rax	#, tmp140
	addq	$reload_reg_used_in_inpaddr_addr, %rax	#, tmp141
	movq	%rax, -24(%rbp)	# tmp141, used_in_set
	.loc 1 4291 0
	jmp	.L1177	#
.L1171:
	.loc 1 4294 0
	movl	-72(%rbp), %eax	# opnum, tmp143
	cltq
	salq	$3, %rax	#, tmp144
	addq	$reload_reg_used_in_output_addr, %rax	#, tmp145
	movq	%rax, -24(%rbp)	# tmp145, used_in_set
	.loc 1 4295 0
	jmp	.L1177	#
.L1172:
	.loc 1 4298 0
	movl	$1, -44(%rbp)	#, check_opnum
	.loc 1 4299 0
	movl	-72(%rbp), %eax	# opnum, tmp147
	cltq
	salq	$3, %rax	#, tmp148
	addq	$reload_reg_used_in_outaddr_addr, %rax	#, tmp149
	movq	%rax, -24(%rbp)	# tmp149, used_in_set
	.loc 1 4300 0
	jmp	.L1177	#
.L1173:
	.loc 1 4303 0
	movq	$reload_reg_used_in_op_addr, -24(%rbp)	#, used_in_set
	.loc 1 4304 0
	jmp	.L1177	#
.L1174:
	.loc 1 4307 0
	movl	$1, -40(%rbp)	#, check_any
	.loc 1 4308 0
	movq	$reload_reg_used_in_op_addr_reload, -24(%rbp)	#, used_in_set
	.loc 1 4309 0
	jmp	.L1177	#
.L1176:
	.loc 1 4312 0
	movq	$reload_reg_used_in_other_addr, -24(%rbp)	#, used_in_set
	.loc 1 4313 0
	movl	$1, -40(%rbp)	#, check_any
	.loc 1 4314 0
	jmp	.L1177	#
.L1165:
	.loc 1 4317 0
	movl	-72(%rbp), %eax	# opnum, tmp151
	cltq
	salq	$3, %rax	#, tmp152
	addq	$reload_reg_used_in_input, %rax	#, tmp153
	movq	%rax, -24(%rbp)	# tmp153, used_in_set
	.loc 1 4318 0
	jmp	.L1177	#
.L1167:
	.loc 1 4321 0
	movl	-72(%rbp), %eax	# opnum, tmp155
	cltq
	salq	$3, %rax	#, tmp156
	addq	$reload_reg_used_in_output, %rax	#, tmp157
	movq	%rax, -24(%rbp)	# tmp157, used_in_set
	.loc 1 4322 0
	jmp	.L1177	#
.L1168:
	.loc 1 4325 0
	movq	$reload_reg_used_in_insn, -24(%rbp)	#, used_in_set
	.loc 1 4326 0
	jmp	.L1177	#
.L1164:
	.loc 1 4328 0
	movl	$__FUNCTION__.15345, %edx	#,
	movl	$4328, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1177:
	.loc 1 4338 0
	movl	-68(%rbp), %eax	# regno, tmp158
	movl	%eax, -60(%rbp)	# tmp158, start_regno
	.loc 1 4339 0
	movl	-36(%rbp), %eax	# nregs, tmp163
	movl	-68(%rbp), %edx	# regno, tmp164
	addl	%edx, %eax	# tmp164, tmp162
	movl	%eax, -56(%rbp)	# tmp162, end_regno
	.loc 1 4340 0
	cmpl	$0, -44(%rbp)	#, check_opnum
	jne	.L1178	#,
	.loc 1 4340 0 is_stmt 0 discriminator 1
	cmpl	$0, -40(%rbp)	#, check_any
	je	.L1179	#,
.L1178:
	.loc 1 4342 0 is_stmt 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.699
	subl	$1, %eax	#, tmp165
	movl	%eax, -48(%rbp)	# tmp165, i
	jmp	.L1180	#
.L1205:
	.loc 1 4344 0
	movl	-48(%rbp), %eax	# i, tmp167
	movslq	%eax, %rdx	# tmp167, tmp166
	movq	%rdx, %rax	# tmp166, tmp168
	addq	%rax, %rax	# tmp168
	addq	%rdx, %rax	# tmp166, tmp168
	salq	$2, %rax	#, tmp168
	addq	%rdx, %rax	# tmp166, tmp168
	salq	$3, %rax	#, tmp169
	addq	$rld+80, %rax	#, tmp170
	movl	12(%rax), %eax	# rld[i_9].when_needed, D.28273
	cmpl	-76(%rbp), %eax	# type, D.28273
	jne	.L1181	#,
	.loc 1 4345 0
	cmpl	$0, -40(%rbp)	#, check_any
	jne	.L1182	#,
	.loc 1 4345 0 is_stmt 0 discriminator 1
	movl	-48(%rbp), %eax	# i, tmp172
	movslq	%eax, %rdx	# tmp172, tmp171
	movq	%rdx, %rax	# tmp171, tmp173
	addq	%rax, %rax	# tmp173
	addq	%rdx, %rax	# tmp171, tmp173
	salq	$2, %rax	#, tmp173
	addq	%rdx, %rax	# tmp171, tmp173
	salq	$3, %rax	#, tmp174
	addq	$rld+64, %rax	#, tmp175
	movl	8(%rax), %eax	# rld[i_9].opnum, D.28270
	cmpl	-72(%rbp), %eax	# opnum, D.28270
	jne	.L1181	#,
.L1182:
	.loc 1 4346 0 is_stmt 1
	movl	-48(%rbp), %eax	# i, tmp177
	movslq	%eax, %rdx	# tmp177, tmp176
	movq	%rdx, %rax	# tmp176, tmp178
	addq	%rax, %rax	# tmp178
	addq	%rdx, %rax	# tmp176, tmp178
	salq	$2, %rax	#, tmp178
	addq	%rdx, %rax	# tmp176, tmp178
	salq	$3, %rax	#, tmp179
	addq	$rld+64, %rax	#, tmp180
	movq	(%rax), %rax	# rld[i_9].reg_rtx, D.28274
	testq	%rax, %rax	# D.28274
	je	.L1181	#,
.LBB112:
	.loc 1 4348 0
	movl	-48(%rbp), %eax	# i, tmp182
	movslq	%eax, %rdx	# tmp182, tmp181
	movq	%rdx, %rax	# tmp181, tmp183
	addq	%rax, %rax	# tmp183
	addq	%rdx, %rax	# tmp181, tmp183
	salq	$2, %rax	#, tmp183
	addq	%rdx, %rax	# tmp181, tmp183
	salq	$3, %rax	#, tmp184
	addq	$rld+64, %rax	#, tmp185
	movq	(%rax), %rax	# rld[i_9].reg_rtx, D.28274
	movq	%rax, %rdi	# D.28274,
	call	true_regnum	#
	movl	%eax, -32(%rbp)	# D.28270, conflict_start
	.loc 1 4351 0
	cmpl	$7, -32(%rbp)	#, conflict_start
	jbe	.L1183	#,
	.loc 1 4351 0 is_stmt 0 discriminator 1
	cmpl	$15, -32(%rbp)	#, conflict_start
	jbe	.L1184	#,
.L1183:
	.loc 1 4351 0 discriminator 2
	cmpl	$20, -32(%rbp)	#, conflict_start
	jbe	.L1185	#,
	.loc 1 4351 0 discriminator 1
	cmpl	$28, -32(%rbp)	#, conflict_start
	jbe	.L1184	#,
.L1185:
	.loc 1 4351 0 discriminator 2
	cmpl	$44, -32(%rbp)	#, conflict_start
	jbe	.L1186	#,
	.loc 1 4351 0 discriminator 1
	cmpl	$52, -32(%rbp)	#, conflict_start
	jbe	.L1184	#,
.L1186:
	.loc 1 4351 0 discriminator 2
	cmpl	$28, -32(%rbp)	#, conflict_start
	jbe	.L1187	#,
	.loc 1 4351 0 discriminator 1
	cmpl	$36, -32(%rbp)	#, conflict_start
	ja	.L1187	#,
.L1184:
	movl	-48(%rbp), %eax	# i, tmp187
	movslq	%eax, %rdx	# tmp187, tmp186
	movq	%rdx, %rax	# tmp186, tmp188
	addq	%rax, %rax	# tmp188
	addq	%rdx, %rax	# tmp186, tmp188
	salq	$2, %rax	#, tmp188
	addq	%rdx, %rax	# tmp186, tmp188
	salq	$3, %rax	#, tmp189
	addq	$rld+16, %rax	#, tmp190
	movl	12(%rax), %eax	# rld[i_9].mode, D.28275
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28272
	cmpl	$5, %eax	#, D.28272
	je	.L1188	#,
	.loc 1 4351 0 discriminator 4
	movl	-48(%rbp), %eax	# i, tmp193
	movslq	%eax, %rdx	# tmp193, tmp192
	movq	%rdx, %rax	# tmp192, tmp194
	addq	%rax, %rax	# tmp194
	addq	%rdx, %rax	# tmp192, tmp194
	salq	$2, %rax	#, tmp194
	addq	%rdx, %rax	# tmp192, tmp194
	salq	$3, %rax	#, tmp195
	addq	$rld+16, %rax	#, tmp196
	movl	12(%rax), %eax	# rld[i_9].mode, D.28275
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28272
	cmpl	$6, %eax	#, D.28272
	jne	.L1189	#,
.L1188:
	.loc 1 4351 0 discriminator 3
	movl	$2, %eax	#, iftmp.701
	jmp	.L1191	#
.L1189:
	.loc 1 4351 0 discriminator 1
	movl	$1, %eax	#, iftmp.701
	jmp	.L1191	#
.L1187:
	.loc 1 4351 0 discriminator 2
	movl	-48(%rbp), %eax	# i, tmp199
	movslq	%eax, %rdx	# tmp199, tmp198
	movq	%rdx, %rax	# tmp198, tmp200
	addq	%rax, %rax	# tmp200
	addq	%rdx, %rax	# tmp198, tmp200
	salq	$2, %rax	#, tmp200
	addq	%rdx, %rax	# tmp198, tmp200
	salq	$3, %rax	#, tmp201
	addq	$rld+16, %rax	#, tmp202
	movl	12(%rax), %eax	# rld[i_9].mode, D.28275
	cmpl	$18, %eax	#, D.28275
	jne	.L1192	#,
	.loc 1 4351 0 discriminator 6
	movl	target_flags(%rip), %eax	# target_flags, target_flags.704
	andl	$33554432, %eax	#, D.28270
	testl	%eax, %eax	# D.28270
	je	.L1193	#,
	.loc 1 4351 0 discriminator 8
	movl	$2, %eax	#, iftmp.703
	jmp	.L1191	#
.L1193:
	.loc 1 4351 0 discriminator 9
	movl	$3, %eax	#, iftmp.703
	jmp	.L1191	#
.L1192:
	.loc 1 4351 0 discriminator 7
	movl	-48(%rbp), %eax	# i, tmp204
	movslq	%eax, %rdx	# tmp204, tmp203
	movq	%rdx, %rax	# tmp203, tmp205
	addq	%rax, %rax	# tmp205
	addq	%rdx, %rax	# tmp203, tmp205
	salq	$2, %rax	#, tmp205
	addq	%rdx, %rax	# tmp203, tmp205
	salq	$3, %rax	#, tmp206
	addq	$rld+16, %rax	#, tmp207
	movl	12(%rax), %eax	# rld[i_9].mode, D.28275
	cmpl	$24, %eax	#, D.28275
	jne	.L1196	#,
	.loc 1 4351 0 discriminator 10
	movl	target_flags(%rip), %eax	# target_flags, target_flags.707
	andl	$33554432, %eax	#, D.28270
	testl	%eax, %eax	# D.28270
	je	.L1197	#,
	.loc 1 4351 0 discriminator 12
	movl	$4, %eax	#, iftmp.706
	jmp	.L1191	#
.L1197:
	.loc 1 4351 0 discriminator 13
	movl	$6, %eax	#, iftmp.706
	jmp	.L1191	#
.L1196:
	.loc 1 4351 0 discriminator 11
	movl	-48(%rbp), %eax	# i, tmp209
	movslq	%eax, %rdx	# tmp209, tmp208
	movq	%rdx, %rax	# tmp208, tmp210
	addq	%rax, %rax	# tmp210
	addq	%rdx, %rax	# tmp208, tmp210
	salq	$2, %rax	#, tmp210
	addq	%rdx, %rax	# tmp208, tmp210
	salq	$3, %rax	#, tmp211
	addq	$rld+16, %rax	#, tmp212
	movl	12(%rax), %eax	# rld[i_9].mode, D.28275
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28271
	movzbl	%al, %edx	# D.28271, D.28270
	movl	target_flags(%rip), %eax	# target_flags, target_flags.709
	andl	$33554432, %eax	#, D.28270
	testl	%eax, %eax	# D.28270
	je	.L1200	#,
	.loc 1 4351 0 discriminator 1
	movl	$8, %eax	#, iftmp.708
	jmp	.L1201	#
.L1200:
	.loc 1 4351 0 discriminator 2
	movl	$4, %eax	#, iftmp.708
.L1201:
	.loc 1 4351 0 discriminator 3
	addl	%edx, %eax	# D.28270, D.28270
	subl	$1, %eax	#, D.28270
	movl	target_flags(%rip), %edx	# target_flags, target_flags.711
	andl	$33554432, %edx	#, D.28270
	testl	%edx, %edx	# D.28270
	je	.L1202	#,
	.loc 1 4351 0 discriminator 1
	movl	$8, %ecx	#, iftmp.710
	jmp	.L1203	#
.L1202:
	.loc 1 4351 0 discriminator 2
	movl	$4, %ecx	#, iftmp.710
.L1203:
	.loc 1 4351 0 discriminator 3
	cltd
	idivl	%ecx	# iftmp.710
.L1191:
	.loc 1 4349 0 is_stmt 1
	movl	-32(%rbp), %edx	# conflict_start, tmp219
	addl	%edx, %eax	# tmp219, tmp218
	movl	%eax, -28(%rbp)	# tmp218, conflict_end
	.loc 1 4355 0
	movl	-32(%rbp), %eax	# conflict_start, tmp220
	cmpl	-60(%rbp), %eax	# start_regno, tmp220
	ja	.L1204	#,
	.loc 1 4355 0 is_stmt 0 discriminator 1
	movl	-28(%rbp), %eax	# conflict_end, tmp221
	cmpl	-60(%rbp), %eax	# start_regno, tmp221
	jbe	.L1204	#,
	.loc 1 4356 0 is_stmt 1
	movl	-28(%rbp), %eax	# conflict_end, tmp222
	movl	%eax, -60(%rbp)	# tmp222, start_regno
.L1204:
	.loc 1 4359 0
	movl	-32(%rbp), %eax	# conflict_start, tmp223
	cmpl	-60(%rbp), %eax	# start_regno, tmp223
	jbe	.L1181	#,
	.loc 1 4359 0 is_stmt 0 discriminator 1
	movl	-32(%rbp), %eax	# conflict_start, tmp224
	cmpl	-56(%rbp), %eax	# end_regno, tmp224
	jae	.L1181	#,
	.loc 1 4360 0 is_stmt 1
	movl	-32(%rbp), %eax	# conflict_start, tmp225
	movl	%eax, -56(%rbp)	# tmp225, end_regno
.L1181:
.LBE112:
	.loc 1 4342 0
	subl	$1, -48(%rbp)	#, i
.L1180:
	.loc 1 4342 0 is_stmt 0 discriminator 1
	cmpl	$0, -48(%rbp)	#, i
	jns	.L1205	#,
.L1179:
	.loc 1 4365 0 is_stmt 1
	movl	-60(%rbp), %eax	# start_regno, tmp226
	movl	%eax, -52(%rbp)	# tmp226, r
	jmp	.L1206	#
.L1207:
	.loc 1 4366 0 discriminator 2
	movq	-24(%rbp), %rax	# used_in_set, tmp227
	movq	(%rax), %rdx	# *used_in_set_12, D.28276
	movl	-52(%rbp), %eax	# r, r.712
	movl	$1, %esi	#, tmp228
	movl	%eax, %ecx	# r.712, tmp234
	salq	%cl, %rsi	# tmp234, D.28276
	movq	%rsi, %rax	# D.28276, D.28276
	notq	%rax	# D.28276
	andq	%rax, %rdx	# D.28276, D.28276
	movq	-24(%rbp), %rax	# used_in_set, tmp229
	movq	%rdx, (%rax)	# D.28276, *used_in_set_12
	.loc 1 4365 0 discriminator 2
	addl	$1, -52(%rbp)	#, r
.L1206:
	.loc 1 4365 0 is_stmt 0 discriminator 1
	movl	-52(%rbp), %eax	# r, tmp230
	cmpl	-56(%rbp), %eax	# end_regno, tmp230
	jb	.L1207	#,
	.loc 1 4367 0 is_stmt 1
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE42:
	.size	clear_reload_reg_in_use, .-clear_reload_reg_in_use
	.type	reload_reg_free_p, @function
reload_reg_free_p:
.LFB43:
	.loc 1 4377 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# regno, regno
	movl	%esi, -24(%rbp)	# opnum, opnum
	movl	%edx, -28(%rbp)	# type, type
	.loc 1 4381 0
	movq	reload_reg_used(%rip), %rdx	# reload_reg_used, reload_reg_used.713
	movl	-20(%rbp), %eax	# regno, regno.714
	movl	%eax, %ecx	# regno.714, tmp296
	shrq	%cl, %rdx	# tmp296, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1209	#,
	.loc 1 4382 0
	movq	reload_reg_unavailable(%rip), %rdx	# reload_reg_unavailable, reload_reg_unavailable.715
	movl	-20(%rbp), %eax	# regno, regno.716
	movl	%eax, %ecx	# regno.716, tmp298
	shrq	%cl, %rdx	# tmp298, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1210	#,
.L1209:
	.loc 1 4383 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1210:
	.loc 1 4385 0
	cmpl	$10, -28(%rbp)	#, type
	ja	.L1212	#,
	movl	-28(%rbp), %eax	# type, tmp233
	movq	.L1214(,%rax,8), %rax	#, tmp234
	jmp	*%rax	# tmp234
	.section	.rodata
	.align 8
	.align 4
.L1214:
	.quad	.L1213
	.quad	.L1215
	.quad	.L1216
	.quad	.L1217
	.quad	.L1218
	.quad	.L1219
	.quad	.L1220
	.quad	.L1221
	.quad	.L1222
	.quad	.L1223
	.quad	.L1224
	.text
.L1223:
	.loc 1 4389 0
	movq	reload_reg_used_in_other_addr(%rip), %rdx	# reload_reg_used_in_other_addr, reload_reg_used_in_other_addr.717
	movl	-20(%rbp), %eax	# regno, regno.718
	movl	%eax, %ecx	# regno.718, tmp300
	shrq	%cl, %rdx	# tmp300, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1225	#,
	.loc 1 4390 0
	movq	reload_reg_used_in_op_addr(%rip), %rdx	# reload_reg_used_in_op_addr, reload_reg_used_in_op_addr.719
	movl	-20(%rbp), %eax	# regno, regno.720
	movl	%eax, %ecx	# regno.720, tmp302
	shrq	%cl, %rdx	# tmp302, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1225	#,
	.loc 1 4391 0
	movq	reload_reg_used_in_insn(%rip), %rdx	# reload_reg_used_in_insn, reload_reg_used_in_insn.721
	movl	-20(%rbp), %eax	# regno, regno.722
	movl	%eax, %ecx	# regno.722, tmp304
	shrq	%cl, %rdx	# tmp304, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1226	#,
.L1225:
	.loc 1 4392 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1226:
	.loc 1 4394 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1227	#
.L1230:
	.loc 1 4395 0
	movl	-4(%rbp), %eax	# i, tmp236
	cltq
	movq	reload_reg_used_in_input_addr(,%rax,8), %rdx	# reload_reg_used_in_input_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.723
	movl	%eax, %ecx	# regno.723, tmp306
	shrq	%cl, %rdx	# tmp306, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1228	#,
	.loc 1 4396 0
	movl	-4(%rbp), %eax	# i, tmp238
	cltq
	movq	reload_reg_used_in_inpaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_inpaddr_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.724
	movl	%eax, %ecx	# regno.724, tmp308
	shrq	%cl, %rdx	# tmp308, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1228	#,
	.loc 1 4397 0
	movl	-4(%rbp), %eax	# i, tmp240
	cltq
	movq	reload_reg_used_in_output_addr(,%rax,8), %rdx	# reload_reg_used_in_output_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.725
	movl	%eax, %ecx	# regno.725, tmp310
	shrq	%cl, %rdx	# tmp310, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1228	#,
	.loc 1 4398 0
	movl	-4(%rbp), %eax	# i, tmp242
	cltq
	movq	reload_reg_used_in_outaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_outaddr_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.726
	movl	%eax, %ecx	# regno.726, tmp312
	shrq	%cl, %rdx	# tmp312, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1228	#,
	.loc 1 4399 0
	movl	-4(%rbp), %eax	# i, tmp244
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28278
	movl	-20(%rbp), %eax	# regno, regno.727
	movl	%eax, %ecx	# regno.727, tmp314
	shrq	%cl, %rdx	# tmp314, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1228	#,
	.loc 1 4400 0
	movl	-4(%rbp), %eax	# i, tmp246
	cltq
	movq	reload_reg_used_in_output(,%rax,8), %rdx	# reload_reg_used_in_output, D.28278
	movl	-20(%rbp), %eax	# regno, regno.728
	movl	%eax, %ecx	# regno.728, tmp316
	shrq	%cl, %rdx	# tmp316, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1229	#,
.L1228:
	.loc 1 4401 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1229:
	.loc 1 4394 0
	addl	$1, -4(%rbp)	#, i
.L1227:
	.loc 1 4394 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.729
	cmpl	%eax, -4(%rbp)	# reload_n_operands.729, i
	jl	.L1230	#,
	.loc 1 4403 0 is_stmt 1
	movl	$1, %eax	#, D.28277
	jmp	.L1211	#
.L1213:
	.loc 1 4406 0
	movq	reload_reg_used_in_insn(%rip), %rdx	# reload_reg_used_in_insn, reload_reg_used_in_insn.730
	movl	-20(%rbp), %eax	# regno, regno.731
	movl	%eax, %ecx	# regno.731, tmp318
	shrq	%cl, %rdx	# tmp318, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1231	#,
	.loc 1 4407 0
	movq	reload_reg_used_in_op_addr(%rip), %rdx	# reload_reg_used_in_op_addr, reload_reg_used_in_op_addr.732
	movl	-20(%rbp), %eax	# regno, regno.733
	movl	%eax, %ecx	# regno.733, tmp320
	shrq	%cl, %rdx	# tmp320, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1232	#,
.L1231:
	.loc 1 4408 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1232:
	.loc 1 4410 0
	movq	reload_reg_used_in_op_addr_reload(%rip), %rdx	# reload_reg_used_in_op_addr_reload, reload_reg_used_in_op_addr_reload.734
	movl	-20(%rbp), %eax	# regno, regno.735
	movl	%eax, %ecx	# regno.735, tmp322
	shrq	%cl, %rdx	# tmp322, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1233	#,
	.loc 1 4411 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1233:
	.loc 1 4414 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1234	#
.L1236:
	.loc 1 4415 0
	movl	-4(%rbp), %eax	# i, tmp248
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28278
	movl	-20(%rbp), %eax	# regno, regno.736
	movl	%eax, %ecx	# regno.736, tmp324
	shrq	%cl, %rdx	# tmp324, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1235	#,
	.loc 1 4416 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1235:
	.loc 1 4414 0
	addl	$1, -4(%rbp)	#, i
.L1234:
	.loc 1 4414 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.737
	cmpl	%eax, -4(%rbp)	# reload_n_operands.737, i
	jl	.L1236	#,
	.loc 1 4419 0 is_stmt 1
	movl	-24(%rbp), %eax	# opnum, tmp252
	addl	$1, %eax	#, tmp251
	movl	%eax, -4(%rbp)	# tmp251, i
	jmp	.L1237	#
.L1240:
	.loc 1 4420 0
	movl	-4(%rbp), %eax	# i, tmp254
	cltq
	movq	reload_reg_used_in_input_addr(,%rax,8), %rdx	# reload_reg_used_in_input_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.738
	movl	%eax, %ecx	# regno.738, tmp326
	shrq	%cl, %rdx	# tmp326, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1238	#,
	.loc 1 4421 0
	movl	-4(%rbp), %eax	# i, tmp256
	cltq
	movq	reload_reg_used_in_inpaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_inpaddr_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.739
	movl	%eax, %ecx	# regno.739, tmp328
	shrq	%cl, %rdx	# tmp328, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1239	#,
.L1238:
	.loc 1 4422 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1239:
	.loc 1 4419 0
	addl	$1, -4(%rbp)	#, i
.L1237:
	.loc 1 4419 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.740
	cmpl	%eax, -4(%rbp)	# reload_n_operands.740, i
	jl	.L1240	#,
	.loc 1 4424 0 is_stmt 1
	movl	$1, %eax	#, D.28277
	jmp	.L1211	#
.L1217:
	.loc 1 4429 0
	movl	-24(%rbp), %eax	# opnum, tmp258
	cltq
	movq	reload_reg_used_in_input_addr(,%rax,8), %rdx	# reload_reg_used_in_input_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.741
	movl	%eax, %ecx	# regno.741, tmp330
	shrq	%cl, %rdx	# tmp330, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1241	#,
	.loc 1 4430 0
	movl	-24(%rbp), %eax	# opnum, tmp260
	cltq
	movq	reload_reg_used_in_inpaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_inpaddr_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.742
	movl	%eax, %ecx	# regno.742, tmp332
	shrq	%cl, %rdx	# tmp332, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1242	#,
.L1241:
	.loc 1 4431 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1242:
	.loc 1 4433 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1243	#
.L1245:
	.loc 1 4434 0
	movl	-4(%rbp), %eax	# i, tmp262
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28278
	movl	-20(%rbp), %eax	# regno, regno.743
	movl	%eax, %ecx	# regno.743, tmp334
	shrq	%cl, %rdx	# tmp334, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1244	#,
	.loc 1 4435 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1244:
	.loc 1 4433 0
	addl	$1, -4(%rbp)	#, i
.L1243:
	.loc 1 4433 0 is_stmt 0 discriminator 1
	movl	-4(%rbp), %eax	# i, tmp263
	cmpl	-24(%rbp), %eax	# opnum, tmp263
	jl	.L1245	#,
	.loc 1 4437 0 is_stmt 1
	movl	$1, %eax	#, D.28277
	jmp	.L1211	#
.L1218:
	.loc 1 4443 0
	movl	-24(%rbp), %eax	# opnum, tmp265
	cltq
	movq	reload_reg_used_in_inpaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_inpaddr_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.744
	movl	%eax, %ecx	# regno.744, tmp336
	shrq	%cl, %rdx	# tmp336, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1246	#,
	.loc 1 4444 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1246:
	.loc 1 4446 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1247	#
.L1249:
	.loc 1 4447 0
	movl	-4(%rbp), %eax	# i, tmp267
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28278
	movl	-20(%rbp), %eax	# regno, regno.745
	movl	%eax, %ecx	# regno.745, tmp338
	shrq	%cl, %rdx	# tmp338, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1248	#,
	.loc 1 4448 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1248:
	.loc 1 4446 0
	addl	$1, -4(%rbp)	#, i
.L1247:
	.loc 1 4446 0 is_stmt 0 discriminator 1
	movl	-4(%rbp), %eax	# i, tmp268
	cmpl	-24(%rbp), %eax	# opnum, tmp268
	jl	.L1249	#,
	.loc 1 4450 0 is_stmt 1
	movl	$1, %eax	#, D.28277
	jmp	.L1211	#
.L1219:
	.loc 1 4457 0
	movl	-24(%rbp), %eax	# opnum, tmp270
	cltq
	movq	reload_reg_used_in_output_addr(,%rax,8), %rdx	# reload_reg_used_in_output_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.746
	movl	%eax, %ecx	# regno.746, tmp340
	shrq	%cl, %rdx	# tmp340, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1250	#,
	.loc 1 4458 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1250:
	.loc 1 4460 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1251	#
.L1253:
	.loc 1 4461 0
	movl	-4(%rbp), %eax	# i, tmp272
	cltq
	movq	reload_reg_used_in_output(,%rax,8), %rdx	# reload_reg_used_in_output, D.28278
	movl	-20(%rbp), %eax	# regno, regno.747
	movl	%eax, %ecx	# regno.747, tmp342
	shrq	%cl, %rdx	# tmp342, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1252	#,
	.loc 1 4462 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1252:
	.loc 1 4460 0
	addl	$1, -4(%rbp)	#, i
.L1251:
	.loc 1 4460 0 is_stmt 0 discriminator 1
	movl	-4(%rbp), %eax	# i, tmp273
	cmpl	-24(%rbp), %eax	# opnum, tmp273
	jle	.L1253	#,
	.loc 1 4464 0 is_stmt 1
	movl	$1, %eax	#, D.28277
	jmp	.L1211	#
.L1220:
	.loc 1 4472 0
	movl	-24(%rbp), %eax	# opnum, tmp275
	cltq
	movq	reload_reg_used_in_outaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_outaddr_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.748
	movl	%eax, %ecx	# regno.748, tmp344
	shrq	%cl, %rdx	# tmp344, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1254	#,
	.loc 1 4473 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1254:
	.loc 1 4475 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1255	#
.L1257:
	.loc 1 4476 0
	movl	-4(%rbp), %eax	# i, tmp277
	cltq
	movq	reload_reg_used_in_output(,%rax,8), %rdx	# reload_reg_used_in_output, D.28278
	movl	-20(%rbp), %eax	# regno, regno.749
	movl	%eax, %ecx	# regno.749, tmp346
	shrq	%cl, %rdx	# tmp346, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1256	#,
	.loc 1 4477 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1256:
	.loc 1 4475 0
	addl	$1, -4(%rbp)	#, i
.L1255:
	.loc 1 4475 0 is_stmt 0 discriminator 1
	movl	-4(%rbp), %eax	# i, tmp278
	cmpl	-24(%rbp), %eax	# opnum, tmp278
	jle	.L1257	#,
	.loc 1 4479 0 is_stmt 1
	movl	$1, %eax	#, D.28277
	jmp	.L1211	#
.L1221:
	.loc 1 4482 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1258	#
.L1260:
	.loc 1 4483 0
	movl	-4(%rbp), %eax	# i, tmp280
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28278
	movl	-20(%rbp), %eax	# regno, regno.750
	movl	%eax, %ecx	# regno.750, tmp348
	shrq	%cl, %rdx	# tmp348, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1259	#,
	.loc 1 4484 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1259:
	.loc 1 4482 0
	addl	$1, -4(%rbp)	#, i
.L1258:
	.loc 1 4482 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.751
	cmpl	%eax, -4(%rbp)	# reload_n_operands.751, i
	jl	.L1260	#,
	.loc 1 4486 0 is_stmt 1
	movq	reload_reg_used_in_insn(%rip), %rdx	# reload_reg_used_in_insn, reload_reg_used_in_insn.753
	movl	-20(%rbp), %eax	# regno, regno.754
	movl	%eax, %ecx	# regno.754, tmp350
	shrq	%cl, %rdx	# tmp350, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	.loc 1 4487 0
	testq	%rax, %rax	# D.28278
	jne	.L1261	#,
	.loc 1 4487 0 is_stmt 0 discriminator 1
	movq	reload_reg_used_in_op_addr(%rip), %rdx	# reload_reg_used_in_op_addr, reload_reg_used_in_op_addr.755
	movl	-20(%rbp), %eax	# regno, regno.756
	movl	%eax, %ecx	# regno.756, tmp352
	shrq	%cl, %rdx	# tmp352, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1261	#,
	.loc 1 4487 0 discriminator 3
	movl	$1, %eax	#, iftmp.752
	jmp	.L1262	#
.L1261:
	.loc 1 4487 0 discriminator 2
	movl	$0, %eax	#, iftmp.752
.L1262:
	.loc 1 4486 0 is_stmt 1
	jmp	.L1211	#
.L1222:
	.loc 1 4490 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1263	#
.L1265:
	.loc 1 4491 0
	movl	-4(%rbp), %eax	# i, tmp282
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28278
	movl	-20(%rbp), %eax	# regno, regno.757
	movl	%eax, %ecx	# regno.757, tmp354
	shrq	%cl, %rdx	# tmp354, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1264	#,
	.loc 1 4492 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1264:
	.loc 1 4490 0
	addl	$1, -4(%rbp)	#, i
.L1263:
	.loc 1 4490 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.758
	cmpl	%eax, -4(%rbp)	# reload_n_operands.758, i
	jl	.L1265	#,
	.loc 1 4494 0 is_stmt 1
	movq	reload_reg_used_in_op_addr_reload(%rip), %rdx	# reload_reg_used_in_op_addr_reload, reload_reg_used_in_op_addr_reload.759
	movl	-20(%rbp), %eax	# regno, regno.760
	movl	%eax, %ecx	# regno.760, tmp356
	shrq	%cl, %rdx	# tmp356, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	sete	%al	#, D.28279
	movzbl	%al, %eax	# D.28279, D.28277
	jmp	.L1211	#
.L1215:
	.loc 1 4501 0
	movq	reload_reg_used_in_insn(%rip), %rdx	# reload_reg_used_in_insn, reload_reg_used_in_insn.761
	movl	-20(%rbp), %eax	# regno, regno.762
	movl	%eax, %ecx	# regno.762, tmp358
	shrq	%cl, %rdx	# tmp358, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1266	#,
	.loc 1 4502 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1266:
	.loc 1 4504 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1267	#
.L1269:
	.loc 1 4505 0
	movl	-4(%rbp), %eax	# i, tmp284
	cltq
	movq	reload_reg_used_in_output(,%rax,8), %rdx	# reload_reg_used_in_output, D.28278
	movl	-20(%rbp), %eax	# regno, regno.763
	movl	%eax, %ecx	# regno.763, tmp360
	shrq	%cl, %rdx	# tmp360, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1268	#,
	.loc 1 4506 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1268:
	.loc 1 4504 0
	addl	$1, -4(%rbp)	#, i
.L1267:
	.loc 1 4504 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.764
	cmpl	%eax, -4(%rbp)	# reload_n_operands.764, i
	jl	.L1269	#,
	.loc 1 4508 0 is_stmt 1
	movl	-24(%rbp), %eax	# opnum, tmp285
	movl	%eax, -4(%rbp)	# tmp285, i
	jmp	.L1270	#
.L1273:
	.loc 1 4509 0
	movl	-4(%rbp), %eax	# i, tmp287
	cltq
	movq	reload_reg_used_in_output_addr(,%rax,8), %rdx	# reload_reg_used_in_output_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.765
	movl	%eax, %ecx	# regno.765, tmp362
	shrq	%cl, %rdx	# tmp362, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1271	#,
	.loc 1 4510 0
	movl	-4(%rbp), %eax	# i, tmp289
	cltq
	movq	reload_reg_used_in_outaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_outaddr_addr, D.28278
	movl	-20(%rbp), %eax	# regno, regno.766
	movl	%eax, %ecx	# regno.766, tmp364
	shrq	%cl, %rdx	# tmp364, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1272	#,
.L1271:
	.loc 1 4511 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1272:
	.loc 1 4508 0
	addl	$1, -4(%rbp)	#, i
.L1270:
	.loc 1 4508 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.767
	cmpl	%eax, -4(%rbp)	# reload_n_operands.767, i
	jl	.L1273	#,
	.loc 1 4513 0 is_stmt 1
	movl	$1, %eax	#, D.28277
	jmp	.L1211	#
.L1216:
	.loc 1 4516 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1274	#
.L1277:
	.loc 1 4517 0
	movl	-4(%rbp), %eax	# i, tmp291
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28278
	movl	-20(%rbp), %eax	# regno, regno.768
	movl	%eax, %ecx	# regno.768, tmp366
	shrq	%cl, %rdx	# tmp366, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1275	#,
	.loc 1 4518 0
	movl	-4(%rbp), %eax	# i, tmp293
	cltq
	movq	reload_reg_used_in_output(,%rax,8), %rdx	# reload_reg_used_in_output, D.28278
	movl	-20(%rbp), %eax	# regno, regno.769
	movl	%eax, %ecx	# regno.769, tmp368
	shrq	%cl, %rdx	# tmp368, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	je	.L1276	#,
.L1275:
	.loc 1 4519 0
	movl	$0, %eax	#, D.28277
	jmp	.L1211	#
.L1276:
	.loc 1 4516 0
	addl	$1, -4(%rbp)	#, i
.L1274:
	.loc 1 4516 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.770
	cmpl	%eax, -4(%rbp)	# reload_n_operands.770, i
	jl	.L1277	#,
	.loc 1 4521 0 is_stmt 1
	movq	reload_reg_used_in_insn(%rip), %rdx	# reload_reg_used_in_insn, reload_reg_used_in_insn.772
	movl	-20(%rbp), %eax	# regno, regno.773
	movl	%eax, %ecx	# regno.773, tmp370
	shrq	%cl, %rdx	# tmp370, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	.loc 1 4522 0
	testq	%rax, %rax	# D.28278
	jne	.L1278	#,
	.loc 1 4522 0 is_stmt 0 discriminator 1
	movq	reload_reg_used_in_op_addr(%rip), %rdx	# reload_reg_used_in_op_addr, reload_reg_used_in_op_addr.774
	movl	-20(%rbp), %eax	# regno, regno.775
	movl	%eax, %ecx	# regno.775, tmp372
	shrq	%cl, %rdx	# tmp372, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	jne	.L1278	#,
	.loc 1 4522 0 discriminator 3
	movl	$1, %eax	#, iftmp.771
	jmp	.L1279	#
.L1278:
	.loc 1 4522 0 discriminator 2
	movl	$0, %eax	#, iftmp.771
.L1279:
	.loc 1 4521 0 is_stmt 1
	jmp	.L1211	#
.L1224:
	.loc 1 4525 0
	movq	reload_reg_used_in_other_addr(%rip), %rdx	# reload_reg_used_in_other_addr, reload_reg_used_in_other_addr.776
	movl	-20(%rbp), %eax	# regno, regno.777
	movl	%eax, %ecx	# regno.777, tmp374
	shrq	%cl, %rdx	# tmp374, D.28278
	movq	%rdx, %rax	# D.28278, D.28278
	andl	$1, %eax	#, D.28278
	testq	%rax, %rax	# D.28278
	sete	%al	#, D.28279
	movzbl	%al, %eax	# D.28279, D.28277
	jmp	.L1211	#
.L1212:
	.loc 1 4527 0
	movl	$__FUNCTION__.15407, %edx	#,
	movl	$4527, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1211:
	.loc 1 4528 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE43:
	.size	reload_reg_free_p, .-reload_reg_free_p
	.type	reload_reg_reaches_end_p, @function
reload_reg_reaches_end_p:
.LFB44:
	.loc 1 4543 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# regno, regno
	movl	%esi, -24(%rbp)	# opnum, opnum
	movl	%edx, -28(%rbp)	# type, type
	.loc 1 4546 0
	cmpl	$10, -28(%rbp)	#, type
	ja	.L1281	#,
	movl	-28(%rbp), %eax	# type, tmp208
	movq	.L1283(,%rax,8), %rax	#, tmp209
	jmp	*%rax	# tmp209
	.section	.rodata
	.align 8
	.align 4
.L1283:
	.quad	.L1282
	.quad	.L1284
	.quad	.L1285
	.quad	.L1286
	.quad	.L1286
	.quad	.L1284
	.quad	.L1284
	.quad	.L1287
	.quad	.L1288
	.quad	.L1289
	.quad	.L1290
	.text
.L1289:
	.loc 1 4551 0
	movl	$1, %eax	#, D.28280
	jmp	.L1291	#
.L1290:
	.loc 1 4562 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1292	#
.L1295:
	.loc 1 4563 0
	movl	-4(%rbp), %eax	# i, tmp211
	cltq
	movq	reload_reg_used_in_output_addr(,%rax,8), %rdx	# reload_reg_used_in_output_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.778
	movl	%eax, %ecx	# regno.778, tmp269
	shrq	%cl, %rdx	# tmp269, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1293	#,
	.loc 1 4564 0
	movl	-4(%rbp), %eax	# i, tmp213
	cltq
	movq	reload_reg_used_in_outaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_outaddr_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.779
	movl	%eax, %ecx	# regno.779, tmp271
	shrq	%cl, %rdx	# tmp271, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1293	#,
	.loc 1 4565 0
	movl	-4(%rbp), %eax	# i, tmp215
	cltq
	movq	reload_reg_used_in_output(,%rax,8), %rdx	# reload_reg_used_in_output, D.28281
	movl	-20(%rbp), %eax	# regno, regno.780
	movl	%eax, %ecx	# regno.780, tmp273
	shrq	%cl, %rdx	# tmp273, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1293	#,
	.loc 1 4566 0
	movl	-4(%rbp), %eax	# i, tmp217
	cltq
	movq	reload_reg_used_in_input_addr(,%rax,8), %rdx	# reload_reg_used_in_input_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.781
	movl	%eax, %ecx	# regno.781, tmp275
	shrq	%cl, %rdx	# tmp275, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1293	#,
	.loc 1 4567 0
	movl	-4(%rbp), %eax	# i, tmp219
	cltq
	movq	reload_reg_used_in_inpaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_inpaddr_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.782
	movl	%eax, %ecx	# regno.782, tmp277
	shrq	%cl, %rdx	# tmp277, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1293	#,
	.loc 1 4568 0
	movl	-4(%rbp), %eax	# i, tmp221
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28281
	movl	-20(%rbp), %eax	# regno, regno.783
	movl	%eax, %ecx	# regno.783, tmp279
	shrq	%cl, %rdx	# tmp279, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	je	.L1294	#,
.L1293:
	.loc 1 4569 0
	movl	$0, %eax	#, D.28280
	jmp	.L1291	#
.L1294:
	.loc 1 4562 0
	addl	$1, -4(%rbp)	#, i
.L1292:
	.loc 1 4562 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.784
	cmpl	%eax, -4(%rbp)	# reload_n_operands.784, i
	jl	.L1295	#,
	.loc 1 4571 0 is_stmt 1
	movq	reload_reg_used_in_op_addr(%rip), %rdx	# reload_reg_used_in_op_addr, reload_reg_used_in_op_addr.786
	movl	-20(%rbp), %eax	# regno, regno.787
	movl	%eax, %ecx	# regno.787, tmp281
	shrq	%cl, %rdx	# tmp281, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	.loc 1 4573 0
	testq	%rax, %rax	# D.28281
	jne	.L1296	#,
	.loc 1 4572 0
	movq	reload_reg_used_in_insn(%rip), %rdx	# reload_reg_used_in_insn, reload_reg_used_in_insn.788
	movl	-20(%rbp), %eax	# regno, regno.789
	movl	%eax, %ecx	# regno.789, tmp283
	shrq	%cl, %rdx	# tmp283, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1296	#,
	.loc 1 4573 0
	movq	reload_reg_used(%rip), %rdx	# reload_reg_used, reload_reg_used.790
	movl	-20(%rbp), %eax	# regno, regno.791
	movl	%eax, %ecx	# regno.791, tmp285
	shrq	%cl, %rdx	# tmp285, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1296	#,
	.loc 1 4573 0 is_stmt 0 discriminator 2
	movl	$1, %eax	#, iftmp.785
	jmp	.L1297	#
.L1296:
	.loc 1 4573 0 discriminator 1
	movl	$0, %eax	#, iftmp.785
.L1297:
	.loc 1 4571 0 is_stmt 1
	jmp	.L1291	#
.L1286:
	.loc 1 4582 0
	movl	-24(%rbp), %eax	# opnum, tmp222
	movl	%eax, -4(%rbp)	# tmp222, i
	jmp	.L1298	#
.L1300:
	.loc 1 4583 0
	movl	-4(%rbp), %eax	# i, tmp224
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28281
	movl	-20(%rbp), %eax	# regno, regno.792
	movl	%eax, %ecx	# regno.792, tmp287
	shrq	%cl, %rdx	# tmp287, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	je	.L1299	#,
	.loc 1 4584 0
	movl	$0, %eax	#, D.28280
	jmp	.L1291	#
.L1299:
	.loc 1 4582 0
	addl	$1, -4(%rbp)	#, i
.L1298:
	.loc 1 4582 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.793
	cmpl	%eax, -4(%rbp)	# reload_n_operands.793, i
	jl	.L1300	#,
	.loc 1 4586 0 is_stmt 1
	movl	-24(%rbp), %eax	# opnum, tmp228
	addl	$1, %eax	#, tmp227
	movl	%eax, -4(%rbp)	# tmp227, i
	jmp	.L1301	#
.L1304:
	.loc 1 4587 0
	movl	-4(%rbp), %eax	# i, tmp230
	cltq
	movq	reload_reg_used_in_input_addr(,%rax,8), %rdx	# reload_reg_used_in_input_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.794
	movl	%eax, %ecx	# regno.794, tmp289
	shrq	%cl, %rdx	# tmp289, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1302	#,
	.loc 1 4588 0
	movl	-4(%rbp), %eax	# i, tmp232
	cltq
	movq	reload_reg_used_in_inpaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_inpaddr_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.795
	movl	%eax, %ecx	# regno.795, tmp291
	shrq	%cl, %rdx	# tmp291, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	je	.L1303	#,
.L1302:
	.loc 1 4589 0
	movl	$0, %eax	#, D.28280
	jmp	.L1291	#
.L1303:
	.loc 1 4586 0
	addl	$1, -4(%rbp)	#, i
.L1301:
	.loc 1 4586 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.796
	cmpl	%eax, -4(%rbp)	# reload_n_operands.796, i
	jl	.L1304	#,
	.loc 1 4591 0 is_stmt 1
	movl	$0, -4(%rbp)	#, i
	jmp	.L1305	#
.L1308:
	.loc 1 4592 0
	movl	-4(%rbp), %eax	# i, tmp234
	cltq
	movq	reload_reg_used_in_output_addr(,%rax,8), %rdx	# reload_reg_used_in_output_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.797
	movl	%eax, %ecx	# regno.797, tmp293
	shrq	%cl, %rdx	# tmp293, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1306	#,
	.loc 1 4593 0
	movl	-4(%rbp), %eax	# i, tmp236
	cltq
	movq	reload_reg_used_in_outaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_outaddr_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.798
	movl	%eax, %ecx	# regno.798, tmp295
	shrq	%cl, %rdx	# tmp295, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1306	#,
	.loc 1 4594 0
	movl	-4(%rbp), %eax	# i, tmp238
	cltq
	movq	reload_reg_used_in_output(,%rax,8), %rdx	# reload_reg_used_in_output, D.28281
	movl	-20(%rbp), %eax	# regno, regno.799
	movl	%eax, %ecx	# regno.799, tmp297
	shrq	%cl, %rdx	# tmp297, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	je	.L1307	#,
.L1306:
	.loc 1 4595 0
	movl	$0, %eax	#, D.28280
	jmp	.L1291	#
.L1307:
	.loc 1 4591 0
	addl	$1, -4(%rbp)	#, i
.L1305:
	.loc 1 4591 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.800
	cmpl	%eax, -4(%rbp)	# reload_n_operands.800, i
	jl	.L1308	#,
	.loc 1 4597 0 is_stmt 1
	movq	reload_reg_used_in_op_addr_reload(%rip), %rdx	# reload_reg_used_in_op_addr_reload, reload_reg_used_in_op_addr_reload.801
	movl	-20(%rbp), %eax	# regno, regno.802
	movl	%eax, %ecx	# regno.802, tmp299
	shrq	%cl, %rdx	# tmp299, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	je	.L1309	#,
	.loc 1 4598 0
	movl	$0, %eax	#, D.28280
	jmp	.L1291	#
.L1309:
	.loc 1 4600 0
	movq	reload_reg_used_in_op_addr(%rip), %rdx	# reload_reg_used_in_op_addr, reload_reg_used_in_op_addr.804
	movl	-20(%rbp), %eax	# regno, regno.805
	movl	%eax, %ecx	# regno.805, tmp301
	shrq	%cl, %rdx	# tmp301, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	.loc 1 4602 0
	testq	%rax, %rax	# D.28281
	jne	.L1310	#,
	.loc 1 4601 0
	movq	reload_reg_used_in_insn(%rip), %rdx	# reload_reg_used_in_insn, reload_reg_used_in_insn.806
	movl	-20(%rbp), %eax	# regno, regno.807
	movl	%eax, %ecx	# regno.807, tmp303
	shrq	%cl, %rdx	# tmp303, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1310	#,
	.loc 1 4602 0
	movq	reload_reg_used(%rip), %rdx	# reload_reg_used, reload_reg_used.808
	movl	-20(%rbp), %eax	# regno, regno.809
	movl	%eax, %ecx	# regno.809, tmp305
	shrq	%cl, %rdx	# tmp305, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1310	#,
	.loc 1 4602 0 is_stmt 0 discriminator 2
	movl	$1, %eax	#, iftmp.803
	jmp	.L1311	#
.L1310:
	.loc 1 4602 0 discriminator 1
	movl	$0, %eax	#, iftmp.803
.L1311:
	.loc 1 4600 0 is_stmt 1
	jmp	.L1291	#
.L1282:
	.loc 1 4610 0
	movl	-24(%rbp), %eax	# opnum, tmp242
	addl	$1, %eax	#, tmp241
	movl	%eax, -4(%rbp)	# tmp241, i
	jmp	.L1312	#
.L1315:
	.loc 1 4611 0
	movl	-4(%rbp), %eax	# i, tmp244
	cltq
	movq	reload_reg_used_in_input_addr(,%rax,8), %rdx	# reload_reg_used_in_input_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.810
	movl	%eax, %ecx	# regno.810, tmp307
	shrq	%cl, %rdx	# tmp307, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1313	#,
	.loc 1 4612 0
	movl	-4(%rbp), %eax	# i, tmp246
	cltq
	movq	reload_reg_used_in_inpaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_inpaddr_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.811
	movl	%eax, %ecx	# regno.811, tmp309
	shrq	%cl, %rdx	# tmp309, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1313	#,
	.loc 1 4613 0
	movl	-4(%rbp), %eax	# i, tmp248
	cltq
	movq	reload_reg_used_in_input(,%rax,8), %rdx	# reload_reg_used_in_input, D.28281
	movl	-20(%rbp), %eax	# regno, regno.812
	movl	%eax, %ecx	# regno.812, tmp311
	shrq	%cl, %rdx	# tmp311, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	je	.L1314	#,
.L1313:
	.loc 1 4614 0
	movl	$0, %eax	#, D.28280
	jmp	.L1291	#
.L1314:
	.loc 1 4610 0
	addl	$1, -4(%rbp)	#, i
.L1312:
	.loc 1 4610 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.813
	cmpl	%eax, -4(%rbp)	# reload_n_operands.813, i
	jl	.L1315	#,
.L1287:
	.loc 1 4621 0 is_stmt 1
	movl	$0, -4(%rbp)	#, i
	jmp	.L1316	#
.L1319:
	.loc 1 4622 0
	movl	-4(%rbp), %eax	# i, tmp250
	cltq
	movq	reload_reg_used_in_output_addr(,%rax,8), %rdx	# reload_reg_used_in_output_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.814
	movl	%eax, %ecx	# regno.814, tmp313
	shrq	%cl, %rdx	# tmp313, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1317	#,
	.loc 1 4623 0
	movl	-4(%rbp), %eax	# i, tmp252
	cltq
	movq	reload_reg_used_in_outaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_outaddr_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.815
	movl	%eax, %ecx	# regno.815, tmp315
	shrq	%cl, %rdx	# tmp315, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1317	#,
	.loc 1 4624 0
	movl	-4(%rbp), %eax	# i, tmp254
	cltq
	movq	reload_reg_used_in_output(,%rax,8), %rdx	# reload_reg_used_in_output, D.28281
	movl	-20(%rbp), %eax	# regno, regno.816
	movl	%eax, %ecx	# regno.816, tmp317
	shrq	%cl, %rdx	# tmp317, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	je	.L1318	#,
.L1317:
	.loc 1 4625 0
	movl	$0, %eax	#, D.28280
	jmp	.L1291	#
.L1318:
	.loc 1 4621 0
	addl	$1, -4(%rbp)	#, i
.L1316:
	.loc 1 4621 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.817
	cmpl	%eax, -4(%rbp)	# reload_n_operands.817, i
	jl	.L1319	#,
	.loc 1 4627 0 is_stmt 1
	movq	reload_reg_used(%rip), %rdx	# reload_reg_used, reload_reg_used.818
	movl	-20(%rbp), %eax	# regno, regno.819
	movl	%eax, %ecx	# regno.819, tmp319
	shrq	%cl, %rdx	# tmp319, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	sete	%al	#, D.28282
	movzbl	%al, %eax	# D.28282, D.28280
	jmp	.L1291	#
.L1288:
	.loc 1 4630 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1320	#
.L1323:
	.loc 1 4631 0
	movl	-4(%rbp), %eax	# i, tmp256
	cltq
	movq	reload_reg_used_in_output_addr(,%rax,8), %rdx	# reload_reg_used_in_output_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.820
	movl	%eax, %ecx	# regno.820, tmp321
	shrq	%cl, %rdx	# tmp321, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1321	#,
	.loc 1 4632 0
	movl	-4(%rbp), %eax	# i, tmp258
	cltq
	movq	reload_reg_used_in_outaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_outaddr_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.821
	movl	%eax, %ecx	# regno.821, tmp323
	shrq	%cl, %rdx	# tmp323, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1321	#,
	.loc 1 4633 0
	movl	-4(%rbp), %eax	# i, tmp260
	cltq
	movq	reload_reg_used_in_output(,%rax,8), %rdx	# reload_reg_used_in_output, D.28281
	movl	-20(%rbp), %eax	# regno, regno.822
	movl	%eax, %ecx	# regno.822, tmp325
	shrq	%cl, %rdx	# tmp325, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	je	.L1322	#,
.L1321:
	.loc 1 4634 0
	movl	$0, %eax	#, D.28280
	jmp	.L1291	#
.L1322:
	.loc 1 4630 0
	addl	$1, -4(%rbp)	#, i
.L1320:
	.loc 1 4630 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.823
	cmpl	%eax, -4(%rbp)	# reload_n_operands.823, i
	jl	.L1323	#,
	.loc 1 4636 0 is_stmt 1
	movq	reload_reg_used_in_op_addr(%rip), %rdx	# reload_reg_used_in_op_addr, reload_reg_used_in_op_addr.825
	movl	-20(%rbp), %eax	# regno, regno.826
	movl	%eax, %ecx	# regno.826, tmp327
	shrq	%cl, %rdx	# tmp327, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	.loc 1 4638 0
	testq	%rax, %rax	# D.28281
	jne	.L1324	#,
	.loc 1 4637 0
	movq	reload_reg_used_in_insn(%rip), %rdx	# reload_reg_used_in_insn, reload_reg_used_in_insn.827
	movl	-20(%rbp), %eax	# regno, regno.828
	movl	%eax, %ecx	# regno.828, tmp329
	shrq	%cl, %rdx	# tmp329, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1324	#,
	.loc 1 4638 0
	movq	reload_reg_used(%rip), %rdx	# reload_reg_used, reload_reg_used.829
	movl	-20(%rbp), %eax	# regno, regno.830
	movl	%eax, %ecx	# regno.830, tmp331
	shrq	%cl, %rdx	# tmp331, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1324	#,
	.loc 1 4638 0 is_stmt 0 discriminator 2
	movl	$1, %eax	#, iftmp.824
	jmp	.L1325	#
.L1324:
	.loc 1 4638 0 discriminator 1
	movl	$0, %eax	#, iftmp.824
.L1325:
	.loc 1 4636 0 is_stmt 1
	jmp	.L1291	#
.L1285:
	.loc 1 4644 0
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, tmp261
	movl	%eax, -24(%rbp)	# tmp261, opnum
.L1284:
	.loc 1 4655 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1326	#
.L1329:
	.loc 1 4656 0
	movl	-4(%rbp), %eax	# i, tmp263
	cltq
	movq	reload_reg_used_in_output_addr(,%rax,8), %rdx	# reload_reg_used_in_output_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.831
	movl	%eax, %ecx	# regno.831, tmp333
	shrq	%cl, %rdx	# tmp333, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	jne	.L1327	#,
	.loc 1 4657 0
	movl	-4(%rbp), %eax	# i, tmp265
	cltq
	movq	reload_reg_used_in_outaddr_addr(,%rax,8), %rdx	# reload_reg_used_in_outaddr_addr, D.28281
	movl	-20(%rbp), %eax	# regno, regno.832
	movl	%eax, %ecx	# regno.832, tmp335
	shrq	%cl, %rdx	# tmp335, D.28281
	movq	%rdx, %rax	# D.28281, D.28281
	andl	$1, %eax	#, D.28281
	testq	%rax, %rax	# D.28281
	je	.L1328	#,
.L1327:
	.loc 1 4658 0
	movl	$0, %eax	#, D.28280
	jmp	.L1291	#
.L1328:
	.loc 1 4655 0
	addl	$1, -4(%rbp)	#, i
.L1326:
	.loc 1 4655 0 is_stmt 0 discriminator 1
	movl	-4(%rbp), %eax	# i, tmp266
	cmpl	-24(%rbp), %eax	# opnum, tmp266
	jl	.L1329	#,
	.loc 1 4660 0 is_stmt 1
	movl	$1, %eax	#, D.28280
	jmp	.L1291	#
.L1281:
	.loc 1 4663 0
	movl	$__FUNCTION__.15449, %edx	#,
	movl	$4663, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1291:
	.loc 1 4664 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE44:
	.size	reload_reg_reaches_end_p, .-reload_reg_reaches_end_p
	.globl	reloads_conflict
	.type	reloads_conflict, @function
reloads_conflict:
.LFB45:
	.loc 1 4674 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# r1, r1
	movl	%esi, -24(%rbp)	# r2, r2
	.loc 1 4675 0
	movl	-20(%rbp), %eax	# r1, tmp72
	movslq	%eax, %rdx	# tmp72, tmp71
	movq	%rdx, %rax	# tmp71, tmp73
	addq	%rax, %rax	# tmp73
	addq	%rdx, %rax	# tmp71, tmp73
	salq	$2, %rax	#, tmp73
	addq	%rdx, %rax	# tmp71, tmp73
	salq	$3, %rax	#, tmp74
	addq	$rld+80, %rax	#, tmp75
	movl	12(%rax), %eax	# rld[r1_11(D)].when_needed, tmp76
	movl	%eax, -16(%rbp)	# tmp76, r1_type
	.loc 1 4676 0
	movl	-24(%rbp), %eax	# r2, tmp78
	movslq	%eax, %rdx	# tmp78, tmp77
	movq	%rdx, %rax	# tmp77, tmp79
	addq	%rax, %rax	# tmp79
	addq	%rdx, %rax	# tmp77, tmp79
	salq	$2, %rax	#, tmp79
	addq	%rdx, %rax	# tmp77, tmp79
	salq	$3, %rax	#, tmp80
	addq	$rld+80, %rax	#, tmp81
	movl	12(%rax), %eax	# rld[r2_13(D)].when_needed, tmp82
	movl	%eax, -12(%rbp)	# tmp82, r2_type
	.loc 1 4677 0
	movl	-20(%rbp), %eax	# r1, tmp84
	movslq	%eax, %rdx	# tmp84, tmp83
	movq	%rdx, %rax	# tmp83, tmp85
	addq	%rax, %rax	# tmp85
	addq	%rdx, %rax	# tmp83, tmp85
	salq	$2, %rax	#, tmp85
	addq	%rdx, %rax	# tmp83, tmp85
	salq	$3, %rax	#, tmp86
	addq	$rld+64, %rax	#, tmp87
	movl	8(%rax), %eax	# rld[r1_11(D)].opnum, tmp88
	movl	%eax, -8(%rbp)	# tmp88, r1_opnum
	.loc 1 4678 0
	movl	-24(%rbp), %eax	# r2, tmp90
	movslq	%eax, %rdx	# tmp90, tmp89
	movq	%rdx, %rax	# tmp89, tmp91
	addq	%rax, %rax	# tmp91
	addq	%rdx, %rax	# tmp89, tmp91
	salq	$2, %rax	#, tmp91
	addq	%rdx, %rax	# tmp89, tmp91
	salq	$3, %rax	#, tmp92
	addq	$rld+64, %rax	#, tmp93
	movl	8(%rax), %eax	# rld[r2_13(D)].opnum, tmp94
	movl	%eax, -4(%rbp)	# tmp94, r2_opnum
	.loc 1 4681 0
	cmpl	$9, -12(%rbp)	#, r2_type
	jne	.L1331	#,
	.loc 1 4682 0
	movl	$1, %eax	#, D.28283
	jmp	.L1332	#
.L1331:
	.loc 1 4686 0
	cmpl	$10, -16(%rbp)	#, r1_type
	ja	.L1333	#,
	movl	-16(%rbp), %eax	# r1_type, tmp95
	movq	.L1335(,%rax,8), %rax	#, tmp96
	jmp	*%rax	# tmp96
	.section	.rodata
	.align 8
	.align 4
.L1335:
	.quad	.L1334
	.quad	.L1336
	.quad	.L1337
	.quad	.L1338
	.quad	.L1339
	.quad	.L1340
	.quad	.L1341
	.quad	.L1342
	.quad	.L1343
	.quad	.L1344
	.quad	.L1345
	.text
.L1334:
	.loc 1 4693 0
	cmpl	$2, -12(%rbp)	#, r2_type
	je	.L1346	#,
	.loc 1 4690 0
	cmpl	$7, -12(%rbp)	#, r2_type
	je	.L1346	#,
	.loc 1 4691 0
	cmpl	$8, -12(%rbp)	#, r2_type
	je	.L1346	#,
	.loc 1 4692 0
	cmpl	$0, -12(%rbp)	#, r2_type
	je	.L1346	#,
	.loc 1 4693 0
	cmpl	$3, -12(%rbp)	#, r2_type
	je	.L1347	#,
	.loc 1 4694 0
	cmpl	$4, -12(%rbp)	#, r2_type
	jne	.L1348	#,
.L1347:
	.loc 1 4695 0
	movl	-4(%rbp), %eax	# r2_opnum, tmp97
	cmpl	-8(%rbp), %eax	# r1_opnum, tmp97
	jle	.L1348	#,
.L1346:
	.loc 1 4693 0 discriminator 1
	movl	$1, %eax	#, iftmp.833
	jmp	.L1349	#
.L1348:
	.loc 1 4693 0 is_stmt 0
	movl	$0, %eax	#, iftmp.833
.L1349:
	.loc 1 4689 0 is_stmt 1
	jmp	.L1332	#
.L1338:
	.loc 1 4699 0
	cmpl	$3, -12(%rbp)	#, r2_type
	jne	.L1350	#,
	.loc 1 4698 0
	movl	-8(%rbp), %eax	# r1_opnum, tmp98
	cmpl	-4(%rbp), %eax	# r2_opnum, tmp98
	je	.L1351	#,
.L1350:
	.loc 1 4699 0 discriminator 1
	cmpl	$0, -12(%rbp)	#, r2_type
	jne	.L1352	#,
	.loc 1 4699 0 is_stmt 0 discriminator 2
	movl	-4(%rbp), %eax	# r2_opnum, tmp99
	cmpl	-8(%rbp), %eax	# r1_opnum, tmp99
	jge	.L1352	#,
.L1351:
	.loc 1 4699 0 discriminator 1
	movl	$1, %eax	#, iftmp.834
	jmp	.L1353	#
.L1352:
	.loc 1 4699 0 discriminator 3
	movl	$0, %eax	#, iftmp.834
.L1353:
	.loc 1 4698 0 is_stmt 1
	jmp	.L1332	#
.L1339:
	.loc 1 4703 0
	cmpl	$4, -12(%rbp)	#, r2_type
	jne	.L1354	#,
	.loc 1 4702 0
	movl	-8(%rbp), %eax	# r1_opnum, tmp100
	cmpl	-4(%rbp), %eax	# r2_opnum, tmp100
	je	.L1355	#,
.L1354:
	.loc 1 4703 0 discriminator 1
	cmpl	$0, -12(%rbp)	#, r2_type
	jne	.L1356	#,
	.loc 1 4703 0 is_stmt 0 discriminator 2
	movl	-4(%rbp), %eax	# r2_opnum, tmp101
	cmpl	-8(%rbp), %eax	# r1_opnum, tmp101
	jge	.L1356	#,
.L1355:
	.loc 1 4703 0 discriminator 1
	movl	$1, %eax	#, iftmp.835
	jmp	.L1357	#
.L1356:
	.loc 1 4703 0 discriminator 3
	movl	$0, %eax	#, iftmp.835
.L1357:
	.loc 1 4702 0 is_stmt 1
	jmp	.L1332	#
.L1340:
	.loc 1 4707 0
	cmpl	$5, -12(%rbp)	#, r2_type
	jne	.L1358	#,
	.loc 1 4706 0
	movl	-4(%rbp), %eax	# r2_opnum, tmp102
	cmpl	-8(%rbp), %eax	# r1_opnum, tmp102
	je	.L1359	#,
.L1358:
	.loc 1 4707 0 discriminator 1
	cmpl	$1, -12(%rbp)	#, r2_type
	jne	.L1360	#,
	.loc 1 4707 0 is_stmt 0 discriminator 2
	movl	-4(%rbp), %eax	# r2_opnum, tmp103
	cmpl	-8(%rbp), %eax	# r1_opnum, tmp103
	jg	.L1360	#,
.L1359:
	.loc 1 4707 0 discriminator 1
	movl	$1, %eax	#, iftmp.836
	jmp	.L1361	#
.L1360:
	.loc 1 4707 0 discriminator 3
	movl	$0, %eax	#, iftmp.836
.L1361:
	.loc 1 4706 0 is_stmt 1
	jmp	.L1332	#
.L1341:
	.loc 1 4711 0
	cmpl	$6, -12(%rbp)	#, r2_type
	jne	.L1362	#,
	.loc 1 4710 0
	movl	-4(%rbp), %eax	# r2_opnum, tmp104
	cmpl	-8(%rbp), %eax	# r1_opnum, tmp104
	je	.L1363	#,
.L1362:
	.loc 1 4711 0 discriminator 1
	cmpl	$1, -12(%rbp)	#, r2_type
	jne	.L1364	#,
	.loc 1 4711 0 is_stmt 0 discriminator 2
	movl	-4(%rbp), %eax	# r2_opnum, tmp105
	cmpl	-8(%rbp), %eax	# r1_opnum, tmp105
	jg	.L1364	#,
.L1363:
	.loc 1 4711 0 discriminator 1
	movl	$1, %eax	#, iftmp.837
	jmp	.L1365	#
.L1364:
	.loc 1 4711 0 discriminator 3
	movl	$0, %eax	#, iftmp.837
.L1365:
	.loc 1 4710 0 is_stmt 1
	jmp	.L1332	#
.L1342:
	.loc 1 4715 0
	cmpl	$0, -12(%rbp)	#, r2_type
	je	.L1366	#,
	.loc 1 4714 0
	cmpl	$2, -12(%rbp)	#, r2_type
	je	.L1366	#,
	.loc 1 4715 0
	cmpl	$7, -12(%rbp)	#, r2_type
	jne	.L1367	#,
.L1366:
	.loc 1 4715 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.838
	jmp	.L1368	#
.L1367:
	.loc 1 4715 0 discriminator 2
	movl	$0, %eax	#, iftmp.838
.L1368:
	.loc 1 4714 0 is_stmt 1
	jmp	.L1332	#
.L1343:
	.loc 1 4719 0
	cmpl	$0, -12(%rbp)	#, r2_type
	je	.L1369	#,
	.loc 1 4719 0 is_stmt 0 discriminator 2
	cmpl	$8, -12(%rbp)	#, r2_type
	jne	.L1370	#,
.L1369:
	.loc 1 4719 0 discriminator 1
	movl	$1, %eax	#, iftmp.839
	jmp	.L1371	#
.L1370:
	.loc 1 4719 0 discriminator 3
	movl	$0, %eax	#, iftmp.839
.L1371:
	.loc 1 4718 0 is_stmt 1
	jmp	.L1332	#
.L1336:
	.loc 1 4723 0
	cmpl	$2, -12(%rbp)	#, r2_type
	je	.L1372	#,
	.loc 1 4722 0
	cmpl	$1, -12(%rbp)	#, r2_type
	je	.L1372	#,
	.loc 1 4723 0
	cmpl	$5, -12(%rbp)	#, r2_type
	je	.L1373	#,
	.loc 1 4724 0
	cmpl	$6, -12(%rbp)	#, r2_type
	jne	.L1374	#,
.L1373:
	.loc 1 4725 0
	movl	-4(%rbp), %eax	# r2_opnum, tmp106
	cmpl	-8(%rbp), %eax	# r1_opnum, tmp106
	jl	.L1374	#,
.L1372:
	.loc 1 4723 0 discriminator 1
	movl	$1, %eax	#, iftmp.840
	jmp	.L1375	#
.L1374:
	.loc 1 4723 0 is_stmt 0
	movl	$0, %eax	#, iftmp.840
.L1375:
	.loc 1 4722 0 is_stmt 1
	jmp	.L1332	#
.L1337:
	.loc 1 4730 0
	cmpl	$0, -12(%rbp)	#, r2_type
	je	.L1376	#,
	.loc 1 4728 0
	cmpl	$1, -12(%rbp)	#, r2_type
	je	.L1376	#,
	.loc 1 4729 0
	cmpl	$2, -12(%rbp)	#, r2_type
	je	.L1376	#,
	.loc 1 4730 0
	cmpl	$7, -12(%rbp)	#, r2_type
	jne	.L1377	#,
.L1376:
	.loc 1 4730 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.841
	jmp	.L1378	#
.L1377:
	.loc 1 4730 0 discriminator 2
	movl	$0, %eax	#, iftmp.841
.L1378:
	.loc 1 4728 0 is_stmt 1
	jmp	.L1332	#
.L1345:
	.loc 1 4733 0
	cmpl	$10, -12(%rbp)	#, r2_type
	sete	%al	#, D.28284
	movzbl	%al, %eax	# D.28284, D.28283
	jmp	.L1332	#
.L1344:
	.loc 1 4736 0
	movl	$1, %eax	#, D.28283
	jmp	.L1332	#
.L1333:
	.loc 1 4739 0
	movl	$__FUNCTION__.15470, %edx	#,
	movl	$4739, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1332:
	.loc 1 4741 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE45:
	.size	reloads_conflict, .-reloads_conflict
	.comm	reload_inherited,180,32
	.comm	reload_inheritance_insn,1440,32
	.comm	reload_override_in,1440,32
	.comm	reload_spill_index,720,32
	.type	reload_reg_free_for_value_p, @function
reload_reg_free_for_value_p:
.LFB46:
	.loc 1 4772 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -68(%rbp)	# start_regno, start_regno
	movl	%esi, -72(%rbp)	# regno, regno
	movl	%edx, -76(%rbp)	# opnum, opnum
	movl	%ecx, -80(%rbp)	# type, type
	movq	%r8, -88(%rbp)	# value, value
	movq	%r9, -96(%rbp)	# out, out
	.loc 1 4777 0
	movl	$0, -48(%rbp)	#, check_earlyclobber
	.loc 1 4779 0
	movl	$0, -40(%rbp)	#, copy
	.loc 1 4781 0
	movq	reload_reg_unavailable(%rip), %rdx	# reload_reg_unavailable, reload_reg_unavailable.842
	movl	-72(%rbp), %eax	# regno, tmp149
	movl	%eax, %ecx	# tmp149, tmp315
	shrq	%cl, %rdx	# tmp315, D.28286
	movq	%rdx, %rax	# D.28286, D.28286
	andl	$1, %eax	#, D.28286
	testq	%rax, %rax	# D.28286
	je	.L1380	#,
	.loc 1 4782 0
	movl	$0, %eax	#, D.28285
	jmp	.L1381	#
.L1380:
	.loc 1 4784 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.28287
	cmpq	-96(%rbp), %rax	# out, D.28287
	jne	.L1382	#,
	.loc 1 4786 0
	movl	$1, -40(%rbp)	#, copy
	.loc 1 4787 0
	movq	$0, -96(%rbp)	#, out
.L1382:
	.loc 1 4805 0
	cmpl	$10, -80(%rbp)	#, type
	ja	.L1383	#,
	movl	-80(%rbp), %eax	# type, tmp150
	movq	.L1385(,%rax,8), %rax	#, tmp151
	jmp	*%rax	# tmp151
	.section	.rodata
	.align 8
	.align 4
.L1385:
	.quad	.L1384
	.quad	.L1383
	.quad	.L1383
	.quad	.L1386
	.quad	.L1387
	.quad	.L1388
	.quad	.L1389
	.quad	.L1390
	.quad	.L1391
	.quad	.L1392
	.quad	.L1393
	.text
.L1393:
	.loc 1 4809 0
	cmpl	$0, -40(%rbp)	#, copy
	sete	%al	#, D.28288
	movzbl	%al, %eax	# D.28288, tmp152
	movl	%eax, -52(%rbp)	# tmp152, time1
	.loc 1 4810 0
	jmp	.L1394	#
.L1392:
	.loc 1 4812 0
	cmpl	$0, -40(%rbp)	#, copy
	je	.L1395	#,
	.loc 1 4812 0 is_stmt 0 discriminator 1
	movl	$1, %eax	#, iftmp.843
	jmp	.L1396	#
.L1395:
	.loc 1 4812 0 discriminator 2
	movl	$155, %eax	#, iftmp.843
.L1396:
	.loc 1 4812 0 discriminator 3
	movl	%eax, -52(%rbp)	# iftmp.843, time1
	.loc 1 4813 0 is_stmt 1 discriminator 3
	jmp	.L1394	#
.L1387:
	.loc 1 4821 0
	movl	-76(%rbp), %eax	# opnum, tmp153
	sall	$2, %eax	#, D.28285
	addl	$2, %eax	#, tmp154
	movl	%eax, -52(%rbp)	# tmp154, time1
	.loc 1 4822 0
	jmp	.L1394	#
.L1386:
	.loc 1 4824 0
	movl	-76(%rbp), %eax	# opnum, tmp155
	sall	$2, %eax	#, D.28285
	addl	$3, %eax	#, tmp156
	movl	%eax, -52(%rbp)	# tmp156, time1
	.loc 1 4825 0
	jmp	.L1394	#
.L1384:
	.loc 1 4829 0
	cmpl	$0, -40(%rbp)	#, copy
	je	.L1397	#,
	.loc 1 4829 0 is_stmt 0 discriminator 1
	movl	-76(%rbp), %eax	# opnum, tmp157
	addl	$1, %eax	#, D.28285
	sall	$2, %eax	#, iftmp.844
	jmp	.L1398	#
.L1397:
	.loc 1 4829 0 discriminator 2
	movl	$123, %eax	#, iftmp.844
.L1398:
	.loc 1 4829 0 discriminator 3
	movl	%eax, -52(%rbp)	# iftmp.844, time1
	.loc 1 4830 0 is_stmt 1 discriminator 3
	jmp	.L1394	#
.L1391:
	.loc 1 4834 0
	movl	$121, -52(%rbp)	#, time1
	.loc 1 4835 0
	jmp	.L1394	#
.L1390:
	.loc 1 4839 0
	cmpl	$0, -40(%rbp)	#, copy
	je	.L1399	#,
	.loc 1 4839 0 is_stmt 0 discriminator 1
	movl	$122, %eax	#, iftmp.845
	jmp	.L1400	#
.L1399:
	.loc 1 4839 0 discriminator 2
	movl	$123, %eax	#, iftmp.845
.L1400:
	.loc 1 4839 0 discriminator 3
	movl	%eax, -52(%rbp)	# iftmp.845, time1
	.loc 1 4840 0 is_stmt 1 discriminator 3
	jmp	.L1394	#
.L1389:
	.loc 1 4842 0
	movl	-76(%rbp), %eax	# opnum, tmp161
	addl	$124, %eax	#, tmp160
	movl	%eax, -52(%rbp)	# tmp160, time1
	.loc 1 4843 0
	jmp	.L1394	#
.L1388:
	.loc 1 4845 0
	movl	-76(%rbp), %eax	# opnum, tmp165
	addl	$125, %eax	#, tmp164
	movl	%eax, -52(%rbp)	# tmp164, time1
	.loc 1 4846 0
	jmp	.L1394	#
.L1383:
	.loc 1 4848 0
	movl	$155, -52(%rbp)	#, time1
.L1394:
	.loc 1 4851 0
	movl	$0, -44(%rbp)	#, i
	jmp	.L1401	#
.L1451:
.LBB113:
	.loc 1 4853 0
	movl	-44(%rbp), %eax	# i, tmp167
	movslq	%eax, %rdx	# tmp167, tmp166
	movq	%rdx, %rax	# tmp166, tmp168
	addq	%rax, %rax	# tmp168
	addq	%rdx, %rax	# tmp166, tmp168
	salq	$2, %rax	#, tmp168
	addq	%rdx, %rax	# tmp166, tmp168
	salq	$3, %rax	#, tmp169
	addq	$rld+64, %rax	#, tmp170
	movq	(%rax), %rax	# rld[i_6].reg_rtx, tmp171
	movq	%rax, -24(%rbp)	# tmp171, reg
	.loc 1 4854 0
	cmpq	$0, -24(%rbp)	#, reg
	je	.L1402	#,
	.loc 1 4854 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# reg, tmp172
	movzwl	(%rax), %eax	# reg_58->code, D.28289
	cmpw	$61, %ax	#, D.28289
	jne	.L1402	#,
	.loc 1 4855 0 is_stmt 1
	movl	-72(%rbp), %ebx	# regno, regno.846
	movq	-24(%rbp), %rax	# reg, tmp173
	movq	%rax, %rdi	# tmp173,
	call	true_regnum	#
	subl	%eax, %ebx	# D.28290, D.28290
	movl	%ebx, %ecx	# D.28290, D.28290
	.loc 1 4856 0
	movq	-24(%rbp), %rax	# reg, tmp174
	movl	8(%rax), %eax	# reg_58->fld[0].rtuint, D.28290
	cmpl	$7, %eax	#, D.28290
	jbe	.L1403	#,
	.loc 1 4856 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# reg, tmp175
	movl	8(%rax), %eax	# reg_58->fld[0].rtuint, D.28290
	cmpl	$15, %eax	#, D.28290
	jbe	.L1404	#,
.L1403:
	.loc 1 4856 0 discriminator 2
	movq	-24(%rbp), %rax	# reg, tmp176
	movl	8(%rax), %eax	# reg_58->fld[0].rtuint, D.28290
	cmpl	$20, %eax	#, D.28290
	jbe	.L1405	#,
	.loc 1 4856 0 discriminator 1
	movq	-24(%rbp), %rax	# reg, tmp177
	movl	8(%rax), %eax	# reg_58->fld[0].rtuint, D.28290
	cmpl	$28, %eax	#, D.28290
	jbe	.L1404	#,
.L1405:
	.loc 1 4856 0 discriminator 2
	movq	-24(%rbp), %rax	# reg, tmp178
	movl	8(%rax), %eax	# reg_58->fld[0].rtuint, D.28290
	cmpl	$44, %eax	#, D.28290
	jbe	.L1406	#,
	.loc 1 4856 0 discriminator 1
	movq	-24(%rbp), %rax	# reg, tmp179
	movl	8(%rax), %eax	# reg_58->fld[0].rtuint, D.28290
	cmpl	$52, %eax	#, D.28290
	jbe	.L1404	#,
.L1406:
	.loc 1 4856 0 discriminator 2
	movq	-24(%rbp), %rax	# reg, tmp180
	movl	8(%rax), %eax	# reg_58->fld[0].rtuint, D.28290
	cmpl	$28, %eax	#, D.28290
	jbe	.L1407	#,
	.loc 1 4856 0 discriminator 1
	movq	-24(%rbp), %rax	# reg, tmp181
	movl	8(%rax), %eax	# reg_58->fld[0].rtuint, D.28290
	cmpl	$36, %eax	#, D.28290
	ja	.L1407	#,
.L1404:
	movq	-24(%rbp), %rax	# reg, tmp182
	movzbl	2(%rax), %eax	# reg_58->mode, D.28291
	movzbl	%al, %eax	# D.28291, D.28285
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28292
	cmpl	$5, %eax	#, D.28292
	je	.L1408	#,
	.loc 1 4856 0 discriminator 4
	movq	-24(%rbp), %rax	# reg, tmp184
	movzbl	2(%rax), %eax	# reg_58->mode, D.28291
	movzbl	%al, %eax	# D.28291, D.28285
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28292
	cmpl	$6, %eax	#, D.28292
	jne	.L1409	#,
.L1408:
	.loc 1 4856 0 discriminator 3
	movl	$1, %eax	#, iftmp.848
	jmp	.L1411	#
.L1409:
	.loc 1 4856 0 discriminator 1
	movl	$0, %eax	#, iftmp.848
	jmp	.L1411	#
.L1407:
	.loc 1 4856 0 discriminator 2
	movq	-24(%rbp), %rax	# reg, tmp186
	movzbl	2(%rax), %eax	# reg_58->mode, D.28291
	cmpb	$18, %al	#, D.28291
	jne	.L1412	#,
	.loc 1 4856 0 discriminator 6
	movl	target_flags(%rip), %eax	# target_flags, target_flags.851
	andl	$33554432, %eax	#, D.28285
	testl	%eax, %eax	# D.28285
	je	.L1413	#,
	.loc 1 4856 0 discriminator 8
	movl	$1, %eax	#, iftmp.850
	jmp	.L1411	#
.L1413:
	.loc 1 4856 0 discriminator 9
	movl	$2, %eax	#, iftmp.850
	jmp	.L1411	#
.L1412:
	.loc 1 4856 0 discriminator 7
	movq	-24(%rbp), %rax	# reg, tmp187
	movzbl	2(%rax), %eax	# reg_58->mode, D.28291
	cmpb	$24, %al	#, D.28291
	jne	.L1416	#,
	.loc 1 4856 0 discriminator 10
	movl	target_flags(%rip), %eax	# target_flags, target_flags.854
	andl	$33554432, %eax	#, D.28285
	testl	%eax, %eax	# D.28285
	je	.L1417	#,
	.loc 1 4856 0 discriminator 12
	movl	$3, %eax	#, iftmp.853
	jmp	.L1411	#
.L1417:
	.loc 1 4856 0 discriminator 13
	movl	$5, %eax	#, iftmp.853
	jmp	.L1411	#
.L1416:
	.loc 1 4856 0 discriminator 11
	movq	-24(%rbp), %rax	# reg, tmp188
	movzbl	2(%rax), %eax	# reg_58->mode, D.28291
	movzbl	%al, %eax	# D.28291, D.28285
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28291
	movzbl	%al, %edx	# D.28291, D.28285
	movl	target_flags(%rip), %eax	# target_flags, target_flags.856
	andl	$33554432, %eax	#, D.28285
	testl	%eax, %eax	# D.28285
	je	.L1420	#,
	.loc 1 4856 0 discriminator 1
	movl	$8, %eax	#, iftmp.855
	jmp	.L1421	#
.L1420:
	.loc 1 4856 0 discriminator 2
	movl	$4, %eax	#, iftmp.855
.L1421:
	.loc 1 4856 0 discriminator 3
	addl	%edx, %eax	# D.28285, D.28285
	subl	$1, %eax	#, D.28285
	movl	target_flags(%rip), %edx	# target_flags, target_flags.858
	andl	$33554432, %edx	#, D.28285
	testl	%edx, %edx	# D.28285
	je	.L1422	#,
	.loc 1 4856 0 discriminator 1
	movl	$8, %esi	#, iftmp.857
	jmp	.L1423	#
.L1422:
	.loc 1 4856 0 discriminator 2
	movl	$4, %esi	#, iftmp.857
.L1423:
	.loc 1 4856 0 discriminator 3
	cltd
	idivl	%esi	# iftmp.857
	subl	$1, %eax	#, iftmp.852
.L1411:
	.loc 1 4855 0 is_stmt 1
	cmpl	%eax, %ecx	# iftmp.847, D.28290
	ja	.L1402	#,
	.loc 1 4857 0
	movl	-44(%rbp), %eax	# i, tmp192
	cmpl	16(%rbp), %eax	# reloadnum, tmp192
	je	.L1402	#,
.LBB114:
	.loc 1 4859 0
	movl	-44(%rbp), %eax	# i, tmp194
	movslq	%eax, %rdx	# tmp194, tmp193
	movq	%rdx, %rax	# tmp193, tmp195
	addq	%rax, %rax	# tmp195
	addq	%rdx, %rax	# tmp193, tmp195
	salq	$2, %rax	#, tmp195
	addq	%rdx, %rax	# tmp193, tmp195
	salq	$3, %rax	#, tmp196
	addq	$rld, %rax	#, tmp197
	movq	(%rax), %rax	# rld[i_6].in, tmp198
	movq	%rax, -32(%rbp)	# tmp198, other_input
	.loc 1 4864 0
	movq	-24(%rbp), %rax	# reg, tmp199
	movq	%rax, %rdi	# tmp199,
	call	true_regnum	#
	cmpl	-68(%rbp), %eax	# start_regno, D.28285
	je	.L1424	#,
	.loc 1 4865 0
	movq	$0, -32(%rbp)	#, other_input
.L1424:
	.loc 1 4866 0
	cmpq	$0, -32(%rbp)	#, other_input
	je	.L1425	#,
	.loc 1 4866 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rdx	# value, tmp200
	movq	-32(%rbp), %rax	# other_input, tmp201
	movq	%rdx, %rsi	# tmp200,
	movq	%rax, %rdi	# tmp201,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28285
	je	.L1425	#,
	.loc 1 4867 0 is_stmt 1
	movl	-44(%rbp), %eax	# i, tmp203
	movslq	%eax, %rdx	# tmp203, tmp202
	movq	%rdx, %rax	# tmp202, tmp204
	addq	%rax, %rax	# tmp204
	addq	%rdx, %rax	# tmp202, tmp204
	salq	$2, %rax	#, tmp204
	addq	%rdx, %rax	# tmp202, tmp204
	salq	$3, %rax	#, tmp205
	addq	$rld+8, %rax	#, tmp206
	movq	(%rax), %rax	# rld[i_6].out, D.28287
	testq	%rax, %rax	# D.28287
	jne	.L1425	#,
	.loc 1 4867 0 is_stmt 0 discriminator 1
	cmpq	$0, -96(%rbp)	#, out
	je	.L1402	#,
.L1425:
.LBB115:
	.loc 1 4870 0 is_stmt 1
	movl	-44(%rbp), %eax	# i, tmp208
	movslq	%eax, %rdx	# tmp208, tmp207
	movq	%rdx, %rax	# tmp207, tmp209
	addq	%rax, %rax	# tmp209
	addq	%rdx, %rax	# tmp207, tmp209
	salq	$2, %rax	#, tmp209
	addq	%rdx, %rax	# tmp207, tmp209
	salq	$3, %rax	#, tmp210
	addq	$rld+80, %rax	#, tmp211
	movl	12(%rax), %eax	# rld[i_6].when_needed, D.28293
	cmpl	$10, %eax	#, D.28293
	ja	.L1426	#,
	movl	%eax, %eax	# D.28293, tmp212
	movq	.L1428(,%rax,8), %rax	#, tmp213
	jmp	*%rax	# tmp213
	.section	.rodata
	.align 8
	.align 4
.L1428:
	.quad	.L1427
	.quad	.L1429
	.quad	.L1430
	.quad	.L1431
	.quad	.L1432
	.quad	.L1433
	.quad	.L1434
	.quad	.L1435
	.quad	.L1436
	.quad	.L1437
	.quad	.L1438
	.text
.L1438:
	.loc 1 4873 0
	movl	$0, -36(%rbp)	#, time2
	.loc 1 4874 0
	jmp	.L1439	#
.L1432:
	.loc 1 4882 0
	cmpl	$3, -80(%rbp)	#, type
	jne	.L1440	#,
	.loc 1 4882 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# i, tmp214
	addl	$1, %eax	#, D.28285
	cmpl	16(%rbp), %eax	# reloadnum, D.28285
	jne	.L1440	#,
	.loc 1 4883 0 is_stmt 1
	cmpl	$0, 24(%rbp)	#, ignore_address_reloads
	je	.L1440	#,
	.loc 1 4887 0
	movl	16(%rbp), %eax	# reloadnum, tmp216
	movslq	%eax, %rdx	# tmp216, tmp215
	movq	%rdx, %rax	# tmp215, tmp217
	addq	%rax, %rax	# tmp217
	addq	%rdx, %rax	# tmp215, tmp217
	salq	$2, %rax	#, tmp217
	addq	%rdx, %rax	# tmp215, tmp217
	salq	$3, %rax	#, tmp218
	addq	$rld+8, %rax	#, tmp219
	movq	(%rax), %rax	# rld[reloadnum_112(D)].out, D.28287
	testq	%rax, %rax	# D.28287
	jne	.L1440	#,
	.loc 1 4888 0
	jmp	.L1402	#
.L1440:
	.loc 1 4892 0
	cmpl	$0, -80(%rbp)	#, type
	jne	.L1441	#,
	.loc 1 4892 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# i, tmp221
	movslq	%eax, %rdx	# tmp221, tmp220
	movq	%rdx, %rax	# tmp220, tmp222
	addq	%rax, %rax	# tmp222
	addq	%rdx, %rax	# tmp220, tmp222
	salq	$2, %rax	#, tmp222
	addq	%rdx, %rax	# tmp220, tmp222
	salq	$3, %rax	#, tmp223
	addq	$rld+64, %rax	#, tmp224
	movl	8(%rax), %eax	# rld[i_6].opnum, D.28285
	cmpl	-76(%rbp), %eax	# opnum, D.28285
	jne	.L1441	#,
	.loc 1 4893 0 is_stmt 1
	cmpl	$0, 24(%rbp)	#, ignore_address_reloads
	je	.L1441	#,
	.loc 1 4895 0
	movl	16(%rbp), %eax	# reloadnum, tmp226
	movslq	%eax, %rdx	# tmp226, tmp225
	movq	%rdx, %rax	# tmp225, tmp227
	addq	%rax, %rax	# tmp227
	addq	%rdx, %rax	# tmp225, tmp227
	salq	$2, %rax	#, tmp227
	addq	%rdx, %rax	# tmp225, tmp227
	salq	$3, %rax	#, tmp228
	addq	$rld+8, %rax	#, tmp229
	movq	(%rax), %rax	# rld[reloadnum_112(D)].out, D.28287
	testq	%rax, %rax	# D.28287
	jne	.L1441	#,
	.loc 1 4896 0
	jmp	.L1402	#
.L1441:
	.loc 1 4897 0
	movl	-44(%rbp), %eax	# i, tmp231
	movslq	%eax, %rdx	# tmp231, tmp230
	movq	%rdx, %rax	# tmp230, tmp232
	addq	%rax, %rax	# tmp232
	addq	%rdx, %rax	# tmp230, tmp232
	salq	$2, %rax	#, tmp232
	addq	%rdx, %rax	# tmp230, tmp232
	salq	$3, %rax	#, tmp233
	addq	$rld+64, %rax	#, tmp234
	movl	8(%rax), %eax	# rld[i_6].opnum, D.28285
	sall	$2, %eax	#, D.28285
	addl	$2, %eax	#, tmp235
	movl	%eax, -36(%rbp)	# tmp235, time2
	.loc 1 4898 0
	jmp	.L1439	#
.L1431:
	.loc 1 4900 0
	cmpl	$0, -80(%rbp)	#, type
	jne	.L1442	#,
	.loc 1 4900 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# i, tmp237
	movslq	%eax, %rdx	# tmp237, tmp236
	movq	%rdx, %rax	# tmp236, tmp238
	addq	%rax, %rax	# tmp238
	addq	%rdx, %rax	# tmp236, tmp238
	salq	$2, %rax	#, tmp238
	addq	%rdx, %rax	# tmp236, tmp238
	salq	$3, %rax	#, tmp239
	addq	$rld+64, %rax	#, tmp240
	movl	8(%rax), %eax	# rld[i_6].opnum, D.28285
	cmpl	-76(%rbp), %eax	# opnum, D.28285
	jne	.L1442	#,
	.loc 1 4901 0 is_stmt 1
	cmpl	$0, 24(%rbp)	#, ignore_address_reloads
	je	.L1442	#,
	.loc 1 4902 0
	movl	16(%rbp), %eax	# reloadnum, tmp242
	movslq	%eax, %rdx	# tmp242, tmp241
	movq	%rdx, %rax	# tmp241, tmp243
	addq	%rax, %rax	# tmp243
	addq	%rdx, %rax	# tmp241, tmp243
	salq	$2, %rax	#, tmp243
	addq	%rdx, %rax	# tmp241, tmp243
	salq	$3, %rax	#, tmp244
	addq	$rld+8, %rax	#, tmp245
	movq	(%rax), %rax	# rld[reloadnum_112(D)].out, D.28287
	testq	%rax, %rax	# D.28287
	jne	.L1442	#,
	.loc 1 4903 0
	jmp	.L1402	#
.L1442:
	.loc 1 4904 0
	movl	-44(%rbp), %eax	# i, tmp247
	movslq	%eax, %rdx	# tmp247, tmp246
	movq	%rdx, %rax	# tmp246, tmp248
	addq	%rax, %rax	# tmp248
	addq	%rdx, %rax	# tmp246, tmp248
	salq	$2, %rax	#, tmp248
	addq	%rdx, %rax	# tmp246, tmp248
	salq	$3, %rax	#, tmp249
	addq	$rld+64, %rax	#, tmp250
	movl	8(%rax), %eax	# rld[i_6].opnum, D.28285
	sall	$2, %eax	#, D.28285
	addl	$3, %eax	#, tmp251
	movl	%eax, -36(%rbp)	# tmp251, time2
	.loc 1 4905 0
	jmp	.L1439	#
.L1427:
	.loc 1 4907 0
	movl	-44(%rbp), %eax	# i, tmp253
	movslq	%eax, %rdx	# tmp253, tmp252
	movq	%rdx, %rax	# tmp252, tmp254
	addq	%rax, %rax	# tmp254
	addq	%rdx, %rax	# tmp252, tmp254
	salq	$2, %rax	#, tmp254
	addq	%rdx, %rax	# tmp252, tmp254
	salq	$3, %rax	#, tmp255
	addq	$rld+64, %rax	#, tmp256
	movl	8(%rax), %eax	# rld[i_6].opnum, D.28285
	addl	$1, %eax	#, D.28285
	sall	$2, %eax	#, tmp257
	movl	%eax, -36(%rbp)	# tmp257, time2
	.loc 1 4908 0
	movl	$1, -48(%rbp)	#, check_earlyclobber
	.loc 1 4909 0
	jmp	.L1439	#
.L1436:
	.loc 1 4913 0
	cmpl	$7, -80(%rbp)	#, type
	jne	.L1443	#,
	.loc 1 4913 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# i, tmp258
	addl	$1, %eax	#, D.28285
	cmpl	16(%rbp), %eax	# reloadnum, D.28285
	jne	.L1443	#,
	.loc 1 4914 0 is_stmt 1
	cmpl	$0, 24(%rbp)	#, ignore_address_reloads
	je	.L1443	#,
	.loc 1 4915 0
	movl	16(%rbp), %eax	# reloadnum, tmp260
	movslq	%eax, %rdx	# tmp260, tmp259
	movq	%rdx, %rax	# tmp259, tmp261
	addq	%rax, %rax	# tmp261
	addq	%rdx, %rax	# tmp259, tmp261
	salq	$2, %rax	#, tmp261
	addq	%rdx, %rax	# tmp259, tmp261
	salq	$3, %rax	#, tmp262
	addq	$rld+8, %rax	#, tmp263
	movq	(%rax), %rax	# rld[reloadnum_112(D)].out, D.28287
	testq	%rax, %rax	# D.28287
	jne	.L1443	#,
	.loc 1 4916 0
	jmp	.L1402	#
.L1443:
	.loc 1 4917 0
	movl	$121, -36(%rbp)	#, time2
	.loc 1 4918 0
	jmp	.L1439	#
.L1435:
	.loc 1 4920 0
	movl	$122, -36(%rbp)	#, time2
	.loc 1 4921 0
	movl	$1, -48(%rbp)	#, check_earlyclobber
	.loc 1 4922 0
	jmp	.L1439	#
.L1430:
	.loc 1 4924 0
	movl	$123, -36(%rbp)	#, time2
	.loc 1 4925 0
	jmp	.L1439	#
.L1429:
	.loc 1 4929 0
	movl	$124, -36(%rbp)	#, time2
	.loc 1 4930 0
	jmp	.L1439	#
.L1434:
	.loc 1 4935 0
	cmpl	$5, -80(%rbp)	#, type
	jne	.L1444	#,
	.loc 1 4935 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# i, tmp264
	addl	$1, %eax	#, D.28285
	cmpl	16(%rbp), %eax	# reloadnum, D.28285
	jne	.L1444	#,
	.loc 1 4936 0 is_stmt 1
	cmpl	$0, 24(%rbp)	#, ignore_address_reloads
	je	.L1444	#,
	.loc 1 4937 0
	movl	16(%rbp), %eax	# reloadnum, tmp266
	movslq	%eax, %rdx	# tmp266, tmp265
	movq	%rdx, %rax	# tmp265, tmp267
	addq	%rax, %rax	# tmp267
	addq	%rdx, %rax	# tmp265, tmp267
	salq	$2, %rax	#, tmp267
	addq	%rdx, %rax	# tmp265, tmp267
	salq	$3, %rax	#, tmp268
	addq	$rld+8, %rax	#, tmp269
	movq	(%rax), %rax	# rld[reloadnum_112(D)].out, D.28287
	testq	%rax, %rax	# D.28287
	jne	.L1444	#,
	.loc 1 4938 0
	jmp	.L1402	#
.L1444:
	.loc 1 4939 0
	movl	-44(%rbp), %eax	# i, tmp271
	movslq	%eax, %rdx	# tmp271, tmp270
	movq	%rdx, %rax	# tmp270, tmp272
	addq	%rax, %rax	# tmp272
	addq	%rdx, %rax	# tmp270, tmp272
	salq	$2, %rax	#, tmp272
	addq	%rdx, %rax	# tmp270, tmp272
	salq	$3, %rax	#, tmp273
	addq	$rld+64, %rax	#, tmp274
	movl	8(%rax), %eax	# rld[i_6].opnum, D.28285
	addl	$124, %eax	#, tmp275
	movl	%eax, -36(%rbp)	# tmp275, time2
	.loc 1 4940 0
	jmp	.L1439	#
.L1433:
	.loc 1 4942 0
	movl	-44(%rbp), %eax	# i, tmp277
	movslq	%eax, %rdx	# tmp277, tmp276
	movq	%rdx, %rax	# tmp276, tmp278
	addq	%rax, %rax	# tmp278
	addq	%rdx, %rax	# tmp276, tmp278
	salq	$2, %rax	#, tmp278
	addq	%rdx, %rax	# tmp276, tmp278
	salq	$3, %rax	#, tmp279
	addq	$rld+64, %rax	#, tmp280
	movl	8(%rax), %eax	# rld[i_6].opnum, D.28285
	addl	$125, %eax	#, tmp281
	movl	%eax, -36(%rbp)	# tmp281, time2
	.loc 1 4943 0
	jmp	.L1439	#
.L1437:
	.loc 1 4947 0
	movl	-44(%rbp), %eax	# i, tmp283
	movslq	%eax, %rdx	# tmp283, tmp282
	movq	%rdx, %rax	# tmp282, tmp284
	addq	%rax, %rax	# tmp284
	addq	%rdx, %rax	# tmp282, tmp284
	salq	$2, %rax	#, tmp284
	addq	%rdx, %rax	# tmp282, tmp284
	salq	$3, %rax	#, tmp285
	addq	$rld, %rax	#, tmp286
	movq	(%rax), %rax	# rld[i_6].in, D.28287
	testq	%rax, %rax	# D.28287
	je	.L1445	#,
	.loc 1 4947 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rdx	# value, tmp287
	movq	-32(%rbp), %rax	# other_input, tmp288
	movq	%rdx, %rsi	# tmp287,
	movq	%rax, %rdi	# tmp288,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28285
	je	.L1446	#,
.L1445:
	.loc 1 4949 0 is_stmt 1
	movl	$124, -36(%rbp)	#, time2
	.loc 1 4951 0
	movl	-44(%rbp), %eax	# i, tmp290
	movslq	%eax, %rdx	# tmp290, tmp289
	movq	%rdx, %rax	# tmp289, tmp291
	addq	%rax, %rax	# tmp291
	addq	%rdx, %rax	# tmp289, tmp291
	salq	$2, %rax	#, tmp291
	addq	%rdx, %rax	# tmp289, tmp291
	salq	$3, %rax	#, tmp292
	addq	$rld+8, %rax	#, tmp293
	movq	(%rax), %rax	# rld[i_6].out, D.28287
	movq	%rax, %rdi	# D.28287,
	call	earlyclobber_operand_p	#
	testl	%eax, %eax	# D.28285
	je	.L1447	#,
	.loc 1 4952 0
	movl	$123, -36(%rbp)	#, time2
	.loc 1 4954 0
	jmp	.L1439	#
.L1447:
	jmp	.L1439	#
.L1446:
	.loc 1 4956 0
	movl	$1, -36(%rbp)	#, time2
	.loc 1 4961 0
	cmpq	$0, -96(%rbp)	#, out
	je	.L1448	#,
	.loc 1 4962 0
	movl	$0, %eax	#, D.28285
	jmp	.L1381	#
.L1448:
	.loc 1 4963 0
	jmp	.L1439	#
.L1426:
	.loc 1 4965 0
	movl	$0, %eax	#, D.28285
	jmp	.L1381	#
.L1439:
	.loc 1 4967 0
	movl	-52(%rbp), %eax	# time1, tmp294
	cmpl	-36(%rbp), %eax	# time2, tmp294
	jl	.L1449	#,
	.loc 1 4968 0
	movl	-44(%rbp), %eax	# i, tmp296
	movslq	%eax, %rdx	# tmp296, tmp295
	movq	%rdx, %rax	# tmp295, tmp297
	addq	%rax, %rax	# tmp297
	addq	%rdx, %rax	# tmp295, tmp297
	salq	$2, %rax	#, tmp297
	addq	%rdx, %rax	# tmp295, tmp297
	salq	$3, %rax	#, tmp298
	addq	$rld, %rax	#, tmp299
	movq	(%rax), %rax	# rld[i_6].in, D.28287
	testq	%rax, %rax	# D.28287
	je	.L1450	#,
	.loc 1 4968 0 is_stmt 0 discriminator 1
	movl	-44(%rbp), %eax	# i, tmp301
	movslq	%eax, %rdx	# tmp301, tmp300
	movq	%rdx, %rax	# tmp300, tmp302
	addq	%rax, %rax	# tmp302
	addq	%rdx, %rax	# tmp300, tmp302
	salq	$2, %rax	#, tmp302
	addq	%rdx, %rax	# tmp300, tmp302
	salq	$3, %rax	#, tmp303
	addq	$rld+8, %rax	#, tmp304
	movq	(%rax), %rax	# rld[i_6].out, D.28287
	testq	%rax, %rax	# D.28287
	jne	.L1450	#,
	.loc 1 4969 0 is_stmt 1
	movq	-88(%rbp), %rdx	# value, tmp305
	movq	-32(%rbp), %rax	# other_input, tmp306
	movq	%rdx, %rsi	# tmp305,
	movq	%rax, %rdi	# tmp306,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28285
	je	.L1450	#,
.L1449:
	.loc 1 4970 0
	cmpq	$0, -96(%rbp)	#, out
	je	.L1402	#,
	.loc 1 4970 0 is_stmt 0 discriminator 1
	movl	16(%rbp), %eax	# reloadnum, tmp308
	movslq	%eax, %rdx	# tmp308, tmp307
	movq	%rdx, %rax	# tmp307, tmp309
	addq	%rax, %rax	# tmp309
	addq	%rdx, %rax	# tmp307, tmp309
	salq	$2, %rax	#, tmp309
	addq	%rdx, %rax	# tmp307, tmp309
	salq	$3, %rax	#, tmp310
	addq	$rld+48, %rax	#, tmp311
	movq	(%rax), %rax	# rld[reloadnum_112(D)].out_reg, D.28287
	testq	%rax, %rax	# D.28287
	je	.L1402	#,
	.loc 1 4971 0 is_stmt 1
	cmpl	$122, -36(%rbp)	#, time2
	jle	.L1402	#,
.L1450:
	.loc 1 4972 0
	movl	$0, %eax	#, D.28285
	jmp	.L1381	#
.L1402:
.LBE115:
.LBE114:
.LBE113:
	.loc 1 4851 0
	addl	$1, -44(%rbp)	#, i
.L1401:
	.loc 1 4851 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.859
	cmpl	%eax, -44(%rbp)	# n_reloads.859, i
	jl	.L1451	#,
	.loc 1 4978 0 is_stmt 1
	cmpl	$0, -48(%rbp)	#, check_earlyclobber
	je	.L1452	#,
	.loc 1 4978 0 is_stmt 0 discriminator 1
	cmpq	$0, -96(%rbp)	#, out
	je	.L1452	#,
	movq	-96(%rbp), %rax	# out, tmp312
	movq	%rax, %rdi	# tmp312,
	call	earlyclobber_operand_p	#
	testl	%eax, %eax	# D.28285
	je	.L1452	#,
	.loc 1 4979 0 is_stmt 1
	movl	$0, %eax	#, D.28285
	jmp	.L1381	#
.L1452:
	.loc 1 4981 0
	movl	$1, %eax	#, D.28285
.L1381:
	.loc 1 4982 0
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE46:
	.size	reload_reg_free_for_value_p, .-reload_reg_free_for_value_p
	.type	free_for_value_p, @function
free_for_value_p:
.LFB47:
	.loc 1 5017 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)	# regno, regno
	movl	%esi, -40(%rbp)	# mode, mode
	movl	%edx, -44(%rbp)	# opnum, opnum
	movl	%ecx, -48(%rbp)	# type, type
	movq	%r8, -56(%rbp)	# value, value
	movq	%r9, -64(%rbp)	# out, out
	.loc 1 5018 0
	cmpl	$7, -36(%rbp)	#, regno
	jle	.L1454	#,
	.loc 1 5018 0 is_stmt 0 discriminator 1
	cmpl	$15, -36(%rbp)	#, regno
	jle	.L1455	#,
.L1454:
	.loc 1 5018 0 discriminator 2
	cmpl	$20, -36(%rbp)	#, regno
	jle	.L1456	#,
	.loc 1 5018 0 discriminator 1
	cmpl	$28, -36(%rbp)	#, regno
	jle	.L1455	#,
.L1456:
	.loc 1 5018 0 discriminator 2
	cmpl	$44, -36(%rbp)	#, regno
	jle	.L1457	#,
	.loc 1 5018 0 discriminator 1
	cmpl	$52, -36(%rbp)	#, regno
	jle	.L1455	#,
.L1457:
	.loc 1 5018 0 discriminator 2
	cmpl	$28, -36(%rbp)	#, regno
	jle	.L1458	#,
	.loc 1 5018 0 discriminator 1
	cmpl	$36, -36(%rbp)	#, regno
	jg	.L1458	#,
.L1455:
	movl	-40(%rbp), %eax	# mode, mode.862
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28296
	cmpl	$5, %eax	#, D.28296
	je	.L1459	#,
	.loc 1 5018 0 discriminator 2
	movl	-40(%rbp), %eax	# mode, mode.863
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28296
	cmpl	$6, %eax	#, D.28296
	jne	.L1460	#,
.L1459:
	.loc 1 5018 0 discriminator 1
	movl	$2, %eax	#, iftmp.861
	jmp	.L1461	#
.L1460:
	movl	$1, %eax	#, iftmp.861
.L1461:
	.loc 1 5018 0 discriminator 3
	jmp	.L1462	#
.L1458:
	.loc 1 5018 0 discriminator 2
	cmpl	$18, -40(%rbp)	#, mode
	jne	.L1463	#,
	.loc 1 5018 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.866
	andl	$33554432, %eax	#, D.28294
	testl	%eax, %eax	# D.28294
	je	.L1464	#,
	movl	$2, %eax	#, iftmp.865
	jmp	.L1462	#
.L1464:
	.loc 1 5018 0 discriminator 2
	movl	$3, %eax	#, iftmp.865
	jmp	.L1462	#
.L1463:
	cmpl	$24, -40(%rbp)	#, mode
	jne	.L1467	#,
	.loc 1 5018 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.869
	andl	$33554432, %eax	#, D.28294
	testl	%eax, %eax	# D.28294
	je	.L1468	#,
	movl	$4, %eax	#, iftmp.868
	jmp	.L1462	#
.L1468:
	.loc 1 5018 0 discriminator 2
	movl	$6, %eax	#, iftmp.868
	jmp	.L1462	#
.L1467:
	movl	-40(%rbp), %eax	# mode, mode.870
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28295
	movzbl	%al, %edx	# D.28295, D.28294
	movl	target_flags(%rip), %eax	# target_flags, target_flags.872
	andl	$33554432, %eax	#, D.28294
	testl	%eax, %eax	# D.28294
	je	.L1471	#,
	.loc 1 5018 0 discriminator 1
	movl	$8, %eax	#, iftmp.871
	jmp	.L1472	#
.L1471:
	.loc 1 5018 0 discriminator 2
	movl	$4, %eax	#, iftmp.871
.L1472:
	.loc 1 5018 0 discriminator 3
	addl	%edx, %eax	# D.28294, D.28294
	subl	$1, %eax	#, D.28294
	movl	target_flags(%rip), %edx	# target_flags, target_flags.874
	andl	$33554432, %edx	#, D.28294
	testl	%edx, %edx	# D.28294
	je	.L1473	#,
	.loc 1 5018 0 discriminator 1
	movl	$8, %ebx	#, iftmp.873
	jmp	.L1474	#
.L1473:
	.loc 1 5018 0 discriminator 2
	movl	$4, %ebx	#, iftmp.873
.L1474:
	.loc 1 5018 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.873
.L1462:
	movl	%eax, -20(%rbp)	# iftmp.860, nregs
	.loc 1 5019 0 is_stmt 1 discriminator 3
	jmp	.L1475	#
.L1477:
	.loc 1 5020 0
	movl	-20(%rbp), %eax	# nregs, tmp94
	movl	-36(%rbp), %edx	# regno, tmp95
	leal	(%rdx,%rax), %edi	#, D.28294
	movq	-64(%rbp), %r9	# out, tmp96
	movq	-56(%rbp), %r8	# value, tmp97
	movl	-48(%rbp), %ecx	# type, tmp98
	movl	-44(%rbp), %edx	# opnum, tmp99
	movl	-36(%rbp), %eax	# regno, tmp100
	movl	24(%rbp), %esi	# ignore_address_reloads, tmp101
	movl	%esi, 8(%rsp)	# tmp101,
	movl	16(%rbp), %esi	# reloadnum, tmp102
	movl	%esi, (%rsp)	# tmp102,
	movl	%edi, %esi	# D.28294,
	movl	%eax, %edi	# tmp100,
	call	reload_reg_free_for_value_p	#
	testl	%eax, %eax	# D.28294
	jne	.L1475	#,
	.loc 1 5023 0
	movl	$0, %eax	#, D.28294
	jmp	.L1476	#
.L1475:
	.loc 1 5019 0 discriminator 1
	movl	-20(%rbp), %eax	# nregs, nregs.875
	leal	-1(%rax), %edx	#, tmp103
	movl	%edx, -20(%rbp)	# tmp103, nregs
	testl	%eax, %eax	# nregs.875
	jg	.L1477	#,
	.loc 1 5024 0
	movl	$1, %eax	#, D.28294
.L1476:
	.loc 1 5025 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE47:
	.size	free_for_value_p, .-free_for_value_p
	.type	conflicts_with_override, @function
conflicts_with_override:
.LFB48:
	.loc 1 5033 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# x, x
	.loc 1 5035 0
	movl	$0, -4(%rbp)	#, i
	jmp	.L1479	#
.L1482:
	.loc 1 5036 0
	movl	-4(%rbp), %eax	# i, tmp66
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28298
	testq	%rax, %rax	# D.28298
	je	.L1480	#,
	.loc 1 5037 0
	movl	-4(%rbp), %eax	# i, tmp68
	cltq
	movq	reload_override_in(,%rax,8), %rdx	# reload_override_in, D.28298
	movq	-24(%rbp), %rax	# x, tmp69
	movq	%rdx, %rsi	# D.28298,
	movq	%rax, %rdi	# tmp69,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.28297
	je	.L1480	#,
	.loc 1 5038 0
	movl	$1, %eax	#, D.28297
	jmp	.L1481	#
.L1480:
	.loc 1 5035 0
	addl	$1, -4(%rbp)	#, i
.L1479:
	.loc 1 5035 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.876
	cmpl	%eax, -4(%rbp)	# n_reloads.876, i
	jl	.L1482	#,
	.loc 1 5039 0 is_stmt 1
	movl	$0, %eax	#, D.28297
.L1481:
	.loc 1 5040 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE48:
	.size	conflicts_with_override, .-conflicts_with_override
	.section	.rodata
	.align 8
.LC12:
	.string	"could not find a spill register"
	.align 8
.LC13:
	.string	"`asm' operand constraint incompatible with operand size"
	.text
	.type	failed_reload, @function
failed_reload:
.LFB49:
	.loc 1 5048 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# insn, insn
	movl	%esi, -12(%rbp)	# r, r
	.loc 1 5049 0
	movq	-8(%rbp), %rax	# insn, tmp61
	movq	32(%rax), %rax	# insn_1(D)->fld[3].rtx, D.28299
	movq	%rax, %rdi	# D.28299,
	call	asm_noperands	#
	testl	%eax, %eax	# D.28300
	jns	.L1484	#,
	.loc 1 5051 0
	movq	-8(%rbp), %rax	# insn, tmp62
	movl	$__FUNCTION__.15545, %r8d	#,
	movl	$5051, %ecx	#,
	movl	$.LC1, %edx	#,
	movq	%rax, %rsi	# tmp62,
	movl	$.LC12, %edi	#,
	call	_fatal_insn	#
.L1484:
	.loc 1 5055 0
	movq	-8(%rbp), %rax	# insn, tmp63
	movl	$.LC13, %esi	#,
	movq	%rax, %rdi	# tmp63,
	movl	$0, %eax	#,
	call	error_for_asm	#
	.loc 1 5057 0
	movl	-12(%rbp), %eax	# r, tmp65
	movslq	%eax, %rdx	# tmp65, tmp64
	movq	%rdx, %rax	# tmp64, tmp66
	addq	%rax, %rax	# tmp66
	addq	%rdx, %rax	# tmp64, tmp66
	salq	$2, %rax	#, tmp66
	addq	%rdx, %rax	# tmp64, tmp66
	salq	$3, %rax	#, tmp67
	addq	$rld, %rax	#, tmp68
	movq	$0, (%rax)	#, rld[r_4(D)].in
	.loc 1 5058 0
	movl	-12(%rbp), %eax	# r, tmp70
	movslq	%eax, %rdx	# tmp70, tmp69
	movq	%rdx, %rax	# tmp69, tmp71
	addq	%rax, %rax	# tmp71
	addq	%rdx, %rax	# tmp69, tmp71
	salq	$2, %rax	#, tmp71
	addq	%rdx, %rax	# tmp69, tmp71
	salq	$3, %rax	#, tmp72
	addq	$rld+8, %rax	#, tmp73
	movq	$0, (%rax)	#, rld[r_4(D)].out
	.loc 1 5059 0
	movl	-12(%rbp), %eax	# r, tmp75
	movslq	%eax, %rdx	# tmp75, tmp74
	movq	%rdx, %rax	# tmp74, tmp76
	addq	%rax, %rax	# tmp76
	addq	%rdx, %rax	# tmp74, tmp76
	salq	$2, %rax	#, tmp76
	addq	%rdx, %rax	# tmp74, tmp76
	salq	$3, %rax	#, tmp77
	addq	$rld+64, %rax	#, tmp78
	movq	$0, (%rax)	#, rld[r_4(D)].reg_rtx
	.loc 1 5060 0
	movl	-12(%rbp), %eax	# r, tmp80
	movslq	%eax, %rdx	# tmp80, tmp79
	movq	%rdx, %rax	# tmp79, tmp81
	addq	%rax, %rax	# tmp81
	addq	%rdx, %rax	# tmp79, tmp81
	salq	$2, %rax	#, tmp81
	addq	%rdx, %rax	# tmp79, tmp81
	salq	$3, %rax	#, tmp82
	addq	$rld+96, %rax	#, tmp83
	movzbl	(%rax), %edx	# rld[r_4(D)].optional, tmp86
	orl	$1, %edx	#, tmp87
	movb	%dl, (%rax)	# tmp87, rld[r_4(D)].optional
	.loc 1 5061 0
	movl	-12(%rbp), %eax	# r, tmp89
	movslq	%eax, %rdx	# tmp89, tmp88
	movq	%rdx, %rax	# tmp88, tmp90
	addq	%rax, %rax	# tmp90
	addq	%rdx, %rax	# tmp88, tmp90
	salq	$2, %rax	#, tmp90
	addq	%rdx, %rax	# tmp88, tmp90
	salq	$3, %rax	#, tmp91
	addq	$rld+96, %rax	#, tmp92
	movzbl	(%rax), %edx	# rld[r_4(D)].secondary_p, tmp95
	orl	$4, %edx	#, tmp96
	movb	%dl, (%rax)	# tmp96, rld[r_4(D)].secondary_p
	.loc 1 5062 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE49:
	.size	failed_reload, .-failed_reload
	.type	set_reload_reg, @function
set_reload_reg:
.LFB50:
	.loc 1 5070 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# i, i
	movl	%esi, -24(%rbp)	# r, r
	.loc 1 5072 0
	movl	-20(%rbp), %eax	# i, tmp87
	cltq
	movq	spill_reg_rtx(,%rax,8), %rax	# spill_reg_rtx, tmp88
	movq	%rax, -8(%rbp)	# tmp88, reg
	.loc 1 5074 0
	cmpq	$0, -8(%rbp)	#, reg
	je	.L1486	#,
	.loc 1 5074 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# reg, tmp89
	movzbl	2(%rax), %eax	# reg_5->mode, D.28304
	movzbl	%al, %ecx	# D.28304, D.28305
	movl	-24(%rbp), %eax	# r, tmp91
	movslq	%eax, %rdx	# tmp91, tmp90
	movq	%rdx, %rax	# tmp90, tmp92
	addq	%rax, %rax	# tmp92
	addq	%rdx, %rax	# tmp90, tmp92
	salq	$2, %rax	#, tmp92
	addq	%rdx, %rax	# tmp90, tmp92
	salq	$3, %rax	#, tmp93
	addq	$rld+16, %rax	#, tmp94
	movl	12(%rax), %eax	# rld[r_8(D)].mode, D.28306
	cmpl	%eax, %ecx	# D.28306, D.28305
	je	.L1487	#,
.L1486:
	.loc 1 5076 0 is_stmt 1
	movl	-20(%rbp), %eax	# i, tmp96
	cltq
	movzwl	spill_regs(%rax,%rax), %eax	# spill_regs, D.28307
	movswl	%ax, %ecx	# D.28307, D.28303
	movl	-24(%rbp), %eax	# r, tmp98
	movslq	%eax, %rdx	# tmp98, tmp97
	movq	%rdx, %rax	# tmp97, tmp99
	addq	%rax, %rax	# tmp99
	addq	%rdx, %rax	# tmp97, tmp99
	salq	$2, %rax	#, tmp99
	addq	%rdx, %rax	# tmp97, tmp99
	salq	$3, %rax	#, tmp100
	addq	$rld+16, %rax	#, tmp101
	movl	12(%rax), %eax	# rld[r_8(D)].mode, D.28306
	.loc 1 5075 0
	movl	%ecx, %esi	# D.28303,
	movl	%eax, %edi	# D.28306,
	call	gen_rtx_REG	#
	movq	%rax, -8(%rbp)	# tmp102, reg
	movl	-20(%rbp), %eax	# i, tmp104
	cltq
	movq	-8(%rbp), %rdx	# reg, tmp105
	movq	%rdx, spill_reg_rtx(,%rax,8)	# tmp105, spill_reg_rtx
.L1487:
	.loc 1 5078 0
	movq	-8(%rbp), %rax	# reg, tmp106
	movq	%rax, %rdi	# tmp106,
	call	true_regnum	#
	movl	%eax, -12(%rbp)	# tmp107, regno
	.loc 1 5082 0
	movl	-24(%rbp), %eax	# r, tmp109
	movslq	%eax, %rdx	# tmp109, tmp108
	movq	%rdx, %rax	# tmp108, tmp110
	addq	%rax, %rax	# tmp110
	addq	%rdx, %rax	# tmp108, tmp110
	salq	$2, %rax	#, tmp110
	addq	%rdx, %rax	# tmp108, tmp110
	salq	$3, %rax	#, tmp111
	addq	$rld+16, %rax	#, tmp112
	movl	12(%rax), %edx	# rld[r_8(D)].mode, D.28306
	movl	-12(%rbp), %eax	# regno, tmp113
	movl	%edx, %esi	# D.28306,
	movl	%eax, %edi	# tmp113,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.28303
	je	.L1488	#,
.LBB116:
	.loc 1 5084 0
	movl	$0, -16(%rbp)	#, test_mode
	.loc 1 5085 0
	movl	-24(%rbp), %eax	# r, tmp115
	movslq	%eax, %rdx	# tmp115, tmp114
	movq	%rdx, %rax	# tmp114, tmp116
	addq	%rax, %rax	# tmp116
	addq	%rdx, %rax	# tmp114, tmp116
	salq	$2, %rax	#, tmp116
	addq	%rdx, %rax	# tmp114, tmp116
	salq	$3, %rax	#, tmp117
	addq	$rld, %rax	#, tmp118
	movq	(%rax), %rax	# rld[r_8(D)].in, D.28308
	testq	%rax, %rax	# D.28308
	je	.L1489	#,
	.loc 1 5086 0
	movl	-24(%rbp), %eax	# r, tmp120
	movslq	%eax, %rdx	# tmp120, tmp119
	movq	%rdx, %rax	# tmp119, tmp121
	addq	%rax, %rax	# tmp121
	addq	%rdx, %rax	# tmp119, tmp121
	salq	$2, %rax	#, tmp121
	addq	%rdx, %rax	# tmp119, tmp121
	salq	$3, %rax	#, tmp122
	addq	$rld, %rax	#, tmp123
	movq	(%rax), %rax	# rld[r_8(D)].in, D.28308
	movzbl	2(%rax), %eax	# _19->mode, D.28304
	movzbl	%al, %eax	# D.28304, tmp124
	movl	%eax, -16(%rbp)	# tmp124, test_mode
.L1489:
	.loc 1 5093 0
	movl	-24(%rbp), %eax	# r, tmp126
	movslq	%eax, %rdx	# tmp126, tmp125
	movq	%rdx, %rax	# tmp125, tmp127
	addq	%rax, %rax	# tmp127
	addq	%rdx, %rax	# tmp125, tmp127
	salq	$2, %rax	#, tmp127
	addq	%rdx, %rax	# tmp125, tmp127
	salq	$3, %rax	#, tmp128
	addq	$rld, %rax	#, tmp129
	movq	(%rax), %rax	# rld[r_8(D)].in, D.28308
	testq	%rax, %rax	# D.28308
	je	.L1490	#,
	.loc 1 5093 0 is_stmt 0 discriminator 1
	cmpl	$0, -16(%rbp)	#, test_mode
	je	.L1490	#,
	.loc 1 5094 0 is_stmt 1 discriminator 1
	movl	-16(%rbp), %edx	# test_mode, tmp130
	movl	-12(%rbp), %eax	# regno, tmp131
	movl	%edx, %esi	# tmp130,
	movl	%eax, %edi	# tmp131,
	call	ix86_hard_regno_mode_ok	#
	.loc 1 5093 0 discriminator 1
	testl	%eax, %eax	# D.28303
	je	.L1488	#,
.L1490:
	.loc 1 5095 0
	movl	-24(%rbp), %eax	# r, tmp133
	movslq	%eax, %rdx	# tmp133, tmp132
	movq	%rdx, %rax	# tmp132, tmp134
	addq	%rax, %rax	# tmp134
	addq	%rdx, %rax	# tmp132, tmp134
	salq	$2, %rax	#, tmp134
	addq	%rdx, %rax	# tmp132, tmp134
	salq	$3, %rax	#, tmp135
	addq	$rld+8, %rax	#, tmp136
	movq	(%rax), %rax	# rld[r_8(D)].out, D.28308
	testq	%rax, %rax	# D.28308
	je	.L1491	#,
	.loc 1 5096 0 discriminator 1
	movl	-24(%rbp), %eax	# r, tmp138
	movslq	%eax, %rdx	# tmp138, tmp137
	movq	%rdx, %rax	# tmp137, tmp139
	addq	%rax, %rax	# tmp139
	addq	%rdx, %rax	# tmp137, tmp139
	salq	$2, %rax	#, tmp139
	addq	%rdx, %rax	# tmp137, tmp139
	salq	$3, %rax	#, tmp140
	addq	$rld+8, %rax	#, tmp141
	movq	(%rax), %rax	# rld[r_8(D)].out, D.28308
	movzbl	2(%rax), %eax	# _25->mode, D.28304
	movzbl	%al, %edx	# D.28304, D.28306
	movl	-12(%rbp), %eax	# regno, tmp142
	movl	%edx, %esi	# D.28306,
	movl	%eax, %edi	# tmp142,
	call	ix86_hard_regno_mode_ok	#
	.loc 1 5095 0 discriminator 1
	testl	%eax, %eax	# D.28303
	je	.L1488	#,
.L1491:
	.loc 1 5099 0
	movl	-20(%rbp), %eax	# i, tmp143
	movl	%eax, last_spill_reg(%rip)	# tmp143, last_spill_reg
	.loc 1 5103 0
	movl	-24(%rbp), %eax	# r, tmp145
	movslq	%eax, %rdx	# tmp145, tmp144
	movq	%rdx, %rax	# tmp144, tmp146
	addq	%rax, %rax	# tmp146
	addq	%rdx, %rax	# tmp144, tmp146
	salq	$2, %rax	#, tmp146
	addq	%rdx, %rax	# tmp144, tmp146
	salq	$3, %rax	#, tmp147
	addq	$rld+16, %rax	#, tmp148
	movl	12(%rax), %ecx	# rld[r_8(D)].mode, D.28306
	movl	-24(%rbp), %eax	# r, tmp150
	movslq	%eax, %rdx	# tmp150, tmp149
	movq	%rdx, %rax	# tmp149, tmp151
	addq	%rax, %rax	# tmp151
	addq	%rdx, %rax	# tmp149, tmp151
	salq	$2, %rax	#, tmp151
	addq	%rdx, %rax	# tmp149, tmp151
	salq	$3, %rax	#, tmp152
	addq	$rld+80, %rax	#, tmp153
	movl	12(%rax), %edi	# rld[r_8(D)].when_needed, D.28309
	movl	-24(%rbp), %eax	# r, tmp155
	movslq	%eax, %rdx	# tmp155, tmp154
	movq	%rdx, %rax	# tmp154, tmp156
	addq	%rax, %rax	# tmp156
	addq	%rdx, %rax	# tmp154, tmp156
	salq	$2, %rax	#, tmp156
	addq	%rdx, %rax	# tmp154, tmp156
	salq	$3, %rax	#, tmp157
	addq	$rld+64, %rax	#, tmp158
	movl	8(%rax), %esi	# rld[r_8(D)].opnum, D.28303
	movl	-20(%rbp), %eax	# i, tmp160
	cltq
	movzwl	spill_regs(%rax,%rax), %eax	# spill_regs, D.28307
	cwtl
	movl	%edi, %edx	# D.28309,
	movl	%eax, %edi	# D.28305,
	call	mark_reload_reg_in_use	#
	.loc 1 5106 0
	movl	-24(%rbp), %eax	# r, tmp162
	movslq	%eax, %rdx	# tmp162, tmp161
	movq	%rdx, %rax	# tmp161, tmp163
	addq	%rax, %rax	# tmp163
	addq	%rdx, %rax	# tmp161, tmp163
	salq	$2, %rax	#, tmp163
	addq	%rdx, %rax	# tmp161, tmp163
	salq	$3, %rax	#, tmp164
	leaq	rld+64(%rax), %rdx	#, tmp165
	movq	-8(%rbp), %rax	# reg, tmp166
	movq	%rax, (%rdx)	# tmp166, rld[r_8(D)].reg_rtx
	.loc 1 5107 0
	movl	-20(%rbp), %eax	# i, tmp168
	cltq
	movzwl	spill_regs(%rax,%rax), %eax	# spill_regs, D.28307
	movswl	%ax, %edx	# D.28307, D.28303
	movl	-24(%rbp), %eax	# r, tmp170
	cltq
	movl	%edx, reload_spill_index(,%rax,4)	# D.28303, reload_spill_index
	.loc 1 5108 0
	movl	$1, %eax	#, D.28303
	jmp	.L1492	#
.L1488:
.LBE116:
	.loc 1 5111 0
	movl	$0, %eax	#, D.28303
.L1492:
	.loc 1 5112 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE50:
	.size	set_reload_reg, .-set_reload_reg
	.type	allocate_reload_reg, @function
allocate_reload_reg:
.LFB51:
	.loc 1 5128 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# chain, chain
	movl	%esi, -60(%rbp)	# r, r
	movl	%edx, -64(%rbp)	# last_reload, last_reload
	.loc 1 5144 0
	movl	-60(%rbp), %eax	# r, tmp136
	movslq	%eax, %rdx	# tmp136, tmp135
	movq	%rdx, %rax	# tmp135, tmp137
	addq	%rax, %rax	# tmp137
	addq	%rdx, %rax	# tmp135, tmp137
	salq	$2, %rax	#, tmp137
	addq	%rdx, %rax	# tmp135, tmp137
	salq	$3, %rax	#, tmp138
	addq	$rld+32, %rax	#, tmp139
	movl	(%rax), %eax	# rld[r_22(D)].nregs, D.28311
	cmpl	$1, %eax	#, D.28311
	jbe	.L1494	#,
	.loc 1 5144 0 is_stmt 0 discriminator 1
	cmpl	$0, -64(%rbp)	#, last_reload
	jne	.L1494	#,
	.loc 1 5144 0 discriminator 3
	movl	$1, %eax	#, iftmp.877
	jmp	.L1495	#
.L1494:
	.loc 1 5144 0 discriminator 2
	movl	$0, %eax	#, iftmp.877
.L1495:
	.loc 1 5144 0 discriminator 4
	movl	%eax, -32(%rbp)	# iftmp.877, force_group
	.loc 1 5158 0 is_stmt 1 discriminator 4
	movl	$0, -44(%rbp)	#, pass
	jmp	.L1496	#
.L1533:
	.loc 1 5165 0
	movl	last_spill_reg(%rip), %eax	# last_spill_reg, tmp140
	movl	%eax, -48(%rbp)	# tmp140, i
	.loc 1 5167 0
	movl	$0, -40(%rbp)	#, count
	jmp	.L1497	#
.L1530:
.LBB117:
	.loc 1 5169 0
	movl	-60(%rbp), %eax	# r, tmp142
	movslq	%eax, %rdx	# tmp142, tmp141
	movq	%rdx, %rax	# tmp141, tmp143
	addq	%rax, %rax	# tmp143
	addq	%rdx, %rax	# tmp141, tmp143
	salq	$2, %rax	#, tmp143
	addq	%rdx, %rax	# tmp141, tmp143
	salq	$3, %rax	#, tmp144
	addq	$rld+16, %rax	#, tmp145
	movl	(%rax), %eax	# rld[r_22(D)].class, D.28312
	movl	%eax, -28(%rbp)	# D.28312, class
	.loc 1 5172 0
	addl	$1, -48(%rbp)	#, i
	.loc 1 5173 0
	movl	n_spills(%rip), %eax	# n_spills, n_spills.878
	cmpl	%eax, -48(%rbp)	# n_spills.878, i
	jl	.L1498	#,
	.loc 1 5174 0
	movl	n_spills(%rip), %eax	# n_spills, n_spills.879
	subl	%eax, -48(%rbp)	# n_spills.879, i
.L1498:
	.loc 1 5175 0
	movl	-48(%rbp), %eax	# i, tmp147
	cltq
	movzwl	spill_regs(%rax,%rax), %eax	# spill_regs, D.28313
	cwtl
	movl	%eax, -24(%rbp)	# tmp148, regnum
	.loc 1 5177 0
	movl	-60(%rbp), %eax	# r, tmp150
	movslq	%eax, %rdx	# tmp150, tmp149
	movq	%rdx, %rax	# tmp149, tmp151
	addq	%rax, %rax	# tmp151
	addq	%rdx, %rax	# tmp149, tmp151
	salq	$2, %rax	#, tmp151
	addq	%rdx, %rax	# tmp149, tmp151
	salq	$3, %rax	#, tmp152
	addq	$rld+80, %rax	#, tmp153
	movl	12(%rax), %esi	# rld[r_22(D)].when_needed, D.28314
	movl	-60(%rbp), %eax	# r, tmp155
	movslq	%eax, %rdx	# tmp155, tmp154
	movq	%rdx, %rax	# tmp154, tmp156
	addq	%rax, %rax	# tmp156
	addq	%rdx, %rax	# tmp154, tmp156
	salq	$2, %rax	#, tmp156
	addq	%rdx, %rax	# tmp154, tmp156
	salq	$3, %rax	#, tmp157
	addq	$rld+64, %rax	#, tmp158
	movl	8(%rax), %ecx	# rld[r_22(D)].opnum, D.28310
	movl	-24(%rbp), %eax	# regnum, regnum.880
	movl	%esi, %edx	# D.28314,
	movl	%ecx, %esi	# D.28310,
	movl	%eax, %edi	# regnum.880,
	call	reload_reg_free_p	#
	testl	%eax, %eax	# D.28310
	jne	.L1499	#,
	.loc 1 5179 0
	movl	-60(%rbp), %eax	# r, tmp160
	movslq	%eax, %rdx	# tmp160, tmp159
	movq	%rdx, %rax	# tmp159, tmp161
	addq	%rax, %rax	# tmp161
	addq	%rdx, %rax	# tmp159, tmp161
	salq	$2, %rax	#, tmp161
	addq	%rdx, %rax	# tmp159, tmp161
	salq	$3, %rax	#, tmp162
	addq	$rld, %rax	#, tmp163
	movq	(%rax), %rax	# rld[r_22(D)].in, D.28315
	testq	%rax, %rax	# D.28315
	je	.L1500	#,
	.loc 1 5182 0
	movq	reload_reg_used(%rip), %rdx	# reload_reg_used, reload_reg_used.881
	movl	-24(%rbp), %eax	# regnum, tmp164
	movl	%eax, %ecx	# tmp164, tmp260
	shrq	%cl, %rdx	# tmp260, D.28316
	movq	%rdx, %rax	# D.28316, D.28316
	andl	$1, %eax	#, D.28316
	testq	%rax, %rax	# D.28316
	jne	.L1500	#,
	.loc 1 5183 0
	movl	-60(%rbp), %eax	# r, tmp166
	movslq	%eax, %rdx	# tmp166, tmp165
	movq	%rdx, %rax	# tmp165, tmp167
	addq	%rax, %rax	# tmp167
	addq	%rdx, %rax	# tmp165, tmp167
	salq	$2, %rax	#, tmp167
	addq	%rdx, %rax	# tmp165, tmp167
	salq	$3, %rax	#, tmp168
	addq	$rld+8, %rax	#, tmp169
	movq	(%rax), %r9	# rld[r_22(D)].out, D.28315
	movl	-60(%rbp), %eax	# r, tmp171
	movslq	%eax, %rdx	# tmp171, tmp170
	movq	%rdx, %rax	# tmp170, tmp172
	addq	%rax, %rax	# tmp172
	addq	%rdx, %rax	# tmp170, tmp172
	salq	$2, %rax	#, tmp172
	addq	%rdx, %rax	# tmp170, tmp172
	salq	$3, %rax	#, tmp173
	addq	$rld, %rax	#, tmp174
	movq	(%rax), %r8	# rld[r_22(D)].in, D.28315
	movl	-60(%rbp), %eax	# r, tmp176
	movslq	%eax, %rdx	# tmp176, tmp175
	movq	%rdx, %rax	# tmp175, tmp177
	addq	%rax, %rax	# tmp177
	addq	%rdx, %rax	# tmp175, tmp177
	salq	$2, %rax	#, tmp177
	addq	%rdx, %rax	# tmp175, tmp177
	salq	$3, %rax	#, tmp178
	addq	$rld+80, %rax	#, tmp179
	movl	12(%rax), %ecx	# rld[r_22(D)].when_needed, D.28314
	movl	-60(%rbp), %eax	# r, tmp181
	movslq	%eax, %rdx	# tmp181, tmp180
	movq	%rdx, %rax	# tmp180, tmp182
	addq	%rax, %rax	# tmp182
	addq	%rdx, %rax	# tmp180, tmp182
	salq	$2, %rax	#, tmp182
	addq	%rdx, %rax	# tmp180, tmp182
	salq	$3, %rax	#, tmp183
	addq	$rld+64, %rax	#, tmp184
	movl	8(%rax), %edi	# rld[r_22(D)].opnum, D.28310
	movl	-60(%rbp), %eax	# r, tmp186
	movslq	%eax, %rdx	# tmp186, tmp185
	movq	%rdx, %rax	# tmp185, tmp187
	addq	%rax, %rax	# tmp187
	addq	%rdx, %rax	# tmp185, tmp187
	salq	$2, %rax	#, tmp187
	addq	%rdx, %rax	# tmp185, tmp187
	salq	$3, %rax	#, tmp188
	addq	$rld+16, %rax	#, tmp189
	movl	12(%rax), %esi	# rld[r_22(D)].mode, D.28317
	movl	-24(%rbp), %eax	# regnum, tmp190
	movl	$1, 8(%rsp)	#,
	movl	-60(%rbp), %edx	# r, tmp191
	movl	%edx, (%rsp)	# tmp191,
	movl	%edi, %edx	# D.28310,
	movl	%eax, %edi	# tmp190,
	call	free_for_value_p	#
	testl	%eax, %eax	# D.28310
	je	.L1500	#,
.L1499:
	.loc 1 5186 0
	movl	-28(%rbp), %eax	# class, tmp193
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.28316
	movl	-24(%rbp), %eax	# regnum, tmp194
	movl	%eax, %ecx	# tmp194, tmp262
	shrq	%cl, %rdx	# tmp262, D.28316
	movq	%rdx, %rax	# D.28316, D.28316
	andl	$1, %eax	#, D.28316
	testq	%rax, %rax	# D.28316
	je	.L1500	#,
	.loc 1 5187 0
	movl	-60(%rbp), %eax	# r, tmp196
	movslq	%eax, %rdx	# tmp196, tmp195
	movq	%rdx, %rax	# tmp195, tmp197
	addq	%rax, %rax	# tmp197
	addq	%rdx, %rax	# tmp195, tmp197
	salq	$2, %rax	#, tmp197
	addq	%rdx, %rax	# tmp195, tmp197
	salq	$3, %rax	#, tmp198
	addq	$rld+16, %rax	#, tmp199
	movl	12(%rax), %edx	# rld[r_22(D)].mode, D.28317
	movl	-24(%rbp), %eax	# regnum, tmp200
	movl	%edx, %esi	# D.28317,
	movl	%eax, %edi	# tmp200,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.28310
	je	.L1500	#,
	.loc 1 5191 0
	cmpl	$0, -44(%rbp)	#, pass
	jne	.L1501	#,
	.loc 1 5192 0
	movq	reload_reg_used_at_all(%rip), %rdx	# reload_reg_used_at_all, reload_reg_used_at_all.882
	movl	-24(%rbp), %eax	# regnum, tmp201
	movl	%eax, %ecx	# tmp201, tmp264
	shrq	%cl, %rdx	# tmp264, D.28316
	movq	%rdx, %rax	# D.28316, D.28316
	andl	$1, %eax	#, D.28316
	testq	%rax, %rax	# D.28316
	je	.L1500	#,
	.loc 1 5194 0
	movq	reload_reg_used_for_inherit(%rip), %rdx	# reload_reg_used_for_inherit, reload_reg_used_for_inherit.883
	movl	-24(%rbp), %eax	# regnum, tmp202
	movl	%eax, %ecx	# tmp202, tmp266
	shrq	%cl, %rdx	# tmp266, D.28316
	movq	%rdx, %rax	# D.28316, D.28316
	andl	$1, %eax	#, D.28316
	testq	%rax, %rax	# D.28316
	jne	.L1500	#,
.L1501:
.LBB118:
	.loc 1 5197 0
	cmpl	$7, -24(%rbp)	#, regnum
	jle	.L1502	#,
	.loc 1 5197 0 is_stmt 0 discriminator 1
	cmpl	$15, -24(%rbp)	#, regnum
	jle	.L1503	#,
.L1502:
	.loc 1 5197 0 discriminator 2
	cmpl	$20, -24(%rbp)	#, regnum
	jle	.L1504	#,
	.loc 1 5197 0 discriminator 1
	cmpl	$28, -24(%rbp)	#, regnum
	jle	.L1503	#,
.L1504:
	.loc 1 5197 0 discriminator 2
	cmpl	$44, -24(%rbp)	#, regnum
	jle	.L1505	#,
	.loc 1 5197 0 discriminator 1
	cmpl	$52, -24(%rbp)	#, regnum
	jle	.L1503	#,
.L1505:
	.loc 1 5197 0 discriminator 2
	cmpl	$28, -24(%rbp)	#, regnum
	jle	.L1506	#,
	.loc 1 5197 0 discriminator 1
	cmpl	$36, -24(%rbp)	#, regnum
	jg	.L1506	#,
.L1503:
	movl	-60(%rbp), %eax	# r, tmp204
	movslq	%eax, %rdx	# tmp204, tmp203
	movq	%rdx, %rax	# tmp203, tmp205
	addq	%rax, %rax	# tmp205
	addq	%rdx, %rax	# tmp203, tmp205
	salq	$2, %rax	#, tmp205
	addq	%rdx, %rax	# tmp203, tmp205
	salq	$3, %rax	#, tmp206
	addq	$rld+16, %rax	#, tmp207
	movl	12(%rax), %eax	# rld[r_22(D)].mode, D.28317
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28319
	cmpl	$5, %eax	#, D.28319
	je	.L1507	#,
	.loc 1 5197 0 discriminator 2
	movl	-60(%rbp), %eax	# r, tmp210
	movslq	%eax, %rdx	# tmp210, tmp209
	movq	%rdx, %rax	# tmp209, tmp211
	addq	%rax, %rax	# tmp211
	addq	%rdx, %rax	# tmp209, tmp211
	salq	$2, %rax	#, tmp211
	addq	%rdx, %rax	# tmp209, tmp211
	salq	$3, %rax	#, tmp212
	addq	$rld+16, %rax	#, tmp213
	movl	12(%rax), %eax	# rld[r_22(D)].mode, D.28317
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28319
	cmpl	$6, %eax	#, D.28319
	jne	.L1508	#,
.L1507:
	.loc 1 5197 0 discriminator 1
	movl	$2, %eax	#, iftmp.885
	jmp	.L1509	#
.L1508:
	movl	$1, %eax	#, iftmp.885
.L1509:
	.loc 1 5197 0 discriminator 3
	jmp	.L1510	#
.L1506:
	.loc 1 5197 0 discriminator 2
	movl	-60(%rbp), %eax	# r, tmp216
	movslq	%eax, %rdx	# tmp216, tmp215
	movq	%rdx, %rax	# tmp215, tmp217
	addq	%rax, %rax	# tmp217
	addq	%rdx, %rax	# tmp215, tmp217
	salq	$2, %rax	#, tmp217
	addq	%rdx, %rax	# tmp215, tmp217
	salq	$3, %rax	#, tmp218
	addq	$rld+16, %rax	#, tmp219
	movl	12(%rax), %eax	# rld[r_22(D)].mode, D.28317
	cmpl	$18, %eax	#, D.28317
	jne	.L1511	#,
	.loc 1 5197 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.888
	andl	$33554432, %eax	#, D.28310
	testl	%eax, %eax	# D.28310
	je	.L1512	#,
	movl	$2, %eax	#, iftmp.887
	jmp	.L1510	#
.L1512:
	.loc 1 5197 0 discriminator 2
	movl	$3, %eax	#, iftmp.887
	jmp	.L1510	#
.L1511:
	movl	-60(%rbp), %eax	# r, tmp221
	movslq	%eax, %rdx	# tmp221, tmp220
	movq	%rdx, %rax	# tmp220, tmp222
	addq	%rax, %rax	# tmp222
	addq	%rdx, %rax	# tmp220, tmp222
	salq	$2, %rax	#, tmp222
	addq	%rdx, %rax	# tmp220, tmp222
	salq	$3, %rax	#, tmp223
	addq	$rld+16, %rax	#, tmp224
	movl	12(%rax), %eax	# rld[r_22(D)].mode, D.28317
	cmpl	$24, %eax	#, D.28317
	jne	.L1515	#,
	.loc 1 5197 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.891
	andl	$33554432, %eax	#, D.28310
	testl	%eax, %eax	# D.28310
	je	.L1516	#,
	movl	$4, %eax	#, iftmp.890
	jmp	.L1510	#
.L1516:
	.loc 1 5197 0 discriminator 2
	movl	$6, %eax	#, iftmp.890
	jmp	.L1510	#
.L1515:
	movl	-60(%rbp), %eax	# r, tmp226
	movslq	%eax, %rdx	# tmp226, tmp225
	movq	%rdx, %rax	# tmp225, tmp227
	addq	%rax, %rax	# tmp227
	addq	%rdx, %rax	# tmp225, tmp227
	salq	$2, %rax	#, tmp227
	addq	%rdx, %rax	# tmp225, tmp227
	salq	$3, %rax	#, tmp228
	addq	$rld+16, %rax	#, tmp229
	movl	12(%rax), %eax	# rld[r_22(D)].mode, D.28317
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28318
	movzbl	%al, %edx	# D.28318, D.28310
	movl	target_flags(%rip), %eax	# target_flags, target_flags.893
	andl	$33554432, %eax	#, D.28310
	testl	%eax, %eax	# D.28310
	je	.L1519	#,
	.loc 1 5197 0 discriminator 1
	movl	$8, %eax	#, iftmp.892
	jmp	.L1520	#
.L1519:
	.loc 1 5197 0 discriminator 2
	movl	$4, %eax	#, iftmp.892
.L1520:
	.loc 1 5197 0 discriminator 3
	addl	%edx, %eax	# D.28310, D.28310
	subl	$1, %eax	#, D.28310
	movl	target_flags(%rip), %edx	# target_flags, target_flags.895
	andl	$33554432, %edx	#, D.28310
	testl	%edx, %edx	# D.28310
	je	.L1521	#,
	.loc 1 5197 0 discriminator 1
	movl	$8, %ebx	#, iftmp.894
	jmp	.L1522	#
.L1521:
	.loc 1 5197 0 discriminator 2
	movl	$4, %ebx	#, iftmp.894
.L1522:
	.loc 1 5197 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.894
.L1510:
	movl	%eax, -36(%rbp)	# iftmp.884, nr
	.loc 1 5201 0 is_stmt 1 discriminator 3
	cmpl	$0, -32(%rbp)	#, force_group
	je	.L1523	#,
	.loc 1 5202 0
	movl	-60(%rbp), %eax	# r, tmp234
	movslq	%eax, %rdx	# tmp234, tmp233
	movq	%rdx, %rax	# tmp233, tmp235
	addq	%rax, %rax	# tmp235
	addq	%rdx, %rax	# tmp233, tmp235
	salq	$2, %rax	#, tmp235
	addq	%rdx, %rax	# tmp233, tmp235
	salq	$3, %rax	#, tmp236
	addq	$rld+32, %rax	#, tmp237
	movl	(%rax), %eax	# rld[r_22(D)].nregs, D.28311
	movl	%eax, -36(%rbp)	# D.28311, nr
.L1523:
	.loc 1 5204 0
	cmpl	$1, -36(%rbp)	#, nr
	jne	.L1524	#,
	.loc 1 5207 0
	cmpl	$0, -32(%rbp)	#, force_group
	je	.L1525	#,
	.loc 1 5208 0
	jmp	.L1500	#
.L1525:
	.loc 1 5209 0
	jmp	.L1526	#
.L1524:
	.loc 1 5213 0
	jmp	.L1527	#
.L1529:
.LBB119:
	.loc 1 5215 0
	movl	-36(%rbp), %eax	# nr, tmp238
	movl	-24(%rbp), %edx	# regnum, tmp239
	addl	%edx, %eax	# tmp239, D.28310
	subl	$1, %eax	#, tmp240
	movl	%eax, -20(%rbp)	# tmp240, regno
	.loc 1 5216 0
	movl	-28(%rbp), %eax	# class, tmp242
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.28316
	movl	-20(%rbp), %eax	# regno, tmp243
	movl	%eax, %ecx	# tmp243, tmp269
	shrq	%cl, %rdx	# tmp269, D.28316
	movq	%rdx, %rax	# D.28316, D.28316
	andl	$1, %eax	#, D.28316
	testq	%rax, %rax	# D.28316
	je	.L1528	#,
	.loc 1 5217 0
	movl	-20(%rbp), %eax	# regno, tmp245
	cltq
	movzwl	spill_reg_order(%rax,%rax), %eax	# spill_reg_order, D.28313
	testw	%ax, %ax	# D.28313
	js	.L1528	#,
	.loc 1 5218 0
	movl	-60(%rbp), %eax	# r, tmp247
	movslq	%eax, %rdx	# tmp247, tmp246
	movq	%rdx, %rax	# tmp246, tmp248
	addq	%rax, %rax	# tmp248
	addq	%rdx, %rax	# tmp246, tmp248
	salq	$2, %rax	#, tmp248
	addq	%rdx, %rax	# tmp246, tmp248
	salq	$3, %rax	#, tmp249
	addq	$rld+80, %rax	#, tmp250
	movl	12(%rax), %esi	# rld[r_22(D)].when_needed, D.28314
	movl	-60(%rbp), %eax	# r, tmp252
	movslq	%eax, %rdx	# tmp252, tmp251
	movq	%rdx, %rax	# tmp251, tmp253
	addq	%rax, %rax	# tmp253
	addq	%rdx, %rax	# tmp251, tmp253
	salq	$2, %rax	#, tmp253
	addq	%rdx, %rax	# tmp251, tmp253
	salq	$3, %rax	#, tmp254
	addq	$rld+64, %rax	#, tmp255
	movl	8(%rax), %ecx	# rld[r_22(D)].opnum, D.28310
	movl	-20(%rbp), %eax	# regno, regno.896
	movl	%esi, %edx	# D.28314,
	movl	%ecx, %esi	# D.28310,
	movl	%eax, %edi	# regno.896,
	call	reload_reg_free_p	#
	.loc 1 5216 0
	testl	%eax, %eax	# D.28310
	je	.L1528	#,
	.loc 1 5221 0
	subl	$1, -36(%rbp)	#, nr
.L1527:
.LBE119:
	.loc 1 5213 0 discriminator 1
	cmpl	$1, -36(%rbp)	#, nr
	jg	.L1529	#,
.L1528:
	.loc 1 5223 0
	cmpl	$1, -36(%rbp)	#, nr
	jne	.L1500	#,
	.loc 1 5224 0
	jmp	.L1526	#
.L1500:
.LBE118:
.LBE117:
	.loc 1 5167 0
	addl	$1, -40(%rbp)	#, count
.L1497:
	.loc 1 5167 0 is_stmt 0 discriminator 1
	movl	n_spills(%rip), %eax	# n_spills, n_spills.897
	cmpl	%eax, -40(%rbp)	# n_spills.897, count
	jl	.L1530	#,
.L1526:
	.loc 1 5229 0 is_stmt 1
	movl	n_spills(%rip), %eax	# n_spills, n_spills.898
	cmpl	%eax, -40(%rbp)	# n_spills.898, count
	jge	.L1531	#,
	.loc 1 5230 0
	jmp	.L1532	#
.L1531:
	.loc 1 5158 0
	addl	$1, -44(%rbp)	#, pass
.L1496:
	.loc 1 5158 0 is_stmt 0 discriminator 1
	cmpl	$1, -44(%rbp)	#, pass
	jle	.L1533	#,
.L1532:
	.loc 1 5234 0 is_stmt 1
	movl	n_spills(%rip), %eax	# n_spills, n_spills.899
	cmpl	%eax, -40(%rbp)	# n_spills.899, count
	jl	.L1534	#,
	.loc 1 5235 0
	movl	$0, %eax	#, D.28310
	jmp	.L1535	#
.L1534:
	.loc 1 5240 0
	movl	-60(%rbp), %edx	# r, tmp256
	movl	-48(%rbp), %eax	# i, tmp257
	movl	%edx, %esi	# tmp256,
	movl	%eax, %edi	# tmp257,
	call	set_reload_reg	#
.L1535:
	.loc 1 5241 0
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE51:
	.size	allocate_reload_reg, .-allocate_reload_reg
	.type	choose_reload_regs_init, @function
choose_reload_regs_init:
.LFB52:
	.loc 1 5251 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# chain, chain
	movq	%rsi, -32(%rbp)	# save_reload_reg_rtx, save_reload_reg_rtx
	.loc 1 5254 0
	movl	$0, -12(%rbp)	#, i
	jmp	.L1537	#
.L1538:
	.loc 1 5255 0 discriminator 2
	movl	-12(%rbp), %eax	# i, tmp84
	cltq
	leaq	0(,%rax,8), %rdx	#, D.28320
	movq	-32(%rbp), %rax	# save_reload_reg_rtx, tmp85
	addq	%rdx, %rax	# D.28320, D.28321
	movq	(%rax), %rcx	# *_9, D.28322
	movl	-12(%rbp), %eax	# i, tmp87
	movslq	%eax, %rdx	# tmp87, tmp86
	movq	%rdx, %rax	# tmp86, tmp88
	addq	%rax, %rax	# tmp88
	addq	%rdx, %rax	# tmp86, tmp88
	salq	$2, %rax	#, tmp88
	addq	%rdx, %rax	# tmp86, tmp88
	salq	$3, %rax	#, tmp89
	addq	$rld+64, %rax	#, tmp90
	movq	%rcx, (%rax)	# D.28322, rld[i_1].reg_rtx
	.loc 1 5254 0 discriminator 2
	addl	$1, -12(%rbp)	#, i
.L1537:
	.loc 1 5254 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.900
	cmpl	%eax, -12(%rbp)	# n_reloads.900, i
	jl	.L1538	#,
	.loc 1 5257 0 is_stmt 1
	movl	$180, %edx	#,
	movl	$0, %esi	#,
	movl	$reload_inherited, %edi	#,
	call	memset	#
	.loc 1 5258 0
	movl	$1440, %edx	#,
	movl	$0, %esi	#,
	movl	$reload_inheritance_insn, %edi	#,
	call	memset	#
	.loc 1 5259 0
	movl	$1440, %edx	#,
	movl	$0, %esi	#,
	movl	$reload_override_in, %edi	#,
	call	memset	#
	.loc 1 5261 0
	movq	$0, reload_reg_used(%rip)	#, reload_reg_used
	.loc 1 5262 0
	movq	$0, reload_reg_used_at_all(%rip)	#, reload_reg_used_at_all
	.loc 1 5263 0
	movq	$0, reload_reg_used_in_op_addr(%rip)	#, reload_reg_used_in_op_addr
	.loc 1 5264 0
	movq	$0, reload_reg_used_in_op_addr_reload(%rip)	#, reload_reg_used_in_op_addr_reload
	.loc 1 5265 0
	movq	$0, reload_reg_used_in_insn(%rip)	#, reload_reg_used_in_insn
	.loc 1 5266 0
	movq	$0, reload_reg_used_in_other_addr(%rip)	#, reload_reg_used_in_other_addr
	.loc 1 5268 0
	movq	$0, reg_used_in_insn(%rip)	#, reg_used_in_insn
.LBB120:
	.loc 1 5271 0
	movq	$0, -8(%rbp)	#, tmp
	movq	-24(%rbp), %rax	# chain, tmp91
	leaq	40(%rax), %rdx	#, D.28323
	leaq	-8(%rbp), %rax	#, tmp92
	movq	%rdx, %rsi	# D.28323,
	movq	%rax, %rdi	# tmp92,
	call	reg_set_to_hard_reg_set	#
	.loc 1 5272 0
	movq	reg_used_in_insn(%rip), %rdx	# reg_used_in_insn, reg_used_in_insn.901
	movq	-8(%rbp), %rax	# tmp, tmp.902
	orq	%rdx, %rax	# reg_used_in_insn.901, reg_used_in_insn.903
	movq	%rax, reg_used_in_insn(%rip)	# reg_used_in_insn.903, reg_used_in_insn
	.loc 1 5273 0
	movq	$0, -8(%rbp)	#, tmp
	movq	-24(%rbp), %rax	# chain, tmp93
	leaq	64(%rax), %rdx	#, D.28323
	leaq	-8(%rbp), %rax	#, tmp94
	movq	%rdx, %rsi	# D.28323,
	movq	%rax, %rdi	# tmp94,
	call	reg_set_to_hard_reg_set	#
	.loc 1 5274 0
	movq	reg_used_in_insn(%rip), %rdx	# reg_used_in_insn, reg_used_in_insn.904
	movq	-8(%rbp), %rax	# tmp, tmp.905
	orq	%rdx, %rax	# reg_used_in_insn.904, reg_used_in_insn.906
	movq	%rax, reg_used_in_insn(%rip)	# reg_used_in_insn.906, reg_used_in_insn
	.loc 1 5275 0
	movq	-24(%rbp), %rax	# chain, tmp95
	addq	$40, %rax	#, D.28323
	movq	%rax, %rsi	# D.28323,
	movl	$reg_used_in_insn, %edi	#,
	call	compute_use_by_pseudos	#
	.loc 1 5276 0
	movq	-24(%rbp), %rax	# chain, tmp96
	addq	$64, %rax	#, D.28323
	movq	%rax, %rsi	# D.28323,
	movl	$reg_used_in_insn, %edi	#,
	call	compute_use_by_pseudos	#
.LBE120:
	.loc 1 5279 0
	movl	$0, -12(%rbp)	#, i
	jmp	.L1539	#
.L1540:
	.loc 1 5281 0 discriminator 2
	movl	-12(%rbp), %eax	# i, tmp98
	cltq
	movq	$0, reload_reg_used_in_output(,%rax,8)	#, reload_reg_used_in_output
	.loc 1 5282 0 discriminator 2
	movl	-12(%rbp), %eax	# i, tmp100
	cltq
	movq	$0, reload_reg_used_in_input(,%rax,8)	#, reload_reg_used_in_input
	.loc 1 5283 0 discriminator 2
	movl	-12(%rbp), %eax	# i, tmp102
	cltq
	movq	$0, reload_reg_used_in_input_addr(,%rax,8)	#, reload_reg_used_in_input_addr
	.loc 1 5284 0 discriminator 2
	movl	-12(%rbp), %eax	# i, tmp104
	cltq
	movq	$0, reload_reg_used_in_inpaddr_addr(,%rax,8)	#, reload_reg_used_in_inpaddr_addr
	.loc 1 5285 0 discriminator 2
	movl	-12(%rbp), %eax	# i, tmp106
	cltq
	movq	$0, reload_reg_used_in_output_addr(,%rax,8)	#, reload_reg_used_in_output_addr
	.loc 1 5286 0 discriminator 2
	movl	-12(%rbp), %eax	# i, tmp108
	cltq
	movq	$0, reload_reg_used_in_outaddr_addr(,%rax,8)	#, reload_reg_used_in_outaddr_addr
	.loc 1 5279 0 discriminator 2
	addl	$1, -12(%rbp)	#, i
.L1539:
	.loc 1 5279 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.907
	cmpl	%eax, -12(%rbp)	# reload_n_operands.907, i
	jl	.L1540	#,
	.loc 1 5289 0 is_stmt 1
	movq	-24(%rbp), %rax	# chain, tmp109
	movq	104(%rax), %rax	# chain_12(D)->used_spill_regs, D.28320
	notq	%rax	# reload_reg_unavailable.908
	movq	%rax, reload_reg_unavailable(%rip)	# reload_reg_unavailable.908, reload_reg_unavailable
	.loc 1 5291 0
	movq	$0, reload_reg_used_for_inherit(%rip)	#, reload_reg_used_for_inherit
	.loc 1 5293 0
	movl	$0, -12(%rbp)	#, i
	jmp	.L1541	#
.L1543:
	.loc 1 5296 0
	movl	-12(%rbp), %eax	# i, tmp111
	movslq	%eax, %rdx	# tmp111, tmp110
	movq	%rdx, %rax	# tmp110, tmp112
	addq	%rax, %rax	# tmp112
	addq	%rdx, %rax	# tmp110, tmp112
	salq	$2, %rax	#, tmp112
	addq	%rdx, %rax	# tmp110, tmp112
	salq	$3, %rax	#, tmp113
	addq	$rld+64, %rax	#, tmp114
	movq	(%rax), %rax	# rld[i_3].reg_rtx, D.28322
	testq	%rax, %rax	# D.28322
	je	.L1542	#,
	.loc 1 5297 0
	movl	-12(%rbp), %eax	# i, tmp116
	movslq	%eax, %rdx	# tmp116, tmp115
	movq	%rdx, %rax	# tmp115, tmp117
	addq	%rax, %rax	# tmp117
	addq	%rdx, %rax	# tmp115, tmp117
	salq	$2, %rax	#, tmp117
	addq	%rdx, %rax	# tmp115, tmp117
	salq	$3, %rax	#, tmp118
	addq	$rld+16, %rax	#, tmp119
	movl	12(%rax), %ecx	# rld[i_3].mode, D.28324
	movl	-12(%rbp), %eax	# i, tmp121
	movslq	%eax, %rdx	# tmp121, tmp120
	movq	%rdx, %rax	# tmp120, tmp122
	addq	%rax, %rax	# tmp122
	addq	%rdx, %rax	# tmp120, tmp122
	salq	$2, %rax	#, tmp122
	addq	%rdx, %rax	# tmp120, tmp122
	salq	$3, %rax	#, tmp123
	addq	$rld+80, %rax	#, tmp124
	movl	12(%rax), %edi	# rld[i_3].when_needed, D.28325
	movl	-12(%rbp), %eax	# i, tmp126
	movslq	%eax, %rdx	# tmp126, tmp125
	movq	%rdx, %rax	# tmp125, tmp127
	addq	%rax, %rax	# tmp127
	addq	%rdx, %rax	# tmp125, tmp127
	salq	$2, %rax	#, tmp127
	addq	%rdx, %rax	# tmp125, tmp127
	salq	$3, %rax	#, tmp128
	addq	$rld+64, %rax	#, tmp129
	movl	8(%rax), %esi	# rld[i_3].opnum, D.28326
	movl	-12(%rbp), %eax	# i, tmp131
	movslq	%eax, %rdx	# tmp131, tmp130
	movq	%rdx, %rax	# tmp130, tmp132
	addq	%rax, %rax	# tmp132
	addq	%rdx, %rax	# tmp130, tmp132
	salq	$2, %rax	#, tmp132
	addq	%rdx, %rax	# tmp130, tmp132
	salq	$3, %rax	#, tmp133
	addq	$rld+64, %rax	#, tmp134
	movq	(%rax), %rax	# rld[i_3].reg_rtx, D.28322
	movl	8(%rax), %eax	# _34->fld[0].rtuint, D.28327
	movl	%edi, %edx	# D.28325,
	movl	%eax, %edi	# D.28327,
	call	mark_reload_reg_in_use	#
.L1542:
	.loc 1 5293 0
	addl	$1, -12(%rbp)	#, i
.L1541:
	.loc 1 5293 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.909
	cmpl	%eax, -12(%rbp)	# n_reloads.909, i
	jl	.L1543	#,
	.loc 1 5299 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE52:
	.size	choose_reload_regs_init, .-choose_reload_regs_init
	.type	choose_reload_regs, @function
choose_reload_regs:
.LFB53:
	.loc 1 5311 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$1640, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
	movq	%rdi, -1656(%rbp)	# chain, chain
	.loc 1 5312 0
	movq	-1656(%rbp), %rax	# chain, tmp559
	movq	32(%rax), %rax	# chain_79(D)->insn, tmp560
	movq	%rax, -1512(%rbp)	# tmp560, insn
	.loc 1 5314 0
	movl	$1, -1640(%rbp)	#, max_group_size
	.loc 1 5315 0
	movl	$0, -1636(%rbp)	#, group_class
	.loc 1 5329 0
	movl	$0, -1644(%rbp)	#, j
	jmp	.L1545	#
.L1547:
	.loc 1 5331 0
	movl	-1644(%rbp), %eax	# j, tmp561
	movl	%eax, %edx	# tmp561, D.28328
	movl	-1644(%rbp), %eax	# j, tmp563
	cltq
	movw	%dx, reload_order(%rax,%rax)	# D.28328, reload_order
	.loc 1 5332 0
	movl	-1644(%rbp), %eax	# j, tmp565
	cltq
	movl	$-1, reload_spill_index(,%rax,4)	#, reload_spill_index
	.loc 1 5334 0
	movl	-1644(%rbp), %eax	# j, tmp567
	movslq	%eax, %rdx	# tmp567, tmp566
	movq	%rdx, %rax	# tmp566, tmp568
	addq	%rax, %rax	# tmp568
	addq	%rdx, %rax	# tmp566, tmp568
	salq	$2, %rax	#, tmp568
	addq	%rdx, %rax	# tmp566, tmp568
	salq	$3, %rax	#, tmp569
	addq	$rld+32, %rax	#, tmp570
	movl	(%rax), %eax	# rld[j_3].nregs, D.28329
	cmpl	$1, %eax	#, D.28329
	jbe	.L1546	#,
	.loc 1 5336 0
	movl	-1644(%rbp), %eax	# j, tmp572
	movslq	%eax, %rdx	# tmp572, tmp571
	movq	%rdx, %rax	# tmp571, tmp573
	addq	%rax, %rax	# tmp573
	addq	%rdx, %rax	# tmp571, tmp573
	salq	$2, %rax	#, tmp573
	addq	%rdx, %rax	# tmp571, tmp573
	salq	$3, %rax	#, tmp574
	addq	$rld+32, %rax	#, tmp575
	movl	(%rax), %edx	# rld[j_3].nregs, D.28329
	movl	-1640(%rbp), %eax	# max_group_size, tmp577
	cmpl	%eax, %edx	# tmp577, D.28329
	cmovae	%edx, %eax	# D.28329,, tmp576
	movl	%eax, -1640(%rbp)	# tmp576, max_group_size
	.loc 1 5338 0
	movl	-1644(%rbp), %eax	# j, tmp579
	movslq	%eax, %rdx	# tmp579, tmp578
	movq	%rdx, %rax	# tmp578, tmp580
	addq	%rax, %rax	# tmp580
	addq	%rdx, %rax	# tmp578, tmp580
	salq	$2, %rax	#, tmp580
	addq	%rdx, %rax	# tmp578, tmp580
	salq	$3, %rax	#, tmp581
	addq	$rld+16, %rax	#, tmp582
	movl	(%rax), %eax	# rld[j_3].class, D.28330
	movl	-1636(%rbp), %edx	# group_class, group_class.910
	movslq	%edx, %rcx	# group_class.910, tmp583
	movslq	%eax, %rdx	# D.28331, tmp584
	movq	%rdx, %rax	# tmp584, tmp585
	salq	$2, %rax	#, tmp585
	addq	%rdx, %rax	# tmp584, tmp585
	leaq	0(,%rax,4), %rdx	#, tmp586
	addq	%rdx, %rax	# tmp586, tmp585
	addq	%rcx, %rax	# tmp583, tmp587
	movl	reg_class_superunion(,%rax,4), %eax	# reg_class_superunion, tmp588
	movl	%eax, -1636(%rbp)	# tmp588, group_class
.L1546:
	.loc 1 5341 0
	movl	-1644(%rbp), %eax	# j, tmp590
	movslq	%eax, %rdx	# tmp590, tmp589
	movq	%rdx, %rax	# tmp589, tmp591
	addq	%rax, %rax	# tmp591
	addq	%rdx, %rax	# tmp589, tmp591
	salq	$2, %rax	#, tmp591
	addq	%rdx, %rax	# tmp589, tmp591
	salq	$3, %rax	#, tmp592
	addq	$rld+64, %rax	#, tmp593
	movq	(%rax), %rdx	# rld[j_3].reg_rtx, D.28332
	movl	-1644(%rbp), %eax	# j, tmp595
	cltq
	movq	%rdx, -1488(%rbp,%rax,8)	# D.28332, save_reload_reg_rtx
	.loc 1 5329 0
	addl	$1, -1644(%rbp)	#, j
.L1545:
	.loc 1 5329 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.911
	cmpl	%eax, -1644(%rbp)	# n_reloads.911, j
	jl	.L1547	#,
	.loc 1 5344 0 is_stmt 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.912
	cmpl	$1, %eax	#, n_reloads.912
	jle	.L1548	#,
	.loc 1 5345 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.913
	movl	$reload_reg_class_lower, %ecx	#,
	movl	$2, %edx	#,
	movl	%eax, %esi	# n_reloads.913,
	movl	$reload_order, %edi	#,
	call	specqsort	#
.L1548:
	.loc 1 5353 0
	movl	$0, -1628(%rbp)	#, win
	.loc 1 5354 0
	movl	optimize(%rip), %eax	# optimize, optimize.914
	testl	%eax, %eax	# optimize.914
	setg	%al	#, D.28333
	movzbl	%al, %eax	# D.28333, tmp596
	movl	%eax, -1624(%rbp)	# tmp596, inheritance
	jmp	.L1549	#
.L1673:
	.loc 1 5356 0
	leaq	-1488(%rbp), %rdx	#, tmp597
	movq	-1656(%rbp), %rax	# chain, tmp598
	movq	%rdx, %rsi	# tmp597,
	movq	%rax, %rdi	# tmp598,
	call	choose_reload_regs_init	#
	.loc 1 5376 0
	movl	$0, -1644(%rbp)	#, j
	jmp	.L1550	#
.L1663:
.LBB121:
	.loc 1 5378 0
	movl	-1644(%rbp), %eax	# j, tmp600
	cltq
	movzwl	reload_order(%rax,%rax), %eax	# reload_order, D.28328
	cwtl
	movl	%eax, -1576(%rbp)	# tmp601, r
	.loc 1 5379 0
	movq	$0, -1536(%rbp)	#, search_equiv
	.loc 1 5382 0
	movl	-1576(%rbp), %eax	# r, tmp603
	movslq	%eax, %rdx	# tmp603, tmp602
	movq	%rdx, %rax	# tmp602, tmp604
	addq	%rax, %rax	# tmp604
	addq	%rdx, %rax	# tmp602, tmp604
	salq	$2, %rax	#, tmp604
	addq	%rdx, %rax	# tmp602, tmp604
	salq	$3, %rax	#, tmp605
	addq	$rld+8, %rax	#, tmp606
	movq	(%rax), %rax	# rld[r_104].out, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1551	#,
	.loc 1 5382 0 is_stmt 0 discriminator 1
	movl	-1576(%rbp), %eax	# r, tmp608
	movslq	%eax, %rdx	# tmp608, tmp607
	movq	%rdx, %rax	# tmp607, tmp609
	addq	%rax, %rax	# tmp609
	addq	%rdx, %rax	# tmp607, tmp609
	salq	$2, %rax	#, tmp609
	addq	%rdx, %rax	# tmp607, tmp609
	salq	$3, %rax	#, tmp610
	addq	$rld, %rax	#, tmp611
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1551	#,
	.loc 1 5383 0 is_stmt 1
	movl	-1576(%rbp), %eax	# r, tmp613
	movslq	%eax, %rdx	# tmp613, tmp612
	movq	%rdx, %rax	# tmp612, tmp614
	addq	%rax, %rax	# tmp614
	addq	%rdx, %rax	# tmp612, tmp614
	salq	$2, %rax	#, tmp614
	addq	%rdx, %rax	# tmp612, tmp614
	salq	$3, %rax	#, tmp615
	addq	$rld+96, %rax	#, tmp616
	movzbl	(%rax), %eax	#, tmp619
	shrb	$2, %al	#, D.28334
	andl	$1, %eax	#, D.28334
	testb	%al, %al	# D.28334
	jne	.L1551	#,
	.loc 1 5384 0
	jmp	.L1552	#
.L1551:
	.loc 1 5391 0
	movl	-1576(%rbp), %eax	# r, tmp621
	movslq	%eax, %rdx	# tmp621, tmp620
	movq	%rdx, %rax	# tmp620, tmp622
	addq	%rax, %rax	# tmp622
	addq	%rdx, %rax	# tmp620, tmp622
	salq	$2, %rax	#, tmp622
	addq	%rdx, %rax	# tmp620, tmp622
	salq	$3, %rax	#, tmp623
	addq	$rld, %rax	#, tmp624
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1553	#,
	.loc 1 5391 0 is_stmt 0 discriminator 1
	movl	-1576(%rbp), %eax	# r, tmp626
	movslq	%eax, %rdx	# tmp626, tmp625
	movq	%rdx, %rax	# tmp625, tmp627
	addq	%rax, %rax	# tmp627
	addq	%rdx, %rax	# tmp625, tmp627
	salq	$2, %rax	#, tmp627
	addq	%rdx, %rax	# tmp625, tmp627
	salq	$3, %rax	#, tmp628
	addq	$rld+64, %rax	#, tmp629
	movq	(%rax), %rax	# rld[r_104].reg_rtx, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1553	#,
	.loc 1 5392 0 is_stmt 1
	movl	-1576(%rbp), %eax	# r, tmp631
	movslq	%eax, %rdx	# tmp631, tmp630
	movq	%rdx, %rax	# tmp630, tmp632
	addq	%rax, %rax	# tmp632
	addq	%rdx, %rax	# tmp630, tmp632
	salq	$2, %rax	#, tmp632
	addq	%rdx, %rax	# tmp630, tmp632
	salq	$3, %rax	#, tmp633
	addq	$rld+64, %rax	#, tmp634
	movq	(%rax), %rcx	# rld[r_104].reg_rtx, D.28332
	movl	-1576(%rbp), %eax	# r, tmp636
	movslq	%eax, %rdx	# tmp636, tmp635
	movq	%rdx, %rax	# tmp635, tmp637
	addq	%rax, %rax	# tmp637
	addq	%rdx, %rax	# tmp635, tmp637
	salq	$2, %rax	#, tmp637
	addq	%rdx, %rax	# tmp635, tmp637
	salq	$3, %rax	#, tmp638
	addq	$rld, %rax	#, tmp639
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movq	%rcx, %rsi	# D.28332,
	movq	%rax, %rdi	# D.28332,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28331
	jne	.L1554	#,
	.loc 1 5393 0
	movl	-1576(%rbp), %eax	# r, tmp641
	movslq	%eax, %rdx	# tmp641, tmp640
	movq	%rdx, %rax	# tmp640, tmp642
	addq	%rax, %rax	# tmp642
	addq	%rdx, %rax	# tmp640, tmp642
	salq	$2, %rax	#, tmp642
	addq	%rdx, %rax	# tmp640, tmp642
	salq	$3, %rax	#, tmp643
	addq	$rld+64, %rax	#, tmp644
	movq	(%rax), %rcx	# rld[r_104].reg_rtx, D.28332
	movl	-1576(%rbp), %eax	# r, tmp646
	movslq	%eax, %rdx	# tmp646, tmp645
	movq	%rdx, %rax	# tmp645, tmp647
	addq	%rax, %rax	# tmp647
	addq	%rdx, %rax	# tmp645, tmp647
	salq	$2, %rax	#, tmp647
	addq	%rdx, %rax	# tmp645, tmp647
	salq	$3, %rax	#, tmp648
	addq	$rld+8, %rax	#, tmp649
	movq	(%rax), %rax	# rld[r_104].out, D.28332
	movq	%rcx, %rsi	# D.28332,
	movq	%rax, %rdi	# D.28332,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28331
	je	.L1553	#,
	.loc 1 5394 0
	movl	-1576(%rbp), %eax	# r, tmp651
	movslq	%eax, %rdx	# tmp651, tmp650
	movq	%rdx, %rax	# tmp650, tmp652
	addq	%rax, %rax	# tmp652
	addq	%rdx, %rax	# tmp650, tmp652
	salq	$2, %rax	#, tmp652
	addq	%rdx, %rax	# tmp650, tmp652
	salq	$3, %rax	#, tmp653
	addq	$rld, %rax	#, tmp654
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _117->code, D.28335
	cmpw	$66, %ax	#, D.28335
	je	.L1553	#,
	.loc 1 5395 0
	movl	-1576(%rbp), %eax	# r, tmp656
	movslq	%eax, %rdx	# tmp656, tmp655
	movq	%rdx, %rax	# tmp655, tmp657
	addq	%rax, %rax	# tmp657
	addq	%rdx, %rax	# tmp655, tmp657
	salq	$2, %rax	#, tmp657
	addq	%rdx, %rax	# tmp655, tmp657
	salq	$3, %rax	#, tmp658
	addq	$rld, %rax	#, tmp659
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movq	%rax, %rdi	# D.28332,
	call	true_regnum	#
	cmpl	$52, %eax	#, D.28331
	jg	.L1553	#,
.L1554:
	.loc 1 5396 0
	jmp	.L1552	#
.L1553:
	.loc 1 5428 0
	cmpl	$0, -1624(%rbp)	#, inheritance
	je	.L1555	#,
.LBB122:
	.loc 1 5430 0
	movl	$0, -1620(%rbp)	#, byte
	.loc 1 5431 0
	movl	$-1, -1616(%rbp)	#, regno
	.loc 1 5432 0
	movl	$0, -1612(%rbp)	#, mode
	.loc 1 5434 0
	movl	-1576(%rbp), %eax	# r, tmp661
	movslq	%eax, %rdx	# tmp661, tmp660
	movq	%rdx, %rax	# tmp660, tmp662
	addq	%rax, %rax	# tmp662
	addq	%rdx, %rax	# tmp660, tmp662
	salq	$2, %rax	#, tmp662
	addq	%rdx, %rax	# tmp660, tmp662
	salq	$3, %rax	#, tmp663
	addq	$rld, %rax	#, tmp664
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1556	#,
	.loc 1 5436 0
	movl	-1576(%rbp), %eax	# r, tmp666
	movslq	%eax, %rdx	# tmp666, tmp665
	movq	%rdx, %rax	# tmp665, tmp667
	addq	%rax, %rax	# tmp667
	addq	%rdx, %rax	# tmp665, tmp667
	salq	$2, %rax	#, tmp667
	addq	%rdx, %rax	# tmp665, tmp667
	salq	$3, %rax	#, tmp668
	addq	$rld, %rax	#, tmp669
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _125->code, D.28335
	cmpw	$61, %ax	#, D.28335
	jne	.L1557	#,
	.loc 1 5438 0
	movl	-1576(%rbp), %eax	# r, tmp671
	movslq	%eax, %rdx	# tmp671, tmp670
	movq	%rdx, %rax	# tmp670, tmp672
	addq	%rax, %rax	# tmp672
	addq	%rdx, %rax	# tmp670, tmp672
	salq	$2, %rax	#, tmp672
	addq	%rdx, %rax	# tmp670, tmp672
	salq	$3, %rax	#, tmp673
	addq	$rld, %rax	#, tmp674
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movl	8(%rax), %eax	# _127->fld[0].rtuint, D.28329
	movl	%eax, -1616(%rbp)	# D.28329, regno
	.loc 1 5439 0
	movl	-1576(%rbp), %eax	# r, tmp676
	movslq	%eax, %rdx	# tmp676, tmp675
	movq	%rdx, %rax	# tmp675, tmp677
	addq	%rax, %rax	# tmp677
	addq	%rdx, %rax	# tmp675, tmp677
	salq	$2, %rax	#, tmp677
	addq	%rdx, %rax	# tmp675, tmp677
	salq	$3, %rax	#, tmp678
	addq	$rld, %rax	#, tmp679
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzbl	2(%rax), %eax	# _130->mode, D.28336
	movzbl	%al, %eax	# D.28336, tmp680
	movl	%eax, -1612(%rbp)	# tmp680, mode
	jmp	.L1556	#
.L1557:
	.loc 1 5441 0
	movl	-1576(%rbp), %eax	# r, tmp682
	movslq	%eax, %rdx	# tmp682, tmp681
	movq	%rdx, %rax	# tmp681, tmp683
	addq	%rax, %rax	# tmp683
	addq	%rdx, %rax	# tmp681, tmp683
	salq	$2, %rax	#, tmp683
	addq	%rdx, %rax	# tmp681, tmp683
	salq	$3, %rax	#, tmp684
	addq	$rld+40, %rax	#, tmp685
	movq	(%rax), %rax	# rld[r_104].in_reg, D.28332
	movzwl	(%rax), %eax	# _133->code, D.28335
	cmpw	$61, %ax	#, D.28335
	jne	.L1558	#,
	.loc 1 5443 0
	movl	-1576(%rbp), %eax	# r, tmp687
	movslq	%eax, %rdx	# tmp687, tmp686
	movq	%rdx, %rax	# tmp686, tmp688
	addq	%rax, %rax	# tmp688
	addq	%rdx, %rax	# tmp686, tmp688
	salq	$2, %rax	#, tmp688
	addq	%rdx, %rax	# tmp686, tmp688
	salq	$3, %rax	#, tmp689
	addq	$rld+40, %rax	#, tmp690
	movq	(%rax), %rax	# rld[r_104].in_reg, D.28332
	movl	8(%rax), %eax	# _135->fld[0].rtuint, D.28329
	movl	%eax, -1616(%rbp)	# D.28329, regno
	.loc 1 5444 0
	movl	-1576(%rbp), %eax	# r, tmp692
	movslq	%eax, %rdx	# tmp692, tmp691
	movq	%rdx, %rax	# tmp691, tmp693
	addq	%rax, %rax	# tmp693
	addq	%rdx, %rax	# tmp691, tmp693
	salq	$2, %rax	#, tmp693
	addq	%rdx, %rax	# tmp691, tmp693
	salq	$3, %rax	#, tmp694
	addq	$rld+40, %rax	#, tmp695
	movq	(%rax), %rax	# rld[r_104].in_reg, D.28332
	movzbl	2(%rax), %eax	# _138->mode, D.28336
	movzbl	%al, %eax	# D.28336, tmp696
	movl	%eax, -1612(%rbp)	# tmp696, mode
	jmp	.L1556	#
.L1558:
	.loc 1 5446 0
	movl	-1576(%rbp), %eax	# r, tmp698
	movslq	%eax, %rdx	# tmp698, tmp697
	movq	%rdx, %rax	# tmp697, tmp699
	addq	%rax, %rax	# tmp699
	addq	%rdx, %rax	# tmp697, tmp699
	salq	$2, %rax	#, tmp699
	addq	%rdx, %rax	# tmp697, tmp699
	salq	$3, %rax	#, tmp700
	addq	$rld+40, %rax	#, tmp701
	movq	(%rax), %rax	# rld[r_104].in_reg, D.28332
	movzwl	(%rax), %eax	# _141->code, D.28335
	cmpw	$63, %ax	#, D.28335
	jne	.L1556	#,
	.loc 1 5447 0
	movl	-1576(%rbp), %eax	# r, tmp703
	movslq	%eax, %rdx	# tmp703, tmp702
	movq	%rdx, %rax	# tmp702, tmp704
	addq	%rax, %rax	# tmp704
	addq	%rdx, %rax	# tmp702, tmp704
	salq	$2, %rax	#, tmp704
	addq	%rdx, %rax	# tmp702, tmp704
	salq	$3, %rax	#, tmp705
	addq	$rld+40, %rax	#, tmp706
	movq	(%rax), %rax	# rld[r_104].in_reg, D.28332
	movq	8(%rax), %rax	# _143->fld[0].rtx, D.28332
	movzwl	(%rax), %eax	# _144->code, D.28335
	cmpw	$61, %ax	#, D.28335
	jne	.L1556	#,
	.loc 1 5449 0
	movl	-1576(%rbp), %eax	# r, tmp708
	movslq	%eax, %rdx	# tmp708, tmp707
	movq	%rdx, %rax	# tmp707, tmp709
	addq	%rax, %rax	# tmp709
	addq	%rdx, %rax	# tmp707, tmp709
	salq	$2, %rax	#, tmp709
	addq	%rdx, %rax	# tmp707, tmp709
	salq	$3, %rax	#, tmp710
	addq	$rld+40, %rax	#, tmp711
	movq	(%rax), %rax	# rld[r_104].in_reg, D.28332
	movl	16(%rax), %eax	# _146->fld[1].rtuint, D.28329
	movl	%eax, -1620(%rbp)	# D.28329, byte
	.loc 1 5450 0
	movl	-1576(%rbp), %eax	# r, tmp713
	movslq	%eax, %rdx	# tmp713, tmp712
	movq	%rdx, %rax	# tmp712, tmp714
	addq	%rax, %rax	# tmp714
	addq	%rdx, %rax	# tmp712, tmp714
	salq	$2, %rax	#, tmp714
	addq	%rdx, %rax	# tmp712, tmp714
	salq	$3, %rax	#, tmp715
	addq	$rld+40, %rax	#, tmp716
	movq	(%rax), %rax	# rld[r_104].in_reg, D.28332
	movq	8(%rax), %rax	# _149->fld[0].rtx, D.28332
	movl	8(%rax), %eax	# _150->fld[0].rtuint, D.28329
	movl	%eax, -1616(%rbp)	# D.28329, regno
	.loc 1 5451 0
	cmpl	$52, -1616(%rbp)	#, regno
	jg	.L1559	#,
	.loc 1 5452 0
	movl	-1576(%rbp), %eax	# r, tmp718
	movslq	%eax, %rdx	# tmp718, tmp717
	movq	%rdx, %rax	# tmp717, tmp719
	addq	%rax, %rax	# tmp719
	addq	%rdx, %rax	# tmp717, tmp719
	salq	$2, %rax	#, tmp719
	addq	%rdx, %rax	# tmp717, tmp719
	salq	$3, %rax	#, tmp720
	addq	$rld+40, %rax	#, tmp721
	movq	(%rax), %rax	# rld[r_104].in_reg, D.28332
	movq	%rax, %rdi	# D.28332,
	call	subreg_regno	#
	movl	%eax, -1616(%rbp)	# D.28329, regno
.L1559:
	.loc 1 5453 0
	movl	-1576(%rbp), %eax	# r, tmp723
	movslq	%eax, %rdx	# tmp723, tmp722
	movq	%rdx, %rax	# tmp722, tmp724
	addq	%rax, %rax	# tmp724
	addq	%rdx, %rax	# tmp722, tmp724
	salq	$2, %rax	#, tmp724
	addq	%rdx, %rax	# tmp722, tmp724
	salq	$3, %rax	#, tmp725
	addq	$rld+40, %rax	#, tmp726
	movq	(%rax), %rax	# rld[r_104].in_reg, D.28332
	movzbl	2(%rax), %eax	# _156->mode, D.28336
	movzbl	%al, %eax	# D.28336, tmp727
	movl	%eax, -1612(%rbp)	# tmp727, mode
.L1556:
	.loc 1 5476 0
	cmpl	$0, -1616(%rbp)	#, regno
	js	.L1555	#,
	.loc 1 5476 0 is_stmt 0 discriminator 1
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.915
	movl	-1616(%rbp), %edx	# regno, tmp728
	movslq	%edx, %rdx	# tmp728, D.28337
	salq	$3, %rdx	#, D.28337
	addq	%rdx, %rax	# D.28337, D.28338
	movq	(%rax), %rax	# *_162, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1555	#,
.LBB123:
	.loc 1 5478 0 is_stmt 1
	movl	-1576(%rbp), %eax	# r, tmp730
	movslq	%eax, %rdx	# tmp730, tmp729
	movq	%rdx, %rax	# tmp729, tmp731
	addq	%rax, %rax	# tmp731
	addq	%rdx, %rax	# tmp729, tmp731
	salq	$2, %rax	#, tmp731
	addq	%rdx, %rax	# tmp729, tmp731
	salq	$3, %rax	#, tmp732
	addq	$rld+16, %rax	#, tmp733
	movl	(%rax), %eax	# rld[r_104].class, tmp734
	movl	%eax, -1572(%rbp)	# tmp734, class
	.loc 1 5479 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.916
	movl	-1616(%rbp), %edx	# regno, tmp735
	movslq	%edx, %rdx	# tmp735, D.28337
	salq	$3, %rdx	#, D.28337
	addq	%rdx, %rax	# D.28337, D.28338
	movq	(%rax), %rax	# *_168, tmp736
	movq	%rax, -1504(%rbp)	# tmp736, last_reg
	.loc 1 5482 0
	movq	-1504(%rbp), %rax	# last_reg, tmp737
	movl	8(%rax), %eax	# last_reg_169->fld[0].rtuint, D.28329
	movl	%eax, -1648(%rbp)	# D.28329, i
	.loc 1 5483 0
	movl	-1620(%rbp), %edx	# byte, byte.917
	movq	-1504(%rbp), %rax	# last_reg, tmp738
	movzbl	2(%rax), %eax	# last_reg_169->mode, D.28336
	movzbl	%al, %esi	# D.28336, D.28339
	movl	-1648(%rbp), %eax	# i, i.918
	movl	-1612(%rbp), %ecx	# mode, tmp739
	movl	%eax, %edi	# i.918,
	call	subreg_regno_offset	#
	movl	-1648(%rbp), %edx	# i, i.919
	addl	%edx, %eax	# i.919, D.28329
	movl	%eax, -1648(%rbp)	# D.28329, i
	.loc 1 5484 0
	movl	-1648(%rbp), %eax	# i, tmp741
	cltq
	movl	regclass_map(,%rax,4), %eax	# regclass_map, tmp742
	movl	%eax, -1568(%rbp)	# tmp742, last_class
	.loc 1 5486 0
	cmpl	$0, -1620(%rbp)	#, byte
	jne	.L1560	#,
	.loc 1 5487 0
	movl	-1612(%rbp), %eax	# mode, tmp743
	movl	%eax, -1608(%rbp)	# tmp743, need_mode
	jmp	.L1561	#
.L1560:
	.loc 1 5491 0
	movl	-1612(%rbp), %eax	# mode, mode.920
	.loc 1 5490 0
	cltq
	movl	mode_class(,%rax,4), %edx	# mode_class, D.28340
	movl	-1612(%rbp), %eax	# mode, mode.921
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28336
	movzbl	%al, %ecx	# D.28336, D.28331
	movl	-1620(%rbp), %eax	# byte, tmp746
	addl	%ecx, %eax	# D.28331, D.28331
	movl	%edx, %esi	# D.28340,
	movl	%eax, %edi	# D.28329,
	call	smallest_mode_for_size	#
	movl	%eax, -1608(%rbp)	# tmp747, need_mode
.L1561:
	.loc 1 5502 0
	movq	-1504(%rbp), %rax	# last_reg, tmp748
	movzbl	2(%rax), %eax	# last_reg_169->mode, D.28336
	movzbl	%al, %eax	# D.28336, D.28331
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28336
	.loc 1 5503 0
	movl	-1608(%rbp), %eax	# need_mode, need_mode.922
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28336
	.loc 1 5493 0
	cmpb	%al, %dl	# D.28336, D.28336
	jb	.L1555	#,
	.loc 1 5505 0
	movl	-1648(%rbp), %eax	# i, tmp752
	cltq
	movl	reg_reloaded_contents(,%rax,4), %eax	# reg_reloaded_contents, D.28331
	cmpl	-1616(%rbp), %eax	# regno, D.28331
	jne	.L1555	#,
	.loc 1 5506 0
	movq	reg_reloaded_valid(%rip), %rdx	# reg_reloaded_valid, reg_reloaded_valid.923
	movl	-1648(%rbp), %eax	# i, tmp753
	movl	%eax, %ecx	# tmp753, tmp1610
	shrq	%cl, %rdx	# tmp1610, D.28337
	movq	%rdx, %rax	# D.28337, D.28337
	andl	$1, %eax	#, D.28337
	testq	%rax, %rax	# D.28337
	je	.L1555	#,
	.loc 1 5507 0
	movl	-1576(%rbp), %eax	# r, tmp755
	movslq	%eax, %rdx	# tmp755, tmp754
	movq	%rdx, %rax	# tmp754, tmp756
	addq	%rax, %rax	# tmp756
	addq	%rdx, %rax	# tmp754, tmp756
	salq	$2, %rax	#, tmp756
	addq	%rdx, %rax	# tmp754, tmp756
	salq	$3, %rax	#, tmp757
	addq	$rld+16, %rax	#, tmp758
	movl	12(%rax), %edx	# rld[r_104].mode, D.28339
	movl	-1648(%rbp), %eax	# i, tmp759
	movl	%edx, %esi	# D.28339,
	movl	%eax, %edi	# tmp759,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.28331
	je	.L1555	#,
	.loc 1 5508 0
	movl	-1572(%rbp), %eax	# class, class.924
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.28337
	movl	-1648(%rbp), %eax	# i, tmp761
	movl	%eax, %ecx	# tmp761, tmp1612
	shrq	%cl, %rdx	# tmp1612, D.28337
	movq	%rdx, %rax	# D.28337, D.28337
	andl	$1, %eax	#, D.28337
	testq	%rax, %rax	# D.28337
	jne	.L1562	#,
	.loc 1 5513 0
	movl	-1572(%rbp), %edx	# class, tmp762
	movl	-1568(%rbp), %ecx	# last_class, tmp763
	movl	-1612(%rbp), %eax	# mode, tmp764
	movl	%ecx, %esi	# tmp763,
	movl	%eax, %edi	# tmp764,
	call	ix86_register_move_cost	#
	movl	%eax, %ebx	#, D.28331
	.loc 1 5514 0
	movl	-1572(%rbp), %ecx	# class, tmp765
	movl	-1612(%rbp), %eax	# mode, tmp766
	movl	$1, %edx	#,
	movl	%ecx, %esi	# tmp765,
	movl	%eax, %edi	# tmp766,
	call	ix86_memory_move_cost	#
	.loc 1 5513 0
	cmpl	%eax, %ebx	# D.28331, D.28331
	jge	.L1555	#,
	.loc 1 5521 0
	movl	-1612(%rbp), %edx	# mode, tmp767
	movl	-1572(%rbp), %esi	# class, tmp768
	movl	-1568(%rbp), %eax	# last_class, tmp769
	movl	$1, %ecx	#,
	movl	%eax, %edi	# tmp769,
	call	ix86_secondary_memory_needed	#
	testl	%eax, %eax	# D.28331
	jne	.L1555	#,
.L1562:
	.loc 1 5526 0
	movl	-1576(%rbp), %eax	# r, tmp771
	movslq	%eax, %rdx	# tmp771, tmp770
	movq	%rdx, %rax	# tmp770, tmp772
	addq	%rax, %rax	# tmp772
	addq	%rdx, %rax	# tmp770, tmp772
	salq	$2, %rax	#, tmp772
	addq	%rdx, %rax	# tmp770, tmp772
	salq	$3, %rax	#, tmp773
	addq	$rld+32, %rax	#, tmp774
	movl	(%rax), %eax	# rld[r_104].nregs, D.28329
	cmpl	-1640(%rbp), %eax	# max_group_size, D.28329
	je	.L1563	#,
	.loc 1 5527 0
	movl	-1636(%rbp), %eax	# group_class, group_class.925
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.28337
	movl	-1648(%rbp), %eax	# i, tmp776
	movl	%eax, %ecx	# tmp776, tmp1614
	shrq	%cl, %rdx	# tmp1614, D.28337
	movq	%rdx, %rax	# D.28337, D.28337
	andl	$1, %eax	#, D.28337
	testq	%rax, %rax	# D.28337
	jne	.L1555	#,
.L1563:
	.loc 1 5529 0
	movq	const_int_rtx+512(%rip), %r9	# const_int_rtx, D.28332
	movl	-1576(%rbp), %eax	# r, tmp778
	movslq	%eax, %rdx	# tmp778, tmp777
	movq	%rdx, %rax	# tmp777, tmp779
	addq	%rax, %rax	# tmp779
	addq	%rdx, %rax	# tmp777, tmp779
	salq	$2, %rax	#, tmp779
	addq	%rdx, %rax	# tmp777, tmp779
	salq	$3, %rax	#, tmp780
	addq	$rld, %rax	#, tmp781
	movq	(%rax), %r8	# rld[r_104].in, D.28332
	movl	-1576(%rbp), %eax	# r, tmp783
	movslq	%eax, %rdx	# tmp783, tmp782
	movq	%rdx, %rax	# tmp782, tmp784
	addq	%rax, %rax	# tmp784
	addq	%rdx, %rax	# tmp782, tmp784
	salq	$2, %rax	#, tmp784
	addq	%rdx, %rax	# tmp782, tmp784
	salq	$3, %rax	#, tmp785
	addq	$rld+80, %rax	#, tmp786
	movl	12(%rax), %ecx	# rld[r_104].when_needed, D.28341
	movl	-1576(%rbp), %eax	# r, tmp788
	movslq	%eax, %rdx	# tmp788, tmp787
	movq	%rdx, %rax	# tmp787, tmp789
	addq	%rax, %rax	# tmp789
	addq	%rdx, %rax	# tmp787, tmp789
	salq	$2, %rax	#, tmp789
	addq	%rdx, %rax	# tmp787, tmp789
	salq	$3, %rax	#, tmp790
	addq	$rld+64, %rax	#, tmp791
	movl	8(%rax), %edi	# rld[r_104].opnum, D.28331
	movl	-1576(%rbp), %eax	# r, tmp793
	movslq	%eax, %rdx	# tmp793, tmp792
	movq	%rdx, %rax	# tmp792, tmp794
	addq	%rax, %rax	# tmp794
	addq	%rdx, %rax	# tmp792, tmp794
	salq	$2, %rax	#, tmp794
	addq	%rdx, %rax	# tmp792, tmp794
	salq	$3, %rax	#, tmp795
	addq	$rld+16, %rax	#, tmp796
	movl	12(%rax), %esi	# rld[r_104].mode, D.28339
	movl	-1648(%rbp), %eax	# i, tmp797
	movl	$1, 8(%rsp)	#,
	movl	-1576(%rbp), %edx	# r, tmp798
	movl	%edx, (%rsp)	# tmp798,
	movl	%edi, %edx	# D.28331,
	movl	%eax, %edi	# tmp797,
	call	free_for_value_p	#
	testl	%eax, %eax	# D.28331
	je	.L1555	#,
.LBB124:
	.loc 1 5535 0
	cmpl	$7, -1648(%rbp)	#, i
	jle	.L1564	#,
	.loc 1 5535 0 is_stmt 0 discriminator 1
	cmpl	$15, -1648(%rbp)	#, i
	jle	.L1565	#,
.L1564:
	.loc 1 5535 0 discriminator 2
	cmpl	$20, -1648(%rbp)	#, i
	jle	.L1566	#,
	.loc 1 5535 0 discriminator 1
	cmpl	$28, -1648(%rbp)	#, i
	jle	.L1565	#,
.L1566:
	.loc 1 5535 0 discriminator 2
	cmpl	$44, -1648(%rbp)	#, i
	jle	.L1567	#,
	.loc 1 5535 0 discriminator 1
	cmpl	$52, -1648(%rbp)	#, i
	jle	.L1565	#,
.L1567:
	.loc 1 5535 0 discriminator 2
	cmpl	$28, -1648(%rbp)	#, i
	jle	.L1568	#,
	.loc 1 5535 0 discriminator 1
	cmpl	$36, -1648(%rbp)	#, i
	jg	.L1568	#,
.L1565:
	movl	-1576(%rbp), %eax	# r, tmp800
	movslq	%eax, %rdx	# tmp800, tmp799
	movq	%rdx, %rax	# tmp799, tmp801
	addq	%rax, %rax	# tmp801
	addq	%rdx, %rax	# tmp799, tmp801
	salq	$2, %rax	#, tmp801
	addq	%rdx, %rax	# tmp799, tmp801
	salq	$3, %rax	#, tmp802
	addq	$rld+16, %rax	#, tmp803
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28340
	cmpl	$5, %eax	#, D.28340
	je	.L1569	#,
	.loc 1 5535 0 discriminator 2
	movl	-1576(%rbp), %eax	# r, tmp806
	movslq	%eax, %rdx	# tmp806, tmp805
	movq	%rdx, %rax	# tmp805, tmp807
	addq	%rax, %rax	# tmp807
	addq	%rdx, %rax	# tmp805, tmp807
	salq	$2, %rax	#, tmp807
	addq	%rdx, %rax	# tmp805, tmp807
	salq	$3, %rax	#, tmp808
	addq	$rld+16, %rax	#, tmp809
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28340
	cmpl	$6, %eax	#, D.28340
	jne	.L1570	#,
.L1569:
	.loc 1 5535 0 discriminator 1
	movl	$2, %eax	#, iftmp.927
	jmp	.L1571	#
.L1570:
	movl	$1, %eax	#, iftmp.927
.L1571:
	.loc 1 5535 0 discriminator 3
	jmp	.L1572	#
.L1568:
	.loc 1 5535 0 discriminator 2
	movl	-1576(%rbp), %eax	# r, tmp812
	movslq	%eax, %rdx	# tmp812, tmp811
	movq	%rdx, %rax	# tmp811, tmp813
	addq	%rax, %rax	# tmp813
	addq	%rdx, %rax	# tmp811, tmp813
	salq	$2, %rax	#, tmp813
	addq	%rdx, %rax	# tmp811, tmp813
	salq	$3, %rax	#, tmp814
	addq	$rld+16, %rax	#, tmp815
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cmpl	$18, %eax	#, D.28339
	jne	.L1573	#,
	.loc 1 5535 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.930
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1574	#,
	movl	$2, %eax	#, iftmp.929
	jmp	.L1572	#
.L1574:
	.loc 1 5535 0 discriminator 2
	movl	$3, %eax	#, iftmp.929
	jmp	.L1572	#
.L1573:
	movl	-1576(%rbp), %eax	# r, tmp817
	movslq	%eax, %rdx	# tmp817, tmp816
	movq	%rdx, %rax	# tmp816, tmp818
	addq	%rax, %rax	# tmp818
	addq	%rdx, %rax	# tmp816, tmp818
	salq	$2, %rax	#, tmp818
	addq	%rdx, %rax	# tmp816, tmp818
	salq	$3, %rax	#, tmp819
	addq	$rld+16, %rax	#, tmp820
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cmpl	$24, %eax	#, D.28339
	jne	.L1577	#,
	.loc 1 5535 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.933
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1578	#,
	movl	$4, %eax	#, iftmp.932
	jmp	.L1572	#
.L1578:
	.loc 1 5535 0 discriminator 2
	movl	$6, %eax	#, iftmp.932
	jmp	.L1572	#
.L1577:
	movl	-1576(%rbp), %eax	# r, tmp822
	movslq	%eax, %rdx	# tmp822, tmp821
	movq	%rdx, %rax	# tmp821, tmp823
	addq	%rax, %rax	# tmp823
	addq	%rdx, %rax	# tmp821, tmp823
	salq	$2, %rax	#, tmp823
	addq	%rdx, %rax	# tmp821, tmp823
	salq	$3, %rax	#, tmp824
	addq	$rld+16, %rax	#, tmp825
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28336
	movzbl	%al, %edx	# D.28336, D.28331
	movl	target_flags(%rip), %eax	# target_flags, target_flags.935
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1581	#,
	.loc 1 5535 0 discriminator 1
	movl	$8, %eax	#, iftmp.934
	jmp	.L1582	#
.L1581:
	.loc 1 5535 0 discriminator 2
	movl	$4, %eax	#, iftmp.934
.L1582:
	.loc 1 5535 0 discriminator 3
	addl	%edx, %eax	# D.28331, D.28331
	subl	$1, %eax	#, D.28331
	movl	target_flags(%rip), %edx	# target_flags, target_flags.937
	andl	$33554432, %edx	#, D.28331
	testl	%edx, %edx	# D.28331
	je	.L1583	#,
	.loc 1 5535 0 discriminator 1
	movl	$8, %ebx	#, iftmp.936
	jmp	.L1584	#
.L1583:
	.loc 1 5535 0 discriminator 2
	movl	$4, %ebx	#, iftmp.936
.L1584:
	.loc 1 5535 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.936
.L1572:
	movl	%eax, -1564(%rbp)	# iftmp.926, nr
	.loc 1 5538 0 is_stmt 1 discriminator 3
	movl	$1, -1604(%rbp)	#, k
	jmp	.L1585	#
.L1587:
	.loc 1 5539 0
	movl	-1604(%rbp), %eax	# k, tmp829
	movl	-1648(%rbp), %edx	# i, tmp830
	addl	%edx, %eax	# tmp830, D.28331
	cltq
	movl	reg_reloaded_contents(,%rax,4), %eax	# reg_reloaded_contents, D.28331
	cmpl	-1616(%rbp), %eax	# regno, D.28331
	jne	.L1586	#,
	.loc 1 5540 0
	movq	reg_reloaded_valid(%rip), %rdx	# reg_reloaded_valid, reg_reloaded_valid.938
	movl	-1604(%rbp), %eax	# k, tmp832
	movl	-1648(%rbp), %ecx	# i, tmp833
	addl	%ecx, %eax	# tmp833, D.28331
	movl	%eax, %ecx	# D.28331, tmp1617
	shrq	%cl, %rdx	# tmp1617, D.28337
	movq	%rdx, %rax	# D.28337, D.28337
	andl	$1, %eax	#, D.28337
	testq	%rax, %rax	# D.28337
	je	.L1586	#,
	.loc 1 5538 0
	addl	$1, -1604(%rbp)	#, k
.L1585:
	.loc 1 5538 0 is_stmt 0 discriminator 1
	movl	-1604(%rbp), %eax	# k, tmp834
	cmpl	-1564(%rbp), %eax	# nr, tmp834
	jl	.L1587	#,
.L1586:
	.loc 1 5543 0 is_stmt 1
	movl	-1604(%rbp), %eax	# k, tmp835
	cmpl	-1564(%rbp), %eax	# nr, tmp835
	jne	.L1555	#,
.LBB125:
	.loc 1 5548 0
	movq	-1504(%rbp), %rax	# last_reg, tmp836
	movzbl	2(%rax), %eax	# last_reg_169->mode, D.28336
	movzbl	%al, %eax	# D.28336, D.28329
	.loc 1 5549 0
	cmpl	-1612(%rbp), %eax	# mode, D.28329
	je	.L1588	#,
	.loc 1 5549 0 is_stmt 0 discriminator 1
	movl	-1648(%rbp), %edx	# i, tmp837
	movl	-1612(%rbp), %eax	# mode, tmp838
	movl	%edx, %esi	# tmp837,
	movl	%eax, %edi	# tmp838,
	call	gen_rtx_REG	#
	jmp	.L1589	#
.L1588:
	.loc 1 5549 0 discriminator 2
	movq	-1504(%rbp), %rax	# last_reg, iftmp.939
.L1589:
	.loc 1 5548 0 is_stmt 1
	movq	%rax, -1504(%rbp)	# iftmp.939, last_reg
	.loc 1 5551 0
	movl	$0, -1596(%rbp)	#, bad_for_class
	.loc 1 5552 0
	movl	$0, -1604(%rbp)	#, k
	jmp	.L1590	#
.L1591:
	.loc 1 5553 0 discriminator 2
	movl	-1576(%rbp), %eax	# r, tmp840
	movslq	%eax, %rdx	# tmp840, tmp839
	movq	%rdx, %rax	# tmp839, tmp841
	addq	%rax, %rax	# tmp841
	addq	%rdx, %rax	# tmp839, tmp841
	salq	$2, %rax	#, tmp841
	addq	%rdx, %rax	# tmp839, tmp841
	salq	$3, %rax	#, tmp842
	addq	$rld+16, %rax	#, tmp843
	movl	(%rax), %eax	# rld[r_104].class, D.28330
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.28337
	movl	-1604(%rbp), %eax	# k, tmp845
	movl	-1648(%rbp), %ecx	# i, tmp846
	addl	%ecx, %eax	# tmp846, D.28331
	movl	%eax, %ecx	# D.28331, tmp1619
	shrq	%cl, %rdx	# tmp1619, D.28337
	movq	%rdx, %rax	# D.28337, D.28337
	andl	$1, %eax	#, D.28337
	testq	%rax, %rax	# D.28337
	sete	%al	#, D.28333
	movzbl	%al, %eax	# D.28333, D.28331
	orl	%eax, -1596(%rbp)	# D.28331, bad_for_class
	.loc 1 5552 0 discriminator 2
	addl	$1, -1604(%rbp)	#, k
.L1590:
	.loc 1 5552 0 is_stmt 0 discriminator 1
	movl	-1604(%rbp), %eax	# k, tmp847
	cmpl	-1564(%rbp), %eax	# nr, tmp847
	jl	.L1591	#,
	.loc 1 5563 0 is_stmt 1
	movl	$0, -1600(%rbp)	#, i1
	jmp	.L1592	#
.L1595:
	.loc 1 5565 0
	movl	-1600(%rbp), %eax	# i1, tmp849
	cltq
	movq	reload_earlyclobbers(,%rax,8), %rdx	# reload_earlyclobbers, D.28332
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.940
	movl	-1616(%rbp), %ecx	# regno, tmp850
	movslq	%ecx, %rcx	# tmp850, D.28337
	salq	$3, %rcx	#, D.28337
	addq	%rcx, %rax	# D.28337, D.28338
	movq	(%rax), %rax	# *_289, D.28332
	movq	%rdx, %rsi	# D.28332,
	movq	%rax, %rdi	# D.28332,
	call	reg_overlap_mentioned_for_reload_p	#
	.loc 1 5564 0
	testl	%eax, %eax	# D.28331
	je	.L1593	#,
	.loc 1 5567 0
	jmp	.L1594	#
.L1593:
	.loc 1 5563 0
	addl	$1, -1600(%rbp)	#, i1
.L1592:
	.loc 1 5563 0 is_stmt 0 discriminator 1
	movl	n_earlyclobbers(%rip), %eax	# n_earlyclobbers, n_earlyclobbers.941
	cmpl	%eax, -1600(%rbp)	# n_earlyclobbers.941, i1
	jl	.L1595	#,
.L1594:
	.loc 1 5569 0 is_stmt 1
	movl	n_earlyclobbers(%rip), %eax	# n_earlyclobbers, n_earlyclobbers.942
	cmpl	%eax, -1600(%rbp)	# n_earlyclobbers.942, i1
	jne	.L1596	#,
	.loc 1 5570 0
	movl	-1576(%rbp), %eax	# r, tmp852
	movslq	%eax, %rdx	# tmp852, tmp851
	movq	%rdx, %rax	# tmp851, tmp853
	addq	%rax, %rax	# tmp853
	addq	%rdx, %rax	# tmp851, tmp853
	salq	$2, %rax	#, tmp853
	addq	%rdx, %rax	# tmp851, tmp853
	salq	$3, %rax	#, tmp854
	addq	$rld+8, %rax	#, tmp855
	movq	(%rax), %r9	# rld[r_104].out, D.28332
	movl	-1576(%rbp), %eax	# r, tmp857
	movslq	%eax, %rdx	# tmp857, tmp856
	movq	%rdx, %rax	# tmp856, tmp858
	addq	%rax, %rax	# tmp858
	addq	%rdx, %rax	# tmp856, tmp858
	salq	$2, %rax	#, tmp858
	addq	%rdx, %rax	# tmp856, tmp858
	salq	$3, %rax	#, tmp859
	addq	$rld, %rax	#, tmp860
	movq	(%rax), %r8	# rld[r_104].in, D.28332
	movl	-1576(%rbp), %eax	# r, tmp862
	movslq	%eax, %rdx	# tmp862, tmp861
	movq	%rdx, %rax	# tmp861, tmp863
	addq	%rax, %rax	# tmp863
	addq	%rdx, %rax	# tmp861, tmp863
	salq	$2, %rax	#, tmp863
	addq	%rdx, %rax	# tmp861, tmp863
	salq	$3, %rax	#, tmp864
	addq	$rld+80, %rax	#, tmp865
	movl	12(%rax), %ecx	# rld[r_104].when_needed, D.28341
	movl	-1576(%rbp), %eax	# r, tmp867
	movslq	%eax, %rdx	# tmp867, tmp866
	movq	%rdx, %rax	# tmp866, tmp868
	addq	%rax, %rax	# tmp868
	addq	%rdx, %rax	# tmp866, tmp868
	salq	$2, %rax	#, tmp868
	addq	%rdx, %rax	# tmp866, tmp868
	salq	$3, %rax	#, tmp869
	addq	$rld+64, %rax	#, tmp870
	movl	8(%rax), %edi	# rld[r_104].opnum, D.28331
	movl	-1576(%rbp), %eax	# r, tmp872
	movslq	%eax, %rdx	# tmp872, tmp871
	movq	%rdx, %rax	# tmp871, tmp873
	addq	%rax, %rax	# tmp873
	addq	%rdx, %rax	# tmp871, tmp873
	salq	$2, %rax	#, tmp873
	addq	%rdx, %rax	# tmp871, tmp873
	salq	$3, %rax	#, tmp874
	addq	$rld+16, %rax	#, tmp875
	movl	12(%rax), %esi	# rld[r_104].mode, D.28339
	movl	-1648(%rbp), %eax	# i, tmp876
	movl	$1, 8(%rsp)	#,
	movl	-1576(%rbp), %edx	# r, tmp877
	movl	%edx, (%rsp)	# tmp877,
	movl	%edi, %edx	# D.28331,
	movl	%eax, %edi	# tmp876,
	call	free_for_value_p	#
	testl	%eax, %eax	# D.28331
	je	.L1596	#,
	.loc 1 5575 0
	movq	reg_used_in_insn(%rip), %rdx	# reg_used_in_insn, reg_used_in_insn.943
	movl	-1648(%rbp), %eax	# i, tmp878
	movl	%eax, %ecx	# tmp878, tmp1621
	shrq	%cl, %rdx	# tmp1621, D.28337
	movq	%rdx, %rax	# D.28337, D.28337
	andl	$1, %eax	#, D.28337
	testq	%rax, %rax	# D.28337
	je	.L1597	#,
	.loc 1 5576 0
	movl	-1576(%rbp), %eax	# r, tmp880
	movslq	%eax, %rdx	# tmp880, tmp879
	movq	%rdx, %rax	# tmp879, tmp881
	addq	%rax, %rax	# tmp881
	addq	%rdx, %rax	# tmp879, tmp881
	salq	$2, %rax	#, tmp881
	addq	%rdx, %rax	# tmp879, tmp881
	salq	$3, %rax	#, tmp882
	addq	$rld+8, %rax	#, tmp883
	movq	(%rax), %rax	# rld[r_104].out, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1597	#,
	.loc 1 5577 0
	movq	reg_reloaded_dead(%rip), %rdx	# reg_reloaded_dead, reg_reloaded_dead.944
	movl	-1648(%rbp), %eax	# i, tmp884
	movl	%eax, %ecx	# tmp884, tmp1623
	shrq	%cl, %rdx	# tmp1623, D.28337
	movq	%rdx, %rax	# D.28337, D.28337
	andl	$1, %eax	#, D.28337
	testq	%rax, %rax	# D.28337
	je	.L1596	#,
.L1597:
	.loc 1 5579 0
	cmpl	$6, -1648(%rbp)	#, i
	jne	.L1598	#,
	.loc 1 5580 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.945
	testl	%eax, %eax	# frame_pointer_needed.945
	je	.L1598	#,
	.loc 1 5581 0
	movl	-1576(%rbp), %eax	# r, tmp886
	movslq	%eax, %rdx	# tmp886, tmp885
	movq	%rdx, %rax	# tmp885, tmp887
	addq	%rax, %rax	# tmp887
	addq	%rdx, %rax	# tmp885, tmp887
	salq	$2, %rax	#, tmp887
	addq	%rdx, %rax	# tmp885, tmp887
	salq	$3, %rax	#, tmp888
	addq	$rld+8, %rax	#, tmp889
	movq	(%rax), %rax	# rld[r_104].out, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1596	#,
.L1598:
	.loc 1 5584 0
	movl	-1576(%rbp), %eax	# r, tmp891
	movslq	%eax, %rdx	# tmp891, tmp890
	movq	%rdx, %rax	# tmp890, tmp892
	addq	%rax, %rax	# tmp892
	addq	%rdx, %rax	# tmp890, tmp892
	salq	$2, %rax	#, tmp892
	addq	%rdx, %rax	# tmp890, tmp892
	salq	$3, %rax	#, tmp893
	addq	$rld+16, %rax	#, tmp894
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28336
	.loc 1 5585 0
	movl	-1612(%rbp), %eax	# mode, mode.946
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28336
	.loc 1 5584 0
	cmpb	%al, %dl	# D.28336, D.28336
	ja	.L1596	#,
	.loc 1 5586 0
	cmpl	$0, -1596(%rbp)	#, bad_for_class
	jne	.L1596	#,
	.loc 1 5591 0
	movl	-1576(%rbp), %eax	# r, tmp898
	movslq	%eax, %rdx	# tmp898, tmp897
	movq	%rdx, %rax	# tmp897, tmp899
	addq	%rax, %rax	# tmp899
	addq	%rdx, %rax	# tmp897, tmp899
	salq	$2, %rax	#, tmp899
	addq	%rdx, %rax	# tmp897, tmp899
	salq	$3, %rax	#, tmp900
	addq	$rld+8, %rax	#, tmp901
	movq	(%rax), %rax	# rld[r_104].out, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1599	#,
	.loc 1 5591 0 is_stmt 0 discriminator 1
	movl	-1576(%rbp), %eax	# r, tmp903
	movslq	%eax, %rdx	# tmp903, tmp902
	movq	%rdx, %rax	# tmp902, tmp904
	addq	%rax, %rax	# tmp904
	addq	%rdx, %rax	# tmp902, tmp904
	salq	$2, %rax	#, tmp904
	addq	%rdx, %rax	# tmp902, tmp904
	salq	$3, %rax	#, tmp905
	addq	$rld+64, %rax	#, tmp906
	movq	(%rax), %rax	# rld[r_104].reg_rtx, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1599	#,
	.loc 1 5592 0 is_stmt 1
	movl	-1576(%rbp), %eax	# r, tmp908
	movslq	%eax, %rdx	# tmp908, tmp907
	movq	%rdx, %rax	# tmp907, tmp909
	addq	%rax, %rax	# tmp909
	addq	%rdx, %rax	# tmp907, tmp909
	salq	$2, %rax	#, tmp909
	addq	%rdx, %rax	# tmp907, tmp909
	salq	$3, %rax	#, tmp910
	addq	$rld+64, %rax	#, tmp911
	movq	(%rax), %rcx	# rld[r_104].reg_rtx, D.28332
	movl	-1576(%rbp), %eax	# r, tmp913
	movslq	%eax, %rdx	# tmp913, tmp912
	movq	%rdx, %rax	# tmp912, tmp914
	addq	%rax, %rax	# tmp914
	addq	%rdx, %rax	# tmp912, tmp914
	salq	$2, %rax	#, tmp914
	addq	%rdx, %rax	# tmp912, tmp914
	salq	$3, %rax	#, tmp915
	addq	$rld+8, %rax	#, tmp916
	movq	(%rax), %rax	# rld[r_104].out, D.28332
	movq	%rcx, %rsi	# D.28332,
	movq	%rax, %rdi	# D.28332,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28331
	je	.L1599	#,
.L1596:
	.loc 1 5594 0
	movl	-1576(%rbp), %eax	# r, tmp918
	movslq	%eax, %rdx	# tmp918, tmp917
	movq	%rdx, %rax	# tmp917, tmp919
	addq	%rax, %rax	# tmp919
	addq	%rdx, %rax	# tmp917, tmp919
	salq	$2, %rax	#, tmp919
	addq	%rdx, %rax	# tmp917, tmp919
	salq	$3, %rax	#, tmp920
	addq	$rld+96, %rax	#, tmp921
	movzbl	(%rax), %eax	#, tmp924
	andl	$1, %eax	#, D.28334
	testb	%al, %al	# D.28334
	jne	.L1600	#,
	.loc 1 5596 0
	movl	-1576(%rbp), %eax	# r, tmp926
	cltq
	movq	-1504(%rbp), %rdx	# last_reg, tmp927
	movq	%rdx, reload_override_in(,%rax,8)	# tmp927, reload_override_in
	.loc 1 5598 0
	movl	-1648(%rbp), %eax	# i, tmp929
	cltq
	movq	reg_reloaded_insn(,%rax,8), %rdx	# reg_reloaded_insn, D.28332
	movl	-1576(%rbp), %eax	# r, tmp931
	cltq
	movq	%rdx, reload_inheritance_insn(,%rax,8)	# D.28332, reload_inheritance_insn
	.loc 1 5594 0
	jmp	.L1555	#
.L1600:
	.loc 1 5594 0 is_stmt 0 discriminator 1
	jmp	.L1555	#
.L1599:
.LBB126:
	.loc 1 5607 0 is_stmt 1
	movl	-1576(%rbp), %eax	# r, tmp933
	movslq	%eax, %rdx	# tmp933, tmp932
	movq	%rdx, %rax	# tmp932, tmp934
	addq	%rax, %rax	# tmp934
	addq	%rdx, %rax	# tmp932, tmp934
	salq	$2, %rax	#, tmp934
	addq	%rdx, %rax	# tmp932, tmp934
	salq	$3, %rax	#, tmp935
	addq	$rld+16, %rax	#, tmp936
	movl	12(%rax), %ecx	# rld[r_104].mode, D.28339
	movl	-1576(%rbp), %eax	# r, tmp938
	movslq	%eax, %rdx	# tmp938, tmp937
	movq	%rdx, %rax	# tmp937, tmp939
	addq	%rax, %rax	# tmp939
	addq	%rdx, %rax	# tmp937, tmp939
	salq	$2, %rax	#, tmp939
	addq	%rdx, %rax	# tmp937, tmp939
	salq	$3, %rax	#, tmp940
	addq	$rld+80, %rax	#, tmp941
	movl	12(%rax), %edi	# rld[r_104].when_needed, D.28341
	movl	-1576(%rbp), %eax	# r, tmp943
	movslq	%eax, %rdx	# tmp943, tmp942
	movq	%rdx, %rax	# tmp942, tmp944
	addq	%rax, %rax	# tmp944
	addq	%rdx, %rax	# tmp942, tmp944
	salq	$2, %rax	#, tmp944
	addq	%rdx, %rax	# tmp942, tmp944
	salq	$3, %rax	#, tmp945
	addq	$rld+64, %rax	#, tmp946
	movl	8(%rax), %esi	# rld[r_104].opnum, D.28331
	movl	-1648(%rbp), %eax	# i, i.947
	movl	%edi, %edx	# D.28341,
	movl	%eax, %edi	# i.947,
	call	mark_reload_reg_in_use	#
	.loc 1 5611 0
	movl	-1576(%rbp), %eax	# r, tmp948
	movslq	%eax, %rdx	# tmp948, tmp947
	movq	%rdx, %rax	# tmp947, tmp949
	addq	%rax, %rax	# tmp949
	addq	%rdx, %rax	# tmp947, tmp949
	salq	$2, %rax	#, tmp949
	addq	%rdx, %rax	# tmp947, tmp949
	salq	$3, %rax	#, tmp950
	leaq	rld+64(%rax), %rdx	#, tmp951
	movq	-1504(%rbp), %rax	# last_reg, tmp952
	movq	%rax, (%rdx)	# tmp952, rld[r_104].reg_rtx
	.loc 1 5612 0
	movl	-1576(%rbp), %eax	# r, tmp954
	cltq
	movb	$1, reload_inherited(%rax)	#, reload_inherited
	.loc 1 5614 0
	movl	-1648(%rbp), %eax	# i, tmp956
	cltq
	movq	reg_reloaded_insn(,%rax,8), %rdx	# reg_reloaded_insn, D.28332
	movl	-1576(%rbp), %eax	# r, tmp958
	cltq
	movq	%rdx, reload_inheritance_insn(,%rax,8)	# D.28332, reload_inheritance_insn
	.loc 1 5615 0
	movl	-1576(%rbp), %eax	# r, tmp960
	cltq
	movl	-1648(%rbp), %edx	# i, tmp961
	movl	%edx, reload_spill_index(,%rax,4)	# tmp961, reload_spill_index
	.loc 1 5616 0
	movl	$0, -1592(%rbp)	#, k
	jmp	.L1601	#
.L1602:
	.loc 1 5617 0 discriminator 2
	movl	-1592(%rbp), %eax	# k, tmp962
	movl	-1648(%rbp), %edx	# i, tmp963
	addl	%edx, %eax	# tmp963, D.28331
	movl	$1, %edx	#, tmp964
	movl	%eax, %ecx	# D.28331, tmp1624
	salq	%cl, %rdx	# tmp1624, D.28337
	movq	reload_reg_used_for_inherit(%rip), %rax	# reload_reg_used_for_inherit, reload_reg_used_for_inherit.948
	orq	%rdx, %rax	# D.28337, reload_reg_used_for_inherit.949
	movq	%rax, reload_reg_used_for_inherit(%rip)	# reload_reg_used_for_inherit.949, reload_reg_used_for_inherit
	.loc 1 5616 0 discriminator 2
	addl	$1, -1592(%rbp)	#, k
.L1601:
	.loc 1 5616 0 is_stmt 0 discriminator 1
	movl	-1592(%rbp), %eax	# k, tmp965
	cmpl	-1564(%rbp), %eax	# nr, tmp965
	jl	.L1602	#,
.L1555:
.LBE126:
.LBE125:
.LBE124:
.LBE123:
.LBE122:
	.loc 1 5626 0 is_stmt 1
	cmpl	$0, -1624(%rbp)	#, inheritance
	je	.L1603	#,
	.loc 1 5627 0
	movl	-1576(%rbp), %eax	# r, tmp967
	movslq	%eax, %rdx	# tmp967, tmp966
	movq	%rdx, %rax	# tmp966, tmp968
	addq	%rax, %rax	# tmp968
	addq	%rdx, %rax	# tmp966, tmp968
	salq	$2, %rax	#, tmp968
	addq	%rdx, %rax	# tmp966, tmp968
	salq	$3, %rax	#, tmp969
	addq	$rld, %rax	#, tmp970
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1603	#,
	.loc 1 5628 0
	movl	-1576(%rbp), %eax	# r, tmp972
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28342
	testb	%al, %al	# D.28342
	jne	.L1603	#,
	.loc 1 5629 0
	movl	-1576(%rbp), %eax	# r, tmp974
	movslq	%eax, %rdx	# tmp974, tmp973
	movq	%rdx, %rax	# tmp973, tmp975
	addq	%rax, %rax	# tmp975
	addq	%rdx, %rax	# tmp973, tmp975
	salq	$2, %rax	#, tmp975
	addq	%rdx, %rax	# tmp973, tmp975
	salq	$3, %rax	#, tmp976
	addq	$rld+8, %rax	#, tmp977
	movq	(%rax), %rax	# rld[r_104].out, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1603	#,
	.loc 1 5630 0
	movl	-1576(%rbp), %eax	# r, tmp979
	movslq	%eax, %rdx	# tmp979, tmp978
	movq	%rdx, %rax	# tmp978, tmp980
	addq	%rax, %rax	# tmp980
	addq	%rdx, %rax	# tmp978, tmp980
	salq	$2, %rax	#, tmp980
	addq	%rdx, %rax	# tmp978, tmp980
	salq	$3, %rax	#, tmp981
	addq	$rld, %rax	#, tmp982
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _335->code, D.28335
	cmpw	$67, %ax	#, D.28335
	je	.L1604	#,
	.loc 1 5630 0 is_stmt 0 discriminator 1
	movl	-1576(%rbp), %eax	# r, tmp984
	movslq	%eax, %rdx	# tmp984, tmp983
	movq	%rdx, %rax	# tmp983, tmp985
	addq	%rax, %rax	# tmp985
	addq	%rdx, %rax	# tmp983, tmp985
	salq	$2, %rax	#, tmp985
	addq	%rdx, %rax	# tmp983, tmp985
	salq	$3, %rax	#, tmp986
	addq	$rld, %rax	#, tmp987
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _337->code, D.28335
	cmpw	$68, %ax	#, D.28335
	je	.L1604	#,
	movl	-1576(%rbp), %eax	# r, tmp989
	movslq	%eax, %rdx	# tmp989, tmp988
	movq	%rdx, %rax	# tmp988, tmp990
	addq	%rax, %rax	# tmp990
	addq	%rdx, %rax	# tmp988, tmp990
	salq	$2, %rax	#, tmp990
	addq	%rdx, %rax	# tmp988, tmp990
	salq	$3, %rax	#, tmp991
	addq	$rld, %rax	#, tmp992
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _339->code, D.28335
	cmpw	$54, %ax	#, D.28335
	je	.L1604	#,
	movl	-1576(%rbp), %eax	# r, tmp994
	movslq	%eax, %rdx	# tmp994, tmp993
	movq	%rdx, %rax	# tmp993, tmp995
	addq	%rax, %rax	# tmp995
	addq	%rdx, %rax	# tmp993, tmp995
	salq	$2, %rax	#, tmp995
	addq	%rdx, %rax	# tmp993, tmp995
	salq	$3, %rax	#, tmp996
	addq	$rld, %rax	#, tmp997
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _341->code, D.28335
	cmpw	$55, %ax	#, D.28335
	je	.L1604	#,
	movl	-1576(%rbp), %eax	# r, tmp999
	movslq	%eax, %rdx	# tmp999, tmp998
	movq	%rdx, %rax	# tmp998, tmp1000
	addq	%rax, %rax	# tmp1000
	addq	%rdx, %rax	# tmp998, tmp1000
	salq	$2, %rax	#, tmp1000
	addq	%rdx, %rax	# tmp998, tmp1000
	salq	$3, %rax	#, tmp1001
	addq	$rld, %rax	#, tmp1002
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _343->code, D.28335
	cmpw	$58, %ax	#, D.28335
	je	.L1604	#,
	movl	-1576(%rbp), %eax	# r, tmp1004
	movslq	%eax, %rdx	# tmp1004, tmp1003
	movq	%rdx, %rax	# tmp1003, tmp1005
	addq	%rax, %rax	# tmp1005
	addq	%rdx, %rax	# tmp1003, tmp1005
	salq	$2, %rax	#, tmp1005
	addq	%rdx, %rax	# tmp1003, tmp1005
	salq	$3, %rax	#, tmp1006
	addq	$rld, %rax	#, tmp1007
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _345->code, D.28335
	cmpw	$134, %ax	#, D.28335
	je	.L1604	#,
	movl	-1576(%rbp), %eax	# r, tmp1009
	movslq	%eax, %rdx	# tmp1009, tmp1008
	movq	%rdx, %rax	# tmp1008, tmp1010
	addq	%rax, %rax	# tmp1010
	addq	%rdx, %rax	# tmp1008, tmp1010
	salq	$2, %rax	#, tmp1010
	addq	%rdx, %rax	# tmp1008, tmp1010
	salq	$3, %rax	#, tmp1011
	addq	$rld, %rax	#, tmp1012
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _347->code, D.28335
	cmpw	$56, %ax	#, D.28335
	je	.L1604	#,
	movl	-1576(%rbp), %eax	# r, tmp1014
	movslq	%eax, %rdx	# tmp1014, tmp1013
	movq	%rdx, %rax	# tmp1013, tmp1015
	addq	%rax, %rax	# tmp1015
	addq	%rdx, %rax	# tmp1013, tmp1015
	salq	$2, %rax	#, tmp1015
	addq	%rdx, %rax	# tmp1013, tmp1015
	salq	$3, %rax	#, tmp1016
	addq	$rld, %rax	#, tmp1017
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _349->code, D.28335
	cmpw	$140, %ax	#, D.28335
	je	.L1604	#,
	.loc 1 5631 0 is_stmt 1
	movl	-1576(%rbp), %eax	# r, tmp1019
	movslq	%eax, %rdx	# tmp1019, tmp1018
	movq	%rdx, %rax	# tmp1018, tmp1020
	addq	%rax, %rax	# tmp1020
	addq	%rdx, %rax	# tmp1018, tmp1020
	salq	$2, %rax	#, tmp1020
	addq	%rdx, %rax	# tmp1018, tmp1020
	salq	$3, %rax	#, tmp1021
	addq	$rld, %rax	#, tmp1022
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _351->code, D.28335
	cmpw	$75, %ax	#, D.28335
	je	.L1604	#,
	.loc 1 5632 0
	movl	-1576(%rbp), %eax	# r, tmp1024
	movslq	%eax, %rdx	# tmp1024, tmp1023
	movq	%rdx, %rax	# tmp1023, tmp1025
	addq	%rax, %rax	# tmp1025
	addq	%rdx, %rax	# tmp1023, tmp1025
	salq	$2, %rax	#, tmp1025
	addq	%rdx, %rax	# tmp1023, tmp1025
	salq	$3, %rax	#, tmp1026
	addq	$rld, %rax	#, tmp1027
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _353->code, D.28335
	cmpw	$61, %ax	#, D.28335
	je	.L1604	#,
	.loc 1 5633 0
	movl	-1576(%rbp), %eax	# r, tmp1029
	movslq	%eax, %rdx	# tmp1029, tmp1028
	movq	%rdx, %rax	# tmp1028, tmp1030
	addq	%rax, %rax	# tmp1030
	addq	%rdx, %rax	# tmp1028, tmp1030
	salq	$2, %rax	#, tmp1030
	addq	%rdx, %rax	# tmp1028, tmp1030
	salq	$3, %rax	#, tmp1031
	addq	$rld, %rax	#, tmp1032
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	movzwl	(%rax), %eax	# _355->code, D.28335
	cmpw	$66, %ax	#, D.28335
	jne	.L1603	#,
.L1604:
	.loc 1 5634 0
	movl	-1576(%rbp), %eax	# r, tmp1034
	movslq	%eax, %rdx	# tmp1034, tmp1033
	movq	%rdx, %rax	# tmp1033, tmp1035
	addq	%rax, %rax	# tmp1035
	addq	%rdx, %rax	# tmp1033, tmp1035
	salq	$2, %rax	#, tmp1035
	addq	%rdx, %rax	# tmp1033, tmp1035
	salq	$3, %rax	#, tmp1036
	addq	$rld+32, %rax	#, tmp1037
	movl	(%rax), %eax	# rld[r_104].nregs, D.28329
	cmpl	-1640(%rbp), %eax	# max_group_size, D.28329
	je	.L1605	#,
	.loc 1 5635 0
	movl	-1576(%rbp), %eax	# r, tmp1039
	movslq	%eax, %rdx	# tmp1039, tmp1038
	movq	%rdx, %rax	# tmp1038, tmp1040
	addq	%rax, %rax	# tmp1040
	addq	%rdx, %rax	# tmp1038, tmp1040
	salq	$2, %rax	#, tmp1040
	addq	%rdx, %rax	# tmp1038, tmp1040
	salq	$3, %rax	#, tmp1041
	addq	$rld+16, %rax	#, tmp1042
	movl	(%rax), %eax	# rld[r_104].class, D.28330
	movl	-1636(%rbp), %edx	# group_class, tmp1043
	movl	%edx, %esi	# tmp1043,
	movl	%eax, %edi	# D.28330,
	call	reg_classes_intersect_p	#
	testl	%eax, %eax	# D.28331
	jne	.L1603	#,
.L1605:
	.loc 1 5636 0
	movl	-1576(%rbp), %eax	# r, tmp1045
	movslq	%eax, %rdx	# tmp1045, tmp1044
	movq	%rdx, %rax	# tmp1044, tmp1046
	addq	%rax, %rax	# tmp1046
	addq	%rdx, %rax	# tmp1044, tmp1046
	salq	$2, %rax	#, tmp1046
	addq	%rdx, %rax	# tmp1044, tmp1046
	salq	$3, %rax	#, tmp1047
	addq	$rld, %rax	#, tmp1048
	movq	(%rax), %rax	# rld[r_104].in, tmp1049
	movq	%rax, -1536(%rbp)	# tmp1049, search_equiv
	jmp	.L1606	#
.L1603:
	.loc 1 5639 0
	cmpl	$0, -1624(%rbp)	#, inheritance
	je	.L1606	#,
	.loc 1 5639 0 is_stmt 0 discriminator 1
	movl	-1576(%rbp), %eax	# r, tmp1051
	movslq	%eax, %rdx	# tmp1051, tmp1050
	movq	%rdx, %rax	# tmp1050, tmp1052
	addq	%rax, %rax	# tmp1052
	addq	%rdx, %rax	# tmp1050, tmp1052
	salq	$2, %rax	#, tmp1052
	addq	%rdx, %rax	# tmp1050, tmp1052
	salq	$3, %rax	#, tmp1053
	addq	$rld, %rax	#, tmp1054
	movq	(%rax), %rax	# rld[r_104].in, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1606	#,
	movl	-1576(%rbp), %eax	# r, tmp1056
	movslq	%eax, %rdx	# tmp1056, tmp1055
	movq	%rdx, %rax	# tmp1055, tmp1057
	addq	%rax, %rax	# tmp1057
	addq	%rdx, %rax	# tmp1055, tmp1057
	salq	$2, %rax	#, tmp1057
	addq	%rdx, %rax	# tmp1055, tmp1057
	salq	$3, %rax	#, tmp1058
	addq	$rld+8, %rax	#, tmp1059
	movq	(%rax), %rax	# rld[r_104].out, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1606	#,
.LBB127:
	.loc 1 5641 0 is_stmt 1
	movq	-1512(%rbp), %rax	# insn, tmp1060
	movzwl	(%rax), %eax	# insn_80->code, D.28335
	movzwl	%ax, %eax	# D.28335, D.28331
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28342
	cmpb	$105, %al	#, D.28342
	jne	.L1607	#,
	.loc 1 5641 0 is_stmt 0 discriminator 1
	movq	-1512(%rbp), %rax	# insn, tmp1062
	movq	32(%rax), %rax	# insn_80->fld[3].rtx, D.28332
	movzwl	(%rax), %eax	# _366->code, D.28335
	cmpw	$47, %ax	#, D.28335
	jne	.L1608	#,
	.loc 1 5641 0 discriminator 3
	movq	-1512(%rbp), %rax	# insn, tmp1063
	movq	32(%rax), %rax	# insn_80->fld[3].rtx, iftmp.951
	jmp	.L1610	#
.L1608:
	.loc 1 5641 0 discriminator 4
	movq	-1512(%rbp), %rax	# insn, tmp1064
	movq	32(%rax), %rdx	# insn_80->fld[3].rtx, D.28332
	movq	-1512(%rbp), %rax	# insn, tmp1065
	movq	%rdx, %rsi	# D.28332,
	movq	%rax, %rdi	# tmp1065,
	call	single_set_2	#
	jmp	.L1610	#
.L1607:
	.loc 1 5641 0 discriminator 2
	movl	$0, %eax	#, iftmp.950
.L1610:
	.loc 1 5641 0 discriminator 5
	movq	%rax, -1496(%rbp)	# iftmp.950, set
	.loc 1 5643 0 is_stmt 1 discriminator 5
	cmpq	$0, -1496(%rbp)	#, set
	je	.L1606	#,
	.loc 1 5644 0
	movq	-1496(%rbp), %rax	# set, tmp1066
	movq	8(%rax), %rcx	# set_373->fld[0].rtx, D.28332
	movl	-1576(%rbp), %eax	# r, tmp1068
	movslq	%eax, %rdx	# tmp1068, tmp1067
	movq	%rdx, %rax	# tmp1067, tmp1069
	addq	%rax, %rax	# tmp1069
	addq	%rdx, %rax	# tmp1067, tmp1069
	salq	$2, %rax	#, tmp1069
	addq	%rdx, %rax	# tmp1067, tmp1069
	salq	$3, %rax	#, tmp1070
	addq	$rld+8, %rax	#, tmp1071
	movq	(%rax), %rax	# rld[r_104].out, D.28332
	movq	%rcx, %rsi	# D.28332,
	movq	%rax, %rdi	# D.28332,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28331
	je	.L1606	#,
	.loc 1 5645 0
	movq	-1496(%rbp), %rax	# set, tmp1072
	movq	16(%rax), %rax	# set_373->fld[1].rtx, D.28332
	movzwl	(%rax), %eax	# _377->code, D.28335
	cmpw	$67, %ax	#, D.28335
	je	.L1611	#,
	.loc 1 5645 0 is_stmt 0 discriminator 1
	movq	-1496(%rbp), %rax	# set, tmp1073
	movq	16(%rax), %rax	# set_373->fld[1].rtx, D.28332
	movzwl	(%rax), %eax	# _379->code, D.28335
	cmpw	$68, %ax	#, D.28335
	je	.L1611	#,
	movq	-1496(%rbp), %rax	# set, tmp1074
	movq	16(%rax), %rax	# set_373->fld[1].rtx, D.28332
	movzwl	(%rax), %eax	# _381->code, D.28335
	cmpw	$54, %ax	#, D.28335
	je	.L1611	#,
	movq	-1496(%rbp), %rax	# set, tmp1075
	movq	16(%rax), %rax	# set_373->fld[1].rtx, D.28332
	movzwl	(%rax), %eax	# _383->code, D.28335
	cmpw	$55, %ax	#, D.28335
	je	.L1611	#,
	movq	-1496(%rbp), %rax	# set, tmp1076
	movq	16(%rax), %rax	# set_373->fld[1].rtx, D.28332
	movzwl	(%rax), %eax	# _385->code, D.28335
	cmpw	$58, %ax	#, D.28335
	je	.L1611	#,
	movq	-1496(%rbp), %rax	# set, tmp1077
	movq	16(%rax), %rax	# set_373->fld[1].rtx, D.28332
	movzwl	(%rax), %eax	# _387->code, D.28335
	cmpw	$134, %ax	#, D.28335
	je	.L1611	#,
	movq	-1496(%rbp), %rax	# set, tmp1078
	movq	16(%rax), %rax	# set_373->fld[1].rtx, D.28332
	movzwl	(%rax), %eax	# _389->code, D.28335
	cmpw	$56, %ax	#, D.28335
	je	.L1611	#,
	movq	-1496(%rbp), %rax	# set, tmp1079
	movq	16(%rax), %rax	# set_373->fld[1].rtx, D.28332
	movzwl	(%rax), %eax	# _391->code, D.28335
	cmpw	$140, %ax	#, D.28335
	jne	.L1606	#,
.L1611:
	.loc 1 5646 0 is_stmt 1
	movq	-1496(%rbp), %rax	# set, tmp1080
	movq	16(%rax), %rax	# set_373->fld[1].rtx, tmp1081
	movq	%rax, -1536(%rbp)	# tmp1081, search_equiv
.L1606:
.LBE127:
	.loc 1 5649 0
	cmpq	$0, -1536(%rbp)	#, search_equiv
	je	.L1612	#,
.LBB128:
	.loc 1 5652 0
	movl	-1576(%rbp), %eax	# r, tmp1083
	movslq	%eax, %rdx	# tmp1083, tmp1082
	movq	%rdx, %rax	# tmp1082, tmp1084
	addq	%rax, %rax	# tmp1084
	addq	%rdx, %rax	# tmp1082, tmp1084
	salq	$2, %rax	#, tmp1084
	addq	%rdx, %rax	# tmp1082, tmp1084
	salq	$3, %rax	#, tmp1085
	addq	$rld+16, %rax	#, tmp1086
	movl	12(%rax), %ecx	# rld[r_104].mode, D.28339
	movl	-1576(%rbp), %eax	# r, tmp1088
	movslq	%eax, %rdx	# tmp1088, tmp1087
	movq	%rdx, %rax	# tmp1087, tmp1089
	addq	%rax, %rax	# tmp1089
	addq	%rdx, %rax	# tmp1087, tmp1089
	salq	$2, %rax	#, tmp1089
	addq	%rdx, %rax	# tmp1087, tmp1089
	salq	$3, %rax	#, tmp1090
	addq	$rld+16, %rax	#, tmp1091
	movl	(%rax), %edx	# rld[r_104].class, D.28330
	.loc 1 5651 0
	movq	-1512(%rbp), %rsi	# insn, tmp1092
	movq	-1536(%rbp), %rax	# search_equiv, tmp1093
	movl	%ecx, (%rsp)	# D.28339,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movl	$-1, %ecx	#,
	movq	%rax, %rdi	# tmp1093,
	call	find_equiv_reg	#
	movq	%rax, -1528(%rbp)	# tmp1094, equiv
	.loc 1 5654 0
	movl	$0, -1588(%rbp)	#, regno
	.loc 1 5656 0
	cmpq	$0, -1528(%rbp)	#, equiv
	je	.L1613	#,
	.loc 1 5658 0
	movq	-1528(%rbp), %rax	# equiv, tmp1095
	movzwl	(%rax), %eax	# equiv_396->code, D.28335
	cmpw	$61, %ax	#, D.28335
	jne	.L1614	#,
	.loc 1 5659 0
	movq	-1528(%rbp), %rax	# equiv, tmp1096
	movl	8(%rax), %eax	# equiv_396->fld[0].rtuint, D.28329
	movl	%eax, -1588(%rbp)	# D.28329, regno
	jmp	.L1613	#
.L1614:
	.loc 1 5660 0
	movq	-1528(%rbp), %rax	# equiv, tmp1097
	movzwl	(%rax), %eax	# equiv_396->code, D.28335
	cmpw	$63, %ax	#, D.28335
	jne	.L1615	#,
	.loc 1 5666 0
	movq	-1528(%rbp), %rax	# equiv, tmp1098
	movq	%rax, %rdi	# tmp1098,
	call	subreg_regno	#
	movl	%eax, -1588(%rbp)	# D.28329, regno
	.loc 1 5667 0
	movl	-1576(%rbp), %eax	# r, tmp1100
	movslq	%eax, %rdx	# tmp1100, tmp1099
	movq	%rdx, %rax	# tmp1099, tmp1101
	addq	%rax, %rax	# tmp1101
	addq	%rdx, %rax	# tmp1099, tmp1101
	salq	$2, %rax	#, tmp1101
	addq	%rdx, %rax	# tmp1099, tmp1101
	salq	$3, %rax	#, tmp1102
	addq	$rld+16, %rax	#, tmp1103
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	movl	-1588(%rbp), %edx	# regno, tmp1104
	movl	%edx, %esi	# tmp1104,
	movl	%eax, %edi	# D.28339,
	call	gen_rtx_REG	#
	movq	%rax, -1528(%rbp)	# tmp1105, equiv
	jmp	.L1613	#
.L1615:
	.loc 1 5670 0
	movl	$__FUNCTION__.15636, %edx	#,
	movl	$5670, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1613:
	.loc 1 5675 0
	cmpq	$0, -1528(%rbp)	#, equiv
	je	.L1616	#,
	.loc 1 5676 0
	movq	reload_reg_used_at_all(%rip), %rdx	# reload_reg_used_at_all, reload_reg_used_at_all.952
	movl	-1588(%rbp), %eax	# regno, tmp1106
	movl	%eax, %ecx	# tmp1106, tmp1626
	shrq	%cl, %rdx	# tmp1626, D.28337
	movq	%rdx, %rax	# D.28337, D.28337
	andl	$1, %eax	#, D.28337
	testq	%rax, %rax	# D.28337
	je	.L1617	#,
	.loc 1 5677 0
	movl	-1576(%rbp), %eax	# r, tmp1108
	movslq	%eax, %rdx	# tmp1108, tmp1107
	movq	%rdx, %rax	# tmp1107, tmp1109
	addq	%rax, %rax	# tmp1109
	addq	%rdx, %rax	# tmp1107, tmp1109
	salq	$2, %rax	#, tmp1109
	addq	%rdx, %rax	# tmp1107, tmp1109
	salq	$3, %rax	#, tmp1110
	addq	$rld+8, %rax	#, tmp1111
	movq	(%rax), %r9	# rld[r_104].out, D.28332
	movl	-1576(%rbp), %eax	# r, tmp1113
	movslq	%eax, %rdx	# tmp1113, tmp1112
	movq	%rdx, %rax	# tmp1112, tmp1114
	addq	%rax, %rax	# tmp1114
	addq	%rdx, %rax	# tmp1112, tmp1114
	salq	$2, %rax	#, tmp1114
	addq	%rdx, %rax	# tmp1112, tmp1114
	salq	$3, %rax	#, tmp1115
	addq	$rld, %rax	#, tmp1116
	movq	(%rax), %r8	# rld[r_104].in, D.28332
	movl	-1576(%rbp), %eax	# r, tmp1118
	movslq	%eax, %rdx	# tmp1118, tmp1117
	movq	%rdx, %rax	# tmp1117, tmp1119
	addq	%rax, %rax	# tmp1119
	addq	%rdx, %rax	# tmp1117, tmp1119
	salq	$2, %rax	#, tmp1119
	addq	%rdx, %rax	# tmp1117, tmp1119
	salq	$3, %rax	#, tmp1120
	addq	$rld+80, %rax	#, tmp1121
	movl	12(%rax), %ecx	# rld[r_104].when_needed, D.28341
	movl	-1576(%rbp), %eax	# r, tmp1123
	movslq	%eax, %rdx	# tmp1123, tmp1122
	movq	%rdx, %rax	# tmp1122, tmp1124
	addq	%rax, %rax	# tmp1124
	addq	%rdx, %rax	# tmp1122, tmp1124
	salq	$2, %rax	#, tmp1124
	addq	%rdx, %rax	# tmp1122, tmp1124
	salq	$3, %rax	#, tmp1125
	addq	$rld+64, %rax	#, tmp1126
	movl	8(%rax), %edi	# rld[r_104].opnum, D.28331
	movl	-1576(%rbp), %eax	# r, tmp1128
	movslq	%eax, %rdx	# tmp1128, tmp1127
	movq	%rdx, %rax	# tmp1127, tmp1129
	addq	%rax, %rax	# tmp1129
	addq	%rdx, %rax	# tmp1127, tmp1129
	salq	$2, %rax	#, tmp1129
	addq	%rdx, %rax	# tmp1127, tmp1129
	salq	$3, %rax	#, tmp1130
	addq	$rld+16, %rax	#, tmp1131
	movl	12(%rax), %esi	# rld[r_104].mode, D.28339
	movl	-1588(%rbp), %eax	# regno, tmp1132
	movl	$1, 8(%rsp)	#,
	movl	-1576(%rbp), %edx	# r, tmp1133
	movl	%edx, (%rsp)	# tmp1133,
	movl	%edi, %edx	# D.28331,
	movl	%eax, %edi	# tmp1132,
	call	free_for_value_p	#
	testl	%eax, %eax	# D.28331
	je	.L1618	#,
.L1617:
	.loc 1 5680 0
	movl	-1576(%rbp), %eax	# r, tmp1135
	movslq	%eax, %rdx	# tmp1135, tmp1134
	movq	%rdx, %rax	# tmp1134, tmp1136
	addq	%rax, %rax	# tmp1136
	addq	%rdx, %rax	# tmp1134, tmp1136
	salq	$2, %rax	#, tmp1136
	addq	%rdx, %rax	# tmp1134, tmp1136
	salq	$3, %rax	#, tmp1137
	addq	$rld+16, %rax	#, tmp1138
	movl	(%rax), %eax	# rld[r_104].class, D.28330
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.28337
	movl	-1588(%rbp), %eax	# regno, tmp1140
	movl	%eax, %ecx	# tmp1140, tmp1628
	shrq	%cl, %rdx	# tmp1628, D.28337
	movq	%rdx, %rax	# D.28337, D.28337
	andl	$1, %eax	#, D.28337
	testq	%rax, %rax	# D.28337
	jne	.L1616	#,
.L1618:
	.loc 1 5682 0
	movq	$0, -1528(%rbp)	#, equiv
.L1616:
	.loc 1 5684 0
	cmpq	$0, -1528(%rbp)	#, equiv
	je	.L1619	#,
	.loc 1 5684 0 is_stmt 0 discriminator 1
	movl	-1576(%rbp), %eax	# r, tmp1142
	movslq	%eax, %rdx	# tmp1142, tmp1141
	movq	%rdx, %rax	# tmp1141, tmp1143
	addq	%rax, %rax	# tmp1143
	addq	%rdx, %rax	# tmp1141, tmp1143
	salq	$2, %rax	#, tmp1143
	addq	%rdx, %rax	# tmp1141, tmp1143
	salq	$3, %rax	#, tmp1144
	addq	$rld+16, %rax	#, tmp1145
	movl	12(%rax), %edx	# rld[r_104].mode, D.28339
	movl	-1588(%rbp), %eax	# regno, tmp1146
	movl	%edx, %esi	# D.28339,
	movl	%eax, %edi	# tmp1146,
	call	ix86_hard_regno_mode_ok	#
	testl	%eax, %eax	# D.28331
	jne	.L1619	#,
	.loc 1 5685 0 is_stmt 1
	movq	$0, -1528(%rbp)	#, equiv
.L1619:
	.loc 1 5692 0
	cmpq	$0, -1528(%rbp)	#, equiv
	je	.L1620	#,
	.loc 1 5693 0
	movl	$0, -1648(%rbp)	#, i
	jmp	.L1621	#
.L1624:
	.loc 1 5694 0
	movl	-1648(%rbp), %eax	# i, tmp1148
	cltq
	movq	reload_earlyclobbers(,%rax,8), %rdx	# reload_earlyclobbers, D.28332
	movq	-1528(%rbp), %rax	# equiv, tmp1149
	movq	%rdx, %rsi	# D.28332,
	movq	%rax, %rdi	# tmp1149,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.28331
	je	.L1622	#,
	.loc 1 5697 0
	movl	-1576(%rbp), %eax	# r, tmp1151
	movslq	%eax, %rdx	# tmp1151, tmp1150
	movq	%rdx, %rax	# tmp1150, tmp1152
	addq	%rax, %rax	# tmp1152
	addq	%rdx, %rax	# tmp1150, tmp1152
	salq	$2, %rax	#, tmp1152
	addq	%rdx, %rax	# tmp1150, tmp1152
	salq	$3, %rax	#, tmp1153
	addq	$rld+96, %rax	#, tmp1154
	movzbl	(%rax), %eax	#, tmp1157
	andl	$1, %eax	#, D.28334
	testb	%al, %al	# D.28334
	jne	.L1623	#,
	.loc 1 5698 0
	movl	-1576(%rbp), %eax	# r, tmp1159
	cltq
	movq	-1528(%rbp), %rdx	# equiv, tmp1160
	movq	%rdx, reload_override_in(,%rax,8)	# tmp1160, reload_override_in
.L1623:
	.loc 1 5699 0
	movq	$0, -1528(%rbp)	#, equiv
	.loc 1 5700 0
	jmp	.L1620	#
.L1622:
	.loc 1 5693 0
	addl	$1, -1648(%rbp)	#, i
.L1621:
	.loc 1 5693 0 is_stmt 0 discriminator 1
	movl	n_earlyclobbers(%rip), %eax	# n_earlyclobbers, n_earlyclobbers.953
	cmpl	%eax, -1648(%rbp)	# n_earlyclobbers.953, i
	jl	.L1624	#,
.L1620:
	.loc 1 5709 0 is_stmt 1
	cmpq	$0, -1528(%rbp)	#, equiv
	je	.L1625	#,
	.loc 1 5711 0
	movl	-1576(%rbp), %eax	# r, tmp1162
	movslq	%eax, %rdx	# tmp1162, tmp1161
	movq	%rdx, %rax	# tmp1161, tmp1163
	addq	%rax, %rax	# tmp1163
	addq	%rdx, %rax	# tmp1161, tmp1163
	salq	$2, %rax	#, tmp1163
	addq	%rdx, %rax	# tmp1161, tmp1163
	salq	$3, %rax	#, tmp1164
	addq	$rld+16, %rax	#, tmp1165
	movl	12(%rax), %edx	# rld[r_104].mode, D.28339
	movl	-1588(%rbp), %eax	# regno, regno.954
	movq	-1512(%rbp), %rsi	# insn, tmp1166
	movl	$0, %ecx	#,
	movl	%eax, %edi	# regno.954,
	call	regno_clobbered_p	#
	testl	%eax, %eax	# D.28331
	je	.L1626	#,
	.loc 1 5712 0
	movl	-1576(%rbp), %eax	# r, tmp1168
	movslq	%eax, %rdx	# tmp1168, tmp1167
	movq	%rdx, %rax	# tmp1167, tmp1169
	addq	%rax, %rax	# tmp1169
	addq	%rdx, %rax	# tmp1167, tmp1169
	salq	$2, %rax	#, tmp1169
	addq	%rdx, %rax	# tmp1167, tmp1169
	salq	$3, %rax	#, tmp1170
	addq	$rld+80, %rax	#, tmp1171
	movl	12(%rax), %eax	# rld[r_104].when_needed, D.28341
	cmpl	$10, %eax	#, D.28341
	ja	.L1627	#,
	movl	%eax, %eax	# D.28341, tmp1172
	movq	.L1629(,%rax,8), %rax	#, tmp1173
	jmp	*%rax	# tmp1173
	.section	.rodata
	.align 8
	.align 4
.L1629:
	.quad	.L1628
	.quad	.L1627
	.quad	.L1627
	.quad	.L1758
	.quad	.L1758
	.quad	.L1627
	.quad	.L1627
	.quad	.L1628
	.quad	.L1758
	.quad	.L1628
	.quad	.L1758
	.text
.L1628:
	.loc 1 5722 0
	movl	-1576(%rbp), %eax	# r, tmp1175
	movslq	%eax, %rdx	# tmp1175, tmp1174
	movq	%rdx, %rax	# tmp1174, tmp1176
	addq	%rax, %rax	# tmp1176
	addq	%rdx, %rax	# tmp1174, tmp1176
	salq	$2, %rax	#, tmp1176
	addq	%rdx, %rax	# tmp1174, tmp1176
	salq	$3, %rax	#, tmp1177
	addq	$rld+96, %rax	#, tmp1178
	movzbl	(%rax), %eax	#, tmp1181
	andl	$1, %eax	#, D.28334
	testb	%al, %al	# D.28334
	jne	.L1627	#,
	.loc 1 5723 0
	movl	-1576(%rbp), %eax	# r, tmp1183
	cltq
	movq	-1528(%rbp), %rdx	# equiv, tmp1184
	movq	%rdx, reload_override_in(,%rax,8)	# tmp1184, reload_override_in
.L1627:
	.loc 1 5726 0
	movq	$0, -1528(%rbp)	#, equiv
	.loc 1 5727 0
	jmp	.L1631	#
.L1758:
	.loc 1 5718 0
	nop
.L1631:
	jmp	.L1625	#
.L1626:
	.loc 1 5729 0
	movl	-1576(%rbp), %eax	# r, tmp1186
	movslq	%eax, %rdx	# tmp1186, tmp1185
	movq	%rdx, %rax	# tmp1185, tmp1187
	addq	%rax, %rax	# tmp1187
	addq	%rdx, %rax	# tmp1185, tmp1187
	salq	$2, %rax	#, tmp1187
	addq	%rdx, %rax	# tmp1185, tmp1187
	salq	$3, %rax	#, tmp1188
	addq	$rld+16, %rax	#, tmp1189
	movl	12(%rax), %edx	# rld[r_104].mode, D.28339
	movl	-1588(%rbp), %eax	# regno, regno.955
	movq	-1512(%rbp), %rsi	# insn, tmp1190
	movl	$1, %ecx	#,
	movl	%eax, %edi	# regno.955,
	call	regno_clobbered_p	#
	testl	%eax, %eax	# D.28331
	je	.L1625	#,
	.loc 1 5730 0
	movl	-1576(%rbp), %eax	# r, tmp1192
	movslq	%eax, %rdx	# tmp1192, tmp1191
	movq	%rdx, %rax	# tmp1191, tmp1193
	addq	%rax, %rax	# tmp1193
	addq	%rdx, %rax	# tmp1191, tmp1193
	salq	$2, %rax	#, tmp1193
	addq	%rdx, %rax	# tmp1191, tmp1193
	salq	$3, %rax	#, tmp1194
	addq	$rld+80, %rax	#, tmp1195
	movl	12(%rax), %eax	# rld[r_104].when_needed, D.28341
	cmpl	$10, %eax	#, D.28341
	ja	.L1632	#,
	movl	%eax, %eax	# D.28341, tmp1196
	movq	.L1634(,%rax,8), %rax	#, tmp1197
	jmp	*%rax	# tmp1197
	.section	.rodata
	.align 8
	.align 4
.L1634:
	.quad	.L1759
	.quad	.L1632
	.quad	.L1632
	.quad	.L1759
	.quad	.L1759
	.quad	.L1632
	.quad	.L1632
	.quad	.L1759
	.quad	.L1759
	.quad	.L1635
	.quad	.L1759
	.text
.L1635:
	.loc 1 5740 0
	movl	-1576(%rbp), %eax	# r, tmp1199
	movslq	%eax, %rdx	# tmp1199, tmp1198
	movq	%rdx, %rax	# tmp1198, tmp1200
	addq	%rax, %rax	# tmp1200
	addq	%rdx, %rax	# tmp1198, tmp1200
	salq	$2, %rax	#, tmp1200
	addq	%rdx, %rax	# tmp1198, tmp1200
	salq	$3, %rax	#, tmp1201
	addq	$rld+96, %rax	#, tmp1202
	movzbl	(%rax), %eax	#, tmp1205
	andl	$1, %eax	#, D.28334
	testb	%al, %al	# D.28334
	jne	.L1632	#,
	.loc 1 5741 0
	movl	-1576(%rbp), %eax	# r, tmp1207
	cltq
	movq	-1528(%rbp), %rdx	# equiv, tmp1208
	movq	%rdx, reload_override_in(,%rax,8)	# tmp1208, reload_override_in
.L1632:
	.loc 1 5744 0
	movq	$0, -1528(%rbp)	#, equiv
	.loc 1 5745 0
	jmp	.L1625	#
.L1759:
	.loc 1 5738 0
	nop
.L1625:
	.loc 1 5751 0
	cmpq	$0, -1528(%rbp)	#, equiv
	je	.L1612	#,
	.loc 1 5752 0
	cmpl	$6, -1588(%rbp)	#, regno
	jne	.L1636	#,
	.loc 1 5753 0
	movl	frame_pointer_needed(%rip), %eax	# frame_pointer_needed, frame_pointer_needed.956
	testl	%eax, %eax	# frame_pointer_needed.956
	jne	.L1612	#,
.L1636:
.LBB129:
	.loc 1 5755 0
	cmpl	$7, -1588(%rbp)	#, regno
	jle	.L1637	#,
	.loc 1 5755 0 is_stmt 0 discriminator 1
	cmpl	$15, -1588(%rbp)	#, regno
	jle	.L1638	#,
.L1637:
	.loc 1 5755 0 discriminator 2
	cmpl	$20, -1588(%rbp)	#, regno
	jle	.L1639	#,
	.loc 1 5755 0 discriminator 1
	cmpl	$28, -1588(%rbp)	#, regno
	jle	.L1638	#,
.L1639:
	.loc 1 5755 0 discriminator 2
	cmpl	$44, -1588(%rbp)	#, regno
	jle	.L1640	#,
	.loc 1 5755 0 discriminator 1
	cmpl	$52, -1588(%rbp)	#, regno
	jle	.L1638	#,
.L1640:
	.loc 1 5755 0 discriminator 2
	cmpl	$28, -1588(%rbp)	#, regno
	jle	.L1641	#,
	.loc 1 5755 0 discriminator 1
	cmpl	$36, -1588(%rbp)	#, regno
	jg	.L1641	#,
.L1638:
	movl	-1576(%rbp), %eax	# r, tmp1210
	movslq	%eax, %rdx	# tmp1210, tmp1209
	movq	%rdx, %rax	# tmp1209, tmp1211
	addq	%rax, %rax	# tmp1211
	addq	%rdx, %rax	# tmp1209, tmp1211
	salq	$2, %rax	#, tmp1211
	addq	%rdx, %rax	# tmp1209, tmp1211
	salq	$3, %rax	#, tmp1212
	addq	$rld+16, %rax	#, tmp1213
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28340
	cmpl	$5, %eax	#, D.28340
	je	.L1642	#,
	.loc 1 5755 0 discriminator 2
	movl	-1576(%rbp), %eax	# r, tmp1216
	movslq	%eax, %rdx	# tmp1216, tmp1215
	movq	%rdx, %rax	# tmp1215, tmp1217
	addq	%rax, %rax	# tmp1217
	addq	%rdx, %rax	# tmp1215, tmp1217
	salq	$2, %rax	#, tmp1217
	addq	%rdx, %rax	# tmp1215, tmp1217
	salq	$3, %rax	#, tmp1218
	addq	$rld+16, %rax	#, tmp1219
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28340
	cmpl	$6, %eax	#, D.28340
	jne	.L1643	#,
.L1642:
	.loc 1 5755 0 discriminator 1
	movl	$2, %eax	#, iftmp.958
	jmp	.L1644	#
.L1643:
	movl	$1, %eax	#, iftmp.958
.L1644:
	.loc 1 5755 0 discriminator 3
	jmp	.L1645	#
.L1641:
	.loc 1 5755 0 discriminator 2
	movl	-1576(%rbp), %eax	# r, tmp1222
	movslq	%eax, %rdx	# tmp1222, tmp1221
	movq	%rdx, %rax	# tmp1221, tmp1223
	addq	%rax, %rax	# tmp1223
	addq	%rdx, %rax	# tmp1221, tmp1223
	salq	$2, %rax	#, tmp1223
	addq	%rdx, %rax	# tmp1221, tmp1223
	salq	$3, %rax	#, tmp1224
	addq	$rld+16, %rax	#, tmp1225
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cmpl	$18, %eax	#, D.28339
	jne	.L1646	#,
	.loc 1 5755 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.961
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1647	#,
	movl	$2, %eax	#, iftmp.960
	jmp	.L1645	#
.L1647:
	.loc 1 5755 0 discriminator 2
	movl	$3, %eax	#, iftmp.960
	jmp	.L1645	#
.L1646:
	movl	-1576(%rbp), %eax	# r, tmp1227
	movslq	%eax, %rdx	# tmp1227, tmp1226
	movq	%rdx, %rax	# tmp1226, tmp1228
	addq	%rax, %rax	# tmp1228
	addq	%rdx, %rax	# tmp1226, tmp1228
	salq	$2, %rax	#, tmp1228
	addq	%rdx, %rax	# tmp1226, tmp1228
	salq	$3, %rax	#, tmp1229
	addq	$rld+16, %rax	#, tmp1230
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cmpl	$24, %eax	#, D.28339
	jne	.L1650	#,
	.loc 1 5755 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.964
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1651	#,
	movl	$4, %eax	#, iftmp.963
	jmp	.L1645	#
.L1651:
	.loc 1 5755 0 discriminator 2
	movl	$6, %eax	#, iftmp.963
	jmp	.L1645	#
.L1650:
	movl	-1576(%rbp), %eax	# r, tmp1232
	movslq	%eax, %rdx	# tmp1232, tmp1231
	movq	%rdx, %rax	# tmp1231, tmp1233
	addq	%rax, %rax	# tmp1233
	addq	%rdx, %rax	# tmp1231, tmp1233
	salq	$2, %rax	#, tmp1233
	addq	%rdx, %rax	# tmp1231, tmp1233
	salq	$3, %rax	#, tmp1234
	addq	$rld+16, %rax	#, tmp1235
	movl	12(%rax), %eax	# rld[r_104].mode, D.28339
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28336
	movzbl	%al, %edx	# D.28336, D.28331
	movl	target_flags(%rip), %eax	# target_flags, target_flags.966
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1654	#,
	.loc 1 5755 0 discriminator 1
	movl	$8, %eax	#, iftmp.965
	jmp	.L1655	#
.L1654:
	.loc 1 5755 0 discriminator 2
	movl	$4, %eax	#, iftmp.965
.L1655:
	.loc 1 5755 0 discriminator 3
	addl	%edx, %eax	# D.28331, D.28331
	subl	$1, %eax	#, D.28331
	movl	target_flags(%rip), %edx	# target_flags, target_flags.968
	andl	$33554432, %edx	#, D.28331
	testl	%edx, %edx	# D.28331
	je	.L1656	#,
	.loc 1 5755 0 discriminator 1
	movl	$8, %ebx	#, iftmp.967
	jmp	.L1657	#
.L1656:
	.loc 1 5755 0 discriminator 2
	movl	$4, %ebx	#, iftmp.967
.L1657:
	.loc 1 5755 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.967
.L1645:
	movl	%eax, -1560(%rbp)	# iftmp.957, nr
	.loc 1 5757 0 is_stmt 1 discriminator 3
	movl	-1576(%rbp), %eax	# r, tmp1240
	movslq	%eax, %rdx	# tmp1240, tmp1239
	movq	%rdx, %rax	# tmp1239, tmp1241
	addq	%rax, %rax	# tmp1241
	addq	%rdx, %rax	# tmp1239, tmp1241
	salq	$2, %rax	#, tmp1241
	addq	%rdx, %rax	# tmp1239, tmp1241
	salq	$3, %rax	#, tmp1242
	leaq	rld+64(%rax), %rdx	#, tmp1243
	movq	-1528(%rbp), %rax	# equiv, tmp1244
	movq	%rax, (%rdx)	# tmp1244, rld[r_104].reg_rtx
	.loc 1 5758 0 discriminator 3
	movl	-1576(%rbp), %eax	# r, tmp1246
	cltq
	movb	$1, reload_inherited(%rax)	#, reload_inherited
	.loc 1 5764 0 discriminator 3
	movq	reg_reloaded_valid(%rip), %rdx	# reg_reloaded_valid, reg_reloaded_valid.969
	movl	-1588(%rbp), %eax	# regno, tmp1247
	movl	%eax, %ecx	# tmp1247, tmp1631
	shrq	%cl, %rdx	# tmp1631, D.28337
	movq	%rdx, %rax	# D.28337, D.28337
	andl	$1, %eax	#, D.28337
	testq	%rax, %rax	# D.28337
	jne	.L1658	#,
	.loc 1 5765 0
	movl	-1588(%rbp), %eax	# regno, tmp1249
	cltq
	movq	$0, spill_reg_store(,%rax,8)	#, spill_reg_store
.L1658:
	.loc 1 5768 0
	movl	$0, -1584(%rbp)	#, k
	jmp	.L1659	#
.L1661:
	.loc 1 5770 0
	movl	-1584(%rbp), %eax	# k, tmp1250
	movl	-1588(%rbp), %edx	# regno, tmp1251
	addl	%edx, %eax	# tmp1251, D.28331
	cltq
	movzwl	spill_reg_order(%rax,%rax), %eax	# spill_reg_order, D.28328
	cwtl
	movl	%eax, -1648(%rbp)	# tmp1253, i
	.loc 1 5771 0
	cmpl	$0, -1648(%rbp)	#, i
	js	.L1660	#,
	.loc 1 5773 0
	movl	-1576(%rbp), %eax	# r, tmp1255
	movslq	%eax, %rdx	# tmp1255, tmp1254
	movq	%rdx, %rax	# tmp1254, tmp1256
	addq	%rax, %rax	# tmp1256
	addq	%rdx, %rax	# tmp1254, tmp1256
	salq	$2, %rax	#, tmp1256
	addq	%rdx, %rax	# tmp1254, tmp1256
	salq	$3, %rax	#, tmp1257
	addq	$rld+16, %rax	#, tmp1258
	movl	12(%rax), %ecx	# rld[r_104].mode, D.28339
	movl	-1576(%rbp), %eax	# r, tmp1260
	movslq	%eax, %rdx	# tmp1260, tmp1259
	movq	%rdx, %rax	# tmp1259, tmp1261
	addq	%rax, %rax	# tmp1261
	addq	%rdx, %rax	# tmp1259, tmp1261
	salq	$2, %rax	#, tmp1261
	addq	%rdx, %rax	# tmp1259, tmp1261
	salq	$3, %rax	#, tmp1262
	addq	$rld+80, %rax	#, tmp1263
	movl	12(%rax), %edi	# rld[r_104].when_needed, D.28341
	movl	-1576(%rbp), %eax	# r, tmp1265
	movslq	%eax, %rdx	# tmp1265, tmp1264
	movq	%rdx, %rax	# tmp1264, tmp1266
	addq	%rax, %rax	# tmp1266
	addq	%rdx, %rax	# tmp1264, tmp1266
	salq	$2, %rax	#, tmp1266
	addq	%rdx, %rax	# tmp1264, tmp1266
	salq	$3, %rax	#, tmp1267
	addq	$rld+64, %rax	#, tmp1268
	movl	8(%rax), %esi	# rld[r_104].opnum, D.28331
	movl	-1588(%rbp), %eax	# regno, regno.970
	movl	%edi, %edx	# D.28341,
	movl	%eax, %edi	# regno.970,
	call	mark_reload_reg_in_use	#
	.loc 1 5776 0
	movl	-1584(%rbp), %eax	# k, tmp1269
	movl	-1588(%rbp), %edx	# regno, tmp1270
	addl	%edx, %eax	# tmp1270, D.28331
	movl	$1, %edx	#, tmp1271
	movl	%eax, %ecx	# D.28331, tmp1632
	salq	%cl, %rdx	# tmp1632, D.28337
	movq	reload_reg_used_for_inherit(%rip), %rax	# reload_reg_used_for_inherit, reload_reg_used_for_inherit.971
	orq	%rdx, %rax	# D.28337, reload_reg_used_for_inherit.972
	movq	%rax, reload_reg_used_for_inherit(%rip)	# reload_reg_used_for_inherit.972, reload_reg_used_for_inherit
.L1660:
	.loc 1 5768 0
	addl	$1, -1584(%rbp)	#, k
.L1659:
	.loc 1 5768 0 is_stmt 0 discriminator 1
	movl	-1584(%rbp), %eax	# k, tmp1272
	cmpl	-1560(%rbp), %eax	# nr, tmp1272
	jl	.L1661	#,
.L1612:
.LBE129:
.LBE128:
	.loc 1 5785 0 is_stmt 1
	movl	-1576(%rbp), %eax	# r, tmp1274
	movslq	%eax, %rdx	# tmp1274, tmp1273
	movq	%rdx, %rax	# tmp1273, tmp1275
	addq	%rax, %rax	# tmp1275
	addq	%rdx, %rax	# tmp1273, tmp1275
	salq	$2, %rax	#, tmp1275
	addq	%rdx, %rax	# tmp1273, tmp1275
	salq	$3, %rax	#, tmp1276
	addq	$rld+64, %rax	#, tmp1277
	movq	(%rax), %rax	# rld[r_104].reg_rtx, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1662	#,
	.loc 1 5785 0 is_stmt 0 discriminator 1
	movl	-1576(%rbp), %eax	# r, tmp1279
	movslq	%eax, %rdx	# tmp1279, tmp1278
	movq	%rdx, %rax	# tmp1278, tmp1280
	addq	%rax, %rax	# tmp1280
	addq	%rdx, %rax	# tmp1278, tmp1280
	salq	$2, %rax	#, tmp1280
	addq	%rdx, %rax	# tmp1278, tmp1280
	salq	$3, %rax	#, tmp1281
	addq	$rld+96, %rax	#, tmp1282
	movzbl	(%rax), %eax	#, tmp1285
	andl	$1, %eax	#, D.28334
	testb	%al, %al	# D.28334
	je	.L1552	#,
.L1662:
	.loc 1 5786 0 is_stmt 1
	nop
.L1552:
.LBE121:
	.loc 1 5376 0
	addl	$1, -1644(%rbp)	#, j
.L1550:
	.loc 1 5376 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.973
	cmpl	%eax, -1644(%rbp)	# n_reloads.973, j
	jl	.L1663	#,
	.loc 1 5826 0 is_stmt 1
	movl	$0, -1644(%rbp)	#, j
	jmp	.L1664	#
.L1670:
.LBB130:
	.loc 1 5828 0
	movl	-1644(%rbp), %eax	# j, tmp1287
	cltq
	movzwl	reload_order(%rax,%rax), %eax	# reload_order, D.28328
	cwtl
	movl	%eax, -1556(%rbp)	# tmp1288, r
	.loc 1 5831 0
	movl	-1556(%rbp), %eax	# r, tmp1290
	movslq	%eax, %rdx	# tmp1290, tmp1289
	movq	%rdx, %rax	# tmp1289, tmp1291
	addq	%rax, %rax	# tmp1291
	addq	%rdx, %rax	# tmp1289, tmp1291
	salq	$2, %rax	#, tmp1291
	addq	%rdx, %rax	# tmp1289, tmp1291
	salq	$3, %rax	#, tmp1292
	addq	$rld+8, %rax	#, tmp1293
	movq	(%rax), %rax	# rld[r_505].out, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1665	#,
	.loc 1 5831 0 is_stmt 0 discriminator 1
	movl	-1556(%rbp), %eax	# r, tmp1295
	movslq	%eax, %rdx	# tmp1295, tmp1294
	movq	%rdx, %rax	# tmp1294, tmp1296
	addq	%rax, %rax	# tmp1296
	addq	%rdx, %rax	# tmp1294, tmp1296
	salq	$2, %rax	#, tmp1296
	addq	%rdx, %rax	# tmp1294, tmp1296
	salq	$3, %rax	#, tmp1297
	addq	$rld, %rax	#, tmp1298
	movq	(%rax), %rax	# rld[r_505].in, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1665	#,
	movl	-1556(%rbp), %eax	# r, tmp1300
	movslq	%eax, %rdx	# tmp1300, tmp1299
	movq	%rdx, %rax	# tmp1299, tmp1301
	addq	%rax, %rax	# tmp1301
	addq	%rdx, %rax	# tmp1299, tmp1301
	salq	$2, %rax	#, tmp1301
	addq	%rdx, %rax	# tmp1299, tmp1301
	salq	$3, %rax	#, tmp1302
	addq	$rld+96, %rax	#, tmp1303
	movzbl	(%rax), %eax	#, tmp1306
	shrb	$2, %al	#, D.28334
	andl	$1, %eax	#, D.28334
	testb	%al, %al	# D.28334
	jne	.L1665	#,
	.loc 1 5832 0 is_stmt 1
	jmp	.L1666	#
.L1665:
	.loc 1 5836 0
	movl	-1556(%rbp), %eax	# r, tmp1308
	movslq	%eax, %rdx	# tmp1308, tmp1307
	movq	%rdx, %rax	# tmp1307, tmp1309
	addq	%rax, %rax	# tmp1309
	addq	%rdx, %rax	# tmp1307, tmp1309
	salq	$2, %rax	#, tmp1309
	addq	%rdx, %rax	# tmp1307, tmp1309
	salq	$3, %rax	#, tmp1310
	addq	$rld+64, %rax	#, tmp1311
	movq	(%rax), %rax	# rld[r_505].reg_rtx, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1667	#,
	.loc 1 5836 0 is_stmt 0 discriminator 1
	movl	-1556(%rbp), %eax	# r, tmp1313
	movslq	%eax, %rdx	# tmp1313, tmp1312
	movq	%rdx, %rax	# tmp1312, tmp1314
	addq	%rax, %rax	# tmp1314
	addq	%rdx, %rax	# tmp1312, tmp1314
	salq	$2, %rax	#, tmp1314
	addq	%rdx, %rax	# tmp1312, tmp1314
	salq	$3, %rax	#, tmp1315
	addq	$rld+96, %rax	#, tmp1316
	movzbl	(%rax), %eax	#, tmp1319
	andl	$1, %eax	#, D.28334
	testb	%al, %al	# D.28334
	je	.L1668	#,
.L1667:
	.loc 1 5837 0 is_stmt 1
	jmp	.L1666	#
.L1668:
	.loc 1 5839 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.974
	subl	$1, %eax	#, D.28331
	cmpl	-1644(%rbp), %eax	# j, D.28331
	sete	%al	#, D.28333
	movzbl	%al, %edx	# D.28333, D.28331
	movl	-1556(%rbp), %ecx	# r, tmp1320
	movq	-1656(%rbp), %rax	# chain, tmp1321
	movl	%ecx, %esi	# tmp1320,
	movq	%rax, %rdi	# tmp1321,
	call	allocate_reload_reg	#
	testl	%eax, %eax	# D.28331
	jne	.L1666	#,
	.loc 1 5840 0
	jmp	.L1669	#
.L1666:
.LBE130:
	.loc 1 5826 0
	addl	$1, -1644(%rbp)	#, j
.L1664:
	.loc 1 5826 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.975
	cmpl	%eax, -1644(%rbp)	# n_reloads.975, j
	jl	.L1670	#,
.L1669:
	.loc 1 5844 0 is_stmt 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.976
	cmpl	%eax, -1644(%rbp)	# n_reloads.976, j
	jne	.L1671	#,
	.loc 1 5846 0
	movl	$1, -1628(%rbp)	#, win
	.loc 1 5847 0
	jmp	.L1672	#
.L1671:
	.loc 1 5354 0
	subl	$1, -1624(%rbp)	#, inheritance
.L1549:
	.loc 1 5354 0 is_stmt 0 discriminator 1
	cmpl	$0, -1624(%rbp)	#, inheritance
	jns	.L1673	#,
.L1672:
	.loc 1 5853 0 is_stmt 1
	cmpl	$0, -1628(%rbp)	#, win
	jne	.L1674	#,
	.loc 1 5857 0
	leaq	-1488(%rbp), %rdx	#, tmp1322
	movq	-1656(%rbp), %rax	# chain, tmp1323
	movq	%rdx, %rsi	# tmp1322,
	movq	%rax, %rdi	# tmp1323,
	call	choose_reload_regs_init	#
	.loc 1 5861 0
	movq	-1656(%rbp), %rax	# chain, tmp1324
	movl	96(%rax), %edx	# chain_79(D)->n_reloads, D.28331
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.977
	cmpl	%eax, %edx	# n_reloads.977, D.28331
	je	.L1675	#,
	.loc 1 5862 0
	movl	$__FUNCTION__.15636, %edx	#,
	movl	$5862, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1675:
	.loc 1 5864 0
	movl	$0, -1648(%rbp)	#, i
	jmp	.L1676	#
.L1684:
	.loc 1 5866 0
	movq	-1656(%rbp), %rax	# chain, tmp1325
	movq	88(%rax), %rcx	# chain_79(D)->rld, D.28343
	movl	-1648(%rbp), %eax	# i, tmp1326
	movslq	%eax, %rdx	# tmp1326, D.28337
	movq	%rdx, %rax	# D.28337, tmp1327
	addq	%rax, %rax	# tmp1327
	addq	%rdx, %rax	# D.28337, tmp1327
	salq	$2, %rax	#, tmp1327
	addq	%rdx, %rax	# D.28337, tmp1327
	salq	$3, %rax	#, tmp1328
	addq	%rcx, %rax	# D.28343, D.28343
	movl	56(%rax), %eax	# _527->regno, D.28331
	testl	%eax, %eax	# D.28331
	js	.L1677	#,
	.loc 1 5866 0 is_stmt 0 discriminator 1
	movq	-1656(%rbp), %rax	# chain, tmp1329
	movq	88(%rax), %rcx	# chain_79(D)->rld, D.28343
	movl	-1648(%rbp), %eax	# i, tmp1330
	movslq	%eax, %rdx	# tmp1330, D.28337
	movq	%rdx, %rax	# D.28337, tmp1331
	addq	%rax, %rax	# tmp1331
	addq	%rdx, %rax	# D.28337, tmp1331
	salq	$2, %rax	#, tmp1331
	addq	%rdx, %rax	# D.28337, tmp1331
	salq	$3, %rax	#, tmp1332
	addq	%rcx, %rax	# D.28343, D.28343
	movq	64(%rax), %rax	# _532->reg_rtx, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1678	#,
.L1677:
	.loc 1 5867 0 is_stmt 1
	jmp	.L1679	#
.L1678:
	.loc 1 5868 0
	movq	-1656(%rbp), %rax	# chain, tmp1333
	movq	88(%rax), %rcx	# chain_79(D)->rld, D.28343
	movl	-1648(%rbp), %eax	# i, tmp1334
	movslq	%eax, %rdx	# tmp1334, D.28337
	movq	%rdx, %rax	# D.28337, tmp1335
	addq	%rax, %rax	# tmp1335
	addq	%rdx, %rax	# D.28337, tmp1335
	salq	$2, %rax	#, tmp1335
	addq	%rdx, %rax	# D.28337, tmp1335
	salq	$3, %rax	#, tmp1336
	addq	%rcx, %rax	# D.28343, D.28343
	movl	92(%rax), %ecx	# _537->when_needed, D.28341
	movl	-1648(%rbp), %eax	# i, tmp1338
	movslq	%eax, %rdx	# tmp1338, tmp1337
	movq	%rdx, %rax	# tmp1337, tmp1339
	addq	%rax, %rax	# tmp1339
	addq	%rdx, %rax	# tmp1337, tmp1339
	salq	$2, %rax	#, tmp1339
	addq	%rdx, %rax	# tmp1337, tmp1339
	salq	$3, %rax	#, tmp1340
	addq	$rld+80, %rax	#, tmp1341
	movl	12(%rax), %eax	# rld[i_2].when_needed, D.28341
	cmpl	%eax, %ecx	# D.28341, D.28341
	je	.L1680	#,
	.loc 1 5869 0
	movl	$__FUNCTION__.15636, %edx	#,
	movl	$5869, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1680:
	.loc 1 5870 0
	movl	$0, -1644(%rbp)	#, j
	jmp	.L1681	#
.L1683:
	.loc 1 5871 0
	movl	-1644(%rbp), %eax	# j, tmp1343
	cltq
	movzwl	spill_regs(%rax,%rax), %eax	# spill_regs, D.28328
	movswl	%ax, %ecx	# D.28328, D.28331
	movq	-1656(%rbp), %rax	# chain, tmp1344
	movq	88(%rax), %rsi	# chain_79(D)->rld, D.28343
	movl	-1648(%rbp), %eax	# i, tmp1345
	movslq	%eax, %rdx	# tmp1345, D.28337
	movq	%rdx, %rax	# D.28337, tmp1346
	addq	%rax, %rax	# tmp1346
	addq	%rdx, %rax	# D.28337, tmp1346
	salq	$2, %rax	#, tmp1346
	addq	%rdx, %rax	# D.28337, tmp1346
	salq	$3, %rax	#, tmp1347
	addq	%rsi, %rax	# D.28343, D.28343
	movl	56(%rax), %eax	# _547->regno, D.28331
	cmpl	%eax, %ecx	# D.28331, D.28331
	jne	.L1682	#,
	.loc 1 5872 0
	movl	-1648(%rbp), %edx	# i, tmp1348
	movl	-1644(%rbp), %eax	# j, tmp1349
	movl	%edx, %esi	# tmp1348,
	movl	%eax, %edi	# tmp1349,
	call	set_reload_reg	#
	testl	%eax, %eax	# D.28331
	jne	.L1682	#,
	.loc 1 5873 0
	movq	-1656(%rbp), %rax	# chain, tmp1350
	movq	32(%rax), %rax	# chain_79(D)->insn, D.28332
	movl	-1648(%rbp), %edx	# i, tmp1351
	movl	%edx, %esi	# tmp1351,
	movq	%rax, %rdi	# D.28332,
	call	failed_reload	#
.L1682:
	.loc 1 5870 0
	addl	$1, -1644(%rbp)	#, j
.L1681:
	.loc 1 5870 0 is_stmt 0 discriminator 1
	movl	n_spills(%rip), %eax	# n_spills, n_spills.978
	cmpl	%eax, -1644(%rbp)	# n_spills.978, j
	jl	.L1683	#,
.L1679:
	.loc 1 5864 0 is_stmt 1
	addl	$1, -1648(%rbp)	#, i
.L1676:
	.loc 1 5864 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.979
	cmpl	%eax, -1648(%rbp)	# n_reloads.979, i
	jl	.L1684	#,
.L1674:
	.loc 1 5885 0 is_stmt 1
	movl	flag_expensive_optimizations(%rip), %eax	# flag_expensive_optimizations, tmp1352
	movl	%eax, -1632(%rbp)	# tmp1352, pass
	jmp	.L1685	#
.L1697:
	.loc 1 5887 0
	movl	$0, -1644(%rbp)	#, j
	jmp	.L1686	#
.L1696:
.LBB131:
	.loc 1 5889 0
	movl	-1644(%rbp), %eax	# j, tmp1354
	cltq
	movzwl	reload_order(%rax,%rax), %eax	# reload_order, D.28328
	cwtl
	movl	%eax, -1552(%rbp)	# tmp1355, r
	.loc 1 5891 0
	movl	-1552(%rbp), %eax	# r, tmp1357
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28342
	testb	%al, %al	# D.28342
	je	.L1687	#,
	.loc 1 5891 0 is_stmt 0 discriminator 1
	movl	-1552(%rbp), %eax	# r, tmp1359
	movslq	%eax, %rdx	# tmp1359, tmp1358
	movq	%rdx, %rax	# tmp1358, tmp1360
	addq	%rax, %rax	# tmp1360
	addq	%rdx, %rax	# tmp1358, tmp1360
	salq	$2, %rax	#, tmp1360
	addq	%rdx, %rax	# tmp1358, tmp1360
	salq	$3, %rax	#, tmp1361
	addq	$rld+64, %rax	#, tmp1362
	movq	(%rax), %rax	# rld[r_557].reg_rtx, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1687	#,
	.loc 1 5892 0 is_stmt 1
	movl	-1552(%rbp), %eax	# r, tmp1364
	movslq	%eax, %rdx	# tmp1364, tmp1363
	movq	%rdx, %rax	# tmp1363, tmp1365
	addq	%rax, %rax	# tmp1365
	addq	%rdx, %rax	# tmp1363, tmp1365
	salq	$2, %rax	#, tmp1365
	addq	%rdx, %rax	# tmp1363, tmp1365
	salq	$3, %rax	#, tmp1366
	addq	$rld+64, %rax	#, tmp1367
	movq	(%rax), %rax	# rld[r_557].reg_rtx, tmp1368
	movq	%rax, -1520(%rbp)	# tmp1368, check_reg
	jmp	.L1688	#
.L1687:
	.loc 1 5893 0
	movl	-1552(%rbp), %eax	# r, tmp1370
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1689	#,
	.loc 1 5894 0
	movl	-1552(%rbp), %eax	# r, tmp1372
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28332
	movzwl	(%rax), %eax	# _562->code, D.28335
	cmpw	$61, %ax	#, D.28335
	je	.L1690	#,
	.loc 1 5895 0
	movl	-1552(%rbp), %eax	# r, tmp1374
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28332
	movzwl	(%rax), %eax	# _564->code, D.28335
	cmpw	$63, %ax	#, D.28335
	jne	.L1689	#,
.L1690:
	.loc 1 5896 0
	movl	-1552(%rbp), %eax	# r, tmp1376
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, tmp1377
	movq	%rax, -1520(%rbp)	# tmp1377, check_reg
	jmp	.L1688	#
.L1689:
	.loc 1 5898 0
	jmp	.L1691	#
.L1688:
	.loc 1 5901 0
	movl	-1552(%rbp), %eax	# r, tmp1379
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28342
	.loc 1 5899 0
	testb	%al, %al	# D.28342
	je	.L1692	#,
	.loc 1 5899 0 is_stmt 0 discriminator 1
	movl	-1552(%rbp), %eax	# r, tmp1381
	movslq	%eax, %rdx	# tmp1381, tmp1380
	movq	%rdx, %rax	# tmp1380, tmp1382
	addq	%rax, %rax	# tmp1382
	addq	%rdx, %rax	# tmp1380, tmp1382
	salq	$2, %rax	#, tmp1382
	addq	%rdx, %rax	# tmp1380, tmp1382
	salq	$3, %rax	#, tmp1383
	addq	$rld+8, %rax	#, tmp1384
	movq	(%rax), %rbx	# rld[r_557].out, iftmp.980
	jmp	.L1693	#
.L1692:
	.loc 1 5899 0 discriminator 2
	movq	const_int_rtx+512(%rip), %rbx	# const_int_rtx, iftmp.980
.L1693:
	.loc 1 5899 0 discriminator 3
	movl	-1552(%rbp), %eax	# r, tmp1386
	movslq	%eax, %rdx	# tmp1386, tmp1385
	movq	%rdx, %rax	# tmp1385, tmp1387
	addq	%rax, %rax	# tmp1387
	addq	%rdx, %rax	# tmp1385, tmp1387
	salq	$2, %rax	#, tmp1387
	addq	%rdx, %rax	# tmp1385, tmp1387
	salq	$3, %rax	#, tmp1388
	addq	$rld, %rax	#, tmp1389
	movq	(%rax), %r15	# rld[r_557].in, D.28332
	movl	-1552(%rbp), %eax	# r, tmp1391
	movslq	%eax, %rdx	# tmp1391, tmp1390
	movq	%rdx, %rax	# tmp1390, tmp1392
	addq	%rax, %rax	# tmp1392
	addq	%rdx, %rax	# tmp1390, tmp1392
	salq	$2, %rax	#, tmp1392
	addq	%rdx, %rax	# tmp1390, tmp1392
	salq	$3, %rax	#, tmp1393
	addq	$rld+80, %rax	#, tmp1394
	movl	12(%rax), %r14d	# rld[r_557].when_needed, D.28341
	movl	-1552(%rbp), %eax	# r, tmp1396
	movslq	%eax, %rdx	# tmp1396, tmp1395
	movq	%rdx, %rax	# tmp1395, tmp1397
	addq	%rax, %rax	# tmp1397
	addq	%rdx, %rax	# tmp1395, tmp1397
	salq	$2, %rax	#, tmp1397
	addq	%rdx, %rax	# tmp1395, tmp1397
	salq	$3, %rax	#, tmp1398
	addq	$rld+64, %rax	#, tmp1399
	movl	8(%rax), %r13d	# rld[r_557].opnum, D.28331
	movl	-1552(%rbp), %eax	# r, tmp1401
	movslq	%eax, %rdx	# tmp1401, tmp1400
	movq	%rdx, %rax	# tmp1400, tmp1402
	addq	%rax, %rax	# tmp1402
	addq	%rdx, %rax	# tmp1400, tmp1402
	salq	$2, %rax	#, tmp1402
	addq	%rdx, %rax	# tmp1400, tmp1402
	salq	$3, %rax	#, tmp1403
	addq	$rld+16, %rax	#, tmp1404
	movl	12(%rax), %r12d	# rld[r_557].mode, D.28339
	movq	-1520(%rbp), %rax	# check_reg, tmp1405
	movq	%rax, %rdi	# tmp1405,
	call	true_regnum	#
	movl	$1, 8(%rsp)	#,
	movl	-1552(%rbp), %edx	# r, tmp1406
	movl	%edx, (%rsp)	# tmp1406,
	movq	%rbx, %r9	# iftmp.980,
	movq	%r15, %r8	# D.28332,
	movl	%r14d, %ecx	# D.28341,
	movl	%r13d, %edx	# D.28331,
	movl	%r12d, %esi	# D.28339,
	movl	%eax, %edi	# D.28331,
	call	free_for_value_p	#
	testl	%eax, %eax	# D.28331
	jne	.L1694	#,
	.loc 1 5905 0 is_stmt 1
	cmpl	$0, -1632(%rbp)	#, pass
	je	.L1695	#,
	.loc 1 5906 0
	jmp	.L1691	#
.L1695:
	.loc 1 5907 0
	movl	-1552(%rbp), %eax	# r, tmp1408
	cltq
	movb	$0, reload_inherited(%rax)	#, reload_inherited
	.loc 1 5908 0
	movl	-1552(%rbp), %eax	# r, tmp1410
	cltq
	movq	$0, reload_override_in(,%rax,8)	#, reload_override_in
	jmp	.L1691	#
.L1694:
	.loc 1 5922 0
	movl	-1552(%rbp), %eax	# r, tmp1412
	movslq	%eax, %rdx	# tmp1412, tmp1411
	movq	%rdx, %rax	# tmp1411, tmp1413
	addq	%rax, %rax	# tmp1413
	addq	%rdx, %rax	# tmp1411, tmp1413
	salq	$2, %rax	#, tmp1413
	addq	%rdx, %rax	# tmp1411, tmp1413
	salq	$3, %rax	#, tmp1414
	addq	$rld, %rax	#, tmp1415
	movq	(%rax), %rax	# rld[r_557].in, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1691	#,
	.loc 1 5923 0
	movl	-1552(%rbp), %eax	# r, tmp1417
	movslq	%eax, %rdx	# tmp1417, tmp1416
	movq	%rdx, %rax	# tmp1416, tmp1418
	addq	%rax, %rax	# tmp1418
	addq	%rdx, %rax	# tmp1416, tmp1418
	salq	$2, %rax	#, tmp1418
	addq	%rdx, %rax	# tmp1416, tmp1418
	salq	$3, %rax	#, tmp1419
	addq	$rld+8, %rax	#, tmp1420
	movq	(%rax), %rcx	# rld[r_557].out, D.28332
	movl	-1552(%rbp), %eax	# r, tmp1422
	movslq	%eax, %rdx	# tmp1422, tmp1421
	movq	%rdx, %rax	# tmp1421, tmp1423
	addq	%rax, %rax	# tmp1423
	addq	%rdx, %rax	# tmp1421, tmp1423
	salq	$2, %rax	#, tmp1423
	addq	%rdx, %rax	# tmp1421, tmp1423
	salq	$3, %rax	#, tmp1424
	addq	$rld, %rax	#, tmp1425
	movq	(%rax), %rax	# rld[r_557].in, D.28332
	cmpq	%rax, %rcx	# D.28332, D.28332
	je	.L1691	#,
	.loc 1 5924 0
	movl	-1552(%rbp), %eax	# r, tmp1427
	movslq	%eax, %rdx	# tmp1427, tmp1426
	movq	%rdx, %rax	# tmp1426, tmp1428
	addq	%rax, %rax	# tmp1428
	addq	%rdx, %rax	# tmp1426, tmp1428
	salq	$2, %rax	#, tmp1428
	addq	%rdx, %rax	# tmp1426, tmp1428
	salq	$3, %rax	#, tmp1429
	addq	$rld, %rax	#, tmp1430
	movq	(%rax), %rax	# rld[r_557].in, D.28332
	movq	%rax, %rdi	# D.28332,
	call	remove_address_replacements	#
	testl	%eax, %eax	# D.28331
	je	.L1691	#,
	.loc 1 5924 0 is_stmt 0 discriminator 1
	cmpl	$0, -1632(%rbp)	#, pass
	je	.L1691	#,
	.loc 1 5925 0 is_stmt 1
	movl	$2, -1632(%rbp)	#, pass
.L1691:
.LBE131:
	.loc 1 5887 0
	addl	$1, -1644(%rbp)	#, j
.L1686:
	.loc 1 5887 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.981
	cmpl	%eax, -1644(%rbp)	# n_reloads.981, j
	jl	.L1696	#,
	.loc 1 5885 0 is_stmt 1
	subl	$1, -1632(%rbp)	#, pass
.L1685:
	.loc 1 5885 0 is_stmt 0 discriminator 1
	cmpl	$0, -1632(%rbp)	#, pass
	jns	.L1697	#,
	.loc 1 5931 0 is_stmt 1
	movl	$0, -1644(%rbp)	#, j
	jmp	.L1698	#
.L1700:
	.loc 1 5932 0
	movl	-1644(%rbp), %eax	# j, tmp1432
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1699	#,
	.loc 1 5933 0
	movl	-1644(%rbp), %eax	# j, tmp1434
	cltq
	movq	reload_override_in(,%rax,8), %rcx	# reload_override_in, D.28332
	movl	-1644(%rbp), %eax	# j, tmp1436
	movslq	%eax, %rdx	# tmp1436, tmp1435
	movq	%rdx, %rax	# tmp1435, tmp1437
	addq	%rax, %rax	# tmp1437
	addq	%rdx, %rax	# tmp1435, tmp1437
	salq	$2, %rax	#, tmp1437
	addq	%rdx, %rax	# tmp1435, tmp1437
	salq	$3, %rax	#, tmp1438
	addq	$rld, %rax	#, tmp1439
	movq	%rcx, (%rax)	# D.28332, rld[j_8].in
.L1699:
	.loc 1 5931 0
	addl	$1, -1644(%rbp)	#, j
.L1698:
	.loc 1 5931 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.982
	cmpl	%eax, -1644(%rbp)	# n_reloads.982, j
	jl	.L1700	#,
	.loc 1 5938 0 is_stmt 1
	movl	$0, -1644(%rbp)	#, j
	jmp	.L1701	#
.L1706:
	.loc 1 5939 0
	movl	-1644(%rbp), %eax	# j, tmp1441
	movslq	%eax, %rdx	# tmp1441, tmp1440
	movq	%rdx, %rax	# tmp1440, tmp1442
	addq	%rax, %rax	# tmp1442
	addq	%rdx, %rax	# tmp1440, tmp1442
	salq	$2, %rax	#, tmp1442
	addq	%rdx, %rax	# tmp1440, tmp1442
	salq	$3, %rax	#, tmp1443
	addq	$rld+64, %rax	#, tmp1444
	movq	(%rax), %rax	# rld[j_9].reg_rtx, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1702	#,
	.loc 1 5940 0
	movl	-1644(%rbp), %eax	# j, tmp1446
	movslq	%eax, %rdx	# tmp1446, tmp1445
	movq	%rdx, %rax	# tmp1445, tmp1447
	addq	%rax, %rax	# tmp1447
	addq	%rdx, %rax	# tmp1445, tmp1447
	salq	$2, %rax	#, tmp1447
	addq	%rdx, %rax	# tmp1445, tmp1447
	salq	$3, %rax	#, tmp1448
	addq	$rld+96, %rax	#, tmp1449
	movzbl	(%rax), %eax	#, tmp1452
	andl	$1, %eax	#, D.28334
	testb	%al, %al	# D.28334
	je	.L1703	#,
	.loc 1 5940 0 is_stmt 0 discriminator 1
	movl	-1644(%rbp), %eax	# j, tmp1454
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28342
	testb	%al, %al	# D.28342
	je	.L1704	#,
.L1703:
	.loc 1 5941 0 is_stmt 1
	movl	-1644(%rbp), %eax	# j, tmp1456
	movslq	%eax, %rdx	# tmp1456, tmp1455
	movq	%rdx, %rax	# tmp1455, tmp1457
	addq	%rax, %rax	# tmp1457
	addq	%rdx, %rax	# tmp1455, tmp1457
	salq	$2, %rax	#, tmp1457
	addq	%rdx, %rax	# tmp1455, tmp1457
	salq	$3, %rax	#, tmp1458
	addq	$rld, %rax	#, tmp1459
	movq	(%rax), %rax	# rld[j_9].in, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1702	#,
	.loc 1 5941 0 is_stmt 0 discriminator 1
	movl	-1644(%rbp), %eax	# j, tmp1461
	movslq	%eax, %rdx	# tmp1461, tmp1460
	movq	%rdx, %rax	# tmp1460, tmp1462
	addq	%rax, %rax	# tmp1462
	addq	%rdx, %rax	# tmp1460, tmp1462
	salq	$2, %rax	#, tmp1462
	addq	%rdx, %rax	# tmp1460, tmp1462
	salq	$3, %rax	#, tmp1463
	addq	$rld+8, %rax	#, tmp1464
	movq	(%rax), %rax	# rld[j_9].out, D.28332
	testq	%rax, %rax	# D.28332
	jne	.L1702	#,
	.loc 1 5942 0 is_stmt 1
	movl	-1644(%rbp), %eax	# j, tmp1466
	movslq	%eax, %rdx	# tmp1466, tmp1465
	movq	%rdx, %rax	# tmp1465, tmp1467
	addq	%rax, %rax	# tmp1467
	addq	%rdx, %rax	# tmp1465, tmp1467
	salq	$2, %rax	#, tmp1467
	addq	%rdx, %rax	# tmp1465, tmp1467
	salq	$3, %rax	#, tmp1468
	addq	$rld+96, %rax	#, tmp1469
	movzbl	(%rax), %eax	#, tmp1472
	shrb	$2, %al	#, D.28334
	andl	$1, %eax	#, D.28334
	testb	%al, %al	# D.28334
	jne	.L1702	#,
.L1704:
.LBB132:
	.loc 1 5944 0
	movl	-1644(%rbp), %eax	# j, tmp1474
	movslq	%eax, %rdx	# tmp1474, tmp1473
	movq	%rdx, %rax	# tmp1473, tmp1475
	addq	%rax, %rax	# tmp1475
	addq	%rdx, %rax	# tmp1473, tmp1475
	salq	$2, %rax	#, tmp1475
	addq	%rdx, %rax	# tmp1473, tmp1475
	salq	$3, %rax	#, tmp1476
	addq	$rld+64, %rax	#, tmp1477
	movq	(%rax), %rax	# rld[j_9].reg_rtx, D.28332
	movq	%rax, %rdi	# D.28332,
	call	true_regnum	#
	movl	%eax, -1548(%rbp)	# tmp1478, regno
	.loc 1 5946 0
	movl	-1548(%rbp), %eax	# regno, tmp1480
	cltq
	movzwl	spill_reg_order(%rax,%rax), %eax	# spill_reg_order, D.28328
	testw	%ax, %ax	# D.28328
	js	.L1705	#,
	.loc 1 5947 0
	movl	-1644(%rbp), %eax	# j, tmp1482
	movslq	%eax, %rdx	# tmp1482, tmp1481
	movq	%rdx, %rax	# tmp1481, tmp1483
	addq	%rax, %rax	# tmp1483
	addq	%rdx, %rax	# tmp1481, tmp1483
	salq	$2, %rax	#, tmp1483
	addq	%rdx, %rax	# tmp1481, tmp1483
	salq	$3, %rax	#, tmp1484
	addq	$rld+16, %rax	#, tmp1485
	movl	12(%rax), %ecx	# rld[j_9].mode, D.28339
	movl	-1644(%rbp), %eax	# j, tmp1487
	movslq	%eax, %rdx	# tmp1487, tmp1486
	movq	%rdx, %rax	# tmp1486, tmp1488
	addq	%rax, %rax	# tmp1488
	addq	%rdx, %rax	# tmp1486, tmp1488
	salq	$2, %rax	#, tmp1488
	addq	%rdx, %rax	# tmp1486, tmp1488
	salq	$3, %rax	#, tmp1489
	addq	$rld+80, %rax	#, tmp1490
	movl	12(%rax), %edi	# rld[j_9].when_needed, D.28341
	movl	-1644(%rbp), %eax	# j, tmp1492
	movslq	%eax, %rdx	# tmp1492, tmp1491
	movq	%rdx, %rax	# tmp1491, tmp1493
	addq	%rax, %rax	# tmp1493
	addq	%rdx, %rax	# tmp1491, tmp1493
	salq	$2, %rax	#, tmp1493
	addq	%rdx, %rax	# tmp1491, tmp1493
	salq	$3, %rax	#, tmp1494
	addq	$rld+64, %rax	#, tmp1495
	movl	8(%rax), %esi	# rld[j_9].opnum, D.28331
	movl	-1548(%rbp), %eax	# regno, regno.983
	movl	%edi, %edx	# D.28341,
	movl	%eax, %edi	# regno.983,
	call	clear_reload_reg_in_use	#
.L1705:
	.loc 1 5949 0
	movl	-1644(%rbp), %eax	# j, tmp1497
	movslq	%eax, %rdx	# tmp1497, tmp1496
	movq	%rdx, %rax	# tmp1496, tmp1498
	addq	%rax, %rax	# tmp1498
	addq	%rdx, %rax	# tmp1496, tmp1498
	salq	$2, %rax	#, tmp1498
	addq	%rdx, %rax	# tmp1496, tmp1498
	salq	$3, %rax	#, tmp1499
	addq	$rld+64, %rax	#, tmp1500
	movq	$0, (%rax)	#, rld[j_9].reg_rtx
	.loc 1 5950 0
	movl	-1644(%rbp), %eax	# j, tmp1502
	cltq
	movl	$-1, reload_spill_index(,%rax,4)	#, reload_spill_index
.L1702:
.LBE132:
	.loc 1 5938 0
	addl	$1, -1644(%rbp)	#, j
.L1701:
	.loc 1 5938 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.984
	cmpl	%eax, -1644(%rbp)	# n_reloads.984, j
	jl	.L1706	#,
	.loc 1 5954 0 is_stmt 1
	movl	$0, -1644(%rbp)	#, j
	jmp	.L1707	#
.L1757:
.LBB133:
	.loc 1 5956 0
	movl	-1644(%rbp), %eax	# j, tmp1504
	cltq
	movzwl	reload_order(%rax,%rax), %eax	# reload_order, D.28328
	cwtl
	movl	%eax, -1544(%rbp)	# tmp1505, r
	.loc 1 5958 0
	movl	-1544(%rbp), %eax	# r, tmp1507
	cltq
	movl	reload_spill_index(,%rax,4), %eax	# reload_spill_index, tmp1508
	movl	%eax, -1648(%rbp)	# tmp1508, i
	.loc 1 5963 0
	movl	-1544(%rbp), %eax	# r, tmp1510
	movslq	%eax, %rdx	# tmp1510, tmp1509
	movq	%rdx, %rax	# tmp1509, tmp1511
	addq	%rax, %rax	# tmp1511
	addq	%rdx, %rax	# tmp1509, tmp1511
	salq	$2, %rax	#, tmp1511
	addq	%rdx, %rax	# tmp1509, tmp1511
	salq	$3, %rax	#, tmp1512
	addq	$rld+48, %rax	#, tmp1513
	movq	(%rax), %rax	# rld[r_608].out_reg, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1708	#,
	.loc 1 5963 0 is_stmt 0 discriminator 1
	movl	-1544(%rbp), %eax	# r, tmp1515
	movslq	%eax, %rdx	# tmp1515, tmp1514
	movq	%rdx, %rax	# tmp1514, tmp1516
	addq	%rax, %rax	# tmp1516
	addq	%rdx, %rax	# tmp1514, tmp1516
	salq	$2, %rax	#, tmp1516
	addq	%rdx, %rax	# tmp1514, tmp1516
	salq	$3, %rax	#, tmp1517
	addq	$rld+48, %rax	#, tmp1518
	movq	(%rax), %rax	# rld[r_608].out_reg, D.28332
	movzwl	(%rax), %eax	# _611->code, D.28335
	cmpw	$61, %ax	#, D.28335
	jne	.L1708	#,
	.loc 1 5964 0 is_stmt 1
	movl	-1544(%rbp), %eax	# r, tmp1520
	movslq	%eax, %rdx	# tmp1520, tmp1519
	movq	%rdx, %rax	# tmp1519, tmp1521
	addq	%rax, %rax	# tmp1521
	addq	%rdx, %rax	# tmp1519, tmp1521
	salq	$2, %rax	#, tmp1521
	addq	%rdx, %rax	# tmp1519, tmp1521
	salq	$3, %rax	#, tmp1522
	addq	$rld+64, %rax	#, tmp1523
	movq	(%rax), %rax	# rld[r_608].reg_rtx, D.28332
	testq	%rax, %rax	# D.28332
	je	.L1708	#,
.LBB134:
	.loc 1 5966 0
	movl	-1544(%rbp), %eax	# r, tmp1525
	movslq	%eax, %rdx	# tmp1525, tmp1524
	movq	%rdx, %rax	# tmp1524, tmp1526
	addq	%rax, %rax	# tmp1526
	addq	%rdx, %rax	# tmp1524, tmp1526
	salq	$2, %rax	#, tmp1526
	addq	%rdx, %rax	# tmp1524, tmp1526
	salq	$3, %rax	#, tmp1527
	addq	$rld+48, %rax	#, tmp1528
	movq	(%rax), %rax	# rld[r_608].out_reg, D.28332
	movl	8(%rax), %eax	# _614->fld[0].rtuint, D.28329
	movl	%eax, -1540(%rbp)	# D.28329, nregno
	.loc 1 5967 0
	movl	$1, -1580(%rbp)	#, nr
	.loc 1 5969 0
	cmpl	$52, -1540(%rbp)	#, nregno
	jg	.L1709	#,
	.loc 1 5970 0
	cmpl	$7, -1540(%rbp)	#, nregno
	jle	.L1710	#,
	.loc 1 5970 0 is_stmt 0 discriminator 1
	cmpl	$15, -1540(%rbp)	#, nregno
	jle	.L1711	#,
.L1710:
	.loc 1 5970 0 discriminator 2
	cmpl	$20, -1540(%rbp)	#, nregno
	jle	.L1712	#,
	.loc 1 5970 0 discriminator 1
	cmpl	$28, -1540(%rbp)	#, nregno
	jle	.L1711	#,
.L1712:
	.loc 1 5970 0 discriminator 2
	cmpl	$44, -1540(%rbp)	#, nregno
	jle	.L1713	#,
	.loc 1 5970 0 discriminator 1
	cmpl	$52, -1540(%rbp)	#, nregno
	jle	.L1711	#,
.L1713:
	.loc 1 5970 0 discriminator 2
	cmpl	$28, -1540(%rbp)	#, nregno
	jle	.L1714	#,
	.loc 1 5970 0 discriminator 1
	cmpl	$36, -1540(%rbp)	#, nregno
	jg	.L1714	#,
.L1711:
	movl	-1544(%rbp), %eax	# r, tmp1530
	movslq	%eax, %rdx	# tmp1530, tmp1529
	movq	%rdx, %rax	# tmp1529, tmp1531
	addq	%rax, %rax	# tmp1531
	addq	%rdx, %rax	# tmp1529, tmp1531
	salq	$2, %rax	#, tmp1531
	addq	%rdx, %rax	# tmp1529, tmp1531
	salq	$3, %rax	#, tmp1532
	addq	$rld+16, %rax	#, tmp1533
	movl	12(%rax), %eax	# rld[r_608].mode, D.28339
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28340
	cmpl	$5, %eax	#, D.28340
	je	.L1715	#,
	.loc 1 5970 0 discriminator 2
	movl	-1544(%rbp), %eax	# r, tmp1536
	movslq	%eax, %rdx	# tmp1536, tmp1535
	movq	%rdx, %rax	# tmp1535, tmp1537
	addq	%rax, %rax	# tmp1537
	addq	%rdx, %rax	# tmp1535, tmp1537
	salq	$2, %rax	#, tmp1537
	addq	%rdx, %rax	# tmp1535, tmp1537
	salq	$3, %rax	#, tmp1538
	addq	$rld+16, %rax	#, tmp1539
	movl	12(%rax), %eax	# rld[r_608].mode, D.28339
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28340
	cmpl	$6, %eax	#, D.28340
	jne	.L1716	#,
.L1715:
	.loc 1 5970 0 discriminator 1
	movl	$2, %eax	#, iftmp.986
	jmp	.L1717	#
.L1716:
	movl	$1, %eax	#, iftmp.986
.L1717:
	.loc 1 5970 0 discriminator 3
	jmp	.L1718	#
.L1714:
	.loc 1 5970 0 discriminator 2
	movl	-1544(%rbp), %eax	# r, tmp1542
	movslq	%eax, %rdx	# tmp1542, tmp1541
	movq	%rdx, %rax	# tmp1541, tmp1543
	addq	%rax, %rax	# tmp1543
	addq	%rdx, %rax	# tmp1541, tmp1543
	salq	$2, %rax	#, tmp1543
	addq	%rdx, %rax	# tmp1541, tmp1543
	salq	$3, %rax	#, tmp1544
	addq	$rld+16, %rax	#, tmp1545
	movl	12(%rax), %eax	# rld[r_608].mode, D.28339
	cmpl	$18, %eax	#, D.28339
	jne	.L1719	#,
	.loc 1 5970 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.989
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1720	#,
	movl	$2, %eax	#, iftmp.988
	jmp	.L1718	#
.L1720:
	.loc 1 5970 0 discriminator 2
	movl	$3, %eax	#, iftmp.988
	jmp	.L1718	#
.L1719:
	movl	-1544(%rbp), %eax	# r, tmp1547
	movslq	%eax, %rdx	# tmp1547, tmp1546
	movq	%rdx, %rax	# tmp1546, tmp1548
	addq	%rax, %rax	# tmp1548
	addq	%rdx, %rax	# tmp1546, tmp1548
	salq	$2, %rax	#, tmp1548
	addq	%rdx, %rax	# tmp1546, tmp1548
	salq	$3, %rax	#, tmp1549
	addq	$rld+16, %rax	#, tmp1550
	movl	12(%rax), %eax	# rld[r_608].mode, D.28339
	cmpl	$24, %eax	#, D.28339
	jne	.L1723	#,
	.loc 1 5970 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.992
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1724	#,
	movl	$4, %eax	#, iftmp.991
	jmp	.L1718	#
.L1724:
	.loc 1 5970 0 discriminator 2
	movl	$6, %eax	#, iftmp.991
	jmp	.L1718	#
.L1723:
	movl	-1544(%rbp), %eax	# r, tmp1552
	movslq	%eax, %rdx	# tmp1552, tmp1551
	movq	%rdx, %rax	# tmp1551, tmp1553
	addq	%rax, %rax	# tmp1553
	addq	%rdx, %rax	# tmp1551, tmp1553
	salq	$2, %rax	#, tmp1553
	addq	%rdx, %rax	# tmp1551, tmp1553
	salq	$3, %rax	#, tmp1554
	addq	$rld+16, %rax	#, tmp1555
	movl	12(%rax), %eax	# rld[r_608].mode, D.28339
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28336
	movzbl	%al, %edx	# D.28336, D.28331
	movl	target_flags(%rip), %eax	# target_flags, target_flags.994
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1727	#,
	.loc 1 5970 0 discriminator 1
	movl	$8, %eax	#, iftmp.993
	jmp	.L1728	#
.L1727:
	.loc 1 5970 0 discriminator 2
	movl	$4, %eax	#, iftmp.993
.L1728:
	.loc 1 5970 0 discriminator 3
	addl	%edx, %eax	# D.28331, D.28331
	subl	$1, %eax	#, D.28331
	movl	target_flags(%rip), %edx	# target_flags, target_flags.996
	andl	$33554432, %edx	#, D.28331
	testl	%edx, %edx	# D.28331
	je	.L1729	#,
	.loc 1 5970 0 discriminator 1
	movl	$8, %ebx	#, iftmp.995
	jmp	.L1730	#
.L1729:
	.loc 1 5970 0 discriminator 2
	movl	$4, %ebx	#, iftmp.995
.L1730:
	.loc 1 5970 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.995
.L1718:
	movl	%eax, -1580(%rbp)	# iftmp.985, nr
	.loc 1 5972 0 is_stmt 1 discriminator 3
	jmp	.L1731	#
.L1709:
	.loc 1 5972 0 is_stmt 0
	jmp	.L1731	#
.L1732:
	.loc 1 5973 0 is_stmt 1
	movq	reg_has_output_reload(%rip), %rdx	# reg_has_output_reload, reg_has_output_reload.997
	movl	-1580(%rbp), %eax	# nr, tmp1559
	movl	-1540(%rbp), %ecx	# nregno, tmp1560
	addl	%ecx, %eax	# tmp1560, D.28331
	cltq
	addq	%rdx, %rax	# reg_has_output_reload.997, D.28345
	movb	$1, (%rax)	#, *_661
.L1731:
	.loc 1 5972 0 discriminator 1
	subl	$1, -1580(%rbp)	#, nr
	cmpl	$0, -1580(%rbp)	#, nr
	jns	.L1732	#,
	.loc 1 5975 0
	cmpl	$0, -1648(%rbp)	#, i
	js	.L1733	#,
	.loc 1 5977 0
	cmpl	$7, -1648(%rbp)	#, i
	jle	.L1734	#,
	.loc 1 5977 0 is_stmt 0 discriminator 1
	cmpl	$15, -1648(%rbp)	#, i
	jle	.L1735	#,
.L1734:
	.loc 1 5977 0 discriminator 2
	cmpl	$20, -1648(%rbp)	#, i
	jle	.L1736	#,
	.loc 1 5977 0 discriminator 1
	cmpl	$28, -1648(%rbp)	#, i
	jle	.L1735	#,
.L1736:
	.loc 1 5977 0 discriminator 2
	cmpl	$44, -1648(%rbp)	#, i
	jle	.L1737	#,
	.loc 1 5977 0 discriminator 1
	cmpl	$52, -1648(%rbp)	#, i
	jle	.L1735	#,
.L1737:
	.loc 1 5977 0 discriminator 2
	cmpl	$28, -1648(%rbp)	#, i
	jle	.L1738	#,
	.loc 1 5977 0 discriminator 1
	cmpl	$36, -1648(%rbp)	#, i
	jg	.L1738	#,
.L1735:
	movl	-1544(%rbp), %eax	# r, tmp1562
	movslq	%eax, %rdx	# tmp1562, tmp1561
	movq	%rdx, %rax	# tmp1561, tmp1563
	addq	%rax, %rax	# tmp1563
	addq	%rdx, %rax	# tmp1561, tmp1563
	salq	$2, %rax	#, tmp1563
	addq	%rdx, %rax	# tmp1561, tmp1563
	salq	$3, %rax	#, tmp1564
	addq	$rld+16, %rax	#, tmp1565
	movl	12(%rax), %eax	# rld[r_608].mode, D.28339
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28340
	cmpl	$5, %eax	#, D.28340
	je	.L1739	#,
	.loc 1 5977 0 discriminator 2
	movl	-1544(%rbp), %eax	# r, tmp1568
	movslq	%eax, %rdx	# tmp1568, tmp1567
	movq	%rdx, %rax	# tmp1567, tmp1569
	addq	%rax, %rax	# tmp1569
	addq	%rdx, %rax	# tmp1567, tmp1569
	salq	$2, %rax	#, tmp1569
	addq	%rdx, %rax	# tmp1567, tmp1569
	salq	$3, %rax	#, tmp1570
	addq	$rld+16, %rax	#, tmp1571
	movl	12(%rax), %eax	# rld[r_608].mode, D.28339
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28340
	cmpl	$6, %eax	#, D.28340
	jne	.L1740	#,
.L1739:
	.loc 1 5977 0 discriminator 1
	movl	$2, %eax	#, iftmp.999
	jmp	.L1741	#
.L1740:
	movl	$1, %eax	#, iftmp.999
.L1741:
	.loc 1 5977 0 discriminator 3
	jmp	.L1742	#
.L1738:
	.loc 1 5977 0 discriminator 2
	movl	-1544(%rbp), %eax	# r, tmp1574
	movslq	%eax, %rdx	# tmp1574, tmp1573
	movq	%rdx, %rax	# tmp1573, tmp1575
	addq	%rax, %rax	# tmp1575
	addq	%rdx, %rax	# tmp1573, tmp1575
	salq	$2, %rax	#, tmp1575
	addq	%rdx, %rax	# tmp1573, tmp1575
	salq	$3, %rax	#, tmp1576
	addq	$rld+16, %rax	#, tmp1577
	movl	12(%rax), %eax	# rld[r_608].mode, D.28339
	cmpl	$18, %eax	#, D.28339
	jne	.L1743	#,
	.loc 1 5977 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1002
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1744	#,
	movl	$2, %eax	#, iftmp.1001
	jmp	.L1742	#
.L1744:
	.loc 1 5977 0 discriminator 2
	movl	$3, %eax	#, iftmp.1001
	jmp	.L1742	#
.L1743:
	movl	-1544(%rbp), %eax	# r, tmp1579
	movslq	%eax, %rdx	# tmp1579, tmp1578
	movq	%rdx, %rax	# tmp1578, tmp1580
	addq	%rax, %rax	# tmp1580
	addq	%rdx, %rax	# tmp1578, tmp1580
	salq	$2, %rax	#, tmp1580
	addq	%rdx, %rax	# tmp1578, tmp1580
	salq	$3, %rax	#, tmp1581
	addq	$rld+16, %rax	#, tmp1582
	movl	12(%rax), %eax	# rld[r_608].mode, D.28339
	cmpl	$24, %eax	#, D.28339
	jne	.L1747	#,
	.loc 1 5977 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1005
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1748	#,
	movl	$4, %eax	#, iftmp.1004
	jmp	.L1742	#
.L1748:
	.loc 1 5977 0 discriminator 2
	movl	$6, %eax	#, iftmp.1004
	jmp	.L1742	#
.L1747:
	movl	-1544(%rbp), %eax	# r, tmp1584
	movslq	%eax, %rdx	# tmp1584, tmp1583
	movq	%rdx, %rax	# tmp1583, tmp1585
	addq	%rax, %rax	# tmp1585
	addq	%rdx, %rax	# tmp1583, tmp1585
	salq	$2, %rax	#, tmp1585
	addq	%rdx, %rax	# tmp1583, tmp1585
	salq	$3, %rax	#, tmp1586
	addq	$rld+16, %rax	#, tmp1587
	movl	12(%rax), %eax	# rld[r_608].mode, D.28339
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28336
	movzbl	%al, %edx	# D.28336, D.28331
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1007
	andl	$33554432, %eax	#, D.28331
	testl	%eax, %eax	# D.28331
	je	.L1751	#,
	.loc 1 5977 0 discriminator 1
	movl	$8, %eax	#, iftmp.1006
	jmp	.L1752	#
.L1751:
	.loc 1 5977 0 discriminator 2
	movl	$4, %eax	#, iftmp.1006
.L1752:
	.loc 1 5977 0 discriminator 3
	addl	%edx, %eax	# D.28331, D.28331
	subl	$1, %eax	#, D.28331
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1009
	andl	$33554432, %edx	#, D.28331
	testl	%edx, %edx	# D.28331
	je	.L1753	#,
	.loc 1 5977 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1008
	jmp	.L1754	#
.L1753:
	.loc 1 5977 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1008
.L1754:
	.loc 1 5977 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1008
.L1742:
	movl	%eax, -1580(%rbp)	# iftmp.998, nr
	.loc 1 5978 0 is_stmt 1 discriminator 3
	jmp	.L1755	#
.L1756:
	.loc 1 5979 0
	movl	-1580(%rbp), %eax	# nr, tmp1591
	movl	-1648(%rbp), %edx	# i, tmp1592
	addl	%edx, %eax	# tmp1592, D.28331
	movl	$1, %edx	#, tmp1593
	movl	%eax, %ecx	# D.28331, tmp1635
	salq	%cl, %rdx	# tmp1635, D.28337
	movq	reg_is_output_reload(%rip), %rax	# reg_is_output_reload, reg_is_output_reload.1010
	orq	%rdx, %rax	# D.28337, reg_is_output_reload.1011
	movq	%rax, reg_is_output_reload(%rip)	# reg_is_output_reload.1011, reg_is_output_reload
.L1755:
	.loc 1 5978 0 discriminator 1
	subl	$1, -1580(%rbp)	#, nr
	cmpl	$0, -1580(%rbp)	#, nr
	jns	.L1756	#,
.L1733:
	.loc 1 5982 0
	movl	-1544(%rbp), %eax	# r, tmp1595
	movslq	%eax, %rdx	# tmp1595, tmp1594
	movq	%rdx, %rax	# tmp1594, tmp1596
	addq	%rax, %rax	# tmp1596
	addq	%rdx, %rax	# tmp1594, tmp1596
	salq	$2, %rax	#, tmp1596
	addq	%rdx, %rax	# tmp1594, tmp1596
	salq	$3, %rax	#, tmp1597
	addq	$rld+80, %rax	#, tmp1598
	movl	12(%rax), %eax	# rld[r_608].when_needed, D.28341
	cmpl	$9, %eax	#, D.28341
	je	.L1708	#,
	.loc 1 5983 0
	movl	-1544(%rbp), %eax	# r, tmp1600
	movslq	%eax, %rdx	# tmp1600, tmp1599
	movq	%rdx, %rax	# tmp1599, tmp1601
	addq	%rax, %rax	# tmp1601
	addq	%rdx, %rax	# tmp1599, tmp1601
	salq	$2, %rax	#, tmp1601
	addq	%rdx, %rax	# tmp1599, tmp1601
	salq	$3, %rax	#, tmp1602
	addq	$rld+80, %rax	#, tmp1603
	movl	12(%rax), %eax	# rld[r_608].when_needed, D.28341
	cmpl	$1, %eax	#, D.28341
	je	.L1708	#,
	.loc 1 5984 0
	movl	-1544(%rbp), %eax	# r, tmp1605
	movslq	%eax, %rdx	# tmp1605, tmp1604
	movq	%rdx, %rax	# tmp1604, tmp1606
	addq	%rax, %rax	# tmp1606
	addq	%rdx, %rax	# tmp1604, tmp1606
	salq	$2, %rax	#, tmp1606
	addq	%rdx, %rax	# tmp1604, tmp1606
	salq	$3, %rax	#, tmp1607
	addq	$rld+80, %rax	#, tmp1608
	movl	12(%rax), %eax	# rld[r_608].when_needed, D.28341
	cmpl	$2, %eax	#, D.28341
	je	.L1708	#,
	.loc 1 5985 0
	movl	$__FUNCTION__.15636, %edx	#,
	movl	$5985, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1708:
.LBE134:
.LBE133:
	.loc 1 5954 0
	addl	$1, -1644(%rbp)	#, j
.L1707:
	.loc 1 5954 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1012
	cmpl	%eax, -1644(%rbp)	# n_reloads.1012, j
	jl	.L1757	#,
	.loc 1 5988 0 is_stmt 1
	addq	$1640, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE53:
	.size	choose_reload_regs, .-choose_reload_regs
	.globl	deallocate_reload_reg
	.type	deallocate_reload_reg, @function
deallocate_reload_reg:
.LFB54:
	.loc 1 5996 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movl	%edi, -20(%rbp)	# r, r
	.loc 1 5999 0
	movl	-20(%rbp), %eax	# r, tmp67
	movslq	%eax, %rdx	# tmp67, tmp66
	movq	%rdx, %rax	# tmp66, tmp68
	addq	%rax, %rax	# tmp68
	addq	%rdx, %rax	# tmp66, tmp68
	salq	$2, %rax	#, tmp68
	addq	%rdx, %rax	# tmp66, tmp68
	salq	$3, %rax	#, tmp69
	addq	$rld+64, %rax	#, tmp70
	movq	(%rax), %rax	# rld[r_1(D)].reg_rtx, D.28346
	testq	%rax, %rax	# D.28346
	jne	.L1761	#,
	.loc 1 6000 0
	jmp	.L1760	#
.L1761:
	.loc 1 6001 0
	movl	-20(%rbp), %eax	# r, tmp72
	movslq	%eax, %rdx	# tmp72, tmp71
	movq	%rdx, %rax	# tmp71, tmp73
	addq	%rax, %rax	# tmp73
	addq	%rdx, %rax	# tmp71, tmp73
	salq	$2, %rax	#, tmp73
	addq	%rdx, %rax	# tmp71, tmp73
	salq	$3, %rax	#, tmp74
	addq	$rld+64, %rax	#, tmp75
	movq	(%rax), %rax	# rld[r_1(D)].reg_rtx, D.28346
	movq	%rax, %rdi	# D.28346,
	call	true_regnum	#
	movl	%eax, -4(%rbp)	# tmp76, regno
	.loc 1 6002 0
	movl	-20(%rbp), %eax	# r, tmp78
	movslq	%eax, %rdx	# tmp78, tmp77
	movq	%rdx, %rax	# tmp77, tmp79
	addq	%rax, %rax	# tmp79
	addq	%rdx, %rax	# tmp77, tmp79
	salq	$2, %rax	#, tmp79
	addq	%rdx, %rax	# tmp77, tmp79
	salq	$3, %rax	#, tmp80
	addq	$rld+64, %rax	#, tmp81
	movq	$0, (%rax)	#, rld[r_1(D)].reg_rtx
	.loc 1 6003 0
	movl	-4(%rbp), %eax	# regno, tmp83
	cltq
	movzwl	spill_reg_order(%rax,%rax), %eax	# spill_reg_order, D.28347
	testw	%ax, %ax	# D.28347
	js	.L1763	#,
	.loc 1 6004 0
	movl	-20(%rbp), %eax	# r, tmp85
	movslq	%eax, %rdx	# tmp85, tmp84
	movq	%rdx, %rax	# tmp84, tmp86
	addq	%rax, %rax	# tmp86
	addq	%rdx, %rax	# tmp84, tmp86
	salq	$2, %rax	#, tmp86
	addq	%rdx, %rax	# tmp84, tmp86
	salq	$3, %rax	#, tmp87
	addq	$rld+16, %rax	#, tmp88
	movl	12(%rax), %ecx	# rld[r_1(D)].mode, D.28348
	movl	-20(%rbp), %eax	# r, tmp90
	movslq	%eax, %rdx	# tmp90, tmp89
	movq	%rdx, %rax	# tmp89, tmp91
	addq	%rax, %rax	# tmp91
	addq	%rdx, %rax	# tmp89, tmp91
	salq	$2, %rax	#, tmp91
	addq	%rdx, %rax	# tmp89, tmp91
	salq	$3, %rax	#, tmp92
	addq	$rld+80, %rax	#, tmp93
	movl	12(%rax), %edi	# rld[r_1(D)].when_needed, D.28349
	movl	-20(%rbp), %eax	# r, tmp95
	movslq	%eax, %rdx	# tmp95, tmp94
	movq	%rdx, %rax	# tmp94, tmp96
	addq	%rax, %rax	# tmp96
	addq	%rdx, %rax	# tmp94, tmp96
	salq	$2, %rax	#, tmp96
	addq	%rdx, %rax	# tmp94, tmp96
	salq	$3, %rax	#, tmp97
	addq	$rld+64, %rax	#, tmp98
	movl	8(%rax), %esi	# rld[r_1(D)].opnum, D.28350
	movl	-4(%rbp), %eax	# regno, regno.1013
	movl	%edi, %edx	# D.28349,
	movl	%eax, %edi	# regno.1013,
	call	clear_reload_reg_in_use	#
.L1763:
	.loc 1 6006 0
	movl	-20(%rbp), %eax	# r, tmp100
	cltq
	movl	$-1, reload_spill_index(,%rax,4)	#, reload_spill_index
.L1760:
	.loc 1 6007 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE54:
	.size	deallocate_reload_reg, .-deallocate_reload_reg
	.type	merge_assigned_reloads, @function
merge_assigned_reloads:
.LFB55:
	.loc 1 6025 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# insn, insn
	.loc 1 6032 0
	movl	$0, -20(%rbp)	#, i
	jmp	.L1765	#
.L1789:
.LBB135:
	.loc 1 6034 0
	movl	$0, -12(%rbp)	#, conflicting_input
	.loc 1 6035 0
	movl	$-1, -8(%rbp)	#, max_input_address_opnum
	.loc 1 6036 0
	movl	$30, -4(%rbp)	#, min_conflicting_input_opnum
	.loc 1 6038 0
	movl	-20(%rbp), %eax	# i, tmp106
	movslq	%eax, %rdx	# tmp106, tmp105
	movq	%rdx, %rax	# tmp105, tmp107
	addq	%rax, %rax	# tmp107
	addq	%rdx, %rax	# tmp105, tmp107
	salq	$2, %rax	#, tmp107
	addq	%rdx, %rax	# tmp105, tmp107
	salq	$3, %rax	#, tmp108
	addq	$rld, %rax	#, tmp109
	movq	(%rax), %rax	# rld[i_1].in, D.28351
	testq	%rax, %rax	# D.28351
	je	.L1766	#,
	.loc 1 6038 0 is_stmt 0 discriminator 1
	movl	-20(%rbp), %eax	# i, tmp111
	movslq	%eax, %rdx	# tmp111, tmp110
	movq	%rdx, %rax	# tmp110, tmp112
	addq	%rax, %rax	# tmp112
	addq	%rdx, %rax	# tmp110, tmp112
	salq	$2, %rax	#, tmp112
	addq	%rdx, %rax	# tmp110, tmp112
	salq	$3, %rax	#, tmp113
	addq	$rld+80, %rax	#, tmp114
	movl	12(%rax), %eax	# rld[i_1].when_needed, D.28352
	cmpl	$9, %eax	#, D.28352
	je	.L1766	#,
	.loc 1 6039 0 is_stmt 1
	movl	-20(%rbp), %eax	# i, tmp116
	movslq	%eax, %rdx	# tmp116, tmp115
	movq	%rdx, %rax	# tmp115, tmp117
	addq	%rax, %rax	# tmp117
	addq	%rdx, %rax	# tmp115, tmp117
	salq	$2, %rax	#, tmp117
	addq	%rdx, %rax	# tmp115, tmp117
	salq	$3, %rax	#, tmp118
	addq	$rld+8, %rax	#, tmp119
	movq	(%rax), %rax	# rld[i_1].out, D.28351
	testq	%rax, %rax	# D.28351
	jne	.L1766	#,
	.loc 1 6039 0 is_stmt 0 discriminator 1
	movl	-20(%rbp), %eax	# i, tmp121
	movslq	%eax, %rdx	# tmp121, tmp120
	movq	%rdx, %rax	# tmp120, tmp122
	addq	%rax, %rax	# tmp122
	addq	%rdx, %rax	# tmp120, tmp122
	salq	$2, %rax	#, tmp122
	addq	%rdx, %rax	# tmp120, tmp122
	salq	$3, %rax	#, tmp123
	addq	$rld+64, %rax	#, tmp124
	movq	(%rax), %rax	# rld[i_1].reg_rtx, D.28351
	testq	%rax, %rax	# D.28351
	je	.L1766	#,
	.loc 1 6040 0 is_stmt 1
	movl	-20(%rbp), %eax	# i, tmp126
	movslq	%eax, %rdx	# tmp126, tmp125
	movq	%rdx, %rax	# tmp125, tmp127
	addq	%rax, %rax	# tmp127
	addq	%rdx, %rax	# tmp125, tmp127
	salq	$2, %rax	#, tmp127
	addq	%rdx, %rax	# tmp125, tmp127
	salq	$3, %rax	#, tmp128
	addq	$rld+64, %rax	#, tmp129
	movq	(%rax), %rax	# rld[i_1].reg_rtx, D.28351
	movq	-40(%rbp), %rdx	# insn, tmp130
	movq	%rdx, %rsi	# tmp130,
	movq	%rax, %rdi	# D.28351,
	call	reg_set_p	#
	testl	%eax, %eax	# D.28353
	je	.L1767	#,
.L1766:
	.loc 1 6041 0
	jmp	.L1768	#
.L1767:
	.loc 1 6049 0
	movl	$0, -16(%rbp)	#, j
	jmp	.L1769	#
.L1778:
	.loc 1 6051 0
	movl	-20(%rbp), %eax	# i, tmp131
	cmpl	-16(%rbp), %eax	# j, tmp131
	je	.L1770	#,
	.loc 1 6051 0 is_stmt 0 discriminator 1
	movl	-16(%rbp), %eax	# j, tmp133
	movslq	%eax, %rdx	# tmp133, tmp132
	movq	%rdx, %rax	# tmp132, tmp134
	addq	%rax, %rax	# tmp134
	addq	%rdx, %rax	# tmp132, tmp134
	salq	$2, %rax	#, tmp134
	addq	%rdx, %rax	# tmp132, tmp134
	salq	$3, %rax	#, tmp135
	addq	$rld+64, %rax	#, tmp136
	movq	(%rax), %rax	# rld[j_2].reg_rtx, D.28351
	testq	%rax, %rax	# D.28351
	je	.L1770	#,
	.loc 1 6052 0 is_stmt 1
	movl	-20(%rbp), %eax	# i, tmp138
	movslq	%eax, %rdx	# tmp138, tmp137
	movq	%rdx, %rax	# tmp137, tmp139
	addq	%rax, %rax	# tmp139
	addq	%rdx, %rax	# tmp137, tmp139
	salq	$2, %rax	#, tmp139
	addq	%rdx, %rax	# tmp137, tmp139
	salq	$3, %rax	#, tmp140
	addq	$rld+64, %rax	#, tmp141
	movq	(%rax), %rcx	# rld[i_1].reg_rtx, D.28351
	movl	-16(%rbp), %eax	# j, tmp143
	movslq	%eax, %rdx	# tmp143, tmp142
	movq	%rdx, %rax	# tmp142, tmp144
	addq	%rax, %rax	# tmp144
	addq	%rdx, %rax	# tmp142, tmp144
	salq	$2, %rax	#, tmp144
	addq	%rdx, %rax	# tmp142, tmp144
	salq	$3, %rax	#, tmp145
	addq	$rld+64, %rax	#, tmp146
	movq	(%rax), %rax	# rld[j_2].reg_rtx, D.28351
	movq	%rcx, %rsi	# D.28351,
	movq	%rax, %rdi	# D.28351,
	call	reg_overlap_mentioned_p	#
	testl	%eax, %eax	# D.28353
	jne	.L1771	#,
.L1770:
	.loc 1 6054 0
	jmp	.L1772	#
.L1771:
	.loc 1 6056 0
	movl	-16(%rbp), %eax	# j, tmp148
	movslq	%eax, %rdx	# tmp148, tmp147
	movq	%rdx, %rax	# tmp147, tmp149
	addq	%rax, %rax	# tmp149
	addq	%rdx, %rax	# tmp147, tmp149
	salq	$2, %rax	#, tmp149
	addq	%rdx, %rax	# tmp147, tmp149
	salq	$3, %rax	#, tmp150
	addq	$rld+80, %rax	#, tmp151
	movl	12(%rax), %eax	# rld[j_2].when_needed, D.28352
	cmpl	$3, %eax	#, D.28352
	jne	.L1773	#,
	.loc 1 6057 0
	movl	-16(%rbp), %eax	# j, tmp153
	movslq	%eax, %rdx	# tmp153, tmp152
	movq	%rdx, %rax	# tmp152, tmp154
	addq	%rax, %rax	# tmp154
	addq	%rdx, %rax	# tmp152, tmp154
	salq	$2, %rax	#, tmp154
	addq	%rdx, %rax	# tmp152, tmp154
	salq	$3, %rax	#, tmp155
	addq	$rld+64, %rax	#, tmp156
	movl	8(%rax), %eax	# rld[j_2].opnum, D.28353
	cmpl	-8(%rbp), %eax	# max_input_address_opnum, D.28353
	jle	.L1773	#,
	.loc 1 6058 0
	movl	-16(%rbp), %eax	# j, tmp158
	movslq	%eax, %rdx	# tmp158, tmp157
	movq	%rdx, %rax	# tmp157, tmp159
	addq	%rax, %rax	# tmp159
	addq	%rdx, %rax	# tmp157, tmp159
	salq	$2, %rax	#, tmp159
	addq	%rdx, %rax	# tmp157, tmp159
	salq	$3, %rax	#, tmp160
	addq	$rld+64, %rax	#, tmp161
	movl	8(%rax), %eax	# rld[j_2].opnum, tmp162
	movl	%eax, -8(%rbp)	# tmp162, max_input_address_opnum
.L1773:
	.loc 1 6065 0
	movl	-16(%rbp), %eax	# j, tmp164
	movslq	%eax, %rdx	# tmp164, tmp163
	movq	%rdx, %rax	# tmp163, tmp165
	addq	%rax, %rax	# tmp165
	addq	%rdx, %rax	# tmp163, tmp165
	salq	$2, %rax	#, tmp165
	addq	%rdx, %rax	# tmp163, tmp165
	salq	$3, %rax	#, tmp166
	addq	$rld+64, %rax	#, tmp167
	movq	(%rax), %rcx	# rld[j_2].reg_rtx, D.28351
	movl	-20(%rbp), %eax	# i, tmp169
	movslq	%eax, %rdx	# tmp169, tmp168
	movq	%rdx, %rax	# tmp168, tmp170
	addq	%rax, %rax	# tmp170
	addq	%rdx, %rax	# tmp168, tmp170
	salq	$2, %rax	#, tmp170
	addq	%rdx, %rax	# tmp168, tmp170
	salq	$3, %rax	#, tmp171
	addq	$rld+64, %rax	#, tmp172
	movq	(%rax), %rax	# rld[i_1].reg_rtx, D.28351
	movq	%rcx, %rsi	# D.28351,
	movq	%rax, %rdi	# D.28351,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28353
	je	.L1774	#,
	.loc 1 6066 0
	movl	-16(%rbp), %eax	# j, tmp174
	movslq	%eax, %rdx	# tmp174, tmp173
	movq	%rdx, %rax	# tmp173, tmp175
	addq	%rax, %rax	# tmp175
	addq	%rdx, %rax	# tmp173, tmp175
	salq	$2, %rax	#, tmp175
	addq	%rdx, %rax	# tmp173, tmp175
	salq	$3, %rax	#, tmp176
	addq	$rld+8, %rax	#, tmp177
	movq	(%rax), %rax	# rld[j_2].out, D.28351
	testq	%rax, %rax	# D.28351
	jne	.L1774	#,
	.loc 1 6066 0 is_stmt 0 discriminator 1
	movl	-16(%rbp), %eax	# j, tmp179
	movslq	%eax, %rdx	# tmp179, tmp178
	movq	%rdx, %rax	# tmp178, tmp180
	addq	%rax, %rax	# tmp180
	addq	%rdx, %rax	# tmp178, tmp180
	salq	$2, %rax	#, tmp180
	addq	%rdx, %rax	# tmp178, tmp180
	salq	$3, %rax	#, tmp181
	addq	$rld, %rax	#, tmp182
	movq	(%rax), %rax	# rld[j_2].in, D.28351
	testq	%rax, %rax	# D.28351
	je	.L1774	#,
	.loc 1 6067 0 is_stmt 1
	movl	-16(%rbp), %eax	# j, tmp184
	movslq	%eax, %rdx	# tmp184, tmp183
	movq	%rdx, %rax	# tmp183, tmp185
	addq	%rax, %rax	# tmp185
	addq	%rdx, %rax	# tmp183, tmp185
	salq	$2, %rax	#, tmp185
	addq	%rdx, %rax	# tmp183, tmp185
	salq	$3, %rax	#, tmp186
	addq	$rld, %rax	#, tmp187
	movq	(%rax), %rcx	# rld[j_2].in, D.28351
	movl	-20(%rbp), %eax	# i, tmp189
	movslq	%eax, %rdx	# tmp189, tmp188
	movq	%rdx, %rax	# tmp188, tmp190
	addq	%rax, %rax	# tmp190
	addq	%rdx, %rax	# tmp188, tmp190
	salq	$2, %rax	#, tmp190
	addq	%rdx, %rax	# tmp188, tmp190
	salq	$3, %rax	#, tmp191
	addq	$rld, %rax	#, tmp192
	movq	(%rax), %rax	# rld[i_1].in, D.28351
	movq	%rcx, %rsi	# D.28351,
	movq	%rax, %rdi	# D.28351,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28353
	jne	.L1772	#,
.L1774:
	.loc 1 6069 0
	movl	-16(%rbp), %eax	# j, tmp194
	movslq	%eax, %rdx	# tmp194, tmp193
	movq	%rdx, %rax	# tmp193, tmp195
	addq	%rax, %rax	# tmp195
	addq	%rdx, %rax	# tmp193, tmp195
	salq	$2, %rax	#, tmp195
	addq	%rdx, %rax	# tmp193, tmp195
	salq	$3, %rax	#, tmp196
	addq	$rld+80, %rax	#, tmp197
	movl	12(%rax), %eax	# rld[j_2].when_needed, D.28352
	testl	%eax, %eax	# D.28352
	jne	.L1775	#,
	.loc 1 6070 0
	movl	-20(%rbp), %eax	# i, tmp199
	movslq	%eax, %rdx	# tmp199, tmp198
	movq	%rdx, %rax	# tmp198, tmp200
	addq	%rax, %rax	# tmp200
	addq	%rdx, %rax	# tmp198, tmp200
	salq	$2, %rax	#, tmp200
	addq	%rdx, %rax	# tmp198, tmp200
	salq	$3, %rax	#, tmp201
	addq	$rld+80, %rax	#, tmp202
	movl	12(%rax), %eax	# rld[i_1].when_needed, D.28352
	cmpl	$3, %eax	#, D.28352
	jne	.L1776	#,
	.loc 1 6071 0
	movl	-20(%rbp), %eax	# i, tmp204
	movslq	%eax, %rdx	# tmp204, tmp203
	movq	%rdx, %rax	# tmp203, tmp205
	addq	%rax, %rax	# tmp205
	addq	%rdx, %rax	# tmp203, tmp205
	salq	$2, %rax	#, tmp205
	addq	%rdx, %rax	# tmp203, tmp205
	salq	$3, %rax	#, tmp206
	addq	$rld+64, %rax	#, tmp207
	movl	8(%rax), %ecx	# rld[i_1].opnum, D.28353
	movl	-16(%rbp), %eax	# j, tmp209
	movslq	%eax, %rdx	# tmp209, tmp208
	movq	%rdx, %rax	# tmp208, tmp210
	addq	%rax, %rax	# tmp210
	addq	%rdx, %rax	# tmp208, tmp210
	salq	$2, %rax	#, tmp210
	addq	%rdx, %rax	# tmp208, tmp210
	salq	$3, %rax	#, tmp211
	addq	$rld+64, %rax	#, tmp212
	movl	8(%rax), %eax	# rld[j_2].opnum, D.28353
	cmpl	%eax, %ecx	# D.28353, D.28353
	jle	.L1777	#,
.L1776:
	.loc 1 6072 0
	movl	-20(%rbp), %eax	# i, tmp214
	movslq	%eax, %rdx	# tmp214, tmp213
	movq	%rdx, %rax	# tmp213, tmp215
	addq	%rax, %rax	# tmp215
	addq	%rdx, %rax	# tmp213, tmp215
	salq	$2, %rax	#, tmp215
	addq	%rdx, %rax	# tmp213, tmp215
	salq	$3, %rax	#, tmp216
	addq	$rld+80, %rax	#, tmp217
	movl	12(%rax), %eax	# rld[i_1].when_needed, D.28352
	cmpl	$10, %eax	#, D.28352
	jne	.L1775	#,
.L1777:
	.loc 1 6074 0
	movl	$1, -12(%rbp)	#, conflicting_input
	.loc 1 6075 0
	movl	-16(%rbp), %eax	# j, tmp219
	movslq	%eax, %rdx	# tmp219, tmp218
	movq	%rdx, %rax	# tmp218, tmp220
	addq	%rax, %rax	# tmp220
	addq	%rdx, %rax	# tmp218, tmp220
	salq	$2, %rax	#, tmp220
	addq	%rdx, %rax	# tmp218, tmp220
	salq	$3, %rax	#, tmp221
	addq	$rld+64, %rax	#, tmp222
	movl	8(%rax), %eax	# rld[j_2].opnum, D.28353
	cmpl	-4(%rbp), %eax	# min_conflicting_input_opnum, D.28353
	jge	.L1772	#,
	.loc 1 6076 0
	movl	-16(%rbp), %eax	# j, tmp224
	movslq	%eax, %rdx	# tmp224, tmp223
	movq	%rdx, %rax	# tmp223, tmp225
	addq	%rax, %rax	# tmp225
	addq	%rdx, %rax	# tmp223, tmp225
	salq	$2, %rax	#, tmp225
	addq	%rdx, %rax	# tmp223, tmp225
	salq	$3, %rax	#, tmp226
	addq	$rld+64, %rax	#, tmp227
	movl	8(%rax), %eax	# rld[j_2].opnum, tmp228
	movl	%eax, -4(%rbp)	# tmp228, min_conflicting_input_opnum
.L1772:
	.loc 1 6049 0
	addl	$1, -16(%rbp)	#, j
.L1769:
	.loc 1 6049 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1014
	cmpl	%eax, -16(%rbp)	# n_reloads.1014, j
	jl	.L1778	#,
.L1775:
	.loc 1 6083 0 is_stmt 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1015
	cmpl	%eax, -16(%rbp)	# n_reloads.1015, j
	jne	.L1768	#,
	.loc 1 6084 0
	movl	-8(%rbp), %eax	# max_input_address_opnum, tmp229
	cmpl	-4(%rbp), %eax	# min_conflicting_input_opnum, tmp229
	jg	.L1768	#,
	.loc 1 6086 0
	movl	$0, -16(%rbp)	#, j
	jmp	.L1779	#
.L1782:
	.loc 1 6087 0
	movl	-20(%rbp), %eax	# i, tmp230
	cmpl	-16(%rbp), %eax	# j, tmp230
	je	.L1780	#,
	.loc 1 6087 0 is_stmt 0 discriminator 1
	movl	-16(%rbp), %eax	# j, tmp232
	movslq	%eax, %rdx	# tmp232, tmp231
	movq	%rdx, %rax	# tmp231, tmp233
	addq	%rax, %rax	# tmp233
	addq	%rdx, %rax	# tmp231, tmp233
	salq	$2, %rax	#, tmp233
	addq	%rdx, %rax	# tmp231, tmp233
	salq	$3, %rax	#, tmp234
	addq	$rld+64, %rax	#, tmp235
	movq	(%rax), %rax	# rld[j_3].reg_rtx, D.28351
	testq	%rax, %rax	# D.28351
	je	.L1780	#,
	.loc 1 6088 0 is_stmt 1
	movl	-16(%rbp), %eax	# j, tmp237
	movslq	%eax, %rdx	# tmp237, tmp236
	movq	%rdx, %rax	# tmp236, tmp238
	addq	%rax, %rax	# tmp238
	addq	%rdx, %rax	# tmp236, tmp238
	salq	$2, %rax	#, tmp238
	addq	%rdx, %rax	# tmp236, tmp238
	salq	$3, %rax	#, tmp239
	addq	$rld+64, %rax	#, tmp240
	movq	(%rax), %rcx	# rld[j_3].reg_rtx, D.28351
	movl	-20(%rbp), %eax	# i, tmp242
	movslq	%eax, %rdx	# tmp242, tmp241
	movq	%rdx, %rax	# tmp241, tmp243
	addq	%rax, %rax	# tmp243
	addq	%rdx, %rax	# tmp241, tmp243
	salq	$2, %rax	#, tmp243
	addq	%rdx, %rax	# tmp241, tmp243
	salq	$3, %rax	#, tmp244
	addq	$rld+64, %rax	#, tmp245
	movq	(%rax), %rax	# rld[i_1].reg_rtx, D.28351
	movq	%rcx, %rsi	# D.28351,
	movq	%rax, %rdi	# D.28351,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28353
	je	.L1780	#,
	.loc 1 6089 0
	cmpl	$0, -12(%rbp)	#, conflicting_input
	je	.L1781	#,
	.loc 1 6090 0
	movl	-16(%rbp), %eax	# j, tmp247
	movslq	%eax, %rdx	# tmp247, tmp246
	movq	%rdx, %rax	# tmp246, tmp248
	addq	%rax, %rax	# tmp248
	addq	%rdx, %rax	# tmp246, tmp248
	salq	$2, %rax	#, tmp248
	addq	%rdx, %rax	# tmp246, tmp248
	salq	$3, %rax	#, tmp249
	addq	$rld+80, %rax	#, tmp250
	movl	12(%rax), %eax	# rld[j_3].when_needed, D.28352
	cmpl	$3, %eax	#, D.28352
	je	.L1781	#,
	.loc 1 6091 0
	movl	-16(%rbp), %eax	# j, tmp252
	movslq	%eax, %rdx	# tmp252, tmp251
	movq	%rdx, %rax	# tmp251, tmp253
	addq	%rax, %rax	# tmp253
	addq	%rdx, %rax	# tmp251, tmp253
	salq	$2, %rax	#, tmp253
	addq	%rdx, %rax	# tmp251, tmp253
	salq	$3, %rax	#, tmp254
	addq	$rld+80, %rax	#, tmp255
	movl	12(%rax), %eax	# rld[j_3].when_needed, D.28352
	cmpl	$10, %eax	#, D.28352
	jne	.L1780	#,
.L1781:
	.loc 1 6093 0
	movl	-20(%rbp), %eax	# i, tmp257
	movslq	%eax, %rdx	# tmp257, tmp256
	movq	%rdx, %rax	# tmp256, tmp258
	addq	%rax, %rax	# tmp258
	addq	%rdx, %rax	# tmp256, tmp258
	salq	$2, %rax	#, tmp258
	addq	%rdx, %rax	# tmp256, tmp258
	salq	$3, %rax	#, tmp259
	addq	$rld+80, %rax	#, tmp260
	movl	$9, 12(%rax)	#, rld[i_1].when_needed
	.loc 1 6094 0
	movl	-16(%rbp), %eax	# j, tmp262
	movslq	%eax, %rdx	# tmp262, tmp261
	movq	%rdx, %rax	# tmp261, tmp263
	addq	%rax, %rax	# tmp263
	addq	%rdx, %rax	# tmp261, tmp263
	salq	$2, %rax	#, tmp263
	addq	%rdx, %rax	# tmp261, tmp263
	salq	$3, %rax	#, tmp264
	addq	$rld, %rax	#, tmp265
	movq	$0, (%rax)	#, rld[j_3].in
	.loc 1 6095 0
	movl	-16(%rbp), %eax	# j, tmp267
	cltq
	movl	$-1, reload_spill_index(,%rax,4)	#, reload_spill_index
	.loc 1 6096 0
	movl	-16(%rbp), %edx	# j, tmp268
	movl	-20(%rbp), %eax	# i, tmp269
	movl	%edx, %esi	# tmp268,
	movl	%eax, %edi	# tmp269,
	call	transfer_replacements	#
.L1780:
	.loc 1 6086 0
	addl	$1, -16(%rbp)	#, j
.L1779:
	.loc 1 6086 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1016
	cmpl	%eax, -16(%rbp)	# n_reloads.1016, j
	jl	.L1782	#,
	.loc 1 6105 0 is_stmt 1
	movl	-20(%rbp), %eax	# i, tmp271
	movslq	%eax, %rdx	# tmp271, tmp270
	movq	%rdx, %rax	# tmp270, tmp272
	addq	%rax, %rax	# tmp272
	addq	%rdx, %rax	# tmp270, tmp272
	salq	$2, %rax	#, tmp272
	addq	%rdx, %rax	# tmp270, tmp272
	salq	$3, %rax	#, tmp273
	addq	$rld+80, %rax	#, tmp274
	movl	12(%rax), %eax	# rld[i_1].when_needed, D.28352
	cmpl	$9, %eax	#, D.28352
	jne	.L1768	#,
	.loc 1 6106 0
	movl	$0, -16(%rbp)	#, j
	jmp	.L1783	#
.L1788:
	.loc 1 6107 0
	movl	-16(%rbp), %eax	# j, tmp276
	movslq	%eax, %rdx	# tmp276, tmp275
	movq	%rdx, %rax	# tmp275, tmp277
	addq	%rax, %rax	# tmp277
	addq	%rdx, %rax	# tmp275, tmp277
	salq	$2, %rax	#, tmp277
	addq	%rdx, %rax	# tmp275, tmp277
	salq	$3, %rax	#, tmp278
	addq	$rld, %rax	#, tmp279
	movq	(%rax), %rax	# rld[j_4].in, D.28351
	testq	%rax, %rax	# D.28351
	je	.L1784	#,
	.loc 1 6108 0
	movl	-16(%rbp), %eax	# j, tmp281
	movslq	%eax, %rdx	# tmp281, tmp280
	movq	%rdx, %rax	# tmp280, tmp282
	addq	%rax, %rax	# tmp282
	addq	%rdx, %rax	# tmp280, tmp282
	salq	$2, %rax	#, tmp282
	addq	%rdx, %rax	# tmp280, tmp282
	salq	$3, %rax	#, tmp283
	addq	$rld+80, %rax	#, tmp284
	movl	12(%rax), %eax	# rld[j_4].when_needed, D.28352
	cmpl	$9, %eax	#, D.28352
	je	.L1784	#,
	.loc 1 6109 0
	movl	-20(%rbp), %eax	# i, tmp286
	movslq	%eax, %rdx	# tmp286, tmp285
	movq	%rdx, %rax	# tmp285, tmp287
	addq	%rax, %rax	# tmp287
	addq	%rdx, %rax	# tmp285, tmp287
	salq	$2, %rax	#, tmp287
	addq	%rdx, %rax	# tmp285, tmp287
	salq	$3, %rax	#, tmp288
	addq	$rld, %rax	#, tmp289
	movq	(%rax), %rcx	# rld[i_1].in, D.28351
	movl	-16(%rbp), %eax	# j, tmp291
	movslq	%eax, %rdx	# tmp291, tmp290
	movq	%rdx, %rax	# tmp290, tmp292
	addq	%rax, %rax	# tmp292
	addq	%rdx, %rax	# tmp290, tmp292
	salq	$2, %rax	#, tmp292
	addq	%rdx, %rax	# tmp290, tmp292
	salq	$3, %rax	#, tmp293
	addq	$rld, %rax	#, tmp294
	movq	(%rax), %rax	# rld[j_4].in, D.28351
	movq	%rcx, %rsi	# D.28351,
	movq	%rax, %rdi	# D.28351,
	call	reg_overlap_mentioned_for_reload_p	#
	testl	%eax, %eax	# D.28353
	je	.L1784	#,
	.loc 1 6112 0
	movl	-16(%rbp), %eax	# j, tmp296
	movslq	%eax, %rdx	# tmp296, tmp295
	movq	%rdx, %rax	# tmp295, tmp297
	addq	%rax, %rax	# tmp297
	addq	%rdx, %rax	# tmp295, tmp297
	salq	$2, %rax	#, tmp297
	addq	%rdx, %rax	# tmp295, tmp297
	salq	$3, %rax	#, tmp298
	addq	$rld+80, %rax	#, tmp299
	movl	12(%rax), %eax	# rld[j_4].when_needed, D.28352
	cmpl	$3, %eax	#, D.28352
	je	.L1785	#,
	.loc 1 6113 0
	movl	-16(%rbp), %eax	# j, tmp301
	movslq	%eax, %rdx	# tmp301, tmp300
	movq	%rdx, %rax	# tmp300, tmp302
	addq	%rax, %rax	# tmp302
	addq	%rdx, %rax	# tmp300, tmp302
	salq	$2, %rax	#, tmp302
	addq	%rdx, %rax	# tmp300, tmp302
	salq	$3, %rax	#, tmp303
	addq	$rld+80, %rax	#, tmp304
	movl	12(%rax), %eax	# rld[j_4].when_needed, D.28352
	cmpl	$4, %eax	#, D.28352
	jne	.L1786	#,
.L1785:
	.loc 1 6112 0 discriminator 1
	movl	$10, %ecx	#, iftmp.1017
	jmp	.L1787	#
.L1786:
	.loc 1 6112 0 is_stmt 0
	movl	$9, %ecx	#, iftmp.1017
.L1787:
	.loc 1 6112 0 discriminator 2
	movl	-16(%rbp), %eax	# j, tmp306
	movslq	%eax, %rdx	# tmp306, tmp305
	movq	%rdx, %rax	# tmp305, tmp307
	addq	%rax, %rax	# tmp307
	addq	%rdx, %rax	# tmp305, tmp307
	salq	$2, %rax	#, tmp307
	addq	%rdx, %rax	# tmp305, tmp307
	salq	$3, %rax	#, tmp308
	addq	$rld+80, %rax	#, tmp309
	movl	%ecx, 12(%rax)	# iftmp.1017, rld[j_4].when_needed
.L1784:
	.loc 1 6106 0 is_stmt 1
	addl	$1, -16(%rbp)	#, j
.L1783:
	.loc 1 6106 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1018
	cmpl	%eax, -16(%rbp)	# n_reloads.1018, j
	jl	.L1788	#,
.L1768:
.LBE135:
	.loc 1 6032 0 is_stmt 1
	addl	$1, -20(%rbp)	#, i
.L1765:
	.loc 1 6032 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1019
	cmpl	%eax, -20(%rbp)	# n_reloads.1019, i
	jl	.L1789	#,
	.loc 1 6117 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE55:
	.size	merge_assigned_reloads, .-merge_assigned_reloads
	.local	input_reload_insns
	.comm	input_reload_insns,240,32
	.local	other_input_address_reload_insns
	.comm	other_input_address_reload_insns,8,8
	.local	other_input_reload_insns
	.comm	other_input_reload_insns,8,8
	.local	input_address_reload_insns
	.comm	input_address_reload_insns,240,32
	.local	inpaddr_address_reload_insns
	.comm	inpaddr_address_reload_insns,240,32
	.local	output_reload_insns
	.comm	output_reload_insns,240,32
	.local	output_address_reload_insns
	.comm	output_address_reload_insns,240,32
	.local	outaddr_address_reload_insns
	.comm	outaddr_address_reload_insns,240,32
	.local	operand_reload_insns
	.comm	operand_reload_insns,8,8
	.local	other_operand_reload_insns
	.comm	other_operand_reload_insns,8,8
	.local	other_output_reload_insns
	.comm	other_output_reload_insns,240,32
	.local	new_spill_reg_store
	.comm	new_spill_reg_store,424,32
	.local	reg_reloaded_died
	.comm	reg_reloaded_died,8,8
	.type	emit_input_reload_insns, @function
emit_input_reload_insns:
.LFB56:
	.loc 1 6145 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# chain, chain
	movq	%rsi, -112(%rbp)	# rl, rl
	movq	%rdx, -120(%rbp)	# old, old
	movl	%ecx, -124(%rbp)	# j, j
	.loc 1 6146 0
	movq	-104(%rbp), %rax	# chain, tmp259
	movq	32(%rax), %rax	# chain_19(D)->insn, tmp260
	movq	%rax, -24(%rbp)	# tmp260, insn
	.loc 1 6147 0
	movq	-112(%rbp), %rax	# rl, tmp261
	movq	64(%rax), %rax	# rl_21(D)->reg_rtx, tmp262
	movq	%rax, -72(%rbp)	# tmp262, reloadreg
	.loc 1 6148 0
	movq	$0, -64(%rbp)	#, oldequiv_reg
	.loc 1 6149 0
	movq	$0, -56(%rbp)	#, oldequiv
	.loc 1 6150 0
	movl	$0, -84(%rbp)	#, special
	.loc 1 6186 0
	movq	-120(%rbp), %rax	# old, tmp263
	movzbl	2(%rax), %eax	# old_26(D)->mode, D.28354
	movzbl	%al, %eax	# D.28354, tmp264
	movl	%eax, -80(%rbp)	# tmp264, mode
	.loc 1 6187 0
	cmpl	$0, -80(%rbp)	#, mode
	jne	.L1791	#,
	.loc 1 6188 0
	movq	-112(%rbp), %rax	# rl, tmp265
	movl	20(%rax), %eax	# rl_21(D)->inmode, tmp266
	movl	%eax, -80(%rbp)	# tmp266, mode
.L1791:
	.loc 1 6213 0
	cmpq	$0, -56(%rbp)	#, oldequiv
	jne	.L1792	#,
	.loc 1 6213 0 is_stmt 0 discriminator 1
	movl	optimize(%rip), %eax	# optimize, optimize.1020
	testl	%eax, %eax	# optimize.1020
	je	.L1792	#,
	.loc 1 6214 0 is_stmt 1
	movq	-120(%rbp), %rax	# old, tmp267
	movzwl	(%rax), %eax	# old_26(D)->code, D.28355
	cmpw	$66, %ax	#, D.28355
	je	.L1793	#,
	.loc 1 6215 0
	movq	-120(%rbp), %rax	# old, tmp268
	movzwl	(%rax), %eax	# old_26(D)->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1792	#,
	.loc 1 6216 0
	movq	-120(%rbp), %rax	# old, tmp269
	movl	8(%rax), %eax	# old_26(D)->fld[0].rtuint, D.28356
	cmpl	$52, %eax	#, D.28356
	jbe	.L1792	#,
	.loc 1 6217 0
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.1021
	movq	-120(%rbp), %rax	# old, tmp270
	movl	8(%rax), %eax	# old_26(D)->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, D.28357
	addq	%rax, %rax	# D.28357
	addq	%rdx, %rax	# reg_renumber.1021, D.28358
	movzwl	(%rax), %eax	# *_38, D.28359
	testw	%ax, %ax	# D.28359
	jns	.L1792	#,
.L1793:
	.loc 1 6218 0
	movq	-24(%rbp), %rsi	# insn, tmp271
	movq	-120(%rbp), %rax	# old, tmp272
	movl	-80(%rbp), %edx	# mode, tmp273
	movl	%edx, (%rsp)	# tmp273,
	movl	$0, %r9d	#,
	movl	$0, %r8d	#,
	movl	$-1, %ecx	#,
	movl	$24, %edx	#,
	movq	%rax, %rdi	# tmp272,
	call	find_equiv_reg	#
	movq	%rax, -56(%rbp)	# tmp274, oldequiv
.L1792:
	.loc 1 6220 0
	cmpq	$0, -56(%rbp)	#, oldequiv
	je	.L1794	#,
.LBB136:
	.loc 1 6222 0
	movq	-56(%rbp), %rax	# oldequiv, tmp275
	movq	%rax, %rdi	# tmp275,
	call	true_regnum	#
	movl	%eax, -76(%rbp)	# D.28360, regno
	.loc 1 6226 0
	movq	const_int_rtx+512(%rip), %r9	# const_int_rtx, D.28361
	movq	-112(%rbp), %rax	# rl, tmp276
	movq	(%rax), %r8	# rl_21(D)->in, D.28361
	movq	-112(%rbp), %rax	# rl, tmp277
	movl	92(%rax), %ecx	# rl_21(D)->when_needed, D.28362
	movq	-112(%rbp), %rax	# rl, tmp278
	movl	72(%rax), %edx	# rl_21(D)->opnum, D.28360
	movq	-112(%rbp), %rax	# rl, tmp279
	movl	28(%rax), %esi	# rl_21(D)->mode, D.28363
	movl	-76(%rbp), %eax	# regno, regno.1022
	movl	$0, 8(%rsp)	#,
	movl	-124(%rbp), %edi	# j, tmp280
	movl	%edi, (%rsp)	# tmp280,
	movl	%eax, %edi	# regno.1022,
	call	free_for_value_p	#
	testl	%eax, %eax	# D.28360
	jne	.L1795	#,
	.loc 1 6228 0
	movq	$0, -56(%rbp)	#, oldequiv
.L1795:
	.loc 1 6235 0
	cmpq	$0, -56(%rbp)	#, oldequiv
	je	.L1794	#,
	.loc 1 6236 0
	movl	-76(%rbp), %eax	# regno, tmp281
	movl	regclass_map(,%rax,4), %edx	# regclass_map, D.28364
	movq	-112(%rbp), %rax	# rl, tmp282
	movl	16(%rax), %eax	# rl_21(D)->class, D.28364
	cmpl	%eax, %edx	# D.28364, D.28364
	je	.L1796	#,
	.loc 1 6237 0
	movq	-112(%rbp), %rax	# rl, tmp283
	movl	16(%rax), %edx	# rl_21(D)->class, D.28364
	movl	-76(%rbp), %eax	# regno, tmp284
	movl	regclass_map(,%rax,4), %ecx	# regclass_map, D.28364
	movl	-80(%rbp), %eax	# mode, tmp285
	movl	%ecx, %esi	# D.28364,
	movl	%eax, %edi	# tmp285,
	call	ix86_register_move_cost	#
	movl	%eax, %ebx	#, D.28360
	.loc 1 6239 0
	movq	-112(%rbp), %rax	# rl, tmp286
	movl	16(%rax), %ecx	# rl_21(D)->class, D.28364
	movl	-80(%rbp), %eax	# mode, tmp287
	movl	$1, %edx	#,
	movl	%ecx, %esi	# D.28364,
	movl	%eax, %edi	# tmp287,
	call	ix86_memory_move_cost	#
	.loc 1 6237 0
	cmpl	%eax, %ebx	# D.28360, D.28360
	jge	.L1797	#,
.L1796:
	.loc 1 6246 0
	movq	-112(%rbp), %rax	# rl, tmp288
	movl	16(%rax), %esi	# rl_21(D)->class, D.28364
	movl	-76(%rbp), %eax	# regno, tmp289
	movl	regclass_map(,%rax,4), %eax	# regclass_map, D.28364
	movl	-80(%rbp), %edx	# mode, tmp290
	movl	$1, %ecx	#,
	movl	%eax, %edi	# D.28364,
	call	ix86_secondary_memory_needed	#
	testl	%eax, %eax	# D.28360
	je	.L1794	#,
.L1797:
	.loc 1 6251 0
	movq	$0, -56(%rbp)	#, oldequiv
.L1794:
.LBE136:
	.loc 1 6258 0
	cmpq	$0, -56(%rbp)	#, oldequiv
	jne	.L1798	#,
	.loc 1 6259 0
	movl	-124(%rbp), %eax	# j, tmp292
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28361
	testq	%rax, %rax	# D.28361
	je	.L1798	#,
	.loc 1 6260 0
	movq	-112(%rbp), %rax	# rl, tmp293
	movq	40(%rax), %rax	# rl_21(D)->in_reg, D.28361
	movzwl	(%rax), %eax	# _64->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1798	#,
	.loc 1 6262 0
	movq	-120(%rbp), %rax	# old, tmp294
	movq	%rax, -56(%rbp)	# tmp294, oldequiv
	.loc 1 6263 0
	movq	-112(%rbp), %rax	# rl, tmp295
	movq	40(%rax), %rax	# rl_21(D)->in_reg, tmp296
	movq	%rax, -120(%rbp)	# tmp296, old
.L1798:
	.loc 1 6265 0
	cmpq	$0, -56(%rbp)	#, oldequiv
	jne	.L1799	#,
	.loc 1 6266 0
	movq	-120(%rbp), %rax	# old, tmp297
	movq	%rax, -56(%rbp)	# tmp297, oldequiv
	jmp	.L1800	#
.L1799:
	.loc 1 6267 0
	movq	-56(%rbp), %rax	# oldequiv, tmp298
	movzwl	(%rax), %eax	# oldequiv_7->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1801	#,
	.loc 1 6268 0
	movq	-56(%rbp), %rax	# oldequiv, tmp299
	movq	%rax, -64(%rbp)	# tmp299, oldequiv_reg
	jmp	.L1800	#
.L1801:
	.loc 1 6269 0
	movq	-56(%rbp), %rax	# oldequiv, tmp300
	movzwl	(%rax), %eax	# oldequiv_7->code, D.28355
	cmpw	$63, %ax	#, D.28355
	jne	.L1800	#,
	.loc 1 6270 0
	movq	-56(%rbp), %rax	# oldequiv, tmp301
	movq	8(%rax), %rax	# oldequiv_7->fld[0].rtx, tmp302
	movq	%rax, -64(%rbp)	# tmp302, oldequiv_reg
.L1800:
	.loc 1 6276 0
	movl	optimize(%rip), %eax	# optimize, optimize.1023
	testl	%eax, %eax	# optimize.1023
	je	.L1802	#,
	.loc 1 6276 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# oldequiv, tmp303
	movzwl	(%rax), %eax	# oldequiv_8->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1802	#,
	.loc 1 6277 0 is_stmt 1
	movq	-56(%rbp), %rax	# oldequiv, tmp304
	movl	8(%rax), %eax	# oldequiv_8->fld[0].rtuint, D.28356
	cmpl	$52, %eax	#, D.28356
	ja	.L1802	#,
	.loc 1 6278 0
	movq	-56(%rbp), %rax	# oldequiv, tmp305
	movl	8(%rax), %eax	# oldequiv_8->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, tmp306
	movq	spill_reg_store(,%rax,8), %rax	# spill_reg_store, D.28361
	testq	%rax, %rax	# D.28361
	je	.L1802	#,
	.loc 1 6279 0
	movq	-120(%rbp), %rax	# old, tmp307
	movzwl	(%rax), %eax	# old_1->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1802	#,
	.loc 1 6280 0
	movq	-56(%rbp), %rax	# oldequiv, tmp308
	movl	8(%rax), %eax	# oldequiv_8->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, tmp309
	movq	spill_reg_stored_to(,%rax,8), %rdx	# spill_reg_stored_to, D.28361
	movq	-24(%rbp), %rax	# insn, tmp310
	movq	%rdx, %rsi	# D.28361,
	movq	%rax, %rdi	# tmp310,
	call	dead_or_set_p	#
	testl	%eax, %eax	# D.28360
	jne	.L1803	#,
	.loc 1 6281 0
	movq	-112(%rbp), %rax	# rl, tmp311
	movq	48(%rax), %rdx	# rl_21(D)->out_reg, D.28361
	movq	-56(%rbp), %rax	# oldequiv, tmp312
	movl	8(%rax), %eax	# oldequiv_8->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, tmp313
	movq	spill_reg_stored_to(,%rax,8), %rax	# spill_reg_stored_to, D.28361
	movq	%rdx, %rsi	# D.28361,
	movq	%rax, %rdi	# D.28361,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28360
	je	.L1802	#,
.L1803:
	.loc 1 6283 0
	movq	-56(%rbp), %rax	# oldequiv, tmp314
	movl	8(%rax), %eax	# oldequiv_8->fld[0].rtuint, D.28356
	movl	%eax, %edx	# D.28356, D.28360
	movl	-124(%rbp), %ecx	# j, tmp315
	movq	-24(%rbp), %rax	# insn, tmp316
	movl	%ecx, %esi	# tmp315,
	movq	%rax, %rdi	# tmp316,
	call	delete_output_reload	#
.L1802:
	.loc 1 6291 0
	movq	-72(%rbp), %rax	# reloadreg, tmp317
	movzbl	2(%rax), %eax	# reloadreg_22->mode, D.28354
	movzbl	%al, %eax	# D.28354, D.28356
	cmpl	-80(%rbp), %eax	# mode, D.28356
	je	.L1804	#,
	.loc 1 6292 0
	movq	-72(%rbp), %rax	# reloadreg, tmp318
	movl	8(%rax), %eax	# reloadreg_22->fld[0].rtuint, D.28356
	movl	%eax, %edx	# D.28356, D.28360
	movl	-80(%rbp), %eax	# mode, tmp319
	movl	%edx, %esi	# D.28360,
	movl	%eax, %edi	# tmp319,
	call	gen_rtx_REG	#
	movq	%rax, -72(%rbp)	# tmp320, reloadreg
	.loc 1 6293 0
	jmp	.L1805	#
.L1804:
	jmp	.L1805	#
.L1807:
	.loc 1 6294 0
	movq	-56(%rbp), %rax	# oldequiv, tmp321
	movq	8(%rax), %rax	# oldequiv_9->fld[0].rtx, tmp322
	movq	%rax, -56(%rbp)	# tmp322, oldequiv
.L1805:
	.loc 1 6293 0 discriminator 1
	movq	-56(%rbp), %rax	# oldequiv, tmp323
	movzwl	(%rax), %eax	# oldequiv_9->code, D.28355
	cmpw	$63, %ax	#, D.28355
	jne	.L1806	#,
	.loc 1 6293 0 is_stmt 0 discriminator 2
	movq	-56(%rbp), %rax	# oldequiv, tmp324
	movzbl	2(%rax), %eax	# oldequiv_9->mode, D.28354
	movzbl	%al, %eax	# D.28354, D.28356
	cmpl	-80(%rbp), %eax	# mode, D.28356
	jne	.L1807	#,
.L1806:
	.loc 1 6295 0 is_stmt 1
	movq	-56(%rbp), %rax	# oldequiv, tmp325
	movzbl	2(%rax), %eax	# oldequiv_9->mode, D.28354
	testb	%al, %al	# D.28354
	je	.L1808	#,
	.loc 1 6296 0
	movq	-56(%rbp), %rax	# oldequiv, tmp326
	movzbl	2(%rax), %eax	# oldequiv_9->mode, D.28354
	movzbl	%al, %eax	# D.28354, D.28356
	cmpl	-80(%rbp), %eax	# mode, D.28356
	je	.L1808	#,
	.loc 1 6297 0
	movq	-56(%rbp), %rdx	# oldequiv, tmp327
	movl	-80(%rbp), %eax	# mode, tmp328
	movq	%rdx, %rsi	# tmp327,
	movl	%eax, %edi	# tmp328,
	call	gen_lowpart_SUBREG	#
	movq	%rax, -56(%rbp)	# tmp329, oldequiv
.L1808:
	.loc 1 6300 0
	movq	-112(%rbp), %rax	# rl, tmp330
	movl	92(%rax), %eax	# rl_21(D)->when_needed, D.28362
	cmpl	$10, %eax	#, D.28362
	ja	.L1809	#,
	movl	%eax, %eax	# D.28362, tmp331
	movq	.L1811(,%rax,8), %rax	#, tmp332
	jmp	*%rax	# tmp332
	.section	.rodata
	.align 8
	.align 4
.L1811:
	.quad	.L1810
	.quad	.L1809
	.quad	.L1809
	.quad	.L1812
	.quad	.L1813
	.quad	.L1814
	.quad	.L1815
	.quad	.L1816
	.quad	.L1817
	.quad	.L1818
	.quad	.L1819
	.text
.L1818:
	.loc 1 6303 0
	movq	$other_input_reload_insns, -48(%rbp)	#, where
	.loc 1 6304 0
	jmp	.L1820	#
.L1810:
	.loc 1 6306 0
	movq	-112(%rbp), %rax	# rl, tmp333
	movl	72(%rax), %eax	# rl_21(D)->opnum, D.28360
	cltq
	salq	$3, %rax	#, tmp335
	addq	$input_reload_insns, %rax	#, tmp336
	movq	%rax, -48(%rbp)	# tmp336, where
	.loc 1 6307 0
	jmp	.L1820	#
.L1812:
	.loc 1 6309 0
	movq	-112(%rbp), %rax	# rl, tmp337
	movl	72(%rax), %eax	# rl_21(D)->opnum, D.28360
	cltq
	salq	$3, %rax	#, tmp339
	addq	$input_address_reload_insns, %rax	#, tmp340
	movq	%rax, -48(%rbp)	# tmp340, where
	.loc 1 6310 0
	jmp	.L1820	#
.L1813:
	.loc 1 6312 0
	movq	-112(%rbp), %rax	# rl, tmp341
	movl	72(%rax), %eax	# rl_21(D)->opnum, D.28360
	cltq
	salq	$3, %rax	#, tmp343
	addq	$inpaddr_address_reload_insns, %rax	#, tmp344
	movq	%rax, -48(%rbp)	# tmp344, where
	.loc 1 6313 0
	jmp	.L1820	#
.L1814:
	.loc 1 6315 0
	movq	-112(%rbp), %rax	# rl, tmp345
	movl	72(%rax), %eax	# rl_21(D)->opnum, D.28360
	cltq
	salq	$3, %rax	#, tmp347
	addq	$output_address_reload_insns, %rax	#, tmp348
	movq	%rax, -48(%rbp)	# tmp348, where
	.loc 1 6316 0
	jmp	.L1820	#
.L1815:
	.loc 1 6318 0
	movq	-112(%rbp), %rax	# rl, tmp349
	movl	72(%rax), %eax	# rl_21(D)->opnum, D.28360
	cltq
	salq	$3, %rax	#, tmp351
	addq	$outaddr_address_reload_insns, %rax	#, tmp352
	movq	%rax, -48(%rbp)	# tmp352, where
	.loc 1 6319 0
	jmp	.L1820	#
.L1816:
	.loc 1 6321 0
	movq	$operand_reload_insns, -48(%rbp)	#, where
	.loc 1 6322 0
	jmp	.L1820	#
.L1817:
	.loc 1 6324 0
	movq	$other_operand_reload_insns, -48(%rbp)	#, where
	.loc 1 6325 0
	jmp	.L1820	#
.L1819:
	.loc 1 6327 0
	movq	$other_input_address_reload_insns, -48(%rbp)	#, where
	.loc 1 6328 0
	jmp	.L1820	#
.L1809:
	.loc 1 6330 0
	movl	$__FUNCTION__.15776, %edx	#,
	movl	$6330, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1820:
	.loc 1 6333 0
	movq	-48(%rbp), %rax	# where, tmp353
	movq	(%rax), %rax	# *where_15, D.28361
	movq	%rax, %rdi	# D.28361,
	call	push_to_sequence	#
	.loc 1 6336 0
	movq	-112(%rbp), %rax	# rl, tmp354
	movq	8(%rax), %rax	# rl_21(D)->out, D.28361
	testq	%rax, %rax	# D.28361
	je	.L1821	#,
	.loc 1 6336 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# rl, tmp355
	movq	48(%rax), %rax	# rl_21(D)->out_reg, D.28361
	testq	%rax, %rax	# D.28361
	jne	.L1821	#,
	.loc 1 6341 0 is_stmt 1
	movq	-112(%rbp), %rax	# rl, tmp356
	movl	76(%rax), %eax	# rl_21(D)->secondary_in_reload, D.28360
	testl	%eax, %eax	# D.28360
	js	.L1822	#,
	.loc 1 6342 0
	movl	$__FUNCTION__.15776, %edx	#,
	movl	$6342, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1822:
	.loc 1 6344 0
	movl	-124(%rbp), %eax	# j, tmp358
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28365
	testb	%al, %al	# D.28365
	je	.L1823	#,
	.loc 1 6345 0
	movq	-72(%rbp), %rax	# reloadreg, tmp359
	movq	%rax, -56(%rbp)	# tmp359, oldequiv
.L1823:
	.loc 1 6347 0
	movq	-112(%rbp), %rax	# rl, tmp360
	movq	40(%rax), %rax	# rl_21(D)->in_reg, D.28361
	movq	8(%rax), %rax	# _122->fld[0].rtx, tmp361
	movq	%rax, -120(%rbp)	# tmp361, old
	.loc 1 6349 0
	movl	optimize(%rip), %eax	# optimize, optimize.1024
	testl	%eax, %eax	# optimize.1024
	je	.L1824	#,
	.loc 1 6349 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# oldequiv, tmp362
	movzwl	(%rax), %eax	# oldequiv_11->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1824	#,
	.loc 1 6350 0 is_stmt 1
	movq	-56(%rbp), %rax	# oldequiv, tmp363
	movl	8(%rax), %eax	# oldequiv_11->fld[0].rtuint, D.28356
	cmpl	$52, %eax	#, D.28356
	ja	.L1824	#,
	.loc 1 6351 0
	movq	-56(%rbp), %rax	# oldequiv, tmp364
	movl	8(%rax), %eax	# oldequiv_11->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, tmp365
	movq	spill_reg_store(,%rax,8), %rax	# spill_reg_store, D.28361
	testq	%rax, %rax	# D.28361
	je	.L1824	#,
	.loc 1 6352 0
	movq	-120(%rbp), %rax	# old, tmp366
	movzwl	(%rax), %eax	# old_123->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1824	#,
	.loc 1 6354 0
	movq	-56(%rbp), %rax	# oldequiv, tmp367
	movl	8(%rax), %eax	# oldequiv_11->fld[0].rtuint, D.28356
	.loc 1 6353 0
	movl	%eax, %eax	# D.28356, tmp368
	movq	spill_reg_stored_to(,%rax,8), %rdx	# spill_reg_stored_to, D.28361
	movq	-24(%rbp), %rax	# insn, tmp369
	movq	%rdx, %rsi	# D.28361,
	movq	%rax, %rdi	# tmp369,
	call	dead_or_set_p	#
	testl	%eax, %eax	# D.28360
	jne	.L1825	#,
	.loc 1 6355 0
	movq	-56(%rbp), %rax	# oldequiv, tmp370
	movl	8(%rax), %eax	# oldequiv_11->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, tmp371
	movq	spill_reg_stored_to(,%rax,8), %rax	# spill_reg_stored_to, D.28361
	movq	-120(%rbp), %rdx	# old, tmp372
	movq	%rdx, %rsi	# tmp372,
	movq	%rax, %rdi	# D.28361,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28360
	je	.L1824	#,
.L1825:
	.loc 1 6357 0
	movq	-56(%rbp), %rax	# oldequiv, tmp373
	movl	8(%rax), %eax	# oldequiv_11->fld[0].rtuint, D.28356
	movl	%eax, %edx	# D.28356, D.28360
	movl	-124(%rbp), %ecx	# j, tmp374
	movq	-24(%rbp), %rax	# insn, tmp375
	movl	%ecx, %esi	# tmp374,
	movq	%rax, %rdi	# tmp375,
	call	delete_output_reload	#
.L1824:
	.loc 1 6360 0
	movl	$1, -84(%rbp)	#, special
	.loc 1 6362 0
	movq	-72(%rbp), %rax	# reloadreg, tmp376
	movl	8(%rax), %ebx	# reloadreg_2->fld[0].rtuint, D.28356
	.loc 1 6363 0
	movq	-112(%rbp), %rax	# rl, tmp377
	movl	36(%rax), %ecx	# rl_21(D)->inc, D.28360
	movq	-112(%rbp), %rax	# rl, tmp378
	movq	8(%rax), %rdx	# rl_21(D)->out, D.28361
	movq	-56(%rbp), %rsi	# oldequiv, tmp379
	movq	-72(%rbp), %rax	# reloadreg, tmp380
	movq	%rax, %rdi	# tmp380,
	call	inc_for_reload	#
	movl	%ebx, %edx	# D.28356, tmp381
	movq	%rax, new_spill_reg_store(,%rdx,8)	# D.28361, new_spill_reg_store
	jmp	.L1826	#
.L1821:
	.loc 1 6371 0
	movl	optimize(%rip), %eax	# optimize, optimize.1025
	testl	%eax, %eax	# optimize.1025
	je	.L1826	#,
	.loc 1 6371 0 is_stmt 0 discriminator 1
	movq	-120(%rbp), %rax	# old, tmp382
	movzwl	(%rax), %eax	# old_1->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1826	#,
	.loc 1 6372 0 is_stmt 1
	movq	-120(%rbp), %rax	# old, tmp383
	movl	8(%rax), %eax	# old_1->fld[0].rtuint, D.28356
	cmpl	$52, %eax	#, D.28356
	jbe	.L1826	#,
	.loc 1 6373 0
	movq	-120(%rbp), %rdx	# old, tmp384
	movq	-24(%rbp), %rax	# insn, tmp385
	movq	%rdx, %rsi	# tmp384,
	movq	%rax, %rdi	# tmp385,
	call	dead_or_set_p	#
	testl	%eax, %eax	# D.28360
	je	.L1826	#,
	.loc 1 6376 0
	movq	-72(%rbp), %rax	# reloadreg, tmp386
	movq	%rax, %rdi	# tmp386,
	call	conflicts_with_override	#
	testl	%eax, %eax	# D.28360
	jne	.L1826	#,
	.loc 1 6377 0
	movq	-112(%rbp), %rax	# rl, tmp387
	movq	8(%rax), %r9	# rl_21(D)->out, D.28361
	movq	-112(%rbp), %rax	# rl, tmp388
	movl	92(%rax), %ecx	# rl_21(D)->when_needed, D.28362
	movq	-112(%rbp), %rax	# rl, tmp389
	movl	72(%rax), %edx	# rl_21(D)->opnum, D.28360
	movq	-112(%rbp), %rax	# rl, tmp390
	movl	28(%rax), %esi	# rl_21(D)->mode, D.28363
	movq	-72(%rbp), %rax	# reloadreg, tmp391
	movl	8(%rax), %eax	# reloadreg_2->fld[0].rtuint, D.28356
	movq	-120(%rbp), %r8	# old, tmp392
	movl	$0, 8(%rsp)	#,
	movl	-124(%rbp), %edi	# j, tmp393
	movl	%edi, (%rsp)	# tmp393,
	movl	%eax, %edi	# D.28360,
	call	free_for_value_p	#
	testl	%eax, %eax	# D.28360
	je	.L1826	#,
.LBB137:
	.loc 1 6380 0
	movq	-24(%rbp), %rax	# insn, tmp394
	movq	16(%rax), %rax	# insn_20->fld[1].rtx, tmp395
	movq	%rax, -40(%rbp)	# tmp395, temp
	.loc 1 6381 0
	jmp	.L1827	#
.L1829:
	.loc 1 6382 0
	movq	-40(%rbp), %rax	# temp, tmp396
	movq	16(%rax), %rax	# temp_16->fld[1].rtx, tmp397
	movq	%rax, -40(%rbp)	# tmp397, temp
.L1827:
	.loc 1 6381 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, temp
	je	.L1828	#,
	.loc 1 6381 0 is_stmt 0 discriminator 2
	movq	-40(%rbp), %rax	# temp, tmp398
	movzwl	(%rax), %eax	# temp_16->code, D.28355
	cmpw	$37, %ax	#, D.28355
	je	.L1829	#,
.L1828:
	.loc 1 6383 0 is_stmt 1
	cmpq	$0, -40(%rbp)	#, temp
	je	.L1826	#,
	.loc 1 6384 0
	movq	-40(%rbp), %rax	# temp, tmp399
	movzwl	(%rax), %eax	# temp_16->code, D.28355
	cmpw	$32, %ax	#, D.28355
	jne	.L1826	#,
	.loc 1 6385 0
	movq	-40(%rbp), %rax	# temp, tmp400
	movq	32(%rax), %rax	# temp_16->fld[3].rtx, D.28361
	movzwl	(%rax), %eax	# _159->code, D.28355
	cmpw	$47, %ax	#, D.28355
	jne	.L1826	#,
	.loc 1 6386 0
	movq	-40(%rbp), %rax	# temp, tmp401
	movq	32(%rax), %rax	# temp_16->fld[3].rtx, D.28361
	movq	8(%rax), %rax	# _161->fld[0].rtx, D.28361
	cmpq	-120(%rbp), %rax	# old, D.28361
	jne	.L1826	#,
	.loc 1 6388 0
	movq	-40(%rbp), %rax	# temp, tmp402
	movq	32(%rax), %rax	# temp_16->fld[3].rtx, D.28361
	movq	%rax, %rdi	# D.28361,
	call	asm_noperands	#
	testl	%eax, %eax	# D.28360
	jns	.L1826	#,
	.loc 1 6390 0
	movq	-40(%rbp), %rax	# temp, tmp403
	movl	40(%rax), %eax	# temp_16->fld[4].rtint, D.28360
	testl	%eax, %eax	# D.28360
	js	.L1830	#,
	.loc 1 6390 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# temp, tmp404
	movl	40(%rax), %eax	# temp_16->fld[4].rtint, iftmp.1026
	jmp	.L1831	#
.L1830:
	.loc 1 6390 0 discriminator 2
	movq	-40(%rbp), %rax	# temp, tmp405
	movq	%rax, %rdi	# tmp405,
	call	recog_memoized_1	#
.L1831:
	.loc 1 6390 0 discriminator 3
	movslq	%eax, %rdx	# iftmp.1026, tmp406
	movq	%rdx, %rax	# tmp406, tmp407
	salq	$2, %rax	#, tmp407
	addq	%rdx, %rax	# tmp406, tmp407
	salq	$3, %rax	#, tmp408
	addq	$insn_data+24, %rax	#, tmp409
	movq	(%rax), %rax	# insn_data[iftmp.1026_18].operand, D.28366
	movq	8(%rax), %rax	# _168->constraint, D.28367
	movq	-72(%rbp), %rdx	# reloadreg, tmp410
	movq	%rdx, %rsi	# tmp410,
	movq	%rax, %rdi	# D.28367,
	call	constraint_accepts_reg_p	#
	testl	%eax, %eax	# D.28360
	je	.L1826	#,
	.loc 1 6394 0 is_stmt 1
	movq	-24(%rbp), %rax	# insn, tmp411
	movq	32(%rax), %rax	# insn_20->fld[3].rtx, D.28361
	movq	-120(%rbp), %rcx	# old, tmp412
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp412,
	movq	%rax, %rdi	# D.28361,
	call	count_occurrences	#
	cmpl	$1, %eax	#, D.28360
	jne	.L1826	#,
	.loc 1 6396 0
	movq	-40(%rbp), %rax	# temp, tmp413
	movq	32(%rax), %rax	# temp_16->fld[3].rtx, D.28361
	movq	16(%rax), %rdx	# _173->fld[1].rtx, D.28361
	movq	-120(%rbp), %rax	# old, tmp414
	movq	%rdx, %rsi	# D.28361,
	movq	%rax, %rdi	# tmp414,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.28360
	jne	.L1826	#,
	.loc 1 6399 0
	movq	-40(%rbp), %rax	# temp, tmp415
	movq	32(%rax), %rax	# temp_16->fld[3].rtx, D.28361
	movq	-72(%rbp), %rdx	# reloadreg, tmp416
	movq	%rdx, 8(%rax)	# tmp416, _176->fld[0].rtx
	.loc 1 6405 0
	movq	-40(%rbp), %rax	# temp, tmp417
	movq	32(%rax), %rax	# temp_16->fld[3].rtx, D.28361
	movq	16(%rax), %rax	# _177->fld[1].rtx, D.28361
	movzwl	(%rax), %eax	# _178->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1832	#,
	.loc 1 6406 0
	movq	-40(%rbp), %rax	# temp, tmp418
	movq	32(%rax), %rax	# temp_16->fld[3].rtx, D.28361
	movq	16(%rax), %rax	# _180->fld[1].rtx, D.28361
	movl	8(%rax), %eax	# _181->fld[0].rtuint, D.28356
	cmpl	$52, %eax	#, D.28356
	ja	.L1832	#,
	.loc 1 6408 0
	movq	-40(%rbp), %rax	# temp, tmp419
	movq	32(%rax), %rax	# temp_16->fld[3].rtx, D.28361
	movq	16(%rax), %rax	# _183->fld[1].rtx, D.28361
	movl	8(%rax), %eax	# _184->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, tmp420
	movq	$0, spill_reg_store(,%rax,8)	#, spill_reg_store
	.loc 1 6409 0
	movq	-40(%rbp), %rax	# temp, tmp421
	movq	32(%rax), %rax	# temp_16->fld[3].rtx, D.28361
	movq	16(%rax), %rax	# _186->fld[1].rtx, D.28361
	movl	8(%rax), %eax	# _187->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, tmp422
	movq	$0, spill_reg_stored_to(,%rax,8)	#, spill_reg_stored_to
.L1832:
	.loc 1 6414 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.1027
	movq	-120(%rbp), %rdx	# old, tmp423
	movl	8(%rdx), %edx	# old_1->fld[0].rtuint, D.28356
	movl	%edx, %edx	# D.28356, tmp424
	addq	$4, %rdx	#, tmp425
	movq	(%rax,%rdx,8), %rax	# reg_n_info.1027_189->data.reg, D.28368
	movl	24(%rax), %eax	# _191->deaths, D.28360
	cmpl	$1, %eax	#, D.28360
	jne	.L1833	#,
	.loc 1 6415 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.1028
	movq	-120(%rbp), %rdx	# old, tmp426
	movl	8(%rdx), %edx	# old_1->fld[0].rtuint, D.28356
	movl	%edx, %edx	# D.28356, tmp427
	addq	$4, %rdx	#, tmp428
	movq	(%rax,%rdx,8), %rax	# reg_n_info.1028_193->data.reg, D.28368
	movl	12(%rax), %eax	# _195->sets, D.28360
	cmpl	$1, %eax	#, D.28360
	jne	.L1833	#,
	.loc 1 6417 0
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.1029
	movq	-120(%rbp), %rax	# old, tmp429
	movl	8(%rax), %eax	# old_1->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, D.28357
	addq	%rax, %rax	# D.28357
	addq	%rax, %rdx	# D.28357, D.28358
	movq	-112(%rbp), %rax	# rl, tmp430
	movq	64(%rax), %rax	# rl_21(D)->reg_rtx, D.28361
	movl	8(%rax), %eax	# _202->fld[0].rtuint, D.28356
	movw	%ax, (%rdx)	# D.28359, *_201
	.loc 1 6418 0
	movq	-120(%rbp), %rax	# old, tmp431
	movl	8(%rax), %eax	# old_1->fld[0].rtuint, D.28356
	movl	$-1, %esi	#,
	movl	%eax, %edi	# D.28360,
	call	alter_reg	#
.L1833:
	.loc 1 6420 0
	movl	$1, -84(%rbp)	#, special
.L1826:
.LBE137:
	.loc 1 6585 0
	cmpl	$0, -84(%rbp)	#, special
	jne	.L1834	#,
	.loc 1 6585 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rdx	# oldequiv, tmp432
	movq	-72(%rbp), %rax	# reloadreg, tmp433
	movq	%rdx, %rsi	# tmp432,
	movq	%rax, %rdi	# tmp433,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28360
	jne	.L1834	#,
.LBB138:
	.loc 1 6587 0 is_stmt 1
	movq	-56(%rbp), %rax	# oldequiv, tmp434
	movq	%rax, -32(%rbp)	# tmp434, real_oldequiv
	.loc 1 6589 0
	movq	-56(%rbp), %rax	# oldequiv, tmp435
	movzwl	(%rax), %eax	# oldequiv_12->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1835	#,
	.loc 1 6590 0
	movq	-56(%rbp), %rax	# oldequiv, tmp436
	movl	8(%rax), %eax	# oldequiv_12->fld[0].rtuint, D.28356
	cmpl	$52, %eax	#, D.28356
	jbe	.L1835	#,
	.loc 1 6591 0
	movq	reg_equiv_memory_loc(%rip), %rdx	# reg_equiv_memory_loc, reg_equiv_memory_loc.1030
	movq	-56(%rbp), %rax	# oldequiv, tmp437
	movl	8(%rax), %eax	# oldequiv_12->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, D.28357
	salq	$3, %rax	#, D.28357
	addq	%rdx, %rax	# reg_equiv_memory_loc.1030, D.28369
	movq	(%rax), %rax	# *_216, D.28361
	testq	%rax, %rax	# D.28361
	jne	.L1836	#,
	.loc 1 6592 0
	movq	reg_equiv_constant(%rip), %rdx	# reg_equiv_constant, reg_equiv_constant.1031
	movq	-56(%rbp), %rax	# oldequiv, tmp438
	movl	8(%rax), %eax	# oldequiv_12->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, D.28357
	salq	$3, %rax	#, D.28357
	addq	%rdx, %rax	# reg_equiv_constant.1031, D.28369
	movq	(%rax), %rax	# *_222, D.28361
	testq	%rax, %rax	# D.28361
	jne	.L1836	#,
.L1835:
	.loc 1 6593 0
	movq	-56(%rbp), %rax	# oldequiv, tmp439
	movzwl	(%rax), %eax	# oldequiv_12->code, D.28355
	cmpw	$63, %ax	#, D.28355
	jne	.L1837	#,
	.loc 1 6594 0
	movq	-56(%rbp), %rax	# oldequiv, tmp440
	movq	8(%rax), %rax	# oldequiv_12->fld[0].rtx, D.28361
	movzwl	(%rax), %eax	# _225->code, D.28355
	cmpw	$61, %ax	#, D.28355
	jne	.L1837	#,
	.loc 1 6595 0
	movq	-56(%rbp), %rax	# oldequiv, tmp441
	movq	8(%rax), %rax	# oldequiv_12->fld[0].rtx, D.28361
	movl	8(%rax), %eax	# _227->fld[0].rtuint, D.28356
	cmpl	$52, %eax	#, D.28356
	jbe	.L1837	#,
	.loc 1 6598 0
	movq	reg_equiv_memory_loc(%rip), %rdx	# reg_equiv_memory_loc, reg_equiv_memory_loc.1032
	movq	-56(%rbp), %rax	# oldequiv, tmp442
	movq	8(%rax), %rax	# oldequiv_12->fld[0].rtx, D.28361
	movl	8(%rax), %eax	# _230->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, D.28357
	salq	$3, %rax	#, D.28357
	addq	%rdx, %rax	# reg_equiv_memory_loc.1032, D.28369
	movq	(%rax), %rax	# *_234, D.28361
	.loc 1 6597 0
	testq	%rax, %rax	# D.28361
	jne	.L1836	#,
	.loc 1 6600 0
	movq	reg_equiv_constant(%rip), %rdx	# reg_equiv_constant, reg_equiv_constant.1033
	movq	-56(%rbp), %rax	# oldequiv, tmp443
	movq	8(%rax), %rax	# oldequiv_12->fld[0].rtx, D.28361
	movl	8(%rax), %eax	# _237->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, D.28357
	salq	$3, %rax	#, D.28357
	addq	%rdx, %rax	# reg_equiv_constant.1033, D.28369
	movq	(%rax), %rax	# *_241, D.28361
	.loc 1 6599 0
	testq	%rax, %rax	# D.28361
	jne	.L1836	#,
.L1837:
	.loc 1 6601 0
	movq	-56(%rbp), %rax	# oldequiv, tmp444
	movzwl	(%rax), %eax	# oldequiv_12->code, D.28355
	cmpw	$67, %ax	#, D.28355
	je	.L1838	#,
	.loc 1 6601 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# oldequiv, tmp445
	movzwl	(%rax), %eax	# oldequiv_12->code, D.28355
	cmpw	$68, %ax	#, D.28355
	je	.L1838	#,
	movq	-56(%rbp), %rax	# oldequiv, tmp446
	movzwl	(%rax), %eax	# oldequiv_12->code, D.28355
	cmpw	$54, %ax	#, D.28355
	je	.L1838	#,
	movq	-56(%rbp), %rax	# oldequiv, tmp447
	movzwl	(%rax), %eax	# oldequiv_12->code, D.28355
	cmpw	$55, %ax	#, D.28355
	je	.L1838	#,
	movq	-56(%rbp), %rax	# oldequiv, tmp448
	movzwl	(%rax), %eax	# oldequiv_12->code, D.28355
	cmpw	$58, %ax	#, D.28355
	je	.L1838	#,
	movq	-56(%rbp), %rax	# oldequiv, tmp449
	movzwl	(%rax), %eax	# oldequiv_12->code, D.28355
	cmpw	$134, %ax	#, D.28355
	je	.L1838	#,
	movq	-56(%rbp), %rax	# oldequiv, tmp450
	movzwl	(%rax), %eax	# oldequiv_12->code, D.28355
	cmpw	$56, %ax	#, D.28355
	je	.L1838	#,
	movq	-56(%rbp), %rax	# oldequiv, tmp451
	movzwl	(%rax), %eax	# oldequiv_12->code, D.28355
	cmpw	$140, %ax	#, D.28355
	jne	.L1839	#,
.L1838:
	.loc 1 6602 0 is_stmt 1
	movq	-72(%rbp), %rax	# reloadreg, tmp452
	movl	8(%rax), %eax	# reloadreg_2->fld[0].rtuint, D.28356
	movl	%eax, %eax	# D.28356, tmp453
	movl	regclass_map(,%rax,4), %edx	# regclass_map, D.28364
	movq	-56(%rbp), %rax	# oldequiv, tmp454
	movl	%edx, %esi	# D.28364,
	movq	%rax, %rdi	# tmp454,
	call	ix86_preferred_reload_class	#
	testl	%eax, %eax	# D.28364
	jne	.L1839	#,
.L1836:
	.loc 1 6605 0
	movq	-112(%rbp), %rax	# rl, tmp455
	movq	(%rax), %rax	# rl_21(D)->in, tmp456
	movq	%rax, -32(%rbp)	# tmp456, real_oldequiv
.L1839:
	.loc 1 6606 0
	movq	-112(%rbp), %rax	# rl, tmp457
	movl	92(%rax), %ecx	# rl_21(D)->when_needed, D.28362
	movq	-112(%rbp), %rax	# rl, tmp458
	movl	72(%rax), %edx	# rl_21(D)->opnum, D.28360
	movq	-32(%rbp), %rsi	# real_oldequiv, tmp459
	movq	-72(%rbp), %rax	# reloadreg, tmp460
	movq	%rax, %rdi	# tmp460,
	call	gen_reload	#
.L1834:
.LBE138:
	.loc 1 6610 0
	movl	flag_non_call_exceptions(%rip), %eax	# flag_non_call_exceptions, flag_non_call_exceptions.1034
	testl	%eax, %eax	# flag_non_call_exceptions.1034
	je	.L1840	#,
	.loc 1 6611 0
	call	get_insns	#
	movq	%rax, %rdx	#, D.28361
	movq	-24(%rbp), %rax	# insn, tmp461
	movq	%rdx, %rsi	# D.28361,
	movq	%rax, %rdi	# tmp461,
	call	copy_eh_notes	#
.L1840:
	.loc 1 6614 0
	call	get_insns	#
	movq	-48(%rbp), %rdx	# where, tmp462
	movq	%rax, (%rdx)	# D.28361, *where_15
	.loc 1 6615 0
	call	end_sequence	#
	.loc 1 6619 0
	cmpq	$0, -64(%rbp)	#, oldequiv_reg
	je	.L1790	#,
	.loc 1 6620 0
	movl	-124(%rbp), %eax	# j, tmp464
	cltq
	movq	-56(%rbp), %rdx	# oldequiv, tmp465
	movq	%rdx, reload_override_in(,%rax,8)	# tmp465, reload_override_in
.L1790:
	.loc 1 6621 0
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE56:
	.size	emit_input_reload_insns, .-emit_input_reload_insns
	.section	.rodata
.LC14:
	.string	"VOIDmode on an output"
	.align 8
.LC15:
	.string	"output operand is constant in `asm'"
	.text
	.type	emit_output_reload_insns, @function
emit_output_reload_insns:
.LFB57:
	.loc 1 6630 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$168, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -152(%rbp)	# chain, chain
	movq	%rsi, -160(%rbp)	# rl, rl
	movl	%edx, -164(%rbp)	# j, j
	.loc 1 6631 0
	movq	-160(%rbp), %rax	# rl, tmp208
	movq	64(%rax), %rax	# rl_19(D)->reg_rtx, tmp209
	movq	%rax, -120(%rbp)	# tmp209, reloadreg
	.loc 1 6632 0
	movq	-152(%rbp), %rax	# chain, tmp210
	movq	32(%rax), %rax	# chain_21(D)->insn, tmp211
	movq	%rax, -88(%rbp)	# tmp211, insn
	.loc 1 6633 0
	movl	$0, -144(%rbp)	#, special
	.loc 1 6634 0
	movq	-160(%rbp), %rax	# rl, tmp212
	movq	8(%rax), %rax	# rl_19(D)->out, tmp213
	movq	%rax, -112(%rbp)	# tmp213, old
	.loc 1 6635 0
	movq	-112(%rbp), %rax	# old, tmp214
	movzbl	2(%rax), %eax	# old_24->mode, D.28370
	movzbl	%al, %eax	# D.28370, tmp215
	movl	%eax, -140(%rbp)	# tmp215, mode
	.loc 1 6638 0
	movq	-160(%rbp), %rax	# rl, tmp216
	movl	92(%rax), %eax	# rl_19(D)->when_needed, D.28371
	cmpl	$9, %eax	#, D.28371
	jne	.L1843	#,
	.loc 1 6639 0
	call	start_sequence	#
	jmp	.L1844	#
.L1843:
	.loc 1 6641 0
	movq	-160(%rbp), %rax	# rl, tmp217
	movl	72(%rax), %eax	# rl_19(D)->opnum, D.28372
	cltq
	movq	output_reload_insns(,%rax,8), %rax	# output_reload_insns, D.28373
	movq	%rax, %rdi	# D.28373,
	call	push_to_sequence	#
.L1844:
	.loc 1 6646 0
	cmpl	$0, -140(%rbp)	#, mode
	jne	.L1845	#,
	.loc 1 6649 0
	movq	-88(%rbp), %rax	# insn, tmp219
	movq	32(%rax), %rax	# insn_22->fld[3].rtx, D.28373
	movq	%rax, %rdi	# D.28373,
	call	asm_noperands	#
	testl	%eax, %eax	# D.28372
	jns	.L1846	#,
	.loc 1 6651 0
	movq	-88(%rbp), %rax	# insn, tmp220
	movl	$__FUNCTION__.15793, %r8d	#,
	movl	$6651, %ecx	#,
	movl	$.LC1, %edx	#,
	movq	%rax, %rsi	# tmp220,
	movl	$.LC14, %edi	#,
	call	_fatal_insn	#
.L1846:
	.loc 1 6652 0
	movq	-88(%rbp), %rax	# insn, tmp221
	movl	$.LC15, %esi	#,
	movq	%rax, %rdi	# tmp221,
	movl	$0, %eax	#,
	call	error_for_asm	#
	.loc 1 6654 0
	movl	word_mode(%rip), %eax	# word_mode, tmp222
	movl	%eax, -140(%rbp)	# tmp222, mode
	.loc 1 6655 0
	movq	-120(%rbp), %rax	# reloadreg, tmp223
	movl	8(%rax), %eax	# reloadreg_20->fld[0].rtuint, D.28374
	movl	%eax, %edx	# D.28374, D.28372
	movl	-140(%rbp), %eax	# mode, tmp224
	movl	%edx, %esi	# D.28372,
	movl	%eax, %edi	# tmp224,
	call	gen_rtx_REG	#
	movq	%rax, -112(%rbp)	# tmp225, old
.L1845:
	.loc 1 6658 0
	movq	-120(%rbp), %rax	# reloadreg, tmp226
	movzbl	2(%rax), %eax	# reloadreg_20->mode, D.28370
	movzbl	%al, %eax	# D.28370, D.28374
	cmpl	-140(%rbp), %eax	# mode, D.28374
	je	.L1847	#,
	.loc 1 6659 0
	movq	-120(%rbp), %rax	# reloadreg, tmp227
	movl	8(%rax), %eax	# reloadreg_20->fld[0].rtuint, D.28374
	movl	%eax, %edx	# D.28374, D.28372
	movl	-140(%rbp), %eax	# mode, tmp228
	movl	%edx, %esi	# D.28372,
	movl	%eax, %edi	# tmp228,
	call	gen_rtx_REG	#
	movq	%rax, -120(%rbp)	# tmp229, reloadreg
.L1847:
	.loc 1 6667 0
	movq	-160(%rbp), %rax	# rl, tmp230
	movl	80(%rax), %eax	# rl_19(D)->secondary_out_reload, D.28372
	testl	%eax, %eax	# D.28372
	js	.L1848	#,
.LBB139:
	.loc 1 6669 0
	movq	-112(%rbp), %rax	# old, tmp231
	movq	%rax, -96(%rbp)	# tmp231, real_old
	.loc 1 6671 0
	movq	-112(%rbp), %rax	# old, tmp232
	movzwl	(%rax), %eax	# old_6->code, D.28375
	cmpw	$61, %ax	#, D.28375
	jne	.L1849	#,
	.loc 1 6671 0 is_stmt 0 discriminator 1
	movq	-112(%rbp), %rax	# old, tmp233
	movl	8(%rax), %eax	# old_6->fld[0].rtuint, D.28374
	cmpl	$52, %eax	#, D.28374
	jbe	.L1849	#,
	.loc 1 6672 0 is_stmt 1
	movq	reg_equiv_mem(%rip), %rdx	# reg_equiv_mem, reg_equiv_mem.1035
	movq	-112(%rbp), %rax	# old, tmp234
	movl	8(%rax), %eax	# old_6->fld[0].rtuint, D.28374
	movl	%eax, %eax	# D.28374, D.28376
	salq	$3, %rax	#, D.28376
	addq	%rdx, %rax	# reg_equiv_mem.1035, D.28377
	movq	(%rax), %rax	# *_49, D.28373
	testq	%rax, %rax	# D.28373
	je	.L1849	#,
	.loc 1 6673 0
	movq	reg_equiv_mem(%rip), %rdx	# reg_equiv_mem, reg_equiv_mem.1036
	movq	-112(%rbp), %rax	# old, tmp235
	movl	8(%rax), %eax	# old_6->fld[0].rtuint, D.28374
	movl	%eax, %eax	# D.28374, D.28376
	salq	$3, %rax	#, D.28376
	addq	%rdx, %rax	# reg_equiv_mem.1036, D.28377
	movq	(%rax), %rax	# *_55, tmp236
	movq	%rax, -96(%rbp)	# tmp236, real_old
.L1849:
	.loc 1 6675 0
	movq	-160(%rbp), %rax	# rl, tmp237
	movl	16(%rax), %eax	# rl_19(D)->class, D.28378
	cmpl	$12, %eax	#, D.28378
	je	.L1850	#,
	.loc 1 6675 0 is_stmt 0 discriminator 2
	movq	-160(%rbp), %rax	# rl, tmp238
	movl	16(%rax), %eax	# rl_19(D)->class, D.28378
	cmpl	$11, %eax	#, D.28378
	je	.L1850	#,
	.loc 1 6675 0 discriminator 1
	movq	-160(%rbp), %rax	# rl, tmp239
	movl	16(%rax), %eax	# rl_19(D)->class, D.28378
	cmpl	$10, %eax	#, D.28378
	jne	.L1848	#,
.L1850:
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1037
	andl	$33554432, %eax	#, D.28372
	testl	%eax, %eax	# D.28372
	jne	.L1848	#,
	.loc 1 6677 0 is_stmt 1
	cmpl	$2, -140(%rbp)	#, mode
	jne	.L1848	#,
.LBB140:
	.loc 1 6679 0
	movq	-120(%rbp), %rax	# reloadreg, tmp240
	movq	%rax, -80(%rbp)	# tmp240, second_reloadreg
	.loc 1 6680 0
	movq	-160(%rbp), %rax	# rl, tmp241
	movl	80(%rax), %eax	# rl_19(D)->secondary_out_reload, D.28372
	movslq	%eax, %rdx	# D.28372, tmp242
	movq	%rdx, %rax	# tmp242, tmp243
	addq	%rax, %rax	# tmp243
	addq	%rdx, %rax	# tmp242, tmp243
	salq	$2, %rax	#, tmp243
	addq	%rdx, %rax	# tmp242, tmp243
	salq	$3, %rax	#, tmp244
	addq	$rld+64, %rax	#, tmp245
	movq	(%rax), %rax	# rld[_63].reg_rtx, tmp246
	movq	%rax, -120(%rbp)	# tmp246, reloadreg
	.loc 1 6684 0
	movq	-160(%rbp), %rax	# rl, tmp247
	movl	88(%rax), %eax	# rl_19(D)->secondary_out_icode, D.28379
	cmpl	$1317, %eax	#, D.28379
	je	.L1851	#,
	.loc 1 6686 0
	movq	-160(%rbp), %rax	# rl, tmp248
	movl	88(%rax), %eax	# rl_19(D)->secondary_out_icode, D.28379
	.loc 1 6687 0
	movslq	%eax, %rdx	# D.28372, tmp249
	movq	%rdx, %rax	# tmp249, tmp250
	salq	$2, %rax	#, tmp250
	addq	%rdx, %rax	# tmp249, tmp250
	salq	$3, %rax	#, tmp251
	addq	$insn_data+16, %rax	#, tmp252
	movq	(%rax), %rcx	# insn_data[_67].genfun, D.28380
	.loc 1 6686 0
	movq	-120(%rbp), %rdx	# reloadreg, tmp253
	movq	-80(%rbp), %rsi	# second_reloadreg, tmp254
	movq	-96(%rbp), %rax	# real_old, tmp255
	movq	%rax, %rdi	# tmp255,
	movl	$0, %eax	#,
	call	*%rcx	# D.28380
	movq	%rax, %rdi	# D.28373,
	call	emit_insn	#
	.loc 1 6688 0
	movl	$1, -144(%rbp)	#, special
	jmp	.L1848	#
.L1851:
.LBB141:
	.loc 1 6695 0
	movq	-160(%rbp), %rax	# rl, tmp256
	movl	80(%rax), %eax	# rl_19(D)->secondary_out_reload, tmp257
	movl	%eax, -136(%rbp)	# tmp257, secondary_reload
	.loc 1 6696 0
	movl	-136(%rbp), %eax	# secondary_reload, tmp259
	movslq	%eax, %rdx	# tmp259, tmp258
	movq	%rdx, %rax	# tmp258, tmp260
	addq	%rax, %rax	# tmp260
	addq	%rdx, %rax	# tmp258, tmp260
	salq	$2, %rax	#, tmp260
	addq	%rdx, %rax	# tmp258, tmp260
	salq	$3, %rax	#, tmp261
	addq	$rld+80, %rax	#, tmp262
	movl	8(%rax), %eax	# rld[secondary_reload_71].secondary_out_icode, tmp263
	movl	%eax, -132(%rbp)	# tmp263, tertiary_icode
	.loc 1 6699 0
	movq	-120(%rbp), %rax	# reloadreg, tmp264
	movzbl	2(%rax), %eax	# reloadreg_64->mode, D.28370
	movzbl	%al, %eax	# D.28370, D.28374
	cmpl	-140(%rbp), %eax	# mode, D.28374
	je	.L1852	#,
	.loc 1 6700 0
	movq	-120(%rbp), %rax	# reloadreg, tmp265
	movl	8(%rax), %eax	# reloadreg_64->fld[0].rtuint, D.28374
	movl	%eax, %edx	# D.28374, D.28372
	movl	-140(%rbp), %eax	# mode, tmp266
	movl	%edx, %esi	# D.28372,
	movl	%eax, %edi	# tmp266,
	call	gen_rtx_REG	#
	movq	%rax, -120(%rbp)	# tmp267, reloadreg
.L1852:
	.loc 1 6702 0
	cmpl	$1317, -132(%rbp)	#, tertiary_icode
	je	.L1853	#,
.LBB142:
	.loc 1 6705 0
	movl	-136(%rbp), %eax	# secondary_reload, tmp269
	movslq	%eax, %rdx	# tmp269, tmp268
	movq	%rdx, %rax	# tmp268, tmp270
	addq	%rax, %rax	# tmp270
	addq	%rdx, %rax	# tmp268, tmp270
	salq	$2, %rax	#, tmp270
	addq	%rdx, %rax	# tmp268, tmp270
	salq	$3, %rax	#, tmp271
	addq	$rld+80, %rax	#, tmp272
	movl	(%rax), %eax	# rld[secondary_reload_71].secondary_out_reload, D.28372
	.loc 1 6704 0
	movslq	%eax, %rdx	# D.28372, tmp273
	movq	%rdx, %rax	# tmp273, tmp274
	addq	%rax, %rax	# tmp274
	addq	%rdx, %rax	# tmp273, tmp274
	salq	$2, %rax	#, tmp274
	addq	%rdx, %rax	# tmp273, tmp274
	salq	$3, %rax	#, tmp275
	addq	$rld+64, %rax	#, tmp276
	movq	(%rax), %rax	# rld[_78].reg_rtx, tmp277
	movq	%rax, -72(%rbp)	# tmp277, third_reloadreg
	.loc 1 6715 0
	movq	-96(%rbp), %rax	# real_old, tmp278
	movzwl	(%rax), %eax	# real_old_9->code, D.28375
	cmpw	$63, %ax	#, D.28375
	jne	.L1854	#,
	.loc 1 6716 0
	movq	-96(%rbp), %rax	# real_old, tmp279
	movzbl	2(%rax), %eax	# real_old_9->mode, D.28370
	movzbl	%al, %eax	# D.28370, D.28372
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28370
	.loc 1 6717 0
	movq	-96(%rbp), %rax	# real_old, tmp281
	movq	8(%rax), %rax	# real_old_9->fld[0].rtx, D.28373
	movzbl	2(%rax), %eax	# _84->mode, D.28370
	movzbl	%al, %eax	# D.28370, D.28372
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28370
	.loc 1 6716 0
	cmpb	%al, %dl	# D.28370, D.28370
	jbe	.L1854	#,
	.loc 1 6719 0
	movq	-96(%rbp), %rax	# real_old, tmp283
	movq	8(%rax), %rax	# real_old_9->fld[0].rtx, D.28373
	movzbl	2(%rax), %eax	# _88->mode, D.28370
	movzbl	%al, %eax	# D.28370, D.28381
	.loc 1 6718 0
	movq	-120(%rbp), %rdx	# reloadreg, tmp284
	movq	%rdx, %rsi	# tmp284,
	movl	%eax, %edi	# D.28381,
	call	gen_lowpart_common	#
	movq	%rax, -64(%rbp)	# tmp285, tem
	cmpq	$0, -64(%rbp)	#, tem
	je	.L1854	#,
	.loc 1 6721 0
	movq	-96(%rbp), %rax	# real_old, tmp286
	movq	8(%rax), %rax	# real_old_9->fld[0].rtx, tmp287
	movq	%rax, -96(%rbp)	# tmp287, real_old
	movq	-64(%rbp), %rax	# tem, tmp288
	movq	%rax, -120(%rbp)	# tmp288, reloadreg
.L1854:
	.loc 1 6723 0
	movq	-160(%rbp), %rax	# rl, tmp289
	movl	92(%rax), %ecx	# rl_19(D)->when_needed, D.28371
	movq	-160(%rbp), %rax	# rl, tmp290
	movl	72(%rax), %edx	# rl_19(D)->opnum, D.28372
	movq	-80(%rbp), %rsi	# second_reloadreg, tmp291
	movq	-120(%rbp), %rax	# reloadreg, tmp292
	movq	%rax, %rdi	# tmp292,
	call	gen_reload	#
	.loc 1 6725 0
	movl	-132(%rbp), %eax	# tertiary_icode, tertiary_icode.1038
	.loc 1 6726 0
	movslq	%eax, %rdx	# tertiary_icode.1038, tmp293
	movq	%rdx, %rax	# tmp293, tmp294
	salq	$2, %rax	#, tmp294
	addq	%rdx, %rax	# tmp293, tmp294
	salq	$3, %rax	#, tmp295
	addq	$insn_data+16, %rax	#, tmp296
	movq	(%rax), %rcx	# insn_data[tertiary_icode.1038_96].genfun, D.28380
	.loc 1 6725 0
	movq	-72(%rbp), %rdx	# third_reloadreg, tmp297
	movq	-120(%rbp), %rsi	# reloadreg, tmp298
	movq	-96(%rbp), %rax	# real_old, tmp299
	movq	%rax, %rdi	# tmp299,
	movl	$0, %eax	#,
	call	*%rcx	# D.28380
	movq	%rax, %rdi	# D.28373,
	call	emit_insn	#
	.loc 1 6727 0
	movl	$1, -144(%rbp)	#, special
.LBE142:
	jmp	.L1848	#
.L1853:
	.loc 1 6734 0
	movq	-160(%rbp), %rax	# rl, tmp300
	movl	92(%rax), %ecx	# rl_19(D)->when_needed, D.28371
	movq	-160(%rbp), %rax	# rl, tmp301
	movl	72(%rax), %edx	# rl_19(D)->opnum, D.28372
	movq	-80(%rbp), %rsi	# second_reloadreg, tmp302
	movq	-120(%rbp), %rax	# reloadreg, tmp303
	movq	%rax, %rdi	# tmp303,
	call	gen_reload	#
.L1848:
.LBE141:
.LBE140:
.LBE139:
	.loc 1 6742 0
	cmpl	$0, -144(%rbp)	#, special
	jne	.L1855	#,
.LBB143:
	.loc 1 6748 0
	movl	flag_expensive_optimizations(%rip), %eax	# flag_expensive_optimizations, flag_expensive_optimizations.1039
	testl	%eax, %eax	# flag_expensive_optimizations.1039
	je	.L1856	#,
	.loc 1 6749 0
	movq	-112(%rbp), %rax	# old, tmp304
	movzwl	(%rax), %eax	# old_6->code, D.28375
	cmpw	$61, %ax	#, D.28375
	jne	.L1856	#,
	.loc 1 6750 0
	movq	-88(%rbp), %rax	# insn, tmp305
	movzwl	(%rax), %eax	# insn_22->code, D.28375
	movzwl	%ax, %eax	# D.28375, D.28372
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28382
	cmpb	$105, %al	#, D.28382
	jne	.L1857	#,
	.loc 1 6750 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# insn, tmp307
	movq	32(%rax), %rax	# insn_22->fld[3].rtx, D.28373
	movzwl	(%rax), %eax	# _107->code, D.28375
	cmpw	$47, %ax	#, D.28375
	jne	.L1858	#,
	.loc 1 6750 0 discriminator 3
	movq	-88(%rbp), %rax	# insn, tmp308
	movq	32(%rax), %rax	# insn_22->fld[3].rtx, iftmp.1041
	jmp	.L1860	#
.L1858:
	.loc 1 6750 0 discriminator 4
	movq	-88(%rbp), %rax	# insn, tmp309
	movq	32(%rax), %rdx	# insn_22->fld[3].rtx, D.28373
	movq	-88(%rbp), %rax	# insn, tmp310
	movq	%rdx, %rsi	# D.28373,
	movq	%rax, %rdi	# tmp310,
	call	single_set_2	#
	jmp	.L1860	#
.L1857:
	.loc 1 6750 0 discriminator 2
	movl	$0, %eax	#, iftmp.1040
.L1860:
	.loc 1 6750 0 discriminator 5
	movq	%rax, -56(%rbp)	# iftmp.1040, set
	cmpq	$0, -56(%rbp)	#, set
	je	.L1856	#,
	.loc 1 6751 0 is_stmt 1
	movq	-56(%rbp), %rax	# set, tmp311
	movq	8(%rax), %rdx	# set_114->fld[0].rtx, D.28373
	movq	-112(%rbp), %rax	# old, tmp312
	movq	%rdx, %rsi	# D.28373,
	movq	%rax, %rdi	# tmp312,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28372
	jne	.L1856	#,
	.loc 1 6752 0
	movq	-56(%rbp), %rax	# set, tmp313
	movq	16(%rax), %rdx	# set_114->fld[1].rtx, D.28373
	movq	-112(%rbp), %rax	# old, tmp314
	movq	%rdx, %rsi	# D.28373,
	movq	%rax, %rdi	# tmp314,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.28372
	je	.L1856	#,
	.loc 1 6753 0
	movq	-160(%rbp), %rax	# rl, tmp315
	movl	28(%rax), %edx	# rl_19(D)->mode, D.28381
	movq	-112(%rbp), %rax	# old, tmp316
	movl	8(%rax), %eax	# old_6->fld[0].rtuint, D.28374
	movq	-88(%rbp), %rsi	# insn, tmp317
	movl	$0, %ecx	#,
	movl	%eax, %edi	# D.28374,
	call	regno_clobbered_p	#
	testl	%eax, %eax	# D.28372
	jne	.L1855	#,
.L1856:
	.loc 1 6754 0
	movq	-160(%rbp), %rax	# rl, tmp318
	movl	92(%rax), %ecx	# rl_19(D)->when_needed, D.28371
	movq	-160(%rbp), %rax	# rl, tmp319
	movl	72(%rax), %edx	# rl_19(D)->opnum, D.28372
	movq	-120(%rbp), %rsi	# reloadreg, tmp320
	movq	-112(%rbp), %rax	# old, tmp321
	movq	%rax, %rdi	# tmp321,
	call	gen_reload	#
.L1855:
.LBE143:
	.loc 1 6759 0
	call	get_insns	#
	movq	%rax, -104(%rbp)	# tmp322, p
	jmp	.L1861	#
.L1879:
	.loc 1 6760 0
	movq	-104(%rbp), %rax	# p, tmp323
	movzwl	(%rax), %eax	# p_8->code, D.28375
	movzwl	%ax, %eax	# D.28375, D.28372
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28382
	cmpb	$105, %al	#, D.28382
	jne	.L1862	#,
.LBB144:
	.loc 1 6762 0
	movq	-104(%rbp), %rax	# p, tmp325
	movq	32(%rax), %rax	# p_8->fld[3].rtx, tmp326
	movq	%rax, -48(%rbp)	# tmp326, pat
	.loc 1 6768 0
	movq	-48(%rbp), %rax	# pat, tmp327
	movl	$0, %edx	#,
	movl	$forget_old_reloads_1, %esi	#,
	movq	%rax, %rdi	# tmp327,
	call	note_stores	#
	.loc 1 6770 0
	movq	-160(%rbp), %rax	# rl, tmp328
	movq	64(%rax), %rax	# rl_19(D)->reg_rtx, D.28373
	movq	-48(%rbp), %rdx	# pat, tmp329
	movq	%rdx, %rsi	# tmp329,
	movq	%rax, %rdi	# D.28373,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.28372
	je	.L1862	#,
.LBB145:
	.loc 1 6772 0
	movq	-88(%rbp), %rax	# insn, tmp330
	movzwl	(%rax), %eax	# insn_22->code, D.28375
	movzwl	%ax, %eax	# D.28375, D.28372
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28382
	cmpb	$105, %al	#, D.28382
	jne	.L1863	#,
	.loc 1 6772 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# insn, tmp332
	movq	32(%rax), %rax	# insn_22->fld[3].rtx, D.28373
	movzwl	(%rax), %eax	# _134->code, D.28375
	cmpw	$47, %ax	#, D.28375
	jne	.L1864	#,
	.loc 1 6772 0 discriminator 3
	movq	-88(%rbp), %rax	# insn, tmp333
	movq	32(%rax), %rax	# insn_22->fld[3].rtx, iftmp.1043
	jmp	.L1866	#
.L1864:
	.loc 1 6772 0 discriminator 4
	movq	-88(%rbp), %rax	# insn, tmp334
	movq	32(%rax), %rdx	# insn_22->fld[3].rtx, D.28373
	movq	-88(%rbp), %rax	# insn, tmp335
	movq	%rdx, %rsi	# D.28373,
	movq	%rax, %rdi	# tmp335,
	call	single_set_2	#
	jmp	.L1866	#
.L1863:
	.loc 1 6772 0 discriminator 2
	movl	$0, %eax	#, iftmp.1042
.L1866:
	.loc 1 6772 0 discriminator 5
	movq	%rax, -40(%rbp)	# iftmp.1042, set
	.loc 1 6773 0 is_stmt 1 discriminator 5
	movl	-164(%rbp), %eax	# j, tmp337
	cltq
	movl	reload_spill_index(,%rax,4), %eax	# reload_spill_index, D.28372
	testl	%eax, %eax	# D.28372
	jns	.L1867	#,
	.loc 1 6774 0
	cmpq	$0, -40(%rbp)	#, set
	je	.L1867	#,
	.loc 1 6775 0
	movq	-40(%rbp), %rax	# set, tmp338
	movq	16(%rax), %rdx	# set_141->fld[1].rtx, D.28373
	movq	-160(%rbp), %rax	# rl, tmp339
	movq	64(%rax), %rax	# rl_19(D)->reg_rtx, D.28373
	cmpq	%rax, %rdx	# D.28373, D.28373
	jne	.L1867	#,
.LBB146:
	.loc 1 6777 0
	movq	-40(%rbp), %rax	# set, tmp340
	movq	16(%rax), %rax	# set_141->fld[1].rtx, D.28373
	movl	8(%rax), %eax	# _146->fld[0].rtuint, D.28374
	movl	%eax, -128(%rbp)	# D.28374, src
	.loc 1 6779 0
	movl	-164(%rbp), %eax	# j, tmp342
	cltq
	movl	-128(%rbp), %edx	# src, tmp343
	movl	%edx, reload_spill_index(,%rax,4)	# tmp343, reload_spill_index
	.loc 1 6780 0
	movl	-128(%rbp), %eax	# src, tmp344
	movl	$1, %edx	#, tmp345
	movl	%eax, %ecx	# tmp344, tmp413
	salq	%cl, %rdx	# tmp413, D.28376
	movq	reg_is_output_reload(%rip), %rax	# reg_is_output_reload, reg_is_output_reload.1044
	orq	%rdx, %rax	# D.28376, reg_is_output_reload.1045
	movq	%rax, reg_is_output_reload(%rip)	# reg_is_output_reload.1045, reg_is_output_reload
	.loc 1 6781 0
	movl	-128(%rbp), %edx	# src, src.1046
	movq	-88(%rbp), %rax	# insn, tmp346
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp346,
	call	find_regno_note	#
	testq	%rax, %rax	# D.28373
	je	.L1867	#,
	.loc 1 6782 0
	movl	-128(%rbp), %eax	# src, tmp347
	movl	$1, %edx	#, tmp348
	movl	%eax, %ecx	# tmp347, tmp414
	salq	%cl, %rdx	# tmp414, D.28376
	movq	reg_reloaded_died(%rip), %rax	# reg_reloaded_died, reg_reloaded_died.1047
	orq	%rdx, %rax	# D.28376, reg_reloaded_died.1048
	movq	%rax, reg_reloaded_died(%rip)	# reg_reloaded_died.1048, reg_reloaded_died
.L1867:
.LBE146:
	.loc 1 6784 0
	movq	-160(%rbp), %rax	# rl, tmp349
	movq	64(%rax), %rax	# rl_19(D)->reg_rtx, D.28373
	movl	8(%rax), %eax	# _157->fld[0].rtuint, D.28374
	cmpl	$52, %eax	#, D.28374
	ja	.L1862	#,
.LBB147:
	.loc 1 6786 0
	movq	-160(%rbp), %rax	# rl, tmp350
	movl	80(%rax), %eax	# rl_19(D)->secondary_out_reload, tmp351
	movl	%eax, -124(%rbp)	# tmp351, s
	.loc 1 6787 0
	movq	-104(%rbp), %rax	# p, tmp352
	movzwl	(%rax), %eax	# p_8->code, D.28375
	movzwl	%ax, %eax	# D.28375, D.28372
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28382
	cmpb	$105, %al	#, D.28382
	jne	.L1868	#,
	.loc 1 6787 0 is_stmt 0 discriminator 1
	movq	-104(%rbp), %rax	# p, tmp354
	movq	32(%rax), %rax	# p_8->fld[3].rtx, D.28373
	movzwl	(%rax), %eax	# _163->code, D.28375
	cmpw	$47, %ax	#, D.28375
	jne	.L1869	#,
	.loc 1 6787 0 discriminator 3
	movq	-104(%rbp), %rax	# p, tmp355
	movq	32(%rax), %rax	# p_8->fld[3].rtx, iftmp.1050
	jmp	.L1871	#
.L1869:
	.loc 1 6787 0 discriminator 4
	movq	-104(%rbp), %rax	# p, tmp356
	movq	32(%rax), %rdx	# p_8->fld[3].rtx, D.28373
	movq	-104(%rbp), %rax	# p, tmp357
	movq	%rdx, %rsi	# D.28373,
	movq	%rax, %rdi	# tmp357,
	call	single_set_2	#
	jmp	.L1871	#
.L1868:
	.loc 1 6787 0 discriminator 2
	movl	$0, %eax	#, iftmp.1049
.L1871:
	.loc 1 6787 0 discriminator 5
	movq	%rax, -40(%rbp)	# iftmp.1049, set
	.loc 1 6791 0 is_stmt 1 discriminator 5
	cmpl	$0, -124(%rbp)	#, s
	js	.L1872	#,
	.loc 1 6791 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, set
	jne	.L1872	#,
	jmp	.L1862	#
.L1872:
	.loc 1 6796 0 is_stmt 1
	cmpl	$0, -124(%rbp)	#, s
	js	.L1873	#,
	.loc 1 6797 0
	movq	-40(%rbp), %rax	# set, tmp358
	movq	16(%rax), %rdx	# set_170->fld[1].rtx, D.28373
	movq	-160(%rbp), %rax	# rl, tmp359
	movq	64(%rax), %rax	# rl_19(D)->reg_rtx, D.28373
	cmpq	%rax, %rdx	# D.28373, D.28373
	jne	.L1873	#,
	.loc 1 6798 0
	movq	-40(%rbp), %rax	# set, tmp360
	movq	8(%rax), %rcx	# set_170->fld[0].rtx, D.28373
	movl	-124(%rbp), %eax	# s, tmp362
	movslq	%eax, %rdx	# tmp362, tmp361
	movq	%rdx, %rax	# tmp361, tmp363
	addq	%rax, %rax	# tmp363
	addq	%rdx, %rax	# tmp361, tmp363
	salq	$2, %rax	#, tmp363
	addq	%rdx, %rax	# tmp361, tmp363
	salq	$3, %rax	#, tmp364
	addq	$rld+64, %rax	#, tmp365
	movq	(%rax), %rax	# rld[s_159].reg_rtx, D.28373
	cmpq	%rax, %rcx	# D.28373, D.28373
	jne	.L1873	#,
.LBB148:
	.loc 1 6804 0
	movl	-124(%rbp), %eax	# s, tmp367
	movslq	%eax, %rdx	# tmp367, tmp366
	movq	%rdx, %rax	# tmp366, tmp368
	addq	%rax, %rax	# tmp368
	addq	%rdx, %rax	# tmp366, tmp368
	salq	$2, %rax	#, tmp368
	addq	%rdx, %rax	# tmp366, tmp368
	salq	$3, %rax	#, tmp369
	addq	$rld+64, %rax	#, tmp370
	movq	(%rax), %rax	# rld[s_159].reg_rtx, tmp371
	movq	%rax, -32(%rbp)	# tmp371, s_reg
	.loc 1 6805 0
	movq	-104(%rbp), %rax	# p, tmp372
	movq	24(%rax), %rax	# p_8->fld[2].rtx, tmp373
	movq	%rax, -24(%rbp)	# tmp373, next
	.loc 1 6806 0
	movq	-160(%rbp), %rax	# rl, tmp374
	movq	8(%rax), %rcx	# rl_19(D)->out, D.28373
	movl	-124(%rbp), %eax	# s, tmp376
	movslq	%eax, %rdx	# tmp376, tmp375
	movq	%rdx, %rax	# tmp375, tmp377
	addq	%rax, %rax	# tmp377
	addq	%rdx, %rax	# tmp375, tmp377
	salq	$2, %rax	#, tmp377
	addq	%rdx, %rax	# tmp375, tmp377
	salq	$3, %rax	#, tmp378
	addq	$rld+8, %rax	#, tmp379
	movq	%rcx, (%rax)	# D.28373, rld[s_159].out
	.loc 1 6807 0
	movq	-160(%rbp), %rax	# rl, tmp380
	movq	48(%rax), %rcx	# rl_19(D)->out_reg, D.28373
	movl	-124(%rbp), %eax	# s, tmp382
	movslq	%eax, %rdx	# tmp382, tmp381
	movq	%rdx, %rax	# tmp381, tmp383
	addq	%rax, %rax	# tmp383
	addq	%rdx, %rax	# tmp381, tmp383
	salq	$2, %rax	#, tmp383
	addq	%rdx, %rax	# tmp381, tmp383
	salq	$3, %rax	#, tmp384
	addq	$rld+48, %rax	#, tmp385
	movq	%rcx, (%rax)	# D.28373, rld[s_159].out_reg
	.loc 1 6808 0
	movq	-24(%rbp), %rax	# next, tmp386
	movzwl	(%rax), %eax	# next_176->code, D.28375
	movzwl	%ax, %eax	# D.28375, D.28372
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28382
	cmpb	$105, %al	#, D.28382
	jne	.L1874	#,
	.loc 1 6808 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# next, tmp388
	movq	32(%rax), %rax	# next_176->fld[3].rtx, D.28373
	movzwl	(%rax), %eax	# _182->code, D.28375
	cmpw	$47, %ax	#, D.28375
	jne	.L1875	#,
	.loc 1 6808 0 discriminator 3
	movq	-24(%rbp), %rax	# next, tmp389
	movq	32(%rax), %rax	# next_176->fld[3].rtx, iftmp.1052
	jmp	.L1877	#
.L1875:
	.loc 1 6808 0 discriminator 4
	movq	-24(%rbp), %rax	# next, tmp390
	movq	32(%rax), %rdx	# next_176->fld[3].rtx, D.28373
	movq	-24(%rbp), %rax	# next, tmp391
	movq	%rdx, %rsi	# D.28373,
	movq	%rax, %rdi	# tmp391,
	call	single_set_2	#
	jmp	.L1877	#
.L1874:
	.loc 1 6808 0 discriminator 2
	movl	$0, %eax	#, iftmp.1051
.L1877:
	.loc 1 6808 0 discriminator 5
	movq	%rax, -40(%rbp)	# iftmp.1051, set
	.loc 1 6809 0 is_stmt 1 discriminator 5
	cmpq	$0, -40(%rbp)	#, set
	je	.L1878	#,
	.loc 1 6809 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# set, tmp392
	movq	16(%rax), %rax	# set_189->fld[1].rtx, D.28373
	cmpq	-32(%rbp), %rax	# s_reg, D.28373
	jne	.L1878	#,
	.loc 1 6810 0 is_stmt 1
	movq	-32(%rbp), %rax	# s_reg, tmp393
	movl	8(%rax), %eax	# s_reg_175->fld[0].rtuint, D.28374
	movl	%eax, %eax	# D.28374, tmp394
	movq	new_spill_reg_store(,%rax,8), %rax	# new_spill_reg_store, D.28373
	testq	%rax, %rax	# D.28373
	jne	.L1878	#,
	.loc 1 6812 0
	movq	-32(%rbp), %rax	# s_reg, tmp395
	movl	8(%rax), %eax	# s_reg_175->fld[0].rtuint, D.28374
	movl	$1, %edx	#, tmp396
	movl	%eax, %ecx	# D.28372, tmp415
	salq	%cl, %rdx	# tmp415, D.28376
	movq	reg_is_output_reload(%rip), %rax	# reg_is_output_reload, reg_is_output_reload.1053
	orq	%rdx, %rax	# D.28376, reg_is_output_reload.1054
	movq	%rax, reg_is_output_reload(%rip)	# reg_is_output_reload.1054, reg_is_output_reload
	.loc 1 6814 0
	movq	-32(%rbp), %rax	# s_reg, tmp397
	movl	8(%rax), %eax	# s_reg_175->fld[0].rtuint, D.28374
	movl	%eax, %eax	# D.28374, tmp398
	movq	-24(%rbp), %rdx	# next, tmp399
	movq	%rdx, new_spill_reg_store(,%rax,8)	# tmp399, new_spill_reg_store
.LBE148:
	.loc 1 6799 0
	jmp	.L1862	#
.L1878:
	jmp	.L1862	#
.L1873:
	.loc 1 6818 0
	movq	-160(%rbp), %rax	# rl, tmp400
	movq	64(%rax), %rax	# rl_19(D)->reg_rtx, D.28373
	movl	8(%rax), %eax	# _199->fld[0].rtuint, D.28374
	movl	%eax, %eax	# D.28374, tmp401
	movq	-104(%rbp), %rdx	# p, tmp402
	movq	%rdx, new_spill_reg_store(,%rax,8)	# tmp402, new_spill_reg_store
.L1862:
.LBE147:
.LBE145:
.LBE144:
	.loc 1 6759 0
	movq	-104(%rbp), %rax	# p, tmp403
	movq	24(%rax), %rax	# p_8->fld[2].rtx, tmp404
	movq	%rax, -104(%rbp)	# tmp404, p
.L1861:
	.loc 1 6759 0 is_stmt 0 discriminator 1
	cmpq	$0, -104(%rbp)	#, p
	jne	.L1879	#,
	.loc 1 6823 0 is_stmt 1
	movq	-160(%rbp), %rax	# rl, tmp405
	movl	92(%rax), %eax	# rl_19(D)->when_needed, D.28371
	cmpl	$9, %eax	#, D.28371
	jne	.L1880	#,
	.loc 1 6825 0
	movq	-160(%rbp), %rax	# rl, tmp406
	movl	72(%rax), %eax	# rl_19(D)->opnum, D.28372
	cltq
	movq	other_output_reload_insns(,%rax,8), %rax	# other_output_reload_insns, D.28373
	movq	%rax, %rdi	# D.28373,
	call	emit_insns	#
	.loc 1 6826 0
	movq	-160(%rbp), %rax	# rl, tmp408
	movl	72(%rax), %ebx	# rl_19(D)->opnum, D.28372
	call	get_insns	#
	movslq	%ebx, %rdx	# D.28372, tmp409
	movq	%rax, other_output_reload_insns(,%rdx,8)	# D.28373, other_output_reload_insns
	jmp	.L1881	#
.L1880:
	.loc 1 6829 0
	movq	-160(%rbp), %rax	# rl, tmp410
	movl	72(%rax), %ebx	# rl_19(D)->opnum, D.28372
	call	get_insns	#
	movslq	%ebx, %rdx	# D.28372, tmp411
	movq	%rax, output_reload_insns(,%rdx,8)	# D.28373, output_reload_insns
.L1881:
	.loc 1 6831 0
	movl	flag_non_call_exceptions(%rip), %eax	# flag_non_call_exceptions, flag_non_call_exceptions.1055
	testl	%eax, %eax	# flag_non_call_exceptions.1055
	je	.L1882	#,
	.loc 1 6832 0
	call	get_insns	#
	movq	%rax, %rdx	#, D.28373
	movq	-88(%rbp), %rax	# insn, tmp412
	movq	%rdx, %rsi	# D.28373,
	movq	%rax, %rdi	# tmp412,
	call	copy_eh_notes	#
.L1882:
	.loc 1 6834 0
	call	end_sequence	#
	.loc 1 6835 0
	addq	$168, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE57:
	.size	emit_output_reload_insns, .-emit_output_reload_insns
	.type	do_input_reload, @function
do_input_reload:
.LFB58:
	.loc 1 6844 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -40(%rbp)	# chain, chain
	movq	%rsi, -48(%rbp)	# rl, rl
	movl	%edx, -52(%rbp)	# j, j
	.loc 1 6845 0
	movl	$1, -20(%rbp)	#, expect_occurrences
	.loc 1 6846 0
	movq	-40(%rbp), %rax	# chain, tmp118
	movq	32(%rax), %rax	# chain_4(D)->insn, tmp119
	movq	%rax, -16(%rbp)	# tmp119, insn
	.loc 1 6847 0
	movq	-48(%rbp), %rax	# rl, tmp120
	movq	(%rax), %rax	# rl_6(D)->in, D.28385
	.loc 1 6848 0
	testq	%rax, %rax	# D.28385
	je	.L1884	#,
	.loc 1 6847 0
	movq	-48(%rbp), %rax	# rl, tmp121
	movq	(%rax), %rax	# rl_6(D)->in, D.28385
	movzwl	(%rax), %eax	# _8->code, D.28386
	cmpw	$66, %ax	#, D.28386
	jne	.L1884	#,
	.loc 1 6848 0
	movq	-48(%rbp), %rax	# rl, tmp122
	movq	40(%rax), %rax	# rl_6(D)->in_reg, iftmp.1056
	jmp	.L1885	#
.L1884:
	.loc 1 6848 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# rl, tmp123
	movq	(%rax), %rax	# rl_6(D)->in, iftmp.1056
.L1885:
	.loc 1 6847 0 is_stmt 1
	movq	%rax, -8(%rbp)	# iftmp.1056, old
	.loc 1 6850 0
	cmpq	$0, -8(%rbp)	#, old
	je	.L1886	#,
	.loc 1 6853 0
	movl	-52(%rbp), %eax	# j, tmp125
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28387
	testb	%al, %al	# D.28387
	je	.L1887	#,
	.loc 1 6853 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# rl, tmp126
	movq	8(%rax), %rax	# rl_6(D)->out, D.28385
	testq	%rax, %rax	# D.28385
	je	.L1886	#,
	movq	-48(%rbp), %rax	# rl, tmp127
	movq	48(%rax), %rax	# rl_6(D)->out_reg, D.28385
	testq	%rax, %rax	# D.28385
	jne	.L1886	#,
.L1887:
	.loc 1 6854 0 is_stmt 1
	movq	-48(%rbp), %rax	# rl, tmp128
	movq	64(%rax), %rax	# rl_6(D)->reg_rtx, D.28385
	movq	-8(%rbp), %rdx	# old, tmp129
	movq	%rdx, %rsi	# tmp129,
	movq	%rax, %rdi	# D.28385,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28388
	jne	.L1886	#,
	.loc 1 6855 0
	movq	-48(%rbp), %rax	# rl, tmp130
	movq	64(%rax), %rax	# rl_6(D)->reg_rtx, D.28385
	testq	%rax, %rax	# D.28385
	je	.L1886	#,
	.loc 1 6856 0
	movl	-52(%rbp), %eax	# j, tmp131
	movslq	%eax, %rdx	# tmp131, D.28389
	movq	%rdx, %rax	# D.28389, tmp132
	addq	%rax, %rax	# tmp132
	addq	%rdx, %rax	# D.28389, tmp132
	salq	$2, %rax	#, tmp132
	addq	%rdx, %rax	# D.28389, tmp132
	salq	$3, %rax	#, tmp133
	leaq	rld(%rax), %rsi	#, D.28390
	movl	-52(%rbp), %ecx	# j, tmp134
	movq	-8(%rbp), %rdx	# old, tmp135
	movq	-40(%rbp), %rax	# chain, tmp136
	movq	%rax, %rdi	# tmp136,
	call	emit_input_reload_insns	#
.L1886:
	.loc 1 6861 0
	movl	optimize(%rip), %eax	# optimize, optimize.1057
	testl	%eax, %eax	# optimize.1057
	je	.L1888	#,
	.loc 1 6861 0 is_stmt 0 discriminator 1
	movl	-52(%rbp), %eax	# j, tmp138
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28387
	testb	%al, %al	# D.28387
	je	.L1888	#,
	movq	-48(%rbp), %rax	# rl, tmp139
	movq	(%rax), %rax	# rl_6(D)->in, D.28385
	testq	%rax, %rax	# D.28385
	je	.L1888	#,
	.loc 1 6862 0 is_stmt 1
	movq	-48(%rbp), %rax	# rl, tmp140
	movq	(%rax), %rax	# rl_6(D)->in, D.28385
	movzwl	(%rax), %eax	# _26->code, D.28386
	cmpw	$66, %ax	#, D.28386
	jne	.L1888	#,
	.loc 1 6863 0
	movq	-48(%rbp), %rax	# rl, tmp141
	movq	40(%rax), %rax	# rl_6(D)->in_reg, D.28385
	movzwl	(%rax), %eax	# _28->code, D.28386
	cmpw	$66, %ax	#, D.28386
	jne	.L1888	#,
	.loc 1 6864 0
	movl	-52(%rbp), %eax	# j, tmp143
	cltq
	movl	reload_spill_index(,%rax,4), %eax	# reload_spill_index, D.28388
	testl	%eax, %eax	# D.28388
	js	.L1888	#,
	.loc 1 6865 0
	movq	reg_reloaded_valid(%rip), %rdx	# reg_reloaded_valid, reg_reloaded_valid.1058
	movl	-52(%rbp), %eax	# j, tmp145
	cltq
	movl	reload_spill_index(,%rax,4), %eax	# reload_spill_index, D.28388
	movl	%eax, %ecx	# D.28388, tmp170
	shrq	%cl, %rdx	# tmp170, D.28389
	movq	%rdx, %rax	# D.28389, D.28389
	andl	$1, %eax	#, D.28389
	testq	%rax, %rax	# D.28389
	je	.L1888	#,
	.loc 1 6868 0
	movq	-48(%rbp), %rax	# rl, tmp146
	movq	(%rax), %rcx	# rl_6(D)->in, D.28385
	movq	-16(%rbp), %rax	# insn, tmp147
	movq	32(%rax), %rax	# insn_5->fld[3].rtx, D.28385
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.28385,
	movq	%rax, %rdi	# D.28385,
	call	count_occurrences	#
	cmpl	$1, %eax	#, D.28388
	jne	.L1889	#,
	.loc 1 6868 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.1059
	jmp	.L1890	#
.L1889:
	.loc 1 6868 0 discriminator 2
	movl	$-1, %eax	#, iftmp.1059
.L1890:
	.loc 1 6868 0 discriminator 3
	movl	%eax, -20(%rbp)	# iftmp.1059, expect_occurrences
	.loc 1 6869 0 is_stmt 1 discriminator 3
	movq	cfun(%rip), %rax	# cfun, cfun.1060
	movq	24(%rax), %rax	# cfun.1060_41->emit, D.28391
	movq	80(%rax), %rdx	# _42->x_regno_reg_rtx, D.28392
	movl	-52(%rbp), %eax	# j, tmp149
	cltq
	movl	reload_spill_index(,%rax,4), %eax	# reload_spill_index, D.28388
	cltq
	movl	reg_reloaded_contents(,%rax,4), %eax	# reg_reloaded_contents, D.28388
	cltq
	salq	$3, %rax	#, D.28389
	addq	%rdx, %rax	# D.28392, D.28392
	movq	(%rax), %rdx	# *_48, D.28385
	movq	-48(%rbp), %rax	# rl, tmp151
	movq	%rdx, (%rax)	# D.28385, rl_6(D)->in
.L1888:
	.loc 1 6876 0
	movl	optimize(%rip), %eax	# optimize, optimize.1061
	testl	%eax, %eax	# optimize.1061
	je	.L1883	#,
	.loc 1 6877 0
	movl	-52(%rbp), %eax	# j, tmp153
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28387
	testb	%al, %al	# D.28387
	jne	.L1892	#,
	.loc 1 6877 0 is_stmt 0 discriminator 1
	movl	-52(%rbp), %eax	# j, tmp155
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28385
	testq	%rax, %rax	# D.28385
	je	.L1883	#,
.L1892:
	.loc 1 6878 0 is_stmt 1
	movq	-48(%rbp), %rax	# rl, tmp156
	movq	64(%rax), %rax	# rl_6(D)->reg_rtx, D.28385
	testq	%rax, %rax	# D.28385
	je	.L1883	#,
	.loc 1 6879 0
	movq	-48(%rbp), %rax	# rl, tmp157
	movq	64(%rax), %rax	# rl_6(D)->reg_rtx, D.28385
	movzwl	(%rax), %eax	# _54->code, D.28386
	cmpw	$61, %ax	#, D.28386
	jne	.L1883	#,
	.loc 1 6880 0
	movq	-48(%rbp), %rax	# rl, tmp158
	movq	64(%rax), %rax	# rl_6(D)->reg_rtx, D.28385
	movl	8(%rax), %eax	# _56->fld[0].rtuint, D.28393
	movl	%eax, %eax	# D.28393, tmp159
	movq	spill_reg_store(,%rax,8), %rax	# spill_reg_store, D.28385
	testq	%rax, %rax	# D.28385
	je	.L1883	#,
	.loc 1 6892 0
	movq	-48(%rbp), %rax	# rl, tmp160
	movq	64(%rax), %rax	# rl_6(D)->reg_rtx, D.28385
	movl	8(%rax), %eax	# _59->fld[0].rtuint, D.28393
	.loc 1 6891 0
	movl	%eax, %eax	# D.28393, tmp161
	movq	spill_reg_stored_to(,%rax,8), %rdx	# spill_reg_stored_to, D.28385
	movq	-16(%rbp), %rax	# insn, tmp162
	movq	%rdx, %rsi	# D.28385,
	movq	%rax, %rdi	# tmp162,
	call	dead_or_set_p	#
	testl	%eax, %eax	# D.28388
	jne	.L1893	#,
	.loc 1 6893 0
	movq	-48(%rbp), %rax	# rl, tmp163
	movq	48(%rax), %rdx	# rl_6(D)->out_reg, D.28385
	movq	-48(%rbp), %rax	# rl, tmp164
	movq	64(%rax), %rax	# rl_6(D)->reg_rtx, D.28385
	movl	8(%rax), %eax	# _64->fld[0].rtuint, D.28393
	movl	%eax, %eax	# D.28393, tmp165
	movq	spill_reg_stored_to(,%rax,8), %rax	# spill_reg_stored_to, D.28385
	movq	%rdx, %rsi	# D.28385,
	movq	%rax, %rdi	# D.28385,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28388
	je	.L1883	#,
.L1893:
	.loc 1 6895 0
	movq	-48(%rbp), %rax	# rl, tmp166
	movq	64(%rax), %rax	# rl_6(D)->reg_rtx, D.28385
	movl	8(%rax), %eax	# _68->fld[0].rtuint, D.28393
	movl	%eax, %edx	# D.28393, D.28388
	movl	-52(%rbp), %ecx	# j, tmp167
	movq	-16(%rbp), %rax	# insn, tmp168
	movl	%ecx, %esi	# tmp167,
	movq	%rax, %rdi	# tmp168,
	call	delete_output_reload	#
.L1883:
	.loc 1 6896 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE58:
	.size	do_input_reload, .-do_input_reload
	.type	do_output_reload, @function
do_output_reload:
.LFB59:
	.loc 1 6907 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -56(%rbp)	# chain, chain
	movq	%rsi, -64(%rbp)	# rl, rl
	movl	%edx, -68(%rbp)	# j, j
	.loc 1 6909 0
	movq	-56(%rbp), %rax	# chain, tmp102
	movq	32(%rax), %rax	# chain_1(D)->insn, tmp103
	movq	%rax, -32(%rbp)	# tmp103, insn
	.loc 1 6913 0
	movq	-64(%rbp), %rax	# rl, tmp104
	movq	48(%rax), %rax	# rl_3(D)->out_reg, tmp105
	movq	%rax, -24(%rbp)	# tmp105, pseudo
	.loc 1 6915 0
	cmpq	$0, -24(%rbp)	#, pseudo
	je	.L1895	#,
	.loc 1 6916 0
	movl	optimize(%rip), %eax	# optimize, optimize.1062
	testl	%eax, %eax	# optimize.1062
	je	.L1895	#,
	.loc 1 6917 0
	movq	-24(%rbp), %rax	# pseudo, tmp106
	movzwl	(%rax), %eax	# pseudo_4->code, D.28394
	cmpw	$61, %ax	#, D.28394
	jne	.L1895	#,
	.loc 1 6918 0
	movq	-64(%rbp), %rax	# rl, tmp107
	movq	40(%rax), %rax	# rl_3(D)->in_reg, D.28395
	movq	-24(%rbp), %rdx	# pseudo, tmp108
	movq	%rdx, %rsi	# tmp108,
	movq	%rax, %rdi	# D.28395,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28396
	jne	.L1895	#,
	.loc 1 6919 0
	movq	-24(%rbp), %rax	# pseudo, tmp109
	movl	8(%rax), %eax	# pseudo_4->fld[0].rtuint, D.28397
	cmpl	$52, %eax	#, D.28397
	jbe	.L1895	#,
	.loc 1 6920 0
	movq	reg_last_reload_reg(%rip), %rdx	# reg_last_reload_reg, reg_last_reload_reg.1063
	movq	-24(%rbp), %rax	# pseudo, tmp110
	movl	8(%rax), %eax	# pseudo_4->fld[0].rtuint, D.28397
	movl	%eax, %eax	# D.28397, D.28398
	salq	$3, %rax	#, D.28398
	addq	%rdx, %rax	# reg_last_reload_reg.1063, D.28399
	movq	(%rax), %rax	# *_14, D.28395
	testq	%rax, %rax	# D.28395
	je	.L1895	#,
.LBB149:
	.loc 1 6922 0
	movq	-24(%rbp), %rax	# pseudo, tmp111
	movl	8(%rax), %eax	# pseudo_4->fld[0].rtuint, D.28397
	movl	%eax, -40(%rbp)	# D.28397, pseudo_no
	.loc 1 6923 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.1064
	movl	-40(%rbp), %edx	# pseudo_no, tmp112
	movslq	%edx, %rdx	# tmp112, D.28398
	salq	$3, %rdx	#, D.28398
	addq	%rdx, %rax	# D.28398, D.28399
	movq	(%rax), %rax	# *_21, D.28395
	movl	8(%rax), %eax	# _22->fld[0].rtuint, D.28397
	movl	%eax, -36(%rbp)	# D.28397, last_regno
	.loc 1 6928 0
	movq	reg_reloaded_valid(%rip), %rdx	# reg_reloaded_valid, reg_reloaded_valid.1065
	movl	-36(%rbp), %eax	# last_regno, tmp113
	movl	%eax, %ecx	# tmp113, tmp151
	shrq	%cl, %rdx	# tmp151, D.28398
	movq	%rdx, %rax	# D.28398, D.28398
	andl	$1, %eax	#, D.28398
	testq	%rax, %rax	# D.28398
	je	.L1895	#,
	.loc 1 6929 0
	movl	-36(%rbp), %eax	# last_regno, tmp115
	cltq
	movl	reg_reloaded_contents(,%rax,4), %eax	# reg_reloaded_contents, D.28396
	cmpl	-40(%rbp), %eax	# pseudo_no, D.28396
	jne	.L1895	#,
	.loc 1 6930 0
	movl	-36(%rbp), %eax	# last_regno, tmp117
	cltq
	movq	spill_reg_store(,%rax,8), %rax	# spill_reg_store, D.28395
	testq	%rax, %rax	# D.28395
	je	.L1895	#,
	.loc 1 6931 0
	movl	-36(%rbp), %eax	# last_regno, tmp119
	cltq
	movq	spill_reg_stored_to(,%rax,8), %rdx	# spill_reg_stored_to, D.28395
	movq	-24(%rbp), %rax	# pseudo, tmp120
	movq	%rdx, %rsi	# D.28395,
	movq	%rax, %rdi	# tmp120,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28396
	je	.L1895	#,
	.loc 1 6932 0
	movl	-36(%rbp), %edx	# last_regno, tmp121
	movl	-68(%rbp), %ecx	# j, tmp122
	movq	-32(%rbp), %rax	# insn, tmp123
	movl	%ecx, %esi	# tmp122,
	movq	%rax, %rdi	# tmp123,
	call	delete_output_reload	#
.L1895:
.LBE149:
	.loc 1 6935 0
	movq	-64(%rbp), %rax	# rl, tmp124
	movq	48(%rax), %rax	# rl_3(D)->out_reg, tmp125
	movq	%rax, -16(%rbp)	# tmp125, old
	.loc 1 6936 0
	cmpq	$0, -16(%rbp)	#, old
	je	.L1896	#,
	.loc 1 6937 0
	movq	-64(%rbp), %rax	# rl, tmp126
	movq	64(%rax), %rax	# rl_3(D)->reg_rtx, D.28395
	cmpq	-16(%rbp), %rax	# old, D.28395
	je	.L1896	#,
	.loc 1 6938 0
	movq	-64(%rbp), %rax	# rl, tmp127
	movq	64(%rax), %rax	# rl_3(D)->reg_rtx, D.28395
	testq	%rax, %rax	# D.28395
	jne	.L1897	#,
.L1896:
	.loc 1 6939 0
	jmp	.L1894	#
.L1897:
	.loc 1 6944 0
	movq	-16(%rbp), %rax	# old, tmp128
	movzwl	(%rax), %eax	# old_33->code, D.28394
	cmpw	$61, %ax	#, D.28394
	je	.L1899	#,
	.loc 1 6944 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# old, tmp129
	movzwl	(%rax), %eax	# old_33->code, D.28394
	cmpw	$62, %ax	#, D.28394
	jne	.L1900	#,
.L1899:
	.loc 1 6945 0 is_stmt 1
	movq	-16(%rbp), %rdx	# old, tmp130
	movq	-32(%rbp), %rax	# insn, tmp131
	movl	$10, %esi	#,
	movq	%rax, %rdi	# tmp131,
	call	find_reg_note	#
	movq	%rax, -8(%rbp)	# tmp132, note
	cmpq	$0, -8(%rbp)	#, note
	je	.L1900	#,
	.loc 1 6947 0
	movq	-64(%rbp), %rax	# rl, tmp133
	movq	64(%rax), %rdx	# rl_3(D)->reg_rtx, D.28395
	movq	-8(%rbp), %rax	# note, tmp134
	movq	%rdx, 8(%rax)	# D.28395, note_38->fld[0].rtx
	.loc 1 6948 0
	jmp	.L1894	#
.L1900:
	.loc 1 6951 0
	movq	-16(%rbp), %rax	# old, tmp135
	movzwl	(%rax), %eax	# old_33->code, D.28394
	cmpw	$63, %ax	#, D.28394
	jne	.L1901	#,
	.loc 1 6952 0
	movq	-16(%rbp), %rax	# old, tmp136
	movq	8(%rax), %rax	# old_33->fld[0].rtx, D.28395
	movzwl	(%rax), %eax	# _41->code, D.28394
	cmpw	$61, %ax	#, D.28394
	jne	.L1901	#,
	.loc 1 6953 0
	movq	-16(%rbp), %rax	# old, tmp137
	movq	8(%rax), %rdx	# old_33->fld[0].rtx, D.28395
	movq	-32(%rbp), %rax	# insn, tmp138
	movl	$10, %esi	#,
	movq	%rax, %rdi	# tmp138,
	call	find_reg_note	#
	movq	%rax, -8(%rbp)	# tmp139, note
	cmpq	$0, -8(%rbp)	#, note
	je	.L1901	#,
	.loc 1 6956 0
	movq	-64(%rbp), %rax	# rl, tmp140
	movq	64(%rax), %rdx	# rl_3(D)->reg_rtx, D.28395
	movq	-16(%rbp), %rax	# old, tmp141
	movzbl	2(%rax), %eax	# old_33->mode, D.28400
	movzbl	%al, %eax	# D.28400, D.28401
	movq	%rdx, %rsi	# D.28395,
	movl	%eax, %edi	# D.28401,
	call	gen_lowpart_common	#
	movq	-8(%rbp), %rdx	# note, tmp142
	movq	%rax, 8(%rdx)	# D.28395, note_44->fld[0].rtx
	.loc 1 6958 0
	jmp	.L1894	#
.L1901:
	.loc 1 6960 0
	movq	-16(%rbp), %rax	# old, tmp143
	movzwl	(%rax), %eax	# old_33->code, D.28394
	cmpw	$62, %ax	#, D.28394
	jne	.L1902	#,
	.loc 1 6963 0
	jmp	.L1894	#
.L1902:
	.loc 1 6966 0
	movq	-32(%rbp), %rax	# insn, tmp144
	movzwl	(%rax), %eax	# insn_2->code, D.28394
	cmpw	$33, %ax	#, D.28394
	jne	.L1903	#,
	.loc 1 6967 0
	movl	$__FUNCTION__.15829, %edx	#,
	movl	$6967, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L1903:
	.loc 1 6969 0
	movl	-68(%rbp), %eax	# j, tmp145
	movslq	%eax, %rdx	# tmp145, D.28398
	movq	%rdx, %rax	# D.28398, tmp146
	addq	%rax, %rax	# tmp146
	addq	%rdx, %rax	# D.28398, tmp146
	salq	$2, %rax	#, tmp146
	addq	%rdx, %rax	# D.28398, tmp146
	salq	$3, %rax	#, tmp147
	leaq	rld(%rax), %rcx	#, D.28402
	movl	-68(%rbp), %edx	# j, tmp148
	movq	-56(%rbp), %rax	# chain, tmp149
	movq	%rcx, %rsi	# D.28402,
	movq	%rax, %rdi	# tmp149,
	call	emit_output_reload_insns	#
.L1894:
	.loc 1 6970 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE59:
	.size	do_output_reload, .-do_output_reload
	.section	.rodata
.LC16:
	.string	"\nReloads for insn # %d\n"
	.text
	.type	emit_reload_insns, @function
emit_reload_insns:
.LFB60:
	.loc 1 6977 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$168, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -168(%rbp)	# chain, chain
	.loc 1 6978 0
	movq	-168(%rbp), %rax	# chain, tmp503
	movq	32(%rax), %rax	# chain_78(D)->insn, tmp504
	movq	%rax, -56(%rbp)	# tmp504, insn
	.loc 1 6982 0
	movq	$0, reg_reloaded_died(%rip)	#, reg_reloaded_died
	.loc 1 6984 0
	movl	$0, -160(%rbp)	#, j
	jmp	.L1905	#
.L1906:
	.loc 1 6989 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp506
	cltq
	movq	$0, other_output_reload_insns(,%rax,8)	#, other_output_reload_insns
	movl	-160(%rbp), %eax	# j, tmp508
	cltq
	movq	other_output_reload_insns(,%rax,8), %rdx	# other_output_reload_insns, D.28403
	movl	-160(%rbp), %eax	# j, tmp510
	cltq
	movq	%rdx, outaddr_address_reload_insns(,%rax,8)	# D.28403, outaddr_address_reload_insns
	.loc 1 6988 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp512
	cltq
	movq	outaddr_address_reload_insns(,%rax,8), %rdx	# outaddr_address_reload_insns, D.28403
	movl	-160(%rbp), %eax	# j, tmp514
	cltq
	movq	%rdx, output_address_reload_insns(,%rax,8)	# D.28403, output_address_reload_insns
	.loc 1 6987 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp516
	cltq
	movq	output_address_reload_insns(,%rax,8), %rdx	# output_address_reload_insns, D.28403
	movl	-160(%rbp), %eax	# j, tmp518
	cltq
	movq	%rdx, output_reload_insns(,%rax,8)	# D.28403, output_reload_insns
	movl	-160(%rbp), %eax	# j, tmp520
	cltq
	movq	output_reload_insns(,%rax,8), %rdx	# output_reload_insns, D.28403
	movl	-160(%rbp), %eax	# j, tmp522
	cltq
	movq	%rdx, inpaddr_address_reload_insns(,%rax,8)	# D.28403, inpaddr_address_reload_insns
	.loc 1 6986 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp524
	cltq
	movq	inpaddr_address_reload_insns(,%rax,8), %rdx	# inpaddr_address_reload_insns, D.28403
	movl	-160(%rbp), %eax	# j, tmp526
	cltq
	movq	%rdx, input_address_reload_insns(,%rax,8)	# D.28403, input_address_reload_insns
	.loc 1 6985 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp528
	cltq
	movq	input_address_reload_insns(,%rax,8), %rdx	# input_address_reload_insns, D.28403
	movl	-160(%rbp), %eax	# j, tmp530
	cltq
	movq	%rdx, input_reload_insns(,%rax,8)	# D.28403, input_reload_insns
	.loc 1 6984 0 discriminator 2
	addl	$1, -160(%rbp)	#, j
.L1905:
	.loc 1 6984 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.1066
	cmpl	%eax, -160(%rbp)	# reload_n_operands.1066, j
	jl	.L1906	#,
	.loc 1 6990 0 is_stmt 1
	movq	$0, other_input_address_reload_insns(%rip)	#, other_input_address_reload_insns
	.loc 1 6991 0
	movq	$0, other_input_reload_insns(%rip)	#, other_input_reload_insns
	.loc 1 6992 0
	movq	$0, operand_reload_insns(%rip)	#, operand_reload_insns
	.loc 1 6993 0
	movq	$0, other_operand_reload_insns(%rip)	#, other_operand_reload_insns
	.loc 1 6996 0
	movq	rtl_dump_file(%rip), %rax	# rtl_dump_file, rtl_dump_file.1067
	testq	%rax, %rax	# rtl_dump_file.1067
	je	.L1907	#,
	.loc 1 6998 0
	movq	-56(%rbp), %rax	# insn, tmp531
	movl	8(%rax), %edx	# insn_79->fld[0].rtint, D.28404
	movq	rtl_dump_file(%rip), %rax	# rtl_dump_file, rtl_dump_file.1068
	movl	$.LC16, %esi	#,
	movq	%rax, %rdi	# rtl_dump_file.1068,
	movl	$0, %eax	#,
	call	fprintf	#
	.loc 1 6999 0
	movq	rtl_dump_file(%rip), %rax	# rtl_dump_file, rtl_dump_file.1069
	movq	%rax, %rdi	# rtl_dump_file.1069,
	call	debug_reload_to_stream	#
.L1907:
	.loc 1 7007 0
	movl	$0, -160(%rbp)	#, j
	jmp	.L1908	#
.L1910:
	.loc 1 7009 0
	movl	-160(%rbp), %eax	# j, tmp533
	movslq	%eax, %rdx	# tmp533, tmp532
	movq	%rdx, %rax	# tmp532, tmp534
	addq	%rax, %rax	# tmp534
	addq	%rdx, %rax	# tmp532, tmp534
	salq	$2, %rax	#, tmp534
	addq	%rdx, %rax	# tmp532, tmp534
	salq	$3, %rax	#, tmp535
	addq	$rld+64, %rax	#, tmp536
	movq	(%rax), %rax	# rld[j_2].reg_rtx, D.28403
	testq	%rax, %rax	# D.28403
	je	.L1909	#,
	.loc 1 7010 0
	movl	-160(%rbp), %eax	# j, tmp538
	movslq	%eax, %rdx	# tmp538, tmp537
	movq	%rdx, %rax	# tmp537, tmp539
	addq	%rax, %rax	# tmp539
	addq	%rdx, %rax	# tmp537, tmp539
	salq	$2, %rax	#, tmp539
	addq	%rdx, %rax	# tmp537, tmp539
	salq	$3, %rax	#, tmp540
	addq	$rld+64, %rax	#, tmp541
	movq	(%rax), %rax	# rld[j_2].reg_rtx, D.28403
	movl	8(%rax), %eax	# _96->fld[0].rtuint, D.28405
	cmpl	$52, %eax	#, D.28405
	ja	.L1909	#,
	.loc 1 7011 0
	movl	-160(%rbp), %eax	# j, tmp543
	movslq	%eax, %rdx	# tmp543, tmp542
	movq	%rdx, %rax	# tmp542, tmp544
	addq	%rax, %rax	# tmp544
	addq	%rdx, %rax	# tmp542, tmp544
	salq	$2, %rax	#, tmp544
	addq	%rdx, %rax	# tmp542, tmp544
	salq	$3, %rax	#, tmp545
	addq	$rld+64, %rax	#, tmp546
	movq	(%rax), %rax	# rld[j_2].reg_rtx, D.28403
	movl	8(%rax), %eax	# _98->fld[0].rtuint, D.28405
	movl	%eax, %eax	# D.28405, tmp547
	movq	$0, new_spill_reg_store(,%rax,8)	#, new_spill_reg_store
.L1909:
	.loc 1 7013 0
	movl	-160(%rbp), %eax	# j, tmp548
	movslq	%eax, %rdx	# tmp548, D.28406
	movq	%rdx, %rax	# D.28406, tmp549
	addq	%rax, %rax	# tmp549
	addq	%rdx, %rax	# D.28406, tmp549
	salq	$2, %rax	#, tmp549
	addq	%rdx, %rax	# D.28406, tmp549
	salq	$3, %rax	#, tmp550
	leaq	rld(%rax), %rcx	#, D.28407
	movl	-160(%rbp), %edx	# j, tmp551
	movq	-168(%rbp), %rax	# chain, tmp552
	movq	%rcx, %rsi	# D.28407,
	movq	%rax, %rdi	# tmp552,
	call	do_input_reload	#
	.loc 1 7014 0
	movl	-160(%rbp), %eax	# j, tmp553
	movslq	%eax, %rdx	# tmp553, D.28406
	movq	%rdx, %rax	# D.28406, tmp554
	addq	%rax, %rax	# tmp554
	addq	%rdx, %rax	# D.28406, tmp554
	salq	$2, %rax	#, tmp554
	addq	%rdx, %rax	# D.28406, tmp554
	salq	$3, %rax	#, tmp555
	leaq	rld(%rax), %rcx	#, D.28407
	movl	-160(%rbp), %edx	# j, tmp556
	movq	-168(%rbp), %rax	# chain, tmp557
	movq	%rcx, %rsi	# D.28407,
	movq	%rax, %rdi	# tmp557,
	call	do_output_reload	#
	.loc 1 7007 0
	addl	$1, -160(%rbp)	#, j
.L1908:
	.loc 1 7007 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1070
	cmpl	%eax, -160(%rbp)	# n_reloads.1070, j
	jl	.L1910	#,
	.loc 1 7041 0 is_stmt 1
	movq	other_input_address_reload_insns(%rip), %rax	# other_input_address_reload_insns, other_input_address_reload_insns.1071
	movq	-56(%rbp), %rdx	# insn, tmp558
	movq	%rdx, %rsi	# tmp558,
	movq	%rax, %rdi	# other_input_address_reload_insns.1071,
	call	emit_insns_before	#
	.loc 1 7042 0
	movq	other_input_reload_insns(%rip), %rax	# other_input_reload_insns, other_input_reload_insns.1072
	movq	-56(%rbp), %rdx	# insn, tmp559
	movq	%rdx, %rsi	# tmp559,
	movq	%rax, %rdi	# other_input_reload_insns.1072,
	call	emit_insns_before	#
	.loc 1 7044 0
	movl	$0, -160(%rbp)	#, j
	jmp	.L1911	#
.L1912:
	.loc 1 7046 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp561
	cltq
	movq	inpaddr_address_reload_insns(,%rax,8), %rax	# inpaddr_address_reload_insns, D.28403
	movq	-56(%rbp), %rdx	# insn, tmp562
	movq	%rdx, %rsi	# tmp562,
	movq	%rax, %rdi	# D.28403,
	call	emit_insns_before	#
	.loc 1 7047 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp564
	cltq
	movq	input_address_reload_insns(,%rax,8), %rax	# input_address_reload_insns, D.28403
	movq	-56(%rbp), %rdx	# insn, tmp565
	movq	%rdx, %rsi	# tmp565,
	movq	%rax, %rdi	# D.28403,
	call	emit_insns_before	#
	.loc 1 7048 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp567
	cltq
	movq	input_reload_insns(,%rax,8), %rax	# input_reload_insns, D.28403
	movq	-56(%rbp), %rdx	# insn, tmp568
	movq	%rdx, %rsi	# tmp568,
	movq	%rax, %rdi	# D.28403,
	call	emit_insns_before	#
	.loc 1 7044 0 discriminator 2
	addl	$1, -160(%rbp)	#, j
.L1911:
	.loc 1 7044 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.1073
	cmpl	%eax, -160(%rbp)	# reload_n_operands.1073, j
	jl	.L1912	#,
	.loc 1 7051 0 is_stmt 1
	movq	other_operand_reload_insns(%rip), %rax	# other_operand_reload_insns, other_operand_reload_insns.1074
	movq	-56(%rbp), %rdx	# insn, tmp569
	movq	%rdx, %rsi	# tmp569,
	movq	%rax, %rdi	# other_operand_reload_insns.1074,
	call	emit_insns_before	#
	.loc 1 7052 0
	movq	operand_reload_insns(%rip), %rax	# operand_reload_insns, operand_reload_insns.1075
	movq	-56(%rbp), %rdx	# insn, tmp570
	movq	%rdx, %rsi	# tmp570,
	movq	%rax, %rdi	# operand_reload_insns.1075,
	call	emit_insns_before	#
	.loc 1 7054 0
	movl	$0, -160(%rbp)	#, j
	jmp	.L1913	#
.L1914:
.LBB150:
	.loc 1 7056 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp572
	cltq
	movq	outaddr_address_reload_insns(,%rax,8), %rax	# outaddr_address_reload_insns, D.28403
	movq	-56(%rbp), %rdx	# insn, tmp573
	movq	%rdx, %rsi	# tmp573,
	movq	%rax, %rdi	# D.28403,
	call	emit_insns_after	#
	movq	%rax, -48(%rbp)	# tmp574, x
	.loc 1 7057 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp576
	cltq
	movq	output_address_reload_insns(,%rax,8), %rax	# output_address_reload_insns, D.28403
	movq	-48(%rbp), %rdx	# x, tmp577
	movq	%rdx, %rsi	# tmp577,
	movq	%rax, %rdi	# D.28403,
	call	emit_insns_after	#
	movq	%rax, -48(%rbp)	# tmp578, x
	.loc 1 7058 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp580
	cltq
	movq	output_reload_insns(,%rax,8), %rax	# output_reload_insns, D.28403
	movq	-48(%rbp), %rdx	# x, tmp581
	movq	%rdx, %rsi	# tmp581,
	movq	%rax, %rdi	# D.28403,
	call	emit_insns_after	#
	movq	%rax, -48(%rbp)	# tmp582, x
	.loc 1 7059 0 discriminator 2
	movl	-160(%rbp), %eax	# j, tmp584
	cltq
	movq	other_output_reload_insns(,%rax,8), %rax	# other_output_reload_insns, D.28403
	movq	-48(%rbp), %rdx	# x, tmp585
	movq	%rdx, %rsi	# tmp585,
	movq	%rax, %rdi	# D.28403,
	call	emit_insns_after	#
.LBE150:
	.loc 1 7054 0 discriminator 2
	addl	$1, -160(%rbp)	#, j
.L1913:
	.loc 1 7054 0 is_stmt 0 discriminator 1
	movl	reload_n_operands(%rip), %eax	# reload_n_operands, reload_n_operands.1076
	cmpl	%eax, -160(%rbp)	# reload_n_operands.1076, j
	jl	.L1914	#,
	.loc 1 7069 0 is_stmt 1
	movl	$0, -160(%rbp)	#, j
	jmp	.L1915	#
.L2092:
.LBB151:
	.loc 1 7071 0
	movl	-160(%rbp), %eax	# j, tmp587
	cltq
	movzwl	reload_order(%rax,%rax), %eax	# reload_order, D.28408
	cwtl
	movl	%eax, -128(%rbp)	# tmp588, r
	.loc 1 7072 0
	movl	-128(%rbp), %eax	# r, tmp590
	cltq
	movl	reload_spill_index(,%rax,4), %eax	# reload_spill_index, tmp591
	movl	%eax, -124(%rbp)	# tmp591, i
	.loc 1 7078 0
	movl	-128(%rbp), %eax	# r, tmp593
	movslq	%eax, %rdx	# tmp593, tmp592
	movq	%rdx, %rax	# tmp592, tmp594
	addq	%rax, %rax	# tmp594
	addq	%rdx, %rax	# tmp592, tmp594
	salq	$2, %rax	#, tmp594
	addq	%rdx, %rax	# tmp592, tmp594
	salq	$3, %rax	#, tmp595
	addq	$rld+40, %rax	#, tmp596
	movq	(%rax), %rax	# rld[r_130].in_reg, D.28403
	testq	%rax, %rax	# D.28403
	je	.L1916	#,
	.loc 1 7079 0
	movl	-128(%rbp), %eax	# r, tmp598
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28409
	testb	%al, %al	# D.28409
	jne	.L1916	#,
	.loc 1 7079 0 is_stmt 0 discriminator 1
	movl	-128(%rbp), %eax	# r, tmp600
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28403
	testq	%rax, %rax	# D.28403
	jne	.L1916	#,
.LBB152:
	.loc 1 7081 0 is_stmt 1
	movl	-128(%rbp), %eax	# r, tmp602
	movslq	%eax, %rdx	# tmp602, tmp601
	movq	%rdx, %rax	# tmp601, tmp603
	addq	%rax, %rax	# tmp603
	addq	%rdx, %rax	# tmp601, tmp603
	salq	$2, %rax	#, tmp603
	addq	%rdx, %rax	# tmp601, tmp603
	salq	$3, %rax	#, tmp604
	addq	$rld+40, %rax	#, tmp605
	movq	(%rax), %rax	# rld[r_130].in_reg, tmp606
	movq	%rax, -88(%rbp)	# tmp606, reg
	.loc 1 7083 0
	movq	-88(%rbp), %rax	# reg, tmp607
	movzwl	(%rax), %eax	# reg_135->code, D.28410
	cmpw	$63, %ax	#, D.28410
	jne	.L1917	#,
	.loc 1 7084 0
	movq	-88(%rbp), %rax	# reg, tmp608
	movq	8(%rax), %rax	# reg_135->fld[0].rtx, tmp609
	movq	%rax, -88(%rbp)	# tmp609, reg
.L1917:
	.loc 1 7086 0
	movq	-88(%rbp), %rax	# reg, tmp610
	movzwl	(%rax), %eax	# reg_6->code, D.28410
	cmpw	$61, %ax	#, D.28410
	jne	.L1916	#,
	.loc 1 7087 0
	movq	-88(%rbp), %rax	# reg, tmp611
	movl	8(%rax), %eax	# reg_6->fld[0].rtuint, D.28405
	cmpl	$52, %eax	#, D.28405
	jbe	.L1916	#,
	.loc 1 7088 0
	movq	reg_has_output_reload(%rip), %rdx	# reg_has_output_reload, reg_has_output_reload.1077
	movq	-88(%rbp), %rax	# reg, tmp612
	movl	8(%rax), %eax	# reg_6->fld[0].rtuint, D.28405
	movl	%eax, %eax	# D.28405, D.28411
	addq	%rdx, %rax	# reg_has_output_reload.1077, D.28412
	movzbl	(%rax), %eax	# *_143, D.28409
	testb	%al, %al	# D.28409
	jne	.L1916	#,
.LBB153:
	.loc 1 7090 0
	movq	-88(%rbp), %rax	# reg, tmp613
	movl	8(%rax), %eax	# reg_6->fld[0].rtuint, D.28405
	movl	%eax, -120(%rbp)	# D.28405, nregno
	.loc 1 7092 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.1078
	movl	-120(%rbp), %edx	# nregno, tmp614
	movslq	%edx, %rdx	# tmp614, D.28406
	salq	$3, %rdx	#, D.28406
	addq	%rdx, %rax	# D.28406, D.28413
	movq	(%rax), %rax	# *_150, D.28403
	testq	%rax, %rax	# D.28403
	je	.L1916	#,
.LBB154:
	.loc 1 7094 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.1079
	movl	-120(%rbp), %edx	# nregno, tmp615
	movslq	%edx, %rdx	# tmp615, D.28406
	salq	$3, %rdx	#, D.28406
	addq	%rdx, %rax	# D.28406, D.28413
	movq	(%rax), %rax	# *_155, D.28403
	movl	8(%rax), %eax	# _156->fld[0].rtuint, D.28405
	movl	%eax, -116(%rbp)	# D.28405, last_regno
	.loc 1 7096 0
	movl	-116(%rbp), %eax	# last_regno, tmp617
	cltq
	movl	reg_reloaded_contents(,%rax,4), %eax	# reg_reloaded_contents, D.28404
	cmpl	-120(%rbp), %eax	# nregno, D.28404
	jne	.L1916	#,
	.loc 1 7097 0
	movl	-116(%rbp), %eax	# last_regno, tmp619
	cltq
	movq	$0, spill_reg_store(,%rax,8)	#, spill_reg_store
.L1916:
.LBE154:
.LBE153:
.LBE152:
	.loc 1 7106 0
	cmpl	$0, -124(%rbp)	#, i
	js	.L1918	#,
	.loc 1 7106 0 is_stmt 0 discriminator 1
	movl	-128(%rbp), %eax	# r, tmp621
	movslq	%eax, %rdx	# tmp621, tmp620
	movq	%rdx, %rax	# tmp620, tmp622
	addq	%rax, %rax	# tmp622
	addq	%rdx, %rax	# tmp620, tmp622
	salq	$2, %rax	#, tmp622
	addq	%rdx, %rax	# tmp620, tmp622
	salq	$3, %rax	#, tmp623
	addq	$rld+64, %rax	#, tmp624
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	testq	%rax, %rax	# D.28403
	je	.L1918	#,
.LBB155:
	.loc 1 7108 0 is_stmt 1
	cmpl	$7, -124(%rbp)	#, i
	jle	.L1919	#,
	.loc 1 7108 0 is_stmt 0 discriminator 1
	cmpl	$15, -124(%rbp)	#, i
	jle	.L1920	#,
.L1919:
	.loc 1 7108 0 discriminator 2
	cmpl	$20, -124(%rbp)	#, i
	jle	.L1921	#,
	.loc 1 7108 0 discriminator 1
	cmpl	$28, -124(%rbp)	#, i
	jle	.L1920	#,
.L1921:
	.loc 1 7108 0 discriminator 2
	cmpl	$44, -124(%rbp)	#, i
	jle	.L1922	#,
	.loc 1 7108 0 discriminator 1
	cmpl	$52, -124(%rbp)	#, i
	jle	.L1920	#,
.L1922:
	.loc 1 7108 0 discriminator 2
	cmpl	$28, -124(%rbp)	#, i
	jle	.L1923	#,
	.loc 1 7108 0 discriminator 1
	cmpl	$36, -124(%rbp)	#, i
	jg	.L1923	#,
.L1920:
	movl	-128(%rbp), %eax	# r, tmp626
	movslq	%eax, %rdx	# tmp626, tmp625
	movq	%rdx, %rax	# tmp625, tmp627
	addq	%rax, %rax	# tmp627
	addq	%rdx, %rax	# tmp625, tmp627
	salq	$2, %rax	#, tmp627
	addq	%rdx, %rax	# tmp625, tmp627
	salq	$3, %rax	#, tmp628
	addq	$rld+64, %rax	#, tmp629
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _193->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28415
	cmpl	$5, %eax	#, D.28415
	je	.L1924	#,
	.loc 1 7108 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp632
	movslq	%eax, %rdx	# tmp632, tmp631
	movq	%rdx, %rax	# tmp631, tmp633
	addq	%rax, %rax	# tmp633
	addq	%rdx, %rax	# tmp631, tmp633
	salq	$2, %rax	#, tmp633
	addq	%rdx, %rax	# tmp631, tmp633
	salq	$3, %rax	#, tmp634
	addq	$rld+64, %rax	#, tmp635
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _197->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28415
	cmpl	$6, %eax	#, D.28415
	jne	.L1925	#,
.L1924:
	.loc 1 7108 0 discriminator 1
	movl	$2, %eax	#, iftmp.1081
	jmp	.L1926	#
.L1925:
	movl	$1, %eax	#, iftmp.1081
.L1926:
	.loc 1 7108 0 discriminator 3
	jmp	.L1927	#
.L1923:
	.loc 1 7108 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp638
	movslq	%eax, %rdx	# tmp638, tmp637
	movq	%rdx, %rax	# tmp637, tmp639
	addq	%rax, %rax	# tmp639
	addq	%rdx, %rax	# tmp637, tmp639
	salq	$2, %rax	#, tmp639
	addq	%rdx, %rax	# tmp637, tmp639
	salq	$3, %rax	#, tmp640
	addq	$rld+64, %rax	#, tmp641
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _161->mode, D.28414
	cmpb	$18, %al	#, D.28414
	jne	.L1928	#,
	.loc 1 7108 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1084
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L1929	#,
	movl	$2, %eax	#, iftmp.1083
	jmp	.L1927	#
.L1929:
	.loc 1 7108 0 discriminator 2
	movl	$3, %eax	#, iftmp.1083
	jmp	.L1927	#
.L1928:
	movl	-128(%rbp), %eax	# r, tmp643
	movslq	%eax, %rdx	# tmp643, tmp642
	movq	%rdx, %rax	# tmp642, tmp644
	addq	%rax, %rax	# tmp644
	addq	%rdx, %rax	# tmp642, tmp644
	salq	$2, %rax	#, tmp644
	addq	%rdx, %rax	# tmp642, tmp644
	salq	$3, %rax	#, tmp645
	addq	$rld+64, %rax	#, tmp646
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _168->mode, D.28414
	cmpb	$24, %al	#, D.28414
	jne	.L1932	#,
	.loc 1 7108 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1087
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L1933	#,
	movl	$4, %eax	#, iftmp.1086
	jmp	.L1927	#
.L1933:
	.loc 1 7108 0 discriminator 2
	movl	$6, %eax	#, iftmp.1086
	jmp	.L1927	#
.L1932:
	movl	-128(%rbp), %eax	# r, tmp648
	movslq	%eax, %rdx	# tmp648, tmp647
	movq	%rdx, %rax	# tmp647, tmp649
	addq	%rax, %rax	# tmp649
	addq	%rdx, %rax	# tmp647, tmp649
	salq	$2, %rax	#, tmp649
	addq	%rdx, %rax	# tmp647, tmp649
	salq	$3, %rax	#, tmp650
	addq	$rld+64, %rax	#, tmp651
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _175->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28414
	movzbl	%al, %edx	# D.28414, D.28404
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1089
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L1936	#,
	.loc 1 7108 0 discriminator 1
	movl	$8, %eax	#, iftmp.1088
	jmp	.L1937	#
.L1936:
	.loc 1 7108 0 discriminator 2
	movl	$4, %eax	#, iftmp.1088
.L1937:
	.loc 1 7108 0 discriminator 3
	addl	%edx, %eax	# D.28404, D.28404
	subl	$1, %eax	#, D.28404
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1091
	andl	$33554432, %edx	#, D.28404
	testl	%edx, %edx	# D.28404
	je	.L1938	#,
	.loc 1 7108 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1090
	jmp	.L1939	#
.L1938:
	.loc 1 7108 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1090
.L1939:
	.loc 1 7108 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1090
.L1927:
	movl	%eax, -112(%rbp)	# iftmp.1080, nr
	.loc 1 7110 0 is_stmt 1 discriminator 3
	movl	$0, -152(%rbp)	#, part_reaches_end
	.loc 1 7111 0 discriminator 3
	movl	$1, -148(%rbp)	#, all_reaches_end
	.loc 1 7115 0 discriminator 3
	movl	$0, -156(%rbp)	#, k
	jmp	.L1940	#
.L1943:
	.loc 1 7117 0
	movl	-128(%rbp), %eax	# r, tmp656
	movslq	%eax, %rdx	# tmp656, tmp655
	movq	%rdx, %rax	# tmp655, tmp657
	addq	%rax, %rax	# tmp657
	addq	%rdx, %rax	# tmp655, tmp657
	salq	$2, %rax	#, tmp657
	addq	%rdx, %rax	# tmp655, tmp657
	salq	$3, %rax	#, tmp658
	addq	$rld+80, %rax	#, tmp659
	movl	12(%rax), %esi	# rld[r_130].when_needed, D.28416
	movl	-128(%rbp), %eax	# r, tmp661
	movslq	%eax, %rdx	# tmp661, tmp660
	movq	%rdx, %rax	# tmp660, tmp662
	addq	%rax, %rax	# tmp662
	addq	%rdx, %rax	# tmp660, tmp662
	salq	$2, %rax	#, tmp662
	addq	%rdx, %rax	# tmp660, tmp662
	salq	$3, %rax	#, tmp663
	addq	$rld+64, %rax	#, tmp664
	movl	8(%rax), %ecx	# rld[r_130].opnum, D.28404
	movl	-156(%rbp), %eax	# k, tmp665
	movl	-124(%rbp), %edx	# i, tmp666
	addl	%edx, %eax	# tmp666, D.28404
	movl	%esi, %edx	# D.28416,
	movl	%ecx, %esi	# D.28404,
	movl	%eax, %edi	# D.28405,
	call	reload_reg_reaches_end_p	#
	testl	%eax, %eax	# D.28404
	je	.L1941	#,
	.loc 1 7119 0
	movl	$1, -152(%rbp)	#, part_reaches_end
	jmp	.L1942	#
.L1941:
	.loc 1 7121 0
	movl	$0, -148(%rbp)	#, all_reaches_end
.L1942:
	.loc 1 7115 0
	addl	$1, -156(%rbp)	#, k
.L1940:
	.loc 1 7115 0 is_stmt 0 discriminator 1
	movl	-156(%rbp), %eax	# k, tmp667
	cmpl	-112(%rbp), %eax	# nr, tmp667
	jl	.L1943	#,
	.loc 1 7126 0 is_stmt 1
	cmpl	$0, -148(%rbp)	#, all_reaches_end
	je	.L1944	#,
	.loc 1 7131 0
	movl	$0, -156(%rbp)	#, k
	jmp	.L1945	#
.L1946:
	.loc 1 7132 0 discriminator 2
	movl	-156(%rbp), %eax	# k, tmp668
	movl	-124(%rbp), %edx	# i, tmp669
	addl	%edx, %eax	# tmp669, D.28404
	movl	$1, %edx	#, tmp670
	movl	%eax, %ecx	# D.28404, tmp1133
	salq	%cl, %rdx	# tmp1133, D.28406
	movq	%rdx, %rax	# D.28406, D.28406
	notq	%rax	# D.28406
	movq	%rax, %rdx	# D.28406, D.28406
	movq	reg_reloaded_valid(%rip), %rax	# reg_reloaded_valid, reg_reloaded_valid.1092
	andq	%rdx, %rax	# D.28406, reg_reloaded_valid.1093
	movq	%rax, reg_reloaded_valid(%rip)	# reg_reloaded_valid.1093, reg_reloaded_valid
	.loc 1 7131 0 discriminator 2
	addl	$1, -156(%rbp)	#, k
.L1945:
	.loc 1 7131 0 is_stmt 0 discriminator 1
	movl	-156(%rbp), %eax	# k, tmp671
	cmpl	-112(%rbp), %eax	# nr, tmp671
	jl	.L1946	#,
	.loc 1 7135 0 is_stmt 1
	movl	-128(%rbp), %eax	# r, tmp673
	movslq	%eax, %rdx	# tmp673, tmp672
	movq	%rdx, %rax	# tmp672, tmp674
	addq	%rax, %rax	# tmp674
	addq	%rdx, %rax	# tmp672, tmp674
	salq	$2, %rax	#, tmp674
	addq	%rdx, %rax	# tmp672, tmp674
	salq	$3, %rax	#, tmp675
	addq	$rld+8, %rax	#, tmp676
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	testq	%rax, %rax	# D.28403
	je	.L1947	#,
	.loc 1 7136 0
	movl	-128(%rbp), %eax	# r, tmp678
	movslq	%eax, %rdx	# tmp678, tmp677
	movq	%rdx, %rax	# tmp677, tmp679
	addq	%rax, %rax	# tmp679
	addq	%rdx, %rax	# tmp677, tmp679
	salq	$2, %rax	#, tmp679
	addq	%rdx, %rax	# tmp677, tmp679
	salq	$3, %rax	#, tmp680
	addq	$rld+8, %rax	#, tmp681
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	movzwl	(%rax), %eax	# _224->code, D.28410
	cmpw	$61, %ax	#, D.28410
	je	.L1948	#,
	.loc 1 7140 0
	movl	-128(%rbp), %eax	# r, tmp683
	movslq	%eax, %rdx	# tmp683, tmp682
	movq	%rdx, %rax	# tmp682, tmp684
	addq	%rax, %rax	# tmp684
	addq	%rdx, %rax	# tmp682, tmp684
	salq	$2, %rax	#, tmp684
	addq	%rdx, %rax	# tmp682, tmp684
	salq	$3, %rax	#, tmp685
	addq	$rld+48, %rax	#, tmp686
	movq	(%rax), %rax	# rld[r_130].out_reg, D.28403
	movzwl	(%rax), %eax	# _226->code, D.28410
	cmpw	$61, %ax	#, D.28410
	jne	.L1947	#,
.L1948:
.LBB156:
	.loc 1 7142 0
	movl	-128(%rbp), %eax	# r, tmp688
	movslq	%eax, %rdx	# tmp688, tmp687
	movq	%rdx, %rax	# tmp687, tmp689
	addq	%rax, %rax	# tmp689
	addq	%rdx, %rax	# tmp687, tmp689
	salq	$2, %rax	#, tmp689
	addq	%rdx, %rax	# tmp687, tmp689
	salq	$3, %rax	#, tmp690
	addq	$rld+8, %rax	#, tmp691
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	movzwl	(%rax), %eax	# _228->code, D.28410
	.loc 1 7144 0
	cmpw	$61, %ax	#, D.28410
	jne	.L1949	#,
	.loc 1 7144 0 is_stmt 0 discriminator 1
	movl	-128(%rbp), %eax	# r, tmp693
	movslq	%eax, %rdx	# tmp693, tmp692
	movq	%rdx, %rax	# tmp692, tmp694
	addq	%rax, %rax	# tmp694
	addq	%rdx, %rax	# tmp692, tmp694
	salq	$2, %rax	#, tmp694
	addq	%rdx, %rax	# tmp692, tmp694
	salq	$3, %rax	#, tmp695
	addq	$rld+8, %rax	#, tmp696
	movq	(%rax), %rax	# rld[r_130].out, iftmp.1094
	jmp	.L1950	#
.L1949:
	.loc 1 7144 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp698
	movslq	%eax, %rdx	# tmp698, tmp697
	movq	%rdx, %rax	# tmp697, tmp699
	addq	%rax, %rax	# tmp699
	addq	%rdx, %rax	# tmp697, tmp699
	salq	$2, %rax	#, tmp699
	addq	%rdx, %rax	# tmp697, tmp699
	salq	$3, %rax	#, tmp700
	addq	$rld+48, %rax	#, tmp701
	movq	(%rax), %rax	# rld[r_130].out_reg, D.28403
	.loc 1 7146 0 is_stmt 1 discriminator 2
	testq	%rax, %rax	# D.28403
	je	.L1951	#,
	.loc 1 7146 0 is_stmt 0 discriminator 1
	movl	-128(%rbp), %eax	# r, tmp703
	movslq	%eax, %rdx	# tmp703, tmp702
	movq	%rdx, %rax	# tmp702, tmp704
	addq	%rax, %rax	# tmp704
	addq	%rdx, %rax	# tmp702, tmp704
	salq	$2, %rax	#, tmp704
	addq	%rdx, %rax	# tmp702, tmp704
	salq	$3, %rax	#, tmp705
	addq	$rld+48, %rax	#, tmp706
	movq	(%rax), %rax	# rld[r_130].out_reg, iftmp.1095
	jmp	.L1950	#
.L1951:
	.loc 1 7146 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp708
	movslq	%eax, %rdx	# tmp708, tmp707
	movq	%rdx, %rax	# tmp707, tmp709
	addq	%rax, %rax	# tmp709
	addq	%rdx, %rax	# tmp707, tmp709
	salq	$2, %rax	#, tmp709
	addq	%rdx, %rax	# tmp707, tmp709
	salq	$3, %rax	#, tmp710
	addq	$rld+40, %rax	#, tmp711
	movq	(%rax), %rax	# rld[r_130].in_reg, D.28403
	movq	8(%rax), %rax	# _233->fld[0].rtx, iftmp.1095
.L1950:
	.loc 1 7142 0 is_stmt 1
	movq	%rax, -40(%rbp)	# iftmp.1094, out
	.loc 1 7147 0
	movq	-40(%rbp), %rax	# out, tmp712
	movl	8(%rax), %eax	# out_236->fld[0].rtuint, D.28405
	movl	%eax, -108(%rbp)	# D.28405, nregno
	.loc 1 7149 0
	cmpl	$52, -108(%rbp)	#, nregno
	jg	.L1953	#,
	.loc 1 7149 0 is_stmt 0 discriminator 1
	cmpl	$7, -108(%rbp)	#, nregno
	jle	.L1954	#,
	cmpl	$15, -108(%rbp)	#, nregno
	jle	.L1955	#,
.L1954:
	.loc 1 7149 0 discriminator 2
	cmpl	$20, -108(%rbp)	#, nregno
	jle	.L1956	#,
	.loc 1 7149 0 discriminator 1
	cmpl	$28, -108(%rbp)	#, nregno
	jle	.L1955	#,
.L1956:
	.loc 1 7149 0 discriminator 2
	cmpl	$44, -108(%rbp)	#, nregno
	jle	.L1957	#,
	.loc 1 7149 0 discriminator 1
	cmpl	$52, -108(%rbp)	#, nregno
	jle	.L1955	#,
.L1957:
	.loc 1 7149 0 discriminator 2
	cmpl	$28, -108(%rbp)	#, nregno
	jle	.L1958	#,
	.loc 1 7149 0 discriminator 1
	cmpl	$36, -108(%rbp)	#, nregno
	jg	.L1958	#,
.L1955:
	movl	-128(%rbp), %eax	# r, tmp714
	movslq	%eax, %rdx	# tmp714, tmp713
	movq	%rdx, %rax	# tmp713, tmp715
	addq	%rax, %rax	# tmp715
	addq	%rdx, %rax	# tmp713, tmp715
	salq	$2, %rax	#, tmp715
	addq	%rdx, %rax	# tmp713, tmp715
	salq	$3, %rax	#, tmp716
	addq	$rld+64, %rax	#, tmp717
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _271->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28415
	cmpl	$5, %eax	#, D.28415
	je	.L1959	#,
	.loc 1 7149 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp720
	movslq	%eax, %rdx	# tmp720, tmp719
	movq	%rdx, %rax	# tmp719, tmp721
	addq	%rax, %rax	# tmp721
	addq	%rdx, %rax	# tmp719, tmp721
	salq	$2, %rax	#, tmp721
	addq	%rdx, %rax	# tmp719, tmp721
	salq	$3, %rax	#, tmp722
	addq	$rld+64, %rax	#, tmp723
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _275->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28415
	cmpl	$6, %eax	#, D.28415
	jne	.L1960	#,
.L1959:
	.loc 1 7149 0 discriminator 1
	movl	$2, %eax	#, iftmp.1098
	jmp	.L1961	#
.L1960:
	movl	$1, %eax	#, iftmp.1098
.L1961:
	.loc 1 7149 0 discriminator 3
	jmp	.L1962	#
.L1958:
	.loc 1 7149 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp726
	movslq	%eax, %rdx	# tmp726, tmp725
	movq	%rdx, %rax	# tmp725, tmp727
	addq	%rax, %rax	# tmp727
	addq	%rdx, %rax	# tmp725, tmp727
	salq	$2, %rax	#, tmp727
	addq	%rdx, %rax	# tmp725, tmp727
	salq	$3, %rax	#, tmp728
	addq	$rld+64, %rax	#, tmp729
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _239->mode, D.28414
	cmpb	$18, %al	#, D.28414
	jne	.L1963	#,
	.loc 1 7149 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1101
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L1964	#,
	movl	$2, %eax	#, iftmp.1100
	jmp	.L1975	#
.L1964:
	.loc 1 7149 0 discriminator 2
	movl	$3, %eax	#, iftmp.1100
	jmp	.L1975	#
.L1963:
	movl	-128(%rbp), %eax	# r, tmp731
	movslq	%eax, %rdx	# tmp731, tmp730
	movq	%rdx, %rax	# tmp730, tmp732
	addq	%rax, %rax	# tmp732
	addq	%rdx, %rax	# tmp730, tmp732
	salq	$2, %rax	#, tmp732
	addq	%rdx, %rax	# tmp730, tmp732
	salq	$3, %rax	#, tmp733
	addq	$rld+64, %rax	#, tmp734
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _246->mode, D.28414
	cmpb	$24, %al	#, D.28414
	jne	.L1967	#,
	.loc 1 7149 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1104
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L1968	#,
	movl	$4, %eax	#, iftmp.1103
	jmp	.L1975	#
.L1968:
	.loc 1 7149 0 discriminator 2
	movl	$6, %eax	#, iftmp.1103
	jmp	.L1975	#
.L1967:
	movl	-128(%rbp), %eax	# r, tmp736
	movslq	%eax, %rdx	# tmp736, tmp735
	movq	%rdx, %rax	# tmp735, tmp737
	addq	%rax, %rax	# tmp737
	addq	%rdx, %rax	# tmp735, tmp737
	salq	$2, %rax	#, tmp737
	addq	%rdx, %rax	# tmp735, tmp737
	salq	$3, %rax	#, tmp738
	addq	$rld+64, %rax	#, tmp739
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _253->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28414
	movzbl	%al, %edx	# D.28414, D.28404
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1106
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L1971	#,
	.loc 1 7149 0 discriminator 1
	movl	$8, %eax	#, iftmp.1105
	jmp	.L1972	#
.L1971:
	.loc 1 7149 0 discriminator 2
	movl	$4, %eax	#, iftmp.1105
.L1972:
	.loc 1 7149 0 discriminator 3
	addl	%edx, %eax	# D.28404, D.28404
	subl	$1, %eax	#, D.28404
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1108
	andl	$33554432, %edx	#, D.28404
	testl	%edx, %edx	# D.28404
	je	.L1973	#,
	.loc 1 7149 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1107
	jmp	.L1974	#
.L1973:
	.loc 1 7149 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1107
.L1974:
	.loc 1 7149 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1107
.L1962:
	jmp	.L1975	#
.L1953:
	.loc 1 7149 0 discriminator 2
	movl	$1, %eax	#, iftmp.1096
.L1975:
	.loc 1 7148 0 is_stmt 1
	movl	%eax, -104(%rbp)	# iftmp.1096, nnr
	.loc 1 7152 0
	movl	-124(%rbp), %eax	# i, tmp744
	cltq
	movq	new_spill_reg_store(,%rax,8), %rdx	# new_spill_reg_store, D.28403
	movl	-124(%rbp), %eax	# i, tmp746
	cltq
	movq	%rdx, spill_reg_store(,%rax,8)	# D.28403, spill_reg_store
	.loc 1 7153 0
	movl	-124(%rbp), %eax	# i, tmp748
	cltq
	movq	-40(%rbp), %rdx	# out, tmp749
	movq	%rdx, spill_reg_stored_to(,%rax,8)	# tmp749, spill_reg_stored_to
	.loc 1 7154 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.1109
	movl	-108(%rbp), %edx	# nregno, tmp750
	movslq	%edx, %rdx	# tmp750, D.28406
	salq	$3, %rdx	#, D.28406
	leaq	(%rax,%rdx), %rcx	#, D.28413
	movl	-128(%rbp), %eax	# r, tmp752
	movslq	%eax, %rdx	# tmp752, tmp751
	movq	%rdx, %rax	# tmp751, tmp753
	addq	%rax, %rax	# tmp753
	addq	%rdx, %rax	# tmp751, tmp753
	salq	$2, %rax	#, tmp753
	addq	%rdx, %rax	# tmp751, tmp753
	salq	$3, %rax	#, tmp754
	addq	$rld+64, %rax	#, tmp755
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movq	%rax, (%rcx)	# D.28403, *_289
	.loc 1 7162 0
	cmpl	$52, -108(%rbp)	#, nregno
	jg	.L1976	#,
	.loc 1 7163 0
	movl	$1, -156(%rbp)	#, k
	jmp	.L1977	#
.L1980:
	.loc 1 7164 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.1110
	movl	-156(%rbp), %edx	# k, tmp756
	movl	-108(%rbp), %ecx	# nregno, tmp757
	addl	%ecx, %edx	# tmp757, D.28404
	movslq	%edx, %rdx	# D.28404, D.28406
	salq	$3, %rdx	#, D.28406
	leaq	(%rax,%rdx), %rbx	#, D.28413
	.loc 1 7168 0
	movl	-112(%rbp), %eax	# nr, tmp758
	cmpl	-104(%rbp), %eax	# nnr, tmp758
	jne	.L1978	#,
	.loc 1 7167 0
	movl	-128(%rbp), %eax	# r, tmp760
	movslq	%eax, %rdx	# tmp760, tmp759
	movq	%rdx, %rax	# tmp759, tmp761
	addq	%rax, %rax	# tmp761
	addq	%rdx, %rax	# tmp759, tmp761
	salq	$2, %rax	#, tmp761
	addq	%rdx, %rax	# tmp759, tmp761
	salq	$3, %rax	#, tmp762
	addq	$rld+64, %rax	#, tmp763
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movl	8(%rax), %edx	# _297->fld[0].rtuint, D.28405
	movl	-156(%rbp), %eax	# k, k.1112
	addl	%edx, %eax	# D.28405, D.28405
	.loc 1 7166 0
	movl	%eax, %ecx	# D.28405, D.28404
	movl	-128(%rbp), %eax	# r, tmp765
	movslq	%eax, %rdx	# tmp765, tmp764
	movq	%rdx, %rax	# tmp764, tmp766
	addq	%rax, %rax	# tmp766
	addq	%rdx, %rax	# tmp764, tmp766
	salq	$2, %rax	#, tmp766
	addq	%rdx, %rax	# tmp764, tmp766
	salq	$3, %rax	#, tmp767
	addq	$rld+64, %rax	#, tmp768
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movl	8(%rax), %edx	# _302->fld[0].rtuint, D.28405
	movl	-156(%rbp), %eax	# k, k.1113
	addl	%edx, %eax	# D.28405, D.28405
	movl	%eax, %eax	# D.28405, tmp769
	movl	reg_raw_mode(,%rax,4), %eax	# reg_raw_mode, D.28417
	.loc 1 7168 0
	movl	%ecx, %esi	# D.28404,
	movl	%eax, %edi	# D.28417,
	call	gen_rtx_REG	#
	jmp	.L1979	#
.L1978:
	.loc 1 7168 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.1111
.L1979:
	.loc 1 7165 0 is_stmt 1
	movq	%rax, (%rbx)	# iftmp.1111, *_296
	.loc 1 7163 0
	addl	$1, -156(%rbp)	#, k
.L1977:
	.loc 1 7163 0 is_stmt 0 discriminator 1
	movl	-156(%rbp), %eax	# k, tmp770
	cmpl	-104(%rbp), %eax	# nnr, tmp770
	jl	.L1980	#,
.L1976:
	.loc 1 7171 0 is_stmt 1
	movl	$0, -156(%rbp)	#, k
	jmp	.L1981	#
.L1984:
	.loc 1 7173 0
	movl	-156(%rbp), %eax	# k, tmp771
	movl	-124(%rbp), %edx	# i, tmp772
	addl	%edx, %eax	# tmp772, D.28404
	movl	$1, %edx	#, tmp773
	movl	%eax, %ecx	# D.28404, tmp1137
	salq	%cl, %rdx	# tmp1137, D.28406
	movq	%rdx, %rax	# D.28406, D.28406
	notq	%rax	# D.28406
	movq	%rax, %rdx	# D.28406, D.28406
	movq	reg_reloaded_dead(%rip), %rax	# reg_reloaded_dead, reg_reloaded_dead.1114
	andq	%rdx, %rax	# D.28406, reg_reloaded_dead.1115
	movq	%rax, reg_reloaded_dead(%rip)	# reg_reloaded_dead.1115, reg_reloaded_dead
	.loc 1 7174 0
	movl	-156(%rbp), %eax	# k, tmp774
	movl	-124(%rbp), %edx	# i, tmp775
	leal	(%rdx,%rax), %ecx	#, D.28404
	.loc 1 7177 0
	cmpl	$52, -108(%rbp)	#, nregno
	jg	.L1982	#,
	.loc 1 7175 0
	movl	-112(%rbp), %eax	# nr, tmp776
	cmpl	-104(%rbp), %eax	# nnr, tmp776
	jne	.L1982	#,
	.loc 1 7177 0
	movl	-156(%rbp), %eax	# k, tmp777
	movl	-108(%rbp), %edx	# nregno, tmp778
	addl	%edx, %eax	# tmp778, iftmp.1116
	jmp	.L1983	#
.L1982:
	.loc 1 7177 0 is_stmt 0 discriminator 1
	movl	-108(%rbp), %eax	# nregno, iftmp.1116
.L1983:
	.loc 1 7175 0 is_stmt 1
	movslq	%ecx, %rdx	# D.28404, tmp779
	movl	%eax, reg_reloaded_contents(,%rdx,4)	# iftmp.1116, reg_reloaded_contents
	.loc 1 7178 0
	movl	-156(%rbp), %eax	# k, tmp780
	movl	-124(%rbp), %edx	# i, tmp781
	addl	%edx, %eax	# tmp781, D.28404
	cltq
	movq	-56(%rbp), %rdx	# insn, tmp783
	movq	%rdx, reg_reloaded_insn(,%rax,8)	# tmp783, reg_reloaded_insn
	.loc 1 7179 0
	movl	-156(%rbp), %eax	# k, tmp784
	movl	-124(%rbp), %edx	# i, tmp785
	addl	%edx, %eax	# tmp785, D.28404
	movl	$1, %edx	#, tmp786
	movl	%eax, %ecx	# D.28404, tmp1139
	salq	%cl, %rdx	# tmp1139, D.28406
	movq	reg_reloaded_valid(%rip), %rax	# reg_reloaded_valid, reg_reloaded_valid.1117
	orq	%rdx, %rax	# D.28406, reg_reloaded_valid.1118
	movq	%rax, reg_reloaded_valid(%rip)	# reg_reloaded_valid.1118, reg_reloaded_valid
	.loc 1 7171 0
	addl	$1, -156(%rbp)	#, k
.L1981:
	.loc 1 7171 0 is_stmt 0 discriminator 1
	movl	-156(%rbp), %eax	# k, tmp787
	cmpl	-112(%rbp), %eax	# nr, tmp787
	jl	.L1984	#,
.LBE156:
	.loc 1 7141 0 is_stmt 1
	jmp	.L1985	#
.L1947:
	.loc 1 7186 0
	movl	-128(%rbp), %eax	# r, tmp789
	movslq	%eax, %rdx	# tmp789, tmp788
	movq	%rdx, %rax	# tmp788, tmp790
	addq	%rax, %rax	# tmp790
	addq	%rdx, %rax	# tmp788, tmp790
	salq	$2, %rax	#, tmp790
	addq	%rdx, %rax	# tmp788, tmp790
	salq	$3, %rax	#, tmp791
	addq	$rld+48, %rax	#, tmp792
	movq	(%rax), %rax	# rld[r_130].out_reg, D.28403
	testq	%rax, %rax	# D.28403
	jne	.L1985	#,
	.loc 1 7187 0
	movl	-128(%rbp), %eax	# r, tmp794
	movslq	%eax, %rdx	# tmp794, tmp793
	movq	%rdx, %rax	# tmp793, tmp795
	addq	%rax, %rax	# tmp795
	addq	%rdx, %rax	# tmp793, tmp795
	salq	$2, %rax	#, tmp795
	addq	%rdx, %rax	# tmp793, tmp795
	salq	$3, %rax	#, tmp796
	addq	$rld, %rax	#, tmp797
	movq	(%rax), %rax	# rld[r_130].in, D.28403
	testq	%rax, %rax	# D.28403
	je	.L1985	#,
	.loc 1 7188 0
	movl	-128(%rbp), %eax	# r, tmp799
	movslq	%eax, %rdx	# tmp799, tmp798
	movq	%rdx, %rax	# tmp798, tmp800
	addq	%rax, %rax	# tmp800
	addq	%rdx, %rax	# tmp798, tmp800
	salq	$2, %rax	#, tmp800
	addq	%rdx, %rax	# tmp798, tmp800
	salq	$3, %rax	#, tmp801
	addq	$rld, %rax	#, tmp802
	movq	(%rax), %rax	# rld[r_130].in, D.28403
	movzwl	(%rax), %eax	# _327->code, D.28410
	cmpw	$61, %ax	#, D.28410
	jne	.L1986	#,
	.loc 1 7189 0
	movl	-128(%rbp), %eax	# r, tmp804
	movslq	%eax, %rdx	# tmp804, tmp803
	movq	%rdx, %rax	# tmp803, tmp805
	addq	%rax, %rax	# tmp805
	addq	%rdx, %rax	# tmp803, tmp805
	salq	$2, %rax	#, tmp805
	addq	%rdx, %rax	# tmp803, tmp805
	salq	$3, %rax	#, tmp806
	addq	$rld, %rax	#, tmp807
	movq	(%rax), %rax	# rld[r_130].in, D.28403
	movl	8(%rax), %eax	# _329->fld[0].rtuint, D.28405
	cmpl	$52, %eax	#, D.28405
	jbe	.L1986	#,
	.loc 1 7190 0
	movq	reg_has_output_reload(%rip), %rcx	# reg_has_output_reload, reg_has_output_reload.1119
	movl	-128(%rbp), %eax	# r, tmp809
	movslq	%eax, %rdx	# tmp809, tmp808
	movq	%rdx, %rax	# tmp808, tmp810
	addq	%rax, %rax	# tmp810
	addq	%rdx, %rax	# tmp808, tmp810
	salq	$2, %rax	#, tmp810
	addq	%rdx, %rax	# tmp808, tmp810
	salq	$3, %rax	#, tmp811
	addq	$rld, %rax	#, tmp812
	movq	(%rax), %rax	# rld[r_130].in, D.28403
	movl	8(%rax), %eax	# _332->fld[0].rtuint, D.28405
	movl	%eax, %eax	# D.28405, D.28411
	addq	%rcx, %rax	# reg_has_output_reload.1119, D.28412
	movzbl	(%rax), %eax	# *_335, D.28409
	testb	%al, %al	# D.28409
	je	.L1987	#,
.L1986:
	.loc 1 7191 0
	movl	-128(%rbp), %eax	# r, tmp814
	movslq	%eax, %rdx	# tmp814, tmp813
	movq	%rdx, %rax	# tmp813, tmp815
	addq	%rax, %rax	# tmp815
	addq	%rdx, %rax	# tmp813, tmp815
	salq	$2, %rax	#, tmp815
	addq	%rdx, %rax	# tmp813, tmp815
	salq	$3, %rax	#, tmp816
	addq	$rld+40, %rax	#, tmp817
	movq	(%rax), %rax	# rld[r_130].in_reg, D.28403
	movzwl	(%rax), %eax	# _337->code, D.28410
	cmpw	$61, %ax	#, D.28410
	jne	.L1985	#,
	.loc 1 7192 0
	movq	reg_has_output_reload(%rip), %rcx	# reg_has_output_reload, reg_has_output_reload.1120
	movl	-128(%rbp), %eax	# r, tmp819
	movslq	%eax, %rdx	# tmp819, tmp818
	movq	%rdx, %rax	# tmp818, tmp820
	addq	%rax, %rax	# tmp820
	addq	%rdx, %rax	# tmp818, tmp820
	salq	$2, %rax	#, tmp820
	addq	%rdx, %rax	# tmp818, tmp820
	salq	$3, %rax	#, tmp821
	addq	$rld+40, %rax	#, tmp822
	movq	(%rax), %rax	# rld[r_130].in_reg, D.28403
	movl	8(%rax), %eax	# _340->fld[0].rtuint, D.28405
	movl	%eax, %eax	# D.28405, D.28411
	addq	%rcx, %rax	# reg_has_output_reload.1120, D.28412
	movzbl	(%rax), %eax	# *_343, D.28409
	testb	%al, %al	# D.28409
	jne	.L1985	#,
.L1987:
	.loc 1 7193 0
	movq	-56(%rbp), %rax	# insn, tmp823
	movq	32(%rax), %rcx	# insn_79->fld[3].rtx, D.28403
	movl	-128(%rbp), %eax	# r, tmp825
	movslq	%eax, %rdx	# tmp825, tmp824
	movq	%rdx, %rax	# tmp824, tmp826
	addq	%rax, %rax	# tmp826
	addq	%rdx, %rax	# tmp824, tmp826
	salq	$2, %rax	#, tmp826
	addq	%rdx, %rax	# tmp824, tmp826
	salq	$3, %rax	#, tmp827
	addq	$rld+64, %rax	#, tmp828
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movq	%rcx, %rsi	# D.28403,
	movq	%rax, %rdi	# D.28403,
	call	reg_set_p	#
	testl	%eax, %eax	# D.28404
	jne	.L1985	#,
.LBB157:
	.loc 1 7198 0
	movl	-128(%rbp), %eax	# r, tmp830
	movslq	%eax, %rdx	# tmp830, tmp829
	movq	%rdx, %rax	# tmp829, tmp831
	addq	%rax, %rax	# tmp831
	addq	%rdx, %rax	# tmp829, tmp831
	salq	$2, %rax	#, tmp831
	addq	%rdx, %rax	# tmp829, tmp831
	salq	$3, %rax	#, tmp832
	addq	$rld, %rax	#, tmp833
	movq	(%rax), %rax	# rld[r_130].in, D.28403
	movzwl	(%rax), %eax	# _348->code, D.28410
	cmpw	$61, %ax	#, D.28410
	jne	.L1988	#,
	.loc 1 7199 0
	movl	-128(%rbp), %eax	# r, tmp835
	movslq	%eax, %rdx	# tmp835, tmp834
	movq	%rdx, %rax	# tmp834, tmp836
	addq	%rax, %rax	# tmp836
	addq	%rdx, %rax	# tmp834, tmp836
	salq	$2, %rax	#, tmp836
	addq	%rdx, %rax	# tmp834, tmp836
	salq	$3, %rax	#, tmp837
	addq	$rld, %rax	#, tmp838
	movq	(%rax), %rax	# rld[r_130].in, D.28403
	movl	8(%rax), %eax	# _350->fld[0].rtuint, D.28405
	cmpl	$52, %eax	#, D.28405
	jbe	.L1988	#,
	.loc 1 7200 0
	movl	-128(%rbp), %eax	# r, tmp840
	movslq	%eax, %rdx	# tmp840, tmp839
	movq	%rdx, %rax	# tmp839, tmp841
	addq	%rax, %rax	# tmp841
	addq	%rdx, %rax	# tmp839, tmp841
	salq	$2, %rax	#, tmp841
	addq	%rdx, %rax	# tmp839, tmp841
	salq	$3, %rax	#, tmp842
	addq	$rld, %rax	#, tmp843
	movq	(%rax), %rax	# rld[r_130].in, D.28403
	movl	8(%rax), %eax	# _352->fld[0].rtuint, D.28405
	movl	%eax, -144(%rbp)	# D.28405, nregno
	jmp	.L1989	#
.L1988:
	.loc 1 7201 0
	movl	-128(%rbp), %eax	# r, tmp845
	movslq	%eax, %rdx	# tmp845, tmp844
	movq	%rdx, %rax	# tmp844, tmp846
	addq	%rax, %rax	# tmp846
	addq	%rdx, %rax	# tmp844, tmp846
	salq	$2, %rax	#, tmp846
	addq	%rdx, %rax	# tmp844, tmp846
	salq	$3, %rax	#, tmp847
	addq	$rld+40, %rax	#, tmp848
	movq	(%rax), %rax	# rld[r_130].in_reg, D.28403
	movzwl	(%rax), %eax	# _355->code, D.28410
	cmpw	$61, %ax	#, D.28410
	jne	.L1990	#,
	.loc 1 7202 0
	movl	-128(%rbp), %eax	# r, tmp850
	movslq	%eax, %rdx	# tmp850, tmp849
	movq	%rdx, %rax	# tmp849, tmp851
	addq	%rax, %rax	# tmp851
	addq	%rdx, %rax	# tmp849, tmp851
	salq	$2, %rax	#, tmp851
	addq	%rdx, %rax	# tmp849, tmp851
	salq	$3, %rax	#, tmp852
	addq	$rld+40, %rax	#, tmp853
	movq	(%rax), %rax	# rld[r_130].in_reg, D.28403
	movl	8(%rax), %eax	# _357->fld[0].rtuint, D.28405
	movl	%eax, -144(%rbp)	# D.28405, nregno
	jmp	.L1989	#
.L1990:
	.loc 1 7204 0
	movl	-128(%rbp), %eax	# r, tmp855
	movslq	%eax, %rdx	# tmp855, tmp854
	movq	%rdx, %rax	# tmp854, tmp856
	addq	%rax, %rax	# tmp856
	addq	%rdx, %rax	# tmp854, tmp856
	salq	$2, %rax	#, tmp856
	addq	%rdx, %rax	# tmp854, tmp856
	salq	$3, %rax	#, tmp857
	addq	$rld+40, %rax	#, tmp858
	movq	(%rax), %rax	# rld[r_130].in_reg, D.28403
	movq	8(%rax), %rax	# _360->fld[0].rtx, D.28403
	movl	8(%rax), %eax	# _361->fld[0].rtuint, D.28405
	movl	%eax, -144(%rbp)	# D.28405, nregno
.L1989:
	.loc 1 7207 0
	cmpl	$52, -144(%rbp)	#, nregno
	jg	.L1991	#,
	.loc 1 7207 0 is_stmt 0 discriminator 1
	cmpl	$7, -144(%rbp)	#, nregno
	jle	.L1992	#,
	cmpl	$15, -144(%rbp)	#, nregno
	jle	.L1993	#,
.L1992:
	.loc 1 7207 0 discriminator 2
	cmpl	$20, -144(%rbp)	#, nregno
	jle	.L1994	#,
	.loc 1 7207 0 discriminator 1
	cmpl	$28, -144(%rbp)	#, nregno
	jle	.L1993	#,
.L1994:
	.loc 1 7207 0 discriminator 2
	cmpl	$44, -144(%rbp)	#, nregno
	jle	.L1995	#,
	.loc 1 7207 0 discriminator 1
	cmpl	$52, -144(%rbp)	#, nregno
	jle	.L1993	#,
.L1995:
	.loc 1 7207 0 discriminator 2
	cmpl	$28, -144(%rbp)	#, nregno
	jle	.L1996	#,
	.loc 1 7207 0 discriminator 1
	cmpl	$36, -144(%rbp)	#, nregno
	jg	.L1996	#,
.L1993:
	movl	-128(%rbp), %eax	# r, tmp860
	movslq	%eax, %rdx	# tmp860, tmp859
	movq	%rdx, %rax	# tmp859, tmp861
	addq	%rax, %rax	# tmp861
	addq	%rdx, %rax	# tmp859, tmp861
	salq	$2, %rax	#, tmp861
	addq	%rdx, %rax	# tmp859, tmp861
	salq	$3, %rax	#, tmp862
	addq	$rld+64, %rax	#, tmp863
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _396->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28415
	cmpl	$5, %eax	#, D.28415
	je	.L1997	#,
	.loc 1 7207 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp866
	movslq	%eax, %rdx	# tmp866, tmp865
	movq	%rdx, %rax	# tmp865, tmp867
	addq	%rax, %rax	# tmp867
	addq	%rdx, %rax	# tmp865, tmp867
	salq	$2, %rax	#, tmp867
	addq	%rdx, %rax	# tmp865, tmp867
	salq	$3, %rax	#, tmp868
	addq	$rld+64, %rax	#, tmp869
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _400->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28415
	cmpl	$6, %eax	#, D.28415
	jne	.L1998	#,
.L1997:
	.loc 1 7207 0 discriminator 1
	movl	$2, %eax	#, iftmp.1123
	jmp	.L1999	#
.L1998:
	movl	$1, %eax	#, iftmp.1123
.L1999:
	.loc 1 7207 0 discriminator 3
	jmp	.L2000	#
.L1996:
	.loc 1 7207 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp872
	movslq	%eax, %rdx	# tmp872, tmp871
	movq	%rdx, %rax	# tmp871, tmp873
	addq	%rax, %rax	# tmp873
	addq	%rdx, %rax	# tmp871, tmp873
	salq	$2, %rax	#, tmp873
	addq	%rdx, %rax	# tmp871, tmp873
	salq	$3, %rax	#, tmp874
	addq	$rld+64, %rax	#, tmp875
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _364->mode, D.28414
	cmpb	$18, %al	#, D.28414
	jne	.L2001	#,
	.loc 1 7207 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1126
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L2002	#,
	movl	$2, %eax	#, iftmp.1125
	jmp	.L2013	#
.L2002:
	.loc 1 7207 0 discriminator 2
	movl	$3, %eax	#, iftmp.1125
	jmp	.L2013	#
.L2001:
	movl	-128(%rbp), %eax	# r, tmp877
	movslq	%eax, %rdx	# tmp877, tmp876
	movq	%rdx, %rax	# tmp876, tmp878
	addq	%rax, %rax	# tmp878
	addq	%rdx, %rax	# tmp876, tmp878
	salq	$2, %rax	#, tmp878
	addq	%rdx, %rax	# tmp876, tmp878
	salq	$3, %rax	#, tmp879
	addq	$rld+64, %rax	#, tmp880
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _371->mode, D.28414
	cmpb	$24, %al	#, D.28414
	jne	.L2005	#,
	.loc 1 7207 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1129
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L2006	#,
	movl	$4, %eax	#, iftmp.1128
	jmp	.L2013	#
.L2006:
	.loc 1 7207 0 discriminator 2
	movl	$6, %eax	#, iftmp.1128
	jmp	.L2013	#
.L2005:
	movl	-128(%rbp), %eax	# r, tmp882
	movslq	%eax, %rdx	# tmp882, tmp881
	movq	%rdx, %rax	# tmp881, tmp883
	addq	%rax, %rax	# tmp883
	addq	%rdx, %rax	# tmp881, tmp883
	salq	$2, %rax	#, tmp883
	addq	%rdx, %rax	# tmp881, tmp883
	salq	$3, %rax	#, tmp884
	addq	$rld+64, %rax	#, tmp885
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movzbl	2(%rax), %eax	# _378->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28414
	movzbl	%al, %edx	# D.28414, D.28404
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1131
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L2009	#,
	.loc 1 7207 0 discriminator 1
	movl	$8, %eax	#, iftmp.1130
	jmp	.L2010	#
.L2009:
	.loc 1 7207 0 discriminator 2
	movl	$4, %eax	#, iftmp.1130
.L2010:
	.loc 1 7207 0 discriminator 3
	addl	%edx, %eax	# D.28404, D.28404
	subl	$1, %eax	#, D.28404
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1133
	andl	$33554432, %edx	#, D.28404
	testl	%edx, %edx	# D.28404
	je	.L2011	#,
	.loc 1 7207 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1132
	jmp	.L2012	#
.L2011:
	.loc 1 7207 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1132
.L2012:
	.loc 1 7207 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1132
.L2000:
	jmp	.L2013	#
.L1991:
	.loc 1 7207 0 discriminator 2
	movl	$1, %eax	#, iftmp.1121
.L2013:
	.loc 1 7206 0 is_stmt 1
	movl	%eax, -100(%rbp)	# iftmp.1121, nnr
	.loc 1 7210 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.1134
	movl	-144(%rbp), %edx	# nregno, tmp889
	movslq	%edx, %rdx	# tmp889, D.28406
	salq	$3, %rdx	#, D.28406
	leaq	(%rax,%rdx), %rcx	#, D.28413
	movl	-128(%rbp), %eax	# r, tmp891
	movslq	%eax, %rdx	# tmp891, tmp890
	movq	%rdx, %rax	# tmp890, tmp892
	addq	%rax, %rax	# tmp892
	addq	%rdx, %rax	# tmp890, tmp892
	salq	$2, %rax	#, tmp892
	addq	%rdx, %rax	# tmp890, tmp892
	salq	$3, %rax	#, tmp893
	addq	$rld+64, %rax	#, tmp894
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movq	%rax, (%rcx)	# D.28403, *_413
	.loc 1 7212 0
	cmpl	$52, -144(%rbp)	#, nregno
	jg	.L2014	#,
	.loc 1 7213 0
	movl	$1, -156(%rbp)	#, k
	jmp	.L2015	#
.L2018:
	.loc 1 7214 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.1135
	movl	-156(%rbp), %edx	# k, tmp895
	movl	-144(%rbp), %ecx	# nregno, tmp896
	addl	%ecx, %edx	# tmp896, D.28404
	movslq	%edx, %rdx	# D.28404, D.28406
	salq	$3, %rdx	#, D.28406
	leaq	(%rax,%rdx), %rbx	#, D.28413
	.loc 1 7218 0
	movl	-112(%rbp), %eax	# nr, tmp897
	cmpl	-100(%rbp), %eax	# nnr, tmp897
	jne	.L2016	#,
	.loc 1 7217 0
	movl	-128(%rbp), %eax	# r, tmp899
	movslq	%eax, %rdx	# tmp899, tmp898
	movq	%rdx, %rax	# tmp898, tmp900
	addq	%rax, %rax	# tmp900
	addq	%rdx, %rax	# tmp898, tmp900
	salq	$2, %rax	#, tmp900
	addq	%rdx, %rax	# tmp898, tmp900
	salq	$3, %rax	#, tmp901
	addq	$rld+64, %rax	#, tmp902
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movl	8(%rax), %edx	# _421->fld[0].rtuint, D.28405
	movl	-156(%rbp), %eax	# k, k.1137
	addl	%edx, %eax	# D.28405, D.28405
	.loc 1 7216 0
	movl	%eax, %ecx	# D.28405, D.28404
	movl	-128(%rbp), %eax	# r, tmp904
	movslq	%eax, %rdx	# tmp904, tmp903
	movq	%rdx, %rax	# tmp903, tmp905
	addq	%rax, %rax	# tmp905
	addq	%rdx, %rax	# tmp903, tmp905
	salq	$2, %rax	#, tmp905
	addq	%rdx, %rax	# tmp903, tmp905
	salq	$3, %rax	#, tmp906
	addq	$rld+64, %rax	#, tmp907
	movq	(%rax), %rax	# rld[r_130].reg_rtx, D.28403
	movl	8(%rax), %edx	# _426->fld[0].rtuint, D.28405
	movl	-156(%rbp), %eax	# k, k.1138
	addl	%edx, %eax	# D.28405, D.28405
	movl	%eax, %eax	# D.28405, tmp908
	movl	reg_raw_mode(,%rax,4), %eax	# reg_raw_mode, D.28417
	.loc 1 7218 0
	movl	%ecx, %esi	# D.28404,
	movl	%eax, %edi	# D.28417,
	call	gen_rtx_REG	#
	jmp	.L2017	#
.L2016:
	.loc 1 7218 0 is_stmt 0 discriminator 1
	movl	$0, %eax	#, iftmp.1136
.L2017:
	.loc 1 7215 0 is_stmt 1
	movq	%rax, (%rbx)	# iftmp.1136, *_420
	.loc 1 7213 0
	addl	$1, -156(%rbp)	#, k
.L2015:
	.loc 1 7213 0 is_stmt 0 discriminator 1
	movl	-156(%rbp), %eax	# k, tmp909
	cmpl	-100(%rbp), %eax	# nnr, tmp909
	jl	.L2018	#,
.L2014:
	.loc 1 7224 0 is_stmt 1
	movl	-128(%rbp), %eax	# r, tmp911
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28409
	testb	%al, %al	# D.28409
	je	.L2019	#,
	.loc 1 7225 0
	movl	-128(%rbp), %eax	# r, tmp913
	movslq	%eax, %rdx	# tmp913, tmp912
	movq	%rdx, %rax	# tmp912, tmp914
	addq	%rax, %rax	# tmp914
	addq	%rdx, %rax	# tmp912, tmp914
	salq	$2, %rax	#, tmp914
	addq	%rdx, %rax	# tmp912, tmp914
	salq	$3, %rax	#, tmp915
	addq	$rld+8, %rax	#, tmp916
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	testq	%rax, %rax	# D.28403
	je	.L2020	#,
	.loc 1 7225 0 is_stmt 0 discriminator 1
	movl	-128(%rbp), %eax	# r, tmp918
	movslq	%eax, %rdx	# tmp918, tmp917
	movq	%rdx, %rax	# tmp917, tmp919
	addq	%rax, %rax	# tmp919
	addq	%rdx, %rax	# tmp917, tmp919
	salq	$2, %rax	#, tmp919
	addq	%rdx, %rax	# tmp917, tmp919
	salq	$3, %rax	#, tmp920
	addq	$rld+48, %rax	#, tmp921
	movq	(%rax), %rax	# rld[r_130].out_reg, D.28403
	testq	%rax, %rax	# D.28403
	jne	.L2020	#,
.L2019:
	.loc 1 7226 0 is_stmt 1
	movl	-124(%rbp), %eax	# i, tmp923
	cltq
	movq	$0, spill_reg_store(,%rax,8)	#, spill_reg_store
.L2020:
	.loc 1 7228 0
	movl	$0, -156(%rbp)	#, k
	jmp	.L2021	#
.L2024:
	.loc 1 7230 0
	movl	-156(%rbp), %eax	# k, tmp924
	movl	-124(%rbp), %edx	# i, tmp925
	addl	%edx, %eax	# tmp925, D.28404
	movl	$1, %edx	#, tmp926
	movl	%eax, %ecx	# D.28404, tmp1142
	salq	%cl, %rdx	# tmp1142, D.28406
	movq	%rdx, %rax	# D.28406, D.28406
	notq	%rax	# D.28406
	movq	%rax, %rdx	# D.28406, D.28406
	movq	reg_reloaded_dead(%rip), %rax	# reg_reloaded_dead, reg_reloaded_dead.1139
	andq	%rdx, %rax	# D.28406, reg_reloaded_dead.1140
	movq	%rax, reg_reloaded_dead(%rip)	# reg_reloaded_dead.1140, reg_reloaded_dead
	.loc 1 7231 0
	movl	-156(%rbp), %eax	# k, tmp927
	movl	-124(%rbp), %edx	# i, tmp928
	leal	(%rdx,%rax), %ecx	#, D.28404
	.loc 1 7234 0
	cmpl	$52, -144(%rbp)	#, nregno
	jg	.L2022	#,
	.loc 1 7232 0
	movl	-112(%rbp), %eax	# nr, tmp929
	cmpl	-100(%rbp), %eax	# nnr, tmp929
	jne	.L2022	#,
	.loc 1 7234 0
	movl	-156(%rbp), %eax	# k, tmp930
	movl	-144(%rbp), %edx	# nregno, tmp931
	addl	%edx, %eax	# tmp931, iftmp.1141
	jmp	.L2023	#
.L2022:
	.loc 1 7234 0 is_stmt 0 discriminator 1
	movl	-144(%rbp), %eax	# nregno, iftmp.1141
.L2023:
	.loc 1 7232 0 is_stmt 1
	movslq	%ecx, %rdx	# D.28404, tmp932
	movl	%eax, reg_reloaded_contents(,%rdx,4)	# iftmp.1141, reg_reloaded_contents
	.loc 1 7235 0
	movl	-156(%rbp), %eax	# k, tmp933
	movl	-124(%rbp), %edx	# i, tmp934
	addl	%edx, %eax	# tmp934, D.28404
	cltq
	movq	-56(%rbp), %rdx	# insn, tmp936
	movq	%rdx, reg_reloaded_insn(,%rax,8)	# tmp936, reg_reloaded_insn
	.loc 1 7236 0
	movl	-156(%rbp), %eax	# k, tmp937
	movl	-124(%rbp), %edx	# i, tmp938
	addl	%edx, %eax	# tmp938, D.28404
	movl	$1, %edx	#, tmp939
	movl	%eax, %ecx	# D.28404, tmp1144
	salq	%cl, %rdx	# tmp1144, D.28406
	movq	reg_reloaded_valid(%rip), %rax	# reg_reloaded_valid, reg_reloaded_valid.1142
	orq	%rdx, %rax	# D.28406, reg_reloaded_valid.1143
	movq	%rax, reg_reloaded_valid(%rip)	# reg_reloaded_valid.1143, reg_reloaded_valid
	.loc 1 7228 0
	addl	$1, -156(%rbp)	#, k
.L2021:
	.loc 1 7228 0 is_stmt 0 discriminator 1
	movl	-156(%rbp), %eax	# k, tmp940
	cmpl	-112(%rbp), %eax	# nr, tmp940
	jl	.L2024	#,
.L1985:
.LBE157:
	jmp	.L1918	#
.L1944:
	.loc 1 7243 0 is_stmt 1
	cmpl	$0, -152(%rbp)	#, part_reaches_end
	je	.L1918	#,
	.loc 1 7245 0
	movl	$0, -156(%rbp)	#, k
	jmp	.L2025	#
.L2027:
	.loc 1 7246 0
	movl	-128(%rbp), %eax	# r, tmp942
	movslq	%eax, %rdx	# tmp942, tmp941
	movq	%rdx, %rax	# tmp941, tmp943
	addq	%rax, %rax	# tmp943
	addq	%rdx, %rax	# tmp941, tmp943
	salq	$2, %rax	#, tmp943
	addq	%rdx, %rax	# tmp941, tmp943
	salq	$3, %rax	#, tmp944
	addq	$rld+80, %rax	#, tmp945
	movl	12(%rax), %esi	# rld[r_130].when_needed, D.28416
	movl	-128(%rbp), %eax	# r, tmp947
	movslq	%eax, %rdx	# tmp947, tmp946
	movq	%rdx, %rax	# tmp946, tmp948
	addq	%rax, %rax	# tmp948
	addq	%rdx, %rax	# tmp946, tmp948
	salq	$2, %rax	#, tmp948
	addq	%rdx, %rax	# tmp946, tmp948
	salq	$3, %rax	#, tmp949
	addq	$rld+64, %rax	#, tmp950
	movl	8(%rax), %ecx	# rld[r_130].opnum, D.28404
	movl	-156(%rbp), %eax	# k, tmp951
	movl	-124(%rbp), %edx	# i, tmp952
	addl	%edx, %eax	# tmp952, D.28404
	movl	%esi, %edx	# D.28416,
	movl	%ecx, %esi	# D.28404,
	movl	%eax, %edi	# D.28405,
	call	reload_reg_reaches_end_p	#
	testl	%eax, %eax	# D.28404
	je	.L2026	#,
	.loc 1 7249 0
	movl	-156(%rbp), %eax	# k, tmp953
	movl	-124(%rbp), %edx	# i, tmp954
	addl	%edx, %eax	# tmp954, D.28404
	movl	$1, %edx	#, tmp955
	movl	%eax, %ecx	# D.28404, tmp1146
	salq	%cl, %rdx	# tmp1146, D.28406
	movq	%rdx, %rax	# D.28406, D.28406
	notq	%rax	# D.28406
	movq	%rax, %rdx	# D.28406, D.28406
	movq	reg_reloaded_valid(%rip), %rax	# reg_reloaded_valid, reg_reloaded_valid.1144
	andq	%rdx, %rax	# D.28406, reg_reloaded_valid.1145
	movq	%rax, reg_reloaded_valid(%rip)	# reg_reloaded_valid.1145, reg_reloaded_valid
.L2026:
	.loc 1 7245 0
	addl	$1, -156(%rbp)	#, k
.L2025:
	.loc 1 7245 0 is_stmt 0 discriminator 1
	movl	-156(%rbp), %eax	# k, tmp956
	cmpl	-112(%rbp), %eax	# nr, tmp956
	jl	.L2027	#,
.L1918:
.LBE155:
	.loc 1 7261 0 is_stmt 1
	cmpl	$0, -124(%rbp)	#, i
	jns	.L2028	#,
	.loc 1 7261 0 is_stmt 0 discriminator 1
	movl	-128(%rbp), %eax	# r, tmp958
	movslq	%eax, %rdx	# tmp958, tmp957
	movq	%rdx, %rax	# tmp957, tmp959
	addq	%rax, %rax	# tmp959
	addq	%rdx, %rax	# tmp957, tmp959
	salq	$2, %rax	#, tmp959
	addq	%rdx, %rax	# tmp957, tmp959
	salq	$3, %rax	#, tmp960
	addq	$rld+8, %rax	#, tmp961
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	testq	%rax, %rax	# D.28403
	je	.L2028	#,
	.loc 1 7262 0 is_stmt 1
	movl	-128(%rbp), %eax	# r, tmp963
	movslq	%eax, %rdx	# tmp963, tmp962
	movq	%rdx, %rax	# tmp962, tmp964
	addq	%rax, %rax	# tmp964
	addq	%rdx, %rax	# tmp962, tmp964
	salq	$2, %rax	#, tmp964
	addq	%rdx, %rax	# tmp962, tmp964
	salq	$3, %rax	#, tmp965
	addq	$rld+8, %rax	#, tmp966
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	movzwl	(%rax), %eax	# _465->code, D.28410
	cmpw	$61, %ax	#, D.28410
	je	.L2029	#,
	.loc 1 7263 0
	movl	-128(%rbp), %eax	# r, tmp968
	movslq	%eax, %rdx	# tmp968, tmp967
	movq	%rdx, %rax	# tmp967, tmp969
	addq	%rax, %rax	# tmp969
	addq	%rdx, %rax	# tmp967, tmp969
	salq	$2, %rax	#, tmp969
	addq	%rdx, %rax	# tmp967, tmp969
	salq	$3, %rax	#, tmp970
	addq	$rld+8, %rax	#, tmp971
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	movzwl	(%rax), %eax	# _467->code, D.28410
	cmpw	$66, %ax	#, D.28410
	jne	.L2028	#,
	.loc 1 7264 0
	movl	-128(%rbp), %eax	# r, tmp973
	movslq	%eax, %rdx	# tmp973, tmp972
	movq	%rdx, %rax	# tmp972, tmp974
	addq	%rax, %rax	# tmp974
	addq	%rdx, %rax	# tmp972, tmp974
	salq	$2, %rax	#, tmp974
	addq	%rdx, %rax	# tmp972, tmp974
	salq	$3, %rax	#, tmp975
	addq	$rld+48, %rax	#, tmp976
	movq	(%rax), %rax	# rld[r_130].out_reg, D.28403
	movzwl	(%rax), %eax	# _469->code, D.28410
	cmpw	$61, %ax	#, D.28410
	jne	.L2028	#,
.L2029:
.LBB158:
	.loc 1 7266 0
	movl	-128(%rbp), %eax	# r, tmp978
	movslq	%eax, %rdx	# tmp978, tmp977
	movq	%rdx, %rax	# tmp977, tmp979
	addq	%rax, %rax	# tmp979
	addq	%rdx, %rax	# tmp977, tmp979
	salq	$2, %rax	#, tmp979
	addq	%rdx, %rax	# tmp977, tmp979
	salq	$3, %rax	#, tmp980
	addq	$rld+8, %rax	#, tmp981
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	movzwl	(%rax), %eax	# _471->code, D.28410
	.loc 1 7267 0
	cmpw	$61, %ax	#, D.28410
	jne	.L2030	#,
	.loc 1 7267 0 is_stmt 0 discriminator 1
	movl	-128(%rbp), %eax	# r, tmp983
	movslq	%eax, %rdx	# tmp983, tmp982
	movq	%rdx, %rax	# tmp982, tmp984
	addq	%rax, %rax	# tmp984
	addq	%rdx, %rax	# tmp982, tmp984
	salq	$2, %rax	#, tmp984
	addq	%rdx, %rax	# tmp982, tmp984
	salq	$3, %rax	#, tmp985
	addq	$rld+8, %rax	#, tmp986
	movq	(%rax), %rax	# rld[r_130].out, iftmp.1146
	jmp	.L2031	#
.L2030:
	.loc 1 7267 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp988
	movslq	%eax, %rdx	# tmp988, tmp987
	movq	%rdx, %rax	# tmp987, tmp989
	addq	%rax, %rax	# tmp989
	addq	%rdx, %rax	# tmp987, tmp989
	salq	$2, %rax	#, tmp989
	addq	%rdx, %rax	# tmp987, tmp989
	salq	$3, %rax	#, tmp990
	addq	$rld+48, %rax	#, tmp991
	movq	(%rax), %rax	# rld[r_130].out_reg, iftmp.1146
.L2031:
	.loc 1 7266 0 is_stmt 1
	movq	%rax, -32(%rbp)	# iftmp.1146, out
	.loc 1 7268 0
	movq	-32(%rbp), %rax	# out, tmp992
	movl	8(%rax), %eax	# out_475->fld[0].rtuint, D.28405
	movl	%eax, -96(%rbp)	# D.28405, nregno
	.loc 1 7269 0
	cmpl	$52, -96(%rbp)	#, nregno
	jle	.L2032	#,
.LBB159:
	.loc 1 7271 0
	movq	$0, -72(%rbp)	#, store_insn
	.loc 1 7273 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.1147
	movl	-96(%rbp), %edx	# nregno, tmp993
	movslq	%edx, %rdx	# tmp993, D.28406
	salq	$3, %rdx	#, D.28406
	addq	%rdx, %rax	# D.28406, D.28413
	movq	$0, (%rax)	#, *_482
	.loc 1 7278 0
	movl	-128(%rbp), %eax	# r, tmp995
	movslq	%eax, %rdx	# tmp995, tmp994
	movq	%rdx, %rax	# tmp994, tmp996
	addq	%rax, %rax	# tmp996
	addq	%rdx, %rax	# tmp994, tmp996
	salq	$2, %rax	#, tmp996
	addq	%rdx, %rax	# tmp994, tmp996
	salq	$3, %rax	#, tmp997
	addq	$rld+64, %rax	#, tmp998
	movq	(%rax), %rax	# rld[r_130].reg_rtx, tmp999
	movq	%rax, -80(%rbp)	# tmp999, src_reg
	.loc 1 7282 0
	cmpq	$0, -80(%rbp)	#, src_reg
	jne	.L2033	#,
.LBB160:
	.loc 1 7284 0
	movq	-56(%rbp), %rax	# insn, tmp1000
	movzwl	(%rax), %eax	# insn_79->code, D.28410
	movzwl	%ax, %eax	# D.28410, D.28404
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28409
	cmpb	$105, %al	#, D.28409
	jne	.L2034	#,
	.loc 1 7284 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# insn, tmp1002
	movq	32(%rax), %rax	# insn_79->fld[3].rtx, D.28403
	movzwl	(%rax), %eax	# _487->code, D.28410
	cmpw	$47, %ax	#, D.28410
	jne	.L2035	#,
	.loc 1 7284 0 discriminator 3
	movq	-56(%rbp), %rax	# insn, tmp1003
	movq	32(%rax), %rax	# insn_79->fld[3].rtx, iftmp.1149
	jmp	.L2037	#
.L2035:
	.loc 1 7284 0 discriminator 4
	movq	-56(%rbp), %rax	# insn, tmp1004
	movq	32(%rax), %rdx	# insn_79->fld[3].rtx, D.28403
	movq	-56(%rbp), %rax	# insn, tmp1005
	movq	%rdx, %rsi	# D.28403,
	movq	%rax, %rdi	# tmp1005,
	call	single_set_2	#
	jmp	.L2037	#
.L2034:
	.loc 1 7284 0 discriminator 2
	movl	$0, %eax	#, iftmp.1148
.L2037:
	.loc 1 7284 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.1148, set
	.loc 1 7285 0 is_stmt 1 discriminator 5
	cmpq	$0, -24(%rbp)	#, set
	je	.L2038	#,
	.loc 1 7285 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# set, tmp1006
	movq	8(%rax), %rcx	# set_494->fld[0].rtx, D.28403
	movl	-128(%rbp), %eax	# r, tmp1008
	movslq	%eax, %rdx	# tmp1008, tmp1007
	movq	%rdx, %rax	# tmp1007, tmp1009
	addq	%rax, %rax	# tmp1009
	addq	%rdx, %rax	# tmp1007, tmp1009
	salq	$2, %rax	#, tmp1009
	addq	%rdx, %rax	# tmp1007, tmp1009
	salq	$3, %rax	#, tmp1010
	addq	$rld+8, %rax	#, tmp1011
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	cmpq	%rax, %rcx	# D.28403, D.28403
	jne	.L2038	#,
.LBB161:
	.loc 1 7289 0 is_stmt 1
	movq	-24(%rbp), %rax	# set, tmp1012
	movq	16(%rax), %rax	# set_494->fld[1].rtx, tmp1013
	movq	%rax, -80(%rbp)	# tmp1013, src_reg
	.loc 1 7290 0
	movq	-56(%rbp), %rax	# insn, tmp1014
	movq	%rax, -72(%rbp)	# tmp1014, store_insn
	.loc 1 7291 0
	movl	$0, -140(%rbp)	#, k
	jmp	.L2039	#
.L2041:
	.loc 1 7293 0
	movl	-140(%rbp), %eax	# k, tmp1016
	movslq	%eax, %rdx	# tmp1016, tmp1015
	movq	%rdx, %rax	# tmp1015, tmp1017
	addq	%rax, %rax	# tmp1017
	addq	%rdx, %rax	# tmp1015, tmp1017
	salq	$2, %rax	#, tmp1017
	addq	%rdx, %rax	# tmp1015, tmp1017
	salq	$3, %rax	#, tmp1018
	addq	$rld, %rax	#, tmp1019
	movq	(%rax), %rax	# rld[k_23].in, D.28403
	cmpq	-80(%rbp), %rax	# src_reg, D.28403
	jne	.L2040	#,
	.loc 1 7295 0
	movl	-140(%rbp), %eax	# k, tmp1021
	movslq	%eax, %rdx	# tmp1021, tmp1020
	movq	%rdx, %rax	# tmp1020, tmp1022
	addq	%rax, %rax	# tmp1022
	addq	%rdx, %rax	# tmp1020, tmp1022
	salq	$2, %rax	#, tmp1022
	addq	%rdx, %rax	# tmp1020, tmp1022
	salq	$3, %rax	#, tmp1023
	addq	$rld+64, %rax	#, tmp1024
	movq	(%rax), %rax	# rld[k_23].reg_rtx, tmp1025
	movq	%rax, -80(%rbp)	# tmp1025, src_reg
	.loc 1 7296 0
	jmp	.L2038	#
.L2040:
	.loc 1 7291 0
	addl	$1, -140(%rbp)	#, k
.L2039:
	.loc 1 7291 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1150
	cmpl	%eax, -140(%rbp)	# n_reloads.1150, k
	jl	.L2041	#,
.L2038:
.LBE161:
.LBE160:
	jmp	.L2042	#
.L2033:
	.loc 1 7302 0 is_stmt 1
	movq	-80(%rbp), %rax	# src_reg, tmp1026
	movl	8(%rax), %eax	# src_reg_483->fld[0].rtuint, D.28405
	movl	%eax, %eax	# D.28405, tmp1027
	movq	new_spill_reg_store(,%rax,8), %rax	# new_spill_reg_store, tmp1028
	movq	%rax, -72(%rbp)	# tmp1028, store_insn
.L2042:
	.loc 1 7303 0
	cmpq	$0, -80(%rbp)	#, src_reg
	je	.L2043	#,
	.loc 1 7303 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# src_reg, tmp1029
	movzwl	(%rax), %eax	# src_reg_20->code, D.28410
	cmpw	$61, %ax	#, D.28410
	jne	.L2043	#,
	.loc 1 7304 0 is_stmt 1
	movq	-80(%rbp), %rax	# src_reg, tmp1030
	movl	8(%rax), %eax	# src_reg_20->fld[0].rtuint, D.28405
	cmpl	$52, %eax	#, D.28405
	ja	.L2043	#,
.LBB162:
	.loc 1 7306 0
	movq	-80(%rbp), %rax	# src_reg, tmp1031
	movl	8(%rax), %eax	# src_reg_20->fld[0].rtuint, D.28405
	movl	%eax, -92(%rbp)	# D.28405, src_regno
	.loc 1 7307 0
	cmpl	$7, -92(%rbp)	#, src_regno
	jle	.L2044	#,
	.loc 1 7307 0 is_stmt 0 discriminator 1
	cmpl	$15, -92(%rbp)	#, src_regno
	jle	.L2045	#,
.L2044:
	.loc 1 7307 0 discriminator 2
	cmpl	$20, -92(%rbp)	#, src_regno
	jle	.L2046	#,
	.loc 1 7307 0 discriminator 1
	cmpl	$28, -92(%rbp)	#, src_regno
	jle	.L2045	#,
.L2046:
	.loc 1 7307 0 discriminator 2
	cmpl	$44, -92(%rbp)	#, src_regno
	jle	.L2047	#,
	.loc 1 7307 0 discriminator 1
	cmpl	$52, -92(%rbp)	#, src_regno
	jle	.L2045	#,
.L2047:
	.loc 1 7307 0 discriminator 2
	cmpl	$28, -92(%rbp)	#, src_regno
	jle	.L2048	#,
	.loc 1 7307 0 discriminator 1
	cmpl	$36, -92(%rbp)	#, src_regno
	jg	.L2048	#,
.L2045:
	movl	-128(%rbp), %eax	# r, tmp1033
	movslq	%eax, %rdx	# tmp1033, tmp1032
	movq	%rdx, %rax	# tmp1032, tmp1034
	addq	%rax, %rax	# tmp1034
	addq	%rdx, %rax	# tmp1032, tmp1034
	salq	$2, %rax	#, tmp1034
	addq	%rdx, %rax	# tmp1032, tmp1034
	salq	$3, %rax	#, tmp1035
	addq	$rld+16, %rax	#, tmp1036
	movl	12(%rax), %eax	# rld[r_130].mode, D.28417
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28415
	cmpl	$5, %eax	#, D.28415
	je	.L2049	#,
	.loc 1 7307 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp1039
	movslq	%eax, %rdx	# tmp1039, tmp1038
	movq	%rdx, %rax	# tmp1038, tmp1040
	addq	%rax, %rax	# tmp1040
	addq	%rdx, %rax	# tmp1038, tmp1040
	salq	$2, %rax	#, tmp1040
	addq	%rdx, %rax	# tmp1038, tmp1040
	salq	$3, %rax	#, tmp1041
	addq	$rld+16, %rax	#, tmp1042
	movl	12(%rax), %eax	# rld[r_130].mode, D.28417
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28415
	cmpl	$6, %eax	#, D.28415
	jne	.L2050	#,
.L2049:
	.loc 1 7307 0 discriminator 1
	movl	$2, %eax	#, iftmp.1152
	jmp	.L2051	#
.L2050:
	movl	$1, %eax	#, iftmp.1152
.L2051:
	.loc 1 7307 0 discriminator 3
	jmp	.L2052	#
.L2048:
	.loc 1 7307 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp1045
	movslq	%eax, %rdx	# tmp1045, tmp1044
	movq	%rdx, %rax	# tmp1044, tmp1046
	addq	%rax, %rax	# tmp1046
	addq	%rdx, %rax	# tmp1044, tmp1046
	salq	$2, %rax	#, tmp1046
	addq	%rdx, %rax	# tmp1044, tmp1046
	salq	$3, %rax	#, tmp1047
	addq	$rld+16, %rax	#, tmp1048
	movl	12(%rax), %eax	# rld[r_130].mode, D.28417
	cmpl	$18, %eax	#, D.28417
	jne	.L2053	#,
	.loc 1 7307 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1155
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L2054	#,
	movl	$2, %eax	#, iftmp.1154
	jmp	.L2052	#
.L2054:
	.loc 1 7307 0 discriminator 2
	movl	$3, %eax	#, iftmp.1154
	jmp	.L2052	#
.L2053:
	movl	-128(%rbp), %eax	# r, tmp1050
	movslq	%eax, %rdx	# tmp1050, tmp1049
	movq	%rdx, %rax	# tmp1049, tmp1051
	addq	%rax, %rax	# tmp1051
	addq	%rdx, %rax	# tmp1049, tmp1051
	salq	$2, %rax	#, tmp1051
	addq	%rdx, %rax	# tmp1049, tmp1051
	salq	$3, %rax	#, tmp1052
	addq	$rld+16, %rax	#, tmp1053
	movl	12(%rax), %eax	# rld[r_130].mode, D.28417
	cmpl	$24, %eax	#, D.28417
	jne	.L2057	#,
	.loc 1 7307 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1158
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L2058	#,
	movl	$4, %eax	#, iftmp.1157
	jmp	.L2052	#
.L2058:
	.loc 1 7307 0 discriminator 2
	movl	$6, %eax	#, iftmp.1157
	jmp	.L2052	#
.L2057:
	movl	-128(%rbp), %eax	# r, tmp1055
	movslq	%eax, %rdx	# tmp1055, tmp1054
	movq	%rdx, %rax	# tmp1054, tmp1056
	addq	%rax, %rax	# tmp1056
	addq	%rdx, %rax	# tmp1054, tmp1056
	salq	$2, %rax	#, tmp1056
	addq	%rdx, %rax	# tmp1054, tmp1056
	salq	$3, %rax	#, tmp1057
	addq	$rld+16, %rax	#, tmp1058
	movl	12(%rax), %eax	# rld[r_130].mode, D.28417
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28414
	movzbl	%al, %edx	# D.28414, D.28404
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1160
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L2061	#,
	.loc 1 7307 0 discriminator 1
	movl	$8, %eax	#, iftmp.1159
	jmp	.L2062	#
.L2061:
	.loc 1 7307 0 discriminator 2
	movl	$4, %eax	#, iftmp.1159
.L2062:
	.loc 1 7307 0 discriminator 3
	addl	%edx, %eax	# D.28404, D.28404
	subl	$1, %eax	#, D.28404
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1162
	andl	$33554432, %edx	#, D.28404
	testl	%edx, %edx	# D.28404
	je	.L2063	#,
	.loc 1 7307 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1161
	jmp	.L2064	#
.L2063:
	.loc 1 7307 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1161
.L2064:
	.loc 1 7307 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1161
.L2052:
	movl	%eax, -136(%rbp)	# iftmp.1151, nr
	.loc 1 7312 0 is_stmt 1 discriminator 3
	movl	-92(%rbp), %edx	# src_regno, src_regno.1163
	movq	-56(%rbp), %rax	# insn, tmp1062
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp1062,
	call	find_regno_note	#
	movq	%rax, -64(%rbp)	# tmp1063, note
	.loc 1 7313 0 discriminator 3
	cmpq	$0, -64(%rbp)	#, note
	jne	.L2065	#,
	.loc 1 7313 0 is_stmt 0 discriminator 1
	cmpq	$0, -72(%rbp)	#, store_insn
	je	.L2065	#,
	.loc 1 7314 0 is_stmt 1
	movl	-92(%rbp), %edx	# src_regno, src_regno.1164
	movq	-72(%rbp), %rax	# store_insn, tmp1064
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp1064,
	call	find_regno_note	#
	movq	%rax, -64(%rbp)	# tmp1065, note
	.loc 1 7315 0
	jmp	.L2066	#
.L2065:
	jmp	.L2066	#
.L2068:
	.loc 1 7317 0
	movl	-136(%rbp), %eax	# nr, tmp1066
	movl	-92(%rbp), %edx	# src_regno, tmp1067
	addl	%edx, %eax	# tmp1067, D.28404
	cltq
	movq	-72(%rbp), %rdx	# store_insn, tmp1069
	movq	%rdx, spill_reg_store(,%rax,8)	# tmp1069, spill_reg_store
	.loc 1 7318 0
	movl	-136(%rbp), %eax	# nr, tmp1070
	movl	-92(%rbp), %edx	# src_regno, tmp1071
	addl	%edx, %eax	# tmp1071, D.28404
	cltq
	movq	-32(%rbp), %rdx	# out, tmp1073
	movq	%rdx, spill_reg_stored_to(,%rax,8)	# tmp1073, spill_reg_stored_to
	.loc 1 7319 0
	movl	-136(%rbp), %eax	# nr, tmp1074
	movl	-92(%rbp), %edx	# src_regno, tmp1075
	addl	%edx, %eax	# tmp1075, D.28404
	cltq
	movl	-96(%rbp), %edx	# nregno, tmp1077
	movl	%edx, reg_reloaded_contents(,%rax,4)	# tmp1077, reg_reloaded_contents
	.loc 1 7320 0
	movl	-136(%rbp), %eax	# nr, tmp1078
	movl	-92(%rbp), %edx	# src_regno, tmp1079
	addl	%edx, %eax	# tmp1079, D.28404
	cltq
	movq	-72(%rbp), %rdx	# store_insn, tmp1081
	movq	%rdx, reg_reloaded_insn(,%rax,8)	# tmp1081, reg_reloaded_insn
	.loc 1 7321 0
	movl	-136(%rbp), %eax	# nr, tmp1082
	movl	-92(%rbp), %edx	# src_regno, tmp1083
	addl	%edx, %eax	# tmp1083, D.28404
	movl	$1, %edx	#, tmp1084
	movl	%eax, %ecx	# D.28404, tmp1150
	salq	%cl, %rdx	# tmp1150, D.28406
	movq	%rdx, %rax	# D.28406, D.28406
	notq	%rax	# D.28406
	movq	%rax, %rdx	# D.28406, D.28406
	movq	reg_reloaded_dead(%rip), %rax	# reg_reloaded_dead, reg_reloaded_dead.1165
	andq	%rdx, %rax	# D.28406, reg_reloaded_dead.1166
	movq	%rax, reg_reloaded_dead(%rip)	# reg_reloaded_dead.1166, reg_reloaded_dead
	.loc 1 7322 0
	movl	-136(%rbp), %eax	# nr, tmp1085
	movl	-92(%rbp), %edx	# src_regno, tmp1086
	addl	%edx, %eax	# tmp1086, D.28404
	movl	$1, %edx	#, tmp1087
	movl	%eax, %ecx	# D.28404, tmp1152
	salq	%cl, %rdx	# tmp1152, D.28406
	movq	reg_reloaded_valid(%rip), %rax	# reg_reloaded_valid, reg_reloaded_valid.1167
	orq	%rdx, %rax	# D.28406, reg_reloaded_valid.1168
	movq	%rax, reg_reloaded_valid(%rip)	# reg_reloaded_valid.1168, reg_reloaded_valid
	.loc 1 7323 0
	movl	-136(%rbp), %eax	# nr, tmp1088
	movl	-92(%rbp), %edx	# src_regno, tmp1089
	addl	%edx, %eax	# tmp1089, D.28404
	movl	$1, %edx	#, tmp1090
	movl	%eax, %ecx	# D.28404, tmp1153
	salq	%cl, %rdx	# tmp1153, D.28406
	movq	reg_is_output_reload(%rip), %rax	# reg_is_output_reload, reg_is_output_reload.1169
	orq	%rdx, %rax	# D.28406, reg_is_output_reload.1170
	movq	%rax, reg_is_output_reload(%rip)	# reg_is_output_reload.1170, reg_is_output_reload
	.loc 1 7324 0
	cmpq	$0, -64(%rbp)	#, note
	je	.L2067	#,
	.loc 1 7325 0
	movl	-92(%rbp), %eax	# src_regno, tmp1091
	movl	$1, %edx	#, tmp1092
	movl	%eax, %ecx	# tmp1091, tmp1154
	salq	%cl, %rdx	# tmp1154, D.28406
	movq	reg_reloaded_died(%rip), %rax	# reg_reloaded_died, reg_reloaded_died.1171
	orq	%rdx, %rax	# D.28406, reg_reloaded_died.1172
	movq	%rax, reg_reloaded_died(%rip)	# reg_reloaded_died.1172, reg_reloaded_died
	jmp	.L2066	#
.L2067:
	.loc 1 7327 0
	movl	-92(%rbp), %eax	# src_regno, tmp1093
	movl	$1, %edx	#, tmp1094
	movl	%eax, %ecx	# tmp1093, tmp1156
	salq	%cl, %rdx	# tmp1156, D.28406
	movq	%rdx, %rax	# D.28406, D.28406
	notq	%rax	# D.28406
	movq	%rax, %rdx	# D.28406, D.28406
	movq	reg_reloaded_died(%rip), %rax	# reg_reloaded_died, reg_reloaded_died.1173
	andq	%rdx, %rax	# D.28406, reg_reloaded_died.1174
	movq	%rax, reg_reloaded_died(%rip)	# reg_reloaded_died.1174, reg_reloaded_died
.L2066:
	.loc 1 7315 0 discriminator 1
	movl	-136(%rbp), %eax	# nr, nr.1175
	leal	-1(%rax), %edx	#, tmp1095
	movl	%edx, -136(%rbp)	# tmp1095, nr
	testl	%eax, %eax	# nr.1175
	jg	.L2068	#,
	.loc 1 7329 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.1176
	movl	-96(%rbp), %edx	# nregno, tmp1096
	movslq	%edx, %rdx	# tmp1096, D.28406
	salq	$3, %rdx	#, D.28406
	addq	%rax, %rdx	# reg_last_reload_reg.1176, D.28413
	movq	-80(%rbp), %rax	# src_reg, tmp1097
	movq	%rax, (%rdx)	# tmp1097, *_582
.LBE162:
.LBE159:
	jmp	.L2028	#
.L2043:
	jmp	.L2028	#
.L2032:
.LBB163:
	.loc 1 7334 0
	cmpl	$7, -96(%rbp)	#, nregno
	jle	.L2069	#,
	.loc 1 7334 0 is_stmt 0 discriminator 1
	cmpl	$15, -96(%rbp)	#, nregno
	jle	.L2070	#,
.L2069:
	.loc 1 7334 0 discriminator 2
	cmpl	$20, -96(%rbp)	#, nregno
	jle	.L2071	#,
	.loc 1 7334 0 discriminator 1
	cmpl	$28, -96(%rbp)	#, nregno
	jle	.L2070	#,
.L2071:
	.loc 1 7334 0 discriminator 2
	cmpl	$44, -96(%rbp)	#, nregno
	jle	.L2072	#,
	.loc 1 7334 0 discriminator 1
	cmpl	$52, -96(%rbp)	#, nregno
	jle	.L2070	#,
.L2072:
	.loc 1 7334 0 discriminator 2
	cmpl	$28, -96(%rbp)	#, nregno
	jle	.L2073	#,
	.loc 1 7334 0 discriminator 1
	cmpl	$36, -96(%rbp)	#, nregno
	jg	.L2073	#,
.L2070:
	movl	-128(%rbp), %eax	# r, tmp1099
	movslq	%eax, %rdx	# tmp1099, tmp1098
	movq	%rdx, %rax	# tmp1098, tmp1100
	addq	%rax, %rax	# tmp1100
	addq	%rdx, %rax	# tmp1098, tmp1100
	salq	$2, %rax	#, tmp1100
	addq	%rdx, %rax	# tmp1098, tmp1100
	salq	$3, %rax	#, tmp1101
	addq	$rld+8, %rax	#, tmp1102
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	movzbl	2(%rax), %eax	# _615->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28415
	cmpl	$5, %eax	#, D.28415
	je	.L2074	#,
	.loc 1 7334 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp1105
	movslq	%eax, %rdx	# tmp1105, tmp1104
	movq	%rdx, %rax	# tmp1104, tmp1106
	addq	%rax, %rax	# tmp1106
	addq	%rdx, %rax	# tmp1104, tmp1106
	salq	$2, %rax	#, tmp1106
	addq	%rdx, %rax	# tmp1104, tmp1106
	salq	$3, %rax	#, tmp1107
	addq	$rld+8, %rax	#, tmp1108
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	movzbl	2(%rax), %eax	# _619->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28415
	cmpl	$6, %eax	#, D.28415
	jne	.L2075	#,
.L2074:
	.loc 1 7334 0 discriminator 1
	movl	$2, %eax	#, iftmp.1178
	jmp	.L2076	#
.L2075:
	movl	$1, %eax	#, iftmp.1178
.L2076:
	.loc 1 7334 0 discriminator 3
	jmp	.L2077	#
.L2073:
	.loc 1 7334 0 discriminator 2
	movl	-128(%rbp), %eax	# r, tmp1111
	movslq	%eax, %rdx	# tmp1111, tmp1110
	movq	%rdx, %rax	# tmp1110, tmp1112
	addq	%rax, %rax	# tmp1112
	addq	%rdx, %rax	# tmp1110, tmp1112
	salq	$2, %rax	#, tmp1112
	addq	%rdx, %rax	# tmp1110, tmp1112
	salq	$3, %rax	#, tmp1113
	addq	$rld+8, %rax	#, tmp1114
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	movzbl	2(%rax), %eax	# _583->mode, D.28414
	cmpb	$18, %al	#, D.28414
	jne	.L2078	#,
	.loc 1 7334 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1181
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L2079	#,
	movl	$2, %eax	#, iftmp.1180
	jmp	.L2077	#
.L2079:
	.loc 1 7334 0 discriminator 2
	movl	$3, %eax	#, iftmp.1180
	jmp	.L2077	#
.L2078:
	movl	-128(%rbp), %eax	# r, tmp1116
	movslq	%eax, %rdx	# tmp1116, tmp1115
	movq	%rdx, %rax	# tmp1115, tmp1117
	addq	%rax, %rax	# tmp1117
	addq	%rdx, %rax	# tmp1115, tmp1117
	salq	$2, %rax	#, tmp1117
	addq	%rdx, %rax	# tmp1115, tmp1117
	salq	$3, %rax	#, tmp1118
	addq	$rld+8, %rax	#, tmp1119
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	movzbl	2(%rax), %eax	# _590->mode, D.28414
	cmpb	$24, %al	#, D.28414
	jne	.L2082	#,
	.loc 1 7334 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1184
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L2083	#,
	movl	$4, %eax	#, iftmp.1183
	jmp	.L2077	#
.L2083:
	.loc 1 7334 0 discriminator 2
	movl	$6, %eax	#, iftmp.1183
	jmp	.L2077	#
.L2082:
	movl	-128(%rbp), %eax	# r, tmp1121
	movslq	%eax, %rdx	# tmp1121, tmp1120
	movq	%rdx, %rax	# tmp1120, tmp1122
	addq	%rax, %rax	# tmp1122
	addq	%rdx, %rax	# tmp1120, tmp1122
	salq	$2, %rax	#, tmp1122
	addq	%rdx, %rax	# tmp1120, tmp1122
	salq	$3, %rax	#, tmp1123
	addq	$rld+8, %rax	#, tmp1124
	movq	(%rax), %rax	# rld[r_130].out, D.28403
	movzbl	2(%rax), %eax	# _597->mode, D.28414
	movzbl	%al, %eax	# D.28414, D.28404
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28414
	movzbl	%al, %edx	# D.28414, D.28404
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1186
	andl	$33554432, %eax	#, D.28404
	testl	%eax, %eax	# D.28404
	je	.L2086	#,
	.loc 1 7334 0 discriminator 1
	movl	$8, %eax	#, iftmp.1185
	jmp	.L2087	#
.L2086:
	.loc 1 7334 0 discriminator 2
	movl	$4, %eax	#, iftmp.1185
.L2087:
	.loc 1 7334 0 discriminator 3
	addl	%edx, %eax	# D.28404, D.28404
	subl	$1, %eax	#, D.28404
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1188
	andl	$33554432, %edx	#, D.28404
	testl	%edx, %edx	# D.28404
	je	.L2088	#,
	.loc 1 7334 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1187
	jmp	.L2089	#
.L2088:
	.loc 1 7334 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1187
.L2089:
	.loc 1 7334 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1187
.L2077:
	movl	%eax, -132(%rbp)	# iftmp.1177, num_regs
	.loc 1 7336 0 is_stmt 1 discriminator 3
	jmp	.L2090	#
.L2091:
	.loc 1 7337 0
	movq	reg_last_reload_reg(%rip), %rax	# reg_last_reload_reg, reg_last_reload_reg.1189
	movl	-132(%rbp), %edx	# num_regs, tmp1128
	movl	-96(%rbp), %ecx	# nregno, tmp1129
	addl	%ecx, %edx	# tmp1129, D.28404
	movslq	%edx, %rdx	# D.28404, D.28406
	salq	$3, %rdx	#, D.28406
	addq	%rdx, %rax	# D.28406, D.28413
	movq	$0, (%rax)	#, *_633
.L2090:
	.loc 1 7336 0 discriminator 1
	movl	-132(%rbp), %eax	# num_regs, num_regs.1190
	leal	-1(%rax), %edx	#, tmp1130
	movl	%edx, -132(%rbp)	# tmp1130, num_regs
	testl	%eax, %eax	# num_regs.1190
	jg	.L2091	#,
.L2028:
.LBE163:
.LBE158:
.LBE151:
	.loc 1 7069 0
	addl	$1, -160(%rbp)	#, j
.L1915:
	.loc 1 7069 0 is_stmt 0 discriminator 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1191
	cmpl	%eax, -160(%rbp)	# n_reloads.1191, j
	jl	.L2092	#,
	.loc 1 7341 0 is_stmt 1
	movq	reg_reloaded_dead(%rip), %rdx	# reg_reloaded_dead, reg_reloaded_dead.1192
	movq	reg_reloaded_died(%rip), %rax	# reg_reloaded_died, reg_reloaded_died.1193
	orq	%rdx, %rax	# reg_reloaded_dead.1192, reg_reloaded_dead.1194
	movq	%rax, reg_reloaded_dead(%rip)	# reg_reloaded_dead.1194, reg_reloaded_dead
	.loc 1 7342 0
	addq	$168, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE60:
	.size	emit_reload_insns, .-emit_reload_insns
	.globl	gen_reload
	.type	gen_reload, @function
gen_reload:
.LFB61:
	.loc 1 7356 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -72(%rbp)	# out, out
	movq	%rsi, -80(%rbp)	# in, in
	movl	%edx, -84(%rbp)	# opnum, opnum
	movl	%ecx, -88(%rbp)	# type, type
	.loc 1 7357 0
	call	get_last_insn	#
	movq	%rax, -40(%rbp)	# tmp193, last
	.loc 1 7362 0
	movq	-80(%rbp), %rax	# in, tmp194
	movzwl	(%rax), %eax	# in_16(D)->code, D.28420
	cmpw	$63, %ax	#, D.28420
	jne	.L2094	#,
	.loc 1 7363 0
	movq	-80(%rbp), %rax	# in, tmp195
	movzbl	2(%rax), %eax	# in_16(D)->mode, D.28421
	movzbl	%al, %eax	# D.28421, D.28422
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28421
	.loc 1 7364 0
	movq	-80(%rbp), %rax	# in, tmp197
	movq	8(%rax), %rax	# in_16(D)->fld[0].rtx, D.28423
	movzbl	2(%rax), %eax	# _21->mode, D.28421
	movzbl	%al, %eax	# D.28421, D.28422
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28421
	.loc 1 7363 0
	cmpb	%al, %dl	# D.28421, D.28421
	jbe	.L2094	#,
	.loc 1 7365 0
	movq	-80(%rbp), %rax	# in, tmp199
	movq	8(%rax), %rax	# in_16(D)->fld[0].rtx, D.28423
	movzbl	2(%rax), %eax	# _25->mode, D.28421
	movzbl	%al, %eax	# D.28421, D.28424
	movq	-72(%rbp), %rdx	# out, tmp200
	movq	%rdx, %rsi	# tmp200,
	movl	%eax, %edi	# D.28424,
	call	gen_lowpart_common	#
	movq	%rax, -32(%rbp)	# tmp201, tem
	cmpq	$0, -32(%rbp)	#, tem
	je	.L2094	#,
	.loc 1 7366 0
	movq	-80(%rbp), %rax	# in, tmp202
	movq	8(%rax), %rax	# in_16(D)->fld[0].rtx, tmp203
	movq	%rax, -80(%rbp)	# tmp203, in
	movq	-32(%rbp), %rax	# tem, tmp204
	movq	%rax, -72(%rbp)	# tmp204, out
	jmp	.L2095	#
.L2094:
	.loc 1 7367 0
	movq	-72(%rbp), %rax	# out, tmp205
	movzwl	(%rax), %eax	# out_28(D)->code, D.28420
	cmpw	$63, %ax	#, D.28420
	jne	.L2095	#,
	.loc 1 7368 0
	movq	-72(%rbp), %rax	# out, tmp206
	movzbl	2(%rax), %eax	# out_28(D)->mode, D.28421
	movzbl	%al, %eax	# D.28421, D.28422
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28421
	.loc 1 7369 0
	movq	-72(%rbp), %rax	# out, tmp208
	movq	8(%rax), %rax	# out_28(D)->fld[0].rtx, D.28423
	movzbl	2(%rax), %eax	# _36->mode, D.28421
	movzbl	%al, %eax	# D.28421, D.28422
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28421
	.loc 1 7368 0
	cmpb	%al, %dl	# D.28421, D.28421
	jbe	.L2095	#,
	.loc 1 7370 0
	movq	-72(%rbp), %rax	# out, tmp210
	movq	8(%rax), %rax	# out_28(D)->fld[0].rtx, D.28423
	movzbl	2(%rax), %eax	# _40->mode, D.28421
	movzbl	%al, %eax	# D.28421, D.28424
	movq	-80(%rbp), %rdx	# in, tmp211
	movq	%rdx, %rsi	# tmp211,
	movl	%eax, %edi	# D.28424,
	call	gen_lowpart_common	#
	movq	%rax, -32(%rbp)	# tmp212, tem
	cmpq	$0, -32(%rbp)	#, tem
	je	.L2095	#,
	.loc 1 7371 0
	movq	-72(%rbp), %rax	# out, tmp213
	movq	8(%rax), %rax	# out_28(D)->fld[0].rtx, tmp214
	movq	%rax, -72(%rbp)	# tmp214, out
	movq	-32(%rbp), %rax	# tem, tmp215
	movq	%rax, -80(%rbp)	# tmp215, in
.L2095:
	.loc 1 7399 0
	movq	-80(%rbp), %rax	# in, tmp216
	movzwl	(%rax), %eax	# in_3->code, D.28420
	cmpw	$75, %ax	#, D.28420
	jne	.L2096	#,
	.loc 1 7400 0
	movq	-80(%rbp), %rax	# in, tmp217
	movq	8(%rax), %rax	# in_3->fld[0].rtx, D.28423
	movzwl	(%rax), %eax	# _47->code, D.28420
	cmpw	$61, %ax	#, D.28420
	je	.L2097	#,
	.loc 1 7401 0
	movq	-80(%rbp), %rax	# in, tmp218
	movq	8(%rax), %rax	# in_3->fld[0].rtx, D.28423
	movzwl	(%rax), %eax	# _49->code, D.28420
	cmpw	$63, %ax	#, D.28420
	je	.L2097	#,
	.loc 1 7402 0
	movq	-80(%rbp), %rax	# in, tmp219
	movq	8(%rax), %rax	# in_3->fld[0].rtx, D.28423
	movzwl	(%rax), %eax	# _51->code, D.28420
	cmpw	$66, %ax	#, D.28420
	jne	.L2096	#,
.L2097:
	.loc 1 7403 0
	movq	-80(%rbp), %rax	# in, tmp220
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _53->code, D.28420
	cmpw	$61, %ax	#, D.28420
	je	.L2098	#,
	.loc 1 7404 0
	movq	-80(%rbp), %rax	# in, tmp221
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _55->code, D.28420
	cmpw	$63, %ax	#, D.28420
	je	.L2098	#,
	.loc 1 7405 0
	movq	-80(%rbp), %rax	# in, tmp222
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _57->code, D.28420
	cmpw	$67, %ax	#, D.28420
	je	.L2098	#,
	.loc 1 7405 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# in, tmp223
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _59->code, D.28420
	cmpw	$68, %ax	#, D.28420
	je	.L2098	#,
	movq	-80(%rbp), %rax	# in, tmp224
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _61->code, D.28420
	cmpw	$54, %ax	#, D.28420
	je	.L2098	#,
	movq	-80(%rbp), %rax	# in, tmp225
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _63->code, D.28420
	cmpw	$55, %ax	#, D.28420
	je	.L2098	#,
	movq	-80(%rbp), %rax	# in, tmp226
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _65->code, D.28420
	cmpw	$58, %ax	#, D.28420
	je	.L2098	#,
	movq	-80(%rbp), %rax	# in, tmp227
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _67->code, D.28420
	cmpw	$134, %ax	#, D.28420
	je	.L2098	#,
	movq	-80(%rbp), %rax	# in, tmp228
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _69->code, D.28420
	cmpw	$56, %ax	#, D.28420
	je	.L2098	#,
	movq	-80(%rbp), %rax	# in, tmp229
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _71->code, D.28420
	cmpw	$140, %ax	#, D.28420
	je	.L2098	#,
	.loc 1 7406 0 is_stmt 1
	movq	-80(%rbp), %rax	# in, tmp230
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _73->code, D.28420
	cmpw	$66, %ax	#, D.28420
	jne	.L2096	#,
.L2098:
.LBB164:
	.loc 1 7424 0
	movq	-80(%rbp), %rax	# in, tmp231
	addq	$8, %rax	#, D.28425
	movq	%rax, %rdi	# D.28425,
	call	find_replacement	#
	movq	%rax, -56(%rbp)	# tmp232, op0
	.loc 1 7425 0
	movq	-80(%rbp), %rax	# in, tmp233
	addq	$16, %rax	#, D.28425
	movq	%rax, %rdi	# D.28425,
	call	find_replacement	#
	movq	%rax, -48(%rbp)	# tmp234, op1
	.loc 1 7434 0
	movq	-80(%rbp), %rax	# in, tmp235
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movzwl	(%rax), %eax	# _79->code, D.28420
	cmpw	$61, %ax	#, D.28420
	jne	.L2099	#,
	.loc 1 7435 0
	movq	-72(%rbp), %rax	# out, tmp236
	movl	8(%rax), %edx	# out_1->fld[0].rtuint, D.28426
	movq	-80(%rbp), %rax	# in, tmp237
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	movl	8(%rax), %eax	# _82->fld[0].rtuint, D.28426
	cmpl	%eax, %edx	# D.28426, D.28426
	jne	.L2099	#,
	.loc 1 7436 0
	movq	-56(%rbp), %rax	# op0, tmp238
	movq	%rax, -24(%rbp)	# tmp238, tem
	movq	-48(%rbp), %rax	# op1, tmp239
	movq	%rax, -56(%rbp)	# tmp239, op0
	movq	-24(%rbp), %rax	# tem, tmp240
	movq	%rax, -48(%rbp)	# tmp240, op1
.L2099:
	.loc 1 7438 0
	movq	-80(%rbp), %rax	# in, tmp241
	movq	8(%rax), %rax	# in_3->fld[0].rtx, D.28423
	cmpq	-56(%rbp), %rax	# op0, D.28423
	jne	.L2100	#,
	.loc 1 7438 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# in, tmp242
	movq	16(%rax), %rax	# in_3->fld[1].rtx, D.28423
	cmpq	-48(%rbp), %rax	# op1, D.28423
	je	.L2101	#,
.L2100:
	.loc 1 7439 0 is_stmt 1
	movq	-80(%rbp), %rax	# in, tmp243
	movzbl	2(%rax), %eax	# in_3->mode, D.28421
	movzbl	%al, %eax	# D.28421, D.28424
	movq	-48(%rbp), %rcx	# op1, tmp244
	movq	-56(%rbp), %rdx	# op0, tmp245
	movl	%eax, %esi	# D.28424,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -80(%rbp)	# tmp246, in
.L2101:
	.loc 1 7441 0
	movq	-80(%rbp), %rdx	# in, tmp247
	movq	-72(%rbp), %rax	# out, tmp248
	movq	%rdx, %rcx	# tmp247,
	movq	%rax, %rdx	# tmp248,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.28423,
	call	emit_insn	#
	movq	%rax, -16(%rbp)	# tmp249, insn
	.loc 1 7442 0
	movq	-16(%rbp), %rax	# insn, tmp250
	movl	40(%rax), %eax	# insn_93->fld[4].rtint, D.28422
	testl	%eax, %eax	# D.28422
	js	.L2102	#,
	.loc 1 7442 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# insn, tmp251
	movl	40(%rax), %eax	# insn_93->fld[4].rtint, iftmp.1195
	jmp	.L2103	#
.L2102:
	.loc 1 7442 0 discriminator 2
	movq	-16(%rbp), %rax	# insn, tmp252
	movq	%rax, %rdi	# tmp252,
	call	recog_memoized_1	#
.L2103:
	.loc 1 7442 0 discriminator 3
	movl	%eax, -60(%rbp)	# iftmp.1195, code
	.loc 1 7444 0 is_stmt 1 discriminator 3
	cmpl	$0, -60(%rbp)	#, code
	js	.L2104	#,
	.loc 1 7446 0
	movq	-16(%rbp), %rax	# insn, tmp253
	movq	%rax, %rdi	# tmp253,
	call	extract_insn	#
	.loc 1 7450 0
	movl	$1, %edi	#,
	call	constrain_operands	#
	testl	%eax, %eax	# D.28422
	je	.L2104	#,
	.loc 1 7451 0
	movq	-16(%rbp), %rax	# insn, D.28419
	jmp	.L2105	#
.L2104:
	.loc 1 7454 0
	movq	-40(%rbp), %rax	# last, tmp254
	movq	%rax, %rdi	# tmp254,
	call	delete_insns_since	#
	.loc 1 7471 0
	movq	optab_table(%rip), %rdx	# optab_table, D.28427
	movq	-72(%rbp), %rax	# out, tmp255
	movzbl	2(%rax), %eax	# out_1->mode, D.28421
	movzbl	%al, %eax	# D.28421, D.28422
	cltq
	salq	$4, %rax	#, tmp257
	addq	%rdx, %rax	# D.28427, tmp258
	movl	8(%rax), %eax	# _100->handlers[_102].insn_code, D.28428
	movl	%eax, -60(%rbp)	# D.28428, code
	.loc 1 7473 0
	movq	-48(%rbp), %rax	# op1, tmp259
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$67, %ax	#, D.28420
	je	.L2106	#,
	.loc 1 7473 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# op1, tmp260
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$68, %ax	#, D.28420
	je	.L2106	#,
	movq	-48(%rbp), %rax	# op1, tmp261
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$54, %ax	#, D.28420
	je	.L2106	#,
	movq	-48(%rbp), %rax	# op1, tmp262
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$55, %ax	#, D.28420
	je	.L2106	#,
	movq	-48(%rbp), %rax	# op1, tmp263
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$58, %ax	#, D.28420
	je	.L2106	#,
	movq	-48(%rbp), %rax	# op1, tmp264
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$134, %ax	#, D.28420
	je	.L2106	#,
	movq	-48(%rbp), %rax	# op1, tmp265
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$56, %ax	#, D.28420
	je	.L2106	#,
	movq	-48(%rbp), %rax	# op1, tmp266
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$140, %ax	#, D.28420
	je	.L2106	#,
	movq	-48(%rbp), %rax	# op1, tmp267
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$66, %ax	#, D.28420
	je	.L2106	#,
	movq	-48(%rbp), %rax	# op1, tmp268
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$63, %ax	#, D.28420
	je	.L2106	#,
	.loc 1 7474 0 is_stmt 1
	movq	-48(%rbp), %rax	# op1, tmp269
	movzwl	(%rax), %eax	# op1_8->code, D.28420
	cmpw	$61, %ax	#, D.28420
	jne	.L2107	#,
	.loc 1 7475 0
	movq	-48(%rbp), %rax	# op1, tmp270
	movl	8(%rax), %eax	# op1_8->fld[0].rtuint, D.28426
	cmpl	$52, %eax	#, D.28426
	ja	.L2106	#,
.L2107:
	.loc 1 7476 0
	cmpl	$1317, -60(%rbp)	#, code
	je	.L2108	#,
	.loc 1 7477 0
	movl	-60(%rbp), %eax	# code, tmp272
	movslq	%eax, %rdx	# tmp272, tmp271
	movq	%rdx, %rax	# tmp271, tmp273
	salq	$2, %rax	#, tmp273
	addq	%rdx, %rax	# tmp271, tmp273
	salq	$3, %rax	#, tmp274
	addq	$insn_data+24, %rax	#, tmp275
	movq	(%rax), %rax	# insn_data[code_104].operand, D.28429
	addq	$48, %rax	#, D.28429
	.loc 1 7478 0
	movq	(%rax), %rcx	# _118->predicate, D.28430
	movl	-60(%rbp), %eax	# code, tmp277
	movslq	%eax, %rdx	# tmp277, tmp276
	movq	%rdx, %rax	# tmp276, tmp278
	salq	$2, %rax	#, tmp278
	addq	%rdx, %rax	# tmp276, tmp278
	salq	$3, %rax	#, tmp279
	addq	$insn_data+24, %rax	#, tmp280
	movq	(%rax), %rax	# insn_data[code_104].operand, D.28429
	addq	$48, %rax	#, D.28429
	movzwl	16(%rax), %eax	# _121->mode, D.28420
	movzwl	%ax, %edx	# D.28420, D.28424
	movq	-48(%rbp), %rax	# op1, tmp281
	movl	%edx, %esi	# D.28424,
	movq	%rax, %rdi	# tmp281,
	call	*%rcx	# D.28430
	.loc 1 7477 0
	testl	%eax, %eax	# D.28422
	jne	.L2108	#,
.L2106:
	.loc 1 7479 0
	movq	-56(%rbp), %rax	# op0, tmp282
	movq	%rax, -24(%rbp)	# tmp282, tem
	movq	-48(%rbp), %rax	# op1, tmp283
	movq	%rax, -56(%rbp)	# tmp283, op0
	movq	-24(%rbp), %rax	# tem, tmp284
	movq	%rax, -48(%rbp)	# tmp284, op1
.L2108:
	.loc 1 7481 0
	movl	-88(%rbp), %ecx	# type, tmp285
	movl	-84(%rbp), %edx	# opnum, tmp286
	movq	-56(%rbp), %rsi	# op0, tmp287
	movq	-72(%rbp), %rax	# out, tmp288
	movq	%rax, %rdi	# tmp288,
	call	gen_reload	#
	.loc 1 7487 0
	movq	-48(%rbp), %rdx	# op1, tmp289
	movq	-56(%rbp), %rax	# op0, tmp290
	movq	%rdx, %rsi	# tmp289,
	movq	%rax, %rdi	# tmp290,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28422
	je	.L2109	#,
	.loc 1 7488 0
	movq	-72(%rbp), %rax	# out, tmp291
	movq	%rax, -48(%rbp)	# tmp291, op1
.L2109:
	.loc 1 7490 0
	movq	-48(%rbp), %rdx	# op1, tmp292
	movq	-72(%rbp), %rax	# out, tmp293
	movq	%rdx, %rsi	# tmp292,
	movq	%rax, %rdi	# tmp293,
	call	gen_add2_insn	#
	movq	%rax, %rdi	# D.28423,
	call	emit_insn	#
	movq	%rax, -16(%rbp)	# tmp294, insn
	.loc 1 7495 0
	movq	-16(%rbp), %rax	# insn, tmp295
	movl	40(%rax), %eax	# insn_133->fld[4].rtint, D.28422
	testl	%eax, %eax	# D.28422
	js	.L2110	#,
	.loc 1 7495 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# insn, tmp296
	movl	40(%rax), %eax	# insn_133->fld[4].rtint, iftmp.1196
	jmp	.L2111	#
.L2110:
	.loc 1 7495 0 discriminator 2
	movq	-16(%rbp), %rax	# insn, tmp297
	movq	%rax, %rdi	# tmp297,
	call	recog_memoized_1	#
.L2111:
	.loc 1 7495 0 discriminator 3
	movl	%eax, -60(%rbp)	# iftmp.1196, code
	.loc 1 7497 0 is_stmt 1 discriminator 3
	cmpl	$0, -60(%rbp)	#, code
	js	.L2112	#,
	.loc 1 7499 0
	movq	-16(%rbp), %rax	# insn, tmp298
	movq	%rax, %rdi	# tmp298,
	call	extract_insn	#
	.loc 1 7503 0
	movl	$1, %edi	#,
	call	constrain_operands	#
	testl	%eax, %eax	# D.28422
	je	.L2112	#,
	.loc 1 7507 0
	movq	-16(%rbp), %rax	# insn, tmp299
	movq	56(%rax), %rdx	# insn_133->fld[6].rtx, D.28423
	movq	-80(%rbp), %rax	# in, tmp300
	movq	%rdx, %rcx	# D.28423,
	movq	%rax, %rdx	# tmp300,
	movl	$3, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-16(%rbp), %rdx	# insn, tmp301
	movq	%rax, 56(%rdx)	# D.28423, insn_133->fld[6].rtx
	.loc 1 7508 0
	movq	-16(%rbp), %rax	# insn, D.28419
	jmp	.L2105	#
.L2112:
	.loc 1 7512 0
	movq	-40(%rbp), %rax	# last, tmp302
	movq	%rax, %rdi	# tmp302,
	call	delete_insns_since	#
	.loc 1 7514 0
	movl	-88(%rbp), %ecx	# type, tmp303
	movl	-84(%rbp), %edx	# opnum, tmp304
	movq	-48(%rbp), %rsi	# op1, tmp305
	movq	-72(%rbp), %rax	# out, tmp306
	movq	%rax, %rdi	# tmp306,
	call	gen_reload	#
	.loc 1 7515 0
	movq	-56(%rbp), %rdx	# op0, tmp307
	movq	-72(%rbp), %rax	# out, tmp308
	movq	%rdx, %rsi	# tmp307,
	movq	%rax, %rdi	# tmp308,
	call	gen_add2_insn	#
	movq	%rax, %rdi	# D.28423,
	call	emit_insn	#
	movq	%rax, -16(%rbp)	# tmp309, insn
	.loc 1 7516 0
	movq	-16(%rbp), %rax	# insn, tmp310
	movq	56(%rax), %rdx	# insn_143->fld[6].rtx, D.28423
	movq	-80(%rbp), %rax	# in, tmp311
	movq	%rdx, %rcx	# D.28423,
	movq	%rax, %rdx	# tmp311,
	movl	$3, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-16(%rbp), %rdx	# insn, tmp312
	movq	%rax, 56(%rdx)	# D.28423, insn_143->fld[6].rtx
.LBE164:
	.loc 1 7407 0
	jmp	.L2113	#
.L2096:
	.loc 1 7521 0
	movq	-80(%rbp), %rax	# in, tmp313
	movzwl	(%rax), %eax	# in_3->code, D.28420
	cmpw	$61, %ax	#, D.28420
	jne	.L2114	#,
	.loc 1 7521 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# in, tmp314
	movl	8(%rax), %eax	# in_3->fld[0].rtuint, D.28426
	cmpl	$52, %eax	#, D.28426
	ja	.L2114	#,
	.loc 1 7522 0 is_stmt 1
	movq	-72(%rbp), %rax	# out, tmp315
	movzwl	(%rax), %eax	# out_1->code, D.28420
	cmpw	$61, %ax	#, D.28420
	jne	.L2114	#,
	.loc 1 7522 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# out, tmp316
	movl	8(%rax), %eax	# out_1->fld[0].rtuint, D.28426
	cmpl	$52, %eax	#, D.28426
	ja	.L2114	#,
	.loc 1 7523 0 is_stmt 1
	movq	-72(%rbp), %rax	# out, tmp317
	movzbl	2(%rax), %eax	# out_1->mode, D.28421
	movzbl	%al, %edx	# D.28421, D.28424
	movq	-72(%rbp), %rax	# out, tmp318
	movl	8(%rax), %eax	# out_1->fld[0].rtuint, D.28426
	movl	%eax, %eax	# D.28426, tmp319
	movl	regclass_map(,%rax,4), %esi	# regclass_map, D.28431
	movq	-80(%rbp), %rax	# in, tmp320
	movl	8(%rax), %eax	# in_3->fld[0].rtuint, D.28426
	movl	%eax, %eax	# D.28426, tmp321
	movl	regclass_map(,%rax,4), %eax	# regclass_map, D.28431
	movl	$1, %ecx	#,
	movl	%eax, %edi	# D.28431,
	call	ix86_secondary_memory_needed	#
	testl	%eax, %eax	# D.28422
	je	.L2114	#,
.LBB165:
	.loc 1 7528 0
	movq	-72(%rbp), %rax	# out, tmp322
	movzbl	2(%rax), %eax	# out_1->mode, D.28421
	movzbl	%al, %esi	# D.28421, D.28424
	movl	-88(%rbp), %ecx	# type, tmp323
	movl	-84(%rbp), %edx	# opnum, tmp324
	movq	-80(%rbp), %rax	# in, tmp325
	movq	%rax, %rdi	# tmp325,
	call	get_secondary_mem	#
	movq	%rax, -8(%rbp)	# tmp326, loc
	.loc 1 7530 0
	movq	-8(%rbp), %rax	# loc, tmp327
	movzbl	2(%rax), %edx	# loc_159->mode, D.28421
	movq	-72(%rbp), %rax	# out, tmp328
	movzbl	2(%rax), %eax	# out_1->mode, D.28421
	cmpb	%al, %dl	# D.28421, D.28421
	je	.L2115	#,
	.loc 1 7531 0
	movq	-72(%rbp), %rax	# out, tmp329
	movl	8(%rax), %eax	# out_1->fld[0].rtuint, D.28426
	movl	%eax, %edx	# D.28426, D.28422
	movq	-8(%rbp), %rax	# loc, tmp330
	movzbl	2(%rax), %eax	# loc_159->mode, D.28421
	movzbl	%al, %eax	# D.28421, D.28424
	movl	%edx, %esi	# D.28422,
	movl	%eax, %edi	# D.28424,
	call	gen_rtx_REG	#
	movq	%rax, -72(%rbp)	# tmp331, out
.L2115:
	.loc 1 7533 0
	movq	-8(%rbp), %rax	# loc, tmp332
	movzbl	2(%rax), %edx	# loc_159->mode, D.28421
	movq	-80(%rbp), %rax	# in, tmp333
	movzbl	2(%rax), %eax	# in_3->mode, D.28421
	cmpb	%al, %dl	# D.28421, D.28421
	je	.L2116	#,
	.loc 1 7534 0
	movq	-80(%rbp), %rax	# in, tmp334
	movl	8(%rax), %eax	# in_3->fld[0].rtuint, D.28426
	movl	%eax, %edx	# D.28426, D.28422
	movq	-8(%rbp), %rax	# loc, tmp335
	movzbl	2(%rax), %eax	# loc_159->mode, D.28421
	movzbl	%al, %eax	# D.28421, D.28424
	movl	%edx, %esi	# D.28422,
	movl	%eax, %edi	# D.28424,
	call	gen_rtx_REG	#
	movq	%rax, -80(%rbp)	# tmp336, in
.L2116:
	.loc 1 7536 0
	movl	-88(%rbp), %ecx	# type, tmp337
	movl	-84(%rbp), %edx	# opnum, tmp338
	movq	-80(%rbp), %rsi	# in, tmp339
	movq	-8(%rbp), %rax	# loc, tmp340
	movq	%rax, %rdi	# tmp340,
	call	gen_reload	#
	.loc 1 7537 0
	movl	-88(%rbp), %ecx	# type, tmp341
	movl	-84(%rbp), %edx	# opnum, tmp342
	movq	-8(%rbp), %rsi	# loc, tmp343
	movq	-72(%rbp), %rax	# out, tmp344
	movq	%rax, %rdi	# tmp344,
	call	gen_reload	#
.LBE165:
	.loc 1 7526 0
	jmp	.L2113	#
.L2114:
	.loc 1 7542 0
	movq	-80(%rbp), %rax	# in, tmp345
	movzwl	(%rax), %eax	# in_3->code, D.28420
	movzwl	%ax, %eax	# D.28420, D.28422
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28432
	cmpb	$111, %al	#, D.28432
	je	.L2117	#,
	.loc 1 7542 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# in, tmp347
	movzwl	(%rax), %eax	# in_3->code, D.28420
	cmpw	$63, %ax	#, D.28420
	jne	.L2118	#,
.L2117:
	.loc 1 7543 0 is_stmt 1
	movq	-80(%rbp), %rdx	# in, tmp348
	movq	-72(%rbp), %rax	# out, tmp349
	movq	%rdx, %rsi	# tmp348,
	movq	%rax, %rdi	# tmp349,
	call	gen_move_insn	#
	movq	%rax, %rdi	# D.28423,
	call	emit_insn	#
	jmp	.L2113	#
.L2118:
	.loc 1 7552 0
	movq	-80(%rbp), %rdx	# in, tmp350
	movq	-72(%rbp), %rax	# out, tmp351
	movq	%rdx, %rcx	# tmp350,
	movq	%rax, %rdx	# tmp351,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.28423,
	call	emit_insn	#
.L2113:
	.loc 1 7560 0
	cmpq	$0, -40(%rbp)	#, last
	je	.L2119	#,
	.loc 1 7560 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# last, tmp352
	movq	24(%rax), %rax	# last_15->fld[2].rtx, iftmp.1197
	jmp	.L2120	#
.L2119:
	.loc 1 7560 0 discriminator 2
	call	get_insns	#
.L2120:
.L2105:
	.loc 1 7561 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE61:
	.size	gen_reload, .-gen_reload
	.type	delete_output_reload, @function
delete_output_reload:
.LFB62:
	.loc 1 7577 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# insn, insn
	movl	%esi, -108(%rbp)	# j, j
	movl	%edx, -112(%rbp)	# last_reload_reg, last_reload_reg
	.loc 1 7578 0
	movl	-112(%rbp), %eax	# last_reload_reg, tmp178
	cltq
	movq	spill_reg_store(,%rax,8), %rax	# spill_reg_store, tmp179
	movq	%rax, -48(%rbp)	# tmp179, output_reload_insn
	.loc 1 7579 0
	movl	-112(%rbp), %eax	# last_reload_reg, tmp181
	cltq
	movq	spill_reg_stored_to(,%rax,8), %rax	# spill_reg_stored_to, tmp182
	movq	%rax, -80(%rbp)	# tmp182, reg
	.loc 1 7582 0
	movl	$0, -84(%rbp)	#, n_inherited
	.loc 1 7588 0
	jmp	.L2122	#
.L2123:
	.loc 1 7589 0
	movq	-80(%rbp), %rax	# reg, tmp183
	movq	8(%rax), %rax	# reg_1->fld[0].rtx, tmp184
	movq	%rax, -80(%rbp)	# tmp184, reg
.L2122:
	.loc 1 7588 0 discriminator 1
	movq	-80(%rbp), %rax	# reg, tmp185
	movzwl	(%rax), %eax	# reg_1->code, D.28433
	cmpw	$63, %ax	#, D.28433
	je	.L2123	#,
	.loc 1 7590 0
	movq	reg_equiv_memory_loc(%rip), %rdx	# reg_equiv_memory_loc, reg_equiv_memory_loc.1198
	movq	-80(%rbp), %rax	# reg, tmp186
	movl	8(%rax), %eax	# reg_1->fld[0].rtuint, D.28434
	movl	%eax, %eax	# D.28434, D.28435
	salq	$3, %rax	#, D.28435
	addq	%rdx, %rax	# reg_equiv_memory_loc.1198, D.28436
	movq	(%rax), %rax	# *_38, tmp187
	movq	%rax, -40(%rbp)	# tmp187, substed
	.loc 1 7594 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1199
	subl	$1, %eax	#, tmp188
	movl	%eax, -92(%rbp)	# tmp188, k
	jmp	.L2124	#
.L2138:
.LBB166:
	.loc 1 7596 0
	movl	-92(%rbp), %eax	# k, tmp190
	movslq	%eax, %rdx	# tmp190, tmp189
	movq	%rdx, %rax	# tmp189, tmp191
	addq	%rax, %rax	# tmp191
	addq	%rdx, %rax	# tmp189, tmp191
	salq	$2, %rax	#, tmp191
	addq	%rdx, %rax	# tmp189, tmp191
	salq	$3, %rax	#, tmp192
	addq	$rld, %rax	#, tmp193
	movq	(%rax), %rax	# rld[k_2].in, tmp194
	movq	%rax, -64(%rbp)	# tmp194, reg2
	.loc 1 7597 0
	cmpq	$0, -64(%rbp)	#, reg2
	jne	.L2125	#,
	.loc 1 7598 0
	jmp	.L2126	#
.L2125:
	.loc 1 7599 0
	movq	-64(%rbp), %rax	# reg2, tmp195
	movzwl	(%rax), %eax	# reg2_42->code, D.28433
	cmpw	$66, %ax	#, D.28433
	je	.L2127	#,
	.loc 1 7599 0 is_stmt 0 discriminator 1
	movl	-92(%rbp), %eax	# k, tmp197
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28437
	testq	%rax, %rax	# D.28437
	je	.L2128	#,
.L2127:
	.loc 1 7600 0 is_stmt 1
	movl	-92(%rbp), %eax	# k, tmp199
	movslq	%eax, %rdx	# tmp199, tmp198
	movq	%rdx, %rax	# tmp198, tmp200
	addq	%rax, %rax	# tmp200
	addq	%rdx, %rax	# tmp198, tmp200
	salq	$2, %rax	#, tmp200
	addq	%rdx, %rax	# tmp198, tmp200
	salq	$3, %rax	#, tmp201
	addq	$rld+40, %rax	#, tmp202
	movq	(%rax), %rax	# rld[k_2].in_reg, tmp203
	movq	%rax, -64(%rbp)	# tmp203, reg2
	.loc 1 7605 0
	jmp	.L2129	#
.L2128:
	jmp	.L2129	#
.L2130:
	.loc 1 7606 0
	movq	-64(%rbp), %rax	# reg2, tmp204
	movq	8(%rax), %rax	# reg2_12->fld[0].rtx, tmp205
	movq	%rax, -64(%rbp)	# tmp205, reg2
.L2129:
	.loc 1 7605 0 discriminator 1
	movq	-64(%rbp), %rax	# reg2, tmp206
	movzwl	(%rax), %eax	# reg2_12->code, D.28433
	cmpw	$63, %ax	#, D.28433
	je	.L2130	#,
	.loc 1 7607 0
	movq	-80(%rbp), %rdx	# reg, tmp207
	movq	-64(%rbp), %rax	# reg2, tmp208
	movq	%rdx, %rsi	# tmp207,
	movq	%rax, %rdi	# tmp208,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28438
	je	.L2126	#,
	.loc 1 7609 0
	movl	-92(%rbp), %eax	# k, tmp210
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28439
	testb	%al, %al	# D.28439
	jne	.L2131	#,
	.loc 1 7609 0 is_stmt 0 discriminator 1
	movl	-92(%rbp), %eax	# k, tmp212
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28437
	testq	%rax, %rax	# D.28437
	jne	.L2131	#,
	movl	-92(%rbp), %eax	# k, tmp213
	cmpl	-108(%rbp), %eax	# j, tmp213
	jne	.L2132	#,
.L2131:
	.loc 1 7611 0 is_stmt 1
	addl	$1, -84(%rbp)	#, n_inherited
	.loc 1 7612 0
	movl	-92(%rbp), %eax	# k, tmp215
	movslq	%eax, %rdx	# tmp215, tmp214
	movq	%rdx, %rax	# tmp214, tmp216
	addq	%rax, %rax	# tmp216
	addq	%rdx, %rax	# tmp214, tmp216
	salq	$2, %rax	#, tmp216
	addq	%rdx, %rax	# tmp214, tmp216
	salq	$3, %rax	#, tmp217
	addq	$rld+48, %rax	#, tmp218
	movq	(%rax), %rax	# rld[k_2].out_reg, tmp219
	movq	%rax, -64(%rbp)	# tmp219, reg2
	.loc 1 7613 0
	cmpq	$0, -64(%rbp)	#, reg2
	jne	.L2133	#,
	.loc 1 7614 0
	jmp	.L2126	#
.L2133:
	.loc 1 7615 0
	jmp	.L2134	#
.L2135:
	.loc 1 7616 0
	movq	-64(%rbp), %rax	# reg2, tmp220
	movq	8(%rax), %rax	# reg2_13->fld[0].rtx, tmp221
	movq	%rax, -64(%rbp)	# tmp221, reg2
.L2134:
	.loc 1 7615 0 discriminator 1
	movq	-64(%rbp), %rax	# reg2, tmp222
	movzwl	(%rax), %eax	# reg2_13->code, D.28433
	cmpw	$63, %ax	#, D.28433
	je	.L2135	#,
	.loc 1 7617 0
	movq	-80(%rbp), %rdx	# reg, tmp223
	movq	-64(%rbp), %rax	# reg2, tmp224
	movq	%rdx, %rsi	# tmp223,
	movq	%rax, %rdi	# tmp224,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28438
	je	.L2136	#,
	.loc 1 7618 0
	addl	$1, -84(%rbp)	#, n_inherited
	.loc 1 7617 0
	jmp	.L2126	#
.L2136:
	.loc 1 7617 0 is_stmt 0 discriminator 1
	jmp	.L2126	#
.L2132:
	.loc 1 7621 0 is_stmt 1
	jmp	.L2121	#
.L2126:
.LBE166:
	.loc 1 7594 0
	subl	$1, -92(%rbp)	#, k
.L2124:
	.loc 1 7594 0 is_stmt 0 discriminator 1
	cmpl	$0, -92(%rbp)	#, k
	jns	.L2138	#,
	.loc 1 7624 0 is_stmt 1
	movq	-104(%rbp), %rax	# insn, tmp225
	movq	32(%rax), %rax	# insn_59(D)->fld[3].rtx, D.28437
	movq	-80(%rbp), %rcx	# reg, tmp226
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp226,
	movq	%rax, %rdi	# D.28437,
	call	count_occurrences	#
	movl	%eax, -88(%rbp)	# tmp227, n_occurrences
	.loc 1 7625 0
	cmpq	$0, -40(%rbp)	#, substed
	je	.L2139	#,
	.loc 1 7626 0
	movq	-40(%rbp), %rax	# substed, tmp228
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp228,
	call	eliminate_regs	#
	movq	%rax, %rcx	#, D.28437
	movq	-104(%rbp), %rax	# insn, tmp229
	movq	32(%rax), %rax	# insn_59(D)->fld[3].rtx, D.28437
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# D.28437,
	movq	%rax, %rdi	# D.28437,
	call	count_occurrences	#
	addl	%eax, -88(%rbp)	# D.28438, n_occurrences
.L2139:
	.loc 1 7629 0
	movl	-88(%rbp), %eax	# n_occurrences, tmp230
	cmpl	-84(%rbp), %eax	# n_inherited, tmp230
	jle	.L2140	#,
	.loc 1 7630 0
	jmp	.L2121	#
.L2140:
	.loc 1 7637 0
	movq	-48(%rbp), %rax	# output_reload_insn, tmp231
	movq	24(%rax), %rax	# output_reload_insn_29->fld[2].rtx, tmp232
	movq	%rax, -72(%rbp)	# tmp232, i1
	jmp	.L2141	#
.L2151:
	.loc 1 7640 0
	movq	-72(%rbp), %rax	# i1, tmp233
	movzwl	(%rax), %eax	# i1_10->code, D.28433
	cmpw	$36, %ax	#, D.28433
	je	.L2142	#,
	.loc 1 7640 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# i1, tmp234
	movzwl	(%rax), %eax	# i1_10->code, D.28433
	cmpw	$33, %ax	#, D.28433
	jne	.L2143	#,
.L2142:
	.loc 1 7641 0 is_stmt 1
	jmp	.L2121	#
.L2143:
	.loc 1 7642 0
	movq	-72(%rbp), %rax	# i1, tmp235
	movzwl	(%rax), %eax	# i1_10->code, D.28433
	cmpw	$32, %ax	#, D.28433
	je	.L2144	#,
	.loc 1 7642 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# i1, tmp236
	movzwl	(%rax), %eax	# i1_10->code, D.28433
	cmpw	$34, %ax	#, D.28433
	jne	.L2145	#,
.L2144:
	.loc 1 7643 0 is_stmt 1
	movq	-72(%rbp), %rax	# i1, tmp237
	movq	32(%rax), %rdx	# i1_10->fld[3].rtx, D.28437
	movq	-80(%rbp), %rax	# reg, tmp238
	movq	%rdx, %rsi	# D.28437,
	movq	%rax, %rdi	# tmp238,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.28438
	je	.L2145	#,
	.loc 1 7647 0
	jmp	.L2146	#
.L2148:
	.loc 1 7649 0
	movq	-72(%rbp), %rax	# i1, tmp239
	movq	32(%rax), %rax	# i1_9->fld[3].rtx, D.28437
	movq	8(%rax), %rdx	# _76->fld[0].rtx, D.28437
	movq	-80(%rbp), %rax	# reg, tmp240
	movq	%rdx, %rsi	# D.28437,
	movq	%rax, %rdi	# tmp240,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28438
	setne	%al	#, D.28440
	movzbl	%al, %eax	# D.28440, D.28438
	addl	%eax, -88(%rbp)	# D.28438, n_occurrences
	.loc 1 7650 0
	movq	-72(%rbp), %rax	# i1, tmp241
	movq	24(%rax), %rax	# i1_9->fld[2].rtx, tmp242
	movq	%rax, -72(%rbp)	# tmp242, i1
.L2146:
	.loc 1 7647 0 discriminator 1
	movq	-72(%rbp), %rax	# i1, tmp243
	movzwl	(%rax), %eax	# i1_9->code, D.28433
	cmpw	$32, %ax	#, D.28433
	jne	.L2147	#,
	.loc 1 7647 0 is_stmt 0 discriminator 2
	movq	-72(%rbp), %rax	# i1, tmp244
	movq	32(%rax), %rax	# i1_9->fld[3].rtx, D.28437
	movzwl	(%rax), %eax	# _74->code, D.28433
	cmpw	$48, %ax	#, D.28433
	je	.L2148	#,
.L2147:
	.loc 1 7652 0 is_stmt 1
	movl	-88(%rbp), %eax	# n_occurrences, tmp245
	cmpl	-84(%rbp), %eax	# n_inherited, tmp245
	jg	.L2149	#,
	.loc 1 7652 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# i1, tmp246
	cmpq	-104(%rbp), %rax	# insn, tmp246
	jne	.L2149	#,
	.loc 1 7653 0 is_stmt 1
	jmp	.L2150	#
.L2149:
	.loc 1 7654 0
	jmp	.L2121	#
.L2145:
	.loc 1 7638 0
	movq	-72(%rbp), %rax	# i1, tmp247
	movq	24(%rax), %rax	# i1_10->fld[2].rtx, tmp248
	movq	%rax, -72(%rbp)	# tmp248, i1
.L2141:
	.loc 1 7637 0 discriminator 1
	movq	-72(%rbp), %rax	# i1, tmp249
	cmpq	-104(%rbp), %rax	# insn, tmp249
	jne	.L2151	#,
.L2150:
	.loc 1 7659 0
	cmpl	$7, -112(%rbp)	#, last_reload_reg
	jle	.L2152	#,
	.loc 1 7659 0 is_stmt 0 discriminator 1
	cmpl	$15, -112(%rbp)	#, last_reload_reg
	jle	.L2153	#,
.L2152:
	.loc 1 7659 0 discriminator 2
	cmpl	$20, -112(%rbp)	#, last_reload_reg
	jle	.L2154	#,
	.loc 1 7659 0 discriminator 1
	cmpl	$28, -112(%rbp)	#, last_reload_reg
	jle	.L2153	#,
.L2154:
	.loc 1 7659 0 discriminator 2
	cmpl	$44, -112(%rbp)	#, last_reload_reg
	jle	.L2155	#,
	.loc 1 7659 0 discriminator 1
	cmpl	$52, -112(%rbp)	#, last_reload_reg
	jle	.L2153	#,
.L2155:
	.loc 1 7659 0 discriminator 2
	cmpl	$28, -112(%rbp)	#, last_reload_reg
	jle	.L2156	#,
	.loc 1 7659 0 discriminator 1
	cmpl	$36, -112(%rbp)	#, last_reload_reg
	jg	.L2156	#,
.L2153:
	movq	-80(%rbp), %rax	# reg, tmp250
	movzbl	2(%rax), %eax	# reg_1->mode, D.28441
	movzbl	%al, %eax	# D.28441, D.28438
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28442
	cmpl	$5, %eax	#, D.28442
	je	.L2157	#,
	.loc 1 7659 0 discriminator 2
	movq	-80(%rbp), %rax	# reg, tmp252
	movzbl	2(%rax), %eax	# reg_1->mode, D.28441
	movzbl	%al, %eax	# D.28441, D.28438
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28442
	cmpl	$6, %eax	#, D.28442
	jne	.L2158	#,
.L2157:
	.loc 1 7659 0 discriminator 1
	movl	$2, %eax	#, iftmp.1201
	jmp	.L2159	#
.L2158:
	movl	$1, %eax	#, iftmp.1201
.L2159:
	.loc 1 7659 0 discriminator 3
	jmp	.L2160	#
.L2156:
	.loc 1 7659 0 discriminator 2
	movq	-80(%rbp), %rax	# reg, tmp254
	movzbl	2(%rax), %eax	# reg_1->mode, D.28441
	cmpb	$18, %al	#, D.28441
	jne	.L2161	#,
	.loc 1 7659 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1204
	andl	$33554432, %eax	#, D.28438
	testl	%eax, %eax	# D.28438
	je	.L2162	#,
	movl	$2, %eax	#, iftmp.1203
	jmp	.L2160	#
.L2162:
	.loc 1 7659 0 discriminator 2
	movl	$3, %eax	#, iftmp.1203
	jmp	.L2160	#
.L2161:
	movq	-80(%rbp), %rax	# reg, tmp255
	movzbl	2(%rax), %eax	# reg_1->mode, D.28441
	cmpb	$24, %al	#, D.28441
	jne	.L2165	#,
	.loc 1 7659 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1207
	andl	$33554432, %eax	#, D.28438
	testl	%eax, %eax	# D.28438
	je	.L2166	#,
	movl	$4, %eax	#, iftmp.1206
	jmp	.L2160	#
.L2166:
	.loc 1 7659 0 discriminator 2
	movl	$6, %eax	#, iftmp.1206
	jmp	.L2160	#
.L2165:
	movq	-80(%rbp), %rax	# reg, tmp256
	movzbl	2(%rax), %eax	# reg_1->mode, D.28441
	movzbl	%al, %eax	# D.28441, D.28438
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28441
	movzbl	%al, %edx	# D.28441, D.28438
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1209
	andl	$33554432, %eax	#, D.28438
	testl	%eax, %eax	# D.28438
	je	.L2169	#,
	.loc 1 7659 0 discriminator 1
	movl	$8, %eax	#, iftmp.1208
	jmp	.L2170	#
.L2169:
	.loc 1 7659 0 discriminator 2
	movl	$4, %eax	#, iftmp.1208
.L2170:
	.loc 1 7659 0 discriminator 3
	addl	%edx, %eax	# D.28438, D.28438
	subl	$1, %eax	#, D.28438
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1211
	andl	$33554432, %edx	#, D.28438
	testl	%edx, %edx	# D.28438
	je	.L2171	#,
	.loc 1 7659 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1210
	jmp	.L2172	#
.L2171:
	.loc 1 7659 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1210
.L2172:
	.loc 1 7659 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1210
.L2160:
	movl	%eax, -92(%rbp)	# iftmp.1200, k
	jmp	.L2173	#
.L2174:
	.loc 1 7661 0 is_stmt 1
	movl	-92(%rbp), %eax	# k, tmp260
	movl	-112(%rbp), %edx	# last_reload_reg, tmp261
	addl	%edx, %eax	# tmp261, D.28438
	cltq
	movq	$0, spill_reg_store(,%rax,8)	#, spill_reg_store
	.loc 1 7662 0
	movl	-92(%rbp), %eax	# k, tmp263
	movl	-112(%rbp), %edx	# last_reload_reg, tmp264
	addl	%edx, %eax	# tmp264, D.28438
	cltq
	movq	$0, spill_reg_stored_to(,%rax,8)	#, spill_reg_stored_to
.L2173:
	.loc 1 7659 0 discriminator 1
	movl	-92(%rbp), %eax	# k, k.1212
	leal	-1(%rax), %edx	#, tmp266
	movl	%edx, -92(%rbp)	# tmp266, k
	testl	%eax, %eax	# k.1212
	jg	.L2174	#,
	.loc 1 7673 0
	movl	-108(%rbp), %eax	# j, tmp268
	movslq	%eax, %rdx	# tmp268, tmp267
	movq	%rdx, %rax	# tmp267, tmp269
	addq	%rax, %rax	# tmp269
	addq	%rdx, %rax	# tmp267, tmp269
	salq	$2, %rax	#, tmp269
	addq	%rdx, %rax	# tmp267, tmp269
	salq	$3, %rax	#, tmp270
	addq	$rld+8, %rax	#, tmp271
	movq	(%rax), %rcx	# rld[j_51(D)].out, D.28437
	movl	-108(%rbp), %eax	# j, tmp273
	movslq	%eax, %rdx	# tmp273, tmp272
	movq	%rdx, %rax	# tmp272, tmp274
	addq	%rax, %rax	# tmp274
	addq	%rdx, %rax	# tmp272, tmp274
	salq	$2, %rax	#, tmp274
	addq	%rdx, %rax	# tmp272, tmp274
	salq	$3, %rax	#, tmp275
	addq	$rld, %rax	#, tmp276
	movq	(%rax), %rax	# rld[j_51(D)].in, D.28437
	cmpq	%rax, %rcx	# D.28437, D.28437
	je	.L2175	#,
	.loc 1 7674 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.1213
	movq	-80(%rbp), %rdx	# reg, tmp277
	movl	8(%rdx), %edx	# reg_1->fld[0].rtuint, D.28434
	movl	%edx, %edx	# D.28434, tmp278
	addq	$4, %rdx	#, tmp279
	movq	(%rax,%rdx,8), %rax	# reg_n_info.1213_129->data.reg, D.28443
	movl	24(%rax), %eax	# _131->deaths, D.28438
	cmpl	$1, %eax	#, D.28438
	jne	.L2175	#,
	.loc 1 7675 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.1214
	movq	-80(%rbp), %rdx	# reg, tmp280
	movl	8(%rdx), %edx	# reg_1->fld[0].rtuint, D.28434
	movl	%edx, %edx	# D.28434, tmp281
	addq	$4, %rdx	#, tmp282
	movq	(%rax,%rdx,8), %rax	# reg_n_info.1214_133->data.reg, D.28443
	movl	12(%rax), %eax	# _135->sets, D.28438
	cmpl	$1, %eax	#, D.28438
	jne	.L2175	#,
	.loc 1 7676 0
	movq	reg_n_info(%rip), %rax	# reg_n_info, reg_n_info.1215
	movq	-80(%rbp), %rdx	# reg, tmp283
	movl	8(%rdx), %edx	# reg_1->fld[0].rtuint, D.28434
	movl	%edx, %edx	# D.28434, tmp284
	addq	$4, %rdx	#, tmp285
	movq	(%rax,%rdx,8), %rax	# reg_n_info.1215_137->data.reg, D.28443
	movl	36(%rax), %eax	# _139->basic_block, D.28438
	testl	%eax, %eax	# D.28438
	js	.L2175	#,
	.loc 1 7677 0
	movq	-80(%rbp), %rax	# reg, tmp286
	movl	8(%rax), %edx	# reg_1->fld[0].rtuint, D.28434
	movq	-104(%rbp), %rax	# insn, tmp287
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp287,
	call	find_regno_note	#
	testq	%rax, %rax	# D.28437
	je	.L2175	#,
.LBB167:
	.loc 1 7685 0
	movq	-104(%rbp), %rax	# insn, tmp288
	movq	16(%rax), %rax	# insn_59(D)->fld[1].rtx, tmp289
	movq	%rax, -56(%rbp)	# tmp289, i2
	jmp	.L2176	#
.L2185:
.LBB168:
	.loc 1 7687 0
	movq	-56(%rbp), %rax	# i2, tmp290
	movzwl	(%rax), %eax	# i2_14->code, D.28433
	movzwl	%ax, %eax	# D.28433, D.28438
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28439
	cmpb	$105, %al	#, D.28439
	jne	.L2177	#,
	.loc 1 7687 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# i2, tmp292
	movq	32(%rax), %rax	# i2_14->fld[3].rtx, D.28437
	movzwl	(%rax), %eax	# _147->code, D.28433
	cmpw	$47, %ax	#, D.28433
	jne	.L2178	#,
	.loc 1 7687 0 discriminator 3
	movq	-56(%rbp), %rax	# i2, tmp293
	movq	32(%rax), %rax	# i2_14->fld[3].rtx, iftmp.1217
	jmp	.L2180	#
.L2178:
	.loc 1 7687 0 discriminator 4
	movq	-56(%rbp), %rax	# i2, tmp294
	movq	32(%rax), %rdx	# i2_14->fld[3].rtx, D.28437
	movq	-56(%rbp), %rax	# i2, tmp295
	movq	%rdx, %rsi	# D.28437,
	movq	%rax, %rdi	# tmp295,
	call	single_set_2	#
	jmp	.L2180	#
.L2177:
	.loc 1 7687 0 discriminator 2
	movl	$0, %eax	#, iftmp.1216
.L2180:
	.loc 1 7687 0 discriminator 5
	movq	%rax, -32(%rbp)	# iftmp.1216, set
	.loc 1 7691 0 is_stmt 1 discriminator 5
	cmpq	$0, -32(%rbp)	#, set
	je	.L2181	#,
	.loc 1 7691 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# set, tmp296
	movq	8(%rax), %rax	# set_154->fld[0].rtx, D.28437
	cmpq	-80(%rbp), %rax	# reg, D.28437
	jne	.L2181	#,
	.loc 1 7692 0 is_stmt 1
	jmp	.L2182	#
.L2181:
	.loc 1 7693 0
	movq	-56(%rbp), %rax	# i2, tmp297
	movzwl	(%rax), %eax	# i2_14->code, D.28433
	cmpw	$36, %ax	#, D.28433
	je	.L2183	#,
	.loc 1 7694 0
	movq	-56(%rbp), %rax	# i2, tmp298
	movzwl	(%rax), %eax	# i2_14->code, D.28433
	cmpw	$33, %ax	#, D.28433
	je	.L2183	#,
	.loc 1 7696 0
	movq	-56(%rbp), %rax	# i2, tmp299
	movzwl	(%rax), %eax	# i2_14->code, D.28433
	cmpw	$32, %ax	#, D.28433
	je	.L2184	#,
	.loc 1 7696 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# i2, tmp300
	movzwl	(%rax), %eax	# i2_14->code, D.28433
	cmpw	$34, %ax	#, D.28433
	jne	.L2182	#,
.L2184:
	.loc 1 7697 0 is_stmt 1
	movq	-56(%rbp), %rax	# i2, tmp301
	movq	32(%rax), %rdx	# i2_14->fld[3].rtx, D.28437
	movq	-80(%rbp), %rax	# reg, tmp302
	movq	%rdx, %rsi	# D.28437,
	movq	%rax, %rdi	# tmp302,
	call	reg_mentioned_p	#
	testl	%eax, %eax	# D.28438
	je	.L2182	#,
	.loc 1 7701 0
	movq	-104(%rbp), %rdx	# insn, tmp303
	movq	-48(%rbp), %rax	# output_reload_insn, tmp304
	movq	%rdx, %rsi	# tmp303,
	movq	%rax, %rdi	# tmp304,
	call	delete_address_reloads	#
	.loc 1 7702 0
	movq	-48(%rbp), %rax	# output_reload_insn, tmp305
	movq	%rax, %rdi	# tmp305,
	call	delete_insn	#
	.loc 1 7703 0
	jmp	.L2121	#
.L2182:
.LBE168:
	.loc 1 7685 0
	movq	-56(%rbp), %rax	# i2, tmp306
	movq	16(%rax), %rax	# i2_14->fld[1].rtx, tmp307
	movq	%rax, -56(%rbp)	# tmp307, i2
.L2176:
	.loc 1 7685 0 is_stmt 0 discriminator 1
	cmpq	$0, -56(%rbp)	#, i2
	jne	.L2185	#,
.L2183:
	.loc 1 7709 0 is_stmt 1
	movq	-104(%rbp), %rax	# insn, tmp308
	movq	16(%rax), %rax	# insn_59(D)->fld[1].rtx, tmp309
	movq	%rax, -56(%rbp)	# tmp309, i2
	jmp	.L2186	#
.L2193:
.LBB169:
	.loc 1 7711 0
	movq	-56(%rbp), %rax	# i2, tmp310
	movzwl	(%rax), %eax	# i2_15->code, D.28433
	movzwl	%ax, %eax	# D.28433, D.28438
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28439
	cmpb	$105, %al	#, D.28439
	jne	.L2187	#,
	.loc 1 7711 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# i2, tmp312
	movq	32(%rax), %rax	# i2_15->fld[3].rtx, D.28437
	movzwl	(%rax), %eax	# _167->code, D.28433
	cmpw	$47, %ax	#, D.28433
	jne	.L2188	#,
	.loc 1 7711 0 discriminator 3
	movq	-56(%rbp), %rax	# i2, tmp313
	movq	32(%rax), %rax	# i2_15->fld[3].rtx, iftmp.1219
	jmp	.L2190	#
.L2188:
	.loc 1 7711 0 discriminator 4
	movq	-56(%rbp), %rax	# i2, tmp314
	movq	32(%rax), %rdx	# i2_15->fld[3].rtx, D.28437
	movq	-56(%rbp), %rax	# i2, tmp315
	movq	%rdx, %rsi	# D.28437,
	movq	%rax, %rdi	# tmp315,
	call	single_set_2	#
	jmp	.L2190	#
.L2187:
	.loc 1 7711 0 discriminator 2
	movl	$0, %eax	#, iftmp.1218
.L2190:
	.loc 1 7711 0 discriminator 5
	movq	%rax, -24(%rbp)	# iftmp.1218, set
	.loc 1 7713 0 is_stmt 1 discriminator 5
	cmpq	$0, -24(%rbp)	#, set
	je	.L2191	#,
	.loc 1 7713 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# set, tmp316
	movq	8(%rax), %rax	# set_174->fld[0].rtx, D.28437
	cmpq	-80(%rbp), %rax	# reg, D.28437
	jne	.L2191	#,
	.loc 1 7715 0 is_stmt 1
	movq	-104(%rbp), %rdx	# insn, tmp317
	movq	-56(%rbp), %rax	# i2, tmp318
	movq	%rdx, %rsi	# tmp317,
	movq	%rax, %rdi	# tmp318,
	call	delete_address_reloads	#
	.loc 1 7716 0
	movq	-56(%rbp), %rax	# i2, tmp319
	movq	%rax, %rdi	# tmp319,
	call	delete_insn	#
.L2191:
	.loc 1 7718 0
	movq	-56(%rbp), %rax	# i2, tmp320
	movzwl	(%rax), %eax	# i2_15->code, D.28433
	cmpw	$36, %ax	#, D.28433
	je	.L2192	#,
	.loc 1 7719 0
	movq	-56(%rbp), %rax	# i2, tmp321
	movzwl	(%rax), %eax	# i2_15->code, D.28433
	cmpw	$33, %ax	#, D.28433
	je	.L2192	#,
.LBE169:
	.loc 1 7709 0
	movq	-56(%rbp), %rax	# i2, tmp322
	movq	16(%rax), %rax	# i2_15->fld[1].rtx, tmp323
	movq	%rax, -56(%rbp)	# tmp323, i2
.L2186:
	.loc 1 7709 0 is_stmt 0 discriminator 1
	cmpq	$0, -56(%rbp)	#, i2
	jne	.L2193	#,
.L2192:
	.loc 1 7724 0 is_stmt 1
	movq	reg_renumber(%rip), %rdx	# reg_renumber, reg_renumber.1220
	movq	-80(%rbp), %rax	# reg, tmp324
	movl	8(%rax), %eax	# reg_1->fld[0].rtuint, D.28434
	movl	%eax, %eax	# D.28434, D.28435
	addq	%rax, %rax	# D.28435
	leaq	(%rdx,%rax), %rcx	#, D.28444
	movl	-108(%rbp), %eax	# j, tmp326
	movslq	%eax, %rdx	# tmp326, tmp325
	movq	%rdx, %rax	# tmp325, tmp327
	addq	%rax, %rax	# tmp327
	addq	%rdx, %rax	# tmp325, tmp327
	salq	$2, %rax	#, tmp327
	addq	%rdx, %rax	# tmp325, tmp327
	salq	$3, %rax	#, tmp328
	addq	$rld+64, %rax	#, tmp329
	movq	(%rax), %rax	# rld[j_51(D)].reg_rtx, D.28437
	movl	8(%rax), %eax	# _184->fld[0].rtuint, D.28434
	movw	%ax, (%rcx)	# D.28445, *_183
	.loc 1 7725 0
	movq	-80(%rbp), %rax	# reg, tmp330
	movl	8(%rax), %eax	# reg_1->fld[0].rtuint, D.28434
	movl	$-1, %esi	#,
	movl	%eax, %edi	# D.28438,
	call	alter_reg	#
.LBE167:
	.loc 1 7678 0
	jmp	.L2121	#
.L2175:
	.loc 1 7729 0
	movq	-104(%rbp), %rdx	# insn, tmp331
	movq	-48(%rbp), %rax	# output_reload_insn, tmp332
	movq	%rdx, %rsi	# tmp331,
	movq	%rax, %rdi	# tmp332,
	call	delete_address_reloads	#
	.loc 1 7730 0
	movq	-48(%rbp), %rax	# output_reload_insn, tmp333
	movq	%rax, %rdi	# tmp333,
	call	delete_insn	#
.L2121:
	.loc 1 7732 0
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE62:
	.size	delete_output_reload, .-delete_output_reload
	.type	delete_address_reloads, @function
delete_address_reloads:
.LFB63:
	.loc 1 7740 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# dead_insn, dead_insn
	movq	%rsi, -64(%rbp)	# current_insn, current_insn
	.loc 1 7741 0
	movq	-56(%rbp), %rax	# dead_insn, tmp110
	movzwl	(%rax), %eax	# dead_insn_7(D)->code, D.28446
	movzwl	%ax, %eax	# D.28446, D.28447
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28448
	cmpb	$105, %al	#, D.28448
	jne	.L2195	#,
	.loc 1 7741 0 is_stmt 0 discriminator 1
	movq	-56(%rbp), %rax	# dead_insn, tmp112
	movq	32(%rax), %rax	# dead_insn_7(D)->fld[3].rtx, D.28449
	movzwl	(%rax), %eax	# _11->code, D.28446
	cmpw	$47, %ax	#, D.28446
	jne	.L2196	#,
	.loc 1 7741 0 discriminator 3
	movq	-56(%rbp), %rax	# dead_insn, tmp113
	movq	32(%rax), %rax	# dead_insn_7(D)->fld[3].rtx, iftmp.1222
	jmp	.L2198	#
.L2196:
	.loc 1 7741 0 discriminator 4
	movq	-56(%rbp), %rax	# dead_insn, tmp114
	movq	32(%rax), %rdx	# dead_insn_7(D)->fld[3].rtx, D.28449
	movq	-56(%rbp), %rax	# dead_insn, tmp115
	movq	%rdx, %rsi	# D.28449,
	movq	%rax, %rdi	# tmp115,
	call	single_set_2	#
	jmp	.L2198	#
.L2195:
	.loc 1 7741 0 discriminator 2
	movl	$0, %eax	#, iftmp.1221
.L2198:
	.loc 1 7741 0 discriminator 5
	movq	%rax, -48(%rbp)	# iftmp.1221, set
	.loc 1 7743 0 is_stmt 1 discriminator 5
	cmpq	$0, -48(%rbp)	#, set
	je	.L2199	#,
.LBB170:
	.loc 1 7745 0
	movq	-48(%rbp), %rax	# set, tmp116
	movq	8(%rax), %rax	# set_18->fld[0].rtx, tmp117
	movq	%rax, -40(%rbp)	# tmp117, dst
	.loc 1 7746 0
	movq	-40(%rbp), %rax	# dst, tmp118
	movzwl	(%rax), %eax	# dst_19->code, D.28446
	cmpw	$66, %ax	#, D.28446
	jne	.L2199	#,
	.loc 1 7747 0
	movq	-40(%rbp), %rax	# dst, tmp119
	movq	8(%rax), %rcx	# dst_19->fld[0].rtx, D.28449
	movq	-64(%rbp), %rdx	# current_insn, tmp120
	movq	-56(%rbp), %rax	# dead_insn, tmp121
	movq	%rcx, %rsi	# D.28449,
	movq	%rax, %rdi	# tmp121,
	call	delete_address_reloads_1	#
.L2199:
.LBE170:
	.loc 1 7751 0
	movq	-56(%rbp), %rax	# dead_insn, tmp122
	movq	16(%rax), %rax	# dead_insn_7(D)->fld[1].rtx, tmp123
	movq	%rax, -32(%rbp)	# tmp123, prev
	.loc 1 7752 0
	movq	-56(%rbp), %rax	# dead_insn, tmp124
	movq	24(%rax), %rax	# dead_insn_7(D)->fld[2].rtx, tmp125
	movq	%rax, -24(%rbp)	# tmp125, next
	.loc 1 7753 0
	cmpq	$0, -32(%rbp)	#, prev
	je	.L2200	#,
	.loc 1 7753 0 is_stmt 0 discriminator 1
	cmpq	$0, -24(%rbp)	#, next
	jne	.L2201	#,
.L2200:
	.loc 1 7754 0 is_stmt 1
	jmp	.L2194	#
.L2201:
	.loc 1 7755 0
	movq	-24(%rbp), %rax	# next, tmp126
	movzwl	(%rax), %eax	# next_24->code, D.28446
	movzwl	%ax, %eax	# D.28446, D.28447
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28448
	cmpb	$105, %al	#, D.28448
	jne	.L2203	#,
	.loc 1 7755 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# next, tmp128
	movq	32(%rax), %rax	# next_24->fld[3].rtx, D.28449
	movzwl	(%rax), %eax	# _28->code, D.28446
	cmpw	$47, %ax	#, D.28446
	jne	.L2204	#,
	.loc 1 7755 0 discriminator 3
	movq	-24(%rbp), %rax	# next, tmp129
	movq	32(%rax), %rax	# next_24->fld[3].rtx, iftmp.1224
	jmp	.L2206	#
.L2204:
	.loc 1 7755 0 discriminator 4
	movq	-24(%rbp), %rax	# next, tmp130
	movq	32(%rax), %rdx	# next_24->fld[3].rtx, D.28449
	movq	-24(%rbp), %rax	# next, tmp131
	movq	%rdx, %rsi	# D.28449,
	movq	%rax, %rdi	# tmp131,
	call	single_set_2	#
	jmp	.L2206	#
.L2203:
	.loc 1 7755 0 discriminator 2
	movl	$0, %eax	#, iftmp.1223
.L2206:
	.loc 1 7755 0 discriminator 5
	movq	%rax, -48(%rbp)	# iftmp.1223, set
	.loc 1 7756 0 is_stmt 1 discriminator 5
	movq	-32(%rbp), %rax	# prev, tmp132
	movzwl	(%rax), %eax	# prev_23->code, D.28446
	movzwl	%ax, %eax	# D.28446, D.28447
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28448
	cmpb	$105, %al	#, D.28448
	jne	.L2207	#,
	.loc 1 7756 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# prev, tmp134
	movq	32(%rax), %rax	# prev_23->fld[3].rtx, D.28449
	movzwl	(%rax), %eax	# _39->code, D.28446
	cmpw	$47, %ax	#, D.28446
	jne	.L2208	#,
	.loc 1 7756 0 discriminator 3
	movq	-32(%rbp), %rax	# prev, tmp135
	movq	32(%rax), %rax	# prev_23->fld[3].rtx, iftmp.1226
	jmp	.L2210	#
.L2208:
	.loc 1 7756 0 discriminator 4
	movq	-32(%rbp), %rax	# prev, tmp136
	movq	32(%rax), %rdx	# prev_23->fld[3].rtx, D.28449
	movq	-32(%rbp), %rax	# prev, tmp137
	movq	%rdx, %rsi	# D.28449,
	movq	%rax, %rdi	# tmp137,
	call	single_set_2	#
	jmp	.L2210	#
.L2207:
	.loc 1 7756 0 discriminator 2
	movl	$0, %eax	#, iftmp.1225
.L2210:
	.loc 1 7756 0 discriminator 5
	movq	%rax, -16(%rbp)	# iftmp.1225, set2
	.loc 1 7757 0 is_stmt 1 discriminator 5
	cmpq	$0, -48(%rbp)	#, set
	je	.L2211	#,
	.loc 1 7757 0 is_stmt 0 discriminator 1
	cmpq	$0, -16(%rbp)	#, set2
	je	.L2211	#,
	.loc 1 7758 0 is_stmt 1
	movq	-48(%rbp), %rax	# set, tmp138
	movq	16(%rax), %rax	# set_35->fld[1].rtx, D.28449
	movzwl	(%rax), %eax	# _47->code, D.28446
	cmpw	$75, %ax	#, D.28446
	jne	.L2211	#,
	.loc 1 7758 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# set2, tmp139
	movq	16(%rax), %rax	# set2_46->fld[1].rtx, D.28449
	movzwl	(%rax), %eax	# _49->code, D.28446
	cmpw	$75, %ax	#, D.28446
	jne	.L2211	#,
	.loc 1 7759 0 is_stmt 1
	movq	-48(%rbp), %rax	# set, tmp140
	movq	16(%rax), %rax	# set_35->fld[1].rtx, D.28449
	movq	16(%rax), %rax	# _51->fld[1].rtx, D.28449
	movzwl	(%rax), %eax	# _52->code, D.28446
	cmpw	$54, %ax	#, D.28446
	jne	.L2211	#,
	.loc 1 7760 0
	movq	-16(%rbp), %rax	# set2, tmp141
	movq	16(%rax), %rax	# set2_46->fld[1].rtx, D.28449
	movq	16(%rax), %rax	# _54->fld[1].rtx, D.28449
	movzwl	(%rax), %eax	# _55->code, D.28446
	cmpw	$54, %ax	#, D.28446
	je	.L2212	#,
.L2211:
	.loc 1 7761 0
	jmp	.L2194	#
.L2212:
	.loc 1 7762 0
	movq	-48(%rbp), %rax	# set, tmp142
	movq	8(%rax), %rax	# set_35->fld[0].rtx, tmp143
	movq	%rax, -8(%rbp)	# tmp143, dst
	.loc 1 7763 0
	movq	-16(%rbp), %rax	# set2, tmp144
	movq	8(%rax), %rdx	# set2_46->fld[0].rtx, D.28449
	movq	-8(%rbp), %rax	# dst, tmp145
	movq	%rdx, %rsi	# D.28449,
	movq	%rax, %rdi	# tmp145,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28447
	je	.L2213	#,
	.loc 1 7764 0
	movq	-48(%rbp), %rax	# set, tmp146
	movq	16(%rax), %rax	# set_35->fld[1].rtx, D.28449
	movq	8(%rax), %rdx	# _60->fld[0].rtx, D.28449
	movq	-8(%rbp), %rax	# dst, tmp147
	movq	%rdx, %rsi	# D.28449,
	movq	%rax, %rdi	# tmp147,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28447
	je	.L2213	#,
	.loc 1 7765 0
	movq	-16(%rbp), %rax	# set2, tmp148
	movq	16(%rax), %rax	# set2_46->fld[1].rtx, D.28449
	movq	8(%rax), %rdx	# _63->fld[0].rtx, D.28449
	movq	-8(%rbp), %rax	# dst, tmp149
	movq	%rdx, %rsi	# D.28449,
	movq	%rax, %rdi	# tmp149,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28447
	je	.L2213	#,
	.loc 1 7766 0
	movq	-48(%rbp), %rax	# set, tmp150
	movq	16(%rax), %rax	# set_35->fld[1].rtx, D.28449
	movq	16(%rax), %rax	# _66->fld[1].rtx, D.28449
	movq	8(%rax), %rdx	# _67->fld[0].rtwint, D.28450
	.loc 1 7767 0
	movq	-16(%rbp), %rax	# set2, tmp151
	movq	16(%rax), %rax	# set2_46->fld[1].rtx, D.28449
	movq	16(%rax), %rax	# _69->fld[1].rtx, D.28449
	movq	8(%rax), %rax	# _70->fld[0].rtwint, D.28450
	negq	%rax	# D.28450
	.loc 1 7766 0
	cmpq	%rax, %rdx	# D.28450, D.28450
	je	.L2214	#,
.L2213:
	.loc 1 7768 0
	jmp	.L2194	#
.L2214:
	.loc 1 7769 0
	movq	-32(%rbp), %rax	# prev, tmp152
	movq	%rax, %rdi	# tmp152,
	call	delete_related_insns	#
	.loc 1 7770 0
	movq	-24(%rbp), %rax	# next, tmp153
	movq	%rax, %rdi	# tmp153,
	call	delete_related_insns	#
.L2194:
	.loc 1 7771 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE63:
	.size	delete_address_reloads, .-delete_address_reloads
	.type	delete_address_reloads_1, @function
delete_address_reloads_1:
.LFB64:
	.loc 1 7777 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -72(%rbp)	# dead_insn, dead_insn
	movq	%rsi, -80(%rbp)	# x, x
	movq	%rdx, -88(%rbp)	# current_insn, current_insn
	.loc 1 7780 0
	movq	-80(%rbp), %rax	# x, tmp120
	movzwl	(%rax), %eax	# x_10(D)->code, D.28451
	movzwl	%ax, %eax	# D.28451, tmp121
	movl	%eax, -44(%rbp)	# tmp121, code
	.loc 1 7782 0
	cmpl	$61, -44(%rbp)	#, code
	je	.L2216	#,
.LBB171:
	.loc 1 7784 0
	movl	-44(%rbp), %eax	# code, code.1227
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp123
	movq	%rax, -24(%rbp)	# tmp123, fmt
	.loc 1 7785 0
	movl	-44(%rbp), %eax	# code, code.1228
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.28452
	movzbl	%al, %eax	# D.28452, D.28453
	subl	$1, %eax	#, tmp125
	movl	%eax, -52(%rbp)	# tmp125, i
	jmp	.L2217	#
.L2222:
	.loc 1 7787 0
	movl	-52(%rbp), %eax	# i, tmp126
	movslq	%eax, %rdx	# tmp126, D.28454
	movq	-24(%rbp), %rax	# fmt, tmp127
	addq	%rdx, %rax	# D.28454, D.28455
	movzbl	(%rax), %eax	# *_20, D.28456
	cmpb	$101, %al	#, D.28456
	jne	.L2218	#,
	.loc 1 7788 0
	movq	-80(%rbp), %rax	# x, tmp128
	movl	-52(%rbp), %edx	# i, tmp130
	movslq	%edx, %rdx	# tmp130, tmp129
	movq	8(%rax,%rdx,8), %rcx	# x_10(D)->fld[i_3].rtx, D.28457
	movq	-88(%rbp), %rdx	# current_insn, tmp131
	movq	-72(%rbp), %rax	# dead_insn, tmp132
	movq	%rcx, %rsi	# D.28457,
	movq	%rax, %rdi	# tmp132,
	call	delete_address_reloads_1	#
	jmp	.L2219	#
.L2218:
	.loc 1 7789 0
	movl	-52(%rbp), %eax	# i, tmp133
	movslq	%eax, %rdx	# tmp133, D.28454
	movq	-24(%rbp), %rax	# fmt, tmp134
	addq	%rdx, %rax	# D.28454, D.28455
	movzbl	(%rax), %eax	# *_26, D.28456
	cmpb	$69, %al	#, D.28456
	jne	.L2219	#,
	.loc 1 7791 0
	movq	-80(%rbp), %rax	# x, tmp135
	movl	-52(%rbp), %edx	# i, tmp137
	movslq	%edx, %rdx	# tmp137, tmp136
	movq	8(%rax,%rdx,8), %rax	# x_10(D)->fld[i_3].rtvec, D.28458
	movl	(%rax), %eax	# _28->num_elem, D.28453
	subl	$1, %eax	#, tmp138
	movl	%eax, -48(%rbp)	# tmp138, j
	jmp	.L2220	#
.L2221:
	.loc 1 7792 0 discriminator 2
	movq	-80(%rbp), %rax	# x, tmp139
	movl	-52(%rbp), %edx	# i, tmp141
	movslq	%edx, %rdx	# tmp141, tmp140
	movq	8(%rax,%rdx,8), %rax	# x_10(D)->fld[i_3].rtvec, D.28458
	movl	-48(%rbp), %edx	# j, tmp143
	movslq	%edx, %rdx	# tmp143, tmp142
	movq	8(%rax,%rdx,8), %rcx	# _31->elem, D.28457
	movq	-88(%rbp), %rdx	# current_insn, tmp144
	movq	-72(%rbp), %rax	# dead_insn, tmp145
	movq	%rcx, %rsi	# D.28457,
	movq	%rax, %rdi	# tmp145,
	call	delete_address_reloads_1	#
	.loc 1 7791 0 discriminator 2
	subl	$1, -48(%rbp)	#, j
.L2220:
	.loc 1 7791 0 is_stmt 0 discriminator 1
	cmpl	$0, -48(%rbp)	#, j
	jns	.L2221	#,
.L2219:
	.loc 1 7785 0 is_stmt 1
	subl	$1, -52(%rbp)	#, i
.L2217:
	.loc 1 7785 0 is_stmt 0 discriminator 1
	cmpl	$0, -52(%rbp)	#, i
	jns	.L2222	#,
	.loc 1 7796 0 is_stmt 1
	jmp	.L2215	#
.L2216:
.LBE171:
	.loc 1 7799 0
	movq	-80(%rbp), %rax	# x, tmp146
	movl	8(%rax), %eax	# x_10(D)->fld[0].rtuint, D.28459
	movl	%eax, %eax	# D.28459, tmp147
	movzwl	spill_reg_order(%rax,%rax), %eax	# spill_reg_order, D.28460
	testw	%ax, %ax	# D.28460
	jns	.L2224	#,
	.loc 1 7800 0
	jmp	.L2215	#
.L2224:
	.loc 1 7804 0
	movq	-72(%rbp), %rax	# dead_insn, tmp148
	movq	16(%rax), %rax	# dead_insn_23(D)->fld[1].rtx, tmp149
	movq	%rax, -40(%rbp)	# tmp149, prev
	jmp	.L2225	#
.L2232:
	.loc 1 7806 0
	movq	-40(%rbp), %rax	# prev, tmp150
	movzwl	(%rax), %eax	# prev_1->code, D.28451
	movzwl	%ax, %eax	# D.28451, tmp151
	movl	%eax, -44(%rbp)	# tmp151, code
	.loc 1 7807 0
	cmpl	$36, -44(%rbp)	#, code
	je	.L2226	#,
	.loc 1 7807 0 is_stmt 0 discriminator 1
	cmpl	$33, -44(%rbp)	#, code
	jne	.L2227	#,
.L2226:
	.loc 1 7808 0 is_stmt 1
	jmp	.L2215	#
.L2227:
	.loc 1 7809 0
	movl	-44(%rbp), %eax	# code, code.1229
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28456
	cmpb	$105, %al	#, D.28456
	je	.L2228	#,
	.loc 1 7810 0
	jmp	.L2229	#
.L2228:
	.loc 1 7811 0
	movq	-40(%rbp), %rax	# prev, tmp153
	movq	32(%rax), %rdx	# prev_1->fld[3].rtx, D.28457
	movq	-80(%rbp), %rax	# x, tmp154
	movq	%rdx, %rsi	# D.28457,
	movq	%rax, %rdi	# tmp154,
	call	reg_set_p	#
	testl	%eax, %eax	# D.28453
	je	.L2230	#,
	.loc 1 7812 0
	jmp	.L2231	#
.L2230:
	.loc 1 7813 0
	movq	-40(%rbp), %rax	# prev, tmp155
	movq	32(%rax), %rdx	# prev_1->fld[3].rtx, D.28457
	movq	-80(%rbp), %rax	# x, tmp156
	movq	%rdx, %rsi	# D.28457,
	movq	%rax, %rdi	# tmp156,
	call	reg_referenced_p	#
	testl	%eax, %eax	# D.28453
	je	.L2229	#,
	.loc 1 7814 0
	jmp	.L2215	#
.L2229:
	.loc 1 7804 0
	movq	-40(%rbp), %rax	# prev, tmp157
	movq	16(%rax), %rax	# prev_1->fld[1].rtx, tmp158
	movq	%rax, -40(%rbp)	# tmp158, prev
.L2225:
	.loc 1 7804 0 is_stmt 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, prev
	jne	.L2232	#,
.L2231:
	.loc 1 7816 0 is_stmt 1
	cmpq	$0, -40(%rbp)	#, prev
	je	.L2233	#,
	.loc 1 7816 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# prev, tmp159
	movl	8(%rax), %edx	# prev_1->fld[0].rtint, D.28453
	movl	reload_first_uid(%rip), %eax	# reload_first_uid, reload_first_uid.1230
	cmpl	%eax, %edx	# reload_first_uid.1230, D.28453
	jge	.L2234	#,
.L2233:
	.loc 1 7817 0 is_stmt 1
	jmp	.L2215	#
.L2234:
	.loc 1 7819 0
	movq	-40(%rbp), %rax	# prev, tmp160
	movzwl	(%rax), %eax	# prev_1->code, D.28451
	movzwl	%ax, %eax	# D.28451, D.28453
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28456
	cmpb	$105, %al	#, D.28456
	jne	.L2235	#,
	.loc 1 7819 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# prev, tmp162
	movq	32(%rax), %rax	# prev_1->fld[3].rtx, D.28457
	movzwl	(%rax), %eax	# _52->code, D.28451
	cmpw	$47, %ax	#, D.28451
	jne	.L2236	#,
	.loc 1 7819 0 discriminator 3
	movq	-40(%rbp), %rax	# prev, tmp163
	movq	32(%rax), %rax	# prev_1->fld[3].rtx, iftmp.1232
	jmp	.L2238	#
.L2236:
	.loc 1 7819 0 discriminator 4
	movq	-40(%rbp), %rax	# prev, tmp164
	movq	32(%rax), %rdx	# prev_1->fld[3].rtx, D.28457
	movq	-40(%rbp), %rax	# prev, tmp165
	movq	%rdx, %rsi	# D.28457,
	movq	%rax, %rdi	# tmp165,
	call	single_set_2	#
	jmp	.L2238	#
.L2235:
	.loc 1 7819 0 discriminator 2
	movl	$0, %eax	#, iftmp.1231
.L2238:
	.loc 1 7819 0 discriminator 5
	movq	%rax, -16(%rbp)	# iftmp.1231, set
	.loc 1 7820 0 is_stmt 1 discriminator 5
	cmpq	$0, -16(%rbp)	#, set
	jne	.L2239	#,
	.loc 1 7821 0
	jmp	.L2215	#
.L2239:
	.loc 1 7822 0
	movq	-16(%rbp), %rax	# set, tmp166
	movq	8(%rax), %rax	# set_59->fld[0].rtx, tmp167
	movq	%rax, -8(%rbp)	# tmp167, dst
	.loc 1 7823 0
	movq	-8(%rbp), %rax	# dst, tmp168
	movzwl	(%rax), %eax	# dst_60->code, D.28451
	cmpw	$61, %ax	#, D.28451
	jne	.L2240	#,
	.loc 1 7824 0
	movq	-80(%rbp), %rdx	# x, tmp169
	movq	-8(%rbp), %rax	# dst, tmp170
	movq	%rdx, %rsi	# tmp169,
	movq	%rax, %rdi	# tmp170,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28453
	jne	.L2241	#,
.L2240:
	.loc 1 7825 0
	jmp	.L2215	#
.L2241:
	.loc 1 7826 0
	movq	-72(%rbp), %rax	# dead_insn, tmp171
	movq	32(%rax), %rdx	# dead_insn_23(D)->fld[3].rtx, D.28457
	movq	-8(%rbp), %rax	# dst, tmp172
	movq	%rdx, %rsi	# D.28457,
	movq	%rax, %rdi	# tmp172,
	call	reg_set_p	#
	testl	%eax, %eax	# D.28453
	jne	.L2242	#,
	.loc 1 7830 0
	movq	-72(%rbp), %rax	# dead_insn, tmp173
	movq	24(%rax), %rax	# dead_insn_23(D)->fld[2].rtx, tmp174
	movq	%rax, -32(%rbp)	# tmp174, i2
	jmp	.L2243	#
.L2265:
	.loc 1 7832 0
	movq	-32(%rbp), %rax	# i2, tmp175
	movzwl	(%rax), %eax	# i2_2->code, D.28451
	cmpw	$36, %ax	#, D.28451
	jne	.L2244	#,
	.loc 1 7833 0
	jmp	.L2242	#
.L2244:
	.loc 1 7834 0
	movq	-32(%rbp), %rax	# i2, tmp176
	movzwl	(%rax), %eax	# i2_2->code, D.28451
	movzwl	%ax, %eax	# D.28451, D.28453
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28456
	cmpb	$105, %al	#, D.28456
	je	.L2245	#,
	.loc 1 7835 0
	jmp	.L2246	#
.L2245:
	.loc 1 7836 0
	movq	-32(%rbp), %rax	# i2, tmp178
	movq	32(%rax), %rdx	# i2_2->fld[3].rtx, D.28457
	movq	-8(%rbp), %rax	# dst, tmp179
	movq	%rdx, %rsi	# D.28457,
	movq	%rax, %rdi	# tmp179,
	call	reg_referenced_p	#
	testl	%eax, %eax	# D.28453
	je	.L2247	#,
	.loc 1 7842 0
	movq	-32(%rbp), %rax	# i2, tmp180
	cmpq	-88(%rbp), %rax	# current_insn, tmp180
	jne	.L2248	#,
	.loc 1 7844 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1233
	subl	$1, %eax	#, tmp181
	movl	%eax, -48(%rbp)	# tmp181, j
	jmp	.L2249	#
.L2253:
	.loc 1 7845 0
	movl	-48(%rbp), %eax	# j, tmp183
	movslq	%eax, %rdx	# tmp183, tmp182
	movq	%rdx, %rax	# tmp182, tmp184
	addq	%rax, %rax	# tmp184
	addq	%rdx, %rax	# tmp182, tmp184
	salq	$2, %rax	#, tmp184
	addq	%rdx, %rax	# tmp182, tmp184
	salq	$3, %rax	#, tmp185
	addq	$rld+64, %rax	#, tmp186
	movq	(%rax), %rax	# rld[j_5].reg_rtx, D.28457
	cmpq	-8(%rbp), %rax	# dst, D.28457
	jne	.L2250	#,
	.loc 1 7845 0 is_stmt 0 discriminator 1
	movl	-48(%rbp), %eax	# j, tmp188
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28456
	testb	%al, %al	# D.28456
	jne	.L2251	#,
.L2250:
	.loc 1 7846 0 is_stmt 1
	movl	-48(%rbp), %eax	# j, tmp190
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28457
	cmpq	-8(%rbp), %rax	# dst, D.28457
	jne	.L2252	#,
.L2251:
	.loc 1 7847 0
	jmp	.L2215	#
.L2252:
	.loc 1 7844 0
	subl	$1, -48(%rbp)	#, j
.L2249:
	.loc 1 7844 0 is_stmt 0 discriminator 1
	cmpl	$0, -48(%rbp)	#, j
	jns	.L2253	#,
	.loc 1 7848 0 is_stmt 1
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1234
	subl	$1, %eax	#, tmp191
	movl	%eax, -48(%rbp)	# tmp191, j
	jmp	.L2254	#
.L2257:
	.loc 1 7849 0
	movl	-48(%rbp), %eax	# j, tmp193
	movslq	%eax, %rdx	# tmp193, tmp192
	movq	%rdx, %rax	# tmp192, tmp194
	addq	%rax, %rax	# tmp194
	addq	%rdx, %rax	# tmp192, tmp194
	salq	$2, %rax	#, tmp194
	addq	%rdx, %rax	# tmp192, tmp194
	salq	$3, %rax	#, tmp195
	addq	$rld, %rax	#, tmp196
	movq	(%rax), %rax	# rld[j_6].in, D.28457
	testq	%rax, %rax	# D.28457
	je	.L2255	#,
	.loc 1 7849 0 is_stmt 0 discriminator 1
	movl	-48(%rbp), %eax	# j, tmp198
	movslq	%eax, %rdx	# tmp198, tmp197
	movq	%rdx, %rax	# tmp197, tmp199
	addq	%rax, %rax	# tmp199
	addq	%rdx, %rax	# tmp197, tmp199
	salq	$2, %rax	#, tmp199
	addq	%rdx, %rax	# tmp197, tmp199
	salq	$3, %rax	#, tmp200
	addq	$rld+64, %rax	#, tmp201
	movq	(%rax), %rax	# rld[j_6].reg_rtx, D.28457
	cmpq	-8(%rbp), %rax	# dst, D.28457
	jne	.L2255	#,
	.loc 1 7850 0 is_stmt 1
	jmp	.L2256	#
.L2255:
	.loc 1 7848 0
	subl	$1, -48(%rbp)	#, j
.L2254:
	.loc 1 7848 0 is_stmt 0 discriminator 1
	cmpl	$0, -48(%rbp)	#, j
	jns	.L2257	#,
.L2256:
	.loc 1 7851 0 is_stmt 1
	cmpl	$0, -48(%rbp)	#, j
	js	.L2248	#,
	.loc 1 7852 0
	jmp	.L2242	#
.L2248:
	.loc 1 7854 0
	jmp	.L2215	#
.L2247:
	.loc 1 7856 0
	movq	-32(%rbp), %rax	# i2, tmp202
	movzwl	(%rax), %eax	# i2_2->code, D.28451
	cmpw	$33, %ax	#, D.28451
	jne	.L2258	#,
	.loc 1 7857 0
	jmp	.L2242	#
.L2258:
	.loc 1 7861 0
	movq	-32(%rbp), %rax	# i2, tmp203
	cmpq	-88(%rbp), %rax	# current_insn, tmp203
	jne	.L2259	#,
	.loc 1 7863 0
	movl	n_reloads(%rip), %eax	# n_reloads, n_reloads.1235
	subl	$1, %eax	#, tmp204
	movl	%eax, -48(%rbp)	# tmp204, j
	jmp	.L2260	#
.L2264:
	.loc 1 7864 0
	movl	-48(%rbp), %eax	# j, tmp206
	movslq	%eax, %rdx	# tmp206, tmp205
	movq	%rdx, %rax	# tmp205, tmp207
	addq	%rax, %rax	# tmp207
	addq	%rdx, %rax	# tmp205, tmp207
	salq	$2, %rax	#, tmp207
	addq	%rdx, %rax	# tmp205, tmp207
	salq	$3, %rax	#, tmp208
	addq	$rld+64, %rax	#, tmp209
	movq	(%rax), %rax	# rld[j_7].reg_rtx, D.28457
	cmpq	-8(%rbp), %rax	# dst, D.28457
	jne	.L2261	#,
	.loc 1 7864 0 is_stmt 0 discriminator 1
	movl	-48(%rbp), %eax	# j, tmp211
	cltq
	movzbl	reload_inherited(%rax), %eax	# reload_inherited, D.28456
	testb	%al, %al	# D.28456
	jne	.L2262	#,
.L2261:
	.loc 1 7865 0 is_stmt 1
	movl	-48(%rbp), %eax	# j, tmp213
	cltq
	movq	reload_override_in(,%rax,8), %rax	# reload_override_in, D.28457
	cmpq	-8(%rbp), %rax	# dst, D.28457
	jne	.L2263	#,
.L2262:
	.loc 1 7866 0
	jmp	.L2215	#
.L2263:
	.loc 1 7863 0
	subl	$1, -48(%rbp)	#, j
.L2260:
	.loc 1 7863 0 is_stmt 0 discriminator 1
	cmpl	$0, -48(%rbp)	#, j
	jns	.L2264	#,
.L2259:
	.loc 1 7873 0 is_stmt 1
	movq	-32(%rbp), %rax	# i2, tmp214
	movq	32(%rax), %rdx	# i2_2->fld[3].rtx, D.28457
	movq	-8(%rbp), %rax	# dst, tmp215
	movq	%rdx, %rsi	# D.28457,
	movq	%rax, %rdi	# tmp215,
	call	reg_set_p	#
	testl	%eax, %eax	# D.28453
	je	.L2246	#,
	.loc 1 7874 0
	jmp	.L2242	#
.L2246:
	.loc 1 7830 0
	movq	-32(%rbp), %rax	# i2, tmp216
	movq	24(%rax), %rax	# i2_2->fld[2].rtx, tmp217
	movq	%rax, -32(%rbp)	# tmp217, i2
.L2243:
	.loc 1 7830 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, i2
	jne	.L2265	#,
.L2242:
	.loc 1 7877 0 is_stmt 1
	movq	-16(%rbp), %rax	# set, tmp218
	movq	16(%rax), %rcx	# set_59->fld[1].rtx, D.28457
	movq	-88(%rbp), %rdx	# current_insn, tmp219
	movq	-40(%rbp), %rax	# prev, tmp220
	movq	%rcx, %rsi	# D.28457,
	movq	%rax, %rdi	# tmp220,
	call	delete_address_reloads_1	#
	.loc 1 7878 0
	movq	-8(%rbp), %rax	# dst, tmp221
	movl	8(%rax), %eax	# dst_60->fld[0].rtuint, D.28459
	movl	%eax, %eax	# D.28459, tmp222
	movl	$-1, reg_reloaded_contents(,%rax,4)	#, reg_reloaded_contents
	.loc 1 7879 0
	movq	-40(%rbp), %rax	# prev, tmp223
	movq	%rax, %rdi	# tmp223,
	call	delete_insn	#
.L2215:
	.loc 1 7880 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE64:
	.size	delete_address_reloads_1, .-delete_address_reloads_1
	.type	inc_for_reload, @function
inc_for_reload:
.LFB65:
	.loc 1 7898 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -72(%rbp)	# reloadreg, reloadreg
	movq	%rsi, -80(%rbp)	# in, in
	movq	%rdx, -88(%rbp)	# value, value
	movl	%ecx, -92(%rbp)	# inc_amount, inc_amount
	.loc 1 7900 0
	movq	-88(%rbp), %rax	# value, tmp92
	movq	8(%rax), %rax	# value_7(D)->fld[0].rtx, tmp93
	movq	%rax, -40(%rbp)	# tmp93, incloc
	.loc 1 7902 0
	movq	-88(%rbp), %rax	# value, tmp94
	movzwl	(%rax), %eax	# value_7(D)->code, D.28462
	cmpw	$98, %ax	#, D.28462
	je	.L2267	#,
	.loc 1 7902 0 is_stmt 0 discriminator 2
	movq	-88(%rbp), %rax	# value, tmp95
	movzwl	(%rax), %eax	# value_7(D)->code, D.28462
	cmpw	$99, %ax	#, D.28462
	jne	.L2268	#,
.L2267:
	.loc 1 7902 0 discriminator 1
	movl	$1, %eax	#, iftmp.1236
	jmp	.L2269	#
.L2268:
	.loc 1 7902 0 discriminator 3
	movl	$0, %eax	#, iftmp.1236
.L2269:
	.loc 1 7902 0 discriminator 4
	movl	%eax, -56(%rbp)	# iftmp.1236, post
	.loc 1 7908 0 is_stmt 1 discriminator 4
	movq	-80(%rbp), %rax	# in, tmp96
	cmpq	-88(%rbp), %rax	# value, tmp96
	jne	.L2270	#,
	.loc 1 7908 0 is_stmt 0 discriminator 1
	movq	-80(%rbp), %rax	# in, tmp97
	movq	8(%rax), %rax	# in_14(D)->fld[0].rtx, iftmp.1237
	jmp	.L2271	#
.L2270:
	.loc 1 7908 0 discriminator 2
	movq	-80(%rbp), %rax	# in, iftmp.1237
.L2271:
	.loc 1 7908 0 discriminator 3
	movq	%rax, -32(%rbp)	# iftmp.1237, real_in
	.loc 1 7914 0 is_stmt 1 discriminator 3
	movq	-40(%rbp), %rax	# incloc, tmp98
	movzwl	(%rax), %eax	# incloc_8->code, D.28462
	cmpw	$61, %ax	#, D.28462
	jne	.L2272	#,
	.loc 1 7915 0
	movq	reg_last_reload_reg(%rip), %rdx	# reg_last_reload_reg, reg_last_reload_reg.1238
	movq	-40(%rbp), %rax	# incloc, tmp99
	movl	8(%rax), %eax	# incloc_8->fld[0].rtuint, D.28463
	movl	%eax, %eax	# D.28463, D.28464
	salq	$3, %rax	#, D.28464
	addq	%rdx, %rax	# reg_last_reload_reg.1238, D.28465
	movq	$0, (%rax)	#, *_23
.L2272:
	.loc 1 7917 0
	movq	-88(%rbp), %rax	# value, tmp100
	movzwl	(%rax), %eax	# value_7(D)->code, D.28462
	cmpw	$96, %ax	#, D.28462
	je	.L2273	#,
	.loc 1 7917 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# value, tmp101
	movzwl	(%rax), %eax	# value_7(D)->code, D.28462
	cmpw	$98, %ax	#, D.28462
	jne	.L2274	#,
.L2273:
	.loc 1 7918 0 is_stmt 1
	negl	-92(%rbp)	# inc_amount
.L2274:
	.loc 1 7920 0
	movl	-92(%rbp), %eax	# inc_amount, tmp102
	cltq
	movq	%rax, %rsi	# D.28466,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -24(%rbp)	# tmp103, inc
	.loc 1 7923 0
	cmpl	$0, -56(%rbp)	#, post
	je	.L2275	#,
	.loc 1 7923 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# real_in, tmp104
	cmpq	-72(%rbp), %rax	# reloadreg, tmp104
	je	.L2275	#,
	.loc 1 7924 0 is_stmt 1
	movq	-32(%rbp), %rdx	# real_in, tmp105
	movq	-72(%rbp), %rax	# reloadreg, tmp106
	movq	%rdx, %rsi	# tmp105,
	movq	%rax, %rdi	# tmp106,
	call	gen_move_insn	#
	movq	%rax, %rdi	# D.28467,
	call	emit_insn	#
.L2275:
	.loc 1 7926 0
	movq	-80(%rbp), %rax	# in, tmp107
	cmpq	-88(%rbp), %rax	# value, tmp107
	jne	.L2276	#,
	.loc 1 7931 0
	call	get_last_insn	#
	movq	%rax, -16(%rbp)	# tmp108, last
	.loc 1 7932 0
	movq	-40(%rbp), %rax	# incloc, tmp109
	movzbl	2(%rax), %eax	# incloc_8->mode, D.28468
	movzbl	%al, %eax	# D.28468, D.28469
	movq	-24(%rbp), %rcx	# inc, tmp110
	movq	-40(%rbp), %rdx	# incloc, tmp111
	movl	%eax, %esi	# D.28469,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdx	#, D.28467
	movq	-40(%rbp), %rax	# incloc, tmp112
	movq	%rdx, %rcx	# D.28467,
	movq	%rax, %rdx	# tmp112,
	movl	$0, %esi	#,
	movl	$47, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, %rdi	# D.28467,
	call	emit_insn	#
	movq	%rax, -8(%rbp)	# tmp113, add_insn
	.loc 1 7936 0
	movq	-8(%rbp), %rax	# add_insn, tmp114
	movl	40(%rax), %eax	# add_insn_37->fld[4].rtint, D.28470
	testl	%eax, %eax	# D.28470
	js	.L2277	#,
	.loc 1 7936 0 is_stmt 0 discriminator 1
	movq	-8(%rbp), %rax	# add_insn, tmp115
	movl	40(%rax), %eax	# add_insn_37->fld[4].rtint, iftmp.1239
	jmp	.L2278	#
.L2277:
	.loc 1 7936 0 discriminator 2
	movq	-8(%rbp), %rax	# add_insn, tmp116
	movq	%rax, %rdi	# tmp116,
	call	recog_memoized_1	#
.L2278:
	.loc 1 7936 0 discriminator 3
	movl	%eax, -52(%rbp)	# iftmp.1239, code
	.loc 1 7937 0 is_stmt 1 discriminator 3
	cmpl	$0, -52(%rbp)	#, code
	js	.L2279	#,
	.loc 1 7939 0
	movq	-8(%rbp), %rax	# add_insn, tmp117
	movq	%rax, %rdi	# tmp117,
	call	extract_insn	#
	.loc 1 7940 0
	movl	$1, %edi	#,
	call	constrain_operands	#
	testl	%eax, %eax	# D.28470
	je	.L2279	#,
	.loc 1 7946 0
	cmpl	$0, -56(%rbp)	#, post
	jne	.L2280	#,
	.loc 1 7947 0
	movq	-40(%rbp), %rdx	# incloc, tmp118
	movq	-72(%rbp), %rax	# reloadreg, tmp119
	movq	%rdx, %rsi	# tmp118,
	movq	%rax, %rdi	# tmp119,
	call	gen_move_insn	#
	movq	%rax, %rdi	# D.28467,
	call	emit_insn	#
.L2280:
	.loc 1 7949 0
	movq	-8(%rbp), %rax	# add_insn, D.28461
	jmp	.L2281	#
.L2279:
	.loc 1 7952 0
	movq	-16(%rbp), %rax	# last, tmp120
	movq	%rax, %rdi	# tmp120,
	call	delete_insns_since	#
.L2276:
	.loc 1 7960 0
	cmpl	$0, -56(%rbp)	#, post
	jne	.L2282	#,
	.loc 1 7962 0
	movq	-80(%rbp), %rax	# in, tmp121
	cmpq	-72(%rbp), %rax	# reloadreg, tmp121
	je	.L2283	#,
	.loc 1 7963 0
	movq	-32(%rbp), %rdx	# real_in, tmp122
	movq	-72(%rbp), %rax	# reloadreg, tmp123
	movq	%rdx, %rsi	# tmp122,
	movq	%rax, %rdi	# tmp123,
	call	gen_move_insn	#
	movq	%rax, %rdi	# D.28467,
	call	emit_insn	#
.L2283:
	.loc 1 7964 0
	movq	-24(%rbp), %rdx	# inc, tmp124
	movq	-72(%rbp), %rax	# reloadreg, tmp125
	movq	%rdx, %rsi	# tmp124,
	movq	%rax, %rdi	# tmp125,
	call	gen_add2_insn	#
	movq	%rax, %rdi	# D.28467,
	call	emit_insn	#
	.loc 1 7965 0
	movq	-72(%rbp), %rdx	# reloadreg, tmp126
	movq	-40(%rbp), %rax	# incloc, tmp127
	movq	%rdx, %rsi	# tmp126,
	movq	%rax, %rdi	# tmp127,
	call	gen_move_insn	#
	movq	%rax, %rdi	# D.28467,
	call	emit_insn	#
	movq	%rax, -48(%rbp)	# tmp128, store
	jmp	.L2284	#
.L2282:
	.loc 1 7978 0
	movq	-24(%rbp), %rdx	# inc, tmp129
	movq	-72(%rbp), %rax	# reloadreg, tmp130
	movq	%rdx, %rsi	# tmp129,
	movq	%rax, %rdi	# tmp130,
	call	gen_add2_insn	#
	movq	%rax, %rdi	# D.28467,
	call	emit_insn	#
	.loc 1 7979 0
	movq	-72(%rbp), %rdx	# reloadreg, tmp131
	movq	-40(%rbp), %rax	# incloc, tmp132
	movq	%rdx, %rsi	# tmp131,
	movq	%rax, %rdi	# tmp132,
	call	gen_move_insn	#
	movq	%rax, %rdi	# D.28467,
	call	emit_insn	#
	movq	%rax, -48(%rbp)	# tmp133, store
	.loc 1 7980 0
	movl	-92(%rbp), %eax	# inc_amount, tmp134
	negl	%eax	# D.28470
	cltq
	movq	%rax, %rsi	# D.28466,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.28467
	movq	-72(%rbp), %rax	# reloadreg, tmp135
	movq	%rdx, %rsi	# D.28467,
	movq	%rax, %rdi	# tmp135,
	call	gen_add2_insn	#
	movq	%rax, %rdi	# D.28467,
	call	emit_insn	#
.L2284:
	.loc 1 7983 0
	movq	-48(%rbp), %rax	# store, D.28461
.L2281:
	.loc 1 7984 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE65:
	.size	inc_for_reload, .-inc_for_reload
	.type	constraint_accepts_reg_p, @function
constraint_accepts_reg_p:
.LFB66:
	.loc 1 7993 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# string, string
	movq	%rsi, -32(%rbp)	# reg, reg
	.loc 1 7994 0
	movl	$0, -16(%rbp)	#, value
	.loc 1 7995 0
	movq	-32(%rbp), %rax	# reg, tmp114
	movq	%rax, %rdi	# tmp114,
	call	true_regnum	#
	movl	%eax, -12(%rbp)	# tmp115, regno
	.loc 1 7999 0
	movl	$0, -16(%rbp)	#, value
.L2346:
	.loc 1 8002 0
	movq	-24(%rbp), %rax	# string, string.1240
	leaq	1(%rax), %rdx	#, tmp116
	movq	%rdx, -24(%rbp)	# tmp116, string
	movzbl	(%rax), %eax	# *string.1240_35, D.28472
	movsbl	%al, %eax	# D.28472, tmp117
	movl	%eax, -8(%rbp)	# tmp117, c
	movl	-8(%rbp), %eax	# c, c
	cmpl	$44, %eax	#, c
	je	.L2287	#,
	cmpl	$44, %eax	#, c
	jg	.L2288	#,
	testl	%eax, %eax	# c
	je	.L2289	#,
	jmp	.L2286	#
.L2288:
	cmpl	$103, %eax	#, c
	je	.L2290	#,
	cmpl	$114, %eax	#, c
	je	.L2290	#,
	jmp	.L2286	#
.L2289:
	.loc 1 8006 0
	movl	-16(%rbp), %eax	# value, D.28471
	jmp	.L2291	#
.L2287:
	.loc 1 8009 0
	cmpl	$0, -16(%rbp)	#, value
	jne	.L2292	#,
	.loc 1 8010 0
	movl	$0, %eax	#, D.28471
	jmp	.L2291	#
.L2292:
	.loc 1 8012 0
	movl	$0, -16(%rbp)	#, value
	.loc 1 8013 0
	jmp	.L2293	#
.L2290:
	.loc 1 8017 0
	movq	reg_class_contents+96(%rip), %rdx	# reg_class_contents, D.28473
	movl	-12(%rbp), %eax	# regno, tmp119
	movl	%eax, %ecx	# tmp119, tmp124
	shrq	%cl, %rdx	# tmp124, D.28473
	movq	%rdx, %rax	# D.28473, D.28473
	andl	$1, %eax	#, D.28473
	testq	%rax, %rax	# D.28473
	je	.L2294	#,
	.loc 1 8018 0
	movl	$1, -16(%rbp)	#, value
	.loc 1 8019 0
	jmp	.L2293	#
.L2294:
	jmp	.L2293	#
.L2286:
.LBB172:
	.loc 1 8023 0
	cmpl	$114, -8(%rbp)	#, c
	je	.L2295	#,
	.loc 1 8023 0 is_stmt 0 discriminator 1
	cmpl	$82, -8(%rbp)	#, c
	je	.L2296	#,
	.loc 1 8023 0 discriminator 3
	cmpl	$113, -8(%rbp)	#, c
	jne	.L2297	#,
	.loc 1 8023 0 discriminator 5
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1245
	andl	$33554432, %eax	#, D.28471
	testl	%eax, %eax	# D.28471
	je	.L2298	#,
	.loc 1 8023 0 discriminator 7
	movl	$12, %eax	#, iftmp.1244
	jmp	.L2345	#
.L2298:
	.loc 1 8023 0 discriminator 8
	movl	$8, %eax	#, iftmp.1244
	jmp	.L2345	#
.L2297:
	.loc 1 8023 0 discriminator 6
	cmpl	$81, -8(%rbp)	#, c
	je	.L2301	#,
	.loc 1 8023 0 discriminator 9
	cmpl	$102, -8(%rbp)	#, c
	jne	.L2302	#,
	.loc 1 8023 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1249
	andl	$1, %eax	#, D.28471
	testl	%eax, %eax	# D.28471
	jne	.L2303	#,
	.loc 1 8023 0 discriminator 14
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1250
	andl	$32, %eax	#, D.28471
	testl	%eax, %eax	# D.28471
	je	.L2304	#,
.L2303:
	.loc 1 8023 0 discriminator 13
	movl	$15, %eax	#, iftmp.1248
	jmp	.L2305	#
.L2304:
	.loc 1 8023 0 discriminator 1
	movl	$0, %eax	#, iftmp.1248
.L2305:
	jmp	.L2345	#
.L2302:
	.loc 1 8023 0 discriminator 12
	cmpl	$116, -8(%rbp)	#, c
	jne	.L2307	#,
	.loc 1 8023 0 discriminator 16
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1253
	andl	$1, %eax	#, D.28471
	testl	%eax, %eax	# D.28471
	jne	.L2308	#,
	.loc 1 8023 0 discriminator 19
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1254
	andl	$32, %eax	#, D.28471
	testl	%eax, %eax	# D.28471
	je	.L2309	#,
.L2308:
	.loc 1 8023 0 discriminator 18
	movl	$13, %eax	#, iftmp.1252
	jmp	.L2310	#
.L2309:
	.loc 1 8023 0 discriminator 1
	movl	$0, %eax	#, iftmp.1252
.L2310:
	jmp	.L2345	#
.L2307:
	.loc 1 8023 0 discriminator 17
	cmpl	$117, -8(%rbp)	#, c
	jne	.L2312	#,
	.loc 1 8023 0 discriminator 21
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1257
	andl	$1, %eax	#, D.28471
	testl	%eax, %eax	# D.28471
	jne	.L2313	#,
	.loc 1 8023 0 discriminator 24
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1258
	andl	$32, %eax	#, D.28471
	testl	%eax, %eax	# D.28471
	je	.L2314	#,
.L2313:
	.loc 1 8023 0 discriminator 23
	movl	$14, %eax	#, iftmp.1256
	jmp	.L2315	#
.L2314:
	.loc 1 8023 0 discriminator 1
	movl	$0, %eax	#, iftmp.1256
.L2315:
	jmp	.L2345	#
.L2312:
	.loc 1 8023 0 discriminator 22
	cmpl	$97, -8(%rbp)	#, c
	je	.L2317	#,
	.loc 1 8023 0 discriminator 26
	cmpl	$98, -8(%rbp)	#, c
	je	.L2318	#,
	.loc 1 8023 0 discriminator 28
	cmpl	$99, -8(%rbp)	#, c
	je	.L2319	#,
	.loc 1 8023 0 discriminator 30
	cmpl	$100, -8(%rbp)	#, c
	je	.L2320	#,
	.loc 1 8023 0 discriminator 32
	cmpl	$120, -8(%rbp)	#, c
	jne	.L2321	#,
	.loc 1 8023 0 discriminator 34
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1265
	andl	$327680, %eax	#, D.28471
	testl	%eax, %eax	# D.28471
	je	.L2322	#,
	.loc 1 8023 0 discriminator 36
	movl	$16, %eax	#, iftmp.1264
	jmp	.L2345	#
.L2322:
	.loc 1 8023 0 discriminator 37
	movl	$0, %eax	#, iftmp.1264
	jmp	.L2345	#
.L2321:
	.loc 1 8023 0 discriminator 35
	cmpl	$89, -8(%rbp)	#, c
	jne	.L2325	#,
	.loc 1 8023 0 discriminator 38
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1268
	andl	$262144, %eax	#, D.28471
	testl	%eax, %eax	# D.28471
	je	.L2326	#,
	.loc 1 8023 0 discriminator 40
	movl	$16, %eax	#, iftmp.1267
	jmp	.L2345	#
.L2326:
	.loc 1 8023 0 discriminator 41
	movl	$0, %eax	#, iftmp.1267
	jmp	.L2345	#
.L2325:
	.loc 1 8023 0 discriminator 39
	cmpl	$121, -8(%rbp)	#, c
	jne	.L2329	#,
	.loc 1 8023 0 discriminator 42
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1271
	andl	$16384, %eax	#, D.28471
	testl	%eax, %eax	# D.28471
	je	.L2330	#,
	.loc 1 8023 0 discriminator 44
	movl	$17, %eax	#, iftmp.1270
	jmp	.L2345	#
.L2330:
	.loc 1 8023 0 discriminator 45
	movl	$0, %eax	#, iftmp.1270
	jmp	.L2345	#
.L2329:
	.loc 1 8023 0 discriminator 43
	cmpl	$65, -8(%rbp)	#, c
	je	.L2333	#,
	.loc 1 8023 0 discriminator 46
	cmpl	$68, -8(%rbp)	#, c
	je	.L2334	#,
	.loc 1 8023 0 discriminator 48
	cmpl	$83, -8(%rbp)	#, c
	jne	.L2335	#,
	.loc 1 8023 0 discriminator 50
	movl	$5, %eax	#, iftmp.1274
	jmp	.L2345	#
.L2335:
	.loc 1 8023 0 discriminator 51
	movl	$0, %eax	#, iftmp.1274
	jmp	.L2345	#
.L2334:
	.loc 1 8023 0 discriminator 49
	movl	$6, %eax	#, iftmp.1273
	jmp	.L2345	#
.L2333:
	.loc 1 8023 0 discriminator 47
	movl	$7, %eax	#, iftmp.1272
	jmp	.L2345	#
.L2320:
	.loc 1 8023 0 discriminator 33
	movl	$2, %eax	#, iftmp.1262
	jmp	.L2345	#
.L2319:
	.loc 1 8023 0 discriminator 31
	movl	$3, %eax	#, iftmp.1261
	jmp	.L2345	#
.L2318:
	.loc 1 8023 0 discriminator 29
	movl	$4, %eax	#, iftmp.1260
	jmp	.L2345	#
.L2317:
	.loc 1 8023 0 discriminator 27
	movl	$1, %eax	#, iftmp.1259
	jmp	.L2345	#
.L2301:
	.loc 1 8023 0 discriminator 10
	movl	$8, %eax	#, iftmp.1246
	jmp	.L2345	#
.L2296:
	.loc 1 8023 0 discriminator 4
	movl	$11, %eax	#, iftmp.1242
	jmp	.L2345	#
.L2295:
	.loc 1 8023 0 discriminator 2
	movl	$12, %eax	#, iftmp.1241
.L2345:
	.loc 1 8023 0 discriminator 59
	movl	%eax, -4(%rbp)	# iftmp.1241, class
	.loc 1 8025 0 is_stmt 1 discriminator 59
	movl	-4(%rbp), %eax	# class, class.1275
	cltq
	movq	reg_class_contents(,%rax,8), %rdx	# reg_class_contents, D.28473
	movl	-12(%rbp), %eax	# regno, tmp121
	movl	%eax, %ecx	# tmp121, tmp126
	shrq	%cl, %rdx	# tmp126, D.28473
	movq	%rdx, %rax	# D.28473, D.28473
	andl	$1, %eax	#, D.28473
	testq	%rax, %rax	# D.28473
	je	.L2293	#,
	.loc 1 8026 0
	movl	$1, -16(%rbp)	#, value
.LBE172:
	.loc 1 8029 0
	jmp	.L2346	#
.L2293:
	jmp	.L2346	#
.L2291:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE66:
	.size	constraint_accepts_reg_p, .-constraint_accepts_reg_p
	.type	reload_cse_delete_noop_set, @function
reload_cse_delete_noop_set:
.LFB67:
	.loc 1 8042 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	movq	%rsi, -32(%rbp)	# value, value
	.loc 1 8043 0
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.1276
	movq	-24(%rbp), %rdx	# insn, tmp67
	movl	8(%rdx), %edx	# insn_2(D)->fld[0].rtint, D.28475
	movslq	%edx, %rdx	# D.28475, tmp68
	addq	$4, %rdx	#, tmp69
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.1276_1->data.bb, D.28476
	movq	8(%rax), %rax	# _4->end, D.28477
	cmpq	-24(%rbp), %rax	# insn, D.28477
	sete	%al	#, tmp70
	movb	%al, -1(%rbp)	# tmp70, purge
	.loc 1 8044 0
	cmpq	$0, -32(%rbp)	#, value
	je	.L2348	#,
	.loc 1 8046 0
	movq	-32(%rbp), %rax	# value, tmp71
	movq	%rax, %rdx	# tmp71,
	movl	$0, %esi	#,
	movl	$48, %edi	#,
	call	gen_rtx_fmt_e	#
	movq	-24(%rbp), %rdx	# insn, tmp72
	movq	%rax, 32(%rdx)	# D.28477, insn_2(D)->fld[3].rtx
	.loc 1 8047 0
	movq	-24(%rbp), %rax	# insn, tmp73
	movl	$-1, 40(%rax)	#, insn_2(D)->fld[4].rtint
	.loc 1 8048 0
	movq	-24(%rbp), %rax	# insn, tmp74
	movq	$0, 56(%rax)	#, insn_2(D)->fld[6].rtx
	jmp	.L2349	#
.L2348:
	.loc 1 8051 0
	movq	-24(%rbp), %rax	# insn, tmp75
	movq	%rax, %rdi	# tmp75,
	call	delete_insn	#
.L2349:
	.loc 1 8052 0
	cmpb	$0, -1(%rbp)	#, purge
	je	.L2347	#,
	.loc 1 8053 0
	movq	basic_block_for_insn(%rip), %rax	# basic_block_for_insn, basic_block_for_insn.1277
	movq	-24(%rbp), %rdx	# insn, tmp76
	movl	8(%rdx), %edx	# insn_2(D)->fld[0].rtint, D.28475
	movslq	%edx, %rdx	# D.28475, tmp77
	addq	$4, %rdx	#, tmp78
	movq	(%rax,%rdx,8), %rax	# basic_block_for_insn.1277_9->data.bb, D.28476
	movq	%rax, %rdi	# D.28476,
	call	purge_dead_edges	#
.L2347:
	.loc 1 8054 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE67:
	.size	reload_cse_delete_noop_set, .-reload_cse_delete_noop_set
	.type	reload_cse_noop_set_p, @function
reload_cse_noop_set_p:
.LFB68:
	.loc 1 8060 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# set, set
	.loc 1 8061 0
	movq	-8(%rbp), %rax	# set, tmp63
	movq	16(%rax), %rdx	# set_1(D)->fld[1].rtx, D.28478
	movq	-8(%rbp), %rax	# set, tmp64
	movq	8(%rax), %rax	# set_1(D)->fld[0].rtx, D.28478
	movq	%rdx, %rsi	# D.28478,
	movq	%rax, %rdi	# D.28478,
	call	rtx_equal_for_cselib_p	#
	.loc 1 8062 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE68:
	.size	reload_cse_noop_set_p, .-reload_cse_noop_set_p
	.type	reload_cse_simplify, @function
reload_cse_simplify:
.LFB69:
	.loc 1 8068 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# insn, insn
	.loc 1 8069 0
	movq	-56(%rbp), %rax	# insn, tmp83
	movq	32(%rax), %rax	# insn_9(D)->fld[3].rtx, tmp84
	movq	%rax, -16(%rbp)	# tmp84, body
	.loc 1 8071 0
	movq	-16(%rbp), %rax	# body, tmp85
	movzwl	(%rax), %eax	# body_10->code, D.28480
	cmpw	$47, %ax	#, D.28480
	jne	.L2354	#,
.LBB173:
	.loc 1 8073 0
	movl	$0, -36(%rbp)	#, count
	.loc 1 8080 0
	movq	-56(%rbp), %rdx	# insn, tmp86
	movq	-16(%rbp), %rax	# body, tmp87
	movq	%rdx, %rsi	# tmp86,
	movq	%rax, %rdi	# tmp87,
	call	reload_cse_simplify_set	#
	addl	%eax, -36(%rbp)	# D.28481, count
	.loc 1 8082 0
	cmpl	$0, -36(%rbp)	#, count
	jne	.L2355	#,
	.loc 1 8082 0 is_stmt 0 discriminator 1
	movq	-16(%rbp), %rax	# body, tmp88
	movq	%rax, %rdi	# tmp88,
	call	reload_cse_noop_set_p	#
	testl	%eax, %eax	# D.28481
	je	.L2355	#,
.LBB174:
	.loc 1 8084 0 is_stmt 1
	movq	-16(%rbp), %rax	# body, tmp89
	movq	8(%rax), %rax	# body_10->fld[0].rtx, tmp90
	movq	%rax, -32(%rbp)	# tmp90, value
	.loc 1 8085 0
	movq	-16(%rbp), %rax	# body, tmp91
	movq	8(%rax), %rax	# body_10->fld[0].rtx, D.28482
	movzbl	3(%rax), %eax	# *_17, D.28483
	andl	$64, %eax	#, D.28483
	testb	%al, %al	# D.28483
	jne	.L2356	#,
	.loc 1 8086 0
	movq	$0, -32(%rbp)	#, value
.L2356:
	.loc 1 8087 0
	movq	-32(%rbp), %rdx	# value, tmp92
	movq	-56(%rbp), %rax	# insn, tmp93
	movq	%rdx, %rsi	# tmp92,
	movq	%rax, %rdi	# tmp93,
	call	reload_cse_delete_noop_set	#
	.loc 1 8088 0
	jmp	.L2353	#
.L2355:
.LBE174:
	.loc 1 8091 0
	cmpl	$0, -36(%rbp)	#, count
	jle	.L2358	#,
	.loc 1 8092 0
	call	apply_change_group	#
	jmp	.L2353	#
.L2358:
	.loc 1 8094 0
	movq	-56(%rbp), %rax	# insn, tmp94
	movq	%rax, %rdi	# tmp94,
	call	reload_cse_simplify_operands	#
.LBE173:
	jmp	.L2353	#
.L2354:
	.loc 1 8096 0
	movq	-16(%rbp), %rax	# body, tmp95
	movzwl	(%rax), %eax	# body_10->code, D.28480
	cmpw	$39, %ax	#, D.28480
	jne	.L2353	#,
.LBB175:
	.loc 1 8099 0
	movl	$0, -40(%rbp)	#, count
	.loc 1 8100 0
	movq	$0, -24(%rbp)	#, value
	.loc 1 8104 0
	movq	-16(%rbp), %rax	# body, tmp96
	movq	8(%rax), %rax	# body_10->fld[0].rtvec, D.28484
	movl	(%rax), %eax	# _24->num_elem, D.28481
	subl	$1, %eax	#, tmp97
	movl	%eax, -44(%rbp)	# tmp97, i
	jmp	.L2360	#
.L2367:
.LBB176:
	.loc 1 8106 0
	movq	-16(%rbp), %rax	# body, tmp98
	movq	8(%rax), %rax	# body_10->fld[0].rtvec, D.28484
	movl	-44(%rbp), %edx	# i, tmp100
	movslq	%edx, %rdx	# tmp100, tmp99
	movq	8(%rax,%rdx,8), %rax	# _27->elem, tmp101
	movq	%rax, -8(%rbp)	# tmp101, part
	.loc 1 8107 0
	movq	-8(%rbp), %rax	# part, tmp102
	movzwl	(%rax), %eax	# part_28->code, D.28480
	cmpw	$47, %ax	#, D.28480
	jne	.L2361	#,
	.loc 1 8109 0
	movq	-8(%rbp), %rax	# part, tmp103
	movq	%rax, %rdi	# tmp103,
	call	reload_cse_noop_set_p	#
	testl	%eax, %eax	# D.28481
	jne	.L2362	#,
	.loc 1 8110 0
	jmp	.L2363	#
.L2362:
	.loc 1 8111 0
	movq	-8(%rbp), %rax	# part, tmp104
	movq	8(%rax), %rax	# part_28->fld[0].rtx, D.28482
	movzbl	3(%rax), %eax	# *_31, D.28483
	andl	$64, %eax	#, D.28483
	testb	%al, %al	# D.28483
	je	.L2366	#,
	.loc 1 8113 0
	cmpq	$0, -24(%rbp)	#, value
	je	.L2365	#,
	.loc 1 8114 0
	jmp	.L2363	#
.L2365:
	.loc 1 8115 0
	movq	-8(%rbp), %rax	# part, tmp105
	movq	8(%rax), %rax	# part_28->fld[0].rtx, tmp106
	movq	%rax, -24(%rbp)	# tmp106, value
	jmp	.L2366	#
.L2361:
	.loc 1 8118 0
	movq	-8(%rbp), %rax	# part, tmp107
	movzwl	(%rax), %eax	# part_28->code, D.28480
	cmpw	$49, %ax	#, D.28480
	je	.L2366	#,
	.loc 1 8119 0
	jmp	.L2363	#
.L2366:
.LBE176:
	.loc 1 8104 0
	subl	$1, -44(%rbp)	#, i
.L2360:
	.loc 1 8104 0 is_stmt 0 discriminator 1
	cmpl	$0, -44(%rbp)	#, i
	jns	.L2367	#,
.L2363:
	.loc 1 8122 0 is_stmt 1
	cmpl	$0, -44(%rbp)	#, i
	jns	.L2368	#,
	.loc 1 8124 0
	movq	-24(%rbp), %rdx	# value, tmp108
	movq	-56(%rbp), %rax	# insn, tmp109
	movq	%rdx, %rsi	# tmp108,
	movq	%rax, %rdi	# tmp109,
	call	reload_cse_delete_noop_set	#
	.loc 1 8126 0
	jmp	.L2353	#
.L2368:
	.loc 1 8130 0
	movq	-16(%rbp), %rax	# body, tmp110
	movq	8(%rax), %rax	# body_10->fld[0].rtvec, D.28484
	movl	(%rax), %eax	# _37->num_elem, D.28481
	subl	$1, %eax	#, tmp111
	movl	%eax, -44(%rbp)	# tmp111, i
	jmp	.L2369	#
.L2371:
	.loc 1 8131 0
	movq	-16(%rbp), %rax	# body, tmp112
	movq	8(%rax), %rax	# body_10->fld[0].rtvec, D.28484
	movl	-44(%rbp), %edx	# i, tmp114
	movslq	%edx, %rdx	# tmp114, tmp113
	movq	8(%rax,%rdx,8), %rax	# _40->elem, D.28482
	movzwl	(%rax), %eax	# _41->code, D.28480
	cmpw	$47, %ax	#, D.28480
	jne	.L2370	#,
	.loc 1 8132 0
	movq	-16(%rbp), %rax	# body, tmp115
	movq	8(%rax), %rax	# body_10->fld[0].rtvec, D.28484
	movl	-44(%rbp), %edx	# i, tmp117
	movslq	%edx, %rdx	# tmp117, tmp116
	movq	8(%rax,%rdx,8), %rax	# _43->elem, D.28482
	movq	-56(%rbp), %rdx	# insn, tmp118
	movq	%rdx, %rsi	# tmp118,
	movq	%rax, %rdi	# D.28482,
	call	reload_cse_simplify_set	#
	addl	%eax, -40(%rbp)	# D.28481, count
.L2370:
	.loc 1 8130 0
	subl	$1, -44(%rbp)	#, i
.L2369:
	.loc 1 8130 0 is_stmt 0 discriminator 1
	cmpl	$0, -44(%rbp)	#, i
	jns	.L2371	#,
	.loc 1 8134 0 is_stmt 1
	cmpl	$0, -40(%rbp)	#, count
	jle	.L2372	#,
	.loc 1 8135 0
	call	apply_change_group	#
	jmp	.L2353	#
.L2372:
	.loc 1 8137 0
	movq	-56(%rbp), %rax	# insn, tmp119
	movq	%rax, %rdi	# tmp119,
	call	reload_cse_simplify_operands	#
.L2353:
.LBE175:
	.loc 1 8139 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE69:
	.size	reload_cse_simplify, .-reload_cse_simplify
	.type	reload_cse_regs_1, @function
reload_cse_regs_1:
.LFB70:
	.loc 1 8161 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# first, first
	.loc 1 8164 0
	call	cselib_init	#
	.loc 1 8165 0
	call	init_alias_analysis	#
	.loc 1 8167 0
	movq	-24(%rbp), %rax	# first, tmp62
	movq	%rax, -8(%rbp)	# tmp62, insn
	jmp	.L2374	#
.L2376:
	.loc 1 8169 0
	movq	-8(%rbp), %rax	# insn, tmp63
	movzwl	(%rax), %eax	# insn_1->code, D.28485
	movzwl	%ax, %eax	# D.28485, D.28486
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28487
	cmpb	$105, %al	#, D.28487
	jne	.L2375	#,
	.loc 1 8170 0
	movq	-8(%rbp), %rax	# insn, tmp65
	movq	%rax, %rdi	# tmp65,
	call	reload_cse_simplify	#
.L2375:
	.loc 1 8172 0
	movq	-8(%rbp), %rax	# insn, tmp66
	movq	%rax, %rdi	# tmp66,
	call	cselib_process_insn	#
	.loc 1 8167 0
	movq	-8(%rbp), %rax	# insn, tmp67
	movq	24(%rax), %rax	# insn_1->fld[2].rtx, tmp68
	movq	%rax, -8(%rbp)	# tmp68, insn
.L2374:
	.loc 1 8167 0 is_stmt 0 discriminator 1
	cmpq	$0, -8(%rbp)	#, insn
	jne	.L2376	#,
	.loc 1 8176 0 is_stmt 1
	call	end_alias_analysis	#
	.loc 1 8177 0
	call	cselib_finish	#
	.loc 1 8178 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE70:
	.size	reload_cse_regs_1, .-reload_cse_regs_1
	.globl	reload_cse_regs
	.type	reload_cse_regs, @function
reload_cse_regs:
.LFB71:
	.loc 1 8185 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# first, first
	.loc 1 8186 0
	movq	-8(%rbp), %rax	# first, tmp60
	movq	%rax, %rdi	# tmp60,
	call	reload_cse_regs_1	#
	.loc 1 8187 0
	call	reload_combine	#
	.loc 1 8188 0
	movq	-8(%rbp), %rax	# first, tmp61
	movq	%rax, %rdi	# tmp61,
	call	reload_cse_move2add	#
	.loc 1 8189 0
	movl	flag_expensive_optimizations(%rip), %eax	# flag_expensive_optimizations, flag_expensive_optimizations.1278
	testl	%eax, %eax	# flag_expensive_optimizations.1278
	je	.L2377	#,
	.loc 1 8190 0
	movq	-8(%rbp), %rax	# first, tmp62
	movq	%rax, %rdi	# tmp62,
	call	reload_cse_regs_1	#
.L2377:
	.loc 1 8191 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE71:
	.size	reload_cse_regs, .-reload_cse_regs
	.type	reload_cse_simplify_set, @function
reload_cse_simplify_set:
.LFB72:
	.loc 1 8203 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# set, set
	movq	%rsi, -80(%rbp)	# insn, insn
	.loc 1 8204 0
	movl	$0, -52(%rbp)	#, did_change
	.loc 1 8215 0
	movq	-72(%rbp), %rax	# set, tmp102
	movq	8(%rax), %rax	# set_10(D)->fld[0].rtx, D.28489
	movq	%rax, %rdi	# D.28489,
	call	true_regnum	#
	movl	%eax, -40(%rbp)	# tmp103, dreg
	.loc 1 8216 0
	cmpl	$0, -40(%rbp)	#, dreg
	jns	.L2380	#,
	.loc 1 8217 0
	movl	$0, %eax	#, D.28488
	jmp	.L2381	#
.L2380:
	.loc 1 8219 0
	movq	-72(%rbp), %rax	# set, tmp104
	movq	16(%rax), %rax	# set_10(D)->fld[1].rtx, tmp105
	movq	%rax, -24(%rbp)	# tmp105, src
	.loc 1 8220 0
	movq	-24(%rbp), %rax	# src, tmp106
	movq	%rax, %rdi	# tmp106,
	call	side_effects_p	#
	testl	%eax, %eax	# D.28488
	jne	.L2382	#,
	.loc 1 8220 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# src, tmp107
	movq	%rax, %rdi	# tmp107,
	call	true_regnum	#
	testl	%eax, %eax	# D.28488
	js	.L2383	#,
.L2382:
	.loc 1 8221 0 is_stmt 1
	movl	$0, %eax	#, D.28488
	jmp	.L2381	#
.L2383:
	.loc 1 8223 0
	movl	-40(%rbp), %eax	# dreg, tmp109
	cltq
	movl	regclass_map(,%rax,4), %eax	# regclass_map, tmp110
	movl	%eax, -36(%rbp)	# tmp110, dclass
	.loc 1 8238 0
	movq	-24(%rbp), %rax	# src, tmp111
	movzwl	(%rax), %eax	# src_14->code, D.28490
	cmpw	$66, %ax	#, D.28490
	jne	.L2384	#,
	.loc 1 8239 0
	movq	-24(%rbp), %rax	# src, tmp112
	movzbl	2(%rax), %eax	# src_14->mode, D.28491
	movzbl	%al, %eax	# D.28491, D.28492
	movl	-36(%rbp), %ecx	# dclass, tmp113
	movl	$1, %edx	#,
	movl	%ecx, %esi	# tmp113,
	movl	%eax, %edi	# D.28492,
	call	ix86_memory_move_cost	#
	movl	%eax, -48(%rbp)	# tmp114, old_cost
	jmp	.L2385	#
.L2384:
	.loc 1 8240 0
	movq	-24(%rbp), %rax	# src, tmp115
	movzwl	(%rax), %eax	# src_14->code, D.28490
	cmpw	$67, %ax	#, D.28490
	je	.L2386	#,
	.loc 1 8240 0 is_stmt 0 discriminator 1
	movq	-24(%rbp), %rax	# src, tmp116
	movzwl	(%rax), %eax	# src_14->code, D.28490
	cmpw	$68, %ax	#, D.28490
	je	.L2386	#,
	movq	-24(%rbp), %rax	# src, tmp117
	movzwl	(%rax), %eax	# src_14->code, D.28490
	cmpw	$54, %ax	#, D.28490
	je	.L2386	#,
	movq	-24(%rbp), %rax	# src, tmp118
	movzwl	(%rax), %eax	# src_14->code, D.28490
	cmpw	$55, %ax	#, D.28490
	je	.L2386	#,
	movq	-24(%rbp), %rax	# src, tmp119
	movzwl	(%rax), %eax	# src_14->code, D.28490
	cmpw	$58, %ax	#, D.28490
	je	.L2386	#,
	movq	-24(%rbp), %rax	# src, tmp120
	movzwl	(%rax), %eax	# src_14->code, D.28490
	cmpw	$134, %ax	#, D.28490
	je	.L2386	#,
	movq	-24(%rbp), %rax	# src, tmp121
	movzwl	(%rax), %eax	# src_14->code, D.28490
	cmpw	$56, %ax	#, D.28490
	je	.L2386	#,
	movq	-24(%rbp), %rax	# src, tmp122
	movzwl	(%rax), %eax	# src_14->code, D.28490
	cmpw	$140, %ax	#, D.28490
	jne	.L2387	#,
.L2386:
	.loc 1 8241 0 is_stmt 1
	movq	-24(%rbp), %rax	# src, tmp123
	movl	$47, %esi	#,
	movq	%rax, %rdi	# tmp123,
	call	rtx_cost	#
	movl	%eax, -48(%rbp)	# tmp124, old_cost
	jmp	.L2385	#
.L2387:
	.loc 1 8242 0
	movq	-24(%rbp), %rax	# src, tmp125
	movzwl	(%rax), %eax	# src_14->code, D.28490
	cmpw	$61, %ax	#, D.28490
	jne	.L2388	#,
	.loc 1 8243 0
	movq	-24(%rbp), %rax	# src, tmp126
	movl	8(%rax), %eax	# src_14->fld[0].rtuint, D.28493
	movl	%eax, %eax	# D.28493, tmp127
	movl	regclass_map(,%rax,4), %ecx	# regclass_map, D.28494
	movq	-24(%rbp), %rax	# src, tmp128
	movzbl	2(%rax), %eax	# src_14->mode, D.28491
	movzbl	%al, %eax	# D.28491, D.28492
	movl	-36(%rbp), %edx	# dclass, tmp129
	movl	%ecx, %esi	# D.28494,
	movl	%eax, %edi	# D.28492,
	call	ix86_register_move_cost	#
	movl	%eax, -48(%rbp)	# tmp130, old_cost
	jmp	.L2385	#
.L2388:
	.loc 1 8247 0
	movq	-24(%rbp), %rax	# src, tmp131
	movl	$47, %esi	#,
	movq	%rax, %rdi	# tmp131,
	call	rtx_cost	#
	movl	%eax, -48(%rbp)	# tmp132, old_cost
.L2385:
	.loc 1 8249 0
	movq	-72(%rbp), %rax	# set, tmp133
	movq	8(%rax), %rax	# set_10(D)->fld[0].rtx, D.28489
	movzbl	2(%rax), %eax	# _38->mode, D.28491
	movzbl	%al, %ecx	# D.28491, D.28492
	movq	-24(%rbp), %rax	# src, tmp134
	movl	$0, %edx	#,
	movl	%ecx, %esi	# D.28492,
	movq	%rax, %rdi	# tmp134,
	call	cselib_lookup	#
	movq	%rax, -16(%rbp)	# tmp135, val
	.loc 1 8250 0
	cmpq	$0, -16(%rbp)	#, val
	jne	.L2389	#,
	.loc 1 8251 0
	movl	$0, %eax	#, D.28488
	jmp	.L2381	#
.L2389:
	.loc 1 8252 0
	movq	-16(%rbp), %rax	# val, tmp136
	movq	16(%rax), %rax	# val_41->locs, tmp137
	movq	%rax, -32(%rbp)	# tmp137, l
	jmp	.L2390	#
.L2397:
.LBB177:
	.loc 1 8254 0
	movq	-32(%rbp), %rax	# l, tmp138
	movq	8(%rax), %rax	# l_6->loc, tmp139
	movq	%rax, -8(%rbp)	# tmp139, this_rtx
	.loc 1 8257 0
	movq	-8(%rbp), %rax	# this_rtx, tmp140
	movzwl	(%rax), %eax	# this_rtx_44->code, D.28490
	cmpw	$67, %ax	#, D.28490
	je	.L2391	#,
	.loc 1 8257 0 is_stmt 0 discriminator 2
	movq	-8(%rbp), %rax	# this_rtx, tmp141
	movzwl	(%rax), %eax	# this_rtx_44->code, D.28490
	cmpw	$68, %ax	#, D.28490
	je	.L2391	#,
	.loc 1 8257 0 discriminator 1
	movq	-8(%rbp), %rax	# this_rtx, tmp142
	movzwl	(%rax), %eax	# this_rtx_44->code, D.28490
	cmpw	$54, %ax	#, D.28490
	je	.L2391	#,
	movq	-8(%rbp), %rax	# this_rtx, tmp143
	movzwl	(%rax), %eax	# this_rtx_44->code, D.28490
	cmpw	$55, %ax	#, D.28490
	je	.L2391	#,
	movq	-8(%rbp), %rax	# this_rtx, tmp144
	movzwl	(%rax), %eax	# this_rtx_44->code, D.28490
	cmpw	$58, %ax	#, D.28490
	je	.L2391	#,
	movq	-8(%rbp), %rax	# this_rtx, tmp145
	movzwl	(%rax), %eax	# this_rtx_44->code, D.28490
	cmpw	$134, %ax	#, D.28490
	je	.L2391	#,
	movq	-8(%rbp), %rax	# this_rtx, tmp146
	movzwl	(%rax), %eax	# this_rtx_44->code, D.28490
	cmpw	$56, %ax	#, D.28490
	je	.L2391	#,
	movq	-8(%rbp), %rax	# this_rtx, tmp147
	movzwl	(%rax), %eax	# this_rtx_44->code, D.28490
	cmpw	$140, %ax	#, D.28490
	jne	.L2392	#,
.L2391:
	movq	-8(%rbp), %rax	# this_rtx, tmp148
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp148,
	call	references_value_p	#
	testl	%eax, %eax	# D.28488
	jne	.L2392	#,
	.loc 1 8285 0 is_stmt 1
	movq	-8(%rbp), %rax	# this_rtx, tmp149
	movl	$47, %esi	#,
	movq	%rax, %rdi	# tmp149,
	call	rtx_cost	#
	movl	%eax, -44(%rbp)	# tmp150, this_cost
	jmp	.L2393	#
.L2392:
	.loc 1 8287 0
	movq	-8(%rbp), %rax	# this_rtx, tmp151
	movzwl	(%rax), %eax	# this_rtx_44->code, D.28490
	cmpw	$61, %ax	#, D.28490
	jne	.L2394	#,
	.loc 1 8297 0
	movq	-8(%rbp), %rax	# this_rtx, tmp152
	movl	8(%rax), %eax	# this_rtx_44->fld[0].rtuint, D.28493
	movl	%eax, %eax	# D.28493, tmp153
	movl	regclass_map(,%rax,4), %ecx	# regclass_map, D.28494
	movq	-8(%rbp), %rax	# this_rtx, tmp154
	movzbl	2(%rax), %eax	# this_rtx_44->mode, D.28491
	movzbl	%al, %eax	# D.28491, D.28492
	movl	-36(%rbp), %edx	# dclass, tmp155
	movl	%ecx, %esi	# D.28494,
	movl	%eax, %edi	# D.28492,
	call	ix86_register_move_cost	#
	movl	%eax, -44(%rbp)	# tmp156, this_cost
	jmp	.L2393	#
.L2394:
	.loc 1 8302 0
	jmp	.L2395	#
.L2393:
	.loc 1 8306 0
	movl	-44(%rbp), %eax	# this_cost, tmp157
	cmpl	-48(%rbp), %eax	# old_cost, tmp157
	jl	.L2396	#,
	.loc 1 8307 0
	movl	-44(%rbp), %eax	# this_cost, tmp158
	cmpl	-48(%rbp), %eax	# old_cost, tmp158
	jne	.L2395	#,
	.loc 1 8308 0
	movq	-8(%rbp), %rax	# this_rtx, tmp159
	movzwl	(%rax), %eax	# this_rtx_44->code, D.28490
	cmpw	$61, %ax	#, D.28490
	jne	.L2395	#,
	.loc 1 8309 0
	movq	-72(%rbp), %rax	# set, tmp160
	movq	16(%rax), %rax	# set_10(D)->fld[1].rtx, D.28489
	movzwl	(%rax), %eax	# _62->code, D.28490
	cmpw	$61, %ax	#, D.28490
	je	.L2395	#,
.L2396:
	.loc 1 8321 0
	movq	-8(%rbp), %rax	# this_rtx, tmp161
	movq	%rax, %rdi	# tmp161,
	call	copy_rtx	#
	movq	%rax, %rdx	#, D.28489
	movq	-72(%rbp), %rax	# set, tmp162
	leaq	16(%rax), %rsi	#, D.28495
	movq	-80(%rbp), %rax	# insn, tmp163
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp163,
	call	validate_change	#
	.loc 1 8322 0
	movl	-44(%rbp), %eax	# this_cost, tmp164
	movl	%eax, -48(%rbp)	# tmp164, old_cost
	movl	$1, -52(%rbp)	#, did_change
.L2395:
.LBE177:
	.loc 1 8252 0
	movq	-32(%rbp), %rax	# l, tmp165
	movq	(%rax), %rax	# l_6->next, tmp166
	movq	%rax, -32(%rbp)	# tmp166, l
.L2390:
	.loc 1 8252 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, l
	jne	.L2397	#,
	.loc 1 8326 0 is_stmt 1
	movl	-52(%rbp), %eax	# did_change, D.28488
.L2381:
	.loc 1 8327 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE72:
	.size	reload_cse_simplify_set, .-reload_cse_simplify_set
	.type	reload_cse_simplify_operands, @function
reload_cse_simplify_operands:
.LFB73:
	.loc 1 8343 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$872, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -872(%rbp)	# insn, insn
	.loc 1 8362 0
	movl	$-1, %esi	#,
	movl	$0, %edi	#,
	call	gen_rtx_REG	#
	movq	%rax, -776(%rbp)	# tmp311, reg
	.loc 1 8364 0
	movq	-872(%rbp), %rax	# insn, tmp312
	movq	%rax, %rdi	# tmp312,
	call	extract_insn	#
	.loc 1 8366 0
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	testb	%al, %al	# D.28497
	je	.L2399	#,
	.loc 1 8366 0 is_stmt 0 discriminator 1
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.28497
	testb	%al, %al	# D.28497
	jne	.L2400	#,
.L2399:
	.loc 1 8367 0 is_stmt 1
	movl	$0, %eax	#, D.28496
	jmp	.L2506	#
.L2400:
	.loc 1 8370 0
	movl	$1, %edi	#,
	call	constrain_operands	#
	testl	%eax, %eax	# D.28496
	jne	.L2402	#,
	.loc 1 8371 0
	movq	-872(%rbp), %rax	# insn, tmp313
	movl	$__FUNCTION__.16102, %ecx	#,
	movl	$8371, %edx	#,
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# tmp313,
	call	_fatal_insn_not_found	#
.L2402:
	.loc 1 8373 0
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	movsbq	%al, %rax	# D.28497, D.28498
	salq	$2, %rax	#, D.28498
	leaq	15(%rax), %rdx	#, tmp314
	movl	$16, %eax	#, tmp558
	subq	$1, %rax	#, tmp315
	addq	%rdx, %rax	# tmp314, tmp316
	movl	$16, %ebx	#, tmp559
	movl	$0, %edx	#, tmp319
	divq	%rbx	# tmp559
	imulq	$16, %rax, %rax	#, tmp318, tmp320
	subq	%rax, %rsp	# tmp320,
	movq	%rsp, %rax	#, tmp321
	addq	$15, %rax	#, tmp322
	shrq	$4, %rax	#, tmp323
	salq	$4, %rax	#, tmp324
	movq	%rax, -768(%rbp)	# tmp324, alternative_reject
	.loc 1 8374 0
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	movsbq	%al, %rax	# D.28497, D.28498
	salq	$2, %rax	#, D.28498
	leaq	15(%rax), %rdx	#, tmp325
	movl	$16, %eax	#, tmp560
	subq	$1, %rax	#, tmp326
	addq	%rdx, %rax	# tmp325, tmp327
	movl	$16, %ebx	#, tmp561
	movl	$0, %edx	#, tmp330
	divq	%rbx	# tmp561
	imulq	$16, %rax, %rax	#, tmp329, tmp331
	subq	%rax, %rsp	# tmp331,
	movq	%rsp, %rax	#, tmp332
	addq	$15, %rax	#, tmp333
	shrq	$4, %rax	#, tmp334
	salq	$4, %rax	#, tmp335
	movq	%rax, -760(%rbp)	# tmp335, alternative_nregs
	.loc 1 8375 0
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	movsbq	%al, %rax	# D.28497, D.28498
	salq	$2, %rax	#, D.28498
	leaq	15(%rax), %rdx	#, tmp336
	movl	$16, %eax	#, tmp562
	subq	$1, %rax	#, tmp337
	addq	%rdx, %rax	# tmp336, tmp338
	movl	$16, %ebx	#, tmp563
	movl	$0, %edx	#, tmp341
	divq	%rbx	# tmp563
	imulq	$16, %rax, %rax	#, tmp340, tmp342
	subq	%rax, %rsp	# tmp342,
	movq	%rsp, %rax	#, tmp343
	addq	$15, %rax	#, tmp344
	shrq	$4, %rax	#, tmp345
	salq	$4, %rax	#, tmp346
	movq	%rax, -752(%rbp)	# tmp346, alternative_order
	.loc 1 8376 0
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	movsbq	%al, %rax	# D.28497, D.28498
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-768(%rbp), %rax	# alternative_reject, tmp347
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp347,
	call	memset	#
	.loc 1 8377 0
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	movsbq	%al, %rax	# D.28497, D.28498
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-760(%rbp), %rax	# alternative_nregs, tmp348
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp348,
	call	memset	#
	.loc 1 8380 0
	movl	$0, -848(%rbp)	#, i
	jmp	.L2403	#
.L2412:
.LBB178:
	.loc 1 8385 0
	movl	-848(%rbp), %eax	# i, tmp350
	cltq
	movq	$0, -736(%rbp,%rax,8)	#, equiv_regs
	.loc 1 8390 0
	movl	-848(%rbp), %eax	# i, tmp352
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movzwl	(%rax), %eax	# _77->code, D.28500
	cmpw	$36, %ax	#, D.28500
	je	.L2404	#,
	.loc 1 8391 0
	movl	-848(%rbp), %eax	# i, tmp354
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movzwl	(%rax), %eax	# _79->code, D.28500
	cmpw	$67, %ax	#, D.28500
	je	.L2405	#,
	.loc 1 8391 0 is_stmt 0 discriminator 1
	movl	-848(%rbp), %eax	# i, tmp356
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movzwl	(%rax), %eax	# _81->code, D.28500
	cmpw	$68, %ax	#, D.28500
	je	.L2405	#,
	movl	-848(%rbp), %eax	# i, tmp358
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movzwl	(%rax), %eax	# _83->code, D.28500
	cmpw	$54, %ax	#, D.28500
	je	.L2405	#,
	movl	-848(%rbp), %eax	# i, tmp360
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movzwl	(%rax), %eax	# _85->code, D.28500
	cmpw	$55, %ax	#, D.28500
	je	.L2405	#,
	movl	-848(%rbp), %eax	# i, tmp362
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movzwl	(%rax), %eax	# _87->code, D.28500
	cmpw	$58, %ax	#, D.28500
	je	.L2405	#,
	movl	-848(%rbp), %eax	# i, tmp364
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movzwl	(%rax), %eax	# _89->code, D.28500
	cmpw	$134, %ax	#, D.28500
	je	.L2405	#,
	movl	-848(%rbp), %eax	# i, tmp366
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movzwl	(%rax), %eax	# _91->code, D.28500
	cmpw	$56, %ax	#, D.28500
	je	.L2405	#,
	movl	-848(%rbp), %eax	# i, tmp368
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movzwl	(%rax), %eax	# _93->code, D.28500
	cmpw	$140, %ax	#, D.28500
	jne	.L2406	#,
.L2405:
	.loc 1 8392 0 is_stmt 1
	movl	-848(%rbp), %eax	# i, tmp370
	cltq
	addq	$180, %rax	#, tmp371
	movl	recog_data(,%rax,4), %eax	# recog_data.operand_mode, D.28501
	testl	%eax, %eax	# D.28501
	jne	.L2406	#,
.L2404:
	.loc 1 8393 0
	jmp	.L2407	#
.L2406:
	.loc 1 8395 0
	movl	-848(%rbp), %eax	# i, tmp373
	cltq
	addq	$180, %rax	#, tmp374
	movl	recog_data(,%rax,4), %ecx	# recog_data.operand_mode, D.28501
	movl	-848(%rbp), %eax	# i, tmp376
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movl	$0, %edx	#,
	movl	%ecx, %esi	# D.28501,
	movq	%rax, %rdi	# D.28499,
	call	cselib_lookup	#
	movq	%rax, -744(%rbp)	# tmp377, v
	.loc 1 8396 0
	cmpq	$0, -744(%rbp)	#, v
	jne	.L2408	#,
	.loc 1 8397 0
	jmp	.L2407	#
.L2408:
	.loc 1 8399 0
	movq	-744(%rbp), %rax	# v, tmp378
	movq	16(%rax), %rax	# v_98->locs, tmp379
	movq	%rax, -792(%rbp)	# tmp379, l
	jmp	.L2409	#
.L2411:
	.loc 1 8400 0
	movq	-792(%rbp), %rax	# l, tmp380
	movq	8(%rax), %rax	# l_14->loc, D.28499
	movzwl	(%rax), %eax	# _100->code, D.28500
	cmpw	$61, %ax	#, D.28500
	jne	.L2410	#,
	.loc 1 8401 0
	movl	-848(%rbp), %eax	# i, tmp382
	cltq
	movq	-736(%rbp,%rax,8), %rdx	# equiv_regs, D.28498
	movq	-792(%rbp), %rax	# l, tmp383
	movq	8(%rax), %rax	# l_14->loc, D.28499
	movl	8(%rax), %eax	# _103->fld[0].rtuint, D.28502
	movl	$1, %esi	#, tmp384
	movl	%eax, %ecx	# D.28496, tmp570
	salq	%cl, %rsi	# tmp570, D.28498
	movq	%rsi, %rax	# D.28498, D.28498
	orq	%rax, %rdx	# D.28498, D.28498
	movl	-848(%rbp), %eax	# i, tmp386
	cltq
	movq	%rdx, -736(%rbp,%rax,8)	# D.28498, equiv_regs
.L2410:
	.loc 1 8399 0
	movq	-792(%rbp), %rax	# l, tmp387
	movq	(%rax), %rax	# l_14->next, tmp388
	movq	%rax, -792(%rbp)	# tmp388, l
.L2409:
	.loc 1 8399 0 is_stmt 0 discriminator 1
	cmpq	$0, -792(%rbp)	#, l
	jne	.L2411	#,
.L2407:
.LBE178:
	.loc 1 8380 0 is_stmt 1
	addl	$1, -848(%rbp)	#, i
.L2403:
	.loc 1 8380 0 is_stmt 0 discriminator 1
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.28497
	movsbl	%al, %eax	# D.28497, D.28496
	cmpl	-848(%rbp), %eax	# i, D.28496
	jg	.L2412	#,
	.loc 1 8404 0 is_stmt 1
	movl	$0, -848(%rbp)	#, i
	jmp	.L2413	#
.L2488:
.LBB179:
	.loc 1 8410 0
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	movsbq	%al, %rax	# D.28497, D.28498
	salq	$2, %rax	#, D.28498
	leaq	15(%rax), %rdx	#, tmp389
	movl	$16, %eax	#, tmp564
	subq	$1, %rax	#, tmp390
	addq	%rdx, %rax	# tmp389, tmp391
	movl	$16, %ebx	#, tmp565
	movl	$0, %edx	#, tmp394
	divq	%rbx	# tmp565
	imulq	$16, %rax, %rax	#, tmp393, tmp395
	subq	%rax, %rsp	# tmp395,
	movq	%rsp, %rax	#, tmp396
	addq	$15, %rax	#, tmp397
	shrq	$4, %rax	#, tmp398
	salq	$4, %rax	#, tmp399
	movq	%rax, %rdx	# tmp399, D.28503
	movl	-848(%rbp), %eax	# i, tmp401
	cltq
	movq	%rdx, -256(%rbp,%rax,8)	# D.28503, op_alt_regno
	.loc 1 8411 0
	movl	$0, -844(%rbp)	#, j
	jmp	.L2414	#
.L2415:
	.loc 1 8412 0 discriminator 2
	movl	-848(%rbp), %eax	# i, tmp403
	cltq
	movq	-256(%rbp,%rax,8), %rax	# op_alt_regno, D.28504
	movl	-844(%rbp), %edx	# j, tmp404
	movslq	%edx, %rdx	# tmp404, D.28498
	salq	$2, %rdx	#, D.28498
	addq	%rdx, %rax	# D.28498, D.28504
	movl	$-1, (%rax)	#, *_123
	.loc 1 8411 0 discriminator 2
	addl	$1, -844(%rbp)	#, j
.L2414:
	.loc 1 8411 0 is_stmt 0 discriminator 1
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	movsbl	%al, %eax	# D.28497, D.28496
	cmpl	-844(%rbp), %eax	# j, D.28496
	jg	.L2415	#,
	.loc 1 8414 0 is_stmt 1
	movl	-848(%rbp), %eax	# i, tmp406
	cltq
	addq	$60, %rax	#, tmp407
	movq	recog_data(,%rax,8), %rdx	# recog_data.constraints, D.28505
	movl	-848(%rbp), %eax	# i, tmp409
	cltq
	movq	%rdx, -496(%rbp,%rax,8)	# D.28505, constraints
	movl	-848(%rbp), %eax	# i, tmp411
	cltq
	movq	-496(%rbp,%rax,8), %rax	# constraints, tmp412
	movq	%rax, -784(%rbp)	# tmp412, p
	.loc 1 8415 0
	movl	-848(%rbp), %eax	# i, tmp414
	cltq
	addq	$180, %rax	#, tmp415
	movl	recog_data(,%rax,4), %eax	# recog_data.operand_mode, tmp416
	movl	%eax, -820(%rbp)	# tmp416, mode
	.loc 1 8419 0
	movl	$0, -844(%rbp)	#, j
	.loc 1 8420 0
	jmp	.L2416	#
.L2419:
.LBB180:
	.loc 1 8422 0
	movq	-784(%rbp), %rax	# p, p.1279
	leaq	1(%rax), %rdx	#, tmp417
	movq	%rdx, -784(%rbp)	# tmp417, p
	movzbl	(%rax), %eax	# *p.1279_130, tmp418
	movb	%al, -850(%rbp)	# tmp418, c
	.loc 1 8423 0
	cmpb	$44, -850(%rbp)	#, c
	jne	.L2417	#,
	.loc 1 8424 0
	addl	$1, -844(%rbp)	#, j
	jmp	.L2416	#
.L2417:
	.loc 1 8425 0
	cmpb	$63, -850(%rbp)	#, c
	jne	.L2418	#,
	.loc 1 8426 0
	movl	-844(%rbp), %eax	# j, tmp419
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-768(%rbp), %rax	# alternative_reject, tmp420
	addq	%rdx, %rax	# D.28498, D.28504
	movl	-844(%rbp), %edx	# j, tmp421
	movslq	%edx, %rdx	# tmp421, D.28498
	leaq	0(,%rdx,4), %rcx	#, D.28498
	movq	-768(%rbp), %rdx	# alternative_reject, tmp422
	addq	%rcx, %rdx	# D.28498, D.28504
	movl	(%rdx), %edx	# *_139, D.28496
	addl	$3, %edx	#, D.28496
	movl	%edx, (%rax)	# D.28496, *_136
	jmp	.L2416	#
.L2418:
	.loc 1 8427 0
	cmpb	$33, -850(%rbp)	#, c
	jne	.L2416	#,
	.loc 1 8428 0
	movl	-844(%rbp), %eax	# j, tmp423
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-768(%rbp), %rax	# alternative_reject, tmp424
	addq	%rdx, %rax	# D.28498, D.28504
	movl	-844(%rbp), %edx	# j, tmp425
	movslq	%edx, %rdx	# tmp425, D.28498
	leaq	0(,%rdx,4), %rcx	#, D.28498
	movq	-768(%rbp), %rdx	# alternative_reject, tmp426
	addq	%rcx, %rdx	# D.28498, D.28504
	movl	(%rdx), %edx	# *_147, D.28496
	addl	$300, %edx	#, D.28496
	movl	%edx, (%rax)	# D.28496, *_144
.L2416:
.LBE180:
	.loc 1 8420 0 discriminator 1
	movq	-784(%rbp), %rax	# p, tmp427
	movzbl	(%rax), %eax	# *p_16, D.28497
	testb	%al, %al	# D.28497
	jne	.L2419	#,
	.loc 1 8433 0
	movl	-848(%rbp), %eax	# i, tmp429
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movq	%rax, %rdi	# D.28499,
	call	true_regnum	#
	movl	%eax, -840(%rbp)	# tmp430, regno
	.loc 1 8434 0
	cmpl	$0, -840(%rbp)	#, regno
	jns	.L2420	#,
	.loc 1 8435 0
	movl	-848(%rbp), %eax	# i, tmp432
	cltq
	movq	-496(%rbp,%rax,8), %rax	# constraints, D.28505
	movzbl	(%rax), %eax	# *_152, D.28497
	cmpb	$61, %al	#, D.28497
	je	.L2420	#,
	.loc 1 8436 0
	movl	-848(%rbp), %eax	# i, tmp434
	cltq
	movq	-496(%rbp,%rax,8), %rax	# constraints, D.28505
	movzbl	(%rax), %eax	# *_154, D.28497
	cmpb	$43, %al	#, D.28497
	jne	.L2421	#,
.L2420:
	.loc 1 8437 0
	jmp	.L2422	#
.L2421:
	.loc 1 8439 0
	movl	$0, -840(%rbp)	#, regno
	jmp	.L2423	#
.L2487:
.LBB181:
	.loc 1 8441 0
	movl	$0, -836(%rbp)	#, class
	.loc 1 8443 0
	movl	-848(%rbp), %eax	# i, tmp436
	cltq
	movq	-736(%rbp,%rax,8), %rdx	# equiv_regs, D.28498
	movl	-840(%rbp), %eax	# regno, tmp437
	movl	%eax, %ecx	# tmp437, tmp573
	shrq	%cl, %rdx	# tmp573, D.28498
	movq	%rdx, %rax	# D.28498, D.28498
	andl	$1, %eax	#, D.28498
	testq	%rax, %rax	# D.28498
	jne	.L2424	#,
	.loc 1 8444 0
	jmp	.L2425	#
.L2424:
	.loc 1 8446 0
	movl	-840(%rbp), %edx	# regno, regno.1280
	movq	-776(%rbp), %rax	# reg, tmp438
	movl	%edx, 8(%rax)	# regno.1280, reg_51->fld[0].rtuint
	.loc 1 8447 0
	movl	-820(%rbp), %eax	# mode, tmp439
	movl	%eax, %edx	# tmp439, D.28506
	movq	-776(%rbp), %rax	# reg, tmp440
	movb	%dl, 2(%rax)	# D.28506, reg_51->mode
	.loc 1 8452 0
	movl	$0, -844(%rbp)	#, j
	.loc 1 8453 0
	movl	-848(%rbp), %eax	# i, tmp442
	cltq
	movq	-496(%rbp,%rax,8), %rax	# constraints, tmp443
	movq	%rax, -784(%rbp)	# tmp443, p
.L2486:
.LBB182:
	.loc 1 8456 0
	movq	-784(%rbp), %rax	# p, p.1281
	leaq	1(%rax), %rdx	#, tmp444
	movq	%rdx, -784(%rbp)	# tmp444, p
	movzbl	(%rax), %eax	# *p.1281_165, tmp445
	movb	%al, -849(%rbp)	# tmp445, c
	.loc 1 8458 0
	movsbl	-849(%rbp), %eax	# c, D.28496
	cmpl	$115, %eax	#, D.28496
	ja	.L2426	#,
	movl	%eax, %eax	# D.28496, tmp446
	movq	.L2428(,%rax,8), %rax	#, tmp447
	jmp	*%rax	# tmp447
	.section	.rodata
	.align 8
	.align 4
.L2428:
	.quad	.L2427
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2507
	.quad	.L2426
	.quad	.L2507
	.quad	.L2426
	.quad	.L2507
	.quad	.L2507
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2507
	.quad	.L2507
	.quad	.L2427
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2426
	.quad	.L2426
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2507
	.quad	.L2426
	.quad	.L2507
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2430
	.quad	.L2426
	.quad	.L2507
	.quad	.L2426
	.quad	.L2426
	.quad	.L2426
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2507
	.quad	.L2426
	.quad	.L2430
	.quad	.L2507
	.text
.L2430:
	.loc 1 8475 0
	movl	-836(%rbp), %eax	# class, tmp449
	movslq	%eax, %rdx	# tmp449, tmp448
	movq	%rdx, %rax	# tmp448, tmp450
	salq	$2, %rax	#, tmp450
	addq	%rdx, %rax	# tmp448, tmp450
	leaq	0(,%rax,4), %rdx	#, tmp451
	addq	%rdx, %rax	# tmp451, tmp450
	salq	$2, %rax	#, tmp452
	addq	$reg_class_subunion+48, %rax	#, tmp453
	movl	(%rax), %eax	# reg_class_subunion, D.28507
	movl	%eax, -836(%rbp)	# D.28507, class
	.loc 1 8476 0
	jmp	.L2431	#
.L2426:
	.loc 1 8480 0
	cmpb	$114, -849(%rbp)	#, c
	je	.L2432	#,
	.loc 1 8480 0 is_stmt 0 discriminator 1
	cmpb	$82, -849(%rbp)	#, c
	je	.L2433	#,
	cmpb	$113, -849(%rbp)	#, c
	jne	.L2434	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1286
	andl	$33554432, %eax	#, D.28496
	testl	%eax, %eax	# D.28496
	je	.L2435	#,
	movl	$12, %eax	#, iftmp.1285
	jmp	.L2482	#
.L2435:
	.loc 1 8480 0 discriminator 2
	movl	$8, %eax	#, iftmp.1285
	jmp	.L2482	#
.L2434:
	cmpb	$81, -849(%rbp)	#, c
	je	.L2438	#,
	.loc 1 8480 0 discriminator 1
	cmpb	$102, -849(%rbp)	#, c
	jne	.L2439	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1290
	andl	$1, %eax	#, D.28496
	testl	%eax, %eax	# D.28496
	jne	.L2440	#,
	.loc 1 8480 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1291
	andl	$32, %eax	#, D.28496
	testl	%eax, %eax	# D.28496
	je	.L2441	#,
.L2440:
	.loc 1 8480 0 discriminator 1
	movl	$15, %eax	#, iftmp.1289
	jmp	.L2442	#
.L2441:
	movl	$0, %eax	#, iftmp.1289
.L2442:
	jmp	.L2482	#
.L2439:
	.loc 1 8480 0 discriminator 2
	cmpb	$116, -849(%rbp)	#, c
	jne	.L2444	#,
	.loc 1 8480 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1294
	andl	$1, %eax	#, D.28496
	testl	%eax, %eax	# D.28496
	jne	.L2445	#,
	.loc 1 8480 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1295
	andl	$32, %eax	#, D.28496
	testl	%eax, %eax	# D.28496
	je	.L2446	#,
.L2445:
	.loc 1 8480 0 discriminator 1
	movl	$13, %eax	#, iftmp.1293
	jmp	.L2447	#
.L2446:
	movl	$0, %eax	#, iftmp.1293
.L2447:
	jmp	.L2482	#
.L2444:
	.loc 1 8480 0 discriminator 2
	cmpb	$117, -849(%rbp)	#, c
	jne	.L2449	#,
	.loc 1 8480 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1298
	andl	$1, %eax	#, D.28496
	testl	%eax, %eax	# D.28496
	jne	.L2450	#,
	.loc 1 8480 0 discriminator 2
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1299
	andl	$32, %eax	#, D.28496
	testl	%eax, %eax	# D.28496
	je	.L2451	#,
.L2450:
	.loc 1 8480 0 discriminator 1
	movl	$14, %eax	#, iftmp.1297
	jmp	.L2452	#
.L2451:
	movl	$0, %eax	#, iftmp.1297
.L2452:
	jmp	.L2482	#
.L2449:
	.loc 1 8480 0 discriminator 2
	cmpb	$97, -849(%rbp)	#, c
	je	.L2454	#,
	.loc 1 8480 0 discriminator 1
	cmpb	$98, -849(%rbp)	#, c
	je	.L2455	#,
	cmpb	$99, -849(%rbp)	#, c
	je	.L2456	#,
	cmpb	$100, -849(%rbp)	#, c
	je	.L2457	#,
	cmpb	$120, -849(%rbp)	#, c
	jne	.L2458	#,
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1306
	andl	$327680, %eax	#, D.28496
	testl	%eax, %eax	# D.28496
	je	.L2459	#,
	movl	$16, %eax	#, iftmp.1305
	jmp	.L2482	#
.L2459:
	.loc 1 8480 0 discriminator 2
	movl	$0, %eax	#, iftmp.1305
	jmp	.L2482	#
.L2458:
	cmpb	$89, -849(%rbp)	#, c
	jne	.L2462	#,
	.loc 1 8480 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1309
	andl	$262144, %eax	#, D.28496
	testl	%eax, %eax	# D.28496
	je	.L2463	#,
	movl	$16, %eax	#, iftmp.1308
	jmp	.L2482	#
.L2463:
	.loc 1 8480 0 discriminator 2
	movl	$0, %eax	#, iftmp.1308
	jmp	.L2482	#
.L2462:
	cmpb	$121, -849(%rbp)	#, c
	jne	.L2466	#,
	.loc 1 8480 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1312
	andl	$16384, %eax	#, D.28496
	testl	%eax, %eax	# D.28496
	je	.L2467	#,
	movl	$17, %eax	#, iftmp.1311
	jmp	.L2482	#
.L2467:
	.loc 1 8480 0 discriminator 2
	movl	$0, %eax	#, iftmp.1311
	jmp	.L2482	#
.L2466:
	cmpb	$65, -849(%rbp)	#, c
	je	.L2470	#,
	.loc 1 8480 0 discriminator 1
	cmpb	$68, -849(%rbp)	#, c
	je	.L2471	#,
	cmpb	$83, -849(%rbp)	#, c
	jne	.L2472	#,
	movl	$5, %eax	#, iftmp.1315
	jmp	.L2482	#
.L2472:
	.loc 1 8480 0 discriminator 2
	movl	$0, %eax	#, iftmp.1315
	jmp	.L2482	#
.L2471:
	movl	$6, %eax	#, iftmp.1314
	jmp	.L2482	#
.L2470:
	movl	$7, %eax	#, iftmp.1313
	jmp	.L2482	#
.L2457:
	movl	$2, %eax	#, iftmp.1303
	jmp	.L2482	#
.L2456:
	movl	$3, %eax	#, iftmp.1302
	jmp	.L2482	#
.L2455:
	movl	$4, %eax	#, iftmp.1301
	jmp	.L2482	#
.L2454:
	movl	$1, %eax	#, iftmp.1300
	jmp	.L2482	#
.L2438:
	movl	$8, %eax	#, iftmp.1287
	jmp	.L2482	#
.L2433:
	movl	$11, %eax	#, iftmp.1283
	jmp	.L2482	#
.L2432:
	movl	$12, %eax	#, iftmp.1282
.L2482:
	.loc 1 8480 0 discriminator 3
	movslq	%eax, %rcx	# iftmp.1282, tmp454
	movl	-836(%rbp), %eax	# class, tmp456
	movslq	%eax, %rdx	# tmp456, tmp455
	movq	%rdx, %rax	# tmp455, tmp457
	salq	$2, %rax	#, tmp457
	addq	%rdx, %rax	# tmp455, tmp457
	leaq	0(,%rax,4), %rdx	#, tmp458
	addq	%rdx, %rax	# tmp458, tmp457
	addq	%rcx, %rax	# tmp454, tmp459
	movl	reg_class_subunion(,%rax,4), %eax	# reg_class_subunion, D.28507
	movl	%eax, -836(%rbp)	# D.28507, class
	.loc 1 8481 0 is_stmt 1 discriminator 3
	jmp	.L2431	#
.L2427:
	.loc 1 8488 0
	movl	-848(%rbp), %eax	# i, tmp461
	cltq
	movq	-256(%rbp,%rax,8), %rax	# op_alt_regno, D.28504
	movl	-844(%rbp), %edx	# j, tmp462
	movslq	%edx, %rdx	# tmp462, D.28498
	salq	$2, %rdx	#, D.28498
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_244, D.28496
	cmpl	$-1, %eax	#, D.28496
	jne	.L2483	#,
	.loc 1 8489 0
	movl	-836(%rbp), %esi	# class, class.1316
	movl	-820(%rbp), %edx	# mode, tmp463
	movq	-776(%rbp), %rax	# reg, tmp464
	movl	%edx, %ecx	# tmp463,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp464,
	call	reg_fits_class_p	#
	testl	%eax, %eax	# D.28496
	je	.L2483	#,
	.loc 1 8490 0
	movl	-848(%rbp), %eax	# i, tmp466
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movzwl	(%rax), %eax	# _248->code, D.28500
	cmpw	$54, %ax	#, D.28500
	jne	.L2484	#,
	.loc 1 8491 0
	movl	-848(%rbp), %eax	# i, tmp468
	cltq
	movq	recog_data(,%rax,8), %rax	# recog_data.operand, D.28499
	movl	$47, %esi	#,
	movq	%rax, %rdi	# D.28499,
	call	rtx_cost	#
	movl	%eax, %ebx	#, D.28496
	.loc 1 8492 0
	movq	-776(%rbp), %rax	# reg, tmp469
	movl	$47, %esi	#,
	movq	%rax, %rdi	# tmp469,
	call	rtx_cost	#
	.loc 1 8491 0
	cmpl	%eax, %ebx	# D.28496, D.28496
	jle	.L2483	#,
.L2484:
	.loc 1 8494 0
	movl	-844(%rbp), %eax	# j, tmp470
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-760(%rbp), %rax	# alternative_nregs, tmp471
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %edx	# *_255, D.28496
	addl	$1, %edx	#, D.28496
	movl	%edx, (%rax)	# D.28496, *_255
	.loc 1 8495 0
	movl	-848(%rbp), %eax	# i, tmp473
	cltq
	movq	-256(%rbp,%rax,8), %rax	# op_alt_regno, D.28504
	movl	-844(%rbp), %edx	# j, tmp474
	movslq	%edx, %rdx	# tmp474, D.28498
	salq	$2, %rdx	#, D.28498
	addq	%rax, %rdx	# D.28504, D.28504
	movl	-840(%rbp), %eax	# regno, tmp475
	movl	%eax, (%rdx)	# tmp475, *_261
.L2483:
	.loc 1 8497 0
	addl	$1, -844(%rbp)	#, j
	.loc 1 8498 0
	jmp	.L2431	#
.L2507:
	.loc 1 8472 0
	nop
.L2431:
	.loc 1 8501 0
	cmpb	$0, -849(%rbp)	#, c
	jne	.L2485	#,
	.loc 1 8502 0
	jmp	.L2425	#
.L2485:
.LBE182:
	.loc 1 8503 0
	jmp	.L2486	#
.L2425:
.LBE181:
	.loc 1 8439 0
	addl	$1, -840(%rbp)	#, regno
.L2423:
	.loc 1 8439 0 is_stmt 0 discriminator 1
	cmpl	$52, -840(%rbp)	#, regno
	jle	.L2487	#,
.L2422:
.LBE179:
	.loc 1 8404 0 is_stmt 1
	addl	$1, -848(%rbp)	#, i
.L2413:
	.loc 1 8404 0 is_stmt 0 discriminator 1
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.28497
	movsbl	%al, %eax	# D.28497, D.28496
	cmpl	-848(%rbp), %eax	# i, D.28496
	jg	.L2488	#,
	.loc 1 8509 0 is_stmt 1
	movl	$0, -844(%rbp)	#, j
	movl	-844(%rbp), %eax	# j, tmp476
	movl	%eax, -848(%rbp)	# tmp476, i
	jmp	.L2489	#
.L2491:
	.loc 1 8510 0
	movl	-848(%rbp), %eax	# i, tmp477
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-768(%rbp), %rax	# alternative_reject, tmp478
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %edx	# *_271, D.28496
	movl	which_alternative(%rip), %eax	# which_alternative, which_alternative.1317
	cltq
	leaq	0(,%rax,4), %rcx	#, D.28498
	movq	-768(%rbp), %rax	# alternative_reject, tmp479
	addq	%rcx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_276, D.28496
	cmpl	%eax, %edx	# D.28496, D.28496
	jg	.L2490	#,
	.loc 1 8511 0
	movl	-844(%rbp), %eax	# j, j.1318
	leal	1(%rax), %edx	#, tmp480
	movl	%edx, -844(%rbp)	# tmp480, j
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-752(%rbp), %rax	# alternative_order, tmp481
	addq	%rax, %rdx	# tmp481, D.28504
	movl	-848(%rbp), %eax	# i, tmp482
	movl	%eax, (%rdx)	# tmp482, *_282
.L2490:
	.loc 1 8509 0
	addl	$1, -848(%rbp)	#, i
.L2489:
	.loc 1 8509 0 is_stmt 0 discriminator 1
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	movsbl	%al, %eax	# D.28497, D.28496
	cmpl	-848(%rbp), %eax	# i, D.28496
	jg	.L2491	#,
	.loc 1 8512 0 is_stmt 1
	movl	-844(%rbp), %eax	# j, tmp483
	movb	%al, recog_data+998(%rip)	# D.28497, recog_data.n_alternatives
	.loc 1 8516 0
	movl	$0, -848(%rbp)	#, i
	jmp	.L2492	#
.L2497:
.LBB183:
	.loc 1 8518 0
	movl	-848(%rbp), %eax	# i, tmp484
	movl	%eax, -832(%rbp)	# tmp484, best
	.loc 1 8519 0
	movl	-848(%rbp), %eax	# i, tmp485
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-752(%rbp), %rax	# alternative_order, tmp486
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_292, D.28496
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-768(%rbp), %rax	# alternative_reject, tmp487
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_296, tmp488
	movl	%eax, -828(%rbp)	# tmp488, best_reject
	.loc 1 8520 0
	movl	-848(%rbp), %eax	# i, tmp489
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-752(%rbp), %rax	# alternative_order, tmp490
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_300, D.28496
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-760(%rbp), %rax	# alternative_nregs, tmp491
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_304, tmp492
	movl	%eax, -824(%rbp)	# tmp492, best_nregs
	.loc 1 8523 0
	movl	-848(%rbp), %eax	# i, tmp496
	addl	$1, %eax	#, tmp495
	movl	%eax, -844(%rbp)	# tmp495, j
	jmp	.L2493	#
.L2496:
.LBB184:
	.loc 1 8525 0
	movl	-844(%rbp), %eax	# j, tmp497
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-752(%rbp), %rax	# alternative_order, tmp498
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_311, D.28496
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-768(%rbp), %rax	# alternative_reject, tmp499
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_315, tmp500
	movl	%eax, -816(%rbp)	# tmp500, this_reject
	.loc 1 8526 0
	movl	-844(%rbp), %eax	# j, tmp501
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-752(%rbp), %rax	# alternative_order, tmp502
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_319, D.28496
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-760(%rbp), %rax	# alternative_nregs, tmp503
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_323, tmp504
	movl	%eax, -812(%rbp)	# tmp504, this_nregs
	.loc 1 8528 0
	movl	-816(%rbp), %eax	# this_reject, tmp505
	cmpl	-828(%rbp), %eax	# best_reject, tmp505
	jl	.L2494	#,
	.loc 1 8529 0
	movl	-816(%rbp), %eax	# this_reject, tmp506
	cmpl	-828(%rbp), %eax	# best_reject, tmp506
	jne	.L2495	#,
	.loc 1 8529 0 is_stmt 0 discriminator 1
	movl	-812(%rbp), %eax	# this_nregs, tmp507
	cmpl	-824(%rbp), %eax	# best_nregs, tmp507
	jge	.L2495	#,
.L2494:
	.loc 1 8531 0 is_stmt 1
	movl	-844(%rbp), %eax	# j, tmp508
	movl	%eax, -832(%rbp)	# tmp508, best
	.loc 1 8532 0
	movl	-816(%rbp), %eax	# this_reject, tmp509
	movl	%eax, -828(%rbp)	# tmp509, best_reject
	.loc 1 8533 0
	movl	-812(%rbp), %eax	# this_nregs, tmp510
	movl	%eax, -824(%rbp)	# tmp510, best_nregs
.L2495:
.LBE184:
	.loc 1 8523 0
	addl	$1, -844(%rbp)	#, j
.L2493:
	.loc 1 8523 0 is_stmt 0 discriminator 1
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	movsbl	%al, %eax	# D.28497, D.28496
	cmpl	-844(%rbp), %eax	# j, D.28496
	jg	.L2496	#,
	.loc 1 8537 0 is_stmt 1
	movl	-832(%rbp), %eax	# best, tmp511
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-752(%rbp), %rax	# alternative_order, tmp512
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_331, tmp513
	movl	%eax, -808(%rbp)	# tmp513, tmp
	.loc 1 8538 0
	movl	-832(%rbp), %eax	# best, tmp514
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-752(%rbp), %rax	# alternative_order, tmp515
	addq	%rax, %rdx	# tmp515, D.28504
	movl	-848(%rbp), %eax	# i, tmp516
	cltq
	leaq	0(,%rax,4), %rcx	#, D.28498
	movq	-752(%rbp), %rax	# alternative_order, tmp517
	addq	%rcx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_338, D.28496
	movl	%eax, (%rdx)	# D.28496, *_335
	.loc 1 8539 0
	movl	-848(%rbp), %eax	# i, tmp518
	cltq
	leaq	0(,%rax,4), %rdx	#, D.28498
	movq	-752(%rbp), %rax	# alternative_order, tmp519
	addq	%rax, %rdx	# tmp519, D.28504
	movl	-808(%rbp), %eax	# tmp, tmp520
	movl	%eax, (%rdx)	# tmp520, *_342
.LBE183:
	.loc 1 8516 0
	addl	$1, -848(%rbp)	#, i
.L2492:
	.loc 1 8516 0 is_stmt 0 discriminator 1
	movzbl	recog_data+998(%rip), %eax	# recog_data.n_alternatives, D.28497
	movsbl	%al, %eax	# D.28497, D.28496
	subl	$1, %eax	#, D.28496
	cmpl	-848(%rbp), %eax	# i, D.28496
	jg	.L2497	#,
	.loc 1 8544 0 is_stmt 1
	movq	-752(%rbp), %rax	# alternative_order, tmp521
	movl	(%rax), %eax	# *alternative_order_67, tmp522
	movl	%eax, -844(%rbp)	# tmp522, j
	.loc 1 8546 0
	movl	$0, -848(%rbp)	#, i
	jmp	.L2498	#
.L2501:
.LBB185:
	.loc 1 8548 0
	movl	-848(%rbp), %eax	# i, tmp524
	cltq
	addq	$180, %rax	#, tmp525
	movl	recog_data(,%rax,4), %eax	# recog_data.operand_mode, tmp526
	movl	%eax, -804(%rbp)	# tmp526, mode
	.loc 1 8549 0
	movl	-848(%rbp), %eax	# i, tmp528
	cltq
	movq	-256(%rbp,%rax,8), %rax	# op_alt_regno, D.28504
	movl	-844(%rbp), %edx	# j, tmp529
	movslq	%edx, %rdx	# tmp529, D.28498
	salq	$2, %rdx	#, D.28498
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_352, D.28496
	cmpl	$-1, %eax	#, D.28496
	jne	.L2499	#,
	.loc 1 8550 0
	jmp	.L2500	#
.L2499:
	.loc 1 8553 0
	movl	-848(%rbp), %eax	# i, tmp531
	cltq
	movq	-256(%rbp,%rax,8), %rax	# op_alt_regno, D.28504
	movl	-844(%rbp), %edx	# j, tmp532
	movslq	%edx, %rdx	# tmp532, D.28498
	salq	$2, %rdx	#, D.28498
	addq	%rdx, %rax	# D.28498, D.28504
	.loc 1 8552 0
	movl	(%rax), %edx	# *_357, D.28496
	movl	-804(%rbp), %eax	# mode, tmp533
	movl	%edx, %esi	# D.28496,
	movl	%eax, %edi	# tmp533,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.28499
	movl	-848(%rbp), %eax	# i, tmp535
	cltq
	addq	$30, %rax	#, tmp536
	movq	recog_data(,%rax,8), %rsi	# recog_data.operand_loc, D.28508
	movq	-872(%rbp), %rax	# insn, tmp537
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp537,
	call	validate_change	#
.L2500:
.LBE185:
	.loc 1 8546 0
	addl	$1, -848(%rbp)	#, i
.L2498:
	.loc 1 8546 0 is_stmt 0 discriminator 1
	movzbl	recog_data+996(%rip), %eax	# recog_data.n_operands, D.28497
	movsbl	%al, %eax	# D.28497, D.28496
	cmpl	-848(%rbp), %eax	# i, D.28496
	jg	.L2501	#,
	.loc 1 8556 0 is_stmt 1
	movzbl	recog_data+997(%rip), %eax	# recog_data.n_dups, D.28497
	movsbl	%al, %eax	# D.28497, D.28496
	subl	$1, %eax	#, tmp538
	movl	%eax, -848(%rbp)	# tmp538, i
	jmp	.L2502	#
.L2505:
.LBB186:
	.loc 1 8558 0
	movl	-848(%rbp), %eax	# i, tmp540
	cltq
	movzbl	recog_data+992(%rax), %eax	# recog_data.dup_num, D.28497
	movsbl	%al, %eax	# D.28497, tmp541
	movl	%eax, -800(%rbp)	# tmp541, op
	.loc 1 8559 0
	movl	-800(%rbp), %eax	# op, tmp543
	cltq
	addq	$180, %rax	#, tmp544
	movl	recog_data(,%rax,4), %eax	# recog_data.operand_mode, tmp545
	movl	%eax, -796(%rbp)	# tmp545, mode
	.loc 1 8561 0
	movl	-800(%rbp), %eax	# op, tmp547
	cltq
	movq	-256(%rbp,%rax,8), %rax	# op_alt_regno, D.28504
	movl	-844(%rbp), %edx	# j, tmp548
	movslq	%edx, %rdx	# tmp548, D.28498
	salq	$2, %rdx	#, D.28498
	addq	%rdx, %rax	# D.28498, D.28504
	movl	(%rax), %eax	# *_371, D.28496
	cmpl	$-1, %eax	#, D.28496
	jne	.L2503	#,
	.loc 1 8562 0
	jmp	.L2504	#
.L2503:
	.loc 1 8565 0
	movl	-800(%rbp), %eax	# op, tmp550
	cltq
	movq	-256(%rbp,%rax,8), %rax	# op_alt_regno, D.28504
	movl	-844(%rbp), %edx	# j, tmp551
	movslq	%edx, %rdx	# tmp551, D.28498
	salq	$2, %rdx	#, D.28498
	addq	%rdx, %rax	# D.28498, D.28504
	.loc 1 8564 0
	movl	(%rax), %edx	# *_376, D.28496
	movl	-796(%rbp), %eax	# mode, tmp552
	movl	%edx, %esi	# D.28496,
	movl	%eax, %edi	# tmp552,
	call	gen_rtx_REG	#
	movq	%rax, %rdx	#, D.28499
	movl	-848(%rbp), %eax	# i, tmp554
	cltq
	addq	$120, %rax	#, tmp555
	movq	recog_data(,%rax,8), %rsi	# recog_data.dup_loc, D.28508
	movq	-872(%rbp), %rax	# insn, tmp556
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp556,
	call	validate_change	#
.L2504:
.LBE186:
	.loc 1 8556 0
	subl	$1, -848(%rbp)	#, i
.L2502:
	.loc 1 8556 0 is_stmt 0 discriminator 1
	cmpl	$0, -848(%rbp)	#, i
	jns	.L2505	#,
	.loc 1 8568 0 is_stmt 1
	call	apply_change_group	#
.L2506:
	.loc 1 8569 0
	movq	-8(%rbp), %rbx	#,
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE73:
	.size	reload_cse_simplify_operands, .-reload_cse_simplify_operands
	.local	reg_state
	.comm	reg_state,6360,32
	.local	reload_combine_ruid
	.comm	reload_combine_ruid,4,4
	.type	reload_combine, @function
reload_combine:
.LFB74:
	.loc 1 8614 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$216, %rsp	#,
	.cfi_offset 3, -24
	.loc 1 8616 0
	movl	$-1, -216(%rbp)	#, first_index_reg
	.loc 1 8617 0
	movl	$0, -212(%rbp)	#, last_index_reg
	.loc 1 8627 0
	movzbl	double_reg_address_ok(%rip), %eax	# double_reg_address_ok, double_reg_address_ok.1319
	testb	%al, %al	# double_reg_address_ok.1319
	je	.L2509	#,
	.loc 1 8628 0
	jmp	.L2508	#
.L2509:
	.loc 1 8632 0
	movl	$0, -204(%rbp)	#, r
	jmp	.L2511	#
.L2514:
	.loc 1 8633 0
	movq	reg_class_contents+80(%rip), %rdx	# reg_class_contents, D.28510
	movl	-204(%rbp), %eax	# r, r.1320
	movl	%eax, %ecx	# r.1320, tmp640
	shrq	%cl, %rdx	# tmp640, D.28510
	movq	%rdx, %rax	# D.28510, D.28510
	andl	$1, %eax	#, D.28510
	testq	%rax, %rax	# D.28510
	je	.L2512	#,
	.loc 1 8635 0
	cmpl	$-1, -216(%rbp)	#, first_index_reg
	jne	.L2513	#,
	.loc 1 8636 0
	movl	-204(%rbp), %eax	# r, tmp311
	movl	%eax, -216(%rbp)	# tmp311, first_index_reg
.L2513:
	.loc 1 8638 0
	movl	-204(%rbp), %eax	# r, tmp312
	movl	%eax, -212(%rbp)	# tmp312, last_index_reg
.L2512:
	.loc 1 8632 0
	addl	$1, -204(%rbp)	#, r
.L2511:
	.loc 1 8632 0 is_stmt 0 discriminator 1
	cmpl	$52, -204(%rbp)	#, r
	jbe	.L2514	#,
	.loc 1 8642 0 is_stmt 1
	cmpl	$-1, -216(%rbp)	#, first_index_reg
	jne	.L2515	#,
	.loc 1 8643 0
	jmp	.L2508	#
.L2515:
	.loc 1 8649 0
	call	get_first_label_num	#
	movl	%eax, -188(%rbp)	# tmp313, min_labelno
	.loc 1 8650 0
	call	max_label_num	#
	subl	-188(%rbp), %eax	# min_labelno, tmp315
	movl	%eax, -184(%rbp)	# tmp315, n_labels
	.loc 1 8651 0
	movl	-184(%rbp), %eax	# n_labels, tmp316
	cltq
	salq	$3, %rax	#, D.28510
	movq	%rax, %rdi	# D.28510,
	call	xmalloc	#
	movq	%rax, -88(%rbp)	# tmp317, label_live
	.loc 1 8652 0
	movq	$0, -160(%rbp)	#, ever_live_at_start
	.loc 1 8654 0
	movl	n_basic_blocks(%rip), %eax	# n_basic_blocks, n_basic_blocks.1321
	subl	$1, %eax	#, tmp318
	movl	%eax, -208(%rbp)	# tmp318, i
	jmp	.L2516	#
.L2518:
	.loc 1 8656 0
	movq	basic_block_info(%rip), %rax	# basic_block_info, basic_block_info.1322
	movl	-208(%rbp), %edx	# i, tmp320
	movslq	%edx, %rdx	# tmp320, tmp319
	addq	$4, %rdx	#, tmp321
	movq	(%rax,%rdx,8), %rax	# basic_block_info.1322_66->data.bb, D.28512
	movq	(%rax), %rax	# _67->head, tmp322
	movq	%rax, -144(%rbp)	# tmp322, insn
	.loc 1 8657 0
	movq	-144(%rbp), %rax	# insn, tmp323
	movzwl	(%rax), %eax	# insn_68->code, D.28513
	cmpw	$36, %ax	#, D.28513
	jne	.L2517	#,
.LBB187:
	.loc 1 8661 0
	movq	$0, -152(%rbp)	#, live
	movq	basic_block_info(%rip), %rax	# basic_block_info, basic_block_info.1323
	movl	-208(%rbp), %edx	# i, tmp325
	movslq	%edx, %rdx	# tmp325, tmp324
	addq	$4, %rdx	#, tmp326
	movq	(%rax,%rdx,8), %rax	# basic_block_info.1323_70->data.bb, D.28512
	movq	64(%rax), %rdx	# _71->global_live_at_start, D.28514
	leaq	-152(%rbp), %rax	#, tmp327
	movq	%rdx, %rsi	# D.28514,
	movq	%rax, %rdi	# tmp327,
	call	reg_set_to_hard_reg_set	#
	.loc 1 8664 0
	movq	basic_block_info(%rip), %rax	# basic_block_info, basic_block_info.1324
	movl	-208(%rbp), %edx	# i, tmp329
	movslq	%edx, %rdx	# tmp329, tmp328
	addq	$4, %rdx	#, tmp330
	movq	(%rax,%rdx,8), %rax	# basic_block_info.1324_73->data.bb, D.28512
	.loc 1 8663 0
	movq	64(%rax), %rdx	# _74->global_live_at_start, D.28514
	leaq	-152(%rbp), %rax	#, tmp331
	movq	%rdx, %rsi	# D.28514,
	movq	%rax, %rdi	# tmp331,
	call	compute_use_by_pseudos	#
	.loc 1 8665 0
	movq	-144(%rbp), %rax	# insn, tmp332
	movl	48(%rax), %eax	# insn_68->fld[5].rtint, D.28511
	subl	-188(%rbp), %eax	# min_labelno, D.28511
	cltq
	leaq	0(,%rax,8), %rdx	#, D.28510
	movq	-88(%rbp), %rax	# label_live, tmp333
	addq	%rax, %rdx	# tmp333, D.28515
	movq	-152(%rbp), %rax	# live, live.1325
	movq	%rax, (%rdx)	# live.1325, *_80
	.loc 1 8666 0
	movq	-160(%rbp), %rdx	# ever_live_at_start, ever_live_at_start.1326
	movq	-152(%rbp), %rax	# live, live.1327
	orq	%rdx, %rax	# ever_live_at_start.1326, ever_live_at_start.1328
	movq	%rax, -160(%rbp)	# ever_live_at_start.1328, ever_live_at_start
.L2517:
.LBE187:
	.loc 1 8654 0
	subl	$1, -208(%rbp)	#, i
.L2516:
	.loc 1 8654 0 is_stmt 0 discriminator 1
	cmpl	$0, -208(%rbp)	#, i
	jns	.L2518	#,
	.loc 1 8671 0 is_stmt 1
	movl	$0, reload_combine_ruid(%rip)	#, reload_combine_ruid
	movl	reload_combine_ruid(%rip), %eax	# reload_combine_ruid, tmp334
	movl	%eax, -200(%rbp)	# tmp334, last_label_ruid
	.loc 1 8672 0
	movl	$0, -204(%rbp)	#, r
	jmp	.L2519	#
.L2522:
	.loc 1 8674 0
	movl	reload_combine_ruid(%rip), %ecx	# reload_combine_ruid, reload_combine_ruid.1329
	movl	-204(%rbp), %eax	# r, tmp335
	salq	$3, %rax	#, tmp337
	movq	%rax, %rdx	# tmp336, tmp338
	salq	$4, %rdx	#, tmp338
	subq	%rax, %rdx	# tmp336, tmp338
	leaq	reg_state+112(%rdx), %rax	#, tmp339
	movl	%ecx, (%rax)	# reload_combine_ruid.1329, reg_state[r_11].store_ruid
	.loc 1 8675 0
	movl	-204(%rbp), %eax	# r, tmp340
	movzbl	fixed_regs(%rax), %eax	# fixed_regs, D.28516
	testb	%al, %al	# D.28516
	je	.L2520	#,
	.loc 1 8676 0
	movl	-204(%rbp), %eax	# r, tmp341
	salq	$3, %rax	#, tmp343
	movq	%rax, %rdx	# tmp342, tmp344
	salq	$4, %rdx	#, tmp344
	subq	%rax, %rdx	# tmp342, tmp344
	leaq	reg_state+96(%rdx), %rax	#, tmp345
	movl	$-1, (%rax)	#, reg_state[r_11].use_index
	jmp	.L2521	#
.L2520:
	.loc 1 8678 0
	movl	-204(%rbp), %eax	# r, tmp346
	salq	$3, %rax	#, tmp348
	movq	%rax, %rdx	# tmp347, tmp349
	salq	$4, %rdx	#, tmp349
	subq	%rax, %rdx	# tmp347, tmp349
	leaq	reg_state+96(%rdx), %rax	#, tmp350
	movl	$6, (%rax)	#, reg_state[r_11].use_index
.L2521:
	.loc 1 8672 0
	addl	$1, -204(%rbp)	#, r
.L2519:
	.loc 1 8672 0 is_stmt 0 discriminator 1
	cmpl	$52, -204(%rbp)	#, r
	jbe	.L2522	#,
	.loc 1 8681 0 is_stmt 1
	call	get_last_insn	#
	movq	%rax, -144(%rbp)	# tmp351, insn
	jmp	.L2523	#
.L2626:
.LBB188:
	.loc 1 8688 0
	movq	-144(%rbp), %rax	# insn, tmp352
	movzwl	(%rax), %eax	# insn_1->code, D.28513
	cmpw	$36, %ax	#, D.28513
	jne	.L2524	#,
	.loc 1 8689 0
	movl	reload_combine_ruid(%rip), %eax	# reload_combine_ruid, tmp353
	movl	%eax, -200(%rbp)	# tmp353, last_label_ruid
	jmp	.L2525	#
.L2524:
	.loc 1 8690 0
	movq	-144(%rbp), %rax	# insn, tmp354
	movzwl	(%rax), %eax	# insn_1->code, D.28513
	cmpw	$35, %ax	#, D.28513
	jne	.L2525	#,
	.loc 1 8691 0
	movl	$0, -204(%rbp)	#, r
	jmp	.L2526	#
.L2528:
	.loc 1 8692 0
	movl	-204(%rbp), %eax	# r, tmp355
	movzbl	fixed_regs(%rax), %eax	# fixed_regs, D.28516
	testb	%al, %al	# D.28516
	jne	.L2527	#,
	.loc 1 8693 0
	movl	-204(%rbp), %eax	# r, tmp356
	salq	$3, %rax	#, tmp358
	movq	%rax, %rdx	# tmp357, tmp359
	salq	$4, %rdx	#, tmp359
	subq	%rax, %rdx	# tmp357, tmp359
	leaq	reg_state+96(%rdx), %rax	#, tmp360
	movl	$6, (%rax)	#, reg_state[r_12].use_index
.L2527:
	.loc 1 8691 0
	addl	$1, -204(%rbp)	#, r
.L2526:
	.loc 1 8691 0 is_stmt 0 discriminator 1
	cmpl	$52, -204(%rbp)	#, r
	jbe	.L2528	#,
.L2525:
	.loc 1 8695 0 is_stmt 1
	movq	-144(%rbp), %rax	# insn, tmp361
	movzwl	(%rax), %eax	# insn_1->code, D.28513
	movzwl	%ax, %eax	# D.28513, D.28511
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28516
	cmpb	$105, %al	#, D.28516
	je	.L2529	#,
	.loc 1 8696 0
	jmp	.L2530	#
.L2529:
	.loc 1 8698 0
	movl	reload_combine_ruid(%rip), %eax	# reload_combine_ruid, reload_combine_ruid.1330
	addl	$1, %eax	#, reload_combine_ruid.1331
	movl	%eax, reload_combine_ruid(%rip)	# reload_combine_ruid.1331, reload_combine_ruid
	.loc 1 8711 0
	movq	-144(%rbp), %rax	# insn, tmp363
	movzwl	(%rax), %eax	# insn_1->code, D.28513
	movzwl	%ax, %eax	# D.28513, D.28511
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28516
	cmpb	$105, %al	#, D.28516
	jne	.L2531	#,
	.loc 1 8711 0 is_stmt 0 discriminator 1
	movq	-144(%rbp), %rax	# insn, tmp365
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.28517
	movzwl	(%rax), %eax	# _106->code, D.28513
	cmpw	$47, %ax	#, D.28513
	jne	.L2532	#,
	.loc 1 8711 0 discriminator 3
	movq	-144(%rbp), %rax	# insn, tmp366
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, iftmp.1333
	jmp	.L2534	#
.L2532:
	.loc 1 8711 0 discriminator 4
	movq	-144(%rbp), %rax	# insn, tmp367
	movq	32(%rax), %rdx	# insn_1->fld[3].rtx, D.28517
	movq	-144(%rbp), %rax	# insn, tmp368
	movq	%rdx, %rsi	# D.28517,
	movq	%rax, %rdi	# tmp368,
	call	single_set_2	#
	jmp	.L2534	#
.L2531:
	.loc 1 8711 0 discriminator 2
	movl	$0, %eax	#, iftmp.1332
.L2534:
	.loc 1 8711 0 discriminator 5
	movq	%rax, -80(%rbp)	# iftmp.1332, set
	.loc 1 8712 0 is_stmt 1 discriminator 5
	cmpq	$0, -80(%rbp)	#, set
	je	.L2535	#,
	.loc 1 8713 0
	movq	-80(%rbp), %rax	# set, tmp369
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movzwl	(%rax), %eax	# _114->code, D.28513
	cmpw	$61, %ax	#, D.28513
	jne	.L2535	#,
	.loc 1 8714 0
	movq	-80(%rbp), %rax	# set, tmp370
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movl	8(%rax), %eax	# _116->fld[0].rtuint, D.28518
	.loc 1 8716 0
	cmpl	$7, %eax	#, D.28518
	jbe	.L2536	#,
	.loc 1 8714 0
	movq	-80(%rbp), %rax	# set, tmp371
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movl	8(%rax), %eax	# _118->fld[0].rtuint, D.28518
	cmpl	$15, %eax	#, D.28518
	jbe	.L2537	#,
.L2536:
	.loc 1 8714 0 is_stmt 0 discriminator 2
	movq	-80(%rbp), %rax	# set, tmp372
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movl	8(%rax), %eax	# _120->fld[0].rtuint, D.28518
	cmpl	$20, %eax	#, D.28518
	jbe	.L2538	#,
	.loc 1 8714 0 discriminator 1
	movq	-80(%rbp), %rax	# set, tmp373
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movl	8(%rax), %eax	# _122->fld[0].rtuint, D.28518
	cmpl	$28, %eax	#, D.28518
	jbe	.L2537	#,
.L2538:
	.loc 1 8714 0 discriminator 2
	movq	-80(%rbp), %rax	# set, tmp374
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movl	8(%rax), %eax	# _124->fld[0].rtuint, D.28518
	cmpl	$44, %eax	#, D.28518
	jbe	.L2539	#,
	.loc 1 8714 0 discriminator 1
	movq	-80(%rbp), %rax	# set, tmp375
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movl	8(%rax), %eax	# _126->fld[0].rtuint, D.28518
	cmpl	$52, %eax	#, D.28518
	jbe	.L2537	#,
.L2539:
	.loc 1 8714 0 discriminator 2
	movq	-80(%rbp), %rax	# set, tmp376
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movl	8(%rax), %eax	# _128->fld[0].rtuint, D.28518
	cmpl	$28, %eax	#, D.28518
	jbe	.L2540	#,
	.loc 1 8714 0 discriminator 1
	movq	-80(%rbp), %rax	# set, tmp377
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movl	8(%rax), %eax	# _130->fld[0].rtuint, D.28518
	cmpl	$36, %eax	#, D.28518
	ja	.L2540	#,
.L2537:
	movq	-80(%rbp), %rax	# set, tmp378
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movzbl	2(%rax), %eax	# _155->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28511
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28520
	.loc 1 8716 0 is_stmt 1 discriminator 1
	cmpl	$5, %eax	#, D.28520
	je	.L2541	#,
	.loc 1 8714 0 discriminator 1
	movq	-80(%rbp), %rax	# set, tmp380
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movzbl	2(%rax), %eax	# _159->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28511
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28520
	.loc 1 8716 0 discriminator 1
	cmpl	$6, %eax	#, D.28520
	je	.L2541	#,
	.loc 1 8716 0 is_stmt 0 discriminator 3
	movl	$1, %eax	#, iftmp.1335
	jmp	.L2542	#
.L2541:
	.loc 1 8716 0 discriminator 2
	movl	$0, %eax	#, iftmp.1335
.L2542:
	.loc 1 8716 0 discriminator 4
	andl	$1, %eax	#, iftmp.1334
	jmp	.L2543	#
.L2540:
	.loc 1 8714 0 is_stmt 1 discriminator 2
	movq	-80(%rbp), %rax	# set, tmp382
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movzbl	2(%rax), %eax	# _132->mode, D.28519
	.loc 1 8716 0 discriminator 2
	cmpb	$18, %al	#, D.28519
	je	.L2544	#,
	.loc 1 8714 0 discriminator 5
	movq	-80(%rbp), %rax	# set, tmp383
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movzbl	2(%rax), %eax	# _134->mode, D.28519
	.loc 1 8716 0 discriminator 5
	cmpb	$24, %al	#, D.28519
	je	.L2544	#,
	.loc 1 8714 0
	movq	-80(%rbp), %rax	# set, tmp384
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movzbl	2(%rax), %eax	# _136->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28511
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28519
	movzbl	%al, %edx	# D.28519, D.28511
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1338
	andl	$33554432, %eax	#, D.28511
	testl	%eax, %eax	# D.28511
	je	.L2545	#,
	.loc 1 8714 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.1337
	jmp	.L2546	#
.L2545:
	.loc 1 8714 0 discriminator 2
	movl	$4, %eax	#, iftmp.1337
.L2546:
	.loc 1 8714 0 discriminator 3
	addl	%edx, %eax	# D.28511, D.28511
	subl	$1, %eax	#, D.28511
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1340
	andl	$33554432, %edx	#, D.28511
	testl	%edx, %edx	# D.28511
	je	.L2547	#,
	.loc 1 8714 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1339
	jmp	.L2548	#
.L2547:
	.loc 1 8714 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1339
.L2548:
	.loc 1 8714 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1339
	.loc 1 8716 0 is_stmt 1 discriminator 3
	cmpl	$1, %eax	#, D.28511
	jne	.L2544	#,
	.loc 1 8716 0 is_stmt 0 discriminator 7
	movl	$1, %eax	#, iftmp.1336
	jmp	.L2549	#
.L2544:
	.loc 1 8716 0 discriminator 6
	movl	$0, %eax	#, iftmp.1336
.L2549:
	.loc 1 8716 0 discriminator 8
	andl	$1, %eax	#, iftmp.1334
.L2543:
	.loc 1 8714 0 is_stmt 1
	testb	%al, %al	# iftmp.1334
	je	.L2535	#,
	.loc 1 8717 0
	movq	-80(%rbp), %rax	# set, tmp388
	movq	16(%rax), %rax	# set_113->fld[1].rtx, D.28517
	movzwl	(%rax), %eax	# _166->code, D.28513
	cmpw	$75, %ax	#, D.28513
	jne	.L2535	#,
	.loc 1 8718 0
	movq	-80(%rbp), %rax	# set, tmp389
	movq	16(%rax), %rax	# set_113->fld[1].rtx, D.28517
	movq	16(%rax), %rax	# _168->fld[1].rtx, D.28517
	movzwl	(%rax), %eax	# _169->code, D.28513
	cmpw	$61, %ax	#, D.28513
	jne	.L2535	#,
	.loc 1 8719 0
	movq	-80(%rbp), %rax	# set, tmp390
	movq	8(%rax), %rdx	# set_113->fld[0].rtx, D.28517
	movq	-80(%rbp), %rax	# set, tmp391
	movq	16(%rax), %rax	# set_113->fld[1].rtx, D.28517
	movq	8(%rax), %rax	# _172->fld[0].rtx, D.28517
	movq	%rdx, %rsi	# D.28517,
	movq	%rax, %rdi	# D.28517,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28511
	je	.L2535	#,
	.loc 1 8720 0
	movq	-80(%rbp), %rax	# set, tmp392
	movq	8(%rax), %rax	# set_113->fld[0].rtx, D.28517
	movl	8(%rax), %eax	# _175->fld[0].rtuint, D.28518
	movl	%eax, %eax	# D.28518, tmp393
	salq	$3, %rax	#, tmp395
	movq	%rax, %rdx	# tmp394, tmp396
	salq	$4, %rdx	#, tmp396
	subq	%rax, %rdx	# tmp394, tmp396
	leaq	reg_state+112(%rdx), %rax	#, tmp397
	movl	4(%rax), %eax	# reg_state[_176].use_ruid, D.28511
	cmpl	-200(%rbp), %eax	# last_label_ruid, D.28511
	jle	.L2535	#,
.LBB189:
	.loc 1 8722 0
	movq	-80(%rbp), %rax	# set, tmp398
	movq	8(%rax), %rax	# set_113->fld[0].rtx, tmp399
	movq	%rax, -72(%rbp)	# tmp399, reg
	.loc 1 8723 0
	movq	-80(%rbp), %rax	# set, tmp400
	movq	16(%rax), %rax	# set_113->fld[1].rtx, tmp401
	movq	%rax, -64(%rbp)	# tmp401, plus
	.loc 1 8724 0
	movq	-64(%rbp), %rax	# plus, tmp402
	movq	16(%rax), %rax	# plus_179->fld[1].rtx, tmp403
	movq	%rax, -56(%rbp)	# tmp403, base
	.loc 1 8725 0
	movq	-144(%rbp), %rax	# insn, tmp404
	movq	%rax, %rdi	# tmp404,
	call	prev_nonnote_insn	#
	movq	%rax, -48(%rbp)	# tmp405, prev
	.loc 1 8726 0
	cmpq	$0, -48(%rbp)	#, prev
	je	.L2550	#,
	.loc 1 8726 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# prev, tmp406
	movzwl	(%rax), %eax	# prev_181->code, D.28513
	movzwl	%ax, %eax	# D.28513, D.28511
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28516
	cmpb	$105, %al	#, D.28516
	jne	.L2551	#,
	movq	-48(%rbp), %rax	# prev, tmp408
	movq	32(%rax), %rax	# prev_181->fld[3].rtx, D.28517
	movzwl	(%rax), %eax	# _185->code, D.28513
	cmpw	$47, %ax	#, D.28513
	jne	.L2552	#,
	.loc 1 8726 0 discriminator 3
	movq	-48(%rbp), %rax	# prev, tmp409
	movq	32(%rax), %rax	# prev_181->fld[3].rtx, iftmp.1343
	jmp	.L2555	#
.L2552:
	.loc 1 8726 0 discriminator 4
	movq	-48(%rbp), %rax	# prev, tmp410
	movq	32(%rax), %rdx	# prev_181->fld[3].rtx, D.28517
	movq	-48(%rbp), %rax	# prev, tmp411
	movq	%rdx, %rsi	# D.28517,
	movq	%rax, %rdi	# tmp411,
	call	single_set_2	#
	jmp	.L2555	#
.L2551:
	.loc 1 8726 0 discriminator 2
	movl	$0, %eax	#, iftmp.1342
	jmp	.L2555	#
.L2550:
	movl	$0, %eax	#, iftmp.1341
.L2555:
	.loc 1 8726 0 discriminator 3
	movq	%rax, -40(%rbp)	# iftmp.1341, prev_set
	.loc 1 8727 0 is_stmt 1 discriminator 3
	movq	-72(%rbp), %rax	# reg, tmp412
	movl	8(%rax), %eax	# reg_178->fld[0].rtuint, tmp413
	movl	%eax, -180(%rbp)	# tmp413, regno
	.loc 1 8728 0 discriminator 3
	movq	$0, -128(%rbp)	#, const_reg
	.loc 1 8729 0 discriminator 3
	movq	$0, -120(%rbp)	#, reg_sum
	.loc 1 8739 0 discriminator 3
	movq	reg_class_contents+80(%rip), %rdx	# reg_class_contents, D.28510
	movl	-180(%rbp), %eax	# regno, regno.1344
	movl	%eax, %ecx	# regno.1344, tmp648
	shrq	%cl, %rdx	# tmp648, D.28510
	movq	%rdx, %rax	# D.28510, D.28510
	andl	$1, %eax	#, D.28510
	testq	%rax, %rax	# D.28510
	jne	.L2556	#,
	.loc 1 8740 0
	movq	reg_class_contents+80(%rip), %rdx	# reg_class_contents, D.28510
	movq	-56(%rbp), %rax	# base, tmp414
	movl	8(%rax), %eax	# base_180->fld[0].rtuint, D.28518
	movl	%eax, %ecx	# D.28511, tmp650
	shrq	%cl, %rdx	# tmp650, D.28510
	movq	%rdx, %rax	# D.28510, D.28510
	andl	$1, %eax	#, D.28510
	testq	%rax, %rax	# D.28510
	je	.L2557	#,
.L2556:
	.loc 1 8743 0
	movq	-72(%rbp), %rax	# reg, tmp415
	movq	%rax, -128(%rbp)	# tmp415, const_reg
	.loc 1 8744 0
	movq	-64(%rbp), %rax	# plus, tmp416
	movq	%rax, -120(%rbp)	# tmp416, reg_sum
	jmp	.L2558	#
.L2557:
	.loc 1 8752 0
	movl	-216(%rbp), %eax	# first_index_reg, tmp417
	movl	%eax, -208(%rbp)	# tmp417, i
	jmp	.L2559	#
.L2575:
	.loc 1 8754 0
	movq	reg_class_contents+80(%rip), %rdx	# reg_class_contents, D.28510
	movl	-208(%rbp), %eax	# i, tmp418
	movl	%eax, %ecx	# tmp418, tmp652
	shrq	%cl, %rdx	# tmp652, D.28510
	movq	%rdx, %rax	# D.28510, D.28510
	andl	$1, %eax	#, D.28510
	testq	%rax, %rax	# D.28510
	je	.L2560	#,
	.loc 1 8756 0
	movl	-208(%rbp), %eax	# i, tmp420
	cltq
	salq	$3, %rax	#, tmp422
	movq	%rax, %rdx	# tmp421, tmp423
	salq	$4, %rdx	#, tmp423
	subq	%rax, %rdx	# tmp421, tmp423
	leaq	reg_state+96(%rdx), %rax	#, tmp424
	movl	(%rax), %eax	# reg_state[i_8].use_index, D.28511
	cmpl	$6, %eax	#, D.28511
	jne	.L2560	#,
	.loc 1 8757 0
	movl	-208(%rbp), %eax	# i, tmp426
	cltq
	salq	$3, %rax	#, tmp428
	movq	%rax, %rdx	# tmp427, tmp429
	salq	$4, %rdx	#, tmp429
	subq	%rax, %rdx	# tmp427, tmp429
	leaq	reg_state+112(%rdx), %rax	#, tmp430
	movl	(%rax), %ecx	# reg_state[i_8].store_ruid, D.28511
	movl	-180(%rbp), %eax	# regno, tmp431
	salq	$3, %rax	#, tmp433
	movq	%rax, %rdx	# tmp432, tmp434
	salq	$4, %rdx	#, tmp434
	subq	%rax, %rdx	# tmp432, tmp434
	leaq	reg_state+112(%rdx), %rax	#, tmp435
	movl	4(%rax), %eax	# reg_state[regno_195].use_ruid, D.28511
	cmpl	%eax, %ecx	# D.28511, D.28511
	jg	.L2560	#,
	.loc 1 8758 0
	cmpl	$7, -208(%rbp)	#, i
	jle	.L2561	#,
	.loc 1 8758 0 is_stmt 0 discriminator 1
	cmpl	$15, -208(%rbp)	#, i
	jle	.L2562	#,
.L2561:
	.loc 1 8758 0 discriminator 2
	cmpl	$20, -208(%rbp)	#, i
	jle	.L2563	#,
	.loc 1 8758 0 discriminator 1
	cmpl	$28, -208(%rbp)	#, i
	jle	.L2562	#,
.L2563:
	.loc 1 8758 0 discriminator 2
	cmpl	$44, -208(%rbp)	#, i
	jle	.L2564	#,
	.loc 1 8758 0 discriminator 1
	cmpl	$52, -208(%rbp)	#, i
	jle	.L2562	#,
.L2564:
	.loc 1 8758 0 discriminator 2
	cmpl	$28, -208(%rbp)	#, i
	jle	.L2565	#,
	.loc 1 8758 0 discriminator 1
	cmpl	$36, -208(%rbp)	#, i
	jg	.L2565	#,
.L2562:
	movq	-72(%rbp), %rax	# reg, tmp436
	movzbl	2(%rax), %eax	# reg_178->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28511
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28520
	cmpl	$5, %eax	#, D.28520
	je	.L2566	#,
	.loc 1 8758 0 discriminator 3
	movq	-72(%rbp), %rax	# reg, tmp438
	movzbl	2(%rax), %eax	# reg_178->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28511
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28520
	cmpl	$6, %eax	#, D.28520
	je	.L2566	#,
	.loc 1 8758 0 discriminator 5
	movl	$1, %eax	#, iftmp.1346
	jmp	.L2567	#
.L2566:
	.loc 1 8758 0 discriminator 4
	movl	$0, %eax	#, iftmp.1346
.L2567:
	.loc 1 8758 0 discriminator 6
	andl	$1, %eax	#, iftmp.1345
	jmp	.L2568	#
.L2565:
	.loc 1 8758 0 discriminator 2
	movq	-72(%rbp), %rax	# reg, tmp440
	movzbl	2(%rax), %eax	# reg_178->mode, D.28519
	cmpb	$18, %al	#, D.28519
	je	.L2569	#,
	.loc 1 8758 0 discriminator 8
	movq	-72(%rbp), %rax	# reg, tmp441
	movzbl	2(%rax), %eax	# reg_178->mode, D.28519
	cmpb	$24, %al	#, D.28519
	je	.L2569	#,
	.loc 1 8758 0 discriminator 10
	movq	-72(%rbp), %rax	# reg, tmp442
	movzbl	2(%rax), %eax	# reg_178->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28511
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28519
	movzbl	%al, %edx	# D.28519, D.28511
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1349
	andl	$33554432, %eax	#, D.28511
	testl	%eax, %eax	# D.28511
	je	.L2570	#,
	.loc 1 8758 0 discriminator 1
	movl	$8, %eax	#, iftmp.1348
	jmp	.L2571	#
.L2570:
	.loc 1 8758 0 discriminator 2
	movl	$4, %eax	#, iftmp.1348
.L2571:
	.loc 1 8758 0 discriminator 3
	addl	%edx, %eax	# D.28511, D.28511
	subl	$1, %eax	#, D.28511
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1351
	andl	$33554432, %edx	#, D.28511
	testl	%edx, %edx	# D.28511
	je	.L2572	#,
	.loc 1 8758 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1350
	jmp	.L2573	#
.L2572:
	.loc 1 8758 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1350
.L2573:
	.loc 1 8758 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1350
	cmpl	$1, %eax	#, D.28511
	jne	.L2569	#,
	.loc 1 8758 0 discriminator 11
	movl	$1, %eax	#, iftmp.1347
	jmp	.L2574	#
.L2569:
	.loc 1 8758 0 discriminator 9
	movl	$0, %eax	#, iftmp.1347
.L2574:
	.loc 1 8758 0 discriminator 12
	andl	$1, %eax	#, iftmp.1345
.L2568:
	.loc 1 8758 0 discriminator 7
	testb	%al, %al	# iftmp.1345
	je	.L2560	#,
.LBB190:
	.loc 1 8760 0 is_stmt 1
	movq	-72(%rbp), %rax	# reg, tmp446
	movzbl	2(%rax), %eax	# reg_178->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28521
	movl	-208(%rbp), %edx	# i, tmp447
	movl	%edx, %esi	# tmp447,
	movl	%eax, %edi	# D.28521,
	call	gen_rtx_REG	#
	movq	%rax, -32(%rbp)	# tmp448, index_reg
	.loc 1 8762 0
	movq	-32(%rbp), %rax	# index_reg, tmp449
	movq	%rax, -128(%rbp)	# tmp449, const_reg
	.loc 1 8763 0
	movq	-72(%rbp), %rax	# reg, tmp450
	movzbl	2(%rax), %eax	# reg_178->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28521
	movq	-56(%rbp), %rcx	# base, tmp451
	movq	-32(%rbp), %rdx	# index_reg, tmp452
	movl	%eax, %esi	# D.28521,
	movl	$75, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	%rax, -120(%rbp)	# tmp453, reg_sum
	.loc 1 8764 0
	jmp	.L2558	#
.L2560:
.LBE190:
	.loc 1 8752 0
	addl	$1, -208(%rbp)	#, i
.L2559:
	.loc 1 8752 0 is_stmt 0 discriminator 1
	movl	-208(%rbp), %eax	# i, tmp454
	cmpl	-212(%rbp), %eax	# last_index_reg, tmp454
	jle	.L2575	#,
.L2558:
	.loc 1 8772 0 is_stmt 1
	cmpq	$0, -40(%rbp)	#, prev_set
	je	.L2535	#,
	.loc 1 8773 0
	movq	-40(%rbp), %rax	# prev_set, tmp455
	movq	16(%rax), %rax	# prev_set_194->fld[1].rtx, D.28517
	movzwl	(%rax), %eax	# _253->code, D.28513
	cmpw	$54, %ax	#, D.28513
	jne	.L2535	#,
	.loc 1 8774 0
	movq	-40(%rbp), %rax	# prev_set, tmp456
	movq	8(%rax), %rax	# prev_set_194->fld[0].rtx, D.28517
	movq	-72(%rbp), %rdx	# reg, tmp457
	movq	%rdx, %rsi	# tmp457,
	movq	%rax, %rdi	# D.28517,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28511
	je	.L2535	#,
	.loc 1 8775 0
	movl	-180(%rbp), %eax	# regno, tmp458
	salq	$3, %rax	#, tmp460
	movq	%rax, %rdx	# tmp459, tmp461
	salq	$4, %rdx	#, tmp461
	subq	%rax, %rdx	# tmp459, tmp461
	leaq	reg_state+96(%rdx), %rax	#, tmp462
	movl	(%rax), %eax	# reg_state[regno_195].use_index, D.28511
	testl	%eax, %eax	# D.28511
	js	.L2535	#,
	.loc 1 8776 0
	movq	-56(%rbp), %rax	# base, tmp463
	movl	8(%rax), %eax	# base_180->fld[0].rtuint, D.28518
	movl	%eax, %eax	# D.28518, tmp464
	salq	$3, %rax	#, tmp466
	movq	%rax, %rdx	# tmp465, tmp467
	salq	$4, %rdx	#, tmp467
	subq	%rax, %rdx	# tmp465, tmp467
	leaq	reg_state+112(%rdx), %rax	#, tmp468
	movl	(%rax), %ecx	# reg_state[_258].store_ruid, D.28511
	.loc 1 8777 0
	movl	-180(%rbp), %eax	# regno, tmp469
	salq	$3, %rax	#, tmp471
	movq	%rax, %rdx	# tmp470, tmp472
	salq	$4, %rdx	#, tmp472
	subq	%rax, %rdx	# tmp470, tmp472
	leaq	reg_state+112(%rdx), %rax	#, tmp473
	movl	4(%rax), %eax	# reg_state[regno_195].use_ruid, D.28511
	.loc 1 8776 0
	cmpl	%eax, %ecx	# D.28511, D.28511
	jg	.L2535	#,
	.loc 1 8778 0
	cmpq	$0, -120(%rbp)	#, reg_sum
	je	.L2535	#,
.LBB191:
	.loc 1 8784 0
	movq	-40(%rbp), %rax	# prev_set, tmp474
	leaq	8(%rax), %rsi	#, D.28522
	movq	-128(%rbp), %rdx	# const_reg, tmp475
	movq	-48(%rbp), %rax	# prev, tmp476
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp476,
	call	validate_change	#
	.loc 1 8785 0
	movl	-180(%rbp), %eax	# regno, tmp477
	salq	$3, %rax	#, tmp479
	movq	%rax, %rdx	# tmp478, tmp480
	salq	$4, %rdx	#, tmp480
	subq	%rax, %rdx	# tmp478, tmp480
	leaq	reg_state+96(%rdx), %rax	#, tmp481
	movq	8(%rax), %rdx	# reg_state[regno_195].offset, D.28517
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.28517
	cmpq	%rax, %rdx	# D.28517, D.28517
	je	.L2576	#,
	.loc 1 8788 0
	movq	-40(%rbp), %rax	# prev_set, tmp482
	movq	16(%rax), %rax	# prev_set_194->fld[1].rtx, D.28517
	movq	8(%rax), %rcx	# _264->fld[0].rtwint, D.28523
	movl	-180(%rbp), %eax	# regno, tmp483
	salq	$3, %rax	#, tmp485
	movq	%rax, %rdx	# tmp484, tmp486
	salq	$4, %rdx	#, tmp486
	subq	%rax, %rdx	# tmp484, tmp486
	leaq	reg_state+96(%rdx), %rax	#, tmp487
	movq	8(%rax), %rax	# reg_state[regno_195].offset, D.28517
	movq	8(%rax), %rax	# _266->fld[0].rtwint, D.28523
	.loc 1 8786 0
	addq	%rcx, %rax	# D.28523, D.28523
	movq	%rax, %rsi	# D.28523,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, %rdx	#, D.28517
	movq	-40(%rbp), %rax	# prev_set, tmp488
	leaq	16(%rax), %rsi	#, D.28522
	movq	-48(%rbp), %rax	# prev, tmp489
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp489,
	call	validate_change	#
.L2576:
	.loc 1 8794 0
	movl	-180(%rbp), %eax	# regno, tmp490
	salq	$3, %rax	#, tmp492
	movq	%rax, %rdx	# tmp491, tmp493
	salq	$4, %rdx	#, tmp493
	subq	%rax, %rdx	# tmp491, tmp493
	leaq	reg_state+96(%rdx), %rax	#, tmp494
	movl	(%rax), %eax	# reg_state[regno_195].use_index, tmp495
	movl	%eax, -196(%rbp)	# tmp495, i
	jmp	.L2577	#
.L2578:
	.loc 1 8796 0
	movq	-120(%rbp), %rax	# reg_sum, tmp496
	movq	%rax, %rdi	# tmp496,
	call	copy_rtx	#
	movq	%rax, %rdi	#, D.28517
	movl	-196(%rbp), %eax	# i, tmp498
	movslq	%eax, %rdx	# tmp498, tmp497
	movl	-180(%rbp), %eax	# regno, tmp499
	movq	%rdx, %rcx	# tmp497, tmp500
	salq	$4, %rcx	#, tmp500
	salq	$3, %rax	#, tmp502
	movq	%rax, %rdx	# tmp501, tmp503
	salq	$4, %rdx	#, tmp503
	subq	%rax, %rdx	# tmp501, tmp503
	leaq	(%rcx,%rdx), %rax	#, tmp504
	addq	$reg_state, %rax	#, tmp505
	movq	8(%rax), %rsi	# reg_state[regno_195].reg_use[i_19].usep, D.28522
	movl	-196(%rbp), %eax	# i, tmp507
	movslq	%eax, %rdx	# tmp507, tmp506
	movl	-180(%rbp), %eax	# regno, tmp508
	movq	%rdx, %rcx	# tmp506, tmp509
	salq	$4, %rcx	#, tmp509
	salq	$3, %rax	#, tmp511
	movq	%rax, %rdx	# tmp510, tmp512
	salq	$4, %rdx	#, tmp512
	subq	%rax, %rdx	# tmp510, tmp512
	leaq	(%rcx,%rdx), %rax	#, tmp513
	addq	$reg_state, %rax	#, tmp514
	movq	(%rax), %rax	# reg_state[regno_195].reg_use[i_19].insn, D.28517
	movl	$1, %ecx	#,
	movq	%rdi, %rdx	# D.28517,
	movq	%rax, %rdi	# D.28517,
	call	validate_change	#
	.loc 1 8795 0
	addl	$1, -196(%rbp)	#, i
.L2577:
	.loc 1 8794 0 discriminator 1
	cmpl	$5, -196(%rbp)	#, i
	jle	.L2578	#,
	.loc 1 8802 0
	call	apply_change_group	#
	testl	%eax, %eax	# D.28511
	je	.L2535	#,
.LBB192:
	.loc 1 8807 0
	movq	-144(%rbp), %rax	# insn, tmp515
	movq	%rax, %rdi	# tmp515,
	call	delete_insn	#
	.loc 1 8809 0
	movl	-180(%rbp), %eax	# regno, tmp516
	salq	$3, %rax	#, tmp518
	movq	%rax, %rdx	# tmp517, tmp519
	salq	$4, %rdx	#, tmp519
	subq	%rax, %rdx	# tmp517, tmp519
	leaq	reg_state+96(%rdx), %rax	#, tmp520
	movq	8(%rax), %rdx	# reg_state[regno_195].offset, D.28517
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.28517
	cmpq	%rax, %rdx	# D.28517, D.28517
	je	.L2579	#,
	.loc 1 8812 0
	movq	-48(%rbp), %rax	# prev, tmp524
	addq	$56, %rax	#, tmp523
	movq	%rax, -112(%rbp)	# tmp523, np
	jmp	.L2580	#
.L2583:
	.loc 1 8814 0
	movq	-112(%rbp), %rax	# np, tmp525
	movq	(%rax), %rax	# *np_20, D.28517
	movzbl	2(%rax), %eax	# _281->mode, D.28519
	cmpb	$4, %al	#, D.28519
	je	.L2581	#,
	.loc 1 8815 0
	movq	-112(%rbp), %rax	# np, tmp526
	movq	(%rax), %rax	# *np_20, D.28517
	movzbl	2(%rax), %eax	# _283->mode, D.28519
	cmpb	$3, %al	#, D.28519
	jne	.L2582	#,
.L2581:
	.loc 1 8816 0
	movq	-112(%rbp), %rax	# np, tmp527
	movq	(%rax), %rax	# *np_20, D.28517
	movq	16(%rax), %rdx	# _287->fld[1].rtx, D.28517
	movq	-112(%rbp), %rax	# np, tmp528
	movq	%rdx, (%rax)	# D.28517, *np_20
	jmp	.L2580	#
.L2582:
	.loc 1 8818 0
	movq	-112(%rbp), %rax	# np, tmp529
	movq	(%rax), %rax	# *np_20, D.28517
	addq	$16, %rax	#, tmp530
	movq	%rax, -112(%rbp)	# tmp530, np
.L2580:
	.loc 1 8812 0 discriminator 1
	movq	-112(%rbp), %rax	# np, tmp531
	movq	(%rax), %rax	# *np_20, D.28517
	testq	%rax, %rax	# D.28517
	jne	.L2583	#,
.L2579:
	.loc 1 8821 0
	movl	-180(%rbp), %eax	# regno, tmp532
	salq	$3, %rax	#, tmp534
	movq	%rax, %rdx	# tmp533, tmp535
	salq	$4, %rdx	#, tmp535
	subq	%rax, %rdx	# tmp533, tmp535
	leaq	reg_state+96(%rdx), %rax	#, tmp536
	movl	$6, (%rax)	#, reg_state[regno_195].use_index
	.loc 1 8822 0
	movq	-128(%rbp), %rax	# const_reg, tmp537
	movl	8(%rax), %eax	# const_reg_17->fld[0].rtuint, D.28518
	.loc 1 8823 0
	movl	reload_combine_ruid(%rip), %ecx	# reload_combine_ruid, reload_combine_ruid.1352
	movl	%eax, %eax	# D.28518, tmp538
	salq	$3, %rax	#, tmp540
	movq	%rax, %rdx	# tmp539, tmp541
	salq	$4, %rdx	#, tmp541
	subq	%rax, %rdx	# tmp539, tmp541
	leaq	reg_state+112(%rdx), %rax	#, tmp542
	movl	%ecx, (%rax)	# reload_combine_ruid.1352, reg_state[_289].store_ruid
	.loc 1 8824 0
	jmp	.L2530	#
.L2535:
.LBE192:
.LBE191:
.LBE189:
	.loc 1 8829 0
	movq	-144(%rbp), %rax	# insn, tmp543
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.28517
	movl	$0, %edx	#,
	movl	$reload_combine_note_store, %esi	#,
	movq	%rax, %rdi	# D.28517,
	call	note_stores	#
	.loc 1 8831 0
	movq	-144(%rbp), %rax	# insn, tmp544
	movzwl	(%rax), %eax	# insn_1->code, D.28513
	cmpw	$34, %ax	#, D.28513
	jne	.L2584	#,
.LBB193:
	.loc 1 8835 0
	movl	$0, -204(%rbp)	#, r
	jmp	.L2585	#
.L2587:
	.loc 1 8836 0
	movl	-204(%rbp), %eax	# r, tmp545
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.28516
	testb	%al, %al	# D.28516
	je	.L2586	#,
	.loc 1 8838 0
	movl	-204(%rbp), %eax	# r, tmp546
	salq	$3, %rax	#, tmp548
	movq	%rax, %rdx	# tmp547, tmp549
	salq	$4, %rdx	#, tmp549
	subq	%rax, %rdx	# tmp547, tmp549
	leaq	reg_state+96(%rdx), %rax	#, tmp550
	movl	$6, (%rax)	#, reg_state[r_13].use_index
	.loc 1 8839 0
	movl	reload_combine_ruid(%rip), %ecx	# reload_combine_ruid, reload_combine_ruid.1353
	movl	-204(%rbp), %eax	# r, tmp551
	salq	$3, %rax	#, tmp553
	movq	%rax, %rdx	# tmp552, tmp554
	salq	$4, %rdx	#, tmp554
	subq	%rax, %rdx	# tmp552, tmp554
	leaq	reg_state+112(%rdx), %rax	#, tmp555
	movl	%ecx, (%rax)	# reload_combine_ruid.1353, reg_state[r_13].store_ruid
.L2586:
	.loc 1 8835 0
	addl	$1, -204(%rbp)	#, r
.L2585:
	.loc 1 8835 0 is_stmt 0 discriminator 1
	cmpl	$52, -204(%rbp)	#, r
	jbe	.L2587	#,
	.loc 1 8842 0 is_stmt 1
	movq	-144(%rbp), %rax	# insn, tmp556
	movq	64(%rax), %rax	# insn_1->fld[7].rtx, tmp557
	movq	%rax, -104(%rbp)	# tmp557, link
	jmp	.L2588	#
.L2615:
.LBB194:
	.loc 1 8845 0
	movq	-104(%rbp), %rax	# link, tmp558
	movq	8(%rax), %rax	# link_21->fld[0].rtx, D.28517
	movq	8(%rax), %rax	# _298->fld[0].rtx, tmp559
	movq	%rax, -24(%rbp)	# tmp559, usage_rtx
	.loc 1 8846 0
	movq	-24(%rbp), %rax	# usage_rtx, tmp560
	movzwl	(%rax), %eax	# usage_rtx_299->code, D.28513
	cmpw	$61, %ax	#, D.28513
	jne	.L2589	#,
.LBB195:
	.loc 1 8849 0
	movq	-24(%rbp), %rax	# usage_rtx, tmp561
	movl	8(%rax), %eax	# usage_rtx_299->fld[0].rtuint, tmp562
	movl	%eax, -176(%rbp)	# tmp562, start_reg
	.loc 1 8850 0
	cmpl	$7, -176(%rbp)	#, start_reg
	jbe	.L2590	#,
	.loc 1 8851 0
	cmpl	$15, -176(%rbp)	#, start_reg
	jbe	.L2591	#,
.L2590:
	.loc 1 8851 0 is_stmt 0 discriminator 2
	cmpl	$20, -176(%rbp)	#, start_reg
	jbe	.L2592	#,
	.loc 1 8851 0 discriminator 1
	cmpl	$28, -176(%rbp)	#, start_reg
	jbe	.L2591	#,
.L2592:
	.loc 1 8851 0 discriminator 2
	cmpl	$44, -176(%rbp)	#, start_reg
	jbe	.L2593	#,
	.loc 1 8851 0 discriminator 1
	cmpl	$52, -176(%rbp)	#, start_reg
	jbe	.L2591	#,
.L2593:
	.loc 1 8851 0 discriminator 2
	cmpl	$28, -176(%rbp)	#, start_reg
	jbe	.L2594	#,
	.loc 1 8851 0 discriminator 1
	cmpl	$36, -176(%rbp)	#, start_reg
	ja	.L2594	#,
.L2591:
	movq	-24(%rbp), %rax	# usage_rtx, tmp563
	movzbl	2(%rax), %eax	# usage_rtx_299->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28511
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28520
	.loc 1 8850 0 is_stmt 1 discriminator 1
	cmpl	$5, %eax	#, D.28520
	je	.L2595	#,
	.loc 1 8851 0
	movq	-24(%rbp), %rax	# usage_rtx, tmp565
	movzbl	2(%rax), %eax	# usage_rtx_299->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28511
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28520
	cmpl	$6, %eax	#, D.28520
	jne	.L2596	#,
.L2595:
	.loc 1 8850 0 discriminator 1
	movl	$2, %eax	#, iftmp.1355
	jmp	.L2598	#
.L2596:
	.loc 1 8850 0 is_stmt 0
	movl	$1, %eax	#, iftmp.1355
	jmp	.L2598	#
.L2594:
	.loc 1 8851 0 is_stmt 1 discriminator 2
	movq	-24(%rbp), %rax	# usage_rtx, tmp567
	movzbl	2(%rax), %eax	# usage_rtx_299->mode, D.28519
	.loc 1 8850 0 discriminator 2
	cmpb	$18, %al	#, D.28519
	jne	.L2599	#,
	.loc 1 8851 0 discriminator 4
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1358
	andl	$33554432, %eax	#, D.28511
	.loc 1 8850 0 discriminator 4
	testl	%eax, %eax	# D.28511
	je	.L2600	#,
	.loc 1 8850 0 is_stmt 0 discriminator 6
	movl	$2, %eax	#, iftmp.1357
	jmp	.L2598	#
.L2600:
	.loc 1 8850 0 discriminator 7
	movl	$3, %eax	#, iftmp.1357
	jmp	.L2598	#
.L2599:
	.loc 1 8851 0 is_stmt 1 discriminator 5
	movq	-24(%rbp), %rax	# usage_rtx, tmp568
	movzbl	2(%rax), %eax	# usage_rtx_299->mode, D.28519
	.loc 1 8850 0 discriminator 5
	cmpb	$24, %al	#, D.28519
	jne	.L2603	#,
	.loc 1 8851 0 discriminator 8
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1361
	andl	$33554432, %eax	#, D.28511
	.loc 1 8850 0 discriminator 8
	testl	%eax, %eax	# D.28511
	je	.L2604	#,
	.loc 1 8850 0 is_stmt 0 discriminator 9
	movl	$4, %eax	#, iftmp.1360
	jmp	.L2598	#
.L2604:
	.loc 1 8850 0 discriminator 10
	movl	$6, %eax	#, iftmp.1360
	jmp	.L2598	#
.L2603:
	.loc 1 8851 0 is_stmt 1
	movq	-24(%rbp), %rax	# usage_rtx, tmp569
	movzbl	2(%rax), %eax	# usage_rtx_299->mode, D.28519
	movzbl	%al, %eax	# D.28519, D.28511
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28519
	movzbl	%al, %edx	# D.28519, D.28511
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1363
	andl	$33554432, %eax	#, D.28511
	testl	%eax, %eax	# D.28511
	je	.L2607	#,
	.loc 1 8851 0 is_stmt 0 discriminator 1
	movl	$8, %eax	#, iftmp.1362
	jmp	.L2608	#
.L2607:
	.loc 1 8851 0 discriminator 2
	movl	$4, %eax	#, iftmp.1362
.L2608:
	.loc 1 8851 0 discriminator 3
	addl	%edx, %eax	# D.28511, D.28511
	subl	$1, %eax	#, D.28511
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1365
	andl	$33554432, %edx	#, D.28511
	testl	%edx, %edx	# D.28511
	je	.L2609	#,
	.loc 1 8851 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1364
	jmp	.L2610	#
.L2609:
	.loc 1 8851 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1364
.L2610:
	.loc 1 8851 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1364
.L2598:
	.loc 1 8850 0 is_stmt 1 discriminator 3
	movl	%eax, -172(%rbp)	# iftmp.1354, num_regs
	.loc 1 8852 0 discriminator 3
	movl	-172(%rbp), %eax	# num_regs, tmp573
	movl	-176(%rbp), %edx	# start_reg, tmp574
	addl	%edx, %eax	# tmp574, D.28518
	subl	$1, %eax	#, tmp575
	movl	%eax, -168(%rbp)	# tmp575, end_reg
	.loc 1 8853 0 discriminator 3
	movl	-176(%rbp), %eax	# start_reg, tmp576
	movl	%eax, -192(%rbp)	# tmp576, i
	jmp	.L2611	#
.L2614:
	.loc 1 8854 0
	movq	-104(%rbp), %rax	# link, tmp577
	movq	8(%rax), %rax	# link_21->fld[0].rtx, D.28517
	movzwl	(%rax), %eax	# _345->code, D.28513
	cmpw	$49, %ax	#, D.28513
	jne	.L2612	#,
	.loc 1 8856 0
	movl	-192(%rbp), %eax	# i, tmp578
	salq	$3, %rax	#, tmp580
	movq	%rax, %rdx	# tmp579, tmp581
	salq	$4, %rdx	#, tmp581
	subq	%rax, %rdx	# tmp579, tmp581
	leaq	reg_state+96(%rdx), %rax	#, tmp582
	movl	$6, (%rax)	#, reg_state[i_22].use_index
	.loc 1 8857 0
	movl	reload_combine_ruid(%rip), %ecx	# reload_combine_ruid, reload_combine_ruid.1366
	movl	-192(%rbp), %eax	# i, tmp583
	salq	$3, %rax	#, tmp585
	movq	%rax, %rdx	# tmp584, tmp586
	salq	$4, %rdx	#, tmp586
	subq	%rax, %rdx	# tmp584, tmp586
	leaq	reg_state+112(%rdx), %rax	#, tmp587
	movl	%ecx, (%rax)	# reload_combine_ruid.1366, reg_state[i_22].store_ruid
	jmp	.L2613	#
.L2612:
	.loc 1 8860 0
	movl	-192(%rbp), %eax	# i, tmp588
	salq	$3, %rax	#, tmp590
	movq	%rax, %rdx	# tmp589, tmp591
	salq	$4, %rdx	#, tmp591
	subq	%rax, %rdx	# tmp589, tmp591
	leaq	reg_state+96(%rdx), %rax	#, tmp592
	movl	$-1, (%rax)	#, reg_state[i_22].use_index
.L2613:
	.loc 1 8853 0
	addl	$1, -192(%rbp)	#, i
.L2611:
	.loc 1 8853 0 is_stmt 0 discriminator 1
	movl	-192(%rbp), %eax	# i, tmp593
	cmpl	-168(%rbp), %eax	# end_reg, tmp593
	jbe	.L2614	#,
.L2589:
.LBE195:
.LBE194:
	.loc 1 8843 0 is_stmt 1
	movq	-104(%rbp), %rax	# link, tmp594
	movq	16(%rax), %rax	# link_21->fld[1].rtx, tmp595
	movq	%rax, -104(%rbp)	# tmp595, link
.L2588:
	.loc 1 8842 0 discriminator 1
	cmpq	$0, -104(%rbp)	#, link
	jne	.L2615	#,
.LBE193:
	jmp	.L2616	#
.L2584:
	.loc 1 8865 0
	movq	-144(%rbp), %rax	# insn, tmp596
	movzwl	(%rax), %eax	# insn_1->code, D.28513
	cmpw	$33, %ax	#, D.28513
	jne	.L2616	#,
	.loc 1 8866 0
	movq	-144(%rbp), %rax	# insn, tmp597
	movq	32(%rax), %rax	# insn_1->fld[3].rtx, D.28517
	movzwl	(%rax), %eax	# _351->code, D.28513
	cmpw	$51, %ax	#, D.28513
	je	.L2616	#,
.LBB196:
	.loc 1 8872 0
	movq	-144(%rbp), %rax	# insn, tmp598
	movq	%rax, %rdi	# tmp598,
	call	condjump_p	#
	testl	%eax, %eax	# D.28511
	jne	.L2617	#,
	.loc 1 8872 0 is_stmt 0 discriminator 1
	movq	-144(%rbp), %rax	# insn, tmp599
	movq	%rax, %rdi	# tmp599,
	call	condjump_in_parallel_p	#
	testl	%eax, %eax	# D.28511
	je	.L2618	#,
.L2617:
	.loc 1 8873 0 is_stmt 1
	movq	-144(%rbp), %rax	# insn, tmp600
	movq	64(%rax), %rax	# insn_1->fld[7].rtx, D.28517
	testq	%rax, %rax	# D.28517
	je	.L2618	#,
	.loc 1 8874 0
	movq	-144(%rbp), %rax	# insn, tmp601
	movq	64(%rax), %rax	# insn_1->fld[7].rtx, D.28517
	movl	48(%rax), %eax	# _356->fld[5].rtint, D.28511
	subl	-188(%rbp), %eax	# min_labelno, D.28511
	cltq
	leaq	0(,%rax,8), %rdx	#, D.28510
	movq	-88(%rbp), %rax	# label_live, tmp605
	addq	%rdx, %rax	# D.28510, tmp604
	movq	%rax, -96(%rbp)	# tmp604, live
	jmp	.L2619	#
.L2618:
	.loc 1 8876 0
	leaq	-160(%rbp), %rax	#, tmp606
	movq	%rax, -96(%rbp)	# tmp606, live
.L2619:
	.loc 1 8878 0
	movl	$52, -208(%rbp)	#, i
	jmp	.L2620	#
.L2622:
	.loc 1 8879 0
	movq	-96(%rbp), %rax	# live, tmp607
	movq	(%rax), %rdx	# *live_23, D.28510
	movl	-208(%rbp), %eax	# i, tmp608
	movl	%eax, %ecx	# tmp608, tmp677
	shrq	%cl, %rdx	# tmp677, D.28510
	movq	%rdx, %rax	# D.28510, D.28510
	andl	$1, %eax	#, D.28510
	testq	%rax, %rax	# D.28510
	je	.L2621	#,
	.loc 1 8880 0
	movl	-208(%rbp), %eax	# i, tmp610
	cltq
	salq	$3, %rax	#, tmp612
	movq	%rax, %rdx	# tmp611, tmp613
	salq	$4, %rdx	#, tmp613
	subq	%rax, %rdx	# tmp611, tmp613
	leaq	reg_state+96(%rdx), %rax	#, tmp614
	movl	$-1, (%rax)	#, reg_state[i_9].use_index
.L2621:
	.loc 1 8878 0
	subl	$1, -208(%rbp)	#, i
.L2620:
	.loc 1 8878 0 is_stmt 0 discriminator 1
	cmpl	$0, -208(%rbp)	#, i
	jns	.L2622	#,
.L2616:
.LBE196:
	.loc 1 8883 0 is_stmt 1
	movq	-144(%rbp), %rax	# insn, tmp615
	leaq	32(%rax), %rdx	#, D.28522
	movq	-144(%rbp), %rax	# insn, tmp616
	movq	%rax, %rsi	# tmp616,
	movq	%rdx, %rdi	# D.28522,
	call	reload_combine_note_use	#
	.loc 1 8884 0
	movq	-144(%rbp), %rax	# insn, tmp617
	movq	56(%rax), %rax	# insn_1->fld[6].rtx, tmp618
	movq	%rax, -136(%rbp)	# tmp618, note
	jmp	.L2623	#
.L2625:
	.loc 1 8886 0
	movq	-136(%rbp), %rax	# note, tmp619
	movzbl	2(%rax), %eax	# note_16->mode, D.28519
	cmpb	$2, %al	#, D.28519
	jne	.L2624	#,
	.loc 1 8887 0
	movq	-136(%rbp), %rax	# note, tmp620
	movq	8(%rax), %rax	# note_16->fld[0].rtx, D.28517
	movzwl	(%rax), %eax	# _371->code, D.28513
	cmpw	$61, %ax	#, D.28513
	jne	.L2624	#,
.LBB197:
	.loc 1 8889 0
	movq	-136(%rbp), %rax	# note, tmp621
	movq	8(%rax), %rax	# note_16->fld[0].rtx, D.28517
	movl	8(%rax), %eax	# _373->fld[0].rtuint, D.28518
	movl	%eax, -164(%rbp)	# D.28518, regno
	.loc 1 8891 0
	movl	reload_combine_ruid(%rip), %ecx	# reload_combine_ruid, reload_combine_ruid.1367
	movl	-164(%rbp), %eax	# regno, tmp623
	cltq
	salq	$3, %rax	#, tmp625
	movq	%rax, %rdx	# tmp624, tmp626
	salq	$4, %rdx	#, tmp626
	subq	%rax, %rdx	# tmp624, tmp626
	leaq	reg_state+112(%rdx), %rax	#, tmp627
	movl	%ecx, (%rax)	# reload_combine_ruid.1367, reg_state[regno_375].store_ruid
	.loc 1 8892 0
	movl	-164(%rbp), %eax	# regno, tmp629
	cltq
	salq	$3, %rax	#, tmp631
	movq	%rax, %rdx	# tmp630, tmp632
	salq	$4, %rdx	#, tmp632
	subq	%rax, %rdx	# tmp630, tmp632
	leaq	reg_state+96(%rdx), %rax	#, tmp633
	movl	$-1, (%rax)	#, reg_state[regno_375].use_index
.L2624:
.LBE197:
	.loc 1 8884 0
	movq	-136(%rbp), %rax	# note, tmp634
	movq	16(%rax), %rax	# note_16->fld[1].rtx, tmp635
	movq	%rax, -136(%rbp)	# tmp635, note
.L2623:
	.loc 1 8884 0 is_stmt 0 discriminator 1
	cmpq	$0, -136(%rbp)	#, note
	jne	.L2625	#,
.L2530:
.LBE188:
	.loc 1 8681 0 is_stmt 1
	movq	-144(%rbp), %rax	# insn, tmp636
	movq	16(%rax), %rax	# insn_1->fld[1].rtx, tmp637
	movq	%rax, -144(%rbp)	# tmp637, insn
.L2523:
	.loc 1 8681 0 is_stmt 0 discriminator 1
	cmpq	$0, -144(%rbp)	#, insn
	jne	.L2626	#,
	.loc 1 8897 0 is_stmt 1
	movq	-88(%rbp), %rax	# label_live, tmp638
	movq	%rax, %rdi	# tmp638,
	call	free	#
.L2508:
	.loc 1 8898 0
	addq	$216, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE74:
	.size	reload_combine, .-reload_combine
	.type	reload_combine_note_store, @function
reload_combine_note_store:
.LFB75:
	.loc 1 8908 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# dst, dst
	movq	%rsi, -48(%rbp)	# set, set
	movq	%rdx, -56(%rbp)	# data, data
	.loc 1 8909 0
	movl	$0, -28(%rbp)	#, regno
	.loc 1 8911 0
	movq	-40(%rbp), %rax	# dst, tmp135
	movzbl	2(%rax), %eax	# dst_22(D)->mode, D.28524
	movzbl	%al, %eax	# D.28524, tmp136
	movl	%eax, -20(%rbp)	# tmp136, mode
	.loc 1 8913 0
	movq	-40(%rbp), %rax	# dst, tmp137
	movzwl	(%rax), %eax	# dst_22(D)->code, D.28525
	cmpw	$63, %ax	#, D.28525
	jne	.L2629	#,
	.loc 1 8918 0
	movq	-40(%rbp), %rax	# dst, tmp138
	movzbl	2(%rax), %eax	# dst_22(D)->mode, D.28524
	.loc 1 8915 0
	movzbl	%al, %ecx	# D.28524, D.28526
	movq	-40(%rbp), %rax	# dst, tmp139
	movl	16(%rax), %edx	# dst_22(D)->fld[1].rtuint, D.28527
	.loc 1 8916 0
	movq	-40(%rbp), %rax	# dst, tmp140
	movq	8(%rax), %rax	# dst_22(D)->fld[0].rtx, D.28528
	movzbl	2(%rax), %eax	# _29->mode, D.28524
	.loc 1 8915 0
	movzbl	%al, %esi	# D.28524, D.28526
	movq	-40(%rbp), %rax	# dst, tmp141
	movq	8(%rax), %rax	# dst_22(D)->fld[0].rtx, D.28528
	movl	8(%rax), %eax	# _32->fld[0].rtuint, D.28527
	movl	%eax, %edi	# D.28527,
	call	subreg_regno_offset	#
	movl	%eax, -28(%rbp)	# D.28527, regno
	.loc 1 8919 0
	movq	-40(%rbp), %rax	# dst, tmp142
	movq	8(%rax), %rax	# dst_22(D)->fld[0].rtx, tmp143
	movq	%rax, -40(%rbp)	# tmp143, dst
.L2629:
	.loc 1 8921 0
	movq	-40(%rbp), %rax	# dst, tmp144
	movzwl	(%rax), %eax	# dst_1->code, D.28525
	cmpw	$61, %ax	#, D.28525
	je	.L2630	#,
	.loc 1 8922 0
	jmp	.L2628	#
.L2630:
	.loc 1 8923 0
	movq	-40(%rbp), %rax	# dst, tmp145
	movl	8(%rax), %edx	# dst_1->fld[0].rtuint, D.28527
	movl	-28(%rbp), %eax	# regno, regno.1368
	addl	%edx, %eax	# D.28527, D.28527
	movl	%eax, -28(%rbp)	# D.28527, regno
	.loc 1 8929 0
	movq	-48(%rbp), %rax	# set, tmp146
	movzwl	(%rax), %eax	# set_42(D)->code, D.28525
	cmpw	$47, %ax	#, D.28525
	jne	.L2632	#,
	.loc 1 8930 0
	movq	-48(%rbp), %rax	# set, tmp147
	movq	8(%rax), %rax	# set_42(D)->fld[0].rtx, D.28528
	movzwl	(%rax), %eax	# _44->code, D.28525
	cmpw	$133, %ax	#, D.28525
	je	.L2632	#,
	.loc 1 8931 0
	movq	-48(%rbp), %rax	# set, tmp148
	movq	8(%rax), %rax	# set_42(D)->fld[0].rtx, D.28528
	movzwl	(%rax), %eax	# _46->code, D.28525
	cmpw	$132, %ax	#, D.28525
	je	.L2632	#,
	.loc 1 8932 0
	movq	-48(%rbp), %rax	# set, tmp149
	movq	8(%rax), %rax	# set_42(D)->fld[0].rtx, D.28528
	movzwl	(%rax), %eax	# _48->code, D.28525
	cmpw	$64, %ax	#, D.28525
	jne	.L2633	#,
.L2632:
	.loc 1 8934 0
	cmpl	$7, -28(%rbp)	#, regno
	jle	.L2634	#,
	.loc 1 8934 0 is_stmt 0 discriminator 1
	cmpl	$15, -28(%rbp)	#, regno
	jle	.L2635	#,
.L2634:
	.loc 1 8934 0 discriminator 2
	cmpl	$20, -28(%rbp)	#, regno
	jle	.L2636	#,
	.loc 1 8934 0 discriminator 1
	cmpl	$28, -28(%rbp)	#, regno
	jle	.L2635	#,
.L2636:
	.loc 1 8934 0 discriminator 2
	cmpl	$44, -28(%rbp)	#, regno
	jle	.L2637	#,
	.loc 1 8934 0 discriminator 1
	cmpl	$52, -28(%rbp)	#, regno
	jle	.L2635	#,
.L2637:
	.loc 1 8934 0 discriminator 2
	cmpl	$28, -28(%rbp)	#, regno
	jle	.L2638	#,
	.loc 1 8934 0 discriminator 1
	cmpl	$36, -28(%rbp)	#, regno
	jg	.L2638	#,
.L2635:
	movl	-20(%rbp), %eax	# mode, mode.1371
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28530
	cmpl	$5, %eax	#, D.28530
	je	.L2639	#,
	.loc 1 8934 0 discriminator 2
	movl	-20(%rbp), %eax	# mode, mode.1372
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28530
	cmpl	$6, %eax	#, D.28530
	jne	.L2640	#,
.L2639:
	.loc 1 8934 0 discriminator 1
	movl	$1, %eax	#, iftmp.1370
	jmp	.L2641	#
.L2640:
	.loc 1 8934 0 discriminator 3
	movl	$0, %eax	#, iftmp.1370
.L2641:
	.loc 1 8934 0 discriminator 4
	jmp	.L2642	#
.L2638:
	.loc 1 8934 0 discriminator 2
	cmpl	$18, -20(%rbp)	#, mode
	jne	.L2643	#,
	.loc 1 8934 0 discriminator 4
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1375
	andl	$33554432, %eax	#, D.28529
	testl	%eax, %eax	# D.28529
	je	.L2644	#,
	.loc 1 8934 0 discriminator 6
	movl	$1, %eax	#, iftmp.1374
	jmp	.L2642	#
.L2644:
	.loc 1 8934 0 discriminator 7
	movl	$2, %eax	#, iftmp.1374
	jmp	.L2642	#
.L2643:
	.loc 1 8934 0 discriminator 5
	cmpl	$24, -20(%rbp)	#, mode
	jne	.L2647	#,
	.loc 1 8934 0 discriminator 8
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1378
	andl	$33554432, %eax	#, D.28529
	testl	%eax, %eax	# D.28529
	je	.L2648	#,
	.loc 1 8934 0 discriminator 10
	movl	$3, %eax	#, iftmp.1377
	jmp	.L2642	#
.L2648:
	.loc 1 8934 0 discriminator 11
	movl	$5, %eax	#, iftmp.1377
	jmp	.L2642	#
.L2647:
	.loc 1 8934 0 discriminator 9
	movl	-20(%rbp), %eax	# mode, mode.1379
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28524
	movzbl	%al, %edx	# D.28524, D.28529
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1381
	andl	$33554432, %eax	#, D.28529
	testl	%eax, %eax	# D.28529
	je	.L2651	#,
	.loc 1 8934 0 discriminator 1
	movl	$8, %eax	#, iftmp.1380
	jmp	.L2652	#
.L2651:
	.loc 1 8934 0 discriminator 2
	movl	$4, %eax	#, iftmp.1380
.L2652:
	.loc 1 8934 0 discriminator 3
	addl	%edx, %eax	# D.28529, D.28529
	subl	$1, %eax	#, D.28529
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1383
	andl	$33554432, %edx	#, D.28529
	testl	%edx, %edx	# D.28529
	je	.L2653	#,
	.loc 1 8934 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1382
	jmp	.L2654	#
.L2653:
	.loc 1 8934 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1382
.L2654:
	.loc 1 8934 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1382
	subl	$1, %eax	#, iftmp.1376
.L2642:
	movl	-28(%rbp), %edx	# regno, tmp158
	addl	%edx, %eax	# tmp158, tmp157
	movl	%eax, -24(%rbp)	# tmp157, i
	jmp	.L2655	#
.L2656:
	.loc 1 8936 0 is_stmt 1 discriminator 2
	movl	-24(%rbp), %eax	# i, tmp160
	cltq
	salq	$3, %rax	#, tmp162
	movq	%rax, %rdx	# tmp161, tmp163
	salq	$4, %rdx	#, tmp163
	subq	%rax, %rdx	# tmp161, tmp163
	leaq	reg_state+96(%rdx), %rax	#, tmp164
	movl	$-1, (%rax)	#, reg_state[i_3].use_index
	.loc 1 8937 0 discriminator 2
	movl	reload_combine_ruid(%rip), %ecx	# reload_combine_ruid, reload_combine_ruid.1384
	movl	-24(%rbp), %eax	# i, tmp166
	cltq
	salq	$3, %rax	#, tmp168
	movq	%rax, %rdx	# tmp167, tmp169
	salq	$4, %rdx	#, tmp169
	subq	%rax, %rdx	# tmp167, tmp169
	leaq	reg_state+112(%rdx), %rax	#, tmp170
	movl	%ecx, (%rax)	# reload_combine_ruid.1384, reg_state[i_3].store_ruid
	.loc 1 8934 0 discriminator 2
	subl	$1, -24(%rbp)	#, i
.L2655:
	.loc 1 8934 0 is_stmt 0 discriminator 1
	movl	-24(%rbp), %eax	# i, tmp171
	cmpl	-28(%rbp), %eax	# regno, tmp171
	jge	.L2656	#,
	.loc 1 8929 0 is_stmt 1
	jmp	.L2628	#
.L2633:
	.loc 1 8942 0
	cmpl	$7, -28(%rbp)	#, regno
	jle	.L2657	#,
	.loc 1 8942 0 is_stmt 0 discriminator 1
	cmpl	$15, -28(%rbp)	#, regno
	jle	.L2658	#,
.L2657:
	.loc 1 8942 0 discriminator 2
	cmpl	$20, -28(%rbp)	#, regno
	jle	.L2659	#,
	.loc 1 8942 0 discriminator 1
	cmpl	$28, -28(%rbp)	#, regno
	jle	.L2658	#,
.L2659:
	.loc 1 8942 0 discriminator 2
	cmpl	$44, -28(%rbp)	#, regno
	jle	.L2660	#,
	.loc 1 8942 0 discriminator 1
	cmpl	$52, -28(%rbp)	#, regno
	jle	.L2658	#,
.L2660:
	.loc 1 8942 0 discriminator 2
	cmpl	$28, -28(%rbp)	#, regno
	jle	.L2661	#,
	.loc 1 8942 0 discriminator 1
	cmpl	$36, -28(%rbp)	#, regno
	jg	.L2661	#,
.L2658:
	movl	-20(%rbp), %eax	# mode, mode.1387
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28530
	cmpl	$5, %eax	#, D.28530
	je	.L2662	#,
	.loc 1 8942 0 discriminator 2
	movl	-20(%rbp), %eax	# mode, mode.1388
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28530
	cmpl	$6, %eax	#, D.28530
	jne	.L2663	#,
.L2662:
	.loc 1 8942 0 discriminator 1
	movl	$1, %eax	#, iftmp.1386
	jmp	.L2664	#
.L2663:
	.loc 1 8942 0 discriminator 3
	movl	$0, %eax	#, iftmp.1386
.L2664:
	.loc 1 8942 0 discriminator 4
	jmp	.L2665	#
.L2661:
	.loc 1 8942 0 discriminator 2
	cmpl	$18, -20(%rbp)	#, mode
	jne	.L2666	#,
	.loc 1 8942 0 discriminator 4
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1391
	andl	$33554432, %eax	#, D.28529
	testl	%eax, %eax	# D.28529
	je	.L2667	#,
	.loc 1 8942 0 discriminator 6
	movl	$1, %eax	#, iftmp.1390
	jmp	.L2665	#
.L2667:
	.loc 1 8942 0 discriminator 7
	movl	$2, %eax	#, iftmp.1390
	jmp	.L2665	#
.L2666:
	.loc 1 8942 0 discriminator 5
	cmpl	$24, -20(%rbp)	#, mode
	jne	.L2670	#,
	.loc 1 8942 0 discriminator 8
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1394
	andl	$33554432, %eax	#, D.28529
	testl	%eax, %eax	# D.28529
	je	.L2671	#,
	.loc 1 8942 0 discriminator 10
	movl	$3, %eax	#, iftmp.1393
	jmp	.L2665	#
.L2671:
	.loc 1 8942 0 discriminator 11
	movl	$5, %eax	#, iftmp.1393
	jmp	.L2665	#
.L2670:
	.loc 1 8942 0 discriminator 9
	movl	-20(%rbp), %eax	# mode, mode.1395
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28524
	movzbl	%al, %edx	# D.28524, D.28529
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1397
	andl	$33554432, %eax	#, D.28529
	testl	%eax, %eax	# D.28529
	je	.L2674	#,
	.loc 1 8942 0 discriminator 1
	movl	$8, %eax	#, iftmp.1396
	jmp	.L2675	#
.L2674:
	.loc 1 8942 0 discriminator 2
	movl	$4, %eax	#, iftmp.1396
.L2675:
	.loc 1 8942 0 discriminator 3
	addl	%edx, %eax	# D.28529, D.28529
	subl	$1, %eax	#, D.28529
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1399
	andl	$33554432, %edx	#, D.28529
	testl	%edx, %edx	# D.28529
	je	.L2676	#,
	.loc 1 8942 0 discriminator 1
	movl	$8, %edi	#, iftmp.1398
	jmp	.L2677	#
.L2676:
	.loc 1 8942 0 discriminator 2
	movl	$4, %edi	#, iftmp.1398
.L2677:
	.loc 1 8942 0 discriminator 3
	cltd
	idivl	%edi	# iftmp.1398
	subl	$1, %eax	#, iftmp.1392
.L2665:
	movl	-28(%rbp), %edx	# regno, tmp180
	addl	%edx, %eax	# tmp180, tmp179
	movl	%eax, -24(%rbp)	# tmp179, i
	jmp	.L2678	#
.L2679:
	.loc 1 8944 0 is_stmt 1 discriminator 2
	movl	reload_combine_ruid(%rip), %ecx	# reload_combine_ruid, reload_combine_ruid.1400
	movl	-24(%rbp), %eax	# i, tmp182
	cltq
	salq	$3, %rax	#, tmp184
	movq	%rax, %rdx	# tmp183, tmp185
	salq	$4, %rdx	#, tmp185
	subq	%rax, %rdx	# tmp183, tmp185
	leaq	reg_state+112(%rdx), %rax	#, tmp186
	movl	%ecx, (%rax)	# reload_combine_ruid.1400, reg_state[i_4].store_ruid
	.loc 1 8945 0 discriminator 2
	movl	-24(%rbp), %eax	# i, tmp188
	cltq
	salq	$3, %rax	#, tmp190
	movq	%rax, %rdx	# tmp189, tmp191
	salq	$4, %rdx	#, tmp191
	subq	%rax, %rdx	# tmp189, tmp191
	leaq	reg_state+96(%rdx), %rax	#, tmp192
	movl	$6, (%rax)	#, reg_state[i_4].use_index
	.loc 1 8942 0 discriminator 2
	subl	$1, -24(%rbp)	#, i
.L2678:
	.loc 1 8942 0 is_stmt 0 discriminator 1
	movl	-24(%rbp), %eax	# i, tmp193
	cmpl	-28(%rbp), %eax	# regno, tmp193
	jge	.L2679	#,
.L2628:
	.loc 1 8948 0 is_stmt 1
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE75:
	.size	reload_combine_note_store, .-reload_combine_note_store
	.type	reload_combine_note_use, @function
reload_combine_note_use:
.LFB76:
	.loc 1 8957 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# xp, xp
	movq	%rsi, -96(%rbp)	# insn, insn
	.loc 1 8958 0
	movq	-88(%rbp), %rax	# xp, tmp160
	movq	(%rax), %rax	# *xp_23(D), tmp161
	movq	%rax, -48(%rbp)	# tmp161, x
	.loc 1 8959 0
	movq	-48(%rbp), %rax	# x, tmp162
	movzwl	(%rax), %eax	# x_24->code, D.28531
	movzwl	%ax, %eax	# D.28531, tmp163
	movl	%eax, -64(%rbp)	# tmp163, code
	.loc 1 8962 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, tmp164
	movq	%rax, -40(%rbp)	# tmp164, offset
	.loc 1 8964 0
	movl	-64(%rbp), %eax	# code, tmp166
	subl	$47, %eax	#, tmp165
	cmpl	$28, %eax	#, tmp165
	ja	.L2751	#,
	movl	%eax, %eax	# tmp165, tmp167
	movq	.L2683(,%rax,8), %rax	#, tmp168
	jmp	*%rax	# tmp168
	.section	.rodata
	.align 8
	.align 4
.L2683:
	.quad	.L2682
	.quad	.L2684
	.quad	.L2685
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2686
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2751
	.quad	.L2687
	.text
.L2682:
	.loc 1 8967 0
	movq	-48(%rbp), %rax	# x, tmp169
	movq	8(%rax), %rax	# x_24->fld[0].rtx, D.28532
	movzwl	(%rax), %eax	# _28->code, D.28531
	cmpw	$61, %ax	#, D.28531
	jne	.L2688	#,
	.loc 1 8969 0
	movq	-48(%rbp), %rax	# x, tmp170
	leaq	16(%rax), %rdx	#, D.28533
	movq	-96(%rbp), %rax	# insn, tmp171
	movq	%rax, %rsi	# tmp171,
	movq	%rdx, %rdi	# D.28533,
	call	reload_combine_note_use	#
	.loc 1 8970 0
	jmp	.L2680	#
.L2688:
	.loc 1 8972 0
	jmp	.L2690	#
.L2684:
	.loc 1 8976 0
	movq	-48(%rbp), %rax	# x, tmp172
	movq	8(%rax), %rax	# x_24->fld[0].rtx, D.28532
	movzwl	(%rax), %eax	# _32->code, D.28531
	cmpw	$61, %ax	#, D.28531
	jne	.L2691	#,
	.loc 1 8976 0 is_stmt 0 discriminator 1
	movq	-48(%rbp), %rax	# x, tmp173
	movq	8(%rax), %rax	# x_24->fld[0].rtx, D.28532
	movzbl	3(%rax), %eax	# *_34, D.28534
	andl	$64, %eax	#, D.28534
	testb	%al, %al	# D.28534
	je	.L2691	#,
.LBB198:
	.loc 1 8979 0 is_stmt 1
	movq	-48(%rbp), %rax	# x, tmp174
	movq	8(%rax), %rax	# x_24->fld[0].rtx, tmp175
	movq	%rax, -32(%rbp)	# tmp175, reg
	.loc 1 8980 0
	movq	-32(%rbp), %rax	# reg, tmp176
	movl	8(%rax), %eax	# reg_37->fld[0].rtuint, D.28535
	movl	%eax, -60(%rbp)	# D.28535, regno
	.loc 1 8981 0
	cmpl	$7, -60(%rbp)	#, regno
	jle	.L2692	#,
	.loc 1 8981 0 is_stmt 0 discriminator 1
	cmpl	$15, -60(%rbp)	#, regno
	jle	.L2693	#,
.L2692:
	.loc 1 8981 0 discriminator 2
	cmpl	$20, -60(%rbp)	#, regno
	jle	.L2694	#,
	.loc 1 8981 0 discriminator 1
	cmpl	$28, -60(%rbp)	#, regno
	jle	.L2693	#,
.L2694:
	.loc 1 8981 0 discriminator 2
	cmpl	$44, -60(%rbp)	#, regno
	jle	.L2695	#,
	.loc 1 8981 0 discriminator 1
	cmpl	$52, -60(%rbp)	#, regno
	jle	.L2693	#,
.L2695:
	.loc 1 8981 0 discriminator 2
	cmpl	$28, -60(%rbp)	#, regno
	jle	.L2696	#,
	.loc 1 8981 0 discriminator 1
	cmpl	$36, -60(%rbp)	#, regno
	jg	.L2696	#,
.L2693:
	movq	-32(%rbp), %rax	# reg, tmp177
	movzbl	2(%rax), %eax	# reg_37->mode, D.28534
	movzbl	%al, %eax	# D.28534, D.28536
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28537
	cmpl	$5, %eax	#, D.28537
	je	.L2697	#,
	.loc 1 8981 0 discriminator 2
	movq	-32(%rbp), %rax	# reg, tmp179
	movzbl	2(%rax), %eax	# reg_37->mode, D.28534
	movzbl	%al, %eax	# D.28534, D.28536
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28537
	cmpl	$6, %eax	#, D.28537
	jne	.L2698	#,
.L2697:
	.loc 1 8981 0 discriminator 1
	movl	$2, %eax	#, iftmp.1402
	jmp	.L2699	#
.L2698:
	movl	$1, %eax	#, iftmp.1402
.L2699:
	.loc 1 8981 0 discriminator 3
	jmp	.L2700	#
.L2696:
	.loc 1 8981 0 discriminator 2
	movq	-32(%rbp), %rax	# reg, tmp181
	movzbl	2(%rax), %eax	# reg_37->mode, D.28534
	cmpb	$18, %al	#, D.28534
	jne	.L2701	#,
	.loc 1 8981 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1405
	andl	$33554432, %eax	#, D.28536
	testl	%eax, %eax	# D.28536
	je	.L2702	#,
	movl	$2, %eax	#, iftmp.1404
	jmp	.L2700	#
.L2702:
	.loc 1 8981 0 discriminator 2
	movl	$3, %eax	#, iftmp.1404
	jmp	.L2700	#
.L2701:
	movq	-32(%rbp), %rax	# reg, tmp182
	movzbl	2(%rax), %eax	# reg_37->mode, D.28534
	cmpb	$24, %al	#, D.28534
	jne	.L2705	#,
	.loc 1 8981 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1408
	andl	$33554432, %eax	#, D.28536
	testl	%eax, %eax	# D.28536
	je	.L2706	#,
	movl	$4, %eax	#, iftmp.1407
	jmp	.L2700	#
.L2706:
	.loc 1 8981 0 discriminator 2
	movl	$6, %eax	#, iftmp.1407
	jmp	.L2700	#
.L2705:
	movq	-32(%rbp), %rax	# reg, tmp183
	movzbl	2(%rax), %eax	# reg_37->mode, D.28534
	movzbl	%al, %eax	# D.28534, D.28536
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28534
	movzbl	%al, %edx	# D.28534, D.28536
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1410
	andl	$33554432, %eax	#, D.28536
	testl	%eax, %eax	# D.28536
	je	.L2709	#,
	.loc 1 8981 0 discriminator 1
	movl	$8, %eax	#, iftmp.1409
	jmp	.L2710	#
.L2709:
	.loc 1 8981 0 discriminator 2
	movl	$4, %eax	#, iftmp.1409
.L2710:
	.loc 1 8981 0 discriminator 3
	addl	%edx, %eax	# D.28536, D.28536
	subl	$1, %eax	#, D.28536
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1412
	andl	$33554432, %edx	#, D.28536
	testl	%edx, %edx	# D.28536
	je	.L2711	#,
	.loc 1 8981 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1411
	jmp	.L2712	#
.L2711:
	.loc 1 8981 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1411
.L2712:
	.loc 1 8981 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1411
.L2700:
	movl	%eax, -72(%rbp)	# iftmp.1401, nregs
	.loc 1 8983 0 is_stmt 1 discriminator 3
	jmp	.L2713	#
.L2714:
	.loc 1 8984 0
	movl	-72(%rbp), %eax	# nregs, tmp187
	movl	-60(%rbp), %edx	# regno, tmp188
	addl	%edx, %eax	# tmp188, D.28536
	cltq
	salq	$3, %rax	#, tmp191
	movq	%rax, %rdx	# tmp190, tmp192
	salq	$4, %rdx	#, tmp192
	subq	%rax, %rdx	# tmp190, tmp192
	leaq	reg_state+96(%rdx), %rax	#, tmp193
	movl	$-1, (%rax)	#, reg_state[_80].use_index
.L2713:
	.loc 1 8983 0 discriminator 1
	subl	$1, -72(%rbp)	#, nregs
	cmpl	$0, -72(%rbp)	#, nregs
	jns	.L2714	#,
	.loc 1 8985 0
	jmp	.L2680	#
.L2691:
.LBE198:
	.loc 1 8987 0
	jmp	.L2690	#
.L2685:
	.loc 1 8990 0
	movq	-48(%rbp), %rax	# x, tmp194
	movq	8(%rax), %rax	# x_24->fld[0].rtx, D.28532
	movzwl	(%rax), %eax	# _81->code, D.28531
	cmpw	$61, %ax	#, D.28531
	jne	.L2715	#,
	.loc 1 8993 0
	movq	-48(%rbp), %rax	# x, tmp195
	movq	8(%rax), %rax	# x_24->fld[0].rtx, D.28532
	movl	8(%rax), %eax	# _83->fld[0].rtuint, D.28535
	cmpl	$52, %eax	#, D.28535
	jbe	.L2716	#,
	.loc 1 8994 0
	movl	$__FUNCTION__.16325, %edx	#,
	movl	$8994, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L2716:
	.loc 1 8995 0
	jmp	.L2680	#
.L2715:
	.loc 1 8997 0
	jmp	.L2690	#
.L2687:
	.loc 1 9001 0
	movq	-48(%rbp), %rax	# x, tmp196
	movq	8(%rax), %rax	# x_24->fld[0].rtx, D.28532
	movzwl	(%rax), %eax	# _85->code, D.28531
	cmpw	$61, %ax	#, D.28531
	jne	.L2690	#,
	.loc 1 9002 0
	movq	-48(%rbp), %rax	# x, tmp197
	movq	16(%rax), %rax	# x_24->fld[1].rtx, D.28532
	movzwl	(%rax), %eax	# _87->code, D.28531
	cmpw	$54, %ax	#, D.28531
	jne	.L2690	#,
	.loc 1 9004 0
	movq	-48(%rbp), %rax	# x, tmp198
	movq	16(%rax), %rax	# x_24->fld[1].rtx, tmp199
	movq	%rax, -40(%rbp)	# tmp199, offset
	.loc 1 9005 0
	movq	-48(%rbp), %rax	# x, tmp200
	movq	8(%rax), %rax	# x_24->fld[0].rtx, tmp201
	movq	%rax, -48(%rbp)	# tmp201, x
.L2686:
.LBB199:
	.loc 1 9009 0
	movq	-48(%rbp), %rax	# x, tmp202
	movl	8(%rax), %eax	# x_1->fld[0].rtuint, D.28535
	movl	%eax, -56(%rbp)	# D.28535, regno
	.loc 1 9014 0
	cmpl	$52, -56(%rbp)	#, regno
	jle	.L2717	#,
	.loc 1 9015 0
	movl	$__FUNCTION__.16325, %edx	#,
	movl	$9015, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L2717:
	.loc 1 9017 0
	cmpl	$7, -56(%rbp)	#, regno
	jle	.L2718	#,
	.loc 1 9017 0 is_stmt 0 discriminator 1
	cmpl	$15, -56(%rbp)	#, regno
	jle	.L2719	#,
.L2718:
	.loc 1 9017 0 discriminator 2
	cmpl	$20, -56(%rbp)	#, regno
	jle	.L2720	#,
	.loc 1 9017 0 discriminator 1
	cmpl	$28, -56(%rbp)	#, regno
	jle	.L2719	#,
.L2720:
	.loc 1 9017 0 discriminator 2
	cmpl	$44, -56(%rbp)	#, regno
	jle	.L2721	#,
	.loc 1 9017 0 discriminator 1
	cmpl	$52, -56(%rbp)	#, regno
	jle	.L2719	#,
.L2721:
	.loc 1 9017 0 discriminator 2
	cmpl	$28, -56(%rbp)	#, regno
	jle	.L2722	#,
	.loc 1 9017 0 discriminator 1
	cmpl	$36, -56(%rbp)	#, regno
	jg	.L2722	#,
.L2719:
	movq	-48(%rbp), %rax	# x, tmp203
	movzbl	2(%rax), %eax	# x_1->mode, D.28534
	movzbl	%al, %eax	# D.28534, D.28536
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28537
	cmpl	$5, %eax	#, D.28537
	je	.L2723	#,
	.loc 1 9017 0 discriminator 2
	movq	-48(%rbp), %rax	# x, tmp205
	movzbl	2(%rax), %eax	# x_1->mode, D.28534
	movzbl	%al, %eax	# D.28534, D.28536
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28537
	cmpl	$6, %eax	#, D.28537
	jne	.L2724	#,
.L2723:
	.loc 1 9017 0 discriminator 1
	movl	$2, %eax	#, iftmp.1414
	jmp	.L2725	#
.L2724:
	movl	$1, %eax	#, iftmp.1414
.L2725:
	.loc 1 9017 0 discriminator 3
	jmp	.L2726	#
.L2722:
	.loc 1 9017 0 discriminator 2
	movq	-48(%rbp), %rax	# x, tmp207
	movzbl	2(%rax), %eax	# x_1->mode, D.28534
	cmpb	$18, %al	#, D.28534
	jne	.L2727	#,
	.loc 1 9017 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1417
	andl	$33554432, %eax	#, D.28536
	testl	%eax, %eax	# D.28536
	je	.L2728	#,
	movl	$2, %eax	#, iftmp.1416
	jmp	.L2726	#
.L2728:
	.loc 1 9017 0 discriminator 2
	movl	$3, %eax	#, iftmp.1416
	jmp	.L2726	#
.L2727:
	movq	-48(%rbp), %rax	# x, tmp208
	movzbl	2(%rax), %eax	# x_1->mode, D.28534
	cmpb	$24, %al	#, D.28534
	jne	.L2731	#,
	.loc 1 9017 0 discriminator 1
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1420
	andl	$33554432, %eax	#, D.28536
	testl	%eax, %eax	# D.28536
	je	.L2732	#,
	movl	$4, %eax	#, iftmp.1419
	jmp	.L2726	#
.L2732:
	.loc 1 9017 0 discriminator 2
	movl	$6, %eax	#, iftmp.1419
	jmp	.L2726	#
.L2731:
	movq	-48(%rbp), %rax	# x, tmp209
	movzbl	2(%rax), %eax	# x_1->mode, D.28534
	movzbl	%al, %eax	# D.28534, D.28536
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28534
	movzbl	%al, %edx	# D.28534, D.28536
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1422
	andl	$33554432, %eax	#, D.28536
	testl	%eax, %eax	# D.28536
	je	.L2735	#,
	.loc 1 9017 0 discriminator 1
	movl	$8, %eax	#, iftmp.1421
	jmp	.L2736	#
.L2735:
	.loc 1 9017 0 discriminator 2
	movl	$4, %eax	#, iftmp.1421
.L2736:
	.loc 1 9017 0 discriminator 3
	addl	%edx, %eax	# D.28536, D.28536
	subl	$1, %eax	#, D.28536
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1424
	andl	$33554432, %edx	#, D.28536
	testl	%edx, %edx	# D.28536
	je	.L2737	#,
	.loc 1 9017 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1423
	jmp	.L2738	#
.L2737:
	.loc 1 9017 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1423
.L2738:
	.loc 1 9017 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1423
.L2726:
	movl	%eax, -68(%rbp)	# iftmp.1413, nregs
	.loc 1 9020 0 is_stmt 1 discriminator 3
	cmpl	$1, -68(%rbp)	#, nregs
	jle	.L2739	#,
	.loc 1 9022 0
	jmp	.L2740	#
.L2741:
	.loc 1 9023 0
	movl	-68(%rbp), %eax	# nregs, tmp213
	movl	-56(%rbp), %edx	# regno, tmp214
	addl	%edx, %eax	# tmp214, D.28536
	cltq
	salq	$3, %rax	#, tmp217
	movq	%rax, %rdx	# tmp216, tmp218
	salq	$4, %rdx	#, tmp218
	subq	%rax, %rdx	# tmp216, tmp218
	leaq	reg_state+96(%rdx), %rax	#, tmp219
	movl	$-1, (%rax)	#, reg_state[_133].use_index
.L2740:
	.loc 1 9022 0 discriminator 1
	subl	$1, -68(%rbp)	#, nregs
	cmpl	$0, -68(%rbp)	#, nregs
	jns	.L2741	#,
	.loc 1 9024 0
	jmp	.L2680	#
.L2739:
	.loc 1 9031 0
	movl	-56(%rbp), %eax	# regno, tmp221
	cltq
	salq	$3, %rax	#, tmp223
	movq	%rax, %rdx	# tmp222, tmp224
	salq	$4, %rdx	#, tmp224
	subq	%rax, %rdx	# tmp222, tmp224
	leaq	reg_state+96(%rdx), %rax	#, tmp225
	movl	(%rax), %eax	# reg_state[regno_92].use_index, D.28536
	leal	-1(%rax), %ecx	#, D.28536
	movl	-56(%rbp), %eax	# regno, tmp227
	cltq
	salq	$3, %rax	#, tmp229
	movq	%rax, %rdx	# tmp228, tmp230
	salq	$4, %rdx	#, tmp230
	subq	%rax, %rdx	# tmp228, tmp230
	leaq	reg_state+96(%rdx), %rax	#, tmp231
	movl	%ecx, (%rax)	# D.28536, reg_state[regno_92].use_index
	movl	-56(%rbp), %eax	# regno, tmp233
	cltq
	salq	$3, %rax	#, tmp235
	movq	%rax, %rdx	# tmp234, tmp236
	salq	$4, %rdx	#, tmp236
	subq	%rax, %rdx	# tmp234, tmp236
	leaq	reg_state+96(%rdx), %rax	#, tmp237
	movl	(%rax), %eax	# reg_state[regno_92].use_index, tmp238
	movl	%eax, -52(%rbp)	# tmp238, use_index
	.loc 1 9032 0
	cmpl	$0, -52(%rbp)	#, use_index
	jns	.L2742	#,
	.loc 1 9033 0
	jmp	.L2680	#
.L2742:
	.loc 1 9035 0
	cmpl	$5, -52(%rbp)	#, use_index
	je	.L2743	#,
	.loc 1 9040 0
	movl	-56(%rbp), %eax	# regno, tmp240
	cltq
	salq	$3, %rax	#, tmp242
	movq	%rax, %rdx	# tmp241, tmp243
	salq	$4, %rdx	#, tmp243
	subq	%rax, %rdx	# tmp241, tmp243
	leaq	reg_state+96(%rdx), %rax	#, tmp244
	movq	8(%rax), %rdx	# reg_state[regno_92].offset, D.28532
	movq	-40(%rbp), %rax	# offset, tmp245
	movq	%rdx, %rsi	# D.28532,
	movq	%rax, %rdi	# tmp245,
	call	rtx_equal_p	#
	testl	%eax, %eax	# D.28536
	jne	.L2744	#,
	.loc 1 9042 0
	movl	-56(%rbp), %eax	# regno, tmp247
	cltq
	salq	$3, %rax	#, tmp249
	movq	%rax, %rdx	# tmp248, tmp250
	salq	$4, %rdx	#, tmp250
	subq	%rax, %rdx	# tmp248, tmp250
	leaq	reg_state+96(%rdx), %rax	#, tmp251
	movl	$-1, (%rax)	#, reg_state[regno_92].use_index
	.loc 1 9043 0
	jmp	.L2680	#
.L2743:
	.loc 1 9050 0
	movl	-56(%rbp), %eax	# regno, tmp253
	cltq
	salq	$3, %rax	#, tmp255
	movq	%rax, %rdx	# tmp254, tmp256
	salq	$4, %rdx	#, tmp256
	subq	%rax, %rdx	# tmp254, tmp256
	addq	$reg_state+96, %rdx	#, tmp257
	movq	-40(%rbp), %rax	# offset, tmp258
	movq	%rax, 8(%rdx)	# tmp258, reg_state[regno_92].offset
	.loc 1 9051 0
	movl	reload_combine_ruid(%rip), %ecx	# reload_combine_ruid, reload_combine_ruid.1425
	movl	-56(%rbp), %eax	# regno, tmp260
	cltq
	salq	$3, %rax	#, tmp262
	movq	%rax, %rdx	# tmp261, tmp263
	salq	$4, %rdx	#, tmp263
	subq	%rax, %rdx	# tmp261, tmp263
	leaq	reg_state+112(%rdx), %rax	#, tmp264
	movl	%ecx, 4(%rax)	# reload_combine_ruid.1425, reg_state[regno_92].use_ruid
.L2744:
	.loc 1 9053 0
	movl	-52(%rbp), %eax	# use_index, tmp266
	movslq	%eax, %rdx	# tmp266, tmp265
	movl	-56(%rbp), %eax	# regno, tmp268
	cltq
	movq	%rdx, %rcx	# tmp265, tmp269
	salq	$4, %rcx	#, tmp269
	salq	$3, %rax	#, tmp271
	movq	%rax, %rdx	# tmp270, tmp272
	salq	$4, %rdx	#, tmp272
	subq	%rax, %rdx	# tmp270, tmp272
	leaq	(%rcx,%rdx), %rax	#, tmp273
	leaq	reg_state(%rax), %rdx	#, tmp274
	movq	-96(%rbp), %rax	# insn, tmp275
	movq	%rax, (%rdx)	# tmp275, reg_state[regno_92].reg_use[use_index_136].insn
	.loc 1 9054 0
	movl	-52(%rbp), %eax	# use_index, tmp277
	movslq	%eax, %rdx	# tmp277, tmp276
	movl	-56(%rbp), %eax	# regno, tmp279
	cltq
	movq	%rdx, %rcx	# tmp276, tmp280
	salq	$4, %rcx	#, tmp280
	salq	$3, %rax	#, tmp282
	movq	%rax, %rdx	# tmp281, tmp283
	salq	$4, %rdx	#, tmp283
	subq	%rax, %rdx	# tmp281, tmp283
	leaq	(%rcx,%rdx), %rax	#, tmp284
	leaq	reg_state(%rax), %rdx	#, tmp285
	movq	-88(%rbp), %rax	# xp, tmp286
	movq	%rax, 8(%rdx)	# tmp286, reg_state[regno_92].reg_use[use_index_136].usep
	.loc 1 9055 0
	jmp	.L2680	#
.L2751:
.LBE199:
	.loc 1 9059 0
	nop
.L2690:
	.loc 1 9063 0
	movl	-64(%rbp), %eax	# code, code.1426
	cltq
	movq	rtx_format(,%rax,8), %rax	# rtx_format, tmp288
	movq	%rax, -24(%rbp)	# tmp288, fmt
	.loc 1 9064 0
	movl	-64(%rbp), %eax	# code, code.1427
	cltq
	movzbl	rtx_length(%rax), %eax	# rtx_length, D.28534
	movzbl	%al, %eax	# D.28534, D.28536
	subl	$1, %eax	#, tmp290
	movl	%eax, -80(%rbp)	# tmp290, i
	jmp	.L2745	#
.L2750:
	.loc 1 9066 0
	movl	-80(%rbp), %eax	# i, tmp291
	movslq	%eax, %rdx	# tmp291, D.28538
	movq	-24(%rbp), %rax	# fmt, tmp292
	addq	%rdx, %rax	# D.28538, D.28539
	movzbl	(%rax), %eax	# *_147, D.28540
	cmpb	$101, %al	#, D.28540
	jne	.L2746	#,
	.loc 1 9067 0
	movl	-80(%rbp), %eax	# i, tmp294
	cltq
	leaq	0(,%rax,8), %rdx	#, tmp295
	movq	-48(%rbp), %rax	# x, tmp297
	addq	%rdx, %rax	# tmp295, tmp296
	leaq	8(%rax), %rdx	#, D.28533
	movq	-96(%rbp), %rax	# insn, tmp298
	movq	%rax, %rsi	# tmp298,
	movq	%rdx, %rdi	# D.28533,
	call	reload_combine_note_use	#
	jmp	.L2747	#
.L2746:
	.loc 1 9068 0
	movl	-80(%rbp), %eax	# i, tmp299
	movslq	%eax, %rdx	# tmp299, D.28538
	movq	-24(%rbp), %rax	# fmt, tmp300
	addq	%rdx, %rax	# D.28538, D.28539
	movzbl	(%rax), %eax	# *_151, D.28540
	cmpb	$69, %al	#, D.28540
	jne	.L2747	#,
	.loc 1 9070 0
	movq	-48(%rbp), %rax	# x, tmp301
	movl	-80(%rbp), %edx	# i, tmp303
	movslq	%edx, %rdx	# tmp303, tmp302
	movq	8(%rax,%rdx,8), %rax	# x_24->fld[i_2].rtvec, D.28541
	movl	(%rax), %eax	# _153->num_elem, D.28536
	subl	$1, %eax	#, tmp304
	movl	%eax, -76(%rbp)	# tmp304, j
	jmp	.L2748	#
.L2749:
	.loc 1 9071 0 discriminator 2
	movq	-48(%rbp), %rax	# x, tmp305
	movl	-80(%rbp), %edx	# i, tmp307
	movslq	%edx, %rdx	# tmp307, tmp306
	movq	8(%rax,%rdx,8), %rax	# x_24->fld[i_2].rtvec, D.28541
	movl	-76(%rbp), %edx	# j, tmp309
	movslq	%edx, %rdx	# tmp309, tmp308
	salq	$3, %rdx	#, tmp310
	addq	%rdx, %rax	# tmp310, tmp311
	leaq	8(%rax), %rdx	#, D.28533
	movq	-96(%rbp), %rax	# insn, tmp312
	movq	%rax, %rsi	# tmp312,
	movq	%rdx, %rdi	# D.28533,
	call	reload_combine_note_use	#
	.loc 1 9070 0 discriminator 2
	subl	$1, -76(%rbp)	#, j
.L2748:
	.loc 1 9070 0 is_stmt 0 discriminator 1
	cmpl	$0, -76(%rbp)	#, j
	jns	.L2749	#,
.L2747:
	.loc 1 9064 0 is_stmt 1
	subl	$1, -80(%rbp)	#, i
.L2745:
	.loc 1 9064 0 is_stmt 0 discriminator 1
	cmpl	$0, -80(%rbp)	#, i
	jns	.L2750	#,
.L2680:
	.loc 1 9074 0 is_stmt 1
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE76:
	.size	reload_combine_note_use, .-reload_combine_note_use
	.local	reg_set_luid
	.comm	reg_set_luid,212,32
	.local	reg_offset
	.comm	reg_offset,424,32
	.local	reg_base_reg
	.comm	reg_base_reg,212,32
	.local	reg_mode
	.comm	reg_mode,212,32
	.local	move2add_luid
	.comm	move2add_luid,4,4
	.local	move2add_last_label_luid
	.comm	move2add_last_label_luid,4,4
	.type	sext_for_mode, @function
sext_for_mode:
.LFB77:
	.loc 1 9111 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movl	%edi, -20(%rbp)	# mode, mode
	movq	%rsi, -32(%rbp)	# value, value
	.loc 1 9112 0
	movl	-20(%rbp), %eax	# mode, mode.1428
	cltq
	movq	mode_mask_array(,%rax,8), %rdx	# mode_mask_array, D.28542
	movq	-32(%rbp), %rax	# value, value.1429
	andq	%rdx, %rax	# D.28542, D.28542
	movq	%rax, -8(%rbp)	# D.28542, cval
	.loc 1 9113 0
	movl	-20(%rbp), %eax	# mode, mode.1430
	cltq
	movzwl	mode_bitsize(%rax,%rax), %eax	# mode_bitsize, D.28543
	movzwl	%ax, %eax	# D.28543, tmp73
	movl	%eax, -12(%rbp)	# tmp73, width
	.loc 1 9117 0
	cmpl	$0, -12(%rbp)	#, width
	jle	.L2753	#,
	.loc 1 9117 0 is_stmt 0 discriminator 1
	cmpl	$63, -12(%rbp)	#, width
	jg	.L2753	#,
	.loc 1 9118 0 is_stmt 1
	movl	-12(%rbp), %eax	# width, tmp74
	subl	$1, %eax	#, D.28544
	movq	-8(%rbp), %rdx	# cval, tmp75
	movl	%eax, %ecx	# D.28544, tmp80
	sarq	%cl, %rdx	# tmp80, D.28545
	movq	%rdx, %rax	# D.28545, D.28545
	andl	$1, %eax	#, D.28545
	testq	%rax, %rax	# D.28545
	je	.L2753	#,
	.loc 1 9119 0
	movl	-12(%rbp), %eax	# width, tmp76
	movq	$-1, %rdx	#, tmp77
	movl	%eax, %ecx	# tmp76, tmp82
	salq	%cl, %rdx	# tmp82, D.28545
	movq	%rdx, %rax	# D.28545, D.28545
	orq	%rax, -8(%rbp)	# D.28545, cval
.L2753:
	.loc 1 9121 0
	movq	-8(%rbp), %rax	# cval, D.28545
	.loc 1 9122 0
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE77:
	.size	sext_for_mode, .-sext_for_mode
	.type	reload_cse_move2add, @function
reload_cse_move2add:
.LFB78:
	.loc 1 9135 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$152, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -152(%rbp)	# first, first
	.loc 1 9139 0
	movl	$52, -140(%rbp)	#, i
	jmp	.L2756	#
.L2757:
	.loc 1 9140 0 discriminator 2
	movl	-140(%rbp), %eax	# i, tmp172
	cltq
	movl	$0, reg_set_luid(,%rax,4)	#, reg_set_luid
	.loc 1 9139 0 discriminator 2
	subl	$1, -140(%rbp)	#, i
.L2756:
	.loc 1 9139 0 is_stmt 0 discriminator 1
	cmpl	$0, -140(%rbp)	#, i
	jns	.L2757	#,
	.loc 1 9142 0 is_stmt 1
	movl	$0, move2add_last_label_luid(%rip)	#, move2add_last_label_luid
	.loc 1 9143 0
	movl	$2, move2add_luid(%rip)	#, move2add_luid
	.loc 1 9144 0
	movq	-152(%rbp), %rax	# first, tmp173
	movq	%rax, -120(%rbp)	# tmp173, insn
	jmp	.L2758	#
.L2782:
.LBB200:
	.loc 1 9148 0
	movq	-120(%rbp), %rax	# insn, tmp174
	movzwl	(%rax), %eax	# insn_4->code, D.28546
	cmpw	$36, %ax	#, D.28546
	jne	.L2759	#,
	.loc 1 9150 0
	movl	move2add_luid(%rip), %eax	# move2add_luid, move2add_luid.1431
	movl	%eax, move2add_last_label_luid(%rip)	# move2add_luid.1431, move2add_last_label_luid
	.loc 1 9154 0
	movl	move2add_luid(%rip), %eax	# move2add_luid, move2add_luid.1432
	addl	$1, %eax	#, move2add_luid.1433
	movl	%eax, move2add_luid(%rip)	# move2add_luid.1433, move2add_luid
	.loc 1 9155 0
	jmp	.L2760	#
.L2759:
	.loc 1 9157 0
	movq	-120(%rbp), %rax	# insn, tmp175
	movzwl	(%rax), %eax	# insn_4->code, D.28546
	movzwl	%ax, %eax	# D.28546, D.28547
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28548
	cmpb	$105, %al	#, D.28548
	je	.L2761	#,
	.loc 1 9158 0
	jmp	.L2760	#
.L2761:
	.loc 1 9159 0
	movq	-120(%rbp), %rax	# insn, tmp177
	movq	32(%rax), %rax	# insn_4->fld[3].rtx, tmp178
	movq	%rax, -96(%rbp)	# tmp178, pat
	.loc 1 9162 0
	movq	-96(%rbp), %rax	# pat, tmp179
	movzwl	(%rax), %eax	# pat_21->code, D.28546
	cmpw	$47, %ax	#, D.28546
	jne	.L2762	#,
	.loc 1 9163 0
	movq	-96(%rbp), %rax	# pat, tmp180
	movq	8(%rax), %rax	# pat_21->fld[0].rtx, D.28549
	movzwl	(%rax), %eax	# _23->code, D.28546
	cmpw	$61, %ax	#, D.28546
	jne	.L2762	#,
.LBB201:
	.loc 1 9165 0
	movq	-96(%rbp), %rax	# pat, tmp181
	movq	8(%rax), %rax	# pat_21->fld[0].rtx, tmp182
	movq	%rax, -88(%rbp)	# tmp182, reg
	.loc 1 9166 0
	movq	-88(%rbp), %rax	# reg, tmp183
	movl	8(%rax), %eax	# reg_25->fld[0].rtuint, D.28550
	movl	%eax, -132(%rbp)	# D.28550, regno
	.loc 1 9167 0
	movq	-96(%rbp), %rax	# pat, tmp184
	movq	16(%rax), %rax	# pat_21->fld[1].rtx, tmp185
	movq	%rax, -80(%rbp)	# tmp185, src
	.loc 1 9171 0
	movl	-132(%rbp), %eax	# regno, tmp187
	cltq
	movl	reg_set_luid(,%rax,4), %edx	# reg_set_luid, D.28547
	movl	move2add_last_label_luid(%rip), %eax	# move2add_last_label_luid, move2add_last_label_luid.1434
	cmpl	%eax, %edx	# move2add_last_label_luid.1434, D.28547
	jle	.L2762	#,
	.loc 1 9172 0
	movq	-88(%rbp), %rax	# reg, tmp188
	movzbl	2(%rax), %eax	# reg_25->mode, D.28551
	movzbl	%al, %eax	# D.28551, D.28547
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28551
	movl	-132(%rbp), %eax	# regno, tmp191
	cltq
	movl	reg_mode(,%rax,4), %eax	# reg_mode, D.28552
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28551
	cmpb	%al, %dl	# D.28551, D.28551
	je	.L2763	#,
	.loc 1 9172 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# reg, tmp193
	movzbl	2(%rax), %eax	# reg_25->mode, D.28551
	movzbl	%al, %eax	# D.28551, D.28547
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28551
	movl	-132(%rbp), %eax	# regno, tmp196
	cltq
	movl	reg_mode(,%rax,4), %eax	# reg_mode, D.28552
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28551
	cmpb	%al, %dl	# D.28551, D.28551
	ja	.L2762	#,
.L2763:
	.loc 1 9182 0 is_stmt 1
	movq	-80(%rbp), %rax	# src, tmp198
	movzwl	(%rax), %eax	# src_28->code, D.28546
	cmpw	$54, %ax	#, D.28546
	jne	.L2764	#,
	.loc 1 9182 0 is_stmt 0 discriminator 1
	movl	-132(%rbp), %eax	# regno, tmp200
	cltq
	movl	reg_base_reg(,%rax,4), %eax	# reg_base_reg, D.28547
	testl	%eax, %eax	# D.28547
	jns	.L2764	#,
.LBB202:
	.loc 1 9184 0 is_stmt 1
	movl	$0, -128(%rbp)	#, success
	.loc 1 9185 0
	movq	-80(%rbp), %rax	# src, tmp201
	movq	8(%rax), %rdx	# src_28->fld[0].rtwint, D.28553
	movl	-132(%rbp), %eax	# regno, tmp203
	cltq
	movq	reg_offset(,%rax,8), %rax	# reg_offset, D.28553
	subq	%rax, %rdx	# D.28553, D.28553
	movq	-88(%rbp), %rax	# reg, tmp204
	movzbl	2(%rax), %eax	# reg_25->mode, D.28551
	movzbl	%al, %eax	# D.28551, D.28552
	movq	%rdx, %rsi	# D.28553,
	movl	%eax, %edi	# D.28552,
	call	sext_for_mode	#
	movq	%rax, %rsi	# D.28553,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -72(%rbp)	# tmp205, new_src
	.loc 1 9194 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.28549
	cmpq	-72(%rbp), %rax	# new_src, D.28549
	jne	.L2765	#,
	.loc 1 9195 0
	movq	-96(%rbp), %rax	# pat, tmp206
	leaq	16(%rax), %rsi	#, D.28554
	movq	-88(%rbp), %rdx	# reg, tmp207
	movq	-120(%rbp), %rax	# insn, tmp208
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp208,
	call	validate_change	#
	movl	%eax, -128(%rbp)	# tmp209, success
	jmp	.L2766	#
.L2765:
	.loc 1 9196 0
	movq	-72(%rbp), %rax	# new_src, tmp210
	movl	$75, %esi	#,
	movq	%rax, %rdi	# tmp210,
	call	rtx_cost	#
	movl	%eax, %ebx	#, D.28547
	movq	-80(%rbp), %rax	# src, tmp211
	movl	$47, %esi	#,
	movq	%rax, %rdi	# tmp211,
	call	rtx_cost	#
	cmpl	%eax, %ebx	# D.28547, D.28547
	jge	.L2766	#,
	.loc 1 9197 0
	movq	-72(%rbp), %rdx	# new_src, tmp212
	movq	-88(%rbp), %rax	# reg, tmp213
	movq	%rdx, %rsi	# tmp212,
	movq	%rax, %rdi	# tmp213,
	call	have_add2_insn	#
	testl	%eax, %eax	# D.28547
	je	.L2766	#,
	.loc 1 9198 0
	movq	-72(%rbp), %rdx	# new_src, tmp214
	movq	-88(%rbp), %rax	# reg, tmp215
	movq	%rdx, %rsi	# tmp214,
	movq	%rax, %rdi	# tmp215,
	call	gen_add2_insn	#
	movq	%rax, %rdx	#, D.28549
	movq	-120(%rbp), %rax	# insn, tmp216
	leaq	32(%rax), %rsi	#, D.28554
	movq	-120(%rbp), %rax	# insn, tmp217
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp217,
	call	validate_change	#
	movl	%eax, -128(%rbp)	# tmp218, success
.L2766:
	.loc 1 9200 0
	movl	move2add_luid(%rip), %edx	# move2add_luid, move2add_luid.1435
	movl	-132(%rbp), %eax	# regno, tmp220
	cltq
	movl	%edx, reg_set_luid(,%rax,4)	# move2add_luid.1435, reg_set_luid
	.loc 1 9201 0
	movq	-88(%rbp), %rax	# reg, tmp221
	movzbl	2(%rax), %eax	# reg_25->mode, D.28551
	movzbl	%al, %edx	# D.28551, D.28552
	movl	-132(%rbp), %eax	# regno, tmp223
	cltq
	movl	%edx, reg_mode(,%rax,4)	# D.28552, reg_mode
	.loc 1 9202 0
	movq	-80(%rbp), %rax	# src, tmp224
	movq	8(%rax), %rdx	# src_28->fld[0].rtwint, D.28553
	movl	-132(%rbp), %eax	# regno, tmp226
	cltq
	movq	%rdx, reg_offset(,%rax,8)	# D.28553, reg_offset
	.loc 1 9203 0
	jmp	.L2760	#
.L2764:
.LBE202:
	.loc 1 9216 0
	movq	-80(%rbp), %rax	# src, tmp227
	movzwl	(%rax), %eax	# src_28->code, D.28546
	cmpw	$61, %ax	#, D.28546
	jne	.L2762	#,
	.loc 1 9217 0
	movl	-132(%rbp), %eax	# regno, tmp229
	cltq
	movl	reg_set_luid(,%rax,4), %edx	# reg_set_luid, D.28547
	movq	-80(%rbp), %rax	# src, tmp230
	movl	8(%rax), %eax	# src_28->fld[0].rtuint, D.28550
	movl	%eax, %eax	# D.28550, tmp231
	movl	reg_set_luid(,%rax,4), %eax	# reg_set_luid, D.28547
	cmpl	%eax, %edx	# D.28547, D.28547
	jne	.L2762	#,
	.loc 1 9218 0
	movl	-132(%rbp), %eax	# regno, tmp233
	cltq
	movl	reg_base_reg(,%rax,4), %edx	# reg_base_reg, D.28547
	movq	-80(%rbp), %rax	# src, tmp234
	movl	8(%rax), %eax	# src_28->fld[0].rtuint, D.28550
	movl	%eax, %eax	# D.28550, tmp235
	movl	reg_base_reg(,%rax,4), %eax	# reg_base_reg, D.28547
	cmpl	%eax, %edx	# D.28547, D.28547
	jne	.L2762	#,
	.loc 1 9219 0
	movq	-88(%rbp), %rax	# reg, tmp236
	movzbl	2(%rax), %eax	# reg_25->mode, D.28551
	movzbl	%al, %eax	# D.28551, D.28547
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28551
	movq	-80(%rbp), %rax	# src, tmp238
	movl	8(%rax), %eax	# src_28->fld[0].rtuint, D.28550
	movl	%eax, %eax	# D.28550, tmp239
	movl	reg_mode(,%rax,4), %eax	# reg_mode, D.28552
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28551
	cmpb	%al, %dl	# D.28551, D.28551
	je	.L2767	#,
	.loc 1 9219 0 is_stmt 0 discriminator 1
	movq	-88(%rbp), %rax	# reg, tmp241
	movzbl	2(%rax), %eax	# reg_25->mode, D.28551
	movzbl	%al, %eax	# D.28551, D.28547
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28551
	movq	-80(%rbp), %rax	# src, tmp243
	movl	8(%rax), %eax	# src_28->fld[0].rtuint, D.28550
	movl	%eax, %eax	# D.28550, tmp244
	movl	reg_mode(,%rax,4), %eax	# reg_mode, D.28552
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28551
	cmpb	%al, %dl	# D.28551, D.28551
	ja	.L2762	#,
.L2767:
.LBB203:
	.loc 1 9222 0 is_stmt 1
	movq	-120(%rbp), %rax	# insn, tmp246
	movq	%rax, %rdi	# tmp246,
	call	next_nonnote_insn	#
	movq	%rax, -64(%rbp)	# tmp247, next
	.loc 1 9223 0
	movq	$0, -104(%rbp)	#, set
	.loc 1 9224 0
	cmpq	$0, -64(%rbp)	#, next
	je	.L2768	#,
	.loc 1 9225 0
	movq	-64(%rbp), %rax	# next, tmp248
	movzwl	(%rax), %eax	# next_87->code, D.28546
	movzwl	%ax, %eax	# D.28546, D.28547
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28548
	cmpb	$105, %al	#, D.28548
	jne	.L2769	#,
	.loc 1 9225 0 is_stmt 0 discriminator 1
	movq	-64(%rbp), %rax	# next, tmp250
	movq	32(%rax), %rax	# next_87->fld[3].rtx, D.28549
	movzwl	(%rax), %eax	# _92->code, D.28546
	cmpw	$47, %ax	#, D.28546
	jne	.L2770	#,
	.loc 1 9225 0 discriminator 3
	movq	-64(%rbp), %rax	# next, tmp251
	movq	32(%rax), %rax	# next_87->fld[3].rtx, iftmp.1437
	jmp	.L2772	#
.L2770:
	.loc 1 9225 0 discriminator 4
	movq	-64(%rbp), %rax	# next, tmp252
	movq	32(%rax), %rdx	# next_87->fld[3].rtx, D.28549
	movq	-64(%rbp), %rax	# next, tmp253
	movq	%rdx, %rsi	# D.28549,
	movq	%rax, %rdi	# tmp253,
	call	single_set_2	#
	jmp	.L2772	#
.L2769:
	.loc 1 9225 0 discriminator 2
	movl	$0, %eax	#, iftmp.1436
.L2772:
	.loc 1 9225 0 discriminator 5
	movq	%rax, -104(%rbp)	# iftmp.1436, set
.L2768:
	.loc 1 9226 0 is_stmt 1
	cmpq	$0, -104(%rbp)	#, set
	je	.L2762	#,
	.loc 1 9227 0
	movq	-104(%rbp), %rax	# set, tmp254
	movq	8(%rax), %rax	# set_6->fld[0].rtx, D.28549
	cmpq	-88(%rbp), %rax	# reg, D.28549
	jne	.L2762	#,
	.loc 1 9228 0
	movq	-104(%rbp), %rax	# set, tmp255
	movq	16(%rax), %rax	# set_6->fld[1].rtx, D.28549
	movzwl	(%rax), %eax	# _101->code, D.28546
	cmpw	$75, %ax	#, D.28546
	jne	.L2762	#,
	.loc 1 9229 0
	movq	-104(%rbp), %rax	# set, tmp256
	movq	16(%rax), %rax	# set_6->fld[1].rtx, D.28549
	movq	8(%rax), %rax	# _103->fld[0].rtx, D.28549
	cmpq	-88(%rbp), %rax	# reg, D.28549
	jne	.L2762	#,
	.loc 1 9230 0
	movq	-104(%rbp), %rax	# set, tmp257
	movq	16(%rax), %rax	# set_6->fld[1].rtx, D.28549
	movq	16(%rax), %rax	# _105->fld[1].rtx, D.28549
	movzwl	(%rax), %eax	# _106->code, D.28546
	cmpw	$54, %ax	#, D.28546
	jne	.L2762	#,
.LBB204:
	.loc 1 9232 0
	movq	-104(%rbp), %rax	# set, tmp258
	movq	16(%rax), %rax	# set_6->fld[1].rtx, D.28549
	movq	16(%rax), %rax	# _108->fld[1].rtx, tmp259
	movq	%rax, -56(%rbp)	# tmp259, src3
	.loc 1 9233 0
	movq	-56(%rbp), %rax	# src3, tmp260
	movq	8(%rax), %rax	# src3_109->fld[0].rtwint, tmp261
	movq	%rax, -48(%rbp)	# tmp261, added_offset
	.loc 1 9234 0
	movq	-80(%rbp), %rax	# src, tmp262
	movl	8(%rax), %eax	# src_28->fld[0].rtuint, D.28550
	movl	%eax, %eax	# D.28550, tmp263
	movq	reg_offset(,%rax,8), %rax	# reg_offset, tmp264
	movq	%rax, -40(%rbp)	# tmp264, base_offset
	.loc 1 9235 0
	movl	-132(%rbp), %eax	# regno, tmp266
	cltq
	movq	reg_offset(,%rax,8), %rax	# reg_offset, tmp267
	movq	%rax, -32(%rbp)	# tmp267, regno_offset
	.loc 1 9236 0
	movq	-40(%rbp), %rax	# base_offset, tmp268
	movq	-48(%rbp), %rdx	# added_offset, tmp269
	addq	%rdx, %rax	# tmp269, D.28553
	subq	-32(%rbp), %rax	# regno_offset, D.28553
	movq	%rax, %rdx	# D.28553, D.28553
	movq	-88(%rbp), %rax	# reg, tmp270
	movzbl	2(%rax), %eax	# reg_25->mode, D.28551
	movzbl	%al, %eax	# D.28551, D.28552
	movq	%rdx, %rsi	# D.28553,
	movl	%eax, %edi	# D.28552,
	call	sext_for_mode	#
	movq	%rax, %rsi	# D.28553,
	movl	$0, %edi	#,
	call	gen_rtx_CONST_INT	#
	movq	%rax, -24(%rbp)	# tmp271, new_src
	.loc 1 9240 0
	movl	$0, -136(%rbp)	#, success
	.loc 1 9242 0
	movq	const_int_rtx+512(%rip), %rax	# const_int_rtx, D.28549
	cmpq	-24(%rbp), %rax	# new_src, D.28549
	jne	.L2773	#,
	.loc 1 9245 0
	movq	-104(%rbp), %rax	# set, tmp272
	leaq	16(%rax), %rsi	#, D.28554
	movq	-88(%rbp), %rdx	# reg, tmp273
	movq	-64(%rbp), %rax	# next, tmp274
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp274,
	call	validate_change	#
	movl	%eax, -136(%rbp)	# tmp275, success
	jmp	.L2774	#
.L2773:
	.loc 1 9246 0
	movq	-24(%rbp), %rax	# new_src, tmp276
	movl	$75, %esi	#,
	movq	%rax, %rdi	# tmp276,
	call	rtx_cost	#
	movl	%eax, %ebx	#, D.28547
	.loc 1 9247 0
	movq	-56(%rbp), %rax	# src3, tmp277
	movl	$47, %esi	#,
	movq	%rax, %rdi	# tmp277,
	call	rtx_cost	#
	addl	$4, %eax	#, D.28547
	.loc 1 9246 0
	cmpl	%eax, %ebx	# D.28547, D.28547
	jge	.L2774	#,
	.loc 1 9248 0
	movq	-24(%rbp), %rdx	# new_src, tmp278
	movq	-88(%rbp), %rax	# reg, tmp279
	movq	%rdx, %rsi	# tmp278,
	movq	%rax, %rdi	# tmp279,
	call	have_add2_insn	#
	testl	%eax, %eax	# D.28547
	je	.L2774	#,
	.loc 1 9250 0
	movq	-24(%rbp), %rdx	# new_src, tmp280
	movq	-88(%rbp), %rax	# reg, tmp281
	movq	%rdx, %rsi	# tmp280,
	movq	%rax, %rdi	# tmp281,
	call	gen_add2_insn	#
	movq	%rax, %rdx	#, D.28549
	movq	-64(%rbp), %rax	# next, tmp282
	leaq	32(%rax), %rsi	#, D.28554
	movq	-64(%rbp), %rax	# next, tmp283
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp283,
	call	validate_change	#
	movl	%eax, -136(%rbp)	# tmp284, success
.L2774:
	.loc 1 9252 0
	cmpl	$0, -136(%rbp)	#, success
	je	.L2775	#,
	.loc 1 9253 0
	movq	-120(%rbp), %rax	# insn, tmp285
	movq	%rax, %rdi	# tmp285,
	call	delete_insn	#
.L2775:
	.loc 1 9254 0
	movq	-64(%rbp), %rax	# next, tmp286
	movq	%rax, -120(%rbp)	# tmp286, insn
	.loc 1 9255 0
	movq	-88(%rbp), %rax	# reg, tmp287
	movzbl	2(%rax), %eax	# reg_25->mode, D.28551
	movzbl	%al, %edx	# D.28551, D.28552
	movl	-132(%rbp), %eax	# regno, tmp289
	cltq
	movl	%edx, reg_mode(,%rax,4)	# D.28552, reg_mode
	.loc 1 9256 0
	movq	-40(%rbp), %rax	# base_offset, tmp290
	movq	-48(%rbp), %rdx	# added_offset, tmp291
	addq	%rax, %rdx	# tmp290, D.28553
	movq	-88(%rbp), %rax	# reg, tmp292
	movzbl	2(%rax), %eax	# reg_25->mode, D.28551
	movzbl	%al, %eax	# D.28551, D.28552
	movq	%rdx, %rsi	# D.28553,
	movl	%eax, %edi	# D.28552,
	call	sext_for_mode	#
	movl	-132(%rbp), %edx	# regno, tmp294
	movslq	%edx, %rdx	# tmp294, tmp293
	movq	%rax, reg_offset(,%rdx,8)	# D.28553, reg_offset
	.loc 1 9259 0
	jmp	.L2760	#
.L2762:
.LBE204:
.LBE203:
.LBE201:
	.loc 1 9265 0
	movq	-120(%rbp), %rax	# insn, tmp295
	movq	56(%rax), %rax	# insn_4->fld[6].rtx, tmp296
	movq	%rax, -112(%rbp)	# tmp296, note
	jmp	.L2776	#
.L2778:
	.loc 1 9267 0
	movq	-112(%rbp), %rax	# note, tmp297
	movzbl	2(%rax), %eax	# note_5->mode, D.28551
	cmpb	$2, %al	#, D.28551
	jne	.L2777	#,
	.loc 1 9268 0
	movq	-112(%rbp), %rax	# note, tmp298
	movq	8(%rax), %rax	# note_5->fld[0].rtx, D.28549
	movzwl	(%rax), %eax	# _140->code, D.28546
	cmpw	$61, %ax	#, D.28546
	jne	.L2777	#,
.LBB205:
	.loc 1 9271 0
	movq	-112(%rbp), %rax	# note, tmp299
	movq	8(%rax), %rax	# note_5->fld[0].rtx, D.28549
	movl	8(%rax), %eax	# _142->fld[0].rtuint, D.28550
	movl	%eax, -124(%rbp)	# D.28550, regno
	.loc 1 9272 0
	cmpl	$52, -124(%rbp)	#, regno
	jg	.L2777	#,
	.loc 1 9273 0
	movl	-124(%rbp), %eax	# regno, tmp301
	cltq
	movl	$0, reg_set_luid(,%rax,4)	#, reg_set_luid
.L2777:
.LBE205:
	.loc 1 9265 0
	movq	-112(%rbp), %rax	# note, tmp302
	movq	16(%rax), %rax	# note_5->fld[1].rtx, tmp303
	movq	%rax, -112(%rbp)	# tmp303, note
.L2776:
	.loc 1 9265 0 is_stmt 0 discriminator 1
	cmpq	$0, -112(%rbp)	#, note
	jne	.L2778	#,
	.loc 1 9276 0 is_stmt 1
	movq	-120(%rbp), %rax	# insn, tmp304
	movq	32(%rax), %rax	# insn_4->fld[3].rtx, D.28549
	movl	$0, %edx	#,
	movl	$move2add_note_store, %esi	#,
	movq	%rax, %rdi	# D.28549,
	call	note_stores	#
	.loc 1 9279 0
	movq	-120(%rbp), %rax	# insn, tmp305
	movzwl	(%rax), %eax	# insn_4->code, D.28546
	cmpw	$34, %ax	#, D.28546
	jne	.L2760	#,
	.loc 1 9281 0
	movl	$52, -140(%rbp)	#, i
	jmp	.L2779	#
.L2781:
	.loc 1 9283 0
	movl	-140(%rbp), %eax	# i, tmp307
	cltq
	movzbl	call_used_regs(%rax), %eax	# call_used_regs, D.28548
	testb	%al, %al	# D.28548
	je	.L2780	#,
	.loc 1 9285 0
	movl	-140(%rbp), %eax	# i, tmp309
	cltq
	movl	$0, reg_set_luid(,%rax,4)	#, reg_set_luid
.L2780:
	.loc 1 9281 0
	subl	$1, -140(%rbp)	#, i
.L2779:
	.loc 1 9281 0 is_stmt 0 discriminator 1
	cmpl	$0, -140(%rbp)	#, i
	jns	.L2781	#,
.L2760:
.LBE200:
	.loc 1 9144 0 is_stmt 1
	movq	-120(%rbp), %rax	# insn, tmp310
	movq	24(%rax), %rax	# insn_3->fld[2].rtx, tmp311
	movq	%rax, -120(%rbp)	# tmp311, insn
	movl	move2add_luid(%rip), %eax	# move2add_luid, move2add_luid.1438
	addl	$1, %eax	#, move2add_luid.1439
	movl	%eax, move2add_luid(%rip)	# move2add_luid.1439, move2add_luid
.L2758:
	.loc 1 9144 0 is_stmt 0 discriminator 1
	cmpq	$0, -120(%rbp)	#, insn
	jne	.L2782	#,
	.loc 1 9289 0 is_stmt 1
	addq	$152, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE78:
	.size	reload_cse_move2add, .-reload_cse_move2add
	.type	move2add_note_store, @function
move2add_note_store:
.LFB79:
	.loc 1 9299 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# dst, dst
	movq	%rsi, -80(%rbp)	# set, set
	movq	%rdx, -88(%rbp)	# data, data
	.loc 1 9300 0
	movl	$0, -64(%rbp)	#, regno
	.loc 1 9302 0
	movq	-72(%rbp), %rax	# dst, tmp207
	movzbl	2(%rax), %eax	# dst_21(D)->mode, D.28555
	movzbl	%al, %eax	# D.28555, tmp208
	movl	%eax, -56(%rbp)	# tmp208, mode
	.loc 1 9304 0
	movq	-72(%rbp), %rax	# dst, tmp209
	movzwl	(%rax), %eax	# dst_21(D)->code, D.28556
	cmpw	$63, %ax	#, D.28556
	jne	.L2784	#,
	.loc 1 9309 0
	movq	-72(%rbp), %rax	# dst, tmp210
	movzbl	2(%rax), %eax	# dst_21(D)->mode, D.28555
	.loc 1 9306 0
	movzbl	%al, %ecx	# D.28555, D.28557
	movq	-72(%rbp), %rax	# dst, tmp211
	movl	16(%rax), %edx	# dst_21(D)->fld[1].rtuint, D.28558
	.loc 1 9307 0
	movq	-72(%rbp), %rax	# dst, tmp212
	movq	8(%rax), %rax	# dst_21(D)->fld[0].rtx, D.28559
	movzbl	2(%rax), %eax	# _28->mode, D.28555
	.loc 1 9306 0
	movzbl	%al, %esi	# D.28555, D.28557
	movq	-72(%rbp), %rax	# dst, tmp213
	movq	8(%rax), %rax	# dst_21(D)->fld[0].rtx, D.28559
	movl	8(%rax), %eax	# _31->fld[0].rtuint, D.28558
	movl	%eax, %edi	# D.28558,
	call	subreg_regno_offset	#
	movl	%eax, -64(%rbp)	# tmp214, regno
	.loc 1 9310 0
	movq	-72(%rbp), %rax	# dst, tmp215
	movq	8(%rax), %rax	# dst_21(D)->fld[0].rtx, tmp216
	movq	%rax, -72(%rbp)	# tmp216, dst
.L2784:
	.loc 1 9315 0
	movq	-72(%rbp), %rax	# dst, tmp217
	movzwl	(%rax), %eax	# dst_1->code, D.28556
	cmpw	$66, %ax	#, D.28556
	jne	.L2785	#,
	.loc 1 9317 0
	movq	-72(%rbp), %rax	# dst, tmp218
	movq	8(%rax), %rax	# dst_1->fld[0].rtx, tmp219
	movq	%rax, -72(%rbp)	# tmp219, dst
	.loc 1 9318 0
	movq	-72(%rbp), %rax	# dst, tmp220
	movzwl	(%rax), %eax	# dst_36->code, D.28556
	cmpw	$97, %ax	#, D.28556
	je	.L2786	#,
	.loc 1 9318 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# dst, tmp221
	movzwl	(%rax), %eax	# dst_36->code, D.28556
	cmpw	$99, %ax	#, D.28556
	je	.L2786	#,
	.loc 1 9319 0 is_stmt 1
	movq	-72(%rbp), %rax	# dst, tmp222
	movzwl	(%rax), %eax	# dst_36->code, D.28556
	cmpw	$96, %ax	#, D.28556
	je	.L2786	#,
	.loc 1 9319 0 is_stmt 0 discriminator 1
	movq	-72(%rbp), %rax	# dst, tmp223
	movzwl	(%rax), %eax	# dst_36->code, D.28556
	cmpw	$98, %ax	#, D.28556
	jne	.L2787	#,
.L2786:
	.loc 1 9320 0 is_stmt 1
	movq	-72(%rbp), %rax	# dst, tmp224
	movq	8(%rax), %rax	# dst_36->fld[0].rtx, D.28559
	movl	8(%rax), %eax	# _41->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp225
	movl	$0, reg_set_luid(,%rax,4)	#, reg_set_luid
	.loc 1 9321 0
	jmp	.L2783	#
.L2787:
	jmp	.L2783	#
.L2785:
	.loc 1 9323 0
	movq	-72(%rbp), %rax	# dst, tmp226
	movzwl	(%rax), %eax	# dst_1->code, D.28556
	cmpw	$61, %ax	#, D.28556
	je	.L2789	#,
	.loc 1 9324 0
	jmp	.L2783	#
.L2789:
	.loc 1 9326 0
	movq	-72(%rbp), %rax	# dst, tmp227
	movl	8(%rax), %eax	# dst_1->fld[0].rtuint, D.28558
	addl	%eax, -64(%rbp)	# D.28558, regno
	.loc 1 9328 0
	cmpl	$7, -64(%rbp)	#, regno
	jbe	.L2790	#,
	.loc 1 9328 0 is_stmt 0 discriminator 1
	cmpl	$15, -64(%rbp)	#, regno
	jbe	.L2791	#,
.L2790:
	.loc 1 9328 0 discriminator 2
	cmpl	$20, -64(%rbp)	#, regno
	jbe	.L2792	#,
	.loc 1 9328 0 discriminator 1
	cmpl	$28, -64(%rbp)	#, regno
	jbe	.L2791	#,
.L2792:
	.loc 1 9328 0 discriminator 2
	cmpl	$44, -64(%rbp)	#, regno
	jbe	.L2793	#,
	.loc 1 9328 0 discriminator 1
	cmpl	$52, -64(%rbp)	#, regno
	jbe	.L2791	#,
.L2793:
	.loc 1 9328 0 discriminator 2
	cmpl	$28, -64(%rbp)	#, regno
	jbe	.L2794	#,
	.loc 1 9328 0 discriminator 1
	cmpl	$36, -64(%rbp)	#, regno
	ja	.L2794	#,
.L2791:
	movl	-56(%rbp), %eax	# mode, mode.1441
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28562
	cmpl	$5, %eax	#, D.28562
	je	.L2795	#,
	movl	-56(%rbp), %eax	# mode, mode.1442
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28562
	cmpl	$6, %eax	#, D.28562
	je	.L2795	#,
	.loc 1 9328 0 discriminator 3
	movl	$1, %eax	#, iftmp.1440
	jmp	.L2796	#
.L2795:
	.loc 1 9328 0 discriminator 2
	movl	$0, %eax	#, iftmp.1440
.L2796:
	.loc 1 9328 0 discriminator 4
	andl	$1, %eax	#, D.28561
	testb	%al, %al	# D.28561
	je	.L2797	#,
	.loc 1 9328 0 discriminator 3
	jmp	.L2798	#
.L2794:
	.loc 1 9328 0 discriminator 2
	cmpl	$18, -56(%rbp)	#, mode
	je	.L2799	#,
	.loc 1 9328 0 discriminator 5
	cmpl	$24, -56(%rbp)	#, mode
	je	.L2799	#,
	.loc 1 9328 0 discriminator 7
	movl	-56(%rbp), %eax	# mode, mode.1444
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28555
	movzbl	%al, %edx	# D.28555, D.28560
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1446
	andl	$33554432, %eax	#, D.28560
	testl	%eax, %eax	# D.28560
	je	.L2800	#,
	.loc 1 9328 0 discriminator 1
	movl	$8, %eax	#, iftmp.1445
	jmp	.L2801	#
.L2800:
	.loc 1 9328 0 discriminator 2
	movl	$4, %eax	#, iftmp.1445
.L2801:
	.loc 1 9328 0 discriminator 3
	addl	%edx, %eax	# D.28560, D.28560
	subl	$1, %eax	#, D.28560
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1448
	andl	$33554432, %edx	#, D.28560
	testl	%edx, %edx	# D.28560
	je	.L2802	#,
	.loc 1 9328 0 discriminator 1
	movl	$8, %ebx	#, iftmp.1447
	jmp	.L2803	#
.L2802:
	.loc 1 9328 0 discriminator 2
	movl	$4, %ebx	#, iftmp.1447
.L2803:
	.loc 1 9328 0 discriminator 3
	cltd
	idivl	%ebx	# iftmp.1447
	cmpl	$1, %eax	#, D.28560
	jne	.L2799	#,
	.loc 1 9328 0 discriminator 8
	movl	$1, %eax	#, iftmp.1443
	jmp	.L2804	#
.L2799:
	.loc 1 9328 0 discriminator 6
	movl	$0, %eax	#, iftmp.1443
.L2804:
	.loc 1 9328 0 discriminator 9
	andl	$1, %eax	#, D.28561
	testb	%al, %al	# D.28561
	je	.L2797	#,
.L2798:
	.loc 1 9328 0 discriminator 4
	movq	-80(%rbp), %rax	# set, tmp233
	movzwl	(%rax), %eax	# set_70(D)->code, D.28556
	cmpw	$47, %ax	#, D.28556
	jne	.L2797	#,
	.loc 1 9329 0 is_stmt 1
	movq	-80(%rbp), %rax	# set, tmp234
	movq	8(%rax), %rax	# set_70(D)->fld[0].rtx, D.28559
	movzwl	(%rax), %eax	# _72->code, D.28556
	cmpw	$133, %ax	#, D.28556
	je	.L2797	#,
	.loc 1 9330 0
	movq	-80(%rbp), %rax	# set, tmp235
	movq	8(%rax), %rax	# set_70(D)->fld[0].rtx, D.28559
	movzwl	(%rax), %eax	# _74->code, D.28556
	cmpw	$132, %ax	#, D.28556
	je	.L2797	#,
	.loc 1 9331 0
	movq	-80(%rbp), %rax	# set, tmp236
	movq	8(%rax), %rax	# set_70(D)->fld[0].rtx, D.28559
	movzwl	(%rax), %eax	# _76->code, D.28556
	cmpw	$64, %ax	#, D.28556
	je	.L2797	#,
.LBB206:
	.loc 1 9333 0
	movq	-80(%rbp), %rax	# set, tmp237
	movq	16(%rax), %rax	# set_70(D)->fld[1].rtx, tmp238
	movq	%rax, -24(%rbp)	# tmp238, src
	.loc 1 9339 0
	movq	-72(%rbp), %rax	# dst, tmp239
	movzbl	2(%rax), %eax	# dst_1->mode, D.28555
	movzbl	%al, %eax	# D.28555, tmp240
	movl	%eax, -52(%rbp)	# tmp240, dst_mode
	.loc 1 9341 0
	movq	-24(%rbp), %rax	# src, tmp241
	movzwl	(%rax), %eax	# src_78->code, D.28556
	movzwl	%ax, %eax	# D.28556, D.28558
	cmpl	$61, %eax	#, D.28558
	je	.L2806	#,
	cmpl	$75, %eax	#, D.28558
	je	.L2807	#,
	cmpl	$54, %eax	#, D.28558
	je	.L2808	#,
	jmp	.L2805	#
.L2807:
	.loc 1 9344 0
	movq	-24(%rbp), %rax	# src, tmp242
	movq	8(%rax), %rax	# src_78->fld[0].rtx, D.28559
	movzwl	(%rax), %eax	# _83->code, D.28556
	cmpw	$61, %ax	#, D.28556
	jne	.L2809	#,
	.loc 1 9346 0
	movq	-24(%rbp), %rax	# src, tmp243
	movq	8(%rax), %rax	# src_78->fld[0].rtx, tmp244
	movq	%rax, -40(%rbp)	# tmp244, base_reg
	.loc 1 9348 0
	movq	-24(%rbp), %rax	# src, tmp245
	movq	16(%rax), %rax	# src_78->fld[1].rtx, D.28559
	movzwl	(%rax), %eax	# _86->code, D.28556
	cmpw	$54, %ax	#, D.28556
	jne	.L2810	#,
	.loc 1 9349 0
	movq	-24(%rbp), %rax	# src, tmp246
	movq	16(%rax), %rax	# src_78->fld[1].rtx, D.28559
	movq	8(%rax), %rax	# _88->fld[0].rtwint, tmp247
	movq	%rax, -32(%rbp)	# tmp247, offset
	jmp	.L2811	#
.L2810:
	.loc 1 9350 0
	movq	-24(%rbp), %rax	# src, tmp248
	movq	16(%rax), %rax	# src_78->fld[1].rtx, D.28559
	movzwl	(%rax), %eax	# _90->code, D.28556
	cmpw	$61, %ax	#, D.28556
	jne	.L2805	#,
	.loc 1 9351 0
	movq	-24(%rbp), %rax	# src, tmp249
	movq	16(%rax), %rax	# src_78->fld[1].rtx, D.28559
	movl	8(%rax), %eax	# _92->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp250
	movl	reg_set_luid(,%rax,4), %edx	# reg_set_luid, D.28560
	.loc 1 9352 0
	movl	move2add_last_label_luid(%rip), %eax	# move2add_last_label_luid, move2add_last_label_luid.1449
	.loc 1 9351 0
	cmpl	%eax, %edx	# move2add_last_label_luid.1449, D.28560
	jle	.L2805	#,
	.loc 1 9353 0
	movl	-52(%rbp), %eax	# dst_mode, dst_mode.1450
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28555
	movq	-24(%rbp), %rax	# src, tmp252
	movq	16(%rax), %rax	# src_78->fld[1].rtx, D.28559
	movl	8(%rax), %eax	# _98->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp253
	movl	reg_mode(,%rax,4), %eax	# reg_mode, D.28557
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28555
	cmpb	%al, %dl	# D.28555, D.28555
	je	.L2812	#,
	.loc 1 9353 0 is_stmt 0 discriminator 1
	movl	-52(%rbp), %eax	# dst_mode, dst_mode.1451
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28555
	movq	-24(%rbp), %rax	# src, tmp256
	movq	16(%rax), %rax	# src_78->fld[1].rtx, D.28559
	movl	8(%rax), %eax	# _105->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp257
	movl	reg_mode(,%rax,4), %eax	# reg_mode, D.28557
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28555
	cmpb	%al, %dl	# D.28555, D.28555
	ja	.L2805	#,
.L2812:
	.loc 1 9356 0 is_stmt 1
	movq	-24(%rbp), %rax	# src, tmp259
	movq	16(%rax), %rax	# src_78->fld[1].rtx, D.28559
	movl	8(%rax), %eax	# _110->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp260
	movl	reg_base_reg(,%rax,4), %eax	# reg_base_reg, D.28560
	testl	%eax, %eax	# D.28560
	jns	.L2813	#,
	.loc 1 9357 0
	movq	-24(%rbp), %rax	# src, tmp261
	movq	16(%rax), %rax	# src_78->fld[1].rtx, D.28559
	movl	8(%rax), %eax	# _113->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp262
	movq	reg_offset(,%rax,8), %rax	# reg_offset, tmp263
	movq	%rax, -32(%rbp)	# tmp263, offset
	jmp	.L2811	#
.L2813:
	.loc 1 9360 0
	movq	-40(%rbp), %rax	# base_reg, tmp264
	movl	8(%rax), %eax	# base_reg_85->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp265
	movl	reg_set_luid(,%rax,4), %edx	# reg_set_luid, D.28560
	.loc 1 9361 0
	movl	move2add_last_label_luid(%rip), %eax	# move2add_last_label_luid, move2add_last_label_luid.1452
	.loc 1 9360 0
	cmpl	%eax, %edx	# move2add_last_label_luid.1452, D.28560
	jle	.L2805	#,
	.loc 1 9362 0
	movl	-52(%rbp), %eax	# dst_mode, dst_mode.1453
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28555
	movq	-24(%rbp), %rax	# src, tmp267
	movq	16(%rax), %rax	# src_78->fld[1].rtx, D.28559
	movl	8(%rax), %eax	# _121->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp268
	movl	reg_mode(,%rax,4), %eax	# reg_mode, D.28557
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28555
	cmpb	%al, %dl	# D.28555, D.28555
	je	.L2814	#,
	.loc 1 9362 0 is_stmt 0 discriminator 1
	movl	-52(%rbp), %eax	# dst_mode, dst_mode.1454
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28555
	movq	-24(%rbp), %rax	# src, tmp271
	movq	16(%rax), %rax	# src_78->fld[1].rtx, D.28559
	movl	8(%rax), %eax	# _128->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp272
	movl	reg_mode(,%rax,4), %eax	# reg_mode, D.28557
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28555
	cmpb	%al, %dl	# D.28555, D.28555
	ja	.L2805	#,
.L2814:
	.loc 1 9364 0 is_stmt 1
	movq	-40(%rbp), %rax	# base_reg, tmp274
	movl	8(%rax), %eax	# base_reg_85->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp275
	movl	reg_base_reg(,%rax,4), %eax	# reg_base_reg, D.28560
	testl	%eax, %eax	# D.28560
	jns	.L2805	#,
	.loc 1 9366 0
	movq	-40(%rbp), %rax	# base_reg, tmp276
	movl	8(%rax), %eax	# base_reg_85->fld[0].rtuint, D.28558
	movl	%eax, %eax	# D.28558, tmp277
	movq	reg_offset(,%rax,8), %rax	# reg_offset, tmp278
	movq	%rax, -32(%rbp)	# tmp278, offset
	.loc 1 9367 0
	movq	-24(%rbp), %rax	# src, tmp279
	movq	16(%rax), %rax	# src_78->fld[1].rtx, tmp280
	movq	%rax, -40(%rbp)	# tmp280, base_reg
	.loc 1 9375 0
	jmp	.L2815	#
.L2811:
	jmp	.L2815	#
.L2809:
	.loc 1 9378 0
	jmp	.L2805	#
.L2806:
	.loc 1 9381 0
	movq	-24(%rbp), %rax	# src, tmp281
	movq	%rax, -40(%rbp)	# tmp281, base_reg
	.loc 1 9382 0
	movq	$0, -32(%rbp)	#, offset
	.loc 1 9383 0
	jmp	.L2815	#
.L2808:
	.loc 1 9387 0
	movl	-64(%rbp), %eax	# regno, tmp282
	movl	$-1, reg_base_reg(,%rax,4)	#, reg_base_reg
	.loc 1 9388 0
	movq	-80(%rbp), %rax	# set, tmp283
	movq	16(%rax), %rax	# set_70(D)->fld[1].rtx, D.28559
	movq	8(%rax), %rdx	# _140->fld[0].rtwint, D.28563
	movl	-64(%rbp), %eax	# regno, tmp284
	movq	%rdx, reg_offset(,%rax,8)	# D.28563, reg_offset
	.loc 1 9390 0
	movl	move2add_last_label_luid(%rip), %eax	# move2add_last_label_luid, move2add_last_label_luid.1455
	leal	1(%rax), %edx	#, D.28560
	movl	-64(%rbp), %eax	# regno, tmp285
	movl	%edx, reg_set_luid(,%rax,4)	# D.28560, reg_set_luid
	.loc 1 9391 0
	movl	-64(%rbp), %eax	# regno, tmp286
	movl	-56(%rbp), %edx	# mode, tmp287
	movl	%edx, reg_mode(,%rax,4)	# tmp287, reg_mode
	.loc 1 9392 0
	jmp	.L2783	#
.L2805:
	.loc 1 9397 0
	movl	-64(%rbp), %eax	# regno, tmp288
	movl	$0, reg_set_luid(,%rax,4)	#, reg_set_luid
	.loc 1 9398 0
	jmp	.L2783	#
.L2815:
	.loc 1 9401 0
	movq	-40(%rbp), %rax	# base_reg, tmp289
	movl	8(%rax), %eax	# base_reg_5->fld[0].rtuint, D.28558
	movl	%eax, -48(%rbp)	# D.28558, base_regno
	.loc 1 9405 0
	movl	-48(%rbp), %eax	# base_regno, tmp291
	cltq
	movl	reg_set_luid(,%rax,4), %edx	# reg_set_luid, D.28560
	movl	move2add_last_label_luid(%rip), %eax	# move2add_last_label_luid, move2add_last_label_luid.1456
	cmpl	%eax, %edx	# move2add_last_label_luid.1456, D.28560
	jg	.L2816	#,
	.loc 1 9407 0
	movl	-48(%rbp), %eax	# base_regno, tmp293
	cltq
	movl	-48(%rbp), %edx	# base_regno, tmp294
	movl	%edx, reg_base_reg(,%rax,4)	# tmp294, reg_base_reg
	.loc 1 9408 0
	movl	-48(%rbp), %eax	# base_regno, tmp296
	cltq
	movq	$0, reg_offset(,%rax,8)	#, reg_offset
	.loc 1 9409 0
	movl	move2add_luid(%rip), %edx	# move2add_luid, move2add_luid.1457
	movl	-48(%rbp), %eax	# base_regno, tmp298
	cltq
	movl	%edx, reg_set_luid(,%rax,4)	# move2add_luid.1457, reg_set_luid
	.loc 1 9410 0
	movl	-48(%rbp), %eax	# base_regno, tmp300
	cltq
	movl	-56(%rbp), %edx	# mode, tmp301
	movl	%edx, reg_mode(,%rax,4)	# tmp301, reg_mode
	jmp	.L2817	#
.L2816:
	.loc 1 9412 0
	movl	-52(%rbp), %eax	# dst_mode, dst_mode.1458
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28555
	movl	-48(%rbp), %eax	# base_regno, tmp304
	cltq
	movl	reg_mode(,%rax,4), %eax	# reg_mode, D.28557
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28555
	cmpb	%al, %dl	# D.28555, D.28555
	je	.L2817	#,
	.loc 1 9412 0 is_stmt 0 discriminator 1
	movl	-52(%rbp), %eax	# dst_mode, dst_mode.1459
	cltq
	movzbl	mode_size(%rax), %edx	# mode_size, D.28555
	movl	-48(%rbp), %eax	# base_regno, tmp308
	cltq
	movl	reg_mode(,%rax,4), %eax	# reg_mode, D.28557
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28555
	cmpb	%al, %dl	# D.28555, D.28555
	jbe	.L2817	#,
	.loc 1 9414 0 is_stmt 1
	jmp	.L2805	#
.L2817:
	.loc 1 9416 0
	movl	-64(%rbp), %eax	# regno, tmp310
	movl	-56(%rbp), %edx	# mode, tmp311
	movl	%edx, reg_mode(,%rax,4)	# tmp311, reg_mode
	.loc 1 9419 0
	movl	-48(%rbp), %eax	# base_regno, tmp313
	cltq
	movl	reg_set_luid(,%rax,4), %edx	# reg_set_luid, D.28560
	movl	-64(%rbp), %eax	# regno, tmp314
	movl	%edx, reg_set_luid(,%rax,4)	# D.28560, reg_set_luid
	.loc 1 9420 0
	movl	-48(%rbp), %eax	# base_regno, tmp316
	cltq
	movl	reg_base_reg(,%rax,4), %edx	# reg_base_reg, D.28560
	movl	-64(%rbp), %eax	# regno, tmp317
	movl	%edx, reg_base_reg(,%rax,4)	# D.28560, reg_base_reg
	.loc 1 9425 0
	movl	-48(%rbp), %eax	# base_regno, tmp319
	cltq
	movq	reg_offset(,%rax,8), %rdx	# reg_offset, D.28563
	.loc 1 9423 0
	movq	-32(%rbp), %rax	# offset, tmp320
	addq	%rax, %rdx	# tmp320, D.28563
	movl	-52(%rbp), %eax	# dst_mode, tmp321
	movq	%rdx, %rsi	# D.28563,
	movl	%eax, %edi	# tmp321,
	call	sext_for_mode	#
	movl	-64(%rbp), %edx	# regno, tmp322
	movq	%rax, reg_offset(,%rdx,8)	# D.28563, reg_offset
.LBE206:
	.loc 1 9332 0
	jmp	.L2783	#
.L2797:
.LBB207:
	.loc 1 9429 0
	cmpl	$7, -64(%rbp)	#, regno
	jbe	.L2818	#,
	.loc 1 9429 0 is_stmt 0 discriminator 1
	cmpl	$15, -64(%rbp)	#, regno
	jbe	.L2819	#,
.L2818:
	.loc 1 9429 0 discriminator 2
	cmpl	$20, -64(%rbp)	#, regno
	jbe	.L2820	#,
	.loc 1 9429 0 discriminator 1
	cmpl	$28, -64(%rbp)	#, regno
	jbe	.L2819	#,
.L2820:
	.loc 1 9429 0 discriminator 2
	cmpl	$44, -64(%rbp)	#, regno
	jbe	.L2821	#,
	.loc 1 9429 0 discriminator 1
	cmpl	$52, -64(%rbp)	#, regno
	jbe	.L2819	#,
.L2821:
	.loc 1 9429 0 discriminator 2
	cmpl	$28, -64(%rbp)	#, regno
	jbe	.L2822	#,
	.loc 1 9429 0 discriminator 1
	cmpl	$36, -64(%rbp)	#, regno
	ja	.L2822	#,
.L2819:
	movl	-56(%rbp), %eax	# mode, mode.1462
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28562
	cmpl	$5, %eax	#, D.28562
	je	.L2823	#,
	.loc 1 9429 0 discriminator 4
	movl	-56(%rbp), %eax	# mode, mode.1463
	cltq
	movl	mode_class(,%rax,4), %eax	# mode_class, D.28562
	cmpl	$6, %eax	#, D.28562
	jne	.L2824	#,
.L2823:
	.loc 1 9429 0 discriminator 3
	movl	$2, %eax	#, iftmp.1461
	jmp	.L2826	#
.L2824:
	.loc 1 9429 0 discriminator 1
	movl	$1, %eax	#, iftmp.1461
	jmp	.L2826	#
.L2822:
	.loc 1 9429 0 discriminator 2
	cmpl	$18, -56(%rbp)	#, mode
	jne	.L2827	#,
	.loc 1 9429 0 discriminator 7
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1466
	andl	$33554432, %eax	#, D.28560
	testl	%eax, %eax	# D.28560
	je	.L2828	#,
	.loc 1 9429 0 discriminator 9
	movl	$2, %eax	#, iftmp.1465
	jmp	.L2826	#
.L2828:
	.loc 1 9429 0 discriminator 10
	movl	$3, %eax	#, iftmp.1465
	jmp	.L2826	#
.L2827:
	.loc 1 9429 0 discriminator 8
	cmpl	$24, -56(%rbp)	#, mode
	jne	.L2831	#,
	.loc 1 9429 0 discriminator 11
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1469
	andl	$33554432, %eax	#, D.28560
	testl	%eax, %eax	# D.28560
	je	.L2832	#,
	.loc 1 9429 0 discriminator 13
	movl	$4, %eax	#, iftmp.1468
	jmp	.L2826	#
.L2832:
	.loc 1 9429 0 discriminator 14
	movl	$6, %eax	#, iftmp.1468
	jmp	.L2826	#
.L2831:
	.loc 1 9429 0 discriminator 12
	movl	-56(%rbp), %eax	# mode, mode.1470
	cltq
	movzbl	mode_size(%rax), %eax	# mode_size, D.28555
	movzbl	%al, %edx	# D.28555, D.28560
	movl	target_flags(%rip), %eax	# target_flags, target_flags.1472
	andl	$33554432, %eax	#, D.28560
	testl	%eax, %eax	# D.28560
	je	.L2835	#,
	.loc 1 9429 0 discriminator 1
	movl	$8, %eax	#, iftmp.1471
	jmp	.L2836	#
.L2835:
	.loc 1 9429 0 discriminator 2
	movl	$4, %eax	#, iftmp.1471
.L2836:
	.loc 1 9429 0 discriminator 3
	addl	%edx, %eax	# D.28560, D.28560
	subl	$1, %eax	#, D.28560
	movl	target_flags(%rip), %edx	# target_flags, target_flags.1474
	andl	$33554432, %edx	#, D.28560
	testl	%edx, %edx	# D.28560
	je	.L2837	#,
	.loc 1 9429 0 discriminator 1
	movl	$8, %ecx	#, iftmp.1473
	jmp	.L2838	#
.L2837:
	.loc 1 9429 0 discriminator 2
	movl	$4, %ecx	#, iftmp.1473
.L2838:
	.loc 1 9429 0 discriminator 3
	cltd
	idivl	%ecx	# iftmp.1473
.L2826:
	.loc 1 9429 0 discriminator 6
	movl	-64(%rbp), %edx	# regno, tmp331
	addl	%edx, %eax	# tmp331, tmp330
	movl	%eax, -44(%rbp)	# tmp330, endregno
	.loc 1 9431 0 is_stmt 1 discriminator 6
	movl	-64(%rbp), %eax	# regno, tmp332
	movl	%eax, -60(%rbp)	# tmp332, i
	jmp	.L2839	#
.L2840:
	.loc 1 9433 0 discriminator 2
	movl	-60(%rbp), %eax	# i, tmp333
	movl	$0, reg_set_luid(,%rax,4)	#, reg_set_luid
	.loc 1 9431 0 discriminator 2
	addl	$1, -60(%rbp)	#, i
.L2839:
	.loc 1 9431 0 is_stmt 0 discriminator 1
	movl	-60(%rbp), %eax	# i, tmp334
	cmpl	-44(%rbp), %eax	# endregno, tmp334
	jb	.L2840	#,
.L2783:
.LBE207:
	.loc 1 9435 0 is_stmt 1
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE79:
	.size	move2add_note_store, .-move2add_note_store
	.type	copy_eh_notes, @function
copy_eh_notes:
.LFB80:
	.loc 1 9472 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# insn, insn
	movq	%rsi, -32(%rbp)	# x, x
	.loc 1 9473 0
	movq	-24(%rbp), %rax	# insn, tmp64
	movl	$0, %edx	#,
	movl	$23, %esi	#,
	movq	%rax, %rdi	# tmp64,
	call	find_reg_note	#
	movq	%rax, -8(%rbp)	# tmp65, eh_note
	.loc 1 9474 0
	cmpq	$0, -8(%rbp)	#, eh_note
	je	.L2841	#,
	.loc 1 9476 0
	jmp	.L2843	#
.L2845:
	.loc 1 9478 0
	movq	-32(%rbp), %rax	# x, tmp66
	movq	32(%rax), %rax	# x_1->fld[3].rtx, D.28564
	movq	%rax, %rdi	# D.28564,
	call	may_trap_p	#
	testl	%eax, %eax	# D.28565
	je	.L2844	#,
	.loc 1 9480 0
	movq	-32(%rbp), %rax	# x, tmp67
	movq	56(%rax), %rdx	# x_1->fld[6].rtx, D.28564
	movq	-8(%rbp), %rax	# eh_note, tmp68
	movq	8(%rax), %rax	# eh_note_3->fld[0].rtx, D.28564
	movq	%rdx, %rcx	# D.28564,
	movq	%rax, %rdx	# D.28564,
	movl	$23, %esi	#,
	movl	$3, %edi	#,
	call	gen_rtx_fmt_ee	#
	movq	-32(%rbp), %rdx	# x, tmp69
	movq	%rax, 56(%rdx)	# D.28564, x_1->fld[6].rtx
.L2844:
	.loc 1 9476 0
	movq	-32(%rbp), %rax	# x, tmp70
	movq	24(%rax), %rax	# x_1->fld[2].rtx, tmp71
	movq	%rax, -32(%rbp)	# tmp71, x
.L2843:
	.loc 1 9476 0 is_stmt 0 discriminator 1
	cmpq	$0, -32(%rbp)	#, x
	jne	.L2845	#,
.L2841:
	.loc 1 9484 0 is_stmt 1
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE80:
	.size	copy_eh_notes, .-copy_eh_notes
	.globl	fixup_abnormal_edges
	.type	fixup_abnormal_edges, @function
fixup_abnormal_edges:
.LFB81:
	.loc 1 9494 0
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	.loc 1 9496 0
	movb	$0, -53(%rbp)	#, inserted
	.loc 1 9498 0
	movl	$0, -52(%rbp)	#, i
	jmp	.L2847	#
.L2866:
.LBB208:
	.loc 1 9500 0
	movq	basic_block_info(%rip), %rax	# basic_block_info, basic_block_info.1475
	movl	-52(%rbp), %edx	# i, tmp86
	movslq	%edx, %rdx	# tmp86, tmp85
	addq	$4, %rdx	#, tmp87
	movq	(%rax,%rdx,8), %rax	# basic_block_info.1475_11->data.bb, tmp88
	movq	%rax, -32(%rbp)	# tmp88, bb
	.loc 1 9505 0
	movq	-32(%rbp), %rax	# bb, tmp89
	movq	40(%rax), %rax	# bb_12->succ, tmp90
	movq	%rax, -48(%rbp)	# tmp90, e
	jmp	.L2848	#
.L2852:
	.loc 1 9507 0
	movq	-48(%rbp), %rax	# e, tmp91
	movl	48(%rax), %eax	# e_4->flags, D.28566
	andl	$4, %eax	#, D.28566
	testl	%eax, %eax	# D.28566
	je	.L2849	#,
	.loc 1 9508 0
	jmp	.L2850	#
.L2849:
	.loc 1 9509 0
	movq	-48(%rbp), %rax	# e, tmp92
	movl	48(%rax), %eax	# e_4->flags, D.28566
	andl	$10, %eax	#, D.28566
	cmpl	$10, %eax	#, D.28566
	jne	.L2851	#,
	.loc 1 9511 0
	jmp	.L2850	#
.L2851:
	.loc 1 9505 0
	movq	-48(%rbp), %rax	# e, tmp93
	movq	8(%rax), %rax	# e_4->succ_next, tmp94
	movq	%rax, -48(%rbp)	# tmp94, e
.L2848:
	.loc 1 9505 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, e
	jne	.L2852	#,
.L2850:
	.loc 1 9513 0 is_stmt 1
	cmpq	$0, -48(%rbp)	#, e
	je	.L2853	#,
	.loc 1 9513 0 is_stmt 0 discriminator 1
	movq	-32(%rbp), %rax	# bb, tmp95
	movq	8(%rax), %rax	# bb_12->end, D.28567
	movzwl	(%rax), %eax	# _19->code, D.28568
	cmpw	$34, %ax	#, D.28568
	je	.L2853	#,
	movq	-32(%rbp), %rax	# bb, tmp96
	movq	8(%rax), %rax	# bb_12->end, D.28567
	movq	%rax, %rdi	# D.28567,
	call	can_throw_internal	#
	xorl	$1, %eax	#, D.28569
	testb	%al, %al	# D.28569
	je	.L2853	#,
.LBB209:
	.loc 1 9515 0 is_stmt 1
	movq	-32(%rbp), %rax	# bb, tmp97
	movq	8(%rax), %rax	# bb_12->end, tmp98
	movq	%rax, -40(%rbp)	# tmp98, insn
	movq	-32(%rbp), %rax	# bb, tmp99
	movq	8(%rax), %rax	# bb_12->end, D.28567
	movq	24(%rax), %rax	# _25->fld[2].rtx, tmp100
	movq	%rax, -24(%rbp)	# tmp100, stop
	.loc 1 9517 0
	movq	-32(%rbp), %rax	# bb, tmp101
	movq	40(%rax), %rax	# bb_12->succ, tmp102
	movq	%rax, -48(%rbp)	# tmp102, e
	jmp	.L2854	#
.L2857:
	.loc 1 9518 0
	movq	-48(%rbp), %rax	# e, tmp103
	movl	48(%rax), %eax	# e_5->flags, D.28566
	andl	$1, %eax	#, D.28566
	testl	%eax, %eax	# D.28566
	je	.L2855	#,
	.loc 1 9519 0
	jmp	.L2856	#
.L2855:
	.loc 1 9517 0
	movq	-48(%rbp), %rax	# e, tmp104
	movq	8(%rax), %rax	# e_5->succ_next, tmp105
	movq	%rax, -48(%rbp)	# tmp105, e
.L2854:
	.loc 1 9517 0 is_stmt 0 discriminator 1
	cmpq	$0, -48(%rbp)	#, e
	jne	.L2857	#,
.L2856:
	.loc 1 9522 0 is_stmt 1
	jmp	.L2858	#
.L2861:
	.loc 1 9525 0
	movq	-40(%rbp), %rax	# insn, tmp106
	movq	16(%rax), %rax	# insn_6->fld[1].rtx, tmp107
	movq	%rax, -40(%rbp)	# tmp107, insn
.L2858:
	.loc 1 9522 0 discriminator 1
	movq	-40(%rbp), %rax	# insn, tmp108
	movzwl	(%rax), %eax	# insn_6->code, D.28568
	cmpw	$32, %ax	#, D.28568
	je	.L2859	#,
	.loc 1 9522 0 is_stmt 0 discriminator 2
	movq	-40(%rbp), %rax	# insn, tmp109
	movzwl	(%rax), %eax	# insn_6->code, D.28568
	cmpw	$37, %ax	#, D.28568
	jne	.L2860	#,
.L2859:
	.loc 1 9523 0 is_stmt 1
	movq	-40(%rbp), %rax	# insn, tmp110
	movq	%rax, %rdi	# tmp110,
	call	can_throw_internal	#
	xorl	$1, %eax	#, D.28569
	testb	%al, %al	# D.28569
	je	.L2860	#,
	.loc 1 9524 0
	movq	-32(%rbp), %rax	# bb, tmp111
	movq	(%rax), %rax	# bb_12->head, D.28567
	cmpq	-40(%rbp), %rax	# insn, D.28567
	jne	.L2861	#,
.L2860:
	.loc 1 9526 0
	movq	-40(%rbp), %rax	# insn, tmp112
	movzwl	(%rax), %eax	# insn_6->code, D.28568
	cmpw	$34, %ax	#, D.28568
	je	.L2862	#,
	.loc 1 9526 0 is_stmt 0 discriminator 1
	movq	-40(%rbp), %rax	# insn, tmp113
	movq	%rax, %rdi	# tmp113,
	call	can_throw_internal	#
	xorl	$1, %eax	#, D.28569
	testb	%al, %al	# D.28569
	je	.L2862	#,
	.loc 1 9527 0 is_stmt 1
	movl	$__FUNCTION__.16436, %edx	#,
	movl	$9527, %esi	#,
	movl	$.LC1, %edi	#,
	call	fancy_abort	#
.L2862:
	.loc 1 9528 0
	movq	-32(%rbp), %rax	# bb, tmp114
	movq	-40(%rbp), %rdx	# insn, tmp115
	movq	%rdx, 8(%rax)	# tmp115, bb_12->end
	.loc 1 9529 0
	movb	$1, -53(%rbp)	#, inserted
	.loc 1 9530 0
	movq	-40(%rbp), %rax	# insn, tmp116
	movq	24(%rax), %rax	# insn_6->fld[2].rtx, tmp117
	movq	%rax, -40(%rbp)	# tmp117, insn
	.loc 1 9531 0
	jmp	.L2863	#
.L2865:
	.loc 1 9533 0
	movq	-40(%rbp), %rax	# insn, tmp118
	movq	24(%rax), %rax	# insn_7->fld[2].rtx, tmp119
	movq	%rax, -16(%rbp)	# tmp119, next
	.loc 1 9534 0
	movq	-40(%rbp), %rax	# insn, tmp120
	movzwl	(%rax), %eax	# insn_7->code, D.28568
	movzwl	%ax, %eax	# D.28568, D.28566
	cltq
	movzbl	rtx_class(%rax), %eax	# rtx_class, D.28570
	cmpb	$105, %al	#, D.28570
	jne	.L2864	#,
.LBB210:
	.loc 1 9538 0
	movq	-40(%rbp), %rax	# insn, tmp122
	movq	%rax, %rdi	# tmp122,
	call	delete_insn	#
	.loc 1 9541 0
	movq	-40(%rbp), %rax	# insn, tmp123
	movzbl	3(%rax), %edx	# insn_7->volatil, tmp126
	andl	$-9, %edx	#, tmp127
	movb	%dl, 3(%rax)	# tmp127, insn_7->volatil
	.loc 1 9547 0
	movq	-40(%rbp), %rax	# insn, tmp128
	movq	%rax, %rsi	# tmp128,
	movl	$1, %edi	#,
	movl	$0, %eax	#,
	call	gen_rtvec	#
	movq	%rax, %rdx	# D.28571,
	movl	$0, %esi	#,
	movl	$24, %edi	#,
	call	gen_rtx_fmt_E	#
	movq	%rax, -8(%rbp)	# tmp129, seq
	.loc 1 9548 0
	movq	-48(%rbp), %rdx	# e, tmp130
	movq	-8(%rbp), %rax	# seq, tmp131
	movq	%rdx, %rsi	# tmp130,
	movq	%rax, %rdi	# tmp131,
	call	insert_insn_on_edge	#
.L2864:
.LBE210:
	.loc 1 9550 0
	movq	-16(%rbp), %rax	# next, tmp132
	movq	%rax, -40(%rbp)	# tmp132, insn
.L2863:
	.loc 1 9531 0 discriminator 1
	cmpq	$0, -40(%rbp)	#, insn
	je	.L2853	#,
	.loc 1 9531 0 is_stmt 0 discriminator 2
	movq	-40(%rbp), %rax	# insn, tmp133
	cmpq	-24(%rbp), %rax	# stop, tmp133
	jne	.L2865	#,
.L2853:
.LBE209:
.LBE208:
	.loc 1 9498 0 is_stmt 1
	addl	$1, -52(%rbp)	#, i
.L2847:
	.loc 1 9498 0 is_stmt 0 discriminator 1
	movl	n_basic_blocks(%rip), %eax	# n_basic_blocks, n_basic_blocks.1476
	cmpl	%eax, -52(%rbp)	# n_basic_blocks.1476, i
	jl	.L2866	#,
	.loc 1 9554 0 is_stmt 1
	cmpb	$0, -53(%rbp)	#, inserted
	je	.L2846	#,
	.loc 1 9555 0
	call	commit_edge_insertions	#
.L2846:
	.loc 1 9556 0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE81:
	.size	fixup_abnormal_edges, .-fixup_abnormal_edges
	.section	.rodata
	.align 16
	.type	__FUNCTION__.14287, @object
	.size	__FUNCTION__.14287, 23
__FUNCTION__.14287:
	.string	"compute_use_by_pseudos"
	.align 16
	.type	__FUNCTION__.14311, @object
	.size	__FUNCTION__.14311, 30
__FUNCTION__.14311:
	.string	"replace_pseudos_in_call_usage"
	.type	__FUNCTION__.14398, @object
	.size	__FUNCTION__.14398, 7
__FUNCTION__.14398:
	.string	"reload"
	.local	verbose_warned.14416
	.comm	verbose_warned.14416,4,4
	.type	__FUNCTION__.14552, @object
	.size	__FUNCTION__.14552, 13
__FUNCTION__.14552:
	.string	"count_pseudo"
	.type	__FUNCTION__.14677, @object
	.size	__FUNCTION__.14677, 9
__FUNCTION__.14677:
	.string	"find_reg"
.LC17:
	.string	"NO_REGS"
.LC18:
	.string	"AREG"
.LC19:
	.string	"DREG"
.LC20:
	.string	"CREG"
.LC21:
	.string	"BREG"
.LC22:
	.string	"SIREG"
.LC23:
	.string	"DIREG"
.LC24:
	.string	"AD_REGS"
.LC25:
	.string	"Q_REGS"
.LC26:
	.string	"NON_Q_REGS"
.LC27:
	.string	"INDEX_REGS"
.LC28:
	.string	"LEGACY_REGS"
.LC29:
	.string	"GENERAL_REGS"
.LC30:
	.string	"FP_TOP_REG"
.LC31:
	.string	"FP_SECOND_REG"
.LC32:
	.string	"FLOAT_REGS"
.LC33:
	.string	"SSE_REGS"
.LC34:
	.string	"MMX_REGS"
.LC35:
	.string	"FP_TOP_SSE_REGS"
.LC36:
	.string	"FP_SECOND_SSE_REGS"
.LC37:
	.string	"FLOAT_SSE_REGS"
.LC38:
	.string	"FLOAT_INT_REGS"
.LC39:
	.string	"INT_SSE_REGS"
.LC40:
	.string	"FLOAT_INT_SSE_REGS"
.LC41:
	.string	"ALL_REGS"
	.align 32
	.type	reg_class_names.14714, @object
	.size	reg_class_names.14714, 200
reg_class_names.14714:
	.quad	.LC17
	.quad	.LC18
	.quad	.LC19
	.quad	.LC20
	.quad	.LC21
	.quad	.LC22
	.quad	.LC23
	.quad	.LC24
	.quad	.LC25
	.quad	.LC26
	.quad	.LC27
	.quad	.LC28
	.quad	.LC29
	.quad	.LC30
	.quad	.LC31
	.quad	.LC32
	.quad	.LC33
	.quad	.LC34
	.quad	.LC35
	.quad	.LC36
	.quad	.LC37
	.quad	.LC38
	.quad	.LC39
	.quad	.LC40
	.quad	.LC41
	.type	__FUNCTION__.14715, @object
	.size	__FUNCTION__.14715, 14
__FUNCTION__.14715:
	.string	"spill_failure"
	.type	__FUNCTION__.14877, @object
	.size	__FUNCTION__.14877, 15
__FUNCTION__.14877:
	.string	"eliminate_regs"
	.align 16
	.type	__FUNCTION__.14913, @object
	.size	__FUNCTION__.14913, 20
__FUNCTION__.14913:
	.string	"elimination_effects"
	.align 16
	.type	__FUNCTION__.14998, @object
	.size	__FUNCTION__.14998, 23
__FUNCTION__.14998:
	.string	"eliminate_regs_in_insn"
	.align 16
	.type	__FUNCTION__.15063, @object
	.size	__FUNCTION__.15063, 28
__FUNCTION__.15063:
	.string	"verify_initial_elim_offsets"
	.type	__FUNCTION__.15150, @object
	.size	__FUNCTION__.15150, 14
__FUNCTION__.15150:
	.string	"finish_spills"
	.align 16
	.type	__FUNCTION__.15345, @object
	.size	__FUNCTION__.15345, 24
__FUNCTION__.15345:
	.string	"clear_reload_reg_in_use"
	.align 16
	.type	__FUNCTION__.15407, @object
	.size	__FUNCTION__.15407, 18
__FUNCTION__.15407:
	.string	"reload_reg_free_p"
	.align 16
	.type	__FUNCTION__.15449, @object
	.size	__FUNCTION__.15449, 25
__FUNCTION__.15449:
	.string	"reload_reg_reaches_end_p"
	.align 16
	.type	__FUNCTION__.15470, @object
	.size	__FUNCTION__.15470, 17
__FUNCTION__.15470:
	.string	"reloads_conflict"
	.type	__FUNCTION__.15545, @object
	.size	__FUNCTION__.15545, 14
__FUNCTION__.15545:
	.string	"failed_reload"
	.align 16
	.type	__FUNCTION__.15636, @object
	.size	__FUNCTION__.15636, 19
__FUNCTION__.15636:
	.string	"choose_reload_regs"
	.align 16
	.type	__FUNCTION__.15776, @object
	.size	__FUNCTION__.15776, 24
__FUNCTION__.15776:
	.string	"emit_input_reload_insns"
	.align 16
	.type	__FUNCTION__.15793, @object
	.size	__FUNCTION__.15793, 25
__FUNCTION__.15793:
	.string	"emit_output_reload_insns"
	.align 16
	.type	__FUNCTION__.15829, @object
	.size	__FUNCTION__.15829, 17
__FUNCTION__.15829:
	.string	"do_output_reload"
	.align 16
	.type	__FUNCTION__.16102, @object
	.size	__FUNCTION__.16102, 29
__FUNCTION__.16102:
	.string	"reload_cse_simplify_operands"
	.align 16
	.type	__FUNCTION__.16325, @object
	.size	__FUNCTION__.16325, 24
__FUNCTION__.16325:
	.string	"reload_combine_note_use"
	.align 16
	.type	__FUNCTION__.16436, @object
	.size	__FUNCTION__.16436, 21
__FUNCTION__.16436:
	.string	"fixup_abnormal_edges"
	.text
.Letext0:
	.file 2 "rtl.h"
	.file 3 "config.h"
	.file 4 "tree.h"
	.file 5 "i386.h"
	.file 6 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
	.file 7 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 8 "/usr/include/stdio.h"
	.file 9 "/usr/include/libio.h"
	.file 10 "machmode.h"
	.file 11 "hard-reg-set.h"
	.file 12 "cselib.h"
	.file 13 "bitmap.h"
	.file 14 "basic-block.h"
	.file 15 "obstack.h"
	.file 16 "function.h"
	.file 17 "insn-codes.h"
	.file 18 "optabs.h"
	.file 19 "varray.h"
	.file 20 "regs.h"
	.file 21 "reload.h"
	.file 22 "recog.h"
	.file 23 "real.h"
	.file 24 "hashtable.h"
	.file 25 "flags.h"
	.file 26 "output.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x999b
	.value	0x4
	.long	.Ldebug_abbrev0
	.byte	0x8
	.uleb128 0x1
	.long	.LASF2032
	.byte	0x1
	.long	.LASF2033
	.long	.LASF2034
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.string	"rtx"
	.byte	0x3
	.byte	0x8
	.long	0x38
	.uleb128 0x3
	.byte	0x8
	.long	0x3e
	.uleb128 0x4
	.long	.LASF11
	.byte	0x10
	.byte	0x2
	.byte	0x7a
	.long	0xed
	.uleb128 0x5
	.long	.LASF0
	.byte	0x2
	.byte	0x7d
	.long	0x310
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0
	.uleb128 0x5
	.long	.LASF1
	.byte	0x2
	.byte	0x80
	.long	0x310
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.uleb128 0x5
	.long	.LASF2
	.byte	0x2
	.byte	0x87
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0
	.uleb128 0x5
	.long	.LASF3
	.byte	0x2
	.byte	0x8a
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0
	.uleb128 0x5
	.long	.LASF4
	.byte	0x2
	.byte	0x95
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0
	.uleb128 0x5
	.long	.LASF5
	.byte	0x2
	.byte	0x9d
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0
	.uleb128 0x5
	.long	.LASF6
	.byte	0x2
	.byte	0xaf
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0
	.uleb128 0x5
	.long	.LASF7
	.byte	0x2
	.byte	0xb6
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0
	.uleb128 0x5
	.long	.LASF8
	.byte	0x2
	.byte	0xbb
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0
	.uleb128 0x5
	.long	.LASF9
	.byte	0x2
	.byte	0xc4
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0
	.uleb128 0x6
	.string	"fld"
	.byte	0x2
	.byte	0xc9
	.long	0xe35
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF10
	.byte	0x3
	.byte	0xa
	.long	0xf8
	.uleb128 0x3
	.byte	0x8
	.long	0xfe
	.uleb128 0x4
	.long	.LASF12
	.byte	0x10
	.byte	0x2
	.byte	0xde
	.long	0x123
	.uleb128 0x8
	.long	.LASF13
	.byte	0x2
	.byte	0xdf
	.long	0x1e3
	.byte	0
	.uleb128 0x8
	.long	.LASF14
	.byte	0x2
	.byte	0xe0
	.long	0xe45
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF15
	.byte	0x3
	.byte	0xc
	.long	0x12e
	.uleb128 0x3
	.byte	0x8
	.long	0x134
	.uleb128 0x9
	.long	.LASF327
	.byte	0xd0
	.byte	0x4
	.value	0x744
	.long	0x1de
	.uleb128 0xa
	.long	.LASF16
	.byte	0x4
	.value	0x746
	.long	0x34d8
	.uleb128 0xa
	.long	.LASF17
	.byte	0x4
	.value	0x747
	.long	0x3698
	.uleb128 0xa
	.long	.LASF18
	.byte	0x4
	.value	0x748
	.long	0x36cd
	.uleb128 0xa
	.long	.LASF19
	.byte	0x4
	.value	0x749
	.long	0x3786
	.uleb128 0xa
	.long	.LASF20
	.byte	0x4
	.value	0x74a
	.long	0x3702
	.uleb128 0xa
	.long	.LASF21
	.byte	0x4
	.value	0x74b
	.long	0x3744
	.uleb128 0xa
	.long	.LASF22
	.byte	0x4
	.value	0x74c
	.long	0x37eb
	.uleb128 0xa
	.long	.LASF23
	.byte	0x4
	.value	0x74d
	.long	0x3c1e
	.uleb128 0xa
	.long	.LASF24
	.byte	0x4
	.value	0x74e
	.long	0x397a
	.uleb128 0xa
	.long	.LASF25
	.byte	0x4
	.value	0x74f
	.long	0x3812
	.uleb128 0xb
	.string	"vec"
	.byte	0x4
	.value	0x750
	.long	0x3847
	.uleb128 0xb
	.string	"exp"
	.byte	0x4
	.value	0x751
	.long	0x388a
	.uleb128 0xa
	.long	.LASF26
	.byte	0x4
	.value	0x752
	.long	0x38bf
	.byte	0
	.uleb128 0xc
	.long	0x1e3
	.uleb128 0xd
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0xe
	.byte	0x8
	.byte	0x7
	.long	.LASF27
	.uleb128 0xf
	.long	.LASF111
	.byte	0x4
	.byte	0x5
	.value	0x4b2
	.long	0x29b
	.uleb128 0x10
	.long	.LASF28
	.sleb128 0
	.uleb128 0x10
	.long	.LASF29
	.sleb128 1
	.uleb128 0x10
	.long	.LASF30
	.sleb128 2
	.uleb128 0x10
	.long	.LASF31
	.sleb128 3
	.uleb128 0x10
	.long	.LASF32
	.sleb128 4
	.uleb128 0x10
	.long	.LASF33
	.sleb128 5
	.uleb128 0x10
	.long	.LASF34
	.sleb128 6
	.uleb128 0x10
	.long	.LASF35
	.sleb128 7
	.uleb128 0x10
	.long	.LASF36
	.sleb128 8
	.uleb128 0x10
	.long	.LASF37
	.sleb128 9
	.uleb128 0x10
	.long	.LASF38
	.sleb128 10
	.uleb128 0x10
	.long	.LASF39
	.sleb128 11
	.uleb128 0x10
	.long	.LASF40
	.sleb128 12
	.uleb128 0x10
	.long	.LASF41
	.sleb128 13
	.uleb128 0x10
	.long	.LASF42
	.sleb128 14
	.uleb128 0x10
	.long	.LASF43
	.sleb128 15
	.uleb128 0x10
	.long	.LASF44
	.sleb128 16
	.uleb128 0x10
	.long	.LASF45
	.sleb128 17
	.uleb128 0x10
	.long	.LASF46
	.sleb128 18
	.uleb128 0x10
	.long	.LASF47
	.sleb128 19
	.uleb128 0x10
	.long	.LASF48
	.sleb128 20
	.uleb128 0x10
	.long	.LASF49
	.sleb128 21
	.uleb128 0x10
	.long	.LASF50
	.sleb128 22
	.uleb128 0x10
	.long	.LASF51
	.sleb128 23
	.uleb128 0x10
	.long	.LASF52
	.sleb128 24
	.uleb128 0x10
	.long	.LASF53
	.sleb128 25
	.byte	0
	.uleb128 0x11
	.long	.LASF54
	.byte	0x1c
	.byte	0x5
	.value	0x683
	.long	0x304
	.uleb128 0x12
	.long	.LASF55
	.byte	0x5
	.value	0x684
	.long	0x1e3
	.byte	0
	.uleb128 0x12
	.long	.LASF56
	.byte	0x5
	.value	0x685
	.long	0x1e3
	.byte	0x4
	.uleb128 0x12
	.long	.LASF57
	.byte	0x5
	.value	0x686
	.long	0x1e3
	.byte	0x8
	.uleb128 0x12
	.long	.LASF58
	.byte	0x5
	.value	0x687
	.long	0x1e3
	.byte	0xc
	.uleb128 0x12
	.long	.LASF59
	.byte	0x5
	.value	0x688
	.long	0x1e3
	.byte	0x10
	.uleb128 0x12
	.long	.LASF60
	.byte	0x5
	.value	0x689
	.long	0x1e3
	.byte	0x14
	.uleb128 0x12
	.long	.LASF61
	.byte	0x5
	.value	0x68a
	.long	0x1e3
	.byte	0x18
	.byte	0
	.uleb128 0x13
	.long	.LASF62
	.byte	0x5
	.value	0x68b
	.long	0x29b
	.uleb128 0xe
	.byte	0x4
	.byte	0x7
	.long	.LASF63
	.uleb128 0x14
	.byte	0x8
	.uleb128 0xe
	.byte	0x8
	.byte	0x5
	.long	.LASF64
	.uleb128 0x7
	.long	.LASF65
	.byte	0x6
	.byte	0xd4
	.long	0x32b
	.uleb128 0xe
	.byte	0x8
	.byte	0x7
	.long	.LASF66
	.uleb128 0xe
	.byte	0x1
	.byte	0x8
	.long	.LASF67
	.uleb128 0xe
	.byte	0x2
	.byte	0x7
	.long	.LASF68
	.uleb128 0xe
	.byte	0x1
	.byte	0x6
	.long	.LASF69
	.uleb128 0xe
	.byte	0x2
	.byte	0x5
	.long	.LASF70
	.uleb128 0x7
	.long	.LASF71
	.byte	0x7
	.byte	0x8c
	.long	0x319
	.uleb128 0x7
	.long	.LASF72
	.byte	0x7
	.byte	0x8d
	.long	0x319
	.uleb128 0x3
	.byte	0x8
	.long	0x36a
	.uleb128 0xe
	.byte	0x1
	.byte	0x6
	.long	.LASF73
	.uleb128 0x7
	.long	.LASF74
	.byte	0x8
	.byte	0x30
	.long	0x37c
	.uleb128 0x4
	.long	.LASF75
	.byte	0xd8
	.byte	0x9
	.byte	0xf6
	.long	0x4fd
	.uleb128 0x8
	.long	.LASF76
	.byte	0x9
	.byte	0xf7
	.long	0x1e3
	.byte	0
	.uleb128 0x8
	.long	.LASF77
	.byte	0x9
	.byte	0xfc
	.long	0x364
	.byte	0x8
	.uleb128 0x8
	.long	.LASF78
	.byte	0x9
	.byte	0xfd
	.long	0x364
	.byte	0x10
	.uleb128 0x8
	.long	.LASF79
	.byte	0x9
	.byte	0xfe
	.long	0x364
	.byte	0x18
	.uleb128 0x8
	.long	.LASF80
	.byte	0x9
	.byte	0xff
	.long	0x364
	.byte	0x20
	.uleb128 0x12
	.long	.LASF81
	.byte	0x9
	.value	0x100
	.long	0x364
	.byte	0x28
	.uleb128 0x12
	.long	.LASF82
	.byte	0x9
	.value	0x101
	.long	0x364
	.byte	0x30
	.uleb128 0x12
	.long	.LASF83
	.byte	0x9
	.value	0x102
	.long	0x364
	.byte	0x38
	.uleb128 0x12
	.long	.LASF84
	.byte	0x9
	.value	0x103
	.long	0x364
	.byte	0x40
	.uleb128 0x12
	.long	.LASF85
	.byte	0x9
	.value	0x105
	.long	0x364
	.byte	0x48
	.uleb128 0x12
	.long	.LASF86
	.byte	0x9
	.value	0x106
	.long	0x364
	.byte	0x50
	.uleb128 0x12
	.long	.LASF87
	.byte	0x9
	.value	0x107
	.long	0x364
	.byte	0x58
	.uleb128 0x12
	.long	.LASF88
	.byte	0x9
	.value	0x109
	.long	0x545
	.byte	0x60
	.uleb128 0x12
	.long	.LASF89
	.byte	0x9
	.value	0x10b
	.long	0x54b
	.byte	0x68
	.uleb128 0x12
	.long	.LASF90
	.byte	0x9
	.value	0x10d
	.long	0x1e3
	.byte	0x70
	.uleb128 0x12
	.long	.LASF91
	.byte	0x9
	.value	0x111
	.long	0x1e3
	.byte	0x74
	.uleb128 0x12
	.long	.LASF92
	.byte	0x9
	.value	0x113
	.long	0x34e
	.byte	0x78
	.uleb128 0x12
	.long	.LASF93
	.byte	0x9
	.value	0x117
	.long	0x339
	.byte	0x80
	.uleb128 0x12
	.long	.LASF94
	.byte	0x9
	.value	0x118
	.long	0x340
	.byte	0x82
	.uleb128 0x12
	.long	.LASF95
	.byte	0x9
	.value	0x119
	.long	0x551
	.byte	0x83
	.uleb128 0x12
	.long	.LASF96
	.byte	0x9
	.value	0x11d
	.long	0x561
	.byte	0x88
	.uleb128 0x12
	.long	.LASF97
	.byte	0x9
	.value	0x126
	.long	0x359
	.byte	0x90
	.uleb128 0x12
	.long	.LASF98
	.byte	0x9
	.value	0x12f
	.long	0x317
	.byte	0x98
	.uleb128 0x12
	.long	.LASF99
	.byte	0x9
	.value	0x130
	.long	0x317
	.byte	0xa0
	.uleb128 0x12
	.long	.LASF100
	.byte	0x9
	.value	0x131
	.long	0x317
	.byte	0xa8
	.uleb128 0x12
	.long	.LASF101
	.byte	0x9
	.value	0x132
	.long	0x317
	.byte	0xb0
	.uleb128 0x12
	.long	.LASF102
	.byte	0x9
	.value	0x133
	.long	0x320
	.byte	0xb8
	.uleb128 0x12
	.long	.LASF103
	.byte	0x9
	.value	0x135
	.long	0x1e3
	.byte	0xc0
	.uleb128 0x12
	.long	.LASF104
	.byte	0x9
	.value	0x137
	.long	0x567
	.byte	0xc4
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x50d
	.uleb128 0x16
	.long	0x1ea
	.byte	0x3
	.byte	0
	.uleb128 0x17
	.long	.LASF2035
	.byte	0x9
	.byte	0x9b
	.uleb128 0x4
	.long	.LASF105
	.byte	0x18
	.byte	0x9
	.byte	0xa1
	.long	0x545
	.uleb128 0x8
	.long	.LASF106
	.byte	0x9
	.byte	0xa2
	.long	0x545
	.byte	0
	.uleb128 0x8
	.long	.LASF107
	.byte	0x9
	.byte	0xa3
	.long	0x54b
	.byte	0x8
	.uleb128 0x8
	.long	.LASF108
	.byte	0x9
	.byte	0xa7
	.long	0x1e3
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x514
	.uleb128 0x3
	.byte	0x8
	.long	0x37c
	.uleb128 0x15
	.long	0x36a
	.long	0x561
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x50d
	.uleb128 0x15
	.long	0x36a
	.long	0x577
	.uleb128 0x16
	.long	0x1ea
	.byte	0x13
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x57d
	.uleb128 0xc
	.long	0x36a
	.uleb128 0xe
	.byte	0x8
	.byte	0x7
	.long	.LASF109
	.uleb128 0xe
	.byte	0x8
	.byte	0x5
	.long	.LASF110
	.uleb128 0x3
	.byte	0x8
	.long	0x1e3
	.uleb128 0x3
	.byte	0x8
	.long	0x59c
	.uleb128 0x18
	.uleb128 0x19
	.long	.LASF112
	.byte	0x4
	.byte	0xa
	.byte	0x1d
	.long	0x712
	.uleb128 0x10
	.long	.LASF113
	.sleb128 0
	.uleb128 0x10
	.long	.LASF114
	.sleb128 1
	.uleb128 0x10
	.long	.LASF115
	.sleb128 2
	.uleb128 0x10
	.long	.LASF116
	.sleb128 3
	.uleb128 0x10
	.long	.LASF117
	.sleb128 4
	.uleb128 0x10
	.long	.LASF118
	.sleb128 5
	.uleb128 0x10
	.long	.LASF119
	.sleb128 6
	.uleb128 0x10
	.long	.LASF120
	.sleb128 7
	.uleb128 0x10
	.long	.LASF121
	.sleb128 8
	.uleb128 0x10
	.long	.LASF122
	.sleb128 9
	.uleb128 0x10
	.long	.LASF123
	.sleb128 10
	.uleb128 0x10
	.long	.LASF124
	.sleb128 11
	.uleb128 0x10
	.long	.LASF125
	.sleb128 12
	.uleb128 0x10
	.long	.LASF126
	.sleb128 13
	.uleb128 0x10
	.long	.LASF127
	.sleb128 14
	.uleb128 0x10
	.long	.LASF128
	.sleb128 15
	.uleb128 0x10
	.long	.LASF129
	.sleb128 16
	.uleb128 0x10
	.long	.LASF130
	.sleb128 17
	.uleb128 0x10
	.long	.LASF131
	.sleb128 18
	.uleb128 0x10
	.long	.LASF132
	.sleb128 19
	.uleb128 0x10
	.long	.LASF133
	.sleb128 20
	.uleb128 0x10
	.long	.LASF134
	.sleb128 21
	.uleb128 0x10
	.long	.LASF135
	.sleb128 22
	.uleb128 0x10
	.long	.LASF136
	.sleb128 23
	.uleb128 0x10
	.long	.LASF137
	.sleb128 24
	.uleb128 0x10
	.long	.LASF138
	.sleb128 25
	.uleb128 0x10
	.long	.LASF139
	.sleb128 26
	.uleb128 0x10
	.long	.LASF140
	.sleb128 27
	.uleb128 0x10
	.long	.LASF141
	.sleb128 28
	.uleb128 0x10
	.long	.LASF142
	.sleb128 29
	.uleb128 0x10
	.long	.LASF143
	.sleb128 30
	.uleb128 0x10
	.long	.LASF144
	.sleb128 31
	.uleb128 0x10
	.long	.LASF145
	.sleb128 32
	.uleb128 0x10
	.long	.LASF146
	.sleb128 33
	.uleb128 0x10
	.long	.LASF147
	.sleb128 34
	.uleb128 0x10
	.long	.LASF148
	.sleb128 35
	.uleb128 0x10
	.long	.LASF149
	.sleb128 36
	.uleb128 0x10
	.long	.LASF150
	.sleb128 37
	.uleb128 0x10
	.long	.LASF151
	.sleb128 38
	.uleb128 0x10
	.long	.LASF152
	.sleb128 39
	.uleb128 0x10
	.long	.LASF153
	.sleb128 40
	.uleb128 0x10
	.long	.LASF154
	.sleb128 41
	.uleb128 0x10
	.long	.LASF155
	.sleb128 42
	.uleb128 0x10
	.long	.LASF156
	.sleb128 43
	.uleb128 0x10
	.long	.LASF157
	.sleb128 44
	.uleb128 0x10
	.long	.LASF158
	.sleb128 45
	.uleb128 0x10
	.long	.LASF159
	.sleb128 46
	.uleb128 0x10
	.long	.LASF160
	.sleb128 47
	.uleb128 0x10
	.long	.LASF161
	.sleb128 48
	.uleb128 0x10
	.long	.LASF162
	.sleb128 49
	.uleb128 0x10
	.long	.LASF163
	.sleb128 50
	.uleb128 0x10
	.long	.LASF164
	.sleb128 51
	.uleb128 0x10
	.long	.LASF165
	.sleb128 52
	.uleb128 0x10
	.long	.LASF166
	.sleb128 53
	.uleb128 0x10
	.long	.LASF167
	.sleb128 54
	.uleb128 0x10
	.long	.LASF168
	.sleb128 55
	.uleb128 0x10
	.long	.LASF169
	.sleb128 56
	.uleb128 0x10
	.long	.LASF170
	.sleb128 57
	.uleb128 0x10
	.long	.LASF171
	.sleb128 58
	.uleb128 0x10
	.long	.LASF172
	.sleb128 59
	.byte	0
	.uleb128 0x19
	.long	.LASF173
	.byte	0x4
	.byte	0xa
	.byte	0x2c
	.long	0x75b
	.uleb128 0x10
	.long	.LASF174
	.sleb128 0
	.uleb128 0x10
	.long	.LASF175
	.sleb128 1
	.uleb128 0x10
	.long	.LASF176
	.sleb128 2
	.uleb128 0x10
	.long	.LASF177
	.sleb128 3
	.uleb128 0x10
	.long	.LASF178
	.sleb128 4
	.uleb128 0x10
	.long	.LASF179
	.sleb128 5
	.uleb128 0x10
	.long	.LASF180
	.sleb128 6
	.uleb128 0x10
	.long	.LASF181
	.sleb128 7
	.uleb128 0x10
	.long	.LASF182
	.sleb128 8
	.uleb128 0x10
	.long	.LASF183
	.sleb128 9
	.byte	0
	.uleb128 0x7
	.long	.LASF184
	.byte	0xb
	.byte	0x29
	.long	0x32b
	.uleb128 0x19
	.long	.LASF185
	.byte	0x4
	.byte	0x2
	.byte	0x29
	.long	0xb62
	.uleb128 0x10
	.long	.LASF186
	.sleb128 0
	.uleb128 0x1a
	.string	"NIL"
	.sleb128 1
	.uleb128 0x10
	.long	.LASF187
	.sleb128 2
	.uleb128 0x10
	.long	.LASF188
	.sleb128 3
	.uleb128 0x10
	.long	.LASF189
	.sleb128 4
	.uleb128 0x10
	.long	.LASF190
	.sleb128 5
	.uleb128 0x10
	.long	.LASF191
	.sleb128 6
	.uleb128 0x10
	.long	.LASF192
	.sleb128 7
	.uleb128 0x10
	.long	.LASF193
	.sleb128 8
	.uleb128 0x10
	.long	.LASF194
	.sleb128 9
	.uleb128 0x10
	.long	.LASF195
	.sleb128 10
	.uleb128 0x10
	.long	.LASF196
	.sleb128 11
	.uleb128 0x10
	.long	.LASF197
	.sleb128 12
	.uleb128 0x10
	.long	.LASF198
	.sleb128 13
	.uleb128 0x10
	.long	.LASF199
	.sleb128 14
	.uleb128 0x10
	.long	.LASF200
	.sleb128 15
	.uleb128 0x10
	.long	.LASF201
	.sleb128 16
	.uleb128 0x10
	.long	.LASF202
	.sleb128 17
	.uleb128 0x10
	.long	.LASF203
	.sleb128 18
	.uleb128 0x10
	.long	.LASF204
	.sleb128 19
	.uleb128 0x10
	.long	.LASF205
	.sleb128 20
	.uleb128 0x10
	.long	.LASF206
	.sleb128 21
	.uleb128 0x10
	.long	.LASF207
	.sleb128 22
	.uleb128 0x10
	.long	.LASF208
	.sleb128 23
	.uleb128 0x10
	.long	.LASF209
	.sleb128 24
	.uleb128 0x10
	.long	.LASF210
	.sleb128 25
	.uleb128 0x10
	.long	.LASF211
	.sleb128 26
	.uleb128 0x10
	.long	.LASF212
	.sleb128 27
	.uleb128 0x10
	.long	.LASF213
	.sleb128 28
	.uleb128 0x10
	.long	.LASF214
	.sleb128 29
	.uleb128 0x10
	.long	.LASF215
	.sleb128 30
	.uleb128 0x10
	.long	.LASF216
	.sleb128 31
	.uleb128 0x10
	.long	.LASF217
	.sleb128 32
	.uleb128 0x10
	.long	.LASF218
	.sleb128 33
	.uleb128 0x10
	.long	.LASF219
	.sleb128 34
	.uleb128 0x10
	.long	.LASF220
	.sleb128 35
	.uleb128 0x10
	.long	.LASF221
	.sleb128 36
	.uleb128 0x10
	.long	.LASF222
	.sleb128 37
	.uleb128 0x10
	.long	.LASF223
	.sleb128 38
	.uleb128 0x10
	.long	.LASF224
	.sleb128 39
	.uleb128 0x10
	.long	.LASF225
	.sleb128 40
	.uleb128 0x10
	.long	.LASF226
	.sleb128 41
	.uleb128 0x10
	.long	.LASF227
	.sleb128 42
	.uleb128 0x10
	.long	.LASF228
	.sleb128 43
	.uleb128 0x10
	.long	.LASF229
	.sleb128 44
	.uleb128 0x10
	.long	.LASF230
	.sleb128 45
	.uleb128 0x10
	.long	.LASF231
	.sleb128 46
	.uleb128 0x1a
	.string	"SET"
	.sleb128 47
	.uleb128 0x1a
	.string	"USE"
	.sleb128 48
	.uleb128 0x10
	.long	.LASF232
	.sleb128 49
	.uleb128 0x10
	.long	.LASF233
	.sleb128 50
	.uleb128 0x10
	.long	.LASF234
	.sleb128 51
	.uleb128 0x10
	.long	.LASF235
	.sleb128 52
	.uleb128 0x10
	.long	.LASF236
	.sleb128 53
	.uleb128 0x10
	.long	.LASF237
	.sleb128 54
	.uleb128 0x10
	.long	.LASF238
	.sleb128 55
	.uleb128 0x10
	.long	.LASF239
	.sleb128 56
	.uleb128 0x10
	.long	.LASF240
	.sleb128 57
	.uleb128 0x10
	.long	.LASF241
	.sleb128 58
	.uleb128 0x1a
	.string	"PC"
	.sleb128 59
	.uleb128 0x10
	.long	.LASF242
	.sleb128 60
	.uleb128 0x1a
	.string	"REG"
	.sleb128 61
	.uleb128 0x10
	.long	.LASF243
	.sleb128 62
	.uleb128 0x10
	.long	.LASF244
	.sleb128 63
	.uleb128 0x10
	.long	.LASF245
	.sleb128 64
	.uleb128 0x10
	.long	.LASF246
	.sleb128 65
	.uleb128 0x1a
	.string	"MEM"
	.sleb128 66
	.uleb128 0x10
	.long	.LASF247
	.sleb128 67
	.uleb128 0x10
	.long	.LASF248
	.sleb128 68
	.uleb128 0x1a
	.string	"CC0"
	.sleb128 69
	.uleb128 0x10
	.long	.LASF249
	.sleb128 70
	.uleb128 0x10
	.long	.LASF250
	.sleb128 71
	.uleb128 0x10
	.long	.LASF251
	.sleb128 72
	.uleb128 0x10
	.long	.LASF252
	.sleb128 73
	.uleb128 0x10
	.long	.LASF253
	.sleb128 74
	.uleb128 0x10
	.long	.LASF254
	.sleb128 75
	.uleb128 0x10
	.long	.LASF255
	.sleb128 76
	.uleb128 0x1a
	.string	"NEG"
	.sleb128 77
	.uleb128 0x10
	.long	.LASF256
	.sleb128 78
	.uleb128 0x1a
	.string	"DIV"
	.sleb128 79
	.uleb128 0x1a
	.string	"MOD"
	.sleb128 80
	.uleb128 0x10
	.long	.LASF257
	.sleb128 81
	.uleb128 0x10
	.long	.LASF258
	.sleb128 82
	.uleb128 0x1a
	.string	"AND"
	.sleb128 83
	.uleb128 0x1a
	.string	"IOR"
	.sleb128 84
	.uleb128 0x1a
	.string	"XOR"
	.sleb128 85
	.uleb128 0x1a
	.string	"NOT"
	.sleb128 86
	.uleb128 0x10
	.long	.LASF259
	.sleb128 87
	.uleb128 0x10
	.long	.LASF260
	.sleb128 88
	.uleb128 0x10
	.long	.LASF261
	.sleb128 89
	.uleb128 0x10
	.long	.LASF262
	.sleb128 90
	.uleb128 0x10
	.long	.LASF263
	.sleb128 91
	.uleb128 0x10
	.long	.LASF264
	.sleb128 92
	.uleb128 0x10
	.long	.LASF265
	.sleb128 93
	.uleb128 0x10
	.long	.LASF266
	.sleb128 94
	.uleb128 0x10
	.long	.LASF267
	.sleb128 95
	.uleb128 0x10
	.long	.LASF268
	.sleb128 96
	.uleb128 0x10
	.long	.LASF269
	.sleb128 97
	.uleb128 0x10
	.long	.LASF270
	.sleb128 98
	.uleb128 0x10
	.long	.LASF271
	.sleb128 99
	.uleb128 0x10
	.long	.LASF272
	.sleb128 100
	.uleb128 0x10
	.long	.LASF273
	.sleb128 101
	.uleb128 0x1a
	.string	"NE"
	.sleb128 102
	.uleb128 0x1a
	.string	"EQ"
	.sleb128 103
	.uleb128 0x1a
	.string	"GE"
	.sleb128 104
	.uleb128 0x1a
	.string	"GT"
	.sleb128 105
	.uleb128 0x1a
	.string	"LE"
	.sleb128 106
	.uleb128 0x1a
	.string	"LT"
	.sleb128 107
	.uleb128 0x1a
	.string	"GEU"
	.sleb128 108
	.uleb128 0x1a
	.string	"GTU"
	.sleb128 109
	.uleb128 0x1a
	.string	"LEU"
	.sleb128 110
	.uleb128 0x1a
	.string	"LTU"
	.sleb128 111
	.uleb128 0x10
	.long	.LASF274
	.sleb128 112
	.uleb128 0x10
	.long	.LASF275
	.sleb128 113
	.uleb128 0x10
	.long	.LASF276
	.sleb128 114
	.uleb128 0x10
	.long	.LASF277
	.sleb128 115
	.uleb128 0x10
	.long	.LASF278
	.sleb128 116
	.uleb128 0x10
	.long	.LASF279
	.sleb128 117
	.uleb128 0x10
	.long	.LASF280
	.sleb128 118
	.uleb128 0x10
	.long	.LASF281
	.sleb128 119
	.uleb128 0x10
	.long	.LASF282
	.sleb128 120
	.uleb128 0x10
	.long	.LASF283
	.sleb128 121
	.uleb128 0x10
	.long	.LASF284
	.sleb128 122
	.uleb128 0x10
	.long	.LASF285
	.sleb128 123
	.uleb128 0x10
	.long	.LASF286
	.sleb128 124
	.uleb128 0x10
	.long	.LASF287
	.sleb128 125
	.uleb128 0x1a
	.string	"FIX"
	.sleb128 126
	.uleb128 0x10
	.long	.LASF288
	.sleb128 127
	.uleb128 0x10
	.long	.LASF289
	.sleb128 128
	.uleb128 0x1a
	.string	"ABS"
	.sleb128 129
	.uleb128 0x10
	.long	.LASF290
	.sleb128 130
	.uleb128 0x1a
	.string	"FFS"
	.sleb128 131
	.uleb128 0x10
	.long	.LASF291
	.sleb128 132
	.uleb128 0x10
	.long	.LASF292
	.sleb128 133
	.uleb128 0x10
	.long	.LASF293
	.sleb128 134
	.uleb128 0x10
	.long	.LASF294
	.sleb128 135
	.uleb128 0x10
	.long	.LASF295
	.sleb128 136
	.uleb128 0x10
	.long	.LASF296
	.sleb128 137
	.uleb128 0x10
	.long	.LASF297
	.sleb128 138
	.uleb128 0x10
	.long	.LASF298
	.sleb128 139
	.uleb128 0x10
	.long	.LASF299
	.sleb128 140
	.uleb128 0x10
	.long	.LASF300
	.sleb128 141
	.uleb128 0x10
	.long	.LASF301
	.sleb128 142
	.uleb128 0x10
	.long	.LASF302
	.sleb128 143
	.uleb128 0x10
	.long	.LASF303
	.sleb128 144
	.uleb128 0x10
	.long	.LASF304
	.sleb128 145
	.uleb128 0x10
	.long	.LASF305
	.sleb128 146
	.uleb128 0x10
	.long	.LASF306
	.sleb128 147
	.uleb128 0x10
	.long	.LASF307
	.sleb128 148
	.uleb128 0x10
	.long	.LASF308
	.sleb128 149
	.uleb128 0x10
	.long	.LASF309
	.sleb128 150
	.uleb128 0x10
	.long	.LASF310
	.sleb128 151
	.uleb128 0x1a
	.string	"PHI"
	.sleb128 152
	.uleb128 0x10
	.long	.LASF311
	.sleb128 153
	.byte	0
	.uleb128 0x1b
	.byte	0x4
	.byte	0x2
	.byte	0x44
	.long	0xbe3
	.uleb128 0x5
	.long	.LASF312
	.byte	0x2
	.byte	0x47
	.long	0x310
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0
	.uleb128 0x5
	.long	.LASF313
	.byte	0x2
	.byte	0x49
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0
	.uleb128 0x5
	.long	.LASF314
	.byte	0x2
	.byte	0x4a
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0
	.uleb128 0x5
	.long	.LASF315
	.byte	0x2
	.byte	0x4c
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0
	.uleb128 0x5
	.long	.LASF316
	.byte	0x2
	.byte	0x4e
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0
	.uleb128 0x5
	.long	.LASF317
	.byte	0x2
	.byte	0x50
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0
	.uleb128 0x5
	.long	.LASF318
	.byte	0x2
	.byte	0x53
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0
	.uleb128 0x5
	.long	.LASF319
	.byte	0x2
	.byte	0x55
	.long	0x310
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.long	.LASF320
	.byte	0x2
	.byte	0x56
	.long	0xb62
	.uleb128 0x1b
	.byte	0x28
	.byte	0x2
	.byte	0x5c
	.long	0xc33
	.uleb128 0x8
	.long	.LASF321
	.byte	0x2
	.byte	0x5e
	.long	0x319
	.byte	0
	.uleb128 0x8
	.long	.LASF322
	.byte	0x2
	.byte	0x5f
	.long	0x123
	.byte	0x8
	.uleb128 0x8
	.long	.LASF323
	.byte	0x2
	.byte	0x60
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF324
	.byte	0x2
	.byte	0x61
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF325
	.byte	0x2
	.byte	0x62
	.long	0x310
	.byte	0x20
	.byte	0
	.uleb128 0x7
	.long	.LASF326
	.byte	0x2
	.byte	0x63
	.long	0xbee
	.uleb128 0x1c
	.long	.LASF328
	.byte	0x8
	.byte	0x2
	.byte	0x67
	.long	0xcd9
	.uleb128 0x1d
	.long	.LASF329
	.byte	0x2
	.byte	0x69
	.long	0x319
	.uleb128 0x1d
	.long	.LASF330
	.byte	0x2
	.byte	0x6a
	.long	0x1e3
	.uleb128 0x1d
	.long	.LASF331
	.byte	0x2
	.byte	0x6b
	.long	0x310
	.uleb128 0x1d
	.long	.LASF332
	.byte	0x2
	.byte	0x6c
	.long	0x577
	.uleb128 0x1e
	.string	"rtx"
	.byte	0x2
	.byte	0x6d
	.long	0x2d
	.uleb128 0x1d
	.long	.LASF10
	.byte	0x2
	.byte	0x6e
	.long	0xed
	.uleb128 0x1d
	.long	.LASF333
	.byte	0x2
	.byte	0x6f
	.long	0x59d
	.uleb128 0x1d
	.long	.LASF334
	.byte	0x2
	.byte	0x70
	.long	0xbe3
	.uleb128 0x1d
	.long	.LASF335
	.byte	0x2
	.byte	0x71
	.long	0xd14
	.uleb128 0x1d
	.long	.LASF336
	.byte	0x2
	.byte	0x72
	.long	0xd4b
	.uleb128 0x1d
	.long	.LASF337
	.byte	0x2
	.byte	0x73
	.long	0x123
	.uleb128 0x1e
	.string	"bb"
	.byte	0x2
	.byte	0x74
	.long	0xe1e
	.uleb128 0x1d
	.long	.LASF338
	.byte	0x2
	.byte	0x75
	.long	0xe24
	.byte	0
	.uleb128 0x4
	.long	.LASF339
	.byte	0x20
	.byte	0xc
	.byte	0x17
	.long	0xd14
	.uleb128 0x8
	.long	.LASF340
	.byte	0xc
	.byte	0x1a
	.long	0x310
	.byte	0
	.uleb128 0x6
	.string	"u"
	.byte	0xc
	.byte	0x21
	.long	0x31d6
	.byte	0x8
	.uleb128 0x8
	.long	.LASF341
	.byte	0xc
	.byte	0x25
	.long	0x3226
	.byte	0x10
	.uleb128 0x8
	.long	.LASF342
	.byte	0xc
	.byte	0x28
	.long	0x2b16
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xcd9
	.uleb128 0x4
	.long	.LASF343
	.byte	0x18
	.byte	0xd
	.byte	0x34
	.long	0xd4b
	.uleb128 0x8
	.long	.LASF344
	.byte	0xd
	.byte	0x35
	.long	0x2c04
	.byte	0
	.uleb128 0x8
	.long	.LASF345
	.byte	0xd
	.byte	0x36
	.long	0x2c04
	.byte	0x8
	.uleb128 0x8
	.long	.LASF346
	.byte	0xd
	.byte	0x37
	.long	0x310
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xd1a
	.uleb128 0x4
	.long	.LASF347
	.byte	0x70
	.byte	0xe
	.byte	0xae
	.long	0xe1e
	.uleb128 0x8
	.long	.LASF348
	.byte	0xe
	.byte	0xb0
	.long	0x2d
	.byte	0
	.uleb128 0x6
	.string	"end"
	.byte	0xe
	.byte	0xb0
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF349
	.byte	0xe
	.byte	0xb3
	.long	0x123
	.byte	0x10
	.uleb128 0x8
	.long	.LASF350
	.byte	0xe
	.byte	0xb4
	.long	0x123
	.byte	0x18
	.uleb128 0x8
	.long	.LASF351
	.byte	0xe
	.byte	0xb7
	.long	0x2ceb
	.byte	0x20
	.uleb128 0x8
	.long	.LASF352
	.byte	0xe
	.byte	0xb7
	.long	0x2ceb
	.byte	0x28
	.uleb128 0x8
	.long	.LASF353
	.byte	0xe
	.byte	0xbc
	.long	0x2c56
	.byte	0x30
	.uleb128 0x8
	.long	.LASF354
	.byte	0xe
	.byte	0xc0
	.long	0x2c56
	.byte	0x38
	.uleb128 0x8
	.long	.LASF355
	.byte	0xe
	.byte	0xc6
	.long	0x2c56
	.byte	0x40
	.uleb128 0x8
	.long	.LASF356
	.byte	0xe
	.byte	0xc8
	.long	0x2c56
	.byte	0x48
	.uleb128 0x6
	.string	"aux"
	.byte	0xe
	.byte	0xcb
	.long	0x317
	.byte	0x50
	.uleb128 0x8
	.long	.LASF357
	.byte	0xe
	.byte	0xce
	.long	0x1e3
	.byte	0x58
	.uleb128 0x8
	.long	.LASF358
	.byte	0xe
	.byte	0xd1
	.long	0x1e3
	.byte	0x5c
	.uleb128 0x8
	.long	.LASF359
	.byte	0xe
	.byte	0xd4
	.long	0x2c61
	.byte	0x60
	.uleb128 0x8
	.long	.LASF360
	.byte	0xe
	.byte	0xd7
	.long	0x1e3
	.byte	0x68
	.uleb128 0x8
	.long	.LASF361
	.byte	0xe
	.byte	0xda
	.long	0x1e3
	.byte	0x6c
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0xd51
	.uleb128 0x3
	.byte	0x8
	.long	0xc33
	.uleb128 0x7
	.long	.LASF362
	.byte	0x2
	.byte	0x76
	.long	0xc3e
	.uleb128 0x15
	.long	0xe2a
	.long	0xe45
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x2d
	.long	0xe55
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0xf
	.long	.LASF363
	.byte	0x4
	.byte	0x2
	.value	0x1c3
	.long	0xf17
	.uleb128 0x10
	.long	.LASF364
	.sleb128 1
	.uleb128 0x10
	.long	.LASF365
	.sleb128 2
	.uleb128 0x10
	.long	.LASF366
	.sleb128 3
	.uleb128 0x10
	.long	.LASF367
	.sleb128 4
	.uleb128 0x10
	.long	.LASF368
	.sleb128 5
	.uleb128 0x10
	.long	.LASF369
	.sleb128 6
	.uleb128 0x10
	.long	.LASF370
	.sleb128 7
	.uleb128 0x10
	.long	.LASF371
	.sleb128 8
	.uleb128 0x10
	.long	.LASF372
	.sleb128 9
	.uleb128 0x10
	.long	.LASF373
	.sleb128 10
	.uleb128 0x10
	.long	.LASF374
	.sleb128 11
	.uleb128 0x10
	.long	.LASF375
	.sleb128 12
	.uleb128 0x10
	.long	.LASF376
	.sleb128 13
	.uleb128 0x10
	.long	.LASF377
	.sleb128 14
	.uleb128 0x10
	.long	.LASF378
	.sleb128 15
	.uleb128 0x10
	.long	.LASF379
	.sleb128 16
	.uleb128 0x10
	.long	.LASF380
	.sleb128 17
	.uleb128 0x10
	.long	.LASF381
	.sleb128 18
	.uleb128 0x10
	.long	.LASF382
	.sleb128 19
	.uleb128 0x10
	.long	.LASF383
	.sleb128 20
	.uleb128 0x10
	.long	.LASF384
	.sleb128 21
	.uleb128 0x10
	.long	.LASF385
	.sleb128 22
	.uleb128 0x10
	.long	.LASF386
	.sleb128 23
	.uleb128 0x10
	.long	.LASF387
	.sleb128 24
	.uleb128 0x10
	.long	.LASF388
	.sleb128 25
	.uleb128 0x10
	.long	.LASF389
	.sleb128 26
	.uleb128 0x10
	.long	.LASF390
	.sleb128 27
	.uleb128 0x10
	.long	.LASF391
	.sleb128 28
	.uleb128 0x10
	.long	.LASF392
	.sleb128 29
	.uleb128 0x10
	.long	.LASF393
	.sleb128 30
	.byte	0
	.uleb128 0xf
	.long	.LASF394
	.byte	0x4
	.byte	0x2
	.value	0x297
	.long	0xfc6
	.uleb128 0x10
	.long	.LASF395
	.sleb128 -100
	.uleb128 0x10
	.long	.LASF396
	.sleb128 -99
	.uleb128 0x10
	.long	.LASF397
	.sleb128 -98
	.uleb128 0x10
	.long	.LASF398
	.sleb128 -97
	.uleb128 0x10
	.long	.LASF399
	.sleb128 -96
	.uleb128 0x10
	.long	.LASF400
	.sleb128 -95
	.uleb128 0x10
	.long	.LASF401
	.sleb128 -94
	.uleb128 0x10
	.long	.LASF402
	.sleb128 -93
	.uleb128 0x10
	.long	.LASF403
	.sleb128 -92
	.uleb128 0x10
	.long	.LASF404
	.sleb128 -91
	.uleb128 0x10
	.long	.LASF405
	.sleb128 -90
	.uleb128 0x10
	.long	.LASF406
	.sleb128 -89
	.uleb128 0x10
	.long	.LASF407
	.sleb128 -88
	.uleb128 0x10
	.long	.LASF408
	.sleb128 -87
	.uleb128 0x10
	.long	.LASF409
	.sleb128 -86
	.uleb128 0x10
	.long	.LASF410
	.sleb128 -85
	.uleb128 0x10
	.long	.LASF411
	.sleb128 -84
	.uleb128 0x10
	.long	.LASF412
	.sleb128 -83
	.uleb128 0x10
	.long	.LASF413
	.sleb128 -82
	.uleb128 0x10
	.long	.LASF414
	.sleb128 -81
	.uleb128 0x10
	.long	.LASF415
	.sleb128 -80
	.uleb128 0x10
	.long	.LASF416
	.sleb128 -79
	.uleb128 0x10
	.long	.LASF417
	.sleb128 -78
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2d
	.uleb128 0xf
	.long	.LASF418
	.byte	0x4
	.byte	0x2
	.value	0x630
	.long	0x1022
	.uleb128 0x10
	.long	.LASF419
	.sleb128 0
	.uleb128 0x10
	.long	.LASF420
	.sleb128 1
	.uleb128 0x10
	.long	.LASF421
	.sleb128 2
	.uleb128 0x10
	.long	.LASF422
	.sleb128 3
	.uleb128 0x10
	.long	.LASF423
	.sleb128 4
	.uleb128 0x10
	.long	.LASF424
	.sleb128 5
	.uleb128 0x10
	.long	.LASF425
	.sleb128 6
	.uleb128 0x10
	.long	.LASF426
	.sleb128 7
	.uleb128 0x10
	.long	.LASF427
	.sleb128 8
	.uleb128 0x10
	.long	.LASF428
	.sleb128 9
	.uleb128 0x10
	.long	.LASF429
	.sleb128 10
	.uleb128 0x10
	.long	.LASF430
	.sleb128 11
	.byte	0
	.uleb128 0x4
	.long	.LASF431
	.byte	0x18
	.byte	0xf
	.byte	0xa1
	.long	0x1053
	.uleb128 0x8
	.long	.LASF432
	.byte	0xf
	.byte	0xa3
	.long	0x364
	.byte	0
	.uleb128 0x8
	.long	.LASF433
	.byte	0xf
	.byte	0xa4
	.long	0x1053
	.byte	0x8
	.uleb128 0x8
	.long	.LASF434
	.byte	0xf
	.byte	0xa5
	.long	0x4fd
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1022
	.uleb128 0x4
	.long	.LASF435
	.byte	0x58
	.byte	0xf
	.byte	0xa8
	.long	0x110b
	.uleb128 0x8
	.long	.LASF436
	.byte	0xf
	.byte	0xaa
	.long	0x319
	.byte	0
	.uleb128 0x8
	.long	.LASF437
	.byte	0xf
	.byte	0xab
	.long	0x1053
	.byte	0x8
	.uleb128 0x8
	.long	.LASF438
	.byte	0xf
	.byte	0xac
	.long	0x364
	.byte	0x10
	.uleb128 0x8
	.long	.LASF439
	.byte	0xf
	.byte	0xad
	.long	0x364
	.byte	0x18
	.uleb128 0x8
	.long	.LASF440
	.byte	0xf
	.byte	0xae
	.long	0x364
	.byte	0x20
	.uleb128 0x8
	.long	.LASF441
	.byte	0xf
	.byte	0xaf
	.long	0x319
	.byte	0x28
	.uleb128 0x8
	.long	.LASF442
	.byte	0xf
	.byte	0xb0
	.long	0x1e3
	.byte	0x30
	.uleb128 0x8
	.long	.LASF443
	.byte	0xf
	.byte	0xb5
	.long	0x111f
	.byte	0x38
	.uleb128 0x8
	.long	.LASF444
	.byte	0xf
	.byte	0xb6
	.long	0x1135
	.byte	0x40
	.uleb128 0x8
	.long	.LASF445
	.byte	0xf
	.byte	0xb7
	.long	0x317
	.byte	0x48
	.uleb128 0x5
	.long	.LASF446
	.byte	0xf
	.byte	0xbd
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x50
	.uleb128 0x5
	.long	.LASF447
	.byte	0xf
	.byte	0xbe
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x50
	.uleb128 0x5
	.long	.LASF448
	.byte	0xf
	.byte	0xc2
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x50
	.byte	0
	.uleb128 0x1f
	.long	0x1053
	.long	0x111f
	.uleb128 0x20
	.long	0x317
	.uleb128 0x20
	.long	0x319
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x110b
	.uleb128 0x21
	.long	0x1135
	.uleb128 0x20
	.long	0x317
	.uleb128 0x20
	.long	0x1053
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x1125
	.uleb128 0x4
	.long	.LASF449
	.byte	0x18
	.byte	0x10
	.byte	0x16
	.long	0x1178
	.uleb128 0x8
	.long	.LASF450
	.byte	0x10
	.byte	0x18
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF451
	.byte	0x10
	.byte	0x19
	.long	0x59d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF452
	.byte	0x10
	.byte	0x1a
	.long	0x1e3
	.byte	0xc
	.uleb128 0x8
	.long	.LASF453
	.byte	0x10
	.byte	0x1b
	.long	0x1178
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x113b
	.uleb128 0x4
	.long	.LASF454
	.byte	0x20
	.byte	0x10
	.byte	0x23
	.long	0x11bb
	.uleb128 0x8
	.long	.LASF344
	.byte	0x10
	.byte	0x26
	.long	0x2d
	.byte	0
	.uleb128 0x8
	.long	.LASF455
	.byte	0x10
	.byte	0x26
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF456
	.byte	0x10
	.byte	0x27
	.long	0x123
	.byte	0x10
	.uleb128 0x8
	.long	.LASF453
	.byte	0x10
	.byte	0x28
	.long	0x11bb
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x117e
	.uleb128 0x3
	.byte	0x8
	.long	0x1059
	.uleb128 0x4
	.long	.LASF457
	.byte	0x58
	.byte	0x10
	.byte	0x35
	.long	0x1270
	.uleb128 0x8
	.long	.LASF458
	.byte	0x10
	.byte	0x39
	.long	0x1e3
	.byte	0
	.uleb128 0x8
	.long	.LASF459
	.byte	0x10
	.byte	0x3c
	.long	0x1e3
	.byte	0x4
	.uleb128 0x8
	.long	.LASF460
	.byte	0x10
	.byte	0x43
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF461
	.byte	0x10
	.byte	0x44
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF456
	.byte	0x10
	.byte	0x49
	.long	0x123
	.byte	0x18
	.uleb128 0x8
	.long	.LASF454
	.byte	0x10
	.byte	0x4f
	.long	0x11bb
	.byte	0x20
	.uleb128 0x8
	.long	.LASF462
	.byte	0x10
	.byte	0x53
	.long	0x1e3
	.byte	0x28
	.uleb128 0x8
	.long	.LASF463
	.byte	0x10
	.byte	0x57
	.long	0x1e3
	.byte	0x2c
	.uleb128 0x8
	.long	.LASF464
	.byte	0x10
	.byte	0x58
	.long	0x577
	.byte	0x30
	.uleb128 0x8
	.long	.LASF465
	.byte	0x10
	.byte	0x5e
	.long	0x1e3
	.byte	0x38
	.uleb128 0x8
	.long	.LASF466
	.byte	0x10
	.byte	0x63
	.long	0x1270
	.byte	0x40
	.uleb128 0x8
	.long	.LASF467
	.byte	0x10
	.byte	0x67
	.long	0x1276
	.byte	0x48
	.uleb128 0x8
	.long	.LASF468
	.byte	0x10
	.byte	0x6b
	.long	0xfc6
	.byte	0x50
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x332
	.uleb128 0x3
	.byte	0x8
	.long	0x123
	.uleb128 0x4
	.long	.LASF469
	.byte	0x30
	.byte	0x10
	.byte	0x77
	.long	0x12dd
	.uleb128 0x8
	.long	.LASF470
	.byte	0x10
	.byte	0x7b
	.long	0x1e3
	.byte	0
	.uleb128 0x8
	.long	.LASF471
	.byte	0x10
	.byte	0x8c
	.long	0x1e3
	.byte	0x4
	.uleb128 0x8
	.long	.LASF472
	.byte	0x10
	.byte	0x92
	.long	0x1e3
	.byte	0x8
	.uleb128 0x8
	.long	.LASF473
	.byte	0x10
	.byte	0x97
	.long	0x2d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF474
	.byte	0x10
	.byte	0x9a
	.long	0x2d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF475
	.byte	0x10
	.byte	0x9d
	.long	0x2d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF476
	.byte	0x10
	.byte	0xa0
	.long	0x2d
	.byte	0x28
	.byte	0
	.uleb128 0x22
	.long	.LASF477
	.value	0x1b0
	.byte	0x10
	.byte	0xae
	.long	0x175d
	.uleb128 0x6
	.string	"eh"
	.byte	0x10
	.byte	0xb0
	.long	0x1762
	.byte	0
	.uleb128 0x8
	.long	.LASF478
	.byte	0x10
	.byte	0xb1
	.long	0x176d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF322
	.byte	0x10
	.byte	0xb2
	.long	0x1773
	.byte	0x10
	.uleb128 0x8
	.long	.LASF479
	.byte	0x10
	.byte	0xb3
	.long	0x1779
	.byte	0x18
	.uleb128 0x8
	.long	.LASF480
	.byte	0x10
	.byte	0xb4
	.long	0x1784
	.byte	0x20
	.uleb128 0x8
	.long	.LASF481
	.byte	0x10
	.byte	0xb9
	.long	0x577
	.byte	0x28
	.uleb128 0x8
	.long	.LASF23
	.byte	0x10
	.byte	0xbc
	.long	0x123
	.byte	0x30
	.uleb128 0x8
	.long	.LASF482
	.byte	0x10
	.byte	0xbf
	.long	0x178a
	.byte	0x38
	.uleb128 0x8
	.long	.LASF483
	.byte	0x10
	.byte	0xc4
	.long	0x1e3
	.byte	0x40
	.uleb128 0x8
	.long	.LASF484
	.byte	0x10
	.byte	0xc9
	.long	0x1e3
	.byte	0x44
	.uleb128 0x8
	.long	.LASF485
	.byte	0x10
	.byte	0xce
	.long	0x1e3
	.byte	0x48
	.uleb128 0x8
	.long	.LASF486
	.byte	0x10
	.byte	0xd2
	.long	0x1e3
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF487
	.byte	0x10
	.byte	0xd6
	.long	0x2d
	.byte	0x50
	.uleb128 0x8
	.long	.LASF488
	.byte	0x10
	.byte	0xda
	.long	0x304
	.byte	0x58
	.uleb128 0x8
	.long	.LASF489
	.byte	0x10
	.byte	0xe0
	.long	0x2d
	.byte	0x78
	.uleb128 0x8
	.long	.LASF490
	.byte	0x10
	.byte	0xe3
	.long	0x2d
	.byte	0x80
	.uleb128 0x8
	.long	.LASF491
	.byte	0x10
	.byte	0xe7
	.long	0x577
	.byte	0x88
	.uleb128 0x8
	.long	.LASF492
	.byte	0x10
	.byte	0xeb
	.long	0x1795
	.byte	0x90
	.uleb128 0x8
	.long	.LASF493
	.byte	0x10
	.byte	0xee
	.long	0x1e3
	.byte	0x98
	.uleb128 0x8
	.long	.LASF494
	.byte	0x10
	.byte	0xf3
	.long	0x123
	.byte	0xa0
	.uleb128 0x8
	.long	.LASF495
	.byte	0x10
	.byte	0xf9
	.long	0x2d
	.byte	0xa8
	.uleb128 0x8
	.long	.LASF496
	.byte	0x10
	.byte	0xfd
	.long	0x2d
	.byte	0xb0
	.uleb128 0x12
	.long	.LASF497
	.byte	0x10
	.value	0x102
	.long	0x2d
	.byte	0xb8
	.uleb128 0x12
	.long	.LASF498
	.byte	0x10
	.value	0x108
	.long	0x2d
	.byte	0xc0
	.uleb128 0x12
	.long	.LASF499
	.byte	0x10
	.value	0x10d
	.long	0x2d
	.byte	0xc8
	.uleb128 0x12
	.long	.LASF500
	.byte	0x10
	.value	0x111
	.long	0x2d
	.byte	0xd0
	.uleb128 0x12
	.long	.LASF501
	.byte	0x10
	.value	0x115
	.long	0x2d
	.byte	0xd8
	.uleb128 0x12
	.long	.LASF502
	.byte	0x10
	.value	0x118
	.long	0x123
	.byte	0xe0
	.uleb128 0x12
	.long	.LASF503
	.byte	0x10
	.value	0x11c
	.long	0x2d
	.byte	0xe8
	.uleb128 0x12
	.long	.LASF504
	.byte	0x10
	.value	0x11f
	.long	0x2d
	.byte	0xf0
	.uleb128 0x12
	.long	.LASF505
	.byte	0x10
	.value	0x125
	.long	0x2d
	.byte	0xf8
	.uleb128 0x23
	.long	.LASF506
	.byte	0x10
	.value	0x12a
	.long	0x2d
	.value	0x100
	.uleb128 0x23
	.long	.LASF507
	.byte	0x10
	.value	0x12f
	.long	0x319
	.value	0x108
	.uleb128 0x23
	.long	.LASF508
	.byte	0x10
	.value	0x134
	.long	0x123
	.value	0x110
	.uleb128 0x23
	.long	.LASF509
	.byte	0x10
	.value	0x13d
	.long	0x123
	.value	0x118
	.uleb128 0x23
	.long	.LASF510
	.byte	0x10
	.value	0x140
	.long	0x2d
	.value	0x120
	.uleb128 0x23
	.long	.LASF511
	.byte	0x10
	.value	0x144
	.long	0x2d
	.value	0x128
	.uleb128 0x23
	.long	.LASF512
	.byte	0x10
	.value	0x148
	.long	0x310
	.value	0x130
	.uleb128 0x23
	.long	.LASF513
	.byte	0x10
	.value	0x14e
	.long	0xfc6
	.value	0x138
	.uleb128 0x23
	.long	.LASF514
	.byte	0x10
	.value	0x151
	.long	0x17a0
	.value	0x140
	.uleb128 0x23
	.long	.LASF515
	.byte	0x10
	.value	0x154
	.long	0x1e3
	.value	0x148
	.uleb128 0x23
	.long	.LASF516
	.byte	0x10
	.value	0x157
	.long	0x1e3
	.value	0x14c
	.uleb128 0x23
	.long	.LASF517
	.byte	0x10
	.value	0x15d
	.long	0x1e3
	.value	0x150
	.uleb128 0x23
	.long	.LASF518
	.byte	0x10
	.value	0x161
	.long	0x1178
	.value	0x158
	.uleb128 0x23
	.long	.LASF519
	.byte	0x10
	.value	0x164
	.long	0x1e3
	.value	0x160
	.uleb128 0x23
	.long	.LASF520
	.byte	0x10
	.value	0x165
	.long	0x1e3
	.value	0x164
	.uleb128 0x23
	.long	.LASF521
	.byte	0x10
	.value	0x167
	.long	0x317
	.value	0x168
	.uleb128 0x23
	.long	.LASF522
	.byte	0x10
	.value	0x168
	.long	0x123
	.value	0x170
	.uleb128 0x23
	.long	.LASF523
	.byte	0x10
	.value	0x16b
	.long	0x2d
	.value	0x178
	.uleb128 0x23
	.long	.LASF524
	.byte	0x10
	.value	0x16d
	.long	0x1e3
	.value	0x180
	.uleb128 0x23
	.long	.LASF525
	.byte	0x10
	.value	0x170
	.long	0x1e3
	.value	0x184
	.uleb128 0x23
	.long	.LASF526
	.byte	0x10
	.value	0x175
	.long	0x17ab
	.value	0x188
	.uleb128 0x23
	.long	.LASF527
	.byte	0x10
	.value	0x177
	.long	0x1e3
	.value	0x190
	.uleb128 0x23
	.long	.LASF528
	.byte	0x10
	.value	0x179
	.long	0x1e3
	.value	0x194
	.uleb128 0x23
	.long	.LASF529
	.byte	0x10
	.value	0x17c
	.long	0x17b6
	.value	0x198
	.uleb128 0x23
	.long	.LASF530
	.byte	0x10
	.value	0x182
	.long	0x2d
	.value	0x1a0
	.uleb128 0x24
	.long	.LASF531
	.byte	0x10
	.value	0x188
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF532
	.byte	0x10
	.value	0x18c
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF533
	.byte	0x10
	.value	0x18f
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF534
	.byte	0x10
	.value	0x192
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF535
	.byte	0x10
	.value	0x195
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF536
	.byte	0x10
	.value	0x198
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF537
	.byte	0x10
	.value	0x19c
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF538
	.byte	0x10
	.value	0x19f
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF539
	.byte	0x10
	.value	0x1a3
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF540
	.byte	0x10
	.value	0x1a7
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF541
	.byte	0x10
	.value	0x1aa
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF542
	.byte	0x10
	.value	0x1ad
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF543
	.byte	0x10
	.value	0x1b2
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF544
	.byte	0x10
	.value	0x1b6
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF545
	.byte	0x10
	.value	0x1b9
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF546
	.byte	0x10
	.value	0x1bd
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF547
	.byte	0x10
	.value	0x1c1
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF548
	.byte	0x10
	.value	0x1c5
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF549
	.byte	0x10
	.value	0x1cb
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF550
	.byte	0x10
	.value	0x1d4
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF551
	.byte	0x10
	.value	0x1d7
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF552
	.byte	0x10
	.value	0x1da
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF553
	.byte	0x10
	.value	0x1dd
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.value	0x1a8
	.uleb128 0x24
	.long	.LASF554
	.byte	0x10
	.value	0x1e0
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.value	0x1a8
	.byte	0
	.uleb128 0x25
	.long	.LASF555
	.uleb128 0x3
	.byte	0x8
	.long	0x175d
	.uleb128 0x25
	.long	.LASF556
	.uleb128 0x3
	.byte	0x8
	.long	0x1768
	.uleb128 0x3
	.byte	0x8
	.long	0x127c
	.uleb128 0x3
	.byte	0x8
	.long	0x11c7
	.uleb128 0x25
	.long	.LASF557
	.uleb128 0x3
	.byte	0x8
	.long	0x177f
	.uleb128 0x3
	.byte	0x8
	.long	0x12dd
	.uleb128 0x25
	.long	.LASF558
	.uleb128 0x3
	.byte	0x8
	.long	0x1790
	.uleb128 0x25
	.long	.LASF559
	.uleb128 0x3
	.byte	0x8
	.long	0x179b
	.uleb128 0x25
	.long	.LASF560
	.uleb128 0x3
	.byte	0x8
	.long	0x17a6
	.uleb128 0x25
	.long	.LASF561
	.uleb128 0x3
	.byte	0x8
	.long	0x17b1
	.uleb128 0x19
	.long	.LASF562
	.byte	0x4
	.byte	0x11
	.byte	0x7
	.long	0x26a9
	.uleb128 0x10
	.long	.LASF563
	.sleb128 0
	.uleb128 0x10
	.long	.LASF564
	.sleb128 2
	.uleb128 0x10
	.long	.LASF565
	.sleb128 15
	.uleb128 0x10
	.long	.LASF566
	.sleb128 16
	.uleb128 0x10
	.long	.LASF567
	.sleb128 30
	.uleb128 0x10
	.long	.LASF568
	.sleb128 31
	.uleb128 0x10
	.long	.LASF569
	.sleb128 42
	.uleb128 0x10
	.long	.LASF570
	.sleb128 73
	.uleb128 0x10
	.long	.LASF571
	.sleb128 77
	.uleb128 0x10
	.long	.LASF572
	.sleb128 80
	.uleb128 0x10
	.long	.LASF573
	.sleb128 105
	.uleb128 0x10
	.long	.LASF574
	.sleb128 106
	.uleb128 0x10
	.long	.LASF575
	.sleb128 107
	.uleb128 0x10
	.long	.LASF576
	.sleb128 115
	.uleb128 0x10
	.long	.LASF577
	.sleb128 116
	.uleb128 0x10
	.long	.LASF578
	.sleb128 117
	.uleb128 0x10
	.long	.LASF579
	.sleb128 118
	.uleb128 0x10
	.long	.LASF580
	.sleb128 120
	.uleb128 0x10
	.long	.LASF581
	.sleb128 121
	.uleb128 0x10
	.long	.LASF582
	.sleb128 122
	.uleb128 0x10
	.long	.LASF583
	.sleb128 123
	.uleb128 0x10
	.long	.LASF584
	.sleb128 125
	.uleb128 0x10
	.long	.LASF585
	.sleb128 126
	.uleb128 0x10
	.long	.LASF586
	.sleb128 142
	.uleb128 0x10
	.long	.LASF587
	.sleb128 143
	.uleb128 0x10
	.long	.LASF588
	.sleb128 153
	.uleb128 0x10
	.long	.LASF589
	.sleb128 154
	.uleb128 0x10
	.long	.LASF590
	.sleb128 155
	.uleb128 0x10
	.long	.LASF591
	.sleb128 156
	.uleb128 0x10
	.long	.LASF592
	.sleb128 158
	.uleb128 0x10
	.long	.LASF593
	.sleb128 159
	.uleb128 0x10
	.long	.LASF594
	.sleb128 160
	.uleb128 0x10
	.long	.LASF595
	.sleb128 161
	.uleb128 0x10
	.long	.LASF596
	.sleb128 163
	.uleb128 0x10
	.long	.LASF597
	.sleb128 164
	.uleb128 0x10
	.long	.LASF598
	.sleb128 165
	.uleb128 0x10
	.long	.LASF599
	.sleb128 166
	.uleb128 0x10
	.long	.LASF600
	.sleb128 167
	.uleb128 0x10
	.long	.LASF601
	.sleb128 173
	.uleb128 0x10
	.long	.LASF602
	.sleb128 179
	.uleb128 0x10
	.long	.LASF603
	.sleb128 180
	.uleb128 0x10
	.long	.LASF604
	.sleb128 181
	.uleb128 0x10
	.long	.LASF605
	.sleb128 182
	.uleb128 0x10
	.long	.LASF606
	.sleb128 183
	.uleb128 0x10
	.long	.LASF607
	.sleb128 184
	.uleb128 0x10
	.long	.LASF608
	.sleb128 191
	.uleb128 0x10
	.long	.LASF609
	.sleb128 208
	.uleb128 0x10
	.long	.LASF610
	.sleb128 227
	.uleb128 0x10
	.long	.LASF611
	.sleb128 231
	.uleb128 0x10
	.long	.LASF612
	.sleb128 235
	.uleb128 0x10
	.long	.LASF613
	.sleb128 236
	.uleb128 0x10
	.long	.LASF614
	.sleb128 266
	.uleb128 0x10
	.long	.LASF615
	.sleb128 267
	.uleb128 0x10
	.long	.LASF616
	.sleb128 274
	.uleb128 0x10
	.long	.LASF617
	.sleb128 275
	.uleb128 0x10
	.long	.LASF618
	.sleb128 277
	.uleb128 0x10
	.long	.LASF619
	.sleb128 281
	.uleb128 0x10
	.long	.LASF620
	.sleb128 302
	.uleb128 0x10
	.long	.LASF621
	.sleb128 355
	.uleb128 0x10
	.long	.LASF622
	.sleb128 356
	.uleb128 0x10
	.long	.LASF623
	.sleb128 358
	.uleb128 0x10
	.long	.LASF624
	.sleb128 359
	.uleb128 0x10
	.long	.LASF625
	.sleb128 374
	.uleb128 0x10
	.long	.LASF626
	.sleb128 375
	.uleb128 0x10
	.long	.LASF627
	.sleb128 377
	.uleb128 0x10
	.long	.LASF628
	.sleb128 378
	.uleb128 0x10
	.long	.LASF629
	.sleb128 405
	.uleb128 0x10
	.long	.LASF630
	.sleb128 407
	.uleb128 0x10
	.long	.LASF631
	.sleb128 418
	.uleb128 0x10
	.long	.LASF632
	.sleb128 423
	.uleb128 0x10
	.long	.LASF633
	.sleb128 425
	.uleb128 0x10
	.long	.LASF634
	.sleb128 426
	.uleb128 0x10
	.long	.LASF635
	.sleb128 448
	.uleb128 0x10
	.long	.LASF636
	.sleb128 487
	.uleb128 0x10
	.long	.LASF637
	.sleb128 502
	.uleb128 0x10
	.long	.LASF638
	.sleb128 507
	.uleb128 0x10
	.long	.LASF639
	.sleb128 513
	.uleb128 0x10
	.long	.LASF640
	.sleb128 514
	.uleb128 0x10
	.long	.LASF641
	.sleb128 515
	.uleb128 0x10
	.long	.LASF642
	.sleb128 516
	.uleb128 0x10
	.long	.LASF643
	.sleb128 517
	.uleb128 0x10
	.long	.LASF644
	.sleb128 518
	.uleb128 0x10
	.long	.LASF645
	.sleb128 519
	.uleb128 0x10
	.long	.LASF646
	.sleb128 520
	.uleb128 0x10
	.long	.LASF647
	.sleb128 521
	.uleb128 0x10
	.long	.LASF648
	.sleb128 522
	.uleb128 0x10
	.long	.LASF649
	.sleb128 523
	.uleb128 0x10
	.long	.LASF650
	.sleb128 524
	.uleb128 0x10
	.long	.LASF651
	.sleb128 559
	.uleb128 0x10
	.long	.LASF652
	.sleb128 560
	.uleb128 0x10
	.long	.LASF653
	.sleb128 561
	.uleb128 0x10
	.long	.LASF654
	.sleb128 562
	.uleb128 0x10
	.long	.LASF655
	.sleb128 563
	.uleb128 0x10
	.long	.LASF656
	.sleb128 564
	.uleb128 0x10
	.long	.LASF657
	.sleb128 566
	.uleb128 0x10
	.long	.LASF658
	.sleb128 567
	.uleb128 0x10
	.long	.LASF659
	.sleb128 572
	.uleb128 0x10
	.long	.LASF660
	.sleb128 573
	.uleb128 0x10
	.long	.LASF661
	.sleb128 575
	.uleb128 0x10
	.long	.LASF662
	.sleb128 576
	.uleb128 0x10
	.long	.LASF663
	.sleb128 577
	.uleb128 0x10
	.long	.LASF664
	.sleb128 578
	.uleb128 0x10
	.long	.LASF665
	.sleb128 580
	.uleb128 0x10
	.long	.LASF666
	.sleb128 581
	.uleb128 0x10
	.long	.LASF667
	.sleb128 582
	.uleb128 0x10
	.long	.LASF668
	.sleb128 583
	.uleb128 0x10
	.long	.LASF669
	.sleb128 584
	.uleb128 0x10
	.long	.LASF670
	.sleb128 585
	.uleb128 0x10
	.long	.LASF671
	.sleb128 586
	.uleb128 0x10
	.long	.LASF672
	.sleb128 587
	.uleb128 0x10
	.long	.LASF673
	.sleb128 588
	.uleb128 0x10
	.long	.LASF674
	.sleb128 589
	.uleb128 0x10
	.long	.LASF675
	.sleb128 590
	.uleb128 0x10
	.long	.LASF676
	.sleb128 591
	.uleb128 0x10
	.long	.LASF677
	.sleb128 592
	.uleb128 0x10
	.long	.LASF678
	.sleb128 593
	.uleb128 0x10
	.long	.LASF679
	.sleb128 594
	.uleb128 0x10
	.long	.LASF680
	.sleb128 595
	.uleb128 0x10
	.long	.LASF681
	.sleb128 596
	.uleb128 0x10
	.long	.LASF682
	.sleb128 597
	.uleb128 0x10
	.long	.LASF683
	.sleb128 598
	.uleb128 0x10
	.long	.LASF684
	.sleb128 599
	.uleb128 0x10
	.long	.LASF685
	.sleb128 600
	.uleb128 0x10
	.long	.LASF686
	.sleb128 601
	.uleb128 0x10
	.long	.LASF687
	.sleb128 602
	.uleb128 0x10
	.long	.LASF688
	.sleb128 603
	.uleb128 0x10
	.long	.LASF689
	.sleb128 604
	.uleb128 0x10
	.long	.LASF690
	.sleb128 605
	.uleb128 0x10
	.long	.LASF691
	.sleb128 606
	.uleb128 0x10
	.long	.LASF692
	.sleb128 607
	.uleb128 0x10
	.long	.LASF693
	.sleb128 608
	.uleb128 0x10
	.long	.LASF694
	.sleb128 609
	.uleb128 0x10
	.long	.LASF695
	.sleb128 610
	.uleb128 0x10
	.long	.LASF696
	.sleb128 611
	.uleb128 0x10
	.long	.LASF697
	.sleb128 612
	.uleb128 0x10
	.long	.LASF698
	.sleb128 613
	.uleb128 0x10
	.long	.LASF699
	.sleb128 615
	.uleb128 0x10
	.long	.LASF700
	.sleb128 636
	.uleb128 0x10
	.long	.LASF701
	.sleb128 637
	.uleb128 0x10
	.long	.LASF702
	.sleb128 638
	.uleb128 0x10
	.long	.LASF703
	.sleb128 639
	.uleb128 0x10
	.long	.LASF704
	.sleb128 640
	.uleb128 0x10
	.long	.LASF705
	.sleb128 649
	.uleb128 0x10
	.long	.LASF706
	.sleb128 650
	.uleb128 0x10
	.long	.LASF707
	.sleb128 657
	.uleb128 0x10
	.long	.LASF708
	.sleb128 659
	.uleb128 0x10
	.long	.LASF709
	.sleb128 660
	.uleb128 0x10
	.long	.LASF710
	.sleb128 661
	.uleb128 0x10
	.long	.LASF711
	.sleb128 662
	.uleb128 0x10
	.long	.LASF712
	.sleb128 663
	.uleb128 0x10
	.long	.LASF713
	.sleb128 664
	.uleb128 0x10
	.long	.LASF714
	.sleb128 672
	.uleb128 0x10
	.long	.LASF715
	.sleb128 674
	.uleb128 0x10
	.long	.LASF716
	.sleb128 675
	.uleb128 0x10
	.long	.LASF717
	.sleb128 676
	.uleb128 0x10
	.long	.LASF718
	.sleb128 677
	.uleb128 0x10
	.long	.LASF719
	.sleb128 678
	.uleb128 0x10
	.long	.LASF720
	.sleb128 679
	.uleb128 0x10
	.long	.LASF721
	.sleb128 680
	.uleb128 0x10
	.long	.LASF722
	.sleb128 681
	.uleb128 0x10
	.long	.LASF723
	.sleb128 682
	.uleb128 0x10
	.long	.LASF724
	.sleb128 683
	.uleb128 0x10
	.long	.LASF725
	.sleb128 684
	.uleb128 0x10
	.long	.LASF726
	.sleb128 685
	.uleb128 0x10
	.long	.LASF727
	.sleb128 686
	.uleb128 0x10
	.long	.LASF728
	.sleb128 687
	.uleb128 0x10
	.long	.LASF729
	.sleb128 688
	.uleb128 0x10
	.long	.LASF730
	.sleb128 689
	.uleb128 0x10
	.long	.LASF731
	.sleb128 690
	.uleb128 0x10
	.long	.LASF732
	.sleb128 691
	.uleb128 0x10
	.long	.LASF733
	.sleb128 692
	.uleb128 0x10
	.long	.LASF734
	.sleb128 693
	.uleb128 0x10
	.long	.LASF735
	.sleb128 694
	.uleb128 0x10
	.long	.LASF736
	.sleb128 695
	.uleb128 0x10
	.long	.LASF737
	.sleb128 696
	.uleb128 0x10
	.long	.LASF738
	.sleb128 697
	.uleb128 0x10
	.long	.LASF739
	.sleb128 698
	.uleb128 0x10
	.long	.LASF740
	.sleb128 699
	.uleb128 0x10
	.long	.LASF741
	.sleb128 700
	.uleb128 0x10
	.long	.LASF742
	.sleb128 701
	.uleb128 0x10
	.long	.LASF743
	.sleb128 702
	.uleb128 0x10
	.long	.LASF744
	.sleb128 703
	.uleb128 0x10
	.long	.LASF745
	.sleb128 708
	.uleb128 0x10
	.long	.LASF746
	.sleb128 712
	.uleb128 0x10
	.long	.LASF747
	.sleb128 718
	.uleb128 0x10
	.long	.LASF748
	.sleb128 724
	.uleb128 0x10
	.long	.LASF749
	.sleb128 726
	.uleb128 0x10
	.long	.LASF750
	.sleb128 727
	.uleb128 0x10
	.long	.LASF751
	.sleb128 728
	.uleb128 0x10
	.long	.LASF752
	.sleb128 729
	.uleb128 0x10
	.long	.LASF753
	.sleb128 730
	.uleb128 0x10
	.long	.LASF754
	.sleb128 731
	.uleb128 0x10
	.long	.LASF755
	.sleb128 732
	.uleb128 0x10
	.long	.LASF756
	.sleb128 733
	.uleb128 0x10
	.long	.LASF757
	.sleb128 734
	.uleb128 0x10
	.long	.LASF758
	.sleb128 735
	.uleb128 0x10
	.long	.LASF759
	.sleb128 736
	.uleb128 0x10
	.long	.LASF760
	.sleb128 737
	.uleb128 0x10
	.long	.LASF761
	.sleb128 738
	.uleb128 0x10
	.long	.LASF762
	.sleb128 739
	.uleb128 0x10
	.long	.LASF763
	.sleb128 740
	.uleb128 0x10
	.long	.LASF764
	.sleb128 741
	.uleb128 0x10
	.long	.LASF765
	.sleb128 742
	.uleb128 0x10
	.long	.LASF766
	.sleb128 743
	.uleb128 0x10
	.long	.LASF767
	.sleb128 744
	.uleb128 0x10
	.long	.LASF768
	.sleb128 745
	.uleb128 0x10
	.long	.LASF769
	.sleb128 746
	.uleb128 0x10
	.long	.LASF770
	.sleb128 747
	.uleb128 0x10
	.long	.LASF771
	.sleb128 748
	.uleb128 0x10
	.long	.LASF772
	.sleb128 749
	.uleb128 0x10
	.long	.LASF773
	.sleb128 750
	.uleb128 0x10
	.long	.LASF774
	.sleb128 751
	.uleb128 0x10
	.long	.LASF775
	.sleb128 752
	.uleb128 0x10
	.long	.LASF776
	.sleb128 753
	.uleb128 0x10
	.long	.LASF777
	.sleb128 754
	.uleb128 0x10
	.long	.LASF778
	.sleb128 755
	.uleb128 0x10
	.long	.LASF779
	.sleb128 756
	.uleb128 0x10
	.long	.LASF780
	.sleb128 757
	.uleb128 0x10
	.long	.LASF781
	.sleb128 758
	.uleb128 0x10
	.long	.LASF782
	.sleb128 759
	.uleb128 0x10
	.long	.LASF783
	.sleb128 760
	.uleb128 0x10
	.long	.LASF784
	.sleb128 761
	.uleb128 0x10
	.long	.LASF785
	.sleb128 762
	.uleb128 0x10
	.long	.LASF786
	.sleb128 763
	.uleb128 0x10
	.long	.LASF787
	.sleb128 764
	.uleb128 0x10
	.long	.LASF788
	.sleb128 765
	.uleb128 0x10
	.long	.LASF789
	.sleb128 766
	.uleb128 0x10
	.long	.LASF790
	.sleb128 767
	.uleb128 0x10
	.long	.LASF791
	.sleb128 768
	.uleb128 0x10
	.long	.LASF792
	.sleb128 769
	.uleb128 0x10
	.long	.LASF793
	.sleb128 770
	.uleb128 0x10
	.long	.LASF794
	.sleb128 771
	.uleb128 0x10
	.long	.LASF795
	.sleb128 772
	.uleb128 0x10
	.long	.LASF796
	.sleb128 773
	.uleb128 0x10
	.long	.LASF797
	.sleb128 774
	.uleb128 0x10
	.long	.LASF798
	.sleb128 775
	.uleb128 0x10
	.long	.LASF799
	.sleb128 776
	.uleb128 0x10
	.long	.LASF800
	.sleb128 777
	.uleb128 0x10
	.long	.LASF801
	.sleb128 778
	.uleb128 0x10
	.long	.LASF802
	.sleb128 779
	.uleb128 0x10
	.long	.LASF803
	.sleb128 780
	.uleb128 0x10
	.long	.LASF804
	.sleb128 781
	.uleb128 0x10
	.long	.LASF805
	.sleb128 782
	.uleb128 0x10
	.long	.LASF806
	.sleb128 783
	.uleb128 0x10
	.long	.LASF807
	.sleb128 784
	.uleb128 0x10
	.long	.LASF808
	.sleb128 785
	.uleb128 0x10
	.long	.LASF809
	.sleb128 786
	.uleb128 0x10
	.long	.LASF810
	.sleb128 787
	.uleb128 0x10
	.long	.LASF811
	.sleb128 788
	.uleb128 0x10
	.long	.LASF812
	.sleb128 789
	.uleb128 0x10
	.long	.LASF813
	.sleb128 790
	.uleb128 0x10
	.long	.LASF814
	.sleb128 791
	.uleb128 0x10
	.long	.LASF815
	.sleb128 792
	.uleb128 0x10
	.long	.LASF816
	.sleb128 793
	.uleb128 0x10
	.long	.LASF817
	.sleb128 794
	.uleb128 0x10
	.long	.LASF818
	.sleb128 795
	.uleb128 0x10
	.long	.LASF819
	.sleb128 796
	.uleb128 0x10
	.long	.LASF820
	.sleb128 797
	.uleb128 0x10
	.long	.LASF821
	.sleb128 798
	.uleb128 0x10
	.long	.LASF822
	.sleb128 799
	.uleb128 0x10
	.long	.LASF823
	.sleb128 800
	.uleb128 0x10
	.long	.LASF824
	.sleb128 801
	.uleb128 0x10
	.long	.LASF825
	.sleb128 802
	.uleb128 0x10
	.long	.LASF826
	.sleb128 803
	.uleb128 0x10
	.long	.LASF827
	.sleb128 806
	.uleb128 0x10
	.long	.LASF828
	.sleb128 807
	.uleb128 0x10
	.long	.LASF829
	.sleb128 808
	.uleb128 0x10
	.long	.LASF830
	.sleb128 809
	.uleb128 0x10
	.long	.LASF831
	.sleb128 810
	.uleb128 0x10
	.long	.LASF832
	.sleb128 811
	.uleb128 0x10
	.long	.LASF833
	.sleb128 812
	.uleb128 0x10
	.long	.LASF834
	.sleb128 813
	.uleb128 0x10
	.long	.LASF835
	.sleb128 814
	.uleb128 0x10
	.long	.LASF836
	.sleb128 815
	.uleb128 0x10
	.long	.LASF837
	.sleb128 816
	.uleb128 0x10
	.long	.LASF838
	.sleb128 817
	.uleb128 0x10
	.long	.LASF839
	.sleb128 818
	.uleb128 0x10
	.long	.LASF840
	.sleb128 819
	.uleb128 0x10
	.long	.LASF841
	.sleb128 820
	.uleb128 0x10
	.long	.LASF842
	.sleb128 821
	.uleb128 0x10
	.long	.LASF843
	.sleb128 822
	.uleb128 0x10
	.long	.LASF844
	.sleb128 823
	.uleb128 0x10
	.long	.LASF845
	.sleb128 824
	.uleb128 0x10
	.long	.LASF846
	.sleb128 825
	.uleb128 0x10
	.long	.LASF847
	.sleb128 826
	.uleb128 0x10
	.long	.LASF848
	.sleb128 827
	.uleb128 0x10
	.long	.LASF849
	.sleb128 828
	.uleb128 0x10
	.long	.LASF850
	.sleb128 829
	.uleb128 0x10
	.long	.LASF851
	.sleb128 830
	.uleb128 0x10
	.long	.LASF852
	.sleb128 831
	.uleb128 0x10
	.long	.LASF853
	.sleb128 834
	.uleb128 0x10
	.long	.LASF854
	.sleb128 835
	.uleb128 0x10
	.long	.LASF855
	.sleb128 836
	.uleb128 0x10
	.long	.LASF856
	.sleb128 837
	.uleb128 0x10
	.long	.LASF857
	.sleb128 838
	.uleb128 0x10
	.long	.LASF858
	.sleb128 839
	.uleb128 0x10
	.long	.LASF859
	.sleb128 840
	.uleb128 0x10
	.long	.LASF860
	.sleb128 841
	.uleb128 0x10
	.long	.LASF861
	.sleb128 842
	.uleb128 0x10
	.long	.LASF862
	.sleb128 843
	.uleb128 0x10
	.long	.LASF863
	.sleb128 844
	.uleb128 0x10
	.long	.LASF864
	.sleb128 846
	.uleb128 0x10
	.long	.LASF865
	.sleb128 847
	.uleb128 0x10
	.long	.LASF866
	.sleb128 848
	.uleb128 0x10
	.long	.LASF867
	.sleb128 849
	.uleb128 0x10
	.long	.LASF868
	.sleb128 850
	.uleb128 0x10
	.long	.LASF869
	.sleb128 851
	.uleb128 0x10
	.long	.LASF870
	.sleb128 852
	.uleb128 0x10
	.long	.LASF871
	.sleb128 861
	.uleb128 0x10
	.long	.LASF872
	.sleb128 865
	.uleb128 0x10
	.long	.LASF873
	.sleb128 870
	.uleb128 0x10
	.long	.LASF874
	.sleb128 871
	.uleb128 0x10
	.long	.LASF875
	.sleb128 878
	.uleb128 0x10
	.long	.LASF876
	.sleb128 880
	.uleb128 0x10
	.long	.LASF877
	.sleb128 884
	.uleb128 0x10
	.long	.LASF878
	.sleb128 888
	.uleb128 0x10
	.long	.LASF879
	.sleb128 892
	.uleb128 0x10
	.long	.LASF880
	.sleb128 904
	.uleb128 0x10
	.long	.LASF881
	.sleb128 905
	.uleb128 0x10
	.long	.LASF882
	.sleb128 906
	.uleb128 0x10
	.long	.LASF883
	.sleb128 907
	.uleb128 0x10
	.long	.LASF884
	.sleb128 908
	.uleb128 0x10
	.long	.LASF885
	.sleb128 909
	.uleb128 0x10
	.long	.LASF886
	.sleb128 913
	.uleb128 0x10
	.long	.LASF887
	.sleb128 916
	.uleb128 0x10
	.long	.LASF888
	.sleb128 919
	.uleb128 0x10
	.long	.LASF889
	.sleb128 922
	.uleb128 0x10
	.long	.LASF890
	.sleb128 925
	.uleb128 0x10
	.long	.LASF891
	.sleb128 926
	.uleb128 0x10
	.long	.LASF892
	.sleb128 927
	.uleb128 0x10
	.long	.LASF893
	.sleb128 928
	.uleb128 0x10
	.long	.LASF894
	.sleb128 932
	.uleb128 0x10
	.long	.LASF895
	.sleb128 933
	.uleb128 0x10
	.long	.LASF896
	.sleb128 934
	.uleb128 0x10
	.long	.LASF897
	.sleb128 935
	.uleb128 0x10
	.long	.LASF898
	.sleb128 939
	.uleb128 0x10
	.long	.LASF899
	.sleb128 940
	.uleb128 0x10
	.long	.LASF900
	.sleb128 941
	.uleb128 0x10
	.long	.LASF901
	.sleb128 942
	.uleb128 0x10
	.long	.LASF902
	.sleb128 946
	.uleb128 0x10
	.long	.LASF903
	.sleb128 947
	.uleb128 0x10
	.long	.LASF904
	.sleb128 948
	.uleb128 0x10
	.long	.LASF905
	.sleb128 949
	.uleb128 0x10
	.long	.LASF906
	.sleb128 951
	.uleb128 0x10
	.long	.LASF907
	.sleb128 953
	.uleb128 0x10
	.long	.LASF908
	.sleb128 963
	.uleb128 0x10
	.long	.LASF909
	.sleb128 964
	.uleb128 0x10
	.long	.LASF910
	.sleb128 965
	.uleb128 0x10
	.long	.LASF911
	.sleb128 966
	.uleb128 0x10
	.long	.LASF912
	.sleb128 967
	.uleb128 0x10
	.long	.LASF913
	.sleb128 968
	.uleb128 0x10
	.long	.LASF914
	.sleb128 969
	.uleb128 0x10
	.long	.LASF915
	.sleb128 971
	.uleb128 0x10
	.long	.LASF916
	.sleb128 972
	.uleb128 0x10
	.long	.LASF917
	.sleb128 973
	.uleb128 0x10
	.long	.LASF918
	.sleb128 974
	.uleb128 0x10
	.long	.LASF919
	.sleb128 975
	.uleb128 0x10
	.long	.LASF920
	.sleb128 976
	.uleb128 0x10
	.long	.LASF921
	.sleb128 977
	.uleb128 0x10
	.long	.LASF922
	.sleb128 978
	.uleb128 0x10
	.long	.LASF923
	.sleb128 979
	.uleb128 0x10
	.long	.LASF924
	.sleb128 980
	.uleb128 0x10
	.long	.LASF925
	.sleb128 981
	.uleb128 0x10
	.long	.LASF926
	.sleb128 982
	.uleb128 0x10
	.long	.LASF927
	.sleb128 983
	.uleb128 0x10
	.long	.LASF928
	.sleb128 984
	.uleb128 0x10
	.long	.LASF929
	.sleb128 985
	.uleb128 0x10
	.long	.LASF930
	.sleb128 986
	.uleb128 0x10
	.long	.LASF931
	.sleb128 987
	.uleb128 0x10
	.long	.LASF932
	.sleb128 988
	.uleb128 0x10
	.long	.LASF933
	.sleb128 989
	.uleb128 0x10
	.long	.LASF934
	.sleb128 990
	.uleb128 0x10
	.long	.LASF935
	.sleb128 991
	.uleb128 0x10
	.long	.LASF936
	.sleb128 992
	.uleb128 0x10
	.long	.LASF937
	.sleb128 993
	.uleb128 0x10
	.long	.LASF938
	.sleb128 994
	.uleb128 0x10
	.long	.LASF939
	.sleb128 995
	.uleb128 0x10
	.long	.LASF940
	.sleb128 996
	.uleb128 0x10
	.long	.LASF941
	.sleb128 997
	.uleb128 0x10
	.long	.LASF942
	.sleb128 998
	.uleb128 0x10
	.long	.LASF943
	.sleb128 999
	.uleb128 0x10
	.long	.LASF944
	.sleb128 1000
	.uleb128 0x10
	.long	.LASF945
	.sleb128 1002
	.uleb128 0x10
	.long	.LASF946
	.sleb128 1006
	.uleb128 0x10
	.long	.LASF947
	.sleb128 1007
	.uleb128 0x10
	.long	.LASF948
	.sleb128 1008
	.uleb128 0x10
	.long	.LASF949
	.sleb128 1009
	.uleb128 0x10
	.long	.LASF950
	.sleb128 1011
	.uleb128 0x10
	.long	.LASF951
	.sleb128 1012
	.uleb128 0x10
	.long	.LASF952
	.sleb128 1016
	.uleb128 0x10
	.long	.LASF953
	.sleb128 1017
	.uleb128 0x10
	.long	.LASF954
	.sleb128 1018
	.uleb128 0x10
	.long	.LASF955
	.sleb128 1019
	.uleb128 0x10
	.long	.LASF956
	.sleb128 1020
	.uleb128 0x10
	.long	.LASF957
	.sleb128 1021
	.uleb128 0x10
	.long	.LASF958
	.sleb128 1022
	.uleb128 0x10
	.long	.LASF959
	.sleb128 1023
	.uleb128 0x10
	.long	.LASF960
	.sleb128 1024
	.uleb128 0x10
	.long	.LASF961
	.sleb128 1025
	.uleb128 0x10
	.long	.LASF962
	.sleb128 1026
	.uleb128 0x10
	.long	.LASF963
	.sleb128 1027
	.uleb128 0x10
	.long	.LASF964
	.sleb128 1029
	.uleb128 0x10
	.long	.LASF965
	.sleb128 1030
	.uleb128 0x10
	.long	.LASF966
	.sleb128 1031
	.uleb128 0x10
	.long	.LASF967
	.sleb128 1032
	.uleb128 0x10
	.long	.LASF968
	.sleb128 1039
	.uleb128 0x10
	.long	.LASF969
	.sleb128 1046
	.uleb128 0x10
	.long	.LASF970
	.sleb128 1047
	.uleb128 0x10
	.long	.LASF971
	.sleb128 1052
	.uleb128 0x10
	.long	.LASF972
	.sleb128 1059
	.uleb128 0x10
	.long	.LASF973
	.sleb128 1065
	.uleb128 0x10
	.long	.LASF974
	.sleb128 1066
	.uleb128 0x10
	.long	.LASF975
	.sleb128 1071
	.uleb128 0x10
	.long	.LASF976
	.sleb128 1073
	.uleb128 0x10
	.long	.LASF977
	.sleb128 1076
	.uleb128 0x10
	.long	.LASF978
	.sleb128 1078
	.uleb128 0x10
	.long	.LASF979
	.sleb128 1080
	.uleb128 0x10
	.long	.LASF980
	.sleb128 1084
	.uleb128 0x10
	.long	.LASF981
	.sleb128 1085
	.uleb128 0x10
	.long	.LASF982
	.sleb128 1086
	.uleb128 0x10
	.long	.LASF983
	.sleb128 1089
	.uleb128 0x10
	.long	.LASF984
	.sleb128 1090
	.uleb128 0x10
	.long	.LASF985
	.sleb128 1091
	.uleb128 0x10
	.long	.LASF986
	.sleb128 1094
	.uleb128 0x10
	.long	.LASF987
	.sleb128 1095
	.uleb128 0x10
	.long	.LASF988
	.sleb128 1096
	.uleb128 0x10
	.long	.LASF989
	.sleb128 1097
	.uleb128 0x10
	.long	.LASF990
	.sleb128 1098
	.uleb128 0x10
	.long	.LASF991
	.sleb128 1101
	.uleb128 0x10
	.long	.LASF992
	.sleb128 1102
	.uleb128 0x10
	.long	.LASF993
	.sleb128 1103
	.uleb128 0x10
	.long	.LASF994
	.sleb128 1104
	.uleb128 0x10
	.long	.LASF995
	.sleb128 1105
	.uleb128 0x10
	.long	.LASF996
	.sleb128 1106
	.uleb128 0x10
	.long	.LASF997
	.sleb128 1107
	.uleb128 0x10
	.long	.LASF998
	.sleb128 1108
	.uleb128 0x10
	.long	.LASF999
	.sleb128 1109
	.uleb128 0x10
	.long	.LASF1000
	.sleb128 1110
	.uleb128 0x10
	.long	.LASF1001
	.sleb128 1111
	.uleb128 0x10
	.long	.LASF1002
	.sleb128 1112
	.uleb128 0x10
	.long	.LASF1003
	.sleb128 1113
	.uleb128 0x10
	.long	.LASF1004
	.sleb128 1114
	.uleb128 0x10
	.long	.LASF1005
	.sleb128 1115
	.uleb128 0x10
	.long	.LASF1006
	.sleb128 1116
	.uleb128 0x10
	.long	.LASF1007
	.sleb128 1117
	.uleb128 0x10
	.long	.LASF1008
	.sleb128 1118
	.uleb128 0x10
	.long	.LASF1009
	.sleb128 1119
	.uleb128 0x10
	.long	.LASF1010
	.sleb128 1120
	.uleb128 0x10
	.long	.LASF1011
	.sleb128 1121
	.uleb128 0x10
	.long	.LASF1012
	.sleb128 1122
	.uleb128 0x10
	.long	.LASF1013
	.sleb128 1123
	.uleb128 0x10
	.long	.LASF1014
	.sleb128 1124
	.uleb128 0x10
	.long	.LASF1015
	.sleb128 1125
	.uleb128 0x10
	.long	.LASF1016
	.sleb128 1126
	.uleb128 0x10
	.long	.LASF1017
	.sleb128 1127
	.uleb128 0x10
	.long	.LASF1018
	.sleb128 1128
	.uleb128 0x10
	.long	.LASF1019
	.sleb128 1129
	.uleb128 0x10
	.long	.LASF1020
	.sleb128 1130
	.uleb128 0x10
	.long	.LASF1021
	.sleb128 1131
	.uleb128 0x10
	.long	.LASF1022
	.sleb128 1132
	.uleb128 0x10
	.long	.LASF1023
	.sleb128 1137
	.uleb128 0x10
	.long	.LASF1024
	.sleb128 1138
	.uleb128 0x10
	.long	.LASF1025
	.sleb128 1139
	.uleb128 0x10
	.long	.LASF1026
	.sleb128 1140
	.uleb128 0x10
	.long	.LASF1027
	.sleb128 1141
	.uleb128 0x10
	.long	.LASF1028
	.sleb128 1142
	.uleb128 0x10
	.long	.LASF1029
	.sleb128 1143
	.uleb128 0x10
	.long	.LASF1030
	.sleb128 1144
	.uleb128 0x10
	.long	.LASF1031
	.sleb128 1145
	.uleb128 0x10
	.long	.LASF1032
	.sleb128 1146
	.uleb128 0x10
	.long	.LASF1033
	.sleb128 1147
	.uleb128 0x10
	.long	.LASF1034
	.sleb128 1148
	.uleb128 0x10
	.long	.LASF1035
	.sleb128 1149
	.uleb128 0x10
	.long	.LASF1036
	.sleb128 1150
	.uleb128 0x10
	.long	.LASF1037
	.sleb128 1151
	.uleb128 0x10
	.long	.LASF1038
	.sleb128 1152
	.uleb128 0x10
	.long	.LASF1039
	.sleb128 1153
	.uleb128 0x10
	.long	.LASF1040
	.sleb128 1154
	.uleb128 0x10
	.long	.LASF1041
	.sleb128 1159
	.uleb128 0x10
	.long	.LASF1042
	.sleb128 1160
	.uleb128 0x10
	.long	.LASF1043
	.sleb128 1161
	.uleb128 0x10
	.long	.LASF1044
	.sleb128 1166
	.uleb128 0x10
	.long	.LASF1045
	.sleb128 1167
	.uleb128 0x10
	.long	.LASF1046
	.sleb128 1168
	.uleb128 0x10
	.long	.LASF1047
	.sleb128 1169
	.uleb128 0x10
	.long	.LASF1048
	.sleb128 1170
	.uleb128 0x10
	.long	.LASF1049
	.sleb128 1171
	.uleb128 0x10
	.long	.LASF1050
	.sleb128 1172
	.uleb128 0x10
	.long	.LASF1051
	.sleb128 1173
	.uleb128 0x10
	.long	.LASF1052
	.sleb128 1174
	.uleb128 0x10
	.long	.LASF1053
	.sleb128 1175
	.uleb128 0x10
	.long	.LASF1054
	.sleb128 1176
	.uleb128 0x10
	.long	.LASF1055
	.sleb128 1177
	.uleb128 0x10
	.long	.LASF1056
	.sleb128 1180
	.uleb128 0x10
	.long	.LASF1057
	.sleb128 1183
	.uleb128 0x10
	.long	.LASF1058
	.sleb128 1184
	.uleb128 0x10
	.long	.LASF1059
	.sleb128 1185
	.uleb128 0x10
	.long	.LASF1060
	.sleb128 1186
	.uleb128 0x10
	.long	.LASF1061
	.sleb128 1187
	.uleb128 0x10
	.long	.LASF1062
	.sleb128 1188
	.uleb128 0x10
	.long	.LASF1063
	.sleb128 1189
	.uleb128 0x10
	.long	.LASF1064
	.sleb128 1190
	.uleb128 0x10
	.long	.LASF1065
	.sleb128 1191
	.uleb128 0x10
	.long	.LASF1066
	.sleb128 1192
	.uleb128 0x10
	.long	.LASF1067
	.sleb128 1193
	.uleb128 0x10
	.long	.LASF1068
	.sleb128 1194
	.uleb128 0x10
	.long	.LASF1069
	.sleb128 1195
	.uleb128 0x10
	.long	.LASF1070
	.sleb128 1196
	.uleb128 0x10
	.long	.LASF1071
	.sleb128 1197
	.uleb128 0x10
	.long	.LASF1072
	.sleb128 1198
	.uleb128 0x10
	.long	.LASF1073
	.sleb128 1199
	.uleb128 0x10
	.long	.LASF1074
	.sleb128 1200
	.uleb128 0x10
	.long	.LASF1075
	.sleb128 1201
	.uleb128 0x10
	.long	.LASF1076
	.sleb128 1202
	.uleb128 0x10
	.long	.LASF1077
	.sleb128 1203
	.uleb128 0x10
	.long	.LASF1078
	.sleb128 1204
	.uleb128 0x10
	.long	.LASF1079
	.sleb128 1205
	.uleb128 0x10
	.long	.LASF1080
	.sleb128 1206
	.uleb128 0x10
	.long	.LASF1081
	.sleb128 1209
	.uleb128 0x10
	.long	.LASF1082
	.sleb128 1210
	.uleb128 0x10
	.long	.LASF1083
	.sleb128 1211
	.uleb128 0x10
	.long	.LASF1084
	.sleb128 1212
	.uleb128 0x10
	.long	.LASF1085
	.sleb128 1213
	.uleb128 0x10
	.long	.LASF1086
	.sleb128 1215
	.uleb128 0x10
	.long	.LASF1087
	.sleb128 1216
	.uleb128 0x10
	.long	.LASF1088
	.sleb128 1217
	.uleb128 0x10
	.long	.LASF1089
	.sleb128 1220
	.uleb128 0x10
	.long	.LASF1090
	.sleb128 1223
	.uleb128 0x10
	.long	.LASF1091
	.sleb128 1226
	.uleb128 0x10
	.long	.LASF1092
	.sleb128 1229
	.uleb128 0x10
	.long	.LASF1093
	.sleb128 1233
	.uleb128 0x10
	.long	.LASF1094
	.sleb128 1234
	.uleb128 0x10
	.long	.LASF1095
	.sleb128 1235
	.uleb128 0x10
	.long	.LASF1096
	.sleb128 1298
	.uleb128 0x10
	.long	.LASF1097
	.sleb128 1299
	.uleb128 0x10
	.long	.LASF1098
	.sleb128 1300
	.uleb128 0x10
	.long	.LASF1099
	.sleb128 1301
	.uleb128 0x10
	.long	.LASF1100
	.sleb128 1302
	.uleb128 0x10
	.long	.LASF1101
	.sleb128 1303
	.uleb128 0x10
	.long	.LASF1102
	.sleb128 1304
	.uleb128 0x10
	.long	.LASF1103
	.sleb128 1305
	.uleb128 0x10
	.long	.LASF1104
	.sleb128 1314
	.uleb128 0x10
	.long	.LASF1105
	.sleb128 1315
	.uleb128 0x10
	.long	.LASF1106
	.sleb128 1316
	.uleb128 0x10
	.long	.LASF1107
	.sleb128 1317
	.byte	0
	.uleb128 0x1b
	.byte	0x10
	.byte	0x12
	.byte	0x2c
	.long	0x26ca
	.uleb128 0x8
	.long	.LASF562
	.byte	0x12
	.byte	0x2d
	.long	0x17bc
	.byte	0
	.uleb128 0x8
	.long	.LASF1108
	.byte	0x12
	.byte	0x2e
	.long	0x2d
	.byte	0x8
	.byte	0
	.uleb128 0x22
	.long	.LASF1109
	.value	0x3b8
	.byte	0x12
	.byte	0x29
	.long	0x26f0
	.uleb128 0x8
	.long	.LASF0
	.byte	0x12
	.byte	0x2b
	.long	0x766
	.byte	0
	.uleb128 0x8
	.long	.LASF1110
	.byte	0x12
	.byte	0x2f
	.long	0x26f0
	.byte	0x8
	.byte	0
	.uleb128 0x15
	.long	0x26a9
	.long	0x2700
	.uleb128 0x16
	.long	0x1ea
	.byte	0x3a
	.byte	0
	.uleb128 0x7
	.long	.LASF1109
	.byte	0x12
	.byte	0x30
	.long	0x270b
	.uleb128 0x3
	.byte	0x8
	.long	0x26ca
	.uleb128 0x19
	.long	.LASF1111
	.byte	0x4
	.byte	0x12
	.byte	0x37
	.long	0x284a
	.uleb128 0x10
	.long	.LASF1112
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1113
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1114
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1115
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1116
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1117
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1118
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1119
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1120
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1121
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1122
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1123
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1124
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1125
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1126
	.sleb128 14
	.uleb128 0x10
	.long	.LASF1127
	.sleb128 15
	.uleb128 0x10
	.long	.LASF1128
	.sleb128 16
	.uleb128 0x10
	.long	.LASF1129
	.sleb128 17
	.uleb128 0x10
	.long	.LASF1130
	.sleb128 18
	.uleb128 0x10
	.long	.LASF1131
	.sleb128 19
	.uleb128 0x10
	.long	.LASF1132
	.sleb128 20
	.uleb128 0x10
	.long	.LASF1133
	.sleb128 21
	.uleb128 0x10
	.long	.LASF1134
	.sleb128 22
	.uleb128 0x10
	.long	.LASF1135
	.sleb128 23
	.uleb128 0x10
	.long	.LASF1136
	.sleb128 24
	.uleb128 0x10
	.long	.LASF1137
	.sleb128 25
	.uleb128 0x10
	.long	.LASF1138
	.sleb128 26
	.uleb128 0x10
	.long	.LASF1139
	.sleb128 27
	.uleb128 0x10
	.long	.LASF1140
	.sleb128 28
	.uleb128 0x10
	.long	.LASF1141
	.sleb128 29
	.uleb128 0x10
	.long	.LASF1142
	.sleb128 30
	.uleb128 0x10
	.long	.LASF1143
	.sleb128 31
	.uleb128 0x10
	.long	.LASF1144
	.sleb128 32
	.uleb128 0x10
	.long	.LASF1145
	.sleb128 33
	.uleb128 0x10
	.long	.LASF1146
	.sleb128 34
	.uleb128 0x10
	.long	.LASF1147
	.sleb128 35
	.uleb128 0x10
	.long	.LASF1148
	.sleb128 36
	.uleb128 0x10
	.long	.LASF1149
	.sleb128 37
	.uleb128 0x10
	.long	.LASF1150
	.sleb128 38
	.uleb128 0x10
	.long	.LASF1151
	.sleb128 39
	.uleb128 0x10
	.long	.LASF1152
	.sleb128 40
	.uleb128 0x10
	.long	.LASF1153
	.sleb128 41
	.uleb128 0x10
	.long	.LASF1154
	.sleb128 42
	.uleb128 0x10
	.long	.LASF1155
	.sleb128 43
	.uleb128 0x10
	.long	.LASF1156
	.sleb128 44
	.uleb128 0x10
	.long	.LASF1157
	.sleb128 45
	.uleb128 0x10
	.long	.LASF1158
	.sleb128 46
	.uleb128 0x10
	.long	.LASF1159
	.sleb128 47
	.uleb128 0x10
	.long	.LASF1160
	.sleb128 48
	.uleb128 0x10
	.long	.LASF1161
	.sleb128 49
	.byte	0
	.uleb128 0x4
	.long	.LASF1162
	.byte	0x10
	.byte	0x13
	.byte	0x24
	.long	0x286f
	.uleb128 0x6
	.string	"rtx"
	.byte	0x13
	.byte	0x32
	.long	0x38
	.byte	0
	.uleb128 0x6
	.string	"age"
	.byte	0x13
	.byte	0x36
	.long	0x310
	.byte	0x8
	.byte	0
	.uleb128 0x1c
	.long	.LASF1163
	.byte	0x10
	.byte	0x13
	.byte	0x3a
	.long	0x2954
	.uleb128 0x1e
	.string	"c"
	.byte	0x13
	.byte	0x3b
	.long	0x551
	.uleb128 0x1e
	.string	"uc"
	.byte	0x13
	.byte	0x3c
	.long	0x2954
	.uleb128 0x1e
	.string	"s"
	.byte	0x13
	.byte	0x3d
	.long	0x2964
	.uleb128 0x1e
	.string	"us"
	.byte	0x13
	.byte	0x3e
	.long	0x2974
	.uleb128 0x1e
	.string	"i"
	.byte	0x13
	.byte	0x3f
	.long	0x2984
	.uleb128 0x1e
	.string	"u"
	.byte	0x13
	.byte	0x40
	.long	0x2994
	.uleb128 0x1e
	.string	"l"
	.byte	0x13
	.byte	0x41
	.long	0x29a4
	.uleb128 0x1e
	.string	"ul"
	.byte	0x13
	.byte	0x42
	.long	0x29b4
	.uleb128 0x1d
	.long	.LASF1164
	.byte	0x13
	.byte	0x43
	.long	0x29a4
	.uleb128 0x1d
	.long	.LASF1165
	.byte	0x13
	.byte	0x44
	.long	0x29b4
	.uleb128 0x1d
	.long	.LASF1166
	.byte	0x13
	.byte	0x45
	.long	0x29c4
	.uleb128 0x1d
	.long	.LASF1167
	.byte	0x13
	.byte	0x46
	.long	0x29d4
	.uleb128 0x1e
	.string	"rtx"
	.byte	0x13
	.byte	0x47
	.long	0x29e4
	.uleb128 0x1d
	.long	.LASF10
	.byte	0x13
	.byte	0x48
	.long	0x29f4
	.uleb128 0x1d
	.long	.LASF15
	.byte	0x13
	.byte	0x49
	.long	0x2a04
	.uleb128 0x1d
	.long	.LASF1168
	.byte	0x13
	.byte	0x4a
	.long	0x2a14
	.uleb128 0x1d
	.long	.LASF1169
	.byte	0x13
	.byte	0x4b
	.long	0x2a24
	.uleb128 0x1e
	.string	"reg"
	.byte	0x13
	.byte	0x4c
	.long	0x2a3f
	.uleb128 0x1d
	.long	.LASF1170
	.byte	0x13
	.byte	0x4d
	.long	0x2ae6
	.uleb128 0x1e
	.string	"bb"
	.byte	0x13
	.byte	0x4e
	.long	0x2af6
	.uleb128 0x1e
	.string	"te"
	.byte	0x13
	.byte	0x4f
	.long	0x2b06
	.byte	0
	.uleb128 0x15
	.long	0x332
	.long	0x2964
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x347
	.long	0x2974
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x339
	.long	0x2984
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x1e3
	.long	0x2994
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x310
	.long	0x29a4
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x319
	.long	0x29b4
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x32b
	.long	0x29c4
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x317
	.long	0x29d4
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x364
	.long	0x29e4
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x38
	.long	0x29f4
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0xf8
	.long	0x2a04
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x12e
	.long	0x2a14
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0xd4b
	.long	0x2a24
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x2a34
	.long	0x2a34
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2a3a
	.uleb128 0x25
	.long	.LASF1171
	.uleb128 0x15
	.long	0x2a4f
	.long	0x2a4f
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2a55
	.uleb128 0x4
	.long	.LASF1172
	.byte	0x2c
	.byte	0x14
	.byte	0x2d
	.long	0x2ae6
	.uleb128 0x8
	.long	.LASF1173
	.byte	0x14
	.byte	0x2f
	.long	0x1e3
	.byte	0
	.uleb128 0x8
	.long	.LASF1174
	.byte	0x14
	.byte	0x30
	.long	0x1e3
	.byte	0x4
	.uleb128 0x8
	.long	.LASF1175
	.byte	0x14
	.byte	0x31
	.long	0x1e3
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1176
	.byte	0x14
	.byte	0x34
	.long	0x1e3
	.byte	0xc
	.uleb128 0x8
	.long	.LASF1177
	.byte	0x14
	.byte	0x37
	.long	0x1e3
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1178
	.byte	0x14
	.byte	0x38
	.long	0x1e3
	.byte	0x14
	.uleb128 0x8
	.long	.LASF1179
	.byte	0x14
	.byte	0x39
	.long	0x1e3
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1180
	.byte	0x14
	.byte	0x3a
	.long	0x1e3
	.byte	0x1c
	.uleb128 0x8
	.long	.LASF1181
	.byte	0x14
	.byte	0x3b
	.long	0x1e3
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1182
	.byte	0x14
	.byte	0x3c
	.long	0x1e3
	.byte	0x24
	.uleb128 0x8
	.long	.LASF1183
	.byte	0x14
	.byte	0x3d
	.long	0x36a
	.byte	0x28
	.byte	0
	.uleb128 0x15
	.long	0x284a
	.long	0x2af6
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0xe1e
	.long	0x2b06
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x2b16
	.long	0x2b16
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2b1c
	.uleb128 0x4
	.long	.LASF1184
	.byte	0x10
	.byte	0xc
	.byte	0x37
	.long	0x2b41
	.uleb128 0x8
	.long	.LASF453
	.byte	0xc
	.byte	0x39
	.long	0x2b16
	.byte	0
	.uleb128 0x6
	.string	"elt"
	.byte	0xc
	.byte	0x3a
	.long	0x3237
	.byte	0x8
	.byte	0
	.uleb128 0x7
	.long	.LASF1185
	.byte	0x13
	.byte	0x50
	.long	0x286f
	.uleb128 0x4
	.long	.LASF1186
	.byte	0x30
	.byte	0x13
	.byte	0x53
	.long	0x2b95
	.uleb128 0x8
	.long	.LASF1187
	.byte	0x13
	.byte	0x54
	.long	0x320
	.byte	0
	.uleb128 0x8
	.long	.LASF1188
	.byte	0x13
	.byte	0x55
	.long	0x320
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1189
	.byte	0x13
	.byte	0x57
	.long	0x320
	.byte	0x10
	.uleb128 0x8
	.long	.LASF481
	.byte	0x13
	.byte	0x58
	.long	0x577
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1190
	.byte	0x13
	.byte	0x59
	.long	0x2b41
	.byte	0x20
	.byte	0
	.uleb128 0x7
	.long	.LASF1191
	.byte	0x13
	.byte	0x5a
	.long	0x2ba0
	.uleb128 0x3
	.byte	0x8
	.long	0x2b4c
	.uleb128 0x4
	.long	.LASF1192
	.byte	0x28
	.byte	0xd
	.byte	0x2b
	.long	0x2be3
	.uleb128 0x8
	.long	.LASF453
	.byte	0xd
	.byte	0x2d
	.long	0x2be3
	.byte	0
	.uleb128 0x8
	.long	.LASF433
	.byte	0xd
	.byte	0x2e
	.long	0x2be3
	.byte	0x8
	.uleb128 0x8
	.long	.LASF346
	.byte	0xd
	.byte	0x2f
	.long	0x310
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1193
	.byte	0xd
	.byte	0x30
	.long	0x2be9
	.byte	0x18
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2ba6
	.uleb128 0x15
	.long	0x32b
	.long	0x2bf9
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1
	.byte	0
	.uleb128 0x7
	.long	.LASF1194
	.byte	0xd
	.byte	0x31
	.long	0x2ba6
	.uleb128 0x3
	.byte	0x8
	.long	0x2bf9
	.uleb128 0x7
	.long	.LASF1195
	.byte	0xd
	.byte	0x39
	.long	0xd1a
	.uleb128 0x7
	.long	.LASF1168
	.byte	0xd
	.byte	0x39
	.long	0xd4b
	.uleb128 0x19
	.long	.LASF1196
	.byte	0x4
	.byte	0xd
	.byte	0x3c
	.long	0x2c4b
	.uleb128 0x10
	.long	.LASF1197
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1198
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1199
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1200
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1201
	.sleb128 4
	.byte	0
	.uleb128 0x7
	.long	.LASF1202
	.byte	0xe
	.byte	0x1f
	.long	0x2c0a
	.uleb128 0x7
	.long	.LASF1203
	.byte	0xe
	.byte	0x21
	.long	0x2c15
	.uleb128 0x7
	.long	.LASF1204
	.byte	0xe
	.byte	0x74
	.long	0x319
	.uleb128 0x4
	.long	.LASF1205
	.byte	0x40
	.byte	0xe
	.byte	0x77
	.long	0x2ce5
	.uleb128 0x8
	.long	.LASF1206
	.byte	0xe
	.byte	0x79
	.long	0x2ce5
	.byte	0
	.uleb128 0x8
	.long	.LASF1207
	.byte	0xe
	.byte	0x79
	.long	0x2ce5
	.byte	0x8
	.uleb128 0x6
	.string	"src"
	.byte	0xe
	.byte	0x7c
	.long	0xe1e
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1208
	.byte	0xe
	.byte	0x7c
	.long	0xe1e
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1209
	.byte	0xe
	.byte	0x7f
	.long	0x2d
	.byte	0x20
	.uleb128 0x6
	.string	"aux"
	.byte	0xe
	.byte	0x82
	.long	0x317
	.byte	0x28
	.uleb128 0x8
	.long	.LASF361
	.byte	0xe
	.byte	0x84
	.long	0x1e3
	.byte	0x30
	.uleb128 0x8
	.long	.LASF1210
	.byte	0xe
	.byte	0x85
	.long	0x1e3
	.byte	0x34
	.uleb128 0x8
	.long	.LASF359
	.byte	0xe
	.byte	0x86
	.long	0x2c61
	.byte	0x38
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2c6c
	.uleb128 0x7
	.long	.LASF1211
	.byte	0xe
	.byte	0x88
	.long	0x2ce5
	.uleb128 0x7
	.long	.LASF1182
	.byte	0xe
	.byte	0xdb
	.long	0xe1e
	.uleb128 0x19
	.long	.LASF1212
	.byte	0x4
	.byte	0x15
	.byte	0x4c
	.long	0x2d50
	.uleb128 0x10
	.long	.LASF1213
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1214
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1215
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1216
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1217
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1218
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1219
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1220
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1221
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1222
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1223
	.sleb128 10
	.byte	0
	.uleb128 0x4
	.long	.LASF1224
	.byte	0x68
	.byte	0x15
	.byte	0x57
	.long	0x2e70
	.uleb128 0x6
	.string	"in"
	.byte	0x15
	.byte	0x5a
	.long	0x2d
	.byte	0
	.uleb128 0x6
	.string	"out"
	.byte	0x15
	.byte	0x5d
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1225
	.byte	0x15
	.byte	0x60
	.long	0x1f1
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1226
	.byte	0x15
	.byte	0x63
	.long	0x59d
	.byte	0x14
	.uleb128 0x8
	.long	.LASF1227
	.byte	0x15
	.byte	0x65
	.long	0x59d
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1
	.byte	0x15
	.byte	0x68
	.long	0x59d
	.byte	0x1c
	.uleb128 0x8
	.long	.LASF56
	.byte	0x15
	.byte	0x6b
	.long	0x310
	.byte	0x20
	.uleb128 0x6
	.string	"inc"
	.byte	0x15
	.byte	0x70
	.long	0x1e3
	.byte	0x24
	.uleb128 0x8
	.long	.LASF1228
	.byte	0x15
	.byte	0x75
	.long	0x2d
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1229
	.byte	0x15
	.byte	0x76
	.long	0x2d
	.byte	0x30
	.uleb128 0x8
	.long	.LASF57
	.byte	0x15
	.byte	0x79
	.long	0x1e3
	.byte	0x38
	.uleb128 0x8
	.long	.LASF1230
	.byte	0x15
	.byte	0x7e
	.long	0x2d
	.byte	0x40
	.uleb128 0x8
	.long	.LASF1231
	.byte	0x15
	.byte	0x83
	.long	0x1e3
	.byte	0x48
	.uleb128 0x8
	.long	.LASF1232
	.byte	0x15
	.byte	0x87
	.long	0x1e3
	.byte	0x4c
	.uleb128 0x8
	.long	.LASF1233
	.byte	0x15
	.byte	0x8a
	.long	0x1e3
	.byte	0x50
	.uleb128 0x8
	.long	.LASF1234
	.byte	0x15
	.byte	0x8e
	.long	0x17bc
	.byte	0x54
	.uleb128 0x8
	.long	.LASF1235
	.byte	0x15
	.byte	0x90
	.long	0x17bc
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1236
	.byte	0x15
	.byte	0x95
	.long	0x2d01
	.byte	0x5c
	.uleb128 0x5
	.long	.LASF1237
	.byte	0x15
	.byte	0x99
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x60
	.uleb128 0x5
	.long	.LASF1238
	.byte	0x15
	.byte	0x9b
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x60
	.uleb128 0x5
	.long	.LASF1239
	.byte	0x15
	.byte	0x9d
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x60
	.uleb128 0x5
	.long	.LASF1240
	.byte	0x15
	.byte	0xa0
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x60
	.byte	0
	.uleb128 0x4
	.long	.LASF1241
	.byte	0x96
	.byte	0x15
	.byte	0xc3
	.long	0x2e95
	.uleb128 0x8
	.long	.LASF1242
	.byte	0x15
	.byte	0xc6
	.long	0x2e95
	.byte	0
	.uleb128 0x8
	.long	.LASF1243
	.byte	0x15
	.byte	0xc7
	.long	0x2eab
	.byte	0x64
	.byte	0
	.uleb128 0x15
	.long	0x347
	.long	0x2eab
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1
	.uleb128 0x16
	.long	0x1ea
	.byte	0x18
	.byte	0
	.uleb128 0x15
	.long	0x347
	.long	0x2ebb
	.uleb128 0x16
	.long	0x1ea
	.byte	0x18
	.byte	0
	.uleb128 0x22
	.long	.LASF1244
	.value	0x108
	.byte	0x15
	.byte	0xce
	.long	0x2f8d
	.uleb128 0x8
	.long	.LASF453
	.byte	0x15
	.byte	0xd1
	.long	0x2f8d
	.byte	0
	.uleb128 0x8
	.long	.LASF433
	.byte	0x15
	.byte	0xd1
	.long	0x2f8d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1245
	.byte	0x15
	.byte	0xd5
	.long	0x2f8d
	.byte	0x10
	.uleb128 0x8
	.long	.LASF26
	.byte	0x15
	.byte	0xd8
	.long	0x1e3
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1246
	.byte	0x15
	.byte	0xda
	.long	0x2d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1247
	.byte	0x15
	.byte	0xdd
	.long	0x2c4b
	.byte	0x28
	.uleb128 0x8
	.long	.LASF1248
	.byte	0x15
	.byte	0xde
	.long	0x2c4b
	.byte	0x40
	.uleb128 0x6
	.string	"rld"
	.byte	0x15
	.byte	0xe1
	.long	0x2f93
	.byte	0x58
	.uleb128 0x8
	.long	.LASF1249
	.byte	0x15
	.byte	0xe2
	.long	0x1e3
	.byte	0x60
	.uleb128 0x8
	.long	.LASF1250
	.byte	0x15
	.byte	0xe5
	.long	0x75b
	.byte	0x68
	.uleb128 0x8
	.long	.LASF1251
	.byte	0x15
	.byte	0xe8
	.long	0x2e70
	.byte	0x70
	.uleb128 0x26
	.long	.LASF1252
	.byte	0x15
	.byte	0xeb
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.value	0x104
	.uleb128 0x26
	.long	.LASF1253
	.byte	0x15
	.byte	0xee
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.value	0x104
	.uleb128 0x26
	.long	.LASF1254
	.byte	0x15
	.byte	0xf0
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.value	0x104
	.uleb128 0x26
	.long	.LASF1255
	.byte	0x15
	.byte	0xf2
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.value	0x104
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2ebb
	.uleb128 0x3
	.byte	0x8
	.long	0x2d50
	.uleb128 0x19
	.long	.LASF1256
	.byte	0x4
	.byte	0x16
	.byte	0x1c
	.long	0x2fb8
	.uleb128 0x10
	.long	.LASF1257
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1258
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1259
	.sleb128 2
	.byte	0
	.uleb128 0x22
	.long	.LASF1260
	.value	0x3f0
	.byte	0x16
	.byte	0x95
	.long	0x3053
	.uleb128 0x8
	.long	.LASF1261
	.byte	0x16
	.byte	0x9e
	.long	0x3053
	.byte	0
	.uleb128 0x8
	.long	.LASF1262
	.byte	0x16
	.byte	0xa1
	.long	0x3063
	.byte	0xf0
	.uleb128 0x27
	.long	.LASF1263
	.byte	0x16
	.byte	0xa4
	.long	0x3073
	.value	0x1e0
	.uleb128 0x27
	.long	.LASF1264
	.byte	0x16
	.byte	0xa7
	.long	0x3083
	.value	0x2d0
	.uleb128 0x27
	.long	.LASF1265
	.byte	0x16
	.byte	0xaa
	.long	0x3093
	.value	0x348
	.uleb128 0x27
	.long	.LASF1266
	.byte	0x16
	.byte	0xae
	.long	0x30a3
	.value	0x3c0
	.uleb128 0x27
	.long	.LASF1267
	.byte	0x16
	.byte	0xb2
	.long	0x4fd
	.value	0x3e0
	.uleb128 0x27
	.long	.LASF1268
	.byte	0x16
	.byte	0xbf
	.long	0x36a
	.value	0x3e4
	.uleb128 0x27
	.long	.LASF1269
	.byte	0x16
	.byte	0xc2
	.long	0x36a
	.value	0x3e5
	.uleb128 0x27
	.long	.LASF1270
	.byte	0x16
	.byte	0xc5
	.long	0x36a
	.value	0x3e6
	.uleb128 0x27
	.long	.LASF1246
	.byte	0x16
	.byte	0xc8
	.long	0x2d
	.value	0x3e8
	.byte	0
	.uleb128 0x15
	.long	0x2d
	.long	0x3063
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1d
	.byte	0
	.uleb128 0x15
	.long	0xfc6
	.long	0x3073
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1d
	.byte	0
	.uleb128 0x15
	.long	0x577
	.long	0x3083
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1d
	.byte	0
	.uleb128 0x15
	.long	0x59d
	.long	0x3093
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1d
	.byte	0
	.uleb128 0x15
	.long	0x2f99
	.long	0x30a3
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1d
	.byte	0
	.uleb128 0x15
	.long	0xfc6
	.long	0x30b3
	.uleb128 0x16
	.long	0x1ea
	.byte	0x3
	.byte	0
	.uleb128 0x7
	.long	.LASF1271
	.byte	0x16
	.byte	0xd4
	.long	0x30be
	.uleb128 0x3
	.byte	0x8
	.long	0x30c4
	.uleb128 0x1f
	.long	0x1e3
	.long	0x30d8
	.uleb128 0x20
	.long	0x2d
	.uleb128 0x20
	.long	0x59d
	.byte	0
	.uleb128 0x7
	.long	.LASF1272
	.byte	0x16
	.byte	0xd6
	.long	0x30e3
	.uleb128 0x3
	.byte	0x8
	.long	0x30e9
	.uleb128 0x1f
	.long	0x2d
	.long	0x30f9
	.uleb128 0x20
	.long	0x2d
	.uleb128 0x28
	.byte	0
	.uleb128 0x4
	.long	.LASF1273
	.byte	0x18
	.byte	0x16
	.byte	0xd8
	.long	0x3145
	.uleb128 0x8
	.long	.LASF1274
	.byte	0x16
	.byte	0xda
	.long	0x3145
	.byte	0
	.uleb128 0x8
	.long	.LASF1275
	.byte	0x16
	.byte	0xdc
	.long	0x314a
	.byte	0x8
	.uleb128 0x5
	.long	.LASF1
	.byte	0x16
	.byte	0xde
	.long	0x314f
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1276
	.byte	0x16
	.byte	0xe0
	.long	0x57d
	.byte	0x12
	.uleb128 0x8
	.long	.LASF1277
	.byte	0x16
	.byte	0xe2
	.long	0x57d
	.byte	0x13
	.byte	0
	.uleb128 0xc
	.long	0x30b3
	.uleb128 0xc
	.long	0x577
	.uleb128 0xc
	.long	0x310
	.uleb128 0x4
	.long	.LASF1278
	.byte	0x28
	.byte	0x16
	.byte	0xec
	.long	0x31c1
	.uleb128 0x8
	.long	.LASF481
	.byte	0x16
	.byte	0xee
	.long	0x314a
	.byte	0
	.uleb128 0x8
	.long	.LASF1279
	.byte	0x16
	.byte	0xef
	.long	0x596
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1280
	.byte	0x16
	.byte	0xf0
	.long	0x31c1
	.byte	0x10
	.uleb128 0x8
	.long	.LASF1261
	.byte	0x16
	.byte	0xf1
	.long	0x31c6
	.byte	0x18
	.uleb128 0x8
	.long	.LASF1268
	.byte	0x16
	.byte	0xf3
	.long	0x57d
	.byte	0x20
	.uleb128 0x8
	.long	.LASF1269
	.byte	0x16
	.byte	0xf4
	.long	0x57d
	.byte	0x21
	.uleb128 0x8
	.long	.LASF1270
	.byte	0x16
	.byte	0xf5
	.long	0x57d
	.byte	0x22
	.uleb128 0x8
	.long	.LASF1281
	.byte	0x16
	.byte	0xf6
	.long	0x57d
	.byte	0x23
	.byte	0
	.uleb128 0xc
	.long	0x30d8
	.uleb128 0xc
	.long	0x31cb
	.uleb128 0x3
	.byte	0x8
	.long	0x31d1
	.uleb128 0xc
	.long	0x30f9
	.uleb128 0x29
	.byte	0x8
	.byte	0xc
	.byte	0x1b
	.long	0x31f5
	.uleb128 0x1d
	.long	.LASF1282
	.byte	0xc
	.byte	0x1e
	.long	0x2d
	.uleb128 0x1d
	.long	.LASF439
	.byte	0xc
	.byte	0x20
	.long	0xd14
	.byte	0
	.uleb128 0x4
	.long	.LASF1283
	.byte	0x18
	.byte	0xc
	.byte	0x2c
	.long	0x3226
	.uleb128 0x8
	.long	.LASF453
	.byte	0xc
	.byte	0x2f
	.long	0x3226
	.byte	0
	.uleb128 0x6
	.string	"loc"
	.byte	0xc
	.byte	0x31
	.long	0x2d
	.byte	0x8
	.uleb128 0x8
	.long	.LASF1284
	.byte	0xc
	.byte	0x33
	.long	0x2d
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x31f5
	.uleb128 0x7
	.long	.LASF1285
	.byte	0xc
	.byte	0x29
	.long	0xcd9
	.uleb128 0x3
	.byte	0x8
	.long	0x322c
	.uleb128 0x1b
	.byte	0x18
	.byte	0x17
	.byte	0x6b
	.long	0x3250
	.uleb128 0x6
	.string	"r"
	.byte	0x17
	.byte	0x6c
	.long	0x3250
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x319
	.long	0x3260
	.uleb128 0x16
	.long	0x1ea
	.byte	0x2
	.byte	0
	.uleb128 0x7
	.long	.LASF1286
	.byte	0x17
	.byte	0x6d
	.long	0x323d
	.uleb128 0x19
	.long	.LASF1287
	.byte	0x4
	.byte	0x4
	.byte	0x54
	.long	0x34d8
	.uleb128 0x10
	.long	.LASF1288
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1289
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1290
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1291
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1292
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1293
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1294
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1295
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1296
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1297
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1298
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1299
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1300
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1301
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1302
	.sleb128 14
	.uleb128 0x10
	.long	.LASF1303
	.sleb128 15
	.uleb128 0x10
	.long	.LASF1304
	.sleb128 16
	.uleb128 0x10
	.long	.LASF1305
	.sleb128 17
	.uleb128 0x10
	.long	.LASF1306
	.sleb128 18
	.uleb128 0x10
	.long	.LASF1307
	.sleb128 19
	.uleb128 0x10
	.long	.LASF1308
	.sleb128 20
	.uleb128 0x10
	.long	.LASF1309
	.sleb128 21
	.uleb128 0x10
	.long	.LASF1310
	.sleb128 22
	.uleb128 0x10
	.long	.LASF1311
	.sleb128 23
	.uleb128 0x10
	.long	.LASF1312
	.sleb128 24
	.uleb128 0x10
	.long	.LASF1313
	.sleb128 25
	.uleb128 0x10
	.long	.LASF1314
	.sleb128 26
	.uleb128 0x10
	.long	.LASF1315
	.sleb128 27
	.uleb128 0x10
	.long	.LASF1316
	.sleb128 28
	.uleb128 0x10
	.long	.LASF1317
	.sleb128 29
	.uleb128 0x10
	.long	.LASF1318
	.sleb128 30
	.uleb128 0x10
	.long	.LASF1319
	.sleb128 31
	.uleb128 0x10
	.long	.LASF1320
	.sleb128 32
	.uleb128 0x10
	.long	.LASF1321
	.sleb128 33
	.uleb128 0x10
	.long	.LASF1322
	.sleb128 34
	.uleb128 0x10
	.long	.LASF1323
	.sleb128 35
	.uleb128 0x10
	.long	.LASF1324
	.sleb128 36
	.uleb128 0x10
	.long	.LASF1325
	.sleb128 37
	.uleb128 0x10
	.long	.LASF1326
	.sleb128 38
	.uleb128 0x10
	.long	.LASF1327
	.sleb128 39
	.uleb128 0x10
	.long	.LASF1328
	.sleb128 40
	.uleb128 0x10
	.long	.LASF1329
	.sleb128 41
	.uleb128 0x10
	.long	.LASF1330
	.sleb128 42
	.uleb128 0x10
	.long	.LASF1331
	.sleb128 43
	.uleb128 0x10
	.long	.LASF1332
	.sleb128 44
	.uleb128 0x10
	.long	.LASF1333
	.sleb128 45
	.uleb128 0x10
	.long	.LASF1334
	.sleb128 46
	.uleb128 0x10
	.long	.LASF1335
	.sleb128 47
	.uleb128 0x10
	.long	.LASF1336
	.sleb128 48
	.uleb128 0x10
	.long	.LASF1337
	.sleb128 49
	.uleb128 0x10
	.long	.LASF1338
	.sleb128 50
	.uleb128 0x10
	.long	.LASF1339
	.sleb128 51
	.uleb128 0x10
	.long	.LASF1340
	.sleb128 52
	.uleb128 0x10
	.long	.LASF1341
	.sleb128 53
	.uleb128 0x10
	.long	.LASF1342
	.sleb128 54
	.uleb128 0x10
	.long	.LASF1343
	.sleb128 55
	.uleb128 0x10
	.long	.LASF1344
	.sleb128 56
	.uleb128 0x10
	.long	.LASF1345
	.sleb128 57
	.uleb128 0x10
	.long	.LASF1346
	.sleb128 58
	.uleb128 0x10
	.long	.LASF1347
	.sleb128 59
	.uleb128 0x10
	.long	.LASF1348
	.sleb128 60
	.uleb128 0x10
	.long	.LASF1349
	.sleb128 61
	.uleb128 0x10
	.long	.LASF1350
	.sleb128 62
	.uleb128 0x10
	.long	.LASF1351
	.sleb128 63
	.uleb128 0x10
	.long	.LASF1352
	.sleb128 64
	.uleb128 0x10
	.long	.LASF1353
	.sleb128 65
	.uleb128 0x10
	.long	.LASF1354
	.sleb128 66
	.uleb128 0x10
	.long	.LASF1355
	.sleb128 67
	.uleb128 0x10
	.long	.LASF1356
	.sleb128 68
	.uleb128 0x10
	.long	.LASF1357
	.sleb128 69
	.uleb128 0x10
	.long	.LASF1358
	.sleb128 70
	.uleb128 0x10
	.long	.LASF1359
	.sleb128 71
	.uleb128 0x10
	.long	.LASF1360
	.sleb128 72
	.uleb128 0x10
	.long	.LASF1361
	.sleb128 73
	.uleb128 0x10
	.long	.LASF1362
	.sleb128 74
	.uleb128 0x10
	.long	.LASF1363
	.sleb128 75
	.uleb128 0x10
	.long	.LASF1364
	.sleb128 76
	.uleb128 0x10
	.long	.LASF1365
	.sleb128 77
	.uleb128 0x10
	.long	.LASF1366
	.sleb128 78
	.uleb128 0x10
	.long	.LASF1367
	.sleb128 79
	.uleb128 0x10
	.long	.LASF1368
	.sleb128 80
	.uleb128 0x10
	.long	.LASF1369
	.sleb128 81
	.uleb128 0x10
	.long	.LASF1370
	.sleb128 82
	.uleb128 0x10
	.long	.LASF1371
	.sleb128 83
	.uleb128 0x10
	.long	.LASF1372
	.sleb128 84
	.uleb128 0x10
	.long	.LASF1373
	.sleb128 85
	.uleb128 0x10
	.long	.LASF1374
	.sleb128 86
	.uleb128 0x10
	.long	.LASF1375
	.sleb128 87
	.uleb128 0x10
	.long	.LASF1376
	.sleb128 88
	.uleb128 0x10
	.long	.LASF1377
	.sleb128 89
	.uleb128 0x10
	.long	.LASF1378
	.sleb128 90
	.uleb128 0x10
	.long	.LASF1379
	.sleb128 91
	.uleb128 0x10
	.long	.LASF1380
	.sleb128 92
	.uleb128 0x10
	.long	.LASF1381
	.sleb128 93
	.uleb128 0x10
	.long	.LASF1382
	.sleb128 94
	.uleb128 0x10
	.long	.LASF1383
	.sleb128 95
	.byte	0
	.uleb128 0x4
	.long	.LASF1384
	.byte	0x18
	.byte	0x4
	.byte	0x79
	.long	0x3674
	.uleb128 0x8
	.long	.LASF1385
	.byte	0x4
	.byte	0x7b
	.long	0x123
	.byte	0
	.uleb128 0x8
	.long	.LASF24
	.byte	0x4
	.byte	0x7c
	.long	0x123
	.byte	0x8
	.uleb128 0x5
	.long	.LASF0
	.byte	0x4
	.byte	0x7e
	.long	0x310
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1386
	.byte	0x4
	.byte	0x80
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1387
	.byte	0x4
	.byte	0x81
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1388
	.byte	0x4
	.byte	0x82
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1389
	.byte	0x4
	.byte	0x83
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1390
	.byte	0x4
	.byte	0x84
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1391
	.byte	0x4
	.byte	0x85
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1392
	.byte	0x4
	.byte	0x86
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1393
	.byte	0x4
	.byte	0x87
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1394
	.byte	0x4
	.byte	0x89
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1395
	.byte	0x4
	.byte	0x8a
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1396
	.byte	0x4
	.byte	0x8b
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1397
	.byte	0x4
	.byte	0x8c
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1398
	.byte	0x4
	.byte	0x8d
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1399
	.byte	0x4
	.byte	0x8e
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1400
	.byte	0x4
	.byte	0x8f
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1401
	.byte	0x4
	.byte	0x90
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1402
	.byte	0x4
	.byte	0x92
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1403
	.byte	0x4
	.byte	0x93
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1404
	.byte	0x4
	.byte	0x94
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1405
	.byte	0x4
	.byte	0x95
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1406
	.byte	0x4
	.byte	0x96
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1407
	.byte	0x4
	.byte	0x97
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1408
	.byte	0x4
	.byte	0x98
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x10
	.uleb128 0x5
	.long	.LASF1409
	.byte	0x4
	.byte	0x99
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x10
	.byte	0
	.uleb128 0x2a
	.byte	0x10
	.byte	0x4
	.value	0x2c9
	.long	0x3698
	.uleb128 0x2b
	.string	"low"
	.byte	0x4
	.value	0x2ca
	.long	0x32b
	.byte	0
	.uleb128 0x12
	.long	.LASF1410
	.byte	0x4
	.value	0x2cb
	.long	0x319
	.byte	0x8
	.byte	0
	.uleb128 0x11
	.long	.LASF1411
	.byte	0x30
	.byte	0x4
	.value	0x2c1
	.long	0x36cd
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x2c3
	.long	0x34d8
	.byte	0
	.uleb128 0x2b
	.string	"rtl"
	.byte	0x4
	.value	0x2c4
	.long	0x2d
	.byte	0x18
	.uleb128 0x12
	.long	.LASF17
	.byte	0x4
	.value	0x2cc
	.long	0x3674
	.byte	0x20
	.byte	0
	.uleb128 0x11
	.long	.LASF1412
	.byte	0x38
	.byte	0x4
	.value	0x2de
	.long	0x3702
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x2e0
	.long	0x34d8
	.byte	0
	.uleb128 0x2b
	.string	"rtl"
	.byte	0x4
	.value	0x2e1
	.long	0x2d
	.byte	0x18
	.uleb128 0x12
	.long	.LASF18
	.byte	0x4
	.value	0x2e2
	.long	0x3260
	.byte	0x20
	.byte	0
	.uleb128 0x11
	.long	.LASF1413
	.byte	0x30
	.byte	0x4
	.value	0x2e9
	.long	0x3744
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x2eb
	.long	0x34d8
	.byte	0
	.uleb128 0x2b
	.string	"rtl"
	.byte	0x4
	.value	0x2ec
	.long	0x2d
	.byte	0x18
	.uleb128 0x12
	.long	.LASF1414
	.byte	0x4
	.value	0x2ed
	.long	0x1e3
	.byte	0x20
	.uleb128 0x12
	.long	.LASF1415
	.byte	0x4
	.value	0x2ee
	.long	0x577
	.byte	0x28
	.byte	0
	.uleb128 0x11
	.long	.LASF1416
	.byte	0x30
	.byte	0x4
	.value	0x2f5
	.long	0x3786
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x2f7
	.long	0x34d8
	.byte	0
	.uleb128 0x2b
	.string	"rtl"
	.byte	0x4
	.value	0x2f8
	.long	0x2d
	.byte	0x18
	.uleb128 0x12
	.long	.LASF1417
	.byte	0x4
	.value	0x2f9
	.long	0x123
	.byte	0x20
	.uleb128 0x12
	.long	.LASF1418
	.byte	0x4
	.value	0x2fa
	.long	0x123
	.byte	0x28
	.byte	0
	.uleb128 0x11
	.long	.LASF1419
	.byte	0x28
	.byte	0x4
	.value	0x300
	.long	0x37bb
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x302
	.long	0x34d8
	.byte	0
	.uleb128 0x2b
	.string	"rtl"
	.byte	0x4
	.value	0x303
	.long	0x2d
	.byte	0x18
	.uleb128 0x12
	.long	.LASF1420
	.byte	0x4
	.value	0x304
	.long	0x123
	.byte	0x20
	.byte	0
	.uleb128 0x4
	.long	.LASF1421
	.byte	0x10
	.byte	0x18
	.byte	0x1a
	.long	0x37e0
	.uleb128 0x6
	.string	"len"
	.byte	0x18
	.byte	0x1c
	.long	0x310
	.byte	0
	.uleb128 0x6
	.string	"str"
	.byte	0x18
	.byte	0x1d
	.long	0x37e0
	.byte	0x8
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x37e6
	.uleb128 0xc
	.long	0x332
	.uleb128 0x11
	.long	.LASF1422
	.byte	0x28
	.byte	0x4
	.value	0x317
	.long	0x3812
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x319
	.long	0x34d8
	.byte	0
	.uleb128 0x2b
	.string	"id"
	.byte	0x4
	.value	0x31a
	.long	0x37bb
	.byte	0x18
	.byte	0
	.uleb128 0x11
	.long	.LASF1423
	.byte	0x28
	.byte	0x4
	.value	0x321
	.long	0x3847
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x323
	.long	0x34d8
	.byte	0
	.uleb128 0x12
	.long	.LASF1424
	.byte	0x4
	.value	0x324
	.long	0x123
	.byte	0x18
	.uleb128 0x12
	.long	.LASF340
	.byte	0x4
	.value	0x325
	.long	0x123
	.byte	0x20
	.byte	0
	.uleb128 0x11
	.long	.LASF1425
	.byte	0x28
	.byte	0x4
	.value	0x32e
	.long	0x387a
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x330
	.long	0x34d8
	.byte	0
	.uleb128 0x12
	.long	.LASF1414
	.byte	0x4
	.value	0x331
	.long	0x1e3
	.byte	0x18
	.uleb128 0x2b
	.string	"a"
	.byte	0x4
	.value	0x332
	.long	0x387a
	.byte	0x20
	.byte	0
	.uleb128 0x15
	.long	0x123
	.long	0x388a
	.uleb128 0x16
	.long	0x1ea
	.byte	0
	.byte	0
	.uleb128 0x11
	.long	.LASF1426
	.byte	0x28
	.byte	0x4
	.value	0x36f
	.long	0x38bf
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x371
	.long	0x34d8
	.byte	0
	.uleb128 0x12
	.long	.LASF1427
	.byte	0x4
	.value	0x372
	.long	0x1e3
	.byte	0x18
	.uleb128 0x12
	.long	.LASF1428
	.byte	0x4
	.value	0x373
	.long	0x387a
	.byte	0x20
	.byte	0
	.uleb128 0x11
	.long	.LASF1429
	.byte	0x50
	.byte	0x4
	.value	0x3a3
	.long	0x3958
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x3a5
	.long	0x34d8
	.byte	0
	.uleb128 0x2c
	.long	.LASF1430
	.byte	0x4
	.value	0x3a7
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x18
	.uleb128 0x2c
	.long	.LASF1431
	.byte	0x4
	.value	0x3a8
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x18
	.uleb128 0x2c
	.long	.LASF1432
	.byte	0x4
	.value	0x3a9
	.long	0x310
	.byte	0x4
	.byte	0x1e
	.byte	0
	.byte	0x18
	.uleb128 0x12
	.long	.LASF1433
	.byte	0x4
	.value	0x3ab
	.long	0x123
	.byte	0x20
	.uleb128 0x12
	.long	.LASF1434
	.byte	0x4
	.value	0x3ac
	.long	0x123
	.byte	0x28
	.uleb128 0x12
	.long	.LASF1435
	.byte	0x4
	.value	0x3ad
	.long	0x123
	.byte	0x30
	.uleb128 0x12
	.long	.LASF1436
	.byte	0x4
	.value	0x3ae
	.long	0x123
	.byte	0x38
	.uleb128 0x12
	.long	.LASF1437
	.byte	0x4
	.value	0x3af
	.long	0x123
	.byte	0x40
	.uleb128 0x12
	.long	.LASF1438
	.byte	0x4
	.value	0x3b0
	.long	0x123
	.byte	0x48
	.byte	0
	.uleb128 0x2d
	.byte	0x8
	.byte	0x4
	.value	0x4d8
	.long	0x397a
	.uleb128 0xa
	.long	.LASF1439
	.byte	0x4
	.value	0x4d8
	.long	0x1e3
	.uleb128 0xa
	.long	.LASF1415
	.byte	0x4
	.value	0x4d8
	.long	0x364
	.byte	0
	.uleb128 0x11
	.long	.LASF1440
	.byte	0xa8
	.byte	0x4
	.value	0x4b8
	.long	0x3b8f
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x4ba
	.long	0x34d8
	.byte	0
	.uleb128 0x12
	.long	.LASF1441
	.byte	0x4
	.value	0x4bb
	.long	0x123
	.byte	0x18
	.uleb128 0x12
	.long	.LASF324
	.byte	0x4
	.value	0x4bc
	.long	0x123
	.byte	0x20
	.uleb128 0x12
	.long	.LASF1442
	.byte	0x4
	.value	0x4bd
	.long	0x123
	.byte	0x28
	.uleb128 0x12
	.long	.LASF1443
	.byte	0x4
	.value	0x4be
	.long	0x123
	.byte	0x30
	.uleb128 0x2b
	.string	"uid"
	.byte	0x4
	.value	0x4bf
	.long	0x310
	.byte	0x38
	.uleb128 0x2c
	.long	.LASF1444
	.byte	0x4
	.value	0x4c1
	.long	0x310
	.byte	0x4
	.byte	0x9
	.byte	0x17
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1
	.byte	0x4
	.value	0x4c2
	.long	0x310
	.byte	0x4
	.byte	0x7
	.byte	0x10
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1445
	.byte	0x4
	.value	0x4c4
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1446
	.byte	0x4
	.value	0x4c5
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1447
	.byte	0x4
	.value	0x4c6
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1448
	.byte	0x4
	.value	0x4c7
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1449
	.byte	0x4
	.value	0x4c8
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1450
	.byte	0x4
	.value	0x4c9
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1451
	.byte	0x4
	.value	0x4ca
	.long	0x310
	.byte	0x4
	.byte	0x2
	.byte	0x8
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1402
	.byte	0x4
	.value	0x4cc
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1403
	.byte	0x4
	.value	0x4cd
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1404
	.byte	0x4
	.value	0x4ce
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1405
	.byte	0x4
	.value	0x4cf
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1406
	.byte	0x4
	.value	0x4d0
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1407
	.byte	0x4
	.value	0x4d1
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1408
	.byte	0x4
	.value	0x4d2
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x3c
	.uleb128 0x2c
	.long	.LASF1452
	.byte	0x4
	.value	0x4d3
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x3c
	.uleb128 0x12
	.long	.LASF325
	.byte	0x4
	.value	0x4d5
	.long	0x310
	.byte	0x40
	.uleb128 0x12
	.long	.LASF1453
	.byte	0x4
	.value	0x4d6
	.long	0x123
	.byte	0x48
	.uleb128 0x12
	.long	.LASF1454
	.byte	0x4
	.value	0x4d7
	.long	0x123
	.byte	0x50
	.uleb128 0x12
	.long	.LASF1455
	.byte	0x4
	.value	0x4d8
	.long	0x3958
	.byte	0x58
	.uleb128 0x12
	.long	.LASF481
	.byte	0x4
	.value	0x4d9
	.long	0x123
	.byte	0x60
	.uleb128 0x12
	.long	.LASF1456
	.byte	0x4
	.value	0x4da
	.long	0x123
	.byte	0x68
	.uleb128 0x12
	.long	.LASF1457
	.byte	0x4
	.value	0x4db
	.long	0x123
	.byte	0x70
	.uleb128 0x12
	.long	.LASF1458
	.byte	0x4
	.value	0x4dc
	.long	0x123
	.byte	0x78
	.uleb128 0x12
	.long	.LASF1459
	.byte	0x4
	.value	0x4dd
	.long	0x123
	.byte	0x80
	.uleb128 0x12
	.long	.LASF1460
	.byte	0x4
	.value	0x4de
	.long	0x123
	.byte	0x88
	.uleb128 0x12
	.long	.LASF1461
	.byte	0x4
	.value	0x4df
	.long	0x123
	.byte	0x90
	.uleb128 0x12
	.long	.LASF1462
	.byte	0x4
	.value	0x4e0
	.long	0x319
	.byte	0x98
	.uleb128 0x12
	.long	.LASF1463
	.byte	0x4
	.value	0x4e2
	.long	0x3b94
	.byte	0xa0
	.byte	0
	.uleb128 0x25
	.long	.LASF1464
	.uleb128 0x3
	.byte	0x8
	.long	0x3b8f
	.uleb128 0x2a
	.byte	0x4
	.byte	0x4
	.value	0x717
	.long	0x3bc4
	.uleb128 0x2c
	.long	.LASF325
	.byte	0x4
	.value	0x717
	.long	0x310
	.byte	0x4
	.byte	0x18
	.byte	0x8
	.byte	0
	.uleb128 0x2c
	.long	.LASF1465
	.byte	0x4
	.value	0x717
	.long	0x310
	.byte	0x4
	.byte	0x8
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2d
	.byte	0x8
	.byte	0x4
	.value	0x70e
	.long	0x3bec
	.uleb128 0xb
	.string	"f"
	.byte	0x4
	.value	0x711
	.long	0x326b
	.uleb128 0xb
	.string	"i"
	.byte	0x4
	.value	0x714
	.long	0x319
	.uleb128 0xb
	.string	"a"
	.byte	0x4
	.value	0x717
	.long	0x3b9a
	.byte	0
	.uleb128 0x2d
	.byte	0x8
	.byte	0x4
	.value	0x72c
	.long	0x3c1e
	.uleb128 0xb
	.string	"f"
	.byte	0x4
	.value	0x72d
	.long	0x178a
	.uleb128 0xb
	.string	"r"
	.byte	0x4
	.value	0x72e
	.long	0x2d
	.uleb128 0xb
	.string	"t"
	.byte	0x4
	.value	0x72f
	.long	0x123
	.uleb128 0xb
	.string	"i"
	.byte	0x4
	.value	0x730
	.long	0x1e3
	.byte	0
	.uleb128 0x11
	.long	.LASF1466
	.byte	0xd0
	.byte	0x4
	.value	0x6dc
	.long	0x3fa2
	.uleb128 0x12
	.long	.LASF16
	.byte	0x4
	.value	0x6de
	.long	0x34d8
	.byte	0
	.uleb128 0x12
	.long	.LASF1467
	.byte	0x4
	.value	0x6df
	.long	0x577
	.byte	0x18
	.uleb128 0x12
	.long	.LASF1468
	.byte	0x4
	.value	0x6e0
	.long	0x1e3
	.byte	0x20
	.uleb128 0x2b
	.string	"uid"
	.byte	0x4
	.value	0x6e1
	.long	0x310
	.byte	0x24
	.uleb128 0x12
	.long	.LASF324
	.byte	0x4
	.value	0x6e2
	.long	0x123
	.byte	0x28
	.uleb128 0x2c
	.long	.LASF1
	.byte	0x4
	.value	0x6e3
	.long	0x310
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1469
	.byte	0x4
	.value	0x6e5
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1470
	.byte	0x4
	.value	0x6e6
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1471
	.byte	0x4
	.value	0x6e7
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1472
	.byte	0x4
	.value	0x6e8
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1473
	.byte	0x4
	.value	0x6e9
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1474
	.byte	0x4
	.value	0x6ea
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1475
	.byte	0x4
	.value	0x6eb
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1431
	.byte	0x4
	.value	0x6ec
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1476
	.byte	0x4
	.value	0x6ee
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1477
	.byte	0x4
	.value	0x6ef
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1478
	.byte	0x4
	.value	0x6f0
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1479
	.byte	0x4
	.value	0x6f1
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1480
	.byte	0x4
	.value	0x6f2
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1481
	.byte	0x4
	.value	0x6f3
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1482
	.byte	0x4
	.value	0x6f4
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1483
	.byte	0x4
	.value	0x6f5
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1484
	.byte	0x4
	.value	0x6f7
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1485
	.byte	0x4
	.value	0x6f8
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1486
	.byte	0x4
	.value	0x6f9
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1487
	.byte	0x4
	.value	0x6fa
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1488
	.byte	0x4
	.value	0x6fb
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1489
	.byte	0x4
	.value	0x6fc
	.long	0x310
	.byte	0x4
	.byte	0x2
	.byte	0x1
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1490
	.byte	0x4
	.value	0x6fd
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0
	.byte	0x30
	.uleb128 0x2c
	.long	.LASF1451
	.byte	0x4
	.value	0x6ff
	.long	0x310
	.byte	0x4
	.byte	0x2
	.byte	0x1e
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1491
	.byte	0x4
	.value	0x700
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1452
	.byte	0x4
	.value	0x701
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1492
	.byte	0x4
	.value	0x702
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1402
	.byte	0x4
	.value	0x705
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1403
	.byte	0x4
	.value	0x706
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1404
	.byte	0x4
	.value	0x707
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1405
	.byte	0x4
	.value	0x708
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1406
	.byte	0x4
	.value	0x709
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1407
	.byte	0x4
	.value	0x70a
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1408
	.byte	0x4
	.value	0x70b
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x34
	.uleb128 0x2c
	.long	.LASF1493
	.byte	0x4
	.value	0x70c
	.long	0x310
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x34
	.uleb128 0x2b
	.string	"u1"
	.byte	0x4
	.value	0x718
	.long	0x3bc4
	.byte	0x38
	.uleb128 0x12
	.long	.LASF1442
	.byte	0x4
	.value	0x71a
	.long	0x123
	.byte	0x40
	.uleb128 0x12
	.long	.LASF481
	.byte	0x4
	.value	0x71b
	.long	0x123
	.byte	0x48
	.uleb128 0x12
	.long	.LASF1461
	.byte	0x4
	.value	0x71c
	.long	0x123
	.byte	0x50
	.uleb128 0x12
	.long	.LASF1494
	.byte	0x4
	.value	0x71d
	.long	0x123
	.byte	0x58
	.uleb128 0x12
	.long	.LASF1495
	.byte	0x4
	.value	0x71e
	.long	0x123
	.byte	0x60
	.uleb128 0x12
	.long	.LASF1496
	.byte	0x4
	.value	0x71f
	.long	0x123
	.byte	0x68
	.uleb128 0x12
	.long	.LASF1436
	.byte	0x4
	.value	0x720
	.long	0x123
	.byte	0x70
	.uleb128 0x12
	.long	.LASF1497
	.byte	0x4
	.value	0x721
	.long	0x123
	.byte	0x78
	.uleb128 0x12
	.long	.LASF1498
	.byte	0x4
	.value	0x722
	.long	0x123
	.byte	0x80
	.uleb128 0x12
	.long	.LASF1443
	.byte	0x4
	.value	0x723
	.long	0x123
	.byte	0x88
	.uleb128 0x2b
	.string	"rtl"
	.byte	0x4
	.value	0x724
	.long	0x2d
	.byte	0x90
	.uleb128 0x12
	.long	.LASF1499
	.byte	0x4
	.value	0x725
	.long	0x2d
	.byte	0x98
	.uleb128 0x2b
	.string	"u2"
	.byte	0x4
	.value	0x731
	.long	0x3bec
	.byte	0xa0
	.uleb128 0x12
	.long	.LASF1500
	.byte	0x4
	.value	0x734
	.long	0x123
	.byte	0xa8
	.uleb128 0x12
	.long	.LASF1501
	.byte	0x4
	.value	0x738
	.long	0x123
	.byte	0xb0
	.uleb128 0x12
	.long	.LASF1502
	.byte	0x4
	.value	0x73a
	.long	0x123
	.byte	0xb8
	.uleb128 0x12
	.long	.LASF1503
	.byte	0x4
	.value	0x73b
	.long	0x319
	.byte	0xc0
	.uleb128 0x12
	.long	.LASF1463
	.byte	0x4
	.value	0x73d
	.long	0x3fa7
	.byte	0xc8
	.byte	0
	.uleb128 0x25
	.long	.LASF1504
	.uleb128 0x3
	.byte	0x8
	.long	0x3fa2
	.uleb128 0xf
	.long	.LASF1505
	.byte	0x4
	.byte	0x4
	.value	0x757
	.long	0x40f3
	.uleb128 0x10
	.long	.LASF1506
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1507
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1508
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1509
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1510
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1511
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1512
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1513
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1514
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1515
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1516
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1517
	.sleb128 11
	.uleb128 0x10
	.long	.LASF1518
	.sleb128 12
	.uleb128 0x10
	.long	.LASF1519
	.sleb128 13
	.uleb128 0x10
	.long	.LASF1520
	.sleb128 14
	.uleb128 0x10
	.long	.LASF1521
	.sleb128 15
	.uleb128 0x10
	.long	.LASF1522
	.sleb128 16
	.uleb128 0x10
	.long	.LASF1523
	.sleb128 17
	.uleb128 0x10
	.long	.LASF1524
	.sleb128 18
	.uleb128 0x10
	.long	.LASF1525
	.sleb128 19
	.uleb128 0x10
	.long	.LASF1526
	.sleb128 20
	.uleb128 0x10
	.long	.LASF1527
	.sleb128 21
	.uleb128 0x10
	.long	.LASF1528
	.sleb128 22
	.uleb128 0x10
	.long	.LASF1529
	.sleb128 23
	.uleb128 0x10
	.long	.LASF1530
	.sleb128 24
	.uleb128 0x10
	.long	.LASF1531
	.sleb128 25
	.uleb128 0x10
	.long	.LASF1532
	.sleb128 26
	.uleb128 0x10
	.long	.LASF1533
	.sleb128 27
	.uleb128 0x10
	.long	.LASF1534
	.sleb128 28
	.uleb128 0x10
	.long	.LASF1535
	.sleb128 29
	.uleb128 0x10
	.long	.LASF1536
	.sleb128 30
	.uleb128 0x10
	.long	.LASF1537
	.sleb128 31
	.uleb128 0x10
	.long	.LASF1538
	.sleb128 32
	.uleb128 0x10
	.long	.LASF1539
	.sleb128 33
	.uleb128 0x10
	.long	.LASF1540
	.sleb128 34
	.uleb128 0x10
	.long	.LASF1541
	.sleb128 35
	.uleb128 0x10
	.long	.LASF1542
	.sleb128 36
	.uleb128 0x10
	.long	.LASF1543
	.sleb128 37
	.uleb128 0x10
	.long	.LASF1544
	.sleb128 38
	.uleb128 0x10
	.long	.LASF1545
	.sleb128 39
	.uleb128 0x10
	.long	.LASF1546
	.sleb128 40
	.uleb128 0x10
	.long	.LASF1547
	.sleb128 41
	.uleb128 0x10
	.long	.LASF1548
	.sleb128 42
	.uleb128 0x10
	.long	.LASF1549
	.sleb128 43
	.uleb128 0x10
	.long	.LASF1550
	.sleb128 44
	.uleb128 0x10
	.long	.LASF1551
	.sleb128 45
	.uleb128 0x10
	.long	.LASF1552
	.sleb128 46
	.uleb128 0x10
	.long	.LASF1553
	.sleb128 47
	.uleb128 0x10
	.long	.LASF1554
	.sleb128 48
	.uleb128 0x10
	.long	.LASF1555
	.sleb128 49
	.uleb128 0x10
	.long	.LASF1556
	.sleb128 50
	.uleb128 0x10
	.long	.LASF1557
	.sleb128 51
	.byte	0
	.uleb128 0xf
	.long	.LASF1558
	.byte	0x4
	.byte	0x4
	.value	0x7e4
	.long	0x4149
	.uleb128 0x10
	.long	.LASF1559
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1560
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1561
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1562
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1563
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1564
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1565
	.sleb128 6
	.uleb128 0x10
	.long	.LASF1566
	.sleb128 7
	.uleb128 0x10
	.long	.LASF1567
	.sleb128 8
	.uleb128 0x10
	.long	.LASF1568
	.sleb128 9
	.uleb128 0x10
	.long	.LASF1569
	.sleb128 10
	.uleb128 0x10
	.long	.LASF1570
	.sleb128 11
	.byte	0
	.uleb128 0xe
	.byte	0x1
	.byte	0x2
	.long	.LASF1571
	.uleb128 0xf
	.long	.LASF1572
	.byte	0x4
	.byte	0x4
	.value	0x972
	.long	0x4188
	.uleb128 0x10
	.long	.LASF1573
	.sleb128 0
	.uleb128 0x10
	.long	.LASF1574
	.sleb128 1
	.uleb128 0x10
	.long	.LASF1575
	.sleb128 2
	.uleb128 0x10
	.long	.LASF1576
	.sleb128 3
	.uleb128 0x10
	.long	.LASF1577
	.sleb128 4
	.uleb128 0x10
	.long	.LASF1578
	.sleb128 5
	.uleb128 0x10
	.long	.LASF1579
	.sleb128 6
	.byte	0
	.uleb128 0x11
	.long	.LASF1580
	.byte	0x30
	.byte	0x1
	.value	0x130
	.long	0x4217
	.uleb128 0x12
	.long	.LASF1581
	.byte	0x1
	.value	0x132
	.long	0x1e3
	.byte	0
	.uleb128 0x2b
	.string	"to"
	.byte	0x1
	.value	0x133
	.long	0x1e3
	.byte	0x4
	.uleb128 0x12
	.long	.LASF1582
	.byte	0x1
	.value	0x134
	.long	0x1e3
	.byte	0x8
	.uleb128 0x12
	.long	.LASF1583
	.byte	0x1
	.value	0x135
	.long	0x1e3
	.byte	0xc
	.uleb128 0x12
	.long	.LASF1584
	.byte	0x1
	.value	0x136
	.long	0x1e3
	.byte	0x10
	.uleb128 0x12
	.long	.LASF323
	.byte	0x1
	.value	0x138
	.long	0x1e3
	.byte	0x14
	.uleb128 0x12
	.long	.LASF1585
	.byte	0x1
	.value	0x139
	.long	0x1e3
	.byte	0x18
	.uleb128 0x12
	.long	.LASF1586
	.byte	0x1
	.value	0x13a
	.long	0x1e3
	.byte	0x1c
	.uleb128 0x12
	.long	.LASF1587
	.byte	0x1
	.value	0x13b
	.long	0x2d
	.byte	0x20
	.uleb128 0x12
	.long	.LASF1588
	.byte	0x1
	.value	0x140
	.long	0x2d
	.byte	0x28
	.byte	0
	.uleb128 0x11
	.long	.LASF1589
	.byte	0x8
	.byte	0x1
	.value	0x147
	.long	0x423e
	.uleb128 0x12
	.long	.LASF1581
	.byte	0x1
	.value	0x149
	.long	0x1de
	.byte	0
	.uleb128 0x2b
	.string	"to"
	.byte	0x1
	.value	0x14a
	.long	0x1de
	.byte	0x4
	.byte	0
	.uleb128 0x11
	.long	.LASF1590
	.byte	0x10
	.byte	0x1
	.value	0x2186
	.long	0x4266
	.uleb128 0x12
	.long	.LASF1246
	.byte	0x1
	.value	0x2186
	.long	0x2d
	.byte	0
	.uleb128 0x12
	.long	.LASF1591
	.byte	0x1
	.value	0x2186
	.long	0xfc6
	.byte	0x8
	.byte	0
	.uleb128 0x2a
	.byte	0x78
	.byte	0x1
	.value	0x2193
	.long	0x42b1
	.uleb128 0x12
	.long	.LASF1590
	.byte	0x1
	.value	0x2195
	.long	0x42b1
	.byte	0
	.uleb128 0x12
	.long	.LASF1592
	.byte	0x1
	.value	0x2196
	.long	0x1e3
	.byte	0x60
	.uleb128 0x12
	.long	.LASF323
	.byte	0x1
	.value	0x2197
	.long	0x2d
	.byte	0x68
	.uleb128 0x12
	.long	.LASF1593
	.byte	0x1
	.value	0x2198
	.long	0x1e3
	.byte	0x70
	.uleb128 0x12
	.long	.LASF1594
	.byte	0x1
	.value	0x2199
	.long	0x1e3
	.byte	0x74
	.byte	0
	.uleb128 0x15
	.long	0x423e
	.long	0x42c1
	.uleb128 0x16
	.long	0x1ea
	.byte	0x5
	.byte	0
	.uleb128 0x2e
	.long	.LASF1597
	.byte	0x1
	.value	0x1d5
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.uleb128 0x1
	.byte	0x9c
	.long	0x4384
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x1d7
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x1dd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.quad	.LBB2
	.quad	.LBE2-.LBB2
	.uleb128 0x2f
	.string	"__h"
	.byte	0x1
	.value	0x204
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x31
	.quad	.LBB3
	.quad	.LBE3-.LBB3
	.long	0x4352
	.uleb128 0x2f
	.string	"__o"
	.byte	0x1
	.value	0x204
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1595
	.byte	0x1
	.value	0x204
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.byte	0
	.uleb128 0x30
	.quad	.LBB4
	.quad	.LBE4-.LBB4
	.uleb128 0x32
	.long	.LASF1596
	.byte	0x1
	.value	0x204
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF340
	.byte	0x1
	.value	0x204
	.long	0x317
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.long	.LASF1608
	.byte	0x1
	.value	0x20f
	.long	0x2f8d
	.quad	.LFB3
	.quad	.LFE3-.LFB3
	.uleb128 0x1
	.byte	0x9c
	.long	0x4439
	.uleb128 0x2f
	.string	"c"
	.byte	0x1
	.value	0x211
	.long	0x2f8d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB5
	.quad	.LBE5-.LBB5
	.uleb128 0x2f
	.string	"__h"
	.byte	0x1
	.value	0x216
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.quad	.LBB6
	.quad	.LBE6-.LBB6
	.long	0x4407
	.uleb128 0x2f
	.string	"__o"
	.byte	0x1
	.value	0x216
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1595
	.byte	0x1
	.value	0x216
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.byte	0
	.uleb128 0x30
	.quad	.LBB7
	.quad	.LBE7-.LBB7
	.uleb128 0x32
	.long	.LASF1596
	.byte	0x1
	.value	0x216
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF340
	.byte	0x1
	.value	0x216
	.long	0x317
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x2e
	.long	.LASF1598
	.byte	0x1
	.value	0x22a
	.quad	.LFB4
	.quad	.LFE4-.LFB4
	.uleb128 0x1
	.byte	0x9c
	.long	0x455b
	.uleb128 0x34
	.string	"to"
	.byte	0x1
	.value	0x22b
	.long	0x455b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.long	.LASF1581
	.byte	0x1
	.value	0x22c
	.long	0x2c56
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x22e
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF1607
	.long	0x4571
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14287
	.uleb128 0x30
	.quad	.LBB8
	.quad	.LBE8-.LBB8
	.uleb128 0x32
	.long	.LASF1599
	.byte	0x1
	.value	0x230
	.long	0x2c04
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1600
	.byte	0x1
	.value	0x230
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF1601
	.byte	0x1
	.value	0x230
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF1602
	.byte	0x1
	.value	0x230
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x30
	.quad	.LBB9
	.quad	.LBE9-.LBB9
	.uleb128 0x32
	.long	.LASF1603
	.byte	0x1
	.value	0x230
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.quad	.LBB10
	.quad	.LBE10-.LBB10
	.uleb128 0x32
	.long	.LASF1604
	.byte	0x1
	.value	0x230
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB11
	.quad	.LBE11-.LBB11
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x230
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x32
	.long	.LASF56
	.byte	0x1
	.value	0x230
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x75b
	.uleb128 0x15
	.long	0x36a
	.long	0x4571
	.uleb128 0x16
	.long	0x1ea
	.byte	0x16
	.byte	0
	.uleb128 0xc
	.long	0x4561
	.uleb128 0x37
	.long	.LASF1623
	.byte	0x1
	.value	0x24c
	.quad	.LFB5
	.quad	.LFE5-.LFB5
	.uleb128 0x1
	.byte	0x9c
	.long	0x463c
	.uleb128 0x34
	.string	"loc"
	.byte	0x1
	.value	0x24d
	.long	0xfc6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF1605
	.byte	0x1
	.value	0x24e
	.long	0x59d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x35
	.long	.LASF1606
	.byte	0x1
	.value	0x24f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"x"
	.byte	0x1
	.value	0x251
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0x252
	.long	0x766
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"fmt"
	.byte	0x1
	.value	0x253
	.long	0x577
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x254
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0x254
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x36
	.long	.LASF1607
	.long	0x464c
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14311
	.uleb128 0x30
	.quad	.LBB12
	.quad	.LBE12-.LBB12
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x25c
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x464c
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1d
	.byte	0
	.uleb128 0xc
	.long	0x463c
	.uleb128 0x33
	.long	.LASF1224
	.byte	0x1
	.value	0x2a0
	.long	0x1e3
	.quad	.LFB6
	.quad	.LFE6-.LFB6
	.uleb128 0x1
	.byte	0x9c
	.long	0x4a84
	.uleb128 0x35
	.long	.LASF344
	.byte	0x1
	.value	0x2a1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x35
	.long	.LASF1609
	.byte	0x1
	.value	0x2a2
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -300
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x2a4
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -284
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x2a5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0x2a6
	.long	0x4a84
	.uleb128 0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x32
	.long	.LASF1610
	.byte	0x1
	.value	0x2aa
	.long	0x364
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x32
	.long	.LASF1611
	.byte	0x1
	.value	0x2ab
	.long	0x4a9a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x38
	.long	.LASF1690
	.byte	0x1
	.value	0x46c
	.quad	.L160
	.uleb128 0x36
	.long	.LASF1607
	.long	0x4ab0
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14398
	.uleb128 0x31
	.quad	.LBB13
	.quad	.LBE13-.LBB13
	.long	0x4791
	.uleb128 0x2f
	.string	"__h"
	.byte	0x1
	.value	0x2b2
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x31
	.quad	.LBB14
	.quad	.LBE14-.LBB14
	.long	0x475e
	.uleb128 0x2f
	.string	"__o"
	.byte	0x1
	.value	0x2b2
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x32
	.long	.LASF1595
	.byte	0x1
	.value	0x2b2
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.byte	0
	.uleb128 0x30
	.quad	.LBB15
	.quad	.LBE15-.LBB15
	.uleb128 0x32
	.long	.LASF1596
	.byte	0x1
	.value	0x2b2
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x32
	.long	.LASF340
	.byte	0x1
	.value	0x2b2
	.long	0x317
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB16
	.quad	.LBE16-.LBB16
	.long	0x47f9
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x2f8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x30
	.quad	.LBB17
	.quad	.LBE17-.LBB17
	.uleb128 0x32
	.long	.LASF1612
	.byte	0x1
	.value	0x309
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x30
	.quad	.LBB18
	.quad	.LBE18-.LBB18
	.uleb128 0x2f
	.string	"x"
	.byte	0x1
	.value	0x316
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x39
	.long	.Ldebug_ranges0+0
	.long	0x493c
	.uleb128 0x32
	.long	.LASF1613
	.byte	0x1
	.value	0x399
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x32
	.long	.LASF1614
	.byte	0x1
	.value	0x39a
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -276
	.uleb128 0x32
	.long	.LASF1615
	.byte	0x1
	.value	0x39c
	.long	0x319
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x31
	.quad	.LBB20
	.quad	.LBE20-.LBB20
	.long	0x4856
	.uleb128 0x2f
	.string	"x"
	.byte	0x1
	.value	0x3c5
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.byte	0
	.uleb128 0x31
	.quad	.LBB21
	.quad	.LBE21-.LBB21
	.long	0x48e4
	.uleb128 0x2f
	.string	"__h"
	.byte	0x1
	.value	0x3ec
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x31
	.quad	.LBB22
	.quad	.LBE22-.LBB22
	.long	0x48b1
	.uleb128 0x2f
	.string	"__o"
	.byte	0x1
	.value	0x3ec
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF1595
	.byte	0x1
	.value	0x3ec
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -268
	.byte	0
	.uleb128 0x30
	.quad	.LBB23
	.quad	.LBE23-.LBB23
	.uleb128 0x32
	.long	.LASF1596
	.byte	0x1
	.value	0x3ec
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF340
	.byte	0x1
	.value	0x3ec
	.long	0x317
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB24
	.quad	.LBE24-.LBB24
	.long	0x490a
	.uleb128 0x32
	.long	.LASF1616
	.byte	0x1
	.value	0x3fc
	.long	0x75b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -264
	.byte	0
	.uleb128 0x30
	.quad	.LBB25
	.quad	.LBE25-.LBB25
	.uleb128 0x2f
	.string	"__o"
	.byte	0x1
	.value	0x41f
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF1617
	.byte	0x1
	.value	0x41f
	.long	0x317
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB27
	.quad	.LBE27-.LBB27
	.long	0x4984
	.uleb128 0x32
	.long	.LASF25
	.byte	0x1
	.value	0x434
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x30
	.quad	.LBB28
	.quad	.LBE28-.LBB28
	.uleb128 0x32
	.long	.LASF1618
	.byte	0x1
	.value	0x437
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB29
	.quad	.LBE29-.LBB29
	.long	0x49aa
	.uleb128 0x32
	.long	.LASF1619
	.byte	0x1
	.value	0x454
	.long	0x319
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x31
	.quad	.LBB30
	.quad	.LBE30-.LBB30
	.long	0x49f1
	.uleb128 0x32
	.long	.LASF1620
	.byte	0x1
	.value	0x47d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x30
	.quad	.LBB31
	.quad	.LBE31-.LBB31
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x489
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB32
	.quad	.LBE32-.LBB32
	.long	0x4a17
	.uleb128 0x32
	.long	.LASF1621
	.byte	0x1
	.value	0x4ab
	.long	0xfc6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.byte	0
	.uleb128 0x31
	.quad	.LBB33
	.quad	.LBE33-.LBB33
	.long	0x4a53
	.uleb128 0x32
	.long	.LASF324
	.byte	0x1
	.value	0x4d7
	.long	0x319
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x32
	.long	.LASF1622
	.byte	0x1
	.value	0x4d8
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	verbose_warned.14416
	.byte	0
	.uleb128 0x30
	.quad	.LBB34
	.quad	.LBE34-.LBB34
	.uleb128 0x2f
	.string	"__o"
	.byte	0x1
	.value	0x503
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1617
	.byte	0x1
	.value	0x503
	.long	0x317
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4188
	.uleb128 0x15
	.long	0x1e3
	.long	0x4a9a
	.uleb128 0x16
	.long	0x1ea
	.byte	0x3
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x4a8a
	.uleb128 0x15
	.long	0x36a
	.long	0x4ab0
	.uleb128 0x16
	.long	0x1ea
	.byte	0x6
	.byte	0
	.uleb128 0xc
	.long	0x4aa0
	.uleb128 0x37
	.long	.LASF1624
	.byte	0x1
	.value	0x517
	.quad	.LFB7
	.quad	.LFE7-.LFB7
	.uleb128 0x1
	.byte	0x9c
	.long	0x4bc0
	.uleb128 0x32
	.long	.LASF1263
	.byte	0x1
	.value	0x51a
	.long	0x3073
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x32
	.long	.LASF1264
	.byte	0x1
	.value	0x51b
	.long	0x3083
	.uleb128 0x3
	.byte	0x91
	.sleb128 -384
	.uleb128 0x32
	.long	.LASF1385
	.byte	0x1
	.value	0x51c
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -432
	.uleb128 0x30
	.quad	.LBB35
	.quad	.LBE35-.LBB35
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x520
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -444
	.uleb128 0x32
	.long	.LASF1625
	.byte	0x1
	.value	0x520
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -436
	.uleb128 0x32
	.long	.LASF1626
	.byte	0x1
	.value	0x521
	.long	0x75b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -424
	.uleb128 0x32
	.long	.LASF1627
	.byte	0x1
	.value	0x521
	.long	0x75b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -416
	.uleb128 0x2f
	.string	"pat"
	.byte	0x1
	.value	0x522
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -400
	.uleb128 0x31
	.quad	.LBB36
	.quad	.LBE36-.LBB36
	.long	0x4b86
	.uleb128 0x2f
	.string	"t"
	.byte	0x1
	.value	0x531
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -392
	.byte	0
	.uleb128 0x3a
	.long	.Ldebug_ranges0+0x30
	.uleb128 0x2f
	.string	"p"
	.byte	0x1
	.value	0x53d
	.long	0x577
	.uleb128 0x3
	.byte	0x91
	.sleb128 -408
	.uleb128 0x2f
	.string	"cls"
	.byte	0x1
	.value	0x541
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -440
	.uleb128 0x3a
	.long	.Ldebug_ranges0+0x60
	.uleb128 0x2f
	.string	"c"
	.byte	0x1
	.value	0x545
	.long	0x36a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -445
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1628
	.byte	0x1
	.value	0x582
	.quad	.LFB8
	.quad	.LFE8-.LFB8
	.uleb128 0x1
	.byte	0x9c
	.long	0x4d01
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x583
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x31
	.quad	.LBB42
	.quad	.LBE42-.LBB42
	.long	0x4c7a
	.uleb128 0x2f
	.string	"__h"
	.byte	0x1
	.value	0x587
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x31
	.quad	.LBB43
	.quad	.LBE43-.LBB43
	.long	0x4c49
	.uleb128 0x2f
	.string	"__o"
	.byte	0x1
	.value	0x587
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF1595
	.byte	0x1
	.value	0x587
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.uleb128 0x30
	.quad	.LBB44
	.quad	.LBE44-.LBB44
	.uleb128 0x32
	.long	.LASF1596
	.byte	0x1
	.value	0x587
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF340
	.byte	0x1
	.value	0x587
	.long	0x317
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB45
	.quad	.LBE45-.LBB45
	.uleb128 0x2f
	.string	"__h"
	.byte	0x1
	.value	0x58a
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.quad	.LBB46
	.quad	.LBE46-.LBB46
	.long	0x4ccf
	.uleb128 0x2f
	.string	"__o"
	.byte	0x1
	.value	0x58a
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1595
	.byte	0x1
	.value	0x58a
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.byte	0
	.uleb128 0x30
	.quad	.LBB47
	.quad	.LBE47-.LBB47
	.uleb128 0x32
	.long	.LASF1596
	.byte	0x1
	.value	0x58a
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF340
	.byte	0x1
	.value	0x58a
	.long	0x317
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1629
	.byte	0x1
	.value	0x591
	.quad	.LFB9
	.quad	.LFE9-.LFB9
	.uleb128 0x1
	.byte	0x9c
	.long	0x4ed4
	.uleb128 0x35
	.long	.LASF1609
	.byte	0x1
	.value	0x592
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x32
	.long	.LASF1630
	.byte	0x1
	.value	0x594
	.long	0x4ed4
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF1385
	.byte	0x1
	.value	0x595
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF453
	.byte	0x1
	.value	0x595
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x31
	.quad	.LBB48
	.quad	.LBE48-.LBB48
	.long	0x4ded
	.uleb128 0x2f
	.string	"__h"
	.byte	0x1
	.value	0x599
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x31
	.quad	.LBB49
	.quad	.LBE49-.LBB49
	.long	0x4dba
	.uleb128 0x2f
	.string	"__o"
	.byte	0x1
	.value	0x599
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF1595
	.byte	0x1
	.value	0x599
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.byte	0
	.uleb128 0x30
	.quad	.LBB50
	.quad	.LBE50-.LBB50
	.uleb128 0x32
	.long	.LASF1596
	.byte	0x1
	.value	0x599
	.long	0x11c1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF340
	.byte	0x1
	.value	0x599
	.long	0x317
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB51
	.quad	.LBE51-.LBB51
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x59c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.quad	.LBB52
	.quad	.LBE52-.LBB52
	.uleb128 0x32
	.long	.LASF1631
	.byte	0x1
	.value	0x5b0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1632
	.byte	0x1
	.value	0x5b1
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.long	.LASF1633
	.byte	0x1
	.value	0x5b2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1634
	.byte	0x1
	.value	0x5b3
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF1635
	.byte	0x1
	.value	0x5b4
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x5b5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.quad	.LBB53
	.quad	.LBE53-.LBB53
	.long	0x4ea1
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x5ce
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x30
	.quad	.LBB54
	.quad	.LBE54-.LBB54
	.uleb128 0x2f
	.string	"__o"
	.byte	0x1
	.value	0x5ed
	.long	0x11c1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF1617
	.byte	0x1
	.value	0x5ed
	.long	0x317
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x2f8d
	.uleb128 0x3b
	.long	.LASF1643
	.byte	0x1
	.value	0x605
	.long	0x1e3
	.quad	.LFB10
	.quad	.LFE10-.LFB10
	.uleb128 0x1
	.byte	0x9c
	.long	0x4f44
	.uleb128 0x34
	.string	"r1p"
	.byte	0x1
	.value	0x606
	.long	0x596
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.string	"r2p"
	.byte	0x1
	.value	0x607
	.long	0x596
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"r1"
	.byte	0x1
	.value	0x609
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"r2"
	.byte	0x1
	.value	0x609
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"t"
	.byte	0x1
	.value	0x60a
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF1636
	.byte	0x1
	.value	0x631
	.quad	.LFB11
	.quad	.LFE11-.LFB11
	.uleb128 0x1
	.byte	0x9c
	.long	0x4fb0
	.uleb128 0x34
	.string	"reg"
	.byte	0x1
	.value	0x632
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.long	.LASF1178
	.byte	0x1
	.value	0x634
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x635
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF56
	.byte	0x1
	.value	0x636
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x36
	.long	.LASF1607
	.long	0x4fc0
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14552
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x4fc0
	.uleb128 0x16
	.long	0x1ea
	.byte	0xc
	.byte	0
	.uleb128 0xc
	.long	0x4fb0
	.uleb128 0x37
	.long	.LASF1637
	.byte	0x1
	.value	0x64c
	.quad	.LFB12
	.quad	.LFE12-.LFB12
	.uleb128 0x1
	.byte	0x9c
	.long	0x514c
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x64d
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x64f
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF1638
	.byte	0x1
	.value	0x650
	.long	0x75b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF1639
	.byte	0x1
	.value	0x651
	.long	0x75b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x31
	.quad	.LBB55
	.quad	.LBE55-.LBB55
	.long	0x50b8
	.uleb128 0x32
	.long	.LASF1599
	.byte	0x1
	.value	0x665
	.long	0x2c04
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1600
	.byte	0x1
	.value	0x665
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x32
	.long	.LASF1601
	.byte	0x1
	.value	0x665
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.long	.LASF1602
	.byte	0x1
	.value	0x665
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x30
	.quad	.LBB56
	.quad	.LBE56-.LBB56
	.uleb128 0x32
	.long	.LASF1603
	.byte	0x1
	.value	0x665
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB57
	.quad	.LBE57-.LBB57
	.uleb128 0x32
	.long	.LASF1604
	.byte	0x1
	.value	0x665
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB58
	.quad	.LBE58-.LBB58
	.uleb128 0x32
	.long	.LASF1599
	.byte	0x1
	.value	0x66a
	.long	0x2c04
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1600
	.byte	0x1
	.value	0x66a
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x32
	.long	.LASF1601
	.byte	0x1
	.value	0x66a
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x32
	.long	.LASF1602
	.byte	0x1
	.value	0x66a
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x30
	.quad	.LBB59
	.quad	.LBE59-.LBB59
	.uleb128 0x32
	.long	.LASF1603
	.byte	0x1
	.value	0x66a
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB60
	.quad	.LBE60-.LBB60
	.uleb128 0x32
	.long	.LASF1604
	.byte	0x1
	.value	0x66a
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1640
	.byte	0x1
	.value	0x67f
	.quad	.LFB13
	.quad	.LFE13-.LFB13
	.uleb128 0x1
	.byte	0x9c
	.long	0x51b4
	.uleb128 0x35
	.long	.LASF1641
	.byte	0x1
	.value	0x680
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x35
	.long	.LASF1642
	.byte	0x1
	.value	0x680
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.string	"reg"
	.byte	0x1
	.value	0x680
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x682
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF56
	.byte	0x1
	.value	0x683
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x3c
	.long	.LASF1644
	.byte	0x1
	.value	0x693
	.long	0x1e3
	.quad	.LFB14
	.quad	.LFE14-.LFB14
	.uleb128 0x1
	.byte	0x9c
	.long	0x544c
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x694
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x35
	.long	.LASF1645
	.byte	0x1
	.value	0x695
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -188
	.uleb128 0x32
	.long	.LASF1646
	.byte	0x1
	.value	0x697
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2f
	.string	"rl"
	.byte	0x1
	.value	0x698
	.long	0x2f93
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1647
	.byte	0x1
	.value	0x699
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x32
	.long	.LASF1648
	.byte	0x1
	.value	0x69a
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x69b
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0x69b
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2f
	.string	"k"
	.byte	0x1
	.value	0x69c
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x32
	.long	.LASF1649
	.byte	0x1
	.value	0x69d
	.long	0x75b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1650
	.byte	0x1
	.value	0x69e
	.long	0x75b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x36
	.long	.LASF1607
	.long	0x545c
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14677
	.uleb128 0x31
	.quad	.LBB61
	.quad	.LBE61-.LBB61
	.long	0x52b6
	.uleb128 0x32
	.long	.LASF1651
	.byte	0x1
	.value	0x6a7
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.byte	0
	.uleb128 0x31
	.quad	.LBB62
	.quad	.LBE62-.LBB62
	.long	0x531d
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x6b0
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x30
	.quad	.LBB63
	.quad	.LBE63-.LBB63
	.uleb128 0x32
	.long	.LASF1652
	.byte	0x1
	.value	0x6b6
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2f
	.string	"ok"
	.byte	0x1
	.value	0x6b7
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x32
	.long	.LASF1653
	.byte	0x1
	.value	0x6b8
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB64
	.quad	.LBE64-.LBB64
	.long	0x53b6
	.uleb128 0x32
	.long	.LASF1599
	.byte	0x1
	.value	0x6e2
	.long	0x2c04
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF1600
	.byte	0x1
	.value	0x6e2
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF1601
	.byte	0x1
	.value	0x6e2
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF1602
	.byte	0x1
	.value	0x6e2
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x30
	.quad	.LBB65
	.quad	.LBE65-.LBB65
	.uleb128 0x32
	.long	.LASF1603
	.byte	0x1
	.value	0x6e2
	.long	0x32b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x30
	.quad	.LBB66
	.quad	.LBE66-.LBB66
	.uleb128 0x32
	.long	.LASF1604
	.byte	0x1
	.value	0x6e2
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB67
	.quad	.LBE67-.LBB67
	.uleb128 0x32
	.long	.LASF1599
	.byte	0x1
	.value	0x6e8
	.long	0x2c04
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF1600
	.byte	0x1
	.value	0x6e8
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.long	.LASF1601
	.byte	0x1
	.value	0x6e8
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.long	.LASF1602
	.byte	0x1
	.value	0x6e8
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x30
	.quad	.LBB68
	.quad	.LBE68-.LBB68
	.uleb128 0x32
	.long	.LASF1603
	.byte	0x1
	.value	0x6e8
	.long	0x32b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.quad	.LBB69
	.quad	.LBE69-.LBB69
	.uleb128 0x32
	.long	.LASF1604
	.byte	0x1
	.value	0x6e8
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x545c
	.uleb128 0x16
	.long	0x1ea
	.byte	0x8
	.byte	0
	.uleb128 0xc
	.long	0x544c
	.uleb128 0x37
	.long	.LASF1654
	.byte	0x1
	.value	0x6ff
	.quad	.LFB15
	.quad	.LFE15-.LFB15
	.uleb128 0x1
	.byte	0x9c
	.long	0x54e0
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x700
	.long	0x2f8d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x702
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x31
	.quad	.LBB70
	.quad	.LBE70-.LBB70
	.long	0x54c0
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x70d
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x30
	.quad	.LBB71
	.quad	.LBE71-.LBB71
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x728
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1655
	.byte	0x1
	.value	0x73d
	.quad	.LFB16
	.quad	.LFE16-.LFB16
	.uleb128 0x1
	.byte	0x9c
	.long	0x550e
	.uleb128 0x32
	.long	.LASF1385
	.byte	0x1
	.value	0x73f
	.long	0x2f8d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF1656
	.byte	0x1
	.value	0x74a
	.quad	.LFB17
	.quad	.LFE17-.LFB17
	.uleb128 0x1
	.byte	0x9c
	.long	0x556a
	.uleb128 0x2f
	.string	"c"
	.byte	0x1
	.value	0x74c
	.long	0x2f8d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB72
	.quad	.LBE72-.LBB72
	.uleb128 0x32
	.long	.LASF453
	.byte	0x1
	.value	0x752
	.long	0x2f8d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x753
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1657
	.byte	0x1
	.value	0x76a
	.quad	.LFB18
	.quad	.LFE18-.LFB18
	.uleb128 0x1
	.byte	0x9c
	.long	0x55d0
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x76b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1225
	.byte	0x1
	.value	0x76c
	.long	0x1f1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF1658
	.byte	0x1
	.value	0x76e
	.long	0x55e0
	.uleb128 0x9
	.byte	0x3
	.quad	reg_class_names.14714
	.uleb128 0x36
	.long	.LASF1607
	.long	0x55f5
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14715
	.byte	0
	.uleb128 0x15
	.long	0x577
	.long	0x55e0
	.uleb128 0x16
	.long	0x1ea
	.byte	0x18
	.byte	0
	.uleb128 0xc
	.long	0x55d0
	.uleb128 0x15
	.long	0x36a
	.long	0x55f5
	.uleb128 0x16
	.long	0x1ea
	.byte	0xd
	.byte	0
	.uleb128 0xc
	.long	0x55e5
	.uleb128 0x37
	.long	.LASF1659
	.byte	0x1
	.value	0x77e
	.quad	.LFB19
	.quad	.LFE19-.LFB19
	.uleb128 0x1
	.byte	0x9c
	.long	0x5646
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x77f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF433
	.byte	0x1
	.value	0x781
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF1660
	.byte	0x1
	.value	0x782
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF1661
	.byte	0x1
	.value	0x79b
	.quad	.LFB20
	.quad	.LFE20-.LFB20
	.uleb128 0x1
	.byte	0x9c
	.long	0x5724
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x79c
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x35
	.long	.LASF1662
	.byte	0x1
	.value	0x79d
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.quad	.LBB73
	.quad	.LBE73-.LBB73
	.uleb128 0x2f
	.string	"x"
	.byte	0x1
	.value	0x7b6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1663
	.byte	0x1
	.value	0x7b7
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1664
	.byte	0x1
	.value	0x7b8
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1665
	.byte	0x1
	.value	0x7b9
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x31
	.quad	.LBB74
	.quad	.LBE74-.LBB74
	.long	0x5701
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x7e1
	.long	0x59d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.long	.LASF1666
	.byte	0x1
	.value	0x7e2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x30
	.quad	.LBB75
	.quad	.LBE75-.LBB75
	.uleb128 0x32
	.long	.LASF23
	.byte	0x1
	.value	0x818
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3d
	.long	.LASF1667
	.byte	0x1
	.value	0x830
	.quad	.LFB21
	.quad	.LFE21-.LFB21
	.uleb128 0x1
	.byte	0x9c
	.long	0x576e
	.uleb128 0x35
	.long	.LASF57
	.byte	0x1
	.value	0x831
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x833
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"lim"
	.byte	0x1
	.value	0x833
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF1668
	.byte	0x1
	.value	0x848
	.quad	.LFB22
	.quad	.LFE22-.LFB22
	.uleb128 0x1
	.byte	0x9c
	.long	0x57f1
	.uleb128 0x34
	.string	"x"
	.byte	0x1
	.value	0x849
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x84a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF1669
	.byte	0x1
	.value	0x84b
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0x84d
	.long	0x766
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x84e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x84f
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"p"
	.byte	0x1
	.value	0x850
	.long	0x4a84
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x33
	.long	.LASF1670
	.byte	0x1
	.value	0x8ee
	.long	0x2d
	.quad	.LFB23
	.quad	.LFE23-.LFB23
	.uleb128 0x1
	.byte	0x9c
	.long	0x59fa
	.uleb128 0x34
	.string	"x"
	.byte	0x1
	.value	0x8ef
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x35
	.long	.LASF1605
	.byte	0x1
	.value	0x8f0
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x8f1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0x8f3
	.long	0x766
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0x8f4
	.long	0x4a84
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x8f5
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2f
	.string	"new"
	.byte	0x1
	.value	0x8f6
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x8f7
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0x8f7
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x2f
	.string	"fmt"
	.byte	0x1
	.value	0x8f8
	.long	0x577
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF1671
	.byte	0x1
	.value	0x8f9
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x36
	.long	.LASF1607
	.long	0x5a0a
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14877
	.uleb128 0x31
	.quad	.LBB76
	.quad	.LBE76-.LBB76
	.long	0x5905
	.uleb128 0x32
	.long	.LASF1672
	.byte	0x1
	.value	0x964
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF1673
	.byte	0x1
	.value	0x965
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x31
	.quad	.LBB77
	.quad	.LBE77-.LBB77
	.long	0x593a
	.uleb128 0x32
	.long	.LASF1672
	.byte	0x1
	.value	0x9ad
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF1673
	.byte	0x1
	.value	0x9ae
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x31
	.quad	.LBB78
	.quad	.LBE78-.LBB78
	.long	0x5970
	.uleb128 0x32
	.long	.LASF1674
	.byte	0x1
	.value	0x9fe
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF1675
	.byte	0x1
	.value	0x9ff
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.byte	0
	.uleb128 0x31
	.quad	.LBB79
	.quad	.LBE79-.LBB79
	.long	0x5995
	.uleb128 0x32
	.long	.LASF1676
	.byte	0x1
	.value	0xa41
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x30
	.quad	.LBB80
	.quad	.LBE80-.LBB80
	.uleb128 0x32
	.long	.LASF1677
	.byte	0x1
	.value	0xa4c
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x30
	.quad	.LBB81
	.quad	.LBE81-.LBB81
	.uleb128 0x32
	.long	.LASF1678
	.byte	0x1
	.value	0xa52
	.long	0xed
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.quad	.LBB82
	.quad	.LBE82-.LBB82
	.uleb128 0x32
	.long	.LASF1676
	.byte	0x1
	.value	0xa56
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x5a0a
	.uleb128 0x16
	.long	0x1ea
	.byte	0xe
	.byte	0
	.uleb128 0xc
	.long	0x59fa
	.uleb128 0x37
	.long	.LASF1679
	.byte	0x1
	.value	0xa6e
	.quad	.LFB24
	.quad	.LFE24-.LFB24
	.uleb128 0x1
	.byte	0x9c
	.long	0x5afa
	.uleb128 0x34
	.string	"x"
	.byte	0x1
	.value	0xa6f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF1605
	.byte	0x1
	.value	0xa70
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0xa73
	.long	0x766
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0xa74
	.long	0x4a84
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0xa75
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xa76
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0xa76
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"fmt"
	.byte	0x1
	.value	0xa77
	.long	0x577
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x36
	.long	.LASF1607
	.long	0x5afa
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14913
	.uleb128 0x31
	.quad	.LBB83
	.quad	.LBE83-.LBB83
	.long	0x5ad8
	.uleb128 0x32
	.long	.LASF324
	.byte	0x1
	.value	0xaac
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.uleb128 0x30
	.quad	.LBB84
	.quad	.LBE84-.LBB84
	.uleb128 0x2f
	.string	"src"
	.byte	0x1
	.value	0xb06
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x567
	.uleb128 0x37
	.long	.LASF1680
	.byte	0x1
	.value	0xb32
	.quad	.LFB25
	.quad	.LFE25-.LFB25
	.uleb128 0x1
	.byte	0x9c
	.long	0x5b99
	.uleb128 0x34
	.string	"x"
	.byte	0x1
	.value	0xb33
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"fmt"
	.byte	0x1
	.value	0xb35
	.long	0x577
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xb36
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0xb37
	.long	0x766
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x31
	.quad	.LBB85
	.quad	.LBE85-.LBB85
	.long	0x5b79
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0xb40
	.long	0x4a84
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x30
	.quad	.LBB86
	.quad	.LBE86-.LBB86
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0xb4f
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x3c
	.long	.LASF1681
	.byte	0x1
	.value	0xb64
	.long	0x1e3
	.quad	.LFB26
	.quad	.LFE26-.LFB26
	.uleb128 0x1
	.byte	0x9c
	.long	0x5de6
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0xb65
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -648
	.uleb128 0x35
	.long	.LASF1682
	.byte	0x1
	.value	0xb66
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -652
	.uleb128 0x32
	.long	.LASF1683
	.byte	0x1
	.value	0xb68
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -620
	.uleb128 0x32
	.long	.LASF1631
	.byte	0x1
	.value	0xb69
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -568
	.uleb128 0x32
	.long	.LASF1684
	.byte	0x1
	.value	0xb6a
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -616
	.uleb128 0x32
	.long	.LASF1685
	.byte	0x1
	.value	0xb6b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -560
	.uleb128 0x32
	.long	.LASF1686
	.byte	0x1
	.value	0xb6c
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -600
	.uleb128 0x2f
	.string	"val"
	.byte	0x1
	.value	0xb6d
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -632
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xb6e
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -628
	.uleb128 0x32
	.long	.LASF1687
	.byte	0x1
	.value	0xb6e
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -608
	.uleb128 0x32
	.long	.LASF1688
	.byte	0x1
	.value	0xb6f
	.long	0x3053
	.uleb128 0x3
	.byte	0x91
	.sleb128 -512
	.uleb128 0x32
	.long	.LASF1689
	.byte	0x1
	.value	0xb70
	.long	0x3053
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0xb71
	.long	0x4a84
	.uleb128 0x3
	.byte	0x91
	.sleb128 -592
	.uleb128 0x36
	.long	.LASF1607
	.long	0x5de6
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.14998
	.uleb128 0x38
	.long	.LASF1691
	.byte	0x1
	.value	0xcae
	.quad	.L828
	.uleb128 0x31
	.quad	.LBB87
	.quad	.LBE87-.LBB87
	.long	0x5d49
	.uleb128 0x32
	.long	.LASF1692
	.byte	0x1
	.value	0xb8e
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -584
	.uleb128 0x32
	.long	.LASF1693
	.byte	0x1
	.value	0xb8f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -576
	.uleb128 0x32
	.long	.LASF323
	.byte	0x1
	.value	0xb90
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -624
	.uleb128 0x31
	.quad	.LBB88
	.quad	.LBE88-.LBB88
	.long	0x5d26
	.uleb128 0x32
	.long	.LASF1694
	.byte	0x1
	.value	0xb94
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -552
	.uleb128 0x32
	.long	.LASF1695
	.byte	0x1
	.value	0xb94
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -544
	.byte	0
	.uleb128 0x30
	.quad	.LBB89
	.quad	.LBE89-.LBB89
	.uleb128 0x2f
	.string	"src"
	.byte	0x1
	.value	0xba9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -536
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB90
	.quad	.LBE90-.LBB90
	.long	0x5dc3
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0xbe2
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -528
	.uleb128 0x32
	.long	.LASF323
	.byte	0x1
	.value	0xbe3
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -612
	.uleb128 0x30
	.quad	.LBB91
	.quad	.LBE91-.LBB91
	.uleb128 0x32
	.long	.LASF1696
	.byte	0x1
	.value	0xbec
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x30
	.quad	.LBB92
	.quad	.LBE92-.LBB92
	.uleb128 0x2f
	.string	"vec"
	.byte	0x1
	.value	0xbf8
	.long	0xed
	.uleb128 0x3
	.byte	0x91
	.sleb128 -520
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB93
	.quad	.LBE93-.LBB93
	.uleb128 0x32
	.long	.LASF1697
	.byte	0x1
	.value	0xc84
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -604
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x4561
	.uleb128 0x3e
	.long	.LASF1698
	.byte	0x1
	.value	0xcc1
	.quad	.LFB27
	.quad	.LFE27-.LFB27
	.uleb128 0x1
	.byte	0x9c
	.long	0x5e18
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0xcc3
	.long	0x4a84
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3e
	.long	.LASF1699
	.byte	0x1
	.value	0xcdd
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.uleb128 0x1
	.byte	0x9c
	.long	0x5e6f
	.uleb128 0x35
	.long	.LASF1208
	.byte	0x1
	.value	0xcde
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.string	"x"
	.byte	0x1
	.value	0xcdf
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.long	.LASF1190
	.byte	0x1
	.value	0xce0
	.long	0x317
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xce2
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF1700
	.byte	0x1
	.value	0xd00
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.uleb128 0x1
	.byte	0x9c
	.long	0x5ebc
	.uleb128 0x2f
	.string	"t"
	.byte	0x1
	.value	0xd02
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0xd05
	.long	0x4a84
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x36
	.long	.LASF1607
	.long	0x5ecc
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15063
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x5ecc
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1b
	.byte	0
	.uleb128 0xc
	.long	0x5ebc
	.uleb128 0x37
	.long	.LASF1701
	.byte	0x1
	.value	0xd17
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.uleb128 0x1
	.byte	0x9c
	.long	0x5efe
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0xd19
	.long	0x4a84
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF1702
	.byte	0x1
	.value	0xd31
	.quad	.LFB31
	.quad	.LFE31-.LFB31
	.uleb128 0x1
	.byte	0x9c
	.long	0x5f2a
	.uleb128 0x2f
	.string	"x"
	.byte	0x1
	.value	0xd33
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.uleb128 0x3e
	.long	.LASF1703
	.byte	0x1
	.value	0xd3f
	.quad	.LFB32
	.quad	.LFE32-.LFB32
	.uleb128 0x1
	.byte	0x9c
	.long	0x5f82
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0xd40
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xd42
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF1704
	.byte	0x1
	.value	0xd43
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0xd44
	.long	0x4a84
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF1705
	.byte	0x1
	.value	0xd56
	.quad	.LFB33
	.quad	.LFE33-.LFB33
	.uleb128 0x1
	.byte	0x9c
	.long	0x5ffc
	.uleb128 0x35
	.long	.LASF1706
	.byte	0x1
	.value	0xd57
	.long	0x455b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1707
	.byte	0x1
	.value	0xd5a
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0xd5c
	.long	0x4a84
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.quad	.LBB94
	.quad	.LBE94-.LBB94
	.uleb128 0x2f
	.string	"op"
	.byte	0x1
	.value	0xd6f
	.long	0x4a84
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF1708
	.byte	0x1
	.value	0xd70
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1709
	.byte	0x1
	.value	0xda7
	.quad	.LFB34
	.quad	.LFE34-.LFB34
	.uleb128 0x1
	.byte	0x9c
	.long	0x6038
	.uleb128 0x2f
	.string	"ep"
	.byte	0x1
	.value	0xda9
	.long	0x4a84
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"ep1"
	.byte	0x1
	.value	0xdab
	.long	0x6038
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3
	.byte	0x8
	.long	0x603e
	.uleb128 0xc
	.long	0x4217
	.uleb128 0x37
	.long	.LASF1710
	.byte	0x1
	.value	0xdea
	.quad	.LFB35
	.quad	.LFE35-.LFB35
	.uleb128 0x1
	.byte	0x9c
	.long	0x608d
	.uleb128 0x35
	.long	.LASF57
	.byte	0x1
	.value	0xdeb
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x35
	.long	.LASF1711
	.byte	0x1
	.value	0xdec
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xdee
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x3e
	.long	.LASF1712
	.byte	0x1
	.value	0xe07
	.quad	.LFB36
	.quad	.LFE36-.LFB36
	.uleb128 0x1
	.byte	0x9c
	.long	0x60ca
	.uleb128 0x35
	.long	.LASF1713
	.byte	0x1
	.value	0xe08
	.long	0x455b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x35
	.long	.LASF1714
	.byte	0x1
	.value	0xe08
	.long	0x455b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x3c
	.long	.LASF1715
	.byte	0x1
	.value	0xe13
	.long	0x1e3
	.quad	.LFB37
	.quad	.LFE37-.LFB37
	.uleb128 0x1
	.byte	0x9c
	.long	0x6393
	.uleb128 0x35
	.long	.LASF1609
	.byte	0x1
	.value	0xe14
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -180
	.uleb128 0x32
	.long	.LASF1385
	.byte	0x1
	.value	0xe16
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF1613
	.byte	0x1
	.value	0xe17
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xe18
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x36
	.long	.LASF1607
	.long	0x6393
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15150
	.uleb128 0x3f
	.string	"ok"
	.byte	0x1
	.value	0xe8a
	.quad	.L1020
	.uleb128 0x31
	.quad	.LBB95
	.quad	.LBE95-.LBB95
	.long	0x61e5
	.uleb128 0x32
	.long	.LASF1599
	.byte	0x1
	.value	0xe33
	.long	0x2c04
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF1600
	.byte	0x1
	.value	0xe33
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.long	.LASF1601
	.byte	0x1
	.value	0xe33
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x32
	.long	.LASF1602
	.byte	0x1
	.value	0xe33
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x30
	.quad	.LBB96
	.quad	.LBE96-.LBB96
	.uleb128 0x32
	.long	.LASF1603
	.byte	0x1
	.value	0xe33
	.long	0x32b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x30
	.quad	.LBB97
	.quad	.LBE97-.LBB97
	.uleb128 0x32
	.long	.LASF1604
	.byte	0x1
	.value	0xe33
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB98
	.quad	.LBE98-.LBB98
	.long	0x627e
	.uleb128 0x32
	.long	.LASF1599
	.byte	0x1
	.value	0xe4c
	.long	0x2c04
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF1600
	.byte	0x1
	.value	0xe4c
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x32
	.long	.LASF1601
	.byte	0x1
	.value	0xe4c
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x32
	.long	.LASF1602
	.byte	0x1
	.value	0xe4c
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x30
	.quad	.LBB99
	.quad	.LBE99-.LBB99
	.uleb128 0x32
	.long	.LASF1603
	.byte	0x1
	.value	0xe4c
	.long	0x32b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.quad	.LBB100
	.quad	.LBE100-.LBB100
	.uleb128 0x32
	.long	.LASF1604
	.byte	0x1
	.value	0xe4c
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB101
	.quad	.LBE101-.LBB101
	.long	0x6315
	.uleb128 0x32
	.long	.LASF1599
	.byte	0x1
	.value	0xe52
	.long	0x2c04
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1600
	.byte	0x1
	.value	0xe52
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF1601
	.byte	0x1
	.value	0xe52
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF1602
	.byte	0x1
	.value	0xe52
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x30
	.quad	.LBB102
	.quad	.LBE102-.LBB102
	.uleb128 0x32
	.long	.LASF1603
	.byte	0x1
	.value	0xe52
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB103
	.quad	.LBE103-.LBB103
	.uleb128 0x32
	.long	.LASF1604
	.byte	0x1
	.value	0xe52
	.long	0x32b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB104
	.quad	.LBE104-.LBB104
	.long	0x633a
	.uleb128 0x32
	.long	.LASF1716
	.byte	0x1
	.value	0xe62
	.long	0x75b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x31
	.quad	.LBB105
	.quad	.LBE105-.LBB105
	.long	0x6370
	.uleb128 0x32
	.long	.LASF1638
	.byte	0x1
	.value	0xe71
	.long	0x75b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x32
	.long	.LASF1639
	.byte	0x1
	.value	0xe72
	.long	0x75b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.uleb128 0x30
	.quad	.LBB106
	.quad	.LBE106-.LBB106
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0xe91
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x55e5
	.uleb128 0x37
	.long	.LASF1717
	.byte	0x1
	.value	0xea9
	.quad	.LFB38
	.quad	.LFE38-.LFB38
	.uleb128 0x1
	.byte	0x9c
	.long	0x640e
	.uleb128 0x34
	.string	"x"
	.byte	0x1
	.value	0xeaa
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xeac
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"fmt"
	.byte	0x1
	.value	0xead
	.long	0x577
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0xeae
	.long	0x766
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.quad	.LBB107
	.quad	.LBE107-.LBB107
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0xed8
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1718
	.byte	0x1
	.value	0xee9
	.quad	.LFB39
	.quad	.LFE39-.LFB39
	.uleb128 0x1
	.byte	0x9c
	.long	0x64eb
	.uleb128 0x35
	.long	.LASF1719
	.byte	0x1
	.value	0xeea
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x32
	.long	.LASF1385
	.byte	0x1
	.value	0xeec
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.string	"x"
	.byte	0x1
	.value	0xef0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x30
	.quad	.LBB108
	.quad	.LBE108-.LBB108
	.uleb128 0x32
	.long	.LASF433
	.byte	0x1
	.value	0xefc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0xefd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF1720
	.byte	0x1
	.value	0xefe
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.quad	.LBB109
	.quad	.LBE109-.LBB109
	.uleb128 0x32
	.long	.LASF1721
	.byte	0x1
	.value	0xf07
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB110
	.quad	.LBE110-.LBB110
	.uleb128 0x32
	.long	.LASF453
	.byte	0x1
	.value	0xf39
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"p"
	.byte	0x1
	.value	0xf3a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1722
	.byte	0x1
	.value	0xfff
	.quad	.LFB40
	.quad	.LFE40-.LFB40
	.uleb128 0x1
	.byte	0x9c
	.long	0x6581
	.uleb128 0x34
	.string	"x"
	.byte	0x1
	.value	0x1000
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF1723
	.byte	0x1
	.value	0x1001
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF1190
	.byte	0x1
	.value	0x1002
	.long	0x317
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x1004
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"nr"
	.byte	0x1
	.value	0x1005
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF323
	.byte	0x1
	.value	0x1006
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.quad	.LBB111
	.quad	.LBE111-.LBB111
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x101c
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x3e
	.long	.LASF1724
	.byte	0x1
	.value	0x1064
	.quad	.LFB41
	.quad	.LFE41-.LFB41
	.uleb128 0x1
	.byte	0x9c
	.long	0x65f8
	.uleb128 0x35
	.long	.LASF57
	.byte	0x1
	.value	0x1065
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x35
	.long	.LASF1231
	.byte	0x1
	.value	0x1066
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x1067
	.long	0x2d01
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x1068
	.long	0x59d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF56
	.byte	0x1
	.value	0x106a
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x106b
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0x37
	.long	.LASF1725
	.byte	0x1
	.value	0x10a5
	.quad	.LFB42
	.quad	.LFE42-.LFB42
	.uleb128 0x1
	.byte	0x9c
	.long	0x6711
	.uleb128 0x35
	.long	.LASF57
	.byte	0x1
	.value	0x10a6
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x35
	.long	.LASF1231
	.byte	0x1
	.value	0x10a7
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x10a8
	.long	0x2d01
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x10a9
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF56
	.byte	0x1
	.value	0x10ab
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.long	.LASF1726
	.byte	0x1
	.value	0x10ac
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x32
	.long	.LASF1727
	.byte	0x1
	.value	0x10ac
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x10ac
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x10ad
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1728
	.byte	0x1
	.value	0x10b2
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x32
	.long	.LASF1729
	.byte	0x1
	.value	0x10b3
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1730
	.byte	0x1
	.value	0x10b4
	.long	0x455b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1607
	.long	0x6721
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15345
	.uleb128 0x30
	.quad	.LBB112
	.quad	.LBE112-.LBB112
	.uleb128 0x32
	.long	.LASF1731
	.byte	0x1
	.value	0x10fc
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1732
	.byte	0x1
	.value	0x10fd
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x6721
	.uleb128 0x16
	.long	0x1ea
	.byte	0x17
	.byte	0
	.uleb128 0xc
	.long	0x6711
	.uleb128 0x3c
	.long	.LASF1733
	.byte	0x1
	.value	0x1115
	.long	0x1e3
	.quad	.LFB43
	.quad	.LFE43-.LFB43
	.uleb128 0x1
	.byte	0x9c
	.long	0x6796
	.uleb128 0x35
	.long	.LASF57
	.byte	0x1
	.value	0x1116
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x35
	.long	.LASF1231
	.byte	0x1
	.value	0x1117
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x1118
	.long	0x2d01
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x111a
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x36
	.long	.LASF1607
	.long	0x67a6
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15407
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x67a6
	.uleb128 0x16
	.long	0x1ea
	.byte	0x11
	.byte	0
	.uleb128 0xc
	.long	0x6796
	.uleb128 0x3c
	.long	.LASF1734
	.byte	0x1
	.value	0x11bb
	.long	0x1e3
	.quad	.LFB44
	.quad	.LFE44-.LFB44
	.uleb128 0x1
	.byte	0x9c
	.long	0x681b
	.uleb128 0x35
	.long	.LASF57
	.byte	0x1
	.value	0x11bc
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x35
	.long	.LASF1231
	.byte	0x1
	.value	0x11bd
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x11be
	.long	0x2d01
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x11c0
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x36
	.long	.LASF1607
	.long	0x682b
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15449
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x682b
	.uleb128 0x16
	.long	0x1ea
	.byte	0x18
	.byte	0
	.uleb128 0xc
	.long	0x681b
	.uleb128 0x33
	.long	.LASF1735
	.byte	0x1
	.value	0x1240
	.long	0x1e3
	.quad	.LFB45
	.quad	.LFE45-.LFB45
	.uleb128 0x1
	.byte	0x9c
	.long	0x68be
	.uleb128 0x34
	.string	"r1"
	.byte	0x1
	.value	0x1241
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x34
	.string	"r2"
	.byte	0x1
	.value	0x1241
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1736
	.byte	0x1
	.value	0x1243
	.long	0x2d01
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF1737
	.byte	0x1
	.value	0x1244
	.long	0x2d01
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF1738
	.byte	0x1
	.value	0x1245
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF1739
	.byte	0x1
	.value	0x1246
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x36
	.long	.LASF1607
	.long	0x68ce
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15470
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x68ce
	.uleb128 0x16
	.long	0x1ea
	.byte	0x10
	.byte	0
	.uleb128 0xc
	.long	0x68be
	.uleb128 0x3c
	.long	.LASF1740
	.byte	0x1
	.value	0x129c
	.long	0x1e3
	.quad	.LFB46
	.quad	.LFE46-.LFB46
	.uleb128 0x1
	.byte	0x9c
	.long	0x6a12
	.uleb128 0x35
	.long	.LASF1726
	.byte	0x1
	.value	0x129e
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x35
	.long	.LASF57
	.byte	0x1
	.value	0x129e
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.long	.LASF1231
	.byte	0x1
	.value	0x129f
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x12a0
	.long	0x2d01
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x35
	.long	.LASF340
	.byte	0x1
	.value	0x12a1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x34
	.string	"out"
	.byte	0x1
	.value	0x12a1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x35
	.long	.LASF1741
	.byte	0x1
	.value	0x12a2
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x35
	.long	.LASF1742
	.byte	0x1
	.value	0x12a3
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x32
	.long	.LASF1743
	.byte	0x1
	.value	0x12a5
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF1744
	.byte	0x1
	.value	0x12a9
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x12aa
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x32
	.long	.LASF1745
	.byte	0x1
	.value	0x12ab
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.quad	.LBB113
	.quad	.LBE113-.LBB113
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x12f5
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB114
	.quad	.LBE114-.LBB114
	.uleb128 0x32
	.long	.LASF1746
	.byte	0x1
	.value	0x12fb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.quad	.LBB115
	.quad	.LBE115-.LBB115
	.uleb128 0x32
	.long	.LASF1747
	.byte	0x1
	.value	0x1305
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x3c
	.long	.LASF1748
	.byte	0x1
	.value	0x1390
	.long	0x1e3
	.quad	.LFB47
	.quad	.LFE47-.LFB47
	.uleb128 0x1
	.byte	0x9c
	.long	0x6abe
	.uleb128 0x35
	.long	.LASF57
	.byte	0x1
	.value	0x1392
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x1393
	.long	0x59d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x35
	.long	.LASF1231
	.byte	0x1
	.value	0x1394
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x1395
	.long	0x2d01
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF340
	.byte	0x1
	.value	0x1396
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.string	"out"
	.byte	0x1
	.value	0x1396
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x35
	.long	.LASF1741
	.byte	0x1
	.value	0x1397
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x35
	.long	.LASF1742
	.byte	0x1
	.value	0x1398
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x32
	.long	.LASF56
	.byte	0x1
	.value	0x139a
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x3c
	.long	.LASF1749
	.byte	0x1
	.value	0x13a7
	.long	0x1e3
	.quad	.LFB48
	.quad	.LFE48-.LFB48
	.uleb128 0x1
	.byte	0x9c
	.long	0x6afb
	.uleb128 0x34
	.string	"x"
	.byte	0x1
	.value	0x13a8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x13aa
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF1750
	.byte	0x1
	.value	0x13b5
	.quad	.LFB49
	.quad	.LFE49-.LFB49
	.uleb128 0x1
	.byte	0x9c
	.long	0x6b49
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x13b6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.string	"r"
	.byte	0x1
	.value	0x13b7
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x36
	.long	.LASF1607
	.long	0x6b49
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15545
	.byte	0
	.uleb128 0xc
	.long	0x55e5
	.uleb128 0x3c
	.long	.LASF1751
	.byte	0x1
	.value	0x13cc
	.long	0x1e3
	.quad	.LFB50
	.quad	.LFE50-.LFB50
	.uleb128 0x1
	.byte	0x9c
	.long	0x6bca
	.uleb128 0x34
	.string	"i"
	.byte	0x1
	.value	0x13cd
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x34
	.string	"r"
	.byte	0x1
	.value	0x13cd
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x13cf
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x13d0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.quad	.LBB116
	.quad	.LBE116-.LBB116
	.uleb128 0x32
	.long	.LASF1752
	.byte	0x1
	.value	0x13dc
	.long	0x59d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.byte	0
	.uleb128 0x3c
	.long	.LASF1753
	.byte	0x1
	.value	0x1404
	.long	0x1e3
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x6cc6
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x1405
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.string	"r"
	.byte	0x1
	.value	0x1406
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x35
	.long	.LASF1754
	.byte	0x1
	.value	0x1407
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x1409
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1755
	.byte	0x1
	.value	0x1409
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x32
	.long	.LASF359
	.byte	0x1
	.value	0x1409
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1756
	.byte	0x1
	.value	0x1418
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.quad	.LBB117
	.quad	.LBE117-.LBB117
	.uleb128 0x32
	.long	.LASF1225
	.byte	0x1
	.value	0x1431
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LASF1757
	.byte	0x1
	.value	0x1432
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB118
	.quad	.LBE118-.LBB118
	.uleb128 0x2f
	.string	"nr"
	.byte	0x1
	.value	0x144d
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.quad	.LBB119
	.quad	.LBE119-.LBB119
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x145f
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1758
	.byte	0x1
	.value	0x1480
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x6d31
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x1481
	.long	0x2f8d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF1759
	.byte	0x1
	.value	0x1482
	.long	0xfc6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x1484
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.quad	.LBB120
	.quad	.LBE120-.LBB120
	.uleb128 0x2f
	.string	"tmp"
	.byte	0x1
	.value	0x1496
	.long	0x75b
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1760
	.byte	0x1
	.value	0x14bd
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x70a1
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x14be
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1672
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x14c0
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1528
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x14c1
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1664
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0x14c1
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1660
	.uleb128 0x32
	.long	.LASF1761
	.byte	0x1
	.value	0x14c2
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1656
	.uleb128 0x32
	.long	.LASF1762
	.byte	0x1
	.value	0x14c3
	.long	0x1f1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1652
	.uleb128 0x32
	.long	.LASF1755
	.byte	0x1
	.value	0x14c4
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1648
	.uleb128 0x2f
	.string	"win"
	.byte	0x1
	.value	0x14c4
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1644
	.uleb128 0x32
	.long	.LASF1763
	.byte	0x1
	.value	0x14c4
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1640
	.uleb128 0x32
	.long	.LASF1759
	.byte	0x1
	.value	0x14c6
	.long	0x70a1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1504
	.uleb128 0x36
	.long	.LASF1607
	.long	0x70c1
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15636
	.uleb128 0x31
	.quad	.LBB121
	.quad	.LBE121-.LBB121
	.long	0x6fd1
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x1502
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1592
	.uleb128 0x32
	.long	.LASF1764
	.byte	0x1
	.value	0x1503
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1552
	.uleb128 0x31
	.quad	.LBB122
	.quad	.LBE122-.LBB122
	.long	0x6f49
	.uleb128 0x32
	.long	.LASF1765
	.byte	0x1
	.value	0x1536
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1636
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x1537
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1632
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x1538
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1628
	.uleb128 0x30
	.quad	.LBB123
	.quad	.LBE123-.LBB123
	.uleb128 0x32
	.long	.LASF1225
	.byte	0x1
	.value	0x1566
	.long	0x1f1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1588
	.uleb128 0x32
	.long	.LASF1766
	.byte	0x1
	.value	0x1566
	.long	0x1f1
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1584
	.uleb128 0x32
	.long	.LASF1767
	.byte	0x1
	.value	0x1567
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1520
	.uleb128 0x32
	.long	.LASF1768
	.byte	0x1
	.value	0x1568
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1624
	.uleb128 0x30
	.quad	.LBB124
	.quad	.LBE124-.LBB124
	.uleb128 0x2f
	.string	"nr"
	.byte	0x1
	.value	0x159f
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1580
	.uleb128 0x2f
	.string	"k"
	.byte	0x1
	.value	0x15a0
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1620
	.uleb128 0x30
	.quad	.LBB125
	.quad	.LBE125-.LBB125
	.uleb128 0x2f
	.string	"i1"
	.byte	0x1
	.value	0x15a9
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1616
	.uleb128 0x32
	.long	.LASF1769
	.byte	0x1
	.value	0x15aa
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1612
	.uleb128 0x30
	.quad	.LBB126
	.quad	.LBE126-.LBB126
	.uleb128 0x2f
	.string	"k"
	.byte	0x1
	.value	0x15e3
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1608
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB127
	.quad	.LBE127-.LBB127
	.long	0x6f6f
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x1609
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1512
	.byte	0
	.uleb128 0x30
	.quad	.LBB128
	.quad	.LBE128-.LBB128
	.uleb128 0x32
	.long	.LASF1770
	.byte	0x1
	.value	0x1613
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1544
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x1616
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1604
	.uleb128 0x30
	.quad	.LBB129
	.quad	.LBE129-.LBB129
	.uleb128 0x2f
	.string	"nr"
	.byte	0x1
	.value	0x167b
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1576
	.uleb128 0x2f
	.string	"k"
	.byte	0x1
	.value	0x167c
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1600
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB130
	.quad	.LBE130-.LBB130
	.long	0x6ff5
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x16c4
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1572
	.byte	0
	.uleb128 0x31
	.quad	.LBB131
	.quad	.LBE131-.LBB131
	.long	0x7029
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x1701
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1568
	.uleb128 0x32
	.long	.LASF1771
	.byte	0x1
	.value	0x1702
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1536
	.byte	0
	.uleb128 0x31
	.quad	.LBB132
	.quad	.LBE132-.LBB132
	.long	0x704f
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x1738
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1564
	.byte	0
	.uleb128 0x30
	.quad	.LBB133
	.quad	.LBE133-.LBB133
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x1744
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1560
	.uleb128 0x30
	.quad	.LBB134
	.quad	.LBE134-.LBB134
	.uleb128 0x32
	.long	.LASF1772
	.byte	0x1
	.value	0x174e
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1556
	.uleb128 0x2f
	.string	"nr"
	.byte	0x1
	.value	0x174f
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -1596
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x2d
	.long	0x70b1
	.uleb128 0x16
	.long	0x1ea
	.byte	0xb3
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x70c1
	.uleb128 0x16
	.long	0x1ea
	.byte	0x12
	.byte	0
	.uleb128 0xc
	.long	0x70b1
	.uleb128 0x2e
	.long	.LASF1773
	.byte	0x1
	.value	0x176a
	.quad	.LFB54
	.quad	.LFE54-.LFB54
	.uleb128 0x1
	.byte	0x9c
	.long	0x7101
	.uleb128 0x34
	.string	"r"
	.byte	0x1
	.value	0x176b
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x176d
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.uleb128 0x37
	.long	.LASF1774
	.byte	0x1
	.value	0x1787
	.quad	.LFB55
	.quad	.LFE55-.LFB55
	.uleb128 0x1
	.byte	0x9c
	.long	0x7188
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x1788
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x178a
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0x178a
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.quad	.LBB135
	.quad	.LBE135-.LBB135
	.uleb128 0x32
	.long	.LASF1775
	.byte	0x1
	.value	0x1792
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LASF1776
	.byte	0x1
	.value	0x1793
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF1777
	.byte	0x1
	.value	0x1794
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1778
	.byte	0x1
	.value	0x17fc
	.quad	.LFB56
	.quad	.LFE56-.LFB56
	.uleb128 0x1
	.byte	0x9c
	.long	0x72d1
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x17fd
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x34
	.string	"rl"
	.byte	0x1
	.value	0x17fe
	.long	0x2f93
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x34
	.string	"old"
	.byte	0x1
	.value	0x17ff
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x34
	.string	"j"
	.byte	0x1
	.value	0x1800
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x1802
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1779
	.byte	0x1
	.value	0x1803
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF1780
	.byte	0x1
	.value	0x1804
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF1781
	.byte	0x1
	.value	0x1805
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF1782
	.byte	0x1
	.value	0x1806
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x1807
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF1783
	.byte	0x1
	.value	0x1808
	.long	0xfc6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x36
	.long	.LASF1607
	.long	0x72d1
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15776
	.uleb128 0x31
	.quad	.LBB136
	.quad	.LBE136-.LBB136
	.long	0x728a
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x184e
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.byte	0
	.uleb128 0x31
	.quad	.LBB137
	.quad	.LBE137-.LBB137
	.long	0x72af
	.uleb128 0x32
	.long	.LASF441
	.byte	0x1
	.value	0x18ec
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.uleb128 0x30
	.quad	.LBB138
	.quad	.LBE138-.LBB138
	.uleb128 0x32
	.long	.LASF1784
	.byte	0x1
	.value	0x19bb
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x6711
	.uleb128 0x37
	.long	.LASF1785
	.byte	0x1
	.value	0x19e2
	.quad	.LFB57
	.quad	.LFE57-.LFB57
	.uleb128 0x1
	.byte	0x9c
	.long	0x751d
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x19e3
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x34
	.string	"rl"
	.byte	0x1
	.value	0x19e4
	.long	0x2f93
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x34
	.string	"j"
	.byte	0x1
	.value	0x19e5
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -180
	.uleb128 0x32
	.long	.LASF1779
	.byte	0x1
	.value	0x19e7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x19e8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF1782
	.byte	0x1
	.value	0x19e9
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2f
	.string	"old"
	.byte	0x1
	.value	0x19ea
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x19eb
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x2f
	.string	"p"
	.byte	0x1
	.value	0x19ec
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x36
	.long	.LASF1607
	.long	0x751d
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15793
	.uleb128 0x31
	.quad	.LBB139
	.quad	.LBE139-.LBB139
	.long	0x743e
	.uleb128 0x32
	.long	.LASF1786
	.byte	0x1
	.value	0x1a0d
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x30
	.quad	.LBB140
	.quad	.LBE140-.LBB140
	.uleb128 0x32
	.long	.LASF1787
	.byte	0x1
	.value	0x1a17
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x30
	.quad	.LBB141
	.quad	.LBE141-.LBB141
	.uleb128 0x32
	.long	.LASF1788
	.byte	0x1
	.value	0x1a27
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x32
	.long	.LASF1789
	.byte	0x1
	.value	0x1a28
	.long	0x17bc
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x30
	.quad	.LBB142
	.quad	.LBE142-.LBB142
	.uleb128 0x32
	.long	.LASF1790
	.byte	0x1
	.value	0x1a30
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x1a32
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB143
	.quad	.LBE143-.LBB143
	.long	0x7464
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x1a58
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
	.uleb128 0x30
	.quad	.LBB144
	.quad	.LBE144-.LBB144
	.uleb128 0x2f
	.string	"pat"
	.byte	0x1
	.value	0x1a6a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.quad	.LBB145
	.quad	.LBE145-.LBB145
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x1a74
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x31
	.quad	.LBB146
	.quad	.LBE146-.LBB146
	.long	0x74ca
	.uleb128 0x2f
	.string	"src"
	.byte	0x1
	.value	0x1a79
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.byte	0
	.uleb128 0x30
	.quad	.LBB147
	.quad	.LBE147-.LBB147
	.uleb128 0x2f
	.string	"s"
	.byte	0x1
	.value	0x1a82
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x30
	.quad	.LBB148
	.quad	.LBE148-.LBB148
	.uleb128 0x32
	.long	.LASF1791
	.byte	0x1
	.value	0x1a94
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF453
	.byte	0x1
	.value	0x1a95
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x681b
	.uleb128 0x37
	.long	.LASF1792
	.byte	0x1
	.value	0x1ab8
	.quad	.LFB58
	.quad	.LFE58-.LFB58
	.uleb128 0x1
	.byte	0x9c
	.long	0x7599
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x1ab9
	.long	0x2f8d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.string	"rl"
	.byte	0x1
	.value	0x1aba
	.long	0x2f93
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x34
	.string	"j"
	.byte	0x1
	.value	0x1abb
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF1793
	.byte	0x1
	.value	0x1abd
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x1abe
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"old"
	.byte	0x1
	.value	0x1abf
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF1794
	.byte	0x1
	.value	0x1af7
	.quad	.LFB59
	.quad	.LFE59-.LFB59
	.uleb128 0x1
	.byte	0x9c
	.long	0x7664
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x1af8
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x34
	.string	"rl"
	.byte	0x1
	.value	0x1af9
	.long	0x2f93
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x34
	.string	"j"
	.byte	0x1
	.value	0x1afa
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x32
	.long	.LASF1612
	.byte	0x1
	.value	0x1afc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"old"
	.byte	0x1
	.value	0x1afc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x1afd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1795
	.byte	0x1
	.value	0x1b01
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x36
	.long	.LASF1607
	.long	0x7664
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.15829
	.uleb128 0x30
	.quad	.LBB149
	.quad	.LBE149-.LBB149
	.uleb128 0x32
	.long	.LASF1796
	.byte	0x1
	.value	0x1b0a
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1797
	.byte	0x1
	.value	0x1b0b
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x68be
	.uleb128 0x37
	.long	.LASF1798
	.byte	0x1
	.value	0x1b3f
	.quad	.LFB60
	.quad	.LFE60-.LFB60
	.uleb128 0x1
	.byte	0x9c
	.long	0x794a
	.uleb128 0x35
	.long	.LASF1385
	.byte	0x1
	.value	0x1b40
	.long	0x2f8d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x1b42
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0x1b44
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x31
	.quad	.LBB150
	.quad	.LBE150-.LBB150
	.long	0x76d8
	.uleb128 0x2f
	.string	"x"
	.byte	0x1
	.value	0x1b90
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.byte	0
	.uleb128 0x30
	.quad	.LBB151
	.quad	.LBE151-.LBB151
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x1b9f
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x1ba0
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x31
	.quad	.LBB152
	.quad	.LBE152-.LBB152
	.long	0x776f
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x1ba9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x30
	.quad	.LBB153
	.quad	.LBE153-.LBB153
	.uleb128 0x32
	.long	.LASF1772
	.byte	0x1
	.value	0x1bb2
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x30
	.quad	.LBB154
	.quad	.LBE154-.LBB154
	.uleb128 0x32
	.long	.LASF1797
	.byte	0x1
	.value	0x1bb6
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -132
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB155
	.quad	.LBE155-.LBB155
	.long	0x7839
	.uleb128 0x2f
	.string	"nr"
	.byte	0x1
	.value	0x1bc4
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2f
	.string	"k"
	.byte	0x1
	.value	0x1bc5
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x32
	.long	.LASF1799
	.byte	0x1
	.value	0x1bc6
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x32
	.long	.LASF1800
	.byte	0x1
	.value	0x1bc7
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x31
	.quad	.LBB156
	.quad	.LBE156-.LBB156
	.long	0x7806
	.uleb128 0x2f
	.string	"out"
	.byte	0x1
	.value	0x1be6
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1772
	.byte	0x1
	.value	0x1beb
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2f
	.string	"nnr"
	.byte	0x1
	.value	0x1bec
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.byte	0
	.uleb128 0x30
	.quad	.LBB157
	.quad	.LBE157-.LBB157
	.uleb128 0x32
	.long	.LASF1772
	.byte	0x1
	.value	0x1c1b
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2f
	.string	"nnr"
	.byte	0x1
	.value	0x1c1c
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -116
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB158
	.quad	.LBE158-.LBB158
	.uleb128 0x2f
	.string	"out"
	.byte	0x1
	.value	0x1c62
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1772
	.byte	0x1
	.value	0x1c64
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x31
	.quad	.LBB159
	.quad	.LBE159-.LBB159
	.long	0x7925
	.uleb128 0x32
	.long	.LASF1801
	.byte	0x1
	.value	0x1c67
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF1802
	.byte	0x1
	.value	0x1c67
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x31
	.quad	.LBB160
	.quad	.LBE160-.LBB160
	.long	0x78e3
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x1c74
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB161
	.quad	.LBE161-.LBB161
	.uleb128 0x2f
	.string	"k"
	.byte	0x1
	.value	0x1c77
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB162
	.quad	.LBE162-.LBB162
	.uleb128 0x32
	.long	.LASF1803
	.byte	0x1
	.value	0x1c8a
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x2f
	.string	"nr"
	.byte	0x1
	.value	0x1c8b
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x32
	.long	.LASF1612
	.byte	0x1
	.value	0x1c90
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB163
	.quad	.LBE163-.LBB163
	.uleb128 0x32
	.long	.LASF1804
	.byte	0x1
	.value	0x1ca6
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x33
	.long	.LASF1805
	.byte	0x1
	.value	0x1cb7
	.long	0x2d
	.quad	.LFB61
	.quad	.LFE61-.LFB61
	.uleb128 0x1
	.byte	0x9c
	.long	0x7a4e
	.uleb128 0x34
	.string	"out"
	.byte	0x1
	.value	0x1cb8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.string	"in"
	.byte	0x1
	.value	0x1cb9
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x35
	.long	.LASF1231
	.byte	0x1
	.value	0x1cba
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x35
	.long	.LASF24
	.byte	0x1
	.value	0x1cbb
	.long	0x2d01
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF455
	.byte	0x1
	.value	0x1cbd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x1cbe
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.quad	.LBB164
	.quad	.LBE164-.LBB164
	.long	0x7a2c
	.uleb128 0x2f
	.string	"op0"
	.byte	0x1
	.value	0x1cfd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x1cfd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x1cfd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x1cfd
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0x1cfe
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.byte	0
	.uleb128 0x30
	.quad	.LBB165
	.quad	.LBE165-.LBB165
	.uleb128 0x2f
	.string	"loc"
	.byte	0x1
	.value	0x1d68
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1806
	.byte	0x1
	.value	0x1d95
	.quad	.LFB62
	.quad	.LFE62-.LFB62
	.uleb128 0x1
	.byte	0x9c
	.long	0x7b93
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x1d96
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x34
	.string	"j"
	.byte	0x1
	.value	0x1d97
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x35
	.long	.LASF1807
	.byte	0x1
	.value	0x1d98
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x32
	.long	.LASF1808
	.byte	0x1
	.value	0x1d9a
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x1d9b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.string	"k"
	.byte	0x1
	.value	0x1d9c
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.long	.LASF1809
	.byte	0x1
	.value	0x1d9d
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF1810
	.byte	0x1
	.value	0x1d9e
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2f
	.string	"i1"
	.byte	0x1
	.value	0x1d9f
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF1811
	.byte	0x1
	.value	0x1da0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x31
	.quad	.LBB166
	.quad	.LBE166-.LBB166
	.long	0x7b2b
	.uleb128 0x32
	.long	.LASF1812
	.byte	0x1
	.value	0x1dac
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
	.uleb128 0x30
	.quad	.LBB167
	.quad	.LBE167-.LBB167
	.uleb128 0x2f
	.string	"i2"
	.byte	0x1
	.value	0x1dff
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x31
	.quad	.LBB168
	.quad	.LBE168-.LBB168
	.long	0x7b70
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x1e07
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x30
	.quad	.LBB169
	.quad	.LBE169-.LBB169
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x1e1f
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1813
	.byte	0x1
	.value	0x1e3a
	.quad	.LFB63
	.quad	.LFE63-.LFB63
	.uleb128 0x1
	.byte	0x9c
	.long	0x7c3e
	.uleb128 0x35
	.long	.LASF1814
	.byte	0x1
	.value	0x1e3b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x35
	.long	.LASF1815
	.byte	0x1
	.value	0x1e3b
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x1e3d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1714
	.byte	0x1
	.value	0x1e3e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"dst"
	.byte	0x1
	.value	0x1e3e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF433
	.byte	0x1
	.value	0x1e3e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF453
	.byte	0x1
	.value	0x1e3e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB170
	.quad	.LBE170-.LBB170
	.uleb128 0x2f
	.string	"dst"
	.byte	0x1
	.value	0x1e41
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1816
	.byte	0x1
	.value	0x1e5f
	.quad	.LFB64
	.quad	.LFE64-.LFB64
	.uleb128 0x1
	.byte	0x9c
	.long	0x7d11
	.uleb128 0x35
	.long	.LASF1814
	.byte	0x1
	.value	0x1e60
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.string	"x"
	.byte	0x1
	.value	0x1e60
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x35
	.long	.LASF1815
	.byte	0x1
	.value	0x1e60
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF433
	.byte	0x1
	.value	0x1e62
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x1e62
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"dst"
	.byte	0x1
	.value	0x1e62
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"i2"
	.byte	0x1
	.value	0x1e62
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x1e63
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0x1e63
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0x1e64
	.long	0x766
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x30
	.quad	.LBB171
	.quad	.LBE171-.LBB171
	.uleb128 0x2f
	.string	"fmt"
	.byte	0x1
	.value	0x1e68
	.long	0x577
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.byte	0
	.byte	0
	.uleb128 0x3c
	.long	.LASF1817
	.byte	0x1
	.value	0x1ed6
	.long	0x2d
	.quad	.LFB65
	.quad	.LFE65-.LFB65
	.uleb128 0x1
	.byte	0x9c
	.long	0x7ded
	.uleb128 0x35
	.long	.LASF1779
	.byte	0x1
	.value	0x1ed7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.string	"in"
	.byte	0x1
	.value	0x1ed8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x35
	.long	.LASF340
	.byte	0x1
	.value	0x1ed8
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x35
	.long	.LASF1818
	.byte	0x1
	.value	0x1ed9
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.long	.LASF1819
	.byte	0x1
	.value	0x1edc
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1820
	.byte	0x1
	.value	0x1ede
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF455
	.byte	0x1
	.value	0x1edf
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"inc"
	.byte	0x1
	.value	0x1ee0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1821
	.byte	0x1
	.value	0x1ee1
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0x1ee2
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF1822
	.byte	0x1
	.value	0x1ee3
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1823
	.byte	0x1
	.value	0x1ee4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x3c
	.long	.LASF1824
	.byte	0x1
	.value	0x1f36
	.long	0x1e3
	.quad	.LFB66
	.quad	.LFE66-.LFB66
	.uleb128 0x1
	.byte	0x9c
	.long	0x7e7a
	.uleb128 0x35
	.long	.LASF20
	.byte	0x1
	.value	0x1f37
	.long	0x577
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.string	"reg"
	.byte	0x1
	.value	0x1f38
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF340
	.byte	0x1
	.value	0x1f3a
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x1f3b
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"c"
	.byte	0x1
	.value	0x1f3c
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.quad	.LBB172
	.quad	.LBE172-.LBB172
	.uleb128 0x32
	.long	.LASF1225
	.byte	0x1
	.value	0x1f57
	.long	0x1f1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1825
	.byte	0x1
	.value	0x1f68
	.quad	.LFB67
	.quad	.LFE67-.LFB67
	.uleb128 0x1
	.byte	0x9c
	.long	0x7ec6
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x1f69
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x35
	.long	.LASF340
	.byte	0x1
	.value	0x1f69
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1826
	.byte	0x1
	.value	0x1f6b
	.long	0x4149
	.uleb128 0x2
	.byte	0x91
	.sleb128 -17
	.byte	0
	.uleb128 0x3c
	.long	.LASF1827
	.byte	0x1
	.value	0x1f7a
	.long	0x1e3
	.quad	.LFB68
	.quad	.LFE68-.LFB68
	.uleb128 0x1
	.byte	0x9c
	.long	0x7ef8
	.uleb128 0x34
	.string	"set"
	.byte	0x1
	.value	0x1f7b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x37
	.long	.LASF1828
	.byte	0x1
	.value	0x1f82
	.quad	.LFB69
	.quad	.LFE69-.LFB69
	.uleb128 0x1
	.byte	0x9c
	.long	0x7fda
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x1f83
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF1829
	.byte	0x1
	.value	0x1f85
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.quad	.LBB173
	.quad	.LBE173-.LBB173
	.long	0x7f7b
	.uleb128 0x32
	.long	.LASF359
	.byte	0x1
	.value	0x1f89
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.quad	.LBB174
	.quad	.LBE174-.LBB174
	.uleb128 0x32
	.long	.LASF340
	.byte	0x1
	.value	0x1f94
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB175
	.quad	.LBE175-.LBB175
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x1fa2
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x32
	.long	.LASF359
	.byte	0x1
	.value	0x1fa3
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF340
	.byte	0x1
	.value	0x1fa4
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB176
	.quad	.LBE176-.LBB176
	.uleb128 0x32
	.long	.LASF1830
	.byte	0x1
	.value	0x1faa
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1831
	.byte	0x1
	.value	0x1fdf
	.quad	.LFB70
	.quad	.LFE70-.LFB70
	.uleb128 0x1
	.byte	0x9c
	.long	0x8017
	.uleb128 0x35
	.long	.LASF344
	.byte	0x1
	.value	0x1fe0
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x1fe2
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x2e
	.long	.LASF1832
	.byte	0x1
	.value	0x1ff7
	.quad	.LFB71
	.quad	.LFE71-.LFB71
	.uleb128 0x1
	.byte	0x9c
	.long	0x8045
	.uleb128 0x35
	.long	.LASF344
	.byte	0x1
	.value	0x1ff8
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x3c
	.long	.LASF1833
	.byte	0x1
	.value	0x2008
	.long	0x1e3
	.quad	.LFB72
	.quad	.LFE72-.LFB72
	.uleb128 0x1
	.byte	0x9c
	.long	0x8120
	.uleb128 0x34
	.string	"set"
	.byte	0x1
	.value	0x2009
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x200a
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF1834
	.byte	0x1
	.value	0x200c
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF1835
	.byte	0x1
	.value	0x200d
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"src"
	.byte	0x1
	.value	0x200e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1836
	.byte	0x1
	.value	0x200f
	.long	0x1f1
	.uleb128 0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x32
	.long	.LASF1837
	.byte	0x1
	.value	0x2010
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"val"
	.byte	0x1
	.value	0x2011
	.long	0x3237
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"l"
	.byte	0x1
	.value	0x2012
	.long	0x3226
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.quad	.LBB177
	.quad	.LBE177-.LBB177
	.uleb128 0x32
	.long	.LASF1838
	.byte	0x1
	.value	0x203e
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF1652
	.byte	0x1
	.value	0x203f
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.byte	0
	.byte	0
	.uleb128 0x3c
	.long	.LASF1839
	.byte	0x1
	.value	0x2095
	.long	0x1e3
	.quad	.LFB73
	.quad	.LFE73-.LFB73
	.uleb128 0x1
	.byte	0x9c
	.long	0x83ad
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x2096
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -888
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x2098
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -864
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0x2098
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -860
	.uleb128 0x32
	.long	.LASF1840
	.byte	0x1
	.value	0x209b
	.long	0x83ad
	.uleb128 0x3
	.byte	0x91
	.sleb128 -752
	.uleb128 0x32
	.long	.LASF1263
	.byte	0x1
	.value	0x209d
	.long	0x3073
	.uleb128 0x3
	.byte	0x91
	.sleb128 -512
	.uleb128 0x32
	.long	.LASF1841
	.byte	0x1
	.value	0x20a0
	.long	0x590
	.uleb128 0x3
	.byte	0x91
	.sleb128 -784
	.uleb128 0x32
	.long	.LASF1842
	.byte	0x1
	.value	0x20a3
	.long	0x590
	.uleb128 0x3
	.byte	0x91
	.sleb128 -776
	.uleb128 0x32
	.long	.LASF1843
	.byte	0x1
	.value	0x20a7
	.long	0x83bd
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x32
	.long	.LASF1844
	.byte	0x1
	.value	0x20a9
	.long	0x590
	.uleb128 0x3
	.byte	0x91
	.sleb128 -768
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x20aa
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -792
	.uleb128 0x36
	.long	.LASF1607
	.long	0x83dd
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16102
	.uleb128 0x31
	.quad	.LBB178
	.quad	.LBE178-.LBB178
	.long	0x8223
	.uleb128 0x2f
	.string	"v"
	.byte	0x1
	.value	0x20be
	.long	0x3237
	.uleb128 0x3
	.byte	0x91
	.sleb128 -760
	.uleb128 0x2f
	.string	"l"
	.byte	0x1
	.value	0x20bf
	.long	0x3226
	.uleb128 0x3
	.byte	0x91
	.sleb128 -808
	.byte	0
	.uleb128 0x31
	.quad	.LBB179
	.quad	.LBE179-.LBB179
	.long	0x82cd
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x20d6
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -836
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x20d7
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -856
	.uleb128 0x2f
	.string	"p"
	.byte	0x1
	.value	0x20d8
	.long	0x577
	.uleb128 0x3
	.byte	0x91
	.sleb128 -800
	.uleb128 0x31
	.quad	.LBB180
	.quad	.LBE180-.LBB180
	.long	0x828a
	.uleb128 0x2f
	.string	"c"
	.byte	0x1
	.value	0x20e6
	.long	0x36a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -866
	.byte	0
	.uleb128 0x30
	.quad	.LBB181
	.quad	.LBE181-.LBB181
	.uleb128 0x32
	.long	.LASF1225
	.byte	0x1
	.value	0x20f9
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -852
	.uleb128 0x30
	.quad	.LBB182
	.quad	.LBE182-.LBB182
	.uleb128 0x2f
	.string	"c"
	.byte	0x1
	.value	0x2108
	.long	0x36a
	.uleb128 0x3
	.byte	0x91
	.sleb128 -865
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB183
	.quad	.LBE183-.LBB183
	.long	0x8355
	.uleb128 0x32
	.long	.LASF1845
	.byte	0x1
	.value	0x2146
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -848
	.uleb128 0x32
	.long	.LASF1846
	.byte	0x1
	.value	0x2147
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -844
	.uleb128 0x32
	.long	.LASF1847
	.byte	0x1
	.value	0x2148
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -840
	.uleb128 0x2f
	.string	"tmp"
	.byte	0x1
	.value	0x2149
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -824
	.uleb128 0x30
	.quad	.LBB184
	.quad	.LBE184-.LBB184
	.uleb128 0x32
	.long	.LASF1848
	.byte	0x1
	.value	0x214d
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -832
	.uleb128 0x32
	.long	.LASF1653
	.byte	0x1
	.value	0x214e
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -828
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB185
	.quad	.LBE185-.LBB185
	.long	0x837b
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x2164
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -820
	.byte	0
	.uleb128 0x30
	.quad	.LBB186
	.quad	.LBE186-.LBB186
	.uleb128 0x2f
	.string	"op"
	.byte	0x1
	.value	0x216e
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -816
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x216f
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -812
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x75b
	.long	0x83bd
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1d
	.byte	0
	.uleb128 0x15
	.long	0x590
	.long	0x83cd
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1d
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x83dd
	.uleb128 0x16
	.long	0x1ea
	.byte	0x1c
	.byte	0
	.uleb128 0xc
	.long	0x83cd
	.uleb128 0x37
	.long	.LASF1849
	.byte	0x1
	.value	0x21a5
	.quad	.LFB74
	.quad	.LFE74-.LFB74
	.uleb128 0x1
	.byte	0x9c
	.long	0x86ce
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x21a7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x21a7
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x32
	.long	.LASF1850
	.byte	0x1
	.value	0x21a8
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x32
	.long	.LASF1851
	.byte	0x1
	.value	0x21a9
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -228
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x21aa
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0x21ab
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -220
	.uleb128 0x32
	.long	.LASF1852
	.byte	0x1
	.value	0x21ac
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x32
	.long	.LASF1853
	.byte	0x1
	.value	0x21ad
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -204
	.uleb128 0x32
	.long	.LASF1854
	.byte	0x1
	.value	0x21ad
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x32
	.long	.LASF1855
	.byte	0x1
	.value	0x21ae
	.long	0x75b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x32
	.long	.LASF1856
	.byte	0x1
	.value	0x21ae
	.long	0x455b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x31
	.quad	.LBB187
	.quad	.LBE187-.LBB187
	.long	0x84d2
	.uleb128 0x32
	.long	.LASF1857
	.byte	0x1
	.value	0x21d3
	.long	0x75b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.byte	0
	.uleb128 0x30
	.quad	.LBB188
	.quad	.LBE188-.LBB188
	.uleb128 0x32
	.long	.LASF1612
	.byte	0x1
	.value	0x21eb
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x31
	.quad	.LBB189
	.quad	.LBE189-.LBB189
	.long	0x85ed
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x2212
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LASF1858
	.byte	0x1
	.value	0x2213
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x32
	.long	.LASF1692
	.byte	0x1
	.value	0x2214
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF433
	.byte	0x1
	.value	0x2215
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1695
	.byte	0x1
	.value	0x2216
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x2217
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x32
	.long	.LASF1859
	.byte	0x1
	.value	0x2218
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF1860
	.byte	0x1
	.value	0x2219
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x31
	.quad	.LBB190
	.quad	.LBE190-.LBB190
	.long	0x85ab
	.uleb128 0x32
	.long	.LASF1861
	.byte	0x1
	.value	0x2238
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.byte	0
	.uleb128 0x30
	.quad	.LBB191
	.quad	.LBE191-.LBB191
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x224c
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x30
	.quad	.LBB192
	.quad	.LBE192-.LBB192
	.uleb128 0x2f
	.string	"np"
	.byte	0x1
	.value	0x2264
	.long	0xfc6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB193
	.quad	.LBE193-.LBB193
	.long	0x8684
	.uleb128 0x32
	.long	.LASF1862
	.byte	0x1
	.value	0x2281
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x30
	.quad	.LBB194
	.quad	.LBE194-.LBB194
	.uleb128 0x32
	.long	.LASF1863
	.byte	0x1
	.value	0x228d
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.quad	.LBB195
	.quad	.LBE195-.LBB195
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x2290
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x32
	.long	.LASF1864
	.byte	0x1
	.value	0x2291
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x32
	.long	.LASF1804
	.byte	0x1
	.value	0x2292
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -188
	.uleb128 0x32
	.long	.LASF1865
	.byte	0x1
	.value	0x2294
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -184
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x31
	.quad	.LBB196
	.quad	.LBE196-.LBB196
	.long	0x86aa
	.uleb128 0x32
	.long	.LASF1857
	.byte	0x1
	.value	0x22a6
	.long	0x455b
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.byte	0
	.uleb128 0x30
	.quad	.LBB197
	.quad	.LBE197-.LBB197
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x22b9
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -180
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1866
	.byte	0x1
	.value	0x22c9
	.quad	.LFB75
	.quad	.LFE75-.LFB75
	.uleb128 0x1
	.byte	0x9c
	.long	0x8746
	.uleb128 0x34
	.string	"dst"
	.byte	0x1
	.value	0x22ca
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x34
	.string	"set"
	.byte	0x1
	.value	0x22ca
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x35
	.long	.LASF1190
	.byte	0x1
	.value	0x22cb
	.long	0x317
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x22cd
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x22ce
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x22cf
	.long	0x59d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.byte	0
	.uleb128 0x37
	.long	.LASF1867
	.byte	0x1
	.value	0x22fb
	.quad	.LFB76
	.quad	.LFE76-.LFB76
	.uleb128 0x1
	.byte	0x9c
	.long	0x8875
	.uleb128 0x34
	.string	"xp"
	.byte	0x1
	.value	0x22fc
	.long	0xfc6
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x22fc
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2f
	.string	"x"
	.byte	0x1
	.value	0x22fe
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF0
	.byte	0x1
	.value	0x22ff
	.long	0x766
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"fmt"
	.byte	0x1
	.value	0x2300
	.long	0x577
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x2301
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.string	"j"
	.byte	0x1
	.value	0x2301
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x32
	.long	.LASF323
	.byte	0x1
	.value	0x2302
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x36
	.long	.LASF1607
	.long	0x8875
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16325
	.uleb128 0x31
	.quad	.LBB198
	.quad	.LBE198-.LBB198
	.long	0x8832
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x2313
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x2314
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x32
	.long	.LASF56
	.byte	0x1
	.value	0x2315
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.uleb128 0x30
	.quad	.LBB199
	.quad	.LBE199-.LBB199
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x2331
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF1592
	.byte	0x1
	.value	0x2332
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF56
	.byte	0x1
	.value	0x2333
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -84
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x6711
	.uleb128 0x3b
	.long	.LASF1868
	.byte	0x1
	.value	0x2394
	.long	0x319
	.quad	.LFB77
	.quad	.LFE77-.LFB77
	.uleb128 0x1
	.byte	0x9c
	.long	0x88d9
	.uleb128 0x35
	.long	.LASF1
	.byte	0x1
	.value	0x2395
	.long	0x59d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x35
	.long	.LASF340
	.byte	0x1
	.value	0x2396
	.long	0x319
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1869
	.byte	0x1
	.value	0x2398
	.long	0x319
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LASF1870
	.byte	0x1
	.value	0x2399
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -28
	.byte	0
	.uleb128 0x37
	.long	.LASF1871
	.byte	0x1
	.value	0x23ad
	.quad	.LFB78
	.quad	.LFE78-.LFB78
	.uleb128 0x1
	.byte	0x9c
	.long	0x8a96
	.uleb128 0x35
	.long	.LASF344
	.byte	0x1
	.value	0x23ae
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x23b0
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x23b1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x30
	.quad	.LBB200
	.quad	.LBE200-.LBB200
	.uleb128 0x2f
	.string	"pat"
	.byte	0x1
	.value	0x23ba
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x32
	.long	.LASF1612
	.byte	0x1
	.value	0x23ba
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x31
	.quad	.LBB201
	.quad	.LBE201-.LBB201
	.long	0x8a72
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x23cd
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x23ce
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x2f
	.string	"src"
	.byte	0x1
	.value	0x23cf
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x31
	.quad	.LBB202
	.quad	.LBE202-.LBB202
	.long	0x89d1
	.uleb128 0x32
	.long	.LASF1872
	.byte	0x1
	.value	0x23e0
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x32
	.long	.LASF1873
	.byte	0x1
	.value	0x23e1
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.byte	0
	.uleb128 0x30
	.quad	.LBB203
	.quad	.LBE203-.LBB203
	.uleb128 0x32
	.long	.LASF453
	.byte	0x1
	.value	0x2406
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x2407
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x30
	.quad	.LBB204
	.quad	.LBE204-.LBB204
	.uleb128 0x32
	.long	.LASF1874
	.byte	0x1
	.value	0x2410
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x32
	.long	.LASF1875
	.byte	0x1
	.value	0x2411
	.long	0x319
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1876
	.byte	0x1
	.value	0x2412
	.long	0x319
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1877
	.byte	0x1
	.value	0x2413
	.long	0x319
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1873
	.byte	0x1
	.value	0x2414
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1872
	.byte	0x1
	.value	0x2418
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -152
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x30
	.quad	.LBB205
	.quad	.LBE205-.LBB205
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x2437
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -140
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1878
	.byte	0x1
	.value	0x2450
	.quad	.LFB79
	.quad	.LFE79-.LFB79
	.uleb128 0x1
	.byte	0x9c
	.long	0x8ba6
	.uleb128 0x34
	.string	"dst"
	.byte	0x1
	.value	0x2451
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x34
	.string	"set"
	.byte	0x1
	.value	0x2451
	.long	0x2d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x35
	.long	.LASF1190
	.byte	0x1
	.value	0x2452
	.long	0x317
	.uleb128 0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x32
	.long	.LASF57
	.byte	0x1
	.value	0x2454
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x2455
	.long	0x310
	.uleb128 0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x32
	.long	.LASF1
	.byte	0x1
	.value	0x2456
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x38
	.long	.LASF1879
	.byte	0x1
	.value	0x24b3
	.quad	.L2805
	.uleb128 0x31
	.quad	.LBB206
	.quad	.LBE206-.LBB206
	.long	0x8b84
	.uleb128 0x2f
	.string	"src"
	.byte	0x1
	.value	0x2475
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF1880
	.byte	0x1
	.value	0x2476
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF323
	.byte	0x1
	.value	0x2477
	.long	0x319
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1881
	.byte	0x1
	.value	0x2478
	.long	0x1e3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LASF1882
	.byte	0x1
	.value	0x247b
	.long	0x59d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.byte	0
	.uleb128 0x30
	.quad	.LBB207
	.quad	.LBE207-.LBB207
	.uleb128 0x32
	.long	.LASF1883
	.byte	0x1
	.value	0x24d5
	.long	0x310
	.uleb128 0x2
	.byte	0x91
	.sleb128 -60
	.byte	0
	.byte	0
	.uleb128 0x37
	.long	.LASF1884
	.byte	0x1
	.value	0x24fd
	.quad	.LFB80
	.quad	.LFE80-.LFB80
	.uleb128 0x1
	.byte	0x9c
	.long	0x8bf0
	.uleb128 0x35
	.long	.LASF1246
	.byte	0x1
	.value	0x24fe
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x34
	.string	"x"
	.byte	0x1
	.value	0x24ff
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LASF1885
	.byte	0x1
	.value	0x2501
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x2e
	.long	.LASF1886
	.byte	0x1
	.value	0x2515
	.quad	.LFB81
	.quad	.LFE81-.LFB81
	.uleb128 0x1
	.byte	0x9c
	.long	0x8ccd
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x2517
	.long	0x1e3
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LASF1887
	.byte	0x1
	.value	0x2518
	.long	0x4149
	.uleb128 0x3
	.byte	0x91
	.sleb128 -69
	.uleb128 0x36
	.long	.LASF1607
	.long	0x8cdd
	.uleb128 0x9
	.byte	0x3
	.quad	__FUNCTION__.16436
	.uleb128 0x30
	.quad	.LBB208
	.quad	.LBE208-.LBB208
	.uleb128 0x2f
	.string	"bb"
	.byte	0x1
	.value	0x251c
	.long	0x2cf6
	.uleb128 0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"e"
	.byte	0x1
	.value	0x251d
	.long	0x2ceb
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.quad	.LBB209
	.quad	.LBE209-.LBB209
	.uleb128 0x32
	.long	.LASF1246
	.byte	0x1
	.value	0x252b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LASF1888
	.byte	0x1
	.value	0x252b
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LASF453
	.byte	0x1
	.value	0x252c
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.quad	.LBB210
	.quad	.LBE210-.LBB210
	.uleb128 0x2f
	.string	"seq"
	.byte	0x1
	.value	0x2540
	.long	0x2d
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x15
	.long	0x36a
	.long	0x8cdd
	.uleb128 0x16
	.long	0x1ea
	.byte	0x14
	.byte	0
	.uleb128 0xc
	.long	0x8ccd
	.uleb128 0x40
	.long	.LASF1889
	.byte	0x1
	.byte	0x5a
	.long	0xfc6
	.uleb128 0x9
	.byte	0x3
	.quad	reg_last_reload_reg
	.uleb128 0x40
	.long	.LASF1890
	.byte	0x1
	.byte	0x5e
	.long	0x364
	.uleb128 0x9
	.byte	0x3
	.quad	reg_has_output_reload
	.uleb128 0x40
	.long	.LASF1891
	.byte	0x1
	.byte	0x62
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reg_is_output_reload
	.uleb128 0x40
	.long	.LASF1892
	.byte	0x1
	.byte	0x7a
	.long	0x8d36
	.uleb128 0x9
	.byte	0x3
	.quad	reg_max_ref_width
	.uleb128 0x3
	.byte	0x8
	.long	0x310
	.uleb128 0x40
	.long	.LASF1893
	.byte	0x1
	.byte	0x7e
	.long	0xfc6
	.uleb128 0x9
	.byte	0x3
	.quad	reg_equiv_init
	.uleb128 0x40
	.long	.LASF1894
	.byte	0x1
	.byte	0x81
	.long	0x8d66
	.uleb128 0x9
	.byte	0x3
	.quad	reg_old_renumber
	.uleb128 0x3
	.byte	0x8
	.long	0x347
	.uleb128 0x15
	.long	0x1e3
	.long	0x8d7c
	.uleb128 0x16
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x40
	.long	.LASF1895
	.byte	0x1
	.byte	0x87
	.long	0x8d6c
	.uleb128 0x9
	.byte	0x3
	.quad	reg_reloaded_contents
	.uleb128 0x15
	.long	0x2d
	.long	0x8da1
	.uleb128 0x16
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x40
	.long	.LASF1896
	.byte	0x1
	.byte	0x8c
	.long	0x8d91
	.uleb128 0x9
	.byte	0x3
	.quad	reg_reloaded_insn
	.uleb128 0x40
	.long	.LASF1897
	.byte	0x1
	.byte	0x8f
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reg_reloaded_valid
	.uleb128 0x40
	.long	.LASF1898
	.byte	0x1
	.byte	0x92
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reg_reloaded_dead
	.uleb128 0x40
	.long	.LASF1899
	.byte	0x1
	.byte	0x95
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	n_spills
	.uleb128 0x40
	.long	.LASF1900
	.byte	0x1
	.byte	0x9b
	.long	0x8d91
	.uleb128 0x9
	.byte	0x3
	.quad	spill_reg_rtx
	.uleb128 0x40
	.long	.LASF1901
	.byte	0x1
	.byte	0xa0
	.long	0x8d91
	.uleb128 0x9
	.byte	0x3
	.quad	spill_reg_store
	.uleb128 0x40
	.long	.LASF1902
	.byte	0x1
	.byte	0xa5
	.long	0x8d91
	.uleb128 0x9
	.byte	0x3
	.quad	spill_reg_stored_to
	.uleb128 0x15
	.long	0x347
	.long	0x8e44
	.uleb128 0x16
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x40
	.long	.LASF1903
	.byte	0x1
	.byte	0xad
	.long	0x8e34
	.uleb128 0x9
	.byte	0x3
	.quad	spill_reg_order
	.uleb128 0x40
	.long	.LASF1904
	.byte	0x1
	.byte	0xb3
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	bad_spill_regs
	.uleb128 0x40
	.long	.LASF1905
	.byte	0x1
	.byte	0xb9
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	bad_spill_regs_global
	.uleb128 0x40
	.long	.LASF1906
	.byte	0x1
	.byte	0xc4
	.long	0x8e34
	.uleb128 0x9
	.byte	0x3
	.quad	spill_regs
	.uleb128 0x40
	.long	.LASF1907
	.byte	0x1
	.byte	0xcb
	.long	0x455b
	.uleb128 0x9
	.byte	0x3
	.quad	pseudo_previous_regs
	.uleb128 0x40
	.long	.LASF1908
	.byte	0x1
	.byte	0xd1
	.long	0x455b
	.uleb128 0x9
	.byte	0x3
	.quad	pseudo_forbidden_regs
	.uleb128 0x40
	.long	.LASF1250
	.byte	0x1
	.byte	0xd5
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	used_spill_regs
	.uleb128 0x40
	.long	.LASF1909
	.byte	0x1
	.byte	0xd9
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	last_spill_reg
	.uleb128 0x40
	.long	.LASF1910
	.byte	0x1
	.byte	0xe1
	.long	0x36a
	.uleb128 0x9
	.byte	0x3
	.quad	spill_indirect_levels
	.uleb128 0x40
	.long	.LASF1911
	.byte	0x1
	.byte	0xec
	.long	0x8d91
	.uleb128 0x9
	.byte	0x3
	.quad	spill_stack_slot
	.uleb128 0x15
	.long	0x310
	.long	0x8f26
	.uleb128 0x16
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x40
	.long	.LASF1912
	.byte	0x1
	.byte	0xef
	.long	0x8f16
	.uleb128 0x9
	.byte	0x3
	.quad	spill_stack_slot_width
	.uleb128 0x40
	.long	.LASF1913
	.byte	0x1
	.byte	0xf2
	.long	0x2c4b
	.uleb128 0x9
	.byte	0x3
	.quad	spilled_pseudos
	.uleb128 0x40
	.long	.LASF1914
	.byte	0x1
	.byte	0xf6
	.long	0x2c4b
	.uleb128 0x9
	.byte	0x3
	.quad	pseudos_counted
	.uleb128 0x32
	.long	.LASF1915
	.byte	0x1
	.value	0x119
	.long	0x364
	.uleb128 0x9
	.byte	0x3
	.quad	reload_insn_firstobj
	.uleb128 0x32
	.long	.LASF1916
	.byte	0x1
	.value	0x129
	.long	0x2f8d
	.uleb128 0x9
	.byte	0x3
	.quad	insns_need_reload
	.uleb128 0x32
	.long	.LASF1917
	.byte	0x1
	.value	0x143
	.long	0x4a84
	.uleb128 0x9
	.byte	0x3
	.quad	reg_eliminate
	.uleb128 0x15
	.long	0x4217
	.long	0x8fb7
	.uleb128 0x16
	.long	0x1ea
	.byte	0x3
	.byte	0
	.uleb128 0x32
	.long	.LASF1918
	.byte	0x1
	.value	0x14b
	.long	0x8fcd
	.uleb128 0x9
	.byte	0x3
	.quad	reg_eliminate_1
	.uleb128 0xc
	.long	0x8fa7
	.uleb128 0x32
	.long	.LASF1919
	.byte	0x1
	.value	0x15f
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	num_eliminable
	.uleb128 0x32
	.long	.LASF1920
	.byte	0x1
	.value	0x162
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	num_eliminable_invariants
	.uleb128 0x32
	.long	.LASF1921
	.byte	0x1
	.value	0x16b
	.long	0x364
	.uleb128 0x9
	.byte	0x3
	.quad	offsets_known_at
	.uleb128 0x32
	.long	.LASF1922
	.byte	0x1
	.value	0x16c
	.long	0x4a9a
	.uleb128 0x9
	.byte	0x3
	.quad	offsets_at
	.uleb128 0x32
	.long	.LASF1923
	.byte	0x1
	.value	0x170
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	num_labels
	.uleb128 0x32
	.long	.LASF1924
	.byte	0x1
	.value	0x20b
	.long	0x2f8d
	.uleb128 0x9
	.byte	0x3
	.quad	unused_insn_chains
	.uleb128 0x32
	.long	.LASF1925
	.byte	0x1
	.value	0x28b
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	something_needs_elimination
	.uleb128 0x32
	.long	.LASF1926
	.byte	0x1
	.value	0x290
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	failure
	.uleb128 0x32
	.long	.LASF1927
	.byte	0x1
	.value	0x627
	.long	0x8d6c
	.uleb128 0x9
	.byte	0x3
	.quad	spill_cost
	.uleb128 0x32
	.long	.LASF1928
	.byte	0x1
	.value	0x62c
	.long	0x8d6c
	.uleb128 0x9
	.byte	0x3
	.quad	spill_add_cost
	.uleb128 0x15
	.long	0x347
	.long	0x90be
	.uleb128 0x16
	.long	0x1ea
	.byte	0xb3
	.byte	0
	.uleb128 0x32
	.long	.LASF1929
	.byte	0x1
	.value	0x674
	.long	0x90ae
	.uleb128 0x9
	.byte	0x3
	.quad	reload_order
	.uleb128 0x32
	.long	.LASF1930
	.byte	0x1
	.value	0x677
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	used_spill_regs_local
	.uleb128 0x32
	.long	.LASF1931
	.byte	0x1
	.value	0x103c
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_unavailable
	.uleb128 0x32
	.long	.LASF1932
	.byte	0x1
	.value	0x103e
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used
	.uleb128 0x32
	.long	.LASF1933
	.byte	0x1
	.value	0x1040
	.long	0x83ad
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_in_input_addr
	.uleb128 0x32
	.long	.LASF1934
	.byte	0x1
	.value	0x1042
	.long	0x83ad
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_in_inpaddr_addr
	.uleb128 0x32
	.long	.LASF1935
	.byte	0x1
	.value	0x1044
	.long	0x83ad
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_in_output_addr
	.uleb128 0x32
	.long	.LASF1936
	.byte	0x1
	.value	0x1046
	.long	0x83ad
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_in_outaddr_addr
	.uleb128 0x32
	.long	.LASF1937
	.byte	0x1
	.value	0x1048
	.long	0x83ad
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_in_input
	.uleb128 0x32
	.long	.LASF1938
	.byte	0x1
	.value	0x104a
	.long	0x83ad
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_in_output
	.uleb128 0x32
	.long	.LASF1939
	.byte	0x1
	.value	0x104c
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_in_op_addr
	.uleb128 0x32
	.long	.LASF1940
	.byte	0x1
	.value	0x104e
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_in_op_addr_reload
	.uleb128 0x32
	.long	.LASF1941
	.byte	0x1
	.value	0x1050
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_in_insn
	.uleb128 0x32
	.long	.LASF1942
	.byte	0x1
	.value	0x1052
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_in_other_addr
	.uleb128 0x32
	.long	.LASF1943
	.byte	0x1
	.value	0x1055
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_at_all
	.uleb128 0x32
	.long	.LASF1944
	.byte	0x1
	.value	0x1059
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reload_reg_used_for_inherit
	.uleb128 0x32
	.long	.LASF1945
	.byte	0x1
	.value	0x105d
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reg_used_in_insn
	.uleb128 0x32
	.long	.LASF1946
	.byte	0x1
	.value	0x17e8
	.long	0x3053
	.uleb128 0x9
	.byte	0x3
	.quad	input_reload_insns
	.uleb128 0x32
	.long	.LASF1947
	.byte	0x1
	.value	0x17e9
	.long	0x2d
	.uleb128 0x9
	.byte	0x3
	.quad	other_input_address_reload_insns
	.uleb128 0x32
	.long	.LASF1948
	.byte	0x1
	.value	0x17ea
	.long	0x2d
	.uleb128 0x9
	.byte	0x3
	.quad	other_input_reload_insns
	.uleb128 0x32
	.long	.LASF1949
	.byte	0x1
	.value	0x17eb
	.long	0x3053
	.uleb128 0x9
	.byte	0x3
	.quad	input_address_reload_insns
	.uleb128 0x32
	.long	.LASF1950
	.byte	0x1
	.value	0x17ec
	.long	0x3053
	.uleb128 0x9
	.byte	0x3
	.quad	inpaddr_address_reload_insns
	.uleb128 0x32
	.long	.LASF1951
	.byte	0x1
	.value	0x17ed
	.long	0x3053
	.uleb128 0x9
	.byte	0x3
	.quad	output_reload_insns
	.uleb128 0x32
	.long	.LASF1952
	.byte	0x1
	.value	0x17ee
	.long	0x3053
	.uleb128 0x9
	.byte	0x3
	.quad	output_address_reload_insns
	.uleb128 0x32
	.long	.LASF1953
	.byte	0x1
	.value	0x17ef
	.long	0x3053
	.uleb128 0x9
	.byte	0x3
	.quad	outaddr_address_reload_insns
	.uleb128 0x32
	.long	.LASF1954
	.byte	0x1
	.value	0x17f0
	.long	0x2d
	.uleb128 0x9
	.byte	0x3
	.quad	operand_reload_insns
	.uleb128 0x32
	.long	.LASF1955
	.byte	0x1
	.value	0x17f1
	.long	0x2d
	.uleb128 0x9
	.byte	0x3
	.quad	other_operand_reload_insns
	.uleb128 0x32
	.long	.LASF1956
	.byte	0x1
	.value	0x17f2
	.long	0x3053
	.uleb128 0x9
	.byte	0x3
	.quad	other_output_reload_insns
	.uleb128 0x32
	.long	.LASF1957
	.byte	0x1
	.value	0x17f5
	.long	0x8d91
	.uleb128 0x9
	.byte	0x3
	.quad	new_spill_reg_store
	.uleb128 0x32
	.long	.LASF1958
	.byte	0x1
	.value	0x17f6
	.long	0x75b
	.uleb128 0x9
	.byte	0x3
	.quad	reg_reloaded_died
	.uleb128 0x15
	.long	0x4266
	.long	0x9362
	.uleb128 0x16
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x32
	.long	.LASF1959
	.byte	0x1
	.value	0x219a
	.long	0x9352
	.uleb128 0x9
	.byte	0x3
	.quad	reg_state
	.uleb128 0x32
	.long	.LASF1960
	.byte	0x1
	.value	0x219f
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	reload_combine_ruid
	.uleb128 0x32
	.long	.LASF1961
	.byte	0x1
	.value	0x237d
	.long	0x8d6c
	.uleb128 0x9
	.byte	0x3
	.quad	reg_set_luid
	.uleb128 0x15
	.long	0x319
	.long	0x93b4
	.uleb128 0x16
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x32
	.long	.LASF1962
	.byte	0x1
	.value	0x2384
	.long	0x93a4
	.uleb128 0x9
	.byte	0x3
	.quad	reg_offset
	.uleb128 0x32
	.long	.LASF1963
	.byte	0x1
	.value	0x2385
	.long	0x8d6c
	.uleb128 0x9
	.byte	0x3
	.quad	reg_base_reg
	.uleb128 0x15
	.long	0x59d
	.long	0x93f0
	.uleb128 0x16
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x32
	.long	.LASF1964
	.byte	0x1
	.value	0x2386
	.long	0x93e0
	.uleb128 0x9
	.byte	0x3
	.quad	reg_mode
	.uleb128 0x32
	.long	.LASF1965
	.byte	0x1
	.value	0x238b
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	move2add_luid
	.uleb128 0x32
	.long	.LASF1966
	.byte	0x1
	.value	0x238f
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	move2add_last_label_luid
	.uleb128 0x41
	.long	.LASF1967
	.byte	0x5
	.byte	0x62
	.long	0x1e3
	.uleb128 0x15
	.long	0x1f1
	.long	0x944d
	.uleb128 0x16
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x42
	.long	.LASF1968
	.byte	0x5
	.value	0xc3a
	.long	0x9459
	.uleb128 0xc
	.long	0x943d
	.uleb128 0x15
	.long	0x712
	.long	0x946e
	.uleb128 0x16
	.long	0x1ea
	.byte	0x3a
	.byte	0
	.uleb128 0x41
	.long	.LASF173
	.byte	0xa
	.byte	0x34
	.long	0x9479
	.uleb128 0xc
	.long	0x945e
	.uleb128 0x15
	.long	0x332
	.long	0x948e
	.uleb128 0x16
	.long	0x1ea
	.byte	0x3a
	.byte	0
	.uleb128 0x41
	.long	.LASF1969
	.byte	0xa
	.byte	0x50
	.long	0x9499
	.uleb128 0xc
	.long	0x947e
	.uleb128 0x15
	.long	0x339
	.long	0x94ae
	.uleb128 0x16
	.long	0x1ea
	.byte	0x3a
	.byte	0
	.uleb128 0x41
	.long	.LASF1970
	.byte	0xa
	.byte	0x60
	.long	0x94b9
	.uleb128 0xc
	.long	0x949e
	.uleb128 0x15
	.long	0x32b
	.long	0x94ce
	.uleb128 0x16
	.long	0x1ea
	.byte	0x3a
	.byte	0
	.uleb128 0x41
	.long	.LASF1971
	.byte	0xa
	.byte	0x6a
	.long	0x94d9
	.uleb128 0xc
	.long	0x94be
	.uleb128 0x41
	.long	.LASF1972
	.byte	0xa
	.byte	0xa4
	.long	0x59d
	.uleb128 0x15
	.long	0x36a
	.long	0x94f9
	.uleb128 0x16
	.long	0x1ea
	.byte	0x34
	.byte	0
	.uleb128 0x42
	.long	.LASF1973
	.byte	0xb
	.value	0x18b
	.long	0x94e9
	.uleb128 0x42
	.long	.LASF1974
	.byte	0xb
	.value	0x18f
	.long	0x75b
	.uleb128 0x42
	.long	.LASF1975
	.byte	0xb
	.value	0x196
	.long	0x94e9
	.uleb128 0x42
	.long	.LASF1976
	.byte	0xb
	.value	0x19a
	.long	0x75b
	.uleb128 0x42
	.long	.LASF1977
	.byte	0xb
	.value	0x1c2
	.long	0x8d6c
	.uleb128 0x15
	.long	0x75b
	.long	0x9545
	.uleb128 0x16
	.long	0x1ea
	.byte	0x18
	.byte	0
	.uleb128 0x42
	.long	.LASF1978
	.byte	0xb
	.value	0x1c7
	.long	0x9535
	.uleb128 0x15
	.long	0x310
	.long	0x9561
	.uleb128 0x16
	.long	0x1ea
	.byte	0x18
	.byte	0
	.uleb128 0x42
	.long	.LASF1979
	.byte	0xb
	.value	0x1cb
	.long	0x9551
	.uleb128 0x15
	.long	0x1f1
	.long	0x9583
	.uleb128 0x16
	.long	0x1ea
	.byte	0x18
	.uleb128 0x16
	.long	0x1ea
	.byte	0x18
	.byte	0
	.uleb128 0x42
	.long	.LASF1980
	.byte	0xb
	.value	0x1d8
	.long	0x956d
	.uleb128 0x42
	.long	.LASF1981
	.byte	0xb
	.value	0x1dd
	.long	0x956d
	.uleb128 0x15
	.long	0x332
	.long	0x95ab
	.uleb128 0x16
	.long	0x1ea
	.byte	0x98
	.byte	0
	.uleb128 0x41
	.long	.LASF1982
	.byte	0x2
	.byte	0x36
	.long	0x95b6
	.uleb128 0xc
	.long	0x959b
	.uleb128 0x15
	.long	0x577
	.long	0x95cb
	.uleb128 0x16
	.long	0x1ea
	.byte	0x98
	.byte	0
	.uleb128 0x41
	.long	.LASF1983
	.byte	0x2
	.byte	0x3c
	.long	0x95d6
	.uleb128 0xc
	.long	0x95bb
	.uleb128 0x15
	.long	0x36a
	.long	0x95eb
	.uleb128 0x16
	.long	0x1ea
	.byte	0x98
	.byte	0
	.uleb128 0x41
	.long	.LASF1984
	.byte	0x2
	.byte	0x3f
	.long	0x95f6
	.uleb128 0xc
	.long	0x95db
	.uleb128 0x15
	.long	0x2d
	.long	0x960b
	.uleb128 0x16
	.long	0x1ea
	.byte	0x80
	.byte	0
	.uleb128 0x42
	.long	.LASF1985
	.byte	0x2
	.value	0x611
	.long	0x95fb
	.uleb128 0x15
	.long	0x2d
	.long	0x9627
	.uleb128 0x16
	.long	0x1ea
	.byte	0xa
	.byte	0
	.uleb128 0x42
	.long	.LASF1986
	.byte	0x2
	.value	0x652
	.long	0x9617
	.uleb128 0x42
	.long	.LASF1987
	.byte	0x2
	.value	0x6d2
	.long	0x1e3
	.uleb128 0x43
	.long	.LASF1988
	.byte	0x1
	.value	0x102
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	reload_in_progress
	.uleb128 0x41
	.long	.LASF1989
	.byte	0x19
	.byte	0x3d
	.long	0x1e3
	.uleb128 0x42
	.long	.LASF1990
	.byte	0x19
	.value	0x12a
	.long	0x1e3
	.uleb128 0x42
	.long	.LASF1991
	.byte	0x19
	.value	0x13a
	.long	0x1e3
	.uleb128 0x42
	.long	.LASF1992
	.byte	0x19
	.value	0x1c8
	.long	0x1e3
	.uleb128 0x42
	.long	.LASF1993
	.byte	0x19
	.value	0x217
	.long	0x1e3
	.uleb128 0x42
	.long	.LASF1994
	.byte	0x19
	.value	0x244
	.long	0x1e3
	.uleb128 0x42
	.long	.LASF1995
	.byte	0x19
	.value	0x282
	.long	0x1e3
	.uleb128 0x42
	.long	.LASF1996
	.byte	0x10
	.value	0x1e4
	.long	0x178a
	.uleb128 0x15
	.long	0x2700
	.long	0x96c4
	.uleb128 0x16
	.long	0x1ea
	.byte	0x30
	.byte	0
	.uleb128 0x41
	.long	.LASF1997
	.byte	0x12
	.byte	0x9b
	.long	0x96b4
	.uleb128 0x15
	.long	0x17bc
	.long	0x96df
	.uleb128 0x16
	.long	0x1ea
	.byte	0x3a
	.byte	0
	.uleb128 0x43
	.long	.LASF1998
	.byte	0x1
	.value	0x107
	.long	0x96cf
	.uleb128 0x9
	.byte	0x3
	.quad	reload_in_optab
	.uleb128 0x43
	.long	.LASF1999
	.byte	0x1
	.value	0x108
	.long	0x96cf
	.uleb128 0x9
	.byte	0x3
	.quad	reload_out_optab
	.uleb128 0x41
	.long	.LASF2000
	.byte	0x14
	.byte	0x2a
	.long	0x1e3
	.uleb128 0x41
	.long	.LASF2001
	.byte	0x14
	.byte	0x41
	.long	0x2b95
	.uleb128 0x41
	.long	.LASF2002
	.byte	0x14
	.byte	0x9d
	.long	0x8d66
	.uleb128 0x41
	.long	.LASF2003
	.byte	0x14
	.byte	0xa2
	.long	0x94e9
	.uleb128 0x41
	.long	.LASF2004
	.byte	0x14
	.byte	0xad
	.long	0x93e0
	.uleb128 0x44
	.long	.LASF2005
	.byte	0x1
	.byte	0xfe
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	caller_save_needed
	.uleb128 0x41
	.long	.LASF2006
	.byte	0xe
	.byte	0xe4
	.long	0x1e3
	.uleb128 0x41
	.long	.LASF2007
	.byte	0xe
	.byte	0xec
	.long	0x2b95
	.uleb128 0x42
	.long	.LASF2008
	.byte	0xe
	.value	0x11a
	.long	0x2b95
	.uleb128 0x15
	.long	0x2d50
	.long	0x9789
	.uleb128 0x16
	.long	0x1ea
	.byte	0xb3
	.byte	0
	.uleb128 0x45
	.string	"rld"
	.byte	0x15
	.byte	0xa3
	.long	0x9779
	.uleb128 0x41
	.long	.LASF1249
	.byte	0x15
	.byte	0xa4
	.long	0x1e3
	.uleb128 0x44
	.long	.LASF2009
	.byte	0x1
	.byte	0x68
	.long	0xfc6
	.uleb128 0x9
	.byte	0x3
	.quad	reg_equiv_constant
	.uleb128 0x44
	.long	.LASF2010
	.byte	0x1
	.byte	0x6e
	.long	0xfc6
	.uleb128 0x9
	.byte	0x3
	.quad	reg_equiv_memory_loc
	.uleb128 0x44
	.long	.LASF2011
	.byte	0x1
	.byte	0x73
	.long	0xfc6
	.uleb128 0x9
	.byte	0x3
	.quad	reg_equiv_address
	.uleb128 0x44
	.long	.LASF2012
	.byte	0x1
	.byte	0x77
	.long	0xfc6
	.uleb128 0x9
	.byte	0x3
	.quad	reg_equiv_mem
	.uleb128 0x41
	.long	.LASF2013
	.byte	0x15
	.byte	0xae
	.long	0x1e3
	.uleb128 0x41
	.long	.LASF2014
	.byte	0x15
	.byte	0xaf
	.long	0x3053
	.uleb128 0x41
	.long	.LASF2015
	.byte	0x15
	.byte	0xb2
	.long	0x1e3
	.uleb128 0x44
	.long	.LASF2016
	.byte	0x1
	.byte	0xfa
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	reload_first_uid
	.uleb128 0x44
	.long	.LASF2017
	.byte	0x1
	.byte	0xe6
	.long	0x36a
	.uleb128 0x9
	.byte	0x3
	.quad	indirect_symref_ok
	.uleb128 0x44
	.long	.LASF2018
	.byte	0x1
	.byte	0xe9
	.long	0x36a
	.uleb128 0x9
	.byte	0x3
	.quad	double_reg_address_ok
	.uleb128 0x43
	.long	.LASF2019
	.byte	0x1
	.value	0x15c
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	num_not_at_initial_offset
	.uleb128 0x43
	.long	.LASF2020
	.byte	0x1
	.value	0x120
	.long	0x2f8d
	.uleb128 0x9
	.byte	0x3
	.quad	reload_insn_chain
	.uleb128 0x41
	.long	.LASF2021
	.byte	0x16
	.byte	0x91
	.long	0x1e3
	.uleb128 0x41
	.long	.LASF1260
	.byte	0x16
	.byte	0xcb
	.long	0x2fb8
	.uleb128 0x15
	.long	0x3154
	.long	0x98a0
	.uleb128 0x46
	.byte	0
	.uleb128 0x41
	.long	.LASF1278
	.byte	0x16
	.byte	0xf9
	.long	0x98ab
	.uleb128 0xc
	.long	0x9895
	.uleb128 0x42
	.long	.LASF2022
	.byte	0x1a
	.value	0x1cb
	.long	0x98bc
	.uleb128 0x3
	.byte	0x8
	.long	0x371
	.uleb128 0x42
	.long	.LASF2023
	.byte	0x1
	.value	0x123
	.long	0x123
	.uleb128 0x43
	.long	.LASF2024
	.byte	0x1
	.value	0x10d
	.long	0x1059
	.uleb128 0x9
	.byte	0x3
	.quad	reload_obstack
	.uleb128 0x43
	.long	.LASF2025
	.byte	0x1
	.value	0x111
	.long	0x364
	.uleb128 0x9
	.byte	0x3
	.quad	reload_startobj
	.uleb128 0x43
	.long	.LASF2026
	.byte	0x1
	.value	0x115
	.long	0x364
	.uleb128 0x9
	.byte	0x3
	.quad	reload_firstobj
	.uleb128 0x43
	.long	.LASF2027
	.byte	0x1
	.value	0x28d
	.long	0x1e3
	.uleb128 0x9
	.byte	0x3
	.quad	something_needs_operands_changed
	.uleb128 0x15
	.long	0x36a
	.long	0x9936
	.uleb128 0x16
	.long	0x1ea
	.byte	0xb3
	.byte	0
	.uleb128 0x43
	.long	.LASF2028
	.byte	0x1
	.value	0x1289
	.long	0x9926
	.uleb128 0x9
	.byte	0x3
	.quad	reload_inherited
	.uleb128 0x43
	.long	.LASF2029
	.byte	0x1
	.value	0x128d
	.long	0x70a1
	.uleb128 0x9
	.byte	0x3
	.quad	reload_inheritance_insn
	.uleb128 0x43
	.long	.LASF2030
	.byte	0x1
	.value	0x1291
	.long	0x70a1
	.uleb128 0x9
	.byte	0x3
	.quad	reload_override_in
	.uleb128 0x15
	.long	0x1e3
	.long	0x9988
	.uleb128 0x16
	.long	0x1ea
	.byte	0xb3
	.byte	0
	.uleb128 0x43
	.long	.LASF2031
	.byte	0x1
	.value	0x1295
	.long	0x9978
	.uleb128 0x9
	.byte	0x3
	.quad	reload_spill_index
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x28
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x21
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x22
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x23
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x24
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x25
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x26
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x27
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x28
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x29
	.uleb128 0x17
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2a
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2b
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x2c
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x2d
	.uleb128 0x17
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2e
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2f
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x30
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.byte	0
	.byte	0
	.uleb128 0x31
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x32
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x33
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x34
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x35
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x36
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x34
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x37
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x38
	.uleb128 0xa
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x39
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3a
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x3b
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3c
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3d
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3e
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3f
	.uleb128 0xa
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x40
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x41
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x42
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x43
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x44
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x45
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x46
	.uleb128 0x21
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.LBB19-.Ltext0
	.quad	.LBE19-.Ltext0
	.quad	.LBB26-.Ltext0
	.quad	.LBE26-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB37-.Ltext0
	.quad	.LBE37-.Ltext0
	.quad	.LBB41-.Ltext0
	.quad	.LBE41-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB38-.Ltext0
	.quad	.LBE38-.Ltext0
	.quad	.LBB39-.Ltext0
	.quad	.LBE39-.Ltext0
	.quad	.LBB40-.Ltext0
	.quad	.LBE40-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF895:
	.string	"CODE_FOR_fix_trunctfsi2"
.LASF110:
	.string	"long long int"
.LASF1548:
	.string	"TI_V16SF_TYPE"
.LASF521:
	.string	"original_arg_vector"
.LASF113:
	.string	"VOIDmode"
.LASF1323:
	.string	"BUILT_IN_STRCSPN"
.LASF1862:
	.string	"link"
.LASF307:
	.string	"SS_MINUS"
.LASF2001:
	.string	"reg_n_info"
.LASF354:
	.string	"cond_local_set"
.LASF1487:
	.string	"malloc_flag"
.LASF1004:
	.string	"CODE_FOR_insv"
.LASF1656:
	.string	"delete_caller_save_insns"
.LASF296:
	.string	"RANGE_REG"
.LASF1954:
	.string	"operand_reload_insns"
.LASF1737:
	.string	"r2_type"
.LASF1417:
	.string	"real"
.LASF98:
	.string	"__pad1"
.LASF99:
	.string	"__pad2"
.LASF100:
	.string	"__pad3"
.LASF101:
	.string	"__pad4"
.LASF102:
	.string	"__pad5"
.LASF1393:
	.string	"unused_0"
.LASF1409:
	.string	"unused_1"
.LASF66:
	.string	"long unsigned int"
.LASF879:
	.string	"CODE_FOR_extendsidi2"
.LASF1817:
	.string	"inc_for_reload"
.LASF1574:
	.string	"SSIZETYPE"
.LASF1730:
	.string	"used_in_set"
.LASF2024:
	.string	"reload_obstack"
.LASF2018:
	.string	"double_reg_address_ok"
.LASF431:
	.string	"_obstack_chunk"
.LASF338:
	.string	"rtmem"
.LASF1314:
	.string	"BUILT_IN_STRNCAT"
.LASF980:
	.string	"CODE_FOR_x86_shift_adj_1"
.LASF981:
	.string	"CODE_FOR_x86_shift_adj_2"
.LASF986:
	.string	"CODE_FOR_x86_shift_adj_3"
.LASF928:
	.string	"CODE_FOR_umulditi3"
.LASF440:
	.string	"chunk_limit"
.LASF1245:
	.string	"next_need_reload"
.LASF252:
	.string	"COND"
.LASF1915:
	.string	"reload_insn_firstobj"
.LASF978:
	.string	"CODE_FOR_one_cmplqi2"
.LASF253:
	.string	"COMPARE"
.LASF57:
	.string	"regno"
.LASF336:
	.string	"rtbit"
.LASF387:
	.string	"REG_SAVE_NOTE"
.LASF166:
	.string	"CCGCmode"
.LASF1088:
	.string	"CODE_FOR_minsf3"
.LASF1103:
	.string	"CODE_FOR_movv2sf"
.LASF653:
	.string	"CODE_FOR_sqrtsf2_i387"
.LASF1100:
	.string	"CODE_FOR_movv2si"
.LASF1781:
	.string	"oldequiv"
.LASF1192:
	.string	"bitmap_element_def"
.LASF1368:
	.string	"BUILT_IN_ISLESSGREATER"
.LASF672:
	.string	"CODE_FOR_strmovhi_rex_1"
.LASF1357:
	.string	"BUILT_IN_PUTCHAR_UNLOCKED"
.LASF673:
	.string	"CODE_FOR_strmovqi_1"
.LASF1136:
	.string	"OTI_rotl"
.LASF1069:
	.string	"CODE_FOR_clrstrdi"
.LASF1512:
	.string	"TI_UINTQI_TYPE"
.LASF1237:
	.string	"optional"
.LASF1101:
	.string	"CODE_FOR_movv4hi"
.LASF852:
	.string	"CODE_FOR_pswapdv2sf2"
.LASF1475:
	.string	"ignored_flag"
.LASF1733:
	.string	"reload_reg_free_p"
.LASF846:
	.string	"CODE_FOR_pfrcpit1v2sf3"
.LASF1951:
	.string	"output_reload_insns"
.LASF306:
	.string	"US_PLUS"
.LASF1777:
	.string	"min_conflicting_input_opnum"
.LASF209:
	.string	"SEQUENCE"
.LASF1734:
	.string	"reload_reg_reaches_end_p"
.LASF1219:
	.string	"RELOAD_FOR_OUTADDR_ADDRESS"
.LASF1773:
	.string	"deallocate_reload_reg"
.LASF1498:
	.string	"section_name"
.LASF1853:
	.string	"min_labelno"
.LASF1630:
	.string	"pprev_reload"
.LASF1664:
	.string	"total_size"
.LASF225:
	.string	"ASM_INPUT"
.LASF546:
	.string	"limit_stack"
.LASF1342:
	.string	"BUILT_IN_AGGREGATE_INCOMING_ADDRESS"
.LASF1884:
	.string	"copy_eh_notes"
.LASF247:
	.string	"LABEL_REF"
.LASF465:
	.string	"regno_pointer_align_length"
.LASF1838:
	.string	"this_rtx"
.LASF1450:
	.string	"restrict_flag"
.LASF594:
	.string	"CODE_FOR_fix_truncsfsi_sse"
.LASF136:
	.string	"XCmode"
.LASF485:
	.string	"pretend_args_size"
.LASF1615:
	.string	"starting_frame_size"
.LASF25:
	.string	"list"
.LASF1345:
	.string	"BUILT_IN_RETURN"
.LASF1321:
	.string	"BUILT_IN_STRPBRK"
.LASF1774:
	.string	"merge_assigned_reloads"
.LASF196:
	.string	"MATCH_PAR_DUP"
.LASF1900:
	.string	"spill_reg_rtx"
.LASF1780:
	.string	"oldequiv_reg"
.LASF576:
	.string	"CODE_FOR_zero_extendsidi2_32"
.LASF1423:
	.string	"tree_list"
.LASF481:
	.string	"name"
.LASF478:
	.string	"stmt"
.LASF175:
	.string	"MODE_INT"
.LASF133:
	.string	"HCmode"
.LASF849:
	.string	"CODE_FOR_pfrsqit1v2sf3"
.LASF831:
	.string	"CODE_FOR_gev2sf3"
.LASF930:
	.string	"CODE_FOR_mulditi3"
.LASF706:
	.string	"CODE_FOR_allocate_stack_worker_rex64"
.LASF1177:
	.string	"refs"
.LASF1535:
	.string	"TI_CONST_PTR_TYPE"
.LASF1812:
	.string	"reg2"
.LASF670:
	.string	"CODE_FOR_strmovsi_rex_1"
.LASF1222:
	.string	"RELOAD_OTHER"
.LASF1154:
	.string	"OTI_ucmp"
.LASF1901:
	.string	"spill_reg_store"
.LASF160:
	.string	"V4DFmode"
.LASF1326:
	.string	"BUILT_IN_SQRT"
.LASF1495:
	.string	"result"
.LASF360:
	.string	"frequency"
.LASF1889:
	.string	"reg_last_reload_reg"
.LASF917:
	.string	"CODE_FOR_subqi3"
.LASF851:
	.string	"CODE_FOR_pswapdv2si2"
.LASF697:
	.string	"CODE_FOR_strlenqi_rex_1"
.LASF1521:
	.string	"TI_SIZE_ZERO"
.LASF1153:
	.string	"OTI_cmp"
.LASF1989:
	.string	"optimize"
.LASF1572:
	.string	"size_type_kind"
.LASF241:
	.string	"CONST"
.LASF168:
	.string	"CCNOmode"
.LASF1242:
	.string	"regs"
.LASF430:
	.string	"GR_MAX"
.LASF50:
	.string	"INT_SSE_REGS"
.LASF754:
	.string	"CODE_FOR_sse_comi"
.LASF401:
	.string	"NOTE_INSN_LOOP_CONT"
.LASF1676:
	.string	"new_x"
.LASF289:
	.string	"UNSIGNED_FIX"
.LASF1138:
	.string	"OTI_smin"
.LASF202:
	.string	"DEFINE_PEEPHOLE2"
.LASF1888:
	.string	"stop"
.LASF910:
	.string	"CODE_FOR_addxf3"
.LASF958:
	.string	"CODE_FOR_xordi3"
.LASF213:
	.string	"SET_ATTR"
.LASF1959:
	.string	"reg_state"
.LASF414:
	.string	"NOTE_INSN_LIVE"
.LASF619:
	.string	"CODE_FOR_testsi_1"
.LASF1904:
	.string	"bad_spill_regs"
.LASF480:
	.string	"varasm"
.LASF770:
	.string	"CODE_FOR_addv2si3"
.LASF435:
	.string	"obstack"
.LASF1145:
	.string	"OTI_negv"
.LASF586:
	.string	"CODE_FOR_truncdfsf2_3"
.LASF1199:
	.string	"BITMAP_IOR"
.LASF491:
	.string	"cannot_inline"
.LASF1410:
	.string	"high"
.LASF1870:
	.string	"width"
.LASF1965:
	.string	"move2add_luid"
.LASF859:
	.string	"CODE_FOR_cmpqi_ext_3"
.LASF655:
	.string	"CODE_FOR_sqrtdf2_1_sse_only"
.LASF624:
	.string	"CODE_FOR_negdf2_ifs"
.LASF1355:
	.string	"BUILT_IN_FWRITE"
.LASF593:
	.string	"CODE_FOR_fix_truncsi_memory"
.LASF1152:
	.string	"OTI_cos"
.LASF1477:
	.string	"common_flag"
.LASF498:
	.string	"x_cleanup_label"
.LASF1662:
	.string	"from_reg"
.LASF384:
	.string	"REG_FRAME_RELATED_EXPR"
.LASF557:
	.string	"varasm_status"
.LASF1344:
	.string	"BUILT_IN_APPLY"
.LASF1994:
	.string	"frame_pointer_needed"
.LASF818:
	.string	"CODE_FOR_mmx_punpckhbw"
.LASF1552:
	.string	"TI_V4HI_TYPE"
.LASF44:
	.string	"SSE_REGS"
.LASF1617:
	.string	"__obj"
.LASF680:
	.string	"CODE_FOR_strsetdi_rex_1"
.LASF712:
	.string	"CODE_FOR_movv2si_internal"
.LASF1403:
	.string	"lang_flag_1"
.LASF1404:
	.string	"lang_flag_2"
.LASF1405:
	.string	"lang_flag_3"
.LASF409:
	.string	"NOTE_INSN_EH_REGION_BEG"
.LASF1407:
	.string	"lang_flag_5"
.LASF1408:
	.string	"lang_flag_6"
.LASF1493:
	.string	"lang_flag_7"
.LASF691:
	.string	"CODE_FOR_rep_stosqi_rex64"
.LASF143:
	.string	"COImode"
.LASF1556:
	.string	"TI_MAIN_IDENTIFIER"
.LASF174:
	.string	"MODE_RANDOM"
.LASF1772:
	.string	"nregno"
.LASF787:
	.string	"CODE_FOR_mmx_xordi3"
.LASF809:
	.string	"CODE_FOR_lshrv4hi3"
.LASF685:
	.string	"CODE_FOR_strsetqi_1"
.LASF977:
	.string	"CODE_FOR_one_cmplhi2"
.LASF1016:
	.string	"CODE_FOR_sordered"
.LASF1476:
	.string	"in_system_header_flag"
.LASF794:
	.string	"CODE_FOR_mmx_pinsrw"
.LASF1723:
	.string	"ignored"
.LASF373:
	.string	"REG_UNUSED"
.LASF1541:
	.string	"TI_UV8HI_TYPE"
.LASF1640:
	.string	"count_spilled_pseudo"
.LASF499:
	.string	"x_return_label"
.LASF114:
	.string	"BImode"
.LASF533:
	.string	"returns_pointer"
.LASF820:
	.string	"CODE_FOR_mmx_punpckhdq"
.LASF623:
	.string	"CODE_FOR_negdf2_memory"
.LASF1073:
	.string	"CODE_FOR_strsethi"
.LASF291:
	.string	"SIGN_EXTRACT"
.LASF1565:
	.string	"itk_unsigned_int"
.LASF1527:
	.string	"TI_COMPLEX_FLOAT_TYPE"
.LASF1483:
	.string	"weak_flag"
.LASF1782:
	.string	"special"
.LASF746:
	.string	"CODE_FOR_sse_nandti3"
.LASF1995:
	.string	"flag_non_call_exceptions"
.LASF238:
	.string	"CONST_DOUBLE"
.LASF2000:
	.string	"max_regno"
.LASF1081:
	.string	"CODE_FOR_movdicc"
.LASF1924:
	.string	"unused_insn_chains"
.LASF667:
	.string	"CODE_FOR_cld"
.LASF2017:
	.string	"indirect_symref_ok"
.LASF466:
	.string	"regno_pointer_align"
.LASF1871:
	.string	"reload_cse_move2add"
.LASF62:
	.string	"CUMULATIVE_ARGS"
.LASF187:
	.string	"INCLUDE"
.LASF912:
	.string	"CODE_FOR_adddf3"
.LASF1208:
	.string	"dest"
.LASF857:
	.string	"CODE_FOR_cmpdi_1_rex64"
.LASF1598:
	.string	"compute_use_by_pseudos"
.LASF234:
	.string	"RETURN"
.LASF177:
	.string	"MODE_PARTIAL_INT"
.LASF634:
	.string	"CODE_FOR_ashrsi3_31"
.LASF636:
	.string	"CODE_FOR_setcc_2"
.LASF1646:
	.string	"rnum"
.LASF1351:
	.string	"BUILT_IN_PUTS"
.LASF1977:
	.string	"inv_reg_alloc_order"
.LASF902:
	.string	"CODE_FOR_floatsisf2"
.LASF248:
	.string	"SYMBOL_REF"
.LASF1373:
	.string	"BUILT_IN_INIT_DWARF_REG_SIZES"
.LASF1543:
	.string	"TI_UV4HI_TYPE"
.LASF1127:
	.string	"OTI_smod"
.LASF1835:
	.string	"dreg"
.LASF476:
	.string	"x_pending_chain"
.LASF784:
	.string	"CODE_FOR_umulv4hi3_highpart"
.LASF1555:
	.string	"TI_V16QI_TYPE"
.LASF1318:
	.string	"BUILT_IN_STRNCMP"
.LASF47:
	.string	"FP_SECOND_SSE_REGS"
.LASF976:
	.string	"CODE_FOR_one_cmplsi2"
.LASF508:
	.string	"x_context_display"
.LASF1518:
	.string	"TI_INTEGER_ONE"
.LASF1322:
	.string	"BUILT_IN_STRSPN"
.LASF482:
	.string	"outer"
.LASF705:
	.string	"CODE_FOR_allocate_stack_worker_1"
.LASF419:
	.string	"GR_PC"
.LASF1892:
	.string	"reg_max_ref_width"
.LASF1220:
	.string	"RELOAD_FOR_OPERAND_ADDRESS"
.LASF1098:
	.string	"CODE_FOR_movv4sf"
.LASF1099:
	.string	"CODE_FOR_movv4si"
.LASF747:
	.string	"CODE_FOR_sse_iorti3"
.LASF1272:
	.string	"insn_gen_fn"
.LASF1671:
	.string	"copied"
.LASF1306:
	.string	"BUILT_IN_BCMP"
.LASF916:
	.string	"CODE_FOR_subhi3"
.LASF324:
	.string	"size"
.LASF626:
	.string	"CODE_FOR_abssf2_ifs"
.LASF479:
	.string	"emit"
.LASF756:
	.string	"CODE_FOR_sse_unpckhps"
.LASF1756:
	.string	"force_group"
.LASF921:
	.string	"CODE_FOR_subsf3"
.LASF906:
	.string	"CODE_FOR_adddi3"
.LASF1658:
	.string	"reg_class_names"
.LASF344:
	.string	"first"
.LASF239:
	.string	"CONST_VECTOR"
.LASF1164:
	.string	"hint"
.LASF1122:
	.string	"OTI_sdiv"
.LASF1397:
	.string	"public_flag"
.LASF766:
	.string	"CODE_FOR_cvtss2si"
.LASF192:
	.string	"MATCH_DUP"
.LASF400:
	.string	"NOTE_INSN_LOOP_END"
.LASF1906:
	.string	"spill_regs"
.LASF3:
	.string	"call"
.LASF181:
	.string	"MODE_VECTOR_INT"
.LASF2:
	.string	"jump"
.LASF404:
	.string	"NOTE_INSN_FUNCTION_END"
.LASF1163:
	.string	"varray_data_tag"
.LASF1688:
	.string	"substed_operand"
.LASF1919:
	.string	"num_eliminable"
.LASF1047:
	.string	"CODE_FOR_call_value_pop"
.LASF104:
	.string	"_unused2"
.LASF1769:
	.string	"bad_for_class"
.LASF1050:
	.string	"CODE_FOR_untyped_call"
.LASF436:
	.string	"chunk_size"
.LASF1269:
	.string	"n_dups"
.LASF617:
	.string	"CODE_FOR_udivmoddi4"
.LASF65:
	.string	"size_t"
.LASF658:
	.string	"CODE_FOR_sqrttf2"
.LASF561:
	.string	"language_function"
.LASF1515:
	.string	"TI_UINTDI_TYPE"
.LASF721:
	.string	"CODE_FOR_sse_movntv4sf"
.LASF1807:
	.string	"last_reload_reg"
.LASF858:
	.string	"CODE_FOR_cmpsi_1"
.LASF1382:
	.string	"BUILT_IN_EXPECT"
.LASF326:
	.string	"mem_attrs"
.LASF292:
	.string	"ZERO_EXTRACT"
.LASF1925:
	.string	"something_needs_elimination"
.LASF1683:
	.string	"icode"
.LASF710:
	.string	"CODE_FOR_movv8qi_internal"
.LASF120:
	.string	"OImode"
.LASF742:
	.string	"CODE_FOR_vmrsqrtv4sf2"
.LASF1652:
	.string	"this_cost"
.LASF1979:
	.string	"reg_class_size"
.LASF915:
	.string	"CODE_FOR_subsi3"
.LASF695:
	.string	"CODE_FOR_cmpstrqi_rex_1"
.LASF562:
	.string	"insn_code"
.LASF1320:
	.string	"BUILT_IN_STRSTR"
.LASF474:
	.string	"x_apply_args_value"
.LASF514:
	.string	"x_temp_slots"
.LASF1938:
	.string	"reload_reg_used_in_output"
.LASF1113:
	.string	"OTI_addv"
.LASF1068:
	.string	"CODE_FOR_clrstrsi"
.LASF638:
	.string	"CODE_FOR_doloop_end_internal"
.LASF29:
	.string	"AREG"
.LASF1857:
	.string	"live"
.LASF767:
	.string	"CODE_FOR_cvttss2si"
.LASF643:
	.string	"CODE_FOR_nop"
.LASF1910:
	.string	"spill_indirect_levels"
.LASF1960:
	.string	"reload_combine_ruid"
.LASF535:
	.string	"calls_setjmp"
.LASF494:
	.string	"x_nonlocal_labels"
.LASF1576:
	.string	"BITSIZETYPE"
.LASF461:
	.string	"x_last_insn"
.LASF103:
	.string	"_mode"
.LASF735:
	.string	"CODE_FOR_mulv4sf3"
.LASF1506:
	.string	"TI_ERROR_MARK"
.LASF1496:
	.string	"initial"
.LASF644:
	.string	"CODE_FOR_prologue_set_got"
.LASF49:
	.string	"FLOAT_INT_REGS"
.LASF564:
	.string	"CODE_FOR_cmpdi_1_insn_rex64"
.LASF1116:
	.string	"OTI_smul"
.LASF527:
	.string	"stack_alignment_needed"
.LASF727:
	.string	"CODE_FOR_sse_loadss"
.LASF1028:
	.string	"CODE_FOR_bltu"
.LASF368:
	.string	"REG_WAS_0"
.LASF1666:
	.string	"stack_slot"
.LASF933:
	.string	"CODE_FOR_umulsi3_highpart"
.LASF743:
	.string	"CODE_FOR_sqrtv4sf2"
.LASF532:
	.string	"returns_pcc_struct"
.LASF1339:
	.string	"BUILT_IN_CONSTANT_P"
.LASF1511:
	.string	"TI_INTTI_TYPE"
.LASF1891:
	.string	"reg_is_output_reload"
.LASF1067:
	.string	"CODE_FOR_strmovqi_rex64"
.LASF650:
	.string	"CODE_FOR_ffssi_1"
.LASF1614:
	.string	"did_spill"
.LASF679:
	.string	"CODE_FOR_rep_movqi_rex64"
.LASF717:
	.string	"CODE_FOR_sse_movmskps"
.LASF665:
	.string	"CODE_FOR_cosxf2"
.LASF1806:
	.string	"delete_output_reload"
.LASF1075:
	.string	"CODE_FOR_strsetqi"
.LASF1383:
	.string	"END_BUILTINS"
.LASF753:
	.string	"CODE_FOR_vmmaskncmpv4sf3"
.LASF297:
	.string	"RANGE_VAR"
.LASF185:
	.string	"rtx_code"
.LASF1670:
	.string	"eliminate_regs"
.LASF416:
	.string	"NOTE_INSN_EXPECTED_VALUE"
.LASF1295:
	.string	"BUILT_IN_IMAXABS"
.LASF801:
	.string	"CODE_FOR_gtv4hi3"
.LASF1179:
	.string	"deaths"
.LASF180:
	.string	"MODE_COMPLEX_FLOAT"
.LASF627:
	.string	"CODE_FOR_absdf2_memory"
.LASF281:
	.string	"LTGT"
.LASF1462:
	.string	"alias_set"
.LASF1211:
	.string	"edge"
.LASF828:
	.string	"CODE_FOR_subv2sf3"
.LASF936:
	.string	"CODE_FOR_mulxf3"
.LASF543:
	.string	"is_thunk"
.LASF1437:
	.string	"fragment_origin"
.LASF386:
	.string	"REG_EH_REGION"
.LASF155:
	.string	"V8DImode"
.LASF1784:
	.string	"real_oldequiv"
.LASF525:
	.string	"profile_label_no"
.LASF1216:
	.string	"RELOAD_FOR_INPUT_ADDRESS"
.LASF1840:
	.string	"equiv_regs"
.LASF1634:
	.string	"did_elimination"
.LASF363:
	.string	"reg_note"
.LASF1147:
	.string	"OTI_absv"
.LASF833:
	.string	"CODE_FOR_pfmaxv2sf3"
.LASF493:
	.string	"x_function_call_count"
.LASF1596:
	.string	"__o1"
.LASF843:
	.string	"CODE_FOR_floatv2si2"
.LASF729:
	.string	"CODE_FOR_sse_storess"
.LASF1348:
	.string	"BUILT_IN_TRAP"
.LASF684:
	.string	"CODE_FOR_strsethi_rex_1"
.LASF349:
	.string	"head_tree"
.LASF1508:
	.string	"TI_INTHI_TYPE"
.LASF1049:
	.string	"CODE_FOR_call_value_exp"
.LASF1071:
	.string	"CODE_FOR_strsetsi"
.LASF46:
	.string	"FP_TOP_SSE_REGS"
.LASF1877:
	.string	"regno_offset"
.LASF1731:
	.string	"conflict_start"
.LASF1566:
	.string	"itk_long"
.LASF1833:
	.string	"reload_cse_simplify_set"
.LASF1665:
	.string	"adjust"
.LASF961:
	.string	"CODE_FOR_xorqi3"
.LASF931:
	.string	"CODE_FOR_mulsidi3"
.LASF2016:
	.string	"reload_first_uid"
.LASF1826:
	.string	"purge"
.LASF1319:
	.string	"BUILT_IN_STRLEN"
.LASF574:
	.string	"CODE_FOR_swaptf"
.LASF244:
	.string	"SUBREG"
.LASF580:
	.string	"CODE_FOR_extendsidi2_rex64"
.LASF601:
	.string	"CODE_FOR_floathidf2"
.LASF40:
	.string	"GENERAL_REGS"
.LASF738:
	.string	"CODE_FOR_vmdivv4sf3"
.LASF150:
	.string	"V4SImode"
.LASF808:
	.string	"CODE_FOR_ashrv2si3"
.LASF682:
	.string	"CODE_FOR_strsetsi_rex_1"
.LASF1309:
	.string	"BUILT_IN_RINDEX"
.LASF1606:
	.string	"usage"
.LASF1991:
	.string	"flag_omit_frame_pointer"
.LASF1244:
	.string	"insn_chain"
.LASF382:
	.string	"REG_SAVE_AREA"
.LASF341:
	.string	"locs"
.LASF1371:
	.string	"BUILT_IN_DWARF_CFA"
.LASF1365:
	.string	"BUILT_IN_ISGREATEREQUAL"
.LASF94:
	.string	"_vtable_offset"
.LASF249:
	.string	"ADDRESSOF"
.LASF305:
	.string	"SS_PLUS"
.LASF1386:
	.string	"side_effects_flag"
.LASF1583:
	.string	"can_eliminate"
.LASF1056:
	.string	"CODE_FOR_ffssi2"
.LASF663:
	.string	"CODE_FOR_cosdf2"
.LASF1696:
	.string	"num_clobbers"
.LASF1820:
	.string	"post"
.LASF1868:
	.string	"sext_for_mode"
.LASF795:
	.string	"CODE_FOR_mmx_pextrw"
.LASF322:
	.string	"expr"
.LASF888:
	.string	"CODE_FOR_truncxfdf2"
.LASF2010:
	.string	"reg_equiv_memory_loc"
.LASF797:
	.string	"CODE_FOR_eqv8qi3"
.LASF560:
	.string	"machine_function"
.LASF1863:
	.string	"usage_rtx"
.LASF728:
	.string	"CODE_FOR_sse_movss"
.LASF1460:
	.string	"binfo"
.LASF938:
	.string	"CODE_FOR_muldf3"
.LASF1188:
	.string	"elements_used"
.LASF1104:
	.string	"CODE_FOR_sfence"
.LASF1766:
	.string	"last_class"
.LASF2023:
	.string	"current_function_decl"
.LASF1022:
	.string	"CODE_FOR_sltgt"
.LASF61:
	.string	"maybe_vaarg"
.LASF713:
	.string	"CODE_FOR_movv2sf_internal"
.LASF1860:
	.string	"reg_sum"
.LASF269:
	.string	"PRE_INC"
.LASF1631:
	.string	"old_body"
.LASF609:
	.string	"CODE_FOR_addsi_1_zext"
.LASF123:
	.string	"PSImode"
.LASF2032:
	.string	"GNU C 4.8.1 -mtune=generic -march=x86-64 -g -fno-strict-aliasing -fstack-protector"
.LASF1262:
	.string	"operand_loc"
.LASF1613:
	.string	"something_changed"
.LASF460:
	.string	"x_first_insn"
.LASF1819:
	.string	"incloc"
.LASF272:
	.string	"PRE_MODIFY"
.LASF158:
	.string	"V2DFmode"
.LASF572:
	.string	"CODE_FOR_popdi1"
.LASF780:
	.string	"CODE_FOR_ussubv8qi3"
.LASF573:
	.string	"CODE_FOR_swapxf"
.LASF1681:
	.string	"eliminate_regs_in_insn"
.LASF1742:
	.string	"ignore_address_reloads"
.LASF152:
	.string	"V8QImode"
.LASF1562:
	.string	"itk_short"
.LASF1313:
	.string	"BUILT_IN_STRCAT"
.LASF383:
	.string	"REG_BR_PRED"
.LASF1364:
	.string	"BUILT_IN_ISGREATER"
.LASF432:
	.string	"limit"
.LASF707:
	.string	"CODE_FOR_trap"
.LASF1828:
	.string	"reload_cse_simplify"
.LASF1468:
	.string	"linenum"
.LASF805:
	.string	"CODE_FOR_uminv8qi3"
.LASF1480:
	.string	"static_ctor_flag"
.LASF1061:
	.string	"CODE_FOR_strmovdi_rex64"
.LASF282:
	.string	"SIGN_EXTEND"
.LASF311:
	.string	"LAST_AND_UNUSED_RTX_CODE"
.LASF1084:
	.string	"CODE_FOR_movsfcc"
.LASF1308:
	.string	"BUILT_IN_INDEX"
.LASF1191:
	.string	"varray_type"
.LASF1241:
	.string	"needs"
.LASF1500:
	.string	"saved_tree"
.LASF1842:
	.string	"alternative_nregs"
.LASF922:
	.string	"CODE_FOR_muldi3"
.LASF1539:
	.string	"TI_UV4SF_TYPE"
.LASF156:
	.string	"V16QImode"
.LASF647:
	.string	"CODE_FOR_eh_return_di"
.LASF16:
	.string	"common"
.LASF591:
	.string	"CODE_FOR_fix_truncdfdi_sse"
.LASF298:
	.string	"RANGE_LIVE"
.LASF2013:
	.string	"n_earlyclobbers"
.LASF76:
	.string	"_flags"
.LASF218:
	.string	"JUMP_INSN"
.LASF819:
	.string	"CODE_FOR_mmx_punpckhwd"
.LASF704:
	.string	"CODE_FOR_sse_movdfcc_eq"
.LASF232:
	.string	"CLOBBER"
.LASF1422:
	.string	"tree_identifier"
.LASF1963:
	.string	"reg_base_reg"
.LASF1509:
	.string	"TI_INTSI_TYPE"
.LASF1933:
	.string	"reload_reg_used_in_input_addr"
.LASF418:
	.string	"global_rtl_index"
.LASF1254:
	.string	"need_elim"
.LASF909:
	.string	"CODE_FOR_addqi3"
.LASF554:
	.string	"arg_pointer_save_area_init"
.LASF1504:
	.string	"lang_decl"
.LASF578:
	.string	"CODE_FOR_zero_extendhidi2"
.LASF598:
	.string	"CODE_FOR_x86_fnstcw_1"
.LASF862:
	.string	"CODE_FOR_cmpdf"
.LASF1463:
	.string	"lang_specific"
.LASF853:
	.string	"CODE_FOR_cmpdi"
.LASF131:
	.string	"TFmode"
.LASF817:
	.string	"CODE_FOR_mmx_packuswb"
.LASF640:
	.string	"CODE_FOR_return_internal"
.LASF1312:
	.string	"BUILT_IN_MEMSET"
.LASF1921:
	.string	"offsets_known_at"
.LASF86:
	.string	"_IO_backup_base"
.LASF1014:
	.string	"CODE_FOR_sleu"
.LASF960:
	.string	"CODE_FOR_xorhi3"
.LASF53:
	.string	"LIM_REG_CLASSES"
.LASF1821:
	.string	"add_insn"
.LASF1189:
	.string	"element_size"
.LASF1416:
	.string	"tree_complex"
.LASF1645:
	.string	"order"
.LASF129:
	.string	"DFmode"
.LASF1594:
	.string	"use_ruid"
.LASF356:
	.string	"global_live_at_end"
.LASF1914:
	.string	"pseudos_counted"
.LASF5:
	.string	"volatil"
.LASF456:
	.string	"sequence_rtl_expr"
.LASF1992:
	.string	"flag_pic"
.LASF1775:
	.string	"conflicting_input"
.LASF1198:
	.string	"BITMAP_AND_COMPL"
.LASF182:
	.string	"MODE_VECTOR_FLOAT"
.LASF734:
	.string	"CODE_FOR_vmsubv4sf3"
.LASF1230:
	.string	"reg_rtx"
.LASF979:
	.string	"CODE_FOR_ashldi3"
.LASF293:
	.string	"HIGH"
.LASF541:
	.string	"contains_functions"
.LASF821:
	.string	"CODE_FOR_mmx_punpcklbw"
.LASF1813:
	.string	"delete_address_reloads"
.LASF1175:
	.string	"last_note_uid"
.LASF1148:
	.string	"OTI_one_cmpl"
.LASF1429:
	.string	"tree_block"
.LASF1273:
	.string	"insn_operand_data"
.LASF1802:
	.string	"store_insn"
.LASF1093:
	.string	"CODE_FOR_allocate_stack_worker"
.LASF777:
	.string	"CODE_FOR_subv2si3"
.LASF1620:
	.string	"addr"
.LASF1818:
	.string	"inc_amount"
.LASF1930:
	.string	"used_spill_regs_local"
.LASF1203:
	.string	"regset"
.LASF1678:
	.string	"new_v"
.LASF635:
	.string	"CODE_FOR_lshrdi3_1"
.LASF78:
	.string	"_IO_read_end"
.LASF335:
	.string	"rt_cselib"
.LASF1669:
	.string	"initial_p"
.LASF1369:
	.string	"BUILT_IN_ISUNORDERED"
.LASF184:
	.string	"HARD_REG_ELT_TYPE"
.LASF1445:
	.string	"string_flag"
.LASF1485:
	.string	"no_instrument_function_entry_exit"
.LASF19:
	.string	"vector"
.LASF1875:
	.string	"added_offset"
.LASF908:
	.string	"CODE_FOR_addhi3"
.LASF198:
	.string	"DEFINE_INSN"
.LASF651:
	.string	"CODE_FOR_sqrtsf2_1"
.LASF1881:
	.string	"base_regno"
.LASF33:
	.string	"SIREG"
.LASF959:
	.string	"CODE_FOR_xorsi3"
.LASF823:
	.string	"CODE_FOR_mmx_punpckldq"
.LASF1324:
	.string	"BUILT_IN_STRCHR"
.LASF85:
	.string	"_IO_save_base"
.LASF837:
	.string	"CODE_FOR_pf2id"
.LASF1770:
	.string	"equiv"
.LASF855:
	.string	"CODE_FOR_cmphi"
.LASF371:
	.string	"REG_NONNEG"
.LASF312:
	.string	"min_align"
.LASF838:
	.string	"CODE_FOR_pf2iw"
.LASF1957:
	.string	"new_spill_reg_store"
.LASF1118:
	.string	"OTI_smul_highpart"
.LASF454:
	.string	"sequence_stack"
.LASF1200:
	.string	"BITMAP_XOR"
.LASF1709:
	.string	"init_elim_table"
.LASF884:
	.string	"CODE_FOR_extenddftf2"
.LASF1346:
	.string	"BUILT_IN_SETJMP"
.LASF1997:
	.string	"optab_table"
.LASF1553:
	.string	"TI_V2SI_TYPE"
.LASF1783:
	.string	"where"
.LASF1207:
	.string	"succ_next"
.LASF1825:
	.string	"reload_cse_delete_noop_set"
.LASF1864:
	.string	"start_reg"
.LASF197:
	.string	"MATCH_INSN"
.LASF1650:
	.string	"used_by_other_reload"
.LASF82:
	.string	"_IO_write_end"
.LASF1102:
	.string	"CODE_FOR_movv8qi"
.LASF1947:
	.string	"other_input_address_reload_insns"
.LASF1467:
	.string	"filename"
.LASF1030:
	.string	"CODE_FOR_bgeu"
.LASF1854:
	.string	"n_labels"
.LASF365:
	.string	"REG_INC"
.LASF1095:
	.string	"CODE_FOR_builtin_setjmp_receiver"
.LASF1816:
	.string	"delete_address_reloads_1"
.LASF38:
	.string	"INDEX_REGS"
.LASF255:
	.string	"MINUS"
.LASF750:
	.string	"CODE_FOR_maskcmpv4sf3"
.LASF1872:
	.string	"success"
.LASF1920:
	.string	"num_eliminable_invariants"
.LASF1711:
	.string	"cant_eliminate"
.LASF1657:
	.string	"spill_failure"
.LASF709:
	.string	"CODE_FOR_movv4si_internal"
.LASF1732:
	.string	"conflict_end"
.LASF477:
	.string	"function"
.LASF333:
	.string	"rttype"
.LASF1329:
	.string	"BUILT_IN_SQRTF"
.LASF347:
	.string	"basic_block_def"
.LASF1435:
	.string	"supercontext"
.LASF1484:
	.string	"non_addr_const_p"
.LASF274:
	.string	"UNORDERED"
.LASF1195:
	.string	"bitmap_head"
.LASF30:
	.string	"DREG"
.LASF83:
	.string	"_IO_buf_base"
.LASF379:
	.string	"REG_BR_PROB"
.LASF1694:
	.string	"prev_insn"
.LASF866:
	.string	"CODE_FOR_movstricthi"
.LASF1134:
	.string	"OTI_lshr"
.LASF1998:
	.string	"reload_in_optab"
.LASF97:
	.string	"_offset"
.LASF796:
	.string	"CODE_FOR_mmx_pshufw"
.LASF1672:
	.string	"new0"
.LASF1673:
	.string	"new1"
.LASF176:
	.string	"MODE_FLOAT"
.LASF1490:
	.string	"pure_flag"
.LASF892:
	.string	"CODE_FOR_fix_truncdfdi2"
.LASF1447:
	.string	"needs_constructing_flag"
.LASF526:
	.string	"machine"
.LASF757:
	.string	"CODE_FOR_sse_unpcklps"
.LASF1655:
	.string	"select_reload_regs"
.LASF125:
	.string	"QFmode"
.LASF581:
	.string	"CODE_FOR_extendhidi2"
.LASF54:
	.string	"ix86_args"
.LASF889:
	.string	"CODE_FOR_trunctfdf2"
.LASF788:
	.string	"CODE_FOR_mmx_clrdi"
.LASF265:
	.string	"SMAX"
.LASF1926:
	.string	"failure"
.LASF1076:
	.string	"CODE_FOR_strsetqi_rex64"
.LASF553:
	.string	"uses_eh_lsda"
.LASF1479:
	.string	"transparent_union"
.LASF1363:
	.string	"BUILT_IN_FPRINTF_UNLOCKED"
.LASF739:
	.string	"CODE_FOR_rcpv4sf2"
.LASF913:
	.string	"CODE_FOR_addsf3"
.LASF1609:
	.string	"global"
.LASF1587:
	.string	"from_rtx"
.LASF957:
	.string	"CODE_FOR_iorqi3"
.LASF1283:
	.string	"elt_loc_list"
.LASF1686:
	.string	"new_body"
.LASF813:
	.string	"CODE_FOR_ashlv2si3"
.LASF2012:
	.string	"reg_equiv_mem"
.LASF1317:
	.string	"BUILT_IN_STRCMP"
.LASF592:
	.string	"CODE_FOR_fix_truncsi_nomemory"
.LASF1949:
	.string	"input_address_reload_insns"
.LASF1684:
	.string	"insn_is_asm"
.LASF1150:
	.string	"OTI_sqrt"
.LASF1964:
	.string	"reg_mode"
.LASF948:
	.string	"CODE_FOR_testqi_ccz_1"
.LASF1174:
	.string	"last_uid"
.LASF275:
	.string	"ORDERED"
.LASF231:
	.string	"PREFETCH"
.LASF453:
	.string	"next"
.LASF1392:
	.string	"asm_written_flag"
.LASF1589:
	.string	"elim_table_1"
.LASF233:
	.string	"CALL"
.LASF946:
	.string	"CODE_FOR_udivmodhi4"
.LASF1375:
	.string	"BUILT_IN_EXTRACT_RETURN_ADDR"
.LASF657:
	.string	"CODE_FOR_sqrtxf2"
.LASF140:
	.string	"CSImode"
.LASF844:
	.string	"CODE_FOR_pavgusb"
.LASF1184:
	.string	"elt_list"
.LASF1537:
	.string	"TI_VA_LIST_TYPE"
.LASF1106:
	.string	"CODE_FOR_prefetch"
.LASF1879:
	.string	"invalidate"
.LASF1763:
	.string	"inheritance"
.LASF276:
	.string	"UNEQ"
.LASF6:
	.string	"in_struct"
.LASF105:
	.string	"_IO_marker"
.LASF1212:
	.string	"reload_type"
.LASF1577:
	.string	"SBITSIZETYPE"
.LASF847:
	.string	"CODE_FOR_pfrcpit2v2sf3"
.LASF1213:
	.string	"RELOAD_FOR_INPUT"
.LASF1459:
	.string	"main_variant"
.LASF1347:
	.string	"BUILT_IN_LONGJMP"
.LASF649:
	.string	"CODE_FOR_leave_rex64"
.LASF1952:
	.string	"output_address_reload_insns"
.LASF1275:
	.string	"constraint"
.LASF1202:
	.string	"regset_head"
.LASF974:
	.string	"CODE_FOR_abstf2"
.LASF615:
	.string	"CODE_FOR_udivqi3"
.LASF701:
	.string	"CODE_FOR_sse_movsfcc"
.LASF1196:
	.string	"bitmap_bits"
.LASF1882:
	.string	"dst_mode"
.LASF607:
	.string	"CODE_FOR_floatditf2"
.LASF219:
	.string	"CALL_INSN"
.LASF907:
	.string	"CODE_FOR_addsi3"
.LASF1894:
	.string	"reg_old_renumber"
.LASF1800:
	.string	"all_reaches_end"
.LASF277:
	.string	"UNGE"
.LASF885:
	.string	"CODE_FOR_truncdfsf2"
.LASF1564:
	.string	"itk_int"
.LASF278:
	.string	"UNGT"
.LASF569:
	.string	"CODE_FOR_popsi1"
.LASF13:
	.string	"num_elem"
.LASF1157:
	.string	"OTI_cbranch"
.LASF1105:
	.string	"CODE_FOR_sse_prologue_save"
.LASF1918:
	.string	"reg_eliminate_1"
.LASF380:
	.string	"REG_EXEC_COUNT"
.LASF1054:
	.string	"CODE_FOR_sibcall_epilogue"
.LASF310:
	.string	"US_TRUNCATE"
.LASF1980:
	.string	"reg_class_subunion"
.LASF462:
	.string	"x_cur_insn_uid"
.LASF221:
	.string	"CODE_LABEL"
.LASF2035:
	.string	"_IO_lock_t"
.LASF1331:
	.string	"BUILT_IN_COSF"
.LASF77:
	.string	"_IO_read_ptr"
.LASF773:
	.string	"CODE_FOR_usaddv8qi3"
.LASF1643:
	.string	"reload_reg_class_lower"
.LASF856:
	.string	"CODE_FOR_cmpqi"
.LASF1247:
	.string	"live_throughout"
.LASF334:
	.string	"rt_addr_diff_vec_flags"
.LASF618:
	.string	"CODE_FOR_udivmodsi4"
.LASF590:
	.string	"CODE_FOR_fix_truncsfdi_sse"
.LASF1131:
	.string	"OTI_ior"
.LASF1041:
	.string	"CODE_FOR_indirect_jump"
.LASF199:
	.string	"DEFINE_PEEPHOLE"
.LASF646:
	.string	"CODE_FOR_eh_return_si"
.LASF1801:
	.string	"src_reg"
.LASF1361:
	.string	"BUILT_IN_FPUTS_UNLOCKED"
.LASF236:
	.string	"RESX"
.LASF410:
	.string	"NOTE_INSN_EH_REGION_END"
.LASF91:
	.string	"_flags2"
.LASF146:
	.string	"V2SImode"
.LASF1436:
	.string	"abstract_origin"
.LASF1619:
	.string	"old_frame_size"
.LASF261:
	.string	"ASHIFTRT"
.LASF215:
	.string	"EQ_ATTR"
.LASF1231:
	.string	"opnum"
.LASF1488:
	.string	"no_limit_stack"
.LASF1031:
	.string	"CODE_FOR_ble"
.LASF173:
	.string	"mode_class"
.LASF496:
	.string	"x_nonlocal_goto_handler_labels"
.LASF325:
	.string	"align"
.LASF415:
	.string	"NOTE_INSN_BASIC_BLOCK"
.LASF952:
	.string	"CODE_FOR_andhi3"
.LASF1160:
	.string	"OTI_push"
.LASF1264:
	.string	"operand_mode"
.LASF250:
	.string	"QUEUED"
.LASF1058:
	.string	"CODE_FOR_sqrtdf2"
.LASF1822:
	.string	"store"
.LASF212:
	.string	"ATTR"
.LASF1886:
	.string	"fixup_abnormal_edges"
.LASF59:
	.string	"sse_nregs"
.LASF1608:
	.string	"new_insn_chain"
.LASF489:
	.string	"return_rtx"
.LASF81:
	.string	"_IO_write_ptr"
.LASF854:
	.string	"CODE_FOR_cmpsi"
.LASF495:
	.string	"x_nonlocal_goto_handler_slots"
.LASF834:
	.string	"CODE_FOR_pfminv2sf3"
.LASF827:
	.string	"CODE_FOR_addv2sf3"
.LASF1010:
	.string	"CODE_FOR_sltu"
.LASF337:
	.string	"rttree"
.LASF1017:
	.string	"CODE_FOR_suneq"
.LASF2004:
	.string	"reg_raw_mode"
.LASF791:
	.string	"CODE_FOR_mmx_uavgv8qi3"
.LASF803:
	.string	"CODE_FOR_umaxv8qi3"
.LASF524:
	.string	"inl_max_label_num"
.LASF693:
	.string	"CODE_FOR_cmpstrqi_nz_rex_1"
.LASF1251:
	.string	"need"
.LASF112:
	.string	"machine_mode"
.LASF264:
	.string	"SMIN"
.LASF2020:
	.string	"reload_insn_chain"
.LASF954:
	.string	"CODE_FOR_iordi3"
.LASF861:
	.string	"CODE_FOR_cmptf"
.LASF869:
	.string	"CODE_FOR_movstrictqi"
.LASF1451:
	.string	"pointer_depth"
.LASF2034:
	.string	"/home/yunqi/SPEC2006/benchspec/CPU2006/403.gcc/build/build_base_amd64-m64-gcc43-nn.0000"
.LASF1726:
	.string	"start_regno"
.LASF389:
	.string	"REG_NORETURN"
.LASF1206:
	.string	"pred_next"
.LASF1115:
	.string	"OTI_subv"
.LASF1044:
	.string	"CODE_FOR_call_pop"
.LASF984:
	.string	"CODE_FOR_ashlqi3"
.LASF1335:
	.string	"BUILT_IN_SAVEREGS"
.LASF262:
	.string	"LSHIFTRT"
.LASF1229:
	.string	"out_reg"
.LASF279:
	.string	"UNLE"
.LASF449:
	.string	"var_refs_queue"
.LASF1547:
	.string	"TI_V4SF_TYPE"
.LASF450:
	.string	"modified"
.LASF161:
	.string	"V8SFmode"
.LASF1018:
	.string	"CODE_FOR_sunge"
.LASF1042:
	.string	"CODE_FOR_tablejump"
.LASF1019:
	.string	"CODE_FOR_sungt"
.LASF357:
	.string	"index"
.LASF1637:
	.string	"order_regs_for_reload"
.LASF20:
	.string	"string"
.LASF786:
	.string	"CODE_FOR_mmx_iordi3"
.LASF8:
	.string	"integrated"
.LASF163:
	.string	"V16SFmode"
.LASF443:
	.string	"chunkfun"
.LASF732:
	.string	"CODE_FOR_vmaddv4sf3"
.LASF1427:
	.string	"complexity"
.LASF117:
	.string	"SImode"
.LASF534:
	.string	"needs_context"
.LASF377:
	.string	"REG_DEP_ANTI"
.LASF599:
	.string	"CODE_FOR_x86_fldcw_1"
.LASF21:
	.string	"complex"
.LASF510:
	.string	"x_parm_birth_insn"
.LASF1896:
	.string	"reg_reloaded_insn"
.LASF1739:
	.string	"r2_opnum"
.LASF1716:
	.string	"forbidden"
.LASF798:
	.string	"CODE_FOR_eqv4hi3"
.LASF1133:
	.string	"OTI_ashl"
.LASF268:
	.string	"PRE_DEC"
.LASF1286:
	.string	"realvaluetype"
.LASF1135:
	.string	"OTI_ashr"
.LASF1472:
	.string	"inline_flag"
.LASF628:
	.string	"CODE_FOR_absdf2_ifs"
.LASF1343:
	.string	"BUILT_IN_APPLY_ARGS"
.LASF1847:
	.string	"best_nregs"
.LASF2031:
	.string	"reload_spill_index"
.LASF1270:
	.string	"n_alternatives"
.LASF204:
	.string	"DEFINE_EXPAND"
.LASF868:
	.string	"CODE_FOR_reload_outqi"
.LASF1890:
	.string	"reg_has_output_reload"
.LASF751:
	.string	"CODE_FOR_maskncmpv4sf3"
.LASF690:
	.string	"CODE_FOR_rep_stosqi"
.LASF1968:
	.string	"regclass_map"
.LASF223:
	.string	"COND_EXEC"
.LASF509:
	.string	"x_trampoline_list"
.LASF550:
	.string	"x_dont_save_pending_sizes_p"
.LASF505:
	.string	"x_arg_pointer_save_area"
.LASF142:
	.string	"CTImode"
.LASF994:
	.string	"CODE_FOR_rotldi3"
.LASF745:
	.string	"CODE_FOR_sse_andti3"
.LASF1747:
	.string	"time2"
.LASF1707:
	.string	"previous_frame_pointer_needed"
.LASF228:
	.string	"UNSPEC_VOLATILE"
.LASF1934:
	.string	"reload_reg_used_in_inpaddr_addr"
.LASF621:
	.string	"CODE_FOR_negsf2_memory"
.LASF1457:
	.string	"maxval"
.LASF600:
	.string	"CODE_FOR_floathisf2"
.LASF1913:
	.string	"spilled_pseudos"
.LASF399:
	.string	"NOTE_INSN_LOOP_BEG"
.LASF328:
	.string	"rtunion_def"
.LASF860:
	.string	"CODE_FOR_cmpxf"
.LASF781:
	.string	"CODE_FOR_ussubv4hi3"
.LASF1507:
	.string	"TI_INTQI_TYPE"
.LASF408:
	.string	"NOTE_INSN_FUNCTION_BEG"
.LASF1180:
	.string	"live_length"
.LASF153:
	.string	"V8HImode"
.LASF1983:
	.string	"rtx_format"
.LASF842:
	.string	"CODE_FOR_pi2fw"
.LASF1026:
	.string	"CODE_FOR_bgtu"
.LASF1167:
	.string	"cptr"
.LASF1597:
	.string	"init_reload"
.LASF2019:
	.string	"num_not_at_initial_offset"
.LASF1155:
	.string	"OTI_tst"
.LASF737:
	.string	"CODE_FOR_divv4sf3"
.LASF1296:
	.string	"BUILT_IN_CONJ"
.LASF688:
	.string	"CODE_FOR_rep_stossi"
.LASF473:
	.string	"x_saveregs_value"
.LASF664:
	.string	"CODE_FOR_cossf2"
.LASF1585:
	.string	"previous_offset"
.LASF214:
	.string	"SET_ATTR_ALTERNATIVE"
.LASF332:
	.string	"rtstr"
.LASF949:
	.string	"CODE_FOR_testqi_ext_ccno_0"
.LASF96:
	.string	"_lock"
.LASF165:
	.string	"CCmode"
.LASF924:
	.string	"CODE_FOR_mulhi3"
.LASF886:
	.string	"CODE_FOR_truncxfsf2"
.LASF1693:
	.string	"base_insn"
.LASF1379:
	.string	"BUILT_IN_STDARG_START"
.LASF969:
	.string	"CODE_FOR_negxf2"
.LASF1675:
	.string	"new_size"
.LASF319:
	.string	"scale"
.LASF722:
	.string	"CODE_FOR_sse_movntdi"
.LASF1623:
	.string	"replace_pseudos_in_call_usage"
.LASF1187:
	.string	"num_elements"
.LASF1622:
	.string	"verbose_warned"
.LASF321:
	.string	"alias"
.LASF1141:
	.string	"OTI_umax"
.LASF1962:
	.string	"reg_offset"
.LASF1020:
	.string	"CODE_FOR_sunle"
.LASF1859:
	.string	"const_reg"
.LASF1305:
	.string	"BUILT_IN_BZERO"
.LASF1021:
	.string	"CODE_FOR_sunlt"
.LASF551:
	.string	"uses_const_pool"
.LASF822:
	.string	"CODE_FOR_mmx_punpcklwd"
.LASF1542:
	.string	"TI_UV8QI_TYPE"
.LASF836:
	.string	"CODE_FOR_femms"
.LASF1931:
	.string	"reload_reg_unavailable"
.LASF602:
	.string	"CODE_FOR_floathixf2"
.LASF708:
	.string	"CODE_FOR_movv4sf_internal"
.LASF428:
	.string	"GR_VIRTUAL_OUTGOING_ARGS"
.LASF167:
	.string	"CCGOCmode"
.LASF502:
	.string	"x_rtl_expr_chain"
.LASF463:
	.string	"x_last_linenum"
.LASF555:
	.string	"eh_status"
.LASF926:
	.string	"CODE_FOR_umulqihi3"
.LASF1841:
	.string	"alternative_reject"
.LASF1966:
	.string	"move2add_last_label_luid"
.LASF1282:
	.string	"val_rtx"
.LASF536:
	.string	"calls_longjmp"
.LASF84:
	.string	"_IO_buf_end"
.LASF1452:
	.string	"user_align"
.LASF1236:
	.string	"when_needed"
.LASF1836:
	.string	"dclass"
.LASF1077:
	.string	"CODE_FOR_cmpstrsi"
.LASF1292:
	.string	"BUILT_IN_FABSF"
.LASF68:
	.string	"short unsigned int"
.LASF540:
	.string	"has_nonlocal_goto"
.LASF1048:
	.string	"CODE_FOR_call_value"
.LASF1144:
	.string	"OTI_neg"
.LASF694:
	.string	"CODE_FOR_cmpstrqi_1"
.LASF1647:
	.string	"best_cost"
.LASF1233:
	.string	"secondary_out_reload"
.LASF1121:
	.string	"OTI_umul_widen"
.LASF662:
	.string	"CODE_FOR_sintf2"
.LASF1328:
	.string	"BUILT_IN_COS"
.LASF1064:
	.string	"CODE_FOR_strmovhi"
.LASF1085:
	.string	"CODE_FOR_movdfcc"
.LASF172:
	.string	"MAX_MACHINE_MODE"
.LASF205:
	.string	"DEFINE_DELAY"
.LASF2027:
	.string	"something_needs_operands_changed"
.LASF304:
	.string	"VEC_DUPLICATE"
.LASF79:
	.string	"_IO_read_base"
.LASF983:
	.string	"CODE_FOR_ashlhi3"
.LASF923:
	.string	"CODE_FOR_mulsi3"
.LASF762:
	.string	"CODE_FOR_cvtpi2ps"
.LASF1595:
	.string	"__len"
.LASF1032:
	.string	"CODE_FOR_bleu"
.LASF542:
	.string	"has_computed_jump"
.LASF1795:
	.string	"pseudo"
.LASF1786:
	.string	"real_old"
.LASF1893:
	.string	"reg_equiv_init"
.LASF471:
	.string	"x_inhibit_defer_pop"
.LASF714:
	.string	"CODE_FOR_movti_internal"
.LASF1762:
	.string	"group_class"
.LASF402:
	.string	"NOTE_INSN_LOOP_VTOP"
.LASF1389:
	.string	"volatile_flag"
.LASF1281:
	.string	"output_format"
.LASF669:
	.string	"CODE_FOR_strmovsi_1"
.LASF1334:
	.string	"BUILT_IN_COSL"
.LASF1464:
	.string	"lang_type"
.LASF1356:
	.string	"BUILT_IN_FPRINTF"
.LASF1499:
	.string	"live_range_rtl"
.LASF191:
	.string	"MATCH_SCRATCH"
.LASF968:
	.string	"CODE_FOR_negdf2"
.LASF1692:
	.string	"base"
.LASF1401:
	.string	"deprecated_flag"
.LASF1439:
	.string	"address"
.LASF1895:
	.string	"reg_reloaded_contents"
.LASF875:
	.string	"CODE_FOR_zero_extendhisi2"
.LASF719:
	.string	"CODE_FOR_mmx_maskmovq"
.LASF1338:
	.string	"BUILT_IN_ARGS_INFO"
.LASF1411:
	.string	"tree_int_cst"
.LASF927:
	.string	"CODE_FOR_mulqihi3"
.LASF1474:
	.string	"virtual_flag"
.LASF901:
	.string	"CODE_FOR_fix_truncsfhi2"
.LASF556:
	.string	"stmt_status"
.LASF134:
	.string	"SCmode"
.LASF1201:
	.string	"BITMAP_IOR_COMPL"
.LASF1625:
	.string	"noperands"
.LASF2006:
	.string	"n_basic_blocks"
.LASF1624:
	.string	"maybe_fix_stack_asms"
.LASF1759:
	.string	"save_reload_reg_rtx"
.LASF256:
	.string	"MULT"
.LASF1398:
	.string	"private_flag"
.LASF1878:
	.string	"move2add_note_store"
.LASF1649:
	.string	"not_usable"
.LASF1814:
	.string	"dead_insn"
.LASF883:
	.string	"CODE_FOR_extenddfxf2"
.LASF95:
	.string	"_shortbuf"
.LASF107:
	.string	"_sbuf"
.LASF467:
	.string	"regno_decl"
.LASF1943:
	.string	"reload_reg_used_at_all"
.LASF925:
	.string	"CODE_FOR_mulqi3"
.LASF1388:
	.string	"addressable_flag"
.LASF2033:
	.string	"reload1.c"
.LASF1412:
	.string	"tree_real_cst"
.LASF1929:
	.string	"reload_order"
.LASF982:
	.string	"CODE_FOR_ashlsi3"
.LASF1051:
	.string	"CODE_FOR_return"
.LASF421:
	.string	"GR_STACK_POINTER"
.LASF1738:
	.string	"r1_opnum"
.LASF1536:
	.string	"TI_PTRDIFF_TYPE"
.LASF210:
	.string	"ADDRESS"
.LASF299:
	.string	"CONSTANT_P_RTX"
.LASF1234:
	.string	"secondary_in_icode"
.LASF1988:
	.string	"reload_in_progress"
.LASF934:
	.string	"CODE_FOR_smuldi3_highpart"
.LASF51:
	.string	"FLOAT_INT_SSE_REGS"
.LASF37:
	.string	"NON_Q_REGS"
.LASF1109:
	.string	"optab"
.LASF775:
	.string	"CODE_FOR_subv8qi3"
.LASF571:
	.string	"CODE_FOR_pushdi2_rex64"
.LASF497:
	.string	"x_nonlocal_goto_stack_level"
.LASF1740:
	.string	"reload_reg_free_for_value_p"
.LASF625:
	.string	"CODE_FOR_abssf2_memory"
.LASF1554:
	.string	"TI_V2SF_TYPE"
.LASF67:
	.string	"unsigned char"
.LASF1593:
	.string	"store_ruid"
.LASF1455:
	.string	"symtab"
.LASF1023:
	.string	"CODE_FOR_beq"
.LASF963:
	.string	"CODE_FOR_negdi2"
.LASF2002:
	.string	"reg_renumber"
.LASF1569:
	.string	"itk_unsigned_long_long"
.LASF1788:
	.string	"secondary_reload"
.LASF932:
	.string	"CODE_FOR_umuldi3_highpart"
.LASF1741:
	.string	"reloadnum"
.LASF1268:
	.string	"n_operands"
.LASF235:
	.string	"TRAP_IF"
.LASF391:
	.string	"REG_SETJMP"
.LASF1140:
	.string	"OTI_umin"
.LASF511:
	.string	"x_last_parm_insn"
.LASF674:
	.string	"CODE_FOR_strmovqi_rex_1"
.LASF1367:
	.string	"BUILT_IN_ISLESSEQUAL"
.LASF1633:
	.string	"old_notes"
.LASF1169:
	.string	"sched"
.LASF1663:
	.string	"inherent_size"
.LASF1442:
	.string	"size_unit"
.LASF1648:
	.string	"best_reg"
.LASF630:
	.string	"CODE_FOR_x86_shld_1"
.LASF1639:
	.string	"used_by_pseudos2"
.LASF1258:
	.string	"OP_OUT"
.LASF36:
	.string	"Q_REGS"
.LASF370:
	.string	"REG_LIBCALL"
.LASF1720:
	.string	"old_next"
.LASF130:
	.string	"XFmode"
.LASF108:
	.string	"_pos"
.LASF1225:
	.string	"class"
.LASF1750:
	.string	"failed_reload"
.LASF1166:
	.string	"generic"
.LASF346:
	.string	"indx"
.LASF442:
	.string	"alignment_mask"
.LASF900:
	.string	"CODE_FOR_fix_truncdfhi2"
.LASF240:
	.string	"CONST_STRING"
.LASF364:
	.string	"REG_DEAD"
.LASF126:
	.string	"HFmode"
.LASF1029:
	.string	"CODE_FOR_bge"
.LASF1827:
	.string	"reload_cse_noop_set_p"
.LASF352:
	.string	"succ"
.LASF1571:
	.string	"_Bool"
.LASF1266:
	.string	"dup_loc"
.LASF1025:
	.string	"CODE_FOR_bgt"
.LASF1984:
	.string	"rtx_class"
.LASF358:
	.string	"loop_depth"
.LASF941:
	.string	"CODE_FOR_divtf3"
.LASF1395:
	.string	"nothrow_flag"
.LASF1173:
	.string	"first_uid"
.LASF1012:
	.string	"CODE_FOR_sgeu"
.LASF151:
	.string	"V4DImode"
.LASF1221:
	.string	"RELOAD_FOR_OPADDR_ADDR"
.LASF226:
	.string	"ASM_OPERANDS"
.LASF872:
	.string	"CODE_FOR_movdf"
.LASF724:
	.string	"CODE_FOR_sse_movlhps"
.LASF870:
	.string	"CODE_FOR_movdi"
.LASF1642:
	.string	"spilled_nregs"
.LASF1794:
	.string	"do_output_reload"
.LASF1142:
	.string	"OTI_mov"
.LASF1677:
	.string	"copied_vec"
.LASF537:
	.string	"calls_alloca"
.LASF1378:
	.string	"BUILT_IN_VARARGS_START"
.LASF1748:
	.string	"free_for_value_p"
.LASF1584:
	.string	"can_eliminate_previous"
.LASF681:
	.string	"CODE_FOR_strsetsi_1"
.LASF457:
	.string	"emit_status"
.LASF351:
	.string	"pred"
.LASF1066:
	.string	"CODE_FOR_strmovqi"
.LASF1830:
	.string	"part"
.LASF749:
	.string	"CODE_FOR_sse_clrv4sf"
.LASF1240:
	.string	"nongroup"
.LASF24:
	.string	"type"
.LASF1137:
	.string	"OTI_rotr"
.LASF423:
	.string	"GR_HARD_FRAME_POINTER"
.LASF71:
	.string	"__off_t"
.LASF1510:
	.string	"TI_INTDI_TYPE"
.LASF1391:
	.string	"unsigned_flag"
.LASF642:
	.string	"CODE_FOR_return_indirect_internal"
.LASF897:
	.string	"CODE_FOR_fix_truncsfsi2"
.LASF1755:
	.string	"pass"
.LASF997:
	.string	"CODE_FOR_rotlqi3"
.LASF896:
	.string	"CODE_FOR_fix_truncdfsi2"
.LASF464:
	.string	"x_last_filename"
.LASF973:
	.string	"CODE_FOR_absxf2"
.LASF814:
	.string	"CODE_FOR_mmx_ashldi3"
.LASF1682:
	.string	"replace"
.LASF1843:
	.string	"op_alt_regno"
.LASF583:
	.string	"CODE_FOR_extendhisi2"
.LASF1674:
	.string	"x_size"
.LASF606:
	.string	"CODE_FOR_floatdixf2"
.LASF164:
	.string	"BLKmode"
.LASF1880:
	.string	"base_reg"
.LASF500:
	.string	"x_save_expr_regs"
.LASF1969:
	.string	"mode_size"
.LASF1691:
	.string	"done"
.LASF124:
	.string	"PDImode"
.LASF1471:
	.string	"regdecl_flag"
.LASF1616:
	.string	"to_spill"
.LASF529:
	.string	"language"
.LASF14:
	.string	"elem"
.LASF372:
	.string	"REG_NO_CONFLICT"
.LASF1062:
	.string	"CODE_FOR_strmovsi"
.LASF1523:
	.string	"TI_BITSIZE_ZERO"
.LASF1940:
	.string	"reload_reg_used_in_op_addr_reload"
.LASF1210:
	.string	"probability"
.LASF441:
	.string	"temp"
.LASF1128:
	.string	"OTI_umod"
.LASF1561:
	.string	"itk_unsigned_char"
.LASF35:
	.string	"AD_REGS"
.LASF193:
	.string	"MATCH_OPERATOR"
.LASF506:
	.string	"x_clobber_return_insn"
.LASF1942:
	.string	"reload_reg_used_in_other_addr"
.LASF1600:
	.string	"indx_"
.LASF2008:
	.string	"basic_block_for_insn"
.LASF437:
	.string	"chunk"
.LASF1297:
	.string	"BUILT_IN_CONJF"
.LASF201:
	.string	"DEFINE_INSN_AND_SPLIT"
.LASF1178:
	.string	"freq"
.LASF1917:
	.string	"reg_eliminate"
.LASF1298:
	.string	"BUILT_IN_CONJL"
.LASF1311:
	.string	"BUILT_IN_MEMCMP"
.LASF865:
	.string	"CODE_FOR_movhi"
.LASF1575:
	.string	"USIZETYPE"
.LASF774:
	.string	"CODE_FOR_usaddv4hi3"
.LASF1869:
	.string	"cval"
.LASF1027:
	.string	"CODE_FOR_blt"
.LASF944:
	.string	"CODE_FOR_divmoddi4"
.LASF538:
	.string	"calls_eh_return"
.LASF308:
	.string	"US_MINUS"
.LASF1228:
	.string	"in_reg"
.LASF1981:
	.string	"reg_class_superunion"
.LASF1370:
	.string	"BUILT_IN_UNWIND_INIT"
.LASF1186:
	.string	"varray_head_tag"
.LASF1092:
	.string	"CODE_FOR_pro_epilogue_adjust_stack"
.LASF1396:
	.string	"static_flag"
.LASF1372:
	.string	"BUILT_IN_DWARF_FP_REGNUM"
.LASF1779:
	.string	"reloadreg"
.LASF1119:
	.string	"OTI_umul_highpart"
.LASF671:
	.string	"CODE_FOR_strmovhi_1"
.LASF340:
	.string	"value"
.LASF106:
	.string	"_next"
.LASF515:
	.string	"x_temp_slot_level"
.LASF490:
	.string	"internal_arg_pointer"
.LASF703:
	.string	"CODE_FOR_sse_movdfcc"
.LASF503:
	.string	"x_tail_recursion_label"
.LASF829:
	.string	"CODE_FOR_subrv2sf3"
.LASF1897:
	.string	"reg_reloaded_valid"
.LASF1792:
	.string	"do_input_reload"
.LASF528:
	.string	"preferred_stack_boundary"
.LASF1024:
	.string	"CODE_FOR_bne"
.LASF1125:
	.string	"OTI_udiv"
.LASF39:
	.string	"LEGACY_REGS"
.LASF1055:
	.string	"CODE_FOR_eh_return"
.LASF1117:
	.string	"OTI_smulv"
.LASF1520:
	.string	"TI_NULL_POINTER"
.LASF388:
	.string	"REG_MAYBE_DEAD"
.LASF613:
	.string	"CODE_FOR_subsi3_carry_zext"
.LASF792:
	.string	"CODE_FOR_mmx_uavgv4hi3"
.LASF2028:
	.string	"reload_inherited"
.LASF1300:
	.string	"BUILT_IN_CREALF"
.LASF148:
	.string	"V4QImode"
.LASF1563:
	.string	"itk_unsigned_short"
.LASF1301:
	.string	"BUILT_IN_CREALL"
.LASF972:
	.string	"CODE_FOR_absdf2"
.LASF1999:
	.string	"reload_out_optab"
.LASF956:
	.string	"CODE_FOR_iorhi3"
.LASF1204:
	.string	"gcov_type"
.LASF1310:
	.string	"BUILT_IN_MEMCPY"
.LASF413:
	.string	"NOTE_INSN_RANGE_END"
.LASF331:
	.string	"rtuint"
.LASF492:
	.string	"hard_reg_initial_vals"
.LASF905:
	.string	"CODE_FOR_floatdidf2"
.LASF985:
	.string	"CODE_FOR_ashrdi3"
.LASF825:
	.string	"CODE_FOR_ldmxcsr"
.LASF270:
	.string	"POST_DEC"
.LASF1858:
	.string	"plus"
.LASF1903:
	.string	"spill_reg_order"
.LASF359:
	.string	"count"
.LASF189:
	.string	"INSN_LIST"
.LASF1703:
	.string	"set_offsets_for_label"
.LASF1132:
	.string	"OTI_xor"
.LASF425:
	.string	"GR_VIRTUAL_INCOMING_ARGS"
.LASF1744:
	.string	"check_earlyclobber"
.LASF1721:
	.string	"oldpat"
.LASF1916:
	.string	"insns_need_reload"
.LASF898:
	.string	"CODE_FOR_fix_truncxfhi2"
.LASF1248:
	.string	"dead_or_set"
.LASF1522:
	.string	"TI_SIZE_ONE"
.LASF374:
	.string	"REG_CC_SETTER"
.LASF385:
	.string	"REG_EH_CONTEXT"
.LASF1434:
	.string	"subblocks"
.LASF2030:
	.string	"reload_override_in"
.LASF1767:
	.string	"last_reg"
.LASF1550:
	.string	"TI_V8HI_TYPE"
.LASF420:
	.string	"GR_CC0"
.LASF484:
	.string	"args_size"
.LASF31:
	.string	"CREG"
.LASF92:
	.string	"_old_offset"
.LASF1805:
	.string	"gen_reload"
.LASF1052:
	.string	"CODE_FOR_prologue"
.LASF405:
	.string	"NOTE_INSN_PROLOGUE_END"
.LASF1057:
	.string	"CODE_FOR_sqrtsf2"
.LASF448:
	.string	"alloc_failed"
.LASF597:
	.string	"CODE_FOR_fix_trunchi_memory"
.LASF1473:
	.string	"bit_field_flag"
.LASF1710:
	.string	"spill_hard_reg"
.LASF1705:
	.string	"update_eliminables"
.LASF639:
	.string	"CODE_FOR_blockage"
.LASF1993:
	.string	"flag_stack_check"
.LASF1239:
	.string	"secondary_p"
.LASF531:
	.string	"returns_struct"
.LASF439:
	.string	"next_free"
.LASF280:
	.string	"UNLT"
.LASF675:
	.string	"CODE_FOR_rep_movdi_rex64"
.LASF1394:
	.string	"used_flag"
.LASF1873:
	.string	"new_src"
.LASF1040:
	.string	"CODE_FOR_bltgt"
.LASF1470:
	.string	"nonlocal_flag"
.LASF121:
	.string	"PQImode"
.LASF882:
	.string	"CODE_FOR_extendsftf2"
.LASF1252:
	.string	"need_reload"
.LASF1865:
	.string	"end_reg"
.LASF2026:
	.string	"reload_firstobj"
.LASF1441:
	.string	"values"
.LASF1712:
	.string	"ior_hard_reg_set"
.LASF1532:
	.string	"TI_LONG_DOUBLE_TYPE"
.LASF15:
	.string	"tree"
.LASF1768:
	.string	"need_mode"
.LASF996:
	.string	"CODE_FOR_rotlhi3"
.LASF1586:
	.string	"ref_outside_mem"
.LASF955:
	.string	"CODE_FOR_iorsi3"
.LASF56:
	.string	"nregs"
.LASF294:
	.string	"LO_SUM"
.LASF206:
	.string	"DEFINE_FUNCTION_UNIT"
.LASF1611:
	.string	"real_at_ptr"
.LASF434:
	.string	"contents"
.LASF375:
	.string	"REG_CC_USER"
.LASF807:
	.string	"CODE_FOR_ashrv4hi3"
.LASF1448:
	.string	"transparent_union_flag"
.LASF1876:
	.string	"base_offset"
.LASF1123:
	.string	"OTI_sdivv"
.LASF342:
	.string	"addr_list"
.LASF87:
	.string	"_IO_save_end"
.LASF1454:
	.string	"reference_to"
.LASF285:
	.string	"FLOAT_EXTEND"
.LASF1987:
	.string	"reload_completed"
.LASF186:
	.string	"UNKNOWN"
.LASF1158:
	.string	"OTI_cmov"
.LASF171:
	.string	"CCFPUmode"
.LASF1751:
	.string	"set_reload_reg"
.LASF894:
	.string	"CODE_FOR_fix_truncxfsi2"
.LASF611:
	.string	"CODE_FOR_subdi3_carry_rex64"
.LASF1302:
	.string	"BUILT_IN_CIMAG"
.LASF1185:
	.string	"varray_data"
.LASF1358:
	.string	"BUILT_IN_PUTS_UNLOCKED"
.LASF1531:
	.string	"TI_DOUBLE_TYPE"
.LASF1899:
	.string	"n_spills"
.LASF768:
	.string	"CODE_FOR_addv8qi3"
.LASF17:
	.string	"int_cst"
.LASF683:
	.string	"CODE_FOR_strsethi_1"
.LASF1909:
	.string	"last_spill_reg"
.LASF1745:
	.string	"copy"
.LASF1415:
	.string	"pointer"
.LASF966:
	.string	"CODE_FOR_negqi2"
.LASF1928:
	.string	"spill_add_cost"
.LASF1256:
	.string	"op_type"
.LASF1718:
	.string	"reload_as_needed"
.LASF417:
	.string	"NOTE_INSN_MAX"
.LASF1799:
	.string	"part_reaches_end"
.LASF1667:
	.string	"mark_home_live"
.LASF840:
	.string	"CODE_FOR_pfnacc"
.LASF1544:
	.string	"TI_UV2SI_TYPE"
.LASF1570:
	.string	"itk_none"
.LASF893:
	.string	"CODE_FOR_fix_truncsfdi2"
.LASF867:
	.string	"CODE_FOR_movqi"
.LASF1927:
	.string	"spill_cost"
.LASF1776:
	.string	"max_input_address_opnum"
.LASF1706:
	.string	"pset"
.LASF1381:
	.string	"BUILT_IN_VA_COPY"
.LASF519:
	.string	"inlinable"
.LASF1526:
	.string	"TI_COMPLEX_INTEGER_TYPE"
.LASF1246:
	.string	"insn"
.LASF939:
	.string	"CODE_FOR_mulsf3"
.LASF1588:
	.string	"to_rtx"
.LASF1444:
	.string	"precision"
.LASF504:
	.string	"x_tail_recursion_reentry"
.LASF407:
	.string	"NOTE_INSN_DELETED_LABEL"
.LASF1581:
	.string	"from"
.LASF995:
	.string	"CODE_FOR_rotlsi3"
.LASF689:
	.string	"CODE_FOR_rep_stossi_rex64"
.LASF1765:
	.string	"byte"
.LASF1279:
	.string	"output"
.LASF1912:
	.string	"spill_stack_slot_width"
.LASF890:
	.string	"CODE_FOR_fix_truncxfdi2"
.LASF1330:
	.string	"BUILT_IN_SINF"
.LASF1796:
	.string	"pseudo_no"
.LASF1824:
	.string	"constraint_accepts_reg_p"
.LASF1333:
	.string	"BUILT_IN_SINL"
.LASF1161:
	.string	"OTI_MAX"
.LASF579:
	.string	"CODE_FOR_zero_extendqidi2"
.LASF1481:
	.string	"static_dtor_flag"
.LASF782:
	.string	"CODE_FOR_mulv4hi3"
.LASF871:
	.string	"CODE_FOR_movsf"
.LASF864:
	.string	"CODE_FOR_movsi"
.LASF1428:
	.string	"operands"
.LASF752:
	.string	"CODE_FOR_vmmaskcmpv4sf3"
.LASF1224:
	.string	"reload"
.LASF990:
	.string	"CODE_FOR_lshrdi3"
.LASF661:
	.string	"CODE_FOR_sinxf2"
.LASF763:
	.string	"CODE_FOR_cvtps2pi"
.LASF568:
	.string	"CODE_FOR_x86_sahf_1"
.LASF230:
	.string	"ADDR_DIFF_VEC"
.LASF654:
	.string	"CODE_FOR_sqrtdf2_1"
.LASF1985:
	.string	"const_int_rtx"
.LASF1887:
	.string	"inserted"
.LASF246:
	.string	"CONCAT"
.LASF327:
	.string	"tree_node"
.LASF1353:
	.string	"BUILT_IN_FPUTC"
.LASF522:
	.string	"original_decl_initial"
.LASF874:
	.string	"CODE_FOR_movtf"
.LASF778:
	.string	"CODE_FOR_sssubv8qi3"
.LASF1097:
	.string	"CODE_FOR_movti"
.LASF1935:
	.string	"reload_reg_used_in_output_addr"
.LASF1560:
	.string	"itk_signed_char"
.LASF1354:
	.string	"BUILT_IN_FPUTS"
.LASF290:
	.string	"SQRT"
.LASF563:
	.string	"CODE_FOR_cmpdi_ccno_1_rex64"
.LASF141:
	.string	"CDImode"
.LASF962:
	.string	"CODE_FOR_xorqi_cc_ext_1"
.LASF1482:
	.string	"artificial_flag"
.LASF9:
	.string	"frame_related"
.LASF686:
	.string	"CODE_FOR_strsetqi_rex_1"
.LASF1558:
	.string	"integer_type_kind"
.LASF605:
	.string	"CODE_FOR_floatsitf2"
.LASF1530:
	.string	"TI_FLOAT_TYPE"
.LASF1267:
	.string	"dup_num"
.LASF1288:
	.string	"BUILT_IN_ALLOCA"
.LASF259:
	.string	"ASHIFT"
.LASF455:
	.string	"last"
.LASF70:
	.string	"short int"
.LASF1635:
	.string	"operands_changed"
.LASF587:
	.string	"CODE_FOR_truncdfsf2_sse_only"
.LASF369:
	.string	"REG_RETVAL"
.LASF243:
	.string	"SCRATCH"
.LASF1713:
	.string	"set1"
.LASF816:
	.string	"CODE_FOR_mmx_packssdw"
.LASF286:
	.string	"FLOAT_TRUNCATE"
.LASF1845:
	.string	"best"
.LASF1757:
	.string	"regnum"
.LASF950:
	.string	"CODE_FOR_anddi3"
.LASF1932:
	.string	"reload_reg_used"
.LASF764:
	.string	"CODE_FOR_cvttps2pi"
.LASF1936:
	.string	"reload_reg_used_in_outaddr_addr"
.LASF1717:
	.string	"scan_paradoxical_subregs"
.LASF863:
	.string	"CODE_FOR_cmpsf"
.LASF699:
	.string	"CODE_FOR_x86_movsicc_0_m1"
.LASF1263:
	.string	"constraints"
.LASF1685:
	.string	"old_set"
.LASF1107:
	.string	"CODE_FOR_nothing"
.LASF1754:
	.string	"last_reload"
.LASF178:
	.string	"MODE_CC"
.LASF1851:
	.string	"last_index_reg"
.LASF398:
	.string	"NOTE_INSN_BLOCK_END"
.LASF1719:
	.string	"live_known"
.LASF1078:
	.string	"CODE_FOR_cmpintqi"
.LASF1449:
	.string	"packed_flag"
.LASF919:
	.string	"CODE_FOR_subtf3"
.LASF1197:
	.string	"BITMAP_AND"
.LASF785:
	.string	"CODE_FOR_mmx_pmaddwd"
.LASF1287:
	.string	"built_in_function"
.LASF1494:
	.string	"arguments"
.LASF1856:
	.string	"label_live"
.LASF1590:
	.string	"reg_use"
.LASF810:
	.string	"CODE_FOR_lshrv2si3"
.LASF88:
	.string	"_markers"
.LASF329:
	.string	"rtwint"
.LASF513:
	.string	"x_parm_reg_stack_loc"
.LASF1746:
	.string	"other_input"
.LASF90:
	.string	"_fileno"
.LASF1636:
	.string	"count_pseudo"
.LASF1259:
	.string	"OP_INOUT"
.LASF873:
	.string	"CODE_FOR_movxf"
.LASF22:
	.string	"identifier"
.LASF1214:
	.string	"RELOAD_FOR_OUTPUT"
.LASF659:
	.string	"CODE_FOR_sindf2"
.LASF987:
	.string	"CODE_FOR_ashrsi3"
.LASF776:
	.string	"CODE_FOR_subv4hi3"
.LASF147:
	.string	"V2DImode"
.LASF1708:
	.string	"new_to"
.LASF1545:
	.string	"TI_UV2SF_TYPE"
.LASF1205:
	.string	"edge_def"
.LASF507:
	.string	"x_frame_offset"
.LASF733:
	.string	"CODE_FOR_subv4sf3"
.LASF1424:
	.string	"purpose"
.LASF965:
	.string	"CODE_FOR_neghi2"
.LASF1986:
	.string	"global_rtl"
.LASF645:
	.string	"CODE_FOR_prologue_get_pc"
.LASF1218:
	.string	"RELOAD_FOR_OUTPUT_ADDRESS"
.LASF1362:
	.string	"BUILT_IN_FWRITE_UNLOCKED"
.LASF789:
	.string	"CODE_FOR_mmx_anddi3"
.LASF1209:
	.string	"insns"
.LASF1015:
	.string	"CODE_FOR_sunordered"
.LASF1402:
	.string	"lang_flag_0"
.LASF1065:
	.string	"CODE_FOR_strmovhi_rex64"
.LASF967:
	.string	"CODE_FOR_negsf2"
.LASF1406:
	.string	"lang_flag_4"
.LASF1426:
	.string	"tree_exp"
.LASF1533:
	.string	"TI_VOID_TYPE"
.LASF1803:
	.string	"src_regno"
.LASF1431:
	.string	"abstract_flag"
.LASF1699:
	.string	"mark_not_eliminable"
.LASF1080:
	.string	"CODE_FOR_strlendi"
.LASF1787:
	.string	"second_reloadreg"
.LASF1689:
	.string	"orig_operand"
.LASF575:
	.string	"CODE_FOR_zero_extendhisi2_and"
.LASF295:
	.string	"RANGE_INFO"
.LASF64:
	.string	"long int"
.LASF260:
	.string	"ROTATE"
.LASF1352:
	.string	"BUILT_IN_PRINTF"
.LASF1149:
	.string	"OTI_ffs"
.LASF935:
	.string	"CODE_FOR_smulsi3_highpart"
.LASF547:
	.string	"varargs"
.LASF1529:
	.string	"TI_COMPLEX_LONG_DOUBLE_TYPE"
.LASF1299:
	.string	"BUILT_IN_CREAL"
.LASF1743:
	.string	"time1"
.LASF220:
	.string	"BARRIER"
.LASF1736:
	.string	"r1_type"
.LASF1126:
	.string	"OTI_udivmod"
.LASF989:
	.string	"CODE_FOR_ashrqi3"
.LASF58:
	.string	"sse_words"
.LASF582:
	.string	"CODE_FOR_extendqidi2"
.LASF1255:
	.string	"is_caller_save_insn"
.LASF940:
	.string	"CODE_FOR_divxf3"
.LASF395:
	.string	"NOTE_INSN_BIAS"
.LASF1094:
	.string	"CODE_FOR_allocate_stack"
.LASF1217:
	.string	"RELOAD_FOR_INPADDR_ADDRESS"
.LASF1377:
	.string	"BUILT_IN_EH_RETURN_DATA_REGNO"
.LASF170:
	.string	"CCFPmode"
.LASF245:
	.string	"STRICT_LOW_PART"
.LASF138:
	.string	"CQImode"
.LASF1679:
	.string	"elimination_effects"
.LASF1735:
	.string	"reloads_conflict"
.LASF429:
	.string	"GR_VIRTUAL_CFA"
.LASF588:
	.string	"CODE_FOR_fix_truncdi_nomemory"
.LASF162:
	.string	"V8DFmode"
.LASF549:
	.string	"x_whole_function_mode_p"
.LASF1849:
	.string	"reload_combine"
.LASF1478:
	.string	"defer_output"
.LASF1831:
	.string	"reload_cse_regs_1"
.LASF730:
	.string	"CODE_FOR_sse_shufps"
.LASF119:
	.string	"TImode"
.LASF1063:
	.string	"CODE_FOR_strmovsi_rex64"
.LASF698:
	.string	"CODE_FOR_x86_movdicc_0_m1_rex64"
.LASF1687:
	.string	"any_changes"
.LASF677:
	.string	"CODE_FOR_rep_movsi_rex64"
.LASF1332:
	.string	"BUILT_IN_SQRTL"
.LASF1885:
	.string	"eh_note"
.LASF345:
	.string	"current"
.LASF835:
	.string	"CODE_FOR_mulv2sf3"
.LASF378:
	.string	"REG_DEP_OUTPUT"
.LASF566:
	.string	"CODE_FOR_cmpqi_ext_3_insn_rex64"
.LASF80:
	.string	"_IO_write_base"
.LASF118:
	.string	"DImode"
.LASF41:
	.string	"FP_TOP_REG"
.LASF998:
	.string	"CODE_FOR_rotrdi3"
.LASF301:
	.string	"VEC_MERGE"
.LASF300:
	.string	"CALL_PLACEHOLDER"
.LASF1695:
	.string	"prev_set"
.LASF1970:
	.string	"mode_bitsize"
.LASF1546:
	.string	"TI_UV16QI_TYPE"
.LASF1749:
	.string	"conflicts_with_override"
.LASF27:
	.string	"sizetype"
.LASF1898:
	.string	"reg_reloaded_dead"
.LASF700:
	.string	"CODE_FOR_pro_epilogue_adjust_stack_rex64"
.LASF1350:
	.string	"BUILT_IN_PUTCHAR"
.LASF1580:
	.string	"elim_table"
.LASF1948:
	.string	"other_input_reload_insns"
.LASF1793:
	.string	"expect_occurrences"
.LASF2029:
	.string	"reload_inheritance_insn"
.LASF487:
	.string	"arg_offset_rtx"
.LASF1601:
	.string	"bit_num_"
.LASF1557:
	.string	"TI_MAX"
.LASF1276:
	.string	"strict_low"
.LASF1284:
	.string	"setting_insn"
.LASF159:
	.string	"V4SFmode"
.LASF812:
	.string	"CODE_FOR_ashlv4hi3"
.LASF200:
	.string	"DEFINE_SPLIT"
.LASF350:
	.string	"end_tree"
.LASF224:
	.string	"PARALLEL"
.LASF725:
	.string	"CODE_FOR_sse_movhps"
.LASF1974:
	.string	"fixed_reg_set"
.LASF1165:
	.string	"uhint"
.LASF830:
	.string	"CODE_FOR_gtv2sf3"
.LASF43:
	.string	"FLOAT_REGS"
.LASF433:
	.string	"prev"
.LASF392:
	.string	"REG_ALWAYS_RETURN"
.LASF1680:
	.string	"check_eliminable_occurrences"
.LASF1618:
	.string	"equiv_insn"
.LASF263:
	.string	"ROTATERT"
.LASF229:
	.string	"ADDR_VEC"
.LASF0:
	.string	"code"
.LASF1797:
	.string	"last_regno"
.LASF736:
	.string	"CODE_FOR_vmmulv4sf3"
.LASF947:
	.string	"CODE_FOR_testsi_ccno_1"
.LASF438:
	.string	"object_base"
.LASF367:
	.string	"REG_EQUAL"
.LASF1486:
	.string	"comdat_flag"
.LASF309:
	.string	"SS_TRUNCATE"
.LASF1070:
	.string	"CODE_FOR_strsetdi_rex64"
.LASF144:
	.string	"V2QImode"
.LASF486:
	.string	"outgoing_args_size"
.LASF942:
	.string	"CODE_FOR_divdf3"
.LASF616:
	.string	"CODE_FOR_divmodhi4"
.LASF1809:
	.string	"n_occurrences"
.LASF12:
	.string	"rtvec_def"
.LASF1360:
	.string	"BUILT_IN_FPUTC_UNLOCKED"
.LASF1760:
	.string	"choose_reload_regs"
.LASF2021:
	.string	"which_alternative"
.LASF447:
	.string	"maybe_empty_object"
.LASF1528:
	.string	"TI_COMPLEX_DOUBLE_TYPE"
.LASF1260:
	.string	"recog_data"
.LASF1461:
	.string	"context"
.LASF516:
	.string	"x_var_temp_slot_level"
.LASF396:
	.string	"NOTE_INSN_DELETED"
.LASF1823:
	.string	"real_in"
.LASF1811:
	.string	"substed"
.LASF567:
	.string	"CODE_FOR_x86_fnstsw_1"
.LASF1850:
	.string	"first_index_reg"
.LASF1702:
	.string	"set_initial_label_offsets"
.LASF692:
	.string	"CODE_FOR_cmpstrqi_nz_1"
.LASF1290:
	.string	"BUILT_IN_LABS"
.LASF1644:
	.string	"find_reg"
.LASF314:
	.string	"min_after_vec"
.LASF1753:
	.string	"allocate_reload_reg"
.LASF93:
	.string	"_cur_column"
.LASF267:
	.string	"UMAX"
.LASF1524:
	.string	"TI_BITSIZE_ONE"
.LASF545:
	.string	"profile"
.LASF1973:
	.string	"fixed_regs"
.LASF565:
	.string	"CODE_FOR_cmpqi_ext_3_insn"
.LASF452:
	.string	"unsignedp"
.LASF804:
	.string	"CODE_FOR_smaxv4hi3"
.LASF696:
	.string	"CODE_FOR_strlenqi_1"
.LASF1421:
	.string	"ht_identifier"
.LASF544:
	.string	"instrument_entry_exit"
.LASF802:
	.string	"CODE_FOR_gtv2si3"
.LASF758:
	.string	"CODE_FOR_smaxv4sf3"
.LASF1035:
	.string	"CODE_FOR_buneq"
.LASF190:
	.string	"MATCH_OPERAND"
.LASF755:
	.string	"CODE_FOR_sse_ucomi"
.LASF1771:
	.string	"check_reg"
.LASF287:
	.string	"FLOAT"
.LASF523:
	.string	"inl_last_parm_insn"
.LASF390:
	.string	"REG_NON_LOCAL_GOTO"
.LASF1808:
	.string	"output_reload_insn"
.LASF11:
	.string	"rtx_def"
.LASF149:
	.string	"V4HImode"
.LASF1091:
	.string	"CODE_FOR_maxdf3"
.LASF1955:
	.string	"other_operand_reload_insns"
.LASF530:
	.string	"epilogue_delay_list"
.LASF993:
	.string	"CODE_FOR_lshrqi3"
.LASF393:
	.string	"REG_VTABLE_REF"
.LASF1540:
	.string	"TI_UV4SI_TYPE"
.LASF1307:
	.string	"BUILT_IN_FFS"
.LASF2025:
	.string	"reload_startobj"
.LASF1975:
	.string	"call_used_regs"
.LASF988:
	.string	"CODE_FOR_ashrhi3"
.LASF783:
	.string	"CODE_FOR_smulv4hi3_highpart"
.LASF1724:
	.string	"mark_reload_reg_in_use"
.LASF612:
	.string	"CODE_FOR_subsi3_carry"
.LASF1907:
	.string	"pseudo_previous_regs"
.LASF945:
	.string	"CODE_FOR_divmodsi4"
.LASF1060:
	.string	"CODE_FOR_movstrdi"
.LASF1516:
	.string	"TI_UINTTI_TYPE"
.LASF323:
	.string	"offset"
.LASF1690:
	.string	"failed"
.LASF1612:
	.string	"note"
.LASF406:
	.string	"NOTE_INSN_EPILOGUE_BEG"
.LASF1559:
	.string	"itk_char"
.LASF313:
	.string	"base_after_vec"
.LASF1661:
	.string	"alter_reg"
.LASF254:
	.string	"PLUS"
.LASF472:
	.string	"x_stack_pointer_delta"
.LASF2014:
	.string	"reload_earlyclobbers"
.LASF891:
	.string	"CODE_FOR_fix_trunctfdi2"
.LASF1037:
	.string	"CODE_FOR_bungt"
.LASF1143:
	.string	"OTI_movstrict"
.LASF1591:
	.string	"usep"
.LASF115:
	.string	"QImode"
.LASF1438:
	.string	"fragment_chain"
.LASF759:
	.string	"CODE_FOR_vmsmaxv4sf3"
.LASF1923:
	.string	"num_labels"
.LASF1285:
	.string	"cselib_val"
.LASF1911:
	.string	"spill_stack_slot"
.LASF1385:
	.string	"chain"
.LASF1380:
	.string	"BUILT_IN_VA_END"
.LASF1632:
	.string	"old_code"
.LASF1243:
	.string	"groups"
.LASF1045:
	.string	"CODE_FOR_call"
.LASF1810:
	.string	"n_inherited"
.LASF771:
	.string	"CODE_FOR_ssaddv8qi3"
.LASF637:
	.string	"CODE_FOR_jump"
.LASF1660:
	.string	"prev_dest"
.LASF195:
	.string	"MATCH_OP_DUP"
.LASF1568:
	.string	"itk_long_long"
.LASF72:
	.string	"__off64_t"
.LASF1610:
	.string	"real_known_ptr"
.LASF1953:
	.string	"outaddr_address_reload_insns"
.LASF444:
	.string	"freefun"
.LASF652:
	.string	"CODE_FOR_sqrtsf2_1_sse_only"
.LASF475:
	.string	"x_forced_labels"
.LASF1668:
	.string	"set_label_offsets"
.LASF1627:
	.string	"allowed"
.LASF1374:
	.string	"BUILT_IN_FROB_RETURN_ADDR"
.LASF622:
	.string	"CODE_FOR_negsf2_ifs"
.LASF953:
	.string	"CODE_FOR_andqi3"
.LASF122:
	.string	"PHImode"
.LASF881:
	.string	"CODE_FOR_extendsfxf2"
.LASF137:
	.string	"TCmode"
.LASF69:
	.string	"signed char"
.LASF520:
	.string	"no_debugging_symbols"
.LASF1492:
	.string	"uninlinable"
.LASF1033:
	.string	"CODE_FOR_bunordered"
.LASF355:
	.string	"global_live_at_start"
.LASF48:
	.string	"FLOAT_SSE_REGS"
.LASF971:
	.string	"CODE_FOR_abssf2"
.LASF1274:
	.string	"predicate"
.LASF1223:
	.string	"RELOAD_FOR_OTHER_ADDRESS"
.LASF135:
	.string	"DCmode"
.LASF1866:
	.string	"reload_combine_note_store"
.LASF127:
	.string	"TQFmode"
.LASF1235:
	.string	"secondary_out_icode"
.LASF1181:
	.string	"calls_crossed"
.LASF183:
	.string	"MAX_MODE_CLASS"
.LASF903:
	.string	"CODE_FOR_floatdisf2"
.LASF632:
	.string	"CODE_FOR_ashrdi3_1"
.LASF60:
	.string	"sse_regno"
.LASF1430:
	.string	"handler_block_flag"
.LASF1349:
	.string	"BUILT_IN_PREFETCH"
.LASF1399:
	.string	"protected_flag"
.LASF1621:
	.string	"pnote"
.LASF1110:
	.string	"handlers"
.LASF1990:
	.string	"flag_expensive_optimizations"
.LASF4:
	.string	"unchanging"
.LASF318:
	.string	"offset_unsigned"
.LASF1227:
	.string	"outmode"
.LASF929:
	.string	"CODE_FOR_umulsidi3"
.LASF1513:
	.string	"TI_UINTHI_TYPE"
.LASF1089:
	.string	"CODE_FOR_mindf3"
.LASF2009:
	.string	"reg_equiv_constant"
.LASF1727:
	.string	"end_regno"
.LASF1761:
	.string	"max_group_size"
.LASF539:
	.string	"has_nonlocal_label"
.LASF1582:
	.string	"initial_offset"
.LASF824:
	.string	"CODE_FOR_emms"
.LASF1659:
	.string	"delete_dead_insn"
.LASF1728:
	.string	"check_opnum"
.LASF1384:
	.string	"tree_common"
.LASF1525:
	.string	"TI_BITSIZE_UNIT"
.LASF1908:
	.string	"pseudo_forbidden_regs"
.LASF366:
	.string	"REG_EQUIV"
.LASF1653:
	.string	"this_nregs"
.LASF769:
	.string	"CODE_FOR_addv4hi3"
.LASF1291:
	.string	"BUILT_IN_FABS"
.LASF1005:
	.string	"CODE_FOR_seq"
.LASF1008:
	.string	"CODE_FOR_sgtu"
.LASF394:
	.string	"insn_note"
.LASF633:
	.string	"CODE_FOR_x86_shrd_1"
.LASF887:
	.string	"CODE_FOR_trunctfsf2"
.LASF731:
	.string	"CODE_FOR_addv4sf3"
.LASF648:
	.string	"CODE_FOR_leave"
.LASF381:
	.string	"REG_NOALIAS"
.LASF718:
	.string	"CODE_FOR_mmx_pmovmskb"
.LASF815:
	.string	"CODE_FOR_mmx_packsswb"
.LASF744:
	.string	"CODE_FOR_vmsqrtv4sf2"
.LASF608:
	.string	"CODE_FOR_addqi3_cc"
.LASF424:
	.string	"GR_ARG_POINTER"
.LASF1079:
	.string	"CODE_FOR_strlensi"
.LASF1791:
	.string	"s_reg"
.LASF1038:
	.string	"CODE_FOR_bunle"
.LASF1039:
	.string	"CODE_FOR_bunlt"
.LASF188:
	.string	"EXPR_LIST"
.LASF266:
	.string	"UMIN"
.LASF446:
	.string	"use_extra_arg"
.LASF1651:
	.string	"other"
.LASF1336:
	.string	"BUILT_IN_CLASSIFY_TYPE"
.LASF1905:
	.string	"bad_spill_regs_global"
.LASF217:
	.string	"INSN"
.LASF1967:
	.string	"target_flags"
.LASF1844:
	.string	"alternative_order"
.LASF1011:
	.string	"CODE_FOR_sge"
.LASF348:
	.string	"head"
.LASF577:
	.string	"CODE_FOR_zero_extendsidi2_rex64"
.LASF1086:
	.string	"CODE_FOR_movxfcc"
.LASF1007:
	.string	"CODE_FOR_sgt"
.LASF1376:
	.string	"BUILT_IN_EH_RETURN"
.LASF876:
	.string	"CODE_FOR_zero_extendqihi2"
.LASF1605:
	.string	"mem_mode"
.LASF1491:
	.string	"non_addressable"
.LASF880:
	.string	"CODE_FOR_extendsfdf2"
.LASF211:
	.string	"DEFINE_ATTR"
.LASF1433:
	.string	"vars"
.LASF678:
	.string	"CODE_FOR_rep_movqi"
.LASF1729:
	.string	"check_any"
.LASF109:
	.string	"long long unsigned int"
.LASF1855:
	.string	"ever_live_at_start"
.LASF723:
	.string	"CODE_FOR_sse_movhlps"
.LASF992:
	.string	"CODE_FOR_lshrhi3"
.LASF1939:
	.string	"reload_reg_used_in_op_addr"
.LASF970:
	.string	"CODE_FOR_negtf2"
.LASF242:
	.string	"VALUE"
.LASF316:
	.string	"min_after_base"
.LASF1390:
	.string	"readonly_flag"
.LASF451:
	.string	"promoted_mode"
.LASF1607:
	.string	"__FUNCTION__"
.LASF179:
	.string	"MODE_COMPLEX_INT"
.LASF1944:
	.string	"reload_reg_used_for_inherit"
.LASF273:
	.string	"POST_MODIFY"
.LASF779:
	.string	"CODE_FOR_sssubv4hi3"
.LASF1654:
	.string	"find_reload_regs"
.LASF1337:
	.string	"BUILT_IN_NEXT_ARG"
.LASF1440:
	.string	"tree_type"
.LASF1752:
	.string	"test_mode"
.LASF303:
	.string	"VEC_CONCAT"
.LASF687:
	.string	"CODE_FOR_rep_stosdi_rex64"
.LASF111:
	.string	"reg_class"
.LASF1074:
	.string	"CODE_FOR_strsethi_rex64"
.LASF1001:
	.string	"CODE_FOR_rotrqi3"
.LASF676:
	.string	"CODE_FOR_rep_movsi"
.LASF604:
	.string	"CODE_FOR_floatsixf2"
.LASF1798:
	.string	"emit_reload_insns"
.LASF1419:
	.string	"tree_vector"
.LASF1432:
	.string	"block_num"
.LASF2005:
	.string	"caller_save_needed"
.LASF570:
	.string	"CODE_FOR_movsi_insv_1"
.LASF1170:
	.string	"const_equiv"
.LASF1425:
	.string	"tree_vec"
.LASF1846:
	.string	"best_reject"
.LASF1489:
	.string	"built_in_class"
.LASF1697:
	.string	"new_icode"
.LASF288:
	.string	"UNSIGNED_FLOAT"
.LASF1182:
	.string	"basic_block"
.LASF1183:
	.string	"changes_mode"
.LASF1129:
	.string	"OTI_ftrunc"
.LASF631:
	.string	"CODE_FOR_ashrdi3_63_rex64"
.LASF132:
	.string	"QCmode"
.LASF154:
	.string	"V8SImode"
.LASF1641:
	.string	"spilled"
.LASF1815:
	.string	"current_insn"
.LASF1790:
	.string	"third_reloadreg"
.LASF1257:
	.string	"OP_IN"
.LASF877:
	.string	"CODE_FOR_zero_extendqisi2"
.LASF227:
	.string	"UNSPEC"
.LASF426:
	.string	"GR_VIRTUAL_STACK_ARGS"
.LASF620:
	.string	"CODE_FOR_andqi_ext_0"
.LASF412:
	.string	"NOTE_INSN_RANGE_BEG"
.LASF716:
	.string	"CODE_FOR_sse_movups"
.LASF1514:
	.string	"TI_UINTSI_TYPE"
.LASF1874:
	.string	"src3"
.LASF271:
	.string	"POST_INC"
.LASF1072:
	.string	"CODE_FOR_strsetsi_rex64"
.LASF251:
	.string	"IF_THEN_ELSE"
.LASF28:
	.string	"NO_REGS"
.LASF991:
	.string	"CODE_FOR_lshrsi3"
.LASF2011:
	.string	"reg_equiv_address"
.LASF1902:
	.string	"spill_reg_stored_to"
.LASF1294:
	.string	"BUILT_IN_LLABS"
.LASF1193:
	.string	"bits"
.LASF1172:
	.string	"reg_info_def"
.LASF964:
	.string	"CODE_FOR_negsi2"
.LASF470:
	.string	"x_pending_stack_adjust"
.LASF1250:
	.string	"used_spill_regs"
.LASF918:
	.string	"CODE_FOR_subxf3"
.LASF207:
	.string	"DEFINE_ASM_ATTRIBUTES"
.LASF1013:
	.string	"CODE_FOR_sle"
.LASF361:
	.string	"flags"
.LASF258:
	.string	"UMOD"
.LASF7:
	.string	"used"
.LASF1785:
	.string	"emit_output_reload_insns"
.LASF1215:
	.string	"RELOAD_FOR_INSN"
.LASF1009:
	.string	"CODE_FOR_slt"
.LASF1861:
	.string	"index_reg"
.LASF559:
	.string	"temp_slot"
.LASF1146:
	.string	"OTI_abs"
.LASF911:
	.string	"CODE_FOR_addtf3"
.LASF74:
	.string	"FILE"
.LASF32:
	.string	"BREG"
.LASF458:
	.string	"x_reg_rtx_no"
.LASF1053:
	.string	"CODE_FOR_epilogue"
.LASF45:
	.string	"MMX_REGS"
.LASF1124:
	.string	"OTI_sdivmod"
.LASF1340:
	.string	"BUILT_IN_FRAME_ADDRESS"
.LASF1293:
	.string	"BUILT_IN_FABSL"
.LASF1162:
	.string	"const_equiv_data"
.LASF1714:
	.string	"set2"
.LASF848:
	.string	"CODE_FOR_pfrsqrtv2sf2"
.LASF1120:
	.string	"OTI_smul_widen"
.LASF1804:
	.string	"num_regs"
.LASF1638:
	.string	"used_by_pseudos"
.LASF1082:
	.string	"CODE_FOR_movsicc"
.LASF1108:
	.string	"libfunc"
.LASF73:
	.string	"char"
.LASF1366:
	.string	"BUILT_IN_ISLESS"
.LASF1280:
	.string	"genfun"
.LASF1176:
	.string	"sets"
.LASF1006:
	.string	"CODE_FOR_sne"
.LASF1722:
	.string	"forget_old_reloads_1"
.LASF1112:
	.string	"OTI_add"
.LASF1271:
	.string	"insn_operand_predicate_fn"
.LASF1629:
	.string	"calculate_needs_all_insns"
.LASF741:
	.string	"CODE_FOR_rsqrtv4sf2"
.LASF845:
	.string	"CODE_FOR_pfrcpv2sf2"
.LASF951:
	.string	"CODE_FOR_andsi3"
.LASF904:
	.string	"CODE_FOR_floatsidf2"
.LASF1114:
	.string	"OTI_sub"
.LASF257:
	.string	"UDIV"
.LASF1852:
	.string	"last_label_ruid"
.LASF2003:
	.string	"regs_ever_live"
.LASF1971:
	.string	"mode_mask_array"
.LASF1946:
	.string	"input_reload_insns"
.LASF720:
	.string	"CODE_FOR_mmx_maskmovq_rex"
.LASF1359:
	.string	"BUILT_IN_PRINTF_UNLOCKED"
.LASF26:
	.string	"block"
.LASF1941:
	.string	"reload_reg_used_in_insn"
.LASF317:
	.string	"max_after_base"
.LASF1978:
	.string	"reg_class_contents"
.LASF1002:
	.string	"CODE_FOR_extv"
.LASF518:
	.string	"fixup_var_refs_queue"
.LASF614:
	.string	"CODE_FOR_divqi3"
.LASF975:
	.string	"CODE_FOR_one_cmpldi2"
.LASF584:
	.string	"CODE_FOR_extendqihi2"
.LASF139:
	.string	"CHImode"
.LASF1059:
	.string	"CODE_FOR_movstrsi"
.LASF1303:
	.string	"BUILT_IN_CIMAGF"
.LASF552:
	.string	"uses_pic_offset_table"
.LASF1304:
	.string	"BUILT_IN_CIMAGL"
.LASF1503:
	.string	"pointer_alias_set"
.LASF715:
	.string	"CODE_FOR_sse_movaps"
.LASF330:
	.string	"rtint"
.LASF740:
	.string	"CODE_FOR_vmrcpv4sf2"
.LASF1003:
	.string	"CODE_FOR_extzv"
.LASF1848:
	.string	"this_reject"
.LASF1628:
	.string	"copy_reloads"
.LASF1789:
	.string	"tertiary_icode"
.LASF660:
	.string	"CODE_FOR_sinsf2"
.LASF157:
	.string	"V2SFmode"
.LASF1972:
	.string	"word_mode"
.LASF656:
	.string	"CODE_FOR_sqrtdf2_i387"
.LASF1519:
	.string	"TI_INTEGER_MINUS_ONE"
.LASF920:
	.string	"CODE_FOR_subdf3"
.LASF841:
	.string	"CODE_FOR_pfpnacc"
.LASF362:
	.string	"rtunion"
.LASF1837:
	.string	"old_cost"
.LASF1922:
	.string	"offsets_at"
.LASF1156:
	.string	"OTI_strlen"
.LASF339:
	.string	"cselib_val_struct"
.LASF1316:
	.string	"BUILT_IN_STRNCPY"
.LASF1832:
	.string	"reload_cse_regs"
.LASF353:
	.string	"local_set"
.LASF52:
	.string	"ALL_REGS"
.LASF1945:
	.string	"reg_used_in_insn"
.LASF42:
	.string	"FP_SECOND_REG"
.LASF811:
	.string	"CODE_FOR_mmx_lshrdi3"
.LASF1000:
	.string	"CODE_FOR_rotrhi3"
.LASF1190:
	.string	"data"
.LASF1764:
	.string	"search_equiv"
.LASF427:
	.string	"GR_VIRTUAL_STACK_DYNAMIC"
.LASF1534:
	.string	"TI_PTR_TYPE"
.LASF1034:
	.string	"CODE_FOR_bordered"
.LASF1327:
	.string	"BUILT_IN_SIN"
.LASF315:
	.string	"max_after_vec"
.LASF1249:
	.string	"n_reloads"
.LASF1168:
	.string	"bitmap"
.LASF1171:
	.string	"sched_info_tag"
.LASF595:
	.string	"CODE_FOR_fix_truncdfsi_sse"
.LASF1043:
	.string	"CODE_FOR_doloop_end"
.LASF89:
	.string	"_chain"
.LASF1603:
	.string	"word_"
.LASF1551:
	.string	"TI_V8QI_TYPE"
.LASF585:
	.string	"CODE_FOR_extendqisi2"
.LASF1937:
	.string	"reload_reg_used_in_input"
.LASF711:
	.string	"CODE_FOR_movv4hi_internal"
.LASF1883:
	.string	"endregno"
.LASF55:
	.string	"words"
.LASF468:
	.string	"x_regno_reg_rtx"
.LASF517:
	.string	"x_target_temp_slot_level"
.LASF1:
	.string	"mode"
.LASF629:
	.string	"CODE_FOR_ashldi3_1"
.LASF1867:
	.string	"reload_combine_note_use"
.LASF726:
	.string	"CODE_FOR_sse_movlps"
.LASF1453:
	.string	"pointer_to"
.LASF1277:
	.string	"eliminable"
.LASF1626:
	.string	"clobbered"
.LASF445:
	.string	"extra_arg"
.LASF343:
	.string	"bitmap_head_def"
.LASF914:
	.string	"CODE_FOR_subdi3"
.LASF1505:
	.string	"tree_index"
.LASF668:
	.string	"CODE_FOR_strmovdi_rex_1"
.LASF208:
	.string	"DEFINE_COND_EXEC"
.LASF1418:
	.string	"imag"
.LASF793:
	.string	"CODE_FOR_mmx_psadbw"
.LASF1604:
	.string	"mask_"
.LASF145:
	.string	"V2HImode"
.LASF1715:
	.string	"finish_spills"
.LASF422:
	.string	"GR_FRAME_POINTER"
.LASF1599:
	.string	"ptr_"
.LASF459:
	.string	"x_first_label_num"
.LASF1261:
	.string	"operand"
.LASF237:
	.string	"CONST_INT"
.LASF128:
	.string	"SFmode"
.LASF216:
	.string	"ATTR_FLAG"
.LASF376:
	.string	"REG_LABEL"
.LASF1778:
	.string	"emit_input_reload_insns"
.LASF1036:
	.string	"CODE_FOR_bunge"
.LASF1700:
	.string	"verify_initial_elim_offsets"
.LASF999:
	.string	"CODE_FOR_rotrsi3"
.LASF18:
	.string	"real_cst"
.LASF765:
	.string	"CODE_FOR_cvtsi2ss"
.LASF878:
	.string	"CODE_FOR_zero_extendsidi2"
.LASF596:
	.string	"CODE_FOR_fix_trunchi_nomemory"
.LASF850:
	.string	"CODE_FOR_pmulhrwv4hi3"
.LASF1159:
	.string	"OTI_cstore"
.LASF1996:
	.string	"cfun"
.LASF284:
	.string	"TRUNCATE"
.LASF10:
	.string	"rtvec"
.LASF1982:
	.string	"rtx_length"
.LASF1497:
	.string	"assembler_name"
.LASF1325:
	.string	"BUILT_IN_STRRCHR"
.LASF483:
	.string	"pops_args"
.LASF1315:
	.string	"BUILT_IN_STRCPY"
.LASF1458:
	.string	"next_variant"
.LASF1950:
	.string	"inpaddr_address_reload_insns"
.LASF1958:
	.string	"reg_reloaded_died"
.LASF1502:
	.string	"vindex"
.LASF1087:
	.string	"CODE_FOR_movtfcc"
.LASF1538:
	.string	"TI_VOID_LIST_NODE"
.LASF1278:
	.string	"insn_data"
.LASF1573:
	.string	"SIZETYPE"
.LASF169:
	.string	"CCZmode"
.LASF397:
	.string	"NOTE_INSN_BLOCK_BEG"
.LASF806:
	.string	"CODE_FOR_sminv4hi3"
.LASF1400:
	.string	"bounded_flag"
.LASF1567:
	.string	"itk_unsigned_long"
.LASF75:
	.string	"_IO_FILE"
.LASF501:
	.string	"x_stack_slot_list"
.LASF558:
	.string	"initial_value_struct"
.LASF760:
	.string	"CODE_FOR_sminv4sf3"
.LASF1578:
	.string	"UBITSIZETYPE"
.LASF1549:
	.string	"TI_V4SI_TYPE"
.LASF1465:
	.string	"off_align"
.LASF603:
	.string	"CODE_FOR_floathitf2"
.LASF1096:
	.string	"CODE_FOR_conditional_trap"
.LASF512:
	.string	"x_max_parm_reg"
.LASF1226:
	.string	"inmode"
.LASF1501:
	.string	"inlined_fns"
.LASF589:
	.string	"CODE_FOR_fix_truncdi_memory"
.LASF1443:
	.string	"attributes"
.LASF702:
	.string	"CODE_FOR_sse_movsfcc_eq"
.LASF748:
	.string	"CODE_FOR_sse_xorti3"
.LASF1413:
	.string	"tree_string"
.LASF943:
	.string	"CODE_FOR_divsf3"
.LASF1253:
	.string	"need_operand_change"
.LASF832:
	.string	"CODE_FOR_eqv2sf3"
.LASF1130:
	.string	"OTI_and"
.LASF2015:
	.string	"reload_n_operands"
.LASF1976:
	.string	"call_used_reg_set"
.LASF1446:
	.string	"no_force_blk_flag"
.LASF1046:
	.string	"CODE_FOR_call_exp"
.LASF899:
	.string	"CODE_FOR_fix_trunctfhi2"
.LASF23:
	.string	"decl"
.LASF1469:
	.string	"external_flag"
.LASF116:
	.string	"HImode"
.LASF1956:
	.string	"other_output_reload_insns"
.LASF1701:
	.string	"set_initial_elim_offsets"
.LASF1839:
	.string	"reload_cse_simplify_operands"
.LASF1466:
	.string	"tree_decl"
.LASF1420:
	.string	"elements"
.LASF1083:
	.string	"CODE_FOR_movhicc"
.LASF666:
	.string	"CODE_FOR_costf2"
.LASF222:
	.string	"NOTE"
.LASF302:
	.string	"VEC_SELECT"
.LASF34:
	.string	"DIREG"
.LASF1698:
	.string	"update_eliminable_offsets"
.LASF1139:
	.string	"OTI_smax"
.LASF1456:
	.string	"minval"
.LASF610:
	.string	"CODE_FOR_addqi_ext_1"
.LASF1829:
	.string	"body"
.LASF772:
	.string	"CODE_FOR_ssaddv4hi3"
.LASF761:
	.string	"CODE_FOR_vmsminv4sf3"
.LASF800:
	.string	"CODE_FOR_gtv8qi3"
.LASF1834:
	.string	"did_change"
.LASF1758:
	.string	"choose_reload_regs_init"
.LASF1517:
	.string	"TI_INTEGER_ZERO"
.LASF1725:
	.string	"clear_reload_reg_in_use"
.LASF826:
	.string	"CODE_FOR_stmxcsr"
.LASF1414:
	.string	"length"
.LASF1592:
	.string	"use_index"
.LASF488:
	.string	"args_info"
.LASF1265:
	.string	"operand_type"
.LASF1111:
	.string	"optab_index"
.LASF1961:
	.string	"reg_set_luid"
.LASF790:
	.string	"CODE_FOR_mmx_nanddi3"
.LASF937:
	.string	"CODE_FOR_multf3"
.LASF1232:
	.string	"secondary_in_reload"
.LASF548:
	.string	"stdarg"
.LASF1602:
	.string	"word_num_"
.LASF1704:
	.string	"label_nr"
.LASF2007:
	.string	"basic_block_info"
.LASF1194:
	.string	"bitmap_element"
.LASF2022:
	.string	"rtl_dump_file"
.LASF283:
	.string	"ZERO_EXTEND"
.LASF194:
	.string	"MATCH_PARALLEL"
.LASF1090:
	.string	"CODE_FOR_maxsf3"
.LASF203:
	.string	"DEFINE_COMBINE"
.LASF1387:
	.string	"constant_flag"
.LASF1341:
	.string	"BUILT_IN_RETURN_ADDRESS"
.LASF63:
	.string	"unsigned int"
.LASF1238:
	.string	"nocombine"
.LASF839:
	.string	"CODE_FOR_pfacc"
.LASF403:
	.string	"NOTE_INSN_LOOP_END_TOP_COND"
.LASF469:
	.string	"expr_status"
.LASF799:
	.string	"CODE_FOR_eqv2si3"
.LASF641:
	.string	"CODE_FOR_return_pop_internal"
.LASF1579:
	.string	"TYPE_KIND_LAST"
.LASF1289:
	.string	"BUILT_IN_ABS"
.LASF1151:
	.string	"OTI_sin"
.LASF320:
	.string	"addr_diff_vec_flags"
.LASF411:
	.string	"NOTE_INSN_REPEATED_LINE_NUMBER"
	.ident	"GCC: (Ubuntu/Linaro 4.8.1-10ubuntu9) 4.8.1"
	.section	.note.GNU-stack,"",@progbits
